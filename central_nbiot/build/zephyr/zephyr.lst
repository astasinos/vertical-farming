
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	20013dc8 	.word	0x20013dc8
   10004:	00014399 	.word	0x00014399
   10008:	0001fecd 	.word	0x0001fecd
   1000c:	0001436d 	.word	0x0001436d
   10010:	0001436d 	.word	0x0001436d
   10014:	0001436d 	.word	0x0001436d
   10018:	0001436d 	.word	0x0001436d
   1001c:	0001436d 	.word	0x0001436d
	...
   1002c:	00013e0d 	.word	0x00013e0d
   10030:	0001436d 	.word	0x0001436d
   10034:	00000000 	.word	0x00000000
   10038:	00013db1 	.word	0x00013db1
   1003c:	0001436d 	.word	0x0001436d

00010040 <_irq_vector_table>:
   10040:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10050:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10060:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10070:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10080:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10090:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   100a0:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   100b0:	0001590d 00013e8d 00013e8d 00013e8d     .Y...>...>...>..
   100c0:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   100d0:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   100e0:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   100f0:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10100:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10110:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10120:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10130:	00013e8d 00013e8d 00013e8d 00013e8d     .>...>...>...>..
   10140:	00013e8d                                .>..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	00015830 00000001 00010000 00010000     0X..............
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00010240 <__aeabi_fmul>:
   10240:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   10248:	bf1e      	ittt	ne
   1024a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1024e:	ea92 0f0c 	teqne	r2, ip
   10252:	ea93 0f0c 	teqne	r3, ip
   10256:	d06f      	beq.n	10338 <__aeabi_fmul+0xf8>
   10258:	441a      	add	r2, r3
   1025a:	ea80 0c01 	eor.w	ip, r0, r1
   1025e:	0240      	lsls	r0, r0, #9
   10260:	bf18      	it	ne
   10262:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   10266:	d01e      	beq.n	102a6 <__aeabi_fmul+0x66>
   10268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1026c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   10270:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   10274:	fba0 3101 	umull	r3, r1, r0, r1
   10278:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1027c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   10280:	bf3e      	ittt	cc
   10282:	0049      	lslcc	r1, r1, #1
   10284:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   10288:	005b      	lslcc	r3, r3, #1
   1028a:	ea40 0001 	orr.w	r0, r0, r1
   1028e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   10292:	2afd      	cmp	r2, #253	; 0xfd
   10294:	d81d      	bhi.n	102d2 <__aeabi_fmul+0x92>
   10296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1029a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1029e:	bf08      	it	eq
   102a0:	f020 0001 	biceq.w	r0, r0, #1
   102a4:	4770      	bx	lr
   102a6:	f090 0f00 	teq	r0, #0
   102aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   102ae:	bf08      	it	eq
   102b0:	0249      	lsleq	r1, r1, #9
   102b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   102b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   102ba:	3a7f      	subs	r2, #127	; 0x7f
   102bc:	bfc2      	ittt	gt
   102be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   102c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   102c6:	4770      	bxgt	lr
   102c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   102cc:	f04f 0300 	mov.w	r3, #0
   102d0:	3a01      	subs	r2, #1
   102d2:	dc5d      	bgt.n	10390 <__aeabi_fmul+0x150>
   102d4:	f112 0f19 	cmn.w	r2, #25
   102d8:	bfdc      	itt	le
   102da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   102de:	4770      	bxle	lr
   102e0:	f1c2 0200 	rsb	r2, r2, #0
   102e4:	0041      	lsls	r1, r0, #1
   102e6:	fa21 f102 	lsr.w	r1, r1, r2
   102ea:	f1c2 0220 	rsb	r2, r2, #32
   102ee:	fa00 fc02 	lsl.w	ip, r0, r2
   102f2:	ea5f 0031 	movs.w	r0, r1, rrx
   102f6:	f140 0000 	adc.w	r0, r0, #0
   102fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   102fe:	bf08      	it	eq
   10300:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10304:	4770      	bx	lr
   10306:	f092 0f00 	teq	r2, #0
   1030a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1030e:	bf02      	ittt	eq
   10310:	0040      	lsleq	r0, r0, #1
   10312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   10316:	3a01      	subeq	r2, #1
   10318:	d0f9      	beq.n	1030e <__aeabi_fmul+0xce>
   1031a:	ea40 000c 	orr.w	r0, r0, ip
   1031e:	f093 0f00 	teq	r3, #0
   10322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10326:	bf02      	ittt	eq
   10328:	0049      	lsleq	r1, r1, #1
   1032a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1032e:	3b01      	subeq	r3, #1
   10330:	d0f9      	beq.n	10326 <__aeabi_fmul+0xe6>
   10332:	ea41 010c 	orr.w	r1, r1, ip
   10336:	e78f      	b.n	10258 <__aeabi_fmul+0x18>
   10338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1033c:	ea92 0f0c 	teq	r2, ip
   10340:	bf18      	it	ne
   10342:	ea93 0f0c 	teqne	r3, ip
   10346:	d00a      	beq.n	1035e <__aeabi_fmul+0x11e>
   10348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1034c:	bf18      	it	ne
   1034e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   10352:	d1d8      	bne.n	10306 <__aeabi_fmul+0xc6>
   10354:	ea80 0001 	eor.w	r0, r0, r1
   10358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1035c:	4770      	bx	lr
   1035e:	f090 0f00 	teq	r0, #0
   10362:	bf17      	itett	ne
   10364:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   10368:	4608      	moveq	r0, r1
   1036a:	f091 0f00 	teqne	r1, #0
   1036e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   10372:	d014      	beq.n	1039e <__aeabi_fmul+0x15e>
   10374:	ea92 0f0c 	teq	r2, ip
   10378:	d101      	bne.n	1037e <__aeabi_fmul+0x13e>
   1037a:	0242      	lsls	r2, r0, #9
   1037c:	d10f      	bne.n	1039e <__aeabi_fmul+0x15e>
   1037e:	ea93 0f0c 	teq	r3, ip
   10382:	d103      	bne.n	1038c <__aeabi_fmul+0x14c>
   10384:	024b      	lsls	r3, r1, #9
   10386:	bf18      	it	ne
   10388:	4608      	movne	r0, r1
   1038a:	d108      	bne.n	1039e <__aeabi_fmul+0x15e>
   1038c:	ea80 0001 	eor.w	r0, r0, r1
   10390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1039c:	4770      	bx	lr
   1039e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   103a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   103a6:	4770      	bx	lr

000103a8 <__aeabi_drsub>:
   103a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   103ac:	e002      	b.n	103b4 <__adddf3>
   103ae:	bf00      	nop

000103b0 <__aeabi_dsub>:
   103b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000103b4 <__adddf3>:
   103b4:	b530      	push	{r4, r5, lr}
   103b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   103ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   103be:	ea94 0f05 	teq	r4, r5
   103c2:	bf08      	it	eq
   103c4:	ea90 0f02 	teqeq	r0, r2
   103c8:	bf1f      	itttt	ne
   103ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   103ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   103d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   103d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   103da:	f000 80e2 	beq.w	105a2 <__adddf3+0x1ee>
   103de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   103e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   103e6:	bfb8      	it	lt
   103e8:	426d      	neglt	r5, r5
   103ea:	dd0c      	ble.n	10406 <__adddf3+0x52>
   103ec:	442c      	add	r4, r5
   103ee:	ea80 0202 	eor.w	r2, r0, r2
   103f2:	ea81 0303 	eor.w	r3, r1, r3
   103f6:	ea82 0000 	eor.w	r0, r2, r0
   103fa:	ea83 0101 	eor.w	r1, r3, r1
   103fe:	ea80 0202 	eor.w	r2, r0, r2
   10402:	ea81 0303 	eor.w	r3, r1, r3
   10406:	2d36      	cmp	r5, #54	; 0x36
   10408:	bf88      	it	hi
   1040a:	bd30      	pophi	{r4, r5, pc}
   1040c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10410:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   10418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1041c:	d002      	beq.n	10424 <__adddf3+0x70>
   1041e:	4240      	negs	r0, r0
   10420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   10428:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1042c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   10430:	d002      	beq.n	10438 <__adddf3+0x84>
   10432:	4252      	negs	r2, r2
   10434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10438:	ea94 0f05 	teq	r4, r5
   1043c:	f000 80a7 	beq.w	1058e <__adddf3+0x1da>
   10440:	f1a4 0401 	sub.w	r4, r4, #1
   10444:	f1d5 0e20 	rsbs	lr, r5, #32
   10448:	db0d      	blt.n	10466 <__adddf3+0xb2>
   1044a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1044e:	fa22 f205 	lsr.w	r2, r2, r5
   10452:	1880      	adds	r0, r0, r2
   10454:	f141 0100 	adc.w	r1, r1, #0
   10458:	fa03 f20e 	lsl.w	r2, r3, lr
   1045c:	1880      	adds	r0, r0, r2
   1045e:	fa43 f305 	asr.w	r3, r3, r5
   10462:	4159      	adcs	r1, r3
   10464:	e00e      	b.n	10484 <__adddf3+0xd0>
   10466:	f1a5 0520 	sub.w	r5, r5, #32
   1046a:	f10e 0e20 	add.w	lr, lr, #32
   1046e:	2a01      	cmp	r2, #1
   10470:	fa03 fc0e 	lsl.w	ip, r3, lr
   10474:	bf28      	it	cs
   10476:	f04c 0c02 	orrcs.w	ip, ip, #2
   1047a:	fa43 f305 	asr.w	r3, r3, r5
   1047e:	18c0      	adds	r0, r0, r3
   10480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   10484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10488:	d507      	bpl.n	1049a <__adddf3+0xe6>
   1048a:	f04f 0e00 	mov.w	lr, #0
   1048e:	f1dc 0c00 	rsbs	ip, ip, #0
   10492:	eb7e 0000 	sbcs.w	r0, lr, r0
   10496:	eb6e 0101 	sbc.w	r1, lr, r1
   1049a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1049e:	d31b      	bcc.n	104d8 <__adddf3+0x124>
   104a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   104a4:	d30c      	bcc.n	104c0 <__adddf3+0x10c>
   104a6:	0849      	lsrs	r1, r1, #1
   104a8:	ea5f 0030 	movs.w	r0, r0, rrx
   104ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   104b0:	f104 0401 	add.w	r4, r4, #1
   104b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   104b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   104bc:	f080 809a 	bcs.w	105f4 <__adddf3+0x240>
   104c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   104c4:	bf08      	it	eq
   104c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   104ca:	f150 0000 	adcs.w	r0, r0, #0
   104ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   104d2:	ea41 0105 	orr.w	r1, r1, r5
   104d6:	bd30      	pop	{r4, r5, pc}
   104d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   104dc:	4140      	adcs	r0, r0
   104de:	eb41 0101 	adc.w	r1, r1, r1
   104e2:	3c01      	subs	r4, #1
   104e4:	bf28      	it	cs
   104e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   104ea:	d2e9      	bcs.n	104c0 <__adddf3+0x10c>
   104ec:	f091 0f00 	teq	r1, #0
   104f0:	bf04      	itt	eq
   104f2:	4601      	moveq	r1, r0
   104f4:	2000      	moveq	r0, #0
   104f6:	fab1 f381 	clz	r3, r1
   104fa:	bf08      	it	eq
   104fc:	3320      	addeq	r3, #32
   104fe:	f1a3 030b 	sub.w	r3, r3, #11
   10502:	f1b3 0220 	subs.w	r2, r3, #32
   10506:	da0c      	bge.n	10522 <__adddf3+0x16e>
   10508:	320c      	adds	r2, #12
   1050a:	dd08      	ble.n	1051e <__adddf3+0x16a>
   1050c:	f102 0c14 	add.w	ip, r2, #20
   10510:	f1c2 020c 	rsb	r2, r2, #12
   10514:	fa01 f00c 	lsl.w	r0, r1, ip
   10518:	fa21 f102 	lsr.w	r1, r1, r2
   1051c:	e00c      	b.n	10538 <__adddf3+0x184>
   1051e:	f102 0214 	add.w	r2, r2, #20
   10522:	bfd8      	it	le
   10524:	f1c2 0c20 	rsble	ip, r2, #32
   10528:	fa01 f102 	lsl.w	r1, r1, r2
   1052c:	fa20 fc0c 	lsr.w	ip, r0, ip
   10530:	bfdc      	itt	le
   10532:	ea41 010c 	orrle.w	r1, r1, ip
   10536:	4090      	lslle	r0, r2
   10538:	1ae4      	subs	r4, r4, r3
   1053a:	bfa2      	ittt	ge
   1053c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10540:	4329      	orrge	r1, r5
   10542:	bd30      	popge	{r4, r5, pc}
   10544:	ea6f 0404 	mvn.w	r4, r4
   10548:	3c1f      	subs	r4, #31
   1054a:	da1c      	bge.n	10586 <__adddf3+0x1d2>
   1054c:	340c      	adds	r4, #12
   1054e:	dc0e      	bgt.n	1056e <__adddf3+0x1ba>
   10550:	f104 0414 	add.w	r4, r4, #20
   10554:	f1c4 0220 	rsb	r2, r4, #32
   10558:	fa20 f004 	lsr.w	r0, r0, r4
   1055c:	fa01 f302 	lsl.w	r3, r1, r2
   10560:	ea40 0003 	orr.w	r0, r0, r3
   10564:	fa21 f304 	lsr.w	r3, r1, r4
   10568:	ea45 0103 	orr.w	r1, r5, r3
   1056c:	bd30      	pop	{r4, r5, pc}
   1056e:	f1c4 040c 	rsb	r4, r4, #12
   10572:	f1c4 0220 	rsb	r2, r4, #32
   10576:	fa20 f002 	lsr.w	r0, r0, r2
   1057a:	fa01 f304 	lsl.w	r3, r1, r4
   1057e:	ea40 0003 	orr.w	r0, r0, r3
   10582:	4629      	mov	r1, r5
   10584:	bd30      	pop	{r4, r5, pc}
   10586:	fa21 f004 	lsr.w	r0, r1, r4
   1058a:	4629      	mov	r1, r5
   1058c:	bd30      	pop	{r4, r5, pc}
   1058e:	f094 0f00 	teq	r4, #0
   10592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   10596:	bf06      	itte	eq
   10598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1059c:	3401      	addeq	r4, #1
   1059e:	3d01      	subne	r5, #1
   105a0:	e74e      	b.n	10440 <__adddf3+0x8c>
   105a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   105a6:	bf18      	it	ne
   105a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   105ac:	d029      	beq.n	10602 <__adddf3+0x24e>
   105ae:	ea94 0f05 	teq	r4, r5
   105b2:	bf08      	it	eq
   105b4:	ea90 0f02 	teqeq	r0, r2
   105b8:	d005      	beq.n	105c6 <__adddf3+0x212>
   105ba:	ea54 0c00 	orrs.w	ip, r4, r0
   105be:	bf04      	itt	eq
   105c0:	4619      	moveq	r1, r3
   105c2:	4610      	moveq	r0, r2
   105c4:	bd30      	pop	{r4, r5, pc}
   105c6:	ea91 0f03 	teq	r1, r3
   105ca:	bf1e      	ittt	ne
   105cc:	2100      	movne	r1, #0
   105ce:	2000      	movne	r0, #0
   105d0:	bd30      	popne	{r4, r5, pc}
   105d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   105d6:	d105      	bne.n	105e4 <__adddf3+0x230>
   105d8:	0040      	lsls	r0, r0, #1
   105da:	4149      	adcs	r1, r1
   105dc:	bf28      	it	cs
   105de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   105e2:	bd30      	pop	{r4, r5, pc}
   105e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   105e8:	bf3c      	itt	cc
   105ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   105ee:	bd30      	popcc	{r4, r5, pc}
   105f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   105f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   105f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   105fc:	f04f 0000 	mov.w	r0, #0
   10600:	bd30      	pop	{r4, r5, pc}
   10602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   10606:	bf1a      	itte	ne
   10608:	4619      	movne	r1, r3
   1060a:	4610      	movne	r0, r2
   1060c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   10610:	bf1c      	itt	ne
   10612:	460b      	movne	r3, r1
   10614:	4602      	movne	r2, r0
   10616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1061a:	bf06      	itte	eq
   1061c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   10620:	ea91 0f03 	teqeq	r1, r3
   10624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   10628:	bd30      	pop	{r4, r5, pc}
   1062a:	bf00      	nop

0001062c <__aeabi_ui2d>:
   1062c:	f090 0f00 	teq	r0, #0
   10630:	bf04      	itt	eq
   10632:	2100      	moveq	r1, #0
   10634:	4770      	bxeq	lr
   10636:	b530      	push	{r4, r5, lr}
   10638:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1063c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10640:	f04f 0500 	mov.w	r5, #0
   10644:	f04f 0100 	mov.w	r1, #0
   10648:	e750      	b.n	104ec <__adddf3+0x138>
   1064a:	bf00      	nop

0001064c <__aeabi_i2d>:
   1064c:	f090 0f00 	teq	r0, #0
   10650:	bf04      	itt	eq
   10652:	2100      	moveq	r1, #0
   10654:	4770      	bxeq	lr
   10656:	b530      	push	{r4, r5, lr}
   10658:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   10664:	bf48      	it	mi
   10666:	4240      	negmi	r0, r0
   10668:	f04f 0100 	mov.w	r1, #0
   1066c:	e73e      	b.n	104ec <__adddf3+0x138>
   1066e:	bf00      	nop

00010670 <__aeabi_f2d>:
   10670:	0042      	lsls	r2, r0, #1
   10672:	ea4f 01e2 	mov.w	r1, r2, asr #3
   10676:	ea4f 0131 	mov.w	r1, r1, rrx
   1067a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1067e:	bf1f      	itttt	ne
   10680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   10684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1068c:	4770      	bxne	lr
   1068e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   10692:	bf08      	it	eq
   10694:	4770      	bxeq	lr
   10696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1069a:	bf04      	itt	eq
   1069c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   106a0:	4770      	bxeq	lr
   106a2:	b530      	push	{r4, r5, lr}
   106a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   106a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   106ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106b0:	e71c      	b.n	104ec <__adddf3+0x138>
   106b2:	bf00      	nop

000106b4 <__aeabi_ul2d>:
   106b4:	ea50 0201 	orrs.w	r2, r0, r1
   106b8:	bf08      	it	eq
   106ba:	4770      	bxeq	lr
   106bc:	b530      	push	{r4, r5, lr}
   106be:	f04f 0500 	mov.w	r5, #0
   106c2:	e00a      	b.n	106da <__aeabi_l2d+0x16>

000106c4 <__aeabi_l2d>:
   106c4:	ea50 0201 	orrs.w	r2, r0, r1
   106c8:	bf08      	it	eq
   106ca:	4770      	bxeq	lr
   106cc:	b530      	push	{r4, r5, lr}
   106ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   106d2:	d502      	bpl.n	106da <__aeabi_l2d+0x16>
   106d4:	4240      	negs	r0, r0
   106d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   106da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   106de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   106e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   106e6:	f43f aed8 	beq.w	1049a <__adddf3+0xe6>
   106ea:	f04f 0203 	mov.w	r2, #3
   106ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   106f2:	bf18      	it	ne
   106f4:	3203      	addne	r2, #3
   106f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   106fa:	bf18      	it	ne
   106fc:	3203      	addne	r2, #3
   106fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   10702:	f1c2 0320 	rsb	r3, r2, #32
   10706:	fa00 fc03 	lsl.w	ip, r0, r3
   1070a:	fa20 f002 	lsr.w	r0, r0, r2
   1070e:	fa01 fe03 	lsl.w	lr, r1, r3
   10712:	ea40 000e 	orr.w	r0, r0, lr
   10716:	fa21 f102 	lsr.w	r1, r1, r2
   1071a:	4414      	add	r4, r2
   1071c:	e6bd      	b.n	1049a <__adddf3+0xe6>
   1071e:	bf00      	nop

00010720 <__aeabi_dmul>:
   10720:	b570      	push	{r4, r5, r6, lr}
   10722:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1072a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1072e:	bf1d      	ittte	ne
   10730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10734:	ea94 0f0c 	teqne	r4, ip
   10738:	ea95 0f0c 	teqne	r5, ip
   1073c:	f000 f8de 	bleq	108fc <__aeabi_dmul+0x1dc>
   10740:	442c      	add	r4, r5
   10742:	ea81 0603 	eor.w	r6, r1, r3
   10746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1074a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1074e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   10752:	bf18      	it	ne
   10754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   10758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1075c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10760:	d038      	beq.n	107d4 <__aeabi_dmul+0xb4>
   10762:	fba0 ce02 	umull	ip, lr, r0, r2
   10766:	f04f 0500 	mov.w	r5, #0
   1076a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1076e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   10772:	fbe0 e503 	umlal	lr, r5, r0, r3
   10776:	f04f 0600 	mov.w	r6, #0
   1077a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1077e:	f09c 0f00 	teq	ip, #0
   10782:	bf18      	it	ne
   10784:	f04e 0e01 	orrne.w	lr, lr, #1
   10788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1078c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10794:	d204      	bcs.n	107a0 <__aeabi_dmul+0x80>
   10796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1079a:	416d      	adcs	r5, r5
   1079c:	eb46 0606 	adc.w	r6, r6, r6
   107a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   107a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   107a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   107ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   107b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   107b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   107b8:	bf88      	it	hi
   107ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   107be:	d81e      	bhi.n	107fe <__aeabi_dmul+0xde>
   107c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   107c4:	bf08      	it	eq
   107c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   107ca:	f150 0000 	adcs.w	r0, r0, #0
   107ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   107d2:	bd70      	pop	{r4, r5, r6, pc}
   107d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   107d8:	ea46 0101 	orr.w	r1, r6, r1
   107dc:	ea40 0002 	orr.w	r0, r0, r2
   107e0:	ea81 0103 	eor.w	r1, r1, r3
   107e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   107e8:	bfc2      	ittt	gt
   107ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   107ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   107f2:	bd70      	popgt	{r4, r5, r6, pc}
   107f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   107f8:	f04f 0e00 	mov.w	lr, #0
   107fc:	3c01      	subs	r4, #1
   107fe:	f300 80ab 	bgt.w	10958 <__aeabi_dmul+0x238>
   10802:	f114 0f36 	cmn.w	r4, #54	; 0x36
   10806:	bfde      	ittt	le
   10808:	2000      	movle	r0, #0
   1080a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1080e:	bd70      	pople	{r4, r5, r6, pc}
   10810:	f1c4 0400 	rsb	r4, r4, #0
   10814:	3c20      	subs	r4, #32
   10816:	da35      	bge.n	10884 <__aeabi_dmul+0x164>
   10818:	340c      	adds	r4, #12
   1081a:	dc1b      	bgt.n	10854 <__aeabi_dmul+0x134>
   1081c:	f104 0414 	add.w	r4, r4, #20
   10820:	f1c4 0520 	rsb	r5, r4, #32
   10824:	fa00 f305 	lsl.w	r3, r0, r5
   10828:	fa20 f004 	lsr.w	r0, r0, r4
   1082c:	fa01 f205 	lsl.w	r2, r1, r5
   10830:	ea40 0002 	orr.w	r0, r0, r2
   10834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   10838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10840:	fa21 f604 	lsr.w	r6, r1, r4
   10844:	eb42 0106 	adc.w	r1, r2, r6
   10848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1084c:	bf08      	it	eq
   1084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10852:	bd70      	pop	{r4, r5, r6, pc}
   10854:	f1c4 040c 	rsb	r4, r4, #12
   10858:	f1c4 0520 	rsb	r5, r4, #32
   1085c:	fa00 f304 	lsl.w	r3, r0, r4
   10860:	fa20 f005 	lsr.w	r0, r0, r5
   10864:	fa01 f204 	lsl.w	r2, r1, r4
   10868:	ea40 0002 	orr.w	r0, r0, r2
   1086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10874:	f141 0100 	adc.w	r1, r1, #0
   10878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1087c:	bf08      	it	eq
   1087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10882:	bd70      	pop	{r4, r5, r6, pc}
   10884:	f1c4 0520 	rsb	r5, r4, #32
   10888:	fa00 f205 	lsl.w	r2, r0, r5
   1088c:	ea4e 0e02 	orr.w	lr, lr, r2
   10890:	fa20 f304 	lsr.w	r3, r0, r4
   10894:	fa01 f205 	lsl.w	r2, r1, r5
   10898:	ea43 0302 	orr.w	r3, r3, r2
   1089c:	fa21 f004 	lsr.w	r0, r1, r4
   108a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   108a4:	fa21 f204 	lsr.w	r2, r1, r4
   108a8:	ea20 0002 	bic.w	r0, r0, r2
   108ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   108b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   108b4:	bf08      	it	eq
   108b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   108ba:	bd70      	pop	{r4, r5, r6, pc}
   108bc:	f094 0f00 	teq	r4, #0
   108c0:	d10f      	bne.n	108e2 <__aeabi_dmul+0x1c2>
   108c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   108c6:	0040      	lsls	r0, r0, #1
   108c8:	eb41 0101 	adc.w	r1, r1, r1
   108cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   108d0:	bf08      	it	eq
   108d2:	3c01      	subeq	r4, #1
   108d4:	d0f7      	beq.n	108c6 <__aeabi_dmul+0x1a6>
   108d6:	ea41 0106 	orr.w	r1, r1, r6
   108da:	f095 0f00 	teq	r5, #0
   108de:	bf18      	it	ne
   108e0:	4770      	bxne	lr
   108e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   108e6:	0052      	lsls	r2, r2, #1
   108e8:	eb43 0303 	adc.w	r3, r3, r3
   108ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   108f0:	bf08      	it	eq
   108f2:	3d01      	subeq	r5, #1
   108f4:	d0f7      	beq.n	108e6 <__aeabi_dmul+0x1c6>
   108f6:	ea43 0306 	orr.w	r3, r3, r6
   108fa:	4770      	bx	lr
   108fc:	ea94 0f0c 	teq	r4, ip
   10900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10904:	bf18      	it	ne
   10906:	ea95 0f0c 	teqne	r5, ip
   1090a:	d00c      	beq.n	10926 <__aeabi_dmul+0x206>
   1090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10910:	bf18      	it	ne
   10912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10916:	d1d1      	bne.n	108bc <__aeabi_dmul+0x19c>
   10918:	ea81 0103 	eor.w	r1, r1, r3
   1091c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10920:	f04f 0000 	mov.w	r0, #0
   10924:	bd70      	pop	{r4, r5, r6, pc}
   10926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1092a:	bf06      	itte	eq
   1092c:	4610      	moveq	r0, r2
   1092e:	4619      	moveq	r1, r3
   10930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10934:	d019      	beq.n	1096a <__aeabi_dmul+0x24a>
   10936:	ea94 0f0c 	teq	r4, ip
   1093a:	d102      	bne.n	10942 <__aeabi_dmul+0x222>
   1093c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   10940:	d113      	bne.n	1096a <__aeabi_dmul+0x24a>
   10942:	ea95 0f0c 	teq	r5, ip
   10946:	d105      	bne.n	10954 <__aeabi_dmul+0x234>
   10948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1094c:	bf1c      	itt	ne
   1094e:	4610      	movne	r0, r2
   10950:	4619      	movne	r1, r3
   10952:	d10a      	bne.n	1096a <__aeabi_dmul+0x24a>
   10954:	ea81 0103 	eor.w	r1, r1, r3
   10958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1095c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10964:	f04f 0000 	mov.w	r0, #0
   10968:	bd70      	pop	{r4, r5, r6, pc}
   1096a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1096e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   10972:	bd70      	pop	{r4, r5, r6, pc}

00010974 <__aeabi_ddiv>:
   10974:	b570      	push	{r4, r5, r6, lr}
   10976:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1097a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1097e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   10982:	bf1d      	ittte	ne
   10984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10988:	ea94 0f0c 	teqne	r4, ip
   1098c:	ea95 0f0c 	teqne	r5, ip
   10990:	f000 f8a7 	bleq	10ae2 <__aeabi_ddiv+0x16e>
   10994:	eba4 0405 	sub.w	r4, r4, r5
   10998:	ea81 0e03 	eor.w	lr, r1, r3
   1099c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   109a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   109a4:	f000 8088 	beq.w	10ab8 <__aeabi_ddiv+0x144>
   109a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   109ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   109b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   109b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   109b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   109bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   109c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   109c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   109c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   109cc:	429d      	cmp	r5, r3
   109ce:	bf08      	it	eq
   109d0:	4296      	cmpeq	r6, r2
   109d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   109d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   109da:	d202      	bcs.n	109e2 <__aeabi_ddiv+0x6e>
   109dc:	085b      	lsrs	r3, r3, #1
   109de:	ea4f 0232 	mov.w	r2, r2, rrx
   109e2:	1ab6      	subs	r6, r6, r2
   109e4:	eb65 0503 	sbc.w	r5, r5, r3
   109e8:	085b      	lsrs	r3, r3, #1
   109ea:	ea4f 0232 	mov.w	r2, r2, rrx
   109ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   109f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   109f6:	ebb6 0e02 	subs.w	lr, r6, r2
   109fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   109fe:	bf22      	ittt	cs
   10a00:	1ab6      	subcs	r6, r6, r2
   10a02:	4675      	movcs	r5, lr
   10a04:	ea40 000c 	orrcs.w	r0, r0, ip
   10a08:	085b      	lsrs	r3, r3, #1
   10a0a:	ea4f 0232 	mov.w	r2, r2, rrx
   10a0e:	ebb6 0e02 	subs.w	lr, r6, r2
   10a12:	eb75 0e03 	sbcs.w	lr, r5, r3
   10a16:	bf22      	ittt	cs
   10a18:	1ab6      	subcs	r6, r6, r2
   10a1a:	4675      	movcs	r5, lr
   10a1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10a20:	085b      	lsrs	r3, r3, #1
   10a22:	ea4f 0232 	mov.w	r2, r2, rrx
   10a26:	ebb6 0e02 	subs.w	lr, r6, r2
   10a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   10a2e:	bf22      	ittt	cs
   10a30:	1ab6      	subcs	r6, r6, r2
   10a32:	4675      	movcs	r5, lr
   10a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10a38:	085b      	lsrs	r3, r3, #1
   10a3a:	ea4f 0232 	mov.w	r2, r2, rrx
   10a3e:	ebb6 0e02 	subs.w	lr, r6, r2
   10a42:	eb75 0e03 	sbcs.w	lr, r5, r3
   10a46:	bf22      	ittt	cs
   10a48:	1ab6      	subcs	r6, r6, r2
   10a4a:	4675      	movcs	r5, lr
   10a4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   10a50:	ea55 0e06 	orrs.w	lr, r5, r6
   10a54:	d018      	beq.n	10a88 <__aeabi_ddiv+0x114>
   10a56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   10a5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   10a5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   10a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   10a66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10a6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10a6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   10a72:	d1c0      	bne.n	109f6 <__aeabi_ddiv+0x82>
   10a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10a78:	d10b      	bne.n	10a92 <__aeabi_ddiv+0x11e>
   10a7a:	ea41 0100 	orr.w	r1, r1, r0
   10a7e:	f04f 0000 	mov.w	r0, #0
   10a82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   10a86:	e7b6      	b.n	109f6 <__aeabi_ddiv+0x82>
   10a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10a8c:	bf04      	itt	eq
   10a8e:	4301      	orreq	r1, r0
   10a90:	2000      	moveq	r0, #0
   10a92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10a96:	bf88      	it	hi
   10a98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10a9c:	f63f aeaf 	bhi.w	107fe <__aeabi_dmul+0xde>
   10aa0:	ebb5 0c03 	subs.w	ip, r5, r3
   10aa4:	bf04      	itt	eq
   10aa6:	ebb6 0c02 	subseq.w	ip, r6, r2
   10aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10aae:	f150 0000 	adcs.w	r0, r0, #0
   10ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10ab6:	bd70      	pop	{r4, r5, r6, pc}
   10ab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10abc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10ac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   10ac4:	bfc2      	ittt	gt
   10ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
   10aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10ace:	bd70      	popgt	{r4, r5, r6, pc}
   10ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10ad4:	f04f 0e00 	mov.w	lr, #0
   10ad8:	3c01      	subs	r4, #1
   10ada:	e690      	b.n	107fe <__aeabi_dmul+0xde>
   10adc:	ea45 0e06 	orr.w	lr, r5, r6
   10ae0:	e68d      	b.n	107fe <__aeabi_dmul+0xde>
   10ae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10ae6:	ea94 0f0c 	teq	r4, ip
   10aea:	bf08      	it	eq
   10aec:	ea95 0f0c 	teqeq	r5, ip
   10af0:	f43f af3b 	beq.w	1096a <__aeabi_dmul+0x24a>
   10af4:	ea94 0f0c 	teq	r4, ip
   10af8:	d10a      	bne.n	10b10 <__aeabi_ddiv+0x19c>
   10afa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10afe:	f47f af34 	bne.w	1096a <__aeabi_dmul+0x24a>
   10b02:	ea95 0f0c 	teq	r5, ip
   10b06:	f47f af25 	bne.w	10954 <__aeabi_dmul+0x234>
   10b0a:	4610      	mov	r0, r2
   10b0c:	4619      	mov	r1, r3
   10b0e:	e72c      	b.n	1096a <__aeabi_dmul+0x24a>
   10b10:	ea95 0f0c 	teq	r5, ip
   10b14:	d106      	bne.n	10b24 <__aeabi_ddiv+0x1b0>
   10b16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10b1a:	f43f aefd 	beq.w	10918 <__aeabi_dmul+0x1f8>
   10b1e:	4610      	mov	r0, r2
   10b20:	4619      	mov	r1, r3
   10b22:	e722      	b.n	1096a <__aeabi_dmul+0x24a>
   10b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10b28:	bf18      	it	ne
   10b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10b2e:	f47f aec5 	bne.w	108bc <__aeabi_dmul+0x19c>
   10b32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   10b36:	f47f af0d 	bne.w	10954 <__aeabi_dmul+0x234>
   10b3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   10b3e:	f47f aeeb 	bne.w	10918 <__aeabi_dmul+0x1f8>
   10b42:	e712      	b.n	1096a <__aeabi_dmul+0x24a>

00010b44 <__aeabi_d2f>:
   10b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10b4c:	bf24      	itt	cs
   10b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10b56:	d90d      	bls.n	10b74 <__aeabi_d2f+0x30>
   10b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10b6c:	bf08      	it	eq
   10b6e:	f020 0001 	biceq.w	r0, r0, #1
   10b72:	4770      	bx	lr
   10b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10b78:	d121      	bne.n	10bbe <__aeabi_d2f+0x7a>
   10b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10b7e:	bfbc      	itt	lt
   10b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10b84:	4770      	bxlt	lr
   10b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10b8e:	f1c2 0218 	rsb	r2, r2, #24
   10b92:	f1c2 0c20 	rsb	ip, r2, #32
   10b96:	fa10 f30c 	lsls.w	r3, r0, ip
   10b9a:	fa20 f002 	lsr.w	r0, r0, r2
   10b9e:	bf18      	it	ne
   10ba0:	f040 0001 	orrne.w	r0, r0, #1
   10ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10bac:	fa03 fc0c 	lsl.w	ip, r3, ip
   10bb0:	ea40 000c 	orr.w	r0, r0, ip
   10bb4:	fa23 f302 	lsr.w	r3, r3, r2
   10bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10bbc:	e7cc      	b.n	10b58 <__aeabi_d2f+0x14>
   10bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10bc2:	d107      	bne.n	10bd4 <__aeabi_d2f+0x90>
   10bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10bc8:	bf1e      	ittt	ne
   10bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10bd2:	4770      	bxne	lr
   10bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10be0:	4770      	bx	lr
   10be2:	bf00      	nop

00010be4 <__aeabi_frsub>:
   10be4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10be8:	e002      	b.n	10bf0 <__addsf3>
   10bea:	bf00      	nop

00010bec <__aeabi_fsub>:
   10bec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010bf0 <__addsf3>:
   10bf0:	0042      	lsls	r2, r0, #1
   10bf2:	bf1f      	itttt	ne
   10bf4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10bf8:	ea92 0f03 	teqne	r2, r3
   10bfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10c00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10c04:	d06a      	beq.n	10cdc <__addsf3+0xec>
   10c06:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10c0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   10c0e:	bfc1      	itttt	gt
   10c10:	18d2      	addgt	r2, r2, r3
   10c12:	4041      	eorgt	r1, r0
   10c14:	4048      	eorgt	r0, r1
   10c16:	4041      	eorgt	r1, r0
   10c18:	bfb8      	it	lt
   10c1a:	425b      	neglt	r3, r3
   10c1c:	2b19      	cmp	r3, #25
   10c1e:	bf88      	it	hi
   10c20:	4770      	bxhi	lr
   10c22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10c26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10c2e:	bf18      	it	ne
   10c30:	4240      	negne	r0, r0
   10c32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10c36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10c3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10c3e:	bf18      	it	ne
   10c40:	4249      	negne	r1, r1
   10c42:	ea92 0f03 	teq	r2, r3
   10c46:	d03f      	beq.n	10cc8 <__addsf3+0xd8>
   10c48:	f1a2 0201 	sub.w	r2, r2, #1
   10c4c:	fa41 fc03 	asr.w	ip, r1, r3
   10c50:	eb10 000c 	adds.w	r0, r0, ip
   10c54:	f1c3 0320 	rsb	r3, r3, #32
   10c58:	fa01 f103 	lsl.w	r1, r1, r3
   10c5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10c60:	d502      	bpl.n	10c68 <__addsf3+0x78>
   10c62:	4249      	negs	r1, r1
   10c64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10c68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10c6c:	d313      	bcc.n	10c96 <__addsf3+0xa6>
   10c6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10c72:	d306      	bcc.n	10c82 <__addsf3+0x92>
   10c74:	0840      	lsrs	r0, r0, #1
   10c76:	ea4f 0131 	mov.w	r1, r1, rrx
   10c7a:	f102 0201 	add.w	r2, r2, #1
   10c7e:	2afe      	cmp	r2, #254	; 0xfe
   10c80:	d251      	bcs.n	10d26 <__addsf3+0x136>
   10c82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10c86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10c8a:	bf08      	it	eq
   10c8c:	f020 0001 	biceq.w	r0, r0, #1
   10c90:	ea40 0003 	orr.w	r0, r0, r3
   10c94:	4770      	bx	lr
   10c96:	0049      	lsls	r1, r1, #1
   10c98:	eb40 0000 	adc.w	r0, r0, r0
   10c9c:	3a01      	subs	r2, #1
   10c9e:	bf28      	it	cs
   10ca0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   10ca4:	d2ed      	bcs.n	10c82 <__addsf3+0x92>
   10ca6:	fab0 fc80 	clz	ip, r0
   10caa:	f1ac 0c08 	sub.w	ip, ip, #8
   10cae:	ebb2 020c 	subs.w	r2, r2, ip
   10cb2:	fa00 f00c 	lsl.w	r0, r0, ip
   10cb6:	bfaa      	itet	ge
   10cb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10cbc:	4252      	neglt	r2, r2
   10cbe:	4318      	orrge	r0, r3
   10cc0:	bfbc      	itt	lt
   10cc2:	40d0      	lsrlt	r0, r2
   10cc4:	4318      	orrlt	r0, r3
   10cc6:	4770      	bx	lr
   10cc8:	f092 0f00 	teq	r2, #0
   10ccc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   10cd0:	bf06      	itte	eq
   10cd2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10cd6:	3201      	addeq	r2, #1
   10cd8:	3b01      	subne	r3, #1
   10cda:	e7b5      	b.n	10c48 <__addsf3+0x58>
   10cdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10ce0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10ce4:	bf18      	it	ne
   10ce6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10cea:	d021      	beq.n	10d30 <__addsf3+0x140>
   10cec:	ea92 0f03 	teq	r2, r3
   10cf0:	d004      	beq.n	10cfc <__addsf3+0x10c>
   10cf2:	f092 0f00 	teq	r2, #0
   10cf6:	bf08      	it	eq
   10cf8:	4608      	moveq	r0, r1
   10cfa:	4770      	bx	lr
   10cfc:	ea90 0f01 	teq	r0, r1
   10d00:	bf1c      	itt	ne
   10d02:	2000      	movne	r0, #0
   10d04:	4770      	bxne	lr
   10d06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10d0a:	d104      	bne.n	10d16 <__addsf3+0x126>
   10d0c:	0040      	lsls	r0, r0, #1
   10d0e:	bf28      	it	cs
   10d10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10d14:	4770      	bx	lr
   10d16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10d1a:	bf3c      	itt	cc
   10d1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10d20:	4770      	bxcc	lr
   10d22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10d26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10d2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10d2e:	4770      	bx	lr
   10d30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10d34:	bf16      	itet	ne
   10d36:	4608      	movne	r0, r1
   10d38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10d3c:	4601      	movne	r1, r0
   10d3e:	0242      	lsls	r2, r0, #9
   10d40:	bf06      	itte	eq
   10d42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10d46:	ea90 0f01 	teqeq	r0, r1
   10d4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   10d4e:	4770      	bx	lr

00010d50 <__aeabi_ui2f>:
   10d50:	f04f 0300 	mov.w	r3, #0
   10d54:	e004      	b.n	10d60 <__aeabi_i2f+0x8>
   10d56:	bf00      	nop

00010d58 <__aeabi_i2f>:
   10d58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   10d5c:	bf48      	it	mi
   10d5e:	4240      	negmi	r0, r0
   10d60:	ea5f 0c00 	movs.w	ip, r0
   10d64:	bf08      	it	eq
   10d66:	4770      	bxeq	lr
   10d68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   10d6c:	4601      	mov	r1, r0
   10d6e:	f04f 0000 	mov.w	r0, #0
   10d72:	e01c      	b.n	10dae <__aeabi_l2f+0x2a>

00010d74 <__aeabi_ul2f>:
   10d74:	ea50 0201 	orrs.w	r2, r0, r1
   10d78:	bf08      	it	eq
   10d7a:	4770      	bxeq	lr
   10d7c:	f04f 0300 	mov.w	r3, #0
   10d80:	e00a      	b.n	10d98 <__aeabi_l2f+0x14>
   10d82:	bf00      	nop

00010d84 <__aeabi_l2f>:
   10d84:	ea50 0201 	orrs.w	r2, r0, r1
   10d88:	bf08      	it	eq
   10d8a:	4770      	bxeq	lr
   10d8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   10d90:	d502      	bpl.n	10d98 <__aeabi_l2f+0x14>
   10d92:	4240      	negs	r0, r0
   10d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10d98:	ea5f 0c01 	movs.w	ip, r1
   10d9c:	bf02      	ittt	eq
   10d9e:	4684      	moveq	ip, r0
   10da0:	4601      	moveq	r1, r0
   10da2:	2000      	moveq	r0, #0
   10da4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   10da8:	bf08      	it	eq
   10daa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   10dae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   10db2:	fabc f28c 	clz	r2, ip
   10db6:	3a08      	subs	r2, #8
   10db8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10dbc:	db10      	blt.n	10de0 <__aeabi_l2f+0x5c>
   10dbe:	fa01 fc02 	lsl.w	ip, r1, r2
   10dc2:	4463      	add	r3, ip
   10dc4:	fa00 fc02 	lsl.w	ip, r0, r2
   10dc8:	f1c2 0220 	rsb	r2, r2, #32
   10dcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10dd0:	fa20 f202 	lsr.w	r2, r0, r2
   10dd4:	eb43 0002 	adc.w	r0, r3, r2
   10dd8:	bf08      	it	eq
   10dda:	f020 0001 	biceq.w	r0, r0, #1
   10dde:	4770      	bx	lr
   10de0:	f102 0220 	add.w	r2, r2, #32
   10de4:	fa01 fc02 	lsl.w	ip, r1, r2
   10de8:	f1c2 0220 	rsb	r2, r2, #32
   10dec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10df0:	fa21 f202 	lsr.w	r2, r1, r2
   10df4:	eb43 0002 	adc.w	r0, r3, r2
   10df8:	bf08      	it	eq
   10dfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10dfe:	4770      	bx	lr

00010e00 <__aeabi_ldivmod>:
   10e00:	b97b      	cbnz	r3, 10e22 <__aeabi_ldivmod+0x22>
   10e02:	b972      	cbnz	r2, 10e22 <__aeabi_ldivmod+0x22>
   10e04:	2900      	cmp	r1, #0
   10e06:	bfbe      	ittt	lt
   10e08:	2000      	movlt	r0, #0
   10e0a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   10e0e:	e006      	blt.n	10e1e <__aeabi_ldivmod+0x1e>
   10e10:	bf08      	it	eq
   10e12:	2800      	cmpeq	r0, #0
   10e14:	bf1c      	itt	ne
   10e16:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   10e1a:	f04f 30ff 	movne.w	r0, #4294967295
   10e1e:	f000 b9bb 	b.w	11198 <__aeabi_idiv0>
   10e22:	f1ad 0c08 	sub.w	ip, sp, #8
   10e26:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10e2a:	2900      	cmp	r1, #0
   10e2c:	db09      	blt.n	10e42 <__aeabi_ldivmod+0x42>
   10e2e:	2b00      	cmp	r3, #0
   10e30:	db1a      	blt.n	10e68 <__aeabi_ldivmod+0x68>
   10e32:	f000 f84d 	bl	10ed0 <__udivmoddi4>
   10e36:	f8dd e004 	ldr.w	lr, [sp, #4]
   10e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10e3e:	b004      	add	sp, #16
   10e40:	4770      	bx	lr
   10e42:	4240      	negs	r0, r0
   10e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10e48:	2b00      	cmp	r3, #0
   10e4a:	db1b      	blt.n	10e84 <__aeabi_ldivmod+0x84>
   10e4c:	f000 f840 	bl	10ed0 <__udivmoddi4>
   10e50:	f8dd e004 	ldr.w	lr, [sp, #4]
   10e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10e58:	b004      	add	sp, #16
   10e5a:	4240      	negs	r0, r0
   10e5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10e60:	4252      	negs	r2, r2
   10e62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10e66:	4770      	bx	lr
   10e68:	4252      	negs	r2, r2
   10e6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10e6e:	f000 f82f 	bl	10ed0 <__udivmoddi4>
   10e72:	f8dd e004 	ldr.w	lr, [sp, #4]
   10e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10e7a:	b004      	add	sp, #16
   10e7c:	4240      	negs	r0, r0
   10e7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10e82:	4770      	bx	lr
   10e84:	4252      	negs	r2, r2
   10e86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10e8a:	f000 f821 	bl	10ed0 <__udivmoddi4>
   10e8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   10e92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10e96:	b004      	add	sp, #16
   10e98:	4252      	negs	r2, r2
   10e9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10e9e:	4770      	bx	lr

00010ea0 <__aeabi_uldivmod>:
   10ea0:	b953      	cbnz	r3, 10eb8 <__aeabi_uldivmod+0x18>
   10ea2:	b94a      	cbnz	r2, 10eb8 <__aeabi_uldivmod+0x18>
   10ea4:	2900      	cmp	r1, #0
   10ea6:	bf08      	it	eq
   10ea8:	2800      	cmpeq	r0, #0
   10eaa:	bf1c      	itt	ne
   10eac:	f04f 31ff 	movne.w	r1, #4294967295
   10eb0:	f04f 30ff 	movne.w	r0, #4294967295
   10eb4:	f000 b970 	b.w	11198 <__aeabi_idiv0>
   10eb8:	f1ad 0c08 	sub.w	ip, sp, #8
   10ebc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10ec0:	f000 f806 	bl	10ed0 <__udivmoddi4>
   10ec4:	f8dd e004 	ldr.w	lr, [sp, #4]
   10ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10ecc:	b004      	add	sp, #16
   10ece:	4770      	bx	lr

00010ed0 <__udivmoddi4>:
   10ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ed4:	9e08      	ldr	r6, [sp, #32]
   10ed6:	460d      	mov	r5, r1
   10ed8:	4604      	mov	r4, r0
   10eda:	468a      	mov	sl, r1
   10edc:	2b00      	cmp	r3, #0
   10ede:	d17f      	bne.n	10fe0 <__udivmoddi4+0x110>
   10ee0:	428a      	cmp	r2, r1
   10ee2:	4617      	mov	r7, r2
   10ee4:	d941      	bls.n	10f6a <__udivmoddi4+0x9a>
   10ee6:	fab2 f282 	clz	r2, r2
   10eea:	b14a      	cbz	r2, 10f00 <__udivmoddi4+0x30>
   10eec:	f1c2 0120 	rsb	r1, r2, #32
   10ef0:	fa05 f302 	lsl.w	r3, r5, r2
   10ef4:	4097      	lsls	r7, r2
   10ef6:	4094      	lsls	r4, r2
   10ef8:	fa20 f101 	lsr.w	r1, r0, r1
   10efc:	ea41 0a03 	orr.w	sl, r1, r3
   10f00:	ea4f 4817 	mov.w	r8, r7, lsr #16
   10f04:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   10f08:	fa1f f987 	uxth.w	r9, r7
   10f0c:	fbba fef8 	udiv	lr, sl, r8
   10f10:	fb08 a31e 	mls	r3, r8, lr, sl
   10f14:	fb0e f109 	mul.w	r1, lr, r9
   10f18:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   10f1c:	4299      	cmp	r1, r3
   10f1e:	d906      	bls.n	10f2e <__udivmoddi4+0x5e>
   10f20:	18fb      	adds	r3, r7, r3
   10f22:	d202      	bcs.n	10f2a <__udivmoddi4+0x5a>
   10f24:	4299      	cmp	r1, r3
   10f26:	f200 8124 	bhi.w	11172 <__udivmoddi4+0x2a2>
   10f2a:	f10e 3eff 	add.w	lr, lr, #4294967295
   10f2e:	1a59      	subs	r1, r3, r1
   10f30:	b2a3      	uxth	r3, r4
   10f32:	fbb1 f0f8 	udiv	r0, r1, r8
   10f36:	fb08 1110 	mls	r1, r8, r0, r1
   10f3a:	fb00 f909 	mul.w	r9, r0, r9
   10f3e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10f42:	45a1      	cmp	r9, r4
   10f44:	d905      	bls.n	10f52 <__udivmoddi4+0x82>
   10f46:	193c      	adds	r4, r7, r4
   10f48:	d202      	bcs.n	10f50 <__udivmoddi4+0x80>
   10f4a:	45a1      	cmp	r9, r4
   10f4c:	f200 810e 	bhi.w	1116c <__udivmoddi4+0x29c>
   10f50:	3801      	subs	r0, #1
   10f52:	eba4 0409 	sub.w	r4, r4, r9
   10f56:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   10f5a:	2100      	movs	r1, #0
   10f5c:	b11e      	cbz	r6, 10f66 <__udivmoddi4+0x96>
   10f5e:	40d4      	lsrs	r4, r2
   10f60:	2300      	movs	r3, #0
   10f62:	e9c6 4300 	strd	r4, r3, [r6]
   10f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f6a:	b902      	cbnz	r2, 10f6e <__udivmoddi4+0x9e>
   10f6c:	deff      	udf	#255	; 0xff
   10f6e:	fab2 f282 	clz	r2, r2
   10f72:	2a00      	cmp	r2, #0
   10f74:	d14f      	bne.n	11016 <__udivmoddi4+0x146>
   10f76:	1bcb      	subs	r3, r1, r7
   10f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10f7c:	fa1f f887 	uxth.w	r8, r7
   10f80:	2101      	movs	r1, #1
   10f82:	0c25      	lsrs	r5, r4, #16
   10f84:	fbb3 fcfe 	udiv	ip, r3, lr
   10f88:	fb0e 301c 	mls	r0, lr, ip, r3
   10f8c:	462b      	mov	r3, r5
   10f8e:	fb08 f90c 	mul.w	r9, r8, ip
   10f92:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   10f96:	45a9      	cmp	r9, r5
   10f98:	d90a      	bls.n	10fb0 <__udivmoddi4+0xe0>
   10f9a:	197d      	adds	r5, r7, r5
   10f9c:	bf2c      	ite	cs
   10f9e:	2301      	movcs	r3, #1
   10fa0:	2300      	movcc	r3, #0
   10fa2:	45a9      	cmp	r9, r5
   10fa4:	d902      	bls.n	10fac <__udivmoddi4+0xdc>
   10fa6:	2b00      	cmp	r3, #0
   10fa8:	f000 80d9 	beq.w	1115e <__udivmoddi4+0x28e>
   10fac:	f10c 3cff 	add.w	ip, ip, #4294967295
   10fb0:	eba5 0509 	sub.w	r5, r5, r9
   10fb4:	b2a3      	uxth	r3, r4
   10fb6:	fbb5 f0fe 	udiv	r0, r5, lr
   10fba:	fb0e 5510 	mls	r5, lr, r0, r5
   10fbe:	fb08 f800 	mul.w	r8, r8, r0
   10fc2:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   10fc6:	45a0      	cmp	r8, r4
   10fc8:	d905      	bls.n	10fd6 <__udivmoddi4+0x106>
   10fca:	193c      	adds	r4, r7, r4
   10fcc:	d202      	bcs.n	10fd4 <__udivmoddi4+0x104>
   10fce:	45a0      	cmp	r8, r4
   10fd0:	f200 80c9 	bhi.w	11166 <__udivmoddi4+0x296>
   10fd4:	3801      	subs	r0, #1
   10fd6:	eba4 0408 	sub.w	r4, r4, r8
   10fda:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10fde:	e7bd      	b.n	10f5c <__udivmoddi4+0x8c>
   10fe0:	428b      	cmp	r3, r1
   10fe2:	d908      	bls.n	10ff6 <__udivmoddi4+0x126>
   10fe4:	2e00      	cmp	r6, #0
   10fe6:	f000 80b1 	beq.w	1114c <__udivmoddi4+0x27c>
   10fea:	2100      	movs	r1, #0
   10fec:	e9c6 0500 	strd	r0, r5, [r6]
   10ff0:	4608      	mov	r0, r1
   10ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10ff6:	fab3 f183 	clz	r1, r3
   10ffa:	2900      	cmp	r1, #0
   10ffc:	d146      	bne.n	1108c <__udivmoddi4+0x1bc>
   10ffe:	42ab      	cmp	r3, r5
   11000:	f0c0 80a7 	bcc.w	11152 <__udivmoddi4+0x282>
   11004:	4282      	cmp	r2, r0
   11006:	f240 80a4 	bls.w	11152 <__udivmoddi4+0x282>
   1100a:	4608      	mov	r0, r1
   1100c:	2e00      	cmp	r6, #0
   1100e:	d0aa      	beq.n	10f66 <__udivmoddi4+0x96>
   11010:	e9c6 4a00 	strd	r4, sl, [r6]
   11014:	e7a7      	b.n	10f66 <__udivmoddi4+0x96>
   11016:	f1c2 0020 	rsb	r0, r2, #32
   1101a:	4097      	lsls	r7, r2
   1101c:	fa01 f302 	lsl.w	r3, r1, r2
   11020:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   11024:	40c1      	lsrs	r1, r0
   11026:	fa24 f500 	lsr.w	r5, r4, r0
   1102a:	fa1f f887 	uxth.w	r8, r7
   1102e:	4094      	lsls	r4, r2
   11030:	431d      	orrs	r5, r3
   11032:	fbb1 f0fe 	udiv	r0, r1, lr
   11036:	0c2b      	lsrs	r3, r5, #16
   11038:	fb0e 1110 	mls	r1, lr, r0, r1
   1103c:	fb00 fc08 	mul.w	ip, r0, r8
   11040:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   11044:	459c      	cmp	ip, r3
   11046:	d909      	bls.n	1105c <__udivmoddi4+0x18c>
   11048:	18fb      	adds	r3, r7, r3
   1104a:	bf2c      	ite	cs
   1104c:	2101      	movcs	r1, #1
   1104e:	2100      	movcc	r1, #0
   11050:	459c      	cmp	ip, r3
   11052:	d902      	bls.n	1105a <__udivmoddi4+0x18a>
   11054:	2900      	cmp	r1, #0
   11056:	f000 8095 	beq.w	11184 <__udivmoddi4+0x2b4>
   1105a:	3801      	subs	r0, #1
   1105c:	eba3 030c 	sub.w	r3, r3, ip
   11060:	b2ad      	uxth	r5, r5
   11062:	fbb3 f1fe 	udiv	r1, r3, lr
   11066:	fb0e 3311 	mls	r3, lr, r1, r3
   1106a:	fb01 fc08 	mul.w	ip, r1, r8
   1106e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   11072:	45ac      	cmp	ip, r5
   11074:	d905      	bls.n	11082 <__udivmoddi4+0x1b2>
   11076:	197d      	adds	r5, r7, r5
   11078:	d202      	bcs.n	11080 <__udivmoddi4+0x1b0>
   1107a:	45ac      	cmp	ip, r5
   1107c:	f200 8089 	bhi.w	11192 <__udivmoddi4+0x2c2>
   11080:	3901      	subs	r1, #1
   11082:	eba5 030c 	sub.w	r3, r5, ip
   11086:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1108a:	e77a      	b.n	10f82 <__udivmoddi4+0xb2>
   1108c:	f1c1 0420 	rsb	r4, r1, #32
   11090:	408b      	lsls	r3, r1
   11092:	fa02 f701 	lsl.w	r7, r2, r1
   11096:	fa05 fc01 	lsl.w	ip, r5, r1
   1109a:	40e2      	lsrs	r2, r4
   1109c:	fa20 f804 	lsr.w	r8, r0, r4
   110a0:	40e5      	lsrs	r5, r4
   110a2:	fa00 fe01 	lsl.w	lr, r0, r1
   110a6:	4313      	orrs	r3, r2
   110a8:	ea48 020c 	orr.w	r2, r8, ip
   110ac:	ea4f 4813 	mov.w	r8, r3, lsr #16
   110b0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   110b4:	fa1f f983 	uxth.w	r9, r3
   110b8:	fbb5 faf8 	udiv	sl, r5, r8
   110bc:	fb08 551a 	mls	r5, r8, sl, r5
   110c0:	fb0a f009 	mul.w	r0, sl, r9
   110c4:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   110c8:	4560      	cmp	r0, ip
   110ca:	d90a      	bls.n	110e2 <__udivmoddi4+0x212>
   110cc:	eb13 0c0c 	adds.w	ip, r3, ip
   110d0:	bf2c      	ite	cs
   110d2:	2501      	movcs	r5, #1
   110d4:	2500      	movcc	r5, #0
   110d6:	4560      	cmp	r0, ip
   110d8:	d901      	bls.n	110de <__udivmoddi4+0x20e>
   110da:	2d00      	cmp	r5, #0
   110dc:	d055      	beq.n	1118a <__udivmoddi4+0x2ba>
   110de:	f10a 3aff 	add.w	sl, sl, #4294967295
   110e2:	ebac 0c00 	sub.w	ip, ip, r0
   110e6:	b292      	uxth	r2, r2
   110e8:	fbbc f0f8 	udiv	r0, ip, r8
   110ec:	fb08 cc10 	mls	ip, r8, r0, ip
   110f0:	fb00 f909 	mul.w	r9, r0, r9
   110f4:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   110f8:	45e1      	cmp	r9, ip
   110fa:	d905      	bls.n	11108 <__udivmoddi4+0x238>
   110fc:	eb13 0c0c 	adds.w	ip, r3, ip
   11100:	d201      	bcs.n	11106 <__udivmoddi4+0x236>
   11102:	45e1      	cmp	r9, ip
   11104:	d83b      	bhi.n	1117e <__udivmoddi4+0x2ae>
   11106:	3801      	subs	r0, #1
   11108:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1110c:	ebac 0c09 	sub.w	ip, ip, r9
   11110:	fba0 8907 	umull	r8, r9, r0, r7
   11114:	45cc      	cmp	ip, r9
   11116:	4645      	mov	r5, r8
   11118:	464a      	mov	r2, r9
   1111a:	d302      	bcc.n	11122 <__udivmoddi4+0x252>
   1111c:	d106      	bne.n	1112c <__udivmoddi4+0x25c>
   1111e:	45c6      	cmp	lr, r8
   11120:	d204      	bcs.n	1112c <__udivmoddi4+0x25c>
   11122:	3801      	subs	r0, #1
   11124:	ebb8 0507 	subs.w	r5, r8, r7
   11128:	eb69 0203 	sbc.w	r2, r9, r3
   1112c:	b32e      	cbz	r6, 1117a <__udivmoddi4+0x2aa>
   1112e:	ebbe 0305 	subs.w	r3, lr, r5
   11132:	eb6c 0c02 	sbc.w	ip, ip, r2
   11136:	fa23 f201 	lsr.w	r2, r3, r1
   1113a:	fa0c f404 	lsl.w	r4, ip, r4
   1113e:	fa2c f301 	lsr.w	r3, ip, r1
   11142:	2100      	movs	r1, #0
   11144:	4314      	orrs	r4, r2
   11146:	e9c6 4300 	strd	r4, r3, [r6]
   1114a:	e70c      	b.n	10f66 <__udivmoddi4+0x96>
   1114c:	4631      	mov	r1, r6
   1114e:	4630      	mov	r0, r6
   11150:	e709      	b.n	10f66 <__udivmoddi4+0x96>
   11152:	1a84      	subs	r4, r0, r2
   11154:	eb65 0303 	sbc.w	r3, r5, r3
   11158:	2001      	movs	r0, #1
   1115a:	469a      	mov	sl, r3
   1115c:	e756      	b.n	1100c <__udivmoddi4+0x13c>
   1115e:	f1ac 0c02 	sub.w	ip, ip, #2
   11162:	443d      	add	r5, r7
   11164:	e724      	b.n	10fb0 <__udivmoddi4+0xe0>
   11166:	3802      	subs	r0, #2
   11168:	443c      	add	r4, r7
   1116a:	e734      	b.n	10fd6 <__udivmoddi4+0x106>
   1116c:	3802      	subs	r0, #2
   1116e:	443c      	add	r4, r7
   11170:	e6ef      	b.n	10f52 <__udivmoddi4+0x82>
   11172:	f1ae 0e02 	sub.w	lr, lr, #2
   11176:	443b      	add	r3, r7
   11178:	e6d9      	b.n	10f2e <__udivmoddi4+0x5e>
   1117a:	4631      	mov	r1, r6
   1117c:	e6f3      	b.n	10f66 <__udivmoddi4+0x96>
   1117e:	3802      	subs	r0, #2
   11180:	449c      	add	ip, r3
   11182:	e7c1      	b.n	11108 <__udivmoddi4+0x238>
   11184:	3802      	subs	r0, #2
   11186:	443b      	add	r3, r7
   11188:	e768      	b.n	1105c <__udivmoddi4+0x18c>
   1118a:	f1aa 0a02 	sub.w	sl, sl, #2
   1118e:	449c      	add	ip, r3
   11190:	e7a7      	b.n	110e2 <__udivmoddi4+0x212>
   11192:	3902      	subs	r1, #2
   11194:	443d      	add	r5, r7
   11196:	e774      	b.n	11082 <__udivmoddi4+0x1b2>

00011198 <__aeabi_idiv0>:
   11198:	4770      	bx	lr
   1119a:	bf00      	nop

0001119c <strcmp>:
   1119c:	f810 2b01 	ldrb.w	r2, [r0], #1
   111a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   111a4:	2a01      	cmp	r2, #1
   111a6:	bf28      	it	cs
   111a8:	429a      	cmpcs	r2, r3
   111aa:	d0f7      	beq.n	1119c <strcmp>
   111ac:	1ad0      	subs	r0, r2, r3
   111ae:	4770      	bx	lr

000111b0 <strlen>:
   111b0:	4603      	mov	r3, r0
   111b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   111b6:	2a00      	cmp	r2, #0
   111b8:	d1fb      	bne.n	111b2 <strlen+0x2>
   111ba:	1a18      	subs	r0, r3, r0
   111bc:	3801      	subs	r0, #1
   111be:	4770      	bx	lr

000111c0 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   111c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   111c4:	4604      	mov	r4, r0
   111c6:	b09b      	sub	sp, #108	; 0x6c
   111c8:	460f      	mov	r7, r1
   111ca:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   111cc:	2100      	movs	r1, #0
   111ce:	2230      	movs	r2, #48	; 0x30
   111d0:	a802      	add	r0, sp, #8
   111d2:	f011 fae0 	bl	22796 <memset>
	int ret = 0;

	if (!ctx || !time) {
   111d6:	2c00      	cmp	r4, #0
   111d8:	f000 8087 	beq.w	112ea <sntp_query+0x12a>
   111dc:	2e00      	cmp	r6, #0
   111de:	f000 8084 	beq.w	112ea <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   111e2:	231b      	movs	r3, #27
   111e4:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   111e8:	f011 f83d 	bl	22266 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   111ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   111f0:	2500      	movs	r5, #0
   111f2:	fba0 8903 	umull	r8, r9, r0, r3
   111f6:	fb03 9901 	mla	r9, r3, r1, r9
   111fa:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   111fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11202:	2300      	movs	r3, #0
   11204:	4629      	mov	r1, r5
   11206:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   1120a:	f7ff fe49 	bl	10ea0 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1120e:	4a3c      	ldr	r2, [pc, #240]	; (11300 <sntp_query+0x140>)
   11210:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   11212:	0a13      	lsrs	r3, r2, #8
   11214:	0211      	lsls	r1, r2, #8
   11216:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1121a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1121e:	430b      	orrs	r3, r1
   11220:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   11224:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   11228:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1122a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1122c:	930c      	str	r3, [sp, #48]	; 0x30
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1122e:	2230      	movs	r2, #48	; 0x30
   11230:	462b      	mov	r3, r5
   11232:	e9cd 5500 	strd	r5, r5, [sp]
   11236:	a902      	add	r1, sp, #8
   11238:	f00e fdb1 	bl	1fd9e <z_impl_zsock_sendto>
	if (ret < 0) {
   1123c:	2800      	cmp	r0, #0
   1123e:	db0f      	blt.n	11260 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   11240:	4629      	mov	r1, r5
   11242:	2230      	movs	r2, #48	; 0x30
   11244:	a80e      	add	r0, sp, #56	; 0x38
   11246:	f011 faa6 	bl	22796 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1124a:	68a1      	ldr	r1, [r4, #8]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1124c:	463a      	mov	r2, r7
   1124e:	4620      	mov	r0, r4
   11250:	f00e fe05 	bl	1fe5e <z_impl_zsock_poll>
	if (status < 0) {
   11254:	42a8      	cmp	r0, r5
   11256:	da06      	bge.n	11266 <sntp_query+0xa6>
		return -errno;
   11258:	f00e fe74 	bl	1ff44 <__errno>
   1125c:	6800      	ldr	r0, [r0, #0]
   1125e:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   11260:	b01b      	add	sp, #108	; 0x6c
   11262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   11266:	d037      	beq.n	112d8 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   11268:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1126a:	2230      	movs	r2, #48	; 0x30
   1126c:	462b      	mov	r3, r5
   1126e:	e9cd 5500 	strd	r5, r5, [sp]
   11272:	a90e      	add	r1, sp, #56	; 0x38
   11274:	f00e fdc3 	bl	1fdfe <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   11278:	2800      	cmp	r0, #0
   1127a:	dbed      	blt.n	11258 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1127c:	2830      	cmp	r0, #48	; 0x30
   1127e:	d12e      	bne.n	112de <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   11280:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11282:	6922      	ldr	r2, [r4, #16]
   11284:	ba1b      	rev	r3, r3
   11286:	429a      	cmp	r2, r3
   11288:	d002      	beq.n	11290 <sntp_query+0xd0>
		return -EINVAL;
   1128a:	f06f 0015 	mvn.w	r0, #21
   1128e:	e7e7      	b.n	11260 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   11290:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11294:	f003 0307 	and.w	r3, r3, #7
   11298:	2b04      	cmp	r3, #4
   1129a:	d1f6      	bne.n	1128a <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1129c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   112a0:	b303      	cbz	r3, 112e4 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   112a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   112a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   112a6:	ba1b      	rev	r3, r3
   112a8:	ba12      	rev	r2, r2
   112aa:	ea53 0102 	orrs.w	r1, r3, r2
   112ae:	d0ec      	beq.n	1128a <sntp_query+0xca>
	if (ts & 0x80000000) {
   112b0:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   112b2:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   112b4:	da0c      	bge.n	112d0 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   112b6:	4a13      	ldr	r2, [pc, #76]	; (11304 <sntp_query+0x144>)
   112b8:	4293      	cmp	r3, r2
   112ba:	d9e6      	bls.n	1128a <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   112bc:	a10c      	add	r1, pc, #48	; (adr r1, 112f0 <sntp_query+0x130>)
   112be:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   112c2:	18c0      	adds	r0, r0, r3
   112c4:	f141 0100 	adc.w	r1, r1, #0
   112c8:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
   112cc:	2000      	movs	r0, #0
   112ce:	e7c7      	b.n	11260 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   112d0:	a109      	add	r1, pc, #36	; (adr r1, 112f8 <sntp_query+0x138>)
   112d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   112d6:	e7f4      	b.n	112c2 <sntp_query+0x102>
		return -ETIMEDOUT;
   112d8:	f06f 0073 	mvn.w	r0, #115	; 0x73
   112dc:	e7c0      	b.n	11260 <sntp_query+0xa0>
		return -EMSGSIZE;
   112de:	f06f 0079 	mvn.w	r0, #121	; 0x79
   112e2:	e7bd      	b.n	11260 <sntp_query+0xa0>
		return -EBUSY;
   112e4:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   112e8:	e7ba      	b.n	11260 <sntp_query+0xa0>
		return -EFAULT;
   112ea:	f06f 000d 	mvn.w	r0, #13
   112ee:	e7b7      	b.n	11260 <sntp_query+0xa0>
   112f0:	7c558180 	.word	0x7c558180
   112f4:	ffffffff 	.word	0xffffffff
   112f8:	7c558180 	.word	0x7c558180
   112fc:	00000000 	.word	0x00000000
   11300:	83aa7e80 	.word	0x83aa7e80
   11304:	83aa7e7f 	.word	0x83aa7e7f

00011308 <z_impl_clock_gettime>:
{
	uint64_t elapsed_nsecs;
	struct timespec base;
	k_spinlock_key_t key;

	switch (clock_id) {
   11308:	2801      	cmp	r0, #1
{
   1130a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1130e:	460d      	mov	r5, r1
	switch (clock_id) {
   11310:	d009      	beq.n	11326 <z_impl_clock_gettime+0x1e>
   11312:	2804      	cmp	r0, #4
   11314:	d046      	beq.n	113a4 <z_impl_clock_gettime+0x9c>
		base = rt_clock_base;
		k_spin_unlock(&rt_clock_base_lock, key);
		break;

	default:
		errno = EINVAL;
   11316:	f00e fe15 	bl	1ff44 <__errno>
   1131a:	2316      	movs	r3, #22
   1131c:	6003      	str	r3, [r0, #0]
   1131e:	f04f 30ff 	mov.w	r0, #4294967295
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
}
   11322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   11326:	f04f 0320 	mov.w	r3, #32
   1132a:	f3ef 8211 	mrs	r2, BASEPRI
   1132e:	f383 8812 	msr	BASEPRI_MAX, r3
   11332:	f3bf 8f6f 	isb	sy
		base = rt_clock_base;
   11336:	4b20      	ldr	r3, [pc, #128]	; (113b8 <z_impl_clock_gettime+0xb0>)
   11338:	e9d3 4800 	ldrd	r4, r8, [r3]
   1133c:	689e      	ldr	r6, [r3, #8]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1133e:	f382 8811 	msr	BASEPRI, r2
   11342:	f3bf 8f6f 	isb	sy
   11346:	f010 ff8e 	bl	22266 <z_impl_k_uptime_ticks>
   1134a:	460b      	mov	r3, r1
   1134c:	4f1b      	ldr	r7, [pc, #108]	; (113bc <z_impl_clock_gettime+0xb4>)
   1134e:	fba0 0107 	umull	r0, r1, r0, r7
   11352:	fb07 1103 	mla	r1, r7, r3, r1
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
   11356:	a316      	add	r3, pc, #88	; (adr r3, 113b0 <z_impl_clock_gettime+0xa8>)
   11358:	e9d3 2300 	ldrd	r2, r3, [r3]
   1135c:	ea4f 39d0 	mov.w	r9, r0, lsr #15
   11360:	ea49 4941 	orr.w	r9, r9, r1, lsl #17
   11364:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
   11368:	4648      	mov	r0, r9
   1136a:	4651      	mov	r1, sl
   1136c:	f7ff fd98 	bl	10ea0 <__aeabi_uldivmod>
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   11370:	a30f      	add	r3, pc, #60	; (adr r3, 113b0 <z_impl_clock_gettime+0xa8>)
   11372:	e9d3 2300 	ldrd	r2, r3, [r3]
	ts->tv_sec += base.tv_sec;
   11376:	1904      	adds	r4, r0, r4
   11378:	eb41 0808 	adc.w	r8, r1, r8
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   1137c:	4648      	mov	r0, r9
   1137e:	4651      	mov	r1, sl
	ts->tv_sec += base.tv_sec;
   11380:	e9c5 4800 	strd	r4, r8, [r5]
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   11384:	f7ff fd8c 	bl	10ea0 <__aeabi_uldivmod>
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   11388:	4b0d      	ldr	r3, [pc, #52]	; (113c0 <z_impl_clock_gettime+0xb8>)
	ts->tv_nsec += base.tv_nsec;
   1138a:	4432      	add	r2, r6
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   1138c:	429a      	cmp	r2, r3
	ts->tv_nsec += base.tv_nsec;
   1138e:	60aa      	str	r2, [r5, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   11390:	d906      	bls.n	113a0 <z_impl_clock_gettime+0x98>
		ts->tv_sec++;
   11392:	3401      	adds	r4, #1
   11394:	f148 0100 	adc.w	r1, r8, #0
   11398:	e9c5 4100 	strd	r4, r1, [r5]
		ts->tv_nsec -= NSEC_PER_SEC;
   1139c:	1bd2      	subs	r2, r2, r7
   1139e:	60aa      	str	r2, [r5, #8]
	return 0;
   113a0:	2000      	movs	r0, #0
   113a2:	e7be      	b.n	11322 <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   113a4:	2600      	movs	r6, #0
   113a6:	4634      	mov	r4, r6
   113a8:	46b0      	mov	r8, r6
   113aa:	e7cc      	b.n	11346 <z_impl_clock_gettime+0x3e>
   113ac:	f3af 8000 	nop.w
   113b0:	3b9aca00 	.word	0x3b9aca00
   113b4:	00000000 	.word	0x00000000
   113b8:	2000cbc8 	.word	0x2000cbc8
   113bc:	3b9aca00 	.word	0x3b9aca00
   113c0:	3b9ac9ff 	.word	0x3b9ac9ff
   113c4:	00000000 	.word	0x00000000

000113c8 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   113c8:	2801      	cmp	r0, #1
{
   113ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113cc:	460c      	mov	r4, r1
	if (clock_id != CLOCK_REALTIME) {
   113ce:	d006      	beq.n	113de <clock_settime+0x16>
		errno = EINVAL;
   113d0:	f00e fdb8 	bl	1ff44 <__errno>
   113d4:	2316      	movs	r3, #22
   113d6:	6003      	str	r3, [r0, #0]
		return -1;
   113d8:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
   113dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113de:	f010 ff42 	bl	22266 <z_impl_k_uptime_ticks>
   113e2:	460e      	mov	r6, r1
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   113e4:	4d1c      	ldr	r5, [pc, #112]	; (11458 <clock_settime+0x90>)
   113e6:	6822      	ldr	r2, [r4, #0]
   113e8:	6861      	ldr	r1, [r4, #4]
   113ea:	fba2 2305 	umull	r2, r3, r2, r5
   113ee:	fb05 3301 	mla	r3, r5, r1, r3
   113f2:	68a1      	ldr	r1, [r4, #8]
   113f4:	1852      	adds	r2, r2, r1
   113f6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   113fa:	fba0 0105 	umull	r0, r1, r0, r5
   113fe:	fb05 1106 	mla	r1, r5, r6, r1
   11402:	0bc5      	lsrs	r5, r0, #15
   11404:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   11408:	0bcc      	lsrs	r4, r1, #15
		- elapsed_nsecs;
   1140a:	1b55      	subs	r5, r2, r5
   1140c:	eb63 0404 	sbc.w	r4, r3, r4
	__asm__ volatile(
   11410:	f04f 0320 	mov.w	r3, #32
   11414:	f3ef 8711 	mrs	r7, BASEPRI
   11418:	f383 8812 	msr	BASEPRI_MAX, r3
   1141c:	f3bf 8f6f 	isb	sy
	base.tv_sec = delta / NSEC_PER_SEC;
   11420:	a30b      	add	r3, pc, #44	; (adr r3, 11450 <clock_settime+0x88>)
   11422:	e9d3 2300 	ldrd	r2, r3, [r3]
   11426:	4628      	mov	r0, r5
   11428:	4621      	mov	r1, r4
   1142a:	f7ff fce9 	bl	10e00 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   1142e:	a308      	add	r3, pc, #32	; (adr r3, 11450 <clock_settime+0x88>)
   11430:	e9d3 2300 	ldrd	r2, r3, [r3]
	rt_clock_base = base;
   11434:	4e09      	ldr	r6, [pc, #36]	; (1145c <clock_settime+0x94>)
   11436:	e9c6 0100 	strd	r0, r1, [r6]
	base.tv_nsec = delta % NSEC_PER_SEC;
   1143a:	4628      	mov	r0, r5
   1143c:	4621      	mov	r1, r4
   1143e:	f7ff fcdf 	bl	10e00 <__aeabi_ldivmod>
   11442:	60b2      	str	r2, [r6, #8]
	__asm__ volatile(
   11444:	f387 8811 	msr	BASEPRI, r7
   11448:	f3bf 8f6f 	isb	sy
	return 0;
   1144c:	2000      	movs	r0, #0
   1144e:	e7c5      	b.n	113dc <clock_settime+0x14>
   11450:	3b9aca00 	.word	0x3b9aca00
   11454:	00000000 	.word	0x00000000
   11458:	3b9aca00 	.word	0x3b9aca00
   1145c:	2000cbc8 	.word	0x2000cbc8

00011460 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   11460:	2300      	movs	r3, #0
{
   11462:	b5f0      	push	{r4, r5, r6, r7, lr}
   11464:	b087      	sub	sp, #28
	struct at_param_list resp_list = {0};
   11466:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1146a:	2304      	movs	r3, #4
{
   1146c:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   1146e:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   11470:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   11472:	2800      	cmp	r0, #0
   11474:	f000 80d6 	beq.w	11624 <parse_edrx+0x1c4>
   11478:	2900      	cmp	r1, #0
   1147a:	f000 80d3 	beq.w	11624 <parse_edrx+0x1c4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1147e:	2106      	movs	r1, #6
   11480:	a804      	add	r0, sp, #16
   11482:	f00f fb05 	bl	20a90 <at_params_list_init>
	if (err) {
   11486:	4604      	mov	r4, r0
   11488:	b168      	cbz	r0, 114a6 <parse_edrx+0x46>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1148a:	4a6b      	ldr	r2, [pc, #428]	; (11638 <parse_edrx+0x1d8>)
   1148c:	4b6b      	ldr	r3, [pc, #428]	; (1163c <parse_edrx+0x1dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   1148e:	4601      	mov	r1, r0
   11490:	1ad2      	subs	r2, r2, r3
   11492:	08d2      	lsrs	r2, r2, #3
   11494:	0192      	lsls	r2, r2, #6
   11496:	486a      	ldr	r0, [pc, #424]	; (11640 <parse_edrx+0x1e0>)
   11498:	f042 0201 	orr.w	r2, r2, #1
   1149c:	f00d fec3 	bl	1f226 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   114a0:	4620      	mov	r0, r4
   114a2:	b007      	add	sp, #28
   114a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   114a6:	4601      	mov	r1, r0
   114a8:	aa04      	add	r2, sp, #16
   114aa:	4630      	mov	r0, r6
   114ac:	f00f fad7 	bl	20a5e <at_parser_params_from_str>
	if (err) {
   114b0:	4604      	mov	r4, r0
   114b2:	b170      	cbz	r0, 114d2 <parse_edrx+0x72>
   114b4:	4a60      	ldr	r2, [pc, #384]	; (11638 <parse_edrx+0x1d8>)
   114b6:	4b61      	ldr	r3, [pc, #388]	; (1163c <parse_edrx+0x1dc>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   114b8:	4601      	mov	r1, r0
   114ba:	1ad2      	subs	r2, r2, r3
   114bc:	08d2      	lsrs	r2, r2, #3
   114be:	0192      	lsls	r2, r2, #6
   114c0:	4860      	ldr	r0, [pc, #384]	; (11644 <parse_edrx+0x1e4>)
   114c2:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   114c6:	f00d feae 	bl	1f226 <log_1>
	at_params_list_free(&resp_list);
   114ca:	a804      	add	r0, sp, #16
   114cc:	f00f fb0a 	bl	20ae4 <at_params_list_free>
	return err;
   114d0:	e7e6      	b.n	114a0 <parse_edrx+0x40>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   114d2:	2103      	movs	r1, #3
   114d4:	ab01      	add	r3, sp, #4
   114d6:	aa02      	add	r2, sp, #8
   114d8:	a804      	add	r0, sp, #16
   114da:	f00f fbe4 	bl	20ca6 <at_params_string_get>
	if (err) {
   114de:	4604      	mov	r4, r0
   114e0:	b148      	cbz	r0, 114f6 <parse_edrx+0x96>
   114e2:	4a55      	ldr	r2, [pc, #340]	; (11638 <parse_edrx+0x1d8>)
   114e4:	4b55      	ldr	r3, [pc, #340]	; (1163c <parse_edrx+0x1dc>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   114e6:	4601      	mov	r1, r0
   114e8:	1ad2      	subs	r2, r2, r3
   114ea:	08d2      	lsrs	r2, r2, #3
   114ec:	0192      	lsls	r2, r2, #6
   114ee:	4856      	ldr	r0, [pc, #344]	; (11648 <parse_edrx+0x1e8>)
   114f0:	f042 0201 	orr.w	r2, r2, #1
   114f4:	e7e7      	b.n	114c6 <parse_edrx+0x66>
	tmp_buf[len] = '\0';
   114f6:	9b01      	ldr	r3, [sp, #4]
   114f8:	aa06      	add	r2, sp, #24
   114fa:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   114fc:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   114fe:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   11502:	2202      	movs	r2, #2
   11504:	a802      	add	r0, sp, #8
   11506:	f00c fcc1 	bl	1de8c <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1150a:	466a      	mov	r2, sp
	idx = strtoul(tmp_buf, NULL, 2);
   1150c:	4606      	mov	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1150e:	2101      	movs	r1, #1
   11510:	a804      	add	r0, sp, #16
   11512:	f00f fb99 	bl	20c48 <at_params_int_get>
	if (err) {
   11516:	4604      	mov	r4, r0
   11518:	b148      	cbz	r0, 1152e <parse_edrx+0xce>
   1151a:	4a47      	ldr	r2, [pc, #284]	; (11638 <parse_edrx+0x1d8>)
   1151c:	4b47      	ldr	r3, [pc, #284]	; (1163c <parse_edrx+0x1dc>)
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1151e:	4601      	mov	r1, r0
   11520:	1ad2      	subs	r2, r2, r3
   11522:	08d2      	lsrs	r2, r2, #3
   11524:	0192      	lsls	r2, r2, #6
   11526:	4849      	ldr	r0, [pc, #292]	; (1164c <parse_edrx+0x1ec>)
   11528:	f042 0201 	orr.w	r2, r2, #1
   1152c:	e7cb      	b.n	114c6 <parse_edrx+0x66>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1152e:	9b00      	ldr	r3, [sp, #0]
   11530:	2b04      	cmp	r3, #4
   11532:	d027      	beq.n	11584 <parse_edrx+0x124>
   11534:	2b05      	cmp	r3, #5
   11536:	d00d      	beq.n	11554 <parse_edrx+0xf4>
   11538:	4b40      	ldr	r3, [pc, #256]	; (1163c <parse_edrx+0x1dc>)
   1153a:	493f      	ldr	r1, [pc, #252]	; (11638 <parse_edrx+0x1d8>)
   1153c:	7028      	strb	r0, [r5, #0]
   1153e:	1ac9      	subs	r1, r1, r3
   11540:	08c9      	lsrs	r1, r1, #3
		LOG_WRN("Active LTE mode could not be determined");
   11542:	0189      	lsls	r1, r1, #6
   11544:	4842      	ldr	r0, [pc, #264]	; (11650 <parse_edrx+0x1f0>)
   11546:	f041 0102 	orr.w	r1, r1, #2
   1154a:	f00d fe5f 	bl	1f20c <log_0>
		return -ENOTCONN;
   1154e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   11552:	e7ba      	b.n	114ca <parse_edrx+0x6a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11554:	2309      	movs	r3, #9
		*ptw_multiplier = 2.56;
   11556:	4f3f      	ldr	r7, [pc, #252]	; (11654 <parse_edrx+0x1f4>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11558:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1155a:	1d2a      	adds	r2, r5, #4
   1155c:	d03c      	beq.n	115d8 <parse_edrx+0x178>
   1155e:	b2f0      	uxtb	r0, r6
   11560:	280f      	cmp	r0, #15
   11562:	d839      	bhi.n	115d8 <parse_edrx+0x178>
	switch (lte_mode) {
   11564:	2b07      	cmp	r3, #7
   11566:	d011      	beq.n	1158c <parse_edrx+0x12c>
   11568:	2b09      	cmp	r3, #9
   1156a:	d031      	beq.n	115d0 <parse_edrx+0x170>
   1156c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   11570:	4a31      	ldr	r2, [pc, #196]	; (11638 <parse_edrx+0x1d8>)
   11572:	4b32      	ldr	r3, [pc, #200]	; (1163c <parse_edrx+0x1dc>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   11574:	4621      	mov	r1, r4
   11576:	1ad2      	subs	r2, r2, r3
   11578:	08d2      	lsrs	r2, r2, #3
   1157a:	0192      	lsls	r2, r2, #6
   1157c:	4836      	ldr	r0, [pc, #216]	; (11658 <parse_edrx+0x1f8>)
   1157e:	f042 0201 	orr.w	r2, r2, #1
   11582:	e7a0      	b.n	114c6 <parse_edrx+0x66>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11584:	2307      	movs	r3, #7
		*ptw_multiplier = 1.28;
   11586:	4f35      	ldr	r7, [pc, #212]	; (1165c <parse_edrx+0x1fc>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11588:	702b      	strb	r3, [r5, #0]
	if (err) {
   1158a:	e7e6      	b.n	1155a <parse_edrx+0xfa>
		multiplier = edrx_lookup_ltem[idx];
   1158c:	4b34      	ldr	r3, [pc, #208]	; (11660 <parse_edrx+0x200>)
		multiplier = edrx_lookup_nbiot[idx];
   1158e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11592:	b1f8      	cbz	r0, 115d4 <parse_edrx+0x174>
   11594:	f7ff f85a 	bl	1064c <__aeabi_i2d>
   11598:	a325      	add	r3, pc, #148	; (adr r3, 11630 <parse_edrx+0x1d0>)
   1159a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1159e:	f7ff f8bf 	bl	10720 <__aeabi_dmul>
   115a2:	f7ff facf 	bl	10b44 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   115a6:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   115a8:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   115aa:	eb0d 0301 	add.w	r3, sp, r1
   115ae:	aa02      	add	r2, sp, #8
   115b0:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   115b2:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   115b4:	f00f fb77 	bl	20ca6 <at_params_string_get>
	if (err) {
   115b8:	4604      	mov	r4, r0
   115ba:	b180      	cbz	r0, 115de <parse_edrx+0x17e>
   115bc:	4a1e      	ldr	r2, [pc, #120]	; (11638 <parse_edrx+0x1d8>)
   115be:	4b1f      	ldr	r3, [pc, #124]	; (1163c <parse_edrx+0x1dc>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   115c0:	4601      	mov	r1, r0
   115c2:	1ad2      	subs	r2, r2, r3
   115c4:	08d2      	lsrs	r2, r2, #3
   115c6:	0192      	lsls	r2, r2, #6
   115c8:	4826      	ldr	r0, [pc, #152]	; (11664 <parse_edrx+0x204>)
   115ca:	f042 0201 	orr.w	r2, r2, #1
   115ce:	e77a      	b.n	114c6 <parse_edrx+0x66>
		multiplier = edrx_lookup_nbiot[idx];
   115d0:	4b25      	ldr	r3, [pc, #148]	; (11668 <parse_edrx+0x208>)
   115d2:	e7dc      	b.n	1158e <parse_edrx+0x12e>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   115d4:	4825      	ldr	r0, [pc, #148]	; (1166c <parse_edrx+0x20c>)
   115d6:	e7e6      	b.n	115a6 <parse_edrx+0x146>
		return -EINVAL;
   115d8:	f06f 0415 	mvn.w	r4, #21
   115dc:	e7c8      	b.n	11570 <parse_edrx+0x110>
	tmp_buf[len] = '\0';
   115de:	9b01      	ldr	r3, [sp, #4]
   115e0:	aa06      	add	r2, sp, #24
   115e2:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   115e4:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   115e6:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   115ea:	2202      	movs	r2, #2
   115ec:	a802      	add	r0, sp, #8
   115ee:	f00c fc4d 	bl	1de8c <strtoul>
	if (idx > 15) {
   115f2:	b2c1      	uxtb	r1, r0
   115f4:	290f      	cmp	r1, #15
   115f6:	d90c      	bls.n	11612 <parse_edrx+0x1b2>
   115f8:	4b10      	ldr	r3, [pc, #64]	; (1163c <parse_edrx+0x1dc>)
   115fa:	4a0f      	ldr	r2, [pc, #60]	; (11638 <parse_edrx+0x1d8>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   115fc:	481c      	ldr	r0, [pc, #112]	; (11670 <parse_edrx+0x210>)
   115fe:	1ad2      	subs	r2, r2, r3
   11600:	08d2      	lsrs	r2, r2, #3
   11602:	0192      	lsls	r2, r2, #6
   11604:	f042 0201 	orr.w	r2, r2, #1
   11608:	f00d fe0d 	bl	1f226 <log_1>
		err = -EINVAL;
   1160c:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   11610:	e75b      	b.n	114ca <parse_edrx+0x6a>
	idx += 1;
   11612:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   11614:	b2c0      	uxtb	r0, r0
   11616:	f7ff fb9f 	bl	10d58 <__aeabi_i2f>
   1161a:	4639      	mov	r1, r7
   1161c:	f7fe fe10 	bl	10240 <__aeabi_fmul>
   11620:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   11622:	e752      	b.n	114ca <parse_edrx+0x6a>
		return -EINVAL;
   11624:	f06f 0415 	mvn.w	r4, #21
   11628:	e73a      	b.n	114a0 <parse_edrx+0x40>
   1162a:	bf00      	nop
   1162c:	f3af 8000 	nop.w
   11630:	47ae147b 	.word	0x47ae147b
   11634:	40247ae1 	.word	0x40247ae1
   11638:	00023040 	.word	0x00023040
   1163c:	00022fd8 	.word	0x00022fd8
   11640:	0002471e 	.word	0x0002471e
   11644:	00024747 	.word	0x00024747
   11648:	00024773 	.word	0x00024773
   1164c:	0002479f 	.word	0x0002479f
   11650:	000247c1 	.word	0x000247c1
   11654:	4023d70a 	.word	0x4023d70a
   11658:	000247e9 	.word	0x000247e9
   1165c:	3fa3d70a 	.word	0x3fa3d70a
   11660:	00023550 	.word	0x00023550
   11664:	0002480d 	.word	0x0002480d
   11668:	00023570 	.word	0x00023570
   1166c:	40a3d70a 	.word	0x40a3d70a
   11670:	00024838 	.word	0x00024838

00011674 <uart_cb>:
// --- static functions definitions --------------------------------------------
static void uart_cb(const struct device *x, void *user_data);

// --- static functions declarations -------------------------------------------
static void uart_cb(const struct device *x, void *user_data)
{
   11674:	b570      	push	{r4, r5, r6, lr}
   11676:	4605      	mov	r5, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   11678:	6883      	ldr	r3, [r0, #8]
   1167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1167c:	b103      	cbz	r3, 11680 <uart_cb+0xc>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   1167e:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   11680:	68ab      	ldr	r3, [r5, #8]
   11682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11684:	b94b      	cbnz	r3, 1169a <uart_cb+0x26>

    uart_irq_update(x);

    if (uart_irq_rx_ready(x))
    {
        data_length += uart_fifo_read(x, &uart_buf[data_length], sizeof(uart_buf));
   11686:	4c1e      	ldr	r4, [pc, #120]	; (11700 <uart_cb+0x8c>)
	if (api->fifo_read == NULL) {
   11688:	68ab      	ldr	r3, [r5, #8]
   1168a:	4e1e      	ldr	r6, [pc, #120]	; (11704 <uart_cb+0x90>)
   1168c:	6821      	ldr	r1, [r4, #0]
   1168e:	699b      	ldr	r3, [r3, #24]
   11690:	4431      	add	r1, r6
   11692:	b93b      	cbnz	r3, 116a4 <uart_cb+0x30>
		return -ENOSYS;
   11694:	f06f 0057 	mvn.w	r0, #87	; 0x57
   11698:	e008      	b.n	116ac <uart_cb+0x38>
	return api->irq_rx_ready(dev);
   1169a:	4628      	mov	r0, r5
   1169c:	4798      	blx	r3
    if (uart_irq_rx_ready(x))
   1169e:	2800      	cmp	r0, #0
   116a0:	d1f1      	bne.n	11686 <uart_cb+0x12>
                message_length = RESET_VALUE;
                memset(uart_buf, RESET_VALUE, UART_BUFFER * sizeof(uint8_t));
            }
        }
    }
}
   116a2:	bd70      	pop	{r4, r5, r6, pc}
	return api->fifo_read(dev, rx_data, size);
   116a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   116a8:	4628      	mov	r0, r5
   116aa:	4798      	blx	r3
        data_length += uart_fifo_read(x, &uart_buf[data_length], sizeof(uart_buf));
   116ac:	6823      	ldr	r3, [r4, #0]
   116ae:	4418      	add	r0, r3
        if (data_length == FIRST_BYTE_ARRIVED)
   116b0:	2801      	cmp	r0, #1
        data_length += uart_fifo_read(x, &uart_buf[data_length], sizeof(uart_buf));
   116b2:	6020      	str	r0, [r4, #0]
        if (data_length == FIRST_BYTE_ARRIVED)
   116b4:	d10a      	bne.n	116cc <uart_cb+0x58>
            if (!is_message_type_valid(uart_buf[MSG_TYPE_POSITION]))
   116b6:	7830      	ldrb	r0, [r6, #0]
   116b8:	f000 f8f8 	bl	118ac <is_message_type_valid>
   116bc:	4601      	mov	r1, r0
   116be:	b928      	cbnz	r0, 116cc <uart_cb+0x58>
                data_length = RESET_VALUE;
   116c0:	6020      	str	r0, [r4, #0]
                memset(uart_buf, RESET_VALUE, UART_BUFFER * sizeof(uint8_t));
   116c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   116c6:	480f      	ldr	r0, [pc, #60]	; (11704 <uart_cb+0x90>)
   116c8:	f011 f865 	bl	22796 <memset>
        if (data_length >= SECOND_BYTE_ARRIVED && message_length == MESSAGE_LENGTH_UNCONFIGURED)
   116cc:	6822      	ldr	r2, [r4, #0]
   116ce:	4d0e      	ldr	r5, [pc, #56]	; (11708 <uart_cb+0x94>)
   116d0:	2a01      	cmp	r2, #1
   116d2:	dd03      	ble.n	116dc <uart_cb+0x68>
   116d4:	782b      	ldrb	r3, [r5, #0]
   116d6:	b90b      	cbnz	r3, 116dc <uart_cb+0x68>
            message_length = uart_buf[MSG_LENGTH_POSITION];
   116d8:	7873      	ldrb	r3, [r6, #1]
   116da:	702b      	strb	r3, [r5, #0]
        if (message_length != MESSAGE_LENGTH_UNCONFIGURED)
   116dc:	782b      	ldrb	r3, [r5, #0]
   116de:	2b00      	cmp	r3, #0
   116e0:	d0df      	beq.n	116a2 <uart_cb+0x2e>
            if (data_length == message_length)
   116e2:	429a      	cmp	r2, r3
   116e4:	d1dd      	bne.n	116a2 <uart_cb+0x2e>
                (void)process_rx_message(uart_buf);
   116e6:	4807      	ldr	r0, [pc, #28]	; (11704 <uart_cb+0x90>)
   116e8:	f000 f87a 	bl	117e0 <process_rx_message>
                data_length = RESET_VALUE;
   116ec:	2100      	movs	r1, #0
                message_length = RESET_VALUE;
   116ee:	7029      	strb	r1, [r5, #0]
                data_length = RESET_VALUE;
   116f0:	6021      	str	r1, [r4, #0]
                memset(uart_buf, RESET_VALUE, UART_BUFFER * sizeof(uint8_t));
   116f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
}
   116f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(uart_buf, RESET_VALUE, UART_BUFFER * sizeof(uint8_t));
   116fa:	4802      	ldr	r0, [pc, #8]	; (11704 <uart_cb+0x90>)
   116fc:	f011 b84b 	b.w	22796 <memset>
   11700:	2000cf70 	.word	0x2000cf70
   11704:	2000d64b 	.word	0x2000d64b
   11708:	2000d64a 	.word	0x2000d64a

0001170c <send_operation_result_loop>:
 *        this loop
 *        This should be done in a better way, it just works for now
 *
 */
void send_operation_result_loop(void)
{
   1170c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11710:	b085      	sub	sp, #20
		arch_syscall_invoke1(*(uintptr_t *)&event, K_SYSCALL_K_EVENT_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_event_init(event);
   11712:	4811      	ldr	r0, [pc, #68]	; (11758 <send_operation_result_loop+0x4c>)
   11714:	f010 ffd4 	bl	226c0 <z_impl_k_event_init>
   11718:	f04f 36ff 	mov.w	r6, #4294967295
   1171c:	f04f 37ff 	mov.w	r7, #4294967295
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke5(*(uintptr_t *)&event, *(uintptr_t *)&events, *(uintptr_t *)&reset, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_EVENT_WAIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_event_wait(event, events, reset, timeout);
   11720:	f8df 9034 	ldr.w	r9, [pc, #52]	; 11758 <send_operation_result_loop+0x4c>

        buf = (uint8_t *)&op_result_msg;
        // poll out the data
        for (int i = 0; i < sizeof(message_operation_result_t); i++)
        {
            uart_poll_out(uart_dev, buf[i]);
   11724:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1175c <send_operation_result_loop+0x50>
   11728:	2201      	movs	r2, #1
   1172a:	4648      	mov	r0, r9
   1172c:	4611      	mov	r1, r2
   1172e:	e9cd 6700 	strd	r6, r7, [sp]
        create_operation_result_tx_message(&op_result_msg, SUCCESS);
   11732:	ad02      	add	r5, sp, #8
   11734:	f010 ffcc 	bl	226d0 <z_impl_k_event_wait>
   11738:	2100      	movs	r1, #0
   1173a:	4628      	mov	r0, r5
   1173c:	f00d f8f7 	bl	1e92e <create_operation_result_tx_message>
        for (int i = 0; i < sizeof(message_operation_result_t); i++)
   11740:	2400      	movs	r4, #0
            uart_poll_out(uart_dev, buf[i]);
   11742:	f8d8 0000 	ldr.w	r0, [r8]
   11746:	5d29      	ldrb	r1, [r5, r4]
	api->poll_out(dev, out_char);
   11748:	6883      	ldr	r3, [r0, #8]
        for (int i = 0; i < sizeof(message_operation_result_t); i++)
   1174a:	3401      	adds	r4, #1
   1174c:	685b      	ldr	r3, [r3, #4]
   1174e:	4798      	blx	r3
   11750:	2c06      	cmp	r4, #6
   11752:	d1f6      	bne.n	11742 <send_operation_result_loop+0x36>
   11754:	e7e8      	b.n	11728 <send_operation_result_loop+0x1c>
   11756:	bf00      	nop
   11758:	2000cf74 	.word	0x2000cf74
   1175c:	2000cf80 	.word	0x2000cf80

00011760 <internal_uart_init>:
{
   11760:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11762:	480c      	ldr	r0, [pc, #48]	; (11794 <internal_uart_init+0x34>)
   11764:	f00a fcf6 	bl	1c154 <z_impl_device_get_binding>
    uart_dev = device_get_binding("UART_2");
   11768:	4c0b      	ldr	r4, [pc, #44]	; (11798 <internal_uart_init+0x38>)
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1176a:	6882      	ldr	r2, [r0, #8]
   1176c:	6020      	str	r0, [r4, #0]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1176e:	b122      	cbz	r2, 1177a <internal_uart_init+0x1a>
   11770:	6c93      	ldr	r3, [r2, #72]	; 0x48
   11772:	b113      	cbz	r3, 1177a <internal_uart_init+0x1a>
		api->irq_callback_set(dev, cb, user_data);
   11774:	2200      	movs	r2, #0
   11776:	4909      	ldr	r1, [pc, #36]	; (1179c <internal_uart_init+0x3c>)
   11778:	4798      	blx	r3
    uart_irq_rx_enable(uart_dev);
   1177a:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
   1177c:	6883      	ldr	r3, [r0, #8]
   1177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11780:	b103      	cbz	r3, 11784 <internal_uart_init+0x24>
		api->irq_rx_enable(dev);
   11782:	4798      	blx	r3
}
   11784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   11788:	2201      	movs	r2, #1
   1178a:	4805      	ldr	r0, [pc, #20]	; (117a0 <internal_uart_init+0x40>)
   1178c:	4611      	mov	r1, r2
   1178e:	f010 bba1 	b.w	21ed4 <z_impl_k_sem_init>
   11792:	bf00      	nop
   11794:	00023590 	.word	0x00023590
   11798:	2000cf80 	.word	0x2000cf80
   1179c:	00011675 	.word	0x00011675
   117a0:	2000cf84 	.word	0x2000cf84

000117a4 <internal_uart_send_data>:
{
   117a4:	b570      	push	{r4, r5, r6, lr}
   117a6:	4604      	mov	r4, r0
   117a8:	460d      	mov	r5, r1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   117aa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   117ae:	2300      	movs	r3, #0
   117b0:	4809      	ldr	r0, [pc, #36]	; (117d8 <internal_uart_send_data+0x34>)
   117b2:	f00b f87b 	bl	1c8ac <z_impl_k_sem_take>
    if (size == 0)
   117b6:	b165      	cbz	r5, 117d2 <internal_uart_send_data+0x2e>
        uart_poll_out(uart_dev, buf[i]);
   117b8:	4e08      	ldr	r6, [pc, #32]	; (117dc <internal_uart_send_data+0x38>)
   117ba:	4425      	add	r5, r4
    for (int i = 0; i < size; i++)
   117bc:	42a5      	cmp	r5, r4
   117be:	d101      	bne.n	117c4 <internal_uart_send_data+0x20>
    return 0;
   117c0:	2000      	movs	r0, #0
}
   117c2:	bd70      	pop	{r4, r5, r6, pc}
        uart_poll_out(uart_dev, buf[i]);
   117c4:	6830      	ldr	r0, [r6, #0]
   117c6:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   117ca:	6883      	ldr	r3, [r0, #8]
   117cc:	685b      	ldr	r3, [r3, #4]
   117ce:	4798      	blx	r3
    for (int i = 0; i < size; i++)
   117d0:	e7f4      	b.n	117bc <internal_uart_send_data+0x18>
        return -0x31;
   117d2:	f06f 0030 	mvn.w	r0, #48	; 0x30
   117d6:	e7f4      	b.n	117c2 <internal_uart_send_data+0x1e>
   117d8:	2000cf84 	.word	0x2000cf84
   117dc:	2000cf80 	.word	0x2000cf80

000117e0 <process_rx_message>:
 * @brief Process internal uart received message based on the message type
 *
 * @param rx_buf buffer containing the message
 */
uint8_t process_rx_message(uint8_t *rx_buf)
{
   117e0:	b538      	push	{r3, r4, r5, lr}
    message_control_gpios_t *p_msg_control_gpios;
    message_update_timestamp_t *p_msg_update_timestamp;
    uint16_t calculated_crc;
    uint16_t ret = GENERIC_ERROR;

    switch (rx_buf[MSG_TYPE_POSITION])
   117e2:	7803      	ldrb	r3, [r0, #0]
{
   117e4:	4605      	mov	r5, r0
    switch (rx_buf[MSG_TYPE_POSITION])
   117e6:	2ba1      	cmp	r3, #161	; 0xa1
   117e8:	d01c      	beq.n	11824 <process_rx_message+0x44>
   117ea:	d806      	bhi.n	117fa <process_rx_message+0x1a>
   117ec:	2b82      	cmp	r3, #130	; 0x82
   117ee:	d03c      	beq.n	1186a <process_rx_message+0x8a>
   117f0:	2b83      	cmp	r3, #131	; 0x83
   117f2:	d04a      	beq.n	1188a <process_rx_message+0xaa>
   117f4:	24ff      	movs	r4, #255	; 0xff
    default:
        break;
    }

    return ret;
}
   117f6:	b2e0      	uxtb	r0, r4
   117f8:	bd38      	pop	{r3, r4, r5, pc}
    switch (rx_buf[MSG_TYPE_POSITION])
   117fa:	2ba2      	cmp	r3, #162	; 0xa2
   117fc:	d024      	beq.n	11848 <process_rx_message+0x68>
   117fe:	2bc0      	cmp	r3, #192	; 0xc0
   11800:	d1f8      	bne.n	117f4 <process_rx_message+0x14>
        calculated_crc = crc16_ansi((uint8_t *)p_msg_ready_for_cloud, sizeof(message_ready_for_cloud_t) - sizeof(p_msg_ready_for_cloud->message_crc));
   11802:	2102      	movs	r1, #2
   11804:	f00d f8c3 	bl	1e98e <crc16_ansi>
        if (calculated_crc != p_msg_ready_for_cloud->message_crc)
   11808:	886c      	ldrh	r4, [r5, #2]
            ret = SEND_TO_CLOUD_MSG_SUCCESS;
   1180a:	4284      	cmp	r4, r0
   1180c:	bf14      	ite	ne
   1180e:	2440      	movne	r4, #64	; 0x40
   11810:	2480      	moveq	r4, #128	; 0x80
	z_impl_k_event_post(event, events);
   11812:	2101      	movs	r1, #1
   11814:	4824      	ldr	r0, [pc, #144]	; (118a8 <process_rx_message+0xc8>)
   11816:	f010 ff58 	bl	226ca <z_impl_k_event_post>
   1181a:	2102      	movs	r1, #2
   1181c:	4822      	ldr	r0, [pc, #136]	; (118a8 <process_rx_message+0xc8>)
   1181e:	f010 ff54 	bl	226ca <z_impl_k_event_post>
}
   11822:	e7e8      	b.n	117f6 <process_rx_message+0x16>
        calculated_crc = crc16_ansi((uint8_t *)p_msg_measurement_data, sizeof(message_measurement_data_t) - sizeof(p_msg_measurement_data->message_crc));
   11824:	2129      	movs	r1, #41	; 0x29
   11826:	f00d f8b2 	bl	1e98e <crc16_ansi>
        if (calculated_crc != p_msg_measurement_data->message_crc)
   1182a:	f8b5 3029 	ldrh.w	r3, [r5, #41]	; 0x29
   1182e:	4283      	cmp	r3, r0
   11830:	d108      	bne.n	11844 <process_rx_message+0x64>
            ret = store_measurement_message(p_msg_measurement_data) == SUCCESS ? MEASUREMENTS_DATA_MSG_SUCCESS : MEASUREMENTS_DATA_MSG_FAIL;
   11832:	4628      	mov	r0, r5
   11834:	f000 f858 	bl	118e8 <store_measurement_message>
   11838:	2800      	cmp	r0, #0
   1183a:	bf0c      	ite	eq
   1183c:	2401      	moveq	r4, #1
   1183e:	2404      	movne	r4, #4
	z_impl_k_event_post(event, events);
   11840:	2101      	movs	r1, #1
   11842:	e7eb      	b.n	1181c <process_rx_message+0x3c>
            ret = MEASUREMENTS_DATA_MSG_CRC_ERROR;
   11844:	2402      	movs	r4, #2
	compiler_barrier();
   11846:	e7fb      	b.n	11840 <process_rx_message+0x60>
        calculated_crc = crc16_ansi((uint8_t *)p_msg_row_mean_data, sizeof(message_row_mean_data_t) - sizeof(p_msg_row_mean_data->message_crc));
   11848:	210f      	movs	r1, #15
   1184a:	f00d f8a0 	bl	1e98e <crc16_ansi>
        if (calculated_crc != p_msg_row_mean_data->message_crc)
   1184e:	f8b5 300f 	ldrh.w	r3, [r5, #15]
   11852:	4283      	cmp	r3, r0
   11854:	d107      	bne.n	11866 <process_rx_message+0x86>
            ret = store_row_mean_data_message(p_msg_row_mean_data) == SUCCESS ? ROW_MEAN_DATA_MSG_SUCCESS : ROW_MEAN_DATA_MSG_FAIL;
   11856:	4628      	mov	r0, r5
   11858:	f000 f868 	bl	1192c <store_row_mean_data_message>
   1185c:	2800      	cmp	r0, #0
   1185e:	bf0c      	ite	eq
   11860:	2408      	moveq	r4, #8
   11862:	2420      	movne	r4, #32
   11864:	e7ec      	b.n	11840 <process_rx_message+0x60>
            ret = ROW_MEAN_DATA_MSG_CRC_ERROR;
   11866:	2410      	movs	r4, #16
   11868:	e7ea      	b.n	11840 <process_rx_message+0x60>
        calculated_crc = crc16_ansi((uint8_t *)p_msg_control_gpios, sizeof(message_control_gpios_t) - sizeof(p_msg_control_gpios->message_crc));
   1186a:	2111      	movs	r1, #17
   1186c:	f00d f88f 	bl	1e98e <crc16_ansi>
        if (calculated_crc != p_msg_control_gpios->message_crc)
   11870:	f8b5 3011 	ldrh.w	r3, [r5, #17]
   11874:	4283      	cmp	r3, r0
   11876:	d105      	bne.n	11884 <process_rx_message+0xa4>
            gpio_row_control_msg_parse(p_msg_control_gpios);
   11878:	4628      	mov	r0, r5
   1187a:	f000 fafb 	bl	11e74 <gpio_row_control_msg_parse>
            ret = MESSAGE_CONTROL_GPIOS_SUCCESS;
   1187e:	f44f 7480 	mov.w	r4, #256	; 0x100
   11882:	e7dd      	b.n	11840 <process_rx_message+0x60>
            ret = MESSAGE_CONTROL_GPIOS_CRC_ERROR;
   11884:	f44f 7400 	mov.w	r4, #512	; 0x200
   11888:	e7da      	b.n	11840 <process_rx_message+0x60>
        calculated_crc = crc16_ansi((uint8_t *)p_msg_update_timestamp, sizeof(message_update_timestamp_t) - sizeof(p_msg_update_timestamp->message_crc));
   1188a:	2102      	movs	r1, #2
   1188c:	f00d f87f 	bl	1e98e <crc16_ansi>
        if (calculated_crc != p_msg_update_timestamp->message_crc)
   11890:	886b      	ldrh	r3, [r5, #2]
   11892:	4283      	cmp	r3, r0
   11894:	d104      	bne.n	118a0 <process_rx_message+0xc0>
            update_timestamp();
   11896:	f000 fb3f 	bl	11f18 <update_timestamp>
            ret = UPDATE_TIMESTAMP_MSG_SUCCESS;
   1189a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1189e:	e7cf      	b.n	11840 <process_rx_message+0x60>
            ret = UPDATE_TIMESTAMP_MSG_FAIL;
   118a0:	f44f 7440 	mov.w	r4, #768	; 0x300
   118a4:	e7cc      	b.n	11840 <process_rx_message+0x60>
   118a6:	bf00      	nop
   118a8:	2000cf74 	.word	0x2000cf74

000118ac <is_message_type_valid>:
bool is_message_type_valid(uint8_t type)
{
    bool ret;

    // Check if message type is valid
    switch (type)
   118ac:	28fd      	cmp	r0, #253	; 0xfd
{
   118ae:	b508      	push	{r3, lr}
    switch (type)
   118b0:	d010      	beq.n	118d4 <is_message_type_valid+0x28>
   118b2:	d814      	bhi.n	118de <is_message_type_valid+0x32>
   118b4:	28a2      	cmp	r0, #162	; 0xa2
   118b6:	d808      	bhi.n	118ca <is_message_type_valid+0x1e>
   118b8:	28a0      	cmp	r0, #160	; 0xa0
   118ba:	d80e      	bhi.n	118da <is_message_type_valid+0x2e>
   118bc:	307e      	adds	r0, #126	; 0x7e
   118be:	b2c0      	uxtb	r0, r0
   118c0:	2801      	cmp	r0, #1
   118c2:	bf8c      	ite	hi
   118c4:	2000      	movhi	r0, #0
   118c6:	2001      	movls	r0, #1
        ret = false;
        break;
    }

    return ret;
   118c8:	bd08      	pop	{r3, pc}
    switch (type)
   118ca:	f1a0 03c0 	sub.w	r3, r0, #192	; 0xc0
   118ce:	4258      	negs	r0, r3
   118d0:	4158      	adcs	r0, r3
   118d2:	e7f9      	b.n	118c8 <is_message_type_valid+0x1c>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   118d4:	4803      	ldr	r0, [pc, #12]	; (118e4 <is_message_type_valid+0x38>)
   118d6:	f00a ffc3 	bl	1c860 <z_impl_k_sem_give>
        ret = true;
   118da:	2001      	movs	r0, #1
   118dc:	e7f4      	b.n	118c8 <is_message_type_valid+0x1c>
    switch (type)
   118de:	2000      	movs	r0, #0
   118e0:	e7f2      	b.n	118c8 <is_message_type_valid+0x1c>
   118e2:	bf00      	nop
   118e4:	2000cf84 	.word	0x2000cf84

000118e8 <store_measurement_message>:
 *
 * @param msg_to_store
 * @return error code
 */
uint8_t store_measurement_message(message_measurement_data_t *msg_to_store)
{
   118e8:	b530      	push	{r4, r5, lr}
    uint8_t ret = GENERIC_ERROR;
    if (measurements_inventory_fill_index < BLE_MAX_CONNECTIONS)
   118ea:	4c0e      	ldr	r4, [pc, #56]	; (11924 <store_measurement_message+0x3c>)
   118ec:	7823      	ldrb	r3, [r4, #0]
   118ee:	2b13      	cmp	r3, #19
   118f0:	d815      	bhi.n	1191e <store_measurement_message+0x36>
    {
        memcpy(&measurements_inventory[measurements_inventory_fill_index], &msg_to_store->message_buffer, sizeof(measurements_data_t));
   118f2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   118f6:	ebc3 05c2 	rsb	r5, r3, r2, lsl #3
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   118fa:	4a0b      	ldr	r2, [pc, #44]	; (11928 <store_measurement_message+0x40>)
   118fc:	1c81      	adds	r1, r0, #2
   118fe:	442a      	add	r2, r5
   11900:	3026      	adds	r0, #38	; 0x26
   11902:	f851 5b04 	ldr.w	r5, [r1], #4
   11906:	4281      	cmp	r1, r0
   11908:	f842 5b04 	str.w	r5, [r2], #4
   1190c:	d1f9      	bne.n	11902 <store_measurement_message+0x1a>
   1190e:	8808      	ldrh	r0, [r1, #0]
        measurements_inventory_fill_index++;
   11910:	3301      	adds	r3, #1
   11912:	8010      	strh	r0, [r2, #0]
        ret = SUCCESS;
   11914:	2000      	movs	r0, #0
   11916:	7889      	ldrb	r1, [r1, #2]
   11918:	7091      	strb	r1, [r2, #2]
        measurements_inventory_fill_index++;
   1191a:	7023      	strb	r3, [r4, #0]
        // LOG_INF("Measurements inventory is full %d", measurements_inventory_fill_index);
        ret = GENERIC_ERROR;
    }

    return ret;
}
   1191c:	bd30      	pop	{r4, r5, pc}
        ret = GENERIC_ERROR;
   1191e:	20ff      	movs	r0, #255	; 0xff
   11920:	e7fc      	b.n	1191c <store_measurement_message+0x34>
   11922:	bf00      	nop
   11924:	2000dd57 	.word	0x2000dd57
   11928:	2000da4b 	.word	0x2000da4b

0001192c <store_row_mean_data_message>:
 *
 * @param msg_to_store
 * @return error code
 */
uint8_t store_row_mean_data_message(message_row_mean_data_t *msg_to_store)
{
   1192c:	b510      	push	{r4, lr}
   1192e:	240d      	movs	r4, #13
    uint8_t ret = FAILURE;

    if (msg_to_store->message_buffer.row_id <= MAX_CONFIGURATION_ID || msg_to_store->message_buffer.row_id > 0)
    {
        memcpy(&row_mean_data_inventory[msg_to_store->message_buffer.row_id - 1], &msg_to_store->message_buffer, sizeof(row_mean_data_t));
   11930:	7b83      	ldrb	r3, [r0, #14]
   11932:	4908      	ldr	r1, [pc, #32]	; (11954 <store_row_mean_data_message+0x28>)
   11934:	3b01      	subs	r3, #1
   11936:	fb04 1303 	mla	r3, r4, r3, r1
   1193a:	1c82      	adds	r2, r0, #2
   1193c:	300e      	adds	r0, #14
   1193e:	f852 1b04 	ldr.w	r1, [r2], #4
   11942:	4282      	cmp	r2, r0
   11944:	f843 1b04 	str.w	r1, [r3], #4
   11948:	d1f9      	bne.n	1193e <store_row_mean_data_message+0x12>
   1194a:	7812      	ldrb	r2, [r2, #0]
        // LOG_INF("Row id is wrong: %d", msg_to_store->message_buffer.row_id);
        ret = FAILURE;
    }

    return ret;
}
   1194c:	2000      	movs	r0, #0
   1194e:	701a      	strb	r2, [r3, #0]
   11950:	bd10      	pop	{r4, pc}
   11952:	bf00      	nop
   11954:	2000dd58 	.word	0x2000dd58

00011958 <get_row_mean_data_inventory>:
 * @return row_mean_data_t* 
 */
row_mean_data_t *get_row_mean_data_inventory(void)
{
    return row_mean_data_inventory;
}
   11958:	4800      	ldr	r0, [pc, #0]	; (1195c <get_row_mean_data_inventory+0x4>)
   1195a:	4770      	bx	lr
   1195c:	2000dd58 	.word	0x2000dd58

00011960 <get_measurements_data_inventory>:
 * @return measurements_data_t* 
 */
measurements_data_t *get_measurements_data_inventory(void)
{
    return measurements_inventory;
}
   11960:	4800      	ldr	r0, [pc, #0]	; (11964 <get_measurements_data_inventory+0x4>)
   11962:	4770      	bx	lr
   11964:	2000da4b 	.word	0x2000da4b

00011968 <reset_measurements_inventory>:
 * @brief Reset measurements inventory
 *
 */
void reset_measurements_inventory(void)
{
    memset(measurements_inventory, 0, sizeof(measurements_data_t) * BLE_MAX_CONNECTIONS);
   11968:	f44f 7243 	mov.w	r2, #780	; 0x30c
{
   1196c:	b508      	push	{r3, lr}
    memset(measurements_inventory, 0, sizeof(measurements_data_t) * BLE_MAX_CONNECTIONS);
   1196e:	2100      	movs	r1, #0
   11970:	4803      	ldr	r0, [pc, #12]	; (11980 <reset_measurements_inventory+0x18>)
   11972:	f010 ff10 	bl	22796 <memset>
    measurements_inventory_fill_index = 0;
   11976:	2200      	movs	r2, #0
   11978:	4b02      	ldr	r3, [pc, #8]	; (11984 <reset_measurements_inventory+0x1c>)
   1197a:	701a      	strb	r2, [r3, #0]
}
   1197c:	bd08      	pop	{r3, pc}
   1197e:	bf00      	nop
   11980:	2000da4b 	.word	0x2000da4b
   11984:	2000dd57 	.word	0x2000dd57

00011988 <reset_row_mean_data_inventory>:
 * @brief Reset row mean data inventory
 *
 */
void reset_row_mean_data_inventory(void)
{
    memset(row_mean_data_inventory, 0, sizeof(row_mean_data_t) * MAX_CONFIGURATION_ID);
   11988:	2241      	movs	r2, #65	; 0x41
   1198a:	2100      	movs	r1, #0
   1198c:	4801      	ldr	r0, [pc, #4]	; (11994 <reset_row_mean_data_inventory+0xc>)
   1198e:	f010 bf02 	b.w	22796 <memset>
   11992:	bf00      	nop
   11994:	2000dd58 	.word	0x2000dd58

00011998 <coap_obs_renew_timer_handler>:
 * 
 * @param timer_id 
 */
static void coap_obs_renew_timer_handler(struct k_timer *timer_id)
{
    k_work_submit(&user_payload_obs_renew_work);
   11998:	4801      	ldr	r0, [pc, #4]	; (119a0 <coap_obs_renew_timer_handler+0x8>)
   1199a:	f00b b89f 	b.w	1cadc <k_work_submit>
   1199e:	bf00      	nop
   119a0:	2000cfa8 	.word	0x2000cfa8

000119a4 <wait>:
{
   119a4:	b510      	push	{r4, lr}
	return z_impl_zsock_poll(fds, nfds, timeout);
   119a6:	4c12      	ldr	r4, [pc, #72]	; (119f0 <wait+0x4c>)
   119a8:	f242 7210 	movw	r2, #10000	; 0x2710
   119ac:	2101      	movs	r1, #1
   119ae:	4620      	mov	r0, r4
   119b0:	f00e fa55 	bl	1fe5e <z_impl_zsock_poll>
    if (ret < 0)
   119b4:	2800      	cmp	r0, #0
   119b6:	da04      	bge.n	119c2 <wait+0x1e>
        return -errno;
   119b8:	f00e fac4 	bl	1ff44 <__errno>
   119bc:	6800      	ldr	r0, [r0, #0]
   119be:	4240      	negs	r0, r0
}
   119c0:	bd10      	pop	{r4, pc}
    if (ret == 0)
   119c2:	d00b      	beq.n	119dc <wait+0x38>
    if ((fds.revents & POLLERR) == POLLERR)
   119c4:	88e3      	ldrh	r3, [r4, #6]
   119c6:	0719      	lsls	r1, r3, #28
   119c8:	d40b      	bmi.n	119e2 <wait+0x3e>
    if ((fds.revents & POLLNVAL) == POLLNVAL)
   119ca:	069a      	lsls	r2, r3, #26
   119cc:	d40c      	bmi.n	119e8 <wait+0x44>
    return 0;
   119ce:	f013 0f01 	tst.w	r3, #1
   119d2:	bf0c      	ite	eq
   119d4:	f06f 000a 	mvneq.w	r0, #10
   119d8:	2000      	movne	r0, #0
   119da:	e7f1      	b.n	119c0 <wait+0x1c>
        return -EAGAIN;
   119dc:	f06f 000a 	mvn.w	r0, #10
   119e0:	e7ee      	b.n	119c0 <wait+0x1c>
        return -EIO;
   119e2:	f06f 0004 	mvn.w	r0, #4
   119e6:	e7eb      	b.n	119c0 <wait+0x1c>
        return -EBADF;
   119e8:	f06f 0008 	mvn.w	r0, #8
   119ec:	e7e8      	b.n	119c0 <wait+0x1c>
   119ee:	bf00      	nop
   119f0:	2000cf9c 	.word	0x2000cf9c

000119f4 <coap_get_socket>:
 * @return int
 */
int coap_get_socket(void)
{
    return sock;
}
   119f4:	4b01      	ldr	r3, [pc, #4]	; (119fc <coap_get_socket+0x8>)
   119f6:	6818      	ldr	r0, [r3, #0]
   119f8:	4770      	bx	lr
   119fa:	bf00      	nop
   119fc:	2000cfa4 	.word	0x2000cfa4

00011a00 <coap_client_init>:
 * @brief Init coap client
 *
 * @return int
 */
void coap_client_init(void)
{
   11a00:	b530      	push	{r4, r5, lr}
   11a02:	b0a1      	sub	sp, #132	; 0x84
    struct addrinfo hints = {
   11a04:	2250      	movs	r2, #80	; 0x50
   11a06:	2100      	movs	r1, #0
   11a08:	a80c      	add	r0, sp, #48	; 0x30
   11a0a:	f010 fec4 	bl	22796 <memset>
   11a0e:	2302      	movs	r3, #2

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   11a10:	2100      	movs	r1, #0
   11a12:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   11a16:	aa0c      	add	r2, sp, #48	; 0x30
   11a18:	ab01      	add	r3, sp, #4
   11a1a:	481f      	ldr	r0, [pc, #124]	; (11a98 <coap_client_init+0x98>)
   11a1c:	f00e f95d 	bl	1fcda <zsock_getaddrinfo>
    memcpy(server6->sin6_addr.s6_addr, ((struct sockaddr_in6 *)result->ai_addr)->sin6_addr.s6_addr, 16);
   11a20:	9b01      	ldr	r3, [sp, #4]
   11a22:	491e      	ldr	r1, [pc, #120]	; (11a9c <coap_client_init+0x9c>)
   11a24:	699b      	ldr	r3, [r3, #24]
   11a26:	1d1a      	adds	r2, r3, #4
   11a28:	3314      	adds	r3, #20
   11a2a:	f852 0b04 	ldr.w	r0, [r2], #4
   11a2e:	429a      	cmp	r2, r3
   11a30:	f841 0b04 	str.w	r0, [r1], #4
   11a34:	d1f9      	bne.n	11a2a <coap_client_init+0x2a>
    server6->sin6_port = htons(COAP_SERVER_PORT);
   11a36:	f243 3316 	movw	r3, #13078	; 0x3316
    server6->sin6_family = AF_INET6;
   11a3a:	4c19      	ldr	r4, [pc, #100]	; (11aa0 <coap_client_init+0xa0>)
   11a3c:	2502      	movs	r5, #2
    server6->sin6_port = htons(COAP_SERVER_PORT);
   11a3e:	8063      	strh	r3, [r4, #2]
    server6->sin6_scope_id = 0;
   11a40:	2300      	movs	r3, #0
    server6->sin6_family = AF_INET6;
   11a42:	8025      	strh	r5, [r4, #0]
    server6->sin6_scope_id = 0;
   11a44:	7523      	strb	r3, [r4, #20]
		/* coverity[OVERRUN] */
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   11a46:	2328      	movs	r3, #40	; 0x28
   11a48:	aa02      	add	r2, sp, #8
   11a4a:	1d21      	adds	r1, r4, #4
   11a4c:	4628      	mov	r0, r5
   11a4e:	f002 ff0f 	bl	14870 <z_impl_net_addr_ntop>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   11a52:	9801      	ldr	r0, [sp, #4]
   11a54:	f00e f943 	bl	1fcde <zsock_freeaddrinfo>
	return z_impl_zsock_socket(family, type, proto);
   11a58:	2211      	movs	r2, #17
   11a5a:	4629      	mov	r1, r5
   11a5c:	4628      	mov	r0, r5
   11a5e:	f001 fe5f 	bl	13720 <z_impl_zsock_socket>
    int err;

    // Initialize server that we will connect to
    udp_server_init();

    sock = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);
   11a62:	4d10      	ldr	r5, [pc, #64]	; (11aa4 <coap_client_init+0xa4>)
    if (sock < 0)
   11a64:	2800      	cmp	r0, #0
    sock = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);
   11a66:	6028      	str	r0, [r5, #0]
    if (sock < 0)
   11a68:	db13      	blt.n	11a92 <coap_client_init+0x92>
	return z_impl_zsock_connect(sock, addr, addrlen);
   11a6a:	2218      	movs	r2, #24
   11a6c:	4621      	mov	r1, r4
   11a6e:	f00e f96f 	bl	1fd50 <z_impl_zsock_connect>
    }

    // Connect to server
    err = connect(sock, (struct sockaddr *)&server,
                  sizeof(struct sockaddr_in6));
    if (err < 0)
   11a72:	2800      	cmp	r0, #0
   11a74:	db0d      	blt.n	11a92 <coap_client_init+0x92>
        // LOG_INF("Connect failed : %d", errno);
        return;
    }

    // Initialize FDS, for poll.
    fds.fd = sock;
   11a76:	4b0c      	ldr	r3, [pc, #48]	; (11aa8 <coap_client_init+0xa8>)
   11a78:	682a      	ldr	r2, [r5, #0]
   11a7a:	601a      	str	r2, [r3, #0]
    fds.events = POLLIN;
   11a7c:	2201      	movs	r2, #1
   11a7e:	809a      	strh	r2, [r3, #4]
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
   11a80:	f002 ffde 	bl	14a40 <z_impl_sys_rand32_get>

    // Randomize token that will be used on coap put transactions
    next_token = sys_rand32_get();
   11a84:	4b09      	ldr	r3, [pc, #36]	; (11aac <coap_client_init+0xac>)
   11a86:	8018      	strh	r0, [r3, #0]
	return z_impl_k_sleep(timeout);
   11a88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11a8c:	2100      	movs	r1, #0
   11a8e:	f00b fb7f 	bl	1d190 <z_impl_k_sleep>
    // TODO: do we need this k_sleep()??
    k_sleep(K_MSEC(1000));
}
   11a92:	b021      	add	sp, #132	; 0x84
   11a94:	bd30      	pop	{r4, r5, pc}
   11a96:	bf00      	nop
   11a98:	000235ca 	.word	0x000235ca
   11a9c:	2000d626 	.word	0x2000d626
   11aa0:	2000d622 	.word	0x2000d622
   11aa4:	2000cfa4 	.word	0x2000cfa4
   11aa8:	2000cf9c 	.word	0x2000cf9c
   11aac:	2000d620 	.word	0x2000d620

00011ab0 <coap_put>:
 * @param resource
 * @param resourse_length
 * @param payload
 */
void coap_put(uint8_t *resource, uint16_t resourse_length, uint8_t *payload, uint8_t length)
{
   11ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    // --- clear coap buffer
    memset(coap_buf, 0, sizeof(coap_buf));

    // Token must be unique for each request
    next_token++;
   11ab4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 11b4c <coap_put+0x9c>
{
   11ab8:	b08a      	sub	sp, #40	; 0x28
   11aba:	4606      	mov	r6, r0
   11abc:	460f      	mov	r7, r1
   11abe:	4614      	mov	r4, r2
    memset(coap_buf, 0, sizeof(coap_buf));
   11ac0:	2100      	movs	r1, #0
   11ac2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   11ac6:	481f      	ldr	r0, [pc, #124]	; (11b44 <coap_put+0x94>)
{
   11ac8:	461d      	mov	r5, r3
    memset(coap_buf, 0, sizeof(coap_buf));
   11aca:	f010 fe64 	bl	22796 <memset>
    next_token++;
   11ace:	f8b8 3000 	ldrh.w	r3, [r8]
   11ad2:	3301      	adds	r3, #1
   11ad4:	f8a8 3000 	strh.w	r3, [r8]

    // --- init coap packet
    err = coap_packet_init(&request, coap_buf, sizeof(coap_buf),
   11ad8:	f001 fe1a 	bl	13710 <coap_next_id>
   11adc:	2303      	movs	r3, #3
   11ade:	2202      	movs	r2, #2
   11ae0:	e9cd 8302 	strd	r8, r3, [sp, #8]
   11ae4:	2301      	movs	r3, #1
   11ae6:	9004      	str	r0, [sp, #16]
   11ae8:	e9cd 3200 	strd	r3, r2, [sp]
   11aec:	4915      	ldr	r1, [pc, #84]	; (11b44 <coap_put+0x94>)
   11aee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   11af2:	a806      	add	r0, sp, #24
   11af4:	f00d ff2a 	bl	1f94c <coap_packet_init>
                           APP_COAP_VERSION, COAP_TYPE_NON_CON,
                           sizeof(next_token), (uint8_t *)&next_token,
                           COAP_METHOD_PUT, coap_next_id());
    if (err < 0)
   11af8:	2800      	cmp	r0, #0
   11afa:	db1f      	blt.n	11b3c <coap_put+0x8c>
        // LOG_INF("Failed to create CoAP request, %d", err);
        return;
    }

    // Append option to the coap packet
    err = coap_packet_append_option(&request, COAP_OPTION_URI_PATH, resource, resourse_length);
   11afc:	463b      	mov	r3, r7
   11afe:	4632      	mov	r2, r6
   11b00:	210b      	movs	r1, #11
   11b02:	a806      	add	r0, sp, #24
   11b04:	f00d ff63 	bl	1f9ce <coap_packet_append_option>
    if (err < 0)
   11b08:	2800      	cmp	r0, #0
   11b0a:	db17      	blt.n	11b3c <coap_put+0x8c>
    {
        // LOG_INF("Failed to encode CoAP option, %d", err);
        return;
    }
    err = coap_packet_append_payload_marker(&request);
   11b0c:	a806      	add	r0, sp, #24
   11b0e:	f00e f81b 	bl	1fb48 <coap_packet_append_payload_marker>
    if (err < 0)
   11b12:	2800      	cmp	r0, #0
   11b14:	db12      	blt.n	11b3c <coap_put+0x8c>
    {
        // LOG_INF("Unable to append payload marker %d", err);
        return;
    }
    // Add payload to the packet
    err = coap_packet_append_payload(&request, (uint8_t *)payload,
   11b16:	462a      	mov	r2, r5
   11b18:	4621      	mov	r1, r4
   11b1a:	a806      	add	r0, sp, #24
   11b1c:	f00e f81e 	bl	1fb5c <coap_packet_append_payload>
                                     length);
    if (err < 0)
   11b20:	2800      	cmp	r0, #0
   11b22:	db0b      	blt.n	11b3c <coap_put+0x8c>
        // LOG_INF("Not able to append payload %d", err);
        return;
    }

    // Send the coap request
    err = send(sock, request.data, request.offset, 0);
   11b24:	4b08      	ldr	r3, [pc, #32]	; (11b48 <coap_put+0x98>)
   11b26:	9906      	ldr	r1, [sp, #24]
   11b28:	6818      	ldr	r0, [r3, #0]
   11b2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   11b2e:	2300      	movs	r3, #0
   11b30:	e9cd 3300 	strd	r3, r3, [sp]
   11b34:	f00e f933 	bl	1fd9e <z_impl_zsock_sendto>

    wait();
   11b38:	f7ff ff34 	bl	119a4 <wait>
}
   11b3c:	b00a      	add	sp, #40	; 0x28
   11b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b42:	bf00      	nop
   11b44:	2000dd99 	.word	0x2000dd99
   11b48:	2000cfa4 	.word	0x2000cfa4
   11b4c:	2000d620 	.word	0x2000d620

00011b50 <coap_observe>:
 *          TODO: might need function to reset the observe request
 * @param resource
 * @param resourse_length
 */
void coap_observe(uint8_t *resource, uint16_t resourse_length)
{
   11b50:	b530      	push	{r4, r5, lr}
    int err;
    struct coap_packet request;
    // --- clear coap buffer
    memset(coap_buf, 0, sizeof(coap_buf));
   11b52:	f44f 62a0 	mov.w	r2, #1280	; 0x500
{
   11b56:	b08b      	sub	sp, #44	; 0x2c
   11b58:	4604      	mov	r4, r0
   11b5a:	460d      	mov	r5, r1
    memset(coap_buf, 0, sizeof(coap_buf));
   11b5c:	4818      	ldr	r0, [pc, #96]	; (11bc0 <coap_observe+0x70>)
   11b5e:	2100      	movs	r1, #0
   11b60:	f010 fe19 	bl	22796 <memset>

    // --- init coap packet
    err = coap_packet_init(&request, coap_buf, sizeof(coap_buf),
   11b64:	f001 fdd4 	bl	13710 <coap_next_id>
   11b68:	4a16      	ldr	r2, [pc, #88]	; (11bc4 <coap_observe+0x74>)
   11b6a:	2301      	movs	r3, #1
   11b6c:	9202      	str	r2, [sp, #8]
   11b6e:	2202      	movs	r2, #2
   11b70:	9004      	str	r0, [sp, #16]
   11b72:	e9cd 3200 	strd	r3, r2, [sp]
   11b76:	4912      	ldr	r1, [pc, #72]	; (11bc0 <coap_observe+0x70>)
   11b78:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   11b7c:	9303      	str	r3, [sp, #12]
   11b7e:	a806      	add	r0, sp, #24
   11b80:	f00d fee4 	bl	1f94c <coap_packet_init>
                           APP_COAP_VERSION, COAP_TYPE_NON_CON,
                           sizeof(uint16_t), (uint8_t *)&obs_token,
                           COAP_METHOD_GET, coap_next_id());
    if (err < 0)
   11b84:	2800      	cmp	r0, #0
   11b86:	db18      	blt.n	11bba <coap_observe+0x6a>
        // LOG_INF("Failed to create CoAP request, %d", err);
        return;
    }

    // Append option to the coap packet
    err = coap_append_option_int(&request, COAP_OPTION_OBSERVE, 0);
   11b88:	2200      	movs	r2, #0
   11b8a:	2106      	movs	r1, #6
   11b8c:	a806      	add	r0, sp, #24
   11b8e:	f00d ffad 	bl	1faec <coap_append_option_int>
    err = coap_packet_append_option(&request, COAP_OPTION_URI_PATH, resource, resourse_length);
   11b92:	462b      	mov	r3, r5
   11b94:	4622      	mov	r2, r4
   11b96:	210b      	movs	r1, #11
   11b98:	a806      	add	r0, sp, #24
   11b9a:	f00d ff18 	bl	1f9ce <coap_packet_append_option>
    if (err < 0)
   11b9e:	2800      	cmp	r0, #0
   11ba0:	db0b      	blt.n	11bba <coap_observe+0x6a>
    {
        // LOG_INF("Failed to encode CoAP option, %d", err);
        return;
    }

    err = send(sock, request.data, request.offset, 0);
   11ba2:	4b09      	ldr	r3, [pc, #36]	; (11bc8 <coap_observe+0x78>)
   11ba4:	9906      	ldr	r1, [sp, #24]
   11ba6:	6818      	ldr	r0, [r3, #0]
   11ba8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   11bac:	2300      	movs	r3, #0
   11bae:	e9cd 3300 	strd	r3, r3, [sp]
   11bb2:	f00e f8f4 	bl	1fd9e <z_impl_zsock_sendto>

    wait();
   11bb6:	f7ff fef5 	bl	119a4 <wait>
}
   11bba:	b00b      	add	sp, #44	; 0x2c
   11bbc:	bd30      	pop	{r4, r5, pc}
   11bbe:	bf00      	nop
   11bc0:	2000dd99 	.word	0x2000dd99
   11bc4:	2000c680 	.word	0x2000c680
   11bc8:	2000cfa4 	.word	0x2000cfa4

00011bcc <renew_coap_observe>:
{
   11bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    char obs_resource[] = "userpayload";
   11bce:	4a08      	ldr	r2, [pc, #32]	; (11bf0 <renew_coap_observe+0x24>)
   11bd0:	ab01      	add	r3, sp, #4
   11bd2:	6810      	ldr	r0, [r2, #0]
   11bd4:	6851      	ldr	r1, [r2, #4]
   11bd6:	c303      	stmia	r3!, {r0, r1}
   11bd8:	6890      	ldr	r0, [r2, #8]
   11bda:	6018      	str	r0, [r3, #0]
    coap_observe(obs_resource, strlen(obs_resource));
   11bdc:	a801      	add	r0, sp, #4
   11bde:	f7ff fae7 	bl	111b0 <strlen>
   11be2:	b281      	uxth	r1, r0
   11be4:	a801      	add	r0, sp, #4
   11be6:	f7ff ffb3 	bl	11b50 <coap_observe>
}
   11bea:	b005      	add	sp, #20
   11bec:	f85d fb04 	ldr.w	pc, [sp], #4
   11bf0:	000235dd 	.word	0x000235dd

00011bf4 <get_obs_token>:
 * @return uint16_t* the observation token for userpayload resource
 */
uint16_t *get_obs_token(void)
{
    return &obs_token;
}
   11bf4:	4800      	ldr	r0, [pc, #0]	; (11bf8 <get_obs_token+0x4>)
   11bf6:	4770      	bx	lr
   11bf8:	2000c680 	.word	0x2000c680

00011bfc <initialize_observe_renew>:
 * @brief Initialize workitem and timer for observe renew for coap userpayload 
 *        resource
 * 
 */
void initialize_observe_renew(void)
{
   11bfc:	b513      	push	{r0, r1, r4, lr}
    // Initialize the work item user_payload_obs_renew_work which will renew the
    // observation on userpayload resource
    k_work_init(&user_payload_obs_renew_work, renew_coap_observe);
    k_timer_init(&obs_renew_timer, coap_obs_renew_timer_handler, NULL);
   11bfe:	4c0a      	ldr	r4, [pc, #40]	; (11c28 <initialize_observe_renew+0x2c>)
    k_work_init(&user_payload_obs_renew_work, renew_coap_observe);
   11c00:	490a      	ldr	r1, [pc, #40]	; (11c2c <initialize_observe_renew+0x30>)
   11c02:	480b      	ldr	r0, [pc, #44]	; (11c30 <initialize_observe_renew+0x34>)
   11c04:	f010 f99c 	bl	21f40 <k_work_init>
    k_timer_init(&obs_renew_timer, coap_obs_renew_timer_handler, NULL);
   11c08:	2200      	movs	r2, #0
   11c0a:	4620      	mov	r0, r4
   11c0c:	4909      	ldr	r1, [pc, #36]	; (11c34 <initialize_observe_renew+0x38>)
   11c0e:	f010 fb59 	bl	222c4 <k_timer_init>
   11c12:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   11c16:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   11c18:	4620      	mov	r0, r4
   11c1a:	e9cd 2300 	strd	r2, r3, [sp]
   11c1e:	f00b fd07 	bl	1d630 <z_impl_k_timer_start>
    // This timer will go off in 150 seconds and will trigger every 150 seconds
    k_timer_start(&obs_renew_timer, K_SECONDS(600), K_SECONDS(600));
   11c22:	b002      	add	sp, #8
   11c24:	bd10      	pop	{r4, pc}
   11c26:	bf00      	nop
   11c28:	2000c9a0 	.word	0x2000c9a0
   11c2c:	00011bcd 	.word	0x00011bcd
   11c30:	2000cfa8 	.word	0x2000cfa8
   11c34:	00011999 	.word	0x00011999

00011c38 <coap_fsm>:
/**
 * @brief COAP FSM
 *
 */
void coap_fsm(void)
{
   11c38:	b510      	push	{r4, lr}
    int32_t ret;
    // Set initial state
    smf_set_initial(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_INIT]);
   11c3a:	4905      	ldr	r1, [pc, #20]	; (11c50 <coap_fsm+0x18>)
   11c3c:	4805      	ldr	r0, [pc, #20]	; (11c54 <coap_fsm+0x1c>)
   11c3e:	f00e f983 	bl	1ff48 <smf_set_initial>

    // Run the state machine
    while (1)
    {
        // State machine terminates if a non-zero value is returned
        ret = smf_run_state(SMF_CTX(&coap_fsm_user_object));
   11c42:	4c04      	ldr	r4, [pc, #16]	; (11c54 <coap_fsm+0x1c>)
   11c44:	4620      	mov	r0, r4
   11c46:	f00e f98b 	bl	1ff60 <smf_run_state>
        if (ret)
   11c4a:	2800      	cmp	r0, #0
   11c4c:	d0fa      	beq.n	11c44 <coap_fsm+0xc>
            // handle return code and terminate state machine
            // LOG_INF("COAP fsm terminated: %d", ret);
            break;
        }
    }
}
   11c4e:	bd10      	pop	{r4, pc}
   11c50:	000230f8 	.word	0x000230f8
   11c54:	2000cfb8 	.word	0x2000cfb8

00011c58 <coap_nbiot_reconnect_run>:
{
   11c58:	b508      	push	{r3, lr}
    err = lte_lc_connect();
   11c5a:	f00f f861 	bl	20d20 <lte_lc_connect>
}
   11c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_WAIT]);
   11c62:	4902      	ldr	r1, [pc, #8]	; (11c6c <coap_nbiot_reconnect_run+0x14>)
   11c64:	4802      	ldr	r0, [pc, #8]	; (11c70 <coap_nbiot_reconnect_run+0x18>)
   11c66:	f002 bd8d 	b.w	14784 <smf_set_state>
   11c6a:	bf00      	nop
   11c6c:	00023128 	.word	0x00023128
   11c70:	2000cfb8 	.word	0x2000cfb8

00011c74 <coap_client_send_dev_info_run>:
    smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_WAIT]);
   11c74:	4901      	ldr	r1, [pc, #4]	; (11c7c <coap_client_send_dev_info_run+0x8>)
   11c76:	4802      	ldr	r0, [pc, #8]	; (11c80 <coap_client_send_dev_info_run+0xc>)
   11c78:	f002 bd84 	b.w	14784 <smf_set_state>
   11c7c:	00023128 	.word	0x00023128
   11c80:	2000cfb8 	.word	0x2000cfb8

00011c84 <coap_client_send_meas_run>:
{
   11c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    char resource[] = "rowmeandata";
   11c88:	4a26      	ldr	r2, [pc, #152]	; (11d24 <coap_client_send_meas_run+0xa0>)
{
   11c8a:	b08d      	sub	sp, #52	; 0x34
    char resource[] = "rowmeandata";
   11c8c:	6851      	ldr	r1, [r2, #4]
{
   11c8e:	4606      	mov	r6, r0
    char resource[] = "rowmeandata";
   11c90:	6810      	ldr	r0, [r2, #0]
   11c92:	ab03      	add	r3, sp, #12
   11c94:	c303      	stmia	r3!, {r0, r1}
   11c96:	6890      	ldr	r0, [r2, #8]
    message_coap_row_mean_data_t coap_msg_buffer = {0};
   11c98:	2218      	movs	r2, #24
    char resource[] = "rowmeandata";
   11c9a:	6018      	str	r0, [r3, #0]
    message_coap_row_mean_data_t coap_msg_buffer = {0};
   11c9c:	2100      	movs	r1, #0
   11c9e:	eb0d 0002 	add.w	r0, sp, r2
   11ca2:	f010 fd78 	bl	22796 <memset>
   11ca6:	4c20      	ldr	r4, [pc, #128]	; (11d28 <coap_client_send_meas_run+0xa4>)
   11ca8:	4b20      	ldr	r3, [pc, #128]	; (11d2c <coap_client_send_meas_run+0xa8>)
    LOG_INF("SEND_TO_CLOUD --- %d", log_counter);
   11caa:	4d21      	ldr	r5, [pc, #132]	; (11d30 <coap_client_send_meas_run+0xac>)
   11cac:	1ae4      	subs	r4, r4, r3
   11cae:	08e4      	lsrs	r4, r4, #3
   11cb0:	01a4      	lsls	r4, r4, #6
   11cb2:	f044 0403 	orr.w	r4, r4, #3
   11cb6:	4622      	mov	r2, r4
   11cb8:	6829      	ldr	r1, [r5, #0]
   11cba:	481e      	ldr	r0, [pc, #120]	; (11d34 <coap_client_send_meas_run+0xb0>)
   11cbc:	f00d fab3 	bl	1f226 <log_1>
    for (int index = 0; index < MAX_CONFIGURATION_ID; index++)
   11cc0:	2700      	movs	r7, #0
            LOG_INF("row_num: %d; temperature: %d; idx: %d", user_ctx->row_mean_data_inventory[index].row_id,user_ctx->row_mean_data_inventory[index].mean_row_temp, log_counter);
   11cc2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 11d40 <coap_client_send_meas_run+0xbc>
        if (user_ctx->row_mean_data_inventory[index].is_row_registered)
   11cc6:	6933      	ldr	r3, [r6, #16]
   11cc8:	eb03 0807 	add.w	r8, r3, r7
   11ccc:	f898 300b 	ldrb.w	r3, [r8, #11]
   11cd0:	b1db      	cbz	r3, 11d0a <coap_client_send_meas_run+0x86>
            create_coap_row_mean_data_message(&user_ctx->row_mean_data_inventory[index], &coap_msg_buffer, get_timestamp());
   11cd2:	f000 f935 	bl	11f40 <get_timestamp>
   11cd6:	4602      	mov	r2, r0
   11cd8:	460b      	mov	r3, r1
   11cda:	4640      	mov	r0, r8
   11cdc:	a906      	add	r1, sp, #24
   11cde:	f00c fe32 	bl	1e946 <create_coap_row_mean_data_message>
            LOG_INF("row_num: %d; temperature: %d; idx: %d", user_ctx->row_mean_data_inventory[index].row_id,user_ctx->row_mean_data_inventory[index].mean_row_temp, log_counter);
   11ce2:	6933      	ldr	r3, [r6, #16]
   11ce4:	4648      	mov	r0, r9
   11ce6:	19d9      	adds	r1, r3, r7
   11ce8:	5fda      	ldrsh	r2, [r3, r7]
   11cea:	7b09      	ldrb	r1, [r1, #12]
   11cec:	682b      	ldr	r3, [r5, #0]
   11cee:	f8ad 4000 	strh.w	r4, [sp]
   11cf2:	f00d fac5 	bl	1f280 <log_3>
            coap_put((uint8_t *)resource, strlen(resource), (uint8_t *)&coap_msg_buffer, sizeof(message_coap_row_mean_data_t));
   11cf6:	a803      	add	r0, sp, #12
   11cf8:	f7ff fa5a 	bl	111b0 <strlen>
   11cfc:	2318      	movs	r3, #24
   11cfe:	b281      	uxth	r1, r0
   11d00:	eb0d 0203 	add.w	r2, sp, r3
   11d04:	a803      	add	r0, sp, #12
   11d06:	f7ff fed3 	bl	11ab0 <coap_put>
    for (int index = 0; index < MAX_CONFIGURATION_ID; index++)
   11d0a:	370d      	adds	r7, #13
   11d0c:	2f41      	cmp	r7, #65	; 0x41
   11d0e:	d1da      	bne.n	11cc6 <coap_client_send_meas_run+0x42>
    log_counter++;
   11d10:	682b      	ldr	r3, [r5, #0]
    smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_SEND_DEV_INFO]);
   11d12:	4909      	ldr	r1, [pc, #36]	; (11d38 <coap_client_send_meas_run+0xb4>)
    log_counter++;
   11d14:	3301      	adds	r3, #1
    smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_SEND_DEV_INFO]);
   11d16:	4809      	ldr	r0, [pc, #36]	; (11d3c <coap_client_send_meas_run+0xb8>)
    log_counter++;
   11d18:	602b      	str	r3, [r5, #0]
    smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_SEND_DEV_INFO]);
   11d1a:	f002 fd33 	bl	14784 <smf_set_state>
}
   11d1e:	b00d      	add	sp, #52	; 0x34
   11d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11d24:	00023632 	.word	0x00023632
   11d28:	00022ff8 	.word	0x00022ff8
   11d2c:	00022fd8 	.word	0x00022fd8
   11d30:	2000cfd0 	.word	0x2000cfd0
   11d34:	000235f7 	.word	0x000235f7
   11d38:	00023118 	.word	0x00023118
   11d3c:	2000cfb8 	.word	0x2000cfb8
   11d40:	0002360c 	.word	0x0002360c

00011d44 <coap_client_init_run>:
{
   11d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lte_lc_register_handler(lte_handler);
   11d46:	480f      	ldr	r0, [pc, #60]	; (11d84 <coap_client_init_run+0x40>)
   11d48:	f005 f9c8 	bl	170dc <lte_lc_register_handler>
    lte_lc_psm_req(false);
   11d4c:	2000      	movs	r0, #0
   11d4e:	f005 f9d9 	bl	17104 <lte_lc_psm_req>
    coap_client_init();
   11d52:	f7ff fe55 	bl	11a00 <coap_client_init>
    char obs_resource[] = "userpayload";
   11d56:	4a0c      	ldr	r2, [pc, #48]	; (11d88 <coap_client_init_run+0x44>)
   11d58:	ab01      	add	r3, sp, #4
   11d5a:	6810      	ldr	r0, [r2, #0]
   11d5c:	6851      	ldr	r1, [r2, #4]
   11d5e:	c303      	stmia	r3!, {r0, r1}
   11d60:	6890      	ldr	r0, [r2, #8]
   11d62:	6018      	str	r0, [r3, #0]
    coap_observe(obs_resource, strlen(obs_resource));
   11d64:	a801      	add	r0, sp, #4
   11d66:	f7ff fa23 	bl	111b0 <strlen>
   11d6a:	b281      	uxth	r1, r0
   11d6c:	a801      	add	r0, sp, #4
   11d6e:	f7ff feef 	bl	11b50 <coap_observe>
    initialize_observe_renew();
   11d72:	f7ff ff43 	bl	11bfc <initialize_observe_renew>
    smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_WAIT]);
   11d76:	4905      	ldr	r1, [pc, #20]	; (11d8c <coap_client_init_run+0x48>)
   11d78:	4805      	ldr	r0, [pc, #20]	; (11d90 <coap_client_init_run+0x4c>)
   11d7a:	f002 fd03 	bl	14784 <smf_set_state>
}
   11d7e:	b005      	add	sp, #20
   11d80:	f85d fb04 	ldr.w	pc, [sp], #4
   11d84:	00011dd1 	.word	0x00011dd1
   11d88:	000235dd 	.word	0x000235dd
   11d8c:	00023128 	.word	0x00023128
   11d90:	2000cfb8 	.word	0x2000cfb8

00011d94 <coap_client_wait_run>:
{
   11d94:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   11d96:	f04f 33ff 	mov.w	r3, #4294967295
   11d9a:	f04f 32ff 	mov.w	r2, #4294967295
   11d9e:	2106      	movs	r1, #6
   11da0:	e9cd 2300 	strd	r2, r3, [sp]
   11da4:	4806      	ldr	r0, [pc, #24]	; (11dc0 <coap_client_wait_run+0x2c>)
   11da6:	2201      	movs	r2, #1
   11da8:	f010 fc92 	bl	226d0 <z_impl_k_event_wait>
    if(events == COAP_NBIOT_RECONNECT_EVT)
   11dac:	2804      	cmp	r0, #4
        smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_NBIOT_RECONNECT]);
   11dae:	bf0c      	ite	eq
   11db0:	4904      	ldreq	r1, [pc, #16]	; (11dc4 <coap_client_wait_run+0x30>)
        smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_SEND_MEAS]);
   11db2:	4905      	ldrne	r1, [pc, #20]	; (11dc8 <coap_client_wait_run+0x34>)
   11db4:	4805      	ldr	r0, [pc, #20]	; (11dcc <coap_client_wait_run+0x38>)
}
   11db6:	b003      	add	sp, #12
   11db8:	f85d eb04 	ldr.w	lr, [sp], #4
        smf_set_state(SMF_CTX(&coap_fsm_user_object), &coap_client_states[COAP_CLIENT_SEND_MEAS]);
   11dbc:	f002 bce2 	b.w	14784 <smf_set_state>
   11dc0:	2000cf74 	.word	0x2000cf74
   11dc4:	00023138 	.word	0x00023138
   11dc8:	00023108 	.word	0x00023108
   11dcc:	2000cfb8 	.word	0x2000cfb8

00011dd0 <lte_handler>:
    switch (evt->type)
   11dd0:	7803      	ldrb	r3, [r0, #0]
   11dd2:	b953      	cbnz	r3, 11dea <lte_handler+0x1a>
        if((evt->nw_reg_status == LTE_LC_NW_REG_NOT_REGISTERED)
   11dd4:	7a03      	ldrb	r3, [r0, #8]
   11dd6:	b123      	cbz	r3, 11de2 <lte_handler+0x12>
            || (evt->nw_reg_status == LTE_LC_NW_REG_REGISTRATION_DENIED)
   11dd8:	1eda      	subs	r2, r3, #3
   11dda:	2a01      	cmp	r2, #1
   11ddc:	d901      	bls.n	11de2 <lte_handler+0x12>
            || (evt->nw_reg_status == LTE_LC_NW_REG_UICC_FAIL))
   11dde:	2b5a      	cmp	r3, #90	; 0x5a
   11de0:	d103      	bne.n	11dea <lte_handler+0x1a>
	z_impl_k_event_post(event, events);
   11de2:	2104      	movs	r1, #4
   11de4:	4801      	ldr	r0, [pc, #4]	; (11dec <lte_handler+0x1c>)
   11de6:	f010 bc70 	b.w	226ca <z_impl_k_event_post>
}
   11dea:	4770      	bx	lr
   11dec:	2000cf74 	.word	0x2000cf74

00011df0 <gpio_row_control_init>:
// --- logging -----------------------------------------------------------------
LOG_MODULE_REGISTER(gpio_interface_m);

// --- functions definitions ---------------------------------------------------
void gpio_row_control_init(void)
{
   11df0:	b510      	push	{r4, lr}
    // configure water pins
    gpio_pin_configure(gpio_dev, ROW_1_WATER_GPIO, GPIO_OUTPUT);
   11df2:	4c1f      	ldr	r4, [pc, #124]	; (11e70 <gpio_row_control_init+0x80>)
   11df4:	211f      	movs	r1, #31
   11df6:	4620      	mov	r0, r4
   11df8:	f00c fe3d 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_2_WATER_GPIO, GPIO_OUTPUT);
   11dfc:	211e      	movs	r1, #30
   11dfe:	4620      	mov	r0, r4
   11e00:	f00c fe39 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_3_WATER_GPIO, GPIO_OUTPUT);
   11e04:	2114      	movs	r1, #20
   11e06:	4620      	mov	r0, r4
   11e08:	f00c fe35 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_4_WATER_GPIO, GPIO_OUTPUT);
   11e0c:	210d      	movs	r1, #13
   11e0e:	4620      	mov	r0, r4
   11e10:	f00c fe31 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_5_WATER_GPIO, GPIO_OUTPUT);
   11e14:	210c      	movs	r1, #12
   11e16:	4620      	mov	r0, r4
   11e18:	f00c fe2d 	bl	1ea76 <gpio_pin_configure.constprop.0>

    // configure light pins
    gpio_pin_configure(gpio_dev, ROW_1_LIGHT_GPIO, GPIO_OUTPUT);
   11e1c:	210b      	movs	r1, #11
   11e1e:	4620      	mov	r0, r4
   11e20:	f00c fe29 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_2_LIGHT_GPIO, GPIO_OUTPUT);
   11e24:	210a      	movs	r1, #10
   11e26:	4620      	mov	r0, r4
   11e28:	f00c fe25 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_3_LIGHT_GPIO, GPIO_OUTPUT);
   11e2c:	2109      	movs	r1, #9
   11e2e:	4620      	mov	r0, r4
   11e30:	f00c fe21 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_4_LIGHT_GPIO, GPIO_OUTPUT);
   11e34:	2108      	movs	r1, #8
   11e36:	4620      	mov	r0, r4
   11e38:	f00c fe1d 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_5_LIGHT_GPIO, GPIO_OUTPUT);
   11e3c:	2107      	movs	r1, #7
   11e3e:	4620      	mov	r0, r4
   11e40:	f00c fe19 	bl	1ea76 <gpio_pin_configure.constprop.0>

    // configure fan pins
    gpio_pin_configure(gpio_dev, ROW_1_FAN_GPIO, GPIO_OUTPUT);
   11e44:	2106      	movs	r1, #6
   11e46:	4620      	mov	r0, r4
   11e48:	f00c fe15 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_2_FAN_GPIO, GPIO_OUTPUT);
   11e4c:	2105      	movs	r1, #5
   11e4e:	4620      	mov	r0, r4
   11e50:	f00c fe11 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_3_FAN_GPIO, GPIO_OUTPUT);
   11e54:	2104      	movs	r1, #4
   11e56:	4620      	mov	r0, r4
   11e58:	f00c fe0d 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_4_FAN_GPIO, GPIO_OUTPUT);
   11e5c:	2103      	movs	r1, #3
   11e5e:	4620      	mov	r0, r4
   11e60:	f00c fe09 	bl	1ea76 <gpio_pin_configure.constprop.0>
    gpio_pin_configure(gpio_dev, ROW_5_FAN_GPIO, GPIO_OUTPUT);
   11e64:	4620      	mov	r0, r4
}
   11e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_pin_configure(gpio_dev, ROW_5_FAN_GPIO, GPIO_OUTPUT);
   11e6a:	2102      	movs	r1, #2
   11e6c:	f00c be03 	b.w	1ea76 <gpio_pin_configure.constprop.0>
   11e70:	00022d4c 	.word	0x00022d4c

00011e74 <gpio_row_control_msg_parse>:

void gpio_row_control_msg_parse(message_control_gpios_t* p_gpios_control)
{
   11e74:	b538      	push	{r3, r4, r5, lr}
   11e76:	4604      	mov	r4, r0
    // LOG_INF("Controlling 9160 gpios");
    // Control fan for every row
    gpio_pin_set(gpio_dev, ROW_1_FAN_GPIO, p_gpios_control->row_fan_control[0]);
   11e78:	4d26      	ldr	r5, [pc, #152]	; (11f14 <gpio_row_control_msg_parse+0xa0>)
   11e7a:	7882      	ldrb	r2, [r0, #2]
   11e7c:	2106      	movs	r1, #6
   11e7e:	4628      	mov	r0, r5
   11e80:	f00c fde9 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_2_FAN_GPIO, p_gpios_control->row_fan_control[1]);
   11e84:	78e2      	ldrb	r2, [r4, #3]
   11e86:	2105      	movs	r1, #5
   11e88:	4628      	mov	r0, r5
   11e8a:	f00c fde4 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_3_FAN_GPIO, p_gpios_control->row_fan_control[2]);
   11e8e:	7922      	ldrb	r2, [r4, #4]
   11e90:	2104      	movs	r1, #4
   11e92:	4628      	mov	r0, r5
   11e94:	f00c fddf 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_4_FAN_GPIO, p_gpios_control->row_fan_control[3]);
   11e98:	7962      	ldrb	r2, [r4, #5]
   11e9a:	2103      	movs	r1, #3
   11e9c:	4628      	mov	r0, r5
   11e9e:	f00c fdda 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_5_FAN_GPIO, p_gpios_control->row_fan_control[4]);
   11ea2:	79a2      	ldrb	r2, [r4, #6]
   11ea4:	2102      	movs	r1, #2
   11ea6:	4628      	mov	r0, r5
   11ea8:	f00c fdd5 	bl	1ea56 <gpio_pin_set>

    // control water for every row
    gpio_pin_set(gpio_dev, ROW_1_WATER_GPIO, p_gpios_control->row_water_control[0]);
   11eac:	79e2      	ldrb	r2, [r4, #7]
   11eae:	211f      	movs	r1, #31
   11eb0:	4628      	mov	r0, r5
   11eb2:	f00c fdd0 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_2_WATER_GPIO, p_gpios_control->row_water_control[1]);
   11eb6:	7a22      	ldrb	r2, [r4, #8]
   11eb8:	211e      	movs	r1, #30
   11eba:	4628      	mov	r0, r5
   11ebc:	f00c fdcb 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_3_WATER_GPIO, p_gpios_control->row_water_control[2]);
   11ec0:	7a62      	ldrb	r2, [r4, #9]
   11ec2:	2114      	movs	r1, #20
   11ec4:	4628      	mov	r0, r5
   11ec6:	f00c fdc6 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_4_WATER_GPIO, p_gpios_control->row_water_control[3]);
   11eca:	7aa2      	ldrb	r2, [r4, #10]
   11ecc:	210d      	movs	r1, #13
   11ece:	4628      	mov	r0, r5
   11ed0:	f00c fdc1 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_5_WATER_GPIO, p_gpios_control->row_water_control[4]);
   11ed4:	7ae2      	ldrb	r2, [r4, #11]
   11ed6:	210c      	movs	r1, #12
   11ed8:	4628      	mov	r0, r5
   11eda:	f00c fdbc 	bl	1ea56 <gpio_pin_set>

    // control light for every row
    gpio_pin_set(gpio_dev, ROW_1_LIGHT_GPIO, p_gpios_control->row_lights_control[0]);
   11ede:	7b22      	ldrb	r2, [r4, #12]
   11ee0:	210b      	movs	r1, #11
   11ee2:	4628      	mov	r0, r5
   11ee4:	f00c fdb7 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_2_LIGHT_GPIO, p_gpios_control->row_lights_control[1]);
   11ee8:	7b62      	ldrb	r2, [r4, #13]
   11eea:	210a      	movs	r1, #10
   11eec:	4628      	mov	r0, r5
   11eee:	f00c fdb2 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_3_LIGHT_GPIO, p_gpios_control->row_lights_control[2]);
   11ef2:	7ba2      	ldrb	r2, [r4, #14]
   11ef4:	2109      	movs	r1, #9
   11ef6:	4628      	mov	r0, r5
   11ef8:	f00c fdad 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_4_LIGHT_GPIO, p_gpios_control->row_lights_control[3]);
   11efc:	7be2      	ldrb	r2, [r4, #15]
   11efe:	2108      	movs	r1, #8
   11f00:	4628      	mov	r0, r5
   11f02:	f00c fda8 	bl	1ea56 <gpio_pin_set>
    gpio_pin_set(gpio_dev, ROW_5_LIGHT_GPIO, p_gpios_control->row_lights_control[4]);
   11f06:	4628      	mov	r0, r5
   11f08:	7c22      	ldrb	r2, [r4, #16]
   11f0a:	2107      	movs	r1, #7
   11f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gpio_pin_set(gpio_dev, ROW_5_LIGHT_GPIO, p_gpios_control->row_lights_control[4]);
   11f10:	f00c bda1 	b.w	1ea56 <gpio_pin_set>
   11f14:	00022d4c 	.word	0x00022d4c

00011f18 <update_timestamp>:
/**
 * @brief function to update timestamp
 * 
 */
void update_timestamp(void)
{
   11f18:	b510      	push	{r4, lr}
    // Get calendar time
    date_time_now(&timestamp);
   11f1a:	4c07      	ldr	r4, [pc, #28]	; (11f38 <update_timestamp+0x20>)
   11f1c:	4620      	mov	r0, r4
   11f1e:	f006 fa75 	bl	1840c <date_time_now>
    // Add 2 hours to Unix time to match our timezone offset
    timestamp += 7200000;
   11f22:	e9d4 3200 	ldrd	r3, r2, [r4]
   11f26:	4905      	ldr	r1, [pc, #20]	; (11f3c <update_timestamp+0x24>)
   11f28:	185b      	adds	r3, r3, r1
   11f2a:	f04f 0100 	mov.w	r1, #0
   11f2e:	eb41 0202 	adc.w	r2, r1, r2
   11f32:	e9c4 3200 	strd	r3, r2, [r4]
}
   11f36:	bd10      	pop	{r4, pc}
   11f38:	2000caf8 	.word	0x2000caf8
   11f3c:	006ddd00 	.word	0x006ddd00

00011f40 <get_timestamp>:
 * @return int64_t 
 */
int64_t get_timestamp(void)
{
    return timestamp;
   11f40:	4b01      	ldr	r3, [pc, #4]	; (11f48 <get_timestamp+0x8>)
   11f42:	e9d3 0100 	ldrd	r0, r1, [r3]
   11f46:	4770      	bx	lr
   11f48:	2000caf8 	.word	0x2000caf8

00011f4c <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11f4c:	2803      	cmp	r0, #3
{
   11f4e:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11f50:	d906      	bls.n	11f60 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   11f52:	f00d fff7 	bl	1ff44 <__errno>
   11f56:	2309      	movs	r3, #9
   11f58:	6003      	str	r3, [r0, #0]
   11f5a:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   11f5e:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11f60:	4b04      	ldr	r3, [pc, #16]	; (11f74 <_check_fd+0x28>)
   11f62:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   11f66:	3008      	adds	r0, #8
   11f68:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   11f6c:	2b00      	cmp	r3, #0
   11f6e:	d0f0      	beq.n	11f52 <_check_fd+0x6>
	return 0;
   11f70:	2000      	movs	r0, #0
   11f72:	e7f4      	b.n	11f5e <_check_fd+0x12>
   11f74:	2000cfd4 	.word	0x2000cfd4

00011f78 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   11f78:	b570      	push	{r4, r5, r6, lr}
   11f7a:	4604      	mov	r4, r0
   11f7c:	460d      	mov	r5, r1
   11f7e:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   11f80:	f7ff ffe4 	bl	11f4c <_check_fd>
   11f84:	2800      	cmp	r0, #0
   11f86:	db09      	blt.n	11f9c <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   11f88:	4b06      	ldr	r3, [pc, #24]	; (11fa4 <z_get_fd_obj+0x2c>)
   11f8a:	0160      	lsls	r0, r4, #5
   11f8c:	b145      	cbz	r5, 11fa0 <z_get_fd_obj+0x28>
   11f8e:	181a      	adds	r2, r3, r0
   11f90:	6852      	ldr	r2, [r2, #4]
   11f92:	42aa      	cmp	r2, r5
   11f94:	d004      	beq.n	11fa0 <z_get_fd_obj+0x28>
		errno = err;
   11f96:	f00d ffd5 	bl	1ff44 <__errno>
   11f9a:	6006      	str	r6, [r0, #0]
		return NULL;
   11f9c:	2000      	movs	r0, #0
   11f9e:	e000      	b.n	11fa2 <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   11fa0:	5818      	ldr	r0, [r3, r0]
}
   11fa2:	bd70      	pop	{r4, r5, r6, pc}
   11fa4:	2000cfd4 	.word	0x2000cfd4

00011fa8 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   11fa8:	b570      	push	{r4, r5, r6, lr}
   11faa:	4604      	mov	r4, r0
   11fac:	460e      	mov	r6, r1
   11fae:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   11fb0:	f7ff ffcc 	bl	11f4c <_check_fd>
   11fb4:	2800      	cmp	r0, #0
   11fb6:	db0c      	blt.n	11fd2 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   11fb8:	4b07      	ldr	r3, [pc, #28]	; (11fd8 <z_get_fd_obj_and_vtable+0x30>)
   11fba:	0161      	lsls	r1, r4, #5
   11fbc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   11fc0:	6862      	ldr	r2, [r4, #4]
   11fc2:	6032      	str	r2, [r6, #0]

	if (lock) {
   11fc4:	b11d      	cbz	r5, 11fce <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   11fc6:	f101 020c 	add.w	r2, r1, #12
   11fca:	441a      	add	r2, r3
   11fcc:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   11fce:	5858      	ldr	r0, [r3, r1]
}
   11fd0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   11fd2:	2000      	movs	r0, #0
   11fd4:	e7fc      	b.n	11fd0 <z_get_fd_obj_and_vtable+0x28>
   11fd6:	bf00      	nop
   11fd8:	2000cfd4 	.word	0x2000cfd4

00011fdc <z_reserve_fd>:

int z_reserve_fd(void)
{
   11fdc:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11fde:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   11fe0:	f04f 32ff 	mov.w	r2, #4294967295
   11fe4:	f04f 33ff 	mov.w	r3, #4294967295
   11fe8:	4814      	ldr	r0, [pc, #80]	; (1203c <z_reserve_fd+0x60>)
   11fea:	f00a fb3f 	bl	1c66c <z_impl_k_mutex_lock>
   11fee:	4a14      	ldr	r2, [pc, #80]	; (12040 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   11ff0:	0163      	lsls	r3, r4, #5
   11ff2:	e8d2 1faf 	lda	r1, [r2]
   11ff6:	b179      	cbz	r1, 12018 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11ff8:	3401      	adds	r4, #1
   11ffa:	2c04      	cmp	r4, #4
   11ffc:	f102 0220 	add.w	r2, r2, #32
   12000:	d1f6      	bne.n	11ff0 <z_reserve_fd+0x14>
	errno = ENFILE;
   12002:	f00d ff9f 	bl	1ff44 <__errno>
   12006:	2317      	movs	r3, #23
	return -1;
   12008:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   1200c:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1200e:	480b      	ldr	r0, [pc, #44]	; (1203c <z_reserve_fd+0x60>)
   12010:	f00a fbaa 	bl	1c768 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   12014:	4620      	mov	r0, r4
   12016:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12018:	e8d2 0fef 	ldaex	r0, [r2]
   1201c:	3001      	adds	r0, #1
   1201e:	e8c2 0fec 	stlex	ip, r0, [r2]
   12022:	f1bc 0f00 	cmp.w	ip, #0
   12026:	d1f7      	bne.n	12018 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   12028:	4806      	ldr	r0, [pc, #24]	; (12044 <z_reserve_fd+0x68>)
   1202a:	18c2      	adds	r2, r0, r3
   1202c:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   1202e:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   12030:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   12032:	4418      	add	r0, r3
   12034:	f00f fecb 	bl	21dce <z_impl_k_mutex_init>
   12038:	e7e9      	b.n	1200e <z_reserve_fd+0x32>
   1203a:	bf00      	nop
   1203c:	2000c840 	.word	0x2000c840
   12040:	2000cfdc 	.word	0x2000cfdc
   12044:	2000cfd4 	.word	0x2000cfd4

00012048 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   12048:	b410      	push	{r4}
   1204a:	4614      	mov	r4, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   1204c:	4b09      	ldr	r3, [pc, #36]	; (12074 <z_finalize_fd+0x2c>)
   1204e:	0142      	lsls	r2, r0, #5
   12050:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   12054:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   12056:	6044      	str	r4, [r0, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   12058:	b14c      	cbz	r4, 1206e <z_finalize_fd+0x26>
   1205a:	68e0      	ldr	r0, [r4, #12]
   1205c:	b138      	cbz	r0, 1206e <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1205e:	320c      	adds	r2, #12
   12060:	4620      	mov	r0, r4
   12062:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   12064:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   12066:	f240 1205 	movw	r2, #261	; 0x105
   1206a:	f00c bd40 	b.w	1eaee <z_fdtable_call_ioctl.constprop.0>
}
   1206e:	bc10      	pop	{r4}
   12070:	4770      	bx	lr
   12072:	bf00      	nop
   12074:	2000cfd4 	.word	0x2000cfd4

00012078 <z_free_fd>:

void z_free_fd(int fd)
{
   12078:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   1207a:	4b0d      	ldr	r3, [pc, #52]	; (120b0 <z_free_fd+0x38>)
   1207c:	0140      	lsls	r0, r0, #5
   1207e:	f100 0208 	add.w	r2, r0, #8
   12082:	441a      	add	r2, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12084:	e8d2 1faf 	lda	r1, [r2]
		if (!old_rc) {
   12088:	b181      	cbz	r1, 120ac <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   1208a:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1208c:	e8d2 5fef 	ldaex	r5, [r2]
   12090:	428d      	cmp	r5, r1
   12092:	d104      	bne.n	1209e <z_free_fd+0x26>
   12094:	e8c2 4fec 	stlex	ip, r4, [r2]
   12098:	f1bc 0f00 	cmp.w	ip, #0
   1209c:	d1f6      	bne.n	1208c <z_free_fd+0x14>
   1209e:	d1f1      	bne.n	12084 <z_free_fd+0xc>
	if (old_rc != 1) {
   120a0:	2901      	cmp	r1, #1
	fdtable[fd].obj = NULL;
   120a2:	bf01      	itttt	eq
   120a4:	2200      	moveq	r2, #0
   120a6:	1819      	addeq	r1, r3, r0
   120a8:	501a      	streq	r2, [r3, r0]
	fdtable[fd].vtable = NULL;
   120aa:	604a      	streq	r2, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   120ac:	bd30      	pop	{r4, r5, pc}
   120ae:	bf00      	nop
   120b0:	2000cfd4 	.word	0x2000cfd4

000120b4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   120b4:	680b      	ldr	r3, [r1, #0]
   120b6:	3301      	adds	r3, #1
   120b8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   120ba:	4b01      	ldr	r3, [pc, #4]	; (120c0 <char_out+0xc>)
   120bc:	681b      	ldr	r3, [r3, #0]
   120be:	4718      	bx	r3
   120c0:	2000c530 	.word	0x2000c530

000120c4 <__printk_hook_install>:
	_char_out = fn;
   120c4:	4b01      	ldr	r3, [pc, #4]	; (120cc <__printk_hook_install+0x8>)
   120c6:	6018      	str	r0, [r3, #0]
}
   120c8:	4770      	bx	lr
   120ca:	bf00      	nop
   120cc:	2000c530 	.word	0x2000c530

000120d0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   120d0:	b507      	push	{r0, r1, r2, lr}
   120d2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   120d4:	2100      	movs	r1, #0
{
   120d6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   120d8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   120da:	4803      	ldr	r0, [pc, #12]	; (120e8 <vprintk+0x18>)
   120dc:	a901      	add	r1, sp, #4
   120de:	f000 f9e7 	bl	124b0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   120e2:	b003      	add	sp, #12
   120e4:	f85d fb04 	ldr.w	pc, [sp], #4
   120e8:	000120b5 	.word	0x000120b5

000120ec <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   120ec:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   120ee:	2500      	movs	r5, #0
{
   120f0:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   120f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   120f6:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   120f8:	a901      	add	r1, sp, #4
   120fa:	4805      	ldr	r0, [pc, #20]	; (12110 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   120fc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   120fe:	f000 f9d7 	bl	124b0 <cbvprintf>

	if (ctx.count < ctx.max) {
   12102:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   12106:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12108:	bfb8      	it	lt
   1210a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1210c:	b005      	add	sp, #20
   1210e:	bd30      	pop	{r4, r5, pc}
   12110:	0001ec0f 	.word	0x0001ec0f

00012114 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12118:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   1211c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1211e:	f019 0808 	ands.w	r8, r9, #8
{
   12122:	4693      	mov	fp, r2
	if (processing) {
   12124:	d00d      	beq.n	12142 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   12126:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12128:	bf0c      	ite	eq
   1212a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1212e:	f049 0920 	orrne.w	r9, r9, #32
   12132:	f8a0 9018 	strh.w	r9, [r0, #24]
   12136:	f38b 8811 	msr	BASEPRI, fp
   1213a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1213e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12142:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   12146:	2902      	cmp	r1, #2
   12148:	d107      	bne.n	1215a <process_event+0x46>
			evt = process_recheck(mgr);
   1214a:	4620      	mov	r0, r4
   1214c:	f00c fd8c 	bl	1ec68 <process_recheck>
		if (evt == EVT_NOP) {
   12150:	2800      	cmp	r0, #0
   12152:	d0f0      	beq.n	12136 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   12154:	2801      	cmp	r0, #1
   12156:	8b23      	ldrh	r3, [r4, #24]
   12158:	d150      	bne.n	121fc <process_event+0xe8>
			res = mgr->last_res;
   1215a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1215c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1215e:	2f00      	cmp	r7, #0
   12160:	da15      	bge.n	1218e <process_event+0x7a>
		*clients = mgr->clients;
   12162:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12164:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12168:	e9c4 8800 	strd	r8, r8, [r4]
   1216c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12170:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   12172:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12174:	8b21      	ldrh	r1, [r4, #24]
   12176:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1217a:	45ca      	cmp	sl, r9
   1217c:	d002      	beq.n	12184 <process_event+0x70>
		if (do_monitors
   1217e:	68a3      	ldr	r3, [r4, #8]
   12180:	2b00      	cmp	r3, #0
   12182:	d15c      	bne.n	1223e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   12184:	b90d      	cbnz	r5, 1218a <process_event+0x76>
		    || (transit != NULL)) {
   12186:	2e00      	cmp	r6, #0
   12188:	d074      	beq.n	12274 <process_event+0x160>
   1218a:	2300      	movs	r3, #0
   1218c:	e058      	b.n	12240 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1218e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12192:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12194:	2a01      	cmp	r2, #1
   12196:	d820      	bhi.n	121da <process_event+0xc6>
		*clients = mgr->clients;
   12198:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   1219c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1219e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   121a0:	b289      	uxth	r1, r1
	list->tail = NULL;
   121a2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   121a6:	d10c      	bne.n	121c2 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   121a8:	2d00      	cmp	r5, #0
   121aa:	462b      	mov	r3, r5
   121ac:	bf38      	it	cc
   121ae:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   121b0:	b12b      	cbz	r3, 121be <process_event+0xaa>
				mgr->refs += 1U;
   121b2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   121b4:	681b      	ldr	r3, [r3, #0]
   121b6:	3201      	adds	r2, #1
   121b8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   121ba:	2b00      	cmp	r3, #0
   121bc:	d1f8      	bne.n	121b0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121be:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   121c2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   121c4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   121c6:	f00c fd4f 	bl	1ec68 <process_recheck>
   121ca:	4606      	mov	r6, r0
   121cc:	2800      	cmp	r0, #0
   121ce:	d0d1      	beq.n	12174 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   121d0:	8b23      	ldrh	r3, [r4, #24]
   121d2:	f043 0320 	orr.w	r3, r3, #32
   121d6:	8323      	strh	r3, [r4, #24]
   121d8:	e7cb      	b.n	12172 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   121da:	2b04      	cmp	r3, #4
   121dc:	d10c      	bne.n	121f8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121de:	f021 0107 	bic.w	r1, r1, #7
   121e2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   121e4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   121e6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   121e8:	f00c fd3e 	bl	1ec68 <process_recheck>
   121ec:	4605      	mov	r5, r0
   121ee:	2800      	cmp	r0, #0
   121f0:	d0bf      	beq.n	12172 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   121f2:	f041 0120 	orr.w	r1, r1, #32
   121f6:	8321      	strh	r1, [r4, #24]
   121f8:	2500      	movs	r5, #0
   121fa:	e7ba      	b.n	12172 <process_event+0x5e>
		} else if (evt == EVT_START) {
   121fc:	2803      	cmp	r0, #3
   121fe:	d109      	bne.n	12214 <process_event+0x100>
			transit = mgr->transitions->start;
   12200:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12202:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   12206:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12208:	f043 0306 	orr.w	r3, r3, #6
}
   1220c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1220e:	8323      	strh	r3, [r4, #24]
		res = 0;
   12210:	462f      	mov	r7, r5
   12212:	e7af      	b.n	12174 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   12214:	2804      	cmp	r0, #4
   12216:	d106      	bne.n	12226 <process_event+0x112>
			transit = mgr->transitions->stop;
   12218:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1221a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1221e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12220:	f043 0304 	orr.w	r3, r3, #4
   12224:	e7f2      	b.n	1220c <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   12226:	2805      	cmp	r0, #5
   12228:	d106      	bne.n	12238 <process_event+0x124>
			transit = mgr->transitions->reset;
   1222a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1222c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   12230:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12232:	f043 0305 	orr.w	r3, r3, #5
   12236:	e7e9      	b.n	1220c <process_event+0xf8>
   12238:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1223a:	462e      	mov	r6, r5
   1223c:	e7e8      	b.n	12210 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   1223e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12240:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12244:	8321      	strh	r1, [r4, #24]
   12246:	f38b 8811 	msr	BASEPRI, fp
   1224a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1224e:	bb03      	cbnz	r3, 12292 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   12250:	2d00      	cmp	r5, #0
   12252:	d133      	bne.n	122bc <process_event+0x1a8>
			if (transit != NULL) {
   12254:	b116      	cbz	r6, 1225c <process_event+0x148>
				transit(mgr, transition_complete);
   12256:	4620      	mov	r0, r4
   12258:	4920      	ldr	r1, [pc, #128]	; (122dc <process_event+0x1c8>)
   1225a:	47b0      	blx	r6
	__asm__ volatile(
   1225c:	f04f 0320 	mov.w	r3, #32
   12260:	f3ef 8b11 	mrs	fp, BASEPRI
   12264:	f383 8812 	msr	BASEPRI_MAX, r3
   12268:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1226c:	8b23      	ldrh	r3, [r4, #24]
   1226e:	f023 0308 	bic.w	r3, r3, #8
   12272:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12274:	8b23      	ldrh	r3, [r4, #24]
   12276:	06da      	lsls	r2, r3, #27
   12278:	d528      	bpl.n	122cc <process_event+0x1b8>
			evt = EVT_COMPLETE;
   1227a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1227c:	f023 0310 	bic.w	r3, r3, #16
   12280:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   12282:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   12286:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1228a:	2900      	cmp	r1, #0
   1228c:	f47f af5b 	bne.w	12146 <process_event+0x32>
out:
   12290:	e751      	b.n	12136 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12292:	68a1      	ldr	r1, [r4, #8]
   12294:	2900      	cmp	r1, #0
   12296:	d0db      	beq.n	12250 <process_event+0x13c>
	return node->next;
   12298:	680b      	ldr	r3, [r1, #0]
   1229a:	2b00      	cmp	r3, #0
   1229c:	bf38      	it	cc
   1229e:	2300      	movcc	r3, #0
   122a0:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   122a2:	4652      	mov	r2, sl
   122a4:	463b      	mov	r3, r7
   122a6:	4620      	mov	r0, r4
   122a8:	f8d1 b004 	ldr.w	fp, [r1, #4]
   122ac:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   122ae:	f1b9 0f00 	cmp.w	r9, #0
   122b2:	d0cd      	beq.n	12250 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   122b4:	4649      	mov	r1, r9
   122b6:	f8d9 3000 	ldr.w	r3, [r9]
   122ba:	e7ee      	b.n	1229a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   122bc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   122be:	463b      	mov	r3, r7
   122c0:	4652      	mov	r2, sl
   122c2:	4620      	mov	r0, r4
   122c4:	682d      	ldr	r5, [r5, #0]
   122c6:	f00c fceb 	bl	1eca0 <notify_one>
   122ca:	e7c1      	b.n	12250 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   122cc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   122d0:	bf1e      	ittt	ne
   122d2:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   122d6:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   122d8:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   122da:	e7d2      	b.n	12282 <process_event+0x16e>
   122dc:	0001eccd 	.word	0x0001eccd

000122e0 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   122e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   122e4:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   122e6:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   122e8:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   122ec:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   122ee:	f240 746c 	movw	r4, #1900	; 0x76c
   122f2:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   122f4:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   122f6:	6943      	ldr	r3, [r0, #20]
{
   122f8:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   122fa:	18e4      	adds	r4, r4, r3
   122fc:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   12300:	f1b9 0f02 	cmp.w	r9, #2
   12304:	bf8c      	ite	hi
   12306:	2300      	movhi	r3, #0
   12308:	2301      	movls	r3, #1
   1230a:	1ae4      	subs	r4, r4, r3
   1230c:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   12310:	2c00      	cmp	r4, #0
   12312:	f175 0300 	sbcs.w	r3, r5, #0
   12316:	da57      	bge.n	123c8 <timeutil_timegm64+0xe8>
   12318:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   1231c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   12320:	2300      	movs	r3, #0
   12322:	1820      	adds	r0, r4, r0
   12324:	f145 31ff 	adc.w	r1, r5, #4294967295
   12328:	f7fe fd6a 	bl	10e00 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   1232c:	4b29      	ldr	r3, [pc, #164]	; (123d4 <timeutil_timegm64+0xf4>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1232e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   12332:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12336:	e9d8 5300 	ldrd	r5, r3, [r8]
   1233a:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1233c:	f1b9 0f02 	cmp.w	r9, #2
   12340:	bf8c      	ite	hi
   12342:	f06f 0e02 	mvnhi.w	lr, #2
   12346:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1234a:	ea4f 7be3 	mov.w	fp, r3, asr #31
   1234e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12352:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12354:	fbcc ab03 	smlal	sl, fp, ip, r3
   12358:	fbaa 230c 	umull	r2, r3, sl, ip
   1235c:	fb0c 330b 	mla	r3, ip, fp, r3
   12360:	1952      	adds	r2, r2, r5
   12362:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12366:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1236a:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1236e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   12372:	fb05 cc04 	mla	ip, r5, r4, ip
   12376:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12378:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1237c:	4465      	add	r5, ip
   1237e:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12382:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12386:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1238a:	f10e 0e02 	add.w	lr, lr, #2
   1238e:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
   12392:	f8df c04c 	ldr.w	ip, [pc, #76]	; 123e0 <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12396:	1b2c      	subs	r4, r5, r4
   12398:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   1239a:	fba0 450c 	umull	r4, r5, r0, ip
   1239e:	fb0c 5501 	mla	r5, ip, r1, r5
   123a2:	490d      	ldr	r1, [pc, #52]	; (123d8 <timeutil_timegm64+0xf8>)
   123a4:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   123a6:	490d      	ldr	r1, [pc, #52]	; (123dc <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   123a8:	f145 37ff 	adc.w	r7, r5, #4294967295
   123ac:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   123b0:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   123b4:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   123b8:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   123bc:	18a0      	adds	r0, r4, r2
   123be:	eb45 0103 	adc.w	r1, r5, r3
   123c2:	b003      	add	sp, #12
   123c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   123c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   123cc:	2300      	movs	r3, #0
   123ce:	4620      	mov	r0, r4
   123d0:	4629      	mov	r1, r5
   123d2:	e7a9      	b.n	12328 <timeutil_timegm64+0x48>
   123d4:	fffffe70 	.word	0xfffffe70
   123d8:	fff50594 	.word	0xfff50594
   123dc:	00015180 	.word	0x00015180
   123e0:	00023ab1 	.word	0x00023ab1

000123e4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   123e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   123e6:	4602      	mov	r2, r0
   123e8:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   123ea:	270a      	movs	r7, #10
	size_t val = 0;
   123ec:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   123ee:	4e07      	ldr	r6, [pc, #28]	; (1240c <extract_decimal+0x28>)
   123f0:	460c      	mov	r4, r1
   123f2:	7823      	ldrb	r3, [r4, #0]
   123f4:	3101      	adds	r1, #1
   123f6:	5d9d      	ldrb	r5, [r3, r6]
   123f8:	076d      	lsls	r5, r5, #29
   123fa:	d401      	bmi.n	12400 <extract_decimal+0x1c>
	}
	*str = sp;
   123fc:	6014      	str	r4, [r2, #0]
	return val;
}
   123fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   12400:	fb07 3300 	mla	r3, r7, r0, r3
   12404:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   12408:	e7f2      	b.n	123f0 <extract_decimal+0xc>
   1240a:	bf00      	nop
   1240c:	000252b9 	.word	0x000252b9

00012410 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   12410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12414:	4614      	mov	r4, r2
   12416:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   12418:	78d3      	ldrb	r3, [r2, #3]
   1241a:	4a24      	ldr	r2, [pc, #144]	; (124ac <encode_uint+0x9c>)
	switch (specifier) {
   1241c:	2b6f      	cmp	r3, #111	; 0x6f
   1241e:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   12422:	4606      	mov	r6, r0
   12424:	f00a 0203 	and.w	r2, sl, #3
   12428:	460f      	mov	r7, r1
   1242a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1242c:	d02d      	beq.n	1248a <encode_uint+0x7a>
   1242e:	d828      	bhi.n	12482 <encode_uint+0x72>
		return 16;
   12430:	2b58      	cmp	r3, #88	; 0x58
   12432:	bf14      	ite	ne
   12434:	250a      	movne	r5, #10
   12436:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   12438:	46aa      	mov	sl, r5
   1243a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   1243e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   12442:	4652      	mov	r2, sl
   12444:	465b      	mov	r3, fp
   12446:	4630      	mov	r0, r6
   12448:	4639      	mov	r1, r7
   1244a:	f7fe fd29 	bl	10ea0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1244e:	2a09      	cmp	r2, #9
   12450:	b2d3      	uxtb	r3, r2
   12452:	d81f      	bhi.n	12494 <encode_uint+0x84>
   12454:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   12456:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12458:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1245a:	bf08      	it	eq
   1245c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1245e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   12462:	d301      	bcc.n	12468 <encode_uint+0x58>
   12464:	45c8      	cmp	r8, r9
   12466:	d812      	bhi.n	1248e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   12468:	7823      	ldrb	r3, [r4, #0]
   1246a:	069b      	lsls	r3, r3, #26
   1246c:	d505      	bpl.n	1247a <encode_uint+0x6a>
		if (radix == 8) {
   1246e:	2d08      	cmp	r5, #8
   12470:	d116      	bne.n	124a0 <encode_uint+0x90>
			conv->altform_0 = true;
   12472:	78a3      	ldrb	r3, [r4, #2]
   12474:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   12478:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   1247a:	4640      	mov	r0, r8
   1247c:	b003      	add	sp, #12
   1247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   12482:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   12486:	2b70      	cmp	r3, #112	; 0x70
   12488:	e7d3      	b.n	12432 <encode_uint+0x22>
	switch (specifier) {
   1248a:	2508      	movs	r5, #8
   1248c:	e7d4      	b.n	12438 <encode_uint+0x28>
		value /= radix;
   1248e:	4606      	mov	r6, r0
   12490:	460f      	mov	r7, r1
   12492:	e7d6      	b.n	12442 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12494:	9a01      	ldr	r2, [sp, #4]
   12496:	2a01      	cmp	r2, #1
   12498:	bf0c      	ite	eq
   1249a:	3337      	addeq	r3, #55	; 0x37
   1249c:	3357      	addne	r3, #87	; 0x57
   1249e:	e7da      	b.n	12456 <encode_uint+0x46>
		} else if (radix == 16) {
   124a0:	2d10      	cmp	r5, #16
   124a2:	d1ea      	bne.n	1247a <encode_uint+0x6a>
			conv->altform_0c = true;
   124a4:	78a3      	ldrb	r3, [r4, #2]
   124a6:	f043 0310 	orr.w	r3, r3, #16
   124aa:	e7e5      	b.n	12478 <encode_uint+0x68>
   124ac:	000252b9 	.word	0x000252b9

000124b0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   124b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b4:	4682      	mov	sl, r0
   124b6:	468b      	mov	fp, r1
   124b8:	4691      	mov	r9, r2
   124ba:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   124bc:	2500      	movs	r5, #0
{
   124be:	b093      	sub	sp, #76	; 0x4c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   124c0:	f899 0000 	ldrb.w	r0, [r9]
   124c4:	b908      	cbnz	r0, 124ca <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   124c6:	4628      	mov	r0, r5
   124c8:	e33a      	b.n	12b40 <cbvprintf+0x690>
		if (*fp != '%') {
   124ca:	f109 0301 	add.w	r3, r9, #1
   124ce:	2825      	cmp	r0, #37	; 0x25
   124d0:	9302      	str	r3, [sp, #8]
   124d2:	d006      	beq.n	124e2 <cbvprintf+0x32>
			OUTC('%');
   124d4:	4659      	mov	r1, fp
   124d6:	47d0      	blx	sl
   124d8:	2800      	cmp	r0, #0
   124da:	f2c0 8331 	blt.w	12b40 <cbvprintf+0x690>
   124de:	3501      	adds	r5, #1
			break;
   124e0:	e1f1      	b.n	128c6 <cbvprintf+0x416>
		} state = {
   124e2:	2218      	movs	r2, #24
   124e4:	2100      	movs	r1, #0
   124e6:	a80c      	add	r0, sp, #48	; 0x30
   124e8:	f010 f955 	bl	22796 <memset>
	if (*sp == '%') {
   124ec:	f899 3001 	ldrb.w	r3, [r9, #1]
   124f0:	2b25      	cmp	r3, #37	; 0x25
   124f2:	d059      	beq.n	125a8 <cbvprintf+0xf8>
   124f4:	9a02      	ldr	r2, [sp, #8]
   124f6:	4616      	mov	r6, r2
		switch (*sp) {
   124f8:	f812 3b01 	ldrb.w	r3, [r2], #1
   124fc:	2b2b      	cmp	r3, #43	; 0x2b
   124fe:	f000 808b 	beq.w	12618 <cbvprintf+0x168>
   12502:	d879      	bhi.n	125f8 <cbvprintf+0x148>
   12504:	2b20      	cmp	r3, #32
   12506:	f000 808c 	beq.w	12622 <cbvprintf+0x172>
   1250a:	2b23      	cmp	r3, #35	; 0x23
   1250c:	f000 808e 	beq.w	1262c <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   12510:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12514:	f003 0244 	and.w	r2, r3, #68	; 0x44
   12518:	2a44      	cmp	r2, #68	; 0x44
   1251a:	d103      	bne.n	12524 <cbvprintf+0x74>
		conv->flag_zero = false;
   1251c:	f36f 1386 	bfc	r3, #6, #1
   12520:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   12524:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12528:	9605      	str	r6, [sp, #20]
   1252a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1252e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   12532:	7833      	ldrb	r3, [r6, #0]
   12534:	2b2a      	cmp	r3, #42	; 0x2a
   12536:	d17e      	bne.n	12636 <cbvprintf+0x186>
		conv->width_star = true;
   12538:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1253c:	f043 0301 	orr.w	r3, r3, #1
   12540:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   12544:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   12546:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   12548:	781a      	ldrb	r2, [r3, #0]
   1254a:	2a2e      	cmp	r2, #46	; 0x2e
   1254c:	bf0c      	ite	eq
   1254e:	2101      	moveq	r1, #1
   12550:	2100      	movne	r1, #0
   12552:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12556:	f361 0241 	bfi	r2, r1, #1, #1
   1255a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1255e:	d10b      	bne.n	12578 <cbvprintf+0xc8>
	++sp;
   12560:	1c5a      	adds	r2, r3, #1
   12562:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   12564:	785a      	ldrb	r2, [r3, #1]
   12566:	2a2a      	cmp	r2, #42	; 0x2a
   12568:	d17b      	bne.n	12662 <cbvprintf+0x1b2>
		conv->prec_star = true;
   1256a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1256e:	3302      	adds	r3, #2
		conv->prec_star = true;
   12570:	f042 0204 	orr.w	r2, r2, #4
   12574:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
   12578:	4619      	mov	r1, r3
   1257a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1257e:	286c      	cmp	r0, #108	; 0x6c
   12580:	f000 80b6 	beq.w	126f0 <cbvprintf+0x240>
   12584:	d87d      	bhi.n	12682 <cbvprintf+0x1d2>
   12586:	2868      	cmp	r0, #104	; 0x68
   12588:	f000 8084 	beq.w	12694 <cbvprintf+0x1e4>
   1258c:	286a      	cmp	r0, #106	; 0x6a
   1258e:	f000 80b9 	beq.w	12704 <cbvprintf+0x254>
   12592:	284c      	cmp	r0, #76	; 0x4c
   12594:	f000 80bd 	beq.w	12712 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   12598:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
   1259c:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1259e:	f36f 02c6 	bfc	r2, #3, #4
   125a2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   125a6:	e080      	b.n	126aa <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   125a8:	f109 0202 	add.w	r2, r9, #2
   125ac:	9202      	str	r2, [sp, #8]
   125ae:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   125b2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   125b6:	07d9      	lsls	r1, r3, #31
   125b8:	f140 8149 	bpl.w	1284e <cbvprintf+0x39e>
			width = va_arg(ap, int);
   125bc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   125c0:	f1b8 0f00 	cmp.w	r8, #0
   125c4:	da07      	bge.n	125d6 <cbvprintf+0x126>
				conv->flag_dash = true;
   125c6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
   125ca:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
   125ce:	f042 0204 	orr.w	r2, r2, #4
   125d2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
   125d6:	075a      	lsls	r2, r3, #29
   125d8:	f140 8142 	bpl.w	12860 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   125dc:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   125e0:	2f00      	cmp	r7, #0
   125e2:	f280 8141 	bge.w	12868 <cbvprintf+0x3b8>
				conv->prec_present = false;
   125e6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   125ea:	f36f 0341 	bfc	r3, #1, #1
   125ee:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   125f2:	f04f 37ff 	mov.w	r7, #4294967295
   125f6:	e137      	b.n	12868 <cbvprintf+0x3b8>
		switch (*sp) {
   125f8:	2b2d      	cmp	r3, #45	; 0x2d
   125fa:	d006      	beq.n	1260a <cbvprintf+0x15a>
   125fc:	2b30      	cmp	r3, #48	; 0x30
   125fe:	d187      	bne.n	12510 <cbvprintf+0x60>
			conv->flag_zero = true;
   12600:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12608:	e003      	b.n	12612 <cbvprintf+0x162>
			conv->flag_dash = true;
   1260a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1260e:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   12612:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   12616:	e76e      	b.n	124f6 <cbvprintf+0x46>
			conv->flag_plus = true;
   12618:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1261c:	f043 0308 	orr.w	r3, r3, #8
   12620:	e7f7      	b.n	12612 <cbvprintf+0x162>
			conv->flag_space = true;
   12622:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12626:	f043 0310 	orr.w	r3, r3, #16
   1262a:	e7f2      	b.n	12612 <cbvprintf+0x162>
			conv->flag_hash = true;
   1262c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12630:	f043 0320 	orr.w	r3, r3, #32
   12634:	e7ed      	b.n	12612 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   12636:	a805      	add	r0, sp, #20
   12638:	f7ff fed4 	bl	123e4 <extract_decimal>
	if (sp != wp) {
   1263c:	9b05      	ldr	r3, [sp, #20]
   1263e:	42b3      	cmp	r3, r6
   12640:	d081      	beq.n	12546 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   12642:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   12646:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   12648:	f3c1 0240 	ubfx	r2, r1, #1, #1
   1264c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   12650:	0052      	lsls	r2, r2, #1
   12652:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12656:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   1265a:	430a      	orrs	r2, r1
   1265c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   12660:	e771      	b.n	12546 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   12662:	a805      	add	r0, sp, #20
   12664:	f7ff febe 	bl	123e4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   12668:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   1266c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1266e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   12672:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   12676:	f360 0341 	bfi	r3, r0, #1, #1
   1267a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1267e:	9b05      	ldr	r3, [sp, #20]
   12680:	e77a      	b.n	12578 <cbvprintf+0xc8>
	switch (*sp) {
   12682:	2874      	cmp	r0, #116	; 0x74
   12684:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12688:	d040      	beq.n	1270c <cbvprintf+0x25c>
   1268a:	287a      	cmp	r0, #122	; 0x7a
   1268c:	d184      	bne.n	12598 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   1268e:	4613      	mov	r3, r2
   12690:	2206      	movs	r2, #6
   12692:	e028      	b.n	126e6 <cbvprintf+0x236>
		if (*++sp == 'h') {
   12694:	785a      	ldrb	r2, [r3, #1]
   12696:	2a68      	cmp	r2, #104	; 0x68
   12698:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1269c:	d121      	bne.n	126e2 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   1269e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   126a0:	f361 02c6 	bfi	r2, r1, #3, #4
   126a4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   126a8:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   126aa:	460b      	mov	r3, r1
   126ac:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   126b0:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   126b2:	9302      	str	r3, [sp, #8]
   126b4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   126b8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   126bc:	f200 80bf 	bhi.w	1283e <cbvprintf+0x38e>
   126c0:	2a57      	cmp	r2, #87	; 0x57
   126c2:	d833      	bhi.n	1272c <cbvprintf+0x27c>
   126c4:	2a41      	cmp	r2, #65	; 0x41
   126c6:	d003      	beq.n	126d0 <cbvprintf+0x220>
   126c8:	3a45      	subs	r2, #69	; 0x45
   126ca:	2a02      	cmp	r2, #2
   126cc:	f200 80b7 	bhi.w	1283e <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   126d0:	2204      	movs	r2, #4
   126d2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   126d6:	f362 0302 	bfi	r3, r2, #0, #3
   126da:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   126de:	2301      	movs	r3, #1
			break;
   126e0:	e084      	b.n	127ec <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   126e2:	4613      	mov	r3, r2
   126e4:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   126e6:	f362 03c6 	bfi	r3, r2, #3, #4
   126ea:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   126ee:	e7dc      	b.n	126aa <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   126f0:	785a      	ldrb	r2, [r3, #1]
   126f2:	2a6c      	cmp	r2, #108	; 0x6c
   126f4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   126f8:	d101      	bne.n	126fe <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   126fa:	2104      	movs	r1, #4
   126fc:	e7d0      	b.n	126a0 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   126fe:	4613      	mov	r3, r2
   12700:	2203      	movs	r2, #3
   12702:	e7f0      	b.n	126e6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   12704:	2205      	movs	r2, #5
   12706:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1270a:	e7ec      	b.n	126e6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   1270c:	4613      	mov	r3, r2
   1270e:	2207      	movs	r2, #7
   12710:	e7e9      	b.n	126e6 <cbvprintf+0x236>
		conv->unsupported = true;
   12712:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   12716:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1271a:	f023 0302 	bic.w	r3, r3, #2
   1271e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12722:	f043 0302 	orr.w	r3, r3, #2
   12726:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1272a:	e7be      	b.n	126aa <cbvprintf+0x1fa>
   1272c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12730:	2920      	cmp	r1, #32
   12732:	f200 8084 	bhi.w	1283e <cbvprintf+0x38e>
   12736:	a001      	add	r0, pc, #4	; (adr r0, 1273c <cbvprintf+0x28c>)
   12738:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1273c:	00012801 	.word	0x00012801
   12740:	0001283f 	.word	0x0001283f
   12744:	0001283f 	.word	0x0001283f
   12748:	0001283f 	.word	0x0001283f
   1274c:	0001283f 	.word	0x0001283f
   12750:	0001283f 	.word	0x0001283f
   12754:	0001283f 	.word	0x0001283f
   12758:	0001283f 	.word	0x0001283f
   1275c:	0001283f 	.word	0x0001283f
   12760:	000126d1 	.word	0x000126d1
   12764:	0001283f 	.word	0x0001283f
   12768:	00012801 	.word	0x00012801
   1276c:	000127c1 	.word	0x000127c1
   12770:	000126d1 	.word	0x000126d1
   12774:	000126d1 	.word	0x000126d1
   12778:	000126d1 	.word	0x000126d1
   1277c:	0001283f 	.word	0x0001283f
   12780:	000127c1 	.word	0x000127c1
   12784:	0001283f 	.word	0x0001283f
   12788:	0001283f 	.word	0x0001283f
   1278c:	0001283f 	.word	0x0001283f
   12790:	0001283f 	.word	0x0001283f
   12794:	00012809 	.word	0x00012809
   12798:	00012801 	.word	0x00012801
   1279c:	00012825 	.word	0x00012825
   127a0:	0001283f 	.word	0x0001283f
   127a4:	0001283f 	.word	0x0001283f
   127a8:	00012825 	.word	0x00012825
   127ac:	0001283f 	.word	0x0001283f
   127b0:	00012801 	.word	0x00012801
   127b4:	0001283f 	.word	0x0001283f
   127b8:	0001283f 	.word	0x0001283f
   127bc:	00012801 	.word	0x00012801
		conv->specifier_cat = SPECIFIER_SINT;
   127c0:	2001      	movs	r0, #1
   127c2:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   127c6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   127ca:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   127ce:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   127d0:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   127d4:	bf02      	ittt	eq
   127d6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   127da:	f041 0101 	orreq.w	r1, r1, #1
   127de:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   127e2:	2a63      	cmp	r2, #99	; 0x63
   127e4:	d131      	bne.n	1284a <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   127e6:	3b00      	subs	r3, #0
   127e8:	bf18      	it	ne
   127ea:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   127ec:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   127f0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   127f4:	430b      	orrs	r3, r1
   127f6:	f363 0241 	bfi	r2, r3, #1, #1
   127fa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   127fe:	e6d8      	b.n	125b2 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   12800:	2002      	movs	r0, #2
   12802:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   12806:	e7de      	b.n	127c6 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   12808:	2103      	movs	r1, #3
   1280a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1280e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12812:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   12816:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1281a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   1281c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   12820:	4143      	adcs	r3, r0
   12822:	e7e3      	b.n	127ec <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   12824:	2103      	movs	r1, #3
   12826:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1282a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1282e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   12832:	bf14      	ite	ne
   12834:	2301      	movne	r3, #1
   12836:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   12838:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1283c:	e7d6      	b.n	127ec <cbvprintf+0x33c>
		conv->invalid = true;
   1283e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12842:	f043 0301 	orr.w	r3, r3, #1
   12846:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   1284a:	2300      	movs	r3, #0
   1284c:	e7ce      	b.n	127ec <cbvprintf+0x33c>
		} else if (conv->width_present) {
   1284e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   12852:	2a00      	cmp	r2, #0
		int width = -1;
   12854:	bfac      	ite	ge
   12856:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
   1285a:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
   1285e:	e6ba      	b.n	125d6 <cbvprintf+0x126>
		} else if (conv->prec_present) {
   12860:	079f      	lsls	r7, r3, #30
   12862:	f57f aec6 	bpl.w	125f2 <cbvprintf+0x142>
			precision = conv->prec_value;
   12866:	9f10      	ldr	r7, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   12868:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1286a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   1286e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			= (enum length_mod_enum)conv->length_mod;
   12872:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		enum specifier_cat_enum specifier_cat
   12876:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1287a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1287c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12880:	d137      	bne.n	128f2 <cbvprintf+0x442>
			switch (length_mod) {
   12882:	1ecb      	subs	r3, r1, #3
   12884:	2b04      	cmp	r3, #4
   12886:	d821      	bhi.n	128cc <cbvprintf+0x41c>
   12888:	e8df f003 	tbb	[pc, r3]
   1288c:	20070703 	.word	0x20070703
   12890:	20          	.byte	0x20
   12891:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   12892:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   12896:	17d3      	asrs	r3, r2, #31
   12898:	e004      	b.n	128a4 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   1289a:	3407      	adds	r4, #7
   1289c:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   128a0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   128a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   128a8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   128ac:	f013 0603 	ands.w	r6, r3, #3
   128b0:	d055      	beq.n	1295e <cbvprintf+0x4ae>
			OUTS(sp, fp);
   128b2:	464a      	mov	r2, r9
   128b4:	4659      	mov	r1, fp
   128b6:	4650      	mov	r0, sl
   128b8:	9b02      	ldr	r3, [sp, #8]
   128ba:	f00c fc4f 	bl	1f15c <outs>
   128be:	2800      	cmp	r0, #0
   128c0:	f2c0 813e 	blt.w	12b40 <cbvprintf+0x690>
   128c4:	4405      	add	r5, r0
			OUTS(bps, bpe);
   128c6:	f8dd 9008 	ldr.w	r9, [sp, #8]
   128ca:	e5f9      	b.n	124c0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   128cc:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   128d0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   128d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
   128d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   128da:	d105      	bne.n	128e8 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   128dc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   128e0:	930c      	str	r3, [sp, #48]	; 0x30
   128e2:	2300      	movs	r3, #0
   128e4:	930d      	str	r3, [sp, #52]	; 0x34
   128e6:	e7df      	b.n	128a8 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   128e8:	2902      	cmp	r1, #2
   128ea:	d1dd      	bne.n	128a8 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   128ec:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   128f0:	e7d1      	b.n	12896 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   128f2:	2b02      	cmp	r3, #2
   128f4:	d123      	bne.n	1293e <cbvprintf+0x48e>
			switch (length_mod) {
   128f6:	1ecb      	subs	r3, r1, #3
   128f8:	2b04      	cmp	r3, #4
   128fa:	d813      	bhi.n	12924 <cbvprintf+0x474>
   128fc:	e8df f003 	tbb	[pc, r3]
   12900:	120a0a03 	.word	0x120a0a03
   12904:	12          	.byte	0x12
   12905:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   12906:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   12908:	6822      	ldr	r2, [r4, #0]
   1290a:	1d20      	adds	r0, r4, #4
   1290c:	920c      	str	r2, [sp, #48]	; 0x30
   1290e:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   12910:	4604      	mov	r4, r0
   12912:	e7c9      	b.n	128a8 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   12914:	3407      	adds	r4, #7
   12916:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   1291a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   1291e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   12922:	e7f5      	b.n	12910 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   12924:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12928:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1292a:	930c      	str	r3, [sp, #48]	; 0x30
   1292c:	f04f 0300 	mov.w	r3, #0
   12930:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   12932:	d0d3      	beq.n	128dc <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   12934:	2902      	cmp	r1, #2
   12936:	d1b7      	bne.n	128a8 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   12938:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1293c:	e7d0      	b.n	128e0 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   1293e:	2b04      	cmp	r3, #4
   12940:	d107      	bne.n	12952 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   12942:	3407      	adds	r4, #7
   12944:	f024 0407 	bic.w	r4, r4, #7
   12948:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   1294c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   12950:	e7aa      	b.n	128a8 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12952:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12954:	bf04      	itt	eq
   12956:	f854 3b04 	ldreq.w	r3, [r4], #4
   1295a:	930c      	streq	r3, [sp, #48]	; 0x30
   1295c:	e7a4      	b.n	128a8 <cbvprintf+0x3f8>
		switch (conv->specifier) {
   1295e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   12962:	2878      	cmp	r0, #120	; 0x78
   12964:	d8af      	bhi.n	128c6 <cbvprintf+0x416>
   12966:	2862      	cmp	r0, #98	; 0x62
   12968:	d820      	bhi.n	129ac <cbvprintf+0x4fc>
   1296a:	2825      	cmp	r0, #37	; 0x25
   1296c:	f43f adb2 	beq.w	124d4 <cbvprintf+0x24>
   12970:	2858      	cmp	r0, #88	; 0x58
   12972:	d1a8      	bne.n	128c6 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   12978:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   1297c:	9300      	str	r3, [sp, #0]
   1297e:	aa0e      	add	r2, sp, #56	; 0x38
   12980:	ab06      	add	r3, sp, #24
   12982:	f7ff fd45 	bl	12410 <encode_uint>
   12986:	4681      	mov	r9, r0
			if (precision >= 0) {
   12988:	2f00      	cmp	r7, #0
   1298a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1298e:	db0b      	blt.n	129a8 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   12990:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   12994:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   12998:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1299c:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   1299e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   129a2:	d901      	bls.n	129a8 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   129a4:	1aff      	subs	r7, r7, r3
   129a6:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   129a8:	4607      	mov	r7, r0
   129aa:	e03c      	b.n	12a26 <cbvprintf+0x576>
   129ac:	3863      	subs	r0, #99	; 0x63
   129ae:	2815      	cmp	r0, #21
   129b0:	d889      	bhi.n	128c6 <cbvprintf+0x416>
   129b2:	a201      	add	r2, pc, #4	; (adr r2, 129b8 <cbvprintf+0x508>)
   129b4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   129b8:	00012a37 	.word	0x00012a37
   129bc:	00012a99 	.word	0x00012a99
   129c0:	000128c7 	.word	0x000128c7
   129c4:	000128c7 	.word	0x000128c7
   129c8:	000128c7 	.word	0x000128c7
   129cc:	000128c7 	.word	0x000128c7
   129d0:	00012a99 	.word	0x00012a99
   129d4:	000128c7 	.word	0x000128c7
   129d8:	000128c7 	.word	0x000128c7
   129dc:	000128c7 	.word	0x000128c7
   129e0:	000128c7 	.word	0x000128c7
   129e4:	00012af7 	.word	0x00012af7
   129e8:	00012ac5 	.word	0x00012ac5
   129ec:	00012ac9 	.word	0x00012ac9
   129f0:	000128c7 	.word	0x000128c7
   129f4:	000128c7 	.word	0x000128c7
   129f8:	00012a11 	.word	0x00012a11
   129fc:	000128c7 	.word	0x000128c7
   12a00:	00012ac5 	.word	0x00012ac5
   12a04:	000128c7 	.word	0x000128c7
   12a08:	000128c7 	.word	0x000128c7
   12a0c:	00012ac5 	.word	0x00012ac5
			if (precision >= 0) {
   12a10:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   12a12:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   12a16:	db0a      	blt.n	12a2e <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   12a18:	4639      	mov	r1, r7
   12a1a:	4648      	mov	r0, r9
   12a1c:	f00f feff 	bl	2281e <strnlen>
		char sign = 0;
   12a20:	2600      	movs	r6, #0
			bpe = bps + len;
   12a22:	eb09 0700 	add.w	r7, r9, r0
		if (bps == NULL) {
   12a26:	f1b9 0f00 	cmp.w	r9, #0
   12a2a:	d10c      	bne.n	12a46 <cbvprintf+0x596>
   12a2c:	e74b      	b.n	128c6 <cbvprintf+0x416>
				len = strlen(bps);
   12a2e:	4648      	mov	r0, r9
   12a30:	f7fe fbbe 	bl	111b0 <strlen>
   12a34:	e7f4      	b.n	12a20 <cbvprintf+0x570>
			break;
   12a36:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
   12a3a:	f10d 0719 	add.w	r7, sp, #25
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12a3e:	f88d 3018 	strb.w	r3, [sp, #24]
			bps = buf;
   12a42:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   12a46:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   12a4a:	b106      	cbz	r6, 12a4e <cbvprintf+0x59e>
			nj_len += 1U;
   12a4c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12a4e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   12a52:	06d0      	lsls	r0, r2, #27
   12a54:	d569      	bpl.n	12b2a <cbvprintf+0x67a>
			nj_len += 2U;
   12a56:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   12a58:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   12a5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   12a5c:	bf48      	it	mi
   12a5e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   12a60:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   12a62:	bf48      	it	mi
   12a64:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12a66:	f1b8 0f00 	cmp.w	r8, #0
   12a6a:	dd76      	ble.n	12b5a <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   12a6c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   12a70:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   12a74:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12a78:	9303      	str	r3, [sp, #12]
   12a7a:	0753      	lsls	r3, r2, #29
   12a7c:	d46d      	bmi.n	12b5a <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   12a7e:	0650      	lsls	r0, r2, #25
   12a80:	d561      	bpl.n	12b46 <cbvprintf+0x696>
					if (sign != 0) {
   12a82:	b13e      	cbz	r6, 12a94 <cbvprintf+0x5e4>
						OUTC(sign);
   12a84:	4659      	mov	r1, fp
   12a86:	4630      	mov	r0, r6
   12a88:	47d0      	blx	sl
   12a8a:	2800      	cmp	r0, #0
   12a8c:	db58      	blt.n	12b40 <cbvprintf+0x690>
						sign = 0;
   12a8e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   12a90:	3501      	adds	r5, #1
						sign = 0;
   12a92:	461e      	mov	r6, r3
					pad = '0';
   12a94:	2330      	movs	r3, #48	; 0x30
   12a96:	e057      	b.n	12b48 <cbvprintf+0x698>
			if (conv->flag_plus) {
   12a98:	071e      	lsls	r6, r3, #28
   12a9a:	d411      	bmi.n	12ac0 <cbvprintf+0x610>
				sign = ' ';
   12a9c:	f013 0610 	ands.w	r6, r3, #16
   12aa0:	bf18      	it	ne
   12aa2:	2620      	movne	r6, #32
			sint = value->sint;
   12aa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   12aa8:	2a00      	cmp	r2, #0
   12aaa:	f173 0100 	sbcs.w	r1, r3, #0
   12aae:	f6bf af61 	bge.w	12974 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   12ab2:	4252      	negs	r2, r2
   12ab4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   12ab8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   12aba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   12abe:	e759      	b.n	12974 <cbvprintf+0x4c4>
				sign = '+';
   12ac0:	262b      	movs	r6, #43	; 0x2b
   12ac2:	e7ef      	b.n	12aa4 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   12ac4:	2600      	movs	r6, #0
   12ac6:	e755      	b.n	12974 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   12ac8:	980c      	ldr	r0, [sp, #48]	; 0x30
   12aca:	b348      	cbz	r0, 12b20 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12acc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   12ad0:	9300      	str	r3, [sp, #0]
   12ad2:	2100      	movs	r1, #0
   12ad4:	ab06      	add	r3, sp, #24
   12ad6:	aa0e      	add	r2, sp, #56	; 0x38
   12ad8:	f7ff fc9a 	bl	12410 <encode_uint>
				conv->altform_0c = true;
   12adc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12ae0:	4681      	mov	r9, r0
				conv->altform_0c = true;
   12ae2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12ae6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12aea:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   12aee:	2600      	movs	r6, #0
				conv->altform_0c = true;
   12af0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
   12af4:	e748      	b.n	12988 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   12af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   12af8:	2907      	cmp	r1, #7
   12afa:	f63f aee4 	bhi.w	128c6 <cbvprintf+0x416>
   12afe:	e8df f001 	tbb	[pc, r1]
   12b02:	040d      	.short	0x040d
   12b04:	08080d06 	.word	0x08080d06
   12b08:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   12b0a:	701d      	strb	r5, [r3, #0]
		break;
   12b0c:	e6db      	b.n	128c6 <cbvprintf+0x416>
		*(short *)dp = (short)count;
   12b0e:	801d      	strh	r5, [r3, #0]
		break;
   12b10:	e6d9      	b.n	128c6 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   12b12:	4628      	mov	r0, r5
   12b14:	17e9      	asrs	r1, r5, #31
   12b16:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   12b1a:	e6d4      	b.n	128c6 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12b1c:	601d      	str	r5, [r3, #0]
		break;
   12b1e:	e6d2      	b.n	128c6 <cbvprintf+0x416>
			bpe = bps + 5;
   12b20:	4f2e      	ldr	r7, [pc, #184]	; (12bdc <cbvprintf+0x72c>)
   12b22:	4606      	mov	r6, r0
			bps = "(nil)";
   12b24:	f1a7 0905 	sub.w	r9, r7, #5
   12b28:	e78d      	b.n	12a46 <cbvprintf+0x596>
		} else if (conv->altform_0) {
   12b2a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   12b2c:	bf48      	it	mi
   12b2e:	3301      	addmi	r3, #1
   12b30:	e792      	b.n	12a58 <cbvprintf+0x5a8>
					OUTC(pad);
   12b32:	4618      	mov	r0, r3
   12b34:	4659      	mov	r1, fp
   12b36:	9303      	str	r3, [sp, #12]
   12b38:	47d0      	blx	sl
   12b3a:	2800      	cmp	r0, #0
   12b3c:	9b03      	ldr	r3, [sp, #12]
   12b3e:	da04      	bge.n	12b4a <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   12b40:	b013      	add	sp, #76	; 0x4c
   12b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12b46:	2320      	movs	r3, #32
   12b48:	4445      	add	r5, r8
   12b4a:	4642      	mov	r2, r8
				while (width-- > 0) {
   12b4c:	2a00      	cmp	r2, #0
   12b4e:	eba5 0108 	sub.w	r1, r5, r8
   12b52:	f108 38ff 	add.w	r8, r8, #4294967295
   12b56:	dcec      	bgt.n	12b32 <cbvprintf+0x682>
   12b58:	460d      	mov	r5, r1
		if (sign != 0) {
   12b5a:	b12e      	cbz	r6, 12b68 <cbvprintf+0x6b8>
			OUTC(sign);
   12b5c:	4659      	mov	r1, fp
   12b5e:	4630      	mov	r0, r6
   12b60:	47d0      	blx	sl
   12b62:	2800      	cmp	r0, #0
   12b64:	dbec      	blt.n	12b40 <cbvprintf+0x690>
   12b66:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   12b68:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12b6c:	06d9      	lsls	r1, r3, #27
   12b6e:	d401      	bmi.n	12b74 <cbvprintf+0x6c4>
   12b70:	071a      	lsls	r2, r3, #28
   12b72:	d505      	bpl.n	12b80 <cbvprintf+0x6d0>
				OUTC('0');
   12b74:	4659      	mov	r1, fp
   12b76:	2030      	movs	r0, #48	; 0x30
   12b78:	47d0      	blx	sl
   12b7a:	2800      	cmp	r0, #0
   12b7c:	dbe0      	blt.n	12b40 <cbvprintf+0x690>
   12b7e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12b80:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12b84:	06db      	lsls	r3, r3, #27
   12b86:	d506      	bpl.n	12b96 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   12b88:	4659      	mov	r1, fp
   12b8a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   12b8e:	47d0      	blx	sl
   12b90:	2800      	cmp	r0, #0
   12b92:	dbd5      	blt.n	12b40 <cbvprintf+0x690>
   12b94:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12b96:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   12b98:	442e      	add	r6, r5
   12b9a:	1b73      	subs	r3, r6, r5
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	dc15      	bgt.n	12bcc <cbvprintf+0x71c>
			OUTS(bps, bpe);
   12ba0:	463b      	mov	r3, r7
   12ba2:	464a      	mov	r2, r9
   12ba4:	4659      	mov	r1, fp
   12ba6:	4650      	mov	r0, sl
   12ba8:	f00c fad8 	bl	1f15c <outs>
   12bac:	2800      	cmp	r0, #0
   12bae:	dbc7      	blt.n	12b40 <cbvprintf+0x690>
   12bb0:	4405      	add	r5, r0
		while (width > 0) {
   12bb2:	44a8      	add	r8, r5
   12bb4:	eba8 0305 	sub.w	r3, r8, r5
   12bb8:	2b00      	cmp	r3, #0
   12bba:	f77f ae84 	ble.w	128c6 <cbvprintf+0x416>
			OUTC(' ');
   12bbe:	4659      	mov	r1, fp
   12bc0:	2020      	movs	r0, #32
   12bc2:	47d0      	blx	sl
   12bc4:	2800      	cmp	r0, #0
   12bc6:	dbbb      	blt.n	12b40 <cbvprintf+0x690>
   12bc8:	3501      	adds	r5, #1
			--width;
   12bca:	e7f3      	b.n	12bb4 <cbvprintf+0x704>
				OUTC('0');
   12bcc:	4659      	mov	r1, fp
   12bce:	2030      	movs	r0, #48	; 0x30
   12bd0:	47d0      	blx	sl
   12bd2:	2800      	cmp	r0, #0
   12bd4:	dbb4      	blt.n	12b40 <cbvprintf+0x690>
   12bd6:	3501      	adds	r5, #1
   12bd8:	e7df      	b.n	12b9a <cbvprintf+0x6ea>
   12bda:	bf00      	nop
   12bdc:	00023677 	.word	0x00023677

00012be0 <nordicsemi_nrf91_init>:
   12be0:	f04f 0220 	mov.w	r2, #32
   12be4:	f3ef 8311 	mrs	r3, BASEPRI
   12be8:	f382 8812 	msr	BASEPRI_MAX, r2
   12bec:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12bf0:	2101      	movs	r1, #1
   12bf2:	4a04      	ldr	r2, [pc, #16]	; (12c04 <nordicsemi_nrf91_init+0x24>)
   12bf4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12bf8:	f383 8811 	msr	BASEPRI, r3
   12bfc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12c00:	2000      	movs	r0, #0
   12c02:	4770      	bx	lr
   12c04:	40039000 	.word	0x40039000

00012c08 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12c08:	b120      	cbz	r0, 12c14 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12c0a:	4b03      	ldr	r3, [pc, #12]	; (12c18 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12c0c:	0180      	lsls	r0, r0, #6
   12c0e:	f043 0301 	orr.w	r3, r3, #1
   12c12:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12c14:	4770      	bx	lr
   12c16:	bf00      	nop
   12c18:	000230f0 	.word	0x000230f0

00012c1c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12c1c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12c1e:	2200      	movs	r2, #0
{
   12c20:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12c22:	490f      	ldr	r1, [pc, #60]	; (12c60 <enable_logger+0x44>)
   12c24:	480f      	ldr	r0, [pc, #60]	; (12c64 <enable_logger+0x48>)
   12c26:	f00f fb4d 	bl	222c4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12c2a:	2200      	movs	r2, #0
   12c2c:	2300      	movs	r3, #0
   12c2e:	2400      	movs	r4, #0
   12c30:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12c34:	230e      	movs	r3, #14
   12c36:	4d0c      	ldr	r5, [pc, #48]	; (12c68 <enable_logger+0x4c>)
   12c38:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12c3c:	f44f 7240 	mov.w	r2, #768	; 0x300
   12c40:	4628      	mov	r0, r5
   12c42:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12c46:	4b09      	ldr	r3, [pc, #36]	; (12c6c <enable_logger+0x50>)
   12c48:	4909      	ldr	r1, [pc, #36]	; (12c70 <enable_logger+0x54>)
   12c4a:	9400      	str	r4, [sp, #0]
   12c4c:	f009 fc6e 	bl	1c52c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12c50:	4908      	ldr	r1, [pc, #32]	; (12c74 <enable_logger+0x58>)
   12c52:	4628      	mov	r0, r5
   12c54:	f00f f8ad 	bl	21db2 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12c58:	4620      	mov	r0, r4
   12c5a:	b009      	add	sp, #36	; 0x24
   12c5c:	bd30      	pop	{r4, r5, pc}
   12c5e:	bf00      	nop
   12c60:	00012c79 	.word	0x00012c79
   12c64:	2000cb00 	.word	0x2000cb00
   12c68:	2000cb38 	.word	0x2000cb38
   12c6c:	000130a5 	.word	0x000130a5
   12c70:	20011d48 	.word	0x20011d48
   12c74:	0002367c 	.word	0x0002367c

00012c78 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   12c78:	4801      	ldr	r0, [pc, #4]	; (12c80 <log_process_thread_timer_expiry_fn+0x8>)
   12c7a:	f009 bdf1 	b.w	1c860 <z_impl_k_sem_give>
   12c7e:	bf00      	nop
   12c80:	2000c8a4 	.word	0x2000c8a4

00012c84 <z_log_get_s_mask>:
{
   12c84:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c86:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   12c88:	2000      	movs	r0, #0
				mask |= BIT(arg);
   12c8a:	2701      	movs	r7, #1
	uint32_t arg = 0U;
   12c8c:	4603      	mov	r3, r0
	bool arm = false;
   12c8e:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   12c90:	4e0d      	ldr	r6, [pc, #52]	; (12cc8 <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
   12c92:	f815 4b01 	ldrb.w	r4, [r5], #1
   12c96:	b10c      	cbz	r4, 12c9c <z_log_get_s_mask+0x18>
   12c98:	428b      	cmp	r3, r1
   12c9a:	d300      	bcc.n	12c9e <z_log_get_s_mask+0x1a>
}
   12c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   12c9e:	2c25      	cmp	r4, #37	; 0x25
   12ca0:	d102      	bne.n	12ca8 <z_log_get_s_mask+0x24>
			arm = !arm;
   12ca2:	f082 0201 	eor.w	r2, r2, #1
   12ca6:	e7f4      	b.n	12c92 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
   12ca8:	2a00      	cmp	r2, #0
   12caa:	d0f2      	beq.n	12c92 <z_log_get_s_mask+0xe>
   12cac:	f814 c006 	ldrb.w	ip, [r4, r6]
   12cb0:	f01c 0f03 	tst.w	ip, #3
   12cb4:	d0ed      	beq.n	12c92 <z_log_get_s_mask+0xe>
			if (curr == 's') {
   12cb6:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   12cb8:	bf04      	itt	eq
   12cba:	fa07 f203 	lsleq.w	r2, r7, r3
   12cbe:	4310      	orreq	r0, r2
			arg++;
   12cc0:	3301      	adds	r3, #1
			arm = false;
   12cc2:	2200      	movs	r2, #0
   12cc4:	e7e5      	b.n	12c92 <z_log_get_s_mask+0xe>
   12cc6:	bf00      	nop
   12cc8:	000252b9 	.word	0x000252b9

00012ccc <log_core_init>:
	panic_mode = false;
   12ccc:	2300      	movs	r3, #0
   12cce:	4a0c      	ldr	r2, [pc, #48]	; (12d00 <log_core_init+0x34>)
{
   12cd0:	b510      	push	{r4, lr}
	panic_mode = false;
   12cd2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12cd4:	4a0b      	ldr	r2, [pc, #44]	; (12d04 <log_core_init+0x38>)
	log_output_timestamp_freq_set(freq);
   12cd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	dropped_cnt = 0;
   12cda:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   12cdc:	4b0a      	ldr	r3, [pc, #40]	; (12d08 <log_core_init+0x3c>)
   12cde:	4a0b      	ldr	r2, [pc, #44]	; (12d0c <log_core_init+0x40>)
   12ce0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   12ce2:	f000 fcb9 	bl	13658 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   12ce6:	f000 fa57 	bl	13198 <log_msg_pool_init>
		log_list_init(&list);
   12cea:	4809      	ldr	r0, [pc, #36]	; (12d10 <log_core_init+0x44>)
   12cec:	f00c fa6b 	bl	1f1c6 <log_list_init>
}
   12cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12cf4:	2304      	movs	r3, #4
   12cf6:	2234      	movs	r2, #52	; 0x34
   12cf8:	4906      	ldr	r1, [pc, #24]	; (12d14 <log_core_init+0x48>)
   12cfa:	4807      	ldr	r0, [pc, #28]	; (12d18 <log_core_init+0x4c>)
   12cfc:	f00f b80e 	b.w	21d1c <k_mem_slab_init>
   12d00:	2000e29a 	.word	0x2000e29a
   12d04:	2000d058 	.word	0x2000d058
   12d08:	2000c534 	.word	0x2000c534
   12d0c:	0001f205 	.word	0x0001f205
   12d10:	2000d060 	.word	0x2000d060
   12d14:	20016708 	.word	0x20016708
   12d18:	2000d068 	.word	0x2000d068

00012d1c <log_init>:
{
   12d1c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12d1e:	4b10      	ldr	r3, [pc, #64]	; (12d60 <log_init+0x44>)
   12d20:	e8d3 5fef 	ldaex	r5, [r3]
   12d24:	1c6a      	adds	r2, r5, #1
   12d26:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12d2a:	2900      	cmp	r1, #0
   12d2c:	d1f8      	bne.n	12d20 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   12d2e:	b92d      	cbnz	r5, 12d3c <log_init+0x20>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12d30:	4c0c      	ldr	r4, [pc, #48]	; (12d64 <log_init+0x48>)
   12d32:	4e0d      	ldr	r6, [pc, #52]	; (12d68 <log_init+0x4c>)
   12d34:	1b36      	subs	r6, r6, r4
   12d36:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   12d38:	42b5      	cmp	r5, r6
   12d3a:	db00      	blt.n	12d3e <log_init+0x22>
}
   12d3c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   12d3e:	7b23      	ldrb	r3, [r4, #12]
   12d40:	b153      	cbz	r3, 12d58 <log_init+0x3c>
			if (backend->api->init != NULL) {
   12d42:	6823      	ldr	r3, [r4, #0]
   12d44:	699b      	ldr	r3, [r3, #24]
   12d46:	b10b      	cbz	r3, 12d4c <log_init+0x30>
				backend->api->init(backend);
   12d48:	4620      	mov	r0, r4
   12d4a:	4798      	blx	r3
			log_backend_enable(backend,
   12d4c:	6863      	ldr	r3, [r4, #4]
   12d4e:	2204      	movs	r2, #4
   12d50:	4620      	mov	r0, r4
   12d52:	6819      	ldr	r1, [r3, #0]
   12d54:	f000 fa12 	bl	1317c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12d58:	3501      	adds	r5, #1
   12d5a:	3410      	adds	r4, #16
   12d5c:	e7ec      	b.n	12d38 <log_init+0x1c>
   12d5e:	bf00      	nop
   12d60:	2000d05c 	.word	0x2000d05c
   12d64:	00023088 	.word	0x00023088
   12d68:	00023098 	.word	0x00023098

00012d6c <get_msg>:
{
   12d6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   12d6e:	f04f 0320 	mov.w	r3, #32
   12d72:	f3ef 8411 	mrs	r4, BASEPRI
   12d76:	f383 8812 	msr	BASEPRI_MAX, r3
   12d7a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   12d7e:	4804      	ldr	r0, [pc, #16]	; (12d90 <get_msg+0x24>)
   12d80:	f00c fa31 	bl	1f1e6 <log_list_head_get>
	__asm__ volatile(
   12d84:	f384 8811 	msr	BASEPRI, r4
   12d88:	f3bf 8f6f 	isb	sy
}
   12d8c:	bd10      	pop	{r4, pc}
   12d8e:	bf00      	nop
   12d90:	2000d060 	.word	0x2000d060

00012d94 <z_log_notify_backend_enabled>:
{
   12d94:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12d96:	4c04      	ldr	r4, [pc, #16]	; (12da8 <z_log_notify_backend_enabled+0x14>)
   12d98:	7822      	ldrb	r2, [r4, #0]
   12d9a:	b912      	cbnz	r2, 12da2 <z_log_notify_backend_enabled+0xe>
   12d9c:	4803      	ldr	r0, [pc, #12]	; (12dac <z_log_notify_backend_enabled+0x18>)
   12d9e:	f009 fd5f 	bl	1c860 <z_impl_k_sem_give>
	backend_attached = true;
   12da2:	2301      	movs	r3, #1
   12da4:	7023      	strb	r3, [r4, #0]
}
   12da6:	bd10      	pop	{r4, pc}
   12da8:	2000e299 	.word	0x2000e299
   12dac:	2000c8a4 	.word	0x2000c8a4

00012db0 <z_log_dropped>:
   12db0:	4b08      	ldr	r3, [pc, #32]	; (12dd4 <z_log_dropped+0x24>)
   12db2:	e8d3 2fef 	ldaex	r2, [r3]
   12db6:	3201      	adds	r2, #1
   12db8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12dbc:	2900      	cmp	r1, #0
   12dbe:	d1f8      	bne.n	12db2 <z_log_dropped+0x2>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12dc0:	4b05      	ldr	r3, [pc, #20]	; (12dd8 <z_log_dropped+0x28>)
   12dc2:	e8d3 2fef 	ldaex	r2, [r3]
   12dc6:	3a01      	subs	r2, #1
   12dc8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12dcc:	2900      	cmp	r1, #0
   12dce:	d1f8      	bne.n	12dc2 <z_log_dropped+0x12>
}
   12dd0:	4770      	bx	lr
   12dd2:	bf00      	nop
   12dd4:	2000d058 	.word	0x2000d058
   12dd8:	2000d054 	.word	0x2000d054

00012ddc <z_log_dropped_read_and_clear>:
}
   12ddc:	2000      	movs	r0, #0
   12dde:	4602      	mov	r2, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12de0:	4b03      	ldr	r3, [pc, #12]	; (12df0 <z_log_dropped_read_and_clear+0x14>)
   12de2:	e8d3 0fef 	ldaex	r0, [r3]
   12de6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12dea:	2900      	cmp	r1, #0
   12dec:	d1f9      	bne.n	12de2 <z_log_dropped_read_and_clear+0x6>
   12dee:	4770      	bx	lr
   12df0:	2000d058 	.word	0x2000d058

00012df4 <dropped_notify>:
{
   12df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   12df6:	f7ff fff1 	bl	12ddc <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
   12dfa:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   12dfc:	4607      	mov	r7, r0
   12dfe:	4c09      	ldr	r4, [pc, #36]	; (12e24 <dropped_notify+0x30>)
   12e00:	4d09      	ldr	r5, [pc, #36]	; (12e28 <dropped_notify+0x34>)
   12e02:	1b2d      	subs	r5, r5, r4
   12e04:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12e06:	42ae      	cmp	r6, r5
   12e08:	db00      	blt.n	12e0c <dropped_notify+0x18>
}
   12e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12e0c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12e0e:	795b      	ldrb	r3, [r3, #5]
   12e10:	b12b      	cbz	r3, 12e1e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   12e12:	6823      	ldr	r3, [r4, #0]
   12e14:	691b      	ldr	r3, [r3, #16]
   12e16:	b113      	cbz	r3, 12e1e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   12e18:	4639      	mov	r1, r7
   12e1a:	4620      	mov	r0, r4
   12e1c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12e1e:	3601      	adds	r6, #1
   12e20:	3410      	adds	r4, #16
   12e22:	e7f0      	b.n	12e06 <dropped_notify+0x12>
   12e24:	00023088 	.word	0x00023088
   12e28:	00023098 	.word	0x00023098

00012e2c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   12e2c:	4b15      	ldr	r3, [pc, #84]	; (12e84 <z_log_strdup+0x58>)
{
   12e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   12e30:	4298      	cmp	r0, r3
{
   12e32:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12e34:	d302      	bcc.n	12e3c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   12e36:	4b14      	ldr	r3, [pc, #80]	; (12e88 <z_log_strdup+0x5c>)
   12e38:	4298      	cmp	r0, r3
   12e3a:	d31d      	bcc.n	12e78 <z_log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12e3c:	2200      	movs	r2, #0
   12e3e:	2300      	movs	r3, #0
   12e40:	4812      	ldr	r0, [pc, #72]	; (12e8c <z_log_strdup+0x60>)
   12e42:	a901      	add	r1, sp, #4
   12e44:	f009 fb10 	bl	1c468 <k_mem_slab_alloc>
	if (err != 0) {
   12e48:	4605      	mov	r5, r0
   12e4a:	b9c0      	cbnz	r0, 12e7e <z_log_strdup+0x52>
   12e4c:	2201      	movs	r2, #1
   12e4e:	9b01      	ldr	r3, [sp, #4]
   12e50:	e8d3 1fef 	ldaex	r1, [r3]
   12e54:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12e58:	2800      	cmp	r0, #0
   12e5a:	d1f9      	bne.n	12e50 <z_log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12e5c:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12e5e:	222d      	movs	r2, #45	; 0x2d
   12e60:	1d33      	adds	r3, r6, #4
   12e62:	4618      	mov	r0, r3
   12e64:	4621      	mov	r1, r4
   12e66:	f00f fcc7 	bl	227f8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12e6a:	227e      	movs	r2, #126	; 0x7e
   12e6c:	4603      	mov	r3, r0
   12e6e:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12e72:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
   12e76:	461c      	mov	r4, r3
}
   12e78:	4620      	mov	r0, r4
   12e7a:	b002      	add	sp, #8
   12e7c:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   12e7e:	4b04      	ldr	r3, [pc, #16]	; (12e90 <z_log_strdup+0x64>)
   12e80:	e7f9      	b.n	12e76 <z_log_strdup+0x4a>
   12e82:	bf00      	nop
   12e84:	00022c8c 	.word	0x00022c8c
   12e88:	0002540c 	.word	0x0002540c
   12e8c:	2000d068 	.word	0x2000d068
   12e90:	00023684 	.word	0x00023684

00012e94 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   12e94:	b148      	cbz	r0, 12eaa <log_is_strdup+0x16>
   12e96:	4b05      	ldr	r3, [pc, #20]	; (12eac <log_is_strdup+0x18>)
   12e98:	4298      	cmp	r0, r3
   12e9a:	d305      	bcc.n	12ea8 <log_is_strdup+0x14>
   12e9c:	33d0      	adds	r3, #208	; 0xd0
   12e9e:	4298      	cmp	r0, r3
   12ea0:	bf2c      	ite	cs
   12ea2:	2000      	movcs	r0, #0
   12ea4:	2001      	movcc	r0, #1
   12ea6:	4770      	bx	lr
   12ea8:	2000      	movs	r0, #0
}
   12eaa:	4770      	bx	lr
   12eac:	20016708 	.word	0x20016708

00012eb0 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   12eb0:	4b41      	ldr	r3, [pc, #260]	; (12fb8 <z_impl_log_process+0x108>)
{
   12eb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   12eb6:	781b      	ldrb	r3, [r3, #0]
{
   12eb8:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   12eba:	b903      	cbnz	r3, 12ebe <z_impl_log_process+0xe>
   12ebc:	b1a0      	cbz	r0, 12ee8 <z_impl_log_process+0x38>
	msg = get_msg();
   12ebe:	f7ff ff55 	bl	12d6c <get_msg>
	if (msg.msg) {
   12ec2:	4605      	mov	r5, r0
   12ec4:	b118      	cbz	r0, 12ece <z_impl_log_process+0x1e>
		if (!bypass) {
   12ec6:	b19c      	cbz	r4, 12ef0 <z_impl_log_process+0x40>
			log_msg_put(msg.msg);
   12ec8:	4628      	mov	r0, r5
   12eca:	f00c fa78 	bl	1f3be <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   12ece:	b92c      	cbnz	r4, 12edc <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
   12ed0:	4b3a      	ldr	r3, [pc, #232]	; (12fbc <z_impl_log_process+0x10c>)
	if (!bypass && z_log_dropped_pending()) {
   12ed2:	681b      	ldr	r3, [r3, #0]
   12ed4:	2b00      	cmp	r3, #0
   12ed6:	dd01      	ble.n	12edc <z_impl_log_process+0x2c>
		dropped_notify();
   12ed8:	f7ff ff8c 	bl	12df4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   12edc:	4838      	ldr	r0, [pc, #224]	; (12fc0 <z_impl_log_process+0x110>)
   12ede:	f00c f980 	bl	1f1e2 <log_list_head_peek>
   12ee2:	1e04      	subs	r4, r0, #0
   12ee4:	bf18      	it	ne
   12ee6:	2401      	movne	r4, #1
}
   12ee8:	4620      	mov	r0, r4
   12eea:	b003      	add	sp, #12
   12eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12ef0:	4b34      	ldr	r3, [pc, #208]	; (12fc4 <z_impl_log_process+0x114>)
   12ef2:	e8d3 2fef 	ldaex	r2, [r3]
   12ef6:	3a01      	subs	r2, #1
   12ef8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12efc:	2900      	cmp	r1, #0
   12efe:	d1f8      	bne.n	12ef2 <z_impl_log_process+0x42>
		    !panic_mode) {
   12f00:	4b31      	ldr	r3, [pc, #196]	; (12fc8 <z_impl_log_process+0x118>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   12f02:	781b      	ldrb	r3, [r3, #0]
   12f04:	b9bb      	cbnz	r3, 12f36 <z_impl_log_process+0x86>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12f06:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   12f08:	07db      	lsls	r3, r3, #31
   12f0a:	d414      	bmi.n	12f36 <z_impl_log_process+0x86>
	msg_str = log_msg_str_get(msg);
   12f0c:	f00c fa66 	bl	1f3dc <log_msg_str_get>
   12f10:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12f12:	4628      	mov	r0, r5
   12f14:	f00c fa31 	bl	1f37a <log_msg_nargs_get>
   12f18:	4601      	mov	r1, r0
   12f1a:	4640      	mov	r0, r8
   12f1c:	f7ff feb2 	bl	12c84 <z_log_get_s_mask>
   12f20:	4606      	mov	r6, r0
   12f22:	4b2a      	ldr	r3, [pc, #168]	; (12fcc <z_impl_log_process+0x11c>)
   12f24:	4a2a      	ldr	r2, [pc, #168]	; (12fd0 <z_impl_log_process+0x120>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12f26:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 12fe4 <z_impl_log_process+0x134>
   12f2a:	1a9b      	subs	r3, r3, r2
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12f2c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 12fe8 <z_impl_log_process+0x138>
   12f30:	ea4f 09d3 	mov.w	r9, r3, lsr #3
	while (mask) {
   12f34:	b936      	cbnz	r6, 12f44 <z_impl_log_process+0x94>
	return __log_backends_end - __log_backends_start;
   12f36:	4e27      	ldr	r6, [pc, #156]	; (12fd4 <z_impl_log_process+0x124>)
   12f38:	4f27      	ldr	r7, [pc, #156]	; (12fd8 <z_impl_log_process+0x128>)
   12f3a:	f04f 0800 	mov.w	r8, #0
   12f3e:	1bbf      	subs	r7, r7, r6
   12f40:	113f      	asrs	r7, r7, #4
   12f42:	e036      	b.n	12fb2 <z_impl_log_process+0x102>
		idx = 31 - __builtin_clz(mask);
   12f44:	fab6 f786 	clz	r7, r6
   12f48:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   12f4c:	4639      	mov	r1, r7
   12f4e:	4628      	mov	r0, r5
   12f50:	f00c fa16 	bl	1f380 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   12f54:	4b21      	ldr	r3, [pc, #132]	; (12fdc <z_impl_log_process+0x12c>)
		str = (const char *)log_msg_arg_get(msg, idx);
   12f56:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12f58:	4298      	cmp	r0, r3
   12f5a:	d302      	bcc.n	12f62 <z_impl_log_process+0xb2>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12f5c:	4b20      	ldr	r3, [pc, #128]	; (12fe0 <z_impl_log_process+0x130>)
   12f5e:	4298      	cmp	r0, r3
   12f60:	d316      	bcc.n	12f90 <z_impl_log_process+0xe0>
   12f62:	4610      	mov	r0, r2
   12f64:	f7ff ff96 	bl	12e94 <log_is_strdup>
   12f68:	b990      	cbnz	r0, 12f90 <z_impl_log_process+0xe0>
   12f6a:	4552      	cmp	r2, sl
   12f6c:	d010      	beq.n	12f90 <z_impl_log_process+0xe0>
	return msg->hdr.ids.source_id;
   12f6e:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   12f70:	f3c1 1189 	ubfx	r1, r1, #6, #10
   12f74:	f000 f8f4 	bl	13160 <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12f78:	ea4f 1389 	mov.w	r3, r9, lsl #6
   12f7c:	f043 0301 	orr.w	r3, r3, #1
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   12f80:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12f82:	f8ad 3000 	strh.w	r3, [sp]
   12f86:	4639      	mov	r1, r7
   12f88:	4643      	mov	r3, r8
   12f8a:	4658      	mov	r0, fp
   12f8c:	f00c f978 	bl	1f280 <log_3>
		mask &= ~BIT(idx);
   12f90:	2301      	movs	r3, #1
   12f92:	fa03 f707 	lsl.w	r7, r3, r7
   12f96:	ea26 0607 	bic.w	r6, r6, r7
   12f9a:	e7cb      	b.n	12f34 <z_impl_log_process+0x84>
	return backend->cb->active;
   12f9c:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   12f9e:	795b      	ldrb	r3, [r3, #5]
   12fa0:	b123      	cbz	r3, 12fac <z_impl_log_process+0xfc>
	backend->api->put(backend, msg);
   12fa2:	6833      	ldr	r3, [r6, #0]
   12fa4:	4629      	mov	r1, r5
   12fa6:	4630      	mov	r0, r6
   12fa8:	685b      	ldr	r3, [r3, #4]
   12faa:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   12fac:	f108 0801 	add.w	r8, r8, #1
   12fb0:	3610      	adds	r6, #16
   12fb2:	45b8      	cmp	r8, r7
   12fb4:	dbf2      	blt.n	12f9c <z_impl_log_process+0xec>
   12fb6:	e787      	b.n	12ec8 <z_impl_log_process+0x18>
   12fb8:	2000e299 	.word	0x2000e299
   12fbc:	2000d058 	.word	0x2000d058
   12fc0:	2000d060 	.word	0x2000d060
   12fc4:	2000d054 	.word	0x2000d054
   12fc8:	2000e29a 	.word	0x2000e29a
   12fcc:	00023028 	.word	0x00023028
   12fd0:	00022fd8 	.word	0x00022fd8
   12fd4:	00023088 	.word	0x00023088
   12fd8:	00023098 	.word	0x00023098
   12fdc:	00022c8c 	.word	0x00022c8c
   12fe0:	0002540c 	.word	0x0002540c
   12fe4:	00023684 	.word	0x00023684
   12fe8:	0002369e 	.word	0x0002369e

00012fec <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   12fec:	4b26      	ldr	r3, [pc, #152]	; (13088 <msg_finalize+0x9c>)
{
   12fee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   12ff0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   12ff2:	8141      	strh	r1, [r0, #10]
{
   12ff4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   12ff6:	4798      	blx	r3
   12ff8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12ffa:	f04f 0320 	mov.w	r3, #32
   12ffe:	f3ef 8511 	mrs	r5, BASEPRI
   13002:	f383 8812 	msr	BASEPRI_MAX, r3
   13006:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1300a:	4820      	ldr	r0, [pc, #128]	; (1308c <msg_finalize+0xa0>)
   1300c:	4621      	mov	r1, r4
   1300e:	f00c f8de 	bl	1f1ce <log_list_add_tail>
	__asm__ volatile(
   13012:	f385 8811 	msr	BASEPRI, r5
   13016:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1301a:	4b1d      	ldr	r3, [pc, #116]	; (13090 <msg_finalize+0xa4>)
   1301c:	e8d3 2fef 	ldaex	r2, [r3]
   13020:	1c51      	adds	r1, r2, #1
   13022:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13026:	2800      	cmp	r0, #0
   13028:	d1f8      	bne.n	1301c <msg_finalize+0x30>
	if (panic_mode) {
   1302a:	4b1a      	ldr	r3, [pc, #104]	; (13094 <msg_finalize+0xa8>)
   1302c:	781b      	ldrb	r3, [r3, #0]
   1302e:	b183      	cbz	r3, 13052 <msg_finalize+0x66>
	__asm__ volatile(
   13030:	f04f 0320 	mov.w	r3, #32
   13034:	f3ef 8411 	mrs	r4, BASEPRI
   13038:	f383 8812 	msr	BASEPRI_MAX, r3
   1303c:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   13040:	2000      	movs	r0, #0
   13042:	f7ff ff35 	bl	12eb0 <z_impl_log_process>
	__asm__ volatile(
   13046:	f384 8811 	msr	BASEPRI, r4
   1304a:	f3bf 8f6f 	isb	sy
}
   1304e:	b003      	add	sp, #12
   13050:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
   13052:	4b11      	ldr	r3, [pc, #68]	; (13098 <msg_finalize+0xac>)
   13054:	681b      	ldr	r3, [r3, #0]
   13056:	2b00      	cmp	r3, #0
   13058:	d0f9      	beq.n	1304e <msg_finalize+0x62>
   1305a:	b952      	cbnz	r2, 13072 <msg_finalize+0x86>
	z_impl_k_timer_start(timer, duration, period);
   1305c:	2200      	movs	r2, #0
   1305e:	2300      	movs	r3, #0
   13060:	480e      	ldr	r0, [pc, #56]	; (1309c <msg_finalize+0xb0>)
   13062:	e9cd 2300 	strd	r2, r3, [sp]
   13066:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1306a:	2300      	movs	r3, #0
   1306c:	f00a fae0 	bl	1d630 <z_impl_k_timer_start>
   13070:	e7ed      	b.n	1304e <msg_finalize+0x62>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   13072:	2a0a      	cmp	r2, #10
   13074:	d1eb      	bne.n	1304e <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   13076:	4809      	ldr	r0, [pc, #36]	; (1309c <msg_finalize+0xb0>)
   13078:	f00f f930 	bl	222dc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1307c:	4808      	ldr	r0, [pc, #32]	; (130a0 <msg_finalize+0xb4>)
}
   1307e:	b003      	add	sp, #12
   13080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   13084:	f009 bbec 	b.w	1c860 <z_impl_k_sem_give>
   13088:	2000c534 	.word	0x2000c534
   1308c:	2000d060 	.word	0x2000d060
   13090:	2000d054 	.word	0x2000d054
   13094:	2000e29a 	.word	0x2000e29a
   13098:	2000d084 	.word	0x2000d084
   1309c:	2000cb00 	.word	0x2000cb00
   130a0:	2000c8a4 	.word	0x2000c8a4

000130a4 <log_process_thread_func>:
{
   130a4:	b510      	push	{r4, lr}
	log_init();
   130a6:	f7ff fe39 	bl	12d1c <log_init>
	return z_impl_z_current_get();
   130aa:	f00a f88b 	bl	1d1c4 <z_impl_z_current_get>
	proc_tid = process_tid;
   130ae:	4b0c      	ldr	r3, [pc, #48]	; (130e0 <log_process_thread_func+0x3c>)
   130b0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   130b2:	b130      	cbz	r0, 130c2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   130b4:	4b0b      	ldr	r3, [pc, #44]	; (130e4 <log_process_thread_func+0x40>)
	    process_tid &&
   130b6:	681b      	ldr	r3, [r3, #0]
   130b8:	2b09      	cmp	r3, #9
   130ba:	dd02      	ble.n	130c2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   130bc:	480a      	ldr	r0, [pc, #40]	; (130e8 <log_process_thread_func+0x44>)
   130be:	f009 fbcf 	bl	1c860 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   130c2:	4c09      	ldr	r4, [pc, #36]	; (130e8 <log_process_thread_func+0x44>)
   130c4:	2000      	movs	r0, #0
   130c6:	f7ff fef3 	bl	12eb0 <z_impl_log_process>
		if (log_process(false) == false) {
   130ca:	2800      	cmp	r0, #0
   130cc:	d1fa      	bne.n	130c4 <log_process_thread_func+0x20>
   130ce:	f04f 32ff 	mov.w	r2, #4294967295
   130d2:	f04f 33ff 	mov.w	r3, #4294967295
   130d6:	4620      	mov	r0, r4
   130d8:	f009 fbe8 	bl	1c8ac <z_impl_k_sem_take>
   130dc:	e7f2      	b.n	130c4 <log_process_thread_func+0x20>
   130de:	bf00      	nop
   130e0:	2000d084 	.word	0x2000d084
   130e4:	2000d054 	.word	0x2000d054
   130e8:	2000c8a4 	.word	0x2000c8a4

000130ec <z_impl_log_panic>:
{
   130ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   130ee:	4f0e      	ldr	r7, [pc, #56]	; (13128 <z_impl_log_panic+0x3c>)
   130f0:	783d      	ldrb	r5, [r7, #0]
   130f2:	b975      	cbnz	r5, 13112 <z_impl_log_panic+0x26>
	log_init();
   130f4:	f7ff fe12 	bl	12d1c <log_init>
	return __log_backends_end - __log_backends_start;
   130f8:	4c0c      	ldr	r4, [pc, #48]	; (1312c <z_impl_log_panic+0x40>)
   130fa:	4e0d      	ldr	r6, [pc, #52]	; (13130 <z_impl_log_panic+0x44>)
   130fc:	1b36      	subs	r6, r6, r4
   130fe:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13100:	42b5      	cmp	r5, r6
   13102:	db07      	blt.n	13114 <z_impl_log_panic+0x28>
   13104:	2000      	movs	r0, #0
   13106:	f7ff fed3 	bl	12eb0 <z_impl_log_process>
		while (log_process(false) == true) {
   1310a:	2800      	cmp	r0, #0
   1310c:	d1fa      	bne.n	13104 <z_impl_log_panic+0x18>
	panic_mode = true;
   1310e:	2301      	movs	r3, #1
   13110:	703b      	strb	r3, [r7, #0]
}
   13112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   13114:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13116:	795b      	ldrb	r3, [r3, #5]
   13118:	b11b      	cbz	r3, 13122 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   1311a:	6823      	ldr	r3, [r4, #0]
   1311c:	4620      	mov	r0, r4
   1311e:	695b      	ldr	r3, [r3, #20]
   13120:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   13122:	3501      	adds	r5, #1
   13124:	3410      	adds	r4, #16
   13126:	e7eb      	b.n	13100 <z_impl_log_panic+0x14>
   13128:	2000e29a 	.word	0x2000e29a
   1312c:	00023088 	.word	0x00023088
   13130:	00023098 	.word	0x00023098

00013134 <z_log_free>:
{
   13134:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   13136:	3804      	subs	r0, #4
   13138:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1313a:	e8d0 3fef 	ldaex	r3, [r0]
   1313e:	1e5a      	subs	r2, r3, #1
   13140:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13144:	2900      	cmp	r1, #0
   13146:	d1f8      	bne.n	1313a <z_log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   13148:	2b01      	cmp	r3, #1
   1314a:	d103      	bne.n	13154 <z_log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1314c:	4803      	ldr	r0, [pc, #12]	; (1315c <z_log_free+0x28>)
   1314e:	a901      	add	r1, sp, #4
   13150:	f00e fdff 	bl	21d52 <k_mem_slab_free>
}
   13154:	b003      	add	sp, #12
   13156:	f85d fb04 	ldr.w	pc, [sp], #4
   1315a:	bf00      	nop
   1315c:	2000d068 	.word	0x2000d068

00013160 <log_source_name_get>:
   13160:	4a04      	ldr	r2, [pc, #16]	; (13174 <log_source_name_get+0x14>)
   13162:	4b05      	ldr	r3, [pc, #20]	; (13178 <log_source_name_get+0x18>)
   13164:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13166:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1316a:	bf34      	ite	cc
   1316c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13170:	2000      	movcs	r0, #0
}
   13172:	4770      	bx	lr
   13174:	00022fd8 	.word	0x00022fd8
   13178:	00023088 	.word	0x00023088

0001317c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1317c:	4b05      	ldr	r3, [pc, #20]	; (13194 <log_backend_enable+0x18>)

	log_backend_id_set(backend, id);
   1317e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   13180:	1ac3      	subs	r3, r0, r3
   13182:	111b      	asrs	r3, r3, #4
   13184:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
   13186:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   13188:	2201      	movs	r2, #1
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
   1318a:	6843      	ldr	r3, [r0, #4]
	backend->cb->ctx = ctx;
   1318c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1318e:	715a      	strb	r2, [r3, #5]

	z_log_notify_backend_enabled();
   13190:	f7ff be00 	b.w	12d94 <z_log_notify_backend_enabled>
   13194:	00023088 	.word	0x00023088

00013198 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   13198:	2320      	movs	r3, #32
   1319a:	4902      	ldr	r1, [pc, #8]	; (131a4 <log_msg_pool_init+0xc>)
   1319c:	461a      	mov	r2, r3
   1319e:	4802      	ldr	r0, [pc, #8]	; (131a8 <log_msg_pool_init+0x10>)
   131a0:	f00e bdbc 	b.w	21d1c <k_mem_slab_init>
   131a4:	200167d8 	.word	0x200167d8
   131a8:	2000d088 	.word	0x2000d088

000131ac <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   131ac:	2300      	movs	r3, #0
{
   131ae:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   131b0:	4d09      	ldr	r5, [pc, #36]	; (131d8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   131b2:	9301      	str	r3, [sp, #4]
   131b4:	2001      	movs	r0, #1
   131b6:	f7ff fe7b 	bl	12eb0 <z_impl_log_process>
   131ba:	4604      	mov	r4, r0
			z_log_dropped();
   131bc:	f7ff fdf8 	bl	12db0 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   131c0:	2200      	movs	r2, #0
   131c2:	2300      	movs	r3, #0
   131c4:	4628      	mov	r0, r5
   131c6:	a901      	add	r1, sp, #4
   131c8:	f009 f94e 	bl	1c468 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   131cc:	b108      	cbz	r0, 131d2 <log_msg_no_space_handle+0x26>
   131ce:	2c00      	cmp	r4, #0
   131d0:	d1f0      	bne.n	131b4 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   131d2:	9801      	ldr	r0, [sp, #4]
   131d4:	b003      	add	sp, #12
   131d6:	bd30      	pop	{r4, r5, pc}
   131d8:	2000d088 	.word	0x2000d088

000131dc <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   131dc:	2300      	movs	r3, #0
{
   131de:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   131e0:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   131e2:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   131e4:	4806      	ldr	r0, [pc, #24]	; (13200 <log_msg_chunk_alloc+0x24>)
   131e6:	2300      	movs	r3, #0
   131e8:	a901      	add	r1, sp, #4
   131ea:	f009 f93d 	bl	1c468 <k_mem_slab_alloc>
	if (err != 0) {
   131ee:	b110      	cbz	r0, 131f6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   131f0:	f7ff ffdc 	bl	131ac <log_msg_no_space_handle>
   131f4:	9001      	str	r0, [sp, #4]
}
   131f6:	9801      	ldr	r0, [sp, #4]
   131f8:	b003      	add	sp, #12
   131fa:	f85d fb04 	ldr.w	pc, [sp], #4
   131fe:	bf00      	nop
   13200:	2000d088 	.word	0x2000d088

00013204 <msg_free>:
{
   13204:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13206:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   13208:	7a45      	ldrb	r5, [r0, #9]
{
   1320a:	b085      	sub	sp, #20
   1320c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   1320e:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   13210:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   13214:	d41c      	bmi.n	13250 <msg_free+0x4c>
   13216:	b1dd      	cbz	r5, 13250 <msg_free+0x4c>
		uint32_t smask = 0U;
   13218:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   1321a:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   1321c:	4631      	mov	r1, r6
   1321e:	9801      	ldr	r0, [sp, #4]
   13220:	f00c f8ae 	bl	1f380 <log_msg_arg_get>
   13224:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   13226:	f7ff fe35 	bl	12e94 <log_is_strdup>
   1322a:	b170      	cbz	r0, 1324a <msg_free+0x46>
				if (smask == 0U) {
   1322c:	b934      	cbnz	r4, 1323c <msg_free+0x38>
					smask = z_log_get_s_mask(
   1322e:	9b01      	ldr	r3, [sp, #4]
   13230:	4629      	mov	r1, r5
   13232:	6918      	ldr	r0, [r3, #16]
   13234:	f7ff fd26 	bl	12c84 <z_log_get_s_mask>
					if (smask == 0U) {
   13238:	4604      	mov	r4, r0
   1323a:	b148      	cbz	r0, 13250 <msg_free+0x4c>
				if (smask & BIT(i)) {
   1323c:	fa24 f306 	lsr.w	r3, r4, r6
   13240:	07d9      	lsls	r1, r3, #31
   13242:	d502      	bpl.n	1324a <msg_free+0x46>
					z_log_free(buf);
   13244:	4638      	mov	r0, r7
   13246:	f7ff ff75 	bl	13134 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   1324a:	3601      	adds	r6, #1
   1324c:	42ae      	cmp	r6, r5
   1324e:	d3e5      	bcc.n	1321c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   13250:	9b01      	ldr	r3, [sp, #4]
   13252:	7a1a      	ldrb	r2, [r3, #8]
   13254:	0792      	lsls	r2, r2, #30
   13256:	d504      	bpl.n	13262 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   13258:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1325a:	4c08      	ldr	r4, [pc, #32]	; (1327c <msg_free+0x78>)
   1325c:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   1325e:	9b03      	ldr	r3, [sp, #12]
   13260:	b92b      	cbnz	r3, 1326e <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   13262:	4806      	ldr	r0, [pc, #24]	; (1327c <msg_free+0x78>)
   13264:	a901      	add	r1, sp, #4
   13266:	f00e fd74 	bl	21d52 <k_mem_slab_free>
}
   1326a:	b005      	add	sp, #20
   1326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   1326e:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13270:	4620      	mov	r0, r4
   13272:	a903      	add	r1, sp, #12
   13274:	f00e fd6d 	bl	21d52 <k_mem_slab_free>
		cont = next;
   13278:	9503      	str	r5, [sp, #12]
   1327a:	e7f0      	b.n	1325e <msg_free+0x5a>
   1327c:	2000d088 	.word	0x2000d088

00013280 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13280:	b40e      	push	{r1, r2, r3}
   13282:	b503      	push	{r0, r1, lr}
   13284:	ab03      	add	r3, sp, #12
   13286:	f853 2b04 	ldr.w	r2, [r3], #4
   1328a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1328c:	4804      	ldr	r0, [pc, #16]	; (132a0 <print_formatted+0x20>)
	va_start(args, fmt);
   1328e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13290:	f7ff f90e 	bl	124b0 <cbvprintf>
	va_end(args);

	return length;
}
   13294:	b002      	add	sp, #8
   13296:	f85d eb04 	ldr.w	lr, [sp], #4
   1329a:	b003      	add	sp, #12
   1329c:	4770      	bx	lr
   1329e:	bf00      	nop
   132a0:	0001f6dd 	.word	0x0001f6dd

000132a4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   132a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a8:	461f      	mov	r7, r3
   132aa:	b087      	sub	sp, #28
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   132ac:	f001 0301 	and.w	r3, r1, #1
{
   132b0:	9205      	str	r2, [sp, #20]
   132b2:	4606      	mov	r6, r0
   132b4:	4688      	mov	r8, r1
   132b6:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   132ba:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   132be:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   132c2:	9304      	str	r3, [sp, #16]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   132c4:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   132c8:	f00b fff6 	bl	1f2b8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   132cc:	4602      	mov	r2, r0
   132ce:	2800      	cmp	r0, #0
   132d0:	d044      	beq.n	1335c <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   132d2:	4630      	mov	r0, r6
   132d4:	4938      	ldr	r1, [pc, #224]	; (133b8 <prefix_print+0x114>)
   132d6:	f7ff ffd3 	bl	13280 <print_formatted>
   132da:	4604      	mov	r4, r0
	}

	if (stamp) {
   132dc:	f1bb 0f00 	cmp.w	fp, #0
   132e0:	d008      	beq.n	132f4 <prefix_print+0x50>
	if (!format) {
   132e2:	f018 0f44 	tst.w	r8, #68	; 0x44
   132e6:	d13b      	bne.n	13360 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   132e8:	463a      	mov	r2, r7
   132ea:	4630      	mov	r0, r6
   132ec:	4933      	ldr	r1, [pc, #204]	; (133bc <prefix_print+0x118>)
   132ee:	f7ff ffc7 	bl	13280 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   132f2:	4404      	add	r4, r0
	if (color) {
   132f4:	9b04      	ldr	r3, [sp, #16]
   132f6:	b153      	cbz	r3, 1330e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   132f8:	4b31      	ldr	r3, [pc, #196]	; (133c0 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   132fa:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   132fc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   13300:	4b30      	ldr	r3, [pc, #192]	; (133c4 <prefix_print+0x120>)
   13302:	4931      	ldr	r1, [pc, #196]	; (133c8 <prefix_print+0x124>)
   13304:	2a00      	cmp	r2, #0
   13306:	bf08      	it	eq
   13308:	461a      	moveq	r2, r3
   1330a:	f7ff ffb9 	bl	13280 <print_formatted>
	if (level_on) {
   1330e:	b13d      	cbz	r5, 13320 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   13310:	4b2e      	ldr	r3, [pc, #184]	; (133cc <prefix_print+0x128>)
   13312:	4630      	mov	r0, r6
   13314:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   13318:	492d      	ldr	r1, [pc, #180]	; (133d0 <prefix_print+0x12c>)
   1331a:	f7ff ffb1 	bl	13280 <print_formatted>
   1331e:	4605      	mov	r5, r0
	if (source_id >= 0) {
   13320:	f1ba 0f00 	cmp.w	sl, #0
   13324:	db16      	blt.n	13354 <prefix_print+0xb0>
		total += print_formatted(output,
   13326:	9b05      	ldr	r3, [sp, #20]
   13328:	2b00      	cmp	r3, #0
   1332a:	d043      	beq.n	133b4 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1332c:	2301      	movs	r3, #1
   1332e:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   13332:	4b28      	ldr	r3, [pc, #160]	; (133d4 <prefix_print+0x130>)
   13334:	f019 0f10 	tst.w	r9, #16
   13338:	4f27      	ldr	r7, [pc, #156]	; (133d8 <prefix_print+0x134>)
   1333a:	bf18      	it	ne
   1333c:	461f      	movne	r7, r3
   1333e:	4651      	mov	r1, sl
   13340:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   13344:	f7ff ff0c 	bl	13160 <log_source_name_get>
   13348:	4639      	mov	r1, r7
   1334a:	4602      	mov	r2, r0
   1334c:	4630      	mov	r0, r6
   1334e:	f7ff ff97 	bl	13280 <print_formatted>
   13352:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   13354:	1928      	adds	r0, r5, r4
   13356:	b007      	add	sp, #28
   13358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   1335c:	4604      	mov	r4, r0
   1335e:	e7bd      	b.n	132dc <prefix_print+0x38>
	} else if (freq != 0U) {
   13360:	4b1e      	ldr	r3, [pc, #120]	; (133dc <prefix_print+0x138>)
   13362:	6818      	ldr	r0, [r3, #0]
   13364:	2800      	cmp	r0, #0
   13366:	d0c4      	beq.n	132f2 <prefix_print+0x4e>
		timestamp /= timestamp_div;
   13368:	4b1d      	ldr	r3, [pc, #116]	; (133e0 <prefix_print+0x13c>)
   1336a:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1336e:	6819      	ldr	r1, [r3, #0]
		mins = seconds / 60U;
   13370:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		timestamp /= timestamp_div;
   13374:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   13378:	fbb7 f1f0 	udiv	r1, r7, r0
		seconds -= hours * 3600U;
   1337c:	fbb1 f2fc 	udiv	r2, r1, ip
		remainder = timestamp % freq;
   13380:	fb00 7711 	mls	r7, r0, r1, r7
   13384:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   13388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1338c:	434f      	muls	r7, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1338e:	fbb7 f8f0 	udiv	r8, r7, r0
   13392:	fb00 7718 	mls	r7, r0, r8, r7
		mins = seconds / 60U;
   13396:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1339a:	434f      	muls	r7, r1
   1339c:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   133a0:	fb0e c113 	mls	r1, lr, r3, ip
   133a4:	e9cd 8001 	strd	r8, r0, [sp, #4]
   133a8:	9100      	str	r1, [sp, #0]
   133aa:	4630      	mov	r0, r6
   133ac:	490d      	ldr	r1, [pc, #52]	; (133e4 <prefix_print+0x140>)
   133ae:	f7ff ff67 	bl	13280 <print_formatted>
   133b2:	e79e      	b.n	132f2 <prefix_print+0x4e>
		total += print_formatted(output,
   133b4:	4f08      	ldr	r7, [pc, #32]	; (133d8 <prefix_print+0x134>)
   133b6:	e7c2      	b.n	1333e <prefix_print+0x9a>
   133b8:	000236f0 	.word	0x000236f0
   133bc:	000236f4 	.word	0x000236f4
   133c0:	00023148 	.word	0x00023148
   133c4:	000236e2 	.word	0x000236e2
   133c8:	00024ebf 	.word	0x00024ebf
   133cc:	0002315c 	.word	0x0002315c
   133d0:	00023719 	.word	0x00023719
   133d4:	000236ec 	.word	0x000236ec
   133d8:	000236e7 	.word	0x000236e7
   133dc:	2000d0a4 	.word	0x2000d0a4
   133e0:	2000d0a8 	.word	0x2000d0a8
   133e4:	000236fd 	.word	0x000236fd

000133e8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   133e8:	b538      	push	{r3, r4, r5, lr}
   133ea:	460c      	mov	r4, r1
	if (color) {
   133ec:	07e1      	lsls	r1, r4, #31
{
   133ee:	4605      	mov	r5, r0
	if (color) {
   133f0:	d503      	bpl.n	133fa <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   133f2:	4a08      	ldr	r2, [pc, #32]	; (13414 <postfix_print+0x2c>)
   133f4:	4908      	ldr	r1, [pc, #32]	; (13418 <postfix_print+0x30>)
   133f6:	f7ff ff43 	bl	13280 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   133fa:	06e2      	lsls	r2, r4, #27
   133fc:	d408      	bmi.n	13410 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   133fe:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   13400:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   13402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   13406:	bf4c      	ite	mi
   13408:	4904      	ldrmi	r1, [pc, #16]	; (1341c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1340a:	4905      	ldrpl	r1, [pc, #20]	; (13420 <postfix_print+0x38>)
   1340c:	f7ff bf38 	b.w	13280 <print_formatted>
}
   13410:	bd38      	pop	{r3, r4, r5, pc}
   13412:	bf00      	nop
   13414:	000236e2 	.word	0x000236e2
   13418:	00024ebf 	.word	0x00024ebf
   1341c:	000250f5 	.word	0x000250f5
   13420:	000250f4 	.word	0x000250f4

00013424 <hexdump_line_print>:
{
   13424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13428:	461d      	mov	r5, r3
   1342a:	9b08      	ldr	r3, [sp, #32]
   1342c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1342e:	06da      	lsls	r2, r3, #27
{
   13430:	4604      	mov	r4, r0
   13432:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13434:	d405      	bmi.n	13442 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13436:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   13438:	bf4c      	ite	mi
   1343a:	492b      	ldrmi	r1, [pc, #172]	; (134e8 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   1343c:	492b      	ldrpl	r1, [pc, #172]	; (134ec <hexdump_line_print+0xc8>)
   1343e:	f7ff ff1f 	bl	13280 <print_formatted>
{
   13442:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   13446:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 134f4 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   1344a:	45a8      	cmp	r8, r5
   1344c:	db2d      	blt.n	134aa <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1344e:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   13450:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 134f8 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   13454:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 134fc <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   13458:	f8df a098 	ldr.w	sl, [pc, #152]	; 134f4 <hexdump_line_print+0xd0>
		if (i < length) {
   1345c:	42bd      	cmp	r5, r7
   1345e:	d232      	bcs.n	134c6 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   13460:	4649      	mov	r1, r9
   13462:	4620      	mov	r0, r4
   13464:	5d72      	ldrb	r2, [r6, r5]
   13466:	f7ff ff0b 	bl	13280 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1346a:	3501      	adds	r5, #1
   1346c:	2d10      	cmp	r5, #16
   1346e:	d123      	bne.n	134b8 <hexdump_line_print+0x94>
	print_formatted(output, "|");
   13470:	4620      	mov	r0, r4
   13472:	491f      	ldr	r1, [pc, #124]	; (134f0 <hexdump_line_print+0xcc>)
   13474:	f7ff ff04 	bl	13280 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13478:	2500      	movs	r5, #0
			print_formatted(output, " ");
   1347a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 134f4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   1347e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 13500 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   13482:	f8df a080 	ldr.w	sl, [pc, #128]	; 13504 <hexdump_line_print+0xe0>
		if (i < length) {
   13486:	42af      	cmp	r7, r5
   13488:	d929      	bls.n	134de <hexdump_line_print+0xba>
			char c = (char)data[i];
   1348a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   1348c:	4651      	mov	r1, sl
   1348e:	f812 3009 	ldrb.w	r3, [r2, r9]
   13492:	4620      	mov	r0, r4
   13494:	f013 0f97 	tst.w	r3, #151	; 0x97
   13498:	bf08      	it	eq
   1349a:	222e      	moveq	r2, #46	; 0x2e
   1349c:	f7ff fef0 	bl	13280 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   134a0:	3501      	adds	r5, #1
   134a2:	2d10      	cmp	r5, #16
   134a4:	d114      	bne.n	134d0 <hexdump_line_print+0xac>
}
   134a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   134aa:	4649      	mov	r1, r9
   134ac:	4620      	mov	r0, r4
   134ae:	f7ff fee7 	bl	13280 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   134b2:	f108 0801 	add.w	r8, r8, #1
   134b6:	e7c8      	b.n	1344a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   134b8:	076a      	lsls	r2, r5, #29
   134ba:	d1cf      	bne.n	1345c <hexdump_line_print+0x38>
			print_formatted(output, " ");
   134bc:	4651      	mov	r1, sl
   134be:	4620      	mov	r0, r4
   134c0:	f7ff fede 	bl	13280 <print_formatted>
   134c4:	e7ca      	b.n	1345c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   134c6:	4641      	mov	r1, r8
   134c8:	4620      	mov	r0, r4
   134ca:	f7ff fed9 	bl	13280 <print_formatted>
   134ce:	e7cc      	b.n	1346a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   134d0:	076b      	lsls	r3, r5, #29
   134d2:	d1d8      	bne.n	13486 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   134d4:	4641      	mov	r1, r8
   134d6:	4620      	mov	r0, r4
   134d8:	f7ff fed2 	bl	13280 <print_formatted>
   134dc:	e7d3      	b.n	13486 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   134de:	4641      	mov	r1, r8
   134e0:	4620      	mov	r0, r4
   134e2:	f7ff fecd 	bl	13280 <print_formatted>
   134e6:	e7db      	b.n	134a0 <hexdump_line_print+0x7c>
   134e8:	000250f5 	.word	0x000250f5
   134ec:	000250f4 	.word	0x000250f4
   134f0:	00023729 	.word	0x00023729
   134f4:	00023727 	.word	0x00023727
   134f8:	00023725 	.word	0x00023725
   134fc:	0002371f 	.word	0x0002371f
   13500:	000252b9 	.word	0x000252b9
   13504:	0002440d 	.word	0x0002440d

00013508 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   13508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   1350c:	7a8b      	ldrb	r3, [r1, #10]
   1350e:	4617      	mov	r7, r2
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   13510:	f013 0807 	ands.w	r8, r3, #7
{
   13514:	4605      	mov	r5, r0
   13516:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13518:	7a0a      	ldrb	r2, [r1, #8]
   1351a:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(output, flags, std_msg, timestamp,
   1351c:	d021      	beq.n	13562 <log_output_msg_process+0x5a>
   1351e:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   13520:	8949      	ldrh	r1, [r1, #10]
   13522:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13526:	f3c1 1189 	ubfx	r1, r1, #6, #10
   1352a:	e9cd 8300 	strd	r8, r3, [sp]
   1352e:	9102      	str	r1, [sp, #8]
   13530:	68f3      	ldr	r3, [r6, #12]
   13532:	4639      	mov	r1, r7
   13534:	f002 0201 	and.w	r2, r2, #1
   13538:	f7ff feb4 	bl	132a4 <prefix_print>
   1353c:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1353e:	7a34      	ldrb	r4, [r6, #8]
   13540:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   13542:	f014 0401 	ands.w	r4, r4, #1
   13546:	d00e      	beq.n	13566 <log_output_msg_process+0x5e>
		std_print(msg, output);
   13548:	4629      	mov	r1, r5
   1354a:	4630      	mov	r0, r6
   1354c:	f00b ff5c 	bl	1f408 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   13550:	f1b8 0f00 	cmp.w	r8, #0
   13554:	d02b      	beq.n	135ae <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
   13556:	4642      	mov	r2, r8
   13558:	4639      	mov	r1, r7
   1355a:	4628      	mov	r0, r5
   1355c:	f7ff ff44 	bl	133e8 <postfix_print>
   13560:	e025      	b.n	135ae <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   13562:	46c1      	mov	r9, r8
   13564:	e7eb      	b.n	1353e <log_output_msg_process+0x36>
	} else if (raw_string) {
   13566:	f1b8 0f00 	cmp.w	r8, #0
   1356a:	d126      	bne.n	135ba <log_output_msg_process+0xb2>
	size_t offset = 0;
   1356c:	4627      	mov	r7, r4
		length = output->size;
   1356e:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   13570:	aa06      	add	r2, sp, #24
		length = output->size;
   13572:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   13574:	4630      	mov	r0, r6
   13576:	463b      	mov	r3, r7
   13578:	68a9      	ldr	r1, [r5, #8]
   1357a:	f00b ff31 	bl	1f3e0 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   1357e:	9a06      	ldr	r2, [sp, #24]
   13580:	686b      	ldr	r3, [r5, #4]
   13582:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   13584:	b13a      	cbz	r2, 13596 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
   13586:	68ab      	ldr	r3, [r5, #8]
   13588:	4413      	add	r3, r2
   1358a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   1358e:	f1a4 030a 	sub.w	r3, r4, #10
   13592:	425c      	negs	r4, r3
   13594:	415c      	adcs	r4, r3
		log_output_flush(output);
   13596:	4628      	mov	r0, r5
   13598:	f00c f893 	bl	1f6c2 <log_output_flush>
		offset += length;
   1359c:	9b06      	ldr	r3, [sp, #24]
   1359e:	441f      	add	r7, r3
	} while (length > 0);
   135a0:	2b00      	cmp	r3, #0
   135a2:	d1e4      	bne.n	1356e <log_output_msg_process+0x66>
	if (eol) {
   135a4:	b11c      	cbz	r4, 135ae <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
   135a6:	4628      	mov	r0, r5
   135a8:	4913      	ldr	r1, [pc, #76]	; (135f8 <log_output_msg_process+0xf0>)
   135aa:	f7ff fe69 	bl	13280 <print_formatted>
	}

	log_output_flush(output);
   135ae:	4628      	mov	r0, r5
   135b0:	f00c f887 	bl	1f6c2 <log_output_flush>
}
   135b4:	b00a      	add	sp, #40	; 0x28
   135b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   135ba:	4630      	mov	r0, r6
   135bc:	f00b ff0e 	bl	1f3dc <log_msg_str_get>
   135c0:	490e      	ldr	r1, [pc, #56]	; (135fc <log_output_msg_process+0xf4>)
   135c2:	4602      	mov	r2, r0
   135c4:	4628      	mov	r0, r5
   135c6:	f7ff fe5b 	bl	13280 <print_formatted>
		length = sizeof(buf);
   135ca:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   135ce:	aa05      	add	r2, sp, #20
   135d0:	4623      	mov	r3, r4
   135d2:	4630      	mov	r0, r6
   135d4:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   135d6:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   135da:	f00b ff01 	bl	1f3e0 <log_msg_hexdump_data_get>
		if (length) {
   135de:	9a05      	ldr	r2, [sp, #20]
   135e0:	2a00      	cmp	r2, #0
   135e2:	d0b8      	beq.n	13556 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
   135e4:	464b      	mov	r3, r9
   135e6:	4628      	mov	r0, r5
   135e8:	9700      	str	r7, [sp, #0]
   135ea:	a906      	add	r1, sp, #24
   135ec:	f7ff ff1a 	bl	13424 <hexdump_line_print>
			offset += length;
   135f0:	9b05      	ldr	r3, [sp, #20]
   135f2:	441c      	add	r4, r3
		length = sizeof(buf);
   135f4:	e7eb      	b.n	135ce <log_output_msg_process+0xc6>
   135f6:	bf00      	nop
   135f8:	0002372b 	.word	0x0002372b
   135fc:	00024ebf 	.word	0x00024ebf

00013600 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13600:	f242 730f 	movw	r3, #9999	; 0x270f
{
   13604:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13606:	428b      	cmp	r3, r1
   13608:	bf28      	it	cs
   1360a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1360c:	6805      	ldr	r5, [r0, #0]
{
   1360e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13610:	2105      	movs	r1, #5
   13612:	4668      	mov	r0, sp
   13614:	4a0d      	ldr	r2, [pc, #52]	; (1364c <log_output_dropped_process+0x4c>)
   13616:	f00b fb1a 	bl	1ec4e <snprintk>
   1361a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1361c:	6863      	ldr	r3, [r4, #4]
   1361e:	4628      	mov	r0, r5
   13620:	220b      	movs	r2, #11
   13622:	685b      	ldr	r3, [r3, #4]
   13624:	490a      	ldr	r1, [pc, #40]	; (13650 <log_output_dropped_process+0x50>)
   13626:	f00b fee2 	bl	1f3ee <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1362a:	6863      	ldr	r3, [r4, #4]
   1362c:	4632      	mov	r2, r6
   1362e:	4669      	mov	r1, sp
   13630:	4628      	mov	r0, r5
   13632:	685b      	ldr	r3, [r3, #4]
   13634:	f00b fedb 	bl	1f3ee <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13638:	6863      	ldr	r3, [r4, #4]
   1363a:	221b      	movs	r2, #27
   1363c:	4628      	mov	r0, r5
   1363e:	685b      	ldr	r3, [r3, #4]
   13640:	4904      	ldr	r1, [pc, #16]	; (13654 <log_output_dropped_process+0x54>)
   13642:	f00b fed4 	bl	1f3ee <buffer_write>
		     output->control_block->ctx);
}
   13646:	b002      	add	sp, #8
   13648:	bd70      	pop	{r4, r5, r6, pc}
   1364a:	bf00      	nop
   1364c:	00025049 	.word	0x00025049
   13650:	00023769 	.word	0x00023769
   13654:	0002374d 	.word	0x0002374d

00013658 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   13658:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1365a:	2100      	movs	r1, #0
	timestamp_div = 1U;
   1365c:	4a07      	ldr	r2, [pc, #28]	; (1367c <log_output_timestamp_freq_set+0x24>)
{
   1365e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   13660:	4c07      	ldr	r4, [pc, #28]	; (13680 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   13662:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13664:	42a0      	cmp	r0, r4
   13666:	d804      	bhi.n	13672 <log_output_timestamp_freq_set+0x1a>
   13668:	b101      	cbz	r1, 1366c <log_output_timestamp_freq_set+0x14>
   1366a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1366c:	4b05      	ldr	r3, [pc, #20]	; (13684 <log_output_timestamp_freq_set+0x2c>)
   1366e:	6018      	str	r0, [r3, #0]
}
   13670:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   13672:	2101      	movs	r1, #1
		frequency /= 2U;
   13674:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13676:	005b      	lsls	r3, r3, #1
   13678:	e7f4      	b.n	13664 <log_output_timestamp_freq_set+0xc>
   1367a:	bf00      	nop
   1367c:	2000d0a8 	.word	0x2000d0a8
   13680:	000f4240 	.word	0x000f4240
   13684:	2000d0a4 	.word	0x2000d0a4

00013688 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   13688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1368a:	460d      	mov	r5, r1
   1368c:	4604      	mov	r4, r0
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
   1368e:	4f06      	ldr	r7, [pc, #24]	; (136a8 <char_out+0x20>)
   13690:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   13692:	42b4      	cmp	r4, r6
   13694:	d101      	bne.n	1369a <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   13696:	4628      	mov	r0, r5
   13698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1369a:	6838      	ldr	r0, [r7, #0]
   1369c:	f814 1b01 	ldrb.w	r1, [r4], #1
   136a0:	6883      	ldr	r3, [r0, #8]
   136a2:	685b      	ldr	r3, [r3, #4]
   136a4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   136a6:	e7f4      	b.n	13692 <char_out+0xa>
   136a8:	2000d0c0 	.word	0x2000d0c0

000136ac <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   136ac:	4b01      	ldr	r3, [pc, #4]	; (136b4 <log_backend_uart_init+0x8>)
   136ae:	4a02      	ldr	r2, [pc, #8]	; (136b8 <log_backend_uart_init+0xc>)
   136b0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   136b2:	4770      	bx	lr
   136b4:	2000d0c0 	.word	0x2000d0c0
   136b8:	00022d94 	.word	0x00022d94

000136bc <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   136bc:	2201      	movs	r2, #1
   136be:	4b02      	ldr	r3, [pc, #8]	; (136c8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   136c0:	4802      	ldr	r0, [pc, #8]	; (136cc <panic+0x10>)
   136c2:	701a      	strb	r2, [r3, #0]
   136c4:	f00b bffd 	b.w	1f6c2 <log_output_flush>
   136c8:	2000e29b 	.word	0x2000e29b
   136cc:	0002318c 	.word	0x0002318c

000136d0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   136d0:	4801      	ldr	r0, [pc, #4]	; (136d8 <dropped+0x8>)
   136d2:	f7ff bf95 	b.w	13600 <log_output_dropped_process>
   136d6:	bf00      	nop
   136d8:	0002318c 	.word	0x0002318c

000136dc <put>:
{
   136dc:	b510      	push	{r4, lr}
   136de:	460c      	mov	r4, r1
	log_msg_get(msg);
   136e0:	4608      	mov	r0, r1
   136e2:	f00b fe41 	bl	1f368 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   136e6:	4621      	mov	r1, r4
   136e8:	4804      	ldr	r0, [pc, #16]	; (136fc <put+0x20>)
   136ea:	220f      	movs	r2, #15
   136ec:	f7ff ff0c 	bl	13508 <log_output_msg_process>
	log_msg_put(msg);
   136f0:	4620      	mov	r0, r4
}
   136f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136f6:	f00b be62 	b.w	1f3be <log_msg_put>
   136fa:	bf00      	nop
   136fc:	0002318c 	.word	0x0002318c

00013700 <net_coap_init>:
 * use and should therefore not be exposed to applications.
 *
 * @return N/A
 */
void net_coap_init(void)
{
   13700:	b508      	push	{r3, lr}
   13702:	f001 f99d 	bl	14a40 <z_impl_sys_rand32_get>
	/* Initialize message_id to a random number */
	message_id = (uint16_t)sys_rand32_get();
   13706:	4b01      	ldr	r3, [pc, #4]	; (1370c <net_coap_init+0xc>)
   13708:	8018      	strh	r0, [r3, #0]
}
   1370a:	bd08      	pop	{r3, pc}
   1370c:	2000d63a 	.word	0x2000d63a

00013710 <coap_next_id>:

uint16_t coap_next_id(void)
{
	return message_id++;
   13710:	4b02      	ldr	r3, [pc, #8]	; (1371c <coap_next_id+0xc>)
   13712:	8818      	ldrh	r0, [r3, #0]
   13714:	1c42      	adds	r2, r0, #1
   13716:	801a      	strh	r2, [r3, #0]
}
   13718:	4770      	bx	lr
   1371a:	bf00      	nop
   1371c:	2000d63a 	.word	0x2000d63a

00013720 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   13720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13724:	4605      	mov	r5, r0
   13726:	460e      	mov	r6, r1
   13728:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1372a:	4c10      	ldr	r4, [pc, #64]	; (1376c <z_impl_zsock_socket+0x4c>)
   1372c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 13770 <z_impl_zsock_socket+0x50>
   13730:	4544      	cmp	r4, r8
   13732:	d307      	bcc.n	13744 <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   13734:	f00c fc06 	bl	1ff44 <__errno>
   13738:	236a      	movs	r3, #106	; 0x6a
   1373a:	6003      	str	r3, [r0, #0]
	return -1;
}
   1373c:	f04f 30ff 	mov.w	r0, #4294967295
   13740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   13744:	6823      	ldr	r3, [r4, #0]
   13746:	42ab      	cmp	r3, r5
   13748:	d000      	beq.n	1374c <z_impl_zsock_socket+0x2c>
   1374a:	b963      	cbnz	r3, 13766 <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
   1374c:	463a      	mov	r2, r7
   1374e:	4631      	mov	r1, r6
   13750:	4628      	mov	r0, r5
   13752:	6863      	ldr	r3, [r4, #4]
   13754:	4798      	blx	r3
   13756:	b130      	cbz	r0, 13766 <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
   13758:	463a      	mov	r2, r7
   1375a:	4631      	mov	r1, r6
   1375c:	4628      	mov	r0, r5
   1375e:	68a3      	ldr	r3, [r4, #8]
}
   13760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   13764:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13766:	340c      	adds	r4, #12
   13768:	e7e2      	b.n	13730 <z_impl_zsock_socket+0x10>
   1376a:	bf00      	nop
   1376c:	00022fcc 	.word	0x00022fcc
   13770:	00022fd8 	.word	0x00022fd8

00013774 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   13774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13778:	4606      	mov	r6, r0
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   1377a:	2700      	movs	r7, #0
{
   1377c:	b09b      	sub	sp, #108	; 0x6c
   1377e:	9104      	str	r1, [sp, #16]

	end = sys_clock_timeout_end_calc(timeout);
   13780:	4610      	mov	r0, r2
   13782:	4619      	mov	r1, r3
{
   13784:	461d      	mov	r5, r3
   13786:	4614      	mov	r4, r2
	end = sys_clock_timeout_end_calc(timeout);
   13788:	f00e fd73 	bl	22272 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   1378c:	46b0      	mov	r8, r6
	const struct fd_op_vtable *offl_vtable = NULL;
   1378e:	46b9      	mov	r9, r7
	end = sys_clock_timeout_end_calc(timeout);
   13790:	e9cd 0105 	strd	r0, r1, [sp, #20]
	pev = poll_events;
   13794:	ab0b      	add	r3, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
   13796:	f8dd b010 	ldr.w	fp, [sp, #16]
	pev = poll_events;
   1379a:	9308      	str	r3, [sp, #32]
	bool offload = false;
   1379c:	9703      	str	r7, [sp, #12]
	for (pfd = fds, i = nfds; i--; pfd++) {
   1379e:	f1bb 0f00 	cmp.w	fp, #0
   137a2:	d11f      	bne.n	137e4 <zsock_poll_internal+0x70>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   137a4:	9b03      	ldr	r3, [sp, #12]
   137a6:	2b00      	cmp	r3, #0
   137a8:	d063      	beq.n	13872 <zsock_poll_internal+0xfe>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   137aa:	3501      	adds	r5, #1
   137ac:	bf0b      	itete	eq
   137ae:	f1b4 3fff 	cmpeq.w	r4, #4294967295
			return (uint32_t)((t * to_hz + off) / from_hz);
   137b2:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   137b6:	f04f 33ff 	moveq.w	r3, #4294967295
   137ba:	fba4 4503 	umullne	r4, r5, r4, r3
   137be:	bf1c      	itt	ne
   137c0:	0be3      	lsrne	r3, r4, #15
   137c2:	ea43 4345 	orrne.w	r3, r3, r5, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   137c6:	9301      	str	r3, [sp, #4]
   137c8:	9b04      	ldr	r3, [sp, #16]
   137ca:	4639      	mov	r1, r7
   137cc:	9300      	str	r3, [sp, #0]
   137ce:	f44f 7282 	mov.w	r2, #260	; 0x104
   137d2:	4633      	mov	r3, r6
   137d4:	4648      	mov	r0, r9
   137d6:	f00c fa86 	bl	1fce6 <z_fdtable_call_ioctl>
   137da:	4607      	mov	r7, r0
			}
		}
	} while (retry);

	return ret;
}
   137dc:	4638      	mov	r0, r7
   137de:	b01b      	add	sp, #108	; 0x6c
   137e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   137e4:	f8d8 0000 	ldr.w	r0, [r8]
   137e8:	2800      	cmp	r0, #0
   137ea:	db3d      	blt.n	13868 <zsock_poll_internal+0xf4>
	ctx = z_get_fd_obj_and_vtable(sock,
   137ec:	aa0a      	add	r2, sp, #40	; 0x28
   137ee:	a909      	add	r1, sp, #36	; 0x24
   137f0:	f7fe fbda 	bl	11fa8 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   137f4:	9007      	str	r0, [sp, #28]
   137f6:	2800      	cmp	r0, #0
   137f8:	d036      	beq.n	13868 <zsock_poll_internal+0xf4>
		(void)k_mutex_lock(lock, K_FOREVER);
   137fa:	f04f 32ff 	mov.w	r2, #4294967295
   137fe:	f04f 33ff 	mov.w	r3, #4294967295
   13802:	980a      	ldr	r0, [sp, #40]	; 0x28
   13804:	f00c fa7e 	bl	1fd04 <k_mutex_lock.constprop.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   13808:	ab1a      	add	r3, sp, #104	; 0x68
   1380a:	9301      	str	r3, [sp, #4]
   1380c:	ab08      	add	r3, sp, #32
   1380e:	9300      	str	r3, [sp, #0]
   13810:	f44f 7281 	mov.w	r2, #258	; 0x102
   13814:	4643      	mov	r3, r8
   13816:	9907      	ldr	r1, [sp, #28]
   13818:	9809      	ldr	r0, [sp, #36]	; 0x24
   1381a:	f00c fa64 	bl	1fce6 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   1381e:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   13822:	4682      	mov	sl, r0
		if (result == -EALREADY) {
   13824:	d00e      	beq.n	13844 <zsock_poll_internal+0xd0>
		} else if (result == -EXDEV) {
   13826:	f110 0f12 	cmn.w	r0, #18
   1382a:	9907      	ldr	r1, [sp, #28]
   1382c:	d10e      	bne.n	1384c <zsock_poll_internal+0xd8>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   1382e:	f1b9 0f00 	cmp.w	r9, #0
   13832:	d102      	bne.n	1383a <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   13834:	460f      	mov	r7, r1
   13836:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
			offload = true;
   1383a:	2301      	movs	r3, #1
			result = 0;
   1383c:	f04f 0a00 	mov.w	sl, #0
			offload = true;
   13840:	9303      	str	r3, [sp, #12]
   13842:	e003      	b.n	1384c <zsock_poll_internal+0xd8>
			timeout = K_NO_WAIT;
   13844:	2400      	movs	r4, #0
   13846:	2500      	movs	r5, #0
			result = 0;
   13848:	f04f 0a00 	mov.w	sl, #0
		k_mutex_unlock(lock);
   1384c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1384e:	f00c fa48 	bl	1fce2 <k_mutex_unlock>
		if (result < 0) {
   13852:	f1ba 0f00 	cmp.w	sl, #0
   13856:	da07      	bge.n	13868 <zsock_poll_internal+0xf4>
			errno = -result;
   13858:	f00c fb74 	bl	1ff44 <__errno>
   1385c:	f1ca 0300 	rsb	r3, sl, #0
			return -1;
   13860:	f04f 37ff 	mov.w	r7, #4294967295
			errno = -ret;
   13864:	6003      	str	r3, [r0, #0]
			return -1;
   13866:	e7b9      	b.n	137dc <zsock_poll_internal+0x68>
	for (pfd = fds, i = nfds; i--; pfd++) {
   13868:	f108 0808 	add.w	r8, r8, #8
   1386c:	f10b 3bff 	add.w	fp, fp, #4294967295
   13870:	e795      	b.n	1379e <zsock_poll_internal+0x2a>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13872:	ea54 0305 	orrs.w	r3, r4, r5
   13876:	d011      	beq.n	1389c <zsock_poll_internal+0x128>
   13878:	1c6a      	adds	r2, r5, #1
   1387a:	bf08      	it	eq
   1387c:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   13880:	d00c      	beq.n	1389c <zsock_poll_internal+0x128>
		int64_t remaining = end - sys_clock_tick_get();
   13882:	f009 fe75 	bl	1d570 <sys_clock_tick_get>
   13886:	9b05      	ldr	r3, [sp, #20]
   13888:	1a1c      	subs	r4, r3, r0
   1388a:	9b06      	ldr	r3, [sp, #24]
   1388c:	eb63 0501 	sbc.w	r5, r3, r1
   13890:	2c00      	cmp	r4, #0
   13892:	f175 0300 	sbcs.w	r3, r5, #0
   13896:	bfbc      	itt	lt
   13898:	2400      	movlt	r4, #0
   1389a:	2500      	movlt	r5, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   1389c:	9908      	ldr	r1, [sp, #32]
   1389e:	af0b      	add	r7, sp, #44	; 0x2c
   138a0:	4b3e      	ldr	r3, [pc, #248]	; (1399c <zsock_poll_internal+0x228>)
   138a2:	1bc9      	subs	r1, r1, r7
   138a4:	1089      	asrs	r1, r1, #2
   138a6:	4359      	muls	r1, r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   138a8:	462b      	mov	r3, r5
   138aa:	4622      	mov	r2, r4
   138ac:	4638      	mov	r0, r7
   138ae:	f009 ff1f 	bl	1d6f0 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   138b2:	f100 030b 	add.w	r3, r0, #11
   138b6:	2b0b      	cmp	r3, #11
   138b8:	4681      	mov	r9, r0
   138ba:	d808      	bhi.n	138ce <zsock_poll_internal+0x15a>
   138bc:	f640 0881 	movw	r8, #2177	; 0x881
   138c0:	fa28 f803 	lsr.w	r8, r8, r3
   138c4:	ea6f 0808 	mvn.w	r8, r8
   138c8:	f018 0801 	ands.w	r8, r8, #1
   138cc:	d004      	beq.n	138d8 <zsock_poll_internal+0x164>
			errno = -ret;
   138ce:	f00c fb39 	bl	1ff44 <__errno>
   138d2:	f1c9 0300 	rsb	r3, r9, #0
   138d6:	e7c3      	b.n	13860 <zsock_poll_internal+0xec>
		pev = poll_events;
   138d8:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   138da:	46b1      	mov	r9, r6
		ret = 0;
   138dc:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   138de:	f8dd a010 	ldr.w	sl, [sp, #16]
   138e2:	f1ba 0f00 	cmp.w	sl, #0
   138e6:	d11b      	bne.n	13920 <zsock_poll_internal+0x1ac>
		if (retry) {
   138e8:	f1b8 0f00 	cmp.w	r8, #0
   138ec:	f43f af76 	beq.w	137dc <zsock_poll_internal+0x68>
			if (ret > 0) {
   138f0:	2f00      	cmp	r7, #0
   138f2:	f73f af73 	bgt.w	137dc <zsock_poll_internal+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   138f6:	ea54 0305 	orrs.w	r3, r4, r5
   138fa:	f43f af6f 	beq.w	137dc <zsock_poll_internal+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   138fe:	1c6b      	adds	r3, r5, #1
   13900:	bf08      	it	eq
   13902:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   13906:	d0c9      	beq.n	1389c <zsock_poll_internal+0x128>
				int64_t remaining = end - sys_clock_tick_get();
   13908:	f009 fe32 	bl	1d570 <sys_clock_tick_get>
   1390c:	9b05      	ldr	r3, [sp, #20]
   1390e:	1a1c      	subs	r4, r3, r0
   13910:	9b06      	ldr	r3, [sp, #24]
   13912:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   13916:	2c01      	cmp	r4, #1
   13918:	f175 0300 	sbcs.w	r3, r5, #0
   1391c:	dabe      	bge.n	1389c <zsock_poll_internal+0x128>
   1391e:	e75d      	b.n	137dc <zsock_poll_internal+0x68>
			pfd->revents = 0;
   13920:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   13924:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   13928:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   1392c:	2800      	cmp	r0, #0
   1392e:	db2d      	blt.n	1398c <zsock_poll_internal+0x218>
	ctx = z_get_fd_obj_and_vtable(sock,
   13930:	aa0a      	add	r2, sp, #40	; 0x28
   13932:	a909      	add	r1, sp, #36	; 0x24
   13934:	f7fe fb38 	bl	11fa8 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   13938:	4683      	mov	fp, r0
   1393a:	b920      	cbnz	r0, 13946 <zsock_poll_internal+0x1d2>
				pfd->revents = ZSOCK_POLLNVAL;
   1393c:	2320      	movs	r3, #32
   1393e:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   13942:	3701      	adds	r7, #1
   13944:	e022      	b.n	1398c <zsock_poll_internal+0x218>
			(void)k_mutex_lock(lock, K_FOREVER);
   13946:	f04f 32ff 	mov.w	r2, #4294967295
   1394a:	f04f 33ff 	mov.w	r3, #4294967295
   1394e:	980a      	ldr	r0, [sp, #40]	; 0x28
   13950:	f00c f9d8 	bl	1fd04 <k_mutex_lock.constprop.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   13954:	ab08      	add	r3, sp, #32
   13956:	4659      	mov	r1, fp
   13958:	f240 1203 	movw	r2, #259	; 0x103
   1395c:	9300      	str	r3, [sp, #0]
   1395e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13960:	464b      	mov	r3, r9
   13962:	f00c f9c0 	bl	1fce6 <z_fdtable_call_ioctl>
   13966:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   13968:	980a      	ldr	r0, [sp, #40]	; 0x28
   1396a:	f00c f9ba 	bl	1fce2 <k_mutex_unlock>
			if (result == -EAGAIN) {
   1396e:	f11b 0f0b 	cmn.w	fp, #11
   13972:	d010      	beq.n	13996 <zsock_poll_internal+0x222>
			} else if (result != 0) {
   13974:	f1bb 0f00 	cmp.w	fp, #0
   13978:	d004      	beq.n	13984 <zsock_poll_internal+0x210>
				errno = -result;
   1397a:	f00c fae3 	bl	1ff44 <__errno>
   1397e:	f1cb 0300 	rsb	r3, fp, #0
   13982:	e76d      	b.n	13860 <zsock_poll_internal+0xec>
			if (pfd->revents != 0) {
   13984:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   13988:	2b00      	cmp	r3, #0
   1398a:	d1da      	bne.n	13942 <zsock_poll_internal+0x1ce>
		for (pfd = fds, i = nfds; i--; pfd++) {
   1398c:	f109 0908 	add.w	r9, r9, #8
   13990:	f10a 3aff 	add.w	sl, sl, #4294967295
   13994:	e7a5      	b.n	138e2 <zsock_poll_internal+0x16e>
				retry = true;
   13996:	f04f 0801 	mov.w	r8, #1
   1399a:	e7f7      	b.n	1398c <zsock_poll_internal+0x218>
   1399c:	cccccccd 	.word	0xcccccccd

000139a0 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   139a0:	4b01      	ldr	r3, [pc, #4]	; (139a8 <socket_offload_dns_register+0x8>)
   139a2:	6018      	str	r0, [r3, #0]
}
   139a4:	4770      	bx	lr
   139a6:	bf00      	nop
   139a8:	2000d0c4 	.word	0x2000d0c4

000139ac <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   139ac:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   139ae:	4c03      	ldr	r4, [pc, #12]	; (139bc <socket_offload_getaddrinfo+0x10>)
   139b0:	6824      	ldr	r4, [r4, #0]
   139b2:	6824      	ldr	r4, [r4, #0]
   139b4:	46a4      	mov	ip, r4
}
   139b6:	bc10      	pop	{r4}
	return dns_offload->getaddrinfo(node, service, hints, res);
   139b8:	4760      	bx	ip
   139ba:	bf00      	nop
   139bc:	2000d0c4 	.word	0x2000d0c4

000139c0 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   139c0:	4b01      	ldr	r3, [pc, #4]	; (139c8 <socket_offload_freeaddrinfo+0x8>)
   139c2:	681b      	ldr	r3, [r3, #0]
   139c4:	685b      	ldr	r3, [r3, #4]
   139c6:	4718      	bx	r3
   139c8:	2000d0c4 	.word	0x2000d0c4

000139cc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   139cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   139d0:	4605      	mov	r5, r0
	__asm__ volatile(
   139d2:	f04f 0320 	mov.w	r3, #32
   139d6:	f3ef 8611 	mrs	r6, BASEPRI
   139da:	f383 8812 	msr	BASEPRI_MAX, r3
   139de:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   139e2:	4b10      	ldr	r3, [pc, #64]	; (13a24 <pm_state_notify+0x58>)
   139e4:	681c      	ldr	r4, [r3, #0]
   139e6:	2c00      	cmp	r4, #0
   139e8:	bf38      	it	cc
   139ea:	2400      	movcc	r4, #0
   139ec:	b19c      	cbz	r4, 13a16 <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   139ee:	f04f 090c 	mov.w	r9, #12
   139f2:	4f0d      	ldr	r7, [pc, #52]	; (13a28 <pm_state_notify+0x5c>)
   139f4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 13a2c <pm_state_notify+0x60>
			callback = notifier->state_exit;
   139f8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   139fc:	2d00      	cmp	r5, #0
   139fe:	bf08      	it	eq
   13a00:	4613      	moveq	r3, r2
		if (callback) {
   13a02:	b12b      	cbz	r3, 13a10 <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
   13a04:	f898 2014 	ldrb.w	r2, [r8, #20]
   13a08:	fb09 f202 	mul.w	r2, r9, r2
   13a0c:	5cb8      	ldrb	r0, [r7, r2]
   13a0e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13a10:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13a12:	2c00      	cmp	r4, #0
   13a14:	d1f0      	bne.n	139f8 <pm_state_notify+0x2c>
	__asm__ volatile(
   13a16:	f386 8811 	msr	BASEPRI, r6
   13a1a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13a22:	bf00      	nop
   13a24:	2000d0c8 	.word	0x2000d0c8
   13a28:	2000d0d4 	.word	0x2000d0d4
   13a2c:	2000d5d8 	.word	0x2000d5d8

00013a30 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13a30:	2201      	movs	r2, #1
   13a32:	f000 031f 	and.w	r3, r0, #31
   13a36:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13a38:	4b08      	ldr	r3, [pc, #32]	; (13a5c <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13a3a:	0940      	lsrs	r0, r0, #5
   13a3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13a40:	e8d0 3fef 	ldaex	r3, [r0]
   13a44:	ea43 0102 	orr.w	r1, r3, r2
   13a48:	e8c0 1fec 	stlex	ip, r1, [r0]
   13a4c:	f1bc 0f00 	cmp.w	ip, #0
   13a50:	d1f6      	bne.n	13a40 <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
   13a52:	421a      	tst	r2, r3
}
   13a54:	bf14      	ite	ne
   13a56:	2001      	movne	r0, #1
   13a58:	2000      	moveq	r0, #0
   13a5a:	4770      	bx	lr
   13a5c:	2000d0e0 	.word	0x2000d0e0

00013a60 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   13a60:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   13a62:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   13a64:	4b1a      	ldr	r3, [pc, #104]	; (13ad0 <pm_system_resume+0x70>)
{
   13a66:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
   13a68:	7d1d      	ldrb	r5, [r3, #20]
   13a6a:	f005 031f 	and.w	r3, r5, #31
   13a6e:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13a70:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a72:	4b18      	ldr	r3, [pc, #96]	; (13ad4 <pm_system_resume+0x74>)
   13a74:	0969      	lsrs	r1, r5, #5
   13a76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13a7a:	e8d3 1fef 	ldaex	r1, [r3]
   13a7e:	ea01 0400 	and.w	r4, r1, r0
   13a82:	e8c3 4fec 	stlex	ip, r4, [r3]
   13a86:	f1bc 0f00 	cmp.w	ip, #0
   13a8a:	d1f6      	bne.n	13a7a <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13a8c:	4211      	tst	r1, r2
   13a8e:	d017      	beq.n	13ac0 <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
   13a90:	220c      	movs	r2, #12
   13a92:	4c11      	ldr	r4, [pc, #68]	; (13ad8 <pm_system_resume+0x78>)
   13a94:	ab01      	add	r3, sp, #4
   13a96:	fb02 4205 	mla	r2, r2, r5, r4
   13a9a:	ca07      	ldmia	r2, {r0, r1, r2}
   13a9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   13aa0:	4a0e      	ldr	r2, [pc, #56]	; (13adc <pm_system_resume+0x7c>)
   13aa2:	b17a      	cbz	r2, 13ac4 <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
   13aa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13aa8:	f00b fb82 	bl	1f1b0 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   13aac:	2000      	movs	r0, #0
   13aae:	f7ff ff8d 	bl	139cc <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13ab2:	230c      	movs	r3, #12
   13ab4:	2200      	movs	r2, #0
   13ab6:	436b      	muls	r3, r5
   13ab8:	18e1      	adds	r1, r4, r3
   13aba:	50e2      	str	r2, [r4, r3]
   13abc:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   13ac0:	b005      	add	sp, #20
   13ac2:	bd30      	pop	{r4, r5, pc}
   13ac4:	f382 8811 	msr	BASEPRI, r2
   13ac8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13acc:	e7ee      	b.n	13aac <pm_system_resume+0x4c>
   13ace:	bf00      	nop
   13ad0:	2000d5d8 	.word	0x2000d5d8
   13ad4:	2000d0d0 	.word	0x2000d0d0
   13ad8:	2000d0d4 	.word	0x2000d0d4
   13adc:	0001f1b1 	.word	0x0001f1b1

00013ae0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   13ae4:	4b33      	ldr	r3, [pc, #204]	; (13bb4 <pm_system_suspend+0xd4>)
{
   13ae6:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   13ae8:	7d1c      	ldrb	r4, [r3, #20]
{
   13aea:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   13aec:	4620      	mov	r0, r4
   13aee:	f7ff ff9f 	bl	13a30 <atomic_test_and_set_bit.constprop.0>
   13af2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 13bcc <pm_system_suspend+0xec>
   13af6:	b960      	cbnz	r0, 13b12 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   13af8:	250c      	movs	r5, #12
   13afa:	466e      	mov	r6, sp
   13afc:	fb05 8504 	mla	r5, r5, r4, r8
   13b00:	463a      	mov	r2, r7
   13b02:	4621      	mov	r1, r4
   13b04:	4630      	mov	r0, r6
   13b06:	f00c f9c8 	bl	1fe9a <pm_policy_next_state>
   13b0a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13b0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   13b12:	230c      	movs	r3, #12
   13b14:	4363      	muls	r3, r4
   13b16:	f818 0003 	ldrb.w	r0, [r8, r3]
   13b1a:	eb08 0203 	add.w	r2, r8, r3
   13b1e:	0965      	lsrs	r5, r4, #5
   13b20:	f004 061f 	and.w	r6, r4, #31
   13b24:	b3a8      	cbz	r0, 13b92 <pm_system_suspend+0xb2>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   13b26:	1c7b      	adds	r3, r7, #1
   13b28:	d00f      	beq.n	13b4a <pm_system_suspend+0x6a>
   13b2a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   13b2e:	2100      	movs	r1, #0
   13b30:	f8d2 e008 	ldr.w	lr, [r2, #8]
   13b34:	4820      	ldr	r0, [pc, #128]	; (13bb8 <pm_system_suspend+0xd8>)
   13b36:	2300      	movs	r3, #0
   13b38:	fbec 010e 	umlal	r0, r1, ip, lr
   13b3c:	4a1f      	ldr	r2, [pc, #124]	; (13bbc <pm_system_suspend+0xdc>)
   13b3e:	f7fd f9af 	bl	10ea0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13b42:	2101      	movs	r1, #1
   13b44:	1a38      	subs	r0, r7, r0
   13b46:	f00e fb70 	bl	2222a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13b4a:	f009 f891 	bl	1cc70 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   13b4e:	2001      	movs	r0, #1
   13b50:	f7ff ff3c 	bl	139cc <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13b54:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13b56:	4b1a      	ldr	r3, [pc, #104]	; (13bc0 <pm_system_suspend+0xe0>)
   13b58:	40b2      	lsls	r2, r6
   13b5a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   13b5e:	e8d3 1fef 	ldaex	r1, [r3]
   13b62:	4311      	orrs	r1, r2
   13b64:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13b68:	2800      	cmp	r0, #0
   13b6a:	d1f8      	bne.n	13b5e <pm_system_suspend+0x7e>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   13b6c:	230c      	movs	r3, #12
   13b6e:	fb03 8404 	mla	r4, r3, r4, r8
   13b72:	ab05      	add	r3, sp, #20
   13b74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   13b78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   13b7c:	4a11      	ldr	r2, [pc, #68]	; (13bc4 <pm_system_suspend+0xe4>)
   13b7e:	b11a      	cbz	r2, 13b88 <pm_system_suspend+0xa8>
		pm_power_state_set(info);
   13b80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13b84:	f00b fb01 	bl	1f18a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   13b88:	f7ff ff6a 	bl	13a60 <pm_system_resume>
	k_sched_unlock();
   13b8c:	f009 fa4a 	bl	1d024 <k_sched_unlock>
	bool ret = true;
   13b90:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   13b92:	2301      	movs	r3, #1
   13b94:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b96:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13b98:	4a0b      	ldr	r2, [pc, #44]	; (13bc8 <pm_system_suspend+0xe8>)
   13b9a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   13b9e:	e8d5 2fef 	ldaex	r2, [r5]
   13ba2:	401a      	ands	r2, r3
   13ba4:	e8c5 2fe1 	stlex	r1, r2, [r5]
   13ba8:	2900      	cmp	r1, #0
   13baa:	d1f8      	bne.n	13b9e <pm_system_suspend+0xbe>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   13bac:	b008      	add	sp, #32
   13bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bb2:	bf00      	nop
   13bb4:	2000d5d8 	.word	0x2000d5d8
   13bb8:	000f423f 	.word	0x000f423f
   13bbc:	000f4240 	.word	0x000f4240
   13bc0:	2000d0d0 	.word	0x2000d0d0
   13bc4:	0001f18b 	.word	0x0001f18b
   13bc8:	2000d0e0 	.word	0x2000d0e0
   13bcc:	2000d0d4 	.word	0x2000d0d4

00013bd0 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   13bd0:	b508      	push	{r3, lr}
	k_sched_lock();
   13bd2:	f009 f84d 	bl	1cc70 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   13bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   13bda:	4801      	ldr	r0, [pc, #4]	; (13be0 <before_nse+0x10>)
   13bdc:	f00c b981 	b.w	1fee2 <z_arm_save_fp_context>
   13be0:	2000d0e4 	.word	0x2000d0e4

00013be4 <after_nse>:

void after_nse(void)
{
   13be4:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   13be6:	4803      	ldr	r0, [pc, #12]	; (13bf4 <after_nse+0x10>)
   13be8:	f00c f97c 	bl	1fee4 <z_arm_restore_fp_context>
	k_sched_unlock();
}
   13bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_sched_unlock();
   13bf0:	f009 ba18 	b.w	1d024 <k_sched_unlock>
   13bf4:	2000d0e4 	.word	0x2000d0e4

00013bf8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13bf8:	4901      	ldr	r1, [pc, #4]	; (13c00 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13bfa:	2210      	movs	r2, #16
	str	r2, [r1]
   13bfc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13bfe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13c00:	e000ed10 	.word	0xe000ed10

00013c04 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13c04:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13c06:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13c08:	f380 8811 	msr	BASEPRI, r0
	isb
   13c0c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13c10:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13c14:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13c16:	b662      	cpsie	i
	isb
   13c18:	f3bf 8f6f 	isb	sy

	bx	lr
   13c1c:	4770      	bx	lr
   13c1e:	bf00      	nop

00013c20 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13c20:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13c22:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13c24:	f381 8811 	msr	BASEPRI, r1

	wfe
   13c28:	bf20      	wfe

	msr	BASEPRI, r0
   13c2a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13c2e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13c30:	4770      	bx	lr
   13c32:	bf00      	nop

00013c34 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13c36:	4606      	mov	r6, r0

	if (esf != NULL) {
   13c38:	460c      	mov	r4, r1
   13c3a:	b301      	cbz	r1, 13c7e <z_arm_fatal_error+0x4a>
   13c3c:	4b13      	ldr	r3, [pc, #76]	; (13c8c <z_arm_fatal_error+0x58>)
   13c3e:	4d14      	ldr	r5, [pc, #80]	; (13c90 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13c40:	4814      	ldr	r0, [pc, #80]	; (13c94 <z_arm_fatal_error+0x60>)
   13c42:	1aed      	subs	r5, r5, r3
   13c44:	08ed      	lsrs	r5, r5, #3
   13c46:	01ad      	lsls	r5, r5, #6
   13c48:	f045 0501 	orr.w	r5, r5, #1
   13c4c:	f8ad 5000 	strh.w	r5, [sp]
   13c50:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   13c54:	6809      	ldr	r1, [r1, #0]
   13c56:	f00b fb13 	bl	1f280 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13c5a:	f8ad 5000 	strh.w	r5, [sp]
   13c5e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13c62:	68e1      	ldr	r1, [r4, #12]
   13c64:	480c      	ldr	r0, [pc, #48]	; (13c98 <z_arm_fatal_error+0x64>)
   13c66:	f00b fb0b 	bl	1f280 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13c6a:	462a      	mov	r2, r5
   13c6c:	69e1      	ldr	r1, [r4, #28]
   13c6e:	480b      	ldr	r0, [pc, #44]	; (13c9c <z_arm_fatal_error+0x68>)
   13c70:	f00b fad9 	bl	1f226 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13c74:	462a      	mov	r2, r5
   13c76:	69a1      	ldr	r1, [r4, #24]
   13c78:	4809      	ldr	r0, [pc, #36]	; (13ca0 <z_arm_fatal_error+0x6c>)
   13c7a:	f00b fad4 	bl	1f226 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13c7e:	4621      	mov	r1, r4
   13c80:	4630      	mov	r0, r6
}
   13c82:	b002      	add	sp, #8
   13c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   13c88:	f008 ba96 	b.w	1c1b8 <z_fatal_error>
   13c8c:	00022fd8 	.word	0x00022fd8
   13c90:	00023060 	.word	0x00023060
   13c94:	00023792 	.word	0x00023792
   13c98:	000237c1 	.word	0x000237c1
   13c9c:	000237f0 	.word	0x000237f0
   13ca0:	000237ff 	.word	0x000237ff

00013ca4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13ca4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13ca6:	2b00      	cmp	r3, #0
   13ca8:	db08      	blt.n	13cbc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13caa:	2201      	movs	r2, #1
   13cac:	f000 001f 	and.w	r0, r0, #31
   13cb0:	fa02 f000 	lsl.w	r0, r2, r0
   13cb4:	4a02      	ldr	r2, [pc, #8]	; (13cc0 <arch_irq_enable+0x1c>)
   13cb6:	095b      	lsrs	r3, r3, #5
   13cb8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13cbc:	4770      	bx	lr
   13cbe:	bf00      	nop
   13cc0:	e000e100 	.word	0xe000e100

00013cc4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13cc4:	4b05      	ldr	r3, [pc, #20]	; (13cdc <arch_irq_is_enabled+0x18>)
   13cc6:	0942      	lsrs	r2, r0, #5
   13cc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13ccc:	2301      	movs	r3, #1
   13cce:	f000 001f 	and.w	r0, r0, #31
   13cd2:	fa03 f000 	lsl.w	r0, r3, r0
}
   13cd6:	4010      	ands	r0, r2
   13cd8:	4770      	bx	lr
   13cda:	bf00      	nop
   13cdc:	e000e100 	.word	0xe000e100

00013ce0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13ce0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13ce2:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
   13ce4:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13ce8:	bfac      	ite	ge
   13cea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13cee:	4b06      	ldrlt	r3, [pc, #24]	; (13d08 <z_arm_irq_priority_set+0x28>)
   13cf0:	ea4f 1141 	mov.w	r1, r1, lsl #5
   13cf4:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13cf6:	bfab      	itete	ge
   13cf8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13cfc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d00:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d04:	5419      	strblt	r1, [r3, r0]
}
   13d06:	4770      	bx	lr
   13d08:	e000ed14 	.word	0xe000ed14

00013d0c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13d0c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13d0e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13d10:	4b04      	ldr	r3, [pc, #16]	; (13d24 <_arch_isr_direct_pm+0x18>)
   13d12:	699a      	ldr	r2, [r3, #24]
   13d14:	b11a      	cbz	r2, 13d1e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   13d16:	2200      	movs	r2, #0
   13d18:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13d1a:	f00e f851 	bl	21dc0 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13d1e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13d20:	bd08      	pop	{r3, pc}
   13d22:	bf00      	nop
   13d24:	2000d5d8 	.word	0x2000d5d8

00013d28 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13d28:	bf30      	wfi
    b z_SysNmiOnReset
   13d2a:	f7ff bffd 	b.w	13d28 <z_SysNmiOnReset>
   13d2e:	bf00      	nop

00013d30 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13d30:	4a0f      	ldr	r2, [pc, #60]	; (13d70 <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13d32:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13d34:	4b0f      	ldr	r3, [pc, #60]	; (13d74 <z_arm_prep_c+0x44>)
   13d36:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13d3a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13d40:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13d44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13d48:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   13d50:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13d54:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   13d58:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   13d5c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13d60:	f008 fad0 	bl	1c304 <z_bss_zero>
	z_data_copy();
   13d64:	f009 faa8 	bl	1d2b8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13d68:	f000 fb0a 	bl	14380 <z_arm_interrupt_init>
	z_cstart();
   13d6c:	f008 fad4 	bl	1c318 <z_cstart>
   13d70:	00010000 	.word	0x00010000
   13d74:	e000ed00 	.word	0xe000ed00

00013d78 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13d78:	4a0a      	ldr	r2, [pc, #40]	; (13da4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   13d7a:	490b      	ldr	r1, [pc, #44]	; (13da8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13d7c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13d7e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   13d80:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
   13d84:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13d88:	4908      	ldr	r1, [pc, #32]	; (13dac <arch_swap+0x34>)
   13d8a:	684b      	ldr	r3, [r1, #4]
   13d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13d90:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   13d92:	2300      	movs	r3, #0
   13d94:	f383 8811 	msr	BASEPRI, r3
   13d98:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13d9c:	6893      	ldr	r3, [r2, #8]
}
   13d9e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   13da2:	4770      	bx	lr
   13da4:	2000d5d8 	.word	0x2000d5d8
   13da8:	000234d8 	.word	0x000234d8
   13dac:	e000ed00 	.word	0xe000ed00

00013db0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13db0:	4914      	ldr	r1, [pc, #80]	; (13e04 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13db2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13db4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13db8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13dba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13dbe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13dc2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   13dc4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13dc8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13dcc:	4f0e      	ldr	r7, [pc, #56]	; (13e08 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13dce:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13dd2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13dd4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13dd6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13dd8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
   13ddc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13dde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13de2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13de6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13dea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13dee:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   13df2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   13df6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   13df8:	f00c f86f 	bl	1feda <configure_builtin_stack_guard>
    pop {r2, lr}
   13dfc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13e00:	4770      	bx	lr
   13e02:	0000      	.short	0x0000
    ldr r1, =_kernel
   13e04:	2000d5d8 	.word	0x2000d5d8
    ldr v4, =_SCS_ICSR
   13e08:	e000ed04 	.word	0xe000ed04

00013e0c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13e0c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13e10:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13e12:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13e16:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13e1a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13e1c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13e20:	2902      	cmp	r1, #2
    beq _oops
   13e22:	d0ff      	beq.n	13e24 <_oops>

00013e24 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13e24:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   13e26:	f00c f849 	bl	1febc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   13e2a:	bd01      	pop	{r0, pc}

00013e2c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13e2c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13e30:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   13e32:	490b      	ldr	r1, [pc, #44]	; (13e60 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   13e34:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   13e38:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   13e3a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   13e3e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13e42:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   13e44:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   13e48:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13e50:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13e54:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13e56:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   13e58:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13e5a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13e5e:	4770      	bx	lr
   13e60:	0001edbf 	.word	0x0001edbf

00013e64 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13e64:	4b08      	ldr	r3, [pc, #32]	; (13e88 <arch_switch_to_main_thread+0x24>)
   13e66:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   13e68:	6f43      	ldr	r3, [r0, #116]	; 0x74
   13e6a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13e6e:	4610      	mov	r0, r2
   13e70:	f381 8809 	msr	PSP, r1
   13e74:	2100      	movs	r1, #0
   13e76:	b663      	cpsie	if
   13e78:	f381 8811 	msr	BASEPRI, r1
   13e7c:	f3bf 8f6f 	isb	sy
   13e80:	2200      	movs	r2, #0
   13e82:	2300      	movs	r3, #0
   13e84:	f00a ff9b 	bl	1edbe <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13e88:	2000d5d8 	.word	0x2000d5d8

00013e8c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13e8c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13e8e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13e90:	4a0b      	ldr	r2, [pc, #44]	; (13ec0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13e92:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13e94:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13e96:	bf1e      	ittt	ne
	movne	r1, #0
   13e98:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13e9a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13e9c:	f00d ff90 	blne	21dc0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13ea0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13ea2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13ea6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13eaa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13eae:	4905      	ldr	r1, [pc, #20]	; (13ec4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13eb0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13eb2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13eb4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13eb6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13eba:	4903      	ldr	r1, [pc, #12]	; (13ec8 <_isr_wrapper+0x3c>)
	bx r1
   13ebc:	4708      	bx	r1
   13ebe:	0000      	.short	0x0000
	ldr r2, =_kernel
   13ec0:	2000d5d8 	.word	0x2000d5d8
	ldr r1, =_sw_isr_table
   13ec4:	00022dc4 	.word	0x00022dc4
	ldr r1, =z_arm_int_exit
   13ec8:	00013ecd 	.word	0x00013ecd

00013ecc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13ecc:	4b04      	ldr	r3, [pc, #16]	; (13ee0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13ece:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13ed0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13ed2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13ed4:	d003      	beq.n	13ede <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13ed6:	4903      	ldr	r1, [pc, #12]	; (13ee4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13edc:	600a      	str	r2, [r1, #0]

00013ede <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13ede:	4770      	bx	lr
	ldr r3, =_kernel
   13ee0:	2000d5d8 	.word	0x2000d5d8
	ldr r1, =_SCS_ICSR
   13ee4:	e000ed04 	.word	0xe000ed04

00013ee8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   13ee8:	b570      	push	{r4, r5, r6, lr}
   13eea:	4b28      	ldr	r3, [pc, #160]	; (13f8c <usage_fault.isra.0+0xa4>)
   13eec:	4c28      	ldr	r4, [pc, #160]	; (13f90 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13eee:	4d29      	ldr	r5, [pc, #164]	; (13f94 <usage_fault.isra.0+0xac>)
   13ef0:	1ae4      	subs	r4, r4, r3
   13ef2:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   13ef4:	01a4      	lsls	r4, r4, #6
   13ef6:	f044 0601 	orr.w	r6, r4, #1
   13efa:	4631      	mov	r1, r6
   13efc:	4826      	ldr	r0, [pc, #152]	; (13f98 <usage_fault.isra.0+0xb0>)
   13efe:	f00b f985 	bl	1f20c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13f02:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13f04:	0193      	lsls	r3, r2, #6
   13f06:	d503      	bpl.n	13f10 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   13f08:	4631      	mov	r1, r6
   13f0a:	4824      	ldr	r0, [pc, #144]	; (13f9c <usage_fault.isra.0+0xb4>)
   13f0c:	f00b f97e 	bl	1f20c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13f10:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f12:	01dd      	lsls	r5, r3, #7
   13f14:	d504      	bpl.n	13f20 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   13f16:	4822      	ldr	r0, [pc, #136]	; (13fa0 <usage_fault.isra.0+0xb8>)
   13f18:	f044 0101 	orr.w	r1, r4, #1
   13f1c:	f00b f976 	bl	1f20c <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   13f20:	4d1c      	ldr	r5, [pc, #112]	; (13f94 <usage_fault.isra.0+0xac>)
   13f22:	6aae      	ldr	r6, [r5, #40]	; 0x28
   13f24:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   13f28:	d005      	beq.n	13f36 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   13f2a:	481e      	ldr	r0, [pc, #120]	; (13fa4 <usage_fault.isra.0+0xbc>)
   13f2c:	f044 0101 	orr.w	r1, r4, #1
   13f30:	f00b f96c 	bl	1f20c <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   13f34:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13f36:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f38:	0318      	lsls	r0, r3, #12
   13f3a:	d504      	bpl.n	13f46 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   13f3c:	481a      	ldr	r0, [pc, #104]	; (13fa8 <usage_fault.isra.0+0xc0>)
   13f3e:	f044 0101 	orr.w	r1, r4, #1
   13f42:	f00b f963 	bl	1f20c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13f46:	4d13      	ldr	r5, [pc, #76]	; (13f94 <usage_fault.isra.0+0xac>)
   13f48:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13f4a:	0351      	lsls	r1, r2, #13
   13f4c:	d504      	bpl.n	13f58 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13f4e:	4817      	ldr	r0, [pc, #92]	; (13fac <usage_fault.isra.0+0xc4>)
   13f50:	f044 0101 	orr.w	r1, r4, #1
   13f54:	f00b f95a 	bl	1f20c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13f58:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f5a:	039a      	lsls	r2, r3, #14
   13f5c:	d504      	bpl.n	13f68 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13f5e:	4814      	ldr	r0, [pc, #80]	; (13fb0 <usage_fault.isra.0+0xc8>)
   13f60:	f044 0101 	orr.w	r1, r4, #1
   13f64:	f00b f952 	bl	1f20c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13f68:	4d0a      	ldr	r5, [pc, #40]	; (13f94 <usage_fault.isra.0+0xac>)
   13f6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f6c:	03db      	lsls	r3, r3, #15
   13f6e:	d504      	bpl.n	13f7a <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13f70:	4810      	ldr	r0, [pc, #64]	; (13fb4 <usage_fault.isra.0+0xcc>)
   13f72:	f044 0101 	orr.w	r1, r4, #1
   13f76:	f00b f949 	bl	1f20c <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13f7a:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   13f7c:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13f7e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13f82:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13f86:	62ab      	str	r3, [r5, #40]	; 0x28
}
   13f88:	bd70      	pop	{r4, r5, r6, pc}
   13f8a:	bf00      	nop
   13f8c:	00022fd8 	.word	0x00022fd8
   13f90:	00023060 	.word	0x00023060
   13f94:	e000ed00 	.word	0xe000ed00
   13f98:	0002382d 	.word	0x0002382d
   13f9c:	00023845 	.word	0x00023845
   13fa0:	00023858 	.word	0x00023858
   13fa4:	00023872 	.word	0x00023872
   13fa8:	0002389c 	.word	0x0002389c
   13fac:	000238ba 	.word	0x000238ba
   13fb0:	000238df 	.word	0x000238df
   13fb4:	000238f9 	.word	0x000238f9

00013fb8 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fbc:	4b28      	ldr	r3, [pc, #160]	; (14060 <mem_manage_fault.isra.0+0xa8>)
   13fbe:	4c29      	ldr	r4, [pc, #164]	; (14064 <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13fc0:	4d29      	ldr	r5, [pc, #164]	; (14068 <mem_manage_fault.isra.0+0xb0>)
   13fc2:	1ae4      	subs	r4, r4, r3
   13fc4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   13fc6:	01a4      	lsls	r4, r4, #6
   13fc8:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13fcc:	4607      	mov	r7, r0
   13fce:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   13fd0:	4826      	ldr	r0, [pc, #152]	; (1406c <mem_manage_fault.isra.0+0xb4>)
   13fd2:	4641      	mov	r1, r8
   13fd4:	f00b f91a 	bl	1f20c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13fd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13fda:	06d0      	lsls	r0, r2, #27
   13fdc:	d503      	bpl.n	13fe6 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13fde:	4641      	mov	r1, r8
   13fe0:	4823      	ldr	r0, [pc, #140]	; (14070 <mem_manage_fault.isra.0+0xb8>)
   13fe2:	f00b f913 	bl	1f20c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13fe6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13fe8:	0719      	lsls	r1, r3, #28
   13fea:	d504      	bpl.n	13ff6 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13fec:	4821      	ldr	r0, [pc, #132]	; (14074 <mem_manage_fault.isra.0+0xbc>)
   13fee:	f044 0101 	orr.w	r1, r4, #1
   13ff2:	f00b f90b 	bl	1f20c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13ff6:	4d1c      	ldr	r5, [pc, #112]	; (14068 <mem_manage_fault.isra.0+0xb0>)
   13ff8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ffa:	079a      	lsls	r2, r3, #30
   13ffc:	d512      	bpl.n	14024 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   13ffe:	f044 0801 	orr.w	r8, r4, #1
   14002:	4641      	mov	r1, r8
   14004:	481c      	ldr	r0, [pc, #112]	; (14078 <mem_manage_fault.isra.0+0xc0>)
   14006:	f00b f901 	bl	1f20c <log_0>
		uint32_t temp = SCB->MMFAR;
   1400a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1400c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1400e:	061b      	lsls	r3, r3, #24
   14010:	d508      	bpl.n	14024 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14012:	4642      	mov	r2, r8
   14014:	4819      	ldr	r0, [pc, #100]	; (1407c <mem_manage_fault.isra.0+0xc4>)
   14016:	f00b f906 	bl	1f226 <log_1>
			if (from_hard_fault != 0) {
   1401a:	b11f      	cbz	r7, 14024 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1401c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1401e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14022:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14024:	4d10      	ldr	r5, [pc, #64]	; (14068 <mem_manage_fault.isra.0+0xb0>)
   14026:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14028:	07d0      	lsls	r0, r2, #31
   1402a:	d504      	bpl.n	14036 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   1402c:	4814      	ldr	r0, [pc, #80]	; (14080 <mem_manage_fault.isra.0+0xc8>)
   1402e:	f044 0101 	orr.w	r1, r4, #1
   14032:	f00b f8eb 	bl	1f20c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14036:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14038:	0699      	lsls	r1, r3, #26
   1403a:	d504      	bpl.n	14046 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   1403c:	4811      	ldr	r0, [pc, #68]	; (14084 <mem_manage_fault.isra.0+0xcc>)
   1403e:	f044 0101 	orr.w	r1, r4, #1
   14042:	f00b f8e3 	bl	1f20c <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   14046:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14048:	4b07      	ldr	r3, [pc, #28]	; (14068 <mem_manage_fault.isra.0+0xb0>)
   1404a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1404c:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1404e:	bf58      	it	pl
   14050:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14054:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   14058:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1405a:	7030      	strb	r0, [r6, #0]
}
   1405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14060:	00022fd8 	.word	0x00022fd8
   14064:	00023060 	.word	0x00023060
   14068:	e000ed00 	.word	0xe000ed00
   1406c:	00023924 	.word	0x00023924
   14070:	0002393a 	.word	0x0002393a
   14074:	0002396d 	.word	0x0002396d
   14078:	00023980 	.word	0x00023980
   1407c:	00023998 	.word	0x00023998
   14080:	000239ae 	.word	0x000239ae
   14084:	000239cd 	.word	0x000239cd

00014088 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1408c:	4b2a      	ldr	r3, [pc, #168]	; (14138 <bus_fault.isra.0+0xb0>)
   1408e:	4c2b      	ldr	r4, [pc, #172]	; (1413c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14090:	4d2b      	ldr	r5, [pc, #172]	; (14140 <bus_fault.isra.0+0xb8>)
   14092:	1ae4      	subs	r4, r4, r3
   14094:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   14096:	01a4      	lsls	r4, r4, #6
   14098:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1409c:	4607      	mov	r7, r0
   1409e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   140a0:	4828      	ldr	r0, [pc, #160]	; (14144 <bus_fault.isra.0+0xbc>)
   140a2:	4641      	mov	r1, r8
   140a4:	f00b f8b2 	bl	1f20c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   140a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   140aa:	04d1      	lsls	r1, r2, #19
   140ac:	d503      	bpl.n	140b6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   140ae:	4641      	mov	r1, r8
   140b0:	4825      	ldr	r0, [pc, #148]	; (14148 <bus_fault.isra.0+0xc0>)
   140b2:	f00b f8ab 	bl	1f20c <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   140b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   140b8:	051a      	lsls	r2, r3, #20
   140ba:	d504      	bpl.n	140c6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   140bc:	4823      	ldr	r0, [pc, #140]	; (1414c <bus_fault.isra.0+0xc4>)
   140be:	f044 0101 	orr.w	r1, r4, #1
   140c2:	f00b f8a3 	bl	1f20c <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   140c6:	4d1e      	ldr	r5, [pc, #120]	; (14140 <bus_fault.isra.0+0xb8>)
   140c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   140ca:	059b      	lsls	r3, r3, #22
   140cc:	d512      	bpl.n	140f4 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   140ce:	f044 0801 	orr.w	r8, r4, #1
   140d2:	4641      	mov	r1, r8
   140d4:	481e      	ldr	r0, [pc, #120]	; (14150 <bus_fault.isra.0+0xc8>)
   140d6:	f00b f899 	bl	1f20c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   140da:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   140dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   140de:	0418      	lsls	r0, r3, #16
   140e0:	d508      	bpl.n	140f4 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   140e2:	4642      	mov	r2, r8
   140e4:	481b      	ldr	r0, [pc, #108]	; (14154 <bus_fault.isra.0+0xcc>)
   140e6:	f00b f89e 	bl	1f226 <log_1>
			if (from_hard_fault != 0) {
   140ea:	b11f      	cbz	r7, 140f4 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   140ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
   140ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   140f2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   140f4:	4d12      	ldr	r5, [pc, #72]	; (14140 <bus_fault.isra.0+0xb8>)
   140f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   140f8:	0559      	lsls	r1, r3, #21
   140fa:	d504      	bpl.n	14106 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   140fc:	4816      	ldr	r0, [pc, #88]	; (14158 <bus_fault.isra.0+0xd0>)
   140fe:	f044 0101 	orr.w	r1, r4, #1
   14102:	f00b f883 	bl	1f20c <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14106:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14108:	05da      	lsls	r2, r3, #23
   1410a:	d50d      	bpl.n	14128 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   1410c:	4813      	ldr	r0, [pc, #76]	; (1415c <bus_fault.isra.0+0xd4>)
   1410e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14112:	f00b f87b 	bl	1f20c <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   14116:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14118:	4a09      	ldr	r2, [pc, #36]	; (14140 <bus_fault.isra.0+0xb8>)
   1411a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1411c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14120:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14122:	7030      	strb	r0, [r6, #0]
}
   14124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14128:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1412a:	049b      	lsls	r3, r3, #18
   1412c:	d5f3      	bpl.n	14116 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1412e:	480c      	ldr	r0, [pc, #48]	; (14160 <bus_fault.isra.0+0xd8>)
   14130:	f044 0101 	orr.w	r1, r4, #1
   14134:	e7ed      	b.n	14112 <bus_fault.isra.0+0x8a>
   14136:	bf00      	nop
   14138:	00022fd8 	.word	0x00022fd8
   1413c:	00023060 	.word	0x00023060
   14140:	e000ed00 	.word	0xe000ed00
   14144:	000239fc 	.word	0x000239fc
   14148:	00023a12 	.word	0x00023a12
   1414c:	0002396d 	.word	0x0002396d
   14150:	00023a23 	.word	0x00023a23
   14154:	00023a3c 	.word	0x00023a3c
   14158:	00023a51 	.word	0x00023a51
   1415c:	00023a6c 	.word	0x00023a6c
   14160:	000239cd 	.word	0x000239cd

00014164 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14168:	4b6b      	ldr	r3, [pc, #428]	; (14318 <z_arm_fault+0x1b4>)
{
   1416a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1416c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   14170:	4689      	mov	r9, r1
   14172:	4614      	mov	r4, r2
   14174:	2700      	movs	r7, #0
   14176:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14178:	f3c8 0608 	ubfx	r6, r8, #0, #9
   1417c:	f387 8811 	msr	BASEPRI, r7
   14180:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14184:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14188:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1418c:	d124      	bne.n	141d8 <z_arm_fault+0x74>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1418e:	07d0      	lsls	r0, r2, #31
   14190:	d422      	bmi.n	141d8 <z_arm_fault+0x74>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   14192:	0651      	lsls	r1, r2, #25
   14194:	d403      	bmi.n	1419e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14196:	0722      	lsls	r2, r4, #28
   14198:	d40e      	bmi.n	141b8 <z_arm_fault+0x54>
			*nested_exc = true;
   1419a:	2701      	movs	r7, #1
   1419c:	e00e      	b.n	141bc <z_arm_fault+0x58>
   1419e:	495f      	ldr	r1, [pc, #380]	; (1431c <z_arm_fault+0x1b8>)
   141a0:	4b5f      	ldr	r3, [pc, #380]	; (14320 <z_arm_fault+0x1bc>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   141a2:	4860      	ldr	r0, [pc, #384]	; (14324 <z_arm_fault+0x1c0>)
   141a4:	1a5b      	subs	r3, r3, r1
   141a6:	08db      	lsrs	r3, r3, #3
   141a8:	019b      	lsls	r3, r3, #6
   141aa:	f043 0101 	orr.w	r1, r3, #1
   141ae:	f00b f82d 	bl	1f20c <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   141b2:	f014 0704 	ands.w	r7, r4, #4
   141b6:	d001      	beq.n	141bc <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   141b8:	464d      	mov	r5, r9
	*nested_exc = false;
   141ba:	2700      	movs	r7, #0
	*recoverable = false;
   141bc:	2300      	movs	r3, #0
   141be:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   141c2:	1ef3      	subs	r3, r6, #3
   141c4:	2b09      	cmp	r3, #9
   141c6:	f200 808e 	bhi.w	142e6 <z_arm_fault+0x182>
   141ca:	e8df f003 	tbb	[pc, r3]
   141ce:	7b07      	.short	0x7b07
   141d0:	8c8c787f 	.word	0x8c8c787f
   141d4:	838c8c8c 	.word	0x838c8c8c
		return NULL;
   141d8:	463d      	mov	r5, r7
   141da:	e7ef      	b.n	141bc <z_arm_fault+0x58>
	*recoverable = false;
   141dc:	f04f 0800 	mov.w	r8, #0
   141e0:	4a4e      	ldr	r2, [pc, #312]	; (1431c <z_arm_fault+0x1b8>)
   141e2:	4e4f      	ldr	r6, [pc, #316]	; (14320 <z_arm_fault+0x1bc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   141e4:	4850      	ldr	r0, [pc, #320]	; (14328 <z_arm_fault+0x1c4>)
   141e6:	1ab6      	subs	r6, r6, r2
   141e8:	08f6      	lsrs	r6, r6, #3
   141ea:	01b6      	lsls	r6, r6, #6
   141ec:	f046 0601 	orr.w	r6, r6, #1
   141f0:	4631      	mov	r1, r6
   141f2:	f00b f80b 	bl	1f20c <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   141f6:	4b48      	ldr	r3, [pc, #288]	; (14318 <z_arm_fault+0x1b4>)
	*recoverable = false;
   141f8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   141fc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   141fe:	f014 0402 	ands.w	r4, r4, #2
   14202:	d005      	beq.n	14210 <z_arm_fault+0xac>
		PR_EXC("  Bus fault on vector table read");
   14204:	4631      	mov	r1, r6
   14206:	4849      	ldr	r0, [pc, #292]	; (1432c <z_arm_fault+0x1c8>)
	PR_FAULT_INFO(
   14208:	f00b f800 	bl	1f20c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1420c:	2400      	movs	r4, #0
}
   1420e:	e006      	b.n	1421e <z_arm_fault+0xba>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14212:	2a00      	cmp	r2, #0
   14214:	da23      	bge.n	1425e <z_arm_fault+0xfa>
		PR_EXC("  Debug event");
   14216:	4631      	mov	r1, r6
   14218:	4845      	ldr	r0, [pc, #276]	; (14330 <z_arm_fault+0x1cc>)
   1421a:	f00a fff7 	bl	1f20c <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1421e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14222:	b9cb      	cbnz	r3, 14258 <z_arm_fault+0xf4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14224:	aa02      	add	r2, sp, #8
   14226:	f105 0620 	add.w	r6, r5, #32
   1422a:	4613      	mov	r3, r2
   1422c:	6828      	ldr	r0, [r5, #0]
   1422e:	6869      	ldr	r1, [r5, #4]
   14230:	3508      	adds	r5, #8
   14232:	c303      	stmia	r3!, {r0, r1}
   14234:	42b5      	cmp	r5, r6
   14236:	461a      	mov	r2, r3
   14238:	d1f7      	bne.n	1422a <z_arm_fault+0xc6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1423a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1423c:	2f00      	cmp	r7, #0
   1423e:	d066      	beq.n	1430e <z_arm_fault+0x1aa>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14240:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14244:	b922      	cbnz	r2, 14250 <z_arm_fault+0xec>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14246:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1424a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1424e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14250:	4620      	mov	r0, r4
   14252:	a902      	add	r1, sp, #8
   14254:	f7ff fcee 	bl	13c34 <z_arm_fatal_error>
}
   14258:	b00b      	add	sp, #44	; 0x2c
   1425a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14260:	005b      	lsls	r3, r3, #1
   14262:	d5dc      	bpl.n	1421e <z_arm_fault+0xba>
		PR_EXC("  Fault escalation (see below)");
   14264:	4631      	mov	r1, r6
   14266:	4833      	ldr	r0, [pc, #204]	; (14334 <z_arm_fault+0x1d0>)
   14268:	f00a ffd0 	bl	1f20c <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   1426c:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1426e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   14272:	f64d 7302 	movw	r3, #57090	; 0xdf02
   14276:	429a      	cmp	r2, r3
   14278:	d00c      	beq.n	14294 <z_arm_fault+0x130>
		} else if (SCB_MMFSR != 0) {
   1427a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1427e:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   14282:	781b      	ldrb	r3, [r3, #0]
   14284:	b16b      	cbz	r3, 142a2 <z_arm_fault+0x13e>
			reason = mem_manage_fault(esf, 1, recoverable);
   14286:	2001      	movs	r0, #1
   14288:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1428c:	f7ff fe94 	bl	13fb8 <mem_manage_fault.isra.0>
   14290:	4604      	mov	r4, r0
		break;
   14292:	e7c4      	b.n	1421e <z_arm_fault+0xba>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   14294:	4632      	mov	r2, r6
   14296:	6829      	ldr	r1, [r5, #0]
   14298:	4827      	ldr	r0, [pc, #156]	; (14338 <z_arm_fault+0x1d4>)
   1429a:	f00a ffc4 	bl	1f226 <log_1>
			reason = esf->basic.r0;
   1429e:	682c      	ldr	r4, [r5, #0]
   142a0:	e7bd      	b.n	1421e <z_arm_fault+0xba>
		} else if (SCB_BFSR != 0) {
   142a2:	4b26      	ldr	r3, [pc, #152]	; (1433c <z_arm_fault+0x1d8>)
   142a4:	781b      	ldrb	r3, [r3, #0]
   142a6:	b12b      	cbz	r3, 142b4 <z_arm_fault+0x150>
			reason = bus_fault(esf, 1, recoverable);
   142a8:	2001      	movs	r0, #1
   142aa:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   142ae:	f7ff feeb 	bl	14088 <bus_fault.isra.0>
   142b2:	e7ed      	b.n	14290 <z_arm_fault+0x12c>
		} else if (SCB_UFSR != 0) {
   142b4:	4b22      	ldr	r3, [pc, #136]	; (14340 <z_arm_fault+0x1dc>)
   142b6:	881b      	ldrh	r3, [r3, #0]
   142b8:	b29b      	uxth	r3, r3
   142ba:	2b00      	cmp	r3, #0
   142bc:	d0af      	beq.n	1421e <z_arm_fault+0xba>
		reason = usage_fault(esf);
   142be:	f7ff fe13 	bl	13ee8 <usage_fault.isra.0>
   142c2:	e7e5      	b.n	14290 <z_arm_fault+0x12c>
		reason = mem_manage_fault(esf, 0, recoverable);
   142c4:	2000      	movs	r0, #0
   142c6:	f10d 0107 	add.w	r1, sp, #7
   142ca:	e7df      	b.n	1428c <z_arm_fault+0x128>
		reason = bus_fault(esf, 0, recoverable);
   142cc:	2000      	movs	r0, #0
   142ce:	f10d 0107 	add.w	r1, sp, #7
   142d2:	e7ec      	b.n	142ae <z_arm_fault+0x14a>
   142d4:	4912      	ldr	r1, [pc, #72]	; (14320 <z_arm_fault+0x1bc>)
   142d6:	4b11      	ldr	r3, [pc, #68]	; (1431c <z_arm_fault+0x1b8>)
	PR_FAULT_INFO(
   142d8:	481a      	ldr	r0, [pc, #104]	; (14344 <z_arm_fault+0x1e0>)
   142da:	1ac9      	subs	r1, r1, r3
   142dc:	08c9      	lsrs	r1, r1, #3
   142de:	0189      	lsls	r1, r1, #6
   142e0:	f041 0101 	orr.w	r1, r1, #1
   142e4:	e790      	b.n	14208 <z_arm_fault+0xa4>
   142e6:	4a0d      	ldr	r2, [pc, #52]	; (1431c <z_arm_fault+0x1b8>)
   142e8:	4b0d      	ldr	r3, [pc, #52]	; (14320 <z_arm_fault+0x1bc>)
	PR_FAULT_INFO("***** %s %d) *****",
   142ea:	4817      	ldr	r0, [pc, #92]	; (14348 <z_arm_fault+0x1e4>)
   142ec:	1a9b      	subs	r3, r3, r2
   142ee:	08db      	lsrs	r3, r3, #3
   142f0:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   142f4:	ea4f 1383 	mov.w	r3, r3, lsl #6
   142f8:	4914      	ldr	r1, [pc, #80]	; (1434c <z_arm_fault+0x1e8>)
   142fa:	f043 0301 	orr.w	r3, r3, #1
   142fe:	bf18      	it	ne
   14300:	4601      	movne	r1, r0
   14302:	f1a6 0210 	sub.w	r2, r6, #16
   14306:	4812      	ldr	r0, [pc, #72]	; (14350 <z_arm_fault+0x1ec>)
   14308:	f00a ffa1 	bl	1f24e <log_2>
   1430c:	e77e      	b.n	1420c <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1430e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14312:	f023 0301 	bic.w	r3, r3, #1
   14316:	e79a      	b.n	1424e <z_arm_fault+0xea>
   14318:	e000ed00 	.word	0xe000ed00
   1431c:	00022fd8 	.word	0x00022fd8
   14320:	00023060 	.word	0x00023060
   14324:	00023a84 	.word	0x00023a84
   14328:	00023aa7 	.word	0x00023aa7
   1432c:	00023abe 	.word	0x00023abe
   14330:	00023adf 	.word	0x00023adf
   14334:	00023aed 	.word	0x00023aed
   14338:	00023b0c 	.word	0x00023b0c
   1433c:	e000ed29 	.word	0xe000ed29
   14340:	e000ed2a 	.word	0xe000ed2a
   14344:	00023b28 	.word	0x00023b28
   14348:	00023b61 	.word	0x00023b61
   1434c:	00023b4c 	.word	0x00023b4c
   14350:	00023b7a 	.word	0x00023b7a

00014354 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14354:	4b04      	ldr	r3, [pc, #16]	; (14368 <z_arm_fault_init+0x14>)
   14356:	695a      	ldr	r2, [r3, #20]
   14358:	f042 0210 	orr.w	r2, r2, #16
   1435c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1435e:	695a      	ldr	r2, [r3, #20]
   14360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   14364:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   14366:	4770      	bx	lr
   14368:	e000ed00 	.word	0xe000ed00

0001436c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1436c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14370:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14374:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14376:	4672      	mov	r2, lr
	bl z_arm_fault
   14378:	f7ff fef4 	bl	14164 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1437c:	bd01      	pop	{r0, pc}
   1437e:	bf00      	nop

00014380 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14380:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14382:	2120      	movs	r1, #32
   14384:	4803      	ldr	r0, [pc, #12]	; (14394 <z_arm_interrupt_init+0x14>)
   14386:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14388:	3301      	adds	r3, #1
   1438a:	2b41      	cmp	r3, #65	; 0x41
   1438c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14390:	d1f9      	bne.n	14386 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14392:	4770      	bx	lr
   14394:	e000e100 	.word	0xe000e100

00014398 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14398:	f00e fc72 	bl	22c80 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1439c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1439e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   143a2:	4808      	ldr	r0, [pc, #32]	; (143c4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   143a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   143a8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   143aa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   143ae:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   143b2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   143b4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   143b6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   143ba:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   143be:	f7ff fcb7 	bl	13d30 <z_arm_prep_c>
   143c2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   143c4:	20013f08 	.word	0x20013f08

000143c8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   143c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   143cc:	4905      	ldr	r1, [pc, #20]	; (143e4 <sys_arch_reboot+0x1c>)
   143ce:	4b06      	ldr	r3, [pc, #24]	; (143e8 <sys_arch_reboot+0x20>)
   143d0:	68ca      	ldr	r2, [r1, #12]
   143d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   143d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   143d8:	60cb      	str	r3, [r1, #12]
   143da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   143de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   143e0:	e7fd      	b.n	143de <sys_arch_reboot+0x16>
   143e2:	bf00      	nop
   143e4:	e000ed00 	.word	0xe000ed00
   143e8:	05fa0004 	.word	0x05fa0004

000143ec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   143ec:	4b06      	ldr	r3, [pc, #24]	; (14408 <z_impl_k_thread_abort+0x1c>)
   143ee:	689b      	ldr	r3, [r3, #8]
   143f0:	4283      	cmp	r3, r0
   143f2:	d107      	bne.n	14404 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   143f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   143f8:	b123      	cbz	r3, 14404 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   143fa:	4a04      	ldr	r2, [pc, #16]	; (1440c <z_impl_k_thread_abort+0x20>)
   143fc:	6853      	ldr	r3, [r2, #4]
   143fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14402:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   14404:	f008 bef4 	b.w	1d1f0 <z_thread_abort>
   14408:	2000d5d8 	.word	0x2000d5d8
   1440c:	e000ed00 	.word	0xe000ed00

00014410 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14412:	4c09      	ldr	r4, [pc, #36]	; (14438 <z_arm_configure_static_mpu_regions+0x28>)
   14414:	4a09      	ldr	r2, [pc, #36]	; (1443c <z_arm_configure_static_mpu_regions+0x2c>)
   14416:	4623      	mov	r3, r4
   14418:	2101      	movs	r1, #1
   1441a:	4809      	ldr	r0, [pc, #36]	; (14440 <z_arm_configure_static_mpu_regions+0x30>)
   1441c:	f000 f912 	bl	14644 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   14420:	2300      	movs	r3, #0
   14422:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   14424:	4b07      	ldr	r3, [pc, #28]	; (14444 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14426:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   14428:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1442a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1442c:	9301      	str	r3, [sp, #4]
   1442e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14430:	f000 f912 	bl	14658 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   14434:	b004      	add	sp, #16
   14436:	bd10      	pop	{r4, pc}
   14438:	20040000 	.word	0x20040000
   1443c:	2000c500 	.word	0x2000c500
   14440:	0002319c 	.word	0x0002319c
   14444:	2000c910 	.word	0x2000c910

00014448 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   14448:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1444a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1444c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1444e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   14452:	f004 031f 	and.w	r3, r4, #31
   14456:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14458:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1445a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1445c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   14460:	4904      	ldr	r1, [pc, #16]	; (14474 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14462:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   14466:	f043 0301 	orr.w	r3, r3, #1
   1446a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1446c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1446e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   14470:	bd10      	pop	{r4, pc}
   14472:	bf00      	nop
   14474:	e000ed90 	.word	0xe000ed90

00014478 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   14478:	280f      	cmp	r0, #15
{
   1447a:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   1447c:	d90d      	bls.n	1449a <region_allocate_and_init+0x22>
   1447e:	4b08      	ldr	r3, [pc, #32]	; (144a0 <region_allocate_and_init+0x28>)
   14480:	4a08      	ldr	r2, [pc, #32]	; (144a4 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14482:	4601      	mov	r1, r0
   14484:	1ad2      	subs	r2, r2, r3
   14486:	08d2      	lsrs	r2, r2, #3
   14488:	0192      	lsls	r2, r2, #6
   1448a:	4807      	ldr	r0, [pc, #28]	; (144a8 <region_allocate_and_init+0x30>)
   1448c:	f042 0201 	orr.w	r2, r2, #1
   14490:	f00a fec9 	bl	1f226 <log_1>
		return -EINVAL;
   14494:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   14498:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   1449a:	f7ff ffd5 	bl	14448 <region_init>
	return index;
   1449e:	e7fb      	b.n	14498 <region_allocate_and_init+0x20>
   144a0:	00022fd8 	.word	0x00022fd8
   144a4:	00023048 	.word	0x00023048
   144a8:	00023b91 	.word	0x00023b91

000144ac <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   144ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144b0:	4689      	mov	r9, r1
   144b2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   144b4:	4606      	mov	r6, r0
   144b6:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   144ba:	4d54      	ldr	r5, [pc, #336]	; (1460c <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   144bc:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   144be:	45c8      	cmp	r8, r9
   144c0:	da33      	bge.n	1452a <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
   144c2:	f8d6 a004 	ldr.w	sl, [r6, #4]
   144c6:	f1ba 0f00 	cmp.w	sl, #0
   144ca:	d04d      	beq.n	14568 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   144cc:	f1ba 0f1f 	cmp.w	sl, #31
   144d0:	d91e      	bls.n	14510 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
   144d2:	f01a 0f1f 	tst.w	sl, #31
   144d6:	d11b      	bne.n	14510 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
   144d8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   144dc:	f01b 0f1f 	tst.w	fp, #31
   144e0:	d116      	bne.n	14510 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   144e2:	4658      	mov	r0, fp
   144e4:	f00b fcff 	bl	1fee6 <arm_cmse_mpu_region_get>
   144e8:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   144ea:	eb0a 000b 	add.w	r0, sl, fp
   144ee:	3801      	subs	r0, #1
   144f0:	f00b fcf9 	bl	1fee6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   144f4:	4287      	cmp	r7, r0
   144f6:	d01c      	beq.n	14532 <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
   144f8:	f06f 0715 	mvn.w	r7, #21
   144fc:	4a44      	ldr	r2, [pc, #272]	; (14610 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   144fe:	4b45      	ldr	r3, [pc, #276]	; (14614 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   14500:	4639      	mov	r1, r7
   14502:	1ad2      	subs	r2, r2, r3
   14504:	08d2      	lsrs	r2, r2, #3
   14506:	0192      	lsls	r2, r2, #6
   14508:	4843      	ldr	r0, [pc, #268]	; (14618 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   1450a:	f042 0201 	orr.w	r2, r2, #1
   1450e:	e008      	b.n	14522 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
   14510:	4641      	mov	r1, r8
   14512:	4a3f      	ldr	r2, [pc, #252]	; (14610 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   14514:	4b3f      	ldr	r3, [pc, #252]	; (14614 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   14516:	4841      	ldr	r0, [pc, #260]	; (1461c <mpu_configure_regions_and_partition.constprop.0+0x170>)
   14518:	1ad2      	subs	r2, r2, r3
   1451a:	08d2      	lsrs	r2, r2, #3
   1451c:	0192      	lsls	r2, r2, #6
   1451e:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   14522:	f00a fe80 	bl	1f226 <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   14526:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1452a:	4620      	mov	r0, r4
   1452c:	b005      	add	sp, #20
   1452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   14532:	f117 0f16 	cmn.w	r7, #22
   14536:	d0e1      	beq.n	144fc <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   14538:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1453a:	42bb      	cmp	r3, r7
   1453c:	dbde      	blt.n	144fc <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   1453e:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14540:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   14542:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   14544:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14546:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1454a:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1454e:	e9d6 3200 	ldrd	r3, r2, [r6]
   14552:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   14554:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   14556:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1455a:	d11a      	bne.n	14592 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   1455c:	45d3      	cmp	fp, sl
   1455e:	d107      	bne.n	14570 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
   14560:	4631      	mov	r1, r6
   14562:	b2f8      	uxtb	r0, r7
   14564:	f00b fcc8 	bl	1fef8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   14568:	f108 0801 	add.w	r8, r8, #1
   1456c:	360c      	adds	r6, #12
   1456e:	e7a6      	b.n	144be <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   14570:	4631      	mov	r1, r6
	MPU->RNR = index;
   14572:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14574:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   14576:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1457a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1457e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14580:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   14582:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   14584:	f00b fcb8 	bl	1fef8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   14588:	f110 0f16 	cmn.w	r0, #22
   1458c:	d0cb      	beq.n	14526 <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
   1458e:	1c44      	adds	r4, r0, #1
   14590:	e7ea      	b.n	14568 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   14592:	3b01      	subs	r3, #1
   14594:	45d3      	cmp	fp, sl
   14596:	b2e0      	uxtb	r0, r4
   14598:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   1459c:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
   1459e:	d106      	bne.n	145ae <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   145a0:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   145a2:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   145a4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   145a8:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   145aa:	612b      	str	r3, [r5, #16]
			reg_index =
   145ac:	e7ea      	b.n	14584 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   145ae:	6929      	ldr	r1, [r5, #16]
   145b0:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   145b4:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   145b6:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   145b8:	4631      	mov	r1, r6
   145ba:	f00b fc9d 	bl	1fef8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   145be:	f110 0f16 	cmn.w	r0, #22
   145c2:	d0b0      	beq.n	14526 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
   145c4:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
   145c6:	68ea      	ldr	r2, [r5, #12]
   145c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   145cc:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   145d0:	f362 0304 	bfi	r3, r2, #0, #5
   145d4:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   145d8:	692b      	ldr	r3, [r5, #16]
   145da:	f89d 2008 	ldrb.w	r2, [sp, #8]
   145de:	085b      	lsrs	r3, r3, #1
   145e0:	f363 1247 	bfi	r2, r3, #5, #3
   145e4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   145e8:	e9d6 3200 	ldrd	r3, r2, [r6]
   145ec:	4413      	add	r3, r2
   145ee:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   145f0:	f023 031f 	bic.w	r3, r3, #31
   145f4:	445b      	add	r3, fp
   145f6:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   145fa:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   145fc:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   14600:	4669      	mov	r1, sp
   14602:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   14604:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   14606:	f7ff ff37 	bl	14478 <region_allocate_and_init>
   1460a:	e7bd      	b.n	14588 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   1460c:	e000ed90 	.word	0xe000ed90
   14610:	00023048 	.word	0x00023048
   14614:	00022fd8 	.word	0x00022fd8
   14618:	00023bda 	.word	0x00023bda
   1461c:	00023bb7 	.word	0x00023bb7

00014620 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14620:	2205      	movs	r2, #5
   14622:	4b03      	ldr	r3, [pc, #12]	; (14630 <arm_core_mpu_enable+0x10>)
   14624:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14626:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1462a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1462e:	4770      	bx	lr
   14630:	e000ed90 	.word	0xe000ed90

00014634 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14634:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14638:	2200      	movs	r2, #0
   1463a:	4b01      	ldr	r3, [pc, #4]	; (14640 <arm_core_mpu_disable+0xc>)
   1463c:	605a      	str	r2, [r3, #4]
}
   1463e:	4770      	bx	lr
   14640:	e000ed90 	.word	0xe000ed90

00014644 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14644:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14646:	4c03      	ldr	r4, [pc, #12]	; (14654 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   14648:	7822      	ldrb	r2, [r4, #0]
   1464a:	f7ff ff2f 	bl	144ac <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1464e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   14650:	bd10      	pop	{r4, pc}
   14652:	bf00      	nop
   14654:	2000e29d 	.word	0x2000e29d

00014658 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   14658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1465c:	4d26      	ldr	r5, [pc, #152]	; (146f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   1465e:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14660:	4606      	mov	r6, r0
   14662:	f04f 0800 	mov.w	r8, #0
   14666:	46ab      	mov	fp, r5
	MPU->RNR = index;
   14668:	4f24      	ldr	r7, [pc, #144]	; (146fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1466a:	45d0      	cmp	r8, sl
   1466c:	da1b      	bge.n	146a6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1466e:	f8d6 9004 	ldr.w	r9, [r6, #4]
   14672:	f1b9 0f00 	cmp.w	r9, #0
   14676:	d039      	beq.n	146ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   14678:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1467a:	4608      	mov	r0, r1
   1467c:	9101      	str	r1, [sp, #4]
   1467e:	f00b fc32 	bl	1fee6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14682:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14684:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14686:	eb09 0001 	add.w	r0, r9, r1
   1468a:	3801      	subs	r0, #1
   1468c:	f00b fc2b 	bl	1fee6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   14690:	4284      	cmp	r4, r0
   14692:	f04f 0214 	mov.w	r2, #20
   14696:	4b1a      	ldr	r3, [pc, #104]	; (14700 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   14698:	d008      	beq.n	146ac <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1469a:	f06f 0315 	mvn.w	r3, #21
   1469e:	fb02 f808 	mul.w	r8, r2, r8
   146a2:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   146a6:	b003      	add	sp, #12
   146a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   146ac:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   146b0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   146b2:	d0f8      	beq.n	146a6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   146b4:	7819      	ldrb	r1, [r3, #0]
   146b6:	42a1      	cmp	r1, r4
   146b8:	ddf5      	ble.n	146a6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   146ba:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   146be:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   146c0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   146c2:	68fc      	ldr	r4, [r7, #12]
   146c4:	f100 0108 	add.w	r1, r0, #8
   146c8:	7b00      	ldrb	r0, [r0, #12]
   146ca:	f364 0004 	bfi	r0, r4, #0, #5
   146ce:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   146d0:	6938      	ldr	r0, [r7, #16]
   146d2:	790c      	ldrb	r4, [r1, #4]
   146d4:	0840      	lsrs	r0, r0, #1
   146d6:	f360 1447 	bfi	r4, r0, #5, #3
   146da:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   146dc:	68f9      	ldr	r1, [r7, #12]
   146de:	f021 011f 	bic.w	r1, r1, #31
   146e2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   146e4:	6939      	ldr	r1, [r7, #16]
   146e6:	f021 011f 	bic.w	r1, r1, #31
   146ea:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   146ec:	f108 0801 	add.w	r8, r8, #1
   146f0:	3514      	adds	r5, #20
   146f2:	360c      	adds	r6, #12
   146f4:	e7b9      	b.n	1466a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   146f6:	bf00      	nop
   146f8:	2000d16c 	.word	0x2000d16c
   146fc:	e000ed90 	.word	0xe000ed90
   14700:	2000e29d 	.word	0x2000e29d

00014704 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   14704:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14706:	4c0e      	ldr	r4, [pc, #56]	; (14740 <z_arm_mpu_init+0x3c>)
   14708:	6825      	ldr	r5, [r4, #0]
   1470a:	2d10      	cmp	r5, #16
   1470c:	d814      	bhi.n	14738 <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1470e:	f7ff ff91 	bl	14634 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14712:	2000      	movs	r0, #0
	MPU->MAIR0 =
   14714:	4b0b      	ldr	r3, [pc, #44]	; (14744 <z_arm_mpu_init+0x40>)
   14716:	4a0c      	ldr	r2, [pc, #48]	; (14748 <z_arm_mpu_init+0x44>)
   14718:	631a      	str	r2, [r3, #48]	; 0x30
   1471a:	4285      	cmp	r5, r0
   1471c:	d105      	bne.n	1472a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1471e:	4b0b      	ldr	r3, [pc, #44]	; (1474c <z_arm_mpu_init+0x48>)
   14720:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   14722:	f7ff ff7d 	bl	14620 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   14726:	2000      	movs	r0, #0
}
   14728:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1472a:	6861      	ldr	r1, [r4, #4]
   1472c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   14730:	f7ff fe8a 	bl	14448 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14734:	3001      	adds	r0, #1
   14736:	e7f0      	b.n	1471a <z_arm_mpu_init+0x16>
		return -1;
   14738:	f04f 30ff 	mov.w	r0, #4294967295
   1473c:	e7f4      	b.n	14728 <z_arm_mpu_init+0x24>
   1473e:	bf00      	nop
   14740:	000231a8 	.word	0x000231a8
   14744:	e000ed90 	.word	0xe000ed90
   14748:	0044ffaa 	.word	0x0044ffaa
   1474c:	2000e29d 	.word	0x2000e29d

00014750 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14750:	4b01      	ldr	r3, [pc, #4]	; (14758 <__stdout_hook_install+0x8>)
   14752:	6018      	str	r0, [r3, #0]
}
   14754:	4770      	bx	lr
   14756:	bf00      	nop
   14758:	2000c538 	.word	0x2000c538

0001475c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1475c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1475e:	4c07      	ldr	r4, [pc, #28]	; (1477c <_sbrk+0x20>)
   14760:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   14762:	18c2      	adds	r2, r0, r3
   14764:	4806      	ldr	r0, [pc, #24]	; (14780 <_sbrk+0x24>)
   14766:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1476a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1476e:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   14770:	bf2e      	itee	cs
   14772:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   14776:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   14778:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   1477a:	bd10      	pop	{r4, pc}
   1477c:	2000d180 	.word	0x2000d180
   14780:	20016bd8 	.word	0x20016bd8

00014784 <smf_set_state>:
	/*
	 * It does not make sense to call set_state in an exit phase of a state
	 * since we are already in a transition; we would always ignore the
	 * intended state to transition into.
	 */
	if (internal->exit) {
   14784:	7b03      	ldrb	r3, [r0, #12]
{
   14786:	b570      	push	{r4, r5, r6, lr}
	if (internal->exit) {
   14788:	075a      	lsls	r2, r3, #29
{
   1478a:	4604      	mov	r4, r0
   1478c:	460d      	mov	r5, r1
	if (internal->exit) {
   1478e:	d50c      	bpl.n	147aa <smf_set_state+0x26>
		/*
		 * If terminate was set, it will be handled in the
		 * smf_run_state function
		 */
	}
}
   14790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14794:	4a11      	ldr	r2, [pc, #68]	; (147dc <smf_set_state+0x58>)
   14796:	4b12      	ldr	r3, [pc, #72]	; (147e0 <smf_set_state+0x5c>)
		LOG_WRN("Calling %s from exit action", __func__);
   14798:	4912      	ldr	r1, [pc, #72]	; (147e4 <smf_set_state+0x60>)
   1479a:	1ad2      	subs	r2, r2, r3
   1479c:	08d2      	lsrs	r2, r2, #3
   1479e:	0192      	lsls	r2, r2, #6
   147a0:	4811      	ldr	r0, [pc, #68]	; (147e8 <smf_set_state+0x64>)
   147a2:	f042 0202 	orr.w	r2, r2, #2
   147a6:	f00a bd3e 	b.w	1f226 <log_1>
	internal->exit = true;
   147aa:	f043 0304 	orr.w	r3, r3, #4
   147ae:	7303      	strb	r3, [r0, #12]
	if (ctx->current->exit) {
   147b0:	6803      	ldr	r3, [r0, #0]
   147b2:	689b      	ldr	r3, [r3, #8]
   147b4:	b94b      	cbnz	r3, 147ca <smf_set_state+0x46>
	internal->exit = false;
   147b6:	7b23      	ldrb	r3, [r4, #12]
   147b8:	f36f 0382 	bfc	r3, #2, #1
   147bc:	7323      	strb	r3, [r4, #12]
	ctx->previous = ctx->current;
   147be:	6823      	ldr	r3, [r4, #0]
	ctx->current = target;
   147c0:	e9c4 5300 	strd	r5, r3, [r4]
	if (ctx->current->entry) {
   147c4:	682b      	ldr	r3, [r5, #0]
   147c6:	b92b      	cbnz	r3, 147d4 <smf_set_state+0x50>
}
   147c8:	bd70      	pop	{r4, r5, r6, pc}
		ctx->current->exit(ctx);
   147ca:	4798      	blx	r3
		if (internal->terminate) {
   147cc:	7b23      	ldrb	r3, [r4, #12]
   147ce:	079b      	lsls	r3, r3, #30
   147d0:	d5f1      	bpl.n	147b6 <smf_set_state+0x32>
   147d2:	e7f9      	b.n	147c8 <smf_set_state+0x44>
		ctx->current->entry(ctx);
   147d4:	4620      	mov	r0, r4
}
   147d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ctx->current->entry(ctx);
   147da:	4718      	bx	r3
   147dc:	00023070 	.word	0x00023070
   147e0:	00022fd8 	.word	0x00022fd8
   147e4:	00023c1d 	.word	0x00023c1d
   147e8:	00023bfd 	.word	0x00023bfd

000147ec <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   147ec:	4801      	ldr	r0, [pc, #4]	; (147f4 <k_mutex_unlock.constprop.0+0x8>)
   147ee:	f007 bfbb 	b.w	1c768 <z_impl_k_mutex_unlock>
   147f2:	bf00      	nop
   147f4:	2000c87c 	.word	0x2000c87c

000147f8 <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   147f8:	4602      	mov	r2, r0
   147fa:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   147fc:	4801      	ldr	r0, [pc, #4]	; (14804 <k_mutex_lock.constprop.0+0xc>)
   147fe:	f007 bf35 	b.w	1c66c <z_impl_k_mutex_lock>
   14802:	bf00      	nop
   14804:	2000c87c 	.word	0x2000c87c

00014808 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   14808:	b538      	push	{r3, r4, r5, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1480a:	f04f 30ff 	mov.w	r0, #4294967295
   1480e:	f04f 31ff 	mov.w	r1, #4294967295
   14812:	f7ff fff1 	bl	147f8 <k_mutex_lock.constprop.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   14816:	4c0a      	ldr	r4, [pc, #40]	; (14840 <net_if_init+0x38>)
   14818:	4d0a      	ldr	r5, [pc, #40]	; (14844 <net_if_init+0x3c>)
   1481a:	42ac      	cmp	r4, r5
   1481c:	4620      	mov	r0, r4
   1481e:	d303      	bcc.n	14828 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   14820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
   14824:	f7ff bfe2 	b.w	147ec <k_mutex_unlock.constprop.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   14828:	6803      	ldr	r3, [r0, #0]
   1482a:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1482c:	681b      	ldr	r3, [r3, #0]
   1482e:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   14830:	2b00      	cmp	r3, #0
   14832:	d0f2      	beq.n	1481a <net_if_init+0x12>
   14834:	681b      	ldr	r3, [r3, #0]
   14836:	2b00      	cmp	r3, #0
   14838:	d0ef      	beq.n	1481a <net_if_init+0x12>
	api->init(iface);
   1483a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1483c:	e7ed      	b.n	1481a <net_if_init+0x12>
   1483e:	bf00      	nop
   14840:	2000c8ec 	.word	0x2000c8ec
   14844:	2000c8f0 	.word	0x2000c8f0

00014848 <net_if_post_init>:

void net_if_post_init(void)
{
   14848:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1484a:	4c07      	ldr	r4, [pc, #28]	; (14868 <net_if_post_init+0x20>)
   1484c:	4d07      	ldr	r5, [pc, #28]	; (1486c <net_if_post_init+0x24>)
   1484e:	42ac      	cmp	r4, r5
   14850:	d300      	bcc.n	14854 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   14852:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   14854:	2103      	movs	r1, #3
   14856:	4620      	mov	r0, r4
   14858:	f00b fbac 	bl	1ffb4 <net_if_flag_is_set>
   1485c:	b910      	cbnz	r0, 14864 <net_if_post_init+0x1c>
			net_if_up(iface);
   1485e:	4620      	mov	r0, r4
   14860:	f00b fbb1 	bl	1ffc6 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   14864:	3404      	adds	r4, #4
   14866:	e7f2      	b.n	1484e <net_if_post_init+0x6>
   14868:	2000c8ec 	.word	0x2000c8ec
   1486c:	2000c8f0 	.word	0x2000c8f0

00014870 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   14870:	2300      	movs	r3, #0
{
   14872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   14876:	2802      	cmp	r0, #2
{
   14878:	b089      	sub	sp, #36	; 0x24
   1487a:	4606      	mov	r6, r0
   1487c:	4615      	mov	r5, r2
	unsigned char zeros[8] = { 0 };
   1487e:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   14882:	9103      	str	r1, [sp, #12]
	if (family == AF_INET6) {
   14884:	d13c      	bne.n	14900 <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   14886:	a806      	add	r0, sp, #24
   14888:	9105      	str	r1, [sp, #20]
   1488a:	4601      	mov	r1, r0
{
   1488c:	461a      	mov	r2, r3
   1488e:	e006      	b.n	1489e <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   14890:	780c      	ldrb	r4, [r1, #0]
   14892:	3201      	adds	r2, #1
   14894:	3401      	adds	r4, #1
   14896:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   14898:	b2d4      	uxtb	r4, r2
   1489a:	2c07      	cmp	r4, #7
   1489c:	d804      	bhi.n	148a8 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1489e:	9c03      	ldr	r4, [sp, #12]
   148a0:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   148a4:	2c00      	cmp	r4, #0
   148a6:	d0f3      	beq.n	14890 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   148a8:	3301      	adds	r3, #1
   148aa:	2b08      	cmp	r3, #8
   148ac:	f101 0101 	add.w	r1, r1, #1
   148b0:	d1ec      	bne.n	1488c <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   148b2:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   148b6:	f04f 0801 	mov.w	r8, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   148ba:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   148bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   148c0:	4542      	cmp	r2, r8
				longest = zeros[i];
				pos = i;
   148c2:	bf88      	it	hi
   148c4:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
   148c6:	f103 0301 	add.w	r3, r3, #1
   148ca:	b2db      	uxtb	r3, r3
				pos = i;
   148cc:	bf88      	it	hi
   148ce:	4690      	movhi	r8, r2
		for (i = 0U; i < 8; i++) {
   148d0:	2b08      	cmp	r3, #8
   148d2:	d1f3      	bne.n	148bc <z_impl_net_addr_ntop+0x4c>
		len = 8;
   148d4:	f1b8 0f01 	cmp.w	r8, #1
   148d8:	469b      	mov	fp, r3
   148da:	f04f 0a3a 	mov.w	sl, #58	; 0x3a
   148de:	bf08      	it	eq
   148e0:	f04f 37ff 	moveq.w	r7, #4294967295
	bool needcolon = false;
   148e4:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   148e6:	4628      	mov	r0, r5
   148e8:	460c      	mov	r4, r1
   148ea:	455c      	cmp	r4, fp
   148ec:	db17      	blt.n	1491e <z_impl_net_addr_ntop+0xae>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   148ee:	42a8      	cmp	r0, r5
   148f0:	d008      	beq.n	14904 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   148f2:	2300      	movs	r3, #0
   148f4:	2e01      	cmp	r6, #1
		*(ptr - 1) = '\0';
   148f6:	bf0c      	ite	eq
   148f8:	f800 3c01 	strbeq.w	r3, [r0, #-1]
	} else {
		*ptr = '\0';
   148fc:	7003      	strbne	r3, [r0, #0]
   148fe:	e002      	b.n	14906 <z_impl_net_addr_ntop+0x96>
	} else if (family == AF_INET) {
   14900:	2801      	cmp	r0, #1
   14902:	d004      	beq.n	1490e <z_impl_net_addr_ntop+0x9e>
		return NULL;
   14904:	2500      	movs	r5, #0
	}

	return dst;
}
   14906:	4628      	mov	r0, r5
   14908:	b009      	add	sp, #36	; 0x24
   1490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = 4;
   1490e:	f04f 0b04 	mov.w	fp, #4
		delim = '.';
   14912:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
	int8_t pos = -1;
   14916:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1491a:	4680      	mov	r8, r0
   1491c:	e7e2      	b.n	148e4 <z_impl_net_addr_ntop+0x74>
		if (len == 4) {
   1491e:	f1bb 0f04 	cmp.w	fp, #4
   14922:	d13e      	bne.n	149a2 <z_impl_net_addr_ntop+0x132>
			value = (uint32_t)addr->s4_addr[i];
   14924:	9b03      	ldr	r3, [sp, #12]
   14926:	5d1a      	ldrb	r2, [r3, r4]
			if (value == 0U) {
   14928:	b94a      	cbnz	r2, 1493e <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
   1492a:	4603      	mov	r3, r0
   1492c:	2230      	movs	r2, #48	; 0x30
   1492e:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   14932:	f880 a001 	strb.w	sl, [r0, #1]
	for (i = 0U; i < len; i++) {
   14936:	3401      	adds	r4, #1
   14938:	4618      	mov	r0, r3
   1493a:	b2e4      	uxtb	r4, r4
   1493c:	e7d5      	b.n	148ea <z_impl_net_addr_ntop+0x7a>
			l = net_value_to_udec(ptr, value, 0);
   1493e:	e9cd 2001 	strd	r2, r0, [sp, #4]
   14942:	2200      	movs	r2, #0
   14944:	f04f 0909 	mov.w	r9, #9
   14948:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 14a3c <z_impl_net_addr_ntop+0x1cc>
   1494c:	9204      	str	r2, [sp, #16]
		value = value % divisor;
   1494e:	f8dd e004 	ldr.w	lr, [sp, #4]
   14952:	fbbe f2fc 	udiv	r2, lr, ip
   14956:	fb0c e212 	mls	r2, ip, r2, lr
   1495a:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   1495c:	9a04      	ldr	r2, [sp, #16]
   1495e:	454a      	cmp	r2, r9
   14960:	dc01      	bgt.n	14966 <z_impl_net_addr_ntop+0xf6>
   14962:	45e6      	cmp	lr, ip
   14964:	d309      	bcc.n	1497a <z_impl_net_addr_ntop+0x10a>
		temp = value / divisor;
   14966:	fbbe fefc 	udiv	lr, lr, ip
			*buf++ = (char) (temp + '0');
   1496a:	9b02      	ldr	r3, [sp, #8]
   1496c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   14970:	f803 eb01 	strb.w	lr, [r3], #1
   14974:	f8cd 9010 	str.w	r9, [sp, #16]
   14978:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1497a:	220a      	movs	r2, #10
   1497c:	f109 39ff 	add.w	r9, r9, #4294967295
   14980:	f1b9 3fff 	cmp.w	r9, #4294967295
   14984:	fbbc fcf2 	udiv	ip, ip, r2
   14988:	d1e1      	bne.n	1494e <z_impl_net_addr_ntop+0xde>
	*buf = 0;
   1498a:	f04f 0200 	mov.w	r2, #0
   1498e:	9b02      	ldr	r3, [sp, #8]
   14990:	701a      	strb	r2, [r3, #0]
	return buf - start;
   14992:	1a1b      	subs	r3, r3, r0
			ptr += l;
   14994:	b2da      	uxtb	r2, r3
   14996:	fa50 f383 	uxtab	r3, r0, r3
			*ptr++ = delim;
   1499a:	3301      	adds	r3, #1
   1499c:	f800 a002 	strb.w	sl, [r0, r2]
			continue;
   149a0:	e7c9      	b.n	14936 <z_impl_net_addr_ntop+0xc6>
		if (i == pos) {
   149a2:	42a7      	cmp	r7, r4
   149a4:	d10e      	bne.n	149c4 <z_impl_net_addr_ntop+0x154>
			if (needcolon || i == 0U) {
   149a6:	b901      	cbnz	r1, 149aa <z_impl_net_addr_ntop+0x13a>
   149a8:	b917      	cbnz	r7, 149b0 <z_impl_net_addr_ntop+0x140>
				*ptr++ = ':';
   149aa:	233a      	movs	r3, #58	; 0x3a
   149ac:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
   149b0:	223a      	movs	r2, #58	; 0x3a
   149b2:	4603      	mov	r3, r0
   149b4:	f803 2b01 	strb.w	r2, [r3], #1
			i += longest - 1U;
   149b8:	f108 32ff 	add.w	r2, r8, #4294967295
   149bc:	4414      	add	r4, r2
			needcolon = false;
   149be:	2100      	movs	r1, #0
			i += longest - 1U;
   149c0:	b2e4      	uxtb	r4, r4
			continue;
   149c2:	e7b8      	b.n	14936 <z_impl_net_addr_ntop+0xc6>
		if (needcolon) {
   149c4:	b111      	cbz	r1, 149cc <z_impl_net_addr_ntop+0x15c>
			*ptr++ = ':';
   149c6:	233a      	movs	r3, #58	; 0x3a
   149c8:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   149cc:	9b05      	ldr	r3, [sp, #20]
   149ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   149d2:	0219      	lsls	r1, r3, #8
   149d4:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   149d8:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   149dc:	b20a      	sxth	r2, r1
		bh = value >> 8;
   149de:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   149e2:	fa5f f981 	uxtb.w	r9, r1
		if (bh) {
   149e6:	d019      	beq.n	14a1c <z_impl_net_addr_ntop+0x1ac>
			if (bh > 0x0f) {
   149e8:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   149ea:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   149ec:	d90d      	bls.n	14a0a <z_impl_net_addr_ntop+0x19a>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   149ee:	2300      	movs	r3, #0
   149f0:	2261      	movs	r2, #97	; 0x61
   149f2:	f00b fb23 	bl	2003c <net_byte_to_hex>
   149f6:	4684      	mov	ip, r0
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   149f8:	2301      	movs	r3, #1
   149fa:	2261      	movs	r2, #97	; 0x61
   149fc:	4649      	mov	r1, r9
   149fe:	4660      	mov	r0, ip
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   14a00:	f00b fb1c 	bl	2003c <net_byte_to_hex>
   14a04:	4603      	mov	r3, r0
		needcolon = true;
   14a06:	2101      	movs	r1, #1
   14a08:	e795      	b.n	14936 <z_impl_net_addr_ntop+0xc6>
				if (bh < 10) {
   14a0a:	b25b      	sxtb	r3, r3
   14a0c:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   14a0e:	bf94      	ite	ls
   14a10:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   14a12:	3357      	addhi	r3, #87	; 0x57
   14a14:	f100 0c01 	add.w	ip, r0, #1
   14a18:	7003      	strb	r3, [r0, #0]
   14a1a:	e7ed      	b.n	149f8 <z_impl_net_addr_ntop+0x188>
		} else if (bl > 0x0f) {
   14a1c:	f1b9 0f0f 	cmp.w	r9, #15
   14a20:	d902      	bls.n	14a28 <z_impl_net_addr_ntop+0x1b8>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   14a22:	2261      	movs	r2, #97	; 0x61
   14a24:	4649      	mov	r1, r9
   14a26:	e7eb      	b.n	14a00 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   14a28:	b252      	sxtb	r2, r2
   14a2a:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
   14a2e:	bf94      	ite	ls
   14a30:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   14a32:	3257      	addhi	r2, #87	; 0x57
   14a34:	1c43      	adds	r3, r0, #1
   14a36:	7002      	strb	r2, [r0, #0]
   14a38:	e7e5      	b.n	14a06 <z_impl_net_addr_ntop+0x196>
   14a3a:	bf00      	nop
   14a3c:	3b9aca00 	.word	0x3b9aca00

00014a40 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   14a40:	b513      	push	{r0, r1, r4, lr}
	const struct device *dev = entropy_driver;
   14a42:	4c0a      	ldr	r4, [pc, #40]	; (14a6c <z_impl_sys_rand32_get+0x2c>)
   14a44:	6820      	ldr	r0, [r4, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   14a46:	b918      	cbnz	r0, 14a50 <z_impl_sys_rand32_get+0x10>
   14a48:	4809      	ldr	r0, [pc, #36]	; (14a70 <z_impl_sys_rand32_get+0x30>)
   14a4a:	f007 fb83 	bl	1c154 <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   14a4e:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   14a50:	2204      	movs	r2, #4
   14a52:	6883      	ldr	r3, [r0, #8]
   14a54:	eb0d 0102 	add.w	r1, sp, r2
   14a58:	681b      	ldr	r3, [r3, #0]
   14a5a:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   14a5c:	2800      	cmp	r0, #0
   14a5e:	da02      	bge.n	14a66 <z_impl_sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   14a60:	f00b fd9d 	bl	2059e <sys_clock_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   14a64:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   14a66:	9801      	ldr	r0, [sp, #4]
   14a68:	b002      	add	sp, #8
   14a6a:	bd10      	pop	{r4, pc}
   14a6c:	2000d184 	.word	0x2000d184
   14a70:	00023c42 	.word	0x00023c42

00014a74 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14a74:	b570      	push	{r4, r5, r6, lr}
   14a76:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   14a78:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   14a7a:	480d      	ldr	r0, [pc, #52]	; (14ab0 <onoff_stop+0x3c>)
{
   14a7c:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   14a7e:	1a23      	subs	r3, r4, r0
   14a80:	109a      	asrs	r2, r3, #2
   14a82:	4b0c      	ldr	r3, [pc, #48]	; (14ab4 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   14a84:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   14a86:	4353      	muls	r3, r2
   14a88:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   14a8a:	435d      	muls	r5, r3
   14a8c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   14a90:	4418      	add	r0, r3
   14a92:	f00b fafb 	bl	2008c <set_off_state>
	if (err < 0) {
   14a96:	1e01      	subs	r1, r0, #0
   14a98:	db04      	blt.n	14aa4 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   14a9a:	4b07      	ldr	r3, [pc, #28]	; (14ab8 <onoff_stop+0x44>)
   14a9c:	442b      	add	r3, r5
   14a9e:	685b      	ldr	r3, [r3, #4]
   14aa0:	4798      	blx	r3
	return 0;
   14aa2:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   14aa4:	4620      	mov	r0, r4
   14aa6:	4633      	mov	r3, r6
}
   14aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   14aac:	4718      	bx	r3
   14aae:	bf00      	nop
   14ab0:	2000d198 	.word	0x2000d198
   14ab4:	b6db6db7 	.word	0xb6db6db7
   14ab8:	000231e8 	.word	0x000231e8

00014abc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   14ac0:	4c0f      	ldr	r4, [pc, #60]	; (14b00 <onoff_start+0x44>)
   14ac2:	4d10      	ldr	r5, [pc, #64]	; (14b04 <onoff_start+0x48>)
   14ac4:	1b03      	subs	r3, r0, r4
   14ac6:	109b      	asrs	r3, r3, #2
   14ac8:	435d      	muls	r5, r3
   14aca:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   14acc:	250c      	movs	r5, #12
   14ace:	435d      	muls	r5, r3
{
   14ad0:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   14ad2:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   14ad6:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   14ad8:	4420      	add	r0, r4
   14ada:	2140      	movs	r1, #64	; 0x40
   14adc:	f00b faef 	bl	200be <set_starting_state>
	if (err < 0) {
   14ae0:	1e01      	subs	r1, r0, #0
   14ae2:	db08      	blt.n	14af6 <onoff_start+0x3a>
	subdata->cb = cb;
   14ae4:	4b08      	ldr	r3, [pc, #32]	; (14b08 <onoff_start+0x4c>)
   14ae6:	442c      	add	r4, r5
	subdata->user_data = user_data;
   14ae8:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   14aec:	4b07      	ldr	r3, [pc, #28]	; (14b0c <onoff_start+0x50>)
   14aee:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   14af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   14af4:	4718      	bx	r3
		notify(mgr, err);
   14af6:	4638      	mov	r0, r7
   14af8:	4633      	mov	r3, r6
}
   14afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   14afe:	4718      	bx	r3
   14b00:	2000d198 	.word	0x2000d198
   14b04:	b6db6db7 	.word	0xb6db6db7
   14b08:	00020121 	.word	0x00020121
   14b0c:	000231e8 	.word	0x000231e8

00014b10 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   14b10:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14b12:	2200      	movs	r2, #0
   14b14:	2101      	movs	r1, #1
{
   14b16:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14b18:	2005      	movs	r0, #5
   14b1a:	f7ff f8e1 	bl	13ce0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   14b1e:	2005      	movs	r0, #5
   14b20:	f7ff f8c0 	bl	13ca4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   14b24:	480f      	ldr	r0, [pc, #60]	; (14b64 <clk_init+0x54>)
   14b26:	f004 f84d 	bl	18bc4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   14b2a:	4b0f      	ldr	r3, [pc, #60]	; (14b68 <clk_init+0x58>)
   14b2c:	4298      	cmp	r0, r3
   14b2e:	d115      	bne.n	14b5c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   14b30:	f00c f94d 	bl	20dce <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   14b34:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   14b36:	490d      	ldr	r1, [pc, #52]	; (14b6c <clk_init+0x5c>)
   14b38:	4630      	mov	r0, r6
   14b3a:	f00a f8e4 	bl	1ed06 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   14b3e:	2800      	cmp	r0, #0
   14b40:	db0b      	blt.n	14b5a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14b42:	2501      	movs	r5, #1
   14b44:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   14b46:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   14b48:	4908      	ldr	r1, [pc, #32]	; (14b6c <clk_init+0x5c>)
   14b4a:	f104 001c 	add.w	r0, r4, #28
   14b4e:	f00a f8da 	bl	1ed06 <onoff_manager_init>
		if (err < 0) {
   14b52:	2800      	cmp	r0, #0
   14b54:	db01      	blt.n	14b5a <clk_init+0x4a>
	}

	return 0;
   14b56:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14b58:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   14b5a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   14b5c:	f06f 0004 	mvn.w	r0, #4
   14b60:	e7fb      	b.n	14b5a <clk_init+0x4a>
   14b62:	bf00      	nop
   14b64:	00014ba5 	.word	0x00014ba5
   14b68:	0bad0000 	.word	0x0bad0000
   14b6c:	00023200 	.word	0x00023200

00014b70 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14b70:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   14b72:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   14b74:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   14b76:	434b      	muls	r3, r1
   14b78:	4808      	ldr	r0, [pc, #32]	; (14b9c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   14b7a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   14b7c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   14b7e:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   14b80:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   14b84:	4418      	add	r0, r3
	sub_data->cb = NULL;
   14b86:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   14b88:	f00b fab7 	bl	200fa <set_on_state>
	if (callback) {
   14b8c:	b12d      	cbz	r5, 14b9a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14b8e:	4632      	mov	r2, r6
   14b90:	462b      	mov	r3, r5
}
   14b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   14b96:	4802      	ldr	r0, [pc, #8]	; (14ba0 <clkstarted_handle.constprop.0+0x30>)
   14b98:	4718      	bx	r3
}
   14b9a:	bd70      	pop	{r4, r5, r6, pc}
   14b9c:	2000d198 	.word	0x2000d198
   14ba0:	00022d34 	.word	0x00022d34

00014ba4 <clock_event_handler>:
	switch (event) {
   14ba4:	b110      	cbz	r0, 14bac <clock_event_handler+0x8>
   14ba6:	2801      	cmp	r0, #1
   14ba8:	d004      	beq.n	14bb4 <clock_event_handler+0x10>
   14baa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   14bac:	4b03      	ldr	r3, [pc, #12]	; (14bbc <clock_event_handler+0x18>)
   14bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14bb0:	075b      	lsls	r3, r3, #29
   14bb2:	d101      	bne.n	14bb8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14bb4:	f7ff bfdc 	b.w	14b70 <clkstarted_handle.constprop.0>
}
   14bb8:	4770      	bx	lr
   14bba:	bf00      	nop
   14bbc:	2000d198 	.word	0x2000d198

00014bc0 <generic_hfclk_start>:
{
   14bc0:	b508      	push	{r3, lr}
	__asm__ volatile(
   14bc2:	f04f 0320 	mov.w	r3, #32
   14bc6:	f3ef 8111 	mrs	r1, BASEPRI
   14bca:	f383 8812 	msr	BASEPRI_MAX, r3
   14bce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14bd2:	4a11      	ldr	r2, [pc, #68]	; (14c18 <generic_hfclk_start+0x58>)
   14bd4:	6813      	ldr	r3, [r2, #0]
   14bd6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   14bda:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   14bde:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14be0:	d00b      	beq.n	14bfa <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14be2:	4a0e      	ldr	r2, [pc, #56]	; (14c1c <generic_hfclk_start+0x5c>)
   14be4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14be8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   14bec:	f013 0301 	ands.w	r3, r3, #1
   14bf0:	d003      	beq.n	14bfa <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   14bf2:	480b      	ldr	r0, [pc, #44]	; (14c20 <generic_hfclk_start+0x60>)
   14bf4:	f00b fa81 	bl	200fa <set_on_state>
			already_started = true;
   14bf8:	2301      	movs	r3, #1
	__asm__ volatile(
   14bfa:	f381 8811 	msr	BASEPRI, r1
   14bfe:	f3bf 8f6f 	isb	sy
	if (already_started) {
   14c02:	b123      	cbz	r3, 14c0e <generic_hfclk_start+0x4e>
}
   14c04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   14c08:	2000      	movs	r0, #0
   14c0a:	f7ff bfb1 	b.w	14b70 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14c0e:	2001      	movs	r0, #1
}
   14c10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14c14:	f003 bfe6 	b.w	18be4 <nrfx_clock_start>
   14c18:	2000d1e8 	.word	0x2000d1e8
   14c1c:	40005000 	.word	0x40005000
   14c20:	2000d1d8 	.word	0x2000d1d8

00014c24 <generic_hfclk_stop>:
   14c24:	4b07      	ldr	r3, [pc, #28]	; (14c44 <generic_hfclk_stop+0x20>)
   14c26:	e8d3 2fef 	ldaex	r2, [r3]
   14c2a:	f022 0102 	bic.w	r1, r2, #2
   14c2e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   14c32:	2800      	cmp	r0, #0
   14c34:	d1f7      	bne.n	14c26 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   14c36:	07d3      	lsls	r3, r2, #31
   14c38:	d402      	bmi.n	14c40 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14c3a:	2001      	movs	r0, #1
   14c3c:	f004 b804 	b.w	18c48 <nrfx_clock_stop>
}
   14c40:	4770      	bx	lr
   14c42:	bf00      	nop
   14c44:	2000d1e8 	.word	0x2000d1e8

00014c48 <api_blocking_start>:
{
   14c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14c4a:	2200      	movs	r2, #0
   14c4c:	2301      	movs	r3, #1
   14c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14c52:	ab04      	add	r3, sp, #16
   14c54:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14c58:	4a09      	ldr	r2, [pc, #36]	; (14c80 <api_blocking_start+0x38>)
   14c5a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14c5c:	f8cd d000 	str.w	sp, [sp]
   14c60:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14c64:	f00b fa82 	bl	2016c <api_start>
	if (err < 0) {
   14c68:	2800      	cmp	r0, #0
   14c6a:	db05      	blt.n	14c78 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   14c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14c70:	2300      	movs	r3, #0
   14c72:	4668      	mov	r0, sp
   14c74:	f007 fe1a 	bl	1c8ac <z_impl_k_sem_take>
}
   14c78:	b007      	add	sp, #28
   14c7a:	f85d fb04 	ldr.w	pc, [sp], #4
   14c7e:	bf00      	nop
   14c80:	0002013f 	.word	0x0002013f

00014c84 <z_nrf_clock_control_lf_on>:
{
   14c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14c88:	2201      	movs	r2, #1
   14c8a:	4607      	mov	r7, r0
   14c8c:	4936      	ldr	r1, [pc, #216]	; (14d68 <z_nrf_clock_control_lf_on+0xe4>)
   14c8e:	e8d1 3fef 	ldaex	r3, [r1]
   14c92:	e8c1 2fe0 	stlex	r0, r2, [r1]
   14c96:	2800      	cmp	r0, #0
   14c98:	d1f9      	bne.n	14c8e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   14c9a:	b933      	cbnz	r3, 14caa <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   14c9c:	4933      	ldr	r1, [pc, #204]	; (14d6c <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   14c9e:	4834      	ldr	r0, [pc, #208]	; (14d70 <z_nrf_clock_control_lf_on+0xec>)
   14ca0:	604b      	str	r3, [r1, #4]
   14ca2:	60cb      	str	r3, [r1, #12]
   14ca4:	608a      	str	r2, [r1, #8]
   14ca6:	f00a f841 	bl	1ed2c <onoff_request>
	switch (start_mode) {
   14caa:	1e7b      	subs	r3, r7, #1
   14cac:	2b01      	cmp	r3, #1
   14cae:	d82e      	bhi.n	14d0e <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   14cb0:	2f01      	cmp	r7, #1
   14cb2:	d106      	bne.n	14cc2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14cb4:	4b2f      	ldr	r3, [pc, #188]	; (14d74 <z_nrf_clock_control_lf_on+0xf0>)
   14cb6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14cba:	f003 0303 	and.w	r3, r3, #3
   14cbe:	2b02      	cmp	r3, #2
   14cc0:	d025      	beq.n	14d0e <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14cc2:	f00d f870 	bl	21da6 <k_is_in_isr>
   14cc6:	4604      	mov	r4, r0
   14cc8:	b918      	cbnz	r0, 14cd2 <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   14cca:	4b2b      	ldr	r3, [pc, #172]	; (14d78 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   14ccc:	781b      	ldrb	r3, [r3, #0]
   14cce:	2b00      	cmp	r3, #0
   14cd0:	d144      	bne.n	14d5c <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   14cd2:	f04f 0320 	mov.w	r3, #32
   14cd6:	f3ef 8611 	mrs	r6, BASEPRI
   14cda:	f383 8812 	msr	BASEPRI_MAX, r3
   14cde:	f3bf 8f6f 	isb	sy
   14ce2:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14ce4:	4d23      	ldr	r5, [pc, #140]	; (14d74 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14ce6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 14d84 <z_nrf_clock_control_lf_on+0x100>
   14cea:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14cec:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14cf0:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   14cf4:	03d2      	lsls	r2, r2, #15
   14cf6:	d50c      	bpl.n	14d12 <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   14cf8:	f003 0303 	and.w	r3, r3, #3
   14cfc:	2b02      	cmp	r3, #2
   14cfe:	d001      	beq.n	14d04 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14d00:	2f01      	cmp	r7, #1
   14d02:	d106      	bne.n	14d12 <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   14d04:	b334      	cbz	r4, 14d54 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   14d06:	f386 8811 	msr	BASEPRI, r6
   14d0a:	f3bf 8f6f 	isb	sy
}
   14d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   14d12:	b1d4      	cbz	r4, 14d4a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14d14:	4630      	mov	r0, r6
   14d16:	f7fe ff83 	bl	13c20 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14d1a:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14d1e:	b2db      	uxtb	r3, r3
   14d20:	2b01      	cmp	r3, #1
   14d22:	d1e3      	bne.n	14cec <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14d24:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   14d28:	2a00      	cmp	r2, #0
   14d2a:	d0df      	beq.n	14cec <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d2c:	2200      	movs	r2, #0
   14d2e:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   14d32:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   14d36:	2202      	movs	r2, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14d38:	2120      	movs	r1, #32
   14d3a:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   14d3e:	4a0f      	ldr	r2, [pc, #60]	; (14d7c <z_nrf_clock_control_lf_on+0xf8>)
   14d40:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d44:	4a0e      	ldr	r2, [pc, #56]	; (14d80 <z_nrf_clock_control_lf_on+0xfc>)
   14d46:	6013      	str	r3, [r2, #0]
}
   14d48:	e7d0      	b.n	14cec <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   14d4a:	2100      	movs	r1, #0
   14d4c:	2021      	movs	r0, #33	; 0x21
   14d4e:	f008 fa1f 	bl	1d190 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14d52:	e7e2      	b.n	14d1a <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   14d54:	2302      	movs	r3, #2
   14d56:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   14d5a:	e7d8      	b.n	14d0e <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   14d5c:	2202      	movs	r2, #2
   14d5e:	4b05      	ldr	r3, [pc, #20]	; (14d74 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   14d60:	4606      	mov	r6, r0
   14d62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   14d66:	e7bd      	b.n	14ce4 <z_nrf_clock_control_lf_on+0x60>
   14d68:	2000d1ec 	.word	0x2000d1ec
   14d6c:	2000d188 	.word	0x2000d188
   14d70:	2000d1b4 	.word	0x2000d1b4
   14d74:	40005000 	.word	0x40005000
   14d78:	2000f53d 	.word	0x2000f53d
   14d7c:	e000e100 	.word	0xe000e100
   14d80:	40005008 	.word	0x40005008
   14d84:	40005104 	.word	0x40005104

00014d88 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   14d88:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   14d8a:	4808      	ldr	r0, [pc, #32]	; (14dac <uart_console_init+0x24>)
   14d8c:	4b08      	ldr	r3, [pc, #32]	; (14db0 <uart_console_init+0x28>)
   14d8e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   14d90:	f00c ff44 	bl	21c1c <z_device_ready>
   14d94:	b138      	cbz	r0, 14da6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   14d96:	4807      	ldr	r0, [pc, #28]	; (14db4 <uart_console_init+0x2c>)
   14d98:	f7ff fcda 	bl	14750 <__stdout_hook_install>
	__printk_hook_install(console_out);
   14d9c:	4805      	ldr	r0, [pc, #20]	; (14db4 <uart_console_init+0x2c>)
   14d9e:	f7fd f991 	bl	120c4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   14da2:	2000      	movs	r0, #0
}
   14da4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   14da6:	f06f 0012 	mvn.w	r0, #18
   14daa:	e7fb      	b.n	14da4 <uart_console_init+0x1c>
   14dac:	00022d94 	.word	0x00022d94
   14db0:	2000d1f0 	.word	0x2000d1f0
   14db4:	00014db9 	.word	0x00014db9

00014db8 <console_out>:
	if ('\n' == c) {
   14db8:	280a      	cmp	r0, #10
{
   14dba:	b538      	push	{r3, r4, r5, lr}
   14dbc:	4604      	mov	r4, r0
   14dbe:	4d07      	ldr	r5, [pc, #28]	; (14ddc <console_out+0x24>)
	if ('\n' == c) {
   14dc0:	d104      	bne.n	14dcc <console_out+0x14>
   14dc2:	6828      	ldr	r0, [r5, #0]
   14dc4:	6883      	ldr	r3, [r0, #8]
   14dc6:	210d      	movs	r1, #13
   14dc8:	685b      	ldr	r3, [r3, #4]
   14dca:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   14dcc:	6828      	ldr	r0, [r5, #0]
   14dce:	6883      	ldr	r3, [r0, #8]
   14dd0:	b2e1      	uxtb	r1, r4
   14dd2:	685b      	ldr	r3, [r3, #4]
   14dd4:	4798      	blx	r3
}
   14dd6:	4620      	mov	r0, r4
   14dd8:	bd38      	pop	{r3, r4, r5, pc}
   14dda:	bf00      	nop
   14ddc:	2000d1f0 	.word	0x2000d1f0

00014de0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   14de0:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14de2:	6840      	ldr	r0, [r0, #4]
   14de4:	f001 051f 	and.w	r5, r1, #31
   14de8:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   14dea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14dee:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   14df2:	b085      	sub	sp, #20
   14df4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   14df8:	d104      	bne.n	14e04 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   14dfa:	4628      	mov	r0, r5
   14dfc:	f004 f9e2 	bl	191c4 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   14e00:	2000      	movs	r0, #0
   14e02:	e02c      	b.n	14e5e <gpio_nrfx_pin_interrupt_configure+0x7e>
	if (mode == GPIO_INT_MODE_LEVEL) {
   14e04:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   14e08:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   14e0c:	d129      	bne.n	14e62 <gpio_nrfx_pin_interrupt_configure+0x82>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   14e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   14e12:	bf0c      	ite	eq
   14e14:	2304      	moveq	r3, #4
   14e16:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   14e18:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   14e1c:	6883      	ldr	r3, [r0, #8]
   14e1e:	fa23 f101 	lsr.w	r1, r3, r1
   14e22:	07c9      	lsls	r1, r1, #31
   14e24:	d429      	bmi.n	14e7a <gpio_nrfx_pin_interrupt_configure+0x9a>
   14e26:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14e2a:	d126      	bne.n	14e7a <gpio_nrfx_pin_interrupt_configure+0x9a>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14e2c:	4a1b      	ldr	r2, [pc, #108]	; (14e9c <gpio_nrfx_pin_interrupt_configure+0xbc>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   14e2e:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14e32:	3380      	adds	r3, #128	; 0x80
   14e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   14e38:	07db      	lsls	r3, r3, #31
   14e3a:	d41e      	bmi.n	14e7a <gpio_nrfx_pin_interrupt_configure+0x9a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   14e3c:	f10d 0407 	add.w	r4, sp, #7
   14e40:	4621      	mov	r1, r4
   14e42:	4628      	mov	r0, r5
   14e44:	f004 f92e 	bl	190a4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   14e48:	4b15      	ldr	r3, [pc, #84]	; (14ea0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   14e4a:	4298      	cmp	r0, r3
   14e4c:	d114      	bne.n	14e78 <gpio_nrfx_pin_interrupt_configure+0x98>
			err = nrfx_gpiote_channel_alloc(&ch);
   14e4e:	4620      	mov	r0, r4
   14e50:	f004 f972 	bl	19138 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   14e54:	4b13      	ldr	r3, [pc, #76]	; (14ea4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   14e56:	4298      	cmp	r0, r3
   14e58:	d00e      	beq.n	14e78 <gpio_nrfx_pin_interrupt_configure+0x98>
				return -ENOMEM;
   14e5a:	f06f 000b 	mvn.w	r0, #11
}
   14e5e:	b005      	add	sp, #20
   14e60:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   14e62:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   14e66:	d005      	beq.n	14e74 <gpio_nrfx_pin_interrupt_configure+0x94>
   14e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   14e6c:	bf0c      	ite	eq
   14e6e:	2302      	moveq	r3, #2
   14e70:	2301      	movne	r3, #1
   14e72:	e7d1      	b.n	14e18 <gpio_nrfx_pin_interrupt_configure+0x38>
   14e74:	2303      	movs	r3, #3
   14e76:	e7cf      	b.n	14e18 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   14e78:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14e7a:	2300      	movs	r3, #0
   14e7c:	4628      	mov	r0, r5
   14e7e:	4619      	mov	r1, r3
   14e80:	aa02      	add	r2, sp, #8
   14e82:	f003 ffcf 	bl	18e24 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14e86:	4b07      	ldr	r3, [pc, #28]	; (14ea4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   14e88:	4298      	cmp	r0, r3
   14e8a:	d104      	bne.n	14e96 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   14e8c:	2101      	movs	r1, #1
   14e8e:	4628      	mov	r0, r5
   14e90:	f004 f958 	bl	19144 <nrfx_gpiote_trigger_enable>
   14e94:	e7b4      	b.n	14e00 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   14e96:	f06f 0004 	mvn.w	r0, #4
   14e9a:	e7e0      	b.n	14e5e <gpio_nrfx_pin_interrupt_configure+0x7e>
   14e9c:	40842500 	.word	0x40842500
   14ea0:	0bad0004 	.word	0x0bad0004
   14ea4:	0bad0000 	.word	0x0bad0000

00014ea8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14ea8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   14eaa:	f004 f935 	bl	19118 <nrfx_gpiote_is_init>
   14eae:	4604      	mov	r4, r0
   14eb0:	b968      	cbnz	r0, 14ece <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   14eb2:	f004 f909 	bl	190c8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   14eb6:	4b08      	ldr	r3, [pc, #32]	; (14ed8 <gpio_nrfx_init+0x30>)
   14eb8:	4298      	cmp	r0, r3
   14eba:	d10a      	bne.n	14ed2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   14ebc:	4621      	mov	r1, r4
   14ebe:	4807      	ldr	r0, [pc, #28]	; (14edc <gpio_nrfx_init+0x34>)
   14ec0:	f004 f8ea 	bl	19098 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14ec4:	4622      	mov	r2, r4
   14ec6:	2105      	movs	r1, #5
   14ec8:	2031      	movs	r0, #49	; 0x31
   14eca:	f7fe ff09 	bl	13ce0 <z_arm_irq_priority_set>
		return 0;
   14ece:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   14ed0:	bd10      	pop	{r4, pc}
		return -EIO;
   14ed2:	f06f 0004 	mvn.w	r0, #4
   14ed6:	e7fb      	b.n	14ed0 <gpio_nrfx_init+0x28>
   14ed8:	0bad0000 	.word	0x0bad0000
   14edc:	00014ee1 	.word	0x00014ee1

00014ee0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14ee0:	0943      	lsrs	r3, r0, #5
{
   14ee2:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14ee4:	d117      	bne.n	14f16 <nrfx_gpio_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14ee6:	4b0c      	ldr	r3, [pc, #48]	; (14f18 <nrfx_gpio_handler+0x38>)
   14ee8:	6859      	ldr	r1, [r3, #4]
   14eea:	b1a1      	cbz	r1, 14f16 <nrfx_gpio_handler+0x36>
   14eec:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
   14eee:	2501      	movs	r5, #1
   14ef0:	2c00      	cmp	r4, #0
   14ef2:	bf38      	it	cc
   14ef4:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   14ef6:	4e09      	ldr	r6, [pc, #36]	; (14f1c <nrfx_gpio_handler+0x3c>)
   14ef8:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
   14efa:	688a      	ldr	r2, [r1, #8]
   14efc:	402a      	ands	r2, r5
   14efe:	d002      	beq.n	14f06 <nrfx_gpio_handler+0x26>
			cb->handler(port, cb, cb->pin_mask & pins);
   14f00:	4630      	mov	r0, r6
   14f02:	684b      	ldr	r3, [r1, #4]
   14f04:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14f06:	b134      	cbz	r4, 14f16 <nrfx_gpio_handler+0x36>
	return node->next;
   14f08:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14f0a:	4621      	mov	r1, r4
   14f0c:	2b00      	cmp	r3, #0
   14f0e:	bf38      	it	cc
   14f10:	2300      	movcc	r3, #0
   14f12:	461c      	mov	r4, r3
   14f14:	e7f1      	b.n	14efa <nrfx_gpio_handler+0x1a>
}
   14f16:	bd70      	pop	{r4, r5, r6, pc}
   14f18:	2000d1f4 	.word	0x2000d1f4
   14f1c:	00022d4c 	.word	0x00022d4c

00014f20 <gpio_nrfx_pin_configure>:
{
   14f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14f24:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14f26:	f001 051f 	and.w	r5, r1, #31
   14f2a:	7b3b      	ldrb	r3, [r7, #12]
{
   14f2c:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   14f2e:	4614      	mov	r4, r2
{
   14f30:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14f32:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   14f36:	b9ca      	cbnz	r2, 14f6c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   14f38:	a902      	add	r1, sp, #8
   14f3a:	4628      	mov	r0, r5
   14f3c:	f004 f8b2 	bl	190a4 <nrfx_gpiote_channel_get>
   14f40:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   14f42:	4628      	mov	r0, r5
   14f44:	f004 f960 	bl	19208 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   14f48:	4b47      	ldr	r3, [pc, #284]	; (15068 <gpio_nrfx_pin_configure+0x148>)
   14f4a:	4298      	cmp	r0, r3
   14f4c:	d004      	beq.n	14f58 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   14f4e:	f06f 0004 	mvn.w	r0, #4
}
   14f52:	b005      	add	sp, #20
   14f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   14f58:	4284      	cmp	r4, r0
   14f5a:	d105      	bne.n	14f68 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   14f5c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14f60:	f004 f8e4 	bl	1912c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   14f64:	42a0      	cmp	r0, r4
   14f66:	d1f2      	bne.n	14f4e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   14f68:	2000      	movs	r0, #0
   14f6a:	e7f2      	b.n	14f52 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   14f6c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   14f70:	f10d 0103 	add.w	r1, sp, #3
   14f74:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   14f76:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   14f7a:	f004 f893 	bl	190a4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14f7e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   14f80:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14f82:	4649      	mov	r1, r9
   14f84:	4628      	mov	r0, r5
   14f86:	aa02      	add	r2, sp, #8
   14f88:	f003 ff4c 	bl	18e24 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14f8c:	4b36      	ldr	r3, [pc, #216]	; (15068 <gpio_nrfx_pin_configure+0x148>)
   14f8e:	4298      	cmp	r0, r3
   14f90:	d002      	beq.n	14f98 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14f92:	f06f 0015 	mvn.w	r0, #21
   14f96:	e7dc      	b.n	14f52 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   14f98:	4580      	cmp	r8, r0
   14f9a:	d103      	bne.n	14fa4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   14f9c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14fa0:	f004 f8c4 	bl	1912c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   14fa4:	05a3      	lsls	r3, r4, #22
   14fa6:	d54c      	bpl.n	15042 <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14fa8:	4b30      	ldr	r3, [pc, #192]	; (1506c <gpio_nrfx_pin_configure+0x14c>)
   14faa:	4a31      	ldr	r2, [pc, #196]	; (15070 <gpio_nrfx_pin_configure+0x150>)
   14fac:	4023      	ands	r3, r4
   14fae:	4293      	cmp	r3, r2
   14fb0:	d039      	beq.n	15026 <gpio_nrfx_pin_configure+0x106>
   14fb2:	d80c      	bhi.n	14fce <gpio_nrfx_pin_configure+0xae>
   14fb4:	2b06      	cmp	r3, #6
   14fb6:	d014      	beq.n	14fe2 <gpio_nrfx_pin_configure+0xc2>
   14fb8:	d804      	bhi.n	14fc4 <gpio_nrfx_pin_configure+0xa4>
   14fba:	b193      	cbz	r3, 14fe2 <gpio_nrfx_pin_configure+0xc2>
   14fbc:	2b02      	cmp	r3, #2
   14fbe:	d1e8      	bne.n	14f92 <gpio_nrfx_pin_configure+0x72>
   14fc0:	2304      	movs	r3, #4
   14fc2:	e00e      	b.n	14fe2 <gpio_nrfx_pin_configure+0xc2>
   14fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14fc8:	d1e3      	bne.n	14f92 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   14fca:	2301      	movs	r3, #1
   14fcc:	e009      	b.n	14fe2 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14fce:	4a29      	ldr	r2, [pc, #164]	; (15074 <gpio_nrfx_pin_configure+0x154>)
   14fd0:	4293      	cmp	r3, r2
   14fd2:	d02a      	beq.n	1502a <gpio_nrfx_pin_configure+0x10a>
   14fd4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14fd8:	d029      	beq.n	1502e <gpio_nrfx_pin_configure+0x10e>
   14fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14fde:	d1d8      	bne.n	14f92 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   14fe0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   14fe2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   14fe6:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   14fea:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   14fee:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   14ff0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   14ff4:	bf4c      	ite	mi
   14ff6:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   14ff8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   14ffc:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   14ffe:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   15002:	d516      	bpl.n	15032 <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   15004:	2101      	movs	r1, #1
   15006:	687b      	ldr	r3, [r7, #4]
   15008:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1500c:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1500e:	2200      	movs	r2, #0
   15010:	4628      	mov	r0, r5
   15012:	a901      	add	r1, sp, #4
   15014:	f003 ffac 	bl	18f70 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   15018:	4b13      	ldr	r3, [pc, #76]	; (15068 <gpio_nrfx_pin_configure+0x148>)
   1501a:	4298      	cmp	r0, r3
   1501c:	bf14      	ite	ne
   1501e:	f06f 0015 	mvnne.w	r0, #21
   15022:	2000      	moveq	r0, #0
   15024:	e795      	b.n	14f52 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   15026:	2307      	movs	r3, #7
   15028:	e7db      	b.n	14fe2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1502a:	2305      	movs	r3, #5
   1502c:	e7d9      	b.n	14fe2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1502e:	2303      	movs	r3, #3
   15030:	e7d7      	b.n	14fe2 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   15032:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   15034:	bf41      	itttt	mi
   15036:	2101      	movmi	r1, #1
   15038:	687b      	ldrmi	r3, [r7, #4]
   1503a:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1503e:	60de      	strmi	r6, [r3, #12]
}
   15040:	e7e5      	b.n	1500e <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
   15042:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   15044:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   15048:	bf4c      	ite	mi
   1504a:	2403      	movmi	r4, #3
   1504c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   15050:	461a      	mov	r2, r3
   15052:	4628      	mov	r0, r5
   15054:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   15056:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1505a:	f003 fee3 	bl	18e24 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1505e:	4b02      	ldr	r3, [pc, #8]	; (15068 <gpio_nrfx_pin_configure+0x148>)
   15060:	4298      	cmp	r0, r3
   15062:	d081      	beq.n	14f68 <gpio_nrfx_pin_configure+0x48>
   15064:	e795      	b.n	14f92 <gpio_nrfx_pin_configure+0x72>
   15066:	bf00      	nop
   15068:	0bad0000 	.word	0x0bad0000
   1506c:	00f00006 	.word	0x00f00006
   15070:	00100006 	.word	0x00100006
   15074:	00400002 	.word	0x00400002

00015078 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15078:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1507a:	794b      	ldrb	r3, [r1, #5]
   1507c:	2b01      	cmp	r3, #1
   1507e:	d026      	beq.n	150ce <uarte_nrfx_configure+0x56>
   15080:	2b03      	cmp	r3, #3
   15082:	d121      	bne.n	150c8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15084:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15086:	798b      	ldrb	r3, [r1, #6]
   15088:	2b03      	cmp	r3, #3
   1508a:	d11d      	bne.n	150c8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1508c:	79cc      	ldrb	r4, [r1, #7]
   1508e:	b10c      	cbz	r4, 15094 <uarte_nrfx_configure+0x1c>
   15090:	2c01      	cmp	r4, #1
   15092:	d119      	bne.n	150c8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   15094:	790a      	ldrb	r2, [r1, #4]
   15096:	b112      	cbz	r2, 1509e <uarte_nrfx_configure+0x26>
   15098:	2a02      	cmp	r2, #2
   1509a:	d115      	bne.n	150c8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1509c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1509e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   150a0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   150a2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   150a6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   150a8:	d065      	beq.n	15176 <uarte_nrfx_configure+0xfe>
   150aa:	d82d      	bhi.n	15108 <uarte_nrfx_configure+0x90>
   150ac:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   150b0:	d064      	beq.n	1517c <uarte_nrfx_configure+0x104>
   150b2:	d816      	bhi.n	150e2 <uarte_nrfx_configure+0x6a>
   150b4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   150b8:	d062      	beq.n	15180 <uarte_nrfx_configure+0x108>
   150ba:	d80a      	bhi.n	150d2 <uarte_nrfx_configure+0x5a>
   150bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   150c0:	d061      	beq.n	15186 <uarte_nrfx_configure+0x10e>
   150c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   150c6:	d061      	beq.n	1518c <uarte_nrfx_configure+0x114>
   150c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   150cc:	e052      	b.n	15174 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   150ce:	2600      	movs	r6, #0
   150d0:	e7d9      	b.n	15086 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   150d2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   150d6:	d05c      	beq.n	15192 <uarte_nrfx_configure+0x11a>
   150d8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   150dc:	d1f4      	bne.n	150c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   150de:	4b37      	ldr	r3, [pc, #220]	; (151bc <uarte_nrfx_configure+0x144>)
   150e0:	e03c      	b.n	1515c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   150e2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   150e6:	d057      	beq.n	15198 <uarte_nrfx_configure+0x120>
   150e8:	d807      	bhi.n	150fa <uarte_nrfx_configure+0x82>
   150ea:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   150ee:	d055      	beq.n	1519c <uarte_nrfx_configure+0x124>
   150f0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   150f4:	d1e8      	bne.n	150c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   150f6:	4b32      	ldr	r3, [pc, #200]	; (151c0 <uarte_nrfx_configure+0x148>)
   150f8:	e030      	b.n	1515c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   150fa:	f647 2712 	movw	r7, #31250	; 0x7a12
   150fe:	42bb      	cmp	r3, r7
   15100:	d1e2      	bne.n	150c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15102:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15106:	e029      	b.n	1515c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   15108:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1510c:	d048      	beq.n	151a0 <uarte_nrfx_configure+0x128>
   1510e:	d813      	bhi.n	15138 <uarte_nrfx_configure+0xc0>
   15110:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   15114:	d047      	beq.n	151a6 <uarte_nrfx_configure+0x12e>
   15116:	d809      	bhi.n	1512c <uarte_nrfx_configure+0xb4>
   15118:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1511c:	42bb      	cmp	r3, r7
   1511e:	d044      	beq.n	151aa <uarte_nrfx_configure+0x132>
   15120:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15124:	d1d0      	bne.n	150c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15126:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1512a:	e017      	b.n	1515c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1512c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15130:	d1ca      	bne.n	150c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15132:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15136:	e011      	b.n	1515c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   15138:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1513c:	d038      	beq.n	151b0 <uarte_nrfx_configure+0x138>
   1513e:	d808      	bhi.n	15152 <uarte_nrfx_configure+0xda>
   15140:	4f20      	ldr	r7, [pc, #128]	; (151c4 <uarte_nrfx_configure+0x14c>)
   15142:	42bb      	cmp	r3, r7
   15144:	d037      	beq.n	151b6 <uarte_nrfx_configure+0x13e>
   15146:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1514a:	d1bd      	bne.n	150c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1514c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15150:	e004      	b.n	1515c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   15152:	4f1d      	ldr	r7, [pc, #116]	; (151c8 <uarte_nrfx_configure+0x150>)
   15154:	42bb      	cmp	r3, r7
   15156:	d1b7      	bne.n	150c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1515c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   15160:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   15162:	4334      	orrs	r4, r6
   15164:	4322      	orrs	r2, r4
   15166:	3304      	adds	r3, #4
   15168:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1516a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1516e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15172:	2000      	movs	r0, #0
}
   15174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15176:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1517a:	e7ef      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1517c:	4b13      	ldr	r3, [pc, #76]	; (151cc <uarte_nrfx_configure+0x154>)
   1517e:	e7ed      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15180:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15184:	e7ea      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   15186:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1518a:	e7e7      	b.n	1515c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1518c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15190:	e7e4      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15192:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15196:	e7e1      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15198:	4b0d      	ldr	r3, [pc, #52]	; (151d0 <uarte_nrfx_configure+0x158>)
   1519a:	e7df      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1519c:	4b0d      	ldr	r3, [pc, #52]	; (151d4 <uarte_nrfx_configure+0x15c>)
   1519e:	e7dd      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   151a0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   151a4:	e7da      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   151a6:	4b0c      	ldr	r3, [pc, #48]	; (151d8 <uarte_nrfx_configure+0x160>)
   151a8:	e7d8      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   151aa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   151ae:	e7d5      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   151b0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   151b4:	e7d2      	b.n	1515c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   151b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   151ba:	e7cf      	b.n	1515c <uarte_nrfx_configure+0xe4>
   151bc:	0013b000 	.word	0x0013b000
   151c0:	004ea000 	.word	0x004ea000
   151c4:	0003d090 	.word	0x0003d090
   151c8:	000f4240 	.word	0x000f4240
   151cc:	00275000 	.word	0x00275000
   151d0:	0075c000 	.word	0x0075c000
   151d4:	003af000 	.word	0x003af000
   151d8:	013a9000 	.word	0x013a9000

000151dc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   151dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151de:	4605      	mov	r5, r0
   151e0:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   151e2:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   151e4:	f00c fddf 	bl	21da6 <k_is_in_isr>
   151e8:	b910      	cbnz	r0, 151f0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   151ea:	4b20      	ldr	r3, [pc, #128]	; (1526c <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   151ec:	781b      	ldrb	r3, [r3, #0]
   151ee:	b983      	cbnz	r3, 15212 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   151f0:	f04f 0320 	mov.w	r3, #32
   151f4:	f3ef 8411 	mrs	r4, BASEPRI
   151f8:	f383 8812 	msr	BASEPRI_MAX, r3
   151fc:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   15200:	4628      	mov	r0, r5
   15202:	f00b f885 	bl	20310 <is_tx_ready>
   15206:	bb28      	cbnz	r0, 15254 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   15208:	f384 8811 	msr	BASEPRI, r4
   1520c:	f3bf 8f6f 	isb	sy
}
   15210:	e7ee      	b.n	151f0 <uarte_nrfx_poll_out+0x14>
{
   15212:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   15214:	4628      	mov	r0, r5
   15216:	f00b f87b 	bl	20310 <is_tx_ready>
   1521a:	b970      	cbnz	r0, 1523a <uarte_nrfx_poll_out+0x5e>
   1521c:	2001      	movs	r0, #1
   1521e:	f00b fdd4 	bl	20dca <nrfx_busy_wait>
   15222:	3c01      	subs	r4, #1
   15224:	d1f6      	bne.n	15214 <uarte_nrfx_poll_out+0x38>
   15226:	2100      	movs	r1, #0
   15228:	2021      	movs	r0, #33	; 0x21
   1522a:	f007 ffb1 	bl	1d190 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1522e:	e7f0      	b.n	15212 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   15230:	f384 8811 	msr	BASEPRI, r4
   15234:	f3bf 8f6f 	isb	sy
}
   15238:	e7f5      	b.n	15226 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1523a:	f04f 0320 	mov.w	r3, #32
   1523e:	f3ef 8411 	mrs	r4, BASEPRI
   15242:	f383 8812 	msr	BASEPRI_MAX, r3
   15246:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1524a:	4628      	mov	r0, r5
   1524c:	f00b f860 	bl	20310 <is_tx_ready>
   15250:	2800      	cmp	r0, #0
   15252:	d0ed      	beq.n	15230 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   15254:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   15256:	2201      	movs	r2, #1
   15258:	4628      	mov	r0, r5
	data->char_out = c;
   1525a:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1525e:	f00b f8ea 	bl	20436 <tx_start>
	__asm__ volatile(
   15262:	f384 8811 	msr	BASEPRI, r4
   15266:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1526c:	2000f53d 	.word	0x2000f53d

00015270 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   15270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15274:	2300      	movs	r3, #0
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   15276:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15278:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   1527a:	683c      	ldr	r4, [r7, #0]
   1527c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   15280:	6028      	str	r0, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   15282:	6843      	ldr	r3, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15284:	68de      	ldr	r6, [r3, #12]
   15286:	1c71      	adds	r1, r6, #1
   15288:	d00b      	beq.n	152a2 <uarte_instance_init.isra.0+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1528a:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   1528c:	f8df c150 	ldr.w	ip, [pc, #336]	; 153e0 <uarte_instance_init.isra.0+0x170>
    *p_pin = pin_number & 0x1F;
   15290:	f006 021f 	and.w	r2, r6, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15294:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   15296:	f8cc 1008 	str.w	r1, [ip, #8]
    reg->PIN_CNF[pin_number] = cnf;
   1529a:	2103      	movs	r1, #3
   1529c:	3280      	adds	r2, #128	; 0x80
   1529e:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   152a2:	6919      	ldr	r1, [r3, #16]
   152a4:	1c4a      	adds	r2, r1, #1
   152a6:	d00d      	beq.n	152c4 <uarte_instance_init.isra.0+0x54>
			nrf_gpio_cfg_input(cfg->rx_pin,
   152a8:	7f1a      	ldrb	r2, [r3, #28]
   152aa:	f8df c134 	ldr.w	ip, [pc, #308]	; 153e0 <uarte_instance_init.isra.0+0x170>
   152ae:	2a00      	cmp	r2, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   152b0:	bf14      	ite	ne
   152b2:	f04f 0e0c 	movne.w	lr, #12
   152b6:	f04f 0e00 	moveq.w	lr, #0
    *p_pin = pin_number & 0x1F;
   152ba:	f001 021f 	and.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
   152be:	3280      	adds	r2, #128	; 0x80
   152c0:	f84c e022 	str.w	lr, [ip, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   152c4:	f8d3 c014 	ldr.w	ip, [r3, #20]
   152c8:	f1bc 3fff 	cmp.w	ip, #4294967295
   152cc:	d00e      	beq.n	152ec <uarte_instance_init.isra.0+0x7c>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   152ce:	f04f 0e01 	mov.w	lr, #1
    p_reg->OUTSET = set_mask;
   152d2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 153e0 <uarte_instance_init.isra.0+0x170>
    *p_pin = pin_number & 0x1F;
   152d6:	f00c 021f 	and.w	r2, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   152da:	fa0e fe02 	lsl.w	lr, lr, r2
    p_reg->OUTSET = set_mask;
   152de:	f8c8 e008 	str.w	lr, [r8, #8]
    reg->PIN_CNF[pin_number] = cnf;
   152e2:	f04f 0e03 	mov.w	lr, #3
   152e6:	3280      	adds	r2, #128	; 0x80
   152e8:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   152ec:	f8d3 e018 	ldr.w	lr, [r3, #24]
   152f0:	f1be 3fff 	cmp.w	lr, #4294967295
   152f4:	d00d      	beq.n	15312 <uarte_instance_init.isra.0+0xa2>
			nrf_gpio_cfg_input(cfg->cts_pin,
   152f6:	7f5a      	ldrb	r2, [r3, #29]
   152f8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 153e0 <uarte_instance_init.isra.0+0x170>
   152fc:	2a00      	cmp	r2, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   152fe:	bf14      	ite	ne
   15300:	f04f 090c 	movne.w	r9, #12
   15304:	f04f 0900 	moveq.w	r9, #0
    *p_pin = pin_number & 0x1F;
   15308:	f00e 021f 	and.w	r2, lr, #31
    reg->PIN_CNF[pin_number] = cnf;
   1530c:	3280      	adds	r2, #128	; 0x80
   1530e:	f848 9022 	str.w	r9, [r8, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   15312:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   15314:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15318:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1531c:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.RTS = pselrts;
   1531e:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   15322:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   15324:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   15328:	f7ff fea6 	bl	15078 <uarte_nrfx_configure>
	if (err) {
   1532c:	4606      	mov	r6, r0
   1532e:	b9a8      	cbnz	r0, 1535c <uarte_instance_init.isra.0+0xec>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   15330:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   15332:	0799      	lsls	r1, r3, #30
   15334:	d522      	bpl.n	1537c <uarte_instance_init.isra.0+0x10c>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   15336:	f105 0016 	add.w	r0, r5, #22
   1533a:	f003 fcf9 	bl	18d30 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1533e:	4b23      	ldr	r3, [pc, #140]	; (153cc <uarte_instance_init.isra.0+0x15c>)
   15340:	4298      	cmp	r0, r3
   15342:	d00e      	beq.n	15362 <uarte_instance_init.isra.0+0xf2>
   15344:	4b22      	ldr	r3, [pc, #136]	; (153d0 <uarte_instance_init.isra.0+0x160>)
   15346:	4923      	ldr	r1, [pc, #140]	; (153d4 <uarte_instance_init.isra.0+0x164>)
		LOG_ERR("Failed to allocate PPI Channel");
   15348:	4823      	ldr	r0, [pc, #140]	; (153d8 <uarte_instance_init.isra.0+0x168>)
   1534a:	1ac9      	subs	r1, r1, r3
   1534c:	08c9      	lsrs	r1, r1, #3
   1534e:	0189      	lsls	r1, r1, #6
   15350:	f041 0101 	orr.w	r1, r1, #1
   15354:	f009 ff5a 	bl	1f20c <log_0>
		return -EIO;
   15358:	f06f 0604 	mvn.w	r6, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1535c:	4630      	mov	r0, r6
   1535e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15362:	7dab      	ldrb	r3, [r5, #22]
   15364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15368:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1536c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   15370:	2301      	movs	r3, #1
   15372:	7daa      	ldrb	r2, [r5, #22]
   15374:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   15376:	4a19      	ldr	r2, [pc, #100]	; (153dc <uarte_instance_init.isra.0+0x16c>)
   15378:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1537c:	2308      	movs	r3, #8
   1537e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   15382:	7a3b      	ldrb	r3, [r7, #8]
   15384:	b95b      	cbnz	r3, 1539e <uarte_instance_init.isra.0+0x12e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15386:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1538a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1538e:	f105 0315 	add.w	r3, r5, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15392:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15396:	2301      	movs	r3, #1
   15398:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1539c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1539e:	687b      	ldr	r3, [r7, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   153a0:	3514      	adds	r5, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   153a2:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   153a4:	bf5c      	itt	pl
   153a6:	f44f 7280 	movpl.w	r2, #256	; 0x100
   153aa:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   153ae:	06db      	lsls	r3, r3, #27
   153b0:	bf44      	itt	mi
   153b2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   153b6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   153ba:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   153bc:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   153c0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   153c4:	2301      	movs	r3, #1
   153c6:	60a3      	str	r3, [r4, #8]
   153c8:	60e3      	str	r3, [r4, #12]
	return 0;
   153ca:	e7c7      	b.n	1535c <uarte_instance_init.isra.0+0xec>
   153cc:	0bad0000 	.word	0x0bad0000
   153d0:	00022fd8 	.word	0x00022fd8
   153d4:	00023080 	.word	0x00023080
   153d8:	00023c77 	.word	0x00023c77
   153dc:	40017000 	.word	0x40017000
   153e0:	40842500 	.word	0x40842500

000153e4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   153e4:	4919      	ldr	r1, [pc, #100]	; (1544c <sys_clock_timeout_handler+0x68>)
{
   153e6:	b570      	push	{r4, r5, r6, lr}
   153e8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   153ea:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   153ee:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   153f0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   153f4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   153f8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   153fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   153fe:	f04f 0500 	mov.w	r5, #0
   15402:	d20a      	bcs.n	1541a <sys_clock_timeout_handler+0x36>
		return true;
   15404:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   15406:	4b12      	ldr	r3, [pc, #72]	; (15450 <sys_clock_timeout_handler+0x6c>)
   15408:	6819      	ldr	r1, [r3, #0]
   1540a:	060a      	lsls	r2, r1, #24
   1540c:	0a0b      	lsrs	r3, r1, #8
   1540e:	1992      	adds	r2, r2, r6
   15410:	4910      	ldr	r1, [pc, #64]	; (15454 <sys_clock_timeout_handler+0x70>)
   15412:	f143 0300 	adc.w	r3, r3, #0
   15416:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1541a:	f008 f83f 	bl	1d49c <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1541e:	00a3      	lsls	r3, r4, #2
   15420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15424:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   15428:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1542c:	42b2      	cmp	r2, r6
   1542e:	d10b      	bne.n	15448 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   15430:	b91d      	cbnz	r5, 1543a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   15432:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   15436:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1543a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1543e:	4b06      	ldr	r3, [pc, #24]	; (15458 <sys_clock_timeout_handler+0x74>)
   15440:	fa00 f404 	lsl.w	r4, r0, r4
   15444:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   15448:	bd70      	pop	{r4, r5, r6, pc}
   1544a:	bf00      	nop
   1544c:	2000cbf0 	.word	0x2000cbf0
   15450:	2000d208 	.word	0x2000d208
   15454:	2000cbd8 	.word	0x2000cbd8
   15458:	40015000 	.word	0x40015000

0001545c <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1545c:	2301      	movs	r3, #1
   1545e:	4083      	lsls	r3, r0
{
   15460:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   15462:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15464:	4a0c      	ldr	r2, [pc, #48]	; (15498 <compare_int_lock+0x3c>)
   15466:	e8d2 1fef 	ldaex	r1, [r2]
   1546a:	ea01 0c04 	and.w	ip, r1, r4
   1546e:	e8c2 cfee 	stlex	lr, ip, [r2]
   15472:	f1be 0f00 	cmp.w	lr, #0
   15476:	d1f6      	bne.n	15466 <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15478:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1547c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   15480:	4a06      	ldr	r2, [pc, #24]	; (1549c <compare_int_lock+0x40>)
   15482:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   15486:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1548a:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1548e:	420b      	tst	r3, r1
}
   15490:	bf14      	ite	ne
   15492:	2001      	movne	r0, #1
   15494:	2000      	moveq	r0, #0
   15496:	bd10      	pop	{r4, pc}
   15498:	2000d204 	.word	0x2000d204
   1549c:	40015000 	.word	0x40015000

000154a0 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   154a0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   154a2:	4a0e      	ldr	r2, [pc, #56]	; (154dc <compare_int_unlock.part.0+0x3c>)
   154a4:	4083      	lsls	r3, r0
   154a6:	e8d2 1fef 	ldaex	r1, [r2]
   154aa:	4319      	orrs	r1, r3
   154ac:	e8c2 1fec 	stlex	ip, r1, [r2]
   154b0:	f1bc 0f00 	cmp.w	ip, #0
   154b4:	d1f7      	bne.n	154a6 <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   154b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   154ba:	4a09      	ldr	r2, [pc, #36]	; (154e0 <compare_int_unlock.part.0+0x40>)
   154bc:	4083      	lsls	r3, r0
   154be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   154c2:	4b08      	ldr	r3, [pc, #32]	; (154e4 <compare_int_unlock.part.0+0x44>)
   154c4:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   154c8:	fa23 f000 	lsr.w	r0, r3, r0
   154cc:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   154ce:	bf42      	ittt	mi
   154d0:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   154d4:	4b04      	ldrmi	r3, [pc, #16]	; (154e8 <compare_int_unlock.part.0+0x48>)
   154d6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   154da:	4770      	bx	lr
   154dc:	2000d204 	.word	0x2000d204
   154e0:	40015000 	.word	0x40015000
   154e4:	2000d200 	.word	0x2000d200
   154e8:	e000e100 	.word	0xe000e100

000154ec <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   154ec:	4b0d      	ldr	r3, [pc, #52]	; (15524 <z_nrf_rtc_timer_read+0x38>)
   154ee:	681b      	ldr	r3, [r3, #0]
   154f0:	0a19      	lsrs	r1, r3, #8
   154f2:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   154f4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   154f8:	4b0b      	ldr	r3, [pc, #44]	; (15528 <z_nrf_rtc_timer_read+0x3c>)
   154fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   154fe:	18c0      	adds	r0, r0, r3
   15500:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   15504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15508:	d20a      	bcs.n	15520 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1550a:	4b08      	ldr	r3, [pc, #32]	; (1552c <z_nrf_rtc_timer_read+0x40>)
   1550c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15510:	4299      	cmp	r1, r3
   15512:	bf08      	it	eq
   15514:	4290      	cmpeq	r0, r2
   15516:	d203      	bcs.n	15520 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   15518:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1551c:	f141 0100 	adc.w	r1, r1, #0
}
   15520:	4770      	bx	lr
   15522:	bf00      	nop
   15524:	2000d208 	.word	0x2000d208
   15528:	40015000 	.word	0x40015000
   1552c:	2000cbd8 	.word	0x2000cbd8

00015530 <compare_set>:
{
   15530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15534:	4616      	mov	r6, r2
   15536:	461f      	mov	r7, r3
   15538:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1553a:	f7ff ff8f 	bl	1545c <compare_int_lock>
   1553e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   15540:	f7ff ffd4 	bl	154ec <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   15544:	42b9      	cmp	r1, r7
   15546:	bf08      	it	eq
   15548:	42b0      	cmpeq	r0, r6
   1554a:	d27b      	bcs.n	15644 <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
   1554c:	2300      	movs	r3, #0
   1554e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   15552:	ebb6 0800 	subs.w	r8, r6, r0
   15556:	eb67 0901 	sbc.w	r9, r7, r1
   1555a:	454b      	cmp	r3, r9
   1555c:	bf08      	it	eq
   1555e:	4542      	cmpeq	r2, r8
   15560:	d37d      	bcc.n	1565e <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
   15562:	4b40      	ldr	r3, [pc, #256]	; (15664 <compare_set+0x134>)
   15564:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   15568:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1556c:	429f      	cmp	r7, r3
   1556e:	bf08      	it	eq
   15570:	4296      	cmpeq	r6, r2
   15572:	d051      	beq.n	15618 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15574:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   15578:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1557c:	4614      	mov	r4, r2
   1557e:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   15582:	f105 0850 	add.w	r8, r5, #80	; 0x50
   15586:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1558a:	ea4f 0888 	mov.w	r8, r8, lsl #2
   1558e:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15592:	fa1f f888 	uxth.w	r8, r8
   15596:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   1559a:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1559e:	4b32      	ldr	r3, [pc, #200]	; (15668 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   155a0:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   155a4:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
   155a8:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   155ac:	eba0 000a 	sub.w	r0, r0, sl
   155b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   155b4:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   155b8:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   155ba:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   155be:	d105      	bne.n	155cc <compare_set+0x9c>
   155c0:	9201      	str	r2, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   155c2:	2013      	movs	r0, #19
   155c4:	f00c fe51 	bl	2226a <z_impl_k_busy_wait>
   155c8:	4b27      	ldr	r3, [pc, #156]	; (15668 <compare_set+0x138>)
   155ca:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   155cc:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   155d0:	eba4 000c 	sub.w	r0, r4, ip
   155d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   155d8:	2100      	movs	r1, #0
			cc_val = now + 2;
   155da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   155de:	bf88      	it	hi
   155e0:	4664      	movhi	r4, ip
   155e2:	f8c8 1000 	str.w	r1, [r8]
   155e6:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   155ea:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
   155ee:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   155f2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   155f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   155fa:	4582      	cmp	sl, r0
   155fc:	d006      	beq.n	1560c <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
   155fe:	1a20      	subs	r0, r4, r0
   15600:	3802      	subs	r0, #2
   15602:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   15606:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1560a:	d819      	bhi.n	15640 <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
   1560c:	1aa4      	subs	r4, r4, r2
   1560e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   15612:	1932      	adds	r2, r6, r4
   15614:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   15618:	4c12      	ldr	r4, [pc, #72]	; (15664 <compare_set+0x134>)
   1561a:	0129      	lsls	r1, r5, #4
   1561c:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   15620:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   15624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
   15626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
   15628:	5062      	str	r2, [r4, r1]
	return ret;
   1562a:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
   1562c:	6043      	str	r3, [r0, #4]
	if (key) {
   1562e:	9b00      	ldr	r3, [sp, #0]
   15630:	b113      	cbz	r3, 15638 <compare_set+0x108>
   15632:	4628      	mov	r0, r5
   15634:	f7ff ff34 	bl	154a0 <compare_int_unlock.part.0>
}
   15638:	4620      	mov	r0, r4
   1563a:	b003      	add	sp, #12
   1563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15640:	4620      	mov	r0, r4
   15642:	e7b1      	b.n	155a8 <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
   15644:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15646:	4a09      	ldr	r2, [pc, #36]	; (1566c <compare_set+0x13c>)
   15648:	40ab      	lsls	r3, r5
   1564a:	e8d2 1fef 	ldaex	r1, [r2]
   1564e:	4319      	orrs	r1, r3
   15650:	e8c2 1fe0 	stlex	r0, r1, [r2]
   15654:	2800      	cmp	r0, #0
   15656:	d1f8      	bne.n	1564a <compare_set+0x11a>
   15658:	4632      	mov	r2, r6
   1565a:	463b      	mov	r3, r7
   1565c:	e7dc      	b.n	15618 <compare_set+0xe8>
			return -EINVAL;
   1565e:	f06f 0415 	mvn.w	r4, #21
   15662:	e7e4      	b.n	1562e <compare_set+0xfe>
   15664:	2000cbe0 	.word	0x2000cbe0
   15668:	40015000 	.word	0x40015000
   1566c:	2000d200 	.word	0x2000d200

00015670 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   15670:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   15672:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   15674:	f04f 30ff 	mov.w	r0, #4294967295
   15678:	f04f 31ff 	mov.w	r1, #4294967295
   1567c:	4d16      	ldr	r5, [pc, #88]	; (156d8 <sys_clock_driver_init+0x68>)
   1567e:	4b17      	ldr	r3, [pc, #92]	; (156dc <sys_clock_driver_init+0x6c>)
   15680:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   15684:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   15688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1568c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1568e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15692:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   15696:	4b12      	ldr	r3, [pc, #72]	; (156e0 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   15698:	2101      	movs	r1, #1
   1569a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1569e:	2015      	movs	r0, #21
   156a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   156a4:	4622      	mov	r2, r4
   156a6:	f7fe fb1b 	bl	13ce0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   156aa:	2015      	movs	r0, #21
   156ac:	f7fe fafa 	bl	13ca4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   156b0:	2301      	movs	r3, #1
   156b2:	4a0c      	ldr	r2, [pc, #48]	; (156e4 <sys_clock_driver_init+0x74>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   156b4:	4620      	mov	r0, r4
   156b6:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   156b8:	4a0b      	ldr	r2, [pc, #44]	; (156e8 <sys_clock_driver_init+0x78>)
   156ba:	602b      	str	r3, [r5, #0]
   156bc:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   156be:	4b0b      	ldr	r3, [pc, #44]	; (156ec <sys_clock_driver_init+0x7c>)
   156c0:	4a0b      	ldr	r2, [pc, #44]	; (156f0 <sys_clock_driver_init+0x80>)
   156c2:	9300      	str	r3, [sp, #0]
   156c4:	9401      	str	r4, [sp, #4]
   156c6:	2300      	movs	r3, #0
   156c8:	f7ff ff32 	bl	15530 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   156cc:	4630      	mov	r0, r6
   156ce:	f7ff fad9 	bl	14c84 <z_nrf_clock_control_lf_on>

	return 0;
}
   156d2:	4620      	mov	r0, r4
   156d4:	b002      	add	sp, #8
   156d6:	bd70      	pop	{r4, r5, r6, pc}
   156d8:	40015000 	.word	0x40015000
   156dc:	2000cbe0 	.word	0x2000cbe0
   156e0:	e000e100 	.word	0xe000e100
   156e4:	40015008 	.word	0x40015008
   156e8:	2000d204 	.word	0x2000d204
   156ec:	000153e5 	.word	0x000153e5
   156f0:	007fffff 	.word	0x007fffff

000156f4 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   156f4:	4b33      	ldr	r3, [pc, #204]	; (157c4 <rtc_nrf_isr+0xd0>)
{
   156f6:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   156fa:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   156fe:	079a      	lsls	r2, r3, #30
   15700:	d509      	bpl.n	15716 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15702:	4b31      	ldr	r3, [pc, #196]	; (157c8 <rtc_nrf_isr+0xd4>)
   15704:	681a      	ldr	r2, [r3, #0]
   15706:	b132      	cbz	r2, 15716 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15708:	2200      	movs	r2, #0
   1570a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   1570c:	4a2f      	ldr	r2, [pc, #188]	; (157cc <rtc_nrf_isr+0xd8>)
   1570e:	681b      	ldr	r3, [r3, #0]
   15710:	6813      	ldr	r3, [r2, #0]
   15712:	3301      	adds	r3, #1
   15714:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   15716:	f04f 0320 	mov.w	r3, #32
   1571a:	f3ef 8211 	mrs	r2, BASEPRI
   1571e:	f383 8812 	msr	BASEPRI_MAX, r3
   15722:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   15726:	4b27      	ldr	r3, [pc, #156]	; (157c4 <rtc_nrf_isr+0xd0>)
   15728:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1572c:	03db      	lsls	r3, r3, #15
   1572e:	d50e      	bpl.n	1574e <rtc_nrf_isr+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15730:	4b27      	ldr	r3, [pc, #156]	; (157d0 <rtc_nrf_isr+0xdc>)
   15732:	e8d3 1fef 	ldaex	r1, [r3]
   15736:	f021 0001 	bic.w	r0, r1, #1
   1573a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1573e:	2c00      	cmp	r4, #0
   15740:	d1f7      	bne.n	15732 <rtc_nrf_isr+0x3e>
   15742:	4b24      	ldr	r3, [pc, #144]	; (157d4 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   15744:	2900      	cmp	r1, #0
   15746:	d136      	bne.n	157b6 <rtc_nrf_isr+0xc2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15748:	6819      	ldr	r1, [r3, #0]
		if (result) {
   1574a:	2900      	cmp	r1, #0
   1574c:	d133      	bne.n	157b6 <rtc_nrf_isr+0xc2>
{
   1574e:	2300      	movs	r3, #0
	__asm__ volatile(
   15750:	f382 8811 	msr	BASEPRI, r2
   15754:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   15758:	b353      	cbz	r3, 157b0 <rtc_nrf_isr+0xbc>
		curr_time = z_nrf_rtc_timer_read();
   1575a:	f7ff fec7 	bl	154ec <z_nrf_rtc_timer_read>
   1575e:	4604      	mov	r4, r0
	__asm__ volatile(
   15760:	f04f 0320 	mov.w	r3, #32
   15764:	f3ef 8011 	mrs	r0, BASEPRI
   15768:	f383 8812 	msr	BASEPRI_MAX, r3
   1576c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   15770:	4b19      	ldr	r3, [pc, #100]	; (157d8 <rtc_nrf_isr+0xe4>)
   15772:	2200      	movs	r2, #0
   15774:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   15778:	4549      	cmp	r1, r9
   1577a:	bf08      	it	eq
   1577c:	4544      	cmpeq	r4, r8
   1577e:	d31f      	bcc.n	157c0 <rtc_nrf_isr+0xcc>
			user_context = cc_data[chan].user_context;
   15780:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15784:	f04f 34ff 	mov.w	r4, #4294967295
   15788:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
   1578c:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1578e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15792:	e9c3 4502 	strd	r4, r5, [r3, #8]
   15796:	4b0b      	ldr	r3, [pc, #44]	; (157c4 <rtc_nrf_isr+0xd0>)
   15798:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   1579c:	f380 8811 	msr	BASEPRI, r0
   157a0:	f3bf 8f6f 	isb	sy
		if (handler) {
   157a4:	b121      	cbz	r1, 157b0 <rtc_nrf_isr+0xbc>
			handler(chan, expire_time, user_context);
   157a6:	4642      	mov	r2, r8
   157a8:	464b      	mov	r3, r9
   157aa:	2000      	movs	r0, #0
   157ac:	9600      	str	r6, [sp, #0]
   157ae:	4788      	blx	r1
}
   157b0:	b002      	add	sp, #8
   157b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   157b6:	2100      	movs	r1, #0
   157b8:	6019      	str	r1, [r3, #0]
   157ba:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   157bc:	2301      	movs	r3, #1
}
   157be:	e7c7      	b.n	15750 <rtc_nrf_isr+0x5c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   157c0:	4611      	mov	r1, r2
   157c2:	e7eb      	b.n	1579c <rtc_nrf_isr+0xa8>
   157c4:	40015000 	.word	0x40015000
   157c8:	40015104 	.word	0x40015104
   157cc:	2000d208 	.word	0x2000d208
   157d0:	2000d200 	.word	0x2000d200
   157d4:	40015140 	.word	0x40015140
   157d8:	2000cbe0 	.word	0x2000cbe0

000157dc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   157dc:	4b14      	ldr	r3, [pc, #80]	; (15830 <_flash_used>)
{
   157de:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   157e0:	f1b0 3fff 	cmp.w	r0, #4294967295
   157e4:	bf08      	it	eq
   157e6:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   157e8:	1e44      	subs	r4, r0, #1
   157ea:	2c00      	cmp	r4, #0
   157ec:	dd1d      	ble.n	1582a <sys_clock_set_timeout+0x4e>
   157ee:	429c      	cmp	r4, r3
   157f0:	bfa8      	it	ge
   157f2:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   157f4:	f7ff fe7a 	bl	154ec <z_nrf_rtc_timer_read>
   157f8:	4b0e      	ldr	r3, [pc, #56]	; (15834 <_flash_used+0x4>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   157fa:	490f      	ldr	r1, [pc, #60]	; (15838 <_flash_used+0x8>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   157fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15800:	1a80      	subs	r0, r0, r2
		ticks = 0;
   15802:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15806:	bf28      	it	cs
   15808:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1580a:	3001      	adds	r0, #1
   1580c:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   1580e:	4808      	ldr	r0, [pc, #32]	; (15830 <_flash_used>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15810:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   15812:	4284      	cmp	r4, r0
   15814:	bf28      	it	cs
   15816:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15818:	2000      	movs	r0, #0
   1581a:	1912      	adds	r2, r2, r4
   1581c:	9001      	str	r0, [sp, #4]
   1581e:	f143 0300 	adc.w	r3, r3, #0
   15822:	f7ff fe85 	bl	15530 <compare_set>
}
   15826:	b002      	add	sp, #8
   15828:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1582a:	2400      	movs	r4, #0
   1582c:	e7e2      	b.n	157f4 <sys_clock_set_timeout+0x18>
   1582e:	bf00      	nop
   15830:	007fffff 	.word	0x007fffff
   15834:	2000cbf0 	.word	0x2000cbf0
   15838:	000153e5 	.word	0x000153e5

0001583c <sys_clock_elapsed>:
{
   1583c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1583e:	f7ff fe55 	bl	154ec <z_nrf_rtc_timer_read>
   15842:	4b02      	ldr	r3, [pc, #8]	; (1584c <sys_clock_elapsed+0x10>)
   15844:	681b      	ldr	r3, [r3, #0]
}
   15846:	1ac0      	subs	r0, r0, r3
   15848:	bd08      	pop	{r3, pc}
   1584a:	bf00      	nop
   1584c:	2000cbf0 	.word	0x2000cbf0

00015850 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   15850:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   15852:	4d19      	ldr	r5, [pc, #100]	; (158b8 <_nrf_modem_lib_init+0x68>)
   15854:	4c19      	ldr	r4, [pc, #100]	; (158bc <_nrf_modem_lib_init+0x6c>)
   15856:	782b      	ldrb	r3, [r5, #0]
   15858:	b933      	cbnz	r3, 15868 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   1585a:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1585e:	4818      	ldr	r0, [pc, #96]	; (158c0 <_nrf_modem_lib_init+0x70>)
   15860:	f00c fab5 	bl	21dce <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   15864:	2301      	movs	r3, #1
   15866:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   15868:	2200      	movs	r2, #0
   1586a:	202a      	movs	r0, #42	; 0x2a
   1586c:	4611      	mov	r1, r2
   1586e:	f7fe fa37 	bl	13ce0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   15872:	2100      	movs	r1, #0
   15874:	4813      	ldr	r0, [pc, #76]	; (158c4 <_nrf_modem_lib_init+0x74>)
   15876:	f006 fbf1 	bl	1c05c <nrf_modem_init>
   1587a:	4b13      	ldr	r3, [pc, #76]	; (158c8 <_nrf_modem_lib_init+0x78>)
   1587c:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1587e:	f04f 32ff 	mov.w	r2, #4294967295
   15882:	f04f 33ff 	mov.w	r3, #4294967295
   15886:	480e      	ldr	r0, [pc, #56]	; (158c0 <_nrf_modem_lib_init+0x70>)
   15888:	f006 fef0 	bl	1c66c <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1588c:	6820      	ldr	r0, [r4, #0]
   1588e:	b170      	cbz	r0, 158ae <_nrf_modem_lib_init+0x5e>
	return node->next;
   15890:	6804      	ldr	r4, [r0, #0]
   15892:	2c00      	cmp	r4, #0
   15894:	bf38      	it	cc
   15896:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   15898:	3004      	adds	r0, #4
   1589a:	f006 ffe1 	bl	1c860 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1589e:	b134      	cbz	r4, 158ae <_nrf_modem_lib_init+0x5e>
   158a0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   158a2:	4620      	mov	r0, r4
   158a4:	2b00      	cmp	r3, #0
   158a6:	bf38      	it	cc
   158a8:	2300      	movcc	r3, #0
   158aa:	461c      	mov	r4, r3
   158ac:	e7f4      	b.n	15898 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   158ae:	4804      	ldr	r0, [pc, #16]	; (158c0 <_nrf_modem_lib_init+0x70>)
   158b0:	f006 ff5a 	bl	1c768 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   158b4:	2000      	movs	r0, #0
   158b6:	bd38      	pop	{r3, r4, r5, pc}
   158b8:	2000e2de 	.word	0x2000e2de
   158bc:	2000d210 	.word	0x2000d210
   158c0:	2000d218 	.word	0x2000d218
   158c4:	000232d4 	.word	0x000232d4
   158c8:	2000d20c 	.word	0x2000d20c

000158cc <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   158cc:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   158ce:	4c0d      	ldr	r4, [pc, #52]	; (15904 <thread_monitor_entry_get+0x38>)
{
   158d0:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   158d2:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   158d4:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   158d6:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   158d8:	4b0b      	ldr	r3, [pc, #44]	; (15908 <thread_monitor_entry_get+0x3c>)
   158da:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   158dc:	6801      	ldr	r1, [r0, #0]
   158de:	4291      	cmp	r1, r2
   158e0:	d00e      	beq.n	15900 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   158e2:	b151      	cbz	r1, 158fa <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   158e4:	6841      	ldr	r1, [r0, #4]
   158e6:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   158e8:	42b1      	cmp	r1, r6
   158ea:	bfc4      	itt	gt
   158ec:	4604      	movgt	r4, r0
   158ee:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   158f0:	3d01      	subs	r5, #1
   158f2:	f100 0008 	add.w	r0, r0, #8
   158f6:	d1f1      	bne.n	158dc <thread_monitor_entry_get+0x10>
   158f8:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   158fa:	3b01      	subs	r3, #1
	new_entry->id = id;
   158fc:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   158fe:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   15900:	bd70      	pop	{r4, r5, r6, pc}
   15902:	bf00      	nop
   15904:	2000d29c 	.word	0x2000d29c
   15908:	2000d278 	.word	0x2000d278

0001590c <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1590c:	4668      	mov	r0, sp
   1590e:	f020 0107 	bic.w	r1, r0, #7
   15912:	468d      	mov	sp, r1
   15914:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15916:	4b0f      	ldr	r3, [pc, #60]	; (15954 <rpc_proxy_irq_handler+0x48>)
   15918:	e8d3 2fef 	ldaex	r2, [r3]
   1591c:	3201      	adds	r2, #1
   1591e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15922:	2900      	cmp	r1, #0
   15924:	d1f8      	bne.n	15918 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   15926:	f004 f85f 	bl	199e8 <nrf_modem_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1592a:	4b0b      	ldr	r3, [pc, #44]	; (15958 <rpc_proxy_irq_handler+0x4c>)
   1592c:	681c      	ldr	r4, [r3, #0]
   1592e:	2c00      	cmp	r4, #0
   15930:	bf38      	it	cc
   15932:	2400      	movcc	r4, #0
   15934:	b12c      	cbz	r4, 15942 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   15936:	1d20      	adds	r0, r4, #4
   15938:	f006 ff92 	bl	1c860 <z_impl_k_sem_give>
   1593c:	6824      	ldr	r4, [r4, #0]
   1593e:	2c00      	cmp	r4, #0
   15940:	d1f8      	bne.n	15934 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   15942:	f7fe f9e3 	bl	13d0c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   15946:	f7fe fac1 	bl	13ecc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1594a:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1594e:	4685      	mov	sp, r0
   15950:	4770      	bx	lr
   15952:	bf00      	nop
   15954:	2000d278 	.word	0x2000d278
   15958:	2000d294 	.word	0x2000d294

0001595c <nrf_modem_os_timedwait>:
{
   1595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15960:	460c      	mov	r4, r1
   15962:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   15964:	f00c fc7f 	bl	22266 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   15968:	6823      	ldr	r3, [r4, #0]
   1596a:	4680      	mov	r8, r0
   1596c:	2b00      	cmp	r3, #0
   1596e:	468a      	mov	sl, r1
   15970:	d103      	bne.n	1597a <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   15972:	f007 fb7f 	bl	1d074 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   15976:	2074      	movs	r0, #116	; 0x74
   15978:	e091      	b.n	15a9e <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   1597a:	bfbc      	itt	lt
   1597c:	f04f 33ff 	movlt.w	r3, #4294967295
   15980:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   15982:	2201      	movs	r2, #1
   15984:	2100      	movs	r1, #0
   15986:	a802      	add	r0, sp, #8
   15988:	f00c faa4 	bl	21ed4 <z_impl_k_sem_init>
   1598c:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   1598e:	f04f 0320 	mov.w	r3, #32
   15992:	f3ef 8b11 	mrs	fp, BASEPRI
   15996:	f383 8812 	msr	BASEPRI_MAX, r3
   1599a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1599e:	f007 fc11 	bl	1d1c4 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   159a2:	f7ff ff93 	bl	158cc <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   159a6:	4947      	ldr	r1, [pc, #284]	; (15ac4 <nrf_modem_os_timedwait+0x168>)
   159a8:	6843      	ldr	r3, [r0, #4]
   159aa:	680a      	ldr	r2, [r1, #0]
   159ac:	4689      	mov	r9, r1
   159ae:	4293      	cmp	r3, r2
   159b0:	f04f 0300 	mov.w	r3, #0
   159b4:	d108      	bne.n	159c8 <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   159b6:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   159b8:	4b43      	ldr	r3, [pc, #268]	; (15ac8 <nrf_modem_os_timedwait+0x16c>)
   159ba:	685a      	ldr	r2, [r3, #4]
   159bc:	2a00      	cmp	r2, #0
   159be:	d171      	bne.n	15aa4 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   159c0:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   159c4:	2301      	movs	r3, #1
}
   159c6:	e000      	b.n	159ca <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   159c8:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   159ca:	f38b 8811 	msr	BASEPRI, fp
   159ce:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   159d2:	2b00      	cmp	r3, #0
   159d4:	d062      	beq.n	15a9c <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   159d6:	6823      	ldr	r3, [r4, #0]
   159d8:	1c5a      	adds	r2, r3, #1
   159da:	d066      	beq.n	15aaa <nrf_modem_os_timedwait+0x14e>
			return (t * to_hz + off) / from_hz;
   159dc:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   159e0:	f240 30e7 	movw	r0, #999	; 0x3e7
   159e4:	2100      	movs	r1, #0
   159e6:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   159ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   159ee:	2300      	movs	r3, #0
   159f0:	fbce 010c 	smlal	r0, r1, lr, ip
   159f4:	f7fb fa54 	bl	10ea0 <__aeabi_uldivmod>
   159f8:	4602      	mov	r2, r0
   159fa:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   159fc:	a802      	add	r0, sp, #8
   159fe:	f006 ff55 	bl	1c8ac <z_impl_k_sem_take>
	__asm__ volatile(
   15a02:	f04f 0320 	mov.w	r3, #32
   15a06:	f3ef 8b11 	mrs	fp, BASEPRI
   15a0a:	f383 8812 	msr	BASEPRI_MAX, r3
   15a0e:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a12:	2000      	movs	r0, #0
   15a14:	4b2c      	ldr	r3, [pc, #176]	; (15ac8 <nrf_modem_os_timedwait+0x16c>)
   15a16:	681a      	ldr	r2, [r3, #0]
   15a18:	b15a      	cbz	r2, 15a32 <nrf_modem_os_timedwait+0xd6>
   15a1a:	42aa      	cmp	r2, r5
   15a1c:	d14f      	bne.n	15abe <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   15a1e:	9d01      	ldr	r5, [sp, #4]
   15a20:	2800      	cmp	r0, #0
   15a22:	d146      	bne.n	15ab2 <nrf_modem_os_timedwait+0x156>
   15a24:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   15a26:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   15a28:	4291      	cmp	r1, r2
   15a2a:	d100      	bne.n	15a2e <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   15a2c:	605d      	str	r5, [r3, #4]
	parent->next = child;
   15a2e:	2300      	movs	r3, #0
   15a30:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   15a32:	f007 fbc7 	bl	1d1c4 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   15a36:	f7ff ff49 	bl	158cc <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   15a3a:	f8d9 3000 	ldr.w	r3, [r9]
   15a3e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   15a40:	f38b 8811 	msr	BASEPRI, fp
   15a44:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   15a48:	6825      	ldr	r5, [r4, #0]
   15a4a:	1c6b      	adds	r3, r5, #1
   15a4c:	d026      	beq.n	15a9c <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   15a4e:	f00c fc0a 	bl	22266 <z_impl_k_uptime_ticks>
   15a52:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   15a56:	468e      	mov	lr, r1
   15a58:	fba8 890c 	umull	r8, r9, r8, ip
   15a5c:	fba0 010c 	umull	r0, r1, r0, ip
   15a60:	fb0c 990a 	mla	r9, ip, sl, r9
   15a64:	fb0c 110e 	mla	r1, ip, lr, r1
   15a68:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   15a6c:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   15a70:	1952      	adds	r2, r2, r5
   15a72:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   15a76:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   15a7a:	0bc5      	lsrs	r5, r0, #15
   15a7c:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   15a80:	1b56      	subs	r6, r2, r5
   15a82:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   15a86:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   15a8a:	2e00      	cmp	r6, #0
   15a8c:	f177 0300 	sbcs.w	r3, r7, #0
   15a90:	bfb8      	it	lt
   15a92:	2600      	movlt	r6, #0
   15a94:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   15a96:	2e00      	cmp	r6, #0
   15a98:	f43f af6d 	beq.w	15976 <nrf_modem_os_timedwait+0x1a>
	return 0;
   15a9c:	2000      	movs	r0, #0
}
   15a9e:	b009      	add	sp, #36	; 0x24
   15aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aa4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   15aa6:	605d      	str	r5, [r3, #4]
   15aa8:	e78c      	b.n	159c4 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   15aaa:	f04f 32ff 	mov.w	r2, #4294967295
   15aae:	4613      	mov	r3, r2
   15ab0:	e7a4      	b.n	159fc <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   15ab2:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   15ab4:	6859      	ldr	r1, [r3, #4]
   15ab6:	4291      	cmp	r1, r2
	list->tail = node;
   15ab8:	bf08      	it	eq
   15aba:	6058      	streq	r0, [r3, #4]
}
   15abc:	e7b7      	b.n	15a2e <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15abe:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15ac0:	6812      	ldr	r2, [r2, #0]
   15ac2:	e7a9      	b.n	15a18 <nrf_modem_os_timedwait+0xbc>
   15ac4:	2000d278 	.word	0x2000d278
   15ac8:	2000d294 	.word	0x2000d294

00015acc <nrf_modem_os_sem_init>:
{
   15acc:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   15ace:	6804      	ldr	r4, [r0, #0]
   15ad0:	4b0a      	ldr	r3, [pc, #40]	; (15afc <nrf_modem_os_sem_init+0x30>)
   15ad2:	b12c      	cbz	r4, 15ae0 <nrf_modem_os_sem_init+0x14>
   15ad4:	429c      	cmp	r4, r3
   15ad6:	d303      	bcc.n	15ae0 <nrf_modem_os_sem_init+0x14>
   15ad8:	f103 0548 	add.w	r5, r3, #72	; 0x48
   15adc:	42ac      	cmp	r4, r5
   15ade:	d308      	bcc.n	15af2 <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   15ae0:	4d07      	ldr	r5, [pc, #28]	; (15b00 <nrf_modem_os_sem_init+0x34>)
   15ae2:	782c      	ldrb	r4, [r5, #0]
   15ae4:	1c66      	adds	r6, r4, #1
   15ae6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   15aea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   15aee:	702e      	strb	r6, [r5, #0]
   15af0:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   15af2:	6800      	ldr	r0, [r0, #0]
}
   15af4:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   15af6:	f00c b9ed 	b.w	21ed4 <z_impl_k_sem_init>
   15afa:	bf00      	nop
   15afc:	2000d230 	.word	0x2000d230
   15b00:	2000e2df 	.word	0x2000e2df

00015b04 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15b08:	4b01      	ldr	r3, [pc, #4]	; (15b10 <nrf_modem_os_application_irq_set+0xc>)
   15b0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15b0e:	4770      	bx	lr
   15b10:	e000e100 	.word	0xe000e100

00015b14 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15b18:	4b01      	ldr	r3, [pc, #4]	; (15b20 <nrf_modem_os_application_irq_clear+0xc>)
   15b1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15b1e:	4770      	bx	lr
   15b20:	e000e100 	.word	0xe000e100

00015b24 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15b24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15b28:	4b01      	ldr	r3, [pc, #4]	; (15b30 <nrf_modem_os_trace_irq_set+0xc>)
   15b2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15b2e:	4770      	bx	lr
   15b30:	e000e100 	.word	0xe000e100

00015b34 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15b34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15b38:	4b01      	ldr	r3, [pc, #4]	; (15b40 <nrf_modem_os_trace_irq_clear+0xc>)
   15b3a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15b3e:	4770      	bx	lr
   15b40:	e000e100 	.word	0xe000e100

00015b44 <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   15b44:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   15b46:	2200      	movs	r2, #0
   15b48:	2300      	movs	r3, #0
   15b4a:	4801      	ldr	r0, [pc, #4]	; (15b50 <nrf_modem_os_alloc+0xc>)
   15b4c:	f00c b8bf 	b.w	21cce <k_heap_alloc>
   15b50:	2000c804 	.word	0x2000c804

00015b54 <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   15b54:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   15b56:	4801      	ldr	r0, [pc, #4]	; (15b5c <nrf_modem_os_free+0x8>)
   15b58:	f00c b8c3 	b.w	21ce2 <k_heap_free>
   15b5c:	2000c804 	.word	0x2000c804

00015b60 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   15b60:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   15b62:	2200      	movs	r2, #0
   15b64:	2300      	movs	r3, #0
   15b66:	4801      	ldr	r0, [pc, #4]	; (15b6c <nrf_modem_os_shm_tx_alloc+0xc>)
   15b68:	f00c b8b1 	b.w	21cce <k_heap_alloc>
   15b6c:	2000d280 	.word	0x2000d280

00015b70 <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   15b70:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   15b72:	4801      	ldr	r0, [pc, #4]	; (15b78 <nrf_modem_os_shm_tx_free+0x8>)
   15b74:	f00c b8b5 	b.w	21ce2 <k_heap_free>
   15b78:	2000d280 	.word	0x2000d280

00015b7c <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   15b7c:	b510      	push	{r4, lr}
	list->head = NULL;
   15b7e:	2400      	movs	r4, #0
   15b80:	4b0b      	ldr	r3, [pc, #44]	; (15bb0 <nrf_modem_os_init+0x34>)
	list->tail = NULL;
   15b82:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15b86:	4b0b      	ldr	r3, [pc, #44]	; (15bb4 <nrf_modem_os_init+0x38>)
   15b88:	e8d3 2fef 	ldaex	r2, [r3]
   15b8c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   15b90:	2900      	cmp	r1, #0
   15b92:	d1f9      	bne.n	15b88 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   15b94:	f00a fd36 	bl	20604 <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   15b98:	4b07      	ldr	r3, [pc, #28]	; (15bb8 <nrf_modem_os_init+0x3c>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   15b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   15b9e:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   15ba0:	4b06      	ldr	r3, [pc, #24]	; (15bbc <nrf_modem_os_init+0x40>)
	k_heap_init(&shmem_heap,
   15ba2:	4907      	ldr	r1, [pc, #28]	; (15bc0 <nrf_modem_os_init+0x44>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   15ba4:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   15ba6:	4807      	ldr	r0, [pc, #28]	; (15bc4 <nrf_modem_os_init+0x48>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   15ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   15bac:	f00c b840 	b.w	21c30 <k_heap_init>
   15bb0:	2000d294 	.word	0x2000d294
   15bb4:	2000d278 	.word	0x2000d278
   15bb8:	2000d22c 	.word	0x2000d22c
   15bbc:	2000d27c 	.word	0x2000d27c
   15bc0:	200084e8 	.word	0x200084e8
   15bc4:	2000d280 	.word	0x2000d280

00015bc8 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   15bc8:	2801      	cmp	r0, #1
   15bca:	d021      	beq.n	15c10 <z_to_nrf_optname+0x48>
   15bcc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   15bd0:	d126      	bne.n	15c20 <z_to_nrf_optname+0x58>
	case SOL_TLS:
		switch (z_in_optname) {
   15bd2:	3901      	subs	r1, #1
   15bd4:	290b      	cmp	r1, #11
   15bd6:	d823      	bhi.n	15c20 <z_to_nrf_optname+0x58>
   15bd8:	e8df f001 	tbb	[pc, r1]
   15bdc:	0e0c0a06 	.word	0x0e0c0a06
   15be0:	22221210 	.word	0x22221210
   15be4:	18161422 	.word	0x18161422
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   15be8:	2302      	movs	r3, #2
	int retval = 0;
   15bea:	2000      	movs	r0, #0
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_HOSTNAME;
   15bec:	6013      	str	r3, [r2, #0]
			break;
   15bee:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   15bf0:	2305      	movs	r3, #5
   15bf2:	e7fa      	b.n	15bea <z_to_nrf_optname+0x22>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   15bf4:	2306      	movs	r3, #6
   15bf6:	e7f8      	b.n	15bea <z_to_nrf_optname+0x22>
			break;
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   15bf8:	2307      	movs	r3, #7
   15bfa:	e7f6      	b.n	15bea <z_to_nrf_optname+0x22>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   15bfc:	2304      	movs	r3, #4
   15bfe:	e7f4      	b.n	15bea <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   15c00:	2301      	movs	r3, #1
   15c02:	e7f2      	b.n	15bea <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   15c04:	2303      	movs	r3, #3
   15c06:	e7f0      	b.n	15bea <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   15c08:	2309      	movs	r3, #9
   15c0a:	e7ee      	b.n	15bea <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   15c0c:	2308      	movs	r3, #8
   15c0e:	e7ec      	b.n	15bea <z_to_nrf_optname+0x22>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   15c10:	2937      	cmp	r1, #55	; 0x37
   15c12:	dc05      	bgt.n	15c20 <z_to_nrf_optname+0x58>
   15c14:	2913      	cmp	r1, #19
   15c16:	dc06      	bgt.n	15c26 <z_to_nrf_optname+0x5e>
   15c18:	2902      	cmp	r1, #2
   15c1a:	d059      	beq.n	15cd0 <z_to_nrf_optname+0x108>
   15c1c:	2904      	cmp	r1, #4
   15c1e:	d0ed      	beq.n	15bfc <z_to_nrf_optname+0x34>
   15c20:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   15c24:	4770      	bx	lr
   15c26:	3914      	subs	r1, #20
   15c28:	2923      	cmp	r1, #35	; 0x23
   15c2a:	d8f9      	bhi.n	15c20 <z_to_nrf_optname+0x58>
   15c2c:	a301      	add	r3, pc, #4	; (adr r3, 15c34 <z_to_nrf_optname+0x6c>)
   15c2e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   15c32:	bf00      	nop
   15c34:	00015cc5 	.word	0x00015cc5
   15c38:	00015cc9 	.word	0x00015cc9
   15c3c:	00015c21 	.word	0x00015c21
   15c40:	00015c21 	.word	0x00015c21
   15c44:	00015c21 	.word	0x00015c21
   15c48:	00015ccd 	.word	0x00015ccd
   15c4c:	00015c21 	.word	0x00015c21
   15c50:	00015c21 	.word	0x00015c21
   15c54:	00015c21 	.word	0x00015c21
   15c58:	00015c21 	.word	0x00015c21
   15c5c:	00015cd5 	.word	0x00015cd5
   15c60:	00015cd9 	.word	0x00015cd9
   15c64:	00015cdd 	.word	0x00015cdd
   15c68:	00015c21 	.word	0x00015c21
   15c6c:	00015c21 	.word	0x00015c21
   15c70:	00015c21 	.word	0x00015c21
   15c74:	00015c21 	.word	0x00015c21
   15c78:	00015c21 	.word	0x00015c21
   15c7c:	00015c21 	.word	0x00015c21
   15c80:	00015c21 	.word	0x00015c21
   15c84:	00015c21 	.word	0x00015c21
   15c88:	00015c21 	.word	0x00015c21
   15c8c:	00015c21 	.word	0x00015c21
   15c90:	00015c21 	.word	0x00015c21
   15c94:	00015c21 	.word	0x00015c21
   15c98:	00015c21 	.word	0x00015c21
   15c9c:	00015c21 	.word	0x00015c21
   15ca0:	00015c21 	.word	0x00015c21
   15ca4:	00015c21 	.word	0x00015c21
   15ca8:	00015c21 	.word	0x00015c21
   15cac:	00015ce5 	.word	0x00015ce5
   15cb0:	00015ce9 	.word	0x00015ce9
   15cb4:	00015ced 	.word	0x00015ced
   15cb8:	00015cf1 	.word	0x00015cf1
   15cbc:	00015cf5 	.word	0x00015cf5
   15cc0:	00015ce1 	.word	0x00015ce1
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   15cc4:	2314      	movs	r3, #20
   15cc6:	e790      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   15cc8:	2315      	movs	r3, #21
   15cca:	e78e      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   15ccc:	2319      	movs	r3, #25
   15cce:	e78c      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   15cd0:	2328      	movs	r3, #40	; 0x28
   15cd2:	e78a      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   15cd4:	231e      	movs	r3, #30
   15cd6:	e788      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   15cd8:	231f      	movs	r3, #31
   15cda:	e786      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   15cdc:	2320      	movs	r3, #32
   15cde:	e784      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   15ce0:	2337      	movs	r3, #55	; 0x37
   15ce2:	e782      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   15ce4:	2332      	movs	r3, #50	; 0x32
   15ce6:	e780      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   15ce8:	2333      	movs	r3, #51	; 0x33
   15cea:	e77e      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   15cec:	2334      	movs	r3, #52	; 0x34
   15cee:	e77c      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   15cf0:	2335      	movs	r3, #53	; 0x35
   15cf2:	e77a      	b.n	15bea <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   15cf4:	2336      	movs	r3, #54	; 0x36
   15cf6:	e778      	b.n	15bea <z_to_nrf_optname+0x22>

00015cf8 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   15cf8:	f04f 32ff 	mov.w	r2, #4294967295
   15cfc:	4b05      	ldr	r3, [pc, #20]	; (15d14 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   15cfe:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   15d00:	601a      	str	r2, [r3, #0]
   15d02:	609a      	str	r2, [r3, #8]
   15d04:	611a      	str	r2, [r3, #16]
   15d06:	619a      	str	r2, [r3, #24]
   15d08:	621a      	str	r2, [r3, #32]
   15d0a:	629a      	str	r2, [r3, #40]	; 0x28
   15d0c:	631a      	str	r2, [r3, #48]	; 0x30
   15d0e:	639a      	str	r2, [r3, #56]	; 0x38
}
   15d10:	4770      	bx	lr
   15d12:	bf00      	nop
   15d14:	2000d2f0 	.word	0x2000d2f0

00015d18 <nrf91_socket_offload_ioctl>:
{
   15d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d1c:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   15d20:	b091      	sub	sp, #68	; 0x44
   15d22:	2b03      	cmp	r3, #3
   15d24:	d878      	bhi.n	15e18 <nrf91_socket_offload_ioctl+0x100>
   15d26:	e8df f003 	tbb	[pc, r3]
   15d2a:	0295      	.short	0x0295
   15d2c:	7308      	.short	0x7308
		return 0;
   15d2e:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   15d32:	4620      	mov	r0, r4
   15d34:	b011      	add	sp, #68	; 0x44
   15d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   15d3a:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   15d3e:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   15d42:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   15d44:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   15d48:	4668      	mov	r0, sp
   15d4a:	2240      	movs	r2, #64	; 0x40
   15d4c:	f00c fd23 	bl	22796 <memset>
	for (int i = 0; i < nfds; i++) {
   15d50:	466e      	mov	r6, sp
   15d52:	464d      	mov	r5, r9
   15d54:	464f      	mov	r7, r9
	int retval = 0;
   15d56:	4654      	mov	r4, sl
		tmp[i].events = 0;
   15d58:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   15d5a:	4940      	ldr	r1, [pc, #256]	; (15e5c <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   15d5c:	45d0      	cmp	r8, sl
   15d5e:	dc32      	bgt.n	15dc6 <nrf91_socket_offload_ioctl+0xae>
	if (retval > 0) {
   15d60:	2c00      	cmp	r4, #0
   15d62:	dce6      	bgt.n	15d32 <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   15d64:	465a      	mov	r2, fp
   15d66:	4641      	mov	r1, r8
   15d68:	4668      	mov	r0, sp
   15d6a:	f00b ff23 	bl	21bb4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   15d6e:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   15d70:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   15d72:	4598      	cmp	r8, r3
   15d74:	dddd      	ble.n	15d32 <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   15d76:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   15d7a:	2a00      	cmp	r2, #0
   15d7c:	db20      	blt.n	15dc0 <nrf91_socket_offload_ioctl+0xa8>
		if (tmp[i].revents & NRF_POLLIN) {
   15d7e:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   15d82:	88d2      	ldrh	r2, [r2, #6]
   15d84:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   15d86:	bf42      	ittt	mi
   15d88:	88e9      	ldrhmi	r1, [r5, #6]
   15d8a:	f041 0101 	orrmi.w	r1, r1, #1
   15d8e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   15d90:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   15d92:	bf42      	ittt	mi
   15d94:	88e9      	ldrhmi	r1, [r5, #6]
   15d96:	f041 0104 	orrmi.w	r1, r1, #4
   15d9a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   15d9c:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   15d9e:	bf42      	ittt	mi
   15da0:	88e9      	ldrhmi	r1, [r5, #6]
   15da2:	f041 0108 	orrmi.w	r1, r1, #8
   15da6:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   15da8:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   15daa:	bf42      	ittt	mi
   15dac:	88e9      	ldrhmi	r1, [r5, #6]
   15dae:	f041 0120 	orrmi.w	r1, r1, #32
   15db2:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   15db4:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   15db6:	bf42      	ittt	mi
   15db8:	88ea      	ldrhmi	r2, [r5, #6]
   15dba:	f042 0210 	orrmi.w	r2, r2, #16
   15dbe:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   15dc0:	3301      	adds	r3, #1
   15dc2:	3508      	adds	r5, #8
   15dc4:	e7d5      	b.n	15d72 <nrf91_socket_offload_ioctl+0x5a>
		if (fds[i].fd < 0) {
   15dc6:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   15dc8:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   15dca:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   15dcc:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   15dce:	da05      	bge.n	15ddc <nrf91_socket_offload_ioctl+0xc4>
			tmp[i].fd = fds[i].fd;
   15dd0:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   15dd2:	f10a 0a01 	add.w	sl, sl, #1
   15dd6:	3608      	adds	r6, #8
   15dd8:	3708      	adds	r7, #8
   15dda:	e7bf      	b.n	15d5c <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   15ddc:	2286      	movs	r2, #134	; 0x86
   15dde:	f7fc f8cb 	bl	11f78 <z_get_fd_obj>
			if (obj != NULL) {
   15de2:	2300      	movs	r3, #0
   15de4:	491d      	ldr	r1, [pc, #116]	; (15e5c <nrf91_socket_offload_ioctl+0x144>)
   15de6:	b178      	cbz	r0, 15e08 <nrf91_socket_offload_ioctl+0xf0>
				tmp[i].fd = OBJ_TO_SD(obj);
   15de8:	6802      	ldr	r2, [r0, #0]
   15dea:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   15dec:	88b8      	ldrh	r0, [r7, #4]
   15dee:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   15df0:	bf42      	ittt	mi
   15df2:	88b2      	ldrhmi	r2, [r6, #4]
   15df4:	f042 0201 	orrmi.w	r2, r2, #1
   15df8:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   15dfa:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   15dfc:	bf42      	ittt	mi
   15dfe:	88b2      	ldrhmi	r2, [r6, #4]
   15e00:	f042 0202 	orrmi.w	r2, r2, #2
   15e04:	80b2      	strhmi	r2, [r6, #4]
   15e06:	e7e4      	b.n	15dd2 <nrf91_socket_offload_ioctl+0xba>
				fds[i].revents = POLLNVAL;
   15e08:	2220      	movs	r2, #32
				retval++;
   15e0a:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   15e0c:	80fa      	strh	r2, [r7, #6]
				retval++;
   15e0e:	e7ed      	b.n	15dec <nrf91_socket_offload_ioctl+0xd4>
		ctx->lock = va_arg(args, struct k_mutex *);
   15e10:	6813      	ldr	r3, [r2, #0]
		return 0;
   15e12:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   15e14:	6043      	str	r3, [r0, #4]
		return 0;
   15e16:	e78c      	b.n	15d32 <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   15e18:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   15e1a:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   15e1c:	d00b      	beq.n	15e36 <nrf91_socket_offload_ioctl+0x11e>
   15e1e:	2904      	cmp	r1, #4
   15e20:	d111      	bne.n	15e46 <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   15e22:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   15e24:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   15e28:	d10d      	bne.n	15e46 <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   15e2a:	2101      	movs	r1, #1
   15e2c:	1392      	asrs	r2, r2, #14
   15e2e:	f00b fec3 	bl	21bb8 <nrf_fcntl>
   15e32:	4604      	mov	r4, r0
		break;
   15e34:	e77d      	b.n	15d32 <nrf91_socket_offload_ioctl+0x1a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   15e36:	2200      	movs	r2, #0
   15e38:	2102      	movs	r1, #2
   15e3a:	f00b febd 	bl	21bb8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   15e3e:	0380      	lsls	r0, r0, #14
   15e40:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   15e44:	e775      	b.n	15d32 <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   15e46:	f00a f87d 	bl	1ff44 <__errno>
   15e4a:	2316      	movs	r3, #22
	return retval;
   15e4c:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   15e50:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   15e52:	e76e      	b.n	15d32 <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   15e54:	f06f 0411 	mvn.w	r4, #17
   15e58:	e76b      	b.n	15d32 <nrf91_socket_offload_ioctl+0x1a>
   15e5a:	bf00      	nop
   15e5c:	00023300 	.word	0x00023300

00015e60 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   15e60:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   15e62:	4b03      	ldr	r3, [pc, #12]	; (15e70 <nrf91_socket_iface_init+0x10>)
   15e64:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   15e66:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   15e68:	4802      	ldr	r0, [pc, #8]	; (15e74 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   15e6a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   15e6c:	f7fd bd98 	b.w	139a0 <socket_offload_dns_register>
   15e70:	2000d2ec 	.word	0x2000d2ec
   15e74:	000232f8 	.word	0x000232f8

00015e78 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   15e78:	4b0c      	ldr	r3, [pc, #48]	; (15eac <nrf91_socket_is_supported+0x34>)
   15e7a:	781b      	ldrb	r3, [r3, #0]
   15e7c:	b98b      	cbnz	r3, 15ea2 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   15e7e:	4b0c      	ldr	r3, [pc, #48]	; (15eb0 <nrf91_socket_is_supported+0x38>)
   15e80:	781b      	ldrb	r3, [r3, #0]
   15e82:	b183      	cbz	r3, 15ea6 <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   15e84:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   15e88:	2b02      	cmp	r3, #2
   15e8a:	d908      	bls.n	15e9e <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   15e8c:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   15e90:	2801      	cmp	r0, #1
   15e92:	bf8c      	ite	hi
   15e94:	2000      	movhi	r0, #0
   15e96:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   15e98:	f080 0001 	eor.w	r0, r0, #1
   15e9c:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   15e9e:	2001      	movs	r0, #1
   15ea0:	e7fa      	b.n	15e98 <nrf91_socket_is_supported+0x20>
		return false;
   15ea2:	2000      	movs	r0, #0
   15ea4:	4770      	bx	lr
	return true;
   15ea6:	2001      	movs	r0, #1
}
   15ea8:	4770      	bx	lr
   15eaa:	bf00      	nop
   15eac:	2000e360 	.word	0x2000e360
   15eb0:	2000e361 	.word	0x2000e361

00015eb4 <nrf91_socket_offload_getaddrinfo>:
{
   15eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct nrf_addrinfo *nrf_res = NULL;
   15eb8:	f04f 0800 	mov.w	r8, #0
{
   15ebc:	4614      	mov	r4, r2
   15ebe:	b08a      	sub	sp, #40	; 0x28
   15ec0:	4605      	mov	r5, r0
   15ec2:	460e      	mov	r6, r1
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   15ec4:	2220      	movs	r2, #32
   15ec6:	4641      	mov	r1, r8
   15ec8:	a802      	add	r0, sp, #8
{
   15eca:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   15ecc:	f8cd 8004 	str.w	r8, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   15ed0:	f00c fc61 	bl	22796 <memset>
	if (hints != NULL) {
   15ed4:	b324      	cbz	r4, 15f20 <nrf91_socket_offload_getaddrinfo+0x6c>
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   15ed6:	221c      	movs	r2, #28
   15ed8:	4641      	mov	r1, r8
   15eda:	a803      	add	r0, sp, #12
   15edc:	f00c fc5b 	bl	22796 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   15ee0:	6862      	ldr	r2, [r4, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   15ee2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   15ee6:	04d0      	lsls	r0, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   15ee8:	bf48      	it	mi
   15eea:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   15eee:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   15ef0:	68e3      	ldr	r3, [r4, #12]
   15ef2:	9304      	str	r3, [sp, #16]
	family = z_to_nrf_family(z_in->ai_family);
   15ef4:	8923      	ldrh	r3, [r4, #8]
	switch (z_family) {
   15ef6:	2b03      	cmp	r3, #3
   15ef8:	f200 80af 	bhi.w	1605a <nrf91_socket_offload_getaddrinfo+0x1a6>
   15efc:	4a5a      	ldr	r2, [pc, #360]	; (16068 <nrf91_socket_offload_getaddrinfo+0x1b4>)
   15efe:	56d3      	ldrsb	r3, [r2, r3]
	if (family == -EAFNOSUPPORT) {
   15f00:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   15f04:	f000 80a9 	beq.w	1605a <nrf91_socket_offload_getaddrinfo+0x1a6>
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   15f08:	6920      	ldr	r0, [r4, #16]
	nrf_out->ai_family = family;
   15f0a:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   15f0c:	f00a fb99 	bl	20642 <z_to_nrf_protocol>
   15f10:	9005      	str	r0, [sp, #20]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   15f12:	307b      	adds	r0, #123	; 0x7b
   15f14:	f000 80a4 	beq.w	16060 <nrf91_socket_offload_getaddrinfo+0x1ac>
	if (z_in->ai_canonname != NULL) {
   15f18:	69e3      	ldr	r3, [r4, #28]
   15f1a:	b103      	cbz	r3, 15f1e <nrf91_socket_offload_getaddrinfo+0x6a>
		nrf_out->ai_canonname = z_in->ai_canonname;
   15f1c:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   15f1e:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   15f20:	f04f 32ff 	mov.w	r2, #4294967295
   15f24:	f04f 33ff 	mov.w	r3, #4294967295
   15f28:	4850      	ldr	r0, [pc, #320]	; (1606c <nrf91_socket_offload_getaddrinfo+0x1b8>)
   15f2a:	f00a fcb3 	bl	20894 <k_mutex_lock.constprop.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   15f2e:	4628      	mov	r0, r5
   15f30:	4622      	mov	r2, r4
   15f32:	4631      	mov	r1, r6
   15f34:	ab01      	add	r3, sp, #4
   15f36:	f00b fe39 	bl	21bac <nrf_getaddrinfo>
	if (retval != 0) {
   15f3a:	4605      	mov	r5, r0
   15f3c:	b170      	cbz	r0, 15f5c <nrf91_socket_offload_getaddrinfo+0xa8>
	switch (nrf_gai_err) {
   15f3e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   15f42:	440d      	add	r5, r1
   15f44:	2d14      	cmp	r5, #20
   15f46:	f200 8085 	bhi.w	16054 <nrf91_socket_offload_getaddrinfo+0x1a0>
   15f4a:	4b49      	ldr	r3, [pc, #292]	; (16070 <nrf91_socket_offload_getaddrinfo+0x1bc>)
   15f4c:	575d      	ldrsb	r5, [r3, r5]
	k_mutex_unlock(&getaddrinfo_lock);
   15f4e:	4847      	ldr	r0, [pc, #284]	; (1606c <nrf91_socket_offload_getaddrinfo+0x1b8>)
   15f50:	f00a fb92 	bl	20678 <k_mutex_unlock>
}
   15f54:	4628      	mov	r0, r5
   15f56:	b00a      	add	sp, #40	; 0x28
   15f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct zsock_addrinfo *latest_z_res = NULL;
   15f5c:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   15f5e:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   15f60:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   15f62:	f8df a110 	ldr.w	sl, [pc, #272]	; 16074 <nrf91_socket_offload_getaddrinfo+0x1c0>
   15f66:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   15f68:	b91e      	cbnz	r6, 15f72 <nrf91_socket_offload_getaddrinfo+0xbe>
	nrf_freeaddrinfo(nrf_res);
   15f6a:	9801      	ldr	r0, [sp, #4]
   15f6c:	f00b fe20 	bl	21bb0 <nrf_freeaddrinfo>
   15f70:	e7ed      	b.n	15f4e <nrf91_socket_offload_getaddrinfo+0x9a>
					k_malloc(sizeof(struct zsock_addrinfo));
   15f72:	2050      	movs	r0, #80	; 0x50
   15f74:	f00c fbcc 	bl	22710 <k_malloc>
		if (next_z_res == NULL) {
   15f78:	4604      	mov	r4, r0
   15f7a:	2800      	cmp	r0, #0
   15f7c:	d059      	beq.n	16032 <nrf91_socket_offload_getaddrinfo+0x17e>
	family = nrf_to_z_family(nrf_in->ai_family);
   15f7e:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   15f80:	68b3      	ldr	r3, [r6, #8]
   15f82:	2a0a      	cmp	r2, #10
	z_out->ai_next = NULL;
   15f84:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   15f88:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   15f8c:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   15f90:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   15f92:	d851      	bhi.n	16038 <nrf91_socket_offload_getaddrinfo+0x184>
   15f94:	f91a 3002 	ldrsb.w	r3, [sl, r2]
	if (family == -EAFNOSUPPORT) {
   15f98:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   15f9c:	d04c      	beq.n	16038 <nrf91_socket_offload_getaddrinfo+0x184>
	z_out->ai_family = family;
   15f9e:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   15fa0:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   15fa2:	2b02      	cmp	r3, #2
   15fa4:	d031      	beq.n	1600a <nrf91_socket_offload_getaddrinfo+0x156>
   15fa6:	dc0d      	bgt.n	15fc4 <nrf91_socket_offload_getaddrinfo+0x110>
   15fa8:	b1a3      	cbz	r3, 15fd4 <nrf91_socket_offload_getaddrinfo+0x120>
   15faa:	2b01      	cmp	r3, #1
   15fac:	d02f      	beq.n	1600e <nrf91_socket_offload_getaddrinfo+0x15a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   15fae:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   15fb2:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   15fb4:	2300      	movs	r3, #0
   15fb6:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   15fb8:	4620      	mov	r0, r4
   15fba:	f00c fba2 	bl	22702 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   15fbe:	f06f 0506 	mvn.w	r5, #6
   15fc2:	e03e      	b.n	16042 <nrf91_socket_offload_getaddrinfo+0x18e>
	switch (proto) {
   15fc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   15fc8:	d01c      	beq.n	16004 <nrf91_socket_offload_getaddrinfo+0x150>
   15fca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   15fce:	d1ee      	bne.n	15fae <nrf91_socket_offload_getaddrinfo+0xfa>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   15fd0:	f240 1311 	movw	r3, #273	; 0x111
	if (nrf_in->ai_family == NRF_AF_INET) {
   15fd4:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   15fd6:	6123      	str	r3, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   15fd8:	d11b      	bne.n	16012 <nrf91_socket_offload_getaddrinfo+0x15e>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   15fda:	2008      	movs	r0, #8
   15fdc:	f00c fb98 	bl	22710 <k_malloc>
   15fe0:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   15fe2:	b318      	cbz	r0, 1602c <nrf91_socket_offload_getaddrinfo+0x178>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   15fe4:	2308      	movs	r3, #8
   15fe6:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   15fe8:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   15fea:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   15fec:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   15fee:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   15ff0:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   15ff2:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   15ff4:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   15ff6:	f1b8 0f00 	cmp.w	r8, #0
   15ffa:	d128      	bne.n	1604e <nrf91_socket_offload_getaddrinfo+0x19a>
			*res = next_z_res;
   15ffc:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   15ffe:	46a0      	mov	r8, r4
   16000:	69f6      	ldr	r6, [r6, #28]
   16002:	e7b1      	b.n	15f68 <nrf91_socket_offload_getaddrinfo+0xb4>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   16004:	f44f 7381 	mov.w	r3, #258	; 0x102
   16008:	e7e4      	b.n	15fd4 <nrf91_socket_offload_getaddrinfo+0x120>
   1600a:	2311      	movs	r3, #17
   1600c:	e7e2      	b.n	15fd4 <nrf91_socket_offload_getaddrinfo+0x120>
   1600e:	2306      	movs	r3, #6
   16010:	e7e0      	b.n	15fd4 <nrf91_socket_offload_getaddrinfo+0x120>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   16012:	2a0a      	cmp	r2, #10
   16014:	d1d0      	bne.n	15fb8 <nrf91_socket_offload_getaddrinfo+0x104>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   16016:	2018      	movs	r0, #24
   16018:	f00c fb7a 	bl	22710 <k_malloc>
   1601c:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1601e:	b128      	cbz	r0, 1602c <nrf91_socket_offload_getaddrinfo+0x178>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   16020:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   16022:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   16024:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   16026:	f00a fb8e 	bl	20746 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   1602a:	e7e4      	b.n	15ff6 <nrf91_socket_offload_getaddrinfo+0x142>
			k_free(next_z_res);
   1602c:	4620      	mov	r0, r4
   1602e:	f00c fb68 	bl	22702 <k_free>
			retval = DNS_EAI_MEMORY;
   16032:	f06f 0509 	mvn.w	r5, #9
   16036:	e004      	b.n	16042 <nrf91_socket_offload_getaddrinfo+0x18e>
			k_free(next_z_res);
   16038:	4620      	mov	r0, r4
   1603a:	f00c fb62 	bl	22702 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1603e:	f06f 0508 	mvn.w	r5, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   16042:	6838      	ldr	r0, [r7, #0]
   16044:	f00a fb72 	bl	2072c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   16048:	2300      	movs	r3, #0
   1604a:	603b      	str	r3, [r7, #0]
   1604c:	e78d      	b.n	15f6a <nrf91_socket_offload_getaddrinfo+0xb6>
			latest_z_res->ai_next = next_z_res;
   1604e:	f8c8 4000 	str.w	r4, [r8]
   16052:	e7d4      	b.n	15ffe <nrf91_socket_offload_getaddrinfo+0x14a>
	switch (nrf_gai_err) {
   16054:	f04f 35ff 	mov.w	r5, #4294967295
   16058:	e779      	b.n	15f4e <nrf91_socket_offload_getaddrinfo+0x9a>
			return DNS_EAI_ADDRFAMILY;
   1605a:	f06f 0508 	mvn.w	r5, #8
   1605e:	e779      	b.n	15f54 <nrf91_socket_offload_getaddrinfo+0xa0>
			return DNS_EAI_SOCKTYPE;
   16060:	f06f 0506 	mvn.w	r5, #6
   16064:	e776      	b.n	15f54 <nrf91_socket_offload_getaddrinfo+0xa0>
   16066:	bf00      	nop
   16068:	00023cc8 	.word	0x00023cc8
   1606c:	2000c854 	.word	0x2000c854
   16070:	00023cd7 	.word	0x00023cd7
   16074:	00023ccc 	.word	0x00023ccc

00016078 <nrf91_socket_offload_sendmsg>:
{
   16078:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1607c:	4680      	mov	r8, r0
   1607e:	4691      	mov	r9, r2
	if (msg == NULL) {
   16080:	460c      	mov	r4, r1
   16082:	b1f9      	cbz	r1, 160c4 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   16084:	2300      	movs	r3, #0
	ssize_t len = 0;
   16086:	461a      	mov	r2, r3
   16088:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1608a:	4298      	cmp	r0, r3
   1608c:	d124      	bne.n	160d8 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   1608e:	2a80      	cmp	r2, #128	; 0x80
   16090:	d86d      	bhi.n	1616e <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   16092:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   16094:	f04f 32ff 	mov.w	r2, #4294967295
   16098:	f04f 33ff 	mov.w	r3, #4294967295
   1609c:	4836      	ldr	r0, [pc, #216]	; (16178 <nrf91_socket_offload_sendmsg+0x100>)
   1609e:	f00a fbf9 	bl	20894 <k_mutex_lock.constprop.0>
		len = 0;
   160a2:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   160a4:	4e35      	ldr	r6, [pc, #212]	; (1617c <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   160a6:	68e3      	ldr	r3, [r4, #12]
   160a8:	429d      	cmp	r5, r3
   160aa:	d31c      	bcc.n	160e6 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   160ac:	2600      	movs	r6, #0
		ret = 0;
   160ae:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   160b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1617c <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   160b4:	42b7      	cmp	r7, r6
   160b6:	dd01      	ble.n	160bc <nrf91_socket_offload_sendmsg+0x44>
   160b8:	2d00      	cmp	r5, #0
   160ba:	da25      	bge.n	16108 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   160bc:	482e      	ldr	r0, [pc, #184]	; (16178 <nrf91_socket_offload_sendmsg+0x100>)
   160be:	f00a fadb 	bl	20678 <k_mutex_unlock>
		return ret;
   160c2:	e005      	b.n	160d0 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   160c4:	f009 ff3e 	bl	1ff44 <__errno>
   160c8:	2316      	movs	r3, #22
		return -1;
   160ca:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   160ce:	6003      	str	r3, [r0, #0]
}
   160d0:	4628      	mov	r0, r5
   160d2:	b002      	add	sp, #8
   160d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   160d8:	68a1      	ldr	r1, [r4, #8]
   160da:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   160de:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   160e0:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   160e2:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   160e4:	e7d1      	b.n	1608a <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   160e6:	68a1      	ldr	r1, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   160e8:	19f0      	adds	r0, r6, r7
   160ea:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   160ee:	685a      	ldr	r2, [r3, #4]
   160f0:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   160f4:	f00c fb42 	bl	2277c <memcpy>
			len += msg->msg_iov[i].iov_len;
   160f8:	68a3      	ldr	r3, [r4, #8]
   160fa:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   160fe:	4453      	add	r3, sl
   16100:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   16102:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   16104:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   16106:	e7ce      	b.n	160a6 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   16108:	6863      	ldr	r3, [r4, #4]
   1610a:	1bba      	subs	r2, r7, r6
   1610c:	9301      	str	r3, [sp, #4]
   1610e:	6823      	ldr	r3, [r4, #0]
   16110:	eb0a 0106 	add.w	r1, sl, r6
   16114:	9300      	str	r3, [sp, #0]
   16116:	4640      	mov	r0, r8
   16118:	464b      	mov	r3, r9
   1611a:	f00a fb41 	bl	207a0 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1611e:	1e05      	subs	r5, r0, #0
				offset += ret;
   16120:	bfc8      	it	gt
   16122:	1976      	addgt	r6, r6, r5
   16124:	e7c6      	b.n	160b4 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   16126:	68a3      	ldr	r3, [r4, #8]
   16128:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1612c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   16130:	685b      	ldr	r3, [r3, #4]
   16132:	b133      	cbz	r3, 16142 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   16134:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   16136:	68a3      	ldr	r3, [r4, #8]
   16138:	eb03 020a 	add.w	r2, r3, sl
   1613c:	6852      	ldr	r2, [r2, #4]
   1613e:	4297      	cmp	r7, r2
   16140:	d304      	bcc.n	1614c <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   16142:	3601      	adds	r6, #1
   16144:	68e3      	ldr	r3, [r4, #12]
   16146:	42b3      	cmp	r3, r6
   16148:	d8ed      	bhi.n	16126 <nrf91_socket_offload_sendmsg+0xae>
   1614a:	e7c1      	b.n	160d0 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   1614c:	f853 100a 	ldr.w	r1, [r3, sl]
   16150:	6863      	ldr	r3, [r4, #4]
   16152:	4640      	mov	r0, r8
   16154:	9301      	str	r3, [sp, #4]
   16156:	6823      	ldr	r3, [r4, #0]
   16158:	1bd2      	subs	r2, r2, r7
   1615a:	9300      	str	r3, [sp, #0]
   1615c:	4439      	add	r1, r7
   1615e:	464b      	mov	r3, r9
   16160:	f00a fb1e 	bl	207a0 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   16164:	1e03      	subs	r3, r0, #0
   16166:	db05      	blt.n	16174 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   16168:	441f      	add	r7, r3
			len += ret;
   1616a:	441d      	add	r5, r3
   1616c:	e7e3      	b.n	16136 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1616e:	2600      	movs	r6, #0
	len = 0;
   16170:	4635      	mov	r5, r6
   16172:	e7e7      	b.n	16144 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   16174:	461d      	mov	r5, r3
   16176:	e7ab      	b.n	160d0 <nrf91_socket_offload_sendmsg+0x58>
   16178:	2000c890 	.word	0x2000c890
   1617c:	2000e2e0 	.word	0x2000e2e0

00016180 <allocate_ctx>:
{
   16180:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   16182:	f04f 32ff 	mov.w	r2, #4294967295
   16186:	f04f 33ff 	mov.w	r3, #4294967295
{
   1618a:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1618c:	480b      	ldr	r0, [pc, #44]	; (161bc <allocate_ctx+0x3c>)
   1618e:	f00a fb81 	bl	20894 <k_mutex_lock.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   16192:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   16194:	4a0a      	ldr	r2, [pc, #40]	; (161c0 <allocate_ctx+0x40>)
   16196:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   1619a:	3101      	adds	r1, #1
   1619c:	d108      	bne.n	161b0 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   1619e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   161a2:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   161a6:	4805      	ldr	r0, [pc, #20]	; (161bc <allocate_ctx+0x3c>)
   161a8:	f00a fa66 	bl	20678 <k_mutex_unlock>
}
   161ac:	4628      	mov	r0, r5
   161ae:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   161b0:	3301      	adds	r3, #1
   161b2:	2b08      	cmp	r3, #8
   161b4:	d1ef      	bne.n	16196 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   161b6:	2500      	movs	r5, #0
   161b8:	e7f5      	b.n	161a6 <allocate_ctx+0x26>
   161ba:	bf00      	nop
   161bc:	2000c82c 	.word	0x2000c82c
   161c0:	2000d2f0 	.word	0x2000d2f0

000161c4 <release_ctx>:
{
   161c4:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   161c6:	4d09      	ldr	r5, [pc, #36]	; (161ec <release_ctx+0x28>)
{
   161c8:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   161ca:	f04f 32ff 	mov.w	r2, #4294967295
   161ce:	f04f 33ff 	mov.w	r3, #4294967295
   161d2:	4628      	mov	r0, r5
   161d4:	f00a fb5e 	bl	20894 <k_mutex_lock.constprop.0>
	ctx->lock = NULL;
   161d8:	2300      	movs	r3, #0
   161da:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_unlock(&ctx_lock);
   161de:	4628      	mov	r0, r5
	ctx->lock = NULL;
   161e0:	e9c4 2300 	strd	r2, r3, [r4]
}
   161e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   161e8:	f00a ba46 	b.w	20678 <k_mutex_unlock>
   161ec:	2000c82c 	.word	0x2000c82c

000161f0 <nrf91_socket_offload_accept>:
{
   161f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   161f4:	b08b      	sub	sp, #44	; 0x2c
   161f6:	4607      	mov	r7, r0
   161f8:	460c      	mov	r4, r1
   161fa:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   161fc:	f7fb feee 	bl	11fdc <z_reserve_fd>
   16200:	4606      	mov	r6, r0
	if (fd < 0) {
   16202:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   16204:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   16206:	db23      	blt.n	16250 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   16208:	b32c      	cbz	r4, 16256 <nrf91_socket_offload_accept+0x66>
   1620a:	b33d      	cbz	r5, 1625c <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1620c:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1620e:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   16210:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   16212:	bf0c      	ite	eq
   16214:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   16216:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   16218:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1621a:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1621c:	4639      	mov	r1, r7
   1621e:	f00b fc69 	bl	21af4 <nrf_accept>
	if (new_sd < 0) {
   16222:	f1b0 0900 	subs.w	r9, r0, #0
   16226:	db3c      	blt.n	162a2 <nrf91_socket_offload_accept+0xb2>
	ctx = allocate_ctx(new_sd);
   16228:	f7ff ffaa 	bl	16180 <allocate_ctx>
	if (ctx == NULL) {
   1622c:	4680      	mov	r8, r0
   1622e:	b9c0      	cbnz	r0, 16262 <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   16230:	f009 fe88 	bl	1ff44 <__errno>
   16234:	230c      	movs	r3, #12
   16236:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   16238:	4648      	mov	r0, r9
   1623a:	f00b fbf8 	bl	21a2e <nrf_close>
	if (ctx != NULL) {
   1623e:	f1b8 0f00 	cmp.w	r8, #0
   16242:	d002      	beq.n	1624a <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   16244:	4640      	mov	r0, r8
   16246:	f7ff ffbd 	bl	161c4 <release_ctx>
	z_free_fd(fd);
   1624a:	4630      	mov	r0, r6
   1624c:	f7fb ff14 	bl	12078 <z_free_fd>
		return -1;
   16250:	f04f 36ff 	mov.w	r6, #4294967295
   16254:	e018      	b.n	16288 <nrf91_socket_offload_accept+0x98>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   16256:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   16258:	4627      	mov	r7, r4
   1625a:	e7df      	b.n	1621c <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1625c:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1625e:	462f      	mov	r7, r5
   16260:	e7dc      	b.n	1621c <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   16262:	b164      	cbz	r4, 1627e <nrf91_socket_offload_accept+0x8e>
   16264:	b15d      	cbz	r5, 1627e <nrf91_socket_offload_accept+0x8e>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   16266:	687b      	ldr	r3, [r7, #4]
   16268:	2b02      	cmp	r3, #2
   1626a:	d111      	bne.n	16290 <nrf91_socket_offload_accept+0xa0>
			*addrlen = sizeof(struct sockaddr_in);
   1626c:	2308      	movs	r3, #8
   1626e:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   16270:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   16274:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   16276:	2301      	movs	r3, #1
   16278:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1627a:	9b04      	ldr	r3, [sp, #16]
   1627c:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1627e:	4641      	mov	r1, r8
   16280:	4630      	mov	r0, r6
   16282:	4a0b      	ldr	r2, [pc, #44]	; (162b0 <nrf91_socket_offload_accept+0xc0>)
   16284:	f7fb fee0 	bl	12048 <z_finalize_fd>
}
   16288:	4630      	mov	r0, r6
   1628a:	b00b      	add	sp, #44	; 0x2c
   1628c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   16290:	2b0a      	cmp	r3, #10
   16292:	d1d1      	bne.n	16238 <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   16294:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   16296:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   16298:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1629a:	a901      	add	r1, sp, #4
   1629c:	f00a fa53 	bl	20746 <nrf_to_z_ipv6>
   162a0:	e7ed      	b.n	1627e <nrf91_socket_offload_accept+0x8e>
	if (new_sd != -1) {
   162a2:	f1b9 3fff 	cmp.w	r9, #4294967295
   162a6:	d0d0      	beq.n	1624a <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   162a8:	f04f 0800 	mov.w	r8, #0
   162ac:	e7c4      	b.n	16238 <nrf91_socket_offload_accept+0x48>
   162ae:	bf00      	nop
   162b0:	00023300 	.word	0x00023300

000162b4 <nrf91_socket_create>:
{
   162b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   162b8:	1e0e      	subs	r6, r1, #0
{
   162ba:	4605      	mov	r5, r0
   162bc:	4617      	mov	r7, r2
	if (type & SOCK_NATIVE) {
   162be:	da15      	bge.n	162ec <nrf91_socket_create+0x38>
	k_sched_lock();
   162c0:	f006 fcd6 	bl	1cc70 <k_sched_lock>
	*offload_lock = true;
   162c4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 16374 <nrf91_socket_create+0xc0>
   162c8:	2301      	movs	r3, #1
   162ca:	f888 3000 	strb.w	r3, [r8]
	return z_impl_zsock_socket(family, type, proto);
   162ce:	463a      	mov	r2, r7
   162d0:	4628      	mov	r0, r5
   162d2:	f026 4140 	bic.w	r1, r6, #3221225472	; 0xc0000000
   162d6:	f7fd fa23 	bl	13720 <z_impl_zsock_socket>
	*offload_lock = false;
   162da:	2300      	movs	r3, #0
   162dc:	f888 3000 	strb.w	r3, [r8]
   162e0:	4604      	mov	r4, r0
	k_sched_unlock();
   162e2:	f006 fe9f 	bl	1d024 <k_sched_unlock>
}
   162e6:	4620      	mov	r0, r4
   162e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   162ec:	0073      	lsls	r3, r6, #1
   162ee:	d504      	bpl.n	162fa <nrf91_socket_create+0x46>
	k_sched_lock();
   162f0:	f006 fcbe 	bl	1cc70 <k_sched_lock>
	*offload_lock = true;
   162f4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 16378 <nrf91_socket_create+0xc4>
   162f8:	e7e6      	b.n	162c8 <nrf91_socket_create+0x14>
	fd = z_reserve_fd();
   162fa:	f7fb fe6f 	bl	11fdc <z_reserve_fd>
	if (fd < 0) {
   162fe:	1e04      	subs	r4, r0, #0
   16300:	db0e      	blt.n	16320 <nrf91_socket_create+0x6c>
	family = z_to_nrf_family(family);
   16302:	b2ad      	uxth	r5, r5
	switch (z_family) {
   16304:	2d03      	cmp	r5, #3
   16306:	d804      	bhi.n	16312 <nrf91_socket_create+0x5e>
   16308:	4b18      	ldr	r3, [pc, #96]	; (1636c <nrf91_socket_create+0xb8>)
   1630a:	575d      	ldrsb	r5, [r3, r5]
	if (family == -EAFNOSUPPORT) {
   1630c:	f115 0f6a 	cmn.w	r5, #106	; 0x6a
   16310:	d109      	bne.n	16326 <nrf91_socket_create+0x72>
		errno = EAFNOSUPPORT;
   16312:	f009 fe17 	bl	1ff44 <__errno>
   16316:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   16318:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1631a:	4620      	mov	r0, r4
   1631c:	f7fb feac 	bl	12078 <z_free_fd>
		return -1;
   16320:	f04f 34ff 	mov.w	r4, #4294967295
   16324:	e7df      	b.n	162e6 <nrf91_socket_create+0x32>
	proto = z_to_nrf_protocol(proto);
   16326:	4638      	mov	r0, r7
   16328:	f00a f98b 	bl	20642 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1632c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   16330:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   16332:	d103      	bne.n	1633c <nrf91_socket_create+0x88>
		errno = EPROTONOSUPPORT;
   16334:	f009 fe06 	bl	1ff44 <__errno>
   16338:	237b      	movs	r3, #123	; 0x7b
   1633a:	e7ed      	b.n	16318 <nrf91_socket_create+0x64>
	retval = nrf_socket(family, type, proto);
   1633c:	4628      	mov	r0, r5
   1633e:	4631      	mov	r1, r6
   16340:	f00b fb64 	bl	21a0c <nrf_socket>
	if (sd < 0) {
   16344:	1e05      	subs	r5, r0, #0
   16346:	dbe8      	blt.n	1631a <nrf91_socket_create+0x66>
	ctx = allocate_ctx(sd);
   16348:	f7ff ff1a 	bl	16180 <allocate_ctx>
	if (ctx == NULL) {
   1634c:	4601      	mov	r1, r0
   1634e:	b938      	cbnz	r0, 16360 <nrf91_socket_create+0xac>
		errno = ENOMEM;
   16350:	f009 fdf8 	bl	1ff44 <__errno>
   16354:	230c      	movs	r3, #12
   16356:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   16358:	4628      	mov	r0, r5
   1635a:	f00b fb68 	bl	21a2e <nrf_close>
   1635e:	e7dc      	b.n	1631a <nrf91_socket_create+0x66>
	z_finalize_fd(fd, ctx,
   16360:	4620      	mov	r0, r4
   16362:	4a03      	ldr	r2, [pc, #12]	; (16370 <nrf91_socket_create+0xbc>)
   16364:	f7fb fe70 	bl	12048 <z_finalize_fd>
	return fd;
   16368:	e7bd      	b.n	162e6 <nrf91_socket_create+0x32>
   1636a:	bf00      	nop
   1636c:	00023cc8 	.word	0x00023cc8
   16370:	00023300 	.word	0x00023300
   16374:	2000e360 	.word	0x2000e360
   16378:	2000e361 	.word	0x2000e361

0001637c <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   1637c:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1637e:	4808      	ldr	r0, [pc, #32]	; (163a0 <at_monitor_sys_init+0x24>)
   16380:	f005 fb92 	bl	1baa8 <nrf_modem_at_notif_handler_set>
	if (err) {
   16384:	4601      	mov	r1, r0
   16386:	b148      	cbz	r0, 1639c <at_monitor_sys_init+0x20>
   16388:	4a06      	ldr	r2, [pc, #24]	; (163a4 <at_monitor_sys_init+0x28>)
   1638a:	4b07      	ldr	r3, [pc, #28]	; (163a8 <at_monitor_sys_init+0x2c>)
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1638c:	4807      	ldr	r0, [pc, #28]	; (163ac <at_monitor_sys_init+0x30>)
   1638e:	1ad2      	subs	r2, r2, r3
   16390:	08d2      	lsrs	r2, r2, #3
   16392:	0192      	lsls	r2, r2, #6
   16394:	f042 0201 	orr.w	r2, r2, #1
   16398:	f008 ff45 	bl	1f226 <log_1>
	}

	return 0;
}
   1639c:	2000      	movs	r0, #0
   1639e:	bd08      	pop	{r3, pc}
   163a0:	000163b1 	.word	0x000163b1
   163a4:	00022fe0 	.word	0x00022fe0
   163a8:	00022fd8 	.word	0x00022fd8
   163ac:	00023cec 	.word	0x00023cec

000163b0 <at_monitor_dispatch>:
{
   163b0:	b570      	push	{r4, r5, r6, lr}
   163b2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   163b4:	4c25      	ldr	r4, [pc, #148]	; (1644c <at_monitor_dispatch+0x9c>)
   163b6:	4e26      	ldr	r6, [pc, #152]	; (16450 <at_monitor_dispatch+0xa0>)
   163b8:	42b4      	cmp	r4, r6
   163ba:	d304      	bcc.n	163c6 <at_monitor_dispatch+0x16>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   163bc:	4c25      	ldr	r4, [pc, #148]	; (16454 <at_monitor_dispatch+0xa4>)
   163be:	4e26      	ldr	r6, [pc, #152]	; (16458 <at_monitor_dispatch+0xa8>)
   163c0:	42b4      	cmp	r4, r6
   163c2:	d30f      	bcc.n	163e4 <at_monitor_dispatch+0x34>
}
   163c4:	bd70      	pop	{r4, r5, r6, pc}
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   163c6:	7a23      	ldrb	r3, [r4, #8]
   163c8:	b923      	cbnz	r3, 163d4 <at_monitor_dispatch+0x24>
   163ca:	6821      	ldr	r1, [r4, #0]
   163cc:	b921      	cbnz	r1, 163d8 <at_monitor_dispatch+0x28>
			e->handler(notif);
   163ce:	4628      	mov	r0, r5
   163d0:	6863      	ldr	r3, [r4, #4]
   163d2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   163d4:	340c      	adds	r4, #12
   163d6:	e7ef      	b.n	163b8 <at_monitor_dispatch+0x8>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   163d8:	4628      	mov	r0, r5
   163da:	f00c fa2d 	bl	22838 <strstr>
   163de:	2800      	cmp	r0, #0
   163e0:	d1f5      	bne.n	163ce <at_monitor_dispatch+0x1e>
   163e2:	e7f7      	b.n	163d4 <at_monitor_dispatch+0x24>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   163e4:	7a23      	ldrb	r3, [r4, #8]
   163e6:	bb13      	cbnz	r3, 1642e <at_monitor_dispatch+0x7e>
   163e8:	6821      	ldr	r1, [r4, #0]
   163ea:	b9d9      	cbnz	r1, 16424 <at_monitor_dispatch+0x74>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   163ec:	4628      	mov	r0, r5
   163ee:	f7fa fedf 	bl	111b0 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   163f2:	2200      	movs	r2, #0
   163f4:	1d41      	adds	r1, r0, #5
   163f6:	2300      	movs	r3, #0
   163f8:	4818      	ldr	r0, [pc, #96]	; (1645c <at_monitor_dispatch+0xac>)
   163fa:	f00b fc68 	bl	21cce <k_heap_alloc>
	if (!at_notif) {
   163fe:	4604      	mov	r4, r0
   16400:	b9b8      	cbnz	r0, 16432 <at_monitor_dispatch+0x82>
   16402:	4a17      	ldr	r2, [pc, #92]	; (16460 <at_monitor_dispatch+0xb0>)
   16404:	4c17      	ldr	r4, [pc, #92]	; (16464 <at_monitor_dispatch+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   16406:	4628      	mov	r0, r5
   16408:	1aa4      	subs	r4, r4, r2
   1640a:	f7fc fd0f 	bl	12e2c <z_log_strdup>
   1640e:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("No heap space for incoming notification: %s",
   16410:	01a4      	lsls	r4, r4, #6
   16412:	f044 0402 	orr.w	r4, r4, #2
   16416:	4601      	mov	r1, r0
   16418:	4622      	mov	r2, r4
}
   1641a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("No heap space for incoming notification: %s",
   1641e:	4812      	ldr	r0, [pc, #72]	; (16468 <at_monitor_dispatch+0xb8>)
   16420:	f008 bf01 	b.w	1f226 <log_1>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   16424:	4628      	mov	r0, r5
   16426:	f00c fa07 	bl	22838 <strstr>
   1642a:	2800      	cmp	r0, #0
   1642c:	d1de      	bne.n	163ec <at_monitor_dispatch+0x3c>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1642e:	340c      	adds	r4, #12
   16430:	e7c6      	b.n	163c0 <at_monitor_dispatch+0x10>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   16432:	4629      	mov	r1, r5
   16434:	3004      	adds	r0, #4
   16436:	f00c f9c5 	bl	227c4 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1643a:	4621      	mov	r1, r4
   1643c:	480b      	ldr	r0, [pc, #44]	; (1646c <at_monitor_dispatch+0xbc>)
   1643e:	f00b fd3e 	bl	21ebe <k_queue_append>
}
   16442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_submit(&at_monitor_work);
   16446:	480a      	ldr	r0, [pc, #40]	; (16470 <at_monitor_dispatch+0xc0>)
   16448:	f006 bb48 	b.w	1cadc <k_work_submit>
   1644c:	2000c704 	.word	0x2000c704
   16450:	2000c704 	.word	0x2000c704
   16454:	2000c698 	.word	0x2000c698
   16458:	2000c704 	.word	0x2000c704
   1645c:	2000c7f0 	.word	0x2000c7f0
   16460:	00022fd8 	.word	0x00022fd8
   16464:	00022fe0 	.word	0x00022fe0
   16468:	00023d19 	.word	0x00023d19
   1646c:	2000c8d4 	.word	0x2000c8d4
   16470:	2000c598 	.word	0x2000c598

00016474 <at_monitor_task>:
{
   16474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   16478:	4f12      	ldr	r7, [pc, #72]	; (164c4 <at_monitor_task+0x50>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1647a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 164cc <at_monitor_task+0x58>
		k_heap_free(&at_monitor_heap, at_notif);
   1647e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 164d0 <at_monitor_task+0x5c>
   16482:	2200      	movs	r2, #0
   16484:	2300      	movs	r3, #0
   16486:	4638      	mov	r0, r7
   16488:	f006 f9b6 	bl	1c7f8 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1648c:	4605      	mov	r5, r0
   1648e:	b9b0      	cbnz	r0, 164be <at_monitor_task+0x4a>
}
   16490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!e->paused &&
   16494:	7a23      	ldrb	r3, [r4, #8]
   16496:	b923      	cbnz	r3, 164a2 <at_monitor_task+0x2e>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   16498:	6821      	ldr	r1, [r4, #0]
			if (!e->paused &&
   1649a:	b951      	cbnz	r1, 164b2 <at_monitor_task+0x3e>
				e->handler(at_notif->data);
   1649c:	4630      	mov	r0, r6
   1649e:	6863      	ldr	r3, [r4, #4]
   164a0:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   164a2:	340c      	adds	r4, #12
   164a4:	4544      	cmp	r4, r8
   164a6:	d3f5      	bcc.n	16494 <at_monitor_task+0x20>
		k_heap_free(&at_monitor_heap, at_notif);
   164a8:	4629      	mov	r1, r5
   164aa:	4648      	mov	r0, r9
   164ac:	f00b fc19 	bl	21ce2 <k_heap_free>
   164b0:	e7e7      	b.n	16482 <at_monitor_task+0xe>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   164b2:	4630      	mov	r0, r6
   164b4:	f00c f9c0 	bl	22838 <strstr>
   164b8:	2800      	cmp	r0, #0
   164ba:	d1ef      	bne.n	1649c <at_monitor_task+0x28>
   164bc:	e7f1      	b.n	164a2 <at_monitor_task+0x2e>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   164be:	4c02      	ldr	r4, [pc, #8]	; (164c8 <at_monitor_task+0x54>)
   164c0:	1d2e      	adds	r6, r5, #4
   164c2:	e7ef      	b.n	164a4 <at_monitor_task+0x30>
   164c4:	2000c8d4 	.word	0x2000c8d4
   164c8:	2000c698 	.word	0x2000c698
   164cc:	2000c704 	.word	0x2000c704
   164d0:	2000c7f0 	.word	0x2000c7f0

000164d4 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   164d4:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   164d6:	4d05      	ldr	r5, [pc, #20]	; (164ec <write_uart_string+0x18>)
   164d8:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   164da:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   164de:	b901      	cbnz	r1, 164e2 <write_uart_string+0xe>
	}
}
   164e0:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   164e2:	6828      	ldr	r0, [r5, #0]
   164e4:	6883      	ldr	r3, [r0, #8]
   164e6:	685b      	ldr	r3, [r3, #4]
   164e8:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   164ea:	e7f6      	b.n	164da <write_uart_string+0x6>
   164ec:	2000d344 	.word	0x2000d344

000164f0 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   164f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   164f4:	4604      	mov	r4, r0
	if (api->irq_update == NULL) {
   164f6:	6883      	ldr	r3, [r0, #8]
   164f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   164fa:	b103      	cbz	r3, 164fe <isr+0xe>
	return api->irq_update(dev);
   164fc:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   164fe:	68a3      	ldr	r3, [r4, #8]
   16500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16502:	b9eb      	cbnz	r3, 16540 <isr+0x50>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   16504:	4f41      	ldr	r7, [pc, #260]	; (1660c <isr+0x11c>)
   16506:	4e42      	ldr	r6, [pc, #264]	; (16610 <isr+0x120>)
   16508:	46b8      	mov	r8, r7
   1650a:	4b42      	ldr	r3, [pc, #264]	; (16614 <isr+0x124>)
		if (at_cmd_len > 0) {
   1650c:	4d42      	ldr	r5, [pc, #264]	; (16618 <isr+0x128>)
   1650e:	1af6      	subs	r6, r6, r3
   16510:	08f6      	lsrs	r6, r6, #3
	while ((!at_buf_busy) &&
   16512:	783b      	ldrb	r3, [r7, #0]
   16514:	b9c3      	cbnz	r3, 16548 <isr+0x58>
	if (api->fifo_read == NULL) {
   16516:	68a3      	ldr	r3, [r4, #8]
   16518:	699b      	ldr	r3, [r3, #24]
   1651a:	b12b      	cbz	r3, 16528 <isr+0x38>
	return api->fifo_read(dev, rx_data, size);
   1651c:	2201      	movs	r2, #1
   1651e:	4620      	mov	r0, r4
   16520:	f10d 0107 	add.w	r1, sp, #7
   16524:	4798      	blx	r3
   16526:	b178      	cbz	r0, 16548 <isr+0x58>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   16528:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   1652c:	2908      	cmp	r1, #8
   1652e:	d001      	beq.n	16534 <isr+0x44>
   16530:	297f      	cmp	r1, #127	; 0x7f
   16532:	d10c      	bne.n	1654e <isr+0x5e>
		if (at_cmd_len > 0) {
   16534:	682b      	ldr	r3, [r5, #0]
   16536:	2b00      	cmp	r3, #0
   16538:	d0eb      	beq.n	16512 <isr+0x22>
			at_cmd_len--;
   1653a:	3b01      	subs	r3, #1
   1653c:	602b      	str	r3, [r5, #0]
   1653e:	e7e8      	b.n	16512 <isr+0x22>
	return api->irq_rx_ready(dev);
   16540:	4620      	mov	r0, r4
   16542:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   16544:	2800      	cmp	r0, #0
   16546:	d1dd      	bne.n	16504 <isr+0x14>
	}
}
   16548:	b002      	add	sp, #8
   1654a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!inside_quotes) {
   1654e:	4833      	ldr	r0, [pc, #204]	; (1661c <isr+0x12c>)
   16550:	7803      	ldrb	r3, [r0, #0]
   16552:	b993      	cbnz	r3, 1657a <isr+0x8a>
		switch (character) {
   16554:	290a      	cmp	r1, #10
   16556:	d01e      	beq.n	16596 <isr+0xa6>
   16558:	290d      	cmp	r1, #13
   1655a:	d00a      	beq.n	16572 <isr+0x82>
   1655c:	b969      	cbnz	r1, 1657a <isr+0x8a>
			if (term_mode == MODE_NULL_TERM) {
   1655e:	4b30      	ldr	r3, [pc, #192]	; (16620 <isr+0x130>)
   16560:	781b      	ldrb	r3, [r3, #0]
   16562:	b3a3      	cbz	r3, 165ce <isr+0xde>
			LOG_WRN("Ignored null; would terminate string early.");
   16564:	01b1      	lsls	r1, r6, #6
   16566:	482f      	ldr	r0, [pc, #188]	; (16624 <isr+0x134>)
   16568:	f041 0102 	orr.w	r1, r1, #2
   1656c:	f008 fe4e 	bl	1f20c <log_0>
			return;
   16570:	e7cf      	b.n	16512 <isr+0x22>
			if (term_mode == MODE_CR) {
   16572:	4a2b      	ldr	r2, [pc, #172]	; (16620 <isr+0x130>)
   16574:	7812      	ldrb	r2, [r2, #0]
   16576:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   16578:	d029      	beq.n	165ce <isr+0xde>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1657a:	f8d5 c000 	ldr.w	ip, [r5]
   1657e:	f10c 0201 	add.w	r2, ip, #1
   16582:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   16586:	d317      	bcc.n	165b8 <isr+0xc8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   16588:	01b2      	lsls	r2, r6, #6
   1658a:	4827      	ldr	r0, [pc, #156]	; (16628 <isr+0x138>)
   1658c:	f042 0201 	orr.w	r2, r2, #1
   16590:	f008 fe49 	bl	1f226 <log_1>
		return;
   16594:	e7bd      	b.n	16512 <isr+0x22>
			if (term_mode == MODE_LF) {
   16596:	4a22      	ldr	r2, [pc, #136]	; (16620 <isr+0x130>)
   16598:	7812      	ldrb	r2, [r2, #0]
   1659a:	2a02      	cmp	r2, #2
   1659c:	d017      	beq.n	165ce <isr+0xde>
			if (term_mode == MODE_CR_LF &&
   1659e:	2a03      	cmp	r2, #3
   165a0:	d1eb      	bne.n	1657a <isr+0x8a>
   165a2:	f8d5 c000 	ldr.w	ip, [r5]
   165a6:	f1bc 0f00 	cmp.w	ip, #0
   165aa:	d0e6      	beq.n	1657a <isr+0x8a>
			    at_buf[at_cmd_len - 1] == '\r') {
   165ac:	4a1f      	ldr	r2, [pc, #124]	; (1662c <isr+0x13c>)
   165ae:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   165b0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   165b4:	2a0d      	cmp	r2, #13
   165b6:	e7df      	b.n	16578 <isr+0x88>
	at_buf[at_cmd_len] = character;
   165b8:	f8df e070 	ldr.w	lr, [pc, #112]	; 1662c <isr+0x13c>
	if (character == '"') {
   165bc:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   165be:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   165c2:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   165c4:	d1a5      	bne.n	16512 <isr+0x22>
	if (!inside_quotes) {
   165c6:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   165ca:	7003      	strb	r3, [r0, #0]
   165cc:	e7a1      	b.n	16512 <isr+0x22>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   165ce:	2200      	movs	r2, #0
   165d0:	6829      	ldr	r1, [r5, #0]
   165d2:	4b16      	ldr	r3, [pc, #88]	; (1662c <isr+0x13c>)
	inside_quotes = false;
   165d4:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   165d6:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   165d8:	4619      	mov	r1, r3
   165da:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   165dc:	f813 2b01 	ldrb.w	r2, [r3], #1
   165e0:	2a20      	cmp	r2, #32
   165e2:	d802      	bhi.n	165ea <isr+0xfa>
		} else if (*c == '\0') {
   165e4:	2a00      	cmp	r2, #0
   165e6:	d1f9      	bne.n	165dc <isr+0xec>
   165e8:	e793      	b.n	16512 <isr+0x22>
	if (at_buf[0]) {
   165ea:	780b      	ldrb	r3, [r1, #0]
   165ec:	2b00      	cmp	r3, #0
   165ee:	d090      	beq.n	16512 <isr+0x22>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   165f0:	4b0f      	ldr	r3, [pc, #60]	; (16630 <isr+0x140>)
   165f2:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable != NULL) {
   165f4:	6883      	ldr	r3, [r0, #8]
   165f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   165f8:	b103      	cbz	r3, 165fc <isr+0x10c>
		api->irq_rx_disable(dev);
   165fa:	4798      	blx	r3
		at_buf_busy = true;
   165fc:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   165fe:	490d      	ldr	r1, [pc, #52]	; (16634 <isr+0x144>)
   16600:	480d      	ldr	r0, [pc, #52]	; (16638 <isr+0x148>)
		at_buf_busy = true;
   16602:	f888 3000 	strb.w	r3, [r8]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   16606:	f00b fca4 	bl	21f52 <k_work_submit_to_queue>
   1660a:	e782      	b.n	16512 <isr+0x22>
   1660c:	2000f362 	.word	0x2000f362
   16610:	00022fd8 	.word	0x00022fd8
   16614:	00022fd8 	.word	0x00022fd8
   16618:	2000d330 	.word	0x2000d330
   1661c:	2000f363 	.word	0x2000f363
   16620:	2000f364 	.word	0x2000f364
   16624:	00023d50 	.word	0x00023d50
   16628:	00023d7c 	.word	0x00023d7c
   1662c:	2000e362 	.word	0x2000e362
   16630:	2000d344 	.word	0x2000d344
   16634:	2000d334 	.word	0x2000d334
   16638:	2000cbf8 	.word	0x2000cbf8

0001663c <cmd_send>:
{
   1663c:	b508      	push	{r3, lr}
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   1663e:	4b0f      	ldr	r3, [pc, #60]	; (1667c <cmd_send+0x40>)
   16640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16644:	4618      	mov	r0, r3
   16646:	4a0e      	ldr	r2, [pc, #56]	; (16680 <cmd_send+0x44>)
   16648:	f005 fa5c 	bl	1bb04 <nrf_modem_at_cmd>
	if (err < 0) {
   1664c:	1e01      	subs	r1, r0, #0
   1664e:	da09      	bge.n	16664 <cmd_send+0x28>
   16650:	4a0c      	ldr	r2, [pc, #48]	; (16684 <cmd_send+0x48>)
   16652:	4b0d      	ldr	r3, [pc, #52]	; (16688 <cmd_send+0x4c>)
		LOG_ERR("Error while processing AT command: %d", err);
   16654:	480d      	ldr	r0, [pc, #52]	; (1668c <cmd_send+0x50>)
   16656:	1ad2      	subs	r2, r2, r3
   16658:	08d2      	lsrs	r2, r2, #3
   1665a:	0192      	lsls	r2, r2, #6
   1665c:	f042 0201 	orr.w	r2, r2, #1
   16660:	f008 fde1 	bl	1f226 <log_1>
	write_uart_string(at_buf);
   16664:	4805      	ldr	r0, [pc, #20]	; (1667c <cmd_send+0x40>)
   16666:	f7ff ff35 	bl	164d4 <write_uart_string>
	at_buf_busy = false;
   1666a:	2200      	movs	r2, #0
   1666c:	4b08      	ldr	r3, [pc, #32]	; (16690 <cmd_send+0x54>)
   1666e:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
   16670:	4b08      	ldr	r3, [pc, #32]	; (16694 <cmd_send+0x58>)
   16672:	6818      	ldr	r0, [r3, #0]
}
   16674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   16678:	f00a b9d3 	b.w	20a22 <z_impl_uart_irq_rx_enable>
   1667c:	2000e362 	.word	0x2000e362
   16680:	00024ebf 	.word	0x00024ebf
   16684:	00022fd8 	.word	0x00022fd8
   16688:	00022fd8 	.word	0x00022fd8
   1668c:	00023d9c 	.word	0x00023d9c
   16690:	2000f362 	.word	0x2000f362
   16694:	2000d344 	.word	0x2000d344

00016698 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   16698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   1669c:	2201      	movs	r2, #1
   1669e:	4b42      	ldr	r3, [pc, #264]	; (167a8 <at_host_init+0x110>)
   166a0:	701a      	strb	r2, [r3, #0]
   166a2:	4842      	ldr	r0, [pc, #264]	; (167ac <at_host_init+0x114>)
   166a4:	f005 fd56 	bl	1c154 <z_impl_device_get_binding>
   166a8:	4d41      	ldr	r5, [pc, #260]	; (167b0 <at_host_init+0x118>)
   166aa:	4a42      	ldr	r2, [pc, #264]	; (167b4 <at_host_init+0x11c>)
	uart_dev = device_get_binding(uart_dev_name);
   166ac:	4e42      	ldr	r6, [pc, #264]	; (167b8 <at_host_init+0x120>)
   166ae:	1aad      	subs	r5, r5, r2
   166b0:	6030      	str	r0, [r6, #0]
	if (uart_dev == NULL) {
   166b2:	08ed      	lsrs	r5, r5, #3
   166b4:	b9a0      	cbnz	r0, 166e0 <at_host_init+0x48>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   166b6:	01aa      	lsls	r2, r5, #6
   166b8:	493c      	ldr	r1, [pc, #240]	; (167ac <at_host_init+0x114>)
   166ba:	4840      	ldr	r0, [pc, #256]	; (167bc <at_host_init+0x124>)
   166bc:	f042 0201 	orr.w	r2, r2, #1
   166c0:	f008 fdb1 	bl	1f226 <log_1>
		return -EINVAL;
   166c4:	f06f 0115 	mvn.w	r1, #21
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   166c8:	01aa      	lsls	r2, r5, #6
   166ca:	483d      	ldr	r0, [pc, #244]	; (167c0 <at_host_init+0x128>)
   166cc:	f042 0201 	orr.w	r2, r2, #1
   166d0:	f008 fda9 	bl	1f226 <log_1>
		return -EFAULT;
   166d4:	f06f 040d 	mvn.w	r4, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   166d8:	4620      	mov	r0, r4
   166da:	b004      	add	sp, #16
   166dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   166e0:	f00b fdc1 	bl	22266 <z_impl_k_uptime_ticks>
   166e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   166e8:	460a      	mov	r2, r1
   166ea:	fba0 0103 	umull	r0, r1, r0, r3
   166ee:	fb03 1102 	mla	r1, r3, r2, r1
   166f2:	0bc7      	lsrs	r7, r0, #15
   166f4:	ea4f 1885 	mov.w	r8, r5, lsl #6
			LOG_INF("UART check failed: %d. "
   166f8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 167dc <at_host_init+0x144>
   166fc:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
   16700:	f048 0903 	orr.w	r9, r8, #3
		err = uart_err_check(uart_dev);
   16704:	6830      	ldr	r0, [r6, #0]
	if (api->err_check == NULL) {
   16706:	6883      	ldr	r3, [r0, #8]
   16708:	689b      	ldr	r3, [r3, #8]
   1670a:	b1db      	cbz	r3, 16744 <at_host_init+0xac>
	return api->err_check(dev);
   1670c:	4798      	blx	r3
		if (err) {
   1670e:	4604      	mov	r4, r0
   16710:	b388      	cbz	r0, 16776 <at_host_init+0xde>
   16712:	f00b fda8 	bl	22266 <z_impl_k_uptime_ticks>
   16716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1671a:	460a      	mov	r2, r1
   1671c:	fba0 0103 	umull	r0, r1, r0, r3
   16720:	fb03 1102 	mla	r1, r3, r2, r1
   16724:	0bc3      	lsrs	r3, r0, #15
   16726:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   1672a:	1bdb      	subs	r3, r3, r7
   1672c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   16730:	d90b      	bls.n	1674a <at_host_init+0xb2>
				LOG_ERR("UART check failed: %d. "
   16732:	4621      	mov	r1, r4
   16734:	4823      	ldr	r0, [pc, #140]	; (167c4 <at_host_init+0x12c>)
   16736:	f048 0201 	orr.w	r2, r8, #1
   1673a:	f008 fd74 	bl	1f226 <log_1>
				return -EIO;
   1673e:	f06f 0104 	mvn.w	r1, #4
   16742:	e7c1      	b.n	166c8 <at_host_init+0x30>
		return -ENOSYS;
   16744:	f06f 0457 	mvn.w	r4, #87	; 0x57
   16748:	e7e3      	b.n	16712 <at_host_init+0x7a>
			LOG_INF("UART check failed: %d. "
   1674a:	464a      	mov	r2, r9
   1674c:	4621      	mov	r1, r4
   1674e:	4650      	mov	r0, sl
   16750:	f008 fd69 	bl	1f226 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   16754:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
   16756:	6883      	ldr	r3, [r0, #8]
   16758:	699b      	ldr	r3, [r3, #24]
   1675a:	b903      	cbnz	r3, 1675e <at_host_init+0xc6>
   1675c:	e7fe      	b.n	1675c <at_host_init+0xc4>
	return api->fifo_read(dev, rx_data, size);
   1675e:	2201      	movs	r2, #1
   16760:	f10d 010f 	add.w	r1, sp, #15
   16764:	4798      	blx	r3
   16766:	2800      	cmp	r0, #0
   16768:	d1f4      	bne.n	16754 <at_host_init+0xbc>
	return z_impl_k_sleep(timeout);
   1676a:	2100      	movs	r1, #0
   1676c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   16770:	f006 fd0e 	bl	1d190 <z_impl_k_sleep>
	} while (err);
   16774:	e7c6      	b.n	16704 <at_host_init+0x6c>
	uart_irq_callback_set(uart_dev, isr);
   16776:	6830      	ldr	r0, [r6, #0]
	const struct uart_driver_api *api =
   16778:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1677a:	b123      	cbz	r3, 16786 <at_host_init+0xee>
   1677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1677e:	b113      	cbz	r3, 16786 <at_host_init+0xee>
		api->irq_callback_set(dev, cb, user_data);
   16780:	4622      	mov	r2, r4
   16782:	4911      	ldr	r1, [pc, #68]	; (167c8 <at_host_init+0x130>)
   16784:	4798      	blx	r3
	k_work_init(&cmd_send_work, cmd_send);
   16786:	4911      	ldr	r1, [pc, #68]	; (167cc <at_host_init+0x134>)
   16788:	4811      	ldr	r0, [pc, #68]	; (167d0 <at_host_init+0x138>)
   1678a:	f00b fbd9 	bl	21f40 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   1678e:	2300      	movs	r3, #0
   16790:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16794:	9300      	str	r3, [sp, #0]
   16796:	490f      	ldr	r1, [pc, #60]	; (167d4 <at_host_init+0x13c>)
   16798:	230a      	movs	r3, #10
   1679a:	480f      	ldr	r0, [pc, #60]	; (167d8 <at_host_init+0x140>)
   1679c:	f006 f9a4 	bl	1cae8 <k_work_queue_start>
	uart_irq_rx_enable(uart_dev);
   167a0:	6830      	ldr	r0, [r6, #0]
   167a2:	f00a f93e 	bl	20a22 <z_impl_uart_irq_rx_enable>
}
   167a6:	e797      	b.n	166d8 <at_host_init+0x40>
   167a8:	2000f364 	.word	0x2000f364
   167ac:	00023c96 	.word	0x00023c96
   167b0:	00022fd8 	.word	0x00022fd8
   167b4:	00022fd8 	.word	0x00022fd8
   167b8:	2000d344 	.word	0x2000d344
   167bc:	00023dc2 	.word	0x00023dc2
   167c0:	00023e3d 	.word	0x00023e3d
   167c4:	00023dd2 	.word	0x00023dd2
   167c8:	000164f1 	.word	0x000164f1
   167cc:	0001663d 	.word	0x0001663d
   167d0:	2000d334 	.word	0x2000d334
   167d4:	20012548 	.word	0x20012548
   167d8:	2000cbf8 	.word	0x2000cbf8
   167dc:	00023e08 	.word	0x00023e08

000167e0 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   167e0:	4b06      	ldr	r3, [pc, #24]	; (167fc <is_valid_notification_char+0x1c>)
   167e2:	5cc3      	ldrb	r3, [r0, r3]
   167e4:	f003 0303 	and.w	r3, r3, #3
   167e8:	2b02      	cmp	r3, #2
   167ea:	bf08      	it	eq
   167ec:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   167ee:	3841      	subs	r0, #65	; 0x41
   167f0:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   167f2:	2819      	cmp	r0, #25
   167f4:	bf8c      	ite	hi
   167f6:	2000      	movhi	r0, #0
   167f8:	2001      	movls	r0, #1
   167fa:	4770      	bx	lr
   167fc:	000252b9 	.word	0x000252b9

00016800 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   16800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16802:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   16804:	2400      	movs	r4, #0
   16806:	4e09      	ldr	r6, [pc, #36]	; (1682c <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   16808:	f856 7b04 	ldr.w	r7, [r6], #4
   1680c:	4638      	mov	r0, r7
   1680e:	f7fa fccf 	bl	111b0 <strlen>
   16812:	4639      	mov	r1, r7
   16814:	4602      	mov	r2, r0
   16816:	4628      	mov	r0, r5
   16818:	f00b ffdc 	bl	227d4 <strncmp>
		if (!diff) {
   1681c:	b120      	cbz	r0, 16828 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1681e:	3401      	adds	r4, #1
   16820:	2c04      	cmp	r4, #4
   16822:	d1f1      	bne.n	16808 <is_result+0x8>
			return true;
		}
	}

	return false;
   16824:	2000      	movs	r0, #0
}
   16826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   16828:	2001      	movs	r0, #1
   1682a:	e7fc      	b.n	16826 <is_result+0x26>
   1682c:	00023338 	.word	0x00023338

00016830 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   16830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   16834:	6805      	ldr	r5, [r0, #0]
{
   16836:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   16838:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1683a:	782b      	ldrb	r3, [r5, #0]
{
   1683c:	4680      	mov	r8, r0
   1683e:	460f      	mov	r7, r1
   16840:	4616      	mov	r6, r2
   16842:	2b00      	cmp	r3, #0
   16844:	f000 80ca 	beq.w	169dc <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   16848:	4b66      	ldr	r3, [pc, #408]	; (169e4 <at_parse_process_element+0x1b4>)
   1684a:	781c      	ldrb	r4, [r3, #0]
   1684c:	2c06      	cmp	r4, #6
   1684e:	d110      	bne.n	16872 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   16850:	1c6b      	adds	r3, r5, #1
   16852:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   16854:	9a00      	ldr	r2, [sp, #0]
   16856:	7810      	ldrb	r0, [r2, #0]
   16858:	f7ff ffc2 	bl	167e0 <is_valid_notification_char>
   1685c:	b930      	cbnz	r0, 1686c <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1685e:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   16860:	462a      	mov	r2, r5
   16862:	4639      	mov	r1, r7
   16864:	4630      	mov	r0, r6
   16866:	f00a f975 	bl	20b54 <at_params_string_put>
   1686a:	e01c      	b.n	168a6 <at_parse_process_element+0x76>
			tmpstr++;
   1686c:	3201      	adds	r2, #1
   1686e:	9200      	str	r2, [sp, #0]
   16870:	e7f0      	b.n	16854 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   16872:	2c07      	cmp	r4, #7
   16874:	d125      	bne.n	168c2 <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   16876:	4668      	mov	r0, sp
   16878:	f00a f8e3 	bl	20a42 <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1687c:	4a5a      	ldr	r2, [pc, #360]	; (169e8 <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   1687e:	9b00      	ldr	r3, [sp, #0]
   16880:	7819      	ldrb	r1, [r3, #0]
   16882:	5c89      	ldrb	r1, [r1, r2]
   16884:	0749      	lsls	r1, r1, #29
   16886:	d115      	bne.n	168b4 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   16888:	462a      	mov	r2, r5
   1688a:	1b5b      	subs	r3, r3, r5
   1688c:	4639      	mov	r1, r7
   1688e:	4630      	mov	r0, r6
   16890:	f00a f960 	bl	20b54 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   16894:	9b00      	ldr	r3, [sp, #0]
   16896:	781a      	ldrb	r2, [r3, #0]
   16898:	2a3d      	cmp	r2, #61	; 0x3d
   1689a:	d10e      	bne.n	168ba <at_parse_process_element+0x8a>
   1689c:	785a      	ldrb	r2, [r3, #1]
   1689e:	2a3f      	cmp	r2, #63	; 0x3f
   168a0:	d101      	bne.n	168a6 <at_parse_process_element+0x76>
			tmpstr += 2;
   168a2:	3302      	adds	r3, #2
			tmpstr++;
   168a4:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   168a6:	2000      	movs	r0, #0
	*str = tmpstr;
   168a8:	9b00      	ldr	r3, [sp, #0]
   168aa:	f8c8 3000 	str.w	r3, [r8]
}
   168ae:	b023      	add	sp, #140	; 0x8c
   168b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   168b4:	3301      	adds	r3, #1
   168b6:	9300      	str	r3, [sp, #0]
   168b8:	e7e1      	b.n	1687e <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   168ba:	2a3f      	cmp	r2, #63	; 0x3f
   168bc:	d1f3      	bne.n	168a6 <at_parse_process_element+0x76>
			tmpstr++;
   168be:	3301      	adds	r3, #1
   168c0:	e7f0      	b.n	168a4 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   168c2:	2c08      	cmp	r4, #8
   168c4:	d103      	bne.n	168ce <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   168c6:	4610      	mov	r0, r2
   168c8:	f00a f91a 	bl	20b00 <at_params_empty_put>
   168cc:	e7eb      	b.n	168a6 <at_parse_process_element+0x76>
	} else if (state == STRING) {
   168ce:	2c02      	cmp	r4, #2
   168d0:	d111      	bne.n	168f6 <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   168d2:	9a00      	ldr	r2, [sp, #0]
   168d4:	7811      	ldrb	r1, [r2, #0]
   168d6:	4608      	mov	r0, r1
   168d8:	f00a f8aa 	bl	20a30 <is_lfcr>
   168dc:	b918      	cbnz	r0, 168e6 <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   168de:	b111      	cbz	r1, 168e6 <at_parse_process_element+0xb6>
			tmpstr++;
   168e0:	3201      	adds	r2, #1
   168e2:	9200      	str	r2, [sp, #0]
   168e4:	e7f5      	b.n	168d2 <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   168e6:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   168e8:	462a      	mov	r2, r5
   168ea:	4639      	mov	r1, r7
   168ec:	4630      	mov	r0, r6
   168ee:	f00a f931 	bl	20b54 <at_params_string_put>
		tmpstr++;
   168f2:	9b00      	ldr	r3, [sp, #0]
   168f4:	e7e3      	b.n	168be <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   168f6:	2c03      	cmp	r4, #3
   168f8:	d109      	bne.n	1690e <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   168fa:	9b00      	ldr	r3, [sp, #0]
   168fc:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   168fe:	2a22      	cmp	r2, #34	; 0x22
   16900:	d003      	beq.n	1690a <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16902:	b112      	cbz	r2, 1690a <at_parse_process_element+0xda>
			tmpstr++;
   16904:	3301      	adds	r3, #1
   16906:	9300      	str	r3, [sp, #0]
   16908:	e7f7      	b.n	168fa <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   1690a:	1b5b      	subs	r3, r3, r5
   1690c:	e7ec      	b.n	168e8 <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   1690e:	2c01      	cmp	r4, #1
   16910:	d13c      	bne.n	1698c <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   16912:	4628      	mov	r0, r5
   16914:	220a      	movs	r2, #10
   16916:	a901      	add	r1, sp, #4
   16918:	f007 fab8 	bl	1de8c <strtoul>
		tmpstr = next;
   1691c:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1691e:	4d33      	ldr	r5, [pc, #204]	; (169ec <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   16920:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   16922:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   16924:	9800      	ldr	r0, [sp, #0]
   16926:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   16928:	2b29      	cmp	r3, #41	; 0x29
   1692a:	d01f      	beq.n	1696c <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1692c:	b1f3      	cbz	r3, 1696c <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1692e:	3b2c      	subs	r3, #44	; 0x2c
   16930:	b2db      	uxtb	r3, r3
   16932:	3001      	adds	r0, #1
   16934:	2b11      	cmp	r3, #17
				tmparray[i++] =
   16936:	9000      	str	r0, [sp, #0]
   16938:	d826      	bhi.n	16988 <at_parse_process_element+0x158>
   1693a:	fa25 f303 	lsr.w	r3, r5, r3
   1693e:	07db      	lsls	r3, r3, #31
   16940:	d522      	bpl.n	16988 <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   16942:	220a      	movs	r2, #10
   16944:	a901      	add	r1, sp, #4
   16946:	f007 faa1 	bl	1de8c <strtoul>
				tmparray[i++] =
   1694a:	ab22      	add	r3, sp, #136	; 0x88
   1694c:	f104 0901 	add.w	r9, r4, #1
   16950:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   16954:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   16958:	9800      	ldr	r0, [sp, #0]
   1695a:	f7fa fc29 	bl	111b0 <strlen>
   1695e:	4604      	mov	r4, r0
   16960:	9801      	ldr	r0, [sp, #4]
   16962:	f7fa fc25 	bl	111b0 <strlen>
   16966:	4284      	cmp	r4, r0
   16968:	d107      	bne.n	1697a <at_parse_process_element+0x14a>
				tmparray[i++] =
   1696a:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1696c:	4639      	mov	r1, r7
   1696e:	4630      	mov	r0, r6
   16970:	00a3      	lsls	r3, r4, #2
   16972:	aa02      	add	r2, sp, #8
   16974:	f00a f911 	bl	20b9a <at_params_array_put>
		tmpstr++;
   16978:	e7bb      	b.n	168f2 <at_parse_process_element+0xc2>
					tmpstr = next;
   1697a:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1697c:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   16980:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   16982:	d0f2      	beq.n	1696a <at_parse_process_element+0x13a>
				tmpstr++;
   16984:	464c      	mov	r4, r9
   16986:	e7cd      	b.n	16924 <at_parse_process_element+0xf4>
   16988:	46a1      	mov	r9, r4
   1698a:	e7fb      	b.n	16984 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   1698c:	2c04      	cmp	r4, #4
   1698e:	d10d      	bne.n	169ac <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   16990:	220a      	movs	r2, #10
   16992:	4628      	mov	r0, r5
   16994:	a902      	add	r1, sp, #8
   16996:	f007 f9f5 	bl	1dd84 <strtoll>
   1699a:	460b      	mov	r3, r1
		tmpstr = next;
   1699c:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1699e:	4602      	mov	r2, r0
		tmpstr = next;
   169a0:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   169a2:	4630      	mov	r0, r6
   169a4:	4639      	mov	r1, r7
   169a6:	f00a f8c0 	bl	20b2a <at_params_int_put>
   169aa:	e77c      	b.n	168a6 <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   169ac:	2c05      	cmp	r4, #5
   169ae:	d10b      	bne.n	169c8 <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   169b0:	490d      	ldr	r1, [pc, #52]	; (169e8 <at_parse_process_element+0x1b8>)
   169b2:	9b00      	ldr	r3, [sp, #0]
   169b4:	781a      	ldrb	r2, [r3, #0]
   169b6:	5c52      	ldrb	r2, [r2, r1]
   169b8:	f012 0f44 	tst.w	r2, #68	; 0x44
   169bc:	d101      	bne.n	169c2 <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   169be:	1b5b      	subs	r3, r3, r5
   169c0:	e74e      	b.n	16860 <at_parse_process_element+0x30>
			tmpstr++;
   169c2:	3301      	adds	r3, #1
   169c4:	9300      	str	r3, [sp, #0]
   169c6:	e7f4      	b.n	169b2 <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   169c8:	2c09      	cmp	r4, #9
   169ca:	f47f af6c 	bne.w	168a6 <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   169ce:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   169d0:	781a      	ldrb	r2, [r3, #0]
   169d2:	2a00      	cmp	r2, #0
   169d4:	d0f3      	beq.n	169be <at_parse_process_element+0x18e>
			tmpstr++;
   169d6:	3301      	adds	r3, #1
   169d8:	9300      	str	r3, [sp, #0]
   169da:	e7f8      	b.n	169ce <at_parse_process_element+0x19e>
		return -1;
   169dc:	f04f 30ff 	mov.w	r0, #4294967295
   169e0:	e765      	b.n	168ae <at_parse_process_element+0x7e>
   169e2:	bf00      	nop
   169e4:	2000f366 	.word	0x2000f366
   169e8:	000252b9 	.word	0x000252b9
   169ec:	00024001 	.word	0x00024001

000169f0 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   169f0:	b510      	push	{r4, lr}
   169f2:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   169f4:	f7fa fbdc 	bl	111b0 <strlen>
   169f8:	2801      	cmp	r0, #1
   169fa:	d922      	bls.n	16a42 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   169fc:	7821      	ldrb	r1, [r4, #0]
   169fe:	4b13      	ldr	r3, [pc, #76]	; (16a4c <is_command+0x5c>)
   16a00:	5cca      	ldrb	r2, [r1, r3]
   16a02:	f002 0203 	and.w	r2, r2, #3
   16a06:	2a02      	cmp	r2, #2
   16a08:	bf08      	it	eq
   16a0a:	3920      	subeq	r1, #32
   16a0c:	2941      	cmp	r1, #65	; 0x41
   16a0e:	461a      	mov	r2, r3
   16a10:	d117      	bne.n	16a42 <is_command+0x52>
   16a12:	7863      	ldrb	r3, [r4, #1]
   16a14:	5cd2      	ldrb	r2, [r2, r3]
   16a16:	f002 0203 	and.w	r2, r2, #3
   16a1a:	2a02      	cmp	r2, #2
   16a1c:	bf08      	it	eq
   16a1e:	3b20      	subeq	r3, #32
   16a20:	2b54      	cmp	r3, #84	; 0x54
   16a22:	d10e      	bne.n	16a42 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16a24:	78a2      	ldrb	r2, [r4, #2]
   16a26:	2a25      	cmp	r2, #37	; 0x25
   16a28:	d00d      	beq.n	16a46 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   16a2a:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   16a2e:	2b23      	cmp	r3, #35	; 0x23
   16a30:	d009      	beq.n	16a46 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   16a32:	4610      	mov	r0, r2
   16a34:	f009 fffc 	bl	20a30 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   16a38:	b910      	cbnz	r0, 16a40 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16a3a:	fab2 f082 	clz	r0, r2
   16a3e:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   16a40:	bd10      	pop	{r4, pc}
		return false;
   16a42:	2000      	movs	r0, #0
   16a44:	e7fc      	b.n	16a40 <is_command+0x50>
		return true;
   16a46:	2001      	movs	r0, #1
   16a48:	e7fa      	b.n	16a40 <is_command+0x50>
   16a4a:	bf00      	nop
   16a4c:	000252b9 	.word	0x000252b9

00016a50 <at_parse_detect_type>:
{
   16a50:	b570      	push	{r4, r5, r6, lr}
   16a52:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   16a54:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   16a56:	4e64      	ldr	r6, [pc, #400]	; (16be8 <at_parse_detect_type+0x198>)
   16a58:	2900      	cmp	r1, #0
   16a5a:	d137      	bne.n	16acc <at_parse_detect_type+0x7c>
   16a5c:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16a5e:	2b2b      	cmp	r3, #43	; 0x2b
   16a60:	d001      	beq.n	16a66 <at_parse_detect_type+0x16>
   16a62:	2b25      	cmp	r3, #37	; 0x25
   16a64:	d132      	bne.n	16acc <at_parse_detect_type+0x7c>
	state = new_state;
   16a66:	2206      	movs	r2, #6
   16a68:	4b60      	ldr	r3, [pc, #384]	; (16bec <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   16a6a:	4620      	mov	r0, r4
	state = new_state;
   16a6c:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   16a6e:	4960      	ldr	r1, [pc, #384]	; (16bf0 <at_parse_detect_type+0x1a0>)
   16a70:	2205      	movs	r2, #5
   16a72:	f00b feaf 	bl	227d4 <strncmp>
   16a76:	b920      	cbnz	r0, 16a82 <at_parse_detect_type+0x32>
			retval = true;
   16a78:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   16a7a:	7030      	strb	r0, [r6, #0]
	return 0;
   16a7c:	2000      	movs	r0, #0
	*str = tmpstr;
   16a7e:	602c      	str	r4, [r5, #0]
	return 0;
   16a80:	e064      	b.n	16b4c <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   16a82:	2205      	movs	r2, #5
   16a84:	4620      	mov	r0, r4
   16a86:	495b      	ldr	r1, [pc, #364]	; (16bf4 <at_parse_detect_type+0x1a4>)
   16a88:	f00b fea4 	bl	227d4 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   16a8c:	2800      	cmp	r0, #0
   16a8e:	d0f3      	beq.n	16a78 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   16a90:	220b      	movs	r2, #11
   16a92:	4620      	mov	r0, r4
   16a94:	4958      	ldr	r1, [pc, #352]	; (16bf8 <at_parse_detect_type+0x1a8>)
   16a96:	f00b fe9d 	bl	227d4 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   16a9a:	2800      	cmp	r0, #0
   16a9c:	d0ec      	beq.n	16a78 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   16a9e:	220a      	movs	r2, #10
   16aa0:	4620      	mov	r0, r4
   16aa2:	4956      	ldr	r1, [pc, #344]	; (16bfc <at_parse_detect_type+0x1ac>)
   16aa4:	f00b fe96 	bl	227d4 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   16aa8:	2800      	cmp	r0, #0
   16aaa:	d0e5      	beq.n	16a78 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   16aac:	220b      	movs	r2, #11
   16aae:	4620      	mov	r0, r4
   16ab0:	4953      	ldr	r1, [pc, #332]	; (16c00 <at_parse_detect_type+0x1b0>)
   16ab2:	f00b fe8f 	bl	227d4 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   16ab6:	2800      	cmp	r0, #0
   16ab8:	d0de      	beq.n	16a78 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   16aba:	2207      	movs	r2, #7
   16abc:	4620      	mov	r0, r4
   16abe:	4951      	ldr	r1, [pc, #324]	; (16c04 <at_parse_detect_type+0x1b4>)
   16ac0:	f00b fe88 	bl	227d4 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   16ac4:	fab0 f080 	clz	r0, r0
   16ac8:	0940      	lsrs	r0, r0, #5
   16aca:	e7d6      	b.n	16a7a <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   16acc:	7833      	ldrb	r3, [r6, #0]
   16ace:	b113      	cbz	r3, 16ad6 <at_parse_detect_type+0x86>
	state = new_state;
   16ad0:	4b46      	ldr	r3, [pc, #280]	; (16bec <at_parse_detect_type+0x19c>)
   16ad2:	2202      	movs	r2, #2
   16ad4:	e043      	b.n	16b5e <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   16ad6:	2900      	cmp	r1, #0
   16ad8:	dd39      	ble.n	16b4e <at_parse_detect_type+0xfe>
   16ada:	4622      	mov	r2, r4
   16adc:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   16ade:	f812 0b01 	ldrb.w	r0, [r2], #1
   16ae2:	f009 ffa5 	bl	20a30 <is_lfcr>
   16ae6:	2800      	cmp	r0, #0
   16ae8:	d1f8      	bne.n	16adc <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   16aea:	4630      	mov	r0, r6
   16aec:	f7fa fb60 	bl	111b0 <strlen>
   16af0:	2803      	cmp	r0, #3
   16af2:	d970      	bls.n	16bd6 <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   16af4:	7832      	ldrb	r2, [r6, #0]
   16af6:	4b44      	ldr	r3, [pc, #272]	; (16c08 <at_parse_detect_type+0x1b8>)
   16af8:	5cd1      	ldrb	r1, [r2, r3]
   16afa:	f001 0103 	and.w	r1, r1, #3
   16afe:	2902      	cmp	r1, #2
   16b00:	bf08      	it	eq
   16b02:	3a20      	subeq	r2, #32
   16b04:	2a41      	cmp	r2, #65	; 0x41
   16b06:	d166      	bne.n	16bd6 <at_parse_detect_type+0x186>
   16b08:	7872      	ldrb	r2, [r6, #1]
   16b0a:	5c99      	ldrb	r1, [r3, r2]
   16b0c:	f001 0103 	and.w	r1, r1, #3
   16b10:	2902      	cmp	r1, #2
   16b12:	bf08      	it	eq
   16b14:	3a20      	subeq	r2, #32
   16b16:	2a54      	cmp	r2, #84	; 0x54
   16b18:	d15d      	bne.n	16bd6 <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   16b1a:	78b2      	ldrb	r2, [r6, #2]
   16b1c:	5c99      	ldrb	r1, [r3, r2]
   16b1e:	f001 0103 	and.w	r1, r1, #3
   16b22:	2902      	cmp	r1, #2
   16b24:	bf08      	it	eq
   16b26:	3a20      	subeq	r2, #32
   16b28:	2a2b      	cmp	r2, #43	; 0x2b
   16b2a:	d00a      	beq.n	16b42 <at_parse_detect_type+0xf2>
   16b2c:	2a25      	cmp	r2, #37	; 0x25
   16b2e:	d152      	bne.n	16bd6 <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   16b30:	78f2      	ldrb	r2, [r6, #3]
   16b32:	5c9b      	ldrb	r3, [r3, r2]
   16b34:	f003 0303 	and.w	r3, r3, #3
   16b38:	2b02      	cmp	r3, #2
   16b3a:	bf08      	it	eq
   16b3c:	3a20      	subeq	r2, #32
   16b3e:	2a58      	cmp	r2, #88	; 0x58
   16b40:	d049      	beq.n	16bd6 <at_parse_detect_type+0x186>
	state = new_state;
   16b42:	2209      	movs	r2, #9
		return -2;
   16b44:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   16b48:	4b28      	ldr	r3, [pc, #160]	; (16bec <at_parse_detect_type+0x19c>)
   16b4a:	701a      	strb	r2, [r3, #0]
}
   16b4c:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   16b4e:	d108      	bne.n	16b62 <at_parse_detect_type+0x112>
   16b50:	4620      	mov	r0, r4
   16b52:	f7ff ff4d 	bl	169f0 <is_command>
   16b56:	4b25      	ldr	r3, [pc, #148]	; (16bec <at_parse_detect_type+0x19c>)
   16b58:	2800      	cmp	r0, #0
   16b5a:	d0ba      	beq.n	16ad2 <at_parse_detect_type+0x82>
	state = new_state;
   16b5c:	2207      	movs	r2, #7
   16b5e:	701a      	strb	r2, [r3, #0]
}
   16b60:	e78c      	b.n	16a7c <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   16b62:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   16b64:	4b28      	ldr	r3, [pc, #160]	; (16c08 <at_parse_detect_type+0x1b8>)
   16b66:	5cd3      	ldrb	r3, [r2, r3]
   16b68:	0759      	lsls	r1, r3, #29
   16b6a:	d403      	bmi.n	16b74 <at_parse_detect_type+0x124>
   16b6c:	2a2d      	cmp	r2, #45	; 0x2d
   16b6e:	d001      	beq.n	16b74 <at_parse_detect_type+0x124>
   16b70:	2a2b      	cmp	r2, #43	; 0x2b
   16b72:	d102      	bne.n	16b7a <at_parse_detect_type+0x12a>
	state = new_state;
   16b74:	2204      	movs	r2, #4
   16b76:	4b1d      	ldr	r3, [pc, #116]	; (16bec <at_parse_detect_type+0x19c>)
   16b78:	e7f1      	b.n	16b5e <at_parse_detect_type+0x10e>
	if (chr == '"') {
   16b7a:	2a22      	cmp	r2, #34	; 0x22
   16b7c:	d006      	beq.n	16b8c <at_parse_detect_type+0x13c>
	if (chr == '(') {
   16b7e:	2a28      	cmp	r2, #40	; 0x28
   16b80:	d109      	bne.n	16b96 <at_parse_detect_type+0x146>
   16b82:	2201      	movs	r2, #1
   16b84:	4b19      	ldr	r3, [pc, #100]	; (16bec <at_parse_detect_type+0x19c>)
		tmpstr++;
   16b86:	4414      	add	r4, r2
	state = new_state;
   16b88:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   16b8a:	e777      	b.n	16a7c <at_parse_detect_type+0x2c>
	state = new_state;
   16b8c:	2203      	movs	r2, #3
   16b8e:	4b17      	ldr	r3, [pc, #92]	; (16bec <at_parse_detect_type+0x19c>)
		tmpstr++;
   16b90:	3401      	adds	r4, #1
	state = new_state;
   16b92:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   16b94:	e772      	b.n	16a7c <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   16b96:	4610      	mov	r0, r2
   16b98:	f009 ff4a 	bl	20a30 <is_lfcr>
   16b9c:	b178      	cbz	r0, 16bbe <at_parse_detect_type+0x16e>
   16b9e:	4913      	ldr	r1, [pc, #76]	; (16bec <at_parse_detect_type+0x19c>)
   16ba0:	7808      	ldrb	r0, [r1, #0]
   16ba2:	2804      	cmp	r0, #4
   16ba4:	d108      	bne.n	16bb8 <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   16ba6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   16baa:	f009 ff41 	bl	20a30 <is_lfcr>
   16bae:	2800      	cmp	r0, #0
   16bb0:	d1f9      	bne.n	16ba6 <at_parse_detect_type+0x156>
	state = new_state;
   16bb2:	2305      	movs	r3, #5
   16bb4:	700b      	strb	r3, [r1, #0]
}
   16bb6:	e761      	b.n	16a7c <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   16bb8:	2808      	cmp	r0, #8
   16bba:	f43f af5f 	beq.w	16a7c <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16bbe:	3a2c      	subs	r2, #44	; 0x2c
   16bc0:	b2d2      	uxtb	r2, r2
   16bc2:	2a11      	cmp	r2, #17
   16bc4:	d80c      	bhi.n	16be0 <at_parse_detect_type+0x190>
   16bc6:	4b11      	ldr	r3, [pc, #68]	; (16c0c <at_parse_detect_type+0x1bc>)
   16bc8:	fa23 f202 	lsr.w	r2, r3, r2
   16bcc:	07d3      	lsls	r3, r2, #31
   16bce:	d507      	bpl.n	16be0 <at_parse_detect_type+0x190>
	state = new_state;
   16bd0:	2208      	movs	r2, #8
   16bd2:	4b06      	ldr	r3, [pc, #24]	; (16bec <at_parse_detect_type+0x19c>)
   16bd4:	e7c3      	b.n	16b5e <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   16bd6:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16bd8:	2b2b      	cmp	r3, #43	; 0x2b
   16bda:	d001      	beq.n	16be0 <at_parse_detect_type+0x190>
   16bdc:	2b25      	cmp	r3, #37	; 0x25
   16bde:	d1c0      	bne.n	16b62 <at_parse_detect_type+0x112>
		return -1;
   16be0:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   16be4:	602c      	str	r4, [r5, #0]
		return -1;
   16be6:	e7b1      	b.n	16b4c <at_parse_detect_type+0xfc>
   16be8:	2000f365 	.word	0x2000f365
   16bec:	2000f366 	.word	0x2000f366
   16bf0:	00023e67 	.word	0x00023e67
   16bf4:	00023e6d 	.word	0x00023e6d
   16bf8:	00023e73 	.word	0x00023e73
   16bfc:	00023e7f 	.word	0x00023e7f
   16c00:	00023e8a 	.word	0x00023e8a
   16c04:	00023e96 	.word	0x00023e96
   16c08:	000252b9 	.word	0x000252b9
   16c0c:	00024001 	.word	0x00024001

00016c10 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   16c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c14:	4689      	mov	r9, r1
   16c16:	4616      	mov	r6, r2
   16c18:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   16c1a:	4680      	mov	r8, r0
{
   16c1c:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   16c1e:	2800      	cmp	r0, #0
   16c20:	f000 8097 	beq.w	16d52 <at_parser_max_params_from_str+0x142>
   16c24:	2a00      	cmp	r2, #0
   16c26:	f000 8094 	beq.w	16d52 <at_parser_max_params_from_str+0x142>
   16c2a:	6853      	ldr	r3, [r2, #4]
   16c2c:	2b00      	cmp	r3, #0
   16c2e:	f000 8090 	beq.w	16d52 <at_parser_max_params_from_str+0x142>
	state = IDLE;
   16c32:	2500      	movs	r5, #0
	int index = 0;
   16c34:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   16c36:	4610      	mov	r0, r2
   16c38:	f009 ff3d 	bl	20ab6 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   16c3c:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   16c3e:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   16c42:	429f      	cmp	r7, r3
   16c44:	bf28      	it	cs
   16c46:	461f      	movcs	r7, r3
	state = IDLE;
   16c48:	4b43      	ldr	r3, [pc, #268]	; (16d58 <at_parser_max_params_from_str+0x148>)
   16c4a:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   16c4c:	4b43      	ldr	r3, [pc, #268]	; (16d5c <at_parser_max_params_from_str+0x14c>)
   16c4e:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   16c50:	9b03      	ldr	r3, [sp, #12]
   16c52:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16c54:	2a00      	cmp	r2, #0
   16c56:	d055      	beq.n	16d04 <at_parser_max_params_from_str+0xf4>
   16c58:	42a7      	cmp	r7, r4
   16c5a:	d953      	bls.n	16d04 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   16c5c:	4940      	ldr	r1, [pc, #256]	; (16d60 <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   16c5e:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   16c60:	5c52      	ldrb	r2, [r2, r1]
   16c62:	0711      	lsls	r1, r2, #28
			str++;
   16c64:	bf48      	it	mi
   16c66:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   16c68:	4621      	mov	r1, r4
			str++;
   16c6a:	bf48      	it	mi
   16c6c:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   16c6e:	f7ff feef 	bl	16a50 <at_parse_detect_type>
		if (ret == -1) {
   16c72:	1c42      	adds	r2, r0, #1
   16c74:	d046      	beq.n	16d04 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   16c76:	3002      	adds	r0, #2
			index = 0;
   16c78:	bf08      	it	eq
   16c7a:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   16c7c:	4632      	mov	r2, r6
   16c7e:	4621      	mov	r1, r4
   16c80:	a803      	add	r0, sp, #12
			str = *at_params_str;
   16c82:	bf08      	it	eq
   16c84:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   16c88:	f7ff fdd2 	bl	16830 <at_parse_process_element>
   16c8c:	3001      	adds	r0, #1
   16c8e:	d039      	beq.n	16d04 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   16c90:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16c92:	7813      	ldrb	r3, [r2, #0]
   16c94:	3b2c      	subs	r3, #44	; 0x2c
   16c96:	b2db      	uxtb	r3, r3
   16c98:	2b11      	cmp	r3, #17
   16c9a:	d81b      	bhi.n	16cd4 <at_parser_max_params_from_str+0xc4>
   16c9c:	4931      	ldr	r1, [pc, #196]	; (16d64 <at_parser_max_params_from_str+0x154>)
   16c9e:	fa21 f303 	lsr.w	r3, r1, r3
   16ca2:	07db      	lsls	r3, r3, #31
   16ca4:	d516      	bpl.n	16cd4 <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   16ca6:	7850      	ldrb	r0, [r2, #1]
   16ca8:	f009 fec2 	bl	20a30 <is_lfcr>
   16cac:	b178      	cbz	r0, 16cce <at_parser_max_params_from_str+0xbe>
				index++;
   16cae:	3401      	adds	r4, #1
				if (index == max_params) {
   16cb0:	42bc      	cmp	r4, r7
   16cb2:	d046      	beq.n	16d42 <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   16cb4:	4621      	mov	r1, r4
   16cb6:	a803      	add	r0, sp, #12
   16cb8:	f7ff feca 	bl	16a50 <at_parse_detect_type>
   16cbc:	3001      	adds	r0, #1
   16cbe:	d021      	beq.n	16d04 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   16cc0:	4632      	mov	r2, r6
   16cc2:	4621      	mov	r1, r4
   16cc4:	a803      	add	r0, sp, #12
   16cc6:	f7ff fdb3 	bl	16830 <at_parse_process_element>
   16cca:	3001      	adds	r0, #1
   16ccc:	d01a      	beq.n	16d04 <at_parser_max_params_from_str+0xf4>
			str++;
   16cce:	9b03      	ldr	r3, [sp, #12]
   16cd0:	3301      	adds	r3, #1
   16cd2:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   16cd4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   16cd8:	f89b 0000 	ldrb.w	r0, [fp]
   16cdc:	f009 fea8 	bl	20a30 <is_lfcr>
   16ce0:	b350      	cbz	r0, 16d38 <at_parser_max_params_from_str+0x128>
   16ce2:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   16ce6:	eba1 0a0b 	sub.w	sl, r1, fp
   16cea:	9101      	str	r1, [sp, #4]
   16cec:	f811 2b01 	ldrb.w	r2, [r1], #1
   16cf0:	4610      	mov	r0, r2
   16cf2:	f009 fe9d 	bl	20a30 <is_lfcr>
   16cf6:	9b01      	ldr	r3, [sp, #4]
   16cf8:	2800      	cmp	r0, #0
   16cfa:	d1f4      	bne.n	16ce6 <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16cfc:	b99a      	cbnz	r2, 16d26 <at_parser_max_params_from_str+0x116>
				str += i;
   16cfe:	9b03      	ldr	r3, [sp, #12]
   16d00:	4453      	add	r3, sl
   16d02:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   16d04:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   16d06:	b9f5      	cbnz	r5, 16d46 <at_parser_max_params_from_str+0x136>
   16d08:	7823      	ldrb	r3, [r4, #0]
   16d0a:	b11b      	cbz	r3, 16d14 <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   16d0c:	4620      	mov	r0, r4
   16d0e:	f7ff fd77 	bl	16800 <is_result>
   16d12:	b1d8      	cbz	r0, 16d4c <at_parser_max_params_from_str+0x13c>
	return 0;
   16d14:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   16d16:	f1b9 0f00 	cmp.w	r9, #0
   16d1a:	d001      	beq.n	16d20 <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   16d1c:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   16d20:	b005      	add	sp, #20
   16d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16d26:	2a2b      	cmp	r2, #43	; 0x2b
   16d28:	d0e9      	beq.n	16cfe <at_parser_max_params_from_str+0xee>
   16d2a:	2a25      	cmp	r2, #37	; 0x25
   16d2c:	d0e7      	beq.n	16cfe <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   16d2e:	4618      	mov	r0, r3
   16d30:	f7ff fd66 	bl	16800 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   16d34:	2800      	cmp	r0, #0
   16d36:	d1e2      	bne.n	16cfe <at_parser_max_params_from_str+0xee>
		index++;
   16d38:	3401      	adds	r4, #1
			oversized = true;
   16d3a:	42bc      	cmp	r4, r7
   16d3c:	bf08      	it	eq
   16d3e:	2501      	moveq	r5, #1
   16d40:	e786      	b.n	16c50 <at_parser_max_params_from_str+0x40>
					oversized = true;
   16d42:	4605      	mov	r5, r0
   16d44:	e7de      	b.n	16d04 <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   16d46:	f06f 0006 	mvn.w	r0, #6
   16d4a:	e7e4      	b.n	16d16 <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   16d4c:	f06f 000a 	mvn.w	r0, #10
   16d50:	e7e1      	b.n	16d16 <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   16d52:	f06f 0015 	mvn.w	r0, #21
   16d56:	e7e3      	b.n	16d20 <at_parser_max_params_from_str+0x110>
   16d58:	2000f366 	.word	0x2000f366
   16d5c:	2000f365 	.word	0x2000f365
   16d60:	000252b9 	.word	0x000252b9
   16d64:	00024001 	.word	0x00024001

00016d68 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   16d68:	b510      	push	{r4, lr}
   16d6a:	4604      	mov	r4, r0
   16d6c:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   16d6e:	2240      	movs	r2, #64	; 0x40
   16d70:	2100      	movs	r1, #0
   16d72:	4668      	mov	r0, sp
   16d74:	f00b fd0f 	bl	22796 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   16d78:	a902      	add	r1, sp, #8
   16d7a:	2201      	movs	r2, #1
   16d7c:	4620      	mov	r0, r4
   16d7e:	f000 ff29 	bl	17bd4 <parse_rrc_mode>
	if (err) {
   16d82:	4601      	mov	r1, r0
   16d84:	b158      	cbz	r0, 16d9e <at_handler_cscon+0x36>
   16d86:	4a09      	ldr	r2, [pc, #36]	; (16dac <at_handler_cscon+0x44>)
   16d88:	4b09      	ldr	r3, [pc, #36]	; (16db0 <at_handler_cscon+0x48>)
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   16d8a:	480a      	ldr	r0, [pc, #40]	; (16db4 <at_handler_cscon+0x4c>)
   16d8c:	1ad2      	subs	r2, r2, r3
   16d8e:	08d2      	lsrs	r2, r2, #3
   16d90:	0192      	lsls	r2, r2, #6
   16d92:	f042 0201 	orr.w	r2, r2, #1
   16d96:	f008 fa46 	bl	1f226 <log_1>
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;

	event_handler_list_dispatch(&evt);
}
   16d9a:	b010      	add	sp, #64	; 0x40
   16d9c:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   16d9e:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   16da0:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   16da2:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   16da6:	f000 fe23 	bl	179f0 <event_handler_list_dispatch>
   16daa:	e7f6      	b.n	16d9a <at_handler_cscon+0x32>
   16dac:	00023038 	.word	0x00023038
   16db0:	00022fd8 	.word	0x00022fd8
   16db4:	00023ec1 	.word	0x00023ec1

00016db8 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   16db8:	b510      	push	{r4, lr}
   16dba:	4604      	mov	r4, r0
   16dbc:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   16dbe:	2240      	movs	r2, #64	; 0x40
   16dc0:	2100      	movs	r1, #0
   16dc2:	4668      	mov	r0, sp
   16dc4:	f00b fce7 	bl	22796 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   16dc8:	a902      	add	r1, sp, #8
   16dca:	4620      	mov	r0, r4
   16dcc:	f7fa fb48 	bl	11460 <parse_edrx>
	if (err) {
   16dd0:	4601      	mov	r1, r0
   16dd2:	b158      	cbz	r0, 16dec <at_handler_cedrxp+0x34>
   16dd4:	4a09      	ldr	r2, [pc, #36]	; (16dfc <at_handler_cedrxp+0x44>)
   16dd6:	4b0a      	ldr	r3, [pc, #40]	; (16e00 <at_handler_cedrxp+0x48>)
		LOG_ERR("Can't parse eDRX, error: %d", err);
   16dd8:	480a      	ldr	r0, [pc, #40]	; (16e04 <at_handler_cedrxp+0x4c>)
   16dda:	1ad2      	subs	r2, r2, r3
   16ddc:	08d2      	lsrs	r2, r2, #3
   16dde:	0192      	lsls	r2, r2, #6
   16de0:	f042 0201 	orr.w	r2, r2, #1
   16de4:	f008 fa1f 	bl	1f226 <log_1>
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;

	event_handler_list_dispatch(&evt);
}
   16de8:	b010      	add	sp, #64	; 0x40
   16dea:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   16dec:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   16dee:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   16df0:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   16df4:	f000 fdfc 	bl	179f0 <event_handler_list_dispatch>
   16df8:	e7f6      	b.n	16de8 <at_handler_cedrxp+0x30>
   16dfa:	bf00      	nop
   16dfc:	00023038 	.word	0x00023038
   16e00:	00022fd8 	.word	0x00022fd8
   16e04:	00023ee8 	.word	0x00023ee8

00016e08 <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   16e08:	b510      	push	{r4, lr}
   16e0a:	4604      	mov	r4, r0
   16e0c:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   16e0e:	2240      	movs	r2, #64	; 0x40
   16e10:	2100      	movs	r1, #0
   16e12:	4668      	mov	r0, sp
   16e14:	f00b fcbf 	bl	22796 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   16e18:	a902      	add	r1, sp, #8
   16e1a:	4620      	mov	r0, r4
   16e1c:	f001 f840 	bl	17ea0 <parse_xt3412>
	if (err) {
   16e20:	4601      	mov	r1, r0
   16e22:	b158      	cbz	r0, 16e3c <at_handler_xt3412+0x34>
   16e24:	4a0d      	ldr	r2, [pc, #52]	; (16e5c <at_handler_xt3412+0x54>)
   16e26:	4b0e      	ldr	r3, [pc, #56]	; (16e60 <at_handler_xt3412+0x58>)
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   16e28:	480e      	ldr	r0, [pc, #56]	; (16e64 <at_handler_xt3412+0x5c>)
   16e2a:	1ad2      	subs	r2, r2, r3
   16e2c:	08d2      	lsrs	r2, r2, #3
   16e2e:	0192      	lsls	r2, r2, #6
   16e30:	f042 0201 	orr.w	r2, r2, #1
   16e34:	f008 f9f7 	bl	1f226 <log_1>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   16e38:	b010      	add	sp, #64	; 0x40
   16e3a:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   16e3c:	2300      	movs	r3, #0
   16e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   16e42:	f241 3288 	movw	r2, #5000	; 0x1388
   16e46:	4299      	cmp	r1, r3
   16e48:	bf08      	it	eq
   16e4a:	4290      	cmpeq	r0, r2
   16e4c:	d1f4      	bne.n	16e38 <at_handler_xt3412+0x30>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   16e4e:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   16e50:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   16e52:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   16e56:	f000 fdcb 	bl	179f0 <event_handler_list_dispatch>
   16e5a:	e7ed      	b.n	16e38 <at_handler_xt3412+0x30>
   16e5c:	00023038 	.word	0x00023038
   16e60:	00022fd8 	.word	0x00022fd8
   16e64:	00023f04 	.word	0x00023f04

00016e68 <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   16e68:	b530      	push	{r4, r5, lr}
   16e6a:	4605      	mov	r5, r0
   16e6c:	b091      	sub	sp, #68	; 0x44
	int err;
	struct lte_lc_evt evt = {0};
   16e6e:	2240      	movs	r2, #64	; 0x40
   16e70:	2100      	movs	r1, #0
   16e72:	4668      	mov	r0, sp
   16e74:	f00b fc8f 	bl	22796 <memset>

	__ASSERT_NO_MSG(response != NULL);

	int ncell_count = neighborcell_count_get(response);
   16e78:	4628      	mov	r0, r5
   16e7a:	f001 f87d 	bl	17f78 <neighborcell_count_get>
   16e7e:	4604      	mov	r4, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   16e80:	f000 fd80 	bl	17984 <event_handler_list_is_empty>
   16e84:	b980      	cbnz	r0, 16ea8 <at_handler_ncellmeas+0x40>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   16e86:	b18c      	cbz	r4, 16eac <at_handler_ncellmeas+0x44>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   16e88:	4620      	mov	r0, r4
   16e8a:	2110      	movs	r1, #16
   16e8c:	f00b fc44 	bl	22718 <k_calloc>
		if (neighbor_cells == NULL) {
   16e90:	4604      	mov	r4, r0
   16e92:	b958      	cbnz	r0, 16eac <at_handler_ncellmeas+0x44>
   16e94:	491e      	ldr	r1, [pc, #120]	; (16f10 <at_handler_ncellmeas+0xa8>)
   16e96:	4b1f      	ldr	r3, [pc, #124]	; (16f14 <at_handler_ncellmeas+0xac>)
			LOG_ERR("Failed to allocate memory for neighbor cells");
   16e98:	481f      	ldr	r0, [pc, #124]	; (16f18 <at_handler_ncellmeas+0xb0>)
   16e9a:	1ac9      	subs	r1, r1, r3
   16e9c:	08c9      	lsrs	r1, r1, #3
   16e9e:	0189      	lsls	r1, r1, #6
   16ea0:	f041 0101 	orr.w	r1, r1, #1
   16ea4:	f008 f9b2 	bl	1f20c <log_0>
	}

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
}
   16ea8:	b011      	add	sp, #68	; 0x44
   16eaa:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   16eac:	a902      	add	r1, sp, #8
   16eae:	4628      	mov	r0, r5
	evt.cells_info.neighbor_cells = neighbor_cells;
   16eb0:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   16eb2:	f001 f887 	bl	17fc4 <parse_ncellmeas>
	switch (err) {
   16eb6:	1dc3      	adds	r3, r0, #7
	err = parse_ncellmeas(response, &evt.cells_info);
   16eb8:	4601      	mov	r1, r0
	switch (err) {
   16eba:	d00c      	beq.n	16ed6 <at_handler_ncellmeas+0x6e>
   16ebc:	2801      	cmp	r0, #1
   16ebe:	d91a      	bls.n	16ef6 <at_handler_ncellmeas+0x8e>
   16ec0:	4b14      	ldr	r3, [pc, #80]	; (16f14 <at_handler_ncellmeas+0xac>)
   16ec2:	4a13      	ldr	r2, [pc, #76]	; (16f10 <at_handler_ncellmeas+0xa8>)
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   16ec4:	4815      	ldr	r0, [pc, #84]	; (16f1c <at_handler_ncellmeas+0xb4>)
   16ec6:	1ad2      	subs	r2, r2, r3
   16ec8:	08d2      	lsrs	r2, r2, #3
   16eca:	0192      	lsls	r2, r2, #6
   16ecc:	f042 0201 	orr.w	r2, r2, #1
   16ed0:	f008 f9a9 	bl	1f226 <log_1>
   16ed4:	e015      	b.n	16f02 <at_handler_ncellmeas+0x9a>
   16ed6:	4a0f      	ldr	r2, [pc, #60]	; (16f14 <at_handler_ncellmeas+0xac>)
   16ed8:	4d0d      	ldr	r5, [pc, #52]	; (16f10 <at_handler_ncellmeas+0xa8>)
		LOG_WRN("Not all neighbor cells could be parsed");
   16eda:	4811      	ldr	r0, [pc, #68]	; (16f20 <at_handler_ncellmeas+0xb8>)
   16edc:	1aad      	subs	r5, r5, r2
   16ede:	08ed      	lsrs	r5, r5, #3
   16ee0:	01ad      	lsls	r5, r5, #6
   16ee2:	f045 0502 	orr.w	r5, r5, #2
   16ee6:	4629      	mov	r1, r5
   16ee8:	f008 f990 	bl	1f20c <log_0>
		LOG_WRN("More cells than the configured max count of %d were found",
   16eec:	462a      	mov	r2, r5
   16eee:	210a      	movs	r1, #10
   16ef0:	480c      	ldr	r0, [pc, #48]	; (16f24 <at_handler_ncellmeas+0xbc>)
   16ef2:	f008 f998 	bl	1f226 <log_1>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   16ef6:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   16ef8:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   16efa:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   16efe:	f000 fd77 	bl	179f0 <event_handler_list_dispatch>
	if (neighbor_cells) {
   16f02:	2c00      	cmp	r4, #0
   16f04:	d0d0      	beq.n	16ea8 <at_handler_ncellmeas+0x40>
		k_free(neighbor_cells);
   16f06:	4620      	mov	r0, r4
   16f08:	f00b fbfb 	bl	22702 <k_free>
   16f0c:	e7cc      	b.n	16ea8 <at_handler_ncellmeas+0x40>
   16f0e:	bf00      	nop
   16f10:	00023038 	.word	0x00023038
   16f14:	00022fd8 	.word	0x00022fd8
   16f18:	00023f38 	.word	0x00023f38
   16f1c:	00023fc6 	.word	0x00023fc6
   16f20:	00023f65 	.word	0x00023f65
   16f24:	00023f8c 	.word	0x00023f8c

00016f28 <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   16f28:	b510      	push	{r4, lr}
   16f2a:	4604      	mov	r4, r0
   16f2c:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   16f2e:	2240      	movs	r2, #64	; 0x40
   16f30:	2100      	movs	r1, #0
   16f32:	4668      	mov	r0, sp
   16f34:	f00b fc2f 	bl	22796 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   16f38:	a902      	add	r1, sp, #8
   16f3a:	4620      	mov	r0, r4
   16f3c:	f001 f9a2 	bl	18284 <parse_xmodemsleep>
	if (err) {
   16f40:	4601      	mov	r1, r0
   16f42:	b158      	cbz	r0, 16f5c <at_handler_xmodemsleep+0x34>
   16f44:	4a13      	ldr	r2, [pc, #76]	; (16f94 <at_handler_xmodemsleep+0x6c>)
   16f46:	4b14      	ldr	r3, [pc, #80]	; (16f98 <at_handler_xmodemsleep+0x70>)
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   16f48:	4814      	ldr	r0, [pc, #80]	; (16f9c <at_handler_xmodemsleep+0x74>)
   16f4a:	1ad2      	subs	r2, r2, r3
   16f4c:	08d2      	lsrs	r2, r2, #3
   16f4e:	0192      	lsls	r2, r2, #6
   16f50:	f042 0201 	orr.w	r2, r2, #1
   16f54:	f008 f967 	bl	1f226 <log_1>

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
}
   16f58:	b010      	add	sp, #64	; 0x40
   16f5a:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   16f5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16f60:	1e5a      	subs	r2, r3, #1
   16f62:	2a01      	cmp	r2, #1
   16f64:	d901      	bls.n	16f6a <at_handler_xmodemsleep+0x42>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   16f66:	2b04      	cmp	r3, #4
   16f68:	d1f6      	bne.n	16f58 <at_handler_xmodemsleep+0x30>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   16f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16f6e:	2100      	movs	r1, #0
   16f70:	f241 3088 	movw	r0, #5000	; 0x1388
   16f74:	428b      	cmp	r3, r1
   16f76:	bf08      	it	eq
   16f78:	4282      	cmpeq	r2, r0
   16f7a:	d106      	bne.n	16f8a <at_handler_xmodemsleep+0x62>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   16f7c:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   16f7e:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   16f80:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   16f84:	f000 fd34 	bl	179f0 <event_handler_list_dispatch>
   16f88:	e7e6      	b.n	16f58 <at_handler_xmodemsleep+0x30>
	} else if (evt.modem_sleep.time == 0) {
   16f8a:	4313      	orrs	r3, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   16f8c:	bf0c      	ite	eq
   16f8e:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   16f90:	230a      	movne	r3, #10
   16f92:	e7f4      	b.n	16f7e <at_handler_xmodemsleep+0x56>
   16f94:	00023038 	.word	0x00023038
   16f98:	00022fd8 	.word	0x00022fd8
   16f9c:	00023ff0 	.word	0x00023ff0

00016fa0 <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   16fa0:	b510      	push	{r4, lr}
   16fa2:	4604      	mov	r4, r0
   16fa4:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   16fa6:	2240      	movs	r2, #64	; 0x40
   16fa8:	2100      	movs	r1, #0
   16faa:	4668      	mov	r0, sp
   16fac:	f00b fbf3 	bl	22796 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   16fb0:	a902      	add	r1, sp, #8
   16fb2:	4620      	mov	r0, r4
   16fb4:	f001 f9de 	bl	18374 <parse_mdmev>
	if (err) {
   16fb8:	4601      	mov	r1, r0
   16fba:	b158      	cbz	r0, 16fd4 <at_handler_mdmev+0x34>
   16fbc:	4a09      	ldr	r2, [pc, #36]	; (16fe4 <at_handler_mdmev+0x44>)
   16fbe:	4b0a      	ldr	r3, [pc, #40]	; (16fe8 <at_handler_mdmev+0x48>)
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   16fc0:	480a      	ldr	r0, [pc, #40]	; (16fec <at_handler_mdmev+0x4c>)
   16fc2:	1ad2      	subs	r2, r2, r3
   16fc4:	08d2      	lsrs	r2, r2, #3
   16fc6:	0192      	lsls	r2, r2, #6
   16fc8:	f042 0201 	orr.w	r2, r2, #1
   16fcc:	f008 f92b 	bl	1f226 <log_1>
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;

	event_handler_list_dispatch(&evt);
}
   16fd0:	b010      	add	sp, #64	; 0x40
   16fd2:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   16fd4:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   16fd6:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   16fd8:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   16fdc:	f000 fd08 	bl	179f0 <event_handler_list_dispatch>
   16fe0:	e7f6      	b.n	16fd0 <at_handler_mdmev+0x30>
   16fe2:	bf00      	nop
   16fe4:	00023038 	.word	0x00023038
   16fe8:	00022fd8 	.word	0x00022fd8
   16fec:	0002402c 	.word	0x0002402c

00016ff0 <enable_notifications>:

static int enable_notifications(void)
{
   16ff0:	b530      	push	{r4, r5, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   16ff2:	482c      	ldr	r0, [pc, #176]	; (170a4 <enable_notifications+0xb4>)
{
   16ff4:	b08f      	sub	sp, #60	; 0x3c
	err = nrf_modem_at_printf(AT_CEREG_5);
   16ff6:	f004 fd5d 	bl	1bab4 <nrf_modem_at_printf>
	if (err) {
   16ffa:	4601      	mov	r1, r0
   16ffc:	b168      	cbz	r0, 1701a <enable_notifications+0x2a>
   16ffe:	4b2a      	ldr	r3, [pc, #168]	; (170a8 <enable_notifications+0xb8>)
   17000:	4a2a      	ldr	r2, [pc, #168]	; (170ac <enable_notifications+0xbc>)
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   17002:	482b      	ldr	r0, [pc, #172]	; (170b0 <enable_notifications+0xc0>)
   17004:	1ad2      	subs	r2, r2, r3
   17006:	08d2      	lsrs	r2, r2, #3
   17008:	0192      	lsls	r2, r2, #6
   1700a:	f042 0201 	orr.w	r2, r2, #1
   1700e:	f008 f90a 	bl	1f226 <log_1>
		return -EFAULT;
   17012:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   17016:	b00f      	add	sp, #60	; 0x3c
   17018:	bd30      	pop	{r4, r5, pc}
		err = nrf_modem_at_printf(AT_XMODEMSLEEP_SUB,
   1701a:	f241 3188 	movw	r1, #5000	; 0x1388
   1701e:	4a25      	ldr	r2, [pc, #148]	; (170b4 <enable_notifications+0xc4>)
   17020:	4825      	ldr	r0, [pc, #148]	; (170b8 <enable_notifications+0xc8>)
   17022:	f004 fd47 	bl	1bab4 <nrf_modem_at_printf>
		if (err) {
   17026:	4601      	mov	r1, r0
   17028:	b170      	cbz	r0, 17048 <enable_notifications+0x58>
   1702a:	4b1f      	ldr	r3, [pc, #124]	; (170a8 <enable_notifications+0xb8>)
   1702c:	4c1f      	ldr	r4, [pc, #124]	; (170ac <enable_notifications+0xbc>)
			LOG_WRN("Enabling modem sleep notifications failed, error: %d", err);
   1702e:	4823      	ldr	r0, [pc, #140]	; (170bc <enable_notifications+0xcc>)
   17030:	1ae4      	subs	r4, r4, r3
   17032:	08e4      	lsrs	r4, r4, #3
   17034:	01a4      	lsls	r4, r4, #6
   17036:	f044 0402 	orr.w	r4, r4, #2
   1703a:	4622      	mov	r2, r4
   1703c:	f008 f8f3 	bl	1f226 <log_1>
			LOG_WRN("Modem sleep notifications require nRF9160 modem >= v1.3.0");
   17040:	4621      	mov	r1, r4
   17042:	481f      	ldr	r0, [pc, #124]	; (170c0 <enable_notifications+0xd0>)
   17044:	f008 f8e2 	bl	1f20c <log_0>
	err = nrf_modem_at_printf(cscon);
   17048:	481e      	ldr	r0, [pc, #120]	; (170c4 <enable_notifications+0xd4>)
   1704a:	f004 fd33 	bl	1bab4 <nrf_modem_at_printf>
	if (err) {
   1704e:	2800      	cmp	r0, #0
   17050:	d0e1      	beq.n	17016 <enable_notifications+0x26>
   17052:	4a15      	ldr	r2, [pc, #84]	; (170a8 <enable_notifications+0xb8>)
   17054:	4c15      	ldr	r4, [pc, #84]	; (170ac <enable_notifications+0xbc>)
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   17056:	4601      	mov	r1, r0
   17058:	1aa4      	subs	r4, r4, r2
   1705a:	08e4      	lsrs	r4, r4, #3
   1705c:	01a4      	lsls	r4, r4, #6
   1705e:	f044 0502 	orr.w	r5, r4, #2
   17062:	462a      	mov	r2, r5
   17064:	4818      	ldr	r0, [pc, #96]	; (170c8 <enable_notifications+0xd8>)
   17066:	f008 f8de 	bl	1f226 <log_1>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1706a:	4629      	mov	r1, r5
   1706c:	4817      	ldr	r0, [pc, #92]	; (170cc <enable_notifications+0xdc>)
   1706e:	f008 f8cd 	bl	1f20c <log_0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   17072:	2132      	movs	r1, #50	; 0x32
   17074:	4a16      	ldr	r2, [pc, #88]	; (170d0 <enable_notifications+0xe0>)
   17076:	a801      	add	r0, sp, #4
   17078:	f004 fd44 	bl	1bb04 <nrf_modem_at_cmd>
		if (err == 0) {
   1707c:	4605      	mov	r5, r0
   1707e:	b978      	cbnz	r0, 170a0 <enable_notifications+0xb0>
			char *end = strstr(buf, "\r\nOK");
   17080:	4914      	ldr	r1, [pc, #80]	; (170d4 <enable_notifications+0xe4>)
   17082:	a801      	add	r0, sp, #4
   17084:	f00b fbd8 	bl	22838 <strstr>
			if (end) {
   17088:	b100      	cbz	r0, 1708c <enable_notifications+0x9c>
				*end = '\0';
   1708a:	7005      	strb	r5, [r0, #0]
   1708c:	a801      	add	r0, sp, #4
   1708e:	f7fb fecd 	bl	12e2c <z_log_strdup>
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   17092:	f044 0402 	orr.w	r4, r4, #2
   17096:	4601      	mov	r1, r0
   17098:	4622      	mov	r2, r4
   1709a:	480f      	ldr	r0, [pc, #60]	; (170d8 <enable_notifications+0xe8>)
   1709c:	f008 f8c3 	bl	1f226 <log_1>
	return 0;
   170a0:	2000      	movs	r0, #0
   170a2:	e7b8      	b.n	17016 <enable_notifications+0x26>
   170a4:	0002405c 	.word	0x0002405c
   170a8:	00022fd8 	.word	0x00022fd8
   170ac:	00023038 	.word	0x00023038
   170b0:	00024067 	.word	0x00024067
   170b4:	00124f80 	.word	0x00124f80
   170b8:	0002409d 	.word	0x0002409d
   170bc:	000240b5 	.word	0x000240b5
   170c0:	000240ea 	.word	0x000240ea
   170c4:	000246eb 	.word	0x000246eb
   170c8:	00024124 	.word	0x00024124
   170cc:	0002415c 	.word	0x0002415c
   170d0:	0002418d 	.word	0x0002418d
   170d4:	00024195 	.word	0x00024195
   170d8:	0002419a 	.word	0x0002419a

000170dc <lte_lc_register_handler>:
	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
	if (handler == NULL) {
   170dc:	b948      	cbnz	r0, 170f2 <lte_lc_register_handler+0x16>
   170de:	4906      	ldr	r1, [pc, #24]	; (170f8 <lte_lc_register_handler+0x1c>)
   170e0:	4b06      	ldr	r3, [pc, #24]	; (170fc <lte_lc_register_handler+0x20>)
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   170e2:	4807      	ldr	r0, [pc, #28]	; (17100 <lte_lc_register_handler+0x24>)
   170e4:	1ac9      	subs	r1, r1, r3
   170e6:	08c9      	lsrs	r1, r1, #3
   170e8:	0189      	lsls	r1, r1, #6
   170ea:	f041 0103 	orr.w	r1, r1, #3
   170ee:	f008 b88d 	b.w	1f20c <log_0>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   170f2:	f000 bc4f 	b.w	17994 <event_handler_list_append_handler>
   170f6:	bf00      	nop
   170f8:	00023038 	.word	0x00023038
   170fc:	00022fd8 	.word	0x00022fd8
   17100:	000241bd 	.word	0x000241bd

00017104 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   17104:	b508      	push	{r3, lr}
	int err;

	if (enable) {
   17106:	2800      	cmp	r0, #0
   17108:	d033      	beq.n	17172 <lte_lc_psm_req+0x6e>
		if (strlen(psm_param_rptau) == 8 &&
   1710a:	481b      	ldr	r0, [pc, #108]	; (17178 <lte_lc_psm_req+0x74>)
   1710c:	f7fa f850 	bl	111b0 <strlen>
   17110:	2808      	cmp	r0, #8
   17112:	d118      	bne.n	17146 <lte_lc_psm_req+0x42>
		    strlen(psm_param_rat) == 8) {
   17114:	4819      	ldr	r0, [pc, #100]	; (1717c <lte_lc_psm_req+0x78>)
   17116:	f7fa f84b 	bl	111b0 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   1711a:	2808      	cmp	r0, #8
   1711c:	d113      	bne.n	17146 <lte_lc_psm_req+0x42>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   1711e:	4a17      	ldr	r2, [pc, #92]	; (1717c <lte_lc_psm_req+0x78>)
   17120:	4915      	ldr	r1, [pc, #84]	; (17178 <lte_lc_psm_req+0x74>)
   17122:	4817      	ldr	r0, [pc, #92]	; (17180 <lte_lc_psm_req+0x7c>)
   17124:	f004 fcc6 	bl	1bab4 <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   17128:	b160      	cbz	r0, 17144 <lte_lc_psm_req+0x40>
   1712a:	4b16      	ldr	r3, [pc, #88]	; (17184 <lte_lc_psm_req+0x80>)
   1712c:	4a16      	ldr	r2, [pc, #88]	; (17188 <lte_lc_psm_req+0x84>)
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   1712e:	4601      	mov	r1, r0
   17130:	1ad2      	subs	r2, r2, r3
   17132:	08d2      	lsrs	r2, r2, #3
   17134:	0192      	lsls	r2, r2, #6
   17136:	4815      	ldr	r0, [pc, #84]	; (1718c <lte_lc_psm_req+0x88>)
   17138:	f042 0201 	orr.w	r2, r2, #1
   1713c:	f008 f873 	bl	1f226 <log_1>
		return -EFAULT;
   17140:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   17144:	bd08      	pop	{r3, pc}
		} else if (strlen(psm_param_rptau) == 8) {
   17146:	480c      	ldr	r0, [pc, #48]	; (17178 <lte_lc_psm_req+0x74>)
   17148:	f7fa f832 	bl	111b0 <strlen>
   1714c:	2808      	cmp	r0, #8
   1714e:	d104      	bne.n	1715a <lte_lc_psm_req+0x56>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   17150:	4909      	ldr	r1, [pc, #36]	; (17178 <lte_lc_psm_req+0x74>)
   17152:	480f      	ldr	r0, [pc, #60]	; (17190 <lte_lc_psm_req+0x8c>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   17154:	f004 fcae 	bl	1bab4 <nrf_modem_at_printf>
   17158:	e7e6      	b.n	17128 <lte_lc_psm_req+0x24>
		} else if (strlen(psm_param_rat) == 8) {
   1715a:	4808      	ldr	r0, [pc, #32]	; (1717c <lte_lc_psm_req+0x78>)
   1715c:	f7fa f828 	bl	111b0 <strlen>
   17160:	2808      	cmp	r0, #8
   17162:	d102      	bne.n	1716a <lte_lc_psm_req+0x66>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   17164:	4905      	ldr	r1, [pc, #20]	; (1717c <lte_lc_psm_req+0x78>)
   17166:	480b      	ldr	r0, [pc, #44]	; (17194 <lte_lc_psm_req+0x90>)
   17168:	e7f4      	b.n	17154 <lte_lc_psm_req+0x50>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   1716a:	480b      	ldr	r0, [pc, #44]	; (17198 <lte_lc_psm_req+0x94>)
		err = nrf_modem_at_printf(psm_disable);
   1716c:	f004 fca2 	bl	1bab4 <nrf_modem_at_printf>
   17170:	e7da      	b.n	17128 <lte_lc_psm_req+0x24>
   17172:	480a      	ldr	r0, [pc, #40]	; (1719c <lte_lc_psm_req+0x98>)
   17174:	e7fa      	b.n	1716c <lte_lc_psm_req+0x68>
   17176:	bf00      	nop
   17178:	2000c68c 	.word	0x2000c68c
   1717c:	2000c683 	.word	0x2000c683
   17180:	0002422f 	.word	0x0002422f
   17184:	00022fd8 	.word	0x00022fd8
   17188:	00023038 	.word	0x00023038
   1718c:	00024276 	.word	0x00024276
   17190:	00024246 	.word	0x00024246
   17194:	00024258 	.word	0x00024258
   17198:	0002426b 	.word	0x0002426b
   1719c:	000246f6 	.word	0x000246f6

000171a0 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   171a0:	2300      	movs	r3, #0
{
   171a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   171a4:	b08d      	sub	sp, #52	; 0x34
   171a6:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   171a8:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   171aa:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   171ae:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   171b2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   171b6:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   171ba:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   171be:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   171c2:	2800      	cmp	r0, #0
   171c4:	d067      	beq.n	17296 <lte_lc_psm_get+0xf6>
   171c6:	2900      	cmp	r1, #0
   171c8:	d065      	beq.n	17296 <lte_lc_psm_get+0xf6>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   171ca:	4c34      	ldr	r4, [pc, #208]	; (1729c <lte_lc_psm_get+0xfc>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   171cc:	21a0      	movs	r1, #160	; 0xa0
   171ce:	4620      	mov	r0, r4
   171d0:	4a33      	ldr	r2, [pc, #204]	; (172a0 <lte_lc_psm_get+0x100>)
	response[0] = '\0';
   171d2:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   171d4:	f004 fc96 	bl	1bb04 <nrf_modem_at_cmd>
	if (err < 0) {
   171d8:	1e01      	subs	r1, r0, #0
   171da:	da0e      	bge.n	171fa <lte_lc_psm_get+0x5a>
   171dc:	4a31      	ldr	r2, [pc, #196]	; (172a4 <lte_lc_psm_get+0x104>)
   171de:	4b32      	ldr	r3, [pc, #200]	; (172a8 <lte_lc_psm_get+0x108>)
		LOG_ERR("AT command failed, error: %d", err);
   171e0:	4832      	ldr	r0, [pc, #200]	; (172ac <lte_lc_psm_get+0x10c>)
   171e2:	1ad2      	subs	r2, r2, r3
   171e4:	08d2      	lsrs	r2, r2, #3
   171e6:	0192      	lsls	r2, r2, #6
   171e8:	f042 0201 	orr.w	r2, r2, #1
   171ec:	f008 f81b 	bl	1f226 <log_1>
	for (int i = 0; i < 12; i++) {
		if (comma_ptr) {
			comma_ptr = strchr(comma_ptr + 1, ch);
		} else {
			LOG_ERR("AT command parsing failed");
			return -EFAULT;
   171f0:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   171f4:	4620      	mov	r0, r4
   171f6:	b00d      	add	sp, #52	; 0x34
   171f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   171fa:	4620      	mov	r0, r4
   171fc:	212c      	movs	r1, #44	; 0x2c
   171fe:	f00b fad4 	bl	227aa <strchr>
   17202:	270c      	movs	r7, #12
   17204:	4604      	mov	r4, r0
		if (comma_ptr) {
   17206:	b194      	cbz	r4, 1722e <lte_lc_psm_get+0x8e>
			comma_ptr = strchr(comma_ptr + 1, ch);
   17208:	1c60      	adds	r0, r4, #1
   1720a:	212c      	movs	r1, #44	; 0x2c
   1720c:	f00b facd 	bl	227aa <strchr>
	for (int i = 0; i < 12; i++) {
   17210:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   17212:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   17214:	d1f7      	bne.n	17206 <lte_lc_psm_get+0x66>
	if (comma_ptr) {
   17216:	b150      	cbz	r0, 1722e <lte_lc_psm_get+0x8e>
		strncpy(active_time_str, comma_ptr + 2, 8);
   17218:	1c81      	adds	r1, r0, #2
   1721a:	2208      	movs	r2, #8
   1721c:	a803      	add	r0, sp, #12
   1721e:	f00b faeb 	bl	227f8 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   17222:	1c60      	adds	r0, r4, #1
   17224:	212c      	movs	r1, #44	; 0x2c
   17226:	f00b fac0 	bl	227aa <strchr>
	if (comma_ptr) {
   1722a:	4604      	mov	r4, r0
   1722c:	b950      	cbnz	r0, 17244 <lte_lc_psm_get+0xa4>
   1722e:	4b1e      	ldr	r3, [pc, #120]	; (172a8 <lte_lc_psm_get+0x108>)
   17230:	491c      	ldr	r1, [pc, #112]	; (172a4 <lte_lc_psm_get+0x104>)
			LOG_ERR("AT command parsing failed");
   17232:	481f      	ldr	r0, [pc, #124]	; (172b0 <lte_lc_psm_get+0x110>)
   17234:	1ac9      	subs	r1, r1, r3
   17236:	08c9      	lsrs	r1, r1, #3
   17238:	0189      	lsls	r1, r1, #6
   1723a:	f041 0101 	orr.w	r1, r1, #1
   1723e:	f007 ffe5 	bl	1f20c <log_0>
   17242:	e7d5      	b.n	171f0 <lte_lc_psm_get+0x50>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   17244:	1c81      	adds	r1, r0, #2
   17246:	2208      	movs	r2, #8
   17248:	a806      	add	r0, sp, #24
   1724a:	f00b fad5 	bl	227f8 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1724e:	212c      	movs	r1, #44	; 0x2c
   17250:	1c60      	adds	r0, r4, #1
   17252:	f00b faaa 	bl	227aa <strchr>
	if (comma_ptr) {
   17256:	b998      	cbnz	r0, 17280 <lte_lc_psm_get+0xe0>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   17258:	ab01      	add	r3, sp, #4
   1725a:	aa09      	add	r2, sp, #36	; 0x24
   1725c:	a906      	add	r1, sp, #24
   1725e:	a803      	add	r0, sp, #12
   17260:	f000 fc14 	bl	17a8c <parse_psm>
	if (err) {
   17264:	4604      	mov	r4, r0
   17266:	b188      	cbz	r0, 1728c <lte_lc_psm_get+0xec>
   17268:	4b0f      	ldr	r3, [pc, #60]	; (172a8 <lte_lc_psm_get+0x108>)
   1726a:	4a0e      	ldr	r2, [pc, #56]	; (172a4 <lte_lc_psm_get+0x104>)
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1726c:	4601      	mov	r1, r0
   1726e:	1ad2      	subs	r2, r2, r3
   17270:	08d2      	lsrs	r2, r2, #3
   17272:	0192      	lsls	r2, r2, #6
   17274:	480f      	ldr	r0, [pc, #60]	; (172b4 <lte_lc_psm_get+0x114>)
   17276:	f042 0201 	orr.w	r2, r2, #1
   1727a:	f007 ffd4 	bl	1f226 <log_1>
		return err;
   1727e:	e7b9      	b.n	171f4 <lte_lc_psm_get+0x54>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   17280:	1c81      	adds	r1, r0, #2
   17282:	2208      	movs	r2, #8
   17284:	a809      	add	r0, sp, #36	; 0x24
   17286:	f00b fab7 	bl	227f8 <strncpy>
   1728a:	e7e5      	b.n	17258 <lte_lc_psm_get+0xb8>
	*tau = psm_cfg.tau;
   1728c:	9b01      	ldr	r3, [sp, #4]
   1728e:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   17290:	9b02      	ldr	r3, [sp, #8]
   17292:	602b      	str	r3, [r5, #0]
	return 0;
   17294:	e7ae      	b.n	171f4 <lte_lc_psm_get+0x54>
		return -EINVAL;
   17296:	f06f 0415 	mvn.w	r4, #21
   1729a:	e7ab      	b.n	171f4 <lte_lc_psm_get+0x54>
   1729c:	2000f36b 	.word	0x2000f36b
   172a0:	000242a5 	.word	0x000242a5
   172a4:	00023038 	.word	0x00023038
   172a8:	00022fd8 	.word	0x00022fd8
   172ac:	000242b2 	.word	0x000242b2
   172b0:	000242cf 	.word	0x000242cf
   172b4:	000242e9 	.word	0x000242e9

000172b8 <at_handler_cereg>:
{
   172b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   172ba:	2400      	movs	r4, #0
{
   172bc:	4606      	mov	r6, r0
   172be:	b0a3      	sub	sp, #140	; 0x8c
	struct lte_lc_evt evt = {0};
   172c0:	2240      	movs	r2, #64	; 0x40
   172c2:	2100      	movs	r1, #0
   172c4:	a812      	add	r0, sp, #72	; 0x48
   172c6:	f00b fa66 	bl	22796 <memset>
	struct lte_lc_cell cell = {0};
   172ca:	2230      	movs	r2, #48	; 0x30
   172cc:	4621      	mov	r1, r4
   172ce:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   172d0:	f88d 400e 	strb.w	r4, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   172d4:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   172d6:	f00b fa5e 	bl	22796 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   172da:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   172de:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   172e0:	2101      	movs	r1, #1
   172e2:	9300      	str	r3, [sp, #0]
   172e4:	4630      	mov	r0, r6
   172e6:	ab06      	add	r3, sp, #24
   172e8:	f10d 020e 	add.w	r2, sp, #14
	struct lte_lc_psm_cfg psm_cfg = {0};
   172ec:	9404      	str	r4, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   172ee:	f000 fcd5 	bl	17c9c <parse_cereg>
	if (err) {
   172f2:	4605      	mov	r5, r0
   172f4:	b188      	cbz	r0, 1731a <at_handler_cereg+0x62>
   172f6:	4b47      	ldr	r3, [pc, #284]	; (17414 <at_handler_cereg+0x15c>)
   172f8:	4c47      	ldr	r4, [pc, #284]	; (17418 <at_handler_cereg+0x160>)
   172fa:	4630      	mov	r0, r6
   172fc:	1ae4      	subs	r4, r4, r3
   172fe:	f7fb fd95 	bl	12e2c <z_log_strdup>
   17302:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("Failed to parse notification (error %d): %s",
   17304:	01a4      	lsls	r4, r4, #6
   17306:	f044 0401 	orr.w	r4, r4, #1
   1730a:	4602      	mov	r2, r0
   1730c:	4623      	mov	r3, r4
   1730e:	4629      	mov	r1, r5
   17310:	4842      	ldr	r0, [pc, #264]	; (1741c <at_handler_cereg+0x164>)
   17312:	f007 ff9c 	bl	1f24e <log_2>
}
   17316:	b023      	add	sp, #140	; 0x8c
   17318:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1731a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1731e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   17322:	2b01      	cmp	r3, #1
   17324:	d105      	bne.n	17332 <at_handler_cereg+0x7a>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   17326:	9b08      	ldr	r3, [sp, #32]
   17328:	3301      	adds	r3, #1
   1732a:	d059      	beq.n	173e0 <at_handler_cereg+0x128>
	z_impl_k_sem_give(sem);
   1732c:	483c      	ldr	r0, [pc, #240]	; (17420 <at_handler_cereg+0x168>)
   1732e:	f005 fa97 	bl	1c860 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   17332:	f000 fb27 	bl	17984 <event_handler_list_is_empty>
   17336:	2800      	cmp	r0, #0
   17338:	d1ed      	bne.n	17316 <at_handler_cereg+0x5e>
	if (reg_status != prev_reg_status) {
   1733a:	4a3a      	ldr	r2, [pc, #232]	; (17424 <at_handler_cereg+0x16c>)
   1733c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   17340:	7811      	ldrb	r1, [r2, #0]
   17342:	4299      	cmp	r1, r3
   17344:	d007      	beq.n	17356 <at_handler_cereg+0x9e>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   17346:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1734a:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   1734c:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   1734e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   17352:	f000 fb4d 	bl	179f0 <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   17356:	2230      	movs	r2, #48	; 0x30
   17358:	4933      	ldr	r1, [pc, #204]	; (17428 <at_handler_cereg+0x170>)
   1735a:	a806      	add	r0, sp, #24
   1735c:	f00b fa00 	bl	22760 <memcmp>
   17360:	b1c8      	cbz	r0, 17396 <at_handler_cereg+0xde>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   17362:	2304      	movs	r3, #4
   17364:	4d30      	ldr	r5, [pc, #192]	; (17428 <at_handler_cereg+0x170>)
   17366:	ac06      	add	r4, sp, #24
   17368:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1736c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1736e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   17370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   17372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   17374:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   17378:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1737c:	ae14      	add	r6, sp, #80	; 0x50
   1737e:	ad06      	add	r5, sp, #24
   17380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17382:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   17384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17386:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   17388:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1738c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   17390:	a812      	add	r0, sp, #72	; 0x48
   17392:	f000 fb2d 	bl	179f0 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   17396:	4a25      	ldr	r2, [pc, #148]	; (1742c <at_handler_cereg+0x174>)
   17398:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1739c:	7811      	ldrb	r1, [r2, #0]
   1739e:	4299      	cmp	r1, r3
   173a0:	d008      	beq.n	173b4 <at_handler_cereg+0xfc>
		prev_lte_mode = lte_mode;
   173a2:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   173a4:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   173a6:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   173a8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   173ac:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   173b0:	f000 fb1e 	bl	179f0 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   173b4:	f89d 400e 	ldrb.w	r4, [sp, #14]
   173b8:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   173bc:	2c01      	cmp	r4, #1
   173be:	d1aa      	bne.n	17316 <at_handler_cereg+0x5e>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   173c0:	4638      	mov	r0, r7
   173c2:	a905      	add	r1, sp, #20
   173c4:	f7ff feec 	bl	171a0 <lte_lc_psm_get>
	if (err) {
   173c8:	b170      	cbz	r0, 173e8 <at_handler_cereg+0x130>
   173ca:	4b12      	ldr	r3, [pc, #72]	; (17414 <at_handler_cereg+0x15c>)
   173cc:	4912      	ldr	r1, [pc, #72]	; (17418 <at_handler_cereg+0x160>)
		LOG_ERR("Failed to get PSM information");
   173ce:	4818      	ldr	r0, [pc, #96]	; (17430 <at_handler_cereg+0x178>)
   173d0:	1ac9      	subs	r1, r1, r3
   173d2:	08c9      	lsrs	r1, r1, #3
   173d4:	0189      	lsls	r1, r1, #6
   173d6:	f041 0101 	orr.w	r1, r1, #1
   173da:	f007 ff17 	bl	1f20c <log_0>
		return;
   173de:	e79a      	b.n	17316 <at_handler_cereg+0x5e>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   173e0:	2304      	movs	r3, #4
   173e2:	f88d 300e 	strb.w	r3, [sp, #14]
   173e6:	e7a4      	b.n	17332 <at_handler_cereg+0x7a>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   173e8:	4d12      	ldr	r5, [pc, #72]	; (17434 <at_handler_cereg+0x17c>)
   173ea:	2208      	movs	r2, #8
   173ec:	4629      	mov	r1, r5
   173ee:	4638      	mov	r0, r7
   173f0:	f00b f9b6 	bl	22760 <memcmp>
   173f4:	2800      	cmp	r0, #0
   173f6:	d08e      	beq.n	17316 <at_handler_cereg+0x5e>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   173f8:	e897 0003 	ldmia.w	r7, {r0, r1}
   173fc:	ab14      	add	r3, sp, #80	; 0x50
   173fe:	e885 0003 	stmia.w	r5, {r0, r1}
   17402:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   17406:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   17408:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1740c:	f000 faf0 	bl	179f0 <event_handler_list_dispatch>
   17410:	e781      	b.n	17316 <at_handler_cereg+0x5e>
   17412:	bf00      	nop
   17414:	00022fd8 	.word	0x00022fd8
   17418:	00023038 	.word	0x00023038
   1741c:	00024316 	.word	0x00024316
   17420:	2000d34c 	.word	0x2000d34c
   17424:	2000f36a 	.word	0x2000f36a
   17428:	2000cca8 	.word	0x2000cca8
   1742c:	2000f369 	.word	0x2000f369
   17430:	00024342 	.word	0x00024342
   17434:	2000d364 	.word	0x2000d364

00017438 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   17438:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   1743a:	2400      	movs	r4, #0

	if (status == NULL) {
   1743c:	4605      	mov	r5, r0
	uint32_t cell_id = 0;
   1743e:	9401      	str	r4, [sp, #4]
	if (status == NULL) {
   17440:	b1d8      	cbz	r0, 1747a <lte_lc_nw_reg_status_get+0x42>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   17442:	490f      	ldr	r1, [pc, #60]	; (17480 <lte_lc_nw_reg_status_get+0x48>)
   17444:	480f      	ldr	r0, [pc, #60]	; (17484 <lte_lc_nw_reg_status_get+0x4c>)
   17446:	ab01      	add	r3, sp, #4
   17448:	f10d 0202 	add.w	r2, sp, #2
   1744c:	f004 fbc0 	bl	1bbd0 <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   17450:	1e01      	subs	r1, r0, #0
   17452:	dc0d      	bgt.n	17470 <lte_lc_nw_reg_status_get+0x38>
   17454:	4b0c      	ldr	r3, [pc, #48]	; (17488 <lte_lc_nw_reg_status_get+0x50>)
   17456:	4a0d      	ldr	r2, [pc, #52]	; (1748c <lte_lc_nw_reg_status_get+0x54>)
		LOG_ERR("Could not get registration status, error: %d", err);
   17458:	480d      	ldr	r0, [pc, #52]	; (17490 <lte_lc_nw_reg_status_get+0x58>)
   1745a:	1ad2      	subs	r2, r2, r3
   1745c:	08d2      	lsrs	r2, r2, #3
   1745e:	0192      	lsls	r2, r2, #6
   17460:	f042 0201 	orr.w	r2, r2, #1
   17464:	f007 fedf 	bl	1f226 <log_1>
		return -EFAULT;
   17468:	f06f 000d 	mvn.w	r0, #13
	}

	*status = status_tmp;

	return 0;
}
   1746c:	b003      	add	sp, #12
   1746e:	bd30      	pop	{r4, r5, pc}
	*status = status_tmp;
   17470:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return 0;
   17474:	4620      	mov	r0, r4
	*status = status_tmp;
   17476:	702b      	strb	r3, [r5, #0]
	return 0;
   17478:	e7f8      	b.n	1746c <lte_lc_nw_reg_status_get+0x34>
		return -EINVAL;
   1747a:	f06f 0015 	mvn.w	r0, #21
   1747e:	e7f5      	b.n	1746c <lte_lc_nw_reg_status_get+0x34>
   17480:	00024360 	.word	0x00024360
   17484:	0002437c 	.word	0x0002437c
   17488:	00022fd8 	.word	0x00022fd8
   1748c:	00023038 	.word	0x00023038
   17490:	00024386 	.word	0x00024386

00017494 <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   17494:	2807      	cmp	r0, #7
{
   17496:	b538      	push	{r3, r4, r5, lr}
   17498:	4604      	mov	r4, r0
   1749a:	460d      	mov	r5, r1
	switch (mode) {
   1749c:	d90d      	bls.n	174ba <lte_lc_system_mode_set+0x26>
   1749e:	4a1c      	ldr	r2, [pc, #112]	; (17510 <lte_lc_system_mode_set+0x7c>)
   174a0:	4b1c      	ldr	r3, [pc, #112]	; (17514 <lte_lc_system_mode_set+0x80>)
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   174a2:	4601      	mov	r1, r0
   174a4:	1ad2      	subs	r2, r2, r3
   174a6:	08d2      	lsrs	r2, r2, #3
   174a8:	0192      	lsls	r2, r2, #6
   174aa:	481b      	ldr	r0, [pc, #108]	; (17518 <lte_lc_system_mode_set+0x84>)
   174ac:	f042 0201 	orr.w	r2, r2, #1
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   174b0:	f007 feb9 	bl	1f226 <log_1>
		return -EINVAL;
   174b4:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   174b8:	bd38      	pop	{r3, r4, r5, pc}
	switch (preference) {
   174ba:	2904      	cmp	r1, #4
   174bc:	d908      	bls.n	174d0 <lte_lc_system_mode_set+0x3c>
   174be:	4a14      	ldr	r2, [pc, #80]	; (17510 <lte_lc_system_mode_set+0x7c>)
   174c0:	4b14      	ldr	r3, [pc, #80]	; (17514 <lte_lc_system_mode_set+0x80>)
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   174c2:	4816      	ldr	r0, [pc, #88]	; (1751c <lte_lc_system_mode_set+0x88>)
   174c4:	1ad2      	subs	r2, r2, r3
   174c6:	08d2      	lsrs	r2, r2, #3
   174c8:	0192      	lsls	r2, r2, #6
   174ca:	f042 0201 	orr.w	r2, r2, #1
   174ce:	e7ef      	b.n	174b0 <lte_lc_system_mode_set+0x1c>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   174d0:	4b13      	ldr	r3, [pc, #76]	; (17520 <lte_lc_system_mode_set+0x8c>)
   174d2:	5c5a      	ldrb	r2, [r3, r1]
   174d4:	4b13      	ldr	r3, [pc, #76]	; (17524 <lte_lc_system_mode_set+0x90>)
   174d6:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   174da:	4813      	ldr	r0, [pc, #76]	; (17528 <lte_lc_system_mode_set+0x94>)
   174dc:	f004 faea 	bl	1bab4 <nrf_modem_at_printf>
	if (err) {
   174e0:	b168      	cbz	r0, 174fe <lte_lc_system_mode_set+0x6a>
   174e2:	4b0c      	ldr	r3, [pc, #48]	; (17514 <lte_lc_system_mode_set+0x80>)
   174e4:	4a0a      	ldr	r2, [pc, #40]	; (17510 <lte_lc_system_mode_set+0x7c>)
		LOG_ERR("Could not send AT command, error: %d", err);
   174e6:	4601      	mov	r1, r0
   174e8:	1ad2      	subs	r2, r2, r3
   174ea:	08d2      	lsrs	r2, r2, #3
   174ec:	0192      	lsls	r2, r2, #6
   174ee:	480f      	ldr	r0, [pc, #60]	; (1752c <lte_lc_system_mode_set+0x98>)
   174f0:	f042 0201 	orr.w	r2, r2, #1
   174f4:	f007 fe97 	bl	1f226 <log_1>
		return -EFAULT;
   174f8:	f06f 000d 	mvn.w	r0, #13
   174fc:	e7dc      	b.n	174b8 <lte_lc_system_mode_set+0x24>
	sys_mode_current = mode;
   174fe:	4b0c      	ldr	r3, [pc, #48]	; (17530 <lte_lc_system_mode_set+0x9c>)
   17500:	701c      	strb	r4, [r3, #0]
	sys_mode_target = mode;
   17502:	4b0c      	ldr	r3, [pc, #48]	; (17534 <lte_lc_system_mode_set+0xa0>)
   17504:	701c      	strb	r4, [r3, #0]
	mode_pref_current = preference;
   17506:	4b0c      	ldr	r3, [pc, #48]	; (17538 <lte_lc_system_mode_set+0xa4>)
   17508:	701d      	strb	r5, [r3, #0]
	mode_pref_target = preference;
   1750a:	4b0c      	ldr	r3, [pc, #48]	; (1753c <lte_lc_system_mode_set+0xa8>)
   1750c:	701d      	strb	r5, [r3, #0]
	return 0;
   1750e:	e7d3      	b.n	174b8 <lte_lc_system_mode_set+0x24>
   17510:	00023038 	.word	0x00023038
   17514:	00022fd8 	.word	0x00022fd8
   17518:	000243b3 	.word	0x000243b3
   1751c:	000243d5 	.word	0x000243d5
   17520:	00024700 	.word	0x00024700
   17524:	00023348 	.word	0x00023348
   17528:	000243fa 	.word	0x000243fa
   1752c:	00024410 	.word	0x00024410
   17530:	2000f40b 	.word	0x2000f40b
   17534:	2000c695 	.word	0x2000c695
   17538:	2000f368 	.word	0x2000f368
   1753c:	2000c682 	.word	0x2000c682

00017540 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   17540:	b530      	push	{r4, r5, lr}
   17542:	460c      	mov	r4, r1
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   17544:	4605      	mov	r5, r0
{
   17546:	b087      	sub	sp, #28
	if (mode == NULL) {
   17548:	2800      	cmp	r0, #0
   1754a:	d07d      	beq.n	17648 <lte_lc_system_mode_get+0x108>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   1754c:	ab05      	add	r3, sp, #20
   1754e:	9301      	str	r3, [sp, #4]
   17550:	ab04      	add	r3, sp, #16
   17552:	493f      	ldr	r1, [pc, #252]	; (17650 <lte_lc_system_mode_get+0x110>)
   17554:	9300      	str	r3, [sp, #0]
   17556:	483f      	ldr	r0, [pc, #252]	; (17654 <lte_lc_system_mode_get+0x114>)
   17558:	ab03      	add	r3, sp, #12
   1755a:	aa02      	add	r2, sp, #8
   1755c:	f004 fb38 	bl	1bbd0 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   17560:	2804      	cmp	r0, #4
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   17562:	4601      	mov	r1, r0
	if (err != 4) {
   17564:	d00a      	beq.n	1757c <lte_lc_system_mode_get+0x3c>
   17566:	4a3c      	ldr	r2, [pc, #240]	; (17658 <lte_lc_system_mode_get+0x118>)
   17568:	4b3c      	ldr	r3, [pc, #240]	; (1765c <lte_lc_system_mode_get+0x11c>)
		LOG_ERR("Failed to get system mode, error: %d", err);
   1756a:	483d      	ldr	r0, [pc, #244]	; (17660 <lte_lc_system_mode_get+0x120>)
   1756c:	1ad2      	subs	r2, r2, r3
   1756e:	08d2      	lsrs	r2, r2, #3
   17570:	0192      	lsls	r2, r2, #6
   17572:	f042 0201 	orr.w	r2, r2, #1
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   17576:	f007 fe56 	bl	1f226 <log_1>
			return -EFAULT;
   1757a:	e03f      	b.n	175fc <lte_lc_system_mode_get+0xbc>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   1757c:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1757e:	9a03      	ldr	r2, [sp, #12]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   17580:	2b00      	cmp	r3, #0
   17582:	bf14      	ite	ne
   17584:	2302      	movne	r3, #2
   17586:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   17588:	2a00      	cmp	r2, #0
   1758a:	bf14      	ite	ne
   1758c:	2204      	movne	r2, #4
   1758e:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   17590:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   17592:	9a04      	ldr	r2, [sp, #16]
   17594:	2a00      	cmp	r2, #0
   17596:	bf14      	ite	ne
   17598:	2208      	movne	r2, #8
   1759a:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1759c:	4313      	orrs	r3, r2
   1759e:	2b0e      	cmp	r3, #14
   175a0:	d822      	bhi.n	175e8 <lte_lc_system_mode_get+0xa8>
   175a2:	e8df f003 	tbb	[pc, r3]
   175a6:	2108      	.short	0x2108
   175a8:	21152113 	.word	0x21152113
   175ac:	2117211d 	.word	0x2117211d
   175b0:	211b2119 	.word	0x211b2119
   175b4:	1f          	.byte	0x1f
   175b5:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   175b6:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   175b8:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   175ba:	b32c      	cbz	r4, 17608 <lte_lc_system_mode_get+0xc8>
		switch (mode_preference) {
   175bc:	9905      	ldr	r1, [sp, #20]
   175be:	2904      	cmp	r1, #4
   175c0:	d839      	bhi.n	17636 <lte_lc_system_mode_get+0xf6>
   175c2:	e8df f001 	tbb	[pc, r1]
   175c6:	301f      	.short	0x301f
   175c8:	3432      	.short	0x3432
   175ca:	36          	.byte	0x36
   175cb:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   175cc:	2301      	movs	r3, #1
   175ce:	e7f3      	b.n	175b8 <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   175d0:	2302      	movs	r3, #2
   175d2:	e7f1      	b.n	175b8 <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   175d4:	2303      	movs	r3, #3
   175d6:	e7ef      	b.n	175b8 <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   175d8:	2304      	movs	r3, #4
   175da:	e7ed      	b.n	175b8 <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   175dc:	2305      	movs	r3, #5
   175de:	e7eb      	b.n	175b8 <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   175e0:	2306      	movs	r3, #6
   175e2:	e7e9      	b.n	175b8 <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   175e4:	2307      	movs	r3, #7
   175e6:	e7e7      	b.n	175b8 <lte_lc_system_mode_get+0x78>
   175e8:	491b      	ldr	r1, [pc, #108]	; (17658 <lte_lc_system_mode_get+0x118>)
   175ea:	4b1c      	ldr	r3, [pc, #112]	; (1765c <lte_lc_system_mode_get+0x11c>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   175ec:	481d      	ldr	r0, [pc, #116]	; (17664 <lte_lc_system_mode_get+0x124>)
   175ee:	1ac9      	subs	r1, r1, r3
   175f0:	08c9      	lsrs	r1, r1, #3
   175f2:	0189      	lsls	r1, r1, #6
   175f4:	f041 0101 	orr.w	r1, r1, #1
   175f8:	f007 fe08 	bl	1f20c <log_0>
		return -EFAULT;
   175fc:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   17600:	b007      	add	sp, #28
   17602:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   17604:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   17606:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   17608:	4b17      	ldr	r3, [pc, #92]	; (17668 <lte_lc_system_mode_get+0x128>)
   1760a:	782a      	ldrb	r2, [r5, #0]
   1760c:	7819      	ldrb	r1, [r3, #0]
   1760e:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   17610:	bf18      	it	ne
   17612:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   17614:	b12c      	cbz	r4, 17622 <lte_lc_system_mode_get+0xe2>
   17616:	4b15      	ldr	r3, [pc, #84]	; (1766c <lte_lc_system_mode_get+0x12c>)
   17618:	7822      	ldrb	r2, [r4, #0]
   1761a:	7819      	ldrb	r1, [r3, #0]
   1761c:	4291      	cmp	r1, r2
   1761e:	d000      	beq.n	17622 <lte_lc_system_mode_get+0xe2>
		mode_pref_current = *preference;
   17620:	701a      	strb	r2, [r3, #0]
	return 0;
   17622:	2000      	movs	r0, #0
   17624:	e7ec      	b.n	17600 <lte_lc_system_mode_get+0xc0>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   17626:	2301      	movs	r3, #1
   17628:	e7ed      	b.n	17606 <lte_lc_system_mode_get+0xc6>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   1762a:	2302      	movs	r3, #2
   1762c:	e7eb      	b.n	17606 <lte_lc_system_mode_get+0xc6>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   1762e:	2303      	movs	r3, #3
   17630:	e7e9      	b.n	17606 <lte_lc_system_mode_get+0xc6>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   17632:	2304      	movs	r3, #4
   17634:	e7e7      	b.n	17606 <lte_lc_system_mode_get+0xc6>
   17636:	4a08      	ldr	r2, [pc, #32]	; (17658 <lte_lc_system_mode_get+0x118>)
   17638:	4b08      	ldr	r3, [pc, #32]	; (1765c <lte_lc_system_mode_get+0x11c>)
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   1763a:	480d      	ldr	r0, [pc, #52]	; (17670 <lte_lc_system_mode_get+0x130>)
   1763c:	1ad2      	subs	r2, r2, r3
   1763e:	08d2      	lsrs	r2, r2, #3
   17640:	0192      	lsls	r2, r2, #6
   17642:	f042 0201 	orr.w	r2, r2, #1
   17646:	e796      	b.n	17576 <lte_lc_system_mode_get+0x36>
		return -EINVAL;
   17648:	f06f 0015 	mvn.w	r0, #21
   1764c:	e7d8      	b.n	17600 <lte_lc_system_mode_get+0xc0>
   1764e:	bf00      	nop
   17650:	00024435 	.word	0x00024435
   17654:	00024450 	.word	0x00024450
   17658:	00023038 	.word	0x00023038
   1765c:	00022fd8 	.word	0x00022fd8
   17660:	00024460 	.word	0x00024460
   17664:	00024485 	.word	0x00024485
   17668:	2000f40b 	.word	0x2000f40b
   1766c:	2000f368 	.word	0x2000f368
   17670:	000244b1 	.word	0x000244b1

00017674 <init_and_config>:
{
   17674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_initialized) {
   17676:	4f24      	ldr	r7, [pc, #144]	; (17708 <init_and_config+0x94>)
   17678:	7839      	ldrb	r1, [r7, #0]
   1767a:	2900      	cmp	r1, #0
   1767c:	d142      	bne.n	17704 <init_and_config+0x90>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   1767e:	4d23      	ldr	r5, [pc, #140]	; (1770c <init_and_config+0x98>)
   17680:	4e23      	ldr	r6, [pc, #140]	; (17710 <init_and_config+0x9c>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   17682:	2201      	movs	r2, #1
   17684:	4823      	ldr	r0, [pc, #140]	; (17714 <init_and_config+0xa0>)
   17686:	f00a fc25 	bl	21ed4 <z_impl_k_sem_init>
   1768a:	4629      	mov	r1, r5
   1768c:	4630      	mov	r0, r6
   1768e:	f7ff ff57 	bl	17540 <lte_lc_system_mode_get>
	if (err) {
   17692:	4604      	mov	r4, r0
   17694:	b160      	cbz	r0, 176b0 <init_and_config+0x3c>
   17696:	4a20      	ldr	r2, [pc, #128]	; (17718 <init_and_config+0xa4>)
   17698:	4b20      	ldr	r3, [pc, #128]	; (1771c <init_and_config+0xa8>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   1769a:	4601      	mov	r1, r0
   1769c:	1ad2      	subs	r2, r2, r3
   1769e:	08d2      	lsrs	r2, r2, #3
   176a0:	0192      	lsls	r2, r2, #6
   176a2:	481f      	ldr	r0, [pc, #124]	; (17720 <init_and_config+0xac>)
   176a4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not set system mode, error: %d", err);
   176a8:	f007 fdbd 	bl	1f226 <log_1>
}
   176ac:	4620      	mov	r0, r4
   176ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sys_mode_current != sys_mode_target) ||
   176b0:	4b1c      	ldr	r3, [pc, #112]	; (17724 <init_and_config+0xb0>)
   176b2:	7818      	ldrb	r0, [r3, #0]
   176b4:	4b1c      	ldr	r3, [pc, #112]	; (17728 <init_and_config+0xb4>)
   176b6:	7819      	ldrb	r1, [r3, #0]
   176b8:	7833      	ldrb	r3, [r6, #0]
   176ba:	4283      	cmp	r3, r0
   176bc:	d102      	bne.n	176c4 <init_and_config+0x50>
   176be:	782b      	ldrb	r3, [r5, #0]
   176c0:	428b      	cmp	r3, r1
   176c2:	d00d      	beq.n	176e0 <init_and_config+0x6c>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   176c4:	f7ff fee6 	bl	17494 <lte_lc_system_mode_set>
		if (err) {
   176c8:	4604      	mov	r4, r0
   176ca:	b148      	cbz	r0, 176e0 <init_and_config+0x6c>
   176cc:	4a12      	ldr	r2, [pc, #72]	; (17718 <init_and_config+0xa4>)
   176ce:	4b13      	ldr	r3, [pc, #76]	; (1771c <init_and_config+0xa8>)
			LOG_ERR("Could not set system mode, error: %d", err);
   176d0:	4601      	mov	r1, r0
   176d2:	1ad2      	subs	r2, r2, r3
   176d4:	08d2      	lsrs	r2, r2, #3
   176d6:	0192      	lsls	r2, r2, #6
   176d8:	4814      	ldr	r0, [pc, #80]	; (1772c <init_and_config+0xb8>)
   176da:	f042 0201 	orr.w	r2, r2, #1
   176de:	e7e3      	b.n	176a8 <init_and_config+0x34>
	err = enable_notifications();
   176e0:	f7ff fc86 	bl	16ff0 <enable_notifications>
	if (err) {
   176e4:	4604      	mov	r4, r0
   176e6:	b150      	cbz	r0, 176fe <init_and_config+0x8a>
   176e8:	4b0c      	ldr	r3, [pc, #48]	; (1771c <init_and_config+0xa8>)
   176ea:	490b      	ldr	r1, [pc, #44]	; (17718 <init_and_config+0xa4>)
		LOG_ERR("Failed to enable notifications");
   176ec:	4810      	ldr	r0, [pc, #64]	; (17730 <init_and_config+0xbc>)
   176ee:	1ac9      	subs	r1, r1, r3
   176f0:	08c9      	lsrs	r1, r1, #3
   176f2:	0189      	lsls	r1, r1, #6
   176f4:	f041 0101 	orr.w	r1, r1, #1
   176f8:	f007 fd88 	bl	1f20c <log_0>
		return err;
   176fc:	e7d6      	b.n	176ac <init_and_config+0x38>
	is_initialized = true;
   176fe:	2301      	movs	r3, #1
   17700:	703b      	strb	r3, [r7, #0]
	return 0;
   17702:	e7d3      	b.n	176ac <init_and_config+0x38>
		return 0;
   17704:	2400      	movs	r4, #0
   17706:	e7d1      	b.n	176ac <init_and_config+0x38>
   17708:	2000f367 	.word	0x2000f367
   1770c:	2000f368 	.word	0x2000f368
   17710:	2000f40b 	.word	0x2000f40b
   17714:	2000d34c 	.word	0x2000d34c
   17718:	00023038 	.word	0x00023038
   1771c:	00022fd8 	.word	0x00022fd8
   17720:	000244d0 	.word	0x000244d0
   17724:	2000c695 	.word	0x2000c695
   17728:	2000c682 	.word	0x2000c682
   1772c:	000244fd 	.word	0x000244fd
   17730:	00024522 	.word	0x00024522

00017734 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   17734:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   17736:	4604      	mov	r4, r0
   17738:	b1d8      	cbz	r0, 17772 <lte_lc_func_mode_get+0x3e>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   1773a:	490f      	ldr	r1, [pc, #60]	; (17778 <lte_lc_func_mode_get+0x44>)
   1773c:	480f      	ldr	r0, [pc, #60]	; (1777c <lte_lc_func_mode_get+0x48>)
   1773e:	f10d 0206 	add.w	r2, sp, #6
   17742:	f004 fa45 	bl	1bbd0 <nrf_modem_at_scanf>
	if (err != 1) {
   17746:	2801      	cmp	r0, #1
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   17748:	4601      	mov	r1, r0
	if (err != 1) {
   1774a:	d00d      	beq.n	17768 <lte_lc_func_mode_get+0x34>
   1774c:	4b0c      	ldr	r3, [pc, #48]	; (17780 <lte_lc_func_mode_get+0x4c>)
   1774e:	4a0d      	ldr	r2, [pc, #52]	; (17784 <lte_lc_func_mode_get+0x50>)
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   17750:	480d      	ldr	r0, [pc, #52]	; (17788 <lte_lc_func_mode_get+0x54>)
   17752:	1ad2      	subs	r2, r2, r3
   17754:	08d2      	lsrs	r2, r2, #3
   17756:	0192      	lsls	r2, r2, #6
   17758:	f042 0201 	orr.w	r2, r2, #1
   1775c:	f007 fd63 	bl	1f226 <log_1>
		return -EFAULT;
   17760:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   17764:	b002      	add	sp, #8
   17766:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   17768:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return 0;
   1776c:	2000      	movs	r0, #0
	*mode = mode_tmp;
   1776e:	7023      	strb	r3, [r4, #0]
	return 0;
   17770:	e7f8      	b.n	17764 <lte_lc_func_mode_get+0x30>
		return -EINVAL;
   17772:	f06f 0015 	mvn.w	r0, #21
   17776:	e7f5      	b.n	17764 <lte_lc_func_mode_get+0x30>
   17778:	00024541 	.word	0x00024541
   1777c:	0002454c 	.word	0x0002454c
   17780:	00022fd8 	.word	0x00022fd8
   17784:	00023038 	.word	0x00023038
   17788:	00024555 	.word	0x00024555

0001778c <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   1778c:	2804      	cmp	r0, #4
{
   1778e:	b510      	push	{r4, lr}
   17790:	4604      	mov	r4, r0
	switch (mode) {
   17792:	d81f      	bhi.n	177d4 <lte_lc_func_mode_set+0x48>
   17794:	2804      	cmp	r0, #4
   17796:	d822      	bhi.n	177de <lte_lc_func_mode_set+0x52>
   17798:	e8df f000 	tbb	[pc, r0]
   1779c:	212f0b2f 	.word	0x212f0b2f
   177a0:	2f          	.byte	0x2f
   177a1:	00          	.byte	0x00
   177a2:	2201      	movs	r2, #1
   177a4:	fa02 f303 	lsl.w	r3, r2, r3
   177a8:	4a18      	ldr	r2, [pc, #96]	; (1780c <lte_lc_func_mode_set+0x80>)
   177aa:	4213      	tst	r3, r2
   177ac:	d125      	bne.n	177fa <lte_lc_func_mode_set+0x6e>
   177ae:	079b      	lsls	r3, r3, #30
   177b0:	d515      	bpl.n	177de <lte_lc_func_mode_set+0x52>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   177b2:	f7ff fc1d 	bl	16ff0 <enable_notifications>
		if (err) {
   177b6:	4601      	mov	r1, r0
   177b8:	b1f8      	cbz	r0, 177fa <lte_lc_func_mode_set+0x6e>
   177ba:	4b15      	ldr	r3, [pc, #84]	; (17810 <lte_lc_func_mode_set+0x84>)
   177bc:	4a15      	ldr	r2, [pc, #84]	; (17814 <lte_lc_func_mode_set+0x88>)
			LOG_ERR("Failed to enable notifications, error: %d", err);
   177be:	4816      	ldr	r0, [pc, #88]	; (17818 <lte_lc_func_mode_set+0x8c>)
   177c0:	1ad2      	subs	r2, r2, r3
   177c2:	08d2      	lsrs	r2, r2, #3
   177c4:	0192      	lsls	r2, r2, #6
   177c6:	f042 0201 	orr.w	r2, r2, #1
   177ca:	f007 fd2c 	bl	1f226 <log_1>
			return -EFAULT;
   177ce:	f06f 000d 	mvn.w	r0, #13
		LOG_ERR("Invalid functional mode: %d", mode);
		return -EINVAL;
	}

	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
}
   177d2:	bd10      	pop	{r4, pc}
	switch (mode) {
   177d4:	f1a0 0314 	sub.w	r3, r0, #20
   177d8:	b2db      	uxtb	r3, r3
   177da:	2b18      	cmp	r3, #24
   177dc:	d9e1      	bls.n	177a2 <lte_lc_func_mode_set+0x16>
   177de:	4b0c      	ldr	r3, [pc, #48]	; (17810 <lte_lc_func_mode_set+0x84>)
   177e0:	4a0c      	ldr	r2, [pc, #48]	; (17814 <lte_lc_func_mode_set+0x88>)
		LOG_ERR("Invalid functional mode: %d", mode);
   177e2:	480e      	ldr	r0, [pc, #56]	; (1781c <lte_lc_func_mode_set+0x90>)
   177e4:	1ad2      	subs	r2, r2, r3
   177e6:	08d2      	lsrs	r2, r2, #3
   177e8:	0192      	lsls	r2, r2, #6
   177ea:	4621      	mov	r1, r4
   177ec:	f042 0201 	orr.w	r2, r2, #1
   177f0:	f007 fd19 	bl	1f226 <log_1>
		return -EINVAL;
   177f4:	f06f 0015 	mvn.w	r0, #21
   177f8:	e7eb      	b.n	177d2 <lte_lc_func_mode_set+0x46>
	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   177fa:	4621      	mov	r1, r4
   177fc:	4808      	ldr	r0, [pc, #32]	; (17820 <lte_lc_func_mode_set+0x94>)
   177fe:	f004 f959 	bl	1bab4 <nrf_modem_at_printf>
   17802:	2800      	cmp	r0, #0
   17804:	bf18      	it	ne
   17806:	f06f 000d 	mvnne.w	r0, #13
   1780a:	e7e2      	b.n	177d2 <lte_lc_func_mode_set+0x46>
   1780c:	01300c01 	.word	0x01300c01
   17810:	00022fd8 	.word	0x00022fd8
   17814:	00023038 	.word	0x00023038
   17818:	00024590 	.word	0x00024590
   1781c:	000245ba 	.word	0x000245ba
   17820:	000245d6 	.word	0x000245d6

00017824 <connect_lte>:
	if (!is_initialized) {
   17824:	4b49      	ldr	r3, [pc, #292]	; (1794c <connect_lte+0x128>)
{
   17826:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (!is_initialized) {
   1782a:	781b      	ldrb	r3, [r3, #0]
{
   1782c:	4606      	mov	r6, r0
	if (!is_initialized) {
   1782e:	b973      	cbnz	r3, 1784e <connect_lte+0x2a>
   17830:	4b47      	ldr	r3, [pc, #284]	; (17950 <connect_lte+0x12c>)
   17832:	4948      	ldr	r1, [pc, #288]	; (17954 <connect_lte+0x130>)
		LOG_ERR("The LTE link controller is not initialized");
   17834:	4848      	ldr	r0, [pc, #288]	; (17958 <connect_lte+0x134>)
   17836:	1ac9      	subs	r1, r1, r3
   17838:	08c9      	lsrs	r1, r1, #3
   1783a:	0189      	lsls	r1, r1, #6
   1783c:	f041 0101 	orr.w	r1, r1, #1
   17840:	f007 fce4 	bl	1f20c <log_0>
		return -EPERM;
   17844:	f04f 30ff 	mov.w	r0, #4294967295
}
   17848:	b002      	add	sp, #8
   1784a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1784e:	2501      	movs	r5, #1
   17850:	4c42      	ldr	r4, [pc, #264]	; (1795c <connect_lte+0x138>)
   17852:	e8d4 3fef 	ldaex	r3, [r4]
   17856:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1785a:	2a00      	cmp	r2, #0
   1785c:	d1f9      	bne.n	17852 <connect_lte+0x2e>
	if (atomic_set(&in_progress, 1)) {
   1785e:	2b00      	cmp	r3, #0
   17860:	d170      	bne.n	17944 <connect_lte+0x120>
	err = lte_lc_nw_reg_status_get(&reg_status);
   17862:	f10d 0007 	add.w	r0, sp, #7
   17866:	f7ff fde7 	bl	17438 <lte_lc_nw_reg_status_get>
	if (err) {
   1786a:	b158      	cbz	r0, 17884 <connect_lte+0x60>
   1786c:	4b38      	ldr	r3, [pc, #224]	; (17950 <connect_lte+0x12c>)
   1786e:	4939      	ldr	r1, [pc, #228]	; (17954 <connect_lte+0x130>)
		LOG_ERR("Failed to get current registration status");
   17870:	483b      	ldr	r0, [pc, #236]	; (17960 <connect_lte+0x13c>)
   17872:	1ac9      	subs	r1, r1, r3
   17874:	08c9      	lsrs	r1, r1, #3
   17876:	0189      	lsls	r1, r1, #6
   17878:	4329      	orrs	r1, r5
   1787a:	f007 fcc7 	bl	1f20c <log_0>
		return -EFAULT;
   1787e:	f06f 000d 	mvn.w	r0, #13
   17882:	e7e1      	b.n	17848 <connect_lte+0x24>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   17884:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17888:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1788c:	2b01      	cmp	r3, #1
   1788e:	d0db      	beq.n	17848 <connect_lte+0x24>
	if (blocking) {
   17890:	b126      	cbz	r6, 1789c <connect_lte+0x78>
   17892:	4601      	mov	r1, r0
   17894:	462a      	mov	r2, r5
   17896:	4833      	ldr	r0, [pc, #204]	; (17964 <connect_lte+0x140>)
   17898:	f00a fb1c 	bl	21ed4 <z_impl_k_sem_init>
   1789c:	f04f 0802 	mov.w	r8, #2
   178a0:	4d2c      	ldr	r5, [pc, #176]	; (17954 <connect_lte+0x130>)
   178a2:	4b2b      	ldr	r3, [pc, #172]	; (17950 <connect_lte+0x12c>)
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   178a4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 17974 <connect_lte+0x150>
   178a8:	1aed      	subs	r5, r5, r3
   178aa:	4f2f      	ldr	r7, [pc, #188]	; (17968 <connect_lte+0x144>)
   178ac:	08ed      	lsrs	r5, r5, #3
		err = lte_lc_func_mode_get(&current_func_mode);
   178ae:	f10d 0006 	add.w	r0, sp, #6
   178b2:	f7ff ff3f 	bl	17734 <lte_lc_func_mode_get>
		if (err) {
   178b6:	b9b8      	cbnz	r0, 178e8 <connect_lte+0xc4>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   178b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   178bc:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   178c0:	d00b      	beq.n	178da <connect_lte+0xb6>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   178c2:	2001      	movs	r0, #1
   178c4:	f7ff ff62 	bl	1778c <lte_lc_func_mode_set>
		if (err || !blocking) {
   178c8:	b188      	cbz	r0, 178ee <connect_lte+0xca>
   178ca:	2300      	movs	r3, #0
   178cc:	e8d4 2fef 	ldaex	r2, [r4]
   178d0:	e8c4 3fe1 	stlex	r1, r3, [r4]
   178d4:	2900      	cmp	r1, #0
   178d6:	d0b7      	beq.n	17848 <connect_lte+0x24>
   178d8:	e7f8      	b.n	178cc <connect_lte+0xa8>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   178da:	f899 1000 	ldrb.w	r1, [r9]
   178de:	7838      	ldrb	r0, [r7, #0]
   178e0:	f7ff fdd8 	bl	17494 <lte_lc_system_mode_set>
			if (err) {
   178e4:	2800      	cmp	r0, #0
   178e6:	d0ec      	beq.n	178c2 <connect_lte+0x9e>
			err = -EFAULT;
   178e8:	f06f 000d 	mvn.w	r0, #13
   178ec:	e7ed      	b.n	178ca <connect_lte+0xa6>
		if (err || !blocking) {
   178ee:	2e00      	cmp	r6, #0
   178f0:	d0eb      	beq.n	178ca <connect_lte+0xa6>
	return z_impl_k_sem_take(sem, timeout);
   178f2:	f04f 7216 	mov.w	r2, #39321600	; 0x2580000
   178f6:	2300      	movs	r3, #0
   178f8:	481a      	ldr	r0, [pc, #104]	; (17964 <connect_lte+0x140>)
   178fa:	f004 ffd7 	bl	1c8ac <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   178fe:	f110 0f0b 	cmn.w	r0, #11
   17902:	d1e2      	bne.n	178ca <connect_lte+0xa6>
			LOG_INF("Network connection attempt timed out");
   17904:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   17908:	f04a 0a03 	orr.w	sl, sl, #3
   1790c:	4651      	mov	r1, sl
   1790e:	4817      	ldr	r0, [pc, #92]	; (1796c <connect_lte+0x148>)
   17910:	f007 fc7c 	bl	1f20c <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   17914:	f1b8 0f01 	cmp.w	r8, #1
   17918:	d011      	beq.n	1793e <connect_lte+0x11a>
				if (sys_mode_target == sys_mode_preferred) {
   1791a:	783b      	ldrb	r3, [r7, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   1791c:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_preferred;
   1791e:	2b02      	cmp	r3, #2
   17920:	bf0c      	ite	eq
   17922:	2301      	moveq	r3, #1
   17924:	2302      	movne	r3, #2
   17926:	703b      	strb	r3, [r7, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   17928:	f7ff ff30 	bl	1778c <lte_lc_func_mode_set>
				if (err) {
   1792c:	2800      	cmp	r0, #0
   1792e:	d1db      	bne.n	178e8 <connect_lte+0xc4>
				LOG_INF("Using fallback network mode");
   17930:	4651      	mov	r1, sl
   17932:	480f      	ldr	r0, [pc, #60]	; (17970 <connect_lte+0x14c>)
   17934:	f007 fc6a 	bl	1f20c <log_0>
	} while (tries > 0);
   17938:	f04f 0801 	mov.w	r8, #1
   1793c:	e7b7      	b.n	178ae <connect_lte+0x8a>
				err = -ETIMEDOUT;
   1793e:	f06f 0073 	mvn.w	r0, #115	; 0x73
   17942:	e7c2      	b.n	178ca <connect_lte+0xa6>
		return -EINPROGRESS;
   17944:	f06f 0076 	mvn.w	r0, #118	; 0x76
   17948:	e77e      	b.n	17848 <connect_lte+0x24>
   1794a:	bf00      	nop
   1794c:	2000f367 	.word	0x2000f367
   17950:	00022fd8 	.word	0x00022fd8
   17954:	00023038 	.word	0x00023038
   17958:	000245e1 	.word	0x000245e1
   1795c:	2000d348 	.word	0x2000d348
   17960:	0002460c 	.word	0x0002460c
   17964:	2000d34c 	.word	0x2000d34c
   17968:	2000c695 	.word	0x2000c695
   1796c:	00024636 	.word	0x00024636
   17970:	0002465b 	.word	0x0002465b
   17974:	2000f368 	.word	0x2000f368

00017978 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   17978:	4801      	ldr	r0, [pc, #4]	; (17980 <k_mutex_unlock.constprop.0+0x8>)
   1797a:	f004 bef5 	b.w	1c768 <z_impl_k_mutex_unlock>
   1797e:	bf00      	nop
   17980:	2000c868 	.word	0x2000c868

00017984 <event_handler_list_is_empty>:
Z_GENLIST_IS_EMPTY(slist)
   17984:	4b02      	ldr	r3, [pc, #8]	; (17990 <event_handler_list_is_empty+0xc>)
   17986:	6818      	ldr	r0, [r3, #0]
}
   17988:	fab0 f080 	clz	r0, r0
   1798c:	0940      	lsrs	r0, r0, #5
   1798e:	4770      	bx	lr
   17990:	2000d36c 	.word	0x2000d36c

00017994 <event_handler_list_append_handler>:
{
   17994:	b570      	push	{r4, r5, r6, lr}
   17996:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   17998:	4d13      	ldr	r5, [pc, #76]	; (179e8 <event_handler_list_append_handler+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
   1799a:	f04f 32ff 	mov.w	r2, #4294967295
   1799e:	f04f 33ff 	mov.w	r3, #4294967295
   179a2:	4812      	ldr	r0, [pc, #72]	; (179ec <event_handler_list_append_handler+0x58>)
   179a4:	f004 fe62 	bl	1c66c <z_impl_k_mutex_lock>
	return list->head;
   179a8:	682c      	ldr	r4, [r5, #0]
	return node->next;
   179aa:	2c00      	cmp	r4, #0
   179ac:	bf38      	it	cc
   179ae:	2400      	movcc	r4, #0
   179b0:	b944      	cbnz	r4, 179c4 <event_handler_list_append_handler+0x30>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   179b2:	2008      	movs	r0, #8
   179b4:	f00a feac 	bl	22710 <k_malloc>
	if (to_ins == NULL) {
   179b8:	b948      	cbnz	r0, 179ce <event_handler_list_append_handler+0x3a>
		k_mutex_unlock(&list_mtx);
   179ba:	f7ff ffdd 	bl	17978 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   179be:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   179c2:	bd70      	pop	{r4, r5, r6, pc}
		if (curr->handler == handler) {
   179c4:	6863      	ldr	r3, [r4, #4]
   179c6:	429e      	cmp	r6, r3
   179c8:	d007      	beq.n	179da <event_handler_list_append_handler+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   179ca:	6824      	ldr	r4, [r4, #0]
   179cc:	e7ed      	b.n	179aa <event_handler_list_append_handler+0x16>
	parent->next = child;
   179ce:	e9c0 4600 	strd	r4, r6, [r0]
Z_GENLIST_APPEND(slist, snode)
   179d2:	686b      	ldr	r3, [r5, #4]
   179d4:	b92b      	cbnz	r3, 179e2 <event_handler_list_append_handler+0x4e>
	list->head = node;
   179d6:	e9c5 0000 	strd	r0, r0, [r5]
	k_mutex_unlock(&list_mtx);
   179da:	f7ff ffcd 	bl	17978 <k_mutex_unlock.constprop.0>
	return 0;
   179de:	2000      	movs	r0, #0
   179e0:	e7ef      	b.n	179c2 <event_handler_list_append_handler+0x2e>
	parent->next = child;
   179e2:	6018      	str	r0, [r3, #0]
	list->tail = node;
   179e4:	6068      	str	r0, [r5, #4]
}
   179e6:	e7f8      	b.n	179da <event_handler_list_append_handler+0x46>
   179e8:	2000d36c 	.word	0x2000d36c
   179ec:	2000c868 	.word	0x2000c868

000179f0 <event_handler_list_dispatch>:
{
   179f0:	b538      	push	{r3, r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   179f2:	4c11      	ldr	r4, [pc, #68]	; (17a38 <event_handler_list_dispatch+0x48>)
   179f4:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   179f6:	6823      	ldr	r3, [r4, #0]
   179f8:	b1e3      	cbz	r3, 17a34 <event_handler_list_dispatch+0x44>
   179fa:	f04f 33ff 	mov.w	r3, #4294967295
   179fe:	f04f 32ff 	mov.w	r2, #4294967295
   17a02:	480e      	ldr	r0, [pc, #56]	; (17a3c <event_handler_list_dispatch+0x4c>)
   17a04:	f004 fe32 	bl	1c66c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   17a08:	6823      	ldr	r3, [r4, #0]
   17a0a:	b91b      	cbnz	r3, 17a14 <event_handler_list_dispatch+0x24>
}
   17a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   17a10:	f7ff bfb2 	b.w	17978 <k_mutex_unlock.constprop.0>
	return node->next;
   17a14:	681c      	ldr	r4, [r3, #0]
   17a16:	2c00      	cmp	r4, #0
   17a18:	bf38      	it	cc
   17a1a:	2400      	movcc	r4, #0
		curr->handler(evt);
   17a1c:	4628      	mov	r0, r5
   17a1e:	685b      	ldr	r3, [r3, #4]
   17a20:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   17a22:	2c00      	cmp	r4, #0
   17a24:	d0f2      	beq.n	17a0c <event_handler_list_dispatch+0x1c>
   17a26:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17a28:	4623      	mov	r3, r4
   17a2a:	2a00      	cmp	r2, #0
   17a2c:	bf38      	it	cc
   17a2e:	2200      	movcc	r2, #0
   17a30:	4614      	mov	r4, r2
   17a32:	e7f3      	b.n	17a1c <event_handler_list_dispatch+0x2c>
}
   17a34:	bd38      	pop	{r3, r4, r5, pc}
   17a36:	bf00      	nop
   17a38:	2000d36c 	.word	0x2000d36c
   17a3c:	2000c868 	.word	0x2000c868

00017a40 <response_is_valid>:
{
   17a40:	b570      	push	{r4, r5, r6, lr}
   17a42:	460e      	mov	r6, r1
   17a44:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   17a46:	4605      	mov	r5, r0
   17a48:	b100      	cbz	r0, 17a4c <response_is_valid+0xc>
   17a4a:	b95a      	cbnz	r2, 17a64 <response_is_valid+0x24>
   17a4c:	490c      	ldr	r1, [pc, #48]	; (17a80 <response_is_valid+0x40>)
   17a4e:	4b0d      	ldr	r3, [pc, #52]	; (17a84 <response_is_valid+0x44>)
		LOG_ERR("Invalid pointer provided");
   17a50:	480d      	ldr	r0, [pc, #52]	; (17a88 <response_is_valid+0x48>)
   17a52:	1ac9      	subs	r1, r1, r3
   17a54:	08c9      	lsrs	r1, r1, #3
   17a56:	0189      	lsls	r1, r1, #6
   17a58:	f041 0101 	orr.w	r1, r1, #1
   17a5c:	f007 fbd6 	bl	1f20c <log_0>
		return false;
   17a60:	2000      	movs	r0, #0
   17a62:	e00c      	b.n	17a7e <response_is_valid+0x3e>
	if ((response_len < strlen(check)) ||
   17a64:	4610      	mov	r0, r2
   17a66:	f7f9 fba3 	bl	111b0 <strlen>
   17a6a:	4286      	cmp	r6, r0
   17a6c:	d3f8      	bcc.n	17a60 <response_is_valid+0x20>
	    (memcmp(response, check, response_len) != 0)) {
   17a6e:	4632      	mov	r2, r6
   17a70:	4621      	mov	r1, r4
   17a72:	4628      	mov	r0, r5
   17a74:	f00a fe74 	bl	22760 <memcmp>
	if ((response_len < strlen(check)) ||
   17a78:	fab0 f080 	clz	r0, r0
   17a7c:	0940      	lsrs	r0, r0, #5
}
   17a7e:	bd70      	pop	{r4, r5, r6, pc}
   17a80:	00023040 	.word	0x00023040
   17a84:	00022fd8 	.word	0x00022fd8
   17a88:	00024705 	.word	0x00024705

00017a8c <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   17a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   17a90:	f04f 0800 	mov.w	r8, #0
{
   17a94:	4606      	mov	r6, r0
   17a96:	460f      	mov	r7, r1
   17a98:	4614      	mov	r4, r2
   17a9a:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   17a9c:	f8cd 8004 	str.w	r8, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   17aa0:	f7f9 fb86 	bl	111b0 <strlen>
   17aa4:	2808      	cmp	r0, #8
   17aa6:	d004      	beq.n	17ab2 <parse_psm+0x26>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   17aa8:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   17aac:	b003      	add	sp, #12
   17aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   17ab2:	4638      	mov	r0, r7
   17ab4:	f7f9 fb7c 	bl	111b0 <strlen>
   17ab8:	2808      	cmp	r0, #8
   17aba:	d1f5      	bne.n	17aa8 <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   17abc:	883a      	ldrh	r2, [r7, #0]
   17abe:	78bb      	ldrb	r3, [r7, #2]
   17ac0:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   17ac4:	4641      	mov	r1, r8
   17ac6:	2202      	movs	r2, #2
   17ac8:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   17aca:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   17ace:	f006 f9dd 	bl	1de8c <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   17ad2:	2807      	cmp	r0, #7
   17ad4:	d90a      	bls.n	17aec <parse_psm+0x60>
   17ad6:	4937      	ldr	r1, [pc, #220]	; (17bb4 <parse_psm+0x128>)
   17ad8:	4b37      	ldr	r3, [pc, #220]	; (17bb8 <parse_psm+0x12c>)
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   17ada:	4838      	ldr	r0, [pc, #224]	; (17bbc <parse_psm+0x130>)
   17adc:	1ac9      	subs	r1, r1, r3
   17ade:	08c9      	lsrs	r1, r1, #3
   17ae0:	0189      	lsls	r1, r1, #6
   17ae2:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   17ae6:	f007 fb91 	bl	1f20c <log_0>
   17aea:	e7dd      	b.n	17aa8 <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   17aec:	4b34      	ldr	r3, [pc, #208]	; (17bc0 <parse_psm+0x134>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   17aee:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   17af0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   17af4:	4641      	mov	r1, r8
   17af6:	1cf8      	adds	r0, r7, #3
   17af8:	f006 f9c8 	bl	1de8c <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   17afc:	f1b9 0f00 	cmp.w	r9, #0
   17b00:	d11e      	bne.n	17b40 <parse_psm+0xb4>
   17b02:	f04f 33ff 	mov.w	r3, #4294967295
   17b06:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   17b08:	b1fc      	cbz	r4, 17b4a <parse_psm+0xbe>
   17b0a:	4620      	mov	r0, r4
   17b0c:	f7f9 fb50 	bl	111b0 <strlen>
   17b10:	2808      	cmp	r0, #8
   17b12:	d11a      	bne.n	17b4a <parse_psm+0xbe>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   17b14:	8822      	ldrh	r2, [r4, #0]
   17b16:	78a3      	ldrb	r3, [r4, #2]
   17b18:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   17b1c:	2100      	movs	r1, #0
   17b1e:	2202      	movs	r2, #2
   17b20:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   17b22:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   17b26:	f006 f9b1 	bl	1de8c <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   17b2a:	2807      	cmp	r0, #7
   17b2c:	d923      	bls.n	17b76 <parse_psm+0xea>
   17b2e:	4921      	ldr	r1, [pc, #132]	; (17bb4 <parse_psm+0x128>)
   17b30:	4b21      	ldr	r3, [pc, #132]	; (17bb8 <parse_psm+0x12c>)
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   17b32:	4824      	ldr	r0, [pc, #144]	; (17bc4 <parse_psm+0x138>)
   17b34:	1ac9      	subs	r1, r1, r3
   17b36:	08c9      	lsrs	r1, r1, #3
   17b38:	0189      	lsls	r1, r1, #6
   17b3a:	f041 0101 	orr.w	r1, r1, #1
   17b3e:	e7d2      	b.n	17ae6 <parse_psm+0x5a>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   17b40:	fb00 f009 	mul.w	r0, r0, r9
   17b44:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   17b46:	3001      	adds	r0, #1
   17b48:	d0de      	beq.n	17b08 <parse_psm+0x7c>
	memcpy(unit_str, active_time_str, unit_str_len);
   17b4a:	8832      	ldrh	r2, [r6, #0]
   17b4c:	78b3      	ldrb	r3, [r6, #2]
   17b4e:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   17b52:	2100      	movs	r1, #0
   17b54:	2202      	movs	r2, #2
   17b56:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   17b58:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   17b5c:	f006 f996 	bl	1de8c <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   17b60:	2807      	cmp	r0, #7
   17b62:	d917      	bls.n	17b94 <parse_psm+0x108>
   17b64:	4913      	ldr	r1, [pc, #76]	; (17bb4 <parse_psm+0x128>)
   17b66:	4b14      	ldr	r3, [pc, #80]	; (17bb8 <parse_psm+0x12c>)
		LOG_ERR("Unable to parse active time string");
   17b68:	4817      	ldr	r0, [pc, #92]	; (17bc8 <parse_psm+0x13c>)
   17b6a:	1ac9      	subs	r1, r1, r3
   17b6c:	08c9      	lsrs	r1, r1, #3
   17b6e:	0189      	lsls	r1, r1, #6
   17b70:	f041 0101 	orr.w	r1, r1, #1
   17b74:	e7b7      	b.n	17ae6 <parse_psm+0x5a>
		timer_unit = t3412_lookup[lut_idx];
   17b76:	4b15      	ldr	r3, [pc, #84]	; (17bcc <parse_psm+0x140>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   17b78:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   17b7a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   17b7e:	2100      	movs	r1, #0
   17b80:	1ce0      	adds	r0, r4, #3
   17b82:	f006 f983 	bl	1de8c <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   17b86:	b117      	cbz	r7, 17b8e <parse_psm+0x102>
   17b88:	4378      	muls	r0, r7
   17b8a:	6028      	str	r0, [r5, #0]
   17b8c:	e7dd      	b.n	17b4a <parse_psm+0xbe>
   17b8e:	f04f 30ff 	mov.w	r0, #4294967295
   17b92:	e7fa      	b.n	17b8a <parse_psm+0xfe>
	timer_unit = t3324_lookup[lut_idx];
   17b94:	4b0e      	ldr	r3, [pc, #56]	; (17bd0 <parse_psm+0x144>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   17b96:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   17b98:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   17b9c:	2100      	movs	r1, #0
   17b9e:	1cf0      	adds	r0, r6, #3
   17ba0:	f006 f974 	bl	1de8c <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   17ba4:	b11c      	cbz	r4, 17bae <parse_psm+0x122>
   17ba6:	4344      	muls	r4, r0
	return 0;
   17ba8:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   17baa:	606c      	str	r4, [r5, #4]
	return 0;
   17bac:	e77e      	b.n	17aac <parse_psm+0x20>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   17bae:	f04f 34ff 	mov.w	r4, #4294967295
   17bb2:	e7f9      	b.n	17ba8 <parse_psm+0x11c>
   17bb4:	00023040 	.word	0x00023040
   17bb8:	00022fd8 	.word	0x00022fd8
   17bbc:	00024855 	.word	0x00024855
   17bc0:	0002339c 	.word	0x0002339c
   17bc4:	0002488a 	.word	0x0002488a
   17bc8:	000248b6 	.word	0x000248b6
   17bcc:	0002337c 	.word	0x0002337c
   17bd0:	0002337c 	.word	0x0002337c

00017bd4 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   17bd4:	2300      	movs	r3, #0
{
   17bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bd8:	b085      	sub	sp, #20
   17bda:	4607      	mov	r7, r0
   17bdc:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   17bde:	a802      	add	r0, sp, #8
   17be0:	2104      	movs	r1, #4
{
   17be2:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   17be4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   17be8:	f008 ff52 	bl	20a90 <at_params_list_init>
	if (err) {
   17bec:	4604      	mov	r4, r0
   17bee:	b168      	cbz	r0, 17c0c <parse_rrc_mode+0x38>
   17bf0:	4a24      	ldr	r2, [pc, #144]	; (17c84 <parse_rrc_mode+0xb0>)
   17bf2:	4b25      	ldr	r3, [pc, #148]	; (17c88 <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   17bf4:	4601      	mov	r1, r0
   17bf6:	1ad2      	subs	r2, r2, r3
   17bf8:	08d2      	lsrs	r2, r2, #3
   17bfa:	0192      	lsls	r2, r2, #6
   17bfc:	4823      	ldr	r0, [pc, #140]	; (17c8c <parse_rrc_mode+0xb8>)
   17bfe:	f042 0201 	orr.w	r2, r2, #1
   17c02:	f007 fb10 	bl	1f226 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   17c06:	4620      	mov	r0, r4
   17c08:	b005      	add	sp, #20
   17c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   17c0c:	4601      	mov	r1, r0
   17c0e:	aa02      	add	r2, sp, #8
   17c10:	4638      	mov	r0, r7
   17c12:	f008 ff24 	bl	20a5e <at_parser_params_from_str>
	if (err) {
   17c16:	4604      	mov	r4, r0
   17c18:	b170      	cbz	r0, 17c38 <parse_rrc_mode+0x64>
   17c1a:	4a1a      	ldr	r2, [pc, #104]	; (17c84 <parse_rrc_mode+0xb0>)
   17c1c:	4b1a      	ldr	r3, [pc, #104]	; (17c88 <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   17c1e:	4601      	mov	r1, r0
   17c20:	1ad2      	subs	r2, r2, r3
   17c22:	08d2      	lsrs	r2, r2, #3
   17c24:	0192      	lsls	r2, r2, #6
   17c26:	481a      	ldr	r0, [pc, #104]	; (17c90 <parse_rrc_mode+0xbc>)
   17c28:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get signalling mode, error: %d", err);
   17c2c:	f007 fafb 	bl	1f226 <log_1>
	at_params_list_free(&resp_list);
   17c30:	a802      	add	r0, sp, #8
   17c32:	f008 ff57 	bl	20ae4 <at_params_list_free>
	return err;
   17c36:	e7e6      	b.n	17c06 <parse_rrc_mode+0x32>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   17c38:	4631      	mov	r1, r6
   17c3a:	aa01      	add	r2, sp, #4
   17c3c:	a802      	add	r0, sp, #8
   17c3e:	f009 f803 	bl	20c48 <at_params_int_get>
	if (err) {
   17c42:	4604      	mov	r4, r0
   17c44:	b148      	cbz	r0, 17c5a <parse_rrc_mode+0x86>
   17c46:	4a0f      	ldr	r2, [pc, #60]	; (17c84 <parse_rrc_mode+0xb0>)
   17c48:	4b0f      	ldr	r3, [pc, #60]	; (17c88 <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   17c4a:	4601      	mov	r1, r0
   17c4c:	1ad2      	subs	r2, r2, r3
   17c4e:	08d2      	lsrs	r2, r2, #3
   17c50:	0192      	lsls	r2, r2, #6
   17c52:	4810      	ldr	r0, [pc, #64]	; (17c94 <parse_rrc_mode+0xc0>)
   17c54:	f042 0201 	orr.w	r2, r2, #1
   17c58:	e7e8      	b.n	17c2c <parse_rrc_mode+0x58>
	if (temp_mode == 0) {
   17c5a:	9901      	ldr	r1, [sp, #4]
   17c5c:	b909      	cbnz	r1, 17c62 <parse_rrc_mode+0x8e>
		*mode = LTE_LC_RRC_MODE_IDLE;
   17c5e:	7028      	strb	r0, [r5, #0]
   17c60:	e7e6      	b.n	17c30 <parse_rrc_mode+0x5c>
	} else if (temp_mode == 1) {
   17c62:	2901      	cmp	r1, #1
   17c64:	d101      	bne.n	17c6a <parse_rrc_mode+0x96>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   17c66:	7029      	strb	r1, [r5, #0]
   17c68:	e7e2      	b.n	17c30 <parse_rrc_mode+0x5c>
   17c6a:	4b07      	ldr	r3, [pc, #28]	; (17c88 <parse_rrc_mode+0xb4>)
   17c6c:	4a05      	ldr	r2, [pc, #20]	; (17c84 <parse_rrc_mode+0xb0>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   17c6e:	480a      	ldr	r0, [pc, #40]	; (17c98 <parse_rrc_mode+0xc4>)
   17c70:	1ad2      	subs	r2, r2, r3
   17c72:	08d2      	lsrs	r2, r2, #3
   17c74:	0192      	lsls	r2, r2, #6
   17c76:	f042 0201 	orr.w	r2, r2, #1
   17c7a:	f007 fad4 	bl	1f226 <log_1>
		err = -EINVAL;
   17c7e:	f06f 0415 	mvn.w	r4, #21
   17c82:	e7d5      	b.n	17c30 <parse_rrc_mode+0x5c>
   17c84:	00023040 	.word	0x00023040
   17c88:	00022fd8 	.word	0x00022fd8
   17c8c:	0002471e 	.word	0x0002471e
   17c90:	000248d9 	.word	0x000248d9
   17c94:	00024904 	.word	0x00024904
   17c98:	0002492d 	.word	0x0002492d

00017c9c <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   17c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17ca0:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   17ca2:	2300      	movs	r3, #0
{
   17ca4:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   17ca6:	9303      	str	r3, [sp, #12]
   17ca8:	f8ad 3010 	strh.w	r3, [sp, #16]
   17cac:	f88d 3012 	strb.w	r3, [sp, #18]
{
   17cb0:	4690      	mov	r8, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   17cb2:	2309      	movs	r3, #9
   17cb4:	2207      	movs	r2, #7
{
   17cb6:	4605      	mov	r5, r0
   17cb8:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   17cba:	a805      	add	r0, sp, #20
   17cbc:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   17cbe:	e9cd 2300 	strd	r2, r3, [sp]
{
   17cc2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   17cc6:	f008 fee3 	bl	20a90 <at_params_list_init>
	if (err) {
   17cca:	4604      	mov	r4, r0
   17ccc:	b170      	cbz	r0, 17cec <parse_cereg+0x50>
   17cce:	4a6a      	ldr	r2, [pc, #424]	; (17e78 <parse_cereg+0x1dc>)
   17cd0:	4b6a      	ldr	r3, [pc, #424]	; (17e7c <parse_cereg+0x1e0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   17cd2:	4601      	mov	r1, r0
   17cd4:	1ad2      	subs	r2, r2, r3
   17cd6:	08d2      	lsrs	r2, r2, #3
   17cd8:	0192      	lsls	r2, r2, #6
   17cda:	4869      	ldr	r0, [pc, #420]	; (17e80 <parse_cereg+0x1e4>)
   17cdc:	f042 0201 	orr.w	r2, r2, #1
   17ce0:	f007 faa1 	bl	1f226 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   17ce4:	4620      	mov	r0, r4
   17ce6:	b00b      	add	sp, #44	; 0x2c
   17ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   17cec:	4601      	mov	r1, r0
   17cee:	aa05      	add	r2, sp, #20
   17cf0:	4628      	mov	r0, r5
   17cf2:	f008 feb4 	bl	20a5e <at_parser_params_from_str>
	if (err) {
   17cf6:	4604      	mov	r4, r0
   17cf8:	b170      	cbz	r0, 17d18 <parse_cereg+0x7c>
   17cfa:	4a5f      	ldr	r2, [pc, #380]	; (17e78 <parse_cereg+0x1dc>)
   17cfc:	4b5f      	ldr	r3, [pc, #380]	; (17e7c <parse_cereg+0x1e0>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   17cfe:	4601      	mov	r1, r0
   17d00:	1ad2      	subs	r2, r2, r3
   17d02:	08d2      	lsrs	r2, r2, #3
   17d04:	0192      	lsls	r2, r2, #6
   17d06:	485f      	ldr	r0, [pc, #380]	; (17e84 <parse_cereg+0x1e8>)
   17d08:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get response prefix, error: %d", err);
   17d0c:	f007 fa8b 	bl	1f226 <log_1>
	at_params_list_free(&resp_list);
   17d10:	a805      	add	r0, sp, #20
   17d12:	f008 fee7 	bl	20ae4 <at_params_list_free>
	return err;
   17d16:	e7e5      	b.n	17ce4 <parse_cereg+0x48>
	err = at_params_string_get(&resp_list,
   17d18:	4601      	mov	r1, r0
   17d1a:	466b      	mov	r3, sp
   17d1c:	aa03      	add	r2, sp, #12
   17d1e:	a805      	add	r0, sp, #20
   17d20:	f008 ffc1 	bl	20ca6 <at_params_string_get>
	if (err) {
   17d24:	4604      	mov	r4, r0
   17d26:	b148      	cbz	r0, 17d3c <parse_cereg+0xa0>
   17d28:	4a53      	ldr	r2, [pc, #332]	; (17e78 <parse_cereg+0x1dc>)
   17d2a:	4b54      	ldr	r3, [pc, #336]	; (17e7c <parse_cereg+0x1e0>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   17d2c:	4601      	mov	r1, r0
   17d2e:	1ad2      	subs	r2, r2, r3
   17d30:	08d2      	lsrs	r2, r2, #3
   17d32:	0192      	lsls	r2, r2, #6
   17d34:	4854      	ldr	r0, [pc, #336]	; (17e88 <parse_cereg+0x1ec>)
   17d36:	f042 0201 	orr.w	r2, r2, #1
   17d3a:	e7e7      	b.n	17d0c <parse_cereg+0x70>
	if (!response_is_valid(response_prefix, response_prefix_len,
   17d3c:	4a53      	ldr	r2, [pc, #332]	; (17e8c <parse_cereg+0x1f0>)
   17d3e:	9900      	ldr	r1, [sp, #0]
   17d40:	a803      	add	r0, sp, #12
   17d42:	f7ff fe7d 	bl	17a40 <response_is_valid>
   17d46:	2800      	cmp	r0, #0
   17d48:	d0e2      	beq.n	17d10 <parse_cereg+0x74>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   17d4a:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   17d4c:	bf14      	ite	ne
   17d4e:	2101      	movne	r1, #1
   17d50:	2102      	moveq	r1, #2
   17d52:	aa07      	add	r2, sp, #28
   17d54:	a805      	add	r0, sp, #20
   17d56:	f008 ff77 	bl	20c48 <at_params_int_get>
	if (err) {
   17d5a:	1e05      	subs	r5, r0, #0
   17d5c:	d144      	bne.n	17de8 <parse_cereg+0x14c>
	switch (reg_status) {
   17d5e:	9d07      	ldr	r5, [sp, #28]
   17d60:	2d08      	cmp	r5, #8
   17d62:	d01e      	beq.n	17da2 <parse_cereg+0x106>
   17d64:	dc1b      	bgt.n	17d9e <parse_cereg+0x102>
   17d66:	2d05      	cmp	r5, #5
   17d68:	d91b      	bls.n	17da2 <parse_cereg+0x106>
   17d6a:	4b44      	ldr	r3, [pc, #272]	; (17e7c <parse_cereg+0x1e0>)
   17d6c:	4a42      	ldr	r2, [pc, #264]	; (17e78 <parse_cereg+0x1dc>)
		LOG_ERR("Invalid network registration status: %d", reg_status);
   17d6e:	4629      	mov	r1, r5
   17d70:	1ad2      	subs	r2, r2, r3
   17d72:	08d2      	lsrs	r2, r2, #3
   17d74:	0192      	lsls	r2, r2, #6
   17d76:	4846      	ldr	r0, [pc, #280]	; (17e90 <parse_cereg+0x1f4>)
   17d78:	f042 0201 	orr.w	r2, r2, #1
   17d7c:	f007 fa53 	bl	1f226 <log_1>
		return -EINVAL;
   17d80:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   17d84:	4629      	mov	r1, r5
   17d86:	4a3c      	ldr	r2, [pc, #240]	; (17e78 <parse_cereg+0x1dc>)
   17d88:	4b3c      	ldr	r3, [pc, #240]	; (17e7c <parse_cereg+0x1e0>)
   17d8a:	4842      	ldr	r0, [pc, #264]	; (17e94 <parse_cereg+0x1f8>)
   17d8c:	1ad2      	subs	r2, r2, r3
   17d8e:	08d2      	lsrs	r2, r2, #3
   17d90:	0192      	lsls	r2, r2, #6
   17d92:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
   17d96:	f007 fa46 	bl	1f226 <log_1>
			goto clean_exit;
   17d9a:	462c      	mov	r4, r5
   17d9c:	e7b8      	b.n	17d10 <parse_cereg+0x74>
	switch (reg_status) {
   17d9e:	2d5a      	cmp	r5, #90	; 0x5a
   17da0:	d1e3      	bne.n	17d6a <parse_cereg+0xce>
	if (reg_status) {
   17da2:	f1b8 0f00 	cmp.w	r8, #0
   17da6:	d001      	beq.n	17dac <parse_cereg+0x110>
		*reg_status = status;
   17da8:	f888 5000 	strb.w	r5, [r8]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   17dac:	2e00      	cmp	r6, #0
   17dae:	d04a      	beq.n	17e46 <parse_cereg+0x1aa>
   17db0:	2d5a      	cmp	r5, #90	; 0x5a
   17db2:	d05c      	beq.n	17e6e <parse_cereg+0x1d2>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   17db4:	a805      	add	r0, sp, #20
   17db6:	f008 ff96 	bl	20ce6 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   17dba:	2803      	cmp	r0, #3
   17dbc:	d957      	bls.n	17e6e <parse_cereg+0x1d2>
		err = at_params_string_get(
   17dbe:	2f00      	cmp	r7, #0
   17dc0:	bf14      	ite	ne
   17dc2:	2102      	movne	r1, #2
   17dc4:	2103      	moveq	r1, #3
   17dc6:	ab01      	add	r3, sp, #4
   17dc8:	aa07      	add	r2, sp, #28
   17dca:	a805      	add	r0, sp, #20
   17dcc:	f008 ff6b 	bl	20ca6 <at_params_string_get>
		if (err) {
   17dd0:	4605      	mov	r5, r0
   17dd2:	b158      	cbz	r0, 17dec <parse_cereg+0x150>
   17dd4:	4a28      	ldr	r2, [pc, #160]	; (17e78 <parse_cereg+0x1dc>)
   17dd6:	4b29      	ldr	r3, [pc, #164]	; (17e7c <parse_cereg+0x1e0>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
   17dd8:	4601      	mov	r1, r0
   17dda:	1ad2      	subs	r2, r2, r3
   17ddc:	08d2      	lsrs	r2, r2, #3
   17dde:	0192      	lsls	r2, r2, #6
   17de0:	482d      	ldr	r0, [pc, #180]	; (17e98 <parse_cereg+0x1fc>)
   17de2:	f042 0201 	orr.w	r2, r2, #1
   17de6:	e7d6      	b.n	17d96 <parse_cereg+0xfa>
	if (status < 0) {
   17de8:	dadb      	bge.n	17da2 <parse_cereg+0x106>
   17dea:	e7cb      	b.n	17d84 <parse_cereg+0xe8>
		str_buf[len] = '\0';
   17dec:	9b01      	ldr	r3, [sp, #4]
   17dee:	aa0a      	add	r2, sp, #40	; 0x28
   17df0:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   17df2:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   17df4:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   17df8:	2210      	movs	r2, #16
   17dfa:	a807      	add	r0, sp, #28
   17dfc:	f006 f846 	bl	1de8c <strtoul>
		len = sizeof(str_buf) - 1;
   17e00:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   17e02:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   17e04:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   17e06:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   17e08:	bf14      	ite	ne
   17e0a:	2103      	movne	r1, #3
   17e0c:	2104      	moveq	r1, #4
   17e0e:	ab01      	add	r3, sp, #4
   17e10:	aa07      	add	r2, sp, #28
   17e12:	a805      	add	r0, sp, #20
   17e14:	f008 ff47 	bl	20ca6 <at_params_string_get>
		if (err) {
   17e18:	4605      	mov	r5, r0
   17e1a:	b148      	cbz	r0, 17e30 <parse_cereg+0x194>
   17e1c:	4a16      	ldr	r2, [pc, #88]	; (17e78 <parse_cereg+0x1dc>)
   17e1e:	4b17      	ldr	r3, [pc, #92]	; (17e7c <parse_cereg+0x1e0>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   17e20:	4601      	mov	r1, r0
   17e22:	1ad2      	subs	r2, r2, r3
   17e24:	08d2      	lsrs	r2, r2, #3
   17e26:	0192      	lsls	r2, r2, #6
   17e28:	481c      	ldr	r0, [pc, #112]	; (17e9c <parse_cereg+0x200>)
   17e2a:	f042 0201 	orr.w	r2, r2, #1
   17e2e:	e7b2      	b.n	17d96 <parse_cereg+0xfa>
		str_buf[len] = '\0';
   17e30:	9b01      	ldr	r3, [sp, #4]
   17e32:	aa0a      	add	r2, sp, #40	; 0x28
   17e34:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   17e36:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   17e38:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   17e3c:	2210      	movs	r2, #16
   17e3e:	a807      	add	r0, sp, #28
   17e40:	f006 f824 	bl	1de8c <strtoul>
   17e44:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   17e46:	f1b9 0f00 	cmp.w	r9, #0
   17e4a:	f43f af61 	beq.w	17d10 <parse_cereg+0x74>
		err = at_params_int_get(&resp_list,
   17e4e:	2f00      	cmp	r7, #0
   17e50:	bf14      	ite	ne
   17e52:	2104      	movne	r1, #4
   17e54:	2105      	moveq	r1, #5
   17e56:	aa02      	add	r2, sp, #8
   17e58:	a805      	add	r0, sp, #20
   17e5a:	f008 fef5 	bl	20c48 <at_params_int_get>
		if (err) {
   17e5e:	b920      	cbnz	r0, 17e6a <parse_cereg+0x1ce>
			*lte_mode = mode;
   17e60:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   17e64:	f889 3000 	strb.w	r3, [r9]
   17e68:	e752      	b.n	17d10 <parse_cereg+0x74>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   17e6a:	2300      	movs	r3, #0
   17e6c:	e7fa      	b.n	17e64 <parse_cereg+0x1c8>
		cell->tac = UINT32_MAX;
   17e6e:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   17e72:	e9c6 3302 	strd	r3, r3, [r6, #8]
   17e76:	e7e6      	b.n	17e46 <parse_cereg+0x1aa>
   17e78:	00023040 	.word	0x00023040
   17e7c:	00022fd8 	.word	0x00022fd8
   17e80:	0002471e 	.word	0x0002471e
   17e84:	00024949 	.word	0x00024949
   17e88:	00024976 	.word	0x00024976
   17e8c:	000246ad 	.word	0x000246ad
   17e90:	0002499f 	.word	0x0002499f
   17e94:	00024386 	.word	0x00024386
   17e98:	000249c7 	.word	0x000249c7
   17e9c:	000249f3 	.word	0x000249f3

00017ea0 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   17ea0:	2300      	movs	r3, #0
{
   17ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17ea4:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   17ea6:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   17ea8:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   17eac:	2900      	cmp	r1, #0
   17eae:	d051      	beq.n	17f54 <parse_xt3412+0xb4>
   17eb0:	2800      	cmp	r0, #0
   17eb2:	d04f      	beq.n	17f54 <parse_xt3412+0xb4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   17eb4:	2104      	movs	r1, #4
   17eb6:	4668      	mov	r0, sp
   17eb8:	f008 fdea 	bl	20a90 <at_params_list_init>
	if (err) {
   17ebc:	4604      	mov	r4, r0
   17ebe:	b168      	cbz	r0, 17edc <parse_xt3412+0x3c>
   17ec0:	4a26      	ldr	r2, [pc, #152]	; (17f5c <parse_xt3412+0xbc>)
   17ec2:	4b27      	ldr	r3, [pc, #156]	; (17f60 <parse_xt3412+0xc0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   17ec4:	4601      	mov	r1, r0
   17ec6:	1ad2      	subs	r2, r2, r3
   17ec8:	08d2      	lsrs	r2, r2, #3
   17eca:	0192      	lsls	r2, r2, #6
   17ecc:	4825      	ldr	r0, [pc, #148]	; (17f64 <parse_xt3412+0xc4>)
   17ece:	f042 0201 	orr.w	r2, r2, #1
   17ed2:	f007 f9a8 	bl	1f226 <log_1>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   17ed6:	4620      	mov	r0, r4
   17ed8:	b002      	add	sp, #8
   17eda:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   17edc:	4601      	mov	r1, r0
   17ede:	466a      	mov	r2, sp
   17ee0:	4630      	mov	r0, r6
   17ee2:	f008 fdbc 	bl	20a5e <at_parser_params_from_str>
	if (err) {
   17ee6:	4604      	mov	r4, r0
   17ee8:	b170      	cbz	r0, 17f08 <parse_xt3412+0x68>
   17eea:	4a1c      	ldr	r2, [pc, #112]	; (17f5c <parse_xt3412+0xbc>)
   17eec:	4b1c      	ldr	r3, [pc, #112]	; (17f60 <parse_xt3412+0xc0>)
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   17eee:	4601      	mov	r1, r0
   17ef0:	1ad2      	subs	r2, r2, r3
   17ef2:	08d2      	lsrs	r2, r2, #3
   17ef4:	0192      	lsls	r2, r2, #6
   17ef6:	481c      	ldr	r0, [pc, #112]	; (17f68 <parse_xt3412+0xc8>)
   17ef8:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   17efc:	f007 f993 	bl	1f226 <log_1>
	at_params_list_free(&resp_list);
   17f00:	4668      	mov	r0, sp
   17f02:	f008 fdef 	bl	20ae4 <at_params_list_free>
	return err;
   17f06:	e7e6      	b.n	17ed6 <parse_xt3412+0x36>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   17f08:	462a      	mov	r2, r5
   17f0a:	2102      	movs	r1, #2
   17f0c:	4668      	mov	r0, sp
   17f0e:	f008 feb6 	bl	20c7e <at_params_int64_get>
	if (err) {
   17f12:	4604      	mov	r4, r0
   17f14:	b148      	cbz	r0, 17f2a <parse_xt3412+0x8a>
   17f16:	4a11      	ldr	r2, [pc, #68]	; (17f5c <parse_xt3412+0xbc>)
   17f18:	4b11      	ldr	r3, [pc, #68]	; (17f60 <parse_xt3412+0xc0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   17f1a:	4601      	mov	r1, r0
   17f1c:	1ad2      	subs	r2, r2, r3
   17f1e:	08d2      	lsrs	r2, r2, #3
   17f20:	0192      	lsls	r2, r2, #6
   17f22:	4812      	ldr	r0, [pc, #72]	; (17f6c <parse_xt3412+0xcc>)
   17f24:	f042 0201 	orr.w	r2, r2, #1
   17f28:	e7e8      	b.n	17efc <parse_xt3412+0x5c>
	if ((*time > T3412_MAX) || *time < 0) {
   17f2a:	2108      	movs	r1, #8
   17f2c:	e9d5 2300 	ldrd	r2, r3, [r5]
   17f30:	480f      	ldr	r0, [pc, #60]	; (17f70 <parse_xt3412+0xd0>)
   17f32:	4299      	cmp	r1, r3
   17f34:	bf08      	it	eq
   17f36:	4290      	cmpeq	r0, r2
   17f38:	d2e2      	bcs.n	17f00 <parse_xt3412+0x60>
   17f3a:	4b09      	ldr	r3, [pc, #36]	; (17f60 <parse_xt3412+0xc0>)
   17f3c:	4907      	ldr	r1, [pc, #28]	; (17f5c <parse_xt3412+0xbc>)
		LOG_WRN("Parsed time parameter not within valid range");
   17f3e:	480d      	ldr	r0, [pc, #52]	; (17f74 <parse_xt3412+0xd4>)
   17f40:	1ac9      	subs	r1, r1, r3
   17f42:	08c9      	lsrs	r1, r1, #3
   17f44:	0189      	lsls	r1, r1, #6
   17f46:	f041 0102 	orr.w	r1, r1, #2
   17f4a:	f007 f95f 	bl	1f20c <log_0>
		err = -EINVAL;
   17f4e:	f06f 0415 	mvn.w	r4, #21
   17f52:	e7d5      	b.n	17f00 <parse_xt3412+0x60>
		return -EINVAL;
   17f54:	f06f 0415 	mvn.w	r4, #21
   17f58:	e7bd      	b.n	17ed6 <parse_xt3412+0x36>
   17f5a:	bf00      	nop
   17f5c:	00023040 	.word	0x00023040
   17f60:	00022fd8 	.word	0x00022fd8
   17f64:	0002471e 	.word	0x0002471e
   17f68:	00024a14 	.word	0x00024a14
   17f6c:	00024a41 	.word	0x00024a41
   17f70:	5099e000 	.word	0x5099e000
   17f74:	00024a6e 	.word	0x00024a6e

00017f78 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   17f78:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   17f7a:	4604      	mov	r4, r0
   17f7c:	b958      	cbnz	r0, 17f96 <neighborcell_count_get+0x1e>
   17f7e:	4b0e      	ldr	r3, [pc, #56]	; (17fb8 <neighborcell_count_get+0x40>)
   17f80:	490e      	ldr	r1, [pc, #56]	; (17fbc <neighborcell_count_get+0x44>)
		LOG_ERR("at_response is NULL, can't get cell count");
   17f82:	480f      	ldr	r0, [pc, #60]	; (17fc0 <neighborcell_count_get+0x48>)
   17f84:	1ac9      	subs	r1, r1, r3
   17f86:	08c9      	lsrs	r1, r1, #3
   17f88:	0189      	lsls	r1, r1, #6
   17f8a:	f041 0101 	orr.w	r1, r1, #1
   17f8e:	f007 f93d 	bl	1f20c <log_0>
		return 0;
   17f92:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   17f94:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   17f96:	2400      	movs	r4, #0
   17f98:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   17f9a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   17f9e:	282c      	cmp	r0, #44	; 0x2c
   17fa0:	d101      	bne.n	17fa6 <neighborcell_count_get+0x2e>
			count++;
   17fa2:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   17fa4:	e7f9      	b.n	17f9a <neighborcell_count_get+0x22>
   17fa6:	2800      	cmp	r0, #0
   17fa8:	d1f7      	bne.n	17f9a <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   17faa:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   17fac:	bf82      	ittt	hi
   17fae:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   17fb0:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   17fb2:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   17fb6:	e7ed      	b.n	17f94 <neighborcell_count_get+0x1c>
   17fb8:	00022fd8 	.word	0x00022fd8
   17fbc:	00023040 	.word	0x00023040
   17fc0:	00024a9b 	.word	0x00024a9b

00017fc4 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   17fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   17fc8:	230b      	movs	r3, #11
{
   17fca:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   17fcc:	2100      	movs	r1, #0
{
   17fce:	4606      	mov	r6, r0
   17fd0:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   17fd2:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   17fd6:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   17fd8:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   17fdc:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   17fde:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   17fe2:	2b2c      	cmp	r3, #44	; 0x2c
   17fe4:	d101      	bne.n	17fea <parse_ncellmeas+0x26>
			count++;
   17fe6:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   17fe8:	e7f9      	b.n	17fde <parse_ncellmeas+0x1a>
   17fea:	2b00      	cmp	r3, #0
   17fec:	d1f7      	bne.n	17fde <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   17fee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   17ff2:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   17ff6:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   17ff8:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   17ffa:	a807      	add	r0, sp, #28
   17ffc:	f008 fd48 	bl	20a90 <at_params_list_init>
	if (err) {
   18000:	4604      	mov	r4, r0
   18002:	b170      	cbz	r0, 18022 <parse_ncellmeas+0x5e>
   18004:	4a99      	ldr	r2, [pc, #612]	; (1826c <parse_ncellmeas+0x2a8>)
   18006:	4b9a      	ldr	r3, [pc, #616]	; (18270 <parse_ncellmeas+0x2ac>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   18008:	4601      	mov	r1, r0
   1800a:	1ad2      	subs	r2, r2, r3
   1800c:	08d2      	lsrs	r2, r2, #3
   1800e:	0192      	lsls	r2, r2, #6
   18010:	4898      	ldr	r0, [pc, #608]	; (18274 <parse_ncellmeas+0x2b0>)
   18012:	f042 0201 	orr.w	r2, r2, #1
   18016:	f007 f906 	bl	1f226 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1801a:	4620      	mov	r0, r4
   1801c:	b00d      	add	sp, #52	; 0x34
   1801e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   18022:	4601      	mov	r1, r0
   18024:	aa07      	add	r2, sp, #28
   18026:	4630      	mov	r0, r6
   18028:	f008 fd19 	bl	20a5e <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   1802c:	4604      	mov	r4, r0
   1802e:	b180      	cbz	r0, 18052 <parse_ncellmeas+0x8e>
   18030:	1dc3      	adds	r3, r0, #7
   18032:	d021      	beq.n	18078 <parse_ncellmeas+0xb4>
   18034:	4a8d      	ldr	r2, [pc, #564]	; (1826c <parse_ncellmeas+0x2a8>)
   18036:	4b8e      	ldr	r3, [pc, #568]	; (18270 <parse_ncellmeas+0x2ac>)
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   18038:	4601      	mov	r1, r0
   1803a:	1ad2      	subs	r2, r2, r3
   1803c:	08d2      	lsrs	r2, r2, #3
   1803e:	0192      	lsls	r2, r2, #6
   18040:	488d      	ldr	r0, [pc, #564]	; (18278 <parse_ncellmeas+0x2b4>)
   18042:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get response prefix, error: %d", err);
   18046:	f007 f8ee 	bl	1f226 <log_1>
	at_params_list_free(&resp_list);
   1804a:	a807      	add	r0, sp, #28
   1804c:	f008 fd4a 	bl	20ae4 <at_params_list_free>
	return err;
   18050:	e7e3      	b.n	1801a <parse_ncellmeas+0x56>
	bool incomplete = false;
   18052:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   18054:	2100      	movs	r1, #0
   18056:	ab04      	add	r3, sp, #16
   18058:	aa09      	add	r2, sp, #36	; 0x24
   1805a:	a807      	add	r0, sp, #28
   1805c:	f008 fe23 	bl	20ca6 <at_params_string_get>
	if (err) {
   18060:	4604      	mov	r4, r0
   18062:	b158      	cbz	r0, 1807c <parse_ncellmeas+0xb8>
   18064:	4a81      	ldr	r2, [pc, #516]	; (1826c <parse_ncellmeas+0x2a8>)
   18066:	4b82      	ldr	r3, [pc, #520]	; (18270 <parse_ncellmeas+0x2ac>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   18068:	4601      	mov	r1, r0
   1806a:	1ad2      	subs	r2, r2, r3
   1806c:	08d2      	lsrs	r2, r2, #3
   1806e:	0192      	lsls	r2, r2, #6
   18070:	4882      	ldr	r0, [pc, #520]	; (1827c <parse_ncellmeas+0x2b8>)
   18072:	f042 0201 	orr.w	r2, r2, #1
   18076:	e7e6      	b.n	18046 <parse_ncellmeas+0x82>
		incomplete = true;
   18078:	2701      	movs	r7, #1
   1807a:	e7eb      	b.n	18054 <parse_ncellmeas+0x90>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1807c:	4a80      	ldr	r2, [pc, #512]	; (18280 <parse_ncellmeas+0x2bc>)
   1807e:	9904      	ldr	r1, [sp, #16]
   18080:	a809      	add	r0, sp, #36	; 0x24
   18082:	f7ff fcdd 	bl	17a40 <response_is_valid>
   18086:	2800      	cmp	r0, #0
   18088:	d0df      	beq.n	1804a <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   1808a:	2101      	movs	r1, #1
   1808c:	aa01      	add	r2, sp, #4
   1808e:	a807      	add	r0, sp, #28
   18090:	f008 fdda 	bl	20c48 <at_params_int_get>
	if (err) {
   18094:	4604      	mov	r4, r0
   18096:	2800      	cmp	r0, #0
   18098:	d1d7      	bne.n	1804a <parse_ncellmeas+0x86>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   1809a:	9b01      	ldr	r3, [sp, #4]
   1809c:	2b00      	cmp	r3, #0
   1809e:	f040 80e3 	bne.w	18268 <parse_ncellmeas+0x2a4>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   180a2:	2102      	movs	r1, #2
   180a4:	aa02      	add	r2, sp, #8
   180a6:	a807      	add	r0, sp, #28
   180a8:	f008 fe6d 	bl	20d86 <string_param_to_int.constprop.0>
	if (err) {
   180ac:	4604      	mov	r4, r0
   180ae:	2800      	cmp	r0, #0
   180b0:	d1cb      	bne.n	1804a <parse_ncellmeas+0x86>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   180b2:	9b02      	ldr	r3, [sp, #8]
	len = sizeof(tmp_str);
   180b4:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   180b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   180bc:	bfa4      	itt	ge
   180be:	f04f 33ff 	movge.w	r3, #4294967295
   180c2:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   180c4:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   180c6:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   180c8:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   180ca:	aa05      	add	r2, sp, #20
   180cc:	ab03      	add	r3, sp, #12
   180ce:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   180d0:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   180d4:	f008 fde7 	bl	20ca6 <at_params_string_get>
	if (err) {
   180d8:	4604      	mov	r4, r0
   180da:	2800      	cmp	r0, #0
   180dc:	d1b5      	bne.n	1804a <parse_ncellmeas+0x86>
	tmp_str[len] = '\0';
   180de:	9b03      	ldr	r3, [sp, #12]
   180e0:	aa0c      	add	r2, sp, #48	; 0x30
   180e2:	4413      	add	r3, r2
   180e4:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   180e8:	210a      	movs	r1, #10
   180ea:	1d2a      	adds	r2, r5, #4
   180ec:	f10d 0017 	add.w	r0, sp, #23
   180f0:	f008 fe23 	bl	20d3a <string_to_int>
	if (err) {
   180f4:	4604      	mov	r4, r0
   180f6:	2800      	cmp	r0, #0
   180f8:	d1a7      	bne.n	1804a <parse_ncellmeas+0x86>
	tmp_str[3] = '\0';
   180fa:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   180fe:	462a      	mov	r2, r5
   18100:	210a      	movs	r1, #10
   18102:	a805      	add	r0, sp, #20
   18104:	f008 fe19 	bl	20d3a <string_to_int>
	if (err) {
   18108:	4604      	mov	r4, r0
   1810a:	2800      	cmp	r0, #0
   1810c:	d19d      	bne.n	1804a <parse_ncellmeas+0x86>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   1810e:	2104      	movs	r1, #4
   18110:	aa02      	add	r2, sp, #8
   18112:	a807      	add	r0, sp, #28
   18114:	f008 fe37 	bl	20d86 <string_param_to_int.constprop.0>
	if (err) {
   18118:	4604      	mov	r4, r0
   1811a:	2800      	cmp	r0, #0
   1811c:	d195      	bne.n	1804a <parse_ncellmeas+0x86>
	cells->current_cell.tac = tmp;
   1811e:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   18120:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   18122:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   18124:	aa02      	add	r2, sp, #8
   18126:	a807      	add	r0, sp, #28
   18128:	f008 fd8e 	bl	20c48 <at_params_int_get>
	if (err) {
   1812c:	4604      	mov	r4, r0
   1812e:	2800      	cmp	r0, #0
   18130:	d18b      	bne.n	1804a <parse_ncellmeas+0x86>
	cells->current_cell.timing_advance = tmp;
   18132:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   18134:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   18136:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   18138:	f105 0210 	add.w	r2, r5, #16
   1813c:	a807      	add	r0, sp, #28
   1813e:	f008 fd83 	bl	20c48 <at_params_int_get>
	if (err) {
   18142:	4604      	mov	r4, r0
   18144:	2800      	cmp	r0, #0
   18146:	d180      	bne.n	1804a <parse_ncellmeas+0x86>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   18148:	4641      	mov	r1, r8
   1814a:	f105 0228 	add.w	r2, r5, #40	; 0x28
   1814e:	a807      	add	r0, sp, #28
   18150:	f008 fd46 	bl	20be0 <at_params_short_get>
	if (err) {
   18154:	4604      	mov	r4, r0
   18156:	2800      	cmp	r0, #0
   18158:	f47f af77 	bne.w	1804a <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   1815c:	2108      	movs	r1, #8
   1815e:	aa02      	add	r2, sp, #8
   18160:	a807      	add	r0, sp, #28
   18162:	f008 fd71 	bl	20c48 <at_params_int_get>
	if (err) {
   18166:	4604      	mov	r4, r0
   18168:	2800      	cmp	r0, #0
   1816a:	f47f af6e 	bne.w	1804a <parse_ncellmeas+0x86>
	cells->current_cell.rsrp = tmp;
   1816e:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   18170:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   18172:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   18174:	aa02      	add	r2, sp, #8
   18176:	a807      	add	r0, sp, #28
   18178:	f008 fd66 	bl	20c48 <at_params_int_get>
	if (err) {
   1817c:	4604      	mov	r4, r0
   1817e:	2800      	cmp	r0, #0
   18180:	f47f af63 	bne.w	1804a <parse_ncellmeas+0x86>
	cells->current_cell.rsrq = tmp;
   18184:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   18186:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   18188:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1818a:	f105 0220 	add.w	r2, r5, #32
   1818e:	a807      	add	r0, sp, #28
   18190:	f008 fd75 	bl	20c7e <at_params_int64_get>
	if (err) {
   18194:	4604      	mov	r4, r0
   18196:	2800      	cmp	r0, #0
   18198:	f47f af57 	bne.w	1804a <parse_ncellmeas+0x86>
	cells->ncells_count = neighborcell_count_get(at_response);
   1819c:	4630      	mov	r0, r6
   1819e:	f7ff feeb 	bl	17f78 <neighborcell_count_get>
   181a2:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   181a6:	b2c0      	uxtb	r0, r0
   181a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   181ac:	f100 060b 	add.w	r6, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   181b0:	a807      	add	r0, sp, #28
   181b2:	f008 fd98 	bl	20ce6 <at_params_valid_count_get>
   181b6:	4286      	cmp	r6, r0
   181b8:	d208      	bcs.n	181cc <parse_ncellmeas+0x208>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   181ba:	4631      	mov	r1, r6
   181bc:	f105 0218 	add.w	r2, r5, #24
   181c0:	a807      	add	r0, sp, #28
   181c2:	f008 fd5c 	bl	20c7e <at_params_int64_get>
		if (err) {
   181c6:	b128      	cbz	r0, 181d4 <parse_ncellmeas+0x210>
		err = at_params_int_get(&resp_list,
   181c8:	4604      	mov	r4, r0
   181ca:	e73e      	b.n	1804a <parse_ncellmeas+0x86>
		cells->current_cell.timing_advance_meas_time = 0;
   181cc:	2200      	movs	r2, #0
   181ce:	2300      	movs	r3, #0
   181d0:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   181d4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   181d8:	2b00      	cmp	r3, #0
   181da:	f43f af36 	beq.w	1804a <parse_ncellmeas+0x86>
   181de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   181e0:	2b00      	cmp	r3, #0
   181e2:	f43f af32 	beq.w	1804a <parse_ncellmeas+0x86>
   181e6:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   181e8:	f04f 0800 	mov.w	r8, #0
   181ec:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   181f0:	4598      	cmp	r8, r3
   181f2:	d304      	bcc.n	181fe <parse_ncellmeas+0x23a>
		err = -E2BIG;
   181f4:	2f00      	cmp	r7, #0
   181f6:	bf18      	it	ne
   181f8:	f06f 0406 	mvnne.w	r4, #6
   181fc:	e725      	b.n	1804a <parse_ncellmeas+0x86>
					&cells->neighbor_cells[i].earfcn);
   181fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   18200:	1f31      	subs	r1, r6, #4
   18202:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   18206:	a807      	add	r0, sp, #28
   18208:	ea4f 1908 	mov.w	r9, r8, lsl #4
   1820c:	f008 fd1c 	bl	20c48 <at_params_int_get>
		if (err) {
   18210:	2800      	cmp	r0, #0
   18212:	d1d9      	bne.n	181c8 <parse_ncellmeas+0x204>
					  &cells->neighbor_cells[i].phys_cell_id);
   18214:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   18216:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   18218:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   1821a:	3208      	adds	r2, #8
   1821c:	a807      	add	r0, sp, #28
   1821e:	f008 fcdf 	bl	20be0 <at_params_short_get>
		if (err) {
   18222:	2800      	cmp	r0, #0
   18224:	d1d0      	bne.n	181c8 <parse_ncellmeas+0x204>
		err = at_params_int_get(&resp_list,
   18226:	aa02      	add	r2, sp, #8
   18228:	1eb1      	subs	r1, r6, #2
   1822a:	a807      	add	r0, sp, #28
   1822c:	f008 fd0c 	bl	20c48 <at_params_int_get>
		if (err) {
   18230:	2800      	cmp	r0, #0
   18232:	d1c9      	bne.n	181c8 <parse_ncellmeas+0x204>
		cells->neighbor_cells[i].rsrp = tmp;
   18234:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18236:	9a02      	ldr	r2, [sp, #8]
   18238:	444b      	add	r3, r9
   1823a:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   1823c:	1e71      	subs	r1, r6, #1
   1823e:	aa02      	add	r2, sp, #8
   18240:	a807      	add	r0, sp, #28
   18242:	f008 fd01 	bl	20c48 <at_params_int_get>
		if (err) {
   18246:	2800      	cmp	r0, #0
   18248:	d1be      	bne.n	181c8 <parse_ncellmeas+0x204>
		cells->neighbor_cells[i].rsrq = tmp;
   1824a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1824c:	9b02      	ldr	r3, [sp, #8]
   1824e:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   18250:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   18252:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   18254:	a807      	add	r0, sp, #28
   18256:	3204      	adds	r2, #4
   18258:	f008 fcf6 	bl	20c48 <at_params_int_get>
		if (err) {
   1825c:	3605      	adds	r6, #5
   1825e:	2800      	cmp	r0, #0
   18260:	d1b2      	bne.n	181c8 <parse_ncellmeas+0x204>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   18262:	f108 0801 	add.w	r8, r8, #1
   18266:	e7c1      	b.n	181ec <parse_ncellmeas+0x228>
		err = 1;
   18268:	2401      	movs	r4, #1
   1826a:	e6ee      	b.n	1804a <parse_ncellmeas+0x86>
   1826c:	00023040 	.word	0x00023040
   18270:	00022fd8 	.word	0x00022fd8
   18274:	0002471e 	.word	0x0002471e
   18278:	00024ac5 	.word	0x00024ac5
   1827c:	00024976 	.word	0x00024976
   18280:	0002468b 	.word	0x0002468b

00018284 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   18284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   18286:	2300      	movs	r3, #0
{
   18288:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   1828a:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   1828c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   18290:	2900      	cmp	r1, #0
   18292:	d05f      	beq.n	18354 <parse_xmodemsleep+0xd0>
   18294:	2800      	cmp	r0, #0
   18296:	d05d      	beq.n	18354 <parse_xmodemsleep+0xd0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   18298:	2104      	movs	r1, #4
   1829a:	a802      	add	r0, sp, #8
   1829c:	f008 fbf8 	bl	20a90 <at_params_list_init>
	if (err) {
   182a0:	4604      	mov	r4, r0
   182a2:	b168      	cbz	r0, 182c0 <parse_xmodemsleep+0x3c>
   182a4:	4a2d      	ldr	r2, [pc, #180]	; (1835c <parse_xmodemsleep+0xd8>)
   182a6:	4b2e      	ldr	r3, [pc, #184]	; (18360 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   182a8:	4601      	mov	r1, r0
   182aa:	1ad2      	subs	r2, r2, r3
   182ac:	08d2      	lsrs	r2, r2, #3
   182ae:	0192      	lsls	r2, r2, #6
   182b0:	482c      	ldr	r0, [pc, #176]	; (18364 <parse_xmodemsleep+0xe0>)
   182b2:	f042 0201 	orr.w	r2, r2, #1
   182b6:	f006 ffb6 	bl	1f226 <log_1>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   182ba:	4620      	mov	r0, r4
   182bc:	b004      	add	sp, #16
   182be:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   182c0:	4601      	mov	r1, r0
   182c2:	aa02      	add	r2, sp, #8
   182c4:	4630      	mov	r0, r6
   182c6:	f008 fbca 	bl	20a5e <at_parser_params_from_str>
	if (err) {
   182ca:	4604      	mov	r4, r0
   182cc:	b158      	cbz	r0, 182e6 <parse_xmodemsleep+0x62>
   182ce:	4a23      	ldr	r2, [pc, #140]	; (1835c <parse_xmodemsleep+0xd8>)
   182d0:	4b23      	ldr	r3, [pc, #140]	; (18360 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   182d2:	4601      	mov	r1, r0
   182d4:	1ad2      	subs	r2, r2, r3
   182d6:	08d2      	lsrs	r2, r2, #3
   182d8:	0192      	lsls	r2, r2, #6
   182da:	4823      	ldr	r0, [pc, #140]	; (18368 <parse_xmodemsleep+0xe4>)
   182dc:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   182e0:	f006 ffa1 	bl	1f226 <log_1>
		goto clean_exit;
   182e4:	e01f      	b.n	18326 <parse_xmodemsleep+0xa2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   182e6:	2101      	movs	r1, #1
   182e8:	f10d 0206 	add.w	r2, sp, #6
   182ec:	a802      	add	r0, sp, #8
   182ee:	f008 fc93 	bl	20c18 <at_params_unsigned_short_get>
	if (err) {
   182f2:	4604      	mov	r4, r0
   182f4:	b148      	cbz	r0, 1830a <parse_xmodemsleep+0x86>
   182f6:	4a19      	ldr	r2, [pc, #100]	; (1835c <parse_xmodemsleep+0xd8>)
   182f8:	4b19      	ldr	r3, [pc, #100]	; (18360 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   182fa:	4601      	mov	r1, r0
   182fc:	1ad2      	subs	r2, r2, r3
   182fe:	08d2      	lsrs	r2, r2, #3
   18300:	0192      	lsls	r2, r2, #6
   18302:	481a      	ldr	r0, [pc, #104]	; (1836c <parse_xmodemsleep+0xe8>)
   18304:	f042 0201 	orr.w	r2, r2, #1
   18308:	e7ea      	b.n	182e0 <parse_xmodemsleep+0x5c>
	modem_sleep->type = type;
   1830a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   1830e:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   18310:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   18312:	f008 fce8 	bl	20ce6 <at_params_valid_count_get>
   18316:	2802      	cmp	r0, #2
   18318:	d809      	bhi.n	1832e <parse_xmodemsleep+0xaa>
		modem_sleep->time = -1;
   1831a:	f04f 32ff 	mov.w	r2, #4294967295
   1831e:	f04f 33ff 	mov.w	r3, #4294967295
   18322:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   18326:	a802      	add	r0, sp, #8
   18328:	f008 fbdc 	bl	20ae4 <at_params_list_free>
	return err;
   1832c:	e7c5      	b.n	182ba <parse_xmodemsleep+0x36>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   1832e:	2102      	movs	r1, #2
   18330:	f105 0208 	add.w	r2, r5, #8
   18334:	a802      	add	r0, sp, #8
   18336:	f008 fca2 	bl	20c7e <at_params_int64_get>
	if (err) {
   1833a:	4604      	mov	r4, r0
   1833c:	2800      	cmp	r0, #0
   1833e:	d0f2      	beq.n	18326 <parse_xmodemsleep+0xa2>
   18340:	4a06      	ldr	r2, [pc, #24]	; (1835c <parse_xmodemsleep+0xd8>)
   18342:	4b07      	ldr	r3, [pc, #28]	; (18360 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   18344:	4601      	mov	r1, r0
   18346:	1ad2      	subs	r2, r2, r3
   18348:	08d2      	lsrs	r2, r2, #3
   1834a:	0192      	lsls	r2, r2, #6
   1834c:	4808      	ldr	r0, [pc, #32]	; (18370 <parse_xmodemsleep+0xec>)
   1834e:	f042 0201 	orr.w	r2, r2, #1
   18352:	e7c5      	b.n	182e0 <parse_xmodemsleep+0x5c>
		return -EINVAL;
   18354:	f06f 0415 	mvn.w	r4, #21
   18358:	e7af      	b.n	182ba <parse_xmodemsleep+0x36>
   1835a:	bf00      	nop
   1835c:	00023040 	.word	0x00023040
   18360:	00022fd8 	.word	0x00022fd8
   18364:	0002471e 	.word	0x0002471e
   18368:	00024af7 	.word	0x00024af7
   1836c:	00024b29 	.word	0x00024b29
   18370:	00024b52 	.word	0x00024b52

00018374 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   18374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18376:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   18378:	4604      	mov	r4, r0
   1837a:	b318      	cbz	r0, 183c4 <parse_mdmev+0x50>
   1837c:	b311      	cbz	r1, 183c4 <parse_mdmev+0x50>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   1837e:	2108      	movs	r1, #8
   18380:	4a12      	ldr	r2, [pc, #72]	; (183cc <parse_mdmev+0x58>)
   18382:	f7ff fb5d 	bl	17a40 <response_is_valid>
   18386:	b960      	cbnz	r0, 183a2 <parse_mdmev+0x2e>
   18388:	4b11      	ldr	r3, [pc, #68]	; (183d0 <parse_mdmev+0x5c>)
   1838a:	4912      	ldr	r1, [pc, #72]	; (183d4 <parse_mdmev+0x60>)
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   1838c:	4812      	ldr	r0, [pc, #72]	; (183d8 <parse_mdmev+0x64>)
   1838e:	1ac9      	subs	r1, r1, r3
   18390:	08c9      	lsrs	r1, r1, #3
   18392:	0189      	lsls	r1, r1, #6
   18394:	f041 0101 	orr.w	r1, r1, #1
   18398:	f006 ff38 	bl	1f20c <log_0>
		return -EIO;
   1839c:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
}
   183a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   183a2:	2500      	movs	r5, #0
   183a4:	4f0d      	ldr	r7, [pc, #52]	; (183dc <parse_mdmev+0x68>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   183a6:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   183a8:	4621      	mov	r1, r4
   183aa:	f857 0b04 	ldr.w	r0, [r7], #4
   183ae:	f7f8 fef5 	bl	1119c <strcmp>
   183b2:	b908      	cbnz	r0, 183b8 <parse_mdmev+0x44>
			*modem_evt = i;
   183b4:	7035      	strb	r5, [r6, #0]
			return 0;
   183b6:	e7f3      	b.n	183a0 <parse_mdmev+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   183b8:	3501      	adds	r5, #1
   183ba:	2d05      	cmp	r5, #5
   183bc:	d1f4      	bne.n	183a8 <parse_mdmev+0x34>
	return -ENODATA;
   183be:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   183c2:	e7ed      	b.n	183a0 <parse_mdmev+0x2c>
		return -EINVAL;
   183c4:	f06f 0015 	mvn.w	r0, #21
   183c8:	e7ea      	b.n	183a0 <parse_mdmev+0x2c>
   183ca:	bf00      	nop
   183cc:	00024b87 	.word	0x00024b87
   183d0:	00022fd8 	.word	0x00022fd8
   183d4:	00023040 	.word	0x00023040
   183d8:	00024b90 	.word	0x00024b90
   183dc:	00023368 	.word	0x00023368

000183e0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   183e0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   183e2:	f7fa fe83 	bl	130ec <z_impl_log_panic>
   183e6:	4b06      	ldr	r3, [pc, #24]	; (18400 <k_sys_fatal_error_handler+0x20>)
   183e8:	4906      	ldr	r1, [pc, #24]	; (18404 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   183ea:	4807      	ldr	r0, [pc, #28]	; (18408 <k_sys_fatal_error_handler+0x28>)
   183ec:	1ac9      	subs	r1, r1, r3
   183ee:	08c9      	lsrs	r1, r1, #3
   183f0:	0189      	lsls	r1, r1, #6
   183f2:	f041 0101 	orr.w	r1, r1, #1
   183f6:	f006 ff09 	bl	1f20c <log_0>
		sys_arch_reboot(0);
   183fa:	2000      	movs	r0, #0
   183fc:	f7fb ffe4 	bl	143c8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   18400:	00022fd8 	.word	0x00022fd8
   18404:	00023008 	.word	0x00023008
   18408:	00024c08 	.word	0x00024c08

0001840c <date_time_now>:

	return 0;
}

int date_time_now(int64_t *unix_time_ms)
{
   1840c:	b510      	push	{r4, lr}
	int err;

	if (unix_time_ms == NULL) {
   1840e:	4604      	mov	r4, r0
   18410:	b960      	cbnz	r0, 1842c <date_time_now+0x20>
   18412:	4b11      	ldr	r3, [pc, #68]	; (18458 <date_time_now+0x4c>)
   18414:	4911      	ldr	r1, [pc, #68]	; (1845c <date_time_now+0x50>)
		LOG_ERR("The passed in pointer cannot be NULL");
   18416:	4812      	ldr	r0, [pc, #72]	; (18460 <date_time_now+0x54>)
   18418:	1ac9      	subs	r1, r1, r3
   1841a:	08c9      	lsrs	r1, r1, #3
   1841c:	0189      	lsls	r1, r1, #6
   1841e:	f041 0101 	orr.w	r1, r1, #1
   18422:	f006 fef3 	bl	1f20c <log_0>
		return -EINVAL;
   18426:	f06f 0015 	mvn.w	r0, #21
	}

	err = date_time_core_now(unix_time_ms);

	return err;
}
   1842a:	bd10      	pop	{r4, pc}

bool date_time_is_valid(void)
{
	return date_time_core_is_valid();
   1842c:	f000 f89e 	bl	1856c <date_time_core_is_valid>
	if (!date_time_is_valid()) {
   18430:	b960      	cbnz	r0, 1844c <date_time_now+0x40>
   18432:	4b09      	ldr	r3, [pc, #36]	; (18458 <date_time_now+0x4c>)
   18434:	4909      	ldr	r1, [pc, #36]	; (1845c <date_time_now+0x50>)
		LOG_WRN("Valid time not currently available");
   18436:	480b      	ldr	r0, [pc, #44]	; (18464 <date_time_now+0x58>)
   18438:	1ac9      	subs	r1, r1, r3
   1843a:	08c9      	lsrs	r1, r1, #3
   1843c:	0189      	lsls	r1, r1, #6
   1843e:	f041 0102 	orr.w	r1, r1, #2
   18442:	f006 fee3 	bl	1f20c <log_0>
		return -ENODATA;
   18446:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1844a:	e7ee      	b.n	1842a <date_time_now+0x1e>
	err = date_time_core_now(unix_time_ms);
   1844c:	4620      	mov	r0, r4
}
   1844e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = date_time_core_now(unix_time_ms);
   18452:	f000 b857 	b.w	18504 <date_time_core_now>
   18456:	bf00      	nop
   18458:	00022fd8 	.word	0x00022fd8
   1845c:	00023000 	.word	0x00023000
   18460:	00024c25 	.word	0x00024c25
   18464:	00024d5f 	.word	0x00024d5f

00018468 <date_time_core_notify_event>:
static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   18468:	28ff      	cmp	r0, #255	; 0xff
		evt.type = time_source;
   1846a:	bf1c      	itt	ne
   1846c:	4b03      	ldrne	r3, [pc, #12]	; (1847c <date_time_core_notify_event+0x14>)
   1846e:	7018      	strbne	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   18470:	4b03      	ldr	r3, [pc, #12]	; (18480 <date_time_core_notify_event+0x18>)
   18472:	681b      	ldr	r3, [r3, #0]
   18474:	b10b      	cbz	r3, 1847a <date_time_core_notify_event+0x12>
		app_evt_handler(&evt);
   18476:	4801      	ldr	r0, [pc, #4]	; (1847c <date_time_core_notify_event+0x14>)
   18478:	4718      	bx	r3
	}
}
   1847a:	4770      	bx	lr
   1847c:	2000f40c 	.word	0x2000f40c
   18480:	2000d374 	.word	0x2000d374

00018484 <date_time_lte_ind_handler>:
{
	k_sem_give(&time_fetch_sem);
}

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   18484:	b510      	push	{r4, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   18486:	7803      	ldrb	r3, [r0, #0]
   18488:	b9e3      	cbnz	r3, 184c4 <date_time_lte_ind_handler+0x40>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   1848a:	7a03      	ldrb	r3, [r0, #8]
   1848c:	3b01      	subs	r3, #1
   1848e:	2b07      	cmp	r3, #7
   18490:	d818      	bhi.n	184c4 <date_time_lte_ind_handler+0x40>
   18492:	e8df f003 	tbb	[pc, r3]
   18496:	1304      	.short	0x1304
   18498:	17041717 	.word	0x17041717
   1849c:	0417      	.short	0x0417
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid() && !k_work_delayable_is_pending(&time_work)) {
   1849e:	f008 fc91 	bl	20dc4 <date_time_is_valid>
   184a2:	b978      	cbnz	r0, 184c4 <date_time_lte_ind_handler+0x40>
	return k_work_delayable_busy_get(dwork) != 0;
   184a4:	4808      	ldr	r0, [pc, #32]	; (184c8 <date_time_lte_ind_handler+0x44>)
   184a6:	f009 fd71 	bl	21f8c <k_work_delayable_busy_get>
   184aa:	b958      	cbnz	r0, 184c4 <date_time_lte_ind_handler+0x40>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   184ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_schedule(&time_work, K_SECONDS(1));
   184b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   184b4:	2300      	movs	r3, #0
   184b6:	4804      	ldr	r0, [pc, #16]	; (184c8 <date_time_lte_ind_handler+0x44>)
   184b8:	f004 bb7a 	b.w	1cbb0 <k_work_schedule>
}
   184bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			date_time_modem_xtime_subscribe();
   184c0:	f000 bad0 	b.w	18a64 <date_time_modem_xtime_subscribe>
}
   184c4:	bd10      	pop	{r4, pc}
   184c6:	bf00      	nop
   184c8:	2000c500 	.word	0x2000c500

000184cc <date_time_handler>:
	z_impl_k_sem_give(sem);
   184cc:	4801      	ldr	r0, [pc, #4]	; (184d4 <date_time_handler+0x8>)
   184ce:	f004 b9c7 	b.w	1c860 <z_impl_k_sem_give>
   184d2:	bf00      	nop
   184d4:	2000c8bc 	.word	0x2000c8bc

000184d8 <date_time_core_schedule_update>:
{
   184d8:	b510      	push	{r4, lr}
   184da:	4806      	ldr	r0, [pc, #24]	; (184f4 <date_time_core_schedule_update+0x1c>)
   184dc:	f009 fd56 	bl	21f8c <k_work_delayable_busy_get>
	if (CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS > 0 &&
   184e0:	b938      	cbnz	r0, 184f2 <date_time_core_schedule_update+0x1a>
}
   184e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   184e6:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
   184ea:	2300      	movs	r3, #0
   184ec:	4801      	ldr	r0, [pc, #4]	; (184f4 <date_time_core_schedule_update+0x1c>)
   184ee:	f004 bb5f 	b.w	1cbb0 <k_work_schedule>
}
   184f2:	bd10      	pop	{r4, pc}
   184f4:	2000c500 	.word	0x2000c500

000184f8 <date_time_core_init>:

void date_time_core_init(void)
{
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   184f8:	4801      	ldr	r0, [pc, #4]	; (18500 <date_time_core_init+0x8>)
   184fa:	f7fe bdef 	b.w	170dc <lte_lc_register_handler>
   184fe:	bf00      	nop
   18500:	00018485 	.word	0x00018485

00018504 <date_time_core_now>:
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

int date_time_core_now(int64_t *unix_time_ms)
{
   18504:	b530      	push	{r4, r5, lr}
   18506:	4604      	mov	r4, r0
   18508:	b085      	sub	sp, #20
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   1850a:	2001      	movs	r0, #1
   1850c:	4669      	mov	r1, sp
   1850e:	f7f8 fefb 	bl	11308 <z_impl_clock_gettime>
	int err;
	struct timespec tp;

	err = clock_gettime(CLOCK_REALTIME, &tp);
	if (err) {
   18512:	b188      	cbz	r0, 18538 <date_time_core_now+0x34>
   18514:	4a11      	ldr	r2, [pc, #68]	; (1855c <date_time_core_now+0x58>)
   18516:	4c12      	ldr	r4, [pc, #72]	; (18560 <date_time_core_now+0x5c>)
   18518:	1aa4      	subs	r4, r4, r2
		LOG_WRN("clock_gettime failed, errno %d", errno);
   1851a:	f007 fd13 	bl	1ff44 <__errno>
   1851e:	08e4      	lsrs	r4, r4, #3
   18520:	01a4      	lsls	r4, r4, #6
   18522:	f044 0402 	orr.w	r4, r4, #2
   18526:	6801      	ldr	r1, [r0, #0]
   18528:	4622      	mov	r2, r4
   1852a:	480e      	ldr	r0, [pc, #56]	; (18564 <date_time_core_now+0x60>)
   1852c:	f006 fe7b 	bl	1f226 <log_1>
		return -ENODATA;
   18530:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;

	return 0;
}
   18534:	b005      	add	sp, #20
   18536:	bd30      	pop	{r4, r5, pc}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;
   18538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1853c:	9a00      	ldr	r2, [sp, #0]
   1853e:	9d01      	ldr	r5, [sp, #4]
   18540:	fba2 2301 	umull	r2, r3, r2, r1
   18544:	fb01 3305 	mla	r3, r1, r5, r3
   18548:	9902      	ldr	r1, [sp, #8]
   1854a:	4d07      	ldr	r5, [pc, #28]	; (18568 <date_time_core_now+0x64>)
   1854c:	fb91 f1f5 	sdiv	r1, r1, r5
   18550:	1852      	adds	r2, r2, r1
   18552:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   18556:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   1855a:	e7eb      	b.n	18534 <date_time_core_now+0x30>
   1855c:	00022fd8 	.word	0x00022fd8
   18560:	00023000 	.word	0x00023000
   18564:	00024d8c 	.word	0x00024d8c
   18568:	000f4240 	.word	0x000f4240

0001856c <date_time_core_is_valid>:
	return date_time_last_update_uptime;
}

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   1856c:	4b03      	ldr	r3, [pc, #12]	; (1857c <date_time_core_is_valid+0x10>)
   1856e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18572:	4313      	orrs	r3, r2
}
   18574:	bf14      	ite	ne
   18576:	2001      	movne	r0, #1
   18578:	2000      	moveq	r0, #0
   1857a:	4770      	bx	lr
   1857c:	2000cd68 	.word	0x2000cd68

00018580 <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   18580:	b5d0      	push	{r4, r6, r7, lr}
	if (date_time_last_update_uptime == 0) {
   18582:	4c11      	ldr	r4, [pc, #68]	; (185c8 <date_time_core_current_check+0x48>)
   18584:	e9d4 2300 	ldrd	r2, r3, [r4]
   18588:	4313      	orrs	r3, r2
   1858a:	d018      	beq.n	185be <date_time_core_current_check+0x3e>
	return z_impl_k_uptime_ticks();
   1858c:	f009 fe6b 	bl	22266 <z_impl_k_uptime_ticks>
   18590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18594:	460a      	mov	r2, r1
   18596:	fba0 0103 	umull	r0, r1, r0, r3
   1859a:	fb03 1102 	mla	r1, r3, r2, r1
   1859e:	0bc3      	lsrs	r3, r0, #15
   185a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   185a4:	0bca      	lsrs	r2, r1, #15
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   185a6:	e9d4 1000 	ldrd	r1, r0, [r4]
   185aa:	1a5e      	subs	r6, r3, r1
   185ac:	f04f 0300 	mov.w	r3, #0
   185b0:	eb62 0700 	sbc.w	r7, r2, r0
   185b4:	4a05      	ldr	r2, [pc, #20]	; (185cc <date_time_core_current_check+0x4c>)
   185b6:	4296      	cmp	r6, r2
   185b8:	eb77 0303 	sbcs.w	r3, r7, r3
   185bc:	db02      	blt.n	185c4 <date_time_core_current_check+0x44>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
   185be:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   185c2:	bdd0      	pop	{r4, r6, r7, pc}
	return 0;
   185c4:	2000      	movs	r0, #0
   185c6:	e7fc      	b.n	185c2 <date_time_core_current_check+0x42>
   185c8:	2000cd68 	.word	0x2000cd68
   185cc:	0036ee80 	.word	0x0036ee80

000185d0 <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   185d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185d4:	b08e      	sub	sp, #56	; 0x38
   185d6:	4607      	mov	r7, r0
   185d8:	460e      	mov	r6, r1
   185da:	4690      	mov	r8, r2
	struct timespec tp = { 0 };
   185dc:	2100      	movs	r1, #0
   185de:	2210      	movs	r2, #16
   185e0:	4668      	mov	r0, sp
   185e2:	f00a f8d8 	bl	22796 <memset>
	struct tm ltm = { 0 };
   185e6:	2224      	movs	r2, #36	; 0x24
   185e8:	2100      	movs	r1, #0
   185ea:	a805      	add	r0, sp, #20
   185ec:	f00a f8d3 	bl	22796 <memset>
   185f0:	f009 fe39 	bl	22266 <z_impl_k_uptime_ticks>
   185f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   185f8:	fba0 4503 	umull	r4, r5, r0, r3
   185fc:	fb03 5501 	mla	r5, r3, r1, r5
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   18600:	4a1d      	ldr	r2, [pc, #116]	; (18678 <date_time_core_store+0xa8>)
   18602:	0be3      	lsrs	r3, r4, #15
   18604:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
   18608:	0be9      	lsrs	r1, r5, #15
   1860a:	e9c2 3100 	strd	r3, r1, [r2]

	date_time_core_schedule_update();
   1860e:	f7ff ff63 	bl	184d8 <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   18612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18616:	2300      	movs	r3, #0
   18618:	4638      	mov	r0, r7
   1861a:	4631      	mov	r1, r6
   1861c:	f7f8 fbf0 	bl	10e00 <__aeabi_ldivmod>
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   18620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	tp.tv_sec = curr_time_ms / 1000;
   18624:	e9cd 0100 	strd	r0, r1, [sp]
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   18628:	2300      	movs	r3, #0
   1862a:	4638      	mov	r0, r7
   1862c:	4631      	mov	r1, r6
   1862e:	f7f8 fbe7 	bl	10e00 <__aeabi_ldivmod>
   18632:	4b12      	ldr	r3, [pc, #72]	; (1867c <date_time_core_store+0xac>)

	ret = clock_settime(CLOCK_REALTIME, &tp);
   18634:	4669      	mov	r1, sp
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   18636:	4353      	muls	r3, r2
	ret = clock_settime(CLOCK_REALTIME, &tp);
   18638:	2001      	movs	r0, #1
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   1863a:	9302      	str	r3, [sp, #8]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   1863c:	f7f8 fec4 	bl	113c8 <clock_settime>
	if (ret != 0) {
   18640:	4601      	mov	r1, r0
   18642:	b178      	cbz	r0, 18664 <date_time_core_store+0x94>
   18644:	4b0e      	ldr	r3, [pc, #56]	; (18680 <date_time_core_store+0xb0>)
   18646:	4a0f      	ldr	r2, [pc, #60]	; (18684 <date_time_core_store+0xb4>)
		LOG_ERR("Could not set system time, %d", ret);
   18648:	480f      	ldr	r0, [pc, #60]	; (18688 <date_time_core_store+0xb8>)
   1864a:	1ad2      	subs	r2, r2, r3
   1864c:	08d2      	lsrs	r2, r2, #3
   1864e:	0192      	lsls	r2, r2, #6
   18650:	f042 0201 	orr.w	r2, r2, #1
   18654:	f006 fde7 	bl	1f226 <log_1>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   18658:	2003      	movs	r0, #3

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
#endif

	date_time_core_notify_event(time_source);
   1865a:	f7ff ff05 	bl	18468 <date_time_core_notify_event>
}
   1865e:	b00e      	add	sp, #56	; 0x38
   18660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	gmtime_r(&tp.tv_sec, &ltm);
   18664:	a905      	add	r1, sp, #20
   18666:	4668      	mov	r0, sp
   18668:	f005 f90e 	bl	1d888 <gmtime_r>
	date_time_modem_store(&ltm);
   1866c:	a805      	add	r0, sp, #20
   1866e:	f000 f9c5 	bl	189fc <date_time_modem_store>
	date_time_core_notify_event(time_source);
   18672:	4640      	mov	r0, r8
   18674:	e7f1      	b.n	1865a <date_time_core_store+0x8a>
   18676:	bf00      	nop
   18678:	2000cd68 	.word	0x2000cd68
   1867c:	000f4240 	.word	0x000f4240
   18680:	00022fd8 	.word	0x00022fd8
   18684:	00023000 	.word	0x00023000
   18688:	00024dab 	.word	0x00024dab

0001868c <date_time_update_thread>:
{
   1868c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		int64_t date_time_ms_modem = 0;
   1868e:	2400      	movs	r4, #0
   18690:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   18692:	4e15      	ldr	r6, [pc, #84]	; (186e8 <date_time_update_thread+0x5c>)
   18694:	f04f 32ff 	mov.w	r2, #4294967295
   18698:	f04f 33ff 	mov.w	r3, #4294967295
   1869c:	4630      	mov	r0, r6
   1869e:	f004 f905 	bl	1c8ac <z_impl_k_sem_take>
		err = date_time_core_current_check();
   186a2:	f7ff ff6d 	bl	18580 <date_time_core_current_check>
		if (err == 0) {
   186a6:	b928      	cbnz	r0, 186b4 <date_time_update_thread+0x28>
			date_time_core_schedule_update();
   186a8:	f7ff ff16 	bl	184d8 <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   186ac:	20ff      	movs	r0, #255	; 0xff
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   186ae:	f7ff fedb 	bl	18468 <date_time_core_notify_event>
   186b2:	e7ef      	b.n	18694 <date_time_update_thread+0x8>
		err = date_time_modem_get(&date_time_ms_modem);
   186b4:	4668      	mov	r0, sp
		int64_t date_time_ms_modem = 0;
   186b6:	e9cd 4500 	strd	r4, r5, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   186ba:	f000 f95b 	bl	18974 <date_time_modem_get>
		if (err == 0) {
   186be:	4602      	mov	r2, r0
   186c0:	b920      	cbnz	r0, 186cc <date_time_update_thread+0x40>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   186c2:	e9dd 0100 	ldrd	r0, r1, [sp]
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   186c6:	f7ff ff83 	bl	185d0 <date_time_core_store>
			continue;
   186ca:	e7e3      	b.n	18694 <date_time_update_thread+0x8>
		err = date_time_ntp_get(&date_time_ms_ntp);
   186cc:	a802      	add	r0, sp, #8
		int64_t date_time_ms_ntp = 0;
   186ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   186d2:	f000 f80b 	bl	186ec <date_time_ntp_get>
		if (err == 0) {
   186d6:	b918      	cbnz	r0, 186e0 <date_time_update_thread+0x54>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   186d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   186dc:	2201      	movs	r2, #1
   186de:	e7f2      	b.n	186c6 <date_time_update_thread+0x3a>
		date_time_core_schedule_update();
   186e0:	f7ff fefa 	bl	184d8 <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   186e4:	2003      	movs	r0, #3
   186e6:	e7e2      	b.n	186ae <date_time_update_thread+0x22>
   186e8:	2000c8bc 	.word	0x2000c8bc

000186ec <date_time_ntp_get>:
	return false;
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   186ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186f0:	b09b      	sub	sp, #108	; 0x6c
   186f2:	4607      	mov	r7, r0
	err = lte_lc_nw_reg_status_get(&reg_status);
   186f4:	a806      	add	r0, sp, #24
   186f6:	f7fe fe9f 	bl	17438 <lte_lc_nw_reg_status_get>
	if (err) {
   186fa:	4606      	mov	r6, r0
   186fc:	b168      	cbz	r0, 1871a <date_time_ntp_get+0x2e>
   186fe:	4a3d      	ldr	r2, [pc, #244]	; (187f4 <date_time_ntp_get+0x108>)
   18700:	4b3d      	ldr	r3, [pc, #244]	; (187f8 <date_time_ntp_get+0x10c>)
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   18702:	4601      	mov	r1, r0
   18704:	1ad2      	subs	r2, r2, r3
   18706:	08d2      	lsrs	r2, r2, #3
   18708:	0192      	lsls	r2, r2, #6
   1870a:	483c      	ldr	r0, [pc, #240]	; (187fc <date_time_ntp_get+0x110>)
   1870c:	f042 0202 	orr.w	r2, r2, #2
   18710:	f006 fd89 	bl	1f226 <log_1>
		return 0;
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
   18714:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   18718:	e058      	b.n	187cc <date_time_ntp_get+0xe0>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   1871a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1871e:	2b08      	cmp	r3, #8
   18720:	d003      	beq.n	1872a <date_time_ntp_get+0x3e>
   18722:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   18726:	2b01      	cmp	r3, #1
   18728:	d1f4      	bne.n	18714 <date_time_ntp_get+0x28>
   1872a:	4d32      	ldr	r5, [pc, #200]	; (187f4 <date_time_ntp_get+0x108>)
   1872c:	4932      	ldr	r1, [pc, #200]	; (187f8 <date_time_ntp_get+0x10c>)
   1872e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 18810 <date_time_ntp_get+0x124>
   18732:	1a6d      	subs	r5, r5, r1
	return zsock_getaddrinfo(host, service, hints, res);
   18734:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 18814 <date_time_ntp_get+0x128>
	err = sntp_query(&sntp_ctx, timeout, time);
   18738:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1880c <date_time_ntp_get+0x120>
		LOG_WRN("sntp_query, error: %d", err);
   1873c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 18818 <date_time_ntp_get+0x12c>
   18740:	08ed      	lsrs	r5, r5, #3
	struct addrinfo hints = {
   18742:	2250      	movs	r2, #80	; 0x50
   18744:	2100      	movs	r1, #0
   18746:	a806      	add	r0, sp, #24
		err =  sntp_time_request(servers[i],
   18748:	f858 4b04 	ldr.w	r4, [r8], #4
	struct addrinfo hints = {
   1874c:	f00a f823 	bl	22796 <memset>
   18750:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18754:	4649      	mov	r1, r9
   18756:	9307      	str	r3, [sp, #28]
   18758:	4620      	mov	r0, r4
   1875a:	466b      	mov	r3, sp
   1875c:	aa06      	add	r2, sp, #24
   1875e:	f007 fabc 	bl	1fcda <zsock_getaddrinfo>
	if (err) {
   18762:	4601      	mov	r1, r0
   18764:	b180      	cbz	r0, 18788 <date_time_ntp_get+0x9c>
		LOG_WRN("getaddrinfo, error: %d", err);
   18766:	01aa      	lsls	r2, r5, #6
   18768:	4825      	ldr	r0, [pc, #148]	; (18800 <date_time_ntp_get+0x114>)
   1876a:	f042 0202 	orr.w	r2, r2, #2
   1876e:	f006 fd5a 	bl	1f226 <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   18772:	2e01      	cmp	r6, #1
   18774:	d106      	bne.n	18784 <date_time_ntp_get+0x98>
	LOG_WRN("Did not get time from any NTP server");
   18776:	01a9      	lsls	r1, r5, #6
   18778:	4822      	ldr	r0, [pc, #136]	; (18804 <date_time_ntp_get+0x118>)
   1877a:	f041 0102 	orr.w	r1, r1, #2
   1877e:	f006 fd45 	bl	1f20c <log_0>
   18782:	e7c7      	b.n	18714 <date_time_ntp_get+0x28>
   18784:	2601      	movs	r6, #1
   18786:	e7dc      	b.n	18742 <date_time_ntp_get+0x56>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   18788:	9b00      	ldr	r3, [sp, #0]
   1878a:	a801      	add	r0, sp, #4
   1878c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   18790:	f007 fa6f 	bl	1fc72 <sntp_init>
	if (err) {
   18794:	4604      	mov	r4, r0
   18796:	b1e8      	cbz	r0, 187d4 <date_time_ntp_get+0xe8>
		LOG_WRN("sntp_init, error: %d", err);
   18798:	4601      	mov	r1, r0
   1879a:	01aa      	lsls	r2, r5, #6
   1879c:	481a      	ldr	r0, [pc, #104]	; (18808 <date_time_ntp_get+0x11c>)
   1879e:	f042 0202 	orr.w	r2, r2, #2
		LOG_WRN("sntp_query, error: %d", err);
   187a2:	f006 fd40 	bl	1f226 <log_1>
	zsock_freeaddrinfo(ai);
   187a6:	9800      	ldr	r0, [sp, #0]
   187a8:	f007 fa99 	bl	1fcde <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   187ac:	a801      	add	r0, sp, #4
   187ae:	f007 fa8f 	bl	1fcd0 <sntp_close>
		if (err) {
   187b2:	2c00      	cmp	r4, #0
   187b4:	d1dd      	bne.n	18772 <date_time_ntp_get+0x86>
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   187b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   187ba:	4b14      	ldr	r3, [pc, #80]	; (1880c <date_time_ntp_get+0x120>)
   187bc:	681a      	ldr	r2, [r3, #0]
   187be:	6858      	ldr	r0, [r3, #4]
   187c0:	fba2 2301 	umull	r2, r3, r2, r1
   187c4:	fb01 3300 	mla	r3, r1, r0, r3
   187c8:	e9c7 2300 	strd	r2, r3, [r7]
}
   187cc:	4620      	mov	r0, r4
   187ce:	b01b      	add	sp, #108	; 0x6c
   187d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = sntp_query(&sntp_ctx, timeout, time);
   187d4:	4652      	mov	r2, sl
   187d6:	f241 3188 	movw	r1, #5000	; 0x1388
   187da:	a801      	add	r0, sp, #4
   187dc:	f7f8 fcf0 	bl	111c0 <sntp_query>
	if (err) {
   187e0:	4604      	mov	r4, r0
   187e2:	2800      	cmp	r0, #0
   187e4:	d0df      	beq.n	187a6 <date_time_ntp_get+0xba>
		LOG_WRN("sntp_query, error: %d", err);
   187e6:	01aa      	lsls	r2, r5, #6
   187e8:	4601      	mov	r1, r0
   187ea:	f042 0202 	orr.w	r2, r2, #2
   187ee:	4658      	mov	r0, fp
   187f0:	e7d7      	b.n	187a2 <date_time_ntp_get+0xb6>
   187f2:	bf00      	nop
   187f4:	00023000 	.word	0x00023000
   187f8:	00022fd8 	.word	0x00022fd8
   187fc:	00024dd5 	.word	0x00024dd5
   18800:	00024e13 	.word	0x00024e13
   18804:	00024e55 	.word	0x00024e55
   18808:	00024e2a 	.word	0x00024e2a
   1880c:	2000cd70 	.word	0x2000cd70
   18810:	000233bc 	.word	0x000233bc
   18814:	00024e0f 	.word	0x00024e0f
   18818:	00024e3f 	.word	0x00024e3f

0001881c <date_time_at_xtime_handler>:
	/* 4 MSBs represent decimal that should be added as is. */
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
}

static void date_time_at_xtime_handler(const char *notif)
{
   1881c:	b530      	push	{r4, r5, lr}
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   1881e:	4604      	mov	r4, r0
{
   18820:	b08d      	sub	sp, #52	; 0x34
	if (notif == NULL) {
   18822:	b1b0      	cbz	r0, 18852 <date_time_at_xtime_handler+0x36>
		return;
	}
	modem_valid_network_time = true;
   18824:	2201      	movs	r2, #1
   18826:	4b4c      	ldr	r3, [pc, #304]	; (18958 <date_time_at_xtime_handler+0x13c>)
   18828:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   1882a:	f7ff fea9 	bl	18580 <date_time_core_current_check>
	if (err == 0) {
   1882e:	b180      	cbz	r0, 18852 <date_time_at_xtime_handler+0x36>
	 *                 and received from network.
	 * Examples of modem time response:
	 * %XTIME: "08","81109251714208","01"
	 * %XTIME: ,"81109251714208",
	 */
	time_str_start = strchr(notif, ',');
   18830:	212c      	movs	r1, #44	; 0x2c
   18832:	4620      	mov	r0, r4
   18834:	f009 ffb9 	bl	227aa <strchr>
	if (time_str_start == NULL) {
   18838:	4605      	mov	r5, r0
   1883a:	b960      	cbnz	r0, 18856 <date_time_at_xtime_handler+0x3a>
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   1883c:	4621      	mov	r1, r4
   1883e:	4a47      	ldr	r2, [pc, #284]	; (1895c <date_time_at_xtime_handler+0x140>)
   18840:	4b47      	ldr	r3, [pc, #284]	; (18960 <date_time_at_xtime_handler+0x144>)
   18842:	4848      	ldr	r0, [pc, #288]	; (18964 <date_time_at_xtime_handler+0x148>)
   18844:	1ad2      	subs	r2, r2, r3
   18846:	08d2      	lsrs	r2, r2, #3
   18848:	0192      	lsls	r2, r2, #6
   1884a:	f042 0201 	orr.w	r2, r2, #1
	if (strlen(time_str_start) < 17) {
		LOG_ERR("%%XTIME notification too short: %s", notif);
		return;
	}
	if (*(time_str_start + 1) != '"') {
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   1884e:	f006 fcea 	bl	1f226 <log_1>
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   18852:	b00d      	add	sp, #52	; 0x34
   18854:	bd30      	pop	{r4, r5, pc}
	if (strlen(time_str_start) < 17) {
   18856:	f7f8 fcab 	bl	111b0 <strlen>
   1885a:	2810      	cmp	r0, #16
   1885c:	d809      	bhi.n	18872 <date_time_at_xtime_handler+0x56>
   1885e:	4a3f      	ldr	r2, [pc, #252]	; (1895c <date_time_at_xtime_handler+0x140>)
   18860:	4b3f      	ldr	r3, [pc, #252]	; (18960 <date_time_at_xtime_handler+0x144>)
		LOG_ERR("%%XTIME notification too short: %s", notif);
   18862:	4621      	mov	r1, r4
   18864:	1ad2      	subs	r2, r2, r3
   18866:	08d2      	lsrs	r2, r2, #3
   18868:	0192      	lsls	r2, r2, #6
   1886a:	483f      	ldr	r0, [pc, #252]	; (18968 <date_time_at_xtime_handler+0x14c>)
   1886c:	f042 0201 	orr.w	r2, r2, #1
   18870:	e7ed      	b.n	1884e <date_time_at_xtime_handler+0x32>
	if (*(time_str_start + 1) != '"') {
   18872:	786b      	ldrb	r3, [r5, #1]
   18874:	2b22      	cmp	r3, #34	; 0x22
   18876:	d009      	beq.n	1888c <date_time_at_xtime_handler+0x70>
   18878:	4a38      	ldr	r2, [pc, #224]	; (1895c <date_time_at_xtime_handler+0x140>)
   1887a:	4b39      	ldr	r3, [pc, #228]	; (18960 <date_time_at_xtime_handler+0x144>)
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   1887c:	4621      	mov	r1, r4
   1887e:	1ad2      	subs	r2, r2, r3
   18880:	08d2      	lsrs	r2, r2, #3
   18882:	0192      	lsls	r2, r2, #6
   18884:	4839      	ldr	r0, [pc, #228]	; (1896c <date_time_at_xtime_handler+0x150>)
   18886:	f042 0201 	orr.w	r2, r2, #1
   1888a:	e7e0      	b.n	1884e <date_time_at_xtime_handler+0x32>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   1888c:	210c      	movs	r1, #12
   1888e:	2306      	movs	r3, #6
   18890:	aa01      	add	r2, sp, #4
   18892:	1ca8      	adds	r0, r5, #2
   18894:	f006 f952 	bl	1eb3c <hex2bin>
	if (time_buf_len < sizeof(time_buf)) {
   18898:	2805      	cmp	r0, #5
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   1889a:	4601      	mov	r1, r0
	if (time_buf_len < sizeof(time_buf)) {
   1889c:	d80a      	bhi.n	188b4 <date_time_at_xtime_handler+0x98>
   1889e:	4a30      	ldr	r2, [pc, #192]	; (18960 <date_time_at_xtime_handler+0x144>)
   188a0:	4b2e      	ldr	r3, [pc, #184]	; (1895c <date_time_at_xtime_handler+0x140>)
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   188a2:	4833      	ldr	r0, [pc, #204]	; (18970 <date_time_at_xtime_handler+0x154>)
   188a4:	1a9b      	subs	r3, r3, r2
   188a6:	08db      	lsrs	r3, r3, #3
   188a8:	019b      	lsls	r3, r3, #6
   188aa:	4622      	mov	r2, r4
   188ac:	f043 0301 	orr.w	r3, r3, #1
   188b0:	f006 fccd 	bl	1f24e <log_2>
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   188b4:	f89d 1006 	ldrb.w	r1, [sp, #6]
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   188b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   188bc:	f001 000f 	and.w	r0, r1, #15
   188c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   188c4:	0909      	lsrs	r1, r1, #4
   188c6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   188ca:	b2c9      	uxtb	r1, r1
   188cc:	9106      	str	r1, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   188ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   188d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   188d6:	f001 000f 	and.w	r0, r1, #15
   188da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   188de:	0909      	lsrs	r1, r1, #4
   188e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   188e4:	b2c9      	uxtb	r1, r1
   188e6:	9105      	str	r1, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   188e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   188ec:	f001 000f 	and.w	r0, r1, #15
   188f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   188f4:	0909      	lsrs	r1, r1, #4
   188f6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   188fa:	b2c9      	uxtb	r1, r1
   188fc:	9104      	str	r1, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   188fe:	f89d 1009 	ldrb.w	r1, [sp, #9]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   18902:	f001 000f 	and.w	r0, r1, #15
   18906:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1890a:	0909      	lsrs	r1, r1, #4
   1890c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   18910:	b2c9      	uxtb	r1, r1
   18912:	9103      	str	r1, [sp, #12]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   18914:	f002 010f 	and.w	r1, r2, #15
   18918:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1891c:	0912      	lsrs	r2, r2, #4
   1891e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   18922:	b2d2      	uxtb	r2, r2
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   18924:	3264      	adds	r2, #100	; 0x64
   18926:	9208      	str	r2, [sp, #32]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   18928:	f003 020f 	and.w	r2, r3, #15
   1892c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   18930:	091b      	lsrs	r3, r3, #4
   18932:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   18936:	b2db      	uxtb	r3, r3
	date_time.tm_mon = date_time.tm_mon - 1;
   18938:	3b01      	subs	r3, #1
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   1893a:	a803      	add	r0, sp, #12
	date_time.tm_mon = date_time.tm_mon - 1;
   1893c:	9307      	str	r3, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   1893e:	f7f9 fccf 	bl	122e0 <timeutil_timegm64>
   18942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18946:	460a      	mov	r2, r1
   18948:	fba0 0103 	umull	r0, r1, r0, r3
   1894c:	fb03 1102 	mla	r1, r3, r2, r1
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   18950:	2200      	movs	r2, #0
   18952:	f7ff fe3d 	bl	185d0 <date_time_core_store>
   18956:	e77c      	b.n	18852 <date_time_at_xtime_handler+0x36>
   18958:	2000f40d 	.word	0x2000f40d
   1895c:	00023000 	.word	0x00023000
   18960:	00022fd8 	.word	0x00022fd8
   18964:	00024e95 	.word	0x00024e95
   18968:	00024ec2 	.word	0x00024ec2
   1896c:	00024ee5 	.word	0x00024ee5
   18970:	00024f1c 	.word	0x00024f1c

00018974 <date_time_modem_get>:
{
   18974:	b530      	push	{r4, r5, lr}
	if (!modem_valid_network_time) {
   18976:	4b1b      	ldr	r3, [pc, #108]	; (189e4 <date_time_modem_get+0x70>)
{
   18978:	4604      	mov	r4, r0
	if (!modem_valid_network_time) {
   1897a:	781b      	ldrb	r3, [r3, #0]
{
   1897c:	b08f      	sub	sp, #60	; 0x3c
	if (!modem_valid_network_time) {
   1897e:	b1d3      	cbz	r3, 189b6 <date_time_modem_get+0x42>
	rc = nrf_modem_at_scanf("AT+CCLK?",
   18980:	ab06      	add	r3, sp, #24
   18982:	9302      	str	r3, [sp, #8]
   18984:	ab07      	add	r3, sp, #28
   18986:	9301      	str	r3, [sp, #4]
   18988:	ad05      	add	r5, sp, #20
   1898a:	ab08      	add	r3, sp, #32
   1898c:	4916      	ldr	r1, [pc, #88]	; (189e8 <date_time_modem_get+0x74>)
   1898e:	9300      	str	r3, [sp, #0]
   18990:	4816      	ldr	r0, [pc, #88]	; (189ec <date_time_modem_get+0x78>)
   18992:	9503      	str	r5, [sp, #12]
   18994:	ab09      	add	r3, sp, #36	; 0x24
   18996:	aa0a      	add	r2, sp, #40	; 0x28
   18998:	f003 f91a 	bl	1bbd0 <nrf_modem_at_scanf>
	if (rc != 6) {
   1899c:	2806      	cmp	r0, #6
	rc = nrf_modem_at_scanf("AT+CCLK?",
   1899e:	4601      	mov	r1, r0
	if (rc != 6) {
   189a0:	d00c      	beq.n	189bc <date_time_modem_get+0x48>
   189a2:	4a13      	ldr	r2, [pc, #76]	; (189f0 <date_time_modem_get+0x7c>)
   189a4:	4b13      	ldr	r3, [pc, #76]	; (189f4 <date_time_modem_get+0x80>)
		LOG_WRN("Did not get time from cellular network (error: %d). "
   189a6:	4814      	ldr	r0, [pc, #80]	; (189f8 <date_time_modem_get+0x84>)
   189a8:	1ad2      	subs	r2, r2, r3
   189aa:	08d2      	lsrs	r2, r2, #3
   189ac:	0192      	lsls	r2, r2, #6
   189ae:	f042 0202 	orr.w	r2, r2, #2
   189b2:	f006 fc38 	bl	1f226 <log_1>
		return -ENODATA;
   189b6:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   189ba:	e011      	b.n	189e0 <date_time_modem_get+0x6c>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   189bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   189be:	4628      	mov	r0, r5
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   189c0:	3364      	adds	r3, #100	; 0x64
   189c2:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   189c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   189c6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	date_time.tm_mon = date_time.tm_mon - 1;
   189ca:	3b01      	subs	r3, #1
   189cc:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   189ce:	f7f9 fc87 	bl	122e0 <timeutil_timegm64>
   189d2:	fba0 2305 	umull	r2, r3, r0, r5
	return 0;
   189d6:	2000      	movs	r0, #0
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   189d8:	fb05 3301 	mla	r3, r5, r1, r3
   189dc:	e9c4 2300 	strd	r2, r3, [r4]
}
   189e0:	b00f      	add	sp, #60	; 0x3c
   189e2:	bd30      	pop	{r4, r5, pc}
   189e4:	2000f40d 	.word	0x2000f40d
   189e8:	00024f4e 	.word	0x00024f4e
   189ec:	00024f68 	.word	0x00024f68
   189f0:	00023000 	.word	0x00023000
   189f4:	00022fd8 	.word	0x00022fd8
   189f8:	00024f71 	.word	0x00024f71

000189fc <date_time_modem_store>:
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) */

void date_time_modem_store(struct tm *ltm)
{
   189fc:	b530      	push	{r4, r5, lr}
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   189fe:	4b14      	ldr	r3, [pc, #80]	; (18a50 <date_time_modem_store+0x54>)
{
   18a00:	b085      	sub	sp, #20
	if (!modem_valid_network_time) {
   18a02:	781b      	ldrb	r3, [r3, #0]
   18a04:	bb0b      	cbnz	r3, 18a4a <date_time_modem_store+0x4e>
		/* Time zone is not known and it's mandatory so setting to zero.
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   18a06:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
   18a0a:	2464      	movs	r4, #100	; 0x64
   18a0c:	fb91 f5f4 	sdiv	r5, r1, r4
   18a10:	9303      	str	r3, [sp, #12]
   18a12:	6803      	ldr	r3, [r0, #0]
   18a14:	fb04 1115 	mls	r1, r4, r5, r1
   18a18:	9302      	str	r3, [sp, #8]
   18a1a:	6843      	ldr	r3, [r0, #4]
   18a1c:	3201      	adds	r2, #1
   18a1e:	9301      	str	r3, [sp, #4]
   18a20:	6883      	ldr	r3, [r0, #8]
   18a22:	9300      	str	r3, [sp, #0]
   18a24:	68c3      	ldr	r3, [r0, #12]
   18a26:	480b      	ldr	r0, [pc, #44]	; (18a54 <date_time_modem_store+0x58>)
   18a28:	f003 f844 	bl	1bab4 <nrf_modem_at_printf>
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   18a2c:	4601      	mov	r1, r0
   18a2e:	b160      	cbz	r0, 18a4a <date_time_modem_store+0x4e>
   18a30:	4b09      	ldr	r3, [pc, #36]	; (18a58 <date_time_modem_store+0x5c>)
   18a32:	4a0a      	ldr	r2, [pc, #40]	; (18a5c <date_time_modem_store+0x60>)
			LOG_ERR("Setting modem time failed, %d", ret);
   18a34:	480a      	ldr	r0, [pc, #40]	; (18a60 <date_time_modem_store+0x64>)
   18a36:	1ad2      	subs	r2, r2, r3
   18a38:	08d2      	lsrs	r2, r2, #3
   18a3a:	0192      	lsls	r2, r2, #6
   18a3c:	f042 0201 	orr.w	r2, r2, #1
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   18a40:	b005      	add	sp, #20
   18a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Setting modem time failed, %d", ret);
   18a46:	f006 bbee 	b.w	1f226 <log_1>
}
   18a4a:	b005      	add	sp, #20
   18a4c:	bd30      	pop	{r4, r5, pc}
   18a4e:	bf00      	nop
   18a50:	2000f40d 	.word	0x2000f40d
   18a54:	00025001 	.word	0x00025001
   18a58:	00022fd8 	.word	0x00022fd8
   18a5c:	00023000 	.word	0x00023000
   18a60:	0002502e 	.word	0x0002502e

00018a64 <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   18a64:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   18a66:	4809      	ldr	r0, [pc, #36]	; (18a8c <date_time_modem_xtime_subscribe+0x28>)
   18a68:	f003 f824 	bl	1bab4 <nrf_modem_at_printf>

	if (err) {
   18a6c:	4601      	mov	r1, r0
   18a6e:	b158      	cbz	r0, 18a88 <date_time_modem_xtime_subscribe+0x24>
   18a70:	4b07      	ldr	r3, [pc, #28]	; (18a90 <date_time_modem_xtime_subscribe+0x2c>)
   18a72:	4a08      	ldr	r2, [pc, #32]	; (18a94 <date_time_modem_xtime_subscribe+0x30>)
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   18a74:	4808      	ldr	r0, [pc, #32]	; (18a98 <date_time_modem_xtime_subscribe+0x34>)
   18a76:	1ad2      	subs	r2, r2, r3
   18a78:	08d2      	lsrs	r2, r2, #3
   18a7a:	0192      	lsls	r2, r2, #6
   18a7c:	f042 0201 	orr.w	r2, r2, #1
	}
}
   18a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   18a84:	f006 bbcf 	b.w	1f226 <log_1>
}
   18a88:	bd08      	pop	{r3, pc}
   18a8a:	bf00      	nop
   18a8c:	0002504c 	.word	0x0002504c
   18a90:	00022fd8 	.word	0x00022fd8
   18a94:	00023000 	.word	0x00023000
   18a98:	00025058 	.word	0x00025058

00018a9c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   18a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18aa0:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   18aa2:	4c21      	ldr	r4, [pc, #132]	; (18b28 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   18aa4:	4e21      	ldr	r6, [pc, #132]	; (18b2c <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18aa6:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   18aaa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 18b34 <check_ext_api_requests+0x98>
{
   18aae:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18ab0:	45a8      	cmp	r8, r5
   18ab2:	d803      	bhi.n	18abc <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   18ab4:	2000      	movs	r0, #0
   18ab6:	b005      	add	sp, #20
   18ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   18abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18abe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   18ac2:	681f      	ldr	r7, [r3, #0]
   18ac4:	ab01      	add	r3, sp, #4
   18ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   18aca:	220c      	movs	r2, #12
   18acc:	4619      	mov	r1, r3
   18ace:	4638      	mov	r0, r7
   18ad0:	f009 fe46 	bl	22760 <memcmp>
   18ad4:	b990      	cbnz	r0, 18afc <check_ext_api_requests+0x60>
   18ad6:	b18f      	cbz	r7, 18afc <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   18ada:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18adc:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   18ade:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18ae0:	4291      	cmp	r1, r2
   18ae2:	d10b      	bne.n	18afc <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   18ae4:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   18ae6:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   18ae8:	4291      	cmp	r1, r2
   18aea:	d807      	bhi.n	18afc <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   18aec:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   18aee:	4291      	cmp	r1, r2
   18af0:	d904      	bls.n	18afc <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   18af2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18af4:	695b      	ldr	r3, [r3, #20]
   18af6:	ea32 0303 	bics.w	r3, r2, r3
   18afa:	d00a      	beq.n	18b12 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   18afc:	6a27      	ldr	r7, [r4, #32]
   18afe:	b167      	cbz	r7, 18b1a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   18b00:	480b      	ldr	r0, [pc, #44]	; (18b30 <check_ext_api_requests+0x94>)
   18b02:	f006 f897 	bl	1ec34 <printk>
			k_panic();
   18b06:	4040      	eors	r0, r0
   18b08:	f380 8811 	msr	BASEPRI, r0
   18b0c:	f04f 0004 	mov.w	r0, #4
   18b10:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   18b12:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18b14:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   18b16:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18b18:	e7ca      	b.n	18ab0 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   18b1a:	4648      	mov	r0, r9
   18b1c:	f006 f88a 	bl	1ec34 <printk>
			*ext_api_req->ext_api = NULL;
   18b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18b22:	601f      	str	r7, [r3, #0]
   18b24:	e7f5      	b.n	18b12 <check_ext_api_requests+0x76>
   18b26:	bf00      	nop
   18b28:	0001023c 	.word	0x0001023c
   18b2c:	000230c0 	.word	0x000230c0
   18b30:	0002509b 	.word	0x0002509b
   18b34:	000250c4 	.word	0x000250c4

00018b38 <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   18b38:	4b01      	ldr	r3, [pc, #4]	; (18b40 <SystemInit+0x8>)
   18b3a:	4a02      	ldr	r2, [pc, #8]	; (18b44 <SystemInit+0xc>)
   18b3c:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   18b3e:	4770      	bx	lr
   18b40:	2000c5a8 	.word	0x2000c5a8
   18b44:	03d09000 	.word	0x03d09000

00018b48 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   18b48:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   18b4a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   18b4c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   18b4e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   18b52:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   18b54:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   18b58:	d010      	beq.n	18b7c <nrfx_flag32_alloc+0x34>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   18b5a:	fa05 f204 	lsl.w	r2, r5, r4
   18b5e:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18b62:	e8d0 6fef 	ldaex	r6, [r0]
   18b66:	429e      	cmp	r6, r3
   18b68:	d104      	bne.n	18b74 <nrfx_flag32_alloc+0x2c>
   18b6a:	e8c0 2fec 	stlex	ip, r2, [r0]
   18b6e:	f1bc 0f00 	cmp.w	ip, #0
   18b72:	d1f6      	bne.n	18b62 <nrfx_flag32_alloc+0x1a>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   18b74:	d1ea      	bne.n	18b4c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   18b76:	4802      	ldr	r0, [pc, #8]	; (18b80 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
   18b78:	700c      	strb	r4, [r1, #0]
}
   18b7a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   18b7c:	4801      	ldr	r0, [pc, #4]	; (18b84 <nrfx_flag32_alloc+0x3c>)
   18b7e:	e7fc      	b.n	18b7a <nrfx_flag32_alloc+0x32>
   18b80:	0bad0000 	.word	0x0bad0000
   18b84:	0bad0002 	.word	0x0bad0002

00018b88 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   18b88:	6803      	ldr	r3, [r0, #0]
{
   18b8a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   18b8c:	40cb      	lsrs	r3, r1
   18b8e:	07db      	lsls	r3, r3, #31
   18b90:	d411      	bmi.n	18bb6 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   18b92:	2301      	movs	r3, #1
   18b94:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   18b98:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   18b9a:	ea41 0203 	orr.w	r2, r1, r3
   18b9e:	e8d0 4fef 	ldaex	r4, [r0]
   18ba2:	429c      	cmp	r4, r3
   18ba4:	d104      	bne.n	18bb0 <nrfx_flag32_free+0x28>
   18ba6:	e8c0 2fec 	stlex	ip, r2, [r0]
   18baa:	f1bc 0f00 	cmp.w	ip, #0
   18bae:	d1f6      	bne.n	18b9e <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   18bb0:	d1f2      	bne.n	18b98 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   18bb2:	4802      	ldr	r0, [pc, #8]	; (18bbc <nrfx_flag32_free+0x34>)
}
   18bb4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   18bb6:	4802      	ldr	r0, [pc, #8]	; (18bc0 <nrfx_flag32_free+0x38>)
   18bb8:	e7fc      	b.n	18bb4 <nrfx_flag32_free+0x2c>
   18bba:	bf00      	nop
   18bbc:	0bad0000 	.word	0x0bad0000
   18bc0:	0bad0004 	.word	0x0bad0004

00018bc4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   18bc4:	4b04      	ldr	r3, [pc, #16]	; (18bd8 <nrfx_clock_init+0x14>)
   18bc6:	791a      	ldrb	r2, [r3, #4]
   18bc8:	b922      	cbnz	r2, 18bd4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   18bca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   18bcc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   18bce:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   18bd0:	4802      	ldr	r0, [pc, #8]	; (18bdc <nrfx_clock_init+0x18>)
   18bd2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   18bd4:	4802      	ldr	r0, [pc, #8]	; (18be0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18bd6:	4770      	bx	lr
   18bd8:	2000d378 	.word	0x2000d378
   18bdc:	0bad0000 	.word	0x0bad0000
   18be0:	0bad000c 	.word	0x0bad000c

00018be4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   18be4:	b110      	cbz	r0, 18bec <nrfx_clock_start+0x8>
   18be6:	2801      	cmp	r0, #1
   18be8:	d01e      	beq.n	18c28 <nrfx_clock_start+0x44>
   18bea:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18bec:	4b13      	ldr	r3, [pc, #76]	; (18c3c <nrfx_clock_start+0x58>)
   18bee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18bf2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   18bf6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   18bfa:	4619      	mov	r1, r3
   18bfc:	d010      	beq.n	18c20 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   18bfe:	f002 0203 	and.w	r2, r2, #3
   18c02:	2a02      	cmp	r2, #2
   18c04:	d10c      	bne.n	18c20 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18c06:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c0a:	2200      	movs	r2, #0
   18c0c:	4b0c      	ldr	r3, [pc, #48]	; (18c40 <nrfx_clock_start+0x5c>)
   18c0e:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   18c10:	2202      	movs	r2, #2
   18c12:	681b      	ldr	r3, [r3, #0]
   18c14:	4b09      	ldr	r3, [pc, #36]	; (18c3c <nrfx_clock_start+0x58>)
   18c16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c1a:	2201      	movs	r2, #1
   18c1c:	609a      	str	r2, [r3, #8]
}
   18c1e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   18c20:	2301      	movs	r3, #1
   18c22:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   18c26:	e7f0      	b.n	18c0a <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c28:	2200      	movs	r2, #0
   18c2a:	4b06      	ldr	r3, [pc, #24]	; (18c44 <nrfx_clock_start+0x60>)
   18c2c:	601a      	str	r2, [r3, #0]
   18c2e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   18c30:	4b02      	ldr	r3, [pc, #8]	; (18c3c <nrfx_clock_start+0x58>)
   18c32:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c36:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   18c38:	4770      	bx	lr
   18c3a:	bf00      	nop
   18c3c:	40005000 	.word	0x40005000
   18c40:	40005104 	.word	0x40005104
   18c44:	40005100 	.word	0x40005100

00018c48 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   18c48:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   18c4a:	b110      	cbz	r0, 18c52 <nrfx_clock_stop+0xa>
   18c4c:	2801      	cmp	r0, #1
   18c4e:	d016      	beq.n	18c7e <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   18c50:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   18c52:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c54:	2101      	movs	r1, #1
   18c56:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   18c5a:	4c16      	ldr	r4, [pc, #88]	; (18cb4 <nrfx_clock_stop+0x6c>)
   18c5c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c60:	4a15      	ldr	r2, [pc, #84]	; (18cb8 <nrfx_clock_stop+0x70>)
   18c62:	6010      	str	r0, [r2, #0]
   18c64:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c66:	4a15      	ldr	r2, [pc, #84]	; (18cbc <nrfx_clock_stop+0x74>)
   18c68:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18c6a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   18c6e:	03db      	lsls	r3, r3, #15
   18c70:	d5ee      	bpl.n	18c50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   18c72:	2001      	movs	r0, #1
   18c74:	f008 f8a9 	bl	20dca <nrfx_busy_wait>
   18c78:	3d01      	subs	r5, #1
   18c7a:	d1f6      	bne.n	18c6a <nrfx_clock_stop+0x22>
   18c7c:	e7e8      	b.n	18c50 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c7e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c80:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c84:	4b0e      	ldr	r3, [pc, #56]	; (18cc0 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   18c86:	4c0b      	ldr	r4, [pc, #44]	; (18cb4 <nrfx_clock_stop+0x6c>)
   18c88:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c8c:	601a      	str	r2, [r3, #0]
   18c8e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c90:	4b0c      	ldr	r3, [pc, #48]	; (18cc4 <nrfx_clock_stop+0x7c>)
   18c92:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18c94:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18c98:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18c9c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18ca0:	03d2      	lsls	r2, r2, #15
   18ca2:	d5d5      	bpl.n	18c50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   18ca4:	2b00      	cmp	r3, #0
   18ca6:	d0d3      	beq.n	18c50 <nrfx_clock_stop+0x8>
   18ca8:	2001      	movs	r0, #1
   18caa:	f008 f88e 	bl	20dca <nrfx_busy_wait>
   18cae:	3d01      	subs	r5, #1
   18cb0:	d1f0      	bne.n	18c94 <nrfx_clock_stop+0x4c>
   18cb2:	e7cd      	b.n	18c50 <nrfx_clock_stop+0x8>
   18cb4:	40005000 	.word	0x40005000
   18cb8:	40005104 	.word	0x40005104
   18cbc:	4000500c 	.word	0x4000500c
   18cc0:	40005100 	.word	0x40005100
   18cc4:	40005004 	.word	0x40005004

00018cc8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18cc8:	4b15      	ldr	r3, [pc, #84]	; (18d20 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   18cca:	b510      	push	{r4, lr}
   18ccc:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   18cce:	b14a      	cbz	r2, 18ce4 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18cd0:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   18cd2:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18cd4:	6018      	str	r0, [r3, #0]
   18cd6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   18cd8:	4b12      	ldr	r3, [pc, #72]	; (18d24 <nrfx_power_clock_irq_handler+0x5c>)
   18cda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18cde:	4b12      	ldr	r3, [pc, #72]	; (18d28 <nrfx_power_clock_irq_handler+0x60>)
   18ce0:	681b      	ldr	r3, [r3, #0]
   18ce2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18ce4:	4b11      	ldr	r3, [pc, #68]	; (18d2c <nrfx_power_clock_irq_handler+0x64>)
   18ce6:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   18ce8:	b182      	cbz	r2, 18d0c <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18cea:	2200      	movs	r2, #0
   18cec:	601a      	str	r2, [r3, #0]
   18cee:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18cf0:	4b0c      	ldr	r3, [pc, #48]	; (18d24 <nrfx_power_clock_irq_handler+0x5c>)
   18cf2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18cf6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   18cfa:	f002 0203 	and.w	r2, r2, #3
   18cfe:	2a01      	cmp	r2, #1
   18d00:	f04f 0102 	mov.w	r1, #2
   18d04:	d103      	bne.n	18d0e <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18d06:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d0a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   18d0c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   18d0e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18d12:	4b05      	ldr	r3, [pc, #20]	; (18d28 <nrfx_power_clock_irq_handler+0x60>)
   18d14:	2001      	movs	r0, #1
}
   18d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18d1a:	681b      	ldr	r3, [r3, #0]
   18d1c:	4718      	bx	r3
   18d1e:	bf00      	nop
   18d20:	40005100 	.word	0x40005100
   18d24:	40005000 	.word	0x40005000
   18d28:	2000d378 	.word	0x2000d378
   18d2c:	40005104 	.word	0x40005104

00018d30 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   18d30:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   18d32:	4801      	ldr	r0, [pc, #4]	; (18d38 <nrfx_dppi_channel_alloc+0x8>)
   18d34:	f7ff bf08 	b.w	18b48 <nrfx_flag32_alloc>
   18d38:	2000c5ac 	.word	0x2000c5ac

00018d3c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   18d3c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d3e:	4c0d      	ldr	r4, [pc, #52]	; (18d74 <call_handler+0x38>)
   18d40:	f100 0308 	add.w	r3, r0, #8
   18d44:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   18d48:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d4a:	05da      	lsls	r2, r3, #23
{
   18d4c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d4e:	d507      	bpl.n	18d60 <call_handler+0x24>
   18d50:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   18d54:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   18d58:	6852      	ldr	r2, [r2, #4]
   18d5a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   18d5e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   18d60:	68a3      	ldr	r3, [r4, #8]
   18d62:	b12b      	cbz	r3, 18d70 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   18d64:	4631      	mov	r1, r6
   18d66:	4628      	mov	r0, r5
   18d68:	68e2      	ldr	r2, [r4, #12]
    }
}
   18d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   18d6e:	4718      	bx	r3
}
   18d70:	bd70      	pop	{r4, r5, r6, pc}
   18d72:	bf00      	nop
   18d74:	2000c5b0 	.word	0x2000c5b0

00018d78 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d78:	4b12      	ldr	r3, [pc, #72]	; (18dc4 <release_handler+0x4c>)
   18d7a:	3008      	adds	r0, #8
   18d7c:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
   18d80:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d82:	05d1      	lsls	r1, r2, #23
   18d84:	d51b      	bpl.n	18dbe <release_handler+0x46>
   18d86:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   18d8a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   18d8e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   18d92:	2000      	movs	r0, #0
   18d94:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   18d98:	f834 2b02 	ldrh.w	r2, [r4], #2
   18d9c:	f412 7f80 	tst.w	r2, #256	; 0x100
   18da0:	d003      	beq.n	18daa <release_handler+0x32>
   18da2:	f3c2 2243 	ubfx	r2, r2, #9, #4
   18da6:	4291      	cmp	r1, r2
   18da8:	d009      	beq.n	18dbe <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   18daa:	3001      	adds	r0, #1
   18dac:	2820      	cmp	r0, #32
   18dae:	d1f3      	bne.n	18d98 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   18db0:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   18db2:	4805      	ldr	r0, [pc, #20]	; (18dc8 <release_handler+0x50>)
}
   18db4:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
   18db6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   18dba:	f7ff bee5 	b.w	18b88 <nrfx_flag32_free>
}
   18dbe:	bc10      	pop	{r4}
   18dc0:	4770      	bx	lr
   18dc2:	bf00      	nop
   18dc4:	2000c5b0 	.word	0x2000c5b0
   18dc8:	2000c604 	.word	0x2000c604

00018dcc <pin_handler_trigger_uninit>:
{
   18dcc:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   18dce:	4c0c      	ldr	r4, [pc, #48]	; (18e00 <pin_handler_trigger_uninit+0x34>)
   18dd0:	f100 0508 	add.w	r5, r0, #8
   18dd4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   18dd8:	069a      	lsls	r2, r3, #26
   18dda:	d50a      	bpl.n	18df2 <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   18ddc:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   18dde:	0b5b      	lsrs	r3, r3, #13
   18de0:	009b      	lsls	r3, r3, #2
   18de2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18de6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   18dea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   18dee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
   18df2:	f7ff ffc1 	bl	18d78 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   18df6:	2300      	movs	r3, #0
   18df8:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   18dfc:	bd38      	pop	{r3, r4, r5, pc}
   18dfe:	bf00      	nop
   18e00:	2000c5b0 	.word	0x2000c5b0

00018e04 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   18e04:	f000 021f 	and.w	r2, r0, #31
   18e08:	4805      	ldr	r0, [pc, #20]	; (18e20 <nrf_gpio_cfg_sense_set+0x1c>)
   18e0a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18e0e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   18e12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   18e1a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   18e1e:	4770      	bx	lr
   18e20:	40842500 	.word	0x40842500

00018e24 <nrfx_gpiote_input_configure>:
{
   18e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18e26:	4604      	mov	r4, r0
    if (p_input_config)
   18e28:	b1f9      	cbz	r1, 18e6a <nrfx_gpiote_input_configure+0x46>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18e2a:	4f4c      	ldr	r7, [pc, #304]	; (18f5c <nrfx_gpiote_input_configure+0x138>)
   18e2c:	f100 0c08 	add.w	ip, r0, #8
   18e30:	f837 001c 	ldrh.w	r0, [r7, ip, lsl #1]
        if (pin_is_task_output(pin))
   18e34:	f000 0522 	and.w	r5, r0, #34	; 0x22
   18e38:	2d22      	cmp	r5, #34	; 0x22
   18e3a:	d102      	bne.n	18e42 <nrfx_gpiote_input_configure+0x1e>
            return NRFX_ERROR_INVALID_PARAM;
   18e3c:	4848      	ldr	r0, [pc, #288]	; (18f60 <nrfx_gpiote_input_configure+0x13c>)
}
   18e3e:	b003      	add	sp, #12
   18e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18e42:	4d48      	ldr	r5, [pc, #288]	; (18f64 <nrfx_gpiote_input_configure+0x140>)
    *p_pin = pin_number & 0x1F;
   18e44:	f004 061f 	and.w	r6, r4, #31
   18e48:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18e4c:	f8d6 5200 	ldr.w	r5, [r6, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18e50:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   18e52:	f025 050f 	bic.w	r5, r5, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   18e56:	f020 0002 	bic.w	r0, r0, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18e5a:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   18e5e:	f040 0001 	orr.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf;
   18e62:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
   18e66:	f827 001c 	strh.w	r0, [r7, ip, lsl #1]
    if (p_trigger_config)
   18e6a:	b192      	cbz	r2, 18e92 <nrfx_gpiote_input_configure+0x6e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18e6c:	483b      	ldr	r0, [pc, #236]	; (18f5c <nrfx_gpiote_input_configure+0x138>)
   18e6e:	f104 0608 	add.w	r6, r4, #8
   18e72:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   18e76:	7815      	ldrb	r5, [r2, #0]
        if (pin_is_output(pin))
   18e78:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   18e7a:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
   18e7c:	d50c      	bpl.n	18e98 <nrfx_gpiote_input_configure+0x74>
            if (use_evt)
   18e7e:	2a00      	cmp	r2, #0
   18e80:	d1dc      	bne.n	18e3c <nrfx_gpiote_input_configure+0x18>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   18e82:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
   18e86:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   18e8a:	ea42 0585 	orr.w	r5, r2, r5, lsl #2
   18e8e:	f820 5016 	strh.w	r5, [r0, r6, lsl #1]
    if (p_handler_config)
   18e92:	bbd3      	cbnz	r3, 18f0a <nrfx_gpiote_input_configure+0xe6>
    return NRFX_SUCCESS;
   18e94:	4834      	ldr	r0, [pc, #208]	; (18f68 <nrfx_gpiote_input_configure+0x144>)
   18e96:	e7d2      	b.n	18e3e <nrfx_gpiote_input_configure+0x1a>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   18e98:	f021 0120 	bic.w	r1, r1, #32
   18e9c:	04c9      	lsls	r1, r1, #19
   18e9e:	0cc9      	lsrs	r1, r1, #19
   18ea0:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
   18ea4:	2a00      	cmp	r2, #0
   18ea6:	d0ec      	beq.n	18e82 <nrfx_gpiote_input_configure+0x5e>
                if (!edge)
   18ea8:	2d03      	cmp	r5, #3
   18eaa:	d8c7      	bhi.n	18e3c <nrfx_gpiote_input_configure+0x18>
                uint8_t ch = *p_trigger_config->p_in_channel;
   18eac:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   18eb0:	4662      	mov	r2, ip
   18eb2:	0092      	lsls	r2, r2, #2
   18eb4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18eb8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   18ebc:	b925      	cbnz	r5, 18ec8 <nrfx_gpiote_input_configure+0xa4>
    p_reg->CONFIG[idx] = 0;
   18ebe:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   18ec2:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
#endif
}
   18ec6:	e7dc      	b.n	18e82 <nrfx_gpiote_input_configure+0x5e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   18ec8:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18ecc:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   18ed0:	f027 0703 	bic.w	r7, r7, #3
   18ed4:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   18ed8:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18edc:	f40e 5ef8 	and.w	lr, lr, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   18ee0:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
   18ee4:	f427 7740 	bic.w	r7, r7, #768	; 0x300
   18ee8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18eec:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   18ef0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   18ef4:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
   18ef8:	ea47 070e 	orr.w	r7, r7, lr
   18efc:	f041 0120 	orr.w	r1, r1, #32
   18f00:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
   18f04:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
   18f08:	e7bb      	b.n	18e82 <nrfx_gpiote_input_configure+0x5e>
    release_handler(pin);
   18f0a:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   18f0c:	e9d3 6700 	ldrd	r6, r7, [r3]
    release_handler(pin);
   18f10:	f7ff ff32 	bl	18d78 <release_handler>
    if (!handler)
   18f14:	2e00      	cmp	r6, #0
   18f16:	d0bd      	beq.n	18e94 <nrfx_gpiote_input_configure+0x70>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   18f18:	4d10      	ldr	r5, [pc, #64]	; (18f5c <nrfx_gpiote_input_configure+0x138>)
   18f1a:	682b      	ldr	r3, [r5, #0]
   18f1c:	429e      	cmp	r6, r3
   18f1e:	d104      	bne.n	18f2a <nrfx_gpiote_input_configure+0x106>
   18f20:	686b      	ldr	r3, [r5, #4]
   18f22:	429f      	cmp	r7, r3
   18f24:	d101      	bne.n	18f2a <nrfx_gpiote_input_configure+0x106>
   18f26:	2200      	movs	r2, #0
   18f28:	e009      	b.n	18f3e <nrfx_gpiote_input_configure+0x11a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   18f2a:	4810      	ldr	r0, [pc, #64]	; (18f6c <nrfx_gpiote_input_configure+0x148>)
   18f2c:	f10d 0107 	add.w	r1, sp, #7
   18f30:	f7ff fe0a 	bl	18b48 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   18f34:	4b0c      	ldr	r3, [pc, #48]	; (18f68 <nrfx_gpiote_input_configure+0x144>)
   18f36:	4298      	cmp	r0, r3
   18f38:	d181      	bne.n	18e3e <nrfx_gpiote_input_configure+0x1a>
        handler_id = (int32_t)id;
   18f3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   18f3e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   18f42:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   18f44:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   18f46:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   18f4a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   18f4e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   18f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18f56:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   18f5a:	e79b      	b.n	18e94 <nrfx_gpiote_input_configure+0x70>
   18f5c:	2000c5b0 	.word	0x2000c5b0
   18f60:	0bad0004 	.word	0x0bad0004
   18f64:	40842500 	.word	0x40842500
   18f68:	0bad0000 	.word	0x0bad0000
   18f6c:	2000c604 	.word	0x2000c604

00018f70 <nrfx_gpiote_output_configure>:
{
   18f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (p_config)
   18f74:	2900      	cmp	r1, #0
   18f76:	d044      	beq.n	19002 <nrfx_gpiote_output_configure+0x92>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18f78:	4e43      	ldr	r6, [pc, #268]	; (19088 <nrfx_gpiote_output_configure+0x118>)
   18f7a:	f100 0c08 	add.w	ip, r0, #8
   18f7e:	f836 501c 	ldrh.w	r5, [r6, ip, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   18f82:	07ab      	lsls	r3, r5, #30
   18f84:	d404      	bmi.n	18f90 <nrfx_gpiote_output_configure+0x20>
   18f86:	06af      	lsls	r7, r5, #26
   18f88:	d502      	bpl.n	18f90 <nrfx_gpiote_output_configure+0x20>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18f8a:	4840      	ldr	r0, [pc, #256]	; (1908c <nrfx_gpiote_output_configure+0x11c>)
}
   18f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   18f90:	f015 0f1c 	tst.w	r5, #28
   18f94:	d002      	beq.n	18f9c <nrfx_gpiote_output_configure+0x2c>
   18f96:	784b      	ldrb	r3, [r1, #1]
   18f98:	2b01      	cmp	r3, #1
   18f9a:	d0f6      	beq.n	18f8a <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18f9c:	4b3c      	ldr	r3, [pc, #240]	; (19090 <nrfx_gpiote_output_configure+0x120>)
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   18f9e:	f111 0e01 	adds.w	lr, r1, #1
    *p_pin = pin_number & 0x1F;
   18fa2:	f000 071f 	and.w	r7, r0, #31
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   18fa6:	bf14      	ite	ne
   18fa8:	2402      	movne	r4, #2
   18faa:	2400      	moveq	r4, #0
   18fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   18fb0:	1c8b      	adds	r3, r1, #2
   18fb2:	bf14      	ite	ne
   18fb4:	f04f 090c 	movne.w	r9, #12
   18fb8:	f04f 0900 	moveq.w	r9, #0
   18fbc:	ea44 0409 	orr.w	r4, r4, r9
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18fc0:	f8d7 8200 	ldr.w	r8, [r7, #512]	; 0x200
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   18fc4:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   18fc8:	f044 0401 	orr.w	r4, r4, #1
    cnf &= ~to_update;
   18fcc:	ea28 0804 	bic.w	r8, r8, r4
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   18fd0:	f1be 0f00 	cmp.w	lr, #0
   18fd4:	d003      	beq.n	18fde <nrfx_gpiote_output_configure+0x6e>
   18fd6:	f891 e001 	ldrb.w	lr, [r1, #1]
   18fda:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18fde:	b10b      	cbz	r3, 18fe4 <nrfx_gpiote_output_configure+0x74>
   18fe0:	788c      	ldrb	r4, [r1, #2]
   18fe2:	00a3      	lsls	r3, r4, #2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   18fe4:	7809      	ldrb	r1, [r1, #0]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   18fe6:	f045 0503 	orr.w	r5, r5, #3
   18fea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   18fee:	ea43 0308 	orr.w	r3, r3, r8
   18ff2:	ea43 030e 	orr.w	r3, r3, lr
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18ff6:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   18ffa:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
   18ffe:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
    if (p_task_config)
   19002:	b90a      	cbnz	r2, 19008 <nrfx_gpiote_output_configure+0x98>
    return NRFX_SUCCESS;
   19004:	4823      	ldr	r0, [pc, #140]	; (19094 <nrfx_gpiote_output_configure+0x124>)
   19006:	e7c1      	b.n	18f8c <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19008:	4d1f      	ldr	r5, [pc, #124]	; (19088 <nrfx_gpiote_output_configure+0x118>)
   1900a:	f100 0608 	add.w	r6, r0, #8
   1900e:	f835 4016 	ldrh.w	r4, [r5, r6, lsl #1]
        if (pin_is_input(pin))
   19012:	07a3      	lsls	r3, r4, #30
   19014:	d5b9      	bpl.n	18f8a <nrfx_gpiote_output_configure+0x1a>
    p_reg->CONFIG[idx] = 0;
   19016:	2300      	movs	r3, #0
        uint32_t ch = p_task_config->task_ch;
   19018:	7817      	ldrb	r7, [r2, #0]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1901a:	f024 0420 	bic.w	r4, r4, #32
   1901e:	00b9      	lsls	r1, r7, #2
   19020:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   19024:	04e4      	lsls	r4, r4, #19
   19026:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   1902a:	0ce4      	lsrs	r4, r4, #19
   1902c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   19030:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
    p_reg->CONFIG[idx] = 0;
   19034:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   19038:	f892 c001 	ldrb.w	ip, [r2, #1]
   1903c:	f1bc 0f00 	cmp.w	ip, #0
   19040:	d0e0      	beq.n	19004 <nrfx_gpiote_output_configure+0x94>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   19042:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   19046:	7892      	ldrb	r2, [r2, #2]
   19048:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1904c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   19050:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19054:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   19058:	0203      	lsls	r3, r0, #8
   1905a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1905e:	ea4f 400c 	mov.w	r0, ip, lsl #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19062:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   19066:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1906a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1906c:	4303      	orrs	r3, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1906e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19072:	ea44 3447 	orr.w	r4, r4, r7, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19076:	4313      	orrs	r3, r2
   19078:	f044 0420 	orr.w	r4, r4, #32
   1907c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   19080:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
   19084:	e7be      	b.n	19004 <nrfx_gpiote_output_configure+0x94>
   19086:	bf00      	nop
   19088:	2000c5b0 	.word	0x2000c5b0
   1908c:	0bad0004 	.word	0x0bad0004
   19090:	40842500 	.word	0x40842500
   19094:	0bad0000 	.word	0x0bad0000

00019098 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   19098:	4b01      	ldr	r3, [pc, #4]	; (190a0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1909a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1909e:	4770      	bx	lr
   190a0:	2000c5b0 	.word	0x2000c5b0

000190a4 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   190a4:	4b05      	ldr	r3, [pc, #20]	; (190bc <nrfx_gpiote_channel_get+0x18>)
   190a6:	3008      	adds	r0, #8
   190a8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   190ac:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   190ae:	bf43      	ittte	mi
   190b0:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   190b2:	4803      	ldrmi	r0, [pc, #12]	; (190c0 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   190b4:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   190b6:	4803      	ldrpl	r0, [pc, #12]	; (190c4 <nrfx_gpiote_channel_get+0x20>)
}
   190b8:	4770      	bx	lr
   190ba:	bf00      	nop
   190bc:	2000c5b0 	.word	0x2000c5b0
   190c0:	0bad0000 	.word	0x0bad0000
   190c4:	0bad0004 	.word	0x0bad0004

000190c8 <nrfx_gpiote_init>:
{
   190c8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   190ca:	4c0e      	ldr	r4, [pc, #56]	; (19104 <nrfx_gpiote_init+0x3c>)
   190cc:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   190d0:	b9b5      	cbnz	r5, 19100 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   190d2:	2240      	movs	r2, #64	; 0x40
   190d4:	4629      	mov	r1, r5
   190d6:	f104 0010 	add.w	r0, r4, #16
   190da:	f009 fb5c 	bl	22796 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   190de:	2031      	movs	r0, #49	; 0x31
   190e0:	f7fa fde0 	bl	13ca4 <arch_irq_enable>
    p_reg->INTENSET = mask;
   190e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   190e8:	4b07      	ldr	r3, [pc, #28]	; (19108 <nrfx_gpiote_init+0x40>)
    return err_code;
   190ea:	4808      	ldr	r0, [pc, #32]	; (1910c <nrfx_gpiote_init+0x44>)
   190ec:	601d      	str	r5, [r3, #0]
   190ee:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   190f0:	4b07      	ldr	r3, [pc, #28]	; (19110 <nrfx_gpiote_init+0x48>)
   190f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   190f6:	2301      	movs	r3, #1
   190f8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   190fc:	6563      	str	r3, [r4, #84]	; 0x54
}
   190fe:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   19100:	4804      	ldr	r0, [pc, #16]	; (19114 <nrfx_gpiote_init+0x4c>)
   19102:	e7fc      	b.n	190fe <nrfx_gpiote_init+0x36>
   19104:	2000c5b0 	.word	0x2000c5b0
   19108:	4003117c 	.word	0x4003117c
   1910c:	0bad0000 	.word	0x0bad0000
   19110:	40031000 	.word	0x40031000
   19114:	0bad0005 	.word	0x0bad0005

00019118 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   19118:	4b03      	ldr	r3, [pc, #12]	; (19128 <nrfx_gpiote_is_init+0x10>)
   1911a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1911e:	3800      	subs	r0, #0
   19120:	bf18      	it	ne
   19122:	2001      	movne	r0, #1
   19124:	4770      	bx	lr
   19126:	bf00      	nop
   19128:	2000c5b0 	.word	0x2000c5b0

0001912c <nrfx_gpiote_channel_free>:
{
   1912c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1912e:	4801      	ldr	r0, [pc, #4]	; (19134 <nrfx_gpiote_channel_free+0x8>)
   19130:	f7ff bd2a 	b.w	18b88 <nrfx_flag32_free>
   19134:	2000c600 	.word	0x2000c600

00019138 <nrfx_gpiote_channel_alloc>:
{
   19138:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1913a:	4801      	ldr	r0, [pc, #4]	; (19140 <nrfx_gpiote_channel_alloc+0x8>)
   1913c:	f7ff bd04 	b.w	18b48 <nrfx_flag32_alloc>
   19140:	2000c600 	.word	0x2000c600

00019144 <nrfx_gpiote_trigger_enable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   19144:	4b1b      	ldr	r3, [pc, #108]	; (191b4 <nrfx_gpiote_trigger_enable+0x70>)
   19146:	f100 0208 	add.w	r2, r0, #8
   1914a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1914e:	b410      	push	{r4}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19150:	069a      	lsls	r2, r3, #26
   19152:	d51a      	bpl.n	1918a <nrfx_gpiote_trigger_enable+0x46>
   19154:	f013 0402 	ands.w	r4, r3, #2
   19158:	d117      	bne.n	1918a <nrfx_gpiote_trigger_enable+0x46>
    return ((uint32_t)p_reg + event);
   1915a:	4817      	ldr	r0, [pc, #92]	; (191b8 <nrfx_gpiote_trigger_enable+0x74>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1915c:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1915e:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19160:	5084      	str	r4, [r0, r2]
   19162:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19164:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19168:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1916c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   19170:	f040 0001 	orr.w	r0, r0, #1
   19174:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   19178:	b129      	cbz	r1, 19186 <nrfx_gpiote_trigger_enable+0x42>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1917a:	2201      	movs	r2, #1
   1917c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   19180:	4a0e      	ldr	r2, [pc, #56]	; (191bc <nrfx_gpiote_trigger_enable+0x78>)
   19182:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   19186:	bc10      	pop	{r4}
   19188:	4770      	bx	lr
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1918a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1918e:	2b04      	cmp	r3, #4
   19190:	d00c      	beq.n	191ac <nrfx_gpiote_trigger_enable+0x68>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   19192:	2b05      	cmp	r3, #5
   19194:	d00c      	beq.n	191b0 <nrfx_gpiote_trigger_enable+0x6c>
    return p_reg->IN;
   19196:	4b0a      	ldr	r3, [pc, #40]	; (191c0 <nrfx_gpiote_trigger_enable+0x7c>)
   19198:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   1919a:	f000 031f 	and.w	r3, r0, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1919e:	40d9      	lsrs	r1, r3
   191a0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   191a4:	3102      	adds	r1, #2
}
   191a6:	bc10      	pop	{r4}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   191a8:	f7ff be2c 	b.w	18e04 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   191ac:	2103      	movs	r1, #3
   191ae:	e7fa      	b.n	191a6 <nrfx_gpiote_trigger_enable+0x62>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   191b0:	2102      	movs	r1, #2
   191b2:	e7f8      	b.n	191a6 <nrfx_gpiote_trigger_enable+0x62>
   191b4:	2000c5b0 	.word	0x2000c5b0
   191b8:	40031100 	.word	0x40031100
   191bc:	40031000 	.word	0x40031000
   191c0:	40842500 	.word	0x40842500

000191c4 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   191c4:	4b0e      	ldr	r3, [pc, #56]	; (19200 <nrfx_gpiote_trigger_disable+0x3c>)
   191c6:	f100 0208 	add.w	r2, r0, #8
   191ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   191ce:	0699      	lsls	r1, r3, #26
   191d0:	d513      	bpl.n	191fa <nrfx_gpiote_trigger_disable+0x36>
   191d2:	079a      	lsls	r2, r3, #30
   191d4:	d411      	bmi.n	191fa <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   191d6:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   191d8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   191da:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   191dc:	4909      	ldr	r1, [pc, #36]	; (19204 <nrfx_gpiote_trigger_disable+0x40>)
   191de:	009b      	lsls	r3, r3, #2
   191e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   191e4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   191e8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   191ec:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   191f0:	f022 0203 	bic.w	r2, r2, #3
   191f4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   191f8:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   191fa:	2100      	movs	r1, #0
   191fc:	f7ff be02 	b.w	18e04 <nrf_gpio_cfg_sense_set>
   19200:	2000c5b0 	.word	0x2000c5b0
   19204:	40031000 	.word	0x40031000

00019208 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   19208:	4b0c      	ldr	r3, [pc, #48]	; (1923c <nrfx_gpiote_pin_uninit+0x34>)
   1920a:	f100 0208 	add.w	r2, r0, #8
   1920e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
   19212:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
   19214:	07db      	lsls	r3, r3, #31
{
   19216:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   19218:	d50d      	bpl.n	19236 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   1921a:	f7ff ffd3 	bl	191c4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1921e:	4620      	mov	r0, r4
   19220:	f7ff fdd4 	bl	18dcc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   19224:	2202      	movs	r2, #2
   19226:	4b06      	ldr	r3, [pc, #24]	; (19240 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   19228:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   1922c:	3480      	adds	r4, #128	; 0x80
   1922e:	4805      	ldr	r0, [pc, #20]	; (19244 <nrfx_gpiote_pin_uninit+0x3c>)
   19230:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   19234:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19236:	4804      	ldr	r0, [pc, #16]	; (19248 <nrfx_gpiote_pin_uninit+0x40>)
   19238:	e7fc      	b.n	19234 <nrfx_gpiote_pin_uninit+0x2c>
   1923a:	bf00      	nop
   1923c:	2000c5b0 	.word	0x2000c5b0
   19240:	40842500 	.word	0x40842500
   19244:	0bad0000 	.word	0x0bad0000
   19248:	0bad0004 	.word	0x0bad0004

0001924c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   19250:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   19252:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19254:	4634      	mov	r4, r6
{
   19256:	4b4b      	ldr	r3, [pc, #300]	; (19384 <nrfx_gpiote_irq_handler+0x138>)
    return p_reg->INTENSET & mask;
   19258:	484b      	ldr	r0, [pc, #300]	; (19388 <nrfx_gpiote_irq_handler+0x13c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1925a:	494c      	ldr	r1, [pc, #304]	; (1938c <nrfx_gpiote_irq_handler+0x140>)
{
   1925c:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1925e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   19260:	b135      	cbz	r5, 19270 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   19262:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   19266:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19268:	bf1e      	ittt	ne
   1926a:	601c      	strne	r4, [r3, #0]
   1926c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1926e:	4316      	orrne	r6, r2
        }
        mask <<= 1;
   19270:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19272:	428b      	cmp	r3, r1
        mask <<= 1;
   19274:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19278:	d1f1      	bne.n	1925e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1927a:	4f45      	ldr	r7, [pc, #276]	; (19390 <nrfx_gpiote_irq_handler+0x144>)
   1927c:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1927e:	b183      	cbz	r3, 192a2 <nrfx_gpiote_irq_handler+0x56>
        *p_masks = gpio_regs[i]->LATCH;
   19280:	4d44      	ldr	r5, [pc, #272]	; (19394 <nrfx_gpiote_irq_handler+0x148>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   19282:	f10d 080c 	add.w	r8, sp, #12
   19286:	6a2b      	ldr	r3, [r5, #32]
   19288:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   1928a:	622b      	str	r3, [r5, #32]
   1928c:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   19290:	9803      	ldr	r0, [sp, #12]
   19292:	b940      	cbnz	r0, 192a6 <nrfx_gpiote_irq_handler+0x5a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19294:	6038      	str	r0, [r7, #0]
   19296:	683b      	ldr	r3, [r7, #0]
        *p_masks = gpio_regs[i]->LATCH;
   19298:	6a2b      	ldr	r3, [r5, #32]
   1929a:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   1929c:	622b      	str	r3, [r5, #32]
        if (latch[port_idx])
   1929e:	2b00      	cmp	r3, #0
   192a0:	d1f4      	bne.n	1928c <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   192a2:	2401      	movs	r4, #1
   192a4:	e069      	b.n	1937a <nrfx_gpiote_irq_handler+0x12e>
                uint32_t pin = NRF_CTZ(latch[i]);
   192a6:	fa90 faa0 	rbit	sl, r0
   192aa:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   192ae:	4a3a      	ldr	r2, [pc, #232]	; (19398 <nrfx_gpiote_irq_handler+0x14c>)
   192b0:	f10a 0308 	add.w	r3, sl, #8
   192b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   192b8:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
   192bc:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   192c0:	fa09 f403 	lsl.w	r4, r9, r3
   192c4:	f818 300c 	ldrb.w	r3, [r8, ip]
   192c8:	f3c1 0282 	ubfx	r2, r1, #2, #3
   192cc:	ea23 0304 	bic.w	r3, r3, r4
   192d0:	f808 300c 	strb.w	r3, [r8, ip]
   192d4:	eb05 038a 	add.w	r3, r5, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   192d8:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
   192dc:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   192de:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   192e0:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   192e4:	d518      	bpl.n	19318 <nrfx_gpiote_irq_handler+0xcc>
        call_handler(pin, trigger);
   192e6:	4611      	mov	r1, r2
   192e8:	4650      	mov	r0, sl
   192ea:	9301      	str	r3, [sp, #4]
   192ec:	f7ff fd26 	bl	18d3c <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   192f0:	9b01      	ldr	r3, [sp, #4]
   192f2:	b2e4      	uxtb	r4, r4
   192f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   192f8:	f3c3 4301 	ubfx	r3, r3, #16, #2
   192fc:	429c      	cmp	r4, r3
   192fe:	d107      	bne.n	19310 <nrfx_gpiote_irq_handler+0xc4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   19300:	2100      	movs	r1, #0
   19302:	4650      	mov	r0, sl
   19304:	f7ff fd7e 	bl	18e04 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   19308:	4621      	mov	r1, r4
   1930a:	4650      	mov	r0, sl
   1930c:	f7ff fd7a 	bl	18e04 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   19310:	fa09 f00a 	lsl.w	r0, r9, sl
   19314:	6228      	str	r0, [r5, #32]
}
   19316:	e7bb      	b.n	19290 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19318:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1931a:	bf0c      	ite	eq
   1931c:	2103      	moveq	r1, #3
   1931e:	2102      	movne	r1, #2
   19320:	4650      	mov	r0, sl
   19322:	9201      	str	r2, [sp, #4]
   19324:	f7ff fd6e 	bl	18e04 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   19328:	9a01      	ldr	r2, [sp, #4]
   1932a:	2a03      	cmp	r2, #3
   1932c:	d004      	beq.n	19338 <nrfx_gpiote_irq_handler+0xec>
   1932e:	2c02      	cmp	r4, #2
   19330:	d107      	bne.n	19342 <nrfx_gpiote_irq_handler+0xf6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   19332:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   19336:	d1eb      	bne.n	19310 <nrfx_gpiote_irq_handler+0xc4>
            call_handler(pin, trigger);
   19338:	4659      	mov	r1, fp
   1933a:	4650      	mov	r0, sl
   1933c:	f7ff fcfe 	bl	18d3c <call_handler>
   19340:	e7e6      	b.n	19310 <nrfx_gpiote_irq_handler+0xc4>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   19342:	2c03      	cmp	r4, #3
   19344:	d1e4      	bne.n	19310 <nrfx_gpiote_irq_handler+0xc4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   19346:	f1bb 0f02 	cmp.w	fp, #2
   1934a:	e7f4      	b.n	19336 <nrfx_gpiote_irq_handler+0xea>
        uint32_t ch = NRF_CTZ(mask);
   1934c:	fa96 f3a6 	rbit	r3, r6
   19350:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   19354:	fa04 f203 	lsl.w	r2, r4, r3
   19358:	009b      	lsls	r3, r3, #2
   1935a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1935e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19362:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   19366:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1936a:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1936e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   19372:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   19376:	f7ff fce1 	bl	18d3c <call_handler>
    while (mask)
   1937a:	2e00      	cmp	r6, #0
   1937c:	d1e6      	bne.n	1934c <nrfx_gpiote_irq_handler+0x100>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1937e:	b005      	add	sp, #20
   19380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19384:	40031100 	.word	0x40031100
   19388:	40031000 	.word	0x40031000
   1938c:	40031120 	.word	0x40031120
   19390:	4003117c 	.word	0x4003117c
   19394:	40842500 	.word	0x40842500
   19398:	2000c5b0 	.word	0x2000c5b0

0001939c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1939c:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1939e:	4c08      	ldr	r4, [pc, #32]	; (193c0 <nrfx_ipc_init+0x24>)
{
   193a0:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   193a2:	7923      	ldrb	r3, [r4, #4]
{
   193a4:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   193a6:	b943      	cbnz	r3, 193ba <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   193a8:	202a      	movs	r0, #42	; 0x2a
   193aa:	f7fa fc7b 	bl	13ca4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   193ae:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   193b0:	4804      	ldr	r0, [pc, #16]	; (193c4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   193b2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   193b4:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   193b6:	60a5      	str	r5, [r4, #8]
}
   193b8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   193ba:	4803      	ldr	r0, [pc, #12]	; (193c8 <nrfx_ipc_init+0x2c>)
   193bc:	e7fc      	b.n	193b8 <nrfx_ipc_init+0x1c>
   193be:	bf00      	nop
   193c0:	2000d380 	.word	0x2000d380
   193c4:	0bad0000 	.word	0x0bad0000
   193c8:	0bad000c 	.word	0x0bad000c

000193cc <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   193cc:	2300      	movs	r3, #0
{
   193ce:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   193d0:	4a0d      	ldr	r2, [pc, #52]	; (19408 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   193d2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   193d6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   193da:	3301      	adds	r3, #1
   193dc:	2b08      	cmp	r3, #8
   193de:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   193e2:	d1f6      	bne.n	193d2 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   193e4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   193e6:	4a08      	ldr	r2, [pc, #32]	; (19408 <nrfx_ipc_config_load+0x3c>)
   193e8:	f100 0120 	add.w	r1, r0, #32
   193ec:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   193f0:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   193f4:	3301      	adds	r3, #1
   193f6:	2b08      	cmp	r3, #8
   193f8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   193fc:	d1f6      	bne.n	193ec <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   193fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   19400:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   19404:	bd30      	pop	{r4, r5, pc}
   19406:	bf00      	nop
   19408:	4002a000 	.word	0x4002a000

0001940c <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   1940c:	2300      	movs	r3, #0
   1940e:	4a14      	ldr	r2, [pc, #80]	; (19460 <nrfx_ipc_uninit+0x54>)
   19410:	4914      	ldr	r1, [pc, #80]	; (19464 <nrfx_ipc_uninit+0x58>)
   19412:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   19416:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1941a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   1941e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   19422:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   19426:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   1942a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   1942e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   19432:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   19436:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   1943a:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   1943e:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   19442:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   19446:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   1944a:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   1944e:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   19452:	f04f 32ff 	mov.w	r2, #4294967295
   19456:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   1945a:	4a03      	ldr	r2, [pc, #12]	; (19468 <nrfx_ipc_uninit+0x5c>)
   1945c:	7113      	strb	r3, [r2, #4]
}
   1945e:	4770      	bx	lr
   19460:	4002a004 	.word	0x4002a004
   19464:	4002a000 	.word	0x4002a000
   19468:	2000d380 	.word	0x2000d380

0001946c <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   1946c:	4b0c      	ldr	r3, [pc, #48]	; (194a0 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1946e:	b430      	push	{r4, r5}
   19470:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   19474:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
   19476:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19478:	2500      	movs	r5, #0
    while (bitmask)
   1947a:	b923      	cbnz	r3, 19486 <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
   1947c:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   1947e:	4b09      	ldr	r3, [pc, #36]	; (194a4 <nrfx_ipc_irq_handler+0x38>)
   19480:	681a      	ldr	r2, [r3, #0]
   19482:	6899      	ldr	r1, [r3, #8]
   19484:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   19486:	fa93 f2a3 	rbit	r2, r3
   1948a:	fab2 f282 	clz	r2, r2
        bitmask &= ~(1UL << event_idx);
   1948e:	fa04 f102 	lsl.w	r1, r4, r2
   19492:	ea23 0301 	bic.w	r3, r3, r1
   19496:	4904      	ldr	r1, [pc, #16]	; (194a8 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   19498:	0092      	lsls	r2, r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1949a:	508d      	str	r5, [r1, r2]
}
   1949c:	e7ed      	b.n	1947a <nrfx_ipc_irq_handler+0xe>
   1949e:	bf00      	nop
   194a0:	4002a000 	.word	0x4002a000
   194a4:	2000d380 	.word	0x2000d380
   194a8:	4002a100 	.word	0x4002a100

000194ac <rpc_handle_data_message>:
   194ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194b0:	4680      	mov	r8, r0
   194b2:	4604      	mov	r4, r0
   194b4:	2700      	movs	r7, #0
   194b6:	f858 6b08 	ldr.w	r6, [r8], #8
   194ba:	4d0c      	ldr	r5, [pc, #48]	; (194ec <rpc_handle_data_message+0x40>)
   194bc:	b2f6      	uxtb	r6, r6
   194be:	782b      	ldrb	r3, [r5, #0]
   194c0:	42b3      	cmp	r3, r6
   194c2:	d00a      	beq.n	194da <rpc_handle_data_message+0x2e>
   194c4:	3701      	adds	r7, #1
   194c6:	2f04      	cmp	r7, #4
   194c8:	f105 050c 	add.w	r5, r5, #12
   194cc:	d1f7      	bne.n	194be <rpc_handle_data_message+0x12>
   194ce:	68a0      	ldr	r0, [r4, #8]
   194d0:	b150      	cbz	r0, 194e8 <rpc_handle_data_message+0x3c>
   194d2:	f007 fccb 	bl	20e6c <rpc_transport_peer_data_free>
   194d6:	2000      	movs	r0, #0
   194d8:	e006      	b.n	194e8 <rpc_handle_data_message+0x3c>
   194da:	6821      	ldr	r1, [r4, #0]
   194dc:	4640      	mov	r0, r8
   194de:	686b      	ldr	r3, [r5, #4]
   194e0:	0c09      	lsrs	r1, r1, #16
   194e2:	4798      	blx	r3
   194e4:	2802      	cmp	r0, #2
   194e6:	d0ed      	beq.n	194c4 <rpc_handle_data_message+0x18>
   194e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194ec:	000233c4 	.word	0x000233c4

000194f0 <trace_write>:
   194f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194f4:	4f53      	ldr	r7, [pc, #332]	; (19644 <trace_write+0x154>)
   194f6:	4605      	mov	r5, r0
   194f8:	2100      	movs	r1, #0
   194fa:	6838      	ldr	r0, [r7, #0]
   194fc:	f007 f85f 	bl	205be <nrf_modem_os_sem_take>
   19500:	4604      	mov	r4, r0
   19502:	2800      	cmp	r0, #0
   19504:	d14c      	bne.n	195a0 <trace_write+0xb0>
   19506:	782b      	ldrb	r3, [r5, #0]
   19508:	f8d5 8008 	ldr.w	r8, [r5, #8]
   1950c:	2b62      	cmp	r3, #98	; 0x62
   1950e:	d043      	beq.n	19598 <trace_write+0xa8>
   19510:	2b63      	cmp	r3, #99	; 0x63
   19512:	d043      	beq.n	1959c <trace_write+0xac>
   19514:	2b61      	cmp	r3, #97	; 0x61
   19516:	d102      	bne.n	1951e <trace_write+0x2e>
   19518:	4b4b      	ldr	r3, [pc, #300]	; (19648 <trace_write+0x158>)
   1951a:	881c      	ldrh	r4, [r3, #0]
   1951c:	b2a4      	uxth	r4, r4
   1951e:	6838      	ldr	r0, [r7, #0]
   19520:	f007 f84b 	bl	205ba <nrf_modem_os_sem_give>
   19524:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   19528:	6929      	ldr	r1, [r5, #16]
   1952a:	eba8 080a 	sub.w	r8, r8, sl
   1952e:	eba1 030a 	sub.w	r3, r1, sl
   19532:	b29b      	uxth	r3, r3
   19534:	fa14 f488 	uxtah	r4, r4, r8
   19538:	fbb4 f2f3 	udiv	r2, r4, r3
   1953c:	fb03 4412 	mls	r4, r3, r2, r4
   19540:	686a      	ldr	r2, [r5, #4]
   19542:	eba2 020a 	sub.w	r2, r2, sl
   19546:	fa13 f282 	uxtah	r2, r3, r2
   1954a:	1b12      	subs	r2, r2, r4
   1954c:	fb92 f0f3 	sdiv	r0, r2, r3
   19550:	fb03 2210 	mls	r2, r3, r0, r2
   19554:	fa1f f982 	uxth.w	r9, r2
   19558:	fa14 f282 	uxtah	r2, r4, r2
   1955c:	4293      	cmp	r3, r2
   1955e:	44a2      	add	sl, r4
   19560:	da22      	bge.n	195a8 <trace_write+0xb8>
   19562:	eba1 030a 	sub.w	r3, r1, sl
   19566:	b29b      	uxth	r3, r3
   19568:	eba9 0403 	sub.w	r4, r9, r3
   1956c:	4699      	mov	r9, r3
   1956e:	b2a4      	uxth	r4, r4
   19570:	f1b9 0f00 	cmp.w	r9, #0
   19574:	d064      	beq.n	19640 <trace_write+0x150>
   19576:	2005      	movs	r0, #5
   19578:	f7fc fae4 	bl	15b44 <nrf_modem_os_alloc>
   1957c:	4680      	mov	r8, r0
   1957e:	2800      	cmp	r0, #0
   19580:	d05e      	beq.n	19640 <trace_write+0x150>
   19582:	b19c      	cbz	r4, 195ac <trace_write+0xbc>
   19584:	2005      	movs	r0, #5
   19586:	f7fc fadd 	bl	15b44 <nrf_modem_os_alloc>
   1958a:	4606      	mov	r6, r0
   1958c:	b970      	cbnz	r0, 195ac <trace_write+0xbc>
   1958e:	4640      	mov	r0, r8
   19590:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19594:	f7fc bade 	b.w	15b54 <nrf_modem_os_free>
   19598:	4b2c      	ldr	r3, [pc, #176]	; (1964c <trace_write+0x15c>)
   1959a:	e7be      	b.n	1951a <trace_write+0x2a>
   1959c:	4b2c      	ldr	r3, [pc, #176]	; (19650 <trace_write+0x160>)
   1959e:	e7bc      	b.n	1951a <trace_write+0x2a>
   195a0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195a4:	f7fc babe 	b.w	15b24 <nrf_modem_os_trace_irq_set>
   195a8:	2400      	movs	r4, #0
   195aa:	e7e1      	b.n	19570 <trace_write+0x80>
   195ac:	2100      	movs	r1, #0
   195ae:	6838      	ldr	r0, [r7, #0]
   195b0:	f007 f805 	bl	205be <nrf_modem_os_sem_take>
   195b4:	b140      	cbz	r0, 195c8 <trace_write+0xd8>
   195b6:	f7fc fab5 	bl	15b24 <nrf_modem_os_trace_irq_set>
   195ba:	4640      	mov	r0, r8
   195bc:	f7fc faca 	bl	15b54 <nrf_modem_os_free>
   195c0:	2c00      	cmp	r4, #0
   195c2:	d03d      	beq.n	19640 <trace_write+0x150>
   195c4:	4630      	mov	r0, r6
   195c6:	e7e3      	b.n	19590 <trace_write+0xa0>
   195c8:	782b      	ldrb	r3, [r5, #0]
   195ca:	2b62      	cmp	r3, #98	; 0x62
   195cc:	d034      	beq.n	19638 <trace_write+0x148>
   195ce:	2b63      	cmp	r3, #99	; 0x63
   195d0:	d034      	beq.n	1963c <trace_write+0x14c>
   195d2:	2b61      	cmp	r3, #97	; 0x61
   195d4:	d107      	bne.n	195e6 <trace_write+0xf6>
   195d6:	4a1c      	ldr	r2, [pc, #112]	; (19648 <trace_write+0x158>)
   195d8:	8813      	ldrh	r3, [r2, #0]
   195da:	eb04 0109 	add.w	r1, r4, r9
   195de:	fa11 f383 	uxtah	r3, r1, r3
   195e2:	b29b      	uxth	r3, r3
   195e4:	8013      	strh	r3, [r2, #0]
   195e6:	6838      	ldr	r0, [r7, #0]
   195e8:	f06f 0b10 	mvn.w	fp, #16
   195ec:	f06f 0741 	mvn.w	r7, #65	; 0x41
   195f0:	f006 ffe3 	bl	205ba <nrf_modem_os_sem_give>
   195f4:	f888 b000 	strb.w	fp, [r8]
   195f8:	f888 7001 	strb.w	r7, [r8, #1]
   195fc:	782b      	ldrb	r3, [r5, #0]
   195fe:	2105      	movs	r1, #5
   19600:	4640      	mov	r0, r8
   19602:	f888 3004 	strb.w	r3, [r8, #4]
   19606:	f8a8 9002 	strh.w	r9, [r8, #2]
   1960a:	f007 f806 	bl	2061a <nrf_modem_os_trace_put>
   1960e:	4649      	mov	r1, r9
   19610:	4650      	mov	r0, sl
   19612:	f007 f802 	bl	2061a <nrf_modem_os_trace_put>
   19616:	b19c      	cbz	r4, 19640 <trace_write+0x150>
   19618:	f886 b000 	strb.w	fp, [r6]
   1961c:	7077      	strb	r7, [r6, #1]
   1961e:	782b      	ldrb	r3, [r5, #0]
   19620:	2105      	movs	r1, #5
   19622:	4630      	mov	r0, r6
   19624:	7133      	strb	r3, [r6, #4]
   19626:	8074      	strh	r4, [r6, #2]
   19628:	f006 fff7 	bl	2061a <nrf_modem_os_trace_put>
   1962c:	4621      	mov	r1, r4
   1962e:	68e8      	ldr	r0, [r5, #12]
   19630:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19634:	f006 bff1 	b.w	2061a <nrf_modem_os_trace_put>
   19638:	4a04      	ldr	r2, [pc, #16]	; (1964c <trace_write+0x15c>)
   1963a:	e7cd      	b.n	195d8 <trace_write+0xe8>
   1963c:	4a04      	ldr	r2, [pc, #16]	; (19650 <trace_write+0x160>)
   1963e:	e7cb      	b.n	195d8 <trace_write+0xe8>
   19640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19644:	2000d39c 	.word	0x2000d39c
   19648:	2000d640 	.word	0x2000d640
   1964c:	2000d63c 	.word	0x2000d63c
   19650:	2000d63e 	.word	0x2000d63e

00019654 <ipc_trace_init>:
   19654:	2300      	movs	r3, #0
   19656:	4a08      	ldr	r2, [pc, #32]	; (19678 <ipc_trace_init+0x24>)
   19658:	b510      	push	{r4, lr}
   1965a:	8013      	strh	r3, [r2, #0]
   1965c:	4a07      	ldr	r2, [pc, #28]	; (1967c <ipc_trace_init+0x28>)
   1965e:	4604      	mov	r4, r0
   19660:	8013      	strh	r3, [r2, #0]
   19662:	4a07      	ldr	r2, [pc, #28]	; (19680 <ipc_trace_init+0x2c>)
   19664:	4807      	ldr	r0, [pc, #28]	; (19684 <ipc_trace_init+0x30>)
   19666:	8013      	strh	r3, [r2, #0]
   19668:	2201      	movs	r2, #1
   1966a:	4611      	mov	r1, r2
   1966c:	f7fc fa2e 	bl	15acc <nrf_modem_os_sem_init>
   19670:	4b05      	ldr	r3, [pc, #20]	; (19688 <ipc_trace_init+0x34>)
   19672:	601c      	str	r4, [r3, #0]
   19674:	bd10      	pop	{r4, pc}
   19676:	bf00      	nop
   19678:	2000d640 	.word	0x2000d640
   1967c:	2000d63c 	.word	0x2000d63c
   19680:	2000d63e 	.word	0x2000d63e
   19684:	2000d39c 	.word	0x2000d39c
   19688:	2000d398 	.word	0x2000d398

0001968c <nrf_modem_trace_irq_handler>:
   1968c:	b508      	push	{r3, lr}
   1968e:	4b10      	ldr	r3, [pc, #64]	; (196d0 <nrf_modem_trace_irq_handler+0x44>)
   19690:	781b      	ldrb	r3, [r3, #0]
   19692:	b90b      	cbnz	r3, 19698 <nrf_modem_trace_irq_handler+0xc>
   19694:	f7fc fa4e 	bl	15b34 <nrf_modem_os_trace_irq_clear>
   19698:	4b0e      	ldr	r3, [pc, #56]	; (196d4 <nrf_modem_trace_irq_handler+0x48>)
   1969a:	6818      	ldr	r0, [r3, #0]
   1969c:	6842      	ldr	r2, [r0, #4]
   1969e:	6883      	ldr	r3, [r0, #8]
   196a0:	429a      	cmp	r2, r3
   196a2:	d001      	beq.n	196a8 <nrf_modem_trace_irq_handler+0x1c>
   196a4:	f7ff ff24 	bl	194f0 <trace_write>
   196a8:	4b0b      	ldr	r3, [pc, #44]	; (196d8 <nrf_modem_trace_irq_handler+0x4c>)
   196aa:	6818      	ldr	r0, [r3, #0]
   196ac:	6882      	ldr	r2, [r0, #8]
   196ae:	6843      	ldr	r3, [r0, #4]
   196b0:	429a      	cmp	r2, r3
   196b2:	d001      	beq.n	196b8 <nrf_modem_trace_irq_handler+0x2c>
   196b4:	f7ff ff1c 	bl	194f0 <trace_write>
   196b8:	4b08      	ldr	r3, [pc, #32]	; (196dc <nrf_modem_trace_irq_handler+0x50>)
   196ba:	6818      	ldr	r0, [r3, #0]
   196bc:	6882      	ldr	r2, [r0, #8]
   196be:	6843      	ldr	r3, [r0, #4]
   196c0:	429a      	cmp	r2, r3
   196c2:	d003      	beq.n	196cc <nrf_modem_trace_irq_handler+0x40>
   196c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   196c8:	f7ff bf12 	b.w	194f0 <trace_write>
   196cc:	bd08      	pop	{r3, pc}
   196ce:	bf00      	nop
   196d0:	2000f40e 	.word	0x2000f40e
   196d4:	2000d394 	.word	0x2000d394
   196d8:	2000d38c 	.word	0x2000d38c
   196dc:	2000d390 	.word	0x2000d390

000196e0 <ipc_trace_handle>:
   196e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196e4:	4b43      	ldr	r3, [pc, #268]	; (197f4 <ipc_trace_handle+0x114>)
   196e6:	681b      	ldr	r3, [r3, #0]
   196e8:	6919      	ldr	r1, [r3, #16]
   196ea:	f8d3 a014 	ldr.w	sl, [r3, #20]
   196ee:	7c1a      	ldrb	r2, [r3, #16]
   196f0:	2200      	movs	r2, #0
   196f2:	741a      	strb	r2, [r3, #16]
   196f4:	7c58      	ldrb	r0, [r3, #17]
   196f6:	745a      	strb	r2, [r3, #17]
   196f8:	7c98      	ldrb	r0, [r3, #18]
   196fa:	749a      	strb	r2, [r3, #18]
   196fc:	7cd8      	ldrb	r0, [r3, #19]
   196fe:	74da      	strb	r2, [r3, #19]
   19700:	7d18      	ldrb	r0, [r3, #20]
   19702:	751a      	strb	r2, [r3, #20]
   19704:	7d58      	ldrb	r0, [r3, #21]
   19706:	755a      	strb	r2, [r3, #21]
   19708:	7d98      	ldrb	r0, [r3, #22]
   1970a:	759a      	strb	r2, [r3, #22]
   1970c:	7dd8      	ldrb	r0, [r3, #23]
   1970e:	75da      	strb	r2, [r3, #23]
   19710:	2900      	cmp	r1, #0
   19712:	d033      	beq.n	1977c <ipc_trace_handle+0x9c>
   19714:	3901      	subs	r1, #1
   19716:	2903      	cmp	r1, #3
   19718:	d830      	bhi.n	1977c <ipc_trace_handle+0x9c>
   1971a:	e8df f001 	tbb	[pc, r1]
   1971e:	6502      	.short	0x6502
   19720:	534c      	.short	0x534c
   19722:	4a35      	ldr	r2, [pc, #212]	; (197f8 <ipc_trace_handle+0x118>)
   19724:	7811      	ldrb	r1, [r2, #0]
   19726:	b109      	cbz	r1, 1972c <ipc_trace_handle+0x4c>
   19728:	2100      	movs	r1, #0
   1972a:	7011      	strb	r1, [r2, #0]
   1972c:	2200      	movs	r2, #0
   1972e:	4691      	mov	r9, r2
   19730:	4617      	mov	r7, r2
   19732:	4614      	mov	r4, r2
   19734:	4d31      	ldr	r5, [pc, #196]	; (197fc <ipc_trace_handle+0x11c>)
   19736:	4932      	ldr	r1, [pc, #200]	; (19800 <ipc_trace_handle+0x120>)
   19738:	4832      	ldr	r0, [pc, #200]	; (19804 <ipc_trace_handle+0x124>)
   1973a:	f8d5 e000 	ldr.w	lr, [r5]
   1973e:	f8d1 8000 	ldr.w	r8, [r1]
   19742:	6806      	ldr	r6, [r0, #0]
   19744:	f8da b008 	ldr.w	fp, [sl, #8]
   19748:	9501      	str	r5, [sp, #4]
   1974a:	45a3      	cmp	fp, r4
   1974c:	d119      	bne.n	19782 <ipc_trace_handle+0xa2>
   1974e:	b107      	cbz	r7, 19752 <ipc_trace_handle+0x72>
   19750:	6006      	str	r6, [r0, #0]
   19752:	f1b9 0f00 	cmp.w	r9, #0
   19756:	d001      	beq.n	1975c <ipc_trace_handle+0x7c>
   19758:	f8c1 8000 	str.w	r8, [r1]
   1975c:	b112      	cbz	r2, 19764 <ipc_trace_handle+0x84>
   1975e:	9a01      	ldr	r2, [sp, #4]
   19760:	f8c2 e000 	str.w	lr, [r2]
   19764:	7a1a      	ldrb	r2, [r3, #8]
   19766:	2101      	movs	r1, #1
   19768:	2200      	movs	r2, #0
   1976a:	7219      	strb	r1, [r3, #8]
   1976c:	7a59      	ldrb	r1, [r3, #9]
   1976e:	725a      	strb	r2, [r3, #9]
   19770:	7a99      	ldrb	r1, [r3, #10]
   19772:	729a      	strb	r2, [r3, #10]
   19774:	7ada      	ldrb	r2, [r3, #11]
   19776:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1977a:	72da      	strb	r2, [r3, #11]
   1977c:	b003      	add	sp, #12
   1977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19782:	1ca5      	adds	r5, r4, #2
   19784:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   19788:	686d      	ldr	r5, [r5, #4]
   1978a:	f895 c000 	ldrb.w	ip, [r5]
   1978e:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   19792:	d009      	beq.n	197a8 <ipc_trace_handle+0xc8>
   19794:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   19798:	d00a      	beq.n	197b0 <ipc_trace_handle+0xd0>
   1979a:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   1979e:	bf04      	itt	eq
   197a0:	462e      	moveq	r6, r5
   197a2:	2701      	moveq	r7, #1
   197a4:	3401      	adds	r4, #1
   197a6:	e7d0      	b.n	1974a <ipc_trace_handle+0x6a>
   197a8:	46a8      	mov	r8, r5
   197aa:	f04f 0901 	mov.w	r9, #1
   197ae:	e7f9      	b.n	197a4 <ipc_trace_handle+0xc4>
   197b0:	46ae      	mov	lr, r5
   197b2:	2201      	movs	r2, #1
   197b4:	e7f6      	b.n	197a4 <ipc_trace_handle+0xc4>
   197b6:	2101      	movs	r1, #1
   197b8:	4a0f      	ldr	r2, [pc, #60]	; (197f8 <ipc_trace_handle+0x118>)
   197ba:	7011      	strb	r1, [r2, #0]
   197bc:	7a1a      	ldrb	r2, [r3, #8]
   197be:	2103      	movs	r1, #3
   197c0:	2200      	movs	r2, #0
   197c2:	e7d2      	b.n	1976a <ipc_trace_handle+0x8a>
   197c4:	7a19      	ldrb	r1, [r3, #8]
   197c6:	2104      	movs	r1, #4
   197c8:	7219      	strb	r1, [r3, #8]
   197ca:	7a59      	ldrb	r1, [r3, #9]
   197cc:	725a      	strb	r2, [r3, #9]
   197ce:	7a99      	ldrb	r1, [r3, #10]
   197d0:	729a      	strb	r2, [r3, #10]
   197d2:	7ad9      	ldrb	r1, [r3, #11]
   197d4:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   197d8:	72d9      	strb	r1, [r3, #11]
   197da:	4b07      	ldr	r3, [pc, #28]	; (197f8 <ipc_trace_handle+0x118>)
   197dc:	701a      	strb	r2, [r3, #0]
   197de:	b003      	add	sp, #12
   197e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197e4:	f7ff bf52 	b.w	1968c <nrf_modem_trace_irq_handler>
   197e8:	b003      	add	sp, #12
   197ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197ee:	f7fc b999 	b.w	15b24 <nrf_modem_os_trace_irq_set>
   197f2:	bf00      	nop
   197f4:	2000d398 	.word	0x2000d398
   197f8:	2000f40e 	.word	0x2000f40e
   197fc:	2000d390 	.word	0x2000d390
   19800:	2000d38c 	.word	0x2000d38c
   19804:	2000d394 	.word	0x2000d394

00019808 <rpc_trace_coredump_in_progress>:
   19808:	4b01      	ldr	r3, [pc, #4]	; (19810 <rpc_trace_coredump_in_progress+0x8>)
   1980a:	7818      	ldrb	r0, [r3, #0]
   1980c:	4770      	bx	lr
   1980e:	bf00      	nop
   19810:	2000f40e 	.word	0x2000f40e

00019814 <handle_modem_rpc_msg>:
   19814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19818:	4606      	mov	r6, r0
   1981a:	460f      	mov	r7, r1
   1981c:	2500      	movs	r5, #0
   1981e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 19894 <handle_modem_rpc_msg+0x80>
   19822:	6833      	ldr	r3, [r6, #0]
   19824:	42ab      	cmp	r3, r5
   19826:	d801      	bhi.n	1982c <handle_modem_rpc_msg+0x18>
   19828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1982c:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   19830:	68a3      	ldr	r3, [r4, #8]
   19832:	b1fb      	cbz	r3, 19874 <handle_modem_rpc_msg+0x60>
   19834:	6863      	ldr	r3, [r4, #4]
   19836:	b2db      	uxtb	r3, r3
   19838:	2b01      	cmp	r3, #1
   1983a:	d11b      	bne.n	19874 <handle_modem_rpc_msg+0x60>
   1983c:	6862      	ldr	r2, [r4, #4]
   1983e:	f8b8 3000 	ldrh.w	r3, [r8]
   19842:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   19846:	d115      	bne.n	19874 <handle_modem_rpc_msg+0x60>
   19848:	2f02      	cmp	r7, #2
   1984a:	68a0      	ldr	r0, [r4, #8]
   1984c:	d114      	bne.n	19878 <handle_modem_rpc_msg+0x64>
   1984e:	f7ff fe2d 	bl	194ac <rpc_handle_data_message>
   19852:	2802      	cmp	r0, #2
   19854:	d00e      	beq.n	19874 <handle_modem_rpc_msg+0x60>
   19856:	2801      	cmp	r0, #1
   19858:	d113      	bne.n	19882 <handle_modem_rpc_msg+0x6e>
   1985a:	6863      	ldr	r3, [r4, #4]
   1985c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19860:	f043 0302 	orr.w	r3, r3, #2
   19864:	6063      	str	r3, [r4, #4]
   19866:	f8b8 3000 	ldrh.w	r3, [r8]
   1986a:	3301      	adds	r3, #1
   1986c:	f8a8 3000 	strh.w	r3, [r8]
   19870:	f7fc f948 	bl	15b04 <nrf_modem_os_application_irq_set>
   19874:	3501      	adds	r5, #1
   19876:	e7d4      	b.n	19822 <handle_modem_rpc_msg+0xe>
   19878:	6801      	ldr	r1, [r0, #0]
   1987a:	0c09      	lsrs	r1, r1, #16
   1987c:	f007 fab2 	bl	20de4 <rpc_handle_ctrl_message>
   19880:	e7e7      	b.n	19852 <handle_modem_rpc_msg+0x3e>
   19882:	2800      	cmp	r0, #0
   19884:	d1ef      	bne.n	19866 <handle_modem_rpc_msg+0x52>
   19886:	6863      	ldr	r3, [r4, #4]
   19888:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1988c:	f043 0303 	orr.w	r3, r3, #3
   19890:	e7e8      	b.n	19864 <handle_modem_rpc_msg+0x50>
   19892:	bf00      	nop
   19894:	2000d642 	.word	0x2000d642

00019898 <rpc_transport_ipc_msg_alloc>:
   19898:	b570      	push	{r4, r5, r6, lr}
   1989a:	4616      	mov	r6, r2
   1989c:	2400      	movs	r4, #0
   1989e:	6803      	ldr	r3, [r0, #0]
   198a0:	42a3      	cmp	r3, r4
   198a2:	d101      	bne.n	198a8 <rpc_transport_ipc_msg_alloc+0x10>
   198a4:	2300      	movs	r3, #0
   198a6:	e01c      	b.n	198e2 <rpc_transport_ipc_msg_alloc+0x4a>
   198a8:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   198ac:	6855      	ldr	r5, [r2, #4]
   198ae:	b2ed      	uxtb	r5, r5
   198b0:	2d03      	cmp	r5, #3
   198b2:	d118      	bne.n	198e6 <rpc_transport_ipc_msg_alloc+0x4e>
   198b4:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   198b8:	6093      	str	r3, [r2, #8]
   198ba:	6851      	ldr	r1, [r2, #4]
   198bc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   198c0:	6051      	str	r1, [r2, #4]
   198c2:	490c      	ldr	r1, [pc, #48]	; (198f4 <rpc_transport_ipc_msg_alloc+0x5c>)
   198c4:	8808      	ldrh	r0, [r1, #0]
   198c6:	1c44      	adds	r4, r0, #1
   198c8:	800c      	strh	r4, [r1, #0]
   198ca:	6851      	ldr	r1, [r2, #4]
   198cc:	b289      	uxth	r1, r1
   198ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   198d2:	6051      	str	r1, [r2, #4]
   198d4:	4618      	mov	r0, r3
   198d6:	2240      	movs	r2, #64	; 0x40
   198d8:	2100      	movs	r1, #0
   198da:	f008 ff5c 	bl	22796 <memset>
   198de:	4603      	mov	r3, r0
   198e0:	6046      	str	r6, [r0, #4]
   198e2:	4618      	mov	r0, r3
   198e4:	bd70      	pop	{r4, r5, r6, pc}
   198e6:	b915      	cbnz	r5, 198ee <rpc_transport_ipc_msg_alloc+0x56>
   198e8:	6895      	ldr	r5, [r2, #8]
   198ea:	2d00      	cmp	r5, #0
   198ec:	d0e2      	beq.n	198b4 <rpc_transport_ipc_msg_alloc+0x1c>
   198ee:	3401      	adds	r4, #1
   198f0:	e7d6      	b.n	198a0 <rpc_transport_ipc_msg_alloc+0x8>
   198f2:	bf00      	nop
   198f4:	2000d644 	.word	0x2000d644

000198f8 <rpc_transport_ipc_data_msg_send>:
   198f8:	b508      	push	{r3, lr}
   198fa:	4b0b      	ldr	r3, [pc, #44]	; (19928 <rpc_transport_ipc_data_msg_send+0x30>)
   198fc:	681b      	ldr	r3, [r3, #0]
   198fe:	1ac0      	subs	r0, r0, r3
   19900:	4b0a      	ldr	r3, [pc, #40]	; (1992c <rpc_transport_ipc_data_msg_send+0x34>)
   19902:	f3c0 1089 	ubfx	r0, r0, #6, #10
   19906:	681b      	ldr	r3, [r3, #0]
   19908:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1990c:	6843      	ldr	r3, [r0, #4]
   1990e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19912:	f043 0301 	orr.w	r3, r3, #1
   19916:	6043      	str	r3, [r0, #4]
   19918:	2003      	movs	r0, #3
   1991a:	f006 fe44 	bl	205a6 <nrf_modem_os_busywait>
   1991e:	2201      	movs	r2, #1
   19920:	4b03      	ldr	r3, [pc, #12]	; (19930 <rpc_transport_ipc_data_msg_send+0x38>)
   19922:	601a      	str	r2, [r3, #0]
   19924:	bd08      	pop	{r3, pc}
   19926:	bf00      	nop
   19928:	2000d3b8 	.word	0x2000d3b8
   1992c:	2000d3bc 	.word	0x2000d3bc
   19930:	4002a00c 	.word	0x4002a00c

00019934 <rpc_transport_ipc_ctrl_msg_send>:
   19934:	b508      	push	{r3, lr}
   19936:	4b0b      	ldr	r3, [pc, #44]	; (19964 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   19938:	681b      	ldr	r3, [r3, #0]
   1993a:	1ac0      	subs	r0, r0, r3
   1993c:	4b0a      	ldr	r3, [pc, #40]	; (19968 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   1993e:	f3c0 1089 	ubfx	r0, r0, #6, #10
   19942:	681b      	ldr	r3, [r3, #0]
   19944:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19948:	6843      	ldr	r3, [r0, #4]
   1994a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1994e:	f043 0301 	orr.w	r3, r3, #1
   19952:	6043      	str	r3, [r0, #4]
   19954:	2003      	movs	r0, #3
   19956:	f006 fe26 	bl	205a6 <nrf_modem_os_busywait>
   1995a:	2201      	movs	r2, #1
   1995c:	4b03      	ldr	r3, [pc, #12]	; (1996c <rpc_transport_ipc_ctrl_msg_send+0x38>)
   1995e:	601a      	str	r2, [r3, #0]
   19960:	bd08      	pop	{r3, pc}
   19962:	bf00      	nop
   19964:	2000d3b0 	.word	0x2000d3b0
   19968:	2000d3b4 	.word	0x2000d3b4
   1996c:	4002a004 	.word	0x4002a004

00019970 <rpc_transport_ipc_data_msg_alloc>:
   19970:	4b05      	ldr	r3, [pc, #20]	; (19988 <rpc_transport_ipc_data_msg_alloc+0x18>)
   19972:	781b      	ldrb	r3, [r3, #0]
   19974:	b933      	cbnz	r3, 19984 <rpc_transport_ipc_data_msg_alloc+0x14>
   19976:	4b05      	ldr	r3, [pc, #20]	; (1998c <rpc_transport_ipc_data_msg_alloc+0x1c>)
   19978:	2202      	movs	r2, #2
   1997a:	6819      	ldr	r1, [r3, #0]
   1997c:	4b04      	ldr	r3, [pc, #16]	; (19990 <rpc_transport_ipc_data_msg_alloc+0x20>)
   1997e:	6818      	ldr	r0, [r3, #0]
   19980:	f7ff bf8a 	b.w	19898 <rpc_transport_ipc_msg_alloc>
   19984:	2000      	movs	r0, #0
   19986:	4770      	bx	lr
   19988:	2000f410 	.word	0x2000f410
   1998c:	2000d3b8 	.word	0x2000d3b8
   19990:	2000d3bc 	.word	0x2000d3bc

00019994 <rpc_transport_ipc_ctrl_msg_alloc>:
   19994:	230a      	movs	r3, #10
   19996:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19998:	4c0c      	ldr	r4, [pc, #48]	; (199cc <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   1999a:	4d0d      	ldr	r5, [pc, #52]	; (199d0 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   1999c:	9301      	str	r3, [sp, #4]
   1999e:	2201      	movs	r2, #1
   199a0:	6821      	ldr	r1, [r4, #0]
   199a2:	6828      	ldr	r0, [r5, #0]
   199a4:	f7ff ff78 	bl	19898 <rpc_transport_ipc_msg_alloc>
   199a8:	b968      	cbnz	r0, 199c6 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   199aa:	f006 fe04 	bl	205b6 <nrf_modem_os_is_in_isr>
   199ae:	b918      	cbnz	r0, 199b8 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   199b0:	a901      	add	r1, sp, #4
   199b2:	f7fb ffd3 	bl	1595c <nrf_modem_os_timedwait>
   199b6:	e7f2      	b.n	1999e <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   199b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   199bc:	9b01      	ldr	r3, [sp, #4]
   199be:	4358      	muls	r0, r3
   199c0:	f006 fdf1 	bl	205a6 <nrf_modem_os_busywait>
   199c4:	e7eb      	b.n	1999e <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   199c6:	b003      	add	sp, #12
   199c8:	bd30      	pop	{r4, r5, pc}
   199ca:	bf00      	nop
   199cc:	2000d3b0 	.word	0x2000d3b0
   199d0:	2000d3b4 	.word	0x2000d3b4

000199d4 <rpc_transport_ipc_data_alloc>:
   199d4:	4b03      	ldr	r3, [pc, #12]	; (199e4 <rpc_transport_ipc_data_alloc+0x10>)
   199d6:	781b      	ldrb	r3, [r3, #0]
   199d8:	b90b      	cbnz	r3, 199de <rpc_transport_ipc_data_alloc+0xa>
   199da:	f7fc b8c1 	b.w	15b60 <nrf_modem_os_shm_tx_alloc>
   199de:	2000      	movs	r0, #0
   199e0:	4770      	bx	lr
   199e2:	bf00      	nop
   199e4:	2000f410 	.word	0x2000f410

000199e8 <nrf_modem_application_irq_handler>:
   199e8:	b510      	push	{r4, lr}
   199ea:	4c06      	ldr	r4, [pc, #24]	; (19a04 <nrf_modem_application_irq_handler+0x1c>)
   199ec:	f7fc f892 	bl	15b14 <nrf_modem_os_application_irq_clear>
   199f0:	6820      	ldr	r0, [r4, #0]
   199f2:	2101      	movs	r1, #1
   199f4:	f7ff ff0e 	bl	19814 <handle_modem_rpc_msg>
   199f8:	6860      	ldr	r0, [r4, #4]
   199fa:	2102      	movs	r1, #2
   199fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19a00:	f7ff bf08 	b.w	19814 <handle_modem_rpc_msg>
   19a04:	2000d3a4 	.word	0x2000d3a4

00019a08 <rpc_transport_ipc_msg_free>:
   19a08:	2300      	movs	r3, #0
   19a0a:	4911      	ldr	r1, [pc, #68]	; (19a50 <rpc_transport_ipc_msg_free+0x48>)
   19a0c:	b530      	push	{r4, r5, lr}
   19a0e:	680a      	ldr	r2, [r1, #0]
   19a10:	6814      	ldr	r4, [r2, #0]
   19a12:	42a3      	cmp	r3, r4
   19a14:	d10b      	bne.n	19a2e <rpc_transport_ipc_msg_free+0x26>
   19a16:	2300      	movs	r3, #0
   19a18:	684a      	ldr	r2, [r1, #4]
   19a1a:	6811      	ldr	r1, [r2, #0]
   19a1c:	428b      	cmp	r3, r1
   19a1e:	d015      	beq.n	19a4c <rpc_transport_ipc_msg_free+0x44>
   19a20:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   19a24:	68a4      	ldr	r4, [r4, #8]
   19a26:	42a0      	cmp	r0, r4
   19a28:	d008      	beq.n	19a3c <rpc_transport_ipc_msg_free+0x34>
   19a2a:	3301      	adds	r3, #1
   19a2c:	e7f6      	b.n	19a1c <rpc_transport_ipc_msg_free+0x14>
   19a2e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   19a32:	68ad      	ldr	r5, [r5, #8]
   19a34:	42a8      	cmp	r0, r5
   19a36:	d001      	beq.n	19a3c <rpc_transport_ipc_msg_free+0x34>
   19a38:	3301      	adds	r3, #1
   19a3a:	e7ea      	b.n	19a12 <rpc_transport_ipc_msg_free+0xa>
   19a3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19a40:	685a      	ldr	r2, [r3, #4]
   19a42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   19a46:	f042 0203 	orr.w	r2, r2, #3
   19a4a:	605a      	str	r2, [r3, #4]
   19a4c:	bd30      	pop	{r4, r5, pc}
   19a4e:	bf00      	nop
   19a50:	2000d3a4 	.word	0x2000d3a4

00019a54 <rpc_transport_ipc_init>:
   19a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a58:	2200      	movs	r2, #0
   19a5a:	b095      	sub	sp, #84	; 0x54
   19a5c:	4605      	mov	r5, r0
   19a5e:	494d      	ldr	r1, [pc, #308]	; (19b94 <rpc_transport_ipc_init+0x140>)
   19a60:	7900      	ldrb	r0, [r0, #4]
   19a62:	f7ff fc9b 	bl	1939c <nrfx_ipc_init>
   19a66:	2238      	movs	r2, #56	; 0x38
   19a68:	2100      	movs	r1, #0
   19a6a:	a803      	add	r0, sp, #12
   19a6c:	f008 fe93 	bl	22796 <memset>
   19a70:	2302      	movs	r3, #2
   19a72:	9304      	str	r3, [sp, #16]
   19a74:	2308      	movs	r3, #8
   19a76:	9306      	str	r3, [sp, #24]
   19a78:	2320      	movs	r3, #32
   19a7a:	9308      	str	r3, [sp, #32]
   19a7c:	2301      	movs	r3, #1
   19a7e:	930b      	str	r3, [sp, #44]	; 0x2c
   19a80:	2304      	movs	r3, #4
   19a82:	930d      	str	r3, [sp, #52]	; 0x34
   19a84:	2310      	movs	r3, #16
   19a86:	f04f 0c40 	mov.w	ip, #64	; 0x40
   19a8a:	930f      	str	r3, [sp, #60]	; 0x3c
   19a8c:	2380      	movs	r3, #128	; 0x80
   19a8e:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   19a92:	23d5      	movs	r3, #213	; 0xd5
   19a94:	a803      	add	r0, sp, #12
   19a96:	9313      	str	r3, [sp, #76]	; 0x4c
   19a98:	f7ff fc98 	bl	193cc <nrfx_ipc_config_load>
   19a9c:	682b      	ldr	r3, [r5, #0]
   19a9e:	2100      	movs	r1, #0
   19aa0:	685a      	ldr	r2, [r3, #4]
   19aa2:	6818      	ldr	r0, [r3, #0]
   19aa4:	f008 fe77 	bl	22796 <memset>
   19aa8:	682a      	ldr	r2, [r5, #0]
   19aaa:	6814      	ldr	r4, [r2, #0]
   19aac:	69d3      	ldr	r3, [r2, #28]
   19aae:	f104 0660 	add.w	r6, r4, #96	; 0x60
   19ab2:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   19ab6:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   19aba:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   19abe:	f104 0920 	add.w	r9, r4, #32
   19ac2:	2b00      	cmp	r3, #0
   19ac4:	d060      	beq.n	19b88 <rpc_transport_ipc_init+0x134>
   19ac6:	f104 0840 	add.w	r8, r4, #64	; 0x40
   19aca:	4933      	ldr	r1, [pc, #204]	; (19b98 <rpc_transport_ipc_init+0x144>)
   19acc:	f8c1 9000 	str.w	r9, [r1]
   19ad0:	b13b      	cbz	r3, 19ae2 <rpc_transport_ipc_init+0x8e>
   19ad2:	6992      	ldr	r2, [r2, #24]
   19ad4:	4640      	mov	r0, r8
   19ad6:	f8c8 2004 	str.w	r2, [r8, #4]
   19ada:	f8c8 3000 	str.w	r3, [r8]
   19ade:	f7ff fdb9 	bl	19654 <ipc_trace_init>
   19ae2:	6828      	ldr	r0, [r5, #0]
   19ae4:	2300      	movs	r3, #0
   19ae6:	6902      	ldr	r2, [r0, #16]
   19ae8:	2101      	movs	r1, #1
   19aea:	6062      	str	r2, [r4, #4]
   19aec:	6942      	ldr	r2, [r0, #20]
   19aee:	70a1      	strb	r1, [r4, #2]
   19af0:	60a2      	str	r2, [r4, #8]
   19af2:	4a2a      	ldr	r2, [pc, #168]	; (19b9c <rpc_transport_ipc_init+0x148>)
   19af4:	7023      	strb	r3, [r4, #0]
   19af6:	6017      	str	r7, [r2, #0]
   19af8:	4a29      	ldr	r2, [pc, #164]	; (19ba0 <rpc_transport_ipc_init+0x14c>)
   19afa:	7063      	strb	r3, [r4, #1]
   19afc:	6016      	str	r6, [r2, #0]
   19afe:	2208      	movs	r2, #8
   19b00:	70e3      	strb	r3, [r4, #3]
   19b02:	60e6      	str	r6, [r4, #12]
   19b04:	6127      	str	r7, [r4, #16]
   19b06:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   19b0a:	f8c4 9014 	str.w	r9, [r4, #20]
   19b0e:	f8c4 8018 	str.w	r8, [r4, #24]
   19b12:	707b      	strb	r3, [r7, #1]
   19b14:	70bb      	strb	r3, [r7, #2]
   19b16:	70fb      	strb	r3, [r7, #3]
   19b18:	2714      	movs	r7, #20
   19b1a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   19b1e:	4a21      	ldr	r2, [pc, #132]	; (19ba4 <rpc_transport_ipc_init+0x150>)
   19b20:	4d21      	ldr	r5, [pc, #132]	; (19ba8 <rpc_transport_ipc_init+0x154>)
   19b22:	f8c2 b000 	str.w	fp, [r2]
   19b26:	4a21      	ldr	r2, [pc, #132]	; (19bac <rpc_transport_ipc_init+0x158>)
   19b28:	7073      	strb	r3, [r6, #1]
   19b2a:	f8c2 a000 	str.w	sl, [r2]
   19b2e:	4a20      	ldr	r2, [pc, #128]	; (19bb0 <rpc_transport_ipc_init+0x15c>)
   19b30:	70b3      	strb	r3, [r6, #2]
   19b32:	70f3      	strb	r3, [r6, #3]
   19b34:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   19b38:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   19b3c:	4c1d      	ldr	r4, [pc, #116]	; (19bb4 <rpc_transport_ipc_init+0x160>)
   19b3e:	7029      	strb	r1, [r5, #0]
   19b40:	491d      	ldr	r1, [pc, #116]	; (19bb8 <rpc_transport_ipc_init+0x164>)
   19b42:	6023      	str	r3, [r4, #0]
   19b44:	9302      	str	r3, [sp, #8]
   19b46:	600b      	str	r3, [r1, #0]
   19b48:	680b      	ldr	r3, [r1, #0]
   19b4a:	4e1c      	ldr	r6, [pc, #112]	; (19bbc <rpc_transport_ipc_init+0x168>)
   19b4c:	9302      	str	r3, [sp, #8]
   19b4e:	9b02      	ldr	r3, [sp, #8]
   19b50:	2000      	movs	r0, #0
   19b52:	a901      	add	r1, sp, #4
   19b54:	9701      	str	r7, [sp, #4]
   19b56:	f7fb ff01 	bl	1595c <nrf_modem_os_timedwait>
   19b5a:	9b01      	ldr	r3, [sp, #4]
   19b5c:	3b14      	subs	r3, #20
   19b5e:	441e      	add	r6, r3
   19b60:	782b      	ldrb	r3, [r5, #0]
   19b62:	2b01      	cmp	r3, #1
   19b64:	d104      	bne.n	19b70 <rpc_transport_ipc_init+0x11c>
   19b66:	2e00      	cmp	r6, #0
   19b68:	d1f2      	bne.n	19b50 <rpc_transport_ipc_init+0xfc>
   19b6a:	f06f 0373 	mvn.w	r3, #115	; 0x73
   19b6e:	6023      	str	r3, [r4, #0]
   19b70:	6824      	ldr	r4, [r4, #0]
   19b72:	b95c      	cbnz	r4, 19b8c <rpc_transport_ipc_init+0x138>
   19b74:	4b12      	ldr	r3, [pc, #72]	; (19bc0 <rpc_transport_ipc_init+0x16c>)
   19b76:	701c      	strb	r4, [r3, #0]
   19b78:	4b12      	ldr	r3, [pc, #72]	; (19bc4 <rpc_transport_ipc_init+0x170>)
   19b7a:	801c      	strh	r4, [r3, #0]
   19b7c:	4b12      	ldr	r3, [pc, #72]	; (19bc8 <rpc_transport_ipc_init+0x174>)
   19b7e:	801c      	strh	r4, [r3, #0]
   19b80:	4620      	mov	r0, r4
   19b82:	b015      	add	sp, #84	; 0x54
   19b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b88:	4698      	mov	r8, r3
   19b8a:	e79e      	b.n	19aca <rpc_transport_ipc_init+0x76>
   19b8c:	f7ff fc3e 	bl	1940c <nrfx_ipc_uninit>
   19b90:	e7f6      	b.n	19b80 <rpc_transport_ipc_init+0x12c>
   19b92:	bf00      	nop
   19b94:	00019bcd 	.word	0x00019bcd
   19b98:	2000d3ac 	.word	0x2000d3ac
   19b9c:	2000d3bc 	.word	0x2000d3bc
   19ba0:	2000d3b4 	.word	0x2000d3b4
   19ba4:	2000d3b8 	.word	0x2000d3b8
   19ba8:	2000f40f 	.word	0x2000f40f
   19bac:	2000d3b0 	.word	0x2000d3b0
   19bb0:	4002a000 	.word	0x4002a000
   19bb4:	2000d3a0 	.word	0x2000d3a0
   19bb8:	40005610 	.word	0x40005610
   19bbc:	000249f0 	.word	0x000249f0
   19bc0:	2000f410 	.word	0x2000f410
   19bc4:	2000d644 	.word	0x2000d644
   19bc8:	2000d642 	.word	0x2000d642

00019bcc <ipc_irq_handler>:
   19bcc:	b570      	push	{r4, r5, r6, lr}
   19bce:	4604      	mov	r4, r0
   19bd0:	0620      	lsls	r0, r4, #24
   19bd2:	d50c      	bpl.n	19bee <ipc_irq_handler+0x22>
   19bd4:	f7ff fd84 	bl	196e0 <ipc_trace_handle>
   19bd8:	f7ff fe16 	bl	19808 <rpc_trace_coredump_in_progress>
   19bdc:	b138      	cbz	r0, 19bee <ipc_irq_handler+0x22>
   19bde:	22e0      	movs	r2, #224	; 0xe0
   19be0:	4b3e      	ldr	r3, [pc, #248]	; (19cdc <ipc_irq_handler+0x110>)
   19be2:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   19be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19bea:	605a      	str	r2, [r3, #4]
   19bec:	bd70      	pop	{r4, r5, r6, pc}
   19bee:	07e1      	lsls	r1, r4, #31
   19bf0:	d548      	bpl.n	19c84 <ipc_irq_handler+0xb8>
   19bf2:	f248 0202 	movw	r2, #32770	; 0x8002
   19bf6:	4b3a      	ldr	r3, [pc, #232]	; (19ce0 <ipc_irq_handler+0x114>)
   19bf8:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   19bfc:	4293      	cmp	r3, r2
   19bfe:	d035      	beq.n	19c6c <ipc_irq_handler+0xa0>
   19c00:	d81b      	bhi.n	19c3a <ipc_irq_handler+0x6e>
   19c02:	f243 0232 	movw	r2, #12338	; 0x3032
   19c06:	4293      	cmp	r3, r2
   19c08:	d036      	beq.n	19c78 <ipc_irq_handler+0xac>
   19c0a:	d80b      	bhi.n	19c24 <ipc_irq_handler+0x58>
   19c0c:	3b01      	subs	r3, #1
   19c0e:	2b01      	cmp	r3, #1
   19c10:	d8ec      	bhi.n	19bec <ipc_irq_handler+0x20>
   19c12:	2203      	movs	r2, #3
   19c14:	200e      	movs	r0, #14
   19c16:	4b33      	ldr	r3, [pc, #204]	; (19ce4 <ipc_irq_handler+0x118>)
   19c18:	701a      	strb	r2, [r3, #0]
   19c1a:	4b33      	ldr	r3, [pc, #204]	; (19ce8 <ipc_irq_handler+0x11c>)
   19c1c:	6018      	str	r0, [r3, #0]
   19c1e:	f007 fe66 	bl	218ee <rpc_transport_ipc_fault_handler>
   19c22:	e7e3      	b.n	19bec <ipc_irq_handler+0x20>
   19c24:	f248 0201 	movw	r2, #32769	; 0x8001
   19c28:	4293      	cmp	r3, r2
   19c2a:	d1df      	bne.n	19bec <ipc_irq_handler+0x20>
   19c2c:	2203      	movs	r2, #3
   19c2e:	4b2d      	ldr	r3, [pc, #180]	; (19ce4 <ipc_irq_handler+0x118>)
   19c30:	701a      	strb	r2, [r3, #0]
   19c32:	2216      	movs	r2, #22
   19c34:	4b2c      	ldr	r3, [pc, #176]	; (19ce8 <ipc_irq_handler+0x11c>)
   19c36:	601a      	str	r2, [r3, #0]
   19c38:	e7d8      	b.n	19bec <ipc_irq_handler+0x20>
   19c3a:	4a2c      	ldr	r2, [pc, #176]	; (19cec <ipc_irq_handler+0x120>)
   19c3c:	4293      	cmp	r3, r2
   19c3e:	d80c      	bhi.n	19c5a <ipc_irq_handler+0x8e>
   19c40:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   19c44:	d80c      	bhi.n	19c60 <ipc_irq_handler+0x94>
   19c46:	f248 0203 	movw	r2, #32771	; 0x8003
   19c4a:	4293      	cmp	r3, r2
   19c4c:	d1ce      	bne.n	19bec <ipc_irq_handler+0x20>
   19c4e:	2203      	movs	r2, #3
   19c50:	4b24      	ldr	r3, [pc, #144]	; (19ce4 <ipc_irq_handler+0x118>)
   19c52:	701a      	strb	r2, [r3, #0]
   19c54:	220c      	movs	r2, #12
   19c56:	4b24      	ldr	r3, [pc, #144]	; (19ce8 <ipc_irq_handler+0x11c>)
   19c58:	e7ed      	b.n	19c36 <ipc_irq_handler+0x6a>
   19c5a:	4a25      	ldr	r2, [pc, #148]	; (19cf0 <ipc_irq_handler+0x124>)
   19c5c:	4293      	cmp	r3, r2
   19c5e:	d1c5      	bne.n	19bec <ipc_irq_handler+0x20>
   19c60:	2103      	movs	r1, #3
   19c62:	4a20      	ldr	r2, [pc, #128]	; (19ce4 <ipc_irq_handler+0x118>)
   19c64:	7011      	strb	r1, [r2, #0]
   19c66:	4a20      	ldr	r2, [pc, #128]	; (19ce8 <ipc_irq_handler+0x11c>)
   19c68:	6013      	str	r3, [r2, #0]
   19c6a:	e7bf      	b.n	19bec <ipc_irq_handler+0x20>
   19c6c:	2203      	movs	r2, #3
   19c6e:	4b1d      	ldr	r3, [pc, #116]	; (19ce4 <ipc_irq_handler+0x118>)
   19c70:	701a      	strb	r2, [r3, #0]
   19c72:	225f      	movs	r2, #95	; 0x5f
   19c74:	4b1c      	ldr	r3, [pc, #112]	; (19ce8 <ipc_irq_handler+0x11c>)
   19c76:	e7de      	b.n	19c36 <ipc_irq_handler+0x6a>
   19c78:	2203      	movs	r2, #3
   19c7a:	4b1a      	ldr	r3, [pc, #104]	; (19ce4 <ipc_irq_handler+0x118>)
   19c7c:	701a      	strb	r2, [r3, #0]
   19c7e:	2205      	movs	r2, #5
   19c80:	4b19      	ldr	r3, [pc, #100]	; (19ce8 <ipc_irq_handler+0x11c>)
   19c82:	e7d8      	b.n	19c36 <ipc_irq_handler+0x6a>
   19c84:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   19c88:	d003      	beq.n	19c92 <ipc_irq_handler+0xc6>
   19c8a:	2202      	movs	r2, #2
   19c8c:	4b15      	ldr	r3, [pc, #84]	; (19ce4 <ipc_irq_handler+0x118>)
   19c8e:	701a      	strb	r2, [r3, #0]
   19c90:	e7ac      	b.n	19bec <ipc_irq_handler+0x20>
   19c92:	0762      	lsls	r2, r4, #29
   19c94:	d505      	bpl.n	19ca2 <ipc_irq_handler+0xd6>
   19c96:	4b13      	ldr	r3, [pc, #76]	; (19ce4 <ipc_irq_handler+0x118>)
   19c98:	781a      	ldrb	r2, [r3, #0]
   19c9a:	461e      	mov	r6, r3
   19c9c:	b93a      	cbnz	r2, 19cae <ipc_irq_handler+0xe2>
   19c9e:	f7fb ff31 	bl	15b04 <nrf_modem_os_application_irq_set>
   19ca2:	06e3      	lsls	r3, r4, #27
   19ca4:	d5a2      	bpl.n	19bec <ipc_irq_handler+0x20>
   19ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19caa:	f7fb bf2b 	b.w	15b04 <nrf_modem_os_application_irq_set>
   19cae:	2a01      	cmp	r2, #1
   19cb0:	d1f7      	bne.n	19ca2 <ipc_irq_handler+0xd6>
   19cb2:	4a10      	ldr	r2, [pc, #64]	; (19cf4 <ipc_irq_handler+0x128>)
   19cb4:	4810      	ldr	r0, [pc, #64]	; (19cf8 <ipc_irq_handler+0x12c>)
   19cb6:	6812      	ldr	r2, [r2, #0]
   19cb8:	6891      	ldr	r1, [r2, #8]
   19cba:	6041      	str	r1, [r0, #4]
   19cbc:	6852      	ldr	r2, [r2, #4]
   19cbe:	6002      	str	r2, [r0, #0]
   19cc0:	b121      	cbz	r1, 19ccc <ipc_irq_handler+0x100>
   19cc2:	b11a      	cbz	r2, 19ccc <ipc_irq_handler+0x100>
   19cc4:	6809      	ldr	r1, [r1, #0]
   19cc6:	b109      	cbz	r1, 19ccc <ipc_irq_handler+0x100>
   19cc8:	6812      	ldr	r2, [r2, #0]
   19cca:	b92a      	cbnz	r2, 19cd8 <ipc_irq_handler+0x10c>
   19ccc:	2303      	movs	r3, #3
   19cce:	2205      	movs	r2, #5
   19cd0:	7033      	strb	r3, [r6, #0]
   19cd2:	4b05      	ldr	r3, [pc, #20]	; (19ce8 <ipc_irq_handler+0x11c>)
   19cd4:	601a      	str	r2, [r3, #0]
   19cd6:	e7e4      	b.n	19ca2 <ipc_irq_handler+0xd6>
   19cd8:	701d      	strb	r5, [r3, #0]
   19cda:	e7e2      	b.n	19ca2 <ipc_irq_handler+0xd6>
   19cdc:	e000e100 	.word	0xe000e100
   19ce0:	4002a000 	.word	0x4002a000
   19ce4:	2000f40f 	.word	0x2000f40f
   19ce8:	2000d3a0 	.word	0x2000d3a0
   19cec:	04400004 	.word	0x04400004
   19cf0:	05500001 	.word	0x05500001
   19cf4:	2000d3ac 	.word	0x2000d3ac
   19cf8:	2000d3a4 	.word	0x2000d3a4

00019cfc <interface_init>:
   19cfc:	b508      	push	{r3, lr}
   19cfe:	f44f 72b0 	mov.w	r2, #352	; 0x160
   19d02:	2100      	movs	r1, #0
   19d04:	4802      	ldr	r0, [pc, #8]	; (19d10 <interface_init+0x14>)
   19d06:	f008 fd46 	bl	22796 <memset>
   19d0a:	2000      	movs	r0, #0
   19d0c:	bd08      	pop	{r3, pc}
   19d0e:	bf00      	nop
   19d10:	2000d3c0 	.word	0x2000d3c0

00019d14 <interface_socket_allocate>:
   19d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d16:	4606      	mov	r6, r0
   19d18:	2400      	movs	r4, #0
   19d1a:	272c      	movs	r7, #44	; 0x2c
   19d1c:	4b0f      	ldr	r3, [pc, #60]	; (19d5c <interface_socket_allocate+0x48>)
   19d1e:	fb07 f004 	mul.w	r0, r7, r4
   19d22:	181d      	adds	r5, r3, r0
   19d24:	5818      	ldr	r0, [r3, r0]
   19d26:	b988      	cbnz	r0, 19d4c <interface_socket_allocate+0x38>
   19d28:	f04f 37ff 	mov.w	r7, #4294967295
   19d2c:	2301      	movs	r3, #1
   19d2e:	4628      	mov	r0, r5
   19d30:	61af      	str	r7, [r5, #24]
   19d32:	602b      	str	r3, [r5, #0]
   19d34:	f007 f8c9 	bl	20eca <packet_handler_alloc_and_init>
   19d38:	b168      	cbz	r0, 19d56 <interface_socket_allocate+0x42>
   19d3a:	4628      	mov	r0, r5
   19d3c:	f007 f8dc 	bl	20ef8 <socket_free>
   19d40:	200c      	movs	r0, #12
   19d42:	f006 fc32 	bl	205aa <nrf_modem_os_errno_set>
   19d46:	f04f 34ff 	mov.w	r4, #4294967295
   19d4a:	e005      	b.n	19d58 <interface_socket_allocate+0x44>
   19d4c:	3401      	adds	r4, #1
   19d4e:	2c08      	cmp	r4, #8
   19d50:	d1e5      	bne.n	19d1e <interface_socket_allocate+0xa>
   19d52:	2069      	movs	r0, #105	; 0x69
   19d54:	e7f5      	b.n	19d42 <interface_socket_allocate+0x2e>
   19d56:	6035      	str	r5, [r6, #0]
   19d58:	4620      	mov	r0, r4
   19d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d5c:	2000d3c0 	.word	0x2000d3c0

00019d60 <interface_socket_free>:
   19d60:	2807      	cmp	r0, #7
   19d62:	d805      	bhi.n	19d70 <interface_socket_free+0x10>
   19d64:	222c      	movs	r2, #44	; 0x2c
   19d66:	4b03      	ldr	r3, [pc, #12]	; (19d74 <interface_socket_free+0x14>)
   19d68:	fb02 3000 	mla	r0, r2, r0, r3
   19d6c:	f007 b8c4 	b.w	20ef8 <socket_free>
   19d70:	4770      	bx	lr
   19d72:	bf00      	nop
   19d74:	2000d3c0 	.word	0x2000d3c0

00019d78 <interface_socket_packet_handler_update>:
   19d78:	2807      	cmp	r0, #7
   19d7a:	b570      	push	{r4, r5, r6, lr}
   19d7c:	d812      	bhi.n	19da4 <interface_socket_packet_handler_update+0x2c>
   19d7e:	232c      	movs	r3, #44	; 0x2c
   19d80:	4358      	muls	r0, r3
   19d82:	4c09      	ldr	r4, [pc, #36]	; (19da8 <interface_socket_packet_handler_update+0x30>)
   19d84:	5823      	ldr	r3, [r4, r0]
   19d86:	1825      	adds	r5, r4, r0
   19d88:	b163      	cbz	r3, 19da4 <interface_socket_packet_handler_update+0x2c>
   19d8a:	4628      	mov	r0, r5
   19d8c:	69ee      	ldr	r6, [r5, #28]
   19d8e:	f007 f89c 	bl	20eca <packet_handler_alloc_and_init>
   19d92:	4604      	mov	r4, r0
   19d94:	b920      	cbnz	r0, 19da0 <interface_socket_packet_handler_update+0x28>
   19d96:	4630      	mov	r0, r6
   19d98:	f007 fd8b 	bl	218b2 <packet_handler_delete>
   19d9c:	4620      	mov	r0, r4
   19d9e:	bd70      	pop	{r4, r5, r6, pc}
   19da0:	61ee      	str	r6, [r5, #28]
   19da2:	e7fb      	b.n	19d9c <interface_socket_packet_handler_update+0x24>
   19da4:	2402      	movs	r4, #2
   19da6:	e7f9      	b.n	19d9c <interface_socket_packet_handler_update+0x24>
   19da8:	2000d3c0 	.word	0x2000d3c0

00019dac <interface_socket_wait>:
   19dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19db0:	4615      	mov	r5, r2
   19db2:	222c      	movs	r2, #44	; 0x2c
   19db4:	4350      	muls	r0, r2
   19db6:	461e      	mov	r6, r3
   19db8:	4b0e      	ldr	r3, [pc, #56]	; (19df4 <interface_socket_wait+0x48>)
   19dba:	460c      	mov	r4, r1
   19dbc:	181f      	adds	r7, r3, r0
   19dbe:	581b      	ldr	r3, [r3, r0]
   19dc0:	402b      	ands	r3, r5
   19dc2:	428b      	cmp	r3, r1
   19dc4:	d102      	bne.n	19dcc <interface_socket_wait+0x20>
   19dc6:	2000      	movs	r0, #0
   19dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19dcc:	687b      	ldr	r3, [r7, #4]
   19dce:	2b00      	cmp	r3, #0
   19dd0:	d1f9      	bne.n	19dc6 <interface_socket_wait+0x1a>
   19dd2:	46b8      	mov	r8, r7
   19dd4:	f8d8 3000 	ldr.w	r3, [r8]
   19dd8:	402b      	ands	r3, r5
   19dda:	42a3      	cmp	r3, r4
   19ddc:	d0f3      	beq.n	19dc6 <interface_socket_wait+0x1a>
   19dde:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19de2:	2b00      	cmp	r3, #0
   19de4:	d1ef      	bne.n	19dc6 <interface_socket_wait+0x1a>
   19de6:	4631      	mov	r1, r6
   19de8:	4638      	mov	r0, r7
   19dea:	f7fb fdb7 	bl	1595c <nrf_modem_os_timedwait>
   19dee:	2800      	cmp	r0, #0
   19df0:	d0f0      	beq.n	19dd4 <interface_socket_wait+0x28>
   19df2:	e7e9      	b.n	19dc8 <interface_socket_wait+0x1c>
   19df4:	2000d3c0 	.word	0x2000d3c0

00019df8 <interface_sockets_aux_state_set>:
   19df8:	4a0d      	ldr	r2, [pc, #52]	; (19e30 <interface_sockets_aux_state_set+0x38>)
   19dfa:	b570      	push	{r4, r5, r6, lr}
   19dfc:	2300      	movs	r3, #0
   19dfe:	4611      	mov	r1, r2
   19e00:	252c      	movs	r5, #44	; 0x2c
   19e02:	fb05 f403 	mul.w	r4, r5, r3
   19e06:	590c      	ldr	r4, [r1, r4]
   19e08:	b15c      	cbz	r4, 19e22 <interface_sockets_aux_state_set+0x2a>
   19e0a:	68d4      	ldr	r4, [r2, #12]
   19e0c:	f024 0608 	bic.w	r6, r4, #8
   19e10:	2e02      	cmp	r6, #2
   19e12:	d001      	beq.n	19e18 <interface_sockets_aux_state_set+0x20>
   19e14:	2c05      	cmp	r4, #5
   19e16:	d104      	bne.n	19e22 <interface_sockets_aux_state_set+0x2a>
   19e18:	fb05 f603 	mul.w	r6, r5, r3
   19e1c:	598c      	ldr	r4, [r1, r6]
   19e1e:	4304      	orrs	r4, r0
   19e20:	518c      	str	r4, [r1, r6]
   19e22:	3301      	adds	r3, #1
   19e24:	2b08      	cmp	r3, #8
   19e26:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   19e2a:	d1ea      	bne.n	19e02 <interface_sockets_aux_state_set+0xa>
   19e2c:	bd70      	pop	{r4, r5, r6, pc}
   19e2e:	bf00      	nop
   19e30:	2000d3c0 	.word	0x2000d3c0

00019e34 <interface_sockets_aux_state_clear>:
   19e34:	4a0d      	ldr	r2, [pc, #52]	; (19e6c <interface_sockets_aux_state_clear+0x38>)
   19e36:	b570      	push	{r4, r5, r6, lr}
   19e38:	2300      	movs	r3, #0
   19e3a:	4611      	mov	r1, r2
   19e3c:	252c      	movs	r5, #44	; 0x2c
   19e3e:	43c0      	mvns	r0, r0
   19e40:	fb05 f403 	mul.w	r4, r5, r3
   19e44:	590c      	ldr	r4, [r1, r4]
   19e46:	b15c      	cbz	r4, 19e60 <interface_sockets_aux_state_clear+0x2c>
   19e48:	68d4      	ldr	r4, [r2, #12]
   19e4a:	f024 0608 	bic.w	r6, r4, #8
   19e4e:	2e02      	cmp	r6, #2
   19e50:	d001      	beq.n	19e56 <interface_sockets_aux_state_clear+0x22>
   19e52:	2c05      	cmp	r4, #5
   19e54:	d104      	bne.n	19e60 <interface_sockets_aux_state_clear+0x2c>
   19e56:	fb05 f603 	mul.w	r6, r5, r3
   19e5a:	598c      	ldr	r4, [r1, r6]
   19e5c:	4004      	ands	r4, r0
   19e5e:	518c      	str	r4, [r1, r6]
   19e60:	3301      	adds	r3, #1
   19e62:	2b08      	cmp	r3, #8
   19e64:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   19e68:	d1ea      	bne.n	19e40 <interface_sockets_aux_state_clear+0xc>
   19e6a:	bd70      	pop	{r4, r5, r6, pc}
   19e6c:	2000d3c0 	.word	0x2000d3c0

00019e70 <interface_from_internal_id_search>:
   19e70:	4b0a      	ldr	r3, [pc, #40]	; (19e9c <interface_from_internal_id_search+0x2c>)
   19e72:	4602      	mov	r2, r0
   19e74:	b530      	push	{r4, r5, lr}
   19e76:	2000      	movs	r0, #0
   19e78:	461c      	mov	r4, r3
   19e7a:	212c      	movs	r1, #44	; 0x2c
   19e7c:	fb01 f500 	mul.w	r5, r1, r0
   19e80:	5965      	ldr	r5, [r4, r5]
   19e82:	b115      	cbz	r5, 19e8a <interface_from_internal_id_search+0x1a>
   19e84:	699d      	ldr	r5, [r3, #24]
   19e86:	4295      	cmp	r5, r2
   19e88:	d006      	beq.n	19e98 <interface_from_internal_id_search+0x28>
   19e8a:	3001      	adds	r0, #1
   19e8c:	2808      	cmp	r0, #8
   19e8e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   19e92:	d1f3      	bne.n	19e7c <interface_from_internal_id_search+0xc>
   19e94:	f04f 30ff 	mov.w	r0, #4294967295
   19e98:	bd30      	pop	{r4, r5, pc}
   19e9a:	bf00      	nop
   19e9c:	2000d3c0 	.word	0x2000d3c0

00019ea0 <interface_socket_from_handle_get>:
   19ea0:	2807      	cmp	r0, #7
   19ea2:	d808      	bhi.n	19eb6 <interface_socket_from_handle_get+0x16>
   19ea4:	232c      	movs	r3, #44	; 0x2c
   19ea6:	4343      	muls	r3, r0
   19ea8:	4a04      	ldr	r2, [pc, #16]	; (19ebc <interface_socket_from_handle_get+0x1c>)
   19eaa:	18d0      	adds	r0, r2, r3
   19eac:	58d3      	ldr	r3, [r2, r3]
   19eae:	2b00      	cmp	r3, #0
   19eb0:	bf08      	it	eq
   19eb2:	2000      	moveq	r0, #0
   19eb4:	4770      	bx	lr
   19eb6:	2000      	movs	r0, #0
   19eb8:	4770      	bx	lr
   19eba:	bf00      	nop
   19ebc:	2000d3c0 	.word	0x2000d3c0

00019ec0 <interface_socket_setopt>:
   19ec0:	2807      	cmp	r0, #7
   19ec2:	b538      	push	{r3, r4, r5, lr}
   19ec4:	d82c      	bhi.n	19f20 <interface_socket_setopt+0x60>
   19ec6:	242c      	movs	r4, #44	; 0x2c
   19ec8:	4360      	muls	r0, r4
   19eca:	4d16      	ldr	r5, [pc, #88]	; (19f24 <interface_socket_setopt+0x64>)
   19ecc:	182c      	adds	r4, r5, r0
   19ece:	5828      	ldr	r0, [r5, r0]
   19ed0:	b330      	cbz	r0, 19f20 <interface_socket_setopt+0x60>
   19ed2:	2901      	cmp	r1, #1
   19ed4:	d005      	beq.n	19ee2 <interface_socket_setopt+0x22>
   19ed6:	206d      	movs	r0, #109	; 0x6d
   19ed8:	f006 fb67 	bl	205aa <nrf_modem_os_errno_set>
   19edc:	f04f 30ff 	mov.w	r0, #4294967295
   19ee0:	e01b      	b.n	19f1a <interface_socket_setopt+0x5a>
   19ee2:	f1a2 0114 	sub.w	r1, r2, #20
   19ee6:	2901      	cmp	r1, #1
   19ee8:	d8f5      	bhi.n	19ed6 <interface_socket_setopt+0x16>
   19eea:	9904      	ldr	r1, [sp, #16]
   19eec:	2908      	cmp	r1, #8
   19eee:	d115      	bne.n	19f1c <interface_socket_setopt+0x5c>
   19ef0:	b1a3      	cbz	r3, 19f1c <interface_socket_setopt+0x5c>
   19ef2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   19ef6:	6858      	ldr	r0, [r3, #4]
   19ef8:	2100      	movs	r1, #0
   19efa:	fbb0 f0f5 	udiv	r0, r0, r5
   19efe:	681b      	ldr	r3, [r3, #0]
   19f00:	fbe5 0103 	umlal	r0, r1, r5, r3
   19f04:	2901      	cmp	r1, #1
   19f06:	bf08      	it	eq
   19f08:	2800      	cmpeq	r0, #0
   19f0a:	d301      	bcc.n	19f10 <interface_socket_setopt+0x50>
   19f0c:	2021      	movs	r0, #33	; 0x21
   19f0e:	e7e3      	b.n	19ed8 <interface_socket_setopt+0x18>
   19f10:	2a14      	cmp	r2, #20
   19f12:	bf0c      	ite	eq
   19f14:	6220      	streq	r0, [r4, #32]
   19f16:	6260      	strne	r0, [r4, #36]	; 0x24
   19f18:	2000      	movs	r0, #0
   19f1a:	bd38      	pop	{r3, r4, r5, pc}
   19f1c:	2016      	movs	r0, #22
   19f1e:	e7db      	b.n	19ed8 <interface_socket_setopt+0x18>
   19f20:	2009      	movs	r0, #9
   19f22:	e7d9      	b.n	19ed8 <interface_socket_setopt+0x18>
   19f24:	2000d3c0 	.word	0x2000d3c0

00019f28 <interface_socket_getopt>:
   19f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19f2a:	4606      	mov	r6, r0
   19f2c:	2e07      	cmp	r6, #7
   19f2e:	4618      	mov	r0, r3
   19f30:	4615      	mov	r5, r2
   19f32:	9b08      	ldr	r3, [sp, #32]
   19f34:	d841      	bhi.n	19fba <interface_socket_getopt+0x92>
   19f36:	242c      	movs	r4, #44	; 0x2c
   19f38:	4374      	muls	r4, r6
   19f3a:	4f21      	ldr	r7, [pc, #132]	; (19fc0 <interface_socket_getopt+0x98>)
   19f3c:	593a      	ldr	r2, [r7, r4]
   19f3e:	193e      	adds	r6, r7, r4
   19f40:	2a00      	cmp	r2, #0
   19f42:	d03a      	beq.n	19fba <interface_socket_getopt+0x92>
   19f44:	2901      	cmp	r1, #1
   19f46:	d005      	beq.n	19f54 <interface_socket_getopt+0x2c>
   19f48:	206d      	movs	r0, #109	; 0x6d
   19f4a:	f006 fb2e 	bl	205aa <nrf_modem_os_errno_set>
   19f4e:	f04f 30ff 	mov.w	r0, #4294967295
   19f52:	e012      	b.n	19f7a <interface_socket_getopt+0x52>
   19f54:	b100      	cbz	r0, 19f58 <interface_socket_getopt+0x30>
   19f56:	b90b      	cbnz	r3, 19f5c <interface_socket_getopt+0x34>
   19f58:	2016      	movs	r0, #22
   19f5a:	e7f6      	b.n	19f4a <interface_socket_getopt+0x22>
   19f5c:	2d04      	cmp	r5, #4
   19f5e:	d10e      	bne.n	19f7e <interface_socket_getopt+0x56>
   19f60:	681a      	ldr	r2, [r3, #0]
   19f62:	2a00      	cmp	r2, #0
   19f64:	d0f8      	beq.n	19f58 <interface_socket_getopt+0x30>
   19f66:	2a04      	cmp	r2, #4
   19f68:	bf28      	it	cs
   19f6a:	2204      	movcs	r2, #4
   19f6c:	3404      	adds	r4, #4
   19f6e:	601a      	str	r2, [r3, #0]
   19f70:	1939      	adds	r1, r7, r4
   19f72:	f008 fc03 	bl	2277c <memcpy>
   19f76:	2000      	movs	r0, #0
   19f78:	6070      	str	r0, [r6, #4]
   19f7a:	b003      	add	sp, #12
   19f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f7e:	f1a5 0214 	sub.w	r2, r5, #20
   19f82:	2a01      	cmp	r2, #1
   19f84:	d8e0      	bhi.n	19f48 <interface_socket_getopt+0x20>
   19f86:	681a      	ldr	r2, [r3, #0]
   19f88:	2a00      	cmp	r2, #0
   19f8a:	d0e5      	beq.n	19f58 <interface_socket_getopt+0x30>
   19f8c:	2a08      	cmp	r2, #8
   19f8e:	bf28      	it	cs
   19f90:	2208      	movcs	r2, #8
   19f92:	601a      	str	r2, [r3, #0]
   19f94:	e9d6 4308 	ldrd	r4, r3, [r6, #32]
   19f98:	2d14      	cmp	r5, #20
   19f9a:	bf18      	it	ne
   19f9c:	461c      	movne	r4, r3
   19f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19fa2:	fbb4 f1f3 	udiv	r1, r4, r3
   19fa6:	9100      	str	r1, [sp, #0]
   19fa8:	fb03 4111 	mls	r1, r3, r1, r4
   19fac:	434b      	muls	r3, r1
   19fae:	4669      	mov	r1, sp
   19fb0:	9301      	str	r3, [sp, #4]
   19fb2:	f008 fbe3 	bl	2277c <memcpy>
   19fb6:	2000      	movs	r0, #0
   19fb8:	e7df      	b.n	19f7a <interface_socket_getopt+0x52>
   19fba:	2009      	movs	r0, #9
   19fbc:	e7c5      	b.n	19f4a <interface_socket_getopt+0x22>
   19fbe:	bf00      	nop
   19fc0:	2000d3c0 	.word	0x2000d3c0

00019fc4 <interface_socket_fcntl>:
   19fc4:	2807      	cmp	r0, #7
   19fc6:	b510      	push	{r4, lr}
   19fc8:	d82c      	bhi.n	1a024 <interface_socket_fcntl+0x60>
   19fca:	232c      	movs	r3, #44	; 0x2c
   19fcc:	4343      	muls	r3, r0
   19fce:	4c16      	ldr	r4, [pc, #88]	; (1a028 <interface_socket_fcntl+0x64>)
   19fd0:	58e0      	ldr	r0, [r4, r3]
   19fd2:	b338      	cbz	r0, 1a024 <interface_socket_fcntl+0x60>
   19fd4:	2901      	cmp	r1, #1
   19fd6:	d11d      	bne.n	1a014 <interface_socket_fcntl+0x50>
   19fd8:	f012 0001 	ands.w	r0, r2, #1
   19fdc:	58e2      	ldr	r2, [r4, r3]
   19fde:	d004      	beq.n	19fea <interface_socket_fcntl+0x26>
   19fe0:	2000      	movs	r0, #0
   19fe2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   19fe6:	50e2      	str	r2, [r4, r3]
   19fe8:	bd10      	pop	{r4, pc}
   19fea:	0092      	lsls	r2, r2, #2
   19fec:	d407      	bmi.n	19ffe <interface_socket_fcntl+0x3a>
   19fee:	58e2      	ldr	r2, [r4, r3]
   19ff0:	b292      	uxth	r2, r2
   19ff2:	2a0a      	cmp	r2, #10
   19ff4:	d003      	beq.n	19ffe <interface_socket_fcntl+0x3a>
   19ff6:	58e2      	ldr	r2, [r4, r3]
   19ff8:	b292      	uxth	r2, r2
   19ffa:	2a0b      	cmp	r2, #11
   19ffc:	d105      	bne.n	1a00a <interface_socket_fcntl+0x46>
   19ffe:	200b      	movs	r0, #11
   1a000:	f006 fad3 	bl	205aa <nrf_modem_os_errno_set>
   1a004:	f04f 30ff 	mov.w	r0, #4294967295
   1a008:	e7ee      	b.n	19fe8 <interface_socket_fcntl+0x24>
   1a00a:	58e2      	ldr	r2, [r4, r3]
   1a00c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   1a010:	50e2      	str	r2, [r4, r3]
   1a012:	e7e9      	b.n	19fe8 <interface_socket_fcntl+0x24>
   1a014:	2902      	cmp	r1, #2
   1a016:	d103      	bne.n	1a020 <interface_socket_fcntl+0x5c>
   1a018:	58e0      	ldr	r0, [r4, r3]
   1a01a:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1a01e:	e7e3      	b.n	19fe8 <interface_socket_fcntl+0x24>
   1a020:	2016      	movs	r0, #22
   1a022:	e7ed      	b.n	1a000 <interface_socket_fcntl+0x3c>
   1a024:	2009      	movs	r0, #9
   1a026:	e7eb      	b.n	1a000 <interface_socket_fcntl+0x3c>
   1a028:	2000d3c0 	.word	0x2000d3c0

0001a02c <rpc_error_to_nrf_errno>:
   1a02c:	286a      	cmp	r0, #106	; 0x6a
   1a02e:	bf9a      	itte	ls
   1a030:	4b01      	ldrls	r3, [pc, #4]	; (1a038 <rpc_error_to_nrf_errno+0xc>)
   1a032:	5c18      	ldrbls	r0, [r3, r0]
   1a034:	205f      	movhi	r0, #95	; 0x5f
   1a036:	4770      	bx	lr
   1a038:	00025109 	.word	0x00025109

0001a03c <rpc_error_to_nrf_gai_errno>:
   1a03c:	2805      	cmp	r0, #5
   1a03e:	d013      	beq.n	1a068 <rpc_error_to_nrf_gai_errno+0x2c>
   1a040:	d807      	bhi.n	1a052 <rpc_error_to_nrf_gai_errno+0x16>
   1a042:	b170      	cbz	r0, 1a062 <rpc_error_to_nrf_gai_errno+0x26>
   1a044:	4b0b      	ldr	r3, [pc, #44]	; (1a074 <rpc_error_to_nrf_gai_errno+0x38>)
   1a046:	5c1b      	ldrb	r3, [r3, r0]
   1a048:	4a0b      	ldr	r2, [pc, #44]	; (1a078 <rpc_error_to_nrf_gai_errno+0x3c>)
   1a04a:	f240 1015 	movw	r0, #277	; 0x115
   1a04e:	6013      	str	r3, [r2, #0]
   1a050:	4770      	bx	lr
   1a052:	2806      	cmp	r0, #6
   1a054:	d00b      	beq.n	1a06e <rpc_error_to_nrf_gai_errno+0x32>
   1a056:	280d      	cmp	r0, #13
   1a058:	d009      	beq.n	1a06e <rpc_error_to_nrf_gai_errno+0x32>
   1a05a:	286a      	cmp	r0, #106	; 0x6a
   1a05c:	d9f2      	bls.n	1a044 <rpc_error_to_nrf_gai_errno+0x8>
   1a05e:	235f      	movs	r3, #95	; 0x5f
   1a060:	e7f2      	b.n	1a048 <rpc_error_to_nrf_gai_errno+0xc>
   1a062:	4b05      	ldr	r3, [pc, #20]	; (1a078 <rpc_error_to_nrf_gai_errno+0x3c>)
   1a064:	6018      	str	r0, [r3, #0]
   1a066:	4770      	bx	lr
   1a068:	f44f 708a 	mov.w	r0, #276	; 0x114
   1a06c:	4770      	bx	lr
   1a06e:	f240 1011 	movw	r0, #273	; 0x111
   1a072:	4770      	bx	lr
   1a074:	00025109 	.word	0x00025109
   1a078:	2000d528 	.word	0x2000d528

0001a07c <ip_interface_init>:
   1a07c:	b510      	push	{r4, lr}
   1a07e:	2400      	movs	r4, #0
   1a080:	4b06      	ldr	r3, [pc, #24]	; (1a09c <ip_interface_init+0x20>)
   1a082:	2220      	movs	r2, #32
   1a084:	601c      	str	r4, [r3, #0]
   1a086:	4b06      	ldr	r3, [pc, #24]	; (1a0a0 <ip_interface_init+0x24>)
   1a088:	4621      	mov	r1, r4
   1a08a:	4806      	ldr	r0, [pc, #24]	; (1a0a4 <ip_interface_init+0x28>)
   1a08c:	601c      	str	r4, [r3, #0]
   1a08e:	f008 fb82 	bl	22796 <memset>
   1a092:	2201      	movs	r2, #1
   1a094:	4b04      	ldr	r3, [pc, #16]	; (1a0a8 <ip_interface_init+0x2c>)
   1a096:	4620      	mov	r0, r4
   1a098:	701a      	strb	r2, [r3, #0]
   1a09a:	bd10      	pop	{r4, pc}
   1a09c:	2000d534 	.word	0x2000d534
   1a0a0:	2000d530 	.word	0x2000d530
   1a0a4:	2000d538 	.word	0x2000d538
   1a0a8:	2000f412 	.word	0x2000f412

0001a0ac <ip_interface_open>:
   1a0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0ae:	2302      	movs	r3, #2
   1a0b0:	460d      	mov	r5, r1
   1a0b2:	4611      	mov	r1, r2
   1a0b4:	2200      	movs	r2, #0
   1a0b6:	f04f 34ff 	mov.w	r4, #4294967295
   1a0ba:	b085      	sub	sp, #20
   1a0bc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1a0c0:	4b35      	ldr	r3, [pc, #212]	; (1a198 <ip_interface_open+0xec>)
   1a0c2:	4606      	mov	r6, r0
   1a0c4:	781b      	ldrb	r3, [r3, #0]
   1a0c6:	9403      	str	r4, [sp, #12]
   1a0c8:	b92b      	cbnz	r3, 1a0d6 <ip_interface_open+0x2a>
   1a0ca:	2075      	movs	r0, #117	; 0x75
   1a0cc:	f006 fa6d 	bl	205aa <nrf_modem_os_errno_set>
   1a0d0:	4620      	mov	r0, r4
   1a0d2:	b005      	add	sp, #20
   1a0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a0d6:	f020 0308 	bic.w	r3, r0, #8
   1a0da:	2b02      	cmp	r3, #2
   1a0dc:	d003      	beq.n	1a0e6 <ip_interface_open+0x3a>
   1a0de:	2805      	cmp	r0, #5
   1a0e0:	d001      	beq.n	1a0e6 <ip_interface_open+0x3a>
   1a0e2:	206a      	movs	r0, #106	; 0x6a
   1a0e4:	e7f2      	b.n	1a0cc <ip_interface_open+0x20>
   1a0e6:	1e6b      	subs	r3, r5, #1
   1a0e8:	2b02      	cmp	r3, #2
   1a0ea:	d814      	bhi.n	1a116 <ip_interface_open+0x6a>
   1a0ec:	4628      	mov	r0, r5
   1a0ee:	aa02      	add	r2, sp, #8
   1a0f0:	f006 ff33 	bl	20f5a <protocol_verify>
   1a0f4:	4607      	mov	r7, r0
   1a0f6:	2800      	cmp	r0, #0
   1a0f8:	d14b      	bne.n	1a192 <ip_interface_open+0xe6>
   1a0fa:	4629      	mov	r1, r5
   1a0fc:	4a27      	ldr	r2, [pc, #156]	; (1a19c <ip_interface_open+0xf0>)
   1a0fe:	a801      	add	r0, sp, #4
   1a100:	f7ff fe08 	bl	19d14 <interface_socket_allocate>
   1a104:	9b01      	ldr	r3, [sp, #4]
   1a106:	4604      	mov	r4, r0
   1a108:	b95b      	cbnz	r3, 1a122 <ip_interface_open+0x76>
   1a10a:	2669      	movs	r6, #105	; 0x69
   1a10c:	4620      	mov	r0, r4
   1a10e:	f7ff fe27 	bl	19d60 <interface_socket_free>
   1a112:	4630      	mov	r0, r6
   1a114:	e000      	b.n	1a118 <ip_interface_open+0x6c>
   1a116:	2016      	movs	r0, #22
   1a118:	f006 fa47 	bl	205aa <nrf_modem_os_errno_set>
   1a11c:	f04f 34ff 	mov.w	r4, #4294967295
   1a120:	e7d6      	b.n	1a0d0 <ip_interface_open+0x24>
   1a122:	9a02      	ldr	r2, [sp, #8]
   1a124:	e9c3 6503 	strd	r6, r5, [r3, #12]
   1a128:	615a      	str	r2, [r3, #20]
   1a12a:	f04f 31ff 	mov.w	r1, #4294967295
   1a12e:	f247 0201 	movw	r2, #28673	; 0x7001
   1a132:	463b      	mov	r3, r7
   1a134:	f006 ff59 	bl	20fea <ip_interface_request_create>
   1a138:	4602      	mov	r2, r0
   1a13a:	2800      	cmp	r0, #0
   1a13c:	d0e5      	beq.n	1a10a <ip_interface_open+0x5e>
   1a13e:	6883      	ldr	r3, [r0, #8]
   1a140:	3e02      	subs	r6, #2
   1a142:	2e08      	cmp	r6, #8
   1a144:	f103 030c 	add.w	r3, r3, #12
   1a148:	6083      	str	r3, [r0, #8]
   1a14a:	bf98      	it	ls
   1a14c:	4b14      	ldrls	r3, [pc, #80]	; (1a1a0 <ip_interface_open+0xf4>)
   1a14e:	f247 0101 	movw	r1, #28673	; 0x7001
   1a152:	bf98      	it	ls
   1a154:	579f      	ldrsbls	r7, [r3, r6]
   1a156:	9b02      	ldr	r3, [sp, #8]
   1a158:	6147      	str	r7, [r0, #20]
   1a15a:	61c3      	str	r3, [r0, #28]
   1a15c:	6185      	str	r5, [r0, #24]
   1a15e:	2004      	movs	r0, #4
   1a160:	f006 fea7 	bl	20eb2 <rpc_client_request_send>
   1a164:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a168:	2102      	movs	r1, #2
   1a16a:	4620      	mov	r0, r4
   1a16c:	ab03      	add	r3, sp, #12
   1a16e:	f006 ff4f 	bl	21010 <ip_interface_wait>
   1a172:	4606      	mov	r6, r0
   1a174:	2800      	cmp	r0, #0
   1a176:	d1c9      	bne.n	1a10c <ip_interface_open+0x60>
   1a178:	3d02      	subs	r5, #2
   1a17a:	2d01      	cmp	r5, #1
   1a17c:	d8a8      	bhi.n	1a0d0 <ip_interface_open+0x24>
   1a17e:	9b01      	ldr	r3, [sp, #4]
   1a180:	681a      	ldr	r2, [r3, #0]
   1a182:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1a186:	601a      	str	r2, [r3, #0]
   1a188:	681a      	ldr	r2, [r3, #0]
   1a18a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1a18e:	601a      	str	r2, [r3, #0]
   1a190:	e79e      	b.n	1a0d0 <ip_interface_open+0x24>
   1a192:	4604      	mov	r4, r0
   1a194:	e79c      	b.n	1a0d0 <ip_interface_open+0x24>
   1a196:	bf00      	nop
   1a198:	2000f412 	.word	0x2000f412
   1a19c:	00020f43 	.word	0x00020f43
   1a1a0:	000250fb 	.word	0x000250fb

0001a1a4 <ip_interface_close>:
   1a1a4:	f04f 33ff 	mov.w	r3, #4294967295
   1a1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a1aa:	4605      	mov	r5, r0
   1a1ac:	9301      	str	r3, [sp, #4]
   1a1ae:	f7ff fe77 	bl	19ea0 <interface_socket_from_handle_get>
   1a1b2:	4604      	mov	r4, r0
   1a1b4:	b388      	cbz	r0, 1a21a <ip_interface_close+0x76>
   1a1b6:	f247 0209 	movw	r2, #28681	; 0x7009
   1a1ba:	6981      	ldr	r1, [r0, #24]
   1a1bc:	2300      	movs	r3, #0
   1a1be:	4628      	mov	r0, r5
   1a1c0:	f006 ff13 	bl	20fea <ip_interface_request_create>
   1a1c4:	4602      	mov	r2, r0
   1a1c6:	b370      	cbz	r0, 1a226 <ip_interface_close+0x82>
   1a1c8:	6823      	ldr	r3, [r4, #0]
   1a1ca:	f247 0109 	movw	r1, #28681	; 0x7009
   1a1ce:	0c1b      	lsrs	r3, r3, #16
   1a1d0:	041b      	lsls	r3, r3, #16
   1a1d2:	f043 030d 	orr.w	r3, r3, #13
   1a1d6:	6023      	str	r3, [r4, #0]
   1a1d8:	6823      	ldr	r3, [r4, #0]
   1a1da:	2004      	movs	r0, #4
   1a1dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1a1e0:	6023      	str	r3, [r4, #0]
   1a1e2:	6823      	ldr	r3, [r4, #0]
   1a1e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a1e8:	6023      	str	r3, [r4, #0]
   1a1ea:	4c10      	ldr	r4, [pc, #64]	; (1a22c <ip_interface_close+0x88>)
   1a1ec:	f006 fe61 	bl	20eb2 <rpc_client_request_send>
   1a1f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a1f4:	210e      	movs	r1, #14
   1a1f6:	4628      	mov	r0, r5
   1a1f8:	ab01      	add	r3, sp, #4
   1a1fa:	f006 ff09 	bl	21010 <ip_interface_wait>
   1a1fe:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1a202:	b120      	cbz	r0, 1a20e <ip_interface_close+0x6a>
   1a204:	f006 fe5c 	bl	20ec0 <rpc_client_message_free>
   1a208:	2300      	movs	r3, #0
   1a20a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1a20e:	4628      	mov	r0, r5
   1a210:	f7ff fda6 	bl	19d60 <interface_socket_free>
   1a214:	2000      	movs	r0, #0
   1a216:	b003      	add	sp, #12
   1a218:	bd30      	pop	{r4, r5, pc}
   1a21a:	2009      	movs	r0, #9
   1a21c:	f006 f9c5 	bl	205aa <nrf_modem_os_errno_set>
   1a220:	f04f 30ff 	mov.w	r0, #4294967295
   1a224:	e7f7      	b.n	1a216 <ip_interface_close+0x72>
   1a226:	200c      	movs	r0, #12
   1a228:	e7f8      	b.n	1a21c <ip_interface_close+0x78>
   1a22a:	bf00      	nop
   1a22c:	2000d538 	.word	0x2000d538

0001a230 <ip_interface_sendto>:
   1a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a234:	2700      	movs	r7, #0
   1a236:	469a      	mov	sl, r3
   1a238:	f04f 36ff 	mov.w	r6, #4294967295
   1a23c:	2364      	movs	r3, #100	; 0x64
   1a23e:	b089      	sub	sp, #36	; 0x24
   1a240:	4681      	mov	r9, r0
   1a242:	4615      	mov	r5, r2
   1a244:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   1a248:	9102      	str	r1, [sp, #8]
   1a24a:	f8ad 7010 	strh.w	r7, [sp, #16]
   1a24e:	f8ad 7012 	strh.w	r7, [sp, #18]
   1a252:	9605      	str	r6, [sp, #20]
   1a254:	9307      	str	r3, [sp, #28]
   1a256:	f7ff fe23 	bl	19ea0 <interface_socket_from_handle_get>
   1a25a:	4604      	mov	r4, r0
   1a25c:	b930      	cbnz	r0, 1a26c <ip_interface_sendto+0x3c>
   1a25e:	2009      	movs	r0, #9
   1a260:	f006 f9a3 	bl	205aa <nrf_modem_os_errno_set>
   1a264:	4630      	mov	r0, r6
   1a266:	b009      	add	sp, #36	; 0x24
   1a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a26c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1a270:	dd01      	ble.n	1a276 <ip_interface_sendto+0x46>
   1a272:	207a      	movs	r0, #122	; 0x7a
   1a274:	e7f4      	b.n	1a260 <ip_interface_sendto+0x30>
   1a276:	f1ba 0f00 	cmp.w	sl, #0
   1a27a:	d004      	beq.n	1a286 <ip_interface_sendto+0x56>
   1a27c:	f1ba 0f02 	cmp.w	sl, #2
   1a280:	d006      	beq.n	1a290 <ip_interface_sendto+0x60>
   1a282:	205f      	movs	r0, #95	; 0x5f
   1a284:	e7ec      	b.n	1a260 <ip_interface_sendto+0x30>
   1a286:	6807      	ldr	r7, [r0, #0]
   1a288:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   1a28c:	f3c7 7700 	ubfx	r7, r7, #28, #1
   1a290:	2d00      	cmp	r5, #0
   1a292:	dd07      	ble.n	1a2a4 <ip_interface_sendto+0x74>
   1a294:	9b02      	ldr	r3, [sp, #8]
   1a296:	b92b      	cbnz	r3, 1a2a4 <ip_interface_sendto+0x74>
   1a298:	200e      	movs	r0, #14
   1a29a:	f006 f986 	bl	205aa <nrf_modem_os_errno_set>
   1a29e:	f04f 36ff 	mov.w	r6, #4294967295
   1a2a2:	e7df      	b.n	1a264 <ip_interface_sendto+0x34>
   1a2a4:	6923      	ldr	r3, [r4, #16]
   1a2a6:	f1bb 0f00 	cmp.w	fp, #0
   1a2aa:	d012      	beq.n	1a2d2 <ip_interface_sendto+0xa2>
   1a2ac:	2b01      	cmp	r3, #1
   1a2ae:	d101      	bne.n	1a2b4 <ip_interface_sendto+0x84>
   1a2b0:	207f      	movs	r0, #127	; 0x7f
   1a2b2:	e7f2      	b.n	1a29a <ip_interface_sendto+0x6a>
   1a2b4:	68e2      	ldr	r2, [r4, #12]
   1a2b6:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a2ba:	429a      	cmp	r2, r3
   1a2bc:	d001      	beq.n	1a2c2 <ip_interface_sendto+0x92>
   1a2be:	206a      	movs	r0, #106	; 0x6a
   1a2c0:	e7eb      	b.n	1a29a <ip_interface_sendto+0x6a>
   1a2c2:	f89b 3000 	ldrb.w	r3, [fp]
   1a2c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a2c8:	4293      	cmp	r3, r2
   1a2ca:	f000 80c5 	beq.w	1a458 <ip_interface_sendto+0x228>
   1a2ce:	2016      	movs	r0, #22
   1a2d0:	e7e3      	b.n	1a29a <ip_interface_sendto+0x6a>
   1a2d2:	2b02      	cmp	r3, #2
   1a2d4:	d10f      	bne.n	1a2f6 <ip_interface_sendto+0xc6>
   1a2d6:	6963      	ldr	r3, [r4, #20]
   1a2d8:	2b02      	cmp	r3, #2
   1a2da:	d103      	bne.n	1a2e4 <ip_interface_sendto+0xb4>
   1a2dc:	6823      	ldr	r3, [r4, #0]
   1a2de:	b29b      	uxth	r3, r3
   1a2e0:	2b05      	cmp	r3, #5
   1a2e2:	e005      	b.n	1a2f0 <ip_interface_sendto+0xc0>
   1a2e4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1a2e8:	d10d      	bne.n	1a306 <ip_interface_sendto+0xd6>
   1a2ea:	6823      	ldr	r3, [r4, #0]
   1a2ec:	b29b      	uxth	r3, r3
   1a2ee:	2b0c      	cmp	r3, #12
   1a2f0:	d009      	beq.n	1a306 <ip_interface_sendto+0xd6>
   1a2f2:	2080      	movs	r0, #128	; 0x80
   1a2f4:	e7d1      	b.n	1a29a <ip_interface_sendto+0x6a>
   1a2f6:	2b01      	cmp	r3, #1
   1a2f8:	d105      	bne.n	1a306 <ip_interface_sendto+0xd6>
   1a2fa:	6963      	ldr	r3, [r4, #20]
   1a2fc:	2b01      	cmp	r3, #1
   1a2fe:	d0ed      	beq.n	1a2dc <ip_interface_sendto+0xac>
   1a300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1a304:	e7f0      	b.n	1a2e8 <ip_interface_sendto+0xb8>
   1a306:	f247 0806 	movw	r8, #28678	; 0x7006
   1a30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a30c:	2b00      	cmp	r3, #0
   1a30e:	bf08      	it	eq
   1a310:	f04f 33ff 	moveq.w	r3, #4294967295
   1a314:	9306      	str	r3, [sp, #24]
   1a316:	ea48 4309 	orr.w	r3, r8, r9, lsl #16
   1a31a:	9303      	str	r3, [sp, #12]
   1a31c:	6823      	ldr	r3, [r4, #0]
   1a31e:	0319      	lsls	r1, r3, #12
   1a320:	d501      	bpl.n	1a326 <ip_interface_sendto+0xf6>
   1a322:	68a0      	ldr	r0, [r4, #8]
   1a324:	e7b9      	b.n	1a29a <ip_interface_sendto+0x6a>
   1a326:	6820      	ldr	r0, [r4, #0]
   1a328:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   1a32c:	d107      	bne.n	1a33e <ip_interface_sendto+0x10e>
   1a32e:	b90f      	cbnz	r7, 1a334 <ip_interface_sendto+0x104>
   1a330:	200b      	movs	r0, #11
   1a332:	e7b2      	b.n	1a29a <ip_interface_sendto+0x6a>
   1a334:	a906      	add	r1, sp, #24
   1a336:	f7fb fb11 	bl	1595c <nrf_modem_os_timedwait>
   1a33a:	2874      	cmp	r0, #116	; 0x74
   1a33c:	d0f8      	beq.n	1a330 <ip_interface_sendto+0x100>
   1a33e:	6823      	ldr	r3, [r4, #0]
   1a340:	039a      	lsls	r2, r3, #14
   1a342:	d5eb      	bpl.n	1a31c <ip_interface_sendto+0xec>
   1a344:	4628      	mov	r0, r5
   1a346:	f006 fdae 	bl	20ea6 <rpc_client_request_alloc>
   1a34a:	4606      	mov	r6, r0
   1a34c:	2800      	cmp	r0, #0
   1a34e:	d133      	bne.n	1a3b8 <ip_interface_sendto+0x188>
   1a350:	b927      	cbnz	r7, 1a35c <ip_interface_sendto+0x12c>
   1a352:	a907      	add	r1, sp, #28
   1a354:	2000      	movs	r0, #0
   1a356:	f7fb fb01 	bl	1595c <nrf_modem_os_timedwait>
   1a35a:	e7e9      	b.n	1a330 <ip_interface_sendto+0x100>
   1a35c:	a906      	add	r1, sp, #24
   1a35e:	f7fb fafd 	bl	1595c <nrf_modem_os_timedwait>
   1a362:	2800      	cmp	r0, #0
   1a364:	d0ee      	beq.n	1a344 <ip_interface_sendto+0x114>
   1a366:	e7e3      	b.n	1a330 <ip_interface_sendto+0x100>
   1a368:	a905      	add	r1, sp, #20
   1a36a:	f7fb faf7 	bl	1595c <nrf_modem_os_timedwait>
   1a36e:	e05b      	b.n	1a428 <ip_interface_sendto+0x1f8>
   1a370:	f006 fda6 	bl	20ec0 <rpc_client_message_free>
   1a374:	2300      	movs	r3, #0
   1a376:	4a3a      	ldr	r2, [pc, #232]	; (1a460 <ip_interface_sendto+0x230>)
   1a378:	2e01      	cmp	r6, #1
   1a37a:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   1a37e:	d001      	beq.n	1a384 <ip_interface_sendto+0x154>
   1a380:	2e12      	cmp	r6, #18
   1a382:	d10e      	bne.n	1a3a2 <ip_interface_sendto+0x172>
   1a384:	4b37      	ldr	r3, [pc, #220]	; (1a464 <ip_interface_sendto+0x234>)
   1a386:	781b      	ldrb	r3, [r3, #0]
   1a388:	b147      	cbz	r7, 1a39c <ip_interface_sendto+0x16c>
   1a38a:	2b00      	cmp	r3, #0
   1a38c:	d1c6      	bne.n	1a31c <ip_interface_sendto+0xec>
   1a38e:	2000      	movs	r0, #0
   1a390:	a906      	add	r1, sp, #24
   1a392:	f7fb fae3 	bl	1595c <nrf_modem_os_timedwait>
   1a396:	2800      	cmp	r0, #0
   1a398:	d0c0      	beq.n	1a31c <ip_interface_sendto+0xec>
   1a39a:	e7c9      	b.n	1a330 <ip_interface_sendto+0x100>
   1a39c:	2b00      	cmp	r3, #0
   1a39e:	d1c7      	bne.n	1a330 <ip_interface_sendto+0x100>
   1a3a0:	e7d7      	b.n	1a352 <ip_interface_sendto+0x122>
   1a3a2:	2e03      	cmp	r6, #3
   1a3a4:	d102      	bne.n	1a3ac <ip_interface_sendto+0x17c>
   1a3a6:	2f00      	cmp	r7, #0
   1a3a8:	d1f1      	bne.n	1a38e <ip_interface_sendto+0x15e>
   1a3aa:	e7d2      	b.n	1a352 <ip_interface_sendto+0x122>
   1a3ac:	2e6a      	cmp	r6, #106	; 0x6a
   1a3ae:	bf96      	itet	ls
   1a3b0:	4b2d      	ldrls	r3, [pc, #180]	; (1a468 <ip_interface_sendto+0x238>)
   1a3b2:	205f      	movhi	r0, #95	; 0x5f
   1a3b4:	5d98      	ldrbls	r0, [r3, r6]
   1a3b6:	e770      	b.n	1a29a <ip_interface_sendto+0x6a>
   1a3b8:	230c      	movs	r3, #12
   1a3ba:	2200      	movs	r2, #0
   1a3bc:	7203      	strb	r3, [r0, #8]
   1a3be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a3c0:	7242      	strb	r2, [r0, #9]
   1a3c2:	7282      	strb	r2, [r0, #10]
   1a3c4:	72c2      	strb	r2, [r0, #11]
   1a3c6:	f8c0 a014 	str.w	sl, [r0, #20]
   1a3ca:	b11b      	cbz	r3, 1a3d4 <ip_interface_sendto+0x1a4>
   1a3cc:	ea4a 0303 	orr.w	r3, sl, r3
   1a3d0:	6173      	str	r3, [r6, #20]
   1a3d2:	62a2      	str	r2, [r4, #40]	; 0x28
   1a3d4:	f1bb 0f00 	cmp.w	fp, #0
   1a3d8:	d015      	beq.n	1a406 <ip_interface_sendto+0x1d6>
   1a3da:	f106 031c 	add.w	r3, r6, #28
   1a3de:	9301      	str	r3, [sp, #4]
   1a3e0:	f10d 0312 	add.w	r3, sp, #18
   1a3e4:	9300      	str	r3, [sp, #0]
   1a3e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a3e8:	ab04      	add	r3, sp, #16
   1a3ea:	4659      	mov	r1, fp
   1a3ec:	68e0      	ldr	r0, [r4, #12]
   1a3ee:	f006 fdd2 	bl	20f96 <ip_addr_parse>
   1a3f2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1a3f6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1a3fa:	8332      	strh	r2, [r6, #24]
   1a3fc:	68b2      	ldr	r2, [r6, #8]
   1a3fe:	8373      	strh	r3, [r6, #26]
   1a400:	3304      	adds	r3, #4
   1a402:	4413      	add	r3, r2
   1a404:	60b3      	str	r3, [r6, #8]
   1a406:	69a3      	ldr	r3, [r4, #24]
   1a408:	6075      	str	r5, [r6, #4]
   1a40a:	6133      	str	r3, [r6, #16]
   1a40c:	9b03      	ldr	r3, [sp, #12]
   1a40e:	60f3      	str	r3, [r6, #12]
   1a410:	9b02      	ldr	r3, [sp, #8]
   1a412:	b123      	cbz	r3, 1a41e <ip_interface_sendto+0x1ee>
   1a414:	462a      	mov	r2, r5
   1a416:	4619      	mov	r1, r3
   1a418:	6830      	ldr	r0, [r6, #0]
   1a41a:	f008 f9af 	bl	2277c <memcpy>
   1a41e:	4632      	mov	r2, r6
   1a420:	4641      	mov	r1, r8
   1a422:	2004      	movs	r0, #4
   1a424:	f006 fd45 	bl	20eb2 <rpc_client_request_send>
   1a428:	4b0d      	ldr	r3, [pc, #52]	; (1a460 <ip_interface_sendto+0x230>)
   1a42a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   1a42e:	2800      	cmp	r0, #0
   1a430:	d09a      	beq.n	1a368 <ip_interface_sendto+0x138>
   1a432:	6946      	ldr	r6, [r0, #20]
   1a434:	2e00      	cmp	r6, #0
   1a436:	d19b      	bne.n	1a370 <ip_interface_sendto+0x140>
   1a438:	6823      	ldr	r3, [r4, #0]
   1a43a:	011b      	lsls	r3, r3, #4
   1a43c:	bf49      	itett	mi
   1a43e:	6823      	ldrmi	r3, [r4, #0]
   1a440:	6985      	ldrpl	r5, [r0, #24]
   1a442:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   1a446:	6023      	strmi	r3, [r4, #0]
   1a448:	f006 fd3a 	bl	20ec0 <rpc_client_message_free>
   1a44c:	2300      	movs	r3, #0
   1a44e:	4a04      	ldr	r2, [pc, #16]	; (1a460 <ip_interface_sendto+0x230>)
   1a450:	462e      	mov	r6, r5
   1a452:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   1a456:	e705      	b.n	1a264 <ip_interface_sendto+0x34>
   1a458:	f247 0807 	movw	r8, #28679	; 0x7007
   1a45c:	e755      	b.n	1a30a <ip_interface_sendto+0xda>
   1a45e:	bf00      	nop
   1a460:	2000d538 	.word	0x2000d538
   1a464:	2000f411 	.word	0x2000f411
   1a468:	00025109 	.word	0x00025109

0001a46c <ip_interface_socketoption_get>:
   1a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a470:	461f      	mov	r7, r3
   1a472:	f04f 33ff 	mov.w	r3, #4294967295
   1a476:	b085      	sub	sp, #20
   1a478:	9303      	str	r3, [sp, #12]
   1a47a:	680b      	ldr	r3, [r1, #0]
   1a47c:	4606      	mov	r6, r0
   1a47e:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   1a482:	025d      	lsls	r5, r3, #9
   1a484:	460c      	mov	r4, r1
   1a486:	4691      	mov	r9, r2
   1a488:	d461      	bmi.n	1a54e <ip_interface_socketoption_get+0xe2>
   1a48a:	680b      	ldr	r3, [r1, #0]
   1a48c:	0219      	lsls	r1, r3, #8
   1a48e:	d45e      	bmi.n	1a54e <ip_interface_socketoption_get+0xe2>
   1a490:	6823      	ldr	r3, [r4, #0]
   1a492:	01da      	lsls	r2, r3, #7
   1a494:	d45b      	bmi.n	1a54e <ip_interface_socketoption_get+0xe2>
   1a496:	6823      	ldr	r3, [r4, #0]
   1a498:	019b      	lsls	r3, r3, #6
   1a49a:	d458      	bmi.n	1a54e <ip_interface_socketoption_get+0xe2>
   1a49c:	6823      	ldr	r3, [r4, #0]
   1a49e:	f247 0204 	movw	r2, #28676	; 0x7004
   1a4a2:	9301      	str	r3, [sp, #4]
   1a4a4:	6823      	ldr	r3, [r4, #0]
   1a4a6:	69a1      	ldr	r1, [r4, #24]
   1a4a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1a4ac:	6023      	str	r3, [r4, #0]
   1a4ae:	f8d8 3000 	ldr.w	r3, [r8]
   1a4b2:	f006 fd9a 	bl	20fea <ip_interface_request_create>
   1a4b6:	4605      	mov	r5, r0
   1a4b8:	2800      	cmp	r0, #0
   1a4ba:	d045      	beq.n	1a548 <ip_interface_socketoption_get+0xdc>
   1a4bc:	6883      	ldr	r3, [r0, #8]
   1a4be:	4602      	mov	r2, r0
   1a4c0:	3308      	adds	r3, #8
   1a4c2:	6083      	str	r3, [r0, #8]
   1a4c4:	f8c0 9014 	str.w	r9, [r0, #20]
   1a4c8:	f247 0104 	movw	r1, #28676	; 0x7004
   1a4cc:	f8d0 9000 	ldr.w	r9, [r0]
   1a4d0:	6187      	str	r7, [r0, #24]
   1a4d2:	2004      	movs	r0, #4
   1a4d4:	f006 fced 	bl	20eb2 <rpc_client_request_send>
   1a4d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1a4dc:	4630      	mov	r0, r6
   1a4de:	4611      	mov	r1, r2
   1a4e0:	ab03      	add	r3, sp, #12
   1a4e2:	f006 fd95 	bl	21010 <ip_interface_wait>
   1a4e6:	4683      	mov	fp, r0
   1a4e8:	b9b8      	cbnz	r0, 1a51a <ip_interface_socketoption_get+0xae>
   1a4ea:	4f1a      	ldr	r7, [pc, #104]	; (1a554 <ip_interface_socketoption_get+0xe8>)
   1a4ec:	f8d8 0000 	ldr.w	r0, [r8]
   1a4f0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   1a4f4:	b1e9      	cbz	r1, 1a532 <ip_interface_socketoption_get+0xc6>
   1a4f6:	684a      	ldr	r2, [r1, #4]
   1a4f8:	4282      	cmp	r2, r0
   1a4fa:	bf28      	it	cs
   1a4fc:	4602      	movcs	r2, r0
   1a4fe:	f8c8 2000 	str.w	r2, [r8]
   1a502:	6809      	ldr	r1, [r1, #0]
   1a504:	b191      	cbz	r1, 1a52c <ip_interface_socketoption_get+0xc0>
   1a506:	4650      	mov	r0, sl
   1a508:	f008 f938 	bl	2277c <memcpy>
   1a50c:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   1a510:	f006 fcd6 	bl	20ec0 <rpc_client_message_free>
   1a514:	2200      	movs	r2, #0
   1a516:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
   1a51a:	4648      	mov	r0, r9
   1a51c:	f006 fcd3 	bl	20ec6 <rpc_client_data_free>
   1a520:	9b01      	ldr	r3, [sp, #4]
   1a522:	6023      	str	r3, [r4, #0]
   1a524:	4658      	mov	r0, fp
   1a526:	b005      	add	sp, #20
   1a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a52c:	f04f 0b16 	mov.w	fp, #22
   1a530:	e7ec      	b.n	1a50c <ip_interface_socketoption_get+0xa0>
   1a532:	686a      	ldr	r2, [r5, #4]
   1a534:	4649      	mov	r1, r9
   1a536:	4282      	cmp	r2, r0
   1a538:	bf28      	it	cs
   1a53a:	4602      	movcs	r2, r0
   1a53c:	4650      	mov	r0, sl
   1a53e:	f8c8 2000 	str.w	r2, [r8]
   1a542:	f008 f91b 	bl	2277c <memcpy>
   1a546:	e7e8      	b.n	1a51a <ip_interface_socketoption_get+0xae>
   1a548:	f04f 0b0c 	mov.w	fp, #12
   1a54c:	e7e8      	b.n	1a520 <ip_interface_socketoption_get+0xb4>
   1a54e:	f04f 0b0b 	mov.w	fp, #11
   1a552:	e7e7      	b.n	1a524 <ip_interface_socketoption_get+0xb8>
   1a554:	2000d538 	.word	0x2000d538

0001a558 <ip_interface_bind>:
   1a558:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a55c:	f04f 33ff 	mov.w	r3, #4294967295
   1a560:	4607      	mov	r7, r0
   1a562:	4690      	mov	r8, r2
   1a564:	460e      	mov	r6, r1
   1a566:	9303      	str	r3, [sp, #12]
   1a568:	2900      	cmp	r1, #0
   1a56a:	d04d      	beq.n	1a608 <ip_interface_bind+0xb0>
   1a56c:	2a00      	cmp	r2, #0
   1a56e:	d04b      	beq.n	1a608 <ip_interface_bind+0xb0>
   1a570:	f7ff fc96 	bl	19ea0 <interface_socket_from_handle_get>
   1a574:	4605      	mov	r5, r0
   1a576:	2800      	cmp	r0, #0
   1a578:	d048      	beq.n	1a60c <ip_interface_bind+0xb4>
   1a57a:	6803      	ldr	r3, [r0, #0]
   1a57c:	b29b      	uxth	r3, r3
   1a57e:	2b02      	cmp	r3, #2
   1a580:	d144      	bne.n	1a60c <ip_interface_bind+0xb4>
   1a582:	6981      	ldr	r1, [r0, #24]
   1a584:	2300      	movs	r3, #0
   1a586:	f247 0205 	movw	r2, #28677	; 0x7005
   1a58a:	4638      	mov	r0, r7
   1a58c:	f006 fd2d 	bl	20fea <ip_interface_request_create>
   1a590:	4604      	mov	r4, r0
   1a592:	2800      	cmp	r0, #0
   1a594:	d03c      	beq.n	1a610 <ip_interface_bind+0xb8>
   1a596:	6883      	ldr	r3, [r0, #8]
   1a598:	4642      	mov	r2, r8
   1a59a:	3304      	adds	r3, #4
   1a59c:	6083      	str	r3, [r0, #8]
   1a59e:	f100 0318 	add.w	r3, r0, #24
   1a5a2:	9301      	str	r3, [sp, #4]
   1a5a4:	f10d 030a 	add.w	r3, sp, #10
   1a5a8:	9300      	str	r3, [sp, #0]
   1a5aa:	4631      	mov	r1, r6
   1a5ac:	68e8      	ldr	r0, [r5, #12]
   1a5ae:	ab02      	add	r3, sp, #8
   1a5b0:	f006 fcf1 	bl	20f96 <ip_addr_parse>
   1a5b4:	bb08      	cbnz	r0, 1a5fa <ip_interface_bind+0xa2>
   1a5b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1a5ba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1a5be:	82a3      	strh	r3, [r4, #20]
   1a5c0:	68a3      	ldr	r3, [r4, #8]
   1a5c2:	4e14      	ldr	r6, [pc, #80]	; (1a614 <ip_interface_bind+0xbc>)
   1a5c4:	4413      	add	r3, r2
   1a5c6:	60a3      	str	r3, [r4, #8]
   1a5c8:	682b      	ldr	r3, [r5, #0]
   1a5ca:	82e2      	strh	r2, [r4, #22]
   1a5cc:	4033      	ands	r3, r6
   1a5ce:	f043 0303 	orr.w	r3, r3, #3
   1a5d2:	4622      	mov	r2, r4
   1a5d4:	f247 0105 	movw	r1, #28677	; 0x7005
   1a5d8:	2004      	movs	r0, #4
   1a5da:	602b      	str	r3, [r5, #0]
   1a5dc:	f006 fc69 	bl	20eb2 <rpc_client_request_send>
   1a5e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a5e4:	2104      	movs	r1, #4
   1a5e6:	4638      	mov	r0, r7
   1a5e8:	ab03      	add	r3, sp, #12
   1a5ea:	f006 fd11 	bl	21010 <ip_interface_wait>
   1a5ee:	b140      	cbz	r0, 1a602 <ip_interface_bind+0xaa>
   1a5f0:	682b      	ldr	r3, [r5, #0]
   1a5f2:	4033      	ands	r3, r6
   1a5f4:	f043 0302 	orr.w	r3, r3, #2
   1a5f8:	602b      	str	r3, [r5, #0]
   1a5fa:	f005 ffd6 	bl	205aa <nrf_modem_os_errno_set>
   1a5fe:	f04f 30ff 	mov.w	r0, #4294967295
   1a602:	b004      	add	sp, #16
   1a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a608:	2016      	movs	r0, #22
   1a60a:	e7f6      	b.n	1a5fa <ip_interface_bind+0xa2>
   1a60c:	2009      	movs	r0, #9
   1a60e:	e7f4      	b.n	1a5fa <ip_interface_bind+0xa2>
   1a610:	200c      	movs	r0, #12
   1a612:	e7f2      	b.n	1a5fa <ip_interface_bind+0xa2>
   1a614:	ffff0000 	.word	0xffff0000

0001a618 <ip_interface_listen>:
   1a618:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a61a:	4605      	mov	r5, r0
   1a61c:	f7ff fc40 	bl	19ea0 <interface_socket_from_handle_get>
   1a620:	4604      	mov	r4, r0
   1a622:	2800      	cmp	r0, #0
   1a624:	d03a      	beq.n	1a69c <ip_interface_listen+0x84>
   1a626:	6803      	ldr	r3, [r0, #0]
   1a628:	b29b      	uxth	r3, r3
   1a62a:	2b04      	cmp	r3, #4
   1a62c:	d003      	beq.n	1a636 <ip_interface_listen+0x1e>
   1a62e:	6803      	ldr	r3, [r0, #0]
   1a630:	b29b      	uxth	r3, r3
   1a632:	2b0b      	cmp	r3, #11
   1a634:	d134      	bne.n	1a6a0 <ip_interface_listen+0x88>
   1a636:	2100      	movs	r1, #0
   1a638:	4628      	mov	r0, r5
   1a63a:	4a1c      	ldr	r2, [pc, #112]	; (1a6ac <ip_interface_listen+0x94>)
   1a63c:	f7ff fb9c 	bl	19d78 <interface_socket_packet_handler_update>
   1a640:	4603      	mov	r3, r0
   1a642:	bb78      	cbnz	r0, 1a6a4 <ip_interface_listen+0x8c>
   1a644:	f247 0208 	movw	r2, #28680	; 0x7008
   1a648:	4628      	mov	r0, r5
   1a64a:	69a1      	ldr	r1, [r4, #24]
   1a64c:	f006 fccd 	bl	20fea <ip_interface_request_create>
   1a650:	4602      	mov	r2, r0
   1a652:	b348      	cbz	r0, 1a6a8 <ip_interface_listen+0x90>
   1a654:	6883      	ldr	r3, [r0, #8]
   1a656:	4e16      	ldr	r6, [pc, #88]	; (1a6b0 <ip_interface_listen+0x98>)
   1a658:	3304      	adds	r3, #4
   1a65a:	6083      	str	r3, [r0, #8]
   1a65c:	6823      	ldr	r3, [r4, #0]
   1a65e:	f247 0108 	movw	r1, #28680	; 0x7008
   1a662:	4033      	ands	r3, r6
   1a664:	f043 0306 	orr.w	r3, r3, #6
   1a668:	2004      	movs	r0, #4
   1a66a:	6023      	str	r3, [r4, #0]
   1a66c:	f006 fc21 	bl	20eb2 <rpc_client_request_send>
   1a670:	f04f 33ff 	mov.w	r3, #4294967295
   1a674:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a678:	9301      	str	r3, [sp, #4]
   1a67a:	2107      	movs	r1, #7
   1a67c:	4628      	mov	r0, r5
   1a67e:	ab01      	add	r3, sp, #4
   1a680:	f006 fcc6 	bl	21010 <ip_interface_wait>
   1a684:	b140      	cbz	r0, 1a698 <ip_interface_listen+0x80>
   1a686:	6823      	ldr	r3, [r4, #0]
   1a688:	4033      	ands	r3, r6
   1a68a:	f043 0304 	orr.w	r3, r3, #4
   1a68e:	6023      	str	r3, [r4, #0]
   1a690:	f005 ff8b 	bl	205aa <nrf_modem_os_errno_set>
   1a694:	f04f 30ff 	mov.w	r0, #4294967295
   1a698:	b002      	add	sp, #8
   1a69a:	bd70      	pop	{r4, r5, r6, pc}
   1a69c:	2009      	movs	r0, #9
   1a69e:	e7f7      	b.n	1a690 <ip_interface_listen+0x78>
   1a6a0:	2016      	movs	r0, #22
   1a6a2:	e7f5      	b.n	1a690 <ip_interface_listen+0x78>
   1a6a4:	200b      	movs	r0, #11
   1a6a6:	e7f3      	b.n	1a690 <ip_interface_listen+0x78>
   1a6a8:	200c      	movs	r0, #12
   1a6aa:	e7f1      	b.n	1a690 <ip_interface_listen+0x78>
   1a6ac:	00020f43 	.word	0x00020f43
   1a6b0:	ffff0000 	.word	0xffff0000

0001a6b4 <ip_interface_accept>:
   1a6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6b8:	2500      	movs	r5, #0
   1a6ba:	4680      	mov	r8, r0
   1a6bc:	460f      	mov	r7, r1
   1a6be:	4691      	mov	r9, r2
   1a6c0:	9500      	str	r5, [sp, #0]
   1a6c2:	f7ff fbed 	bl	19ea0 <interface_socket_from_handle_get>
   1a6c6:	4604      	mov	r4, r0
   1a6c8:	2800      	cmp	r0, #0
   1a6ca:	f000 80c7 	beq.w	1a85c <ip_interface_accept+0x1a8>
   1a6ce:	6903      	ldr	r3, [r0, #16]
   1a6d0:	2b01      	cmp	r3, #1
   1a6d2:	f040 80c6 	bne.w	1a862 <ip_interface_accept+0x1ae>
   1a6d6:	6803      	ldr	r3, [r0, #0]
   1a6d8:	b29b      	uxth	r3, r3
   1a6da:	2b07      	cmp	r3, #7
   1a6dc:	f040 80c3 	bne.w	1a866 <ip_interface_accept+0x1b2>
   1a6e0:	f04f 33ff 	mov.w	r3, #4294967295
   1a6e4:	9301      	str	r3, [sp, #4]
   1a6e6:	6803      	ldr	r3, [r0, #0]
   1a6e8:	f013 5a80 	ands.w	sl, r3, #268435456	; 0x10000000
   1a6ec:	d15c      	bne.n	1a7a8 <ip_interface_accept+0xf4>
   1a6ee:	6803      	ldr	r3, [r0, #0]
   1a6f0:	03db      	lsls	r3, r3, #15
   1a6f2:	d45d      	bmi.n	1a7b0 <ip_interface_accept+0xfc>
   1a6f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a6f8:	4640      	mov	r0, r8
   1a6fa:	4611      	mov	r1, r2
   1a6fc:	ab01      	add	r3, sp, #4
   1a6fe:	f006 fc87 	bl	21010 <ip_interface_wait>
   1a702:	4606      	mov	r6, r0
   1a704:	6825      	ldr	r5, [r4, #0]
   1a706:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1a70a:	d053      	beq.n	1a7b4 <ip_interface_accept+0x100>
   1a70c:	4668      	mov	r0, sp
   1a70e:	4a58      	ldr	r2, [pc, #352]	; (1a870 <ip_interface_accept+0x1bc>)
   1a710:	6921      	ldr	r1, [r4, #16]
   1a712:	f7ff faff 	bl	19d14 <interface_socket_allocate>
   1a716:	9b00      	ldr	r3, [sp, #0]
   1a718:	4605      	mov	r5, r0
   1a71a:	2b00      	cmp	r3, #0
   1a71c:	f000 80a5 	beq.w	1a86a <ip_interface_accept+0x1b6>
   1a720:	6962      	ldr	r2, [r4, #20]
   1a722:	4640      	mov	r0, r8
   1a724:	615a      	str	r2, [r3, #20]
   1a726:	68e2      	ldr	r2, [r4, #12]
   1a728:	69a1      	ldr	r1, [r4, #24]
   1a72a:	60da      	str	r2, [r3, #12]
   1a72c:	6922      	ldr	r2, [r4, #16]
   1a72e:	611a      	str	r2, [r3, #16]
   1a730:	f247 020c 	movw	r2, #28684	; 0x700c
   1a734:	2300      	movs	r3, #0
   1a736:	f006 fc58 	bl	20fea <ip_interface_request_create>
   1a73a:	4602      	mov	r2, r0
   1a73c:	2800      	cmp	r0, #0
   1a73e:	f000 8094 	beq.w	1a86a <ip_interface_accept+0x1b6>
   1a742:	6823      	ldr	r3, [r4, #0]
   1a744:	f8df b130 	ldr.w	fp, [pc, #304]	; 1a878 <ip_interface_accept+0x1c4>
   1a748:	f247 010c 	movw	r1, #28684	; 0x700c
   1a74c:	ea03 030b 	and.w	r3, r3, fp
   1a750:	f043 0308 	orr.w	r3, r3, #8
   1a754:	2004      	movs	r0, #4
   1a756:	6023      	str	r3, [r4, #0]
   1a758:	f006 fbab 	bl	20eb2 <rpc_client_request_send>
   1a75c:	6823      	ldr	r3, [r4, #0]
   1a75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a762:	ea23 030a 	bic.w	r3, r3, sl
   1a766:	6023      	str	r3, [r4, #0]
   1a768:	2109      	movs	r1, #9
   1a76a:	ab01      	add	r3, sp, #4
   1a76c:	4640      	mov	r0, r8
   1a76e:	f006 fc4f 	bl	21010 <ip_interface_wait>
   1a772:	6823      	ldr	r3, [r4, #0]
   1a774:	4606      	mov	r6, r0
   1a776:	ea43 030a 	orr.w	r3, r3, sl
   1a77a:	6023      	str	r3, [r4, #0]
   1a77c:	b1e0      	cbz	r0, 1a7b8 <ip_interface_accept+0x104>
   1a77e:	6823      	ldr	r3, [r4, #0]
   1a780:	ea03 030b 	and.w	r3, r3, fp
   1a784:	f043 0307 	orr.w	r3, r3, #7
   1a788:	6023      	str	r3, [r4, #0]
   1a78a:	6823      	ldr	r3, [r4, #0]
   1a78c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1a790:	6023      	str	r3, [r4, #0]
   1a792:	9b00      	ldr	r3, [sp, #0]
   1a794:	b113      	cbz	r3, 1a79c <ip_interface_accept+0xe8>
   1a796:	4628      	mov	r0, r5
   1a798:	f7ff fae2 	bl	19d60 <interface_socket_free>
   1a79c:	4630      	mov	r0, r6
   1a79e:	f005 ff04 	bl	205aa <nrf_modem_os_errno_set>
   1a7a2:	f04f 30ff 	mov.w	r0, #4294967295
   1a7a6:	e046      	b.n	1a836 <ip_interface_accept+0x182>
   1a7a8:	260b      	movs	r6, #11
   1a7aa:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
   1a7ae:	e7a9      	b.n	1a704 <ip_interface_accept+0x50>
   1a7b0:	2616      	movs	r6, #22
   1a7b2:	e7a7      	b.n	1a704 <ip_interface_accept+0x50>
   1a7b4:	2e00      	cmp	r6, #0
   1a7b6:	d1ec      	bne.n	1a792 <ip_interface_accept+0xde>
   1a7b8:	4e2e      	ldr	r6, [pc, #184]	; (1a874 <ip_interface_accept+0x1c0>)
   1a7ba:	9800      	ldr	r0, [sp, #0]
   1a7bc:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
   1a7c0:	699a      	ldr	r2, [r3, #24]
   1a7c2:	6182      	str	r2, [r0, #24]
   1a7c4:	b1c7      	cbz	r7, 1a7f8 <ip_interface_accept+0x144>
   1a7c6:	68c2      	ldr	r2, [r0, #12]
   1a7c8:	2a0a      	cmp	r2, #10
   1a7ca:	d137      	bne.n	1a83c <ip_interface_accept+0x188>
   1a7cc:	f8d9 1000 	ldr.w	r1, [r9]
   1a7d0:	2924      	cmp	r1, #36	; 0x24
   1a7d2:	d111      	bne.n	1a7f8 <ip_interface_accept+0x144>
   1a7d4:	7039      	strb	r1, [r7, #0]
   1a7d6:	607a      	str	r2, [r7, #4]
   1a7d8:	7f1a      	ldrb	r2, [r3, #28]
   1a7da:	7f59      	ldrb	r1, [r3, #29]
   1a7dc:	3710      	adds	r7, #16
   1a7de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a7e2:	f827 2c08 	strh.w	r2, [r7, #-8]
   1a7e6:	f103 0220 	add.w	r2, r3, #32
   1a7ea:	3330      	adds	r3, #48	; 0x30
   1a7ec:	f852 1b04 	ldr.w	r1, [r2], #4
   1a7f0:	429a      	cmp	r2, r3
   1a7f2:	f847 1b04 	str.w	r1, [r7], #4
   1a7f6:	d1f9      	bne.n	1a7ec <ip_interface_accept+0x138>
   1a7f8:	6802      	ldr	r2, [r0, #0]
   1a7fa:	491f      	ldr	r1, [pc, #124]	; (1a878 <ip_interface_accept+0x1c4>)
   1a7fc:	400a      	ands	r2, r1
   1a7fe:	f042 0205 	orr.w	r2, r2, #5
   1a802:	6002      	str	r2, [r0, #0]
   1a804:	6802      	ldr	r2, [r0, #0]
   1a806:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1a80a:	6002      	str	r2, [r0, #0]
   1a80c:	6802      	ldr	r2, [r0, #0]
   1a80e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1a812:	6002      	str	r2, [r0, #0]
   1a814:	6823      	ldr	r3, [r4, #0]
   1a816:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   1a81a:	400b      	ands	r3, r1
   1a81c:	f043 0307 	orr.w	r3, r3, #7
   1a820:	6023      	str	r3, [r4, #0]
   1a822:	6823      	ldr	r3, [r4, #0]
   1a824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1a828:	6023      	str	r3, [r4, #0]
   1a82a:	f006 fb49 	bl	20ec0 <rpc_client_message_free>
   1a82e:	2300      	movs	r3, #0
   1a830:	4628      	mov	r0, r5
   1a832:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   1a836:	b003      	add	sp, #12
   1a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a83c:	2a02      	cmp	r2, #2
   1a83e:	d1db      	bne.n	1a7f8 <ip_interface_accept+0x144>
   1a840:	f8d9 1000 	ldr.w	r1, [r9]
   1a844:	2910      	cmp	r1, #16
   1a846:	d1d7      	bne.n	1a7f8 <ip_interface_accept+0x144>
   1a848:	7039      	strb	r1, [r7, #0]
   1a84a:	607a      	str	r2, [r7, #4]
   1a84c:	7f1a      	ldrb	r2, [r3, #28]
   1a84e:	7f59      	ldrb	r1, [r3, #29]
   1a850:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a854:	813a      	strh	r2, [r7, #8]
   1a856:	6a1b      	ldr	r3, [r3, #32]
   1a858:	60fb      	str	r3, [r7, #12]
   1a85a:	e7cd      	b.n	1a7f8 <ip_interface_accept+0x144>
   1a85c:	2609      	movs	r6, #9
   1a85e:	4605      	mov	r5, r0
   1a860:	e797      	b.n	1a792 <ip_interface_accept+0xde>
   1a862:	265f      	movs	r6, #95	; 0x5f
   1a864:	e795      	b.n	1a792 <ip_interface_accept+0xde>
   1a866:	2616      	movs	r6, #22
   1a868:	e793      	b.n	1a792 <ip_interface_accept+0xde>
   1a86a:	260c      	movs	r6, #12
   1a86c:	e791      	b.n	1a792 <ip_interface_accept+0xde>
   1a86e:	bf00      	nop
   1a870:	00020f43 	.word	0x00020f43
   1a874:	2000d538 	.word	0x2000d538
   1a878:	ffff0000 	.word	0xffff0000

0001a87c <ip_interface_setopt>:
   1a87c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a880:	2901      	cmp	r1, #1
   1a882:	4606      	mov	r6, r0
   1a884:	4690      	mov	r8, r2
   1a886:	461d      	mov	r5, r3
   1a888:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1a88a:	d008      	beq.n	1a89e <ip_interface_setopt+0x22>
   1a88c:	206d      	movs	r0, #109	; 0x6d
   1a88e:	f005 fe8c 	bl	205aa <nrf_modem_os_errno_set>
   1a892:	f04f 34ff 	mov.w	r4, #4294967295
   1a896:	4620      	mov	r0, r4
   1a898:	b004      	add	sp, #16
   1a89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a89e:	f7ff faff 	bl	19ea0 <interface_socket_from_handle_get>
   1a8a2:	4604      	mov	r4, r0
   1a8a4:	b908      	cbnz	r0, 1a8aa <ip_interface_setopt+0x2e>
   1a8a6:	2009      	movs	r0, #9
   1a8a8:	e7f1      	b.n	1a88e <ip_interface_setopt+0x12>
   1a8aa:	f1a8 0319 	sub.w	r3, r8, #25
   1a8ae:	2b1e      	cmp	r3, #30
   1a8b0:	f200 8086 	bhi.w	1a9c0 <ip_interface_setopt+0x144>
   1a8b4:	e8df f003 	tbb	[pc, r3]
   1a8b8:	84848410 	.word	0x84848410
   1a8bc:	51493d84 	.word	0x51493d84
   1a8c0:	84848484 	.word	0x84848484
   1a8c4:	59848484 	.word	0x59848484
   1a8c8:	84848484 	.word	0x84848484
   1a8cc:	84848484 	.word	0x84848484
   1a8d0:	73666184 	.word	0x73666184
   1a8d4:	7976      	.short	0x7976
   1a8d6:	7c          	.byte	0x7c
   1a8d7:	00          	.byte	0x00
   1a8d8:	b90d      	cbnz	r5, 1a8de <ip_interface_setopt+0x62>
   1a8da:	200e      	movs	r0, #14
   1a8dc:	e7d7      	b.n	1a88e <ip_interface_setopt+0x12>
   1a8de:	4628      	mov	r0, r5
   1a8e0:	f7f6 fc66 	bl	111b0 <strlen>
   1a8e4:	42b8      	cmp	r0, r7
   1a8e6:	d1f8      	bne.n	1a8da <ip_interface_setopt+0x5e>
   1a8e8:	6823      	ldr	r3, [r4, #0]
   1a8ea:	b29b      	uxth	r3, r3
   1a8ec:	2b02      	cmp	r3, #2
   1a8ee:	d1da      	bne.n	1a8a6 <ip_interface_setopt+0x2a>
   1a8f0:	4628      	mov	r0, r5
   1a8f2:	4937      	ldr	r1, [pc, #220]	; (1a9d0 <ip_interface_setopt+0x154>)
   1a8f4:	f007 ffa0 	bl	22838 <strstr>
   1a8f8:	b108      	cbz	r0, 1a8fe <ip_interface_setopt+0x82>
   1a8fa:	4285      	cmp	r5, r0
   1a8fc:	d001      	beq.n	1a902 <ip_interface_setopt+0x86>
   1a8fe:	2016      	movs	r0, #22
   1a900:	e7c5      	b.n	1a88e <ip_interface_setopt+0x12>
   1a902:	4833      	ldr	r0, [pc, #204]	; (1a9d0 <ip_interface_setopt+0x154>)
   1a904:	f7f6 fc54 	bl	111b0 <strlen>
   1a908:	220a      	movs	r2, #10
   1a90a:	2100      	movs	r1, #0
   1a90c:	4428      	add	r0, r5
   1a90e:	f003 fabd 	bl	1de8c <strtoul>
   1a912:	2304      	movs	r3, #4
   1a914:	9301      	str	r3, [sp, #4]
   1a916:	ab03      	add	r3, sp, #12
   1a918:	4621      	mov	r1, r4
   1a91a:	9003      	str	r0, [sp, #12]
   1a91c:	9300      	str	r3, [sp, #0]
   1a91e:	2208      	movs	r2, #8
   1a920:	f243 0310 	movw	r3, #12304	; 0x3010
   1a924:	4630      	mov	r0, r6
   1a926:	f006 fd1b 	bl	21360 <ip_interface_socketoption_send>
   1a92a:	4604      	mov	r4, r0
   1a92c:	2800      	cmp	r0, #0
   1a92e:	d0b2      	beq.n	1a896 <ip_interface_setopt+0x1a>
   1a930:	e7ad      	b.n	1a88e <ip_interface_setopt+0x12>
   1a932:	4602      	mov	r2, r0
   1a934:	4633      	mov	r3, r6
   1a936:	f248 0101 	movw	r1, #32769	; 0x8001
   1a93a:	f44f 7000 	mov.w	r0, #512	; 0x200
   1a93e:	e9cd 5700 	strd	r5, r7, [sp]
   1a942:	f006 fd58 	bl	213f6 <setopt_check_and_send_int>
   1a946:	4604      	mov	r4, r0
   1a948:	e7a5      	b.n	1a896 <ip_interface_setopt+0x1a>
   1a94a:	4602      	mov	r2, r0
   1a94c:	4633      	mov	r3, r6
   1a94e:	f244 0110 	movw	r1, #16400	; 0x4010
   1a952:	2004      	movs	r0, #4
   1a954:	e9cd 5700 	strd	r5, r7, [sp]
   1a958:	e7f3      	b.n	1a942 <ip_interface_setopt+0xc6>
   1a95a:	4602      	mov	r2, r0
   1a95c:	4633      	mov	r3, r6
   1a95e:	f246 0110 	movw	r1, #24592	; 0x6010
   1a962:	2006      	movs	r0, #6
   1a964:	e9cd 5700 	strd	r5, r7, [sp]
   1a968:	e7eb      	b.n	1a942 <ip_interface_setopt+0xc6>
   1a96a:	4602      	mov	r2, r0
   1a96c:	4633      	mov	r3, r6
   1a96e:	f241 0104 	movw	r1, #4100	; 0x1004
   1a972:	2008      	movs	r0, #8
   1a974:	e9cd 5700 	strd	r5, r7, [sp]
   1a978:	e7e3      	b.n	1a942 <ip_interface_setopt+0xc6>
   1a97a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1a97e:	62a3      	str	r3, [r4, #40]	; 0x28
   1a980:	2400      	movs	r4, #0
   1a982:	e788      	b.n	1a896 <ip_interface_setopt+0x1a>
   1a984:	2400      	movs	r4, #0
   1a986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1a98a:	4622      	mov	r2, r4
   1a98c:	6283      	str	r3, [r0, #40]	; 0x28
   1a98e:	4621      	mov	r1, r4
   1a990:	4623      	mov	r3, r4
   1a992:	4630      	mov	r0, r6
   1a994:	e9cd 4400 	strd	r4, r4, [sp]
   1a998:	f7ff fc4a 	bl	1a230 <ip_interface_sendto>
   1a99c:	e77b      	b.n	1a896 <ip_interface_setopt+0x1a>
   1a99e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a9a2:	e7ec      	b.n	1a97e <ip_interface_setopt+0x102>
   1a9a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1a9a8:	e7e9      	b.n	1a97e <ip_interface_setopt+0x102>
   1a9aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a9ae:	e7e6      	b.n	1a97e <ip_interface_setopt+0x102>
   1a9b0:	4602      	mov	r2, r0
   1a9b2:	4633      	mov	r3, r6
   1a9b4:	f245 0106 	movw	r1, #20486	; 0x5006
   1a9b8:	2001      	movs	r0, #1
   1a9ba:	e9cd 5700 	strd	r5, r7, [sp]
   1a9be:	e7c0      	b.n	1a942 <ip_interface_setopt+0xc6>
   1a9c0:	462b      	mov	r3, r5
   1a9c2:	4642      	mov	r2, r8
   1a9c4:	2101      	movs	r1, #1
   1a9c6:	4630      	mov	r0, r6
   1a9c8:	9700      	str	r7, [sp, #0]
   1a9ca:	f7ff fa79 	bl	19ec0 <interface_socket_setopt>
   1a9ce:	e7ba      	b.n	1a946 <ip_interface_setopt+0xca>
   1a9d0:	000250f7 	.word	0x000250f7

0001a9d4 <ip_interface_getaddrinfo>:
   1a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9d8:	b087      	sub	sp, #28
   1a9da:	9301      	str	r3, [sp, #4]
   1a9dc:	4b72      	ldr	r3, [pc, #456]	; (1aba8 <ip_interface_getaddrinfo+0x1d4>)
   1a9de:	4680      	mov	r8, r0
   1a9e0:	781b      	ldrb	r3, [r3, #0]
   1a9e2:	460f      	mov	r7, r1
   1a9e4:	4614      	mov	r4, r2
   1a9e6:	b93b      	cbnz	r3, 1a9f8 <ip_interface_getaddrinfo+0x24>
   1a9e8:	2075      	movs	r0, #117	; 0x75
   1a9ea:	f005 fdde 	bl	205aa <nrf_modem_os_errno_set>
   1a9ee:	f240 1015 	movw	r0, #277	; 0x115
   1a9f2:	b007      	add	sp, #28
   1a9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9f8:	4d6c      	ldr	r5, [pc, #432]	; (1abac <ip_interface_getaddrinfo+0x1d8>)
   1a9fa:	682e      	ldr	r6, [r5, #0]
   1a9fc:	2e00      	cmp	r6, #0
   1a9fe:	f040 80d0 	bne.w	1aba2 <ip_interface_getaddrinfo+0x1ce>
   1aa02:	2301      	movs	r3, #1
   1aa04:	486a      	ldr	r0, [pc, #424]	; (1abb0 <ip_interface_getaddrinfo+0x1dc>)
   1aa06:	496b      	ldr	r1, [pc, #428]	; (1abb4 <ip_interface_getaddrinfo+0x1e0>)
   1aa08:	4a6b      	ldr	r2, [pc, #428]	; (1abb8 <ip_interface_getaddrinfo+0x1e4>)
   1aa0a:	602b      	str	r3, [r5, #0]
   1aa0c:	6003      	str	r3, [r0, #0]
   1aa0e:	4b6b      	ldr	r3, [pc, #428]	; (1abbc <ip_interface_getaddrinfo+0x1e8>)
   1aa10:	468a      	mov	sl, r1
   1aa12:	4691      	mov	r9, r2
   1aa14:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 1abcc <ip_interface_getaddrinfo+0x1f8>
   1aa18:	600e      	str	r6, [r1, #0]
   1aa1a:	6016      	str	r6, [r2, #0]
   1aa1c:	801e      	strh	r6, [r3, #0]
   1aa1e:	9002      	str	r0, [sp, #8]
   1aa20:	b194      	cbz	r4, 1aa48 <ip_interface_getaddrinfo+0x74>
   1aa22:	68e2      	ldr	r2, [r4, #12]
   1aa24:	b182      	cbz	r2, 1aa48 <ip_interface_getaddrinfo+0x74>
   1aa26:	f8cb 2000 	str.w	r2, [fp]
   1aa2a:	b93f      	cbnz	r7, 1aa3c <ip_interface_getaddrinfo+0x68>
   1aa2c:	68a0      	ldr	r0, [r4, #8]
   1aa2e:	2803      	cmp	r0, #3
   1aa30:	d146      	bne.n	1aac0 <ip_interface_getaddrinfo+0xec>
   1aa32:	2300      	movs	r3, #0
   1aa34:	f44f 7089 	mov.w	r0, #274	; 0x112
   1aa38:	602b      	str	r3, [r5, #0]
   1aa3a:	e7da      	b.n	1a9f2 <ip_interface_getaddrinfo+0x1e>
   1aa3c:	6822      	ldr	r2, [r4, #0]
   1aa3e:	04d1      	lsls	r1, r2, #19
   1aa40:	d508      	bpl.n	1aa54 <ip_interface_getaddrinfo+0x80>
   1aa42:	0552      	lsls	r2, r2, #21
   1aa44:	d406      	bmi.n	1aa54 <ip_interface_getaddrinfo+0x80>
   1aa46:	e7f1      	b.n	1aa2c <ip_interface_getaddrinfo+0x58>
   1aa48:	2201      	movs	r2, #1
   1aa4a:	f8cb 2000 	str.w	r2, [fp]
   1aa4e:	b187      	cbz	r7, 1aa72 <ip_interface_getaddrinfo+0x9e>
   1aa50:	2c00      	cmp	r4, #0
   1aa52:	d1f3      	bne.n	1aa3c <ip_interface_getaddrinfo+0x68>
   1aa54:	220a      	movs	r2, #10
   1aa56:	2100      	movs	r1, #0
   1aa58:	4638      	mov	r0, r7
   1aa5a:	f003 f8f3 	bl	1dc44 <strtol>
   1aa5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1aa62:	1e41      	subs	r1, r0, #1
   1aa64:	4291      	cmp	r1, r2
   1aa66:	4b55      	ldr	r3, [pc, #340]	; (1abbc <ip_interface_getaddrinfo+0x1e8>)
   1aa68:	d8e3      	bhi.n	1aa32 <ip_interface_getaddrinfo+0x5e>
   1aa6a:	0202      	lsls	r2, r0, #8
   1aa6c:	ea42 2020 	orr.w	r0, r2, r0, asr #8
   1aa70:	8018      	strh	r0, [r3, #0]
   1aa72:	2c00      	cmp	r4, #0
   1aa74:	d1da      	bne.n	1aa2c <ip_interface_getaddrinfo+0x58>
   1aa76:	f1b8 0f00 	cmp.w	r8, #0
   1aa7a:	d003      	beq.n	1aa84 <ip_interface_getaddrinfo+0xb0>
   1aa7c:	4640      	mov	r0, r8
   1aa7e:	f7f6 fb97 	bl	111b0 <strlen>
   1aa82:	4606      	mov	r6, r0
   1aa84:	2f00      	cmp	r7, #0
   1aa86:	d03c      	beq.n	1ab02 <ip_interface_getaddrinfo+0x12e>
   1aa88:	2c00      	cmp	r4, #0
   1aa8a:	d03a      	beq.n	1ab02 <ip_interface_getaddrinfo+0x12e>
   1aa8c:	6823      	ldr	r3, [r4, #0]
   1aa8e:	04db      	lsls	r3, r3, #19
   1aa90:	d537      	bpl.n	1ab02 <ip_interface_getaddrinfo+0x12e>
   1aa92:	213a      	movs	r1, #58	; 0x3a
   1aa94:	4638      	mov	r0, r7
   1aa96:	f007 fe88 	bl	227aa <strchr>
   1aa9a:	bb48      	cbnz	r0, 1aaf0 <ip_interface_getaddrinfo+0x11c>
   1aa9c:	4601      	mov	r1, r0
   1aa9e:	220a      	movs	r2, #10
   1aaa0:	4638      	mov	r0, r7
   1aaa2:	f003 f9f3 	bl	1de8c <strtoul>
   1aaa6:	4601      	mov	r1, r0
   1aaa8:	4633      	mov	r3, r6
   1aaaa:	f247 020d 	movw	r2, #28685	; 0x700d
   1aaae:	4608      	mov	r0, r1
   1aab0:	f006 fa9b 	bl	20fea <ip_interface_request_create>
   1aab4:	4607      	mov	r7, r0
   1aab6:	bb38      	cbnz	r0, 1ab08 <ip_interface_getaddrinfo+0x134>
   1aab8:	6028      	str	r0, [r5, #0]
   1aaba:	f240 100f 	movw	r0, #271	; 0x10f
   1aabe:	e798      	b.n	1a9f2 <ip_interface_getaddrinfo+0x1e>
   1aac0:	6863      	ldr	r3, [r4, #4]
   1aac2:	2b0a      	cmp	r3, #10
   1aac4:	d007      	beq.n	1aad6 <ip_interface_getaddrinfo+0x102>
   1aac6:	f033 0302 	bics.w	r3, r3, #2
   1aaca:	d004      	beq.n	1aad6 <ip_interface_getaddrinfo+0x102>
   1aacc:	2300      	movs	r3, #0
   1aace:	f44f 7087 	mov.w	r0, #270	; 0x10e
   1aad2:	602b      	str	r3, [r5, #0]
   1aad4:	e78d      	b.n	1a9f2 <ip_interface_getaddrinfo+0x1e>
   1aad6:	2301      	movs	r3, #1
   1aad8:	68e1      	ldr	r1, [r4, #12]
   1aada:	aa05      	add	r2, sp, #20
   1aadc:	9305      	str	r3, [sp, #20]
   1aade:	f006 fa3c 	bl	20f5a <protocol_verify>
   1aae2:	2800      	cmp	r0, #0
   1aae4:	d0c7      	beq.n	1aa76 <ip_interface_getaddrinfo+0xa2>
   1aae6:	2300      	movs	r3, #0
   1aae8:	f240 1013 	movw	r0, #275	; 0x113
   1aaec:	602b      	str	r3, [r5, #0]
   1aaee:	e780      	b.n	1a9f2 <ip_interface_getaddrinfo+0x1e>
   1aaf0:	9003      	str	r0, [sp, #12]
   1aaf2:	4833      	ldr	r0, [pc, #204]	; (1abc0 <ip_interface_getaddrinfo+0x1ec>)
   1aaf4:	f7f6 fb5c 	bl	111b0 <strlen>
   1aaf8:	9b03      	ldr	r3, [sp, #12]
   1aafa:	220a      	movs	r2, #10
   1aafc:	2100      	movs	r1, #0
   1aafe:	4418      	add	r0, r3
   1ab00:	e7cf      	b.n	1aaa2 <ip_interface_getaddrinfo+0xce>
   1ab02:	f04f 31ff 	mov.w	r1, #4294967295
   1ab06:	e7cf      	b.n	1aaa8 <ip_interface_getaddrinfo+0xd4>
   1ab08:	2c00      	cmp	r4, #0
   1ab0a:	d03a      	beq.n	1ab82 <ip_interface_getaddrinfo+0x1ae>
   1ab0c:	68a3      	ldr	r3, [r4, #8]
   1ab0e:	9a02      	ldr	r2, [sp, #8]
   1ab10:	2b02      	cmp	r3, #2
   1ab12:	6013      	str	r3, [r2, #0]
   1ab14:	6862      	ldr	r2, [r4, #4]
   1ab16:	bf08      	it	eq
   1ab18:	f8cb 3000 	streq.w	r3, [fp]
   1ab1c:	3a02      	subs	r2, #2
   1ab1e:	2a08      	cmp	r2, #8
   1ab20:	bf8e      	itee	hi
   1ab22:	2200      	movhi	r2, #0
   1ab24:	4927      	ldrls	r1, [pc, #156]	; (1abc4 <ip_interface_getaddrinfo+0x1f0>)
   1ab26:	568a      	ldrsbls	r2, [r1, r2]
   1ab28:	6182      	str	r2, [r0, #24]
   1ab2a:	68e2      	ldr	r2, [r4, #12]
   1ab2c:	61c3      	str	r3, [r0, #28]
   1ab2e:	2300      	movs	r3, #0
   1ab30:	6202      	str	r2, [r0, #32]
   1ab32:	7503      	strb	r3, [r0, #20]
   1ab34:	7543      	strb	r3, [r0, #21]
   1ab36:	7583      	strb	r3, [r0, #22]
   1ab38:	75c3      	strb	r3, [r0, #23]
   1ab3a:	68bb      	ldr	r3, [r7, #8]
   1ab3c:	3310      	adds	r3, #16
   1ab3e:	60bb      	str	r3, [r7, #8]
   1ab40:	f1b8 0f00 	cmp.w	r8, #0
   1ab44:	d005      	beq.n	1ab52 <ip_interface_getaddrinfo+0x17e>
   1ab46:	6838      	ldr	r0, [r7, #0]
   1ab48:	b118      	cbz	r0, 1ab52 <ip_interface_getaddrinfo+0x17e>
   1ab4a:	4632      	mov	r2, r6
   1ab4c:	4641      	mov	r1, r8
   1ab4e:	f007 fe15 	bl	2277c <memcpy>
   1ab52:	463a      	mov	r2, r7
   1ab54:	f247 010d 	movw	r1, #28685	; 0x700d
   1ab58:	2004      	movs	r0, #4
   1ab5a:	f006 f9aa 	bl	20eb2 <rpc_client_request_send>
   1ab5e:	f04f 33ff 	mov.w	r3, #4294967295
   1ab62:	9305      	str	r3, [sp, #20]
   1ab64:	4638      	mov	r0, r7
   1ab66:	a905      	add	r1, sp, #20
   1ab68:	f7fa fef8 	bl	1595c <nrf_modem_os_timedwait>
   1ab6c:	682b      	ldr	r3, [r5, #0]
   1ab6e:	2b01      	cmp	r3, #1
   1ab70:	d0f8      	beq.n	1ab64 <ip_interface_getaddrinfo+0x190>
   1ab72:	f8d9 0000 	ldr.w	r0, [r9]
   1ab76:	b950      	cbnz	r0, 1ab8e <ip_interface_getaddrinfo+0x1ba>
   1ab78:	f8da 3000 	ldr.w	r3, [sl]
   1ab7c:	9a01      	ldr	r2, [sp, #4]
   1ab7e:	6013      	str	r3, [r2, #0]
   1ab80:	e737      	b.n	1a9f2 <ip_interface_getaddrinfo+0x1e>
   1ab82:	2210      	movs	r2, #16
   1ab84:	4621      	mov	r1, r4
   1ab86:	3014      	adds	r0, #20
   1ab88:	f007 fe05 	bl	22796 <memset>
   1ab8c:	e7d5      	b.n	1ab3a <ip_interface_getaddrinfo+0x166>
   1ab8e:	2300      	movs	r3, #0
   1ab90:	602b      	str	r3, [r5, #0]
   1ab92:	4b0d      	ldr	r3, [pc, #52]	; (1abc8 <ip_interface_getaddrinfo+0x1f4>)
   1ab94:	6818      	ldr	r0, [r3, #0]
   1ab96:	b108      	cbz	r0, 1ab9c <ip_interface_getaddrinfo+0x1c8>
   1ab98:	f005 fd07 	bl	205aa <nrf_modem_os_errno_set>
   1ab9c:	f8d9 0000 	ldr.w	r0, [r9]
   1aba0:	e727      	b.n	1a9f2 <ip_interface_getaddrinfo+0x1e>
   1aba2:	f44f 708a 	mov.w	r0, #276	; 0x114
   1aba6:	e724      	b.n	1a9f2 <ip_interface_getaddrinfo+0x1e>
   1aba8:	2000f412 	.word	0x2000f412
   1abac:	2000d530 	.word	0x2000d530
   1abb0:	2000d524 	.word	0x2000d524
   1abb4:	2000d534 	.word	0x2000d534
   1abb8:	2000d52c 	.word	0x2000d52c
   1abbc:	2000d646 	.word	0x2000d646
   1abc0:	000251a2 	.word	0x000251a2
   1abc4:	000250fb 	.word	0x000250fb
   1abc8:	2000d528 	.word	0x2000d528
   1abcc:	2000d520 	.word	0x2000d520

0001abd0 <ip_interface_freeaddrinfo>:
   1abd0:	b538      	push	{r3, r4, r5, lr}
   1abd2:	4d0a      	ldr	r5, [pc, #40]	; (1abfc <ip_interface_freeaddrinfo+0x2c>)
   1abd4:	4604      	mov	r4, r0
   1abd6:	682a      	ldr	r2, [r5, #0]
   1abd8:	2a02      	cmp	r2, #2
   1abda:	d10e      	bne.n	1abfa <ip_interface_freeaddrinfo+0x2a>
   1abdc:	b148      	cbz	r0, 1abf2 <ip_interface_freeaddrinfo+0x22>
   1abde:	6940      	ldr	r0, [r0, #20]
   1abe0:	f7fa ffb8 	bl	15b54 <nrf_modem_os_free>
   1abe4:	69a0      	ldr	r0, [r4, #24]
   1abe6:	b108      	cbz	r0, 1abec <ip_interface_freeaddrinfo+0x1c>
   1abe8:	f7fa ffb4 	bl	15b54 <nrf_modem_os_free>
   1abec:	4620      	mov	r0, r4
   1abee:	f7fa ffb1 	bl	15b54 <nrf_modem_os_free>
   1abf2:	2300      	movs	r3, #0
   1abf4:	4a02      	ldr	r2, [pc, #8]	; (1ac00 <ip_interface_freeaddrinfo+0x30>)
   1abf6:	602b      	str	r3, [r5, #0]
   1abf8:	6013      	str	r3, [r2, #0]
   1abfa:	bd38      	pop	{r3, r4, r5, pc}
   1abfc:	2000d530 	.word	0x2000d530
   1ac00:	2000d52c 	.word	0x2000d52c

0001ac04 <rpc_ip_event_handler>:
   1ac04:	f248 030f 	movw	r3, #32783	; 0x800f
   1ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac0c:	4299      	cmp	r1, r3
   1ac0e:	4604      	mov	r4, r0
   1ac10:	460e      	mov	r6, r1
   1ac12:	b089      	sub	sp, #36	; 0x24
   1ac14:	f000 80a4 	beq.w	1ad60 <rpc_ip_event_handler+0x15c>
   1ac18:	f249 0304 	movw	r3, #36868	; 0x9004
   1ac1c:	4299      	cmp	r1, r3
   1ac1e:	f000 80ab 	beq.w	1ad78 <rpc_ip_event_handler+0x174>
   1ac22:	f248 030d 	movw	r3, #32781	; 0x800d
   1ac26:	4299      	cmp	r1, r3
   1ac28:	f040 80b8 	bne.w	1ad9c <rpc_ip_event_handler+0x198>
   1ac2c:	4bbc      	ldr	r3, [pc, #752]	; (1af20 <rpc_ip_event_handler+0x31c>)
   1ac2e:	681a      	ldr	r2, [r3, #0]
   1ac30:	9303      	str	r3, [sp, #12]
   1ac32:	2a01      	cmp	r2, #1
   1ac34:	d12d      	bne.n	1ac92 <rpc_ip_event_handler+0x8e>
   1ac36:	6940      	ldr	r0, [r0, #20]
   1ac38:	2800      	cmp	r0, #0
   1ac3a:	f040 808c 	bne.w	1ad56 <rpc_ip_event_handler+0x152>
   1ac3e:	f8d4 a018 	ldr.w	sl, [r4, #24]
   1ac42:	f8d4 8000 	ldr.w	r8, [r4]
   1ac46:	ea4f 134a 	mov.w	r3, sl, lsl #5
   1ac4a:	4618      	mov	r0, r3
   1ac4c:	9301      	str	r3, [sp, #4]
   1ac4e:	f7fa ff79 	bl	15b44 <nrf_modem_os_alloc>
   1ac52:	4607      	mov	r7, r0
   1ac54:	b310      	cbz	r0, 1ac9c <rpc_ip_event_handler+0x98>
   1ac56:	2024      	movs	r0, #36	; 0x24
   1ac58:	fb00 f00a 	mul.w	r0, r0, sl
   1ac5c:	f7fa ff72 	bl	15b44 <nrf_modem_os_alloc>
   1ac60:	4605      	mov	r5, r0
   1ac62:	b1e8      	cbz	r0, 1aca0 <rpc_ip_event_handler+0x9c>
   1ac64:	2604      	movs	r6, #4
   1ac66:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   1ac6a:	f107 0920 	add.w	r9, r7, #32
   1ac6e:	9302      	str	r3, [sp, #8]
   1ac70:	9b02      	ldr	r3, [sp, #8]
   1ac72:	42ab      	cmp	r3, r5
   1ac74:	d118      	bne.n	1aca8 <rpc_ip_event_handler+0xa4>
   1ac76:	f1ba 0f00 	cmp.w	sl, #0
   1ac7a:	d005      	beq.n	1ac88 <rpc_ip_event_handler+0x84>
   1ac7c:	9b01      	ldr	r3, [sp, #4]
   1ac7e:	443b      	add	r3, r7
   1ac80:	4699      	mov	r9, r3
   1ac82:	2300      	movs	r3, #0
   1ac84:	f849 3c04 	str.w	r3, [r9, #-4]
   1ac88:	4ba6      	ldr	r3, [pc, #664]	; (1af24 <rpc_ip_event_handler+0x320>)
   1ac8a:	601f      	str	r7, [r3, #0]
   1ac8c:	2302      	movs	r3, #2
   1ac8e:	9a03      	ldr	r2, [sp, #12]
   1ac90:	6013      	str	r3, [r2, #0]
   1ac92:	6820      	ldr	r0, [r4, #0]
   1ac94:	2800      	cmp	r0, #0
   1ac96:	f040 81c7 	bne.w	1b028 <rpc_ip_event_handler+0x424>
   1ac9a:	e1c7      	b.n	1b02c <rpc_ip_event_handler+0x428>
   1ac9c:	f7fa ff5a 	bl	15b54 <nrf_modem_os_free>
   1aca0:	220c      	movs	r2, #12
   1aca2:	4ba1      	ldr	r3, [pc, #644]	; (1af28 <rpc_ip_event_handler+0x324>)
   1aca4:	601a      	str	r2, [r3, #0]
   1aca6:	e7ef      	b.n	1ac88 <rpc_ip_event_handler+0x84>
   1aca8:	f858 2006 	ldr.w	r2, [r8, r6]
   1acac:	eb08 0106 	add.w	r1, r8, r6
   1acb0:	f849 2c20 	str.w	r2, [r9, #-32]
   1acb4:	eb08 0206 	add.w	r2, r8, r6
   1acb8:	6852      	ldr	r2, [r2, #4]
   1acba:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   1acbe:	3a01      	subs	r2, #1
   1acc0:	2a04      	cmp	r2, #4
   1acc2:	bf8c      	ite	hi
   1acc4:	2200      	movhi	r2, #0
   1acc6:	4b99      	ldrls	r3, [pc, #612]	; (1af2c <rpc_ip_event_handler+0x328>)
   1acc8:	f106 0614 	add.w	r6, r6, #20
   1accc:	bf98      	it	ls
   1acce:	569a      	ldrsbls	r2, [r3, r2]
   1acd0:	4b97      	ldr	r3, [pc, #604]	; (1af30 <rpc_ip_event_handler+0x32c>)
   1acd2:	f849 2c1c 	str.w	r2, [r9, #-28]
   1acd6:	681a      	ldr	r2, [r3, #0]
   1acd8:	4b96      	ldr	r3, [pc, #600]	; (1af34 <rpc_ip_event_handler+0x330>)
   1acda:	f849 2c18 	str.w	r2, [r9, #-24]
   1acde:	681a      	ldr	r2, [r3, #0]
   1ace0:	f849 2c14 	str.w	r2, [r9, #-20]
   1ace4:	8a0a      	ldrh	r2, [r1, #16]
   1ace6:	4994      	ldr	r1, [pc, #592]	; (1af38 <rpc_ip_event_handler+0x334>)
   1ace8:	2a04      	cmp	r2, #4
   1acea:	8808      	ldrh	r0, [r1, #0]
   1acec:	f849 2c10 	str.w	r2, [r9, #-16]
   1acf0:	f849 5c0c 	str.w	r5, [r9, #-12]
   1acf4:	eb08 0106 	add.w	r1, r8, r6
   1acf8:	d121      	bne.n	1ad3e <rpc_ip_event_handler+0x13a>
   1acfa:	2202      	movs	r2, #2
   1acfc:	606a      	str	r2, [r5, #4]
   1acfe:	2210      	movs	r2, #16
   1ad00:	8128      	strh	r0, [r5, #8]
   1ad02:	702a      	strb	r2, [r5, #0]
   1ad04:	680a      	ldr	r2, [r1, #0]
   1ad06:	60ea      	str	r2, [r5, #12]
   1ad08:	f859 2c10 	ldr.w	r2, [r9, #-16]
   1ad0c:	f10b 0001 	add.w	r0, fp, #1
   1ad10:	4416      	add	r6, r2
   1ad12:	f7fa ff17 	bl	15b44 <nrf_modem_os_alloc>
   1ad16:	f849 0c08 	str.w	r0, [r9, #-8]
   1ad1a:	b148      	cbz	r0, 1ad30 <rpc_ip_event_handler+0x12c>
   1ad1c:	465a      	mov	r2, fp
   1ad1e:	eb08 0106 	add.w	r1, r8, r6
   1ad22:	f007 fd2b 	bl	2277c <memcpy>
   1ad26:	2100      	movs	r1, #0
   1ad28:	f859 2c08 	ldr.w	r2, [r9, #-8]
   1ad2c:	f802 100b 	strb.w	r1, [r2, fp]
   1ad30:	f849 9c04 	str.w	r9, [r9, #-4]
   1ad34:	445e      	add	r6, fp
   1ad36:	f109 0920 	add.w	r9, r9, #32
   1ad3a:	3508      	adds	r5, #8
   1ad3c:	e798      	b.n	1ac70 <rpc_ip_event_handler+0x6c>
   1ad3e:	230a      	movs	r3, #10
   1ad40:	f04f 0c24 	mov.w	ip, #36	; 0x24
   1ad44:	8128      	strh	r0, [r5, #8]
   1ad46:	606b      	str	r3, [r5, #4]
   1ad48:	f885 c000 	strb.w	ip, [r5]
   1ad4c:	f105 0010 	add.w	r0, r5, #16
   1ad50:	f007 fd14 	bl	2277c <memcpy>
   1ad54:	e7d8      	b.n	1ad08 <rpc_ip_event_handler+0x104>
   1ad56:	f7ff f971 	bl	1a03c <rpc_error_to_nrf_gai_errno>
   1ad5a:	4b73      	ldr	r3, [pc, #460]	; (1af28 <rpc_ip_event_handler+0x324>)
   1ad5c:	6018      	str	r0, [r3, #0]
   1ad5e:	e795      	b.n	1ac8c <rpc_ip_event_handler+0x88>
   1ad60:	6943      	ldr	r3, [r0, #20]
   1ad62:	2b6a      	cmp	r3, #106	; 0x6a
   1ad64:	bf8e      	itee	hi
   1ad66:	235f      	movhi	r3, #95	; 0x5f
   1ad68:	4a74      	ldrls	r2, [pc, #464]	; (1af3c <rpc_ip_event_handler+0x338>)
   1ad6a:	5cd3      	ldrbls	r3, [r2, r3]
   1ad6c:	4a74      	ldr	r2, [pc, #464]	; (1af40 <rpc_ip_event_handler+0x33c>)
   1ad6e:	6013      	str	r3, [r2, #0]
   1ad70:	4b74      	ldr	r3, [pc, #464]	; (1af44 <rpc_ip_event_handler+0x340>)
   1ad72:	2201      	movs	r2, #1
   1ad74:	701a      	strb	r2, [r3, #0]
   1ad76:	e159      	b.n	1b02c <rpc_ip_event_handler+0x428>
   1ad78:	6903      	ldr	r3, [r0, #16]
   1ad7a:	2b03      	cmp	r3, #3
   1ad7c:	d807      	bhi.n	1ad8e <rpc_ip_event_handler+0x18a>
   1ad7e:	e8df f003 	tbb	[pc, r3]
   1ad82:	0802      	.short	0x0802
   1ad84:	0802      	.short	0x0802
   1ad86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1ad8a:	f7ff f835 	bl	19df8 <interface_sockets_aux_state_set>
   1ad8e:	4b6e      	ldr	r3, [pc, #440]	; (1af48 <rpc_ip_event_handler+0x344>)
   1ad90:	e7ef      	b.n	1ad72 <rpc_ip_event_handler+0x16e>
   1ad92:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1ad96:	f7ff f84d 	bl	19e34 <interface_sockets_aux_state_clear>
   1ad9a:	e7f8      	b.n	1ad8e <rpc_ip_event_handler+0x18a>
   1ad9c:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1ada0:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1ada4:	68c0      	ldr	r0, [r0, #12]
   1ada6:	d13b      	bne.n	1ae20 <rpc_ip_event_handler+0x21c>
   1ada8:	f7ff f862 	bl	19e70 <interface_from_internal_id_search>
   1adac:	4607      	mov	r7, r0
   1adae:	4638      	mov	r0, r7
   1adb0:	f7ff f876 	bl	19ea0 <interface_socket_from_handle_get>
   1adb4:	4605      	mov	r5, r0
   1adb6:	2800      	cmp	r0, #0
   1adb8:	f43f af6b 	beq.w	1ac92 <rpc_ip_event_handler+0x8e>
   1adbc:	4601      	mov	r1, r0
   1adbe:	4633      	mov	r3, r6
   1adc0:	4622      	mov	r2, r4
   1adc2:	4638      	mov	r0, r7
   1adc4:	f000 fd56 	bl	1b874 <tls_rpc_ip_event_handler>
   1adc8:	2800      	cmp	r0, #0
   1adca:	f000 812f 	beq.w	1b02c <rpc_ip_event_handler+0x428>
   1adce:	f248 030c 	movw	r3, #32780	; 0x800c
   1add2:	429e      	cmp	r6, r3
   1add4:	d826      	bhi.n	1ae24 <rpc_ip_event_handler+0x220>
   1add6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1adda:	f67f af5a 	bls.w	1ac92 <rpc_ip_event_handler+0x8e>
   1adde:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1ade2:	3e01      	subs	r6, #1
   1ade4:	2e0b      	cmp	r6, #11
   1ade6:	f63f af54 	bhi.w	1ac92 <rpc_ip_event_handler+0x8e>
   1adea:	a301      	add	r3, pc, #4	; (adr r3, 1adf0 <rpc_ip_event_handler+0x1ec>)
   1adec:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1adf0:	0001aeb5 	.word	0x0001aeb5
   1adf4:	0001af69 	.word	0x0001af69
   1adf8:	0001b085 	.word	0x0001b085
   1adfc:	0001b0a3 	.word	0x0001b0a3
   1ae00:	0001af4d 	.word	0x0001af4d
   1ae04:	0001b035 	.word	0x0001b035
   1ae08:	0001b035 	.word	0x0001b035
   1ae0c:	0001afad 	.word	0x0001afad
   1ae10:	0001aecf 	.word	0x0001aecf
   1ae14:	0001ac93 	.word	0x0001ac93
   1ae18:	0001ac93 	.word	0x0001ac93
   1ae1c:	0001afd7 	.word	0x0001afd7
   1ae20:	0c07      	lsrs	r7, r0, #16
   1ae22:	e7c4      	b.n	1adae <rpc_ip_event_handler+0x1aa>
   1ae24:	f249 0302 	movw	r3, #36866	; 0x9002
   1ae28:	429e      	cmp	r6, r3
   1ae2a:	f000 80cc 	beq.w	1afc6 <rpc_ip_event_handler+0x3c2>
   1ae2e:	f249 0303 	movw	r3, #36867	; 0x9003
   1ae32:	429e      	cmp	r6, r3
   1ae34:	d05b      	beq.n	1aeee <rpc_ip_event_handler+0x2ea>
   1ae36:	f249 0301 	movw	r3, #36865	; 0x9001
   1ae3a:	429e      	cmp	r6, r3
   1ae3c:	f47f af29 	bne.w	1ac92 <rpc_ip_event_handler+0x8e>
   1ae40:	682e      	ldr	r6, [r5, #0]
   1ae42:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   1ae46:	f000 80ee 	beq.w	1b026 <rpc_ip_event_handler+0x422>
   1ae4a:	68a3      	ldr	r3, [r4, #8]
   1ae4c:	2b04      	cmp	r3, #4
   1ae4e:	f240 80e7 	bls.w	1b020 <rpc_ip_event_handler+0x41c>
   1ae52:	8a63      	ldrh	r3, [r4, #18]
   1ae54:	2b00      	cmp	r3, #0
   1ae56:	f000 80e4 	beq.w	1b022 <rpc_ip_event_handler+0x41e>
   1ae5a:	2b10      	cmp	r3, #16
   1ae5c:	f040 80cc 	bne.w	1aff8 <rpc_ip_event_handler+0x3f4>
   1ae60:	2024      	movs	r0, #36	; 0x24
   1ae62:	f7fa fe6f 	bl	15b44 <nrf_modem_os_alloc>
   1ae66:	b318      	cbz	r0, 1aeb0 <rpc_ip_event_handler+0x2ac>
   1ae68:	230a      	movs	r3, #10
   1ae6a:	6043      	str	r3, [r0, #4]
   1ae6c:	2324      	movs	r3, #36	; 0x24
   1ae6e:	7003      	strb	r3, [r0, #0]
   1ae70:	7c62      	ldrb	r2, [r4, #17]
   1ae72:	7c23      	ldrb	r3, [r4, #16]
   1ae74:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1ae78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ae7c:	8103      	strh	r3, [r0, #8]
   1ae7e:	f100 0210 	add.w	r2, r0, #16
   1ae82:	f104 0314 	add.w	r3, r4, #20
   1ae86:	f853 6b04 	ldr.w	r6, [r3], #4
   1ae8a:	428b      	cmp	r3, r1
   1ae8c:	f842 6b04 	str.w	r6, [r2], #4
   1ae90:	d1f9      	bne.n	1ae86 <rpc_ip_event_handler+0x282>
   1ae92:	2324      	movs	r3, #36	; 0x24
   1ae94:	6822      	ldr	r2, [r4, #0]
   1ae96:	9307      	str	r3, [sp, #28]
   1ae98:	9204      	str	r2, [sp, #16]
   1ae9a:	6862      	ldr	r2, [r4, #4]
   1ae9c:	a904      	add	r1, sp, #16
   1ae9e:	e9cd 2005 	strd	r2, r0, [sp, #20]
   1aea2:	69e8      	ldr	r0, [r5, #28]
   1aea4:	6803      	ldr	r3, [r0, #0]
   1aea6:	685b      	ldr	r3, [r3, #4]
   1aea8:	4798      	blx	r3
   1aeaa:	3001      	adds	r0, #1
   1aeac:	f040 808f 	bne.w	1afce <rpc_ip_event_handler+0x3ca>
   1aeb0:	2002      	movs	r0, #2
   1aeb2:	e0bc      	b.n	1b02e <rpc_ip_event_handler+0x42a>
   1aeb4:	682b      	ldr	r3, [r5, #0]
   1aeb6:	2b01      	cmp	r3, #1
   1aeb8:	f040 80b8 	bne.w	1b02c <rpc_ip_event_handler+0x428>
   1aebc:	6960      	ldr	r0, [r4, #20]
   1aebe:	2800      	cmp	r0, #0
   1aec0:	f040 80e9 	bne.w	1b096 <rpc_ip_event_handler+0x492>
   1aec4:	2302      	movs	r3, #2
   1aec6:	602b      	str	r3, [r5, #0]
   1aec8:	69a3      	ldr	r3, [r4, #24]
   1aeca:	61ab      	str	r3, [r5, #24]
   1aecc:	e0af      	b.n	1b02e <rpc_ip_event_handler+0x42a>
   1aece:	682b      	ldr	r3, [r5, #0]
   1aed0:	b29b      	uxth	r3, r3
   1aed2:	2b0d      	cmp	r3, #13
   1aed4:	f040 80aa 	bne.w	1b02c <rpc_ip_event_handler+0x428>
   1aed8:	6960      	ldr	r0, [r4, #20]
   1aeda:	2800      	cmp	r0, #0
   1aedc:	f040 80db 	bne.w	1b096 <rpc_ip_event_handler+0x492>
   1aee0:	682b      	ldr	r3, [r5, #0]
   1aee2:	0c1b      	lsrs	r3, r3, #16
   1aee4:	041b      	lsls	r3, r3, #16
   1aee6:	f043 030e 	orr.w	r3, r3, #14
   1aeea:	602b      	str	r3, [r5, #0]
   1aeec:	e09f      	b.n	1b02e <rpc_ip_event_handler+0x42a>
   1aeee:	682b      	ldr	r3, [r5, #0]
   1aef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1aef4:	602b      	str	r3, [r5, #0]
   1aef6:	682b      	ldr	r3, [r5, #0]
   1aef8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1aefc:	602b      	str	r3, [r5, #0]
   1aefe:	6923      	ldr	r3, [r4, #16]
   1af00:	2b6c      	cmp	r3, #108	; 0x6c
   1af02:	d107      	bne.n	1af14 <rpc_ip_event_handler+0x310>
   1af04:	682b      	ldr	r3, [r5, #0]
   1af06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1af0a:	602b      	str	r3, [r5, #0]
   1af0c:	2380      	movs	r3, #128	; 0x80
   1af0e:	606b      	str	r3, [r5, #4]
   1af10:	60ab      	str	r3, [r5, #8]
   1af12:	e08b      	b.n	1b02c <rpc_ip_event_handler+0x428>
   1af14:	2b6a      	cmp	r3, #106	; 0x6a
   1af16:	bf96      	itet	ls
   1af18:	4a08      	ldrls	r2, [pc, #32]	; (1af3c <rpc_ip_event_handler+0x338>)
   1af1a:	235f      	movhi	r3, #95	; 0x5f
   1af1c:	5cd3      	ldrbls	r3, [r2, r3]
   1af1e:	e7f6      	b.n	1af0e <rpc_ip_event_handler+0x30a>
   1af20:	2000d530 	.word	0x2000d530
   1af24:	2000d534 	.word	0x2000d534
   1af28:	2000d52c 	.word	0x2000d52c
   1af2c:	00025104 	.word	0x00025104
   1af30:	2000d524 	.word	0x2000d524
   1af34:	2000d520 	.word	0x2000d520
   1af38:	2000d646 	.word	0x2000d646
   1af3c:	00025109 	.word	0x00025109
   1af40:	2000d558 	.word	0x2000d558
   1af44:	2000f413 	.word	0x2000f413
   1af48:	2000f411 	.word	0x2000f411
   1af4c:	682b      	ldr	r3, [r5, #0]
   1af4e:	b29b      	uxth	r3, r3
   1af50:	2b03      	cmp	r3, #3
   1af52:	d16b      	bne.n	1b02c <rpc_ip_event_handler+0x428>
   1af54:	6960      	ldr	r0, [r4, #20]
   1af56:	2800      	cmp	r0, #0
   1af58:	f040 809d 	bne.w	1b096 <rpc_ip_event_handler+0x492>
   1af5c:	682b      	ldr	r3, [r5, #0]
   1af5e:	0c1b      	lsrs	r3, r3, #16
   1af60:	041b      	lsls	r3, r3, #16
   1af62:	f043 0304 	orr.w	r3, r3, #4
   1af66:	e7c0      	b.n	1aeea <rpc_ip_event_handler+0x2e6>
   1af68:	682b      	ldr	r3, [r5, #0]
   1af6a:	0099      	lsls	r1, r3, #2
   1af6c:	d55e      	bpl.n	1b02c <rpc_ip_event_handler+0x428>
   1af6e:	682b      	ldr	r3, [r5, #0]
   1af70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1af74:	602b      	str	r3, [r5, #0]
   1af76:	6960      	ldr	r0, [r4, #20]
   1af78:	b968      	cbnz	r0, 1af96 <rpc_ip_event_handler+0x392>
   1af7a:	682b      	ldr	r3, [r5, #0]
   1af7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1af80:	602b      	str	r3, [r5, #0]
   1af82:	682b      	ldr	r3, [r5, #0]
   1af84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1af88:	602b      	str	r3, [r5, #0]
   1af8a:	682b      	ldr	r3, [r5, #0]
   1af8c:	0c1b      	lsrs	r3, r3, #16
   1af8e:	041b      	lsls	r3, r3, #16
   1af90:	f043 0305 	orr.w	r3, r3, #5
   1af94:	e7a9      	b.n	1aeea <rpc_ip_event_handler+0x2e6>
   1af96:	286a      	cmp	r0, #106	; 0x6a
   1af98:	bf8e      	itee	hi
   1af9a:	235f      	movhi	r3, #95	; 0x5f
   1af9c:	4b4c      	ldrls	r3, [pc, #304]	; (1b0d0 <rpc_ip_event_handler+0x4cc>)
   1af9e:	5c1b      	ldrbls	r3, [r3, r0]
   1afa0:	606b      	str	r3, [r5, #4]
   1afa2:	682b      	ldr	r3, [r5, #0]
   1afa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1afa8:	602b      	str	r3, [r5, #0]
   1afaa:	e03f      	b.n	1b02c <rpc_ip_event_handler+0x428>
   1afac:	682b      	ldr	r3, [r5, #0]
   1afae:	b29b      	uxth	r3, r3
   1afb0:	2b06      	cmp	r3, #6
   1afb2:	d13b      	bne.n	1b02c <rpc_ip_event_handler+0x428>
   1afb4:	6960      	ldr	r0, [r4, #20]
   1afb6:	2800      	cmp	r0, #0
   1afb8:	d16d      	bne.n	1b096 <rpc_ip_event_handler+0x492>
   1afba:	682b      	ldr	r3, [r5, #0]
   1afbc:	0c1b      	lsrs	r3, r3, #16
   1afbe:	041b      	lsls	r3, r3, #16
   1afc0:	f043 0307 	orr.w	r3, r3, #7
   1afc4:	e791      	b.n	1aeea <rpc_ip_event_handler+0x2e6>
   1afc6:	682b      	ldr	r3, [r5, #0]
   1afc8:	b29b      	uxth	r3, r3
   1afca:	2b07      	cmp	r3, #7
   1afcc:	d12e      	bne.n	1b02c <rpc_ip_event_handler+0x428>
   1afce:	682b      	ldr	r3, [r5, #0]
   1afd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1afd4:	e7e8      	b.n	1afa8 <rpc_ip_event_handler+0x3a4>
   1afd6:	682b      	ldr	r3, [r5, #0]
   1afd8:	b29b      	uxth	r3, r3
   1afda:	2b08      	cmp	r3, #8
   1afdc:	d126      	bne.n	1b02c <rpc_ip_event_handler+0x428>
   1afde:	6963      	ldr	r3, [r4, #20]
   1afe0:	2b00      	cmp	r3, #0
   1afe2:	d16d      	bne.n	1b0c0 <rpc_ip_event_handler+0x4bc>
   1afe4:	4b3b      	ldr	r3, [pc, #236]	; (1b0d4 <rpc_ip_event_handler+0x4d0>)
   1afe6:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1afea:	682b      	ldr	r3, [r5, #0]
   1afec:	0c1b      	lsrs	r3, r3, #16
   1afee:	041b      	lsls	r3, r3, #16
   1aff0:	f043 0309 	orr.w	r3, r3, #9
   1aff4:	602b      	str	r3, [r5, #0]
   1aff6:	e032      	b.n	1b05e <rpc_ip_event_handler+0x45a>
   1aff8:	2b04      	cmp	r3, #4
   1affa:	d114      	bne.n	1b026 <rpc_ip_event_handler+0x422>
   1affc:	2010      	movs	r0, #16
   1affe:	f7fa fda1 	bl	15b44 <nrf_modem_os_alloc>
   1b002:	2800      	cmp	r0, #0
   1b004:	f43f af54 	beq.w	1aeb0 <rpc_ip_event_handler+0x2ac>
   1b008:	2302      	movs	r3, #2
   1b00a:	6043      	str	r3, [r0, #4]
   1b00c:	2310      	movs	r3, #16
   1b00e:	7003      	strb	r3, [r0, #0]
   1b010:	7c22      	ldrb	r2, [r4, #16]
   1b012:	7c61      	ldrb	r1, [r4, #17]
   1b014:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1b018:	8102      	strh	r2, [r0, #8]
   1b01a:	6962      	ldr	r2, [r4, #20]
   1b01c:	60c2      	str	r2, [r0, #12]
   1b01e:	e739      	b.n	1ae94 <rpc_ip_event_handler+0x290>
   1b020:	2300      	movs	r3, #0
   1b022:	4618      	mov	r0, r3
   1b024:	e736      	b.n	1ae94 <rpc_ip_event_handler+0x290>
   1b026:	6820      	ldr	r0, [r4, #0]
   1b028:	f005 ff4d 	bl	20ec6 <rpc_client_data_free>
   1b02c:	2000      	movs	r0, #0
   1b02e:	b009      	add	sp, #36	; 0x24
   1b030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b034:	4b27      	ldr	r3, [pc, #156]	; (1b0d4 <rpc_ip_event_handler+0x4d0>)
   1b036:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b03a:	6963      	ldr	r3, [r4, #20]
   1b03c:	b17b      	cbz	r3, 1b05e <rpc_ip_event_handler+0x45a>
   1b03e:	2b6b      	cmp	r3, #107	; 0x6b
   1b040:	d10f      	bne.n	1b062 <rpc_ip_event_handler+0x45e>
   1b042:	6928      	ldr	r0, [r5, #16]
   1b044:	220c      	movs	r2, #12
   1b046:	2801      	cmp	r0, #1
   1b048:	682b      	ldr	r3, [r5, #0]
   1b04a:	d104      	bne.n	1b056 <rpc_ip_event_handler+0x452>
   1b04c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1b050:	602b      	str	r3, [r5, #0]
   1b052:	606a      	str	r2, [r5, #4]
   1b054:	e7eb      	b.n	1b02e <rpc_ip_event_handler+0x42a>
   1b056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b05a:	602b      	str	r3, [r5, #0]
   1b05c:	606a      	str	r2, [r5, #4]
   1b05e:	2001      	movs	r0, #1
   1b060:	e7e5      	b.n	1b02e <rpc_ip_event_handler+0x42a>
   1b062:	f023 0002 	bic.w	r0, r3, #2
   1b066:	2801      	cmp	r0, #1
   1b068:	d102      	bne.n	1b070 <rpc_ip_event_handler+0x46c>
   1b06a:	230c      	movs	r3, #12
   1b06c:	606b      	str	r3, [r5, #4]
   1b06e:	e7de      	b.n	1b02e <rpc_ip_event_handler+0x42a>
   1b070:	2b6a      	cmp	r3, #106	; 0x6a
   1b072:	bf8e      	itee	hi
   1b074:	235f      	movhi	r3, #95	; 0x5f
   1b076:	4a16      	ldrls	r2, [pc, #88]	; (1b0d0 <rpc_ip_event_handler+0x4cc>)
   1b078:	5cd3      	ldrbls	r3, [r2, r3]
   1b07a:	606b      	str	r3, [r5, #4]
   1b07c:	682b      	ldr	r3, [r5, #0]
   1b07e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b082:	e7b7      	b.n	1aff4 <rpc_ip_event_handler+0x3f0>
   1b084:	682b      	ldr	r3, [r5, #0]
   1b086:	025a      	lsls	r2, r3, #9
   1b088:	d5d0      	bpl.n	1b02c <rpc_ip_event_handler+0x428>
   1b08a:	6960      	ldr	r0, [r4, #20]
   1b08c:	b918      	cbnz	r0, 1b096 <rpc_ip_event_handler+0x492>
   1b08e:	682b      	ldr	r3, [r5, #0]
   1b090:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b094:	e729      	b.n	1aeea <rpc_ip_event_handler+0x2e6>
   1b096:	286a      	cmp	r0, #106	; 0x6a
   1b098:	d817      	bhi.n	1b0ca <rpc_ip_event_handler+0x4c6>
   1b09a:	4b0d      	ldr	r3, [pc, #52]	; (1b0d0 <rpc_ip_event_handler+0x4cc>)
   1b09c:	5c1b      	ldrb	r3, [r3, r0]
   1b09e:	606b      	str	r3, [r5, #4]
   1b0a0:	e7c4      	b.n	1b02c <rpc_ip_event_handler+0x428>
   1b0a2:	682b      	ldr	r3, [r5, #0]
   1b0a4:	01db      	lsls	r3, r3, #7
   1b0a6:	d5c1      	bpl.n	1b02c <rpc_ip_event_handler+0x428>
   1b0a8:	6963      	ldr	r3, [r4, #20]
   1b0aa:	b94b      	cbnz	r3, 1b0c0 <rpc_ip_event_handler+0x4bc>
   1b0ac:	6820      	ldr	r0, [r4, #0]
   1b0ae:	b118      	cbz	r0, 1b0b8 <rpc_ip_event_handler+0x4b4>
   1b0b0:	2001      	movs	r0, #1
   1b0b2:	4b08      	ldr	r3, [pc, #32]	; (1b0d4 <rpc_ip_event_handler+0x4d0>)
   1b0b4:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b0b8:	682b      	ldr	r3, [r5, #0]
   1b0ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1b0be:	e714      	b.n	1aeea <rpc_ip_event_handler+0x2e6>
   1b0c0:	2b6a      	cmp	r3, #106	; 0x6a
   1b0c2:	d802      	bhi.n	1b0ca <rpc_ip_event_handler+0x4c6>
   1b0c4:	4a02      	ldr	r2, [pc, #8]	; (1b0d0 <rpc_ip_event_handler+0x4cc>)
   1b0c6:	5cd3      	ldrb	r3, [r2, r3]
   1b0c8:	e7e9      	b.n	1b09e <rpc_ip_event_handler+0x49a>
   1b0ca:	235f      	movs	r3, #95	; 0x5f
   1b0cc:	e7e7      	b.n	1b09e <rpc_ip_event_handler+0x49a>
   1b0ce:	bf00      	nop
   1b0d0:	00025109 	.word	0x00025109
   1b0d4:	2000d538 	.word	0x2000d538

0001b0d8 <secure_socket_dtls_timeout_check>:
   1b0d8:	281f      	cmp	r0, #31
   1b0da:	dc0b      	bgt.n	1b0f4 <secure_socket_dtls_timeout_check+0x1c>
   1b0dc:	2800      	cmp	r0, #0
   1b0de:	dd10      	ble.n	1b102 <secure_socket_dtls_timeout_check+0x2a>
   1b0e0:	2301      	movs	r3, #1
   1b0e2:	fa03 f000 	lsl.w	r0, r3, r0
   1b0e6:	4b09      	ldr	r3, [pc, #36]	; (1b10c <secure_socket_dtls_timeout_check+0x34>)
   1b0e8:	4003      	ands	r3, r0
   1b0ea:	2b00      	cmp	r3, #0
   1b0ec:	bf0c      	ite	eq
   1b0ee:	2016      	moveq	r0, #22
   1b0f0:	2000      	movne	r0, #0
   1b0f2:	4770      	bx	lr
   1b0f4:	283f      	cmp	r0, #63	; 0x3f
   1b0f6:	d006      	beq.n	1b106 <secure_socket_dtls_timeout_check+0x2e>
   1b0f8:	287b      	cmp	r0, #123	; 0x7b
   1b0fa:	bf14      	ite	ne
   1b0fc:	2016      	movne	r0, #22
   1b0fe:	2000      	moveq	r0, #0
   1b100:	4770      	bx	lr
   1b102:	2016      	movs	r0, #22
   1b104:	4770      	bx	lr
   1b106:	2000      	movs	r0, #0
   1b108:	4770      	bx	lr
   1b10a:	bf00      	nop
   1b10c:	8000808a 	.word	0x8000808a

0001b110 <hostname_free>:
   1b110:	b538      	push	{r3, r4, r5, lr}
   1b112:	4c07      	ldr	r4, [pc, #28]	; (1b130 <hostname_free+0x20>)
   1b114:	4605      	mov	r5, r0
   1b116:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   1b11a:	b138      	cbz	r0, 1b12c <hostname_free+0x1c>
   1b11c:	f7fa fd1a 	bl	15b54 <nrf_modem_os_free>
   1b120:	2300      	movs	r3, #0
   1b122:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   1b126:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b12a:	6063      	str	r3, [r4, #4]
   1b12c:	bd38      	pop	{r3, r4, r5, pc}
   1b12e:	bf00      	nop
   1b130:	2000d55c 	.word	0x2000d55c

0001b134 <secure_socket_attach_initiate>:
   1b134:	f04f 33ff 	mov.w	r3, #4294967295
   1b138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b13c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1b1d4 <secure_socket_attach_initiate+0xa0>
   1b140:	9301      	str	r3, [sp, #4]
   1b142:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   1b146:	460d      	mov	r5, r1
   1b148:	4616      	mov	r6, r2
   1b14a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b14e:	f247 0281 	movw	r2, #28801	; 0x7081
   1b152:	6989      	ldr	r1, [r1, #24]
   1b154:	4607      	mov	r7, r0
   1b156:	f005 ff48 	bl	20fea <ip_interface_request_create>
   1b15a:	4604      	mov	r4, r0
   1b15c:	b398      	cbz	r0, 1b1c6 <secure_socket_attach_initiate+0x92>
   1b15e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b162:	b122      	cbz	r2, 1b16e <secure_socket_attach_initiate+0x3a>
   1b164:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   1b168:	6800      	ldr	r0, [r0, #0]
   1b16a:	f007 fb07 	bl	2277c <memcpy>
   1b16e:	2324      	movs	r3, #36	; 0x24
   1b170:	4a17      	ldr	r2, [pc, #92]	; (1b1d0 <secure_socket_attach_initiate+0x9c>)
   1b172:	fb03 2307 	mla	r3, r3, r7, r2
   1b176:	f104 0214 	add.w	r2, r4, #20
   1b17a:	f103 0124 	add.w	r1, r3, #36	; 0x24
   1b17e:	f853 0b04 	ldr.w	r0, [r3], #4
   1b182:	428b      	cmp	r3, r1
   1b184:	f842 0b04 	str.w	r0, [r2], #4
   1b188:	d1f9      	bne.n	1b17e <secure_socket_attach_initiate+0x4a>
   1b18a:	68a3      	ldr	r3, [r4, #8]
   1b18c:	4622      	mov	r2, r4
   1b18e:	3324      	adds	r3, #36	; 0x24
   1b190:	60a3      	str	r3, [r4, #8]
   1b192:	682b      	ldr	r3, [r5, #0]
   1b194:	f247 0181 	movw	r1, #28801	; 0x7081
   1b198:	0c1b      	lsrs	r3, r3, #16
   1b19a:	041b      	lsls	r3, r3, #16
   1b19c:	f043 030a 	orr.w	r3, r3, #10
   1b1a0:	602b      	str	r3, [r5, #0]
   1b1a2:	2004      	movs	r0, #4
   1b1a4:	f005 fe85 	bl	20eb2 <rpc_client_request_send>
   1b1a8:	682b      	ldr	r3, [r5, #0]
   1b1aa:	00db      	lsls	r3, r3, #3
   1b1ac:	d40d      	bmi.n	1b1ca <secure_socket_attach_initiate+0x96>
   1b1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b1b2:	210b      	movs	r1, #11
   1b1b4:	4638      	mov	r0, r7
   1b1b6:	ab01      	add	r3, sp, #4
   1b1b8:	f005 ff2a 	bl	21010 <ip_interface_wait>
   1b1bc:	b100      	cbz	r0, 1b1c0 <secure_socket_attach_initiate+0x8c>
   1b1be:	602e      	str	r6, [r5, #0]
   1b1c0:	b003      	add	sp, #12
   1b1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b1c6:	200c      	movs	r0, #12
   1b1c8:	e7fa      	b.n	1b1c0 <secure_socket_attach_initiate+0x8c>
   1b1ca:	2077      	movs	r0, #119	; 0x77
   1b1cc:	e7f8      	b.n	1b1c0 <secure_socket_attach_initiate+0x8c>
   1b1ce:	bf00      	nop
   1b1d0:	2000f415 	.word	0x2000f415
   1b1d4:	2000d55c 	.word	0x2000d55c

0001b1d8 <tls_interface_init>:
   1b1d8:	2201      	movs	r2, #1
   1b1da:	4b02      	ldr	r3, [pc, #8]	; (1b1e4 <tls_interface_init+0xc>)
   1b1dc:	2000      	movs	r0, #0
   1b1de:	701a      	strb	r2, [r3, #0]
   1b1e0:	4770      	bx	lr
   1b1e2:	bf00      	nop
   1b1e4:	2000f414 	.word	0x2000f414

0001b1e8 <tls_interface_open>:
   1b1e8:	b538      	push	{r3, r4, r5, lr}
   1b1ea:	4b21      	ldr	r3, [pc, #132]	; (1b270 <tls_interface_open+0x88>)
   1b1ec:	4615      	mov	r5, r2
   1b1ee:	781b      	ldrb	r3, [r3, #0]
   1b1f0:	b92b      	cbnz	r3, 1b1fe <tls_interface_open+0x16>
   1b1f2:	2075      	movs	r0, #117	; 0x75
   1b1f4:	f005 f9d9 	bl	205aa <nrf_modem_os_errno_set>
   1b1f8:	f04f 34ff 	mov.w	r4, #4294967295
   1b1fc:	e031      	b.n	1b262 <tls_interface_open+0x7a>
   1b1fe:	1e4b      	subs	r3, r1, #1
   1b200:	2b01      	cmp	r3, #1
   1b202:	d809      	bhi.n	1b218 <tls_interface_open+0x30>
   1b204:	b952      	cbnz	r2, 1b21c <tls_interface_open+0x34>
   1b206:	2901      	cmp	r1, #1
   1b208:	bf0b      	itete	eq
   1b20a:	2201      	moveq	r2, #1
   1b20c:	2202      	movne	r2, #2
   1b20e:	f44f 7582 	moveq.w	r5, #260	; 0x104
   1b212:	f44f 7587 	movne.w	r5, #270	; 0x10e
   1b216:	e007      	b.n	1b228 <tls_interface_open+0x40>
   1b218:	206b      	movs	r0, #107	; 0x6b
   1b21a:	e7eb      	b.n	1b1f4 <tls_interface_open+0xc>
   1b21c:	2901      	cmp	r1, #1
   1b21e:	d122      	bne.n	1b266 <tls_interface_open+0x7e>
   1b220:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1b224:	d1f8      	bne.n	1b218 <tls_interface_open+0x30>
   1b226:	460a      	mov	r2, r1
   1b228:	f7fe ff40 	bl	1a0ac <ip_interface_open>
   1b22c:	1e04      	subs	r4, r0, #0
   1b22e:	dbe3      	blt.n	1b1f8 <tls_interface_open+0x10>
   1b230:	2224      	movs	r2, #36	; 0x24
   1b232:	4910      	ldr	r1, [pc, #64]	; (1b274 <tls_interface_open+0x8c>)
   1b234:	4b10      	ldr	r3, [pc, #64]	; (1b278 <tls_interface_open+0x90>)
   1b236:	fb02 1204 	mla	r2, r2, r4, r1
   1b23a:	f103 0124 	add.w	r1, r3, #36	; 0x24
   1b23e:	f853 0b04 	ldr.w	r0, [r3], #4
   1b242:	428b      	cmp	r3, r1
   1b244:	f842 0b04 	str.w	r0, [r2], #4
   1b248:	d1f9      	bne.n	1b23e <tls_interface_open+0x56>
   1b24a:	4620      	mov	r0, r4
   1b24c:	f7fe fe28 	bl	19ea0 <interface_socket_from_handle_get>
   1b250:	6803      	ldr	r3, [r0, #0]
   1b252:	6145      	str	r5, [r0, #20]
   1b254:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b258:	6003      	str	r3, [r0, #0]
   1b25a:	6803      	ldr	r3, [r0, #0]
   1b25c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b260:	6003      	str	r3, [r0, #0]
   1b262:	4620      	mov	r0, r4
   1b264:	bd38      	pop	{r3, r4, r5, pc}
   1b266:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1b26a:	d1d5      	bne.n	1b218 <tls_interface_open+0x30>
   1b26c:	2202      	movs	r2, #2
   1b26e:	e7db      	b.n	1b228 <tls_interface_open+0x40>
   1b270:	2000f414 	.word	0x2000f414
   1b274:	2000f415 	.word	0x2000f415
   1b278:	00025174 	.word	0x00025174

0001b27c <tls_interface_sendto>:
   1b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b280:	b085      	sub	sp, #20
   1b282:	4606      	mov	r6, r0
   1b284:	4691      	mov	r9, r2
   1b286:	461f      	mov	r7, r3
   1b288:	9103      	str	r1, [sp, #12]
   1b28a:	f7fe fe09 	bl	19ea0 <interface_socket_from_handle_get>
   1b28e:	4605      	mov	r5, r0
   1b290:	2800      	cmp	r0, #0
   1b292:	d06c      	beq.n	1b36e <tls_interface_sendto+0xf2>
   1b294:	f04f 0a24 	mov.w	sl, #36	; 0x24
   1b298:	07bb      	lsls	r3, r7, #30
   1b29a:	bf48      	it	mi
   1b29c:	2300      	movmi	r3, #0
   1b29e:	f04f 0400 	mov.w	r4, #0
   1b2a2:	f04f 3bff 	mov.w	fp, #4294967295
   1b2a6:	bf58      	it	pl
   1b2a8:	6803      	ldrpl	r3, [r0, #0]
   1b2aa:	fb0a fa06 	mul.w	sl, sl, r6
   1b2ae:	bf5c      	itt	pl
   1b2b0:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   1b2b4:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   1b2b8:	9302      	str	r3, [sp, #8]
   1b2ba:	6829      	ldr	r1, [r5, #0]
   1b2bc:	eba9 0804 	sub.w	r8, r9, r4
   1b2c0:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   1b2c4:	b289      	uxth	r1, r1
   1b2c6:	bfa8      	it	ge
   1b2c8:	f44f 6800 	movge.w	r8, #2048	; 0x800
   1b2cc:	290c      	cmp	r1, #12
   1b2ce:	d110      	bne.n	1b2f2 <tls_interface_sendto+0x76>
   1b2d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b2d2:	9903      	ldr	r1, [sp, #12]
   1b2d4:	9301      	str	r3, [sp, #4]
   1b2d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b2d8:	4642      	mov	r2, r8
   1b2da:	9300      	str	r3, [sp, #0]
   1b2dc:	4630      	mov	r0, r6
   1b2de:	463b      	mov	r3, r7
   1b2e0:	4421      	add	r1, r4
   1b2e2:	f7fe ffa5 	bl	1a230 <ip_interface_sendto>
   1b2e6:	f1b0 0b00 	subs.w	fp, r0, #0
   1b2ea:	da32      	bge.n	1b352 <tls_interface_sendto+0xd6>
   1b2ec:	f04f 34ff 	mov.w	r4, #4294967295
   1b2f0:	e034      	b.n	1b35c <tls_interface_sendto+0xe0>
   1b2f2:	6828      	ldr	r0, [r5, #0]
   1b2f4:	b280      	uxth	r0, r0
   1b2f6:	280b      	cmp	r0, #11
   1b2f8:	d109      	bne.n	1b30e <tls_interface_sendto+0x92>
   1b2fa:	4b21      	ldr	r3, [pc, #132]	; (1b380 <tls_interface_sendto+0x104>)
   1b2fc:	f813 200a 	ldrb.w	r2, [r3, sl]
   1b300:	2a02      	cmp	r2, #2
   1b302:	d031      	beq.n	1b368 <tls_interface_sendto+0xec>
   1b304:	692a      	ldr	r2, [r5, #16]
   1b306:	2a01      	cmp	r2, #1
   1b308:	d133      	bne.n	1b372 <tls_interface_sendto+0xf6>
   1b30a:	206d      	movs	r0, #109	; 0x6d
   1b30c:	e02c      	b.n	1b368 <tls_interface_sendto+0xec>
   1b30e:	4628      	mov	r0, r5
   1b310:	f006 f8e7 	bl	214e2 <attach_trigger_condition_verify>
   1b314:	b388      	cbz	r0, 1b37a <tls_interface_sendto+0xfe>
   1b316:	4b1a      	ldr	r3, [pc, #104]	; (1b380 <tls_interface_sendto+0x104>)
   1b318:	f813 100a 	ldrb.w	r1, [r3, sl]
   1b31c:	2902      	cmp	r1, #2
   1b31e:	d110      	bne.n	1b342 <tls_interface_sendto+0xc6>
   1b320:	4629      	mov	r1, r5
   1b322:	4630      	mov	r0, r6
   1b324:	f006 f8f4 	bl	21510 <secure_client_socket>
   1b328:	b970      	cbnz	r0, 1b348 <tls_interface_sendto+0xcc>
   1b32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b32c:	9903      	ldr	r1, [sp, #12]
   1b32e:	9301      	str	r3, [sp, #4]
   1b330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b332:	4642      	mov	r2, r8
   1b334:	9300      	str	r3, [sp, #0]
   1b336:	4630      	mov	r0, r6
   1b338:	463b      	mov	r3, r7
   1b33a:	4421      	add	r1, r4
   1b33c:	f7fe ff78 	bl	1a230 <ip_interface_sendto>
   1b340:	4683      	mov	fp, r0
   1b342:	f1bb 0f00 	cmp.w	fp, #0
   1b346:	e7d0      	b.n	1b2ea <tls_interface_sendto+0x6e>
   1b348:	f1bb 3fff 	cmp.w	fp, #4294967295
   1b34c:	d00a      	beq.n	1b364 <tls_interface_sendto+0xe8>
   1b34e:	2800      	cmp	r0, #0
   1b350:	dc0a      	bgt.n	1b368 <tls_interface_sendto+0xec>
   1b352:	9b02      	ldr	r3, [sp, #8]
   1b354:	445c      	add	r4, fp
   1b356:	b10b      	cbz	r3, 1b35c <tls_interface_sendto+0xe0>
   1b358:	45a1      	cmp	r9, r4
   1b35a:	dcae      	bgt.n	1b2ba <tls_interface_sendto+0x3e>
   1b35c:	4620      	mov	r0, r4
   1b35e:	b005      	add	sp, #20
   1b360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b364:	2800      	cmp	r0, #0
   1b366:	ddc1      	ble.n	1b2ec <tls_interface_sendto+0x70>
   1b368:	f005 f91f 	bl	205aa <nrf_modem_os_errno_set>
   1b36c:	e7be      	b.n	1b2ec <tls_interface_sendto+0x70>
   1b36e:	2009      	movs	r0, #9
   1b370:	e7fa      	b.n	1b368 <tls_interface_sendto+0xec>
   1b372:	f1bb 3fff 	cmp.w	fp, #4294967295
   1b376:	d1ec      	bne.n	1b352 <tls_interface_sendto+0xd6>
   1b378:	e7b8      	b.n	1b2ec <tls_interface_sendto+0x70>
   1b37a:	2080      	movs	r0, #128	; 0x80
   1b37c:	e7f4      	b.n	1b368 <tls_interface_sendto+0xec>
   1b37e:	bf00      	nop
   1b380:	2000f415 	.word	0x2000f415

0001b384 <tls_interface_recvfrom>:
   1b384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b388:	460d      	mov	r5, r1
   1b38a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b38e:	4604      	mov	r4, r0
   1b390:	4616      	mov	r6, r2
   1b392:	461f      	mov	r7, r3
   1b394:	f7fe fd84 	bl	19ea0 <interface_socket_from_handle_get>
   1b398:	4601      	mov	r1, r0
   1b39a:	b320      	cbz	r0, 1b3e6 <tls_interface_recvfrom+0x62>
   1b39c:	6803      	ldr	r3, [r0, #0]
   1b39e:	b29b      	uxth	r3, r3
   1b3a0:	2b0c      	cmp	r3, #12
   1b3a2:	d003      	beq.n	1b3ac <tls_interface_recvfrom+0x28>
   1b3a4:	6803      	ldr	r3, [r0, #0]
   1b3a6:	b29b      	uxth	r3, r3
   1b3a8:	2b0d      	cmp	r3, #13
   1b3aa:	d109      	bne.n	1b3c0 <tls_interface_recvfrom+0x3c>
   1b3ac:	463b      	mov	r3, r7
   1b3ae:	4632      	mov	r2, r6
   1b3b0:	4629      	mov	r1, r5
   1b3b2:	4620      	mov	r0, r4
   1b3b4:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1b3b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b3bc:	f005 be38 	b.w	21030 <ip_interface_recvfrom>
   1b3c0:	f006 f88f 	bl	214e2 <attach_trigger_condition_verify>
   1b3c4:	b198      	cbz	r0, 1b3ee <tls_interface_recvfrom+0x6a>
   1b3c6:	2324      	movs	r3, #36	; 0x24
   1b3c8:	4363      	muls	r3, r4
   1b3ca:	4a0a      	ldr	r2, [pc, #40]	; (1b3f4 <tls_interface_recvfrom+0x70>)
   1b3cc:	5cd3      	ldrb	r3, [r2, r3]
   1b3ce:	2b02      	cmp	r3, #2
   1b3d0:	d10d      	bne.n	1b3ee <tls_interface_recvfrom+0x6a>
   1b3d2:	4620      	mov	r0, r4
   1b3d4:	f006 f89c 	bl	21510 <secure_client_socket>
   1b3d8:	2800      	cmp	r0, #0
   1b3da:	d0e7      	beq.n	1b3ac <tls_interface_recvfrom+0x28>
   1b3dc:	dc04      	bgt.n	1b3e8 <tls_interface_recvfrom+0x64>
   1b3de:	f04f 30ff 	mov.w	r0, #4294967295
   1b3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b3e6:	2009      	movs	r0, #9
   1b3e8:	f005 f8df 	bl	205aa <nrf_modem_os_errno_set>
   1b3ec:	e7f7      	b.n	1b3de <tls_interface_recvfrom+0x5a>
   1b3ee:	200b      	movs	r0, #11
   1b3f0:	e7fa      	b.n	1b3e8 <tls_interface_recvfrom+0x64>
   1b3f2:	bf00      	nop
   1b3f4:	2000f415 	.word	0x2000f415

0001b3f8 <tls_interface_bind>:
   1b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3fa:	4604      	mov	r4, r0
   1b3fc:	460e      	mov	r6, r1
   1b3fe:	4617      	mov	r7, r2
   1b400:	f7fe fd4e 	bl	19ea0 <interface_socket_from_handle_get>
   1b404:	4605      	mov	r5, r0
   1b406:	b1d8      	cbz	r0, 1b440 <tls_interface_bind+0x48>
   1b408:	6803      	ldr	r3, [r0, #0]
   1b40a:	b29b      	uxth	r3, r3
   1b40c:	2b02      	cmp	r3, #2
   1b40e:	d119      	bne.n	1b444 <tls_interface_bind+0x4c>
   1b410:	463a      	mov	r2, r7
   1b412:	4631      	mov	r1, r6
   1b414:	4620      	mov	r0, r4
   1b416:	f7ff f89f 	bl	1a558 <ip_interface_bind>
   1b41a:	b950      	cbnz	r0, 1b432 <tls_interface_bind+0x3a>
   1b41c:	2324      	movs	r3, #36	; 0x24
   1b41e:	4363      	muls	r3, r4
   1b420:	4a09      	ldr	r2, [pc, #36]	; (1b448 <tls_interface_bind+0x50>)
   1b422:	5cd3      	ldrb	r3, [r2, r3]
   1b424:	2b01      	cmp	r3, #1
   1b426:	d10a      	bne.n	1b43e <tls_interface_bind+0x46>
   1b428:	2204      	movs	r2, #4
   1b42a:	4629      	mov	r1, r5
   1b42c:	4620      	mov	r0, r4
   1b42e:	f7ff fe81 	bl	1b134 <secure_socket_attach_initiate>
   1b432:	2800      	cmp	r0, #0
   1b434:	dd03      	ble.n	1b43e <tls_interface_bind+0x46>
   1b436:	f005 f8b8 	bl	205aa <nrf_modem_os_errno_set>
   1b43a:	f04f 30ff 	mov.w	r0, #4294967295
   1b43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b440:	2009      	movs	r0, #9
   1b442:	e7f8      	b.n	1b436 <tls_interface_bind+0x3e>
   1b444:	205f      	movs	r0, #95	; 0x5f
   1b446:	e7f6      	b.n	1b436 <tls_interface_bind+0x3e>
   1b448:	2000f415 	.word	0x2000f415

0001b44c <tls_interface_connect>:
   1b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b44e:	4605      	mov	r5, r0
   1b450:	460e      	mov	r6, r1
   1b452:	4617      	mov	r7, r2
   1b454:	f7fe fd24 	bl	19ea0 <interface_socket_from_handle_get>
   1b458:	4604      	mov	r4, r0
   1b45a:	b1f0      	cbz	r0, 1b49a <tls_interface_connect+0x4e>
   1b45c:	2324      	movs	r3, #36	; 0x24
   1b45e:	436b      	muls	r3, r5
   1b460:	4a10      	ldr	r2, [pc, #64]	; (1b4a4 <tls_interface_connect+0x58>)
   1b462:	5cd3      	ldrb	r3, [r2, r3]
   1b464:	2b02      	cmp	r3, #2
   1b466:	d11a      	bne.n	1b49e <tls_interface_connect+0x52>
   1b468:	6803      	ldr	r3, [r0, #0]
   1b46a:	b29b      	uxth	r3, r3
   1b46c:	2b02      	cmp	r3, #2
   1b46e:	d003      	beq.n	1b478 <tls_interface_connect+0x2c>
   1b470:	6803      	ldr	r3, [r0, #0]
   1b472:	b29b      	uxth	r3, r3
   1b474:	2b04      	cmp	r3, #4
   1b476:	d112      	bne.n	1b49e <tls_interface_connect+0x52>
   1b478:	463a      	mov	r2, r7
   1b47a:	4631      	mov	r1, r6
   1b47c:	4628      	mov	r0, r5
   1b47e:	f005 fed9 	bl	21234 <ip_interface_connect>
   1b482:	b918      	cbnz	r0, 1b48c <tls_interface_connect+0x40>
   1b484:	4621      	mov	r1, r4
   1b486:	4628      	mov	r0, r5
   1b488:	f006 f842 	bl	21510 <secure_client_socket>
   1b48c:	2800      	cmp	r0, #0
   1b48e:	dd03      	ble.n	1b498 <tls_interface_connect+0x4c>
   1b490:	f005 f88b 	bl	205aa <nrf_modem_os_errno_set>
   1b494:	f04f 30ff 	mov.w	r0, #4294967295
   1b498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b49a:	2009      	movs	r0, #9
   1b49c:	e7f8      	b.n	1b490 <tls_interface_connect+0x44>
   1b49e:	205f      	movs	r0, #95	; 0x5f
   1b4a0:	e7f6      	b.n	1b490 <tls_interface_connect+0x44>
   1b4a2:	bf00      	nop
   1b4a4:	2000f415 	.word	0x2000f415

0001b4a8 <tls_interface_listen>:
   1b4a8:	b538      	push	{r3, r4, r5, lr}
   1b4aa:	460d      	mov	r5, r1
   1b4ac:	4604      	mov	r4, r0
   1b4ae:	f7fe fcf7 	bl	19ea0 <interface_socket_from_handle_get>
   1b4b2:	4601      	mov	r1, r0
   1b4b4:	2800      	cmp	r0, #0
   1b4b6:	d033      	beq.n	1b520 <tls_interface_listen+0x78>
   1b4b8:	6803      	ldr	r3, [r0, #0]
   1b4ba:	00db      	lsls	r3, r3, #3
   1b4bc:	d432      	bmi.n	1b524 <tls_interface_listen+0x7c>
   1b4be:	6903      	ldr	r3, [r0, #16]
   1b4c0:	2b01      	cmp	r3, #1
   1b4c2:	d12f      	bne.n	1b524 <tls_interface_listen+0x7c>
   1b4c4:	6803      	ldr	r3, [r0, #0]
   1b4c6:	b29b      	uxth	r3, r3
   1b4c8:	2b04      	cmp	r3, #4
   1b4ca:	d105      	bne.n	1b4d8 <tls_interface_listen+0x30>
   1b4cc:	2324      	movs	r3, #36	; 0x24
   1b4ce:	4363      	muls	r3, r4
   1b4d0:	4a15      	ldr	r2, [pc, #84]	; (1b528 <tls_interface_listen+0x80>)
   1b4d2:	5cd3      	ldrb	r3, [r2, r3]
   1b4d4:	2b02      	cmp	r3, #2
   1b4d6:	d009      	beq.n	1b4ec <tls_interface_listen+0x44>
   1b4d8:	680b      	ldr	r3, [r1, #0]
   1b4da:	b29b      	uxth	r3, r3
   1b4dc:	2b0b      	cmp	r3, #11
   1b4de:	d121      	bne.n	1b524 <tls_interface_listen+0x7c>
   1b4e0:	2324      	movs	r3, #36	; 0x24
   1b4e2:	4363      	muls	r3, r4
   1b4e4:	4a10      	ldr	r2, [pc, #64]	; (1b528 <tls_interface_listen+0x80>)
   1b4e6:	5cd3      	ldrb	r3, [r2, r3]
   1b4e8:	2b01      	cmp	r3, #1
   1b4ea:	d11b      	bne.n	1b524 <tls_interface_listen+0x7c>
   1b4ec:	2324      	movs	r3, #36	; 0x24
   1b4ee:	2001      	movs	r0, #1
   1b4f0:	4363      	muls	r3, r4
   1b4f2:	4a0d      	ldr	r2, [pc, #52]	; (1b528 <tls_interface_listen+0x80>)
   1b4f4:	54d0      	strb	r0, [r2, r3]
   1b4f6:	680b      	ldr	r3, [r1, #0]
   1b4f8:	2b0b      	cmp	r3, #11
   1b4fa:	d10a      	bne.n	1b512 <tls_interface_listen+0x6a>
   1b4fc:	4629      	mov	r1, r5
   1b4fe:	4620      	mov	r0, r4
   1b500:	f7ff f88a 	bl	1a618 <ip_interface_listen>
   1b504:	2800      	cmp	r0, #0
   1b506:	dd03      	ble.n	1b510 <tls_interface_listen+0x68>
   1b508:	f005 f84f 	bl	205aa <nrf_modem_os_errno_set>
   1b50c:	f04f 30ff 	mov.w	r0, #4294967295
   1b510:	bd38      	pop	{r3, r4, r5, pc}
   1b512:	4620      	mov	r0, r4
   1b514:	680a      	ldr	r2, [r1, #0]
   1b516:	f7ff fe0d 	bl	1b134 <secure_socket_attach_initiate>
   1b51a:	2800      	cmp	r0, #0
   1b51c:	d0ee      	beq.n	1b4fc <tls_interface_listen+0x54>
   1b51e:	e7f1      	b.n	1b504 <tls_interface_listen+0x5c>
   1b520:	2009      	movs	r0, #9
   1b522:	e7f1      	b.n	1b508 <tls_interface_listen+0x60>
   1b524:	205f      	movs	r0, #95	; 0x5f
   1b526:	e7ef      	b.n	1b508 <tls_interface_listen+0x60>
   1b528:	2000f415 	.word	0x2000f415

0001b52c <tls_interface_accept>:
   1b52c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b530:	4605      	mov	r5, r0
   1b532:	460e      	mov	r6, r1
   1b534:	4617      	mov	r7, r2
   1b536:	4698      	mov	r8, r3
   1b538:	f04f 34ff 	mov.w	r4, #4294967295
   1b53c:	f7fe fcb0 	bl	19ea0 <interface_socket_from_handle_get>
   1b540:	9401      	str	r4, [sp, #4]
   1b542:	2800      	cmp	r0, #0
   1b544:	d04b      	beq.n	1b5de <tls_interface_accept+0xb2>
   1b546:	6803      	ldr	r3, [r0, #0]
   1b548:	b29b      	uxth	r3, r3
   1b54a:	2b07      	cmp	r3, #7
   1b54c:	d147      	bne.n	1b5de <tls_interface_accept+0xb2>
   1b54e:	6803      	ldr	r3, [r0, #0]
   1b550:	00db      	lsls	r3, r3, #3
   1b552:	d506      	bpl.n	1b562 <tls_interface_accept+0x36>
   1b554:	205f      	movs	r0, #95	; 0x5f
   1b556:	f005 f828 	bl	205aa <nrf_modem_os_errno_set>
   1b55a:	4620      	mov	r0, r4
   1b55c:	b002      	add	sp, #8
   1b55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b562:	4643      	mov	r3, r8
   1b564:	463a      	mov	r2, r7
   1b566:	4631      	mov	r1, r6
   1b568:	4628      	mov	r0, r5
   1b56a:	f7ff f8a3 	bl	1a6b4 <ip_interface_accept>
   1b56e:	1e04      	subs	r4, r0, #0
   1b570:	db2f      	blt.n	1b5d2 <tls_interface_accept+0xa6>
   1b572:	f7fe fc95 	bl	19ea0 <interface_socket_from_handle_get>
   1b576:	2124      	movs	r1, #36	; 0x24
   1b578:	6803      	ldr	r3, [r0, #0]
   1b57a:	4a1a      	ldr	r2, [pc, #104]	; (1b5e4 <tls_interface_accept+0xb8>)
   1b57c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b580:	6003      	str	r3, [r0, #0]
   1b582:	6803      	ldr	r3, [r0, #0]
   1b584:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b588:	6003      	str	r3, [r0, #0]
   1b58a:	fb01 2305 	mla	r3, r1, r5, r2
   1b58e:	fb01 2104 	mla	r1, r1, r4, r2
   1b592:	f103 0524 	add.w	r5, r3, #36	; 0x24
   1b596:	f853 6b04 	ldr.w	r6, [r3], #4
   1b59a:	42ab      	cmp	r3, r5
   1b59c:	f841 6b04 	str.w	r6, [r1], #4
   1b5a0:	d1f9      	bne.n	1b596 <tls_interface_accept+0x6a>
   1b5a2:	2324      	movs	r3, #36	; 0x24
   1b5a4:	2102      	movs	r1, #2
   1b5a6:	4363      	muls	r3, r4
   1b5a8:	54d1      	strb	r1, [r2, r3]
   1b5aa:	6803      	ldr	r3, [r0, #0]
   1b5ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b5b0:	0c1b      	lsrs	r3, r3, #16
   1b5b2:	041b      	lsls	r3, r3, #16
   1b5b4:	f043 030b 	orr.w	r3, r3, #11
   1b5b8:	6003      	str	r3, [r0, #0]
   1b5ba:	210c      	movs	r1, #12
   1b5bc:	4620      	mov	r0, r4
   1b5be:	ab01      	add	r3, sp, #4
   1b5c0:	f005 fd26 	bl	21010 <ip_interface_wait>
   1b5c4:	4605      	mov	r5, r0
   1b5c6:	2800      	cmp	r0, #0
   1b5c8:	d0c7      	beq.n	1b55a <tls_interface_accept+0x2e>
   1b5ca:	4620      	mov	r0, r4
   1b5cc:	f7fe fdea 	bl	1a1a4 <ip_interface_close>
   1b5d0:	462c      	mov	r4, r5
   1b5d2:	4620      	mov	r0, r4
   1b5d4:	f004 ffe9 	bl	205aa <nrf_modem_os_errno_set>
   1b5d8:	f04f 34ff 	mov.w	r4, #4294967295
   1b5dc:	e7bd      	b.n	1b55a <tls_interface_accept+0x2e>
   1b5de:	2409      	movs	r4, #9
   1b5e0:	e7f7      	b.n	1b5d2 <tls_interface_accept+0xa6>
   1b5e2:	bf00      	nop
   1b5e4:	2000f415 	.word	0x2000f415

0001b5e8 <tls_interface_setopt>:
   1b5e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b5ea:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b5ee:	4606      	mov	r6, r0
   1b5f0:	4615      	mov	r5, r2
   1b5f2:	461f      	mov	r7, r3
   1b5f4:	9c08      	ldr	r4, [sp, #32]
   1b5f6:	d004      	beq.n	1b602 <tls_interface_setopt+0x1a>
   1b5f8:	b003      	add	sp, #12
   1b5fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b5fe:	f7ff b93d 	b.w	1a87c <ip_interface_setopt>
   1b602:	b923      	cbnz	r3, 1b60e <tls_interface_setopt+0x26>
   1b604:	2a05      	cmp	r2, #5
   1b606:	d100      	bne.n	1b60a <tls_interface_setopt+0x22>
   1b608:	b10c      	cbz	r4, 1b60e <tls_interface_setopt+0x26>
   1b60a:	200e      	movs	r0, #14
   1b60c:	e077      	b.n	1b6fe <tls_interface_setopt+0x116>
   1b60e:	4630      	mov	r0, r6
   1b610:	f7fe fc46 	bl	19ea0 <interface_socket_from_handle_get>
   1b614:	4601      	mov	r1, r0
   1b616:	2800      	cmp	r0, #0
   1b618:	f000 8087 	beq.w	1b72a <tls_interface_setopt+0x142>
   1b61c:	6803      	ldr	r3, [r0, #0]
   1b61e:	b29b      	uxth	r3, r3
   1b620:	2b02      	cmp	r3, #2
   1b622:	d007      	beq.n	1b634 <tls_interface_setopt+0x4c>
   1b624:	6803      	ldr	r3, [r0, #0]
   1b626:	b29b      	uxth	r3, r3
   1b628:	2b04      	cmp	r3, #4
   1b62a:	d003      	beq.n	1b634 <tls_interface_setopt+0x4c>
   1b62c:	6803      	ldr	r3, [r0, #0]
   1b62e:	b29b      	uxth	r3, r3
   1b630:	2b05      	cmp	r3, #5
   1b632:	d17a      	bne.n	1b72a <tls_interface_setopt+0x142>
   1b634:	3d01      	subs	r5, #1
   1b636:	2d08      	cmp	r5, #8
   1b638:	d879      	bhi.n	1b72e <tls_interface_setopt+0x146>
   1b63a:	e8df f005 	tbb	[pc, r5]
   1b63e:	2605      	.short	0x2605
   1b640:	55433818 	.word	0x55433818
   1b644:	6578      	.short	0x6578
   1b646:	71          	.byte	0x71
   1b647:	00          	.byte	0x00
   1b648:	2c04      	cmp	r4, #4
   1b64a:	d174      	bne.n	1b736 <tls_interface_setopt+0x14e>
   1b64c:	6838      	ldr	r0, [r7, #0]
   1b64e:	b930      	cbnz	r0, 1b65e <tls_interface_setopt+0x76>
   1b650:	2324      	movs	r3, #36	; 0x24
   1b652:	2202      	movs	r2, #2
   1b654:	435e      	muls	r6, r3
   1b656:	4b39      	ldr	r3, [pc, #228]	; (1b73c <tls_interface_setopt+0x154>)
   1b658:	559a      	strb	r2, [r3, r6]
   1b65a:	b003      	add	sp, #12
   1b65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b65e:	2801      	cmp	r0, #1
   1b660:	d169      	bne.n	1b736 <tls_interface_setopt+0x14e>
   1b662:	2324      	movs	r3, #36	; 0x24
   1b664:	435e      	muls	r6, r3
   1b666:	4b35      	ldr	r3, [pc, #212]	; (1b73c <tls_interface_setopt+0x154>)
   1b668:	5598      	strb	r0, [r3, r6]
   1b66a:	2000      	movs	r0, #0
   1b66c:	e7f5      	b.n	1b65a <tls_interface_setopt+0x72>
   1b66e:	2c01      	cmp	r4, #1
   1b670:	d161      	bne.n	1b736 <tls_interface_setopt+0x14e>
   1b672:	2f00      	cmp	r7, #0
   1b674:	d0c9      	beq.n	1b60a <tls_interface_setopt+0x22>
   1b676:	2024      	movs	r0, #36	; 0x24
   1b678:	783b      	ldrb	r3, [r7, #0]
   1b67a:	4a30      	ldr	r2, [pc, #192]	; (1b73c <tls_interface_setopt+0x154>)
   1b67c:	3b00      	subs	r3, #0
   1b67e:	bf18      	it	ne
   1b680:	2301      	movne	r3, #1
   1b682:	fb00 2606 	mla	r6, r0, r6, r2
   1b686:	7073      	strb	r3, [r6, #1]
   1b688:	e7ef      	b.n	1b66a <tls_interface_setopt+0x82>
   1b68a:	2c03      	cmp	r4, #3
   1b68c:	d953      	bls.n	1b736 <tls_interface_setopt+0x14e>
   1b68e:	f014 0503 	ands.w	r5, r4, #3
   1b692:	d150      	bne.n	1b736 <tls_interface_setopt+0x14e>
   1b694:	2324      	movs	r3, #36	; 0x24
   1b696:	435e      	muls	r6, r3
   1b698:	4828      	ldr	r0, [pc, #160]	; (1b73c <tls_interface_setopt+0x154>)
   1b69a:	08a2      	lsrs	r2, r4, #2
   1b69c:	1983      	adds	r3, r0, r6
   1b69e:	70da      	strb	r2, [r3, #3]
   1b6a0:	4639      	mov	r1, r7
   1b6a2:	4622      	mov	r2, r4
   1b6a4:	3604      	adds	r6, #4
   1b6a6:	4430      	add	r0, r6
   1b6a8:	f007 f868 	bl	2277c <memcpy>
   1b6ac:	e7dd      	b.n	1b66a <tls_interface_setopt+0x82>
   1b6ae:	2c04      	cmp	r4, #4
   1b6b0:	d141      	bne.n	1b736 <tls_interface_setopt+0x14e>
   1b6b2:	683b      	ldr	r3, [r7, #0]
   1b6b4:	2b02      	cmp	r3, #2
   1b6b6:	d83e      	bhi.n	1b736 <tls_interface_setopt+0x14e>
   1b6b8:	2024      	movs	r0, #36	; 0x24
   1b6ba:	4a20      	ldr	r2, [pc, #128]	; (1b73c <tls_interface_setopt+0x154>)
   1b6bc:	fb00 2606 	mla	r6, r0, r6, r2
   1b6c0:	70b3      	strb	r3, [r6, #2]
   1b6c2:	e7d2      	b.n	1b66a <tls_interface_setopt+0x82>
   1b6c4:	4630      	mov	r0, r6
   1b6c6:	f7ff fd23 	bl	1b110 <hostname_free>
   1b6ca:	2c00      	cmp	r4, #0
   1b6cc:	d0cd      	beq.n	1b66a <tls_interface_setopt+0x82>
   1b6ce:	4620      	mov	r0, r4
   1b6d0:	f7fa fa38 	bl	15b44 <nrf_modem_os_alloc>
   1b6d4:	4b1a      	ldr	r3, [pc, #104]	; (1b740 <tls_interface_setopt+0x158>)
   1b6d6:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   1b6da:	b350      	cbz	r0, 1b732 <tls_interface_setopt+0x14a>
   1b6dc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1b6e0:	4622      	mov	r2, r4
   1b6e2:	4639      	mov	r1, r7
   1b6e4:	6074      	str	r4, [r6, #4]
   1b6e6:	e7df      	b.n	1b6a8 <tls_interface_setopt+0xc0>
   1b6e8:	f247 0301 	movw	r3, #28673	; 0x7001
   1b6ec:	e9cd 7400 	strd	r7, r4, [sp]
   1b6f0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b6f4:	4630      	mov	r0, r6
   1b6f6:	f005 fe33 	bl	21360 <ip_interface_socketoption_send>
   1b6fa:	2800      	cmp	r0, #0
   1b6fc:	d0b5      	beq.n	1b66a <tls_interface_setopt+0x82>
   1b6fe:	f004 ff54 	bl	205aa <nrf_modem_os_errno_set>
   1b702:	f04f 30ff 	mov.w	r0, #4294967295
   1b706:	e7a8      	b.n	1b65a <tls_interface_setopt+0x72>
   1b708:	2c04      	cmp	r4, #4
   1b70a:	d114      	bne.n	1b736 <tls_interface_setopt+0x14e>
   1b70c:	6838      	ldr	r0, [r7, #0]
   1b70e:	f7ff fce3 	bl	1b0d8 <secure_socket_dtls_timeout_check>
   1b712:	2800      	cmp	r0, #0
   1b714:	d1f3      	bne.n	1b6fe <tls_interface_setopt+0x116>
   1b716:	f247 0302 	movw	r3, #28674	; 0x7002
   1b71a:	e9cd 7400 	strd	r7, r4, [sp]
   1b71e:	e7e7      	b.n	1b6f0 <tls_interface_setopt+0x108>
   1b720:	f247 0303 	movw	r3, #28675	; 0x7003
   1b724:	e9cd 7400 	strd	r7, r4, [sp]
   1b728:	e7e2      	b.n	1b6f0 <tls_interface_setopt+0x108>
   1b72a:	2009      	movs	r0, #9
   1b72c:	e7e7      	b.n	1b6fe <tls_interface_setopt+0x116>
   1b72e:	206d      	movs	r0, #109	; 0x6d
   1b730:	e7e5      	b.n	1b6fe <tls_interface_setopt+0x116>
   1b732:	200c      	movs	r0, #12
   1b734:	e7e3      	b.n	1b6fe <tls_interface_setopt+0x116>
   1b736:	2016      	movs	r0, #22
   1b738:	e7e1      	b.n	1b6fe <tls_interface_setopt+0x116>
   1b73a:	bf00      	nop
   1b73c:	2000f415 	.word	0x2000f415
   1b740:	2000d55c 	.word	0x2000d55c

0001b744 <tls_interface_getopt>:
   1b744:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b746:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b74a:	b085      	sub	sp, #20
   1b74c:	4606      	mov	r6, r0
   1b74e:	4617      	mov	r7, r2
   1b750:	461d      	mov	r5, r3
   1b752:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1b754:	d004      	beq.n	1b760 <tls_interface_getopt+0x1c>
   1b756:	b005      	add	sp, #20
   1b758:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b75c:	f005 be66 	b.w	2142c <ip_interface_getopt>
   1b760:	b103      	cbz	r3, 1b764 <tls_interface_getopt+0x20>
   1b762:	b92c      	cbnz	r4, 1b770 <tls_interface_getopt+0x2c>
   1b764:	200e      	movs	r0, #14
   1b766:	f004 ff20 	bl	205aa <nrf_modem_os_errno_set>
   1b76a:	f04f 30ff 	mov.w	r0, #4294967295
   1b76e:	e051      	b.n	1b814 <tls_interface_getopt+0xd0>
   1b770:	6823      	ldr	r3, [r4, #0]
   1b772:	b90b      	cbnz	r3, 1b778 <tls_interface_getopt+0x34>
   1b774:	2016      	movs	r0, #22
   1b776:	e7f6      	b.n	1b766 <tls_interface_getopt+0x22>
   1b778:	f7fe fb92 	bl	19ea0 <interface_socket_from_handle_get>
   1b77c:	4601      	mov	r1, r0
   1b77e:	2800      	cmp	r0, #0
   1b780:	d068      	beq.n	1b854 <tls_interface_getopt+0x110>
   1b782:	1e7a      	subs	r2, r7, #1
   1b784:	2a07      	cmp	r2, #7
   1b786:	d871      	bhi.n	1b86c <tls_interface_getopt+0x128>
   1b788:	e8df f002 	tbb	[pc, r2]
   1b78c:	461a2904 	.word	0x461a2904
   1b790:	5f705370 	.word	0x5f705370
   1b794:	6823      	ldr	r3, [r4, #0]
   1b796:	2124      	movs	r1, #36	; 0x24
   1b798:	2b04      	cmp	r3, #4
   1b79a:	bf88      	it	hi
   1b79c:	2304      	movhi	r3, #4
   1b79e:	fb01 f606 	mul.w	r6, r1, r6
   1b7a2:	bf88      	it	hi
   1b7a4:	6023      	strhi	r3, [r4, #0]
   1b7a6:	4b32      	ldr	r3, [pc, #200]	; (1b870 <tls_interface_getopt+0x12c>)
   1b7a8:	a903      	add	r1, sp, #12
   1b7aa:	5d9b      	ldrb	r3, [r3, r6]
   1b7ac:	1e5a      	subs	r2, r3, #1
   1b7ae:	4253      	negs	r3, r2
   1b7b0:	4153      	adcs	r3, r2
   1b7b2:	6822      	ldr	r2, [r4, #0]
   1b7b4:	9303      	str	r3, [sp, #12]
   1b7b6:	4628      	mov	r0, r5
   1b7b8:	f006 ffe0 	bl	2277c <memcpy>
   1b7bc:	2000      	movs	r0, #0
   1b7be:	e029      	b.n	1b814 <tls_interface_getopt+0xd0>
   1b7c0:	6823      	ldr	r3, [r4, #0]
   1b7c2:	2b00      	cmp	r3, #0
   1b7c4:	d0d6      	beq.n	1b774 <tls_interface_getopt+0x30>
   1b7c6:	2124      	movs	r1, #36	; 0x24
   1b7c8:	2b01      	cmp	r3, #1
   1b7ca:	bf88      	it	hi
   1b7cc:	2301      	movhi	r3, #1
   1b7ce:	4828      	ldr	r0, [pc, #160]	; (1b870 <tls_interface_getopt+0x12c>)
   1b7d0:	bf88      	it	hi
   1b7d2:	6023      	strhi	r3, [r4, #0]
   1b7d4:	fb01 0106 	mla	r1, r1, r6, r0
   1b7d8:	6822      	ldr	r2, [r4, #0]
   1b7da:	3101      	adds	r1, #1
   1b7dc:	e7eb      	b.n	1b7b6 <tls_interface_getopt+0x72>
   1b7de:	2324      	movs	r3, #36	; 0x24
   1b7e0:	4923      	ldr	r1, [pc, #140]	; (1b870 <tls_interface_getopt+0x12c>)
   1b7e2:	6822      	ldr	r2, [r4, #0]
   1b7e4:	fb03 1306 	mla	r3, r3, r6, r1
   1b7e8:	78d8      	ldrb	r0, [r3, #3]
   1b7ea:	0793      	lsls	r3, r2, #30
   1b7ec:	bf14      	ite	ne
   1b7ee:	2300      	movne	r3, #0
   1b7f0:	0893      	lsreq	r3, r2, #2
   1b7f2:	4283      	cmp	r3, r0
   1b7f4:	bf28      	it	cs
   1b7f6:	4603      	movcs	r3, r0
   1b7f8:	009f      	lsls	r7, r3, #2
   1b7fa:	b143      	cbz	r3, 1b80e <tls_interface_getopt+0xca>
   1b7fc:	2024      	movs	r0, #36	; 0x24
   1b7fe:	fb00 1106 	mla	r1, r0, r6, r1
   1b802:	42ba      	cmp	r2, r7
   1b804:	bf88      	it	hi
   1b806:	6027      	strhi	r7, [r4, #0]
   1b808:	6822      	ldr	r2, [r4, #0]
   1b80a:	3104      	adds	r1, #4
   1b80c:	e7d3      	b.n	1b7b6 <tls_interface_getopt+0x72>
   1b80e:	2800      	cmp	r0, #0
   1b810:	d1b0      	bne.n	1b774 <tls_interface_getopt+0x30>
   1b812:	6020      	str	r0, [r4, #0]
   1b814:	b005      	add	sp, #20
   1b816:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b818:	6823      	ldr	r3, [r4, #0]
   1b81a:	2124      	movs	r1, #36	; 0x24
   1b81c:	2b04      	cmp	r3, #4
   1b81e:	bf88      	it	hi
   1b820:	2304      	movhi	r3, #4
   1b822:	4813      	ldr	r0, [pc, #76]	; (1b870 <tls_interface_getopt+0x12c>)
   1b824:	bf88      	it	hi
   1b826:	6023      	strhi	r3, [r4, #0]
   1b828:	fb01 0106 	mla	r1, r1, r6, r0
   1b82c:	6822      	ldr	r2, [r4, #0]
   1b82e:	3102      	adds	r1, #2
   1b830:	e7c1      	b.n	1b7b6 <tls_interface_getopt+0x72>
   1b832:	f247 0301 	movw	r3, #28673	; 0x7001
   1b836:	e9cd 5400 	strd	r5, r4, [sp]
   1b83a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b83e:	4630      	mov	r0, r6
   1b840:	f7fe fe14 	bl	1a46c <ip_interface_socketoption_get>
   1b844:	2800      	cmp	r0, #0
   1b846:	d0e5      	beq.n	1b814 <tls_interface_getopt+0xd0>
   1b848:	e78d      	b.n	1b766 <tls_interface_getopt+0x22>
   1b84a:	6823      	ldr	r3, [r4, #0]
   1b84c:	2b04      	cmp	r3, #4
   1b84e:	d903      	bls.n	1b858 <tls_interface_getopt+0x114>
   1b850:	2304      	movs	r3, #4
   1b852:	6023      	str	r3, [r4, #0]
   1b854:	2009      	movs	r0, #9
   1b856:	e786      	b.n	1b766 <tls_interface_getopt+0x22>
   1b858:	6828      	ldr	r0, [r5, #0]
   1b85a:	f7ff fc3d 	bl	1b0d8 <secure_socket_dtls_timeout_check>
   1b85e:	2800      	cmp	r0, #0
   1b860:	d181      	bne.n	1b766 <tls_interface_getopt+0x22>
   1b862:	f247 0302 	movw	r3, #28674	; 0x7002
   1b866:	e9cd 5400 	strd	r5, r4, [sp]
   1b86a:	e7e6      	b.n	1b83a <tls_interface_getopt+0xf6>
   1b86c:	206d      	movs	r0, #109	; 0x6d
   1b86e:	e77a      	b.n	1b766 <tls_interface_getopt+0x22>
   1b870:	2000f415 	.word	0x2000f415

0001b874 <tls_rpc_ip_event_handler>:
   1b874:	b570      	push	{r4, r5, r6, lr}
   1b876:	460c      	mov	r4, r1
   1b878:	f248 0181 	movw	r1, #32897	; 0x8081
   1b87c:	428b      	cmp	r3, r1
   1b87e:	4606      	mov	r6, r0
   1b880:	d035      	beq.n	1b8ee <tls_rpc_ip_event_handler+0x7a>
   1b882:	f249 0182 	movw	r1, #36994	; 0x9082
   1b886:	428b      	cmp	r3, r1
   1b888:	d040      	beq.n	1b90c <tls_rpc_ip_event_handler+0x98>
   1b88a:	f248 0102 	movw	r1, #32770	; 0x8002
   1b88e:	428b      	cmp	r3, r1
   1b890:	d161      	bne.n	1b956 <tls_rpc_ip_event_handler+0xe2>
   1b892:	2c00      	cmp	r4, #0
   1b894:	d05f      	beq.n	1b956 <tls_rpc_ip_event_handler+0xe2>
   1b896:	6963      	ldr	r3, [r4, #20]
   1b898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1b89c:	d002      	beq.n	1b8a4 <tls_rpc_ip_event_handler+0x30>
   1b89e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1b8a2:	d158      	bne.n	1b956 <tls_rpc_ip_event_handler+0xe2>
   1b8a4:	6823      	ldr	r3, [r4, #0]
   1b8a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b8aa:	6023      	str	r3, [r4, #0]
   1b8ac:	6955      	ldr	r5, [r2, #20]
   1b8ae:	2d00      	cmp	r5, #0
   1b8b0:	d14d      	bne.n	1b94e <tls_rpc_ip_event_handler+0xda>
   1b8b2:	6823      	ldr	r3, [r4, #0]
   1b8b4:	0c1b      	lsrs	r3, r3, #16
   1b8b6:	041b      	lsls	r3, r3, #16
   1b8b8:	f043 0305 	orr.w	r3, r3, #5
   1b8bc:	6023      	str	r3, [r4, #0]
   1b8be:	6823      	ldr	r3, [r4, #0]
   1b8c0:	00db      	lsls	r3, r3, #3
   1b8c2:	d401      	bmi.n	1b8c8 <tls_rpc_ip_event_handler+0x54>
   1b8c4:	2000      	movs	r0, #0
   1b8c6:	e020      	b.n	1b90a <tls_rpc_ip_event_handler+0x96>
   1b8c8:	2324      	movs	r3, #36	; 0x24
   1b8ca:	4373      	muls	r3, r6
   1b8cc:	4a23      	ldr	r2, [pc, #140]	; (1b95c <tls_rpc_ip_event_handler+0xe8>)
   1b8ce:	5cd3      	ldrb	r3, [r2, r3]
   1b8d0:	2b02      	cmp	r3, #2
   1b8d2:	d1f7      	bne.n	1b8c4 <tls_rpc_ip_event_handler+0x50>
   1b8d4:	4621      	mov	r1, r4
   1b8d6:	4630      	mov	r0, r6
   1b8d8:	f005 fe1a 	bl	21510 <secure_client_socket>
   1b8dc:	2800      	cmp	r0, #0
   1b8de:	d0f1      	beq.n	1b8c4 <tls_rpc_ip_event_handler+0x50>
   1b8e0:	2877      	cmp	r0, #119	; 0x77
   1b8e2:	d0ef      	beq.n	1b8c4 <tls_rpc_ip_event_handler+0x50>
   1b8e4:	6060      	str	r0, [r4, #4]
   1b8e6:	6823      	ldr	r3, [r4, #0]
   1b8e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b8ec:	e02d      	b.n	1b94a <tls_rpc_ip_event_handler+0xd6>
   1b8ee:	2c00      	cmp	r4, #0
   1b8f0:	d0e8      	beq.n	1b8c4 <tls_rpc_ip_event_handler+0x50>
   1b8f2:	6823      	ldr	r3, [r4, #0]
   1b8f4:	b29b      	uxth	r3, r3
   1b8f6:	2b0a      	cmp	r3, #10
   1b8f8:	d1e4      	bne.n	1b8c4 <tls_rpc_ip_event_handler+0x50>
   1b8fa:	6950      	ldr	r0, [r2, #20]
   1b8fc:	bb40      	cbnz	r0, 1b950 <tls_rpc_ip_event_handler+0xdc>
   1b8fe:	6823      	ldr	r3, [r4, #0]
   1b900:	0c1b      	lsrs	r3, r3, #16
   1b902:	041b      	lsls	r3, r3, #16
   1b904:	f043 030b 	orr.w	r3, r3, #11
   1b908:	6023      	str	r3, [r4, #0]
   1b90a:	bd70      	pop	{r4, r5, r6, pc}
   1b90c:	2c00      	cmp	r4, #0
   1b90e:	d0d9      	beq.n	1b8c4 <tls_rpc_ip_event_handler+0x50>
   1b910:	6823      	ldr	r3, [r4, #0]
   1b912:	b29b      	uxth	r3, r3
   1b914:	2b0b      	cmp	r3, #11
   1b916:	d1d5      	bne.n	1b8c4 <tls_rpc_ip_event_handler+0x50>
   1b918:	6915      	ldr	r5, [r2, #16]
   1b91a:	b9c5      	cbnz	r5, 1b94e <tls_rpc_ip_event_handler+0xda>
   1b91c:	6823      	ldr	r3, [r4, #0]
   1b91e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1b922:	6023      	str	r3, [r4, #0]
   1b924:	f7ff fbf4 	bl	1b110 <hostname_free>
   1b928:	6823      	ldr	r3, [r4, #0]
   1b92a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1b92e:	6023      	str	r3, [r4, #0]
   1b930:	6823      	ldr	r3, [r4, #0]
   1b932:	0c1b      	lsrs	r3, r3, #16
   1b934:	041b      	lsls	r3, r3, #16
   1b936:	f043 030c 	orr.w	r3, r3, #12
   1b93a:	6023      	str	r3, [r4, #0]
   1b93c:	6823      	ldr	r3, [r4, #0]
   1b93e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b942:	6023      	str	r3, [r4, #0]
   1b944:	6823      	ldr	r3, [r4, #0]
   1b946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b94a:	6023      	str	r3, [r4, #0]
   1b94c:	e7ba      	b.n	1b8c4 <tls_rpc_ip_event_handler+0x50>
   1b94e:	4628      	mov	r0, r5
   1b950:	f7fe fb6c 	bl	1a02c <rpc_error_to_nrf_errno>
   1b954:	e7c6      	b.n	1b8e4 <tls_rpc_ip_event_handler+0x70>
   1b956:	2001      	movs	r0, #1
   1b958:	e7d7      	b.n	1b90a <tls_rpc_ip_event_handler+0x96>
   1b95a:	bf00      	nop
   1b95c:	2000f415 	.word	0x2000f415

0001b960 <at_cmd_send>:
   1b960:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b962:	4615      	mov	r5, r2
   1b964:	f06f 0258 	mvn.w	r2, #88	; 0x58
   1b968:	2300      	movs	r3, #0
   1b96a:	7302      	strb	r2, [r0, #12]
   1b96c:	2204      	movs	r2, #4
   1b96e:	4c0d      	ldr	r4, [pc, #52]	; (1b9a4 <at_cmd_send+0x44>)
   1b970:	7343      	strb	r3, [r0, #13]
   1b972:	7383      	strb	r3, [r0, #14]
   1b974:	73c3      	strb	r3, [r0, #15]
   1b976:	7202      	strb	r2, [r0, #8]
   1b978:	7243      	strb	r3, [r0, #9]
   1b97a:	7283      	strb	r3, [r0, #10]
   1b97c:	72c3      	strb	r3, [r0, #11]
   1b97e:	4602      	mov	r2, r0
   1b980:	b289      	uxth	r1, r1
   1b982:	2003      	movs	r0, #3
   1b984:	7023      	strb	r3, [r4, #0]
   1b986:	f005 fa94 	bl	20eb2 <rpc_client_request_send>
   1b98a:	f04f 33ff 	mov.w	r3, #4294967295
   1b98e:	9301      	str	r3, [sp, #4]
   1b990:	7823      	ldrb	r3, [r4, #0]
   1b992:	42ab      	cmp	r3, r5
   1b994:	d101      	bne.n	1b99a <at_cmd_send+0x3a>
   1b996:	b003      	add	sp, #12
   1b998:	bd30      	pop	{r4, r5, pc}
   1b99a:	a901      	add	r1, sp, #4
   1b99c:	2000      	movs	r0, #0
   1b99e:	f7f9 ffdd 	bl	1595c <nrf_modem_os_timedwait>
   1b9a2:	e7f5      	b.n	1b990 <at_cmd_send+0x30>
   1b9a4:	2000f535 	.word	0x2000f535

0001b9a8 <at_response_match>:
   1b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b9aa:	4605      	mov	r5, r0
   1b9ac:	2400      	movs	r4, #0
   1b9ae:	4f10      	ldr	r7, [pc, #64]	; (1b9f0 <at_response_match+0x48>)
   1b9b0:	f857 6b04 	ldr.w	r6, [r7], #4
   1b9b4:	4628      	mov	r0, r5
   1b9b6:	4631      	mov	r1, r6
   1b9b8:	f006 ff3e 	bl	22838 <strstr>
   1b9bc:	b928      	cbnz	r0, 1b9ca <at_response_match+0x22>
   1b9be:	3401      	adds	r4, #1
   1b9c0:	2c04      	cmp	r4, #4
   1b9c2:	d1f5      	bne.n	1b9b0 <at_response_match+0x8>
   1b9c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1b9c8:	e00e      	b.n	1b9e8 <at_response_match+0x40>
   1b9ca:	2c01      	cmp	r4, #1
   1b9cc:	d0fa      	beq.n	1b9c4 <at_response_match+0x1c>
   1b9ce:	1ea3      	subs	r3, r4, #2
   1b9d0:	2b01      	cmp	r3, #1
   1b9d2:	d80a      	bhi.n	1b9ea <at_response_match+0x42>
   1b9d4:	4630      	mov	r0, r6
   1b9d6:	f7f5 fbeb 	bl	111b0 <strlen>
   1b9da:	220a      	movs	r2, #10
   1b9dc:	2100      	movs	r1, #0
   1b9de:	4428      	add	r0, r5
   1b9e0:	f002 f930 	bl	1dc44 <strtol>
   1b9e4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   1b9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9ea:	2000      	movs	r0, #0
   1b9ec:	e7fc      	b.n	1b9e8 <at_response_match+0x40>
   1b9ee:	bf00      	nop
   1b9f0:	000233f4 	.word	0x000233f4

0001b9f4 <at_vprintf>:
   1b9f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b9f8:	4607      	mov	r7, r0
   1b9fa:	460e      	mov	r6, r1
   1b9fc:	481d      	ldr	r0, [pc, #116]	; (1ba74 <at_vprintf+0x80>)
   1b9fe:	2100      	movs	r1, #0
   1ba00:	4690      	mov	r8, r2
   1ba02:	461d      	mov	r5, r3
   1ba04:	9301      	str	r3, [sp, #4]
   1ba06:	f002 fa4b 	bl	1dea0 <vsniprintf>
   1ba0a:	3001      	adds	r0, #1
   1ba0c:	f005 fa4b 	bl	20ea6 <rpc_client_request_alloc>
   1ba10:	4604      	mov	r4, r0
   1ba12:	b360      	cbz	r0, 1ba6e <at_vprintf+0x7a>
   1ba14:	9501      	str	r5, [sp, #4]
   1ba16:	462b      	mov	r3, r5
   1ba18:	6841      	ldr	r1, [r0, #4]
   1ba1a:	4642      	mov	r2, r8
   1ba1c:	6800      	ldr	r0, [r0, #0]
   1ba1e:	f002 fa3f 	bl	1dea0 <vsniprintf>
   1ba22:	2202      	movs	r2, #2
   1ba24:	2101      	movs	r1, #1
   1ba26:	4620      	mov	r0, r4
   1ba28:	f7ff ff9a 	bl	1b960 <at_cmd_send>
   1ba2c:	4d12      	ldr	r5, [pc, #72]	; (1ba78 <at_vprintf+0x84>)
   1ba2e:	b97f      	cbnz	r7, 1ba50 <at_vprintf+0x5c>
   1ba30:	682b      	ldr	r3, [r5, #0]
   1ba32:	6818      	ldr	r0, [r3, #0]
   1ba34:	f7ff ffb8 	bl	1b9a8 <at_response_match>
   1ba38:	4604      	mov	r4, r0
   1ba3a:	682b      	ldr	r3, [r5, #0]
   1ba3c:	6818      	ldr	r0, [r3, #0]
   1ba3e:	f005 fa42 	bl	20ec6 <rpc_client_data_free>
   1ba42:	6828      	ldr	r0, [r5, #0]
   1ba44:	f005 fa3c 	bl	20ec0 <rpc_client_message_free>
   1ba48:	4620      	mov	r0, r4
   1ba4a:	b002      	add	sp, #8
   1ba4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba50:	682c      	ldr	r4, [r5, #0]
   1ba52:	4638      	mov	r0, r7
   1ba54:	6862      	ldr	r2, [r4, #4]
   1ba56:	6821      	ldr	r1, [r4, #0]
   1ba58:	42b2      	cmp	r2, r6
   1ba5a:	bf28      	it	cs
   1ba5c:	4632      	movcs	r2, r6
   1ba5e:	f006 fe8d 	bl	2277c <memcpy>
   1ba62:	6863      	ldr	r3, [r4, #4]
   1ba64:	42b3      	cmp	r3, r6
   1ba66:	d9e3      	bls.n	1ba30 <at_vprintf+0x3c>
   1ba68:	f06f 0406 	mvn.w	r4, #6
   1ba6c:	e7e5      	b.n	1ba3a <at_vprintf+0x46>
   1ba6e:	f06f 040b 	mvn.w	r4, #11
   1ba72:	e7e9      	b.n	1ba48 <at_vprintf+0x54>
   1ba74:	000230e4 	.word	0x000230e4
   1ba78:	2000d5ac 	.word	0x2000d5ac

0001ba7c <nrf_modem_at_init>:
   1ba7c:	2201      	movs	r2, #1
   1ba7e:	b508      	push	{r3, lr}
   1ba80:	4611      	mov	r1, r2
   1ba82:	4808      	ldr	r0, [pc, #32]	; (1baa4 <nrf_modem_at_init+0x28>)
   1ba84:	f7fa f822 	bl	15acc <nrf_modem_os_sem_init>
   1ba88:	2000      	movs	r0, #0
   1ba8a:	f005 fa0c 	bl	20ea6 <rpc_client_request_alloc>
   1ba8e:	b128      	cbz	r0, 1ba9c <nrf_modem_at_init+0x20>
   1ba90:	2201      	movs	r2, #1
   1ba92:	2105      	movs	r1, #5
   1ba94:	f7ff ff64 	bl	1b960 <at_cmd_send>
   1ba98:	2000      	movs	r0, #0
   1ba9a:	bd08      	pop	{r3, pc}
   1ba9c:	f06f 000b 	mvn.w	r0, #11
   1baa0:	e7fb      	b.n	1ba9a <nrf_modem_at_init+0x1e>
   1baa2:	bf00      	nop
   1baa4:	2000d59c 	.word	0x2000d59c

0001baa8 <nrf_modem_at_notif_handler_set>:
   1baa8:	4b01      	ldr	r3, [pc, #4]	; (1bab0 <nrf_modem_at_notif_handler_set+0x8>)
   1baaa:	6018      	str	r0, [r3, #0]
   1baac:	2000      	movs	r0, #0
   1baae:	4770      	bx	lr
   1bab0:	2000d5a8 	.word	0x2000d5a8

0001bab4 <nrf_modem_at_printf>:
   1bab4:	b40f      	push	{r0, r1, r2, r3}
   1bab6:	4b11      	ldr	r3, [pc, #68]	; (1bafc <nrf_modem_at_printf+0x48>)
   1bab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1baba:	781b      	ldrb	r3, [r3, #0]
   1babc:	9c06      	ldr	r4, [sp, #24]
   1babe:	b1bb      	cbz	r3, 1baf0 <nrf_modem_at_printf+0x3c>
   1bac0:	b1cc      	cbz	r4, 1baf6 <nrf_modem_at_printf+0x42>
   1bac2:	4d0f      	ldr	r5, [pc, #60]	; (1bb00 <nrf_modem_at_printf+0x4c>)
   1bac4:	f04f 31ff 	mov.w	r1, #4294967295
   1bac8:	6828      	ldr	r0, [r5, #0]
   1baca:	f004 fd78 	bl	205be <nrf_modem_os_sem_take>
   1bace:	2100      	movs	r1, #0
   1bad0:	4622      	mov	r2, r4
   1bad2:	ab07      	add	r3, sp, #28
   1bad4:	4608      	mov	r0, r1
   1bad6:	9301      	str	r3, [sp, #4]
   1bad8:	f7ff ff8c 	bl	1b9f4 <at_vprintf>
   1badc:	4604      	mov	r4, r0
   1bade:	6828      	ldr	r0, [r5, #0]
   1bae0:	f004 fd6b 	bl	205ba <nrf_modem_os_sem_give>
   1bae4:	4620      	mov	r0, r4
   1bae6:	b003      	add	sp, #12
   1bae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1baec:	b004      	add	sp, #16
   1baee:	4770      	bx	lr
   1baf0:	f04f 34ff 	mov.w	r4, #4294967295
   1baf4:	e7f6      	b.n	1bae4 <nrf_modem_at_printf+0x30>
   1baf6:	f06f 040d 	mvn.w	r4, #13
   1bafa:	e7f3      	b.n	1bae4 <nrf_modem_at_printf+0x30>
   1bafc:	2000f53b 	.word	0x2000f53b
   1bb00:	2000d59c 	.word	0x2000d59c

0001bb04 <nrf_modem_at_cmd>:
   1bb04:	b40c      	push	{r2, r3}
   1bb06:	4b2e      	ldr	r3, [pc, #184]	; (1bbc0 <nrf_modem_at_cmd+0xbc>)
   1bb08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1bb0c:	781b      	ldrb	r3, [r3, #0]
   1bb0e:	4605      	mov	r5, r0
   1bb10:	460f      	mov	r7, r1
   1bb12:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1bb16:	2b00      	cmp	r3, #0
   1bb18:	d049      	beq.n	1bbae <nrf_modem_at_cmd+0xaa>
   1bb1a:	2800      	cmp	r0, #0
   1bb1c:	d04a      	beq.n	1bbb4 <nrf_modem_at_cmd+0xb0>
   1bb1e:	f1b8 0f00 	cmp.w	r8, #0
   1bb22:	d047      	beq.n	1bbb4 <nrf_modem_at_cmd+0xb0>
   1bb24:	2900      	cmp	r1, #0
   1bb26:	d048      	beq.n	1bbba <nrf_modem_at_cmd+0xb6>
   1bb28:	4b26      	ldr	r3, [pc, #152]	; (1bbc4 <nrf_modem_at_cmd+0xc0>)
   1bb2a:	681a      	ldr	r2, [r3, #0]
   1bb2c:	4699      	mov	r9, r3
   1bb2e:	b1d2      	cbz	r2, 1bb66 <nrf_modem_at_cmd+0x62>
   1bb30:	4e25      	ldr	r6, [pc, #148]	; (1bbc8 <nrf_modem_at_cmd+0xc4>)
   1bb32:	6833      	ldr	r3, [r6, #0]
   1bb34:	b1bb      	cbz	r3, 1bb66 <nrf_modem_at_cmd+0x62>
   1bb36:	2400      	movs	r4, #0
   1bb38:	f8d9 3000 	ldr.w	r3, [r9]
   1bb3c:	429c      	cmp	r4, r3
   1bb3e:	d212      	bcs.n	1bb66 <nrf_modem_at_cmd+0x62>
   1bb40:	6833      	ldr	r3, [r6, #0]
   1bb42:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   1bb46:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1bb4a:	f7f5 fb31 	bl	111b0 <strlen>
   1bb4e:	6833      	ldr	r3, [r6, #0]
   1bb50:	4602      	mov	r2, r0
   1bb52:	4641      	mov	r1, r8
   1bb54:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1bb58:	f006 fe3c 	bl	227d4 <strncmp>
   1bb5c:	b9a8      	cbnz	r0, 1bb8a <nrf_modem_at_cmd+0x86>
   1bb5e:	6833      	ldr	r3, [r6, #0]
   1bb60:	4453      	add	r3, sl
   1bb62:	685b      	ldr	r3, [r3, #4]
   1bb64:	b99b      	cbnz	r3, 1bb8e <nrf_modem_at_cmd+0x8a>
   1bb66:	4e19      	ldr	r6, [pc, #100]	; (1bbcc <nrf_modem_at_cmd+0xc8>)
   1bb68:	f04f 31ff 	mov.w	r1, #4294967295
   1bb6c:	6830      	ldr	r0, [r6, #0]
   1bb6e:	f004 fd26 	bl	205be <nrf_modem_os_sem_take>
   1bb72:	ab0b      	add	r3, sp, #44	; 0x2c
   1bb74:	4642      	mov	r2, r8
   1bb76:	4639      	mov	r1, r7
   1bb78:	4628      	mov	r0, r5
   1bb7a:	9301      	str	r3, [sp, #4]
   1bb7c:	f7ff ff3a 	bl	1b9f4 <at_vprintf>
   1bb80:	4604      	mov	r4, r0
   1bb82:	6830      	ldr	r0, [r6, #0]
   1bb84:	f004 fd19 	bl	205ba <nrf_modem_os_sem_give>
   1bb88:	e00b      	b.n	1bba2 <nrf_modem_at_cmd+0x9e>
   1bb8a:	3401      	adds	r4, #1
   1bb8c:	e7d4      	b.n	1bb38 <nrf_modem_at_cmd+0x34>
   1bb8e:	4642      	mov	r2, r8
   1bb90:	4639      	mov	r1, r7
   1bb92:	4628      	mov	r0, r5
   1bb94:	4798      	blx	r3
   1bb96:	1e04      	subs	r4, r0, #0
   1bb98:	db03      	blt.n	1bba2 <nrf_modem_at_cmd+0x9e>
   1bb9a:	4628      	mov	r0, r5
   1bb9c:	f7ff ff04 	bl	1b9a8 <at_response_match>
   1bba0:	4604      	mov	r4, r0
   1bba2:	4620      	mov	r0, r4
   1bba4:	b002      	add	sp, #8
   1bba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bbaa:	b002      	add	sp, #8
   1bbac:	4770      	bx	lr
   1bbae:	f04f 34ff 	mov.w	r4, #4294967295
   1bbb2:	e7f6      	b.n	1bba2 <nrf_modem_at_cmd+0x9e>
   1bbb4:	f06f 040d 	mvn.w	r4, #13
   1bbb8:	e7f3      	b.n	1bba2 <nrf_modem_at_cmd+0x9e>
   1bbba:	f06f 0415 	mvn.w	r4, #21
   1bbbe:	e7f0      	b.n	1bba2 <nrf_modem_at_cmd+0x9e>
   1bbc0:	2000f53b 	.word	0x2000f53b
   1bbc4:	2000d5a4 	.word	0x2000d5a4
   1bbc8:	2000d5a0 	.word	0x2000d5a0
   1bbcc:	2000d59c 	.word	0x2000d59c

0001bbd0 <nrf_modem_at_scanf>:
   1bbd0:	b40e      	push	{r1, r2, r3}
   1bbd2:	4b23      	ldr	r3, [pc, #140]	; (1bc60 <nrf_modem_at_scanf+0x90>)
   1bbd4:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   1bbd6:	781b      	ldrb	r3, [r3, #0]
   1bbd8:	4605      	mov	r5, r0
   1bbda:	9f07      	ldr	r7, [sp, #28]
   1bbdc:	2b00      	cmp	r3, #0
   1bbde:	d039      	beq.n	1bc54 <nrf_modem_at_scanf+0x84>
   1bbe0:	2800      	cmp	r0, #0
   1bbe2:	d03a      	beq.n	1bc5a <nrf_modem_at_scanf+0x8a>
   1bbe4:	2f00      	cmp	r7, #0
   1bbe6:	d038      	beq.n	1bc5a <nrf_modem_at_scanf+0x8a>
   1bbe8:	4e1e      	ldr	r6, [pc, #120]	; (1bc64 <nrf_modem_at_scanf+0x94>)
   1bbea:	f04f 31ff 	mov.w	r1, #4294967295
   1bbee:	6830      	ldr	r0, [r6, #0]
   1bbf0:	f004 fce5 	bl	205be <nrf_modem_os_sem_take>
   1bbf4:	4628      	mov	r0, r5
   1bbf6:	f7f5 fadb 	bl	111b0 <strlen>
   1bbfa:	3001      	adds	r0, #1
   1bbfc:	f005 f953 	bl	20ea6 <rpc_client_request_alloc>
   1bc00:	4604      	mov	r4, r0
   1bc02:	b320      	cbz	r0, 1bc4e <nrf_modem_at_scanf+0x7e>
   1bc04:	4629      	mov	r1, r5
   1bc06:	6800      	ldr	r0, [r0, #0]
   1bc08:	4d17      	ldr	r5, [pc, #92]	; (1bc68 <nrf_modem_at_scanf+0x98>)
   1bc0a:	f006 fddb 	bl	227c4 <strcpy>
   1bc0e:	4620      	mov	r0, r4
   1bc10:	2202      	movs	r2, #2
   1bc12:	2101      	movs	r1, #1
   1bc14:	f7ff fea4 	bl	1b960 <at_cmd_send>
   1bc18:	682b      	ldr	r3, [r5, #0]
   1bc1a:	aa08      	add	r2, sp, #32
   1bc1c:	4639      	mov	r1, r7
   1bc1e:	6818      	ldr	r0, [r3, #0]
   1bc20:	9201      	str	r2, [sp, #4]
   1bc22:	f002 f96f 	bl	1df04 <vsiscanf>
   1bc26:	682b      	ldr	r3, [r5, #0]
   1bc28:	1e04      	subs	r4, r0, #0
   1bc2a:	6818      	ldr	r0, [r3, #0]
   1bc2c:	bf08      	it	eq
   1bc2e:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   1bc32:	f005 f948 	bl	20ec6 <rpc_client_data_free>
   1bc36:	6828      	ldr	r0, [r5, #0]
   1bc38:	f005 f942 	bl	20ec0 <rpc_client_message_free>
   1bc3c:	6830      	ldr	r0, [r6, #0]
   1bc3e:	f004 fcbc 	bl	205ba <nrf_modem_os_sem_give>
   1bc42:	4620      	mov	r0, r4
   1bc44:	b002      	add	sp, #8
   1bc46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1bc4a:	b003      	add	sp, #12
   1bc4c:	4770      	bx	lr
   1bc4e:	f06f 040b 	mvn.w	r4, #11
   1bc52:	e7f3      	b.n	1bc3c <nrf_modem_at_scanf+0x6c>
   1bc54:	f04f 34ff 	mov.w	r4, #4294967295
   1bc58:	e7f3      	b.n	1bc42 <nrf_modem_at_scanf+0x72>
   1bc5a:	f06f 040d 	mvn.w	r4, #13
   1bc5e:	e7f0      	b.n	1bc42 <nrf_modem_at_scanf+0x72>
   1bc60:	2000f53b 	.word	0x2000f53b
   1bc64:	2000d59c 	.word	0x2000d59c
   1bc68:	2000d5ac 	.word	0x2000d5ac

0001bc6c <rpc_at_event_handler>:
   1bc6c:	b570      	push	{r4, r5, r6, lr}
   1bc6e:	68c3      	ldr	r3, [r0, #12]
   1bc70:	4605      	mov	r5, r0
   1bc72:	2ba7      	cmp	r3, #167	; 0xa7
   1bc74:	d003      	beq.n	1bc7e <rpc_at_event_handler+0x12>
   1bc76:	6828      	ldr	r0, [r5, #0]
   1bc78:	f005 f925 	bl	20ec6 <rpc_client_data_free>
   1bc7c:	e008      	b.n	1bc90 <rpc_at_event_handler+0x24>
   1bc7e:	2903      	cmp	r1, #3
   1bc80:	d008      	beq.n	1bc94 <rpc_at_event_handler+0x28>
   1bc82:	2904      	cmp	r1, #4
   1bc84:	d019      	beq.n	1bcba <rpc_at_event_handler+0x4e>
   1bc86:	2902      	cmp	r1, #2
   1bc88:	d102      	bne.n	1bc90 <rpc_at_event_handler+0x24>
   1bc8a:	2201      	movs	r2, #1
   1bc8c:	4b0e      	ldr	r3, [pc, #56]	; (1bcc8 <rpc_at_event_handler+0x5c>)
   1bc8e:	701a      	strb	r2, [r3, #0]
   1bc90:	2000      	movs	r0, #0
   1bc92:	e00a      	b.n	1bcaa <rpc_at_event_handler+0x3e>
   1bc94:	4e0d      	ldr	r6, [pc, #52]	; (1bccc <rpc_at_event_handler+0x60>)
   1bc96:	6833      	ldr	r3, [r6, #0]
   1bc98:	b143      	cbz	r3, 1bcac <rpc_at_event_handler+0x40>
   1bc9a:	2400      	movs	r4, #0
   1bc9c:	6800      	ldr	r0, [r0, #0]
   1bc9e:	4798      	blx	r3
   1bca0:	6828      	ldr	r0, [r5, #0]
   1bca2:	6034      	str	r4, [r6, #0]
   1bca4:	f005 f90f 	bl	20ec6 <rpc_client_data_free>
   1bca8:	b2e0      	uxtb	r0, r4
   1bcaa:	bd70      	pop	{r4, r5, r6, pc}
   1bcac:	2202      	movs	r2, #2
   1bcae:	4b08      	ldr	r3, [pc, #32]	; (1bcd0 <rpc_at_event_handler+0x64>)
   1bcb0:	2401      	movs	r4, #1
   1bcb2:	6018      	str	r0, [r3, #0]
   1bcb4:	4b04      	ldr	r3, [pc, #16]	; (1bcc8 <rpc_at_event_handler+0x5c>)
   1bcb6:	701a      	strb	r2, [r3, #0]
   1bcb8:	e7f6      	b.n	1bca8 <rpc_at_event_handler+0x3c>
   1bcba:	4b06      	ldr	r3, [pc, #24]	; (1bcd4 <rpc_at_event_handler+0x68>)
   1bcbc:	681b      	ldr	r3, [r3, #0]
   1bcbe:	2b00      	cmp	r3, #0
   1bcc0:	d0d9      	beq.n	1bc76 <rpc_at_event_handler+0xa>
   1bcc2:	6800      	ldr	r0, [r0, #0]
   1bcc4:	4798      	blx	r3
   1bcc6:	e7d6      	b.n	1bc76 <rpc_at_event_handler+0xa>
   1bcc8:	2000f535 	.word	0x2000f535
   1bccc:	2000d5b0 	.word	0x2000d5b0
   1bcd0:	2000d5ac 	.word	0x2000d5ac
   1bcd4:	2000d5a8 	.word	0x2000d5a8

0001bcd8 <rpc_dfu_event_handler>:
   1bcd8:	b510      	push	{r4, lr}
   1bcda:	4604      	mov	r4, r0
   1bcdc:	6800      	ldr	r0, [r0, #0]
   1bcde:	b108      	cbz	r0, 1bce4 <rpc_dfu_event_handler+0xc>
   1bce0:	f005 f8f1 	bl	20ec6 <rpc_client_data_free>
   1bce4:	4b05      	ldr	r3, [pc, #20]	; (1bcfc <rpc_dfu_event_handler+0x24>)
   1bce6:	68e2      	ldr	r2, [r4, #12]
   1bce8:	429a      	cmp	r2, r3
   1bcea:	bf05      	ittet	eq
   1bcec:	2001      	moveq	r0, #1
   1bcee:	4b04      	ldreq	r3, [pc, #16]	; (1bd00 <rpc_dfu_event_handler+0x28>)
   1bcf0:	2000      	movne	r0, #0
   1bcf2:	7018      	strbeq	r0, [r3, #0]
   1bcf4:	bf04      	itt	eq
   1bcf6:	4b03      	ldreq	r3, [pc, #12]	; (1bd04 <rpc_dfu_event_handler+0x2c>)
   1bcf8:	601c      	streq	r4, [r3, #0]
   1bcfa:	bd10      	pop	{r4, pc}
   1bcfc:	15abe11a 	.word	0x15abe11a
   1bd00:	2000f536 	.word	0x2000f536
   1bd04:	2000d5b4 	.word	0x2000d5b4

0001bd08 <rpc_gnss_event_handler>:
   1bd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd0c:	6804      	ldr	r4, [r0, #0]
   1bd0e:	4607      	mov	r7, r0
   1bd10:	460d      	mov	r5, r1
   1bd12:	2c00      	cmp	r4, #0
   1bd14:	f000 8086 	beq.w	1be24 <rpc_gnss_event_handler+0x11c>
   1bd18:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1bd1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1bd20:	d142      	bne.n	1bda8 <rpc_gnss_event_handler+0xa0>
   1bd22:	4b5f      	ldr	r3, [pc, #380]	; (1bea0 <rpc_gnss_event_handler+0x198>)
   1bd24:	781a      	ldrb	r2, [r3, #0]
   1bd26:	4698      	mov	r8, r3
   1bd28:	2a01      	cmp	r2, #1
   1bd2a:	d131      	bne.n	1bd90 <rpc_gnss_event_handler+0x88>
   1bd2c:	4a5d      	ldr	r2, [pc, #372]	; (1bea4 <rpc_gnss_event_handler+0x19c>)
   1bd2e:	6821      	ldr	r1, [r4, #0]
   1bd30:	8812      	ldrh	r2, [r2, #0]
   1bd32:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1bd36:	d12b      	bne.n	1bd90 <rpc_gnss_event_handler+0x88>
   1bd38:	6862      	ldr	r2, [r4, #4]
   1bd3a:	bb6a      	cbnz	r2, 1bd98 <rpc_gnss_event_handler+0x90>
   1bd3c:	4b5a      	ldr	r3, [pc, #360]	; (1bea8 <rpc_gnss_event_handler+0x1a0>)
   1bd3e:	681e      	ldr	r6, [r3, #0]
   1bd40:	b31e      	cbz	r6, 1bd8a <rpc_gnss_event_handler+0x82>
   1bd42:	f242 0309 	movw	r3, #8201	; 0x2009
   1bd46:	429d      	cmp	r5, r3
   1bd48:	d11f      	bne.n	1bd8a <rpc_gnss_event_handler+0x82>
   1bd4a:	4630      	mov	r0, r6
   1bd4c:	8923      	ldrh	r3, [r4, #8]
   1bd4e:	2280      	movs	r2, #128	; 0x80
   1bd50:	f840 3b04 	str.w	r3, [r0], #4
   1bd54:	f104 010a 	add.w	r1, r4, #10
   1bd58:	f006 fd10 	bl	2277c <memcpy>
   1bd5c:	2280      	movs	r2, #128	; 0x80
   1bd5e:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   1bd62:	f106 0084 	add.w	r0, r6, #132	; 0x84
   1bd66:	f006 fd09 	bl	2277c <memcpy>
   1bd6a:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   1bd6e:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   1bd72:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   1bd76:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   1bd7a:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   1bd7e:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   1bd82:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   1bd86:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1bd8a:	2300      	movs	r3, #0
   1bd8c:	f888 3000 	strb.w	r3, [r8]
   1bd90:	6838      	ldr	r0, [r7, #0]
   1bd92:	f005 f898 	bl	20ec6 <rpc_client_data_free>
   1bd96:	e045      	b.n	1be24 <rpc_gnss_event_handler+0x11c>
   1bd98:	f647 71ff 	movw	r1, #32767	; 0x7fff
   1bd9c:	428a      	cmp	r2, r1
   1bd9e:	bf0c      	ite	eq
   1bda0:	2203      	moveq	r2, #3
   1bda2:	2202      	movne	r2, #2
   1bda4:	701a      	strb	r2, [r3, #0]
   1bda6:	e7f3      	b.n	1bd90 <rpc_gnss_event_handler+0x88>
   1bda8:	4e40      	ldr	r6, [pc, #256]	; (1beac <rpc_gnss_event_handler+0x1a4>)
   1bdaa:	6833      	ldr	r3, [r6, #0]
   1bdac:	2b00      	cmp	r3, #0
   1bdae:	d0ef      	beq.n	1bd90 <rpc_gnss_event_handler+0x88>
   1bdb0:	f244 0204 	movw	r2, #16388	; 0x4004
   1bdb4:	4291      	cmp	r1, r2
   1bdb6:	d80b      	bhi.n	1bdd0 <rpc_gnss_event_handler+0xc8>
   1bdb8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1bdbc:	d9e8      	bls.n	1bd90 <rpc_gnss_event_handler+0x88>
   1bdbe:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   1bdc2:	3a02      	subs	r2, #2
   1bdc4:	2a02      	cmp	r2, #2
   1bdc6:	d80b      	bhi.n	1bde0 <rpc_gnss_event_handler+0xd8>
   1bdc8:	e8df f002 	tbb	[pc, r2]
   1bdcc:	4f45      	.short	0x4f45
   1bdce:	59          	.byte	0x59
   1bdcf:	00          	.byte	0x00
   1bdd0:	f244 1301 	movw	r3, #16641	; 0x4101
   1bdd4:	4299      	cmp	r1, r3
   1bdd6:	d003      	beq.n	1bde0 <rpc_gnss_event_handler+0xd8>
   1bdd8:	f244 2301 	movw	r3, #16897	; 0x4201
   1bddc:	4299      	cmp	r1, r3
   1bdde:	d1d7      	bne.n	1bd90 <rpc_gnss_event_handler+0x88>
   1bde0:	4f33      	ldr	r7, [pc, #204]	; (1beb0 <rpc_gnss_event_handler+0x1a8>)
   1bde2:	6838      	ldr	r0, [r7, #0]
   1bde4:	b108      	cbz	r0, 1bdea <rpc_gnss_event_handler+0xe2>
   1bde6:	f005 f86e 	bl	20ec6 <rpc_client_data_free>
   1bdea:	f244 2301 	movw	r3, #16897	; 0x4201
   1bdee:	429d      	cmp	r5, r3
   1bdf0:	4b30      	ldr	r3, [pc, #192]	; (1beb4 <rpc_gnss_event_handler+0x1ac>)
   1bdf2:	d11a      	bne.n	1be2a <rpc_gnss_event_handler+0x122>
   1bdf4:	2202      	movs	r2, #2
   1bdf6:	603c      	str	r4, [r7, #0]
   1bdf8:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   1bdfc:	701a      	strb	r2, [r3, #0]
   1bdfe:	07e3      	lsls	r3, r4, #31
   1be00:	d502      	bpl.n	1be08 <rpc_gnss_event_handler+0x100>
   1be02:	2002      	movs	r0, #2
   1be04:	6833      	ldr	r3, [r6, #0]
   1be06:	4798      	blx	r3
   1be08:	4d2b      	ldr	r5, [pc, #172]	; (1beb8 <rpc_gnss_event_handler+0x1b0>)
   1be0a:	f014 0418 	ands.w	r4, r4, #24
   1be0e:	6833      	ldr	r3, [r6, #0]
   1be10:	782a      	ldrb	r2, [r5, #0]
   1be12:	d01a      	beq.n	1be4a <rpc_gnss_event_handler+0x142>
   1be14:	b91a      	cbnz	r2, 1be1e <rpc_gnss_event_handler+0x116>
   1be16:	2005      	movs	r0, #5
   1be18:	4798      	blx	r3
   1be1a:	2301      	movs	r3, #1
   1be1c:	702b      	strb	r3, [r5, #0]
   1be1e:	2001      	movs	r0, #1
   1be20:	6833      	ldr	r3, [r6, #0]
   1be22:	4798      	blx	r3
   1be24:	2000      	movs	r0, #0
   1be26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be2a:	f244 1201 	movw	r2, #16641	; 0x4101
   1be2e:	4295      	cmp	r5, r2
   1be30:	bf0b      	itete	eq
   1be32:	2201      	moveq	r2, #1
   1be34:	2200      	movne	r2, #0
   1be36:	603c      	streq	r4, [r7, #0]
   1be38:	603c      	strne	r4, [r7, #0]
   1be3a:	bf0b      	itete	eq
   1be3c:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   1be40:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   1be44:	701a      	strbeq	r2, [r3, #0]
   1be46:	701a      	strbne	r2, [r3, #0]
   1be48:	e7d9      	b.n	1bdfe <rpc_gnss_event_handler+0xf6>
   1be4a:	2a00      	cmp	r2, #0
   1be4c:	d0e7      	beq.n	1be1e <rpc_gnss_event_handler+0x116>
   1be4e:	2006      	movs	r0, #6
   1be50:	4798      	blx	r3
   1be52:	702c      	strb	r4, [r5, #0]
   1be54:	e7e3      	b.n	1be1e <rpc_gnss_event_handler+0x116>
   1be56:	4c19      	ldr	r4, [pc, #100]	; (1bebc <rpc_gnss_event_handler+0x1b4>)
   1be58:	6820      	ldr	r0, [r4, #0]
   1be5a:	b108      	cbz	r0, 1be60 <rpc_gnss_event_handler+0x158>
   1be5c:	f005 f833 	bl	20ec6 <rpc_client_data_free>
   1be60:	683b      	ldr	r3, [r7, #0]
   1be62:	2003      	movs	r0, #3
   1be64:	6023      	str	r3, [r4, #0]
   1be66:	6833      	ldr	r3, [r6, #0]
   1be68:	e7db      	b.n	1be22 <rpc_gnss_event_handler+0x11a>
   1be6a:	4c15      	ldr	r4, [pc, #84]	; (1bec0 <rpc_gnss_event_handler+0x1b8>)
   1be6c:	6820      	ldr	r0, [r4, #0]
   1be6e:	b108      	cbz	r0, 1be74 <rpc_gnss_event_handler+0x16c>
   1be70:	f005 f829 	bl	20ec6 <rpc_client_data_free>
   1be74:	683b      	ldr	r3, [r7, #0]
   1be76:	2004      	movs	r0, #4
   1be78:	6023      	str	r3, [r4, #0]
   1be7a:	6833      	ldr	r3, [r6, #0]
   1be7c:	e7d1      	b.n	1be22 <rpc_gnss_event_handler+0x11a>
   1be7e:	7822      	ldrb	r2, [r4, #0]
   1be80:	2a03      	cmp	r2, #3
   1be82:	d885      	bhi.n	1bd90 <rpc_gnss_event_handler+0x88>
   1be84:	e8df f002 	tbb	[pc, r2]
   1be88:	09070502 	.word	0x09070502
   1be8c:	2007      	movs	r0, #7
   1be8e:	4798      	blx	r3
   1be90:	e77e      	b.n	1bd90 <rpc_gnss_event_handler+0x88>
   1be92:	2008      	movs	r0, #8
   1be94:	e7fb      	b.n	1be8e <rpc_gnss_event_handler+0x186>
   1be96:	2009      	movs	r0, #9
   1be98:	e7f9      	b.n	1be8e <rpc_gnss_event_handler+0x186>
   1be9a:	200a      	movs	r0, #10
   1be9c:	e7f7      	b.n	1be8e <rpc_gnss_event_handler+0x186>
   1be9e:	bf00      	nop
   1bea0:	2000f539 	.word	0x2000f539
   1bea4:	2000d648 	.word	0x2000d648
   1bea8:	2000d5c8 	.word	0x2000d5c8
   1beac:	2000d5b8 	.word	0x2000d5b8
   1beb0:	2000d5bc 	.word	0x2000d5bc
   1beb4:	2000f538 	.word	0x2000f538
   1beb8:	2000f537 	.word	0x2000f537
   1bebc:	2000d5c4 	.word	0x2000d5c4
   1bec0:	2000d5c0 	.word	0x2000d5c0

0001bec4 <full_dfu_ipc_irq_handler>:
   1bec4:	2301      	movs	r3, #1
   1bec6:	4a03      	ldr	r2, [pc, #12]	; (1bed4 <full_dfu_ipc_irq_handler+0x10>)
   1bec8:	6013      	str	r3, [r2, #0]
   1beca:	07c2      	lsls	r2, r0, #31
   1becc:	bf44      	itt	mi
   1bece:	4a02      	ldrmi	r2, [pc, #8]	; (1bed8 <full_dfu_ipc_irq_handler+0x14>)
   1bed0:	7013      	strbmi	r3, [r2, #0]
   1bed2:	4770      	bx	lr
   1bed4:	2000d5cc 	.word	0x2000d5cc
   1bed8:	2000f53a 	.word	0x2000f53a

0001bedc <modem_ipc_wait_for_event>:
   1bedc:	b538      	push	{r3, r4, r5, lr}
   1bede:	2300      	movs	r3, #0
   1bee0:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   1bee4:	4c0b      	ldr	r4, [pc, #44]	; (1bf14 <modem_ipc_wait_for_event+0x38>)
   1bee6:	6023      	str	r3, [r4, #0]
   1bee8:	6823      	ldr	r3, [r4, #0]
   1beea:	b92b      	cbnz	r3, 1bef8 <modem_ipc_wait_for_event+0x1c>
   1beec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bef0:	f004 fb59 	bl	205a6 <nrf_modem_os_busywait>
   1bef4:	3d01      	subs	r5, #1
   1bef6:	d1f7      	bne.n	1bee8 <modem_ipc_wait_for_event+0xc>
   1bef8:	6823      	ldr	r3, [r4, #0]
   1befa:	b913      	cbnz	r3, 1bf02 <modem_ipc_wait_for_event+0x26>
   1befc:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1bf00:	e006      	b.n	1bf10 <modem_ipc_wait_for_event+0x34>
   1bf02:	4b05      	ldr	r3, [pc, #20]	; (1bf18 <modem_ipc_wait_for_event+0x3c>)
   1bf04:	781b      	ldrb	r3, [r3, #0]
   1bf06:	2b01      	cmp	r3, #1
   1bf08:	bf14      	ite	ne
   1bf0a:	2000      	movne	r0, #0
   1bf0c:	f06f 0004 	mvneq.w	r0, #4
   1bf10:	bd38      	pop	{r3, r4, r5, pc}
   1bf12:	bf00      	nop
   1bf14:	2000d5cc 	.word	0x2000d5cc
   1bf18:	2000f53a 	.word	0x2000f53a

0001bf1c <nrf_modem_full_dfu_setup>:
   1bf1c:	2200      	movs	r2, #0
   1bf1e:	2300      	movs	r3, #0
   1bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf22:	4d2b      	ldr	r5, [pc, #172]	; (1bfd0 <nrf_modem_full_dfu_setup+0xb4>)
   1bf24:	4e2b      	ldr	r6, [pc, #172]	; (1bfd4 <nrf_modem_full_dfu_setup+0xb8>)
   1bf26:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1bf2a:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1bf2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1bf32:	4b29      	ldr	r3, [pc, #164]	; (1bfd8 <nrf_modem_full_dfu_setup+0xbc>)
   1bf34:	2400      	movs	r4, #0
   1bf36:	601a      	str	r2, [r3, #0]
   1bf38:	f100 031c 	add.w	r3, r0, #28
   1bf3c:	6033      	str	r3, [r6, #0]
   1bf3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1bf42:	6043      	str	r3, [r0, #4]
   1bf44:	231c      	movs	r3, #28
   1bf46:	7203      	strb	r3, [r0, #8]
   1bf48:	2320      	movs	r3, #32
   1bf4a:	2701      	movs	r7, #1
   1bf4c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1bf50:	7243      	strb	r3, [r0, #9]
   1bf52:	4b22      	ldr	r3, [pc, #136]	; (1bfdc <nrf_modem_full_dfu_setup+0xc0>)
   1bf54:	7004      	strb	r4, [r0, #0]
   1bf56:	7044      	strb	r4, [r0, #1]
   1bf58:	70c2      	strb	r2, [r0, #3]
   1bf5a:	7284      	strb	r4, [r0, #10]
   1bf5c:	72c4      	strb	r4, [r0, #11]
   1bf5e:	7087      	strb	r7, [r0, #2]
   1bf60:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1bf64:	702c      	strb	r4, [r5, #0]
   1bf66:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   1bf6a:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   1bf6e:	4b1c      	ldr	r3, [pc, #112]	; (1bfe0 <nrf_modem_full_dfu_setup+0xc4>)
   1bf70:	b093      	sub	sp, #76	; 0x4c
   1bf72:	4622      	mov	r2, r4
   1bf74:	4620      	mov	r0, r4
   1bf76:	491b      	ldr	r1, [pc, #108]	; (1bfe4 <nrf_modem_full_dfu_setup+0xc8>)
   1bf78:	701c      	strb	r4, [r3, #0]
   1bf7a:	f7fd fa0f 	bl	1939c <nrfx_ipc_init>
   1bf7e:	4621      	mov	r1, r4
   1bf80:	2240      	movs	r2, #64	; 0x40
   1bf82:	a801      	add	r0, sp, #4
   1bf84:	f006 fc07 	bl	22796 <memset>
   1bf88:	2302      	movs	r3, #2
   1bf8a:	9302      	str	r3, [sp, #8]
   1bf8c:	2304      	movs	r3, #4
   1bf8e:	930b      	str	r3, [sp, #44]	; 0x2c
   1bf90:	2305      	movs	r3, #5
   1bf92:	a801      	add	r0, sp, #4
   1bf94:	9311      	str	r3, [sp, #68]	; 0x44
   1bf96:	9709      	str	r7, [sp, #36]	; 0x24
   1bf98:	f7fd fa18 	bl	193cc <nrfx_ipc_config_load>
   1bf9c:	4b12      	ldr	r3, [pc, #72]	; (1bfe8 <nrf_modem_full_dfu_setup+0xcc>)
   1bf9e:	9400      	str	r4, [sp, #0]
   1bfa0:	6836      	ldr	r6, [r6, #0]
   1bfa2:	601c      	str	r4, [r3, #0]
   1bfa4:	681b      	ldr	r3, [r3, #0]
   1bfa6:	9300      	str	r3, [sp, #0]
   1bfa8:	9b00      	ldr	r3, [sp, #0]
   1bfaa:	f7ff ff97 	bl	1bedc <modem_ipc_wait_for_event>
   1bfae:	4604      	mov	r4, r0
   1bfb0:	b130      	cbz	r0, 1bfc0 <nrf_modem_full_dfu_setup+0xa4>
   1bfb2:	2303      	movs	r3, #3
   1bfb4:	702b      	strb	r3, [r5, #0]
   1bfb6:	f7fd fa29 	bl	1940c <nrfx_ipc_uninit>
   1bfba:	4620      	mov	r0, r4
   1bfbc:	b013      	add	sp, #76	; 0x4c
   1bfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bfc0:	6832      	ldr	r2, [r6, #0]
   1bfc2:	4b0a      	ldr	r3, [pc, #40]	; (1bfec <nrf_modem_full_dfu_setup+0xd0>)
   1bfc4:	429a      	cmp	r2, r3
   1bfc6:	d0f8      	beq.n	1bfba <nrf_modem_full_dfu_setup+0x9e>
   1bfc8:	f06f 0404 	mvn.w	r4, #4
   1bfcc:	e7f3      	b.n	1bfb6 <nrf_modem_full_dfu_setup+0x9a>
   1bfce:	bf00      	nop
   1bfd0:	2000cd80 	.word	0x2000cd80
   1bfd4:	2000d5d0 	.word	0x2000d5d0
   1bfd8:	2000d5d4 	.word	0x2000d5d4
   1bfdc:	4002a000 	.word	0x4002a000
   1bfe0:	2000f53a 	.word	0x2000f53a
   1bfe4:	0001bec5 	.word	0x0001bec5
   1bfe8:	40005610 	.word	0x40005610
   1bfec:	a5000001 	.word	0xa5000001

0001bff0 <packet_handler_create>:
   1bff0:	2801      	cmp	r0, #1
   1bff2:	b570      	push	{r4, r5, r6, lr}
   1bff4:	4604      	mov	r4, r0
   1bff6:	460e      	mov	r6, r1
   1bff8:	4615      	mov	r5, r2
   1bffa:	d00f      	beq.n	1c01c <packet_handler_create+0x2c>
   1bffc:	1e84      	subs	r4, r0, #2
   1bffe:	2c01      	cmp	r4, #1
   1c000:	d810      	bhi.n	1c024 <packet_handler_create+0x34>
   1c002:	2010      	movs	r0, #16
   1c004:	f7f9 fd9e 	bl	15b44 <nrf_modem_os_alloc>
   1c008:	2400      	movs	r4, #0
   1c00a:	b130      	cbz	r0, 1c01a <packet_handler_create+0x2a>
   1c00c:	2218      	movs	r2, #24
   1c00e:	4b08      	ldr	r3, [pc, #32]	; (1c030 <packet_handler_create+0x40>)
   1c010:	6085      	str	r5, [r0, #8]
   1c012:	fb02 3404 	mla	r4, r2, r4, r3
   1c016:	e9c0 4600 	strd	r4, r6, [r0]
   1c01a:	bd70      	pop	{r4, r5, r6, pc}
   1c01c:	2014      	movs	r0, #20
   1c01e:	f7f9 fd91 	bl	15b44 <nrf_modem_os_alloc>
   1c022:	e7f2      	b.n	1c00a <packet_handler_create+0x1a>
   1c024:	200c      	movs	r0, #12
   1c026:	f7f9 fd8d 	bl	15b44 <nrf_modem_os_alloc>
   1c02a:	2402      	movs	r4, #2
   1c02c:	e7ed      	b.n	1c00a <packet_handler_create+0x1a>
   1c02e:	bf00      	nop
   1c030:	00023404 	.word	0x00023404

0001c034 <modem_off>:
   1c034:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c036:	2501      	movs	r5, #1
   1c038:	4c07      	ldr	r4, [pc, #28]	; (1c058 <modem_off+0x24>)
   1c03a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1c03e:	6065      	str	r5, [r4, #4]
   1c040:	f004 fab1 	bl	205a6 <nrf_modem_os_busywait>
   1c044:	2300      	movs	r3, #0
   1c046:	6063      	str	r3, [r4, #4]
   1c048:	9301      	str	r3, [sp, #4]
   1c04a:	6025      	str	r5, [r4, #0]
   1c04c:	6823      	ldr	r3, [r4, #0]
   1c04e:	9301      	str	r3, [sp, #4]
   1c050:	9b01      	ldr	r3, [sp, #4]
   1c052:	b003      	add	sp, #12
   1c054:	bd30      	pop	{r4, r5, pc}
   1c056:	bf00      	nop
   1c058:	40005610 	.word	0x40005610

0001c05c <nrf_modem_init>:
   1c05c:	b570      	push	{r4, r5, r6, lr}
   1c05e:	460d      	mov	r5, r1
   1c060:	b300      	cbz	r0, 1c0a4 <nrf_modem_init+0x48>
   1c062:	4e15      	ldr	r6, [pc, #84]	; (1c0b8 <nrf_modem_init+0x5c>)
   1c064:	7832      	ldrb	r2, [r6, #0]
   1c066:	bb02      	cbnz	r2, 1c0aa <nrf_modem_init+0x4e>
   1c068:	2901      	cmp	r1, #1
   1c06a:	d113      	bne.n	1c094 <nrf_modem_init+0x38>
   1c06c:	68c1      	ldr	r1, [r0, #12]
   1c06e:	6842      	ldr	r2, [r0, #4]
   1c070:	440a      	add	r2, r1
   1c072:	6941      	ldr	r1, [r0, #20]
   1c074:	440a      	add	r2, r1
   1c076:	69c1      	ldr	r1, [r0, #28]
   1c078:	440a      	add	r2, r1
   1c07a:	f242 011b 	movw	r1, #8219	; 0x201b
   1c07e:	428a      	cmp	r2, r1
   1c080:	d916      	bls.n	1c0b0 <nrf_modem_init+0x54>
   1c082:	6800      	ldr	r0, [r0, #0]
   1c084:	f7ff ff4a 	bl	1bf1c <nrf_modem_full_dfu_setup>
   1c088:	4604      	mov	r4, r0
   1c08a:	b130      	cbz	r0, 1c09a <nrf_modem_init+0x3e>
   1c08c:	f7ff ffd2 	bl	1c034 <modem_off>
   1c090:	4620      	mov	r0, r4
   1c092:	bd70      	pop	{r4, r5, r6, pc}
   1c094:	f005 fc2d 	bl	218f2 <nrf_modem_platform_init>
   1c098:	e7f6      	b.n	1c088 <nrf_modem_init+0x2c>
   1c09a:	4b08      	ldr	r3, [pc, #32]	; (1c0bc <nrf_modem_init+0x60>)
   1c09c:	701d      	strb	r5, [r3, #0]
   1c09e:	2301      	movs	r3, #1
   1c0a0:	7033      	strb	r3, [r6, #0]
   1c0a2:	e7f5      	b.n	1c090 <nrf_modem_init+0x34>
   1c0a4:	f06f 040d 	mvn.w	r4, #13
   1c0a8:	e7f2      	b.n	1c090 <nrf_modem_init+0x34>
   1c0aa:	f04f 34ff 	mov.w	r4, #4294967295
   1c0ae:	e7ef      	b.n	1c090 <nrf_modem_init+0x34>
   1c0b0:	f06f 040b 	mvn.w	r4, #11
   1c0b4:	e7ec      	b.n	1c090 <nrf_modem_init+0x34>
   1c0b6:	bf00      	nop
   1c0b8:	2000f53b 	.word	0x2000f53b
   1c0bc:	2000f53c 	.word	0x2000f53c

0001c0c0 <nrf_modem_platform_af_method_table_get>:
   1c0c0:	2805      	cmp	r0, #5
   1c0c2:	b508      	push	{r3, lr}
   1c0c4:	d016      	beq.n	1c0f4 <nrf_modem_platform_af_method_table_get+0x34>
   1c0c6:	f020 0008 	bic.w	r0, r0, #8
   1c0ca:	2802      	cmp	r0, #2
   1c0cc:	d117      	bne.n	1c0fe <nrf_modem_platform_af_method_table_get+0x3e>
   1c0ce:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1c0d2:	d207      	bcs.n	1c0e4 <nrf_modem_platform_af_method_table_get+0x24>
   1c0d4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1c0d8:	d213      	bcs.n	1c102 <nrf_modem_platform_af_method_table_get+0x42>
   1c0da:	3a01      	subs	r2, #1
   1c0dc:	2a01      	cmp	r2, #1
   1c0de:	d804      	bhi.n	1c0ea <nrf_modem_platform_af_method_table_get+0x2a>
   1c0e0:	4809      	ldr	r0, [pc, #36]	; (1c108 <nrf_modem_platform_af_method_table_get+0x48>)
   1c0e2:	bd08      	pop	{r3, pc}
   1c0e4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1c0e8:	d00b      	beq.n	1c102 <nrf_modem_platform_af_method_table_get+0x42>
   1c0ea:	207b      	movs	r0, #123	; 0x7b
   1c0ec:	f004 fa5d 	bl	205aa <nrf_modem_os_errno_set>
   1c0f0:	2000      	movs	r0, #0
   1c0f2:	e7f6      	b.n	1c0e2 <nrf_modem_platform_af_method_table_get+0x22>
   1c0f4:	2903      	cmp	r1, #3
   1c0f6:	4805      	ldr	r0, [pc, #20]	; (1c10c <nrf_modem_platform_af_method_table_get+0x4c>)
   1c0f8:	bf18      	it	ne
   1c0fa:	2000      	movne	r0, #0
   1c0fc:	e7f1      	b.n	1c0e2 <nrf_modem_platform_af_method_table_get+0x22>
   1c0fe:	2016      	movs	r0, #22
   1c100:	e7f4      	b.n	1c0ec <nrf_modem_platform_af_method_table_get+0x2c>
   1c102:	4803      	ldr	r0, [pc, #12]	; (1c110 <nrf_modem_platform_af_method_table_get+0x50>)
   1c104:	e7ed      	b.n	1c0e2 <nrf_modem_platform_af_method_table_get+0x22>
   1c106:	bf00      	nop
   1c108:	0002344c 	.word	0x0002344c
   1c10c:	0002349c 	.word	0x0002349c
   1c110:	00023474 	.word	0x00023474

0001c114 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c114:	4b0e      	ldr	r3, [pc, #56]	; (1c150 <z_sys_init_run_level+0x3c>)
{
   1c116:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c118:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1c11c:	3001      	adds	r0, #1
   1c11e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1c122:	42a6      	cmp	r6, r4
   1c124:	d800      	bhi.n	1c128 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1c126:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1c128:	e9d4 3500 	ldrd	r3, r5, [r4]
   1c12c:	4628      	mov	r0, r5
   1c12e:	4798      	blx	r3
		if (dev != NULL) {
   1c130:	b165      	cbz	r5, 1c14c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1c132:	68eb      	ldr	r3, [r5, #12]
   1c134:	b130      	cbz	r0, 1c144 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1c136:	2800      	cmp	r0, #0
   1c138:	bfb8      	it	lt
   1c13a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1c13c:	28ff      	cmp	r0, #255	; 0xff
   1c13e:	bfa8      	it	ge
   1c140:	20ff      	movge	r0, #255	; 0xff
   1c142:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1c144:	785a      	ldrb	r2, [r3, #1]
   1c146:	f042 0201 	orr.w	r2, r2, #1
   1c14a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c14c:	3408      	adds	r4, #8
   1c14e:	e7e8      	b.n	1c122 <z_sys_init_run_level+0xe>
   1c150:	000234c4 	.word	0x000234c4

0001c154 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1c154:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1c156:	4605      	mov	r5, r0
   1c158:	b910      	cbnz	r0, 1c160 <z_impl_device_get_binding+0xc>
		return NULL;
   1c15a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1c15c:	4620      	mov	r0, r4
   1c15e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1c160:	7803      	ldrb	r3, [r0, #0]
   1c162:	2b00      	cmp	r3, #0
   1c164:	d0f9      	beq.n	1c15a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c166:	4a0f      	ldr	r2, [pc, #60]	; (1c1a4 <z_impl_device_get_binding+0x50>)
   1c168:	4c0f      	ldr	r4, [pc, #60]	; (1c1a8 <z_impl_device_get_binding+0x54>)
   1c16a:	4616      	mov	r6, r2
   1c16c:	4294      	cmp	r4, r2
   1c16e:	d108      	bne.n	1c182 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c170:	4c0d      	ldr	r4, [pc, #52]	; (1c1a8 <z_impl_device_get_binding+0x54>)
   1c172:	42b4      	cmp	r4, r6
   1c174:	d0f1      	beq.n	1c15a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c176:	4620      	mov	r0, r4
   1c178:	f005 fd50 	bl	21c1c <z_device_ready>
   1c17c:	b950      	cbnz	r0, 1c194 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c17e:	3418      	adds	r4, #24
   1c180:	e7f7      	b.n	1c172 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1c182:	4620      	mov	r0, r4
   1c184:	f005 fd4a 	bl	21c1c <z_device_ready>
   1c188:	b110      	cbz	r0, 1c190 <z_impl_device_get_binding+0x3c>
   1c18a:	6823      	ldr	r3, [r4, #0]
   1c18c:	42ab      	cmp	r3, r5
   1c18e:	d0e5      	beq.n	1c15c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c190:	3418      	adds	r4, #24
   1c192:	e7eb      	b.n	1c16c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c194:	4628      	mov	r0, r5
   1c196:	6821      	ldr	r1, [r4, #0]
   1c198:	f7f5 f800 	bl	1119c <strcmp>
   1c19c:	2800      	cmp	r0, #0
   1c19e:	d1ee      	bne.n	1c17e <z_impl_device_get_binding+0x2a>
   1c1a0:	e7dc      	b.n	1c15c <z_impl_device_get_binding+0x8>
   1c1a2:	bf00      	nop
   1c1a4:	00022dc4 	.word	0x00022dc4
   1c1a8:	00022d34 	.word	0x00022d34

0001c1ac <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1c1ac:	4b01      	ldr	r3, [pc, #4]	; (1c1b4 <z_impl_z_errno+0x8>)
   1c1ae:	6898      	ldr	r0, [r3, #8]
}
   1c1b0:	3070      	adds	r0, #112	; 0x70
   1c1b2:	4770      	bx	lr
   1c1b4:	2000d5d8 	.word	0x2000d5d8

0001c1b8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c1b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c1bc:	4606      	mov	r6, r0
   1c1be:	460f      	mov	r7, r1
	__asm__ volatile(
   1c1c0:	f04f 0320 	mov.w	r3, #32
   1c1c4:	f3ef 8811 	mrs	r8, BASEPRI
   1c1c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c1cc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1c1d0:	f000 fff8 	bl	1d1c4 <z_impl_z_current_get>
   1c1d4:	4c21      	ldr	r4, [pc, #132]	; (1c25c <z_fatal_error+0xa4>)
   1c1d6:	4b22      	ldr	r3, [pc, #136]	; (1c260 <z_fatal_error+0xa8>)
   1c1d8:	2e04      	cmp	r6, #4
   1c1da:	eba4 0403 	sub.w	r4, r4, r3
   1c1de:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1c1e2:	bf98      	it	ls
   1c1e4:	4a1f      	ldrls	r2, [pc, #124]	; (1c264 <z_fatal_error+0xac>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c1e6:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1c1ea:	f044 0301 	orr.w	r3, r4, #1
   1c1ee:	4605      	mov	r5, r0
	switch (reason) {
   1c1f0:	bf94      	ite	ls
   1c1f2:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c1f6:	4a1c      	ldrhi	r2, [pc, #112]	; (1c268 <z_fatal_error+0xb0>)
   1c1f8:	f8ad 3000 	strh.w	r3, [sp]
   1c1fc:	4631      	mov	r1, r6
   1c1fe:	2300      	movs	r3, #0
   1c200:	481a      	ldr	r0, [pc, #104]	; (1c26c <z_fatal_error+0xb4>)
   1c202:	f003 f83d 	bl	1f280 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1c206:	b147      	cbz	r7, 1c21a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1c208:	69fb      	ldr	r3, [r7, #28]
   1c20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1c20e:	b123      	cbz	r3, 1c21a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   1c210:	4817      	ldr	r0, [pc, #92]	; (1c270 <z_fatal_error+0xb8>)
   1c212:	f044 0101 	orr.w	r1, r4, #1
   1c216:	f002 fff9 	bl	1f20c <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1c21a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1c21e:	b12d      	cbz	r5, 1c22c <z_fatal_error+0x74>
   1c220:	4628      	mov	r0, r5
   1c222:	f005 fdc9 	bl	21db8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1c226:	b108      	cbz	r0, 1c22c <z_fatal_error+0x74>
   1c228:	7803      	ldrb	r3, [r0, #0]
   1c22a:	b903      	cbnz	r3, 1c22e <z_fatal_error+0x76>
		thread_name = "unknown";
   1c22c:	4811      	ldr	r0, [pc, #68]	; (1c274 <z_fatal_error+0xbc>)
   1c22e:	f7f6 fdfd 	bl	12e2c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1c232:	4623      	mov	r3, r4
   1c234:	4602      	mov	r2, r0
   1c236:	4629      	mov	r1, r5
   1c238:	480f      	ldr	r0, [pc, #60]	; (1c278 <z_fatal_error+0xc0>)
   1c23a:	f003 f808 	bl	1f24e <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1c23e:	4639      	mov	r1, r7
   1c240:	4630      	mov	r0, r6
   1c242:	f7fc f8cd 	bl	183e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1c246:	f388 8811 	msr	BASEPRI, r8
   1c24a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1c24e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1c250:	b002      	add	sp, #8
   1c252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c256:	f7f8 b8c9 	b.w	143ec <z_impl_k_thread_abort>
   1c25a:	bf00      	nop
   1c25c:	00023060 	.word	0x00023060
   1c260:	00022fd8 	.word	0x00022fd8
   1c264:	000234dc 	.word	0x000234dc
   1c268:	000251b0 	.word	0x000251b0
   1c26c:	000251c6 	.word	0x000251c6
   1c270:	000251ee 	.word	0x000251ee
   1c274:	000251be 	.word	0x000251be
   1c278:	0002520f 	.word	0x0002520f

0001c27c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1c27c:	b510      	push	{r4, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1c27e:	2490      	movs	r4, #144	; 0x90
   1c280:	4b0f      	ldr	r3, [pc, #60]	; (1c2c0 <init_idle_thread+0x44>)
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1c282:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   1c284:	fb04 3400 	mla	r4, r4, r0, r3
	z_setup_new_thread(thread, stack,
   1c288:	2300      	movs	r3, #0
{
   1c28a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1c28c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c290:	220f      	movs	r2, #15
   1c292:	9301      	str	r3, [sp, #4]
   1c294:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c298:	2318      	movs	r3, #24
   1c29a:	4a0a      	ldr	r2, [pc, #40]	; (1c2c4 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   1c29c:	490a      	ldr	r1, [pc, #40]	; (1c2c8 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c29e:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   1c2a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1c2a6:	9300      	str	r3, [sp, #0]
   1c2a8:	fb02 1100 	mla	r1, r2, r0, r1
   1c2ac:	4b07      	ldr	r3, [pc, #28]	; (1c2cc <init_idle_thread+0x50>)
   1c2ae:	4620      	mov	r0, r4
   1c2b0:	f000 f90a 	bl	1c4c8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c2b4:	7b63      	ldrb	r3, [r4, #13]
   1c2b6:	f023 0304 	bic.w	r3, r3, #4
   1c2ba:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1c2bc:	b006      	add	sp, #24
   1c2be:	bd10      	pop	{r4, pc}
   1c2c0:	2000cd98 	.word	0x2000cd98
   1c2c4:	2000d5d8 	.word	0x2000d5d8
   1c2c8:	20013dc8 	.word	0x20013dc8
   1c2cc:	0001c641 	.word	0x0001c641

0001c2d0 <bg_thread_main>:
	z_sys_post_kernel = true;
   1c2d0:	2201      	movs	r2, #1
{
   1c2d2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1c2d4:	4b09      	ldr	r3, [pc, #36]	; (1c2fc <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c2d6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1c2d8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c2da:	f7ff ff1b 	bl	1c114 <z_sys_init_run_level>
	boot_banner();
   1c2de:	f001 faad 	bl	1d83c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1c2e2:	2003      	movs	r0, #3
   1c2e4:	f7ff ff16 	bl	1c114 <z_sys_init_run_level>
	z_init_static_threads();
   1c2e8:	f000 f94c 	bl	1c584 <z_init_static_threads>
	main();
   1c2ec:	f002 fb0c 	bl	1e908 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1c2f0:	4a03      	ldr	r2, [pc, #12]	; (1c300 <bg_thread_main+0x30>)
   1c2f2:	7b13      	ldrb	r3, [r2, #12]
   1c2f4:	f023 0301 	bic.w	r3, r3, #1
   1c2f8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1c2fa:	bd08      	pop	{r3, pc}
   1c2fc:	2000f53d 	.word	0x2000f53d
   1c300:	2000ce28 	.word	0x2000ce28

0001c304 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1c304:	4802      	ldr	r0, [pc, #8]	; (1c310 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1c306:	4a03      	ldr	r2, [pc, #12]	; (1c314 <z_bss_zero+0x10>)
   1c308:	2100      	movs	r1, #0
   1c30a:	1a12      	subs	r2, r2, r0
   1c30c:	f006 ba43 	b.w	22796 <memset>
   1c310:	2000c910 	.word	0x2000c910
   1c314:	2000f544 	.word	0x2000f544

0001c318 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1c318:	b580      	push	{r7, lr}
   1c31a:	b0aa      	sub	sp, #168	; 0xa8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1c31c:	f7f6 fcd6 	bl	12ccc <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1c320:	4b2f      	ldr	r3, [pc, #188]	; (1c3e0 <z_cstart+0xc8>)
	uint32_t msp =
   1c322:	f503 6800 	add.w	r8, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1c326:	f388 8808 	msr	MSP, r8
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1c32a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c32e:	2400      	movs	r4, #0
   1c330:	23e0      	movs	r3, #224	; 0xe0
   1c332:	4d2c      	ldr	r5, [pc, #176]	; (1c3e4 <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1c334:	4e2c      	ldr	r6, [pc, #176]	; (1c3e8 <z_cstart+0xd0>)
   1c336:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1c33a:	77ec      	strb	r4, [r5, #31]
   1c33c:	762c      	strb	r4, [r5, #24]
   1c33e:	766c      	strb	r4, [r5, #25]
   1c340:	76ac      	strb	r4, [r5, #26]
   1c342:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1c346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c348:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1c3fc <z_cstart+0xe4>
   1c34c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1c350:	626b      	str	r3, [r5, #36]	; 0x24
   1c352:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1c356:	f7f7 fffd 	bl	14354 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1c35a:	f7f7 fc4d 	bl	13bf8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1c35e:	f04f 33ff 	mov.w	r3, #4294967295
   1c362:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1c364:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1c366:	f7f8 f9cd 	bl	14704 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1c36a:	f7f8 f851 	bl	14410 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c36e:	f240 1301 	movw	r3, #257	; 0x101
   1c372:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1c376:	ab06      	add	r3, sp, #24
   1c378:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1c37a:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1c37e:	f005 fc4c 	bl	21c1a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1c382:	4620      	mov	r0, r4
   1c384:	f7ff fec6 	bl	1c114 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1c388:	2001      	movs	r0, #1
   1c38a:	f7ff fec3 	bl	1c114 <z_sys_init_run_level>
	z_sched_init();
   1c38e:	f000 fe65 	bl	1d05c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c392:	4b16      	ldr	r3, [pc, #88]	; (1c3ec <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   1c394:	4d16      	ldr	r5, [pc, #88]	; (1c3f0 <z_cstart+0xd8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c396:	9305      	str	r3, [sp, #20]
   1c398:	2301      	movs	r3, #1
   1c39a:	4916      	ldr	r1, [pc, #88]	; (1c3f4 <z_cstart+0xdc>)
   1c39c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1c3a0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1c3a4:	4628      	mov	r0, r5
   1c3a6:	464b      	mov	r3, r9
   1c3a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1c3ac:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
   1c3ae:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c3b0:	f000 f88a 	bl	1c4c8 <z_setup_new_thread>
   1c3b4:	4607      	mov	r7, r0
   1c3b6:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1c3b8:	4628      	mov	r0, r5
   1c3ba:	f022 0204 	bic.w	r2, r2, #4
   1c3be:	736a      	strb	r2, [r5, #13]
   1c3c0:	f005 fe53 	bl	2206a <z_ready_thread>
		init_idle_thread(i);
   1c3c4:	4620      	mov	r0, r4
   1c3c6:	f7ff ff59 	bl	1c27c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1c3ca:	4b0b      	ldr	r3, [pc, #44]	; (1c3f8 <z_cstart+0xe0>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c3cc:	464a      	mov	r2, r9
   1c3ce:	4639      	mov	r1, r7
   1c3d0:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1c3d2:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
   1c3d4:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1c3d6:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c3da:	f7f7 fd43 	bl	13e64 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1c3de:	bf00      	nop
   1c3e0:	20013f08 	.word	0x20013f08
   1c3e4:	e000ed00 	.word	0xe000ed00
   1c3e8:	2000d5d8 	.word	0x2000d5d8
   1c3ec:	00025271 	.word	0x00025271
   1c3f0:	2000ce28 	.word	0x2000ce28
   1c3f4:	20012dc8 	.word	0x20012dc8
   1c3f8:	2000cd98 	.word	0x2000cd98
   1c3fc:	0001c2d1 	.word	0x0001c2d1

0001c400 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1c400:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c402:	4c06      	ldr	r4, [pc, #24]	; (1c41c <statics_init+0x1c>)
   1c404:	4d06      	ldr	r5, [pc, #24]	; (1c420 <statics_init+0x20>)
   1c406:	42ac      	cmp	r4, r5
   1c408:	d301      	bcc.n	1c40e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1c40a:	2000      	movs	r0, #0
   1c40c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1c40e:	4620      	mov	r0, r4
   1c410:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1c414:	f005 fc0c 	bl	21c30 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c418:	3414      	adds	r4, #20
   1c41a:	e7f4      	b.n	1c406 <statics_init+0x6>
   1c41c:	2000c7dc 	.word	0x2000c7dc
   1c420:	2000c818 	.word	0x2000c818

0001c424 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1c424:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c426:	4b0e      	ldr	r3, [pc, #56]	; (1c460 <init_mem_slab_module+0x3c>)
   1c428:	4c0e      	ldr	r4, [pc, #56]	; (1c464 <init_mem_slab_module+0x40>)
   1c42a:	42a3      	cmp	r3, r4
   1c42c:	d301      	bcc.n	1c432 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1c42e:	2000      	movs	r0, #0
	return rc;
}
   1c430:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1c432:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1c436:	ea41 0200 	orr.w	r2, r1, r0
   1c43a:	f012 0203 	ands.w	r2, r2, #3
   1c43e:	d10b      	bne.n	1c458 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1c440:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1c442:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c444:	42aa      	cmp	r2, r5
   1c446:	d101      	bne.n	1c44c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c448:	331c      	adds	r3, #28
   1c44a:	e7ee      	b.n	1c42a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1c44c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c44e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1c450:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1c452:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1c454:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1c456:	e7f5      	b.n	1c444 <init_mem_slab_module+0x20>
		return -EINVAL;
   1c458:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1c45c:	e7e8      	b.n	1c430 <init_mem_slab_module+0xc>
   1c45e:	bf00      	nop
   1c460:	2000c7dc 	.word	0x2000c7dc
   1c464:	2000c7dc 	.word	0x2000c7dc

0001c468 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c468:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1c46a:	460c      	mov	r4, r1
   1c46c:	4616      	mov	r6, r2
   1c46e:	461f      	mov	r7, r3
	__asm__ volatile(
   1c470:	f04f 0320 	mov.w	r3, #32
   1c474:	f3ef 8111 	mrs	r1, BASEPRI
   1c478:	f383 8812 	msr	BASEPRI_MAX, r3
   1c47c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1c480:	6943      	ldr	r3, [r0, #20]
   1c482:	b15b      	cbz	r3, 1c49c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1c484:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1c486:	681b      	ldr	r3, [r3, #0]
   1c488:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1c48a:	6983      	ldr	r3, [r0, #24]
   1c48c:	3301      	adds	r3, #1
   1c48e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1c490:	2000      	movs	r0, #0
	__asm__ volatile(
   1c492:	f381 8811 	msr	BASEPRI, r1
   1c496:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1c49a:	e011      	b.n	1c4c0 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1c49c:	ea56 0207 	orrs.w	r2, r6, r7
   1c4a0:	d103      	bne.n	1c4aa <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1c4a2:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1c4a6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1c4a8:	e7f3      	b.n	1c492 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1c4aa:	4602      	mov	r2, r0
   1c4ac:	e9cd 6700 	strd	r6, r7, [sp]
   1c4b0:	3008      	adds	r0, #8
   1c4b2:	f000 fd25 	bl	1cf00 <z_pend_curr>
		if (result == 0) {
   1c4b6:	b918      	cbnz	r0, 1c4c0 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1c4b8:	4b02      	ldr	r3, [pc, #8]	; (1c4c4 <k_mem_slab_alloc+0x5c>)
   1c4ba:	689b      	ldr	r3, [r3, #8]
   1c4bc:	695b      	ldr	r3, [r3, #20]
   1c4be:	6023      	str	r3, [r4, #0]
}
   1c4c0:	b002      	add	sp, #8
   1c4c2:	bdd0      	pop	{r4, r6, r7, pc}
   1c4c4:	2000d5d8 	.word	0x2000d5d8

0001c4c8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1c4c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1c4cc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1c4ce:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1c4d2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1c4d4:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1c4d6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   1c4da:	2500      	movs	r5, #0
{
   1c4dc:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   1c4de:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1c4e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1c4e2:	e9c0 5506 	strd	r5, r5, [r0, #24]
   1c4e6:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c4e8:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c4ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c4ec:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   1c4f0:	e9c0 161d 	strd	r1, r6, [r0, #116]	; 0x74
	thread_base->pended_on = NULL;
   1c4f4:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1c4f6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1c4f8:	67c5      	str	r5, [r0, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c4fa:	9202      	str	r2, [sp, #8]
   1c4fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   1c4fe:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c502:	9201      	str	r2, [sp, #4]
   1c504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c506:	9200      	str	r2, [sp, #0]
   1c508:	4642      	mov	r2, r8
   1c50a:	f7f7 fc8f 	bl	13e2c <arch_new_thread>
	if (!_current) {
   1c50e:	4b06      	ldr	r3, [pc, #24]	; (1c528 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1c510:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1c512:	689b      	ldr	r3, [r3, #8]
   1c514:	b10b      	cbz	r3, 1c51a <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   1c516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1c51a:	4640      	mov	r0, r8
   1c51c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   1c520:	b004      	add	sp, #16
   1c522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c526:	bf00      	nop
   1c528:	2000d5d8 	.word	0x2000d5d8

0001c52c <z_impl_k_thread_create>:
{
   1c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c52e:	2500      	movs	r5, #0
{
   1c530:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c532:	9505      	str	r5, [sp, #20]
   1c534:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   1c536:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c53a:	9504      	str	r5, [sp, #16]
   1c53c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1c53e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c540:	9503      	str	r5, [sp, #12]
   1c542:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c544:	9502      	str	r5, [sp, #8]
   1c546:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c548:	9501      	str	r5, [sp, #4]
   1c54a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1c54c:	9500      	str	r5, [sp, #0]
   1c54e:	f7ff ffbb 	bl	1c4c8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1c552:	1c7b      	adds	r3, r7, #1
   1c554:	bf08      	it	eq
   1c556:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1c55a:	d005      	beq.n	1c568 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c55c:	ea56 0307 	orrs.w	r3, r6, r7
   1c560:	d105      	bne.n	1c56e <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1c562:	4620      	mov	r0, r4
   1c564:	f000 fc70 	bl	1ce48 <z_sched_start>
}
   1c568:	4620      	mov	r0, r4
   1c56a:	b007      	add	sp, #28
   1c56c:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c56e:	4632      	mov	r2, r6
   1c570:	463b      	mov	r3, r7
   1c572:	4903      	ldr	r1, [pc, #12]	; (1c580 <z_impl_k_thread_create+0x54>)
   1c574:	f104 0018 	add.w	r0, r4, #24
   1c578:	f000 ff08 	bl	1d38c <z_add_timeout>
   1c57c:	e7f4      	b.n	1c568 <z_impl_k_thread_create+0x3c>
   1c57e:	bf00      	nop
   1c580:	0002208b 	.word	0x0002208b

0001c584 <z_init_static_threads>:
{
   1c584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1c588:	4e2a      	ldr	r6, [pc, #168]	; (1c634 <z_init_static_threads+0xb0>)
   1c58a:	4d2b      	ldr	r5, [pc, #172]	; (1c638 <z_init_static_threads+0xb4>)
   1c58c:	46b0      	mov	r8, r6
{
   1c58e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1c590:	42b5      	cmp	r5, r6
   1c592:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1c596:	d310      	bcc.n	1c5ba <z_init_static_threads+0x36>
	k_sched_lock();
   1c598:	f000 fb6a 	bl	1cc70 <k_sched_lock>
   1c59c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1c5a0:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c5a4:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1c5a6:	4c24      	ldr	r4, [pc, #144]	; (1c638 <z_init_static_threads+0xb4>)
   1c5a8:	f8df a090 	ldr.w	sl, [pc, #144]	; 1c63c <z_init_static_threads+0xb8>
   1c5ac:	4544      	cmp	r4, r8
   1c5ae:	d321      	bcc.n	1c5f4 <z_init_static_threads+0x70>
}
   1c5b0:	b006      	add	sp, #24
   1c5b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1c5b6:	f000 bd35 	b.w	1d024 <k_sched_unlock>
		z_setup_new_thread(
   1c5ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c5be:	9305      	str	r3, [sp, #20]
   1c5c0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c5c4:	9304      	str	r3, [sp, #16]
   1c5c6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c5ca:	9303      	str	r3, [sp, #12]
   1c5cc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1c5d0:	9302      	str	r3, [sp, #8]
   1c5d2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1c5d6:	9301      	str	r3, [sp, #4]
   1c5d8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1c5dc:	9300      	str	r3, [sp, #0]
   1c5de:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1c5e2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1c5e6:	f7ff ff6f 	bl	1c4c8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1c5ea:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1c5ee:	655d      	str	r5, [r3, #84]	; 0x54
   1c5f0:	4625      	mov	r5, r4
   1c5f2:	e7cd      	b.n	1c590 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1c5f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c5f6:	1c5a      	adds	r2, r3, #1
   1c5f8:	d00d      	beq.n	1c616 <z_init_static_threads+0x92>
   1c5fa:	4630      	mov	r0, r6
   1c5fc:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   1c5fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c602:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c606:	42b9      	cmp	r1, r7
   1c608:	bf08      	it	eq
   1c60a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1c60c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c60e:	d104      	bne.n	1c61a <z_init_static_threads+0x96>
	z_sched_start(thread);
   1c610:	4628      	mov	r0, r5
   1c612:	f000 fc19 	bl	1ce48 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c616:	3430      	adds	r4, #48	; 0x30
   1c618:	e7c8      	b.n	1c5ac <z_init_static_threads+0x28>
   1c61a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c61e:	2300      	movs	r3, #0
   1c620:	f7f4 fc3e 	bl	10ea0 <__aeabi_uldivmod>
   1c624:	4602      	mov	r2, r0
   1c626:	460b      	mov	r3, r1
   1c628:	f105 0018 	add.w	r0, r5, #24
   1c62c:	4651      	mov	r1, sl
   1c62e:	f000 fead 	bl	1d38c <z_add_timeout>
   1c632:	e7f0      	b.n	1c616 <z_init_static_threads+0x92>
   1c634:	2000c7dc 	.word	0x2000c7dc
   1c638:	2000c71c 	.word	0x2000c71c
   1c63c:	0002208b 	.word	0x0002208b

0001c640 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1c640:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1c642:	4c09      	ldr	r4, [pc, #36]	; (1c668 <idle+0x28>)
	__asm__ volatile(
   1c644:	f04f 0220 	mov.w	r2, #32
   1c648:	f3ef 8311 	mrs	r3, BASEPRI
   1c64c:	f382 8812 	msr	BASEPRI_MAX, r2
   1c650:	f3bf 8f6f 	isb	sy
   1c654:	f005 fdd9 	bl	2220a <z_get_next_timeout_expiry>
   1c658:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1c65a:	f7f7 fa41 	bl	13ae0 <pm_system_suspend>
   1c65e:	2800      	cmp	r0, #0
   1c660:	d1f0      	bne.n	1c644 <idle+0x4>
	arch_cpu_idle();
   1c662:	f7f7 facf 	bl	13c04 <arch_cpu_idle>
}
   1c666:	e7ed      	b.n	1c644 <idle+0x4>
   1c668:	2000d5d8 	.word	0x2000d5d8

0001c66c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1c66c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c670:	4604      	mov	r4, r0
   1c672:	4616      	mov	r6, r2
   1c674:	461f      	mov	r7, r3
   1c676:	f04f 0320 	mov.w	r3, #32
   1c67a:	f3ef 8811 	mrs	r8, BASEPRI
   1c67e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c682:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1c686:	68c3      	ldr	r3, [r0, #12]
   1c688:	4a35      	ldr	r2, [pc, #212]	; (1c760 <z_impl_k_mutex_lock+0xf4>)
   1c68a:	b16b      	cbz	r3, 1c6a8 <z_impl_k_mutex_lock+0x3c>
   1c68c:	6880      	ldr	r0, [r0, #8]
   1c68e:	6891      	ldr	r1, [r2, #8]
   1c690:	4288      	cmp	r0, r1
   1c692:	d019      	beq.n	1c6c8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1c694:	ea56 0307 	orrs.w	r3, r6, r7
   1c698:	d118      	bne.n	1c6cc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1c69a:	f388 8811 	msr	BASEPRI, r8
   1c69e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1c6a2:	f06f 000f 	mvn.w	r0, #15
   1c6a6:	e00c      	b.n	1c6c2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1c6a8:	6891      	ldr	r1, [r2, #8]
   1c6aa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1c6ae:	3301      	adds	r3, #1
   1c6b0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1c6b2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1c6b4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1c6b6:	60a3      	str	r3, [r4, #8]
   1c6b8:	f388 8811 	msr	BASEPRI, r8
   1c6bc:	f3bf 8f6f 	isb	sy
		return 0;
   1c6c0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1c6c2:	b002      	add	sp, #8
   1c6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1c6c8:	6921      	ldr	r1, [r4, #16]
   1c6ca:	e7f0      	b.n	1c6ae <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1c6cc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1c6d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1c6d4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1c6d8:	4299      	cmp	r1, r3
   1c6da:	bfa8      	it	ge
   1c6dc:	4619      	movge	r1, r3
   1c6de:	4291      	cmp	r1, r2
   1c6e0:	bfb8      	it	lt
   1c6e2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1c6e4:	428b      	cmp	r3, r1
   1c6e6:	dd2f      	ble.n	1c748 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   1c6e8:	f000 fc1e 	bl	1cf28 <z_set_prio>
   1c6ec:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1c6ee:	4622      	mov	r2, r4
   1c6f0:	4641      	mov	r1, r8
   1c6f2:	e9cd 6700 	strd	r6, r7, [sp]
   1c6f6:	481b      	ldr	r0, [pc, #108]	; (1c764 <z_impl_k_mutex_lock+0xf8>)
   1c6f8:	f000 fc02 	bl	1cf00 <z_pend_curr>
	if (got_mutex == 0) {
   1c6fc:	2800      	cmp	r0, #0
   1c6fe:	d0e0      	beq.n	1c6c2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1c700:	f04f 0320 	mov.w	r3, #32
   1c704:	f3ef 8611 	mrs	r6, BASEPRI
   1c708:	f383 8812 	msr	BASEPRI_MAX, r3
   1c70c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1c710:	6823      	ldr	r3, [r4, #0]
   1c712:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c714:	429c      	cmp	r4, r3
   1c716:	d00a      	beq.n	1c72e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1c718:	b14b      	cbz	r3, 1c72e <z_impl_k_mutex_lock+0xc2>
   1c71a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1c71e:	4299      	cmp	r1, r3
   1c720:	bfa8      	it	ge
   1c722:	4619      	movge	r1, r3
   1c724:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1c728:	4299      	cmp	r1, r3
   1c72a:	bfb8      	it	lt
   1c72c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c72e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c730:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c734:	4299      	cmp	r1, r3
   1c736:	d109      	bne.n	1c74c <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   1c738:	b16d      	cbz	r5, 1c756 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   1c73a:	4631      	mov	r1, r6
   1c73c:	4809      	ldr	r0, [pc, #36]	; (1c764 <z_impl_k_mutex_lock+0xf8>)
   1c73e:	f000 fa85 	bl	1cc4c <z_reschedule>
	return -EAGAIN;
   1c742:	f06f 000a 	mvn.w	r0, #10
   1c746:	e7bc      	b.n	1c6c2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1c748:	2500      	movs	r5, #0
   1c74a:	e7d0      	b.n	1c6ee <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   1c74c:	f000 fbec 	bl	1cf28 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c750:	2800      	cmp	r0, #0
   1c752:	d1f2      	bne.n	1c73a <z_impl_k_mutex_lock+0xce>
   1c754:	e7f0      	b.n	1c738 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1c756:	f386 8811 	msr	BASEPRI, r6
   1c75a:	f3bf 8f6f 	isb	sy
   1c75e:	e7f0      	b.n	1c742 <z_impl_k_mutex_lock+0xd6>
   1c760:	2000d5d8 	.word	0x2000d5d8
   1c764:	2000f53e 	.word	0x2000f53e

0001c768 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1c768:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1c76a:	6883      	ldr	r3, [r0, #8]
{
   1c76c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1c76e:	2b00      	cmp	r3, #0
   1c770:	d037      	beq.n	1c7e2 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1c772:	4a1f      	ldr	r2, [pc, #124]	; (1c7f0 <z_impl_k_mutex_unlock+0x88>)
   1c774:	6892      	ldr	r2, [r2, #8]
   1c776:	4293      	cmp	r3, r2
   1c778:	d136      	bne.n	1c7e8 <z_impl_k_mutex_unlock+0x80>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1c77a:	7bda      	ldrb	r2, [r3, #15]
   1c77c:	3a01      	subs	r2, #1
   1c77e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1c780:	68c3      	ldr	r3, [r0, #12]
   1c782:	2b01      	cmp	r3, #1
   1c784:	d905      	bls.n	1c792 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1c786:	3b01      	subs	r3, #1
   1c788:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1c78a:	f000 fc4b 	bl	1d024 <k_sched_unlock>

	return 0;
   1c78e:	2000      	movs	r0, #0
}
   1c790:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c792:	f04f 0320 	mov.w	r3, #32
   1c796:	f3ef 8511 	mrs	r5, BASEPRI
   1c79a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c79e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1c7a2:	6901      	ldr	r1, [r0, #16]
   1c7a4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c7a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c7aa:	4299      	cmp	r1, r3
   1c7ac:	d001      	beq.n	1c7b2 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1c7ae:	f000 fbbb 	bl	1cf28 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1c7b2:	4620      	mov	r0, r4
   1c7b4:	f005 fccd 	bl	22152 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1c7b8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1c7ba:	b160      	cbz	r0, 1c7d6 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1c7bc:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1c7c0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1c7c2:	2200      	movs	r2, #0
   1c7c4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   1c7c8:	f005 fc4f 	bl	2206a <z_ready_thread>
		z_reschedule(&lock, key);
   1c7cc:	4629      	mov	r1, r5
   1c7ce:	4809      	ldr	r0, [pc, #36]	; (1c7f4 <z_impl_k_mutex_unlock+0x8c>)
   1c7d0:	f000 fa3c 	bl	1cc4c <z_reschedule>
   1c7d4:	e7d9      	b.n	1c78a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1c7d6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1c7d8:	f385 8811 	msr	BASEPRI, r5
   1c7dc:	f3bf 8f6f 	isb	sy
   1c7e0:	e7d3      	b.n	1c78a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1c7e2:	f06f 0015 	mvn.w	r0, #21
   1c7e6:	e7d3      	b.n	1c790 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1c7e8:	f04f 30ff 	mov.w	r0, #4294967295
   1c7ec:	e7d0      	b.n	1c790 <z_impl_k_mutex_unlock+0x28>
   1c7ee:	bf00      	nop
   1c7f0:	2000d5d8 	.word	0x2000d5d8
   1c7f4:	2000f53e 	.word	0x2000f53e

0001c7f8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1c7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c7fa:	4616      	mov	r6, r2
   1c7fc:	461f      	mov	r7, r3
	__asm__ volatile(
   1c7fe:	f04f 0320 	mov.w	r3, #32
   1c802:	f3ef 8511 	mrs	r5, BASEPRI
   1c806:	f383 8812 	msr	BASEPRI_MAX, r3
   1c80a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1c80e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1c810:	b19c      	cbz	r4, 1c83a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c812:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c814:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c816:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c81a:	4294      	cmp	r4, r2
	list->head = node;
   1c81c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1c81e:	bf08      	it	eq
   1c820:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1c822:	2101      	movs	r1, #1
   1c824:	4620      	mov	r0, r4
   1c826:	f005 fb3e 	bl	21ea6 <z_queue_node_peek>
   1c82a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c82c:	f385 8811 	msr	BASEPRI, r5
   1c830:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1c834:	4620      	mov	r0, r4
   1c836:	b003      	add	sp, #12
   1c838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c83a:	ea56 0307 	orrs.w	r3, r6, r7
   1c83e:	d0f5      	beq.n	1c82c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c840:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1c844:	4629      	mov	r1, r5
   1c846:	4610      	mov	r0, r2
   1c848:	e9cd 6700 	strd	r6, r7, [sp]
   1c84c:	f000 fb58 	bl	1cf00 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1c850:	2800      	cmp	r0, #0
   1c852:	d1ef      	bne.n	1c834 <z_impl_k_queue_get+0x3c>
   1c854:	4b01      	ldr	r3, [pc, #4]	; (1c85c <z_impl_k_queue_get+0x64>)
   1c856:	689b      	ldr	r3, [r3, #8]
   1c858:	695c      	ldr	r4, [r3, #20]
   1c85a:	e7eb      	b.n	1c834 <z_impl_k_queue_get+0x3c>
   1c85c:	2000d5d8 	.word	0x2000d5d8

0001c860 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1c860:	b538      	push	{r3, r4, r5, lr}
   1c862:	4604      	mov	r4, r0
	__asm__ volatile(
   1c864:	f04f 0320 	mov.w	r3, #32
   1c868:	f3ef 8511 	mrs	r5, BASEPRI
   1c86c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c870:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1c874:	f005 fc6d 	bl	22152 <z_unpend_first_thread>

	if (thread != NULL) {
   1c878:	b150      	cbz	r0, 1c890 <z_impl_k_sem_give+0x30>
   1c87a:	2200      	movs	r2, #0
   1c87c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1c880:	f005 fbf3 	bl	2206a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1c884:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1c886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1c88a:	4807      	ldr	r0, [pc, #28]	; (1c8a8 <z_impl_k_sem_give+0x48>)
   1c88c:	f000 b9de 	b.w	1cc4c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1c890:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1c894:	429a      	cmp	r2, r3
   1c896:	bf18      	it	ne
   1c898:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1c89a:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1c89c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1c89e:	f104 0010 	add.w	r0, r4, #16
   1c8a2:	f005 fe6d 	bl	22580 <z_handle_obj_poll_events>
}
   1c8a6:	e7ed      	b.n	1c884 <z_impl_k_sem_give+0x24>
   1c8a8:	2000f53e 	.word	0x2000f53e

0001c8ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1c8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c8ae:	4614      	mov	r4, r2
   1c8b0:	461d      	mov	r5, r3
   1c8b2:	f04f 0320 	mov.w	r3, #32
   1c8b6:	f3ef 8111 	mrs	r1, BASEPRI
   1c8ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1c8be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1c8c2:	6883      	ldr	r3, [r0, #8]
   1c8c4:	b143      	cbz	r3, 1c8d8 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1c8c6:	3b01      	subs	r3, #1
   1c8c8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1c8ca:	f381 8811 	msr	BASEPRI, r1
   1c8ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1c8d2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1c8d4:	b003      	add	sp, #12
   1c8d6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c8d8:	ea54 0305 	orrs.w	r3, r4, r5
   1c8dc:	d106      	bne.n	1c8ec <z_impl_k_sem_take+0x40>
   1c8de:	f381 8811 	msr	BASEPRI, r1
   1c8e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1c8e6:	f06f 000f 	mvn.w	r0, #15
   1c8ea:	e7f3      	b.n	1c8d4 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c8ec:	4602      	mov	r2, r0
   1c8ee:	e9cd 4500 	strd	r4, r5, [sp]
   1c8f2:	4802      	ldr	r0, [pc, #8]	; (1c8fc <z_impl_k_sem_take+0x50>)
   1c8f4:	f000 fb04 	bl	1cf00 <z_pend_curr>
	return ret;
   1c8f8:	e7ec      	b.n	1c8d4 <z_impl_k_sem_take+0x28>
   1c8fa:	bf00      	nop
   1c8fc:	2000f53e 	.word	0x2000f53e

0001c900 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c904:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1c906:	f04f 38ff 	mov.w	r8, #4294967295
   1c90a:	f04f 39ff 	mov.w	r9, #4294967295
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c90e:	4e49      	ldr	r6, [pc, #292]	; (1ca34 <work_queue_main+0x134>)
{
   1c910:	b085      	sub	sp, #20
	__asm__ volatile(
   1c912:	f04f 0320 	mov.w	r3, #32
   1c916:	f3ef 8711 	mrs	r7, BASEPRI
   1c91a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c91e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1c922:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
	return list->head;
   1c926:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
Z_GENLIST_GET(slist, snode)
   1c92a:	b985      	cbnz	r5, 1c94e <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   1c92c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1c930:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1c932:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		} else if (flag_test_and_clear(&queue->flags,
   1c936:	d433      	bmi.n	1c9a0 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1c938:	2300      	movs	r3, #0
   1c93a:	4639      	mov	r1, r7
   1c93c:	e9cd 8900 	strd	r8, r9, [sp]
   1c940:	9302      	str	r3, [sp, #8]
   1c942:	f104 0298 	add.w	r2, r4, #152	; 0x98
   1c946:	483c      	ldr	r0, [pc, #240]	; (1ca38 <work_queue_main+0x138>)
   1c948:	f000 fca4 	bl	1d294 <z_sched_wait>
			continue;
   1c94c:	e7e1      	b.n	1c912 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c94e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1c952:	6829      	ldr	r1, [r5, #0]
   1c954:	4295      	cmp	r5, r2
	list->head = node;
   1c956:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c95a:	d101      	bne.n	1c960 <work_queue_main+0x60>
	list->tail = node;
   1c95c:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	*flagp |= BIT(bit);
   1c960:	f043 0302 	orr.w	r3, r3, #2
   1c964:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	*flagp &= ~BIT(bit);
   1c968:	68eb      	ldr	r3, [r5, #12]
   1c96a:	f023 0304 	bic.w	r3, r3, #4
   1c96e:	f043 0301 	orr.w	r3, r3, #1
   1c972:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1c974:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1c976:	f387 8811 	msr	BASEPRI, r7
   1c97a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1c97e:	4628      	mov	r0, r5
   1c980:	4798      	blx	r3
	__asm__ volatile(
   1c982:	f04f 0320 	mov.w	r3, #32
   1c986:	f3ef 8b11 	mrs	fp, BASEPRI
   1c98a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c98e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1c992:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c994:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1c996:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c99a:	d40b      	bmi.n	1c9b4 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1c99c:	60ea      	str	r2, [r5, #12]
   1c99e:	e00e      	b.n	1c9be <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1c9a0:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1c9a4:	2200      	movs	r2, #0
   1c9a6:	2101      	movs	r1, #1
   1c9a8:	4628      	mov	r0, r5
   1c9aa:	f005 fbfa 	bl	221a2 <z_sched_wake>
   1c9ae:	2800      	cmp	r0, #0
   1c9b0:	d1f8      	bne.n	1c9a4 <work_queue_main+0xa4>
   1c9b2:	e7c1      	b.n	1c938 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c9b4:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1c9b6:	f023 0303 	bic.w	r3, r3, #3
   1c9ba:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c9bc:	b970      	cbnz	r0, 1c9dc <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1c9be:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1c9c2:	f023 0302 	bic.w	r3, r3, #2
   1c9c6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	__asm__ volatile(
   1c9ca:	f38b 8811 	msr	BASEPRI, fp
   1c9ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1c9d2:	05d8      	lsls	r0, r3, #23
   1c9d4:	d49d      	bmi.n	1c912 <work_queue_main+0x12>
	z_impl_k_yield();
   1c9d6:	f000 fb4d 	bl	1d074 <z_impl_k_yield>
}
   1c9da:	e79a      	b.n	1c912 <work_queue_main+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c9dc:	f04f 0a00 	mov.w	sl, #0
   1c9e0:	6807      	ldr	r7, [r0, #0]
	parent->next = child;
   1c9e2:	4653      	mov	r3, sl
   1c9e4:	2f00      	cmp	r7, #0
   1c9e6:	bf38      	it	cc
   1c9e8:	2700      	movcc	r7, #0
		if (wc->work == work) {
   1c9ea:	6842      	ldr	r2, [r0, #4]
   1c9ec:	4601      	mov	r1, r0
   1c9ee:	4295      	cmp	r5, r2
   1c9f0:	d10e      	bne.n	1ca10 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1c9f2:	6801      	ldr	r1, [r0, #0]
   1c9f4:	f1ba 0f00 	cmp.w	sl, #0
   1c9f8:	d114      	bne.n	1ca24 <work_queue_main+0x124>
   1c9fa:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1c9fc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c9fe:	4290      	cmp	r0, r2
   1ca00:	d100      	bne.n	1ca04 <work_queue_main+0x104>
	list->tail = node;
   1ca02:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1ca04:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1ca08:	f7ff ff2a 	bl	1c860 <z_impl_k_sem_give>
}
   1ca0c:	4651      	mov	r1, sl
   1ca0e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ca10:	2f00      	cmp	r7, #0
   1ca12:	d0d4      	beq.n	1c9be <work_queue_main+0xbe>
	return node->next;
   1ca14:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ca16:	4638      	mov	r0, r7
   1ca18:	2a00      	cmp	r2, #0
   1ca1a:	bf38      	it	cc
   1ca1c:	2200      	movcc	r2, #0
   1ca1e:	468a      	mov	sl, r1
   1ca20:	4617      	mov	r7, r2
   1ca22:	e7e2      	b.n	1c9ea <work_queue_main+0xea>
	parent->next = child;
   1ca24:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   1ca28:	6872      	ldr	r2, [r6, #4]
   1ca2a:	4290      	cmp	r0, r2
	list->tail = node;
   1ca2c:	bf08      	it	eq
   1ca2e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1ca32:	e7e7      	b.n	1ca04 <work_queue_main+0x104>
   1ca34:	2000d600 	.word	0x2000d600
   1ca38:	2000f53e 	.word	0x2000f53e

0001ca3c <submit_to_queue_locked>:
{
   1ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ca3e:	68c3      	ldr	r3, [r0, #12]
{
   1ca40:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ca42:	079a      	lsls	r2, r3, #30
{
   1ca44:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ca46:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1ca4a:	d41f      	bmi.n	1ca8c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1ca4c:	075f      	lsls	r7, r3, #29
   1ca4e:	d41f      	bmi.n	1ca90 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1ca50:	680a      	ldr	r2, [r1, #0]
   1ca52:	b90a      	cbnz	r2, 1ca58 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1ca54:	6882      	ldr	r2, [r0, #8]
   1ca56:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1ca58:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1ca5a:	bf42      	ittt	mi
   1ca5c:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   1ca5e:	2502      	movmi	r5, #2
			*queuep = work->queue;
   1ca60:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1ca62:	6837      	ldr	r7, [r6, #0]
		ret = 1;
   1ca64:	bf58      	it	pl
   1ca66:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1ca68:	b37f      	cbz	r7, 1caca <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ca6a:	4b1b      	ldr	r3, [pc, #108]	; (1cad8 <submit_to_queue_locked+0x9c>)
   1ca6c:	689b      	ldr	r3, [r3, #8]
   1ca6e:	42bb      	cmp	r3, r7
   1ca70:	d111      	bne.n	1ca96 <submit_to_queue_locked+0x5a>
   1ca72:	f005 f998 	bl	21da6 <k_is_in_isr>
   1ca76:	f080 0001 	eor.w	r0, r0, #1
   1ca7a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1ca7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ca80:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1ca82:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ca86:	d523      	bpl.n	1cad0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1ca88:	b13a      	cbz	r2, 1ca9a <submit_to_queue_locked+0x5e>
   1ca8a:	b940      	cbnz	r0, 1ca9e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1ca8c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1ca90:	2300      	movs	r3, #0
   1ca92:	6033      	str	r3, [r6, #0]
	return ret;
   1ca94:	e013      	b.n	1cabe <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ca96:	2000      	movs	r0, #0
   1ca98:	e7f0      	b.n	1ca7c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1ca9a:	071b      	lsls	r3, r3, #28
   1ca9c:	d4f6      	bmi.n	1ca8c <submit_to_queue_locked+0x50>
	parent->next = child;
   1ca9e:	2300      	movs	r3, #0
   1caa0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1caa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1caa6:	b963      	cbnz	r3, 1cac2 <submit_to_queue_locked+0x86>
	list->head = node;
   1caa8:	e9c7 4424 	strd	r4, r4, [r7, #144]	; 0x90
		(void)notify_queue_locked(queue);
   1caac:	4638      	mov	r0, r7
   1caae:	f005 fa21 	bl	21ef4 <notify_queue_locked>
	*flagp |= BIT(bit);
   1cab2:	68e3      	ldr	r3, [r4, #12]
   1cab4:	f043 0304 	orr.w	r3, r3, #4
   1cab8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1caba:	6833      	ldr	r3, [r6, #0]
   1cabc:	60a3      	str	r3, [r4, #8]
}
   1cabe:	4628      	mov	r0, r5
   1cac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1cac2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cac4:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
}
   1cac8:	e7f0      	b.n	1caac <submit_to_queue_locked+0x70>
		return -EINVAL;
   1caca:	f06f 0515 	mvn.w	r5, #21
   1cace:	e7df      	b.n	1ca90 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1cad0:	f06f 0512 	mvn.w	r5, #18
   1cad4:	e7dc      	b.n	1ca90 <submit_to_queue_locked+0x54>
   1cad6:	bf00      	nop
   1cad8:	2000d5d8 	.word	0x2000d5d8

0001cadc <k_work_submit>:
{
   1cadc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1cade:	4801      	ldr	r0, [pc, #4]	; (1cae4 <k_work_submit+0x8>)
   1cae0:	f005 ba37 	b.w	21f52 <k_work_submit_to_queue>
   1cae4:	2000cec0 	.word	0x2000cec0

0001cae8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1cae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1caea:	4604      	mov	r4, r0
	list->head = NULL;
   1caec:	2000      	movs	r0, #0
   1caee:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   1caf0:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   1caf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1caf6:	f104 0098 	add.w	r0, r4, #152	; 0x98
	list->tail = (sys_dnode_t *)list;
   1cafa:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
   1cafe:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1cb02:	e9c4 0028 	strd	r0, r0, [r4, #160]	; 0xa0

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1cb06:	b31d      	cbz	r5, 1cb50 <k_work_queue_start+0x68>
   1cb08:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1cb0a:	2800      	cmp	r0, #0
   1cb0c:	f240 1001 	movw	r0, #257	; 0x101
   1cb10:	bf08      	it	eq
   1cb12:	2001      	moveq	r0, #1
	*flagp = flags;
   1cb14:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1cb18:	2000      	movs	r0, #0
   1cb1a:	f04f 36ff 	mov.w	r6, #4294967295
   1cb1e:	f04f 37ff 	mov.w	r7, #4294967295
   1cb22:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1cb26:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1cb2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1cb2e:	4620      	mov	r0, r4
   1cb30:	4b08      	ldr	r3, [pc, #32]	; (1cb54 <k_work_queue_start+0x6c>)
   1cb32:	9400      	str	r4, [sp, #0]
   1cb34:	f7ff fcfa 	bl	1c52c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1cb38:	b125      	cbz	r5, 1cb44 <k_work_queue_start+0x5c>
   1cb3a:	6829      	ldr	r1, [r5, #0]
   1cb3c:	b111      	cbz	r1, 1cb44 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1cb3e:	4620      	mov	r0, r4
   1cb40:	f005 f937 	bl	21db2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1cb44:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1cb46:	b009      	add	sp, #36	; 0x24
   1cb48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1cb4c:	f005 b936 	b.w	21dbc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1cb50:	2001      	movs	r0, #1
   1cb52:	e7df      	b.n	1cb14 <k_work_queue_start+0x2c>
   1cb54:	0001c901 	.word	0x0001c901

0001cb58 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1cb58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cb5a:	4614      	mov	r4, r2
   1cb5c:	9001      	str	r0, [sp, #4]
   1cb5e:	461d      	mov	r5, r3
   1cb60:	4608      	mov	r0, r1
	__asm__ volatile(
   1cb62:	f04f 0120 	mov.w	r1, #32
   1cb66:	f3ef 8611 	mrs	r6, BASEPRI
   1cb6a:	f381 8812 	msr	BASEPRI_MAX, r1
   1cb6e:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1cb72:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1cb74:	f011 0f0e 	tst.w	r1, #14
   1cb78:	d115      	bne.n	1cba6 <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cb7a:	432c      	orrs	r4, r5
   1cb7c:	d108      	bne.n	1cb90 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   1cb7e:	a901      	add	r1, sp, #4
   1cb80:	f7ff ff5c 	bl	1ca3c <submit_to_queue_locked>
	__asm__ volatile(
   1cb84:	f386 8811 	msr	BASEPRI, r6
   1cb88:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1cb8c:	b002      	add	sp, #8
   1cb8e:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   1cb90:	f041 0108 	orr.w	r1, r1, #8
   1cb94:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1cb96:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1cb98:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   1cb9a:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1cb9c:	4903      	ldr	r1, [pc, #12]	; (1cbac <k_work_schedule_for_queue+0x54>)
   1cb9e:	f000 fbf5 	bl	1d38c <z_add_timeout>
	return ret;
   1cba2:	2001      	movs	r0, #1
   1cba4:	e7ee      	b.n	1cb84 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1cba6:	2000      	movs	r0, #0
   1cba8:	e7ec      	b.n	1cb84 <k_work_schedule_for_queue+0x2c>
   1cbaa:	bf00      	nop
   1cbac:	00021f03 	.word	0x00021f03

0001cbb0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1cbb0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1cbb2:	4801      	ldr	r0, [pc, #4]	; (1cbb8 <k_work_schedule+0x8>)
   1cbb4:	f7ff bfd0 	b.w	1cb58 <k_work_schedule_for_queue>
   1cbb8:	2000cec0 	.word	0x2000cec0

0001cbbc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1cbbc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1cbbe:	4c08      	ldr	r4, [pc, #32]	; (1cbe0 <z_reset_time_slice+0x24>)
   1cbc0:	6823      	ldr	r3, [r4, #0]
   1cbc2:	b15b      	cbz	r3, 1cbdc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1cbc4:	f7f8 fe3a 	bl	1583c <sys_clock_elapsed>
   1cbc8:	4603      	mov	r3, r0
   1cbca:	6820      	ldr	r0, [r4, #0]
   1cbcc:	4a05      	ldr	r2, [pc, #20]	; (1cbe4 <z_reset_time_slice+0x28>)
   1cbce:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   1cbd0:	2100      	movs	r1, #0
	}
}
   1cbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1cbd6:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1cbd8:	f005 bb27 	b.w	2222a <z_set_timeout_expiry>
}
   1cbdc:	bd10      	pop	{r4, pc}
   1cbde:	bf00      	nop
   1cbe0:	2000d610 	.word	0x2000d610
   1cbe4:	2000d5d8 	.word	0x2000d5d8

0001cbe8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cbea:	4604      	mov	r4, r0
   1cbec:	460d      	mov	r5, r1
	__asm__ volatile(
   1cbee:	f04f 0320 	mov.w	r3, #32
   1cbf2:	f3ef 8611 	mrs	r6, BASEPRI
   1cbf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbfa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1cbfe:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1cc00:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1cc04:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cc08:	2100      	movs	r1, #0
   1cc0a:	4b0d      	ldr	r3, [pc, #52]	; (1cc40 <k_sched_time_slice_set+0x58>)
   1cc0c:	fbe7 0104 	umlal	r0, r1, r7, r4
   1cc10:	611a      	str	r2, [r3, #16]
   1cc12:	2300      	movs	r3, #0
   1cc14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cc18:	f7f4 f942 	bl	10ea0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1cc1c:	2c00      	cmp	r4, #0
   1cc1e:	4b09      	ldr	r3, [pc, #36]	; (1cc44 <k_sched_time_slice_set+0x5c>)
   1cc20:	dc09      	bgt.n	1cc36 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1cc22:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1cc24:	4b08      	ldr	r3, [pc, #32]	; (1cc48 <k_sched_time_slice_set+0x60>)
   1cc26:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1cc28:	f7ff ffc8 	bl	1cbbc <z_reset_time_slice>
	__asm__ volatile(
   1cc2c:	f386 8811 	msr	BASEPRI, r6
   1cc30:	f3bf 8f6f 	isb	sy
	}
}
   1cc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1cc36:	2802      	cmp	r0, #2
   1cc38:	bfb8      	it	lt
   1cc3a:	2002      	movlt	r0, #2
   1cc3c:	e7f1      	b.n	1cc22 <k_sched_time_slice_set+0x3a>
   1cc3e:	bf00      	nop
   1cc40:	2000d5d8 	.word	0x2000d5d8
   1cc44:	2000d610 	.word	0x2000d610
   1cc48:	2000d60c 	.word	0x2000d60c

0001cc4c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1cc4c:	b949      	cbnz	r1, 1cc62 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1cc4e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1cc52:	b930      	cbnz	r0, 1cc62 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1cc54:	4b05      	ldr	r3, [pc, #20]	; (1cc6c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1cc56:	69da      	ldr	r2, [r3, #28]
   1cc58:	689b      	ldr	r3, [r3, #8]
   1cc5a:	429a      	cmp	r2, r3
   1cc5c:	d001      	beq.n	1cc62 <z_reschedule+0x16>
	ret = arch_swap(key);
   1cc5e:	f7f7 b88b 	b.w	13d78 <arch_swap>
   1cc62:	f381 8811 	msr	BASEPRI, r1
   1cc66:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1cc6a:	4770      	bx	lr
   1cc6c:	2000d5d8 	.word	0x2000d5d8

0001cc70 <k_sched_lock>:
	__asm__ volatile(
   1cc70:	f04f 0320 	mov.w	r3, #32
   1cc74:	f3ef 8111 	mrs	r1, BASEPRI
   1cc78:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc7c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1cc80:	4b04      	ldr	r3, [pc, #16]	; (1cc94 <k_sched_lock+0x24>)
   1cc82:	689a      	ldr	r2, [r3, #8]
   1cc84:	7bd3      	ldrb	r3, [r2, #15]
   1cc86:	3b01      	subs	r3, #1
   1cc88:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1cc8a:	f381 8811 	msr	BASEPRI, r1
   1cc8e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1cc92:	4770      	bx	lr
   1cc94:	2000d5d8 	.word	0x2000d5d8

0001cc98 <update_cache>:
{
   1cc98:	b538      	push	{r3, r4, r5, lr}
   1cc9a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1cc9c:	480c      	ldr	r0, [pc, #48]	; (1ccd0 <update_cache+0x38>)
   1cc9e:	f005 f9da 	bl	22056 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1cca2:	4d0c      	ldr	r5, [pc, #48]	; (1ccd4 <update_cache+0x3c>)
   1cca4:	4604      	mov	r4, r0
   1cca6:	b900      	cbnz	r0, 1ccaa <update_cache+0x12>
   1cca8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1ccaa:	68ab      	ldr	r3, [r5, #8]
   1ccac:	b94a      	cbnz	r2, 1ccc2 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1ccae:	7b5a      	ldrb	r2, [r3, #13]
   1ccb0:	06d2      	lsls	r2, r2, #27
   1ccb2:	d106      	bne.n	1ccc2 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1ccb4:	69a2      	ldr	r2, [r4, #24]
   1ccb6:	b922      	cbnz	r2, 1ccc2 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1ccb8:	89da      	ldrh	r2, [r3, #14]
   1ccba:	2a7f      	cmp	r2, #127	; 0x7f
   1ccbc:	d901      	bls.n	1ccc2 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1ccbe:	61eb      	str	r3, [r5, #28]
}
   1ccc0:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1ccc2:	429c      	cmp	r4, r3
   1ccc4:	d001      	beq.n	1ccca <update_cache+0x32>
			z_reset_time_slice();
   1ccc6:	f7ff ff79 	bl	1cbbc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1ccca:	61ec      	str	r4, [r5, #28]
}
   1cccc:	e7f8      	b.n	1ccc0 <update_cache+0x28>
   1ccce:	bf00      	nop
   1ccd0:	2000d5f8 	.word	0x2000d5f8
   1ccd4:	2000d5d8 	.word	0x2000d5d8

0001ccd8 <move_thread_to_end_of_prio_q>:
{
   1ccd8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ccda:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1ccde:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1cce0:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1cce2:	7b43      	ldrb	r3, [r0, #13]
   1cce4:	da04      	bge.n	1ccf0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ccea:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ccec:	f005 f95e 	bl	21fac <sys_dlist_remove>
	return list->head == list;
   1ccf0:	4a17      	ldr	r2, [pc, #92]	; (1cd50 <move_thread_to_end_of_prio_q+0x78>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1ccf2:	7b4b      	ldrb	r3, [r1, #13]
   1ccf4:	4610      	mov	r0, r2
   1ccf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ccfa:	734b      	strb	r3, [r1, #13]
   1ccfc:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cd00:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cd02:	4283      	cmp	r3, r0
   1cd04:	bf08      	it	eq
   1cd06:	2300      	moveq	r3, #0
   1cd08:	2b00      	cmp	r3, #0
   1cd0a:	bf38      	it	cc
   1cd0c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cd0e:	b1cb      	cbz	r3, 1cd44 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1cd10:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1cd14:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1cd18:	42a6      	cmp	r6, r4
   1cd1a:	d00f      	beq.n	1cd3c <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1cd1c:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cd1e:	2c00      	cmp	r4, #0
   1cd20:	dd0c      	ble.n	1cd3c <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1cd22:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1cd24:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1cd28:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1cd2a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1cd2c:	6890      	ldr	r0, [r2, #8]
}
   1cd2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1cd32:	1a43      	subs	r3, r0, r1
   1cd34:	4258      	negs	r0, r3
   1cd36:	4158      	adcs	r0, r3
   1cd38:	f7ff bfae 	b.w	1cc98 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1cd3c:	42ab      	cmp	r3, r5
   1cd3e:	d001      	beq.n	1cd44 <move_thread_to_end_of_prio_q+0x6c>
   1cd40:	681b      	ldr	r3, [r3, #0]
   1cd42:	e7e4      	b.n	1cd0e <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1cd44:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1cd48:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1cd4a:	6251      	str	r1, [r2, #36]	; 0x24
}
   1cd4c:	e7ee      	b.n	1cd2c <move_thread_to_end_of_prio_q+0x54>
   1cd4e:	bf00      	nop
   1cd50:	2000d5d8 	.word	0x2000d5d8

0001cd54 <z_time_slice>:
{
   1cd54:	4601      	mov	r1, r0
   1cd56:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1cd58:	f04f 0320 	mov.w	r3, #32
   1cd5c:	f3ef 8411 	mrs	r4, BASEPRI
   1cd60:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd64:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1cd68:	4b16      	ldr	r3, [pc, #88]	; (1cdc4 <z_time_slice+0x70>)
   1cd6a:	4a17      	ldr	r2, [pc, #92]	; (1cdc8 <z_time_slice+0x74>)
   1cd6c:	6898      	ldr	r0, [r3, #8]
   1cd6e:	6815      	ldr	r5, [r2, #0]
   1cd70:	42a8      	cmp	r0, r5
   1cd72:	461d      	mov	r5, r3
   1cd74:	d106      	bne.n	1cd84 <z_time_slice+0x30>
			z_reset_time_slice();
   1cd76:	f7ff ff21 	bl	1cbbc <z_reset_time_slice>
	__asm__ volatile(
   1cd7a:	f384 8811 	msr	BASEPRI, r4
   1cd7e:	f3bf 8f6f 	isb	sy
}
   1cd82:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1cd84:	2600      	movs	r6, #0
   1cd86:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1cd88:	4a10      	ldr	r2, [pc, #64]	; (1cdcc <z_time_slice+0x78>)
   1cd8a:	6812      	ldr	r2, [r2, #0]
   1cd8c:	b1ba      	cbz	r2, 1cdbe <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1cd8e:	89c2      	ldrh	r2, [r0, #14]
   1cd90:	2a7f      	cmp	r2, #127	; 0x7f
   1cd92:	d814      	bhi.n	1cdbe <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1cd94:	7b42      	ldrb	r2, [r0, #13]
   1cd96:	06d2      	lsls	r2, r2, #27
   1cd98:	d111      	bne.n	1cdbe <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1cd9a:	4a0d      	ldr	r2, [pc, #52]	; (1cdd0 <z_time_slice+0x7c>)
   1cd9c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1cda0:	6812      	ldr	r2, [r2, #0]
   1cda2:	4296      	cmp	r6, r2
   1cda4:	db0b      	blt.n	1cdbe <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1cda6:	4a0b      	ldr	r2, [pc, #44]	; (1cdd4 <z_time_slice+0x80>)
   1cda8:	4290      	cmp	r0, r2
   1cdaa:	d008      	beq.n	1cdbe <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1cdac:	691a      	ldr	r2, [r3, #16]
   1cdae:	428a      	cmp	r2, r1
   1cdb0:	dc02      	bgt.n	1cdb8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1cdb2:	f7ff ff91 	bl	1ccd8 <move_thread_to_end_of_prio_q>
   1cdb6:	e7de      	b.n	1cd76 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1cdb8:	1a52      	subs	r2, r2, r1
   1cdba:	611a      	str	r2, [r3, #16]
   1cdbc:	e7dd      	b.n	1cd7a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1cdbe:	2300      	movs	r3, #0
   1cdc0:	612b      	str	r3, [r5, #16]
   1cdc2:	e7da      	b.n	1cd7a <z_time_slice+0x26>
   1cdc4:	2000d5d8 	.word	0x2000d5d8
   1cdc8:	2000d608 	.word	0x2000d608
   1cdcc:	2000d610 	.word	0x2000d610
   1cdd0:	2000d60c 	.word	0x2000d60c
   1cdd4:	2000cd98 	.word	0x2000cd98

0001cdd8 <ready_thread>:
{
   1cdd8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1cdda:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1cdde:	7b42      	ldrb	r2, [r0, #13]
   1cde0:	2b00      	cmp	r3, #0
   1cde2:	db2d      	blt.n	1ce40 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1cde4:	06d3      	lsls	r3, r2, #27
   1cde6:	d12b      	bne.n	1ce40 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1cde8:	6983      	ldr	r3, [r0, #24]
   1cdea:	bb4b      	cbnz	r3, 1ce40 <ready_thread+0x68>
	return list->head == list;
   1cdec:	4915      	ldr	r1, [pc, #84]	; (1ce44 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1cdee:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1cdf2:	7342      	strb	r2, [r0, #13]
   1cdf4:	460a      	mov	r2, r1
   1cdf6:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cdfa:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cdfc:	4294      	cmp	r4, r2
   1cdfe:	bf18      	it	ne
   1ce00:	4623      	movne	r3, r4
   1ce02:	2b00      	cmp	r3, #0
   1ce04:	bf38      	it	cc
   1ce06:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ce08:	b1ab      	cbz	r3, 1ce36 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1ce0a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1ce0e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1ce12:	42a6      	cmp	r6, r4
   1ce14:	d00b      	beq.n	1ce2e <ready_thread+0x56>
		return b2 - b1;
   1ce16:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ce18:	2c00      	cmp	r4, #0
   1ce1a:	dd08      	ble.n	1ce2e <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1ce1c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ce1e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1ce22:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1ce24:	6058      	str	r0, [r3, #4]
		update_cache(0);
   1ce26:	2000      	movs	r0, #0
}
   1ce28:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1ce2a:	f7ff bf35 	b.w	1cc98 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ce2e:	42ab      	cmp	r3, r5
   1ce30:	d001      	beq.n	1ce36 <ready_thread+0x5e>
   1ce32:	681b      	ldr	r3, [r3, #0]
   1ce34:	e7e8      	b.n	1ce08 <ready_thread+0x30>
	node->prev = tail;
   1ce36:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1ce3a:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1ce3c:	6248      	str	r0, [r1, #36]	; 0x24
}
   1ce3e:	e7f2      	b.n	1ce26 <ready_thread+0x4e>
}
   1ce40:	bc70      	pop	{r4, r5, r6}
   1ce42:	4770      	bx	lr
   1ce44:	2000d5d8 	.word	0x2000d5d8

0001ce48 <z_sched_start>:
{
   1ce48:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ce4a:	f04f 0220 	mov.w	r2, #32
   1ce4e:	f3ef 8411 	mrs	r4, BASEPRI
   1ce52:	f382 8812 	msr	BASEPRI_MAX, r2
   1ce56:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1ce5a:	7b42      	ldrb	r2, [r0, #13]
   1ce5c:	0751      	lsls	r1, r2, #29
   1ce5e:	d404      	bmi.n	1ce6a <z_sched_start+0x22>
	__asm__ volatile(
   1ce60:	f384 8811 	msr	BASEPRI, r4
   1ce64:	f3bf 8f6f 	isb	sy
}
   1ce68:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ce6a:	f022 0204 	bic.w	r2, r2, #4
   1ce6e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1ce70:	f7ff ffb2 	bl	1cdd8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ce74:	4621      	mov	r1, r4
}
   1ce76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1ce7a:	4801      	ldr	r0, [pc, #4]	; (1ce80 <z_sched_start+0x38>)
   1ce7c:	f7ff bee6 	b.w	1cc4c <z_reschedule>
   1ce80:	2000f53e 	.word	0x2000f53e

0001ce84 <unready_thread>:
{
   1ce84:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1ce86:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1ce8a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ce8c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1ce8e:	7b43      	ldrb	r3, [r0, #13]
   1ce90:	da04      	bge.n	1ce9c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ce92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ce96:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ce98:	f005 f888 	bl	21fac <sys_dlist_remove>
	update_cache(thread == _current);
   1ce9c:	4b04      	ldr	r3, [pc, #16]	; (1ceb0 <unready_thread+0x2c>)
   1ce9e:	6898      	ldr	r0, [r3, #8]
   1cea0:	1a43      	subs	r3, r0, r1
   1cea2:	4258      	negs	r0, r3
   1cea4:	4158      	adcs	r0, r3
}
   1cea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ceaa:	f7ff bef5 	b.w	1cc98 <update_cache>
   1ceae:	bf00      	nop
   1ceb0:	2000d5d8 	.word	0x2000d5d8

0001ceb4 <pend>:
{
   1ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ceb8:	4606      	mov	r6, r0
   1ceba:	4614      	mov	r4, r2
   1cebc:	461d      	mov	r5, r3
	__asm__ volatile(
   1cebe:	f04f 0320 	mov.w	r3, #32
   1cec2:	f3ef 8711 	mrs	r7, BASEPRI
   1cec6:	f383 8812 	msr	BASEPRI_MAX, r3
   1ceca:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1cece:	f005 f8fe 	bl	220ce <add_to_waitq_locked>
	__asm__ volatile(
   1ced2:	f387 8811 	msr	BASEPRI, r7
   1ced6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ceda:	1c6b      	adds	r3, r5, #1
   1cedc:	bf08      	it	eq
   1cede:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1cee2:	d008      	beq.n	1cef6 <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1cee4:	4622      	mov	r2, r4
   1cee6:	462b      	mov	r3, r5
   1cee8:	f106 0018 	add.w	r0, r6, #24
   1ceec:	4903      	ldr	r1, [pc, #12]	; (1cefc <pend+0x48>)
}
   1ceee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cef2:	f000 ba4b 	b.w	1d38c <z_add_timeout>
   1cef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cefa:	bf00      	nop
   1cefc:	0002208b 	.word	0x0002208b

0001cf00 <z_pend_curr>:
{
   1cf00:	b510      	push	{r4, lr}
   1cf02:	460c      	mov	r4, r1
	pending_current = _current;
   1cf04:	4b06      	ldr	r3, [pc, #24]	; (1cf20 <z_pend_curr+0x20>)
{
   1cf06:	4611      	mov	r1, r2
	pending_current = _current;
   1cf08:	6898      	ldr	r0, [r3, #8]
   1cf0a:	4b06      	ldr	r3, [pc, #24]	; (1cf24 <z_pend_curr+0x24>)
   1cf0c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1cf0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf12:	f7ff ffcf 	bl	1ceb4 <pend>
   1cf16:	4620      	mov	r0, r4
}
   1cf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf1c:	f7f6 bf2c 	b.w	13d78 <arch_swap>
   1cf20:	2000d5d8 	.word	0x2000d5d8
   1cf24:	2000d608 	.word	0x2000d608

0001cf28 <z_set_prio>:
{
   1cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf2a:	4604      	mov	r4, r0
	__asm__ volatile(
   1cf2c:	f04f 0320 	mov.w	r3, #32
   1cf30:	f3ef 8611 	mrs	r6, BASEPRI
   1cf34:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf38:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1cf3c:	7b43      	ldrb	r3, [r0, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   1cf3e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1cf40:	06da      	lsls	r2, r3, #27
   1cf42:	d138      	bne.n	1cfb6 <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
   1cf44:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1cf46:	2d00      	cmp	r5, #0
   1cf48:	d135      	bne.n	1cfb6 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cf4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cf4e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cf50:	f005 f82c 	bl	21fac <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1cf54:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1cf56:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1cf58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1cf5c:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1cf5e:	4817      	ldr	r0, [pc, #92]	; (1cfbc <z_set_prio+0x94>)
   1cf60:	4603      	mov	r3, r0
   1cf62:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cf66:	429f      	cmp	r7, r3
   1cf68:	bf18      	it	ne
   1cf6a:	463d      	movne	r5, r7
   1cf6c:	2d00      	cmp	r5, #0
   1cf6e:	461a      	mov	r2, r3
   1cf70:	462b      	mov	r3, r5
   1cf72:	bf38      	it	cc
   1cf74:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cf76:	6a47      	ldr	r7, [r0, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cf78:	b1c3      	cbz	r3, 1cfac <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1cf7a:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1cf7e:	42a9      	cmp	r1, r5
   1cf80:	d010      	beq.n	1cfa4 <z_set_prio+0x7c>
		return b2 - b1;
   1cf82:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cf84:	2d00      	cmp	r5, #0
   1cf86:	dd0d      	ble.n	1cfa4 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1cf88:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1cf8a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1cf8e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1cf90:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1cf92:	2001      	movs	r0, #1
   1cf94:	f7ff fe80 	bl	1cc98 <update_cache>
   1cf98:	2001      	movs	r0, #1
	__asm__ volatile(
   1cf9a:	f386 8811 	msr	BASEPRI, r6
   1cf9e:	f3bf 8f6f 	isb	sy
}
   1cfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1cfa4:	42bb      	cmp	r3, r7
   1cfa6:	d001      	beq.n	1cfac <z_set_prio+0x84>
   1cfa8:	681b      	ldr	r3, [r3, #0]
   1cfaa:	e7e5      	b.n	1cf78 <z_set_prio+0x50>
	node->prev = tail;
   1cfac:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1cfb0:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1cfb2:	6244      	str	r4, [r0, #36]	; 0x24
}
   1cfb4:	e7ed      	b.n	1cf92 <z_set_prio+0x6a>
			thread->base.prio = prio;
   1cfb6:	2000      	movs	r0, #0
   1cfb8:	73a1      	strb	r1, [r4, #14]
   1cfba:	e7ee      	b.n	1cf9a <z_set_prio+0x72>
   1cfbc:	2000d5d8 	.word	0x2000d5d8

0001cfc0 <z_impl_k_thread_suspend>:
{
   1cfc0:	b570      	push	{r4, r5, r6, lr}
   1cfc2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1cfc4:	3018      	adds	r0, #24
   1cfc6:	f005 f90a 	bl	221de <z_abort_timeout>
	__asm__ volatile(
   1cfca:	f04f 0320 	mov.w	r3, #32
   1cfce:	f3ef 8611 	mrs	r6, BASEPRI
   1cfd2:	f383 8812 	msr	BASEPRI_MAX, r3
   1cfd6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1cfda:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1cfde:	7b63      	ldrb	r3, [r4, #13]
   1cfe0:	2a00      	cmp	r2, #0
   1cfe2:	da05      	bge.n	1cff0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cfe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cfe8:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cfea:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cfec:	f004 ffde 	bl	21fac <sys_dlist_remove>
		update_cache(thread == _current);
   1cff0:	4d0b      	ldr	r5, [pc, #44]	; (1d020 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1cff2:	7b63      	ldrb	r3, [r4, #13]
   1cff4:	68a8      	ldr	r0, [r5, #8]
   1cff6:	f043 0310 	orr.w	r3, r3, #16
   1cffa:	7363      	strb	r3, [r4, #13]
   1cffc:	1b03      	subs	r3, r0, r4
   1cffe:	4258      	negs	r0, r3
   1d000:	4158      	adcs	r0, r3
   1d002:	f7ff fe49 	bl	1cc98 <update_cache>
	__asm__ volatile(
   1d006:	f386 8811 	msr	BASEPRI, r6
   1d00a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1d00e:	68ab      	ldr	r3, [r5, #8]
   1d010:	42a3      	cmp	r3, r4
   1d012:	d103      	bne.n	1d01c <z_impl_k_thread_suspend+0x5c>
}
   1d014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1d018:	f005 b813 	b.w	22042 <z_reschedule_unlocked>
}
   1d01c:	bd70      	pop	{r4, r5, r6, pc}
   1d01e:	bf00      	nop
   1d020:	2000d5d8 	.word	0x2000d5d8

0001d024 <k_sched_unlock>:
{
   1d024:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d026:	f04f 0320 	mov.w	r3, #32
   1d02a:	f3ef 8411 	mrs	r4, BASEPRI
   1d02e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d032:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1d036:	4b08      	ldr	r3, [pc, #32]	; (1d058 <k_sched_unlock+0x34>)
		update_cache(0);
   1d038:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1d03a:	689a      	ldr	r2, [r3, #8]
   1d03c:	7bd3      	ldrb	r3, [r2, #15]
   1d03e:	3301      	adds	r3, #1
   1d040:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d042:	f7ff fe29 	bl	1cc98 <update_cache>
	__asm__ volatile(
   1d046:	f384 8811 	msr	BASEPRI, r4
   1d04a:	f3bf 8f6f 	isb	sy
}
   1d04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1d052:	f004 bff6 	b.w	22042 <z_reschedule_unlocked>
   1d056:	bf00      	nop
   1d058:	2000d5d8 	.word	0x2000d5d8

0001d05c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1d05c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1d05e:	4b04      	ldr	r3, [pc, #16]	; (1d070 <z_sched_init+0x14>)
   1d060:	4608      	mov	r0, r1
   1d062:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1d066:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1d06a:	f7ff bdbd 	b.w	1cbe8 <k_sched_time_slice_set>
   1d06e:	bf00      	nop
   1d070:	2000d5d8 	.word	0x2000d5d8

0001d074 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1d076:	f04f 0320 	mov.w	r3, #32
   1d07a:	f3ef 8411 	mrs	r4, BASEPRI
   1d07e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d082:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1d086:	491b      	ldr	r1, [pc, #108]	; (1d0f4 <z_impl_k_yield+0x80>)
   1d088:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d08a:	7b43      	ldrb	r3, [r0, #13]
   1d08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d090:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d092:	f004 ff8b 	bl	21fac <sys_dlist_remove>
	return list->head == list;
   1d096:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   1d098:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d09a:	7b53      	ldrb	r3, [r2, #13]
   1d09c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d0a0:	7353      	strb	r3, [r2, #13]
   1d0a2:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d0a6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d0a8:	4283      	cmp	r3, r0
   1d0aa:	bf08      	it	eq
   1d0ac:	2300      	moveq	r3, #0
   1d0ae:	2b00      	cmp	r3, #0
   1d0b0:	bf38      	it	cc
   1d0b2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d0b4:	b1cb      	cbz	r3, 1d0ea <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   1d0b6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1d0ba:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1d0be:	42af      	cmp	r7, r5
   1d0c0:	d00f      	beq.n	1d0e2 <z_impl_k_yield+0x6e>
		return b2 - b1;
   1d0c2:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d0c4:	2d00      	cmp	r5, #0
   1d0c6:	dd0c      	ble.n	1d0e2 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1d0c8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1d0ca:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1d0ce:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1d0d0:	605a      	str	r2, [r3, #4]
	update_cache(1);
   1d0d2:	2001      	movs	r0, #1
   1d0d4:	f7ff fde0 	bl	1cc98 <update_cache>
   1d0d8:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   1d0da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d0de:	f7f6 be4b 	b.w	13d78 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1d0e2:	42b3      	cmp	r3, r6
   1d0e4:	d001      	beq.n	1d0ea <z_impl_k_yield+0x76>
   1d0e6:	681b      	ldr	r3, [r3, #0]
   1d0e8:	e7e4      	b.n	1d0b4 <z_impl_k_yield+0x40>
	node->prev = tail;
   1d0ea:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1d0ee:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1d0f0:	624a      	str	r2, [r1, #36]	; 0x24
}
   1d0f2:	e7ee      	b.n	1d0d2 <z_impl_k_yield+0x5e>
   1d0f4:	2000d5d8 	.word	0x2000d5d8

0001d0f8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1d0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0fc:	4604      	mov	r4, r0
   1d0fe:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1d100:	ea54 0105 	orrs.w	r1, r4, r5
   1d104:	d104      	bne.n	1d110 <z_tick_sleep+0x18>
	z_impl_k_yield();
   1d106:	f7ff ffb5 	bl	1d074 <z_impl_k_yield>
		k_yield();
		return 0;
   1d10a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1d110:	f06f 0101 	mvn.w	r1, #1
   1d114:	1a0a      	subs	r2, r1, r0
   1d116:	f04f 31ff 	mov.w	r1, #4294967295
   1d11a:	eb61 0305 	sbc.w	r3, r1, r5
   1d11e:	2a01      	cmp	r2, #1
   1d120:	f173 0300 	sbcs.w	r3, r3, #0
   1d124:	da2a      	bge.n	1d17c <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d126:	f005 f89a 	bl	2225e <sys_clock_tick_get_32>
   1d12a:	1906      	adds	r6, r0, r4
   1d12c:	f04f 0320 	mov.w	r3, #32
   1d130:	f3ef 8811 	mrs	r8, BASEPRI
   1d134:	f383 8812 	msr	BASEPRI_MAX, r3
   1d138:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1d13c:	4f11      	ldr	r7, [pc, #68]	; (1d184 <z_tick_sleep+0x8c>)
   1d13e:	4b12      	ldr	r3, [pc, #72]	; (1d188 <z_tick_sleep+0x90>)
   1d140:	68b8      	ldr	r0, [r7, #8]
   1d142:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1d144:	f7ff fe9e 	bl	1ce84 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1d148:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1d14a:	4910      	ldr	r1, [pc, #64]	; (1d18c <z_tick_sleep+0x94>)
   1d14c:	4622      	mov	r2, r4
   1d14e:	462b      	mov	r3, r5
   1d150:	3018      	adds	r0, #24
   1d152:	f000 f91b 	bl	1d38c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1d156:	68ba      	ldr	r2, [r7, #8]
   1d158:	4640      	mov	r0, r8
   1d15a:	7b53      	ldrb	r3, [r2, #13]
   1d15c:	f043 0310 	orr.w	r3, r3, #16
   1d160:	7353      	strb	r3, [r2, #13]
   1d162:	f7f6 fe09 	bl	13d78 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d166:	f005 f87a 	bl	2225e <sys_clock_tick_get_32>
   1d16a:	1a30      	subs	r0, r6, r0
   1d16c:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   1d170:	2801      	cmp	r0, #1
   1d172:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   1d176:	bfb8      	it	lt
   1d178:	2000      	movlt	r0, #0
   1d17a:	e7c7      	b.n	1d10c <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1d17c:	f06f 0601 	mvn.w	r6, #1
   1d180:	1a36      	subs	r6, r6, r0
   1d182:	e7d3      	b.n	1d12c <z_tick_sleep+0x34>
   1d184:	2000d5d8 	.word	0x2000d5d8
   1d188:	2000d608 	.word	0x2000d608
   1d18c:	0002208b 	.word	0x0002208b

0001d190 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1d190:	b508      	push	{r3, lr}
   1d192:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d194:	3301      	adds	r3, #1
   1d196:	bf08      	it	eq
   1d198:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1d19c:	d106      	bne.n	1d1ac <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1d19e:	4b08      	ldr	r3, [pc, #32]	; (1d1c0 <z_impl_k_sleep+0x30>)
   1d1a0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1d1a2:	f7ff ff0d 	bl	1cfc0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1d1a6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1d1aa:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1d1ac:	f7ff ffa4 	bl	1d0f8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1d1b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d1b4:	fb80 2303 	smull	r2, r3, r0, r3
   1d1b8:	0bd0      	lsrs	r0, r2, #15
   1d1ba:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1d1be:	e7f4      	b.n	1d1aa <z_impl_k_sleep+0x1a>
   1d1c0:	2000d5d8 	.word	0x2000d5d8

0001d1c4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1d1c4:	4b01      	ldr	r3, [pc, #4]	; (1d1cc <z_impl_z_current_get+0x8>)
   1d1c6:	6898      	ldr	r0, [r3, #8]
   1d1c8:	4770      	bx	lr
   1d1ca:	bf00      	nop
   1d1cc:	2000d5d8 	.word	0x2000d5d8

0001d1d0 <z_impl_k_is_preempt_thread>:
   1d1d0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1d1d4:	b93b      	cbnz	r3, 1d1e6 <z_impl_k_is_preempt_thread+0x16>
   1d1d6:	4b05      	ldr	r3, [pc, #20]	; (1d1ec <z_impl_k_is_preempt_thread+0x1c>)
   1d1d8:	689b      	ldr	r3, [r3, #8]
   1d1da:	89d8      	ldrh	r0, [r3, #14]
   1d1dc:	287f      	cmp	r0, #127	; 0x7f
   1d1de:	bf8c      	ite	hi
   1d1e0:	2000      	movhi	r0, #0
   1d1e2:	2001      	movls	r0, #1
   1d1e4:	4770      	bx	lr
   1d1e6:	2000      	movs	r0, #0
}
   1d1e8:	4770      	bx	lr
   1d1ea:	bf00      	nop
   1d1ec:	2000d5d8 	.word	0x2000d5d8

0001d1f0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1d1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1f4:	4604      	mov	r4, r0
   1d1f6:	f04f 0320 	mov.w	r3, #32
   1d1fa:	f3ef 8611 	mrs	r6, BASEPRI
   1d1fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1d202:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1d206:	7b43      	ldrb	r3, [r0, #13]
   1d208:	071a      	lsls	r2, r3, #28
   1d20a:	d505      	bpl.n	1d218 <z_thread_abort+0x28>
	__asm__ volatile(
   1d20c:	f386 8811 	msr	BASEPRI, r6
   1d210:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1d214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d218:	f023 0220 	bic.w	r2, r3, #32
   1d21c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1d220:	09d2      	lsrs	r2, r2, #7
   1d222:	d120      	bne.n	1d266 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d224:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1d226:	68a3      	ldr	r3, [r4, #8]
   1d228:	b113      	cbz	r3, 1d230 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1d22a:	4620      	mov	r0, r4
   1d22c:	f004 fec6 	bl	21fbc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1d230:	f104 0018 	add.w	r0, r4, #24
   1d234:	f004 ffd3 	bl	221de <z_abort_timeout>
   1d238:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1d23c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1d240:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d242:	42bd      	cmp	r5, r7
   1d244:	d000      	beq.n	1d248 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d246:	b9b5      	cbnz	r5, 1d276 <z_thread_abort+0x86>
		update_cache(1);
   1d248:	2001      	movs	r0, #1
   1d24a:	f7ff fd25 	bl	1cc98 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1d24e:	4b10      	ldr	r3, [pc, #64]	; (1d290 <z_thread_abort+0xa0>)
   1d250:	689b      	ldr	r3, [r3, #8]
   1d252:	42a3      	cmp	r3, r4
   1d254:	d1da      	bne.n	1d20c <z_thread_abort+0x1c>
   1d256:	f3ef 8305 	mrs	r3, IPSR
   1d25a:	2b00      	cmp	r3, #0
   1d25c:	d1d6      	bne.n	1d20c <z_thread_abort+0x1c>
   1d25e:	4630      	mov	r0, r6
   1d260:	f7f6 fd8a 	bl	13d78 <arch_swap>
	return ret;
   1d264:	e7d2      	b.n	1d20c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d266:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1d26a:	f043 0308 	orr.w	r3, r3, #8
   1d26e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d270:	f004 fe9c 	bl	21fac <sys_dlist_remove>
}
   1d274:	e7d7      	b.n	1d226 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1d276:	4628      	mov	r0, r5
   1d278:	f004 fea0 	bl	21fbc <unpend_thread_no_timeout>
   1d27c:	f105 0018 	add.w	r0, r5, #24
   1d280:	f004 ffad 	bl	221de <z_abort_timeout>
		ready_thread(thread);
   1d284:	4628      	mov	r0, r5
   1d286:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
   1d28a:	f7ff fda5 	bl	1cdd8 <ready_thread>
   1d28e:	e7d7      	b.n	1d240 <z_thread_abort+0x50>
   1d290:	2000d5d8 	.word	0x2000d5d8

0001d294 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1d294:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d296:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1d29a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d29c:	e9cd 6700 	strd	r6, r7, [sp]
   1d2a0:	f7ff fe2e 	bl	1cf00 <z_pend_curr>

	if (data != NULL) {
   1d2a4:	b11c      	cbz	r4, 1d2ae <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1d2a6:	4b03      	ldr	r3, [pc, #12]	; (1d2b4 <z_sched_wait+0x20>)
   1d2a8:	689b      	ldr	r3, [r3, #8]
   1d2aa:	695b      	ldr	r3, [r3, #20]
   1d2ac:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1d2ae:	b002      	add	sp, #8
   1d2b0:	bdd0      	pop	{r4, r6, r7, pc}
   1d2b2:	bf00      	nop
   1d2b4:	2000d5d8 	.word	0x2000d5d8

0001d2b8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1d2b8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d2ba:	4806      	ldr	r0, [pc, #24]	; (1d2d4 <z_data_copy+0x1c>)
   1d2bc:	4a06      	ldr	r2, [pc, #24]	; (1d2d8 <z_data_copy+0x20>)
   1d2be:	4907      	ldr	r1, [pc, #28]	; (1d2dc <z_data_copy+0x24>)
   1d2c0:	1a12      	subs	r2, r2, r0
   1d2c2:	f005 fa5b 	bl	2277c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1d2c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d2ca:	4a05      	ldr	r2, [pc, #20]	; (1d2e0 <z_data_copy+0x28>)
   1d2cc:	4905      	ldr	r1, [pc, #20]	; (1d2e4 <z_data_copy+0x2c>)
   1d2ce:	4806      	ldr	r0, [pc, #24]	; (1d2e8 <z_data_copy+0x30>)
   1d2d0:	f005 ba54 	b.w	2277c <memcpy>
   1d2d4:	2000c500 	.word	0x2000c500
   1d2d8:	2000c90c 	.word	0x2000c90c
   1d2dc:	00025424 	.word	0x00025424
   1d2e0:	00000000 	.word	0x00000000
   1d2e4:	0002540c 	.word	0x0002540c
   1d2e8:	2000c500 	.word	0x2000c500

0001d2ec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1d2ec:	4b03      	ldr	r3, [pc, #12]	; (1d2fc <elapsed+0x10>)
   1d2ee:	681b      	ldr	r3, [r3, #0]
   1d2f0:	b90b      	cbnz	r3, 1d2f6 <elapsed+0xa>
   1d2f2:	f7f8 baa3 	b.w	1583c <sys_clock_elapsed>
}
   1d2f6:	2000      	movs	r0, #0
   1d2f8:	4770      	bx	lr
   1d2fa:	bf00      	nop
   1d2fc:	2000d614 	.word	0x2000d614

0001d300 <remove_timeout>:
{
   1d300:	b530      	push	{r4, r5, lr}
   1d302:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d304:	b168      	cbz	r0, 1d322 <remove_timeout+0x22>
   1d306:	4a0a      	ldr	r2, [pc, #40]	; (1d330 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1d308:	6852      	ldr	r2, [r2, #4]
   1d30a:	4290      	cmp	r0, r2
   1d30c:	d009      	beq.n	1d322 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1d30e:	b143      	cbz	r3, 1d322 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1d310:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1d314:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1d318:	1912      	adds	r2, r2, r4
   1d31a:	eb45 0101 	adc.w	r1, r5, r1
   1d31e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1d322:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1d324:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d326:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d328:	2300      	movs	r3, #0
	node->prev = NULL;
   1d32a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d32e:	bd30      	pop	{r4, r5, pc}
   1d330:	2000c60c 	.word	0x2000c60c

0001d334 <next_timeout>:

static int32_t next_timeout(void)
{
   1d334:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1d336:	4b13      	ldr	r3, [pc, #76]	; (1d384 <next_timeout+0x50>)
   1d338:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d33a:	429c      	cmp	r4, r3
   1d33c:	bf08      	it	eq
   1d33e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1d340:	f7ff ffd4 	bl	1d2ec <elapsed>
   1d344:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1d346:	b1bc      	cbz	r4, 1d378 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1d348:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1d34c:	1b40      	subs	r0, r0, r5
   1d34e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1d352:	2801      	cmp	r0, #1
   1d354:	f171 0300 	sbcs.w	r3, r1, #0
   1d358:	db11      	blt.n	1d37e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1d35a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1d35e:	2300      	movs	r3, #0
   1d360:	4282      	cmp	r2, r0
   1d362:	eb73 0401 	sbcs.w	r4, r3, r1
   1d366:	da00      	bge.n	1d36a <next_timeout+0x36>
   1d368:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1d36a:	4b07      	ldr	r3, [pc, #28]	; (1d388 <next_timeout+0x54>)
   1d36c:	691b      	ldr	r3, [r3, #16]
   1d36e:	b113      	cbz	r3, 1d376 <next_timeout+0x42>
   1d370:	4298      	cmp	r0, r3
   1d372:	bfa8      	it	ge
   1d374:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1d376:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1d378:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d37c:	e7f5      	b.n	1d36a <next_timeout+0x36>
   1d37e:	2000      	movs	r0, #0
   1d380:	e7f3      	b.n	1d36a <next_timeout+0x36>
   1d382:	bf00      	nop
   1d384:	2000c60c 	.word	0x2000c60c
   1d388:	2000d5d8 	.word	0x2000d5d8

0001d38c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d38c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d390:	bf08      	it	eq
   1d392:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1d396:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d39a:	4604      	mov	r4, r0
   1d39c:	4692      	mov	sl, r2
   1d39e:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d3a0:	d073      	beq.n	1d48a <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1d3a2:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1d3a4:	f04f 0320 	mov.w	r3, #32
   1d3a8:	f3ef 8511 	mrs	r5, BASEPRI
   1d3ac:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3b0:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1d3b4:	f06f 0301 	mvn.w	r3, #1
   1d3b8:	f04f 32ff 	mov.w	r2, #4294967295
   1d3bc:	ebb3 080a 	subs.w	r8, r3, sl
   1d3c0:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1d3c4:	f1b8 0f00 	cmp.w	r8, #0
   1d3c8:	f179 0100 	sbcs.w	r1, r9, #0
   1d3cc:	db1c      	blt.n	1d408 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1d3ce:	4830      	ldr	r0, [pc, #192]	; (1d490 <z_add_timeout+0x104>)
   1d3d0:	e9d0 1000 	ldrd	r1, r0, [r0]
   1d3d4:	1a5b      	subs	r3, r3, r1
   1d3d6:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1d3da:	ebb3 060a 	subs.w	r6, r3, sl
   1d3de:	eb62 070b 	sbc.w	r7, r2, fp
   1d3e2:	2e01      	cmp	r6, #1
   1d3e4:	f177 0300 	sbcs.w	r3, r7, #0
   1d3e8:	bfbc      	itt	lt
   1d3ea:	2601      	movlt	r6, #1
   1d3ec:	2700      	movlt	r7, #0
   1d3ee:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1d3f2:	4a28      	ldr	r2, [pc, #160]	; (1d494 <z_add_timeout+0x108>)
   1d3f4:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d3f8:	4293      	cmp	r3, r2
   1d3fa:	d11e      	bne.n	1d43a <z_add_timeout+0xae>
	node->prev = tail;
   1d3fc:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1d400:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1d404:	6054      	str	r4, [r2, #4]
}
   1d406:	e02d      	b.n	1d464 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1d408:	f7ff ff70 	bl	1d2ec <elapsed>
   1d40c:	f11a 0301 	adds.w	r3, sl, #1
   1d410:	9300      	str	r3, [sp, #0]
   1d412:	f14b 0300 	adc.w	r3, fp, #0
   1d416:	9301      	str	r3, [sp, #4]
   1d418:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d41c:	1812      	adds	r2, r2, r0
   1d41e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1d422:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1d426:	e7e4      	b.n	1d3f2 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1d428:	ebb6 0008 	subs.w	r0, r6, r8
   1d42c:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1d430:	4563      	cmp	r3, ip
   1d432:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1d436:	d0e1      	beq.n	1d3fc <z_add_timeout+0x70>
   1d438:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1d43a:	2b00      	cmp	r3, #0
   1d43c:	d0de      	beq.n	1d3fc <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   1d43e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1d442:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1d446:	4546      	cmp	r6, r8
   1d448:	eb77 0109 	sbcs.w	r1, r7, r9
   1d44c:	daec      	bge.n	1d428 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   1d44e:	ebb8 0006 	subs.w	r0, r8, r6
   1d452:	eb69 0107 	sbc.w	r1, r9, r7
   1d456:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1d45a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1d45c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1d460:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1d462:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1d464:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d466:	4293      	cmp	r3, r2
   1d468:	d00b      	beq.n	1d482 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1d46a:	429c      	cmp	r4, r3
   1d46c:	d109      	bne.n	1d482 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1d46e:	f7ff ff61 	bl	1d334 <next_timeout>

			if (next_time == 0 ||
   1d472:	b118      	cbz	r0, 1d47c <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   1d474:	4b08      	ldr	r3, [pc, #32]	; (1d498 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1d476:	691b      	ldr	r3, [r3, #16]
   1d478:	4283      	cmp	r3, r0
   1d47a:	d002      	beq.n	1d482 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   1d47c:	2100      	movs	r1, #0
   1d47e:	f7f8 f9ad 	bl	157dc <sys_clock_set_timeout>
	__asm__ volatile(
   1d482:	f385 8811 	msr	BASEPRI, r5
   1d486:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1d48a:	b003      	add	sp, #12
   1d48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d490:	2000ceb8 	.word	0x2000ceb8
   1d494:	2000c60c 	.word	0x2000c60c
   1d498:	2000d5d8 	.word	0x2000d5d8

0001d49c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1d49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4a0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1d4a2:	f7ff fc57 	bl	1cd54 <z_time_slice>
	__asm__ volatile(
   1d4a6:	f04f 0320 	mov.w	r3, #32
   1d4aa:	f3ef 8411 	mrs	r4, BASEPRI
   1d4ae:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4b2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1d4b6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1d568 <sys_clock_announce+0xcc>
   1d4ba:	4d2a      	ldr	r5, [pc, #168]	; (1d564 <sys_clock_announce+0xc8>)
   1d4bc:	4651      	mov	r1, sl
	return list->head == list;
   1d4be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1d56c <sys_clock_announce+0xd0>
   1d4c2:	602e      	str	r6, [r5, #0]
   1d4c4:	f8d5 c000 	ldr.w	ip, [r5]
   1d4c8:	f8db 0000 	ldr.w	r0, [fp]
   1d4cc:	4662      	mov	r2, ip
   1d4ce:	e9da 8900 	ldrd	r8, r9, [sl]
   1d4d2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d4d4:	4558      	cmp	r0, fp
   1d4d6:	e9cd 2300 	strd	r2, r3, [sp]
   1d4da:	d00d      	beq.n	1d4f8 <sys_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1d4dc:	b160      	cbz	r0, 1d4f8 <sys_clock_announce+0x5c>
   1d4de:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1d4e2:	45b4      	cmp	ip, r6
   1d4e4:	41bb      	sbcs	r3, r7
   1d4e6:	da1d      	bge.n	1d524 <sys_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1d4e8:	9b00      	ldr	r3, [sp, #0]
   1d4ea:	ebb6 0c03 	subs.w	ip, r6, r3
   1d4ee:	9b01      	ldr	r3, [sp, #4]
   1d4f0:	eb67 0603 	sbc.w	r6, r7, r3
   1d4f4:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1d4f8:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   1d4fa:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   1d4fc:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   1d4fe:	eb13 0208 	adds.w	r2, r3, r8
   1d502:	9b01      	ldr	r3, [sp, #4]
   1d504:	eb43 0309 	adc.w	r3, r3, r9
   1d508:	e9c1 2300 	strd	r2, r3, [r1]

	sys_clock_set_timeout(next_timeout(), false);
   1d50c:	f7ff ff12 	bl	1d334 <next_timeout>
   1d510:	4631      	mov	r1, r6
   1d512:	f7f8 f963 	bl	157dc <sys_clock_set_timeout>
	__asm__ volatile(
   1d516:	f384 8811 	msr	BASEPRI, r4
   1d51a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1d51e:	b003      	add	sp, #12
   1d520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   1d524:	2200      	movs	r2, #0
   1d526:	2300      	movs	r3, #0
		curr_tick += dt;
   1d528:	eb18 0806 	adds.w	r8, r8, r6
   1d52c:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1d530:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1d534:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1d538:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1d53c:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1d53e:	f7ff fedf 	bl	1d300 <remove_timeout>
   1d542:	f384 8811 	msr	BASEPRI, r4
   1d546:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1d54a:	6883      	ldr	r3, [r0, #8]
   1d54c:	4798      	blx	r3
	__asm__ volatile(
   1d54e:	f04f 0320 	mov.w	r3, #32
   1d552:	f3ef 8411 	mrs	r4, BASEPRI
   1d556:	f383 8812 	msr	BASEPRI_MAX, r3
   1d55a:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1d55e:	4902      	ldr	r1, [pc, #8]	; (1d568 <sys_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1d560:	e7b0      	b.n	1d4c4 <sys_clock_announce+0x28>
   1d562:	bf00      	nop
   1d564:	2000d614 	.word	0x2000d614
   1d568:	2000ceb8 	.word	0x2000ceb8
   1d56c:	2000c60c 	.word	0x2000c60c

0001d570 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1d570:	b510      	push	{r4, lr}
   1d572:	f04f 0320 	mov.w	r3, #32
   1d576:	f3ef 8411 	mrs	r4, BASEPRI
   1d57a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d57e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1d582:	f7f8 f95b 	bl	1583c <sys_clock_elapsed>
   1d586:	4b06      	ldr	r3, [pc, #24]	; (1d5a0 <sys_clock_tick_get+0x30>)
   1d588:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d58c:	1812      	adds	r2, r2, r0
   1d58e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1d592:	f384 8811 	msr	BASEPRI, r4
   1d596:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1d59a:	4610      	mov	r0, r2
   1d59c:	4619      	mov	r1, r3
   1d59e:	bd10      	pop	{r4, pc}
   1d5a0:	2000ceb8 	.word	0x2000ceb8

0001d5a4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d5a6:	4604      	mov	r4, r0
	__asm__ volatile(
   1d5a8:	f04f 0320 	mov.w	r3, #32
   1d5ac:	f3ef 8511 	mrs	r5, BASEPRI
   1d5b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5b4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d5b8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1d5bc:	1c56      	adds	r6, r2, #1
   1d5be:	f143 0700 	adc.w	r7, r3, #0
   1d5c2:	2f00      	cmp	r7, #0
   1d5c4:	bf08      	it	eq
   1d5c6:	2e02      	cmpeq	r6, #2
   1d5c8:	d302      	bcc.n	1d5d0 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d5ca:	4918      	ldr	r1, [pc, #96]	; (1d62c <z_timer_expiration_handler+0x88>)
   1d5cc:	f7ff fede 	bl	1d38c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1d5d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d5d2:	3301      	adds	r3, #1
   1d5d4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1d5d6:	6a23      	ldr	r3, [r4, #32]
   1d5d8:	b173      	cbz	r3, 1d5f8 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   1d5da:	f385 8811 	msr	BASEPRI, r5
   1d5de:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1d5e2:	4620      	mov	r0, r4
   1d5e4:	6a23      	ldr	r3, [r4, #32]
   1d5e6:	4798      	blx	r3
	__asm__ volatile(
   1d5e8:	f04f 0320 	mov.w	r3, #32
   1d5ec:	f3ef 8511 	mrs	r5, BASEPRI
   1d5f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5f4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1d5f8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d5fc:	42a6      	cmp	r6, r4
   1d5fe:	d000      	beq.n	1d602 <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1d600:	b926      	cbnz	r6, 1d60c <z_timer_expiration_handler+0x68>
	__asm__ volatile(
   1d602:	f385 8811 	msr	BASEPRI, r5
   1d606:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1d60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   1d60c:	4630      	mov	r0, r6
   1d60e:	f004 fce8 	bl	21fe2 <z_unpend_thread_no_timeout>
   1d612:	2300      	movs	r3, #0
   1d614:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
   1d618:	f385 8811 	msr	BASEPRI, r5
   1d61c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1d620:	4630      	mov	r0, r6
}
   1d622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1d626:	f004 bd20 	b.w	2206a <z_ready_thread>
   1d62a:	bf00      	nop
   1d62c:	0001d5a5 	.word	0x0001d5a5

0001d630 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1d630:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1d634:	4619      	mov	r1, r3
   1d636:	4606      	mov	r6, r0
   1d638:	4610      	mov	r0, r2
   1d63a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d63e:	1c4c      	adds	r4, r1, #1
   1d640:	bf08      	it	eq
   1d642:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1d646:	4680      	mov	r8, r0
   1d648:	4689      	mov	r9, r1
   1d64a:	d04c      	beq.n	1d6e6 <z_impl_k_timer_start+0xb6>
   1d64c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1d64e:	1c6b      	adds	r3, r5, #1
   1d650:	bf08      	it	eq
   1d652:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1d656:	4614      	mov	r4, r2
   1d658:	d019      	beq.n	1d68e <z_impl_k_timer_start+0x5e>
   1d65a:	ea54 0305 	orrs.w	r3, r4, r5
   1d65e:	d016      	beq.n	1d68e <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1d660:	f06f 0301 	mvn.w	r3, #1
   1d664:	ebb3 0a02 	subs.w	sl, r3, r2
   1d668:	f04f 33ff 	mov.w	r3, #4294967295
   1d66c:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1d670:	f1ba 0f00 	cmp.w	sl, #0
   1d674:	f17b 0300 	sbcs.w	r3, fp, #0
   1d678:	da09      	bge.n	1d68e <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1d67a:	f112 34ff 	adds.w	r4, r2, #4294967295
   1d67e:	f145 35ff 	adc.w	r5, r5, #4294967295
   1d682:	2c01      	cmp	r4, #1
   1d684:	f175 0300 	sbcs.w	r3, r5, #0
   1d688:	bfbc      	itt	lt
   1d68a:	2401      	movlt	r4, #1
   1d68c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1d68e:	f06f 0301 	mvn.w	r3, #1
   1d692:	1a1b      	subs	r3, r3, r0
   1d694:	9300      	str	r3, [sp, #0]
   1d696:	f04f 33ff 	mov.w	r3, #4294967295
   1d69a:	eb63 0301 	sbc.w	r3, r3, r1
   1d69e:	9301      	str	r3, [sp, #4]
   1d6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d6a4:	2a00      	cmp	r2, #0
   1d6a6:	f173 0300 	sbcs.w	r3, r3, #0
   1d6aa:	da0c      	bge.n	1d6c6 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1d6ac:	f110 38ff 	adds.w	r8, r0, #4294967295
   1d6b0:	f141 39ff 	adc.w	r9, r1, #4294967295
   1d6b4:	f1b8 0f00 	cmp.w	r8, #0
   1d6b8:	f179 0300 	sbcs.w	r3, r9, #0
   1d6bc:	bfbc      	itt	lt
   1d6be:	f04f 0800 	movlt.w	r8, #0
   1d6c2:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1d6c6:	4630      	mov	r0, r6
   1d6c8:	f004 fd89 	bl	221de <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1d6cc:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d6ce:	4642      	mov	r2, r8
	timer->status = 0U;
   1d6d0:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d6d2:	4630      	mov	r0, r6
   1d6d4:	464b      	mov	r3, r9
   1d6d6:	4905      	ldr	r1, [pc, #20]	; (1d6ec <z_impl_k_timer_start+0xbc>)
	timer->period = period;
   1d6d8:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1d6dc:	b002      	add	sp, #8
   1d6de:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d6e2:	f7ff be53 	b.w	1d38c <z_add_timeout>
}
   1d6e6:	b002      	add	sp, #8
   1d6e8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1d6ec:	0001d5a5 	.word	0x0001d5a5

0001d6f0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1d6f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d6f4:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1d6f6:	4b29      	ldr	r3, [pc, #164]	; (1d79c <z_impl_k_poll+0xac>)
{
   1d6f8:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   1d6fa:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1d6fc:	2301      	movs	r3, #1
   1d6fe:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1d702:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1d706:	ea52 0307 	orrs.w	r3, r2, r7
   1d70a:	bf0c      	ite	eq
   1d70c:	2301      	moveq	r3, #1
   1d70e:	2300      	movne	r3, #0
   1d710:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1d714:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1d716:	f004 fe60 	bl	223da <register_events>
   1d71a:	4681      	mov	r9, r0
	__asm__ volatile(
   1d71c:	f04f 0320 	mov.w	r3, #32
   1d720:	f3ef 8a11 	mrs	sl, BASEPRI
   1d724:	f383 8812 	msr	BASEPRI_MAX, r3
   1d728:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1d72c:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1d730:	b964      	cbnz	r4, 1d74c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1d732:	4601      	mov	r1, r0
   1d734:	4652      	mov	r2, sl
   1d736:	4640      	mov	r0, r8
   1d738:	f004 fded 	bl	22316 <clear_event_registrations>
	__asm__ volatile(
   1d73c:	f38a 8811 	msr	BASEPRI, sl
   1d740:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1d744:	4620      	mov	r0, r4
   1d746:	b002      	add	sp, #8
   1d748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1d74c:	2300      	movs	r3, #0
   1d74e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d752:	ea56 0307 	orrs.w	r3, r6, r7
   1d756:	d106      	bne.n	1d766 <z_impl_k_poll+0x76>
   1d758:	f38a 8811 	msr	BASEPRI, sl
   1d75c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1d760:	f06f 040a 	mvn.w	r4, #10
   1d764:	e7ee      	b.n	1d744 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d766:	4651      	mov	r1, sl
   1d768:	e9cd 6700 	strd	r6, r7, [sp]
   1d76c:	4a0c      	ldr	r2, [pc, #48]	; (1d7a0 <z_impl_k_poll+0xb0>)
   1d76e:	480d      	ldr	r0, [pc, #52]	; (1d7a4 <z_impl_k_poll+0xb4>)
   1d770:	f7ff fbc6 	bl	1cf00 <z_pend_curr>
   1d774:	4604      	mov	r4, r0
	__asm__ volatile(
   1d776:	f04f 0320 	mov.w	r3, #32
   1d77a:	f3ef 8511 	mrs	r5, BASEPRI
   1d77e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d782:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1d786:	462a      	mov	r2, r5
   1d788:	4649      	mov	r1, r9
   1d78a:	4640      	mov	r0, r8
   1d78c:	f004 fdc3 	bl	22316 <clear_event_registrations>
	__asm__ volatile(
   1d790:	f385 8811 	msr	BASEPRI, r5
   1d794:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1d798:	e7d4      	b.n	1d744 <z_impl_k_poll+0x54>
   1d79a:	bf00      	nop
   1d79c:	2000d5d8 	.word	0x2000d5d8
   1d7a0:	2000c614 	.word	0x2000c614
   1d7a4:	2000f53e 	.word	0x2000f53e

0001d7a8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1d7a8:	b538      	push	{r3, r4, r5, lr}
   1d7aa:	4603      	mov	r3, r0
	__asm__ volatile(
   1d7ac:	f04f 0220 	mov.w	r2, #32
   1d7b0:	f3ef 8511 	mrs	r5, BASEPRI
   1d7b4:	f382 8812 	msr	BASEPRI_MAX, r2
   1d7b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1d7bc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1d7be:	2101      	movs	r1, #1
   1d7c0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1d7c2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d7c4:	4283      	cmp	r3, r0
   1d7c6:	d106      	bne.n	1d7d6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1d7c8:	f385 8811 	msr	BASEPRI, r5
   1d7cc:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1d7d0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1d7d2:	4620      	mov	r0, r4
   1d7d4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1d7d6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d7da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d7dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d7de:	2300      	movs	r3, #0
	node->prev = NULL;
   1d7e0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d7e4:	f004 fe70 	bl	224c8 <signal_poll_event>
	z_reschedule(&lock, key);
   1d7e8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d7ea:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1d7ec:	4801      	ldr	r0, [pc, #4]	; (1d7f4 <z_impl_k_poll_signal_raise+0x4c>)
   1d7ee:	f7ff fa2d 	bl	1cc4c <z_reschedule>
	return rc;
   1d7f2:	e7ee      	b.n	1d7d2 <z_impl_k_poll_signal_raise+0x2a>
   1d7f4:	2000f53e 	.word	0x2000f53e

0001d7f8 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   1d7f8:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1d7fa:	4601      	mov	r1, r0
   1d7fc:	4801      	ldr	r0, [pc, #4]	; (1d804 <k_aligned_alloc+0xc>)
   1d7fe:	f004 bf6d 	b.w	226dc <z_heap_aligned_alloc>
   1d802:	bf00      	nop
   1d804:	2000c7dc 	.word	0x2000c7dc

0001d808 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1d808:	b538      	push	{r3, r4, r5, lr}
   1d80a:	4604      	mov	r4, r0
   1d80c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1d80e:	f004 faca 	bl	21da6 <k_is_in_isr>
   1d812:	b958      	cbnz	r0, 1d82c <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1d814:	4b07      	ldr	r3, [pc, #28]	; (1d834 <z_thread_aligned_alloc+0x2c>)
   1d816:	689b      	ldr	r3, [r3, #8]
   1d818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap != NULL) {
   1d81c:	b143      	cbz	r3, 1d830 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1d81e:	462a      	mov	r2, r5
   1d820:	4621      	mov	r1, r4
   1d822:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1d824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1d828:	f004 bf58 	b.w	226dc <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1d82c:	4b02      	ldr	r3, [pc, #8]	; (1d838 <z_thread_aligned_alloc+0x30>)
   1d82e:	e7f6      	b.n	1d81e <z_thread_aligned_alloc+0x16>
}
   1d830:	bd38      	pop	{r3, r4, r5, pc}
   1d832:	bf00      	nop
   1d834:	2000d5d8 	.word	0x2000d5d8
   1d838:	2000c7dc 	.word	0x2000c7dc

0001d83c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1d83c:	4a02      	ldr	r2, [pc, #8]	; (1d848 <boot_banner+0xc>)
   1d83e:	4903      	ldr	r1, [pc, #12]	; (1d84c <boot_banner+0x10>)
   1d840:	4803      	ldr	r0, [pc, #12]	; (1d850 <boot_banner+0x14>)
   1d842:	f001 b9f7 	b.w	1ec34 <printk>
   1d846:	bf00      	nop
   1d848:	000250f6 	.word	0x000250f6
   1d84c:	00025279 	.word	0x00025279
   1d850:	00025288 	.word	0x00025288

0001d854 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1d854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1d856:	2400      	movs	r4, #0
   1d858:	4b08      	ldr	r3, [pc, #32]	; (1d87c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1d85a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   1d85e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   1d860:	ab02      	add	r3, sp, #8
   1d862:	9300      	str	r3, [sp, #0]
   1d864:	4906      	ldr	r1, [pc, #24]	; (1d880 <k_sys_work_q_init+0x2c>)
   1d866:	f04f 33ff 	mov.w	r3, #4294967295
   1d86a:	4806      	ldr	r0, [pc, #24]	; (1d884 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1d86c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1d870:	f7ff f93a 	bl	1cae8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1d874:	4620      	mov	r0, r4
   1d876:	b004      	add	sp, #16
   1d878:	bd10      	pop	{r4, pc}
   1d87a:	bf00      	nop
   1d87c:	000252af 	.word	0x000252af
   1d880:	20015708 	.word	0x20015708
   1d884:	2000cec0 	.word	0x2000cec0

0001d888 <gmtime_r>:
   1d888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d88c:	e9d0 6700 	ldrd	r6, r7, [r0]
   1d890:	460c      	mov	r4, r1
   1d892:	4a50      	ldr	r2, [pc, #320]	; (1d9d4 <gmtime_r+0x14c>)
   1d894:	2300      	movs	r3, #0
   1d896:	4630      	mov	r0, r6
   1d898:	4639      	mov	r1, r7
   1d89a:	f04f 0805 	mov.w	r8, #5
   1d89e:	f7f3 faaf 	bl	10e00 <__aeabi_ldivmod>
   1d8a2:	4639      	mov	r1, r7
   1d8a4:	4605      	mov	r5, r0
   1d8a6:	4a4b      	ldr	r2, [pc, #300]	; (1d9d4 <gmtime_r+0x14c>)
   1d8a8:	4630      	mov	r0, r6
   1d8aa:	2300      	movs	r3, #0
   1d8ac:	f7f3 faa8 	bl	10e00 <__aeabi_ldivmod>
   1d8b0:	2a00      	cmp	r2, #0
   1d8b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1d8b6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   1d8ba:	bfb8      	it	lt
   1d8bc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   1d8c0:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   1d8c4:	bfae      	itee	ge
   1d8c6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   1d8ca:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   1d8ce:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   1d8d2:	f240 176d 	movw	r7, #365	; 0x16d
   1d8d6:	2664      	movs	r6, #100	; 0x64
   1d8d8:	fbb2 f3f1 	udiv	r3, r2, r1
   1d8dc:	fb01 2213 	mls	r2, r1, r3, r2
   1d8e0:	213c      	movs	r1, #60	; 0x3c
   1d8e2:	60a3      	str	r3, [r4, #8]
   1d8e4:	fbb2 f3f1 	udiv	r3, r2, r1
   1d8e8:	fb01 2213 	mls	r2, r1, r3, r2
   1d8ec:	493a      	ldr	r1, [pc, #232]	; (1d9d8 <gmtime_r+0x150>)
   1d8ee:	6063      	str	r3, [r4, #4]
   1d8f0:	1cc3      	adds	r3, r0, #3
   1d8f2:	6022      	str	r2, [r4, #0]
   1d8f4:	2207      	movs	r2, #7
   1d8f6:	fb93 f2f2 	sdiv	r2, r3, r2
   1d8fa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1d8fe:	1a9b      	subs	r3, r3, r2
   1d900:	f648 62ac 	movw	r2, #36524	; 0x8eac
   1d904:	bf48      	it	mi
   1d906:	3307      	addmi	r3, #7
   1d908:	2800      	cmp	r0, #0
   1d90a:	61a3      	str	r3, [r4, #24]
   1d90c:	bfbb      	ittet	lt
   1d90e:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   1d912:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   1d916:	fb90 f1f1 	sdivge	r1, r0, r1
   1d91a:	fb93 f1f1 	sdivlt	r1, r3, r1
   1d91e:	4b2f      	ldr	r3, [pc, #188]	; (1d9dc <gmtime_r+0x154>)
   1d920:	fb03 0001 	mla	r0, r3, r1, r0
   1d924:	fbb0 f2f2 	udiv	r2, r0, r2
   1d928:	fbb0 f3fc 	udiv	r3, r0, ip
   1d92c:	4402      	add	r2, r0
   1d92e:	1ad2      	subs	r2, r2, r3
   1d930:	4b2b      	ldr	r3, [pc, #172]	; (1d9e0 <gmtime_r+0x158>)
   1d932:	fbb0 f3f3 	udiv	r3, r0, r3
   1d936:	1ad3      	subs	r3, r2, r3
   1d938:	fbb3 f5f7 	udiv	r5, r3, r7
   1d93c:	fbb3 f3fc 	udiv	r3, r3, ip
   1d940:	fbb5 f2f6 	udiv	r2, r5, r6
   1d944:	1ad3      	subs	r3, r2, r3
   1d946:	4403      	add	r3, r0
   1d948:	2099      	movs	r0, #153	; 0x99
   1d94a:	fb07 3315 	mls	r3, r7, r5, r3
   1d94e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1d952:	f103 0e01 	add.w	lr, r3, #1
   1d956:	f10c 0c02 	add.w	ip, ip, #2
   1d95a:	fbbc f7f0 	udiv	r7, ip, r0
   1d95e:	4378      	muls	r0, r7
   1d960:	3002      	adds	r0, #2
   1d962:	fbb0 f0f8 	udiv	r0, r0, r8
   1d966:	ebae 0000 	sub.w	r0, lr, r0
   1d96a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   1d96e:	45f4      	cmp	ip, lr
   1d970:	bf94      	ite	ls
   1d972:	f04f 0c02 	movls.w	ip, #2
   1d976:	f06f 0c09 	mvnhi.w	ip, #9
   1d97a:	4467      	add	r7, ip
   1d97c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   1d980:	fb0c 5101 	mla	r1, ip, r1, r5
   1d984:	2f01      	cmp	r7, #1
   1d986:	bf98      	it	ls
   1d988:	3101      	addls	r1, #1
   1d98a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   1d98e:	d30c      	bcc.n	1d9aa <gmtime_r+0x122>
   1d990:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   1d994:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   1d998:	61e3      	str	r3, [r4, #28]
   1d99a:	2300      	movs	r3, #0
   1d99c:	60e0      	str	r0, [r4, #12]
   1d99e:	4620      	mov	r0, r4
   1d9a0:	6223      	str	r3, [r4, #32]
   1d9a2:	e9c4 7104 	strd	r7, r1, [r4, #16]
   1d9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d9aa:	f015 0f03 	tst.w	r5, #3
   1d9ae:	d102      	bne.n	1d9b6 <gmtime_r+0x12e>
   1d9b0:	fb06 5212 	mls	r2, r6, r2, r5
   1d9b4:	b95a      	cbnz	r2, 1d9ce <gmtime_r+0x146>
   1d9b6:	f44f 76c8 	mov.w	r6, #400	; 0x190
   1d9ba:	fbb5 f2f6 	udiv	r2, r5, r6
   1d9be:	fb06 5212 	mls	r2, r6, r2, r5
   1d9c2:	fab2 f282 	clz	r2, r2
   1d9c6:	0952      	lsrs	r2, r2, #5
   1d9c8:	333b      	adds	r3, #59	; 0x3b
   1d9ca:	4413      	add	r3, r2
   1d9cc:	e7e2      	b.n	1d994 <gmtime_r+0x10c>
   1d9ce:	2201      	movs	r2, #1
   1d9d0:	e7fa      	b.n	1d9c8 <gmtime_r+0x140>
   1d9d2:	bf00      	nop
   1d9d4:	00015180 	.word	0x00015180
   1d9d8:	00023ab1 	.word	0x00023ab1
   1d9dc:	fffdc54f 	.word	0xfffdc54f
   1d9e0:	00023ab0 	.word	0x00023ab0

0001d9e4 <_free_r>:
   1d9e4:	b538      	push	{r3, r4, r5, lr}
   1d9e6:	4605      	mov	r5, r0
   1d9e8:	2900      	cmp	r1, #0
   1d9ea:	d045      	beq.n	1da78 <_free_r+0x94>
   1d9ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d9f0:	1f0c      	subs	r4, r1, #4
   1d9f2:	2b00      	cmp	r3, #0
   1d9f4:	bfb8      	it	lt
   1d9f6:	18e4      	addlt	r4, r4, r3
   1d9f8:	f000 fa8e 	bl	1df18 <__malloc_lock>
   1d9fc:	4a1f      	ldr	r2, [pc, #124]	; (1da7c <_free_r+0x98>)
   1d9fe:	6813      	ldr	r3, [r2, #0]
   1da00:	4610      	mov	r0, r2
   1da02:	b933      	cbnz	r3, 1da12 <_free_r+0x2e>
   1da04:	6063      	str	r3, [r4, #4]
   1da06:	6014      	str	r4, [r2, #0]
   1da08:	4628      	mov	r0, r5
   1da0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1da0e:	f000 ba89 	b.w	1df24 <__malloc_unlock>
   1da12:	42a3      	cmp	r3, r4
   1da14:	d90b      	bls.n	1da2e <_free_r+0x4a>
   1da16:	6821      	ldr	r1, [r4, #0]
   1da18:	1862      	adds	r2, r4, r1
   1da1a:	4293      	cmp	r3, r2
   1da1c:	bf02      	ittt	eq
   1da1e:	681a      	ldreq	r2, [r3, #0]
   1da20:	685b      	ldreq	r3, [r3, #4]
   1da22:	1852      	addeq	r2, r2, r1
   1da24:	6063      	str	r3, [r4, #4]
   1da26:	bf08      	it	eq
   1da28:	6022      	streq	r2, [r4, #0]
   1da2a:	6004      	str	r4, [r0, #0]
   1da2c:	e7ec      	b.n	1da08 <_free_r+0x24>
   1da2e:	461a      	mov	r2, r3
   1da30:	685b      	ldr	r3, [r3, #4]
   1da32:	b10b      	cbz	r3, 1da38 <_free_r+0x54>
   1da34:	42a3      	cmp	r3, r4
   1da36:	d9fa      	bls.n	1da2e <_free_r+0x4a>
   1da38:	6811      	ldr	r1, [r2, #0]
   1da3a:	1850      	adds	r0, r2, r1
   1da3c:	42a0      	cmp	r0, r4
   1da3e:	d10b      	bne.n	1da58 <_free_r+0x74>
   1da40:	6820      	ldr	r0, [r4, #0]
   1da42:	4401      	add	r1, r0
   1da44:	1850      	adds	r0, r2, r1
   1da46:	6011      	str	r1, [r2, #0]
   1da48:	4283      	cmp	r3, r0
   1da4a:	d1dd      	bne.n	1da08 <_free_r+0x24>
   1da4c:	6818      	ldr	r0, [r3, #0]
   1da4e:	685b      	ldr	r3, [r3, #4]
   1da50:	4401      	add	r1, r0
   1da52:	6053      	str	r3, [r2, #4]
   1da54:	6011      	str	r1, [r2, #0]
   1da56:	e7d7      	b.n	1da08 <_free_r+0x24>
   1da58:	d902      	bls.n	1da60 <_free_r+0x7c>
   1da5a:	230c      	movs	r3, #12
   1da5c:	602b      	str	r3, [r5, #0]
   1da5e:	e7d3      	b.n	1da08 <_free_r+0x24>
   1da60:	6820      	ldr	r0, [r4, #0]
   1da62:	1821      	adds	r1, r4, r0
   1da64:	428b      	cmp	r3, r1
   1da66:	bf02      	ittt	eq
   1da68:	6819      	ldreq	r1, [r3, #0]
   1da6a:	685b      	ldreq	r3, [r3, #4]
   1da6c:	1809      	addeq	r1, r1, r0
   1da6e:	6063      	str	r3, [r4, #4]
   1da70:	bf08      	it	eq
   1da72:	6021      	streq	r1, [r4, #0]
   1da74:	6054      	str	r4, [r2, #4]
   1da76:	e7c7      	b.n	1da08 <_free_r+0x24>
   1da78:	bd38      	pop	{r3, r4, r5, pc}
   1da7a:	bf00      	nop
   1da7c:	2000d618 	.word	0x2000d618

0001da80 <_malloc_r>:
   1da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da82:	1ccd      	adds	r5, r1, #3
   1da84:	4606      	mov	r6, r0
   1da86:	f025 0503 	bic.w	r5, r5, #3
   1da8a:	3508      	adds	r5, #8
   1da8c:	2d0c      	cmp	r5, #12
   1da8e:	bf38      	it	cc
   1da90:	250c      	movcc	r5, #12
   1da92:	2d00      	cmp	r5, #0
   1da94:	db01      	blt.n	1da9a <_malloc_r+0x1a>
   1da96:	42a9      	cmp	r1, r5
   1da98:	d903      	bls.n	1daa2 <_malloc_r+0x22>
   1da9a:	230c      	movs	r3, #12
   1da9c:	6033      	str	r3, [r6, #0]
   1da9e:	2000      	movs	r0, #0
   1daa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1daa2:	f000 fa39 	bl	1df18 <__malloc_lock>
   1daa6:	4921      	ldr	r1, [pc, #132]	; (1db2c <_malloc_r+0xac>)
   1daa8:	680a      	ldr	r2, [r1, #0]
   1daaa:	4614      	mov	r4, r2
   1daac:	b99c      	cbnz	r4, 1dad6 <_malloc_r+0x56>
   1daae:	4f20      	ldr	r7, [pc, #128]	; (1db30 <_malloc_r+0xb0>)
   1dab0:	683b      	ldr	r3, [r7, #0]
   1dab2:	b923      	cbnz	r3, 1dabe <_malloc_r+0x3e>
   1dab4:	4621      	mov	r1, r4
   1dab6:	4630      	mov	r0, r6
   1dab8:	f000 f83c 	bl	1db34 <_sbrk_r>
   1dabc:	6038      	str	r0, [r7, #0]
   1dabe:	4629      	mov	r1, r5
   1dac0:	4630      	mov	r0, r6
   1dac2:	f000 f837 	bl	1db34 <_sbrk_r>
   1dac6:	1c43      	adds	r3, r0, #1
   1dac8:	d123      	bne.n	1db12 <_malloc_r+0x92>
   1daca:	230c      	movs	r3, #12
   1dacc:	4630      	mov	r0, r6
   1dace:	6033      	str	r3, [r6, #0]
   1dad0:	f000 fa28 	bl	1df24 <__malloc_unlock>
   1dad4:	e7e3      	b.n	1da9e <_malloc_r+0x1e>
   1dad6:	6823      	ldr	r3, [r4, #0]
   1dad8:	1b5b      	subs	r3, r3, r5
   1dada:	d417      	bmi.n	1db0c <_malloc_r+0x8c>
   1dadc:	2b0b      	cmp	r3, #11
   1dade:	d903      	bls.n	1dae8 <_malloc_r+0x68>
   1dae0:	6023      	str	r3, [r4, #0]
   1dae2:	441c      	add	r4, r3
   1dae4:	6025      	str	r5, [r4, #0]
   1dae6:	e004      	b.n	1daf2 <_malloc_r+0x72>
   1dae8:	6863      	ldr	r3, [r4, #4]
   1daea:	42a2      	cmp	r2, r4
   1daec:	bf0c      	ite	eq
   1daee:	600b      	streq	r3, [r1, #0]
   1daf0:	6053      	strne	r3, [r2, #4]
   1daf2:	4630      	mov	r0, r6
   1daf4:	f000 fa16 	bl	1df24 <__malloc_unlock>
   1daf8:	f104 000b 	add.w	r0, r4, #11
   1dafc:	1d23      	adds	r3, r4, #4
   1dafe:	f020 0007 	bic.w	r0, r0, #7
   1db02:	1ac2      	subs	r2, r0, r3
   1db04:	d0cc      	beq.n	1daa0 <_malloc_r+0x20>
   1db06:	1a1b      	subs	r3, r3, r0
   1db08:	50a3      	str	r3, [r4, r2]
   1db0a:	e7c9      	b.n	1daa0 <_malloc_r+0x20>
   1db0c:	4622      	mov	r2, r4
   1db0e:	6864      	ldr	r4, [r4, #4]
   1db10:	e7cc      	b.n	1daac <_malloc_r+0x2c>
   1db12:	1cc4      	adds	r4, r0, #3
   1db14:	f024 0403 	bic.w	r4, r4, #3
   1db18:	42a0      	cmp	r0, r4
   1db1a:	d0e3      	beq.n	1dae4 <_malloc_r+0x64>
   1db1c:	1a21      	subs	r1, r4, r0
   1db1e:	4630      	mov	r0, r6
   1db20:	f000 f808 	bl	1db34 <_sbrk_r>
   1db24:	3001      	adds	r0, #1
   1db26:	d1dd      	bne.n	1dae4 <_malloc_r+0x64>
   1db28:	e7cf      	b.n	1daca <_malloc_r+0x4a>
   1db2a:	bf00      	nop
   1db2c:	2000d618 	.word	0x2000d618
   1db30:	2000d61c 	.word	0x2000d61c

0001db34 <_sbrk_r>:
   1db34:	b538      	push	{r3, r4, r5, lr}
   1db36:	2300      	movs	r3, #0
   1db38:	4d05      	ldr	r5, [pc, #20]	; (1db50 <_sbrk_r+0x1c>)
   1db3a:	4604      	mov	r4, r0
   1db3c:	4608      	mov	r0, r1
   1db3e:	602b      	str	r3, [r5, #0]
   1db40:	f7f6 fe0c 	bl	1475c <_sbrk>
   1db44:	1c43      	adds	r3, r0, #1
   1db46:	d102      	bne.n	1db4e <_sbrk_r+0x1a>
   1db48:	682b      	ldr	r3, [r5, #0]
   1db4a:	b103      	cbz	r3, 1db4e <_sbrk_r+0x1a>
   1db4c:	6023      	str	r3, [r4, #0]
   1db4e:	bd38      	pop	{r3, r4, r5, pc}
   1db50:	2000f540 	.word	0x2000f540

0001db54 <_strtol_l.isra.0>:
   1db54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1db58:	468c      	mov	ip, r1
   1db5a:	4686      	mov	lr, r0
   1db5c:	4e38      	ldr	r6, [pc, #224]	; (1dc40 <_strtol_l.isra.0+0xec>)
   1db5e:	4660      	mov	r0, ip
   1db60:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1db64:	5da5      	ldrb	r5, [r4, r6]
   1db66:	f015 0508 	ands.w	r5, r5, #8
   1db6a:	d1f8      	bne.n	1db5e <_strtol_l.isra.0+0xa>
   1db6c:	2c2d      	cmp	r4, #45	; 0x2d
   1db6e:	d133      	bne.n	1dbd8 <_strtol_l.isra.0+0x84>
   1db70:	f89c 4000 	ldrb.w	r4, [ip]
   1db74:	f04f 0801 	mov.w	r8, #1
   1db78:	f100 0c02 	add.w	ip, r0, #2
   1db7c:	2b00      	cmp	r3, #0
   1db7e:	d05b      	beq.n	1dc38 <_strtol_l.isra.0+0xe4>
   1db80:	2b10      	cmp	r3, #16
   1db82:	d10c      	bne.n	1db9e <_strtol_l.isra.0+0x4a>
   1db84:	2c30      	cmp	r4, #48	; 0x30
   1db86:	d10a      	bne.n	1db9e <_strtol_l.isra.0+0x4a>
   1db88:	f89c 0000 	ldrb.w	r0, [ip]
   1db8c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1db90:	2858      	cmp	r0, #88	; 0x58
   1db92:	d14c      	bne.n	1dc2e <_strtol_l.isra.0+0xda>
   1db94:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1db98:	2310      	movs	r3, #16
   1db9a:	f10c 0c02 	add.w	ip, ip, #2
   1db9e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   1dba2:	2600      	movs	r6, #0
   1dba4:	3f01      	subs	r7, #1
   1dba6:	4630      	mov	r0, r6
   1dba8:	fbb7 f9f3 	udiv	r9, r7, r3
   1dbac:	fb03 7a19 	mls	sl, r3, r9, r7
   1dbb0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   1dbb4:	2d09      	cmp	r5, #9
   1dbb6:	d817      	bhi.n	1dbe8 <_strtol_l.isra.0+0x94>
   1dbb8:	462c      	mov	r4, r5
   1dbba:	42a3      	cmp	r3, r4
   1dbbc:	dd23      	ble.n	1dc06 <_strtol_l.isra.0+0xb2>
   1dbbe:	1c75      	adds	r5, r6, #1
   1dbc0:	d007      	beq.n	1dbd2 <_strtol_l.isra.0+0x7e>
   1dbc2:	4581      	cmp	r9, r0
   1dbc4:	d31c      	bcc.n	1dc00 <_strtol_l.isra.0+0xac>
   1dbc6:	d101      	bne.n	1dbcc <_strtol_l.isra.0+0x78>
   1dbc8:	45a2      	cmp	sl, r4
   1dbca:	db19      	blt.n	1dc00 <_strtol_l.isra.0+0xac>
   1dbcc:	fb00 4003 	mla	r0, r0, r3, r4
   1dbd0:	2601      	movs	r6, #1
   1dbd2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1dbd6:	e7eb      	b.n	1dbb0 <_strtol_l.isra.0+0x5c>
   1dbd8:	2c2b      	cmp	r4, #43	; 0x2b
   1dbda:	46a8      	mov	r8, r5
   1dbdc:	bf04      	itt	eq
   1dbde:	f89c 4000 	ldrbeq.w	r4, [ip]
   1dbe2:	f100 0c02 	addeq.w	ip, r0, #2
   1dbe6:	e7c9      	b.n	1db7c <_strtol_l.isra.0+0x28>
   1dbe8:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   1dbec:	2d19      	cmp	r5, #25
   1dbee:	d801      	bhi.n	1dbf4 <_strtol_l.isra.0+0xa0>
   1dbf0:	3c37      	subs	r4, #55	; 0x37
   1dbf2:	e7e2      	b.n	1dbba <_strtol_l.isra.0+0x66>
   1dbf4:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   1dbf8:	2d19      	cmp	r5, #25
   1dbfa:	d804      	bhi.n	1dc06 <_strtol_l.isra.0+0xb2>
   1dbfc:	3c57      	subs	r4, #87	; 0x57
   1dbfe:	e7dc      	b.n	1dbba <_strtol_l.isra.0+0x66>
   1dc00:	f04f 36ff 	mov.w	r6, #4294967295
   1dc04:	e7e5      	b.n	1dbd2 <_strtol_l.isra.0+0x7e>
   1dc06:	1c73      	adds	r3, r6, #1
   1dc08:	d106      	bne.n	1dc18 <_strtol_l.isra.0+0xc4>
   1dc0a:	2322      	movs	r3, #34	; 0x22
   1dc0c:	4638      	mov	r0, r7
   1dc0e:	f8ce 3000 	str.w	r3, [lr]
   1dc12:	b942      	cbnz	r2, 1dc26 <_strtol_l.isra.0+0xd2>
   1dc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dc18:	f1b8 0f00 	cmp.w	r8, #0
   1dc1c:	d000      	beq.n	1dc20 <_strtol_l.isra.0+0xcc>
   1dc1e:	4240      	negs	r0, r0
   1dc20:	2a00      	cmp	r2, #0
   1dc22:	d0f7      	beq.n	1dc14 <_strtol_l.isra.0+0xc0>
   1dc24:	b10e      	cbz	r6, 1dc2a <_strtol_l.isra.0+0xd6>
   1dc26:	f10c 31ff 	add.w	r1, ip, #4294967295
   1dc2a:	6011      	str	r1, [r2, #0]
   1dc2c:	e7f2      	b.n	1dc14 <_strtol_l.isra.0+0xc0>
   1dc2e:	2430      	movs	r4, #48	; 0x30
   1dc30:	2b00      	cmp	r3, #0
   1dc32:	d1b4      	bne.n	1db9e <_strtol_l.isra.0+0x4a>
   1dc34:	2308      	movs	r3, #8
   1dc36:	e7b2      	b.n	1db9e <_strtol_l.isra.0+0x4a>
   1dc38:	2c30      	cmp	r4, #48	; 0x30
   1dc3a:	d0a5      	beq.n	1db88 <_strtol_l.isra.0+0x34>
   1dc3c:	230a      	movs	r3, #10
   1dc3e:	e7ae      	b.n	1db9e <_strtol_l.isra.0+0x4a>
   1dc40:	000252b9 	.word	0x000252b9

0001dc44 <strtol>:
   1dc44:	4613      	mov	r3, r2
   1dc46:	460a      	mov	r2, r1
   1dc48:	4601      	mov	r1, r0
   1dc4a:	4802      	ldr	r0, [pc, #8]	; (1dc54 <strtol+0x10>)
   1dc4c:	6800      	ldr	r0, [r0, #0]
   1dc4e:	f7ff bf81 	b.w	1db54 <_strtol_l.isra.0>
   1dc52:	bf00      	nop
   1dc54:	2000c61c 	.word	0x2000c61c

0001dc58 <_strtoll_l.isra.0>:
   1dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc5c:	4691      	mov	r9, r2
   1dc5e:	b087      	sub	sp, #28
   1dc60:	4688      	mov	r8, r1
   1dc62:	461f      	mov	r7, r3
   1dc64:	460d      	mov	r5, r1
   1dc66:	4a46      	ldr	r2, [pc, #280]	; (1dd80 <_strtoll_l.isra.0+0x128>)
   1dc68:	9005      	str	r0, [sp, #20]
   1dc6a:	462b      	mov	r3, r5
   1dc6c:	f815 4b01 	ldrb.w	r4, [r5], #1
   1dc70:	5ca6      	ldrb	r6, [r4, r2]
   1dc72:	f016 0608 	ands.w	r6, r6, #8
   1dc76:	d1f8      	bne.n	1dc6a <_strtoll_l.isra.0+0x12>
   1dc78:	2c2d      	cmp	r4, #45	; 0x2d
   1dc7a:	d148      	bne.n	1dd0e <_strtoll_l.isra.0+0xb6>
   1dc7c:	782c      	ldrb	r4, [r5, #0]
   1dc7e:	2601      	movs	r6, #1
   1dc80:	1c9d      	adds	r5, r3, #2
   1dc82:	2f00      	cmp	r7, #0
   1dc84:	d078      	beq.n	1dd78 <_strtoll_l.isra.0+0x120>
   1dc86:	2f10      	cmp	r7, #16
   1dc88:	d109      	bne.n	1dc9e <_strtoll_l.isra.0+0x46>
   1dc8a:	2c30      	cmp	r4, #48	; 0x30
   1dc8c:	d107      	bne.n	1dc9e <_strtoll_l.isra.0+0x46>
   1dc8e:	782b      	ldrb	r3, [r5, #0]
   1dc90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1dc94:	2b58      	cmp	r3, #88	; 0x58
   1dc96:	d16a      	bne.n	1dd6e <_strtoll_l.isra.0+0x116>
   1dc98:	786c      	ldrb	r4, [r5, #1]
   1dc9a:	2710      	movs	r7, #16
   1dc9c:	3502      	adds	r5, #2
   1dc9e:	f04f 32ff 	mov.w	r2, #4294967295
   1dca2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1dca6:	ea4f 7be7 	mov.w	fp, r7, asr #31
   1dcaa:	46ba      	mov	sl, r7
   1dcac:	1990      	adds	r0, r2, r6
   1dcae:	463a      	mov	r2, r7
   1dcb0:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
   1dcb4:	465b      	mov	r3, fp
   1dcb6:	e9cd 0100 	strd	r0, r1, [sp]
   1dcba:	f7f3 f8f1 	bl	10ea0 <__aeabi_uldivmod>
   1dcbe:	2300      	movs	r3, #0
   1dcc0:	4696      	mov	lr, r2
   1dcc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1dcc6:	2000      	movs	r0, #0
   1dcc8:	2100      	movs	r1, #0
   1dcca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1dcce:	f1bc 0f09 	cmp.w	ip, #9
   1dcd2:	d821      	bhi.n	1dd18 <_strtoll_l.isra.0+0xc0>
   1dcd4:	4664      	mov	r4, ip
   1dcd6:	42a7      	cmp	r7, r4
   1dcd8:	dd2f      	ble.n	1dd3a <_strtoll_l.isra.0+0xe2>
   1dcda:	1c5a      	adds	r2, r3, #1
   1dcdc:	d014      	beq.n	1dd08 <_strtoll_l.isra.0+0xb0>
   1dcde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1dce2:	428b      	cmp	r3, r1
   1dce4:	bf08      	it	eq
   1dce6:	4282      	cmpeq	r2, r0
   1dce8:	d324      	bcc.n	1dd34 <_strtoll_l.isra.0+0xdc>
   1dcea:	d101      	bne.n	1dcf0 <_strtoll_l.isra.0+0x98>
   1dcec:	45a6      	cmp	lr, r4
   1dcee:	db21      	blt.n	1dd34 <_strtoll_l.isra.0+0xdc>
   1dcf0:	fb0a f301 	mul.w	r3, sl, r1
   1dcf4:	fb00 330b 	mla	r3, r0, fp, r3
   1dcf8:	fbaa 0100 	umull	r0, r1, sl, r0
   1dcfc:	4419      	add	r1, r3
   1dcfe:	1900      	adds	r0, r0, r4
   1dd00:	f04f 0301 	mov.w	r3, #1
   1dd04:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   1dd08:	f815 4b01 	ldrb.w	r4, [r5], #1
   1dd0c:	e7dd      	b.n	1dcca <_strtoll_l.isra.0+0x72>
   1dd0e:	2c2b      	cmp	r4, #43	; 0x2b
   1dd10:	bf04      	itt	eq
   1dd12:	782c      	ldrbeq	r4, [r5, #0]
   1dd14:	1c9d      	addeq	r5, r3, #2
   1dd16:	e7b4      	b.n	1dc82 <_strtoll_l.isra.0+0x2a>
   1dd18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1dd1c:	f1bc 0f19 	cmp.w	ip, #25
   1dd20:	d801      	bhi.n	1dd26 <_strtoll_l.isra.0+0xce>
   1dd22:	3c37      	subs	r4, #55	; 0x37
   1dd24:	e7d7      	b.n	1dcd6 <_strtoll_l.isra.0+0x7e>
   1dd26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1dd2a:	f1bc 0f19 	cmp.w	ip, #25
   1dd2e:	d804      	bhi.n	1dd3a <_strtoll_l.isra.0+0xe2>
   1dd30:	3c57      	subs	r4, #87	; 0x57
   1dd32:	e7d0      	b.n	1dcd6 <_strtoll_l.isra.0+0x7e>
   1dd34:	f04f 33ff 	mov.w	r3, #4294967295
   1dd38:	e7e6      	b.n	1dd08 <_strtoll_l.isra.0+0xb0>
   1dd3a:	1c5a      	adds	r2, r3, #1
   1dd3c:	d10a      	bne.n	1dd54 <_strtoll_l.isra.0+0xfc>
   1dd3e:	2322      	movs	r3, #34	; 0x22
   1dd40:	9a05      	ldr	r2, [sp, #20]
   1dd42:	e9dd 0100 	ldrd	r0, r1, [sp]
   1dd46:	6013      	str	r3, [r2, #0]
   1dd48:	f1b9 0f00 	cmp.w	r9, #0
   1dd4c:	d10a      	bne.n	1dd64 <_strtoll_l.isra.0+0x10c>
   1dd4e:	b007      	add	sp, #28
   1dd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd54:	b116      	cbz	r6, 1dd5c <_strtoll_l.isra.0+0x104>
   1dd56:	4240      	negs	r0, r0
   1dd58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1dd5c:	f1b9 0f00 	cmp.w	r9, #0
   1dd60:	d0f5      	beq.n	1dd4e <_strtoll_l.isra.0+0xf6>
   1dd62:	b10b      	cbz	r3, 1dd68 <_strtoll_l.isra.0+0x110>
   1dd64:	f105 38ff 	add.w	r8, r5, #4294967295
   1dd68:	f8c9 8000 	str.w	r8, [r9]
   1dd6c:	e7ef      	b.n	1dd4e <_strtoll_l.isra.0+0xf6>
   1dd6e:	2430      	movs	r4, #48	; 0x30
   1dd70:	2f00      	cmp	r7, #0
   1dd72:	d194      	bne.n	1dc9e <_strtoll_l.isra.0+0x46>
   1dd74:	2708      	movs	r7, #8
   1dd76:	e792      	b.n	1dc9e <_strtoll_l.isra.0+0x46>
   1dd78:	2c30      	cmp	r4, #48	; 0x30
   1dd7a:	d088      	beq.n	1dc8e <_strtoll_l.isra.0+0x36>
   1dd7c:	270a      	movs	r7, #10
   1dd7e:	e78e      	b.n	1dc9e <_strtoll_l.isra.0+0x46>
   1dd80:	000252b9 	.word	0x000252b9

0001dd84 <strtoll>:
   1dd84:	4613      	mov	r3, r2
   1dd86:	460a      	mov	r2, r1
   1dd88:	4601      	mov	r1, r0
   1dd8a:	4802      	ldr	r0, [pc, #8]	; (1dd94 <strtoll+0x10>)
   1dd8c:	6800      	ldr	r0, [r0, #0]
   1dd8e:	f7ff bf63 	b.w	1dc58 <_strtoll_l.isra.0>
   1dd92:	bf00      	nop
   1dd94:	2000c61c 	.word	0x2000c61c

0001dd98 <_strtoul_l.isra.0>:
   1dd98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dd9c:	468c      	mov	ip, r1
   1dd9e:	4686      	mov	lr, r0
   1dda0:	4e39      	ldr	r6, [pc, #228]	; (1de88 <_strtoul_l.isra.0+0xf0>)
   1dda2:	4660      	mov	r0, ip
   1dda4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1dda8:	5da5      	ldrb	r5, [r4, r6]
   1ddaa:	f015 0508 	ands.w	r5, r5, #8
   1ddae:	d1f8      	bne.n	1dda2 <_strtoul_l.isra.0+0xa>
   1ddb0:	2c2d      	cmp	r4, #45	; 0x2d
   1ddb2:	d134      	bne.n	1de1e <_strtoul_l.isra.0+0x86>
   1ddb4:	f89c 4000 	ldrb.w	r4, [ip]
   1ddb8:	f04f 0801 	mov.w	r8, #1
   1ddbc:	f100 0c02 	add.w	ip, r0, #2
   1ddc0:	2b00      	cmp	r3, #0
   1ddc2:	d05d      	beq.n	1de80 <_strtoul_l.isra.0+0xe8>
   1ddc4:	2b10      	cmp	r3, #16
   1ddc6:	d10c      	bne.n	1dde2 <_strtoul_l.isra.0+0x4a>
   1ddc8:	2c30      	cmp	r4, #48	; 0x30
   1ddca:	d10a      	bne.n	1dde2 <_strtoul_l.isra.0+0x4a>
   1ddcc:	f89c 0000 	ldrb.w	r0, [ip]
   1ddd0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1ddd4:	2858      	cmp	r0, #88	; 0x58
   1ddd6:	d14e      	bne.n	1de76 <_strtoul_l.isra.0+0xde>
   1ddd8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1dddc:	2310      	movs	r3, #16
   1ddde:	f10c 0c02 	add.w	ip, ip, #2
   1dde2:	f04f 37ff 	mov.w	r7, #4294967295
   1dde6:	2500      	movs	r5, #0
   1dde8:	fbb7 f7f3 	udiv	r7, r7, r3
   1ddec:	fb03 f907 	mul.w	r9, r3, r7
   1ddf0:	4628      	mov	r0, r5
   1ddf2:	ea6f 0909 	mvn.w	r9, r9
   1ddf6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1ddfa:	2e09      	cmp	r6, #9
   1ddfc:	d817      	bhi.n	1de2e <_strtoul_l.isra.0+0x96>
   1ddfe:	4634      	mov	r4, r6
   1de00:	42a3      	cmp	r3, r4
   1de02:	dd23      	ble.n	1de4c <_strtoul_l.isra.0+0xb4>
   1de04:	2d00      	cmp	r5, #0
   1de06:	db1e      	blt.n	1de46 <_strtoul_l.isra.0+0xae>
   1de08:	4287      	cmp	r7, r0
   1de0a:	d31c      	bcc.n	1de46 <_strtoul_l.isra.0+0xae>
   1de0c:	d101      	bne.n	1de12 <_strtoul_l.isra.0+0x7a>
   1de0e:	45a1      	cmp	r9, r4
   1de10:	db19      	blt.n	1de46 <_strtoul_l.isra.0+0xae>
   1de12:	fb00 4003 	mla	r0, r0, r3, r4
   1de16:	2501      	movs	r5, #1
   1de18:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1de1c:	e7eb      	b.n	1ddf6 <_strtoul_l.isra.0+0x5e>
   1de1e:	2c2b      	cmp	r4, #43	; 0x2b
   1de20:	46a8      	mov	r8, r5
   1de22:	bf04      	itt	eq
   1de24:	f89c 4000 	ldrbeq.w	r4, [ip]
   1de28:	f100 0c02 	addeq.w	ip, r0, #2
   1de2c:	e7c8      	b.n	1ddc0 <_strtoul_l.isra.0+0x28>
   1de2e:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1de32:	2e19      	cmp	r6, #25
   1de34:	d801      	bhi.n	1de3a <_strtoul_l.isra.0+0xa2>
   1de36:	3c37      	subs	r4, #55	; 0x37
   1de38:	e7e2      	b.n	1de00 <_strtoul_l.isra.0+0x68>
   1de3a:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1de3e:	2e19      	cmp	r6, #25
   1de40:	d804      	bhi.n	1de4c <_strtoul_l.isra.0+0xb4>
   1de42:	3c57      	subs	r4, #87	; 0x57
   1de44:	e7dc      	b.n	1de00 <_strtoul_l.isra.0+0x68>
   1de46:	f04f 35ff 	mov.w	r5, #4294967295
   1de4a:	e7e5      	b.n	1de18 <_strtoul_l.isra.0+0x80>
   1de4c:	2d00      	cmp	r5, #0
   1de4e:	da07      	bge.n	1de60 <_strtoul_l.isra.0+0xc8>
   1de50:	2322      	movs	r3, #34	; 0x22
   1de52:	f04f 30ff 	mov.w	r0, #4294967295
   1de56:	f8ce 3000 	str.w	r3, [lr]
   1de5a:	b942      	cbnz	r2, 1de6e <_strtoul_l.isra.0+0xd6>
   1de5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1de60:	f1b8 0f00 	cmp.w	r8, #0
   1de64:	d000      	beq.n	1de68 <_strtoul_l.isra.0+0xd0>
   1de66:	4240      	negs	r0, r0
   1de68:	2a00      	cmp	r2, #0
   1de6a:	d0f7      	beq.n	1de5c <_strtoul_l.isra.0+0xc4>
   1de6c:	b10d      	cbz	r5, 1de72 <_strtoul_l.isra.0+0xda>
   1de6e:	f10c 31ff 	add.w	r1, ip, #4294967295
   1de72:	6011      	str	r1, [r2, #0]
   1de74:	e7f2      	b.n	1de5c <_strtoul_l.isra.0+0xc4>
   1de76:	2430      	movs	r4, #48	; 0x30
   1de78:	2b00      	cmp	r3, #0
   1de7a:	d1b2      	bne.n	1dde2 <_strtoul_l.isra.0+0x4a>
   1de7c:	2308      	movs	r3, #8
   1de7e:	e7b0      	b.n	1dde2 <_strtoul_l.isra.0+0x4a>
   1de80:	2c30      	cmp	r4, #48	; 0x30
   1de82:	d0a3      	beq.n	1ddcc <_strtoul_l.isra.0+0x34>
   1de84:	230a      	movs	r3, #10
   1de86:	e7ac      	b.n	1dde2 <_strtoul_l.isra.0+0x4a>
   1de88:	000252b9 	.word	0x000252b9

0001de8c <strtoul>:
   1de8c:	4613      	mov	r3, r2
   1de8e:	460a      	mov	r2, r1
   1de90:	4601      	mov	r1, r0
   1de92:	4802      	ldr	r0, [pc, #8]	; (1de9c <strtoul+0x10>)
   1de94:	6800      	ldr	r0, [r0, #0]
   1de96:	f7ff bf7f 	b.w	1dd98 <_strtoul_l.isra.0>
   1de9a:	bf00      	nop
   1de9c:	2000c61c 	.word	0x2000c61c

0001dea0 <vsniprintf>:
   1dea0:	b507      	push	{r0, r1, r2, lr}
   1dea2:	9300      	str	r3, [sp, #0]
   1dea4:	4613      	mov	r3, r2
   1dea6:	460a      	mov	r2, r1
   1dea8:	4601      	mov	r1, r0
   1deaa:	4803      	ldr	r0, [pc, #12]	; (1deb8 <vsniprintf+0x18>)
   1deac:	6800      	ldr	r0, [r0, #0]
   1deae:	f004 fcde 	bl	2286e <_vsniprintf_r>
   1deb2:	b003      	add	sp, #12
   1deb4:	f85d fb04 	ldr.w	pc, [sp], #4
   1deb8:	2000c61c 	.word	0x2000c61c

0001debc <_vsiscanf_r>:
   1debc:	b570      	push	{r4, r5, r6, lr}
   1debe:	461e      	mov	r6, r3
   1dec0:	b09a      	sub	sp, #104	; 0x68
   1dec2:	f44f 7301 	mov.w	r3, #516	; 0x204
   1dec6:	4604      	mov	r4, r0
   1dec8:	4608      	mov	r0, r1
   1deca:	4615      	mov	r5, r2
   1decc:	f8ad 300c 	strh.w	r3, [sp, #12]
   1ded0:	9100      	str	r1, [sp, #0]
   1ded2:	9104      	str	r1, [sp, #16]
   1ded4:	f7f3 f96c 	bl	111b0 <strlen>
   1ded8:	4b09      	ldr	r3, [pc, #36]	; (1df00 <_vsiscanf_r+0x44>)
   1deda:	462a      	mov	r2, r5
   1dedc:	4669      	mov	r1, sp
   1dede:	9001      	str	r0, [sp, #4]
   1dee0:	9309      	str	r3, [sp, #36]	; 0x24
   1dee2:	2300      	movs	r3, #0
   1dee4:	9005      	str	r0, [sp, #20]
   1dee6:	4620      	mov	r0, r4
   1dee8:	930d      	str	r3, [sp, #52]	; 0x34
   1deea:	9312      	str	r3, [sp, #72]	; 0x48
   1deec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1def0:	f8ad 300e 	strh.w	r3, [sp, #14]
   1def4:	4633      	mov	r3, r6
   1def6:	f000 f91b 	bl	1e130 <__ssvfiscanf_r>
   1defa:	b01a      	add	sp, #104	; 0x68
   1defc:	bd70      	pop	{r4, r5, r6, pc}
   1defe:	bf00      	nop
   1df00:	000227a7 	.word	0x000227a7

0001df04 <vsiscanf>:
   1df04:	4613      	mov	r3, r2
   1df06:	460a      	mov	r2, r1
   1df08:	4601      	mov	r1, r0
   1df0a:	4802      	ldr	r0, [pc, #8]	; (1df14 <vsiscanf+0x10>)
   1df0c:	6800      	ldr	r0, [r0, #0]
   1df0e:	f7ff bfd5 	b.w	1debc <_vsiscanf_r>
   1df12:	bf00      	nop
   1df14:	2000c61c 	.word	0x2000c61c

0001df18 <__malloc_lock>:
   1df18:	4801      	ldr	r0, [pc, #4]	; (1df20 <__malloc_lock+0x8>)
   1df1a:	f002 b80b 	b.w	1ff34 <__retarget_lock_acquire_recursive>
   1df1e:	bf00      	nop
   1df20:	2000c818 	.word	0x2000c818

0001df24 <__malloc_unlock>:
   1df24:	4801      	ldr	r0, [pc, #4]	; (1df2c <__malloc_unlock+0x8>)
   1df26:	f002 b80b 	b.w	1ff40 <__retarget_lock_release_recursive>
   1df2a:	bf00      	nop
   1df2c:	2000c818 	.word	0x2000c818

0001df30 <_svfiprintf_r>:
   1df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df34:	4698      	mov	r8, r3
   1df36:	898b      	ldrh	r3, [r1, #12]
   1df38:	b09d      	sub	sp, #116	; 0x74
   1df3a:	4607      	mov	r7, r0
   1df3c:	061b      	lsls	r3, r3, #24
   1df3e:	460d      	mov	r5, r1
   1df40:	4614      	mov	r4, r2
   1df42:	d50e      	bpl.n	1df62 <_svfiprintf_r+0x32>
   1df44:	690b      	ldr	r3, [r1, #16]
   1df46:	b963      	cbnz	r3, 1df62 <_svfiprintf_r+0x32>
   1df48:	2140      	movs	r1, #64	; 0x40
   1df4a:	f7ff fd99 	bl	1da80 <_malloc_r>
   1df4e:	6028      	str	r0, [r5, #0]
   1df50:	6128      	str	r0, [r5, #16]
   1df52:	b920      	cbnz	r0, 1df5e <_svfiprintf_r+0x2e>
   1df54:	230c      	movs	r3, #12
   1df56:	603b      	str	r3, [r7, #0]
   1df58:	f04f 30ff 	mov.w	r0, #4294967295
   1df5c:	e0d1      	b.n	1e102 <_svfiprintf_r+0x1d2>
   1df5e:	2340      	movs	r3, #64	; 0x40
   1df60:	616b      	str	r3, [r5, #20]
   1df62:	2300      	movs	r3, #0
   1df64:	f8cd 800c 	str.w	r8, [sp, #12]
   1df68:	f04f 0901 	mov.w	r9, #1
   1df6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 1e11c <_svfiprintf_r+0x1ec>
   1df70:	9309      	str	r3, [sp, #36]	; 0x24
   1df72:	2320      	movs	r3, #32
   1df74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1df78:	2330      	movs	r3, #48	; 0x30
   1df7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1df7e:	4623      	mov	r3, r4
   1df80:	469a      	mov	sl, r3
   1df82:	f813 2b01 	ldrb.w	r2, [r3], #1
   1df86:	b10a      	cbz	r2, 1df8c <_svfiprintf_r+0x5c>
   1df88:	2a25      	cmp	r2, #37	; 0x25
   1df8a:	d1f9      	bne.n	1df80 <_svfiprintf_r+0x50>
   1df8c:	ebba 0b04 	subs.w	fp, sl, r4
   1df90:	d00b      	beq.n	1dfaa <_svfiprintf_r+0x7a>
   1df92:	465b      	mov	r3, fp
   1df94:	4622      	mov	r2, r4
   1df96:	4629      	mov	r1, r5
   1df98:	4638      	mov	r0, r7
   1df9a:	f004 fc94 	bl	228c6 <__ssputs_r>
   1df9e:	3001      	adds	r0, #1
   1dfa0:	f000 80aa 	beq.w	1e0f8 <_svfiprintf_r+0x1c8>
   1dfa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dfa6:	445a      	add	r2, fp
   1dfa8:	9209      	str	r2, [sp, #36]	; 0x24
   1dfaa:	f89a 3000 	ldrb.w	r3, [sl]
   1dfae:	2b00      	cmp	r3, #0
   1dfb0:	f000 80a2 	beq.w	1e0f8 <_svfiprintf_r+0x1c8>
   1dfb4:	2300      	movs	r3, #0
   1dfb6:	f04f 32ff 	mov.w	r2, #4294967295
   1dfba:	f10a 0a01 	add.w	sl, sl, #1
   1dfbe:	9304      	str	r3, [sp, #16]
   1dfc0:	9307      	str	r3, [sp, #28]
   1dfc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1dfc6:	931a      	str	r3, [sp, #104]	; 0x68
   1dfc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1dfcc:	4654      	mov	r4, sl
   1dfce:	2205      	movs	r2, #5
   1dfd0:	4852      	ldr	r0, [pc, #328]	; (1e11c <_svfiprintf_r+0x1ec>)
   1dfd2:	f814 1b01 	ldrb.w	r1, [r4], #1
   1dfd6:	f004 fbb5 	bl	22744 <memchr>
   1dfda:	9a04      	ldr	r2, [sp, #16]
   1dfdc:	b9d8      	cbnz	r0, 1e016 <_svfiprintf_r+0xe6>
   1dfde:	06d0      	lsls	r0, r2, #27
   1dfe0:	bf44      	itt	mi
   1dfe2:	2320      	movmi	r3, #32
   1dfe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1dfe8:	0711      	lsls	r1, r2, #28
   1dfea:	bf44      	itt	mi
   1dfec:	232b      	movmi	r3, #43	; 0x2b
   1dfee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1dff2:	f89a 3000 	ldrb.w	r3, [sl]
   1dff6:	2b2a      	cmp	r3, #42	; 0x2a
   1dff8:	d015      	beq.n	1e026 <_svfiprintf_r+0xf6>
   1dffa:	9a07      	ldr	r2, [sp, #28]
   1dffc:	4654      	mov	r4, sl
   1dffe:	2000      	movs	r0, #0
   1e000:	f04f 0c0a 	mov.w	ip, #10
   1e004:	4621      	mov	r1, r4
   1e006:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e00a:	3b30      	subs	r3, #48	; 0x30
   1e00c:	2b09      	cmp	r3, #9
   1e00e:	d94e      	bls.n	1e0ae <_svfiprintf_r+0x17e>
   1e010:	b1b0      	cbz	r0, 1e040 <_svfiprintf_r+0x110>
   1e012:	9207      	str	r2, [sp, #28]
   1e014:	e014      	b.n	1e040 <_svfiprintf_r+0x110>
   1e016:	eba0 0308 	sub.w	r3, r0, r8
   1e01a:	46a2      	mov	sl, r4
   1e01c:	fa09 f303 	lsl.w	r3, r9, r3
   1e020:	4313      	orrs	r3, r2
   1e022:	9304      	str	r3, [sp, #16]
   1e024:	e7d2      	b.n	1dfcc <_svfiprintf_r+0x9c>
   1e026:	9b03      	ldr	r3, [sp, #12]
   1e028:	1d19      	adds	r1, r3, #4
   1e02a:	681b      	ldr	r3, [r3, #0]
   1e02c:	2b00      	cmp	r3, #0
   1e02e:	9103      	str	r1, [sp, #12]
   1e030:	bfbb      	ittet	lt
   1e032:	425b      	neglt	r3, r3
   1e034:	f042 0202 	orrlt.w	r2, r2, #2
   1e038:	9307      	strge	r3, [sp, #28]
   1e03a:	9307      	strlt	r3, [sp, #28]
   1e03c:	bfb8      	it	lt
   1e03e:	9204      	strlt	r2, [sp, #16]
   1e040:	7823      	ldrb	r3, [r4, #0]
   1e042:	2b2e      	cmp	r3, #46	; 0x2e
   1e044:	d10c      	bne.n	1e060 <_svfiprintf_r+0x130>
   1e046:	7863      	ldrb	r3, [r4, #1]
   1e048:	2b2a      	cmp	r3, #42	; 0x2a
   1e04a:	d135      	bne.n	1e0b8 <_svfiprintf_r+0x188>
   1e04c:	9b03      	ldr	r3, [sp, #12]
   1e04e:	3402      	adds	r4, #2
   1e050:	1d1a      	adds	r2, r3, #4
   1e052:	681b      	ldr	r3, [r3, #0]
   1e054:	2b00      	cmp	r3, #0
   1e056:	9203      	str	r2, [sp, #12]
   1e058:	bfb8      	it	lt
   1e05a:	f04f 33ff 	movlt.w	r3, #4294967295
   1e05e:	9305      	str	r3, [sp, #20]
   1e060:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1e12c <_svfiprintf_r+0x1fc>
   1e064:	2203      	movs	r2, #3
   1e066:	7821      	ldrb	r1, [r4, #0]
   1e068:	4650      	mov	r0, sl
   1e06a:	f004 fb6b 	bl	22744 <memchr>
   1e06e:	b140      	cbz	r0, 1e082 <_svfiprintf_r+0x152>
   1e070:	2340      	movs	r3, #64	; 0x40
   1e072:	eba0 000a 	sub.w	r0, r0, sl
   1e076:	3401      	adds	r4, #1
   1e078:	fa03 f000 	lsl.w	r0, r3, r0
   1e07c:	9b04      	ldr	r3, [sp, #16]
   1e07e:	4303      	orrs	r3, r0
   1e080:	9304      	str	r3, [sp, #16]
   1e082:	f814 1b01 	ldrb.w	r1, [r4], #1
   1e086:	2206      	movs	r2, #6
   1e088:	4825      	ldr	r0, [pc, #148]	; (1e120 <_svfiprintf_r+0x1f0>)
   1e08a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1e08e:	f004 fb59 	bl	22744 <memchr>
   1e092:	2800      	cmp	r0, #0
   1e094:	d038      	beq.n	1e108 <_svfiprintf_r+0x1d8>
   1e096:	4b23      	ldr	r3, [pc, #140]	; (1e124 <_svfiprintf_r+0x1f4>)
   1e098:	bb1b      	cbnz	r3, 1e0e2 <_svfiprintf_r+0x1b2>
   1e09a:	9b03      	ldr	r3, [sp, #12]
   1e09c:	3307      	adds	r3, #7
   1e09e:	f023 0307 	bic.w	r3, r3, #7
   1e0a2:	3308      	adds	r3, #8
   1e0a4:	9303      	str	r3, [sp, #12]
   1e0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e0a8:	4433      	add	r3, r6
   1e0aa:	9309      	str	r3, [sp, #36]	; 0x24
   1e0ac:	e767      	b.n	1df7e <_svfiprintf_r+0x4e>
   1e0ae:	fb0c 3202 	mla	r2, ip, r2, r3
   1e0b2:	460c      	mov	r4, r1
   1e0b4:	2001      	movs	r0, #1
   1e0b6:	e7a5      	b.n	1e004 <_svfiprintf_r+0xd4>
   1e0b8:	2300      	movs	r3, #0
   1e0ba:	3401      	adds	r4, #1
   1e0bc:	f04f 0c0a 	mov.w	ip, #10
   1e0c0:	4619      	mov	r1, r3
   1e0c2:	9305      	str	r3, [sp, #20]
   1e0c4:	4620      	mov	r0, r4
   1e0c6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e0ca:	3a30      	subs	r2, #48	; 0x30
   1e0cc:	2a09      	cmp	r2, #9
   1e0ce:	d903      	bls.n	1e0d8 <_svfiprintf_r+0x1a8>
   1e0d0:	2b00      	cmp	r3, #0
   1e0d2:	d0c5      	beq.n	1e060 <_svfiprintf_r+0x130>
   1e0d4:	9105      	str	r1, [sp, #20]
   1e0d6:	e7c3      	b.n	1e060 <_svfiprintf_r+0x130>
   1e0d8:	fb0c 2101 	mla	r1, ip, r1, r2
   1e0dc:	4604      	mov	r4, r0
   1e0de:	2301      	movs	r3, #1
   1e0e0:	e7f0      	b.n	1e0c4 <_svfiprintf_r+0x194>
   1e0e2:	ab03      	add	r3, sp, #12
   1e0e4:	462a      	mov	r2, r5
   1e0e6:	a904      	add	r1, sp, #16
   1e0e8:	4638      	mov	r0, r7
   1e0ea:	9300      	str	r3, [sp, #0]
   1e0ec:	4b0e      	ldr	r3, [pc, #56]	; (1e128 <_svfiprintf_r+0x1f8>)
   1e0ee:	e000      	b.n	1e0f2 <_svfiprintf_r+0x1c2>
   1e0f0:	bf00      	nop
   1e0f2:	1c42      	adds	r2, r0, #1
   1e0f4:	4606      	mov	r6, r0
   1e0f6:	d1d6      	bne.n	1e0a6 <_svfiprintf_r+0x176>
   1e0f8:	89ab      	ldrh	r3, [r5, #12]
   1e0fa:	065b      	lsls	r3, r3, #25
   1e0fc:	f53f af2c 	bmi.w	1df58 <_svfiprintf_r+0x28>
   1e100:	9809      	ldr	r0, [sp, #36]	; 0x24
   1e102:	b01d      	add	sp, #116	; 0x74
   1e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e108:	ab03      	add	r3, sp, #12
   1e10a:	462a      	mov	r2, r5
   1e10c:	a904      	add	r1, sp, #16
   1e10e:	4638      	mov	r0, r7
   1e110:	9300      	str	r3, [sp, #0]
   1e112:	4b05      	ldr	r3, [pc, #20]	; (1e128 <_svfiprintf_r+0x1f8>)
   1e114:	f000 f988 	bl	1e428 <_printf_i>
   1e118:	e7eb      	b.n	1e0f2 <_svfiprintf_r+0x1c2>
   1e11a:	bf00      	nop
   1e11c:	000253b9 	.word	0x000253b9
   1e120:	000253c3 	.word	0x000253c3
   1e124:	00000000 	.word	0x00000000
   1e128:	000228c7 	.word	0x000228c7
   1e12c:	000253bf 	.word	0x000253bf

0001e130 <__ssvfiscanf_r>:
   1e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e134:	460c      	mov	r4, r1
   1e136:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   1e13a:	2100      	movs	r1, #0
   1e13c:	4606      	mov	r6, r0
   1e13e:	f10d 0804 	add.w	r8, sp, #4
   1e142:	4fb4      	ldr	r7, [pc, #720]	; (1e414 <__ssvfiscanf_r+0x2e4>)
   1e144:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 1e420 <__ssvfiscanf_r+0x2f0>
   1e148:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   1e14c:	9300      	str	r3, [sp, #0]
   1e14e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   1e152:	49b1      	ldr	r1, [pc, #708]	; (1e418 <__ssvfiscanf_r+0x2e8>)
   1e154:	91a0      	str	r1, [sp, #640]	; 0x280
   1e156:	49b1      	ldr	r1, [pc, #708]	; (1e41c <__ssvfiscanf_r+0x2ec>)
   1e158:	91a1      	str	r1, [sp, #644]	; 0x284
   1e15a:	f892 a000 	ldrb.w	sl, [r2]
   1e15e:	f1ba 0f00 	cmp.w	sl, #0
   1e162:	f000 8154 	beq.w	1e40e <__ssvfiscanf_r+0x2de>
   1e166:	f81a 3007 	ldrb.w	r3, [sl, r7]
   1e16a:	1c55      	adds	r5, r2, #1
   1e16c:	f013 0308 	ands.w	r3, r3, #8
   1e170:	d019      	beq.n	1e1a6 <__ssvfiscanf_r+0x76>
   1e172:	6863      	ldr	r3, [r4, #4]
   1e174:	2b00      	cmp	r3, #0
   1e176:	dd0f      	ble.n	1e198 <__ssvfiscanf_r+0x68>
   1e178:	6823      	ldr	r3, [r4, #0]
   1e17a:	781a      	ldrb	r2, [r3, #0]
   1e17c:	5cba      	ldrb	r2, [r7, r2]
   1e17e:	0712      	lsls	r2, r2, #28
   1e180:	d401      	bmi.n	1e186 <__ssvfiscanf_r+0x56>
   1e182:	462a      	mov	r2, r5
   1e184:	e7e9      	b.n	1e15a <__ssvfiscanf_r+0x2a>
   1e186:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1e188:	3301      	adds	r3, #1
   1e18a:	3201      	adds	r2, #1
   1e18c:	6023      	str	r3, [r4, #0]
   1e18e:	9245      	str	r2, [sp, #276]	; 0x114
   1e190:	6862      	ldr	r2, [r4, #4]
   1e192:	3a01      	subs	r2, #1
   1e194:	6062      	str	r2, [r4, #4]
   1e196:	e7ec      	b.n	1e172 <__ssvfiscanf_r+0x42>
   1e198:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1e19a:	4621      	mov	r1, r4
   1e19c:	4630      	mov	r0, r6
   1e19e:	4798      	blx	r3
   1e1a0:	2800      	cmp	r0, #0
   1e1a2:	d0e9      	beq.n	1e178 <__ssvfiscanf_r+0x48>
   1e1a4:	e7ed      	b.n	1e182 <__ssvfiscanf_r+0x52>
   1e1a6:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   1e1aa:	f040 8086 	bne.w	1e2ba <__ssvfiscanf_r+0x18a>
   1e1ae:	9341      	str	r3, [sp, #260]	; 0x104
   1e1b0:	9343      	str	r3, [sp, #268]	; 0x10c
   1e1b2:	7853      	ldrb	r3, [r2, #1]
   1e1b4:	2b2a      	cmp	r3, #42	; 0x2a
   1e1b6:	bf04      	itt	eq
   1e1b8:	2310      	moveq	r3, #16
   1e1ba:	1c95      	addeq	r5, r2, #2
   1e1bc:	f04f 020a 	mov.w	r2, #10
   1e1c0:	bf08      	it	eq
   1e1c2:	9341      	streq	r3, [sp, #260]	; 0x104
   1e1c4:	46ab      	mov	fp, r5
   1e1c6:	f81b 1b01 	ldrb.w	r1, [fp], #1
   1e1ca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1e1ce:	2b09      	cmp	r3, #9
   1e1d0:	d91d      	bls.n	1e20e <__ssvfiscanf_r+0xde>
   1e1d2:	2203      	movs	r2, #3
   1e1d4:	4892      	ldr	r0, [pc, #584]	; (1e420 <__ssvfiscanf_r+0x2f0>)
   1e1d6:	f004 fab5 	bl	22744 <memchr>
   1e1da:	b140      	cbz	r0, 1e1ee <__ssvfiscanf_r+0xbe>
   1e1dc:	2301      	movs	r3, #1
   1e1de:	eba0 0009 	sub.w	r0, r0, r9
   1e1e2:	465d      	mov	r5, fp
   1e1e4:	fa03 f000 	lsl.w	r0, r3, r0
   1e1e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1e1ea:	4318      	orrs	r0, r3
   1e1ec:	9041      	str	r0, [sp, #260]	; 0x104
   1e1ee:	f815 3b01 	ldrb.w	r3, [r5], #1
   1e1f2:	2b78      	cmp	r3, #120	; 0x78
   1e1f4:	d806      	bhi.n	1e204 <__ssvfiscanf_r+0xd4>
   1e1f6:	2b57      	cmp	r3, #87	; 0x57
   1e1f8:	d810      	bhi.n	1e21c <__ssvfiscanf_r+0xec>
   1e1fa:	2b25      	cmp	r3, #37	; 0x25
   1e1fc:	d05d      	beq.n	1e2ba <__ssvfiscanf_r+0x18a>
   1e1fe:	d857      	bhi.n	1e2b0 <__ssvfiscanf_r+0x180>
   1e200:	2b00      	cmp	r3, #0
   1e202:	d075      	beq.n	1e2f0 <__ssvfiscanf_r+0x1c0>
   1e204:	2303      	movs	r3, #3
   1e206:	9347      	str	r3, [sp, #284]	; 0x11c
   1e208:	230a      	movs	r3, #10
   1e20a:	9342      	str	r3, [sp, #264]	; 0x108
   1e20c:	e082      	b.n	1e314 <__ssvfiscanf_r+0x1e4>
   1e20e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   1e210:	465d      	mov	r5, fp
   1e212:	fb02 1303 	mla	r3, r2, r3, r1
   1e216:	3b30      	subs	r3, #48	; 0x30
   1e218:	9343      	str	r3, [sp, #268]	; 0x10c
   1e21a:	e7d3      	b.n	1e1c4 <__ssvfiscanf_r+0x94>
   1e21c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   1e220:	2a20      	cmp	r2, #32
   1e222:	d8ef      	bhi.n	1e204 <__ssvfiscanf_r+0xd4>
   1e224:	a101      	add	r1, pc, #4	; (adr r1, 1e22c <__ssvfiscanf_r+0xfc>)
   1e226:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1e22a:	bf00      	nop
   1e22c:	0001e2ff 	.word	0x0001e2ff
   1e230:	0001e205 	.word	0x0001e205
   1e234:	0001e205 	.word	0x0001e205
   1e238:	0001e35d 	.word	0x0001e35d
   1e23c:	0001e205 	.word	0x0001e205
   1e240:	0001e205 	.word	0x0001e205
   1e244:	0001e205 	.word	0x0001e205
   1e248:	0001e205 	.word	0x0001e205
   1e24c:	0001e205 	.word	0x0001e205
   1e250:	0001e205 	.word	0x0001e205
   1e254:	0001e205 	.word	0x0001e205
   1e258:	0001e373 	.word	0x0001e373
   1e25c:	0001e349 	.word	0x0001e349
   1e260:	0001e2b7 	.word	0x0001e2b7
   1e264:	0001e2b7 	.word	0x0001e2b7
   1e268:	0001e2b7 	.word	0x0001e2b7
   1e26c:	0001e205 	.word	0x0001e205
   1e270:	0001e34d 	.word	0x0001e34d
   1e274:	0001e205 	.word	0x0001e205
   1e278:	0001e205 	.word	0x0001e205
   1e27c:	0001e205 	.word	0x0001e205
   1e280:	0001e205 	.word	0x0001e205
   1e284:	0001e383 	.word	0x0001e383
   1e288:	0001e355 	.word	0x0001e355
   1e28c:	0001e2f7 	.word	0x0001e2f7
   1e290:	0001e205 	.word	0x0001e205
   1e294:	0001e205 	.word	0x0001e205
   1e298:	0001e37f 	.word	0x0001e37f
   1e29c:	0001e205 	.word	0x0001e205
   1e2a0:	0001e349 	.word	0x0001e349
   1e2a4:	0001e205 	.word	0x0001e205
   1e2a8:	0001e205 	.word	0x0001e205
   1e2ac:	0001e2ff 	.word	0x0001e2ff
   1e2b0:	3b45      	subs	r3, #69	; 0x45
   1e2b2:	2b02      	cmp	r3, #2
   1e2b4:	d8a6      	bhi.n	1e204 <__ssvfiscanf_r+0xd4>
   1e2b6:	2305      	movs	r3, #5
   1e2b8:	e02b      	b.n	1e312 <__ssvfiscanf_r+0x1e2>
   1e2ba:	6863      	ldr	r3, [r4, #4]
   1e2bc:	2b00      	cmp	r3, #0
   1e2be:	dd0d      	ble.n	1e2dc <__ssvfiscanf_r+0x1ac>
   1e2c0:	6823      	ldr	r3, [r4, #0]
   1e2c2:	781a      	ldrb	r2, [r3, #0]
   1e2c4:	4552      	cmp	r2, sl
   1e2c6:	f040 80a2 	bne.w	1e40e <__ssvfiscanf_r+0x2de>
   1e2ca:	3301      	adds	r3, #1
   1e2cc:	6862      	ldr	r2, [r4, #4]
   1e2ce:	6023      	str	r3, [r4, #0]
   1e2d0:	3a01      	subs	r2, #1
   1e2d2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1e2d4:	6062      	str	r2, [r4, #4]
   1e2d6:	3301      	adds	r3, #1
   1e2d8:	9345      	str	r3, [sp, #276]	; 0x114
   1e2da:	e752      	b.n	1e182 <__ssvfiscanf_r+0x52>
   1e2dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1e2de:	4621      	mov	r1, r4
   1e2e0:	4630      	mov	r0, r6
   1e2e2:	4798      	blx	r3
   1e2e4:	2800      	cmp	r0, #0
   1e2e6:	d0eb      	beq.n	1e2c0 <__ssvfiscanf_r+0x190>
   1e2e8:	9844      	ldr	r0, [sp, #272]	; 0x110
   1e2ea:	2800      	cmp	r0, #0
   1e2ec:	f040 8085 	bne.w	1e3fa <__ssvfiscanf_r+0x2ca>
   1e2f0:	f04f 30ff 	mov.w	r0, #4294967295
   1e2f4:	e087      	b.n	1e406 <__ssvfiscanf_r+0x2d6>
   1e2f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1e2f8:	f042 0220 	orr.w	r2, r2, #32
   1e2fc:	9241      	str	r2, [sp, #260]	; 0x104
   1e2fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1e300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1e304:	9241      	str	r2, [sp, #260]	; 0x104
   1e306:	2210      	movs	r2, #16
   1e308:	2b6f      	cmp	r3, #111	; 0x6f
   1e30a:	9242      	str	r2, [sp, #264]	; 0x108
   1e30c:	bf34      	ite	cc
   1e30e:	2303      	movcc	r3, #3
   1e310:	2304      	movcs	r3, #4
   1e312:	9347      	str	r3, [sp, #284]	; 0x11c
   1e314:	6863      	ldr	r3, [r4, #4]
   1e316:	2b00      	cmp	r3, #0
   1e318:	dd42      	ble.n	1e3a0 <__ssvfiscanf_r+0x270>
   1e31a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1e31c:	0659      	lsls	r1, r3, #25
   1e31e:	d404      	bmi.n	1e32a <__ssvfiscanf_r+0x1fa>
   1e320:	6823      	ldr	r3, [r4, #0]
   1e322:	781a      	ldrb	r2, [r3, #0]
   1e324:	5cba      	ldrb	r2, [r7, r2]
   1e326:	0712      	lsls	r2, r2, #28
   1e328:	d441      	bmi.n	1e3ae <__ssvfiscanf_r+0x27e>
   1e32a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1e32c:	2b02      	cmp	r3, #2
   1e32e:	dc50      	bgt.n	1e3d2 <__ssvfiscanf_r+0x2a2>
   1e330:	466b      	mov	r3, sp
   1e332:	4622      	mov	r2, r4
   1e334:	a941      	add	r1, sp, #260	; 0x104
   1e336:	4630      	mov	r0, r6
   1e338:	f000 f99c 	bl	1e674 <_scanf_chars>
   1e33c:	2801      	cmp	r0, #1
   1e33e:	d066      	beq.n	1e40e <__ssvfiscanf_r+0x2de>
   1e340:	2802      	cmp	r0, #2
   1e342:	f47f af1e 	bne.w	1e182 <__ssvfiscanf_r+0x52>
   1e346:	e7cf      	b.n	1e2e8 <__ssvfiscanf_r+0x1b8>
   1e348:	220a      	movs	r2, #10
   1e34a:	e7dd      	b.n	1e308 <__ssvfiscanf_r+0x1d8>
   1e34c:	2300      	movs	r3, #0
   1e34e:	9342      	str	r3, [sp, #264]	; 0x108
   1e350:	2303      	movs	r3, #3
   1e352:	e7de      	b.n	1e312 <__ssvfiscanf_r+0x1e2>
   1e354:	2308      	movs	r3, #8
   1e356:	9342      	str	r3, [sp, #264]	; 0x108
   1e358:	2304      	movs	r3, #4
   1e35a:	e7da      	b.n	1e312 <__ssvfiscanf_r+0x1e2>
   1e35c:	4629      	mov	r1, r5
   1e35e:	4640      	mov	r0, r8
   1e360:	f004 fbd6 	bl	22b10 <__sccl>
   1e364:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1e366:	4605      	mov	r5, r0
   1e368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e36c:	9341      	str	r3, [sp, #260]	; 0x104
   1e36e:	2301      	movs	r3, #1
   1e370:	e7cf      	b.n	1e312 <__ssvfiscanf_r+0x1e2>
   1e372:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1e374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e378:	9341      	str	r3, [sp, #260]	; 0x104
   1e37a:	2300      	movs	r3, #0
   1e37c:	e7c9      	b.n	1e312 <__ssvfiscanf_r+0x1e2>
   1e37e:	2302      	movs	r3, #2
   1e380:	e7c7      	b.n	1e312 <__ssvfiscanf_r+0x1e2>
   1e382:	9841      	ldr	r0, [sp, #260]	; 0x104
   1e384:	06c3      	lsls	r3, r0, #27
   1e386:	f53f aefc 	bmi.w	1e182 <__ssvfiscanf_r+0x52>
   1e38a:	9b00      	ldr	r3, [sp, #0]
   1e38c:	07c0      	lsls	r0, r0, #31
   1e38e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1e390:	f103 0104 	add.w	r1, r3, #4
   1e394:	9100      	str	r1, [sp, #0]
   1e396:	681b      	ldr	r3, [r3, #0]
   1e398:	bf4c      	ite	mi
   1e39a:	801a      	strhmi	r2, [r3, #0]
   1e39c:	601a      	strpl	r2, [r3, #0]
   1e39e:	e6f0      	b.n	1e182 <__ssvfiscanf_r+0x52>
   1e3a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1e3a2:	4621      	mov	r1, r4
   1e3a4:	4630      	mov	r0, r6
   1e3a6:	4798      	blx	r3
   1e3a8:	2800      	cmp	r0, #0
   1e3aa:	d0b6      	beq.n	1e31a <__ssvfiscanf_r+0x1ea>
   1e3ac:	e79c      	b.n	1e2e8 <__ssvfiscanf_r+0x1b8>
   1e3ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1e3b0:	3201      	adds	r2, #1
   1e3b2:	9245      	str	r2, [sp, #276]	; 0x114
   1e3b4:	6862      	ldr	r2, [r4, #4]
   1e3b6:	3a01      	subs	r2, #1
   1e3b8:	2a00      	cmp	r2, #0
   1e3ba:	6062      	str	r2, [r4, #4]
   1e3bc:	dd02      	ble.n	1e3c4 <__ssvfiscanf_r+0x294>
   1e3be:	3301      	adds	r3, #1
   1e3c0:	6023      	str	r3, [r4, #0]
   1e3c2:	e7ad      	b.n	1e320 <__ssvfiscanf_r+0x1f0>
   1e3c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1e3c6:	4621      	mov	r1, r4
   1e3c8:	4630      	mov	r0, r6
   1e3ca:	4798      	blx	r3
   1e3cc:	2800      	cmp	r0, #0
   1e3ce:	d0a7      	beq.n	1e320 <__ssvfiscanf_r+0x1f0>
   1e3d0:	e78a      	b.n	1e2e8 <__ssvfiscanf_r+0x1b8>
   1e3d2:	2b04      	cmp	r3, #4
   1e3d4:	dc06      	bgt.n	1e3e4 <__ssvfiscanf_r+0x2b4>
   1e3d6:	466b      	mov	r3, sp
   1e3d8:	4622      	mov	r2, r4
   1e3da:	a941      	add	r1, sp, #260	; 0x104
   1e3dc:	4630      	mov	r0, r6
   1e3de:	f000 f9a1 	bl	1e724 <_scanf_i>
   1e3e2:	e7ab      	b.n	1e33c <__ssvfiscanf_r+0x20c>
   1e3e4:	4b0f      	ldr	r3, [pc, #60]	; (1e424 <__ssvfiscanf_r+0x2f4>)
   1e3e6:	2b00      	cmp	r3, #0
   1e3e8:	f43f aecb 	beq.w	1e182 <__ssvfiscanf_r+0x52>
   1e3ec:	466b      	mov	r3, sp
   1e3ee:	4622      	mov	r2, r4
   1e3f0:	a941      	add	r1, sp, #260	; 0x104
   1e3f2:	4630      	mov	r0, r6
   1e3f4:	e000      	b.n	1e3f8 <__ssvfiscanf_r+0x2c8>
   1e3f6:	bf00      	nop
   1e3f8:	e7a0      	b.n	1e33c <__ssvfiscanf_r+0x20c>
   1e3fa:	89a3      	ldrh	r3, [r4, #12]
   1e3fc:	f013 0f40 	tst.w	r3, #64	; 0x40
   1e400:	bf18      	it	ne
   1e402:	f04f 30ff 	movne.w	r0, #4294967295
   1e406:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   1e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e40e:	9844      	ldr	r0, [sp, #272]	; 0x110
   1e410:	e7f9      	b.n	1e406 <__ssvfiscanf_r+0x2d6>
   1e412:	bf00      	nop
   1e414:	000252b9 	.word	0x000252b9
   1e418:	0002297d 	.word	0x0002297d
   1e41c:	000229f7 	.word	0x000229f7
   1e420:	000253bf 	.word	0x000253bf
   1e424:	00000000 	.word	0x00000000

0001e428 <_printf_i>:
   1e428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e42c:	460c      	mov	r4, r1
   1e42e:	4691      	mov	r9, r2
   1e430:	4680      	mov	r8, r0
   1e432:	469a      	mov	sl, r3
   1e434:	7e27      	ldrb	r7, [r4, #24]
   1e436:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1e43a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1e43c:	2f78      	cmp	r7, #120	; 0x78
   1e43e:	d807      	bhi.n	1e450 <_printf_i+0x28>
   1e440:	2f62      	cmp	r7, #98	; 0x62
   1e442:	d80a      	bhi.n	1e45a <_printf_i+0x32>
   1e444:	2f00      	cmp	r7, #0
   1e446:	f000 80d8 	beq.w	1e5fa <_printf_i+0x1d2>
   1e44a:	2f58      	cmp	r7, #88	; 0x58
   1e44c:	f000 80a3 	beq.w	1e596 <_printf_i+0x16e>
   1e450:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1e454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1e458:	e03a      	b.n	1e4d0 <_printf_i+0xa8>
   1e45a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1e45e:	2b15      	cmp	r3, #21
   1e460:	d8f6      	bhi.n	1e450 <_printf_i+0x28>
   1e462:	a001      	add	r0, pc, #4	; (adr r0, 1e468 <_printf_i+0x40>)
   1e464:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1e468:	0001e4c1 	.word	0x0001e4c1
   1e46c:	0001e4d5 	.word	0x0001e4d5
   1e470:	0001e451 	.word	0x0001e451
   1e474:	0001e451 	.word	0x0001e451
   1e478:	0001e451 	.word	0x0001e451
   1e47c:	0001e451 	.word	0x0001e451
   1e480:	0001e4d5 	.word	0x0001e4d5
   1e484:	0001e451 	.word	0x0001e451
   1e488:	0001e451 	.word	0x0001e451
   1e48c:	0001e451 	.word	0x0001e451
   1e490:	0001e451 	.word	0x0001e451
   1e494:	0001e5e1 	.word	0x0001e5e1
   1e498:	0001e505 	.word	0x0001e505
   1e49c:	0001e5c3 	.word	0x0001e5c3
   1e4a0:	0001e451 	.word	0x0001e451
   1e4a4:	0001e451 	.word	0x0001e451
   1e4a8:	0001e603 	.word	0x0001e603
   1e4ac:	0001e451 	.word	0x0001e451
   1e4b0:	0001e505 	.word	0x0001e505
   1e4b4:	0001e451 	.word	0x0001e451
   1e4b8:	0001e451 	.word	0x0001e451
   1e4bc:	0001e5cb 	.word	0x0001e5cb
   1e4c0:	680b      	ldr	r3, [r1, #0]
   1e4c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1e4c6:	1d1a      	adds	r2, r3, #4
   1e4c8:	681b      	ldr	r3, [r3, #0]
   1e4ca:	600a      	str	r2, [r1, #0]
   1e4cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1e4d0:	2301      	movs	r3, #1
   1e4d2:	e0a3      	b.n	1e61c <_printf_i+0x1f4>
   1e4d4:	6825      	ldr	r5, [r4, #0]
   1e4d6:	6808      	ldr	r0, [r1, #0]
   1e4d8:	062e      	lsls	r6, r5, #24
   1e4da:	f100 0304 	add.w	r3, r0, #4
   1e4de:	d50a      	bpl.n	1e4f6 <_printf_i+0xce>
   1e4e0:	6805      	ldr	r5, [r0, #0]
   1e4e2:	600b      	str	r3, [r1, #0]
   1e4e4:	2d00      	cmp	r5, #0
   1e4e6:	da03      	bge.n	1e4f0 <_printf_i+0xc8>
   1e4e8:	232d      	movs	r3, #45	; 0x2d
   1e4ea:	426d      	negs	r5, r5
   1e4ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1e4f0:	485e      	ldr	r0, [pc, #376]	; (1e66c <_printf_i+0x244>)
   1e4f2:	230a      	movs	r3, #10
   1e4f4:	e019      	b.n	1e52a <_printf_i+0x102>
   1e4f6:	f015 0f40 	tst.w	r5, #64	; 0x40
   1e4fa:	6805      	ldr	r5, [r0, #0]
   1e4fc:	600b      	str	r3, [r1, #0]
   1e4fe:	bf18      	it	ne
   1e500:	b22d      	sxthne	r5, r5
   1e502:	e7ef      	b.n	1e4e4 <_printf_i+0xbc>
   1e504:	680b      	ldr	r3, [r1, #0]
   1e506:	6825      	ldr	r5, [r4, #0]
   1e508:	1d18      	adds	r0, r3, #4
   1e50a:	6008      	str	r0, [r1, #0]
   1e50c:	0628      	lsls	r0, r5, #24
   1e50e:	d501      	bpl.n	1e514 <_printf_i+0xec>
   1e510:	681d      	ldr	r5, [r3, #0]
   1e512:	e002      	b.n	1e51a <_printf_i+0xf2>
   1e514:	0669      	lsls	r1, r5, #25
   1e516:	d5fb      	bpl.n	1e510 <_printf_i+0xe8>
   1e518:	881d      	ldrh	r5, [r3, #0]
   1e51a:	2f6f      	cmp	r7, #111	; 0x6f
   1e51c:	4853      	ldr	r0, [pc, #332]	; (1e66c <_printf_i+0x244>)
   1e51e:	bf0c      	ite	eq
   1e520:	2308      	moveq	r3, #8
   1e522:	230a      	movne	r3, #10
   1e524:	2100      	movs	r1, #0
   1e526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1e52a:	6866      	ldr	r6, [r4, #4]
   1e52c:	2e00      	cmp	r6, #0
   1e52e:	60a6      	str	r6, [r4, #8]
   1e530:	bfa2      	ittt	ge
   1e532:	6821      	ldrge	r1, [r4, #0]
   1e534:	f021 0104 	bicge.w	r1, r1, #4
   1e538:	6021      	strge	r1, [r4, #0]
   1e53a:	b90d      	cbnz	r5, 1e540 <_printf_i+0x118>
   1e53c:	2e00      	cmp	r6, #0
   1e53e:	d04d      	beq.n	1e5dc <_printf_i+0x1b4>
   1e540:	4616      	mov	r6, r2
   1e542:	fbb5 f1f3 	udiv	r1, r5, r3
   1e546:	fb03 5711 	mls	r7, r3, r1, r5
   1e54a:	5dc7      	ldrb	r7, [r0, r7]
   1e54c:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1e550:	462f      	mov	r7, r5
   1e552:	460d      	mov	r5, r1
   1e554:	42bb      	cmp	r3, r7
   1e556:	d9f4      	bls.n	1e542 <_printf_i+0x11a>
   1e558:	2b08      	cmp	r3, #8
   1e55a:	d10b      	bne.n	1e574 <_printf_i+0x14c>
   1e55c:	6823      	ldr	r3, [r4, #0]
   1e55e:	07df      	lsls	r7, r3, #31
   1e560:	d508      	bpl.n	1e574 <_printf_i+0x14c>
   1e562:	6923      	ldr	r3, [r4, #16]
   1e564:	6861      	ldr	r1, [r4, #4]
   1e566:	4299      	cmp	r1, r3
   1e568:	bfde      	ittt	le
   1e56a:	2330      	movle	r3, #48	; 0x30
   1e56c:	f806 3c01 	strble.w	r3, [r6, #-1]
   1e570:	f106 36ff 	addle.w	r6, r6, #4294967295
   1e574:	1b92      	subs	r2, r2, r6
   1e576:	6122      	str	r2, [r4, #16]
   1e578:	464b      	mov	r3, r9
   1e57a:	aa03      	add	r2, sp, #12
   1e57c:	4621      	mov	r1, r4
   1e57e:	4640      	mov	r0, r8
   1e580:	f8cd a000 	str.w	sl, [sp]
   1e584:	f004 fa54 	bl	22a30 <_printf_common>
   1e588:	3001      	adds	r0, #1
   1e58a:	d14c      	bne.n	1e626 <_printf_i+0x1fe>
   1e58c:	f04f 30ff 	mov.w	r0, #4294967295
   1e590:	b004      	add	sp, #16
   1e592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e596:	4835      	ldr	r0, [pc, #212]	; (1e66c <_printf_i+0x244>)
   1e598:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1e59c:	6823      	ldr	r3, [r4, #0]
   1e59e:	680e      	ldr	r6, [r1, #0]
   1e5a0:	061f      	lsls	r7, r3, #24
   1e5a2:	f856 5b04 	ldr.w	r5, [r6], #4
   1e5a6:	600e      	str	r6, [r1, #0]
   1e5a8:	d514      	bpl.n	1e5d4 <_printf_i+0x1ac>
   1e5aa:	07d9      	lsls	r1, r3, #31
   1e5ac:	bf44      	itt	mi
   1e5ae:	f043 0320 	orrmi.w	r3, r3, #32
   1e5b2:	6023      	strmi	r3, [r4, #0]
   1e5b4:	b91d      	cbnz	r5, 1e5be <_printf_i+0x196>
   1e5b6:	6823      	ldr	r3, [r4, #0]
   1e5b8:	f023 0320 	bic.w	r3, r3, #32
   1e5bc:	6023      	str	r3, [r4, #0]
   1e5be:	2310      	movs	r3, #16
   1e5c0:	e7b0      	b.n	1e524 <_printf_i+0xfc>
   1e5c2:	6823      	ldr	r3, [r4, #0]
   1e5c4:	f043 0320 	orr.w	r3, r3, #32
   1e5c8:	6023      	str	r3, [r4, #0]
   1e5ca:	2378      	movs	r3, #120	; 0x78
   1e5cc:	4828      	ldr	r0, [pc, #160]	; (1e670 <_printf_i+0x248>)
   1e5ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1e5d2:	e7e3      	b.n	1e59c <_printf_i+0x174>
   1e5d4:	065e      	lsls	r6, r3, #25
   1e5d6:	bf48      	it	mi
   1e5d8:	b2ad      	uxthmi	r5, r5
   1e5da:	e7e6      	b.n	1e5aa <_printf_i+0x182>
   1e5dc:	4616      	mov	r6, r2
   1e5de:	e7bb      	b.n	1e558 <_printf_i+0x130>
   1e5e0:	680b      	ldr	r3, [r1, #0]
   1e5e2:	6826      	ldr	r6, [r4, #0]
   1e5e4:	1d1d      	adds	r5, r3, #4
   1e5e6:	6960      	ldr	r0, [r4, #20]
   1e5e8:	600d      	str	r5, [r1, #0]
   1e5ea:	0635      	lsls	r5, r6, #24
   1e5ec:	681b      	ldr	r3, [r3, #0]
   1e5ee:	d501      	bpl.n	1e5f4 <_printf_i+0x1cc>
   1e5f0:	6018      	str	r0, [r3, #0]
   1e5f2:	e002      	b.n	1e5fa <_printf_i+0x1d2>
   1e5f4:	0671      	lsls	r1, r6, #25
   1e5f6:	d5fb      	bpl.n	1e5f0 <_printf_i+0x1c8>
   1e5f8:	8018      	strh	r0, [r3, #0]
   1e5fa:	2300      	movs	r3, #0
   1e5fc:	4616      	mov	r6, r2
   1e5fe:	6123      	str	r3, [r4, #16]
   1e600:	e7ba      	b.n	1e578 <_printf_i+0x150>
   1e602:	680b      	ldr	r3, [r1, #0]
   1e604:	1d1a      	adds	r2, r3, #4
   1e606:	600a      	str	r2, [r1, #0]
   1e608:	2100      	movs	r1, #0
   1e60a:	681e      	ldr	r6, [r3, #0]
   1e60c:	6862      	ldr	r2, [r4, #4]
   1e60e:	4630      	mov	r0, r6
   1e610:	f004 f898 	bl	22744 <memchr>
   1e614:	b108      	cbz	r0, 1e61a <_printf_i+0x1f2>
   1e616:	1b80      	subs	r0, r0, r6
   1e618:	6060      	str	r0, [r4, #4]
   1e61a:	6863      	ldr	r3, [r4, #4]
   1e61c:	6123      	str	r3, [r4, #16]
   1e61e:	2300      	movs	r3, #0
   1e620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1e624:	e7a8      	b.n	1e578 <_printf_i+0x150>
   1e626:	6923      	ldr	r3, [r4, #16]
   1e628:	4632      	mov	r2, r6
   1e62a:	4649      	mov	r1, r9
   1e62c:	4640      	mov	r0, r8
   1e62e:	47d0      	blx	sl
   1e630:	3001      	adds	r0, #1
   1e632:	d0ab      	beq.n	1e58c <_printf_i+0x164>
   1e634:	6823      	ldr	r3, [r4, #0]
   1e636:	079b      	lsls	r3, r3, #30
   1e638:	d413      	bmi.n	1e662 <_printf_i+0x23a>
   1e63a:	68e0      	ldr	r0, [r4, #12]
   1e63c:	9b03      	ldr	r3, [sp, #12]
   1e63e:	4298      	cmp	r0, r3
   1e640:	bfb8      	it	lt
   1e642:	4618      	movlt	r0, r3
   1e644:	e7a4      	b.n	1e590 <_printf_i+0x168>
   1e646:	2301      	movs	r3, #1
   1e648:	4632      	mov	r2, r6
   1e64a:	4649      	mov	r1, r9
   1e64c:	4640      	mov	r0, r8
   1e64e:	47d0      	blx	sl
   1e650:	3001      	adds	r0, #1
   1e652:	d09b      	beq.n	1e58c <_printf_i+0x164>
   1e654:	3501      	adds	r5, #1
   1e656:	68e3      	ldr	r3, [r4, #12]
   1e658:	9903      	ldr	r1, [sp, #12]
   1e65a:	1a5b      	subs	r3, r3, r1
   1e65c:	42ab      	cmp	r3, r5
   1e65e:	dcf2      	bgt.n	1e646 <_printf_i+0x21e>
   1e660:	e7eb      	b.n	1e63a <_printf_i+0x212>
   1e662:	2500      	movs	r5, #0
   1e664:	f104 0619 	add.w	r6, r4, #25
   1e668:	e7f5      	b.n	1e656 <_printf_i+0x22e>
   1e66a:	bf00      	nop
   1e66c:	000253ca 	.word	0x000253ca
   1e670:	000253db 	.word	0x000253db

0001e674 <_scanf_chars>:
   1e674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e678:	4615      	mov	r5, r2
   1e67a:	688a      	ldr	r2, [r1, #8]
   1e67c:	4680      	mov	r8, r0
   1e67e:	460c      	mov	r4, r1
   1e680:	b932      	cbnz	r2, 1e690 <_scanf_chars+0x1c>
   1e682:	698a      	ldr	r2, [r1, #24]
   1e684:	2a00      	cmp	r2, #0
   1e686:	bf0c      	ite	eq
   1e688:	2201      	moveq	r2, #1
   1e68a:	f04f 32ff 	movne.w	r2, #4294967295
   1e68e:	608a      	str	r2, [r1, #8]
   1e690:	6822      	ldr	r2, [r4, #0]
   1e692:	2700      	movs	r7, #0
   1e694:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1e720 <_scanf_chars+0xac>
   1e698:	06d1      	lsls	r1, r2, #27
   1e69a:	bf5f      	itttt	pl
   1e69c:	681a      	ldrpl	r2, [r3, #0]
   1e69e:	1d11      	addpl	r1, r2, #4
   1e6a0:	6019      	strpl	r1, [r3, #0]
   1e6a2:	6816      	ldrpl	r6, [r2, #0]
   1e6a4:	69a0      	ldr	r0, [r4, #24]
   1e6a6:	b188      	cbz	r0, 1e6cc <_scanf_chars+0x58>
   1e6a8:	2801      	cmp	r0, #1
   1e6aa:	d107      	bne.n	1e6bc <_scanf_chars+0x48>
   1e6ac:	682b      	ldr	r3, [r5, #0]
   1e6ae:	781a      	ldrb	r2, [r3, #0]
   1e6b0:	6963      	ldr	r3, [r4, #20]
   1e6b2:	5c9b      	ldrb	r3, [r3, r2]
   1e6b4:	b953      	cbnz	r3, 1e6cc <_scanf_chars+0x58>
   1e6b6:	bb27      	cbnz	r7, 1e702 <_scanf_chars+0x8e>
   1e6b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e6bc:	2802      	cmp	r0, #2
   1e6be:	d120      	bne.n	1e702 <_scanf_chars+0x8e>
   1e6c0:	682b      	ldr	r3, [r5, #0]
   1e6c2:	781b      	ldrb	r3, [r3, #0]
   1e6c4:	f813 3009 	ldrb.w	r3, [r3, r9]
   1e6c8:	071b      	lsls	r3, r3, #28
   1e6ca:	d41a      	bmi.n	1e702 <_scanf_chars+0x8e>
   1e6cc:	6823      	ldr	r3, [r4, #0]
   1e6ce:	3701      	adds	r7, #1
   1e6d0:	06da      	lsls	r2, r3, #27
   1e6d2:	bf5e      	ittt	pl
   1e6d4:	682b      	ldrpl	r3, [r5, #0]
   1e6d6:	781b      	ldrbpl	r3, [r3, #0]
   1e6d8:	f806 3b01 	strbpl.w	r3, [r6], #1
   1e6dc:	682a      	ldr	r2, [r5, #0]
   1e6de:	686b      	ldr	r3, [r5, #4]
   1e6e0:	3201      	adds	r2, #1
   1e6e2:	3b01      	subs	r3, #1
   1e6e4:	602a      	str	r2, [r5, #0]
   1e6e6:	68a2      	ldr	r2, [r4, #8]
   1e6e8:	606b      	str	r3, [r5, #4]
   1e6ea:	3a01      	subs	r2, #1
   1e6ec:	60a2      	str	r2, [r4, #8]
   1e6ee:	b142      	cbz	r2, 1e702 <_scanf_chars+0x8e>
   1e6f0:	2b00      	cmp	r3, #0
   1e6f2:	dcd7      	bgt.n	1e6a4 <_scanf_chars+0x30>
   1e6f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1e6f8:	4629      	mov	r1, r5
   1e6fa:	4640      	mov	r0, r8
   1e6fc:	4798      	blx	r3
   1e6fe:	2800      	cmp	r0, #0
   1e700:	d0d0      	beq.n	1e6a4 <_scanf_chars+0x30>
   1e702:	6823      	ldr	r3, [r4, #0]
   1e704:	f013 0310 	ands.w	r3, r3, #16
   1e708:	d105      	bne.n	1e716 <_scanf_chars+0xa2>
   1e70a:	68e2      	ldr	r2, [r4, #12]
   1e70c:	3201      	adds	r2, #1
   1e70e:	60e2      	str	r2, [r4, #12]
   1e710:	69a2      	ldr	r2, [r4, #24]
   1e712:	b102      	cbz	r2, 1e716 <_scanf_chars+0xa2>
   1e714:	7033      	strb	r3, [r6, #0]
   1e716:	6923      	ldr	r3, [r4, #16]
   1e718:	2000      	movs	r0, #0
   1e71a:	441f      	add	r7, r3
   1e71c:	6127      	str	r7, [r4, #16]
   1e71e:	e7cb      	b.n	1e6b8 <_scanf_chars+0x44>
   1e720:	000252b9 	.word	0x000252b9

0001e724 <_scanf_i>:
   1e724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e728:	4698      	mov	r8, r3
   1e72a:	b087      	sub	sp, #28
   1e72c:	4b72      	ldr	r3, [pc, #456]	; (1e8f8 <_scanf_i+0x1d4>)
   1e72e:	460c      	mov	r4, r1
   1e730:	4682      	mov	sl, r0
   1e732:	4616      	mov	r6, r2
   1e734:	4627      	mov	r7, r4
   1e736:	f04f 0b00 	mov.w	fp, #0
   1e73a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1e73e:	ab03      	add	r3, sp, #12
   1e740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1e744:	4b6d      	ldr	r3, [pc, #436]	; (1e8fc <_scanf_i+0x1d8>)
   1e746:	69a1      	ldr	r1, [r4, #24]
   1e748:	4a6d      	ldr	r2, [pc, #436]	; (1e900 <_scanf_i+0x1dc>)
   1e74a:	2903      	cmp	r1, #3
   1e74c:	bf18      	it	ne
   1e74e:	461a      	movne	r2, r3
   1e750:	68a3      	ldr	r3, [r4, #8]
   1e752:	9201      	str	r2, [sp, #4]
   1e754:	1e5a      	subs	r2, r3, #1
   1e756:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   1e75a:	bf89      	itett	hi
   1e75c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   1e760:	f04f 0900 	movls.w	r9, #0
   1e764:	eb03 0905 	addhi.w	r9, r3, r5
   1e768:	f240 135d 	movwhi	r3, #349	; 0x15d
   1e76c:	bf88      	it	hi
   1e76e:	60a3      	strhi	r3, [r4, #8]
   1e770:	f857 3b1c 	ldr.w	r3, [r7], #28
   1e774:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   1e778:	463d      	mov	r5, r7
   1e77a:	6023      	str	r3, [r4, #0]
   1e77c:	6831      	ldr	r1, [r6, #0]
   1e77e:	ab03      	add	r3, sp, #12
   1e780:	2202      	movs	r2, #2
   1e782:	7809      	ldrb	r1, [r1, #0]
   1e784:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   1e788:	f003 ffdc 	bl	22744 <memchr>
   1e78c:	b328      	cbz	r0, 1e7da <_scanf_i+0xb6>
   1e78e:	f1bb 0f01 	cmp.w	fp, #1
   1e792:	d159      	bne.n	1e848 <_scanf_i+0x124>
   1e794:	6862      	ldr	r2, [r4, #4]
   1e796:	b92a      	cbnz	r2, 1e7a4 <_scanf_i+0x80>
   1e798:	6822      	ldr	r2, [r4, #0]
   1e79a:	2308      	movs	r3, #8
   1e79c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1e7a0:	6063      	str	r3, [r4, #4]
   1e7a2:	6022      	str	r2, [r4, #0]
   1e7a4:	6822      	ldr	r2, [r4, #0]
   1e7a6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   1e7aa:	6022      	str	r2, [r4, #0]
   1e7ac:	68a2      	ldr	r2, [r4, #8]
   1e7ae:	1e51      	subs	r1, r2, #1
   1e7b0:	60a1      	str	r1, [r4, #8]
   1e7b2:	b192      	cbz	r2, 1e7da <_scanf_i+0xb6>
   1e7b4:	6832      	ldr	r2, [r6, #0]
   1e7b6:	1c51      	adds	r1, r2, #1
   1e7b8:	6031      	str	r1, [r6, #0]
   1e7ba:	7812      	ldrb	r2, [r2, #0]
   1e7bc:	f805 2b01 	strb.w	r2, [r5], #1
   1e7c0:	6872      	ldr	r2, [r6, #4]
   1e7c2:	3a01      	subs	r2, #1
   1e7c4:	2a00      	cmp	r2, #0
   1e7c6:	6072      	str	r2, [r6, #4]
   1e7c8:	dc07      	bgt.n	1e7da <_scanf_i+0xb6>
   1e7ca:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   1e7ce:	4631      	mov	r1, r6
   1e7d0:	4650      	mov	r0, sl
   1e7d2:	4790      	blx	r2
   1e7d4:	2800      	cmp	r0, #0
   1e7d6:	f040 8085 	bne.w	1e8e4 <_scanf_i+0x1c0>
   1e7da:	f10b 0b01 	add.w	fp, fp, #1
   1e7de:	f1bb 0f03 	cmp.w	fp, #3
   1e7e2:	d1cb      	bne.n	1e77c <_scanf_i+0x58>
   1e7e4:	6863      	ldr	r3, [r4, #4]
   1e7e6:	b90b      	cbnz	r3, 1e7ec <_scanf_i+0xc8>
   1e7e8:	230a      	movs	r3, #10
   1e7ea:	6063      	str	r3, [r4, #4]
   1e7ec:	6863      	ldr	r3, [r4, #4]
   1e7ee:	f04f 0b00 	mov.w	fp, #0
   1e7f2:	4944      	ldr	r1, [pc, #272]	; (1e904 <_scanf_i+0x1e0>)
   1e7f4:	6960      	ldr	r0, [r4, #20]
   1e7f6:	1ac9      	subs	r1, r1, r3
   1e7f8:	f004 f98a 	bl	22b10 <__sccl>
   1e7fc:	68a3      	ldr	r3, [r4, #8]
   1e7fe:	6822      	ldr	r2, [r4, #0]
   1e800:	2b00      	cmp	r3, #0
   1e802:	d03d      	beq.n	1e880 <_scanf_i+0x15c>
   1e804:	6831      	ldr	r1, [r6, #0]
   1e806:	6960      	ldr	r0, [r4, #20]
   1e808:	f891 c000 	ldrb.w	ip, [r1]
   1e80c:	f810 000c 	ldrb.w	r0, [r0, ip]
   1e810:	2800      	cmp	r0, #0
   1e812:	d035      	beq.n	1e880 <_scanf_i+0x15c>
   1e814:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   1e818:	d124      	bne.n	1e864 <_scanf_i+0x140>
   1e81a:	0510      	lsls	r0, r2, #20
   1e81c:	d522      	bpl.n	1e864 <_scanf_i+0x140>
   1e81e:	f10b 0b01 	add.w	fp, fp, #1
   1e822:	f1b9 0f00 	cmp.w	r9, #0
   1e826:	d003      	beq.n	1e830 <_scanf_i+0x10c>
   1e828:	3301      	adds	r3, #1
   1e82a:	f109 39ff 	add.w	r9, r9, #4294967295
   1e82e:	60a3      	str	r3, [r4, #8]
   1e830:	6873      	ldr	r3, [r6, #4]
   1e832:	3b01      	subs	r3, #1
   1e834:	2b00      	cmp	r3, #0
   1e836:	6073      	str	r3, [r6, #4]
   1e838:	dd1b      	ble.n	1e872 <_scanf_i+0x14e>
   1e83a:	6833      	ldr	r3, [r6, #0]
   1e83c:	3301      	adds	r3, #1
   1e83e:	6033      	str	r3, [r6, #0]
   1e840:	68a3      	ldr	r3, [r4, #8]
   1e842:	3b01      	subs	r3, #1
   1e844:	60a3      	str	r3, [r4, #8]
   1e846:	e7d9      	b.n	1e7fc <_scanf_i+0xd8>
   1e848:	f1bb 0f02 	cmp.w	fp, #2
   1e84c:	d1ae      	bne.n	1e7ac <_scanf_i+0x88>
   1e84e:	6822      	ldr	r2, [r4, #0]
   1e850:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   1e854:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1e858:	d1bf      	bne.n	1e7da <_scanf_i+0xb6>
   1e85a:	2310      	movs	r3, #16
   1e85c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1e860:	6063      	str	r3, [r4, #4]
   1e862:	e7a2      	b.n	1e7aa <_scanf_i+0x86>
   1e864:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   1e868:	6022      	str	r2, [r4, #0]
   1e86a:	780b      	ldrb	r3, [r1, #0]
   1e86c:	f805 3b01 	strb.w	r3, [r5], #1
   1e870:	e7de      	b.n	1e830 <_scanf_i+0x10c>
   1e872:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1e876:	4631      	mov	r1, r6
   1e878:	4650      	mov	r0, sl
   1e87a:	4798      	blx	r3
   1e87c:	2800      	cmp	r0, #0
   1e87e:	d0df      	beq.n	1e840 <_scanf_i+0x11c>
   1e880:	6823      	ldr	r3, [r4, #0]
   1e882:	05d9      	lsls	r1, r3, #23
   1e884:	d50d      	bpl.n	1e8a2 <_scanf_i+0x17e>
   1e886:	42bd      	cmp	r5, r7
   1e888:	d909      	bls.n	1e89e <_scanf_i+0x17a>
   1e88a:	f105 39ff 	add.w	r9, r5, #4294967295
   1e88e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1e892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1e896:	4632      	mov	r2, r6
   1e898:	464d      	mov	r5, r9
   1e89a:	4650      	mov	r0, sl
   1e89c:	4798      	blx	r3
   1e89e:	42bd      	cmp	r5, r7
   1e8a0:	d028      	beq.n	1e8f4 <_scanf_i+0x1d0>
   1e8a2:	6822      	ldr	r2, [r4, #0]
   1e8a4:	f012 0210 	ands.w	r2, r2, #16
   1e8a8:	d113      	bne.n	1e8d2 <_scanf_i+0x1ae>
   1e8aa:	702a      	strb	r2, [r5, #0]
   1e8ac:	4639      	mov	r1, r7
   1e8ae:	6863      	ldr	r3, [r4, #4]
   1e8b0:	4650      	mov	r0, sl
   1e8b2:	9e01      	ldr	r6, [sp, #4]
   1e8b4:	47b0      	blx	r6
   1e8b6:	f8d8 3000 	ldr.w	r3, [r8]
   1e8ba:	6821      	ldr	r1, [r4, #0]
   1e8bc:	1d1a      	adds	r2, r3, #4
   1e8be:	f011 0f20 	tst.w	r1, #32
   1e8c2:	f8c8 2000 	str.w	r2, [r8]
   1e8c6:	681b      	ldr	r3, [r3, #0]
   1e8c8:	d00f      	beq.n	1e8ea <_scanf_i+0x1c6>
   1e8ca:	6018      	str	r0, [r3, #0]
   1e8cc:	68e3      	ldr	r3, [r4, #12]
   1e8ce:	3301      	adds	r3, #1
   1e8d0:	60e3      	str	r3, [r4, #12]
   1e8d2:	1bed      	subs	r5, r5, r7
   1e8d4:	2000      	movs	r0, #0
   1e8d6:	44ab      	add	fp, r5
   1e8d8:	6925      	ldr	r5, [r4, #16]
   1e8da:	445d      	add	r5, fp
   1e8dc:	6125      	str	r5, [r4, #16]
   1e8de:	b007      	add	sp, #28
   1e8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8e4:	f04f 0b00 	mov.w	fp, #0
   1e8e8:	e7ca      	b.n	1e880 <_scanf_i+0x15c>
   1e8ea:	07ca      	lsls	r2, r1, #31
   1e8ec:	bf4c      	ite	mi
   1e8ee:	8018      	strhmi	r0, [r3, #0]
   1e8f0:	6018      	strpl	r0, [r3, #0]
   1e8f2:	e7eb      	b.n	1e8cc <_scanf_i+0x1a8>
   1e8f4:	2001      	movs	r0, #1
   1e8f6:	e7f2      	b.n	1e8de <_scanf_i+0x1ba>
   1e8f8:	000230d8 	.word	0x000230d8
   1e8fc:	0002286b 	.word	0x0002286b
   1e900:	00022867 	.word	0x00022867
   1e904:	00025405 	.word	0x00025405

0001e908 <main>:
#include "../internal_uart/internal_uart.h"
#include "../gpioif/gpio_interface.h"

// --- functions definitions ---------------------------------------------------
void main(void)
{
   1e908:	b508      	push	{r3, lr}
    internal_uart_init();
   1e90a:	f7f2 ff29 	bl	11760 <internal_uart_init>
    gpio_row_control_init();
}
   1e90e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpio_row_control_init();
   1e912:	f7f3 ba6d 	b.w	11df0 <gpio_row_control_init>

0001e916 <crc16_ansi>:
 *
 * @return The computed CRC16 value
 */
static inline uint16_t crc16_ansi(const uint8_t *src, size_t len)
{
	return crc16(src, len, 0x8005, 0xffff, true);
   1e916:	2301      	movs	r3, #1
{
   1e918:	b507      	push	{r0, r1, r2, lr}
	return crc16(src, len, 0x8005, 0xffff, true);
   1e91a:	f248 0205 	movw	r2, #32773	; 0x8005
   1e91e:	9300      	str	r3, [sp, #0]
   1e920:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e924:	f000 f8b6 	bl	1ea94 <crc16>
}
   1e928:	b003      	add	sp, #12
   1e92a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e92e <create_operation_result_tx_message>:
 * @param status 
 */
void create_operation_result_tx_message(message_operation_result_t *out_buffer, uint8_t status)
{
    // Set type and length of message
    out_buffer->len = sizeof(message_operation_result_t);
   1e92e:	2306      	movs	r3, #6
{
   1e930:	b510      	push	{r4, lr}
    out_buffer->len = sizeof(message_operation_result_t);
   1e932:	7043      	strb	r3, [r0, #1]
    out_buffer->type = MESSAGE_OPERATION_RESULT;
   1e934:	23fd      	movs	r3, #253	; 0xfd

    // Set the message data
    out_buffer->operation_result = status;
   1e936:	8041      	strh	r1, [r0, #2]
    out_buffer->type = MESSAGE_OPERATION_RESULT;
   1e938:	7003      	strb	r3, [r0, #0]

    // Calculate crc of the message
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_operation_result_t) - sizeof(out_buffer->message_crc));
   1e93a:	2104      	movs	r1, #4
{
   1e93c:	4604      	mov	r4, r0
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_operation_result_t) - sizeof(out_buffer->message_crc));
   1e93e:	f7ff ffea 	bl	1e916 <crc16_ansi>
   1e942:	80a0      	strh	r0, [r4, #4]
}
   1e944:	bd10      	pop	{r4, pc}

0001e946 <create_coap_row_mean_data_message>:
 * 
 * @param in_buffer 
 * @param out_buffer 
 */
void create_coap_row_mean_data_message(const row_mean_data_t* in_buffer, message_coap_row_mean_data_t *out_buffer, int64_t timestamp_val)
{
   1e946:	b510      	push	{r4, lr}
   1e948:	460c      	mov	r4, r1
    // Set type and length of message
    out_buffer->len = sizeof(message_coap_row_mean_data_t);
   1e94a:	2118      	movs	r1, #24
   1e94c:	7061      	strb	r1, [r4, #1]
    out_buffer->type = MESSAGE_COAP_ROW_MEAN_DATA;
   1e94e:	21b1      	movs	r1, #177	; 0xb1
   1e950:	7021      	strb	r1, [r4, #0]

    // Set the message data
    out_buffer->mean_hum = in_buffer->mean_row_humidity;
   1e952:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   1e956:	80a1      	strh	r1, [r4, #4]
    out_buffer->mean_temp = in_buffer->mean_row_temp;
   1e958:	f9b0 1000 	ldrsh.w	r1, [r0]
   1e95c:	8061      	strh	r1, [r4, #2]
    out_buffer->mean_soil_moisture = in_buffer->mean_row_soil_moisture;
   1e95e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   1e962:	80e1      	strh	r1, [r4, #6]
    out_buffer->mean_light_intensity = in_buffer->mean_row_light;
   1e964:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   1e968:	8121      	strh	r1, [r4, #8]
    out_buffer->is_fan_active = in_buffer->is_fan_active;
   1e96a:	7a01      	ldrb	r1, [r0, #8]
   1e96c:	7561      	strb	r1, [r4, #21]
    out_buffer->is_water_on = in_buffer->is_watering_active;
   1e96e:	7a41      	ldrb	r1, [r0, #9]
   1e970:	7521      	strb	r1, [r4, #20]
    out_buffer->is_light_on = in_buffer->are_lights_active;
   1e972:	7a81      	ldrb	r1, [r0, #10]
   1e974:	74e1      	strb	r1, [r4, #19]
    out_buffer->row_id = in_buffer->row_id;
   1e976:	7b01      	ldrb	r1, [r0, #12]

    // Timestamp is in unix time
    out_buffer->timestamp = timestamp_val;

    // Calculate crc of the message
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_coap_row_mean_data_t) - sizeof(out_buffer->message_crc));
   1e978:	4620      	mov	r0, r4
    out_buffer->row_id = in_buffer->row_id;
   1e97a:	72a1      	strb	r1, [r4, #10]
    out_buffer->timestamp = timestamp_val;
   1e97c:	f8c4 200b 	str.w	r2, [r4, #11]
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_coap_row_mean_data_t) - sizeof(out_buffer->message_crc));
   1e980:	2116      	movs	r1, #22
    out_buffer->timestamp = timestamp_val;
   1e982:	f8c4 300f 	str.w	r3, [r4, #15]
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_coap_row_mean_data_t) - sizeof(out_buffer->message_crc));
   1e986:	f7ff ffc6 	bl	1e916 <crc16_ansi>
   1e98a:	82e0      	strh	r0, [r4, #22]
}
   1e98c:	bd10      	pop	{r4, pc}

0001e98e <crc16_ansi>:
	return crc16(src, len, 0x8005, 0xffff, true);
   1e98e:	2301      	movs	r3, #1
{
   1e990:	b507      	push	{r0, r1, r2, lr}
	return crc16(src, len, 0x8005, 0xffff, true);
   1e992:	f248 0205 	movw	r2, #32773	; 0x8005
   1e996:	9300      	str	r3, [sp, #0]
   1e998:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e99c:	f000 f87a 	bl	1ea94 <crc16>
}
   1e9a0:	b003      	add	sp, #12
   1e9a2:	f85d fb04 	ldr.w	pc, [sp], #4

0001e9a6 <coap_client_send_dev_info_exit>:
    reset_measurements_inventory();
   1e9a6:	f7f2 bfdf 	b.w	11968 <reset_measurements_inventory>

0001e9aa <coap_client_send_dev_info_entry>:
{
   1e9aa:	b510      	push	{r4, lr}
   1e9ac:	4604      	mov	r4, r0
    user_ctx->measurements_data_inventory = get_measurements_data_inventory();
   1e9ae:	f7f2 ffd7 	bl	11960 <get_measurements_data_inventory>
   1e9b2:	6160      	str	r0, [r4, #20]
}
   1e9b4:	bd10      	pop	{r4, pc}

0001e9b6 <coap_client_send_meas_exit>:
    reset_row_mean_data_inventory();
   1e9b6:	f7f2 bfe7 	b.w	11988 <reset_row_mean_data_inventory>

0001e9ba <coap_client_send_meas_entry>:
{
   1e9ba:	b510      	push	{r4, lr}
   1e9bc:	4604      	mov	r4, r0
    user_ctx->row_mean_data_inventory = get_row_mean_data_inventory();
   1e9be:	f7f2 ffcb 	bl	11958 <get_row_mean_data_inventory>
   1e9c2:	6120      	str	r0, [r4, #16]
}
   1e9c4:	bd10      	pop	{r4, pc}

0001e9c6 <coap_observe_loop>:
 *        TODO: Probably write this function in a cleaner way
 *              The observe tokens should be inited in this function maybe?
 *
 */
static void coap_observe_loop(void)
{
   1e9c6:	b570      	push	{r4, r5, r6, lr}
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1e9c8:	2600      	movs	r6, #0
   1e9ca:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
	return z_impl_k_sleep(timeout);
   1e9ce:	2100      	movs	r1, #0
   1e9d0:	f640 40cd 	movw	r0, #3277	; 0xccd
   1e9d4:	f7fe fbdc 	bl	1d190 <z_impl_k_sleep>
        // This loop will run with period of 20ms until something is received from nbiot
        // after a packet is received wait for next nbiot event because of lte_reception_evt
        k_sleep(K_MSEC(100));
        // --- TODO: *********** Move this part to coap_client on a function
        // Bytes received
        received = recv(coap_get_socket(), receive_buffer, sizeof(receive_buffer), MSG_DONTWAIT);
   1e9d8:	f7f3 f80c 	bl	119f4 <coap_get_socket>
   1e9dc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   1e9e0:	2340      	movs	r3, #64	; 0x40
   1e9e2:	e9cd 6600 	strd	r6, r6, [sp]
   1e9e6:	a90a      	add	r1, sp, #40	; 0x28
   1e9e8:	f001 fa09 	bl	1fdfe <z_impl_zsock_recvfrom>
        {
            // // LOG_INF("Socket error, exit...");
            continue;
        }

        if (received == 0)
   1e9ec:	1e02      	subs	r2, r0, #0
   1e9ee:	ddee      	ble.n	1e9ce <coap_observe_loop+0x8>
            // LOG_INF("Empty datagram");
            continue;
        }

        // --- parse get response
        err = coap_packet_parse(&reply, receive_buffer, received, NULL, 0);
   1e9f0:	2300      	movs	r3, #0
   1e9f2:	9600      	str	r6, [sp, #0]
   1e9f4:	b292      	uxth	r2, r2
   1e9f6:	a90a      	add	r1, sp, #40	; 0x28
   1e9f8:	a806      	add	r0, sp, #24
   1e9fa:	f001 f8ba 	bl	1fb72 <coap_packet_parse>
        if (err < 0)
   1e9fe:	2800      	cmp	r0, #0
   1ea00:	dbe5      	blt.n	1e9ce <coap_observe_loop+0x8>
            continue;
        }

        // payload will contain the packet payload, and payload_len will know the
        // length of the payload
        payload = coap_packet_get_payload(&reply, &payload_len);
   1ea02:	f10d 010e 	add.w	r1, sp, #14
   1ea06:	a806      	add	r0, sp, #24
   1ea08:	f001 f91a 	bl	1fc40 <coap_packet_get_payload>
        if (payload == NULL)
   1ea0c:	4604      	mov	r4, r0
   1ea0e:	2800      	cmp	r0, #0
   1ea10:	d0dd      	beq.n	1e9ce <coap_observe_loop+0x8>
        {
            // LOG_INF("Null coap payload received");
            continue;
        }
        token_len = coap_header_get_token(&reply, token);
   1ea12:	a904      	add	r1, sp, #16
   1ea14:	a806      	add	r0, sp, #24
   1ea16:	f001 f901 	bl	1fc1c <coap_header_get_token>

        // get_obs_token() will return a pointer to a variable that is uint16_t
        if ((token_len != sizeof(uint16_t)) ||
   1ea1a:	2802      	cmp	r0, #2
        token_len = coap_header_get_token(&reply, token);
   1ea1c:	4605      	mov	r5, r0
        if ((token_len != sizeof(uint16_t)) ||
   1ea1e:	d1d6      	bne.n	1e9ce <coap_observe_loop+0x8>
            (memcmp(get_obs_token(), token, sizeof(uint16_t)) != 0))
   1ea20:	f7f3 f8e8 	bl	11bf4 <get_obs_token>
   1ea24:	462a      	mov	r2, r5
   1ea26:	a904      	add	r1, sp, #16
   1ea28:	f003 fe9a 	bl	22760 <memcmp>
        if ((token_len != sizeof(uint16_t)) ||
   1ea2c:	2800      	cmp	r0, #0
   1ea2e:	d1ce      	bne.n	1e9ce <coap_observe_loop+0x8>
        else
        {
            // LOG_INF("Valid token received");

            // Parse the message, TODO: use the returned error code
            process_coap_rx_message(payload);
   1ea30:	4620      	mov	r0, r4
   1ea32:	f000 f801 	bl	1ea38 <process_coap_rx_message>
   1ea36:	e7ca      	b.n	1e9ce <coap_observe_loop+0x8>

0001ea38 <process_coap_rx_message>:
 *
 * @param rx_buf
 * @return uint8_t
 */
uint8_t process_coap_rx_message(const uint8_t *rx_buf)
{
   1ea38:	b508      	push	{r3, lr}
    message_coap_row_control_user_data_t *p_msg_coap_control_user_data;
    message_coap_row_thresholds_user_data_t *p_msg_coap_thresholds_user_data;
    uint8_t ret = GENERIC_ERROR;
    if (rx_buf != NULL)
   1ea3a:	4603      	mov	r3, r0
   1ea3c:	b120      	cbz	r0, 1ea48 <process_coap_rx_message+0x10>
    {
        switch (rx_buf[MSG_TYPE_POSITION])
   1ea3e:	7802      	ldrb	r2, [r0, #0]
   1ea40:	2ab2      	cmp	r2, #178	; 0xb2
   1ea42:	d003      	beq.n	1ea4c <process_coap_rx_message+0x14>
   1ea44:	2ab3      	cmp	r2, #179	; 0xb3
   1ea46:	d001      	beq.n	1ea4c <process_coap_rx_message+0x14>
    uint8_t ret = GENERIC_ERROR;
   1ea48:	20ff      	movs	r0, #255	; 0xff
   1ea4a:	e003      	b.n	1ea54 <process_coap_rx_message+0x1c>
        // TODO: calculate the crc of the buffer
        case MESSAGE_COAP_ROW_THRESHOLDS_USER_DATA:
            p_msg_coap_thresholds_user_data = (message_coap_row_thresholds_user_data_t *)rx_buf;
            // TODO: here, validate the crc
            // Messages received from coap server should be forwarded to 52840
            internal_uart_send_data(rx_buf, p_msg_coap_thresholds_user_data->len);
   1ea4c:	7859      	ldrb	r1, [r3, #1]
   1ea4e:	f7f2 fea9 	bl	117a4 <internal_uart_send_data>
            ret = SUCCESS;
   1ea52:	2000      	movs	r0, #0
            break;
        }
    }

    return ret;
   1ea54:	bd08      	pop	{r3, pc}

0001ea56 <gpio_pin_set>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1ea56:	2301      	movs	r3, #1
   1ea58:	fa03 f101 	lsl.w	r1, r3, r1
   1ea5c:	6903      	ldr	r3, [r0, #16]
   1ea5e:	681b      	ldr	r3, [r3, #0]
   1ea60:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1ea62:	bf18      	it	ne
   1ea64:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1ea68:	b112      	cbz	r2, 1ea70 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1ea6a:	6883      	ldr	r3, [r0, #8]
   1ea6c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1ea6e:	4718      	bx	r3
   1ea70:	6883      	ldr	r3, [r0, #8]
   1ea72:	691b      	ldr	r3, [r3, #16]
   1ea74:	e7fb      	b.n	1ea6e <gpio_pin_set+0x18>

0001ea76 <gpio_pin_configure.constprop.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   1ea76:	b430      	push	{r4, r5}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ea78:	2301      	movs	r3, #1
	struct gpio_driver_data *data =
   1ea7a:	6904      	ldr	r4, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ea7c:	fa03 f201 	lsl.w	r2, r3, r1
   1ea80:	6823      	ldr	r3, [r4, #0]
	const struct gpio_driver_api *api =
   1ea82:	6885      	ldr	r5, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ea84:	ea23 0302 	bic.w	r3, r3, r2
   1ea88:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   1ea8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ea8e:	682b      	ldr	r3, [r5, #0]
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   1ea90:	bc30      	pop	{r4, r5}
   1ea92:	4718      	bx	r3

0001ea94 <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
   1ea94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
   1ea98:	f89d 4018 	ldrb.w	r4, [sp, #24]
   1ea9c:	4605      	mov	r5, r0
   1ea9e:	2c00      	cmp	r4, #0
   1eaa0:	bf14      	ite	ne
   1eaa2:	2402      	movne	r4, #2
   1eaa4:	2400      	moveq	r4, #0
	uint16_t crc = initial_value;
   1eaa6:	4618      	mov	r0, r3

			crc = (crc << 1U);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
   1eaa8:	f04f 0c80 	mov.w	ip, #128	; 0x80
	for (i = 0; i < len + padding; i++) {
   1eaac:	2300      	movs	r3, #0
   1eaae:	1867      	adds	r7, r4, r1
   1eab0:	429f      	cmp	r7, r3
   1eab2:	d81a      	bhi.n	1eaea <crc16+0x56>
			}
		}
	}

	return crc;
}
   1eab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eab8:	4620      	mov	r0, r4
			crc = (crc << 1U);
   1eaba:	0044      	lsls	r4, r0, #1
			if (i < len) {
   1eabc:	428b      	cmp	r3, r1
			crc = (crc << 1U);
   1eabe:	b2a4      	uxth	r4, r4
			if (i < len) {
   1eac0:	d208      	bcs.n	1ead4 <crc16+0x40>
				crc |= !!(src[i] & (0x80U >> b));
   1eac2:	f895 8000 	ldrb.w	r8, [r5]
   1eac6:	fa2c fe06 	lsr.w	lr, ip, r6
   1eaca:	ea18 0f0e 	tst.w	r8, lr
   1eace:	bf18      	it	ne
   1ead0:	f044 0401 	orrne.w	r4, r4, #1
			if (divide != 0U) {
   1ead4:	0400      	lsls	r0, r0, #16
		for (b = 0; b < 8; b++) {
   1ead6:	f106 0601 	add.w	r6, r6, #1
				crc = crc ^ polynomial;
   1eada:	bf48      	it	mi
   1eadc:	4054      	eormi	r4, r2
		for (b = 0; b < 8; b++) {
   1eade:	2e08      	cmp	r6, #8
   1eae0:	d1ea      	bne.n	1eab8 <crc16+0x24>
	for (i = 0; i < len + padding; i++) {
   1eae2:	4620      	mov	r0, r4
   1eae4:	3301      	adds	r3, #1
   1eae6:	3501      	adds	r5, #1
   1eae8:	e7e2      	b.n	1eab0 <crc16+0x1c>
		for (b = 0; b < 8; b++) {
   1eaea:	2600      	movs	r6, #0
   1eaec:	e7e5      	b.n	1eaba <crc16+0x26>

0001eaee <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   1eaee:	b40c      	push	{r2, r3}
   1eaf0:	4603      	mov	r3, r0
   1eaf2:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   1eaf4:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   1eaf6:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   1eaf8:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   1eafa:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   1eafe:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1eb00:	4798      	blx	r3
	va_end(args);

	return res;
}
   1eb02:	b003      	add	sp, #12
   1eb04:	f85d eb04 	ldr.w	lr, [sp], #4
   1eb08:	b002      	add	sp, #8
   1eb0a:	4770      	bx	lr

0001eb0c <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1eb0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1eb10:	b2db      	uxtb	r3, r3
   1eb12:	2b09      	cmp	r3, #9
   1eb14:	d802      	bhi.n	1eb1c <char2hex+0x10>
		*x = c - '0';
   1eb16:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1eb18:	2000      	movs	r0, #0
   1eb1a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1eb1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1eb20:	2b05      	cmp	r3, #5
   1eb22:	d802      	bhi.n	1eb2a <char2hex+0x1e>
		*x = c - 'a' + 10;
   1eb24:	3857      	subs	r0, #87	; 0x57
   1eb26:	7008      	strb	r0, [r1, #0]
   1eb28:	e7f6      	b.n	1eb18 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1eb2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1eb2e:	2b05      	cmp	r3, #5
   1eb30:	d801      	bhi.n	1eb36 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1eb32:	3837      	subs	r0, #55	; 0x37
   1eb34:	e7f7      	b.n	1eb26 <char2hex+0x1a>
		return -EINVAL;
   1eb36:	f06f 0015 	mvn.w	r0, #21
}
   1eb3a:	4770      	bx	lr

0001eb3c <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1eb3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1eb3e:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1eb40:	f001 0001 	and.w	r0, r1, #1
   1eb44:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1eb48:	429d      	cmp	r5, r3
   1eb4a:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1eb4e:	d903      	bls.n	1eb58 <hex2bin+0x1c>
		return 0;
   1eb50:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1eb52:	4628      	mov	r0, r5
   1eb54:	b003      	add	sp, #12
   1eb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1eb58:	b158      	cbz	r0, 1eb72 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1eb5a:	7820      	ldrb	r0, [r4, #0]
   1eb5c:	f10d 0107 	add.w	r1, sp, #7
   1eb60:	f7ff ffd4 	bl	1eb0c <char2hex>
   1eb64:	2800      	cmp	r0, #0
   1eb66:	dbf3      	blt.n	1eb50 <hex2bin+0x14>
		buf[0] = dec;
   1eb68:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1eb6c:	3401      	adds	r4, #1
		buf[0] = dec;
   1eb6e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1eb72:	3401      	adds	r4, #1
   1eb74:	4416      	add	r6, r2
   1eb76:	42b2      	cmp	r2, r6
   1eb78:	d0eb      	beq.n	1eb52 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1eb7a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1eb7e:	f10d 0107 	add.w	r1, sp, #7
   1eb82:	f7ff ffc3 	bl	1eb0c <char2hex>
   1eb86:	2800      	cmp	r0, #0
   1eb88:	dbe2      	blt.n	1eb50 <hex2bin+0x14>
		buf[i] = dec << 4;
   1eb8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1eb8e:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   1eb92:	011b      	lsls	r3, r3, #4
   1eb94:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1eb96:	f814 0b02 	ldrb.w	r0, [r4], #2
   1eb9a:	f7ff ffb7 	bl	1eb0c <char2hex>
   1eb9e:	2800      	cmp	r0, #0
   1eba0:	dbd6      	blt.n	1eb50 <hex2bin+0x14>
		buf[i] += dec;
   1eba2:	7813      	ldrb	r3, [r2, #0]
   1eba4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1eba8:	440b      	add	r3, r1
   1ebaa:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1ebae:	e7e2      	b.n	1eb76 <hex2bin+0x3a>

0001ebb0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1ebb0:	4603      	mov	r3, r0
   1ebb2:	b140      	cbz	r0, 1ebc6 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1ebb4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1ebb6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1ebba:	2a02      	cmp	r2, #2
   1ebbc:	d006      	beq.n	1ebcc <sys_notify_validate+0x1c>
   1ebbe:	2a03      	cmp	r2, #3
   1ebc0:	d004      	beq.n	1ebcc <sys_notify_validate+0x1c>
   1ebc2:	2a01      	cmp	r2, #1
   1ebc4:	d005      	beq.n	1ebd2 <sys_notify_validate+0x22>
		return -EINVAL;
   1ebc6:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1ebca:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1ebcc:	681a      	ldr	r2, [r3, #0]
   1ebce:	2a00      	cmp	r2, #0
   1ebd0:	d0f9      	beq.n	1ebc6 <sys_notify_validate+0x16>
		notify->result = 0;
   1ebd2:	2000      	movs	r0, #0
   1ebd4:	6098      	str	r0, [r3, #8]
   1ebd6:	4770      	bx	lr

0001ebd8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1ebd8:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1ebda:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   1ebdc:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1ebe0:	2a02      	cmp	r2, #2
{
   1ebe2:	4603      	mov	r3, r0
	notify->result = res;
   1ebe4:	6081      	str	r1, [r0, #8]
	switch (method) {
   1ebe6:	d00a      	beq.n	1ebfe <sys_notify_finalize+0x26>
   1ebe8:	2a03      	cmp	r2, #3
   1ebea:	d10b      	bne.n	1ec04 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1ebec:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1ebee:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1ebf0:	2200      	movs	r2, #0
   1ebf2:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1ebf4:	b108      	cbz	r0, 1ebfa <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1ebf6:	f7fe fdd7 	bl	1d7a8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1ebfa:	4620      	mov	r0, r4
   1ebfc:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = NULL;
   1ebfe:	2400      	movs	r4, #0
		sig = notify->method.signal;
   1ec00:	6800      	ldr	r0, [r0, #0]
		break;
   1ec02:	e7f5      	b.n	1ebf0 <sys_notify_finalize+0x18>
	switch (method) {
   1ec04:	2400      	movs	r4, #0
   1ec06:	4620      	mov	r0, r4
   1ec08:	e7f2      	b.n	1ebf0 <sys_notify_finalize+0x18>

0001ec0a <arch_printk_char_out>:
}
   1ec0a:	2000      	movs	r0, #0
   1ec0c:	4770      	bx	lr

0001ec0e <str_out>:
{
   1ec0e:	b530      	push	{r4, r5, lr}
   1ec10:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1ec12:	680c      	ldr	r4, [r1, #0]
   1ec14:	1c55      	adds	r5, r2, #1
   1ec16:	b114      	cbz	r4, 1ec1e <str_out+0x10>
   1ec18:	684b      	ldr	r3, [r1, #4]
   1ec1a:	4293      	cmp	r3, r2
   1ec1c:	dc01      	bgt.n	1ec22 <str_out+0x14>
		ctx->count++;
   1ec1e:	608d      	str	r5, [r1, #8]
}
   1ec20:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1ec22:	3b01      	subs	r3, #1
   1ec24:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1ec26:	bf08      	it	eq
   1ec28:	2200      	moveq	r2, #0
   1ec2a:	608d      	str	r5, [r1, #8]
   1ec2c:	bf0c      	ite	eq
   1ec2e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1ec30:	54a0      	strbne	r0, [r4, r2]
   1ec32:	e7f5      	b.n	1ec20 <str_out+0x12>

0001ec34 <printk>:
{
   1ec34:	b40f      	push	{r0, r1, r2, r3}
   1ec36:	b507      	push	{r0, r1, r2, lr}
   1ec38:	a904      	add	r1, sp, #16
   1ec3a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1ec3e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1ec40:	f7f3 fa46 	bl	120d0 <vprintk>
}
   1ec44:	b003      	add	sp, #12
   1ec46:	f85d eb04 	ldr.w	lr, [sp], #4
   1ec4a:	b004      	add	sp, #16
   1ec4c:	4770      	bx	lr

0001ec4e <snprintk>:
{
   1ec4e:	b40c      	push	{r2, r3}
   1ec50:	b507      	push	{r0, r1, r2, lr}
   1ec52:	ab04      	add	r3, sp, #16
   1ec54:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1ec58:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1ec5a:	f7f3 fa47 	bl	120ec <vsnprintk>
}
   1ec5e:	b003      	add	sp, #12
   1ec60:	f85d eb04 	ldr.w	lr, [sp], #4
   1ec64:	b002      	add	sp, #8
   1ec66:	4770      	bx	lr

0001ec68 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ec68:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1ec6a:	f013 0307 	ands.w	r3, r3, #7
   1ec6e:	d105      	bne.n	1ec7c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1ec70:	6803      	ldr	r3, [r0, #0]
   1ec72:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1ec74:	bf0c      	ite	eq
   1ec76:	2000      	moveq	r0, #0
   1ec78:	2003      	movne	r0, #3
   1ec7a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1ec7c:	2b02      	cmp	r3, #2
   1ec7e:	d105      	bne.n	1ec8c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1ec80:	8b43      	ldrh	r3, [r0, #26]
   1ec82:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1ec84:	bf14      	ite	ne
   1ec86:	2000      	movne	r0, #0
   1ec88:	2004      	moveq	r0, #4
   1ec8a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1ec8c:	2b01      	cmp	r3, #1
   1ec8e:	d105      	bne.n	1ec9c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1ec90:	6803      	ldr	r3, [r0, #0]
   1ec92:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1ec94:	bf0c      	ite	eq
   1ec96:	2000      	moveq	r0, #0
   1ec98:	2005      	movne	r0, #5
   1ec9a:	4770      	bx	lr
	int evt = EVT_NOP;
   1ec9c:	2000      	movs	r0, #0
}
   1ec9e:	4770      	bx	lr

0001eca0 <notify_one>:
{
   1eca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eca4:	460d      	mov	r5, r1
   1eca6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1eca8:	4619      	mov	r1, r3
   1ecaa:	1d28      	adds	r0, r5, #4
{
   1ecac:	4690      	mov	r8, r2
   1ecae:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ecb0:	f7ff ff92 	bl	1ebd8 <sys_notify_finalize>
	if (cb) {
   1ecb4:	4604      	mov	r4, r0
   1ecb6:	b138      	cbz	r0, 1ecc8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1ecb8:	4633      	mov	r3, r6
   1ecba:	4642      	mov	r2, r8
   1ecbc:	4629      	mov	r1, r5
   1ecbe:	4638      	mov	r0, r7
   1ecc0:	46a4      	mov	ip, r4
}
   1ecc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ecc6:	4760      	bx	ip
}
   1ecc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eccc <transition_complete>:
{
   1eccc:	b410      	push	{r4}
	__asm__ volatile(
   1ecce:	f04f 0420 	mov.w	r4, #32
   1ecd2:	f3ef 8211 	mrs	r2, BASEPRI
   1ecd6:	f384 8812 	msr	BASEPRI_MAX, r4
   1ecda:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1ecde:	6141      	str	r1, [r0, #20]
}
   1ece0:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1ece2:	2101      	movs	r1, #1
   1ece4:	f7f3 ba16 	b.w	12114 <process_event>

0001ece8 <validate_args>:
{
   1ece8:	b510      	push	{r4, lr}
   1ecea:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ecec:	b140      	cbz	r0, 1ed00 <validate_args+0x18>
   1ecee:	b139      	cbz	r1, 1ed00 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ecf0:	1d08      	adds	r0, r1, #4
   1ecf2:	f7ff ff5d 	bl	1ebb0 <sys_notify_validate>
	if ((rv == 0)
   1ecf6:	b928      	cbnz	r0, 1ed04 <validate_args+0x1c>
	    && ((cli->notify.flags
   1ecf8:	68a3      	ldr	r3, [r4, #8]
   1ecfa:	f033 0303 	bics.w	r3, r3, #3
   1ecfe:	d001      	beq.n	1ed04 <validate_args+0x1c>
		rv = -EINVAL;
   1ed00:	f06f 0015 	mvn.w	r0, #21
}
   1ed04:	bd10      	pop	{r4, pc}

0001ed06 <onoff_manager_init>:
{
   1ed06:	b538      	push	{r3, r4, r5, lr}
   1ed08:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ed0a:	4605      	mov	r5, r0
   1ed0c:	b158      	cbz	r0, 1ed26 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ed0e:	b151      	cbz	r1, 1ed26 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ed10:	680b      	ldr	r3, [r1, #0]
   1ed12:	b143      	cbz	r3, 1ed26 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1ed14:	684b      	ldr	r3, [r1, #4]
   1ed16:	b133      	cbz	r3, 1ed26 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ed18:	221c      	movs	r2, #28
   1ed1a:	2100      	movs	r1, #0
   1ed1c:	f003 fd3b 	bl	22796 <memset>
	return 0;
   1ed20:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ed22:	612c      	str	r4, [r5, #16]
}
   1ed24:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ed26:	f06f 0015 	mvn.w	r0, #21
   1ed2a:	e7fb      	b.n	1ed24 <onoff_manager_init+0x1e>

0001ed2c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1ed2c:	b570      	push	{r4, r5, r6, lr}
   1ed2e:	4604      	mov	r4, r0
   1ed30:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1ed32:	f7ff ffd9 	bl	1ece8 <validate_args>

	if (rv < 0) {
   1ed36:	1e05      	subs	r5, r0, #0
   1ed38:	db31      	blt.n	1ed9e <onoff_request+0x72>
   1ed3a:	f04f 0320 	mov.w	r3, #32
   1ed3e:	f3ef 8111 	mrs	r1, BASEPRI
   1ed42:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed46:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ed4a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1ed4e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ed50:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ed52:	42ab      	cmp	r3, r5
   1ed54:	f000 0207 	and.w	r2, r0, #7
   1ed58:	d02e      	beq.n	1edb8 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1ed5a:	2a02      	cmp	r2, #2
   1ed5c:	d10e      	bne.n	1ed7c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1ed5e:	3301      	adds	r3, #1
   1ed60:	8363      	strh	r3, [r4, #26]
	rv = state;
   1ed62:	4615      	mov	r5, r2
		notify = true;
   1ed64:	2301      	movs	r3, #1
	__asm__ volatile(
   1ed66:	f381 8811 	msr	BASEPRI, r1
   1ed6a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1ed6e:	b1b3      	cbz	r3, 1ed9e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1ed70:	2300      	movs	r3, #0
   1ed72:	4631      	mov	r1, r6
   1ed74:	4620      	mov	r0, r4
   1ed76:	f7ff ff93 	bl	1eca0 <notify_one>
   1ed7a:	e010      	b.n	1ed9e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1ed7c:	0783      	lsls	r3, r0, #30
   1ed7e:	d001      	beq.n	1ed84 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1ed80:	2a06      	cmp	r2, #6
   1ed82:	d10e      	bne.n	1eda2 <onoff_request+0x76>
	parent->next = child;
   1ed84:	2300      	movs	r3, #0
   1ed86:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1ed88:	6863      	ldr	r3, [r4, #4]
   1ed8a:	b993      	cbnz	r3, 1edb2 <onoff_request+0x86>
	list->head = node;
   1ed8c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1ed90:	4615      	mov	r5, r2
   1ed92:	b962      	cbnz	r2, 1edae <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1ed94:	460a      	mov	r2, r1
   1ed96:	4620      	mov	r0, r4
   1ed98:	2102      	movs	r1, #2
   1ed9a:	f7f3 f9bb 	bl	12114 <process_event>
		}
	}

	return rv;
}
   1ed9e:	4628      	mov	r0, r5
   1eda0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1eda2:	2a05      	cmp	r2, #5
   1eda4:	bf0c      	ite	eq
   1eda6:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1edaa:	f06f 0504 	mvnne.w	r5, #4
   1edae:	2300      	movs	r3, #0
   1edb0:	e7d9      	b.n	1ed66 <onoff_request+0x3a>
	parent->next = child;
   1edb2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1edb4:	6066      	str	r6, [r4, #4]
}
   1edb6:	e7eb      	b.n	1ed90 <onoff_request+0x64>
		rv = -EAGAIN;
   1edb8:	f06f 050a 	mvn.w	r5, #10
   1edbc:	e7f7      	b.n	1edae <onoff_request+0x82>

0001edbe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1edbe:	4604      	mov	r4, r0
   1edc0:	b508      	push	{r3, lr}
   1edc2:	4608      	mov	r0, r1
   1edc4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1edc6:	461a      	mov	r2, r3
   1edc8:	47a0      	blx	r4
	return z_impl_z_current_get();
   1edca:	f7fe f9fb 	bl	1d1c4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1edce:	f7f5 fb0d 	bl	143ec <z_impl_k_thread_abort>

0001edd2 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1edd2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1edd6:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1edd8:	0840      	lsrs	r0, r0, #1
   1edda:	4770      	bx	lr

0001eddc <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1eddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1edde:	4603      	mov	r3, r0
   1ede0:	460c      	mov	r4, r1
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ede2:	f7ff fff6 	bl	1edd2 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1ede6:	fab0 f080 	clz	r0, r0
   1edea:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1edee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1edf2:	f8dc 6010 	ldr.w	r6, [ip, #16]
   1edf6:	00ca      	lsls	r2, r1, #3
   1edf8:	1d17      	adds	r7, r2, #4
   1edfa:	b28d      	uxth	r5, r1
   1edfc:	3206      	adds	r2, #6
   1edfe:	b956      	cbnz	r6, 1ee16 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1ee00:	2101      	movs	r1, #1
   1ee02:	fa01 f000 	lsl.w	r0, r1, r0
   1ee06:	68d9      	ldr	r1, [r3, #12]
   1ee08:	4301      	orrs	r1, r0
   1ee0a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1ee0c:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1ee10:	53dd      	strh	r5, [r3, r7]
   1ee12:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1ee14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1ee16:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1ee18:	3104      	adds	r1, #4
   1ee1a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1ee1c:	53d8      	strh	r0, [r3, r7]
   1ee1e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1ee22:	529e      	strh	r6, [r3, r2]
   1ee24:	80c5      	strh	r5, [r0, #6]
   1ee26:	525d      	strh	r5, [r3, r1]
   1ee28:	e7f4      	b.n	1ee14 <free_list_add+0x38>

0001ee2a <free_list_remove_bidx>:
{
   1ee2a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1ee2c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1ee30:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1ee32:	4299      	cmp	r1, r3
   1ee34:	f102 0104 	add.w	r1, r2, #4
   1ee38:	d10a      	bne.n	1ee50 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1ee3a:	2301      	movs	r3, #1
   1ee3c:	fa03 f202 	lsl.w	r2, r3, r2
   1ee40:	68c3      	ldr	r3, [r0, #12]
   1ee42:	ea23 0302 	bic.w	r3, r3, r2
   1ee46:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1ee48:	2300      	movs	r3, #0
   1ee4a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1ee4e:	bd10      	pop	{r4, pc}
   1ee50:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1ee52:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1ee56:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1ee5a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1ee5e:	80cb      	strh	r3, [r1, #6]
   1ee60:	8082      	strh	r2, [r0, #4]
}
   1ee62:	e7f4      	b.n	1ee4e <free_list_remove_bidx+0x24>

0001ee64 <free_list_remove>:
{
   1ee64:	b510      	push	{r4, lr}
   1ee66:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ee68:	f7ff ffb3 	bl	1edd2 <chunk_size>
}
   1ee6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return 31 - __builtin_clz(usable_sz);
   1ee70:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1ee74:	4618      	mov	r0, r3
   1ee76:	f1c2 021f 	rsb	r2, r2, #31
   1ee7a:	f7ff bfd6 	b.w	1ee2a <free_list_remove_bidx>

0001ee7e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1ee7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ee82:	fab1 f581 	clz	r5, r1
   1ee86:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1ee8a:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   1ee8e:	693a      	ldr	r2, [r7, #16]
{
   1ee90:	4603      	mov	r3, r0
   1ee92:	460e      	mov	r6, r1
	if (b->next) {
   1ee94:	b1ca      	cbz	r2, 1eeca <alloc_chunk+0x4c>
   1ee96:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1ee9a:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1ee9c:	4618      	mov	r0, r3
   1ee9e:	4621      	mov	r1, r4
   1eea0:	f7ff ff97 	bl	1edd2 <chunk_size>
   1eea4:	42b0      	cmp	r0, r6
   1eea6:	d307      	bcc.n	1eeb8 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1eea8:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1eeaa:	4621      	mov	r1, r4
   1eeac:	4618      	mov	r0, r3
   1eeae:	f7ff ffbc 	bl	1ee2a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1eeb2:	4620      	mov	r0, r4
   1eeb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1eeb8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1eebc:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   1eebe:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   1eec2:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   1eec4:	d001      	beq.n	1eeca <alloc_chunk+0x4c>
   1eec6:	428a      	cmp	r2, r1
   1eec8:	d1e7      	bne.n	1ee9a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1eeca:	f04f 34ff 	mov.w	r4, #4294967295
   1eece:	68d9      	ldr	r1, [r3, #12]
   1eed0:	f1c5 0520 	rsb	r5, r5, #32
   1eed4:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   1eed6:	400c      	ands	r4, r1
   1eed8:	d0eb      	beq.n	1eeb2 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1eeda:	fa94 f2a4 	rbit	r2, r4
   1eede:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1eee2:	1d11      	adds	r1, r2, #4
   1eee4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   1eee8:	e7df      	b.n	1eeaa <alloc_chunk+0x2c>

0001eeea <merge_chunks>:
{
   1eeea:	b538      	push	{r3, r4, r5, lr}
   1eeec:	4603      	mov	r3, r0
   1eeee:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1eef0:	f7ff ff6f 	bl	1edd2 <chunk_size>
   1eef4:	4611      	mov	r1, r2
   1eef6:	4604      	mov	r4, r0
   1eef8:	4618      	mov	r0, r3
   1eefa:	f7ff ff6a 	bl	1edd2 <chunk_size>
   1eefe:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   1ef00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ef04:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   1ef06:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   1ef08:	4618      	mov	r0, r3
   1ef0a:	4611      	mov	r1, r2
   1ef0c:	f7ff ff61 	bl	1edd2 <chunk_size>
	void *cmem = &buf[c];
   1ef10:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1ef12:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   1ef16:	bd38      	pop	{r3, r4, r5, pc}

0001ef18 <split_chunks>:
{
   1ef18:	b538      	push	{r3, r4, r5, lr}
   1ef1a:	4603      	mov	r3, r0
   1ef1c:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1ef1e:	f7ff ff58 	bl	1edd2 <chunk_size>
	chunksz_t lsz = rc - lc;
   1ef22:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1ef24:	1aa5      	subs	r5, r4, r2
   1ef26:	4405      	add	r5, r0
   1ef28:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ef2c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1ef2e:	8060      	strh	r0, [r4, #2]
   1ef30:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ef34:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1ef36:	8044      	strh	r4, [r0, #2]
   1ef38:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1ef3c:	4618      	mov	r0, r3
   1ef3e:	4611      	mov	r1, r2
   1ef40:	f7ff ff47 	bl	1edd2 <chunk_size>
	void *cmem = &buf[c];
   1ef44:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1ef46:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   1ef4a:	bd38      	pop	{r3, r4, r5, pc}

0001ef4c <free_chunk>:
{
   1ef4c:	b538      	push	{r3, r4, r5, lr}
   1ef4e:	4605      	mov	r5, r0
   1ef50:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   1ef52:	f7ff ff3e 	bl	1edd2 <chunk_size>
   1ef56:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1ef58:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ef5c:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1ef5e:	07da      	lsls	r2, r3, #31
   1ef60:	d40a      	bmi.n	1ef78 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1ef62:	4628      	mov	r0, r5
   1ef64:	f7ff ff7e 	bl	1ee64 <free_list_remove>
	return c + chunk_size(h, c);
   1ef68:	4621      	mov	r1, r4
   1ef6a:	4628      	mov	r0, r5
   1ef6c:	f7ff ff31 	bl	1edd2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1ef70:	1822      	adds	r2, r4, r0
   1ef72:	4628      	mov	r0, r5
   1ef74:	f7ff ffb9 	bl	1eeea <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1ef78:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1ef7c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1ef7e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ef82:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1ef84:	07db      	lsls	r3, r3, #31
   1ef86:	d40c      	bmi.n	1efa2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1ef88:	4628      	mov	r0, r5
   1ef8a:	f7ff ff6b 	bl	1ee64 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1ef8e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1ef92:	4622      	mov	r2, r4
   1ef94:	1a61      	subs	r1, r4, r1
   1ef96:	4628      	mov	r0, r5
   1ef98:	f7ff ffa7 	bl	1eeea <merge_chunks>
   1ef9c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1efa0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1efa2:	4621      	mov	r1, r4
   1efa4:	4628      	mov	r0, r5
}
   1efa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1efaa:	f7ff bf17 	b.w	1eddc <free_list_add>

0001efae <sys_heap_free>:
	if (mem == NULL) {
   1efae:	b161      	cbz	r1, 1efca <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
   1efb0:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1efb2:	3904      	subs	r1, #4
   1efb4:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1efb6:	f021 0307 	bic.w	r3, r1, #7
   1efba:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1efbc:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   1efbe:	08c9      	lsrs	r1, r1, #3
   1efc0:	f022 0201 	bic.w	r2, r2, #1
   1efc4:	805a      	strh	r2, [r3, #2]
   1efc6:	f7ff bfc1 	b.w	1ef4c <free_chunk>
}
   1efca:	4770      	bx	lr

0001efcc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1efcc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1efce:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1efd0:	b909      	cbnz	r1, 1efd6 <sys_heap_alloc+0xa>
		return NULL;
   1efd2:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
   1efd4:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1efd6:	68ab      	ldr	r3, [r5, #8]
   1efd8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1efdc:	d9f9      	bls.n	1efd2 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1efde:	310b      	adds	r1, #11
   1efe0:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1efe2:	4621      	mov	r1, r4
   1efe4:	4628      	mov	r0, r5
   1efe6:	f7ff ff4a 	bl	1ee7e <alloc_chunk>
	if (c == 0U) {
   1efea:	4606      	mov	r6, r0
   1efec:	2800      	cmp	r0, #0
   1efee:	d0f0      	beq.n	1efd2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1eff0:	4601      	mov	r1, r0
   1eff2:	4628      	mov	r0, r5
   1eff4:	f7ff feed 	bl	1edd2 <chunk_size>
   1eff8:	42a0      	cmp	r0, r4
   1effa:	d908      	bls.n	1f00e <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   1effc:	4434      	add	r4, r6
   1effe:	4628      	mov	r0, r5
   1f000:	4622      	mov	r2, r4
   1f002:	f7ff ff89 	bl	1ef18 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1f006:	4621      	mov	r1, r4
   1f008:	4628      	mov	r0, r5
   1f00a:	f7ff fee7 	bl	1eddc <free_list_add>
	void *cmem = &buf[c];
   1f00e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1f012:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f014:	8853      	ldrh	r3, [r2, #2]
   1f016:	3004      	adds	r0, #4
   1f018:	f043 0301 	orr.w	r3, r3, #1
   1f01c:	8053      	strh	r3, [r2, #2]
	return chunk_mem(h, c);
   1f01e:	e7d9      	b.n	1efd4 <sys_heap_alloc+0x8>

0001f020 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1f020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f024:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1f026:	424a      	negs	r2, r1
   1f028:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1f02c:	ea31 0202 	bics.w	r2, r1, r2
{
   1f030:	4603      	mov	r3, r0
	if (align != rew) {
   1f032:	d00a      	beq.n	1f04a <sys_heap_aligned_alloc+0x2a>
		return false;
   1f034:	2f04      	cmp	r7, #4
   1f036:	463a      	mov	r2, r7
   1f038:	bf28      	it	cs
   1f03a:	2204      	movcs	r2, #4
   1f03c:	46b9      	mov	r9, r7
		align -= rew;
   1f03e:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1f040:	b974      	cbnz	r4, 1f060 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1f042:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   1f044:	4628      	mov	r0, r5
   1f046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1f04a:	2904      	cmp	r1, #4
   1f04c:	d804      	bhi.n	1f058 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1f04e:	4621      	mov	r1, r4
}
   1f050:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1f054:	f7ff bfba 	b.w	1efcc <sys_heap_alloc>
		rew = 0;
   1f058:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1f05c:	2204      	movs	r2, #4
   1f05e:	e7ef      	b.n	1f040 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1f060:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1f062:	68b3      	ldr	r3, [r6, #8]
   1f064:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1f068:	d9eb      	bls.n	1f042 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f06a:	f104 010b 	add.w	r1, r4, #11
   1f06e:	4439      	add	r1, r7
   1f070:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1f072:	4630      	mov	r0, r6
   1f074:	08c9      	lsrs	r1, r1, #3
   1f076:	f7ff ff02 	bl	1ee7e <alloc_chunk>
	if (c0 == 0) {
   1f07a:	4680      	mov	r8, r0
   1f07c:	2800      	cmp	r0, #0
   1f07e:	d0e0      	beq.n	1f042 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1f080:	f109 0504 	add.w	r5, r9, #4
   1f084:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1f088:	1e7b      	subs	r3, r7, #1
   1f08a:	4435      	add	r5, r6
   1f08c:	441d      	add	r5, r3
   1f08e:	427f      	negs	r7, r7
   1f090:	403d      	ands	r5, r7
   1f092:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f096:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f098:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f09a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f09c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f09e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1f0a2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1f0a4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f0a8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1f0ac:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1f0b0:	d208      	bcs.n	1f0c4 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1f0b2:	4601      	mov	r1, r0
   1f0b4:	463a      	mov	r2, r7
   1f0b6:	4630      	mov	r0, r6
   1f0b8:	f7ff ff2e 	bl	1ef18 <split_chunks>
		free_list_add(h, c0);
   1f0bc:	4641      	mov	r1, r8
   1f0be:	4630      	mov	r0, r6
   1f0c0:	f7ff fe8c 	bl	1eddc <free_list_add>
	return c + chunk_size(h, c);
   1f0c4:	4639      	mov	r1, r7
   1f0c6:	4630      	mov	r0, r6
   1f0c8:	f7ff fe83 	bl	1edd2 <chunk_size>
   1f0cc:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1f0ce:	4284      	cmp	r4, r0
   1f0d0:	d207      	bcs.n	1f0e2 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1f0d2:	4630      	mov	r0, r6
   1f0d4:	4622      	mov	r2, r4
   1f0d6:	f7ff ff1f 	bl	1ef18 <split_chunks>
		free_list_add(h, c_end);
   1f0da:	4621      	mov	r1, r4
   1f0dc:	4630      	mov	r0, r6
   1f0de:	f7ff fe7d 	bl	1eddc <free_list_add>
	void *cmem = &buf[c];
   1f0e2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f0e6:	8873      	ldrh	r3, [r6, #2]
   1f0e8:	f043 0301 	orr.w	r3, r3, #1
   1f0ec:	8073      	strh	r3, [r6, #2]
   1f0ee:	e7a9      	b.n	1f044 <sys_heap_aligned_alloc+0x24>

0001f0f0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1f0f0:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1f0f2:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1f0f4:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1f0f6:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1f0fa:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1f0fe:	1ad2      	subs	r2, r2, r3
{
   1f100:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1f102:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1f104:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1f106:	fab4 f084 	clz	r0, r4
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1f10a:	2500      	movs	r5, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1f10c:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   1f110:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f112:	1dc1      	adds	r1, r0, #7
	h->end_chunk = heap_sz;
   1f114:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   1f116:	60dd      	str	r5, [r3, #12]
   1f118:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1f11a:	f103 0610 	add.w	r6, r3, #16
   1f11e:	4418      	add	r0, r3
   1f120:	4286      	cmp	r6, r0
   1f122:	d118      	bne.n	1f156 <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f124:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f126:	f040 0001 	orr.w	r0, r0, #1
   1f12a:	8058      	strh	r0, [r3, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1f12c:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f12e:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1f130:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
   1f134:	801d      	strh	r5, [r3, #0]
   1f136:	8077      	strh	r7, [r6, #2]
   1f138:	189e      	adds	r6, r3, r2
   1f13a:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1f13e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
   1f142:	8075      	strh	r5, [r6, #2]
   1f144:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f146:	8862      	ldrh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1f148:	4618      	mov	r0, r3
   1f14a:	f042 0201 	orr.w	r2, r2, #1
   1f14e:	8062      	strh	r2, [r4, #2]
}
   1f150:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1f152:	f7ff be43 	b.w	1eddc <free_list_add>
		h->buckets[i].next = 0;
   1f156:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
   1f15a:	e7e1      	b.n	1f120 <sys_heap_init+0x30>

0001f15c <outs>:
{
   1f15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f160:	4607      	mov	r7, r0
   1f162:	4688      	mov	r8, r1
   1f164:	4615      	mov	r5, r2
   1f166:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1f168:	4614      	mov	r4, r2
   1f16a:	42b4      	cmp	r4, r6
   1f16c:	eba4 0005 	sub.w	r0, r4, r5
   1f170:	d302      	bcc.n	1f178 <outs+0x1c>
   1f172:	b93e      	cbnz	r6, 1f184 <outs+0x28>
   1f174:	7823      	ldrb	r3, [r4, #0]
   1f176:	b12b      	cbz	r3, 1f184 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1f178:	4641      	mov	r1, r8
   1f17a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1f17e:	47b8      	blx	r7
		if (rc < 0) {
   1f180:	2800      	cmp	r0, #0
   1f182:	daf2      	bge.n	1f16a <outs+0xe>
}
   1f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f188 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1f188:	4770      	bx	lr

0001f18a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1f18a:	b084      	sub	sp, #16
   1f18c:	ab04      	add	r3, sp, #16
   1f18e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1f192:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f196:	2b06      	cmp	r3, #6
   1f198:	d108      	bne.n	1f1ac <pm_power_state_set+0x22>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1f19a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1f19e:	2201      	movs	r2, #1
   1f1a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1f1a4:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1f1a8:	bf20      	wfe
    while (true)
   1f1aa:	e7fd      	b.n	1f1a8 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1f1ac:	b004      	add	sp, #16
   1f1ae:	4770      	bx	lr

0001f1b0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1f1b0:	b084      	sub	sp, #16
   1f1b2:	ab04      	add	r3, sp, #16
   1f1b4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1f1b8:	2300      	movs	r3, #0
   1f1ba:	f383 8811 	msr	BASEPRI, r3
   1f1be:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1f1c2:	b004      	add	sp, #16
   1f1c4:	4770      	bx	lr

0001f1c6 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1f1c6:	2300      	movs	r3, #0
	list->head = NULL;
   1f1c8:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f1cc:	4770      	bx	lr

0001f1ce <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1f1ce:	6803      	ldr	r3, [r0, #0]
   1f1d0:	b923      	cbnz	r3, 1f1dc <log_list_add_tail+0xe>
		list->head = msg;
   1f1d2:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1f1d4:	2300      	movs	r3, #0
	list->tail = msg;
   1f1d6:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1f1d8:	600b      	str	r3, [r1, #0]
}
   1f1da:	4770      	bx	lr
		list->tail->next = msg;
   1f1dc:	6843      	ldr	r3, [r0, #4]
   1f1de:	6019      	str	r1, [r3, #0]
   1f1e0:	e7f8      	b.n	1f1d4 <log_list_add_tail+0x6>

0001f1e2 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1f1e2:	6800      	ldr	r0, [r0, #0]
   1f1e4:	4770      	bx	lr

0001f1e6 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1f1e6:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1f1e8:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1f1ea:	b108      	cbz	r0, 1f1f0 <log_list_head_get+0xa>
		list->head = list->head->next;
   1f1ec:	6802      	ldr	r2, [r0, #0]
   1f1ee:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1f1f0:	4770      	bx	lr

0001f1f2 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1f1f2:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1f1f4:	f7f3 fff2 	bl	131dc <log_msg_chunk_alloc>

	if (msg != NULL) {
   1f1f8:	b118      	cbz	r0, 1f202 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1f1fa:	2301      	movs	r3, #1
   1f1fc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1f1fe:	2300      	movs	r3, #0
   1f200:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1f202:	bd08      	pop	{r3, pc}

0001f204 <default_get_timestamp>:
   1f204:	f001 b9cb 	b.w	2059e <sys_clock_cycle_get_32>

0001f208 <dummy_timestamp>:
   1f208:	2000      	movs	r0, #0
   1f20a:	4770      	bx	lr

0001f20c <log_0>:
{
   1f20c:	b538      	push	{r3, r4, r5, lr}
   1f20e:	4605      	mov	r5, r0
   1f210:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1f212:	f7ff ffee 	bl	1f1f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f216:	b128      	cbz	r0, 1f224 <log_0+0x18>
		msg_finalize(msg, src_level);
   1f218:	4621      	mov	r1, r4
		msg->str = str;
   1f21a:	6105      	str	r5, [r0, #16]
}
   1f21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1f220:	f7f3 bee4 	b.w	12fec <msg_finalize>
}
   1f224:	bd38      	pop	{r3, r4, r5, pc}

0001f226 <log_1>:
{
   1f226:	b570      	push	{r4, r5, r6, lr}
   1f228:	4606      	mov	r6, r0
   1f22a:	460d      	mov	r5, r1
   1f22c:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f22e:	f7ff ffe0 	bl	1f1f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f232:	b158      	cbz	r0, 1f24c <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1f234:	2101      	movs	r1, #1
   1f236:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1f238:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1f23a:	f361 1207 	bfi	r2, r1, #4, #4
   1f23e:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   1f240:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   1f242:	6145      	str	r5, [r0, #20]
}
   1f244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1f248:	f7f3 bed0 	b.w	12fec <msg_finalize>
}
   1f24c:	bd70      	pop	{r4, r5, r6, pc}

0001f24e <log_2>:
{
   1f24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f252:	4680      	mov	r8, r0
   1f254:	460f      	mov	r7, r1
   1f256:	4616      	mov	r6, r2
   1f258:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f25a:	f7ff ffca 	bl	1f1f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f25e:	b168      	cbz	r0, 1f27c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1f260:	2202      	movs	r2, #2
   1f262:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1f264:	4629      	mov	r1, r5
   1f266:	f362 1307 	bfi	r3, r2, #4, #4
   1f26a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1f26c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   1f270:	f8c0 8010 	str.w	r8, [r0, #16]
}
   1f274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1f278:	f7f3 beb8 	b.w	12fec <msg_finalize>
}
   1f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f280 <log_3>:
{
   1f280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f284:	4680      	mov	r8, r0
   1f286:	460f      	mov	r7, r1
   1f288:	4616      	mov	r6, r2
   1f28a:	461d      	mov	r5, r3
   1f28c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f290:	f7ff ffaf 	bl	1f1f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f294:	b170      	cbz	r0, 1f2b4 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1f296:	2203      	movs	r2, #3
   1f298:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1f29a:	4649      	mov	r1, r9
   1f29c:	f362 1307 	bfi	r3, r2, #4, #4
   1f2a0:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1f2a2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   1f2a6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   1f2aa:	61c5      	str	r5, [r0, #28]
}
   1f2ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1f2b0:	f7f3 be9c 	b.w	12fec <msg_finalize>
}
   1f2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f2b8 <z_log_get_tag>:
}
   1f2b8:	2000      	movs	r0, #0
   1f2ba:	4770      	bx	lr

0001f2bc <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1f2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f2c0:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1f2c2:	8903      	ldrh	r3, [r0, #8]
{
   1f2c4:	460e      	mov	r6, r1
   1f2c6:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1f2c8:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1f2cc:	42a2      	cmp	r2, r4
{
   1f2ce:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1f2d2:	d803      	bhi.n	1f2dc <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1f2d4:	2300      	movs	r3, #0
   1f2d6:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1f2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1f2dc:	680b      	ldr	r3, [r1, #0]
   1f2de:	4423      	add	r3, r4
   1f2e0:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1f2e2:	bf84      	itt	hi
   1f2e4:	1b13      	subhi	r3, r2, r4
   1f2e6:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f2e8:	2a0c      	cmp	r2, #12
	req_len = *length;
   1f2ea:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f2ee:	d92a      	bls.n	1f346 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1f2f0:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1f2f2:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1f2f6:	d82d      	bhi.n	1f354 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f2f8:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   1f2fa:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1f2fc:	454a      	cmp	r2, r9
   1f2fe:	bf28      	it	cs
   1f300:	464a      	movcs	r2, r9
   1f302:	4420      	add	r0, r4
   1f304:	4615      	mov	r5, r2
		if (put_op) {
   1f306:	b317      	cbz	r7, 1f34e <log_msg_hexdump_data_op+0x92>
   1f308:	4631      	mov	r1, r6
   1f30a:	f003 fa37 	bl	2277c <memcpy>
		req_len -= cpy_len;
   1f30e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1f312:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1f314:	f1b9 0f00 	cmp.w	r9, #0
   1f318:	d0de      	beq.n	1f2d8 <log_msg_hexdump_data_op+0x1c>
   1f31a:	f1b8 0f00 	cmp.w	r8, #0
   1f31e:	d0db      	beq.n	1f2d8 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1f320:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1f324:	454d      	cmp	r5, r9
   1f326:	bf28      	it	cs
   1f328:	464d      	movcs	r5, r9
		if (put_op) {
   1f32a:	1d20      	adds	r0, r4, #4
   1f32c:	462a      	mov	r2, r5
   1f32e:	4440      	add	r0, r8
   1f330:	b1bf      	cbz	r7, 1f362 <log_msg_hexdump_data_op+0xa6>
   1f332:	4631      	mov	r1, r6
   1f334:	f003 fa22 	bl	2277c <memcpy>
		offset = 0;
   1f338:	2400      	movs	r4, #0
		cont = cont->next;
   1f33a:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   1f33e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1f342:	442e      	add	r6, r5
   1f344:	e7e6      	b.n	1f314 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   1f346:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   1f34a:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   1f34c:	e7d6      	b.n	1f2fc <log_msg_hexdump_data_op+0x40>
   1f34e:	4601      	mov	r1, r0
   1f350:	4630      	mov	r0, r6
   1f352:	e7da      	b.n	1f30a <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1f354:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1f356:	2c1b      	cmp	r4, #27
   1f358:	d9dc      	bls.n	1f314 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1f35a:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1f35e:	3c1c      	subs	r4, #28
   1f360:	e7f9      	b.n	1f356 <log_msg_hexdump_data_op+0x9a>
   1f362:	4601      	mov	r1, r0
   1f364:	4630      	mov	r0, r6
   1f366:	e7e5      	b.n	1f334 <log_msg_hexdump_data_op+0x78>

0001f368 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f368:	3004      	adds	r0, #4
   1f36a:	e8d0 3fef 	ldaex	r3, [r0]
   1f36e:	3301      	adds	r3, #1
   1f370:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1f374:	2a00      	cmp	r2, #0
   1f376:	d1f8      	bne.n	1f36a <log_msg_get+0x2>
}
   1f378:	4770      	bx	lr

0001f37a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1f37a:	7a40      	ldrb	r0, [r0, #9]
}
   1f37c:	0900      	lsrs	r0, r0, #4
   1f37e:	4770      	bx	lr

0001f380 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1f380:	7a43      	ldrb	r3, [r0, #9]
   1f382:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1f386:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1f38a:	d216      	bcs.n	1f3ba <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f38c:	2a03      	cmp	r2, #3
   1f38e:	d803      	bhi.n	1f398 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1f390:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1f394:	6948      	ldr	r0, [r1, #20]
   1f396:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1f398:	2901      	cmp	r1, #1
   1f39a:	d803      	bhi.n	1f3a4 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1f39c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1f3a0:	6988      	ldr	r0, [r1, #24]
   1f3a2:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1f3a4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f3a6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1f3a8:	2906      	cmp	r1, #6
   1f3aa:	d803      	bhi.n	1f3b4 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1f3ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1f3b0:	6848      	ldr	r0, [r1, #4]
   1f3b2:	4770      	bx	lr
		cont = cont->next;
   1f3b4:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1f3b6:	3907      	subs	r1, #7
		cont = cont->next;
   1f3b8:	e7f6      	b.n	1f3a8 <log_msg_arg_get+0x28>
		return 0;
   1f3ba:	2000      	movs	r0, #0
}
   1f3bc:	4770      	bx	lr

0001f3be <log_msg_put>:
{
   1f3be:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1f3c0:	1d02      	adds	r2, r0, #4
   1f3c2:	e8d2 1fef 	ldaex	r1, [r2]
   1f3c6:	3901      	subs	r1, #1
   1f3c8:	e8c2 1fec 	stlex	ip, r1, [r2]
   1f3cc:	f1bc 0f00 	cmp.w	ip, #0
   1f3d0:	d1f7      	bne.n	1f3c2 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1f3d2:	685b      	ldr	r3, [r3, #4]
   1f3d4:	b90b      	cbnz	r3, 1f3da <log_msg_put+0x1c>
		msg_free(msg);
   1f3d6:	f7f3 bf15 	b.w	13204 <msg_free>
}
   1f3da:	4770      	bx	lr

0001f3dc <log_msg_str_get>:
}
   1f3dc:	6900      	ldr	r0, [r0, #16]
   1f3de:	4770      	bx	lr

0001f3e0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1f3e0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1f3e2:	2400      	movs	r4, #0
   1f3e4:	9400      	str	r4, [sp, #0]
   1f3e6:	f7ff ff69 	bl	1f2bc <log_msg_hexdump_data_op>
}
   1f3ea:	b002      	add	sp, #8
   1f3ec:	bd10      	pop	{r4, pc}

0001f3ee <buffer_write>:
{
   1f3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3f0:	4606      	mov	r6, r0
   1f3f2:	460d      	mov	r5, r1
   1f3f4:	4614      	mov	r4, r2
   1f3f6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1f3f8:	4621      	mov	r1, r4
   1f3fa:	4628      	mov	r0, r5
   1f3fc:	463a      	mov	r2, r7
   1f3fe:	47b0      	blx	r6
	} while (len != 0);
   1f400:	1a24      	subs	r4, r4, r0
		buf += processed;
   1f402:	4405      	add	r5, r0
	} while (len != 0);
   1f404:	d1f8      	bne.n	1f3f8 <buffer_write+0xa>
}
   1f406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f408 <std_print>:
{
   1f408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f40c:	b08e      	sub	sp, #56	; 0x38
   1f40e:	af0e      	add	r7, sp, #56	; 0x38
   1f410:	4680      	mov	r8, r0
   1f412:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1f414:	f7ff ffe2 	bl	1f3dc <log_msg_str_get>
   1f418:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1f41a:	4640      	mov	r0, r8
   1f41c:	f7ff ffad 	bl	1f37a <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1f420:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   1f424:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1f426:	0083      	lsls	r3, r0, #2
   1f428:	3307      	adds	r3, #7
   1f42a:	f023 0307 	bic.w	r3, r3, #7
   1f42e:	ebad 0d03 	sub.w	sp, sp, r3
   1f432:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1f434:	45d1      	cmp	r9, sl
   1f436:	d116      	bne.n	1f466 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1f438:	4640      	mov	r0, r8
   1f43a:	f7ff ff9e 	bl	1f37a <log_msg_nargs_get>
   1f43e:	280f      	cmp	r0, #15
   1f440:	d81e      	bhi.n	1f480 <std_print+0x78>
   1f442:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f446:	0019      	.short	0x0019
   1f448:	00260020 	.word	0x00260020
   1f44c:	0036002d 	.word	0x0036002d
   1f450:	004e0041 	.word	0x004e0041
   1f454:	006e005d 	.word	0x006e005d
   1f458:	00960081 	.word	0x00960081
   1f45c:	00c600ad 	.word	0x00c600ad
   1f460:	00fe00e1 	.word	0x00fe00e1
   1f464:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1f466:	4649      	mov	r1, r9
   1f468:	4640      	mov	r0, r8
   1f46a:	f7ff ff89 	bl	1f380 <log_msg_arg_get>
   1f46e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1f472:	f109 0901 	add.w	r9, r9, #1
   1f476:	e7dd      	b.n	1f434 <std_print+0x2c>
		print_formatted(output, str);
   1f478:	4631      	mov	r1, r6
   1f47a:	4628      	mov	r0, r5
   1f47c:	f7f3 ff00 	bl	13280 <print_formatted>
}
   1f480:	46bd      	mov	sp, r7
   1f482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1f486:	4631      	mov	r1, r6
   1f488:	4628      	mov	r0, r5
   1f48a:	6822      	ldr	r2, [r4, #0]
   1f48c:	f7f3 fef8 	bl	13280 <print_formatted>
		break;
   1f490:	e7f6      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1f492:	4631      	mov	r1, r6
   1f494:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f498:	4628      	mov	r0, r5
   1f49a:	f7f3 fef1 	bl	13280 <print_formatted>
		break;
   1f49e:	e7ef      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1f4a0:	68a3      	ldr	r3, [r4, #8]
   1f4a2:	4631      	mov	r1, r6
   1f4a4:	9300      	str	r3, [sp, #0]
   1f4a6:	4628      	mov	r0, r5
   1f4a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4ac:	f7f3 fee8 	bl	13280 <print_formatted>
		break;
   1f4b0:	e7e6      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f4b2:	68e3      	ldr	r3, [r4, #12]
   1f4b4:	4631      	mov	r1, r6
   1f4b6:	9301      	str	r3, [sp, #4]
   1f4b8:	68a3      	ldr	r3, [r4, #8]
   1f4ba:	4628      	mov	r0, r5
   1f4bc:	9300      	str	r3, [sp, #0]
   1f4be:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4c2:	f7f3 fedd 	bl	13280 <print_formatted>
		break;
   1f4c6:	e7db      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f4c8:	6923      	ldr	r3, [r4, #16]
   1f4ca:	4631      	mov	r1, r6
   1f4cc:	9302      	str	r3, [sp, #8]
   1f4ce:	68e3      	ldr	r3, [r4, #12]
   1f4d0:	4628      	mov	r0, r5
   1f4d2:	9301      	str	r3, [sp, #4]
   1f4d4:	68a3      	ldr	r3, [r4, #8]
   1f4d6:	9300      	str	r3, [sp, #0]
   1f4d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4dc:	f7f3 fed0 	bl	13280 <print_formatted>
		break;
   1f4e0:	e7ce      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f4e2:	6963      	ldr	r3, [r4, #20]
   1f4e4:	4631      	mov	r1, r6
   1f4e6:	9303      	str	r3, [sp, #12]
   1f4e8:	6923      	ldr	r3, [r4, #16]
   1f4ea:	4628      	mov	r0, r5
   1f4ec:	9302      	str	r3, [sp, #8]
   1f4ee:	68e3      	ldr	r3, [r4, #12]
   1f4f0:	9301      	str	r3, [sp, #4]
   1f4f2:	68a3      	ldr	r3, [r4, #8]
   1f4f4:	9300      	str	r3, [sp, #0]
   1f4f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4fa:	f7f3 fec1 	bl	13280 <print_formatted>
		break;
   1f4fe:	e7bf      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f500:	69a3      	ldr	r3, [r4, #24]
   1f502:	4631      	mov	r1, r6
   1f504:	9304      	str	r3, [sp, #16]
   1f506:	6963      	ldr	r3, [r4, #20]
   1f508:	4628      	mov	r0, r5
   1f50a:	9303      	str	r3, [sp, #12]
   1f50c:	6923      	ldr	r3, [r4, #16]
   1f50e:	9302      	str	r3, [sp, #8]
   1f510:	68e3      	ldr	r3, [r4, #12]
   1f512:	9301      	str	r3, [sp, #4]
   1f514:	68a3      	ldr	r3, [r4, #8]
   1f516:	9300      	str	r3, [sp, #0]
   1f518:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f51c:	f7f3 feb0 	bl	13280 <print_formatted>
		break;
   1f520:	e7ae      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f522:	69e3      	ldr	r3, [r4, #28]
   1f524:	4631      	mov	r1, r6
   1f526:	9305      	str	r3, [sp, #20]
   1f528:	69a3      	ldr	r3, [r4, #24]
   1f52a:	4628      	mov	r0, r5
   1f52c:	9304      	str	r3, [sp, #16]
   1f52e:	6963      	ldr	r3, [r4, #20]
   1f530:	9303      	str	r3, [sp, #12]
   1f532:	6923      	ldr	r3, [r4, #16]
   1f534:	9302      	str	r3, [sp, #8]
   1f536:	68e3      	ldr	r3, [r4, #12]
   1f538:	9301      	str	r3, [sp, #4]
   1f53a:	68a3      	ldr	r3, [r4, #8]
   1f53c:	9300      	str	r3, [sp, #0]
   1f53e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f542:	f7f3 fe9d 	bl	13280 <print_formatted>
		break;
   1f546:	e79b      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f548:	6a23      	ldr	r3, [r4, #32]
   1f54a:	4631      	mov	r1, r6
   1f54c:	9306      	str	r3, [sp, #24]
   1f54e:	69e3      	ldr	r3, [r4, #28]
   1f550:	4628      	mov	r0, r5
   1f552:	9305      	str	r3, [sp, #20]
   1f554:	69a3      	ldr	r3, [r4, #24]
   1f556:	9304      	str	r3, [sp, #16]
   1f558:	6963      	ldr	r3, [r4, #20]
   1f55a:	9303      	str	r3, [sp, #12]
   1f55c:	6923      	ldr	r3, [r4, #16]
   1f55e:	9302      	str	r3, [sp, #8]
   1f560:	68e3      	ldr	r3, [r4, #12]
   1f562:	9301      	str	r3, [sp, #4]
   1f564:	68a3      	ldr	r3, [r4, #8]
   1f566:	9300      	str	r3, [sp, #0]
   1f568:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f56c:	f7f3 fe88 	bl	13280 <print_formatted>
		break;
   1f570:	e786      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f572:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f574:	4631      	mov	r1, r6
   1f576:	9307      	str	r3, [sp, #28]
   1f578:	6a23      	ldr	r3, [r4, #32]
   1f57a:	4628      	mov	r0, r5
   1f57c:	9306      	str	r3, [sp, #24]
   1f57e:	69e3      	ldr	r3, [r4, #28]
   1f580:	9305      	str	r3, [sp, #20]
   1f582:	69a3      	ldr	r3, [r4, #24]
   1f584:	9304      	str	r3, [sp, #16]
   1f586:	6963      	ldr	r3, [r4, #20]
   1f588:	9303      	str	r3, [sp, #12]
   1f58a:	6923      	ldr	r3, [r4, #16]
   1f58c:	9302      	str	r3, [sp, #8]
   1f58e:	68e3      	ldr	r3, [r4, #12]
   1f590:	9301      	str	r3, [sp, #4]
   1f592:	68a3      	ldr	r3, [r4, #8]
   1f594:	9300      	str	r3, [sp, #0]
   1f596:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f59a:	f7f3 fe71 	bl	13280 <print_formatted>
		break;
   1f59e:	e76f      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f5a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f5a2:	4631      	mov	r1, r6
   1f5a4:	9308      	str	r3, [sp, #32]
   1f5a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f5a8:	4628      	mov	r0, r5
   1f5aa:	9307      	str	r3, [sp, #28]
   1f5ac:	6a23      	ldr	r3, [r4, #32]
   1f5ae:	9306      	str	r3, [sp, #24]
   1f5b0:	69e3      	ldr	r3, [r4, #28]
   1f5b2:	9305      	str	r3, [sp, #20]
   1f5b4:	69a3      	ldr	r3, [r4, #24]
   1f5b6:	9304      	str	r3, [sp, #16]
   1f5b8:	6963      	ldr	r3, [r4, #20]
   1f5ba:	9303      	str	r3, [sp, #12]
   1f5bc:	6923      	ldr	r3, [r4, #16]
   1f5be:	9302      	str	r3, [sp, #8]
   1f5c0:	68e3      	ldr	r3, [r4, #12]
   1f5c2:	9301      	str	r3, [sp, #4]
   1f5c4:	68a3      	ldr	r3, [r4, #8]
   1f5c6:	9300      	str	r3, [sp, #0]
   1f5c8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f5cc:	f7f3 fe58 	bl	13280 <print_formatted>
		break;
   1f5d0:	e756      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f5d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f5d4:	4631      	mov	r1, r6
   1f5d6:	9309      	str	r3, [sp, #36]	; 0x24
   1f5d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f5da:	4628      	mov	r0, r5
   1f5dc:	9308      	str	r3, [sp, #32]
   1f5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f5e0:	9307      	str	r3, [sp, #28]
   1f5e2:	6a23      	ldr	r3, [r4, #32]
   1f5e4:	9306      	str	r3, [sp, #24]
   1f5e6:	69e3      	ldr	r3, [r4, #28]
   1f5e8:	9305      	str	r3, [sp, #20]
   1f5ea:	69a3      	ldr	r3, [r4, #24]
   1f5ec:	9304      	str	r3, [sp, #16]
   1f5ee:	6963      	ldr	r3, [r4, #20]
   1f5f0:	9303      	str	r3, [sp, #12]
   1f5f2:	6923      	ldr	r3, [r4, #16]
   1f5f4:	9302      	str	r3, [sp, #8]
   1f5f6:	68e3      	ldr	r3, [r4, #12]
   1f5f8:	9301      	str	r3, [sp, #4]
   1f5fa:	68a3      	ldr	r3, [r4, #8]
   1f5fc:	9300      	str	r3, [sp, #0]
   1f5fe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f602:	f7f3 fe3d 	bl	13280 <print_formatted>
		break;
   1f606:	e73b      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f608:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f60a:	4631      	mov	r1, r6
   1f60c:	930a      	str	r3, [sp, #40]	; 0x28
   1f60e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f610:	4628      	mov	r0, r5
   1f612:	9309      	str	r3, [sp, #36]	; 0x24
   1f614:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f616:	9308      	str	r3, [sp, #32]
   1f618:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f61a:	9307      	str	r3, [sp, #28]
   1f61c:	6a23      	ldr	r3, [r4, #32]
   1f61e:	9306      	str	r3, [sp, #24]
   1f620:	69e3      	ldr	r3, [r4, #28]
   1f622:	9305      	str	r3, [sp, #20]
   1f624:	69a3      	ldr	r3, [r4, #24]
   1f626:	9304      	str	r3, [sp, #16]
   1f628:	6963      	ldr	r3, [r4, #20]
   1f62a:	9303      	str	r3, [sp, #12]
   1f62c:	6923      	ldr	r3, [r4, #16]
   1f62e:	9302      	str	r3, [sp, #8]
   1f630:	68e3      	ldr	r3, [r4, #12]
   1f632:	9301      	str	r3, [sp, #4]
   1f634:	68a3      	ldr	r3, [r4, #8]
   1f636:	9300      	str	r3, [sp, #0]
   1f638:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f63c:	f7f3 fe20 	bl	13280 <print_formatted>
		break;
   1f640:	e71e      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f642:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f644:	4631      	mov	r1, r6
   1f646:	930b      	str	r3, [sp, #44]	; 0x2c
   1f648:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f64a:	4628      	mov	r0, r5
   1f64c:	930a      	str	r3, [sp, #40]	; 0x28
   1f64e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f650:	9309      	str	r3, [sp, #36]	; 0x24
   1f652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f654:	9308      	str	r3, [sp, #32]
   1f656:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f658:	9307      	str	r3, [sp, #28]
   1f65a:	6a23      	ldr	r3, [r4, #32]
   1f65c:	9306      	str	r3, [sp, #24]
   1f65e:	69e3      	ldr	r3, [r4, #28]
   1f660:	9305      	str	r3, [sp, #20]
   1f662:	69a3      	ldr	r3, [r4, #24]
   1f664:	9304      	str	r3, [sp, #16]
   1f666:	6963      	ldr	r3, [r4, #20]
   1f668:	9303      	str	r3, [sp, #12]
   1f66a:	6923      	ldr	r3, [r4, #16]
   1f66c:	9302      	str	r3, [sp, #8]
   1f66e:	68e3      	ldr	r3, [r4, #12]
   1f670:	9301      	str	r3, [sp, #4]
   1f672:	68a3      	ldr	r3, [r4, #8]
   1f674:	9300      	str	r3, [sp, #0]
   1f676:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f67a:	f7f3 fe01 	bl	13280 <print_formatted>
		break;
   1f67e:	e6ff      	b.n	1f480 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f682:	4631      	mov	r1, r6
   1f684:	930c      	str	r3, [sp, #48]	; 0x30
   1f686:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f688:	4628      	mov	r0, r5
   1f68a:	930b      	str	r3, [sp, #44]	; 0x2c
   1f68c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f68e:	930a      	str	r3, [sp, #40]	; 0x28
   1f690:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f692:	9309      	str	r3, [sp, #36]	; 0x24
   1f694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f696:	9308      	str	r3, [sp, #32]
   1f698:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f69a:	9307      	str	r3, [sp, #28]
   1f69c:	6a23      	ldr	r3, [r4, #32]
   1f69e:	9306      	str	r3, [sp, #24]
   1f6a0:	69e3      	ldr	r3, [r4, #28]
   1f6a2:	9305      	str	r3, [sp, #20]
   1f6a4:	69a3      	ldr	r3, [r4, #24]
   1f6a6:	9304      	str	r3, [sp, #16]
   1f6a8:	6963      	ldr	r3, [r4, #20]
   1f6aa:	9303      	str	r3, [sp, #12]
   1f6ac:	6923      	ldr	r3, [r4, #16]
   1f6ae:	9302      	str	r3, [sp, #8]
   1f6b0:	68e3      	ldr	r3, [r4, #12]
   1f6b2:	9301      	str	r3, [sp, #4]
   1f6b4:	68a3      	ldr	r3, [r4, #8]
   1f6b6:	9300      	str	r3, [sp, #0]
   1f6b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f6bc:	f7f3 fde0 	bl	13280 <print_formatted>
}
   1f6c0:	e6de      	b.n	1f480 <std_print+0x78>

0001f6c2 <log_output_flush>:
		     output->control_block->offset,
   1f6c2:	6842      	ldr	r2, [r0, #4]
{
   1f6c4:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   1f6c6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1f6ca:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1f6cc:	6881      	ldr	r1, [r0, #8]
   1f6ce:	6800      	ldr	r0, [r0, #0]
   1f6d0:	f7ff fe8d 	bl	1f3ee <buffer_write>
	output->control_block->offset = 0;
   1f6d4:	2200      	movs	r2, #0
   1f6d6:	6863      	ldr	r3, [r4, #4]
   1f6d8:	601a      	str	r2, [r3, #0]
}
   1f6da:	bd10      	pop	{r4, pc}

0001f6dc <out_func>:
{
   1f6dc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f6de:	684b      	ldr	r3, [r1, #4]
{
   1f6e0:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f6e2:	681a      	ldr	r2, [r3, #0]
   1f6e4:	68cb      	ldr	r3, [r1, #12]
{
   1f6e6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f6e8:	429a      	cmp	r2, r3
   1f6ea:	d102      	bne.n	1f6f2 <out_func+0x16>
		log_output_flush(out_ctx);
   1f6ec:	4608      	mov	r0, r1
   1f6ee:	f7ff ffe8 	bl	1f6c2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f6f2:	6863      	ldr	r3, [r4, #4]
   1f6f4:	e8d3 2fef 	ldaex	r2, [r3]
   1f6f8:	1c51      	adds	r1, r2, #1
   1f6fa:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1f6fe:	2800      	cmp	r0, #0
   1f700:	d1f8      	bne.n	1f6f4 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1f702:	68a3      	ldr	r3, [r4, #8]
}
   1f704:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1f706:	549d      	strb	r5, [r3, r2]
}
   1f708:	bd38      	pop	{r3, r4, r5, pc}

0001f70a <append_u8>:
{
   1f70a:	b510      	push	{r4, lr}
	if (!cpkt) {
   1f70c:	b158      	cbz	r0, 1f726 <append_u8+0x1c>
	if (cpkt->max_len - cpkt->offset < 1) {
   1f70e:	8883      	ldrh	r3, [r0, #4]
   1f710:	88c2      	ldrh	r2, [r0, #6]
   1f712:	1ad2      	subs	r2, r2, r3
   1f714:	2a00      	cmp	r2, #0
	cpkt->data[cpkt->offset++] = data;
   1f716:	bfc3      	ittte	gt
   1f718:	1c5c      	addgt	r4, r3, #1
   1f71a:	6802      	ldrgt	r2, [r0, #0]
   1f71c:	8084      	strhgt	r4, [r0, #4]
		return false;
   1f71e:	2000      	movle	r0, #0
	return true;
   1f720:	bfc4      	itt	gt
   1f722:	2001      	movgt	r0, #1
	cpkt->data[cpkt->offset++] = data;
   1f724:	54d1      	strbgt	r1, [r2, r3]
}
   1f726:	bd10      	pop	{r4, pc}

0001f728 <append_be16>:
{
   1f728:	b510      	push	{r4, lr}
	if (!cpkt) {
   1f72a:	b178      	cbz	r0, 1f74c <append_be16+0x24>
	if (cpkt->max_len - cpkt->offset < 2) {
   1f72c:	8883      	ldrh	r3, [r0, #4]
   1f72e:	88c2      	ldrh	r2, [r0, #6]
   1f730:	1ad2      	subs	r2, r2, r3
   1f732:	2a01      	cmp	r2, #1
   1f734:	dd0b      	ble.n	1f74e <append_be16+0x26>
	cpkt->data[cpkt->offset++] = data >> 8;
   1f736:	6802      	ldr	r2, [r0, #0]
   1f738:	1c5c      	adds	r4, r3, #1
   1f73a:	8084      	strh	r4, [r0, #4]
   1f73c:	0a0c      	lsrs	r4, r1, #8
   1f73e:	54d4      	strb	r4, [r2, r3]
	cpkt->data[cpkt->offset++] = (uint8_t) data;
   1f740:	8883      	ldrh	r3, [r0, #4]
   1f742:	6802      	ldr	r2, [r0, #0]
   1f744:	1c5c      	adds	r4, r3, #1
   1f746:	8084      	strh	r4, [r0, #4]
	return true;
   1f748:	2001      	movs	r0, #1
	cpkt->data[cpkt->offset++] = (uint8_t) data;
   1f74a:	54d1      	strb	r1, [r2, r3]
}
   1f74c:	bd10      	pop	{r4, pc}
		return false;
   1f74e:	2000      	movs	r0, #0
   1f750:	e7fc      	b.n	1f74c <append_be16+0x24>

0001f752 <decode_delta>:
{
   1f752:	b570      	push	{r4, r5, r6, lr}
   1f754:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1f758:	9d06      	ldr	r5, [sp, #24]
	if (opt == COAP_OPTION_EXT_13) {
   1f75a:	2c0d      	cmp	r4, #13
   1f75c:	d111      	bne.n	1f782 <decode_delta+0x30>
		*hdr_len = 1U;
   1f75e:	2401      	movs	r4, #1
   1f760:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 1) {
   1f762:	1a5c      	subs	r4, r3, r1
   1f764:	2c00      	cmp	r4, #0
   1f766:	dc02      	bgt.n	1f76e <decode_delta+0x1c>
			return -EINVAL;
   1f768:	f06f 0015 	mvn.w	r0, #21
}
   1f76c:	bd70      	pop	{r4, r5, r6, pc}
	*value = data[offset++];
   1f76e:	1c4d      	adds	r5, r1, #1
   1f770:	b2ad      	uxth	r5, r5
   1f772:	5c44      	ldrb	r4, [r0, r1]
		if (ret < 0) {
   1f774:	1b58      	subs	r0, r3, r5
	*pos = offset;
   1f776:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   1f778:	d4f6      	bmi.n	1f768 <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_13;
   1f77a:	340d      	adds	r4, #13
	*opt_ext = opt;
   1f77c:	9b05      	ldr	r3, [sp, #20]
   1f77e:	801c      	strh	r4, [r3, #0]
	return ret;
   1f780:	e7f4      	b.n	1f76c <decode_delta+0x1a>
	} else if (opt == COAP_OPTION_EXT_14) {
   1f782:	2c0e      	cmp	r4, #14
   1f784:	d113      	bne.n	1f7ae <decode_delta+0x5c>
		*hdr_len = 2U;
   1f786:	2402      	movs	r4, #2
   1f788:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 2) {
   1f78a:	1a5c      	subs	r4, r3, r1
   1f78c:	2c01      	cmp	r4, #1
   1f78e:	ddeb      	ble.n	1f768 <decode_delta+0x16>
	*value = data[offset++] << 8;
   1f790:	5c46      	ldrb	r6, [r0, r1]
	*value |= data[offset++];
   1f792:	1c8d      	adds	r5, r1, #2
	*value = data[offset++] << 8;
   1f794:	3101      	adds	r1, #1
	*value |= data[offset++];
   1f796:	b289      	uxth	r1, r1
   1f798:	5c44      	ldrb	r4, [r0, r1]
   1f79a:	b2ad      	uxth	r5, r5
		if (ret < 0) {
   1f79c:	1b58      	subs	r0, r3, r5
	*value |= data[offset++];
   1f79e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	*pos = offset;
   1f7a2:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   1f7a4:	d4e0      	bmi.n	1f768 <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_269;
   1f7a6:	f204 140d 	addw	r4, r4, #269	; 0x10d
   1f7aa:	b2a4      	uxth	r4, r4
   1f7ac:	e7e6      	b.n	1f77c <decode_delta+0x2a>
	} else if (opt == COAP_OPTION_EXT_15) {
   1f7ae:	2c0f      	cmp	r4, #15
   1f7b0:	d0da      	beq.n	1f768 <decode_delta+0x16>
	int ret = 0;
   1f7b2:	2000      	movs	r0, #0
   1f7b4:	e7e2      	b.n	1f77c <decode_delta+0x2a>

0001f7b6 <append.part.0>:
static inline bool append(struct coap_packet *cpkt, const uint8_t *data, uint16_t len)
   1f7b6:	b538      	push	{r3, r4, r5, lr}
   1f7b8:	4604      	mov	r4, r0
	if (cpkt->max_len - cpkt->offset < len) {
   1f7ba:	8880      	ldrh	r0, [r0, #4]
   1f7bc:	88e3      	ldrh	r3, [r4, #6]
static inline bool append(struct coap_packet *cpkt, const uint8_t *data, uint16_t len)
   1f7be:	4615      	mov	r5, r2
	if (cpkt->max_len - cpkt->offset < len) {
   1f7c0:	1a1b      	subs	r3, r3, r0
   1f7c2:	4293      	cmp	r3, r2
   1f7c4:	db08      	blt.n	1f7d8 <append.part.0+0x22>
	memcpy(cpkt->data + cpkt->offset, data, len);
   1f7c6:	6823      	ldr	r3, [r4, #0]
   1f7c8:	4418      	add	r0, r3
   1f7ca:	f002 ffd7 	bl	2277c <memcpy>
	return true;
   1f7ce:	2001      	movs	r0, #1
	cpkt->offset += len;
   1f7d0:	88a2      	ldrh	r2, [r4, #4]
   1f7d2:	4415      	add	r5, r2
   1f7d4:	80a5      	strh	r5, [r4, #4]
}
   1f7d6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1f7d8:	2000      	movs	r0, #0
   1f7da:	e7fc      	b.n	1f7d6 <append.part.0+0x20>

0001f7dc <parse_option>:
{
   1f7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max_len - offset < 1) {
   1f7e0:	1a5c      	subs	r4, r3, r1
{
   1f7e2:	b087      	sub	sp, #28
	if (max_len - offset < 1) {
   1f7e4:	2c00      	cmp	r4, #0
{
   1f7e6:	4681      	mov	r9, r0
   1f7e8:	e9dd a710 	ldrd	sl, r7, [sp, #64]	; 0x40
   1f7ec:	4615      	mov	r5, r2
   1f7ee:	461e      	mov	r6, r3
   1f7f0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	if (max_len - offset < 1) {
   1f7f4:	dd0f      	ble.n	1f816 <parse_option+0x3a>
	*value = data[offset++];
   1f7f6:	f101 0c01 	add.w	ip, r1, #1
   1f7fa:	fa1f fc8c 	uxth.w	ip, ip
   1f7fe:	5c44      	ldrb	r4, [r0, r1]
	if (r < 0) {
   1f800:	ebb3 010c 	subs.w	r1, r3, ip
	*pos = offset;
   1f804:	f8a2 c000 	strh.w	ip, [r2]
	if (r < 0) {
   1f808:	f100 809a 	bmi.w	1f940 <parse_option+0x164>
	if (opt == COAP_MARKER) {
   1f80c:	2cff      	cmp	r4, #255	; 0xff
   1f80e:	d105      	bne.n	1f81c <parse_option+0x40>
		return r > 0 ? 0 : -EINVAL;
   1f810:	2900      	cmp	r1, #0
   1f812:	f040 8099 	bne.w	1f948 <parse_option+0x16c>
			return -EINVAL;
   1f816:	f06f 0115 	mvn.w	r1, #21
   1f81a:	e091      	b.n	1f940 <parse_option+0x164>
	*opt_len += 1U;
   1f81c:	f8b7 c000 	ldrh.w	ip, [r7]
	return (opt & 0xF0) >> 4;
   1f820:	ea4f 1e14 	mov.w	lr, r4, lsr #4
	*opt_len += 1U;
   1f824:	f10c 0c01 	add.w	ip, ip, #1
	len = option_header_get_len(opt);
   1f828:	f004 040f 	and.w	r4, r4, #15
	*opt_len += 1U;
   1f82c:	f8a7 c000 	strh.w	ip, [r7]
	delta = option_header_get_delta(opt);
   1f830:	f8ad e014 	strh.w	lr, [sp, #20]
	len = option_header_get_len(opt);
   1f834:	f8ad 4016 	strh.w	r4, [sp, #22]
	if (r == 0 && delta > COAP_OPTION_NO_EXT) {
   1f838:	2900      	cmp	r1, #0
   1f83a:	d146      	bne.n	1f8ca <parse_option+0xee>
   1f83c:	f1be 0f0c 	cmp.w	lr, #12
   1f840:	d8e9      	bhi.n	1f816 <parse_option+0x3a>
	if (len > COAP_OPTION_NO_EXT) {
   1f842:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1f846:	2b0c      	cmp	r3, #12
   1f848:	d916      	bls.n	1f878 <parse_option+0x9c>
		r = decode_delta(data, *pos, pos, max_len,
   1f84a:	f10d 0212 	add.w	r2, sp, #18
   1f84e:	9202      	str	r2, [sp, #8]
   1f850:	f10d 0216 	add.w	r2, sp, #22
   1f854:	e9cd 3200 	strd	r3, r2, [sp]
   1f858:	8829      	ldrh	r1, [r5, #0]
   1f85a:	4633      	mov	r3, r6
   1f85c:	462a      	mov	r2, r5
   1f85e:	4648      	mov	r0, r9
   1f860:	f7ff ff77 	bl	1f752 <decode_delta>
		if (r < 0) {
   1f864:	1e01      	subs	r1, r0, #0
   1f866:	dbd6      	blt.n	1f816 <parse_option+0x3a>
#endif

#if use_builtin(__builtin_add_overflow)
static inline bool u16_add_overflow(uint16_t a, uint16_t b, uint16_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1f868:	883b      	ldrh	r3, [r7, #0]
   1f86a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1f86e:	4413      	add	r3, r2
   1f870:	b29a      	uxth	r2, r3
		if (u16_add_overflow(*opt_len, hdr_len, opt_len)) {
   1f872:	4293      	cmp	r3, r2
   1f874:	803b      	strh	r3, [r7, #0]
   1f876:	d1ce      	bne.n	1f816 <parse_option+0x3a>
   1f878:	f8ba 4000 	ldrh.w	r4, [sl]
   1f87c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f880:	441c      	add	r4, r3
   1f882:	b2a3      	uxth	r3, r4
   1f884:	f8aa 4000 	strh.w	r4, [sl]
	if (u16_add_overflow(*opt_delta, delta, opt_delta) ||
   1f888:	1ae4      	subs	r4, r4, r3
   1f88a:	bf18      	it	ne
   1f88c:	2401      	movne	r4, #1
   1f88e:	2c00      	cmp	r4, #0
   1f890:	d1c1      	bne.n	1f816 <parse_option+0x3a>
   1f892:	883b      	ldrh	r3, [r7, #0]
	    u16_add_overflow(*opt_len, len, opt_len)) {
   1f894:	f8bd b016 	ldrh.w	fp, [sp, #22]
   1f898:	445b      	add	r3, fp
   1f89a:	b29a      	uxth	r2, r3
   1f89c:	4293      	cmp	r3, r2
   1f89e:	bf18      	it	ne
   1f8a0:	2401      	movne	r4, #1
	if (u16_add_overflow(*opt_delta, delta, opt_delta) ||
   1f8a2:	b2a4      	uxth	r4, r4
   1f8a4:	803b      	strh	r3, [r7, #0]
   1f8a6:	2c00      	cmp	r4, #0
   1f8a8:	d1b5      	bne.n	1f816 <parse_option+0x3a>
	if (r == 0 && len != 0U) {
   1f8aa:	bb51      	cbnz	r1, 1f902 <parse_option+0x126>
   1f8ac:	f1bb 0f00 	cmp.w	fp, #0
   1f8b0:	d1b1      	bne.n	1f816 <parse_option+0x3a>
	if (option) {
   1f8b2:	f1b8 0f00 	cmp.w	r8, #0
   1f8b6:	d12a      	bne.n	1f90e <parse_option+0x132>
   1f8b8:	882a      	ldrh	r2, [r5, #0]
   1f8ba:	4493      	add	fp, r2
   1f8bc:	fa1f f18b 	uxth.w	r1, fp
		if (u16_add_overflow(*pos, len, pos)) {
   1f8c0:	458b      	cmp	fp, r1
   1f8c2:	8029      	strh	r1, [r5, #0]
   1f8c4:	d1a7      	bne.n	1f816 <parse_option+0x3a>
		r = max_len - *pos;
   1f8c6:	1a71      	subs	r1, r6, r1
   1f8c8:	e03a      	b.n	1f940 <parse_option+0x164>
	if (delta > COAP_OPTION_NO_EXT) {
   1f8ca:	f1be 0f0c 	cmp.w	lr, #12
   1f8ce:	d9b8      	bls.n	1f842 <parse_option+0x66>
		r = decode_delta(data, *pos, pos, max_len,
   1f8d0:	f10d 0112 	add.w	r1, sp, #18
   1f8d4:	9102      	str	r1, [sp, #8]
   1f8d6:	a905      	add	r1, sp, #20
   1f8d8:	e9cd e100 	strd	lr, r1, [sp]
   1f8dc:	8811      	ldrh	r1, [r2, #0]
   1f8de:	f7ff ff38 	bl	1f752 <decode_delta>
		if ((r < 0) || (r == 0 && len > COAP_OPTION_NO_EXT)) {
   1f8e2:	1e01      	subs	r1, r0, #0
   1f8e4:	db97      	blt.n	1f816 <parse_option+0x3a>
   1f8e6:	d103      	bne.n	1f8f0 <parse_option+0x114>
   1f8e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1f8ec:	2b0c      	cmp	r3, #12
   1f8ee:	d892      	bhi.n	1f816 <parse_option+0x3a>
   1f8f0:	883b      	ldrh	r3, [r7, #0]
   1f8f2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1f8f6:	4413      	add	r3, r2
   1f8f8:	b29a      	uxth	r2, r3
		if (u16_add_overflow(*opt_len, hdr_len, opt_len)) {
   1f8fa:	4293      	cmp	r3, r2
   1f8fc:	803b      	strh	r3, [r7, #0]
   1f8fe:	d0a0      	beq.n	1f842 <parse_option+0x66>
   1f900:	e789      	b.n	1f816 <parse_option+0x3a>
	if (option) {
   1f902:	f1b8 0f00 	cmp.w	r8, #0
   1f906:	d0d7      	beq.n	1f8b8 <parse_option+0xdc>
		if (len > sizeof(option->value)) {
   1f908:	f1bb 0f0c 	cmp.w	fp, #12
   1f90c:	d883      	bhi.n	1f816 <parse_option+0x3a>
		option->delta = *opt_delta;
   1f90e:	f8ba 3000 	ldrh.w	r3, [sl]
		option->len = len;
   1f912:	f888 b002 	strb.w	fp, [r8, #2]
		option->delta = *opt_delta;
   1f916:	f8a8 3000 	strh.w	r3, [r8]
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
   1f91a:	882c      	ldrh	r4, [r5, #0]
   1f91c:	f108 0003 	add.w	r0, r8, #3
	if (max_len - offset < len) {
   1f920:	1b33      	subs	r3, r6, r4
   1f922:	459b      	cmp	fp, r3
   1f924:	f73f af77 	bgt.w	1f816 <parse_option+0x3a>
   1f928:	eb09 0104 	add.w	r1, r9, r4
   1f92c:	465a      	mov	r2, fp
   1f92e:	f002 ff25 	bl	2277c <memcpy>
	offset += len;
   1f932:	eb0b 0104 	add.w	r1, fp, r4
   1f936:	b289      	uxth	r1, r1
	*pos = offset;
   1f938:	8029      	strh	r1, [r5, #0]
		if (r < 0) {
   1f93a:	1a71      	subs	r1, r6, r1
   1f93c:	f53f af6b 	bmi.w	1f816 <parse_option+0x3a>
}
   1f940:	4608      	mov	r0, r1
   1f942:	b007      	add	sp, #28
   1f944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return r > 0 ? 0 : -EINVAL;
   1f948:	2100      	movs	r1, #0
   1f94a:	e7f9      	b.n	1f940 <parse_option+0x164>

0001f94c <coap_packet_init>:
{
   1f94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f94e:	9e08      	ldr	r6, [sp, #32]
	if (!cpkt || !data || !max_len) {
   1f950:	4604      	mov	r4, r0
{
   1f952:	f89d 701c 	ldrb.w	r7, [sp, #28]
	if (!cpkt || !data || !max_len) {
   1f956:	b910      	cbnz	r0, 1f95e <coap_packet_init+0x12>
		return -EINVAL;
   1f958:	f06f 0015 	mvn.w	r0, #21
}
   1f95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!cpkt || !data || !max_len) {
   1f95e:	2900      	cmp	r1, #0
   1f960:	d0fa      	beq.n	1f958 <coap_packet_init+0xc>
   1f962:	2a00      	cmp	r2, #0
   1f964:	d0f8      	beq.n	1f958 <coap_packet_init+0xc>
__ssp_bos_icheck3(memset, void *, int)
   1f966:	2500      	movs	r5, #0
	cpkt->data = data;
   1f968:	6001      	str	r1, [r0, #0]
	hdr |= (type & 0x3) << 4;
   1f96a:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1f96e:	60c5      	str	r5, [r0, #12]
   1f970:	0109      	lsls	r1, r1, #4
   1f972:	f001 0130 	and.w	r1, r1, #48	; 0x30
   1f976:	ea41 1183 	orr.w	r1, r1, r3, lsl #6
	hdr |= token_len & 0xF;
   1f97a:	f007 030f 	and.w	r3, r7, #15
   1f97e:	4319      	orrs	r1, r3
   1f980:	6085      	str	r5, [r0, #8]
	cpkt->offset = 0U;
   1f982:	8085      	strh	r5, [r0, #4]
	cpkt->delta = 0U;
   1f984:	8185      	strh	r5, [r0, #12]
	cpkt->max_len = max_len;
   1f986:	80c2      	strh	r2, [r0, #6]
	res = append_u8(cpkt, hdr);
   1f988:	b2c9      	uxtb	r1, r1
	hdr |= token_len & 0xF;
   1f98a:	b27d      	sxtb	r5, r7
	res = append_u8(cpkt, hdr);
   1f98c:	f7ff febd 	bl	1f70a <append_u8>
	if (!res) {
   1f990:	2800      	cmp	r0, #0
   1f992:	d0e1      	beq.n	1f958 <coap_packet_init+0xc>
	res = append_u8(cpkt, code);
   1f994:	4620      	mov	r0, r4
   1f996:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   1f99a:	f7ff feb6 	bl	1f70a <append_u8>
	if (!res) {
   1f99e:	2800      	cmp	r0, #0
   1f9a0:	d0da      	beq.n	1f958 <coap_packet_init+0xc>
	res = append_be16(cpkt, id);
   1f9a2:	4620      	mov	r0, r4
   1f9a4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   1f9a8:	f7ff febe 	bl	1f728 <append_be16>
	if (!res) {
   1f9ac:	2800      	cmp	r0, #0
   1f9ae:	d0d3      	beq.n	1f958 <coap_packet_init+0xc>
	if (token && token_len) {
   1f9b0:	b91e      	cbnz	r6, 1f9ba <coap_packet_init+0x6e>
	cpkt->hdr_len = 1 + 1 + 2 + token_len;
   1f9b2:	3504      	adds	r5, #4
	return 0;
   1f9b4:	2000      	movs	r0, #0
	cpkt->hdr_len = 1 + 1 + 2 + token_len;
   1f9b6:	7225      	strb	r5, [r4, #8]
	return 0;
   1f9b8:	e7d0      	b.n	1f95c <coap_packet_init+0x10>
	if (token && token_len) {
   1f9ba:	2f00      	cmp	r7, #0
   1f9bc:	d0f9      	beq.n	1f9b2 <coap_packet_init+0x66>
	if (!cpkt || !data) {
   1f9be:	463a      	mov	r2, r7
   1f9c0:	4631      	mov	r1, r6
   1f9c2:	4620      	mov	r0, r4
   1f9c4:	f7ff fef7 	bl	1f7b6 <append.part.0>
		if (!res) {
   1f9c8:	2800      	cmp	r0, #0
   1f9ca:	d1f2      	bne.n	1f9b2 <coap_packet_init+0x66>
   1f9cc:	e7c4      	b.n	1f958 <coap_packet_init+0xc>

0001f9ce <coap_packet_append_option>:
{
   1f9ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9d2:	460f      	mov	r7, r1
   1f9d4:	4692      	mov	sl, r2
   1f9d6:	461c      	mov	r4, r3
	if (!cpkt) {
   1f9d8:	4606      	mov	r6, r0
   1f9da:	b918      	cbnz	r0, 1f9e4 <coap_packet_append_option+0x16>
		return -EINVAL;
   1f9dc:	f06f 0015 	mvn.w	r0, #21
}
   1f9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (len && !value) {
   1f9e4:	b10b      	cbz	r3, 1f9ea <coap_packet_append_option+0x1c>
   1f9e6:	2a00      	cmp	r2, #0
   1f9e8:	d0f8      	beq.n	1f9dc <coap_packet_append_option+0xe>
	if (code < cpkt->delta) {
   1f9ea:	89b1      	ldrh	r1, [r6, #12]
   1f9ec:	42b9      	cmp	r1, r7
   1f9ee:	d8f5      	bhi.n	1f9dc <coap_packet_append_option+0xe>
	if (cpkt->opt_len) {
   1f9f0:	8973      	ldrh	r3, [r6, #10]
   1f9f2:	b11b      	cbz	r3, 1f9fc <coap_packet_append_option+0x2e>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   1f9f4:	42b9      	cmp	r1, r7
   1f9f6:	d034      	beq.n	1fa62 <coap_packet_append_option+0x94>
   1f9f8:	1a7f      	subs	r7, r7, r1
   1f9fa:	b2bf      	uxth	r7, r7
	if (num < COAP_OPTION_EXT_13) {
   1f9fc:	2f0c      	cmp	r7, #12
   1f9fe:	d832      	bhi.n	1fa66 <coap_packet_append_option+0x98>
		*ext = 0U;
   1fa00:	f04f 0b00 	mov.w	fp, #0
		return 0;
   1fa04:	46d9      	mov	r9, fp
		*opt = num;
   1fa06:	b2fb      	uxtb	r3, r7
	if (num < COAP_OPTION_EXT_13) {
   1fa08:	2c0c      	cmp	r4, #12
   1fa0a:	d842      	bhi.n	1fa92 <coap_packet_append_option+0xc4>
		*ext = 0U;
   1fa0c:	2500      	movs	r5, #0
		return 0;
   1fa0e:	46a8      	mov	r8, r5
		*opt = num;
   1fa10:	b2e1      	uxtb	r1, r4
	*opt |= (len & 0xF);
   1fa12:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
	res = append_u8(cpkt, opt);
   1fa16:	4630      	mov	r0, r6
   1fa18:	b2c9      	uxtb	r1, r1
   1fa1a:	f7ff fe76 	bl	1f70a <append_u8>
	if (!res) {
   1fa1e:	2800      	cmp	r0, #0
   1fa20:	d0dc      	beq.n	1f9dc <coap_packet_append_option+0xe>
	if (delta_size == 1U) {
   1fa22:	f1b9 0f01 	cmp.w	r9, #1
   1fa26:	d146      	bne.n	1fab6 <coap_packet_append_option+0xe8>
		res = append_u8(cpkt, (uint8_t)delta_ext);
   1fa28:	4630      	mov	r0, r6
   1fa2a:	fa5f f18b 	uxtb.w	r1, fp
   1fa2e:	f7ff fe6c 	bl	1f70a <append_u8>
		if (!res) {
   1fa32:	2800      	cmp	r0, #0
   1fa34:	d0d2      	beq.n	1f9dc <coap_packet_append_option+0xe>
	if (len_size == 1U) {
   1fa36:	f1b8 0f01 	cmp.w	r8, #1
   1fa3a:	d144      	bne.n	1fac6 <coap_packet_append_option+0xf8>
		res = append_u8(cpkt, (uint8_t)len_ext);
   1fa3c:	4630      	mov	r0, r6
   1fa3e:	b2e9      	uxtb	r1, r5
   1fa40:	f7ff fe63 	bl	1f70a <append_u8>
		if (!res) {
   1fa44:	2800      	cmp	r0, #0
   1fa46:	d0c9      	beq.n	1f9dc <coap_packet_append_option+0xe>
	if (len && value) {
   1fa48:	2c00      	cmp	r4, #0
   1fa4a:	d144      	bne.n	1fad6 <coap_packet_append_option+0x108>
	return  (1 + delta_size + len_size + len);
   1fa4c:	3401      	adds	r4, #1
	cpkt->opt_len += r;
   1fa4e:	8973      	ldrh	r3, [r6, #10]
	cpkt->delta += code;
   1fa50:	89b1      	ldrh	r1, [r6, #12]
	return  (1 + delta_size + len_size + len);
   1fa52:	444c      	add	r4, r9
   1fa54:	4444      	add	r4, r8
	cpkt->opt_len += r;
   1fa56:	441c      	add	r4, r3
	cpkt->delta += code;
   1fa58:	440f      	add	r7, r1
	return 0;
   1fa5a:	2000      	movs	r0, #0
	cpkt->opt_len += r;
   1fa5c:	8174      	strh	r4, [r6, #10]
	cpkt->delta += code;
   1fa5e:	81b7      	strh	r7, [r6, #12]
	return 0;
   1fa60:	e7be      	b.n	1f9e0 <coap_packet_append_option+0x12>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   1fa62:	2700      	movs	r7, #0
   1fa64:	e7cc      	b.n	1fa00 <coap_packet_append_option+0x32>
	} else if (num < COAP_OPTION_EXT_269) {
   1fa66:	f5b7 7f86 	cmp.w	r7, #268	; 0x10c
   1fa6a:	fa0f fb87 	sxth.w	fp, r7
   1fa6e:	d807      	bhi.n	1fa80 <coap_packet_append_option+0xb2>
		*ext = num - COAP_OPTION_EXT_13;
   1fa70:	f1ab 0b0d 	sub.w	fp, fp, #13
		*opt = COAP_OPTION_EXT_13;
   1fa74:	230d      	movs	r3, #13
		return 1;
   1fa76:	f04f 0901 	mov.w	r9, #1
		*ext = num - COAP_OPTION_EXT_13;
   1fa7a:	fa1f fb8b 	uxth.w	fp, fp
		return 1;
   1fa7e:	e7c3      	b.n	1fa08 <coap_packet_append_option+0x3a>
	*ext = num - COAP_OPTION_EXT_269;
   1fa80:	f46f 7186 	mvn.w	r1, #268	; 0x10c
   1fa84:	448b      	add	fp, r1
	*opt = COAP_OPTION_EXT_14;
   1fa86:	230e      	movs	r3, #14
	return 2;
   1fa88:	f04f 0902 	mov.w	r9, #2
	*ext = num - COAP_OPTION_EXT_269;
   1fa8c:	fa1f fb8b 	uxth.w	fp, fp
	return 2;
   1fa90:	e7ba      	b.n	1fa08 <coap_packet_append_option+0x3a>
	} else if (num < COAP_OPTION_EXT_269) {
   1fa92:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
   1fa96:	b225      	sxth	r5, r4
   1fa98:	d805      	bhi.n	1faa6 <coap_packet_append_option+0xd8>
		*ext = num - COAP_OPTION_EXT_13;
   1fa9a:	3d0d      	subs	r5, #13
		*opt = COAP_OPTION_EXT_13;
   1fa9c:	210d      	movs	r1, #13
		return 1;
   1fa9e:	f04f 0801 	mov.w	r8, #1
		*ext = num - COAP_OPTION_EXT_13;
   1faa2:	b2ad      	uxth	r5, r5
		return 1;
   1faa4:	e7b5      	b.n	1fa12 <coap_packet_append_option+0x44>
	*ext = num - COAP_OPTION_EXT_269;
   1faa6:	f46f 7286 	mvn.w	r2, #268	; 0x10c
   1faaa:	4415      	add	r5, r2
	*opt = COAP_OPTION_EXT_14;
   1faac:	210e      	movs	r1, #14
	return 2;
   1faae:	f04f 0802 	mov.w	r8, #2
	*ext = num - COAP_OPTION_EXT_269;
   1fab2:	b2ad      	uxth	r5, r5
	return 2;
   1fab4:	e7ad      	b.n	1fa12 <coap_packet_append_option+0x44>
	} else if (delta_size == 2U) {
   1fab6:	f1b9 0f02 	cmp.w	r9, #2
   1faba:	d1bc      	bne.n	1fa36 <coap_packet_append_option+0x68>
		res = append_be16(cpkt, delta_ext);
   1fabc:	4659      	mov	r1, fp
   1fabe:	4630      	mov	r0, r6
   1fac0:	f7ff fe32 	bl	1f728 <append_be16>
   1fac4:	e7b5      	b.n	1fa32 <coap_packet_append_option+0x64>
	} else if (len_size == 2U) {
   1fac6:	f1b8 0f02 	cmp.w	r8, #2
   1faca:	d1bd      	bne.n	1fa48 <coap_packet_append_option+0x7a>
		res = append_be16(cpkt, len_ext);
   1facc:	4629      	mov	r1, r5
   1face:	4630      	mov	r0, r6
   1fad0:	f7ff fe2a 	bl	1f728 <append_be16>
   1fad4:	e7b6      	b.n	1fa44 <coap_packet_append_option+0x76>
	if (len && value) {
   1fad6:	f1ba 0f00 	cmp.w	sl, #0
   1fada:	d0b7      	beq.n	1fa4c <coap_packet_append_option+0x7e>
	if (!cpkt || !data) {
   1fadc:	4622      	mov	r2, r4
   1fade:	4651      	mov	r1, sl
   1fae0:	4630      	mov	r0, r6
   1fae2:	f7ff fe68 	bl	1f7b6 <append.part.0>
		if (!res) {
   1fae6:	2800      	cmp	r0, #0
   1fae8:	d1b0      	bne.n	1fa4c <coap_packet_append_option+0x7e>
   1faea:	e777      	b.n	1f9dc <coap_packet_append_option+0xe>

0001faec <coap_append_option_int>:
{
   1faec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (val == 0U) {
   1faee:	b93a      	cbnz	r2, 1fb00 <coap_append_option_int+0x14>
		len = 0U;
   1faf0:	4613      	mov	r3, r2
		data[0] = 0U;
   1faf2:	f88d 2004 	strb.w	r2, [sp, #4]
	return coap_packet_append_option(cpkt, code, data, len);
   1faf6:	aa01      	add	r2, sp, #4
   1faf8:	f7ff ff69 	bl	1f9ce <coap_packet_append_option>
}
   1fafc:	b002      	add	sp, #8
   1fafe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (val < 0xFF) {
   1fb00:	2afe      	cmp	r2, #254	; 0xfe
   1fb02:	b2d3      	uxtb	r3, r2
   1fb04:	d803      	bhi.n	1fb0e <coap_append_option_int+0x22>
		data[0] = (uint8_t) val;
   1fb06:	f88d 3004 	strb.w	r3, [sp, #4]
		len = 1U;
   1fb0a:	2301      	movs	r3, #1
   1fb0c:	e7f3      	b.n	1faf6 <coap_append_option_int+0xa>
	} else if (val < 0xFFFF) {
   1fb0e:	f64f 74fe 	movw	r4, #65534	; 0xfffe
   1fb12:	42a2      	cmp	r2, r4
   1fb14:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1fb18:	d804      	bhi.n	1fb24 <coap_append_option_int+0x38>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val >> 8;
   1fb1a:	ba52      	rev16	r2, r2
		len = 2U;
   1fb1c:	2302      	movs	r3, #2
   1fb1e:	f8ad 2004 	strh.w	r2, [sp, #4]
   1fb22:	e7e8      	b.n	1faf6 <coap_append_option_int+0xa>
	} else if (val < 0xFFFFFF) {
   1fb24:	f06f 467f 	mvn.w	r6, #4278190080	; 0xff000000
   1fb28:	42b2      	cmp	r2, r6
   1fb2a:	f3c2 4407 	ubfx	r4, r2, #16, #8
   1fb2e:	bf2b      	itete	cs
   1fb30:	ba12      	revcs	r2, r2
	dst[1] = val;
   1fb32:	f88d 3006 	strbcc.w	r3, [sp, #6]
		len = 4U;
   1fb36:	2304      	movcs	r3, #4
		len = 3U;
   1fb38:	2303      	movcc	r3, #3
	dst[0] = val >> 8;
   1fb3a:	bf3a      	itte	cc
   1fb3c:	f88d 5005 	strbcc.w	r5, [sp, #5]
		data[0] = val >> 16;
   1fb40:	f88d 4004 	strbcc.w	r4, [sp, #4]
   1fb44:	9201      	strcs	r2, [sp, #4]
 */
static inline void sys_put_be32(uint32_t val, uint8_t dst[4])
{
	sys_put_be16(val >> 16, dst);
	sys_put_be16(val, &dst[2]);
}
   1fb46:	e7d6      	b.n	1faf6 <coap_append_option_int+0xa>

0001fb48 <coap_packet_append_payload_marker>:
	return append_u8(cpkt, COAP_MARKER) ? 0 : -EINVAL;
   1fb48:	21ff      	movs	r1, #255	; 0xff
{
   1fb4a:	b508      	push	{r3, lr}
	return append_u8(cpkt, COAP_MARKER) ? 0 : -EINVAL;
   1fb4c:	f7ff fddd 	bl	1f70a <append_u8>
   1fb50:	2800      	cmp	r0, #0
}
   1fb52:	bf0c      	ite	eq
   1fb54:	f06f 0015 	mvneq.w	r0, #21
   1fb58:	2000      	movne	r0, #0
   1fb5a:	bd08      	pop	{r3, pc}

0001fb5c <coap_packet_append_payload>:
{
   1fb5c:	b508      	push	{r3, lr}
	if (!cpkt || !data) {
   1fb5e:	b118      	cbz	r0, 1fb68 <coap_packet_append_payload+0xc>
   1fb60:	b111      	cbz	r1, 1fb68 <coap_packet_append_payload+0xc>
   1fb62:	f7ff fe28 	bl	1f7b6 <append.part.0>
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
   1fb66:	b910      	cbnz	r0, 1fb6e <coap_packet_append_payload+0x12>
   1fb68:	f06f 0015 	mvn.w	r0, #21
}
   1fb6c:	bd08      	pop	{r3, pc}
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
   1fb6e:	2000      	movs	r0, #0
   1fb70:	e7fc      	b.n	1fb6c <coap_packet_append_payload+0x10>

0001fb72 <coap_packet_parse>:
{
   1fb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb76:	b086      	sub	sp, #24
   1fb78:	4688      	mov	r8, r1
   1fb7a:	4617      	mov	r7, r2
   1fb7c:	461d      	mov	r5, r3
	if (!cpkt || !data) {
   1fb7e:	4604      	mov	r4, r0
{
   1fb80:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (!cpkt || !data) {
   1fb84:	b920      	cbnz	r0, 1fb90 <coap_packet_parse+0x1e>
		return -EINVAL;
   1fb86:	f06f 0015 	mvn.w	r0, #21
}
   1fb8a:	b006      	add	sp, #24
   1fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cpkt || !data) {
   1fb90:	2900      	cmp	r1, #0
   1fb92:	d0f8      	beq.n	1fb86 <coap_packet_parse+0x14>
	if (len < BASIC_HEADER_SIZE) {
   1fb94:	2a03      	cmp	r2, #3
   1fb96:	d9f6      	bls.n	1fb86 <coap_packet_parse+0x14>
	if (options) {
   1fb98:	b123      	cbz	r3, 1fba4 <coap_packet_parse+0x32>
   1fb9a:	2100      	movs	r1, #0
   1fb9c:	4618      	mov	r0, r3
   1fb9e:	0132      	lsls	r2, r6, #4
   1fba0:	f002 fdf9 	bl	22796 <memset>
	cpkt->opt_len = 0U;
   1fba4:	2000      	movs	r0, #0
	cpkt->data = data;
   1fba6:	f8c4 8000 	str.w	r8, [r4]
	cpkt->offset = len;
   1fbaa:	80a7      	strh	r7, [r4, #4]
	cpkt->max_len = len;
   1fbac:	80e7      	strh	r7, [r4, #6]
	cpkt->opt_len = 0U;
   1fbae:	8160      	strh	r0, [r4, #10]
	cpkt->hdr_len = 0U;
   1fbb0:	7220      	strb	r0, [r4, #8]
	cpkt->delta = 0U;
   1fbb2:	81a0      	strh	r0, [r4, #12]
	tkl = cpkt->data[0] & 0x0f;
   1fbb4:	f898 1000 	ldrb.w	r1, [r8]
   1fbb8:	f001 010f 	and.w	r1, r1, #15
	if (tkl > 8) {
   1fbbc:	2908      	cmp	r1, #8
   1fbbe:	d8e2      	bhi.n	1fb86 <coap_packet_parse+0x14>
	cpkt->hdr_len = BASIC_HEADER_SIZE + tkl;
   1fbc0:	3104      	adds	r1, #4
	if (cpkt->hdr_len > len) {
   1fbc2:	42b9      	cmp	r1, r7
	cpkt->hdr_len = BASIC_HEADER_SIZE + tkl;
   1fbc4:	7221      	strb	r1, [r4, #8]
	if (cpkt->hdr_len > len) {
   1fbc6:	b28b      	uxth	r3, r1
   1fbc8:	d8dd      	bhi.n	1fb86 <coap_packet_parse+0x14>
	if (cpkt->hdr_len == len) {
   1fbca:	d0de      	beq.n	1fb8a <coap_packet_parse+0x18>
	num = 0U;
   1fbcc:	4607      	mov	r7, r0
	offset = cpkt->hdr_len;
   1fbce:	f8ad 3014 	strh.w	r3, [sp, #20]
	opt_len = 0U;
   1fbd2:	f8ad 0012 	strh.w	r0, [sp, #18]
	delta = 0U;
   1fbd6:	f8ad 0016 	strh.w	r0, [sp, #22]
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1fbda:	f10d 0812 	add.w	r8, sp, #18
		option = num < opt_num ? &options[num++] : NULL;
   1fbde:	42b7      	cmp	r7, r6
   1fbe0:	bf2c      	ite	cs
   1fbe2:	2300      	movcs	r3, #0
   1fbe4:	eb05 1307 	addcc.w	r3, r5, r7, lsl #4
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1fbe8:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1fbec:	f10d 0316 	add.w	r3, sp, #22
		option = num < opt_num ? &options[num++] : NULL;
   1fbf0:	bf38      	it	cc
   1fbf2:	1c7a      	addcc	r2, r7, #1
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1fbf4:	9300      	str	r3, [sp, #0]
		option = num < opt_num ? &options[num++] : NULL;
   1fbf6:	bf38      	it	cc
   1fbf8:	b2d7      	uxtbcc	r7, r2
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   1fbfa:	88e3      	ldrh	r3, [r4, #6]
   1fbfc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1fc00:	6820      	ldr	r0, [r4, #0]
   1fc02:	aa05      	add	r2, sp, #20
   1fc04:	f7ff fdea 	bl	1f7dc <parse_option>
		if (ret < 0) {
   1fc08:	2800      	cmp	r0, #0
   1fc0a:	dbbe      	blt.n	1fb8a <coap_packet_parse+0x18>
		} else if (ret == 0) {
   1fc0c:	d1e7      	bne.n	1fbde <coap_packet_parse+0x6c>
	cpkt->opt_len = opt_len;
   1fc0e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1fc12:	8163      	strh	r3, [r4, #10]
	cpkt->delta = delta;
   1fc14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1fc18:	81a3      	strh	r3, [r4, #12]
	return 0;
   1fc1a:	e7b6      	b.n	1fb8a <coap_packet_parse+0x18>

0001fc1c <coap_header_get_token>:
{
   1fc1c:	b510      	push	{r4, lr}
   1fc1e:	4604      	mov	r4, r0
   1fc20:	4608      	mov	r0, r1
	if (!cpkt || !cpkt->data) {
   1fc22:	b14c      	cbz	r4, 1fc38 <coap_header_get_token+0x1c>
   1fc24:	6821      	ldr	r1, [r4, #0]
   1fc26:	b149      	cbz	r1, 1fc3c <coap_header_get_token+0x20>
	tkl = cpkt->data[0] & 0x0f;
   1fc28:	780c      	ldrb	r4, [r1, #0]
	if (tkl) {
   1fc2a:	f014 040f 	ands.w	r4, r4, #15
   1fc2e:	d003      	beq.n	1fc38 <coap_header_get_token+0x1c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fc30:	4622      	mov	r2, r4
   1fc32:	3104      	adds	r1, #4
   1fc34:	f002 fda2 	bl	2277c <memcpy>
}
   1fc38:	4620      	mov	r0, r4
   1fc3a:	bd10      	pop	{r4, pc}
		return 0;
   1fc3c:	460c      	mov	r4, r1
   1fc3e:	e7fb      	b.n	1fc38 <coap_header_get_token+0x1c>

0001fc40 <coap_packet_get_payload>:
{
   1fc40:	b510      	push	{r4, lr}
	if (!cpkt || !len) {
   1fc42:	b908      	cbnz	r0, 1fc48 <coap_packet_get_payload+0x8>
		return NULL;
   1fc44:	2000      	movs	r0, #0
}
   1fc46:	bd10      	pop	{r4, pc}
	if (!cpkt || !len) {
   1fc48:	2900      	cmp	r1, #0
   1fc4a:	d0fb      	beq.n	1fc44 <coap_packet_get_payload+0x4>
	payload_len = cpkt->offset - cpkt->hdr_len - cpkt->opt_len;
   1fc4c:	7a02      	ldrb	r2, [r0, #8]
   1fc4e:	8944      	ldrh	r4, [r0, #10]
   1fc50:	8883      	ldrh	r3, [r0, #4]
   1fc52:	4422      	add	r2, r4
   1fc54:	1a9b      	subs	r3, r3, r2
	if (payload_len > 1) {
   1fc56:	2b01      	cmp	r3, #1
   1fc58:	dc02      	bgt.n	1fc60 <coap_packet_get_payload+0x20>
   1fc5a:	2300      	movs	r3, #0
   1fc5c:	800b      	strh	r3, [r1, #0]
	return *len == 0 ? NULL :
   1fc5e:	e7f1      	b.n	1fc44 <coap_packet_get_payload+0x4>
		*len = payload_len - 1;	/* subtract payload marker length */
   1fc60:	3b01      	subs	r3, #1
   1fc62:	800b      	strh	r3, [r1, #0]
		cpkt->data + cpkt->hdr_len + cpkt->opt_len + 1;
   1fc64:	7a03      	ldrb	r3, [r0, #8]
   1fc66:	8942      	ldrh	r2, [r0, #10]
	return *len == 0 ? NULL :
   1fc68:	6800      	ldr	r0, [r0, #0]
		cpkt->data + cpkt->hdr_len + cpkt->opt_len + 1;
   1fc6a:	4413      	add	r3, r2
   1fc6c:	3301      	adds	r3, #1
	return *len == 0 ? NULL :
   1fc6e:	4418      	add	r0, r3
   1fc70:	e7e9      	b.n	1fc46 <coap_packet_get_payload+0x6>

0001fc72 <sntp_init>:
{
   1fc72:	b570      	push	{r4, r5, r6, lr}
   1fc74:	460d      	mov	r5, r1
   1fc76:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   1fc78:	4604      	mov	r4, r0
   1fc7a:	b330      	cbz	r0, 1fcca <sntp_init+0x58>
   1fc7c:	b329      	cbz	r1, 1fcca <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   1fc7e:	2214      	movs	r2, #20
   1fc80:	2100      	movs	r1, #0
   1fc82:	f002 fd88 	bl	22796 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   1fc86:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   1fc88:	2211      	movs	r2, #17
   1fc8a:	2102      	movs	r1, #2
   1fc8c:	f7f3 fd48 	bl	13720 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   1fc90:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   1fc92:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   1fc94:	da04      	bge.n	1fca0 <sntp_init+0x2e>
		return -errno;
   1fc96:	f000 f955 	bl	1ff44 <__errno>
   1fc9a:	6800      	ldr	r0, [r0, #0]
   1fc9c:	4240      	negs	r0, r0
}
   1fc9e:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   1fca0:	4632      	mov	r2, r6
   1fca2:	4629      	mov	r1, r5
   1fca4:	f000 f854 	bl	1fd50 <z_impl_zsock_connect>
	if (ret < 0) {
   1fca8:	2800      	cmp	r0, #0
   1fcaa:	68e0      	ldr	r0, [r4, #12]
   1fcac:	da02      	bge.n	1fcb4 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   1fcae:	f000 f82b 	bl	1fd08 <z_impl_zsock_close>
   1fcb2:	e7f0      	b.n	1fc96 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1fcb4:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   1fcb6:	68a3      	ldr	r3, [r4, #8]
   1fcb8:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1fcbc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   1fcc0:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1fcc2:	8091      	strh	r1, [r2, #4]
	return 0;
   1fcc4:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   1fcc6:	60a3      	str	r3, [r4, #8]
	return 0;
   1fcc8:	e7e9      	b.n	1fc9e <sntp_init+0x2c>
		return -EFAULT;
   1fcca:	f06f 000d 	mvn.w	r0, #13
   1fcce:	e7e6      	b.n	1fc9e <sntp_init+0x2c>

0001fcd0 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   1fcd0:	b110      	cbz	r0, 1fcd8 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   1fcd2:	68c0      	ldr	r0, [r0, #12]
   1fcd4:	f000 b818 	b.w	1fd08 <z_impl_zsock_close>
	}
}
   1fcd8:	4770      	bx	lr

0001fcda <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   1fcda:	f7f3 be67 	b.w	139ac <socket_offload_getaddrinfo>

0001fcde <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   1fcde:	f7f3 be6f 	b.w	139c0 <socket_offload_freeaddrinfo>

0001fce2 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1fce2:	f7fc bd41 	b.w	1c768 <z_impl_k_mutex_unlock>

0001fce6 <z_fdtable_call_ioctl>:
{
   1fce6:	b40c      	push	{r2, r3}
   1fce8:	4603      	mov	r3, r0
   1fcea:	b507      	push	{r0, r1, r2, lr}
   1fcec:	aa04      	add	r2, sp, #16
   1fcee:	4608      	mov	r0, r1
   1fcf0:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   1fcf4:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   1fcf6:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1fcf8:	4798      	blx	r3
}
   1fcfa:	b003      	add	sp, #12
   1fcfc:	f85d eb04 	ldr.w	lr, [sp], #4
   1fd00:	b002      	add	sp, #8
   1fd02:	4770      	bx	lr

0001fd04 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1fd04:	f7fc bcb2 	b.w	1c66c <z_impl_k_mutex_lock>

0001fd08 <z_impl_zsock_close>:
{
   1fd08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   1fd0a:	4669      	mov	r1, sp
   1fd0c:	aa01      	add	r2, sp, #4
{
   1fd0e:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   1fd10:	f7f2 f94a 	bl	11fa8 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   1fd14:	4604      	mov	r4, r0
   1fd16:	b940      	cbnz	r0, 1fd2a <z_impl_zsock_close+0x22>
		errno = EBADF;
   1fd18:	f000 f914 	bl	1ff44 <__errno>
   1fd1c:	2309      	movs	r3, #9
		return -1;
   1fd1e:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   1fd22:	6003      	str	r3, [r0, #0]
}
   1fd24:	4620      	mov	r0, r4
   1fd26:	b003      	add	sp, #12
   1fd28:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   1fd2a:	f04f 32ff 	mov.w	r2, #4294967295
   1fd2e:	f04f 33ff 	mov.w	r3, #4294967295
   1fd32:	9801      	ldr	r0, [sp, #4]
   1fd34:	f7ff ffe6 	bl	1fd04 <k_mutex_lock.constprop.0>
	ret = vtable->fd_vtable.close(ctx);
   1fd38:	9b00      	ldr	r3, [sp, #0]
   1fd3a:	4620      	mov	r0, r4
   1fd3c:	689b      	ldr	r3, [r3, #8]
   1fd3e:	4798      	blx	r3
   1fd40:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   1fd42:	9801      	ldr	r0, [sp, #4]
   1fd44:	f7ff ffcd 	bl	1fce2 <k_mutex_unlock>
	z_free_fd(sock);
   1fd48:	4628      	mov	r0, r5
   1fd4a:	f7f2 f995 	bl	12078 <z_free_fd>
	return ret;
   1fd4e:	e7e9      	b.n	1fd24 <z_impl_zsock_close+0x1c>

0001fd50 <z_impl_zsock_connect>:
{
   1fd50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fd52:	460d      	mov	r5, r1
   1fd54:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   1fd56:	4669      	mov	r1, sp
   1fd58:	aa01      	add	r2, sp, #4
   1fd5a:	f7f2 f925 	bl	11fa8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   1fd5e:	4604      	mov	r4, r0
   1fd60:	b110      	cbz	r0, 1fd68 <z_impl_zsock_connect+0x18>
   1fd62:	9b00      	ldr	r3, [sp, #0]
   1fd64:	695b      	ldr	r3, [r3, #20]
   1fd66:	b943      	cbnz	r3, 1fd7a <z_impl_zsock_connect+0x2a>
   1fd68:	f000 f8ec 	bl	1ff44 <__errno>
   1fd6c:	2309      	movs	r3, #9
   1fd6e:	f04f 34ff 	mov.w	r4, #4294967295
   1fd72:	6003      	str	r3, [r0, #0]
}
   1fd74:	4620      	mov	r0, r4
   1fd76:	b002      	add	sp, #8
   1fd78:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   1fd7a:	f04f 32ff 	mov.w	r2, #4294967295
   1fd7e:	f04f 33ff 	mov.w	r3, #4294967295
   1fd82:	9801      	ldr	r0, [sp, #4]
   1fd84:	f7ff ffbe 	bl	1fd04 <k_mutex_lock.constprop.0>
   1fd88:	9b00      	ldr	r3, [sp, #0]
   1fd8a:	4632      	mov	r2, r6
   1fd8c:	4629      	mov	r1, r5
   1fd8e:	4620      	mov	r0, r4
   1fd90:	695b      	ldr	r3, [r3, #20]
   1fd92:	4798      	blx	r3
   1fd94:	4604      	mov	r4, r0
   1fd96:	9801      	ldr	r0, [sp, #4]
   1fd98:	f7ff ffa3 	bl	1fce2 <k_mutex_unlock>
   1fd9c:	e7ea      	b.n	1fd74 <z_impl_zsock_connect+0x24>

0001fd9e <z_impl_zsock_sendto>:
{
   1fd9e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1fda2:	460d      	mov	r5, r1
   1fda4:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   1fda6:	a902      	add	r1, sp, #8
   1fda8:	aa03      	add	r2, sp, #12
{
   1fdaa:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   1fdac:	f7f2 f8fc 	bl	11fa8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1fdb0:	4604      	mov	r4, r0
   1fdb2:	b110      	cbz	r0, 1fdba <z_impl_zsock_sendto+0x1c>
   1fdb4:	9b02      	ldr	r3, [sp, #8]
   1fdb6:	6a1b      	ldr	r3, [r3, #32]
   1fdb8:	b94b      	cbnz	r3, 1fdce <z_impl_zsock_sendto+0x30>
   1fdba:	f000 f8c3 	bl	1ff44 <__errno>
   1fdbe:	2309      	movs	r3, #9
   1fdc0:	f04f 34ff 	mov.w	r4, #4294967295
   1fdc4:	6003      	str	r3, [r0, #0]
}
   1fdc6:	4620      	mov	r0, r4
   1fdc8:	b004      	add	sp, #16
   1fdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1fdce:	f04f 32ff 	mov.w	r2, #4294967295
   1fdd2:	f04f 33ff 	mov.w	r3, #4294967295
   1fdd6:	9803      	ldr	r0, [sp, #12]
   1fdd8:	f7ff ff94 	bl	1fd04 <k_mutex_lock.constprop.0>
   1fddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fdde:	4632      	mov	r2, r6
   1fde0:	9301      	str	r3, [sp, #4]
   1fde2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fde4:	4629      	mov	r1, r5
   1fde6:	9300      	str	r3, [sp, #0]
   1fde8:	9b02      	ldr	r3, [sp, #8]
   1fdea:	4620      	mov	r0, r4
   1fdec:	f8d3 8020 	ldr.w	r8, [r3, #32]
   1fdf0:	463b      	mov	r3, r7
   1fdf2:	47c0      	blx	r8
   1fdf4:	4604      	mov	r4, r0
   1fdf6:	9803      	ldr	r0, [sp, #12]
   1fdf8:	f7ff ff73 	bl	1fce2 <k_mutex_unlock>
   1fdfc:	e7e3      	b.n	1fdc6 <z_impl_zsock_sendto+0x28>

0001fdfe <z_impl_zsock_recvfrom>:
{
   1fdfe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1fe02:	460d      	mov	r5, r1
   1fe04:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   1fe06:	a902      	add	r1, sp, #8
   1fe08:	aa03      	add	r2, sp, #12
{
   1fe0a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   1fe0c:	f7f2 f8cc 	bl	11fa8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1fe10:	4604      	mov	r4, r0
   1fe12:	b110      	cbz	r0, 1fe1a <z_impl_zsock_recvfrom+0x1c>
   1fe14:	9b02      	ldr	r3, [sp, #8]
   1fe16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fe18:	b94b      	cbnz	r3, 1fe2e <z_impl_zsock_recvfrom+0x30>
   1fe1a:	f000 f893 	bl	1ff44 <__errno>
   1fe1e:	2309      	movs	r3, #9
   1fe20:	f04f 34ff 	mov.w	r4, #4294967295
   1fe24:	6003      	str	r3, [r0, #0]
}
   1fe26:	4620      	mov	r0, r4
   1fe28:	b004      	add	sp, #16
   1fe2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1fe2e:	f04f 32ff 	mov.w	r2, #4294967295
   1fe32:	f04f 33ff 	mov.w	r3, #4294967295
   1fe36:	9803      	ldr	r0, [sp, #12]
   1fe38:	f7ff ff64 	bl	1fd04 <k_mutex_lock.constprop.0>
   1fe3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fe3e:	4632      	mov	r2, r6
   1fe40:	9301      	str	r3, [sp, #4]
   1fe42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fe44:	4629      	mov	r1, r5
   1fe46:	9300      	str	r3, [sp, #0]
   1fe48:	9b02      	ldr	r3, [sp, #8]
   1fe4a:	4620      	mov	r0, r4
   1fe4c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   1fe50:	463b      	mov	r3, r7
   1fe52:	47c0      	blx	r8
   1fe54:	4604      	mov	r4, r0
   1fe56:	9803      	ldr	r0, [sp, #12]
   1fe58:	f7ff ff43 	bl	1fce2 <k_mutex_unlock>
   1fe5c:	e7e3      	b.n	1fe26 <z_impl_zsock_recvfrom+0x28>

0001fe5e <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   1fe5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   1fe62:	1e14      	subs	r4, r2, #0
{
   1fe64:	4605      	mov	r5, r0
   1fe66:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   1fe68:	db13      	blt.n	1fe92 <z_impl_zsock_poll+0x34>
   1fe6a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1fe6e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1fe72:	2100      	movs	r1, #0
   1fe74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fe78:	2300      	movs	r3, #0
   1fe7a:	fbc7 0104 	smlal	r0, r1, r7, r4
   1fe7e:	f7f1 f80f 	bl	10ea0 <__aeabi_uldivmod>
   1fe82:	4602      	mov	r2, r0
   1fe84:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   1fe86:	4631      	mov	r1, r6
   1fe88:	4628      	mov	r0, r5
}
   1fe8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   1fe8e:	f7f3 bc71 	b.w	13774 <zsock_poll_internal>
		timeout = K_FOREVER;
   1fe92:	f04f 32ff 	mov.w	r2, #4294967295
   1fe96:	4613      	mov	r3, r2
   1fe98:	e7f5      	b.n	1fe86 <z_impl_zsock_poll+0x28>

0001fe9a <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1fe9a:	2200      	movs	r2, #0
   1fe9c:	e9c0 2200 	strd	r2, r2, [r0]
   1fea0:	6082      	str	r2, [r0, #8]
}
   1fea2:	4770      	bx	lr

0001fea4 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   1fea4:	b510      	push	{r4, lr}
   1fea6:	b40f      	push	{r0, r1, r2, r3}
   1fea8:	f7f3 fe92 	bl	13bd0 <before_nse>
   1feac:	bc0f      	pop	{r0, r1, r2, r3}
   1feae:	f7f0 f89b 	bl	ffe8 <spm_request_random_number_nse>
   1feb2:	b40f      	push	{r0, r1, r2, r3}
   1feb4:	f7f3 fe96 	bl	13be4 <after_nse>
   1feb8:	bc0f      	pop	{r0, r1, r2, r3}
   1feba:	bd10      	pop	{r4, pc}

0001febc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1febc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1febe:	6800      	ldr	r0, [r0, #0]
   1fec0:	f7f3 beb8 	b.w	13c34 <z_arm_fatal_error>

0001fec4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1fec4:	2100      	movs	r1, #0
   1fec6:	2001      	movs	r0, #1
   1fec8:	f7f3 beb4 	b.w	13c34 <z_arm_fatal_error>

0001fecc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1fecc:	b508      	push	{r3, lr}
	handler();
   1fece:	f7f3 ff2b 	bl	13d28 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1fed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1fed6:	f7f3 bff9 	b.w	13ecc <z_arm_exc_exit>

0001feda <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1feda:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1fedc:	f383 880b 	msr	PSPLIM, r3
}
   1fee0:	4770      	bx	lr

0001fee2 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1fee2:	4770      	bx	lr

0001fee4 <z_arm_restore_fp_context>:
   1fee4:	4770      	bx	lr

0001fee6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1fee6:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1feea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1feee:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1fef0:	bf08      	it	eq
   1fef2:	f06f 0015 	mvneq.w	r0, #21
   1fef6:	4770      	bx	lr

0001fef8 <mpu_configure_region>:
{
   1fef8:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1fefa:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   1fefc:	680c      	ldr	r4, [r1, #0]
{
   1fefe:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   1ff00:	890a      	ldrh	r2, [r1, #8]
   1ff02:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   1ff04:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ff06:	3b01      	subs	r3, #1
   1ff08:	f024 041f 	bic.w	r4, r4, #31
   1ff0c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1ff0e:	f002 021f 	and.w	r2, r2, #31
   1ff12:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ff16:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   1ff1a:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   1ff1c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ff20:	9303      	str	r3, [sp, #12]
   1ff22:	f7f4 faa9 	bl	14478 <region_allocate_and_init>
}
   1ff26:	b005      	add	sp, #20
   1ff28:	bd30      	pop	{r4, r5, pc}

0001ff2a <malloc_prepare>:
}
   1ff2a:	2000      	movs	r0, #0
   1ff2c:	4770      	bx	lr

0001ff2e <_stdout_hook_default>:
}
   1ff2e:	f04f 30ff 	mov.w	r0, #4294967295
   1ff32:	4770      	bx	lr

0001ff34 <__retarget_lock_acquire_recursive>:
   1ff34:	f04f 32ff 	mov.w	r2, #4294967295
   1ff38:	f04f 33ff 	mov.w	r3, #4294967295
   1ff3c:	f7fc bb96 	b.w	1c66c <z_impl_k_mutex_lock>

0001ff40 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   1ff40:	f7fc bc12 	b.w	1c768 <z_impl_k_mutex_unlock>

0001ff44 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1ff44:	f7fc b932 	b.w	1c1ac <z_impl_z_errno>

0001ff48 <smf_set_initial>:
	ctx->previous = NULL;
   1ff48:	2200      	movs	r2, #0
	ctx->terminate_val = 0;
   1ff4a:	e9c0 2201 	strd	r2, r2, [r0, #4]
	internal->terminate = false;
   1ff4e:	7b02      	ldrb	r2, [r0, #12]
	if (init_state->entry) {
   1ff50:	680b      	ldr	r3, [r1, #0]
	internal->terminate = false;
   1ff52:	f022 0206 	bic.w	r2, r2, #6
	ctx->current = init_state;
   1ff56:	6001      	str	r1, [r0, #0]
	internal->terminate = false;
   1ff58:	7302      	strb	r2, [r0, #12]
	if (init_state->entry) {
   1ff5a:	b103      	cbz	r3, 1ff5e <smf_set_initial+0x16>
		init_state->entry(ctx);
   1ff5c:	4718      	bx	r3
}
   1ff5e:	4770      	bx	lr

0001ff60 <smf_run_state>:
int32_t smf_run_state(struct smf_ctx *const ctx)
{
	struct internal_ctx * const internal = (void *) &ctx->internal;

	/* No need to continue if terminate was set */
	if (internal->terminate) {
   1ff60:	7b03      	ldrb	r3, [r0, #12]
{
   1ff62:	b510      	push	{r4, lr}
	if (internal->terminate) {
   1ff64:	f013 0402 	ands.w	r4, r3, #2
   1ff68:	d001      	beq.n	1ff6e <smf_run_state+0xe>
		return ctx->terminate_val;
   1ff6a:	6880      	ldr	r0, [r0, #8]
			return ctx->terminate_val;
		}
	}

	return 0;
}
   1ff6c:	bd10      	pop	{r4, pc}
	if (ctx->current->run) {
   1ff6e:	6803      	ldr	r3, [r0, #0]
   1ff70:	685b      	ldr	r3, [r3, #4]
   1ff72:	b113      	cbz	r3, 1ff7a <smf_run_state+0x1a>
		ctx->current->run(ctx);
   1ff74:	4798      	blx	r3
	return 0;
   1ff76:	4620      	mov	r0, r4
   1ff78:	e7f8      	b.n	1ff6c <smf_run_state+0xc>
   1ff7a:	4618      	mov	r0, r3
   1ff7c:	e7f6      	b.n	1ff6c <smf_run_state+0xc>

0001ff7e <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   1ff7e:	b508      	push	{r3, lr}
	net_if_init();
   1ff80:	f7f4 fc42 	bl	14808 <net_if_init>
	net_if_post_init();
   1ff84:	f7f4 fc60 	bl	14848 <net_if_post_init>
	net_coap_init();
   1ff88:	f7f3 fbba 	bl	13700 <net_coap_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1ff8c:	2000      	movs	r0, #0
   1ff8e:	bd08      	pop	{r3, pc}

0001ff90 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1ff90:	b110      	cbz	r0, 1ff98 <net_if_l2+0x8>
   1ff92:	6800      	ldr	r0, [r0, #0]
   1ff94:	b100      	cbz	r0, 1ff98 <net_if_l2+0x8>
	return iface->if_dev->l2;
   1ff96:	6840      	ldr	r0, [r0, #4]
}
   1ff98:	4770      	bx	lr

0001ff9a <l2_flags_get>:
{
   1ff9a:	b510      	push	{r4, lr}
   1ff9c:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1ff9e:	f7ff fff7 	bl	1ff90 <net_if_l2>
   1ffa2:	b128      	cbz	r0, 1ffb0 <l2_flags_get+0x16>
   1ffa4:	68c2      	ldr	r2, [r0, #12]
   1ffa6:	b11a      	cbz	r2, 1ffb0 <l2_flags_get+0x16>
}
   1ffa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1ffac:	4618      	mov	r0, r3
   1ffae:	4710      	bx	r2
}
   1ffb0:	2000      	movs	r0, #0
   1ffb2:	bd10      	pop	{r4, pc}

0001ffb4 <net_if_flag_is_set>:
	if (iface == NULL) {
   1ffb4:	b130      	cbz	r0, 1ffc4 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ffb6:	6803      	ldr	r3, [r0, #0]
   1ffb8:	330c      	adds	r3, #12
   1ffba:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ffbe:	4108      	asrs	r0, r1
   1ffc0:	f000 0001 	and.w	r0, r0, #1
}
   1ffc4:	4770      	bx	lr

0001ffc6 <net_if_up>:
{
   1ffc6:	b538      	push	{r3, r4, r5, lr}
   1ffc8:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   1ffca:	f04f 31ff 	mov.w	r1, #4294967295
   1ffce:	f04f 30ff 	mov.w	r0, #4294967295
   1ffd2:	f7f4 fc11 	bl	147f8 <k_mutex_lock.constprop.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1ffd6:	2100      	movs	r1, #0
   1ffd8:	4628      	mov	r0, r5
   1ffda:	f7ff ffeb 	bl	1ffb4 <net_if_flag_is_set>
   1ffde:	4604      	mov	r4, r0
   1ffe0:	bb48      	cbnz	r0, 20036 <net_if_up+0x70>
	     net_if_is_socket_offloaded(iface))) {
   1ffe2:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1ffe4:	7e9a      	ldrb	r2, [r3, #26]
   1ffe6:	b162      	cbz	r2, 20002 <net_if_up+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ffe8:	330c      	adds	r3, #12
   1ffea:	e8d3 2fef 	ldaex	r2, [r3]
   1ffee:	f042 0201 	orr.w	r2, r2, #1
   1fff2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1fff6:	2900      	cmp	r1, #0
   1fff8:	d1f7      	bne.n	1ffea <net_if_up+0x24>
	k_mutex_unlock(&lock);
   1fffa:	f7f4 fbf7 	bl	147ec <k_mutex_unlock.constprop.0>
}
   1fffe:	4620      	mov	r0, r4
   20000:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   20002:	4628      	mov	r0, r5
   20004:	f7ff ffc4 	bl	1ff90 <net_if_l2>
   20008:	4604      	mov	r4, r0
   2000a:	b130      	cbz	r0, 2001a <net_if_up+0x54>
   2000c:	6884      	ldr	r4, [r0, #8]
   2000e:	b124      	cbz	r4, 2001a <net_if_up+0x54>
	status = net_if_l2(iface)->enable(iface, true);
   20010:	2101      	movs	r1, #1
   20012:	4628      	mov	r0, r5
   20014:	47a0      	blx	r4
	if (status < 0) {
   20016:	1e04      	subs	r4, r0, #0
   20018:	dbef      	blt.n	1fffa <net_if_up+0x34>
   2001a:	682b      	ldr	r3, [r5, #0]
   2001c:	330c      	adds	r3, #12
   2001e:	e8d3 2fef 	ldaex	r2, [r3]
   20022:	f042 0201 	orr.w	r2, r2, #1
   20026:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2002a:	2900      	cmp	r1, #0
   2002c:	d1f7      	bne.n	2001e <net_if_up+0x58>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   2002e:	4628      	mov	r0, r5
   20030:	f7ff ffb3 	bl	1ff9a <l2_flags_get>
notify:
   20034:	e7e1      	b.n	1fffa <net_if_up+0x34>
		status = -EALREADY;
   20036:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2003a:	e7de      	b.n	1fffa <net_if_up+0x34>

0002003c <net_byte_to_hex>:
{
   2003c:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2003e:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   20040:	b1bb      	cbz	r3, 20072 <net_byte_to_hex+0x36>
		if (val < 10) {
   20042:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   20044:	b26b      	sxtb	r3, r5
   20046:	bf86      	itte	hi
   20048:	f1a2 050a 	subhi.w	r5, r2, #10
   2004c:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   2004e:	3330      	addls	r3, #48	; 0x30
   20050:	1c44      	adds	r4, r0, #1
   20052:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   20054:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   20058:	4619      	mov	r1, r3
   2005a:	2b09      	cmp	r3, #9
	*ptr = '\0';
   2005c:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   20060:	bf83      	ittte	hi
   20062:	3a0a      	subhi	r2, #10
   20064:	1889      	addhi	r1, r1, r2
   20066:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   20068:	3130      	addls	r1, #48	; 0x30
   2006a:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   2006c:	7063      	strb	r3, [r4, #1]
   2006e:	1c60      	adds	r0, r4, #1
}
   20070:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   20072:	2d00      	cmp	r5, #0
   20074:	d1e5      	bne.n	20042 <net_byte_to_hex+0x6>
   20076:	4604      	mov	r4, r0
   20078:	e7ec      	b.n	20054 <net_byte_to_hex+0x18>

0002007a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2007a:	b2cb      	uxtb	r3, r1
   2007c:	210c      	movs	r1, #12
   2007e:	6902      	ldr	r2, [r0, #16]
   20080:	fb03 2101 	mla	r1, r3, r1, r2
   20084:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   20086:	f000 0007 	and.w	r0, r0, #7
   2008a:	4770      	bx	lr

0002008c <set_off_state>:
	__asm__ volatile(
   2008c:	f04f 0320 	mov.w	r3, #32
   20090:	f3ef 8211 	mrs	r2, BASEPRI
   20094:	f383 8812 	msr	BASEPRI_MAX, r3
   20098:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2009c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2009e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   200a2:	d001      	beq.n	200a8 <set_off_state+0x1c>
   200a4:	428b      	cmp	r3, r1
   200a6:	d107      	bne.n	200b8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   200a8:	2301      	movs	r3, #1
   200aa:	6003      	str	r3, [r0, #0]
	int err = 0;
   200ac:	2000      	movs	r0, #0
	__asm__ volatile(
   200ae:	f382 8811 	msr	BASEPRI, r2
   200b2:	f3bf 8f6f 	isb	sy
}
   200b6:	4770      	bx	lr
		err = -EPERM;
   200b8:	f04f 30ff 	mov.w	r0, #4294967295
   200bc:	e7f7      	b.n	200ae <set_off_state+0x22>

000200be <set_starting_state>:
{
   200be:	b510      	push	{r4, lr}
	__asm__ volatile(
   200c0:	f04f 0320 	mov.w	r3, #32
   200c4:	f3ef 8211 	mrs	r2, BASEPRI
   200c8:	f383 8812 	msr	BASEPRI_MAX, r3
   200cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   200d0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   200d2:	f003 0407 	and.w	r4, r3, #7
   200d6:	2c01      	cmp	r4, #1
   200d8:	d106      	bne.n	200e8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   200da:	6001      	str	r1, [r0, #0]
	int err = 0;
   200dc:	2000      	movs	r0, #0
	__asm__ volatile(
   200de:	f382 8811 	msr	BASEPRI, r2
   200e2:	f3bf 8f6f 	isb	sy
}
   200e6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   200e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   200ec:	428b      	cmp	r3, r1
		err = -EALREADY;
   200ee:	bf14      	ite	ne
   200f0:	f04f 30ff 	movne.w	r0, #4294967295
   200f4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   200f8:	e7f1      	b.n	200de <set_starting_state+0x20>

000200fa <set_on_state>:
	__asm__ volatile(
   200fa:	f04f 0320 	mov.w	r3, #32
   200fe:	f3ef 8211 	mrs	r2, BASEPRI
   20102:	f383 8812 	msr	BASEPRI_MAX, r3
   20106:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2010a:	6803      	ldr	r3, [r0, #0]
   2010c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20110:	f043 0302 	orr.w	r3, r3, #2
   20114:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   20116:	f382 8811 	msr	BASEPRI, r2
   2011a:	f3bf 8f6f 	isb	sy
}
   2011e:	4770      	bx	lr

00020120 <onoff_started_callback>:
{
   20120:	b410      	push	{r4}
	notify(mgr, 0);
   20122:	241c      	movs	r4, #28
	return &data->mgr[type];
   20124:	6900      	ldr	r0, [r0, #16]
   20126:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   20128:	fb03 0004 	mla	r0, r3, r4, r0
   2012c:	2100      	movs	r1, #0
}
   2012e:	bc10      	pop	{r4}
	notify(mgr, 0);
   20130:	4710      	bx	r2

00020132 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   20132:	2000      	movs	r0, #0
   20134:	f7f8 bd56 	b.w	18be4 <nrfx_clock_start>

00020138 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20138:	2000      	movs	r0, #0
   2013a:	f7f8 bd85 	b.w	18c48 <nrfx_clock_stop>

0002013e <blocking_start_callback>:
{
   2013e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   20140:	f7fc bb8e 	b.w	1c860 <z_impl_k_sem_give>

00020144 <api_stop>:
{
   20144:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   20146:	240c      	movs	r4, #12
   20148:	b2c9      	uxtb	r1, r1
   2014a:	434c      	muls	r4, r1
{
   2014c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   2014e:	6900      	ldr	r0, [r0, #16]
   20150:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20154:	2180      	movs	r1, #128	; 0x80
   20156:	4418      	add	r0, r3
   20158:	f7ff ff98 	bl	2008c <set_off_state>
	if (err < 0) {
   2015c:	2800      	cmp	r0, #0
   2015e:	db04      	blt.n	2016a <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   20160:	6869      	ldr	r1, [r5, #4]
   20162:	440c      	add	r4, r1
   20164:	6863      	ldr	r3, [r4, #4]
   20166:	4798      	blx	r3
	return 0;
   20168:	2000      	movs	r0, #0
}
   2016a:	bd38      	pop	{r3, r4, r5, pc}

0002016c <api_start>:
{
   2016c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   20170:	240c      	movs	r4, #12
   20172:	b2c9      	uxtb	r1, r1
   20174:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   20176:	6905      	ldr	r5, [r0, #16]
{
   20178:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2017a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2017e:	2180      	movs	r1, #128	; 0x80
   20180:	4428      	add	r0, r5
{
   20182:	4690      	mov	r8, r2
   20184:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   20186:	f7ff ff9a 	bl	200be <set_starting_state>
	if (err < 0) {
   2018a:	2800      	cmp	r0, #0
   2018c:	db06      	blt.n	2019c <api_start+0x30>
	subdata->cb = cb;
   2018e:	4425      	add	r5, r4
	subdata->user_data = user_data;
   20190:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   20194:	6873      	ldr	r3, [r6, #4]
   20196:	591b      	ldr	r3, [r3, r4]
   20198:	4798      	blx	r3
	return 0;
   2019a:	2000      	movs	r0, #0
}
   2019c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000201a0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201a0:	6843      	ldr	r3, [r0, #4]
}
   201a2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201a4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   201a6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   201a8:	600b      	str	r3, [r1, #0]
}
   201aa:	4770      	bx	lr

000201ac <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201ac:	6843      	ldr	r3, [r0, #4]
   201ae:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   201b0:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   201b2:	4042      	eors	r2, r0
   201b4:	400a      	ands	r2, r1
   201b6:	4042      	eors	r2, r0
    p_reg->OUT = value;
   201b8:	605a      	str	r2, [r3, #4]
}
   201ba:	2000      	movs	r0, #0
   201bc:	4770      	bx	lr

000201be <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201be:	6843      	ldr	r3, [r0, #4]
}
   201c0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201c2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   201c4:	6099      	str	r1, [r3, #8]
}
   201c6:	4770      	bx	lr

000201c8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201c8:	6843      	ldr	r3, [r0, #4]
}
   201ca:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201cc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   201ce:	60d9      	str	r1, [r3, #12]
}
   201d0:	4770      	bx	lr

000201d2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201d2:	6843      	ldr	r3, [r0, #4]
}
   201d4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201d6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   201d8:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   201da:	404b      	eors	r3, r1
    p_reg->OUT = value;
   201dc:	6053      	str	r3, [r2, #4]
}
   201de:	4770      	bx	lr

000201e0 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   201e0:	6903      	ldr	r3, [r0, #16]
{
   201e2:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   201e4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   201e6:	b158      	cbz	r0, 20200 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   201e8:	2400      	movs	r4, #0
   201ea:	4281      	cmp	r1, r0
   201ec:	d113      	bne.n	20216 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   201ee:	6808      	ldr	r0, [r1, #0]
   201f0:	b95c      	cbnz	r4, 2020a <gpio_nrfx_manage_callback+0x2a>
   201f2:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   201f4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   201f6:	42a1      	cmp	r1, r4
   201f8:	d100      	bne.n	201fc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   201fa:	6098      	str	r0, [r3, #8]
	parent->next = child;
   201fc:	2000      	movs	r0, #0
   201fe:	6008      	str	r0, [r1, #0]
	if (set) {
   20200:	b972      	cbnz	r2, 20220 <gpio_nrfx_manage_callback+0x40>
	return 0;
   20202:	2000      	movs	r0, #0
}
   20204:	bd30      	pop	{r4, r5, pc}
   20206:	4628      	mov	r0, r5
   20208:	e7ef      	b.n	201ea <gpio_nrfx_manage_callback+0xa>
   2020a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2020c:	6898      	ldr	r0, [r3, #8]
   2020e:	4281      	cmp	r1, r0
	list->tail = node;
   20210:	bf08      	it	eq
   20212:	609c      	streq	r4, [r3, #8]
}
   20214:	e7f2      	b.n	201fc <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20216:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20218:	4604      	mov	r4, r0
   2021a:	2d00      	cmp	r5, #0
   2021c:	d1f3      	bne.n	20206 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2021e:	b13a      	cbz	r2, 20230 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   20220:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   20222:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   20224:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   20226:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   20228:	2800      	cmp	r0, #0
   2022a:	d1ea      	bne.n	20202 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2022c:	6099      	str	r1, [r3, #8]
}
   2022e:	e7e9      	b.n	20204 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   20230:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20234:	e7e6      	b.n	20204 <gpio_nrfx_manage_callback+0x24>

00020236 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   20236:	6843      	ldr	r3, [r0, #4]
{
   20238:	b410      	push	{r4}
	return config->uarte_regs;
   2023a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   2023c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   20240:	05d1      	lsls	r1, r2, #23
   20242:	d518      	bpl.n	20276 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20244:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   20248:	b1aa      	cbz	r2, 20276 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2024a:	f04f 0120 	mov.w	r1, #32
   2024e:	f3ef 8211 	mrs	r2, BASEPRI
   20252:	f381 8812 	msr	BASEPRI_MAX, r1
   20256:	f3bf 8f6f 	isb	sy
   2025a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2025e:	b131      	cbz	r1, 2026e <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20260:	2100      	movs	r1, #0
   20262:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   20266:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2026a:	2101      	movs	r1, #1
   2026c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2026e:	f382 8811 	msr	BASEPRI, r2
   20272:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20276:	6842      	ldr	r2, [r0, #4]
   20278:	6852      	ldr	r2, [r2, #4]
   2027a:	06d2      	lsls	r2, r2, #27
   2027c:	d51a      	bpl.n	202b4 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   2027e:	f04f 0220 	mov.w	r2, #32
   20282:	f3ef 8111 	mrs	r1, BASEPRI
   20286:	f382 8812 	msr	BASEPRI_MAX, r2
   2028a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2028e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   20292:	b112      	cbz	r2, 2029a <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   20294:	2200      	movs	r2, #0
   20296:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2029a:	6902      	ldr	r2, [r0, #16]
   2029c:	68d2      	ldr	r2, [r2, #12]
   2029e:	b10a      	cbz	r2, 202a4 <uarte_nrfx_isr_int+0x6e>
   202a0:	6912      	ldr	r2, [r2, #16]
   202a2:	b91a      	cbnz	r2, 202ac <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   202a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   202a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   202ac:	f381 8811 	msr	BASEPRI, r1
   202b0:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   202b4:	6902      	ldr	r2, [r0, #16]
   202b6:	68d2      	ldr	r2, [r2, #12]
   202b8:	b15a      	cbz	r2, 202d2 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   202ba:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   202be:	b151      	cbz	r1, 202d6 <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
   202c0:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   202c2:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   202c4:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   202c6:	b134      	cbz	r4, 202d6 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   202c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   202cc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   202d0:	7391      	strb	r1, [r2, #14]
}
   202d2:	bc10      	pop	{r4}
   202d4:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   202d6:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   202da:	b121      	cbz	r1, 202e6 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   202dc:	2100      	movs	r1, #0
   202de:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   202e2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   202e6:	6813      	ldr	r3, [r2, #0]
   202e8:	2b00      	cmp	r3, #0
   202ea:	d0f2      	beq.n	202d2 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   202ec:	6851      	ldr	r1, [r2, #4]
}
   202ee:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   202f0:	4718      	bx	r3

000202f2 <uarte_nrfx_config_get>:
{
   202f2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   202f4:	6902      	ldr	r2, [r0, #16]
   202f6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   202fa:	e883 0003 	stmia.w	r3, {r0, r1}
}
   202fe:	2000      	movs	r0, #0
   20300:	4770      	bx	lr

00020302 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   20302:	6843      	ldr	r3, [r0, #4]
   20304:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   20306:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2030a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2030e:	4770      	bx	lr

00020310 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   20310:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   20312:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20314:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   20318:	b940      	cbnz	r0, 2032c <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2031a:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2031c:	0792      	lsls	r2, r2, #30
   2031e:	d406      	bmi.n	2032e <is_tx_ready+0x1e>
   20320:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   20324:	3800      	subs	r0, #0
   20326:	bf18      	it	ne
   20328:	2001      	movne	r0, #1
   2032a:	4770      	bx	lr
   2032c:	2001      	movs	r0, #1
}
   2032e:	4770      	bx	lr

00020330 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   20330:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   20332:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   20334:	681b      	ldr	r3, [r3, #0]
   20336:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2033a:	b148      	cbz	r0, 20350 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2033c:	2000      	movs	r0, #0
	*c = data->rx_data;
   2033e:	7d52      	ldrb	r2, [r2, #21]
   20340:	700a      	strb	r2, [r1, #0]
   20342:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   20346:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2034a:	2201      	movs	r2, #1
   2034c:	601a      	str	r2, [r3, #0]
	return 0;
   2034e:	4770      	bx	lr
		return -1;
   20350:	f04f 30ff 	mov.w	r0, #4294967295
}
   20354:	4770      	bx	lr

00020356 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20356:	2a00      	cmp	r2, #0
{
   20358:	b510      	push	{r4, lr}
   2035a:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2035c:	dd0f      	ble.n	2037e <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2035e:	6843      	ldr	r3, [r0, #4]
   20360:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20362:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20366:	b148      	cbz	r0, 2037c <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20368:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2036a:	6922      	ldr	r2, [r4, #16]
   2036c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   20370:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20374:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   20376:	7d52      	ldrb	r2, [r2, #21]
   20378:	700a      	strb	r2, [r1, #0]
   2037a:	6018      	str	r0, [r3, #0]
}
   2037c:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2037e:	2000      	movs	r0, #0
   20380:	e7fc      	b.n	2037c <uarte_nrfx_fifo_read+0x26>

00020382 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   20382:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   20384:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   20386:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   20388:	f04f 0020 	mov.w	r0, #32
   2038c:	f3ef 8311 	mrs	r3, BASEPRI
   20390:	f380 8812 	msr	BASEPRI_MAX, r0
   20394:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   20398:	2000      	movs	r0, #0
   2039a:	68c9      	ldr	r1, [r1, #12]
   2039c:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2039e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   203a2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   203a6:	f383 8811 	msr	BASEPRI, r3
   203aa:	f3bf 8f6f 	isb	sy
}
   203ae:	4770      	bx	lr

000203b0 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   203b0:	2201      	movs	r2, #1
   203b2:	6903      	ldr	r3, [r0, #16]
   203b4:	68db      	ldr	r3, [r3, #12]
   203b6:	739a      	strb	r2, [r3, #14]
}
   203b8:	4770      	bx	lr

000203ba <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   203ba:	6903      	ldr	r3, [r0, #16]
   203bc:	68db      	ldr	r3, [r3, #12]
   203be:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   203c0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   203c4:	b962      	cbnz	r2, 203e0 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   203c6:	6842      	ldr	r2, [r0, #4]
   203c8:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203ca:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   203ce:	b140      	cbz	r0, 203e2 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   203d0:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   203d4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   203d8:	d003      	beq.n	203e2 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   203da:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   203dc:	6119      	str	r1, [r3, #16]
   203de:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   203e0:	2000      	movs	r0, #0
}
   203e2:	4770      	bx	lr

000203e4 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   203e4:	6843      	ldr	r3, [r0, #4]
   203e6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203e8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   203ec:	3800      	subs	r0, #0
   203ee:	bf18      	it	ne
   203f0:	2001      	movne	r0, #1
   203f2:	4770      	bx	lr

000203f4 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   203f4:	2210      	movs	r2, #16
	return config->uarte_regs;
   203f6:	6843      	ldr	r3, [r0, #4]
   203f8:	681b      	ldr	r3, [r3, #0]
   203fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   203fe:	4770      	bx	lr

00020400 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   20400:	2210      	movs	r2, #16
	return config->uarte_regs;
   20402:	6843      	ldr	r3, [r0, #4]
   20404:	681b      	ldr	r3, [r3, #0]
   20406:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2040a:	4770      	bx	lr

0002040c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2040c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   20410:	6843      	ldr	r3, [r0, #4]
   20412:	681b      	ldr	r3, [r3, #0]
   20414:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20418:	4770      	bx	lr

0002041a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2041a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2041e:	6843      	ldr	r3, [r0, #4]
   20420:	681b      	ldr	r3, [r3, #0]
   20422:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20426:	4770      	bx	lr

00020428 <uarte_nrfx_irq_update>:
}
   20428:	2001      	movs	r0, #1
   2042a:	4770      	bx	lr

0002042c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2042c:	6903      	ldr	r3, [r0, #16]
   2042e:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   20430:	e9c3 1200 	strd	r1, r2, [r3]
}
   20434:	4770      	bx	lr

00020436 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   20436:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   20438:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2043a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2043e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20442:	2200      	movs	r2, #0
   20444:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   20448:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2044c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   20450:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20454:	6842      	ldr	r2, [r0, #4]
   20456:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20458:	bf41      	itttt	mi
   2045a:	2208      	movmi	r2, #8
   2045c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   20460:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   20464:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20468:	2201      	movs	r2, #1
   2046a:	609a      	str	r2, [r3, #8]
}
   2046c:	4770      	bx	lr

0002046e <uarte_nrfx_fifo_fill>:
{
   2046e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   20470:	6906      	ldr	r6, [r0, #16]
{
   20472:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   20474:	68f3      	ldr	r3, [r6, #12]
   20476:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20478:	3310      	adds	r3, #16
   2047a:	4294      	cmp	r4, r2
   2047c:	bfa8      	it	ge
   2047e:	4614      	movge	r4, r2
   20480:	2201      	movs	r2, #1
   20482:	e8d3 0fef 	ldaex	r0, [r3]
   20486:	2800      	cmp	r0, #0
   20488:	d103      	bne.n	20492 <uarte_nrfx_fifo_fill+0x24>
   2048a:	e8c3 2fe7 	stlex	r7, r2, [r3]
   2048e:	2f00      	cmp	r7, #0
   20490:	d1f7      	bne.n	20482 <uarte_nrfx_fifo_fill+0x14>
   20492:	bf0c      	ite	eq
   20494:	4613      	moveq	r3, r2
   20496:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   20498:	d01d      	beq.n	204d6 <uarte_nrfx_fifo_fill+0x68>
		return 0;
   2049a:	461c      	mov	r4, r3
}
   2049c:	4620      	mov	r0, r4
   2049e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   204a0:	68f2      	ldr	r2, [r6, #12]
   204a2:	5cc8      	ldrb	r0, [r1, r3]
   204a4:	6892      	ldr	r2, [r2, #8]
   204a6:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   204a8:	3301      	adds	r3, #1
   204aa:	42a3      	cmp	r3, r4
   204ac:	dbf8      	blt.n	204a0 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   204ae:	f04f 0320 	mov.w	r3, #32
   204b2:	f3ef 8711 	mrs	r7, BASEPRI
   204b6:	f383 8812 	msr	BASEPRI_MAX, r3
   204ba:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   204be:	4628      	mov	r0, r5
   204c0:	f7ff ff26 	bl	20310 <is_tx_ready>
   204c4:	68f3      	ldr	r3, [r6, #12]
   204c6:	b940      	cbnz	r0, 204da <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   204c8:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   204ca:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   204cc:	f387 8811 	msr	BASEPRI, r7
   204d0:	f3bf 8f6f 	isb	sy
	return len;
   204d4:	e7e2      	b.n	2049c <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   204d6:	2300      	movs	r3, #0
   204d8:	e7e7      	b.n	204aa <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   204da:	4622      	mov	r2, r4
   204dc:	4628      	mov	r0, r5
   204de:	6899      	ldr	r1, [r3, #8]
   204e0:	f7ff ffa9 	bl	20436 <tx_start>
   204e4:	e7f2      	b.n	204cc <uarte_nrfx_fifo_fill+0x5e>

000204e6 <uarte_nrfx_irq_is_pending>:
{
   204e6:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   204e8:	6843      	ldr	r3, [r0, #4]
{
   204ea:	4604      	mov	r4, r0
	return config->uarte_regs;
   204ec:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   204ee:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   204f2:	025b      	lsls	r3, r3, #9
   204f4:	d405      	bmi.n	20502 <uarte_nrfx_irq_is_pending+0x1c>
   204f6:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   204fa:	f010 0010 	ands.w	r0, r0, #16
   204fe:	d106      	bne.n	2050e <uarte_nrfx_irq_is_pending+0x28>
}
   20500:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   20502:	f7ff ff5a 	bl	203ba <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   20506:	2800      	cmp	r0, #0
   20508:	d0f5      	beq.n	204f6 <uarte_nrfx_irq_is_pending+0x10>
		||
   2050a:	2001      	movs	r0, #1
   2050c:	e7f8      	b.n	20500 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2050e:	4620      	mov	r0, r4
   20510:	f7ff ff68 	bl	203e4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   20514:	3800      	subs	r0, #0
   20516:	bf18      	it	ne
   20518:	2001      	movne	r0, #1
   2051a:	e7f1      	b.n	20500 <uarte_nrfx_irq_is_pending+0x1a>

0002051c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2051c:	b510      	push	{r4, lr}
   2051e:	4604      	mov	r4, r0
   20520:	2200      	movs	r2, #0
   20522:	2101      	movs	r1, #1
   20524:	2008      	movs	r0, #8
   20526:	f7f3 fbdb 	bl	13ce0 <z_arm_irq_priority_set>
   2052a:	2008      	movs	r0, #8
   2052c:	f7f3 fbba 	bl	13ca4 <arch_irq_enable>
   20530:	4620      	mov	r0, r4
   20532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20536:	f7f4 be9b 	b.w	15270 <uarte_instance_init.isra.0>

0002053a <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2053a:	b510      	push	{r4, lr}
   2053c:	4604      	mov	r4, r0
   2053e:	2200      	movs	r2, #0
   20540:	2101      	movs	r1, #1
   20542:	200a      	movs	r0, #10
   20544:	f7f3 fbcc 	bl	13ce0 <z_arm_irq_priority_set>
   20548:	200a      	movs	r0, #10
   2054a:	f7f3 fbab 	bl	13ca4 <arch_irq_enable>
   2054e:	4620      	mov	r0, r4
   20550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20554:	f7f4 be8c 	b.w	15270 <uarte_instance_init.isra.0>

00020558 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   20558:	2000      	movs	r0, #0
   2055a:	4770      	bx	lr

0002055c <entropy_cc3xx_rng_get_entropy>:
{
   2055c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2055e:	460f      	mov	r7, r1
   20560:	4616      	mov	r6, r2
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   20562:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   20566:	2400      	movs	r4, #0
	int res = -EINVAL;
   20568:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   2056c:	42a6      	cmp	r6, r4
   2056e:	d801      	bhi.n	20574 <entropy_cc3xx_rng_get_entropy+0x18>
}
   20570:	b003      	add	sp, #12
   20572:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   20574:	1b33      	subs	r3, r6, r4
   20576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2057a:	bf38      	it	cc
   2057c:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   2057e:	aa01      	add	r2, sp, #4
   20580:	4629      	mov	r1, r5
   20582:	1938      	adds	r0, r7, r4
   20584:	f7ff fc8e 	bl	1fea4 <spm_request_random_number>
		if (olen != chunk_size) {
   20588:	9b01      	ldr	r3, [sp, #4]
   2058a:	42ab      	cmp	r3, r5
   2058c:	d103      	bne.n	20596 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (res != 0) {
   2058e:	2800      	cmp	r0, #0
   20590:	d1ee      	bne.n	20570 <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   20592:	442c      	add	r4, r5
   20594:	e7ea      	b.n	2056c <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   20596:	f06f 0015 	mvn.w	r0, #21
   2059a:	e7e9      	b.n	20570 <entropy_cc3xx_rng_get_entropy+0x14>

0002059c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2059c:	4770      	bx	lr

0002059e <sys_clock_cycle_get_32>:
{
   2059e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   205a0:	f7f4 ffa4 	bl	154ec <z_nrf_rtc_timer_read>
}
   205a4:	bd08      	pop	{r3, pc}

000205a6 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   205a6:	f001 be60 	b.w	2226a <z_impl_k_busy_wait>

000205aa <nrf_modem_os_errno_set>:
{
   205aa:	b510      	push	{r4, lr}
   205ac:	4604      	mov	r4, r0
	errno = err_code;
   205ae:	f7ff fcc9 	bl	1ff44 <__errno>
   205b2:	6004      	str	r4, [r0, #0]
}
   205b4:	bd10      	pop	{r4, pc}

000205b6 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   205b6:	f001 bbf6 	b.w	21da6 <k_is_in_isr>

000205ba <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   205ba:	f7fc b951 	b.w	1c860 <z_impl_k_sem_give>

000205be <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   205be:	1c4b      	adds	r3, r1, #1
{
   205c0:	b5d0      	push	{r4, r6, r7, lr}
   205c2:	4604      	mov	r4, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   205c4:	d01a      	beq.n	205fc <nrf_modem_os_sem_take+0x3e>
   205c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   205ca:	f240 36e7 	movw	r6, #999	; 0x3e7
   205ce:	2700      	movs	r7, #0
   205d0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   205d4:	fbc0 6701 	smlal	r6, r7, r0, r1
   205d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   205dc:	2300      	movs	r3, #0
   205de:	4630      	mov	r0, r6
   205e0:	4639      	mov	r1, r7
   205e2:	f7f0 fc5d 	bl	10ea0 <__aeabi_uldivmod>
   205e6:	4602      	mov	r2, r0
   205e8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   205ea:	4620      	mov	r0, r4
   205ec:	f7fc f95e 	bl	1c8ac <z_impl_k_sem_take>
	if (err == -EAGAIN) {
   205f0:	f110 0f0b 	cmn.w	r0, #11
}
   205f4:	bf0c      	ite	eq
   205f6:	2074      	moveq	r0, #116	; 0x74
   205f8:	2000      	movne	r0, #0
   205fa:	bdd0      	pop	{r4, r6, r7, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   205fc:	f04f 32ff 	mov.w	r2, #4294967295
   20600:	4613      	mov	r3, r2
   20602:	e7f2      	b.n	205ea <nrf_modem_os_sem_take+0x2c>

00020604 <read_task_create>:
{
   20604:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   20606:	201c      	movs	r0, #28
   20608:	2200      	movs	r2, #0
   2060a:	2106      	movs	r1, #6
   2060c:	f7f3 fb68 	bl	13ce0 <z_arm_irq_priority_set>
}
   20610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   20614:	201c      	movs	r0, #28
   20616:	f7f3 bb45 	b.w	13ca4 <arch_irq_enable>

0002061a <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   2061a:	2000      	movs	r0, #0
   2061c:	4770      	bx	lr

0002061e <z_to_nrf_flags>:
{
   2061e:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   20620:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   20624:	bf18      	it	ne
   20626:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   20628:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   2062a:	bf48      	it	mi
   2062c:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   20630:	069a      	lsls	r2, r3, #26
		nrf_flags |= NRF_MSG_TRUNC;
   20632:	bf48      	it	mi
   20634:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   20638:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   2063a:	bf48      	it	mi
   2063c:	f040 0010 	orrmi.w	r0, r0, #16
}
   20640:	4770      	bx	lr

00020642 <z_to_nrf_protocol>:
	switch (proto) {
   20642:	2811      	cmp	r0, #17
   20644:	d013      	beq.n	2066e <z_to_nrf_protocol+0x2c>
   20646:	dc06      	bgt.n	20656 <z_to_nrf_protocol+0x14>
   20648:	b1a8      	cbz	r0, 20676 <z_to_nrf_protocol+0x34>
		return NRF_IPPROTO_TCP;
   2064a:	2806      	cmp	r0, #6
   2064c:	bf14      	ite	ne
   2064e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   20652:	2001      	moveq	r0, #1
   20654:	4770      	bx	lr
	switch (proto) {
   20656:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2065a:	d00a      	beq.n	20672 <z_to_nrf_protocol+0x30>
   2065c:	f240 1311 	movw	r3, #273	; 0x111
		return NRF_SPROTO_DTLS1v2;
   20660:	4298      	cmp	r0, r3
   20662:	bf14      	ite	ne
   20664:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   20668:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   2066c:	4770      	bx	lr
	switch (proto) {
   2066e:	2002      	movs	r0, #2
   20670:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   20672:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   20676:	4770      	bx	lr

00020678 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   20678:	f7fc b876 	b.w	1c768 <z_impl_k_mutex_unlock>

0002067c <nrf91_socket_offload_getsockopt>:
{
   2067c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20680:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   20682:	2300      	movs	r3, #0
{
   20684:	b086      	sub	sp, #24
   20686:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2068a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2068e:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   20692:	2901      	cmp	r1, #1
{
   20694:	460e      	mov	r6, r1
   20696:	4615      	mov	r5, r2
	int sd = OBJ_TO_SD(obj);
   20698:	6807      	ldr	r7, [r0, #0]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2069a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2069c:	d002      	beq.n	206a4 <nrf91_socket_offload_getsockopt+0x28>
   2069e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   206a2:	d139      	bne.n	20718 <nrf91_socket_offload_getsockopt+0x9c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   206a4:	4629      	mov	r1, r5
   206a6:	4630      	mov	r0, r6
   206a8:	aa02      	add	r2, sp, #8
   206aa:	f7f5 fa8d 	bl	15bc8 <z_to_nrf_optname>
   206ae:	2800      	cmp	r0, #0
   206b0:	db32      	blt.n	20718 <nrf91_socket_offload_getsockopt+0x9c>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   206b2:	2e01      	cmp	r6, #1
   206b4:	d123      	bne.n	206fe <nrf91_socket_offload_getsockopt+0x82>
   206b6:	f1a5 0314 	sub.w	r3, r5, #20
   206ba:	2b01      	cmp	r3, #1
   206bc:	d81f      	bhi.n	206fe <nrf91_socket_offload_getsockopt+0x82>
		nrf_optlen = sizeof(struct nrf_timeval);
   206be:	2308      	movs	r3, #8
   206c0:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   206c2:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   206c4:	aa03      	add	r2, sp, #12
   206c6:	4638      	mov	r0, r7
   206c8:	9200      	str	r2, [sp, #0]
   206ca:	4631      	mov	r1, r6
   206cc:	9a02      	ldr	r2, [sp, #8]
   206ce:	f001 fa52 	bl	21b76 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   206d2:	4607      	mov	r7, r0
   206d4:	b978      	cbnz	r0, 206f6 <nrf91_socket_offload_getsockopt+0x7a>
   206d6:	b174      	cbz	r4, 206f6 <nrf91_socket_offload_getsockopt+0x7a>
		*optlen = nrf_optlen;
   206d8:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   206da:	2e01      	cmp	r6, #1
		*optlen = nrf_optlen;
   206dc:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   206e0:	d109      	bne.n	206f6 <nrf91_socket_offload_getsockopt+0x7a>
			if (optname == SO_ERROR) {
   206e2:	2d04      	cmp	r5, #4
   206e4:	d10d      	bne.n	20702 <nrf91_socket_offload_getsockopt+0x86>
				if (*(int *)optval != 0) {
   206e6:	6820      	ldr	r0, [r4, #0]
   206e8:	b128      	cbz	r0, 206f6 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_modem_os_errno_set(*(int *)optval);
   206ea:	f7ff ff5e 	bl	205aa <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   206ee:	f7ff fc29 	bl	1ff44 <__errno>
   206f2:	6803      	ldr	r3, [r0, #0]
   206f4:	6023      	str	r3, [r4, #0]
}
   206f6:	4638      	mov	r0, r7
   206f8:	b006      	add	sp, #24
   206fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   206fe:	4623      	mov	r3, r4
   20700:	e7e0      	b.n	206c4 <nrf91_socket_offload_getsockopt+0x48>
			} else if ((optname == SO_RCVTIMEO) ||
   20702:	3d14      	subs	r5, #20
   20704:	2d01      	cmp	r5, #1
   20706:	d8f6      	bhi.n	206f6 <nrf91_socket_offload_getsockopt+0x7a>
				((struct timeval *)optval)->tv_sec =
   20708:	9b04      	ldr	r3, [sp, #16]
   2070a:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   2070c:	9b05      	ldr	r3, [sp, #20]
   2070e:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   20710:	2308      	movs	r3, #8
   20712:	f8c8 3000 	str.w	r3, [r8]
   20716:	e7ee      	b.n	206f6 <nrf91_socket_offload_getsockopt+0x7a>
	errno = ENOPROTOOPT;
   20718:	f7ff fc14 	bl	1ff44 <__errno>
   2071c:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2071e:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   20722:	6003      	str	r3, [r0, #0]
	return retval;
   20724:	e7e7      	b.n	206f6 <nrf91_socket_offload_getsockopt+0x7a>

00020726 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   20726:	6800      	ldr	r0, [r0, #0]
   20728:	f001 b9d5 	b.w	21ad6 <nrf_listen>

0002072c <nrf91_socket_offload_freeaddrinfo>:
{
   2072c:	b538      	push	{r3, r4, r5, lr}
   2072e:	4604      	mov	r4, r0
	while (next != NULL) {
   20730:	b904      	cbnz	r4, 20734 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   20732:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   20734:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   20736:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   20738:	f001 ffe3 	bl	22702 <k_free>
		k_free(this);
   2073c:	4620      	mov	r0, r4
   2073e:	f001 ffe0 	bl	22702 <k_free>
		next = next->ai_next;
   20742:	462c      	mov	r4, r5
   20744:	e7f4      	b.n	20730 <nrf91_socket_offload_freeaddrinfo+0x4>

00020746 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   20746:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   20748:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2074a:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2074c:	4603      	mov	r3, r0
{
   2074e:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   20750:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20754:	f101 0420 	add.w	r4, r1, #32
   20758:	f101 0210 	add.w	r2, r1, #16
   2075c:	f852 5b04 	ldr.w	r5, [r2], #4
   20760:	42a2      	cmp	r2, r4
   20762:	f843 5b04 	str.w	r5, [r3], #4
   20766:	d1f9      	bne.n	2075c <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   20768:	6a0b      	ldr	r3, [r1, #32]
   2076a:	7503      	strb	r3, [r0, #20]
}
   2076c:	bd30      	pop	{r4, r5, pc}

0002076e <z_to_nrf_ipv6>:
{
   2076e:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   20770:	2124      	movs	r1, #36	; 0x24
   20772:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   20774:	8841      	ldrh	r1, [r0, #2]
{
   20776:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   20778:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2077a:	210a      	movs	r1, #10
{
   2077c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   2077e:	6059      	str	r1, [r3, #4]
   20780:	1d04      	adds	r4, r0, #4
   20782:	f103 0610 	add.w	r6, r3, #16
   20786:	f100 0714 	add.w	r7, r0, #20
   2078a:	4635      	mov	r5, r6
   2078c:	6820      	ldr	r0, [r4, #0]
   2078e:	6861      	ldr	r1, [r4, #4]
   20790:	3408      	adds	r4, #8
   20792:	c503      	stmia	r5!, {r0, r1}
   20794:	42bc      	cmp	r4, r7
   20796:	462e      	mov	r6, r5
   20798:	d1f7      	bne.n	2078a <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2079a:	7d12      	ldrb	r2, [r2, #20]
   2079c:	621a      	str	r2, [r3, #32]
}
   2079e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000207a0 <nrf91_socket_offload_sendto>:
{
   207a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   207a4:	b08d      	sub	sp, #52	; 0x34
   207a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   207a8:	460d      	mov	r5, r1
   207aa:	4616      	mov	r6, r2
   207ac:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   207ae:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   207b2:	b96c      	cbnz	r4, 207d0 <nrf91_socket_offload_sendto+0x30>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   207b4:	4618      	mov	r0, r3
   207b6:	f7ff ff32 	bl	2061e <z_to_nrf_flags>
   207ba:	4603      	mov	r3, r0
   207bc:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   207c0:	4632      	mov	r2, r6
   207c2:	4629      	mov	r1, r5
   207c4:	4640      	mov	r0, r8
   207c6:	f001 f93f 	bl	21a48 <nrf_sendto>
}
   207ca:	b00d      	add	sp, #52	; 0x34
   207cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   207d0:	8823      	ldrh	r3, [r4, #0]
   207d2:	2b01      	cmp	r3, #1
   207d4:	d113      	bne.n	207fe <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   207d6:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   207d8:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   207dc:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   207e0:	2302      	movs	r3, #2
   207e2:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   207e4:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   207e6:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   207e8:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   207ea:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   207ee:	f7ff ff16 	bl	2061e <z_to_nrf_flags>
   207f2:	aa03      	add	r2, sp, #12
   207f4:	4603      	mov	r3, r0
   207f6:	f8cd 9004 	str.w	r9, [sp, #4]
   207fa:	9200      	str	r2, [sp, #0]
   207fc:	e7e0      	b.n	207c0 <nrf91_socket_offload_sendto+0x20>
	} else if (to->sa_family == AF_INET6) {
   207fe:	2b02      	cmp	r3, #2
   20800:	d10d      	bne.n	2081e <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   20802:	f10d 090c 	add.w	r9, sp, #12
   20806:	4649      	mov	r1, r9
   20808:	4620      	mov	r0, r4
   2080a:	f7ff ffb0 	bl	2076e <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2080e:	4638      	mov	r0, r7
   20810:	f7ff ff05 	bl	2061e <z_to_nrf_flags>
   20814:	2224      	movs	r2, #36	; 0x24
   20816:	4603      	mov	r3, r0
   20818:	e9cd 9200 	strd	r9, r2, [sp]
   2081c:	e7d0      	b.n	207c0 <nrf91_socket_offload_sendto+0x20>
	errno = ENOTSUP;
   2081e:	f7ff fb91 	bl	1ff44 <__errno>
   20822:	2386      	movs	r3, #134	; 0x86
   20824:	6003      	str	r3, [r0, #0]
	return retval;
   20826:	f04f 30ff 	mov.w	r0, #4294967295
   2082a:	e7ce      	b.n	207ca <nrf91_socket_offload_sendto+0x2a>

0002082c <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2082c:	2300      	movs	r3, #0
{
   2082e:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   20830:	e9cd 3300 	strd	r3, r3, [sp]
   20834:	f7ff ffb4 	bl	207a0 <nrf91_socket_offload_sendto>
}
   20838:	b003      	add	sp, #12
   2083a:	f85d fb04 	ldr.w	pc, [sp], #4

0002083e <nrf91_socket_offload_connect>:
{
   2083e:	4603      	mov	r3, r0
   20840:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   20842:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   20844:	880b      	ldrh	r3, [r1, #0]
{
   20846:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   20848:	2b01      	cmp	r3, #1
{
   2084a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2084c:	d10f      	bne.n	2086e <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2084e:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   20850:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   20852:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   20856:	2302      	movs	r3, #2
   20858:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2085a:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2085c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   20860:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   20862:	4620      	mov	r0, r4
   20864:	a901      	add	r1, sp, #4
   20866:	f001 f925 	bl	21ab4 <nrf_connect>
}
   2086a:	b00a      	add	sp, #40	; 0x28
   2086c:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2086e:	2b02      	cmp	r3, #2
   20870:	d104      	bne.n	2087c <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   20872:	a901      	add	r1, sp, #4
   20874:	f7ff ff7b 	bl	2076e <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   20878:	2224      	movs	r2, #36	; 0x24
   2087a:	e7f2      	b.n	20862 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2087c:	4620      	mov	r0, r4
   2087e:	f001 f919 	bl	21ab4 <nrf_connect>
		if (retval < 0) {
   20882:	2800      	cmp	r0, #0
   20884:	daf1      	bge.n	2086a <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   20886:	f7ff fb5d 	bl	1ff44 <__errno>
   2088a:	2386      	movs	r3, #134	; 0x86
   2088c:	6003      	str	r3, [r0, #0]
   2088e:	f04f 30ff 	mov.w	r0, #4294967295
   20892:	e7ea      	b.n	2086a <nrf91_socket_offload_connect+0x2c>

00020894 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   20894:	f7fb beea 	b.w	1c66c <z_impl_k_mutex_lock>

00020898 <nrf91_socket_offload_recvfrom>:
{
   20898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2089c:	4698      	mov	r8, r3
   2089e:	b08d      	sub	sp, #52	; 0x34
   208a0:	4606      	mov	r6, r0
   208a2:	e9dd 5916 	ldrd	r5, r9, [sp, #88]	; 0x58
	k_mutex_unlock(ctx->lock);
   208a6:	6840      	ldr	r0, [r0, #4]
{
   208a8:	460c      	mov	r4, r1
   208aa:	4617      	mov	r7, r2
	k_mutex_unlock(ctx->lock);
   208ac:	f7ff fee4 	bl	20678 <k_mutex_unlock>
	if (from == NULL) {
   208b0:	4640      	mov	r0, r8
   208b2:	f7ff feb4 	bl	2061e <z_to_nrf_flags>
   208b6:	4680      	mov	r8, r0
   208b8:	b9a5      	cbnz	r5, 208e4 <nrf91_socket_offload_recvfrom+0x4c>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   208ba:	4603      	mov	r3, r0
   208bc:	4621      	mov	r1, r4
   208be:	463a      	mov	r2, r7
   208c0:	e9cd 5500 	strd	r5, r5, [sp]
   208c4:	6830      	ldr	r0, [r6, #0]
   208c6:	f001 f8da 	bl	21a7e <nrf_recvfrom>
   208ca:	4604      	mov	r4, r0
	if (ctx->lock) {
   208cc:	6870      	ldr	r0, [r6, #4]
   208ce:	b128      	cbz	r0, 208dc <nrf91_socket_offload_recvfrom+0x44>
		k_mutex_lock(ctx->lock, K_FOREVER);
   208d0:	f04f 32ff 	mov.w	r2, #4294967295
   208d4:	f04f 33ff 	mov.w	r3, #4294967295
   208d8:	f7ff ffdc 	bl	20894 <k_mutex_lock.constprop.0>
}
   208dc:	4620      	mov	r0, r4
   208de:	b00d      	add	sp, #52	; 0x34
   208e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   208e4:	f04f 0b24 	mov.w	fp, #36	; 0x24
   208e8:	f10d 0a0c 	add.w	sl, sp, #12
   208ec:	465a      	mov	r2, fp
   208ee:	2100      	movs	r1, #0
   208f0:	4650      	mov	r0, sl
   208f2:	f001 ff50 	bl	22796 <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   208f6:	ab02      	add	r3, sp, #8
   208f8:	4621      	mov	r1, r4
   208fa:	e9cd a300 	strd	sl, r3, [sp]
   208fe:	463a      	mov	r2, r7
   20900:	4643      	mov	r3, r8
   20902:	6830      	ldr	r0, [r6, #0]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   20904:	f8cd b008 	str.w	fp, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   20908:	f001 f8b9 	bl	21a7e <nrf_recvfrom>
		if (retval < 0) {
   2090c:	1e04      	subs	r4, r0, #0
   2090e:	dbdd      	blt.n	208cc <nrf91_socket_offload_recvfrom+0x34>
		if (cliaddr->sa_family == NRF_AF_INET) {
   20910:	9b04      	ldr	r3, [sp, #16]
   20912:	2b02      	cmp	r3, #2
   20914:	d10a      	bne.n	2092c <nrf91_socket_offload_recvfrom+0x94>
	ptr->sin_port = nrf_in->sin_port;
   20916:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2091a:	806b      	strh	r3, [r5, #2]
	ptr->sin_family = AF_INET;
   2091c:	2301      	movs	r3, #1
   2091e:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   20920:	9b06      	ldr	r3, [sp, #24]
   20922:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   20924:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   20926:	f8c9 3000 	str.w	r3, [r9]
   2092a:	e7cf      	b.n	208cc <nrf91_socket_offload_recvfrom+0x34>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2092c:	2b0a      	cmp	r3, #10
   2092e:	d1cd      	bne.n	208cc <nrf91_socket_offload_recvfrom+0x34>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   20930:	4651      	mov	r1, sl
   20932:	4628      	mov	r0, r5
   20934:	f7ff ff07 	bl	20746 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   20938:	2318      	movs	r3, #24
   2093a:	e7f4      	b.n	20926 <nrf91_socket_offload_recvfrom+0x8e>

0002093c <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2093c:	2300      	movs	r3, #0
{
   2093e:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   20940:	e9cd 3300 	strd	r3, r3, [sp]
   20944:	f7ff ffa8 	bl	20898 <nrf91_socket_offload_recvfrom>
}
   20948:	b003      	add	sp, #12
   2094a:	f85d fb04 	ldr.w	pc, [sp], #4

0002094e <nrf91_socket_offload_close>:
{
   2094e:	b538      	push	{r3, r4, r5, lr}
   20950:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   20952:	6800      	ldr	r0, [r0, #0]
   20954:	f001 f86b 	bl	21a2e <nrf_close>
	if (retval == 0) {
   20958:	4604      	mov	r4, r0
   2095a:	b910      	cbnz	r0, 20962 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   2095c:	4628      	mov	r0, r5
   2095e:	f7f5 fc31 	bl	161c4 <release_ctx>
}
   20962:	4620      	mov	r0, r4
   20964:	bd38      	pop	{r3, r4, r5, pc}

00020966 <nrf91_socket_offload_setsockopt>:
{
   20966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   2096a:	2901      	cmp	r1, #1
{
   2096c:	b086      	sub	sp, #24
   2096e:	460c      	mov	r4, r1
   20970:	4615      	mov	r5, r2
   20972:	461e      	mov	r6, r3
   20974:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   20976:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   2097a:	d002      	beq.n	20982 <nrf91_socket_offload_setsockopt+0x1c>
   2097c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   20980:	d122      	bne.n	209c8 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   20982:	4629      	mov	r1, r5
   20984:	4620      	mov	r0, r4
   20986:	aa03      	add	r2, sp, #12
   20988:	f7f5 f91e 	bl	15bc8 <z_to_nrf_optname>
   2098c:	2800      	cmp	r0, #0
   2098e:	db1b      	blt.n	209c8 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   20990:	2c01      	cmp	r4, #1
   20992:	d112      	bne.n	209ba <nrf91_socket_offload_setsockopt+0x54>
   20994:	3d14      	subs	r5, #20
   20996:	2d01      	cmp	r5, #1
   20998:	d805      	bhi.n	209a6 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(struct nrf_timeval);
   2099a:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2099c:	6833      	ldr	r3, [r6, #0]
   2099e:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   209a0:	6873      	ldr	r3, [r6, #4]
		nrf_optval = &nrf_timeo;
   209a2:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   209a4:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   209a6:	4633      	mov	r3, r6
   209a8:	4621      	mov	r1, r4
   209aa:	4640      	mov	r0, r8
   209ac:	9a03      	ldr	r2, [sp, #12]
   209ae:	9700      	str	r7, [sp, #0]
   209b0:	f001 f8c6 	bl	21b40 <nrf_setsockopt>
}
   209b4:	b006      	add	sp, #24
   209b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   209ba:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   209be:	d1f2      	bne.n	209a6 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   209c0:	2d0a      	cmp	r5, #10
   209c2:	bf08      	it	eq
   209c4:	2701      	moveq	r7, #1
   209c6:	e7ee      	b.n	209a6 <nrf91_socket_offload_setsockopt+0x40>
	errno = ENOPROTOOPT;
   209c8:	f7ff fabc 	bl	1ff44 <__errno>
   209cc:	236d      	movs	r3, #109	; 0x6d
   209ce:	6003      	str	r3, [r0, #0]
   209d0:	f04f 30ff 	mov.w	r0, #4294967295
   209d4:	e7ee      	b.n	209b4 <nrf91_socket_offload_setsockopt+0x4e>

000209d6 <nrf91_socket_offload_bind>:
{
   209d6:	4603      	mov	r3, r0
   209d8:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   209da:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   209dc:	880b      	ldrh	r3, [r1, #0]
{
   209de:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   209e0:	2b01      	cmp	r3, #1
{
   209e2:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   209e4:	d10f      	bne.n	20a06 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   209e6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   209e8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   209ea:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   209ee:	2302      	movs	r3, #2
   209f0:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   209f2:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   209f4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   209f8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   209fa:	4620      	mov	r0, r4
   209fc:	a901      	add	r1, sp, #4
   209fe:	f001 f88e 	bl	21b1e <nrf_bind>
}
   20a02:	b00a      	add	sp, #40	; 0x28
   20a04:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   20a06:	2b02      	cmp	r3, #2
   20a08:	d104      	bne.n	20a14 <nrf91_socket_offload_bind+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   20a0a:	a901      	add	r1, sp, #4
   20a0c:	f7ff feaf 	bl	2076e <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   20a10:	2224      	movs	r2, #36	; 0x24
   20a12:	e7f2      	b.n	209fa <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   20a14:	f7ff fa96 	bl	1ff44 <__errno>
   20a18:	2386      	movs	r3, #134	; 0x86
   20a1a:	6003      	str	r3, [r0, #0]
   20a1c:	f04f 30ff 	mov.w	r0, #4294967295
   20a20:	e7ef      	b.n	20a02 <nrf91_socket_offload_bind+0x2c>

00020a22 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable != NULL) {
   20a22:	6883      	ldr	r3, [r0, #8]
   20a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20a26:	b103      	cbz	r3, 20a2a <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   20a28:	4718      	bx	r3
}
   20a2a:	4770      	bx	lr

00020a2c <response_handler>:
	write_uart_string(response);
   20a2c:	f7f5 bd52 	b.w	164d4 <write_uart_string>

00020a30 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   20a30:	280d      	cmp	r0, #13
   20a32:	d004      	beq.n	20a3e <is_lfcr+0xe>
   20a34:	f1a0 030a 	sub.w	r3, r0, #10
   20a38:	4258      	negs	r0, r3
   20a3a:	4158      	adcs	r0, r3
   20a3c:	4770      	bx	lr
		return true;
   20a3e:	2001      	movs	r0, #1
}
   20a40:	4770      	bx	lr

00020a42 <skip_command_prefix>:
{
   20a42:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   20a44:	6801      	ldr	r1, [r0, #0]
{
   20a46:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   20a48:	1c8b      	adds	r3, r1, #2
   20a4a:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   20a4c:	788c      	ldrb	r4, [r1, #2]
   20a4e:	4620      	mov	r0, r4
   20a50:	f7ff ffee 	bl	20a30 <is_lfcr>
   20a54:	b910      	cbnz	r0, 20a5c <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   20a56:	b10c      	cbz	r4, 20a5c <skip_command_prefix+0x1a>
	(*cmd)++;
   20a58:	3103      	adds	r1, #3
   20a5a:	6011      	str	r1, [r2, #0]
}
   20a5c:	bd10      	pop	{r4, pc}

00020a5e <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   20a5e:	6813      	ldr	r3, [r2, #0]
   20a60:	f7f6 b8d6 	b.w	16c10 <at_parser_max_params_from_str>

00020a64 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   20a64:	6803      	ldr	r3, [r0, #0]
   20a66:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   20a68:	bf86      	itte	hi
   20a6a:	6840      	ldrhi	r0, [r0, #4]
   20a6c:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   20a70:	2000      	movls	r0, #0
}
   20a72:	4770      	bx	lr

00020a74 <at_param_clear>:
{
   20a74:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   20a76:	7803      	ldrb	r3, [r0, #0]
{
   20a78:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   20a7a:	3b02      	subs	r3, #2
   20a7c:	2b01      	cmp	r3, #1
   20a7e:	d802      	bhi.n	20a86 <at_param_clear+0x12>
		k_free(param->value.str_val);
   20a80:	6880      	ldr	r0, [r0, #8]
   20a82:	f001 fe3e 	bl	22702 <k_free>
	param->value.int_val = 0;
   20a86:	2200      	movs	r2, #0
   20a88:	2300      	movs	r3, #0
   20a8a:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   20a8e:	bd10      	pop	{r4, pc}

00020a90 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   20a90:	b538      	push	{r3, r4, r5, lr}
   20a92:	460d      	mov	r5, r1
	if (list == NULL) {
   20a94:	4604      	mov	r4, r0
   20a96:	b140      	cbz	r0, 20aaa <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   20a98:	2110      	movs	r1, #16
   20a9a:	4628      	mov	r0, r5
   20a9c:	f001 fe3c 	bl	22718 <k_calloc>
   20aa0:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   20aa2:	b128      	cbz	r0, 20ab0 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   20aa4:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   20aa6:	6025      	str	r5, [r4, #0]
}
   20aa8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20aaa:	f06f 0015 	mvn.w	r0, #21
   20aae:	e7fb      	b.n	20aa8 <at_params_list_init+0x18>
		return -ENOMEM;
   20ab0:	f06f 000b 	mvn.w	r0, #11
   20ab4:	e7f8      	b.n	20aa8 <at_params_list_init+0x18>

00020ab6 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   20ab6:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   20ab8:	4604      	mov	r4, r0
   20aba:	b128      	cbz	r0, 20ac8 <at_params_list_clear+0x12>
   20abc:	6843      	ldr	r3, [r0, #4]
   20abe:	b11b      	cbz	r3, 20ac8 <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   20ac0:	2500      	movs	r5, #0
   20ac2:	6823      	ldr	r3, [r4, #0]
   20ac4:	429d      	cmp	r5, r3
   20ac6:	d300      	bcc.n	20aca <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   20ac8:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   20aca:	6866      	ldr	r6, [r4, #4]
   20acc:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   20ad0:	4630      	mov	r0, r6
   20ad2:	f7ff ffcf 	bl	20a74 <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   20ad6:	2210      	movs	r2, #16
   20ad8:	2100      	movs	r1, #0
   20ada:	4630      	mov	r0, r6
   20adc:	f001 fe5b 	bl	22796 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   20ae0:	3501      	adds	r5, #1
   20ae2:	e7ee      	b.n	20ac2 <at_params_list_clear+0xc>

00020ae4 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   20ae4:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   20ae6:	4604      	mov	r4, r0
   20ae8:	b148      	cbz	r0, 20afe <at_params_list_free+0x1a>
   20aea:	6843      	ldr	r3, [r0, #4]
   20aec:	b13b      	cbz	r3, 20afe <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   20aee:	2500      	movs	r5, #0
	at_params_list_clear(list);
   20af0:	f7ff ffe1 	bl	20ab6 <at_params_list_clear>
	k_free(list->params);
   20af4:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   20af6:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   20af8:	f001 fe03 	bl	22702 <k_free>
	list->params = NULL;
   20afc:	6065      	str	r5, [r4, #4]
}
   20afe:	bd38      	pop	{r3, r4, r5, pc}

00020b00 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   20b00:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   20b02:	b178      	cbz	r0, 20b24 <at_params_empty_put+0x24>
   20b04:	6843      	ldr	r3, [r0, #4]
   20b06:	b16b      	cbz	r3, 20b24 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20b08:	f7ff ffac 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20b0c:	4604      	mov	r4, r0
   20b0e:	b148      	cbz	r0, 20b24 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   20b10:	f7ff ffb0 	bl	20a74 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   20b14:	2304      	movs	r3, #4
	param->value.int_val = 0;
   20b16:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   20b18:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   20b1a:	2300      	movs	r3, #0

	return 0;
   20b1c:	2000      	movs	r0, #0
	param->value.int_val = 0;
   20b1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   20b22:	bd10      	pop	{r4, pc}
		return -EINVAL;
   20b24:	f06f 0015 	mvn.w	r0, #21
   20b28:	e7fb      	b.n	20b22 <at_params_empty_put+0x22>

00020b2a <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   20b2a:	b570      	push	{r4, r5, r6, lr}
   20b2c:	4616      	mov	r6, r2
   20b2e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   20b30:	b168      	cbz	r0, 20b4e <at_params_int_put+0x24>
   20b32:	6843      	ldr	r3, [r0, #4]
   20b34:	b15b      	cbz	r3, 20b4e <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20b36:	f7ff ff95 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20b3a:	4604      	mov	r4, r0
   20b3c:	b138      	cbz	r0, 20b4e <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   20b3e:	f7ff ff99 	bl	20a74 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   20b42:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   20b44:	2000      	movs	r0, #0
	param->value.int_val = value;
   20b46:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   20b4a:	7023      	strb	r3, [r4, #0]
}
   20b4c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20b4e:	f06f 0015 	mvn.w	r0, #21
   20b52:	e7fb      	b.n	20b4c <at_params_int_put+0x22>

00020b54 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   20b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b56:	4617      	mov	r7, r2
   20b58:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   20b5a:	b1c0      	cbz	r0, 20b8e <at_params_string_put+0x3a>
   20b5c:	6843      	ldr	r3, [r0, #4]
   20b5e:	b1b3      	cbz	r3, 20b8e <at_params_string_put+0x3a>
   20b60:	b1aa      	cbz	r2, 20b8e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20b62:	f7ff ff7f 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20b66:	4604      	mov	r4, r0
   20b68:	b188      	cbz	r0, 20b8e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   20b6a:	1c68      	adds	r0, r5, #1
   20b6c:	f001 fdd0 	bl	22710 <k_malloc>

	if (param_value == NULL) {
   20b70:	4606      	mov	r6, r0
   20b72:	b178      	cbz	r0, 20b94 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20b74:	462a      	mov	r2, r5
   20b76:	4639      	mov	r1, r7
   20b78:	f001 fe00 	bl	2277c <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   20b7c:	4620      	mov	r0, r4
   20b7e:	f7ff ff79 	bl	20a74 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   20b82:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   20b84:	2000      	movs	r0, #0
	param->size = str_len;
   20b86:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   20b88:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   20b8a:	60a6      	str	r6, [r4, #8]
}
   20b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   20b8e:	f06f 0015 	mvn.w	r0, #21
   20b92:	e7fb      	b.n	20b8c <at_params_string_put+0x38>
		return -ENOMEM;
   20b94:	f06f 000b 	mvn.w	r0, #11
   20b98:	e7f8      	b.n	20b8c <at_params_string_put+0x38>

00020b9a <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   20b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b9c:	4617      	mov	r7, r2
   20b9e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   20ba0:	b1c0      	cbz	r0, 20bd4 <at_params_array_put+0x3a>
   20ba2:	6843      	ldr	r3, [r0, #4]
   20ba4:	b1b3      	cbz	r3, 20bd4 <at_params_array_put+0x3a>
   20ba6:	b1aa      	cbz	r2, 20bd4 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20ba8:	f7ff ff5c 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20bac:	4604      	mov	r4, r0
   20bae:	b188      	cbz	r0, 20bd4 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   20bb0:	4628      	mov	r0, r5
   20bb2:	f001 fdad 	bl	22710 <k_malloc>

	if (param_value == NULL) {
   20bb6:	4606      	mov	r6, r0
   20bb8:	b178      	cbz	r0, 20bda <at_params_array_put+0x40>
   20bba:	462a      	mov	r2, r5
   20bbc:	4639      	mov	r1, r7
   20bbe:	f001 fddd 	bl	2277c <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   20bc2:	4620      	mov	r0, r4
   20bc4:	f7ff ff56 	bl	20a74 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   20bc8:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   20bca:	2000      	movs	r0, #0
	param->size = array_len;
   20bcc:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   20bce:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   20bd0:	60a6      	str	r6, [r4, #8]
}
   20bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   20bd4:	f06f 0015 	mvn.w	r0, #21
   20bd8:	e7fb      	b.n	20bd2 <at_params_array_put+0x38>
		return -ENOMEM;
   20bda:	f06f 000b 	mvn.w	r0, #11
   20bde:	e7f8      	b.n	20bd2 <at_params_array_put+0x38>

00020be0 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   20be0:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   20be2:	b1b0      	cbz	r0, 20c12 <at_params_short_get+0x32>
   20be4:	6843      	ldr	r3, [r0, #4]
   20be6:	b1a3      	cbz	r3, 20c12 <at_params_short_get+0x32>
   20be8:	b19a      	cbz	r2, 20c12 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20bea:	f7ff ff3b 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20bee:	b180      	cbz	r0, 20c12 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   20bf0:	7803      	ldrb	r3, [r0, #0]
   20bf2:	2b01      	cmp	r3, #1
   20bf4:	d10d      	bne.n	20c12 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   20bf6:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   20bfa:	f513 4400 	adds.w	r4, r3, #32768	; 0x8000
   20bfe:	f141 0500 	adc.w	r5, r1, #0
   20c02:	2d00      	cmp	r5, #0
   20c04:	bf08      	it	eq
   20c06:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
   20c0a:	d202      	bcs.n	20c12 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   20c0c:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   20c0e:	8013      	strh	r3, [r2, #0]
}
   20c10:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20c12:	f06f 0015 	mvn.w	r0, #21
   20c16:	e7fb      	b.n	20c10 <at_params_short_get+0x30>

00020c18 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   20c18:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   20c1a:	b190      	cbz	r0, 20c42 <at_params_unsigned_short_get+0x2a>
   20c1c:	6843      	ldr	r3, [r0, #4]
   20c1e:	b183      	cbz	r3, 20c42 <at_params_unsigned_short_get+0x2a>
   20c20:	b17a      	cbz	r2, 20c42 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20c22:	f7ff ff1f 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20c26:	b160      	cbz	r0, 20c42 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   20c28:	7803      	ldrb	r3, [r0, #0]
   20c2a:	2b01      	cmp	r3, #1
   20c2c:	d109      	bne.n	20c42 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   20c2e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   20c32:	2900      	cmp	r1, #0
   20c34:	bf08      	it	eq
   20c36:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   20c3a:	d202      	bcs.n	20c42 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
   20c3c:	8010      	strh	r0, [r2, #0]
	return 0;
   20c3e:	2000      	movs	r0, #0
}
   20c40:	bd08      	pop	{r3, pc}
		return -EINVAL;
   20c42:	f06f 0015 	mvn.w	r0, #21
   20c46:	e7fb      	b.n	20c40 <at_params_unsigned_short_get+0x28>

00020c48 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   20c48:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   20c4a:	b1a8      	cbz	r0, 20c78 <at_params_int_get+0x30>
   20c4c:	6843      	ldr	r3, [r0, #4]
   20c4e:	b19b      	cbz	r3, 20c78 <at_params_int_get+0x30>
   20c50:	b192      	cbz	r2, 20c78 <at_params_int_get+0x30>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20c52:	f7ff ff07 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20c56:	b178      	cbz	r0, 20c78 <at_params_int_get+0x30>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   20c58:	7803      	ldrb	r3, [r0, #0]
   20c5a:	2b01      	cmp	r3, #1
   20c5c:	d10c      	bne.n	20c78 <at_params_int_get+0x30>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   20c5e:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   20c62:	f113 4400 	adds.w	r4, r3, #2147483648	; 0x80000000
   20c66:	f141 0500 	adc.w	r5, r1, #0
   20c6a:	2d01      	cmp	r5, #1
   20c6c:	bf08      	it	eq
   20c6e:	2c00      	cmpeq	r4, #0
   20c70:	d202      	bcs.n	20c78 <at_params_int_get+0x30>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   20c72:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   20c74:	6013      	str	r3, [r2, #0]
}
   20c76:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20c78:	f06f 0015 	mvn.w	r0, #21
   20c7c:	e7fb      	b.n	20c76 <at_params_int_get+0x2e>

00020c7e <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   20c7e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   20c80:	b170      	cbz	r0, 20ca0 <at_params_int64_get+0x22>
   20c82:	6843      	ldr	r3, [r0, #4]
   20c84:	b163      	cbz	r3, 20ca0 <at_params_int64_get+0x22>
   20c86:	b15a      	cbz	r2, 20ca0 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20c88:	f7ff feec 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20c8c:	b140      	cbz	r0, 20ca0 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   20c8e:	7803      	ldrb	r3, [r0, #0]
   20c90:	2b01      	cmp	r3, #1
   20c92:	d105      	bne.n	20ca0 <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   20c94:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   20c98:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   20c9c:	2000      	movs	r0, #0
}
   20c9e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   20ca0:	f06f 0015 	mvn.w	r0, #21
   20ca4:	e7fb      	b.n	20c9e <at_params_int64_get+0x20>

00020ca6 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   20ca6:	b570      	push	{r4, r5, r6, lr}
   20ca8:	4615      	mov	r5, r2
   20caa:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   20cac:	b1a8      	cbz	r0, 20cda <at_params_string_get+0x34>
   20cae:	6843      	ldr	r3, [r0, #4]
   20cb0:	b19b      	cbz	r3, 20cda <at_params_string_get+0x34>
   20cb2:	b192      	cbz	r2, 20cda <at_params_string_get+0x34>
	    value == NULL || len == NULL) {
   20cb4:	b18c      	cbz	r4, 20cda <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20cb6:	f7ff fed5 	bl	20a64 <at_params_get>

	if (param == NULL) {
   20cba:	b170      	cbz	r0, 20cda <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   20cbc:	7803      	ldrb	r3, [r0, #0]
   20cbe:	2b02      	cmp	r3, #2
   20cc0:	d10b      	bne.n	20cda <at_params_string_get+0x34>
		return param->size;
   20cc2:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   20cc4:	6823      	ldr	r3, [r4, #0]
   20cc6:	42b3      	cmp	r3, r6
   20cc8:	d30a      	bcc.n	20ce0 <at_params_string_get+0x3a>
   20cca:	6881      	ldr	r1, [r0, #8]
   20ccc:	4632      	mov	r2, r6
   20cce:	4628      	mov	r0, r5
   20cd0:	f001 fd54 	bl	2277c <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   20cd4:	2000      	movs	r0, #0
	*len = param_len;
   20cd6:	6026      	str	r6, [r4, #0]
}
   20cd8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20cda:	f06f 0015 	mvn.w	r0, #21
   20cde:	e7fb      	b.n	20cd8 <at_params_string_get+0x32>
		return -ENOMEM;
   20ce0:	f06f 000b 	mvn.w	r0, #11
   20ce4:	e7f8      	b.n	20cd8 <at_params_string_get+0x32>

00020ce6 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   20ce6:	4602      	mov	r2, r0
{
   20ce8:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   20cea:	b170      	cbz	r0, 20d0a <at_params_valid_count_get+0x24>
   20cec:	6840      	ldr	r0, [r0, #4]
   20cee:	b160      	cbz	r0, 20d0a <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   20cf0:	6811      	ldr	r1, [r2, #0]
   20cf2:	b141      	cbz	r1, 20d06 <at_params_valid_count_get+0x20>
   20cf4:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   20cf6:	7803      	ldrb	r3, [r0, #0]
   20cf8:	b12b      	cbz	r3, 20d06 <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   20cfa:	4610      	mov	r0, r2
		valid_i += 1;
   20cfc:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   20cfe:	f7ff feb1 	bl	20a64 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   20d02:	2800      	cmp	r0, #0
   20d04:	d1f7      	bne.n	20cf6 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   20d06:	4608      	mov	r0, r1
   20d08:	bd08      	pop	{r3, pc}
		return -EINVAL;
   20d0a:	f06f 0115 	mvn.w	r1, #21
   20d0e:	e7fa      	b.n	20d06 <at_params_valid_count_get+0x20>

00020d10 <lte_lc_init>:
{
   20d10:	b508      	push	{r3, lr}
	int err = init_and_config();
   20d12:	f7f6 fcaf 	bl	17674 <init_and_config>
	return err ? -EFAULT : 0;
   20d16:	2800      	cmp	r0, #0
}
   20d18:	bf18      	it	ne
   20d1a:	f06f 000d 	mvnne.w	r0, #13
   20d1e:	bd08      	pop	{r3, pc}

00020d20 <lte_lc_connect>:
	return connect_lte(true);
   20d20:	2001      	movs	r0, #1
   20d22:	f7f6 bd7f 	b.w	17824 <connect_lte>

00020d26 <init_and_connect>:
{
   20d26:	b508      	push	{r3, lr}
	err = lte_lc_init();
   20d28:	f7ff fff2 	bl	20d10 <lte_lc_init>
	if (err) {
   20d2c:	b920      	cbnz	r0, 20d38 <init_and_connect+0x12>
}
   20d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(true);
   20d32:	2001      	movs	r0, #1
   20d34:	f7f6 bd76 	b.w	17824 <connect_lte>
}
   20d38:	bd08      	pop	{r3, pc}

00020d3a <string_to_int>:
{
   20d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20d3c:	460c      	mov	r4, r1
   20d3e:	4605      	mov	r5, r0
   20d40:	4616      	mov	r6, r2
	errno = 0;
   20d42:	f7ff f8ff 	bl	1ff44 <__errno>
   20d46:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   20d48:	4622      	mov	r2, r4
	errno = 0;
   20d4a:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   20d4c:	a901      	add	r1, sp, #4
   20d4e:	4628      	mov	r0, r5
   20d50:	f7fc ff78 	bl	1dc44 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   20d54:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   20d56:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   20d58:	42ab      	cmp	r3, r5
   20d5a:	d103      	bne.n	20d64 <string_to_int+0x2a>
		return -ENODATA;
   20d5c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   20d60:	b002      	add	sp, #8
   20d62:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   20d64:	781b      	ldrb	r3, [r3, #0]
   20d66:	2b00      	cmp	r3, #0
   20d68:	d1f8      	bne.n	20d5c <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   20d6a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   20d6e:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   20d70:	3303      	adds	r3, #3
   20d72:	d802      	bhi.n	20d7a <string_to_int+0x40>
	return 0;
   20d74:	2000      	movs	r0, #0
	*output = temp;
   20d76:	6034      	str	r4, [r6, #0]
	return 0;
   20d78:	e7f2      	b.n	20d60 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   20d7a:	f7ff f8e3 	bl	1ff44 <__errno>
   20d7e:	6803      	ldr	r3, [r0, #0]
   20d80:	2b22      	cmp	r3, #34	; 0x22
   20d82:	d1f7      	bne.n	20d74 <string_to_int+0x3a>
   20d84:	e7ea      	b.n	20d5c <string_to_int+0x22>

00020d86 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   20d86:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   20d88:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   20d8a:	b087      	sub	sp, #28
   20d8c:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   20d8e:	ab01      	add	r3, sp, #4
   20d90:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   20d92:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   20d94:	f7ff ff87 	bl	20ca6 <at_params_string_get>
	if (err) {
   20d98:	b968      	cbnz	r0, 20db6 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   20d9a:	9b01      	ldr	r3, [sp, #4]
   20d9c:	aa06      	add	r2, sp, #24
   20d9e:	4413      	add	r3, r2
   20da0:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   20da4:	4622      	mov	r2, r4
   20da6:	4629      	mov	r1, r5
   20da8:	a802      	add	r0, sp, #8
   20daa:	f7ff ffc6 	bl	20d3a <string_to_int>
   20dae:	2800      	cmp	r0, #0
		return -ENODATA;
   20db0:	bf18      	it	ne
   20db2:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   20db6:	b007      	add	sp, #28
   20db8:	bd30      	pop	{r4, r5, pc}

00020dba <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   20dba:	b508      	push	{r3, lr}
	date_time_core_init();
   20dbc:	f7f7 fb9c 	bl	184f8 <date_time_core_init>

	return 0;
}
   20dc0:	2000      	movs	r0, #0
   20dc2:	bd08      	pop	{r3, pc}

00020dc4 <date_time_is_valid>:
	return date_time_core_is_valid();
   20dc4:	f7f7 bbd2 	b.w	1856c <date_time_core_is_valid>

00020dc8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   20dc8:	4700      	bx	r0

00020dca <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   20dca:	f001 ba4e 	b.w	2226a <z_impl_k_busy_wait>

00020dce <nrfx_clock_enable>:
{
   20dce:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   20dd0:	2005      	movs	r0, #5
   20dd2:	f7f2 ff77 	bl	13cc4 <arch_irq_is_enabled>
   20dd6:	b920      	cbnz	r0, 20de2 <nrfx_clock_enable+0x14>
}
   20dd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   20ddc:	2005      	movs	r0, #5
   20dde:	f7f2 bf61 	b.w	13ca4 <arch_irq_enable>
   20de2:	bd08      	pop	{r3, pc}

00020de4 <rpc_handle_ctrl_message>:
   20de4:	2902      	cmp	r1, #2
   20de6:	b510      	push	{r4, lr}
   20de8:	4604      	mov	r4, r0
   20dea:	d005      	beq.n	20df8 <rpc_handle_ctrl_message+0x14>
   20dec:	2904      	cmp	r1, #4
   20dee:	d001      	beq.n	20df4 <rpc_handle_ctrl_message+0x10>
   20df0:	2901      	cmp	r1, #1
   20df2:	d107      	bne.n	20e04 <rpc_handle_ctrl_message+0x20>
   20df4:	2000      	movs	r0, #0
   20df6:	bd10      	pop	{r4, pc}
   20df8:	6880      	ldr	r0, [r0, #8]
   20dfa:	2800      	cmp	r0, #0
   20dfc:	d0fa      	beq.n	20df4 <rpc_handle_ctrl_message+0x10>
   20dfe:	f000 f833 	bl	20e68 <rpc_transport_local_data_free>
   20e02:	e7f7      	b.n	20df4 <rpc_handle_ctrl_message+0x10>
   20e04:	6880      	ldr	r0, [r0, #8]
   20e06:	b108      	cbz	r0, 20e0c <rpc_handle_ctrl_message+0x28>
   20e08:	f000 f82e 	bl	20e68 <rpc_transport_local_data_free>
   20e0c:	4620      	mov	r0, r4
   20e0e:	f000 f827 	bl	20e60 <rpc_transport_msg_free>
   20e12:	e7ef      	b.n	20df4 <rpc_handle_ctrl_message+0x10>

00020e14 <rpc_message_send>:
   20e14:	6843      	ldr	r3, [r0, #4]
   20e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   20e1a:	f043 0302 	orr.w	r3, r3, #2
   20e1e:	6043      	str	r3, [r0, #4]
   20e20:	f000 b826 	b.w	20e70 <rpc_transport_data_msg_send>

00020e24 <rpc_message_alloc>:
   20e24:	b570      	push	{r4, r5, r6, lr}
   20e26:	4606      	mov	r6, r0
   20e28:	b130      	cbz	r0, 20e38 <rpc_message_alloc+0x14>
   20e2a:	f000 f81b 	bl	20e64 <rpc_transport_data_alloc>
   20e2e:	4605      	mov	r5, r0
   20e30:	b918      	cbnz	r0, 20e3a <rpc_message_alloc+0x16>
   20e32:	2400      	movs	r4, #0
   20e34:	4620      	mov	r0, r4
   20e36:	bd70      	pop	{r4, r5, r6, pc}
   20e38:	4605      	mov	r5, r0
   20e3a:	f000 f80f 	bl	20e5c <rpc_transport_data_msg_alloc>
   20e3e:	4604      	mov	r4, r0
   20e40:	b110      	cbz	r0, 20e48 <rpc_message_alloc+0x24>
   20e42:	60c6      	str	r6, [r0, #12]
   20e44:	6085      	str	r5, [r0, #8]
   20e46:	e7f5      	b.n	20e34 <rpc_message_alloc+0x10>
   20e48:	2d00      	cmp	r5, #0
   20e4a:	d0f2      	beq.n	20e32 <rpc_message_alloc+0xe>
   20e4c:	4628      	mov	r0, r5
   20e4e:	f000 f80b 	bl	20e68 <rpc_transport_local_data_free>
   20e52:	e7ef      	b.n	20e34 <rpc_message_alloc+0x10>

00020e54 <rpc_message_free>:
   20e54:	f000 b804 	b.w	20e60 <rpc_transport_msg_free>

00020e58 <rpc_message_data_free>:
   20e58:	f000 b808 	b.w	20e6c <rpc_transport_peer_data_free>

00020e5c <rpc_transport_data_msg_alloc>:
   20e5c:	f7f8 bd88 	b.w	19970 <rpc_transport_ipc_data_msg_alloc>

00020e60 <rpc_transport_msg_free>:
   20e60:	f7f8 bdd2 	b.w	19a08 <rpc_transport_ipc_msg_free>

00020e64 <rpc_transport_data_alloc>:
   20e64:	f7f8 bdb6 	b.w	199d4 <rpc_transport_ipc_data_alloc>

00020e68 <rpc_transport_local_data_free>:
   20e68:	f000 b804 	b.w	20e74 <rpc_transport_ipc_local_data_free>

00020e6c <rpc_transport_peer_data_free>:
   20e6c:	f000 b809 	b.w	20e82 <rpc_transport_ipc_peer_data_free>

00020e70 <rpc_transport_data_msg_send>:
   20e70:	f7f8 bd42 	b.w	198f8 <rpc_transport_ipc_data_msg_send>

00020e74 <rpc_transport_ipc_local_data_free>:
   20e74:	b508      	push	{r3, lr}
   20e76:	f7f4 fe7b 	bl	15b70 <nrf_modem_os_shm_tx_free>
   20e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20e7e:	f7f4 be41 	b.w	15b04 <nrf_modem_os_application_irq_set>

00020e82 <rpc_transport_ipc_peer_data_free>:
   20e82:	b510      	push	{r4, lr}
   20e84:	4604      	mov	r4, r0
   20e86:	f7f8 fd85 	bl	19994 <rpc_transport_ipc_ctrl_msg_alloc>
   20e8a:	2101      	movs	r1, #1
   20e8c:	2200      	movs	r2, #0
   20e8e:	7001      	strb	r1, [r0, #0]
   20e90:	2102      	movs	r1, #2
   20e92:	6084      	str	r4, [r0, #8]
   20e94:	7042      	strb	r2, [r0, #1]
   20e96:	7081      	strb	r1, [r0, #2]
   20e98:	70c2      	strb	r2, [r0, #3]
   20e9a:	f7f8 fd4b 	bl	19934 <rpc_transport_ipc_ctrl_msg_send>
   20e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20ea2:	f7f4 be2f 	b.w	15b04 <nrf_modem_os_application_irq_set>

00020ea6 <rpc_client_request_alloc>:
   20ea6:	b508      	push	{r3, lr}
   20ea8:	f7ff ffbc 	bl	20e24 <rpc_message_alloc>
   20eac:	b100      	cbz	r0, 20eb0 <rpc_client_request_alloc+0xa>
   20eae:	3008      	adds	r0, #8
   20eb0:	bd08      	pop	{r3, pc}

00020eb2 <rpc_client_request_send>:
   20eb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   20eb6:	4610      	mov	r0, r2
   20eb8:	f840 1d08 	str.w	r1, [r0, #-8]!
   20ebc:	f7ff bfaa 	b.w	20e14 <rpc_message_send>

00020ec0 <rpc_client_message_free>:
   20ec0:	3808      	subs	r0, #8
   20ec2:	f7ff bfc7 	b.w	20e54 <rpc_message_free>

00020ec6 <rpc_client_data_free>:
   20ec6:	f7ff bfc7 	b.w	20e58 <rpc_message_data_free>

00020eca <packet_handler_alloc_and_init>:
   20eca:	b538      	push	{r3, r4, r5, lr}
   20ecc:	4604      	mov	r4, r0
   20ece:	4608      	mov	r0, r1
   20ed0:	4611      	mov	r1, r2
   20ed2:	4622      	mov	r2, r4
   20ed4:	f7fb f88c 	bl	1bff0 <packet_handler_create>
   20ed8:	61e0      	str	r0, [r4, #28]
   20eda:	b158      	cbz	r0, 20ef4 <packet_handler_alloc_and_init+0x2a>
   20edc:	6803      	ldr	r3, [r0, #0]
   20ede:	681b      	ldr	r3, [r3, #0]
   20ee0:	4798      	blx	r3
   20ee2:	4605      	mov	r5, r0
   20ee4:	b120      	cbz	r0, 20ef0 <packet_handler_alloc_and_init+0x26>
   20ee6:	69e0      	ldr	r0, [r4, #28]
   20ee8:	f000 fce3 	bl	218b2 <packet_handler_delete>
   20eec:	2300      	movs	r3, #0
   20eee:	61e3      	str	r3, [r4, #28]
   20ef0:	4628      	mov	r0, r5
   20ef2:	bd38      	pop	{r3, r4, r5, pc}
   20ef4:	250c      	movs	r5, #12
   20ef6:	e7fb      	b.n	20ef0 <packet_handler_alloc_and_init+0x26>

00020ef8 <socket_free>:
   20ef8:	b510      	push	{r4, lr}
   20efa:	4604      	mov	r4, r0
   20efc:	69c0      	ldr	r0, [r0, #28]
   20efe:	b108      	cbz	r0, 20f04 <socket_free+0xc>
   20f00:	f000 fcd7 	bl	218b2 <packet_handler_delete>
   20f04:	4620      	mov	r0, r4
   20f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20f0a:	222c      	movs	r2, #44	; 0x2c
   20f0c:	2100      	movs	r1, #0
   20f0e:	f001 bc42 	b.w	22796 <memset>

00020f12 <interface_socket_event_get>:
   20f12:	b510      	push	{r4, lr}
   20f14:	4604      	mov	r4, r0
   20f16:	b189      	cbz	r1, 20f3c <interface_socket_event_get+0x2a>
   20f18:	f7f8 ffc2 	bl	19ea0 <interface_socket_from_handle_get>
   20f1c:	b158      	cbz	r0, 20f36 <interface_socket_event_get+0x24>
   20f1e:	6803      	ldr	r3, [r0, #0]
   20f20:	0c1b      	lsrs	r3, r3, #16
   20f22:	f003 020a 	and.w	r2, r3, #10
   20f26:	2a0a      	cmp	r2, #10
   20f28:	bf14      	ite	ne
   20f2a:	f003 030f 	andne.w	r3, r3, #15
   20f2e:	f003 030d 	andeq.w	r3, r3, #13
   20f32:	600b      	str	r3, [r1, #0]
   20f34:	e002      	b.n	20f3c <interface_socket_event_get+0x2a>
   20f36:	2c00      	cmp	r4, #0
   20f38:	da01      	bge.n	20f3e <interface_socket_event_get+0x2c>
   20f3a:	6008      	str	r0, [r1, #0]
   20f3c:	bd10      	pop	{r4, pc}
   20f3e:	2310      	movs	r3, #16
   20f40:	e7f7      	b.n	20f32 <interface_socket_event_get+0x20>

00020f42 <ip_recvd_packet_free_cb>:
   20f42:	b510      	push	{r4, lr}
   20f44:	4604      	mov	r4, r0
   20f46:	6800      	ldr	r0, [r0, #0]
   20f48:	f7ff ffbd 	bl	20ec6 <rpc_client_data_free>
   20f4c:	68a0      	ldr	r0, [r4, #8]
   20f4e:	b118      	cbz	r0, 20f58 <ip_recvd_packet_free_cb+0x16>
   20f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20f54:	f7f4 bdfe 	b.w	15b54 <nrf_modem_os_free>
   20f58:	bd10      	pop	{r4, pc}

00020f5a <protocol_verify>:
   20f5a:	b508      	push	{r3, lr}
   20f5c:	4603      	mov	r3, r0
   20f5e:	4608      	mov	r0, r1
   20f60:	b169      	cbz	r1, 20f7e <protocol_verify+0x24>
   20f62:	2b01      	cmp	r3, #1
   20f64:	d107      	bne.n	20f76 <protocol_verify+0x1c>
   20f66:	2901      	cmp	r1, #1
   20f68:	d013      	beq.n	20f92 <protocol_verify+0x38>
   20f6a:	206b      	movs	r0, #107	; 0x6b
   20f6c:	f7ff fb1d 	bl	205aa <nrf_modem_os_errno_set>
   20f70:	f04f 30ff 	mov.w	r0, #4294967295
   20f74:	bd08      	pop	{r3, pc}
   20f76:	2b02      	cmp	r3, #2
   20f78:	d10b      	bne.n	20f92 <protocol_verify+0x38>
   20f7a:	2902      	cmp	r1, #2
   20f7c:	e7f4      	b.n	20f68 <protocol_verify+0xe>
   20f7e:	2b01      	cmp	r3, #1
   20f80:	d101      	bne.n	20f86 <protocol_verify+0x2c>
   20f82:	6013      	str	r3, [r2, #0]
   20f84:	e7f6      	b.n	20f74 <protocol_verify+0x1a>
   20f86:	2b03      	cmp	r3, #3
   20f88:	d101      	bne.n	20f8e <protocol_verify+0x34>
   20f8a:	6011      	str	r1, [r2, #0]
   20f8c:	e7f2      	b.n	20f74 <protocol_verify+0x1a>
   20f8e:	2302      	movs	r3, #2
   20f90:	e7f7      	b.n	20f82 <protocol_verify+0x28>
   20f92:	2000      	movs	r0, #0
   20f94:	e7ee      	b.n	20f74 <protocol_verify+0x1a>

00020f96 <ip_addr_parse>:
   20f96:	b570      	push	{r4, r5, r6, lr}
   20f98:	684d      	ldr	r5, [r1, #4]
   20f9a:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
   20f9e:	4285      	cmp	r5, r0
   20fa0:	d11f      	bne.n	20fe2 <ip_addr_parse+0x4c>
   20fa2:	7808      	ldrb	r0, [r1, #0]
   20fa4:	4290      	cmp	r0, r2
   20fa6:	d11e      	bne.n	20fe6 <ip_addr_parse+0x50>
   20fa8:	2d02      	cmp	r5, #2
   20faa:	d109      	bne.n	20fc0 <ip_addr_parse+0x2a>
   20fac:	2810      	cmp	r0, #16
   20fae:	d11a      	bne.n	20fe6 <ip_addr_parse+0x50>
   20fb0:	890a      	ldrh	r2, [r1, #8]
   20fb2:	8032      	strh	r2, [r6, #0]
   20fb4:	2204      	movs	r2, #4
   20fb6:	801a      	strh	r2, [r3, #0]
   20fb8:	68cb      	ldr	r3, [r1, #12]
   20fba:	6023      	str	r3, [r4, #0]
   20fbc:	2000      	movs	r0, #0
   20fbe:	bd70      	pop	{r4, r5, r6, pc}
   20fc0:	2d0a      	cmp	r5, #10
   20fc2:	d110      	bne.n	20fe6 <ip_addr_parse+0x50>
   20fc4:	2824      	cmp	r0, #36	; 0x24
   20fc6:	d10e      	bne.n	20fe6 <ip_addr_parse+0x50>
   20fc8:	890a      	ldrh	r2, [r1, #8]
   20fca:	8032      	strh	r2, [r6, #0]
   20fcc:	2210      	movs	r2, #16
   20fce:	801a      	strh	r2, [r3, #0]
   20fd0:	188b      	adds	r3, r1, r2
   20fd2:	3120      	adds	r1, #32
   20fd4:	f853 2b04 	ldr.w	r2, [r3], #4
   20fd8:	428b      	cmp	r3, r1
   20fda:	f844 2b04 	str.w	r2, [r4], #4
   20fde:	d1f9      	bne.n	20fd4 <ip_addr_parse+0x3e>
   20fe0:	e7ec      	b.n	20fbc <ip_addr_parse+0x26>
   20fe2:	206a      	movs	r0, #106	; 0x6a
   20fe4:	e7eb      	b.n	20fbe <ip_addr_parse+0x28>
   20fe6:	2016      	movs	r0, #22
   20fe8:	e7e9      	b.n	20fbe <ip_addr_parse+0x28>

00020fea <ip_interface_request_create>:
   20fea:	b570      	push	{r4, r5, r6, lr}
   20fec:	4606      	mov	r6, r0
   20fee:	4618      	mov	r0, r3
   20ff0:	460d      	mov	r5, r1
   20ff2:	4614      	mov	r4, r2
   20ff4:	f7ff ff57 	bl	20ea6 <rpc_client_request_alloc>
   20ff8:	b148      	cbz	r0, 2100e <ip_interface_request_create+0x24>
   20ffa:	2300      	movs	r3, #0
   20ffc:	2208      	movs	r2, #8
   20ffe:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   21002:	60c4      	str	r4, [r0, #12]
   21004:	6105      	str	r5, [r0, #16]
   21006:	7202      	strb	r2, [r0, #8]
   21008:	7243      	strb	r3, [r0, #9]
   2100a:	7283      	strb	r3, [r0, #10]
   2100c:	72c3      	strb	r3, [r0, #11]
   2100e:	bd70      	pop	{r4, r5, r6, pc}

00021010 <ip_interface_wait>:
   21010:	b538      	push	{r3, r4, r5, lr}
   21012:	4605      	mov	r5, r0
   21014:	f7f8 feca 	bl	19dac <interface_socket_wait>
   21018:	4604      	mov	r4, r0
   2101a:	b938      	cbnz	r0, 2102c <ip_interface_wait+0x1c>
   2101c:	4628      	mov	r0, r5
   2101e:	f7f8 ff3f 	bl	19ea0 <interface_socket_from_handle_get>
   21022:	b118      	cbz	r0, 2102c <ip_interface_wait+0x1c>
   21024:	6844      	ldr	r4, [r0, #4]
   21026:	b10c      	cbz	r4, 2102c <ip_interface_wait+0x1c>
   21028:	2300      	movs	r3, #0
   2102a:	6043      	str	r3, [r0, #4]
   2102c:	4620      	mov	r0, r4
   2102e:	bd38      	pop	{r3, r4, r5, pc}

00021030 <ip_interface_recvfrom>:
   21030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21034:	b087      	sub	sp, #28
   21036:	4681      	mov	r9, r0
   21038:	461e      	mov	r6, r3
   2103a:	4690      	mov	r8, r2
   2103c:	9f11      	ldr	r7, [sp, #68]	; 0x44
   2103e:	9101      	str	r1, [sp, #4]
   21040:	2a00      	cmp	r2, #0
   21042:	f000 80e8 	beq.w	21216 <ip_interface_recvfrom+0x1e6>
   21046:	b11b      	cbz	r3, 21050 <ip_interface_recvfrom+0x20>
   21048:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   2104c:	f000 80e5 	beq.w	2121a <ip_interface_recvfrom+0x1ea>
   21050:	4648      	mov	r0, r9
   21052:	f7f8 ff25 	bl	19ea0 <interface_socket_from_handle_get>
   21056:	4604      	mov	r4, r0
   21058:	2800      	cmp	r0, #0
   2105a:	f000 80e0 	beq.w	2121e <ip_interface_recvfrom+0x1ee>
   2105e:	6803      	ldr	r3, [r0, #0]
   21060:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   21064:	d10f      	bne.n	21086 <ip_interface_recvfrom+0x56>
   21066:	6802      	ldr	r2, [r0, #0]
   21068:	b292      	uxth	r2, r2
   2106a:	2a06      	cmp	r2, #6
   2106c:	f000 809e 	beq.w	211ac <ip_interface_recvfrom+0x17c>
   21070:	6802      	ldr	r2, [r0, #0]
   21072:	461e      	mov	r6, r3
   21074:	b292      	uxth	r2, r2
   21076:	2a07      	cmp	r2, #7
   21078:	469a      	mov	sl, r3
   2107a:	f000 8099 	beq.w	211b0 <ip_interface_recvfrom+0x180>
   2107e:	2280      	movs	r2, #128	; 0x80
   21080:	f04f 35ff 	mov.w	r5, #4294967295
   21084:	e084      	b.n	21190 <ip_interface_recvfrom+0x160>
   21086:	07b1      	lsls	r1, r6, #30
   21088:	d422      	bmi.n	210d0 <ip_interface_recvfrom+0xa0>
   2108a:	6803      	ldr	r3, [r0, #0]
   2108c:	00da      	lsls	r2, r3, #3
   2108e:	d522      	bpl.n	210d6 <ip_interface_recvfrom+0xa6>
   21090:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   21094:	f04f 35ff 	mov.w	r5, #4294967295
   21098:	f006 0b10 	and.w	fp, r6, #16
   2109c:	6822      	ldr	r2, [r4, #0]
   2109e:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   210a2:	d01b      	beq.n	210dc <ip_interface_recvfrom+0xac>
   210a4:	6822      	ldr	r2, [r4, #0]
   210a6:	69e0      	ldr	r0, [r4, #28]
   210a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   210ac:	6022      	str	r2, [r4, #0]
   210ae:	6802      	ldr	r2, [r0, #0]
   210b0:	68d2      	ldr	r2, [r2, #12]
   210b2:	4790      	blx	r2
   210b4:	1c43      	adds	r3, r0, #1
   210b6:	4605      	mov	r5, r0
   210b8:	d029      	beq.n	2110e <ip_interface_recvfrom+0xde>
   210ba:	4580      	cmp	r8, r0
   210bc:	dd05      	ble.n	210ca <ip_interface_recvfrom+0x9a>
   210be:	6923      	ldr	r3, [r4, #16]
   210c0:	2b01      	cmp	r3, #1
   210c2:	d102      	bne.n	210ca <ip_interface_recvfrom+0x9a>
   210c4:	f1bb 0f00 	cmp.w	fp, #0
   210c8:	d125      	bne.n	21116 <ip_interface_recvfrom+0xe6>
   210ca:	f04f 0a00 	mov.w	sl, #0
   210ce:	e04a      	b.n	21166 <ip_interface_recvfrom+0x136>
   210d0:	f04f 0a00 	mov.w	sl, #0
   210d4:	e7de      	b.n	21094 <ip_interface_recvfrom+0x64>
   210d6:	f04f 0a01 	mov.w	sl, #1
   210da:	e7db      	b.n	21094 <ip_interface_recvfrom+0x64>
   210dc:	6821      	ldr	r1, [r4, #0]
   210de:	0308      	lsls	r0, r1, #12
   210e0:	d515      	bpl.n	2110e <ip_interface_recvfrom+0xde>
   210e2:	6821      	ldr	r1, [r4, #0]
   210e4:	b289      	uxth	r1, r1
   210e6:	290d      	cmp	r1, #13
   210e8:	d011      	beq.n	2110e <ip_interface_recvfrom+0xde>
   210ea:	6923      	ldr	r3, [r4, #16]
   210ec:	2b01      	cmp	r3, #1
   210ee:	f000 809e 	beq.w	2122e <ip_interface_recvfrom+0x1fe>
   210f2:	4692      	mov	sl, r2
   210f4:	2280      	movs	r2, #128	; 0x80
   210f6:	6823      	ldr	r3, [r4, #0]
   210f8:	0c1b      	lsrs	r3, r3, #16
   210fa:	041b      	lsls	r3, r3, #16
   210fc:	f043 030d 	orr.w	r3, r3, #13
   21100:	6023      	str	r3, [r4, #0]
   21102:	6823      	ldr	r3, [r4, #0]
   21104:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   21108:	6023      	str	r3, [r4, #0]
   2110a:	2600      	movs	r6, #0
   2110c:	e040      	b.n	21190 <ip_interface_recvfrom+0x160>
   2110e:	f1ba 0f00 	cmp.w	sl, #0
   21112:	f000 808d 	beq.w	21230 <ip_interface_recvfrom+0x200>
   21116:	6a23      	ldr	r3, [r4, #32]
   21118:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2111c:	2b00      	cmp	r3, #0
   2111e:	bf08      	it	eq
   21120:	f04f 33ff 	moveq.w	r3, #4294967295
   21124:	4611      	mov	r1, r2
   21126:	9302      	str	r3, [sp, #8]
   21128:	4648      	mov	r0, r9
   2112a:	ab02      	add	r3, sp, #8
   2112c:	f7ff ff70 	bl	21010 <ip_interface_wait>
   21130:	6823      	ldr	r3, [r4, #0]
   21132:	4602      	mov	r2, r0
   21134:	b29b      	uxth	r3, r3
   21136:	b933      	cbnz	r3, 21146 <ip_interface_recvfrom+0x116>
   21138:	2204      	movs	r2, #4
   2113a:	4610      	mov	r0, r2
   2113c:	f7ff fa35 	bl	205aa <nrf_modem_os_errno_set>
   21140:	f04f 35ff 	mov.w	r5, #4294967295
   21144:	e046      	b.n	211d4 <ip_interface_recvfrom+0x1a4>
   21146:	2800      	cmp	r0, #0
   21148:	d06b      	beq.n	21222 <ip_interface_recvfrom+0x1f2>
   2114a:	6823      	ldr	r3, [r4, #0]
   2114c:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   21150:	d06a      	beq.n	21228 <ip_interface_recvfrom+0x1f8>
   21152:	6823      	ldr	r3, [r4, #0]
   21154:	b29b      	uxth	r3, r3
   21156:	2b0d      	cmp	r3, #13
   21158:	d066      	beq.n	21228 <ip_interface_recvfrom+0x1f8>
   2115a:	6923      	ldr	r3, [r4, #16]
   2115c:	1e59      	subs	r1, r3, #1
   2115e:	f1d1 0a00 	rsbs	sl, r1, #0
   21162:	eb4a 0a01 	adc.w	sl, sl, r1
   21166:	b107      	cbz	r7, 2116a <ip_interface_recvfrom+0x13a>
   21168:	683f      	ldr	r7, [r7, #0]
   2116a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2116c:	69e0      	ldr	r0, [r4, #28]
   2116e:	e9cd 2704 	strd	r2, r7, [sp, #16]
   21172:	9b01      	ldr	r3, [sp, #4]
   21174:	6802      	ldr	r2, [r0, #0]
   21176:	e9cd 3802 	strd	r3, r8, [sp, #8]
   2117a:	6895      	ldr	r5, [r2, #8]
   2117c:	a902      	add	r1, sp, #8
   2117e:	4632      	mov	r2, r6
   21180:	47a8      	blx	r5
   21182:	1c42      	adds	r2, r0, #1
   21184:	4605      	mov	r5, r0
   21186:	bf0b      	itete	eq
   21188:	2600      	moveq	r6, #0
   2118a:	2601      	movne	r6, #1
   2118c:	220b      	moveq	r2, #11
   2118e:	2200      	movne	r2, #0
   21190:	69e0      	ldr	r0, [r4, #28]
   21192:	9201      	str	r2, [sp, #4]
   21194:	6801      	ldr	r1, [r0, #0]
   21196:	68c9      	ldr	r1, [r1, #12]
   21198:	4788      	blx	r1
   2119a:	3001      	adds	r0, #1
   2119c:	9a01      	ldr	r2, [sp, #4]
   2119e:	d009      	beq.n	211b4 <ip_interface_recvfrom+0x184>
   211a0:	6823      	ldr	r3, [r4, #0]
   211a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   211a6:	6023      	str	r3, [r4, #0]
   211a8:	b1a2      	cbz	r2, 211d4 <ip_interface_recvfrom+0x1a4>
   211aa:	e7c6      	b.n	2113a <ip_interface_recvfrom+0x10a>
   211ac:	461e      	mov	r6, r3
   211ae:	469a      	mov	sl, r3
   211b0:	2209      	movs	r2, #9
   211b2:	e765      	b.n	21080 <ip_interface_recvfrom+0x50>
   211b4:	f1ba 0f00 	cmp.w	sl, #0
   211b8:	d010      	beq.n	211dc <ip_interface_recvfrom+0x1ac>
   211ba:	2e00      	cmp	r6, #0
   211bc:	d1f4      	bne.n	211a8 <ip_interface_recvfrom+0x178>
   211be:	4635      	mov	r5, r6
   211c0:	6823      	ldr	r3, [r4, #0]
   211c2:	0c1b      	lsrs	r3, r3, #16
   211c4:	041b      	lsls	r3, r3, #16
   211c6:	f043 030d 	orr.w	r3, r3, #13
   211ca:	6023      	str	r3, [r4, #0]
   211cc:	6823      	ldr	r3, [r4, #0]
   211ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   211d2:	6023      	str	r3, [r4, #0]
   211d4:	4628      	mov	r0, r5
   211d6:	b007      	add	sp, #28
   211d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211dc:	2e00      	cmp	r6, #0
   211de:	d1e3      	bne.n	211a8 <ip_interface_recvfrom+0x178>
   211e0:	6823      	ldr	r3, [r4, #0]
   211e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   211e6:	6823      	ldr	r3, [r4, #0]
   211e8:	d00a      	beq.n	21200 <ip_interface_recvfrom+0x1d0>
   211ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   211ee:	6023      	str	r3, [r4, #0]
   211f0:	6823      	ldr	r3, [r4, #0]
   211f2:	2269      	movs	r2, #105	; 0x69
   211f4:	0c1b      	lsrs	r3, r3, #16
   211f6:	041b      	lsls	r3, r3, #16
   211f8:	f043 030d 	orr.w	r3, r3, #13
   211fc:	6023      	str	r3, [r4, #0]
   211fe:	e79c      	b.n	2113a <ip_interface_recvfrom+0x10a>
   21200:	031b      	lsls	r3, r3, #12
   21202:	d5d1      	bpl.n	211a8 <ip_interface_recvfrom+0x178>
   21204:	6823      	ldr	r3, [r4, #0]
   21206:	b29b      	uxth	r3, r3
   21208:	2b0d      	cmp	r3, #13
   2120a:	d1cd      	bne.n	211a8 <ip_interface_recvfrom+0x178>
   2120c:	68a3      	ldr	r3, [r4, #8]
   2120e:	2b00      	cmp	r3, #0
   21210:	d0ca      	beq.n	211a8 <ip_interface_recvfrom+0x178>
   21212:	68a2      	ldr	r2, [r4, #8]
   21214:	e7c8      	b.n	211a8 <ip_interface_recvfrom+0x178>
   21216:	2216      	movs	r2, #22
   21218:	e78f      	b.n	2113a <ip_interface_recvfrom+0x10a>
   2121a:	225f      	movs	r2, #95	; 0x5f
   2121c:	e78d      	b.n	2113a <ip_interface_recvfrom+0x10a>
   2121e:	2209      	movs	r2, #9
   21220:	e78b      	b.n	2113a <ip_interface_recvfrom+0x10a>
   21222:	f04f 0a01 	mov.w	sl, #1
   21226:	e739      	b.n	2109c <ip_interface_recvfrom+0x6c>
   21228:	2600      	movs	r6, #0
   2122a:	46b2      	mov	sl, r6
   2122c:	e7b0      	b.n	21190 <ip_interface_recvfrom+0x160>
   2122e:	469a      	mov	sl, r3
   21230:	220b      	movs	r2, #11
   21232:	e76a      	b.n	2110a <ip_interface_recvfrom+0xda>

00021234 <ip_interface_connect>:
   21234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21238:	4606      	mov	r6, r0
   2123a:	4691      	mov	r9, r2
   2123c:	460f      	mov	r7, r1
   2123e:	b085      	sub	sp, #20
   21240:	2900      	cmp	r1, #0
   21242:	d067      	beq.n	21314 <ip_interface_connect+0xe0>
   21244:	2a00      	cmp	r2, #0
   21246:	d065      	beq.n	21314 <ip_interface_connect+0xe0>
   21248:	f7f8 fe2a 	bl	19ea0 <interface_socket_from_handle_get>
   2124c:	4604      	mov	r4, r0
   2124e:	2800      	cmp	r0, #0
   21250:	d062      	beq.n	21318 <ip_interface_connect+0xe4>
   21252:	6803      	ldr	r3, [r0, #0]
   21254:	b29b      	uxth	r3, r3
   21256:	2b02      	cmp	r3, #2
   21258:	d003      	beq.n	21262 <ip_interface_connect+0x2e>
   2125a:	6803      	ldr	r3, [r0, #0]
   2125c:	b29b      	uxth	r3, r3
   2125e:	2b04      	cmp	r3, #4
   21260:	d151      	bne.n	21306 <ip_interface_connect+0xd2>
   21262:	6823      	ldr	r3, [r4, #0]
   21264:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   21268:	d158      	bne.n	2131c <ip_interface_connect+0xe8>
   2126a:	f247 0202 	movw	r2, #28674	; 0x7002
   2126e:	4630      	mov	r0, r6
   21270:	69a1      	ldr	r1, [r4, #24]
   21272:	f7ff feba 	bl	20fea <ip_interface_request_create>
   21276:	4605      	mov	r5, r0
   21278:	2800      	cmp	r0, #0
   2127a:	d051      	beq.n	21320 <ip_interface_connect+0xec>
   2127c:	f247 0802 	movw	r8, #28674	; 0x7002
   21280:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   21284:	60c3      	str	r3, [r0, #12]
   21286:	69a3      	ldr	r3, [r4, #24]
   21288:	464a      	mov	r2, r9
   2128a:	6103      	str	r3, [r0, #16]
   2128c:	6883      	ldr	r3, [r0, #8]
   2128e:	4639      	mov	r1, r7
   21290:	3304      	adds	r3, #4
   21292:	6083      	str	r3, [r0, #8]
   21294:	f100 0318 	add.w	r3, r0, #24
   21298:	9301      	str	r3, [sp, #4]
   2129a:	f10d 030a 	add.w	r3, sp, #10
   2129e:	9300      	str	r3, [sp, #0]
   212a0:	68e0      	ldr	r0, [r4, #12]
   212a2:	ab02      	add	r3, sp, #8
   212a4:	f7ff fe77 	bl	20f96 <ip_addr_parse>
   212a8:	bb30      	cbnz	r0, 212f8 <ip_interface_connect+0xc4>
   212aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   212ae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   212b2:	82ab      	strh	r3, [r5, #20]
   212b4:	68ab      	ldr	r3, [r5, #8]
   212b6:	6827      	ldr	r7, [r4, #0]
   212b8:	4413      	add	r3, r2
   212ba:	60ab      	str	r3, [r5, #8]
   212bc:	6823      	ldr	r3, [r4, #0]
   212be:	82ea      	strh	r2, [r5, #22]
   212c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   212c4:	6023      	str	r3, [r4, #0]
   212c6:	462a      	mov	r2, r5
   212c8:	4641      	mov	r1, r8
   212ca:	2004      	movs	r0, #4
   212cc:	f7ff fdf1 	bl	20eb2 <rpc_client_request_send>
   212d0:	6823      	ldr	r3, [r4, #0]
   212d2:	00db      	lsls	r3, r3, #3
   212d4:	d426      	bmi.n	21324 <ip_interface_connect+0xf0>
   212d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   212dc:	2b00      	cmp	r3, #0
   212de:	bf08      	it	eq
   212e0:	f04f 33ff 	moveq.w	r3, #4294967295
   212e4:	2105      	movs	r1, #5
   212e6:	9303      	str	r3, [sp, #12]
   212e8:	4630      	mov	r0, r6
   212ea:	ab03      	add	r3, sp, #12
   212ec:	f7ff fe90 	bl	21010 <ip_interface_wait>
   212f0:	b130      	cbz	r0, 21300 <ip_interface_connect+0xcc>
   212f2:	2877      	cmp	r0, #119	; 0x77
   212f4:	d000      	beq.n	212f8 <ip_interface_connect+0xc4>
   212f6:	6027      	str	r7, [r4, #0]
   212f8:	f7ff f957 	bl	205aa <nrf_modem_os_errno_set>
   212fc:	f04f 30ff 	mov.w	r0, #4294967295
   21300:	b005      	add	sp, #20
   21302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21306:	6803      	ldr	r3, [r0, #0]
   21308:	b29b      	uxth	r3, r3
   2130a:	2b05      	cmp	r3, #5
   2130c:	bf14      	ite	ne
   2130e:	2009      	movne	r0, #9
   21310:	207f      	moveq	r0, #127	; 0x7f
   21312:	e7f1      	b.n	212f8 <ip_interface_connect+0xc4>
   21314:	2016      	movs	r0, #22
   21316:	e7ef      	b.n	212f8 <ip_interface_connect+0xc4>
   21318:	2009      	movs	r0, #9
   2131a:	e7ed      	b.n	212f8 <ip_interface_connect+0xc4>
   2131c:	2078      	movs	r0, #120	; 0x78
   2131e:	e7eb      	b.n	212f8 <ip_interface_connect+0xc4>
   21320:	200c      	movs	r0, #12
   21322:	e7e9      	b.n	212f8 <ip_interface_connect+0xc4>
   21324:	2077      	movs	r0, #119	; 0x77
   21326:	e7e7      	b.n	212f8 <ip_interface_connect+0xc4>

00021328 <getopt_check_and_send_int>:
   21328:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2132a:	4604      	mov	r4, r0
   2132c:	460d      	mov	r5, r1
   2132e:	4618      	mov	r0, r3
   21330:	4611      	mov	r1, r2
   21332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   21336:	b18b      	cbz	r3, 2135c <getopt_check_and_send_int+0x34>
   21338:	681e      	ldr	r6, [r3, #0]
   2133a:	b17e      	cbz	r6, 2135c <getopt_check_and_send_int+0x34>
   2133c:	b172      	cbz	r2, 2135c <getopt_check_and_send_int+0x34>
   2133e:	e9cd 2300 	strd	r2, r3, [sp]
   21342:	462b      	mov	r3, r5
   21344:	4622      	mov	r2, r4
   21346:	f7f9 f891 	bl	1a46c <ip_interface_socketoption_get>
   2134a:	4603      	mov	r3, r0
   2134c:	b118      	cbz	r0, 21356 <getopt_check_and_send_int+0x2e>
   2134e:	f7ff f92c 	bl	205aa <nrf_modem_os_errno_set>
   21352:	f04f 33ff 	mov.w	r3, #4294967295
   21356:	4618      	mov	r0, r3
   21358:	b002      	add	sp, #8
   2135a:	bd70      	pop	{r4, r5, r6, pc}
   2135c:	2016      	movs	r0, #22
   2135e:	e7f6      	b.n	2134e <getopt_check_and_send_int+0x26>

00021360 <ip_interface_socketoption_send>:
   21360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21364:	4698      	mov	r8, r3
   21366:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   2136a:	f04f 33ff 	mov.w	r3, #4294967295
   2136e:	9301      	str	r3, [sp, #4]
   21370:	680b      	ldr	r3, [r1, #0]
   21372:	4606      	mov	r6, r0
   21374:	025d      	lsls	r5, r3, #9
   21376:	460c      	mov	r4, r1
   21378:	4692      	mov	sl, r2
   2137a:	d43a      	bmi.n	213f2 <ip_interface_socketoption_send+0x92>
   2137c:	680b      	ldr	r3, [r1, #0]
   2137e:	0219      	lsls	r1, r3, #8
   21380:	d437      	bmi.n	213f2 <ip_interface_socketoption_send+0x92>
   21382:	6823      	ldr	r3, [r4, #0]
   21384:	01da      	lsls	r2, r3, #7
   21386:	d434      	bmi.n	213f2 <ip_interface_socketoption_send+0x92>
   21388:	6823      	ldr	r3, [r4, #0]
   2138a:	019b      	lsls	r3, r3, #6
   2138c:	d431      	bmi.n	213f2 <ip_interface_socketoption_send+0x92>
   2138e:	f8d4 9000 	ldr.w	r9, [r4]
   21392:	6823      	ldr	r3, [r4, #0]
   21394:	f247 0203 	movw	r2, #28675	; 0x7003
   21398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2139c:	6023      	str	r3, [r4, #0]
   2139e:	69a1      	ldr	r1, [r4, #24]
   213a0:	463b      	mov	r3, r7
   213a2:	f7ff fe22 	bl	20fea <ip_interface_request_create>
   213a6:	4605      	mov	r5, r0
   213a8:	b308      	cbz	r0, 213ee <ip_interface_socketoption_send+0x8e>
   213aa:	6883      	ldr	r3, [r0, #8]
   213ac:	f8c0 a014 	str.w	sl, [r0, #20]
   213b0:	3308      	adds	r3, #8
   213b2:	6083      	str	r3, [r0, #8]
   213b4:	f8c0 8018 	str.w	r8, [r0, #24]
   213b8:	b13f      	cbz	r7, 213ca <ip_interface_socketoption_send+0x6a>
   213ba:	f1bb 0f00 	cmp.w	fp, #0
   213be:	d004      	beq.n	213ca <ip_interface_socketoption_send+0x6a>
   213c0:	463a      	mov	r2, r7
   213c2:	4659      	mov	r1, fp
   213c4:	6800      	ldr	r0, [r0, #0]
   213c6:	f001 f9d9 	bl	2277c <memcpy>
   213ca:	462a      	mov	r2, r5
   213cc:	f247 0103 	movw	r1, #28675	; 0x7003
   213d0:	2004      	movs	r0, #4
   213d2:	f7ff fd6e 	bl	20eb2 <rpc_client_request_send>
   213d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   213da:	4630      	mov	r0, r6
   213dc:	4611      	mov	r1, r2
   213de:	ab01      	add	r3, sp, #4
   213e0:	f7ff fe16 	bl	21010 <ip_interface_wait>
   213e4:	f8c4 9000 	str.w	r9, [r4]
   213e8:	b003      	add	sp, #12
   213ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213ee:	200c      	movs	r0, #12
   213f0:	e7f8      	b.n	213e4 <ip_interface_socketoption_send+0x84>
   213f2:	200b      	movs	r0, #11
   213f4:	e7f8      	b.n	213e8 <ip_interface_socketoption_send+0x88>

000213f6 <setopt_check_and_send_int>:
   213f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   213f8:	4604      	mov	r4, r0
   213fa:	460d      	mov	r5, r1
   213fc:	4618      	mov	r0, r3
   213fe:	4611      	mov	r1, r2
   21400:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   21404:	2a04      	cmp	r2, #4
   21406:	d10f      	bne.n	21428 <setopt_check_and_send_int+0x32>
   21408:	b173      	cbz	r3, 21428 <setopt_check_and_send_int+0x32>
   2140a:	e9cd 3200 	strd	r3, r2, [sp]
   2140e:	462b      	mov	r3, r5
   21410:	4622      	mov	r2, r4
   21412:	f7ff ffa5 	bl	21360 <ip_interface_socketoption_send>
   21416:	4603      	mov	r3, r0
   21418:	b118      	cbz	r0, 21422 <setopt_check_and_send_int+0x2c>
   2141a:	f7ff f8c6 	bl	205aa <nrf_modem_os_errno_set>
   2141e:	f04f 33ff 	mov.w	r3, #4294967295
   21422:	4618      	mov	r0, r3
   21424:	b003      	add	sp, #12
   21426:	bd30      	pop	{r4, r5, pc}
   21428:	2016      	movs	r0, #22
   2142a:	e7f6      	b.n	2141a <setopt_check_and_send_int+0x24>

0002142c <ip_interface_getopt>:
   2142c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21430:	2901      	cmp	r1, #1
   21432:	4604      	mov	r4, r0
   21434:	460f      	mov	r7, r1
   21436:	4616      	mov	r6, r2
   21438:	461d      	mov	r5, r3
   2143a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2143e:	d007      	beq.n	21450 <ip_interface_getopt+0x24>
   21440:	206d      	movs	r0, #109	; 0x6d
   21442:	f7ff f8b2 	bl	205aa <nrf_modem_os_errno_set>
   21446:	f04f 30ff 	mov.w	r0, #4294967295
   2144a:	b002      	add	sp, #8
   2144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21450:	f7f8 fd26 	bl	19ea0 <interface_socket_from_handle_get>
   21454:	4602      	mov	r2, r0
   21456:	b908      	cbnz	r0, 2145c <ip_interface_getopt+0x30>
   21458:	2009      	movs	r0, #9
   2145a:	e7f2      	b.n	21442 <ip_interface_getopt+0x16>
   2145c:	2e28      	cmp	r6, #40	; 0x28
   2145e:	dc0d      	bgt.n	2147c <ip_interface_getopt+0x50>
   21460:	2e1d      	cmp	r6, #29
   21462:	dd0d      	ble.n	21480 <ip_interface_getopt+0x54>
   21464:	f1a6 031e 	sub.w	r3, r6, #30
   21468:	2b0a      	cmp	r3, #10
   2146a:	d809      	bhi.n	21480 <ip_interface_getopt+0x54>
   2146c:	e8df f003 	tbb	[pc, r3]
   21470:	08241d13 	.word	0x08241d13
   21474:	08080808 	.word	0x08080808
   21478:	0808      	.short	0x0808
   2147a:	2b          	.byte	0x2b
   2147b:	00          	.byte	0x00
   2147c:	2e37      	cmp	r6, #55	; 0x37
   2147e:	d029      	beq.n	214d4 <ip_interface_getopt+0xa8>
   21480:	462b      	mov	r3, r5
   21482:	4632      	mov	r2, r6
   21484:	2101      	movs	r1, #1
   21486:	4620      	mov	r0, r4
   21488:	f8cd 8020 	str.w	r8, [sp, #32]
   2148c:	b002      	add	sp, #8
   2148e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21492:	f7f8 bd49 	b.w	19f28 <interface_socket_getopt>
   21496:	4623      	mov	r3, r4
   21498:	f248 0101 	movw	r1, #32769	; 0x8001
   2149c:	f44f 7000 	mov.w	r0, #512	; 0x200
   214a0:	e9cd 5800 	strd	r5, r8, [sp]
   214a4:	f7ff ff40 	bl	21328 <getopt_check_and_send_int>
   214a8:	e7cf      	b.n	2144a <ip_interface_getopt+0x1e>
   214aa:	4623      	mov	r3, r4
   214ac:	f244 0110 	movw	r1, #16400	; 0x4010
   214b0:	2004      	movs	r0, #4
   214b2:	e9cd 5800 	strd	r5, r8, [sp]
   214b6:	e7f5      	b.n	214a4 <ip_interface_getopt+0x78>
   214b8:	4623      	mov	r3, r4
   214ba:	f246 0110 	movw	r1, #24592	; 0x6010
   214be:	2006      	movs	r0, #6
   214c0:	e9cd 5800 	strd	r5, r8, [sp]
   214c4:	e7ee      	b.n	214a4 <ip_interface_getopt+0x78>
   214c6:	4623      	mov	r3, r4
   214c8:	f241 0104 	movw	r1, #4100	; 0x1004
   214cc:	2008      	movs	r0, #8
   214ce:	e9cd 5800 	strd	r5, r8, [sp]
   214d2:	e7e7      	b.n	214a4 <ip_interface_getopt+0x78>
   214d4:	4623      	mov	r3, r4
   214d6:	f245 0106 	movw	r1, #20486	; 0x5006
   214da:	4638      	mov	r0, r7
   214dc:	e9cd 5800 	strd	r5, r8, [sp]
   214e0:	e7e0      	b.n	214a4 <ip_interface_getopt+0x78>

000214e2 <attach_trigger_condition_verify>:
   214e2:	6903      	ldr	r3, [r0, #16]
   214e4:	2b01      	cmp	r3, #1
   214e6:	d105      	bne.n	214f4 <attach_trigger_condition_verify+0x12>
   214e8:	6800      	ldr	r0, [r0, #0]
   214ea:	b280      	uxth	r0, r0
   214ec:	1f43      	subs	r3, r0, #5
   214ee:	4258      	negs	r0, r3
   214f0:	4158      	adcs	r0, r3
   214f2:	4770      	bx	lr
   214f4:	2b02      	cmp	r3, #2
   214f6:	d109      	bne.n	2150c <attach_trigger_condition_verify+0x2a>
   214f8:	6803      	ldr	r3, [r0, #0]
   214fa:	b29b      	uxth	r3, r3
   214fc:	2b02      	cmp	r3, #2
   214fe:	d003      	beq.n	21508 <attach_trigger_condition_verify+0x26>
   21500:	6803      	ldr	r3, [r0, #0]
   21502:	b29b      	uxth	r3, r3
   21504:	2b04      	cmp	r3, #4
   21506:	d1ef      	bne.n	214e8 <attach_trigger_condition_verify+0x6>
   21508:	2001      	movs	r0, #1
   2150a:	4770      	bx	lr
   2150c:	2000      	movs	r0, #0
   2150e:	4770      	bx	lr

00021510 <secure_client_socket>:
   21510:	f04f 33ff 	mov.w	r3, #4294967295
   21514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21516:	9301      	str	r3, [sp, #4]
   21518:	680b      	ldr	r3, [r1, #0]
   2151a:	4606      	mov	r6, r0
   2151c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   21520:	600b      	str	r3, [r1, #0]
   21522:	680b      	ldr	r3, [r1, #0]
   21524:	460c      	mov	r4, r1
   21526:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2152a:	600b      	str	r3, [r1, #0]
   2152c:	680f      	ldr	r7, [r1, #0]
   2152e:	463a      	mov	r2, r7
   21530:	f7f9 fe00 	bl	1b134 <secure_socket_attach_initiate>
   21534:	4605      	mov	r5, r0
   21536:	b950      	cbnz	r0, 2154e <secure_client_socket+0x3e>
   21538:	220c      	movs	r2, #12
   2153a:	4630      	mov	r0, r6
   2153c:	4611      	mov	r1, r2
   2153e:	ab01      	add	r3, sp, #4
   21540:	f7ff fd66 	bl	21010 <ip_interface_wait>
   21544:	4605      	mov	r5, r0
   21546:	b128      	cbz	r0, 21554 <secure_client_socket+0x44>
   21548:	2877      	cmp	r0, #119	; 0x77
   2154a:	d000      	beq.n	2154e <secure_client_socket+0x3e>
   2154c:	6027      	str	r7, [r4, #0]
   2154e:	4628      	mov	r0, r5
   21550:	b003      	add	sp, #12
   21552:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21554:	4630      	mov	r0, r6
   21556:	f7f9 fddb 	bl	1b110 <hostname_free>
   2155a:	6823      	ldr	r3, [r4, #0]
   2155c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   21560:	6023      	str	r3, [r4, #0]
   21562:	6823      	ldr	r3, [r4, #0]
   21564:	0c1b      	lsrs	r3, r3, #16
   21566:	041b      	lsls	r3, r3, #16
   21568:	f043 030c 	orr.w	r3, r3, #12
   2156c:	6023      	str	r3, [r4, #0]
   2156e:	6823      	ldr	r3, [r4, #0]
   21570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21574:	6023      	str	r3, [r4, #0]
   21576:	6823      	ldr	r3, [r4, #0]
   21578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2157c:	6023      	str	r3, [r4, #0]
   2157e:	e7e6      	b.n	2154e <secure_client_socket+0x3e>

00021580 <tls_interface_close>:
   21580:	b510      	push	{r4, lr}
   21582:	4604      	mov	r4, r0
   21584:	f7f8 fc8c 	bl	19ea0 <interface_socket_from_handle_get>
   21588:	b138      	cbz	r0, 2159a <tls_interface_close+0x1a>
   2158a:	4620      	mov	r0, r4
   2158c:	f7f9 fdc0 	bl	1b110 <hostname_free>
   21590:	4620      	mov	r0, r4
   21592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21596:	f7f8 be05 	b.w	1a1a4 <ip_interface_close>
   2159a:	2009      	movs	r0, #9
   2159c:	f7ff f805 	bl	205aa <nrf_modem_os_errno_set>
   215a0:	f04f 30ff 	mov.w	r0, #4294967295
   215a4:	bd10      	pop	{r4, pc}

000215a6 <null_handler_init>:
   215a6:	2000      	movs	r0, #0
   215a8:	4770      	bx	lr

000215aa <null_handler_put>:
   215aa:	b510      	push	{r4, lr}
   215ac:	460c      	mov	r4, r1
   215ae:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   215b2:	4620      	mov	r0, r4
   215b4:	4798      	blx	r3
   215b6:	6860      	ldr	r0, [r4, #4]
   215b8:	bd10      	pop	{r4, pc}

000215ba <null_handler_get>:
   215ba:	f04f 30ff 	mov.w	r0, #4294967295
   215be:	4770      	bx	lr

000215c0 <null_handler_available>:
   215c0:	f04f 30ff 	mov.w	r0, #4294967295
   215c4:	4770      	bx	lr

000215c6 <null_handler_flush>:
   215c6:	2000      	movs	r0, #0
   215c8:	4770      	bx	lr

000215ca <null_handler_free>:
   215ca:	4770      	bx	lr

000215cc <stream_handler_free_packet>:
   215cc:	b530      	push	{r4, r5, lr}
   215ce:	4605      	mov	r5, r0
   215d0:	b085      	sub	sp, #20
   215d2:	68c0      	ldr	r0, [r0, #12]
   215d4:	f000 fb0e 	bl	21bf4 <linked_list_pop>
   215d8:	4604      	mov	r4, r0
   215da:	b170      	cbz	r0, 215fa <stream_handler_free_packet+0x2e>
   215dc:	6843      	ldr	r3, [r0, #4]
   215de:	9300      	str	r3, [sp, #0]
   215e0:	6883      	ldr	r3, [r0, #8]
   215e2:	9301      	str	r3, [sp, #4]
   215e4:	6903      	ldr	r3, [r0, #16]
   215e6:	9302      	str	r3, [sp, #8]
   215e8:	68c3      	ldr	r3, [r0, #12]
   215ea:	4668      	mov	r0, sp
   215ec:	9303      	str	r3, [sp, #12]
   215ee:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   215f2:	4798      	blx	r3
   215f4:	4620      	mov	r0, r4
   215f6:	f7f4 faad 	bl	15b54 <nrf_modem_os_free>
   215fa:	b005      	add	sp, #20
   215fc:	bd30      	pop	{r4, r5, pc}

000215fe <stream_handler_init>:
   215fe:	b510      	push	{r4, lr}
   21600:	4604      	mov	r4, r0
   21602:	200c      	movs	r0, #12
   21604:	f7f4 fa9e 	bl	15b44 <nrf_modem_os_alloc>
   21608:	60e0      	str	r0, [r4, #12]
   2160a:	b128      	cbz	r0, 21618 <stream_handler_init+0x1a>
   2160c:	2300      	movs	r3, #0
   2160e:	6123      	str	r3, [r4, #16]
   21610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21614:	f000 bad2 	b.w	21bbc <linked_list_init>
   21618:	200c      	movs	r0, #12
   2161a:	bd10      	pop	{r4, pc}

0002161c <stream_handler_put>:
   2161c:	b570      	push	{r4, r5, r6, lr}
   2161e:	4606      	mov	r6, r0
   21620:	2014      	movs	r0, #20
   21622:	460d      	mov	r5, r1
   21624:	f7f4 fa8e 	bl	15b44 <nrf_modem_os_alloc>
   21628:	4604      	mov	r4, r0
   2162a:	b178      	cbz	r0, 2164c <stream_handler_put+0x30>
   2162c:	682b      	ldr	r3, [r5, #0]
   2162e:	4601      	mov	r1, r0
   21630:	6043      	str	r3, [r0, #4]
   21632:	686b      	ldr	r3, [r5, #4]
   21634:	6083      	str	r3, [r0, #8]
   21636:	68eb      	ldr	r3, [r5, #12]
   21638:	60c3      	str	r3, [r0, #12]
   2163a:	68ab      	ldr	r3, [r5, #8]
   2163c:	6103      	str	r3, [r0, #16]
   2163e:	68f0      	ldr	r0, [r6, #12]
   21640:	f000 fac5 	bl	21bce <linked_list_push>
   21644:	b128      	cbz	r0, 21652 <stream_handler_put+0x36>
   21646:	4620      	mov	r0, r4
   21648:	f7f4 fa84 	bl	15b54 <nrf_modem_os_free>
   2164c:	f04f 30ff 	mov.w	r0, #4294967295
   21650:	e000      	b.n	21654 <stream_handler_put+0x38>
   21652:	6868      	ldr	r0, [r5, #4]
   21654:	bd70      	pop	{r4, r5, r6, pc}

00021656 <stream_handler_get>:
   21656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2165a:	4606      	mov	r6, r0
   2165c:	b085      	sub	sp, #20
   2165e:	68c0      	ldr	r0, [r0, #12]
   21660:	468a      	mov	sl, r1
   21662:	4617      	mov	r7, r2
   21664:	f000 fad0 	bl	21c08 <linked_list_peek>
   21668:	4604      	mov	r4, r0
   2166a:	2800      	cmp	r0, #0
   2166c:	d055      	beq.n	2171a <stream_handler_get+0xc4>
   2166e:	f8da 0008 	ldr.w	r0, [sl, #8]
   21672:	2800      	cmp	r0, #0
   21674:	d049      	beq.n	2170a <stream_handler_get+0xb4>
   21676:	6921      	ldr	r1, [r4, #16]
   21678:	2900      	cmp	r1, #0
   2167a:	d046      	beq.n	2170a <stream_handler_get+0xb4>
   2167c:	68e2      	ldr	r2, [r4, #12]
   2167e:	2a00      	cmp	r2, #0
   21680:	d043      	beq.n	2170a <stream_handler_get+0xb4>
   21682:	f8da 500c 	ldr.w	r5, [sl, #12]
   21686:	42aa      	cmp	r2, r5
   21688:	bf28      	it	cs
   2168a:	462a      	movcs	r2, r5
   2168c:	f8ca 200c 	str.w	r2, [sl, #12]
   21690:	f001 f874 	bl	2277c <memcpy>
   21694:	2500      	movs	r5, #0
   21696:	f8da 3004 	ldr.w	r3, [sl, #4]
   2169a:	6931      	ldr	r1, [r6, #16]
   2169c:	9301      	str	r3, [sp, #4]
   2169e:	f8da 3000 	ldr.w	r3, [sl]
   216a2:	9302      	str	r3, [sp, #8]
   216a4:	f007 0320 	and.w	r3, r7, #32
   216a8:	9303      	str	r3, [sp, #12]
   216aa:	f007 0708 	and.w	r7, r7, #8
   216ae:	9b01      	ldr	r3, [sp, #4]
   216b0:	42ab      	cmp	r3, r5
   216b2:	d924      	bls.n	216fe <stream_handler_get+0xa8>
   216b4:	68a2      	ldr	r2, [r4, #8]
   216b6:	9b01      	ldr	r3, [sp, #4]
   216b8:	eba2 0801 	sub.w	r8, r2, r1
   216bc:	eba3 0b05 	sub.w	fp, r3, r5
   216c0:	f8da 2000 	ldr.w	r2, [sl]
   216c4:	45d8      	cmp	r8, fp
   216c6:	46c1      	mov	r9, r8
   216c8:	bf28      	it	cs
   216ca:	46d9      	movcs	r9, fp
   216cc:	b142      	cbz	r2, 216e0 <stream_handler_get+0x8a>
   216ce:	9b03      	ldr	r3, [sp, #12]
   216d0:	b933      	cbnz	r3, 216e0 <stream_handler_get+0x8a>
   216d2:	6860      	ldr	r0, [r4, #4]
   216d4:	9b02      	ldr	r3, [sp, #8]
   216d6:	4401      	add	r1, r0
   216d8:	464a      	mov	r2, r9
   216da:	1958      	adds	r0, r3, r5
   216dc:	f001 f84e 	bl	2277c <memcpy>
   216e0:	4620      	mov	r0, r4
   216e2:	f000 fa98 	bl	21c16 <linked_list_get_next>
   216e6:	4604      	mov	r4, r0
   216e8:	b92f      	cbnz	r7, 216f6 <stream_handler_get+0xa0>
   216ea:	45d8      	cmp	r8, fp
   216ec:	d811      	bhi.n	21712 <stream_handler_get+0xbc>
   216ee:	4630      	mov	r0, r6
   216f0:	f7ff ff6c 	bl	215cc <stream_handler_free_packet>
   216f4:	6137      	str	r7, [r6, #16]
   216f6:	2100      	movs	r1, #0
   216f8:	444d      	add	r5, r9
   216fa:	2c00      	cmp	r4, #0
   216fc:	d1d7      	bne.n	216ae <stream_handler_get+0x58>
   216fe:	4628      	mov	r0, r5
   21700:	f8ca 5004 	str.w	r5, [sl, #4]
   21704:	b005      	add	sp, #20
   21706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2170a:	2200      	movs	r2, #0
   2170c:	f8ca 200c 	str.w	r2, [sl, #12]
   21710:	e7c0      	b.n	21694 <stream_handler_get+0x3e>
   21712:	6932      	ldr	r2, [r6, #16]
   21714:	444a      	add	r2, r9
   21716:	6132      	str	r2, [r6, #16]
   21718:	e7ed      	b.n	216f6 <stream_handler_get+0xa0>
   2171a:	f04f 30ff 	mov.w	r0, #4294967295
   2171e:	e7f1      	b.n	21704 <stream_handler_get+0xae>

00021720 <stream_handler_available>:
   21720:	b510      	push	{r4, lr}
   21722:	4604      	mov	r4, r0
   21724:	68c0      	ldr	r0, [r0, #12]
   21726:	f000 fa6f 	bl	21c08 <linked_list_peek>
   2172a:	b150      	cbz	r0, 21742 <stream_handler_available+0x22>
   2172c:	6924      	ldr	r4, [r4, #16]
   2172e:	4264      	negs	r4, r4
   21730:	6883      	ldr	r3, [r0, #8]
   21732:	441c      	add	r4, r3
   21734:	f000 fa6f 	bl	21c16 <linked_list_get_next>
   21738:	2800      	cmp	r0, #0
   2173a:	d1f9      	bne.n	21730 <stream_handler_available+0x10>
   2173c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   21740:	bd10      	pop	{r4, pc}
   21742:	f04f 30ff 	mov.w	r0, #4294967295
   21746:	e7fb      	b.n	21740 <stream_handler_available+0x20>

00021748 <stream_handler_flush>:
   21748:	68c3      	ldr	r3, [r0, #12]
   2174a:	b510      	push	{r4, lr}
   2174c:	4604      	mov	r4, r0
   2174e:	b923      	cbnz	r3, 2175a <stream_handler_flush+0x12>
   21750:	2016      	movs	r0, #22
   21752:	e007      	b.n	21764 <stream_handler_flush+0x1c>
   21754:	4620      	mov	r0, r4
   21756:	f7ff ff39 	bl	215cc <stream_handler_free_packet>
   2175a:	68e0      	ldr	r0, [r4, #12]
   2175c:	f000 fa59 	bl	21c12 <linked_list_size_get>
   21760:	2800      	cmp	r0, #0
   21762:	d1f7      	bne.n	21754 <stream_handler_flush+0xc>
   21764:	bd10      	pop	{r4, pc}

00021766 <stream_handler_free>:
   21766:	68c3      	ldr	r3, [r0, #12]
   21768:	b510      	push	{r4, lr}
   2176a:	4604      	mov	r4, r0
   2176c:	b133      	cbz	r3, 2177c <stream_handler_free+0x16>
   2176e:	f7ff ffeb 	bl	21748 <stream_handler_flush>
   21772:	68e0      	ldr	r0, [r4, #12]
   21774:	f7f4 f9ee 	bl	15b54 <nrf_modem_os_free>
   21778:	2300      	movs	r3, #0
   2177a:	60e3      	str	r3, [r4, #12]
   2177c:	bd10      	pop	{r4, pc}

0002177e <datagram_handler_free_packet>:
   2177e:	b530      	push	{r4, r5, lr}
   21780:	4605      	mov	r5, r0
   21782:	b085      	sub	sp, #20
   21784:	68c0      	ldr	r0, [r0, #12]
   21786:	f000 fa35 	bl	21bf4 <linked_list_pop>
   2178a:	4604      	mov	r4, r0
   2178c:	b170      	cbz	r0, 217ac <datagram_handler_free_packet+0x2e>
   2178e:	6843      	ldr	r3, [r0, #4]
   21790:	9300      	str	r3, [sp, #0]
   21792:	6883      	ldr	r3, [r0, #8]
   21794:	9301      	str	r3, [sp, #4]
   21796:	6903      	ldr	r3, [r0, #16]
   21798:	9302      	str	r3, [sp, #8]
   2179a:	68c3      	ldr	r3, [r0, #12]
   2179c:	4668      	mov	r0, sp
   2179e:	9303      	str	r3, [sp, #12]
   217a0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   217a4:	4798      	blx	r3
   217a6:	4620      	mov	r0, r4
   217a8:	f7f4 f9d4 	bl	15b54 <nrf_modem_os_free>
   217ac:	b005      	add	sp, #20
   217ae:	bd30      	pop	{r4, r5, pc}

000217b0 <datagram_handler_init>:
   217b0:	b510      	push	{r4, lr}
   217b2:	4604      	mov	r4, r0
   217b4:	200c      	movs	r0, #12
   217b6:	f7f4 f9c5 	bl	15b44 <nrf_modem_os_alloc>
   217ba:	60e0      	str	r0, [r4, #12]
   217bc:	b118      	cbz	r0, 217c6 <datagram_handler_init+0x16>
   217be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   217c2:	f000 b9fb 	b.w	21bbc <linked_list_init>
   217c6:	200c      	movs	r0, #12
   217c8:	bd10      	pop	{r4, pc}

000217ca <datagram_handler_put>:
   217ca:	b570      	push	{r4, r5, r6, lr}
   217cc:	4606      	mov	r6, r0
   217ce:	2014      	movs	r0, #20
   217d0:	460d      	mov	r5, r1
   217d2:	f7f4 f9b7 	bl	15b44 <nrf_modem_os_alloc>
   217d6:	4604      	mov	r4, r0
   217d8:	b178      	cbz	r0, 217fa <datagram_handler_put+0x30>
   217da:	682b      	ldr	r3, [r5, #0]
   217dc:	4601      	mov	r1, r0
   217de:	6043      	str	r3, [r0, #4]
   217e0:	686b      	ldr	r3, [r5, #4]
   217e2:	6083      	str	r3, [r0, #8]
   217e4:	68eb      	ldr	r3, [r5, #12]
   217e6:	60c3      	str	r3, [r0, #12]
   217e8:	68ab      	ldr	r3, [r5, #8]
   217ea:	6103      	str	r3, [r0, #16]
   217ec:	68f0      	ldr	r0, [r6, #12]
   217ee:	f000 f9ee 	bl	21bce <linked_list_push>
   217f2:	b128      	cbz	r0, 21800 <datagram_handler_put+0x36>
   217f4:	4620      	mov	r0, r4
   217f6:	f7f4 f9ad 	bl	15b54 <nrf_modem_os_free>
   217fa:	f04f 30ff 	mov.w	r0, #4294967295
   217fe:	e000      	b.n	21802 <datagram_handler_put+0x38>
   21800:	6868      	ldr	r0, [r5, #4]
   21802:	bd70      	pop	{r4, r5, r6, pc}

00021804 <datagram_handler_get>:
   21804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21806:	4607      	mov	r7, r0
   21808:	68c0      	ldr	r0, [r0, #12]
   2180a:	460c      	mov	r4, r1
   2180c:	4616      	mov	r6, r2
   2180e:	f000 f9fb 	bl	21c08 <linked_list_peek>
   21812:	4605      	mov	r5, r0
   21814:	b328      	cbz	r0, 21862 <datagram_handler_get+0x5e>
   21816:	6882      	ldr	r2, [r0, #8]
   21818:	6863      	ldr	r3, [r4, #4]
   2181a:	6820      	ldr	r0, [r4, #0]
   2181c:	429a      	cmp	r2, r3
   2181e:	bf28      	it	cs
   21820:	461a      	movcs	r2, r3
   21822:	6062      	str	r2, [r4, #4]
   21824:	b110      	cbz	r0, 2182c <datagram_handler_get+0x28>
   21826:	6869      	ldr	r1, [r5, #4]
   21828:	f000 ffa8 	bl	2277c <memcpy>
   2182c:	68a0      	ldr	r0, [r4, #8]
   2182e:	b1a8      	cbz	r0, 2185c <datagram_handler_get+0x58>
   21830:	6929      	ldr	r1, [r5, #16]
   21832:	b199      	cbz	r1, 2185c <datagram_handler_get+0x58>
   21834:	68ea      	ldr	r2, [r5, #12]
   21836:	b18a      	cbz	r2, 2185c <datagram_handler_get+0x58>
   21838:	68e3      	ldr	r3, [r4, #12]
   2183a:	429a      	cmp	r2, r3
   2183c:	bf28      	it	cs
   2183e:	461a      	movcs	r2, r3
   21840:	60e2      	str	r2, [r4, #12]
   21842:	f000 ff9b 	bl	2277c <memcpy>
   21846:	0732      	lsls	r2, r6, #28
   21848:	68ad      	ldr	r5, [r5, #8]
   2184a:	d402      	bmi.n	21852 <datagram_handler_get+0x4e>
   2184c:	4638      	mov	r0, r7
   2184e:	f7ff ff96 	bl	2177e <datagram_handler_free_packet>
   21852:	06b3      	lsls	r3, r6, #26
   21854:	bf4c      	ite	mi
   21856:	4628      	movmi	r0, r5
   21858:	6860      	ldrpl	r0, [r4, #4]
   2185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2185c:	2300      	movs	r3, #0
   2185e:	60e3      	str	r3, [r4, #12]
   21860:	e7f1      	b.n	21846 <datagram_handler_get+0x42>
   21862:	f04f 30ff 	mov.w	r0, #4294967295
   21866:	e7f8      	b.n	2185a <datagram_handler_get+0x56>

00021868 <datagram_handler_available>:
   21868:	b508      	push	{r3, lr}
   2186a:	68c0      	ldr	r0, [r0, #12]
   2186c:	f000 f9cc 	bl	21c08 <linked_list_peek>
   21870:	b108      	cbz	r0, 21876 <datagram_handler_available+0xe>
   21872:	6880      	ldr	r0, [r0, #8]
   21874:	bd08      	pop	{r3, pc}
   21876:	f04f 30ff 	mov.w	r0, #4294967295
   2187a:	e7fb      	b.n	21874 <datagram_handler_available+0xc>

0002187c <datagram_handler_flush>:
   2187c:	68c3      	ldr	r3, [r0, #12]
   2187e:	b510      	push	{r4, lr}
   21880:	4604      	mov	r4, r0
   21882:	b923      	cbnz	r3, 2188e <datagram_handler_flush+0x12>
   21884:	2016      	movs	r0, #22
   21886:	e007      	b.n	21898 <datagram_handler_flush+0x1c>
   21888:	4620      	mov	r0, r4
   2188a:	f7ff ff78 	bl	2177e <datagram_handler_free_packet>
   2188e:	68e0      	ldr	r0, [r4, #12]
   21890:	f000 f9bf 	bl	21c12 <linked_list_size_get>
   21894:	2800      	cmp	r0, #0
   21896:	d1f7      	bne.n	21888 <datagram_handler_flush+0xc>
   21898:	bd10      	pop	{r4, pc}

0002189a <datagram_handler_free>:
   2189a:	68c3      	ldr	r3, [r0, #12]
   2189c:	b510      	push	{r4, lr}
   2189e:	4604      	mov	r4, r0
   218a0:	b133      	cbz	r3, 218b0 <datagram_handler_free+0x16>
   218a2:	f7ff ffeb 	bl	2187c <datagram_handler_flush>
   218a6:	68e0      	ldr	r0, [r4, #12]
   218a8:	f7f4 f954 	bl	15b54 <nrf_modem_os_free>
   218ac:	2300      	movs	r3, #0
   218ae:	60e3      	str	r3, [r4, #12]
   218b0:	bd10      	pop	{r4, pc}

000218b2 <packet_handler_delete>:
   218b2:	b510      	push	{r4, lr}
   218b4:	4604      	mov	r4, r0
   218b6:	6803      	ldr	r3, [r0, #0]
   218b8:	691b      	ldr	r3, [r3, #16]
   218ba:	4798      	blx	r3
   218bc:	6823      	ldr	r3, [r4, #0]
   218be:	4620      	mov	r0, r4
   218c0:	695b      	ldr	r3, [r3, #20]
   218c2:	4798      	blx	r3
   218c4:	4620      	mov	r0, r4
   218c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   218ca:	f7f4 b943 	b.w	15b54 <nrf_modem_os_free>

000218ce <nrf_modem_recoverable_error_handler>:
   218ce:	4770      	bx	lr

000218d0 <nrf_modem_platform_error_handler>:
   218d0:	b508      	push	{r3, lr}
   218d2:	f7ff fffc 	bl	218ce <nrf_modem_recoverable_error_handler>
   218d6:	bd08      	pop	{r3, pc}

000218d8 <unimplemented_method>:
   218d8:	b40f      	push	{r0, r1, r2, r3}
   218da:	b508      	push	{r3, lr}
   218dc:	205f      	movs	r0, #95	; 0x5f
   218de:	f7fe fe64 	bl	205aa <nrf_modem_os_errno_set>
   218e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   218e6:	f04f 30ff 	mov.w	r0, #4294967295
   218ea:	b004      	add	sp, #16
   218ec:	4770      	bx	lr

000218ee <rpc_transport_ipc_fault_handler>:
   218ee:	f7ff bfef 	b.w	218d0 <nrf_modem_platform_error_handler>

000218f2 <nrf_modem_platform_init>:
   218f2:	b513      	push	{r0, r1, r4, lr}
   218f4:	4604      	mov	r4, r0
   218f6:	f7f4 f941 	bl	15b7c <nrf_modem_os_init>
   218fa:	6a23      	ldr	r3, [r4, #32]
   218fc:	4668      	mov	r0, sp
   218fe:	9400      	str	r4, [sp, #0]
   21900:	f88d 3004 	strb.w	r3, [sp, #4]
   21904:	f7f8 f8a6 	bl	19a54 <rpc_transport_ipc_init>
   21908:	4604      	mov	r4, r0
   2190a:	b948      	cbnz	r0, 21920 <nrf_modem_platform_init+0x2e>
   2190c:	f7f8 f9f6 	bl	19cfc <interface_init>
   21910:	f7fa f8b4 	bl	1ba7c <nrf_modem_at_init>
   21914:	4604      	mov	r4, r0
   21916:	b918      	cbnz	r0, 21920 <nrf_modem_platform_init+0x2e>
   21918:	f7f8 fbb0 	bl	1a07c <ip_interface_init>
   2191c:	f7f9 fc5c 	bl	1b1d8 <tls_interface_init>
   21920:	4620      	mov	r0, r4
   21922:	b002      	add	sp, #8
   21924:	bd10      	pop	{r4, pc}

00021926 <nrf_modem_platform_fd_method_table_get>:
   21926:	b510      	push	{r4, lr}
   21928:	f7f8 faba 	bl	19ea0 <interface_socket_from_handle_get>
   2192c:	4604      	mov	r4, r0
   2192e:	b130      	cbz	r0, 2193e <nrf_modem_platform_fd_method_table_get+0x18>
   21930:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   21934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21938:	68c0      	ldr	r0, [r0, #12]
   2193a:	f7fa bbc1 	b.w	1c0c0 <nrf_modem_platform_af_method_table_get>
   2193e:	2009      	movs	r0, #9
   21940:	f7fe fe33 	bl	205aa <nrf_modem_os_errno_set>
   21944:	4620      	mov	r0, r4
   21946:	bd10      	pop	{r4, pc}

00021948 <internal_poll>:
   21948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2194c:	2600      	movs	r6, #0
   2194e:	4688      	mov	r8, r1
   21950:	4604      	mov	r4, r0
   21952:	4637      	mov	r7, r6
   21954:	4546      	cmp	r6, r8
   21956:	d103      	bne.n	21960 <internal_poll+0x18>
   21958:	4638      	mov	r0, r7
   2195a:	b002      	add	sp, #8
   2195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21960:	88a5      	ldrh	r5, [r4, #4]
   21962:	6820      	ldr	r0, [r4, #0]
   21964:	a901      	add	r1, sp, #4
   21966:	f7ff fad4 	bl	20f12 <interface_socket_event_get>
   2196a:	f005 0503 	and.w	r5, r5, #3
   2196e:	9b01      	ldr	r3, [sp, #4]
   21970:	f045 051c 	orr.w	r5, r5, #28
   21974:	401d      	ands	r5, r3
   21976:	6820      	ldr	r0, [r4, #0]
   21978:	80e5      	strh	r5, [r4, #6]
   2197a:	f7f8 fa91 	bl	19ea0 <interface_socket_from_handle_get>
   2197e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   21982:	b168      	cbz	r0, 219a0 <internal_poll+0x58>
   21984:	071a      	lsls	r2, r3, #28
   21986:	d50b      	bpl.n	219a0 <internal_poll+0x58>
   21988:	6942      	ldr	r2, [r0, #20]
   2198a:	2a01      	cmp	r2, #1
   2198c:	d003      	beq.n	21996 <internal_poll+0x4e>
   2198e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   21992:	2a01      	cmp	r2, #1
   21994:	d802      	bhi.n	2199c <internal_poll+0x54>
   21996:	f043 0301 	orr.w	r3, r3, #1
   2199a:	80e3      	strh	r3, [r4, #6]
   2199c:	3701      	adds	r7, #1
   2199e:	e001      	b.n	219a4 <internal_poll+0x5c>
   219a0:	2b00      	cmp	r3, #0
   219a2:	d1fb      	bne.n	2199c <internal_poll+0x54>
   219a4:	3601      	adds	r6, #1
   219a6:	3408      	adds	r4, #8
   219a8:	e7d4      	b.n	21954 <internal_poll+0xc>

000219aa <nrf_modem_platform_getaddrinfo>:
   219aa:	f7f9 b813 	b.w	1a9d4 <ip_interface_getaddrinfo>

000219ae <nrf_modem_platform_freeaddrinfo>:
   219ae:	f7f9 b90f 	b.w	1abd0 <ip_interface_freeaddrinfo>

000219b2 <nrf_modem_platform_poll>:
   219b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   219b4:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   219b8:	2908      	cmp	r1, #8
   219ba:	4605      	mov	r5, r0
   219bc:	460e      	mov	r6, r1
   219be:	9201      	str	r2, [sp, #4]
   219c0:	d906      	bls.n	219d0 <nrf_modem_platform_poll+0x1e>
   219c2:	2016      	movs	r0, #22
   219c4:	f7fe fdf1 	bl	205aa <nrf_modem_os_errno_set>
   219c8:	f04f 30ff 	mov.w	r0, #4294967295
   219cc:	b002      	add	sp, #8
   219ce:	bd70      	pop	{r4, r5, r6, pc}
   219d0:	b910      	cbnz	r0, 219d8 <nrf_modem_platform_poll+0x26>
   219d2:	b109      	cbz	r1, 219d8 <nrf_modem_platform_poll+0x26>
   219d4:	200e      	movs	r0, #14
   219d6:	e7f5      	b.n	219c4 <nrf_modem_platform_poll+0x12>
   219d8:	4631      	mov	r1, r6
   219da:	4628      	mov	r0, r5
   219dc:	f7ff ffb4 	bl	21948 <internal_poll>
   219e0:	2400      	movs	r4, #0
   219e2:	2800      	cmp	r0, #0
   219e4:	d1f2      	bne.n	219cc <nrf_modem_platform_poll+0x1a>
   219e6:	2c00      	cmp	r4, #0
   219e8:	d1f0      	bne.n	219cc <nrf_modem_platform_poll+0x1a>
   219ea:	4628      	mov	r0, r5
   219ec:	a901      	add	r1, sp, #4
   219ee:	f7f3 ffb5 	bl	1595c <nrf_modem_os_timedwait>
   219f2:	4604      	mov	r4, r0
   219f4:	b118      	cbz	r0, 219fe <nrf_modem_platform_poll+0x4c>
   219f6:	2874      	cmp	r0, #116	; 0x74
   219f8:	d001      	beq.n	219fe <nrf_modem_platform_poll+0x4c>
   219fa:	200b      	movs	r0, #11
   219fc:	e7e2      	b.n	219c4 <nrf_modem_platform_poll+0x12>
   219fe:	4631      	mov	r1, r6
   21a00:	4628      	mov	r0, r5
   21a02:	f7ff ffa1 	bl	21948 <internal_poll>
   21a06:	e7ec      	b.n	219e2 <nrf_modem_platform_poll+0x30>

00021a08 <nrf_modem_platform_fcntl>:
   21a08:	f7f8 badc 	b.w	19fc4 <interface_socket_fcntl>

00021a0c <nrf_socket>:
   21a0c:	b570      	push	{r4, r5, r6, lr}
   21a0e:	4604      	mov	r4, r0
   21a10:	460d      	mov	r5, r1
   21a12:	4616      	mov	r6, r2
   21a14:	f7fa fb54 	bl	1c0c0 <nrf_modem_platform_af_method_table_get>
   21a18:	b130      	cbz	r0, 21a28 <nrf_socket+0x1c>
   21a1a:	4632      	mov	r2, r6
   21a1c:	4629      	mov	r1, r5
   21a1e:	6803      	ldr	r3, [r0, #0]
   21a20:	4620      	mov	r0, r4
   21a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21a26:	4718      	bx	r3
   21a28:	f04f 30ff 	mov.w	r0, #4294967295
   21a2c:	bd70      	pop	{r4, r5, r6, pc}

00021a2e <nrf_close>:
   21a2e:	b510      	push	{r4, lr}
   21a30:	4604      	mov	r4, r0
   21a32:	f7ff ff78 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21a36:	b120      	cbz	r0, 21a42 <nrf_close+0x14>
   21a38:	6843      	ldr	r3, [r0, #4]
   21a3a:	4620      	mov	r0, r4
   21a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21a40:	4718      	bx	r3
   21a42:	f04f 30ff 	mov.w	r0, #4294967295
   21a46:	bd10      	pop	{r4, pc}

00021a48 <nrf_sendto>:
   21a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a4c:	4604      	mov	r4, r0
   21a4e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   21a52:	460d      	mov	r5, r1
   21a54:	4616      	mov	r6, r2
   21a56:	461f      	mov	r7, r3
   21a58:	f7ff ff65 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21a5c:	b158      	cbz	r0, 21a76 <nrf_sendto+0x2e>
   21a5e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   21a62:	f8d0 e008 	ldr.w	lr, [r0, #8]
   21a66:	463b      	mov	r3, r7
   21a68:	4632      	mov	r2, r6
   21a6a:	4629      	mov	r1, r5
   21a6c:	4620      	mov	r0, r4
   21a6e:	46f4      	mov	ip, lr
   21a70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a74:	4760      	bx	ip
   21a76:	f04f 30ff 	mov.w	r0, #4294967295
   21a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021a7e <nrf_recvfrom>:
   21a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a82:	4604      	mov	r4, r0
   21a84:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   21a88:	460d      	mov	r5, r1
   21a8a:	4616      	mov	r6, r2
   21a8c:	461f      	mov	r7, r3
   21a8e:	f7ff ff4a 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21a92:	b158      	cbz	r0, 21aac <nrf_recvfrom+0x2e>
   21a94:	e9cd 8908 	strd	r8, r9, [sp, #32]
   21a98:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   21a9c:	463b      	mov	r3, r7
   21a9e:	4632      	mov	r2, r6
   21aa0:	4629      	mov	r1, r5
   21aa2:	4620      	mov	r0, r4
   21aa4:	46f4      	mov	ip, lr
   21aa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21aaa:	4760      	bx	ip
   21aac:	f04f 30ff 	mov.w	r0, #4294967295
   21ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021ab4 <nrf_connect>:
   21ab4:	b570      	push	{r4, r5, r6, lr}
   21ab6:	4604      	mov	r4, r0
   21ab8:	460d      	mov	r5, r1
   21aba:	4616      	mov	r6, r2
   21abc:	f7ff ff33 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21ac0:	b130      	cbz	r0, 21ad0 <nrf_connect+0x1c>
   21ac2:	4632      	mov	r2, r6
   21ac4:	4629      	mov	r1, r5
   21ac6:	6943      	ldr	r3, [r0, #20]
   21ac8:	4620      	mov	r0, r4
   21aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21ace:	4718      	bx	r3
   21ad0:	f04f 30ff 	mov.w	r0, #4294967295
   21ad4:	bd70      	pop	{r4, r5, r6, pc}

00021ad6 <nrf_listen>:
   21ad6:	b570      	push	{r4, r5, r6, lr}
   21ad8:	4604      	mov	r4, r0
   21ada:	460d      	mov	r5, r1
   21adc:	f7ff ff23 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21ae0:	b128      	cbz	r0, 21aee <nrf_listen+0x18>
   21ae2:	4629      	mov	r1, r5
   21ae4:	6983      	ldr	r3, [r0, #24]
   21ae6:	4620      	mov	r0, r4
   21ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21aec:	4718      	bx	r3
   21aee:	f04f 30ff 	mov.w	r0, #4294967295
   21af2:	bd70      	pop	{r4, r5, r6, pc}

00021af4 <nrf_accept>:
   21af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21af8:	4604      	mov	r4, r0
   21afa:	460d      	mov	r5, r1
   21afc:	4616      	mov	r6, r2
   21afe:	f7ff ff12 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21b02:	b140      	cbz	r0, 21b16 <nrf_accept+0x22>
   21b04:	69c7      	ldr	r7, [r0, #28]
   21b06:	4632      	mov	r2, r6
   21b08:	4629      	mov	r1, r5
   21b0a:	4620      	mov	r0, r4
   21b0c:	46bc      	mov	ip, r7
   21b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21b12:	2300      	movs	r3, #0
   21b14:	4760      	bx	ip
   21b16:	f04f 30ff 	mov.w	r0, #4294967295
   21b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021b1e <nrf_bind>:
   21b1e:	b570      	push	{r4, r5, r6, lr}
   21b20:	4604      	mov	r4, r0
   21b22:	460d      	mov	r5, r1
   21b24:	4616      	mov	r6, r2
   21b26:	f7ff fefe 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21b2a:	b130      	cbz	r0, 21b3a <nrf_bind+0x1c>
   21b2c:	4632      	mov	r2, r6
   21b2e:	4629      	mov	r1, r5
   21b30:	6903      	ldr	r3, [r0, #16]
   21b32:	4620      	mov	r0, r4
   21b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21b38:	4718      	bx	r3
   21b3a:	f04f 30ff 	mov.w	r0, #4294967295
   21b3e:	bd70      	pop	{r4, r5, r6, pc}

00021b40 <nrf_setsockopt>:
   21b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b44:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21b48:	4604      	mov	r4, r0
   21b4a:	460d      	mov	r5, r1
   21b4c:	4616      	mov	r6, r2
   21b4e:	461f      	mov	r7, r3
   21b50:	f7ff fee9 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21b54:	b158      	cbz	r0, 21b6e <nrf_setsockopt+0x2e>
   21b56:	f8cd 8018 	str.w	r8, [sp, #24]
   21b5a:	f8d0 e020 	ldr.w	lr, [r0, #32]
   21b5e:	463b      	mov	r3, r7
   21b60:	4632      	mov	r2, r6
   21b62:	4629      	mov	r1, r5
   21b64:	4620      	mov	r0, r4
   21b66:	46f4      	mov	ip, lr
   21b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21b6c:	4760      	bx	ip
   21b6e:	f04f 30ff 	mov.w	r0, #4294967295
   21b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021b76 <nrf_getsockopt>:
   21b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b7a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21b7e:	4604      	mov	r4, r0
   21b80:	460d      	mov	r5, r1
   21b82:	4616      	mov	r6, r2
   21b84:	461f      	mov	r7, r3
   21b86:	f7ff fece 	bl	21926 <nrf_modem_platform_fd_method_table_get>
   21b8a:	b158      	cbz	r0, 21ba4 <nrf_getsockopt+0x2e>
   21b8c:	f8cd 8018 	str.w	r8, [sp, #24]
   21b90:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   21b94:	463b      	mov	r3, r7
   21b96:	4632      	mov	r2, r6
   21b98:	4629      	mov	r1, r5
   21b9a:	4620      	mov	r0, r4
   21b9c:	46f4      	mov	ip, lr
   21b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21ba2:	4760      	bx	ip
   21ba4:	f04f 30ff 	mov.w	r0, #4294967295
   21ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021bac <nrf_getaddrinfo>:
   21bac:	f7ff befd 	b.w	219aa <nrf_modem_platform_getaddrinfo>

00021bb0 <nrf_freeaddrinfo>:
   21bb0:	f7ff befd 	b.w	219ae <nrf_modem_platform_freeaddrinfo>

00021bb4 <nrf_poll>:
   21bb4:	f7ff befd 	b.w	219b2 <nrf_modem_platform_poll>

00021bb8 <nrf_fcntl>:
   21bb8:	f7ff bf26 	b.w	21a08 <nrf_modem_platform_fcntl>

00021bbc <linked_list_init>:
   21bbc:	4603      	mov	r3, r0
   21bbe:	b120      	cbz	r0, 21bca <linked_list_init+0xe>
   21bc0:	2000      	movs	r0, #0
   21bc2:	e9c3 0001 	strd	r0, r0, [r3, #4]
   21bc6:	6018      	str	r0, [r3, #0]
   21bc8:	4770      	bx	lr
   21bca:	2016      	movs	r0, #22
   21bcc:	4770      	bx	lr

00021bce <linked_list_push>:
   21bce:	6803      	ldr	r3, [r0, #0]
   21bd0:	3301      	adds	r3, #1
   21bd2:	d00d      	beq.n	21bf0 <linked_list_push+0x22>
   21bd4:	2300      	movs	r3, #0
   21bd6:	600b      	str	r3, [r1, #0]
   21bd8:	6803      	ldr	r3, [r0, #0]
   21bda:	b933      	cbnz	r3, 21bea <linked_list_push+0x1c>
   21bdc:	6041      	str	r1, [r0, #4]
   21bde:	6803      	ldr	r3, [r0, #0]
   21be0:	6081      	str	r1, [r0, #8]
   21be2:	3301      	adds	r3, #1
   21be4:	6003      	str	r3, [r0, #0]
   21be6:	2000      	movs	r0, #0
   21be8:	4770      	bx	lr
   21bea:	6883      	ldr	r3, [r0, #8]
   21bec:	6019      	str	r1, [r3, #0]
   21bee:	e7f6      	b.n	21bde <linked_list_push+0x10>
   21bf0:	200c      	movs	r0, #12
   21bf2:	4770      	bx	lr

00021bf4 <linked_list_pop>:
   21bf4:	4603      	mov	r3, r0
   21bf6:	6800      	ldr	r0, [r0, #0]
   21bf8:	b128      	cbz	r0, 21c06 <linked_list_pop+0x12>
   21bfa:	6858      	ldr	r0, [r3, #4]
   21bfc:	6802      	ldr	r2, [r0, #0]
   21bfe:	605a      	str	r2, [r3, #4]
   21c00:	681a      	ldr	r2, [r3, #0]
   21c02:	3a01      	subs	r2, #1
   21c04:	601a      	str	r2, [r3, #0]
   21c06:	4770      	bx	lr

00021c08 <linked_list_peek>:
   21c08:	4603      	mov	r3, r0
   21c0a:	6800      	ldr	r0, [r0, #0]
   21c0c:	b100      	cbz	r0, 21c10 <linked_list_peek+0x8>
   21c0e:	6858      	ldr	r0, [r3, #4]
   21c10:	4770      	bx	lr

00021c12 <linked_list_size_get>:
   21c12:	6800      	ldr	r0, [r0, #0]
   21c14:	4770      	bx	lr

00021c16 <linked_list_get_next>:
   21c16:	6800      	ldr	r0, [r0, #0]
   21c18:	4770      	bx	lr

00021c1a <z_device_state_init>:
}
   21c1a:	4770      	bx	lr

00021c1c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   21c1c:	b138      	cbz	r0, 21c2e <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   21c1e:	68c3      	ldr	r3, [r0, #12]
   21c20:	8818      	ldrh	r0, [r3, #0]
   21c22:	f3c0 0008 	ubfx	r0, r0, #0, #9
   21c26:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   21c2a:	4258      	negs	r0, r3
   21c2c:	4158      	adcs	r0, r3
}
   21c2e:	4770      	bx	lr

00021c30 <k_heap_init>:
{
   21c30:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   21c32:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   21c36:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   21c3a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   21c3c:	f7fd ba58 	b.w	1f0f0 <sys_heap_init>

00021c40 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c44:	b087      	sub	sp, #28
   21c46:	4604      	mov	r4, r0
   21c48:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   21c4e:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21c50:	f000 fb0f 	bl	22272 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21c54:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21c58:	4605      	mov	r5, r0
   21c5a:	4688      	mov	r8, r1
	__asm__ volatile(
   21c5c:	f04f 0320 	mov.w	r3, #32
   21c60:	f3ef 8b11 	mrs	fp, BASEPRI
   21c64:	f383 8812 	msr	BASEPRI_MAX, r3
   21c68:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21c6c:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21c70:	463a      	mov	r2, r7
   21c72:	4631      	mov	r1, r6
   21c74:	4620      	mov	r0, r4
   21c76:	f7fd f9d3 	bl	1f020 <sys_heap_aligned_alloc>
   21c7a:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   21c7c:	f7fb fc78 	bl	1d570 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   21c80:	9b05      	ldr	r3, [sp, #20]
   21c82:	b13b      	cbz	r3, 21c94 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   21c84:	f38b 8811 	msr	BASEPRI, fp
   21c88:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21c8c:	4618      	mov	r0, r3
   21c8e:	b007      	add	sp, #28
   21c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   21c94:	1a2a      	subs	r2, r5, r0
   21c96:	9202      	str	r2, [sp, #8]
   21c98:	eb68 0201 	sbc.w	r2, r8, r1
   21c9c:	9203      	str	r2, [sp, #12]
   21c9e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   21ca2:	2901      	cmp	r1, #1
   21ca4:	f172 0200 	sbcs.w	r2, r2, #0
   21ca8:	dbec      	blt.n	21c84 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21cae:	4659      	mov	r1, fp
   21cb0:	e9cd 2300 	strd	r2, r3, [sp]
   21cb4:	4648      	mov	r0, r9
   21cb6:	4652      	mov	r2, sl
   21cb8:	f7fb f922 	bl	1cf00 <z_pend_curr>
	__asm__ volatile(
   21cbc:	f04f 0320 	mov.w	r3, #32
   21cc0:	f3ef 8b11 	mrs	fp, BASEPRI
   21cc4:	f383 8812 	msr	BASEPRI_MAX, r3
   21cc8:	f3bf 8f6f 	isb	sy
   21ccc:	e7d0      	b.n	21c70 <k_heap_aligned_alloc+0x30>

00021cce <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   21cce:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   21cd0:	e9cd 2300 	strd	r2, r3, [sp]
   21cd4:	460a      	mov	r2, r1
   21cd6:	2104      	movs	r1, #4
   21cd8:	f7ff ffb2 	bl	21c40 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   21cdc:	b003      	add	sp, #12
   21cde:	f85d fb04 	ldr.w	pc, [sp], #4

00021ce2 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   21ce2:	b538      	push	{r3, r4, r5, lr}
   21ce4:	4604      	mov	r4, r0
   21ce6:	f04f 0320 	mov.w	r3, #32
   21cea:	f3ef 8511 	mrs	r5, BASEPRI
   21cee:	f383 8812 	msr	BASEPRI_MAX, r3
   21cf2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   21cf6:	f7fd f95a 	bl	1efae <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   21cfa:	f104 000c 	add.w	r0, r4, #12
   21cfe:	f000 fa40 	bl	22182 <z_unpend_all>
   21d02:	b130      	cbz	r0, 21d12 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   21d04:	4629      	mov	r1, r5
   21d06:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   21d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   21d0e:	f7fa bf9d 	b.w	1cc4c <z_reschedule>
	__asm__ volatile(
   21d12:	f385 8811 	msr	BASEPRI, r5
   21d16:	f3bf 8f6f 	isb	sy
}
   21d1a:	bd38      	pop	{r3, r4, r5, pc}

00021d1c <k_mem_slab_init>:
{
   21d1c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   21d1e:	2400      	movs	r4, #0
   21d20:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21d22:	ea41 0402 	orr.w	r4, r1, r2
   21d26:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   21d2a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   21d2e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21d30:	d10c      	bne.n	21d4c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   21d32:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21d34:	42a3      	cmp	r3, r4
   21d36:	d103      	bne.n	21d40 <k_mem_slab_init+0x24>
   21d38:	e9c0 0000 	strd	r0, r0, [r0]
}
   21d3c:	2000      	movs	r0, #0
}
   21d3e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   21d40:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21d42:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   21d44:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   21d46:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   21d48:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   21d4a:	e7f3      	b.n	21d34 <k_mem_slab_init+0x18>
		return -EINVAL;
   21d4c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   21d50:	e7f5      	b.n	21d3e <k_mem_slab_init+0x22>

00021d52 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d54:	4604      	mov	r4, r0
   21d56:	460d      	mov	r5, r1
	__asm__ volatile(
   21d58:	f04f 0320 	mov.w	r3, #32
   21d5c:	f3ef 8611 	mrs	r6, BASEPRI
   21d60:	f383 8812 	msr	BASEPRI_MAX, r3
   21d64:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   21d68:	6947      	ldr	r7, [r0, #20]
   21d6a:	b97f      	cbnz	r7, 21d8c <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   21d6c:	f000 f9f1 	bl	22152 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   21d70:	b160      	cbz	r0, 21d8c <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   21d72:	682a      	ldr	r2, [r5, #0]
   21d74:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   21d78:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   21d7a:	f000 f976 	bl	2206a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   21d7e:	4631      	mov	r1, r6
   21d80:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   21d84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   21d88:	f7fa bf60 	b.w	1cc4c <z_reschedule>
	**(char ***) mem = slab->free_list;
   21d8c:	682b      	ldr	r3, [r5, #0]
   21d8e:	6962      	ldr	r2, [r4, #20]
   21d90:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21d92:	682b      	ldr	r3, [r5, #0]
   21d94:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   21d96:	69a3      	ldr	r3, [r4, #24]
   21d98:	3b01      	subs	r3, #1
   21d9a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   21d9c:	f386 8811 	msr	BASEPRI, r6
   21da0:	f3bf 8f6f 	isb	sy
}
   21da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021da6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21da6:	f3ef 8005 	mrs	r0, IPSR
}
   21daa:	3800      	subs	r0, #0
   21dac:	bf18      	it	ne
   21dae:	2001      	movne	r0, #1
   21db0:	4770      	bx	lr

00021db2 <z_impl_k_thread_name_set>:
}
   21db2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   21db6:	4770      	bx	lr

00021db8 <k_thread_name_get>:
}
   21db8:	2000      	movs	r0, #0
   21dba:	4770      	bx	lr

00021dbc <z_impl_k_thread_start>:
	z_sched_start(thread);
   21dbc:	f7fb b844 	b.w	1ce48 <z_sched_start>

00021dc0 <z_pm_save_idle_exit>:
{
   21dc0:	b508      	push	{r3, lr}
	pm_system_resume();
   21dc2:	f7f1 fe4d 	bl	13a60 <pm_system_resume>
}
   21dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   21dca:	f7fe bbe7 	b.w	2059c <sys_clock_idle_exit>

00021dce <z_impl_k_mutex_init>:
{
   21dce:	4603      	mov	r3, r0
	mutex->owner = NULL;
   21dd0:	2000      	movs	r0, #0
   21dd2:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   21dd6:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   21dda:	4770      	bx	lr

00021ddc <queue_insert>:
{
   21ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21de0:	4699      	mov	r9, r3
   21de2:	4604      	mov	r4, r0
   21de4:	460d      	mov	r5, r1
   21de6:	4690      	mov	r8, r2
   21de8:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21dec:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21df0:	f04f 0220 	mov.w	r2, #32
   21df4:	f3ef 8711 	mrs	r7, BASEPRI
   21df8:	f382 8812 	msr	BASEPRI_MAX, r2
   21dfc:	f3bf 8f6f 	isb	sy
	if (is_append) {
   21e00:	b103      	cbz	r3, 21e04 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   21e02:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   21e04:	4630      	mov	r0, r6
   21e06:	f000 f9a4 	bl	22152 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   21e0a:	b160      	cbz	r0, 21e26 <queue_insert+0x4a>
   21e0c:	2400      	movs	r4, #0
   21e0e:	f8c0 8014 	str.w	r8, [r0, #20]
   21e12:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   21e16:	f000 f928 	bl	2206a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   21e1a:	4630      	mov	r0, r6
   21e1c:	4639      	mov	r1, r7
   21e1e:	f7fa ff15 	bl	1cc4c <z_reschedule>
	return 0;
   21e22:	2000      	movs	r0, #0
   21e24:	e00c      	b.n	21e40 <queue_insert+0x64>
	if (alloc) {
   21e26:	f1b9 0f00 	cmp.w	r9, #0
   21e2a:	d01b      	beq.n	21e64 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   21e2c:	2108      	movs	r1, #8
   21e2e:	f7fb fceb 	bl	1d808 <z_thread_aligned_alloc>
		if (anode == NULL) {
   21e32:	b938      	cbnz	r0, 21e44 <queue_insert+0x68>
	__asm__ volatile(
   21e34:	f387 8811 	msr	BASEPRI, r7
   21e38:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   21e3c:	f06f 000b 	mvn.w	r0, #11
}
   21e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   21e44:	2301      	movs	r3, #1
		anode->data = data;
   21e46:	f8c0 8004 	str.w	r8, [r0, #4]
   21e4a:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   21e4c:	6803      	ldr	r3, [r0, #0]
   21e4e:	f003 0203 	and.w	r2, r3, #3
   21e52:	b95d      	cbnz	r5, 21e6c <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21e54:	6823      	ldr	r3, [r4, #0]
   21e56:	4313      	orrs	r3, r2
   21e58:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21e5a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   21e5c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21e5e:	b973      	cbnz	r3, 21e7e <queue_insert+0xa2>
	list->tail = node;
   21e60:	6060      	str	r0, [r4, #4]
}
   21e62:	e00c      	b.n	21e7e <queue_insert+0xa2>
}
   21e64:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   21e66:	f8c8 9000 	str.w	r9, [r8]
}
   21e6a:	e7ef      	b.n	21e4c <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21e6c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   21e6e:	f033 0303 	bics.w	r3, r3, #3
   21e72:	d110      	bne.n	21e96 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21e74:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   21e76:	6862      	ldr	r2, [r4, #4]
   21e78:	b93a      	cbnz	r2, 21e8a <queue_insert+0xae>
	list->head = node;
   21e7a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   21e7e:	2104      	movs	r1, #4
   21e80:	f104 0010 	add.w	r0, r4, #16
   21e84:	f000 fb7c 	bl	22580 <z_handle_obj_poll_events>
   21e88:	e7c7      	b.n	21e1a <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21e8a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21e8c:	f003 0303 	and.w	r3, r3, #3
   21e90:	4303      	orrs	r3, r0
   21e92:	6013      	str	r3, [r2, #0]
   21e94:	e7e4      	b.n	21e60 <queue_insert+0x84>
   21e96:	4313      	orrs	r3, r2
   21e98:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21e9a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21e9c:	f003 0303 	and.w	r3, r3, #3
   21ea0:	4303      	orrs	r3, r0
   21ea2:	602b      	str	r3, [r5, #0]
}
   21ea4:	e7eb      	b.n	21e7e <queue_insert+0xa2>

00021ea6 <z_queue_node_peek>:
{
   21ea6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   21ea8:	4604      	mov	r4, r0
   21eaa:	b130      	cbz	r0, 21eba <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21eac:	6802      	ldr	r2, [r0, #0]
   21eae:	0793      	lsls	r3, r2, #30
   21eb0:	d003      	beq.n	21eba <z_queue_node_peek+0x14>
		ret = anode->data;
   21eb2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   21eb4:	b109      	cbz	r1, 21eba <z_queue_node_peek+0x14>
			k_free(anode);
   21eb6:	f000 fc24 	bl	22702 <k_free>
}
   21eba:	4620      	mov	r0, r4
   21ebc:	bd10      	pop	{r4, pc}

00021ebe <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   21ebe:	2301      	movs	r3, #1
{
   21ec0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   21ec2:	9300      	str	r3, [sp, #0]
   21ec4:	2300      	movs	r3, #0
{
   21ec6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   21ec8:	4619      	mov	r1, r3
   21eca:	f7ff ff87 	bl	21ddc <queue_insert>
}
   21ece:	b003      	add	sp, #12
   21ed0:	f85d fb04 	ldr.w	pc, [sp], #4

00021ed4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   21ed4:	b15a      	cbz	r2, 21eee <z_impl_k_sem_init+0x1a>
   21ed6:	428a      	cmp	r2, r1
   21ed8:	d309      	bcc.n	21eee <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   21eda:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   21ede:	e9c0 1202 	strd	r1, r2, [r0, #8]
   21ee2:	e9c0 0000 	strd	r0, r0, [r0]
   21ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   21eea:	2000      	movs	r0, #0
   21eec:	4770      	bx	lr
		return -EINVAL;
   21eee:	f06f 0015 	mvn.w	r0, #21
}
   21ef2:	4770      	bx	lr

00021ef4 <notify_queue_locked>:
	if (queue != NULL) {
   21ef4:	b120      	cbz	r0, 21f00 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   21ef6:	2200      	movs	r2, #0
   21ef8:	3098      	adds	r0, #152	; 0x98
   21efa:	4611      	mov	r1, r2
   21efc:	f000 b951 	b.w	221a2 <z_sched_wake>
}
   21f00:	4770      	bx	lr

00021f02 <work_timeout>:
{
   21f02:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   21f04:	f04f 0320 	mov.w	r3, #32
   21f08:	f3ef 8411 	mrs	r4, BASEPRI
   21f0c:	f383 8812 	msr	BASEPRI_MAX, r3
   21f10:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   21f14:	2300      	movs	r3, #0
   21f16:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   21f18:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   21f1c:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21f20:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   21f22:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21f26:	d505      	bpl.n	21f34 <work_timeout+0x32>
		queue = dw->queue;
   21f28:	6983      	ldr	r3, [r0, #24]
		(void)submit_to_queue_locked(wp, &queue);
   21f2a:	a901      	add	r1, sp, #4
   21f2c:	3810      	subs	r0, #16
		queue = dw->queue;
   21f2e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   21f30:	f7fa fd84 	bl	1ca3c <submit_to_queue_locked>
	__asm__ volatile(
   21f34:	f384 8811 	msr	BASEPRI, r4
   21f38:	f3bf 8f6f 	isb	sy
}
   21f3c:	b002      	add	sp, #8
   21f3e:	bd10      	pop	{r4, pc}

00021f40 <k_work_init>:
{
   21f40:	b538      	push	{r3, r4, r5, lr}
   21f42:	4604      	mov	r4, r0
   21f44:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21f46:	2210      	movs	r2, #16
   21f48:	2100      	movs	r1, #0
   21f4a:	f000 fc24 	bl	22796 <memset>
   21f4e:	6065      	str	r5, [r4, #4]
}
   21f50:	bd38      	pop	{r3, r4, r5, pc}

00021f52 <k_work_submit_to_queue>:
{
   21f52:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21f54:	9001      	str	r0, [sp, #4]
   21f56:	4608      	mov	r0, r1
	__asm__ volatile(
   21f58:	f04f 0320 	mov.w	r3, #32
   21f5c:	f3ef 8511 	mrs	r5, BASEPRI
   21f60:	f383 8812 	msr	BASEPRI_MAX, r3
   21f64:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   21f68:	a901      	add	r1, sp, #4
   21f6a:	f7fa fd67 	bl	1ca3c <submit_to_queue_locked>
   21f6e:	4604      	mov	r4, r0
	__asm__ volatile(
   21f70:	f385 8811 	msr	BASEPRI, r5
   21f74:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   21f78:	2800      	cmp	r0, #0
   21f7a:	dd04      	ble.n	21f86 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   21f7c:	f7fb f928 	bl	1d1d0 <z_impl_k_is_preempt_thread>
   21f80:	b108      	cbz	r0, 21f86 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   21f82:	f7fb f877 	bl	1d074 <z_impl_k_yield>
}
   21f86:	4620      	mov	r0, r4
   21f88:	b003      	add	sp, #12
   21f8a:	bd30      	pop	{r4, r5, pc}

00021f8c <k_work_delayable_busy_get>:
	__asm__ volatile(
   21f8c:	f04f 0220 	mov.w	r2, #32
   21f90:	f3ef 8311 	mrs	r3, BASEPRI
   21f94:	f382 8812 	msr	BASEPRI_MAX, r2
   21f98:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   21f9c:	68c0      	ldr	r0, [r0, #12]
   21f9e:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   21fa2:	f383 8811 	msr	BASEPRI, r3
   21fa6:	f3bf 8f6f 	isb	sy
}
   21faa:	4770      	bx	lr

00021fac <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   21fac:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21fb0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21fb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21fb4:	2300      	movs	r3, #0
	node->prev = NULL;
   21fb6:	e9c0 3300 	strd	r3, r3, [r0]
}
   21fba:	4770      	bx	lr

00021fbc <unpend_thread_no_timeout>:
{
   21fbc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   21fbe:	f7ff fff5 	bl	21fac <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21fc2:	7b43      	ldrb	r3, [r0, #13]
   21fc4:	f023 0302 	bic.w	r3, r3, #2
   21fc8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   21fca:	2300      	movs	r3, #0
   21fcc:	6083      	str	r3, [r0, #8]
}
   21fce:	bd08      	pop	{r3, pc}

00021fd0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   21fd0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21fd4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   21fd8:	4283      	cmp	r3, r0
		return b2 - b1;
   21fda:	bf14      	ite	ne
   21fdc:	1ac0      	subne	r0, r0, r3
	return 0;
   21fde:	2000      	moveq	r0, #0
}
   21fe0:	4770      	bx	lr

00021fe2 <z_unpend_thread_no_timeout>:
{
   21fe2:	b508      	push	{r3, lr}
	__asm__ volatile(
   21fe4:	f04f 0320 	mov.w	r3, #32
   21fe8:	f3ef 8111 	mrs	r1, BASEPRI
   21fec:	f383 8812 	msr	BASEPRI_MAX, r3
   21ff0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   21ff4:	f7ff ffe2 	bl	21fbc <unpend_thread_no_timeout>
	__asm__ volatile(
   21ff8:	f381 8811 	msr	BASEPRI, r1
   21ffc:	f3bf 8f6f 	isb	sy
}
   22000:	bd08      	pop	{r3, pc}

00022002 <z_unpend_thread>:
{
   22002:	b510      	push	{r4, lr}
	__asm__ volatile(
   22004:	f04f 0320 	mov.w	r3, #32
   22008:	f3ef 8411 	mrs	r4, BASEPRI
   2200c:	f383 8812 	msr	BASEPRI_MAX, r3
   22010:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22014:	f7ff ffd2 	bl	21fbc <unpend_thread_no_timeout>
	__asm__ volatile(
   22018:	f384 8811 	msr	BASEPRI, r4
   2201c:	f3bf 8f6f 	isb	sy
}
   22020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22024:	3018      	adds	r0, #24
   22026:	f000 b8da 	b.w	221de <z_abort_timeout>

0002202a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2202a:	4603      	mov	r3, r0
   2202c:	b920      	cbnz	r0, 22038 <z_reschedule_irqlock+0xe>
   2202e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   22032:	b90a      	cbnz	r2, 22038 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   22034:	f7f1 bea0 	b.w	13d78 <arch_swap>
   22038:	f383 8811 	msr	BASEPRI, r3
   2203c:	f3bf 8f6f 	isb	sy
}
   22040:	4770      	bx	lr

00022042 <z_reschedule_unlocked>:
	__asm__ volatile(
   22042:	f04f 0320 	mov.w	r3, #32
   22046:	f3ef 8011 	mrs	r0, BASEPRI
   2204a:	f383 8812 	msr	BASEPRI_MAX, r3
   2204e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22052:	f7ff bfea 	b.w	2202a <z_reschedule_irqlock>

00022056 <z_priq_dumb_best>:
{
   22056:	4603      	mov	r3, r0
	return list->head == list;
   22058:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2205a:	4283      	cmp	r3, r0
   2205c:	d003      	beq.n	22066 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2205e:	2800      	cmp	r0, #0
   22060:	bf38      	it	cc
   22062:	2000      	movcc	r0, #0
   22064:	4770      	bx	lr
	struct k_thread *thread = NULL;
   22066:	2000      	movs	r0, #0
}
   22068:	4770      	bx	lr

0002206a <z_ready_thread>:
{
   2206a:	b510      	push	{r4, lr}
   2206c:	f04f 0320 	mov.w	r3, #32
   22070:	f3ef 8411 	mrs	r4, BASEPRI
   22074:	f383 8812 	msr	BASEPRI_MAX, r3
   22078:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2207c:	f7fa feac 	bl	1cdd8 <ready_thread>
	__asm__ volatile(
   22080:	f384 8811 	msr	BASEPRI, r4
   22084:	f3bf 8f6f 	isb	sy
}
   22088:	bd10      	pop	{r4, pc}

0002208a <z_thread_timeout>:
{
   2208a:	4601      	mov	r1, r0
   2208c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2208e:	f04f 0320 	mov.w	r3, #32
   22092:	f3ef 8411 	mrs	r4, BASEPRI
   22096:	f383 8812 	msr	BASEPRI_MAX, r3
   2209a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2209e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   220a2:	f013 0f28 	tst.w	r3, #40	; 0x28
   220a6:	d10d      	bne.n	220c4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   220a8:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   220ac:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   220ae:	b10b      	cbz	r3, 220b4 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   220b0:	f7ff ff84 	bl	21fbc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   220b4:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   220b8:	f023 0314 	bic.w	r3, r3, #20
   220bc:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   220c0:	f7fa fe8a 	bl	1cdd8 <ready_thread>
	__asm__ volatile(
   220c4:	f384 8811 	msr	BASEPRI, r4
   220c8:	f3bf 8f6f 	isb	sy
}
   220cc:	bd10      	pop	{r4, pc}

000220ce <add_to_waitq_locked>:
{
   220ce:	b538      	push	{r3, r4, r5, lr}
   220d0:	4604      	mov	r4, r0
   220d2:	460d      	mov	r5, r1
	unready_thread(thread);
   220d4:	f7fa fed6 	bl	1ce84 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   220d8:	7b63      	ldrb	r3, [r4, #13]
   220da:	f043 0302 	orr.w	r3, r3, #2
   220de:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   220e0:	b1b5      	cbz	r5, 22110 <add_to_waitq_locked+0x42>
	return list->head == list;
   220e2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   220e4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   220e6:	429d      	cmp	r5, r3
   220e8:	bf08      	it	eq
   220ea:	2300      	moveq	r3, #0
   220ec:	2b00      	cmp	r3, #0
   220ee:	bf38      	it	cc
   220f0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   220f2:	b19b      	cbz	r3, 2211c <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   220f4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   220f8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   220fc:	4291      	cmp	r1, r2
   220fe:	d008      	beq.n	22112 <add_to_waitq_locked+0x44>
		return b2 - b1;
   22100:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   22102:	2a00      	cmp	r2, #0
   22104:	dd05      	ble.n	22112 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   22106:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22108:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2210c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2210e:	605c      	str	r4, [r3, #4]
}
   22110:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   22112:	686a      	ldr	r2, [r5, #4]
   22114:	4293      	cmp	r3, r2
   22116:	d001      	beq.n	2211c <add_to_waitq_locked+0x4e>
   22118:	681b      	ldr	r3, [r3, #0]
   2211a:	e7ea      	b.n	220f2 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   2211c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2211e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22122:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22124:	606c      	str	r4, [r5, #4]
   22126:	e7f3      	b.n	22110 <add_to_waitq_locked+0x42>

00022128 <z_unpend1_no_timeout>:
{
   22128:	b510      	push	{r4, lr}
	__asm__ volatile(
   2212a:	f04f 0320 	mov.w	r3, #32
   2212e:	f3ef 8411 	mrs	r4, BASEPRI
   22132:	f383 8812 	msr	BASEPRI_MAX, r3
   22136:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2213a:	f7ff ff8c 	bl	22056 <z_priq_dumb_best>
		if (thread != NULL) {
   2213e:	4601      	mov	r1, r0
   22140:	b108      	cbz	r0, 22146 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   22142:	f7ff ff3b 	bl	21fbc <unpend_thread_no_timeout>
	__asm__ volatile(
   22146:	f384 8811 	msr	BASEPRI, r4
   2214a:	f3bf 8f6f 	isb	sy
}
   2214e:	4608      	mov	r0, r1
   22150:	bd10      	pop	{r4, pc}

00022152 <z_unpend_first_thread>:
{
   22152:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22154:	f04f 0320 	mov.w	r3, #32
   22158:	f3ef 8511 	mrs	r5, BASEPRI
   2215c:	f383 8812 	msr	BASEPRI_MAX, r3
   22160:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22164:	f7ff ff77 	bl	22056 <z_priq_dumb_best>
		if (thread != NULL) {
   22168:	4604      	mov	r4, r0
   2216a:	b120      	cbz	r0, 22176 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2216c:	f7ff ff26 	bl	21fbc <unpend_thread_no_timeout>
   22170:	3018      	adds	r0, #24
   22172:	f000 f834 	bl	221de <z_abort_timeout>
	__asm__ volatile(
   22176:	f385 8811 	msr	BASEPRI, r5
   2217a:	f3bf 8f6f 	isb	sy
}
   2217e:	4620      	mov	r0, r4
   22180:	bd38      	pop	{r3, r4, r5, pc}

00022182 <z_unpend_all>:
{
   22182:	b538      	push	{r3, r4, r5, lr}
   22184:	4605      	mov	r5, r0
	int need_sched = 0;
   22186:	2000      	movs	r0, #0
	return list->head == list;
   22188:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2218a:	42a5      	cmp	r5, r4
   2218c:	d000      	beq.n	22190 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2218e:	b904      	cbnz	r4, 22192 <z_unpend_all+0x10>
}
   22190:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   22192:	4620      	mov	r0, r4
   22194:	f7ff ff35 	bl	22002 <z_unpend_thread>
		z_ready_thread(thread);
   22198:	4620      	mov	r0, r4
   2219a:	f7ff ff66 	bl	2206a <z_ready_thread>
		need_sched = 1;
   2219e:	2001      	movs	r0, #1
   221a0:	e7f2      	b.n	22188 <z_unpend_all+0x6>

000221a2 <z_sched_wake>:
{
   221a2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   221a4:	f04f 0320 	mov.w	r3, #32
   221a8:	f3ef 8511 	mrs	r5, BASEPRI
   221ac:	f383 8812 	msr	BASEPRI_MAX, r3
   221b0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   221b4:	f7ff ff4f 	bl	22056 <z_priq_dumb_best>
		if (thread != NULL) {
   221b8:	4604      	mov	r4, r0
   221ba:	b158      	cbz	r0, 221d4 <z_sched_wake+0x32>
   221bc:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   221c0:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   221c2:	f7ff fefb 	bl	21fbc <unpend_thread_no_timeout>
   221c6:	3018      	adds	r0, #24
   221c8:	f000 f809 	bl	221de <z_abort_timeout>
			ready_thread(thread);
   221cc:	4620      	mov	r0, r4
   221ce:	f7fa fe03 	bl	1cdd8 <ready_thread>
			ret = true;
   221d2:	2001      	movs	r0, #1
	__asm__ volatile(
   221d4:	f385 8811 	msr	BASEPRI, r5
   221d8:	f3bf 8f6f 	isb	sy
}
   221dc:	bd38      	pop	{r3, r4, r5, pc}

000221de <z_abort_timeout>:
{
   221de:	b510      	push	{r4, lr}
	__asm__ volatile(
   221e0:	f04f 0220 	mov.w	r2, #32
   221e4:	f3ef 8411 	mrs	r4, BASEPRI
   221e8:	f382 8812 	msr	BASEPRI_MAX, r2
   221ec:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   221f0:	6803      	ldr	r3, [r0, #0]
   221f2:	b13b      	cbz	r3, 22204 <z_abort_timeout+0x26>
			remove_timeout(to);
   221f4:	f7fb f884 	bl	1d300 <remove_timeout>
			ret = 0;
   221f8:	2000      	movs	r0, #0
	__asm__ volatile(
   221fa:	f384 8811 	msr	BASEPRI, r4
   221fe:	f3bf 8f6f 	isb	sy
}
   22202:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22204:	f06f 0015 	mvn.w	r0, #21
   22208:	e7f7      	b.n	221fa <z_abort_timeout+0x1c>

0002220a <z_get_next_timeout_expiry>:
{
   2220a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2220c:	f04f 0320 	mov.w	r3, #32
   22210:	f3ef 8411 	mrs	r4, BASEPRI
   22214:	f383 8812 	msr	BASEPRI_MAX, r3
   22218:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2221c:	f7fb f88a 	bl	1d334 <next_timeout>
	__asm__ volatile(
   22220:	f384 8811 	msr	BASEPRI, r4
   22224:	f3bf 8f6f 	isb	sy
}
   22228:	bd10      	pop	{r4, pc}

0002222a <z_set_timeout_expiry>:
{
   2222a:	b570      	push	{r4, r5, r6, lr}
   2222c:	4604      	mov	r4, r0
   2222e:	460d      	mov	r5, r1
	__asm__ volatile(
   22230:	f04f 0320 	mov.w	r3, #32
   22234:	f3ef 8611 	mrs	r6, BASEPRI
   22238:	f383 8812 	msr	BASEPRI_MAX, r3
   2223c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   22240:	f7fb f878 	bl	1d334 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22244:	2801      	cmp	r0, #1
   22246:	dd05      	ble.n	22254 <z_set_timeout_expiry+0x2a>
   22248:	42a0      	cmp	r0, r4
   2224a:	db03      	blt.n	22254 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2224c:	4629      	mov	r1, r5
   2224e:	4620      	mov	r0, r4
   22250:	f7f3 fac4 	bl	157dc <sys_clock_set_timeout>
	__asm__ volatile(
   22254:	f386 8811 	msr	BASEPRI, r6
   22258:	f3bf 8f6f 	isb	sy
}
   2225c:	bd70      	pop	{r4, r5, r6, pc}

0002225e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2225e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   22260:	f7fb f986 	bl	1d570 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   22264:	bd08      	pop	{r3, pc}

00022266 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   22266:	f7fb b983 	b.w	1d570 <sys_clock_tick_get>

0002226a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2226a:	b108      	cbz	r0, 22270 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2226c:	f7f0 bccc 	b.w	12c08 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   22270:	4770      	bx	lr

00022272 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   22272:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22274:	1c4b      	adds	r3, r1, #1
   22276:	bf08      	it	eq
   22278:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2227c:	4604      	mov	r4, r0
   2227e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22280:	d013      	beq.n	222aa <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22282:	ea54 0105 	orrs.w	r1, r4, r5
   22286:	d103      	bne.n	22290 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   22288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2228c:	f7fb b970 	b.w	1d570 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   22290:	f06f 0101 	mvn.w	r1, #1
   22294:	1a0a      	subs	r2, r1, r0
   22296:	f04f 31ff 	mov.w	r1, #4294967295
   2229a:	eb61 0305 	sbc.w	r3, r1, r5
   2229e:	2a00      	cmp	r2, #0
   222a0:	f173 0100 	sbcs.w	r1, r3, #0
   222a4:	db02      	blt.n	222ac <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   222a6:	4610      	mov	r0, r2
   222a8:	4619      	mov	r1, r3
}
   222aa:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   222ac:	f7fb f960 	bl	1d570 <sys_clock_tick_get>
   222b0:	2c01      	cmp	r4, #1
   222b2:	f175 0300 	sbcs.w	r3, r5, #0
   222b6:	bfbc      	itt	lt
   222b8:	2401      	movlt	r4, #1
   222ba:	2500      	movlt	r5, #0
   222bc:	1820      	adds	r0, r4, r0
   222be:	eb45 0101 	adc.w	r1, r5, r1
   222c2:	e7f2      	b.n	222aa <sys_clock_timeout_end_calc+0x38>

000222c4 <k_timer_init>:
	timer->status = 0U;
   222c4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   222c6:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   222ca:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   222ce:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   222d2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   222d6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   222d8:	6343      	str	r3, [r0, #52]	; 0x34
}
   222da:	4770      	bx	lr

000222dc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   222dc:	b510      	push	{r4, lr}
   222de:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   222e0:	f7ff ff7d 	bl	221de <z_abort_timeout>

	if (inactive) {
   222e4:	b9b0      	cbnz	r0, 22314 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   222e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   222e8:	b10b      	cbz	r3, 222ee <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   222ea:	4620      	mov	r0, r4
   222ec:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   222ee:	f104 0018 	add.w	r0, r4, #24
   222f2:	f7ff ff19 	bl	22128 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   222f6:	b168      	cbz	r0, 22314 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   222f8:	f7ff feb7 	bl	2206a <z_ready_thread>
	__asm__ volatile(
   222fc:	f04f 0320 	mov.w	r3, #32
   22300:	f3ef 8011 	mrs	r0, BASEPRI
   22304:	f383 8812 	msr	BASEPRI_MAX, r3
   22308:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2230c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   22310:	f7ff be8b 	b.w	2202a <z_reschedule_irqlock>
   22314:	bd10      	pop	{r4, pc}

00022316 <clear_event_registrations>:
	while (num_events--) {
   22316:	2314      	movs	r3, #20
{
   22318:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   2231a:	2400      	movs	r4, #0
   2231c:	2601      	movs	r6, #1
   2231e:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   22322:	4281      	cmp	r1, r0
   22324:	d100      	bne.n	22328 <clear_event_registrations+0x12>
}
   22326:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   22328:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2232c:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   22330:	f003 031f 	and.w	r3, r3, #31
   22334:	2b08      	cmp	r3, #8
   22336:	d80d      	bhi.n	22354 <clear_event_registrations+0x3e>
   22338:	fa06 f303 	lsl.w	r3, r6, r3
   2233c:	f413 7f8b 	tst.w	r3, #278	; 0x116
   22340:	d008      	beq.n	22354 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22342:	f851 3c14 	ldr.w	r3, [r1, #-20]
   22346:	b12b      	cbz	r3, 22354 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   22348:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   2234c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2234e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   22350:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   22354:	f382 8811 	msr	BASEPRI, r2
   22358:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2235c:	f04f 0320 	mov.w	r3, #32
   22360:	f3ef 8211 	mrs	r2, BASEPRI
   22364:	f383 8812 	msr	BASEPRI_MAX, r3
   22368:	f3bf 8f6f 	isb	sy
   2236c:	3914      	subs	r1, #20
   2236e:	e7d8      	b.n	22322 <clear_event_registrations+0xc>

00022370 <add_event>:
{
   22370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22372:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22374:	e9d0 2300 	ldrd	r2, r3, [r0]
   22378:	4290      	cmp	r0, r2
   2237a:	4604      	mov	r4, r0
   2237c:	460d      	mov	r5, r1
   2237e:	d105      	bne.n	2238c <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   22380:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   22382:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   22386:	601d      	str	r5, [r3, #0]
	list->tail = node;
   22388:	6065      	str	r5, [r4, #4]
}
   2238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2238c:	2b00      	cmp	r3, #0
   2238e:	d0f7      	beq.n	22380 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22390:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22392:	b100      	cbz	r0, 22396 <add_event+0x26>
   22394:	3860      	subs	r0, #96	; 0x60
   22396:	b107      	cbz	r7, 2239a <add_event+0x2a>
   22398:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2239a:	4639      	mov	r1, r7
   2239c:	f7ff fe18 	bl	21fd0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   223a0:	2800      	cmp	r0, #0
   223a2:	dced      	bgt.n	22380 <add_event+0x10>
	return list->head == list;
   223a4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   223a6:	42b4      	cmp	r4, r6
   223a8:	d0ea      	beq.n	22380 <add_event+0x10>
   223aa:	2e00      	cmp	r6, #0
   223ac:	bf38      	it	cc
   223ae:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   223b0:	2e00      	cmp	r6, #0
   223b2:	d0e5      	beq.n	22380 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   223b4:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   223b6:	b101      	cbz	r1, 223ba <add_event+0x4a>
   223b8:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   223ba:	4638      	mov	r0, r7
   223bc:	f7ff fe08 	bl	21fd0 <z_sched_prio_cmp>
   223c0:	2800      	cmp	r0, #0
   223c2:	dd05      	ble.n	223d0 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   223c4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   223c6:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   223ca:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   223cc:	6075      	str	r5, [r6, #4]
			return;
   223ce:	e7dc      	b.n	2238a <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   223d0:	6863      	ldr	r3, [r4, #4]
   223d2:	42b3      	cmp	r3, r6
   223d4:	d0d4      	beq.n	22380 <add_event+0x10>
   223d6:	6836      	ldr	r6, [r6, #0]
   223d8:	e7ea      	b.n	223b0 <add_event+0x40>

000223da <register_events>:
{
   223da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   223de:	2500      	movs	r5, #0
{
   223e0:	468b      	mov	fp, r1
   223e2:	4614      	mov	r4, r2
   223e4:	461f      	mov	r7, r3
   223e6:	4682      	mov	sl, r0
	int events_registered = 0;
   223e8:	462e      	mov	r6, r5
	event->poller = NULL;
   223ea:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   223ec:	455d      	cmp	r5, fp
   223ee:	db02      	blt.n	223f6 <register_events+0x1c>
}
   223f0:	4630      	mov	r0, r6
   223f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223f6:	f04f 0320 	mov.w	r3, #32
   223fa:	f3ef 8911 	mrs	r9, BASEPRI
   223fe:	f383 8812 	msr	BASEPRI_MAX, r3
   22402:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   22406:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2240a:	f003 031f 	and.w	r3, r3, #31
   2240e:	3b01      	subs	r3, #1
   22410:	2b07      	cmp	r3, #7
   22412:	d80f      	bhi.n	22434 <register_events+0x5a>
   22414:	e8df f003 	tbb	[pc, r3]
   22418:	0a0e041e 	.word	0x0a0e041e
   2241c:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   22420:	f8da 3010 	ldr.w	r3, [sl, #16]
   22424:	689b      	ldr	r3, [r3, #8]
   22426:	b12b      	cbz	r3, 22434 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22428:	2302      	movs	r3, #2
   2242a:	e020      	b.n	2246e <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2242c:	f8da 3010 	ldr.w	r3, [sl, #16]
   22430:	681b      	ldr	r3, [r3, #0]
   22432:	bb8b      	cbnz	r3, 22498 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   22434:	bb47      	cbnz	r7, 22488 <register_events+0xae>
   22436:	7823      	ldrb	r3, [r4, #0]
   22438:	b333      	cbz	r3, 22488 <register_events+0xae>
	switch (event->type) {
   2243a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2243e:	f003 031f 	and.w	r3, r3, #31
   22442:	3b01      	subs	r3, #1
   22444:	2b07      	cmp	r3, #7
   22446:	d830      	bhi.n	224aa <register_events+0xd0>
   22448:	e8df f003 	tbb	[pc, r3]
   2244c:	282f2833 	.word	0x282f2833
   22450:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   22454:	f8da 3010 	ldr.w	r3, [sl, #16]
   22458:	689b      	ldr	r3, [r3, #8]
   2245a:	2b00      	cmp	r3, #0
   2245c:	d0ea      	beq.n	22434 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2245e:	2301      	movs	r3, #1
   22460:	e005      	b.n	2246e <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   22462:	f8da 3010 	ldr.w	r3, [sl, #16]
   22466:	6a1b      	ldr	r3, [r3, #32]
   22468:	2b00      	cmp	r3, #0
   2246a:	d0e3      	beq.n	22434 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2246c:	2310      	movs	r3, #16
	event->state |= state;
   2246e:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   22472:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   22476:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2247a:	430b      	orrs	r3, r1
   2247c:	f363 3252 	bfi	r2, r3, #13, #6
   22480:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   22484:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   22488:	f389 8811 	msr	BASEPRI, r9
   2248c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22490:	3501      	adds	r5, #1
   22492:	f10a 0a14 	add.w	sl, sl, #20
   22496:	e7a9      	b.n	223ec <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22498:	2304      	movs	r3, #4
   2249a:	e7e8      	b.n	2246e <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2249c:	4622      	mov	r2, r4
   2249e:	4651      	mov	r1, sl
   224a0:	f8da 0010 	ldr.w	r0, [sl, #16]
   224a4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   224a6:	f7ff ff63 	bl	22370 <add_event>
	event->poller = poller;
   224aa:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   224ae:	3601      	adds	r6, #1
   224b0:	e7ea      	b.n	22488 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   224b2:	4622      	mov	r2, r4
   224b4:	4651      	mov	r1, sl
   224b6:	f8da 0010 	ldr.w	r0, [sl, #16]
   224ba:	e7f4      	b.n	224a6 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   224bc:	f8da 0010 	ldr.w	r0, [sl, #16]
   224c0:	4622      	mov	r2, r4
   224c2:	4651      	mov	r1, sl
   224c4:	3024      	adds	r0, #36	; 0x24
   224c6:	e7ee      	b.n	224a6 <register_events+0xcc>

000224c8 <signal_poll_event>:
{
   224c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   224cc:	6884      	ldr	r4, [r0, #8]
{
   224ce:	4605      	mov	r5, r0
   224d0:	460e      	mov	r6, r1
	if (poller != NULL) {
   224d2:	b144      	cbz	r4, 224e6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   224d4:	7863      	ldrb	r3, [r4, #1]
   224d6:	2b01      	cmp	r3, #1
   224d8:	d138      	bne.n	2254c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   224da:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   224de:	f013 0302 	ands.w	r3, r3, #2
   224e2:	d10a      	bne.n	224fa <signal_poll_event+0x32>
		poller->is_polling = false;
   224e4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   224e6:	2000      	movs	r0, #0
	event->state |= state;
   224e8:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   224ea:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   224ec:	f3c3 3145 	ubfx	r1, r3, #13, #6
   224f0:	430e      	orrs	r6, r1
   224f2:	f366 3352 	bfi	r3, r6, #13, #6
   224f6:	60eb      	str	r3, [r5, #12]
	return retcode;
   224f8:	e00d      	b.n	22516 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   224fa:	f04f 31ff 	mov.w	r1, #4294967295
   224fe:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   22502:	f06f 0001 	mvn.w	r0, #1
   22506:	428b      	cmp	r3, r1
   22508:	bf08      	it	eq
   2250a:	4282      	cmpeq	r2, r0
   2250c:	d105      	bne.n	2251a <signal_poll_event+0x52>
		poller->is_polling = false;
   2250e:	2300      	movs	r3, #0
		return -EAGAIN;
   22510:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   22514:	7023      	strb	r3, [r4, #0]
}
   22516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2251a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2251e:	4640      	mov	r0, r8
   22520:	f7ff fd6f 	bl	22002 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   22524:	2e08      	cmp	r6, #8
   22526:	bf0c      	ite	eq
   22528:	f06f 0303 	mvneq.w	r3, #3
   2252c:	2300      	movne	r3, #0
   2252e:	62a3      	str	r3, [r4, #40]	; 0x28
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22530:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   22534:	06db      	lsls	r3, r3, #27
   22536:	d102      	bne.n	2253e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   22538:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2253c:	b10f      	cbz	r7, 22542 <signal_poll_event+0x7a>
		poller->is_polling = false;
   2253e:	2300      	movs	r3, #0
   22540:	e7d0      	b.n	224e4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   22542:	4640      	mov	r0, r8
   22544:	f7ff fd91 	bl	2206a <z_ready_thread>
		poller->is_polling = false;
   22548:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2254a:	e7cc      	b.n	224e6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2254c:	2b02      	cmp	r3, #2
   2254e:	d1f6      	bne.n	2253e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   22550:	7823      	ldrb	r3, [r4, #0]
   22552:	2b00      	cmp	r3, #0
   22554:	d0c7      	beq.n	224e6 <signal_poll_event+0x1e>
   22556:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2255a:	2f00      	cmp	r7, #0
   2255c:	d0f4      	beq.n	22548 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2255e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   22562:	f1a4 0914 	sub.w	r9, r4, #20
   22566:	f104 0014 	add.w	r0, r4, #20
   2256a:	f7ff fe38 	bl	221de <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   2256e:	4649      	mov	r1, r9
   22570:	4638      	mov	r0, r7
		twork->poll_result = 0;
   22572:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   22576:	f7ff fcec 	bl	21f52 <k_work_submit_to_queue>
		poller->is_polling = false;
   2257a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2257e:	e7b2      	b.n	224e6 <signal_poll_event+0x1e>

00022580 <z_handle_obj_poll_events>:
{
   22580:	4603      	mov	r3, r0
	return list->head == list;
   22582:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   22584:	4283      	cmp	r3, r0
   22586:	d008      	beq.n	2259a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   22588:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2258c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2258e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22590:	2300      	movs	r3, #0
	node->prev = NULL;
   22592:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   22596:	f7ff bf97 	b.w	224c8 <signal_poll_event>
}
   2259a:	4770      	bx	lr

0002259c <k_event_post_internal>:
	return match != 0;
}

static void k_event_post_internal(struct k_event *event, uint32_t events,
				  bool accumulate)
{
   2259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   225a0:	460e      	mov	r6, r1
	k_spinlock_key_t  key;
	struct k_thread  *thread;
	unsigned int      wait_condition;
	struct k_thread  *head = NULL;

	key = k_spin_lock(&event->lock);
   225a2:	f100 070c 	add.w	r7, r0, #12
	__asm__ volatile(
   225a6:	f04f 0320 	mov.w	r3, #32
   225aa:	f3ef 8811 	mrs	r8, BASEPRI
   225ae:	f383 8812 	msr	BASEPRI_MAX, r3
   225b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, post, event, events,
					accumulate);

	if (accumulate) {
   225b6:	b10a      	cbz	r2, 225bc <k_event_post_internal+0x20>
		events |= event->events;
   225b8:	6883      	ldr	r3, [r0, #8]
   225ba:	431e      	orrs	r6, r3
	return list->head == list;
   225bc:	6803      	ldr	r3, [r0, #0]
	}

	event->events = events;
   225be:	6086      	str	r6, [r0, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225c0:	4298      	cmp	r0, r3
   225c2:	d018      	beq.n	225f6 <k_event_post_internal+0x5a>
   225c4:	2b00      	cmp	r3, #0
   225c6:	bf38      	it	cc
   225c8:	2300      	movcc	r3, #0
	return (node == list->tail) ? NULL : node->next;
   225ca:	2500      	movs	r5, #0
	 * 1. Create a linked list of threads to unpend.
	 * 2. Unpend each of the threads in the linked list
	 * 3. Ready each of the threads in the linked list
	 */

	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   225cc:	b9ab      	cbnz	r3, 225fa <k_event_post_internal+0x5e>
		}


	}

	if (head != NULL) {
   225ce:	b165      	cbz	r5, 225ea <k_event_post_internal+0x4e>
   225d0:	461c      	mov	r4, r3
		thread = head;
		do {
			z_unpend_thread(thread);
   225d2:	4628      	mov	r0, r5
   225d4:	f7ff fd15 	bl	22002 <z_unpend_thread>
			arch_thread_return_value_set(thread, 0);
			thread->events = events;
			z_ready_thread(thread);
   225d8:	4628      	mov	r0, r5
   225da:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
			thread->events = events;
   225de:	66ae      	str	r6, [r5, #104]	; 0x68
			z_ready_thread(thread);
   225e0:	f7ff fd43 	bl	2206a <z_ready_thread>
			thread = thread->next_event_link;
   225e4:	6e6d      	ldr	r5, [r5, #100]	; 0x64
		} while (thread != NULL);
   225e6:	2d00      	cmp	r5, #0
   225e8:	d1f3      	bne.n	225d2 <k_event_post_internal+0x36>
	}

	z_reschedule(&event->lock, key);
   225ea:	4641      	mov	r1, r8
   225ec:	4638      	mov	r0, r7

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, post, event, events,
				       accumulate);
}
   225ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_reschedule(&event->lock, key);
   225f2:	f7fa bb2b 	b.w	1cc4c <z_reschedule>
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   225f6:	2300      	movs	r3, #0
   225f8:	e7e7      	b.n	225ca <k_event_post_internal+0x2e>
		wait_condition = thread->event_options & K_EVENT_WAIT_MASK;
   225fa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
		if (are_wait_conditions_met(thread->events, events,
   225fc:	6e9c      	ldr	r4, [r3, #104]	; 0x68
	if (wait_condition == K_EVENT_WAIT_ALL) {
   225fe:	07c9      	lsls	r1, r1, #31
	uint32_t  match = current & desired;
   22600:	ea04 0206 	and.w	r2, r4, r6
	if (wait_condition == K_EVENT_WAIT_ALL) {
   22604:	d50e      	bpl.n	22624 <k_event_post_internal+0x88>
		return match == desired;
   22606:	1aa1      	subs	r1, r4, r2
   22608:	424a      	negs	r2, r1
   2260a:	414a      	adcs	r2, r1
		if (are_wait_conditions_met(thread->events, events,
   2260c:	b10a      	cbz	r2, 22612 <k_event_post_internal+0x76>
			thread->next_event_link = head;
   2260e:	665d      	str	r5, [r3, #100]	; 0x64
   22610:	461d      	mov	r5, r3
   22612:	6842      	ldr	r2, [r0, #4]
   22614:	4293      	cmp	r3, r2
   22616:	bf0c      	ite	eq
   22618:	2300      	moveq	r3, #0
   2261a:	681b      	ldrne	r3, [r3, #0]
   2261c:	2b00      	cmp	r3, #0
   2261e:	bf38      	it	cc
   22620:	2300      	movcc	r3, #0
   22622:	e7d3      	b.n	225cc <k_event_post_internal+0x30>
	return match != 0;
   22624:	3a00      	subs	r2, #0
   22626:	bf18      	it	ne
   22628:	2201      	movne	r2, #1
   2262a:	e7ef      	b.n	2260c <k_event_post_internal+0x70>

0002262c <k_event_wait_internal>:
#include <syscalls/k_event_set_mrsh.c>
#endif

static uint32_t k_event_wait_internal(struct k_event *event, uint32_t events,
				      unsigned int options, k_timeout_t timeout)
{
   2262c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22630:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   22634:	4681      	mov	r9, r0
   22636:	4692      	mov	sl, r2
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, wait, event, events,
					options, timeout);

	if (events == 0) {
   22638:	460c      	mov	r4, r1
   2263a:	b311      	cbz	r1, 22682 <k_event_wait_internal+0x56>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event, events, 0);
		return 0;
	}

	wait_condition = options & K_EVENT_WAIT_MASK;
   2263c:	f002 0b01 	and.w	fp, r2, #1
	return z_impl_z_current_get();
   22640:	f7fa fdc0 	bl	1d1c4 <z_impl_z_current_get>
   22644:	4680      	mov	r8, r0
   22646:	f04f 0320 	mov.w	r3, #32
   2264a:	f3ef 8111 	mrs	r1, BASEPRI
   2264e:	f383 8812 	msr	BASEPRI_MAX, r3
   22652:	f3bf 8f6f 	isb	sy
	thread = z_current_get();

	k_spinlock_key_t  key = k_spin_lock(&event->lock);

	if (options & K_EVENT_WAIT_RESET) {
   22656:	f01a 0f02 	tst.w	sl, #2
		event->events = 0;
   2265a:	bf1c      	itt	ne
   2265c:	2300      	movne	r3, #0
   2265e:	f8c9 3008 	strne.w	r3, [r9, #8]
	}

	/* Test if the wait conditions have already been met. */

	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   22662:	f8d9 3008 	ldr.w	r3, [r9, #8]
	uint32_t  match = current & desired;
   22666:	ea03 0504 	and.w	r5, r3, r4
	if (wait_condition == K_EVENT_WAIT_ALL) {
   2266a:	f1bb 0f00 	cmp.w	fp, #0
   2266e:	d00c      	beq.n	2268a <k_event_wait_internal+0x5e>
		return match == desired;
   22670:	1b62      	subs	r2, r4, r5
   22672:	4255      	negs	r5, r2
   22674:	4155      	adcs	r5, r2
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   22676:	b165      	cbz	r5, 22692 <k_event_wait_internal+0x66>
	__asm__ volatile(
   22678:	f381 8811 	msr	BASEPRI, r1
   2267c:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event,
				       events, rv & events);

	return rv & events;
   22680:	401c      	ands	r4, r3
}
   22682:	4620      	mov	r0, r4
   22684:	b003      	add	sp, #12
   22686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return match != 0;
   2268a:	3d00      	subs	r5, #0
   2268c:	bf18      	it	ne
   2268e:	2501      	movne	r5, #1
   22690:	e7f1      	b.n	22676 <k_event_wait_internal+0x4a>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22692:	ea56 0307 	orrs.w	r3, r6, r7
   22696:	d105      	bne.n	226a4 <k_event_wait_internal+0x78>
   22698:	f381 8811 	msr	BASEPRI, r1
   2269c:	f3bf 8f6f 	isb	sy
	uint32_t  rv = 0;
   226a0:	462b      	mov	r3, r5
   226a2:	e7ed      	b.n	22680 <k_event_wait_internal+0x54>
	thread->event_options = options;
   226a4:	e9c8 4a1a 	strd	r4, sl, [r8, #104]	; 0x68
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   226a8:	464a      	mov	r2, r9
   226aa:	e9cd 6700 	strd	r6, r7, [sp]
   226ae:	f109 000c 	add.w	r0, r9, #12
   226b2:	f7fa fc25 	bl	1cf00 <z_pend_curr>
   226b6:	2800      	cmp	r0, #0
   226b8:	d1f2      	bne.n	226a0 <k_event_wait_internal+0x74>
		rv = thread->events;
   226ba:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
   226be:	e7df      	b.n	22680 <k_event_wait_internal+0x54>

000226c0 <z_impl_k_event_init>:
	event->events = 0;
   226c0:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   226c2:	e9c0 0000 	strd	r0, r0, [r0]
   226c6:	6083      	str	r3, [r0, #8]
}
   226c8:	4770      	bx	lr

000226ca <z_impl_k_event_post>:
	k_event_post_internal(event, events, true);
   226ca:	2201      	movs	r2, #1
   226cc:	f7ff bf66 	b.w	2259c <k_event_post_internal>

000226d0 <z_impl_k_event_wait>:
 * Wait for any of the specified events
 */
uint32_t z_impl_k_event_wait(struct k_event *event, uint32_t events,
			     bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? K_EVENT_WAIT_RESET : 0;
   226d0:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   226d2:	bf14      	ite	ne
   226d4:	2202      	movne	r2, #2
   226d6:	2200      	moveq	r2, #0
   226d8:	f7ff bfa8 	b.w	2262c <k_event_wait_internal>

000226dc <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   226dc:	2304      	movs	r3, #4
   226de:	18d2      	adds	r2, r2, r3
{
   226e0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   226e2:	4604      	mov	r4, r0
   226e4:	d207      	bcs.n	226f6 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   226e6:	2600      	movs	r6, #0
   226e8:	2700      	movs	r7, #0
   226ea:	4319      	orrs	r1, r3
   226ec:	e9cd 6700 	strd	r6, r7, [sp]
   226f0:	f7ff faa6 	bl	21c40 <k_heap_aligned_alloc>
	if (mem == NULL) {
   226f4:	b910      	cbnz	r0, 226fc <z_heap_aligned_alloc+0x20>
		return NULL;
   226f6:	2000      	movs	r0, #0
}
   226f8:	b002      	add	sp, #8
   226fa:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   226fc:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   22700:	e7fa      	b.n	226f8 <z_heap_aligned_alloc+0x1c>

00022702 <k_free>:
	if (ptr != NULL) {
   22702:	b120      	cbz	r0, 2270e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   22704:	1f01      	subs	r1, r0, #4
   22706:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2270a:	f7ff baea 	b.w	21ce2 <k_heap_free>
}
   2270e:	4770      	bx	lr

00022710 <k_malloc>:
{
   22710:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   22712:	2004      	movs	r0, #4
   22714:	f7fb b870 	b.w	1d7f8 <k_aligned_alloc>

00022718 <k_calloc>:
{
   22718:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2271a:	fb01 f500 	mul.w	r5, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2271e:	b118      	cbz	r0, 22728 <k_calloc+0x10>
   22720:	fbb5 f0f0 	udiv	r0, r5, r0
   22724:	4281      	cmp	r1, r0
   22726:	d10a      	bne.n	2273e <k_calloc+0x26>
	ret = k_malloc(bounds);
   22728:	4628      	mov	r0, r5
   2272a:	f7ff fff1 	bl	22710 <k_malloc>
	if (ret != NULL) {
   2272e:	4604      	mov	r4, r0
   22730:	b118      	cbz	r0, 2273a <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   22732:	462a      	mov	r2, r5
   22734:	2100      	movs	r1, #0
   22736:	f000 f82e 	bl	22796 <memset>
}
   2273a:	4620      	mov	r0, r4
   2273c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   2273e:	2400      	movs	r4, #0
   22740:	e7fb      	b.n	2273a <k_calloc+0x22>

00022742 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   22742:	4770      	bx	lr

00022744 <memchr>:
   22744:	b2c9      	uxtb	r1, r1
   22746:	4603      	mov	r3, r0
   22748:	4402      	add	r2, r0
   2274a:	b510      	push	{r4, lr}
   2274c:	4293      	cmp	r3, r2
   2274e:	4618      	mov	r0, r3
   22750:	d101      	bne.n	22756 <memchr+0x12>
   22752:	2000      	movs	r0, #0
   22754:	e003      	b.n	2275e <memchr+0x1a>
   22756:	7804      	ldrb	r4, [r0, #0]
   22758:	3301      	adds	r3, #1
   2275a:	428c      	cmp	r4, r1
   2275c:	d1f6      	bne.n	2274c <memchr+0x8>
   2275e:	bd10      	pop	{r4, pc}

00022760 <memcmp>:
   22760:	b530      	push	{r4, r5, lr}
   22762:	3901      	subs	r1, #1
   22764:	2400      	movs	r4, #0
   22766:	42a2      	cmp	r2, r4
   22768:	d101      	bne.n	2276e <memcmp+0xe>
   2276a:	2000      	movs	r0, #0
   2276c:	e005      	b.n	2277a <memcmp+0x1a>
   2276e:	5d03      	ldrb	r3, [r0, r4]
   22770:	3401      	adds	r4, #1
   22772:	5d0d      	ldrb	r5, [r1, r4]
   22774:	42ab      	cmp	r3, r5
   22776:	d0f6      	beq.n	22766 <memcmp+0x6>
   22778:	1b58      	subs	r0, r3, r5
   2277a:	bd30      	pop	{r4, r5, pc}

0002277c <memcpy>:
   2277c:	440a      	add	r2, r1
   2277e:	1e43      	subs	r3, r0, #1
   22780:	4291      	cmp	r1, r2
   22782:	d100      	bne.n	22786 <memcpy+0xa>
   22784:	4770      	bx	lr
   22786:	b510      	push	{r4, lr}
   22788:	f811 4b01 	ldrb.w	r4, [r1], #1
   2278c:	4291      	cmp	r1, r2
   2278e:	f803 4f01 	strb.w	r4, [r3, #1]!
   22792:	d1f9      	bne.n	22788 <memcpy+0xc>
   22794:	bd10      	pop	{r4, pc}

00022796 <memset>:
   22796:	4402      	add	r2, r0
   22798:	4603      	mov	r3, r0
   2279a:	4293      	cmp	r3, r2
   2279c:	d100      	bne.n	227a0 <memset+0xa>
   2279e:	4770      	bx	lr
   227a0:	f803 1b01 	strb.w	r1, [r3], #1
   227a4:	e7f9      	b.n	2279a <memset+0x4>

000227a6 <__seofread>:
   227a6:	2000      	movs	r0, #0
   227a8:	4770      	bx	lr

000227aa <strchr>:
   227aa:	b2c9      	uxtb	r1, r1
   227ac:	4603      	mov	r3, r0
   227ae:	4618      	mov	r0, r3
   227b0:	f813 2b01 	ldrb.w	r2, [r3], #1
   227b4:	b112      	cbz	r2, 227bc <strchr+0x12>
   227b6:	428a      	cmp	r2, r1
   227b8:	d1f9      	bne.n	227ae <strchr+0x4>
   227ba:	4770      	bx	lr
   227bc:	2900      	cmp	r1, #0
   227be:	bf18      	it	ne
   227c0:	2000      	movne	r0, #0
   227c2:	4770      	bx	lr

000227c4 <strcpy>:
   227c4:	4603      	mov	r3, r0
   227c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   227ca:	f803 2b01 	strb.w	r2, [r3], #1
   227ce:	2a00      	cmp	r2, #0
   227d0:	d1f9      	bne.n	227c6 <strcpy+0x2>
   227d2:	4770      	bx	lr

000227d4 <strncmp>:
   227d4:	b510      	push	{r4, lr}
   227d6:	b16a      	cbz	r2, 227f4 <strncmp+0x20>
   227d8:	3901      	subs	r1, #1
   227da:	1884      	adds	r4, r0, r2
   227dc:	f810 3b01 	ldrb.w	r3, [r0], #1
   227e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   227e4:	4293      	cmp	r3, r2
   227e6:	d103      	bne.n	227f0 <strncmp+0x1c>
   227e8:	42a0      	cmp	r0, r4
   227ea:	d001      	beq.n	227f0 <strncmp+0x1c>
   227ec:	2b00      	cmp	r3, #0
   227ee:	d1f5      	bne.n	227dc <strncmp+0x8>
   227f0:	1a98      	subs	r0, r3, r2
   227f2:	bd10      	pop	{r4, pc}
   227f4:	4610      	mov	r0, r2
   227f6:	e7fc      	b.n	227f2 <strncmp+0x1e>

000227f8 <strncpy>:
   227f8:	3901      	subs	r1, #1
   227fa:	4603      	mov	r3, r0
   227fc:	b510      	push	{r4, lr}
   227fe:	b132      	cbz	r2, 2280e <strncpy+0x16>
   22800:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   22804:	3a01      	subs	r2, #1
   22806:	f803 4b01 	strb.w	r4, [r3], #1
   2280a:	2c00      	cmp	r4, #0
   2280c:	d1f7      	bne.n	227fe <strncpy+0x6>
   2280e:	441a      	add	r2, r3
   22810:	2100      	movs	r1, #0
   22812:	4293      	cmp	r3, r2
   22814:	d100      	bne.n	22818 <strncpy+0x20>
   22816:	bd10      	pop	{r4, pc}
   22818:	f803 1b01 	strb.w	r1, [r3], #1
   2281c:	e7f9      	b.n	22812 <strncpy+0x1a>

0002281e <strnlen>:
   2281e:	4602      	mov	r2, r0
   22820:	4401      	add	r1, r0
   22822:	b510      	push	{r4, lr}
   22824:	428a      	cmp	r2, r1
   22826:	4613      	mov	r3, r2
   22828:	d101      	bne.n	2282e <strnlen+0x10>
   2282a:	1a18      	subs	r0, r3, r0
   2282c:	bd10      	pop	{r4, pc}
   2282e:	781c      	ldrb	r4, [r3, #0]
   22830:	3201      	adds	r2, #1
   22832:	2c00      	cmp	r4, #0
   22834:	d1f6      	bne.n	22824 <strnlen+0x6>
   22836:	e7f8      	b.n	2282a <strnlen+0xc>

00022838 <strstr>:
   22838:	b5f0      	push	{r4, r5, r6, r7, lr}
   2283a:	780c      	ldrb	r4, [r1, #0]
   2283c:	b164      	cbz	r4, 22858 <strstr+0x20>
   2283e:	4603      	mov	r3, r0
   22840:	781a      	ldrb	r2, [r3, #0]
   22842:	4618      	mov	r0, r3
   22844:	1c5e      	adds	r6, r3, #1
   22846:	b90a      	cbnz	r2, 2284c <strstr+0x14>
   22848:	4610      	mov	r0, r2
   2284a:	e005      	b.n	22858 <strstr+0x20>
   2284c:	4294      	cmp	r4, r2
   2284e:	d108      	bne.n	22862 <strstr+0x2a>
   22850:	460d      	mov	r5, r1
   22852:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   22856:	b902      	cbnz	r2, 2285a <strstr+0x22>
   22858:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2285a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   2285e:	4297      	cmp	r7, r2
   22860:	d0f7      	beq.n	22852 <strstr+0x1a>
   22862:	4633      	mov	r3, r6
   22864:	e7ec      	b.n	22840 <strstr+0x8>

00022866 <_strtol_r>:
   22866:	f7fb b975 	b.w	1db54 <_strtol_l.isra.0>

0002286a <_strtoul_r>:
   2286a:	f7fb ba95 	b.w	1dd98 <_strtoul_l.isra.0>

0002286e <_vsniprintf_r>:
   2286e:	b530      	push	{r4, r5, lr}
   22870:	1e14      	subs	r4, r2, #0
   22872:	4605      	mov	r5, r0
   22874:	b09b      	sub	sp, #108	; 0x6c
   22876:	4618      	mov	r0, r3
   22878:	da05      	bge.n	22886 <_vsniprintf_r+0x18>
   2287a:	238b      	movs	r3, #139	; 0x8b
   2287c:	f04f 30ff 	mov.w	r0, #4294967295
   22880:	602b      	str	r3, [r5, #0]
   22882:	b01b      	add	sp, #108	; 0x6c
   22884:	bd30      	pop	{r4, r5, pc}
   22886:	f44f 7302 	mov.w	r3, #520	; 0x208
   2288a:	4602      	mov	r2, r0
   2288c:	9100      	str	r1, [sp, #0]
   2288e:	4628      	mov	r0, r5
   22890:	f8ad 300c 	strh.w	r3, [sp, #12]
   22894:	bf14      	ite	ne
   22896:	f104 33ff 	addne.w	r3, r4, #4294967295
   2289a:	4623      	moveq	r3, r4
   2289c:	9104      	str	r1, [sp, #16]
   2289e:	4669      	mov	r1, sp
   228a0:	9302      	str	r3, [sp, #8]
   228a2:	9305      	str	r3, [sp, #20]
   228a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   228a8:	f8ad 300e 	strh.w	r3, [sp, #14]
   228ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   228ae:	f7fb fb3f 	bl	1df30 <_svfiprintf_r>
   228b2:	1c43      	adds	r3, r0, #1
   228b4:	bfbc      	itt	lt
   228b6:	238b      	movlt	r3, #139	; 0x8b
   228b8:	602b      	strlt	r3, [r5, #0]
   228ba:	2c00      	cmp	r4, #0
   228bc:	d0e1      	beq.n	22882 <_vsniprintf_r+0x14>
   228be:	9b00      	ldr	r3, [sp, #0]
   228c0:	2200      	movs	r2, #0
   228c2:	701a      	strb	r2, [r3, #0]
   228c4:	e7dd      	b.n	22882 <_vsniprintf_r+0x14>

000228c6 <__ssputs_r>:
   228c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   228ca:	688e      	ldr	r6, [r1, #8]
   228cc:	4682      	mov	sl, r0
   228ce:	460c      	mov	r4, r1
   228d0:	4690      	mov	r8, r2
   228d2:	429e      	cmp	r6, r3
   228d4:	461f      	mov	r7, r3
   228d6:	d838      	bhi.n	2294a <__ssputs_r+0x84>
   228d8:	898a      	ldrh	r2, [r1, #12]
   228da:	f412 6f90 	tst.w	r2, #1152	; 0x480
   228de:	d032      	beq.n	22946 <__ssputs_r+0x80>
   228e0:	6825      	ldr	r5, [r4, #0]
   228e2:	3301      	adds	r3, #1
   228e4:	6909      	ldr	r1, [r1, #16]
   228e6:	eba5 0901 	sub.w	r9, r5, r1
   228ea:	6965      	ldr	r5, [r4, #20]
   228ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   228f0:	444b      	add	r3, r9
   228f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   228f6:	106d      	asrs	r5, r5, #1
   228f8:	429d      	cmp	r5, r3
   228fa:	bf38      	it	cc
   228fc:	461d      	movcc	r5, r3
   228fe:	0553      	lsls	r3, r2, #21
   22900:	d531      	bpl.n	22966 <__ssputs_r+0xa0>
   22902:	4629      	mov	r1, r5
   22904:	f7fb f8bc 	bl	1da80 <_malloc_r>
   22908:	4606      	mov	r6, r0
   2290a:	b950      	cbnz	r0, 22922 <__ssputs_r+0x5c>
   2290c:	230c      	movs	r3, #12
   2290e:	f04f 30ff 	mov.w	r0, #4294967295
   22912:	f8ca 3000 	str.w	r3, [sl]
   22916:	89a3      	ldrh	r3, [r4, #12]
   22918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2291c:	81a3      	strh	r3, [r4, #12]
   2291e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22922:	464a      	mov	r2, r9
   22924:	6921      	ldr	r1, [r4, #16]
   22926:	f7ff ff29 	bl	2277c <memcpy>
   2292a:	89a3      	ldrh	r3, [r4, #12]
   2292c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   22930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22934:	81a3      	strh	r3, [r4, #12]
   22936:	6126      	str	r6, [r4, #16]
   22938:	444e      	add	r6, r9
   2293a:	6165      	str	r5, [r4, #20]
   2293c:	eba5 0509 	sub.w	r5, r5, r9
   22940:	6026      	str	r6, [r4, #0]
   22942:	463e      	mov	r6, r7
   22944:	60a5      	str	r5, [r4, #8]
   22946:	42be      	cmp	r6, r7
   22948:	d900      	bls.n	2294c <__ssputs_r+0x86>
   2294a:	463e      	mov	r6, r7
   2294c:	4632      	mov	r2, r6
   2294e:	4641      	mov	r1, r8
   22950:	6820      	ldr	r0, [r4, #0]
   22952:	f000 f94d 	bl	22bf0 <memmove>
   22956:	68a3      	ldr	r3, [r4, #8]
   22958:	6822      	ldr	r2, [r4, #0]
   2295a:	2000      	movs	r0, #0
   2295c:	1b9b      	subs	r3, r3, r6
   2295e:	4432      	add	r2, r6
   22960:	60a3      	str	r3, [r4, #8]
   22962:	6022      	str	r2, [r4, #0]
   22964:	e7db      	b.n	2291e <__ssputs_r+0x58>
   22966:	462a      	mov	r2, r5
   22968:	f000 f95c 	bl	22c24 <_realloc_r>
   2296c:	4606      	mov	r6, r0
   2296e:	2800      	cmp	r0, #0
   22970:	d1e1      	bne.n	22936 <__ssputs_r+0x70>
   22972:	6921      	ldr	r1, [r4, #16]
   22974:	4650      	mov	r0, sl
   22976:	f7fb f835 	bl	1d9e4 <_free_r>
   2297a:	e7c7      	b.n	2290c <__ssputs_r+0x46>

0002297c <_sungetc_r>:
   2297c:	b538      	push	{r3, r4, r5, lr}
   2297e:	1c4b      	adds	r3, r1, #1
   22980:	4614      	mov	r4, r2
   22982:	d103      	bne.n	2298c <_sungetc_r+0x10>
   22984:	f04f 35ff 	mov.w	r5, #4294967295
   22988:	4628      	mov	r0, r5
   2298a:	bd38      	pop	{r3, r4, r5, pc}
   2298c:	8993      	ldrh	r3, [r2, #12]
   2298e:	b2cd      	uxtb	r5, r1
   22990:	f023 0320 	bic.w	r3, r3, #32
   22994:	8193      	strh	r3, [r2, #12]
   22996:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22998:	6852      	ldr	r2, [r2, #4]
   2299a:	b18b      	cbz	r3, 229c0 <_sungetc_r+0x44>
   2299c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2299e:	4293      	cmp	r3, r2
   229a0:	dd08      	ble.n	229b4 <_sungetc_r+0x38>
   229a2:	6823      	ldr	r3, [r4, #0]
   229a4:	1e5a      	subs	r2, r3, #1
   229a6:	6022      	str	r2, [r4, #0]
   229a8:	f803 5c01 	strb.w	r5, [r3, #-1]
   229ac:	6863      	ldr	r3, [r4, #4]
   229ae:	3301      	adds	r3, #1
   229b0:	6063      	str	r3, [r4, #4]
   229b2:	e7e9      	b.n	22988 <_sungetc_r+0xc>
   229b4:	4621      	mov	r1, r4
   229b6:	f000 f8e4 	bl	22b82 <__submore>
   229ba:	2800      	cmp	r0, #0
   229bc:	d0f1      	beq.n	229a2 <_sungetc_r+0x26>
   229be:	e7e1      	b.n	22984 <_sungetc_r+0x8>
   229c0:	6921      	ldr	r1, [r4, #16]
   229c2:	6823      	ldr	r3, [r4, #0]
   229c4:	b151      	cbz	r1, 229dc <_sungetc_r+0x60>
   229c6:	4299      	cmp	r1, r3
   229c8:	d208      	bcs.n	229dc <_sungetc_r+0x60>
   229ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   229ce:	42a9      	cmp	r1, r5
   229d0:	d104      	bne.n	229dc <_sungetc_r+0x60>
   229d2:	3b01      	subs	r3, #1
   229d4:	3201      	adds	r2, #1
   229d6:	6023      	str	r3, [r4, #0]
   229d8:	6062      	str	r2, [r4, #4]
   229da:	e7d5      	b.n	22988 <_sungetc_r+0xc>
   229dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   229e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   229e4:	6363      	str	r3, [r4, #52]	; 0x34
   229e6:	2303      	movs	r3, #3
   229e8:	63a3      	str	r3, [r4, #56]	; 0x38
   229ea:	4623      	mov	r3, r4
   229ec:	f803 5f46 	strb.w	r5, [r3, #70]!
   229f0:	6023      	str	r3, [r4, #0]
   229f2:	2301      	movs	r3, #1
   229f4:	e7dc      	b.n	229b0 <_sungetc_r+0x34>

000229f6 <__ssrefill_r>:
   229f6:	b510      	push	{r4, lr}
   229f8:	460c      	mov	r4, r1
   229fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
   229fc:	b169      	cbz	r1, 22a1a <__ssrefill_r+0x24>
   229fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22a02:	4299      	cmp	r1, r3
   22a04:	d001      	beq.n	22a0a <__ssrefill_r+0x14>
   22a06:	f7fa ffed 	bl	1d9e4 <_free_r>
   22a0a:	2000      	movs	r0, #0
   22a0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22a0e:	6360      	str	r0, [r4, #52]	; 0x34
   22a10:	6063      	str	r3, [r4, #4]
   22a12:	b113      	cbz	r3, 22a1a <__ssrefill_r+0x24>
   22a14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   22a16:	6023      	str	r3, [r4, #0]
   22a18:	bd10      	pop	{r4, pc}
   22a1a:	6923      	ldr	r3, [r4, #16]
   22a1c:	f04f 30ff 	mov.w	r0, #4294967295
   22a20:	6023      	str	r3, [r4, #0]
   22a22:	2300      	movs	r3, #0
   22a24:	6063      	str	r3, [r4, #4]
   22a26:	89a3      	ldrh	r3, [r4, #12]
   22a28:	f043 0320 	orr.w	r3, r3, #32
   22a2c:	81a3      	strh	r3, [r4, #12]
   22a2e:	e7f3      	b.n	22a18 <__ssrefill_r+0x22>

00022a30 <_printf_common>:
   22a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22a34:	4616      	mov	r6, r2
   22a36:	4699      	mov	r9, r3
   22a38:	688a      	ldr	r2, [r1, #8]
   22a3a:	4607      	mov	r7, r0
   22a3c:	690b      	ldr	r3, [r1, #16]
   22a3e:	460c      	mov	r4, r1
   22a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
   22a44:	4293      	cmp	r3, r2
   22a46:	bfb8      	it	lt
   22a48:	4613      	movlt	r3, r2
   22a4a:	6033      	str	r3, [r6, #0]
   22a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   22a50:	b10a      	cbz	r2, 22a56 <_printf_common+0x26>
   22a52:	3301      	adds	r3, #1
   22a54:	6033      	str	r3, [r6, #0]
   22a56:	6823      	ldr	r3, [r4, #0]
   22a58:	0699      	lsls	r1, r3, #26
   22a5a:	bf42      	ittt	mi
   22a5c:	6833      	ldrmi	r3, [r6, #0]
   22a5e:	3302      	addmi	r3, #2
   22a60:	6033      	strmi	r3, [r6, #0]
   22a62:	6825      	ldr	r5, [r4, #0]
   22a64:	f015 0506 	ands.w	r5, r5, #6
   22a68:	d106      	bne.n	22a78 <_printf_common+0x48>
   22a6a:	f104 0a19 	add.w	sl, r4, #25
   22a6e:	68e3      	ldr	r3, [r4, #12]
   22a70:	6832      	ldr	r2, [r6, #0]
   22a72:	1a9b      	subs	r3, r3, r2
   22a74:	42ab      	cmp	r3, r5
   22a76:	dc29      	bgt.n	22acc <_printf_common+0x9c>
   22a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   22a7c:	1e13      	subs	r3, r2, #0
   22a7e:	6822      	ldr	r2, [r4, #0]
   22a80:	bf18      	it	ne
   22a82:	2301      	movne	r3, #1
   22a84:	0692      	lsls	r2, r2, #26
   22a86:	d42e      	bmi.n	22ae6 <_printf_common+0xb6>
   22a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
   22a8c:	4649      	mov	r1, r9
   22a8e:	4638      	mov	r0, r7
   22a90:	47c0      	blx	r8
   22a92:	3001      	adds	r0, #1
   22a94:	d021      	beq.n	22ada <_printf_common+0xaa>
   22a96:	6823      	ldr	r3, [r4, #0]
   22a98:	341a      	adds	r4, #26
   22a9a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   22a9e:	f003 0306 	and.w	r3, r3, #6
   22aa2:	6832      	ldr	r2, [r6, #0]
   22aa4:	2600      	movs	r6, #0
   22aa6:	2b04      	cmp	r3, #4
   22aa8:	f854 3c12 	ldr.w	r3, [r4, #-18]
   22aac:	bf08      	it	eq
   22aae:	1aad      	subeq	r5, r5, r2
   22ab0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   22ab4:	bf14      	ite	ne
   22ab6:	2500      	movne	r5, #0
   22ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   22abc:	4293      	cmp	r3, r2
   22abe:	bfc4      	itt	gt
   22ac0:	1a9b      	subgt	r3, r3, r2
   22ac2:	18ed      	addgt	r5, r5, r3
   22ac4:	42b5      	cmp	r5, r6
   22ac6:	d11a      	bne.n	22afe <_printf_common+0xce>
   22ac8:	2000      	movs	r0, #0
   22aca:	e008      	b.n	22ade <_printf_common+0xae>
   22acc:	2301      	movs	r3, #1
   22ace:	4652      	mov	r2, sl
   22ad0:	4649      	mov	r1, r9
   22ad2:	4638      	mov	r0, r7
   22ad4:	47c0      	blx	r8
   22ad6:	3001      	adds	r0, #1
   22ad8:	d103      	bne.n	22ae2 <_printf_common+0xb2>
   22ada:	f04f 30ff 	mov.w	r0, #4294967295
   22ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22ae2:	3501      	adds	r5, #1
   22ae4:	e7c3      	b.n	22a6e <_printf_common+0x3e>
   22ae6:	18e1      	adds	r1, r4, r3
   22ae8:	1c5a      	adds	r2, r3, #1
   22aea:	2030      	movs	r0, #48	; 0x30
   22aec:	3302      	adds	r3, #2
   22aee:	4422      	add	r2, r4
   22af0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   22af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   22af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   22afc:	e7c4      	b.n	22a88 <_printf_common+0x58>
   22afe:	2301      	movs	r3, #1
   22b00:	4622      	mov	r2, r4
   22b02:	4649      	mov	r1, r9
   22b04:	4638      	mov	r0, r7
   22b06:	47c0      	blx	r8
   22b08:	3001      	adds	r0, #1
   22b0a:	d0e6      	beq.n	22ada <_printf_common+0xaa>
   22b0c:	3601      	adds	r6, #1
   22b0e:	e7d9      	b.n	22ac4 <_printf_common+0x94>

00022b10 <__sccl>:
   22b10:	b570      	push	{r4, r5, r6, lr}
   22b12:	780b      	ldrb	r3, [r1, #0]
   22b14:	4604      	mov	r4, r0
   22b16:	2b5e      	cmp	r3, #94	; 0x5e
   22b18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   22b1c:	bf13      	iteet	ne
   22b1e:	1c48      	addne	r0, r1, #1
   22b20:	1c88      	addeq	r0, r1, #2
   22b22:	784b      	ldrbeq	r3, [r1, #1]
   22b24:	2200      	movne	r2, #0
   22b26:	bf08      	it	eq
   22b28:	2201      	moveq	r2, #1
   22b2a:	1e61      	subs	r1, r4, #1
   22b2c:	f801 2f01 	strb.w	r2, [r1, #1]!
   22b30:	42a9      	cmp	r1, r5
   22b32:	d1fb      	bne.n	22b2c <__sccl+0x1c>
   22b34:	b90b      	cbnz	r3, 22b3a <__sccl+0x2a>
   22b36:	3801      	subs	r0, #1
   22b38:	bd70      	pop	{r4, r5, r6, pc}
   22b3a:	f082 0101 	eor.w	r1, r2, #1
   22b3e:	1c42      	adds	r2, r0, #1
   22b40:	54e1      	strb	r1, [r4, r3]
   22b42:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   22b46:	1e56      	subs	r6, r2, #1
   22b48:	4610      	mov	r0, r2
   22b4a:	2d2d      	cmp	r5, #45	; 0x2d
   22b4c:	d006      	beq.n	22b5c <__sccl+0x4c>
   22b4e:	2d5d      	cmp	r5, #93	; 0x5d
   22b50:	d0f2      	beq.n	22b38 <__sccl+0x28>
   22b52:	b90d      	cbnz	r5, 22b58 <__sccl+0x48>
   22b54:	4630      	mov	r0, r6
   22b56:	e7ef      	b.n	22b38 <__sccl+0x28>
   22b58:	462b      	mov	r3, r5
   22b5a:	e7f0      	b.n	22b3e <__sccl+0x2e>
   22b5c:	7816      	ldrb	r6, [r2, #0]
   22b5e:	2e5d      	cmp	r6, #93	; 0x5d
   22b60:	d0fa      	beq.n	22b58 <__sccl+0x48>
   22b62:	42b3      	cmp	r3, r6
   22b64:	dcf8      	bgt.n	22b58 <__sccl+0x48>
   22b66:	4618      	mov	r0, r3
   22b68:	3001      	adds	r0, #1
   22b6a:	4286      	cmp	r6, r0
   22b6c:	5421      	strb	r1, [r4, r0]
   22b6e:	dcfb      	bgt.n	22b68 <__sccl+0x58>
   22b70:	43d8      	mvns	r0, r3
   22b72:	1c5d      	adds	r5, r3, #1
   22b74:	3202      	adds	r2, #2
   22b76:	4430      	add	r0, r6
   22b78:	42b3      	cmp	r3, r6
   22b7a:	bfa8      	it	ge
   22b7c:	2000      	movge	r0, #0
   22b7e:	182b      	adds	r3, r5, r0
   22b80:	e7df      	b.n	22b42 <__sccl+0x32>

00022b82 <__submore>:
   22b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b86:	460c      	mov	r4, r1
   22b88:	6b49      	ldr	r1, [r1, #52]	; 0x34
   22b8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22b8e:	4299      	cmp	r1, r3
   22b90:	d11a      	bne.n	22bc8 <__submore+0x46>
   22b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
   22b96:	f7fa ff73 	bl	1da80 <_malloc_r>
   22b9a:	b918      	cbnz	r0, 22ba4 <__submore+0x22>
   22b9c:	f04f 30ff 	mov.w	r0, #4294967295
   22ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22ba8:	6360      	str	r0, [r4, #52]	; 0x34
   22baa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   22bae:	63a3      	str	r3, [r4, #56]	; 0x38
   22bb0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   22bb4:	7083      	strb	r3, [r0, #2]
   22bb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   22bba:	7043      	strb	r3, [r0, #1]
   22bbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   22bc0:	7003      	strb	r3, [r0, #0]
   22bc2:	6020      	str	r0, [r4, #0]
   22bc4:	2000      	movs	r0, #0
   22bc6:	e7eb      	b.n	22ba0 <__submore+0x1e>
   22bc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   22bca:	0077      	lsls	r7, r6, #1
   22bcc:	463a      	mov	r2, r7
   22bce:	f000 f829 	bl	22c24 <_realloc_r>
   22bd2:	4605      	mov	r5, r0
   22bd4:	2800      	cmp	r0, #0
   22bd6:	d0e1      	beq.n	22b9c <__submore+0x1a>
   22bd8:	eb00 0806 	add.w	r8, r0, r6
   22bdc:	4601      	mov	r1, r0
   22bde:	4632      	mov	r2, r6
   22be0:	4640      	mov	r0, r8
   22be2:	f7ff fdcb 	bl	2277c <memcpy>
   22be6:	f8c4 8000 	str.w	r8, [r4]
   22bea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   22bee:	e7e9      	b.n	22bc4 <__submore+0x42>

00022bf0 <memmove>:
   22bf0:	4288      	cmp	r0, r1
   22bf2:	b510      	push	{r4, lr}
   22bf4:	eb01 0402 	add.w	r4, r1, r2
   22bf8:	d902      	bls.n	22c00 <memmove+0x10>
   22bfa:	4284      	cmp	r4, r0
   22bfc:	4623      	mov	r3, r4
   22bfe:	d807      	bhi.n	22c10 <memmove+0x20>
   22c00:	1e43      	subs	r3, r0, #1
   22c02:	42a1      	cmp	r1, r4
   22c04:	d008      	beq.n	22c18 <memmove+0x28>
   22c06:	f811 2b01 	ldrb.w	r2, [r1], #1
   22c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
   22c0e:	e7f8      	b.n	22c02 <memmove+0x12>
   22c10:	4402      	add	r2, r0
   22c12:	4601      	mov	r1, r0
   22c14:	428a      	cmp	r2, r1
   22c16:	d100      	bne.n	22c1a <memmove+0x2a>
   22c18:	bd10      	pop	{r4, pc}
   22c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   22c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   22c22:	e7f7      	b.n	22c14 <memmove+0x24>

00022c24 <_realloc_r>:
   22c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c26:	4607      	mov	r7, r0
   22c28:	4614      	mov	r4, r2
   22c2a:	460e      	mov	r6, r1
   22c2c:	b921      	cbnz	r1, 22c38 <_realloc_r+0x14>
   22c2e:	4611      	mov	r1, r2
   22c30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22c34:	f7fa bf24 	b.w	1da80 <_malloc_r>
   22c38:	b922      	cbnz	r2, 22c44 <_realloc_r+0x20>
   22c3a:	4625      	mov	r5, r4
   22c3c:	f7fa fed2 	bl	1d9e4 <_free_r>
   22c40:	4628      	mov	r0, r5
   22c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c44:	f000 f814 	bl	22c70 <_malloc_usable_size_r>
   22c48:	42a0      	cmp	r0, r4
   22c4a:	d20f      	bcs.n	22c6c <_realloc_r+0x48>
   22c4c:	4621      	mov	r1, r4
   22c4e:	4638      	mov	r0, r7
   22c50:	f7fa ff16 	bl	1da80 <_malloc_r>
   22c54:	4605      	mov	r5, r0
   22c56:	2800      	cmp	r0, #0
   22c58:	d0f2      	beq.n	22c40 <_realloc_r+0x1c>
   22c5a:	4631      	mov	r1, r6
   22c5c:	4622      	mov	r2, r4
   22c5e:	f7ff fd8d 	bl	2277c <memcpy>
   22c62:	4631      	mov	r1, r6
   22c64:	4638      	mov	r0, r7
   22c66:	f7fa febd 	bl	1d9e4 <_free_r>
   22c6a:	e7e9      	b.n	22c40 <_realloc_r+0x1c>
   22c6c:	4635      	mov	r5, r6
   22c6e:	e7e7      	b.n	22c40 <_realloc_r+0x1c>

00022c70 <_malloc_usable_size_r>:
   22c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22c74:	1f18      	subs	r0, r3, #4
   22c76:	2b00      	cmp	r3, #0
   22c78:	bfbc      	itt	lt
   22c7a:	580b      	ldrlt	r3, [r1, r0]
   22c7c:	18c0      	addlt	r0, r0, r3
   22c7e:	4770      	bx	lr

00022c80 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   22c80:	f7f5 bf5a 	b.w	18b38 <SystemInit>
