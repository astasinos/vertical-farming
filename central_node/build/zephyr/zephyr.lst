
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_start>:
    c200:	20011800 	.word	0x20011800
    c204:	00022b2d 	.word	0x00022b2d
    c208:	00036bc3 	.word	0x00036bc3
    c20c:	00022ae5 	.word	0x00022ae5
    c210:	00022ae5 	.word	0x00022ae5
    c214:	00022ae5 	.word	0x00022ae5
    c218:	00022ae5 	.word	0x00022ae5
	...
    c22c:	00022229 	.word	0x00022229
    c230:	00022ae5 	.word	0x00022ae5
    c234:	00000000 	.word	0x00000000
    c238:	000221d1 	.word	0x000221d1
    c23c:	00022ae5 	.word	0x00022ae5

0000c240 <_irq_vector_table>:
    c240:	00022315 0003bea7 00022315 00022315     .#.......#...#..
    c250:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c260:	0003be6f 00022315 00022315 0003be8d     o....#...#......
    c270:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c280:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c290:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c2a0:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c2b0:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c2c0:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c2d0:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c2e0:	00022315 00022315 00022315 00022315     .#...#...#...#..
    c2f0:	00022315 00022315 00022315 00022315     .#...#...#...#..

Disassembly of section text:

0000c300 <__aeabi_drsub>:
    c300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c304:	e002      	b.n	c30c <__adddf3>
    c306:	bf00      	nop

0000c308 <__aeabi_dsub>:
    c308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c30c <__adddf3>:
    c30c:	b530      	push	{r4, r5, lr}
    c30e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c312:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c316:	ea94 0f05 	teq	r4, r5
    c31a:	bf08      	it	eq
    c31c:	ea90 0f02 	teqeq	r0, r2
    c320:	bf1f      	itttt	ne
    c322:	ea54 0c00 	orrsne.w	ip, r4, r0
    c326:	ea55 0c02 	orrsne.w	ip, r5, r2
    c32a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c32e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c332:	f000 80e2 	beq.w	c4fa <__adddf3+0x1ee>
    c336:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c33a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c33e:	bfb8      	it	lt
    c340:	426d      	neglt	r5, r5
    c342:	dd0c      	ble.n	c35e <__adddf3+0x52>
    c344:	442c      	add	r4, r5
    c346:	ea80 0202 	eor.w	r2, r0, r2
    c34a:	ea81 0303 	eor.w	r3, r1, r3
    c34e:	ea82 0000 	eor.w	r0, r2, r0
    c352:	ea83 0101 	eor.w	r1, r3, r1
    c356:	ea80 0202 	eor.w	r2, r0, r2
    c35a:	ea81 0303 	eor.w	r3, r1, r3
    c35e:	2d36      	cmp	r5, #54	; 0x36
    c360:	bf88      	it	hi
    c362:	bd30      	pophi	{r4, r5, pc}
    c364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c368:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c36c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c374:	d002      	beq.n	c37c <__adddf3+0x70>
    c376:	4240      	negs	r0, r0
    c378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c37c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c380:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c388:	d002      	beq.n	c390 <__adddf3+0x84>
    c38a:	4252      	negs	r2, r2
    c38c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c390:	ea94 0f05 	teq	r4, r5
    c394:	f000 80a7 	beq.w	c4e6 <__adddf3+0x1da>
    c398:	f1a4 0401 	sub.w	r4, r4, #1
    c39c:	f1d5 0e20 	rsbs	lr, r5, #32
    c3a0:	db0d      	blt.n	c3be <__adddf3+0xb2>
    c3a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c3a6:	fa22 f205 	lsr.w	r2, r2, r5
    c3aa:	1880      	adds	r0, r0, r2
    c3ac:	f141 0100 	adc.w	r1, r1, #0
    c3b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c3b4:	1880      	adds	r0, r0, r2
    c3b6:	fa43 f305 	asr.w	r3, r3, r5
    c3ba:	4159      	adcs	r1, r3
    c3bc:	e00e      	b.n	c3dc <__adddf3+0xd0>
    c3be:	f1a5 0520 	sub.w	r5, r5, #32
    c3c2:	f10e 0e20 	add.w	lr, lr, #32
    c3c6:	2a01      	cmp	r2, #1
    c3c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c3cc:	bf28      	it	cs
    c3ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c3d2:	fa43 f305 	asr.w	r3, r3, r5
    c3d6:	18c0      	adds	r0, r0, r3
    c3d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c3dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3e0:	d507      	bpl.n	c3f2 <__adddf3+0xe6>
    c3e2:	f04f 0e00 	mov.w	lr, #0
    c3e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c3ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c3ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c3f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c3f6:	d31b      	bcc.n	c430 <__adddf3+0x124>
    c3f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c3fc:	d30c      	bcc.n	c418 <__adddf3+0x10c>
    c3fe:	0849      	lsrs	r1, r1, #1
    c400:	ea5f 0030 	movs.w	r0, r0, rrx
    c404:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c408:	f104 0401 	add.w	r4, r4, #1
    c40c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c414:	f080 809a 	bcs.w	c54c <__adddf3+0x240>
    c418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c41c:	bf08      	it	eq
    c41e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c422:	f150 0000 	adcs.w	r0, r0, #0
    c426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c42a:	ea41 0105 	orr.w	r1, r1, r5
    c42e:	bd30      	pop	{r4, r5, pc}
    c430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c434:	4140      	adcs	r0, r0
    c436:	eb41 0101 	adc.w	r1, r1, r1
    c43a:	3c01      	subs	r4, #1
    c43c:	bf28      	it	cs
    c43e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c442:	d2e9      	bcs.n	c418 <__adddf3+0x10c>
    c444:	f091 0f00 	teq	r1, #0
    c448:	bf04      	itt	eq
    c44a:	4601      	moveq	r1, r0
    c44c:	2000      	moveq	r0, #0
    c44e:	fab1 f381 	clz	r3, r1
    c452:	bf08      	it	eq
    c454:	3320      	addeq	r3, #32
    c456:	f1a3 030b 	sub.w	r3, r3, #11
    c45a:	f1b3 0220 	subs.w	r2, r3, #32
    c45e:	da0c      	bge.n	c47a <__adddf3+0x16e>
    c460:	320c      	adds	r2, #12
    c462:	dd08      	ble.n	c476 <__adddf3+0x16a>
    c464:	f102 0c14 	add.w	ip, r2, #20
    c468:	f1c2 020c 	rsb	r2, r2, #12
    c46c:	fa01 f00c 	lsl.w	r0, r1, ip
    c470:	fa21 f102 	lsr.w	r1, r1, r2
    c474:	e00c      	b.n	c490 <__adddf3+0x184>
    c476:	f102 0214 	add.w	r2, r2, #20
    c47a:	bfd8      	it	le
    c47c:	f1c2 0c20 	rsble	ip, r2, #32
    c480:	fa01 f102 	lsl.w	r1, r1, r2
    c484:	fa20 fc0c 	lsr.w	ip, r0, ip
    c488:	bfdc      	itt	le
    c48a:	ea41 010c 	orrle.w	r1, r1, ip
    c48e:	4090      	lslle	r0, r2
    c490:	1ae4      	subs	r4, r4, r3
    c492:	bfa2      	ittt	ge
    c494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c498:	4329      	orrge	r1, r5
    c49a:	bd30      	popge	{r4, r5, pc}
    c49c:	ea6f 0404 	mvn.w	r4, r4
    c4a0:	3c1f      	subs	r4, #31
    c4a2:	da1c      	bge.n	c4de <__adddf3+0x1d2>
    c4a4:	340c      	adds	r4, #12
    c4a6:	dc0e      	bgt.n	c4c6 <__adddf3+0x1ba>
    c4a8:	f104 0414 	add.w	r4, r4, #20
    c4ac:	f1c4 0220 	rsb	r2, r4, #32
    c4b0:	fa20 f004 	lsr.w	r0, r0, r4
    c4b4:	fa01 f302 	lsl.w	r3, r1, r2
    c4b8:	ea40 0003 	orr.w	r0, r0, r3
    c4bc:	fa21 f304 	lsr.w	r3, r1, r4
    c4c0:	ea45 0103 	orr.w	r1, r5, r3
    c4c4:	bd30      	pop	{r4, r5, pc}
    c4c6:	f1c4 040c 	rsb	r4, r4, #12
    c4ca:	f1c4 0220 	rsb	r2, r4, #32
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	fa01 f304 	lsl.w	r3, r1, r4
    c4d6:	ea40 0003 	orr.w	r0, r0, r3
    c4da:	4629      	mov	r1, r5
    c4dc:	bd30      	pop	{r4, r5, pc}
    c4de:	fa21 f004 	lsr.w	r0, r1, r4
    c4e2:	4629      	mov	r1, r5
    c4e4:	bd30      	pop	{r4, r5, pc}
    c4e6:	f094 0f00 	teq	r4, #0
    c4ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c4ee:	bf06      	itte	eq
    c4f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c4f4:	3401      	addeq	r4, #1
    c4f6:	3d01      	subne	r5, #1
    c4f8:	e74e      	b.n	c398 <__adddf3+0x8c>
    c4fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c4fe:	bf18      	it	ne
    c500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c504:	d029      	beq.n	c55a <__adddf3+0x24e>
    c506:	ea94 0f05 	teq	r4, r5
    c50a:	bf08      	it	eq
    c50c:	ea90 0f02 	teqeq	r0, r2
    c510:	d005      	beq.n	c51e <__adddf3+0x212>
    c512:	ea54 0c00 	orrs.w	ip, r4, r0
    c516:	bf04      	itt	eq
    c518:	4619      	moveq	r1, r3
    c51a:	4610      	moveq	r0, r2
    c51c:	bd30      	pop	{r4, r5, pc}
    c51e:	ea91 0f03 	teq	r1, r3
    c522:	bf1e      	ittt	ne
    c524:	2100      	movne	r1, #0
    c526:	2000      	movne	r0, #0
    c528:	bd30      	popne	{r4, r5, pc}
    c52a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c52e:	d105      	bne.n	c53c <__adddf3+0x230>
    c530:	0040      	lsls	r0, r0, #1
    c532:	4149      	adcs	r1, r1
    c534:	bf28      	it	cs
    c536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c53a:	bd30      	pop	{r4, r5, pc}
    c53c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c540:	bf3c      	itt	cc
    c542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c546:	bd30      	popcc	{r4, r5, pc}
    c548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c54c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c554:	f04f 0000 	mov.w	r0, #0
    c558:	bd30      	pop	{r4, r5, pc}
    c55a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c55e:	bf1a      	itte	ne
    c560:	4619      	movne	r1, r3
    c562:	4610      	movne	r0, r2
    c564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c568:	bf1c      	itt	ne
    c56a:	460b      	movne	r3, r1
    c56c:	4602      	movne	r2, r0
    c56e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c572:	bf06      	itte	eq
    c574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c578:	ea91 0f03 	teqeq	r1, r3
    c57c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c580:	bd30      	pop	{r4, r5, pc}
    c582:	bf00      	nop

0000c584 <__aeabi_ui2d>:
    c584:	f090 0f00 	teq	r0, #0
    c588:	bf04      	itt	eq
    c58a:	2100      	moveq	r1, #0
    c58c:	4770      	bxeq	lr
    c58e:	b530      	push	{r4, r5, lr}
    c590:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c594:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c598:	f04f 0500 	mov.w	r5, #0
    c59c:	f04f 0100 	mov.w	r1, #0
    c5a0:	e750      	b.n	c444 <__adddf3+0x138>
    c5a2:	bf00      	nop

0000c5a4 <__aeabi_i2d>:
    c5a4:	f090 0f00 	teq	r0, #0
    c5a8:	bf04      	itt	eq
    c5aa:	2100      	moveq	r1, #0
    c5ac:	4770      	bxeq	lr
    c5ae:	b530      	push	{r4, r5, lr}
    c5b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c5b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c5b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c5bc:	bf48      	it	mi
    c5be:	4240      	negmi	r0, r0
    c5c0:	f04f 0100 	mov.w	r1, #0
    c5c4:	e73e      	b.n	c444 <__adddf3+0x138>
    c5c6:	bf00      	nop

0000c5c8 <__aeabi_f2d>:
    c5c8:	0042      	lsls	r2, r0, #1
    c5ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c5ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c5d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c5d6:	bf1f      	itttt	ne
    c5d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c5dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c5e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c5e4:	4770      	bxne	lr
    c5e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c5ea:	bf08      	it	eq
    c5ec:	4770      	bxeq	lr
    c5ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c5f2:	bf04      	itt	eq
    c5f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c5f8:	4770      	bxeq	lr
    c5fa:	b530      	push	{r4, r5, lr}
    c5fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c608:	e71c      	b.n	c444 <__adddf3+0x138>
    c60a:	bf00      	nop

0000c60c <__aeabi_ul2d>:
    c60c:	ea50 0201 	orrs.w	r2, r0, r1
    c610:	bf08      	it	eq
    c612:	4770      	bxeq	lr
    c614:	b530      	push	{r4, r5, lr}
    c616:	f04f 0500 	mov.w	r5, #0
    c61a:	e00a      	b.n	c632 <__aeabi_l2d+0x16>

0000c61c <__aeabi_l2d>:
    c61c:	ea50 0201 	orrs.w	r2, r0, r1
    c620:	bf08      	it	eq
    c622:	4770      	bxeq	lr
    c624:	b530      	push	{r4, r5, lr}
    c626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c62a:	d502      	bpl.n	c632 <__aeabi_l2d+0x16>
    c62c:	4240      	negs	r0, r0
    c62e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c632:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c636:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c63a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c63e:	f43f aed8 	beq.w	c3f2 <__adddf3+0xe6>
    c642:	f04f 0203 	mov.w	r2, #3
    c646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c64a:	bf18      	it	ne
    c64c:	3203      	addne	r2, #3
    c64e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c652:	bf18      	it	ne
    c654:	3203      	addne	r2, #3
    c656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c65a:	f1c2 0320 	rsb	r3, r2, #32
    c65e:	fa00 fc03 	lsl.w	ip, r0, r3
    c662:	fa20 f002 	lsr.w	r0, r0, r2
    c666:	fa01 fe03 	lsl.w	lr, r1, r3
    c66a:	ea40 000e 	orr.w	r0, r0, lr
    c66e:	fa21 f102 	lsr.w	r1, r1, r2
    c672:	4414      	add	r4, r2
    c674:	e6bd      	b.n	c3f2 <__adddf3+0xe6>
    c676:	bf00      	nop

0000c678 <__aeabi_dmul>:
    c678:	b570      	push	{r4, r5, r6, lr}
    c67a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c67e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c686:	bf1d      	ittte	ne
    c688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c68c:	ea94 0f0c 	teqne	r4, ip
    c690:	ea95 0f0c 	teqne	r5, ip
    c694:	f000 f8de 	bleq	c854 <__aeabi_dmul+0x1dc>
    c698:	442c      	add	r4, r5
    c69a:	ea81 0603 	eor.w	r6, r1, r3
    c69e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c6a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c6a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c6aa:	bf18      	it	ne
    c6ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c6b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c6b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c6b8:	d038      	beq.n	c72c <__aeabi_dmul+0xb4>
    c6ba:	fba0 ce02 	umull	ip, lr, r0, r2
    c6be:	f04f 0500 	mov.w	r5, #0
    c6c2:	fbe1 e502 	umlal	lr, r5, r1, r2
    c6c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c6ca:	fbe0 e503 	umlal	lr, r5, r0, r3
    c6ce:	f04f 0600 	mov.w	r6, #0
    c6d2:	fbe1 5603 	umlal	r5, r6, r1, r3
    c6d6:	f09c 0f00 	teq	ip, #0
    c6da:	bf18      	it	ne
    c6dc:	f04e 0e01 	orrne.w	lr, lr, #1
    c6e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c6e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c6e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c6ec:	d204      	bcs.n	c6f8 <__aeabi_dmul+0x80>
    c6ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c6f2:	416d      	adcs	r5, r5
    c6f4:	eb46 0606 	adc.w	r6, r6, r6
    c6f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c6fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c70c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c710:	bf88      	it	hi
    c712:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c716:	d81e      	bhi.n	c756 <__aeabi_dmul+0xde>
    c718:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c71c:	bf08      	it	eq
    c71e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c722:	f150 0000 	adcs.w	r0, r0, #0
    c726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c72a:	bd70      	pop	{r4, r5, r6, pc}
    c72c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c730:	ea46 0101 	orr.w	r1, r6, r1
    c734:	ea40 0002 	orr.w	r0, r0, r2
    c738:	ea81 0103 	eor.w	r1, r1, r3
    c73c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c740:	bfc2      	ittt	gt
    c742:	ebd4 050c 	rsbsgt	r5, r4, ip
    c746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c74a:	bd70      	popgt	{r4, r5, r6, pc}
    c74c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c750:	f04f 0e00 	mov.w	lr, #0
    c754:	3c01      	subs	r4, #1
    c756:	f300 80ab 	bgt.w	c8b0 <__aeabi_dmul+0x238>
    c75a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c75e:	bfde      	ittt	le
    c760:	2000      	movle	r0, #0
    c762:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c766:	bd70      	pople	{r4, r5, r6, pc}
    c768:	f1c4 0400 	rsb	r4, r4, #0
    c76c:	3c20      	subs	r4, #32
    c76e:	da35      	bge.n	c7dc <__aeabi_dmul+0x164>
    c770:	340c      	adds	r4, #12
    c772:	dc1b      	bgt.n	c7ac <__aeabi_dmul+0x134>
    c774:	f104 0414 	add.w	r4, r4, #20
    c778:	f1c4 0520 	rsb	r5, r4, #32
    c77c:	fa00 f305 	lsl.w	r3, r0, r5
    c780:	fa20 f004 	lsr.w	r0, r0, r4
    c784:	fa01 f205 	lsl.w	r2, r1, r5
    c788:	ea40 0002 	orr.w	r0, r0, r2
    c78c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c798:	fa21 f604 	lsr.w	r6, r1, r4
    c79c:	eb42 0106 	adc.w	r1, r2, r6
    c7a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c7a4:	bf08      	it	eq
    c7a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c7aa:	bd70      	pop	{r4, r5, r6, pc}
    c7ac:	f1c4 040c 	rsb	r4, r4, #12
    c7b0:	f1c4 0520 	rsb	r5, r4, #32
    c7b4:	fa00 f304 	lsl.w	r3, r0, r4
    c7b8:	fa20 f005 	lsr.w	r0, r0, r5
    c7bc:	fa01 f204 	lsl.w	r2, r1, r4
    c7c0:	ea40 0002 	orr.w	r0, r0, r2
    c7c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c7cc:	f141 0100 	adc.w	r1, r1, #0
    c7d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c7d4:	bf08      	it	eq
    c7d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c7da:	bd70      	pop	{r4, r5, r6, pc}
    c7dc:	f1c4 0520 	rsb	r5, r4, #32
    c7e0:	fa00 f205 	lsl.w	r2, r0, r5
    c7e4:	ea4e 0e02 	orr.w	lr, lr, r2
    c7e8:	fa20 f304 	lsr.w	r3, r0, r4
    c7ec:	fa01 f205 	lsl.w	r2, r1, r5
    c7f0:	ea43 0302 	orr.w	r3, r3, r2
    c7f4:	fa21 f004 	lsr.w	r0, r1, r4
    c7f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7fc:	fa21 f204 	lsr.w	r2, r1, r4
    c800:	ea20 0002 	bic.w	r0, r0, r2
    c804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c80c:	bf08      	it	eq
    c80e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c812:	bd70      	pop	{r4, r5, r6, pc}
    c814:	f094 0f00 	teq	r4, #0
    c818:	d10f      	bne.n	c83a <__aeabi_dmul+0x1c2>
    c81a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c81e:	0040      	lsls	r0, r0, #1
    c820:	eb41 0101 	adc.w	r1, r1, r1
    c824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c828:	bf08      	it	eq
    c82a:	3c01      	subeq	r4, #1
    c82c:	d0f7      	beq.n	c81e <__aeabi_dmul+0x1a6>
    c82e:	ea41 0106 	orr.w	r1, r1, r6
    c832:	f095 0f00 	teq	r5, #0
    c836:	bf18      	it	ne
    c838:	4770      	bxne	lr
    c83a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c83e:	0052      	lsls	r2, r2, #1
    c840:	eb43 0303 	adc.w	r3, r3, r3
    c844:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c848:	bf08      	it	eq
    c84a:	3d01      	subeq	r5, #1
    c84c:	d0f7      	beq.n	c83e <__aeabi_dmul+0x1c6>
    c84e:	ea43 0306 	orr.w	r3, r3, r6
    c852:	4770      	bx	lr
    c854:	ea94 0f0c 	teq	r4, ip
    c858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c85c:	bf18      	it	ne
    c85e:	ea95 0f0c 	teqne	r5, ip
    c862:	d00c      	beq.n	c87e <__aeabi_dmul+0x206>
    c864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c868:	bf18      	it	ne
    c86a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c86e:	d1d1      	bne.n	c814 <__aeabi_dmul+0x19c>
    c870:	ea81 0103 	eor.w	r1, r1, r3
    c874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c878:	f04f 0000 	mov.w	r0, #0
    c87c:	bd70      	pop	{r4, r5, r6, pc}
    c87e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c882:	bf06      	itte	eq
    c884:	4610      	moveq	r0, r2
    c886:	4619      	moveq	r1, r3
    c888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c88c:	d019      	beq.n	c8c2 <__aeabi_dmul+0x24a>
    c88e:	ea94 0f0c 	teq	r4, ip
    c892:	d102      	bne.n	c89a <__aeabi_dmul+0x222>
    c894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c898:	d113      	bne.n	c8c2 <__aeabi_dmul+0x24a>
    c89a:	ea95 0f0c 	teq	r5, ip
    c89e:	d105      	bne.n	c8ac <__aeabi_dmul+0x234>
    c8a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c8a4:	bf1c      	itt	ne
    c8a6:	4610      	movne	r0, r2
    c8a8:	4619      	movne	r1, r3
    c8aa:	d10a      	bne.n	c8c2 <__aeabi_dmul+0x24a>
    c8ac:	ea81 0103 	eor.w	r1, r1, r3
    c8b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c8b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c8b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c8bc:	f04f 0000 	mov.w	r0, #0
    c8c0:	bd70      	pop	{r4, r5, r6, pc}
    c8c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c8c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c8ca:	bd70      	pop	{r4, r5, r6, pc}

0000c8cc <__aeabi_ddiv>:
    c8cc:	b570      	push	{r4, r5, r6, lr}
    c8ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c8d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c8d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c8da:	bf1d      	ittte	ne
    c8dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c8e0:	ea94 0f0c 	teqne	r4, ip
    c8e4:	ea95 0f0c 	teqne	r5, ip
    c8e8:	f000 f8a7 	bleq	ca3a <__aeabi_ddiv+0x16e>
    c8ec:	eba4 0405 	sub.w	r4, r4, r5
    c8f0:	ea81 0e03 	eor.w	lr, r1, r3
    c8f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c8f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c8fc:	f000 8088 	beq.w	ca10 <__aeabi_ddiv+0x144>
    c900:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c904:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c90c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c910:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c91c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c920:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c924:	429d      	cmp	r5, r3
    c926:	bf08      	it	eq
    c928:	4296      	cmpeq	r6, r2
    c92a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c92e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c932:	d202      	bcs.n	c93a <__aeabi_ddiv+0x6e>
    c934:	085b      	lsrs	r3, r3, #1
    c936:	ea4f 0232 	mov.w	r2, r2, rrx
    c93a:	1ab6      	subs	r6, r6, r2
    c93c:	eb65 0503 	sbc.w	r5, r5, r3
    c940:	085b      	lsrs	r3, r3, #1
    c942:	ea4f 0232 	mov.w	r2, r2, rrx
    c946:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c94a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c94e:	ebb6 0e02 	subs.w	lr, r6, r2
    c952:	eb75 0e03 	sbcs.w	lr, r5, r3
    c956:	bf22      	ittt	cs
    c958:	1ab6      	subcs	r6, r6, r2
    c95a:	4675      	movcs	r5, lr
    c95c:	ea40 000c 	orrcs.w	r0, r0, ip
    c960:	085b      	lsrs	r3, r3, #1
    c962:	ea4f 0232 	mov.w	r2, r2, rrx
    c966:	ebb6 0e02 	subs.w	lr, r6, r2
    c96a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c96e:	bf22      	ittt	cs
    c970:	1ab6      	subcs	r6, r6, r2
    c972:	4675      	movcs	r5, lr
    c974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c978:	085b      	lsrs	r3, r3, #1
    c97a:	ea4f 0232 	mov.w	r2, r2, rrx
    c97e:	ebb6 0e02 	subs.w	lr, r6, r2
    c982:	eb75 0e03 	sbcs.w	lr, r5, r3
    c986:	bf22      	ittt	cs
    c988:	1ab6      	subcs	r6, r6, r2
    c98a:	4675      	movcs	r5, lr
    c98c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c990:	085b      	lsrs	r3, r3, #1
    c992:	ea4f 0232 	mov.w	r2, r2, rrx
    c996:	ebb6 0e02 	subs.w	lr, r6, r2
    c99a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c99e:	bf22      	ittt	cs
    c9a0:	1ab6      	subcs	r6, r6, r2
    c9a2:	4675      	movcs	r5, lr
    c9a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c9a8:	ea55 0e06 	orrs.w	lr, r5, r6
    c9ac:	d018      	beq.n	c9e0 <__aeabi_ddiv+0x114>
    c9ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c9b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c9b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c9ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c9be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c9c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c9c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c9ca:	d1c0      	bne.n	c94e <__aeabi_ddiv+0x82>
    c9cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c9d0:	d10b      	bne.n	c9ea <__aeabi_ddiv+0x11e>
    c9d2:	ea41 0100 	orr.w	r1, r1, r0
    c9d6:	f04f 0000 	mov.w	r0, #0
    c9da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c9de:	e7b6      	b.n	c94e <__aeabi_ddiv+0x82>
    c9e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c9e4:	bf04      	itt	eq
    c9e6:	4301      	orreq	r1, r0
    c9e8:	2000      	moveq	r0, #0
    c9ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c9ee:	bf88      	it	hi
    c9f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c9f4:	f63f aeaf 	bhi.w	c756 <__aeabi_dmul+0xde>
    c9f8:	ebb5 0c03 	subs.w	ip, r5, r3
    c9fc:	bf04      	itt	eq
    c9fe:	ebb6 0c02 	subseq.w	ip, r6, r2
    ca02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ca06:	f150 0000 	adcs.w	r0, r0, #0
    ca0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ca0e:	bd70      	pop	{r4, r5, r6, pc}
    ca10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ca14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ca18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    ca1c:	bfc2      	ittt	gt
    ca1e:	ebd4 050c 	rsbsgt	r5, r4, ip
    ca22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ca26:	bd70      	popgt	{r4, r5, r6, pc}
    ca28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ca2c:	f04f 0e00 	mov.w	lr, #0
    ca30:	3c01      	subs	r4, #1
    ca32:	e690      	b.n	c756 <__aeabi_dmul+0xde>
    ca34:	ea45 0e06 	orr.w	lr, r5, r6
    ca38:	e68d      	b.n	c756 <__aeabi_dmul+0xde>
    ca3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ca3e:	ea94 0f0c 	teq	r4, ip
    ca42:	bf08      	it	eq
    ca44:	ea95 0f0c 	teqeq	r5, ip
    ca48:	f43f af3b 	beq.w	c8c2 <__aeabi_dmul+0x24a>
    ca4c:	ea94 0f0c 	teq	r4, ip
    ca50:	d10a      	bne.n	ca68 <__aeabi_ddiv+0x19c>
    ca52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ca56:	f47f af34 	bne.w	c8c2 <__aeabi_dmul+0x24a>
    ca5a:	ea95 0f0c 	teq	r5, ip
    ca5e:	f47f af25 	bne.w	c8ac <__aeabi_dmul+0x234>
    ca62:	4610      	mov	r0, r2
    ca64:	4619      	mov	r1, r3
    ca66:	e72c      	b.n	c8c2 <__aeabi_dmul+0x24a>
    ca68:	ea95 0f0c 	teq	r5, ip
    ca6c:	d106      	bne.n	ca7c <__aeabi_ddiv+0x1b0>
    ca6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ca72:	f43f aefd 	beq.w	c870 <__aeabi_dmul+0x1f8>
    ca76:	4610      	mov	r0, r2
    ca78:	4619      	mov	r1, r3
    ca7a:	e722      	b.n	c8c2 <__aeabi_dmul+0x24a>
    ca7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ca80:	bf18      	it	ne
    ca82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ca86:	f47f aec5 	bne.w	c814 <__aeabi_dmul+0x19c>
    ca8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ca8e:	f47f af0d 	bne.w	c8ac <__aeabi_dmul+0x234>
    ca92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ca96:	f47f aeeb 	bne.w	c870 <__aeabi_dmul+0x1f8>
    ca9a:	e712      	b.n	c8c2 <__aeabi_dmul+0x24a>

0000ca9c <__gedf2>:
    ca9c:	f04f 3cff 	mov.w	ip, #4294967295
    caa0:	e006      	b.n	cab0 <__cmpdf2+0x4>
    caa2:	bf00      	nop

0000caa4 <__ledf2>:
    caa4:	f04f 0c01 	mov.w	ip, #1
    caa8:	e002      	b.n	cab0 <__cmpdf2+0x4>
    caaa:	bf00      	nop

0000caac <__cmpdf2>:
    caac:	f04f 0c01 	mov.w	ip, #1
    cab0:	f84d cd04 	str.w	ip, [sp, #-4]!
    cab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cabc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cac0:	bf18      	it	ne
    cac2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    cac6:	d01b      	beq.n	cb00 <__cmpdf2+0x54>
    cac8:	b001      	add	sp, #4
    caca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cace:	bf0c      	ite	eq
    cad0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cad4:	ea91 0f03 	teqne	r1, r3
    cad8:	bf02      	ittt	eq
    cada:	ea90 0f02 	teqeq	r0, r2
    cade:	2000      	moveq	r0, #0
    cae0:	4770      	bxeq	lr
    cae2:	f110 0f00 	cmn.w	r0, #0
    cae6:	ea91 0f03 	teq	r1, r3
    caea:	bf58      	it	pl
    caec:	4299      	cmppl	r1, r3
    caee:	bf08      	it	eq
    caf0:	4290      	cmpeq	r0, r2
    caf2:	bf2c      	ite	cs
    caf4:	17d8      	asrcs	r0, r3, #31
    caf6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cafa:	f040 0001 	orr.w	r0, r0, #1
    cafe:	4770      	bx	lr
    cb00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cb04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cb08:	d102      	bne.n	cb10 <__cmpdf2+0x64>
    cb0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cb0e:	d107      	bne.n	cb20 <__cmpdf2+0x74>
    cb10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cb14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cb18:	d1d6      	bne.n	cac8 <__cmpdf2+0x1c>
    cb1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cb1e:	d0d3      	beq.n	cac8 <__cmpdf2+0x1c>
    cb20:	f85d 0b04 	ldr.w	r0, [sp], #4
    cb24:	4770      	bx	lr
    cb26:	bf00      	nop

0000cb28 <__aeabi_cdrcmple>:
    cb28:	4684      	mov	ip, r0
    cb2a:	4610      	mov	r0, r2
    cb2c:	4662      	mov	r2, ip
    cb2e:	468c      	mov	ip, r1
    cb30:	4619      	mov	r1, r3
    cb32:	4663      	mov	r3, ip
    cb34:	e000      	b.n	cb38 <__aeabi_cdcmpeq>
    cb36:	bf00      	nop

0000cb38 <__aeabi_cdcmpeq>:
    cb38:	b501      	push	{r0, lr}
    cb3a:	f7ff ffb7 	bl	caac <__cmpdf2>
    cb3e:	2800      	cmp	r0, #0
    cb40:	bf48      	it	mi
    cb42:	f110 0f00 	cmnmi.w	r0, #0
    cb46:	bd01      	pop	{r0, pc}

0000cb48 <__aeabi_dcmpeq>:
    cb48:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb4c:	f7ff fff4 	bl	cb38 <__aeabi_cdcmpeq>
    cb50:	bf0c      	ite	eq
    cb52:	2001      	moveq	r0, #1
    cb54:	2000      	movne	r0, #0
    cb56:	f85d fb08 	ldr.w	pc, [sp], #8
    cb5a:	bf00      	nop

0000cb5c <__aeabi_dcmplt>:
    cb5c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb60:	f7ff ffea 	bl	cb38 <__aeabi_cdcmpeq>
    cb64:	bf34      	ite	cc
    cb66:	2001      	movcc	r0, #1
    cb68:	2000      	movcs	r0, #0
    cb6a:	f85d fb08 	ldr.w	pc, [sp], #8
    cb6e:	bf00      	nop

0000cb70 <__aeabi_dcmple>:
    cb70:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb74:	f7ff ffe0 	bl	cb38 <__aeabi_cdcmpeq>
    cb78:	bf94      	ite	ls
    cb7a:	2001      	movls	r0, #1
    cb7c:	2000      	movhi	r0, #0
    cb7e:	f85d fb08 	ldr.w	pc, [sp], #8
    cb82:	bf00      	nop

0000cb84 <__aeabi_dcmpge>:
    cb84:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb88:	f7ff ffce 	bl	cb28 <__aeabi_cdrcmple>
    cb8c:	bf94      	ite	ls
    cb8e:	2001      	movls	r0, #1
    cb90:	2000      	movhi	r0, #0
    cb92:	f85d fb08 	ldr.w	pc, [sp], #8
    cb96:	bf00      	nop

0000cb98 <__aeabi_dcmpgt>:
    cb98:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb9c:	f7ff ffc4 	bl	cb28 <__aeabi_cdrcmple>
    cba0:	bf34      	ite	cc
    cba2:	2001      	movcc	r0, #1
    cba4:	2000      	movcs	r0, #0
    cba6:	f85d fb08 	ldr.w	pc, [sp], #8
    cbaa:	bf00      	nop

0000cbac <__aeabi_uldivmod>:
    cbac:	b953      	cbnz	r3, cbc4 <__aeabi_uldivmod+0x18>
    cbae:	b94a      	cbnz	r2, cbc4 <__aeabi_uldivmod+0x18>
    cbb0:	2900      	cmp	r1, #0
    cbb2:	bf08      	it	eq
    cbb4:	2800      	cmpeq	r0, #0
    cbb6:	bf1c      	itt	ne
    cbb8:	f04f 31ff 	movne.w	r1, #4294967295
    cbbc:	f04f 30ff 	movne.w	r0, #4294967295
    cbc0:	f000 b96c 	b.w	ce9c <__aeabi_idiv0>
    cbc4:	f1ad 0c08 	sub.w	ip, sp, #8
    cbc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cbcc:	f000 f806 	bl	cbdc <__udivmoddi4>
    cbd0:	f8dd e004 	ldr.w	lr, [sp, #4]
    cbd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cbd8:	b004      	add	sp, #16
    cbda:	4770      	bx	lr

0000cbdc <__udivmoddi4>:
    cbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbe0:	9e08      	ldr	r6, [sp, #32]
    cbe2:	460d      	mov	r5, r1
    cbe4:	4604      	mov	r4, r0
    cbe6:	468e      	mov	lr, r1
    cbe8:	2b00      	cmp	r3, #0
    cbea:	f040 8082 	bne.w	ccf2 <__udivmoddi4+0x116>
    cbee:	428a      	cmp	r2, r1
    cbf0:	4617      	mov	r7, r2
    cbf2:	d946      	bls.n	cc82 <__udivmoddi4+0xa6>
    cbf4:	fab2 f282 	clz	r2, r2
    cbf8:	b14a      	cbz	r2, cc0e <__udivmoddi4+0x32>
    cbfa:	f1c2 0120 	rsb	r1, r2, #32
    cbfe:	fa05 f302 	lsl.w	r3, r5, r2
    cc02:	fa20 f101 	lsr.w	r1, r0, r1
    cc06:	4097      	lsls	r7, r2
    cc08:	ea41 0e03 	orr.w	lr, r1, r3
    cc0c:	4094      	lsls	r4, r2
    cc0e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    cc12:	0c23      	lsrs	r3, r4, #16
    cc14:	fbbe fcf8 	udiv	ip, lr, r8
    cc18:	b2b9      	uxth	r1, r7
    cc1a:	fb08 ee1c 	mls	lr, r8, ip, lr
    cc1e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    cc22:	fb0c f001 	mul.w	r0, ip, r1
    cc26:	4298      	cmp	r0, r3
    cc28:	d90a      	bls.n	cc40 <__udivmoddi4+0x64>
    cc2a:	18fb      	adds	r3, r7, r3
    cc2c:	f10c 35ff 	add.w	r5, ip, #4294967295
    cc30:	f080 8116 	bcs.w	ce60 <__udivmoddi4+0x284>
    cc34:	4298      	cmp	r0, r3
    cc36:	f240 8113 	bls.w	ce60 <__udivmoddi4+0x284>
    cc3a:	f1ac 0c02 	sub.w	ip, ip, #2
    cc3e:	443b      	add	r3, r7
    cc40:	1a1b      	subs	r3, r3, r0
    cc42:	b2a4      	uxth	r4, r4
    cc44:	fbb3 f0f8 	udiv	r0, r3, r8
    cc48:	fb08 3310 	mls	r3, r8, r0, r3
    cc4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cc50:	fb00 f101 	mul.w	r1, r0, r1
    cc54:	42a1      	cmp	r1, r4
    cc56:	d909      	bls.n	cc6c <__udivmoddi4+0x90>
    cc58:	193c      	adds	r4, r7, r4
    cc5a:	f100 33ff 	add.w	r3, r0, #4294967295
    cc5e:	f080 8101 	bcs.w	ce64 <__udivmoddi4+0x288>
    cc62:	42a1      	cmp	r1, r4
    cc64:	f240 80fe 	bls.w	ce64 <__udivmoddi4+0x288>
    cc68:	3802      	subs	r0, #2
    cc6a:	443c      	add	r4, r7
    cc6c:	1a64      	subs	r4, r4, r1
    cc6e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cc72:	2100      	movs	r1, #0
    cc74:	b11e      	cbz	r6, cc7e <__udivmoddi4+0xa2>
    cc76:	40d4      	lsrs	r4, r2
    cc78:	2300      	movs	r3, #0
    cc7a:	e9c6 4300 	strd	r4, r3, [r6]
    cc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc82:	b902      	cbnz	r2, cc86 <__udivmoddi4+0xaa>
    cc84:	deff      	udf	#255	; 0xff
    cc86:	fab2 f282 	clz	r2, r2
    cc8a:	2a00      	cmp	r2, #0
    cc8c:	d14f      	bne.n	cd2e <__udivmoddi4+0x152>
    cc8e:	1bcb      	subs	r3, r1, r7
    cc90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cc94:	fa1f f887 	uxth.w	r8, r7
    cc98:	2101      	movs	r1, #1
    cc9a:	fbb3 fcfe 	udiv	ip, r3, lr
    cc9e:	0c25      	lsrs	r5, r4, #16
    cca0:	fb0e 331c 	mls	r3, lr, ip, r3
    cca4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cca8:	fb08 f30c 	mul.w	r3, r8, ip
    ccac:	42ab      	cmp	r3, r5
    ccae:	d907      	bls.n	ccc0 <__udivmoddi4+0xe4>
    ccb0:	197d      	adds	r5, r7, r5
    ccb2:	f10c 30ff 	add.w	r0, ip, #4294967295
    ccb6:	d202      	bcs.n	ccbe <__udivmoddi4+0xe2>
    ccb8:	42ab      	cmp	r3, r5
    ccba:	f200 80e7 	bhi.w	ce8c <__udivmoddi4+0x2b0>
    ccbe:	4684      	mov	ip, r0
    ccc0:	1aed      	subs	r5, r5, r3
    ccc2:	b2a3      	uxth	r3, r4
    ccc4:	fbb5 f0fe 	udiv	r0, r5, lr
    ccc8:	fb0e 5510 	mls	r5, lr, r0, r5
    cccc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    ccd0:	fb08 f800 	mul.w	r8, r8, r0
    ccd4:	45a0      	cmp	r8, r4
    ccd6:	d907      	bls.n	cce8 <__udivmoddi4+0x10c>
    ccd8:	193c      	adds	r4, r7, r4
    ccda:	f100 33ff 	add.w	r3, r0, #4294967295
    ccde:	d202      	bcs.n	cce6 <__udivmoddi4+0x10a>
    cce0:	45a0      	cmp	r8, r4
    cce2:	f200 80d7 	bhi.w	ce94 <__udivmoddi4+0x2b8>
    cce6:	4618      	mov	r0, r3
    cce8:	eba4 0408 	sub.w	r4, r4, r8
    ccec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    ccf0:	e7c0      	b.n	cc74 <__udivmoddi4+0x98>
    ccf2:	428b      	cmp	r3, r1
    ccf4:	d908      	bls.n	cd08 <__udivmoddi4+0x12c>
    ccf6:	2e00      	cmp	r6, #0
    ccf8:	f000 80af 	beq.w	ce5a <__udivmoddi4+0x27e>
    ccfc:	2100      	movs	r1, #0
    ccfe:	e9c6 0500 	strd	r0, r5, [r6]
    cd02:	4608      	mov	r0, r1
    cd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd08:	fab3 f183 	clz	r1, r3
    cd0c:	2900      	cmp	r1, #0
    cd0e:	d14b      	bne.n	cda8 <__udivmoddi4+0x1cc>
    cd10:	42ab      	cmp	r3, r5
    cd12:	d302      	bcc.n	cd1a <__udivmoddi4+0x13e>
    cd14:	4282      	cmp	r2, r0
    cd16:	f200 80b7 	bhi.w	ce88 <__udivmoddi4+0x2ac>
    cd1a:	1a84      	subs	r4, r0, r2
    cd1c:	eb65 0303 	sbc.w	r3, r5, r3
    cd20:	2001      	movs	r0, #1
    cd22:	469e      	mov	lr, r3
    cd24:	2e00      	cmp	r6, #0
    cd26:	d0aa      	beq.n	cc7e <__udivmoddi4+0xa2>
    cd28:	e9c6 4e00 	strd	r4, lr, [r6]
    cd2c:	e7a7      	b.n	cc7e <__udivmoddi4+0xa2>
    cd2e:	f1c2 0c20 	rsb	ip, r2, #32
    cd32:	fa01 f302 	lsl.w	r3, r1, r2
    cd36:	4097      	lsls	r7, r2
    cd38:	fa20 f00c 	lsr.w	r0, r0, ip
    cd3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cd40:	fa21 fc0c 	lsr.w	ip, r1, ip
    cd44:	4318      	orrs	r0, r3
    cd46:	fbbc f1fe 	udiv	r1, ip, lr
    cd4a:	0c05      	lsrs	r5, r0, #16
    cd4c:	fb0e cc11 	mls	ip, lr, r1, ip
    cd50:	fa1f f887 	uxth.w	r8, r7
    cd54:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    cd58:	fb01 f308 	mul.w	r3, r1, r8
    cd5c:	42ab      	cmp	r3, r5
    cd5e:	fa04 f402 	lsl.w	r4, r4, r2
    cd62:	d909      	bls.n	cd78 <__udivmoddi4+0x19c>
    cd64:	197d      	adds	r5, r7, r5
    cd66:	f101 3cff 	add.w	ip, r1, #4294967295
    cd6a:	f080 808b 	bcs.w	ce84 <__udivmoddi4+0x2a8>
    cd6e:	42ab      	cmp	r3, r5
    cd70:	f240 8088 	bls.w	ce84 <__udivmoddi4+0x2a8>
    cd74:	3902      	subs	r1, #2
    cd76:	443d      	add	r5, r7
    cd78:	1aeb      	subs	r3, r5, r3
    cd7a:	b285      	uxth	r5, r0
    cd7c:	fbb3 f0fe 	udiv	r0, r3, lr
    cd80:	fb0e 3310 	mls	r3, lr, r0, r3
    cd84:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cd88:	fb00 f308 	mul.w	r3, r0, r8
    cd8c:	42ab      	cmp	r3, r5
    cd8e:	d907      	bls.n	cda0 <__udivmoddi4+0x1c4>
    cd90:	197d      	adds	r5, r7, r5
    cd92:	f100 3cff 	add.w	ip, r0, #4294967295
    cd96:	d271      	bcs.n	ce7c <__udivmoddi4+0x2a0>
    cd98:	42ab      	cmp	r3, r5
    cd9a:	d96f      	bls.n	ce7c <__udivmoddi4+0x2a0>
    cd9c:	3802      	subs	r0, #2
    cd9e:	443d      	add	r5, r7
    cda0:	1aeb      	subs	r3, r5, r3
    cda2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    cda6:	e778      	b.n	cc9a <__udivmoddi4+0xbe>
    cda8:	f1c1 0c20 	rsb	ip, r1, #32
    cdac:	408b      	lsls	r3, r1
    cdae:	fa22 f70c 	lsr.w	r7, r2, ip
    cdb2:	431f      	orrs	r7, r3
    cdb4:	fa20 f40c 	lsr.w	r4, r0, ip
    cdb8:	fa05 f301 	lsl.w	r3, r5, r1
    cdbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cdc0:	fa25 f50c 	lsr.w	r5, r5, ip
    cdc4:	431c      	orrs	r4, r3
    cdc6:	0c23      	lsrs	r3, r4, #16
    cdc8:	fbb5 f9fe 	udiv	r9, r5, lr
    cdcc:	fa1f f887 	uxth.w	r8, r7
    cdd0:	fb0e 5519 	mls	r5, lr, r9, r5
    cdd4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    cdd8:	fb09 fa08 	mul.w	sl, r9, r8
    cddc:	45aa      	cmp	sl, r5
    cdde:	fa02 f201 	lsl.w	r2, r2, r1
    cde2:	fa00 f301 	lsl.w	r3, r0, r1
    cde6:	d908      	bls.n	cdfa <__udivmoddi4+0x21e>
    cde8:	197d      	adds	r5, r7, r5
    cdea:	f109 30ff 	add.w	r0, r9, #4294967295
    cdee:	d247      	bcs.n	ce80 <__udivmoddi4+0x2a4>
    cdf0:	45aa      	cmp	sl, r5
    cdf2:	d945      	bls.n	ce80 <__udivmoddi4+0x2a4>
    cdf4:	f1a9 0902 	sub.w	r9, r9, #2
    cdf8:	443d      	add	r5, r7
    cdfa:	eba5 050a 	sub.w	r5, r5, sl
    cdfe:	b2a4      	uxth	r4, r4
    ce00:	fbb5 f0fe 	udiv	r0, r5, lr
    ce04:	fb0e 5510 	mls	r5, lr, r0, r5
    ce08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    ce0c:	fb00 f808 	mul.w	r8, r0, r8
    ce10:	45a0      	cmp	r8, r4
    ce12:	d907      	bls.n	ce24 <__udivmoddi4+0x248>
    ce14:	193c      	adds	r4, r7, r4
    ce16:	f100 35ff 	add.w	r5, r0, #4294967295
    ce1a:	d22d      	bcs.n	ce78 <__udivmoddi4+0x29c>
    ce1c:	45a0      	cmp	r8, r4
    ce1e:	d92b      	bls.n	ce78 <__udivmoddi4+0x29c>
    ce20:	3802      	subs	r0, #2
    ce22:	443c      	add	r4, r7
    ce24:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    ce28:	eba4 0408 	sub.w	r4, r4, r8
    ce2c:	fba0 8902 	umull	r8, r9, r0, r2
    ce30:	454c      	cmp	r4, r9
    ce32:	46c6      	mov	lr, r8
    ce34:	464d      	mov	r5, r9
    ce36:	d319      	bcc.n	ce6c <__udivmoddi4+0x290>
    ce38:	d016      	beq.n	ce68 <__udivmoddi4+0x28c>
    ce3a:	b15e      	cbz	r6, ce54 <__udivmoddi4+0x278>
    ce3c:	ebb3 020e 	subs.w	r2, r3, lr
    ce40:	eb64 0405 	sbc.w	r4, r4, r5
    ce44:	fa04 fc0c 	lsl.w	ip, r4, ip
    ce48:	40ca      	lsrs	r2, r1
    ce4a:	ea4c 0202 	orr.w	r2, ip, r2
    ce4e:	40cc      	lsrs	r4, r1
    ce50:	e9c6 2400 	strd	r2, r4, [r6]
    ce54:	2100      	movs	r1, #0
    ce56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce5a:	4631      	mov	r1, r6
    ce5c:	4630      	mov	r0, r6
    ce5e:	e70e      	b.n	cc7e <__udivmoddi4+0xa2>
    ce60:	46ac      	mov	ip, r5
    ce62:	e6ed      	b.n	cc40 <__udivmoddi4+0x64>
    ce64:	4618      	mov	r0, r3
    ce66:	e701      	b.n	cc6c <__udivmoddi4+0x90>
    ce68:	4543      	cmp	r3, r8
    ce6a:	d2e6      	bcs.n	ce3a <__udivmoddi4+0x25e>
    ce6c:	ebb8 0e02 	subs.w	lr, r8, r2
    ce70:	eb69 0507 	sbc.w	r5, r9, r7
    ce74:	3801      	subs	r0, #1
    ce76:	e7e0      	b.n	ce3a <__udivmoddi4+0x25e>
    ce78:	4628      	mov	r0, r5
    ce7a:	e7d3      	b.n	ce24 <__udivmoddi4+0x248>
    ce7c:	4660      	mov	r0, ip
    ce7e:	e78f      	b.n	cda0 <__udivmoddi4+0x1c4>
    ce80:	4681      	mov	r9, r0
    ce82:	e7ba      	b.n	cdfa <__udivmoddi4+0x21e>
    ce84:	4661      	mov	r1, ip
    ce86:	e777      	b.n	cd78 <__udivmoddi4+0x19c>
    ce88:	4608      	mov	r0, r1
    ce8a:	e74b      	b.n	cd24 <__udivmoddi4+0x148>
    ce8c:	f1ac 0c02 	sub.w	ip, ip, #2
    ce90:	443d      	add	r5, r7
    ce92:	e715      	b.n	ccc0 <__udivmoddi4+0xe4>
    ce94:	3802      	subs	r0, #2
    ce96:	443c      	add	r4, r7
    ce98:	e726      	b.n	cce8 <__udivmoddi4+0x10c>
    ce9a:	bf00      	nop

0000ce9c <__aeabi_idiv0>:
    ce9c:	4770      	bx	lr
    ce9e:	bf00      	nop

0000cea0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cea2:	4615      	mov	r5, r2
    cea4:	4a0a      	ldr	r2, [pc, #40]	; (ced0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    cea6:	461c      	mov	r4, r3
    cea8:	6856      	ldr	r6, [r2, #4]
    ceaa:	b12e      	cbz	r6, ceb8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    ceac:	b001      	add	sp, #4
    ceae:	462a      	mov	r2, r5
    ceb0:	46b4      	mov	ip, r6
    ceb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ceb6:	4760      	bx	ip
    ceb8:	2000      	movs	r0, #0
    ceba:	f88d 0000 	strb.w	r0, [sp]
    cebe:	4668      	mov	r0, sp
    cec0:	f00b ffc6 	bl	18e50 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    cec4:	f89d 0000 	ldrb.w	r0, [sp]
    cec8:	1a28      	subs	r0, r5, r0
    ceca:	7020      	strb	r0, [r4, #0]
    cecc:	2000      	movs	r0, #0
    cece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ced0:	20000000 	.word	0x20000000
    ced4:	2800      	cmp	r0, #0
    ced6:	d019      	beq.n	cf0c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6c>
    ced8:	7803      	ldrb	r3, [r0, #0]
    ceda:	4913      	ldr	r1, [pc, #76]	; (cf28 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x88>)
    cedc:	4a13      	ldr	r2, [pc, #76]	; (cf2c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x8c>)
    cede:	b113      	cbz	r3, cee6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x46>
    cee0:	2b01      	cmp	r3, #1
    cee2:	d00e      	beq.n	cf02 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x62>
    cee4:	e011      	b.n	cf0a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cee6:	7903      	ldrb	r3, [r0, #4]
    cee8:	2b01      	cmp	r3, #1
    ceea:	d000      	beq.n	ceee <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x4e>
    ceec:	b96b      	cbnz	r3, cf0a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    ceee:	7943      	ldrb	r3, [r0, #5]
    cef0:	b10b      	cbz	r3, cef6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x56>
    cef2:	2b01      	cmp	r3, #1
    cef4:	d109      	bne.n	cf0a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cef6:	6883      	ldr	r3, [r0, #8]
    cef8:	3b64      	subs	r3, #100	; 0x64
    cefa:	428b      	cmp	r3, r1
    cefc:	d205      	bcs.n	cf0a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cefe:	68c0      	ldr	r0, [r0, #12]
    cf00:	e00e      	b.n	cf20 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x80>
    cf02:	7903      	ldrb	r3, [r0, #4]
    cf04:	2b01      	cmp	r3, #1
    cf06:	d002      	beq.n	cf0e <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    cf08:	b10b      	cbz	r3, cf0e <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    cf0a:	2000      	movs	r0, #0
    cf0c:	4770      	bx	lr
    cf0e:	7943      	ldrb	r3, [r0, #5]
    cf10:	b10b      	cbz	r3, cf16 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x76>
    cf12:	2b01      	cmp	r3, #1
    cf14:	d1f9      	bne.n	cf0a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cf16:	68c3      	ldr	r3, [r0, #12]
    cf18:	3b64      	subs	r3, #100	; 0x64
    cf1a:	428b      	cmp	r3, r1
    cf1c:	d2f5      	bcs.n	cf0a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cf1e:	6880      	ldr	r0, [r0, #8]
    cf20:	4290      	cmp	r0, r2
    cf22:	d8f2      	bhi.n	cf0a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cf24:	2001      	movs	r0, #1
    cf26:	4770      	bx	lr
    cf28:	0001863d 	.word	0x0001863d
    cf2c:	07a11fff 	.word	0x07a11fff
    cf30:	b510      	push	{r4, lr}
    cf32:	4c05      	ldr	r4, [pc, #20]	; (cf48 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0xa8>)
    cf34:	6820      	ldr	r0, [r4, #0]
    cf36:	b110      	cbz	r0, cf3e <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x9e>
    cf38:	4780      	blx	r0
    cf3a:	2000      	movs	r0, #0
    cf3c:	6020      	str	r0, [r4, #0]
    cf3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf42:	f002 b805 	b.w	ef50 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    cf46:	0000      	.short	0x0000
    cf48:	20000008 	.word	0x20000008

0000cf4c <mpsl_timeslot_session_open>:
    cf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf50:	460e      	mov	r6, r1
    cf52:	0005      	movs	r5, r0
    cf54:	d004      	beq.n	cf60 <mpsl_timeslot_session_open+0x14>
    cf56:	f000 f845 	bl	cfe4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cf5a:	4607      	mov	r7, r0
    cf5c:	2400      	movs	r4, #0
    cf5e:	e00a      	b.n	cf76 <mpsl_timeslot_session_open+0x2a>
    cf60:	f06f 0015 	mvn.w	r0, #21
    cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf68:	4620      	mov	r0, r4
    cf6a:	f000 f841 	bl	cff0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cf6e:	7880      	ldrb	r0, [r0, #2]
    cf70:	b138      	cbz	r0, cf82 <mpsl_timeslot_session_open+0x36>
    cf72:	1c64      	adds	r4, r4, #1
    cf74:	b2e4      	uxtb	r4, r4
    cf76:	42bc      	cmp	r4, r7
    cf78:	d3f6      	bcc.n	cf68 <mpsl_timeslot_session_open+0x1c>
    cf7a:	bf00      	nop
    cf7c:	f06f 000b 	mvn.w	r0, #11
    cf80:	e7f0      	b.n	cf64 <mpsl_timeslot_session_open+0x18>
    cf82:	4627      	mov	r7, r4
    cf84:	2cff      	cmp	r4, #255	; 0xff
    cf86:	d0f9      	beq.n	cf7c <mpsl_timeslot_session_open+0x30>
    cf88:	4620      	mov	r0, r4
    cf8a:	f000 f831 	bl	cff0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cf8e:	4604      	mov	r4, r0
    cf90:	f00c f901 	bl	19196 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    cf94:	7127      	strb	r7, [r4, #4]
    cf96:	4621      	mov	r1, r4
    cf98:	4807      	ldr	r0, [pc, #28]	; (cfb8 <mpsl_timeslot_session_open+0x6c>)
    cf9a:	f001 ffb1 	bl	ef00 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    cf9e:	70e0      	strb	r0, [r4, #3]
    cfa0:	2820      	cmp	r0, #32
    cfa2:	d005      	beq.n	cfb0 <mpsl_timeslot_session_open+0x64>
    cfa4:	2001      	movs	r0, #1
    cfa6:	60a5      	str	r5, [r4, #8]
    cfa8:	70a0      	strb	r0, [r4, #2]
    cfaa:	7037      	strb	r7, [r6, #0]
    cfac:	2000      	movs	r0, #0
    cfae:	e7d9      	b.n	cf64 <mpsl_timeslot_session_open+0x18>
    cfb0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cfb4:	e7d6      	b.n	cf64 <mpsl_timeslot_session_open+0x18>
    cfb6:	0000      	.short	0x0000
    cfb8:	00018ef7 	.word	0x00018ef7

0000cfbc <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    cfbc:	b510      	push	{r4, lr}
    cfbe:	0782      	lsls	r2, r0, #30
    cfc0:	d002      	beq.n	cfc8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    cfc2:	f06f 000d 	mvn.w	r0, #13
    cfc6:	bd10      	pop	{r4, pc}
    cfc8:	4a05      	ldr	r2, [pc, #20]	; (cfe0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    cfca:	7011      	strb	r1, [r2, #0]
    cfcc:	6050      	str	r0, [r2, #4]
    cfce:	b128      	cbz	r0, cfdc <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    cfd0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    cfd4:	008a      	lsls	r2, r1, #2
    cfd6:	2100      	movs	r1, #0
    cfd8:	f00c fb63 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cfdc:	2000      	movs	r0, #0
    cfde:	bd10      	pop	{r4, pc}
    cfe0:	2000000c 	.word	0x2000000c

0000cfe4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    cfe4:	4801      	ldr	r0, [pc, #4]	; (cfec <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    cfe6:	7800      	ldrb	r0, [r0, #0]
    cfe8:	4770      	bx	lr
    cfea:	0000      	.short	0x0000
    cfec:	2000000c 	.word	0x2000000c

0000cff0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    cff0:	4905      	ldr	r1, [pc, #20]	; (d008 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    cff2:	780a      	ldrb	r2, [r1, #0]
    cff4:	4290      	cmp	r0, r2
    cff6:	d301      	bcc.n	cffc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    cff8:	2000      	movs	r0, #0
    cffa:	4770      	bx	lr
    cffc:	6849      	ldr	r1, [r1, #4]
    cffe:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    d002:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    d006:	4770      	bx	lr
    d008:	2000000c 	.word	0x2000000c
    d00c:	b570      	push	{r4, r5, r6, lr}
    d00e:	4605      	mov	r5, r0
    d010:	2a20      	cmp	r2, #32
    d012:	d027      	beq.n	d064 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    d014:	4819      	ldr	r0, [pc, #100]	; (d07c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    d016:	4c1a      	ldr	r4, [pc, #104]	; (d080 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    d018:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    d01c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    d020:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d024:	2920      	cmp	r1, #32
    d026:	d022      	beq.n	d06e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    d028:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    d02c:	7840      	ldrb	r0, [r0, #1]
    d02e:	784c      	ldrb	r4, [r1, #1]
    d030:	7048      	strb	r0, [r1, #1]
    d032:	4620      	mov	r0, r4
    d034:	4601      	mov	r1, r0
    d036:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    d03a:	4291      	cmp	r1, r2
    d03c:	7005      	strb	r5, [r0, #0]
    d03e:	7840      	ldrb	r0, [r0, #1]
    d040:	d1f8      	bne.n	d034 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    d042:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    d046:	2a20      	cmp	r2, #32
    d048:	bf1a      	itte	ne
    d04a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    d04e:	7054      	strbne	r4, [r2, #1]
    d050:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    d054:	2220      	movs	r2, #32
    d056:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    d05a:	f88c 2001 	strb.w	r2, [ip, #1]
    d05e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    d062:	bd70      	pop	{r4, r5, r6, pc}
    d064:	f240 217e 	movw	r1, #638	; 0x27e
    d068:	2070      	movs	r0, #112	; 0x70
    d06a:	f003 f9a1 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d06e:	f893 4020 	ldrb.w	r4, [r3, #32]
    d072:	7840      	ldrb	r0, [r0, #1]
    d074:	f883 0020 	strb.w	r0, [r3, #32]
    d078:	e7db      	b.n	d032 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    d07a:	0000      	.short	0x0000
    d07c:	2000111c 	.word	0x2000111c
    d080:	2000119c 	.word	0x2000119c
    d084:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d088:	b085      	sub	sp, #20
    d08a:	4615      	mov	r5, r2
    d08c:	460c      	mov	r4, r1
    d08e:	f002 f915 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d092:	4428      	add	r0, r5
    d094:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d098:	9002      	str	r0, [sp, #8]
    d09a:	6821      	ldr	r1, [r4, #0]
    d09c:	1a08      	subs	r0, r1, r0
    d09e:	0200      	lsls	r0, r0, #8
    d0a0:	17c1      	asrs	r1, r0, #31
    d0a2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d0a6:	1200      	asrs	r0, r0, #8
    d0a8:	2800      	cmp	r0, #0
    d0aa:	f300 80d5 	bgt.w	d258 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    d0ae:	48ac      	ldr	r0, [pc, #688]	; (d360 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    d0b0:	9f08      	ldr	r7, [sp, #32]
    d0b2:	4eac      	ldr	r6, [pc, #688]	; (d364 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    d0b4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    d0b8:	9003      	str	r0, [sp, #12]
    d0ba:	f890 5020 	ldrb.w	r5, [r0, #32]
    d0be:	2020      	movs	r0, #32
    d0c0:	46e9      	mov	r9, sp
    d0c2:	f10d 0804 	add.w	r8, sp, #4
    d0c6:	f88d 0000 	strb.w	r0, [sp]
    d0ca:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    d0ce:	2d20      	cmp	r5, #32
    d0d0:	bf18      	it	ne
    d0d2:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    d0d6:	d025      	beq.n	d124 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d0d8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d0dc:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    d0e0:	6822      	ldr	r2, [r4, #0]
    d0e2:	68c1      	ldr	r1, [r0, #12]
    d0e4:	1a51      	subs	r1, r2, r1
    d0e6:	0209      	lsls	r1, r1, #8
    d0e8:	17ca      	asrs	r2, r1, #31
    d0ea:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d0ee:	3008      	adds	r0, #8
    d0f0:	1209      	asrs	r1, r1, #8
    d0f2:	d417      	bmi.n	d124 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d0f4:	8961      	ldrh	r1, [r4, #10]
    d0f6:	b171      	cbz	r1, d116 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    d0f8:	8941      	ldrh	r1, [r0, #10]
    d0fa:	b961      	cbnz	r1, d116 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    d0fc:	f000 fdb4 	bl	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d100:	f002 f8dc 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d104:	6821      	ldr	r1, [r4, #0]
    d106:	1a08      	subs	r0, r1, r0
    d108:	0200      	lsls	r0, r0, #8
    d10a:	17c1      	asrs	r1, r0, #31
    d10c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d110:	1200      	asrs	r0, r0, #8
    d112:	2833      	cmp	r0, #51	; 0x33
    d114:	db06      	blt.n	d124 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d116:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d11a:	f889 5000 	strb.w	r5, [r9]
    d11e:	7845      	ldrb	r5, [r0, #1]
    d120:	2d20      	cmp	r5, #32
    d122:	d1d9      	bne.n	d0d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    d124:	f899 0000 	ldrb.w	r0, [r9]
    d128:	f888 0000 	strb.w	r0, [r8]
    d12c:	46a1      	mov	r9, r4
    d12e:	2d20      	cmp	r5, #32
    d130:	bf1c      	itt	ne
    d132:	488d      	ldrne	r0, [pc, #564]	; (d368 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d134:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    d138:	f000 810e 	beq.w	d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d13c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d140:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    d144:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d148:	f8da 1008 	ldr.w	r1, [sl, #8]
    d14c:	4648      	mov	r0, r9
    d14e:	1a89      	subs	r1, r1, r2
    d150:	0209      	lsls	r1, r1, #8
    d152:	17ca      	asrs	r2, r1, #31
    d154:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d158:	f10a 0708 	add.w	r7, sl, #8
    d15c:	1209      	asrs	r1, r1, #8
    d15e:	d415      	bmi.n	d18c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    d160:	8979      	ldrh	r1, [r7, #10]
    d162:	2900      	cmp	r1, #0
    d164:	f000 80f8 	beq.w	d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d168:	8941      	ldrh	r1, [r0, #10]
    d16a:	2900      	cmp	r1, #0
    d16c:	f040 80f4 	bne.w	d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d170:	f000 fd7a 	bl	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d174:	f002 f8a2 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d178:	6839      	ldr	r1, [r7, #0]
    d17a:	1a08      	subs	r0, r1, r0
    d17c:	0200      	lsls	r0, r0, #8
    d17e:	17c1      	asrs	r1, r0, #31
    d180:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d184:	1200      	asrs	r0, r0, #8
    d186:	2833      	cmp	r0, #51	; 0x33
    d188:	f280 80e6 	bge.w	d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d18c:	f888 5000 	strb.w	r5, [r8]
    d190:	f89a 1014 	ldrb.w	r1, [sl, #20]
    d194:	f899 000c 	ldrb.w	r0, [r9, #12]
    d198:	4281      	cmp	r1, r0
    d19a:	d906      	bls.n	d1aa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    d19c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d1a0:	7845      	ldrb	r5, [r0, #1]
    d1a2:	2d20      	cmp	r5, #32
    d1a4:	d1ca      	bne.n	d13c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    d1a6:	f000 b8d7 	b.w	d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d1aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    d1ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d1b2:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    d1b6:	8a68      	ldrh	r0, [r5, #18]
    d1b8:	68ef      	ldr	r7, [r5, #12]
    d1ba:	2800      	cmp	r0, #0
    d1bc:	d143      	bne.n	d246 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    d1be:	8960      	ldrh	r0, [r4, #10]
    d1c0:	b3e8      	cbz	r0, d23e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    d1c2:	68a8      	ldr	r0, [r5, #8]
    d1c4:	f00c f885 	bl	192d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d1c8:	8a69      	ldrh	r1, [r5, #18]
    d1ca:	7c2a      	ldrb	r2, [r5, #16]
    d1cc:	4b67      	ldr	r3, [pc, #412]	; (d36c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    d1ce:	4411      	add	r1, r2
    d1d0:	1c49      	adds	r1, r1, #1
    d1d2:	1842      	adds	r2, r0, r1
    d1d4:	4298      	cmp	r0, r3
    d1d6:	d904      	bls.n	d1e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    d1d8:	f240 6109 	movw	r1, #1545	; 0x609
    d1dc:	2070      	movs	r0, #112	; 0x70
    d1de:	f003 f8e7 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d1e2:	4863      	ldr	r0, [pc, #396]	; (d370 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    d1e4:	4281      	cmp	r1, r0
    d1e6:	dd04      	ble.n	d1f2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    d1e8:	f240 610a 	movw	r1, #1546	; 0x60a
    d1ec:	2070      	movs	r0, #112	; 0x70
    d1ee:	f003 f8df 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d1f2:	4860      	ldr	r0, [pc, #384]	; (d374 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    d1f4:	4281      	cmp	r1, r0
    d1f6:	da04      	bge.n	d202 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    d1f8:	f240 610b 	movw	r1, #1547	; 0x60b
    d1fc:	2070      	movs	r0, #112	; 0x70
    d1fe:	f003 f8d7 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d202:	485d      	ldr	r0, [pc, #372]	; (d378 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    d204:	4290      	cmp	r0, r2
    d206:	bfdc      	itt	le
    d208:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    d20c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    d210:	dd05      	ble.n	d21e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    d212:	2a00      	cmp	r2, #0
    d214:	bfbc      	itt	lt
    d216:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    d21a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    d21e:	4610      	mov	r0, r2
    d220:	f002 f84c 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d224:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    d228:	1a78      	subs	r0, r7, r1
    d22a:	0200      	lsls	r0, r0, #8
    d22c:	17c2      	asrs	r2, r0, #31
    d22e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    d232:	1200      	asrs	r0, r0, #8
    d234:	2833      	cmp	r0, #51	; 0x33
    d236:	bfb8      	it	lt
    d238:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    d23c:	e000      	b.n	d240 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    d23e:	e002      	b.n	d246 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    d240:	bfb8      	it	lt
    d242:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    d246:	9802      	ldr	r0, [sp, #8]
    d248:	1a38      	subs	r0, r7, r0
    d24a:	0200      	lsls	r0, r0, #8
    d24c:	17c1      	asrs	r1, r0, #31
    d24e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d252:	1200      	asrs	r0, r0, #8
    d254:	2800      	cmp	r0, #0
    d256:	dd03      	ble.n	d260 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    d258:	b009      	add	sp, #36	; 0x24
    d25a:	2000      	movs	r0, #0
    d25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d260:	e9d4 1000 	ldrd	r1, r0, [r4]
    d264:	1a40      	subs	r0, r0, r1
    d266:	4438      	add	r0, r7
    d268:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    d26c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d270:	e9c4 1000 	strd	r1, r0, [r4]
    d274:	9803      	ldr	r0, [sp, #12]
    d276:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d27a:	466f      	mov	r7, sp
    d27c:	f890 5020 	ldrb.w	r5, [r0, #32]
    d280:	2020      	movs	r0, #32
    d282:	f10d 0a04 	add.w	sl, sp, #4
    d286:	f88d 0000 	strb.w	r0, [sp]
    d28a:	2d20      	cmp	r5, #32
    d28c:	bf1c      	itt	ne
    d28e:	4836      	ldrne	r0, [pc, #216]	; (d368 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d290:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    d294:	d025      	beq.n	d2e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d296:	bf00      	nop
    d298:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d29c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    d2a0:	6822      	ldr	r2, [r4, #0]
    d2a2:	68c1      	ldr	r1, [r0, #12]
    d2a4:	1a51      	subs	r1, r2, r1
    d2a6:	0209      	lsls	r1, r1, #8
    d2a8:	17ca      	asrs	r2, r1, #31
    d2aa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d2ae:	3008      	adds	r0, #8
    d2b0:	1209      	asrs	r1, r1, #8
    d2b2:	d416      	bmi.n	d2e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d2b4:	8961      	ldrh	r1, [r4, #10]
    d2b6:	b171      	cbz	r1, d2d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    d2b8:	8941      	ldrh	r1, [r0, #10]
    d2ba:	b961      	cbnz	r1, d2d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    d2bc:	f000 fcd4 	bl	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d2c0:	f001 fffc 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d2c4:	6821      	ldr	r1, [r4, #0]
    d2c6:	1a08      	subs	r0, r1, r0
    d2c8:	0200      	lsls	r0, r0, #8
    d2ca:	17c1      	asrs	r1, r0, #31
    d2cc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d2d0:	1200      	asrs	r0, r0, #8
    d2d2:	2833      	cmp	r0, #51	; 0x33
    d2d4:	db05      	blt.n	d2e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d2d6:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    d2da:	703d      	strb	r5, [r7, #0]
    d2dc:	7845      	ldrb	r5, [r0, #1]
    d2de:	2d20      	cmp	r5, #32
    d2e0:	d1da      	bne.n	d298 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    d2e2:	7838      	ldrb	r0, [r7, #0]
    d2e4:	f88a 0000 	strb.w	r0, [sl]
    d2e8:	4627      	mov	r7, r4
    d2ea:	2d20      	cmp	r5, #32
    d2ec:	bf1c      	itt	ne
    d2ee:	481e      	ldrne	r0, [pc, #120]	; (d368 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d2f0:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    d2f4:	d030      	beq.n	d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d2f6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d2fa:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    d2fe:	6879      	ldr	r1, [r7, #4]
    d300:	f8d9 2008 	ldr.w	r2, [r9, #8]
    d304:	4638      	mov	r0, r7
    d306:	1a51      	subs	r1, r2, r1
    d308:	0209      	lsls	r1, r1, #8
    d30a:	17ca      	asrs	r2, r1, #31
    d30c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d310:	f109 0808 	add.w	r8, r9, #8
    d314:	1209      	asrs	r1, r1, #8
    d316:	d412      	bmi.n	d33e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    d318:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    d31c:	b1e1      	cbz	r1, d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d31e:	8941      	ldrh	r1, [r0, #10]
    d320:	b9d1      	cbnz	r1, d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d322:	f000 fca1 	bl	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d326:	f001 ffc9 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d32a:	f8d8 1000 	ldr.w	r1, [r8]
    d32e:	1a08      	subs	r0, r1, r0
    d330:	0200      	lsls	r0, r0, #8
    d332:	17c1      	asrs	r1, r0, #31
    d334:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d338:	1200      	asrs	r0, r0, #8
    d33a:	2833      	cmp	r0, #51	; 0x33
    d33c:	da0c      	bge.n	d358 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d33e:	f88a 5000 	strb.w	r5, [sl]
    d342:	f899 0014 	ldrb.w	r0, [r9, #20]
    d346:	7b39      	ldrb	r1, [r7, #12]
    d348:	4288      	cmp	r0, r1
    d34a:	f67f af2e 	bls.w	d1aa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    d34e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d352:	7845      	ldrb	r5, [r0, #1]
    d354:	2d20      	cmp	r5, #32
    d356:	d1ce      	bne.n	d2f6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    d358:	b009      	add	sp, #36	; 0x24
    d35a:	2001      	movs	r0, #1
    d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d360:	2000119c 	.word	0x2000119c
    d364:	20000e1c 	.word	0x20000e1c
    d368:	2000111c 	.word	0x2000111c
    d36c:	1e847fff 	.word	0x1e847fff
    d370:	07a12000 	.word	0x07a12000
    d374:	f85ee000 	.word	0xf85ee000
    d378:	1e848000 	.word	0x1e848000
    d37c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d380:	4604      	mov	r4, r0
    d382:	483c      	ldr	r0, [pc, #240]	; (d474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    d384:	460e      	mov	r6, r1
    d386:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    d38a:	4f3b      	ldr	r7, [pc, #236]	; (d478 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    d38c:	f890 5020 	ldrb.w	r5, [r0, #32]
    d390:	2020      	movs	r0, #32
    d392:	4698      	mov	r8, r3
    d394:	4692      	mov	sl, r2
    d396:	7010      	strb	r0, [r2, #0]
    d398:	f507 7940 	add.w	r9, r7, #768	; 0x300
    d39c:	2d20      	cmp	r5, #32
    d39e:	bf18      	it	ne
    d3a0:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    d3a4:	d028      	beq.n	d3f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d3a6:	bf00      	nop
    d3a8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d3ac:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    d3b0:	f100 0108 	add.w	r1, r0, #8
    d3b4:	68c0      	ldr	r0, [r0, #12]
    d3b6:	6822      	ldr	r2, [r4, #0]
    d3b8:	1a10      	subs	r0, r2, r0
    d3ba:	0200      	lsls	r0, r0, #8
    d3bc:	17c2      	asrs	r2, r0, #31
    d3be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    d3c2:	1200      	asrs	r0, r0, #8
    d3c4:	d418      	bmi.n	d3f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d3c6:	8960      	ldrh	r0, [r4, #10]
    d3c8:	b178      	cbz	r0, d3ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    d3ca:	8948      	ldrh	r0, [r1, #10]
    d3cc:	b968      	cbnz	r0, d3ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    d3ce:	4608      	mov	r0, r1
    d3d0:	f000 fc4a 	bl	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d3d4:	f001 ff72 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d3d8:	6821      	ldr	r1, [r4, #0]
    d3da:	1a08      	subs	r0, r1, r0
    d3dc:	0200      	lsls	r0, r0, #8
    d3de:	17c1      	asrs	r1, r0, #31
    d3e0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d3e4:	1200      	asrs	r0, r0, #8
    d3e6:	2833      	cmp	r0, #51	; 0x33
    d3e8:	db06      	blt.n	d3f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d3ea:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d3ee:	f88a 5000 	strb.w	r5, [sl]
    d3f2:	7845      	ldrb	r5, [r0, #1]
    d3f4:	2d20      	cmp	r5, #32
    d3f6:	d1d7      	bne.n	d3a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    d3f8:	f89a 0000 	ldrb.w	r0, [sl]
    d3fc:	f888 0000 	strb.w	r0, [r8]
    d400:	2d20      	cmp	r5, #32
    d402:	bf18      	it	ne
    d404:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    d408:	d030      	beq.n	d46c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d40a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d40e:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    d412:	6861      	ldr	r1, [r4, #4]
    d414:	f8d9 2008 	ldr.w	r2, [r9, #8]
    d418:	4620      	mov	r0, r4
    d41a:	1a51      	subs	r1, r2, r1
    d41c:	0209      	lsls	r1, r1, #8
    d41e:	17ca      	asrs	r2, r1, #31
    d420:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d424:	f109 0608 	add.w	r6, r9, #8
    d428:	1209      	asrs	r1, r1, #8
    d42a:	d410      	bmi.n	d44e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    d42c:	8971      	ldrh	r1, [r6, #10]
    d42e:	b1e9      	cbz	r1, d46c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d430:	8941      	ldrh	r1, [r0, #10]
    d432:	b9d9      	cbnz	r1, d46c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d434:	f000 fc18 	bl	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d438:	f001 ff40 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d43c:	6831      	ldr	r1, [r6, #0]
    d43e:	1a08      	subs	r0, r1, r0
    d440:	0200      	lsls	r0, r0, #8
    d442:	17c1      	asrs	r1, r0, #31
    d444:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d448:	1200      	asrs	r0, r0, #8
    d44a:	2833      	cmp	r0, #51	; 0x33
    d44c:	da0e      	bge.n	d46c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d44e:	f888 5000 	strb.w	r5, [r8]
    d452:	f899 0014 	ldrb.w	r0, [r9, #20]
    d456:	7b21      	ldrb	r1, [r4, #12]
    d458:	4288      	cmp	r0, r1
    d45a:	d802      	bhi.n	d462 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    d45c:	2000      	movs	r0, #0
    d45e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    d462:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    d466:	7845      	ldrb	r5, [r0, #1]
    d468:	2d20      	cmp	r5, #32
    d46a:	d1ce      	bne.n	d40a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    d46c:	2001      	movs	r0, #1
    d46e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    d472:	0000      	.short	0x0000
    d474:	2000119c 	.word	0x2000119c
    d478:	20000e1c 	.word	0x20000e1c
    d47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d480:	b098      	sub	sp, #96	; 0x60
    d482:	4616      	mov	r6, r2
    d484:	460d      	mov	r5, r1
    d486:	f04f 0800 	mov.w	r8, #0
    d48a:	f04f 0b01 	mov.w	fp, #1
    d48e:	f002 f997 	bl	f7c0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    d492:	4604      	mov	r4, r0
    d494:	2d01      	cmp	r5, #1
    d496:	bf18      	it	ne
    d498:	2d02      	cmpne	r5, #2
    d49a:	d005      	beq.n	d4a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b8>
    d49c:	f640 1194 	movw	r1, #2452	; 0x994
    d4a0:	f04f 0070 	mov.w	r0, #112	; 0x70
    d4a4:	f002 ff84 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d4a8:	49f9      	ldr	r1, [pc, #996]	; (d890 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a0>)
    d4aa:	2001      	movs	r0, #1
    d4ac:	6008      	str	r0, [r1, #0]
    d4ae:	49f9      	ldr	r1, [pc, #996]	; (d894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a4>)
    d4b0:	6889      	ldr	r1, [r1, #8]
    d4b2:	6008      	str	r0, [r1, #0]
    d4b4:	2000      	movs	r0, #0
    d4b6:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    d4ba:	900c      	str	r0, [sp, #48]	; 0x30
    d4bc:	1e40      	subs	r0, r0, #1
    d4be:	900e      	str	r0, [sp, #56]	; 0x38
    d4c0:	49f5      	ldr	r1, [pc, #980]	; (d898 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    d4c2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    d4c6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    d4ca:	3308      	adds	r3, #8
    d4cc:	af0f      	add	r7, sp, #60	; 0x3c
    d4ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d4d0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    d4d4:	a80f      	add	r0, sp, #60	; 0x3c
    d4d6:	f000 fbc7 	bl	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d4da:	900d      	str	r0, [sp, #52]	; 0x34
    d4dc:	48ee      	ldr	r0, [pc, #952]	; (d898 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    d4de:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    d4e2:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    d4e6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    d4ea:	f1b9 0f00 	cmp.w	r9, #0
    d4ee:	bf14      	ite	ne
    d4f0:	f04f 0a01 	movne.w	sl, #1
    d4f4:	f04f 0a00 	moveq.w	sl, #0
    d4f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d4fa:	9014      	str	r0, [sp, #80]	; 0x50
    d4fc:	f1ba 0f00 	cmp.w	sl, #0
    d500:	d009      	beq.n	d516 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    d502:	48e6      	ldr	r0, [pc, #920]	; (d89c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d504:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    d508:	b928      	cbnz	r0, d516 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    d50a:	f002 fed9 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    d50e:	2800      	cmp	r0, #0
    d510:	bf08      	it	eq
    d512:	2701      	moveq	r7, #1
    d514:	d000      	beq.n	d518 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    d516:	2700      	movs	r7, #0
    d518:	48e1      	ldr	r0, [pc, #900]	; (d8a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d51a:	2200      	movs	r2, #0
    d51c:	9215      	str	r2, [sp, #84]	; 0x54
    d51e:	7800      	ldrb	r0, [r0, #0]
    d520:	4616      	mov	r6, r2
    d522:	2801      	cmp	r0, #1
    d524:	bf18      	it	ne
    d526:	2803      	cmpne	r0, #3
    d528:	d140      	bne.n	d5ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    d52a:	48dd      	ldr	r0, [pc, #884]	; (d8a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d52c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    d530:	eba8 0009 	sub.w	r0, r8, r9
    d534:	9015      	str	r0, [sp, #84]	; 0x54
    d536:	45c8      	cmp	r8, r9
    d538:	d938      	bls.n	d5ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    d53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d53c:	ea6f 0108 	mvn.w	r1, r8
    d540:	f8df e360 	ldr.w	lr, [pc, #864]	; d8a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>
    d544:	1858      	adds	r0, r3, r1
    d546:	f10d 0c0c 	add.w	ip, sp, #12
    d54a:	aa17      	add	r2, sp, #92	; 0x5c
    d54c:	4573      	cmp	r3, lr
    d54e:	d904      	bls.n	d55a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56a>
    d550:	f240 6109 	movw	r1, #1545	; 0x609
    d554:	2070      	movs	r0, #112	; 0x70
    d556:	f002 ff2b 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d55a:	4bd3      	ldr	r3, [pc, #844]	; (d8a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    d55c:	4299      	cmp	r1, r3
    d55e:	dd04      	ble.n	d56a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x57a>
    d560:	f240 610a 	movw	r1, #1546	; 0x60a
    d564:	2070      	movs	r0, #112	; 0x70
    d566:	f002 ff23 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d56a:	4bd0      	ldr	r3, [pc, #832]	; (d8ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    d56c:	4299      	cmp	r1, r3
    d56e:	da04      	bge.n	d57a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x58a>
    d570:	f240 610b 	movw	r1, #1547	; 0x60b
    d574:	2070      	movs	r0, #112	; 0x70
    d576:	f002 ff1b 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d57a:	49cd      	ldr	r1, [pc, #820]	; (d8b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    d57c:	4281      	cmp	r1, r0
    d57e:	bfdc      	itt	le
    d580:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    d584:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    d588:	dd05      	ble.n	d596 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a6>
    d58a:	2800      	cmp	r0, #0
    d58c:	bfbc      	itt	lt
    d58e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    d592:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    d596:	4661      	mov	r1, ip
    d598:	f001 feac 	bl	f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    d59c:	9803      	ldr	r0, [sp, #12]
    d59e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d5a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d5a4:	9003      	str	r0, [sp, #12]
    d5a6:	1a08      	subs	r0, r1, r0
    d5a8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    d5ac:	2f00      	cmp	r7, #0
    d5ae:	bf18      	it	ne
    d5b0:	2632      	movne	r6, #50	; 0x32
    d5b2:	d104      	bne.n	d5be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ce>
    d5b4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d5b8:	2800      	cmp	r0, #0
    d5ba:	bf18      	it	ne
    d5bc:	2602      	movne	r6, #2
    d5be:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d5c2:	d008      	beq.n	d5d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    d5c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d5c6:	1b00      	subs	r0, r0, r4
    d5c8:	0200      	lsls	r0, r0, #8
    d5ca:	17c1      	asrs	r1, r0, #31
    d5cc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d5d0:	1200      	asrs	r0, r0, #8
    d5d2:	2801      	cmp	r0, #1
    d5d4:	da02      	bge.n	d5dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ec>
    d5d6:	2004      	movs	r0, #4
    d5d8:	9918      	ldr	r1, [sp, #96]	; 0x60
    d5da:	e00b      	b.n	d5f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x604>
    d5dc:	b147      	cbz	r7, d5f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    d5de:	48af      	ldr	r0, [pc, #700]	; (d89c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d5e0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    d5e4:	b120      	cbz	r0, d5f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    d5e6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d5ea:	1c06      	adds	r6, r0, #0
    d5ec:	bf18      	it	ne
    d5ee:	2602      	movne	r6, #2
    d5f0:	4621      	mov	r1, r4
    d5f2:	2001      	movs	r0, #1
    d5f4:	f1b9 0f00 	cmp.w	r9, #0
    d5f8:	d002      	beq.n	d600 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    d5fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d5fc:	2b1e      	cmp	r3, #30
    d5fe:	da02      	bge.n	d606 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    d600:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    d604:	b113      	cbz	r3, d60c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x61c>
    d606:	f04f 0b00 	mov.w	fp, #0
    d60a:	1e40      	subs	r0, r0, #1
    d60c:	1983      	adds	r3, r0, r6
    d60e:	48a4      	ldr	r0, [pc, #656]	; (d8a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d610:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    d614:	7800      	ldrb	r0, [r0, #0]
    d616:	9015      	str	r0, [sp, #84]	; 0x54
    d618:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d61a:	1a80      	subs	r0, r0, r2
    d61c:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    d620:	ebac 0001 	sub.w	r0, ip, r1
    d624:	0200      	lsls	r0, r0, #8
    d626:	17c6      	asrs	r6, r0, #31
    d628:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    d62c:	1200      	asrs	r0, r0, #8
    d62e:	4298      	cmp	r0, r3
    d630:	db18      	blt.n	d664 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x674>
    d632:	2a00      	cmp	r2, #0
    d634:	bf18      	it	ne
    d636:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    d63a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    d63c:	9705      	str	r7, [sp, #20]
    d63e:	2700      	movs	r7, #0
    d640:	f001 ffb6 	bl	f5b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d644:	1a30      	subs	r0, r6, r0
    d646:	0200      	lsls	r0, r0, #8
    d648:	17c1      	asrs	r1, r0, #31
    d64a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d64e:	1200      	asrs	r0, r0, #8
    d650:	283e      	cmp	r0, #62	; 0x3e
    d652:	da3f      	bge.n	d6d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6e4>
    d654:	2d01      	cmp	r5, #1
    d656:	d020      	beq.n	d69a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6aa>
    d658:	1e70      	subs	r0, r6, #1
    d65a:	9905      	ldr	r1, [sp, #20]
    d65c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d660:	b319      	cbz	r1, d6aa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ba>
    d662:	e02d      	b.n	d6c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    d664:	b182      	cbz	r2, d688 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    d666:	f1be 0f00 	cmp.w	lr, #0
    d66a:	bf04      	itt	eq
    d66c:	9815      	ldreq	r0, [sp, #84]	; 0x54
    d66e:	2803      	cmpeq	r0, #3
    d670:	d00a      	beq.n	d688 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    d672:	b927      	cbnz	r7, d67e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x68e>
    d674:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d678:	2800      	cmp	r0, #0
    d67a:	bf18      	it	ne
    d67c:	1e9b      	subne	r3, r3, #2
    d67e:	2200      	movs	r2, #0
    d680:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    d684:	4690      	mov	r8, r2
    d686:	e7c7      	b.n	d618 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    d688:	bb07      	cbnz	r7, d6cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d68a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d68e:	b1e8      	cbz	r0, d6cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d690:	2000      	movs	r0, #0
    d692:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    d696:	1e9b      	subs	r3, r3, #2
    d698:	e7be      	b.n	d618 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    d69a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d69e:	d120      	bne.n	d6e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d6a0:	f640 110d 	movw	r1, #2317	; 0x90d
    d6a4:	2070      	movs	r0, #112	; 0x70
    d6a6:	f002 fe83 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d6aa:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d6ae:	d007      	beq.n	d6c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    d6b0:	1a21      	subs	r1, r4, r0
    d6b2:	0209      	lsls	r1, r1, #8
    d6b4:	17ca      	asrs	r2, r1, #31
    d6b6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d6ba:	1209      	asrs	r1, r1, #8
    d6bc:	2904      	cmp	r1, #4
    d6be:	dd03      	ble.n	d6c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d8>
    d6c0:	4604      	mov	r4, r0
    d6c2:	f001 ff7b 	bl	f5bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    d6c6:	e00c      	b.n	d6e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d6c8:	2900      	cmp	r1, #0
    d6ca:	dd0a      	ble.n	d6e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d6cc:	b01b      	add	sp, #108	; 0x6c
    d6ce:	2000      	movs	r0, #0
    d6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6d4:	1e70      	subs	r0, r6, #1
    d6d6:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    d6da:	4620      	mov	r0, r4
    d6dc:	f001 ff6e 	bl	f5bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    d6e0:	4657      	mov	r7, sl
    d6e2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d6e6:	d024      	beq.n	d732 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x742>
    d6e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d6ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6ec:	1b00      	subs	r0, r0, r4
    d6ee:	1b1b      	subs	r3, r3, r4
    d6f0:	4a70      	ldr	r2, [pc, #448]	; (d8b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    d6f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d6f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d6fa:	4583      	cmp	fp, r0
    d6fc:	bf98      	it	ls
    d6fe:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    d702:	d2e3      	bcs.n	d6cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d704:	429a      	cmp	r2, r3
    d706:	d3e1      	bcc.n	d6cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d708:	4620      	mov	r0, r4
    d70a:	f00b fde2 	bl	192d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d70e:	4965      	ldr	r1, [pc, #404]	; (d8a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    d710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d712:	1c4b      	adds	r3, r1, #1
    d714:	1a16      	subs	r6, r2, r0
    d716:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    d71a:	bf24      	itt	cs
    d71c:	eba0 0c02 	subcs.w	ip, r0, r2
    d720:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    d724:	d310      	bcc.n	d748 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    d726:	42b1      	cmp	r1, r6
    d728:	d208      	bcs.n	d73c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    d72a:	1a08      	subs	r0, r1, r0
    d72c:	4410      	add	r0, r2
    d72e:	1c46      	adds	r6, r0, #1
    d730:	e00a      	b.n	d748 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    d732:	f640 212d 	movw	r1, #2605	; 0xa2d
    d736:	2070      	movs	r0, #112	; 0x70
    d738:	f002 fe3a 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d73c:	4561      	cmp	r1, ip
    d73e:	d22c      	bcs.n	d79a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7aa>
    d740:	1a89      	subs	r1, r1, r2
    d742:	4408      	add	r0, r1
    d744:	1c40      	adds	r0, r0, #1
    d746:	4246      	negs	r6, r0
    d748:	4854      	ldr	r0, [pc, #336]	; (d89c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d74a:	7f80      	ldrb	r0, [r0, #30]
    d74c:	b350      	cbz	r0, d7a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b4>
    d74e:	4628      	mov	r0, r5
    d750:	4645      	mov	r5, r8
    d752:	f04f 0b00 	mov.w	fp, #0
    d756:	46d8      	mov	r8, fp
    d758:	2801      	cmp	r0, #1
    d75a:	d005      	beq.n	d768 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x778>
    d75c:	2002      	movs	r0, #2
    d75e:	f002 f985 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d762:	2001      	movs	r0, #1
    d764:	f002 f982 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d768:	45a9      	cmp	r9, r5
    d76a:	d227      	bcs.n	d7bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7cc>
    d76c:	eba6 0105 	sub.w	r1, r6, r5
    d770:	f04f 0301 	mov.w	r3, #1
    d774:	f04f 0203 	mov.w	r2, #3
    d778:	f04f 0002 	mov.w	r0, #2
    d77c:	f002 f8a2 	bl	f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d780:	2800      	cmp	r0, #0
    d782:	bf08      	it	eq
    d784:	f04f 0801 	moveq.w	r8, #1
    d788:	f1b9 0f00 	cmp.w	r9, #0
    d78c:	d030      	beq.n	d7f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d78e:	2301      	movs	r3, #1
    d790:	eba6 0109 	sub.w	r1, r6, r9
    d794:	2203      	movs	r2, #3
    d796:	4618      	mov	r0, r3
    d798:	e01e      	b.n	d7d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e8>
    d79a:	f640 310c 	movw	r1, #2828	; 0xb0c
    d79e:	2070      	movs	r0, #112	; 0x70
    d7a0:	f002 fe06 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d7a4:	45c1      	cmp	r9, r8
    d7a6:	bf34      	ite	cc
    d7a8:	4640      	movcc	r0, r8
    d7aa:	4648      	movcs	r0, r9
    d7ac:	4458      	add	r0, fp
    d7ae:	42b0      	cmp	r0, r6
    d7b0:	dbcd      	blt.n	d74e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75e>
    d7b2:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    d7b6:	2070      	movs	r0, #112	; 0x70
    d7b8:	f002 fdfa 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d7bc:	d910      	bls.n	d7e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f0>
    d7be:	2301      	movs	r3, #1
    d7c0:	eba6 0109 	sub.w	r1, r6, r9
    d7c4:	2203      	movs	r2, #3
    d7c6:	4618      	mov	r0, r3
    d7c8:	f002 f87c 	bl	f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d7cc:	b328      	cbz	r0, d81a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d7ce:	b17d      	cbz	r5, d7f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d7d0:	1b71      	subs	r1, r6, r5
    d7d2:	2301      	movs	r3, #1
    d7d4:	2203      	movs	r2, #3
    d7d6:	2002      	movs	r0, #2
    d7d8:	f002 f874 	bl	f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d7dc:	b1e8      	cbz	r0, d81a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d7de:	e007      	b.n	d7f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d7e0:	ea55 0009 	orrs.w	r0, r5, r9
    d7e4:	d004      	beq.n	d7f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d7e6:	f640 1177 	movw	r1, #2423	; 0x977
    d7ea:	2070      	movs	r0, #112	; 0x70
    d7ec:	f002 fde0 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d7f0:	2301      	movs	r3, #1
    d7f2:	2203      	movs	r2, #3
    d7f4:	4631      	mov	r1, r6
    d7f6:	2000      	movs	r0, #0
    d7f8:	f002 f864 	bl	f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d7fc:	b168      	cbz	r0, d81a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d7fe:	2501      	movs	r5, #1
    d800:	f1b8 0f00 	cmp.w	r8, #0
    d804:	d003      	beq.n	d80e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x81e>
    d806:	9814      	ldr	r0, [sp, #80]	; 0x50
    d808:	900f      	str	r0, [sp, #60]	; 0x3c
    d80a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    d80e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d8b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>
    d812:	f1ba 0f00 	cmp.w	sl, #0
    d816:	d10e      	bne.n	d836 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x846>
    d818:	e009      	b.n	d82e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x83e>
    d81a:	2002      	movs	r0, #2
    d81c:	f002 f926 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d820:	2001      	movs	r0, #1
    d822:	f002 f923 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d826:	b01b      	add	sp, #108	; 0x6c
    d828:	2000      	movs	r0, #0
    d82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d82e:	481b      	ldr	r0, [pc, #108]	; (d89c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d830:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    d834:	b100      	cbz	r0, d838 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x848>
    d836:	b34f      	cbz	r7, d88c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    d838:	f8df a060 	ldr.w	sl, [pc, #96]	; d89c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>
    d83c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    d840:	b118      	cbz	r0, d84a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    d842:	f002 fc05 	bl	10050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    d846:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    d84a:	b307      	cbz	r7, d88e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89e>
    d84c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    d850:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    d854:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    d858:	f8c8 0000 	str.w	r0, [r8]
    d85c:	2300      	movs	r3, #0
    d85e:	2203      	movs	r2, #3
    d860:	2005      	movs	r0, #5
    d862:	f002 f82f 	bl	f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d866:	b368      	cbz	r0, d8c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    d868:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    d86c:	2005      	movs	r0, #5
    d86e:	f002 f9e3 	bl	fc38 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    d872:	4912      	ldr	r1, [pc, #72]	; (d8bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    d874:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    d878:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    d87c:	4910      	ldr	r1, [pc, #64]	; (d8c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    d87e:	12e0      	asrs	r0, r4, #11
    d880:	6008      	str	r0, [r1, #0]
    d882:	4c06      	ldr	r4, [pc, #24]	; (d89c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d884:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    d888:	b3e8      	cbz	r0, d906 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x916>
    d88a:	e030      	b.n	d8ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    d88c:	e01b      	b.n	d8c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d6>
    d88e:	e01f      	b.n	d8d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    d890:	40000508 	.word	0x40000508
    d894:	20000014 	.word	0x20000014
    d898:	20000e1c 	.word	0x20000e1c
    d89c:	2000119c 	.word	0x2000119c
    d8a0:	20000016 	.word	0x20000016
    d8a4:	1e847fff 	.word	0x1e847fff
    d8a8:	07a12000 	.word	0x07a12000
    d8ac:	f85ee000 	.word	0xf85ee000
    d8b0:	1e848000 	.word	0x1e848000
    d8b4:	003fffff 	.word	0x003fffff
    d8b8:	4001f508 	.word	0x4001f508
    d8bc:	4001f098 	.word	0x4001f098
    d8c0:	4001f504 	.word	0x4001f504
    d8c4:	e025      	b.n	d912 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x922>
    d8c6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; d980 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x990>
    d8ca:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    d8ce:	b1c8      	cbz	r0, d904 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x914>
    d8d0:	4c2b      	ldr	r4, [pc, #172]	; (d980 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x990>)
    d8d2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    d8d6:	b150      	cbz	r0, d8ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    d8d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    d8dc:	f8c8 0000 	str.w	r0, [r8]
    d8e0:	2005      	movs	r0, #5
    d8e2:	f002 f8c3 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d8e6:	f002 fc1b 	bl	10120 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    d8ea:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    d8ee:	eba6 0009 	sub.w	r0, r6, r9
    d8f2:	f1a0 0119 	sub.w	r1, r0, #25
    d8f6:	2900      	cmp	r1, #0
    d8f8:	dc15      	bgt.n	d926 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x936>
    d8fa:	f640 2171 	movw	r1, #2673	; 0xa71
    d8fe:	2070      	movs	r0, #112	; 0x70
    d900:	f002 fd56 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d904:	e000      	b.n	d908 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x918>
    d906:	e009      	b.n	d91c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x92c>
    d908:	f002 fbbe 	bl	10088 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    d90c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    d910:	e79b      	b.n	d84a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    d912:	f240 313e 	movw	r1, #830	; 0x33e
    d916:	2070      	movs	r0, #112	; 0x70
    d918:	f002 fd4a 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d91c:	f002 fbf2 	bl	10104 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    d920:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    d924:	e7e3      	b.n	d8ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    d926:	2203      	movs	r2, #3
    d928:	2301      	movs	r3, #1
    d92a:	4610      	mov	r0, r2
    d92c:	f001 ffca 	bl	f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d930:	b308      	cbz	r0, d976 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x986>
    d932:	4814      	ldr	r0, [pc, #80]	; (d984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x994>)
    d934:	6880      	ldr	r0, [r0, #8]
    d936:	f8c0 b000 	str.w	fp, [r0]
    d93a:	4813      	ldr	r0, [pc, #76]	; (d988 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x998>)
    d93c:	f8c0 b000 	str.w	fp, [r0]
    d940:	ac0c      	add	r4, sp, #48	; 0x30
    d942:	4812      	ldr	r0, [pc, #72]	; (d98c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x99c>)
    d944:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    d948:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    d94c:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    d950:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    d954:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    d958:	ac10      	add	r4, sp, #64	; 0x40
    d95a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    d95e:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    d962:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    d966:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    d96a:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    d96e:	b01b      	add	sp, #108	; 0x6c
    d970:	2001      	movs	r0, #1
    d972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d976:	f640 2179 	movw	r1, #2681	; 0xa79
    d97a:	2070      	movs	r0, #112	; 0x70
    d97c:	f002 fd18 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d980:	2000119c 	.word	0x2000119c
    d984:	20000014 	.word	0x20000014
    d988:	40000508 	.word	0x40000508
    d98c:	20000e1c 	.word	0x20000e1c
    d990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d994:	4606      	mov	r6, r0
    d996:	b083      	sub	sp, #12
    d998:	7808      	ldrb	r0, [r1, #0]
    d99a:	7390      	strb	r0, [r2, #14]
    d99c:	7acf      	ldrb	r7, [r1, #11]
    d99e:	7357      	strb	r7, [r2, #13]
    d9a0:	7a88      	ldrb	r0, [r1, #10]
    d9a2:	7310      	strb	r0, [r2, #12]
    d9a4:	8908      	ldrh	r0, [r1, #8]
    d9a6:	4614      	mov	r4, r2
    d9a8:	8150      	strh	r0, [r2, #10]
    d9aa:	460d      	mov	r5, r1
    d9ac:	780a      	ldrb	r2, [r1, #0]
    d9ae:	495f      	ldr	r1, [pc, #380]	; (db2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb3c>)
    d9b0:	4699      	mov	r9, r3
    d9b2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    d9b6:	424b      	negs	r3, r1
    d9b8:	f1ac 0801 	sub.w	r8, ip, #1
    d9bc:	b15a      	cbz	r2, d9d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9e6>
    d9be:	43c0      	mvns	r0, r0
    d9c0:	f8d5 8004 	ldr.w	r8, [r5, #4]
    d9c4:	f104 0208 	add.w	r2, r4, #8
    d9c8:	4288      	cmp	r0, r1
    d9ca:	dd3d      	ble.n	da48 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa58>
    d9cc:	f240 610a 	movw	r1, #1546	; 0x60a
    d9d0:	2070      	movs	r0, #112	; 0x70
    d9d2:	f002 fced 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d9d6:	68ee      	ldr	r6, [r5, #12]
    d9d8:	686d      	ldr	r5, [r5, #4]
    d9da:	ea6f 0900 	mvn.w	r9, r0
    d9de:	f104 0208 	add.w	r2, r4, #8
    d9e2:	eb06 0009 	add.w	r0, r6, r9
    d9e6:	4546      	cmp	r6, r8
    d9e8:	d904      	bls.n	d9f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa04>
    d9ea:	f240 6109 	movw	r1, #1545	; 0x609
    d9ee:	2070      	movs	r0, #112	; 0x70
    d9f0:	f002 fcde 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d9f4:	4589      	cmp	r9, r1
    d9f6:	dce9      	bgt.n	d9cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9dc>
    d9f8:	4599      	cmp	r9, r3
    d9fa:	db28      	blt.n	da4e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa5e>
    d9fc:	4584      	cmp	ip, r0
    d9fe:	bfdc      	itt	le
    da00:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    da04:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    da08:	dd05      	ble.n	da16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa26>
    da0a:	2800      	cmp	r0, #0
    da0c:	bfbc      	itt	lt
    da0e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    da12:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    da16:	4621      	mov	r1, r4
    da18:	f001 fc6c 	bl	f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    da1c:	6820      	ldr	r0, [r4, #0]
    da1e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    da22:	1970      	adds	r0, r6, r5
    da24:	1c40      	adds	r0, r0, #1
    da26:	6021      	str	r1, [r4, #0]
    da28:	2f00      	cmp	r7, #0
    da2a:	bf08      	it	eq
    da2c:	307a      	addeq	r0, #122	; 0x7a
    da2e:	d003      	beq.n	da38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa48>
    da30:	2f01      	cmp	r7, #1
    da32:	bf08      	it	eq
    da34:	3048      	addeq	r0, #72	; 0x48
    da36:	d12d      	bne.n	da94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaa4>
    da38:	f001 fc40 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    da3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    da40:	6060      	str	r0, [r4, #4]
    da42:	b003      	add	sp, #12
    da44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da48:	4601      	mov	r1, r0
    da4a:	4298      	cmp	r0, r3
    da4c:	da04      	bge.n	da58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa68>
    da4e:	f240 610b 	movw	r1, #1547	; 0x60b
    da52:	2070      	movs	r0, #112	; 0x70
    da54:	f002 fcac 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    da58:	4584      	cmp	ip, r0
    da5a:	bfdc      	itt	le
    da5c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    da60:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    da64:	dd05      	ble.n	da72 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa82>
    da66:	2800      	cmp	r0, #0
    da68:	bfbc      	itt	lt
    da6a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    da6e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    da72:	4621      	mov	r1, r4
    da74:	f001 fc3e 	bl	f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    da78:	6820      	ldr	r0, [r4, #0]
    da7a:	2f00      	cmp	r7, #0
    da7c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    da80:	f108 0001 	add.w	r0, r8, #1
    da84:	6021      	str	r1, [r4, #0]
    da86:	bf08      	it	eq
    da88:	307a      	addeq	r0, #122	; 0x7a
    da8a:	d008      	beq.n	da9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaae>
    da8c:	2f01      	cmp	r7, #1
    da8e:	bf08      	it	eq
    da90:	3048      	addeq	r0, #72	; 0x48
    da92:	d004      	beq.n	da9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaae>
    da94:	f240 61b1 	movw	r1, #1713	; 0x6b1
    da98:	2070      	movs	r0, #112	; 0x70
    da9a:	f002 fc89 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    da9e:	f001 fc0d 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    daa2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    daa6:	6061      	str	r1, [r4, #4]
    daa8:	8960      	ldrh	r0, [r4, #10]
    daaa:	aa01      	add	r2, sp, #4
    daac:	4669      	mov	r1, sp
    daae:	f001 fc21 	bl	f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    dab2:	481f      	ldr	r0, [pc, #124]	; (db30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb40>)
    dab4:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    dab8:	2920      	cmp	r1, #32
    daba:	d023      	beq.n	db04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb14>
    dabc:	6900      	ldr	r0, [r0, #16]
    dabe:	1d40      	adds	r0, r0, #5
    dac0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dac4:	e9d4 2100 	ldrd	r2, r1, [r4]
    dac8:	1a89      	subs	r1, r1, r2
    daca:	6020      	str	r0, [r4, #0]
    dacc:	4408      	add	r0, r1
    dace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dad2:	6060      	str	r0, [r4, #4]
    dad4:	464b      	mov	r3, r9
    dad6:	4632      	mov	r2, r6
    dad8:	4621      	mov	r1, r4
    dada:	68e8      	ldr	r0, [r5, #12]
    dadc:	f7ff fad2 	bl	d084 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    dae0:	2800      	cmp	r0, #0
    dae2:	bf1c      	itt	ne
    dae4:	b003      	addne	sp, #12
    dae6:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    daea:	e9d4 1000 	ldrd	r1, r0, [r4]
    daee:	1a40      	subs	r0, r0, r1
    daf0:	4430      	add	r0, r6
    daf2:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    daf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dafa:	e9c4 1000 	strd	r1, r0, [r4]
    dafe:	b003      	add	sp, #12
    db00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    db04:	8960      	ldrh	r0, [r4, #10]
    db06:	f106 0709 	add.w	r7, r6, #9
    db0a:	b120      	cbz	r0, db16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb26>
    db0c:	f002 fbd8 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    db10:	2800      	cmp	r0, #0
    db12:	bf08      	it	eq
    db14:	3732      	addeq	r7, #50	; 0x32
    db16:	4807      	ldr	r0, [pc, #28]	; (db34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb44>)
    db18:	7841      	ldrb	r1, [r0, #1]
    db1a:	9800      	ldr	r0, [sp, #0]
    db1c:	4281      	cmp	r1, r0
    db1e:	bf84      	itt	hi
    db20:	1a08      	subhi	r0, r1, r0
    db22:	4407      	addhi	r7, r0
    db24:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    db28:	e7cc      	b.n	dac4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xad4>
    db2a:	0000      	.short	0x0000
    db2c:	07a12000 	.word	0x07a12000
    db30:	2000119c 	.word	0x2000119c
    db34:	20000016 	.word	0x20000016
    db38:	b510      	push	{r4, lr}
    db3a:	4c15      	ldr	r4, [pc, #84]	; (db90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xba0>)
    db3c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    db40:	2820      	cmp	r0, #32
    db42:	bf18      	it	ne
    db44:	bd10      	popne	{r4, pc}
    db46:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    db4a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    db4e:	f890 1020 	ldrb.w	r1, [r0, #32]
    db52:	2920      	cmp	r1, #32
    db54:	d017      	beq.n	db86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb96>
    db56:	f8df c03c 	ldr.w	ip, [pc, #60]	; db94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xba4>
    db5a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    db5e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    db62:	785b      	ldrb	r3, [r3, #1]
    db64:	f880 3020 	strb.w	r3, [r0, #32]
    db68:	2301      	movs	r3, #1
    db6a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    db6e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    db72:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    db76:	2002      	movs	r0, #2
    db78:	f000 f8b0 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    db7c:	2000      	movs	r0, #0
    db7e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    db82:	77a0      	strb	r0, [r4, #30]
    db84:	bd10      	pop	{r4, pc}
    db86:	f240 318b 	movw	r1, #907	; 0x38b
    db8a:	2070      	movs	r0, #112	; 0x70
    db8c:	f002 fc10 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    db90:	2000119c 	.word	0x2000119c
    db94:	2000111c 	.word	0x2000111c
    db98:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db9c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dc58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc68>
    dba0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    dba4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    dba8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    dbac:	2c20      	cmp	r4, #32
    dbae:	bf08      	it	eq
    dbb0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    dbb4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; dc5c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc6c>
    dbb8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; dc60 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc70>
    dbbc:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    dbc0:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    dbc4:	2607      	movs	r6, #7
    dbc6:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    dbca:	2801      	cmp	r0, #1
    dbcc:	d00e      	beq.n	dbec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    dbce:	2804      	cmp	r0, #4
    dbd0:	bf08      	it	eq
    dbd2:	2602      	moveq	r6, #2
    dbd4:	d00a      	beq.n	dbec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    dbd6:	2805      	cmp	r0, #5
    dbd8:	bf0c      	ite	eq
    dbda:	2603      	moveq	r6, #3
    dbdc:	2806      	cmpne	r0, #6
    dbde:	d005      	beq.n	dbec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    dbe0:	f640 01d9 	movw	r1, #2265	; 0x8d9
    dbe4:	f04f 0070 	mov.w	r0, #112	; 0x70
    dbe8:	f002 fbe2 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dbec:	f1bb 0f00 	cmp.w	fp, #0
    dbf0:	bf18      	it	ne
    dbf2:	f3af 8000 	nopne.w
    dbf6:	f3ef 8010 	mrs	r0, PRIMASK
    dbfa:	b672      	cpsid	i
    dbfc:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    dc00:	784a      	ldrb	r2, [r1, #1]
    dc02:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    dc06:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    dc0a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    dc0e:	42a2      	cmp	r2, r4
    dc10:	bf04      	itt	eq
    dc12:	2220      	moveq	r2, #32
    dc14:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    dc18:	b1b8      	cbz	r0, dc4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc5a>
    dc1a:	462a      	mov	r2, r5
    dc1c:	4621      	mov	r1, r4
    dc1e:	2001      	movs	r0, #1
    dc20:	f000 f85c 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    dc24:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dc28:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    dc2c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    dc30:	6840      	ldr	r0, [r0, #4]
    dc32:	4631      	mov	r1, r6
    dc34:	4790      	blx	r2
    dc36:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    dc3a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    dc3e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    dc42:	2c20      	cmp	r4, #32
    dc44:	d1bc      	bne.n	dbc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbd0>
    dc46:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    dc4a:	4806      	ldr	r0, [pc, #24]	; (dc64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc74>)
    dc4c:	2800      	cmp	r0, #0
    dc4e:	bf18      	it	ne
    dc50:	f3af 8000 	nopne.w
    dc54:	b662      	cpsie	i
    dc56:	e7e0      	b.n	dc1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc2a>
    dc58:	2000119c 	.word	0x2000119c
    dc5c:	00000000 	.word	0x00000000
    dc60:	2000111c 	.word	0x2000111c
    dc64:	00000000 	.word	0x00000000
    dc68:	b510      	push	{r4, lr}
    dc6a:	4604      	mov	r4, r0
    dc6c:	6800      	ldr	r0, [r0, #0]
    dc6e:	f00b fb30 	bl	192d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    dc72:	4602      	mov	r2, r0
    dc74:	8960      	ldrh	r0, [r4, #10]
    dc76:	7a21      	ldrb	r1, [r4, #8]
    dc78:	4b14      	ldr	r3, [pc, #80]	; (dccc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcdc>)
    dc7a:	4408      	add	r0, r1
    dc7c:	1c41      	adds	r1, r0, #1
    dc7e:	1850      	adds	r0, r2, r1
    dc80:	429a      	cmp	r2, r3
    dc82:	d904      	bls.n	dc8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc9e>
    dc84:	f240 6109 	movw	r1, #1545	; 0x609
    dc88:	2070      	movs	r0, #112	; 0x70
    dc8a:	f002 fb91 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dc8e:	4a10      	ldr	r2, [pc, #64]	; (dcd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce0>)
    dc90:	4291      	cmp	r1, r2
    dc92:	dd04      	ble.n	dc9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcae>
    dc94:	f240 610a 	movw	r1, #1546	; 0x60a
    dc98:	2070      	movs	r0, #112	; 0x70
    dc9a:	f002 fb89 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dc9e:	4a0d      	ldr	r2, [pc, #52]	; (dcd4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce4>)
    dca0:	4291      	cmp	r1, r2
    dca2:	da04      	bge.n	dcae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcbe>
    dca4:	f240 610b 	movw	r1, #1547	; 0x60b
    dca8:	2070      	movs	r0, #112	; 0x70
    dcaa:	f002 fb81 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dcae:	490a      	ldr	r1, [pc, #40]	; (dcd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce8>)
    dcb0:	4281      	cmp	r1, r0
    dcb2:	bfde      	ittt	le
    dcb4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    dcb8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    dcbc:	bd10      	pople	{r4, pc}
    dcbe:	2800      	cmp	r0, #0
    dcc0:	bfbc      	itt	lt
    dcc2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    dcc6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    dcca:	bd10      	pop	{r4, pc}
    dccc:	1e847fff 	.word	0x1e847fff
    dcd0:	07a12000 	.word	0x07a12000
    dcd4:	f85ee000 	.word	0xf85ee000
    dcd8:	1e848000 	.word	0x1e848000
    dcdc:	f8df c054 	ldr.w	ip, [pc, #84]	; dd34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd44>
    dce0:	b510      	push	{r4, lr}
    dce2:	2300      	movs	r3, #0
    dce4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    dce8:	2807      	cmp	r0, #7
    dcea:	d21e      	bcs.n	dd2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd3a>
    dcec:	e8df f000 	tbb	[pc, r0]
    dcf0:	05050505 	.word	0x05050505
    dcf4:	00040404 	.word	0x00040404
    dcf8:	2301      	movs	r3, #1
    dcfa:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    dcfe:	2b00      	cmp	r3, #0
    dd00:	bf08      	it	eq
    dd02:	bd10      	popeq	{r4, pc}
    dd04:	480c      	ldr	r0, [pc, #48]	; (dd38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd48>)
    dd06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    dd0a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    dd0e:	2820      	cmp	r0, #32
    dd10:	bf0e      	itee	eq
    dd12:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    dd16:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    dd1a:	7041      	strbne	r1, [r0, #1]
    dd1c:	2020      	movs	r0, #32
    dd1e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    dd22:	7058      	strb	r0, [r3, #1]
    dd24:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    dd28:	bd10      	pop	{r4, pc}
    dd2a:	f44f 7115 	mov.w	r1, #596	; 0x254
    dd2e:	2070      	movs	r0, #112	; 0x70
    dd30:	f002 fb3e 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dd34:	2000111c 	.word	0x2000111c
    dd38:	2000119c 	.word	0x2000119c
    dd3c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd40:	b083      	sub	sp, #12
    dd42:	485c      	ldr	r0, [pc, #368]	; (deb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    dd44:	9904      	ldr	r1, [sp, #16]
    dd46:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    dd4a:	9001      	str	r0, [sp, #4]
    dd4c:	f890 4020 	ldrb.w	r4, [r0, #32]
    dd50:	9803      	ldr	r0, [sp, #12]
    dd52:	4625      	mov	r5, r4
    dd54:	2801      	cmp	r0, #1
    dd56:	bf18      	it	ne
    dd58:	2802      	cmpne	r0, #2
    dd5a:	d005      	beq.n	dd68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd78>
    dd5c:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    dd60:	f04f 0070 	mov.w	r0, #112	; 0x70
    dd64:	f002 fb24 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dd68:	2700      	movs	r7, #0
    dd6a:	2d20      	cmp	r5, #32
    dd6c:	d04a      	beq.n	de04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe14>
    dd6e:	4851      	ldr	r0, [pc, #324]	; (deb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    dd70:	9100      	str	r1, [sp, #0]
    dd72:	2600      	movs	r6, #0
    dd74:	7f80      	ldrb	r0, [r0, #30]
    dd76:	2800      	cmp	r0, #0
    dd78:	bf08      	it	eq
    dd7a:	2602      	moveq	r6, #2
    dd7c:	f001 fc18 	bl	f5b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    dd80:	f8df a138 	ldr.w	sl, [pc, #312]	; debc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xecc>
    dd84:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dd88:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    dd8c:	f8df 9128 	ldr.w	r9, [pc, #296]	; deb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec8>
    dd90:	688a      	ldr	r2, [r1, #8]
    dd92:	68c9      	ldr	r1, [r1, #12]
    dd94:	1a12      	subs	r2, r2, r0
    dd96:	1a09      	subs	r1, r1, r0
    dd98:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    dd9c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    dda0:	4296      	cmp	r6, r2
    dda2:	bf98      	it	ls
    dda4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    dda8:	d201      	bcs.n	ddae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdbe>
    ddaa:	4589      	cmp	r9, r1
    ddac:	d228      	bcs.n	de00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe10>
    ddae:	4a44      	ldr	r2, [pc, #272]	; (dec0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed0>)
    ddb0:	9900      	ldr	r1, [sp, #0]
    ddb2:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    ddb6:	4622      	mov	r2, r4
    ddb8:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    ddbc:	784c      	ldrb	r4, [r1, #1]
    ddbe:	2c20      	cmp	r4, #32
    ddc0:	d016      	beq.n	ddf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe00>
    ddc2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    ddc6:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    ddca:	f8dc 8008 	ldr.w	r8, [ip, #8]
    ddce:	f8dc c00c 	ldr.w	ip, [ip, #12]
    ddd2:	eba8 0800 	sub.w	r8, r8, r0
    ddd6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    ddda:	ebac 0100 	sub.w	r1, ip, r0
    ddde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    dde2:	4546      	cmp	r6, r8
    dde4:	bf98      	it	ls
    dde6:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    ddea:	d2e4      	bcs.n	ddb6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc6>
    ddec:	4589      	cmp	r9, r1
    ddee:	d3e2      	bcc.n	ddb6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc6>
    ddf0:	2a20      	cmp	r2, #32
    ddf2:	d005      	beq.n	de00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe10>
    ddf4:	2120      	movs	r1, #32
    ddf6:	2004      	movs	r0, #4
    ddf8:	9b00      	ldr	r3, [sp, #0]
    ddfa:	f7ff f907 	bl	d00c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    ddfe:	4604      	mov	r4, r0
    de00:	42ac      	cmp	r4, r5
    de02:	d115      	bne.n	de30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe40>
    de04:	482f      	ldr	r0, [pc, #188]	; (dec4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed4>)
    de06:	2800      	cmp	r0, #0
    de08:	bf18      	it	ne
    de0a:	f3af 8000 	nopne.w
    de0e:	f001 fbcf 	bl	f5b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    de12:	4c28      	ldr	r4, [pc, #160]	; (deb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    de14:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    de18:	2920      	cmp	r1, #32
    de1a:	d00d      	beq.n	de38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe48>
    de1c:	68e1      	ldr	r1, [r4, #12]
    de1e:	1c82      	adds	r2, r0, #2
    de20:	1a51      	subs	r1, r2, r1
    de22:	0209      	lsls	r1, r1, #8
    de24:	17ca      	asrs	r2, r1, #31
    de26:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    de2a:	1209      	asrs	r1, r1, #8
    de2c:	2900      	cmp	r1, #0
    de2e:	dd03      	ble.n	de38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe48>
    de30:	b005      	add	sp, #20
    de32:	2000      	movs	r0, #0
    de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de38:	2d20      	cmp	r5, #32
    de3a:	d00d      	beq.n	de58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe68>
    de3c:	462a      	mov	r2, r5
    de3e:	9903      	ldr	r1, [sp, #12]
    de40:	f7ff fb1c 	bl	d47c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    de44:	b358      	cbz	r0, de9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xeae>
    de46:	9801      	ldr	r0, [sp, #4]
    de48:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    de4c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    de50:	b005      	add	sp, #20
    de52:	2001      	movs	r0, #1
    de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de58:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    de5c:	b118      	cbz	r0, de66 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe76>
    de5e:	f002 f8f7 	bl	10050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    de62:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    de66:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    de6a:	b150      	cbz	r0, de82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe92>
    de6c:	4916      	ldr	r1, [pc, #88]	; (dec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed8>)
    de6e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    de72:	6008      	str	r0, [r1, #0]
    de74:	2005      	movs	r0, #5
    de76:	f001 fdf9 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    de7a:	f002 f951 	bl	10120 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    de7e:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    de82:	2004      	movs	r0, #4
    de84:	f001 fdf2 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    de88:	f001 fe5e 	bl	fb48 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    de8c:	2020      	movs	r0, #32
    de8e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    de92:	480e      	ldr	r0, [pc, #56]	; (decc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xedc>)
    de94:	6880      	ldr	r0, [r0, #8]
    de96:	6007      	str	r7, [r0, #0]
    de98:	480d      	ldr	r0, [pc, #52]	; (ded0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xee0>)
    de9a:	6007      	str	r7, [r0, #0]
    de9c:	e7d8      	b.n	de50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe60>
    de9e:	462a      	mov	r2, r5
    dea0:	2120      	movs	r1, #32
    dea2:	2004      	movs	r0, #4
    dea4:	9b04      	ldr	r3, [sp, #16]
    dea6:	f7ff f8b1 	bl	d00c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    deaa:	b005      	add	sp, #20
    deac:	2000      	movs	r0, #0
    deae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    deb2:	0000      	.short	0x0000
    deb4:	2000119c 	.word	0x2000119c
    deb8:	003fffff 	.word	0x003fffff
    debc:	20000e1c 	.word	0x20000e1c
    dec0:	2000111c 	.word	0x2000111c
    dec4:	00000000 	.word	0x00000000
    dec8:	4001f508 	.word	0x4001f508
    decc:	20000014 	.word	0x20000014
    ded0:	40000508 	.word	0x40000508

0000ded4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    ded4:	4906      	ldr	r1, [pc, #24]	; (def0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    ded6:	b510      	push	{r4, lr}
    ded8:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    dedc:	2a20      	cmp	r2, #32
    dede:	bf1c      	itt	ne
    dee0:	7788      	strbne	r0, [r1, #30]
    dee2:	bd10      	popne	{r4, pc}
    dee4:	f240 31ea 	movw	r1, #1002	; 0x3ea
    dee8:	2070      	movs	r0, #112	; 0x70
    deea:	f002 fa61 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    deee:	0000      	.short	0x0000
    def0:	2000119c 	.word	0x2000119c

0000def4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    def4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    def8:	4e5b      	ldr	r6, [pc, #364]	; (e068 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    defa:	4681      	mov	r9, r0
    defc:	b085      	sub	sp, #20
    defe:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    df02:	468a      	mov	sl, r1
    df04:	2820      	cmp	r0, #32
    df06:	d04d      	beq.n	dfa4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    df08:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    df0c:	f106 040c 	add.w	r4, r6, #12
    df10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    df14:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    df18:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    df1c:	2020      	movs	r0, #32
    df1e:	f88d 0000 	strb.w	r0, [sp]
    df22:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    df26:	aa03      	add	r2, sp, #12
    df28:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    df2c:	a901      	add	r1, sp, #4
    df2e:	f890 5020 	ldrb.w	r5, [r0, #32]
    df32:	6930      	ldr	r0, [r6, #16]
    df34:	9002      	str	r0, [sp, #8]
    df36:	6830      	ldr	r0, [r6, #0]
    df38:	4448      	add	r0, r9
    df3a:	f001 f9db 	bl	f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    df3e:	68f8      	ldr	r0, [r7, #12]
    df40:	9901      	ldr	r1, [sp, #4]
    df42:	4a4a      	ldr	r2, [pc, #296]	; (e06c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    df44:	4408      	add	r0, r1
    df46:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    df4a:	4291      	cmp	r1, r2
    df4c:	d82f      	bhi.n	dfae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    df4e:	68b9      	ldr	r1, [r7, #8]
    df50:	1a41      	subs	r1, r0, r1
    df52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    df56:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    df5a:	d228      	bcs.n	dfae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    df5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    df60:	6060      	str	r0, [r4, #4]
    df62:	4630      	mov	r0, r6
    df64:	f884 a00c 	strb.w	sl, [r4, #12]
    df68:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    df6c:	46ea      	mov	sl, sp
    df6e:	2d20      	cmp	r5, #32
    df70:	bf1c      	itt	ne
    df72:	493f      	ldrne	r1, [pc, #252]	; (e070 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    df74:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    df78:	d03c      	beq.n	dff4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    df7a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    df7e:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    df82:	6860      	ldr	r0, [r4, #4]
    df84:	68ba      	ldr	r2, [r7, #8]
    df86:	4621      	mov	r1, r4
    df88:	1a10      	subs	r0, r2, r0
    df8a:	0200      	lsls	r0, r0, #8
    df8c:	17c2      	asrs	r2, r0, #31
    df8e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    df92:	f107 0608 	add.w	r6, r7, #8
    df96:	1200      	asrs	r0, r0, #8
    df98:	d41b      	bmi.n	dfd2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    df9a:	8970      	ldrh	r0, [r6, #10]
    df9c:	b350      	cbz	r0, dff4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    df9e:	8948      	ldrh	r0, [r1, #10]
    dfa0:	b148      	cbz	r0, dfb6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    dfa2:	e027      	b.n	dff4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    dfa4:	f640 317b 	movw	r1, #2939	; 0xb7b
    dfa8:	2070      	movs	r0, #112	; 0x70
    dfaa:	f002 fa01 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dfae:	b005      	add	sp, #20
    dfb0:	2001      	movs	r0, #1
    dfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfb6:	4620      	mov	r0, r4
    dfb8:	f7ff fe56 	bl	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    dfbc:	f001 f97e 	bl	f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    dfc0:	6831      	ldr	r1, [r6, #0]
    dfc2:	1a08      	subs	r0, r1, r0
    dfc4:	0200      	lsls	r0, r0, #8
    dfc6:	17c1      	asrs	r1, r0, #31
    dfc8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    dfcc:	1200      	asrs	r0, r0, #8
    dfce:	2833      	cmp	r0, #51	; 0x33
    dfd0:	da10      	bge.n	dff4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    dfd2:	f88a 5000 	strb.w	r5, [sl]
    dfd6:	7d39      	ldrb	r1, [r7, #20]
    dfd8:	7b20      	ldrb	r0, [r4, #12]
    dfda:	4281      	cmp	r1, r0
    dfdc:	d805      	bhi.n	dfea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    dfde:	9802      	ldr	r0, [sp, #8]
    dfe0:	6060      	str	r0, [r4, #4]
    dfe2:	b005      	add	sp, #20
    dfe4:	2002      	movs	r0, #2
    dfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfea:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    dfee:	7845      	ldrb	r5, [r0, #1]
    dff0:	2d20      	cmp	r5, #32
    dff2:	d1c2      	bne.n	df7a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    dff4:	2005      	movs	r0, #5
    dff6:	f001 fd39 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    dffa:	4c1b      	ldr	r4, [pc, #108]	; (e068 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    dffc:	f04f 30ff 	mov.w	r0, #4294967295
    e000:	60a0      	str	r0, [r4, #8]
    e002:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e006:	f89d 2000 	ldrb.w	r2, [sp]
    e00a:	2120      	movs	r1, #32
    e00c:	2a20      	cmp	r2, #32
    e00e:	bf13      	iteet	ne
    e010:	2005      	movne	r0, #5
    e012:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    e016:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    e01a:	f7fe fff7 	blne	d00c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    e01e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    e022:	4913      	ldr	r1, [pc, #76]	; (e070 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    e024:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    e028:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    e02c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    e030:	7048      	strb	r0, [r1, #1]
    e032:	6820      	ldr	r0, [r4, #0]
    e034:	4448      	add	r0, r9
    e036:	6020      	str	r0, [r4, #0]
    e038:	2001      	movs	r0, #1
    e03a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    e03e:	7e60      	ldrb	r0, [r4, #25]
    e040:	2801      	cmp	r0, #1
    e042:	d105      	bne.n	e050 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    e044:	6920      	ldr	r0, [r4, #16]
    e046:	1e40      	subs	r0, r0, #1
    e048:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e04c:	f001 fb54 	bl	f6f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    e050:	f89d 0000 	ldrb.w	r0, [sp]
    e054:	2820      	cmp	r0, #32
    e056:	d003      	beq.n	e060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    e058:	4806      	ldr	r0, [pc, #24]	; (e074 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    e05a:	7840      	ldrb	r0, [r0, #1]
    e05c:	f002 fa78 	bl	10550 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e060:	b005      	add	sp, #20
    e062:	2000      	movs	r0, #0
    e064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e068:	2000119c 	.word	0x2000119c
    e06c:	07a11f9b 	.word	0x07a11f9b
    e070:	2000111c 	.word	0x2000111c
    e074:	20000014 	.word	0x20000014

0000e078 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    e078:	b570      	push	{r4, r5, r6, lr}
    e07a:	4a23      	ldr	r2, [pc, #140]	; (e108 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    e07c:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    e080:	2920      	cmp	r1, #32
    e082:	d039      	beq.n	e0f8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    e084:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    e088:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    e08c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e090:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    e094:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    e098:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    e09c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    e0a0:	f891 1020 	ldrb.w	r1, [r1, #32]
    e0a4:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    e0a8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    e0ac:	2920      	cmp	r1, #32
    e0ae:	d028      	beq.n	e102 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    e0b0:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    e0b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    e0b8:	7d2d      	ldrb	r5, [r5, #20]
    e0ba:	4285      	cmp	r5, r0
    e0bc:	bf84      	itt	hi
    e0be:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    e0c2:	7849      	ldrbhi	r1, [r1, #1]
    e0c4:	d8f2      	bhi.n	e0ac <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    e0c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e0ca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    e0ce:	f8dc 000c 	ldr.w	r0, [ip, #12]
    e0d2:	6889      	ldr	r1, [r1, #8]
    e0d4:	6814      	ldr	r4, [r2, #0]
    e0d6:	1a08      	subs	r0, r1, r0
    e0d8:	0200      	lsls	r0, r0, #8
    e0da:	17c1      	asrs	r1, r0, #31
    e0dc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    e0e0:	1200      	asrs	r0, r0, #8
    e0e2:	d407      	bmi.n	e0f4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    e0e4:	f00b f8f5 	bl	192d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e0e8:	f104 0165 	add.w	r1, r4, #101	; 0x65
    e0ec:	4288      	cmp	r0, r1
    e0ee:	bf24      	itt	cs
    e0f0:	1b00      	subcs	r0, r0, r4
    e0f2:	bd70      	popcs	{r4, r5, r6, pc}
    e0f4:	2000      	movs	r0, #0
    e0f6:	bd70      	pop	{r4, r5, r6, pc}
    e0f8:	f640 314d 	movw	r1, #2893	; 0xb4d
    e0fc:	2070      	movs	r0, #112	; 0x70
    e0fe:	f002 f957 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e102:	f04f 30ff 	mov.w	r0, #4294967295
    e106:	bd70      	pop	{r4, r5, r6, pc}
    e108:	2000119c 	.word	0x2000119c

0000e10c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    e10c:	4806      	ldr	r0, [pc, #24]	; (e128 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    e10e:	b510      	push	{r4, lr}
    e110:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    e114:	2920      	cmp	r1, #32
    e116:	bf1c      	itt	ne
    e118:	7e00      	ldrbne	r0, [r0, #24]
    e11a:	bd10      	popne	{r4, pc}
    e11c:	f640 3174 	movw	r1, #2932	; 0xb74
    e120:	2070      	movs	r0, #112	; 0x70
    e122:	f002 f945 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e126:	0000      	.short	0x0000
    e128:	2000119c 	.word	0x2000119c

0000e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    e12c:	4602      	mov	r2, r0
    e12e:	4b14      	ldr	r3, [pc, #80]	; (e180 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    e130:	b510      	push	{r4, lr}
    e132:	4408      	add	r0, r1
    e134:	429a      	cmp	r2, r3
    e136:	d904      	bls.n	e142 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    e138:	f240 6109 	movw	r1, #1545	; 0x609
    e13c:	2070      	movs	r0, #112	; 0x70
    e13e:	f002 f937 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e142:	4a10      	ldr	r2, [pc, #64]	; (e184 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    e144:	4291      	cmp	r1, r2
    e146:	dd04      	ble.n	e152 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    e148:	f240 610a 	movw	r1, #1546	; 0x60a
    e14c:	2070      	movs	r0, #112	; 0x70
    e14e:	f002 f92f 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e152:	4a0d      	ldr	r2, [pc, #52]	; (e188 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    e154:	4291      	cmp	r1, r2
    e156:	da04      	bge.n	e162 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    e158:	f240 610b 	movw	r1, #1547	; 0x60b
    e15c:	2070      	movs	r0, #112	; 0x70
    e15e:	f002 f927 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e162:	490a      	ldr	r1, [pc, #40]	; (e18c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    e164:	4281      	cmp	r1, r0
    e166:	bfde      	ittt	le
    e168:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    e16c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    e170:	bd10      	pople	{r4, pc}
    e172:	2800      	cmp	r0, #0
    e174:	bfbc      	itt	lt
    e176:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    e17a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    e17e:	bd10      	pop	{r4, pc}
    e180:	1e847fff 	.word	0x1e847fff
    e184:	07a12000 	.word	0x07a12000
    e188:	f85ee000 	.word	0xf85ee000
    e18c:	1e848000 	.word	0x1e848000

0000e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    e190:	4a10      	ldr	r2, [pc, #64]	; (e1d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    e192:	1a0b      	subs	r3, r1, r0
    e194:	f102 0c01 	add.w	ip, r2, #1
    e198:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    e19c:	bf3c      	itt	cc
    e19e:	4618      	movcc	r0, r3
    e1a0:	4770      	bxcc	lr
    e1a2:	b510      	push	{r4, lr}
    e1a4:	1a44      	subs	r4, r0, r1
    e1a6:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    e1aa:	bf3c      	itt	cc
    e1ac:	4618      	movcc	r0, r3
    e1ae:	bd10      	popcc	{r4, pc}
    e1b0:	429a      	cmp	r2, r3
    e1b2:	d203      	bcs.n	e1bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    e1b4:	1a10      	subs	r0, r2, r0
    e1b6:	4408      	add	r0, r1
    e1b8:	1c40      	adds	r0, r0, #1
    e1ba:	bd10      	pop	{r4, pc}
    e1bc:	42a2      	cmp	r2, r4
    e1be:	d204      	bcs.n	e1ca <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    e1c0:	1a51      	subs	r1, r2, r1
    e1c2:	4408      	add	r0, r1
    e1c4:	1c40      	adds	r0, r0, #1
    e1c6:	4240      	negs	r0, r0
    e1c8:	bd10      	pop	{r4, pc}
    e1ca:	f640 310c 	movw	r1, #2828	; 0xb0c
    e1ce:	2070      	movs	r0, #112	; 0x70
    e1d0:	f002 f8ee 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e1d4:	1e847fff 	.word	0x1e847fff

0000e1d8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    e1d8:	4907      	ldr	r1, [pc, #28]	; (e1f8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    e1da:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    e1de:	4282      	cmp	r2, r0
    e1e0:	bf04      	itt	eq
    e1e2:	6848      	ldreq	r0, [r1, #4]
    e1e4:	4770      	bxeq	lr
    e1e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e1ea:	4904      	ldr	r1, [pc, #16]	; (e1fc <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    e1ec:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    e1f0:	3008      	adds	r0, #8
    e1f2:	f7ff bd39 	b.w	dc68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    e1f6:	0000      	.short	0x0000
    e1f8:	2000119c 	.word	0x2000119c
    e1fc:	20000e1c 	.word	0x20000e1c

0000e200 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    e200:	490e      	ldr	r1, [pc, #56]	; (e23c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    e202:	b510      	push	{r4, lr}
    e204:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    e208:	2820      	cmp	r0, #32
    e20a:	d012      	beq.n	e232 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    e20c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    e210:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    e214:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e218:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    e21c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    e220:	6840      	ldr	r0, [r0, #4]
    e222:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e226:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    e22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e22e:	2104      	movs	r1, #4
    e230:	4710      	bx	r2
    e232:	f640 01bc 	movw	r1, #2236	; 0x8bc
    e236:	2070      	movs	r0, #112	; 0x70
    e238:	f002 f8ba 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e23c:	2000119c 	.word	0x2000119c

0000e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    e240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e242:	4d6d      	ldr	r5, [pc, #436]	; (e3f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    e244:	496d      	ldr	r1, [pc, #436]	; (e3fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    e246:	2601      	movs	r6, #1
    e248:	f505 7460 	add.w	r4, r5, #896	; 0x380
    e24c:	2808      	cmp	r0, #8
    e24e:	d273      	bcs.n	e338 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    e250:	e8df f000 	tbb	[pc, r0]
    e254:	af9d6704 	.word	0xaf9d6704
    e258:	b9b444cd 	.word	0xb9b444cd
    e25c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e260:	b918      	cbnz	r0, e26a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    e262:	f001 ff11 	bl	10088 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    e266:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    e26a:	8ae0      	ldrh	r0, [r4, #22]
    e26c:	b110      	cbz	r0, e274 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    e26e:	f002 f827 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e272:	b188      	cbz	r0, e298 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    e274:	f7ff fc60 	bl	db38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e278:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    e27c:	68a1      	ldr	r1, [r4, #8]
    e27e:	f1b1 3fff 	cmp.w	r1, #4294967295
    e282:	d005      	beq.n	e290 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    e284:	2301      	movs	r3, #1
    e286:	2203      	movs	r2, #3
    e288:	2005      	movs	r0, #5
    e28a:	f001 fb1b 	bl	f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e28e:	b140      	cbz	r0, e2a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    e290:	7e60      	ldrb	r0, [r4, #25]
    e292:	2801      	cmp	r0, #1
    e294:	d110      	bne.n	e2b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    e296:	e009      	b.n	e2ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    e298:	f44f 6107 	mov.w	r1, #2160	; 0x870
    e29c:	2070      	movs	r0, #112	; 0x70
    e29e:	f002 f887 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e2a2:	f640 0175 	movw	r1, #2165	; 0x875
    e2a6:	2070      	movs	r0, #112	; 0x70
    e2a8:	f002 f882 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e2ac:	6920      	ldr	r0, [r4, #16]
    e2ae:	1e40      	subs	r0, r0, #1
    e2b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e2b4:	f001 fa20 	bl	f6f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    e2b8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e2bc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e2c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e2c4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e2c8:	6840      	ldr	r0, [r0, #4]
    e2ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e2ce:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e2d2:	b001      	add	sp, #4
    e2d4:	2101      	movs	r1, #1
    e2d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e2da:	4710      	bx	r2
    e2dc:	f7ff fc2c 	bl	db38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e2e0:	f04f 30ff 	mov.w	r0, #4294967295
    e2e4:	60a0      	str	r0, [r4, #8]
    e2e6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    e2ea:	f88d 0000 	strb.w	r0, [sp]
    e2ee:	f89d 0000 	ldrb.w	r0, [sp]
    e2f2:	b188      	cbz	r0, e318 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    e2f4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e2f8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e2fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e300:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e304:	6840      	ldr	r0, [r0, #4]
    e306:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e30a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e30e:	b001      	add	sp, #4
    e310:	2106      	movs	r1, #6
    e312:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e316:	4710      	bx	r2
    e318:	f640 0186 	movw	r1, #2182	; 0x886
    e31c:	2070      	movs	r0, #112	; 0x70
    e31e:	f002 f847 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e322:	f7ff fc09 	bl	db38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e326:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    e32a:	f001 ffc9 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e32e:	b120      	cbz	r0, e33a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    e330:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e334:	b130      	cbz	r0, e344 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    e336:	e009      	b.n	e34c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    e338:	e059      	b.n	e3ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    e33a:	f640 0196 	movw	r1, #2198	; 0x896
    e33e:	2070      	movs	r0, #112	; 0x70
    e340:	f002 f836 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e344:	f001 fea0 	bl	10088 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    e348:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    e34c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    e350:	b158      	cbz	r0, e36a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    e352:	492b      	ldr	r1, [pc, #172]	; (e400 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    e354:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    e358:	6008      	str	r0, [r1, #0]
    e35a:	2005      	movs	r0, #5
    e35c:	f001 fb86 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e360:	f001 fede 	bl	10120 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    e364:	2000      	movs	r0, #0
    e366:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    e36a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e36e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e372:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e376:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e37a:	6840      	ldr	r0, [r0, #4]
    e37c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e380:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e384:	b001      	add	sp, #4
    e386:	2100      	movs	r1, #0
    e388:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e38c:	4710      	bx	r2
    e38e:	f001 fc25 	bl	fbdc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    e392:	8ae0      	ldrh	r0, [r4, #22]
    e394:	b110      	cbz	r0, e39c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    e396:	f001 ff93 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e39a:	b128      	cbz	r0, e3a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    e39c:	4819      	ldr	r0, [pc, #100]	; (e404 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    e39e:	7800      	ldrb	r0, [r0, #0]
    e3a0:	2803      	cmp	r0, #3
    e3a2:	bf08      	it	eq
    e3a4:	7766      	strbeq	r6, [r4, #29]
    e3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3a8:	f640 01a1 	movw	r1, #2209	; 0x8a1
    e3ac:	2070      	movs	r0, #112	; 0x70
    e3ae:	f001 ffff 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3b2:	4815      	ldr	r0, [pc, #84]	; (e408 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    e3b4:	6006      	str	r6, [r0, #0]
    e3b6:	6888      	ldr	r0, [r1, #8]
    e3b8:	6006      	str	r6, [r0, #0]
    e3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3bc:	7808      	ldrb	r0, [r1, #0]
    e3be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e3c2:	f002 b8c5 	b.w	10550 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e3c6:	f7ff fbb7 	bl	db38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e3ca:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e3ce:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e3d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e3d6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e3da:	6840      	ldr	r0, [r0, #4]
    e3dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e3e0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e3e4:	b001      	add	sp, #4
    e3e6:	2105      	movs	r1, #5
    e3e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e3ec:	4710      	bx	r2
    e3ee:	f640 01b4 	movw	r1, #2228	; 0x8b4
    e3f2:	2070      	movs	r0, #112	; 0x70
    e3f4:	f001 ffdc 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3f8:	20000e1c 	.word	0x20000e1c
    e3fc:	20000014 	.word	0x20000014
    e400:	4001f508 	.word	0x4001f508
    e404:	20000016 	.word	0x20000016
    e408:	40000508 	.word	0x40000508

0000e40c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    e40c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e410:	4682      	mov	sl, r0
    e412:	48dc      	ldr	r0, [pc, #880]	; (e784 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    e414:	b08b      	sub	sp, #44	; 0x2c
    e416:	6800      	ldr	r0, [r0, #0]
    e418:	4ddb      	ldr	r5, [pc, #876]	; (e788 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    e41a:	05c0      	lsls	r0, r0, #23
    e41c:	0dc0      	lsrs	r0, r0, #23
    e41e:	d00e      	beq.n	e43e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    e420:	3810      	subs	r0, #16
    e422:	b240      	sxtb	r0, r0
    e424:	2800      	cmp	r0, #0
    e426:	bfb8      	it	lt
    e428:	f000 000f 	andlt.w	r0, r0, #15
    e42c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e430:	bfac      	ite	ge
    e432:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    e436:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    e43a:	0940      	lsrs	r0, r0, #5
    e43c:	d00d      	beq.n	e45a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    e43e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e440:	f04f 0b00 	mov.w	fp, #0
    e444:	7800      	ldrb	r0, [r0, #0]
    e446:	2800      	cmp	r0, #0
    e448:	bf18      	it	ne
    e44a:	2801      	cmpne	r0, #1
    e44c:	d018      	beq.n	e480 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    e44e:	f240 714f 	movw	r1, #1871	; 0x74f
    e452:	f04f 0070 	mov.w	r0, #112	; 0x70
    e456:	f001 ffab 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e45a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    e45e:	f04f 0b01 	mov.w	fp, #1
    e462:	2820      	cmp	r0, #32
    e464:	d007      	beq.n	e476 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    e466:	980c      	ldr	r0, [sp, #48]	; 0x30
    e468:	7800      	ldrb	r0, [r0, #0]
    e46a:	b148      	cbz	r0, e480 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    e46c:	f240 714b 	movw	r1, #1867	; 0x74b
    e470:	2070      	movs	r0, #112	; 0x70
    e472:	f001 ff9d 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e476:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    e47a:	2070      	movs	r0, #112	; 0x70
    e47c:	f001 ff98 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e480:	4cc2      	ldr	r4, [pc, #776]	; (e78c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    e482:	b124      	cbz	r4, e48e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    e484:	2100      	movs	r1, #0
    e486:	f240 7052 	movw	r0, #1874	; 0x752
    e48a:	f3af 8000 	nop.w
    e48e:	49c0      	ldr	r1, [pc, #768]	; (e790 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    e490:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e494:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    e498:	f04f 0801 	mov.w	r8, #1
    e49c:	9000      	str	r0, [sp, #0]
    e49e:	b124      	cbz	r4, e4aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    e4a0:	2100      	movs	r1, #0
    e4a2:	f240 705a 	movw	r0, #1882	; 0x75a
    e4a6:	f3af 8000 	nop.w
    e4aa:	f1b8 0f00 	cmp.w	r8, #0
    e4ae:	d009      	beq.n	e4c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    e4b0:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    e4b4:	f04f 0900 	mov.w	r9, #0
    e4b8:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    e4bc:	f1bb 0f00 	cmp.w	fp, #0
    e4c0:	d007      	beq.n	e4d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    e4c2:	e032      	b.n	e52a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    e4c4:	48b3      	ldr	r0, [pc, #716]	; (e794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    e4c6:	2800      	cmp	r0, #0
    e4c8:	bf18      	it	ne
    e4ca:	f3af 8000 	nopne.w
    e4ce:	b662      	cpsie	i
    e4d0:	e7ee      	b.n	e4b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    e4d2:	4637      	mov	r7, r6
    e4d4:	2001      	movs	r0, #1
    e4d6:	ea20 0607 	bic.w	r6, r0, r7
    e4da:	48af      	ldr	r0, [pc, #700]	; (e798 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    e4dc:	2240      	movs	r2, #64	; 0x40
    e4de:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    e4e2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    e4e6:	f00b f862 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4ea:	b124      	cbz	r4, e4f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    e4ec:	2100      	movs	r1, #0
    e4ee:	f240 50cd 	movw	r0, #1485	; 0x5cd
    e4f2:	f3af 8000 	nop.w
    e4f6:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    e4fa:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    e4fe:	6a09      	ldr	r1, [r1, #32]
    e500:	6201      	str	r1, [r0, #32]
    e502:	b124      	cbz	r4, e50e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    e504:	2100      	movs	r1, #0
    e506:	f240 50d1 	movw	r0, #1489	; 0x5d1
    e50a:	f3af 8000 	nop.w
    e50e:	b124      	cbz	r4, e51a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    e510:	2100      	movs	r1, #0
    e512:	f240 7064 	movw	r0, #1892	; 0x764
    e516:	f3af 8000 	nop.w
    e51a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    e51e:	f88d 0004 	strb.w	r0, [sp, #4]
    e522:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e526:	2800      	cmp	r0, #0
    e528:	d1b9      	bne.n	e49e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e52a:	b124      	cbz	r4, e536 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    e52c:	2100      	movs	r1, #0
    e52e:	f240 706e 	movw	r0, #1902	; 0x76e
    e532:	f3af 8000 	nop.w
    e536:	f001 f83b 	bl	f5b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e53a:	4680      	mov	r8, r0
    e53c:	4633      	mov	r3, r6
    e53e:	aa06      	add	r2, sp, #24
    e540:	990c      	ldr	r1, [sp, #48]	; 0x30
    e542:	f7ff fa25 	bl	d990 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9a0>
    e546:	b124      	cbz	r4, e552 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    e548:	2100      	movs	r1, #0
    e54a:	f240 7075 	movw	r0, #1909	; 0x775
    e54e:	f3af 8000 	nop.w
    e552:	4991      	ldr	r1, [pc, #580]	; (e798 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    e554:	a806      	add	r0, sp, #24
    e556:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    e55a:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    e55e:	2901      	cmp	r1, #1
    e560:	bf18      	it	ne
    e562:	2902      	cmpne	r1, #2
    e564:	d13c      	bne.n	e5e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    e566:	9906      	ldr	r1, [sp, #24]
    e568:	9b07      	ldr	r3, [sp, #28]
    e56a:	eba1 0108 	sub.w	r1, r1, r8
    e56e:	4a8b      	ldr	r2, [pc, #556]	; (e79c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    e570:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e574:	eba3 0308 	sub.w	r3, r3, r8
    e578:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    e57c:	2902      	cmp	r1, #2
    e57e:	d371      	bcc.n	e664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e580:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    e584:	d26e      	bcs.n	e664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e586:	429a      	cmp	r2, r3
    e588:	d36c      	bcc.n	e664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e58a:	f04f 0901 	mov.w	r9, #1
    e58e:	ab01      	add	r3, sp, #4
    e590:	aa05      	add	r2, sp, #20
    e592:	4631      	mov	r1, r6
    e594:	f7fe fef2 	bl	d37c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    e598:	2800      	cmp	r0, #0
    e59a:	d06b      	beq.n	e674 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    e59c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    e5a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    e5a4:	4633      	mov	r3, r6
    e5a6:	428a      	cmp	r2, r1
    e5a8:	d068      	beq.n	e67c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    e5aa:	2005      	movs	r0, #5
    e5ac:	f7fe fd2e 	bl	d00c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    e5b0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    e5b4:	7048      	strb	r0, [r1, #1]
    e5b6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e5ba:	2820      	cmp	r0, #32
    e5bc:	bf03      	ittte	eq
    e5be:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    e5c2:	f880 a020 	strbeq.w	sl, [r0, #32]
    e5c6:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    e5ca:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    e5ce:	bf18      	it	ne
    e5d0:	f880 a001 	strbne.w	sl, [r0, #1]
    e5d4:	4632      	mov	r2, r6
    e5d6:	4651      	mov	r1, sl
    e5d8:	f05f 0003 	movs.w	r0, #3
    e5dc:	f7ff fb7e 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e5e0:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    e5e4:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    e5e8:	f88d 0004 	strb.w	r0, [sp, #4]
    e5ec:	f89d 7004 	ldrb.w	r7, [sp, #4]
    e5f0:	b124      	cbz	r4, e5fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    e5f2:	2100      	movs	r1, #0
    e5f4:	f240 707c 	movw	r0, #1916	; 0x77c
    e5f8:	f3af 8000 	nop.w
    e5fc:	4868      	ldr	r0, [pc, #416]	; (e7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    e5fe:	2800      	cmp	r0, #0
    e600:	bf18      	it	ne
    e602:	f3af 8000 	nopne.w
    e606:	f3ef 8810 	mrs	r8, PRIMASK
    e60a:	b672      	cpsid	i
    e60c:	b124      	cbz	r4, e618 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    e60e:	2100      	movs	r1, #0
    e610:	f240 7082 	movw	r0, #1922	; 0x782
    e614:	f3af 8000 	nop.w
    e618:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    e61c:	f88d 0004 	strb.w	r0, [sp, #4]
    e620:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e624:	2800      	cmp	r0, #0
    e626:	f47f af3a 	bne.w	e49e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e62a:	b124      	cbz	r4, e636 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    e62c:	2100      	movs	r1, #0
    e62e:	f240 708a 	movw	r0, #1930	; 0x78a
    e632:	f3af 8000 	nop.w
    e636:	f10d 0e18 	add.w	lr, sp, #24
    e63a:	9800      	ldr	r0, [sp, #0]
    e63c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    e640:	f100 0008 	add.w	r0, r0, #8
    e644:	f1b9 0f00 	cmp.w	r9, #0
    e648:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    e64c:	d044      	beq.n	e6d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    e64e:	b124      	cbz	r4, e65a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    e650:	2100      	movs	r1, #0
    e652:	f240 7097 	movw	r0, #1943	; 0x797
    e656:	f3af 8000 	nop.w
    e65a:	f1bb 0f00 	cmp.w	fp, #0
    e65e:	d12c      	bne.n	e6ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e660:	e016      	b.n	e690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    e662:	e7ff      	b.n	e664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e664:	4632      	mov	r2, r6
    e666:	4651      	mov	r1, sl
    e668:	2004      	movs	r0, #4
    e66a:	f7ff fb37 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e66e:	f04f 0901 	mov.w	r9, #1
    e672:	e7b5      	b.n	e5e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    e674:	4632      	mov	r2, r6
    e676:	4651      	mov	r1, sl
    e678:	2004      	movs	r0, #4
    e67a:	e7af      	b.n	e5dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    e67c:	2920      	cmp	r1, #32
    e67e:	bf19      	ittee	ne
    e680:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    e684:	7840      	ldrbne	r0, [r0, #1]
    e686:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    e68a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    e68e:	e78f      	b.n	e5b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    e690:	b19f      	cbz	r7, e6ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e692:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    e696:	2820      	cmp	r0, #32
    e698:	d10f      	bne.n	e6ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e69a:	b124      	cbz	r4, e6a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    e69c:	2100      	movs	r1, #0
    e69e:	f240 709c 	movw	r0, #1948	; 0x79c
    e6a2:	f3af 8000 	nop.w
    e6a6:	4631      	mov	r1, r6
    e6a8:	2002      	movs	r0, #2
    e6aa:	f7ff fb47 	bl	dd3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    e6ae:	b920      	cbnz	r0, e6ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e6b0:	980c      	ldr	r0, [sp, #48]	; 0x30
    e6b2:	7800      	ldrb	r0, [r0, #0]
    e6b4:	b3f0      	cbz	r0, e734 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    e6b6:	2801      	cmp	r0, #1
    e6b8:	d04c      	beq.n	e754 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    e6ba:	b124      	cbz	r4, e6c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    e6bc:	2100      	movs	r1, #0
    e6be:	f240 70b9 	movw	r0, #1977	; 0x7b9
    e6c2:	f3af 8000 	nop.w
    e6c6:	f1bb 0f00 	cmp.w	fp, #0
    e6ca:	bf18      	it	ne
    e6cc:	2001      	movne	r0, #1
    e6ce:	d04a      	beq.n	e766 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    e6d0:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    e6d4:	f04f 0901 	mov.w	r9, #1
    e6d8:	b124      	cbz	r4, e6e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    e6da:	2100      	movs	r1, #0
    e6dc:	f240 70ca 	movw	r0, #1994	; 0x7ca
    e6e0:	f3af 8000 	nop.w
    e6e4:	f1b8 0f00 	cmp.w	r8, #0
    e6e8:	d045      	beq.n	e776 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    e6ea:	b124      	cbz	r4, e6f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    e6ec:	2100      	movs	r1, #0
    e6ee:	f240 70ce 	movw	r0, #1998	; 0x7ce
    e6f2:	f3af 8000 	nop.w
    e6f6:	f1b9 0f00 	cmp.w	r9, #0
    e6fa:	d011      	beq.n	e720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    e6fc:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    e700:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    e704:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    e708:	2820      	cmp	r0, #32
    e70a:	d009      	beq.n	e720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    e70c:	b124      	cbz	r4, e718 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    e70e:	2100      	movs	r1, #0
    e710:	f240 70d5 	movw	r0, #2005	; 0x7d5
    e714:	f3af 8000 	nop.w
    e718:	4822      	ldr	r0, [pc, #136]	; (e7a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    e71a:	7840      	ldrb	r0, [r0, #1]
    e71c:	f001 ff18 	bl	10550 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e720:	b124      	cbz	r4, e72c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    e722:	2100      	movs	r1, #0
    e724:	f240 70da 	movw	r0, #2010	; 0x7da
    e728:	f3af 8000 	nop.w
    e72c:	b00d      	add	sp, #52	; 0x34
    e72e:	4648      	mov	r0, r9
    e730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e734:	e7ff      	b.n	e736 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    e736:	b124      	cbz	r4, e742 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    e738:	2100      	movs	r1, #0
    e73a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    e73e:	f3af 8000 	nop.w
    e742:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    e746:	4651      	mov	r1, sl
    e748:	2004      	movs	r0, #4
    e74a:	f7ff fac7 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e74e:	f04f 0901 	mov.w	r9, #1
    e752:	e7c1      	b.n	e6d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    e754:	2c00      	cmp	r4, #0
    e756:	f43f aea2 	beq.w	e49e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e75a:	2100      	movs	r1, #0
    e75c:	f240 70af 	movw	r0, #1967	; 0x7af
    e760:	f3af 8000 	nop.w
    e764:	e69b      	b.n	e49e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e766:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    e76a:	2001      	movs	r0, #1
    e76c:	ea20 0101 	bic.w	r1, r0, r1
    e770:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    e774:	e7ac      	b.n	e6d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    e776:	4807      	ldr	r0, [pc, #28]	; (e794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    e778:	2800      	cmp	r0, #0
    e77a:	bf18      	it	ne
    e77c:	f3af 8000 	nopne.w
    e780:	b662      	cpsie	i
    e782:	e7b2      	b.n	e6ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    e784:	e000ed04 	.word	0xe000ed04
    e788:	2000119c 	.word	0x2000119c
    e78c:	00000000 	.word	0x00000000
    e790:	20000e1c 	.word	0x20000e1c
    e794:	00000000 	.word	0x00000000
    e798:	2000111c 	.word	0x2000111c
    e79c:	003fffff 	.word	0x003fffff
    e7a0:	00000000 	.word	0x00000000
    e7a4:	20000014 	.word	0x20000014

0000e7a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    e7a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7ac:	48a5      	ldr	r0, [pc, #660]	; (ea44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    e7ae:	b08c      	sub	sp, #48	; 0x30
    e7b0:	6800      	ldr	r0, [r0, #0]
    e7b2:	05c0      	lsls	r0, r0, #23
    e7b4:	0dc0      	lsrs	r0, r0, #23
    e7b6:	d011      	beq.n	e7dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    e7b8:	3810      	subs	r0, #16
    e7ba:	b240      	sxtb	r0, r0
    e7bc:	2800      	cmp	r0, #0
    e7be:	bfb8      	it	lt
    e7c0:	f000 000f 	andlt.w	r0, r0, #15
    e7c4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e7c8:	bfac      	ite	ge
    e7ca:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    e7ce:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    e7d2:	0940      	lsrs	r0, r0, #5
    e7d4:	bf08      	it	eq
    e7d6:	f04f 0901 	moveq.w	r9, #1
    e7da:	d001      	beq.n	e7e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    e7dc:	f04f 0900 	mov.w	r9, #0
    e7e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    e7e2:	7800      	ldrb	r0, [r0, #0]
    e7e4:	2800      	cmp	r0, #0
    e7e6:	f04f 0000 	mov.w	r0, #0
    e7ea:	bf1c      	itt	ne
    e7ec:	b00d      	addne	sp, #52	; 0x34
    e7ee:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7f2:	f8df a254 	ldr.w	sl, [pc, #596]	; ea48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    e7f6:	4d95      	ldr	r5, [pc, #596]	; (ea4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    e7f8:	4c95      	ldr	r4, [pc, #596]	; (ea50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    e7fa:	f04f 0b00 	mov.w	fp, #0
    e7fe:	900b      	str	r0, [sp, #44]	; 0x2c
    e800:	b125      	cbz	r5, e80c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    e802:	2100      	movs	r1, #0
    e804:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    e808:	f3af 8000 	nop.w
    e80c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    e810:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    e814:	f04f 0800 	mov.w	r8, #0
    e818:	b125      	cbz	r5, e824 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    e81a:	2100      	movs	r1, #0
    e81c:	f240 605d 	movw	r0, #1629	; 0x65d
    e820:	f3af 8000 	nop.w
    e824:	f1b9 0f00 	cmp.w	r9, #0
    e828:	d11d      	bne.n	e866 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    e82a:	4637      	mov	r7, r6
    e82c:	2001      	movs	r0, #1
    e82e:	ea20 0607 	bic.w	r6, r0, r7
    e832:	4888      	ldr	r0, [pc, #544]	; (ea54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    e834:	2240      	movs	r2, #64	; 0x40
    e836:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    e83a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    e83e:	f00a feb6 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e842:	b125      	cbz	r5, e84e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    e844:	2100      	movs	r1, #0
    e846:	f240 50cd 	movw	r0, #1485	; 0x5cd
    e84a:	f3af 8000 	nop.w
    e84e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    e852:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    e856:	6a09      	ldr	r1, [r1, #32]
    e858:	6201      	str	r1, [r0, #32]
    e85a:	b125      	cbz	r5, e866 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    e85c:	2100      	movs	r1, #0
    e85e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    e862:	f3af 8000 	nop.w
    e866:	b125      	cbz	r5, e872 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    e868:	2100      	movs	r1, #0
    e86a:	f240 6065 	movw	r0, #1637	; 0x665
    e86e:	f3af 8000 	nop.w
    e872:	f000 fe9d 	bl	f5b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e876:	4607      	mov	r7, r0
    e878:	4633      	mov	r3, r6
    e87a:	466a      	mov	r2, sp
    e87c:	990c      	ldr	r1, [sp, #48]	; 0x30
    e87e:	f7ff f887 	bl	d990 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9a0>
    e882:	b125      	cbz	r5, e88e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    e884:	2100      	movs	r1, #0
    e886:	f240 606b 	movw	r0, #1643	; 0x66b
    e88a:	f3af 8000 	nop.w
    e88e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e892:	2820      	cmp	r0, #32
    e894:	d014      	beq.n	e8c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    e896:	6920      	ldr	r0, [r4, #16]
    e898:	9900      	ldr	r1, [sp, #0]
    e89a:	1a09      	subs	r1, r1, r0
    e89c:	0209      	lsls	r1, r1, #8
    e89e:	17ca      	asrs	r2, r1, #31
    e8a0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    e8a4:	1209      	asrs	r1, r1, #8
    e8a6:	d50b      	bpl.n	e8c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    e8a8:	e9dd 2100 	ldrd	r2, r1, [sp]
    e8ac:	1a89      	subs	r1, r1, r2
    e8ae:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    e8b2:	4408      	add	r0, r1
    e8b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e8b8:	e9cd 2000 	strd	r2, r0, [sp]
    e8bc:	f04f 0801 	mov.w	r8, #1
    e8c0:	b14d      	cbz	r5, e8d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    e8c2:	2100      	movs	r1, #0
    e8c4:	f240 6075 	movw	r0, #1653	; 0x675
    e8c8:	f3af 8000 	nop.w
    e8cc:	2100      	movs	r1, #0
    e8ce:	f240 607b 	movw	r0, #1659	; 0x67b
    e8d2:	f3af 8000 	nop.w
    e8d6:	9800      	ldr	r0, [sp, #0]
    e8d8:	9901      	ldr	r1, [sp, #4]
    e8da:	1bc0      	subs	r0, r0, r7
    e8dc:	1bc9      	subs	r1, r1, r7
    e8de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e8e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e8e6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    e8ea:	d205      	bcs.n	e8f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    e8ec:	458a      	cmp	sl, r1
    e8ee:	d303      	bcc.n	e8f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    e8f0:	f1b9 0f00 	cmp.w	r9, #0
    e8f4:	d10c      	bne.n	e910 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    e8f6:	e003      	b.n	e900 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    e8f8:	f1b9 0f00 	cmp.w	r9, #0
    e8fc:	d038      	beq.n	e970 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    e8fe:	e094      	b.n	ea2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    e900:	4633      	mov	r3, r6
    e902:	463a      	mov	r2, r7
    e904:	4669      	mov	r1, sp
    e906:	4854      	ldr	r0, [pc, #336]	; (ea58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    e908:	f7fe fbbc 	bl	d084 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    e90c:	ea48 0800 	orr.w	r8, r8, r0
    e910:	f1b8 0f00 	cmp.w	r8, #0
    e914:	d022      	beq.n	e95c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    e916:	9800      	ldr	r0, [sp, #0]
    e918:	f00a fcdb 	bl	192d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e91c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    e920:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e924:	4b4d      	ldr	r3, [pc, #308]	; (ea5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    e926:	4411      	add	r1, r2
    e928:	1c49      	adds	r1, r1, #1
    e92a:	1842      	adds	r2, r0, r1
    e92c:	4298      	cmp	r0, r3
    e92e:	d841      	bhi.n	e9b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    e930:	4849      	ldr	r0, [pc, #292]	; (ea58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    e932:	4281      	cmp	r1, r0
    e934:	dc5a      	bgt.n	e9ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    e936:	4240      	negs	r0, r0
    e938:	4281      	cmp	r1, r0
    e93a:	db5f      	blt.n	e9fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    e93c:	1c58      	adds	r0, r3, #1
    e93e:	4290      	cmp	r0, r2
    e940:	bfdc      	itt	le
    e942:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    e946:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    e94a:	dd05      	ble.n	e958 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    e94c:	2a00      	cmp	r2, #0
    e94e:	bfbc      	itt	lt
    e950:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    e954:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    e958:	980c      	ldr	r0, [sp, #48]	; 0x30
    e95a:	60c2      	str	r2, [r0, #12]
    e95c:	2001      	movs	r0, #1
    e95e:	900b      	str	r0, [sp, #44]	; 0x2c
    e960:	2d00      	cmp	r5, #0
    e962:	d062      	beq.n	ea2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    e964:	2100      	movs	r1, #0
    e966:	f240 608e 	movw	r0, #1678	; 0x68e
    e96a:	f3af 8000 	nop.w
    e96e:	e05c      	b.n	ea2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    e970:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e974:	aa08      	add	r2, sp, #32
    e976:	a907      	add	r1, sp, #28
    e978:	f000 fcbc 	bl	f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    e97c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e980:	2820      	cmp	r0, #32
    e982:	d01c      	beq.n	e9be <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    e984:	6920      	ldr	r0, [r4, #16]
    e986:	1d40      	adds	r0, r0, #5
    e988:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e98c:	e9dd 2100 	ldrd	r2, r1, [sp]
    e990:	1a89      	subs	r1, r1, r2
    e992:	4401      	add	r1, r0
    e994:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e998:	e9cd 0100 	strd	r0, r1, [sp]
    e99c:	f00a fc99 	bl	192d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e9a0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    e9a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e9a8:	4b2c      	ldr	r3, [pc, #176]	; (ea5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    e9aa:	4411      	add	r1, r2
    e9ac:	1c4a      	adds	r2, r1, #1
    e9ae:	1881      	adds	r1, r0, r2
    e9b0:	4298      	cmp	r0, r3
    e9b2:	d918      	bls.n	e9e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    e9b4:	f240 6109 	movw	r1, #1545	; 0x609
    e9b8:	2070      	movs	r0, #112	; 0x70
    e9ba:	f001 fcf9 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e9be:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e9c2:	f107 0609 	add.w	r6, r7, #9
    e9c6:	b120      	cbz	r0, e9d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    e9c8:	f001 fc7a 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e9cc:	2800      	cmp	r0, #0
    e9ce:	bf08      	it	eq
    e9d0:	3632      	addeq	r6, #50	; 0x32
    e9d2:	4823      	ldr	r0, [pc, #140]	; (ea60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    e9d4:	7841      	ldrb	r1, [r0, #1]
    e9d6:	9807      	ldr	r0, [sp, #28]
    e9d8:	4281      	cmp	r1, r0
    e9da:	bf84      	itt	hi
    e9dc:	1a08      	subhi	r0, r1, r0
    e9de:	4406      	addhi	r6, r0
    e9e0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    e9e4:	e7d2      	b.n	e98c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    e9e6:	481c      	ldr	r0, [pc, #112]	; (ea58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    e9e8:	4282      	cmp	r2, r0
    e9ea:	dd04      	ble.n	e9f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    e9ec:	f240 610a 	movw	r1, #1546	; 0x60a
    e9f0:	2070      	movs	r0, #112	; 0x70
    e9f2:	f001 fcdd 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e9f6:	481b      	ldr	r0, [pc, #108]	; (ea64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    e9f8:	4282      	cmp	r2, r0
    e9fa:	da04      	bge.n	ea06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    e9fc:	f240 610b 	movw	r1, #1547	; 0x60b
    ea00:	2070      	movs	r0, #112	; 0x70
    ea02:	f001 fcd5 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ea06:	4818      	ldr	r0, [pc, #96]	; (ea68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    ea08:	4288      	cmp	r0, r1
    ea0a:	bfdc      	itt	le
    ea0c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    ea10:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    ea14:	dd05      	ble.n	ea22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    ea16:	2900      	cmp	r1, #0
    ea18:	bfbc      	itt	lt
    ea1a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    ea1e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    ea22:	980c      	ldr	r0, [sp, #48]	; 0x30
    ea24:	60c1      	str	r1, [r0, #12]
    ea26:	2001      	movs	r0, #1
    ea28:	900b      	str	r0, [sp, #44]	; 0x2c
    ea2a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    ea2e:	f88d 0010 	strb.w	r0, [sp, #16]
    ea32:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ea36:	2800      	cmp	r0, #0
    ea38:	f47f aee2 	bne.w	e800 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    ea3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ea3e:	b00d      	add	sp, #52	; 0x34
    ea40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea44:	e000ed04 	.word	0xe000ed04
    ea48:	003fffff 	.word	0x003fffff
    ea4c:	00000000 	.word	0x00000000
    ea50:	2000119c 	.word	0x2000119c
    ea54:	2000111c 	.word	0x2000111c
    ea58:	07a12000 	.word	0x07a12000
    ea5c:	1e847fff 	.word	0x1e847fff
    ea60:	20000016 	.word	0x20000016
    ea64:	f85ee000 	.word	0xf85ee000
    ea68:	1e848000 	.word	0x1e848000

0000ea6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    ea6c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea70:	4d88      	ldr	r5, [pc, #544]	; (ec94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    ea72:	b08c      	sub	sp, #48	; 0x30
    ea74:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    ea78:	2000      	movs	r0, #0
    ea7a:	9009      	str	r0, [sp, #36]	; 0x24
    ea7c:	2001      	movs	r0, #1
    ea7e:	4c86      	ldr	r4, [pc, #536]	; (ec98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    ea80:	f04f 0900 	mov.w	r9, #0
    ea84:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    ea88:	4680      	mov	r8, r0
    ea8a:	9008      	str	r0, [sp, #32]
    ea8c:	b124      	cbz	r4, ea98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    ea8e:	2100      	movs	r1, #0
    ea90:	f240 70e9 	movw	r0, #2025	; 0x7e9
    ea94:	f3af 8000 	nop.w
    ea98:	9808      	ldr	r0, [sp, #32]
    ea9a:	2800      	cmp	r0, #0
    ea9c:	d037      	beq.n	eb0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    ea9e:	bf00      	nop
    eaa0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    eaa4:	b124      	cbz	r4, eab0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    eaa6:	2100      	movs	r1, #0
    eaa8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    eaac:	f3af 8000 	nop.w
    eab0:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    eab4:	2240      	movs	r2, #64	; 0x40
    eab6:	ea28 060a 	bic.w	r6, r8, sl
    eaba:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    eabe:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    eac2:	4683      	mov	fp, r0
    eac4:	f00a fd73 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eac8:	b124      	cbz	r4, ead4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    eaca:	2100      	movs	r1, #0
    eacc:	f240 50cd 	movw	r0, #1485	; 0x5cd
    ead0:	f3af 8000 	nop.w
    ead4:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    ead8:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    eadc:	9000      	str	r0, [sp, #0]
    eade:	6a09      	ldr	r1, [r1, #32]
    eae0:	6201      	str	r1, [r0, #32]
    eae2:	b124      	cbz	r4, eaee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    eae4:	2100      	movs	r1, #0
    eae6:	f240 50d1 	movw	r0, #1489	; 0x5d1
    eaea:	f3af 8000 	nop.w
    eaee:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    eaf2:	f88d 0008 	strb.w	r0, [sp, #8]
    eaf6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eafa:	b178      	cbz	r0, eb1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    eafc:	2c00      	cmp	r4, #0
    eafe:	bf1c      	itt	ne
    eb00:	2100      	movne	r1, #0
    eb02:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    eb06:	d0c1      	beq.n	ea8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    eb08:	f3af 8000 	nop.w
    eb0c:	e7be      	b.n	ea8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    eb0e:	4863      	ldr	r0, [pc, #396]	; (ec9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    eb10:	2800      	cmp	r0, #0
    eb12:	bf18      	it	ne
    eb14:	f3af 8000 	nopne.w
    eb18:	b662      	cpsie	i
    eb1a:	e7c1      	b.n	eaa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    eb1c:	b124      	cbz	r4, eb28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    eb1e:	2100      	movs	r1, #0
    eb20:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    eb24:	f3af 8000 	nop.w
    eb28:	980c      	ldr	r0, [sp, #48]	; 0x30
    eb2a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    eb2e:	2803      	cmp	r0, #3
    eb30:	d172      	bne.n	ec18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    eb32:	f8dd a000 	ldr.w	sl, [sp]
    eb36:	f8cd a018 	str.w	sl, [sp, #24]
    eb3a:	990c      	ldr	r1, [sp, #48]	; 0x30
    eb3c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    eb40:	4288      	cmp	r0, r1
    eb42:	bf14      	ite	ne
    eb44:	f04f 0b00 	movne.w	fp, #0
    eb48:	f04f 0b01 	moveq.w	fp, #1
    eb4c:	f10a 0c20 	add.w	ip, sl, #32
    eb50:	4686      	mov	lr, r0
    eb52:	2220      	movs	r2, #32
    eb54:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    eb58:	e003      	b.n	eb62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    eb5a:	4602      	mov	r2, r0
    eb5c:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    eb60:	7840      	ldrb	r0, [r0, #1]
    eb62:	4288      	cmp	r0, r1
    eb64:	d002      	beq.n	eb6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    eb66:	2820      	cmp	r0, #32
    eb68:	d00a      	beq.n	eb80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    eb6a:	e7f6      	b.n	eb5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    eb6c:	2820      	cmp	r0, #32
    eb6e:	d007      	beq.n	eb80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    eb70:	4586      	cmp	lr, r0
    eb72:	d107      	bne.n	eb84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    eb74:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    eb78:	7840      	ldrb	r0, [r0, #1]
    eb7a:	f88c 0000 	strb.w	r0, [ip]
    eb7e:	e007      	b.n	eb90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    eb80:	4648      	mov	r0, r9
    eb82:	e00c      	b.n	eb9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    eb84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    eb88:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    eb8c:	7840      	ldrb	r0, [r0, #1]
    eb8e:	7048      	strb	r0, [r1, #1]
    eb90:	b124      	cbz	r4, eb9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    eb92:	2100      	movs	r1, #0
    eb94:	f240 5037 	movw	r0, #1335	; 0x537
    eb98:	f3af 8000 	nop.w
    eb9c:	4640      	mov	r0, r8
    eb9e:	ea10 0f0b 	tst.w	r0, fp
    eba2:	bf18      	it	ne
    eba4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    eba8:	2800      	cmp	r0, #0
    ebaa:	d052      	beq.n	ec52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ebac:	b124      	cbz	r4, ebb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    ebae:	2100      	movs	r1, #0
    ebb0:	f240 70fd 	movw	r0, #2045	; 0x7fd
    ebb4:	f3af 8000 	nop.w
    ebb8:	4632      	mov	r2, r6
    ebba:	2001      	movs	r0, #1
    ebbc:	990c      	ldr	r1, [sp, #48]	; 0x30
    ebbe:	f7ff f88d 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    ebc2:	9806      	ldr	r0, [sp, #24]
    ebc4:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    ebc8:	f88d 0008 	strb.w	r0, [sp, #8]
    ebcc:	f89d a008 	ldrb.w	sl, [sp, #8]
    ebd0:	b124      	cbz	r4, ebdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    ebd2:	2100      	movs	r1, #0
    ebd4:	f640 0008 	movw	r0, #2056	; 0x808
    ebd8:	f3af 8000 	nop.w
    ebdc:	4830      	ldr	r0, [pc, #192]	; (eca0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    ebde:	2800      	cmp	r0, #0
    ebe0:	bf18      	it	ne
    ebe2:	f3af 8000 	nopne.w
    ebe6:	f3ef 8010 	mrs	r0, PRIMASK
    ebea:	b672      	cpsid	i
    ebec:	9008      	str	r0, [sp, #32]
    ebee:	b124      	cbz	r4, ebfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    ebf0:	2100      	movs	r1, #0
    ebf2:	f640 000d 	movw	r0, #2061	; 0x80d
    ebf6:	f3af 8000 	nop.w
    ebfa:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    ebfe:	f88d 0008 	strb.w	r0, [sp, #8]
    ec02:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ec06:	b140      	cbz	r0, ec1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    ec08:	2c00      	cmp	r4, #0
    ec0a:	bf1c      	itt	ne
    ec0c:	2100      	movne	r1, #0
    ec0e:	f640 0011 	movwne	r0, #2065	; 0x811
    ec12:	f43f af3b 	beq.w	ea8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    ec16:	e777      	b.n	eb08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    ec18:	e01b      	b.n	ec52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ec1a:	f1ba 0f00 	cmp.w	sl, #0
    ec1e:	d008      	beq.n	ec32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    ec20:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    ec24:	2820      	cmp	r0, #32
    ec26:	d104      	bne.n	ec32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    ec28:	4631      	mov	r1, r6
    ec2a:	2002      	movs	r0, #2
    ec2c:	f7ff f886 	bl	dd3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    ec30:	b308      	cbz	r0, ec76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    ec32:	b124      	cbz	r4, ec3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    ec34:	2100      	movs	r1, #0
    ec36:	f640 0025 	movw	r0, #2085	; 0x825
    ec3a:	f3af 8000 	nop.w
    ec3e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    ec42:	ea28 0000 	bic.w	r0, r8, r0
    ec46:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    ec4a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    ec4e:	2001      	movs	r0, #1
    ec50:	9009      	str	r0, [sp, #36]	; 0x24
    ec52:	b124      	cbz	r4, ec5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    ec54:	2100      	movs	r1, #0
    ec56:	f640 002e 	movw	r0, #2094	; 0x82e
    ec5a:	f3af 8000 	nop.w
    ec5e:	9808      	ldr	r0, [sp, #32]
    ec60:	b188      	cbz	r0, ec86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    ec62:	b124      	cbz	r4, ec6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    ec64:	2100      	movs	r1, #0
    ec66:	f640 0032 	movw	r0, #2098	; 0x832
    ec6a:	f3af 8000 	nop.w
    ec6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec70:	b00d      	add	sp, #52	; 0x34
    ec72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec76:	2c00      	cmp	r4, #0
    ec78:	d0f1      	beq.n	ec5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    ec7a:	2100      	movs	r1, #0
    ec7c:	f44f 6002 	mov.w	r0, #2080	; 0x820
    ec80:	f3af 8000 	nop.w
    ec84:	e7e6      	b.n	ec54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    ec86:	4805      	ldr	r0, [pc, #20]	; (ec9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    ec88:	2800      	cmp	r0, #0
    ec8a:	bf18      	it	ne
    ec8c:	f3af 8000 	nopne.w
    ec90:	b662      	cpsie	i
    ec92:	e7e6      	b.n	ec62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    ec94:	2000119c 	.word	0x2000119c
	...

0000eca4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    eca4:	b510      	push	{r4, lr}
    eca6:	2820      	cmp	r0, #32
    eca8:	d211      	bcs.n	ecce <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ecaa:	490e      	ldr	r1, [pc, #56]	; (ece4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ecac:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    ecb0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    ecb4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    ecb8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    ecbc:	b13b      	cbz	r3, ecce <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ecbe:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    ecc2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    ecc6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ecca:	2a01      	cmp	r2, #1
    eccc:	d001      	beq.n	ecd2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ecce:	2000      	movs	r0, #0
    ecd0:	bd10      	pop	{r4, pc}
    ecd2:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    ecd6:	4601      	mov	r1, r0
    ecd8:	2000      	movs	r0, #0
    ecda:	f7fe ffff 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    ecde:	2001      	movs	r0, #1
    ece0:	bd10      	pop	{r4, pc}
    ece2:	0000      	.short	0x0000
    ece4:	2000119c 	.word	0x2000119c

0000ece8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ece8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecec:	4e80      	ldr	r6, [pc, #512]	; (eef0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    ecee:	4680      	mov	r8, r0
    ecf0:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    ecf4:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ecf8:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ecfc:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ed00:	2800      	cmp	r0, #0
    ed02:	d068      	beq.n	edd6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    ed04:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    ed08:	4d7a      	ldr	r5, [pc, #488]	; (eef4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    ed0a:	b125      	cbz	r5, ed16 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ed0c:	2100      	movs	r1, #0
    ed0e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    ed12:	f3af 8000 	nop.w
    ed16:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ed1a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ed1e:	2801      	cmp	r0, #1
    ed20:	d018      	beq.n	ed54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ed22:	b2c0      	uxtb	r0, r0
    ed24:	2804      	cmp	r0, #4
    ed26:	bf1c      	itt	ne
    ed28:	2805      	cmpne	r0, #5
    ed2a:	2806      	cmpne	r0, #6
    ed2c:	d058      	beq.n	ede0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    ed2e:	b12d      	cbz	r5, ed3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ed30:	f04f 0100 	mov.w	r1, #0
    ed34:	f640 30cd 	movw	r0, #3021	; 0xbcd
    ed38:	f3af 8000 	nop.w
    ed3c:	f001 fc5e 	bl	105fc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ed40:	b125      	cbz	r5, ed4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ed42:	2100      	movs	r1, #0
    ed44:	f640 30d1 	movw	r0, #3025	; 0xbd1
    ed48:	f3af 8000 	nop.w
    ed4c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ed50:	2801      	cmp	r0, #1
    ed52:	d1e6      	bne.n	ed22 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ed54:	2401      	movs	r4, #1
    ed56:	b125      	cbz	r5, ed62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ed58:	2100      	movs	r1, #0
    ed5a:	f640 30d8 	movw	r0, #3032	; 0xbd8
    ed5e:	f3af 8000 	nop.w
    ed62:	2c00      	cmp	r4, #0
    ed64:	d042      	beq.n	edec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    ed66:	2000      	movs	r0, #0
    ed68:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    ed6c:	b125      	cbz	r5, ed78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ed6e:	2100      	movs	r1, #0
    ed70:	f640 30dd 	movw	r0, #3037	; 0xbdd
    ed74:	f3af 8000 	nop.w
    ed78:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    ed7c:	2001      	movs	r0, #1
    ed7e:	ea20 090b 	bic.w	r9, r0, fp
    ed82:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ed86:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ed8a:	2240      	movs	r2, #64	; 0x40
    ed8c:	f00a fc0f 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed90:	b125      	cbz	r5, ed9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    ed92:	2100      	movs	r1, #0
    ed94:	f240 50cd 	movw	r0, #1485	; 0x5cd
    ed98:	f3af 8000 	nop.w
    ed9c:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    eda0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    eda4:	6a00      	ldr	r0, [r0, #32]
    eda6:	f8ca 0020 	str.w	r0, [sl, #32]
    edaa:	b125      	cbz	r5, edb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    edac:	2100      	movs	r1, #0
    edae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    edb2:	f3af 8000 	nop.w
    edb6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    edba:	f88d 0000 	strb.w	r0, [sp]
    edbe:	f89d 0000 	ldrb.w	r0, [sp]
    edc2:	b1d0      	cbz	r0, edfa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    edc4:	2d00      	cmp	r5, #0
    edc6:	bf1c      	itt	ne
    edc8:	2100      	movne	r1, #0
    edca:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    edce:	d0c2      	beq.n	ed56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    edd0:	f3af 8000 	nop.w
    edd4:	e7bf      	b.n	ed56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    edd6:	f640 31b8 	movw	r1, #3000	; 0xbb8
    edda:	2070      	movs	r0, #112	; 0x70
    eddc:	f001 fae8 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ede0:	464a      	mov	r2, r9
    ede2:	4641      	mov	r1, r8
    ede4:	2001      	movs	r0, #1
    ede6:	f7fe ff79 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    edea:	e7a9      	b.n	ed40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    edec:	4842      	ldr	r0, [pc, #264]	; (eef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    edee:	2800      	cmp	r0, #0
    edf0:	bf18      	it	ne
    edf2:	f3af 8000 	nopne.w
    edf6:	b662      	cpsie	i
    edf8:	e7b5      	b.n	ed66 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    edfa:	b125      	cbz	r5, ee06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    edfc:	2100      	movs	r1, #0
    edfe:	f640 30e7 	movw	r0, #3047	; 0xbe7
    ee02:	f3af 8000 	nop.w
    ee06:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    ee0a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ee0e:	4614      	mov	r4, r2
    ee10:	f04f 0b20 	mov.w	fp, #32
    ee14:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ee18:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ee1c:	e003      	b.n	ee26 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    ee1e:	46a3      	mov	fp, r4
    ee20:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    ee24:	785c      	ldrb	r4, [r3, #1]
    ee26:	4544      	cmp	r4, r8
    ee28:	d002      	beq.n	ee30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    ee2a:	2c20      	cmp	r4, #32
    ee2c:	d02b      	beq.n	ee86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    ee2e:	e7f6      	b.n	ee1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    ee30:	2c20      	cmp	r4, #32
    ee32:	d028      	beq.n	ee86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    ee34:	42a2      	cmp	r2, r4
    ee36:	d104      	bne.n	ee42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    ee38:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    ee3c:	7840      	ldrb	r0, [r0, #1]
    ee3e:	7008      	strb	r0, [r1, #0]
    ee40:	e005      	b.n	ee4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    ee42:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    ee46:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    ee4a:	7849      	ldrb	r1, [r1, #1]
    ee4c:	7041      	strb	r1, [r0, #1]
    ee4e:	f1ba 0f00 	cmp.w	sl, #0
    ee52:	d011      	beq.n	ee78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    ee54:	b125      	cbz	r5, ee60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    ee56:	2100      	movs	r1, #0
    ee58:	f240 502f 	movw	r0, #1327	; 0x52f
    ee5c:	f3af 8000 	nop.w
    ee60:	f89a 0000 	ldrb.w	r0, [sl]
    ee64:	42a0      	cmp	r0, r4
    ee66:	d107      	bne.n	ee78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    ee68:	b125      	cbz	r5, ee74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    ee6a:	2100      	movs	r1, #0
    ee6c:	f240 5032 	movw	r0, #1330	; 0x532
    ee70:	f3af 8000 	nop.w
    ee74:	f88a b000 	strb.w	fp, [sl]
    ee78:	b15d      	cbz	r5, ee92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    ee7a:	2100      	movs	r1, #0
    ee7c:	f240 5037 	movw	r0, #1335	; 0x537
    ee80:	f3af 8000 	nop.w
    ee84:	e000      	b.n	ee88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    ee86:	b125      	cbz	r5, ee92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    ee88:	2100      	movs	r1, #0
    ee8a:	f640 30eb 	movw	r0, #3051	; 0xbeb
    ee8e:	f3af 8000 	nop.w
    ee92:	481a      	ldr	r0, [pc, #104]	; (eefc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    ee94:	2800      	cmp	r0, #0
    ee96:	bf18      	it	ne
    ee98:	f3af 8000 	nopne.w
    ee9c:	f3ef 8410 	mrs	r4, PRIMASK
    eea0:	b672      	cpsid	i
    eea2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    eea6:	f88d 0000 	strb.w	r0, [sp]
    eeaa:	f89d 0000 	ldrb.w	r0, [sp]
    eeae:	b138      	cbz	r0, eec0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    eeb0:	2d00      	cmp	r5, #0
    eeb2:	bf1c      	itt	ne
    eeb4:	2100      	movne	r1, #0
    eeb6:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    eeba:	f43f af4c 	beq.w	ed56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    eebe:	e787      	b.n	edd0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    eec0:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    eec4:	2001      	movs	r0, #1
    eec6:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    eeca:	b154      	cbz	r4, eee2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    eecc:	2d00      	cmp	r5, #0
    eece:	bf08      	it	eq
    eed0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eed4:	2100      	movs	r1, #0
    eed6:	f640 30fe 	movw	r0, #3070	; 0xbfe
    eeda:	f3af 8000 	nop.w
    eede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eee2:	4805      	ldr	r0, [pc, #20]	; (eef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    eee4:	2800      	cmp	r0, #0
    eee6:	bf18      	it	ne
    eee8:	f3af 8000 	nopne.w
    eeec:	b662      	cpsie	i
    eeee:	e7ed      	b.n	eecc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    eef0:	2000119c 	.word	0x2000119c
	...

0000ef00 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ef00:	b570      	push	{r4, r5, r6, lr}
    ef02:	460d      	mov	r5, r1
    ef04:	4606      	mov	r6, r0
    ef06:	f001 f9c9 	bl	1029c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ef0a:	480f      	ldr	r0, [pc, #60]	; (ef48 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ef0c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    ef10:	2400      	movs	r4, #0
    ef12:	3880      	subs	r0, #128	; 0x80
    ef14:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ef18:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ef1c:	b129      	cbz	r1, ef2a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ef1e:	1c61      	adds	r1, r4, #1
    ef20:	b2cc      	uxtb	r4, r1
    ef22:	2c20      	cmp	r4, #32
    ef24:	d3f8      	bcc.n	ef18 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ef26:	2020      	movs	r0, #32
    ef28:	bd70      	pop	{r4, r5, r6, pc}
    ef2a:	4808      	ldr	r0, [pc, #32]	; (ef4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ef2c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    ef30:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    ef34:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    ef38:	4621      	mov	r1, r4
    ef3a:	6045      	str	r5, [r0, #4]
    ef3c:	2001      	movs	r0, #1
    ef3e:	f7fe fecd 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    ef42:	4620      	mov	r0, r4
    ef44:	bd70      	pop	{r4, r5, r6, pc}
    ef46:	0000      	.short	0x0000
    ef48:	2000119c 	.word	0x2000119c
    ef4c:	20000e1c 	.word	0x20000e1c

0000ef50 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ef50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef54:	b083      	sub	sp, #12
    ef56:	f000 fb2b 	bl	f5b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ef5a:	4605      	mov	r5, r0
    ef5c:	f000 fdf4 	bl	fb48 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ef60:	4c67      	ldr	r4, [pc, #412]	; (f100 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    ef62:	68a0      	ldr	r0, [r4, #8]
    ef64:	f1b0 3fff 	cmp.w	r0, #4294967295
    ef68:	bf1c      	itt	ne
    ef6a:	f04f 30ff 	movne.w	r0, #4294967295
    ef6e:	60a0      	strne	r0, [r4, #8]
    ef70:	7fa0      	ldrb	r0, [r4, #30]
    ef72:	f8df b190 	ldr.w	fp, [pc, #400]	; f104 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    ef76:	b9a8      	cbnz	r0, efa4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    ef78:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    ef7c:	1a08      	subs	r0, r1, r0
    ef7e:	0200      	lsls	r0, r0, #8
    ef80:	17c1      	asrs	r1, r0, #31
    ef82:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    ef86:	1200      	asrs	r0, r0, #8
    ef88:	f44f 710c 	mov.w	r1, #560	; 0x230
    ef8c:	f00a f9ce 	bl	1932c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ef90:	6921      	ldr	r1, [r4, #16]
    ef92:	4408      	add	r0, r1
    ef94:	1a28      	subs	r0, r5, r0
    ef96:	0200      	lsls	r0, r0, #8
    ef98:	17c1      	asrs	r1, r0, #31
    ef9a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    ef9e:	1200      	asrs	r0, r0, #8
    efa0:	0fc0      	lsrs	r0, r0, #31
    efa2:	d013      	beq.n	efcc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    efa4:	7e60      	ldrb	r0, [r4, #25]
    efa6:	b328      	cbz	r0, eff4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    efa8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    efac:	f88d 0000 	strb.w	r0, [sp]
    efb0:	f89d 0000 	ldrb.w	r0, [sp]
    efb4:	b1f0      	cbz	r0, eff4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    efb6:	f000 fc09 	bl	f7cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    efba:	bf00      	nop
    efbc:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    efc0:	b1f0      	cbz	r0, f000 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    efc2:	f240 4147 	movw	r1, #1095	; 0x447
    efc6:	2070      	movs	r0, #112	; 0x70
    efc8:	f001 f9f2 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    efcc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    efd0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    efd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    efd8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    efdc:	6840      	ldr	r0, [r0, #4]
    efde:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    efe2:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    efe6:	2108      	movs	r1, #8
    efe8:	4790      	blx	r2
    efea:	f44f 6186 	mov.w	r1, #1072	; 0x430
    efee:	2070      	movs	r0, #112	; 0x70
    eff0:	f001 f9de 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    eff4:	1ce8      	adds	r0, r5, #3
    eff6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    effa:	f000 fadf 	bl	f5bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    effe:	e7dd      	b.n	efbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    f000:	f04f 0a01 	mov.w	sl, #1
    f004:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    f008:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    f00c:	2820      	cmp	r0, #32
    f00e:	d024      	beq.n	f05a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    f010:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    f014:	2020      	movs	r0, #32
    f016:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    f01a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    f01e:	2600      	movs	r6, #0
    f020:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    f024:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    f028:	4837      	ldr	r0, [pc, #220]	; (f108 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    f02a:	6026      	str	r6, [r4, #0]
    f02c:	7800      	ldrb	r0, [r0, #0]
    f02e:	2802      	cmp	r0, #2
    f030:	bf16      	itet	ne
    f032:	2803      	cmpne	r0, #3
    f034:	2001      	moveq	r0, #1
    f036:	2000      	movne	r0, #0
    f038:	7720      	strb	r0, [r4, #28]
    f03a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    f03e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    f042:	f899 0020 	ldrb.w	r0, [r9, #32]
    f046:	2820      	cmp	r0, #32
    f048:	d031      	beq.n	f0ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    f04a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f04e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    f052:	7d81      	ldrb	r1, [r0, #22]
    f054:	2901      	cmp	r1, #1
    f056:	d005      	beq.n	f064 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    f058:	e029      	b.n	f0ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    f05a:	f240 414a 	movw	r1, #1098	; 0x44a
    f05e:	2070      	movs	r0, #112	; 0x70
    f060:	f001 f9a6 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f064:	46ab      	mov	fp, r5
    f066:	f100 0508 	add.w	r5, r0, #8
    f06a:	8a40      	ldrh	r0, [r0, #18]
    f06c:	aa01      	add	r2, sp, #4
    f06e:	4669      	mov	r1, sp
    f070:	f000 f940 	bl	f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    f074:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    f078:	2820      	cmp	r0, #32
    f07a:	d004      	beq.n	f086 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    f07c:	6920      	ldr	r0, [r4, #16]
    f07e:	1d40      	adds	r0, r0, #5
    f080:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f084:	e00b      	b.n	f09e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    f086:	8968      	ldrh	r0, [r5, #10]
    f088:	f10b 0b09 	add.w	fp, fp, #9
    f08c:	b128      	cbz	r0, f09a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    f08e:	f001 f917 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    f092:	2800      	cmp	r0, #0
    f094:	bf08      	it	eq
    f096:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    f09a:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    f09e:	e9d5 2100 	ldrd	r2, r1, [r5]
    f0a2:	1a89      	subs	r1, r1, r2
    f0a4:	6028      	str	r0, [r5, #0]
    f0a6:	4408      	add	r0, r1
    f0a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f0ac:	6068      	str	r0, [r5, #4]
    f0ae:	4639      	mov	r1, r7
    f0b0:	2001      	movs	r0, #1
    f0b2:	f7fe fe43 	bl	dd3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    f0b6:	2800      	cmp	r0, #0
    f0b8:	d0f9      	beq.n	f0ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    f0ba:	4814      	ldr	r0, [pc, #80]	; (f10c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    f0bc:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    f0c0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    f0c4:	2802      	cmp	r0, #2
    f0c6:	d104      	bne.n	f0d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    f0c8:	463a      	mov	r2, r7
    f0ca:	4641      	mov	r1, r8
    f0cc:	2006      	movs	r0, #6
    f0ce:	f7fe fe05 	bl	dcdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    f0d2:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    f0d6:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    f0da:	2820      	cmp	r0, #32
    f0dc:	d003      	beq.n	f0e6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    f0de:	480c      	ldr	r0, [pc, #48]	; (f110 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    f0e0:	7840      	ldrb	r0, [r0, #1]
    f0e2:	f001 fa35 	bl	10550 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    f0e6:	7f20      	ldrb	r0, [r4, #28]
    f0e8:	2800      	cmp	r0, #0
    f0ea:	bf04      	itt	eq
    f0ec:	b003      	addeq	sp, #12
    f0ee:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0f2:	f000 fd73 	bl	fbdc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    f0f6:	7726      	strb	r6, [r4, #28]
    f0f8:	7766      	strb	r6, [r4, #29]
    f0fa:	b003      	add	sp, #12
    f0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f100:	2000119c 	.word	0x2000119c
    f104:	20000e1c 	.word	0x20000e1c
    f108:	20000016 	.word	0x20000016
    f10c:	2000111c 	.word	0x2000111c
    f110:	20000014 	.word	0x20000014

0000f114 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    f114:	b510      	push	{r4, lr}
    f116:	4c32      	ldr	r4, [pc, #200]	; (f1e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    f118:	b082      	sub	sp, #8
    f11a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    f11e:	2920      	cmp	r1, #32
    f120:	d008      	beq.n	f134 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    f122:	68a1      	ldr	r1, [r4, #8]
    f124:	f1b1 3fff 	cmp.w	r1, #4294967295
    f128:	d009      	beq.n	f13e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    f12a:	f640 21e9 	movw	r1, #2793	; 0xae9
    f12e:	2070      	movs	r0, #112	; 0x70
    f130:	f001 f93e 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f134:	f640 21e8 	movw	r1, #2792	; 0xae8
    f138:	2070      	movs	r0, #112	; 0x70
    f13a:	f001 f939 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f13e:	6862      	ldr	r2, [r4, #4]
    f140:	4601      	mov	r1, r0
    f142:	4b28      	ldr	r3, [pc, #160]	; (f1e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    f144:	1850      	adds	r0, r2, r1
    f146:	429a      	cmp	r2, r3
    f148:	d904      	bls.n	f154 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    f14a:	f240 6109 	movw	r1, #1545	; 0x609
    f14e:	2070      	movs	r0, #112	; 0x70
    f150:	f001 f92e 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f154:	4a24      	ldr	r2, [pc, #144]	; (f1e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    f156:	4291      	cmp	r1, r2
    f158:	dd04      	ble.n	f164 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    f15a:	f240 610a 	movw	r1, #1546	; 0x60a
    f15e:	2070      	movs	r0, #112	; 0x70
    f160:	f001 f926 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f164:	4a21      	ldr	r2, [pc, #132]	; (f1ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    f166:	4291      	cmp	r1, r2
    f168:	da04      	bge.n	f174 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    f16a:	f240 610b 	movw	r1, #1547	; 0x60b
    f16e:	2070      	movs	r0, #112	; 0x70
    f170:	f001 f91e 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f174:	491e      	ldr	r1, [pc, #120]	; (f1f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    f176:	4281      	cmp	r1, r0
    f178:	bfdc      	itt	le
    f17a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    f17e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    f182:	dd05      	ble.n	f190 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    f184:	2800      	cmp	r0, #0
    f186:	bfbc      	itt	lt
    f188:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    f18c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    f190:	aa01      	add	r2, sp, #4
    f192:	4669      	mov	r1, sp
    f194:	f000 f8ae 	bl	f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    f198:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f19c:	280f      	cmp	r0, #15
    f19e:	bf8c      	ite	hi
    f1a0:	2001      	movhi	r0, #1
    f1a2:	2000      	movls	r0, #0
    f1a4:	9900      	ldr	r1, [sp, #0]
    f1a6:	4408      	add	r0, r1
    f1a8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    f1ac:	60a1      	str	r1, [r4, #8]
    f1ae:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    f1b2:	f88d 0000 	strb.w	r0, [sp]
    f1b6:	f89d 0000 	ldrb.w	r0, [sp]
    f1ba:	2800      	cmp	r0, #0
    f1bc:	bf04      	itt	eq
    f1be:	b002      	addeq	sp, #8
    f1c0:	bd10      	popeq	{r4, pc}
    f1c2:	2301      	movs	r3, #1
    f1c4:	2203      	movs	r2, #3
    f1c6:	2005      	movs	r0, #5
    f1c8:	f000 fb7c 	bl	f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    f1cc:	2800      	cmp	r0, #0
    f1ce:	bf1c      	itt	ne
    f1d0:	b002      	addne	sp, #8
    f1d2:	bd10      	popne	{r4, pc}
    f1d4:	f640 21f1 	movw	r1, #2801	; 0xaf1
    f1d8:	2070      	movs	r0, #112	; 0x70
    f1da:	f001 f8e9 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f1de:	0000      	.short	0x0000
    f1e0:	2000119c 	.word	0x2000119c
    f1e4:	1e847fff 	.word	0x1e847fff
    f1e8:	07a12000 	.word	0x07a12000
    f1ec:	f85ee000 	.word	0xf85ee000
    f1f0:	1e848000 	.word	0x1e848000

0000f1f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    f1f4:	b570      	push	{r4, r5, r6, lr}
    f1f6:	4c1e      	ldr	r4, [pc, #120]	; (f270 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    f1f8:	2120      	movs	r1, #32
    f1fa:	f884 1020 	strb.w	r1, [r4, #32]
    f1fe:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    f202:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    f206:	2000      	movs	r0, #0
    f208:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    f20c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    f210:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    f214:	1e42      	subs	r2, r0, #1
    f216:	60a2      	str	r2, [r4, #8]
    f218:	6020      	str	r0, [r4, #0]
    f21a:	77a0      	strb	r0, [r4, #30]
    f21c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    f220:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    f224:	7720      	strb	r0, [r4, #28]
    f226:	7760      	strb	r0, [r4, #29]
    f228:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    f22c:	4911      	ldr	r1, [pc, #68]	; (f274 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    f22e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    f232:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    f236:	7008      	strb	r0, [r1, #0]
    f238:	7048      	strb	r0, [r1, #1]
    f23a:	8048      	strh	r0, [r1, #2]
    f23c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    f240:	2210      	movs	r2, #16
    f242:	7088      	strb	r0, [r1, #2]
    f244:	f801 0f04 	strb.w	r0, [r1, #4]!
    f248:	1e52      	subs	r2, r2, #1
    f24a:	d1fa      	bne.n	f242 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    f24c:	4d0a      	ldr	r5, [pc, #40]	; (f278 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    f24e:	2601      	movs	r6, #1
    f250:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    f254:	20ff      	movs	r0, #255	; 0xff
    f256:	7028      	strb	r0, [r5, #0]
    f258:	4808      	ldr	r0, [pc, #32]	; (f27c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    f25a:	f001 f95b 	bl	10514 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    f25e:	7068      	strb	r0, [r5, #1]
    f260:	f001 f9b6 	bl	105d0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    f264:	60a8      	str	r0, [r5, #8]
    f266:	f000 fd01 	bl	fc6c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    f26a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    f26e:	bd70      	pop	{r4, r5, r6, pc}
    f270:	2000119c 	.word	0x2000119c
    f274:	20000016 	.word	0x20000016
    f278:	20000014 	.word	0x20000014
    f27c:	0000db99 	.word	0x0000db99

0000f280 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    f280:	b570      	push	{r4, r5, r6, lr}
    f282:	4605      	mov	r5, r0
    f284:	2001      	movs	r0, #1
    f286:	fa00 f405 	lsl.w	r4, r0, r5
    f28a:	460e      	mov	r6, r1
    f28c:	2a00      	cmp	r2, #0
    f28e:	bf08      	it	eq
    f290:	4808      	ldreq	r0, [pc, #32]	; (f2b4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    f292:	d00c      	beq.n	f2ae <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    f294:	2000      	movs	r0, #0
    f296:	f000 fccf 	bl	fc38 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    f29a:	00e9      	lsls	r1, r5, #3
    f29c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    f2a0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    f2a4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    f2a8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    f2ac:	4802      	ldr	r0, [pc, #8]	; (f2b8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    f2ae:	6004      	str	r4, [r0, #0]
    f2b0:	bd70      	pop	{r4, r5, r6, pc}
    f2b2:	0000      	.short	0x0000
    f2b4:	4001f508 	.word	0x4001f508
    f2b8:	4001f504 	.word	0x4001f504

0000f2bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    f2bc:	0b41      	lsrs	r1, r0, #13
    f2be:	f248 6237 	movw	r2, #34359	; 0x8637
    f2c2:	4351      	muls	r1, r2
    f2c4:	0c0a      	lsrs	r2, r1, #16
    f2c6:	4b09      	ldr	r3, [pc, #36]	; (f2ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    f2c8:	0251      	lsls	r1, r2, #9
    f2ca:	fb02 0203 	mla	r2, r2, r3, r0
    f2ce:	4808      	ldr	r0, [pc, #32]	; (f2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    f2d0:	4350      	muls	r0, r2
    f2d2:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    f2d6:	306e      	adds	r0, #110	; 0x6e
    f2d8:	0d40      	lsrs	r0, r0, #21
    f2da:	425b      	negs	r3, r3
    f2dc:	fb10 f303 	smulbb	r3, r0, r3
    f2e0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    f2e4:	bf88      	it	hi
    f2e6:	1c49      	addhi	r1, r1, #1
    f2e8:	4408      	add	r0, r1
    f2ea:	4770      	bx	lr
    f2ec:	ffffc2f7 	.word	0xffffc2f7
    f2f0:	00010c6f 	.word	0x00010c6f

0000f2f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    f2f4:	0b43      	lsrs	r3, r0, #13
    f2f6:	f248 6c37 	movw	ip, #34359	; 0x8637
    f2fa:	fb03 f30c 	mul.w	r3, r3, ip
    f2fe:	b430      	push	{r4, r5}
    f300:	0c1b      	lsrs	r3, r3, #16
    f302:	f8df c044 	ldr.w	ip, [pc, #68]	; f348 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    f306:	025c      	lsls	r4, r3, #9
    f308:	fb03 030c 	mla	r3, r3, ip, r0
    f30c:	480f      	ldr	r0, [pc, #60]	; (f34c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    f30e:	4358      	muls	r0, r3
    f310:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    f314:	eb04 000c 	add.w	r0, r4, ip
    f318:	f643 5409 	movw	r4, #15625	; 0x3d09
    f31c:	fb1c f404 	smulbb	r4, ip, r4
    f320:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    f324:	f643 5508 	movw	r5, #15624	; 0x3d08
    f328:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    f32c:	442c      	add	r4, r5
    f32e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    f332:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    f336:	bf84      	itt	hi
    f338:	f04f 0c00 	movhi.w	ip, #0
    f33c:	1c40      	addhi	r0, r0, #1
    f33e:	6008      	str	r0, [r1, #0]
    f340:	f882 c000 	strb.w	ip, [r2]
    f344:	bc30      	pop	{r4, r5}
    f346:	4770      	bx	lr
    f348:	ffffc2f7 	.word	0xffffc2f7
    f34c:	00010c6f 	.word	0x00010c6f

0000f350 <MPSL_IRQ_RTC0_Handler>:
    f350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f354:	4c36      	ldr	r4, [pc, #216]	; (f430 <MPSL_IRQ_RTC0_Handler+0xe0>)
    f356:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f35a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    f35e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    f362:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    f366:	f04f 0500 	mov.w	r5, #0
    f36a:	d019      	beq.n	f3a0 <MPSL_IRQ_RTC0_Handler+0x50>
    f36c:	4831      	ldr	r0, [pc, #196]	; (f434 <MPSL_IRQ_RTC0_Handler+0xe4>)
    f36e:	6800      	ldr	r0, [r0, #0]
    f370:	b1b0      	cbz	r0, f3a0 <MPSL_IRQ_RTC0_Handler+0x50>
    f372:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    f376:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f37a:	482f      	ldr	r0, [pc, #188]	; (f438 <MPSL_IRQ_RTC0_Handler+0xe8>)
    f37c:	6800      	ldr	r0, [r0, #0]
    f37e:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f382:	1a40      	subs	r0, r0, r1
    f384:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f388:	2802      	cmp	r0, #2
    f38a:	d302      	bcc.n	f392 <MPSL_IRQ_RTC0_Handler+0x42>
    f38c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f390:	d306      	bcc.n	f3a0 <MPSL_IRQ_RTC0_Handler+0x50>
    f392:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    f396:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f39a:	2004      	movs	r0, #4
    f39c:	f7fe ff50 	bl	e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f3a0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f3a4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    f3a8:	d019      	beq.n	f3de <MPSL_IRQ_RTC0_Handler+0x8e>
    f3aa:	4824      	ldr	r0, [pc, #144]	; (f43c <MPSL_IRQ_RTC0_Handler+0xec>)
    f3ac:	6800      	ldr	r0, [r0, #0]
    f3ae:	b1b0      	cbz	r0, f3de <MPSL_IRQ_RTC0_Handler+0x8e>
    f3b0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    f3b4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f3b8:	4821      	ldr	r0, [pc, #132]	; (f440 <MPSL_IRQ_RTC0_Handler+0xf0>)
    f3ba:	6800      	ldr	r0, [r0, #0]
    f3bc:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f3c0:	1a40      	subs	r0, r0, r1
    f3c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f3c6:	2802      	cmp	r0, #2
    f3c8:	d302      	bcc.n	f3d0 <MPSL_IRQ_RTC0_Handler+0x80>
    f3ca:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f3ce:	d306      	bcc.n	f3de <MPSL_IRQ_RTC0_Handler+0x8e>
    f3d0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    f3d4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f3d8:	2005      	movs	r0, #5
    f3da:	f7fe ff31 	bl	e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f3de:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f3e2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    f3e6:	bf08      	it	eq
    f3e8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3ec:	4815      	ldr	r0, [pc, #84]	; (f444 <MPSL_IRQ_RTC0_Handler+0xf4>)
    f3ee:	6800      	ldr	r0, [r0, #0]
    f3f0:	2800      	cmp	r0, #0
    f3f2:	bf08      	it	eq
    f3f4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3f8:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    f3fc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f400:	4811      	ldr	r0, [pc, #68]	; (f448 <MPSL_IRQ_RTC0_Handler+0xf8>)
    f402:	6800      	ldr	r0, [r0, #0]
    f404:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f408:	1a40      	subs	r0, r0, r1
    f40a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f40e:	2802      	cmp	r0, #2
    f410:	d304      	bcc.n	f41c <MPSL_IRQ_RTC0_Handler+0xcc>
    f412:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f416:	bf38      	it	cc
    f418:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    f41c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    f420:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f428:	2006      	movs	r0, #6
    f42a:	f7fe bf09 	b.w	e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f42e:	0000      	.short	0x0000
    f430:	4000b000 	.word	0x4000b000
    f434:	4000b140 	.word	0x4000b140
    f438:	4000b540 	.word	0x4000b540
    f43c:	4000b144 	.word	0x4000b144
    f440:	4000b544 	.word	0x4000b544
    f444:	4000b148 	.word	0x4000b148
    f448:	4000b548 	.word	0x4000b548

0000f44c <MPSL_IRQ_TIMER0_Handler>:
    f44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f450:	4d38      	ldr	r5, [pc, #224]	; (f534 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    f452:	7828      	ldrb	r0, [r5, #0]
    f454:	2804      	cmp	r0, #4
    f456:	d068      	beq.n	f52a <MPSL_IRQ_TIMER0_Handler+0xde>
    f458:	1ce8      	adds	r0, r5, #3
    f45a:	2201      	movs	r2, #1
    f45c:	7801      	ldrb	r1, [r0, #0]
    f45e:	b159      	cbz	r1, f478 <MPSL_IRQ_TIMER0_Handler+0x2c>
    f460:	2901      	cmp	r1, #1
    f462:	bf08      	it	eq
    f464:	706a      	strbeq	r2, [r5, #1]
    f466:	d002      	beq.n	f46e <MPSL_IRQ_TIMER0_Handler+0x22>
    f468:	7869      	ldrb	r1, [r5, #1]
    f46a:	2900      	cmp	r1, #0
    f46c:	d058      	beq.n	f520 <MPSL_IRQ_TIMER0_Handler+0xd4>
    f46e:	2102      	movs	r1, #2
    f470:	7001      	strb	r1, [r0, #0]
    f472:	7840      	ldrb	r0, [r0, #1]
    f474:	f000 fafa 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f478:	4c2f      	ldr	r4, [pc, #188]	; (f538 <MPSL_IRQ_TIMER0_Handler+0xec>)
    f47a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f47e:	f04f 0800 	mov.w	r8, #0
    f482:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    f486:	f44f 7780 	mov.w	r7, #256	; 0x100
    f48a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    f48e:	d00a      	beq.n	f4a6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    f490:	482a      	ldr	r0, [pc, #168]	; (f53c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    f492:	6800      	ldr	r0, [r0, #0]
    f494:	b138      	cbz	r0, f4a6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    f496:	2003      	movs	r0, #3
    f498:	f000 fae8 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f49c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f4a0:	2003      	movs	r0, #3
    f4a2:	f7fe fecd 	bl	e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f4a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f4aa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    f4ae:	d00a      	beq.n	f4c6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    f4b0:	4823      	ldr	r0, [pc, #140]	; (f540 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    f4b2:	6800      	ldr	r0, [r0, #0]
    f4b4:	b138      	cbz	r0, f4c6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    f4b6:	2002      	movs	r0, #2
    f4b8:	f000 fad8 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f4bc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f4c0:	2002      	movs	r0, #2
    f4c2:	f7fe febd 	bl	e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f4c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f4ca:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    f4ce:	d00a      	beq.n	f4e6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    f4d0:	481c      	ldr	r0, [pc, #112]	; (f544 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    f4d2:	6800      	ldr	r0, [r0, #0]
    f4d4:	b138      	cbz	r0, f4e6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    f4d6:	2001      	movs	r0, #1
    f4d8:	f000 fac8 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f4dc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f4e0:	2001      	movs	r0, #1
    f4e2:	f7fe fead 	bl	e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f4e6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f4ea:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    f4ee:	bf08      	it	eq
    f4f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4f4:	4814      	ldr	r0, [pc, #80]	; (f548 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    f4f6:	6800      	ldr	r0, [r0, #0]
    f4f8:	2800      	cmp	r0, #0
    f4fa:	bf08      	it	eq
    f4fc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f500:	2000      	movs	r0, #0
    f502:	f000 fab3 	bl	fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f506:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f50a:	2004      	movs	r0, #4
    f50c:	7028      	strb	r0, [r5, #0]
    f50e:	f8c5 8008 	str.w	r8, [r5, #8]
    f512:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    f516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f51a:	2000      	movs	r0, #0
    f51c:	f7fe be90 	b.w	e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f520:	f240 316a 	movw	r1, #874	; 0x36a
    f524:	206c      	movs	r0, #108	; 0x6c
    f526:	f000 ff43 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f52a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f52e:	2007      	movs	r0, #7
    f530:	f7fe be86 	b.w	e240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f534:	20000020 	.word	0x20000020
    f538:	40008000 	.word	0x40008000
    f53c:	4000814c 	.word	0x4000814c
    f540:	40008148 	.word	0x40008148
    f544:	40008144 	.word	0x40008144
    f548:	40008140 	.word	0x40008140
    f54c:	2201      	movs	r2, #1
    f54e:	0211      	lsls	r1, r2, #8
    f550:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f554:	2000      	movs	r0, #0
    f556:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    f55a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    f55e:	f3bf 8f4f 	dsb	sy
    f562:	f3bf 8f6f 	isb	sy
    f566:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    f56a:	490e      	ldr	r1, [pc, #56]	; (f5a4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    f56c:	f841 2f04 	str.w	r2, [r1, #4]!
    f570:	1e43      	subs	r3, r0, #1
    f572:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    f576:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    f57a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    f57e:	4b0a      	ldr	r3, [pc, #40]	; (f5a8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    f580:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f584:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    f588:	1d1b      	adds	r3, r3, #4
    f58a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f58e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    f592:	1d1b      	adds	r3, r3, #4
    f594:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f598:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    f59c:	60ca      	str	r2, [r1, #12]
    f59e:	4903      	ldr	r1, [pc, #12]	; (f5ac <MPSL_IRQ_TIMER0_Handler+0x160>)
    f5a0:	7048      	strb	r0, [r1, #1]
    f5a2:	4770      	bx	lr
    f5a4:	40008000 	.word	0x40008000
    f5a8:	40008004 	.word	0x40008004
    f5ac:	20000020 	.word	0x20000020

0000f5b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    f5b0:	4801      	ldr	r0, [pc, #4]	; (f5b8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    f5b2:	6800      	ldr	r0, [r0, #0]
    f5b4:	4770      	bx	lr
    f5b6:	0000      	.short	0x0000
    f5b8:	4000b504 	.word	0x4000b504

0000f5bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    f5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5c0:	4e47      	ldr	r6, [pc, #284]	; (f6e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    f5c2:	4605      	mov	r5, r0
    f5c4:	1ef7      	subs	r7, r6, #3
    f5c6:	7832      	ldrb	r2, [r6, #0]
    f5c8:	68f9      	ldr	r1, [r7, #12]
    f5ca:	2a01      	cmp	r2, #1
    f5cc:	bf04      	itt	eq
    f5ce:	42a9      	cmpeq	r1, r5
    f5d0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f5d4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    f5d8:	4b42      	ldr	r3, [pc, #264]	; (f6e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    f5da:	6018      	str	r0, [r3, #0]
    f5dc:	4842      	ldr	r0, [pc, #264]	; (f6e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    f5de:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    f5e2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    f5e6:	f100 0304 	add.w	r3, r0, #4
    f5ea:	f04f 0400 	mov.w	r4, #0
    f5ee:	2a00      	cmp	r2, #0
    f5f0:	d061      	beq.n	f6b6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    f5f2:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    f5f6:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    f5fa:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    f5fe:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    f602:	4b3a      	ldr	r3, [pc, #232]	; (f6ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    f604:	681b      	ldr	r3, [r3, #0]
    f606:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    f60a:	f04f 0801 	mov.w	r8, #1
    f60e:	2b00      	cmp	r3, #0
    f610:	bf04      	itt	eq
    f612:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    f616:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    f61a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f61e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    f622:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    f626:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    f62a:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    f62e:	1aeb      	subs	r3, r5, r3
    f630:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f634:	2b02      	cmp	r3, #2
    f636:	d34b      	bcc.n	f6d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    f638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    f63c:	d248      	bcs.n	f6d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    f63e:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    f642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f646:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    f64a:	b132      	cbz	r2, f65a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    f64c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    f650:	1a8a      	subs	r2, r1, r2
    f652:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f656:	2a02      	cmp	r2, #2
    f658:	d3f8      	bcc.n	f64c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    f65a:	f8c7 8008 	str.w	r8, [r7, #8]
    f65e:	703c      	strb	r4, [r7, #0]
    f660:	f7ff ff74 	bl	f54c <MPSL_IRQ_TIMER0_Handler+0x100>
    f664:	4822      	ldr	r0, [pc, #136]	; (f6f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    f666:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    f66a:	f364 0101 	bfi	r1, r4, #0, #2
    f66e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    f672:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    f676:	2102      	movs	r1, #2
    f678:	f361 0201 	bfi	r2, r1, #0, #2
    f67c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    f680:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    f684:	2104      	movs	r1, #4
    f686:	f361 0203 	bfi	r2, r1, #0, #4
    f68a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    f68e:	f8c0 800c 	str.w	r8, [r0, #12]
    f692:	68b9      	ldr	r1, [r7, #8]
    f694:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    f698:	1580      	asrs	r0, r0, #22
    f69a:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    f69e:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    f6a2:	4914      	ldr	r1, [pc, #80]	; (f6f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    f6a4:	05c0      	lsls	r0, r0, #23
    f6a6:	6008      	str	r0, [r1, #0]
    f6a8:	2004      	movs	r0, #4
    f6aa:	60fd      	str	r5, [r7, #12]
    f6ac:	7070      	strb	r0, [r6, #1]
    f6ae:	f886 8000 	strb.w	r8, [r6]
    f6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f6b6:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    f6ba:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    f6be:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    f6c2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    f6c6:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    f6ca:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    f6ce:	e798      	b.n	f602 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    f6d0:	2100      	movs	r1, #0
    f6d2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    f6d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    f6da:	206c      	movs	r0, #108	; 0x6c
    f6dc:	f000 fe68 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f6e0:	20000023 	.word	0x20000023
    f6e4:	4001f508 	.word	0x4001f508
    f6e8:	4000b000 	.word	0x4000b000
    f6ec:	4000b148 	.word	0x4000b148
    f6f0:	40008000 	.word	0x40008000
    f6f4:	4001f504 	.word	0x4001f504

0000f6f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    f6f8:	b570      	push	{r4, r5, r6, lr}
    f6fa:	4c2c      	ldr	r4, [pc, #176]	; (f7ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    f6fc:	68e2      	ldr	r2, [r4, #12]
    f6fe:	4282      	cmp	r2, r0
    f700:	bf14      	ite	ne
    f702:	2101      	movne	r1, #1
    f704:	2100      	moveq	r1, #0
    f706:	f8df c0a8 	ldr.w	ip, [pc, #168]	; f7b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    f70a:	f89c 5000 	ldrb.w	r5, [ip]
    f70e:	2d02      	cmp	r5, #2
    f710:	d002      	beq.n	f718 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    f712:	2900      	cmp	r1, #0
    f714:	d037      	beq.n	f786 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    f716:	e002      	b.n	f71e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    f718:	2900      	cmp	r1, #0
    f71a:	bf08      	it	eq
    f71c:	bd70      	popeq	{r4, r5, r6, pc}
    f71e:	7861      	ldrb	r1, [r4, #1]
    f720:	b381      	cbz	r1, f784 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    f722:	4b24      	ldr	r3, [pc, #144]	; (f7b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    f724:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f728:	6019      	str	r1, [r3, #0]
    f72a:	138b      	asrs	r3, r1, #14
    f72c:	4922      	ldr	r1, [pc, #136]	; (f7b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    f72e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    f732:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    f736:	2300      	movs	r3, #0
    f738:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    f73c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    f740:	1ac3      	subs	r3, r0, r3
    f742:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f746:	2b02      	cmp	r3, #2
    f748:	d327      	bcc.n	f79a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    f74a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    f74e:	d224      	bcs.n	f79a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    f750:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    f754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f758:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    f75c:	b13d      	cbz	r5, f76e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    f75e:	bf00      	nop
    f760:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    f764:	1ad3      	subs	r3, r2, r3
    f766:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f76a:	2b02      	cmp	r3, #2
    f76c:	d3f8      	bcc.n	f760 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    f76e:	4b13      	ldr	r3, [pc, #76]	; (f7bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    f770:	2102      	movs	r1, #2
    f772:	074a      	lsls	r2, r1, #29
    f774:	601a      	str	r2, [r3, #0]
    f776:	60e0      	str	r0, [r4, #12]
    f778:	2004      	movs	r0, #4
    f77a:	f88c 0001 	strb.w	r0, [ip, #1]
    f77e:	f88c 1000 	strb.w	r1, [ip]
    f782:	bd70      	pop	{r4, r5, r6, pc}
    f784:	e004      	b.n	f790 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    f786:	f240 2102 	movw	r1, #514	; 0x202
    f78a:	206c      	movs	r0, #108	; 0x6c
    f78c:	f000 fe10 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f790:	f240 2106 	movw	r1, #518	; 0x206
    f794:	206c      	movs	r0, #108	; 0x6c
    f796:	f000 fe0b 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f79a:	2000      	movs	r0, #0
    f79c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    f7a0:	f240 2112 	movw	r1, #530	; 0x212
    f7a4:	206c      	movs	r0, #108	; 0x6c
    f7a6:	f000 fe03 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f7aa:	0000      	.short	0x0000
    f7ac:	20000020 	.word	0x20000020
    f7b0:	20000023 	.word	0x20000023
    f7b4:	4001f508 	.word	0x4001f508
    f7b8:	4000b000 	.word	0x4000b000
    f7bc:	4001f504 	.word	0x4001f504

0000f7c0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    f7c0:	4801      	ldr	r0, [pc, #4]	; (f7c8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    f7c2:	68c0      	ldr	r0, [r0, #12]
    f7c4:	4770      	bx	lr
    f7c6:	0000      	.short	0x0000
    f7c8:	20000020 	.word	0x20000020

0000f7cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    f7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7d0:	4936      	ldr	r1, [pc, #216]	; (f8ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    f7d2:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    f7d6:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    f7da:	4d35      	ldr	r5, [pc, #212]	; (f8b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    f7dc:	1d0b      	adds	r3, r1, #4
    f7de:	2200      	movs	r2, #0
    f7e0:	7828      	ldrb	r0, [r5, #0]
    f7e2:	b168      	cbz	r0, f800 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    f7e4:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    f7e8:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    f7ec:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    f7f0:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    f7f4:	4b2f      	ldr	r3, [pc, #188]	; (f8b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    f7f6:	681b      	ldr	r3, [r3, #0]
    f7f8:	f04f 0c01 	mov.w	ip, #1
    f7fc:	b99b      	cbnz	r3, f826 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    f7fe:	e00c      	b.n	f81a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    f800:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    f804:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    f808:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    f80c:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    f810:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    f814:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    f818:	e7ec      	b.n	f7f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    f81a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    f81e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    f822:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    f826:	2802      	cmp	r0, #2
    f828:	d004      	beq.n	f834 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    f82a:	f240 211e 	movw	r1, #542	; 0x21e
    f82e:	206c      	movs	r0, #108	; 0x6c
    f830:	f000 fdbe 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f834:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    f838:	4c1f      	ldr	r4, [pc, #124]	; (f8b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    f83a:	1cc0      	adds	r0, r0, #3
    f83c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f840:	68e3      	ldr	r3, [r4, #12]
    f842:	4e1e      	ldr	r6, [pc, #120]	; (f8bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    f844:	4298      	cmp	r0, r3
    f846:	d00c      	beq.n	f862 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f848:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    f84c:	1bdf      	subs	r7, r3, r7
    f84e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    f852:	2f04      	cmp	r7, #4
    f854:	d305      	bcc.n	f862 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f856:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    f85a:	d202      	bcs.n	f862 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f85c:	f7ff feae 	bl	f5bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    f860:	e01f      	b.n	f8a2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    f862:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    f866:	1a18      	subs	r0, r3, r0
    f868:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f86c:	2802      	cmp	r0, #2
    f86e:	d315      	bcc.n	f89c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    f870:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f874:	d212      	bcs.n	f89c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    f876:	4912      	ldr	r1, [pc, #72]	; (f8c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    f878:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f87c:	6008      	str	r0, [r1, #0]
    f87e:	f8c4 c008 	str.w	ip, [r4, #8]
    f882:	7022      	strb	r2, [r4, #0]
    f884:	f8c6 c004 	str.w	ip, [r6, #4]
    f888:	f8c6 c00c 	str.w	ip, [r6, #12]
    f88c:	0040      	lsls	r0, r0, #1
    f88e:	1f09      	subs	r1, r1, #4
    f890:	6008      	str	r0, [r1, #0]
    f892:	2004      	movs	r0, #4
    f894:	7068      	strb	r0, [r5, #1]
    f896:	f885 c000 	strb.w	ip, [r5]
    f89a:	e002      	b.n	f8a2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    f89c:	f8c4 c008 	str.w	ip, [r4, #8]
    f8a0:	7022      	strb	r2, [r4, #0]
    f8a2:	68a0      	ldr	r0, [r4, #8]
    f8a4:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8ac:	4000b000 	.word	0x4000b000
    f8b0:	20000023 	.word	0x20000023
    f8b4:	4000b148 	.word	0x4000b148
    f8b8:	20000020 	.word	0x20000020
    f8bc:	40008000 	.word	0x40008000
    f8c0:	4001f508 	.word	0x4001f508

0000f8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    f8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f8c8:	f8df c190 	ldr.w	ip, [pc, #400]	; fa5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    f8cc:	2600      	movs	r6, #0
    f8ce:	2701      	movs	r7, #1
    f8d0:	f89c 4000 	ldrb.w	r4, [ip]
    f8d4:	f89c c001 	ldrb.w	ip, [ip, #1]
    f8d8:	f44f 75a0 	mov.w	r5, #320	; 0x140
    f8dc:	2807      	cmp	r0, #7
    f8de:	d27b      	bcs.n	f9d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    f8e0:	e8df f000 	tbb	[pc, r0]
    f8e4:	04040404 	.word	0x04040404
    f8e8:	006c6c6c 	.word	0x006c6c6c
    f8ec:	f8df 8170 	ldr.w	r8, [pc, #368]	; fa60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    f8f0:	f8d8 900c 	ldr.w	r9, [r8, #12]
    f8f4:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    f8f8:	bf04      	itt	eq
    f8fa:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    f8fe:	f1b8 0f00 	cmpeq.w	r8, #0
    f902:	d002      	beq.n	f90a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    f904:	2c02      	cmp	r4, #2
    f906:	d005      	beq.n	f914 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    f908:	e02c      	b.n	f964 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    f90a:	f240 2151 	movw	r1, #593	; 0x251
    f90e:	206c      	movs	r0, #108	; 0x6c
    f910:	f000 fd4e 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f914:	f1ac 0804 	sub.w	r8, ip, #4
    f918:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    f91c:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    f920:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    f924:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    f928:	2500      	movs	r5, #0
    f92a:	2c01      	cmp	r4, #1
    f92c:	d002      	beq.n	f934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    f92e:	2c02      	cmp	r4, #2
    f930:	d00b      	beq.n	f94a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    f932:	e014      	b.n	f95e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    f934:	f1bc 0f04 	cmp.w	ip, #4
    f938:	bf24      	itt	cs
    f93a:	f8d8 9000 	ldrcs.w	r9, [r8]
    f93e:	f1b9 0f00 	cmpcs.w	r9, #0
    f942:	bf08      	it	eq
    f944:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    f948:	e009      	b.n	f95e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    f94a:	f1bc 0f04 	cmp.w	ip, #4
    f94e:	bf24      	itt	cs
    f950:	f8d8 9000 	ldrcs.w	r9, [r8]
    f954:	f1b9 0f00 	cmpcs.w	r9, #0
    f958:	bf08      	it	eq
    f95a:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    f95e:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    f962:	d1e1      	bne.n	f928 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    f964:	4c3f      	ldr	r4, [pc, #252]	; (fa64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    f966:	f100 0c10 	add.w	ip, r0, #16
    f96a:	fa07 fc0c 	lsl.w	ip, r7, ip
    f96e:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    f972:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    f976:	b1c2      	cbz	r2, f9aa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    f978:	f04f 0840 	mov.w	r8, #64	; 0x40
    f97c:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    f980:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    f984:	44a0      	add	r8, r4
    f986:	f8c8 7000 	str.w	r7, [r8]
    f98a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    f98e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    f992:	eba1 0000 	sub.w	r0, r1, r0
    f996:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f99a:	4282      	cmp	r2, r0
    f99c:	bf98      	it	ls
    f99e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    f9a2:	bf28      	it	cs
    f9a4:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    f9a8:	d250      	bcs.n	fa4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    f9aa:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    f9ae:	2b01      	cmp	r3, #1
    f9b0:	bf08      	it	eq
    f9b2:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    f9b6:	2001      	movs	r0, #1
    f9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f9bc:	b134      	cbz	r4, f9cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    f9be:	4584      	cmp	ip, r0
    f9c0:	d104      	bne.n	f9cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    f9c2:	f44f 711d 	mov.w	r1, #628	; 0x274
    f9c6:	206c      	movs	r0, #108	; 0x6c
    f9c8:	f000 fcf2 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f9cc:	f1a0 0c04 	sub.w	ip, r0, #4
    f9d0:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    f9d4:	2b01      	cmp	r3, #1
    f9d6:	e000      	b.n	f9da <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    f9d8:	e03b      	b.n	fa52 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    f9da:	bf0c      	ite	eq
    f9dc:	f04f 0801 	moveq.w	r8, #1
    f9e0:	f04f 0800 	movne.w	r8, #0
    f9e4:	2c03      	cmp	r4, #3
    f9e6:	d304      	bcc.n	f9f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    f9e8:	f240 114d 	movw	r1, #333	; 0x14d
    f9ec:	206c      	movs	r0, #108	; 0x6c
    f9ee:	f000 fcdf 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f9f2:	f8df c074 	ldr.w	ip, [pc, #116]	; fa68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    f9f6:	f104 0310 	add.w	r3, r4, #16
    f9fa:	fa07 f303 	lsl.w	r3, r7, r3
    f9fe:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    fa02:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    fa06:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    fa0a:	f84c 6004 	str.w	r6, [ip, r4]
    fa0e:	1f00      	subs	r0, r0, #4
    fa10:	b2c0      	uxtb	r0, r0
    fa12:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    fa16:	b16a      	cbz	r2, fa34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    fa18:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    fa1c:	1b0c      	subs	r4, r1, r4
    fa1e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    fa22:	42a2      	cmp	r2, r4
    fa24:	bf98      	it	ls
    fa26:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    fa2a:	bf24      	itt	cs
    fa2c:	2100      	movcs	r1, #0
    fa2e:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    fa32:	d20b      	bcs.n	fa4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    fa34:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    fa38:	f1b8 0f00 	cmp.w	r8, #0
    fa3c:	bf18      	it	ne
    fa3e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    fa42:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    fa46:	2001      	movs	r0, #1
    fa48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa4c:	2000      	movs	r0, #0
    fa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa52:	f240 2179 	movw	r1, #633	; 0x279
    fa56:	206c      	movs	r0, #108	; 0x6c
    fa58:	f000 fcaa 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fa5c:	20000023 	.word	0x20000023
    fa60:	20000020 	.word	0x20000020
    fa64:	40008000 	.word	0x40008000
    fa68:	4000b000 	.word	0x4000b000

0000fa6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    fa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa70:	2600      	movs	r6, #0
    fa72:	f44f 77a0 	mov.w	r7, #320	; 0x140
    fa76:	f04f 0801 	mov.w	r8, #1
    fa7a:	2807      	cmp	r0, #7
    fa7c:	d251      	bcs.n	fb22 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    fa7e:	e8df f000 	tbb	[pc, r0]
    fa82:	0404      	.short	0x0404
    fa84:	19190404 	.word	0x19190404
    fa88:	0019      	.short	0x0019
    fa8a:	f100 0110 	add.w	r1, r0, #16
    fa8e:	fa08 f201 	lsl.w	r2, r8, r1
    fa92:	4926      	ldr	r1, [pc, #152]	; (fb2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    fa94:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    fa98:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    fa9c:	2200      	movs	r2, #0
    fa9e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    faa2:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    faa6:	508e      	str	r6, [r1, r2]
    faa8:	4921      	ldr	r1, [pc, #132]	; (fb30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    faaa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    faae:	9000      	str	r0, [sp, #0]
    fab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fab4:	4d1f      	ldr	r5, [pc, #124]	; (fb34 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    fab6:	1f01      	subs	r1, r0, #4
    fab8:	b2cc      	uxtb	r4, r1
    faba:	7829      	ldrb	r1, [r5, #0]
    fabc:	b179      	cbz	r1, fade <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    fabe:	786a      	ldrb	r2, [r5, #1]
    fac0:	4282      	cmp	r2, r0
    fac2:	d10c      	bne.n	fade <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    fac4:	4a1c      	ldr	r2, [pc, #112]	; (fb38 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    fac6:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    faca:	6010      	str	r0, [r2, #0]
    facc:	2901      	cmp	r1, #1
    face:	bf08      	it	eq
    fad0:	f7ff fd3c 	bleq	f54c <MPSL_IRQ_TIMER0_Handler+0x100>
    fad4:	702e      	strb	r6, [r5, #0]
    fad6:	4919      	ldr	r1, [pc, #100]	; (fb3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    fad8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    fadc:	60c8      	str	r0, [r1, #12]
    fade:	f104 0010 	add.w	r0, r4, #16
    fae2:	fa08 f100 	lsl.w	r1, r8, r0
    fae6:	4816      	ldr	r0, [pc, #88]	; (fb40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    fae8:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    faec:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    faf0:	00a1      	lsls	r1, r4, #2
    faf2:	4401      	add	r1, r0
    faf4:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    faf8:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    fafc:	1a89      	subs	r1, r1, r2
    fafe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    fb02:	2902      	cmp	r1, #2
    fb04:	d307      	bcc.n	fb16 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    fb06:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    fb0a:	2100      	movs	r1, #0
    fb0c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    fb10:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    fb14:	5046      	str	r6, [r0, r1]
    fb16:	480b      	ldr	r0, [pc, #44]	; (fb44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    fb18:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    fb1c:	9000      	str	r0, [sp, #0]
    fb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb22:	f240 21f1 	movw	r1, #753	; 0x2f1
    fb26:	206c      	movs	r0, #108	; 0x6c
    fb28:	f000 fc42 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fb2c:	40008000 	.word	0x40008000
    fb30:	40008140 	.word	0x40008140
    fb34:	20000023 	.word	0x20000023
    fb38:	4001f508 	.word	0x4001f508
    fb3c:	20000020 	.word	0x20000020
    fb40:	4000b000 	.word	0x4000b000
    fb44:	4000b140 	.word	0x4000b140

0000fb48 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    fb48:	4920      	ldr	r1, [pc, #128]	; (fbcc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    fb4a:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    fb4e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    fb52:	481f      	ldr	r0, [pc, #124]	; (fbd0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    fb54:	1d0a      	adds	r2, r1, #4
    fb56:	7803      	ldrb	r3, [r0, #0]
    fb58:	2000      	movs	r0, #0
    fb5a:	b15b      	cbz	r3, fb74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    fb5c:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    fb60:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    fb64:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fb68:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    fb6c:	4919      	ldr	r1, [pc, #100]	; (fbd4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    fb6e:	6809      	ldr	r1, [r1, #0]
    fb70:	b999      	cbnz	r1, fb9a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    fb72:	e00c      	b.n	fb8e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    fb74:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    fb78:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    fb7c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    fb80:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    fb84:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fb88:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    fb8c:	e7ee      	b.n	fb6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    fb8e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fb92:	f44f 6100 	mov.w	r1, #2048	; 0x800
    fb96:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    fb9a:	490f      	ldr	r1, [pc, #60]	; (fbd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    fb9c:	f04f 32ff 	mov.w	r2, #4294967295
    fba0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    fba4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    fba8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    fbac:	1d0a      	adds	r2, r1, #4
    fbae:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fbb2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    fbb6:	1d12      	adds	r2, r2, #4
    fbb8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fbbc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    fbc0:	1d12      	adds	r2, r2, #4
    fbc2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fbc6:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    fbca:	4770      	bx	lr
    fbcc:	4000b000 	.word	0x4000b000
    fbd0:	20000023 	.word	0x20000023
    fbd4:	4000b148 	.word	0x4000b148
    fbd8:	40008000 	.word	0x40008000

0000fbdc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    fbdc:	4808      	ldr	r0, [pc, #32]	; (fc00 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    fbde:	f990 0002 	ldrsb.w	r0, [r0, #2]
    fbe2:	2800      	cmp	r0, #0
    fbe4:	bfb8      	it	lt
    fbe6:	4770      	bxlt	lr
    fbe8:	f000 011f 	and.w	r1, r0, #31
    fbec:	2201      	movs	r2, #1
    fbee:	fa02 f101 	lsl.w	r1, r2, r1
    fbf2:	0940      	lsrs	r0, r0, #5
    fbf4:	0080      	lsls	r0, r0, #2
    fbf6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fbfa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    fbfe:	4770      	bx	lr
    fc00:	20000020 	.word	0x20000020

0000fc04 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    fc04:	b510      	push	{r4, lr}
    fc06:	2807      	cmp	r0, #7
    fc08:	d20d      	bcs.n	fc26 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    fc0a:	e8df f000 	tbb	[pc, r0]
    fc0e:	0404      	.short	0x0404
    fc10:	06060404 	.word	0x06060404
    fc14:	0006      	.short	0x0006
    fc16:	4906      	ldr	r1, [pc, #24]	; (fc30 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    fc18:	e002      	b.n	fc20 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    fc1a:	1f00      	subs	r0, r0, #4
    fc1c:	4905      	ldr	r1, [pc, #20]	; (fc34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    fc1e:	b2c0      	uxtb	r0, r0
    fc20:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    fc24:	bd10      	pop	{r4, pc}
    fc26:	f240 219d 	movw	r1, #669	; 0x29d
    fc2a:	206c      	movs	r0, #108	; 0x6c
    fc2c:	f000 fbc0 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fc30:	40008140 	.word	0x40008140
    fc34:	4000b140 	.word	0x4000b140

0000fc38 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    fc38:	b510      	push	{r4, lr}
    fc3a:	2807      	cmp	r0, #7
    fc3c:	d20d      	bcs.n	fc5a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    fc3e:	e8df f000 	tbb	[pc, r0]
    fc42:	0404      	.short	0x0404
    fc44:	06060404 	.word	0x06060404
    fc48:	0006      	.short	0x0006
    fc4a:	4906      	ldr	r1, [pc, #24]	; (fc64 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    fc4c:	e002      	b.n	fc54 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    fc4e:	1f00      	subs	r0, r0, #4
    fc50:	4905      	ldr	r1, [pc, #20]	; (fc68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    fc52:	b2c0      	uxtb	r0, r0
    fc54:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    fc58:	bd10      	pop	{r4, pc}
    fc5a:	f240 219d 	movw	r1, #669	; 0x29d
    fc5e:	206c      	movs	r0, #108	; 0x6c
    fc60:	f000 fba6 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fc64:	40008140 	.word	0x40008140
    fc68:	4000b140 	.word	0x4000b140

0000fc6c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    fc6c:	b510      	push	{r4, lr}
    fc6e:	481c      	ldr	r0, [pc, #112]	; (fce0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    fc70:	2400      	movs	r4, #0
    fc72:	2104      	movs	r1, #4
    fc74:	7004      	strb	r4, [r0, #0]
    fc76:	1ec0      	subs	r0, r0, #3
    fc78:	7001      	strb	r1, [r0, #0]
    fc7a:	0589      	lsls	r1, r1, #22
    fc7c:	60c1      	str	r1, [r0, #12]
    fc7e:	f7ff fc65 	bl	f54c <MPSL_IRQ_TIMER0_Handler+0x100>
    fc82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fc86:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fc8a:	f04f 0c01 	mov.w	ip, #1
    fc8e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    fc92:	f3bf 8f4f 	dsb	sy
    fc96:	f3bf 8f6f 	isb	sy
    fc9a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    fc9e:	4811      	ldr	r0, [pc, #68]	; (fce4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    fca0:	f8c0 c004 	str.w	ip, [r0, #4]
    fca4:	f8c0 c008 	str.w	ip, [r0, #8]
    fca8:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    fcac:	2900      	cmp	r1, #0
    fcae:	d1fb      	bne.n	fca8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    fcb0:	1e49      	subs	r1, r1, #1
    fcb2:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    fcb6:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    fcba:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    fcbe:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    fcc2:	4909      	ldr	r1, [pc, #36]	; (fce8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    fcc4:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    fcc8:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    fccc:	1d09      	adds	r1, r1, #4
    fcce:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    fcd2:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    fcd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fcda:	f8c0 c000 	str.w	ip, [r0]
    fcde:	bd10      	pop	{r4, pc}
    fce0:	20000023 	.word	0x20000023
    fce4:	4000b000 	.word	0x4000b000
    fce8:	4000b004 	.word	0x4000b004

0000fcec <MPSL_IRQ_CLOCK_Handler>:
    fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fcf0:	4c16      	ldr	r4, [pc, #88]	; (fd4c <MPSL_IRQ_CLOCK_Handler+0x60>)
    fcf2:	7a60      	ldrb	r0, [r4, #9]
    fcf4:	2800      	cmp	r0, #0
    fcf6:	d027      	beq.n	fd48 <MPSL_IRQ_CLOCK_Handler+0x5c>
    fcf8:	f44f 7180 	mov.w	r1, #256	; 0x100
    fcfc:	058d      	lsls	r5, r1, #22
    fcfe:	4628      	mov	r0, r5
    fd00:	f009 fb38 	bl	19374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fd04:	4680      	mov	r8, r0
    fd06:	f44f 7182 	mov.w	r1, #260	; 0x104
    fd0a:	4628      	mov	r0, r5
    fd0c:	f009 fb32 	bl	19374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fd10:	2600      	movs	r6, #0
    fd12:	4607      	mov	r7, r0
    fd14:	f1b8 0f00 	cmp.w	r8, #0
    fd18:	d009      	beq.n	fd2e <MPSL_IRQ_CLOCK_Handler+0x42>
    fd1a:	2001      	movs	r0, #1
    fd1c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    fd20:	7920      	ldrb	r0, [r4, #4]
    fd22:	b120      	cbz	r0, fd2e <MPSL_IRQ_CLOCK_Handler+0x42>
    fd24:	7126      	strb	r6, [r4, #4]
    fd26:	69e0      	ldr	r0, [r4, #28]
    fd28:	b108      	cbz	r0, fd2e <MPSL_IRQ_CLOCK_Handler+0x42>
    fd2a:	4780      	blx	r0
    fd2c:	61e6      	str	r6, [r4, #28]
    fd2e:	b137      	cbz	r7, fd3e <MPSL_IRQ_CLOCK_Handler+0x52>
    fd30:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    fd34:	2002      	movs	r0, #2
    fd36:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    fd3a:	f000 fa6d 	bl	10218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    fd3e:	4640      	mov	r0, r8
    fd40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fd44:	f000 b85a 	b.w	fdfc <MPSL_IRQ_CLOCK_Handler+0x110>
    fd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd4c:	20000030 	.word	0x20000030
    fd50:	b510      	push	{r4, lr}
    fd52:	f009 fbb9 	bl	194c8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    fd56:	b930      	cbnz	r0, fd66 <MPSL_IRQ_CLOCK_Handler+0x7a>
    fd58:	f009 fbd7 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fd5c:	b918      	cbnz	r0, fd66 <MPSL_IRQ_CLOCK_Handler+0x7a>
    fd5e:	f009 fc0a 	bl	19576 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fd62:	2800      	cmp	r0, #0
    fd64:	d002      	beq.n	fd6c <MPSL_IRQ_CLOCK_Handler+0x80>
    fd66:	4902      	ldr	r1, [pc, #8]	; (fd70 <MPSL_IRQ_CLOCK_Handler+0x84>)
    fd68:	2002      	movs	r0, #2
    fd6a:	6008      	str	r0, [r1, #0]
    fd6c:	bd10      	pop	{r4, pc}
    fd6e:	0000      	.short	0x0000
    fd70:	40000c34 	.word	0x40000c34
    fd74:	b570      	push	{r4, r5, r6, lr}
    fd76:	f000 f987 	bl	10088 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    fd7a:	f000 faa1 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    fd7e:	4c09      	ldr	r4, [pc, #36]	; (fda4 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    fd80:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    fd84:	b130      	cbz	r0, fd94 <MPSL_IRQ_CLOCK_Handler+0xa8>
    fd86:	f7ff ffe3 	bl	fd50 <MPSL_IRQ_CLOCK_Handler+0x64>
    fd8a:	2001      	movs	r0, #1
    fd8c:	6128      	str	r0, [r5, #16]
    fd8e:	2004      	movs	r0, #4
    fd90:	72a0      	strb	r0, [r4, #10]
    fd92:	e004      	b.n	fd9e <MPSL_IRQ_CLOCK_Handler+0xb2>
    fd94:	2003      	movs	r0, #3
    fd96:	72a0      	strb	r0, [r4, #10]
    fd98:	2001      	movs	r0, #1
    fd9a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    fd9e:	2000      	movs	r0, #0
    fda0:	71e0      	strb	r0, [r4, #7]
    fda2:	bd70      	pop	{r4, r5, r6, pc}
    fda4:	20000030 	.word	0x20000030
    fda8:	b570      	push	{r4, r5, r6, lr}
    fdaa:	4c13      	ldr	r4, [pc, #76]	; (fdf8 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    fdac:	79a0      	ldrb	r0, [r4, #6]
    fdae:	b1f0      	cbz	r0, fdee <MPSL_IRQ_CLOCK_Handler+0x102>
    fdb0:	2801      	cmp	r0, #1
    fdb2:	d003      	beq.n	fdbc <MPSL_IRQ_CLOCK_Handler+0xd0>
    fdb4:	79e1      	ldrb	r1, [r4, #7]
    fdb6:	1e40      	subs	r0, r0, #1
    fdb8:	4281      	cmp	r1, r0
    fdba:	da18      	bge.n	fdee <MPSL_IRQ_CLOCK_Handler+0x102>
    fdbc:	f000 fa80 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    fdc0:	4605      	mov	r5, r0
    fdc2:	f000 fb65 	bl	10490 <mpsl_temperature_get>
    fdc6:	79a1      	ldrb	r1, [r4, #6]
    fdc8:	2901      	cmp	r1, #1
    fdca:	d902      	bls.n	fdd2 <MPSL_IRQ_CLOCK_Handler+0xe6>
    fdcc:	79e1      	ldrb	r1, [r4, #7]
    fdce:	1c49      	adds	r1, r1, #1
    fdd0:	71e1      	strb	r1, [r4, #7]
    fdd2:	b10d      	cbz	r5, fdd8 <MPSL_IRQ_CLOCK_Handler+0xec>
    fdd4:	6961      	ldr	r1, [r4, #20]
    fdd6:	e000      	b.n	fdda <MPSL_IRQ_CLOCK_Handler+0xee>
    fdd8:	6921      	ldr	r1, [r4, #16]
    fdda:	1a41      	subs	r1, r0, r1
    fddc:	2902      	cmp	r1, #2
    fdde:	da02      	bge.n	fde6 <MPSL_IRQ_CLOCK_Handler+0xfa>
    fde0:	f111 0f02 	cmn.w	r1, #2
    fde4:	dc07      	bgt.n	fdf6 <MPSL_IRQ_CLOCK_Handler+0x10a>
    fde6:	b10d      	cbz	r5, fdec <MPSL_IRQ_CLOCK_Handler+0x100>
    fde8:	6160      	str	r0, [r4, #20]
    fdea:	e000      	b.n	fdee <MPSL_IRQ_CLOCK_Handler+0x102>
    fdec:	6120      	str	r0, [r4, #16]
    fdee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fdf2:	f7ff bfbf 	b.w	fd74 <MPSL_IRQ_CLOCK_Handler+0x88>
    fdf6:	bd70      	pop	{r4, r5, r6, pc}
    fdf8:	20000030 	.word	0x20000030
    fdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe00:	4606      	mov	r6, r0
    fe02:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    fe06:	f44f 7186 	mov.w	r1, #268	; 0x10c
    fe0a:	4628      	mov	r0, r5
    fe0c:	f009 fab2 	bl	19374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fe10:	4680      	mov	r8, r0
    fe12:	f44f 7188 	mov.w	r1, #272	; 0x110
    fe16:	4628      	mov	r0, r5
    fe18:	f009 faac 	bl	19374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fe1c:	4c27      	ldr	r4, [pc, #156]	; (febc <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    fe1e:	4682      	mov	sl, r0
    fe20:	7827      	ldrb	r7, [r4, #0]
    fe22:	f104 0008 	add.w	r0, r4, #8
    fe26:	f009 fb19 	bl	1945c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    fe2a:	b110      	cbz	r0, fe32 <MPSL_IRQ_CLOCK_Handler+0x146>
    fe2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    fe30:	e016      	b.n	fe60 <MPSL_IRQ_CLOCK_Handler+0x174>
    fe32:	f04f 0901 	mov.w	r9, #1
    fe36:	b146      	cbz	r6, fe4a <MPSL_IRQ_CLOCK_Handler+0x15e>
    fe38:	7aa0      	ldrb	r0, [r4, #10]
    fe3a:	2803      	cmp	r0, #3
    fe3c:	d105      	bne.n	fe4a <MPSL_IRQ_CLOCK_Handler+0x15e>
    fe3e:	2004      	movs	r0, #4
    fe40:	72a0      	strb	r0, [r4, #10]
    fe42:	f7ff ff85 	bl	fd50 <MPSL_IRQ_CLOCK_Handler+0x64>
    fe46:	f8c5 9010 	str.w	r9, [r5, #16]
    fe4a:	2600      	movs	r6, #0
    fe4c:	f1b8 0f00 	cmp.w	r8, #0
    fe50:	d018      	beq.n	fe84 <MPSL_IRQ_CLOCK_Handler+0x198>
    fe52:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    fe56:	7aa0      	ldrb	r0, [r4, #10]
    fe58:	2804      	cmp	r0, #4
    fe5a:	d004      	beq.n	fe66 <MPSL_IRQ_CLOCK_Handler+0x17a>
    fe5c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    fe60:	206d      	movs	r0, #109	; 0x6d
    fe62:	f000 faa5 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fe66:	f009 fb2f 	bl	194c8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    fe6a:	b928      	cbnz	r0, fe78 <MPSL_IRQ_CLOCK_Handler+0x18c>
    fe6c:	f009 fb4d 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fe70:	b910      	cbnz	r0, fe78 <MPSL_IRQ_CLOCK_Handler+0x18c>
    fe72:	f009 fb80 	bl	19576 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fe76:	b108      	cbz	r0, fe7c <MPSL_IRQ_CLOCK_Handler+0x190>
    fe78:	4811      	ldr	r0, [pc, #68]	; (fec0 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    fe7a:	6006      	str	r6, [r0, #0]
    fe7c:	2002      	movs	r0, #2
    fe7e:	72a0      	strb	r0, [r4, #10]
    fe80:	f000 f8e6 	bl	10050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    fe84:	f1ba 0f00 	cmp.w	sl, #0
    fe88:	d008      	beq.n	fe9c <MPSL_IRQ_CLOCK_Handler+0x1b0>
    fe8a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    fe8e:	7aa0      	ldrb	r0, [r4, #10]
    fe90:	2802      	cmp	r0, #2
    fe92:	d101      	bne.n	fe98 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    fe94:	f7ff ff88 	bl	fda8 <MPSL_IRQ_CLOCK_Handler+0xbc>
    fe98:	f8c5 9014 	str.w	r9, [r5, #20]
    fe9c:	b13f      	cbz	r7, feae <MPSL_IRQ_CLOCK_Handler+0x1c2>
    fe9e:	7026      	strb	r6, [r4, #0]
    fea0:	7aa0      	ldrb	r0, [r4, #10]
    fea2:	2802      	cmp	r0, #2
    fea4:	d101      	bne.n	feaa <MPSL_IRQ_CLOCK_Handler+0x1be>
    fea6:	f7ff ff65 	bl	fd74 <MPSL_IRQ_CLOCK_Handler+0x88>
    feaa:	f000 f8d1 	bl	10050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    feae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    feb2:	4802      	ldr	r0, [pc, #8]	; (febc <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    feb4:	3008      	adds	r0, #8
    feb6:	f009 bae8 	b.w	1948a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    feba:	0000      	.short	0x0000
    febc:	20000030 	.word	0x20000030
    fec0:	40000c34 	.word	0x40000c34
    fec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fec8:	4c5c      	ldr	r4, [pc, #368]	; (1003c <MPSL_IRQ_CLOCK_Handler+0x350>)
    feca:	f04f 0800 	mov.w	r8, #0
    fece:	4606      	mov	r6, r0
    fed0:	f8c4 8018 	str.w	r8, [r4, #24]
    fed4:	7843      	ldrb	r3, [r0, #1]
    fed6:	7882      	ldrb	r2, [r0, #2]
    fed8:	7800      	ldrb	r0, [r0, #0]
    feda:	72e0      	strb	r0, [r4, #11]
    fedc:	7163      	strb	r3, [r4, #5]
    fede:	2701      	movs	r7, #1
    fee0:	71a2      	strb	r2, [r4, #6]
    fee2:	07bd      	lsls	r5, r7, #30
    fee4:	f884 8007 	strb.w	r8, [r4, #7]
    fee8:	2805      	cmp	r0, #5
    feea:	d224      	bcs.n	ff36 <MPSL_IRQ_CLOCK_Handler+0x24a>
    feec:	e8df f000 	tbb	[pc, r0]
    fef0:	1f05030f 	.word	0x1f05030f
    fef4:	0021      	.short	0x0021
    fef6:	61a7      	str	r7, [r4, #24]
    fef8:	e009      	b.n	ff0e <MPSL_IRQ_CLOCK_Handler+0x222>
    fefa:	f000 f8c5 	bl	10088 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    fefe:	2101      	movs	r1, #1
    ff00:	4628      	mov	r0, r5
    ff02:	f009 fa3c 	bl	1937e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    ff06:	2800      	cmp	r0, #0
    ff08:	d0f9      	beq.n	fefe <MPSL_IRQ_CLOCK_Handler+0x212>
    ff0a:	2002      	movs	r0, #2
    ff0c:	61a0      	str	r0, [r4, #24]
    ff0e:	f009 fa62 	bl	193d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    ff12:	b1b0      	cbz	r0, ff42 <MPSL_IRQ_CLOCK_Handler+0x256>
    ff14:	f000 f9ee 	bl	102f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    ff18:	7e21      	ldrb	r1, [r4, #24]
    ff1a:	f001 0103 	and.w	r1, r1, #3
    ff1e:	4288      	cmp	r0, r1
    ff20:	d10f      	bne.n	ff42 <MPSL_IRQ_CLOCK_Handler+0x256>
    ff22:	79b0      	ldrb	r0, [r6, #6]
    ff24:	b150      	cbz	r0, ff3c <MPSL_IRQ_CLOCK_Handler+0x250>
    ff26:	2002      	movs	r0, #2
    ff28:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    ff2c:	e06a      	b.n	10004 <MPSL_IRQ_CLOCK_Handler+0x318>
    ff2e:	4844      	ldr	r0, [pc, #272]	; (10040 <MPSL_IRQ_CLOCK_Handler+0x354>)
    ff30:	e7ec      	b.n	ff0c <MPSL_IRQ_CLOCK_Handler+0x220>
    ff32:	4844      	ldr	r0, [pc, #272]	; (10044 <MPSL_IRQ_CLOCK_Handler+0x358>)
    ff34:	e7ea      	b.n	ff0c <MPSL_IRQ_CLOCK_Handler+0x220>
    ff36:	f240 312d 	movw	r1, #813	; 0x32d
    ff3a:	e049      	b.n	ffd0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    ff3c:	f000 f9ae 	bl	1029c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ff40:	e060      	b.n	10004 <MPSL_IRQ_CLOCK_Handler+0x318>
    ff42:	60ef      	str	r7, [r5, #12]
    ff44:	f44f 7a82 	mov.w	sl, #260	; 0x104
    ff48:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    ff4c:	69a0      	ldr	r0, [r4, #24]
    ff4e:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    ff52:	f009 faa5 	bl	194a0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ff56:	b940      	cbnz	r0, ff6a <MPSL_IRQ_CLOCK_Handler+0x27e>
    ff58:	f009 faac 	bl	194b4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ff5c:	b928      	cbnz	r0, ff6a <MPSL_IRQ_CLOCK_Handler+0x27e>
    ff5e:	f009 fac0 	bl	194e2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ff62:	b910      	cbnz	r0, ff6a <MPSL_IRQ_CLOCK_Handler+0x27e>
    ff64:	f009 fad1 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ff68:	b138      	cbz	r0, ff7a <MPSL_IRQ_CLOCK_Handler+0x28e>
    ff6a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    ff6e:	4836      	ldr	r0, [pc, #216]	; (10048 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    ff70:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    ff74:	f3c1 3142 	ubfx	r1, r1, #13, #3
    ff78:	6001      	str	r1, [r0, #0]
    ff7a:	f009 fa91 	bl	194a0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ff7e:	b940      	cbnz	r0, ff92 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    ff80:	f009 fa98 	bl	194b4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ff84:	b928      	cbnz	r0, ff92 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    ff86:	f009 faac 	bl	194e2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ff8a:	b910      	cbnz	r0, ff92 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    ff8c:	f009 fabd 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ff90:	b110      	cbz	r0, ff98 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    ff92:	482d      	ldr	r0, [pc, #180]	; (10048 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    ff94:	3010      	adds	r0, #16
    ff96:	6007      	str	r7, [r0, #0]
    ff98:	60af      	str	r7, [r5, #8]
    ff9a:	2002      	movs	r0, #2
    ff9c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    ffa0:	79b0      	ldrb	r0, [r6, #6]
    ffa2:	bb78      	cbnz	r0, 10004 <MPSL_IRQ_CLOCK_Handler+0x318>
    ffa4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    ffa8:	f010 0f02 	tst.w	r0, #2
    ffac:	d00e      	beq.n	ffcc <MPSL_IRQ_CLOCK_Handler+0x2e0>
    ffae:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1004c <MPSL_IRQ_CLOCK_Handler+0x360>
    ffb2:	f8d9 1000 	ldr.w	r1, [r9]
    ffb6:	43c9      	mvns	r1, r1
    ffb8:	f341 1700 	sbfx	r7, r1, #4, #1
    ffbc:	f8d9 1000 	ldr.w	r1, [r9]
    ffc0:	f041 0110 	orr.w	r1, r1, #16
    ffc4:	f8c9 1000 	str.w	r1, [r9]
    ffc8:	1c7f      	adds	r7, r7, #1
    ffca:	e007      	b.n	ffdc <MPSL_IRQ_CLOCK_Handler+0x2f0>
    ffcc:	f240 21ee 	movw	r1, #750	; 0x2ee
    ffd0:	206d      	movs	r0, #109	; 0x6d
    ffd2:	f000 f9ed 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ffd6:	bf00      	nop
    ffd8:	f000 fb10 	bl	105fc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ffdc:	4651      	mov	r1, sl
    ffde:	4628      	mov	r0, r5
    ffe0:	f009 f9c8 	bl	19374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    ffe4:	2800      	cmp	r0, #0
    ffe6:	d0f7      	beq.n	ffd8 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    ffe8:	f000 f958 	bl	1029c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ffec:	b92f      	cbnz	r7, fffa <MPSL_IRQ_CLOCK_Handler+0x30e>
    ffee:	f8d9 1000 	ldr.w	r1, [r9]
    fff2:	f021 0110 	bic.w	r1, r1, #16
    fff6:	f8c9 1000 	str.w	r1, [r9]
    fffa:	2002      	movs	r0, #2
    fffc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   10000:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
   10004:	79a0      	ldrb	r0, [r4, #6]
   10006:	b170      	cbz	r0, 10026 <MPSL_IRQ_CLOCK_Handler+0x33a>
   10008:	7830      	ldrb	r0, [r6, #0]
   1000a:	b960      	cbnz	r0, 10026 <MPSL_IRQ_CLOCK_Handler+0x33a>
   1000c:	f000 f958 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   10010:	4606      	mov	r6, r0
   10012:	f000 fa3d 	bl	10490 <mpsl_temperature_get>
   10016:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1001a:	b116      	cbz	r6, 10022 <MPSL_IRQ_CLOCK_Handler+0x336>
   1001c:	e9c4 2004 	strd	r2, r0, [r4, #16]
   10020:	e001      	b.n	10026 <MPSL_IRQ_CLOCK_Handler+0x33a>
   10022:	e9c4 0204 	strd	r0, r2, [r4, #16]
   10026:	2101      	movs	r1, #1
   10028:	4628      	mov	r0, r5
   1002a:	f009 f9a8 	bl	1937e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
   1002e:	b108      	cbz	r0, 10034 <MPSL_IRQ_CLOCK_Handler+0x348>
   10030:	f000 f940 	bl	102b4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   10034:	f884 800a 	strb.w	r8, [r4, #10]
   10038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1003c:	20000030 	.word	0x20000030
   10040:	00020001 	.word	0x00020001
   10044:	00030001 	.word	0x00030001
   10048:	4000053c 	.word	0x4000053c
   1004c:	e000ed10 	.word	0xe000ed10

00010050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
   10050:	b510      	push	{r4, lr}
   10052:	f3ef 8410 	mrs	r4, PRIMASK
   10056:	b672      	cpsid	i
   10058:	480a      	ldr	r0, [pc, #40]	; (10084 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
   1005a:	7841      	ldrb	r1, [r0, #1]
   1005c:	b129      	cbz	r1, 1006a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
   1005e:	7841      	ldrb	r1, [r0, #1]
   10060:	1e49      	subs	r1, r1, #1
   10062:	7041      	strb	r1, [r0, #1]
   10064:	7841      	ldrb	r1, [r0, #1]
   10066:	b129      	cbz	r1, 10074 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
   10068:	e008      	b.n	1007c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   1006a:	f240 110d 	movw	r1, #269	; 0x10d
   1006e:	206d      	movs	r0, #109	; 0x6d
   10070:	f000 f99e 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10074:	7880      	ldrb	r0, [r0, #2]
   10076:	b908      	cbnz	r0, 1007c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   10078:	f000 f930 	bl	102dc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   1007c:	2c00      	cmp	r4, #0
   1007e:	d100      	bne.n	10082 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
   10080:	b662      	cpsie	i
   10082:	bd10      	pop	{r4, pc}
   10084:	20000030 	.word	0x20000030

00010088 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
   10088:	b510      	push	{r4, lr}
   1008a:	f3ef 8410 	mrs	r4, PRIMASK
   1008e:	b672      	cpsid	i
   10090:	4806      	ldr	r0, [pc, #24]	; (100ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
   10092:	7841      	ldrb	r1, [r0, #1]
   10094:	1c49      	adds	r1, r1, #1
   10096:	7041      	strb	r1, [r0, #1]
   10098:	7840      	ldrb	r0, [r0, #1]
   1009a:	2801      	cmp	r0, #1
   1009c:	d101      	bne.n	100a2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
   1009e:	f009 f985 	bl	193ac <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
   100a2:	2c00      	cmp	r4, #0
   100a4:	d100      	bne.n	100a8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
   100a6:	b662      	cpsie	i
   100a8:	bd10      	pop	{r4, pc}
   100aa:	0000      	.short	0x0000
   100ac:	20000030 	.word	0x20000030

000100b0 <mpsl_clock_hfclk_release>:
   100b0:	4805      	ldr	r0, [pc, #20]	; (100c8 <mpsl_clock_hfclk_release+0x18>)
   100b2:	b510      	push	{r4, lr}
   100b4:	78c1      	ldrb	r1, [r0, #3]
   100b6:	b121      	cbz	r1, 100c2 <mpsl_clock_hfclk_release+0x12>
   100b8:	2100      	movs	r1, #0
   100ba:	7101      	strb	r1, [r0, #4]
   100bc:	70c1      	strb	r1, [r0, #3]
   100be:	f7ff ffc7 	bl	10050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   100c2:	2000      	movs	r0, #0
   100c4:	bd10      	pop	{r4, pc}
   100c6:	0000      	.short	0x0000
   100c8:	20000030 	.word	0x20000030

000100cc <mpsl_clock_hfclk_request>:
   100cc:	b570      	push	{r4, r5, r6, lr}
   100ce:	4c0c      	ldr	r4, [pc, #48]	; (10100 <mpsl_clock_hfclk_request+0x34>)
   100d0:	78e1      	ldrb	r1, [r4, #3]
   100d2:	b961      	cbnz	r1, 100ee <mpsl_clock_hfclk_request+0x22>
   100d4:	2501      	movs	r5, #1
   100d6:	70e5      	strb	r5, [r4, #3]
   100d8:	61e0      	str	r0, [r4, #28]
   100da:	f7ff ffd5 	bl	10088 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   100de:	f000 f8ef 	bl	102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   100e2:	b130      	cbz	r0, 100f2 <mpsl_clock_hfclk_request+0x26>
   100e4:	69e0      	ldr	r0, [r4, #28]
   100e6:	b110      	cbz	r0, 100ee <mpsl_clock_hfclk_request+0x22>
   100e8:	4780      	blx	r0
   100ea:	2000      	movs	r0, #0
   100ec:	61e0      	str	r0, [r4, #28]
   100ee:	2000      	movs	r0, #0
   100f0:	bd70      	pop	{r4, r5, r6, pc}
   100f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   100f6:	7125      	strb	r5, [r4, #4]
   100f8:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
   100fc:	e7f7      	b.n	100ee <mpsl_clock_hfclk_request+0x22>
   100fe:	0000      	.short	0x0000
   10100:	20000030 	.word	0x20000030

00010104 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
   10104:	f3ef 8010 	mrs	r0, PRIMASK
   10108:	b672      	cpsid	i
   1010a:	4904      	ldr	r1, [pc, #16]	; (1011c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
   1010c:	788a      	ldrb	r2, [r1, #2]
   1010e:	1c52      	adds	r2, r2, #1
   10110:	708a      	strb	r2, [r1, #2]
   10112:	2800      	cmp	r0, #0
   10114:	d100      	bne.n	10118 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
   10116:	b662      	cpsie	i
   10118:	4770      	bx	lr
   1011a:	0000      	.short	0x0000
   1011c:	20000030 	.word	0x20000030

00010120 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
   10120:	b510      	push	{r4, lr}
   10122:	f3ef 8410 	mrs	r4, PRIMASK
   10126:	b672      	cpsid	i
   10128:	480a      	ldr	r0, [pc, #40]	; (10154 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
   1012a:	7881      	ldrb	r1, [r0, #2]
   1012c:	b129      	cbz	r1, 1013a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
   1012e:	7881      	ldrb	r1, [r0, #2]
   10130:	1e49      	subs	r1, r1, #1
   10132:	7081      	strb	r1, [r0, #2]
   10134:	7841      	ldrb	r1, [r0, #1]
   10136:	b129      	cbz	r1, 10144 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
   10138:	e008      	b.n	1014c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
   1013a:	f240 1125 	movw	r1, #293	; 0x125
   1013e:	206d      	movs	r0, #109	; 0x6d
   10140:	f000 f936 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10144:	7880      	ldrb	r0, [r0, #2]
   10146:	b908      	cbnz	r0, 1014c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
   10148:	f000 f8c8 	bl	102dc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   1014c:	2c00      	cmp	r4, #0
   1014e:	d100      	bne.n	10152 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
   10150:	b662      	cpsie	i
   10152:	bd10      	pop	{r4, pc}
   10154:	20000030 	.word	0x20000030

00010158 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
   10158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1015c:	0004      	movs	r4, r0
   1015e:	f06f 0015 	mvn.w	r0, #21
   10162:	d03c      	beq.n	101de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   10164:	7821      	ldrb	r1, [r4, #0]
   10166:	2904      	cmp	r1, #4
   10168:	d839      	bhi.n	101de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   1016a:	2900      	cmp	r1, #0
   1016c:	7861      	ldrb	r1, [r4, #1]
   1016e:	d038      	beq.n	101e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
   10170:	2900      	cmp	r1, #0
   10172:	d134      	bne.n	101de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   10174:	78a1      	ldrb	r1, [r4, #2]
   10176:	2900      	cmp	r1, #0
   10178:	d131      	bne.n	101de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   1017a:	2000      	movs	r0, #0
   1017c:	f009 f8c5 	bl	1930a <MPSL_IRQ_RADIO_Handler+0x1e>
   10180:	2000      	movs	r0, #0
   10182:	f009 f8b5 	bl	192f0 <MPSL_IRQ_RADIO_Handler+0x4>
   10186:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   1018a:	f04f 31ff 	mov.w	r1, #4294967295
   1018e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
   10192:	2600      	movs	r6, #0
   10194:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
   10198:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
   1019c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
   101a0:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
   101a4:	4f14      	ldr	r7, [pc, #80]	; (101f8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
   101a6:	707e      	strb	r6, [r7, #1]
   101a8:	88a0      	ldrh	r0, [r4, #4]
   101aa:	81b8      	strh	r0, [r7, #12]
   101ac:	f009 f8f5 	bl	1939a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
   101b0:	2501      	movs	r5, #1
   101b2:	b108      	cbz	r0, 101b8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
   101b4:	70fd      	strb	r5, [r7, #3]
   101b6:	707d      	strb	r5, [r7, #1]
   101b8:	2101      	movs	r1, #1
   101ba:	4640      	mov	r0, r8
   101bc:	f009 f8df 	bl	1937e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
   101c0:	b108      	cbz	r0, 101c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
   101c2:	f000 f877 	bl	102b4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   101c6:	4620      	mov	r0, r4
   101c8:	f7ff fe7c 	bl	fec4 <MPSL_IRQ_CLOCK_Handler+0x1d8>
   101cc:	727d      	strb	r5, [r7, #9]
   101ce:	2000      	movs	r0, #0
   101d0:	f009 f88e 	bl	192f0 <MPSL_IRQ_RADIO_Handler+0x4>
   101d4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   101d8:	4630      	mov	r0, r6
   101da:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
   101de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101e2:	2900      	cmp	r1, #0
   101e4:	d0fb      	beq.n	101de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   101e6:	2920      	cmp	r1, #32
   101e8:	d8f9      	bhi.n	101de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   101ea:	78a1      	ldrb	r1, [r4, #2]
   101ec:	2921      	cmp	r1, #33	; 0x21
   101ee:	d8f6      	bhi.n	101de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   101f0:	2901      	cmp	r1, #1
   101f2:	d1c2      	bne.n	1017a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
   101f4:	e7f3      	b.n	101de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   101f6:	0000      	.short	0x0000
   101f8:	20000030 	.word	0x20000030

000101fc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
   101fc:	4801      	ldr	r0, [pc, #4]	; (10204 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
   101fe:	8980      	ldrh	r0, [r0, #12]
   10200:	4770      	bx	lr
   10202:	0000      	.short	0x0000
   10204:	20000030 	.word	0x20000030

00010208 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
   10208:	4802      	ldr	r0, [pc, #8]	; (10214 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
   1020a:	7a80      	ldrb	r0, [r0, #10]
   1020c:	2800      	cmp	r0, #0
   1020e:	d000      	beq.n	10212 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
   10210:	2001      	movs	r0, #1
   10212:	4770      	bx	lr
   10214:	20000030 	.word	0x20000030

00010218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
   10218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1021a:	4d1f      	ldr	r5, [pc, #124]	; (10298 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   1021c:	7ae8      	ldrb	r0, [r5, #11]
   1021e:	2800      	cmp	r0, #0
   10220:	d10f      	bne.n	10242 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   10222:	7e28      	ldrb	r0, [r5, #24]
   10224:	f000 0003 	and.w	r0, r0, #3
   10228:	f009 f8c5 	bl	193b6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   1022c:	2800      	cmp	r0, #0
   1022e:	d008      	beq.n	10242 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   10230:	f3ef 8110 	mrs	r1, PRIMASK
   10234:	b672      	cpsid	i
   10236:	f7ff ffe7 	bl	10208 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   1023a:	b118      	cbz	r0, 10244 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
   1023c:	2900      	cmp	r1, #0
   1023e:	d100      	bne.n	10242 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   10240:	b662      	cpsie	i
   10242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10244:	2601      	movs	r6, #1
   10246:	72ae      	strb	r6, [r5, #10]
   10248:	b901      	cbnz	r1, 1024c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
   1024a:	b662      	cpsie	i
   1024c:	2018      	movs	r0, #24
   1024e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   10252:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   10256:	61a6      	str	r6, [r4, #24]
   10258:	f44f 7020 	mov.w	r0, #640	; 0x280
   1025c:	f8ad 0000 	strh.w	r0, [sp]
   10260:	f8bd 0000 	ldrh.w	r0, [sp]
   10264:	1e41      	subs	r1, r0, #1
   10266:	f8ad 1000 	strh.w	r1, [sp]
   1026a:	d2f9      	bcs.n	10260 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
   1026c:	2700      	movs	r7, #0
   1026e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
   10272:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   10276:	4808      	ldr	r0, [pc, #32]	; (10298 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   10278:	3008      	adds	r0, #8
   1027a:	f009 f902 	bl	19482 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   1027e:	702f      	strb	r7, [r5, #0]
   10280:	f7ff fd78 	bl	fd74 <MPSL_IRQ_CLOCK_Handler+0x88>
   10284:	6166      	str	r6, [r4, #20]
   10286:	7968      	ldrb	r0, [r5, #5]
   10288:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1028c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   10290:	2018      	movs	r0, #24
   10292:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   10296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10298:	20000030 	.word	0x20000030

0001029c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
   1029c:	b510      	push	{r4, lr}
   1029e:	4c04      	ldr	r4, [pc, #16]	; (102b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
   102a0:	7e20      	ldrb	r0, [r4, #24]
   102a2:	f000 0003 	and.w	r0, r0, #3
   102a6:	f009 f886 	bl	193b6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   102aa:	2800      	cmp	r0, #0
   102ac:	d0f8      	beq.n	102a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
   102ae:	bd10      	pop	{r4, pc}
   102b0:	20000030 	.word	0x20000030

000102b4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
   102b4:	4901      	ldr	r1, [pc, #4]	; (102bc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
   102b6:	2001      	movs	r0, #1
   102b8:	7008      	strb	r0, [r1, #0]
   102ba:	4770      	bx	lr
   102bc:	20000288 	.word	0x20000288

000102c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
   102c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   102c4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   102c8:	b918      	cbnz	r0, 102d2 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
   102ca:	4803      	ldr	r0, [pc, #12]	; (102d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
   102cc:	7800      	ldrb	r0, [r0, #0]
   102ce:	2800      	cmp	r0, #0
   102d0:	d000      	beq.n	102d4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
   102d2:	2001      	movs	r0, #1
   102d4:	4770      	bx	lr
   102d6:	0000      	.short	0x0000
   102d8:	20000288 	.word	0x20000288

000102dc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
   102dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   102e0:	2101      	movs	r1, #1
   102e2:	6041      	str	r1, [r0, #4]
   102e4:	2100      	movs	r1, #0
   102e6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   102ea:	4801      	ldr	r0, [pc, #4]	; (102f0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
   102ec:	7001      	strb	r1, [r0, #0]
   102ee:	4770      	bx	lr
   102f0:	20000288 	.word	0x20000288

000102f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
   102f4:	4802      	ldr	r0, [pc, #8]	; (10300 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
   102f6:	6800      	ldr	r0, [r0, #0]
   102f8:	f000 0003 	and.w	r0, r0, #3
   102fc:	4770      	bx	lr
   102fe:	0000      	.short	0x0000
   10300:	4000041c 	.word	0x4000041c
   10304:	b510      	push	{r4, lr}
   10306:	b131      	cbz	r1, 10316 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
   10308:	2901      	cmp	r1, #1
   1030a:	d007      	beq.n	1031c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
   1030c:	f240 3102 	movw	r1, #770	; 0x302
   10310:	a005      	add	r0, pc, #20	; (adr r0, 10328 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
   10312:	f000 f821 	bl	10358 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
   10316:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
   1031a:	e001      	b.n	10320 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
   1031c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
   10320:	f000 0001 	and.w	r0, r0, #1
   10324:	bd10      	pop	{r4, pc}
   10326:	0000      	.short	0x0000
   10328:	5f66726e 	.word	0x5f66726e
   1032c:	636f6c63 	.word	0x636f6c63
   10330:	00682e6b 	.word	0x00682e6b
   10334:	f3bf 8f4f 	dsb	sy
   10338:	4805      	ldr	r0, [pc, #20]	; (10350 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
   1033a:	6801      	ldr	r1, [r0, #0]
   1033c:	4a05      	ldr	r2, [pc, #20]	; (10354 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
   1033e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   10342:	4311      	orrs	r1, r2
   10344:	6001      	str	r1, [r0, #0]
   10346:	f3bf 8f4f 	dsb	sy
   1034a:	bf00      	nop
   1034c:	e7fd      	b.n	1034a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
   1034e:	0000      	.short	0x0000
   10350:	e000ed0c 	.word	0xe000ed0c
   10354:	05fa0004 	.word	0x05fa0004

00010358 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
   10358:	b672      	cpsid	i
   1035a:	4a03      	ldr	r2, [pc, #12]	; (10368 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
   1035c:	6852      	ldr	r2, [r2, #4]
   1035e:	b102      	cbz	r2, 10362 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
   10360:	4790      	blx	r2
   10362:	f7ff ffe7 	bl	10334 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   10366:	0000      	.short	0x0000
   10368:	20000050 	.word	0x20000050
   1036c:	4806      	ldr	r0, [pc, #24]	; (10388 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
   1036e:	b510      	push	{r4, lr}
   10370:	2100      	movs	r1, #0
   10372:	6001      	str	r1, [r0, #0]
   10374:	2101      	movs	r1, #1
   10376:	6001      	str	r1, [r0, #0]
   10378:	4608      	mov	r0, r1
   1037a:	f009 f843 	bl	19404 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   1037e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10382:	2001      	movs	r0, #1
   10384:	f009 b831 	b.w	193ea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   10388:	40001ffc 	.word	0x40001ffc
   1038c:	4807      	ldr	r0, [pc, #28]	; (103ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
   1038e:	b510      	push	{r4, lr}
   10390:	2101      	movs	r1, #1
   10392:	6041      	str	r1, [r0, #4]
   10394:	1e89      	subs	r1, r1, #2
   10396:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   1039a:	200c      	movs	r0, #12
   1039c:	f009 f832 	bl	19404 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   103a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103a4:	200c      	movs	r0, #12
   103a6:	f009 b820 	b.w	193ea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   103aa:	0000      	.short	0x0000
   103ac:	4000c000 	.word	0x4000c000

000103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
   103b0:	b50e      	push	{r1, r2, r3, lr}
   103b2:	b672      	cpsid	i
   103b4:	4a0f      	ldr	r2, [pc, #60]	; (103f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
   103b6:	6855      	ldr	r5, [r2, #4]
   103b8:	b1d5      	cbz	r5, 103f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
   103ba:	2200      	movs	r2, #0
   103bc:	4603      	mov	r3, r0
   103be:	466e      	mov	r6, sp
   103c0:	240a      	movs	r4, #10
   103c2:	e003      	b.n	103cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
   103c4:	fbb0 f0f4 	udiv	r0, r0, r4
   103c8:	1c52      	adds	r2, r2, #1
   103ca:	b2d2      	uxtb	r2, r2
   103cc:	2800      	cmp	r0, #0
   103ce:	d1f9      	bne.n	103c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
   103d0:	54b0      	strb	r0, [r6, r2]
   103d2:	e009      	b.n	103e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
   103d4:	fbb3 f0f4 	udiv	r0, r3, r4
   103d8:	fb04 3010 	mls	r0, r4, r0, r3
   103dc:	fbb3 f3f4 	udiv	r3, r3, r4
   103e0:	1e52      	subs	r2, r2, #1
   103e2:	b2d2      	uxtb	r2, r2
   103e4:	3030      	adds	r0, #48	; 0x30
   103e6:	54b0      	strb	r0, [r6, r2]
   103e8:	2a00      	cmp	r2, #0
   103ea:	d1f3      	bne.n	103d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
   103ec:	4630      	mov	r0, r6
   103ee:	47a8      	blx	r5
   103f0:	f7ff ffa0 	bl	10334 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   103f4:	20000050 	.word	0x20000050

000103f8 <mpsl_init>:
   103f8:	b570      	push	{r4, r5, r6, lr}
   103fa:	4c17      	ldr	r4, [pc, #92]	; (10458 <mpsl_init+0x60>)
   103fc:	4606      	mov	r6, r0
   103fe:	460d      	mov	r5, r1
   10400:	7860      	ldrb	r0, [r4, #1]
   10402:	b110      	cbz	r0, 1040a <mpsl_init+0x12>
   10404:	f04f 30ff 	mov.w	r0, #4294967295
   10408:	bd70      	pop	{r4, r5, r6, pc}
   1040a:	b906      	cbnz	r6, 1040e <mpsl_init+0x16>
   1040c:	4e13      	ldr	r6, [pc, #76]	; (1045c <mpsl_init+0x64>)
   1040e:	6062      	str	r2, [r4, #4]
   10410:	7025      	strb	r5, [r4, #0]
   10412:	f7ff ffab 	bl	1036c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
   10416:	f7ff ffb9 	bl	1038c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
   1041a:	4630      	mov	r0, r6
   1041c:	f7ff fe9c 	bl	10158 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
   10420:	0006      	movs	r6, r0
   10422:	d1f1      	bne.n	10408 <mpsl_init+0x10>
   10424:	f7fe fee6 	bl	f1f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
   10428:	f7ff fef6 	bl	10218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   1042c:	f008 feb8 	bl	191a0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
   10430:	4628      	mov	r0, r5
   10432:	f008 ffda 	bl	193ea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   10436:	2001      	movs	r0, #1
   10438:	2d00      	cmp	r5, #0
   1043a:	db09      	blt.n	10450 <mpsl_init+0x58>
   1043c:	f005 011f 	and.w	r1, r5, #31
   10440:	fa00 f101 	lsl.w	r1, r0, r1
   10444:	096a      	lsrs	r2, r5, #5
   10446:	0092      	lsls	r2, r2, #2
   10448:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   1044c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   10450:	7060      	strb	r0, [r4, #1]
   10452:	4630      	mov	r0, r6
   10454:	bd70      	pop	{r4, r5, r6, pc}
   10456:	0000      	.short	0x0000
   10458:	20000050 	.word	0x20000050
   1045c:	00019426 	.word	0x00019426

00010460 <mpsl_is_initialized>:
   10460:	4801      	ldr	r0, [pc, #4]	; (10468 <mpsl_is_initialized+0x8>)
   10462:	7840      	ldrb	r0, [r0, #1]
   10464:	4770      	bx	lr
   10466:	0000      	.short	0x0000
   10468:	20000050 	.word	0x20000050

0001046c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
   1046c:	4807      	ldr	r0, [pc, #28]	; (1048c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
   1046e:	f990 0000 	ldrsb.w	r0, [r0]
   10472:	2800      	cmp	r0, #0
   10474:	db09      	blt.n	1048a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
   10476:	f000 021f 	and.w	r2, r0, #31
   1047a:	2101      	movs	r1, #1
   1047c:	4091      	lsls	r1, r2
   1047e:	0940      	lsrs	r0, r0, #5
   10480:	0080      	lsls	r0, r0, #2
   10482:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10486:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1048a:	4770      	bx	lr
   1048c:	20000050 	.word	0x20000050

00010490 <mpsl_temperature_get>:
   10490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10494:	2601      	movs	r6, #1
   10496:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1049a:	0331      	lsls	r1, r6, #12
   1049c:	f04f 0800 	mov.w	r8, #0
   104a0:	4640      	mov	r0, r8
   104a2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
   104a6:	f3bf 8f4f 	dsb	sy
   104aa:	f3bf 8f6f 	isb	sy
   104ae:	4c16      	ldr	r4, [pc, #88]	; (10508 <mpsl_temperature_get+0x78>)
   104b0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   104b4:	200c      	movs	r0, #12
   104b6:	f008 ffc4 	bl	19442 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   104ba:	4d14      	ldr	r5, [pc, #80]	; (1050c <mpsl_temperature_get+0x7c>)
   104bc:	6828      	ldr	r0, [r5, #0]
   104be:	43c0      	mvns	r0, r0
   104c0:	f340 1700 	sbfx	r7, r0, #4, #1
   104c4:	6828      	ldr	r0, [r5, #0]
   104c6:	f040 0010 	orr.w	r0, r0, #16
   104ca:	6028      	str	r0, [r5, #0]
   104cc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   104d0:	6026      	str	r6, [r4, #0]
   104d2:	1c7f      	adds	r7, r7, #1
   104d4:	e002      	b.n	104dc <mpsl_temperature_get+0x4c>
   104d6:	bf00      	nop
   104d8:	f000 f890 	bl	105fc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   104dc:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   104e0:	2800      	cmp	r0, #0
   104e2:	d0f9      	beq.n	104d8 <mpsl_temperature_get+0x48>
   104e4:	b91f      	cbnz	r7, 104ee <mpsl_temperature_get+0x5e>
   104e6:	6828      	ldr	r0, [r5, #0]
   104e8:	f020 0010 	bic.w	r0, r0, #16
   104ec:	6028      	str	r0, [r5, #0]
   104ee:	4808      	ldr	r0, [pc, #32]	; (10510 <mpsl_temperature_get+0x80>)
   104f0:	6805      	ldr	r5, [r0, #0]
   104f2:	6066      	str	r6, [r4, #4]
   104f4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
   104f8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   104fc:	200c      	movs	r0, #12
   104fe:	f008 ffa0 	bl	19442 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   10502:	4628      	mov	r0, r5
   10504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10508:	4000c000 	.word	0x4000c000
   1050c:	e000ed10 	.word	0xe000ed10
   10510:	4000c508 	.word	0x4000c508

00010514 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
   10514:	b510      	push	{r4, lr}
   10516:	4602      	mov	r2, r0
   10518:	2005      	movs	r0, #5
   1051a:	490c      	ldr	r1, [pc, #48]	; (1054c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
   1051c:	e004      	b.n	10528 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
   1051e:	bf00      	nop
   10520:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   10524:	791b      	ldrb	r3, [r3, #4]
   10526:	b133      	cbz	r3, 10536 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
   10528:	1e40      	subs	r0, r0, #1
   1052a:	b2c0      	uxtb	r0, r0
   1052c:	d2f8      	bcs.n	10520 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
   1052e:	2148      	movs	r1, #72	; 0x48
   10530:	2069      	movs	r0, #105	; 0x69
   10532:	f7ff ff3d 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10536:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
   1053a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1053e:	2200      	movs	r2, #0
   10540:	714a      	strb	r2, [r1, #5]
   10542:	718a      	strb	r2, [r1, #6]
   10544:	2201      	movs	r2, #1
   10546:	710a      	strb	r2, [r1, #4]
   10548:	bd10      	pop	{r4, pc}
   1054a:	0000      	.short	0x0000
   1054c:	200011d0 	.word	0x200011d0

00010550 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
   10550:	b510      	push	{r4, lr}
   10552:	2805      	cmp	r0, #5
   10554:	d301      	bcc.n	1055a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
   10556:	2158      	movs	r1, #88	; 0x58
   10558:	e006      	b.n	10568 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
   1055a:	490a      	ldr	r1, [pc, #40]	; (10584 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
   1055c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   10560:	7901      	ldrb	r1, [r0, #4]
   10562:	2901      	cmp	r1, #1
   10564:	d003      	beq.n	1056e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
   10566:	2159      	movs	r1, #89	; 0x59
   10568:	2069      	movs	r0, #105	; 0x69
   1056a:	f7ff ff21 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1056e:	7941      	ldrb	r1, [r0, #5]
   10570:	7982      	ldrb	r2, [r0, #6]
   10572:	1c49      	adds	r1, r1, #1
   10574:	b2c9      	uxtb	r1, r1
   10576:	428a      	cmp	r2, r1
   10578:	d000      	beq.n	1057c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
   1057a:	7141      	strb	r1, [r0, #5]
   1057c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10580:	f7ff bf74 	b.w	1046c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
   10584:	200011d0 	.word	0x200011d0

00010588 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
   10588:	b570      	push	{r4, r5, r6, lr}
   1058a:	2505      	movs	r5, #5
   1058c:	4e0e      	ldr	r6, [pc, #56]	; (105c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
   1058e:	4c0f      	ldr	r4, [pc, #60]	; (105cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
   10590:	e016      	b.n	105c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   10592:	7821      	ldrb	r1, [r4, #0]
   10594:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   10598:	7902      	ldrb	r2, [r0, #4]
   1059a:	2a01      	cmp	r2, #1
   1059c:	d108      	bne.n	105b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   1059e:	7942      	ldrb	r2, [r0, #5]
   105a0:	7983      	ldrb	r3, [r0, #6]
   105a2:	429a      	cmp	r2, r3
   105a4:	d004      	beq.n	105b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   105a6:	7942      	ldrb	r2, [r0, #5]
   105a8:	7182      	strb	r2, [r0, #6]
   105aa:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   105ae:	4780      	blx	r0
   105b0:	7820      	ldrb	r0, [r4, #0]
   105b2:	1c40      	adds	r0, r0, #1
   105b4:	b2c0      	uxtb	r0, r0
   105b6:	7020      	strb	r0, [r4, #0]
   105b8:	2805      	cmp	r0, #5
   105ba:	d301      	bcc.n	105c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   105bc:	2000      	movs	r0, #0
   105be:	7020      	strb	r0, [r4, #0]
   105c0:	1e6d      	subs	r5, r5, #1
   105c2:	b2ed      	uxtb	r5, r5
   105c4:	d2e5      	bcs.n	10592 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
   105c6:	bd70      	pop	{r4, r5, r6, pc}
   105c8:	200011d0 	.word	0x200011d0
   105cc:	20000289 	.word	0x20000289

000105d0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
   105d0:	b500      	push	{lr}
   105d2:	f008 ff65 	bl	194a0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   105d6:	b940      	cbnz	r0, 105ea <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   105d8:	f008 ff6c 	bl	194b4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   105dc:	b928      	cbnz	r0, 105ea <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   105de:	f008 ff80 	bl	194e2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   105e2:	b910      	cbnz	r0, 105ea <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   105e4:	f008 ff91 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   105e8:	b108      	cbz	r0, 105ee <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
   105ea:	4802      	ldr	r0, [pc, #8]	; (105f4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
   105ec:	bd00      	pop	{pc}
   105ee:	4802      	ldr	r0, [pc, #8]	; (105f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
   105f0:	bd00      	pop	{pc}
   105f2:	0000      	.short	0x0000
   105f4:	4000050c 	.word	0x4000050c
   105f8:	4001e700 	.word	0x4001e700

000105fc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   105fc:	b510      	push	{r4, lr}
   105fe:	f008 ff84 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10602:	b330      	cbz	r0, 10652 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
   10604:	f3ef 8010 	mrs	r0, PRIMASK
   10608:	b1c8      	cbz	r0, 1063e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
   1060a:	2100      	movs	r1, #0
   1060c:	b672      	cpsid	i
   1060e:	4812      	ldr	r0, [pc, #72]	; (10658 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
   10610:	6802      	ldr	r2, [r0, #0]
   10612:	6803      	ldr	r3, [r0, #0]
   10614:	f3c2 1200 	ubfx	r2, r2, #4, #1
   10618:	f043 0310 	orr.w	r3, r3, #16
   1061c:	6003      	str	r3, [r0, #0]
   1061e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   10622:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   10626:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1062a:	431c      	orrs	r4, r3
   1062c:	d000      	beq.n	10630 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
   1062e:	bf40      	sev
   10630:	bf20      	wfe
   10632:	bf00      	nop
   10634:	bf00      	nop
   10636:	bf00      	nop
   10638:	bf00      	nop
   1063a:	b112      	cbz	r2, 10642 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
   1063c:	e005      	b.n	1064a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
   1063e:	2101      	movs	r1, #1
   10640:	e7e4      	b.n	1060c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
   10642:	6802      	ldr	r2, [r0, #0]
   10644:	f022 0210 	bic.w	r2, r2, #16
   10648:	6002      	str	r2, [r0, #0]
   1064a:	2900      	cmp	r1, #0
   1064c:	d000      	beq.n	10650 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
   1064e:	b662      	cpsie	i
   10650:	bd10      	pop	{r4, pc}
   10652:	bf20      	wfe
   10654:	bd10      	pop	{r4, pc}
   10656:	0000      	.short	0x0000
   10658:	e000ed10 	.word	0xe000ed10

0001065c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
   1065c:	0001977b 00019797 00019785 00019791     {...............
   1066c:	0001977f 00019779 00019777 0001979d     ....y...w.......
   1067c:	0001978b 00019771 00019769 0001976d     ....q...i...m...
   1068c:	00019763                                c...

00010690 <mpsl_fem_disable>:
   10690:	4801      	ldr	r0, [pc, #4]	; (10698 <mpsl_fem_disable+0x8>)
   10692:	6800      	ldr	r0, [r0, #0]
   10694:	6800      	ldr	r0, [r0, #0]
   10696:	4700      	bx	r0
   10698:	20000058 	.word	0x20000058

0001069c <mpsl_fem_lna_configuration_clear>:
   1069c:	4801      	ldr	r0, [pc, #4]	; (106a4 <mpsl_fem_lna_configuration_clear+0x8>)
   1069e:	6800      	ldr	r0, [r0, #0]
   106a0:	6900      	ldr	r0, [r0, #16]
   106a2:	4700      	bx	r0
   106a4:	20000058 	.word	0x20000058

000106a8 <mpsl_fem_lna_configuration_set>:
   106a8:	4a01      	ldr	r2, [pc, #4]	; (106b0 <mpsl_fem_lna_configuration_set+0x8>)
   106aa:	6812      	ldr	r2, [r2, #0]
   106ac:	6892      	ldr	r2, [r2, #8]
   106ae:	4710      	bx	r2
   106b0:	20000058 	.word	0x20000058

000106b4 <mpsl_fem_pa_configuration_clear>:
   106b4:	4801      	ldr	r0, [pc, #4]	; (106bc <mpsl_fem_pa_configuration_clear+0x8>)
   106b6:	6800      	ldr	r0, [r0, #0]
   106b8:	68c0      	ldr	r0, [r0, #12]
   106ba:	4700      	bx	r0
   106bc:	20000058 	.word	0x20000058

000106c0 <mpsl_fem_pa_configuration_set>:
   106c0:	4a01      	ldr	r2, [pc, #4]	; (106c8 <mpsl_fem_pa_configuration_set+0x8>)
   106c2:	6812      	ldr	r2, [r2, #0]
   106c4:	6852      	ldr	r2, [r2, #4]
   106c6:	4710      	bx	r2
   106c8:	20000058 	.word	0x20000058

000106cc <mpsl_fem_pa_is_configured>:
   106cc:	4901      	ldr	r1, [pc, #4]	; (106d4 <mpsl_fem_pa_is_configured+0x8>)
   106ce:	6809      	ldr	r1, [r1, #0]
   106d0:	6a09      	ldr	r1, [r1, #32]
   106d2:	4708      	bx	r1
   106d4:	20000058 	.word	0x20000058

000106d8 <mpsl_fem_device_config_254_apply_get>:
   106d8:	4801      	ldr	r0, [pc, #4]	; (106e0 <mpsl_fem_device_config_254_apply_get+0x8>)
   106da:	7800      	ldrb	r0, [r0, #0]
   106dc:	4770      	bx	lr
   106de:	0000      	.short	0x0000
   106e0:	2000028a 	.word	0x2000028a
   106e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   106e6:	4c17      	ldr	r4, [pc, #92]	; (10744 <mpsl_fem_device_config_254_apply_get+0x6c>)
   106e8:	7a20      	ldrb	r0, [r4, #8]
   106ea:	2802      	cmp	r0, #2
   106ec:	d200      	bcs.n	106f0 <mpsl_fem_device_config_254_apply_get+0x18>
   106ee:	2002      	movs	r0, #2
   106f0:	f88d 0001 	strb.w	r0, [sp, #1]
   106f4:	79e0      	ldrb	r0, [r4, #7]
   106f6:	2803      	cmp	r0, #3
   106f8:	d200      	bcs.n	106fc <mpsl_fem_device_config_254_apply_get+0x24>
   106fa:	2003      	movs	r0, #3
   106fc:	f88d 0000 	strb.w	r0, [sp]
   10700:	79a0      	ldrb	r0, [r4, #6]
   10702:	f8ad 0004 	strh.w	r0, [sp, #4]
   10706:	7960      	ldrb	r0, [r4, #5]
   10708:	f8ad 0002 	strh.w	r0, [sp, #2]
   1070c:	4668      	mov	r0, sp
   1070e:	f006 ffeb 	bl	176e8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
   10712:	b108      	cbz	r0, 10718 <mpsl_fem_device_config_254_apply_get+0x40>
   10714:	2184      	movs	r1, #132	; 0x84
   10716:	e010      	b.n	1073a <mpsl_fem_device_config_254_apply_get+0x62>
   10718:	68e0      	ldr	r0, [r4, #12]
   1071a:	9002      	str	r0, [sp, #8]
   1071c:	a802      	add	r0, sp, #8
   1071e:	f006 fff9 	bl	17714 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
   10722:	b108      	cbz	r0, 10728 <mpsl_fem_device_config_254_apply_get+0x50>
   10724:	2188      	movs	r1, #136	; 0x88
   10726:	e008      	b.n	1073a <mpsl_fem_device_config_254_apply_get+0x62>
   10728:	4807      	ldr	r0, [pc, #28]	; (10748 <mpsl_fem_device_config_254_apply_get+0x70>)
   1072a:	6800      	ldr	r0, [r0, #0]
   1072c:	9003      	str	r0, [sp, #12]
   1072e:	a803      	add	r0, sp, #12
   10730:	f00b fcf7 	bl	1c122 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   10734:	2800      	cmp	r0, #0
   10736:	d003      	beq.n	10740 <mpsl_fem_device_config_254_apply_get+0x68>
   10738:	218c      	movs	r1, #140	; 0x8c
   1073a:	2003      	movs	r0, #3
   1073c:	f000 f918 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10740:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   10742:	0000      	.short	0x0000
   10744:	200011f8 	.word	0x200011f8
   10748:	00010a5c 	.word	0x00010a5c
   1074c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1074e:	4604      	mov	r4, r0
   10750:	460e      	mov	r6, r1
   10752:	f100 0003 	add.w	r0, r0, #3
   10756:	f020 0003 	bic.w	r0, r0, #3
   1075a:	f04f 0100 	mov.w	r1, #0
   1075e:	e9cd 0100 	strd	r0, r1, [sp]
   10762:	7831      	ldrb	r1, [r6, #0]
   10764:	0015      	movs	r5, r2
   10766:	f88d 1005 	strb.w	r1, [sp, #5]
   1076a:	d000      	beq.n	1076e <mpsl_fem_device_config_254_apply_get+0x96>
   1076c:	2000      	movs	r0, #0
   1076e:	a901      	add	r1, sp, #4
   10770:	f000 faee 	bl	10d50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
   10774:	9900      	ldr	r1, [sp, #0]
   10776:	4408      	add	r0, r1
   10778:	490c      	ldr	r1, [pc, #48]	; (107ac <mpsl_fem_device_config_254_apply_get+0xd4>)
   1077a:	9000      	str	r0, [sp, #0]
   1077c:	78c9      	ldrb	r1, [r1, #3]
   1077e:	b149      	cbz	r1, 10794 <mpsl_fem_device_config_254_apply_get+0xbc>
   10780:	7c31      	ldrb	r1, [r6, #16]
   10782:	b139      	cbz	r1, 10794 <mpsl_fem_device_config_254_apply_get+0xbc>
   10784:	2225      	movs	r2, #37	; 0x25
   10786:	b105      	cbz	r5, 1078a <mpsl_fem_device_config_254_apply_get+0xb2>
   10788:	2000      	movs	r0, #0
   1078a:	f000 fd29 	bl	111e0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
   1078e:	9900      	ldr	r1, [sp, #0]
   10790:	4408      	add	r0, r1
   10792:	9000      	str	r0, [sp, #0]
   10794:	462a      	mov	r2, r5
   10796:	4631      	mov	r1, r6
   10798:	4668      	mov	r0, sp
   1079a:	f009 f801 	bl	197a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
   1079e:	9800      	ldr	r0, [sp, #0]
   107a0:	1dc0      	adds	r0, r0, #7
   107a2:	f020 0007 	bic.w	r0, r0, #7
   107a6:	9000      	str	r0, [sp, #0]
   107a8:	1b00      	subs	r0, r0, r4
   107aa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   107ac:	2000005c 	.word	0x2000005c

000107b0 <sdc_build_revision_get>:
   107b0:	b510      	push	{r4, lr}
   107b2:	b128      	cbz	r0, 107c0 <sdc_build_revision_get+0x10>
   107b4:	2214      	movs	r2, #20
   107b6:	4904      	ldr	r1, [pc, #16]	; (107c8 <sdc_build_revision_get+0x18>)
   107b8:	f008 fef9 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   107bc:	2000      	movs	r0, #0
   107be:	bd10      	pop	{r4, pc}
   107c0:	f06f 0015 	mvn.w	r0, #21
   107c4:	bd10      	pop	{r4, pc}
   107c6:	0000      	.short	0x0000
   107c8:	00010a78 	.word	0x00010a78

000107cc <sdc_cfg_set>:
   107cc:	b570      	push	{r4, r5, r6, lr}
   107ce:	0003      	movs	r3, r0
   107d0:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   107d4:	d103      	bne.n	107de <sdc_cfg_set+0x12>
   107d6:	4c2a      	ldr	r4, [pc, #168]	; (10880 <sdc_cfg_set+0xb4>)
   107d8:	7863      	ldrb	r3, [r4, #1]
   107da:	b10b      	cbz	r3, 107e0 <sdc_cfg_set+0x14>
   107dc:	1180      	asrs	r0, r0, #6
   107de:	bd70      	pop	{r4, r5, r6, pc}
   107e0:	b319      	cbz	r1, 1082a <sdc_cfg_set+0x5e>
   107e2:	f06f 0515 	mvn.w	r5, #21
   107e6:	b38a      	cbz	r2, 1084c <sdc_cfg_set+0x80>
   107e8:	4b26      	ldr	r3, [pc, #152]	; (10884 <sdc_cfg_set+0xb8>)
   107ea:	290c      	cmp	r1, #12
   107ec:	d243      	bcs.n	10876 <sdc_cfg_set+0xaa>
   107ee:	e8df f001 	tbb	[pc, r1]
   107f2:	0642      	.short	0x0642
   107f4:	13100c09 	.word	0x13100c09
   107f8:	2818251d 	.word	0x2818251d
   107fc:	332e      	.short	0x332e
   107fe:	7810      	ldrb	r0, [r2, #0]
   10800:	7018      	strb	r0, [r3, #0]
   10802:	e02d      	b.n	10860 <sdc_cfg_set+0x94>
   10804:	7810      	ldrb	r0, [r2, #0]
   10806:	7058      	strb	r0, [r3, #1]
   10808:	e02a      	b.n	10860 <sdc_cfg_set+0x94>
   1080a:	6810      	ldr	r0, [r2, #0]
   1080c:	f8c3 0005 	str.w	r0, [r3, #5]
   10810:	e026      	b.n	10860 <sdc_cfg_set+0x94>
   10812:	6810      	ldr	r0, [r2, #0]
   10814:	60d8      	str	r0, [r3, #12]
   10816:	e023      	b.n	10860 <sdc_cfg_set+0x94>
   10818:	7811      	ldrb	r1, [r2, #0]
   1081a:	2900      	cmp	r1, #0
   1081c:	d1df      	bne.n	107de <sdc_cfg_set+0x12>
   1081e:	7099      	strb	r1, [r3, #2]
   10820:	e01e      	b.n	10860 <sdc_cfg_set+0x94>
   10822:	7811      	ldrb	r1, [r2, #0]
   10824:	2900      	cmp	r1, #0
   10826:	d1da      	bne.n	107de <sdc_cfg_set+0x12>
   10828:	70d9      	strb	r1, [r3, #3]
   1082a:	e019      	b.n	10860 <sdc_cfg_set+0x94>
   1082c:	78e0      	ldrb	r0, [r4, #3]
   1082e:	b110      	cbz	r0, 10836 <sdc_cfg_set+0x6a>
   10830:	7810      	ldrb	r0, [r2, #0]
   10832:	2802      	cmp	r0, #2
   10834:	d31f      	bcc.n	10876 <sdc_cfg_set+0xaa>
   10836:	7810      	ldrb	r0, [r2, #0]
   10838:	7418      	strb	r0, [r3, #16]
   1083a:	e011      	b.n	10860 <sdc_cfg_set+0x94>
   1083c:	8810      	ldrh	r0, [r2, #0]
   1083e:	8258      	strh	r0, [r3, #18]
   10840:	e00e      	b.n	10860 <sdc_cfg_set+0x94>
   10842:	7811      	ldrb	r1, [r2, #0]
   10844:	2900      	cmp	r1, #0
   10846:	d1ca      	bne.n	107de <sdc_cfg_set+0x12>
   10848:	7119      	strb	r1, [r3, #4]
   1084a:	e009      	b.n	10860 <sdc_cfg_set+0x94>
   1084c:	e013      	b.n	10876 <sdc_cfg_set+0xaa>
   1084e:	7810      	ldrb	r0, [r2, #0]
   10850:	2802      	cmp	r0, #2
   10852:	d310      	bcc.n	10876 <sdc_cfg_set+0xaa>
   10854:	7518      	strb	r0, [r3, #20]
   10856:	e003      	b.n	10860 <sdc_cfg_set+0x94>
   10858:	7811      	ldrb	r1, [r2, #0]
   1085a:	2900      	cmp	r1, #0
   1085c:	d1bf      	bne.n	107de <sdc_cfg_set+0x12>
   1085e:	7559      	strb	r1, [r3, #21]
   10860:	2201      	movs	r2, #1
   10862:	4908      	ldr	r1, [pc, #32]	; (10884 <sdc_cfg_set+0xb8>)
   10864:	2000      	movs	r0, #0
   10866:	f7ff ff71 	bl	1074c <mpsl_fem_device_config_254_apply_get+0x74>
   1086a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1086e:	db04      	blt.n	1087a <sdc_cfg_set+0xae>
   10870:	f06f 000b 	mvn.w	r0, #11
   10874:	bd70      	pop	{r4, r5, r6, pc}
   10876:	4628      	mov	r0, r5
   10878:	bd70      	pop	{r4, r5, r6, pc}
   1087a:	2101      	movs	r1, #1
   1087c:	70a1      	strb	r1, [r4, #2]
   1087e:	bd70      	pop	{r4, r5, r6, pc}
   10880:	2000005c 	.word	0x2000005c
   10884:	200011f8 	.word	0x200011f8

00010888 <sdc_enable>:
   10888:	b570      	push	{r4, r5, r6, lr}
   1088a:	460c      	mov	r4, r1
   1088c:	0005      	movs	r5, r0
   1088e:	d019      	beq.n	108c4 <sdc_enable+0x3c>
   10890:	b1c4      	cbz	r4, 108c4 <sdc_enable+0x3c>
   10892:	f000 f925 	bl	10ae0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
   10896:	b1c0      	cbz	r0, 108ca <sdc_enable+0x42>
   10898:	4628      	mov	r0, r5
   1089a:	f7ff fe3b 	bl	10514 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   1089e:	4d0c      	ldr	r5, [pc, #48]	; (108d0 <sdc_enable+0x48>)
   108a0:	2200      	movs	r2, #0
   108a2:	490c      	ldr	r1, [pc, #48]	; (108d4 <sdc_enable+0x4c>)
   108a4:	7028      	strb	r0, [r5, #0]
   108a6:	4620      	mov	r0, r4
   108a8:	f7ff ff50 	bl	1074c <mpsl_fem_device_config_254_apply_get+0x74>
   108ac:	f00c f83a 	bl	1c924 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
   108b0:	2100      	movs	r1, #0
   108b2:	7828      	ldrb	r0, [r5, #0]
   108b4:	f007 f912 	bl	17adc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
   108b8:	f7ff ff14 	bl	106e4 <mpsl_fem_device_config_254_apply_get+0xc>
   108bc:	2001      	movs	r0, #1
   108be:	7068      	strb	r0, [r5, #1]
   108c0:	2000      	movs	r0, #0
   108c2:	bd70      	pop	{r4, r5, r6, pc}
   108c4:	f06f 0015 	mvn.w	r0, #21
   108c8:	bd70      	pop	{r4, r5, r6, pc}
   108ca:	f04f 30ff 	mov.w	r0, #4294967295
   108ce:	bd70      	pop	{r4, r5, r6, pc}
   108d0:	2000005c 	.word	0x2000005c
   108d4:	200011f8 	.word	0x200011f8

000108d8 <sdc_init>:
   108d8:	b530      	push	{r4, r5, lr}
   108da:	b087      	sub	sp, #28
   108dc:	0005      	movs	r5, r0
   108de:	d00c      	beq.n	108fa <sdc_init+0x22>
   108e0:	f7ff fdbe 	bl	10460 <mpsl_is_initialized>
   108e4:	f04f 34ff 	mov.w	r4, #4294967295
   108e8:	b120      	cbz	r0, 108f4 <sdc_init+0x1c>
   108ea:	f7ff fc87 	bl	101fc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   108ee:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   108f2:	d905      	bls.n	10900 <sdc_init+0x28>
   108f4:	4620      	mov	r0, r4
   108f6:	b007      	add	sp, #28
   108f8:	bd30      	pop	{r4, r5, pc}
   108fa:	f06f 0015 	mvn.w	r0, #21
   108fe:	e7fa      	b.n	108f6 <sdc_init+0x1e>
   10900:	4c15      	ldr	r4, [pc, #84]	; (10958 <sdc_init+0x80>)
   10902:	4816      	ldr	r0, [pc, #88]	; (1095c <sdc_init+0x84>)
   10904:	6065      	str	r5, [r4, #4]
   10906:	f000 f9e5 	bl	10cd4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
   1090a:	2000      	movs	r0, #0
   1090c:	7060      	strb	r0, [r4, #1]
   1090e:	70a0      	strb	r0, [r4, #2]
   10910:	70e0      	strb	r0, [r4, #3]
   10912:	4601      	mov	r1, r0
   10914:	2218      	movs	r2, #24
   10916:	4668      	mov	r0, sp
   10918:	f008 fec3 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1091c:	2218      	movs	r2, #24
   1091e:	4910      	ldr	r1, [pc, #64]	; (10960 <sdc_init+0x88>)
   10920:	4668      	mov	r0, sp
   10922:	f008 fe44 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10926:	2218      	movs	r2, #24
   10928:	4669      	mov	r1, sp
   1092a:	480e      	ldr	r0, [pc, #56]	; (10964 <sdc_init+0x8c>)
   1092c:	f008 fe3f 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10930:	f3ef 8410 	mrs	r4, PRIMASK
   10934:	b672      	cpsid	i
   10936:	480c      	ldr	r0, [pc, #48]	; (10968 <sdc_init+0x90>)
   10938:	f06f 010c 	mvn.w	r1, #12
   1093c:	f000 fcf2 	bl	11324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
   10940:	480a      	ldr	r0, [pc, #40]	; (1096c <sdc_init+0x94>)
   10942:	f000 fdbf 	bl	114c4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
   10946:	b118      	cbz	r0, 10950 <sdc_init+0x78>
   10948:	219a      	movs	r1, #154	; 0x9a
   1094a:	2003      	movs	r0, #3
   1094c:	f000 f810 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10950:	b904      	cbnz	r4, 10954 <sdc_init+0x7c>
   10952:	b662      	cpsie	i
   10954:	2000      	movs	r0, #0
   10956:	e7ce      	b.n	108f6 <sdc_init+0x1e>
   10958:	2000005c 	.word	0x2000005c
   1095c:	000106e5 	.word	0x000106e5
   10960:	00010a60 	.word	0x00010a60
   10964:	200011f8 	.word	0x200011f8
   10968:	4000c000 	.word	0x4000c000
   1096c:	00010b0d 	.word	0x00010b0d

00010970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
   10970:	b50e      	push	{r1, r2, r3, lr}
   10972:	b672      	cpsid	i
   10974:	4a15      	ldr	r2, [pc, #84]	; (109cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
   10976:	6855      	ldr	r5, [r2, #4]
   10978:	b1d5      	cbz	r5, 109b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
   1097a:	2200      	movs	r2, #0
   1097c:	4603      	mov	r3, r0
   1097e:	466e      	mov	r6, sp
   10980:	240a      	movs	r4, #10
   10982:	e003      	b.n	1098c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
   10984:	fbb0 f0f4 	udiv	r0, r0, r4
   10988:	1c52      	adds	r2, r2, #1
   1098a:	b2d2      	uxtb	r2, r2
   1098c:	2800      	cmp	r0, #0
   1098e:	d1f9      	bne.n	10984 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
   10990:	54b0      	strb	r0, [r6, r2]
   10992:	e009      	b.n	109a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
   10994:	fbb3 f0f4 	udiv	r0, r3, r4
   10998:	fb04 3010 	mls	r0, r4, r0, r3
   1099c:	fbb3 f3f4 	udiv	r3, r3, r4
   109a0:	1e52      	subs	r2, r2, #1
   109a2:	b2d2      	uxtb	r2, r2
   109a4:	3030      	adds	r0, #48	; 0x30
   109a6:	54b0      	strb	r0, [r6, r2]
   109a8:	2a00      	cmp	r2, #0
   109aa:	d1f3      	bne.n	10994 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
   109ac:	4630      	mov	r0, r6
   109ae:	47a8      	blx	r5
   109b0:	f3bf 8f4f 	dsb	sy
   109b4:	4806      	ldr	r0, [pc, #24]	; (109d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
   109b6:	6801      	ldr	r1, [r0, #0]
   109b8:	4a06      	ldr	r2, [pc, #24]	; (109d4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
   109ba:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   109be:	4311      	orrs	r1, r2
   109c0:	6001      	str	r1, [r0, #0]
   109c2:	f3bf 8f4f 	dsb	sy
   109c6:	bf00      	nop
   109c8:	e7fd      	b.n	109c6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
   109ca:	0000      	.short	0x0000
   109cc:	2000005c 	.word	0x2000005c
   109d0:	e000ed0c 	.word	0xe000ed0c
   109d4:	05fa0004 	.word	0x05fa0004

000109d8 <sdc_support_dle>:
   109d8:	4806      	ldr	r0, [pc, #24]	; (109f4 <sdc_support_dle+0x1c>)
   109da:	b510      	push	{r4, lr}
   109dc:	7881      	ldrb	r1, [r0, #2]
   109de:	7840      	ldrb	r0, [r0, #1]
   109e0:	4301      	orrs	r1, r0
   109e2:	d002      	beq.n	109ea <sdc_support_dle+0x12>
   109e4:	f04f 30ff 	mov.w	r0, #4294967295
   109e8:	bd10      	pop	{r4, pc}
   109ea:	f006 fee9 	bl	177c0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
   109ee:	2000      	movs	r0, #0
   109f0:	bd10      	pop	{r4, pc}
   109f2:	0000      	.short	0x0000
   109f4:	2000005c 	.word	0x2000005c

000109f8 <sdc_support_le_2m_phy>:
   109f8:	4806      	ldr	r0, [pc, #24]	; (10a14 <sdc_support_le_2m_phy+0x1c>)
   109fa:	b510      	push	{r4, lr}
   109fc:	7881      	ldrb	r1, [r0, #2]
   109fe:	7840      	ldrb	r0, [r0, #1]
   10a00:	4301      	orrs	r1, r0
   10a02:	d002      	beq.n	10a0a <sdc_support_le_2m_phy+0x12>
   10a04:	f04f 30ff 	mov.w	r0, #4294967295
   10a08:	bd10      	pop	{r4, pc}
   10a0a:	f00b fc37 	bl	1c27c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
   10a0e:	2000      	movs	r0, #0
   10a10:	bd10      	pop	{r4, pc}
   10a12:	0000      	.short	0x0000
   10a14:	2000005c 	.word	0x2000005c

00010a18 <sdc_support_master>:
   10a18:	4806      	ldr	r0, [pc, #24]	; (10a34 <sdc_support_master+0x1c>)
   10a1a:	b510      	push	{r4, lr}
   10a1c:	7881      	ldrb	r1, [r0, #2]
   10a1e:	7840      	ldrb	r0, [r0, #1]
   10a20:	4301      	orrs	r1, r0
   10a22:	d002      	beq.n	10a2a <sdc_support_master+0x12>
   10a24:	f04f 30ff 	mov.w	r0, #4294967295
   10a28:	bd10      	pop	{r4, pc}
   10a2a:	f007 f88d 	bl	17b48 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
   10a2e:	2000      	movs	r0, #0
   10a30:	bd10      	pop	{r4, pc}
   10a32:	0000      	.short	0x0000
   10a34:	2000005c 	.word	0x2000005c

00010a38 <sdc_support_scan>:
   10a38:	4807      	ldr	r0, [pc, #28]	; (10a58 <sdc_support_scan+0x20>)
   10a3a:	b510      	push	{r4, lr}
   10a3c:	7881      	ldrb	r1, [r0, #2]
   10a3e:	7842      	ldrb	r2, [r0, #1]
   10a40:	4311      	orrs	r1, r2
   10a42:	d002      	beq.n	10a4a <sdc_support_scan+0x12>
   10a44:	f04f 30ff 	mov.w	r0, #4294967295
   10a48:	bd10      	pop	{r4, pc}
   10a4a:	2101      	movs	r1, #1
   10a4c:	70c1      	strb	r1, [r0, #3]
   10a4e:	f007 f869 	bl	17b24 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
   10a52:	2000      	movs	r0, #0
   10a54:	bd10      	pop	{r4, pc}
   10a56:	0000      	.short	0x0000
   10a58:	2000005c 	.word	0x2000005c
   10a5c:	00000001 	.word	0x00000001
   10a60:	00010101 	.word	0x00010101
   10a64:	031b1b00 	.word	0x031b1b00
   10a68:	00000002 	.word	0x00000002
   10a6c:	00001d4c 	.word	0x00001d4c
   10a70:	001f0003 	.word	0x001f0003
   10a74:	00000000 	.word	0x00000000
   10a78:	66c5e70e 	.word	0x66c5e70e
   10a7c:	ac3c1867 	.word	0xac3c1867
   10a80:	81ccd2b3 	.word	0x81ccd2b3
   10a84:	c0f1dca3 	.word	0xc0f1dca3
   10a88:	220236c0 	.word	0x220236c0

00010a8c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
   10a8c:	4a05      	ldr	r2, [pc, #20]	; (10aa4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
   10a8e:	b510      	push	{r4, lr}
   10a90:	6852      	ldr	r2, [r2, #4]
   10a92:	b112      	cbz	r2, 10a9a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
   10a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a98:	4710      	bx	r2
   10a9a:	2183      	movs	r1, #131	; 0x83
   10a9c:	2004      	movs	r0, #4
   10a9e:	f7ff ff67 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10aa2:	0000      	.short	0x0000
   10aa4:	20001210 	.word	0x20001210

00010aa8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
   10aa8:	4a05      	ldr	r2, [pc, #20]	; (10ac0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
   10aaa:	b510      	push	{r4, lr}
   10aac:	6812      	ldr	r2, [r2, #0]
   10aae:	b112      	cbz	r2, 10ab6 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
   10ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ab4:	4710      	bx	r2
   10ab6:	217d      	movs	r1, #125	; 0x7d
   10ab8:	2004      	movs	r0, #4
   10aba:	f7ff ff59 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10abe:	0000      	.short	0x0000
   10ac0:	20001210 	.word	0x20001210

00010ac4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
   10ac4:	4a05      	ldr	r2, [pc, #20]	; (10adc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
   10ac6:	b510      	push	{r4, lr}
   10ac8:	6892      	ldr	r2, [r2, #8]
   10aca:	b112      	cbz	r2, 10ad2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
   10acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ad0:	4710      	bx	r2
   10ad2:	2189      	movs	r1, #137	; 0x89
   10ad4:	2004      	movs	r0, #4
   10ad6:	f7ff ff4b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ada:	0000      	.short	0x0000
   10adc:	20001210 	.word	0x20001210

00010ae0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
   10ae0:	4805      	ldr	r0, [pc, #20]	; (10af8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
   10ae2:	6801      	ldr	r1, [r0, #0]
   10ae4:	b129      	cbz	r1, 10af2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10ae6:	6841      	ldr	r1, [r0, #4]
   10ae8:	b119      	cbz	r1, 10af2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10aea:	6880      	ldr	r0, [r0, #8]
   10aec:	b108      	cbz	r0, 10af2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10aee:	2001      	movs	r0, #1
   10af0:	4770      	bx	lr
   10af2:	2000      	movs	r0, #0
   10af4:	4770      	bx	lr
   10af6:	0000      	.short	0x0000
   10af8:	20001210 	.word	0x20001210

00010afc <sdc_rand_source_register>:
   10afc:	4902      	ldr	r1, [pc, #8]	; (10b08 <sdc_rand_source_register+0xc>)
   10afe:	c80d      	ldmia	r0, {r0, r2, r3}
   10b00:	e881 000d 	stmia.w	r1, {r0, r2, r3}
   10b04:	2000      	movs	r0, #0
   10b06:	4770      	bx	lr
   10b08:	20001210 	.word	0x20001210

00010b0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
   10b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b0e:	4c12      	ldr	r4, [pc, #72]	; (10b58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
   10b10:	2600      	movs	r6, #0
   10b12:	6825      	ldr	r5, [r4, #0]
   10b14:	e011      	b.n	10b3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   10b16:	9800      	ldr	r0, [sp, #0]
   10b18:	2802      	cmp	r0, #2
   10b1a:	d002      	beq.n	10b22 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
   10b1c:	2803      	cmp	r0, #3
   10b1e:	d10c      	bne.n	10b3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   10b20:	e006      	b.n	10b30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
   10b22:	6820      	ldr	r0, [r4, #0]
   10b24:	b110      	cbz	r0, 10b2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
   10b26:	2000      	movs	r0, #0
   10b28:	6026      	str	r6, [r4, #0]
   10b2a:	e005      	b.n	10b38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
   10b2c:	2128      	movs	r1, #40	; 0x28
   10b2e:	e00c      	b.n	10b4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   10b30:	6820      	ldr	r0, [r4, #0]
   10b32:	b168      	cbz	r0, 10b50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
   10b34:	2001      	movs	r0, #1
   10b36:	6026      	str	r6, [r4, #0]
   10b38:	47a8      	blx	r5
   10b3a:	4668      	mov	r0, sp
   10b3c:	f000 fc94 	bl	11468 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
   10b40:	2800      	cmp	r0, #0
   10b42:	d0e8      	beq.n	10b16 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
   10b44:	2805      	cmp	r0, #5
   10b46:	d005      	beq.n	10b54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
   10b48:	2135      	movs	r1, #53	; 0x35
   10b4a:	2004      	movs	r0, #4
   10b4c:	f7ff ff10 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b50:	212d      	movs	r1, #45	; 0x2d
   10b52:	e7fa      	b.n	10b4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   10b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b56:	0000      	.short	0x0000
   10b58:	20000064 	.word	0x20000064
   10b5c:	b570      	push	{r4, r5, r6, lr}
   10b5e:	4c14      	ldr	r4, [pc, #80]	; (10bb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
   10b60:	4605      	mov	r5, r0
   10b62:	7820      	ldrb	r0, [r4, #0]
   10b64:	b140      	cbz	r0, 10b78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
   10b66:	78a2      	ldrb	r2, [r4, #2]
   10b68:	1c61      	adds	r1, r4, #1
   10b6a:	4628      	mov	r0, r5
   10b6c:	1c92      	adds	r2, r2, #2
   10b6e:	f008 fd1e 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10b72:	2000      	movs	r0, #0
   10b74:	7020      	strb	r0, [r4, #0]
   10b76:	e013      	b.n	10ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
   10b78:	480e      	ldr	r0, [pc, #56]	; (10bb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
   10b7a:	f001 ffc9 	bl	12b10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
   10b7e:	2800      	cmp	r0, #0
   10b80:	d00f      	beq.n	10ba2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
   10b82:	480c      	ldr	r0, [pc, #48]	; (10bb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
   10b84:	7800      	ldrb	r0, [r0, #0]
   10b86:	2814      	cmp	r0, #20
   10b88:	d104      	bne.n	10b94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
   10b8a:	210a      	movs	r1, #10
   10b8c:	203e      	movs	r0, #62	; 0x3e
   10b8e:	f008 fe7c 	bl	1988a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
   10b92:	b138      	cbz	r0, 10ba4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
   10b94:	4907      	ldr	r1, [pc, #28]	; (10bb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
   10b96:	4628      	mov	r0, r5
   10b98:	f008 fed5 	bl	19946 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d000      	beq.n	10ba2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
   10ba0:	2001      	movs	r0, #1
   10ba2:	bd70      	pop	{r4, r5, r6, pc}
   10ba4:	4903      	ldr	r1, [pc, #12]	; (10bb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
   10ba6:	4628      	mov	r0, r5
   10ba8:	f009 f90a 	bl	19dc0 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
   10bac:	e7f8      	b.n	10ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
   10bae:	0000      	.short	0x0000
   10bb0:	20001324 	.word	0x20001324
   10bb4:	2000121c 	.word	0x2000121c
   10bb8:	b570      	push	{r4, r5, r6, lr}
   10bba:	780a      	ldrb	r2, [r1, #0]
   10bbc:	7082      	strb	r2, [r0, #2]
   10bbe:	b33a      	cbz	r2, 10c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
   10bc0:	2a01      	cmp	r2, #1
   10bc2:	d825      	bhi.n	10c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
   10bc4:	2313      	movs	r3, #19
   10bc6:	7003      	strb	r3, [r0, #0]
   10bc8:	2300      	movs	r3, #0
   10bca:	e00a      	b.n	10be2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
   10bcc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   10bd0:	eb00 0543 	add.w	r5, r0, r3, lsl #1
   10bd4:	78a6      	ldrb	r6, [r4, #2]
   10bd6:	70ee      	strb	r6, [r5, #3]
   10bd8:	8864      	ldrh	r4, [r4, #2]
   10bda:	0a24      	lsrs	r4, r4, #8
   10bdc:	1c5b      	adds	r3, r3, #1
   10bde:	712c      	strb	r4, [r5, #4]
   10be0:	b2db      	uxtb	r3, r3
   10be2:	4293      	cmp	r3, r2
   10be4:	d3f2      	bcc.n	10bcc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
   10be6:	2300      	movs	r3, #0
   10be8:	e00b      	b.n	10c02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
   10bea:	bf00      	nop
   10bec:	eb01 0543 	add.w	r5, r1, r3, lsl #1
   10bf0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
   10bf4:	792e      	ldrb	r6, [r5, #4]
   10bf6:	7166      	strb	r6, [r4, #5]
   10bf8:	88ad      	ldrh	r5, [r5, #4]
   10bfa:	0a2d      	lsrs	r5, r5, #8
   10bfc:	1c5b      	adds	r3, r3, #1
   10bfe:	71a5      	strb	r5, [r4, #6]
   10c00:	b2db      	uxtb	r3, r3
   10c02:	4293      	cmp	r3, r2
   10c04:	d3f2      	bcc.n	10bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
   10c06:	2101      	movs	r1, #1
   10c08:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   10c0c:	b2c0      	uxtb	r0, r0
   10c0e:	bd70      	pop	{r4, r5, r6, pc}
   10c10:	2000      	movs	r0, #0
   10c12:	bd70      	pop	{r4, r5, r6, pc}

00010c14 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
   10c14:	2101      	movs	r1, #1
   10c16:	4a0c      	ldr	r2, [pc, #48]	; (10c48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
   10c18:	2840      	cmp	r0, #64	; 0x40
   10c1a:	d20c      	bcs.n	10c36 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
   10c1c:	2820      	cmp	r0, #32
   10c1e:	d803      	bhi.n	10c28 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
   10c20:	1e40      	subs	r0, r0, #1
   10c22:	4081      	lsls	r1, r0
   10c24:	6810      	ldr	r0, [r2, #0]
   10c26:	e002      	b.n	10c2e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
   10c28:	3821      	subs	r0, #33	; 0x21
   10c2a:	4081      	lsls	r1, r0
   10c2c:	6850      	ldr	r0, [r2, #4]
   10c2e:	4201      	tst	r1, r0
   10c30:	d107      	bne.n	10c42 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
   10c32:	2000      	movs	r0, #0
   10c34:	4770      	bx	lr
   10c36:	28ff      	cmp	r0, #255	; 0xff
   10c38:	d003      	beq.n	10c42 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
   10c3a:	3840      	subs	r0, #64	; 0x40
   10c3c:	4081      	lsls	r1, r0
   10c3e:	6890      	ldr	r0, [r2, #8]
   10c40:	e7f5      	b.n	10c2e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
   10c42:	2001      	movs	r0, #1
   10c44:	4770      	bx	lr
   10c46:	0000      	.short	0x0000
   10c48:	20000068 	.word	0x20000068

00010c4c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
   10c4c:	2101      	movs	r1, #1
   10c4e:	1e40      	subs	r0, r0, #1
   10c50:	4081      	lsls	r1, r0
   10c52:	4804      	ldr	r0, [pc, #16]	; (10c64 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
   10c54:	68c0      	ldr	r0, [r0, #12]
   10c56:	4201      	tst	r1, r0
   10c58:	d001      	beq.n	10c5e <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
   10c5a:	2001      	movs	r0, #1
   10c5c:	4770      	bx	lr
   10c5e:	2000      	movs	r0, #0
   10c60:	4770      	bx	lr
   10c62:	0000      	.short	0x0000
   10c64:	20000068 	.word	0x20000068

00010c68 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
   10c68:	4901      	ldr	r1, [pc, #4]	; (10c70 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
   10c6a:	6800      	ldr	r0, [r0, #0]
   10c6c:	60c8      	str	r0, [r1, #12]
   10c6e:	4770      	bx	lr
   10c70:	20000068 	.word	0x20000068

00010c74 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
   10c74:	4904      	ldr	r1, [pc, #16]	; (10c88 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
   10c76:	6802      	ldr	r2, [r0, #0]
   10c78:	6840      	ldr	r0, [r0, #4]
   10c7a:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
   10c7e:	600a      	str	r2, [r1, #0]
   10c80:	4a02      	ldr	r2, [pc, #8]	; (10c8c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
   10c82:	4310      	orrs	r0, r2
   10c84:	6048      	str	r0, [r1, #4]
   10c86:	4770      	bx	lr
   10c88:	20000068 	.word	0x20000068
   10c8c:	024007f8 	.word	0x024007f8

00010c90 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
   10c90:	4901      	ldr	r1, [pc, #4]	; (10c98 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
   10c92:	6800      	ldr	r0, [r0, #0]
   10c94:	6088      	str	r0, [r1, #8]
   10c96:	4770      	bx	lr
   10c98:	20000068 	.word	0x20000068

00010c9c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
   10c9c:	4805      	ldr	r0, [pc, #20]	; (10cb4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
   10c9e:	f04f 31ff 	mov.w	r1, #4294967295
   10ca2:	6001      	str	r1, [r0, #0]
   10ca4:	0cc9      	lsrs	r1, r1, #19
   10ca6:	6041      	str	r1, [r0, #4]
   10ca8:	2100      	movs	r1, #0
   10caa:	6081      	str	r1, [r0, #8]
   10cac:	211f      	movs	r1, #31
   10cae:	60c1      	str	r1, [r0, #12]
   10cb0:	4770      	bx	lr
   10cb2:	0000      	.short	0x0000
   10cb4:	20000068 	.word	0x20000068

00010cb8 <sdc_hci_cmd_cb_reset>:
   10cb8:	b510      	push	{r4, lr}
   10cba:	f7ff ffef 	bl	10c9c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
   10cbe:	f00b fab6 	bl	1c22e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
   10cc2:	4604      	mov	r4, r0
   10cc4:	4802      	ldr	r0, [pc, #8]	; (10cd0 <sdc_hci_cmd_cb_reset+0x18>)
   10cc6:	6800      	ldr	r0, [r0, #0]
   10cc8:	b100      	cbz	r0, 10ccc <sdc_hci_cmd_cb_reset+0x14>
   10cca:	4780      	blx	r0
   10ccc:	4620      	mov	r0, r4
   10cce:	bd10      	pop	{r4, pc}
   10cd0:	20000078 	.word	0x20000078

00010cd4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
   10cd4:	4901      	ldr	r1, [pc, #4]	; (10cdc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
   10cd6:	6008      	str	r0, [r1, #0]
   10cd8:	4770      	bx	lr
   10cda:	0000      	.short	0x0000
   10cdc:	20000078 	.word	0x20000078

00010ce0 <sdc_hci_cmd_vs_zephyr_read_version_info>:
   10ce0:	2102      	movs	r1, #2
   10ce2:	8001      	strh	r1, [r0, #0]
   10ce4:	8041      	strh	r1, [r0, #2]
   10ce6:	2100      	movs	r1, #0
   10ce8:	7101      	strb	r1, [r0, #4]
   10cea:	210e      	movs	r1, #14
   10cec:	7141      	strb	r1, [r0, #5]
   10cee:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
   10cf2:	80c1      	strh	r1, [r0, #6]
   10cf4:	4901      	ldr	r1, [pc, #4]	; (10cfc <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
   10cf6:	6081      	str	r1, [r0, #8]
   10cf8:	2000      	movs	r0, #0
   10cfa:	4770      	bx	lr
   10cfc:	3c186766 	.word	0x3c186766

00010d00 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
   10d00:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10d02:	4604      	mov	r4, r0
   10d04:	4669      	mov	r1, sp
   10d06:	f009 fd19 	bl	1a73c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10d0a:	b170      	cbz	r0, 10d2a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
   10d0c:	f240 215a 	movw	r1, #602	; 0x25a
   10d10:	e008      	b.n	10d24 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
   10d12:	bf00      	nop
   10d14:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   10d18:	4621      	mov	r1, r4
   10d1a:	f000 f8a7 	bl	10e6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10d1e:	b120      	cbz	r0, 10d2a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
   10d20:	f240 215f 	movw	r1, #607	; 0x25f
   10d24:	2017      	movs	r0, #23
   10d26:	f7ff fe23 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d2a:	4668      	mov	r0, sp
   10d2c:	f000 f850 	bl	10dd0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10d30:	2800      	cmp	r0, #0
   10d32:	d0ef      	beq.n	10d14 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
   10d34:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00010d38 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
   10d38:	b510      	push	{r4, lr}
   10d3a:	b120      	cbz	r0, 10d46 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
   10d3c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   10d40:	2017      	movs	r0, #23
   10d42:	f7ff fe15 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d46:	4801      	ldr	r0, [pc, #4]	; (10d4c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
   10d48:	7800      	ldrb	r0, [r0, #0]
   10d4a:	bd10      	pop	{r4, pc}
   10d4c:	20001428 	.word	0x20001428

00010d50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
   10d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d52:	4605      	mov	r5, r0
   10d54:	7808      	ldrb	r0, [r1, #0]
   10d56:	784a      	ldrb	r2, [r1, #1]
   10d58:	4290      	cmp	r0, r2
   10d5a:	d902      	bls.n	10d62 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
   10d5c:	f240 1163 	movw	r1, #355	; 0x163
   10d60:	e00a      	b.n	10d78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
   10d62:	9500      	str	r5, [sp, #0]
   10d64:	b15d      	cbz	r5, 10d7e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
   10d66:	2600      	movs	r6, #0
   10d68:	1ce8      	adds	r0, r5, #3
   10d6a:	784c      	ldrb	r4, [r1, #1]
   10d6c:	f020 0003 	bic.w	r0, r0, #3
   10d70:	42a8      	cmp	r0, r5
   10d72:	d006      	beq.n	10d82 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
   10d74:	f240 1179 	movw	r1, #377	; 0x179
   10d78:	2017      	movs	r0, #23
   10d7a:	f7ff fdf9 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d7e:	2601      	movs	r6, #1
   10d80:	e7f2      	b.n	10d68 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
   10d82:	4f12      	ldr	r7, [pc, #72]	; (10dcc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
   10d84:	4631      	mov	r1, r6
   10d86:	4668      	mov	r0, sp
   10d88:	703c      	strb	r4, [r7, #0]
   10d8a:	f000 f8e1 	bl	10f50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
   10d8e:	2000      	movs	r0, #0
   10d90:	4603      	mov	r3, r0
   10d92:	9900      	ldr	r1, [sp, #0]
   10d94:	1cc9      	adds	r1, r1, #3
   10d96:	f021 0103 	bic.w	r1, r1, #3
   10d9a:	9100      	str	r1, [sp, #0]
   10d9c:	b966      	cbnz	r6, 10db8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
   10d9e:	eb07 0280 	add.w	r2, r7, r0, lsl #2
   10da2:	6091      	str	r1, [r2, #8]
   10da4:	2100      	movs	r1, #0
   10da6:	e005      	b.n	10db4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
   10da8:	f8d2 c008 	ldr.w	ip, [r2, #8]
   10dac:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
   10db0:	1c49      	adds	r1, r1, #1
   10db2:	b2c9      	uxtb	r1, r1
   10db4:	42a1      	cmp	r1, r4
   10db6:	d3f7      	bcc.n	10da8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
   10db8:	9900      	ldr	r1, [sp, #0]
   10dba:	1c40      	adds	r0, r0, #1
   10dbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   10dc0:	9100      	str	r1, [sp, #0]
   10dc2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   10dc6:	d0e4      	beq.n	10d92 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
   10dc8:	1b48      	subs	r0, r1, r5
   10dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10dcc:	20001428 	.word	0x20001428

00010dd0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
   10dd0:	b570      	push	{r4, r5, r6, lr}
   10dd2:	4604      	mov	r4, r0
   10dd4:	f009 fd0c 	bl	1a7f0 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   10dd8:	b108      	cbz	r0, 10dde <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
   10dda:	2010      	movs	r0, #16
   10ddc:	bd70      	pop	{r4, r5, r6, pc}
   10dde:	7825      	ldrb	r5, [r4, #0]
   10de0:	f000 f8f2 	bl	10fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
   10de4:	4602      	mov	r2, r0
   10de6:	480c      	ldr	r0, [pc, #48]	; (10e18 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
   10de8:	8861      	ldrh	r1, [r4, #2]
   10dea:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   10dee:	e00e      	b.n	10e0e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
   10df0:	6883      	ldr	r3, [r0, #8]
   10df2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10df6:	b143      	cbz	r3, 10e0a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
   10df8:	1c4a      	adds	r2, r1, #1
   10dfa:	8062      	strh	r2, [r4, #2]
   10dfc:	80a1      	strh	r1, [r4, #4]
   10dfe:	6880      	ldr	r0, [r0, #8]
   10e00:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   10e04:	60a0      	str	r0, [r4, #8]
   10e06:	2000      	movs	r0, #0
   10e08:	bd70      	pop	{r4, r5, r6, pc}
   10e0a:	1c49      	adds	r1, r1, #1
   10e0c:	b289      	uxth	r1, r1
   10e0e:	4291      	cmp	r1, r2
   10e10:	d3ee      	bcc.n	10df0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
   10e12:	8061      	strh	r1, [r4, #2]
   10e14:	2005      	movs	r0, #5
   10e16:	bd70      	pop	{r4, r5, r6, pc}
   10e18:	20001428 	.word	0x20001428

00010e1c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
   10e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e20:	b949      	cbnz	r1, 10e36 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
   10e22:	4c11      	ldr	r4, [pc, #68]	; (10e68 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
   10e24:	2700      	movs	r7, #0
   10e26:	463b      	mov	r3, r7
   10e28:	f64f 76ff 	movw	r6, #65535	; 0xffff
   10e2c:	eb04 0581 	add.w	r5, r4, r1, lsl #2
   10e30:	f814 c001 	ldrb.w	ip, [r4, r1]
   10e34:	e00d      	b.n	10e52 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
   10e36:	2000      	movs	r0, #0
   10e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e3c:	19dc      	adds	r4, r3, r7
   10e3e:	f8d5 e008 	ldr.w	lr, [r5, #8]
   10e42:	b2a4      	uxth	r4, r4
   10e44:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
   10e48:	f1be 0f00 	cmp.w	lr, #0
   10e4c:	d004      	beq.n	10e58 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
   10e4e:	1c5b      	adds	r3, r3, #1
   10e50:	b29b      	uxth	r3, r3
   10e52:	459c      	cmp	ip, r3
   10e54:	d8f2      	bhi.n	10e3c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
   10e56:	4634      	mov	r4, r6
   10e58:	8004      	strh	r4, [r0, #0]
   10e5a:	4620      	mov	r0, r4
   10e5c:	42b4      	cmp	r4, r6
   10e5e:	d0ea      	beq.n	10e36 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
   10e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10e64:	f000 b82c 	b.w	10ec0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
   10e68:	20001428 	.word	0x20001428

00010e6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
   10e6c:	b570      	push	{r4, r5, r6, lr}
   10e6e:	4606      	mov	r6, r0
   10e70:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   10e74:	f243 0502 	movw	r5, #12290	; 0x3002
   10e78:	38ff      	subs	r0, #255	; 0xff
   10e7a:	d01a      	beq.n	10eb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
   10e7c:	b109      	cbz	r1, 10e82 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
   10e7e:	2007      	movs	r0, #7
   10e80:	bd70      	pop	{r4, r5, r6, pc}
   10e82:	4630      	mov	r0, r6
   10e84:	f000 f854 	bl	10f30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
   10e88:	0004      	movs	r4, r0
   10e8a:	d012      	beq.n	10eb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
   10e8c:	480a      	ldr	r0, [pc, #40]	; (10eb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
   10e8e:	4621      	mov	r1, r4
   10e90:	6802      	ldr	r2, [r0, #0]
   10e92:	4630      	mov	r0, r6
   10e94:	4790      	blx	r2
   10e96:	4d09      	ldr	r5, [pc, #36]	; (10ebc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
   10e98:	2000      	movs	r0, #0
   10e9a:	68a9      	ldr	r1, [r5, #8]
   10e9c:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
   10ea0:	f000 f888 	bl	10fb4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
   10ea4:	4602      	mov	r2, r0
   10ea6:	4621      	mov	r1, r4
   10ea8:	6868      	ldr	r0, [r5, #4]
   10eaa:	f009 fc31 	bl	1a710 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   10eae:	2000      	movs	r0, #0
   10eb0:	bd70      	pop	{r4, r5, r6, pc}
   10eb2:	4628      	mov	r0, r5
   10eb4:	bd70      	pop	{r4, r5, r6, pc}
   10eb6:	0000      	.short	0x0000
   10eb8:	00010fdc 	.word	0x00010fdc
   10ebc:	20001428 	.word	0x20001428
   10ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ec4:	4690      	mov	r8, r2
   10ec6:	460e      	mov	r6, r1
   10ec8:	4607      	mov	r7, r0
   10eca:	f009 fc47 	bl	1a75c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
   10ece:	b148      	cbz	r0, 10ee4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
   10ed0:	4815      	ldr	r0, [pc, #84]	; (10f28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
   10ed2:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   10ed6:	68a8      	ldr	r0, [r5, #8]
   10ed8:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
   10edc:	b128      	cbz	r0, 10eea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
   10ede:	f44f 719d 	mov.w	r1, #314	; 0x13a
   10ee2:	e014      	b.n	10f0e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
   10ee4:	f240 1139 	movw	r1, #313	; 0x139
   10ee8:	e011      	b.n	10f0e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
   10eea:	6868      	ldr	r0, [r5, #4]
   10eec:	2800      	cmp	r0, #0
   10eee:	d018      	beq.n	10f22 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
   10ef0:	4630      	mov	r0, r6
   10ef2:	f000 f85f 	bl	10fb4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
   10ef6:	4601      	mov	r1, r0
   10ef8:	6868      	ldr	r0, [r5, #4]
   10efa:	f009 fbbb 	bl	1a674 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   10efe:	0004      	movs	r4, r0
   10f00:	d00e      	beq.n	10f20 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
   10f02:	68a8      	ldr	r0, [r5, #8]
   10f04:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
   10f08:	b126      	cbz	r6, 10f14 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
   10f0a:	f240 1145 	movw	r1, #325	; 0x145
   10f0e:	2017      	movs	r0, #23
   10f10:	f7ff fd2e 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10f14:	4805      	ldr	r0, [pc, #20]	; (10f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
   10f16:	4642      	mov	r2, r8
   10f18:	4621      	mov	r1, r4
   10f1a:	6803      	ldr	r3, [r0, #0]
   10f1c:	4638      	mov	r0, r7
   10f1e:	4798      	blx	r3
   10f20:	4620      	mov	r0, r4
   10f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f26:	0000      	.short	0x0000
   10f28:	20001428 	.word	0x20001428
   10f2c:	00010fd8 	.word	0x00010fd8
   10f30:	b570      	push	{r4, r5, r6, lr}
   10f32:	460c      	mov	r4, r1
   10f34:	4605      	mov	r5, r0
   10f36:	f009 fc11 	bl	1a75c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
   10f3a:	2800      	cmp	r0, #0
   10f3c:	d005      	beq.n	10f4a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
   10f3e:	4803      	ldr	r0, [pc, #12]	; (10f4c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
   10f40:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   10f44:	6880      	ldr	r0, [r0, #8]
   10f46:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   10f4a:	bd70      	pop	{r4, r5, r6, pc}
   10f4c:	20001428 	.word	0x20001428
   10f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f54:	4e16      	ldr	r6, [pc, #88]	; (10fb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
   10f56:	4688      	mov	r8, r1
   10f58:	4605      	mov	r5, r0
   10f5a:	2400      	movs	r4, #0
   10f5c:	6828      	ldr	r0, [r5, #0]
   10f5e:	1cc0      	adds	r0, r0, #3
   10f60:	f020 0003 	bic.w	r0, r0, #3
   10f64:	6028      	str	r0, [r5, #0]
   10f66:	4620      	mov	r0, r4
   10f68:	f000 f824 	bl	10fb4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
   10f6c:	5d31      	ldrb	r1, [r6, r4]
   10f6e:	4348      	muls	r0, r1
   10f70:	f1b8 0f00 	cmp.w	r8, #0
   10f74:	d001      	beq.n	10f7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
   10f76:	2200      	movs	r2, #0
   10f78:	e000      	b.n	10f7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
   10f7a:	682a      	ldr	r2, [r5, #0]
   10f7c:	4601      	mov	r1, r0
   10f7e:	9200      	str	r2, [sp, #0]
   10f80:	b132      	cbz	r2, 10f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
   10f82:	2700      	movs	r7, #0
   10f84:	ea4f 000d 	mov.w	r0, sp
   10f88:	f009 fba1 	bl	1a6ce <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   10f8c:	b11f      	cbz	r7, 10f96 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
   10f8e:	e006      	b.n	10f9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
   10f90:	2701      	movs	r7, #1
   10f92:	2000      	movs	r0, #0
   10f94:	e7f8      	b.n	10f88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
   10f96:	eb06 0184 	add.w	r1, r6, r4, lsl #2
   10f9a:	9a00      	ldr	r2, [sp, #0]
   10f9c:	604a      	str	r2, [r1, #4]
   10f9e:	6829      	ldr	r1, [r5, #0]
   10fa0:	1c64      	adds	r4, r4, #1
   10fa2:	4408      	add	r0, r1
   10fa4:	6028      	str	r0, [r5, #0]
   10fa6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10faa:	d0d7      	beq.n	10f5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
   10fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10fb0:	20001428 	.word	0x20001428
   10fb4:	4903      	ldr	r1, [pc, #12]	; (10fc4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
   10fb6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   10fba:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   10fbe:	1cc0      	adds	r0, r0, #3
   10fc0:	4008      	ands	r0, r1
   10fc2:	4770      	bx	lr
   10fc4:	00010fd4 	.word	0x00010fd4
   10fc8:	4801      	ldr	r0, [pc, #4]	; (10fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
   10fca:	7800      	ldrb	r0, [r0, #0]
   10fcc:	4770      	bx	lr
   10fce:	0000      	.short	0x0000
   10fd0:	20001428 	.word	0x20001428
   10fd4:	000001e0 	.word	0x000001e0
   10fd8:	0001a771 	.word	0x0001a771
   10fdc:	0001b909 	.word	0x0001b909

00010fe0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
   10fe0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe4:	4c26      	ldr	r4, [pc, #152]	; (11080 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
   10fe6:	4680      	mov	r8, r0
   10fe8:	b081      	sub	sp, #4
   10fea:	6820      	ldr	r0, [r4, #0]
   10fec:	469a      	mov	sl, r3
   10fee:	4693      	mov	fp, r2
   10ff0:	b158      	cbz	r0, 1100a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
   10ff2:	7a02      	ldrb	r2, [r0, #8]
   10ff4:	4542      	cmp	r2, r8
   10ff6:	d903      	bls.n	11000 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
   10ff8:	6841      	ldr	r1, [r0, #4]
   10ffa:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
   10ffe:	b140      	cbz	r0, 11012 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
   11000:	f243 0002 	movw	r0, #12290	; 0x3002
   11004:	b005      	add	sp, #20
   11006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1100a:	21a5      	movs	r1, #165	; 0xa5
   1100c:	2018      	movs	r0, #24
   1100e:	f7ff fcaf 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11012:	4619      	mov	r1, r3
   11014:	9802      	ldr	r0, [sp, #8]
   11016:	f009 fbc3 	bl	1a7a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   1101a:	b286      	uxth	r6, r0
   1101c:	4658      	mov	r0, fp
   1101e:	990e      	ldr	r1, [sp, #56]	; 0x38
   11020:	f009 fbb5 	bl	1a78e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   11024:	b285      	uxth	r5, r0
   11026:	1970      	adds	r0, r6, r5
   11028:	1d00      	adds	r0, r0, #4
   1102a:	b287      	uxth	r7, r0
   1102c:	6820      	ldr	r0, [r4, #0]
   1102e:	46a1      	mov	r9, r4
   11030:	4639      	mov	r1, r7
   11032:	6800      	ldr	r0, [r0, #0]
   11034:	f009 fb1e 	bl	1a674 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   11038:	0004      	movs	r4, r0
   1103a:	d01f      	beq.n	1107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
   1103c:	8067      	strh	r7, [r4, #2]
   1103e:	8025      	strh	r5, [r4, #0]
   11040:	4629      	mov	r1, r5
   11042:	1d20      	adds	r0, r4, #4
   11044:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   11046:	4607      	mov	r7, r0
   11048:	465a      	mov	r2, fp
   1104a:	2301      	movs	r3, #1
   1104c:	9500      	str	r5, [sp, #0]
   1104e:	f009 fa71 	bl	1a534 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   11052:	8820      	ldrh	r0, [r4, #0]
   11054:	4631      	mov	r1, r6
   11056:	4438      	add	r0, r7
   11058:	2301      	movs	r3, #1
   1105a:	9a02      	ldr	r2, [sp, #8]
   1105c:	f8cd a000 	str.w	sl, [sp]
   11060:	f009 fa68 	bl	1a534 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   11064:	8820      	ldrh	r0, [r4, #0]
   11066:	19c1      	adds	r1, r0, r7
   11068:	4638      	mov	r0, r7
   1106a:	f009 fa94 	bl	1a596 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
   1106e:	f8d9 0000 	ldr.w	r0, [r9]
   11072:	6841      	ldr	r1, [r0, #4]
   11074:	2000      	movs	r0, #0
   11076:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
   1107a:	e7c3      	b.n	11004 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   1107c:	2004      	movs	r0, #4
   1107e:	e7c1      	b.n	11004 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   11080:	2000007c 	.word	0x2000007c

00011084 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
   11084:	b570      	push	{r4, r5, r6, lr}
   11086:	4c14      	ldr	r4, [pc, #80]	; (110d8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
   11088:	6823      	ldr	r3, [r4, #0]
   1108a:	b18b      	cbz	r3, 110b0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
   1108c:	7a19      	ldrb	r1, [r3, #8]
   1108e:	4281      	cmp	r1, r0
   11090:	d912      	bls.n	110b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   11092:	685a      	ldr	r2, [r3, #4]
   11094:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   11098:	b171      	cbz	r1, 110b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   1109a:	2500      	movs	r5, #0
   1109c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   110a0:	884a      	ldrh	r2, [r1, #2]
   110a2:	6818      	ldr	r0, [r3, #0]
   110a4:	f009 fb34 	bl	1a710 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   110a8:	6821      	ldr	r1, [r4, #0]
   110aa:	2000      	movs	r0, #0
   110ac:	7a0a      	ldrb	r2, [r1, #8]
   110ae:	e00c      	b.n	110ca <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
   110b0:	21c8      	movs	r1, #200	; 0xc8
   110b2:	2018      	movs	r0, #24
   110b4:	f7ff fc5c 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   110b8:	f243 0002 	movw	r0, #12290	; 0x3002
   110bc:	bd70      	pop	{r4, r5, r6, pc}
   110be:	684b      	ldr	r3, [r1, #4]
   110c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   110c4:	b933      	cbnz	r3, 110d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
   110c6:	1c40      	adds	r0, r0, #1
   110c8:	b2c0      	uxtb	r0, r0
   110ca:	4282      	cmp	r2, r0
   110cc:	d8f7      	bhi.n	110be <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
   110ce:	6808      	ldr	r0, [r1, #0]
   110d0:	f009 fb13 	bl	1a6fa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
   110d4:	2000      	movs	r0, #0
   110d6:	bd70      	pop	{r4, r5, r6, pc}
   110d8:	2000007c 	.word	0x2000007c

000110dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
   110dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110e0:	460d      	mov	r5, r1
   110e2:	0004      	movs	r4, r0
   110e4:	4690      	mov	r8, r2
   110e6:	f04f 0600 	mov.w	r6, #0
   110ea:	d009      	beq.n	11100 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
   110ec:	2700      	movs	r7, #0
   110ee:	1ce0      	adds	r0, r4, #3
   110f0:	f020 0003 	bic.w	r0, r0, #3
   110f4:	42a0      	cmp	r0, r4
   110f6:	d005      	beq.n	11104 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
   110f8:	2186      	movs	r1, #134	; 0x86
   110fa:	2018      	movs	r0, #24
   110fc:	f7ff fc38 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11100:	2701      	movs	r7, #1
   11102:	e7f4      	b.n	110ee <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
   11104:	b1cd      	cbz	r5, 1113a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
   11106:	4611      	mov	r1, r2
   11108:	2000      	movs	r0, #0
   1110a:	f009 fae0 	bl	1a6ce <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   1110e:	300c      	adds	r0, #12
   11110:	eb00 0685 	add.w	r6, r0, r5, lsl #2
   11114:	b98f      	cbnz	r7, 1113a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
   11116:	4f0a      	ldr	r7, [pc, #40]	; (11140 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
   11118:	f104 000c 	add.w	r0, r4, #12
   1111c:	00aa      	lsls	r2, r5, #2
   1111e:	603c      	str	r4, [r7, #0]
   11120:	7225      	strb	r5, [r4, #8]
   11122:	6060      	str	r0, [r4, #4]
   11124:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   11128:	6020      	str	r0, [r4, #0]
   1112a:	2100      	movs	r1, #0
   1112c:	6860      	ldr	r0, [r4, #4]
   1112e:	f008 fab8 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   11132:	4641      	mov	r1, r8
   11134:	6838      	ldr	r0, [r7, #0]
   11136:	f009 faca 	bl	1a6ce <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   1113a:	4630      	mov	r0, r6
   1113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11140:	2000007c 	.word	0x2000007c

00011144 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
   11144:	b570      	push	{r4, r5, r6, lr}
   11146:	4d08      	ldr	r5, [pc, #32]	; (11168 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
   11148:	6828      	ldr	r0, [r5, #0]
   1114a:	2800      	cmp	r0, #0
   1114c:	d00a      	beq.n	11164 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
   1114e:	2400      	movs	r4, #0
   11150:	e004      	b.n	1115c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
   11152:	4620      	mov	r0, r4
   11154:	f7ff ff96 	bl	11084 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   11158:	1c64      	adds	r4, r4, #1
   1115a:	b2e4      	uxtb	r4, r4
   1115c:	6828      	ldr	r0, [r5, #0]
   1115e:	7a00      	ldrb	r0, [r0, #8]
   11160:	42a0      	cmp	r0, r4
   11162:	d8f6      	bhi.n	11152 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
   11164:	bd70      	pop	{r4, r5, r6, pc}
   11166:	0000      	.short	0x0000
   11168:	2000007c 	.word	0x2000007c

0001116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
   1116c:	4909      	ldr	r1, [pc, #36]	; (11194 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
   1116e:	b510      	push	{r4, lr}
   11170:	4602      	mov	r2, r0
   11172:	6809      	ldr	r1, [r1, #0]
   11174:	2000      	movs	r0, #0
   11176:	b149      	cbz	r1, 1118c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
   11178:	7a0b      	ldrb	r3, [r1, #8]
   1117a:	4293      	cmp	r3, r2
   1117c:	d905      	bls.n	1118a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   1117e:	6849      	ldr	r1, [r1, #4]
   11180:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   11184:	2900      	cmp	r1, #0
   11186:	d000      	beq.n	1118a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   11188:	1d08      	adds	r0, r1, #4
   1118a:	bd10      	pop	{r4, pc}
   1118c:	21ee      	movs	r1, #238	; 0xee
   1118e:	2018      	movs	r0, #24
   11190:	f7ff fbee 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11194:	2000007c 	.word	0x2000007c

00011198 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
   11198:	490a      	ldr	r1, [pc, #40]	; (111c4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
   1119a:	b510      	push	{r4, lr}
   1119c:	4602      	mov	r2, r0
   1119e:	6809      	ldr	r1, [r1, #0]
   111a0:	2000      	movs	r0, #0
   111a2:	b159      	cbz	r1, 111bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
   111a4:	7a0b      	ldrb	r3, [r1, #8]
   111a6:	4293      	cmp	r3, r2
   111a8:	d907      	bls.n	111ba <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   111aa:	6849      	ldr	r1, [r1, #4]
   111ac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   111b0:	2900      	cmp	r1, #0
   111b2:	d002      	beq.n	111ba <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   111b4:	f831 0b04 	ldrh.w	r0, [r1], #4
   111b8:	4408      	add	r0, r1
   111ba:	bd10      	pop	{r4, pc}
   111bc:	21fc      	movs	r1, #252	; 0xfc
   111be:	2018      	movs	r0, #24
   111c0:	f7ff fbd6 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   111c4:	2000007c 	.word	0x2000007c

000111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
   111c8:	4801      	ldr	r0, [pc, #4]	; (111d0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
   111ca:	7840      	ldrb	r0, [r0, #1]
   111cc:	4770      	bx	lr
   111ce:	0000      	.short	0x0000
   111d0:	20000080 	.word	0x20000080

000111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
   111d4:	4801      	ldr	r0, [pc, #4]	; (111dc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
   111d6:	6840      	ldr	r0, [r0, #4]
   111d8:	4770      	bx	lr
   111da:	0000      	.short	0x0000
   111dc:	20000080 	.word	0x20000080

000111e0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
   111e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   111e4:	460c      	mov	r4, r1
   111e6:	4607      	mov	r7, r0
   111e8:	4616      	mov	r6, r2
   111ea:	211c      	movs	r1, #28
   111ec:	4610      	mov	r0, r2
   111ee:	460d      	mov	r5, r1
   111f0:	4622      	mov	r2, r4
   111f2:	f009 f9fa 	bl	1a5ea <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   111f6:	4680      	mov	r8, r0
   111f8:	b157      	cbz	r7, 11210 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
   111fa:	4638      	mov	r0, r7
   111fc:	4641      	mov	r1, r8
   111fe:	4632      	mov	r2, r6
   11200:	462b      	mov	r3, r5
   11202:	9400      	str	r4, [sp, #0]
   11204:	f009 f996 	bl	1a534 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   11208:	4803      	ldr	r0, [pc, #12]	; (11218 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
   1120a:	6047      	str	r7, [r0, #4]
   1120c:	7004      	strb	r4, [r0, #0]
   1120e:	7046      	strb	r6, [r0, #1]
   11210:	4640      	mov	r0, r8
   11212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11216:	0000      	.short	0x0000
   11218:	20000080 	.word	0x20000080

0001121c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
   1121c:	4802      	ldr	r0, [pc, #8]	; (11228 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
   1121e:	7842      	ldrb	r2, [r0, #1]
   11220:	7801      	ldrb	r1, [r0, #0]
   11222:	6840      	ldr	r0, [r0, #4]
   11224:	f7ff bfdc 	b.w	111e0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
   11228:	20000080 	.word	0x20000080
   1122c:	4909      	ldr	r1, [pc, #36]	; (11254 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
   1122e:	b510      	push	{r4, lr}
   11230:	4807      	ldr	r0, [pc, #28]	; (11250 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
   11232:	6008      	str	r0, [r1, #0]
   11234:	4b08      	ldr	r3, [pc, #32]	; (11258 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
   11236:	2011      	movs	r0, #17
   11238:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   1123c:	2200      	movs	r2, #0
   1123e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
   11242:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   11246:	1c40      	adds	r0, r0, #1
   11248:	b2c0      	uxtb	r0, r0
   1124a:	2814      	cmp	r0, #20
   1124c:	d3f4      	bcc.n	11238 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
   1124e:	bd10      	pop	{r4, pc}
   11250:	fffe0000 	.word	0xfffe0000
   11254:	4001f508 	.word	0x4001f508
   11258:	4001f000 	.word	0x4001f000
   1125c:	b570      	push	{r4, r5, r6, lr}
   1125e:	2420      	movs	r4, #32
   11260:	2100      	movs	r1, #0
   11262:	2301      	movs	r3, #1
   11264:	fa20 f201 	lsr.w	r2, r0, r1
   11268:	07d2      	lsls	r2, r2, #31
   1126a:	d020      	beq.n	112ae <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
   1126c:	b24a      	sxtb	r2, r1
   1126e:	2a00      	cmp	r2, #0
   11270:	db10      	blt.n	11294 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
   11272:	bf00      	nop
   11274:	ea4f 1652 	mov.w	r6, r2, lsr #5
   11278:	ea4f 0686 	mov.w	r6, r6, lsl #2
   1127c:	f002 051f 	and.w	r5, r2, #31
   11280:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
   11284:	fa03 f505 	lsl.w	r5, r3, r5
   11288:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
   1128c:	f3bf 8f4f 	dsb	sy
   11290:	f3bf 8f6f 	isb	sy
   11294:	db0b      	blt.n	112ae <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
   11296:	f002 051f 	and.w	r5, r2, #31
   1129a:	ea4f 1252 	mov.w	r2, r2, lsr #5
   1129e:	ea4f 0282 	mov.w	r2, r2, lsl #2
   112a2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   112a6:	fa03 f505 	lsl.w	r5, r3, r5
   112aa:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
   112ae:	f101 0101 	add.w	r1, r1, #1
   112b2:	42a1      	cmp	r1, r4
   112b4:	d3d6      	bcc.n	11264 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
   112b6:	bd70      	pop	{r4, r5, r6, pc}
   112b8:	b570      	push	{r4, r5, r6, lr}
   112ba:	0042      	lsls	r2, r0, #1
   112bc:	f04f 0100 	mov.w	r1, #0
   112c0:	d501      	bpl.n	112c6 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
   112c2:	4a14      	ldr	r2, [pc, #80]	; (11314 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
   112c4:	6011      	str	r1, [r2, #0]
   112c6:	f3c0 3280 	ubfx	r2, r0, #14, #1
   112ca:	f3c0 33c0 	ubfx	r3, r0, #15, #1
   112ce:	429a      	cmp	r2, r3
   112d0:	d003      	beq.n	112da <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
   112d2:	2169      	movs	r1, #105	; 0x69
   112d4:	201b      	movs	r0, #27
   112d6:	f7ff fb4b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   112da:	f410 4f40 	tst.w	r0, #49152	; 0xc000
   112de:	d014      	beq.n	1130a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
   112e0:	4a0d      	ldr	r2, [pc, #52]	; (11318 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
   112e2:	2001      	movs	r0, #1
   112e4:	6050      	str	r0, [r2, #4]
   112e6:	1e83      	subs	r3, r0, #2
   112e8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   112ec:	4a0b      	ldr	r2, [pc, #44]	; (1131c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
   112ee:	6090      	str	r0, [r2, #8]
   112f0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   112f4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   112f8:	4c09      	ldr	r4, [pc, #36]	; (11320 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
   112fa:	6021      	str	r1, [r4, #0]
   112fc:	1d25      	adds	r5, r4, #4
   112fe:	6028      	str	r0, [r5, #0]
   11300:	6090      	str	r0, [r2, #8]
   11302:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   11306:	6021      	str	r1, [r4, #0]
   11308:	6028      	str	r0, [r5, #0]
   1130a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1130e:	f7ff bf8d 	b.w	1122c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
   11312:	0000      	.short	0x0000
   11314:	4001e504 	.word	0x4001e504
   11318:	4000e000 	.word	0x4000e000
   1131c:	4000f000 	.word	0x4000f000
   11320:	4000f500 	.word	0x4000f500

00011324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
   11324:	b570      	push	{r4, r5, r6, lr}
   11326:	4c0a      	ldr	r4, [pc, #40]	; (11350 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
   11328:	460d      	mov	r5, r1
   1132a:	6020      	str	r0, [r4, #0]
   1132c:	f7ff ffc4 	bl	112b8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
   11330:	6820      	ldr	r0, [r4, #0]
   11332:	f7ff ff93 	bl	1125c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
   11336:	f000 f883 	bl	11440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
   1133a:	f7ff ff77 	bl	1122c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
   1133e:	f009 fa4c 	bl	1a7da <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
   11342:	4628      	mov	r0, r5
   11344:	f000 f8b6 	bl	114b4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
   11348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1134c:	f000 b8ce 	b.w	114ec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
   11350:	20000088 	.word	0x20000088

00011354 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
   11354:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11358:	4c36      	ldr	r4, [pc, #216]	; (11434 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
   1135a:	b082      	sub	sp, #8
   1135c:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
   11360:	2601      	movs	r6, #1
   11362:	4835      	ldr	r0, [pc, #212]	; (11438 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
   11364:	f008 f87a 	bl	1945c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   11368:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 11438 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
   1136c:	b920      	cbnz	r0, 11378 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
   1136e:	2600      	movs	r6, #0
   11370:	f109 0001 	add.w	r0, r9, #1
   11374:	f008 f889 	bl	1948a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   11378:	f44f 7580 	mov.w	r5, #256	; 0x100
   1137c:	f04f 0800 	mov.w	r8, #0
   11380:	1d2f      	adds	r7, r5, #4
   11382:	2101      	movs	r1, #1
   11384:	6061      	str	r1, [r4, #4]
   11386:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1138a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   1138e:	9802      	ldr	r0, [sp, #8]
   11390:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
   11394:	6021      	str	r1, [r4, #0]
   11396:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1143c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
   1139a:	e01c      	b.n	113d6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   1139c:	f8da 0000 	ldr.w	r0, [sl]
   113a0:	06c0      	lsls	r0, r0, #27
   113a2:	d518      	bpl.n	113d6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   113a4:	200e      	movs	r0, #14
   113a6:	f009 fa04 	bl	1a7b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
   113aa:	f3ef 8010 	mrs	r0, PRIMASK
   113ae:	9000      	str	r0, [sp, #0]
   113b0:	b672      	cpsid	i
   113b2:	2103      	movs	r1, #3
   113b4:	4620      	mov	r0, r4
   113b6:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
   113ba:	4629      	mov	r1, r5
   113bc:	f009 fa06 	bl	1a7cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
   113c0:	b930      	cbnz	r0, 113d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
   113c2:	4639      	mov	r1, r7
   113c4:	4620      	mov	r0, r4
   113c6:	f009 fa01 	bl	1a7cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
   113ca:	b908      	cbnz	r0, 113d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
   113cc:	f7ff f916 	bl	105fc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   113d0:	9800      	ldr	r0, [sp, #0]
   113d2:	b900      	cbnz	r0, 113d6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   113d4:	b662      	cpsie	i
   113d6:	4629      	mov	r1, r5
   113d8:	4620      	mov	r0, r4
   113da:	f009 f9f7 	bl	1a7cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
   113de:	b928      	cbnz	r0, 113ec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
   113e0:	4639      	mov	r1, r7
   113e2:	4620      	mov	r0, r4
   113e4:	f009 f9f2 	bl	1a7cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
   113e8:	2800      	cmp	r0, #0
   113ea:	d0d7      	beq.n	1139c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
   113ec:	4639      	mov	r1, r7
   113ee:	4620      	mov	r0, r4
   113f0:	f009 f9ec 	bl	1a7cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
   113f4:	2800      	cmp	r0, #0
   113f6:	d1c4      	bne.n	11382 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
   113f8:	b136      	cbz	r6, 11408 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
   113fa:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
   113fe:	f109 0001 	add.w	r0, r9, #1
   11402:	f008 f82b 	bl	1945c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   11406:	e012      	b.n	1142e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
   11408:	f109 0001 	add.w	r0, r9, #1
   1140c:	f008 f826 	bl	1945c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   11410:	2800      	cmp	r0, #0
   11412:	d1ad      	bne.n	11370 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
   11414:	2003      	movs	r0, #3
   11416:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1141a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   1141e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   11422:	200e      	movs	r0, #14
   11424:	f009 f9c5 	bl	1a7b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
   11428:	4803      	ldr	r0, [pc, #12]	; (11438 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
   1142a:	f008 f82e 	bl	1948a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   1142e:	2000      	movs	r0, #0
   11430:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11434:	4000e000 	.word	0x4000e000
   11438:	2000028b 	.word	0x2000028b
   1143c:	e000ed10 	.word	0xe000ed10

00011440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
   11440:	b510      	push	{r4, lr}
   11442:	4808      	ldr	r0, [pc, #32]	; (11464 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
   11444:	f008 f81d 	bl	19482 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   11448:	b108      	cbz	r0, 1144e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
   1144a:	2125      	movs	r1, #37	; 0x25
   1144c:	e006      	b.n	1145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
   1144e:	4805      	ldr	r0, [pc, #20]	; (11464 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
   11450:	1c40      	adds	r0, r0, #1
   11452:	f008 f816 	bl	19482 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   11456:	2800      	cmp	r0, #0
   11458:	d003      	beq.n	11462 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
   1145a:	2129      	movs	r1, #41	; 0x29
   1145c:	201d      	movs	r0, #29
   1145e:	f7ff fa87 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11462:	bd10      	pop	{r4, pc}
   11464:	2000028b 	.word	0x2000028b

00011468 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
   11468:	b570      	push	{r4, r5, r6, lr}
   1146a:	4911      	ldr	r1, [pc, #68]	; (114b0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
   1146c:	680a      	ldr	r2, [r1, #0]
   1146e:	b1ea      	cbz	r2, 114ac <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
   11470:	2300      	movs	r3, #0
   11472:	461d      	mov	r5, r3
   11474:	2401      	movs	r4, #1
   11476:	684a      	ldr	r2, [r1, #4]
   11478:	1c52      	adds	r2, r2, #1
   1147a:	604a      	str	r2, [r1, #4]
   1147c:	2a0c      	cmp	r2, #12
   1147e:	d300      	bcc.n	11482 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
   11480:	604d      	str	r5, [r1, #4]
   11482:	790e      	ldrb	r6, [r1, #4]
   11484:	fa04 f206 	lsl.w	r2, r4, r6
   11488:	680e      	ldr	r6, [r1, #0]
   1148a:	4216      	tst	r6, r2
   1148c:	d00b      	beq.n	114a6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
   1148e:	f3ef 8310 	mrs	r3, PRIMASK
   11492:	b672      	cpsid	i
   11494:	680c      	ldr	r4, [r1, #0]
   11496:	4394      	bics	r4, r2
   11498:	600c      	str	r4, [r1, #0]
   1149a:	b903      	cbnz	r3, 1149e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
   1149c:	b662      	cpsie	i
   1149e:	6849      	ldr	r1, [r1, #4]
   114a0:	6001      	str	r1, [r0, #0]
   114a2:	2000      	movs	r0, #0
   114a4:	bd70      	pop	{r4, r5, r6, pc}
   114a6:	1c5b      	adds	r3, r3, #1
   114a8:	2b0c      	cmp	r3, #12
   114aa:	d3e4      	bcc.n	11476 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
   114ac:	2005      	movs	r0, #5
   114ae:	bd70      	pop	{r4, r5, r6, pc}
   114b0:	2000008c 	.word	0x2000008c

000114b4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
   114b4:	4802      	ldr	r0, [pc, #8]	; (114c0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
   114b6:	2100      	movs	r1, #0
   114b8:	6001      	str	r1, [r0, #0]
   114ba:	6041      	str	r1, [r0, #4]
   114bc:	4770      	bx	lr
   114be:	0000      	.short	0x0000
   114c0:	2000008c 	.word	0x2000008c

000114c4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
   114c4:	b510      	push	{r4, lr}
   114c6:	4c08      	ldr	r4, [pc, #32]	; (114e8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
   114c8:	7861      	ldrb	r1, [r4, #1]
   114ca:	b109      	cbz	r1, 114d0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
   114cc:	200f      	movs	r0, #15
   114ce:	bd10      	pop	{r4, pc}
   114d0:	f7ff f820 	bl	10514 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   114d4:	7020      	strb	r0, [r4, #0]
   114d6:	28ff      	cmp	r0, #255	; 0xff
   114d8:	d001      	beq.n	114de <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
   114da:	2000      	movs	r0, #0
   114dc:	bd10      	pop	{r4, pc}
   114de:	2176      	movs	r1, #118	; 0x76
   114e0:	201f      	movs	r0, #31
   114e2:	f7ff fa45 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114e6:	0000      	.short	0x0000
   114e8:	20000094 	.word	0x20000094

000114ec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
   114ec:	4901      	ldr	r1, [pc, #4]	; (114f4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
   114ee:	2000      	movs	r0, #0
   114f0:	7048      	strb	r0, [r1, #1]
   114f2:	4770      	bx	lr
   114f4:	20000094 	.word	0x20000094

000114f8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
   114f8:	4806      	ldr	r0, [pc, #24]	; (11514 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
   114fa:	4a07      	ldr	r2, [pc, #28]	; (11518 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
   114fc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   114fe:	8852      	ldrh	r2, [r2, #2]
   11500:	4291      	cmp	r1, r2
   11502:	d104      	bne.n	1150e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
   11504:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   11508:	b108      	cbz	r0, 1150e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
   1150a:	2000      	movs	r0, #0
   1150c:	4770      	bx	lr
   1150e:	2001      	movs	r0, #1
   11510:	4770      	bx	lr
   11512:	0000      	.short	0x0000
   11514:	200015ac 	.word	0x200015ac
   11518:	20000270 	.word	0x20000270

0001151c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
   1151c:	4901      	ldr	r1, [pc, #4]	; (11524 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
   1151e:	8048      	strh	r0, [r1, #2]
   11520:	4770      	bx	lr
   11522:	0000      	.short	0x0000
   11524:	20000270 	.word	0x20000270

00011528 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
   11528:	4808      	ldr	r0, [pc, #32]	; (1154c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
   1152a:	4a09      	ldr	r2, [pc, #36]	; (11550 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
   1152c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1152e:	8852      	ldrh	r2, [r2, #2]
   11530:	4291      	cmp	r1, r2
   11532:	d109      	bne.n	11548 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   11534:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11538:	8481      	strh	r1, [r0, #36]	; 0x24
   1153a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
   1153e:	b119      	cbz	r1, 11548 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   11540:	2100      	movs	r1, #0
   11542:	7001      	strb	r1, [r0, #0]
   11544:	2001      	movs	r0, #1
   11546:	4770      	bx	lr
   11548:	2000      	movs	r0, #0
   1154a:	4770      	bx	lr
   1154c:	200015ac 	.word	0x200015ac
   11550:	20000270 	.word	0x20000270

00011554 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
   11554:	4807      	ldr	r0, [pc, #28]	; (11574 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   11556:	f810 1f22 	ldrb.w	r1, [r0, #34]!
   1155a:	2901      	cmp	r1, #1
   1155c:	d007      	beq.n	1156e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
   1155e:	2101      	movs	r1, #1
   11560:	7001      	strb	r1, [r0, #0]
   11562:	4805      	ldr	r0, [pc, #20]	; (11578 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
   11564:	4903      	ldr	r1, [pc, #12]	; (11574 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   11566:	8800      	ldrh	r0, [r0, #0]
   11568:	8488      	strh	r0, [r1, #36]	; 0x24
   1156a:	2001      	movs	r0, #1
   1156c:	4770      	bx	lr
   1156e:	2000      	movs	r0, #0
   11570:	4770      	bx	lr
   11572:	0000      	.short	0x0000
   11574:	200015ac 	.word	0x200015ac
   11578:	20000270 	.word	0x20000270

0001157c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
   1157c:	4906      	ldr	r1, [pc, #24]	; (11598 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
   1157e:	4b07      	ldr	r3, [pc, #28]	; (1159c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
   11580:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   11582:	885b      	ldrh	r3, [r3, #2]
   11584:	429a      	cmp	r2, r3
   11586:	d105      	bne.n	11594 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
   11588:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   1158c:	b112      	cbz	r2, 11594 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
   1158e:	6001      	str	r1, [r0, #0]
   11590:	2001      	movs	r0, #1
   11592:	4770      	bx	lr
   11594:	2000      	movs	r0, #0
   11596:	4770      	bx	lr
   11598:	200015ac 	.word	0x200015ac
   1159c:	20000270 	.word	0x20000270

000115a0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
   115a0:	4909      	ldr	r1, [pc, #36]	; (115c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   115a2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   115a4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
   115a8:	3bff      	subs	r3, #255	; 0xff
   115aa:	d002      	beq.n	115b2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
   115ac:	2100      	movs	r1, #0
   115ae:	6001      	str	r1, [r0, #0]
   115b0:	e007      	b.n	115c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
   115b2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   115b6:	4904      	ldr	r1, [pc, #16]	; (115c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   115b8:	2a01      	cmp	r2, #1
   115ba:	d002      	beq.n	115c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
   115bc:	6001      	str	r1, [r0, #0]
   115be:	2001      	movs	r0, #1
   115c0:	4770      	bx	lr
   115c2:	2000      	movs	r0, #0
   115c4:	4770      	bx	lr
   115c6:	0000      	.short	0x0000
   115c8:	200015ac 	.word	0x200015ac

000115cc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
   115cc:	4901      	ldr	r1, [pc, #4]	; (115d4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
   115ce:	8008      	strh	r0, [r1, #0]
   115d0:	4770      	bx	lr
   115d2:	0000      	.short	0x0000
   115d4:	20000270 	.word	0x20000270

000115d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
   115d8:	4905      	ldr	r1, [pc, #20]	; (115f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
   115da:	2000      	movs	r0, #0
   115dc:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
   115e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   115e4:	8488      	strh	r0, [r1, #36]	; 0x24
   115e6:	4903      	ldr	r1, [pc, #12]	; (115f4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
   115e8:	8008      	strh	r0, [r1, #0]
   115ea:	8048      	strh	r0, [r1, #2]
   115ec:	4770      	bx	lr
   115ee:	0000      	.short	0x0000
   115f0:	200015ac 	.word	0x200015ac
   115f4:	20000270 	.word	0x20000270
   115f8:	4905      	ldr	r1, [pc, #20]	; (11610 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
   115fa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   115fc:	4282      	cmp	r2, r0
   115fe:	d105      	bne.n	1160c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
   11600:	2000      	movs	r0, #0
   11602:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
   11606:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1160a:	8488      	strh	r0, [r1, #36]	; 0x24
   1160c:	4770      	bx	lr
   1160e:	0000      	.short	0x0000
   11610:	200015ac 	.word	0x200015ac

00011614 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
   11614:	4a0a      	ldr	r2, [pc, #40]	; (11640 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
   11616:	b110      	cbz	r0, 1161e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
   11618:	2801      	cmp	r0, #1
   1161a:	d007      	beq.n	1162c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
   1161c:	e00e      	b.n	1163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   1161e:	7850      	ldrb	r0, [r2, #1]
   11620:	b160      	cbz	r0, 1163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   11622:	f8d2 0002 	ldr.w	r0, [r2, #2]
   11626:	6008      	str	r0, [r1, #0]
   11628:	88d0      	ldrh	r0, [r2, #6]
   1162a:	e004      	b.n	11636 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
   1162c:	7810      	ldrb	r0, [r2, #0]
   1162e:	b128      	cbz	r0, 1163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   11630:	6890      	ldr	r0, [r2, #8]
   11632:	6008      	str	r0, [r1, #0]
   11634:	8990      	ldrh	r0, [r2, #12]
   11636:	8088      	strh	r0, [r1, #4]
   11638:	2001      	movs	r0, #1
   1163a:	4770      	bx	lr
   1163c:	2000      	movs	r0, #0
   1163e:	4770      	bx	lr
   11640:	2000028d 	.word	0x2000028d

00011644 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
   11644:	4a08      	ldr	r2, [pc, #32]	; (11668 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
   11646:	2301      	movs	r3, #1
   11648:	b138      	cbz	r0, 1165a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
   1164a:	2801      	cmp	r0, #1
   1164c:	d104      	bne.n	11658 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
   1164e:	7013      	strb	r3, [r2, #0]
   11650:	6808      	ldr	r0, [r1, #0]
   11652:	6090      	str	r0, [r2, #8]
   11654:	8888      	ldrh	r0, [r1, #4]
   11656:	8190      	strh	r0, [r2, #12]
   11658:	4770      	bx	lr
   1165a:	7053      	strb	r3, [r2, #1]
   1165c:	6808      	ldr	r0, [r1, #0]
   1165e:	f8c2 0002 	str.w	r0, [r2, #2]
   11662:	8888      	ldrh	r0, [r1, #4]
   11664:	80d0      	strh	r0, [r2, #6]
   11666:	4770      	bx	lr
   11668:	2000028d 	.word	0x2000028d

0001166c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
   1166c:	4906      	ldr	r1, [pc, #24]	; (11688 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
   1166e:	b110      	cbz	r0, 11676 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
   11670:	2801      	cmp	r0, #1
   11672:	d002      	beq.n	1167a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
   11674:	e005      	b.n	11682 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
   11676:	7848      	ldrb	r0, [r1, #1]
   11678:	e000      	b.n	1167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
   1167a:	7808      	ldrb	r0, [r1, #0]
   1167c:	b108      	cbz	r0, 11682 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
   1167e:	2001      	movs	r0, #1
   11680:	4770      	bx	lr
   11682:	2000      	movs	r0, #0
   11684:	4770      	bx	lr
   11686:	0000      	.short	0x0000
   11688:	2000028d 	.word	0x2000028d

0001168c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
   1168c:	4901      	ldr	r1, [pc, #4]	; (11694 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
   1168e:	7448      	strb	r0, [r1, #17]
   11690:	4770      	bx	lr
   11692:	0000      	.short	0x0000
   11694:	20000e0a 	.word	0x20000e0a

00011698 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
   11698:	b578      	push	{r3, r4, r5, r6, lr}
   1169a:	4913      	ldr	r1, [pc, #76]	; (116e8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
   1169c:	7c4a      	ldrb	r2, [r1, #17]
   1169e:	b30a      	cbz	r2, 116e4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
   116a0:	7c0a      	ldrb	r2, [r1, #16]
   116a2:	f88d 2000 	strb.w	r2, [sp]
   116a6:	9a00      	ldr	r2, [sp, #0]
   116a8:	9200      	str	r2, [sp, #0]
   116aa:	f89d 2000 	ldrb.w	r2, [sp]
   116ae:	b1ca      	cbz	r2, 116e4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
   116b0:	2300      	movs	r3, #0
   116b2:	f101 0210 	add.w	r2, r1, #16
   116b6:	241f      	movs	r4, #31
   116b8:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
   116bc:	7c0e      	ldrb	r6, [r1, #16]
   116be:	f88d 6000 	strb.w	r6, [sp]
   116c2:	9e00      	ldr	r6, [sp, #0]
   116c4:	9600      	str	r6, [sp, #0]
   116c6:	f89d 6000 	ldrb.w	r6, [sp]
   116ca:	b14e      	cbz	r6, 116e0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
   116cc:	7013      	strb	r3, [r2, #0]
   116ce:	7043      	strb	r3, [r0, #1]
   116d0:	7004      	strb	r4, [r0, #0]
   116d2:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
   116d6:	6046      	str	r6, [r0, #4]
   116d8:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
   116dc:	6086      	str	r6, [r0, #8]
   116de:	e7ed      	b.n	116bc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
   116e0:	2001      	movs	r0, #1
   116e2:	bd78      	pop	{r3, r4, r5, r6, pc}
   116e4:	2000      	movs	r0, #0
   116e6:	bd78      	pop	{r3, r4, r5, r6, pc}
   116e8:	20000e0a 	.word	0x20000e0a

000116ec <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
   116ec:	b510      	push	{r4, lr}
   116ee:	4604      	mov	r4, r0
   116f0:	f000 f95c 	bl	119ac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   116f4:	b118      	cbz	r0, 116fe <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
   116f6:	21bd      	movs	r1, #189	; 0xbd
   116f8:	2027      	movs	r0, #39	; 0x27
   116fa:	f7ff f939 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   116fe:	4803      	ldr	r0, [pc, #12]	; (1170c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
   11700:	2101      	movs	r1, #1
   11702:	f009 fc5c 	bl	1afbe <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   11706:	4802      	ldr	r0, [pc, #8]	; (11710 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
   11708:	62c4      	str	r4, [r0, #44]	; 0x2c
   1170a:	bd10      	pop	{r4, pc}
   1170c:	20000de8 	.word	0x20000de8
   11710:	200000b0 	.word	0x200000b0

00011714 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
   11714:	4901      	ldr	r1, [pc, #4]	; (1171c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
   11716:	2001      	movs	r0, #1
   11718:	7188      	strb	r0, [r1, #6]
   1171a:	4770      	bx	lr
   1171c:	200000b0 	.word	0x200000b0

00011720 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
   11720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11724:	4d66      	ldr	r5, [pc, #408]	; (118c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
   11726:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11728:	782e      	ldrb	r6, [r5, #0]
   1172a:	bbee      	cbnz	r6, 117a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
   1172c:	b3e2      	cbz	r2, 117a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
   1172e:	b3db      	cbz	r3, 117a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
   11730:	b3d4      	cbz	r4, 117a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
   11732:	f105 0614 	add.w	r6, r5, #20
   11736:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
   1173a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
   1173e:	2700      	movs	r7, #0
   11740:	71af      	strb	r7, [r5, #6]
   11742:	716f      	strb	r7, [r5, #5]
   11744:	70ef      	strb	r7, [r5, #3]
   11746:	70af      	strb	r7, [r5, #2]
   11748:	712f      	strb	r7, [r5, #4]
   1174a:	81af      	strh	r7, [r5, #12]
   1174c:	81ef      	strh	r7, [r5, #14]
   1174e:	f000 f971 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11752:	4606      	mov	r6, r0
   11754:	f000 f968 	bl	11a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11758:	4604      	mov	r4, r0
   1175a:	f006 fe91 	bl	18480 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   1175e:	f006 fb75 	bl	17e4c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   11762:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
   11766:	f006 ff11 	bl	1858c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   1176a:	f104 0018 	add.w	r0, r4, #24
   1176e:	f006 ffeb 	bl	18748 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   11772:	6920      	ldr	r0, [r4, #16]
   11774:	f006 ffde 	bl	18734 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   11778:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
   1177c:	f007 f802 	bl	18784 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   11780:	f04f 0b01 	mov.w	fp, #1
   11784:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
   11788:	2000      	movs	r0, #0
   1178a:	f006 fd3d 	bl	18208 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   1178e:	2800      	cmp	r0, #0
   11790:	d07e      	beq.n	11890 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
   11792:	484c      	ldr	r0, [pc, #304]	; (118c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
   11794:	f006 fdac 	bl	182f0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   11798:	8820      	ldrh	r0, [r4, #0]
   1179a:	f7ff fcfd 	bl	11198 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   1179e:	6328      	str	r0, [r5, #48]	; 0x30
   117a0:	8820      	ldrh	r0, [r4, #0]
   117a2:	f7ff fce3 	bl	1116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   117a6:	e000      	b.n	117aa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
   117a8:	e00a      	b.n	117c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
   117aa:	6368      	str	r0, [r5, #52]	; 0x34
   117ac:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
   117b0:	f88d 0000 	strb.w	r0, [sp]
   117b4:	9800      	ldr	r0, [sp, #0]
   117b6:	9000      	str	r0, [sp, #0]
   117b8:	f89d 0000 	ldrb.w	r0, [sp]
   117bc:	b118      	cbz	r0, 117c6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
   117be:	e012      	b.n	117e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
   117c0:	f44f 718a 	mov.w	r1, #276	; 0x114
   117c4:	e079      	b.n	118ba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
   117c6:	6f20      	ldr	r0, [r4, #112]	; 0x70
   117c8:	b168      	cbz	r0, 117e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
   117ca:	8e70      	ldrh	r0, [r6, #50]	; 0x32
   117cc:	88b1      	ldrh	r1, [r6, #4]
   117ce:	4288      	cmp	r0, r1
   117d0:	d109      	bne.n	117e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
   117d2:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   117d6:	2201      	movs	r2, #1
   117d8:	4408      	add	r0, r1
   117da:	8670      	strh	r0, [r6, #50]	; 0x32
   117dc:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
   117e0:	6f21      	ldr	r1, [r4, #112]	; 0x70
   117e2:	f7fd fd4d 	bl	f280 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
   117e6:	f106 0168 	add.w	r1, r6, #104	; 0x68
   117ea:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 118c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
   117ee:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
   117f2:	f109 0808 	add.w	r8, r9, #8
   117f6:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
   117fa:	6fb1      	ldr	r1, [r6, #120]	; 0x78
   117fc:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
   11800:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
   11802:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
   11806:	f000 f983 	bl	11b10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
   1180a:	4601      	mov	r1, r0
   1180c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   1180e:	46ba      	mov	sl, r7
   11810:	f009 f9c0 	bl	1ab94 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11814:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   11816:	4281      	cmp	r1, r0
   11818:	d200      	bcs.n	1181c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
   1181a:	4608      	mov	r0, r1
   1181c:	7228      	strb	r0, [r5, #8]
   1181e:	46a8      	mov	r8, r5
   11820:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   11824:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
   11826:	7cf7      	ldrb	r7, [r6, #19]
   11828:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
   1182a:	2908      	cmp	r1, #8
   1182c:	d100      	bne.n	11830 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
   1182e:	2104      	movs	r1, #4
   11830:	f009 f9b0 	bl	1ab94 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11834:	b90f      	cbnz	r7, 1183a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
   11836:	1d00      	adds	r0, r0, #4
   11838:	b280      	uxth	r0, r0
   1183a:	4285      	cmp	r5, r0
   1183c:	d200      	bcs.n	11840 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
   1183e:	4628      	mov	r0, r5
   11840:	b2c0      	uxtb	r0, r0
   11842:	f888 0009 	strb.w	r0, [r8, #9]
   11846:	7cf2      	ldrb	r2, [r6, #19]
   11848:	b102      	cbz	r2, 1184c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
   1184a:	2204      	movs	r2, #4
   1184c:	4410      	add	r0, r2
   1184e:	f888 0007 	strb.w	r0, [r8, #7]
   11852:	7cb1      	ldrb	r1, [r6, #18]
   11854:	b1a1      	cbz	r1, 11880 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
   11856:	491c      	ldr	r1, [pc, #112]	; (118c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
   11858:	3108      	adds	r1, #8
   1185a:	f881 b018 	strb.w	fp, [r1, #24]
   1185e:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
   11862:	e9c1 0204 	strd	r0, r2, [r1, #16]
   11866:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   1186a:	f009 f840 	bl	1a8ee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
   1186e:	4916      	ldr	r1, [pc, #88]	; (118c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
   11870:	4603      	mov	r3, r0
   11872:	22fb      	movs	r2, #251	; 0xfb
   11874:	3108      	adds	r1, #8
   11876:	2000      	movs	r0, #0
   11878:	f006 fb32 	bl	17ee0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   1187c:	f006 fb66 	bl	17f4c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11880:	2001      	movs	r0, #1
   11882:	f000 fb95 	bl	11fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
   11886:	4811      	ldr	r0, [pc, #68]	; (118cc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
   11888:	6800      	ldr	r0, [r0, #0]
   1188a:	2803      	cmp	r0, #3
   1188c:	d013      	beq.n	118b6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
   1188e:	e000      	b.n	11892 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
   11890:	e00f      	b.n	118b2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
   11892:	280b      	cmp	r0, #11
   11894:	d00f      	beq.n	118b6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
   11896:	4648      	mov	r0, r9
   11898:	f840 af52 	str.w	sl, [r0, #82]!
   1189c:	f8c0 a004 	str.w	sl, [r0, #4]
   118a0:	4809      	ldr	r0, [pc, #36]	; (118c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
   118a2:	88b1      	ldrh	r1, [r6, #4]
   118a4:	3052      	adds	r0, #82	; 0x52
   118a6:	8041      	strh	r1, [r0, #2]
   118a8:	8821      	ldrh	r1, [r4, #0]
   118aa:	8001      	strh	r1, [r0, #0]
   118ac:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
   118b0:	7101      	strb	r1, [r0, #4]
   118b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118b6:	f240 11c1 	movw	r1, #449	; 0x1c1
   118ba:	2027      	movs	r0, #39	; 0x27
   118bc:	f7ff f858 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   118c0:	200000b0 	.word	0x200000b0
   118c4:	00012134 	.word	0x00012134
   118c8:	20000db8 	.word	0x20000db8
   118cc:	40001550 	.word	0x40001550

000118d0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
   118d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   118d4:	4605      	mov	r5, r0
   118d6:	f000 f8ad 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   118da:	4e33      	ldr	r6, [pc, #204]	; (119a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
   118dc:	4604      	mov	r4, r0
   118de:	6a70      	ldr	r0, [r6, #36]	; 0x24
   118e0:	7847      	ldrb	r7, [r0, #1]
   118e2:	b10d      	cbz	r5, 118e8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
   118e4:	2d01      	cmp	r5, #1
   118e6:	d103      	bne.n	118f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
   118e8:	6b71      	ldr	r1, [r6, #52]	; 0x34
   118ea:	f007 ffa6 	bl	1983a <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
   118ee:	7070      	strb	r0, [r6, #1]
   118f0:	7870      	ldrb	r0, [r6, #1]
   118f2:	f04f 0800 	mov.w	r8, #0
   118f6:	f04f 0901 	mov.w	r9, #1
   118fa:	b150      	cbz	r0, 11912 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
   118fc:	2801      	cmp	r0, #1
   118fe:	d01a      	beq.n	11936 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
   11900:	2802      	cmp	r0, #2
   11902:	d034      	beq.n	1196e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
   11904:	2803      	cmp	r0, #3
   11906:	d048      	beq.n	1199a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
   11908:	f240 4115 	movw	r1, #1045	; 0x415
   1190c:	2027      	movs	r0, #39	; 0x27
   1190e:	f7ff f82f 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11912:	2d01      	cmp	r5, #1
   11914:	d032      	beq.n	1197c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
   11916:	f000 f8e7 	bl	11ae8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
   1191a:	4639      	mov	r1, r7
   1191c:	2201      	movs	r2, #1
   1191e:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11920:	f008 fc69 	bl	1a1f6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   11924:	e028      	b.n	11978 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
   11926:	bf00      	nop
   11928:	f884 8008 	strb.w	r8, [r4, #8]
   1192c:	e031      	b.n	11992 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   1192e:	bf00      	nop
   11930:	f884 9008 	strb.w	r9, [r4, #8]
   11934:	e02d      	b.n	11992 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   11936:	2d01      	cmp	r5, #1
   11938:	d008      	beq.n	1194c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
   1193a:	f000 f8d5 	bl	11ae8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
   1193e:	4639      	mov	r1, r7
   11940:	2200      	movs	r2, #0
   11942:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11944:	f008 fc57 	bl	1a1f6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   11948:	2d02      	cmp	r5, #2
   1194a:	d00b      	beq.n	11964 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   1194c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   11950:	1c40      	adds	r0, r0, #1
   11952:	f141 0100 	adc.w	r1, r1, #0
   11956:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   1195a:	7a20      	ldrb	r0, [r4, #8]
   1195c:	2801      	cmp	r0, #1
   1195e:	d003      	beq.n	11968 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
   11960:	f884 9008 	strb.w	r9, [r4, #8]
   11964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11968:	f884 8008 	strb.w	r8, [r4, #8]
   1196c:	e7fa      	b.n	11964 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   1196e:	2d01      	cmp	r5, #1
   11970:	d004      	beq.n	1197c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
   11972:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11974:	f008 fe79 	bl	1a66a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
   11978:	2d02      	cmp	r5, #2
   1197a:	d0f3      	beq.n	11964 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   1197c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   11980:	1c40      	adds	r0, r0, #1
   11982:	f141 0100 	adc.w	r1, r1, #0
   11986:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   1198a:	7a20      	ldrb	r0, [r4, #8]
   1198c:	2801      	cmp	r0, #1
   1198e:	d1cf      	bne.n	11930 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
   11990:	e7ca      	b.n	11928 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
   11992:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11996:	f001 b92b 	b.w	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1199a:	2d01      	cmp	r5, #1
   1199c:	d0e2      	beq.n	11964 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   1199e:	6b70      	ldr	r0, [r6, #52]	; 0x34
   119a0:	f008 fe63 	bl	1a66a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
   119a4:	e7f5      	b.n	11992 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   119a6:	0000      	.short	0x0000
   119a8:	200000b0 	.word	0x200000b0

000119ac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
   119ac:	4804      	ldr	r0, [pc, #16]	; (119c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
   119ae:	7800      	ldrb	r0, [r0, #0]
   119b0:	b108      	cbz	r0, 119b6 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
   119b2:	200c      	movs	r0, #12
   119b4:	4770      	bx	lr
   119b6:	4903      	ldr	r1, [pc, #12]	; (119c4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
   119b8:	2000      	movs	r0, #0
   119ba:	7448      	strb	r0, [r1, #17]
   119bc:	4770      	bx	lr
   119be:	0000      	.short	0x0000
   119c0:	200000b0 	.word	0x200000b0
   119c4:	20000e0a 	.word	0x20000e0a

000119c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
   119c8:	4812      	ldr	r0, [pc, #72]	; (11a14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
   119ca:	b508      	push	{r3, lr}
   119cc:	7801      	ldrb	r1, [r0, #0]
   119ce:	b139      	cbz	r1, 119e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
   119d0:	7800      	ldrb	r0, [r0, #0]
   119d2:	2801      	cmp	r0, #1
   119d4:	d006      	beq.n	119e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
   119d6:	f240 11d9 	movw	r1, #473	; 0x1d9
   119da:	2027      	movs	r0, #39	; 0x27
   119dc:	f7fe ffc8 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   119e0:	f000 f9ce 	bl	11d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
   119e4:	f000 f820 	bl	11a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   119e8:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
   119ec:	f88d 1000 	strb.w	r1, [sp]
   119f0:	9900      	ldr	r1, [sp, #0]
   119f2:	9100      	str	r1, [sp, #0]
   119f4:	f89d 1000 	ldrb.w	r1, [sp]
   119f8:	2900      	cmp	r1, #0
   119fa:	d10a      	bne.n	11a12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
   119fc:	6f01      	ldr	r1, [r0, #112]	; 0x70
   119fe:	2900      	cmp	r1, #0
   11a00:	d007      	beq.n	11a12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
   11a02:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
   11a06:	2200      	movs	r2, #0
   11a08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11a0c:	4611      	mov	r1, r2
   11a0e:	f7fd bc37 	b.w	f280 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
   11a12:	bd08      	pop	{r3, pc}
   11a14:	200000b0 	.word	0x200000b0
   11a18:	4a02      	ldr	r2, [pc, #8]	; (11a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
   11a1a:	8993      	ldrh	r3, [r2, #12]
   11a1c:	4303      	orrs	r3, r0
   11a1e:	8193      	strh	r3, [r2, #12]
   11a20:	6952      	ldr	r2, [r2, #20]
   11a22:	4710      	bx	r2
   11a24:	200000b0 	.word	0x200000b0
   11a28:	4801      	ldr	r0, [pc, #4]	; (11a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
   11a2a:	6840      	ldr	r0, [r0, #4]
   11a2c:	4770      	bx	lr
   11a2e:	0000      	.short	0x0000
   11a30:	200000e8 	.word	0x200000e8
   11a34:	4801      	ldr	r0, [pc, #4]	; (11a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
   11a36:	6840      	ldr	r0, [r0, #4]
   11a38:	3078      	adds	r0, #120	; 0x78
   11a3a:	4770      	bx	lr
   11a3c:	200000e8 	.word	0x200000e8
   11a40:	4a01      	ldr	r2, [pc, #4]	; (11a48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
   11a42:	2100      	movs	r1, #0
   11a44:	6952      	ldr	r2, [r2, #20]
   11a46:	4710      	bx	r2
   11a48:	200000b0 	.word	0x200000b0
   11a4c:	b570      	push	{r4, r5, r6, lr}
   11a4e:	f7ff fff1 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11a52:	4604      	mov	r4, r0
   11a54:	f7ff ffe8 	bl	11a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11a58:	4605      	mov	r5, r0
   11a5a:	4621      	mov	r1, r4
   11a5c:	f009 f962 	bl	1ad24 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
   11a60:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   11a64:	2901      	cmp	r1, #1
   11a66:	d114      	bne.n	11a92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
   11a68:	2800      	cmp	r0, #0
   11a6a:	d012      	beq.n	11a92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
   11a6c:	4909      	ldr	r1, [pc, #36]	; (11a94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
   11a6e:	2001      	movs	r0, #1
   11a70:	684a      	ldr	r2, [r1, #4]
   11a72:	8829      	ldrh	r1, [r5, #0]
   11a74:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
   11a78:	7a61      	ldrb	r1, [r4, #9]
   11a7a:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
   11a7e:	7aa1      	ldrb	r1, [r4, #10]
   11a80:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
   11a84:	f502 72c4 	add.w	r2, r2, #392	; 0x188
   11a88:	7010      	strb	r0, [r2, #0]
   11a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11a8e:	f001 b8af 	b.w	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11a92:	bd70      	pop	{r4, r5, r6, pc}
   11a94:	200000e8 	.word	0x200000e8
   11a98:	b570      	push	{r4, r5, r6, lr}
   11a9a:	4605      	mov	r5, r0
   11a9c:	2901      	cmp	r1, #1
   11a9e:	d81c      	bhi.n	11ada <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
   11aa0:	4c10      	ldr	r4, [pc, #64]	; (11ae4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
   11aa2:	69a1      	ldr	r1, [r4, #24]
   11aa4:	4788      	blx	r1
   11aa6:	b1c0      	cbz	r0, 11ada <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
   11aa8:	7960      	ldrb	r0, [r4, #5]
   11aaa:	b9b0      	cbnz	r0, 11ada <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
   11aac:	2d01      	cmp	r5, #1
   11aae:	d116      	bne.n	11ade <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
   11ab0:	f104 0010 	add.w	r0, r4, #16
   11ab4:	7800      	ldrb	r0, [r0, #0]
   11ab6:	06c1      	lsls	r1, r0, #27
   11ab8:	d405      	bmi.n	11ac6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
   11aba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   11abc:	7809      	ldrb	r1, [r1, #0]
   11abe:	06c9      	lsls	r1, r1, #27
   11ac0:	d401      	bmi.n	11ac6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
   11ac2:	2101      	movs	r1, #1
   11ac4:	e000      	b.n	11ac8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
   11ac6:	2100      	movs	r1, #0
   11ac8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   11aca:	b91a      	cbnz	r2, 11ad4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
   11acc:	8962      	ldrh	r2, [r4, #10]
   11ace:	b10a      	cbz	r2, 11ad4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
   11ad0:	06c0      	lsls	r0, r0, #27
   11ad2:	d502      	bpl.n	11ada <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
   11ad4:	89a0      	ldrh	r0, [r4, #12]
   11ad6:	4301      	orrs	r1, r0
   11ad8:	d001      	beq.n	11ade <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
   11ada:	2001      	movs	r0, #1
   11adc:	bd70      	pop	{r4, r5, r6, pc}
   11ade:	2000      	movs	r0, #0
   11ae0:	bd70      	pop	{r4, r5, r6, pc}
   11ae2:	0000      	.short	0x0000
   11ae4:	200000b0 	.word	0x200000b0
   11ae8:	b510      	push	{r4, lr}
   11aea:	4c08      	ldr	r4, [pc, #32]	; (11b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
   11aec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11aee:	b138      	cbz	r0, 11b00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
   11af0:	8962      	ldrh	r2, [r4, #10]
   11af2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11af4:	1cd2      	adds	r2, r2, #3
   11af6:	f007 fd5a 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11afa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11afc:	6260      	str	r0, [r4, #36]	; 0x24
   11afe:	bd10      	pop	{r4, pc}
   11b00:	f240 415b 	movw	r1, #1115	; 0x45b
   11b04:	2027      	movs	r0, #39	; 0x27
   11b06:	f7fe ff33 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11b0a:	0000      	.short	0x0000
   11b0c:	200000b0 	.word	0x200000b0
   11b10:	b510      	push	{r4, lr}
   11b12:	f7ff ff89 	bl	11a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11b16:	4604      	mov	r4, r0
   11b18:	f7ff ff8c 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11b1c:	7b41      	ldrb	r1, [r0, #13]
   11b1e:	4a0a      	ldr	r2, [pc, #40]	; (11b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
   11b20:	2924      	cmp	r1, #36	; 0x24
   11b22:	d008      	beq.n	11b36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
   11b24:	7b80      	ldrb	r0, [r0, #14]
   11b26:	2824      	cmp	r0, #36	; 0x24
   11b28:	d005      	beq.n	11b36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
   11b2a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   11b2e:	2804      	cmp	r0, #4
   11b30:	d100      	bne.n	11b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
   11b32:	2008      	movs	r0, #8
   11b34:	bd10      	pop	{r4, pc}
   11b36:	6850      	ldr	r0, [r2, #4]
   11b38:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
   11b3c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   11b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11b44:	f008 bee1 	b.w	1a90a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
   11b48:	200000e8 	.word	0x200000e8
   11b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b50:	4689      	mov	r9, r1
   11b52:	4606      	mov	r6, r0
   11b54:	f7ff ff6e 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11b58:	4c58      	ldr	r4, [pc, #352]	; (11cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
   11b5a:	2700      	movs	r7, #0
   11b5c:	4605      	mov	r5, r0
   11b5e:	f88d 7000 	strb.w	r7, [sp]
   11b62:	7820      	ldrb	r0, [r4, #0]
   11b64:	2802      	cmp	r0, #2
   11b66:	d004      	beq.n	11b72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
   11b68:	f240 41ba 	movw	r1, #1210	; 0x4ba
   11b6c:	2027      	movs	r0, #39	; 0x27
   11b6e:	f7fe feff 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11b72:	7ba0      	ldrb	r0, [r4, #14]
   11b74:	0640      	lsls	r0, r0, #25
   11b76:	d406      	bmi.n	11b86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
   11b78:	2040      	movs	r0, #64	; 0x40
   11b7a:	f7ff ff61 	bl	11a40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
   11b7e:	89e0      	ldrh	r0, [r4, #14]
   11b80:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   11b84:	81e0      	strh	r0, [r4, #14]
   11b86:	7ce8      	ldrb	r0, [r5, #19]
   11b88:	f04f 0801 	mov.w	r8, #1
   11b8c:	b3c6      	cbz	r6, 11c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
   11b8e:	f006 fa0d 	bl	17fac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
   11b92:	f006 f9f1 	bl	17f78 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
   11b96:	b968      	cbnz	r0, 11bb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
   11b98:	7ce8      	ldrb	r0, [r5, #19]
   11b9a:	b158      	cbz	r0, 11bb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
   11b9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11b9e:	7841      	ldrb	r1, [r0, #1]
   11ba0:	b141      	cbz	r1, 11bb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
   11ba2:	7800      	ldrb	r0, [r0, #0]
   11ba4:	7a29      	ldrb	r1, [r5, #8]
   11ba6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11baa:	4288      	cmp	r0, r1
   11bac:	d102      	bne.n	11bb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
   11bae:	f884 8002 	strb.w	r8, [r4, #2]
   11bb2:	e064      	b.n	11c7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
   11bb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11bb6:	7841      	ldrb	r1, [r0, #1]
   11bb8:	8161      	strh	r1, [r4, #10]
   11bba:	b121      	cbz	r1, 11bc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
   11bbc:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11bbe:	f008 fd21 	bl	1a604 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
   11bc2:	62a0      	str	r0, [r4, #40]	; 0x28
   11bc4:	e000      	b.n	11bc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
   11bc6:	62a7      	str	r7, [r4, #40]	; 0x28
   11bc8:	89e0      	ldrh	r0, [r4, #14]
   11bca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   11bce:	81e0      	strh	r0, [r4, #14]
   11bd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11bd2:	79e9      	ldrb	r1, [r5, #7]
   11bd4:	7800      	ldrb	r0, [r0, #0]
   11bd6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11bda:	4288      	cmp	r0, r1
   11bdc:	d005      	beq.n	11bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
   11bde:	f000 f963 	bl	11ea8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
   11be2:	89e0      	ldrh	r0, [r4, #14]
   11be4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   11be8:	81e0      	strh	r0, [r4, #14]
   11bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11bec:	7a29      	ldrb	r1, [r5, #8]
   11bee:	7800      	ldrb	r0, [r0, #0]
   11bf0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11bf4:	4288      	cmp	r0, r1
   11bf6:	d10e      	bne.n	11c16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
   11bf8:	4668      	mov	r0, sp
   11bfa:	f000 f917 	bl	11e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
   11bfe:	e00a      	b.n	11c16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
   11c00:	e7ff      	b.n	11c02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
   11c02:	b108      	cbz	r0, 11c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
   11c04:	f006 f9cc 	bl	17fa0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
   11c08:	78e0      	ldrb	r0, [r4, #3]
   11c0a:	1c40      	adds	r0, r0, #1
   11c0c:	70e0      	strb	r0, [r4, #3]
   11c0e:	89e0      	ldrh	r0, [r4, #14]
   11c10:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   11c14:	81e0      	strh	r0, [r4, #14]
   11c16:	7ca8      	ldrb	r0, [r5, #18]
   11c18:	b1a0      	cbz	r0, 11c44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
   11c1a:	f7ff ff05 	bl	11a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11c1e:	4928      	ldr	r1, [pc, #160]	; (11cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
   11c20:	f881 8018 	strb.w	r8, [r1, #24]
   11c24:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
   11c28:	e9c1 2304 	strd	r2, r3, [r1, #16]
   11c2c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11c30:	f008 fe5d 	bl	1a8ee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
   11c34:	4603      	mov	r3, r0
   11c36:	22fb      	movs	r2, #251	; 0xfb
   11c38:	4921      	ldr	r1, [pc, #132]	; (11cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
   11c3a:	2000      	movs	r0, #0
   11c3c:	f006 f950 	bl	17ee0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   11c40:	f006 f984 	bl	17f4c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11c44:	4d1e      	ldr	r5, [pc, #120]	; (11cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
   11c46:	354a      	adds	r5, #74	; 0x4a
   11c48:	f1b9 0f00 	cmp.w	r9, #0
   11c4c:	d104      	bne.n	11c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
   11c4e:	78e1      	ldrb	r1, [r4, #3]
   11c50:	2001      	movs	r0, #1
   11c52:	f7ff ff21 	bl	11a98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
   11c56:	b1b0      	cbz	r0, 11c86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
   11c58:	f006 fd48 	bl	186ec <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
   11c5c:	f89d 0000 	ldrb.w	r0, [sp]
   11c60:	b110      	cbz	r0, 11c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
   11c62:	2000      	movs	r0, #0
   11c64:	f7ff fe34 	bl	118d0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11c68:	b136      	cbz	r6, 11c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
   11c6a:	70e7      	strb	r7, [r4, #3]
   11c6c:	7968      	ldrb	r0, [r5, #5]
   11c6e:	1c40      	adds	r0, r0, #1
   11c70:	7168      	strb	r0, [r5, #5]
   11c72:	f7ff feeb 	bl	11a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
   11c76:	e002      	b.n	11c7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
   11c78:	79a8      	ldrb	r0, [r5, #6]
   11c7a:	1c40      	adds	r0, r0, #1
   11c7c:	71a8      	strb	r0, [r5, #6]
   11c7e:	f000 f87f 	bl	11d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
   11c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11c86:	f89d 0000 	ldrb.w	r0, [sp]
   11c8a:	b110      	cbz	r0, 11c92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
   11c8c:	2001      	movs	r0, #1
   11c8e:	f7ff fe1f 	bl	118d0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11c92:	2000      	movs	r0, #0
   11c94:	f000 f98c 	bl	11fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
   11c98:	f89d 0000 	ldrb.w	r0, [sp]
   11c9c:	b110      	cbz	r0, 11ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
   11c9e:	2002      	movs	r0, #2
   11ca0:	f7ff fe16 	bl	118d0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11ca4:	b136      	cbz	r6, 11cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
   11ca6:	70e7      	strb	r7, [r4, #3]
   11ca8:	7968      	ldrb	r0, [r5, #5]
   11caa:	1c40      	adds	r0, r0, #1
   11cac:	7168      	strb	r0, [r5, #5]
   11cae:	f7ff fecd 	bl	11a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
   11cb2:	e7e6      	b.n	11c82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
   11cb4:	79a8      	ldrb	r0, [r5, #6]
   11cb6:	1c40      	adds	r0, r0, #1
   11cb8:	71a8      	strb	r0, [r5, #6]
   11cba:	e7e2      	b.n	11c82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
   11cbc:	200000b0 	.word	0x200000b0
   11cc0:	20000dc0 	.word	0x20000dc0
   11cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11cc8:	4688      	mov	r8, r1
   11cca:	4681      	mov	r9, r0
   11ccc:	f7ff feb2 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11cd0:	4d29      	ldr	r5, [pc, #164]	; (11d78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
   11cd2:	4604      	mov	r4, r0
   11cd4:	7828      	ldrb	r0, [r5, #0]
   11cd6:	2801      	cmp	r0, #1
   11cd8:	d004      	beq.n	11ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
   11cda:	f240 416a 	movw	r1, #1130	; 0x46a
   11cde:	2027      	movs	r0, #39	; 0x27
   11ce0:	f7fe fe46 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11ce4:	7860      	ldrb	r0, [r4, #1]
   11ce6:	2600      	movs	r6, #0
   11ce8:	2701      	movs	r7, #1
   11cea:	b120      	cbz	r0, 11cf6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
   11cec:	7066      	strb	r6, [r4, #1]
   11cee:	2100      	movs	r1, #0
   11cf0:	2004      	movs	r0, #4
   11cf2:	f7ff fe91 	bl	11a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
   11cf6:	6a29      	ldr	r1, [r5, #32]
   11cf8:	7808      	ldrb	r0, [r1, #0]
   11cfa:	43c0      	mvns	r0, r0
   11cfc:	0780      	lsls	r0, r0, #30
   11cfe:	d109      	bne.n	11d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
   11d00:	79a0      	ldrb	r0, [r4, #6]
   11d02:	bb88      	cbnz	r0, 11d68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
   11d04:	2002      	movs	r0, #2
   11d06:	f7ff fe87 	bl	11a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
   11d0a:	6a28      	ldr	r0, [r5, #32]
   11d0c:	7800      	ldrb	r0, [r0, #0]
   11d0e:	43c0      	mvns	r0, r0
   11d10:	0780      	lsls	r0, r0, #30
   11d12:	d029      	beq.n	11d68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
   11d14:	6a28      	ldr	r0, [r5, #32]
   11d16:	7840      	ldrb	r0, [r0, #1]
   11d18:	b110      	cbz	r0, 11d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
   11d1a:	2002      	movs	r0, #2
   11d1c:	71a0      	strb	r0, [r4, #6]
   11d1e:	e000      	b.n	11d22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
   11d20:	71a7      	strb	r7, [r4, #6]
   11d22:	7ce0      	ldrb	r0, [r4, #19]
   11d24:	b1a0      	cbz	r0, 11d50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
   11d26:	f7ff fe7f 	bl	11a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11d2a:	4914      	ldr	r1, [pc, #80]	; (11d7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
   11d2c:	7a6d      	ldrb	r5, [r5, #9]
   11d2e:	760e      	strb	r6, [r1, #24]
   11d30:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   11d34:	e9c1 2304 	strd	r2, r3, [r1, #16]
   11d38:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   11d3c:	f008 fdd7 	bl	1a8ee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
   11d40:	4603      	mov	r3, r0
   11d42:	462a      	mov	r2, r5
   11d44:	490d      	ldr	r1, [pc, #52]	; (11d7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
   11d46:	2001      	movs	r0, #1
   11d48:	f006 f8ca 	bl	17ee0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   11d4c:	f006 f8fe 	bl	17f4c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11d50:	ea38 0009 	bics.w	r0, r8, r9
   11d54:	d004      	beq.n	11d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
   11d56:	2100      	movs	r1, #0
   11d58:	4608      	mov	r0, r1
   11d5a:	f7ff fe9d 	bl	11a98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
   11d5e:	b128      	cbz	r0, 11d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
   11d60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d64:	f000 b80c 	b.w	11d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
   11d68:	2003      	movs	r0, #3
   11d6a:	e7d7      	b.n	11d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
   11d6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d70:	2000      	movs	r0, #0
   11d72:	f000 b8df 	b.w	11f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
   11d76:	0000      	.short	0x0000
   11d78:	200000b0 	.word	0x200000b0
   11d7c:	20000dc0 	.word	0x20000dc0
   11d80:	b510      	push	{r4, lr}
   11d82:	f006 f9a5 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   11d86:	f006 f861 	bl	17e4c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   11d8a:	4c0d      	ldr	r4, [pc, #52]	; (11dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
   11d8c:	89e0      	ldrh	r0, [r4, #14]
   11d8e:	f7ff fe57 	bl	11a40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
   11d92:	69e2      	ldr	r2, [r4, #28]
   11d94:	7961      	ldrb	r1, [r4, #5]
   11d96:	78a0      	ldrb	r0, [r4, #2]
   11d98:	4790      	blx	r2
   11d9a:	480a      	ldr	r0, [pc, #40]	; (11dc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
   11d9c:	7c40      	ldrb	r0, [r0, #17]
   11d9e:	b158      	cbz	r0, 11db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
   11da0:	4808      	ldr	r0, [pc, #32]	; (11dc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
   11da2:	3852      	subs	r0, #82	; 0x52
   11da4:	f850 1f52 	ldr.w	r1, [r0, #82]!
   11da8:	6081      	str	r1, [r0, #8]
   11daa:	6841      	ldr	r1, [r0, #4]
   11dac:	60c1      	str	r1, [r0, #12]
   11dae:	4805      	ldr	r0, [pc, #20]	; (11dc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
   11db0:	2101      	movs	r1, #1
   11db2:	7401      	strb	r1, [r0, #16]
   11db4:	f000 ff1c 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11db8:	2000      	movs	r0, #0
   11dba:	7020      	strb	r0, [r4, #0]
   11dbc:	bd10      	pop	{r4, pc}
   11dbe:	0000      	.short	0x0000
   11dc0:	200000b0 	.word	0x200000b0
   11dc4:	20000e0a 	.word	0x20000e0a
   11dc8:	4808      	ldr	r0, [pc, #32]	; (11dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
   11dca:	b510      	push	{r4, lr}
   11dcc:	7800      	ldrb	r0, [r0, #0]
   11dce:	2802      	cmp	r0, #2
   11dd0:	d004      	beq.n	11ddc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
   11dd2:	f240 2111 	movw	r1, #529	; 0x211
   11dd6:	2027      	movs	r0, #39	; 0x27
   11dd8:	f7fe fdca 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11ddc:	4904      	ldr	r1, [pc, #16]	; (11df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
   11dde:	2001      	movs	r0, #1
   11de0:	71c8      	strb	r0, [r1, #7]
   11de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11de6:	f7ff bfcb 	b.w	11d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
   11dea:	0000      	.short	0x0000
   11dec:	200000b0 	.word	0x200000b0
   11df0:	20000e0a 	.word	0x20000e0a
   11df4:	b430      	push	{r4, r5}
   11df6:	4b0c      	ldr	r3, [pc, #48]	; (11e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
   11df8:	b942      	cbnz	r2, 11e0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
   11dfa:	79da      	ldrb	r2, [r3, #7]
   11dfc:	2aff      	cmp	r2, #255	; 0xff
   11dfe:	d105      	bne.n	11e0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
   11e00:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
   11e04:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
   11e08:	42a2      	cmp	r2, r4
   11e0a:	d00b      	beq.n	11e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
   11e0c:	b131      	cbz	r1, 11e1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
   11e0e:	79da      	ldrb	r2, [r3, #7]
   11e10:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
   11e14:	bc30      	pop	{r4, r5}
   11e16:	4610      	mov	r0, r2
   11e18:	f006 bca0 	b.w	1875c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
   11e1c:	22ff      	movs	r2, #255	; 0xff
   11e1e:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
   11e22:	e7f7      	b.n	11e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
   11e24:	bc30      	pop	{r4, r5}
   11e26:	4770      	bx	lr
   11e28:	200000b0 	.word	0x200000b0
   11e2c:	b570      	push	{r4, r5, r6, lr}
   11e2e:	4606      	mov	r6, r0
   11e30:	f7ff fe00 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11e34:	4a1b      	ldr	r2, [pc, #108]	; (11ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
   11e36:	4604      	mov	r4, r0
   11e38:	2501      	movs	r5, #1
   11e3a:	6a51      	ldr	r1, [r2, #36]	; 0x24
   11e3c:	7808      	ldrb	r0, [r1, #0]
   11e3e:	f000 0003 	and.w	r0, r0, #3
   11e42:	2801      	cmp	r0, #1
   11e44:	d00c      	beq.n	11e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
   11e46:	2802      	cmp	r0, #2
   11e48:	d00a      	beq.n	11e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
   11e4a:	2803      	cmp	r0, #3
   11e4c:	d121      	bne.n	11e92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
   11e4e:	7065      	strb	r5, [r4, #1]
   11e50:	89d0      	ldrh	r0, [r2, #14]
   11e52:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   11e56:	81d0      	strh	r0, [r2, #14]
   11e58:	2001      	movs	r0, #1
   11e5a:	f7ff fddd 	bl	11a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
   11e5e:	e018      	b.n	11e92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
   11e60:	7848      	ldrb	r0, [r1, #1]
   11e62:	b1b0      	cbz	r0, 11e92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
   11e64:	89d1      	ldrh	r1, [r2, #14]
   11e66:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   11e6a:	81d1      	strh	r1, [r2, #14]
   11e6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   11e6e:	2900      	cmp	r1, #0
   11e70:	d009      	beq.n	11e86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
   11e72:	28fb      	cmp	r0, #251	; 0xfb
   11e74:	d808      	bhi.n	11e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
   11e76:	7990      	ldrb	r0, [r2, #6]
   11e78:	b120      	cbz	r0, 11e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
   11e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11e7e:	2020      	movs	r0, #32
   11e80:	f7ff bdde 	b.w	11a40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
   11e84:	7035      	strb	r5, [r6, #0]
   11e86:	bd70      	pop	{r4, r5, r6, pc}
   11e88:	7950      	ldrb	r0, [r2, #5]
   11e8a:	f040 0010 	orr.w	r0, r0, #16
   11e8e:	7150      	strb	r0, [r2, #5]
   11e90:	bd70      	pop	{r4, r5, r6, pc}
   11e92:	7a20      	ldrb	r0, [r4, #8]
   11e94:	2801      	cmp	r0, #1
   11e96:	d001      	beq.n	11e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
   11e98:	7225      	strb	r5, [r4, #8]
   11e9a:	bd70      	pop	{r4, r5, r6, pc}
   11e9c:	2000      	movs	r0, #0
   11e9e:	7220      	strb	r0, [r4, #8]
   11ea0:	bd70      	pop	{r4, r5, r6, pc}
   11ea2:	0000      	.short	0x0000
   11ea4:	200000b0 	.word	0x200000b0
   11ea8:	b570      	push	{r4, r5, r6, lr}
   11eaa:	f7ff fdc3 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11eae:	4604      	mov	r4, r0
   11eb0:	7980      	ldrb	r0, [r0, #6]
   11eb2:	2800      	cmp	r0, #0
   11eb4:	d027      	beq.n	11f06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
   11eb6:	2802      	cmp	r0, #2
   11eb8:	d10d      	bne.n	11ed6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
   11eba:	4818      	ldr	r0, [pc, #96]	; (11f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
   11ebc:	6b00      	ldr	r0, [r0, #48]	; 0x30
   11ebe:	f008 f973 	bl	1a1a8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
   11ec2:	b308      	cbz	r0, 11f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
   11ec4:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   11ec8:	1c40      	adds	r0, r0, #1
   11eca:	f141 0100 	adc.w	r1, r1, #0
   11ece:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
   11ed2:	f000 fe8d 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11ed6:	2500      	movs	r5, #0
   11ed8:	71a5      	strb	r5, [r4, #6]
   11eda:	78a0      	ldrb	r0, [r4, #2]
   11edc:	2601      	movs	r6, #1
   11ede:	b170      	cbz	r0, 11efe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
   11ee0:	70a5      	strb	r5, [r4, #2]
   11ee2:	f7ff fb21 	bl	11528 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   11ee6:	b190      	cbz	r0, 11f0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
   11ee8:	2100      	movs	r1, #0
   11eea:	2008      	movs	r0, #8
   11eec:	f7ff fd94 	bl	11a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
   11ef0:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   11ef4:	1c40      	adds	r0, r0, #1
   11ef6:	f141 0100 	adc.w	r1, r1, #0
   11efa:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
   11efe:	79e0      	ldrb	r0, [r4, #7]
   11f00:	2801      	cmp	r0, #1
   11f02:	d009      	beq.n	11f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
   11f04:	71e6      	strb	r6, [r4, #7]
   11f06:	bd70      	pop	{r4, r5, r6, pc}
   11f08:	f44f 716c 	mov.w	r1, #944	; 0x3b0
   11f0c:	e001      	b.n	11f12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
   11f0e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   11f12:	2027      	movs	r0, #39	; 0x27
   11f14:	f7fe fd2c 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11f18:	71e5      	strb	r5, [r4, #7]
   11f1a:	bd70      	pop	{r4, r5, r6, pc}
   11f1c:	200000b0 	.word	0x200000b0
   11f20:	4803      	ldr	r0, [pc, #12]	; (11f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
   11f22:	7800      	ldrb	r0, [r0, #0]
   11f24:	2800      	cmp	r0, #0
   11f26:	d001      	beq.n	11f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
   11f28:	f7ff bf2a 	b.w	11d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
   11f2c:	4770      	bx	lr
   11f2e:	0000      	.short	0x0000
   11f30:	200000b0 	.word	0x200000b0
   11f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f38:	4607      	mov	r7, r0
   11f3a:	f7ff fd75 	bl	11a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11f3e:	4680      	mov	r8, r0
   11f40:	f7ff fd78 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11f44:	4c17      	ldr	r4, [pc, #92]	; (11fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
   11f46:	4605      	mov	r5, r0
   11f48:	463a      	mov	r2, r7
   11f4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11f4c:	6260      	str	r0, [r4, #36]	; 0x24
   11f4e:	2101      	movs	r1, #1
   11f50:	4640      	mov	r0, r8
   11f52:	f7ff ff4f 	bl	11df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
   11f56:	7ce8      	ldrb	r0, [r5, #19]
   11f58:	2600      	movs	r6, #0
   11f5a:	b178      	cbz	r0, 11f7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
   11f5c:	4812      	ldr	r0, [pc, #72]	; (11fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
   11f5e:	f006 fb1b 	bl	18598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   11f62:	4812      	ldr	r0, [pc, #72]	; (11fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
   11f64:	7606      	strb	r6, [r0, #24]
   11f66:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
   11f6a:	e9c0 1204 	strd	r1, r2, [r0, #16]
   11f6e:	490e      	ldr	r1, [pc, #56]	; (11fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
   11f70:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11f72:	f005 ff3d 	bl	17df0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
   11f76:	f005 ff4f 	bl	17e18 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
   11f7a:	e004      	b.n	11f86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
   11f7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11f7e:	f006 fb0b 	bl	18598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   11f82:	f005 ff63 	bl	17e4c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   11f86:	b917      	cbnz	r7, 11f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
   11f88:	4630      	mov	r0, r6
   11f8a:	f006 f9b9 	bl	18300 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   11f8e:	2100      	movs	r1, #0
   11f90:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
   11f94:	4608      	mov	r0, r1
   11f96:	f006 fb8b 	bl	186b0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   11f9a:	2002      	movs	r0, #2
   11f9c:	7020      	strb	r0, [r4, #0]
   11f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fa2:	0000      	.short	0x0000
   11fa4:	200000b0 	.word	0x200000b0
   11fa8:	20000cb8 	.word	0x20000cb8
   11fac:	20000dc0 	.word	0x20000dc0
   11fb0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   11fb4:	4604      	mov	r4, r0
   11fb6:	f7ff fd3d 	bl	11a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11fba:	4605      	mov	r5, r0
   11fbc:	f7ff fd34 	bl	11a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11fc0:	4606      	mov	r6, r0
   11fc2:	f8df 9164 	ldr.w	r9, [pc, #356]	; 12128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
   11fc6:	4622      	mov	r2, r4
   11fc8:	2100      	movs	r1, #0
   11fca:	f7ff ff13 	bl	11df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
   11fce:	79a8      	ldrb	r0, [r5, #6]
   11fd0:	f04f 0800 	mov.w	r8, #0
   11fd4:	2701      	movs	r7, #1
   11fd6:	f1a9 0420 	sub.w	r4, r9, #32
   11fda:	b140      	cbz	r0, 11fee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
   11fdc:	2801      	cmp	r0, #1
   11fde:	d01f      	beq.n	12020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
   11fe0:	2802      	cmp	r0, #2
   11fe2:	d030      	beq.n	12046 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
   11fe4:	2803      	cmp	r0, #3
   11fe6:	d03c      	beq.n	12062 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
   11fe8:	f240 21ae 	movw	r1, #686	; 0x2ae
   11fec:	e058      	b.n	120a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
   11fee:	7a20      	ldrb	r0, [r4, #8]
   11ff0:	2150      	movs	r1, #80	; 0x50
   11ff2:	f8ad 0004 	strh.w	r0, [sp, #4]
   11ff6:	5388      	strh	r0, [r1, r6]
   11ff8:	4648      	mov	r0, r9
   11ffa:	f7ff fabf 	bl	1157c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   11ffe:	b128      	cbz	r0, 1200c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
   12000:	2080      	movs	r0, #128	; 0x80
   12002:	6a21      	ldr	r1, [r4, #32]
   12004:	f7ff fd08 	bl	11a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
   12008:	70af      	strb	r7, [r5, #2]
   1200a:	e02e      	b.n	1206a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
   1200c:	466a      	mov	r2, sp
   1200e:	a901      	add	r1, sp, #4
   12010:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12012:	f008 fc84 	bl	1a91e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
   12016:	6220      	str	r0, [r4, #32]
   12018:	b110      	cbz	r0, 12020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
   1201a:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
   1201e:	b111      	cbz	r1, 12026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
   12020:	4842      	ldr	r0, [pc, #264]	; (1212c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
   12022:	6220      	str	r0, [r4, #32]
   12024:	e021      	b.n	1206a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
   12026:	f89d 1000 	ldrb.w	r1, [sp]
   1202a:	b931      	cbnz	r1, 1203a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
   1202c:	f8a0 8000 	strh.w	r8, [r0]
   12030:	f880 8002 	strb.w	r8, [r0, #2]
   12034:	2101      	movs	r1, #1
   12036:	f008 ffc2 	bl	1afbe <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   1203a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1203e:	6a20      	ldr	r0, [r4, #32]
   12040:	f008 ff77 	bl	1af32 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
   12044:	e011      	b.n	1206a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
   12046:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
   1204a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1204e:	466a      	mov	r2, sp
   12050:	a901      	add	r1, sp, #4
   12052:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12054:	f008 fc63 	bl	1a91e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
   12058:	6220      	str	r0, [r4, #32]
   1205a:	b930      	cbnz	r0, 1206a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
   1205c:	f240 219f 	movw	r1, #671	; 0x29f
   12060:	e01e      	b.n	120a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
   12062:	4648      	mov	r0, r9
   12064:	f7ff fa8a 	bl	1157c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   12068:	b1c0      	cbz	r0, 1209c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
   1206a:	6a20      	ldr	r0, [r4, #32]
   1206c:	2308      	movs	r3, #8
   1206e:	7801      	ldrb	r1, [r0, #0]
   12070:	f021 0108 	bic.w	r1, r1, #8
   12074:	7001      	strb	r1, [r0, #0]
   12076:	79ea      	ldrb	r2, [r5, #7]
   12078:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
   1207c:	4311      	orrs	r1, r2
   1207e:	f021 0104 	bic.w	r1, r1, #4
   12082:	7001      	strb	r1, [r0, #0]
   12084:	7a2a      	ldrb	r2, [r5, #8]
   12086:	2304      	movs	r3, #4
   12088:	ea03 0282 	and.w	r2, r3, r2, lsl #2
   1208c:	4311      	orrs	r1, r2
   1208e:	f021 0110 	bic.w	r1, r1, #16
   12092:	7001      	strb	r1, [r0, #0]
   12094:	43c9      	mvns	r1, r1
   12096:	0789      	lsls	r1, r1, #30
   12098:	d005      	beq.n	120a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
   1209a:	e007      	b.n	120ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
   1209c:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   120a0:	2027      	movs	r0, #39	; 0x27
   120a2:	f7fe fc65 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   120a6:	78c0      	ldrb	r0, [r0, #3]
   120a8:	2802      	cmp	r0, #2
   120aa:	d00f      	beq.n	120cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
   120ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
   120ae:	f008 f9cc 	bl	1a44a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
   120b2:	b108      	cbz	r0, 120b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
   120b4:	2101      	movs	r1, #1
   120b6:	e00a      	b.n	120ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
   120b8:	6a20      	ldr	r0, [r4, #32]
   120ba:	7800      	ldrb	r0, [r0, #0]
   120bc:	43c0      	mvns	r0, r0
   120be:	0780      	lsls	r0, r0, #30
   120c0:	d004      	beq.n	120cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
   120c2:	f7ff fa19 	bl	114f8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
   120c6:	f080 0101 	eor.w	r1, r0, #1
   120ca:	e000      	b.n	120ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
   120cc:	2100      	movs	r1, #0
   120ce:	6a20      	ldr	r0, [r4, #32]
   120d0:	7802      	ldrb	r2, [r0, #0]
   120d2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   120d6:	7001      	strb	r1, [r0, #0]
   120d8:	7ca9      	ldrb	r1, [r5, #18]
   120da:	b191      	cbz	r1, 12102 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
   120dc:	7841      	ldrb	r1, [r0, #1]
   120de:	b181      	cbz	r1, 12102 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
   120e0:	4813      	ldr	r0, [pc, #76]	; (12130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
   120e2:	f006 fa59 	bl	18598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   120e6:	4811      	ldr	r0, [pc, #68]	; (1212c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
   120e8:	3828      	subs	r0, #40	; 0x28
   120ea:	7607      	strb	r7, [r0, #24]
   120ec:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
   120f0:	e9c0 1204 	strd	r1, r2, [r0, #16]
   120f4:	480e      	ldr	r0, [pc, #56]	; (12130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
   120f6:	6a21      	ldr	r1, [r4, #32]
   120f8:	f005 fe7a 	bl	17df0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
   120fc:	f005 fec4 	bl	17e88 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
   12100:	e003      	b.n	1210a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
   12102:	f006 fa49 	bl	18598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   12106:	f005 fea1 	bl	17e4c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   1210a:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
   1210e:	2101      	movs	r1, #1
   12110:	2000      	movs	r0, #0
   12112:	f006 facd 	bl	186b0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   12116:	7127      	strb	r7, [r4, #4]
   12118:	6a20      	ldr	r0, [r4, #32]
   1211a:	8801      	ldrh	r1, [r0, #0]
   1211c:	8221      	strh	r1, [r4, #16]
   1211e:	7880      	ldrb	r0, [r0, #2]
   12120:	74a0      	strb	r0, [r4, #18]
   12122:	7027      	strb	r7, [r4, #0]
   12124:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   12128:	200000d0 	.word	0x200000d0
   1212c:	20000de8 	.word	0x20000de8
   12130:	20000cb8 	.word	0x20000cb8
   12134:	00011dc9 	.word	0x00011dc9
   12138:	00011b4d 	.word	0x00011b4d
   1213c:	00011cc5 	.word	0x00011cc5
   12140:	00011f21 	.word	0x00011f21

00012144 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
   12144:	4800      	ldr	r0, [pc, #0]	; (12148 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
   12146:	4770      	bx	lr
   12148:	200017a5 	.word	0x200017a5

0001214c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
   1214c:	b570      	push	{r4, r5, r6, lr}
   1214e:	2600      	movs	r6, #0
   12150:	4635      	mov	r5, r6
   12152:	4c0f      	ldr	r4, [pc, #60]	; (12190 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
   12154:	e018      	b.n	12188 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
   12156:	1960      	adds	r0, r4, r5
   12158:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
   1215c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
   12160:	2a01      	cmp	r2, #1
   12162:	d002      	beq.n	1216a <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
   12164:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
   12168:	b160      	cbz	r0, 12184 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
   1216a:	480a      	ldr	r0, [pc, #40]	; (12194 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
   1216c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   12170:	1c73      	adds	r3, r6, #1
   12172:	5585      	strb	r5, [r0, r6]
   12174:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
   12178:	4630      	mov	r0, r6
   1217a:	b2de      	uxtb	r6, r3
   1217c:	f501 71aa 	add.w	r1, r1, #340	; 0x154
   12180:	f006 fbbe 	bl	18900 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
   12184:	1c6d      	adds	r5, r5, #1
   12186:	b2ed      	uxtb	r5, r5
   12188:	78a0      	ldrb	r0, [r4, #2]
   1218a:	42a8      	cmp	r0, r5
   1218c:	d8e3      	bhi.n	12156 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
   1218e:	bd70      	pop	{r4, r5, r6, pc}
   12190:	200015d2 	.word	0x200015d2
   12194:	20000278 	.word	0x20000278

00012198 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
   12198:	4904      	ldr	r1, [pc, #16]	; (121ac <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
   1219a:	788a      	ldrb	r2, [r1, #2]
   1219c:	4282      	cmp	r2, r0
   1219e:	d903      	bls.n	121a8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
   121a0:	4408      	add	r0, r1
   121a2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
   121a6:	4770      	bx	lr
   121a8:	2000      	movs	r0, #0
   121aa:	4770      	bx	lr
   121ac:	200015d2 	.word	0x200015d2

000121b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
   121b0:	4904      	ldr	r1, [pc, #16]	; (121c4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
   121b2:	788a      	ldrb	r2, [r1, #2]
   121b4:	4282      	cmp	r2, r0
   121b6:	d903      	bls.n	121c0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
   121b8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   121bc:	3083      	adds	r0, #131	; 0x83
   121be:	4770      	bx	lr
   121c0:	2000      	movs	r0, #0
   121c2:	4770      	bx	lr
   121c4:	200015d2 	.word	0x200015d2

000121c8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
   121c8:	4a05      	ldr	r2, [pc, #20]	; (121e0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
   121ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   121ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   121d2:	6802      	ldr	r2, [r0, #0]
   121d4:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
   121d8:	8880      	ldrh	r0, [r0, #4]
   121da:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
   121de:	4770      	bx	lr
   121e0:	200015d2 	.word	0x200015d2

000121e4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
   121e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121e8:	4607      	mov	r7, r0
   121ea:	2400      	movs	r4, #0
   121ec:	4d10      	ldr	r5, [pc, #64]	; (12230 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
   121ee:	e019      	b.n	12224 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
   121f0:	4620      	mov	r0, r4
   121f2:	f7ff ffdd 	bl	121b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   121f6:	0003      	movs	r3, r0
   121f8:	d012      	beq.n	12220 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
   121fa:	1928      	adds	r0, r5, r4
   121fc:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
   12200:	b970      	cbnz	r0, 12220 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
   12202:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   12206:	eb05 0640 	add.w	r6, r5, r0, lsl #1
   1220a:	f206 160b 	addw	r6, r6, #267	; 0x10b
   1220e:	463a      	mov	r2, r7
   12210:	4631      	mov	r1, r6
   12212:	4618      	mov	r0, r3
   12214:	f008 fb06 	bl	1a824 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   12218:	4630      	mov	r0, r6
   1221a:	4621      	mov	r1, r4
   1221c:	f7ff ffd4 	bl	121c8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
   12220:	1c64      	adds	r4, r4, #1
   12222:	b2e4      	uxtb	r4, r4
   12224:	78a8      	ldrb	r0, [r5, #2]
   12226:	42a0      	cmp	r0, r4
   12228:	d8e2      	bhi.n	121f0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
   1222a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1222e:	0000      	.short	0x0000
   12230:	200015d2 	.word	0x200015d2

00012234 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
   12234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12238:	460e      	mov	r6, r1
   1223a:	4607      	mov	r7, r0
   1223c:	4615      	mov	r5, r2
   1223e:	2106      	movs	r1, #6
   12240:	4630      	mov	r0, r6
   12242:	f008 fdbf 	bl	1adc4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   12246:	4c0d      	ldr	r4, [pc, #52]	; (1227c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
   12248:	b160      	cbz	r0, 12264 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
   1224a:	2000      	movs	r0, #0
   1224c:	e004      	b.n	12258 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
   1224e:	1821      	adds	r1, r4, r0
   12250:	1c40      	adds	r0, r0, #1
   12252:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
   12256:	b2c0      	uxtb	r0, r0
   12258:	78a1      	ldrb	r1, [r4, #2]
   1225a:	4281      	cmp	r1, r0
   1225c:	d8f7      	bhi.n	1224e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
   1225e:	2001      	movs	r0, #1
   12260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12264:	4631      	mov	r1, r6
   12266:	4638      	mov	r0, r7
   12268:	f008 fb68 	bl	1a93c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   1226c:	2808      	cmp	r0, #8
   1226e:	d003      	beq.n	12278 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
   12270:	4420      	add	r0, r4
   12272:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
   12276:	e7f2      	b.n	1225e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
   12278:	2000      	movs	r0, #0
   1227a:	e7f1      	b.n	12260 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
   1227c:	200015d2 	.word	0x200015d2

00012280 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
   12280:	4904      	ldr	r1, [pc, #16]	; (12294 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
   12282:	788a      	ldrb	r2, [r1, #2]
   12284:	4282      	cmp	r2, r0
   12286:	d903      	bls.n	12290 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
   12288:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   1228c:	1cc0      	adds	r0, r0, #3
   1228e:	4770      	bx	lr
   12290:	2000      	movs	r0, #0
   12292:	4770      	bx	lr
   12294:	200015d2 	.word	0x200015d2

00012298 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
   12298:	4908      	ldr	r1, [pc, #32]	; (122bc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
   1229a:	788a      	ldrb	r2, [r1, #2]
   1229c:	4282      	cmp	r2, r0
   1229e:	d903      	bls.n	122a8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
   122a0:	180a      	adds	r2, r1, r0
   122a2:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
   122a6:	b10a      	cbz	r2, 122ac <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
   122a8:	2000      	movs	r0, #0
   122aa:	4770      	bx	lr
   122ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   122b0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   122b4:	f200 100b 	addw	r0, r0, #267	; 0x10b
   122b8:	4770      	bx	lr
   122ba:	0000      	.short	0x0000
   122bc:	200015d2 	.word	0x200015d2

000122c0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
   122c0:	b510      	push	{r4, lr}
   122c2:	f240 12d3 	movw	r2, #467	; 0x1d3
   122c6:	2100      	movs	r1, #0
   122c8:	4808      	ldr	r0, [pc, #32]	; (122ec <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
   122ca:	f007 f9ea 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   122ce:	2208      	movs	r2, #8
   122d0:	21ff      	movs	r1, #255	; 0xff
   122d2:	4807      	ldr	r0, [pc, #28]	; (122f0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
   122d4:	f007 f9e5 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   122d8:	4805      	ldr	r0, [pc, #20]	; (122f0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
   122da:	2100      	movs	r1, #0
   122dc:	1f00      	subs	r0, r0, #4
   122de:	7001      	strb	r1, [r0, #0]
   122e0:	7041      	strb	r1, [r0, #1]
   122e2:	f44f 7161 	mov.w	r1, #900	; 0x384
   122e6:	8041      	strh	r1, [r0, #2]
   122e8:	bd10      	pop	{r4, pc}
   122ea:	0000      	.short	0x0000
   122ec:	200015d2 	.word	0x200015d2
   122f0:	20000278 	.word	0x20000278

000122f4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
   122f4:	4901      	ldr	r1, [pc, #4]	; (122fc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
   122f6:	7008      	strb	r0, [r1, #0]
   122f8:	4770      	bx	lr
   122fa:	0000      	.short	0x0000
   122fc:	20000274 	.word	0x20000274

00012300 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
   12300:	4801      	ldr	r0, [pc, #4]	; (12308 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
   12302:	7800      	ldrb	r0, [r0, #0]
   12304:	4770      	bx	lr
   12306:	0000      	.short	0x0000
   12308:	20000274 	.word	0x20000274

0001230c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
   1230c:	4b0b      	ldr	r3, [pc, #44]	; (1233c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
   1230e:	b510      	push	{r4, lr}
   12310:	789c      	ldrb	r4, [r3, #2]
   12312:	4284      	cmp	r4, r0
   12314:	d90f      	bls.n	12336 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
   12316:	4418      	add	r0, r3
   12318:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   1231c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   12320:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
   12324:	700b      	strb	r3, [r1, #0]
   12326:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
   1232a:	6011      	str	r1, [r2, #0]
   1232c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
   12330:	8090      	strh	r0, [r2, #4]
   12332:	2001      	movs	r0, #1
   12334:	bd10      	pop	{r4, pc}
   12336:	2000      	movs	r0, #0
   12338:	bd10      	pop	{r4, pc}
   1233a:	0000      	.short	0x0000
   1233c:	200015d2 	.word	0x200015d2

00012340 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
   12340:	4907      	ldr	r1, [pc, #28]	; (12360 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
   12342:	788a      	ldrb	r2, [r1, #2]
   12344:	4282      	cmp	r2, r0
   12346:	d909      	bls.n	1235c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
   12348:	4408      	add	r0, r1
   1234a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   1234e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   12352:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   12356:	f000 0001 	and.w	r0, r0, #1
   1235a:	4770      	bx	lr
   1235c:	2000      	movs	r0, #0
   1235e:	4770      	bx	lr
   12360:	200015d2 	.word	0x200015d2

00012364 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
   12364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12368:	4698      	mov	r8, r3
   1236a:	4691      	mov	r9, r2
   1236c:	460c      	mov	r4, r1
   1236e:	4605      	mov	r5, r0
   12370:	f000 f962 	bl	12638 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   12374:	4606      	mov	r6, r0
   12376:	2810      	cmp	r0, #16
   12378:	d006      	beq.n	12388 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
   1237a:	f000 f92d 	bl	125d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   1237e:	2810      	cmp	r0, #16
   12380:	d002      	beq.n	12388 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
   12382:	2012      	movs	r0, #18
   12384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12388:	4f18      	ldr	r7, [pc, #96]	; (123ec <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
   1238a:	78b8      	ldrb	r0, [r7, #2]
   1238c:	2808      	cmp	r0, #8
   1238e:	d22a      	bcs.n	123e6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
   12390:	2e10      	cmp	r6, #16
   12392:	d105      	bne.n	123a0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
   12394:	2200      	movs	r2, #0
   12396:	4621      	mov	r1, r4
   12398:	4628      	mov	r0, r5
   1239a:	f000 f931 	bl	12600 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
   1239e:	4606      	mov	r6, r0
   123a0:	78bc      	ldrb	r4, [r7, #2]
   123a2:	2210      	movs	r2, #16
   123a4:	1c60      	adds	r0, r4, #1
   123a6:	70b8      	strb	r0, [r7, #2]
   123a8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   123ac:	1ce8      	adds	r0, r5, #3
   123ae:	4649      	mov	r1, r9
   123b0:	f008 fcab 	bl	1ad0a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   123b4:	f105 0083 	add.w	r0, r5, #131	; 0x83
   123b8:	2210      	movs	r2, #16
   123ba:	4641      	mov	r1, r8
   123bc:	f008 fca5 	bl	1ad0a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   123c0:	2110      	movs	r1, #16
   123c2:	4640      	mov	r0, r8
   123c4:	f008 fcfe 	bl	1adc4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   123c8:	443c      	add	r4, r7
   123ca:	2110      	movs	r1, #16
   123cc:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
   123d0:	4648      	mov	r0, r9
   123d2:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   123d6:	f008 fcf5 	bl	1adc4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   123da:	77e0      	strb	r0, [r4, #31]
   123dc:	f804 6c29 	strb.w	r6, [r4, #-41]
   123e0:	2000      	movs	r0, #0
   123e2:	73e0      	strb	r0, [r4, #15]
   123e4:	e7ce      	b.n	12384 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
   123e6:	2007      	movs	r0, #7
   123e8:	e7cc      	b.n	12384 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
   123ea:	0000      	.short	0x0000
   123ec:	200015d2 	.word	0x200015d2

000123f0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
   123f0:	4806      	ldr	r0, [pc, #24]	; (1240c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
   123f2:	b510      	push	{r4, lr}
   123f4:	7880      	ldrb	r0, [r0, #2]
   123f6:	1e40      	subs	r0, r0, #1
   123f8:	b244      	sxtb	r4, r0
   123fa:	e004      	b.n	12406 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
   123fc:	b2e0      	uxtb	r0, r4
   123fe:	f000 f963 	bl	126c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
   12402:	1e64      	subs	r4, r4, #1
   12404:	b264      	sxtb	r4, r4
   12406:	2c00      	cmp	r4, #0
   12408:	daf8      	bge.n	123fc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
   1240a:	bd10      	pop	{r4, pc}
   1240c:	200015d2 	.word	0x200015d2

00012410 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
   12410:	4801      	ldr	r0, [pc, #4]	; (12418 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
   12412:	8840      	ldrh	r0, [r0, #2]
   12414:	4770      	bx	lr
   12416:	0000      	.short	0x0000
   12418:	20000274 	.word	0x20000274

0001241c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
   1241c:	b138      	cbz	r0, 1242e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
   1241e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
   12422:	4288      	cmp	r0, r1
   12424:	d803      	bhi.n	1242e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
   12426:	4903      	ldr	r1, [pc, #12]	; (12434 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
   12428:	8048      	strh	r0, [r1, #2]
   1242a:	2001      	movs	r0, #1
   1242c:	4770      	bx	lr
   1242e:	2000      	movs	r0, #0
   12430:	4770      	bx	lr
   12432:	0000      	.short	0x0000
   12434:	20000274 	.word	0x20000274

00012438 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
   12438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1243c:	4614      	mov	r4, r2
   1243e:	2501      	movs	r5, #1
   12440:	2200      	movs	r2, #0
   12442:	461f      	mov	r7, r3
   12444:	462e      	mov	r6, r5
   12446:	7022      	strb	r2, [r4, #0]
   12448:	f000 f8f6 	bl	12638 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   1244c:	2810      	cmp	r0, #16
   1244e:	d024      	beq.n	1249a <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
   12450:	f8df 8054 	ldr.w	r8, [pc, #84]	; 124a8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
   12454:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
   12458:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
   1245c:	f001 0101 	and.w	r1, r1, #1
   12460:	7021      	strb	r1, [r4, #0]
   12462:	f000 f8b9 	bl	125d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   12466:	4604      	mov	r4, r0
   12468:	2810      	cmp	r0, #16
   1246a:	d016      	beq.n	1249a <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
   1246c:	b107      	cbz	r7, 12470 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
   1246e:	703c      	strb	r4, [r7, #0]
   12470:	4620      	mov	r0, r4
   12472:	f7ff ff05 	bl	12280 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   12476:	b180      	cbz	r0, 1249a <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
   12478:	f898 1002 	ldrb.w	r1, [r8, #2]
   1247c:	4640      	mov	r0, r8
   1247e:	42a1      	cmp	r1, r4
   12480:	d903      	bls.n	1248a <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
   12482:	1901      	adds	r1, r0, r4
   12484:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
   12488:	e000      	b.n	1248c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
   1248a:	2600      	movs	r6, #0
   1248c:	eb08 0004 	add.w	r0, r8, r4
   12490:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
   12494:	2801      	cmp	r0, #1
   12496:	d004      	beq.n	124a2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
   12498:	2500      	movs	r5, #0
   1249a:	ea45 0006 	orr.w	r0, r5, r6
   1249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   124a2:	2501      	movs	r5, #1
   124a4:	e7f9      	b.n	1249a <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
   124a6:	0000      	.short	0x0000
   124a8:	200015d2 	.word	0x200015d2

000124ac <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
   124ac:	b570      	push	{r4, r5, r6, lr}
   124ae:	460d      	mov	r5, r1
   124b0:	4606      	mov	r6, r0
   124b2:	f000 f8c1 	bl	12638 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   124b6:	4c10      	ldr	r4, [pc, #64]	; (124f8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
   124b8:	2810      	cmp	r0, #16
   124ba:	d007      	beq.n	124cc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
   124bc:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
   124c0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
   124c4:	07c9      	lsls	r1, r1, #31
   124c6:	d001      	beq.n	124cc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
   124c8:	2001      	movs	r0, #1
   124ca:	bd70      	pop	{r4, r5, r6, pc}
   124cc:	7861      	ldrb	r1, [r4, #1]
   124ce:	2908      	cmp	r1, #8
   124d0:	d210      	bcs.n	124f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
   124d2:	2810      	cmp	r0, #16
   124d4:	d008      	beq.n	124e8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
   124d6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   124da:	2101      	movs	r1, #1
   124dc:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
   124e0:	7860      	ldrb	r0, [r4, #1]
   124e2:	1c40      	adds	r0, r0, #1
   124e4:	7060      	strb	r0, [r4, #1]
   124e6:	e7ef      	b.n	124c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
   124e8:	2201      	movs	r2, #1
   124ea:	4629      	mov	r1, r5
   124ec:	4630      	mov	r0, r6
   124ee:	f000 f887 	bl	12600 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
   124f2:	e7f5      	b.n	124e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
   124f4:	2000      	movs	r0, #0
   124f6:	bd70      	pop	{r4, r5, r6, pc}
   124f8:	200015d2 	.word	0x200015d2

000124fc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
   124fc:	b570      	push	{r4, r5, r6, lr}
   124fe:	4d0b      	ldr	r5, [pc, #44]	; (1252c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
   12500:	7828      	ldrb	r0, [r5, #0]
   12502:	1e40      	subs	r0, r0, #1
   12504:	b244      	sxtb	r4, r0
   12506:	e00a      	b.n	1251e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
   12508:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   1250c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   12510:	07c0      	lsls	r0, r0, #31
   12512:	d002      	beq.n	1251a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
   12514:	b2e0      	uxtb	r0, r4
   12516:	f000 f91f 	bl	12758 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
   1251a:	1e64      	subs	r4, r4, #1
   1251c:	b264      	sxtb	r4, r4
   1251e:	2c00      	cmp	r4, #0
   12520:	daf2      	bge.n	12508 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
   12522:	4903      	ldr	r1, [pc, #12]	; (12530 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
   12524:	2000      	movs	r0, #0
   12526:	7048      	strb	r0, [r1, #1]
   12528:	bd70      	pop	{r4, r5, r6, pc}
   1252a:	0000      	.short	0x0000
   1252c:	200015d2 	.word	0x200015d2
   12530:	20000274 	.word	0x20000274

00012534 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
   12534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12538:	2400      	movs	r4, #0
   1253a:	4625      	mov	r5, r4
   1253c:	4e18      	ldr	r6, [pc, #96]	; (125a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
   1253e:	e029      	b.n	12594 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
   12540:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
   12544:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
   12548:	07c0      	lsls	r0, r0, #31
   1254a:	d021      	beq.n	12590 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
   1254c:	4628      	mov	r0, r5
   1254e:	f000 f843 	bl	125d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   12552:	4603      	mov	r3, r0
   12554:	f7ff fe94 	bl	12280 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   12558:	4601      	mov	r1, r0
   1255a:	2000      	movs	r0, #0
   1255c:	2b10      	cmp	r3, #16
   1255e:	d009      	beq.n	12574 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
   12560:	18f2      	adds	r2, r6, r3
   12562:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
   12566:	f1bc 0f01 	cmp.w	ip, #1
   1256a:	d002      	beq.n	12572 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
   1256c:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
   12570:	b102      	cbz	r2, 12574 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
   12572:	2001      	movs	r0, #1
   12574:	1e40      	subs	r0, r0, #1
   12576:	4201      	tst	r1, r0
   12578:	d10a      	bne.n	12590 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
   1257a:	480a      	ldr	r0, [pc, #40]	; (125a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
   1257c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
   12580:	5503      	strb	r3, [r0, r4]
   12582:	4620      	mov	r0, r4
   12584:	1c64      	adds	r4, r4, #1
   12586:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
   1258a:	b2e4      	uxtb	r4, r4
   1258c:	f006 f9b8 	bl	18900 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
   12590:	1c6d      	adds	r5, r5, #1
   12592:	b2ed      	uxtb	r5, r5
   12594:	7830      	ldrb	r0, [r6, #0]
   12596:	42a8      	cmp	r0, r5
   12598:	d8d2      	bhi.n	12540 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
   1259a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1259e:	0000      	.short	0x0000
   125a0:	200015d2 	.word	0x200015d2
   125a4:	20000278 	.word	0x20000278
   125a8:	4602      	mov	r2, r0
   125aa:	4809      	ldr	r0, [pc, #36]	; (125d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
   125ac:	b510      	push	{r4, lr}
   125ae:	7800      	ldrb	r0, [r0, #0]
   125b0:	460b      	mov	r3, r1
   125b2:	b158      	cbz	r0, 125cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
   125b4:	4807      	ldr	r0, [pc, #28]	; (125d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
   125b6:	7881      	ldrb	r1, [r0, #2]
   125b8:	b141      	cbz	r1, 125cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
   125ba:	b10b      	cbz	r3, 125c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
   125bc:	1cc0      	adds	r0, r0, #3
   125be:	e001      	b.n	125c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
   125c0:	4804      	ldr	r0, [pc, #16]	; (125d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
   125c2:	3083      	adds	r0, #131	; 0x83
   125c4:	f005 fb36 	bl	17c34 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
   125c8:	2001      	movs	r0, #1
   125ca:	bd10      	pop	{r4, pc}
   125cc:	2000      	movs	r0, #0
   125ce:	bd10      	pop	{r4, pc}
   125d0:	20000274 	.word	0x20000274
   125d4:	200015d2 	.word	0x200015d2
   125d8:	4908      	ldr	r1, [pc, #32]	; (125fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
   125da:	b510      	push	{r4, lr}
   125dc:	4603      	mov	r3, r0
   125de:	2000      	movs	r0, #0
   125e0:	788a      	ldrb	r2, [r1, #2]
   125e2:	e006      	b.n	125f2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
   125e4:	180c      	adds	r4, r1, r0
   125e6:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
   125ea:	429c      	cmp	r4, r3
   125ec:	d004      	beq.n	125f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
   125ee:	1c40      	adds	r0, r0, #1
   125f0:	b2c0      	uxtb	r0, r0
   125f2:	4282      	cmp	r2, r0
   125f4:	d8f6      	bhi.n	125e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
   125f6:	2010      	movs	r0, #16
   125f8:	bd10      	pop	{r4, pc}
   125fa:	0000      	.short	0x0000
   125fc:	200015d2 	.word	0x200015d2
   12600:	b570      	push	{r4, r5, r6, lr}
   12602:	4b0c      	ldr	r3, [pc, #48]	; (12634 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
   12604:	4604      	mov	r4, r0
   12606:	7818      	ldrb	r0, [r3, #0]
   12608:	1c45      	adds	r5, r0, #1
   1260a:	701d      	strb	r5, [r3, #0]
   1260c:	2810      	cmp	r0, #16
   1260e:	d303      	bcc.n	12618 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
   12610:	2146      	movs	r1, #70	; 0x46
   12612:	2028      	movs	r0, #40	; 0x28
   12614:	f7fe f9ac 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12618:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1261c:	680d      	ldr	r5, [r1, #0]
   1261e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
   12622:	8889      	ldrh	r1, [r1, #4]
   12624:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
   12628:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
   1262c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
   12630:	bd70      	pop	{r4, r5, r6, pc}
   12632:	0000      	.short	0x0000
   12634:	200015d2 	.word	0x200015d2
   12638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1263c:	460f      	mov	r7, r1
   1263e:	4606      	mov	r6, r0
   12640:	2400      	movs	r4, #0
   12642:	4d0d      	ldr	r5, [pc, #52]	; (12678 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
   12644:	e00f      	b.n	12666 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
   12646:	bf00      	nop
   12648:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   1264c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
   12650:	42b1      	cmp	r1, r6
   12652:	d106      	bne.n	12662 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
   12654:	2206      	movs	r2, #6
   12656:	4639      	mov	r1, r7
   12658:	f500 70aa 	add.w	r0, r0, #340	; 0x154
   1265c:	f006 ff95 	bl	1958a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   12660:	b138      	cbz	r0, 12672 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
   12662:	1c64      	adds	r4, r4, #1
   12664:	b2e4      	uxtb	r4, r4
   12666:	7828      	ldrb	r0, [r5, #0]
   12668:	42a0      	cmp	r0, r4
   1266a:	d8ed      	bhi.n	12648 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
   1266c:	2010      	movs	r0, #16
   1266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12672:	4620      	mov	r0, r4
   12674:	e7fb      	b.n	1266e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
   12676:	0000      	.short	0x0000
   12678:	200015d2 	.word	0x200015d2
   1267c:	b570      	push	{r4, r5, r6, lr}
   1267e:	4605      	mov	r5, r0
   12680:	f7ff ffaa 	bl	125d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   12684:	2810      	cmp	r0, #16
   12686:	d11c      	bne.n	126c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   12688:	4c0e      	ldr	r4, [pc, #56]	; (126c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
   1268a:	7820      	ldrb	r0, [r4, #0]
   1268c:	1e40      	subs	r0, r0, #1
   1268e:	b2c0      	uxtb	r0, r0
   12690:	7020      	strb	r0, [r4, #0]
   12692:	42a8      	cmp	r0, r5
   12694:	d015      	beq.n	126c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   12696:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
   1269a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1269e:	f502 7080 	add.w	r0, r2, #256	; 0x100
   126a2:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
   126a6:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
   126aa:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
   126ae:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
   126b2:	7820      	ldrb	r0, [r4, #0]
   126b4:	f7ff ff90 	bl	125d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   126b8:	2810      	cmp	r0, #16
   126ba:	d002      	beq.n	126c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   126bc:	4420      	add	r0, r4
   126be:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   126c2:	bd70      	pop	{r4, r5, r6, pc}
   126c4:	200015d2 	.word	0x200015d2
   126c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126cc:	4c21      	ldr	r4, [pc, #132]	; (12754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
   126ce:	4606      	mov	r6, r0
   126d0:	19a7      	adds	r7, r4, r6
   126d2:	78a0      	ldrb	r0, [r4, #2]
   126d4:	1e40      	subs	r0, r0, #1
   126d6:	b2c5      	uxtb	r5, r0
   126d8:	70a5      	strb	r5, [r4, #2]
   126da:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
   126de:	42ae      	cmp	r6, r5
   126e0:	d02a      	beq.n	12738 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
   126e2:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
   126e6:	eb04 1906 	add.w	r9, r4, r6, lsl #4
   126ea:	f10a 0103 	add.w	r1, sl, #3
   126ee:	f109 0003 	add.w	r0, r9, #3
   126f2:	2210      	movs	r2, #16
   126f4:	f006 ff5b 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   126f8:	f10a 0183 	add.w	r1, sl, #131	; 0x83
   126fc:	f109 0083 	add.w	r0, r9, #131	; 0x83
   12700:	2210      	movs	r2, #16
   12702:	f006 ff54 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12706:	1960      	adds	r0, r4, r5
   12708:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1270c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
   12710:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
   12714:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   12718:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   1271c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   12720:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
   12724:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
   12728:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
   1272c:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
   12730:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
   12734:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
   12738:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
   1273c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   12740:	07c0      	lsls	r0, r0, #31
   12742:	d104      	bne.n	1274e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
   12744:	4640      	mov	r0, r8
   12746:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1274a:	f7ff bf97 	b.w	1267c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
   1274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12752:	0000      	.short	0x0000
   12754:	200015d2 	.word	0x200015d2
   12758:	4905      	ldr	r1, [pc, #20]	; (12770 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
   1275a:	784a      	ldrb	r2, [r1, #1]
   1275c:	1e52      	subs	r2, r2, #1
   1275e:	704a      	strb	r2, [r1, #1]
   12760:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   12764:	2200      	movs	r2, #0
   12766:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
   1276a:	f7ff bf87 	b.w	1267c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
   1276e:	0000      	.short	0x0000
   12770:	200015d2 	.word	0x200015d2

00012774 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
   12774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12778:	4604      	mov	r4, r0
   1277a:	f100 0778 	add.w	r7, r0, #120	; 0x78
   1277e:	b171      	cbz	r1, 1279e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
   12780:	f104 068e 	add.w	r6, r4, #142	; 0x8e
   12784:	1e75      	subs	r5, r6, #1
   12786:	2901      	cmp	r1, #1
   12788:	d016      	beq.n	127b8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
   1278a:	2902      	cmp	r1, #2
   1278c:	d025      	beq.n	127da <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
   1278e:	2903      	cmp	r1, #3
   12790:	d110      	bne.n	127b4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
   12792:	4631      	mov	r1, r6
   12794:	4628      	mov	r0, r5
   12796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1279a:	f008 bb65 	b.w	1ae68 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   1279e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   127a2:	2100      	movs	r1, #0
   127a4:	f006 ff7d 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   127a8:	4638      	mov	r0, r7
   127aa:	f008 fb1a 	bl	1ade2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
   127ae:	2020      	movs	r0, #32
   127b0:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
   127b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127b8:	68e1      	ldr	r1, [r4, #12]
   127ba:	480d      	ldr	r0, [pc, #52]	; (127f0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
   127bc:	460a      	mov	r2, r1
   127be:	4408      	add	r0, r1
   127c0:	fbb0 f0f1 	udiv	r0, r0, r1
   127c4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
   127c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   127cc:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
   127d0:	8ae3      	ldrh	r3, [r4, #22]
   127d2:	4638      	mov	r0, r7
   127d4:	f000 f80e 	bl	127f4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
   127d8:	e7db      	b.n	12792 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
   127da:	68c1      	ldr	r1, [r0, #12]
   127dc:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
   127e0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   127e4:	4638      	mov	r0, r7
   127e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   127ea:	f000 b803 	b.w	127f4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
   127ee:	0000      	.short	0x0000
   127f0:	01c9c37f 	.word	0x01c9c37f
   127f4:	b530      	push	{r4, r5, lr}
   127f6:	2400      	movs	r4, #0
   127f8:	86c4      	strh	r4, [r0, #54]	; 0x36
   127fa:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
   127fc:	4d13      	ldr	r5, [pc, #76]	; (1284c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
   127fe:	434c      	muls	r4, r1
   12800:	fbb4 f4f2 	udiv	r4, r4, r2
   12804:	8744      	strh	r4, [r0, #58]	; 0x3a
   12806:	f242 7410 	movw	r4, #10000	; 0x2710
   1280a:	4363      	muls	r3, r4
   1280c:	fbb3 f3f2 	udiv	r3, r3, r2
   12810:	1c5b      	adds	r3, r3, #1
   12812:	b29b      	uxth	r3, r3
   12814:	fb03 f402 	mul.w	r4, r3, r2
   12818:	8703      	strh	r3, [r0, #56]	; 0x38
   1281a:	42ac      	cmp	r4, r5
   1281c:	d901      	bls.n	12822 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
   1281e:	1e5b      	subs	r3, r3, #1
   12820:	8703      	strh	r3, [r0, #56]	; 0x38
   12822:	4b0b      	ldr	r3, [pc, #44]	; (12850 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
   12824:	f240 2471 	movw	r4, #625	; 0x271
   12828:	fbb3 f3f2 	udiv	r3, r3, r2
   1282c:	1c5b      	adds	r3, r3, #1
   1282e:	87c3      	strh	r3, [r0, #62]	; 0x3e
   12830:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   12832:	4363      	muls	r3, r4
   12834:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   12838:	1e5b      	subs	r3, r3, #1
   1283a:	fbb3 f3f2 	udiv	r3, r3, r2
   1283e:	62c3      	str	r3, [r0, #44]	; 0x2c
   12840:	6a83      	ldr	r3, [r0, #40]	; 0x28
   12842:	434b      	muls	r3, r1
   12844:	fbb3 f1f2 	udiv	r1, r3, r2
   12848:	6281      	str	r1, [r0, #40]	; 0x28
   1284a:	bd30      	pop	{r4, r5, pc}
   1284c:	01e84800 	.word	0x01e84800
   12850:	02625a00 	.word	0x02625a00

00012854 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
   12854:	4909      	ldr	r1, [pc, #36]	; (1287c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
   12856:	b508      	push	{r3, lr}
   12858:	7809      	ldrb	r1, [r1, #0]
   1285a:	f88d 1000 	strb.w	r1, [sp]
   1285e:	9900      	ldr	r1, [sp, #0]
   12860:	9100      	str	r1, [sp, #0]
   12862:	f89d 1000 	ldrb.w	r1, [sp]
   12866:	b109      	cbz	r1, 1286c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
   12868:	2000      	movs	r0, #0
   1286a:	bd08      	pop	{r3, pc}
   1286c:	4903      	ldr	r1, [pc, #12]	; (1287c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
   1286e:	f8d1 2001 	ldr.w	r2, [r1, #1]
   12872:	6002      	str	r2, [r0, #0]
   12874:	7949      	ldrb	r1, [r1, #5]
   12876:	7101      	strb	r1, [r0, #4]
   12878:	2001      	movs	r0, #1
   1287a:	bd08      	pop	{r3, pc}
   1287c:	2000029b 	.word	0x2000029b

00012880 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
   12880:	4905      	ldr	r1, [pc, #20]	; (12898 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
   12882:	2201      	movs	r2, #1
   12884:	700a      	strb	r2, [r1, #0]
   12886:	460a      	mov	r2, r1
   12888:	6803      	ldr	r3, [r0, #0]
   1288a:	f8c2 3001 	str.w	r3, [r2, #1]
   1288e:	7900      	ldrb	r0, [r0, #4]
   12890:	7150      	strb	r0, [r2, #5]
   12892:	2000      	movs	r0, #0
   12894:	7008      	strb	r0, [r1, #0]
   12896:	4770      	bx	lr
   12898:	2000029b 	.word	0x2000029b

0001289c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
   1289c:	b570      	push	{r4, r5, r6, lr}
   1289e:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
   128a2:	b28b      	uxth	r3, r1
   128a4:	7ac5      	ldrb	r5, [r0, #11]
   128a6:	ea83 0102 	eor.w	r1, r3, r2
   128aa:	2200      	movs	r2, #0
   128ac:	b2cc      	uxtb	r4, r1
   128ae:	0a09      	lsrs	r1, r1, #8
   128b0:	fa94 f4a4 	rbit	r4, r4
   128b4:	fa91 f1a1 	rbit	r1, r1
   128b8:	0e24      	lsrs	r4, r4, #24
   128ba:	0e09      	lsrs	r1, r1, #24
   128bc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   128c0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
   128c4:	1c52      	adds	r2, r2, #1
   128c6:	4419      	add	r1, r3
   128c8:	b2d2      	uxtb	r2, r2
   128ca:	b289      	uxth	r1, r1
   128cc:	2a03      	cmp	r2, #3
   128ce:	d3ed      	bcc.n	128ac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
   128d0:	4059      	eors	r1, r3
   128d2:	2225      	movs	r2, #37	; 0x25
   128d4:	fbb1 f3f2 	udiv	r3, r1, r2
   128d8:	fb02 1213 	mls	r2, r2, r3, r1
   128dc:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
   128e0:	f002 0607 	and.w	r6, r2, #7
   128e4:	785b      	ldrb	r3, [r3, #1]
   128e6:	2401      	movs	r4, #1
   128e8:	fa04 f606 	lsl.w	r6, r4, r6
   128ec:	4233      	tst	r3, r6
   128ee:	d001      	beq.n	128f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
   128f0:	4610      	mov	r0, r2
   128f2:	bd70      	pop	{r4, r5, r6, pc}
   128f4:	434d      	muls	r5, r1
   128f6:	0c29      	lsrs	r1, r5, #16
   128f8:	1c49      	adds	r1, r1, #1
   128fa:	b2c9      	uxtb	r1, r1
   128fc:	2200      	movs	r2, #0
   128fe:	1885      	adds	r5, r0, r2
   12900:	79ab      	ldrb	r3, [r5, #6]
   12902:	428b      	cmp	r3, r1
   12904:	d312      	bcc.n	1292c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
   12906:	f895 5001 	ldrb.w	r5, [r5, #1]
   1290a:	2300      	movs	r3, #0
   1290c:	fa04 f603 	lsl.w	r6, r4, r3
   12910:	4235      	tst	r5, r6
   12912:	d001      	beq.n	12918 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
   12914:	1e49      	subs	r1, r1, #1
   12916:	b2c9      	uxtb	r1, r1
   12918:	b121      	cbz	r1, 12924 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
   1291a:	1c5b      	adds	r3, r3, #1
   1291c:	b2db      	uxtb	r3, r3
   1291e:	2b08      	cmp	r3, #8
   12920:	d3f4      	bcc.n	1290c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
   12922:	e005      	b.n	12930 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
   12924:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   12928:	b2c0      	uxtb	r0, r0
   1292a:	bd70      	pop	{r4, r5, r6, pc}
   1292c:	1ac9      	subs	r1, r1, r3
   1292e:	b2c9      	uxtb	r1, r1
   12930:	1c52      	adds	r2, r2, #1
   12932:	b2d2      	uxtb	r2, r2
   12934:	2a05      	cmp	r2, #5
   12936:	d3e2      	bcc.n	128fe <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
   12938:	f240 110d 	movw	r1, #269	; 0x10d
   1293c:	2046      	movs	r0, #70	; 0x46
   1293e:	f7fe f817 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12942:	0000      	movs	r0, r0
   12944:	b570      	push	{r4, r5, r6, lr}
   12946:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
   1294a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   1294e:	2401      	movs	r4, #1
   12950:	fb03 2101 	mla	r1, r3, r1, r2
   12954:	2225      	movs	r2, #37	; 0x25
   12956:	fbb1 f3f2 	udiv	r3, r1, r2
   1295a:	fb02 1113 	mls	r1, r2, r3, r1
   1295e:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
   12962:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
   12966:	f001 0307 	and.w	r3, r1, #7
   1296a:	7d92      	ldrb	r2, [r2, #22]
   1296c:	fa04 f303 	lsl.w	r3, r4, r3
   12970:	421a      	tst	r2, r3
   12972:	d003      	beq.n	1297c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
   12974:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
   12978:	2000      	movs	r0, #0
   1297a:	bd70      	pop	{r4, r5, r6, pc}
   1297c:	f890 2020 	ldrb.w	r2, [r0, #32]
   12980:	fbb1 f3f2 	udiv	r3, r1, r2
   12984:	fb02 1113 	mls	r1, r2, r3, r1
   12988:	1c49      	adds	r1, r1, #1
   1298a:	b2c9      	uxtb	r1, r1
   1298c:	2300      	movs	r3, #0
   1298e:	18c5      	adds	r5, r0, r3
   12990:	7eea      	ldrb	r2, [r5, #27]
   12992:	428a      	cmp	r2, r1
   12994:	d311      	bcc.n	129ba <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
   12996:	f895 5016 	ldrb.w	r5, [r5, #22]
   1299a:	2200      	movs	r2, #0
   1299c:	fa04 f602 	lsl.w	r6, r4, r2
   129a0:	4235      	tst	r5, r6
   129a2:	d001      	beq.n	129a8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
   129a4:	1e49      	subs	r1, r1, #1
   129a6:	b2c9      	uxtb	r1, r1
   129a8:	b121      	cbz	r1, 129b4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
   129aa:	1c52      	adds	r2, r2, #1
   129ac:	b2d2      	uxtb	r2, r2
   129ae:	2a08      	cmp	r2, #8
   129b0:	d3f4      	bcc.n	1299c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
   129b2:	e004      	b.n	129be <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
   129b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   129b8:	e7dc      	b.n	12974 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
   129ba:	1a89      	subs	r1, r1, r2
   129bc:	b2c9      	uxtb	r1, r1
   129be:	1c5b      	adds	r3, r3, #1
   129c0:	b2db      	uxtb	r3, r3
   129c2:	2b05      	cmp	r3, #5
   129c4:	d3e3      	bcc.n	1298e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
   129c6:	201f      	movs	r0, #31
   129c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000129cc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
   129cc:	7841      	ldrb	r1, [r0, #1]
   129ce:	b141      	cbz	r1, 129e2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
   129d0:	78c0      	ldrb	r0, [r0, #3]
   129d2:	2819      	cmp	r0, #25
   129d4:	d203      	bcs.n	129de <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
   129d6:	4a04      	ldr	r2, [pc, #16]	; (129e8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
   129d8:	5c10      	ldrb	r0, [r2, r0]
   129da:	4288      	cmp	r0, r1
   129dc:	d101      	bne.n	129e2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
   129de:	2001      	movs	r0, #1
   129e0:	4770      	bx	lr
   129e2:	2000      	movs	r0, #0
   129e4:	4770      	bx	lr
   129e6:	0000      	.short	0x0000
   129e8:	0001cb92 	.word	0x0001cb92

000129ec <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
   129ec:	b510      	push	{r4, lr}
   129ee:	2201      	movs	r2, #1
   129f0:	70c1      	strb	r1, [r0, #3]
   129f2:	2919      	cmp	r1, #25
   129f4:	d202      	bcs.n	129fc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
   129f6:	4a06      	ldr	r2, [pc, #24]	; (12a10 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
   129f8:	5c52      	ldrb	r2, [r2, r1]
   129fa:	e006      	b.n	12a0a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
   129fc:	29ff      	cmp	r1, #255	; 0xff
   129fe:	d004      	beq.n	12a0a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
   12a00:	f240 31d5 	movw	r1, #981	; 0x3d5
   12a04:	202a      	movs	r0, #42	; 0x2a
   12a06:	f7fd ffb3 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12a0a:	7042      	strb	r2, [r0, #1]
   12a0c:	bd10      	pop	{r4, pc}
   12a0e:	0000      	.short	0x0000
   12a10:	0001cb92 	.word	0x0001cb92

00012a14 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
   12a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a18:	4c12      	ldr	r4, [pc, #72]	; (12a64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
   12a1a:	4607      	mov	r7, r0
   12a1c:	460e      	mov	r6, r1
   12a1e:	7da0      	ldrb	r0, [r4, #22]
   12a20:	b110      	cbz	r0, 12a28 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
   12a22:	8b20      	ldrh	r0, [r4, #24]
   12a24:	2800      	cmp	r0, #0
   12a26:	d012      	beq.n	12a4e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
   12a28:	480e      	ldr	r0, [pc, #56]	; (12a64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
   12a2a:	3014      	adds	r0, #20
   12a2c:	4680      	mov	r8, r0
   12a2e:	f008 fb4c 	bl	1b0ca <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
   12a32:	b9a8      	cbnz	r0, 12a60 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
   12a34:	8aa5      	ldrh	r5, [r4, #20]
   12a36:	8aa0      	ldrh	r0, [r4, #20]
   12a38:	4632      	mov	r2, r6
   12a3a:	4639      	mov	r1, r7
   12a3c:	f008 fb7d 	bl	1b13a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
   12a40:	b138      	cbz	r0, 12a52 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
   12a42:	7da0      	ldrb	r0, [r4, #22]
   12a44:	b110      	cbz	r0, 12a4c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
   12a46:	8b20      	ldrh	r0, [r4, #24]
   12a48:	1e40      	subs	r0, r0, #1
   12a4a:	8320      	strh	r0, [r4, #24]
   12a4c:	2001      	movs	r0, #1
   12a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a52:	4640      	mov	r0, r8
   12a54:	f008 fb39 	bl	1b0ca <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
   12a58:	b910      	cbnz	r0, 12a60 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
   12a5a:	8aa0      	ldrh	r0, [r4, #20]
   12a5c:	42a8      	cmp	r0, r5
   12a5e:	d1ea      	bne.n	12a36 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
   12a60:	2000      	movs	r0, #0
   12a62:	e7f4      	b.n	12a4e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
   12a64:	20001434 	.word	0x20001434
   12a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12a6c:	468a      	mov	sl, r1
   12a6e:	4699      	mov	r9, r3
   12a70:	4615      	mov	r5, r2
   12a72:	4604      	mov	r4, r0
   12a74:	a901      	add	r1, sp, #4
   12a76:	f007 ffc2 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12a7a:	bbd8      	cbnz	r0, 12af4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
   12a7c:	9f02      	ldr	r7, [sp, #8]
   12a7e:	2001      	movs	r0, #1
   12a80:	3778      	adds	r7, #120	; 0x78
   12a82:	b18d      	cbz	r5, 12aa8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x94>
   12a84:	4620      	mov	r0, r4
   12a86:	f7fe fb87 	bl	11198 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   12a8a:	0004      	movs	r4, r0
   12a8c:	d00e      	beq.n	12aac <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x98>
   12a8e:	4629      	mov	r1, r5
   12a90:	f007 fcad 	bl	1a3ee <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
   12a94:	0006      	movs	r6, r0
   12a96:	d003      	beq.n	12aa0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8c>
   12a98:	4819      	ldr	r0, [pc, #100]	; (12b00 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xec>)
   12a9a:	8840      	ldrh	r0, [r0, #2]
   12a9c:	42a8      	cmp	r0, r5
   12a9e:	d207      	bcs.n	12ab0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
   12aa0:	2000      	movs	r0, #0
   12aa2:	b004      	add	sp, #16
   12aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12aa8:	7538      	strb	r0, [r7, #20]
   12aaa:	e023      	b.n	12af4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
   12aac:	216e      	movs	r1, #110	; 0x6e
   12aae:	e024      	b.n	12afa <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe6>
   12ab0:	4620      	mov	r0, r4
   12ab2:	4631      	mov	r1, r6
   12ab4:	aa03      	add	r2, sp, #12
   12ab6:	f007 fc93 	bl	1a3e0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   12aba:	9803      	ldr	r0, [sp, #12]
   12abc:	f04f 0800 	mov.w	r8, #0
   12ac0:	f8a0 8000 	strh.w	r8, [r0]
   12ac4:	f880 8002 	strb.w	r8, [r0, #2]
   12ac8:	7d39      	ldrb	r1, [r7, #20]
   12aca:	b109      	cbz	r1, 12ad0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
   12acc:	f04f 0a02 	mov.w	sl, #2
   12ad0:	4651      	mov	r1, sl
   12ad2:	f008 fa74 	bl	1afbe <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   12ad6:	4631      	mov	r1, r6
   12ad8:	2603      	movs	r6, #3
   12ada:	4620      	mov	r0, r4
   12adc:	464a      	mov	r2, r9
   12ade:	462b      	mov	r3, r5
   12ae0:	9600      	str	r6, [sp, #0]
   12ae2:	f007 fb3a 	bl	1a15a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
   12ae6:	4620      	mov	r0, r4
   12ae8:	4629      	mov	r1, r5
   12aea:	f007 fc0f 	bl	1a30c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
   12aee:	b118      	cbz	r0, 12af8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
   12af0:	f887 8014 	strb.w	r8, [r7, #20]
   12af4:	2001      	movs	r0, #1
   12af6:	e7d4      	b.n	12aa2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
   12af8:	2184      	movs	r1, #132	; 0x84
   12afa:	202b      	movs	r0, #43	; 0x2b
   12afc:	f7fd ff38 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12b00:	20001434 	.word	0x20001434

00012b04 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
   12b04:	4901      	ldr	r1, [pc, #4]	; (12b0c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
   12b06:	2001      	movs	r0, #1
   12b08:	7008      	strb	r0, [r1, #0]
   12b0a:	4770      	bx	lr
   12b0c:	20000281 	.word	0x20000281

00012b10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
   12b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b14:	0006      	movs	r6, r0
   12b16:	d00a      	beq.n	12b2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
   12b18:	4926      	ldr	r1, [pc, #152]	; (12bb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
   12b1a:	2201      	movs	r2, #1
   12b1c:	7808      	ldrb	r0, [r1, #0]
   12b1e:	b148      	cbz	r0, 12b34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
   12b20:	2000      	movs	r0, #0
   12b22:	7070      	strb	r0, [r6, #1]
   12b24:	2303      	movs	r3, #3
   12b26:	7033      	strb	r3, [r6, #0]
   12b28:	7132      	strb	r2, [r6, #4]
   12b2a:	7008      	strb	r0, [r1, #0]
   12b2c:	e03c      	b.n	12ba8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
   12b2e:	f240 21da 	movw	r1, #730	; 0x2da
   12b32:	e009      	b.n	12b48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
   12b34:	4c1f      	ldr	r4, [pc, #124]	; (12bb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
   12b36:	1ce4      	adds	r4, r4, #3
   12b38:	7820      	ldrb	r0, [r4, #0]
   12b3a:	b940      	cbnz	r0, 12b4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
   12b3c:	1ca0      	adds	r0, r4, #2
   12b3e:	f008 fb45 	bl	1b1cc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
   12b42:	b120      	cbz	r0, 12b4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
   12b44:	f240 21e9 	movw	r1, #745	; 0x2e9
   12b48:	2010      	movs	r0, #16
   12b4a:	f7fd ff11 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12b4e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
   12b52:	2000      	movs	r0, #0
   12b54:	f7fe f8f0 	bl	10d38 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   12b58:	4f17      	ldr	r7, [pc, #92]	; (12bb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
   12b5a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 12bbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
   12b5e:	4605      	mov	r5, r0
   12b60:	6838      	ldr	r0, [r7, #0]
   12b62:	b130      	cbz	r0, 12b72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
   12b64:	8860      	ldrh	r0, [r4, #2]
   12b66:	42a8      	cmp	r0, r5
   12b68:	d103      	bne.n	12b72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
   12b6a:	4630      	mov	r0, r6
   12b6c:	f000 f9d2 	bl	12f14 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
   12b70:	e006      	b.n	12b80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
   12b72:	f8d9 0000 	ldr.w	r0, [r9]
   12b76:	b120      	cbz	r0, 12b82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
   12b78:	8860      	ldrh	r0, [r4, #2]
   12b7a:	4631      	mov	r1, r6
   12b7c:	f000 f920 	bl	12dc0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
   12b80:	b990      	cbnz	r0, 12ba8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
   12b82:	1ca0      	adds	r0, r4, #2
   12b84:	f008 fb22 	bl	1b1cc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
   12b88:	b910      	cbnz	r0, 12b90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
   12b8a:	8861      	ldrh	r1, [r4, #2]
   12b8c:	4541      	cmp	r1, r8
   12b8e:	d1e7      	bne.n	12b60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
   12b90:	480b      	ldr	r0, [pc, #44]	; (12bc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
   12b92:	6801      	ldr	r1, [r0, #0]
   12b94:	b111      	cbz	r1, 12b9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
   12b96:	4630      	mov	r0, r6
   12b98:	4788      	blx	r1
   12b9a:	b928      	cbnz	r0, 12ba8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
   12b9c:	4809      	ldr	r0, [pc, #36]	; (12bc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
   12b9e:	6801      	ldr	r1, [r0, #0]
   12ba0:	b129      	cbz	r1, 12bae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
   12ba2:	4630      	mov	r0, r6
   12ba4:	4788      	blx	r1
   12ba6:	b110      	cbz	r0, 12bae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
   12ba8:	2001      	movs	r0, #1
   12baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12bae:	2000      	movs	r0, #0
   12bb0:	e7fb      	b.n	12baa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
   12bb2:	0000      	.short	0x0000
   12bb4:	20000281 	.word	0x20000281
   12bb8:	200000f8 	.word	0x200000f8
   12bbc:	200000f4 	.word	0x200000f4
   12bc0:	200000fc 	.word	0x200000fc
   12bc4:	200000f0 	.word	0x200000f0

00012bc8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
   12bc8:	4901      	ldr	r1, [pc, #4]	; (12bd0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
   12bca:	7008      	strb	r0, [r1, #0]
   12bcc:	f000 b996 	b.w	12efc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
   12bd0:	20000280 	.word	0x20000280

00012bd4 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>:
   12bd4:	4902      	ldr	r1, [pc, #8]	; (12be0 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA+0xc>)
   12bd6:	2001      	movs	r0, #1
   12bd8:	7048      	strb	r0, [r1, #1]
   12bda:	f000 b809 	b.w	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   12bde:	0000      	.short	0x0000
   12be0:	20000281 	.word	0x20000281

00012be4 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>:
   12be4:	4801      	ldr	r0, [pc, #4]	; (12bec <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x8>)
   12be6:	7840      	ldrb	r0, [r0, #1]
   12be8:	4770      	bx	lr
   12bea:	0000      	.short	0x0000
   12bec:	20000281 	.word	0x20000281

00012bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
   12bf0:	4801      	ldr	r0, [pc, #4]	; (12bf8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
   12bf2:	7800      	ldrb	r0, [r0, #0]
   12bf4:	f7fd bcac 	b.w	10550 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   12bf8:	20000280 	.word	0x20000280

00012bfc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
   12bfc:	4904      	ldr	r1, [pc, #16]	; (12c10 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14>)
   12bfe:	4803      	ldr	r0, [pc, #12]	; (12c0c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x10>)
   12c00:	6008      	str	r0, [r1, #0]
   12c02:	4905      	ldr	r1, [pc, #20]	; (12c18 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c>)
   12c04:	4803      	ldr	r0, [pc, #12]	; (12c14 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x18>)
   12c06:	6008      	str	r0, [r1, #0]
   12c08:	4770      	bx	lr
   12c0a:	0000      	.short	0x0000
   12c0c:	0001548d 	.word	0x0001548d
   12c10:	200000f4 	.word	0x200000f4
   12c14:	00011699 	.word	0x00011699
   12c18:	200000fc 	.word	0x200000fc

00012c1c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
   12c1c:	4902      	ldr	r1, [pc, #8]	; (12c28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
   12c1e:	4801      	ldr	r0, [pc, #4]	; (12c24 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
   12c20:	6008      	str	r0, [r1, #0]
   12c22:	4770      	bx	lr
   12c24:	00013181 	.word	0x00013181
   12c28:	200000f8 	.word	0x200000f8
   12c2c:	b570      	push	{r4, r5, r6, lr}
   12c2e:	4604      	mov	r4, r0
   12c30:	7800      	ldrb	r0, [r0, #0]
   12c32:	2805      	cmp	r0, #5
   12c34:	d001      	beq.n	12c3a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
   12c36:	216d      	movs	r1, #109	; 0x6d
   12c38:	e056      	b.n	12ce8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
   12c3a:	7ba0      	ldrb	r0, [r4, #14]
   12c3c:	06c0      	lsls	r0, r0, #27
   12c3e:	d401      	bmi.n	12c44 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
   12c40:	216e      	movs	r1, #110	; 0x6e
   12c42:	e051      	b.n	12ce8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
   12c44:	221c      	movs	r2, #28
   12c46:	1d21      	adds	r1, r4, #4
   12c48:	482d      	ldr	r0, [pc, #180]	; (12d00 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
   12c4a:	f006 fcb0 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12c4e:	482c      	ldr	r0, [pc, #176]	; (12d00 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
   12c50:	7b22      	ldrb	r2, [r4, #12]
   12c52:	f104 0120 	add.w	r1, r4, #32
   12c56:	301c      	adds	r0, #28
   12c58:	f006 fca9 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12c5c:	4828      	ldr	r0, [pc, #160]	; (12d00 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
   12c5e:	f04f 0201 	mov.w	r2, #1
   12c62:	7a81      	ldrb	r1, [r0, #10]
   12c64:	0749      	lsls	r1, r1, #29
   12c66:	d502      	bpl.n	12c6e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
   12c68:	7cc1      	ldrb	r1, [r0, #19]
   12c6a:	29fe      	cmp	r1, #254	; 0xfe
   12c6c:	d00c      	beq.n	12c88 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
   12c6e:	2304      	movs	r3, #4
   12c70:	7023      	strb	r3, [r4, #0]
   12c72:	6801      	ldr	r1, [r0, #0]
   12c74:	6061      	str	r1, [r4, #4]
   12c76:	6841      	ldr	r1, [r0, #4]
   12c78:	60a1      	str	r1, [r4, #8]
   12c7a:	8901      	ldrh	r1, [r0, #8]
   12c7c:	81a1      	strh	r1, [r4, #12]
   12c7e:	7a81      	ldrb	r1, [r0, #10]
   12c80:	070d      	lsls	r5, r1, #28
   12c82:	d519      	bpl.n	12cb8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
   12c84:	73a3      	strb	r3, [r4, #14]
   12c86:	e02b      	b.n	12ce0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
   12c88:	2113      	movs	r1, #19
   12c8a:	7021      	strb	r1, [r4, #0]
   12c8c:	7801      	ldrb	r1, [r0, #0]
   12c8e:	7121      	strb	r1, [r4, #4]
   12c90:	7162      	strb	r2, [r4, #5]
   12c92:	7841      	ldrb	r1, [r0, #1]
   12c94:	71a1      	strb	r1, [r4, #6]
   12c96:	f8d0 1002 	ldr.w	r1, [r0, #2]
   12c9a:	f8c4 1007 	str.w	r1, [r4, #7]
   12c9e:	88c1      	ldrh	r1, [r0, #6]
   12ca0:	f8a4 100b 	strh.w	r1, [r4, #11]
   12ca4:	21fe      	movs	r1, #254	; 0xfe
   12ca6:	7361      	strb	r1, [r4, #13]
   12ca8:	6941      	ldr	r1, [r0, #20]
   12caa:	f8c4 100e 	str.w	r1, [r4, #14]
   12cae:	8b01      	ldrh	r1, [r0, #24]
   12cb0:	8261      	strh	r1, [r4, #18]
   12cb2:	7a40      	ldrb	r0, [r0, #9]
   12cb4:	7520      	strb	r0, [r4, #20]
   12cb6:	bd70      	pop	{r4, r5, r6, pc}
   12cb8:	07cb      	lsls	r3, r1, #31
   12cba:	d003      	beq.n	12cc4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
   12cbc:	078b      	lsls	r3, r1, #30
   12cbe:	d501      	bpl.n	12cc4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
   12cc0:	2100      	movs	r1, #0
   12cc2:	e00c      	b.n	12cde <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
   12cc4:	074b      	lsls	r3, r1, #29
   12cc6:	d501      	bpl.n	12ccc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
   12cc8:	73a2      	strb	r2, [r4, #14]
   12cca:	e009      	b.n	12ce0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
   12ccc:	07ca      	lsls	r2, r1, #31
   12cce:	d001      	beq.n	12cd4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
   12cd0:	21b5      	movs	r1, #181	; 0xb5
   12cd2:	e009      	b.n	12ce8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
   12cd4:	0789      	lsls	r1, r1, #30
   12cd6:	d501      	bpl.n	12cdc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
   12cd8:	2102      	movs	r1, #2
   12cda:	e000      	b.n	12cde <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
   12cdc:	2103      	movs	r1, #3
   12cde:	73a1      	strb	r1, [r4, #14]
   12ce0:	7a02      	ldrb	r2, [r0, #8]
   12ce2:	2a1f      	cmp	r2, #31
   12ce4:	d903      	bls.n	12cee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
   12ce6:	21b8      	movs	r1, #184	; 0xb8
   12ce8:	2010      	movs	r0, #16
   12cea:	f7fd fe41 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12cee:	f104 000f 	add.w	r0, r4, #15
   12cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12cf6:	4902      	ldr	r1, [pc, #8]	; (12d00 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
   12cf8:	311c      	adds	r1, #28
   12cfa:	f006 bc58 	b.w	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12cfe:	0000      	.short	0x0000
   12d00:	20001450 	.word	0x20001450
   12d04:	b510      	push	{r4, lr}
   12d06:	492d      	ldr	r1, [pc, #180]	; (12dbc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
   12d08:	b086      	sub	sp, #24
   12d0a:	7c8a      	ldrb	r2, [r1, #18]
   12d0c:	7801      	ldrb	r1, [r0, #0]
   12d0e:	07d3      	lsls	r3, r2, #31
   12d10:	d101      	bne.n	12d16 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
   12d12:	291d      	cmp	r1, #29
   12d14:	d004      	beq.n	12d20 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
   12d16:	291c      	cmp	r1, #28
   12d18:	d01f      	beq.n	12d5a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
   12d1a:	2915      	cmp	r1, #21
   12d1c:	d046      	beq.n	12dac <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
   12d1e:	e04a      	b.n	12db6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
   12d20:	8880      	ldrh	r0, [r0, #4]
   12d22:	f8ad 0000 	strh.w	r0, [sp]
   12d26:	a902      	add	r1, sp, #8
   12d28:	f007 fe69 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12d2c:	b110      	cbz	r0, 12d34 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
   12d2e:	f44f 71c4 	mov.w	r1, #392	; 0x188
   12d32:	e035      	b.n	12da0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
   12d34:	9803      	ldr	r0, [sp, #12]
   12d36:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   12d3a:	f88d 1002 	strb.w	r1, [sp, #2]
   12d3e:	7841      	ldrb	r1, [r0, #1]
   12d40:	f88d 1003 	strb.w	r1, [sp, #3]
   12d44:	8840      	ldrh	r0, [r0, #2]
   12d46:	f8ad 0004 	strh.w	r0, [sp, #4]
   12d4a:	2102      	movs	r1, #2
   12d4c:	4668      	mov	r0, sp
   12d4e:	f004 fd45 	bl	177dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   12d52:	b340      	cbz	r0, 12da6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
   12d54:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   12d58:	e022      	b.n	12da0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
   12d5a:	0791      	lsls	r1, r2, #30
   12d5c:	d42b      	bmi.n	12db6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
   12d5e:	8884      	ldrh	r4, [r0, #4]
   12d60:	a903      	add	r1, sp, #12
   12d62:	4620      	mov	r0, r4
   12d64:	f009 f9ba 	bl	1c0dc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
   12d68:	b110      	cbz	r0, 12d70 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
   12d6a:	f240 11a5 	movw	r1, #421	; 0x1a5
   12d6e:	e017      	b.n	12da0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
   12d70:	f8ad 4000 	strh.w	r4, [sp]
   12d74:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   12d78:	f8ad 0002 	strh.w	r0, [sp, #2]
   12d7c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   12d80:	f8ad 0004 	strh.w	r0, [sp, #4]
   12d84:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   12d88:	f8ad 0006 	strh.w	r0, [sp, #6]
   12d8c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   12d90:	f8ad 0008 	strh.w	r0, [sp, #8]
   12d94:	4668      	mov	r0, sp
   12d96:	f009 f9cc 	bl	1c132 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
   12d9a:	b120      	cbz	r0, 12da6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
   12d9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   12da0:	2010      	movs	r0, #16
   12da2:	f7fd fde5 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12da6:	2001      	movs	r0, #1
   12da8:	b006      	add	sp, #24
   12daa:	bd10      	pop	{r4, pc}
   12dac:	0751      	lsls	r1, r2, #29
   12dae:	d402      	bmi.n	12db6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
   12db0:	7b80      	ldrb	r0, [r0, #14]
   12db2:	07c0      	lsls	r0, r0, #31
   12db4:	d0f7      	beq.n	12da6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
   12db6:	2000      	movs	r0, #0
   12db8:	e7f6      	b.n	12da8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
   12dba:	0000      	.short	0x0000
   12dbc:	20001434 	.word	0x20001434
   12dc0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc4:	b087      	sub	sp, #28
   12dc6:	460c      	mov	r4, r1
   12dc8:	a902      	add	r1, sp, #8
   12dca:	9807      	ldr	r0, [sp, #28]
   12dcc:	f007 fe17 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12dd0:	2800      	cmp	r0, #0
   12dd2:	d17d      	bne.n	12ed0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
   12dd4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 12ef8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
   12dd8:	f04f 0801 	mov.w	r8, #1
   12ddc:	4682      	mov	sl, r0
   12dde:	9803      	ldr	r0, [sp, #12]
   12de0:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
   12de4:	2800      	cmp	r0, #0
   12de6:	d00c      	beq.n	12e02 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
   12de8:	f8d9 2000 	ldr.w	r2, [r9]
   12dec:	b162      	cbz	r2, 12e08 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
   12dee:	4621      	mov	r1, r4
   12df0:	9807      	ldr	r0, [sp, #28]
   12df2:	4790      	blx	r2
   12df4:	b140      	cbz	r0, 12e08 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
   12df6:	4620      	mov	r0, r4
   12df8:	f7ff ff84 	bl	12d04 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
   12dfc:	2800      	cmp	r0, #0
   12dfe:	d1ee      	bne.n	12dde <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
   12e00:	2001      	movs	r0, #1
   12e02:	b009      	add	sp, #36	; 0x24
   12e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e08:	9d03      	ldr	r5, [sp, #12]
   12e0a:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
   12e0e:	3578      	adds	r5, #120	; 0x78
   12e10:	b950      	cbnz	r0, 12e28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
   12e12:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
   12e16:	f88d 0004 	strb.w	r0, [sp, #4]
   12e1a:	9801      	ldr	r0, [sp, #4]
   12e1c:	9001      	str	r0, [sp, #4]
   12e1e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12e22:	b108      	cbz	r0, 12e28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
   12e24:	2001      	movs	r0, #1
   12e26:	e000      	b.n	12e2a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
   12e28:	2000      	movs	r0, #0
   12e2a:	4683      	mov	fp, r0
   12e2c:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
   12e30:	b1c0      	cbz	r0, 12e64 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
   12e32:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   12e36:	0780      	lsls	r0, r0, #30
   12e38:	d514      	bpl.n	12e64 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
   12e3a:	f884 a001 	strb.w	sl, [r4, #1]
   12e3e:	f884 8000 	strb.w	r8, [r4]
   12e42:	f884 a004 	strb.w	sl, [r4, #4]
   12e46:	9907      	ldr	r1, [sp, #28]
   12e48:	f8a4 1005 	strh.w	r1, [r4, #5]
   12e4c:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
   12e50:	71e1      	strb	r1, [r4, #7]
   12e52:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   12e56:	8121      	strh	r1, [r4, #8]
   12e58:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
   12e5c:	8161      	strh	r1, [r4, #10]
   12e5e:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
   12e62:	e7c8      	b.n	12df6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
   12e64:	9807      	ldr	r0, [sp, #28]
   12e66:	f7fe f997 	bl	11198 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   12e6a:	0007      	movs	r7, r0
   12e6c:	d00d      	beq.n	12e8a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
   12e6e:	f007 fa71 	bl	1a354 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
   12e72:	0006      	movs	r6, r0
   12e74:	d015      	beq.n	12ea2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
   12e76:	f884 a001 	strb.w	sl, [r4, #1]
   12e7a:	200f      	movs	r0, #15
   12e7c:	7020      	strb	r0, [r4, #0]
   12e7e:	9807      	ldr	r0, [sp, #28]
   12e80:	80e0      	strh	r0, [r4, #6]
   12e82:	8126      	strh	r6, [r4, #8]
   12e84:	f884 8004 	strb.w	r8, [r4, #4]
   12e88:	e007      	b.n	12e9a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
   12e8a:	f240 2133 	movw	r1, #563	; 0x233
   12e8e:	e02d      	b.n	12eec <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
   12e90:	2100      	movs	r1, #0
   12e92:	4638      	mov	r0, r7
   12e94:	460a      	mov	r2, r1
   12e96:	f007 fb81 	bl	1a59c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   12e9a:	1e76      	subs	r6, r6, #1
   12e9c:	b2b6      	uxth	r6, r6
   12e9e:	d2f7      	bcs.n	12e90 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
   12ea0:	e7a9      	b.n	12df6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
   12ea2:	9807      	ldr	r0, [sp, #28]
   12ea4:	f7fe f962 	bl	1116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   12ea8:	b1f0      	cbz	r0, 12ee8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
   12eaa:	f1bb 0f00 	cmp.w	fp, #0
   12eae:	d020      	beq.n	12ef2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
   12eb0:	f007 f96a 	bl	1a188 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   12eb4:	b160      	cbz	r0, 12ed0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
   12eb6:	9807      	ldr	r0, [sp, #28]
   12eb8:	f007 fc9f 	bl	1a7fa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   12ebc:	2100      	movs	r1, #0
   12ebe:	9807      	ldr	r0, [sp, #28]
   12ec0:	f7fd ffd4 	bl	10e6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12ec4:	f884 a001 	strb.w	sl, [r4, #1]
   12ec8:	210c      	movs	r1, #12
   12eca:	4650      	mov	r0, sl
   12ecc:	7021      	strb	r1, [r4, #0]
   12ece:	e000      	b.n	12ed2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
   12ed0:	e00f      	b.n	12ef2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
   12ed2:	f884 a004 	strb.w	sl, [r4, #4]
   12ed6:	9907      	ldr	r1, [sp, #28]
   12ed8:	f8a4 1005 	strh.w	r1, [r4, #5]
   12edc:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
   12ee0:	71e1      	strb	r1, [r4, #7]
   12ee2:	3524      	adds	r5, #36	; 0x24
   12ee4:	7028      	strb	r0, [r5, #0]
   12ee6:	e786      	b.n	12df6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
   12ee8:	f240 2151 	movw	r1, #593	; 0x251
   12eec:	2010      	movs	r0, #16
   12eee:	f7fd fd3f 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12ef2:	2000      	movs	r0, #0
   12ef4:	e785      	b.n	12e02 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
   12ef6:	0000      	.short	0x0000
   12ef8:	200000f4 	.word	0x200000f4
   12efc:	4804      	ldr	r0, [pc, #16]	; (12f10 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
   12efe:	2100      	movs	r1, #0
   12f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12f04:	7001      	strb	r1, [r0, #0]
   12f06:	8042      	strh	r2, [r0, #2]
   12f08:	1f00      	subs	r0, r0, #4
   12f0a:	f8a0 1001 	strh.w	r1, [r0, #1]
   12f0e:	4770      	bx	lr
   12f10:	20000284 	.word	0x20000284
   12f14:	b570      	push	{r4, r5, r6, lr}
   12f16:	4604      	mov	r4, r0
   12f18:	481b      	ldr	r0, [pc, #108]	; (12f88 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
   12f1a:	6801      	ldr	r1, [r0, #0]
   12f1c:	b319      	cbz	r1, 12f66 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
   12f1e:	4620      	mov	r0, r4
   12f20:	4788      	blx	r1
   12f22:	b300      	cbz	r0, 12f66 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
   12f24:	7820      	ldrb	r0, [r4, #0]
   12f26:	2818      	cmp	r0, #24
   12f28:	d002      	beq.n	12f30 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
   12f2a:	2805      	cmp	r0, #5
   12f2c:	d016      	beq.n	12f5c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
   12f2e:	e018      	b.n	12f62 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
   12f30:	7920      	ldrb	r0, [r4, #4]
   12f32:	2801      	cmp	r0, #1
   12f34:	d115      	bne.n	12f62 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
   12f36:	88e0      	ldrh	r0, [r4, #6]
   12f38:	2100      	movs	r1, #0
   12f3a:	f007 fbf6 	bl	1a72a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12f3e:	0004      	movs	r4, r0
   12f40:	d00f      	beq.n	12f62 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
   12f42:	8820      	ldrh	r0, [r4, #0]
   12f44:	f007 fc59 	bl	1a7fa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   12f48:	8820      	ldrh	r0, [r4, #0]
   12f4a:	2100      	movs	r1, #0
   12f4c:	f7fd ff8e 	bl	10e6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12f50:	b138      	cbz	r0, 12f62 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
   12f52:	f44f 7185 	mov.w	r1, #266	; 0x10a
   12f56:	2010      	movs	r0, #16
   12f58:	f7fd fd0a 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12f5c:	4620      	mov	r0, r4
   12f5e:	f7ff fe65 	bl	12c2c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
   12f62:	2001      	movs	r0, #1
   12f64:	bd70      	pop	{r4, r5, r6, pc}
   12f66:	4d09      	ldr	r5, [pc, #36]	; (12f8c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
   12f68:	7868      	ldrb	r0, [r5, #1]
   12f6a:	2800      	cmp	r0, #0
   12f6c:	d0fa      	beq.n	12f64 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
   12f6e:	2600      	movs	r6, #0
   12f70:	7066      	strb	r6, [r4, #1]
   12f72:	2014      	movs	r0, #20
   12f74:	7020      	strb	r0, [r4, #0]
   12f76:	2220      	movs	r2, #32
   12f78:	4631      	mov	r1, r6
   12f7a:	1d20      	adds	r0, r4, #4
   12f7c:	f006 fb91 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   12f80:	2002      	movs	r0, #2
   12f82:	7120      	strb	r0, [r4, #4]
   12f84:	706e      	strb	r6, [r5, #1]
   12f86:	e7ec      	b.n	12f62 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
   12f88:	200000f8 	.word	0x200000f8
   12f8c:	20000281 	.word	0x20000281

00012f90 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
   12f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f92:	f06f 021f 	mvn.w	r2, #31
   12f96:	0c01      	lsrs	r1, r0, #16
   12f98:	ea02 2690 	and.w	r6, r2, r0, lsr #10
   12f9c:	251f      	movs	r5, #31
   12f9e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   12fa2:	3854      	subs	r0, #84	; 0x54
   12fa4:	d00d      	beq.n	12fc2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   12fa6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   12faa:	3855      	subs	r0, #85	; 0x55
   12fac:	d009      	beq.n	12fc2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   12fae:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
   12fb2:	38aa      	subs	r0, #170	; 0xaa
   12fb4:	d005      	beq.n	12fc2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   12fb6:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
   12fba:	38aa      	subs	r0, #170	; 0xaa
   12fbc:	d001      	beq.n	12fc2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   12fbe:	2001      	movs	r0, #1
   12fc0:	e000      	b.n	12fc4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
   12fc2:	2000      	movs	r0, #0
   12fc4:	2200      	movs	r2, #0
   12fc6:	4613      	mov	r3, r2
   12fc8:	ea4f 0402 	mov.w	r4, r2
   12fcc:	ea82 0701 	eor.w	r7, r2, r1
   12fd0:	43ff      	mvns	r7, r7
   12fd2:	431f      	orrs	r7, r3
   12fd4:	1c7f      	adds	r7, r7, #1
   12fd6:	d00f      	beq.n	12ff8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
   12fd8:	f006 0701 	and.w	r7, r6, #1
   12fdc:	0852      	lsrs	r2, r2, #1
   12fde:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
   12fe2:	f005 0701 	and.w	r7, r5, #1
   12fe6:	085b      	lsrs	r3, r3, #1
   12fe8:	0876      	lsrs	r6, r6, #1
   12fea:	086d      	lsrs	r5, r5, #1
   12fec:	1c64      	adds	r4, r4, #1
   12fee:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
   12ff2:	2c16      	cmp	r4, #22
   12ff4:	d3ea      	bcc.n	12fcc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
   12ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ff8:	2000      	movs	r0, #0
   12ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012ffc <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
   12ffc:	4801      	ldr	r0, [pc, #4]	; (13004 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
   12ffe:	f008 ba72 	b.w	1b4e6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
   13002:	0000      	.short	0x0000
   13004:	20000100 	.word	0x20000100

00013008 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
   13008:	b510      	push	{r4, lr}
   1300a:	4604      	mov	r4, r0
   1300c:	f008 fa5a 	bl	1b4c4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
   13010:	b310      	cbz	r0, 13058 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
   13012:	43e0      	mvns	r0, r4
   13014:	f008 fa56 	bl	1b4c4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
   13018:	b1f0      	cbz	r0, 13058 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
   1301a:	16a0      	asrs	r0, r4, #26
   1301c:	ea80 0060 	eor.w	r0, r0, r0, asr #1
   13020:	1e41      	subs	r1, r0, #1
   13022:	4208      	tst	r0, r1
   13024:	d018      	beq.n	13058 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
   13026:	ea84 0064 	eor.w	r0, r4, r4, asr #1
   1302a:	f007 fd11 	bl	1aa50 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>
   1302e:	2818      	cmp	r0, #24
   13030:	d812      	bhi.n	13058 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
   13032:	b2a0      	uxth	r0, r4
   13034:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
   13038:	d107      	bne.n	1304a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x42>
   1303a:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
   1303e:	ea01 2114 	and.w	r1, r1, r4, lsr #8
   13042:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
   13046:	4281      	cmp	r1, r0
   13048:	d006      	beq.n	13058 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
   1304a:	4804      	ldr	r0, [pc, #16]	; (1305c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
   1304c:	4044      	eors	r4, r0
   1304e:	1e60      	subs	r0, r4, #1
   13050:	4204      	tst	r4, r0
   13052:	d001      	beq.n	13058 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
   13054:	2001      	movs	r0, #1
   13056:	bd10      	pop	{r4, pc}
   13058:	2000      	movs	r0, #0
   1305a:	bd10      	pop	{r4, pc}
   1305c:	8e89bed6 	.word	0x8e89bed6
   13060:	4801      	ldr	r0, [pc, #4]	; (13068 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x60>)
   13062:	f000 b803 	b.w	1306c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
   13066:	0000      	.short	0x0000
   13068:	20000100 	.word	0x20000100

0001306c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
   1306c:	b510      	push	{r4, lr}
   1306e:	e9d0 2100 	ldrd	r2, r1, [r0]
   13072:	4b09      	ldr	r3, [pc, #36]	; (13098 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
   13074:	4c09      	ldr	r4, [pc, #36]	; (1309c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
   13076:	4353      	muls	r3, r2
   13078:	4354      	muls	r4, r2
   1307a:	4051      	eors	r1, r2
   1307c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
   13080:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
   13084:	ea4f 41f1 	mov.w	r1, r1, ror #19
   13088:	e9c0 2100 	strd	r2, r1, [r0]
   1308c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
   13090:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13094:	4618      	mov	r0, r3
   13096:	bd10      	pop	{r4, pc}
   13098:	c6ef3760 	.word	0xc6ef3760
   1309c:	9e3779bb 	.word	0x9e3779bb

000130a0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
   130a0:	4801      	ldr	r0, [pc, #4]	; (130a8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
   130a2:	6840      	ldr	r0, [r0, #4]
   130a4:	3080      	adds	r0, #128	; 0x80
   130a6:	4770      	bx	lr
   130a8:	20000108 	.word	0x20000108

000130ac <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
   130ac:	b510      	push	{r4, lr}
   130ae:	4c1f      	ldr	r4, [pc, #124]	; (1312c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
   130b0:	6860      	ldr	r0, [r4, #4]
   130b2:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   130b6:	f008 fa37 	bl	1b528 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   130ba:	6861      	ldr	r1, [r4, #4]
   130bc:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
   130c0:	3132      	adds	r1, #50	; 0x32
   130c2:	f7fe faa7 	bl	11614 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   130c6:	6860      	ldr	r0, [r4, #4]
   130c8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   130cc:	f008 fa33 	bl	1b536 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
   130d0:	6861      	ldr	r1, [r4, #4]
   130d2:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
   130d6:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
   130da:	3132      	adds	r1, #50	; 0x32
   130dc:	f008 fa10 	bl	1b500 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
   130e0:	b930      	cbnz	r0, 130f0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
   130e2:	6861      	ldr	r1, [r4, #4]
   130e4:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
   130e8:	3132      	adds	r1, #50	; 0x32
   130ea:	f008 fa12 	bl	1b512 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   130ee:	b108      	cbz	r0, 130f4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
   130f0:	2101      	movs	r1, #1
   130f2:	e000      	b.n	130f6 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
   130f4:	2100      	movs	r1, #0
   130f6:	6860      	ldr	r0, [r4, #4]
   130f8:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
   130fc:	b919      	cbnz	r1, 13106 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
   130fe:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
   13102:	2900      	cmp	r1, #0
   13104:	d010      	beq.n	13128 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
   13106:	2100      	movs	r1, #0
   13108:	6781      	str	r1, [r0, #120]	; 0x78
   1310a:	f006 f8db 	bl	192c4 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1310e:	6861      	ldr	r1, [r4, #4]
   13110:	6448      	str	r0, [r1, #68]	; 0x44
   13112:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
   13116:	b110      	cbz	r0, 1311e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
   13118:	2000      	movs	r0, #0
   1311a:	f7ff f863 	bl	121e4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
   1311e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13122:	2000      	movs	r0, #0
   13124:	f000 bdfa 	b.w	13d1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x874>
   13128:	bd10      	pop	{r4, pc}
   1312a:	0000      	.short	0x0000
   1312c:	20000108 	.word	0x20000108

00013130 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
   13130:	b510      	push	{r4, lr}
   13132:	4c09      	ldr	r4, [pc, #36]	; (13158 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
   13134:	2803      	cmp	r0, #3
   13136:	6864      	ldr	r4, [r4, #4]
   13138:	d109      	bne.n	1314e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
   1313a:	63e1      	str	r1, [r4, #60]	; 0x3c
   1313c:	b13b      	cbz	r3, 1314e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
   1313e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
   13142:	6819      	ldr	r1, [r3, #0]
   13144:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
   13148:	8899      	ldrh	r1, [r3, #4]
   1314a:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
   1314e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   13152:	2000      	movs	r0, #0
   13154:	bd10      	pop	{r4, pc}
   13156:	0000      	.short	0x0000
   13158:	20000108 	.word	0x20000108

0001315c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
   1315c:	4807      	ldr	r0, [pc, #28]	; (1317c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
   1315e:	b508      	push	{r3, lr}
   13160:	6840      	ldr	r0, [r0, #4]
   13162:	7801      	ldrb	r1, [r0, #0]
   13164:	f88d 1000 	strb.w	r1, [sp]
   13168:	9900      	ldr	r1, [sp, #0]
   1316a:	9100      	str	r1, [sp, #0]
   1316c:	f89d 1000 	ldrb.w	r1, [sp]
   13170:	b109      	cbz	r1, 13176 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
   13172:	8880      	ldrh	r0, [r0, #4]
   13174:	bd08      	pop	{r3, pc}
   13176:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1317a:	bd08      	pop	{r3, pc}
   1317c:	20000108 	.word	0x20000108

00013180 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
   13180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13182:	4604      	mov	r4, r0
   13184:	f008 fa1f 	bl	1b5c6 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
   13188:	bb48      	cbnz	r0, 131de <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
   1318a:	4e17      	ldr	r6, [pc, #92]	; (131e8 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
   1318c:	6870      	ldr	r0, [r6, #4]
   1318e:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
   13192:	f88d 1000 	strb.w	r1, [sp]
   13196:	9900      	ldr	r1, [sp, #0]
   13198:	9100      	str	r1, [sp, #0]
   1319a:	f89d 1000 	ldrb.w	r1, [sp]
   1319e:	2500      	movs	r5, #0
   131a0:	b139      	cbz	r1, 131b2 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
   131a2:	7065      	strb	r5, [r4, #1]
   131a4:	2107      	movs	r1, #7
   131a6:	7021      	strb	r1, [r4, #0]
   131a8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   131aa:	6061      	str	r1, [r4, #4]
   131ac:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
   131b0:	e015      	b.n	131de <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
   131b2:	4620      	mov	r0, r4
   131b4:	f000 f9d0 	bl	13558 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
   131b8:	b988      	cbnz	r0, 131de <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
   131ba:	6870      	ldr	r0, [r6, #4]
   131bc:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
   131c0:	f88d 1000 	strb.w	r1, [sp]
   131c4:	9900      	ldr	r1, [sp, #0]
   131c6:	9100      	str	r1, [sp, #0]
   131c8:	f89d 1000 	ldrb.w	r1, [sp]
   131cc:	b149      	cbz	r1, 131e2 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
   131ce:	7065      	strb	r5, [r4, #1]
   131d0:	2118      	movs	r1, #24
   131d2:	7021      	strb	r1, [r4, #0]
   131d4:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
   131d8:	6061      	str	r1, [r4, #4]
   131da:	300a      	adds	r0, #10
   131dc:	7785      	strb	r5, [r0, #30]
   131de:	2001      	movs	r0, #1
   131e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   131e2:	2000      	movs	r0, #0
   131e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   131e6:	0000      	.short	0x0000
   131e8:	20000108 	.word	0x20000108

000131ec <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
   131ec:	4902      	ldr	r1, [pc, #8]	; (131f8 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
   131ee:	6849      	ldr	r1, [r1, #4]
   131f0:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
   131f4:	2000      	movs	r0, #0
   131f6:	4770      	bx	lr
   131f8:	20000108 	.word	0x20000108

000131fc <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
   131fc:	4809      	ldr	r0, [pc, #36]	; (13224 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
   131fe:	6841      	ldr	r1, [r0, #4]
   13200:	6d48      	ldr	r0, [r1, #84]	; 0x54
   13202:	b168      	cbz	r0, 13220 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
   13204:	f101 0059 	add.w	r0, r1, #89	; 0x59
   13208:	2201      	movs	r2, #1
   1320a:	7002      	strb	r2, [r0, #0]
   1320c:	2300      	movs	r3, #0
   1320e:	654b      	str	r3, [r1, #84]	; 0x54
   13210:	7003      	strb	r3, [r0, #0]
   13212:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
   13216:	4082      	lsls	r2, r0
   13218:	4803      	ldr	r0, [pc, #12]	; (13228 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
   1321a:	6002      	str	r2, [r0, #0]
   1321c:	2000      	movs	r0, #0
   1321e:	4770      	bx	lr
   13220:	200c      	movs	r0, #12
   13222:	4770      	bx	lr
   13224:	20000108 	.word	0x20000108
   13228:	4001f508 	.word	0x4001f508

0001322c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
   1322c:	4909      	ldr	r1, [pc, #36]	; (13254 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
   1322e:	b510      	push	{r4, lr}
   13230:	6088      	str	r0, [r1, #8]
   13232:	68c8      	ldr	r0, [r1, #12]
   13234:	b150      	cbz	r0, 1324c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
   13236:	f000 ff73 	bl	14120 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
   1323a:	f000 f885 	bl	13348 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   1323e:	2800      	cmp	r0, #0
   13240:	d007      	beq.n	13252 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
   13242:	f640 01f9 	movw	r1, #2297	; 0x8f9
   13246:	2032      	movs	r0, #50	; 0x32
   13248:	f7fd fb92 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1324c:	f640 01f5 	movw	r1, #2293	; 0x8f5
   13250:	e7f9      	b.n	13246 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
   13252:	bd10      	pop	{r4, pc}
   13254:	20000108 	.word	0x20000108

00013258 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
   13258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1325c:	4c0f      	ldr	r4, [pc, #60]	; (1329c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
   1325e:	4605      	mov	r5, r0
   13260:	4616      	mov	r6, r2
   13262:	6860      	ldr	r0, [r4, #4]
   13264:	460f      	mov	r7, r1
   13266:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   1326a:	f008 f964 	bl	1b536 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
   1326e:	b158      	cbz	r0, 13288 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
   13270:	b955      	cbnz	r5, 13288 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
   13272:	4638      	mov	r0, r7
   13274:	f008 f958 	bl	1b528 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   13278:	4631      	mov	r1, r6
   1327a:	f007 fb5f 	bl	1a93c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   1327e:	2808      	cmp	r0, #8
   13280:	d002      	beq.n	13288 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
   13282:	2001      	movs	r0, #1
   13284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13288:	6860      	ldr	r0, [r4, #4]
   1328a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   1328e:	f008 f94b 	bl	1b528 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   13292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13296:	f7fe b9e9 	b.w	1166c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   1329a:	0000      	.short	0x0000
   1329c:	20000108 	.word	0x20000108

000132a0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
   132a0:	b570      	push	{r4, r5, r6, lr}
   132a2:	4c13      	ldr	r4, [pc, #76]	; (132f0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
   132a4:	4615      	mov	r5, r2
   132a6:	460e      	mov	r6, r1
   132a8:	2800      	cmp	r0, #0
   132aa:	d016      	beq.n	132da <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
   132ac:	f04f 0200 	mov.w	r2, #0
   132b0:	6861      	ldr	r1, [r4, #4]
   132b2:	f801 2f39 	strb.w	r2, [r1, #57]!
   132b6:	7248      	strb	r0, [r1, #9]
   132b8:	f04f 0008 	mov.w	r0, #8
   132bc:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
   132c0:	d114      	bne.n	132ec <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
   132c2:	4630      	mov	r0, r6
   132c4:	f008 f930 	bl	1b528 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   132c8:	4629      	mov	r1, r5
   132ca:	f007 fb37 	bl	1a93c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   132ce:	6861      	ldr	r1, [r4, #4]
   132d0:	2808      	cmp	r0, #8
   132d2:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
   132d6:	d003      	beq.n	132e0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
   132d8:	e008      	b.n	132ec <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
   132da:	f04f 0201 	mov.w	r2, #1
   132de:	e7e7      	b.n	132b0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
   132e0:	4630      	mov	r0, r6
   132e2:	f008 f928 	bl	1b536 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
   132e6:	b108      	cbz	r0, 132ec <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
   132e8:	2012      	movs	r0, #18
   132ea:	bd70      	pop	{r4, r5, r6, pc}
   132ec:	2000      	movs	r0, #0
   132ee:	bd70      	pop	{r4, r5, r6, pc}
   132f0:	20000108 	.word	0x20000108

000132f4 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
   132f4:	4902      	ldr	r1, [pc, #8]	; (13300 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
   132f6:	4801      	ldr	r0, [pc, #4]	; (132fc <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
   132f8:	60c8      	str	r0, [r1, #12]
   132fa:	4770      	bx	lr
   132fc:	00014368 	.word	0x00014368
   13300:	20000108 	.word	0x20000108

00013304 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
   13304:	4902      	ldr	r1, [pc, #8]	; (13310 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
   13306:	6849      	ldr	r1, [r1, #4]
   13308:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
   1330c:	4770      	bx	lr
   1330e:	0000      	.short	0x0000
   13310:	20000108 	.word	0x20000108

00013314 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
   13314:	b570      	push	{r4, r5, r6, lr}
   13316:	4605      	mov	r5, r0
   13318:	f7fd ff56 	bl	111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   1331c:	4604      	mov	r4, r0
   1331e:	f7fd ff59 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   13322:	4621      	mov	r1, r4
   13324:	f008 f94d 	bl	1b5c2 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
   13328:	0001      	movs	r1, r0
   1332a:	d006      	beq.n	1333a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
   1332c:	4805      	ldr	r0, [pc, #20]	; (13344 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
   1332e:	68c0      	ldr	r0, [r0, #12]
   13330:	6802      	ldr	r2, [r0, #0]
   13332:	4628      	mov	r0, r5
   13334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13338:	4710      	bx	r2
   1333a:	f640 11f2 	movw	r1, #2546	; 0x9f2
   1333e:	2032      	movs	r0, #50	; 0x32
   13340:	f7fd fb16 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13344:	20000108 	.word	0x20000108

00013348 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
   13348:	b570      	push	{r4, r5, r6, lr}
   1334a:	4d19      	ldr	r5, [pc, #100]	; (133b0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
   1334c:	6868      	ldr	r0, [r5, #4]
   1334e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
   13352:	2901      	cmp	r1, #1
   13354:	d004      	beq.n	13360 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
   13356:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
   1335a:	b108      	cbz	r0, 13360 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
   1335c:	200c      	movs	r0, #12
   1335e:	bd70      	pop	{r4, r5, r6, pc}
   13360:	f7fd ff5c 	bl	1121c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
   13364:	f008 f993 	bl	1b68e <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
   13368:	6868      	ldr	r0, [r5, #4]
   1336a:	2400      	movs	r4, #0
   1336c:	7004      	strb	r4, [r0, #0]
   1336e:	f100 0122 	add.w	r1, r0, #34	; 0x22
   13372:	700c      	strb	r4, [r1, #0]
   13374:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   13378:	f000 f8b4 	bl	134e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
   1337c:	6868      	ldr	r0, [r5, #4]
   1337e:	2201      	movs	r2, #1
   13380:	2107      	movs	r1, #7
   13382:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
   13386:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   1338a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   1338e:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
   13392:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
   13396:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
   1339a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
   1339e:	f100 0159 	add.w	r1, r0, #89	; 0x59
   133a2:	700a      	strb	r2, [r1, #0]
   133a4:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
   133a8:	6544      	str	r4, [r0, #84]	; 0x54
   133aa:	700c      	strb	r4, [r1, #0]
   133ac:	2000      	movs	r0, #0
   133ae:	bd70      	pop	{r4, r5, r6, pc}
   133b0:	20000108 	.word	0x20000108

000133b4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
   133b4:	4805      	ldr	r0, [pc, #20]	; (133cc <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
   133b6:	b510      	push	{r4, lr}
   133b8:	6840      	ldr	r0, [r0, #4]
   133ba:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   133be:	f008 f8b3 	bl	1b528 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   133c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   133c6:	f7fe b951 	b.w	1166c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   133ca:	0000      	.short	0x0000
   133cc:	20000108 	.word	0x20000108

000133d0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
   133d0:	b140      	cbz	r0, 133e4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
   133d2:	2802      	cmp	r0, #2
   133d4:	d006      	beq.n	133e4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
   133d6:	2200      	movs	r2, #0
   133d8:	4903      	ldr	r1, [pc, #12]	; (133e8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
   133da:	6849      	ldr	r1, [r1, #4]
   133dc:	f801 2f39 	strb.w	r2, [r1, #57]!
   133e0:	7208      	strb	r0, [r1, #8]
   133e2:	4770      	bx	lr
   133e4:	2201      	movs	r2, #1
   133e6:	e7f7      	b.n	133d8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
   133e8:	20000108 	.word	0x20000108

000133ec <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
   133ec:	4902      	ldr	r1, [pc, #8]	; (133f8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
   133ee:	6849      	ldr	r1, [r1, #4]
   133f0:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
   133f4:	4770      	bx	lr
   133f6:	0000      	.short	0x0000
   133f8:	20000108 	.word	0x20000108

000133fc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
   133fc:	b510      	push	{r4, lr}
   133fe:	4604      	mov	r4, r0
   13400:	7800      	ldrb	r0, [r0, #0]
   13402:	07c0      	lsls	r0, r0, #31
   13404:	d007      	beq.n	13416 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
   13406:	2300      	movs	r3, #0
   13408:	7860      	ldrb	r0, [r4, #1]
   1340a:	461a      	mov	r2, r3
   1340c:	4619      	mov	r1, r3
   1340e:	f7ff fe8f 	bl	13130 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
   13412:	2800      	cmp	r0, #0
   13414:	d10c      	bne.n	13430 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
   13416:	4b07      	ldr	r3, [pc, #28]	; (13434 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
   13418:	78a0      	ldrb	r0, [r4, #2]
   1341a:	6859      	ldr	r1, [r3, #4]
   1341c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
   13420:	78e0      	ldrb	r0, [r4, #3]
   13422:	f7ff ffd5 	bl	133d0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
   13426:	6859      	ldr	r1, [r3, #4]
   13428:	7920      	ldrb	r0, [r4, #4]
   1342a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
   1342e:	2000      	movs	r0, #0
   13430:	bd10      	pop	{r4, pc}
   13432:	0000      	.short	0x0000
   13434:	20000108 	.word	0x20000108

00013438 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
   13438:	4801      	ldr	r0, [pc, #4]	; (13440 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
   1343a:	68c0      	ldr	r0, [r0, #12]
   1343c:	6840      	ldr	r0, [r0, #4]
   1343e:	4700      	bx	r0
   13440:	20000108 	.word	0x20000108

00013444 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
   13444:	b510      	push	{r4, lr}
   13446:	2000      	movs	r0, #0
   13448:	f000 fc8e 	bl	13d68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
   1344c:	f000 f84a 	bl	134e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
   13450:	f000 fe66 	bl	14120 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
   13454:	4803      	ldr	r0, [pc, #12]	; (13464 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
   13456:	6840      	ldr	r0, [r0, #4]
   13458:	2100      	movs	r1, #0
   1345a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
   1345e:	4608      	mov	r0, r1
   13460:	bd10      	pop	{r4, pc}
   13462:	0000      	.short	0x0000
   13464:	20000108 	.word	0x20000108

00013468 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
   13468:	b510      	push	{r4, lr}
   1346a:	f000 f941 	bl	136f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
   1346e:	4909      	ldr	r1, [pc, #36]	; (13494 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
   13470:	2201      	movs	r2, #1
   13472:	b130      	cbz	r0, 13482 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
   13474:	6848      	ldr	r0, [r1, #4]
   13476:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
   1347a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1347c:	881b      	ldrh	r3, [r3, #0]
   1347e:	8583      	strh	r3, [r0, #44]	; 0x2c
   13480:	e004      	b.n	1348c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
   13482:	684b      	ldr	r3, [r1, #4]
   13484:	2000      	movs	r0, #0
   13486:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
   1348a:	8598      	strh	r0, [r3, #44]	; 0x2c
   1348c:	6848      	ldr	r0, [r1, #4]
   1348e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   13492:	bd10      	pop	{r4, pc}
   13494:	20000108 	.word	0x20000108

00013498 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
   13498:	4802      	ldr	r0, [pc, #8]	; (134a4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
   1349a:	6840      	ldr	r0, [r0, #4]
   1349c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   134a0:	4770      	bx	lr
   134a2:	0000      	.short	0x0000
   134a4:	20000108 	.word	0x20000108

000134a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
   134a8:	b510      	push	{r4, lr}
   134aa:	f000 f921 	bl	136f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
   134ae:	490c      	ldr	r1, [pc, #48]	; (134e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
   134b0:	b128      	cbz	r0, 134be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
   134b2:	6848      	ldr	r0, [r1, #4]
   134b4:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
   134b8:	2801      	cmp	r0, #1
   134ba:	d00e      	beq.n	134da <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
   134bc:	e00c      	b.n	134d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
   134be:	6849      	ldr	r1, [r1, #4]
   134c0:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
   134c4:	2801      	cmp	r0, #1
   134c6:	d001      	beq.n	134cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
   134c8:	2802      	cmp	r0, #2
   134ca:	d105      	bne.n	134d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
   134cc:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
   134d0:	2801      	cmp	r0, #1
   134d2:	d003      	beq.n	134dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
   134d4:	2803      	cmp	r0, #3
   134d6:	d001      	beq.n	134dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
   134d8:	2000      	movs	r0, #0
   134da:	bd10      	pop	{r4, pc}
   134dc:	2001      	movs	r0, #1
   134de:	bd10      	pop	{r4, pc}
   134e0:	20000108 	.word	0x20000108
   134e4:	b510      	push	{r4, lr}
   134e6:	4c07      	ldr	r4, [pc, #28]	; (13504 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
   134e8:	6860      	ldr	r0, [r4, #4]
   134ea:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   134ee:	2800      	cmp	r0, #0
   134f0:	d007      	beq.n	13502 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
   134f2:	f004 fdd3 	bl	1809c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   134f6:	f004 fbb5 	bl	17c64 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   134fa:	6861      	ldr	r1, [r4, #4]
   134fc:	2000      	movs	r0, #0
   134fe:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
   13502:	bd10      	pop	{r4, pc}
   13504:	20000108 	.word	0x20000108
   13508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1350c:	4d10      	ldr	r5, [pc, #64]	; (13550 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
   1350e:	4606      	mov	r6, r0
   13510:	460f      	mov	r7, r1
   13512:	6868      	ldr	r0, [r5, #4]
   13514:	490f      	ldr	r1, [pc, #60]	; (13554 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
   13516:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
   1351a:	5c0c      	ldrb	r4, [r1, r0]
   1351c:	4620      	mov	r0, r4
   1351e:	f005 f931 	bl	18784 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   13522:	6868      	ldr	r0, [r5, #4]
   13524:	2101      	movs	r1, #1
   13526:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
   1352a:	2025      	movs	r0, #37	; 0x25
   1352c:	f009 fa97 	bl	1ca5e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
   13530:	4638      	mov	r0, r7
   13532:	f005 f831 	bl	18598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13536:	f04f 0101 	mov.w	r1, #1
   1353a:	4608      	mov	r0, r1
   1353c:	b126      	cbz	r6, 13548 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
   1353e:	f004 fe63 	bl	18208 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   13542:	b918      	cbnz	r0, 1354c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
   13544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13548:	f004 fe12 	bl	18170 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
   1354c:	2001      	movs	r0, #1
   1354e:	e7f9      	b.n	13544 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
   13550:	20000108 	.word	0x20000108
   13554:	0001cbae 	.word	0x0001cbae
   13558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1355a:	4e20      	ldr	r6, [pc, #128]	; (135dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
   1355c:	4604      	mov	r4, r0
   1355e:	6870      	ldr	r0, [r6, #4]
   13560:	7801      	ldrb	r1, [r0, #0]
   13562:	f88d 1000 	strb.w	r1, [sp]
   13566:	9900      	ldr	r1, [sp, #0]
   13568:	9100      	str	r1, [sp, #0]
   1356a:	f89d 1000 	ldrb.w	r1, [sp]
   1356e:	b389      	cbz	r1, 135d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
   13570:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   13572:	6882      	ldr	r2, [r0, #8]
   13574:	f841 2f03 	str.w	r2, [r1, #3]!
   13578:	8982      	ldrh	r2, [r0, #12]
   1357a:	808a      	strh	r2, [r1, #4]
   1357c:	79c0      	ldrb	r0, [r0, #7]
   1357e:	f007 ffd3 	bl	1b528 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   13582:	6871      	ldr	r1, [r6, #4]
   13584:	2500      	movs	r5, #0
   13586:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   13588:	1c89      	adds	r1, r1, #2
   1358a:	7090      	strb	r0, [r2, #2]
   1358c:	7065      	strb	r5, [r4, #1]
   1358e:	2014      	movs	r0, #20
   13590:	7020      	strb	r0, [r4, #0]
   13592:	2220      	movs	r2, #32
   13594:	1d20      	adds	r0, r4, #4
   13596:	f006 f80a 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1359a:	4a11      	ldr	r2, [pc, #68]	; (135e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
   1359c:	7225      	strb	r5, [r4, #8]
   1359e:	2301      	movs	r3, #1
   135a0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   135a2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
   135a6:	6871      	ldr	r1, [r6, #4]
   135a8:	700d      	strb	r5, [r1, #0]
   135aa:	f101 0028 	add.w	r0, r1, #40	; 0x28
   135ae:	7005      	strb	r5, [r0, #0]
   135b0:	88e0      	ldrh	r0, [r4, #6]
   135b2:	8490      	strh	r0, [r2, #36]	; 0x24
   135b4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   135b6:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
   135ba:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   135be:	4610      	mov	r0, r2
   135c0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   135c4:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
   135c6:	8800      	ldrh	r0, [r0, #0]
   135c8:	f7fd fdd0 	bl	1116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   135cc:	f006 ff98 	bl	1a500 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   135d0:	2001      	movs	r0, #1
   135d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   135d4:	e7ff      	b.n	135d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
   135d6:	2000      	movs	r0, #0
   135d8:	e7fb      	b.n	135d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
   135da:	0000      	.short	0x0000
   135dc:	20000108 	.word	0x20000108
   135e0:	2000148c 	.word	0x2000148c
   135e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135e6:	2600      	movs	r6, #0
   135e8:	460f      	mov	r7, r1
   135ea:	4605      	mov	r5, r0
   135ec:	f88d 6000 	strb.w	r6, [sp]
   135f0:	466b      	mov	r3, sp
   135f2:	f000 f89d 	bl	13730 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
   135f6:	0001      	movs	r1, r0
   135f8:	4810      	ldr	r0, [pc, #64]	; (1363c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
   135fa:	d003      	beq.n	13604 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
   135fc:	6840      	ldr	r0, [r0, #4]
   135fe:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
   13602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13604:	6840      	ldr	r0, [r0, #4]
   13606:	f89d 1000 	ldrb.w	r1, [sp]
   1360a:	2f07      	cmp	r7, #7
   1360c:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
   13610:	d301      	bcc.n	13616 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
   13612:	4634      	mov	r4, r6
   13614:	e002      	b.n	1361c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
   13616:	0022      	movs	r2, r4
   13618:	d100      	bne.n	1361c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
   1361a:	460c      	mov	r4, r1
   1361c:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
   13620:	6869      	ldr	r1, [r5, #4]
   13622:	2900      	cmp	r1, #0
   13624:	d0ed      	beq.n	13602 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
   13626:	7c69      	ldrb	r1, [r5, #17]
   13628:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
   1362c:	6869      	ldr	r1, [r5, #4]
   1362e:	680a      	ldr	r2, [r1, #0]
   13630:	f840 2f6e 	str.w	r2, [r0, #110]!
   13634:	8889      	ldrh	r1, [r1, #4]
   13636:	8081      	strh	r1, [r0, #4]
   13638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1363a:	0000      	.short	0x0000
   1363c:	20000108 	.word	0x20000108
   13640:	b510      	push	{r4, lr}
   13642:	4915      	ldr	r1, [pc, #84]	; (13698 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
   13644:	6842      	ldr	r2, [r0, #4]
   13646:	6849      	ldr	r1, [r1, #4]
   13648:	7813      	ldrb	r3, [r2, #0]
   1364a:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
   1364e:	42a3      	cmp	r3, r4
   13650:	d11f      	bne.n	13692 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
   13652:	7853      	ldrb	r3, [r2, #1]
   13654:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
   13658:	42a3      	cmp	r3, r4
   1365a:	d11a      	bne.n	13692 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
   1365c:	7893      	ldrb	r3, [r2, #2]
   1365e:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
   13662:	42a3      	cmp	r3, r4
   13664:	d115      	bne.n	13692 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
   13666:	78d3      	ldrb	r3, [r2, #3]
   13668:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
   1366c:	42a3      	cmp	r3, r4
   1366e:	d110      	bne.n	13692 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
   13670:	7913      	ldrb	r3, [r2, #4]
   13672:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
   13676:	42a3      	cmp	r3, r4
   13678:	d10b      	bne.n	13692 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
   1367a:	7952      	ldrb	r2, [r2, #5]
   1367c:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
   13680:	429a      	cmp	r2, r3
   13682:	d106      	bne.n	13692 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
   13684:	7c40      	ldrb	r0, [r0, #17]
   13686:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
   1368a:	4288      	cmp	r0, r1
   1368c:	d101      	bne.n	13692 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
   1368e:	2001      	movs	r0, #1
   13690:	bd10      	pop	{r4, pc}
   13692:	2000      	movs	r0, #0
   13694:	bd10      	pop	{r4, pc}
   13696:	0000      	.short	0x0000
   13698:	20000108 	.word	0x20000108
   1369c:	b530      	push	{r4, r5, lr}
   1369e:	7801      	ldrb	r1, [r0, #0]
   136a0:	b08b      	sub	sp, #44	; 0x2c
   136a2:	f001 040f 	and.w	r4, r1, #15
   136a6:	4622      	mov	r2, r4
   136a8:	a901      	add	r1, sp, #4
   136aa:	f000 fee9 	bl	14480 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
   136ae:	a801      	add	r0, sp, #4
   136b0:	f7ff ffc6 	bl	13640 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
   136b4:	4605      	mov	r5, r0
   136b6:	f004 fd0b 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   136ba:	f000 fb6f 	bl	13d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
   136be:	2c04      	cmp	r4, #4
   136c0:	d111      	bne.n	136e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
   136c2:	b185      	cbz	r5, 136e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
   136c4:	a80a      	add	r0, sp, #40	; 0x28
   136c6:	f000 fb75 	bl	13db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
   136ca:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
   136ce:	9000      	str	r0, [sp, #0]
   136d0:	4806      	ldr	r0, [pc, #24]	; (136ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
   136d2:	6840      	ldr	r0, [r0, #4]
   136d4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   136d8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
   136dc:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
   136e0:	a801      	add	r0, sp, #4
   136e2:	f007 ffd6 	bl	1b692 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
   136e6:	b00b      	add	sp, #44	; 0x2c
   136e8:	2005      	movs	r0, #5
   136ea:	bd30      	pop	{r4, r5, pc}
   136ec:	20000108 	.word	0x20000108
   136f0:	4804      	ldr	r0, [pc, #16]	; (13704 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
   136f2:	6840      	ldr	r0, [r0, #4]
   136f4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   136f8:	2803      	cmp	r0, #3
   136fa:	d001      	beq.n	13700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
   136fc:	2000      	movs	r0, #0
   136fe:	4770      	bx	lr
   13700:	2001      	movs	r0, #1
   13702:	4770      	bx	lr
   13704:	20000108 	.word	0x20000108
   13708:	4908      	ldr	r1, [pc, #32]	; (1372c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
   1370a:	b510      	push	{r4, lr}
   1370c:	6849      	ldr	r1, [r1, #4]
   1370e:	7c83      	ldrb	r3, [r0, #18]
   13710:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
   13714:	429a      	cmp	r2, r3
   13716:	d105      	bne.n	13724 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
   13718:	6880      	ldr	r0, [r0, #8]
   1371a:	2206      	movs	r2, #6
   1371c:	3132      	adds	r1, #50	; 0x32
   1371e:	f005 ff34 	bl	1958a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   13722:	b108      	cbz	r0, 13728 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
   13724:	2000      	movs	r0, #0
   13726:	bd10      	pop	{r4, pc}
   13728:	2001      	movs	r0, #1
   1372a:	bd10      	pop	{r4, pc}
   1372c:	20000108 	.word	0x20000108
   13730:	b570      	push	{r4, r5, r6, lr}
   13732:	6841      	ldr	r1, [r0, #4]
   13734:	461e      	mov	r6, r3
   13736:	4604      	mov	r4, r0
   13738:	b1c1      	cbz	r1, 1376c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
   1373a:	7c60      	ldrb	r0, [r4, #17]
   1373c:	f007 fee9 	bl	1b512 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   13740:	4d10      	ldr	r5, [pc, #64]	; (13784 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
   13742:	6869      	ldr	r1, [r5, #4]
   13744:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
   13748:	b141      	cbz	r1, 1375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
   1374a:	b138      	cbz	r0, 1375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
   1374c:	f007 f8ec 	bl	1a928 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
   13750:	6869      	ldr	r1, [r5, #4]
   13752:	f801 0f64 	strb.w	r0, [r1, #100]!
   13756:	7048      	strb	r0, [r1, #1]
   13758:	2001      	movs	r0, #1
   1375a:	71c8      	strb	r0, [r1, #7]
   1375c:	686b      	ldr	r3, [r5, #4]
   1375e:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   13762:	28ff      	cmp	r0, #255	; 0xff
   13764:	d004      	beq.n	13770 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
   13766:	f7fe fdeb 	bl	12340 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
   1376a:	7030      	strb	r0, [r6, #0]
   1376c:	2000      	movs	r0, #0
   1376e:	bd70      	pop	{r4, r5, r6, pc}
   13770:	7c60      	ldrb	r0, [r4, #17]
   13772:	4632      	mov	r2, r6
   13774:	3364      	adds	r3, #100	; 0x64
   13776:	6861      	ldr	r1, [r4, #4]
   13778:	f7fe fe5e 	bl	12438 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
   1377c:	f080 0001 	eor.w	r0, r0, #1
   13780:	bd70      	pop	{r4, r5, r6, pc}
   13782:	0000      	.short	0x0000
   13784:	20000108 	.word	0x20000108
   13788:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1378a:	4c3d      	ldr	r4, [pc, #244]	; (13880 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
   1378c:	466f      	mov	r7, sp
   1378e:	6860      	ldr	r0, [r4, #4]
   13790:	7801      	ldrb	r1, [r0, #0]
   13792:	f88d 1008 	strb.w	r1, [sp, #8]
   13796:	9902      	ldr	r1, [sp, #8]
   13798:	9102      	str	r1, [sp, #8]
   1379a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1379e:	b111      	cbz	r1, 137a6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
   137a0:	f241 41b1 	movw	r1, #5297	; 0x14b1
   137a4:	e04f      	b.n	13846 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
   137a6:	2500      	movs	r5, #0
   137a8:	7085      	strb	r5, [r0, #2]
   137aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   137ac:	880a      	ldrh	r2, [r1, #0]
   137ae:	8082      	strh	r2, [r0, #4]
   137b0:	68c8      	ldr	r0, [r1, #12]
   137b2:	f007 f934 	bl	1aa1e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   137b6:	6861      	ldr	r1, [r4, #4]
   137b8:	8348      	strh	r0, [r1, #26]
   137ba:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
   137bc:	8a82      	ldrh	r2, [r0, #20]
   137be:	838a      	strh	r2, [r1, #28]
   137c0:	8ac0      	ldrh	r0, [r0, #22]
   137c2:	83c8      	strh	r0, [r1, #30]
   137c4:	f881 5020 	strb.w	r5, [r1, #32]
   137c8:	4669      	mov	r1, sp
   137ca:	68a0      	ldr	r0, [r4, #8]
   137cc:	f007 fc2f 	bl	1b02e <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
   137d0:	68a0      	ldr	r0, [r4, #8]
   137d2:	7800      	ldrb	r0, [r0, #0]
   137d4:	f3c0 1680 	ubfx	r6, r0, #6, #1
   137d8:	6860      	ldr	r0, [r4, #4]
   137da:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
   137de:	b120      	cbz	r0, 137ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
   137e0:	4639      	mov	r1, r7
   137e2:	4630      	mov	r0, r6
   137e4:	f007 fe95 	bl	1b512 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   137e8:	b940      	cbnz	r0, 137fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
   137ea:	6860      	ldr	r0, [r4, #4]
   137ec:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
   137f0:	b160      	cbz	r0, 1380c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
   137f2:	4639      	mov	r1, r7
   137f4:	4630      	mov	r0, r6
   137f6:	f007 fe83 	bl	1b500 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
   137fa:	b138      	cbz	r0, 1380c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
   137fc:	6860      	ldr	r0, [r4, #4]
   137fe:	9900      	ldr	r1, [sp, #0]
   13800:	f8c0 100e 	str.w	r1, [r0, #14]
   13804:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   13808:	8241      	strh	r1, [r0, #18]
   1380a:	e003      	b.n	13814 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
   1380c:	6860      	ldr	r0, [r4, #4]
   1380e:	f8c0 500e 	str.w	r5, [r0, #14]
   13812:	8245      	strh	r5, [r0, #18]
   13814:	6861      	ldr	r1, [r4, #4]
   13816:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
   1381a:	28ff      	cmp	r0, #255	; 0xff
   1381c:	d016      	beq.n	1384c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
   1381e:	f101 0208 	add.w	r2, r1, #8
   13822:	1dc9      	adds	r1, r1, #7
   13824:	f7fe fd72 	bl	1230c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   13828:	b158      	cbz	r0, 13842 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
   1382a:	6860      	ldr	r0, [r4, #4]
   1382c:	79c1      	ldrb	r1, [r0, #7]
   1382e:	f041 0102 	orr.w	r1, r1, #2
   13832:	71c1      	strb	r1, [r0, #7]
   13834:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
   13838:	6141      	str	r1, [r0, #20]
   1383a:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
   1383e:	8301      	strh	r1, [r0, #24]
   13840:	e00f      	b.n	13862 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
   13842:	f241 41dc 	movw	r1, #5340	; 0x14dc
   13846:	2032      	movs	r0, #50	; 0x32
   13848:	f7fd f892 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1384c:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
   13850:	71c8      	strb	r0, [r1, #7]
   13852:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
   13856:	6088      	str	r0, [r1, #8]
   13858:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
   1385c:	8188      	strh	r0, [r1, #12]
   1385e:	614d      	str	r5, [r1, #20]
   13860:	830d      	strh	r5, [r1, #24]
   13862:	6860      	ldr	r0, [r4, #4]
   13864:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   13866:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
   1386a:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
   1386e:	2101      	movs	r1, #1
   13870:	7001      	strb	r1, [r0, #0]
   13872:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   13874:	8800      	ldrh	r0, [r0, #0]
   13876:	f7fd fc79 	bl	1116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1387a:	f006 fe47 	bl	1a50c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
   1387e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13880:	20000108 	.word	0x20000108
   13884:	b570      	push	{r4, r5, r6, lr}
   13886:	4d39      	ldr	r5, [pc, #228]	; (1396c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
   13888:	4601      	mov	r1, r0
   1388a:	2200      	movs	r2, #0
   1388c:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
   13890:	365c      	adds	r6, #92	; 0x5c
   13892:	8002      	strh	r2, [r0, #0]
   13894:	2903      	cmp	r1, #3
   13896:	d002      	beq.n	1389e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
   13898:	2905      	cmp	r1, #5
   1389a:	d004      	beq.n	138a6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
   1389c:	e056      	b.n	1394c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
   1389e:	2103      	movs	r1, #3
   138a0:	f007 fbdc 	bl	1b05c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   138a4:	e052      	b.n	1394c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
   138a6:	2105      	movs	r1, #5
   138a8:	f007 fbd8 	bl	1b05c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   138ac:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
   138b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   138b2:	6909      	ldr	r1, [r1, #16]
   138b4:	f844 1f0f 	str.w	r1, [r4, #15]!
   138b8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   138ba:	8b0a      	ldrh	r2, [r1, #24]
   138bc:	80a2      	strh	r2, [r4, #4]
   138be:	7e89      	ldrb	r1, [r1, #26]
   138c0:	71a1      	strb	r1, [r4, #6]
   138c2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   138c4:	68c1      	ldr	r1, [r0, #12]
   138c6:	8b80      	ldrh	r0, [r0, #28]
   138c8:	f007 fa76 	bl	1adb8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
   138cc:	71e0      	strb	r0, [r4, #7]
   138ce:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
   138d2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   138d4:	68c1      	ldr	r1, [r0, #12]
   138d6:	6a00      	ldr	r0, [r0, #32]
   138d8:	f007 fa63 	bl	1ada2 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
   138dc:	75e0      	strb	r0, [r4, #23]
   138de:	0a00      	lsrs	r0, r0, #8
   138e0:	7620      	strb	r0, [r4, #24]
   138e2:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
   138e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   138e8:	68c0      	ldr	r0, [r0, #12]
   138ea:	f007 f898 	bl	1aa1e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   138ee:	7660      	strb	r0, [r4, #25]
   138f0:	0a00      	lsrs	r0, r0, #8
   138f2:	76a0      	strb	r0, [r4, #26]
   138f4:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
   138f8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   138fa:	8a89      	ldrh	r1, [r1, #20]
   138fc:	76e1      	strb	r1, [r4, #27]
   138fe:	0a09      	lsrs	r1, r1, #8
   13900:	7721      	strb	r1, [r4, #28]
   13902:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   13904:	8ac9      	ldrh	r1, [r1, #22]
   13906:	7761      	strb	r1, [r4, #29]
   13908:	0a09      	lsrs	r1, r1, #8
   1390a:	77a1      	strb	r1, [r4, #30]
   1390c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1390e:	f851 2f8e 	ldr.w	r2, [r1, #142]!
   13912:	f8c4 201f 	str.w	r2, [r4, #31]
   13916:	7909      	ldrb	r1, [r1, #4]
   13918:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
   1391c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1391e:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
   13922:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   13926:	f001 011f 	and.w	r1, r1, #31
   1392a:	f020 001f 	bic.w	r0, r0, #31
   1392e:	4308      	orrs	r0, r1
   13930:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
   13934:	f004 f978 	bl	17c28 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
   13938:	2807      	cmp	r0, #7
   1393a:	d900      	bls.n	1393e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
   1393c:	2007      	movs	r0, #7
   1393e:	f814 1f24 	ldrb.w	r1, [r4, #36]!
   13942:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
   13946:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
   1394a:	7021      	strb	r1, [r4, #0]
   1394c:	f106 0112 	add.w	r1, r6, #18
   13950:	68a8      	ldr	r0, [r5, #8]
   13952:	f007 fb9e 	bl	1b092 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
   13956:	7e71      	ldrb	r1, [r6, #25]
   13958:	68a8      	ldr	r0, [r5, #8]
   1395a:	f007 fba0 	bl	1b09e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
   1395e:	f000 fba7 	bl	140b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc08>
   13962:	68a8      	ldr	r0, [r5, #8]
   13964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13968:	f004 be16 	b.w	18598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   1396c:	20000108 	.word	0x20000108
   13970:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   13974:	4f65      	ldr	r7, [pc, #404]	; (13b0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x664>)
   13976:	4604      	mov	r4, r0
   13978:	6878      	ldr	r0, [r7, #4]
   1397a:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
   1397e:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
   13982:	b180      	cbz	r0, 139a6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
   13984:	2600      	movs	r6, #0
   13986:	2500      	movs	r5, #0
   13988:	7ca0      	ldrb	r0, [r4, #18]
   1398a:	68a1      	ldr	r1, [r4, #8]
   1398c:	f007 fdc1 	bl	1b512 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   13990:	4682      	mov	sl, r0
   13992:	f7ff fead 	bl	136f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
   13996:	b140      	cbz	r0, 139aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
   13998:	6878      	ldr	r0, [r7, #4]
   1399a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   1399e:	b121      	cbz	r1, 139aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
   139a0:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   139a4:	e004      	b.n	139b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
   139a6:	2601      	movs	r6, #1
   139a8:	e7ed      	b.n	13986 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
   139aa:	6878      	ldr	r0, [r7, #4]
   139ac:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
   139b0:	4683      	mov	fp, r0
   139b2:	f7fe fbfd 	bl	121b0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   139b6:	ea5f 0900 	movs.w	r9, r0
   139ba:	d00c      	beq.n	139d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
   139bc:	4658      	mov	r0, fp
   139be:	f7fe fbeb 	bl	12198 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
   139c2:	b100      	cbz	r0, 139c6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
   139c4:	2601      	movs	r6, #1
   139c6:	f1ba 0f00 	cmp.w	sl, #0
   139ca:	d004      	beq.n	139d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
   139cc:	4648      	mov	r0, r9
   139ce:	68a1      	ldr	r1, [r4, #8]
   139d0:	f006 ff5d 	bl	1a88e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
   139d4:	4605      	mov	r5, r0
   139d6:	6878      	ldr	r0, [r7, #4]
   139d8:	46b9      	mov	r9, r7
   139da:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
   139de:	b10d      	cbz	r5, 139e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
   139e0:	f047 0702 	orr.w	r7, r7, #2
   139e4:	f7ff fe84 	bl	136f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
   139e8:	b3a0      	cbz	r0, 13a54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
   139ea:	6860      	ldr	r0, [r4, #4]
   139ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
   139f0:	7802      	ldrb	r2, [r0, #0]
   139f2:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
   139f6:	429a      	cmp	r2, r3
   139f8:	d11f      	bne.n	13a3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
   139fa:	7842      	ldrb	r2, [r0, #1]
   139fc:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
   13a00:	429a      	cmp	r2, r3
   13a02:	d11a      	bne.n	13a3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
   13a04:	7882      	ldrb	r2, [r0, #2]
   13a06:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
   13a0a:	429a      	cmp	r2, r3
   13a0c:	d115      	bne.n	13a3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
   13a0e:	78c2      	ldrb	r2, [r0, #3]
   13a10:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   13a14:	429a      	cmp	r2, r3
   13a16:	d110      	bne.n	13a3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
   13a18:	7902      	ldrb	r2, [r0, #4]
   13a1a:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
   13a1e:	429a      	cmp	r2, r3
   13a20:	d10b      	bne.n	13a3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
   13a22:	7940      	ldrb	r0, [r0, #5]
   13a24:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
   13a28:	4290      	cmp	r0, r2
   13a2a:	d106      	bne.n	13a3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
   13a2c:	7c60      	ldrb	r0, [r4, #17]
   13a2e:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
   13a32:	4288      	cmp	r0, r1
   13a34:	d101      	bne.n	13a3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
   13a36:	2001      	movs	r0, #1
   13a38:	e000      	b.n	13a3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
   13a3a:	2000      	movs	r0, #0
   13a3c:	4f34      	ldr	r7, [pc, #208]	; (13b10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x668>)
   13a3e:	4682      	mov	sl, r0
   13a40:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
   13a44:	2808      	cmp	r0, #8
   13a46:	d006      	beq.n	13a56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
   13a48:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
   13a4c:	4288      	cmp	r0, r1
   13a4e:	d102      	bne.n	13a56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
   13a50:	2001      	movs	r0, #1
   13a52:	e001      	b.n	13a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
   13a54:	e021      	b.n	13a9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
   13a56:	2000      	movs	r0, #0
   13a58:	4681      	mov	r9, r0
   13a5a:	b925      	cbnz	r5, 13a66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
   13a5c:	b12e      	cbz	r6, 13a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
   13a5e:	4620      	mov	r0, r4
   13a60:	f7ff fe52 	bl	13708 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
   13a64:	b108      	cbz	r0, 13a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
   13a66:	2001      	movs	r0, #1
   13a68:	e000      	b.n	13a6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
   13a6a:	2000      	movs	r0, #0
   13a6c:	f1b8 0f00 	cmp.w	r8, #0
   13a70:	d009      	beq.n	13a86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
   13a72:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
   13a76:	2901      	cmp	r1, #1
   13a78:	d003      	beq.n	13a82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5da>
   13a7a:	b921      	cbnz	r1, 13a86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
   13a7c:	ea5a 0109 	orrs.w	r1, sl, r9
   13a80:	d001      	beq.n	13a86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
   13a82:	2101      	movs	r1, #1
   13a84:	e000      	b.n	13a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
   13a86:	2100      	movs	r1, #0
   13a88:	4208      	tst	r0, r1
   13a8a:	d003      	beq.n	13a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
   13a8c:	200c      	movs	r0, #12
   13a8e:	b004      	add	sp, #16
   13a90:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   13a94:	f004 fb1c 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   13a98:	e036      	b.n	13b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
   13a9a:	f004 fb19 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   13a9e:	f1b8 0f00 	cmp.w	r8, #0
   13aa2:	d031      	beq.n	13b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
   13aa4:	4620      	mov	r0, r4
   13aa6:	f7ff fe2f 	bl	13708 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
   13aaa:	b900      	cbnz	r0, 13aae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x606>
   13aac:	b175      	cbz	r5, 13acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x624>
   13aae:	a803      	add	r0, sp, #12
   13ab0:	f000 f980 	bl	13db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
   13ab4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   13ab8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   13abc:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
   13ac0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13ac4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
   13ac8:	463b      	mov	r3, r7
   13aca:	e018      	b.n	13afe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x656>
   13acc:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13ad0:	464d      	mov	r5, r9
   13ad2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   13ad6:	2803      	cmp	r0, #3
   13ad8:	d001      	beq.n	13ade <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x636>
   13ada:	2802      	cmp	r0, #2
   13adc:	d114      	bne.n	13b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
   13ade:	f1ba 0f00 	cmp.w	sl, #0
   13ae2:	d011      	beq.n	13b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
   13ae4:	a803      	add	r0, sp, #12
   13ae6:	f000 f965 	bl	13db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
   13aea:	686a      	ldr	r2, [r5, #4]
   13aec:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   13af0:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
   13af4:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13af8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
   13afc:	23fe      	movs	r3, #254	; 0xfe
   13afe:	2101      	movs	r1, #1
   13b00:	4620      	mov	r0, r4
   13b02:	3232      	adds	r2, #50	; 0x32
   13b04:	f000 fc46 	bl	14394 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
   13b08:	2005      	movs	r0, #5
   13b0a:	e7c0      	b.n	13a8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e6>
   13b0c:	20000108 	.word	0x20000108
   13b10:	2000148c 	.word	0x2000148c
   13b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13b16:	4c3f      	ldr	r4, [pc, #252]	; (13c14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x76c>)
   13b18:	4605      	mov	r5, r0
   13b1a:	6860      	ldr	r0, [r4, #4]
   13b1c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
   13b20:	2900      	cmp	r1, #0
   13b22:	d06c      	beq.n	13bfe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
   13b24:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   13b28:	2802      	cmp	r0, #2
   13b2a:	d02c      	beq.n	13b86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6de>
   13b2c:	2801      	cmp	r0, #1
   13b2e:	d043      	beq.n	13bb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x710>
   13b30:	f7ff fdde 	bl	136f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
   13b34:	2800      	cmp	r0, #0
   13b36:	d067      	beq.n	13c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x760>
   13b38:	686a      	ldr	r2, [r5, #4]
   13b3a:	6861      	ldr	r1, [r4, #4]
   13b3c:	7810      	ldrb	r0, [r2, #0]
   13b3e:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
   13b42:	4298      	cmp	r0, r3
   13b44:	d14c      	bne.n	13be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
   13b46:	7850      	ldrb	r0, [r2, #1]
   13b48:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
   13b4c:	4298      	cmp	r0, r3
   13b4e:	d147      	bne.n	13be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
   13b50:	7890      	ldrb	r0, [r2, #2]
   13b52:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
   13b56:	4298      	cmp	r0, r3
   13b58:	d142      	bne.n	13be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
   13b5a:	78d0      	ldrb	r0, [r2, #3]
   13b5c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   13b60:	4298      	cmp	r0, r3
   13b62:	d13d      	bne.n	13be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
   13b64:	7910      	ldrb	r0, [r2, #4]
   13b66:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
   13b6a:	4298      	cmp	r0, r3
   13b6c:	d138      	bne.n	13be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
   13b6e:	7950      	ldrb	r0, [r2, #5]
   13b70:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
   13b74:	4290      	cmp	r0, r2
   13b76:	d133      	bne.n	13be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
   13b78:	7c68      	ldrb	r0, [r5, #17]
   13b7a:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
   13b7e:	4290      	cmp	r0, r2
   13b80:	d12e      	bne.n	13be0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
   13b82:	2001      	movs	r0, #1
   13b84:	e02d      	b.n	13be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73a>
   13b86:	a803      	add	r0, sp, #12
   13b88:	f000 f914 	bl	13db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
   13b8c:	6862      	ldr	r2, [r4, #4]
   13b8e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   13b92:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
   13b96:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13b9a:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
   13b9e:	23ff      	movs	r3, #255	; 0xff
   13ba0:	2100      	movs	r1, #0
   13ba2:	4628      	mov	r0, r5
   13ba4:	3232      	adds	r2, #50	; 0x32
   13ba6:	f000 fbf5 	bl	14394 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
   13baa:	6861      	ldr	r1, [r4, #4]
   13bac:	2001      	movs	r0, #1
   13bae:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
   13bb2:	200b      	movs	r0, #11
   13bb4:	b004      	add	sp, #16
   13bb6:	bd70      	pop	{r4, r5, r6, pc}
   13bb8:	a803      	add	r0, sp, #12
   13bba:	f000 f8fb 	bl	13db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
   13bbe:	6862      	ldr	r2, [r4, #4]
   13bc0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   13bc4:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
   13bc8:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13bcc:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
   13bd0:	23ff      	movs	r3, #255	; 0xff
   13bd2:	2100      	movs	r1, #0
   13bd4:	4628      	mov	r0, r5
   13bd6:	3232      	adds	r2, #50	; 0x32
   13bd8:	f000 fbdc 	bl	14394 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
   13bdc:	2005      	movs	r0, #5
   13bde:	e7e9      	b.n	13bb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
   13be0:	2000      	movs	r0, #0
   13be2:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
   13be6:	2901      	cmp	r1, #1
   13be8:	d00c      	beq.n	13c04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
   13bea:	b958      	cbnz	r0, 13c04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
   13bec:	490a      	ldr	r1, [pc, #40]	; (13c18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x770>)
   13bee:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
   13bf2:	2808      	cmp	r0, #8
   13bf4:	d003      	beq.n	13bfe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
   13bf6:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
   13bfa:	4281      	cmp	r1, r0
   13bfc:	d002      	beq.n	13c04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
   13bfe:	f004 fa67 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   13c02:	e7eb      	b.n	13bdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>
   13c04:	200c      	movs	r0, #12
   13c06:	e7d5      	b.n	13bb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
   13c08:	f640 6158 	movw	r1, #3672	; 0xe58
   13c0c:	2032      	movs	r0, #50	; 0x32
   13c0e:	f7fc feaf 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13c12:	0000      	.short	0x0000
   13c14:	20000108 	.word	0x20000108
   13c18:	2000148c 	.word	0x2000148c
   13c1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13c1e:	4c1e      	ldr	r4, [pc, #120]	; (13c98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f0>)
   13c20:	4605      	mov	r5, r0
   13c22:	6860      	ldr	r0, [r4, #4]
   13c24:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
   13c28:	b129      	cbz	r1, 13c36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78e>
   13c2a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   13c2e:	2802      	cmp	r0, #2
   13c30:	d004      	beq.n	13c3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x794>
   13c32:	2801      	cmp	r0, #1
   13c34:	d01b      	beq.n	13c6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c6>
   13c36:	f004 fa4b 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   13c3a:	e02a      	b.n	13c92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7ea>
   13c3c:	a803      	add	r0, sp, #12
   13c3e:	f000 f8b9 	bl	13db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
   13c42:	6862      	ldr	r2, [r4, #4]
   13c44:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   13c48:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
   13c4c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13c50:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
   13c54:	23ff      	movs	r3, #255	; 0xff
   13c56:	2106      	movs	r1, #6
   13c58:	4628      	mov	r0, r5
   13c5a:	3232      	adds	r2, #50	; 0x32
   13c5c:	f000 fb9a 	bl	14394 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
   13c60:	6862      	ldr	r2, [r4, #4]
   13c62:	200b      	movs	r0, #11
   13c64:	2100      	movs	r1, #0
   13c66:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
   13c6a:	b004      	add	sp, #16
   13c6c:	bd70      	pop	{r4, r5, r6, pc}
   13c6e:	a803      	add	r0, sp, #12
   13c70:	f000 f8a0 	bl	13db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
   13c74:	6862      	ldr	r2, [r4, #4]
   13c76:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   13c7a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
   13c7e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13c82:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
   13c86:	23ff      	movs	r3, #255	; 0xff
   13c88:	2106      	movs	r1, #6
   13c8a:	4628      	mov	r0, r5
   13c8c:	3232      	adds	r2, #50	; 0x32
   13c8e:	f000 fb81 	bl	14394 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
   13c92:	2005      	movs	r0, #5
   13c94:	e7e9      	b.n	13c6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
   13c96:	0000      	.short	0x0000
   13c98:	20000108 	.word	0x20000108
   13c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13c9e:	b389      	cbz	r1, 13d04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85c>
   13ca0:	2901      	cmp	r1, #1
   13ca2:	d034      	beq.n	13d0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x866>
   13ca4:	2505      	movs	r5, #5
   13ca6:	2902      	cmp	r1, #2
   13ca8:	d004      	beq.n	13cb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x80c>
   13caa:	2906      	cmp	r1, #6
   13cac:	d025      	beq.n	13cfa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x852>
   13cae:	f004 fa0f 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   13cb2:	e01f      	b.n	13cf4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
   13cb4:	4606      	mov	r6, r0
   13cb6:	f004 fa0b 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   13cba:	4c17      	ldr	r4, [pc, #92]	; (13d18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x870>)
   13cbc:	6860      	ldr	r0, [r4, #4]
   13cbe:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
   13cc2:	b1b9      	cbz	r1, 13cf4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
   13cc4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   13cc8:	2801      	cmp	r0, #1
   13cca:	d001      	beq.n	13cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x828>
   13ccc:	2802      	cmp	r0, #2
   13cce:	d111      	bne.n	13cf4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
   13cd0:	a803      	add	r0, sp, #12
   13cd2:	f000 f86f 	bl	13db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
   13cd6:	6862      	ldr	r2, [r4, #4]
   13cd8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   13cdc:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
   13ce0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13ce4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
   13ce8:	23ff      	movs	r3, #255	; 0xff
   13cea:	2102      	movs	r1, #2
   13cec:	4630      	mov	r0, r6
   13cee:	3232      	adds	r2, #50	; 0x32
   13cf0:	f000 fb50 	bl	14394 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
   13cf4:	b004      	add	sp, #16
   13cf6:	4628      	mov	r0, r5
   13cf8:	bd70      	pop	{r4, r5, r6, pc}
   13cfa:	b004      	add	sp, #16
   13cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13d00:	f7ff bf8c 	b.w	13c1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x774>
   13d04:	b004      	add	sp, #16
   13d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13d0a:	f7ff bf03 	b.w	13b14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x66c>
   13d0e:	b004      	add	sp, #16
   13d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13d14:	f7ff be2c 	b.w	13970 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
   13d18:	20000108 	.word	0x20000108
   13d1c:	b570      	push	{r4, r5, r6, lr}
   13d1e:	4c11      	ldr	r4, [pc, #68]	; (13d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8bc>)
   13d20:	4605      	mov	r5, r0
   13d22:	6861      	ldr	r1, [r4, #4]
   13d24:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
   13d28:	2800      	cmp	r0, #0
   13d2a:	d019      	beq.n	13d60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
   13d2c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
   13d30:	2800      	cmp	r0, #0
   13d32:	d015      	beq.n	13d60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
   13d34:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
   13d38:	3132      	adds	r1, #50	; 0x32
   13d3a:	f007 fbea 	bl	1b512 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   13d3e:	b140      	cbz	r0, 13d52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8aa>
   13d40:	f7fe fa00 	bl	12144 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
   13d44:	6861      	ldr	r1, [r4, #4]
   13d46:	462a      	mov	r2, r5
   13d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13d4c:	3132      	adds	r1, #50	; 0x32
   13d4e:	f006 bd69 	b.w	1a824 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   13d52:	6860      	ldr	r0, [r4, #4]
   13d54:	4629      	mov	r1, r5
   13d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13d5a:	3032      	adds	r0, #50	; 0x32
   13d5c:	f006 bd51 	b.w	1a802 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
   13d60:	bd70      	pop	{r4, r5, r6, pc}
   13d62:	0000      	.short	0x0000
   13d64:	20000108 	.word	0x20000108
   13d68:	4602      	mov	r2, r0
   13d6a:	480b      	ldr	r0, [pc, #44]	; (13d98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f0>)
   13d6c:	b082      	sub	sp, #8
   13d6e:	6840      	ldr	r0, [r0, #4]
   13d70:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
   13d74:	f88d 1000 	strb.w	r1, [sp]
   13d78:	9900      	ldr	r1, [sp, #0]
   13d7a:	9100      	str	r1, [sp, #0]
   13d7c:	f89d 1000 	ldrb.w	r1, [sp]
   13d80:	2900      	cmp	r1, #0
   13d82:	d107      	bne.n	13d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>
   13d84:	6d41      	ldr	r1, [r0, #84]	; 0x54
   13d86:	2900      	cmp	r1, #0
   13d88:	d004      	beq.n	13d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>
   13d8a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
   13d8e:	b002      	add	sp, #8
   13d90:	f7fb ba76 	b.w	f280 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
   13d94:	b002      	add	sp, #8
   13d96:	4770      	bx	lr
   13d98:	20000108 	.word	0x20000108
   13d9c:	b510      	push	{r4, lr}
   13d9e:	4804      	ldr	r0, [pc, #16]	; (13db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
   13da0:	f004 fcac 	bl	186fc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   13da4:	2800      	cmp	r0, #0
   13da6:	d102      	bne.n	13dae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x906>
   13da8:	4901      	ldr	r1, [pc, #4]	; (13db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
   13daa:	207f      	movs	r0, #127	; 0x7f
   13dac:	7008      	strb	r0, [r1, #0]
   13dae:	bd10      	pop	{r4, pc}
   13db0:	20000108 	.word	0x20000108
   13db4:	4a07      	ldr	r2, [pc, #28]	; (13dd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>)
   13db6:	b510      	push	{r4, lr}
   13db8:	f992 1000 	ldrsb.w	r1, [r2]
   13dbc:	297f      	cmp	r1, #127	; 0x7f
   13dbe:	d003      	beq.n	13dc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x920>
   13dc0:	7001      	strb	r1, [r0, #0]
   13dc2:	207f      	movs	r0, #127	; 0x7f
   13dc4:	7010      	strb	r0, [r2, #0]
   13dc6:	bd10      	pop	{r4, pc}
   13dc8:	f240 319f 	movw	r1, #927	; 0x39f
   13dcc:	2032      	movs	r0, #50	; 0x32
   13dce:	f7fc fdcf 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13dd2:	0000      	.short	0x0000
   13dd4:	20000108 	.word	0x20000108
   13dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ddc:	4607      	mov	r7, r0
   13dde:	f7fd f9f3 	bl	111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   13de2:	4604      	mov	r4, r0
   13de4:	f7fd f9f6 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   13de8:	4621      	mov	r1, r4
   13dea:	f007 fbea 	bl	1b5c2 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
   13dee:	0005      	movs	r5, r0
   13df0:	d012      	beq.n	13e18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
   13df2:	4c2d      	ldr	r4, [pc, #180]	; (13ea8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa00>)
   13df4:	6860      	ldr	r0, [r4, #4]
   13df6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   13dfa:	2801      	cmp	r0, #1
   13dfc:	d004      	beq.n	13e08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
   13dfe:	2802      	cmp	r0, #2
   13e00:	d002      	beq.n	13e08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
   13e02:	f7ff fc75 	bl	136f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
   13e06:	b150      	cbz	r0, 13e1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x976>
   13e08:	f06f 0613 	mvn.w	r6, #19
   13e0c:	b33f      	cbz	r7, 13e5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b6>
   13e0e:	4628      	mov	r0, r5
   13e10:	f007 f8f5 	bl	1affe <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
   13e14:	b950      	cbnz	r0, 13e2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
   13e16:	e005      	b.n	13e24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x97c>
   13e18:	f241 4181 	movw	r1, #5249	; 0x1481
   13e1c:	e03a      	b.n	13e94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
   13e1e:	f241 4187 	movw	r1, #5255	; 0x1487
   13e22:	e037      	b.n	13e94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
   13e24:	4628      	mov	r0, r5
   13e26:	f007 f90c 	bl	1b042 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
   13e2a:	b1c0      	cbz	r0, 13e5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b6>
   13e2c:	6861      	ldr	r1, [r4, #4]
   13e2e:	4628      	mov	r0, r5
   13e30:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
   13e34:	2a05      	cmp	r2, #5
   13e36:	d202      	bcs.n	13e3e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x996>
   13e38:	f241 410b 	movw	r1, #5131	; 0x140b
   13e3c:	e02a      	b.n	13e94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
   13e3e:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
   13e42:	2a0b      	cmp	r2, #11
   13e44:	d302      	bcc.n	13e4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a4>
   13e46:	f241 410c 	movw	r1, #5132	; 0x140c
   13e4a:	e023      	b.n	13e94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
   13e4c:	68e2      	ldr	r2, [r4, #12]
   13e4e:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
   13e52:	6952      	ldr	r2, [r2, #20]
   13e54:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   13e58:	5851      	ldr	r1, [r2, r1]
   13e5a:	4788      	blx	r1
   13e5c:	e016      	b.n	13e8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e4>
   13e5e:	6860      	ldr	r0, [r4, #4]
   13e60:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
   13e64:	2905      	cmp	r1, #5
   13e66:	d202      	bcs.n	13e6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c6>
   13e68:	f241 4177 	movw	r1, #5239	; 0x1477
   13e6c:	e012      	b.n	13e94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
   13e6e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
   13e72:	290b      	cmp	r1, #11
   13e74:	d302      	bcc.n	13e7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
   13e76:	f241 4178 	movw	r1, #5240	; 0x1478
   13e7a:	e00b      	b.n	13e94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
   13e7c:	68e1      	ldr	r1, [r4, #12]
   13e7e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
   13e82:	6989      	ldr	r1, [r1, #24]
   13e84:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   13e88:	5808      	ldr	r0, [r1, r0]
   13e8a:	4780      	blx	r0
   13e8c:	280f      	cmp	r0, #15
   13e8e:	d304      	bcc.n	13e9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f2>
   13e90:	f241 419c 	movw	r1, #5276	; 0x149c
   13e94:	2032      	movs	r0, #50	; 0x32
   13e96:	f7fc fd6b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13e9a:	68e1      	ldr	r1, [r4, #12]
   13e9c:	6909      	ldr	r1, [r1, #16]
   13e9e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   13ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13ea6:	4700      	bx	r0
   13ea8:	20000108 	.word	0x20000108
   13eac:	b510      	push	{r4, lr}
   13eae:	b118      	cbz	r0, 13eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa10>
   13eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13eb4:	f000 b924 	b.w	14100 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
   13eb8:	2900      	cmp	r1, #0
   13eba:	d01d      	beq.n	13ef8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa50>
   13ebc:	480f      	ldr	r0, [pc, #60]	; (13efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa54>)
   13ebe:	6841      	ldr	r1, [r0, #4]
   13ec0:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
   13ec4:	2a0b      	cmp	r2, #11
   13ec6:	d202      	bcs.n	13ece <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa26>
   13ec8:	f241 5143 	movw	r1, #5443	; 0x1543
   13ecc:	e005      	b.n	13eda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa32>
   13ece:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
   13ed2:	2a0f      	cmp	r2, #15
   13ed4:	d304      	bcc.n	13ee0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa38>
   13ed6:	f241 5144 	movw	r1, #5444	; 0x1544
   13eda:	2032      	movs	r0, #50	; 0x32
   13edc:	f7fc fd48 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13ee0:	68c0      	ldr	r0, [r0, #12]
   13ee2:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
   13ee6:	6880      	ldr	r0, [r0, #8]
   13ee8:	f06f 022b 	mvn.w	r2, #43	; 0x2b
   13eec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   13ef0:	5840      	ldr	r0, [r0, r1]
   13ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ef6:	4700      	bx	r0
   13ef8:	bd10      	pop	{r4, pc}
   13efa:	0000      	.short	0x0000
   13efc:	20000108 	.word	0x20000108
   13f00:	b510      	push	{r4, lr}
   13f02:	f7ff faef 	bl	134e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
   13f06:	f000 f90b 	bl	14120 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
   13f0a:	4805      	ldr	r0, [pc, #20]	; (13f20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa78>)
   13f0c:	6881      	ldr	r1, [r0, #8]
   13f0e:	2000      	movs	r0, #0
   13f10:	f7ff fc3a 	bl	13788 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
   13f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13f18:	2003      	movs	r0, #3
   13f1a:	f000 bb79 	b.w	14610 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
   13f1e:	0000      	.short	0x0000
   13f20:	20000108 	.word	0x20000108
   13f24:	b510      	push	{r4, lr}
   13f26:	f7fd f94f 	bl	111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   13f2a:	4604      	mov	r4, r0
   13f2c:	f7fd f952 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   13f30:	4621      	mov	r1, r4
   13f32:	f007 fb46 	bl	1b5c2 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
   13f36:	b150      	cbz	r0, 13f4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa6>
   13f38:	f004 fb2e 	bl	18598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13f3c:	2000      	movs	r0, #0
   13f3e:	f004 f9df 	bl	18300 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   13f42:	4905      	ldr	r1, [pc, #20]	; (13f58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xab0>)
   13f44:	2006      	movs	r0, #6
   13f46:	6849      	ldr	r1, [r1, #4]
   13f48:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
   13f4c:	bd10      	pop	{r4, pc}
   13f4e:	f240 5184 	movw	r1, #1412	; 0x584
   13f52:	2032      	movs	r0, #50	; 0x32
   13f54:	f7fc fd0c 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13f58:	20000108 	.word	0x20000108
   13f5c:	490f      	ldr	r1, [pc, #60]	; (13f9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf4>)
   13f5e:	b510      	push	{r4, lr}
   13f60:	6848      	ldr	r0, [r1, #4]
   13f62:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   13f66:	2a06      	cmp	r2, #6
   13f68:	d202      	bcs.n	13f70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac8>
   13f6a:	f241 5171 	movw	r1, #5489	; 0x1571
   13f6e:	e005      	b.n	13f7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xad4>
   13f70:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   13f74:	2a0b      	cmp	r2, #11
   13f76:	d304      	bcc.n	13f82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xada>
   13f78:	f241 5172 	movw	r1, #5490	; 0x1572
   13f7c:	2032      	movs	r0, #50	; 0x32
   13f7e:	f7fc fcf7 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13f82:	68c9      	ldr	r1, [r1, #12]
   13f84:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
   13f88:	68c9      	ldr	r1, [r1, #12]
   13f8a:	f06f 0213 	mvn.w	r2, #19
   13f8e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   13f92:	5808      	ldr	r0, [r1, r0]
   13f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13f98:	4700      	bx	r0
   13f9a:	0000      	.short	0x0000
   13f9c:	20000108 	.word	0x20000108
   13fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fa4:	4c31      	ldr	r4, [pc, #196]	; (1406c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc4>)
   13fa6:	4605      	mov	r5, r0
   13fa8:	460e      	mov	r6, r1
   13faa:	6860      	ldr	r0, [r4, #4]
   13fac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
   13fb0:	b120      	cbz	r0, 13fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
   13fb2:	2801      	cmp	r0, #1
   13fb4:	d002      	beq.n	13fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
   13fb6:	200c      	movs	r0, #12
   13fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fbc:	f004 fa60 	bl	18480 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   13fc0:	f004 f86c 	bl	1809c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   13fc4:	f003 fe4e 	bl	17c64 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   13fc8:	f004 fcc8 	bl	1895c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
   13fcc:	4828      	ldr	r0, [pc, #160]	; (14070 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc8>)
   13fce:	f004 f98f 	bl	182f0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   13fd2:	4828      	ldr	r0, [pc, #160]	; (14074 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbcc>)
   13fd4:	f004 fbb8 	bl	18748 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   13fd8:	4827      	ldr	r0, [pc, #156]	; (14078 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd0>)
   13fda:	f004 fbab 	bl	18734 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   13fde:	4630      	mov	r0, r6
   13fe0:	f004 fada 	bl	18598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13fe4:	7968      	ldrb	r0, [r5, #5]
   13fe6:	b110      	cbz	r0, 13fee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb46>
   13fe8:	2001      	movs	r0, #1
   13fea:	f7ff febd 	bl	13d68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
   13fee:	7928      	ldrb	r0, [r5, #4]
   13ff0:	2803      	cmp	r0, #3
   13ff2:	d001      	beq.n	13ff8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb50>
   13ff4:	b118      	cbz	r0, 13ffe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb56>
   13ff6:	e018      	b.n	1402a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb82>
   13ff8:	f640 1188 	movw	r1, #2440	; 0x988
   13ffc:	e033      	b.n	14066 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbbe>
   13ffe:	6861      	ldr	r1, [r4, #4]
   14000:	2000      	movs	r0, #0
   14002:	2503      	movs	r5, #3
   14004:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   14008:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
   1400c:	1c52      	adds	r2, r2, #1
   1400e:	fbb2 f7f5 	udiv	r7, r2, r5
   14012:	fb05 2217 	mls	r2, r5, r7, r2
   14016:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
   1401a:	fa23 f202 	lsr.w	r2, r3, r2
   1401e:	07d2      	lsls	r2, r2, #31
   14020:	d103      	bne.n	1402a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb82>
   14022:	1c40      	adds	r0, r0, #1
   14024:	b2c0      	uxtb	r0, r0
   14026:	2803      	cmp	r0, #3
   14028:	d3ee      	bcc.n	14008 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb60>
   1402a:	6860      	ldr	r0, [r4, #4]
   1402c:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
   14030:	f004 faac 	bl	1858c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   14034:	4631      	mov	r1, r6
   14036:	2001      	movs	r0, #1
   14038:	f7ff fa66 	bl	13508 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
   1403c:	2800      	cmp	r0, #0
   1403e:	d0bb      	beq.n	13fb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb10>
   14040:	f000 f922 	bl	14288 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xde0>
   14044:	6860      	ldr	r0, [r4, #4]
   14046:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
   1404a:	b138      	cbz	r0, 1405c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbb4>
   1404c:	f7fe f87e 	bl	1214c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
   14050:	480a      	ldr	r0, [pc, #40]	; (1407c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd4>)
   14052:	6800      	ldr	r0, [r0, #0]
   14054:	2803      	cmp	r0, #3
   14056:	d004      	beq.n	14062 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbba>
   14058:	2000      	movs	r0, #0
   1405a:	e7ad      	b.n	13fb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb10>
   1405c:	f7fe fa6a 	bl	12534 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
   14060:	e7f6      	b.n	14050 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xba8>
   14062:	f640 119a 	movw	r1, #2458	; 0x99a
   14066:	2032      	movs	r0, #50	; 0x32
   14068:	f7fc fc82 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1406c:	20000108 	.word	0x20000108
   14070:	00014384 	.word	0x00014384
   14074:	0001cbab 	.word	0x0001cbab
   14078:	8e89bed6 	.word	0x8e89bed6
   1407c:	40001550 	.word	0x40001550
   14080:	b510      	push	{r4, lr}
   14082:	2000      	movs	r0, #0
   14084:	f7ff fe70 	bl	13d68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
   14088:	4808      	ldr	r0, [pc, #32]	; (140ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>)
   1408a:	6840      	ldr	r0, [r0, #4]
   1408c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
   14090:	b128      	cbz	r0, 1409e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf6>
   14092:	2801      	cmp	r0, #1
   14094:	d003      	beq.n	1409e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf6>
   14096:	2802      	cmp	r0, #2
   14098:	d004      	beq.n	140a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbfc>
   1409a:	200c      	movs	r0, #12
   1409c:	bd10      	pop	{r4, pc}
   1409e:	f000 f82f 	bl	14100 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
   140a2:	e001      	b.n	140a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc00>
   140a4:	f000 f844 	bl	14130 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc88>
   140a8:	2000      	movs	r0, #0
   140aa:	bd10      	pop	{r4, pc}
   140ac:	20000108 	.word	0x20000108
   140b0:	b570      	push	{r4, r5, r6, lr}
   140b2:	4c12      	ldr	r4, [pc, #72]	; (140fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>)
   140b4:	6860      	ldr	r0, [r4, #4]
   140b6:	f100 0532 	add.w	r5, r0, #50	; 0x32
   140ba:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
   140be:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
   140c2:	b188      	cbz	r0, 140e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc40>
   140c4:	f7ff fb14 	bl	136f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
   140c8:	b130      	cbz	r0, 140d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
   140ca:	6860      	ldr	r0, [r4, #4]
   140cc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   140d0:	b111      	cbz	r1, 140d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
   140d2:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   140d6:	e002      	b.n	140de <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc36>
   140d8:	6860      	ldr	r0, [r4, #4]
   140da:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
   140de:	f7fe f8db 	bl	12298 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
   140e2:	b108      	cbz	r0, 140e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc40>
   140e4:	2601      	movs	r6, #1
   140e6:	4605      	mov	r5, r0
   140e8:	4629      	mov	r1, r5
   140ea:	68a0      	ldr	r0, [r4, #8]
   140ec:	f006 ffde 	bl	1b0ac <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
   140f0:	4631      	mov	r1, r6
   140f2:	68a0      	ldr	r0, [r4, #8]
   140f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   140f8:	f006 bfde 	b.w	1b0b8 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
   140fc:	20000108 	.word	0x20000108
   14100:	b510      	push	{r4, lr}
   14102:	f7ff f9ef 	bl	134e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
   14106:	4905      	ldr	r1, [pc, #20]	; (1411c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc74>)
   14108:	2001      	movs	r0, #1
   1410a:	6849      	ldr	r1, [r1, #4]
   1410c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
   14110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14114:	2000      	movs	r0, #0
   14116:	f000 ba7b 	b.w	14610 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
   1411a:	0000      	.short	0x0000
   1411c:	20000108 	.word	0x20000108
   14120:	4902      	ldr	r1, [pc, #8]	; (1412c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc84>)
   14122:	2000      	movs	r0, #0
   14124:	6849      	ldr	r1, [r1, #4]
   14126:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
   1412a:	4770      	bx	lr
   1412c:	20000108 	.word	0x20000108
   14130:	b570      	push	{r4, r5, r6, lr}
   14132:	f7fd f849 	bl	111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   14136:	4604      	mov	r4, r0
   14138:	f7fd f84c 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   1413c:	4621      	mov	r1, r4
   1413e:	f007 fa40 	bl	1b5c2 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
   14142:	0004      	movs	r4, r0
   14144:	d020      	beq.n	14188 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce0>
   14146:	f007 fa8c 	bl	1b662 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
   1414a:	2000      	movs	r0, #0
   1414c:	f000 fa2a 	bl	145a4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
   14150:	b1f8      	cbz	r0, 14192 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcea>
   14152:	4d1e      	ldr	r5, [pc, #120]	; (141cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd24>)
   14154:	6868      	ldr	r0, [r5, #4]
   14156:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
   1415a:	2802      	cmp	r0, #2
   1415c:	d003      	beq.n	14166 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcbe>
   1415e:	4621      	mov	r1, r4
   14160:	2000      	movs	r0, #0
   14162:	f7ff f9d1 	bl	13508 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
   14166:	1ce0      	adds	r0, r4, #3
   14168:	f006 fbdb 	bl	1a922 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
   1416c:	6869      	ldr	r1, [r5, #4]
   1416e:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
   14172:	b128      	cbz	r0, 14180 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
   14174:	2440      	movs	r4, #64	; 0x40
   14176:	f003 fd95 	bl	17ca4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
   1417a:	4620      	mov	r0, r4
   1417c:	f003 ff9c 	bl	180b8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
   14180:	f7ff fab6 	bl	136f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
   14184:	b970      	cbnz	r0, 141a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcfc>
   14186:	e008      	b.n	1419a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcf2>
   14188:	f240 4177 	movw	r1, #1143	; 0x477
   1418c:	2032      	movs	r0, #50	; 0x32
   1418e:	f7fc fbef 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14196:	f7ff bfb3 	b.w	14100 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
   1419a:	6868      	ldr	r0, [r5, #4]
   1419c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   141a0:	2802      	cmp	r0, #2
   141a2:	d104      	bne.n	141ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd06>
   141a4:	2100      	movs	r1, #0
   141a6:	2201      	movs	r2, #1
   141a8:	4608      	mov	r0, r1
   141aa:	f004 fa81 	bl	186b0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   141ae:	6868      	ldr	r0, [r5, #4]
   141b0:	21ff      	movs	r1, #255	; 0xff
   141b2:	f800 1f64 	strb.w	r1, [r0, #100]!
   141b6:	7041      	strb	r1, [r0, #1]
   141b8:	2100      	movs	r1, #0
   141ba:	7201      	strb	r1, [r0, #8]
   141bc:	71c1      	strb	r1, [r0, #7]
   141be:	7241      	strb	r1, [r0, #9]
   141c0:	7601      	strb	r1, [r0, #24]
   141c2:	2105      	movs	r1, #5
   141c4:	f800 1c08 	strb.w	r1, [r0, #-8]
   141c8:	bd70      	pop	{r4, r5, r6, pc}
   141ca:	0000      	.short	0x0000
   141cc:	20000108 	.word	0x20000108
   141d0:	b570      	push	{r4, r5, r6, lr}
   141d2:	f7fc fff9 	bl	111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   141d6:	4604      	mov	r4, r0
   141d8:	f7fc fffc 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   141dc:	4621      	mov	r1, r4
   141de:	f007 f9f0 	bl	1b5c2 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
   141e2:	0005      	movs	r5, r0
   141e4:	d028      	beq.n	14238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd90>
   141e6:	4e19      	ldr	r6, [pc, #100]	; (1424c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda4>)
   141e8:	2004      	movs	r0, #4
   141ea:	6874      	ldr	r4, [r6, #4]
   141ec:	345c      	adds	r4, #92	; 0x5c
   141ee:	f000 f9d9 	bl	145a4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
   141f2:	b330      	cbz	r0, 14242 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd9a>
   141f4:	200c      	movs	r0, #12
   141f6:	7020      	strb	r0, [r4, #0]
   141f8:	2001      	movs	r0, #1
   141fa:	f000 fa09 	bl	14610 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
   141fe:	7828      	ldrb	r0, [r5, #0]
   14200:	6871      	ldr	r1, [r6, #4]
   14202:	f3c0 1040 	ubfx	r0, r0, #5, #1
   14206:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
   1420a:	2005      	movs	r0, #5
   1420c:	f7ff fb3a 	bl	13884 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
   14210:	4a0f      	ldr	r2, [pc, #60]	; (14250 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda8>)
   14212:	68b1      	ldr	r1, [r6, #8]
   14214:	2520      	movs	r5, #32
   14216:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   14218:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
   1421c:	7808      	ldrb	r0, [r1, #0]
   1421e:	ea05 1343 	and.w	r3, r5, r3, lsl #5
   14222:	f020 0020 	bic.w	r0, r0, #32
   14226:	4318      	orrs	r0, r3
   14228:	7008      	strb	r0, [r1, #0]
   1422a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   1422c:	7ea2      	ldrb	r2, [r4, #26]
   1422e:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
   14232:	4011      	ands	r1, r2
   14234:	7001      	strb	r1, [r0, #0]
   14236:	bd70      	pop	{r4, r5, r6, pc}
   14238:	f240 51ef 	movw	r1, #1519	; 0x5ef
   1423c:	2032      	movs	r0, #50	; 0x32
   1423e:	f7fc fb97 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14246:	f7ff bf5b 	b.w	14100 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
   1424a:	0000      	.short	0x0000
   1424c:	20000108 	.word	0x20000108
   14250:	2000148c 	.word	0x2000148c
   14254:	b510      	push	{r4, lr}
   14256:	2003      	movs	r0, #3
   14258:	f000 f9a4 	bl	145a4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
   1425c:	b168      	cbz	r0, 1427a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdd2>
   1425e:	2003      	movs	r0, #3
   14260:	f7ff fb10 	bl	13884 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
   14264:	2201      	movs	r2, #1
   14266:	4611      	mov	r1, r2
   14268:	2000      	movs	r0, #0
   1426a:	f004 fa21 	bl	186b0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   1426e:	4905      	ldr	r1, [pc, #20]	; (14284 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xddc>)
   14270:	200b      	movs	r0, #11
   14272:	6849      	ldr	r1, [r1, #4]
   14274:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
   14278:	bd10      	pop	{r4, pc}
   1427a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1427e:	f7ff bf3f 	b.w	14100 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
   14282:	0000      	.short	0x0000
   14284:	20000108 	.word	0x20000108
   14288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1428c:	4c1d      	ldr	r4, [pc, #116]	; (14304 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe5c>)
   1428e:	2600      	movs	r6, #0
   14290:	6860      	ldr	r0, [r4, #4]
   14292:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
   14296:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
   1429a:	b911      	cbnz	r1, 142a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdfa>
   1429c:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
   142a0:	b350      	cbz	r0, 142f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe50>
   142a2:	f005 f80f 	bl	192c4 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   142a6:	4680      	mov	r8, r0
   142a8:	6860      	ldr	r0, [r4, #4]
   142aa:	4641      	mov	r1, r8
   142ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
   142ae:	f7f9 ff6f 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   142b2:	4f15      	ldr	r7, [pc, #84]	; (14308 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe60>)
   142b4:	4605      	mov	r5, r0
   142b6:	fb90 f0f7 	sdiv	r0, r0, r7
   142ba:	fb07 5010 	mls	r0, r7, r0, r5
   142be:	4241      	negs	r1, r0
   142c0:	4640      	mov	r0, r8
   142c2:	f7f9 ff33 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   142c6:	6861      	ldr	r1, [r4, #4]
   142c8:	6448      	str	r0, [r1, #68]	; 0x44
   142ca:	fb95 f0f7 	sdiv	r0, r5, r7
   142ce:	6f8a      	ldr	r2, [r1, #120]	; 0x78
   142d0:	4410      	add	r0, r2
   142d2:	6788      	str	r0, [r1, #120]	; 0x78
   142d4:	f7fe f89c 	bl	12410 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   142d8:	6861      	ldr	r1, [r4, #4]
   142da:	6f8a      	ldr	r2, [r1, #120]	; 0x78
   142dc:	4290      	cmp	r0, r2
   142de:	d80b      	bhi.n	142f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe50>
   142e0:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
   142e4:	678e      	str	r6, [r1, #120]	; 0x78
   142e6:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
   142ea:	b110      	cbz	r0, 142f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe4a>
   142ec:	2001      	movs	r0, #1
   142ee:	f7fd ff79 	bl	121e4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
   142f2:	2001      	movs	r0, #1
   142f4:	f7ff fd12 	bl	13d1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x874>
   142f8:	6861      	ldr	r1, [r4, #4]
   142fa:	2002      	movs	r0, #2
   142fc:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
   14300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14304:	20000108 	.word	0x20000108
   14308:	000f4240 	.word	0x000f4240
   1430c:	00014121 	.word	0x00014121
   14310:	00014101 	.word	0x00014101
   14314:	0001b5a3 	.word	0x0001b5a3
   14318:	0001b5a3 	.word	0x0001b5a3
   1431c:	0001b5a3 	.word	0x0001b5a3
   14320:	00014131 	.word	0x00014131
   14324:	0001b5a3 	.word	0x0001b5a3
   14328:	0001b5a3 	.word	0x0001b5a3
   1432c:	0001b5a3 	.word	0x0001b5a3
   14330:	0001b5a3 	.word	0x0001b5a3
   14334:	0001b5a3 	.word	0x0001b5a3
   14338:	00014255 	.word	0x00014255
   1433c:	000141d1 	.word	0x000141d1
   14340:	0001b5a3 	.word	0x0001b5a3
   14344:	0001b5a3 	.word	0x0001b5a3
   14348:	00013f25 	.word	0x00013f25
   1434c:	00013f01 	.word	0x00013f01
   14350:	00000000 	.word	0x00000000
   14354:	0001b5ad 	.word	0x0001b5ad
   14358:	0001b54b 	.word	0x0001b54b
   1435c:	0001b55d 	.word	0x0001b55d
   14360:	0001b56b 	.word	0x0001b56b
   14364:	0001369d 	.word	0x0001369d
   14368:	00013fa1 	.word	0x00013fa1
   1436c:	00014081 	.word	0x00014081
   14370:	00014348 	.word	0x00014348
   14374:	00014350 	.word	0x00014350
   14378:	0001430c 	.word	0x0001430c
   1437c:	00014360 	.word	0x00014360
   14380:	00014358 	.word	0x00014358
   14384:	00013f5d 	.word	0x00013f5d
   14388:	00013dd9 	.word	0x00013dd9
   1438c:	00013ead 	.word	0x00013ead
   14390:	0001b5bf 	.word	0x0001b5bf

00014394 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
   14394:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   14398:	461d      	mov	r5, r3
   1439a:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
   1439e:	4616      	mov	r6, r2
   143a0:	4688      	mov	r8, r1
   143a2:	4681      	mov	r9, r0
   143a4:	f7fc ff16 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   143a8:	4604      	mov	r4, r0
   143aa:	f005 ff7e 	bl	1a2aa <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
   143ae:	2801      	cmp	r0, #1
   143b0:	d063      	beq.n	1447a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
   143b2:	4620      	mov	r0, r4
   143b4:	f007 f9ce 	bl	1b754 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
   143b8:	4604      	mov	r4, r0
   143ba:	221c      	movs	r2, #28
   143bc:	2100      	movs	r1, #0
   143be:	f005 f970 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   143c2:	2701      	movs	r7, #1
   143c4:	7027      	strb	r7, [r4, #0]
   143c6:	ea5f 0008 	movs.w	r0, r8
   143ca:	d009      	beq.n	143e0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
   143cc:	2801      	cmp	r0, #1
   143ce:	d00b      	beq.n	143e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
   143d0:	2802      	cmp	r0, #2
   143d2:	d02d      	beq.n	14430 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
   143d4:	f1b8 0f06 	cmp.w	r8, #6
   143d8:	d02c      	beq.n	14434 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
   143da:	f240 217d 	movw	r1, #637	; 0x27d
   143de:	e049      	b.n	14474 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
   143e0:	7aa0      	ldrb	r0, [r4, #10]
   143e2:	f040 0001 	orr.w	r0, r0, #1
   143e6:	e026      	b.n	14436 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
   143e8:	7aa0      	ldrb	r0, [r4, #10]
   143ea:	f040 0005 	orr.w	r0, r0, #5
   143ee:	bf00      	nop
   143f0:	f040 0010 	orr.w	r0, r0, #16
   143f4:	72a0      	strb	r0, [r4, #10]
   143f6:	1c63      	adds	r3, r4, #1
   143f8:	1ca2      	adds	r2, r4, #2
   143fa:	4648      	mov	r0, r9
   143fc:	990a      	ldr	r1, [sp, #40]	; 0x28
   143fe:	f007 f98e 	bl	1b71e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
   14402:	f884 a009 	strb.w	sl, [r4, #9]
   14406:	7327      	strb	r7, [r4, #12]
   14408:	2000      	movs	r0, #0
   1440a:	7360      	strb	r0, [r4, #13]
   1440c:	20ff      	movs	r0, #255	; 0xff
   1440e:	73a0      	strb	r0, [r4, #14]
   14410:	7aa1      	ldrb	r1, [r4, #10]
   14412:	0749      	lsls	r1, r1, #29
   14414:	d518      	bpl.n	14448 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
   14416:	f104 0014 	add.w	r0, r4, #20
   1441a:	1e41      	subs	r1, r0, #1
   1441c:	2d02      	cmp	r5, #2
   1441e:	d00d      	beq.n	1443c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
   14420:	2d03      	cmp	r5, #3
   14422:	d00b      	beq.n	1443c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
   14424:	f8d9 2008 	ldr.w	r2, [r9, #8]
   14428:	6813      	ldr	r3, [r2, #0]
   1442a:	6003      	str	r3, [r0, #0]
   1442c:	8892      	ldrh	r2, [r2, #4]
   1442e:	e008      	b.n	14442 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
   14430:	7aa0      	ldrb	r0, [r4, #10]
   14432:	e7dd      	b.n	143f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
   14434:	7aa0      	ldrb	r0, [r4, #10]
   14436:	f040 0002 	orr.w	r0, r0, #2
   1443a:	e7d9      	b.n	143f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
   1443c:	6832      	ldr	r2, [r6, #0]
   1443e:	6002      	str	r2, [r0, #0]
   14440:	88b2      	ldrh	r2, [r6, #4]
   14442:	8082      	strh	r2, [r0, #4]
   14444:	700d      	strb	r5, [r1, #0]
   14446:	e000      	b.n	1444a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
   14448:	74e0      	strb	r0, [r4, #19]
   1444a:	207f      	movs	r0, #127	; 0x7f
   1444c:	76a0      	strb	r0, [r4, #26]
   1444e:	f884 b01b 	strb.w	fp, [r4, #27]
   14452:	f7fc feb9 	bl	111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   14456:	4604      	mov	r4, r0
   14458:	f7fc febc 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   1445c:	2201      	movs	r2, #1
   1445e:	4621      	mov	r1, r4
   14460:	f007 f981 	bl	1b766 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
   14464:	b120      	cbz	r0, 14470 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
   14466:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   1446a:	2005      	movs	r0, #5
   1446c:	f000 b8d0 	b.w	14610 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
   14470:	f240 219d 	movw	r1, #669	; 0x29d
   14474:	2033      	movs	r0, #51	; 0x33
   14476:	f7fc fa7b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1447a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

00014480 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
   14480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14484:	4616      	mov	r6, r2
   14486:	460c      	mov	r4, r1
   14488:	4605      	mov	r5, r0
   1448a:	f006 fdd6 	bl	1b03a <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
   1448e:	7460      	strb	r0, [r4, #17]
   14490:	4628      	mov	r0, r5
   14492:	f006 fdc9 	bl	1b028 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
   14496:	74a0      	strb	r0, [r4, #18]
   14498:	1cea      	adds	r2, r5, #3
   1449a:	4b14      	ldr	r3, [pc, #80]	; (144ec <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
   1449c:	1d90      	adds	r0, r2, #6
   1449e:	2100      	movs	r1, #0
   144a0:	2e07      	cmp	r6, #7
   144a2:	d21f      	bcs.n	144e4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
   144a4:	e8df f006 	tbb	[pc, r6]
   144a8:	1e110b04 	.word	0x1e110b04
   144ac:	00041e13 	.word	0x00041e13
   144b0:	781b      	ldrb	r3, [r3, #0]
   144b2:	e00d      	b.n	144d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
   144b4:	60e0      	str	r0, [r4, #12]
   144b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144ba:	60e1      	str	r1, [r4, #12]
   144bc:	e7fb      	b.n	144b6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
   144be:	785b      	ldrb	r3, [r3, #1]
   144c0:	7063      	strb	r3, [r4, #1]
   144c2:	e9c4 2001 	strd	r2, r0, [r4, #4]
   144c6:	7421      	strb	r1, [r4, #16]
   144c8:	e7f7      	b.n	144ba <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
   144ca:	789b      	ldrb	r3, [r3, #2]
   144cc:	e000      	b.n	144d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
   144ce:	78db      	ldrb	r3, [r3, #3]
   144d0:	7063      	strb	r3, [r4, #1]
   144d2:	e9c4 2101 	strd	r2, r1, [r4, #4]
   144d6:	786a      	ldrb	r2, [r5, #1]
   144d8:	1f92      	subs	r2, r2, #6
   144da:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   144de:	7422      	strb	r2, [r4, #16]
   144e0:	d0eb      	beq.n	144ba <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
   144e2:	e7e7      	b.n	144b4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
   144e4:	7061      	strb	r1, [r4, #1]
   144e6:	6061      	str	r1, [r4, #4]
   144e8:	60a1      	str	r1, [r4, #8]
   144ea:	e7ec      	b.n	144c6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
   144ec:	0001cbb1 	.word	0x0001cbb1

000144f0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
   144f0:	b570      	push	{r4, r5, r6, lr}
   144f2:	f003 ff5d 	bl	183b0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   144f6:	4c0e      	ldr	r4, [pc, #56]	; (14530 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
   144f8:	4606      	mov	r6, r0
   144fa:	7860      	ldrb	r0, [r4, #1]
   144fc:	b170      	cbz	r0, 1451c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
   144fe:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
   14502:	4632      	mov	r2, r6
   14504:	4628      	mov	r0, r5
   14506:	f006 fa90 	bl	1aa2a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
   1450a:	6060      	str	r0, [r4, #4]
   1450c:	42a8      	cmp	r0, r5
   1450e:	d005      	beq.n	1451c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
   14510:	68e1      	ldr	r1, [r4, #12]
   14512:	1b40      	subs	r0, r0, r5
   14514:	4408      	add	r0, r1
   14516:	60e0      	str	r0, [r4, #12]
   14518:	f7fa fdfc 	bl	f114 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   1451c:	6860      	ldr	r0, [r4, #4]
   1451e:	42b0      	cmp	r0, r6
   14520:	d301      	bcc.n	14526 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
   14522:	7820      	ldrb	r0, [r4, #0]
   14524:	b108      	cbz	r0, 1452a <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
   14526:	2000      	movs	r0, #0
   14528:	bd70      	pop	{r4, r5, r6, pc}
   1452a:	2001      	movs	r0, #1
   1452c:	bd70      	pop	{r4, r5, r6, pc}
   1452e:	0000      	.short	0x0000
   14530:	20001510 	.word	0x20001510

00014534 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
   14534:	b510      	push	{r4, lr}
   14536:	2905      	cmp	r1, #5
   14538:	d22d      	bcs.n	14596 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
   1453a:	e8df f001 	tbb	[pc, r1]
   1453e:	0a05      	.short	0x0a05
   14540:	00280e03 	.word	0x00280e03
   14544:	2100      	movs	r1, #0
   14546:	e000      	b.n	1454a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
   14548:	2101      	movs	r1, #1
   1454a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1454e:	f000 babb 	b.w	14ac8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
   14552:	2103      	movs	r1, #3
   14554:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
   14558:	bd10      	pop	{r4, pc}
   1455a:	4911      	ldr	r1, [pc, #68]	; (145a0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
   1455c:	4604      	mov	r4, r0
   1455e:	68c0      	ldr	r0, [r0, #12]
   14560:	6008      	str	r0, [r1, #0]
   14562:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
   14566:	6220      	str	r0, [r4, #32]
   14568:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
   1456c:	83a0      	strh	r0, [r4, #28]
   1456e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   14572:	60e0      	str	r0, [r4, #12]
   14574:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
   14578:	82a0      	strh	r0, [r4, #20]
   1457a:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
   1457e:	82e0      	strh	r0, [r4, #22]
   14580:	4620      	mov	r0, r4
   14582:	f007 f92a 	bl	1b7da <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
   14586:	2002      	movs	r0, #2
   14588:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
   1458c:	bd10      	pop	{r4, pc}
   1458e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14592:	f007 b922 	b.w	1b7da <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
   14596:	f640 3158 	movw	r1, #2904	; 0xb58
   1459a:	2035      	movs	r0, #53	; 0x35
   1459c:	f7fc f9e8 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   145a0:	20000118 	.word	0x20000118

000145a4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
   145a4:	b570      	push	{r4, r5, r6, lr}
   145a6:	4606      	mov	r6, r0
   145a8:	f004 fe8c 	bl	192c4 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   145ac:	4c17      	ldr	r4, [pc, #92]	; (1460c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
   145ae:	4601      	mov	r1, r0
   145b0:	6920      	ldr	r0, [r4, #16]
   145b2:	f7f9 fded 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   145b6:	4605      	mov	r5, r0
   145b8:	b156      	cbz	r6, 145d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
   145ba:	2e03      	cmp	r6, #3
   145bc:	d00d      	beq.n	145da <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
   145be:	2e04      	cmp	r6, #4
   145c0:	d00e      	beq.n	145e0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
   145c2:	2e06      	cmp	r6, #6
   145c4:	d01d      	beq.n	14602 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
   145c6:	f44f 61b2 	mov.w	r1, #1424	; 0x590
   145ca:	2035      	movs	r0, #53	; 0x35
   145cc:	f7fc f9d0 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   145d0:	2001      	movs	r0, #1
   145d2:	f007 f8e6 	bl	1b7a2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
   145d6:	3098      	adds	r0, #152	; 0x98
   145d8:	e004      	b.n	145e4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
   145da:	f44f 7057 	mov.w	r0, #860	; 0x35c
   145de:	e001      	b.n	145e4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
   145e0:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
   145e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   145e6:	4405      	add	r5, r0
   145e8:	39f1      	subs	r1, #241	; 0xf1
   145ea:	428d      	cmp	r5, r1
   145ec:	d307      	bcc.n	145fe <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
   145ee:	2600      	movs	r6, #0
   145f0:	f000 fd36 	bl	15060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a4>
   145f4:	b140      	cbz	r0, 14608 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
   145f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   145f8:	38f1      	subs	r0, #241	; 0xf1
   145fa:	4285      	cmp	r5, r0
   145fc:	d203      	bcs.n	14606 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
   145fe:	2601      	movs	r6, #1
   14600:	e002      	b.n	14608 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
   14602:	2001      	movs	r0, #1
   14604:	bd70      	pop	{r4, r5, r6, pc}
   14606:	2600      	movs	r6, #0
   14608:	4630      	mov	r0, r6
   1460a:	bd70      	pop	{r4, r5, r6, pc}
   1460c:	20001520 	.word	0x20001520

00014610 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
   14610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14612:	2501      	movs	r5, #1
   14614:	4c24      	ldr	r4, [pc, #144]	; (146a8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
   14616:	2806      	cmp	r0, #6
   14618:	d243      	bcs.n	146a2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
   1461a:	e8df f000 	tbb	[pc, r0]
   1461e:	1903      	.short	0x1903
   14620:	3e232319 	.word	0x3e232319
   14624:	f7fe fae4 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   14628:	7860      	ldrb	r0, [r4, #1]
   1462a:	bb88      	cbnz	r0, 14690 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
   1462c:	2200      	movs	r2, #0
   1462e:	4611      	mov	r1, r2
   14630:	4668      	mov	r0, sp
   14632:	f000 fd5f 	bl	150f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
   14636:	b148      	cbz	r0, 1464c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
   14638:	f7fe fd32 	bl	130a0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
   1463c:	7800      	ldrb	r0, [r0, #0]
   1463e:	4669      	mov	r1, sp
   14640:	f007 f8dd 	bl	1b7fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
   14644:	bb20      	cbnz	r0, 14690 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
   14646:	f640 2163 	movw	r1, #2659	; 0xa63
   1464a:	e01c      	b.n	14686 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
   1464c:	70e5      	strb	r5, [r4, #3]
   1464e:	e020      	b.n	14692 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
   14650:	2802      	cmp	r0, #2
   14652:	d005      	beq.n	14660 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
   14654:	2000      	movs	r0, #0
   14656:	b004      	add	sp, #16
   14658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1465c:	f000 ba50 	b.w	14b00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x244>
   14660:	2001      	movs	r0, #1
   14662:	e7f8      	b.n	14656 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
   14664:	2804      	cmp	r0, #4
   14666:	d011      	beq.n	1468c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
   14668:	f05f 0600 	movs.w	r6, #0
   1466c:	f7fe fac0 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   14670:	7725      	strb	r5, [r4, #28]
   14672:	7766      	strb	r6, [r4, #29]
   14674:	69a1      	ldr	r1, [r4, #24]
   14676:	2000      	movs	r0, #0
   14678:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
   1467c:	f000 faca 	bl	14c14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
   14680:	b130      	cbz	r0, 14690 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
   14682:	f640 3118 	movw	r1, #2840	; 0xb18
   14686:	2035      	movs	r0, #53	; 0x35
   14688:	f7fc f972 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1468c:	2601      	movs	r6, #1
   1468e:	e7ed      	b.n	1466c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
   14690:	e7ff      	b.n	14692 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
   14692:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
   14696:	f000 baad 	b.w	14bf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
   1469a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
   1469e:	f7fe baa7 	b.w	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   146a2:	f640 31d4 	movw	r1, #3028	; 0xbd4
   146a6:	e7ee      	b.n	14686 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
   146a8:	20001520 	.word	0x20001520

000146ac <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
   146ac:	b508      	push	{r3, lr}
   146ae:	2244      	movs	r2, #68	; 0x44
   146b0:	2100      	movs	r1, #0
   146b2:	480c      	ldr	r0, [pc, #48]	; (146e4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
   146b4:	f004 fff5 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   146b8:	f7fe fcf2 	bl	130a0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
   146bc:	2120      	movs	r1, #32
   146be:	7001      	strb	r1, [r0, #0]
   146c0:	4808      	ldr	r0, [pc, #32]	; (146e4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
   146c2:	3810      	subs	r0, #16
   146c4:	2100      	movs	r1, #0
   146c6:	6001      	str	r1, [r0, #0]
   146c8:	6041      	str	r1, [r0, #4]
   146ca:	6081      	str	r1, [r0, #8]
   146cc:	60c1      	str	r1, [r0, #12]
   146ce:	f000 f80b 	bl	146e8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   146d2:	f242 7010 	movw	r0, #10000	; 0x2710
   146d6:	9000      	str	r0, [sp, #0]
   146d8:	2201      	movs	r2, #1
   146da:	4669      	mov	r1, sp
   146dc:	1080      	asrs	r0, r0, #2
   146de:	f000 fad7 	bl	14c90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d4>
   146e2:	bd08      	pop	{r3, pc}
   146e4:	20001520 	.word	0x20001520

000146e8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
   146e8:	4804      	ldr	r0, [pc, #16]	; (146fc <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
   146ea:	b510      	push	{r4, lr}
   146ec:	7800      	ldrb	r0, [r0, #0]
   146ee:	b108      	cbz	r0, 146f4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
   146f0:	f000 f8a8 	bl	14844 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   146f4:	f000 f8fe 	bl	148f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
   146f8:	2000      	movs	r0, #0
   146fa:	bd10      	pop	{r4, pc}
   146fc:	20001520 	.word	0x20001520

00014700 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
   14700:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14704:	4c1e      	ldr	r4, [pc, #120]	; (14780 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
   14706:	4607      	mov	r7, r0
   14708:	460e      	mov	r6, r1
   1470a:	7820      	ldrb	r0, [r4, #0]
   1470c:	b118      	cbz	r0, 14716 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x16>
   1470e:	200c      	movs	r0, #12
   14710:	b004      	add	sp, #16
   14712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14716:	f7fe fcc3 	bl	130a0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
   1471a:	4605      	mov	r5, r0
   1471c:	61a7      	str	r7, [r4, #24]
   1471e:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
   14722:	b110      	cbz	r0, 1472a <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x2a>
   14724:	f44f 6184 	mov.w	r1, #1056	; 0x420
   14728:	e026      	b.n	14778 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
   1472a:	2005      	movs	r0, #5
   1472c:	7020      	strb	r0, [r4, #0]
   1472e:	2000      	movs	r0, #0
   14730:	7060      	strb	r0, [r4, #1]
   14732:	7720      	strb	r0, [r4, #28]
   14734:	4630      	mov	r0, r6
   14736:	f000 f911 	bl	1495c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
   1473a:	f000 fc41 	bl	14fc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x704>
   1473e:	6320      	str	r0, [r4, #48]	; 0x30
   14740:	2100      	movs	r1, #0
   14742:	4810      	ldr	r0, [pc, #64]	; (14784 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x84>)
   14744:	f7fa fbdc 	bl	ef00 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   14748:	7028      	strb	r0, [r5, #0]
   1474a:	2820      	cmp	r0, #32
   1474c:	d00c      	beq.n	14768 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x68>
   1474e:	2200      	movs	r2, #0
   14750:	2101      	movs	r1, #1
   14752:	4668      	mov	r0, sp
   14754:	f000 fcce 	bl	150f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
   14758:	b148      	cbz	r0, 1476e <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6e>
   1475a:	7828      	ldrb	r0, [r5, #0]
   1475c:	4669      	mov	r1, sp
   1475e:	f007 f84e 	bl	1b7fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
   14762:	b138      	cbz	r0, 14774 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
   14764:	2000      	movs	r0, #0
   14766:	e7d3      	b.n	14710 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
   14768:	f240 412f 	movw	r1, #1071	; 0x42f
   1476c:	e004      	b.n	14778 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
   1476e:	f240 4132 	movw	r1, #1074	; 0x432
   14772:	e001      	b.n	14778 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
   14774:	f240 4133 	movw	r1, #1075	; 0x433
   14778:	2035      	movs	r0, #53	; 0x35
   1477a:	f7fc f8f9 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1477e:	0000      	.short	0x0000
   14780:	20001520 	.word	0x20001520
   14784:	0001497d 	.word	0x0001497d

00014788 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
   14788:	4902      	ldr	r1, [pc, #8]	; (14794 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
   1478a:	6989      	ldr	r1, [r1, #24]
   1478c:	6001      	str	r1, [r0, #0]
   1478e:	f000 b859 	b.w	14844 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   14792:	0000      	.short	0x0000
   14794:	20001520 	.word	0x20001520

00014798 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
   14798:	4901      	ldr	r1, [pc, #4]	; (147a0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
   1479a:	7048      	strb	r0, [r1, #1]
   1479c:	4770      	bx	lr
   1479e:	0000      	.short	0x0000
   147a0:	20001510 	.word	0x20001510

000147a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
   147a4:	b570      	push	{r4, r5, r6, lr}
   147a6:	4605      	mov	r5, r0
   147a8:	4907      	ldr	r1, [pc, #28]	; (147c8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
   147aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   147ae:	fbb1 f4f0 	udiv	r4, r1, r0
   147b2:	f007 f874 	bl	1b89e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
   147b6:	1901      	adds	r1, r0, r4
   147b8:	4628      	mov	r0, r5
   147ba:	f201 1137 	addw	r1, r1, #311	; 0x137
   147be:	f006 fdf2 	bl	1b3a6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
   147c2:	b280      	uxth	r0, r0
   147c4:	bd70      	pop	{r4, r5, r6, pc}
   147c6:	0000      	.short	0x0000
   147c8:	00012105 	.word	0x00012105

000147cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
   147cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   147ce:	4606      	mov	r6, r0
   147d0:	b111      	cbz	r1, 147d8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
   147d2:	2011      	movs	r0, #17
   147d4:	b004      	add	sp, #16
   147d6:	bd70      	pop	{r4, r5, r6, pc}
   147d8:	4c18      	ldr	r4, [pc, #96]	; (1483c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
   147da:	7820      	ldrb	r0, [r4, #0]
   147dc:	b108      	cbz	r0, 147e2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
   147de:	200c      	movs	r0, #12
   147e0:	e7f8      	b.n	147d4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
   147e2:	f7fe fc5d 	bl	130a0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
   147e6:	4605      	mov	r5, r0
   147e8:	2000      	movs	r0, #0
   147ea:	7060      	strb	r0, [r4, #1]
   147ec:	2004      	movs	r0, #4
   147ee:	7020      	strb	r0, [r4, #0]
   147f0:	4630      	mov	r0, r6
   147f2:	f000 f8b3 	bl	1495c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
   147f6:	f000 fbe3 	bl	14fc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x704>
   147fa:	6320      	str	r0, [r4, #48]	; 0x30
   147fc:	2100      	movs	r1, #0
   147fe:	4810      	ldr	r0, [pc, #64]	; (14840 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
   14800:	f7fa fb7e 	bl	ef00 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   14804:	7028      	strb	r0, [r5, #0]
   14806:	2820      	cmp	r0, #32
   14808:	d00c      	beq.n	14824 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
   1480a:	2200      	movs	r2, #0
   1480c:	2101      	movs	r1, #1
   1480e:	4668      	mov	r0, sp
   14810:	f000 fc70 	bl	150f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
   14814:	b148      	cbz	r0, 1482a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
   14816:	7828      	ldrb	r0, [r5, #0]
   14818:	4669      	mov	r1, sp
   1481a:	f006 fff0 	bl	1b7fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
   1481e:	b138      	cbz	r0, 14830 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
   14820:	2000      	movs	r0, #0
   14822:	e7d7      	b.n	147d4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
   14824:	f240 4196 	movw	r1, #1174	; 0x496
   14828:	e004      	b.n	14834 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
   1482a:	f44f 6193 	mov.w	r1, #1176	; 0x498
   1482e:	e001      	b.n	14834 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
   14830:	f240 4199 	movw	r1, #1177	; 0x499
   14834:	2035      	movs	r0, #53	; 0x35
   14836:	f7fc f89b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1483a:	0000      	.short	0x0000
   1483c:	20001520 	.word	0x20001520
   14840:	0001497d 	.word	0x0001497d

00014844 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
   14844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14848:	2700      	movs	r7, #0
   1484a:	f7fe fc29 	bl	130a0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
   1484e:	4c17      	ldr	r4, [pc, #92]	; (148ac <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
   14850:	4605      	mov	r5, r0
   14852:	7820      	ldrb	r0, [r4, #0]
   14854:	2804      	cmp	r0, #4
   14856:	d005      	beq.n	14864 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
   14858:	7820      	ldrb	r0, [r4, #0]
   1485a:	2805      	cmp	r0, #5
   1485c:	d002      	beq.n	14864 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
   1485e:	200c      	movs	r0, #12
   14860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14864:	2001      	movs	r0, #1
   14866:	7060      	strb	r0, [r4, #1]
   14868:	7b20      	ldrb	r0, [r4, #12]
   1486a:	b160      	cbz	r0, 14886 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
   1486c:	f3ef 8610 	mrs	r6, PRIMASK
   14870:	b672      	cpsid	i
   14872:	7b20      	ldrb	r0, [r4, #12]
   14874:	b128      	cbz	r0, 14882 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
   14876:	7b60      	ldrb	r0, [r4, #13]
   14878:	b118      	cbz	r0, 14882 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
   1487a:	f7fe fde3 	bl	13444 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
   1487e:	f000 f9b9 	bl	14bf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
   14882:	b126      	cbz	r6, 1488e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
   14884:	e004      	b.n	14890 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
   14886:	7828      	ldrb	r0, [r5, #0]
   14888:	f7fa f8f0 	bl	ea6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   1488c:	e000      	b.n	14890 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
   1488e:	b662      	cpsie	i
   14890:	7828      	ldrb	r0, [r5, #0]
   14892:	f7fa fa29 	bl	ece8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   14896:	f000 fd5d 	bl	15354 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa98>
   1489a:	2000      	movs	r0, #0
   1489c:	7060      	strb	r0, [r4, #1]
   1489e:	7f20      	ldrb	r0, [r4, #28]
   148a0:	b100      	cbz	r0, 148a4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
   148a2:	270c      	movs	r7, #12
   148a4:	f000 fd80 	bl	153a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
   148a8:	4638      	mov	r0, r7
   148aa:	e7d9      	b.n	14860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
   148ac:	20001520 	.word	0x20001520

000148b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
   148b0:	4801      	ldr	r0, [pc, #4]	; (148b8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
   148b2:	7800      	ldrb	r0, [r0, #0]
   148b4:	4770      	bx	lr
   148b6:	0000      	.short	0x0000
   148b8:	20001520 	.word	0x20001520

000148bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
   148bc:	490c      	ldr	r1, [pc, #48]	; (148f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
   148be:	b508      	push	{r3, lr}
   148c0:	7809      	ldrb	r1, [r1, #0]
   148c2:	b121      	cbz	r1, 148ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
   148c4:	f240 414f 	movw	r1, #1103	; 0x44f
   148c8:	2035      	movs	r0, #53	; 0x35
   148ca:	f7fc f851 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   148ce:	2300      	movs	r3, #0
   148d0:	9300      	str	r3, [sp, #0]
   148d2:	7801      	ldrb	r1, [r0, #0]
   148d4:	461a      	mov	r2, r3
   148d6:	07c9      	lsls	r1, r1, #31
   148d8:	d003      	beq.n	148e2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
   148da:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
   148de:	2201      	movs	r2, #1
   148e0:	9000      	str	r0, [sp, #0]
   148e2:	4669      	mov	r1, sp
   148e4:	4618      	mov	r0, r3
   148e6:	f000 f9d3 	bl	14c90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d4>
   148ea:	2000      	movs	r0, #0
   148ec:	bd08      	pop	{r3, pc}
   148ee:	0000      	.short	0x0000
   148f0:	20001520 	.word	0x20001520
   148f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   148f6:	4c18      	ldr	r4, [pc, #96]	; (14958 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
   148f8:	2001      	movs	r0, #1
   148fa:	7020      	strb	r0, [r4, #0]
   148fc:	f64f 75ff 	movw	r5, #65535	; 0xffff
   14900:	e00b      	b.n	1491a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
   14902:	2100      	movs	r1, #0
   14904:	f005 ff11 	bl	1a72a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   14908:	0006      	movs	r6, r0
   1490a:	d010      	beq.n	1492e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
   1490c:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
   14910:	f7fa f9ea 	bl	ece8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   14914:	4630      	mov	r0, r6
   14916:	f006 ff8a 	bl	1b82e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
   1491a:	4669      	mov	r1, sp
   1491c:	2000      	movs	r0, #0
   1491e:	f005 ff0d 	bl	1a73c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   14922:	b180      	cbz	r0, 14946 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
   14924:	f44f 710f 	mov.w	r1, #572	; 0x23c
   14928:	2035      	movs	r0, #53	; 0x35
   1492a:	f7fc f821 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1492e:	f240 5141 	movw	r1, #1345	; 0x541
   14932:	e7f9      	b.n	14928 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
   14934:	9802      	ldr	r0, [sp, #8]
   14936:	b130      	cbz	r0, 14946 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
   14938:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   1493c:	b119      	cbz	r1, 14946 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
   1493e:	8800      	ldrh	r0, [r0, #0]
   14940:	42a8      	cmp	r0, r5
   14942:	d1de      	bne.n	14902 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
   14944:	e004      	b.n	14950 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
   14946:	4668      	mov	r0, sp
   14948:	f7fc fa42 	bl	10dd0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1494c:	2800      	cmp	r0, #0
   1494e:	d0f1      	beq.n	14934 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
   14950:	2000      	movs	r0, #0
   14952:	7020      	strb	r0, [r4, #0]
   14954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14956:	0000      	.short	0x0000
   14958:	20001510 	.word	0x20001510
   1495c:	4906      	ldr	r1, [pc, #24]	; (14978 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
   1495e:	b140      	cbz	r0, 14972 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
   14960:	2201      	movs	r2, #1
   14962:	708a      	strb	r2, [r1, #2]
   14964:	f242 7210 	movw	r2, #10000	; 0x2710
   14968:	4350      	muls	r0, r2
   1496a:	684a      	ldr	r2, [r1, #4]
   1496c:	4410      	add	r0, r2
   1496e:	6208      	str	r0, [r1, #32]
   14970:	4770      	bx	lr
   14972:	2000      	movs	r0, #0
   14974:	7088      	strb	r0, [r1, #2]
   14976:	4770      	bx	lr
   14978:	20001520 	.word	0x20001520
   1497c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1497e:	460d      	mov	r5, r1
   14980:	2001      	movs	r0, #1
   14982:	f006 fef7 	bl	1b774 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
   14986:	b2c4      	uxtb	r4, r0
   14988:	200b      	movs	r0, #11
   1498a:	f006 fef3 	bl	1b774 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
   1498e:	b2c0      	uxtb	r0, r0
   14990:	4284      	cmp	r4, r0
   14992:	d002      	beq.n	1499a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
   14994:	f240 21c5 	movw	r1, #709	; 0x2c5
   14998:	e073      	b.n	14a82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
   1499a:	f7fe fb81 	bl	130a0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
   1499e:	2601      	movs	r6, #1
   149a0:	4c3b      	ldr	r4, [pc, #236]	; (14a90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
   149a2:	2d09      	cmp	r5, #9
   149a4:	d270      	bcs.n	14a88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
   149a6:	e8df f005 	tbb	[pc, r5]
   149aa:	3605      	.short	0x3605
   149ac:	6f464a4a 	.word	0x6f464a4a
   149b0:	006a665e 	.word	0x006a665e
   149b4:	7326      	strb	r6, [r4, #12]
   149b6:	7861      	ldrb	r1, [r4, #1]
   149b8:	2900      	cmp	r1, #0
   149ba:	d12b      	bne.n	14a14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
   149bc:	7800      	ldrb	r0, [r0, #0]
   149be:	f7f9 fc0b 	bl	e1d8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
   149c2:	4605      	mov	r5, r0
   149c4:	6120      	str	r0, [r4, #16]
   149c6:	f000 fd09 	bl	153dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
   149ca:	b118      	cbz	r0, 149d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
   149cc:	2000      	movs	r0, #0
   149ce:	f88d 0004 	strb.w	r0, [sp, #4]
   149d2:	e001      	b.n	149d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
   149d4:	f88d 6004 	strb.w	r6, [sp, #4]
   149d8:	4629      	mov	r1, r5
   149da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   149dc:	f7f9 fbd8 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   149e0:	6861      	ldr	r1, [r4, #4]
   149e2:	fbb0 f2f1 	udiv	r2, r0, r1
   149e6:	fb01 0012 	mls	r0, r1, r2, r0
   149ea:	b150      	cbz	r0, 14a02 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
   149ec:	f05f 0000 	movs.w	r0, #0
   149f0:	f88d 0005 	strb.w	r0, [sp, #5]
   149f4:	4668      	mov	r0, sp
   149f6:	f7fe fc8d 	bl	13314 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
   149fa:	b120      	cbz	r0, 14a06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
   149fc:	f240 21ff 	movw	r1, #767	; 0x2ff
   14a00:	e03f      	b.n	14a82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
   14a02:	2001      	movs	r0, #1
   14a04:	e7f4      	b.n	149f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
   14a06:	4922      	ldr	r1, [pc, #136]	; (14a90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
   14a08:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14a0a:	3910      	subs	r1, #16
   14a0c:	38e0      	subs	r0, #224	; 0xe0
   14a0e:	60c8      	str	r0, [r1, #12]
   14a10:	f7fa fb80 	bl	f114 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   14a14:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   14a16:	7860      	ldrb	r0, [r4, #1]
   14a18:	b128      	cbz	r0, 14a26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
   14a1a:	f7fe fd13 	bl	13444 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
   14a1e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
   14a22:	f000 b8e7 	b.w	14bf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
   14a26:	7366      	strb	r6, [r4, #13]
   14a28:	f7fe fd06 	bl	13438 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
   14a2c:	2800      	cmp	r0, #0
   14a2e:	d0f1      	beq.n	14a14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
   14a30:	f240 3112 	movw	r1, #786	; 0x312
   14a34:	e025      	b.n	14a82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
   14a36:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
   14a3a:	f003 bea9 	b.w	18790 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   14a3e:	7805      	ldrb	r5, [r0, #0]
   14a40:	2201      	movs	r2, #1
   14a42:	2100      	movs	r1, #0
   14a44:	4668      	mov	r0, sp
   14a46:	f000 fb55 	bl	150f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
   14a4a:	b140      	cbz	r0, 14a5e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
   14a4c:	4669      	mov	r1, sp
   14a4e:	4628      	mov	r0, r5
   14a50:	f006 fed5 	bl	1b7fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
   14a54:	2800      	cmp	r0, #0
   14a56:	d1dd      	bne.n	14a14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
   14a58:	f640 217f 	movw	r1, #2687	; 0xa7f
   14a5c:	e011      	b.n	14a82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
   14a5e:	70e6      	strb	r6, [r4, #3]
   14a60:	f000 f818 	bl	14a94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
   14a64:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   14a66:	f000 fafb 	bl	15060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a4>
   14a6a:	2800      	cmp	r0, #0
   14a6c:	d1fa      	bne.n	14a64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
   14a6e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
   14a72:	f006 bd68 	b.w	1b546 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
   14a76:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
   14a7a:	f000 b80b 	b.w	14a94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
   14a7e:	f240 3136 	movw	r1, #822	; 0x336
   14a82:	2035      	movs	r0, #53	; 0x35
   14a84:	f7fb ff74 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14a88:	f240 313a 	movw	r1, #826	; 0x33a
   14a8c:	e7f9      	b.n	14a82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
   14a8e:	0000      	.short	0x0000
   14a90:	20001520 	.word	0x20001520
   14a94:	b510      	push	{r4, lr}
   14a96:	4c0b      	ldr	r4, [pc, #44]	; (14ac4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x208>)
   14a98:	7820      	ldrb	r0, [r4, #0]
   14a9a:	b130      	cbz	r0, 14aaa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
   14a9c:	f000 fc5a 	bl	15354 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa98>
   14aa0:	78e0      	ldrb	r0, [r4, #3]
   14aa2:	b158      	cbz	r0, 14abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
   14aa4:	7f20      	ldrb	r0, [r4, #28]
   14aa6:	b128      	cbz	r0, 14ab4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f8>
   14aa8:	e008      	b.n	14abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
   14aaa:	f240 21b1 	movw	r1, #689	; 0x2b1
   14aae:	2035      	movs	r0, #53	; 0x35
   14ab0:	f7fb ff5e 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14ab4:	f7fe fcd8 	bl	13468 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
   14ab8:	f7fe f89a 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   14abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14ac0:	f000 bc72 	b.w	153a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
   14ac4:	20001520 	.word	0x20001520
   14ac8:	b510      	push	{r4, lr}
   14aca:	4604      	mov	r4, r0
   14acc:	2901      	cmp	r1, #1
   14ace:	d102      	bne.n	14ad6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21a>
   14ad0:	480a      	ldr	r0, [pc, #40]	; (14afc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x240>)
   14ad2:	7800      	ldrb	r0, [r0, #0]
   14ad4:	b140      	cbz	r0, 14ae8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>
   14ad6:	2004      	movs	r0, #4
   14ad8:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
   14adc:	f003 fca4 	bl	18428 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   14ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14ae4:	f7fa ba34 	b.w	ef50 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   14ae8:	2200      	movs	r2, #0
   14aea:	2101      	movs	r1, #1
   14aec:	4620      	mov	r0, r4
   14aee:	f006 feb6 	bl	1b85e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
   14af2:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
   14af6:	1c40      	adds	r0, r0, #1
   14af8:	8020      	strh	r0, [r4, #0]
   14afa:	e7ef      	b.n	14adc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x220>
   14afc:	20001510 	.word	0x20001510
   14b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14b04:	4c39      	ldr	r4, [pc, #228]	; (14bec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x330>)
   14b06:	4682      	mov	sl, r0
   14b08:	6926      	ldr	r6, [r4, #16]
   14b0a:	f003 fc51 	bl	183b0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   14b0e:	4605      	mov	r5, r0
   14b10:	69a0      	ldr	r0, [r4, #24]
   14b12:	2201      	movs	r2, #1
   14b14:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
   14b18:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
   14b1c:	3062      	adds	r0, #98	; 0x62
   14b1e:	2101      	movs	r1, #1
   14b20:	7281      	strb	r1, [r0, #10]
   14b22:	69a0      	ldr	r0, [r4, #24]
   14b24:	2100      	movs	r1, #0
   14b26:	302c      	adds	r0, #44	; 0x2c
   14b28:	f006 fc24 	bl	1b374 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
   14b2c:	2101      	movs	r1, #1
   14b2e:	2000      	movs	r0, #0
   14b30:	f006 fec1 	bl	1b8b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
   14b34:	69a7      	ldr	r7, [r4, #24]
   14b36:	1971      	adds	r1, r6, r5
   14b38:	4408      	add	r0, r1
   14b3a:	f200 49af 	addw	r9, r0, #1199	; 0x4af
   14b3e:	f8d7 800c 	ldr.w	r8, [r7, #12]
   14b42:	f002 fb67 	bl	17214 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
   14b46:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   14b4a:	4288      	cmp	r0, r1
   14b4c:	d00a      	beq.n	14b64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2a8>
   14b4e:	464a      	mov	r2, r9
   14b50:	4641      	mov	r1, r8
   14b52:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
   14b56:	f006 ffdc 	bl	1bb12 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
   14b5a:	4540      	cmp	r0, r8
   14b5c:	d903      	bls.n	14b66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2aa>
   14b5e:	f240 51f6 	movw	r1, #1526	; 0x5f6
   14b62:	e022      	b.n	14baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ee>
   14b64:	2000      	movs	r0, #0
   14b66:	4922      	ldr	r1, [pc, #136]	; (14bf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x334>)
   14b68:	4607      	mov	r7, r0
   14b6a:	6849      	ldr	r1, [r1, #4]
   14b6c:	4288      	cmp	r0, r1
   14b6e:	69a0      	ldr	r0, [r4, #24]
   14b70:	68c1      	ldr	r1, [r0, #12]
   14b72:	d202      	bcs.n	14b7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2be>
   14b74:	440f      	add	r7, r1
   14b76:	6201      	str	r1, [r0, #32]
   14b78:	e008      	b.n	14b8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d0>
   14b7a:	4638      	mov	r0, r7
   14b7c:	f006 f911 	bl	1ada2 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
   14b80:	69a1      	ldr	r1, [r4, #24]
   14b82:	68c9      	ldr	r1, [r1, #12]
   14b84:	f006 f909 	bl	1ad9a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   14b88:	69a1      	ldr	r1, [r4, #24]
   14b8a:	6208      	str	r0, [r1, #32]
   14b8c:	69a0      	ldr	r0, [r4, #24]
   14b8e:	68c1      	ldr	r1, [r0, #12]
   14b90:	2005      	movs	r0, #5
   14b92:	f006 f90c 	bl	1adae <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   14b96:	69a1      	ldr	r1, [r4, #24]
   14b98:	b280      	uxth	r0, r0
   14b9a:	8388      	strh	r0, [r1, #28]
   14b9c:	69a1      	ldr	r1, [r4, #24]
   14b9e:	6a09      	ldr	r1, [r1, #32]
   14ba0:	1a79      	subs	r1, r7, r1
   14ba2:	4288      	cmp	r0, r1
   14ba4:	d804      	bhi.n	14bb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f4>
   14ba6:	f640 21ee 	movw	r1, #2798	; 0xaee
   14baa:	2035      	movs	r0, #53	; 0x35
   14bac:	f7fb fee0 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14bb0:	2101      	movs	r1, #1
   14bb2:	4650      	mov	r0, sl
   14bb4:	f006 fe7f 	bl	1b8b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
   14bb8:	4428      	add	r0, r5
   14bba:	19c5      	adds	r5, r0, r7
   14bbc:	2101      	movs	r1, #1
   14bbe:	4650      	mov	r0, sl
   14bc0:	f006 f821 	bl	1ac06 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   14bc4:	4405      	add	r5, r0
   14bc6:	2001      	movs	r0, #1
   14bc8:	f007 ff39 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   14bcc:	f64a 2113 	movw	r1, #43539	; 0xaa13
   14bd0:	4408      	add	r0, r1
   14bd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14bd6:	fbb0 f0f1 	udiv	r0, r0, r1
   14bda:	1a29      	subs	r1, r5, r0
   14bdc:	4630      	mov	r0, r6
   14bde:	f7f9 faa5 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   14be2:	69a1      	ldr	r1, [r4, #24]
   14be4:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   14be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14bec:	20001520 	.word	0x20001520
   14bf0:	20000118 	.word	0x20000118
   14bf4:	b510      	push	{r4, lr}
   14bf6:	4c06      	ldr	r4, [pc, #24]	; (14c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
   14bf8:	7b20      	ldrb	r0, [r4, #12]
   14bfa:	2800      	cmp	r0, #0
   14bfc:	d006      	beq.n	14c0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
   14bfe:	f003 fc13 	bl	18428 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   14c02:	f7fa f9a5 	bl	ef50 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   14c06:	2000      	movs	r0, #0
   14c08:	7320      	strb	r0, [r4, #12]
   14c0a:	7360      	strb	r0, [r4, #13]
   14c0c:	bd10      	pop	{r4, pc}
   14c0e:	0000      	.short	0x0000
   14c10:	20001520 	.word	0x20001520
   14c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14c16:	4c1c      	ldr	r4, [pc, #112]	; (14c88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
   14c18:	7820      	ldrb	r0, [r4, #0]
   14c1a:	2805      	cmp	r0, #5
   14c1c:	d002      	beq.n	14c24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x368>
   14c1e:	200c      	movs	r0, #12
   14c20:	b004      	add	sp, #16
   14c22:	bd10      	pop	{r4, pc}
   14c24:	69a1      	ldr	r1, [r4, #24]
   14c26:	b129      	cbz	r1, 14c34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x378>
   14c28:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
   14c2c:	b128      	cbz	r0, 14c3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x37e>
   14c2e:	f240 41fa 	movw	r1, #1274	; 0x4fa
   14c32:	e025      	b.n	14c80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
   14c34:	f240 41f9 	movw	r1, #1273	; 0x4f9
   14c38:	e022      	b.n	14c80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
   14c3a:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
   14c3e:	2820      	cmp	r0, #32
   14c40:	d002      	beq.n	14c48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38c>
   14c42:	f240 41fc 	movw	r1, #1276	; 0x4fc
   14c46:	e01b      	b.n	14c80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
   14c48:	4810      	ldr	r0, [pc, #64]	; (14c8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>)
   14c4a:	f7fa f959 	bl	ef00 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   14c4e:	69a1      	ldr	r1, [r4, #24]
   14c50:	2820      	cmp	r0, #32
   14c52:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
   14c56:	d00e      	beq.n	14c76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ba>
   14c58:	2300      	movs	r3, #0
   14c5a:	2201      	movs	r2, #1
   14c5c:	4668      	mov	r0, sp
   14c5e:	f000 f8bd 	bl	14ddc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x520>
   14c62:	69a0      	ldr	r0, [r4, #24]
   14c64:	4669      	mov	r1, sp
   14c66:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
   14c6a:	f006 fdc8 	bl	1b7fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
   14c6e:	b128      	cbz	r0, 14c7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c0>
   14c70:	2000      	movs	r0, #0
   14c72:	61a0      	str	r0, [r4, #24]
   14c74:	e7d4      	b.n	14c20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x364>
   14c76:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   14c7a:	e001      	b.n	14c80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
   14c7c:	f240 5103 	movw	r1, #1283	; 0x503
   14c80:	2035      	movs	r0, #53	; 0x35
   14c82:	f7fb fe75 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14c86:	0000      	.short	0x0000
   14c88:	20001520 	.word	0x20001520
   14c8c:	00014ce5 	.word	0x00014ce5
   14c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c94:	4d11      	ldr	r5, [pc, #68]	; (14cdc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x420>)
   14c96:	4616      	mov	r6, r2
   14c98:	460f      	mov	r7, r1
   14c9a:	2400      	movs	r4, #0
   14c9c:	6068      	str	r0, [r5, #4]
   14c9e:	f006 fdfe 	bl	1b89e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
   14ca2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 14ce0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x424>
   14ca6:	2100      	movs	r1, #0
   14ca8:	f81c 2001 	ldrb.w	r2, [ip, r1]
   14cac:	4232      	tst	r2, r6
   14cae:	d007      	beq.n	14cc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x404>
   14cb0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14cb4:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   14cb8:	1a1b      	subs	r3, r3, r0
   14cba:	1c64      	adds	r4, r4, #1
   14cbc:	b2e4      	uxtb	r4, r4
   14cbe:	6093      	str	r3, [r2, #8]
   14cc0:	1c49      	adds	r1, r1, #1
   14cc2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   14cc6:	d0ef      	beq.n	14ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ec>
   14cc8:	f016 0f0e 	tst.w	r6, #14
   14ccc:	d004      	beq.n	14cd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x41c>
   14cce:	f640 11b6 	movw	r1, #2486	; 0x9b6
   14cd2:	2035      	movs	r0, #53	; 0x35
   14cd4:	f7fb fe4c 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14cdc:	20001520 	.word	0x20001520
   14ce0:	0001cbb5 	.word	0x0001cbb5
   14ce4:	b570      	push	{r4, r5, r6, lr}
   14ce6:	460d      	mov	r5, r1
   14ce8:	0004      	movs	r4, r0
   14cea:	d00c      	beq.n	14d06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x44a>
   14cec:	2001      	movs	r0, #1
   14cee:	f006 fd41 	bl	1b774 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
   14cf2:	b2c6      	uxtb	r6, r0
   14cf4:	200b      	movs	r0, #11
   14cf6:	f006 fd3d 	bl	1b774 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
   14cfa:	b2c0      	uxtb	r0, r0
   14cfc:	4286      	cmp	r6, r0
   14cfe:	d005      	beq.n	14d0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x450>
   14d00:	f240 215f 	movw	r1, #607	; 0x25f
   14d04:	e061      	b.n	14dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
   14d06:	f44f 7117 	mov.w	r1, #604	; 0x25c
   14d0a:	e05e      	b.n	14dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
   14d0c:	2d09      	cmp	r5, #9
   14d0e:	d25f      	bcs.n	14dd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x514>
   14d10:	e8df f005 	tbb	[pc, r5]
   14d14:	3d3d3505 	.word	0x3d3d3505
   14d18:	4b445e39 	.word	0x4b445e39
   14d1c:	0059      	.short	0x0059
   14d1e:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   14d22:	b348      	cbz	r0, 14d78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
   14d24:	4620      	mov	r0, r4
   14d26:	f000 fd69 	bl	157fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
   14d2a:	f006 fdb8 	bl	1b89e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
   14d2e:	f500 709c 	add.w	r0, r0, #312	; 0x138
   14d32:	b285      	uxth	r5, r0
   14d34:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   14d38:	2128      	movs	r1, #40	; 0x28
   14d3a:	f006 fd4c 	bl	1b7d6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3a>
   14d3e:	182e      	adds	r6, r5, r0
   14d40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   14d42:	68e0      	ldr	r0, [r4, #12]
   14d44:	4288      	cmp	r0, r1
   14d46:	d200      	bcs.n	14d4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
   14d48:	4601      	mov	r1, r0
   14d4a:	4632      	mov	r2, r6
   14d4c:	4620      	mov	r0, r4
   14d4e:	f006 fa9a 	bl	1b286 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   14d52:	4d21      	ldr	r5, [pc, #132]	; (14dd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x51c>)
   14d54:	4632      	mov	r2, r6
   14d56:	6068      	str	r0, [r5, #4]
   14d58:	4620      	mov	r0, r4
   14d5a:	68e1      	ldr	r1, [r4, #12]
   14d5c:	f006 fa93 	bl	1b286 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   14d60:	60a8      	str	r0, [r5, #8]
   14d62:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14d66:	f006 faef 	bl	1b348 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   14d6a:	f2a0 1027 	subw	r0, r0, #295	; 0x127
   14d6e:	60e8      	str	r0, [r5, #12]
   14d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14d74:	f7fa b9ce 	b.w	f114 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   14d78:	f240 2165 	movw	r1, #613	; 0x265
   14d7c:	e025      	b.n	14dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
   14d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14d82:	f006 be1e 	b.w	1b9c2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
   14d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14d8a:	f003 bd01 	b.w	18790 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   14d8e:	4620      	mov	r0, r4
   14d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14d94:	2201      	movs	r2, #1
   14d96:	2100      	movs	r1, #0
   14d98:	f006 bd61 	b.w	1b85e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
   14d9c:	2001      	movs	r0, #1
   14d9e:	f7f9 f899 	bl	ded4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   14da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14da6:	f005 bda0 	b.w	1a8ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   14daa:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   14dae:	2804      	cmp	r0, #4
   14db0:	d002      	beq.n	14db8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
   14db2:	f240 2199 	movw	r1, #665	; 0x299
   14db6:	e008      	b.n	14dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
   14db8:	4620      	mov	r0, r4
   14dba:	f006 fd38 	bl	1b82e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
   14dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14dc2:	f7fd bf15 	b.w	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   14dc6:	f44f 7129 	mov.w	r1, #676	; 0x2a4
   14dca:	2035      	movs	r0, #53	; 0x35
   14dcc:	f7fb fdd0 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14dd0:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   14dd4:	e7f9      	b.n	14dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
   14dd6:	0000      	.short	0x0000
   14dd8:	20001510 	.word	0x20001510
   14ddc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   14de0:	4605      	mov	r5, r0
   14de2:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
   14de6:	2600      	movs	r6, #0
   14de8:	f8d1 b020 	ldr.w	fp, [r1, #32]
   14dec:	469a      	mov	sl, r3
   14dee:	460c      	mov	r4, r1
   14df0:	280d      	cmp	r0, #13
   14df2:	d020      	beq.n	14e36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
   14df4:	280c      	cmp	r0, #12
   14df6:	d01e      	beq.n	14e36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
   14df8:	2824      	cmp	r0, #36	; 0x24
   14dfa:	d01c      	beq.n	14e36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
   14dfc:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   14e00:	2824      	cmp	r0, #36	; 0x24
   14e02:	d018      	beq.n	14e36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
   14e04:	2000      	movs	r0, #0
   14e06:	4680      	mov	r8, r0
   14e08:	f006 fd3e 	bl	1b888 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
   14e0c:	4681      	mov	r9, r0
   14e0e:	f1ba 0f00 	cmp.w	sl, #0
   14e12:	d003      	beq.n	14e1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x560>
   14e14:	2101      	movs	r1, #1
   14e16:	4620      	mov	r0, r4
   14e18:	f006 fd7a 	bl	1b910 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
   14e1c:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   14e20:	2701      	movs	r7, #1
   14e22:	b150      	cbz	r0, 14e3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57e>
   14e24:	2801      	cmp	r0, #1
   14e26:	d01b      	beq.n	14e60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
   14e28:	2802      	cmp	r0, #2
   14e2a:	d011      	beq.n	14e50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x594>
   14e2c:	2803      	cmp	r0, #3
   14e2e:	d017      	beq.n	14e60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
   14e30:	f640 1139 	movw	r1, #2361	; 0x939
   14e34:	e07b      	b.n	14f2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x672>
   14e36:	2001      	movs	r0, #1
   14e38:	e7e5      	b.n	14e06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54a>
   14e3a:	9802      	ldr	r0, [sp, #8]
   14e3c:	b128      	cbz	r0, 14e4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58e>
   14e3e:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
   14e42:	4620      	mov	r0, r4
   14e44:	f006 fcc9 	bl	1b7da <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
   14e48:	e00b      	b.n	14e62 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a6>
   14e4a:	f640 01ff 	movw	r1, #2303	; 0x8ff
   14e4e:	e06e      	b.n	14f2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x672>
   14e50:	4838      	ldr	r0, [pc, #224]	; (14f34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x678>)
   14e52:	6801      	ldr	r1, [r0, #0]
   14e54:	2003      	movs	r0, #3
   14e56:	eb01 060b 	add.w	r6, r1, fp
   14e5a:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
   14e5e:	e000      	b.n	14e62 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a6>
   14e60:	68e6      	ldr	r6, [r4, #12]
   14e62:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   14e66:	4631      	mov	r1, r6
   14e68:	f7f9 f960 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   14e6c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   14e70:	60e8      	str	r0, [r5, #12]
   14e72:	2000      	movs	r0, #0
   14e74:	7028      	strb	r0, [r5, #0]
   14e76:	f8a5 9008 	strh.w	r9, [r5, #8]
   14e7a:	4620      	mov	r0, r4
   14e7c:	f000 fc0c 	bl	15698 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
   14e80:	f1a8 0101 	sub.w	r1, r8, #1
   14e84:	4208      	tst	r0, r1
   14e86:	d101      	bne.n	14e8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
   14e88:	72af      	strb	r7, [r5, #10]
   14e8a:	e005      	b.n	14e98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5dc>
   14e8c:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   14e90:	2801      	cmp	r0, #1
   14e92:	d017      	beq.n	14ec4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x608>
   14e94:	2003      	movs	r0, #3
   14e96:	72a8      	strb	r0, [r5, #10]
   14e98:	46b9      	mov	r9, r7
   14e9a:	72ef      	strb	r7, [r5, #11]
   14e9c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14ea0:	f006 fa52 	bl	1b348 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   14ea4:	6068      	str	r0, [r5, #4]
   14ea6:	f1ba 0f00 	cmp.w	sl, #0
   14eaa:	d03c      	beq.n	14f26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
   14eac:	4631      	mov	r1, r6
   14eae:	4628      	mov	r0, r5
   14eb0:	f005 ff08 	bl	1acc4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   14eb4:	b287      	uxth	r7, r0
   14eb6:	4620      	mov	r0, r4
   14eb8:	f000 fbee 	bl	15698 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
   14ebc:	f1b8 0f00 	cmp.w	r8, #0
   14ec0:	d002      	beq.n	14ec8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
   14ec2:	e014      	b.n	14eee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x632>
   14ec4:	2002      	movs	r0, #2
   14ec6:	e7e6      	b.n	14e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5da>
   14ec8:	42b8      	cmp	r0, r7
   14eca:	d810      	bhi.n	14eee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x632>
   14ecc:	4607      	mov	r7, r0
   14ece:	f885 900a 	strb.w	r9, [r5, #10]
   14ed2:	fb06 f107 	mul.w	r1, r6, r7
   14ed6:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   14eda:	f7f9 f927 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   14ede:	60e8      	str	r0, [r5, #12]
   14ee0:	b31e      	cbz	r6, 14f2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66e>
   14ee2:	4631      	mov	r1, r6
   14ee4:	4628      	mov	r0, r5
   14ee6:	f005 feed 	bl	1acc4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   14eea:	4438      	add	r0, r7
   14eec:	b287      	uxth	r7, r0
   14eee:	4639      	mov	r1, r7
   14ef0:	4620      	mov	r0, r4
   14ef2:	f006 fd0d 	bl	1b910 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
   14ef6:	68e8      	ldr	r0, [r5, #12]
   14ef8:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   14efc:	6f20      	ldr	r0, [r4, #112]	; 0x70
   14efe:	2800      	cmp	r0, #0
   14f00:	d011      	beq.n	14f26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
   14f02:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   14f06:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   14f0a:	1a40      	subs	r0, r0, r1
   14f0c:	b202      	sxth	r2, r0
   14f0e:	2a00      	cmp	r2, #0
   14f10:	dd09      	ble.n	14f26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
   14f12:	f834 0f74 	ldrh.w	r0, [r4, #116]!
   14f16:	4402      	add	r2, r0
   14f18:	1e52      	subs	r2, r2, #1
   14f1a:	fb92 f2f0 	sdiv	r2, r2, r0
   14f1e:	b292      	uxth	r2, r2
   14f20:	fb02 1000 	mla	r0, r2, r0, r1
   14f24:	86e0      	strh	r0, [r4, #54]	; 0x36
   14f26:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   14f2a:	f640 1174 	movw	r1, #2420	; 0x974
   14f2e:	2035      	movs	r0, #53	; 0x35
   14f30:	f7fb fd1e 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14f34:	20000118 	.word	0x20000118
   14f38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14f3c:	460d      	mov	r5, r1
   14f3e:	4607      	mov	r7, r0
   14f40:	f000 fa58 	bl	153f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
   14f44:	4c1d      	ldr	r4, [pc, #116]	; (14fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x700>)
   14f46:	6861      	ldr	r1, [r4, #4]
   14f48:	f7f9 f8f0 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   14f4c:	4606      	mov	r6, r0
   14f4e:	4601      	mov	r1, r0
   14f50:	4638      	mov	r0, r7
   14f52:	f7f9 f91d 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   14f56:	4607      	mov	r7, r0
   14f58:	f006 fca7 	bl	1b8aa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
   14f5c:	4287      	cmp	r7, r0
   14f5e:	da10      	bge.n	14f82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c6>
   14f60:	6960      	ldr	r0, [r4, #20]
   14f62:	f000 fa47 	bl	153f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
   14f66:	4631      	mov	r1, r6
   14f68:	f7f9 f912 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   14f6c:	6861      	ldr	r1, [r4, #4]
   14f6e:	fbb0 f0f1 	udiv	r0, r0, r1
   14f72:	6028      	str	r0, [r5, #0]
   14f74:	6861      	ldr	r1, [r4, #4]
   14f76:	b004      	add	sp, #16
   14f78:	4630      	mov	r0, r6
   14f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14f7e:	f7f9 b8d5 	b.w	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   14f82:	2000      	movs	r0, #0
   14f84:	f88d 0000 	strb.w	r0, [sp]
   14f88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   14f8a:	9001      	str	r0, [sp, #4]
   14f8c:	f006 fc7c 	bl	1b888 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
   14f90:	f8ad 0008 	strh.w	r0, [sp, #8]
   14f94:	2001      	movs	r0, #1
   14f96:	f88d 000b 	strb.w	r0, [sp, #11]
   14f9a:	6960      	ldr	r0, [r4, #20]
   14f9c:	f000 fa2a 	bl	153f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
   14fa0:	9003      	str	r0, [sp, #12]
   14fa2:	f000 f9c1 	bl	15328 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
   14fa6:	f88d 000a 	strb.w	r0, [sp, #10]
   14faa:	4668      	mov	r0, sp
   14fac:	6861      	ldr	r1, [r4, #4]
   14fae:	f005 fe89 	bl	1acc4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   14fb2:	6028      	str	r0, [r5, #0]
   14fb4:	9803      	ldr	r0, [sp, #12]
   14fb6:	b004      	add	sp, #16
   14fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14fbc:	20001520 	.word	0x20001520
   14fc0:	b510      	push	{r4, lr}
   14fc2:	2400      	movs	r4, #0
   14fc4:	f006 fc6b 	bl	1b89e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
   14fc8:	4a06      	ldr	r2, [pc, #24]	; (14fe4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>)
   14fca:	2100      	movs	r1, #0
   14fcc:	eb02 0381 	add.w	r3, r2, r1, lsl #2
   14fd0:	4404      	add	r4, r0
   14fd2:	689b      	ldr	r3, [r3, #8]
   14fd4:	1c49      	adds	r1, r1, #1
   14fd6:	441c      	add	r4, r3
   14fd8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   14fdc:	d0f6      	beq.n	14fcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
   14fde:	4620      	mov	r0, r4
   14fe0:	bd10      	pop	{r4, pc}
   14fe2:	0000      	.short	0x0000
   14fe4:	20001520 	.word	0x20001520
   14fe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14fea:	4c1b      	ldr	r4, [pc, #108]	; (15058 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
   14fec:	4606      	mov	r6, r0
   14fee:	460d      	mov	r5, r1
   14ff0:	78a0      	ldrb	r0, [r4, #2]
   14ff2:	b360      	cbz	r0, 1504e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x792>
   14ff4:	4919      	ldr	r1, [pc, #100]	; (1505c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>)
   14ff6:	6a20      	ldr	r0, [r4, #32]
   14ff8:	4288      	cmp	r0, r1
   14ffa:	d828      	bhi.n	1504e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x792>
   14ffc:	2000      	movs	r0, #0
   14ffe:	f88d 0000 	strb.w	r0, [sp]
   15002:	9501      	str	r5, [sp, #4]
   15004:	f006 fc40 	bl	1b888 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
   15008:	f8ad 0008 	strh.w	r0, [sp, #8]
   1500c:	2001      	movs	r0, #1
   1500e:	f88d 000b 	strb.w	r0, [sp, #11]
   15012:	f006 fc4a 	bl	1b8aa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
   15016:	4601      	mov	r1, r0
   15018:	4630      	mov	r0, r6
   1501a:	f7f9 f887 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1501e:	9003      	str	r0, [sp, #12]
   15020:	2003      	movs	r0, #3
   15022:	f88d 000a 	strb.w	r0, [sp, #10]
   15026:	4668      	mov	r0, sp
   15028:	f7f9 fbbe 	bl	e7a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   1502c:	4606      	mov	r6, r0
   1502e:	4629      	mov	r1, r5
   15030:	9803      	ldr	r0, [sp, #12]
   15032:	f7f9 f87b 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   15036:	4605      	mov	r5, r0
   15038:	6a21      	ldr	r1, [r4, #32]
   1503a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1503c:	f7f9 f876 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   15040:	4601      	mov	r1, r0
   15042:	b13e      	cbz	r6, 15054 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x798>
   15044:	4628      	mov	r0, r5
   15046:	f7f9 f8a3 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1504a:	2800      	cmp	r0, #0
   1504c:	db02      	blt.n	15054 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x798>
   1504e:	2001      	movs	r0, #1
   15050:	b004      	add	sp, #16
   15052:	bd70      	pop	{r4, r5, r6, pc}
   15054:	2000      	movs	r0, #0
   15056:	e7fb      	b.n	15050 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x794>
   15058:	20001520 	.word	0x20001520
   1505c:	07a12000 	.word	0x07a12000
   15060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15064:	f004 f92e 	bl	192c4 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   15068:	4c21      	ldr	r4, [pc, #132]	; (150f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x834>)
   1506a:	4607      	mov	r7, r0
   1506c:	6920      	ldr	r0, [r4, #16]
   1506e:	f000 f95b 	bl	15328 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
   15072:	4606      	mov	r6, r0
   15074:	f7f9 f800 	bl	e078 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
   15078:	4605      	mov	r5, r0
   1507a:	2865      	cmp	r0, #101	; 0x65
   1507c:	d326      	bcc.n	150cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x810>
   1507e:	1c68      	adds	r0, r5, #1
   15080:	d027      	beq.n	150d2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x816>
   15082:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15084:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   15086:	1948      	adds	r0, r1, r5
   15088:	4282      	cmp	r2, r0
   1508a:	d800      	bhi.n	1508e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d2>
   1508c:	1a55      	subs	r5, r2, r1
   1508e:	f06f 0139 	mvn.w	r1, #57	; 0x39
   15092:	4638      	mov	r0, r7
   15094:	f7f9 f84a 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   15098:	4629      	mov	r1, r5
   1509a:	f000 f9bd 	bl	15418 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
   1509e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   150a0:	4408      	add	r0, r1
   150a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   150a4:	1a45      	subs	r5, r0, r1
   150a6:	f241 3088 	movw	r0, #5000	; 0x1388
   150aa:	4285      	cmp	r5, r0
   150ac:	d900      	bls.n	150b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f4>
   150ae:	4605      	mov	r5, r0
   150b0:	f004 f908 	bl	192c4 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   150b4:	4601      	mov	r1, r0
   150b6:	4638      	mov	r0, r7
   150b8:	f7f9 f86a 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   150bc:	309d      	adds	r0, #157	; 0x9d
   150be:	4285      	cmp	r5, r0
   150c0:	d304      	bcc.n	150cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x810>
   150c2:	4631      	mov	r1, r6
   150c4:	4628      	mov	r0, r5
   150c6:	f7f8 ff15 	bl	def4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   150ca:	b120      	cbz	r0, 150d6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81a>
   150cc:	2000      	movs	r0, #0
   150ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   150d4:	e7e5      	b.n	150a2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7e6>
   150d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   150d8:	4905      	ldr	r1, [pc, #20]	; (150f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x834>)
   150da:	4428      	add	r0, r5
   150dc:	3910      	subs	r1, #16
   150de:	6260      	str	r0, [r4, #36]	; 0x24
   150e0:	68c8      	ldr	r0, [r1, #12]
   150e2:	4428      	add	r0, r5
   150e4:	60c8      	str	r0, [r1, #12]
   150e6:	f7fa f815 	bl	f114 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   150ea:	2001      	movs	r0, #1
   150ec:	e7ef      	b.n	150ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x812>
   150ee:	0000      	.short	0x0000
   150f0:	20001520 	.word	0x20001520
   150f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f8:	b08c      	sub	sp, #48	; 0x30
   150fa:	4616      	mov	r6, r2
   150fc:	4607      	mov	r7, r0
   150fe:	f004 f8e1 	bl	192c4 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   15102:	4c87      	ldr	r4, [pc, #540]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   15104:	9002      	str	r0, [sp, #8]
   15106:	2500      	movs	r5, #0
   15108:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1510c:	f006 fbc7 	bl	1b89e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
   15110:	68a1      	ldr	r1, [r4, #8]
   15112:	4408      	add	r0, r1
   15114:	6861      	ldr	r1, [r4, #4]
   15116:	4288      	cmp	r0, r1
   15118:	d101      	bne.n	1511e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x862>
   1511a:	2001      	movs	r0, #1
   1511c:	e000      	b.n	15120 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x864>
   1511e:	2000      	movs	r0, #0
   15120:	4683      	mov	fp, r0
   15122:	980d      	ldr	r0, [sp, #52]	; 0x34
   15124:	ea06 090b 	and.w	r9, r6, fp
   15128:	2800      	cmp	r0, #0
   1512a:	d065      	beq.n	151f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x93c>
   1512c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   15130:	9802      	ldr	r0, [sp, #8]
   15132:	f7f8 fffb 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   15136:	9000      	str	r0, [sp, #0]
   15138:	f002 f872 	bl	17220 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
   1513c:	4680      	mov	r8, r0
   1513e:	4878      	ldr	r0, [pc, #480]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   15140:	7800      	ldrb	r0, [r0, #0]
   15142:	4e77      	ldr	r6, [pc, #476]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   15144:	362c      	adds	r6, #44	; 0x2c
   15146:	2805      	cmp	r0, #5
   15148:	d12e      	bne.n	151a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ec>
   1514a:	4875      	ldr	r0, [pc, #468]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   1514c:	6980      	ldr	r0, [r0, #24]
   1514e:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   15152:	f002 f845 	bl	171e0 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
   15156:	4604      	mov	r4, r0
   15158:	4540      	cmp	r0, r8
   1515a:	d009      	beq.n	15170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8b4>
   1515c:	4870      	ldr	r0, [pc, #448]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   1515e:	4621      	mov	r1, r4
   15160:	6980      	ldr	r0, [r0, #24]
   15162:	f500 7084 	add.w	r0, r0, #264	; 0x108
   15166:	f001 ffff 	bl	17168 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
   1516a:	2000      	movs	r0, #0
   1516c:	6170      	str	r0, [r6, #20]
   1516e:	e00c      	b.n	1518a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ce>
   15170:	496b      	ldr	r1, [pc, #428]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   15172:	6988      	ldr	r0, [r1, #24]
   15174:	f500 7084 	add.w	r0, r0, #264	; 0x108
   15178:	6170      	str	r0, [r6, #20]
   1517a:	698a      	ldr	r2, [r1, #24]
   1517c:	6b08      	ldr	r0, [r1, #48]	; 0x30
   1517e:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   15182:	4290      	cmp	r0, r2
   15184:	d200      	bcs.n	15188 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8cc>
   15186:	4610      	mov	r0, r2
   15188:	6308      	str	r0, [r1, #48]	; 0x30
   1518a:	4865      	ldr	r0, [pc, #404]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   1518c:	6980      	ldr	r0, [r0, #24]
   1518e:	b130      	cbz	r0, 1519e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8e2>
   15190:	b144      	cbz	r4, 151a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8e8>
   15192:	e9d4 1200 	ldrd	r1, r2, [r4]
   15196:	4411      	add	r1, r2
   15198:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   1519c:	e004      	b.n	151a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ec>
   1519e:	f240 51c5 	movw	r1, #1477	; 0x5c5
   151a2:	e017      	b.n	151d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x918>
   151a4:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
   151a8:	4641      	mov	r1, r8
   151aa:	4630      	mov	r0, r6
   151ac:	f001 ffdc 	bl	17168 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
   151b0:	ea5f 0008 	movs.w	r0, r8
   151b4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>
   151b8:	9a00      	ldr	r2, [sp, #0]
   151ba:	f8d8 4004 	ldr.w	r4, [r8, #4]
   151be:	d00c      	beq.n	151da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x91e>
   151c0:	e9d0 1000 	ldrd	r1, r0, [r0]
   151c4:	4408      	add	r0, r1
   151c6:	4621      	mov	r1, r4
   151c8:	f006 fca3 	bl	1bb12 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
   151cc:	42a0      	cmp	r0, r4
   151ce:	d904      	bls.n	151da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x91e>
   151d0:	f240 51e3 	movw	r1, #1507	; 0x5e3
   151d4:	2035      	movs	r0, #53	; 0x35
   151d6:	f7fb fbcb 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   151da:	4601      	mov	r1, r0
   151dc:	9800      	ldr	r0, [sp, #0]
   151de:	f7f8 ffa5 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   151e2:	4606      	mov	r6, r0
   151e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   151e8:	4644      	mov	r4, r8
   151ea:	4241      	negs	r1, r0
   151ec:	4630      	mov	r0, r6
   151ee:	f7f8 ff9d 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   151f2:	62e0      	str	r0, [r4, #44]	; 0x2c
   151f4:	2001      	movs	r0, #1
   151f6:	e042      	b.n	1527e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c2>
   151f8:	f1b9 0f00 	cmp.w	r9, #0
   151fc:	d018      	beq.n	15230 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x974>
   151fe:	2001      	movs	r0, #1
   15200:	f006 facf 	bl	1b7a2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
   15204:	4604      	mov	r4, r0
   15206:	2001      	movs	r0, #1
   15208:	f007 fc19 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1520c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   15210:	4401      	add	r1, r0
   15212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15216:	fbb1 f0f0 	udiv	r0, r1, r0
   1521a:	1821      	adds	r1, r4, r0
   1521c:	31f1      	adds	r1, #241	; 0xf1
   1521e:	9802      	ldr	r0, [sp, #8]
   15220:	f7ff fee2 	bl	14fe8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>
   15224:	b908      	cbnz	r0, 1522a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x96e>
   15226:	f04f 0a00 	mov.w	sl, #0
   1522a:	9e02      	ldr	r6, [sp, #8]
   1522c:	9508      	str	r5, [sp, #32]
   1522e:	e027      	b.n	15280 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c4>
   15230:	b12e      	cbz	r6, 1523e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x982>
   15232:	a908      	add	r1, sp, #32
   15234:	9802      	ldr	r0, [sp, #8]
   15236:	f7ff fe7f 	bl	14f38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67c>
   1523a:	4606      	mov	r6, r0
   1523c:	e020      	b.n	15280 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c4>
   1523e:	9802      	ldr	r0, [sp, #8]
   15240:	f000 f8d8 	bl	153f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
   15244:	4c36      	ldr	r4, [pc, #216]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   15246:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
   1524a:	f7f8 ff6f 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1524e:	4606      	mov	r6, r0
   15250:	6920      	ldr	r0, [r4, #16]
   15252:	f000 f8c3 	bl	153dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
   15256:	6861      	ldr	r1, [r4, #4]
   15258:	4348      	muls	r0, r1
   1525a:	78a1      	ldrb	r1, [r4, #2]
   1525c:	b131      	cbz	r1, 1526c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
   1525e:	6a21      	ldr	r1, [r4, #32]
   15260:	4281      	cmp	r1, r0
   15262:	d302      	bcc.n	1526a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9ae>
   15264:	1a09      	subs	r1, r1, r0
   15266:	6221      	str	r1, [r4, #32]
   15268:	e000      	b.n	1526c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
   1526a:	6225      	str	r5, [r4, #32]
   1526c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1526e:	4601      	mov	r1, r0
   15270:	4610      	mov	r0, r2
   15272:	f7f8 ff5b 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   15276:	62e0      	str	r0, [r4, #44]	; 0x2c
   15278:	4630      	mov	r0, r6
   1527a:	f000 f8af 	bl	153dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
   1527e:	9008      	str	r0, [sp, #32]
   15280:	2001      	movs	r0, #1
   15282:	f006 fa8e 	bl	1b7a2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
   15286:	4604      	mov	r4, r0
   15288:	2001      	movs	r0, #1
   1528a:	f007 fbd8 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1528e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   15292:	4401      	add	r1, r0
   15294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15298:	fbb1 f0f0 	udiv	r0, r1, r0
   1529c:	4404      	add	r4, r0
   1529e:	4651      	mov	r1, sl
   152a0:	4630      	mov	r0, r6
   152a2:	34f1      	adds	r4, #241	; 0xf1
   152a4:	f000 f8b8 	bl	15418 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
   152a8:	491d      	ldr	r1, [pc, #116]	; (15320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
   152aa:	eb01 0285 	add.w	r2, r1, r5, lsl #2
   152ae:	6892      	ldr	r2, [r2, #8]
   152b0:	4282      	cmp	r2, r0
   152b2:	d800      	bhi.n	152b6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9fa>
   152b4:	4610      	mov	r0, r2
   152b6:	6288      	str	r0, [r1, #40]	; 0x28
   152b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   152ba:	b102      	cbz	r2, 152be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa02>
   152bc:	610e      	str	r6, [r1, #16]
   152be:	4688      	mov	r8, r1
   152c0:	614e      	str	r6, [r1, #20]
   152c2:	f1bb 0f00 	cmp.w	fp, #0
   152c6:	d002      	beq.n	152ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa12>
   152c8:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
   152cc:	e001      	b.n	152d2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa16>
   152ce:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
   152d2:	f04f 0a01 	mov.w	sl, #1
   152d6:	f887 a00b 	strb.w	sl, [r7, #11]
   152da:	f006 fad5 	bl	1b888 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
   152de:	8138      	strh	r0, [r7, #8]
   152e0:	4630      	mov	r0, r6
   152e2:	f000 f821 	bl	15328 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
   152e6:	72b8      	strb	r0, [r7, #10]
   152e8:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   152ec:	6078      	str	r0, [r7, #4]
   152ee:	f1b9 0f00 	cmp.w	r9, #0
   152f2:	d008      	beq.n	15306 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa4a>
   152f4:	f887 a000 	strb.w	sl, [r7]
   152f8:	490a      	ldr	r1, [pc, #40]	; (15324 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa68>)
   152fa:	9802      	ldr	r0, [sp, #8]
   152fc:	f000 f88c 	bl	15418 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
   15300:	1b00      	subs	r0, r0, r4
   15302:	60f8      	str	r0, [r7, #12]
   15304:	e001      	b.n	1530a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa4e>
   15306:	703d      	strb	r5, [r7, #0]
   15308:	60fe      	str	r6, [r7, #12]
   1530a:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
   1530e:	42a0      	cmp	r0, r4
   15310:	d303      	bcc.n	1531a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa5e>
   15312:	2001      	movs	r0, #1
   15314:	b00f      	add	sp, #60	; 0x3c
   15316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1531a:	2000      	movs	r0, #0
   1531c:	e7fa      	b.n	15314 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa58>
   1531e:	0000      	.short	0x0000
   15320:	20001520 	.word	0x20001520
   15324:	07a12000 	.word	0x07a12000
   15328:	4a09      	ldr	r2, [pc, #36]	; (15350 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa94>)
   1532a:	b510      	push	{r4, lr}
   1532c:	7811      	ldrb	r1, [r2, #0]
   1532e:	2904      	cmp	r1, #4
   15330:	d10c      	bne.n	1534c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa90>
   15332:	6851      	ldr	r1, [r2, #4]
   15334:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   15336:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1533a:	004c      	lsls	r4, r1, #1
   1533c:	4601      	mov	r1, r0
   1533e:	4610      	mov	r0, r2
   15340:	f7f8 ff26 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   15344:	42a0      	cmp	r0, r4
   15346:	d201      	bcs.n	1534c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa90>
   15348:	2003      	movs	r0, #3
   1534a:	bd10      	pop	{r4, pc}
   1534c:	2002      	movs	r0, #2
   1534e:	bd10      	pop	{r4, pc}
   15350:	20001520 	.word	0x20001520
   15354:	b570      	push	{r4, r5, r6, lr}
   15356:	4d13      	ldr	r5, [pc, #76]	; (153a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae8>)
   15358:	7f28      	ldrb	r0, [r5, #28]
   1535a:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   1535e:	2800      	cmp	r0, #0
   15360:	7828      	ldrb	r0, [r5, #0]
   15362:	d00f      	beq.n	15384 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xac8>
   15364:	2805      	cmp	r0, #5
   15366:	d004      	beq.n	15372 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xab6>
   15368:	f240 318f 	movw	r1, #911	; 0x38f
   1536c:	2035      	movs	r0, #53	; 0x35
   1536e:	f7fb faff 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15372:	4620      	mov	r0, r4
   15374:	f006 fa0d 	bl	1b792 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
   15378:	b178      	cbz	r0, 1539a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
   1537a:	4620      	mov	r0, r4
   1537c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15380:	f001 bed0 	b.w	17124 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
   15384:	2805      	cmp	r0, #5
   15386:	d108      	bne.n	1539a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
   15388:	4620      	mov	r0, r4
   1538a:	f006 fa02 	bl	1b792 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
   1538e:	b920      	cbnz	r0, 1539a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
   15390:	69a8      	ldr	r0, [r5, #24]
   15392:	f500 7084 	add.w	r0, r0, #264	; 0x108
   15396:	f001 ff07 	bl	171a8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
   1539a:	4620      	mov	r0, r4
   1539c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   153a0:	f001 bf02 	b.w	171a8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
   153a4:	20001520 	.word	0x20001520
   153a8:	b510      	push	{r4, lr}
   153aa:	f7fd ff27 	bl	131fc <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
   153ae:	490a      	ldr	r1, [pc, #40]	; (153d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb1c>)
   153b0:	2000      	movs	r0, #0
   153b2:	70c8      	strb	r0, [r1, #3]
   153b4:	7708      	strb	r0, [r1, #28]
   153b6:	6188      	str	r0, [r1, #24]
   153b8:	7008      	strb	r0, [r1, #0]
   153ba:	f7fd fe71 	bl	130a0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
   153be:	4604      	mov	r4, r0
   153c0:	7800      	ldrb	r0, [r0, #0]
   153c2:	f7f9 fc6f 	bl	eca4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   153c6:	b110      	cbz	r0, 153ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb12>
   153c8:	2020      	movs	r0, #32
   153ca:	7020      	strb	r0, [r4, #0]
   153cc:	bd10      	pop	{r4, pc}
   153ce:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   153d2:	2035      	movs	r0, #53	; 0x35
   153d4:	f7fb facc 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   153d8:	20001520 	.word	0x20001520
   153dc:	b510      	push	{r4, lr}
   153de:	4c04      	ldr	r4, [pc, #16]	; (153f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb34>)
   153e0:	4601      	mov	r1, r0
   153e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   153e4:	f7f8 fed4 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   153e8:	6861      	ldr	r1, [r4, #4]
   153ea:	fbb0 f0f1 	udiv	r0, r0, r1
   153ee:	bd10      	pop	{r4, pc}
   153f0:	20001520 	.word	0x20001520
   153f4:	b510      	push	{r4, lr}
   153f6:	4c07      	ldr	r4, [pc, #28]	; (15414 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb58>)
   153f8:	4601      	mov	r1, r0
   153fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   153fc:	f7f8 fec8 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   15400:	6861      	ldr	r1, [r4, #4]
   15402:	fbb0 f2f1 	udiv	r2, r0, r1
   15406:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   15408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1540c:	4351      	muls	r1, r2
   1540e:	f7f8 be8d 	b.w	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   15412:	0000      	.short	0x0000
   15414:	20001520 	.word	0x20001520
   15418:	b570      	push	{r4, r5, r6, lr}
   1541a:	4605      	mov	r5, r0
   1541c:	480d      	ldr	r0, [pc, #52]	; (15454 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb98>)
   1541e:	460c      	mov	r4, r1
   15420:	7881      	ldrb	r1, [r0, #2]
   15422:	b1a9      	cbz	r1, 15450 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
   15424:	4a0c      	ldr	r2, [pc, #48]	; (15458 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb9c>)
   15426:	6a01      	ldr	r1, [r0, #32]
   15428:	4291      	cmp	r1, r2
   1542a:	d211      	bcs.n	15450 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
   1542c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1542e:	f7f8 fe7d 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   15432:	4606      	mov	r6, r0
   15434:	4621      	mov	r1, r4
   15436:	4628      	mov	r0, r5
   15438:	f7f8 fe78 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1543c:	4601      	mov	r1, r0
   1543e:	4630      	mov	r0, r6
   15440:	f7f8 fea6 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   15444:	2800      	cmp	r0, #0
   15446:	dd03      	ble.n	15450 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
   15448:	1a20      	subs	r0, r4, r0
   1544a:	d500      	bpl.n	1544e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb92>
   1544c:	2000      	movs	r0, #0
   1544e:	bd70      	pop	{r4, r5, r6, pc}
   15450:	4620      	mov	r0, r4
   15452:	bd70      	pop	{r4, r5, r6, pc}
   15454:	20001520 	.word	0x20001520
   15458:	07a12000 	.word	0x07a12000

0001545c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
   1545c:	4806      	ldr	r0, [pc, #24]	; (15478 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
   1545e:	4905      	ldr	r1, [pc, #20]	; (15474 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
   15460:	6501      	str	r1, [r0, #80]	; 0x50
   15462:	4906      	ldr	r1, [pc, #24]	; (1547c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
   15464:	6541      	str	r1, [r0, #84]	; 0x54
   15466:	4807      	ldr	r0, [pc, #28]	; (15484 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
   15468:	4905      	ldr	r1, [pc, #20]	; (15480 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
   1546a:	6501      	str	r1, [r0, #80]	; 0x50
   1546c:	4906      	ldr	r1, [pc, #24]	; (15488 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
   1546e:	6541      	str	r1, [r0, #84]	; 0x54
   15470:	4770      	bx	lr
   15472:	0000      	.short	0x0000
   15474:	000165b9 	.word	0x000165b9
   15478:	20000130 	.word	0x20000130
   1547c:	00016685 	.word	0x00016685
   15480:	00016cb5 	.word	0x00016cb5
   15484:	20000194 	.word	0x20000194
   15488:	00016ce5 	.word	0x00016ce5

0001548c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
   1548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1548e:	460d      	mov	r5, r1
   15490:	4607      	mov	r7, r0
   15492:	2100      	movs	r1, #0
   15494:	f005 f949 	bl	1a72a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   15498:	1e04      	subs	r4, r0, #0
   1549a:	d051      	beq.n	15540 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
   1549c:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
   154a0:	2800      	cmp	r0, #0
   154a2:	d04d      	beq.n	15540 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
   154a4:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
   154a8:	f88d 0000 	strb.w	r0, [sp]
   154ac:	9800      	ldr	r0, [sp, #0]
   154ae:	9000      	str	r0, [sp, #0]
   154b0:	f89d 0000 	ldrb.w	r0, [sp]
   154b4:	2600      	movs	r6, #0
   154b6:	b158      	cbz	r0, 154d0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
   154b8:	706e      	strb	r6, [r5, #1]
   154ba:	2009      	movs	r0, #9
   154bc:	7028      	strb	r0, [r5, #0]
   154be:	220a      	movs	r2, #10
   154c0:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
   154c4:	1d28      	adds	r0, r5, #4
   154c6:	f004 f872 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   154ca:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
   154ce:	e0e1      	b.n	15694 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
   154d0:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
   154d4:	280e      	cmp	r0, #14
   154d6:	d01d      	beq.n	15514 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
   154d8:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
   154dc:	280d      	cmp	r0, #13
   154de:	d027      	beq.n	15530 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
   154e0:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
   154e4:	f88d 0000 	strb.w	r0, [sp]
   154e8:	9800      	ldr	r0, [sp, #0]
   154ea:	9000      	str	r0, [sp, #0]
   154ec:	f89d 0000 	ldrb.w	r0, [sp]
   154f0:	b3b0      	cbz	r0, 15560 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
   154f2:	706e      	strb	r6, [r5, #1]
   154f4:	2008      	movs	r0, #8
   154f6:	7028      	strb	r0, [r5, #0]
   154f8:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
   154fc:	6068      	str	r0, [r5, #4]
   154fe:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
   15502:	60a8      	str	r0, [r5, #8]
   15504:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
   15508:	60e8      	str	r0, [r5, #12]
   1550a:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
   1550e:	f804 6c02 	strb.w	r6, [r4, #-2]
   15512:	e0bf      	b.n	15694 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
   15514:	8820      	ldrh	r0, [r4, #0]
   15516:	f7fb fe29 	bl	1116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1551a:	4607      	mov	r7, r0
   1551c:	f004 ffd5 	bl	1a4ca <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   15520:	b968      	cbnz	r0, 1553e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
   15522:	706e      	strb	r6, [r5, #1]
   15524:	200e      	movs	r0, #14
   15526:	7028      	strb	r0, [r5, #0]
   15528:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
   1552c:	6068      	str	r0, [r5, #4]
   1552e:	e011      	b.n	15554 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
   15530:	8820      	ldrh	r0, [r4, #0]
   15532:	f7fb fe1b 	bl	1116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   15536:	4607      	mov	r7, r0
   15538:	f004 ffc7 	bl	1a4ca <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   1553c:	b108      	cbz	r0, 15542 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
   1553e:	2000      	movs	r0, #0
   15540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15542:	706e      	strb	r6, [r5, #1]
   15544:	200d      	movs	r0, #13
   15546:	7028      	strb	r0, [r5, #0]
   15548:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
   1554c:	6068      	str	r0, [r5, #4]
   1554e:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
   15552:	8128      	strh	r0, [r5, #8]
   15554:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
   15558:	4638      	mov	r0, r7
   1555a:	f004 ffd1 	bl	1a500 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   1555e:	e099      	b.n	15694 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
   15560:	e7ff      	b.n	15562 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
   15562:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
   15566:	f88d 0000 	strb.w	r0, [sp]
   1556a:	9800      	ldr	r0, [sp, #0]
   1556c:	9000      	str	r0, [sp, #0]
   1556e:	f89d 0000 	ldrb.w	r0, [sp]
   15572:	b130      	cbz	r0, 15582 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
   15574:	706e      	strb	r6, [r5, #1]
   15576:	2010      	movs	r0, #16
   15578:	7028      	strb	r0, [r5, #0]
   1557a:	80af      	strh	r7, [r5, #4]
   1557c:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
   15580:	e088      	b.n	15694 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
   15582:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
   15586:	f88d 0000 	strb.w	r0, [sp]
   1558a:	9800      	ldr	r0, [sp, #0]
   1558c:	9000      	str	r0, [sp, #0]
   1558e:	f89d 0000 	ldrb.w	r0, [sp]
   15592:	b1c8      	cbz	r0, 155c8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
   15594:	706e      	strb	r6, [r5, #1]
   15596:	2015      	movs	r0, #21
   15598:	7028      	strb	r0, [r5, #0]
   1559a:	e00a      	b.n	155b2 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
   1559c:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
   155a0:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
   155a4:	6068      	str	r0, [r5, #4]
   155a6:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
   155aa:	60a8      	str	r0, [r5, #8]
   155ac:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
   155b0:	60e8      	str	r0, [r5, #12]
   155b2:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
   155b6:	f88d 0000 	strb.w	r0, [sp]
   155ba:	9800      	ldr	r0, [sp, #0]
   155bc:	9000      	str	r0, [sp, #0]
   155be:	f89d 0000 	ldrb.w	r0, [sp]
   155c2:	2800      	cmp	r0, #0
   155c4:	d1ea      	bne.n	1559c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
   155c6:	e065      	b.n	15694 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
   155c8:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
   155cc:	f88d 0000 	strb.w	r0, [sp]
   155d0:	9800      	ldr	r0, [sp, #0]
   155d2:	9000      	str	r0, [sp, #0]
   155d4:	f89d 0000 	ldrb.w	r0, [sp]
   155d8:	b158      	cbz	r0, 155f2 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
   155da:	706e      	strb	r6, [r5, #1]
   155dc:	201c      	movs	r0, #28
   155de:	7028      	strb	r0, [r5, #0]
   155e0:	220a      	movs	r2, #10
   155e2:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
   155e6:	1d28      	adds	r0, r5, #4
   155e8:	f003 ffe1 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   155ec:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
   155f0:	e050      	b.n	15694 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
   155f2:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
   155f6:	f88d 0000 	strb.w	r0, [sp]
   155fa:	9800      	ldr	r0, [sp, #0]
   155fc:	9000      	str	r0, [sp, #0]
   155fe:	f89d 0000 	ldrb.w	r0, [sp]
   15602:	b140      	cbz	r0, 15616 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
   15604:	706e      	strb	r6, [r5, #1]
   15606:	201d      	movs	r0, #29
   15608:	7028      	strb	r0, [r5, #0]
   1560a:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   1560e:	6068      	str	r0, [r5, #4]
   15610:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
   15614:	e03e      	b.n	15694 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
   15616:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
   1561a:	f88d 0000 	strb.w	r0, [sp]
   1561e:	9800      	ldr	r0, [sp, #0]
   15620:	9000      	str	r0, [sp, #0]
   15622:	f89d 0000 	ldrb.w	r0, [sp]
   15626:	b198      	cbz	r0, 15650 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
   15628:	706e      	strb	r6, [r5, #1]
   1562a:	201a      	movs	r0, #26
   1562c:	7028      	strb	r0, [r5, #0]
   1562e:	e004      	b.n	1563a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
   15630:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
   15634:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
   15638:	6068      	str	r0, [r5, #4]
   1563a:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
   1563e:	f88d 0000 	strb.w	r0, [sp]
   15642:	9800      	ldr	r0, [sp, #0]
   15644:	9000      	str	r0, [sp, #0]
   15646:	f89d 0000 	ldrb.w	r0, [sp]
   1564a:	2800      	cmp	r0, #0
   1564c:	d1f0      	bne.n	15630 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
   1564e:	e021      	b.n	15694 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
   15650:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
   15654:	f88d 0000 	strb.w	r0, [sp]
   15658:	9800      	ldr	r0, [sp, #0]
   1565a:	9000      	str	r0, [sp, #0]
   1565c:	f89d 0000 	ldrb.w	r0, [sp]
   15660:	2800      	cmp	r0, #0
   15662:	f43f af6d 	beq.w	15540 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
   15666:	706e      	strb	r6, [r5, #1]
   15668:	2016      	movs	r0, #22
   1566a:	7028      	strb	r0, [r5, #0]
   1566c:	e008      	b.n	15680 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
   1566e:	bf00      	nop
   15670:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
   15674:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
   15678:	6068      	str	r0, [r5, #4]
   1567a:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
   1567e:	8128      	strh	r0, [r5, #8]
   15680:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
   15684:	f88d 0000 	strb.w	r0, [sp]
   15688:	9800      	ldr	r0, [sp, #0]
   1568a:	9000      	str	r0, [sp, #0]
   1568c:	f89d 0000 	ldrb.w	r0, [sp]
   15690:	2800      	cmp	r0, #0
   15692:	d1ed      	bne.n	15670 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
   15694:	2001      	movs	r0, #1
   15696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015698 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
   15698:	b570      	push	{r4, r5, r6, lr}
   1569a:	4605      	mov	r5, r0
   1569c:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
   156a0:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
   156a4:	b1c9      	cbz	r1, 156da <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
   156a6:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
   156aa:	1a0c      	subs	r4, r1, r0
   156ac:	f1b4 0404 	subs.w	r4, r4, #4
   156b0:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
   156b4:	b140      	cbz	r0, 156c8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
   156b6:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
   156ba:	2300      	movs	r3, #0
   156bc:	2109      	movs	r1, #9
   156be:	f105 0078 	add.w	r0, r5, #120	; 0x78
   156c2:	f005 f9f6 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   156c6:	b160      	cbz	r0, 156e2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
   156c8:	4628      	mov	r0, r5
   156ca:	f006 fa13 	bl	1baf4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
   156ce:	b138      	cbz	r0, 156e0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
   156d0:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
   156d4:	1a40      	subs	r0, r0, r1
   156d6:	1f00      	subs	r0, r0, #4
   156d8:	e003      	b.n	156e2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
   156da:	f1c0 0402 	rsb	r4, r0, #2
   156de:	e7e7      	b.n	156b0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
   156e0:	4620      	mov	r0, r4
   156e2:	42a0      	cmp	r0, r4
   156e4:	da00      	bge.n	156e8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
   156e6:	4604      	mov	r4, r0
   156e8:	2c00      	cmp	r4, #0
   156ea:	dc01      	bgt.n	156f0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
   156ec:	2000      	movs	r0, #0
   156ee:	bd70      	pop	{r4, r5, r6, pc}
   156f0:	b2a0      	uxth	r0, r4
   156f2:	bd70      	pop	{r4, r5, r6, pc}

000156f4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
   156f4:	481b      	ldr	r0, [pc, #108]	; (15764 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
   156f6:	491a      	ldr	r1, [pc, #104]	; (15760 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
   156f8:	6081      	str	r1, [r0, #8]
   156fa:	491b      	ldr	r1, [pc, #108]	; (15768 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
   156fc:	61c1      	str	r1, [r0, #28]
   156fe:	491b      	ldr	r1, [pc, #108]	; (1576c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
   15700:	62c1      	str	r1, [r0, #44]	; 0x2c
   15702:	491b      	ldr	r1, [pc, #108]	; (15770 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
   15704:	6101      	str	r1, [r0, #16]
   15706:	491b      	ldr	r1, [pc, #108]	; (15774 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
   15708:	6141      	str	r1, [r0, #20]
   1570a:	491b      	ldr	r1, [pc, #108]	; (15778 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
   1570c:	6441      	str	r1, [r0, #68]	; 0x44
   1570e:	491b      	ldr	r1, [pc, #108]	; (1577c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
   15710:	6181      	str	r1, [r0, #24]
   15712:	491b      	ldr	r1, [pc, #108]	; (15780 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
   15714:	6301      	str	r1, [r0, #48]	; 0x30
   15716:	491b      	ldr	r1, [pc, #108]	; (15784 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
   15718:	6241      	str	r1, [r0, #36]	; 0x24
   1571a:	491b      	ldr	r1, [pc, #108]	; (15788 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
   1571c:	64c1      	str	r1, [r0, #76]	; 0x4c
   1571e:	491b      	ldr	r1, [pc, #108]	; (1578c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
   15720:	6481      	str	r1, [r0, #72]	; 0x48
   15722:	491b      	ldr	r1, [pc, #108]	; (15790 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
   15724:	6341      	str	r1, [r0, #52]	; 0x34
   15726:	481c      	ldr	r0, [pc, #112]	; (15798 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
   15728:	491a      	ldr	r1, [pc, #104]	; (15794 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
   1572a:	6081      	str	r1, [r0, #8]
   1572c:	491b      	ldr	r1, [pc, #108]	; (1579c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
   1572e:	61c1      	str	r1, [r0, #28]
   15730:	491b      	ldr	r1, [pc, #108]	; (157a0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
   15732:	6201      	str	r1, [r0, #32]
   15734:	491b      	ldr	r1, [pc, #108]	; (157a4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
   15736:	6041      	str	r1, [r0, #4]
   15738:	491b      	ldr	r1, [pc, #108]	; (157a8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
   1573a:	6001      	str	r1, [r0, #0]
   1573c:	491b      	ldr	r1, [pc, #108]	; (157ac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
   1573e:	6281      	str	r1, [r0, #40]	; 0x28
   15740:	491b      	ldr	r1, [pc, #108]	; (157b0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
   15742:	62c1      	str	r1, [r0, #44]	; 0x2c
   15744:	491b      	ldr	r1, [pc, #108]	; (157b4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
   15746:	60c1      	str	r1, [r0, #12]
   15748:	491b      	ldr	r1, [pc, #108]	; (157b8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
   1574a:	6181      	str	r1, [r0, #24]
   1574c:	491b      	ldr	r1, [pc, #108]	; (157bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
   1574e:	6301      	str	r1, [r0, #48]	; 0x30
   15750:	491b      	ldr	r1, [pc, #108]	; (157c0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
   15752:	6481      	str	r1, [r0, #72]	; 0x48
   15754:	491b      	ldr	r1, [pc, #108]	; (157c4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
   15756:	64c1      	str	r1, [r0, #76]	; 0x4c
   15758:	491b      	ldr	r1, [pc, #108]	; (157c8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
   1575a:	6441      	str	r1, [r0, #68]	; 0x44
   1575c:	4770      	bx	lr
   1575e:	0000      	.short	0x0000
   15760:	00016a41 	.word	0x00016a41
   15764:	20000130 	.word	0x20000130
   15768:	00016a7d 	.word	0x00016a7d
   1576c:	00016755 	.word	0x00016755
   15770:	00016495 	.word	0x00016495
   15774:	0001698d 	.word	0x0001698d
   15778:	000168f1 	.word	0x000168f1
   1577c:	000169cd 	.word	0x000169cd
   15780:	00016b19 	.word	0x00016b19
   15784:	000164cd 	.word	0x000164cd
   15788:	00016729 	.word	0x00016729
   1578c:	000166f5 	.word	0x000166f5
   15790:	0001697d 	.word	0x0001697d
   15794:	00016e99 	.word	0x00016e99
   15798:	20000194 	.word	0x20000194
   1579c:	00016ec9 	.word	0x00016ec9
   157a0:	00016c85 	.word	0x00016c85
   157a4:	00016be9 	.word	0x00016be9
   157a8:	00016c19 	.word	0x00016c19
   157ac:	00016d55 	.word	0x00016d55
   157b0:	00016d89 	.word	0x00016d89
   157b4:	00016c49 	.word	0x00016c49
   157b8:	00016e75 	.word	0x00016e75
   157bc:	00016f09 	.word	0x00016f09
   157c0:	00016d15 	.word	0x00016d15
   157c4:	00016d45 	.word	0x00016d45
   157c8:	00016e61 	.word	0x00016e61

000157cc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
   157cc:	4806      	ldr	r0, [pc, #24]	; (157e8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
   157ce:	4905      	ldr	r1, [pc, #20]	; (157e4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
   157d0:	6581      	str	r1, [r0, #88]	; 0x58
   157d2:	4906      	ldr	r1, [pc, #24]	; (157ec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
   157d4:	65c1      	str	r1, [r0, #92]	; 0x5c
   157d6:	4807      	ldr	r0, [pc, #28]	; (157f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
   157d8:	4905      	ldr	r1, [pc, #20]	; (157f0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
   157da:	6581      	str	r1, [r0, #88]	; 0x58
   157dc:	4906      	ldr	r1, [pc, #24]	; (157f8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
   157de:	6601      	str	r1, [r0, #96]	; 0x60
   157e0:	4770      	bx	lr
   157e2:	0000      	.short	0x0000
   157e4:	00016779 	.word	0x00016779
   157e8:	20000130 	.word	0x20000130
   157ec:	00016889 	.word	0x00016889
   157f0:	00016db5 	.word	0x00016db5
   157f4:	20000194 	.word	0x20000194
   157f8:	00016de5 	.word	0x00016de5

000157fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
   157fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157fe:	4d36      	ldr	r5, [pc, #216]	; (158d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
   15800:	2600      	movs	r6, #0
   15802:	4604      	mov	r4, r0
   15804:	6068      	str	r0, [r5, #4]
   15806:	806e      	strh	r6, [r5, #2]
   15808:	706e      	strb	r6, [r5, #1]
   1580a:	702e      	strb	r6, [r5, #0]
   1580c:	8800      	ldrh	r0, [r0, #0]
   1580e:	f7fb fedd 	bl	115cc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
   15812:	6868      	ldr	r0, [r5, #4]
   15814:	8800      	ldrh	r0, [r0, #0]
   15816:	f7fb fe81 	bl	1151c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
   1581a:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
   1581e:	6869      	ldr	r1, [r5, #4]
   15820:	1c40      	adds	r0, r0, #1
   15822:	b282      	uxth	r2, r0
   15824:	f101 0078 	add.w	r0, r1, #120	; 0x78
   15828:	f005 fafd 	bl	1ae26 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
   1582c:	b120      	cbz	r0, 15838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
   1582e:	f44f 71ac 	mov.w	r1, #344	; 0x158
   15832:	2036      	movs	r0, #54	; 0x36
   15834:	f7fb f89c 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15838:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
   1583c:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
   15840:	4630      	mov	r0, r6
   15842:	2924      	cmp	r1, #36	; 0x24
   15844:	d10a      	bne.n	1585c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
   15846:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1584a:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
   1584e:	1a51      	subs	r1, r2, r1
   15850:	b209      	sxth	r1, r1
   15852:	2900      	cmp	r1, #0
   15854:	db02      	blt.n	1585c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
   15856:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
   1585a:	e00f      	b.n	1587c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
   1585c:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
   15860:	2924      	cmp	r1, #36	; 0x24
   15862:	d001      	beq.n	15868 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
   15864:	2925      	cmp	r1, #37	; 0x25
   15866:	d10c      	bne.n	15882 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
   15868:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1586c:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
   15870:	1a51      	subs	r1, r2, r1
   15872:	b209      	sxth	r1, r1
   15874:	2900      	cmp	r1, #0
   15876:	db04      	blt.n	15882 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
   15878:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
   1587c:	f000 fd5a 	bl	16334 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
   15880:	b318      	cbz	r0, 158ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
   15882:	f000 fbfd 	bl	16080 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
   15886:	2800      	cmp	r0, #0
   15888:	d125      	bne.n	158d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
   1588a:	6868      	ldr	r0, [r5, #4]
   1588c:	3078      	adds	r0, #120	; 0x78
   1588e:	f006 f8a6 	bl	1b9de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
   15892:	b120      	cbz	r0, 1589e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
   15894:	6868      	ldr	r0, [r5, #4]
   15896:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
   1589a:	f000 faad 	bl	15df8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
   1589e:	480f      	ldr	r0, [pc, #60]	; (158dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
   158a0:	9000      	str	r0, [sp, #0]
   158a2:	4b0f      	ldr	r3, [pc, #60]	; (158e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
   158a4:	4a0f      	ldr	r2, [pc, #60]	; (158e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
   158a6:	4621      	mov	r1, r4
   158a8:	4630      	mov	r0, r6
   158aa:	f7fb ff39 	bl	11720 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
   158ae:	6868      	ldr	r0, [r5, #4]
   158b0:	2300      	movs	r3, #0
   158b2:	2105      	movs	r1, #5
   158b4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   158b8:	3078      	adds	r0, #120	; 0x78
   158ba:	f005 f8fa 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   158be:	2800      	cmp	r0, #0
   158c0:	d009      	beq.n	158d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
   158c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   158c6:	f7fb bf25 	b.w	11714 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
   158ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   158ce:	2100      	movs	r1, #0
   158d0:	4608      	mov	r0, r1
   158d2:	f000 bb81 	b.w	15fd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
   158d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   158d8:	20000120 	.word	0x20000120
   158dc:	00015fd9 	.word	0x00015fd9
   158e0:	00015a09 	.word	0x00015a09
   158e4:	000162ad 	.word	0x000162ad
   158e8:	4411      	add	r1, r2
   158ea:	78c2      	ldrb	r2, [r0, #3]
   158ec:	480c      	ldr	r0, [pc, #48]	; (15920 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
   158ee:	1d89      	adds	r1, r1, #6
   158f0:	b289      	uxth	r1, r1
   158f2:	6840      	ldr	r0, [r0, #4]
   158f4:	2a01      	cmp	r2, #1
   158f6:	d006      	beq.n	15906 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
   158f8:	b142      	cbz	r2, 1590c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
   158fa:	2a18      	cmp	r2, #24
   158fc:	d105      	bne.n	1590a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
   158fe:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
   15902:	b132      	cbz	r2, 15912 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
   15904:	e009      	b.n	1591a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
   15906:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
   1590a:	4770      	bx	lr
   1590c:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
   15910:	4770      	bx	lr
   15912:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
   15916:	b902      	cbnz	r2, 1591a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
   15918:	2100      	movs	r1, #0
   1591a:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
   1591e:	4770      	bx	lr
   15920:	20000120 	.word	0x20000120
   15924:	490b      	ldr	r1, [pc, #44]	; (15954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
   15926:	78c2      	ldrb	r2, [r0, #3]
   15928:	6849      	ldr	r1, [r1, #4]
   1592a:	2a01      	cmp	r2, #1
   1592c:	d006      	beq.n	1593c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
   1592e:	b15a      	cbz	r2, 15948 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
   15930:	2a18      	cmp	r2, #24
   15932:	d108      	bne.n	15946 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
   15934:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
   15938:	f005 bb5b 	b.w	1aff2 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
   1593c:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
   15940:	7241      	strb	r1, [r0, #9]
   15942:	0a09      	lsrs	r1, r1, #8
   15944:	7281      	strb	r1, [r0, #10]
   15946:	4770      	bx	lr
   15948:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
   1594c:	7341      	strb	r1, [r0, #13]
   1594e:	0a09      	lsrs	r1, r1, #8
   15950:	7381      	strb	r1, [r0, #14]
   15952:	4770      	bx	lr
   15954:	20000120 	.word	0x20000120
   15958:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1595a:	4c2a      	ldr	r4, [pc, #168]	; (15a04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
   1595c:	2300      	movs	r3, #0
   1595e:	4619      	mov	r1, r3
   15960:	6860      	ldr	r0, [r4, #4]
   15962:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   15966:	3078      	adds	r0, #120	; 0x78
   15968:	f005 f8a3 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1596c:	2800      	cmp	r0, #0
   1596e:	d048      	beq.n	15a02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
   15970:	6860      	ldr	r0, [r4, #4]
   15972:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
   15976:	f88d 1000 	strb.w	r1, [sp]
   1597a:	9900      	ldr	r1, [sp, #0]
   1597c:	9100      	str	r1, [sp, #0]
   1597e:	f89d 1000 	ldrb.w	r1, [sp]
   15982:	2900      	cmp	r1, #0
   15984:	d03d      	beq.n	15a02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
   15986:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   1598a:	f005 f8eb 	bl	1ab64 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   1598e:	2800      	cmp	r0, #0
   15990:	d137      	bne.n	15a02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
   15992:	6860      	ldr	r0, [r4, #4]
   15994:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
   15998:	280a      	cmp	r0, #10
   1599a:	d932      	bls.n	15a02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
   1599c:	4668      	mov	r0, sp
   1599e:	f7fc ff59 	bl	12854 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
   159a2:	2800      	cmp	r0, #0
   159a4:	d02d      	beq.n	15a02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
   159a6:	6861      	ldr	r1, [r4, #4]
   159a8:	2205      	movs	r2, #5
   159aa:	4668      	mov	r0, sp
   159ac:	318e      	adds	r1, #142	; 0x8e
   159ae:	f003 fdec 	bl	1958a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   159b2:	2500      	movs	r5, #0
   159b4:	b310      	cbz	r0, 159fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
   159b6:	6860      	ldr	r0, [r4, #4]
   159b8:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   159bc:	7808      	ldrb	r0, [r1, #0]
   159be:	b158      	cbz	r0, 159d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
   159c0:	2205      	movs	r2, #5
   159c2:	4668      	mov	r0, sp
   159c4:	1c49      	adds	r1, r1, #1
   159c6:	f003 fde0 	bl	1958a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   159ca:	2800      	cmp	r0, #0
   159cc:	d119      	bne.n	15a02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
   159ce:	6860      	ldr	r0, [r4, #4]
   159d0:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   159d4:	7800      	ldrb	r0, [r0, #0]
   159d6:	b940      	cbnz	r0, 159ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
   159d8:	6860      	ldr	r0, [r4, #4]
   159da:	9900      	ldr	r1, [sp, #0]
   159dc:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   159e0:	f8c0 1001 	str.w	r1, [r0, #1]
   159e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   159e8:	7141      	strb	r1, [r0, #5]
   159ea:	6860      	ldr	r0, [r4, #4]
   159ec:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   159f0:	7808      	ldrb	r0, [r1, #0]
   159f2:	1c40      	adds	r0, r0, #1
   159f4:	7008      	strb	r0, [r1, #0]
   159f6:	2001      	movs	r0, #1
   159f8:	f000 fd04 	bl	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   159fc:	6860      	ldr	r0, [r4, #4]
   159fe:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
   15a02:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   15a04:	20000120 	.word	0x20000120
   15a08:	4a0c      	ldr	r2, [pc, #48]	; (15a3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
   15a0a:	7851      	ldrb	r1, [r2, #1]
   15a0c:	b999      	cbnz	r1, 15a36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
   15a0e:	4611      	mov	r1, r2
   15a10:	2801      	cmp	r0, #1
   15a12:	6849      	ldr	r1, [r1, #4]
   15a14:	d008      	beq.n	15a28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
   15a16:	7890      	ldrb	r0, [r2, #2]
   15a18:	0740      	lsls	r0, r0, #29
   15a1a:	d503      	bpl.n	15a24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
   15a1c:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
   15a20:	2807      	cmp	r0, #7
   15a22:	d008      	beq.n	15a36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
   15a24:	2001      	movs	r0, #1
   15a26:	4770      	bx	lr
   15a28:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
   15a2c:	8e89      	ldrh	r1, [r1, #52]	; 0x34
   15a2e:	4288      	cmp	r0, r1
   15a30:	d801      	bhi.n	15a36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
   15a32:	f7fe bd5d 	b.w	144f0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
   15a36:	2000      	movs	r0, #0
   15a38:	4770      	bx	lr
   15a3a:	0000      	.short	0x0000
   15a3c:	20000120 	.word	0x20000120
   15a40:	b538      	push	{r3, r4, r5, lr}
   15a42:	4c87      	ldr	r4, [pc, #540]	; (15c60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
   15a44:	6860      	ldr	r0, [r4, #4]
   15a46:	3078      	adds	r0, #120	; 0x78
   15a48:	f005 ffc9 	bl	1b9de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
   15a4c:	2800      	cmp	r0, #0
   15a4e:	d15b      	bne.n	15b08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
   15a50:	6860      	ldr	r0, [r4, #4]
   15a52:	2300      	movs	r3, #0
   15a54:	2101      	movs	r1, #1
   15a56:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
   15a5a:	3078      	adds	r0, #120	; 0x78
   15a5c:	f005 f829 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15a60:	2800      	cmp	r0, #0
   15a62:	d151      	bne.n	15b08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
   15a64:	6860      	ldr	r0, [r4, #4]
   15a66:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
   15a6a:	f88d 1000 	strb.w	r1, [sp]
   15a6e:	9900      	ldr	r1, [sp, #0]
   15a70:	9100      	str	r1, [sp, #0]
   15a72:	f89d 1000 	ldrb.w	r1, [sp]
   15a76:	b109      	cbz	r1, 15a7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
   15a78:	2002      	movs	r0, #2
   15a7a:	e038      	b.n	15aee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
   15a7c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   15a80:	2300      	movs	r3, #0
   15a82:	4619      	mov	r1, r3
   15a84:	3078      	adds	r0, #120	; 0x78
   15a86:	f005 f814 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15a8a:	b128      	cbz	r0, 15a98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
   15a8c:	6860      	ldr	r0, [r4, #4]
   15a8e:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
   15a92:	b108      	cbz	r0, 15a98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
   15a94:	2012      	movs	r0, #18
   15a96:	e02a      	b.n	15aee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
   15a98:	6860      	ldr	r0, [r4, #4]
   15a9a:	2500      	movs	r5, #0
   15a9c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   15aa0:	2a12      	cmp	r2, #18
   15aa2:	d01d      	beq.n	15ae0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
   15aa4:	dc04      	bgt.n	15ab0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
   15aa6:	2a03      	cmp	r2, #3
   15aa8:	d025      	beq.n	15af6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
   15aaa:	2a11      	cmp	r2, #17
   15aac:	d104      	bne.n	15ab8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
   15aae:	e019      	b.n	15ae4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
   15ab0:	2a18      	cmp	r2, #24
   15ab2:	d01b      	beq.n	15aec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
   15ab4:	2a23      	cmp	r2, #35	; 0x23
   15ab6:	d028      	beq.n	15b0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
   15ab8:	2300      	movs	r3, #0
   15aba:	2104      	movs	r1, #4
   15abc:	3078      	adds	r0, #120	; 0x78
   15abe:	f004 fff8 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15ac2:	2800      	cmp	r0, #0
   15ac4:	d120      	bne.n	15b08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
   15ac6:	6860      	ldr	r0, [r4, #4]
   15ac8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   15acc:	2919      	cmp	r1, #25
   15ace:	d07c      	beq.n	15bca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
   15ad0:	dc22      	bgt.n	15b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
   15ad2:	2901      	cmp	r1, #1
   15ad4:	d02c      	beq.n	15b30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
   15ad6:	2902      	cmp	r1, #2
   15ad8:	d037      	beq.n	15b4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
   15ada:	2903      	cmp	r1, #3
   15adc:	d134      	bne.n	15b48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
   15ade:	e022      	b.n	15b26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
   15ae0:	200b      	movs	r0, #11
   15ae2:	e004      	b.n	15aee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
   15ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15ae8:	f000 bba0 	b.w	1622c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
   15aec:	2006      	movs	r0, #6
   15aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15af2:	f000 bc87 	b.w	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   15af6:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
   15afa:	7101      	strb	r1, [r0, #4]
   15afc:	2007      	movs	r0, #7
   15afe:	f000 fc81 	bl	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   15b02:	6860      	ldr	r0, [r4, #4]
   15b04:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
   15b08:	bd38      	pop	{r3, r4, r5, pc}
   15b0a:	2018      	movs	r0, #24
   15b0c:	f000 fc7a 	bl	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   15b10:	6860      	ldr	r0, [r4, #4]
   15b12:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
   15b16:	bd38      	pop	{r3, r4, r5, pc}
   15b18:	291d      	cmp	r1, #29
   15b1a:	d018      	beq.n	15b4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
   15b1c:	291e      	cmp	r1, #30
   15b1e:	d016      	beq.n	15b4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
   15b20:	2921      	cmp	r1, #33	; 0x21
   15b22:	d176      	bne.n	15c12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
   15b24:	e056      	b.n	15bd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
   15b26:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
   15b2a:	7141      	strb	r1, [r0, #5]
   15b2c:	2007      	movs	r0, #7
   15b2e:	e07e      	b.n	15c2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
   15b30:	200c      	movs	r0, #12
   15b32:	f000 fc67 	bl	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   15b36:	6860      	ldr	r0, [r4, #4]
   15b38:	f820 5fba 	strh.w	r5, [r0, #186]!
   15b3c:	7981      	ldrb	r1, [r0, #6]
   15b3e:	f041 0101 	orr.w	r1, r1, #1
   15b42:	7181      	strb	r1, [r0, #6]
   15b44:	f800 5c34 	strb.w	r5, [r0, #-52]
   15b48:	e063      	b.n	15c12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
   15b4a:	2013      	movs	r0, #19
   15b4c:	e037      	b.n	15bbe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
   15b4e:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
   15b52:	f88d 2000 	strb.w	r2, [sp]
   15b56:	9a00      	ldr	r2, [sp, #0]
   15b58:	9200      	str	r2, [sp, #0]
   15b5a:	f89d 2000 	ldrb.w	r2, [sp]
   15b5e:	bbaa      	cbnz	r2, 15bcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
   15b60:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
   15b64:	f88d 2000 	strb.w	r2, [sp]
   15b68:	9a00      	ldr	r2, [sp, #0]
   15b6a:	9200      	str	r2, [sp, #0]
   15b6c:	f89d 2000 	ldrb.w	r2, [sp]
   15b70:	b1aa      	cbz	r2, 15b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
   15b72:	2924      	cmp	r1, #36	; 0x24
   15b74:	d011      	beq.n	15b9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
   15b76:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   15b7a:	2924      	cmp	r1, #36	; 0x24
   15b7c:	d00d      	beq.n	15b9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
   15b7e:	2300      	movs	r3, #0
   15b80:	f500 7293 	add.w	r2, r0, #294	; 0x126
   15b84:	f500 7199 	add.w	r1, r0, #306	; 0x132
   15b88:	f005 fb6f 	bl	1b26a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   15b8c:	6860      	ldr	r0, [r4, #4]
   15b8e:	211e      	movs	r1, #30
   15b90:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
   15b94:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
   15b98:	e003      	b.n	15ba2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
   15b9a:	2301      	movs	r3, #1
   15b9c:	e7f0      	b.n	15b80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
   15b9e:	291e      	cmp	r1, #30
   15ba0:	d137      	bne.n	15c12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
   15ba2:	6860      	ldr	r0, [r4, #4]
   15ba4:	f005 fb7c 	bl	1b2a0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   15ba8:	f000 f85c 	bl	15c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
   15bac:	6861      	ldr	r1, [r4, #4]
   15bae:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   15bb2:	8bc2      	ldrh	r2, [r0, #30]
   15bb4:	f821 2ffe 	strh.w	r2, [r1, #254]!
   15bb8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   15bba:	8048      	strh	r0, [r1, #2]
   15bbc:	2015      	movs	r0, #21
   15bbe:	f000 fc21 	bl	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   15bc2:	6860      	ldr	r0, [r4, #4]
   15bc4:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
   15bc8:	e001      	b.n	15bce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
   15bca:	e02f      	b.n	15c2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
   15bcc:	e021      	b.n	15c12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
   15bce:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
   15bd2:	e01e      	b.n	15c12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
   15bd4:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
   15bd8:	2901      	cmp	r1, #1
   15bda:	d108      	bne.n	15bee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
   15bdc:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
   15be0:	f88d 1000 	strb.w	r1, [sp]
   15be4:	9900      	ldr	r1, [sp, #0]
   15be6:	9100      	str	r1, [sp, #0]
   15be8:	f89d 1000 	ldrb.w	r1, [sp]
   15bec:	b121      	cbz	r1, 15bf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
   15bee:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
   15bf2:	2902      	cmp	r1, #2
   15bf4:	d005      	beq.n	15c02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
   15bf6:	e00c      	b.n	15c12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
   15bf8:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
   15bfc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
   15c00:	e002      	b.n	15c08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
   15c02:	f850 1f62 	ldr.w	r1, [r0, #98]!
   15c06:	6840      	ldr	r0, [r0, #4]
   15c08:	f000 fc1e 	bl	16448 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
   15c0c:	2018      	movs	r0, #24
   15c0e:	f000 fbf9 	bl	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   15c12:	6860      	ldr	r0, [r4, #4]
   15c14:	3078      	adds	r0, #120	; 0x78
   15c16:	f005 fee2 	bl	1b9de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
   15c1a:	2800      	cmp	r0, #0
   15c1c:	f47f af7b 	bne.w	15b16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
   15c20:	6860      	ldr	r0, [r4, #4]
   15c22:	3078      	adds	r0, #120	; 0x78
   15c24:	f005 fedb 	bl	1b9de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
   15c28:	b128      	cbz	r0, 15c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
   15c2a:	e00f      	b.n	15c4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
   15c2c:	2011      	movs	r0, #17
   15c2e:	f000 fbe9 	bl	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   15c32:	6860      	ldr	r0, [r4, #4]
   15c34:	e7c8      	b.n	15bc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
   15c36:	6860      	ldr	r0, [r4, #4]
   15c38:	2300      	movs	r3, #0
   15c3a:	4619      	mov	r1, r3
   15c3c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   15c40:	3078      	adds	r0, #120	; 0x78
   15c42:	f004 ff36 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15c46:	b108      	cbz	r0, 15c4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
   15c48:	f000 fa44 	bl	160d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
   15c4c:	6860      	ldr	r0, [r4, #4]
   15c4e:	3078      	adds	r0, #120	; 0x78
   15c50:	f005 fec5 	bl	1b9de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
   15c54:	2800      	cmp	r0, #0
   15c56:	d1e1      	bne.n	15c1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
   15c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15c5c:	f7ff be7c 	b.w	15958 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
   15c60:	20000120 	.word	0x20000120
   15c64:	480a      	ldr	r0, [pc, #40]	; (15c90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
   15c66:	b510      	push	{r4, lr}
   15c68:	6841      	ldr	r1, [r0, #4]
   15c6a:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
   15c6e:	2801      	cmp	r0, #1
   15c70:	d009      	beq.n	15c86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
   15c72:	8808      	ldrh	r0, [r1, #0]
   15c74:	f501 72c8 	add.w	r2, r1, #400	; 0x190
   15c78:	312c      	adds	r1, #44	; 0x2c
   15c7a:	f005 fad2 	bl	1b222 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   15c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15c82:	f7fc bfb5 	b.w	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   15c86:	2002      	movs	r0, #2
   15c88:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
   15c8c:	bd10      	pop	{r4, pc}
   15c8e:	0000      	.short	0x0000
   15c90:	20000120 	.word	0x20000120
   15c94:	b570      	push	{r4, r5, r6, lr}
   15c96:	4c22      	ldr	r4, [pc, #136]	; (15d20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
   15c98:	f04f 0500 	mov.w	r5, #0
   15c9c:	8861      	ldrh	r1, [r4, #2]
   15c9e:	0748      	lsls	r0, r1, #29
   15ca0:	d510      	bpl.n	15cc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
   15ca2:	6860      	ldr	r0, [r4, #4]
   15ca4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   15ca8:	2a03      	cmp	r2, #3
   15caa:	d004      	beq.n	15cb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
   15cac:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
   15cb0:	2a07      	cmp	r2, #7
   15cb2:	d107      	bne.n	15cc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
   15cb4:	e002      	b.n	15cbc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
   15cb6:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   15cba:	e026      	b.n	15d0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
   15cbc:	2201      	movs	r2, #1
   15cbe:	7022      	strb	r2, [r4, #0]
   15cc0:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
   15cc4:	0788      	lsls	r0, r1, #30
   15cc6:	d508      	bpl.n	15cda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
   15cc8:	68a0      	ldr	r0, [r4, #8]
   15cca:	78c0      	ldrb	r0, [r0, #3]
   15ccc:	2819      	cmp	r0, #25
   15cce:	d21a      	bcs.n	15d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
   15cd0:	4914      	ldr	r1, [pc, #80]	; (15d24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
   15cd2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   15cd6:	b1b0      	cbz	r0, 15d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
   15cd8:	4780      	blx	r0
   15cda:	f000 f867 	bl	15dac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
   15cde:	f000 f823 	bl	15d28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
   15ce2:	4606      	mov	r6, r0
   15ce4:	7860      	ldrb	r0, [r4, #1]
   15ce6:	0700      	lsls	r0, r0, #28
   15ce8:	d515      	bpl.n	15d16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
   15cea:	6860      	ldr	r0, [r4, #4]
   15cec:	2300      	movs	r3, #0
   15cee:	2105      	movs	r1, #5
   15cf0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   15cf4:	3078      	adds	r0, #120	; 0x78
   15cf6:	f004 fedc 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15cfa:	b148      	cbz	r0, 15d10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
   15cfc:	6860      	ldr	r0, [r4, #4]
   15cfe:	2608      	movs	r6, #8
   15d00:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
   15d04:	e007      	b.n	15d16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
   15d06:	f240 61b1 	movw	r1, #1713	; 0x6b1
   15d0a:	2036      	movs	r0, #54	; 0x36
   15d0c:	f7fa fe30 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15d10:	2000      	movs	r0, #0
   15d12:	f7fb fddd 	bl	118d0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   15d16:	6860      	ldr	r0, [r4, #4]
   15d18:	f005 fe91 	bl	1ba3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
   15d1c:	4630      	mov	r0, r6
   15d1e:	bd70      	pop	{r4, r5, r6, pc}
   15d20:	20000120 	.word	0x20000120
   15d24:	20000194 	.word	0x20000194
   15d28:	b570      	push	{r4, r5, r6, lr}
   15d2a:	4c1e      	ldr	r4, [pc, #120]	; (15da4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
   15d2c:	2000      	movs	r0, #0
   15d2e:	78a1      	ldrb	r1, [r4, #2]
   15d30:	07c9      	lsls	r1, r1, #31
   15d32:	d01b      	beq.n	15d6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
   15d34:	68e0      	ldr	r0, [r4, #12]
   15d36:	2300      	movs	r3, #0
   15d38:	2105      	movs	r1, #5
   15d3a:	78c5      	ldrb	r5, [r0, #3]
   15d3c:	6860      	ldr	r0, [r4, #4]
   15d3e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   15d42:	3078      	adds	r0, #120	; 0x78
   15d44:	f004 feb5 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15d48:	b188      	cbz	r0, 15d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
   15d4a:	2d06      	cmp	r5, #6
   15d4c:	d00f      	beq.n	15d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
   15d4e:	dc06      	bgt.n	15d5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
   15d50:	2d02      	cmp	r5, #2
   15d52:	d00c      	beq.n	15d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
   15d54:	2d04      	cmp	r5, #4
   15d56:	d00a      	beq.n	15d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
   15d58:	2d05      	cmp	r5, #5
   15d5a:	d106      	bne.n	15d6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
   15d5c:	e007      	b.n	15d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
   15d5e:	2d0b      	cmp	r5, #11
   15d60:	d005      	beq.n	15d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
   15d62:	2d0d      	cmp	r5, #13
   15d64:	d003      	beq.n	15d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
   15d66:	2d11      	cmp	r5, #17
   15d68:	d001      	beq.n	15d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
   15d6a:	2008      	movs	r0, #8
   15d6c:	bd70      	pop	{r4, r5, r6, pc}
   15d6e:	68e0      	ldr	r0, [r4, #12]
   15d70:	f7fc fe2c 	bl	129cc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
   15d74:	b148      	cbz	r0, 15d8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
   15d76:	68e0      	ldr	r0, [r4, #12]
   15d78:	78c0      	ldrb	r0, [r0, #3]
   15d7a:	2819      	cmp	r0, #25
   15d7c:	d205      	bcs.n	15d8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
   15d7e:	490a      	ldr	r1, [pc, #40]	; (15da8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
   15d80:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   15d84:	b108      	cbz	r0, 15d8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
   15d86:	4780      	blx	r0
   15d88:	e002      	b.n	15d90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
   15d8a:	2000      	movs	r0, #0
   15d8c:	f000 fbdc 	bl	16548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
   15d90:	6861      	ldr	r1, [r4, #4]
   15d92:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
   15d96:	1c52      	adds	r2, r2, #1
   15d98:	f143 0300 	adc.w	r3, r3, #0
   15d9c:	e9c1 2300 	strd	r2, r3, [r1]
   15da0:	bd70      	pop	{r4, r5, r6, pc}
   15da2:	0000      	.short	0x0000
   15da4:	20000120 	.word	0x20000120
   15da8:	20000130 	.word	0x20000130
   15dac:	b510      	push	{r4, lr}
   15dae:	4c11      	ldr	r4, [pc, #68]	; (15df4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
   15db0:	78a0      	ldrb	r0, [r4, #2]
   15db2:	0700      	lsls	r0, r0, #28
   15db4:	d517      	bpl.n	15de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
   15db6:	6860      	ldr	r0, [r4, #4]
   15db8:	2100      	movs	r1, #0
   15dba:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
   15dbe:	f001 f97b 	bl	170b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
   15dc2:	6860      	ldr	r0, [r4, #4]
   15dc4:	3078      	adds	r0, #120	; 0x78
   15dc6:	f005 fe0a 	bl	1b9de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
   15dca:	b168      	cbz	r0, 15de8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
   15dcc:	6860      	ldr	r0, [r4, #4]
   15dce:	21fe      	movs	r1, #254	; 0xfe
   15dd0:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
   15dd4:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
   15dd8:	2908      	cmp	r1, #8
   15dda:	d104      	bne.n	15de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
   15ddc:	2102      	movs	r1, #2
   15dde:	7021      	strb	r1, [r4, #0]
   15de0:	2100      	movs	r1, #0
   15de2:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
   15de6:	bd10      	pop	{r4, pc}
   15de8:	f240 61bd 	movw	r1, #1725	; 0x6bd
   15dec:	2036      	movs	r0, #54	; 0x36
   15dee:	f7fa fdbf 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15df2:	0000      	.short	0x0000
   15df4:	20000120 	.word	0x20000120
   15df8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   15dfa:	4605      	mov	r5, r0
   15dfc:	4668      	mov	r0, sp
   15dfe:	f7fb fbcf 	bl	115a0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
   15e02:	b318      	cbz	r0, 15e4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
   15e04:	2222      	movs	r2, #34	; 0x22
   15e06:	2100      	movs	r1, #0
   15e08:	9800      	ldr	r0, [sp, #0]
   15e0a:	f003 fc4a 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   15e0e:	2103      	movs	r1, #3
   15e10:	9800      	ldr	r0, [sp, #0]
   15e12:	f005 f8d4 	bl	1afbe <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   15e16:	9800      	ldr	r0, [sp, #0]
   15e18:	7801      	ldrb	r1, [r0, #0]
   15e1a:	f021 0110 	bic.w	r1, r1, #16
   15e1e:	7001      	strb	r1, [r0, #0]
   15e20:	4629      	mov	r1, r5
   15e22:	f7fc fde3 	bl	129ec <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
   15e26:	2100      	movs	r1, #0
   15e28:	4c6a      	ldr	r4, [pc, #424]	; (15fd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
   15e2a:	2d19      	cmp	r5, #25
   15e2c:	d270      	bcs.n	15f10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
   15e2e:	e8df f005 	tbb	[pc, r5]
   15e32:	1c24      	.short	0x1c24
   15e34:	c9c94c10 	.word	0xc9c94c10
   15e38:	c97016c2 	.word	0xc97016c2
   15e3c:	c964c2c2 	.word	0xc964c2c2
   15e40:	b6c9c9c9 	.word	0xb6c9c9c9
   15e44:	8181c2c2 	.word	0x8181c2c2
   15e48:	00a3c99a 	.word	0x00a3c99a
   15e4c:	f640 014f 	movw	r1, #2127	; 0x84f
   15e50:	e0bd      	b.n	15fce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
   15e52:	6860      	ldr	r0, [r4, #4]
   15e54:	9900      	ldr	r1, [sp, #0]
   15e56:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
   15e5a:	7108      	strb	r0, [r1, #4]
   15e5c:	e0ab      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15e5e:	6861      	ldr	r1, [r4, #4]
   15e60:	9800      	ldr	r0, [sp, #0]
   15e62:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
   15e66:	7101      	strb	r1, [r0, #4]
   15e68:	e0a5      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15e6a:	6860      	ldr	r0, [r4, #4]
   15e6c:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   15e70:	9800      	ldr	r0, [sp, #0]
   15e72:	1c49      	adds	r1, r1, #1
   15e74:	f005 f883 	bl	1af7e <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
   15e78:	e09d      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15e7a:	6860      	ldr	r0, [r4, #4]
   15e7c:	9d00      	ldr	r5, [sp, #0]
   15e7e:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
   15e82:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
   15e86:	f004 ff97 	bl	1adb8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
   15e8a:	7128      	strb	r0, [r5, #4]
   15e8c:	6860      	ldr	r0, [r4, #4]
   15e8e:	9d00      	ldr	r5, [sp, #0]
   15e90:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
   15e94:	c803      	ldmia	r0, {r0, r1}
   15e96:	f004 ff84 	bl	1ada2 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
   15e9a:	7168      	strb	r0, [r5, #5]
   15e9c:	0a00      	lsrs	r0, r0, #8
   15e9e:	71a8      	strb	r0, [r5, #6]
   15ea0:	6860      	ldr	r0, [r4, #4]
   15ea2:	9d00      	ldr	r5, [sp, #0]
   15ea4:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
   15ea8:	f004 fdb9 	bl	1aa1e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   15eac:	71e8      	strb	r0, [r5, #7]
   15eae:	0a00      	lsrs	r0, r0, #8
   15eb0:	7228      	strb	r0, [r5, #8]
   15eb2:	6862      	ldr	r2, [r4, #4]
   15eb4:	9800      	ldr	r0, [sp, #0]
   15eb6:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
   15eba:	7241      	strb	r1, [r0, #9]
   15ebc:	0a09      	lsrs	r1, r1, #8
   15ebe:	7281      	strb	r1, [r0, #10]
   15ec0:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
   15ec4:	f005 f860 	bl	1af88 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
   15ec8:	e075      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15eca:	6861      	ldr	r1, [r4, #4]
   15ecc:	9800      	ldr	r0, [sp, #0]
   15ece:	f201 115b 	addw	r1, r1, #347	; 0x15b
   15ed2:	f005 f864 	bl	1af9e <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
   15ed6:	6861      	ldr	r1, [r4, #4]
   15ed8:	9800      	ldr	r0, [sp, #0]
   15eda:	f201 1163 	addw	r1, r1, #355	; 0x163
   15ede:	f005 f857 	bl	1af90 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
   15ee2:	6861      	ldr	r1, [r4, #4]
   15ee4:	9800      	ldr	r0, [sp, #0]
   15ee6:	f201 1175 	addw	r1, r1, #373	; 0x175
   15eea:	f005 f85d 	bl	1afa8 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
   15eee:	6861      	ldr	r1, [r4, #4]
   15ef0:	9800      	ldr	r0, [sp, #0]
   15ef2:	31f0      	adds	r1, #240	; 0xf0
   15ef4:	f005 f84f 	bl	1af96 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
   15ef8:	e05d      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15efa:	9800      	ldr	r0, [sp, #0]
   15efc:	220b      	movs	r2, #11
   15efe:	7102      	strb	r2, [r0, #4]
   15f00:	2259      	movs	r2, #89	; 0x59
   15f02:	7142      	strb	r2, [r0, #5]
   15f04:	7181      	strb	r1, [r0, #6]
   15f06:	21fe      	movs	r1, #254	; 0xfe
   15f08:	71c1      	strb	r1, [r0, #7]
   15f0a:	2112      	movs	r1, #18
   15f0c:	7201      	strb	r1, [r0, #8]
   15f0e:	e052      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15f10:	e058      	b.n	15fc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
   15f12:	9101      	str	r1, [sp, #4]
   15f14:	9102      	str	r1, [sp, #8]
   15f16:	f001 fe5d 	bl	17bd4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   15f1a:	f644 112f 	movw	r1, #18735	; 0x492f
   15f1e:	4008      	ands	r0, r1
   15f20:	f88d 0004 	strb.w	r0, [sp, #4]
   15f24:	0a00      	lsrs	r0, r0, #8
   15f26:	f88d 0005 	strb.w	r0, [sp, #5]
   15f2a:	a901      	add	r1, sp, #4
   15f2c:	9800      	ldr	r0, [sp, #0]
   15f2e:	f005 f841 	bl	1afb4 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
   15f32:	e040      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15f34:	6860      	ldr	r0, [r4, #4]
   15f36:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
   15f3a:	9800      	ldr	r0, [sp, #0]
   15f3c:	f005 f851 	bl	1afe2 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
   15f40:	6860      	ldr	r0, [r4, #4]
   15f42:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
   15f46:	9800      	ldr	r0, [sp, #0]
   15f48:	f005 f84f 	bl	1afea <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
   15f4c:	6860      	ldr	r0, [r4, #4]
   15f4e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
   15f52:	9800      	ldr	r0, [sp, #0]
   15f54:	f005 f83d 	bl	1afd2 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
   15f58:	6860      	ldr	r0, [r4, #4]
   15f5a:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
   15f5e:	9800      	ldr	r0, [sp, #0]
   15f60:	f005 f83b 	bl	1afda <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
   15f64:	e027      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15f66:	6861      	ldr	r1, [r4, #4]
   15f68:	9800      	ldr	r0, [sp, #0]
   15f6a:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
   15f6e:	7102      	strb	r2, [r0, #4]
   15f70:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
   15f74:	7141      	strb	r1, [r0, #5]
   15f76:	e01e      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15f78:	6860      	ldr	r0, [r4, #4]
   15f7a:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
   15f7e:	f004 fe3c 	bl	1abfa <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
   15f82:	4601      	mov	r1, r0
   15f84:	9800      	ldr	r0, [sp, #0]
   15f86:	f005 f838 	bl	1affa <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
   15f8a:	6860      	ldr	r0, [r4, #4]
   15f8c:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
   15f90:	f004 fe33 	bl	1abfa <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
   15f94:	4601      	mov	r1, r0
   15f96:	9800      	ldr	r0, [sp, #0]
   15f98:	f005 f819 	bl	1afce <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
   15f9c:	e00b      	b.n	15fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
   15f9e:	6860      	ldr	r0, [r4, #4]
   15fa0:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
   15fa4:	9800      	ldr	r0, [sp, #0]
   15fa6:	f004 ffe6 	bl	1af76 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
   15faa:	6860      	ldr	r0, [r4, #4]
   15fac:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
   15fb0:	9800      	ldr	r0, [sp, #0]
   15fb2:	f004 ffe2 	bl	1af7a <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
   15fb6:	f7fb facd 	bl	11554 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
   15fba:	b130      	cbz	r0, 15fca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
   15fbc:	9800      	ldr	r0, [sp, #0]
   15fbe:	f7ff fcb1 	bl	15924 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
   15fc2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   15fc4:	f640 01db 	movw	r1, #2267	; 0x8db
   15fc8:	e001      	b.n	15fce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
   15fca:	f640 01e1 	movw	r1, #2273	; 0x8e1
   15fce:	2036      	movs	r0, #54	; 0x36
   15fd0:	f7fa fcce 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15fd4:	20000120 	.word	0x20000120
   15fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fdc:	4c27      	ldr	r4, [pc, #156]	; (1607c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
   15fde:	4680      	mov	r8, r0
   15fe0:	460d      	mov	r5, r1
   15fe2:	8860      	ldrh	r0, [r4, #2]
   15fe4:	f04f 0600 	mov.w	r6, #0
   15fe8:	05c1      	lsls	r1, r0, #23
   15fea:	4620      	mov	r0, r4
   15fec:	6840      	ldr	r0, [r0, #4]
   15fee:	d502      	bpl.n	15ff6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
   15ff0:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
   15ff4:	e004      	b.n	16000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
   15ff6:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
   15ffa:	1c49      	adds	r1, r1, #1
   15ffc:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
   16000:	f005 fd78 	bl	1baf4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
   16004:	2701      	movs	r7, #1
   16006:	b1e0      	cbz	r0, 16042 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
   16008:	8860      	ldrh	r0, [r4, #2]
   1600a:	0500      	lsls	r0, r0, #20
   1600c:	d506      	bpl.n	1601c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
   1600e:	6860      	ldr	r0, [r4, #4]
   16010:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
   16014:	b111      	cbz	r1, 1601c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
   16016:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
   1601a:	e012      	b.n	16042 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
   1601c:	6860      	ldr	r0, [r4, #4]
   1601e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
   16022:	1c49      	adds	r1, r1, #1
   16024:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   16028:	f005 fcfa 	bl	1ba20 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
   1602c:	6860      	ldr	r0, [r4, #4]
   1602e:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
   16032:	4291      	cmp	r1, r2
   16034:	d305      	bcc.n	16042 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
   16036:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
   1603a:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
   1603e:	f7fc fdd7 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16042:	8860      	ldrh	r0, [r4, #2]
   16044:	f410 7f40 	tst.w	r0, #768	; 0x300
   16048:	d008      	beq.n	1605c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
   1604a:	6860      	ldr	r0, [r4, #4]
   1604c:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
   16050:	b921      	cbnz	r1, 1605c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
   16052:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
   16056:	2101      	movs	r1, #1
   16058:	f7fe fa6c 	bl	14534 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
   1605c:	ea58 0005 	orrs.w	r0, r8, r5
   16060:	d104      	bne.n	1606c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
   16062:	f7ff fe17 	bl	15c94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
   16066:	4605      	mov	r5, r0
   16068:	f7ff fcea 	bl	15a40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
   1606c:	4629      	mov	r1, r5
   1606e:	4640      	mov	r0, r8
   16070:	f000 ff7a 	bl	16f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
   16074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16078:	f7fb ba56 	b.w	11528 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   1607c:	20000120 	.word	0x20000120
   16080:	4813      	ldr	r0, [pc, #76]	; (160d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
   16082:	6840      	ldr	r0, [r0, #4]
   16084:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
   16088:	b129      	cbz	r1, 16096 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
   1608a:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
   1608e:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   16092:	4291      	cmp	r1, r2
   16094:	d215      	bcs.n	160c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
   16096:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
   1609a:	b129      	cbz	r1, 160a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
   1609c:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
   160a0:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   160a4:	4291      	cmp	r1, r2
   160a6:	d20c      	bcs.n	160c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
   160a8:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
   160ac:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
   160b0:	428a      	cmp	r2, r1
   160b2:	d206      	bcs.n	160c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
   160b4:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
   160b8:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
   160bc:	b11a      	cbz	r2, 160c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
   160be:	4288      	cmp	r0, r1
   160c0:	d303      	bcc.n	160ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
   160c2:	2001      	movs	r0, #1
   160c4:	4770      	bx	lr
   160c6:	2806      	cmp	r0, #6
   160c8:	d2fb      	bcs.n	160c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
   160ca:	2000      	movs	r0, #0
   160cc:	4770      	bx	lr
   160ce:	0000      	.short	0x0000
   160d0:	20000120 	.word	0x20000120
   160d4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   160d6:	4c54      	ldr	r4, [pc, #336]	; (16228 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
   160d8:	6860      	ldr	r0, [r4, #4]
   160da:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
   160de:	f88d 1000 	strb.w	r1, [sp]
   160e2:	9900      	ldr	r1, [sp, #0]
   160e4:	9100      	str	r1, [sp, #0]
   160e6:	f89d 1000 	ldrb.w	r1, [sp]
   160ea:	b129      	cbz	r1, 160f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
   160ec:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   160f0:	f004 fd38 	bl	1ab64 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   160f4:	2800      	cmp	r0, #0
   160f6:	d00a      	beq.n	1610e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
   160f8:	6860      	ldr	r0, [r4, #4]
   160fa:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
   160fe:	b181      	cbz	r1, 16122 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
   16100:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
   16104:	b149      	cbz	r1, 1611a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
   16106:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
   1610a:	b108      	cbz	r0, 16110 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
   1610c:	200a      	movs	r0, #10
   1610e:	e087      	b.n	16220 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
   16110:	f44f 61e7 	mov.w	r1, #1848	; 0x738
   16114:	2036      	movs	r0, #54	; 0x36
   16116:	f7fa fc2b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1611a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   1611e:	f000 b885 	b.w	1622c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
   16122:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
   16126:	b109      	cbz	r1, 1612c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
   16128:	2008      	movs	r0, #8
   1612a:	e079      	b.n	16220 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
   1612c:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
   16130:	2500      	movs	r5, #0
   16132:	b181      	cbz	r1, 16156 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
   16134:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
   16138:	0780      	lsls	r0, r0, #30
   1613a:	d10b      	bne.n	16154 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
   1613c:	200c      	movs	r0, #12
   1613e:	f000 f961 	bl	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   16142:	6860      	ldr	r0, [r4, #4]
   16144:	2101      	movs	r1, #1
   16146:	f820 5fb4 	strh.w	r5, [r0, #180]!
   1614a:	7101      	strb	r1, [r0, #4]
   1614c:	7b01      	ldrb	r1, [r0, #12]
   1614e:	f041 0101 	orr.w	r1, r1, #1
   16152:	7301      	strb	r1, [r0, #12]
   16154:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16156:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
   1615a:	f88d 1004 	strb.w	r1, [sp, #4]
   1615e:	9901      	ldr	r1, [sp, #4]
   16160:	9101      	str	r1, [sp, #4]
   16162:	f89d 1004 	ldrb.w	r1, [sp, #4]
   16166:	b141      	cbz	r1, 1617a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
   16168:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
   1616c:	f88d 1000 	strb.w	r1, [sp]
   16170:	9900      	ldr	r1, [sp, #0]
   16172:	9100      	str	r1, [sp, #0]
   16174:	f89d 1000 	ldrb.w	r1, [sp]
   16178:	b391      	cbz	r1, 161e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
   1617a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
   1617e:	2901      	cmp	r1, #1
   16180:	d1e8      	bne.n	16154 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
   16182:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
   16186:	f88d 1000 	strb.w	r1, [sp]
   1618a:	9900      	ldr	r1, [sp, #0]
   1618c:	9100      	str	r1, [sp, #0]
   1618e:	f89d 1000 	ldrb.w	r1, [sp]
   16192:	2900      	cmp	r1, #0
   16194:	d1de      	bne.n	16154 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
   16196:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   1619a:	f004 fce3 	bl	1ab64 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   1619e:	2800      	cmp	r0, #0
   161a0:	d1d8      	bne.n	16154 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
   161a2:	6860      	ldr	r0, [r4, #4]
   161a4:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   161a8:	f005 fc21 	bl	1b9ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
   161ac:	4605      	mov	r5, r0
   161ae:	6860      	ldr	r0, [r4, #4]
   161b0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   161b4:	f005 fc1b 	bl	1b9ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
   161b8:	4606      	mov	r6, r0
   161ba:	6860      	ldr	r0, [r4, #4]
   161bc:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
   161c0:	4628      	mov	r0, r5
   161c2:	f005 fc1f 	bl	1ba04 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
   161c6:	b350      	cbz	r0, 1621e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
   161c8:	6860      	ldr	r0, [r4, #4]
   161ca:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
   161ce:	4630      	mov	r0, r6
   161d0:	f005 fc18 	bl	1ba04 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
   161d4:	b318      	cbz	r0, 1621e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
   161d6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   161da:	2000      	movs	r0, #0
   161dc:	f000 b8ee 	b.w	163bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
   161e0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   161e4:	2924      	cmp	r1, #36	; 0x24
   161e6:	d018      	beq.n	1621a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
   161e8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   161ec:	2924      	cmp	r1, #36	; 0x24
   161ee:	d014      	beq.n	1621a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
   161f0:	f05f 0300 	movs.w	r3, #0
   161f4:	f500 7293 	add.w	r2, r0, #294	; 0x126
   161f8:	f500 7199 	add.w	r1, r0, #306	; 0x132
   161fc:	f005 f835 	bl	1b26a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   16200:	6860      	ldr	r0, [r4, #4]
   16202:	4602      	mov	r2, r0
   16204:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
   16208:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   1620c:	8bc8      	ldrh	r0, [r1, #30]
   1620e:	f822 0ffe 	strh.w	r0, [r2, #254]!
   16212:	8c48      	ldrh	r0, [r1, #34]	; 0x22
   16214:	8050      	strh	r0, [r2, #2]
   16216:	2014      	movs	r0, #20
   16218:	e002      	b.n	16220 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
   1621a:	2301      	movs	r3, #1
   1621c:	e7ea      	b.n	161f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
   1621e:	2016      	movs	r0, #22
   16220:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   16224:	f000 b8ee 	b.w	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   16228:	20000120 	.word	0x20000120
   1622c:	b510      	push	{r4, lr}
   1622e:	4c1e      	ldr	r4, [pc, #120]	; (162a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
   16230:	6862      	ldr	r2, [r4, #4]
   16232:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
   16236:	2808      	cmp	r0, #8
   16238:	d20d      	bcs.n	16256 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
   1623a:	f1c0 0108 	rsb	r1, r0, #8
   1623e:	4410      	add	r0, r2
   16240:	b2c9      	uxtb	r1, r1
   16242:	f200 1075 	addw	r0, r0, #373	; 0x175
   16246:	f7fa fc21 	bl	10a8c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1624a:	6861      	ldr	r1, [r4, #4]
   1624c:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
   16250:	4410      	add	r0, r2
   16252:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
   16256:	6862      	ldr	r2, [r4, #4]
   16258:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
   1625c:	3808      	subs	r0, #8
   1625e:	2804      	cmp	r0, #4
   16260:	d20c      	bcs.n	1627c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
   16262:	f1c0 0104 	rsb	r1, r0, #4
   16266:	4410      	add	r0, r2
   16268:	b2c9      	uxtb	r1, r1
   1626a:	30f0      	adds	r0, #240	; 0xf0
   1626c:	f7fa fc0e 	bl	10a8c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   16270:	6861      	ldr	r1, [r4, #4]
   16272:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
   16276:	4410      	add	r0, r2
   16278:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
   1627c:	6860      	ldr	r0, [r4, #4]
   1627e:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
   16282:	290c      	cmp	r1, #12
   16284:	d30e      	bcc.n	162a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
   16286:	d005      	beq.n	16294 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
   16288:	f640 1131 	movw	r1, #2353	; 0x931
   1628c:	f04f 0036 	mov.w	r0, #54	; 0x36
   16290:	f7fa fb6e 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16294:	2100      	movs	r1, #0
   16296:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
   1629a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1629e:	2003      	movs	r0, #3
   162a0:	f000 b8b0 	b.w	16404 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
   162a4:	bd10      	pop	{r4, pc}
   162a6:	0000      	.short	0x0000
   162a8:	20000120 	.word	0x20000120
   162ac:	b570      	push	{r4, r5, r6, lr}
   162ae:	4b20      	ldr	r3, [pc, #128]	; (16330 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
   162b0:	4602      	mov	r2, r0
   162b2:	460c      	mov	r4, r1
   162b4:	8858      	ldrh	r0, [r3, #2]
   162b6:	4310      	orrs	r0, r2
   162b8:	8058      	strh	r0, [r3, #2]
   162ba:	4618      	mov	r0, r3
   162bc:	0791      	lsls	r1, r2, #30
   162be:	6840      	ldr	r0, [r0, #4]
   162c0:	ea4f 71c2 	mov.w	r1, r2, lsl #31
   162c4:	d507      	bpl.n	162d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
   162c6:	b121      	cbz	r1, 162d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
   162c8:	f640 21c5 	movw	r1, #2757	; 0xac5
   162cc:	2036      	movs	r0, #54	; 0x36
   162ce:	f7fa fb4f 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   162d2:	609c      	str	r4, [r3, #8]
   162d4:	e003      	b.n	162de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
   162d6:	b101      	cbz	r1, 162da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
   162d8:	60dc      	str	r4, [r3, #12]
   162da:	0791      	lsls	r1, r2, #30
   162dc:	d515      	bpl.n	1630a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
   162de:	78e1      	ldrb	r1, [r4, #3]
   162e0:	2906      	cmp	r1, #6
   162e2:	d002      	beq.n	162ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
   162e4:	290b      	cmp	r1, #11
   162e6:	d110      	bne.n	1630a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
   162e8:	e008      	b.n	162fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
   162ea:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   162ee:	2918      	cmp	r1, #24
   162f0:	d10b      	bne.n	1630a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
   162f2:	2100      	movs	r1, #0
   162f4:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
   162f8:	2101      	movs	r1, #1
   162fa:	e004      	b.n	16306 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
   162fc:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   16300:	2912      	cmp	r1, #18
   16302:	d102      	bne.n	1630a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
   16304:	2100      	movs	r1, #0
   16306:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
   1630a:	0691      	lsls	r1, r2, #26
   1630c:	d501      	bpl.n	16312 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
   1630e:	2108      	movs	r1, #8
   16310:	7059      	strb	r1, [r3, #1]
   16312:	0611      	lsls	r1, r2, #24
   16314:	d50a      	bpl.n	1632c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
   16316:	8a82      	ldrh	r2, [r0, #20]
   16318:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
   1631c:	4620      	mov	r0, r4
   1631e:	f7ff fae3 	bl	158e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
   16322:	4620      	mov	r0, r4
   16324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16328:	f7ff bafc 	b.w	15924 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
   1632c:	bd70      	pop	{r4, r5, r6, pc}
   1632e:	0000      	.short	0x0000
   16330:	20000120 	.word	0x20000120
   16334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16338:	4c1f      	ldr	r4, [pc, #124]	; (163b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
   1633a:	2501      	movs	r5, #1
   1633c:	6862      	ldr	r2, [r4, #4]
   1633e:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
   16342:	b908      	cbnz	r0, 16348 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
   16344:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
   16348:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
   1634c:	b909      	cbnz	r1, 16352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
   1634e:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
   16352:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
   16356:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
   1635a:	3262      	adds	r2, #98	; 0x62
   1635c:	2001      	movs	r0, #1
   1635e:	7290      	strb	r0, [r2, #10]
   16360:	2000      	movs	r0, #0
   16362:	f000 f82b 	bl	163bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
   16366:	6860      	ldr	r0, [r4, #4]
   16368:	302c      	adds	r0, #44	; 0x2c
   1636a:	f004 ffed 	bl	1b348 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   1636e:	4606      	mov	r6, r0
   16370:	6860      	ldr	r0, [r4, #4]
   16372:	f004 ff95 	bl	1b2a0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   16376:	b1c0      	cbz	r0, 163aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
   16378:	6860      	ldr	r0, [r4, #4]
   1637a:	302c      	adds	r0, #44	; 0x2c
   1637c:	f004 ffe4 	bl	1b348 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   16380:	6861      	ldr	r1, [r4, #4]
   16382:	4607      	mov	r7, r0
   16384:	f501 72c8 	add.w	r2, r1, #400	; 0x190
   16388:	8808      	ldrh	r0, [r1, #0]
   1638a:	312c      	adds	r1, #44	; 0x2c
   1638c:	f004 ff49 	bl	1b222 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   16390:	42be      	cmp	r6, r7
   16392:	d20a      	bcs.n	163aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
   16394:	f7f7 feba 	bl	e10c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
   16398:	4601      	mov	r1, r0
   1639a:	1bb8      	subs	r0, r7, r6
   1639c:	2865      	cmp	r0, #101	; 0x65
   1639e:	d200      	bcs.n	163a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
   163a0:	2065      	movs	r0, #101	; 0x65
   163a2:	f7f7 fda7 	bl	def4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   163a6:	b100      	cbz	r0, 163aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
   163a8:	2500      	movs	r5, #0
   163aa:	2104      	movs	r1, #4
   163ac:	6860      	ldr	r0, [r4, #4]
   163ae:	f7fe f8c1 	bl	14534 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
   163b2:	4628      	mov	r0, r5
   163b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163b8:	20000120 	.word	0x20000120
   163bc:	b510      	push	{r4, lr}
   163be:	4c10      	ldr	r4, [pc, #64]	; (16400 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
   163c0:	6861      	ldr	r1, [r4, #4]
   163c2:	880a      	ldrh	r2, [r1, #0]
   163c4:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
   163c8:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
   163cc:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
   163d0:	f005 fb0d 	bl	1b9ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
   163d4:	6861      	ldr	r1, [r4, #4]
   163d6:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
   163da:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
   163de:	f005 fb06 	bl	1b9ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
   163e2:	6862      	ldr	r2, [r4, #4]
   163e4:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
   163e8:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
   163ec:	2001      	movs	r0, #1
   163ee:	7008      	strb	r0, [r1, #0]
   163f0:	2000      	movs	r0, #0
   163f2:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
   163f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   163fa:	f7fc bbf9 	b.w	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   163fe:	0000      	.short	0x0000
   16400:	20000120 	.word	0x20000120
   16404:	490f      	ldr	r1, [pc, #60]	; (16444 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
   16406:	280c      	cmp	r0, #12
   16408:	6849      	ldr	r1, [r1, #4]
   1640a:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
   1640e:	d014      	beq.n	1643a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
   16410:	2813      	cmp	r0, #19
   16412:	d012      	beq.n	1643a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
   16414:	2818      	cmp	r0, #24
   16416:	d010      	beq.n	1643a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
   16418:	2200      	movs	r2, #0
   1641a:	2811      	cmp	r0, #17
   1641c:	d00e      	beq.n	1643c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
   1641e:	2807      	cmp	r0, #7
   16420:	d00b      	beq.n	1643a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
   16422:	2815      	cmp	r0, #21
   16424:	d00a      	beq.n	1643c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
   16426:	2801      	cmp	r0, #1
   16428:	d007      	beq.n	1643a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
   1642a:	2800      	cmp	r0, #0
   1642c:	d005      	beq.n	1643a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
   1642e:	2802      	cmp	r0, #2
   16430:	d003      	beq.n	1643a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
   16432:	f821 2fb4 	strh.w	r2, [r1, #180]!
   16436:	2001      	movs	r0, #1
   16438:	7108      	strb	r0, [r1, #4]
   1643a:	4770      	bx	lr
   1643c:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
   16440:	4770      	bx	lr
   16442:	0000      	.short	0x0000
   16444:	20000120 	.word	0x20000120
   16448:	b538      	push	{r3, r4, r5, lr}
   1644a:	4c11      	ldr	r4, [pc, #68]	; (16490 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
   1644c:	6862      	ldr	r2, [r4, #4]
   1644e:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
   16452:	f8ad 2000 	strh.w	r2, [sp]
   16456:	f004 fc05 	bl	1ac64 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
   1645a:	f89d 3000 	ldrb.w	r3, [sp]
   1645e:	b2c2      	uxtb	r2, r0
   16460:	2100      	movs	r1, #0
   16462:	4293      	cmp	r3, r2
   16464:	d003      	beq.n	1646e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
   16466:	6863      	ldr	r3, [r4, #4]
   16468:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
   1646c:	e002      	b.n	16474 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
   1646e:	6862      	ldr	r2, [r4, #4]
   16470:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
   16474:	f89d 2001 	ldrb.w	r2, [sp, #1]
   16478:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1647c:	4282      	cmp	r2, r0
   1647e:	d003      	beq.n	16488 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
   16480:	6861      	ldr	r1, [r4, #4]
   16482:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
   16486:	bd38      	pop	{r3, r4, r5, pc}
   16488:	6860      	ldr	r0, [r4, #4]
   1648a:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
   1648e:	bd38      	pop	{r3, r4, r5, pc}
   16490:	20000120 	.word	0x20000120
   16494:	b510      	push	{r4, lr}
   16496:	4c0c      	ldr	r4, [pc, #48]	; (164c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
   16498:	6861      	ldr	r1, [r4, #4]
   1649a:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
   1649e:	2813      	cmp	r0, #19
   164a0:	d001      	beq.n	164a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
   164a2:	2002      	movs	r0, #2
   164a4:	bd10      	pop	{r4, pc}
   164a6:	f201 117d 	addw	r1, r1, #381	; 0x17d
   164aa:	68e0      	ldr	r0, [r4, #12]
   164ac:	f004 fd15 	bl	1aeda <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
   164b0:	6861      	ldr	r1, [r4, #4]
   164b2:	68e0      	ldr	r0, [r4, #12]
   164b4:	31f4      	adds	r1, #244	; 0xf4
   164b6:	f004 fd0d 	bl	1aed4 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
   164ba:	6861      	ldr	r1, [r4, #4]
   164bc:	2016      	movs	r0, #22
   164be:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   164c2:	2000      	movs	r0, #0
   164c4:	bd10      	pop	{r4, pc}
   164c6:	0000      	.short	0x0000
   164c8:	20000120 	.word	0x20000120
   164cc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   164ce:	4c1d      	ldr	r4, [pc, #116]	; (16544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
   164d0:	2300      	movs	r3, #0
   164d2:	2107      	movs	r1, #7
   164d4:	6860      	ldr	r0, [r4, #4]
   164d6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   164da:	3078      	adds	r0, #120	; 0x78
   164dc:	f004 fae9 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   164e0:	b370      	cbz	r0, 16540 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
   164e2:	4669      	mov	r1, sp
   164e4:	68e0      	ldr	r0, [r4, #12]
   164e6:	f004 fcfd 	bl	1aee4 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
   164ea:	f001 fb73 	bl	17bd4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   164ee:	f644 112f 	movw	r1, #18735	; 0x492f
   164f2:	4008      	ands	r0, r1
   164f4:	f89d 2000 	ldrb.w	r2, [sp]
   164f8:	6861      	ldr	r1, [r4, #4]
   164fa:	4002      	ands	r2, r0
   164fc:	2500      	movs	r5, #0
   164fe:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
   16502:	f89d 2001 	ldrb.w	r2, [sp, #1]
   16506:	ea02 2010 	and.w	r0, r2, r0, lsr #8
   1650a:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
   1650e:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
   16512:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
   16516:	8808      	ldrh	r0, [r1, #0]
   16518:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
   1651c:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
   16520:	9a00      	ldr	r2, [sp, #0]
   16522:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
   16526:	9a01      	ldr	r2, [sp, #4]
   16528:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
   1652c:	2001      	movs	r0, #1
   1652e:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
   16532:	f7fc fb5d 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16536:	6860      	ldr	r0, [r4, #4]
   16538:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
   1653c:	2000      	movs	r0, #0
   1653e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16540:	2001      	movs	r0, #1
   16542:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16544:	20000120 	.word	0x20000120
   16548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1654c:	4c19      	ldr	r4, [pc, #100]	; (165b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
   1654e:	2600      	movs	r6, #0
   16550:	2703      	movs	r7, #3
   16552:	f8d4 c004 	ldr.w	ip, [r4, #4]
   16556:	2501      	movs	r5, #1
   16558:	b1a0      	cbz	r0, 16584 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
   1655a:	68e0      	ldr	r0, [r4, #12]
   1655c:	78c0      	ldrb	r0, [r0, #3]
   1655e:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
   16562:	fa05 f000 	lsl.w	r0, r5, r0
   16566:	f3c0 50c0 	ubfx	r0, r0, #23, #1
   1656a:	b130      	cbz	r0, 1657a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
   1656c:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
   16570:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
   16574:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
   16578:	e017      	b.n	165aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
   1657a:	f240 5143 	movw	r1, #1347	; 0x543
   1657e:	2036      	movs	r0, #54	; 0x36
   16580:	f7fa f9f6 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16584:	2300      	movs	r3, #0
   16586:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
   1658a:	4619      	mov	r1, r3
   1658c:	f10c 0078 	add.w	r0, ip, #120	; 0x78
   16590:	f004 fa8f 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16594:	b160      	cbz	r0, 165b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
   16596:	68e0      	ldr	r0, [r4, #12]
   16598:	78c1      	ldrb	r1, [r0, #3]
   1659a:	6860      	ldr	r0, [r4, #4]
   1659c:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
   165a0:	f800 7f86 	strb.w	r7, [r0, #134]!
   165a4:	8686      	strh	r6, [r0, #52]	; 0x34
   165a6:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
   165aa:	2000      	movs	r0, #0
   165ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   165b0:	2001      	movs	r0, #1
   165b2:	e7fb      	b.n	165ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
   165b4:	20000120 	.word	0x20000120
   165b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   165bc:	4c30      	ldr	r4, [pc, #192]	; (16680 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
   165be:	2300      	movs	r3, #0
   165c0:	4619      	mov	r1, r3
   165c2:	6860      	ldr	r0, [r4, #4]
   165c4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
   165c8:	3078      	adds	r0, #120	; 0x78
   165ca:	f004 fa72 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   165ce:	b308      	cbz	r0, 16614 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
   165d0:	68e0      	ldr	r0, [r4, #12]
   165d2:	f004 fc9c 	bl	1af0e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
   165d6:	b300      	cbz	r0, 1661a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
   165d8:	68e0      	ldr	r0, [r4, #12]
   165da:	f004 fc8e 	bl	1aefa <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
   165de:	4607      	mov	r7, r0
   165e0:	68e0      	ldr	r0, [r4, #12]
   165e2:	f004 fc8e 	bl	1af02 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
   165e6:	4606      	mov	r6, r0
   165e8:	68e0      	ldr	r0, [r4, #12]
   165ea:	f004 fc84 	bl	1aef6 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
   165ee:	4605      	mov	r5, r0
   165f0:	68e0      	ldr	r0, [r4, #12]
   165f2:	f004 fc84 	bl	1aefe <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
   165f6:	4601      	mov	r1, r0
   165f8:	9700      	str	r7, [sp, #0]
   165fa:	6860      	ldr	r0, [r4, #4]
   165fc:	4633      	mov	r3, r6
   165fe:	462a      	mov	r2, r5
   16600:	302c      	adds	r0, #44	; 0x2c
   16602:	f004 fedb 	bl	1b3bc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   16606:	6861      	ldr	r1, [r4, #4]
   16608:	2501      	movs	r5, #1
   1660a:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
   1660e:	281c      	cmp	r0, #28
   16610:	d008      	beq.n	16624 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
   16612:	e009      	b.n	16628 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
   16614:	2001      	movs	r0, #1
   16616:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1661a:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1661e:	2000      	movs	r0, #0
   16620:	f7ff bf92 	b.w	16548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
   16624:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
   16628:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
   1662c:	2801      	cmp	r0, #1
   1662e:	d011      	beq.n	16654 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
   16630:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
   16634:	f88d 0004 	strb.w	r0, [sp, #4]
   16638:	9801      	ldr	r0, [sp, #4]
   1663a:	9001      	str	r0, [sp, #4]
   1663c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   16640:	b940      	cbnz	r0, 16654 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
   16642:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
   16646:	f88d 0000 	strb.w	r0, [sp]
   1664a:	9800      	ldr	r0, [sp, #0]
   1664c:	9000      	str	r0, [sp, #0]
   1664e:	f89d 0000 	ldrb.w	r0, [sp]
   16652:	b118      	cbz	r0, 1665c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
   16654:	201e      	movs	r0, #30
   16656:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
   1665a:	e00a      	b.n	16672 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
   1665c:	201d      	movs	r0, #29
   1665e:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
   16662:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
   16666:	f831 0b2c 	ldrh.w	r0, [r1], #44
   1666a:	f004 feae 	bl	1b3ca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
   1666e:	f7fc fabf 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16672:	6860      	ldr	r0, [r4, #4]
   16674:	2100      	movs	r1, #0
   16676:	f820 1fba 	strh.w	r1, [r0, #186]!
   1667a:	7085      	strb	r5, [r0, #2]
   1667c:	4608      	mov	r0, r1
   1667e:	e7ca      	b.n	16616 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
   16680:	20000120 	.word	0x20000120
   16684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16686:	4c1a      	ldr	r4, [pc, #104]	; (166f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
   16688:	2300      	movs	r3, #0
   1668a:	210a      	movs	r1, #10
   1668c:	6860      	ldr	r0, [r4, #4]
   1668e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16692:	3078      	adds	r0, #120	; 0x78
   16694:	f004 fa0d 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16698:	b338      	cbz	r0, 166ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
   1669a:	68e0      	ldr	r0, [r4, #12]
   1669c:	f004 fc37 	bl	1af0e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
   166a0:	b1c8      	cbz	r0, 166d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
   166a2:	68e0      	ldr	r0, [r4, #12]
   166a4:	f004 fc29 	bl	1aefa <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
   166a8:	4607      	mov	r7, r0
   166aa:	68e0      	ldr	r0, [r4, #12]
   166ac:	f004 fc29 	bl	1af02 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
   166b0:	4606      	mov	r6, r0
   166b2:	68e0      	ldr	r0, [r4, #12]
   166b4:	f004 fc1f 	bl	1aef6 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
   166b8:	4605      	mov	r5, r0
   166ba:	68e0      	ldr	r0, [r4, #12]
   166bc:	f004 fc1f 	bl	1aefe <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
   166c0:	4601      	mov	r1, r0
   166c2:	9700      	str	r7, [sp, #0]
   166c4:	6860      	ldr	r0, [r4, #4]
   166c6:	4633      	mov	r3, r6
   166c8:	462a      	mov	r2, r5
   166ca:	302c      	adds	r0, #44	; 0x2c
   166cc:	f004 fe76 	bl	1b3bc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   166d0:	6860      	ldr	r0, [r4, #4]
   166d2:	f004 fde5 	bl	1b2a0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   166d6:	6861      	ldr	r1, [r4, #4]
   166d8:	2000      	movs	r0, #0
   166da:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
   166de:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   166e2:	f7ff fabf 	bl	15c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
   166e6:	2000      	movs	r0, #0
   166e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   166ea:	2001      	movs	r0, #1
   166ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   166ee:	0000      	.short	0x0000
   166f0:	20000120 	.word	0x20000120
   166f4:	b510      	push	{r4, lr}
   166f6:	4c0b      	ldr	r4, [pc, #44]	; (16724 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
   166f8:	2300      	movs	r3, #0
   166fa:	4619      	mov	r1, r3
   166fc:	6860      	ldr	r0, [r4, #4]
   166fe:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
   16702:	3078      	adds	r0, #120	; 0x78
   16704:	f004 f9d5 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16708:	b150      	cbz	r0, 16720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
   1670a:	6860      	ldr	r0, [r4, #4]
   1670c:	2100      	movs	r1, #0
   1670e:	f820 1fba 	strh.w	r1, [r0, #186]!
   16712:	2101      	movs	r1, #1
   16714:	7081      	strb	r1, [r0, #2]
   16716:	2102      	movs	r1, #2
   16718:	f800 1c34 	strb.w	r1, [r0, #-52]
   1671c:	2000      	movs	r0, #0
   1671e:	bd10      	pop	{r4, pc}
   16720:	2001      	movs	r0, #1
   16722:	bd10      	pop	{r4, pc}
   16724:	20000120 	.word	0x20000120
   16728:	b510      	push	{r4, lr}
   1672a:	4c09      	ldr	r4, [pc, #36]	; (16750 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
   1672c:	2300      	movs	r3, #0
   1672e:	2109      	movs	r1, #9
   16730:	6860      	ldr	r0, [r4, #4]
   16732:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16736:	3078      	adds	r0, #120	; 0x78
   16738:	f004 f9bb 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1673c:	2800      	cmp	r0, #0
   1673e:	d006      	beq.n	1674e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
   16740:	6861      	ldr	r1, [r4, #4]
   16742:	2000      	movs	r0, #0
   16744:	f801 0fac 	strb.w	r0, [r1, #172]!
   16748:	7308      	strb	r0, [r1, #12]
   1674a:	f801 0c27 	strb.w	r0, [r1, #-39]
   1674e:	bd10      	pop	{r4, pc}
   16750:	20000120 	.word	0x20000120
   16754:	4807      	ldr	r0, [pc, #28]	; (16774 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
   16756:	6840      	ldr	r0, [r0, #4]
   16758:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   1675c:	290f      	cmp	r1, #15
   1675e:	d001      	beq.n	16764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
   16760:	2002      	movs	r0, #2
   16762:	4770      	bx	lr
   16764:	2100      	movs	r1, #0
   16766:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   1676a:	2112      	movs	r1, #18
   1676c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   16770:	2000      	movs	r0, #0
   16772:	4770      	bx	lr
   16774:	20000120 	.word	0x20000120
   16778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1677a:	4c42      	ldr	r4, [pc, #264]	; (16884 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
   1677c:	2600      	movs	r6, #0
   1677e:	b087      	sub	sp, #28
   16780:	6860      	ldr	r0, [r4, #4]
   16782:	4633      	mov	r3, r6
   16784:	4631      	mov	r1, r6
   16786:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
   1678a:	3078      	adds	r0, #120	; 0x78
   1678c:	f004 f991 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16790:	b180      	cbz	r0, 167b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
   16792:	6860      	ldr	r0, [r4, #4]
   16794:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
   16798:	2823      	cmp	r0, #35	; 0x23
   1679a:	d00e      	beq.n	167ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
   1679c:	2824      	cmp	r0, #36	; 0x24
   1679e:	d00c      	beq.n	167ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
   167a0:	4668      	mov	r0, sp
   167a2:	f7fa feeb 	bl	1157c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   167a6:	b150      	cbz	r0, 167be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
   167a8:	9800      	ldr	r0, [sp, #0]
   167aa:	a901      	add	r1, sp, #4
   167ac:	78c0      	ldrb	r0, [r0, #3]
   167ae:	f88d 0004 	strb.w	r0, [sp, #4]
   167b2:	e005      	b.n	167c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
   167b4:	2001      	movs	r0, #1
   167b6:	b007      	add	sp, #28
   167b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167ba:	2020      	movs	r0, #32
   167bc:	e7fb      	b.n	167b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
   167be:	2100      	movs	r1, #0
   167c0:	6860      	ldr	r0, [r4, #4]
   167c2:	ab04      	add	r3, sp, #16
   167c4:	2216      	movs	r2, #22
   167c6:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
   167ca:	f004 fa2e 	bl	1ac2a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
   167ce:	2700      	movs	r7, #0
   167d0:	2501      	movs	r5, #1
   167d2:	b178      	cbz	r0, 167f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
   167d4:	6860      	ldr	r0, [r4, #4]
   167d6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   167da:	2216      	movs	r2, #22
   167dc:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
   167e0:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
   167e4:	2119      	movs	r1, #25
   167e6:	f800 1f86 	strb.w	r1, [r0, #134]!
   167ea:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
   167ee:	8687      	strh	r7, [r0, #52]	; 0x34
   167f0:	2000      	movs	r0, #0
   167f2:	e7e0      	b.n	167b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
   167f4:	68e0      	ldr	r0, [r4, #12]
   167f6:	f004 fba6 	bl	1af46 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
   167fa:	b1a8      	cbz	r0, 16828 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
   167fc:	68e1      	ldr	r1, [r4, #12]
   167fe:	7908      	ldrb	r0, [r1, #4]
   16800:	f000 0207 	and.w	r2, r0, #7
   16804:	6860      	ldr	r0, [r4, #4]
   16806:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
   1680a:	7949      	ldrb	r1, [r1, #5]
   1680c:	f001 0107 	and.w	r1, r1, #7
   16810:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
   16814:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
   16818:	f88d 3018 	strb.w	r3, [sp, #24]
   1681c:	9b06      	ldr	r3, [sp, #24]
   1681e:	9301      	str	r3, [sp, #4]
   16820:	f89d 3004 	ldrb.w	r3, [sp, #4]
   16824:	bb23      	cbnz	r3, 16870 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
   16826:	e004      	b.n	16832 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
   16828:	2000      	movs	r0, #0
   1682a:	f7ff fe8d 	bl	16548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
   1682e:	4606      	mov	r6, r0
   16830:	e025      	b.n	1687e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
   16832:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   16836:	2b01      	cmp	r3, #1
   16838:	d01a      	beq.n	16870 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
   1683a:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
   1683e:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   16842:	4594      	cmp	ip, r2
   16844:	d106      	bne.n	16854 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
   16846:	781a      	ldrb	r2, [r3, #0]
   16848:	428a      	cmp	r2, r1
   1684a:	d103      	bne.n	16854 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
   1684c:	2102      	movs	r1, #2
   1684e:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
   16852:	e00d      	b.n	16870 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
   16854:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
   16858:	8802      	ldrh	r2, [r0, #0]
   1685a:	f821 2902 	strh.w	r2, [r1], #-2
   1685e:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
   16862:	710a      	strb	r2, [r1, #4]
   16864:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
   16868:	7148      	strb	r0, [r1, #5]
   1686a:	700d      	strb	r5, [r1, #0]
   1686c:	f7fc f9c0 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16870:	6860      	ldr	r0, [r4, #4]
   16872:	2121      	movs	r1, #33	; 0x21
   16874:	f800 1f86 	strb.w	r1, [r0, #134]!
   16878:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
   1687c:	8687      	strh	r7, [r0, #52]	; 0x34
   1687e:	4630      	mov	r0, r6
   16880:	e799      	b.n	167b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
   16882:	0000      	.short	0x0000
   16884:	20000120 	.word	0x20000120
   16888:	b570      	push	{r4, r5, r6, lr}
   1688a:	4c18      	ldr	r4, [pc, #96]	; (168ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
   1688c:	6860      	ldr	r0, [r4, #4]
   1688e:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
   16892:	281f      	cmp	r0, #31
   16894:	d001      	beq.n	1689a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
   16896:	2001      	movs	r0, #1
   16898:	bd70      	pop	{r4, r5, r6, pc}
   1689a:	68e0      	ldr	r0, [r4, #12]
   1689c:	f004 fb5d 	bl	1af5a <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
   168a0:	b1d8      	cbz	r0, 168da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
   168a2:	68e0      	ldr	r0, [r4, #12]
   168a4:	2201      	movs	r2, #1
   168a6:	7901      	ldrb	r1, [r0, #4]
   168a8:	7940      	ldrb	r0, [r0, #5]
   168aa:	f001 0107 	and.w	r1, r1, #7
   168ae:	f361 0507 	bfi	r5, r1, #0, #8
   168b2:	4629      	mov	r1, r5
   168b4:	f000 0007 	and.w	r0, r0, #7
   168b8:	f360 210f 	bfi	r1, r0, #8, #8
   168bc:	6860      	ldr	r0, [r4, #4]
   168be:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
   168c2:	2200      	movs	r2, #0
   168c4:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
   168c8:	2223      	movs	r2, #35	; 0x23
   168ca:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
   168ce:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
   168d2:	f7ff fdb9 	bl	16448 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
   168d6:	2000      	movs	r0, #0
   168d8:	bd70      	pop	{r4, r5, r6, pc}
   168da:	2001      	movs	r0, #1
   168dc:	f7ff fe34 	bl	16548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
   168e0:	4604      	mov	r4, r0
   168e2:	201e      	movs	r0, #30
   168e4:	f7ff fd6a 	bl	163bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
   168e8:	4620      	mov	r0, r4
   168ea:	bd70      	pop	{r4, r5, r6, pc}
   168ec:	20000120 	.word	0x20000120
   168f0:	b570      	push	{r4, r5, r6, lr}
   168f2:	4d07      	ldr	r5, [pc, #28]	; (16910 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
   168f4:	2400      	movs	r4, #0
   168f6:	68e8      	ldr	r0, [r5, #12]
   168f8:	f004 fb39 	bl	1af6e <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
   168fc:	2803      	cmp	r0, #3
   168fe:	d105      	bne.n	1690c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
   16900:	68e8      	ldr	r0, [r5, #12]
   16902:	f004 fb36 	bl	1af72 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
   16906:	f000 f805 	bl	16914 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
   1690a:	4604      	mov	r4, r0
   1690c:	4620      	mov	r0, r4
   1690e:	bd70      	pop	{r4, r5, r6, pc}
   16910:	20000120 	.word	0x20000120
   16914:	b570      	push	{r4, r5, r6, lr}
   16916:	4d18      	ldr	r5, [pc, #96]	; (16978 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
   16918:	6869      	ldr	r1, [r5, #4]
   1691a:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
   1691e:	2a16      	cmp	r2, #22
   16920:	d001      	beq.n	16926 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
   16922:	2a13      	cmp	r2, #19
   16924:	d102      	bne.n	1692c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
   16926:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
   1692a:	b10a      	cbz	r2, 16930 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
   1692c:	2002      	movs	r0, #2
   1692e:	bd70      	pop	{r4, r5, r6, pc}
   16930:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
   16934:	2400      	movs	r4, #0
   16936:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
   1693a:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
   1693e:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
   16942:	b122      	cbz	r2, 1694e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
   16944:	f240 21eb 	movw	r1, #747	; 0x2eb
   16948:	2036      	movs	r0, #54	; 0x36
   1694a:	f7fa f811 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1694e:	880a      	ldrh	r2, [r1, #0]
   16950:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
   16954:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
   16958:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
   1695c:	200d      	movs	r0, #13
   1695e:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
   16962:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
   16966:	f000 fb9b 	bl	170a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
   1696a:	f7fc f941 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1696e:	6868      	ldr	r0, [r5, #4]
   16970:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
   16974:	2000      	movs	r0, #0
   16976:	bd70      	pop	{r4, r5, r6, pc}
   16978:	20000120 	.word	0x20000120
   1697c:	4802      	ldr	r0, [pc, #8]	; (16988 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
   1697e:	68c0      	ldr	r0, [r0, #12]
   16980:	7900      	ldrb	r0, [r0, #4]
   16982:	f7ff bfc7 	b.w	16914 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
   16986:	0000      	.short	0x0000
   16988:	20000120 	.word	0x20000120
   1698c:	b510      	push	{r4, lr}
   1698e:	4c0e      	ldr	r4, [pc, #56]	; (169c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
   16990:	6860      	ldr	r0, [r4, #4]
   16992:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   16996:	2916      	cmp	r1, #22
   16998:	d001      	beq.n	1699e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
   1699a:	2002      	movs	r0, #2
   1699c:	bd10      	pop	{r4, pc}
   1699e:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
   169a2:	f200 1175 	addw	r1, r0, #373	; 0x175
   169a6:	2200      	movs	r2, #0
   169a8:	f200 1065 	addw	r0, r0, #357	; 0x165
   169ac:	f003 ffeb 	bl	1a986 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   169b0:	6860      	ldr	r0, [r4, #4]
   169b2:	2100      	movs	r1, #0
   169b4:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
   169b8:	2101      	movs	r1, #1
   169ba:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   169be:	2118      	movs	r1, #24
   169c0:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   169c4:	2000      	movs	r0, #0
   169c6:	bd10      	pop	{r4, pc}
   169c8:	20000120 	.word	0x20000120
   169cc:	b570      	push	{r4, r5, r6, lr}
   169ce:	4d1b      	ldr	r5, [pc, #108]	; (16a3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
   169d0:	6868      	ldr	r0, [r5, #4]
   169d2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   169d6:	291a      	cmp	r1, #26
   169d8:	d001      	beq.n	169de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
   169da:	2002      	movs	r0, #2
   169dc:	bd70      	pop	{r4, r5, r6, pc}
   169de:	2400      	movs	r4, #0
   169e0:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
   169e4:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
   169e8:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
   169ec:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
   169f0:	b121      	cbz	r1, 169fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
   169f2:	f240 3113 	movw	r1, #787	; 0x313
   169f6:	2036      	movs	r0, #54	; 0x36
   169f8:	f7f9 ffba 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   169fc:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
   16a00:	b141      	cbz	r1, 16a14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
   16a02:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
   16a06:	8801      	ldrh	r1, [r0, #0]
   16a08:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
   16a0c:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
   16a10:	210e      	movs	r1, #14
   16a12:	e008      	b.n	16a26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
   16a14:	8801      	ldrh	r1, [r0, #0]
   16a16:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
   16a1a:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
   16a1e:	2101      	movs	r1, #1
   16a20:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
   16a24:	210d      	movs	r1, #13
   16a26:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
   16a2a:	f000 fb39 	bl	170a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
   16a2e:	f7fc f8df 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16a32:	6868      	ldr	r0, [r5, #4]
   16a34:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
   16a38:	2000      	movs	r0, #0
   16a3a:	bd70      	pop	{r4, r5, r6, pc}
   16a3c:	20000120 	.word	0x20000120
   16a40:	b510      	push	{r4, lr}
   16a42:	4c0d      	ldr	r4, [pc, #52]	; (16a78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
   16a44:	2300      	movs	r3, #0
   16a46:	2101      	movs	r1, #1
   16a48:	6860      	ldr	r0, [r4, #4]
   16a4a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
   16a4e:	3078      	adds	r0, #120	; 0x78
   16a50:	f004 f82f 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16a54:	b108      	cbz	r0, 16a5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
   16a56:	2000      	movs	r0, #0
   16a58:	bd10      	pop	{r4, pc}
   16a5a:	68e0      	ldr	r0, [r4, #12]
   16a5c:	f004 fa53 	bl	1af06 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
   16a60:	6861      	ldr	r1, [r4, #4]
   16a62:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
   16a66:	2007      	movs	r0, #7
   16a68:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
   16a6c:	2000      	movs	r0, #0
   16a6e:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
   16a72:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
   16a76:	e7ee      	b.n	16a56 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
   16a78:	20000120 	.word	0x20000120
   16a7c:	b570      	push	{r4, r5, r6, lr}
   16a7e:	4c25      	ldr	r4, [pc, #148]	; (16b14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
   16a80:	2600      	movs	r6, #0
   16a82:	2109      	movs	r1, #9
   16a84:	6860      	ldr	r0, [r4, #4]
   16a86:	4633      	mov	r3, r6
   16a88:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16a8c:	3078      	adds	r0, #120	; 0x78
   16a8e:	f004 f810 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16a92:	2500      	movs	r5, #0
   16a94:	b118      	cbz	r0, 16a9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
   16a96:	68e0      	ldr	r0, [r4, #12]
   16a98:	7900      	ldrb	r0, [r0, #4]
   16a9a:	2812      	cmp	r0, #18
   16a9c:	d011      	beq.n	16ac2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
   16a9e:	6860      	ldr	r0, [r4, #4]
   16aa0:	210a      	movs	r1, #10
   16aa2:	2300      	movs	r3, #0
   16aa4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16aa8:	3078      	adds	r0, #120	; 0x78
   16aaa:	f004 f802 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16aae:	b118      	cbz	r0, 16ab8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
   16ab0:	68e0      	ldr	r0, [r4, #12]
   16ab2:	7900      	ldrb	r0, [r0, #4]
   16ab4:	2814      	cmp	r0, #20
   16ab6:	d008      	beq.n	16aca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
   16ab8:	68e0      	ldr	r0, [r4, #12]
   16aba:	7900      	ldrb	r0, [r0, #4]
   16abc:	2816      	cmp	r0, #22
   16abe:	d012      	beq.n	16ae6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
   16ac0:	e026      	b.n	16b10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
   16ac2:	f7ff fe31 	bl	16728 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
   16ac6:	4606      	mov	r6, r0
   16ac8:	e022      	b.n	16b10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
   16aca:	6860      	ldr	r0, [r4, #4]
   16acc:	2105      	movs	r1, #5
   16ace:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
   16ad2:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
   16ad6:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
   16ada:	30c6      	adds	r0, #198	; 0xc6
   16adc:	f004 ff0a 	bl	1b8f4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
   16ae0:	f7ff f8c0 	bl	15c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
   16ae4:	e014      	b.n	16b10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
   16ae6:	6860      	ldr	r0, [r4, #4]
   16ae8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   16aec:	291f      	cmp	r1, #31
   16aee:	d10f      	bne.n	16b10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
   16af0:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
   16af4:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
   16af8:	2108      	movs	r1, #8
   16afa:	30c6      	adds	r0, #198	; 0xc6
   16afc:	f004 fefa 	bl	1b8f4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
   16b00:	6860      	ldr	r0, [r4, #4]
   16b02:	210b      	movs	r1, #11
   16b04:	30c6      	adds	r0, #198	; 0xc6
   16b06:	f004 fef5 	bl	1b8f4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
   16b0a:	201a      	movs	r0, #26
   16b0c:	f7ff fc56 	bl	163bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
   16b10:	4630      	mov	r0, r6
   16b12:	bd70      	pop	{r4, r5, r6, pc}
   16b14:	20000120 	.word	0x20000120
   16b18:	b570      	push	{r4, r5, r6, lr}
   16b1a:	4c32      	ldr	r4, [pc, #200]	; (16be4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
   16b1c:	2300      	movs	r3, #0
   16b1e:	4619      	mov	r1, r3
   16b20:	6860      	ldr	r0, [r4, #4]
   16b22:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
   16b26:	3078      	adds	r0, #120	; 0x78
   16b28:	f003 ffc3 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16b2c:	b940      	cbnz	r0, 16b40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
   16b2e:	6860      	ldr	r0, [r4, #4]
   16b30:	2300      	movs	r3, #0
   16b32:	2108      	movs	r1, #8
   16b34:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16b38:	3078      	adds	r0, #120	; 0x78
   16b3a:	f003 ffba 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16b3e:	b1f8      	cbz	r0, 16b80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
   16b40:	6860      	ldr	r0, [r4, #4]
   16b42:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
   16b46:	0780      	lsls	r0, r0, #30
   16b48:	d412      	bmi.n	16b70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
   16b4a:	68e0      	ldr	r0, [r4, #12]
   16b4c:	f004 f9dd 	bl	1af0a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
   16b50:	6861      	ldr	r1, [r4, #4]
   16b52:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
   16b56:	68e0      	ldr	r0, [r4, #12]
   16b58:	f830 2f05 	ldrh.w	r2, [r0, #5]!
   16b5c:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
   16b60:	8840      	ldrh	r0, [r0, #2]
   16b62:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
   16b66:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
   16b6a:	f040 0002 	orr.w	r0, r0, #2
   16b6e:	7008      	strb	r0, [r1, #0]
   16b70:	6860      	ldr	r0, [r4, #4]
   16b72:	f04f 0500 	mov.w	r5, #0
   16b76:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   16b7a:	07c9      	lsls	r1, r1, #31
   16b7c:	d002      	beq.n	16b84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
   16b7e:	e010      	b.n	16ba2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
   16b80:	2001      	movs	r0, #1
   16b82:	bd70      	pop	{r4, r5, r6, pc}
   16b84:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
   16b88:	2300      	movs	r3, #0
   16b8a:	4619      	mov	r1, r3
   16b8c:	3078      	adds	r0, #120	; 0x78
   16b8e:	f003 ff90 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16b92:	b160      	cbz	r0, 16bae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
   16b94:	6860      	ldr	r0, [r4, #4]
   16b96:	2101      	movs	r1, #1
   16b98:	f800 1f86 	strb.w	r1, [r0, #134]!
   16b9c:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
   16ba0:	8685      	strh	r5, [r0, #52]	; 0x34
   16ba2:	6860      	ldr	r0, [r4, #4]
   16ba4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   16ba8:	2901      	cmp	r1, #1
   16baa:	d005      	beq.n	16bb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
   16bac:	e00a      	b.n	16bc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
   16bae:	f240 314e 	movw	r1, #846	; 0x34e
   16bb2:	2036      	movs	r0, #54	; 0x36
   16bb4:	f7f9 fedc 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16bb8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
   16bbc:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
   16bc0:	f7fc f816 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16bc4:	6860      	ldr	r0, [r4, #4]
   16bc6:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
   16bca:	b149      	cbz	r1, 16be0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
   16bcc:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
   16bd0:	f7fc f80e 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16bd4:	6860      	ldr	r0, [r4, #4]
   16bd6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   16bda:	b909      	cbnz	r1, 16be0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
   16bdc:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
   16be0:	2000      	movs	r0, #0
   16be2:	bd70      	pop	{r4, r5, r6, pc}
   16be4:	20000120 	.word	0x20000120
   16be8:	b510      	push	{r4, lr}
   16bea:	4c0a      	ldr	r4, [pc, #40]	; (16c14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
   16bec:	2300      	movs	r3, #0
   16bee:	4619      	mov	r1, r3
   16bf0:	6860      	ldr	r0, [r4, #4]
   16bf2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16bf6:	3078      	adds	r0, #120	; 0x78
   16bf8:	f003 ff5b 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16bfc:	b120      	cbz	r0, 16c08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
   16bfe:	6861      	ldr	r1, [r4, #4]
   16c00:	200c      	movs	r0, #12
   16c02:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   16c06:	bd10      	pop	{r4, pc}
   16c08:	f240 51fa 	movw	r1, #1530	; 0x5fa
   16c0c:	2036      	movs	r0, #54	; 0x36
   16c0e:	f7f9 feaf 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16c12:	0000      	.short	0x0000
   16c14:	20000120 	.word	0x20000120
   16c18:	b510      	push	{r4, lr}
   16c1a:	4c0a      	ldr	r4, [pc, #40]	; (16c44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
   16c1c:	2300      	movs	r3, #0
   16c1e:	4619      	mov	r1, r3
   16c20:	6860      	ldr	r0, [r4, #4]
   16c22:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16c26:	3078      	adds	r0, #120	; 0x78
   16c28:	f003 ff43 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16c2c:	b120      	cbz	r0, 16c38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
   16c2e:	6861      	ldr	r1, [r4, #4]
   16c30:	200d      	movs	r0, #13
   16c32:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   16c36:	bd10      	pop	{r4, pc}
   16c38:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   16c3c:	2036      	movs	r0, #54	; 0x36
   16c3e:	f7f9 fe97 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16c42:	0000      	.short	0x0000
   16c44:	20000120 	.word	0x20000120
   16c48:	b510      	push	{r4, lr}
   16c4a:	4c0d      	ldr	r4, [pc, #52]	; (16c80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
   16c4c:	2300      	movs	r3, #0
   16c4e:	4619      	mov	r1, r3
   16c50:	6860      	ldr	r0, [r4, #4]
   16c52:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16c56:	3078      	adds	r0, #120	; 0x78
   16c58:	f003 ff2b 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16c5c:	b918      	cbnz	r0, 16c66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
   16c5e:	6860      	ldr	r0, [r4, #4]
   16c60:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
   16c64:	b138      	cbz	r0, 16c76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
   16c66:	6860      	ldr	r0, [r4, #4]
   16c68:	2101      	movs	r1, #1
   16c6a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
   16c6e:	2113      	movs	r1, #19
   16c70:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   16c74:	bd10      	pop	{r4, pc}
   16c76:	f240 6115 	movw	r1, #1557	; 0x615
   16c7a:	2036      	movs	r0, #54	; 0x36
   16c7c:	f7f9 fe78 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16c80:	20000120 	.word	0x20000120
   16c84:	b510      	push	{r4, lr}
   16c86:	4c0a      	ldr	r4, [pc, #40]	; (16cb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
   16c88:	2300      	movs	r3, #0
   16c8a:	4619      	mov	r1, r3
   16c8c:	6860      	ldr	r0, [r4, #4]
   16c8e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16c92:	3078      	adds	r0, #120	; 0x78
   16c94:	f003 ff0d 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16c98:	b120      	cbz	r0, 16ca4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
   16c9a:	6861      	ldr	r1, [r4, #4]
   16c9c:	2004      	movs	r0, #4
   16c9e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   16ca2:	bd10      	pop	{r4, pc}
   16ca4:	f240 51f4 	movw	r1, #1524	; 0x5f4
   16ca8:	2036      	movs	r0, #54	; 0x36
   16caa:	f7f9 fe61 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16cae:	0000      	.short	0x0000
   16cb0:	20000120 	.word	0x20000120
   16cb4:	b510      	push	{r4, lr}
   16cb6:	4c0a      	ldr	r4, [pc, #40]	; (16ce0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
   16cb8:	2300      	movs	r3, #0
   16cba:	4619      	mov	r1, r3
   16cbc:	6860      	ldr	r0, [r4, #4]
   16cbe:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16cc2:	3078      	adds	r0, #120	; 0x78
   16cc4:	f003 fef5 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16cc8:	b120      	cbz	r0, 16cd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
   16cca:	6861      	ldr	r1, [r4, #4]
   16ccc:	201c      	movs	r0, #28
   16cce:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   16cd2:	bd10      	pop	{r4, pc}
   16cd4:	f240 614c 	movw	r1, #1612	; 0x64c
   16cd8:	2036      	movs	r0, #54	; 0x36
   16cda:	f7f9 fe49 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16cde:	0000      	.short	0x0000
   16ce0:	20000120 	.word	0x20000120
   16ce4:	b510      	push	{r4, lr}
   16ce6:	4c0a      	ldr	r4, [pc, #40]	; (16d10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
   16ce8:	2300      	movs	r3, #0
   16cea:	4619      	mov	r1, r3
   16cec:	6860      	ldr	r0, [r4, #4]
   16cee:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
   16cf2:	3078      	adds	r0, #120	; 0x78
   16cf4:	f003 fedd 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16cf8:	b120      	cbz	r0, 16d04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
   16cfa:	6861      	ldr	r1, [r4, #4]
   16cfc:	2000      	movs	r0, #0
   16cfe:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
   16d02:	bd10      	pop	{r4, pc}
   16d04:	f240 6153 	movw	r1, #1619	; 0x653
   16d08:	2036      	movs	r0, #54	; 0x36
   16d0a:	f7f9 fe31 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16d0e:	0000      	.short	0x0000
   16d10:	20000120 	.word	0x20000120
   16d14:	b510      	push	{r4, lr}
   16d16:	4c0a      	ldr	r4, [pc, #40]	; (16d40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
   16d18:	2300      	movs	r3, #0
   16d1a:	4619      	mov	r1, r3
   16d1c:	6860      	ldr	r0, [r4, #4]
   16d1e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16d22:	3078      	adds	r0, #120	; 0x78
   16d24:	f003 fec5 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16d28:	b120      	cbz	r0, 16d34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
   16d2a:	6861      	ldr	r1, [r4, #4]
   16d2c:	2005      	movs	r0, #5
   16d2e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   16d32:	bd10      	pop	{r4, pc}
   16d34:	f240 613f 	movw	r1, #1599	; 0x63f
   16d38:	2036      	movs	r0, #54	; 0x36
   16d3a:	f7f9 fe19 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16d3e:	0000      	.short	0x0000
   16d40:	20000120 	.word	0x20000120
   16d44:	4902      	ldr	r1, [pc, #8]	; (16d50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
   16d46:	2000      	movs	r0, #0
   16d48:	6849      	ldr	r1, [r1, #4]
   16d4a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
   16d4e:	4770      	bx	lr
   16d50:	20000120 	.word	0x20000120
   16d54:	b510      	push	{r4, lr}
   16d56:	4c0b      	ldr	r4, [pc, #44]	; (16d84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
   16d58:	2300      	movs	r3, #0
   16d5a:	4619      	mov	r1, r3
   16d5c:	6860      	ldr	r0, [r4, #4]
   16d5e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16d62:	3078      	adds	r0, #120	; 0x78
   16d64:	f003 fea5 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16d68:	b138      	cbz	r0, 16d7a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
   16d6a:	6860      	ldr	r0, [r4, #4]
   16d6c:	2101      	movs	r1, #1
   16d6e:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
   16d72:	210f      	movs	r1, #15
   16d74:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   16d78:	bd10      	pop	{r4, pc}
   16d7a:	f240 6106 	movw	r1, #1542	; 0x606
   16d7e:	2036      	movs	r0, #54	; 0x36
   16d80:	f7f9 fdf6 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16d84:	20000120 	.word	0x20000120
   16d88:	4809      	ldr	r0, [pc, #36]	; (16db0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
   16d8a:	b510      	push	{r4, lr}
   16d8c:	6840      	ldr	r0, [r0, #4]
   16d8e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   16d92:	2912      	cmp	r1, #18
   16d94:	d004      	beq.n	16da0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
   16d96:	f240 610e 	movw	r1, #1550	; 0x60e
   16d9a:	2036      	movs	r0, #54	; 0x36
   16d9c:	f7f9 fde8 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16da0:	2101      	movs	r1, #1
   16da2:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
   16da6:	2111      	movs	r1, #17
   16da8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   16dac:	bd10      	pop	{r4, pc}
   16dae:	0000      	.short	0x0000
   16db0:	20000120 	.word	0x20000120
   16db4:	b510      	push	{r4, lr}
   16db6:	4c0a      	ldr	r4, [pc, #40]	; (16de0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
   16db8:	2300      	movs	r3, #0
   16dba:	4619      	mov	r1, r3
   16dbc:	6860      	ldr	r0, [r4, #4]
   16dbe:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16dc2:	3078      	adds	r0, #120	; 0x78
   16dc4:	f003 fe75 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16dc8:	b120      	cbz	r0, 16dd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
   16dca:	6861      	ldr	r1, [r4, #4]
   16dcc:	201f      	movs	r0, #31
   16dce:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   16dd2:	bd10      	pop	{r4, pc}
   16dd4:	f240 615c 	movw	r1, #1628	; 0x65c
   16dd8:	2036      	movs	r0, #54	; 0x36
   16dda:	f7f9 fdc9 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16dde:	0000      	.short	0x0000
   16de0:	20000120 	.word	0x20000120
   16de4:	b570      	push	{r4, r5, r6, lr}
   16de6:	4c1d      	ldr	r4, [pc, #116]	; (16e5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
   16de8:	6860      	ldr	r0, [r4, #4]
   16dea:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
   16dee:	b911      	cbnz	r1, 16df6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
   16df0:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
   16df4:	b179      	cbz	r1, 16e16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
   16df6:	2100      	movs	r1, #0
   16df8:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
   16dfc:	2224      	movs	r2, #36	; 0x24
   16dfe:	2500      	movs	r5, #0
   16e00:	2b21      	cmp	r3, #33	; 0x21
   16e02:	d00a      	beq.n	16e1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
   16e04:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
   16e08:	2b23      	cmp	r3, #35	; 0x23
   16e0a:	d01a      	beq.n	16e42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
   16e0c:	f44f 61d1 	mov.w	r1, #1672	; 0x688
   16e10:	2036      	movs	r0, #54	; 0x36
   16e12:	f7f9 fdad 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16e16:	2101      	movs	r1, #1
   16e18:	e7ee      	b.n	16df8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
   16e1a:	b161      	cbz	r1, 16e36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
   16e1c:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
   16e20:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
   16e24:	2801      	cmp	r0, #1
   16e26:	d102      	bne.n	16e2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
   16e28:	2000      	movs	r0, #0
   16e2a:	f7ff fac7 	bl	163bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
   16e2e:	6860      	ldr	r0, [r4, #4]
   16e30:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
   16e34:	e001      	b.n	16e3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
   16e36:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
   16e3a:	6860      	ldr	r0, [r4, #4]
   16e3c:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
   16e40:	bd70      	pop	{r4, r5, r6, pc}
   16e42:	b129      	cbz	r1, 16e50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
   16e44:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
   16e48:	2000      	movs	r0, #0
   16e4a:	f7ff fab7 	bl	163bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
   16e4e:	e001      	b.n	16e54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
   16e50:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
   16e54:	6860      	ldr	r0, [r4, #4]
   16e56:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
   16e5a:	bd70      	pop	{r4, r5, r6, pc}
   16e5c:	20000120 	.word	0x20000120
   16e60:	4903      	ldr	r1, [pc, #12]	; (16e70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
   16e62:	2000      	movs	r0, #0
   16e64:	6849      	ldr	r1, [r1, #4]
   16e66:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
   16e6a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
   16e6e:	4770      	bx	lr
   16e70:	20000120 	.word	0x20000120
   16e74:	4807      	ldr	r0, [pc, #28]	; (16e94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
   16e76:	b510      	push	{r4, lr}
   16e78:	6840      	ldr	r0, [r0, #4]
   16e7a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   16e7e:	2918      	cmp	r1, #24
   16e80:	d004      	beq.n	16e8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
   16e82:	f240 611e 	movw	r1, #1566	; 0x61e
   16e86:	2036      	movs	r0, #54	; 0x36
   16e88:	f7f9 fd72 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16e8c:	211a      	movs	r1, #26
   16e8e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   16e92:	bd10      	pop	{r4, pc}
   16e94:	20000120 	.word	0x20000120
   16e98:	b510      	push	{r4, lr}
   16e9a:	4c0a      	ldr	r4, [pc, #40]	; (16ec4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
   16e9c:	2300      	movs	r3, #0
   16e9e:	2101      	movs	r1, #1
   16ea0:	6860      	ldr	r0, [r4, #4]
   16ea2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
   16ea6:	3078      	adds	r0, #120	; 0x78
   16ea8:	f003 fe03 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16eac:	2800      	cmp	r0, #0
   16eae:	d108      	bne.n	16ec2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
   16eb0:	6860      	ldr	r0, [r4, #4]
   16eb2:	2108      	movs	r1, #8
   16eb4:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
   16eb8:	2100      	movs	r1, #0
   16eba:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
   16ebe:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
   16ec2:	bd10      	pop	{r4, pc}
   16ec4:	20000120 	.word	0x20000120
   16ec8:	b570      	push	{r4, r5, r6, lr}
   16eca:	4c0e      	ldr	r4, [pc, #56]	; (16f04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
   16ecc:	2300      	movs	r3, #0
   16ece:	4619      	mov	r1, r3
   16ed0:	6860      	ldr	r0, [r4, #4]
   16ed2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
   16ed6:	3078      	adds	r0, #120	; 0x78
   16ed8:	f003 fdeb 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16edc:	2500      	movs	r5, #0
   16ede:	b110      	cbz	r0, 16ee6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
   16ee0:	6860      	ldr	r0, [r4, #4]
   16ee2:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
   16ee6:	6860      	ldr	r0, [r4, #4]
   16ee8:	2300      	movs	r3, #0
   16eea:	4619      	mov	r1, r3
   16eec:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16ef0:	3078      	adds	r0, #120	; 0x78
   16ef2:	f003 fdde 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16ef6:	2800      	cmp	r0, #0
   16ef8:	d002      	beq.n	16f00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
   16efa:	6860      	ldr	r0, [r4, #4]
   16efc:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
   16f00:	bd70      	pop	{r4, r5, r6, pc}
   16f02:	0000      	.short	0x0000
   16f04:	20000120 	.word	0x20000120
   16f08:	b570      	push	{r4, r5, r6, lr}
   16f0a:	4d16      	ldr	r5, [pc, #88]	; (16f64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
   16f0c:	f04f 0400 	mov.w	r4, #0
   16f10:	6868      	ldr	r0, [r5, #4]
   16f12:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   16f16:	0789      	lsls	r1, r1, #30
   16f18:	d411      	bmi.n	16f3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
   16f1a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   16f1e:	2300      	movs	r3, #0
   16f20:	4619      	mov	r1, r3
   16f22:	3078      	adds	r0, #120	; 0x78
   16f24:	f003 fdc5 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16f28:	b120      	cbz	r0, 16f34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
   16f2a:	6869      	ldr	r1, [r5, #4]
   16f2c:	2001      	movs	r0, #1
   16f2e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
   16f32:	e008      	b.n	16f46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
   16f34:	f240 612b 	movw	r1, #1579	; 0x62b
   16f38:	2036      	movs	r0, #54	; 0x36
   16f3a:	f7f9 fd19 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16f3e:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
   16f42:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
   16f46:	6868      	ldr	r0, [r5, #4]
   16f48:	2300      	movs	r3, #0
   16f4a:	4619      	mov	r1, r3
   16f4c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
   16f50:	3078      	adds	r0, #120	; 0x78
   16f52:	f003 fdae 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16f56:	2800      	cmp	r0, #0
   16f58:	d002      	beq.n	16f60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
   16f5a:	6868      	ldr	r0, [r5, #4]
   16f5c:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
   16f60:	bd70      	pop	{r4, r5, r6, pc}
   16f62:	0000      	.short	0x0000
   16f64:	20000120 	.word	0x20000120
   16f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f6a:	4d4c      	ldr	r5, [pc, #304]	; (1709c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
   16f6c:	4607      	mov	r7, r0
   16f6e:	460e      	mov	r6, r1
   16f70:	6868      	ldr	r0, [r5, #4]
   16f72:	f100 0478 	add.w	r4, r0, #120	; 0x78
   16f76:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
   16f7a:	f88d 0000 	strb.w	r0, [sp]
   16f7e:	9800      	ldr	r0, [sp, #0]
   16f80:	9000      	str	r0, [sp, #0]
   16f82:	f89d 0000 	ldrb.w	r0, [sp]
   16f86:	b930      	cbnz	r0, 16f96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
   16f88:	7c22      	ldrb	r2, [r4, #16]
   16f8a:	2300      	movs	r3, #0
   16f8c:	2101      	movs	r1, #1
   16f8e:	4620      	mov	r0, r4
   16f90:	f003 fd8f 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16f94:	b110      	cbz	r0, 16f9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
   16f96:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
   16f98:	1c40      	adds	r0, r0, #1
   16f9a:	8760      	strh	r0, [r4, #58]	; 0x3a
   16f9c:	2001      	movs	r0, #1
   16f9e:	213d      	movs	r1, #61	; 0x3d
   16fa0:	bbf7      	cbnz	r7, 17020 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
   16fa2:	782a      	ldrb	r2, [r5, #0]
   16fa4:	2a02      	cmp	r2, #2
   16fa6:	d006      	beq.n	16fb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
   16fa8:	2a01      	cmp	r2, #1
   16faa:	d006      	beq.n	16fba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
   16fac:	b1c6      	cbz	r6, 16fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
   16fae:	06f2      	lsls	r2, r6, #27
   16fb0:	d507      	bpl.n	16fc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
   16fb2:	211e      	movs	r1, #30
   16fb4:	e043      	b.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   16fb6:	2116      	movs	r1, #22
   16fb8:	e041      	b.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   16fba:	6869      	ldr	r1, [r5, #4]
   16fbc:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
   16fc0:	e03d      	b.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   16fc2:	0732      	lsls	r2, r6, #28
   16fc4:	d43b      	bmi.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   16fc6:	07b1      	lsls	r1, r6, #30
   16fc8:	d001      	beq.n	16fce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
   16fca:	212a      	movs	r1, #42	; 0x2a
   16fcc:	e037      	b.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   16fce:	06b1      	lsls	r1, r6, #26
   16fd0:	d404      	bmi.n	16fdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
   16fd2:	f44f 6135 	mov.w	r1, #2896	; 0xb50
   16fd6:	2036      	movs	r0, #54	; 0x36
   16fd8:	f7f9 fcca 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16fdc:	2123      	movs	r1, #35	; 0x23
   16fde:	e02e      	b.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   16fe0:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   16fe4:	b129      	cbz	r1, 16ff2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
   16fe6:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
   16fe8:	1c4a      	adds	r2, r1, #1
   16fea:	87a2      	strh	r2, [r4, #60]	; 0x3c
   16fec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   16fee:	4291      	cmp	r1, r2
   16ff0:	d21d      	bcs.n	1702e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
   16ff2:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   16ff6:	b139      	cbz	r1, 17008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
   16ff8:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   16ffc:	1c4a      	adds	r2, r1, #1
   16ffe:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
   17002:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   17004:	4291      	cmp	r1, r2
   17006:	d212      	bcs.n	1702e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
   17008:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
   1700a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   1700c:	428a      	cmp	r2, r1
   1700e:	d30b      	bcc.n	17028 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
   17010:	686b      	ldr	r3, [r5, #4]
   17012:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   17016:	f88d 3000 	strb.w	r3, [sp]
   1701a:	9b00      	ldr	r3, [sp, #0]
   1701c:	9300      	str	r3, [sp, #0]
   1701e:	e000      	b.n	17022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
   17020:	e00d      	b.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   17022:	f89d 3000 	ldrb.w	r3, [sp]
   17026:	b913      	cbnz	r3, 1702e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
   17028:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   1702a:	429a      	cmp	r2, r3
   1702c:	d301      	bcc.n	17032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
   1702e:	2122      	movs	r1, #34	; 0x22
   17030:	e005      	b.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   17032:	7c62      	ldrb	r2, [r4, #17]
   17034:	b1f2      	cbz	r2, 17074 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
   17036:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   17038:	428a      	cmp	r2, r1
   1703a:	d304      	bcc.n	17046 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
   1703c:	2108      	movs	r1, #8
   1703e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
   17042:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
   17046:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1704a:	f88d 0000 	strb.w	r0, [sp]
   1704e:	9800      	ldr	r0, [sp, #0]
   17050:	9000      	str	r0, [sp, #0]
   17052:	f89d 0000 	ldrb.w	r0, [sp]
   17056:	b1d8      	cbz	r0, 17090 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
   17058:	2000      	movs	r0, #0
   1705a:	7360      	strb	r0, [r4, #13]
   1705c:	73a0      	strb	r0, [r4, #14]
   1705e:	7460      	strb	r0, [r4, #17]
   17060:	2102      	movs	r1, #2
   17062:	6868      	ldr	r0, [r5, #4]
   17064:	f7fd fa66 	bl	14534 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
   17068:	6868      	ldr	r0, [r5, #4]
   1706a:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
   1706e:	2901      	cmp	r1, #1
   17070:	d005      	beq.n	1707e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
   17072:	e009      	b.n	17088 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
   17074:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   17076:	2906      	cmp	r1, #6
   17078:	d3e5      	bcc.n	17046 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
   1707a:	213e      	movs	r1, #62	; 0x3e
   1707c:	e7df      	b.n	1703e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
   1707e:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   17082:	7801      	ldrb	r1, [r0, #0]
   17084:	1e49      	subs	r1, r1, #1
   17086:	7001      	strb	r1, [r0, #0]
   17088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1708c:	f7fb bdb0 	b.w	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   17090:	6868      	ldr	r0, [r5, #4]
   17092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   17096:	2100      	movs	r1, #0
   17098:	f7fd ba4c 	b.w	14534 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
   1709c:	20000120 	.word	0x20000120
   170a0:	4804      	ldr	r0, [pc, #16]	; (170b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
   170a2:	b510      	push	{r4, lr}
   170a4:	6840      	ldr	r0, [r0, #4]
   170a6:	8800      	ldrh	r0, [r0, #0]
   170a8:	f7fa f860 	bl	1116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   170ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   170b0:	f003 ba2c 	b.w	1a50c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
   170b4:	20000120 	.word	0x20000120
   170b8:	4a19      	ldr	r2, [pc, #100]	; (17120 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
   170ba:	2901      	cmp	r1, #1
   170bc:	6852      	ldr	r2, [r2, #4]
   170be:	d010      	beq.n	170e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
   170c0:	2100      	movs	r1, #0
   170c2:	b1c8      	cbz	r0, 170f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
   170c4:	2801      	cmp	r0, #1
   170c6:	d022      	beq.n	1710e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
   170c8:	2803      	cmp	r0, #3
   170ca:	d109      	bne.n	170e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
   170cc:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
   170d0:	2813      	cmp	r0, #19
   170d2:	d005      	beq.n	170e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
   170d4:	2816      	cmp	r0, #22
   170d6:	d003      	beq.n	170e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
   170d8:	2818      	cmp	r0, #24
   170da:	d001      	beq.n	170e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
   170dc:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
   170e0:	4770      	bx	lr
   170e2:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
   170e6:	2801      	cmp	r0, #1
   170e8:	d0fa      	beq.n	170e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
   170ea:	bf00      	nop
   170ec:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
   170f0:	7801      	ldrb	r1, [r0, #0]
   170f2:	1e49      	subs	r1, r1, #1
   170f4:	7001      	strb	r1, [r0, #0]
   170f6:	4770      	bx	lr
   170f8:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
   170fc:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
   17100:	1ac0      	subs	r0, r0, r3
   17102:	b200      	sxth	r0, r0
   17104:	2800      	cmp	r0, #0
   17106:	dbf6      	blt.n	170f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
   17108:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
   1710c:	4770      	bx	lr
   1710e:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
   17112:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
   17116:	1a40      	subs	r0, r0, r1
   17118:	b200      	sxth	r0, r0
   1711a:	2800      	cmp	r0, #0
   1711c:	dae6      	bge.n	170ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
   1711e:	4770      	bx	lr
   17120:	20000120 	.word	0x20000120

00017124 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
   17124:	b510      	push	{r4, lr}
   17126:	6941      	ldr	r1, [r0, #20]
   17128:	b119      	cbz	r1, 17132 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
   1712a:	6842      	ldr	r2, [r0, #4]
   1712c:	684b      	ldr	r3, [r1, #4]
   1712e:	429a      	cmp	r2, r3
   17130:	d203      	bcs.n	1713a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
   17132:	21c1      	movs	r1, #193	; 0xc1
   17134:	2037      	movs	r0, #55	; 0x37
   17136:	f7f9 fc1b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1713a:	6902      	ldr	r2, [r0, #16]
   1713c:	610a      	str	r2, [r1, #16]
   1713e:	68c3      	ldr	r3, [r0, #12]
   17140:	60cb      	str	r3, [r1, #12]
   17142:	b10a      	cbz	r2, 17148 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
   17144:	60d1      	str	r1, [r2, #12]
   17146:	e001      	b.n	1714c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
   17148:	4a06      	ldr	r2, [pc, #24]	; (17164 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
   1714a:	6011      	str	r1, [r2, #0]
   1714c:	68ca      	ldr	r2, [r1, #12]
   1714e:	b132      	cbz	r2, 1715e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
   17150:	6111      	str	r1, [r2, #16]
   17152:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
   17156:	4410      	add	r0, r2
   17158:	684a      	ldr	r2, [r1, #4]
   1715a:	1a80      	subs	r0, r0, r2
   1715c:	e000      	b.n	17160 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
   1715e:	2000      	movs	r0, #0
   17160:	6088      	str	r0, [r1, #8]
   17162:	bd10      	pop	{r4, pc}
   17164:	200001f8 	.word	0x200001f8

00017168 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
   17168:	b510      	push	{r4, lr}
   1716a:	2200      	movs	r2, #0
   1716c:	6101      	str	r1, [r0, #16]
   1716e:	b189      	cbz	r1, 17194 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
   17170:	68cb      	ldr	r3, [r1, #12]
   17172:	60c8      	str	r0, [r1, #12]
   17174:	60c3      	str	r3, [r0, #12]
   17176:	b103      	cbz	r3, 1717a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
   17178:	6118      	str	r0, [r3, #16]
   1717a:	6901      	ldr	r1, [r0, #16]
   1717c:	6082      	str	r2, [r0, #8]
   1717e:	2900      	cmp	r1, #0
   17180:	d00f      	beq.n	171a2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
   17182:	688b      	ldr	r3, [r1, #8]
   17184:	b163      	cbz	r3, 171a0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
   17186:	6844      	ldr	r4, [r0, #4]
   17188:	42a3      	cmp	r3, r4
   1718a:	d207      	bcs.n	1719c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
   1718c:	212a      	movs	r1, #42	; 0x2a
   1718e:	2037      	movs	r0, #55	; 0x37
   17190:	f7f9 fbee 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17194:	4903      	ldr	r1, [pc, #12]	; (171a4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
   17196:	60c2      	str	r2, [r0, #12]
   17198:	6008      	str	r0, [r1, #0]
   1719a:	e7ee      	b.n	1717a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
   1719c:	1b1b      	subs	r3, r3, r4
   1719e:	6083      	str	r3, [r0, #8]
   171a0:	608a      	str	r2, [r1, #8]
   171a2:	bd10      	pop	{r4, pc}
   171a4:	200001f8 	.word	0x200001f8

000171a8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
   171a8:	6901      	ldr	r1, [r0, #16]
   171aa:	b149      	cbz	r1, 171c0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
   171ac:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   171b0:	441a      	add	r2, r3
   171b2:	688b      	ldr	r3, [r1, #8]
   171b4:	441a      	add	r2, r3
   171b6:	608a      	str	r2, [r1, #8]
   171b8:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
   171bc:	60d1      	str	r1, [r2, #12]
   171be:	e002      	b.n	171c6 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
   171c0:	4a06      	ldr	r2, [pc, #24]	; (171dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
   171c2:	68c1      	ldr	r1, [r0, #12]
   171c4:	6011      	str	r1, [r2, #0]
   171c6:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
   171ca:	b109      	cbz	r1, 171d0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
   171cc:	6108      	str	r0, [r1, #16]
   171ce:	4770      	bx	lr
   171d0:	2800      	cmp	r0, #0
   171d2:	d0fc      	beq.n	171ce <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
   171d4:	2100      	movs	r1, #0
   171d6:	6081      	str	r1, [r0, #8]
   171d8:	4770      	bx	lr
   171da:	0000      	.short	0x0000
   171dc:	200001f8 	.word	0x200001f8

000171e0 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
   171e0:	b510      	push	{r4, lr}
   171e2:	4604      	mov	r4, r0
   171e4:	490a      	ldr	r1, [pc, #40]	; (17210 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
   171e6:	2000      	movs	r0, #0
   171e8:	4602      	mov	r2, r0
   171ea:	6809      	ldr	r1, [r1, #0]
   171ec:	1e43      	subs	r3, r0, #1
   171ee:	e008      	b.n	17202 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
   171f0:	688a      	ldr	r2, [r1, #8]
   171f2:	42a2      	cmp	r2, r4
   171f4:	d303      	bcc.n	171fe <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
   171f6:	429a      	cmp	r2, r3
   171f8:	d201      	bcs.n	171fe <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
   171fa:	4613      	mov	r3, r2
   171fc:	4608      	mov	r0, r1
   171fe:	460a      	mov	r2, r1
   17200:	68c9      	ldr	r1, [r1, #12]
   17202:	2900      	cmp	r1, #0
   17204:	d1f4      	bne.n	171f0 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
   17206:	2800      	cmp	r0, #0
   17208:	d100      	bne.n	1720c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
   1720a:	4610      	mov	r0, r2
   1720c:	bd10      	pop	{r4, pc}
   1720e:	0000      	.short	0x0000
   17210:	200001f8 	.word	0x200001f8

00017214 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
   17214:	4801      	ldr	r0, [pc, #4]	; (1721c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
   17216:	6800      	ldr	r0, [r0, #0]
   17218:	4770      	bx	lr
   1721a:	0000      	.short	0x0000
   1721c:	200001f8 	.word	0x200001f8

00017220 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
   17220:	4804      	ldr	r0, [pc, #16]	; (17234 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
   17222:	6801      	ldr	r1, [r0, #0]
   17224:	2000      	movs	r0, #0
   17226:	e001      	b.n	1722c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
   17228:	4608      	mov	r0, r1
   1722a:	68c9      	ldr	r1, [r1, #12]
   1722c:	2900      	cmp	r1, #0
   1722e:	d1fb      	bne.n	17228 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
   17230:	4770      	bx	lr
   17232:	0000      	.short	0x0000
   17234:	200001f8 	.word	0x200001f8

00017238 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
   17238:	4801      	ldr	r0, [pc, #4]	; (17240 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
   1723a:	2100      	movs	r1, #0
   1723c:	6001      	str	r1, [r0, #0]
   1723e:	4770      	bx	lr
   17240:	200001f8 	.word	0x200001f8

00017244 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
   17244:	4903      	ldr	r1, [pc, #12]	; (17254 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
   17246:	2000      	movs	r0, #0
   17248:	6809      	ldr	r1, [r1, #0]
   1724a:	2900      	cmp	r1, #0
   1724c:	d000      	beq.n	17250 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
   1724e:	200c      	movs	r0, #12
   17250:	4770      	bx	lr
   17252:	0000      	.short	0x0000
   17254:	200001f8 	.word	0x200001f8

00017258 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
   17258:	b500      	push	{lr}
   1725a:	7941      	ldrb	r1, [r0, #5]
   1725c:	b095      	sub	sp, #84	; 0x54
   1725e:	b141      	cbz	r1, 17272 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
   17260:	2901      	cmp	r1, #1
   17262:	d006      	beq.n	17272 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
   17264:	2902      	cmp	r1, #2
   17266:	d004      	beq.n	17272 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
   17268:	2903      	cmp	r1, #3
   1726a:	d002      	beq.n	17272 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
   1726c:	2012      	movs	r0, #18
   1726e:	b015      	add	sp, #84	; 0x54
   17270:	bd00      	pop	{pc}
   17272:	7901      	ldrb	r1, [r0, #4]
   17274:	f88d 1000 	strb.w	r1, [sp]
   17278:	7b01      	ldrb	r1, [r0, #12]
   1727a:	f88d 1001 	strb.w	r1, [sp, #1]
   1727e:	7942      	ldrb	r2, [r0, #5]
   17280:	2100      	movs	r1, #0
   17282:	2301      	movs	r3, #1
   17284:	b3e2      	cbz	r2, 17300 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
   17286:	2a02      	cmp	r2, #2
   17288:	d03b      	beq.n	17302 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
   1728a:	f88d 3002 	strb.w	r3, [sp, #2]
   1728e:	bf00      	nop
   17290:	f8d0 2006 	ldr.w	r2, [r0, #6]
   17294:	f8cd 2003 	str.w	r2, [sp, #3]
   17298:	8942      	ldrh	r2, [r0, #10]
   1729a:	f8ad 2007 	strh.w	r2, [sp, #7]
   1729e:	f88d 3009 	strb.w	r3, [sp, #9]
   172a2:	f830 2b01 	ldrh.w	r2, [r0], #1
   172a6:	f240 2371 	movw	r3, #625	; 0x271
   172aa:	435a      	muls	r2, r3
   172ac:	9203      	str	r2, [sp, #12]
   172ae:	f8b0 2001 	ldrh.w	r2, [r0, #1]
   172b2:	435a      	muls	r2, r3
   172b4:	9206      	str	r2, [sp, #24]
   172b6:	8982      	ldrh	r2, [r0, #12]
   172b8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   172bc:	89c2      	ldrh	r2, [r0, #14]
   172be:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   172c2:	8a02      	ldrh	r2, [r0, #16]
   172c4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   172c8:	8a42      	ldrh	r2, [r0, #18]
   172ca:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
   172ce:	8a82      	ldrh	r2, [r0, #20]
   172d0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
   172d4:	8ac0      	ldrh	r0, [r0, #22]
   172d6:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
   172da:	2007      	movs	r0, #7
   172dc:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
   172e0:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   172e4:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
   172e8:	9806      	ldr	r0, [sp, #24]
   172ea:	f000 fb95 	bl	17a18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
   172ee:	b158      	cbz	r0, 17308 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
   172f0:	9803      	ldr	r0, [sp, #12]
   172f2:	f000 fb85 	bl	17a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
   172f6:	b138      	cbz	r0, 17308 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
   172f8:	4668      	mov	r0, sp
   172fa:	f000 f89f 	bl	1743c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
   172fe:	e7b6      	b.n	1726e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
   17300:	e7ff      	b.n	17302 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
   17302:	f88d 1002 	strb.w	r1, [sp, #2]
   17306:	e7c3      	b.n	17290 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
   17308:	2030      	movs	r0, #48	; 0x30
   1730a:	e7b0      	b.n	1726e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0001730c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
   1730c:	4903      	ldr	r1, [pc, #12]	; (1731c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
   1730e:	884a      	ldrh	r2, [r1, #2]
   17310:	8002      	strh	r2, [r0, #0]
   17312:	7809      	ldrb	r1, [r1, #0]
   17314:	7081      	strb	r1, [r0, #2]
   17316:	2000      	movs	r0, #0
   17318:	4770      	bx	lr
   1731a:	0000      	.short	0x0000
   1731c:	20001434 	.word	0x20001434

00017320 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   17320:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   17322:	460c      	mov	r4, r1
   17324:	4605      	mov	r5, r0
   17326:	8800      	ldrh	r0, [r0, #0]
   17328:	4669      	mov	r1, sp
   1732a:	f003 fb68 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1732e:	0001      	movs	r1, r0
   17330:	f04f 0000 	mov.w	r0, #0
   17334:	d005      	beq.n	17342 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
   17336:	f8c4 0002 	str.w	r0, [r4, #2]
   1733a:	71a0      	strb	r0, [r4, #6]
   1733c:	8020      	strh	r0, [r4, #0]
   1733e:	2002      	movs	r0, #2
   17340:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17342:	9901      	ldr	r1, [sp, #4]
   17344:	f111 0178 	adds.w	r1, r1, #120	; 0x78
   17348:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
   1734c:	f8d1 2016 	ldr.w	r2, [r1, #22]
   17350:	f8c4 2002 	str.w	r2, [r4, #2]
   17354:	7e8a      	ldrb	r2, [r1, #26]
   17356:	71a2      	strb	r2, [r4, #6]
   17358:	882a      	ldrh	r2, [r5, #0]
   1735a:	8022      	strh	r2, [r4, #0]
   1735c:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   17360:	f88d 2008 	strb.w	r2, [sp, #8]
   17364:	9a02      	ldr	r2, [sp, #8]
   17366:	9202      	str	r2, [sp, #8]
   17368:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1736c:	2a00      	cmp	r2, #0
   1736e:	d1eb      	bne.n	17348 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
   17370:	2000      	movs	r0, #0
   17372:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00017374 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   17374:	b51c      	push	{r2, r3, r4, lr}
   17376:	8800      	ldrh	r0, [r0, #0]
   17378:	4669      	mov	r1, sp
   1737a:	f003 fb40 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1737e:	2800      	cmp	r0, #0
   17380:	d106      	bne.n	17390 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
   17382:	f89d 0000 	ldrb.w	r0, [sp]
   17386:	b120      	cbz	r0, 17392 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
   17388:	480b      	ldr	r0, [pc, #44]	; (173b8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
   1738a:	7800      	ldrb	r0, [r0, #0]
   1738c:	b190      	cbz	r0, 173b4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
   1738e:	2002      	movs	r0, #2
   17390:	bd1c      	pop	{r2, r3, r4, pc}
   17392:	9801      	ldr	r0, [sp, #4]
   17394:	f005 f9a5 	bl	1c6e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
   17398:	2800      	cmp	r0, #0
   1739a:	d0f8      	beq.n	1738e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
   1739c:	9801      	ldr	r0, [sp, #4]
   1739e:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
   173a2:	b108      	cbz	r0, 173a8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
   173a4:	203a      	movs	r0, #58	; 0x3a
   173a6:	bd1c      	pop	{r2, r3, r4, pc}
   173a8:	9901      	ldr	r1, [sp, #4]
   173aa:	2001      	movs	r0, #1
   173ac:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
   173b0:	2000      	movs	r0, #0
   173b2:	bd1c      	pop	{r2, r3, r4, pc}
   173b4:	2011      	movs	r0, #17
   173b6:	bd1c      	pop	{r2, r3, r4, pc}
   173b8:	200001fc 	.word	0x200001fc

000173bc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
   173bc:	b510      	push	{r4, lr}
   173be:	4604      	mov	r4, r0
   173c0:	f005 f986 	bl	1c6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   173c4:	b130      	cbz	r0, 173d4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
   173c6:	4804      	ldr	r0, [pc, #16]	; (173d8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
   173c8:	8881      	ldrh	r1, [r0, #4]
   173ca:	8021      	strh	r1, [r4, #0]
   173cc:	88c0      	ldrh	r0, [r0, #6]
   173ce:	8060      	strh	r0, [r4, #2]
   173d0:	2000      	movs	r0, #0
   173d2:	bd10      	pop	{r4, pc}
   173d4:	2001      	movs	r0, #1
   173d6:	bd10      	pop	{r4, pc}
   173d8:	2000020a 	.word	0x2000020a

000173dc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
   173dc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   173de:	4605      	mov	r5, r0
   173e0:	f000 fbf8 	bl	17bd4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   173e4:	f3c0 2000 	ubfx	r0, r0, #8, #1
   173e8:	b310      	cbz	r0, 17430 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
   173ea:	2400      	movs	r4, #0
   173ec:	a802      	add	r0, sp, #8
   173ee:	f88d 4004 	strb.w	r4, [sp, #4]
   173f2:	f88d 4008 	strb.w	r4, [sp, #8]
   173f6:	9000      	str	r0, [sp, #0]
   173f8:	78aa      	ldrb	r2, [r5, #2]
   173fa:	7869      	ldrb	r1, [r5, #1]
   173fc:	7828      	ldrb	r0, [r5, #0]
   173fe:	ab01      	add	r3, sp, #4
   17400:	f005 fa13 	bl	1c82a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
   17404:	2800      	cmp	r0, #0
   17406:	d112      	bne.n	1742e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
   17408:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1740c:	f004 ff8a 	bl	1c324 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   17410:	b180      	cbz	r0, 17434 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
   17412:	f89d 0008 	ldrb.w	r0, [sp, #8]
   17416:	f004 ff85 	bl	1c324 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   1741a:	b158      	cbz	r0, 17434 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
   1741c:	4806      	ldr	r0, [pc, #24]	; (17438 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
   1741e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   17422:	7381      	strb	r1, [r0, #14]
   17424:	f89d 1008 	ldrb.w	r1, [sp, #8]
   17428:	73c1      	strb	r1, [r0, #15]
   1742a:	8204      	strh	r4, [r0, #16]
   1742c:	2000      	movs	r0, #0
   1742e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17430:	2001      	movs	r0, #1
   17432:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17434:	2011      	movs	r0, #17
   17436:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17438:	20001434 	.word	0x20001434

0001743c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
   1743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17440:	a1a4      	add	r1, pc, #656	; (adr r1, 176d4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
   17442:	4605      	mov	r5, r0
   17444:	e9d1 8700 	ldrd	r8, r7, [r1]
   17448:	7a40      	ldrb	r0, [r0, #9]
   1744a:	b08d      	sub	sp, #52	; 0x34
   1744c:	0781      	lsls	r1, r0, #30
   1744e:	d502      	bpl.n	17456 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
   17450:	f040 0001 	orr.w	r0, r0, #1
   17454:	7268      	strb	r0, [r5, #9]
   17456:	4628      	mov	r0, r5
   17458:	f004 ffc3 	bl	1c3e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
   1745c:	2800      	cmp	r0, #0
   1745e:	d10c      	bne.n	1747a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
   17460:	f005 f95a 	bl	1c718 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   17464:	b940      	cbnz	r0, 17478 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
   17466:	f7fb fbbd 	bl	12be4 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
   1746a:	b928      	cbnz	r0, 17478 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
   1746c:	f7fb fe76 	bl	1315c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
   17470:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
   17474:	39ff      	subs	r1, #255	; 0xff
   17476:	d003      	beq.n	17480 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
   17478:	200c      	movs	r0, #12
   1747a:	b00d      	add	sp, #52	; 0x34
   1747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17480:	7828      	ldrb	r0, [r5, #0]
   17482:	f04f 0b00 	mov.w	fp, #0
   17486:	f04f 0a01 	mov.w	sl, #1
   1748a:	b9e0      	cbnz	r0, 174c6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8a>
   1748c:	f895 9002 	ldrb.w	r9, [r5, #2]
   17490:	1cee      	adds	r6, r5, #3
   17492:	a909      	add	r1, sp, #36	; 0x24
   17494:	2000      	movs	r0, #0
   17496:	f003 f951 	bl	1a73c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1749a:	b178      	cbz	r0, 174bc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
   1749c:	f240 2109 	movw	r1, #521	; 0x209
   174a0:	e112      	b.n	176c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
   174a2:	4648      	mov	r0, r9
   174a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   174a6:	f004 fb52 	bl	1bb4e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   174aa:	78a1      	ldrb	r1, [r4, #2]
   174ac:	4288      	cmp	r0, r1
   174ae:	d105      	bne.n	174bc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
   174b0:	2206      	movs	r2, #6
   174b2:	4631      	mov	r1, r6
   174b4:	1ce0      	adds	r0, r4, #3
   174b6:	f002 f868 	bl	1958a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   174ba:	b328      	cbz	r0, 17508 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
   174bc:	a809      	add	r0, sp, #36	; 0x24
   174be:	f7f9 fc87 	bl	10dd0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   174c2:	2800      	cmp	r0, #0
   174c4:	d0ed      	beq.n	174a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
   174c6:	2103      	movs	r1, #3
   174c8:	f105 0018 	add.w	r0, r5, #24
   174cc:	f000 fab0 	bl	17a30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
   174d0:	2200      	movs	r2, #0
   174d2:	4611      	mov	r1, r2
   174d4:	a802      	add	r0, sp, #8
   174d6:	f7f9 fca1 	bl	10e1c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
   174da:	0004      	movs	r4, r0
   174dc:	d016      	beq.n	1750c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
   174de:	2100      	movs	r1, #0
   174e0:	f7fb f948 	bl	12774 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
   174e4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   174e8:	8020      	strh	r0, [r4, #0]
   174ea:	487c      	ldr	r0, [pc, #496]	; (176dc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
   174ec:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   174f0:	f005 f8ee 	bl	1c6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   174f4:	497a      	ldr	r1, [pc, #488]	; (176e0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a4>)
   174f6:	2800      	cmp	r0, #0
   174f8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   174fc:	d008      	beq.n	17510 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
   174fe:	884b      	ldrh	r3, [r1, #2]
   17500:	888a      	ldrh	r2, [r1, #4]
   17502:	84c3      	strh	r3, [r0, #38]	; 0x26
   17504:	8502      	strh	r2, [r0, #40]	; 0x28
   17506:	e006      	b.n	17516 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
   17508:	200b      	movs	r0, #11
   1750a:	e7b6      	b.n	1747a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
   1750c:	2009      	movs	r0, #9
   1750e:	e7b4      	b.n	1747a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
   17510:	221b      	movs	r2, #27
   17512:	84c2      	strh	r2, [r0, #38]	; 0x26
   17514:	8502      	strh	r2, [r0, #40]	; 0x28
   17516:	4689      	mov	r9, r1
   17518:	4608      	mov	r0, r1
   1751a:	7849      	ldrb	r1, [r1, #1]
   1751c:	9100      	str	r1, [sp, #0]
   1751e:	7803      	ldrb	r3, [r0, #0]
   17520:	8882      	ldrh	r2, [r0, #4]
   17522:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   17526:	8820      	ldrh	r0, [r4, #0]
   17528:	f7f9 fd5a 	bl	10fe0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
   1752c:	b110      	cbz	r0, 17534 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf8>
   1752e:	f640 6199 	movw	r1, #3737	; 0xe99
   17532:	e0c9      	b.n	176c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
   17534:	f003 ff9d 	bl	1b472 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
   17538:	6120      	str	r0, [r4, #16]
   1753a:	a06a      	add	r0, pc, #424	; (adr r0, 176e4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a8>)
   1753c:	f104 0618 	add.w	r6, r4, #24
   17540:	6800      	ldr	r0, [r0, #0]
   17542:	9000      	str	r0, [sp, #0]
   17544:	2103      	movs	r1, #3
   17546:	4668      	mov	r0, sp
   17548:	f7f9 faae 	bl	10aa8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
   1754c:	2000      	movs	r0, #0
   1754e:	4669      	mov	r1, sp
   17550:	5c0a      	ldrb	r2, [r1, r0]
   17552:	5432      	strb	r2, [r6, r0]
   17554:	1c40      	adds	r0, r0, #1
   17556:	b2c0      	uxtb	r0, r0
   17558:	2803      	cmp	r0, #3
   1755a:	d3f9      	bcc.n	17550 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x114>
   1755c:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
   1755e:	f003 fa5a 	bl	1aa16 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   17562:	60e0      	str	r0, [r4, #12]
   17564:	8e28      	ldrh	r0, [r5, #48]	; 0x30
   17566:	82a0      	strh	r0, [r4, #20]
   17568:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
   1756a:	82e0      	strh	r0, [r4, #22]
   1756c:	7a68      	ldrb	r0, [r5, #9]
   1756e:	f004 feb8 	bl	1c2e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   17572:	f8d9 1008 	ldr.w	r1, [r9, #8]
   17576:	464e      	mov	r6, r9
   17578:	4620      	mov	r0, r4
   1757a:	62e1      	str	r1, [r4, #44]	; 0x2c
   1757c:	f004 f90e 	bl	1b79c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
   17580:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
   17584:	46d1      	mov	r9, sl
   17586:	4650      	mov	r0, sl
   17588:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
   1758c:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
   17590:	4852      	ldr	r0, [pc, #328]	; (176dc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
   17592:	3808      	subs	r0, #8
   17594:	6843      	ldr	r3, [r0, #4]
   17596:	b123      	cbz	r3, 175a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x166>
   17598:	2201      	movs	r2, #1
   1759a:	f504 7199 	add.w	r1, r4, #306	; 0x132
   1759e:	4620      	mov	r0, r4
   175a0:	4798      	blx	r3
   175a2:	8821      	ldrh	r1, [r4, #0]
   175a4:	f8ad 1014 	strh.w	r1, [sp, #20]
   175a8:	7bb1      	ldrb	r1, [r6, #14]
   175aa:	f88d 1016 	strb.w	r1, [sp, #22]
   175ae:	7bf1      	ldrb	r1, [r6, #15]
   175b0:	f88d 1017 	strb.w	r1, [sp, #23]
   175b4:	8a31      	ldrh	r1, [r6, #16]
   175b6:	f8ad 1018 	strh.w	r1, [sp, #24]
   175ba:	a908      	add	r1, sp, #32
   175bc:	9100      	str	r1, [sp, #0]
   175be:	2000      	movs	r0, #0
   175c0:	ab07      	add	r3, sp, #28
   175c2:	aa05      	add	r2, sp, #20
   175c4:	4621      	mov	r1, r4
   175c6:	f005 f844 	bl	1c652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
   175ca:	0006      	movs	r6, r0
   175cc:	d10f      	bne.n	175ee <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b2>
   175ce:	f89d 001c 	ldrb.w	r0, [sp, #28]
   175d2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   175d6:	f89d 0020 	ldrb.w	r0, [sp, #32]
   175da:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   175de:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   175e2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   175e6:	a909      	add	r1, sp, #36	; 0x24
   175e8:	4620      	mov	r0, r4
   175ea:	f003 fb02 	bl	1abf2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   175ee:	46d8      	mov	r8, fp
   175f0:	f88d b00c 	strb.w	fp, [sp, #12]
   175f4:	2101      	movs	r1, #1
   175f6:	a803      	add	r0, sp, #12
   175f8:	f7f9 fa56 	bl	10aa8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
   175fc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   17600:	f000 0107 	and.w	r1, r0, #7
   17604:	f3c0 02c1 	ubfx	r2, r0, #3, #2
   17608:	4411      	add	r1, r2
   1760a:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1760e:	4408      	add	r0, r1
   17610:	f88d 000c 	strb.w	r0, [sp, #12]
   17614:	1d40      	adds	r0, r0, #5
   17616:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
   1761a:	2809      	cmp	r0, #9
   1761c:	d202      	bcs.n	17624 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e8>
   1761e:	3008      	adds	r0, #8
   17620:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
   17624:	2101      	movs	r1, #1
   17626:	4620      	mov	r0, r4
   17628:	f7fb f8a4 	bl	12774 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
   1762c:	7868      	ldrb	r0, [r5, #1]
   1762e:	f7fb fe69 	bl	13304 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
   17632:	bbee      	cbnz	r6, 176b0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
   17634:	78a9      	ldrb	r1, [r5, #2]
   17636:	7828      	ldrb	r0, [r5, #0]
   17638:	1cea      	adds	r2, r5, #3
   1763a:	f7fb fe0d 	bl	13258 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
   1763e:	b148      	cbz	r0, 17654 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x218>
   17640:	f7fb fd34 	bl	130ac <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   17644:	78a9      	ldrb	r1, [r5, #2]
   17646:	7828      	ldrb	r0, [r5, #0]
   17648:	1cea      	adds	r2, r5, #3
   1764a:	f7fb fe29 	bl	132a0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
   1764e:	0006      	movs	r6, r0
   17650:	d002      	beq.n	17658 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21c>
   17652:	e02f      	b.n	176b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
   17654:	2612      	movs	r6, #18
   17656:	e02d      	b.n	176b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
   17658:	78a8      	ldrb	r0, [r5, #2]
   1765a:	f004 fa78 	bl	1bb4e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   1765e:	4602      	mov	r2, r0
   17660:	1ceb      	adds	r3, r5, #3
   17662:	4621      	mov	r1, r4
   17664:	2003      	movs	r0, #3
   17666:	f7fb fd63 	bl	13130 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
   1766a:	0006      	movs	r6, r0
   1766c:	d122      	bne.n	176b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
   1766e:	464f      	mov	r7, r9
   17670:	4648      	mov	r0, r9
   17672:	f7fb fdbb 	bl	131ec <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
   17676:	0006      	movs	r6, r0
   17678:	d11c      	bne.n	176b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
   1767a:	f88d 800c 	strb.w	r8, [sp, #12]
   1767e:	7a68      	ldrb	r0, [r5, #9]
   17680:	07c0      	lsls	r0, r0, #31
   17682:	d005      	beq.n	17690 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x254>
   17684:	68e8      	ldr	r0, [r5, #12]
   17686:	9004      	str	r0, [sp, #16]
   17688:	69a8      	ldr	r0, [r5, #24]
   1768a:	9005      	str	r0, [sp, #20]
   1768c:	f88d 700c 	strb.w	r7, [sp, #12]
   17690:	a803      	add	r0, sp, #12
   17692:	f7fd f913 	bl	148bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
   17696:	4606      	mov	r6, r0
   17698:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
   1769c:	f7fb fea6 	bl	133ec <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
   176a0:	b936      	cbnz	r6, 176b0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
   176a2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   176a6:	4620      	mov	r0, r4
   176a8:	f7fd f82a 	bl	14700 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
   176ac:	0006      	movs	r6, r0
   176ae:	e000      	b.n	176b2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x276>
   176b0:	e000      	b.n	176b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
   176b2:	d00c      	beq.n	176ce <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
   176b4:	8820      	ldrh	r0, [r4, #0]
   176b6:	f003 f8a0 	bl	1a7fa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   176ba:	8820      	ldrh	r0, [r4, #0]
   176bc:	2100      	movs	r1, #0
   176be:	f7f9 fbd5 	bl	10e6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   176c2:	b120      	cbz	r0, 176ce <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
   176c4:	f640 715f 	movw	r1, #3935	; 0xf5f
   176c8:	2039      	movs	r0, #57	; 0x39
   176ca:	f7f9 f951 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   176ce:	4630      	mov	r0, r6
   176d0:	e6d3      	b.n	1747a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
   176d2:	0000      	.short	0x0000
   176d4:	ffffffff 	.word	0xffffffff
   176d8:	0000001f 	.word	0x0000001f
   176dc:	20000204 	.word	0x20000204
   176e0:	20001434 	.word	0x20001434
   176e4:	00332211 	.word	0x00332211

000176e8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
   176e8:	7801      	ldrb	r1, [r0, #0]
   176ea:	b171      	cbz	r1, 1770a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   176ec:	7841      	ldrb	r1, [r0, #1]
   176ee:	b161      	cbz	r1, 1770a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   176f0:	8841      	ldrh	r1, [r0, #2]
   176f2:	291b      	cmp	r1, #27
   176f4:	d309      	bcc.n	1770a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   176f6:	8881      	ldrh	r1, [r0, #4]
   176f8:	291b      	cmp	r1, #27
   176fa:	d306      	bcc.n	1770a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   176fc:	4904      	ldr	r1, [pc, #16]	; (17710 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
   176fe:	6802      	ldr	r2, [r0, #0]
   17700:	600a      	str	r2, [r1, #0]
   17702:	8880      	ldrh	r0, [r0, #4]
   17704:	8088      	strh	r0, [r1, #4]
   17706:	2000      	movs	r0, #0
   17708:	4770      	bx	lr
   1770a:	2012      	movs	r0, #18
   1770c:	4770      	bx	lr
   1770e:	0000      	.short	0x0000
   17710:	20001434 	.word	0x20001434

00017714 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
   17714:	6800      	ldr	r0, [r0, #0]
   17716:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1771a:	4288      	cmp	r0, r1
   1771c:	d303      	bcc.n	17726 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
   1771e:	4903      	ldr	r1, [pc, #12]	; (1772c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
   17720:	6088      	str	r0, [r1, #8]
   17722:	2000      	movs	r0, #0
   17724:	4770      	bx	lr
   17726:	2012      	movs	r0, #18
   17728:	4770      	bx	lr
   1772a:	0000      	.short	0x0000
   1772c:	20001434 	.word	0x20001434

00017730 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
   17730:	b510      	push	{r4, lr}
   17732:	b086      	sub	sp, #24
   17734:	4604      	mov	r4, r0
   17736:	f004 fecb 	bl	1c4d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
   1773a:	2800      	cmp	r0, #0
   1773c:	d103      	bne.n	17746 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
   1773e:	f004 ffeb 	bl	1c718 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   17742:	b110      	cbz	r0, 1774a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
   17744:	200c      	movs	r0, #12
   17746:	b006      	add	sp, #24
   17748:	bd10      	pop	{r4, pc}
   1774a:	2102      	movs	r1, #2
   1774c:	f104 0010 	add.w	r0, r4, #16
   17750:	f000 f96e 	bl	17a30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
   17754:	78a0      	ldrb	r0, [r4, #2]
   17756:	f88d 0008 	strb.w	r0, [sp, #8]
   1775a:	78a0      	ldrb	r0, [r4, #2]
   1775c:	f88d 0000 	strb.w	r0, [sp]
   17760:	7860      	ldrb	r0, [r4, #1]
   17762:	f88d 0003 	strb.w	r0, [sp, #3]
   17766:	7820      	ldrb	r0, [r4, #0]
   17768:	f88d 0002 	strb.w	r0, [sp, #2]
   1776c:	7e20      	ldrb	r0, [r4, #24]
   1776e:	f88d 0004 	strb.w	r0, [sp, #4]
   17772:	78a0      	ldrb	r0, [r4, #2]
   17774:	07c0      	lsls	r0, r0, #31
   17776:	d00b      	beq.n	17790 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
   17778:	78e0      	ldrb	r0, [r4, #3]
   1777a:	2801      	cmp	r0, #1
   1777c:	d011      	beq.n	177a2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
   1777e:	b190      	cbz	r0, 177a6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
   17780:	f05f 0000 	movs.w	r0, #0
   17784:	f88d 0001 	strb.w	r0, [sp, #1]
   17788:	68a0      	ldr	r0, [r4, #8]
   1778a:	9003      	str	r0, [sp, #12]
   1778c:	6920      	ldr	r0, [r4, #16]
   1778e:	9004      	str	r0, [sp, #16]
   17790:	a802      	add	r0, sp, #8
   17792:	f7fd f893 	bl	148bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
   17796:	2800      	cmp	r0, #0
   17798:	d1d5      	bne.n	17746 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
   1779a:	4668      	mov	r0, sp
   1779c:	f7fb fe2e 	bl	133fc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
   177a0:	e7d1      	b.n	17746 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
   177a2:	2002      	movs	r0, #2
   177a4:	e7ee      	b.n	17784 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
   177a6:	2001      	movs	r0, #1
   177a8:	e7ec      	b.n	17784 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

000177ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
   177ac:	4a03      	ldr	r2, [pc, #12]	; (177bc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
   177ae:	e9d2 1200 	ldrd	r1, r2, [r2]
   177b2:	6001      	str	r1, [r0, #0]
   177b4:	6042      	str	r2, [r0, #4]
   177b6:	2000      	movs	r0, #0
   177b8:	4770      	bx	lr
   177ba:	0000      	.short	0x0000
   177bc:	00017abc 	.word	0x00017abc

000177c0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
   177c0:	b510      	push	{r4, lr}
   177c2:	2005      	movs	r0, #5
   177c4:	f000 f9fc 	bl	17bc0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   177c8:	f7fd fe48 	bl	1545c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
   177cc:	4902      	ldr	r1, [pc, #8]	; (177d8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
   177ce:	4801      	ldr	r0, [pc, #4]	; (177d4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
   177d0:	6048      	str	r0, [r1, #4]
   177d2:	bd10      	pop	{r4, pc}
   177d4:	00017905 	.word	0x00017905
   177d8:	200001fc 	.word	0x200001fc

000177dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   177dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   177e0:	b086      	sub	sp, #24
   177e2:	468a      	mov	sl, r1
   177e4:	4606      	mov	r6, r0
   177e6:	8800      	ldrh	r0, [r0, #0]
   177e8:	a901      	add	r1, sp, #4
   177ea:	f003 f908 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   177ee:	2800      	cmp	r0, #0
   177f0:	d139      	bne.n	17866 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   177f2:	9802      	ldr	r0, [sp, #8]
   177f4:	f04f 0801 	mov.w	r8, #1
   177f8:	4601      	mov	r1, r0
   177fa:	4689      	mov	r9, r1
   177fc:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
   17800:	f88d 1000 	strb.w	r1, [sp]
   17804:	9900      	ldr	r1, [sp, #0]
   17806:	9100      	str	r1, [sp, #0]
   17808:	f89d 5000 	ldrb.w	r5, [sp]
   1780c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   17810:	3078      	adds	r0, #120	; 0x78
   17812:	2921      	cmp	r1, #33	; 0x21
   17814:	d100      	bne.n	17818 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   17816:	b13d      	cbz	r5, 17828 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   17818:	2400      	movs	r4, #0
   1781a:	304e      	adds	r0, #78	; 0x4e
   1781c:	2108      	movs	r1, #8
   1781e:	4607      	mov	r7, r0
   17820:	f004 f98b 	bl	1bb3a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   17824:	b110      	cbz	r0, 1782c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
   17826:	e007      	b.n	17838 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   17828:	2401      	movs	r4, #1
   1782a:	e7f6      	b.n	1781a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
   1782c:	210b      	movs	r1, #11
   1782e:	4638      	mov	r0, r7
   17830:	f004 f983 	bl	1bb3a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   17834:	b900      	cbnz	r0, 17838 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   17836:	b1ac      	cbz	r4, 17864 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
   17838:	a804      	add	r0, sp, #16
   1783a:	9000      	str	r0, [sp, #0]
   1783c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   17840:	ab03      	add	r3, sp, #12
   17842:	4632      	mov	r2, r6
   17844:	4649      	mov	r1, r9
   17846:	f004 ff04 	bl	1c652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
   1784a:	0007      	movs	r7, r0
   1784c:	d10b      	bne.n	17866 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1784e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   17852:	9c02      	ldr	r4, [sp, #8]
   17854:	b150      	cbz	r0, 1786c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
   17856:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   1785a:	bf00      	nop
   1785c:	f884 8001 	strb.w	r8, [r4, #1]
   17860:	b94d      	cbnz	r5, 17876 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
   17862:	e006      	b.n	17872 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
   17864:	201a      	movs	r0, #26
   17866:	b006      	add	sp, #24
   17868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1786c:	f504 749f 	add.w	r4, r4, #318	; 0x13e
   17870:	e7f4      	b.n	1785c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
   17872:	7820      	ldrb	r0, [r4, #0]
   17874:	b108      	cbz	r0, 1787a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   17876:	273a      	movs	r7, #58	; 0x3a
   17878:	e012      	b.n	178a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
   1787a:	f884 a000 	strb.w	sl, [r4]
   1787e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   17882:	70a0      	strb	r0, [r4, #2]
   17884:	f89d 1010 	ldrb.w	r1, [sp, #16]
   17888:	70e1      	strb	r1, [r4, #3]
   1788a:	f88d 0000 	strb.w	r0, [sp]
   1788e:	f88d 1001 	strb.w	r1, [sp, #1]
   17892:	88b0      	ldrh	r0, [r6, #4]
   17894:	f8ad 0002 	strh.w	r0, [sp, #2]
   17898:	4669      	mov	r1, sp
   1789a:	4648      	mov	r0, r9
   1789c:	f003 f9a9 	bl	1abf2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   178a0:	2000      	movs	r0, #0
   178a2:	7060      	strb	r0, [r4, #1]
   178a4:	4638      	mov	r0, r7
   178a6:	e7de      	b.n	17866 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

000178a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   178a8:	b510      	push	{r4, lr}
   178aa:	f002 ffba 	bl	1a822 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   178ae:	f7fa fd07 	bl	122c0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   178b2:	f000 f99f 	bl	17bf4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   178b6:	f003 fc87 	bl	1b1c8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   178ba:	4810      	ldr	r0, [pc, #64]	; (178fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
   178bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   178c0:	4b0f      	ldr	r3, [pc, #60]	; (17900 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
   178c2:	8281      	strh	r1, [r0, #20]
   178c4:	2100      	movs	r1, #0
   178c6:	7581      	strb	r1, [r0, #22]
   178c8:	8301      	strh	r1, [r0, #24]
   178ca:	221b      	movs	r2, #27
   178cc:	801a      	strh	r2, [r3, #0]
   178ce:	f44f 74a4 	mov.w	r4, #328	; 0x148
   178d2:	805c      	strh	r4, [r3, #2]
   178d4:	809a      	strh	r2, [r3, #4]
   178d6:	80dc      	strh	r4, [r3, #6]
   178d8:	7381      	strb	r1, [r0, #14]
   178da:	73c1      	strb	r1, [r0, #15]
   178dc:	2303      	movs	r3, #3
   178de:	7003      	strb	r3, [r0, #0]
   178e0:	2302      	movs	r3, #2
   178e2:	7043      	strb	r3, [r0, #1]
   178e4:	8042      	strh	r2, [r0, #2]
   178e6:	8082      	strh	r2, [r0, #4]
   178e8:	f640 62a6 	movw	r2, #3750	; 0xea6
   178ec:	6082      	str	r2, [r0, #8]
   178ee:	4a04      	ldr	r2, [pc, #16]	; (17900 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
   178f0:	1f92      	subs	r2, r2, #6
   178f2:	7011      	strb	r1, [r2, #0]
   178f4:	7481      	strb	r1, [r0, #18]
   178f6:	7301      	strb	r1, [r0, #12]
   178f8:	bd10      	pop	{r4, pc}
   178fa:	0000      	.short	0x0000
   178fc:	20001434 	.word	0x20001434
   17900:	2000020a 	.word	0x2000020a
   17904:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17908:	4692      	mov	sl, r2
   1790a:	460f      	mov	r7, r1
   1790c:	4681      	mov	r9, r0
   1790e:	f004 fedf 	bl	1c6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   17912:	2800      	cmp	r0, #0
   17914:	d063      	beq.n	179de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   17916:	4933      	ldr	r1, [pc, #204]	; (179e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13c>)
   17918:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
   1791c:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
   17920:	8808      	ldrh	r0, [r1, #0]
   17922:	4290      	cmp	r0, r2
   17924:	d300      	bcc.n	17928 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
   17926:	4610      	mov	r0, r2
   17928:	4680      	mov	r8, r0
   1792a:	8888      	ldrh	r0, [r1, #4]
   1792c:	42b0      	cmp	r0, r6
   1792e:	d200      	bcs.n	17932 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8a>
   17930:	4606      	mov	r6, r0
   17932:	884c      	ldrh	r4, [r1, #2]
   17934:	f640 0048 	movw	r0, #2120	; 0x848
   17938:	4284      	cmp	r4, r0
   1793a:	d300      	bcc.n	1793e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
   1793c:	4604      	mov	r4, r0
   1793e:	88cd      	ldrh	r5, [r1, #6]
   17940:	4285      	cmp	r5, r0
   17942:	d300      	bcc.n	17946 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
   17944:	4605      	mov	r5, r0
   17946:	4284      	cmp	r4, r0
   17948:	d300      	bcc.n	1794c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
   1794a:	4604      	mov	r4, r0
   1794c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   17950:	2e1b      	cmp	r6, #27
   17952:	d001      	beq.n	17958 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
   17954:	428d      	cmp	r5, r1
   17956:	d104      	bne.n	17962 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xba>
   17958:	f1b8 0f1b 	cmp.w	r8, #27
   1795c:	d03f      	beq.n	179de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   1795e:	428c      	cmp	r4, r1
   17960:	d03d      	beq.n	179de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   17962:	466a      	mov	r2, sp
   17964:	4651      	mov	r1, sl
   17966:	4648      	mov	r0, r9
   17968:	f004 fe3d 	bl	1c5e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   1796c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   17970:	4641      	mov	r1, r8
   17972:	4540      	cmp	r0, r8
   17974:	d900      	bls.n	17978 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd0>
   17976:	4608      	mov	r0, r1
   17978:	80f8      	strh	r0, [r7, #6]
   1797a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1797e:	42a1      	cmp	r1, r4
   17980:	d800      	bhi.n	17984 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
   17982:	460c      	mov	r4, r1
   17984:	813c      	strh	r4, [r7, #8]
   17986:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1798a:	42b1      	cmp	r1, r6
   1798c:	d800      	bhi.n	17990 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
   1798e:	460e      	mov	r6, r1
   17990:	807e      	strh	r6, [r7, #2]
   17992:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   17996:	42a9      	cmp	r1, r5
   17998:	d900      	bls.n	1799c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
   1799a:	4629      	mov	r1, r5
   1799c:	80b9      	strh	r1, [r7, #4]
   1799e:	2201      	movs	r2, #1
   179a0:	703a      	strb	r2, [r7, #0]
   179a2:	381b      	subs	r0, #27
   179a4:	28e0      	cmp	r0, #224	; 0xe0
   179a6:	d902      	bls.n	179ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
   179a8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
   179ac:	e014      	b.n	179d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
   179ae:	3e1b      	subs	r6, #27
   179b0:	2ee0      	cmp	r6, #224	; 0xe0
   179b2:	d902      	bls.n	179ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x112>
   179b4:	f640 4182 	movw	r1, #3202	; 0xc82
   179b8:	e00e      	b.n	179d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
   179ba:	f44f 60e0 	mov.w	r0, #1792	; 0x700
   179be:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
   179c2:	4284      	cmp	r4, r0
   179c4:	d902      	bls.n	179cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
   179c6:	f640 4184 	movw	r1, #3204	; 0xc84
   179ca:	e005      	b.n	179d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
   179cc:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
   179d0:	4281      	cmp	r1, r0
   179d2:	d904      	bls.n	179de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   179d4:	f640 4186 	movw	r1, #3206	; 0xc86
   179d8:	2039      	movs	r0, #57	; 0x39
   179da:	f7f8 ffc9 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   179de:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179e2:	0000      	.short	0x0000
   179e4:	2000020a 	.word	0x2000020a
   179e8:	4904      	ldr	r1, [pc, #16]	; (179fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>)
   179ea:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
   179ee:	4288      	cmp	r0, r1
   179f0:	d301      	bcc.n	179f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
   179f2:	2000      	movs	r0, #0
   179f4:	4770      	bx	lr
   179f6:	2001      	movs	r0, #1
   179f8:	4770      	bx	lr
   179fa:	0000      	.short	0x0000
   179fc:	0270f3cc 	.word	0x0270f3cc
   17a00:	4904      	ldr	r1, [pc, #16]	; (17a14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16c>)
   17a02:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
   17a06:	4288      	cmp	r0, r1
   17a08:	d301      	bcc.n	17a0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
   17a0a:	2000      	movs	r0, #0
   17a0c:	4770      	bx	lr
   17a0e:	2001      	movs	r0, #1
   17a10:	4770      	bx	lr
   17a12:	0000      	.short	0x0000
   17a14:	009c363d 	.word	0x009c363d
   17a18:	4904      	ldr	r1, [pc, #16]	; (17a2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>)
   17a1a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
   17a1e:	4288      	cmp	r0, r1
   17a20:	d301      	bcc.n	17a26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17e>
   17a22:	2000      	movs	r0, #0
   17a24:	4770      	bx	lr
   17a26:	2001      	movs	r0, #1
   17a28:	4770      	bx	lr
   17a2a:	0000      	.short	0x0000
   17a2c:	009c363d 	.word	0x009c363d
   17a30:	b530      	push	{r4, r5, lr}
   17a32:	2200      	movs	r2, #0
   17a34:	4d07      	ldr	r5, [pc, #28]	; (17a54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>)
   17a36:	e009      	b.n	17a4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a4>
   17a38:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   17a3c:	462b      	mov	r3, r5
   17a3e:	429c      	cmp	r4, r3
   17a40:	d800      	bhi.n	17a44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19c>
   17a42:	4623      	mov	r3, r4
   17a44:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   17a48:	1c52      	adds	r2, r2, #1
   17a4a:	b2d2      	uxtb	r2, r2
   17a4c:	428a      	cmp	r2, r1
   17a4e:	d3f3      	bcc.n	17a38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x190>
   17a50:	bd30      	pop	{r4, r5, pc}
   17a52:	0000      	.short	0x0000
   17a54:	00f42400 	.word	0x00f42400
   17a58:	4a09      	ldr	r2, [pc, #36]	; (17a80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>)
   17a5a:	4290      	cmp	r0, r2
   17a5c:	d80b      	bhi.n	17a76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
   17a5e:	2901      	cmp	r1, #1
   17a60:	d002      	beq.n	17a68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
   17a62:	2904      	cmp	r1, #4
   17a64:	d003      	beq.n	17a6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
   17a66:	e008      	b.n	17a7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
   17a68:	f240 7153 	movw	r1, #1875	; 0x753
   17a6c:	e001      	b.n	17a72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
   17a6e:	f640 11c4 	movw	r1, #2500	; 0x9c4
   17a72:	4288      	cmp	r0, r1
   17a74:	d201      	bcs.n	17a7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
   17a76:	2000      	movs	r0, #0
   17a78:	4770      	bx	lr
   17a7a:	2001      	movs	r0, #1
   17a7c:	4770      	bx	lr
   17a7e:	0000      	.short	0x0000
   17a80:	0270fd8f 	.word	0x0270fd8f
   17a84:	b510      	push	{r4, lr}
   17a86:	4604      	mov	r4, r0
   17a88:	88c1      	ldrh	r1, [r0, #6]
   17a8a:	8880      	ldrh	r0, [r0, #4]
   17a8c:	f004 fc5f 	bl	1c34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   17a90:	2800      	cmp	r0, #0
   17a92:	d10f      	bne.n	17ab4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
   17a94:	8861      	ldrh	r1, [r4, #2]
   17a96:	8820      	ldrh	r0, [r4, #0]
   17a98:	f004 fc59 	bl	1c34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   17a9c:	2800      	cmp	r0, #0
   17a9e:	d109      	bne.n	17ab4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
   17aa0:	4805      	ldr	r0, [pc, #20]	; (17ab8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x210>)
   17aa2:	88a1      	ldrh	r1, [r4, #4]
   17aa4:	8081      	strh	r1, [r0, #4]
   17aa6:	8821      	ldrh	r1, [r4, #0]
   17aa8:	8001      	strh	r1, [r0, #0]
   17aaa:	88e1      	ldrh	r1, [r4, #6]
   17aac:	80c1      	strh	r1, [r0, #6]
   17aae:	8861      	ldrh	r1, [r4, #2]
   17ab0:	8041      	strh	r1, [r0, #2]
   17ab2:	2000      	movs	r0, #0
   17ab4:	bd10      	pop	{r4, pc}
   17ab6:	0000      	.short	0x0000
   17ab8:	2000020a 	.word	0x2000020a
   17abc:	0b12fe0b 	.word	0x0b12fe0b
   17ac0:	12fe0059 	.word	0x12fe0059
   17ac4:	05060708 	.word	0x05060708
   17ac8:	00020304 	.word	0x00020304
   17acc:	f0f4f8fc 	.word	0xf0f4f8fc
   17ad0:	0304d8ec 	.word	0x0304d8ec
   17ad4:	f4f8fc00 	.word	0xf4f8fc00
   17ad8:	00d8ecf0 	.word	0x00d8ecf0

00017adc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
   17adc:	b510      	push	{r4, lr}
   17ade:	460c      	mov	r4, r1
   17ae0:	f7fb f872 	bl	12bc8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
   17ae4:	4805      	ldr	r0, [pc, #20]	; (17afc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
   17ae6:	6004      	str	r4, [r0, #0]
   17ae8:	6840      	ldr	r0, [r0, #4]
   17aea:	f004 fecd 	bl	1c888 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   17aee:	f004 fbc3 	bl	1c278 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
   17af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17af6:	f7fb ba81 	b.w	12ffc <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
   17afa:	0000      	.short	0x0000
   17afc:	20000214 	.word	0x20000214

00017b00 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
   17b00:	b510      	push	{r4, lr}
   17b02:	4c07      	ldr	r4, [pc, #28]	; (17b20 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
   17b04:	68a0      	ldr	r0, [r4, #8]
   17b06:	f004 febf 	bl	1c888 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   17b0a:	68e0      	ldr	r0, [r4, #12]
   17b0c:	f004 febc 	bl	1c888 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   17b10:	f002 fe87 	bl	1a822 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   17b14:	f7fa fbd4 	bl	122c0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   17b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17b1c:	f7ff bec4 	b.w	178a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
   17b20:	20000214 	.word	0x20000214

00017b24 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
   17b24:	b500      	push	{lr}
   17b26:	4905      	ldr	r1, [pc, #20]	; (17b3c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
   17b28:	4805      	ldr	r0, [pc, #20]	; (17b40 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
   17b2a:	f004 fea0 	bl	1c86e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   17b2e:	4804      	ldr	r0, [pc, #16]	; (17b40 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
   17b30:	4904      	ldr	r1, [pc, #16]	; (17b44 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
   17b32:	1d00      	adds	r0, r0, #4
   17b34:	f85d eb04 	ldr.w	lr, [sp], #4
   17b38:	f004 be99 	b.w	1c86e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   17b3c:	2000023c 	.word	0x2000023c
   17b40:	20000218 	.word	0x20000218
   17b44:	20000244 	.word	0x20000244

00017b48 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
   17b48:	b500      	push	{lr}
   17b4a:	4908      	ldr	r1, [pc, #32]	; (17b6c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
   17b4c:	4808      	ldr	r0, [pc, #32]	; (17b70 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
   17b4e:	f004 fe8e 	bl	1c86e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   17b52:	4807      	ldr	r0, [pc, #28]	; (17b70 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
   17b54:	4907      	ldr	r1, [pc, #28]	; (17b74 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
   17b56:	1d00      	adds	r0, r0, #4
   17b58:	f004 fe89 	bl	1c86e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   17b5c:	4804      	ldr	r0, [pc, #16]	; (17b70 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
   17b5e:	4906      	ldr	r1, [pc, #24]	; (17b78 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
   17b60:	3008      	adds	r0, #8
   17b62:	f85d eb04 	ldr.w	lr, [sp], #4
   17b66:	f004 be82 	b.w	1c86e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   17b6a:	0000      	.short	0x0000
   17b6c:	2000022c 	.word	0x2000022c
   17b70:	20000218 	.word	0x20000218
   17b74:	20000234 	.word	0x20000234
   17b78:	20000224 	.word	0x20000224
   17b7c:	b510      	push	{r4, lr}
   17b7e:	f002 fe3e 	bl	1a7fe <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
   17b82:	4806      	ldr	r0, [pc, #24]	; (17b9c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x54>)
   17b84:	f7f9 fdb2 	bl	116ec <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
   17b88:	2000      	movs	r0, #0
   17b8a:	f7f9 f8b9 	bl	10d00 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   17b8e:	f7fd fdb1 	bl	156f4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
   17b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17b96:	f7fb b831 	b.w	12bfc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
   17b9a:	0000      	.short	0x0000
   17b9c:	200017b5 	.word	0x200017b5
   17ba0:	b510      	push	{r4, lr}
   17ba2:	f7fb fba7 	bl	132f4 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
   17ba6:	f7ff fb47 	bl	17238 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
   17baa:	f7fc fd7f 	bl	146ac <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
   17bae:	4803      	ldr	r0, [pc, #12]	; (17bbc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
   17bb0:	f7fb fb3c 	bl	1322c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
   17bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17bb8:	f7fb b830 	b.w	12c1c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
   17bbc:	200017b5 	.word	0x200017b5

00017bc0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
   17bc0:	2101      	movs	r1, #1
   17bc2:	4081      	lsls	r1, r0
   17bc4:	4802      	ldr	r0, [pc, #8]	; (17bd0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
   17bc6:	6802      	ldr	r2, [r0, #0]
   17bc8:	4311      	orrs	r1, r2
   17bca:	6001      	str	r1, [r0, #0]
   17bcc:	4770      	bx	lr
   17bce:	0000      	.short	0x0000
   17bd0:	2000024c 	.word	0x2000024c

00017bd4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
   17bd4:	4801      	ldr	r0, [pc, #4]	; (17bdc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
   17bd6:	6800      	ldr	r0, [r0, #0]
   17bd8:	4770      	bx	lr
   17bda:	0000      	.short	0x0000
   17bdc:	2000024c 	.word	0x2000024c

00017be0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
   17be0:	4803      	ldr	r0, [pc, #12]	; (17bf0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
   17be2:	8800      	ldrh	r0, [r0, #0]
   17be4:	f3c0 2000 	ubfx	r0, r0, #8, #1
   17be8:	0040      	lsls	r0, r0, #1
   17bea:	1c40      	adds	r0, r0, #1
   17bec:	4770      	bx	lr
   17bee:	0000      	.short	0x0000
   17bf0:	2000024c 	.word	0x2000024c

00017bf4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
   17bf4:	b510      	push	{r4, lr}
   17bf6:	f7f8 fb01 	bl	101fc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   17bfa:	2200      	movs	r2, #0
   17bfc:	4b08      	ldr	r3, [pc, #32]	; (17c20 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
   17bfe:	4611      	mov	r1, r2
   17c00:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
   17c04:	4284      	cmp	r4, r0
   17c06:	d303      	bcc.n	17c10 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
   17c08:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   17c0c:	7882      	ldrb	r2, [r0, #2]
   17c0e:	e003      	b.n	17c18 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
   17c10:	1c49      	adds	r1, r1, #1
   17c12:	b2c9      	uxtb	r1, r1
   17c14:	290c      	cmp	r1, #12
   17c16:	d3f3      	bcc.n	17c00 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
   17c18:	4802      	ldr	r0, [pc, #8]	; (17c24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
   17c1a:	7002      	strb	r2, [r0, #0]
   17c1c:	bd10      	pop	{r4, pc}
   17c1e:	0000      	.short	0x0000
   17c20:	0001c8f4 	.word	0x0001c8f4
   17c24:	200002a1 	.word	0x200002a1

00017c28 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
   17c28:	4801      	ldr	r0, [pc, #4]	; (17c30 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
   17c2a:	7800      	ldrb	r0, [r0, #0]
   17c2c:	4770      	bx	lr
   17c2e:	0000      	.short	0x0000
   17c30:	200002a1 	.word	0x200002a1

00017c34 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
   17c34:	b570      	push	{r4, r5, r6, lr}
   17c36:	4605      	mov	r5, r0
   17c38:	4616      	mov	r6, r2
   17c3a:	460c      	mov	r4, r1
   17c3c:	2002      	movs	r0, #2
   17c3e:	f000 f9f9 	bl	18034 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17c42:	4906      	ldr	r1, [pc, #24]	; (17c5c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
   17c44:	2001      	movs	r0, #1
   17c46:	1ef6      	subs	r6, r6, #3
   17c48:	7008      	strb	r0, [r1, #0]
   17c4a:	4805      	ldr	r0, [pc, #20]	; (17c60 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   17c4c:	6006      	str	r6, [r0, #0]
   17c4e:	4804      	ldr	r0, [pc, #16]	; (17c60 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   17c50:	3808      	subs	r0, #8
   17c52:	6005      	str	r5, [r0, #0]
   17c54:	1f00      	subs	r0, r0, #4
   17c56:	6004      	str	r4, [r0, #0]
   17c58:	bd70      	pop	{r4, r5, r6, pc}
   17c5a:	0000      	.short	0x0000
   17c5c:	200002a2 	.word	0x200002a2
   17c60:	4000f510 	.word	0x4000f510

00017c64 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
   17c64:	b510      	push	{r4, lr}
   17c66:	4c0c      	ldr	r4, [pc, #48]	; (17c98 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
   17c68:	7820      	ldrb	r0, [r4, #0]
   17c6a:	b180      	cbz	r0, 17c8e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
   17c6c:	490b      	ldr	r1, [pc, #44]	; (17c9c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
   17c6e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17c72:	6008      	str	r0, [r1, #0]
   17c74:	f000 f86a 	bl	17d4c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
   17c78:	2100      	movs	r1, #0
   17c7a:	b120      	cbz	r0, 17c86 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
   17c7c:	2001      	movs	r0, #1
   17c7e:	7060      	strb	r0, [r4, #1]
   17c80:	4807      	ldr	r0, [pc, #28]	; (17ca0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
   17c82:	6800      	ldr	r0, [r0, #0]
   17c84:	e001      	b.n	17c8a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
   17c86:	7061      	strb	r1, [r4, #1]
   17c88:	2010      	movs	r0, #16
   17c8a:	70a0      	strb	r0, [r4, #2]
   17c8c:	7021      	strb	r1, [r4, #0]
   17c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17c92:	2000      	movs	r0, #0
   17c94:	f000 b9ce 	b.w	18034 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17c98:	200002a2 	.word	0x200002a2
   17c9c:	4001f508 	.word	0x4001f508
   17ca0:	4000f400 	.word	0x4000f400

00017ca4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
   17ca4:	b510      	push	{r4, lr}
   17ca6:	2002      	movs	r0, #2
   17ca8:	f000 f9c4 	bl	18034 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17cac:	4904      	ldr	r1, [pc, #16]	; (17cc0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
   17cae:	2001      	movs	r0, #1
   17cb0:	7008      	strb	r0, [r1, #0]
   17cb2:	f000 f859 	bl	17d68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
   17cb6:	4903      	ldr	r1, [pc, #12]	; (17cc4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
   17cb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17cbc:	6008      	str	r0, [r1, #0]
   17cbe:	bd10      	pop	{r4, pc}
   17cc0:	200002a2 	.word	0x200002a2
   17cc4:	4001f504 	.word	0x4001f504

00017cc8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
   17cc8:	4803      	ldr	r0, [pc, #12]	; (17cd8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
   17cca:	2100      	movs	r1, #0
   17ccc:	7001      	strb	r1, [r0, #0]
   17cce:	7041      	strb	r1, [r0, #1]
   17cd0:	2110      	movs	r1, #16
   17cd2:	7081      	strb	r1, [r0, #2]
   17cd4:	4770      	bx	lr
   17cd6:	0000      	.short	0x0000
   17cd8:	200002a2 	.word	0x200002a2

00017cdc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
   17cdc:	4807      	ldr	r0, [pc, #28]	; (17cfc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
   17cde:	b510      	push	{r4, lr}
   17ce0:	7801      	ldrb	r1, [r0, #0]
   17ce2:	b141      	cbz	r1, 17cf6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
   17ce4:	f000 f832 	bl	17d4c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
   17ce8:	b118      	cbz	r0, 17cf2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
   17cea:	4805      	ldr	r0, [pc, #20]	; (17d00 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
   17cec:	6800      	ldr	r0, [r0, #0]
   17cee:	b2c0      	uxtb	r0, r0
   17cf0:	bd10      	pop	{r4, pc}
   17cf2:	2010      	movs	r0, #16
   17cf4:	bd10      	pop	{r4, pc}
   17cf6:	7880      	ldrb	r0, [r0, #2]
   17cf8:	bd10      	pop	{r4, pc}
   17cfa:	0000      	.short	0x0000
   17cfc:	200002a2 	.word	0x200002a2
   17d00:	4000f400 	.word	0x4000f400

00017d04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
   17d04:	4808      	ldr	r0, [pc, #32]	; (17d28 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
   17d06:	b510      	push	{r4, lr}
   17d08:	7801      	ldrb	r1, [r0, #0]
   17d0a:	b159      	cbz	r1, 17d24 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
   17d0c:	4807      	ldr	r0, [pc, #28]	; (17d2c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
   17d0e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   17d12:	b128      	cbz	r0, 17d20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
   17d14:	f000 f80c 	bl	17d30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
   17d18:	2800      	cmp	r0, #0
   17d1a:	d000      	beq.n	17d1e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
   17d1c:	2001      	movs	r0, #1
   17d1e:	bd10      	pop	{r4, pc}
   17d20:	2002      	movs	r0, #2
   17d22:	bd10      	pop	{r4, pc}
   17d24:	7840      	ldrb	r0, [r0, #1]
   17d26:	bd10      	pop	{r4, pc}
   17d28:	200002a2 	.word	0x200002a2
   17d2c:	4000f000 	.word	0x4000f000
   17d30:	4805      	ldr	r0, [pc, #20]	; (17d48 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
   17d32:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   17d36:	b111      	cbz	r1, 17d3e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
   17d38:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   17d3c:	b108      	cbz	r0, 17d42 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
   17d3e:	2000      	movs	r0, #0
   17d40:	4770      	bx	lr
   17d42:	2001      	movs	r0, #1
   17d44:	4770      	bx	lr
   17d46:	0000      	.short	0x0000
   17d48:	4000f000 	.word	0x4000f000
   17d4c:	4805      	ldr	r0, [pc, #20]	; (17d64 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
   17d4e:	b510      	push	{r4, lr}
   17d50:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   17d54:	b120      	cbz	r0, 17d60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
   17d56:	f7ff ffeb 	bl	17d30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
   17d5a:	b108      	cbz	r0, 17d60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
   17d5c:	2001      	movs	r0, #1
   17d5e:	bd10      	pop	{r4, pc}
   17d60:	2000      	movs	r0, #0
   17d62:	bd10      	pop	{r4, pc}
   17d64:	4000f000 	.word	0x4000f000
   17d68:	4804      	ldr	r0, [pc, #16]	; (17d7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
   17d6a:	2100      	movs	r1, #0
   17d6c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   17d70:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   17d74:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   17d78:	4770      	bx	lr
   17d7a:	0000      	.short	0x0000
   17d7c:	4000f000 	.word	0x4000f000

00017d80 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
   17d80:	4a08      	ldr	r2, [pc, #32]	; (17da4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
   17d82:	b510      	push	{r4, lr}
   17d84:	e9c2 0102 	strd	r0, r1, [r2, #8]
   17d88:	4907      	ldr	r1, [pc, #28]	; (17da8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
   17d8a:	4610      	mov	r0, r2
   17d8c:	f7f8 fc8c 	bl	106a8 <mpsl_fem_lna_configuration_set>
   17d90:	2800      	cmp	r0, #0
   17d92:	d005      	beq.n	17da0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
   17d94:	1c40      	adds	r0, r0, #1
   17d96:	d003      	beq.n	17da0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
   17d98:	217d      	movs	r1, #125	; 0x7d
   17d9a:	2040      	movs	r0, #64	; 0x40
   17d9c:	f7f8 fde8 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17da0:	bd10      	pop	{r4, pc}
   17da2:	0000      	.short	0x0000
   17da4:	20000250 	.word	0x20000250
   17da8:	00017dd8 	.word	0x00017dd8

00017dac <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
   17dac:	4a08      	ldr	r2, [pc, #32]	; (17dd0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
   17dae:	b510      	push	{r4, lr}
   17db0:	e9c2 0102 	strd	r0, r1, [r2, #8]
   17db4:	4907      	ldr	r1, [pc, #28]	; (17dd4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
   17db6:	4610      	mov	r0, r2
   17db8:	f7f8 fc82 	bl	106c0 <mpsl_fem_pa_configuration_set>
   17dbc:	2800      	cmp	r0, #0
   17dbe:	d005      	beq.n	17dcc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
   17dc0:	1c40      	adds	r0, r0, #1
   17dc2:	d003      	beq.n	17dcc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
   17dc4:	2172      	movs	r1, #114	; 0x72
   17dc6:	2040      	movs	r0, #64	; 0x40
   17dc8:	f7f8 fdd2 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17dcc:	bd10      	pop	{r4, pc}
   17dce:	0000      	.short	0x0000
   17dd0:	20000250 	.word	0x20000250
   17dd4:	00017dd8 	.word	0x00017dd8
   17dd8:	00000001 	.word	0x00000001
   17ddc:	40001110 	.word	0x40001110
	...

00017df0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
   17df0:	4a07      	ldr	r2, [pc, #28]	; (17e10 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
   17df2:	b510      	push	{r4, lr}
   17df4:	7853      	ldrb	r3, [r2, #1]
   17df6:	b133      	cbz	r3, 17e06 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
   17df8:	4b06      	ldr	r3, [pc, #24]	; (17e14 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
   17dfa:	6019      	str	r1, [r3, #0]
   17dfc:	1d19      	adds	r1, r3, #4
   17dfe:	6008      	str	r0, [r1, #0]
   17e00:	2001      	movs	r0, #1
   17e02:	7090      	strb	r0, [r2, #2]
   17e04:	bd10      	pop	{r4, pc}
   17e06:	21ba      	movs	r1, #186	; 0xba
   17e08:	203c      	movs	r0, #60	; 0x3c
   17e0a:	f7f8 fdb1 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17e0e:	0000      	.short	0x0000
   17e10:	200002a5 	.word	0x200002a5
   17e14:	4000f50c 	.word	0x4000f50c

00017e18 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
   17e18:	4809      	ldr	r0, [pc, #36]	; (17e40 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
   17e1a:	b510      	push	{r4, lr}
   17e1c:	7801      	ldrb	r1, [r0, #0]
   17e1e:	b151      	cbz	r1, 17e36 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
   17e20:	7880      	ldrb	r0, [r0, #2]
   17e22:	b140      	cbz	r0, 17e36 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
   17e24:	4907      	ldr	r1, [pc, #28]	; (17e44 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
   17e26:	2000      	movs	r0, #0
   17e28:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   17e2c:	4906      	ldr	r1, [pc, #24]	; (17e48 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
   17e2e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   17e32:	6008      	str	r0, [r1, #0]
   17e34:	bd10      	pop	{r4, pc}
   17e36:	21e1      	movs	r1, #225	; 0xe1
   17e38:	203c      	movs	r0, #60	; 0x3c
   17e3a:	f7f8 fd99 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17e3e:	0000      	.short	0x0000
   17e40:	200002a5 	.word	0x200002a5
   17e44:	4000f000 	.word	0x4000f000
   17e48:	4001f504 	.word	0x4001f504

00017e4c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
   17e4c:	b570      	push	{r4, r5, r6, lr}
   17e4e:	4c0b      	ldr	r4, [pc, #44]	; (17e7c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
   17e50:	2500      	movs	r5, #0
   17e52:	7820      	ldrb	r0, [r4, #0]
   17e54:	b158      	cbz	r0, 17e6e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
   17e56:	f000 f8e5 	bl	18024 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
   17e5a:	4809      	ldr	r0, [pc, #36]	; (17e80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
   17e5c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
   17e60:	b118      	cbz	r0, 17e6a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
   17e62:	4808      	ldr	r0, [pc, #32]	; (17e84 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
   17e64:	6800      	ldr	r0, [r0, #0]
   17e66:	70e0      	strb	r0, [r4, #3]
   17e68:	e000      	b.n	17e6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
   17e6a:	70e5      	strb	r5, [r4, #3]
   17e6c:	7025      	strb	r5, [r4, #0]
   17e6e:	2000      	movs	r0, #0
   17e70:	f000 f8e0 	bl	18034 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17e74:	7065      	strb	r5, [r4, #1]
   17e76:	70a5      	strb	r5, [r4, #2]
   17e78:	bd70      	pop	{r4, r5, r6, pc}
   17e7a:	0000      	.short	0x0000
   17e7c:	200002a5 	.word	0x200002a5
   17e80:	4000f000 	.word	0x4000f000
   17e84:	4000f400 	.word	0x4000f400

00017e88 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
   17e88:	480d      	ldr	r0, [pc, #52]	; (17ec0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
   17e8a:	b510      	push	{r4, lr}
   17e8c:	7801      	ldrb	r1, [r0, #0]
   17e8e:	b191      	cbz	r1, 17eb6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
   17e90:	7880      	ldrb	r0, [r0, #2]
   17e92:	b180      	cbz	r0, 17eb6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
   17e94:	490b      	ldr	r1, [pc, #44]	; (17ec4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
   17e96:	2000      	movs	r0, #0
   17e98:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   17e9c:	4a0a      	ldr	r2, [pc, #40]	; (17ec8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
   17e9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17ea2:	6010      	str	r0, [r2, #0]
   17ea4:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   17ea8:	2a01      	cmp	r2, #1
   17eaa:	d103      	bne.n	17eb4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
   17eac:	604a      	str	r2, [r1, #4]
   17eae:	4906      	ldr	r1, [pc, #24]	; (17ec8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
   17eb0:	1d09      	adds	r1, r1, #4
   17eb2:	6008      	str	r0, [r1, #0]
   17eb4:	bd10      	pop	{r4, pc}
   17eb6:	21d1      	movs	r1, #209	; 0xd1
   17eb8:	203c      	movs	r0, #60	; 0x3c
   17eba:	f7f8 fd59 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17ebe:	0000      	.short	0x0000
   17ec0:	200002a5 	.word	0x200002a5
   17ec4:	4000f000 	.word	0x4000f000
   17ec8:	4001f504 	.word	0x4001f504

00017ecc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
   17ecc:	4803      	ldr	r0, [pc, #12]	; (17edc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
   17ece:	2100      	movs	r1, #0
   17ed0:	7001      	strb	r1, [r0, #0]
   17ed2:	7041      	strb	r1, [r0, #1]
   17ed4:	7081      	strb	r1, [r0, #2]
   17ed6:	70c1      	strb	r1, [r0, #3]
   17ed8:	4770      	bx	lr
   17eda:	0000      	.short	0x0000
   17edc:	200002a5 	.word	0x200002a5

00017ee0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
   17ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ee4:	4605      	mov	r5, r0
   17ee6:	461c      	mov	r4, r3
   17ee8:	4690      	mov	r8, r2
   17eea:	460f      	mov	r7, r1
   17eec:	2001      	movs	r0, #1
   17eee:	f000 f8a1 	bl	18034 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17ef2:	4e12      	ldr	r6, [pc, #72]	; (17f3c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
   17ef4:	4812      	ldr	r0, [pc, #72]	; (17f40 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   17ef6:	7134      	strb	r4, [r6, #4]
   17ef8:	6007      	str	r7, [r0, #0]
   17efa:	4911      	ldr	r1, [pc, #68]	; (17f40 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   17efc:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   17f00:	1f09      	subs	r1, r1, #4
   17f02:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   17f06:	6008      	str	r0, [r1, #0]
   17f08:	f001 faff 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   17f0c:	b938      	cbnz	r0, 17f1e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
   17f0e:	480c      	ldr	r0, [pc, #48]	; (17f40 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   17f10:	3010      	adds	r0, #16
   17f12:	6801      	ldr	r1, [r0, #0]
   17f14:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   17f18:	ea41 0108 	orr.w	r1, r1, r8
   17f1c:	6001      	str	r1, [r0, #0]
   17f1e:	f000 f881 	bl	18024 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
   17f22:	b93d      	cbnz	r5, 17f34 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
   17f24:	4808      	ldr	r0, [pc, #32]	; (17f48 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
   17f26:	4a07      	ldr	r2, [pc, #28]	; (17f44 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
   17f28:	4906      	ldr	r1, [pc, #24]	; (17f44 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
   17f2a:	3afc      	subs	r2, #252	; 0xfc
   17f2c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   17f30:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
   17f34:	2001      	movs	r0, #1
   17f36:	7070      	strb	r0, [r6, #1]
   17f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f3c:	200002a5 	.word	0x200002a5
   17f40:	4000f508 	.word	0x4000f508
   17f44:	4000f100 	.word	0x4000f100
   17f48:	4001f088 	.word	0x4001f088

00017f4c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
   17f4c:	4808      	ldr	r0, [pc, #32]	; (17f70 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
   17f4e:	b510      	push	{r4, lr}
   17f50:	7841      	ldrb	r1, [r0, #1]
   17f52:	b149      	cbz	r1, 17f68 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
   17f54:	2101      	movs	r1, #1
   17f56:	7001      	strb	r1, [r0, #0]
   17f58:	4806      	ldr	r0, [pc, #24]	; (17f74 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
   17f5a:	2200      	movs	r2, #0
   17f5c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
   17f60:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   17f64:	6001      	str	r1, [r0, #0]
   17f66:	bd10      	pop	{r4, pc}
   17f68:	21c5      	movs	r1, #197	; 0xc5
   17f6a:	203c      	movs	r0, #60	; 0x3c
   17f6c:	f7f8 fd00 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17f70:	200002a5 	.word	0x200002a5
   17f74:	4000f000 	.word	0x4000f000

00017f78 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
   17f78:	4806      	ldr	r0, [pc, #24]	; (17f94 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
   17f7a:	7801      	ldrb	r1, [r0, #0]
   17f7c:	b141      	cbz	r1, 17f90 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
   17f7e:	4806      	ldr	r0, [pc, #24]	; (17f98 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
   17f80:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
   17f84:	2800      	cmp	r0, #0
   17f86:	d002      	beq.n	17f8e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
   17f88:	4804      	ldr	r0, [pc, #16]	; (17f9c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
   17f8a:	6800      	ldr	r0, [r0, #0]
   17f8c:	b2c0      	uxtb	r0, r0
   17f8e:	4770      	bx	lr
   17f90:	78c0      	ldrb	r0, [r0, #3]
   17f92:	4770      	bx	lr
   17f94:	200002a5 	.word	0x200002a5
   17f98:	4000f000 	.word	0x4000f000
   17f9c:	4000f400 	.word	0x4000f400

00017fa0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
   17fa0:	4901      	ldr	r1, [pc, #4]	; (17fa8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
   17fa2:	2001      	movs	r0, #1
   17fa4:	6088      	str	r0, [r1, #8]
   17fa6:	4770      	bx	lr
   17fa8:	4000f000 	.word	0x4000f000

00017fac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
   17fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17fb0:	2800      	cmp	r0, #0
   17fb2:	d02e      	beq.n	18012 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
   17fb4:	4818      	ldr	r0, [pc, #96]	; (18018 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
   17fb6:	7800      	ldrb	r0, [r0, #0]
   17fb8:	b1b0      	cbz	r0, 17fe8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
   17fba:	4d18      	ldr	r5, [pc, #96]	; (1801c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
   17fbc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   17fc0:	2800      	cmp	r0, #0
   17fc2:	d126      	bne.n	18012 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
   17fc4:	2702      	movs	r7, #2
   17fc6:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
   17fca:	4c15      	ldr	r4, [pc, #84]	; (18020 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
   17fcc:	6820      	ldr	r0, [r4, #0]
   17fce:	43c0      	mvns	r0, r0
   17fd0:	f340 1600 	sbfx	r6, r0, #4, #1
   17fd4:	6820      	ldr	r0, [r4, #0]
   17fd6:	f040 0010 	orr.w	r0, r0, #16
   17fda:	6020      	str	r0, [r4, #0]
   17fdc:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   17fe0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
   17fe4:	1c76      	adds	r6, r6, #1
   17fe6:	e009      	b.n	17ffc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
   17fe8:	f240 1153 	movw	r1, #339	; 0x153
   17fec:	203c      	movs	r0, #60	; 0x3c
   17fee:	f7f8 fcbf 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17ff2:	bf00      	nop
   17ff4:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
   17ff8:	f7f8 fb00 	bl	105fc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   17ffc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   18000:	2800      	cmp	r0, #0
   18002:	d0f7      	beq.n	17ff4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
   18004:	b91e      	cbnz	r6, 1800e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
   18006:	6820      	ldr	r0, [r4, #0]
   18008:	f020 0010 	bic.w	r0, r0, #16
   1800c:	6020      	str	r0, [r4, #0]
   1800e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
   18012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18016:	0000      	.short	0x0000
   18018:	200002a5 	.word	0x200002a5
   1801c:	4000f000 	.word	0x4000f000
   18020:	e000ed10 	.word	0xe000ed10
   18024:	4902      	ldr	r1, [pc, #8]	; (18030 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
   18026:	4801      	ldr	r0, [pc, #4]	; (1802c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
   18028:	6008      	str	r0, [r1, #0]
   1802a:	4770      	bx	lr
   1802c:	02020000 	.word	0x02020000
   18030:	4001f508 	.word	0x4001f508

00018034 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
   18034:	b510      	push	{r4, lr}
   18036:	4604      	mov	r4, r0
   18038:	f000 f822 	bl	18080 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1803c:	2c00      	cmp	r4, #0
   1803e:	d017      	beq.n	18070 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
   18040:	4a0c      	ldr	r2, [pc, #48]	; (18074 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
   18042:	480c      	ldr	r0, [pc, #48]	; (18074 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
   18044:	490c      	ldr	r1, [pc, #48]	; (18078 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
   18046:	3214      	adds	r2, #20
   18048:	4b0c      	ldr	r3, [pc, #48]	; (1807c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
   1804a:	2c01      	cmp	r4, #1
   1804c:	d005      	beq.n	1805a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
   1804e:	2c02      	cmp	r4, #2
   18050:	d008      	beq.n	18064 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
   18052:	2183      	movs	r1, #131	; 0x83
   18054:	203d      	movs	r0, #61	; 0x3d
   18056:	f7f8 fc8b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1805a:	2402      	movs	r4, #2
   1805c:	6004      	str	r4, [r0, #0]
   1805e:	6011      	str	r1, [r2, #0]
   18060:	0620      	lsls	r0, r4, #24
   18062:	e004      	b.n	1806e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
   18064:	2403      	movs	r4, #3
   18066:	6004      	str	r4, [r0, #0]
   18068:	6011      	str	r1, [r2, #0]
   1806a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1806e:	6018      	str	r0, [r3, #0]
   18070:	bd10      	pop	{r4, pc}
   18072:	0000      	.short	0x0000
   18074:	4000f500 	.word	0x4000f500
   18078:	200018b7 	.word	0x200018b7
   1807c:	4001f504 	.word	0x4001f504
   18080:	4804      	ldr	r0, [pc, #16]	; (18094 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
   18082:	2100      	movs	r1, #0
   18084:	6001      	str	r1, [r0, #0]
   18086:	6001      	str	r1, [r0, #0]
   18088:	4903      	ldr	r1, [pc, #12]	; (18098 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
   1808a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
   1808e:	6008      	str	r0, [r1, #0]
   18090:	4770      	bx	lr
   18092:	0000      	.short	0x0000
   18094:	4000f500 	.word	0x4000f500
   18098:	4001f508 	.word	0x4001f508

0001809c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
   1809c:	4805      	ldr	r0, [pc, #20]	; (180b4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
   1809e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   180a2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   180a6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   180aa:	2100      	movs	r1, #0
   180ac:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
   180b0:	4770      	bx	lr
   180b2:	0000      	.short	0x0000
   180b4:	40001000 	.word	0x40001000

000180b8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
   180b8:	4904      	ldr	r1, [pc, #16]	; (180cc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
   180ba:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
   180be:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
   180c2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   180c6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   180ca:	4770      	bx	lr
   180cc:	40001000 	.word	0x40001000

000180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
   180d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180d2:	4c23      	ldr	r4, [pc, #140]	; (18160 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
   180d4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   180d8:	f010 0f10 	tst.w	r0, #16
   180dc:	d001      	beq.n	180e2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
   180de:	2701      	movs	r7, #1
   180e0:	e000      	b.n	180e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
   180e2:	2700      	movs	r7, #0
   180e4:	2010      	movs	r0, #16
   180e6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   180ea:	2002      	movs	r0, #2
   180ec:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   180f0:	481c      	ldr	r0, [pc, #112]	; (18164 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
   180f2:	2500      	movs	r5, #0
   180f4:	491d      	ldr	r1, [pc, #116]	; (1816c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
   180f6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
   180fa:	481b      	ldr	r0, [pc, #108]	; (18168 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
   180fc:	6008      	str	r0, [r1, #0]
   180fe:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   18102:	f44f 7688 	mov.w	r6, #272	; 0x110
   18106:	f010 0fff 	tst.w	r0, #255	; 0xff
   1810a:	d018      	beq.n	1813e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
   1810c:	20ff      	movs	r0, #255	; 0xff
   1810e:	f88d 0000 	strb.w	r0, [sp]
   18112:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   18116:	2001      	movs	r0, #1
   18118:	6120      	str	r0, [r4, #16]
   1811a:	e004      	b.n	18126 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
   1811c:	f89d 0000 	ldrb.w	r0, [sp]
   18120:	1e40      	subs	r0, r0, #1
   18122:	f88d 0000 	strb.w	r0, [sp]
   18126:	f89d 0000 	ldrb.w	r0, [sp]
   1812a:	b128      	cbz	r0, 18138 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
   1812c:	4631      	mov	r1, r6
   1812e:	4620      	mov	r0, r4
   18130:	f004 fcaf 	bl	1ca92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   18134:	2800      	cmp	r0, #0
   18136:	d0f1      	beq.n	1811c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
   18138:	f89d 0000 	ldrb.w	r0, [sp]
   1813c:	b158      	cbz	r0, 18156 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
   1813e:	f000 fc91 	bl	18a64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
   18142:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   18146:	f000 fe0d 	bl	18d64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   1814a:	2f00      	cmp	r7, #0
   1814c:	d002      	beq.n	18154 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
   1814e:	2010      	movs	r0, #16
   18150:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   18154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18156:	f240 718f 	movw	r1, #1935	; 0x78f
   1815a:	203e      	movs	r0, #62	; 0x3e
   1815c:	f7f8 fc08 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18160:	40001000 	.word	0x40001000
   18164:	20001574 	.word	0x20001574
   18168:	0c0e0000 	.word	0x0c0e0000
   1816c:	4001f508 	.word	0x4001f508

00018170 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
   18170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18174:	4d20      	ldr	r5, [pc, #128]	; (181f8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
   18176:	4607      	mov	r7, r0
   18178:	4688      	mov	r8, r1
   1817a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
   1817e:	07c1      	lsls	r1, r0, #31
   18180:	d018      	beq.n	181b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
   18182:	4a1e      	ldr	r2, [pc, #120]	; (181fc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
   18184:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
   18188:	6011      	str	r1, [r2, #0]
   1818a:	4c1d      	ldr	r4, [pc, #116]	; (18200 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
   1818c:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
   18190:	f041 0101 	orr.w	r1, r1, #1
   18194:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   18198:	f040 0002 	orr.w	r0, r0, #2
   1819c:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
   181a0:	4640      	mov	r0, r8
   181a2:	f000 fe43 	bl	18e2c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   181a6:	f000 fbfb 	bl	189a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   181aa:	2601      	movs	r6, #1
   181ac:	b13f      	cbz	r7, 181be <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
   181ae:	2f01      	cmp	r7, #1
   181b0:	d00e      	beq.n	181d0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
   181b2:	e016      	b.n	181e2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
   181b4:	f240 611a 	movw	r1, #1562	; 0x61a
   181b8:	203e      	movs	r0, #62	; 0x3e
   181ba:	f7f8 fbd9 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   181be:	4640      	mov	r0, r8
   181c0:	f000 fc1e 	bl	18a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   181c4:	4640      	mov	r0, r8
   181c6:	f000 fbcf 	bl	18968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   181ca:	726e      	strb	r6, [r5, #9]
   181cc:	6026      	str	r6, [r4, #0]
   181ce:	e008      	b.n	181e2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
   181d0:	f000 fc3e 	bl	18a50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   181d4:	f000 fd8c 	bl	18cf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   181d8:	2002      	movs	r0, #2
   181da:	7268      	strb	r0, [r5, #9]
   181dc:	f000 fcb0 	bl	18b40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   181e0:	6066      	str	r6, [r4, #4]
   181e2:	4808      	ldr	r0, [pc, #32]	; (18204 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
   181e4:	64c6      	str	r6, [r0, #76]	; 0x4c
   181e6:	4807      	ldr	r0, [pc, #28]	; (18204 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
   181e8:	300c      	adds	r0, #12
   181ea:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
   181ee:	4638      	mov	r0, r7
   181f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   181f4:	f004 bc35 	b.w	1ca62 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   181f8:	20001574 	.word	0x20001574
   181fc:	4001f504 	.word	0x4001f504
   18200:	40001000 	.word	0x40001000
   18204:	40008000 	.word	0x40008000

00018208 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
   18208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1820c:	4d35      	ldr	r5, [pc, #212]	; (182e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
   1820e:	4606      	mov	r6, r0
   18210:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   18214:	4689      	mov	r9, r1
   18216:	6028      	str	r0, [r5, #0]
   18218:	4c33      	ldr	r4, [pc, #204]	; (182e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
   1821a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   1821e:	f040 0002 	orr.w	r0, r0, #2
   18222:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
   18226:	4608      	mov	r0, r1
   18228:	f000 fe00 	bl	18e2c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   1822c:	f000 fbb8 	bl	189a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   18230:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 182ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
   18234:	2700      	movs	r7, #0
   18236:	b116      	cbz	r6, 1823e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
   18238:	2e01      	cmp	r6, #1
   1823a:	d027      	beq.n	1828c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
   1823c:	e03f      	b.n	182be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
   1823e:	4648      	mov	r0, r9
   18240:	f000 fbde 	bl	18a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   18244:	79e0      	ldrb	r0, [r4, #7]
   18246:	2801      	cmp	r0, #1
   18248:	d105      	bne.n	18256 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
   1824a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
   1824e:	f041 0108 	orr.w	r1, r1, #8
   18252:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
   18256:	4648      	mov	r0, r9
   18258:	f000 fb86 	bl	18968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1825c:	2001      	movs	r0, #1
   1825e:	7260      	strb	r0, [r4, #9]
   18260:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   18262:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   18266:	62a0      	str	r0, [r4, #40]	; 0x28
   18268:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1826c:	6028      	str	r0, [r5, #0]
   1826e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18272:	f1b9 0f02 	cmp.w	r9, #2
   18276:	d007      	beq.n	18288 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
   18278:	f640 0034 	movw	r0, #2100	; 0x834
   1827c:	f649 72ec 	movw	r2, #40940	; 0x9fec
   18280:	4410      	add	r0, r2
   18282:	fbb0 f7f1 	udiv	r7, r0, r1
   18286:	e01a      	b.n	182be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
   18288:	4608      	mov	r0, r1
   1828a:	e7f7      	b.n	1827c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
   1828c:	f000 fbe0 	bl	18a50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   18290:	f000 fd2e 	bl	18cf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   18294:	79e0      	ldrb	r0, [r4, #7]
   18296:	2801      	cmp	r0, #1
   18298:	d105      	bne.n	182a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
   1829a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
   1829e:	f041 0104 	orr.w	r1, r1, #4
   182a2:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
   182a6:	2002      	movs	r0, #2
   182a8:	7260      	strb	r0, [r4, #9]
   182aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   182ac:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
   182b0:	62a0      	str	r0, [r4, #40]	; 0x28
   182b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   182b6:	6028      	str	r0, [r5, #0]
   182b8:	2729      	movs	r7, #41	; 0x29
   182ba:	f000 fc41 	bl	18b40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   182be:	f000 fc2b 	bl	18b18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   182c2:	f000 fff9 	bl	192b8 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
   182c6:	6800      	ldr	r0, [r0, #0]
   182c8:	2801      	cmp	r0, #1
   182ca:	d006      	beq.n	182da <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
   182cc:	2100      	movs	r1, #0
   182ce:	4630      	mov	r0, r6
   182d0:	f004 fbc7 	bl	1ca62 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   182d4:	4638      	mov	r0, r7
   182d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   182da:	f7ff fef9 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   182de:	2000      	movs	r0, #0
   182e0:	e7f9      	b.n	182d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
   182e2:	0000      	.short	0x0000
   182e4:	4001f504 	.word	0x4001f504
   182e8:	20001574 	.word	0x20001574
   182ec:	40001000 	.word	0x40001000

000182f0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
   182f0:	b510      	push	{r4, lr}
   182f2:	c81d      	ldmia	r0, {r0, r2, r3, r4}
   182f4:	4901      	ldr	r1, [pc, #4]	; (182fc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
   182f6:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
   182fa:	bd10      	pop	{r4, pc}
   182fc:	20001564 	.word	0x20001564

00018300 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
   18300:	b570      	push	{r4, r5, r6, lr}
   18302:	4c11      	ldr	r4, [pc, #68]	; (18348 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
   18304:	4606      	mov	r6, r0
   18306:	2002      	movs	r0, #2
   18308:	7320      	strb	r0, [r4, #12]
   1830a:	2596      	movs	r5, #150	; 0x96
   1830c:	f000 f85e 	bl	183cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
   18310:	4602      	mov	r2, r0
   18312:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   18316:	f894 1020 	ldrb.w	r1, [r4, #32]
   1831a:	2801      	cmp	r0, #1
   1831c:	d00f      	beq.n	1833e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
   1831e:	4628      	mov	r0, r5
   18320:	f004 fbc1 	bl	1caa6 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
   18324:	6120      	str	r0, [r4, #16]
   18326:	4809      	ldr	r0, [pc, #36]	; (1834c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
   18328:	2100      	movs	r1, #0
   1832a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1832e:	6921      	ldr	r1, [r4, #16]
   18330:	69e0      	ldr	r0, [r4, #28]
   18332:	4408      	add	r0, r1
   18334:	4905      	ldr	r1, [pc, #20]	; (1834c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
   18336:	1d09      	adds	r1, r1, #4
   18338:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   1833c:	bd70      	pop	{r4, r5, r6, pc}
   1833e:	4633      	mov	r3, r6
   18340:	4628      	mov	r0, r5
   18342:	f004 fbcc 	bl	1cade <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
   18346:	e7ed      	b.n	18324 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
   18348:	20001574 	.word	0x20001574
   1834c:	40008000 	.word	0x40008000

00018350 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
   18350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18354:	2238      	movs	r2, #56	; 0x38
   18356:	2100      	movs	r1, #0
   18358:	4813      	ldr	r0, [pc, #76]	; (183a8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
   1835a:	f001 f9a2 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1835e:	f000 fd01 	bl	18d64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   18362:	f001 f8a7 	bl	194b4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   18366:	4d11      	ldr	r5, [pc, #68]	; (183ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   18368:	4e10      	ldr	r6, [pc, #64]	; (183ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   1836a:	2400      	movs	r4, #0
   1836c:	4f0f      	ldr	r7, [pc, #60]	; (183ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   1836e:	3508      	adds	r5, #8
   18370:	3610      	adds	r6, #16
   18372:	b928      	cbnz	r0, 18380 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
   18374:	f001 f8b5 	bl	194e2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   18378:	b910      	cbnz	r0, 18380 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
   1837a:	f001 f8bc 	bl	194f6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1837e:	b108      	cbz	r0, 18384 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
   18380:	2224      	movs	r2, #36	; 0x24
   18382:	e006      	b.n	18392 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
   18384:	f001 f8f7 	bl	19576 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   18388:	b910      	cbnz	r0, 18390 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
   1838a:	f001 f8ea 	bl	19562 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   1838e:	b140      	cbz	r0, 183a2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
   18390:	2240      	movs	r2, #64	; 0x40
   18392:	21ff      	movs	r1, #255	; 0xff
   18394:	4638      	mov	r0, r7
   18396:	f001 f984 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1839a:	602c      	str	r4, [r5, #0]
   1839c:	6034      	str	r4, [r6, #0]
   1839e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   183a2:	2238      	movs	r2, #56	; 0x38
   183a4:	e7f5      	b.n	18392 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
   183a6:	0000      	.short	0x0000
   183a8:	20001574 	.word	0x20001574
   183ac:	40000e00 	.word	0x40000e00

000183b0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
   183b0:	4805      	ldr	r0, [pc, #20]	; (183c8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
   183b2:	b510      	push	{r4, lr}
   183b4:	69c0      	ldr	r0, [r0, #28]
   183b6:	2800      	cmp	r0, #0
   183b8:	d104      	bne.n	183c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
   183ba:	f240 11fb 	movw	r1, #507	; 0x1fb
   183be:	203e      	movs	r0, #62	; 0x3e
   183c0:	f7f8 fad6 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   183c4:	bd10      	pop	{r4, pc}
   183c6:	0000      	.short	0x0000
   183c8:	20001574 	.word	0x20001574

000183cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
   183cc:	4814      	ldr	r0, [pc, #80]	; (18420 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
   183ce:	b510      	push	{r4, lr}
   183d0:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   183d4:	7a40      	ldrb	r0, [r0, #9]
   183d6:	b141      	cbz	r1, 183ea <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
   183d8:	2902      	cmp	r1, #2
   183da:	d00b      	beq.n	183f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
   183dc:	2802      	cmp	r0, #2
   183de:	d009      	beq.n	183f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
   183e0:	2901      	cmp	r1, #1
   183e2:	d00b      	beq.n	183fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
   183e4:	2801      	cmp	r0, #1
   183e6:	d009      	beq.n	183fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
   183e8:	e016      	b.n	18418 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
   183ea:	2800      	cmp	r0, #0
   183ec:	d1f6      	bne.n	183dc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
   183ee:	f240 117d 	movw	r1, #381	; 0x17d
   183f2:	e00e      	b.n	18412 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
   183f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   183f8:	f000 bc2a 	b.w	18c50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
   183fc:	4809      	ldr	r0, [pc, #36]	; (18424 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
   183fe:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   18402:	f000 000f 	and.w	r0, r0, #15
   18406:	2803      	cmp	r0, #3
   18408:	d006      	beq.n	18418 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
   1840a:	2804      	cmp	r0, #4
   1840c:	d006      	beq.n	1841c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
   1840e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   18412:	203e      	movs	r0, #62	; 0x3e
   18414:	f7f8 faac 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18418:	2001      	movs	r0, #1
   1841a:	bd10      	pop	{r4, pc}
   1841c:	2002      	movs	r0, #2
   1841e:	bd10      	pop	{r4, pc}
   18420:	20001574 	.word	0x20001574
   18424:	40001000 	.word	0x40001000

00018428 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
   18428:	b510      	push	{r4, lr}
   1842a:	f000 fc7d 	bl	18d28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
   1842e:	f7ff fe4f 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   18432:	f004 faac 	bl	1c98e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
   18436:	480f      	ldr	r0, [pc, #60]	; (18474 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
   18438:	4a0f      	ldr	r2, [pc, #60]	; (18478 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
   1843a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1843c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   18440:	6011      	str	r1, [r2, #0]
   18442:	2400      	movs	r4, #0
   18444:	6284      	str	r4, [r0, #40]	; 0x28
   18446:	7304      	strb	r4, [r0, #12]
   18448:	61c4      	str	r4, [r0, #28]
   1844a:	6184      	str	r4, [r0, #24]
   1844c:	f000 fc6c 	bl	18d28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
   18450:	480a      	ldr	r0, [pc, #40]	; (1847c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
   18452:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
   18456:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
   1845a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
   1845e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
   18462:	2001      	movs	r0, #1
   18464:	f004 facc 	bl	1ca00 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
   18468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1846c:	2001      	movs	r0, #1
   1846e:	f004 baba 	b.w	1c9e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
   18472:	0000      	.short	0x0000
   18474:	20001574 	.word	0x20001574
   18478:	4001f508 	.word	0x4001f508
   1847c:	40008000 	.word	0x40008000

00018480 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
   18480:	b570      	push	{r4, r5, r6, lr}
   18482:	2001      	movs	r0, #1
   18484:	f004 fabc 	bl	1ca00 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
   18488:	4c37      	ldr	r4, [pc, #220]	; (18568 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
   1848a:	2000      	movs	r0, #0
   1848c:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
   18490:	2001      	movs	r0, #1
   18492:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
   18496:	f001 f844 	bl	19522 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   1849a:	4d34      	ldr	r5, [pc, #208]	; (1856c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   1849c:	b118      	cbz	r0, 184a6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
   1849e:	6828      	ldr	r0, [r5, #0]
   184a0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   184a4:	6028      	str	r0, [r5, #0]
   184a6:	f001 f830 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   184aa:	b128      	cbz	r0, 184b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
   184ac:	6828      	ldr	r0, [r5, #0]
   184ae:	4930      	ldr	r1, [pc, #192]	; (18570 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
   184b0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
   184b4:	4308      	orrs	r0, r1
   184b6:	6028      	str	r0, [r5, #0]
   184b8:	f001 f843 	bl	19542 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   184bc:	b138      	cbz	r0, 184ce <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
   184be:	482b      	ldr	r0, [pc, #172]	; (1856c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   184c0:	1d00      	adds	r0, r0, #4
   184c2:	6801      	ldr	r1, [r0, #0]
   184c4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
   184c8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
   184cc:	6001      	str	r1, [r0, #0]
   184ce:	4927      	ldr	r1, [pc, #156]	; (1856c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   184d0:	4828      	ldr	r0, [pc, #160]	; (18574 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
   184d2:	313c      	adds	r1, #60	; 0x3c
   184d4:	6008      	str	r0, [r1, #0]
   184d6:	f7f8 f8ff 	bl	106d8 <mpsl_fem_device_config_254_apply_get>
   184da:	b140      	cbz	r0, 184ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
   184dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   184e0:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
   184e4:	1c41      	adds	r1, r0, #1
   184e6:	d002      	beq.n	184ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
   184e8:	4920      	ldr	r1, [pc, #128]	; (1856c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   184ea:	3110      	adds	r1, #16
   184ec:	6008      	str	r0, [r1, #0]
   184ee:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   184f2:	6e00      	ldr	r0, [r0, #96]	; 0x60
   184f4:	1c41      	adds	r1, r0, #1
   184f6:	d004      	beq.n	18502 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
   184f8:	491f      	ldr	r1, [pc, #124]	; (18578 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
   184fa:	680a      	ldr	r2, [r1, #0]
   184fc:	f360 4217 	bfi	r2, r0, #16, #8
   18500:	600a      	str	r2, [r1, #0]
   18502:	f240 1103 	movw	r1, #259	; 0x103
   18506:	f240 605b 	movw	r0, #1627	; 0x65b
   1850a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
   1850e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   18512:	2001      	movs	r0, #1
   18514:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
   18518:	f000 fc88 	bl	18e2c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   1851c:	f240 1001 	movw	r0, #257	; 0x101
   18520:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
   18524:	2002      	movs	r0, #2
   18526:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   1852a:	4915      	ldr	r1, [pc, #84]	; (18580 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
   1852c:	4813      	ldr	r0, [pc, #76]	; (1857c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
   1852e:	6008      	str	r0, [r1, #0]
   18530:	4914      	ldr	r1, [pc, #80]	; (18584 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
   18532:	2000      	movs	r0, #0
   18534:	4d14      	ldr	r5, [pc, #80]	; (18588 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
   18536:	8608      	strh	r0, [r1, #48]	; 0x30
   18538:	3110      	adds	r1, #16
   1853a:	61c8      	str	r0, [r1, #28]
   1853c:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
   18540:	7028      	strb	r0, [r5, #0]
   18542:	2001      	movs	r0, #1
   18544:	f004 fa4f 	bl	1c9e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
   18548:	2010      	movs	r0, #16
   1854a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   1854e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   18552:	2002      	movs	r0, #2
   18554:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   18558:	6868      	ldr	r0, [r5, #4]
   1855a:	2800      	cmp	r0, #0
   1855c:	d002      	beq.n	18564 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
   1855e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18562:	4700      	bx	r0
   18564:	bd70      	pop	{r4, r5, r6, pc}
   18566:	0000      	.short	0x0000
   18568:	40001000 	.word	0x40001000
   1856c:	4000173c 	.word	0x4000173c
   18570:	80000096 	.word	0x80000096
   18574:	8900002c 	.word	0x8900002c
   18578:	4000158c 	.word	0x4000158c
   1857c:	0c0e0000 	.word	0x0c0e0000
   18580:	4001f508 	.word	0x4001f508
   18584:	20001564 	.word	0x20001564
   18588:	20000268 	.word	0x20000268

0001858c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
   1858c:	4901      	ldr	r1, [pc, #4]	; (18594 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
   1858e:	7508      	strb	r0, [r1, #20]
   18590:	4770      	bx	lr
   18592:	0000      	.short	0x0000
   18594:	20001574 	.word	0x20001574

00018598 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
   18598:	4905      	ldr	r1, [pc, #20]	; (185b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
   1859a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1859e:	4805      	ldr	r0, [pc, #20]	; (185b4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
   185a0:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
   185a4:	f041 0101 	orr.w	r1, r1, #1
   185a8:	7001      	strb	r1, [r0, #0]
   185aa:	f000 ba7b 	b.w	18aa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   185ae:	0000      	.short	0x0000
   185b0:	40001000 	.word	0x40001000
   185b4:	20001574 	.word	0x20001574

000185b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
   185b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   185bc:	4e36      	ldr	r6, [pc, #216]	; (18698 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
   185be:	4607      	mov	r7, r0
   185c0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   185c4:	4689      	mov	r9, r1
   185c6:	4614      	mov	r4, r2
   185c8:	6030      	str	r0, [r6, #0]
   185ca:	4610      	mov	r0, r2
   185cc:	f000 fc2e 	bl	18e2c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   185d0:	f000 f9e6 	bl	189a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   185d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1869c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
   185d8:	4d31      	ldr	r5, [pc, #196]	; (186a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
   185da:	f04f 0801 	mov.w	r8, #1
   185de:	b127      	cbz	r7, 185ea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
   185e0:	2f01      	cmp	r7, #1
   185e2:	d01d      	beq.n	18620 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
   185e4:	f240 710f 	movw	r1, #1807	; 0x70f
   185e8:	e04c      	b.n	18684 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
   185ea:	4620      	mov	r0, r4
   185ec:	f000 fa08 	bl	18a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   185f0:	4620      	mov	r0, r4
   185f2:	f000 f9b9 	bl	18968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   185f6:	2c02      	cmp	r4, #2
   185f8:	d00f      	beq.n	1861a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
   185fa:	f640 0034 	movw	r0, #2100	; 0x834
   185fe:	bf00      	nop
   18600:	f649 51f8 	movw	r1, #40440	; 0x9df8
   18604:	4401      	add	r1, r0
   18606:	4648      	mov	r0, r9
   18608:	f000 fbb4 	bl	18d74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
   1860c:	4604      	mov	r4, r0
   1860e:	4650      	mov	r0, sl
   18610:	f000 fb9c 	bl	18d4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
   18614:	f885 8009 	strb.w	r8, [r5, #9]
   18618:	e014      	b.n	18644 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
   1861a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1861e:	e7ef      	b.n	18600 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
   18620:	f000 fa16 	bl	18a50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   18624:	f000 fb64 	bl	18cf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   18628:	f000 fa8a 	bl	18b40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   1862c:	f649 71ba 	movw	r1, #40890	; 0x9fba
   18630:	4648      	mov	r0, r9
   18632:	f000 fb9f 	bl	18d74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
   18636:	4604      	mov	r4, r0
   18638:	4818      	ldr	r0, [pc, #96]	; (1869c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
   1863a:	1d00      	adds	r0, r0, #4
   1863c:	f000 fb86 	bl	18d4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
   18640:	2002      	movs	r0, #2
   18642:	7268      	strb	r0, [r5, #9]
   18644:	f8df 905c 	ldr.w	r9, [pc, #92]	; 186a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
   18648:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
   1864c:	4917      	ldr	r1, [pc, #92]	; (186ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
   1864e:	4816      	ldr	r0, [pc, #88]	; (186a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
   18650:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
   18654:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   18656:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   1865a:	62a8      	str	r0, [r5, #40]	; 0x28
   1865c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   18660:	6030      	str	r0, [r6, #0]
   18662:	2010      	movs	r0, #16
   18664:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
   18668:	03c0      	lsls	r0, r0, #15
   1866a:	6030      	str	r0, [r6, #0]
   1866c:	f000 fa54 	bl	18b18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   18670:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
   18674:	480b      	ldr	r0, [pc, #44]	; (186a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
   18676:	300c      	adds	r0, #12
   18678:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1867c:	42a0      	cmp	r0, r4
   1867e:	d304      	bcc.n	1868a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
   18680:	f240 7136 	movw	r1, #1846	; 0x736
   18684:	203e      	movs	r0, #62	; 0x3e
   18686:	f7f8 f973 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1868a:	4621      	mov	r1, r4
   1868c:	4638      	mov	r0, r7
   1868e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18692:	f004 b9e6 	b.w	1ca62 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   18696:	0000      	.short	0x0000
   18698:	4001f504 	.word	0x4001f504
   1869c:	40001000 	.word	0x40001000
   186a0:	20001574 	.word	0x20001574
   186a4:	40008000 	.word	0x40008000
   186a8:	40008140 	.word	0x40008140
   186ac:	4001f098 	.word	0x4001f098

000186b0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
   186b0:	4b0d      	ldr	r3, [pc, #52]	; (186e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
   186b2:	b510      	push	{r4, lr}
   186b4:	71d8      	strb	r0, [r3, #7]
   186b6:	729a      	strb	r2, [r3, #10]
   186b8:	b151      	cbz	r1, 186d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
   186ba:	2002      	movs	r0, #2
   186bc:	7218      	strb	r0, [r3, #8]
   186be:	2801      	cmp	r0, #1
   186c0:	d008      	beq.n	186d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
   186c2:	2802      	cmp	r0, #2
   186c4:	d00f      	beq.n	186e6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
   186c6:	f640 1112 	movw	r1, #2322	; 0x912
   186ca:	203e      	movs	r0, #62	; 0x3e
   186cc:	f7f8 f950 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   186d0:	2001      	movs	r0, #1
   186d2:	e7f3      	b.n	186bc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
   186d4:	7a58      	ldrb	r0, [r3, #9]
   186d6:	2802      	cmp	r0, #2
   186d8:	d105      	bne.n	186e6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
   186da:	f000 f9b9 	bl	18a50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   186de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   186e2:	f000 bb05 	b.w	18cf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   186e6:	bd10      	pop	{r4, pc}
   186e8:	20001574 	.word	0x20001574

000186ec <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
   186ec:	4902      	ldr	r1, [pc, #8]	; (186f8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
   186ee:	2000      	movs	r0, #0
   186f0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   186f4:	4770      	bx	lr
   186f6:	0000      	.short	0x0000
   186f8:	40008000 	.word	0x40008000

000186fc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
   186fc:	b538      	push	{r3, r4, r5, lr}
   186fe:	4c0b      	ldr	r4, [pc, #44]	; (1872c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
   18700:	4605      	mov	r5, r0
   18702:	f44f 718e 	mov.w	r1, #284	; 0x11c
   18706:	4620      	mov	r0, r4
   18708:	f004 f9c3 	bl	1ca92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   1870c:	2800      	cmp	r0, #0
   1870e:	d00c      	beq.n	1872a <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
   18710:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   18714:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   18718:	4240      	negs	r0, r0
   1871a:	7028      	strb	r0, [r5, #0]
   1871c:	2000      	movs	r0, #0
   1871e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   18722:	4803      	ldr	r0, [pc, #12]	; (18730 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
   18724:	6800      	ldr	r0, [r0, #0]
   18726:	9000      	str	r0, [sp, #0]
   18728:	2001      	movs	r0, #1
   1872a:	bd38      	pop	{r3, r4, r5, pc}
   1872c:	40001000 	.word	0x40001000
   18730:	4000111c 	.word	0x4000111c

00018734 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
   18734:	4903      	ldr	r1, [pc, #12]	; (18744 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
   18736:	0e02      	lsrs	r2, r0, #24
   18738:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
   1873c:	0200      	lsls	r0, r0, #8
   1873e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
   18742:	4770      	bx	lr
   18744:	40001000 	.word	0x40001000

00018748 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
   18748:	6800      	ldr	r0, [r0, #0]
   1874a:	4903      	ldr	r1, [pc, #12]	; (18758 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
   1874c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18750:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   18754:	4770      	bx	lr
   18756:	0000      	.short	0x0000
   18758:	40001000 	.word	0x40001000

0001875c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
   1875c:	b510      	push	{r4, lr}
   1875e:	f000 fb41 	bl	18de4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   18762:	4807      	ldr	r0, [pc, #28]	; (18780 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
   18764:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   18768:	b2c0      	uxtb	r0, r0
   1876a:	2803      	cmp	r0, #3
   1876c:	d001      	beq.n	18772 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
   1876e:	280b      	cmp	r0, #11
   18770:	d104      	bne.n	1877c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
   18772:	f44f 7121 	mov.w	r1, #644	; 0x284
   18776:	203e      	movs	r0, #62	; 0x3e
   18778:	f7f8 f8fa 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1877c:	bd10      	pop	{r4, pc}
   1877e:	0000      	.short	0x0000
   18780:	40001000 	.word	0x40001000

00018784 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
   18784:	4901      	ldr	r1, [pc, #4]	; (1878c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
   18786:	7548      	strb	r0, [r1, #21]
   18788:	4770      	bx	lr
   1878a:	0000      	.short	0x0000
   1878c:	20001574 	.word	0x20001574

00018790 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
   18790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18794:	4853      	ldr	r0, [pc, #332]	; (188e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   18796:	f04f 0a01 	mov.w	sl, #1
   1879a:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
   1879e:	4851      	ldr	r0, [pc, #324]	; (188e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   187a0:	300c      	adds	r0, #12
   187a2:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
   187a6:	4850      	ldr	r0, [pc, #320]	; (188e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
   187a8:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
   187ac:	4c4f      	ldr	r4, [pc, #316]	; (188ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
   187ae:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
   187b2:	f000 f957 	bl	18a64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
   187b6:	494e      	ldr	r1, [pc, #312]	; (188f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
   187b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   187ba:	6008      	str	r0, [r1, #0]
   187bc:	f8df 9134 	ldr.w	r9, [pc, #308]	; 188f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
   187c0:	2600      	movs	r6, #0
   187c2:	62a6      	str	r6, [r4, #40]	; 0x28
   187c4:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
   187c8:	f240 121d 	movw	r2, #285	; 0x11d
   187cc:	4391      	bics	r1, r2
   187ce:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
   187d2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   187d6:	f000 f9c5 	bl	18b64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
   187da:	4605      	mov	r5, r0
   187dc:	4841      	ldr	r0, [pc, #260]	; (188e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   187de:	3008      	adds	r0, #8
   187e0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   187e4:	61e0      	str	r0, [r4, #28]
   187e6:	f7ff fdf1 	bl	183cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
   187ea:	f884 0020 	strb.w	r0, [r4, #32]
   187ee:	7a60      	ldrb	r0, [r4, #9]
   187f0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   187f4:	61a6      	str	r6, [r4, #24]
   187f6:	4e40      	ldr	r6, [pc, #256]	; (188f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
   187f8:	07a8      	lsls	r0, r5, #30
   187fa:	d502      	bpl.n	18802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
   187fc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
   18800:	61a0      	str	r0, [r4, #24]
   18802:	0728      	lsls	r0, r5, #28
   18804:	d502      	bpl.n	1880c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
   18806:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
   1880a:	61a0      	str	r0, [r4, #24]
   1880c:	f04f 0800 	mov.w	r8, #0
   18810:	4639      	mov	r1, r7
   18812:	4628      	mov	r0, r5
   18814:	f000 fa32 	bl	18c7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
   18818:	b918      	cbnz	r0, 18822 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
   1881a:	f8c9 a010 	str.w	sl, [r9, #16]
   1881e:	f04f 0801 	mov.w	r8, #1
   18822:	4f32      	ldr	r7, [pc, #200]	; (188ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
   18824:	07e8      	lsls	r0, r5, #31
   18826:	f1a7 0710 	sub.w	r7, r7, #16
   1882a:	d002      	beq.n	18832 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
   1882c:	6838      	ldr	r0, [r7, #0]
   1882e:	4780      	blx	r0
   18830:	e031      	b.n	18896 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
   18832:	07a8      	lsls	r0, r5, #30
   18834:	d526      	bpl.n	18884 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
   18836:	0768      	lsls	r0, r5, #29
   18838:	d41e      	bmi.n	18878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   1883a:	f000 fe82 	bl	19542 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1883e:	b9d8      	cbnz	r0, 18878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   18840:	f000 fe6f 	bl	19522 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   18844:	b9c0      	cbnz	r0, 18878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   18846:	482d      	ldr	r0, [pc, #180]	; (188fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
   18848:	6800      	ldr	r0, [r0, #0]
   1884a:	f3c0 5c42 	ubfx	ip, r0, #21, #3
   1884e:	f3c0 6100 	ubfx	r1, r0, #24, #1
   18852:	f000 030f 	and.w	r3, r0, #15
   18856:	f3c0 1203 	ubfx	r2, r0, #4, #4
   1885a:	f3c0 2003 	ubfx	r0, r0, #8, #4
   1885e:	b159      	cbz	r1, 18878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   18860:	b10b      	cbz	r3, 18866 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
   18862:	b102      	cbz	r2, 18866 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
   18864:	b940      	cbnz	r0, 18878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   18866:	4825      	ldr	r0, [pc, #148]	; (188fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
   18868:	1d00      	adds	r0, r0, #4
   1886a:	6800      	ldr	r0, [r0, #0]
   1886c:	b120      	cbz	r0, 18878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   1886e:	f1bc 0f03 	cmp.w	ip, #3
   18872:	d201      	bcs.n	18878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   18874:	f045 0504 	orr.w	r5, r5, #4
   18878:	f345 0080 	sbfx	r0, r5, #2, #1
   1887c:	4641      	mov	r1, r8
   1887e:	1c40      	adds	r0, r0, #1
   18880:	687a      	ldr	r2, [r7, #4]
   18882:	e007      	b.n	18894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
   18884:	f015 0f28 	tst.w	r5, #40	; 0x28
   18888:	d005      	beq.n	18896 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
   1888a:	f345 1140 	sbfx	r1, r5, #5, #1
   1888e:	68ba      	ldr	r2, [r7, #8]
   18890:	4640      	mov	r0, r8
   18892:	1c49      	adds	r1, r1, #1
   18894:	4790      	blx	r2
   18896:	06e8      	lsls	r0, r5, #27
   18898:	d501      	bpl.n	1889e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
   1889a:	68f8      	ldr	r0, [r7, #12]
   1889c:	4780      	blx	r0
   1889e:	7a60      	ldrb	r0, [r4, #9]
   188a0:	2802      	cmp	r0, #2
   188a2:	d11c      	bne.n	188de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
   188a4:	7b20      	ldrb	r0, [r4, #12]
   188a6:	2800      	cmp	r0, #0
   188a8:	d019      	beq.n	188de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
   188aa:	2802      	cmp	r0, #2
   188ac:	d004      	beq.n	188b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
   188ae:	2801      	cmp	r0, #1
   188b0:	d006      	beq.n	188c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
   188b2:	f640 21e1 	movw	r1, #2785	; 0xae1
   188b6:	e009      	b.n	188cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
   188b8:	6921      	ldr	r1, [r4, #16]
   188ba:	69e0      	ldr	r0, [r4, #28]
   188bc:	4408      	add	r0, r1
   188be:	e008      	b.n	188d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
   188c0:	69e1      	ldr	r1, [r4, #28]
   188c2:	6920      	ldr	r0, [r4, #16]
   188c4:	4288      	cmp	r0, r1
   188c6:	d804      	bhi.n	188d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
   188c8:	f640 21e2 	movw	r1, #2786	; 0xae2
   188cc:	203e      	movs	r0, #62	; 0x3e
   188ce:	f7f8 f84f 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   188d2:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
   188d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   188da:	f000 ba17 	b.w	18d0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
   188de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   188e2:	0000      	.short	0x0000
   188e4:	40008000 	.word	0x40008000
   188e8:	4000b000 	.word	0x4000b000
   188ec:	20001574 	.word	0x20001574
   188f0:	4001f508 	.word	0x4001f508
   188f4:	40001000 	.word	0x40001000
   188f8:	40008004 	.word	0x40008004
   188fc:	40001450 	.word	0x40001450

00018900 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
   18900:	b570      	push	{r4, r5, r6, lr}
   18902:	4b15      	ldr	r3, [pc, #84]	; (18958 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
   18904:	888c      	ldrh	r4, [r1, #4]
   18906:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   1890a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
   1890e:	780c      	ldrb	r4, [r1, #0]
   18910:	f8d1 1001 	ldr.w	r1, [r1, #1]
   18914:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   18918:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
   1891c:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
   18920:	2101      	movs	r1, #1
   18922:	4081      	lsls	r1, r0
   18924:	430c      	orrs	r4, r1
   18926:	b2e4      	uxtb	r4, r4
   18928:	b132      	cbz	r2, 18938 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
   1892a:	2a01      	cmp	r2, #1
   1892c:	d00a      	beq.n	18944 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
   1892e:	f240 41ac 	movw	r1, #1196	; 0x4ac
   18932:	203e      	movs	r0, #62	; 0x3e
   18934:	f7f8 f81c 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18938:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
   1893c:	f3c0 2007 	ubfx	r0, r0, #8, #8
   18940:	4388      	bics	r0, r1
   18942:	e004      	b.n	1894e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
   18944:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
   18948:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
   1894c:	b2c0      	uxtb	r0, r0
   1894e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   18952:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   18956:	bd70      	pop	{r4, r5, r6, pc}
   18958:	40001000 	.word	0x40001000

0001895c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
   1895c:	4901      	ldr	r1, [pc, #4]	; (18964 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
   1895e:	2001      	movs	r0, #1
   18960:	7008      	strb	r0, [r1, #0]
   18962:	4770      	bx	lr
   18964:	20000268 	.word	0x20000268
   18968:	b510      	push	{r4, lr}
   1896a:	4604      	mov	r4, r0
   1896c:	f000 fde9 	bl	19542 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   18970:	2800      	cmp	r0, #0
   18972:	d00e      	beq.n	18992 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
   18974:	4a09      	ldr	r2, [pc, #36]	; (1899c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
   18976:	6811      	ldr	r1, [r2, #0]
   18978:	0650      	lsls	r0, r2, #25
   1897a:	2c02      	cmp	r4, #2
   1897c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
   18980:	d008      	beq.n	18994 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
   18982:	f3c0 2006 	ubfx	r0, r0, #8, #7
   18986:	bf00      	nop
   18988:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
   1898c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   18990:	6010      	str	r0, [r2, #0]
   18992:	bd10      	pop	{r4, pc}
   18994:	f3c0 6006 	ubfx	r0, r0, #24, #7
   18998:	e7f6      	b.n	18988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
   1899a:	0000      	.short	0x0000
   1899c:	40001588 	.word	0x40001588
   189a0:	4815      	ldr	r0, [pc, #84]	; (189f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
   189a2:	7d41      	ldrb	r1, [r0, #21]
   189a4:	2925      	cmp	r1, #37	; 0x25
   189a6:	d00a      	beq.n	189be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
   189a8:	2926      	cmp	r1, #38	; 0x26
   189aa:	d00b      	beq.n	189c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
   189ac:	2927      	cmp	r1, #39	; 0x27
   189ae:	d00c      	beq.n	189ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
   189b0:	7d40      	ldrb	r0, [r0, #21]
   189b2:	0040      	lsls	r0, r0, #1
   189b4:	290a      	cmp	r1, #10
   189b6:	d80b      	bhi.n	189d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
   189b8:	f600 1064 	addw	r0, r0, #2404	; 0x964
   189bc:	e00a      	b.n	189d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
   189be:	f640 1062 	movw	r0, #2402	; 0x962
   189c2:	e00f      	b.n	189e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   189c4:	f640 107a 	movw	r0, #2426	; 0x97a
   189c8:	e00c      	b.n	189e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   189ca:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
   189ce:	e009      	b.n	189e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   189d0:	f600 1066 	addw	r0, r0, #2406	; 0x966
   189d4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   189d8:	d204      	bcs.n	189e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   189da:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
   189de:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   189e2:	e001      	b.n	189e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
   189e4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
   189e8:	4a04      	ldr	r2, [pc, #16]	; (189fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
   189ea:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
   189ee:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   189f2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
   189f6:	4770      	bx	lr
   189f8:	20001574 	.word	0x20001574
   189fc:	40001000 	.word	0x40001000
   18a00:	4912      	ldr	r1, [pc, #72]	; (18a4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
   18a02:	b508      	push	{r3, lr}
   18a04:	f991 2014 	ldrsb.w	r2, [r1, #20]
   18a08:	7d49      	ldrb	r1, [r1, #21]
   18a0a:	2801      	cmp	r0, #1
   18a0c:	d00a      	beq.n	18a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
   18a0e:	2802      	cmp	r0, #2
   18a10:	d00a      	beq.n	18a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
   18a12:	2804      	cmp	r0, #4
   18a14:	d00a      	beq.n	18a2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
   18a16:	2808      	cmp	r0, #8
   18a18:	d00a      	beq.n	18a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
   18a1a:	f240 31ed 	movw	r1, #1005	; 0x3ed
   18a1e:	2006      	movs	r0, #6
   18a20:	f7f7 ffa6 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18a24:	2000      	movs	r0, #0
   18a26:	e004      	b.n	18a32 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   18a28:	2001      	movs	r0, #1
   18a2a:	e002      	b.n	18a32 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   18a2c:	2003      	movs	r0, #3
   18a2e:	e000      	b.n	18a32 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   18a30:	2002      	movs	r0, #2
   18a32:	466b      	mov	r3, sp
   18a34:	f7f4 fa34 	bl	cea0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
   18a38:	b118      	cbz	r0, 18a42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
   18a3a:	f240 41de 	movw	r1, #1246	; 0x4de
   18a3e:	203e      	movs	r0, #62	; 0x3e
   18a40:	e7ee      	b.n	18a20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
   18a42:	f99d 0000 	ldrsb.w	r0, [sp]
   18a46:	f000 f9eb 	bl	18e20 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   18a4a:	bd08      	pop	{r3, pc}
   18a4c:	20001574 	.word	0x20001574
   18a50:	4803      	ldr	r0, [pc, #12]	; (18a60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
   18a52:	7a01      	ldrb	r1, [r0, #8]
   18a54:	2901      	cmp	r1, #1
   18a56:	d102      	bne.n	18a5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
   18a58:	7a80      	ldrb	r0, [r0, #10]
   18a5a:	f7ff bfd1 	b.w	18a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   18a5e:	4770      	bx	lr
   18a60:	20001574 	.word	0x20001574
   18a64:	4805      	ldr	r0, [pc, #20]	; (18a7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
   18a66:	7a40      	ldrb	r0, [r0, #9]
   18a68:	2801      	cmp	r0, #1
   18a6a:	d003      	beq.n	18a74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
   18a6c:	2802      	cmp	r0, #2
   18a6e:	d103      	bne.n	18a78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
   18a70:	f003 bf75 	b.w	1c95e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
   18a74:	f003 bf7f 	b.w	1c976 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
   18a78:	4770      	bx	lr
   18a7a:	0000      	.short	0x0000
   18a7c:	20001574 	.word	0x20001574
   18a80:	4807      	ldr	r0, [pc, #28]	; (18aa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
   18a82:	2100      	movs	r1, #0
   18a84:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   18a88:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
   18a8c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
   18a90:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   18a94:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   18a98:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
   18a9c:	4770      	bx	lr
   18a9e:	0000      	.short	0x0000
   18aa0:	40001000 	.word	0x40001000
   18aa4:	4818      	ldr	r0, [pc, #96]	; (18b08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
   18aa6:	b510      	push	{r4, lr}
   18aa8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
   18aac:	07c1      	lsls	r1, r0, #31
   18aae:	d029      	beq.n	18b04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   18ab0:	0781      	lsls	r1, r0, #30
   18ab2:	d514      	bpl.n	18ade <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
   18ab4:	4815      	ldr	r0, [pc, #84]	; (18b0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
   18ab6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   18aba:	f041 0101 	orr.w	r1, r1, #1
   18abe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   18ac2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   18ac6:	b2c0      	uxtb	r0, r0
   18ac8:	280b      	cmp	r0, #11
   18aca:	d005      	beq.n	18ad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   18acc:	280a      	cmp	r0, #10
   18ace:	d003      	beq.n	18ad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   18ad0:	2803      	cmp	r0, #3
   18ad2:	d001      	beq.n	18ad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   18ad4:	2802      	cmp	r0, #2
   18ad6:	d115      	bne.n	18b04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   18ad8:	f240 510f 	movw	r1, #1295	; 0x50f
   18adc:	e00f      	b.n	18afe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
   18ade:	0740      	lsls	r0, r0, #29
   18ae0:	d510      	bpl.n	18b04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   18ae2:	480a      	ldr	r0, [pc, #40]	; (18b0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
   18ae4:	490a      	ldr	r1, [pc, #40]	; (18b10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
   18ae6:	3008      	adds	r0, #8
   18ae8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   18aec:	f44f 71a0 	mov.w	r1, #320	; 0x140
   18af0:	4808      	ldr	r0, [pc, #32]	; (18b14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
   18af2:	f003 ffd3 	bl	1ca9c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
   18af6:	2800      	cmp	r0, #0
   18af8:	d004      	beq.n	18b04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   18afa:	f240 5117 	movw	r1, #1303	; 0x517
   18afe:	203e      	movs	r0, #62	; 0x3e
   18b00:	f7f7 ff36 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18b04:	bd10      	pop	{r4, pc}
   18b06:	0000      	.short	0x0000
   18b08:	20001574 	.word	0x20001574
   18b0c:	40001000 	.word	0x40001000
   18b10:	4001f098 	.word	0x4001f098
   18b14:	40008000 	.word	0x40008000
   18b18:	4808      	ldr	r0, [pc, #32]	; (18b3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
   18b1a:	4601      	mov	r1, r0
   18b1c:	79c2      	ldrb	r2, [r0, #7]
   18b1e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
   18b22:	b112      	cbz	r2, 18b2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
   18b24:	2a01      	cmp	r2, #1
   18b26:	d003      	beq.n	18b30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
   18b28:	e006      	b.n	18b38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
   18b2a:	f041 0102 	orr.w	r1, r1, #2
   18b2e:	e001      	b.n	18b34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
   18b30:	f041 0104 	orr.w	r1, r1, #4
   18b34:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
   18b38:	f7ff bfb4 	b.w	18aa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   18b3c:	20001574 	.word	0x20001574
   18b40:	b510      	push	{r4, lr}
   18b42:	f000 fcfe 	bl	19542 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   18b46:	2800      	cmp	r0, #0
   18b48:	d108      	bne.n	18b5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
   18b4a:	f000 fcea 	bl	19522 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   18b4e:	2800      	cmp	r0, #0
   18b50:	d104      	bne.n	18b5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
   18b52:	4803      	ldr	r0, [pc, #12]	; (18b60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
   18b54:	6801      	ldr	r1, [r0, #0]
   18b56:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
   18b5a:	6001      	str	r1, [r0, #0]
   18b5c:	bd10      	pop	{r4, pc}
   18b5e:	0000      	.short	0x0000
   18b60:	40001568 	.word	0x40001568
   18b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b68:	4d35      	ldr	r5, [pc, #212]	; (18c40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
   18b6a:	2400      	movs	r4, #0
   18b6c:	7b28      	ldrb	r0, [r5, #12]
   18b6e:	b138      	cbz	r0, 18b80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
   18b70:	f44f 71a2 	mov.w	r1, #324	; 0x144
   18b74:	4833      	ldr	r0, [pc, #204]	; (18c44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
   18b76:	f003 ff91 	bl	1ca9c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
   18b7a:	b108      	cbz	r0, 18b80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
   18b7c:	2601      	movs	r6, #1
   18b7e:	e000      	b.n	18b82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
   18b80:	2600      	movs	r6, #0
   18b82:	7a68      	ldrb	r0, [r5, #9]
   18b84:	4f30      	ldr	r7, [pc, #192]	; (18c48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
   18b86:	f44f 7186 	mov.w	r1, #268	; 0x10c
   18b8a:	2801      	cmp	r0, #1
   18b8c:	d002      	beq.n	18b94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
   18b8e:	2802      	cmp	r0, #2
   18b90:	d008      	beq.n	18ba4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
   18b92:	e018      	b.n	18bc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   18b94:	4638      	mov	r0, r7
   18b96:	f003 ff7c 	bl	1ca92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   18b9a:	b108      	cbz	r0, 18ba0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
   18b9c:	2408      	movs	r4, #8
   18b9e:	e012      	b.n	18bc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   18ba0:	2400      	movs	r4, #0
   18ba2:	e010      	b.n	18bc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   18ba4:	4638      	mov	r0, r7
   18ba6:	f003 ff74 	bl	1ca92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   18baa:	b100      	cbz	r0, 18bae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
   18bac:	2002      	movs	r0, #2
   18bae:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
   18bb2:	43c9      	mvns	r1, r1
   18bb4:	f341 0100 	sbfx	r1, r1, #0, #1
   18bb8:	1c49      	adds	r1, r1, #1
   18bba:	d001      	beq.n	18bc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
   18bbc:	2400      	movs	r4, #0
   18bbe:	e000      	b.n	18bc2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
   18bc0:	2404      	movs	r4, #4
   18bc2:	4304      	orrs	r4, r0
   18bc4:	4334      	orrs	r4, r6
   18bc6:	f014 0f0b 	tst.w	r4, #11
   18bca:	d107      	bne.n	18bdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
   18bcc:	f44f 7188 	mov.w	r1, #272	; 0x110
   18bd0:	4638      	mov	r0, r7
   18bd2:	f003 ff5e 	bl	1ca92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   18bd6:	b100      	cbz	r0, 18bda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
   18bd8:	2010      	movs	r0, #16
   18bda:	4304      	orrs	r4, r0
   18bdc:	481b      	ldr	r0, [pc, #108]	; (18c4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
   18bde:	7800      	ldrb	r0, [r0, #0]
   18be0:	b1f8      	cbz	r0, 18c22 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
   18be2:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
   18be6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   18bea:	d007      	beq.n	18bfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
   18bec:	f44f 718a 	mov.w	r1, #276	; 0x114
   18bf0:	4638      	mov	r0, r7
   18bf2:	f003 ff4e 	bl	1ca92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   18bf6:	b108      	cbz	r0, 18bfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
   18bf8:	2001      	movs	r0, #1
   18bfa:	e000      	b.n	18bfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
   18bfc:	2000      	movs	r0, #0
   18bfe:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
   18c02:	b13e      	cbz	r6, 18c14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
   18c04:	f44f 718c 	mov.w	r1, #280	; 0x118
   18c08:	4638      	mov	r0, r7
   18c0a:	f003 ff42 	bl	1ca92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   18c0e:	b108      	cbz	r0, 18c14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
   18c10:	2001      	movs	r0, #1
   18c12:	e000      	b.n	18c16 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
   18c14:	2000      	movs	r0, #0
   18c16:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
   18c1a:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
   18c1e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
   18c22:	f7ff ff2d 	bl	18a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
   18c26:	06e0      	lsls	r0, r4, #27
   18c28:	d506      	bpl.n	18c38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   18c2a:	0720      	lsls	r0, r4, #28
   18c2c:	d404      	bmi.n	18c38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   18c2e:	7a68      	ldrb	r0, [r5, #9]
   18c30:	2801      	cmp	r0, #1
   18c32:	d101      	bne.n	18c38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   18c34:	f044 0420 	orr.w	r4, r4, #32
   18c38:	4620      	mov	r0, r4
   18c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c3e:	0000      	.short	0x0000
   18c40:	20001574 	.word	0x20001574
   18c44:	40008000 	.word	0x40008000
   18c48:	40001000 	.word	0x40001000
   18c4c:	20000268 	.word	0x20000268
   18c50:	4809      	ldr	r0, [pc, #36]	; (18c78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
   18c52:	b510      	push	{r4, lr}
   18c54:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   18c58:	f000 000f 	and.w	r0, r0, #15
   18c5c:	2803      	cmp	r0, #3
   18c5e:	d006      	beq.n	18c6e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
   18c60:	2804      	cmp	r0, #4
   18c62:	d006      	beq.n	18c72 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
   18c64:	f240 11dd 	movw	r1, #477	; 0x1dd
   18c68:	203e      	movs	r0, #62	; 0x3e
   18c6a:	f7f7 fe81 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18c6e:	2001      	movs	r0, #1
   18c70:	bd10      	pop	{r4, pc}
   18c72:	2002      	movs	r0, #2
   18c74:	bd10      	pop	{r4, pc}
   18c76:	0000      	.short	0x0000
   18c78:	40001000 	.word	0x40001000
   18c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c80:	4c19      	ldr	r4, [pc, #100]	; (18ce8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
   18c82:	460d      	mov	r5, r1
   18c84:	7a21      	ldrb	r1, [r4, #8]
   18c86:	b129      	cbz	r1, 18c94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
   18c88:	f010 0f11 	tst.w	r0, #17
   18c8c:	d00b      	beq.n	18ca6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
   18c8e:	f7ff fa1f 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   18c92:	e027      	b.n	18ce4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
   18c94:	4915      	ldr	r1, [pc, #84]	; (18cec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
   18c96:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   18c9a:	6008      	str	r0, [r1, #0]
   18c9c:	f000 f862 	bl	18d64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   18ca0:	2000      	movs	r0, #0
   18ca2:	7320      	strb	r0, [r4, #12]
   18ca4:	e01e      	b.n	18ce4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
   18ca6:	2901      	cmp	r1, #1
   18ca8:	d001      	beq.n	18cae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
   18caa:	2601      	movs	r6, #1
   18cac:	e000      	b.n	18cb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
   18cae:	2600      	movs	r6, #0
   18cb0:	79e0      	ldrb	r0, [r4, #7]
   18cb2:	2801      	cmp	r0, #1
   18cb4:	d00e      	beq.n	18cd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
   18cb6:	2700      	movs	r7, #0
   18cb8:	f000 f854 	bl	18d64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   18cbc:	2196      	movs	r1, #150	; 0x96
   18cbe:	4630      	mov	r0, r6
   18cc0:	f000 f866 	bl	18d90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
   18cc4:	4601      	mov	r1, r0
   18cc6:	b14f      	cbz	r7, 18cdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
   18cc8:	353b      	adds	r5, #59	; 0x3b
   18cca:	428d      	cmp	r5, r1
   18ccc:	d904      	bls.n	18cd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
   18cce:	2000      	movs	r0, #0
   18cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18cd4:	2701      	movs	r7, #1
   18cd6:	e7ef      	b.n	18cb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
   18cd8:	2001      	movs	r0, #1
   18cda:	71e0      	strb	r0, [r4, #7]
   18cdc:	7aa2      	ldrb	r2, [r4, #10]
   18cde:	4630      	mov	r0, r6
   18ce0:	f7ff fc6a 	bl	185b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   18ce4:	2001      	movs	r0, #1
   18ce6:	e7f3      	b.n	18cd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
   18ce8:	20001574 	.word	0x20001574
   18cec:	4001f508 	.word	0x4001f508
   18cf0:	4805      	ldr	r0, [pc, #20]	; (18d08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
   18cf2:	2100      	movs	r1, #0
   18cf4:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
   18cf8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   18cfc:	f441 7188 	orr.w	r1, r1, #272	; 0x110
   18d00:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   18d04:	4770      	bx	lr
   18d06:	0000      	.short	0x0000
   18d08:	40001000 	.word	0x40001000
   18d0c:	4804      	ldr	r0, [pc, #16]	; (18d20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
   18d0e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   18d10:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   18d14:	6281      	str	r1, [r0, #40]	; 0x28
   18d16:	4903      	ldr	r1, [pc, #12]	; (18d24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
   18d18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   18d1c:	6008      	str	r0, [r1, #0]
   18d1e:	4770      	bx	lr
   18d20:	20001574 	.word	0x20001574
   18d24:	4001f504 	.word	0x4001f504
   18d28:	4a07      	ldr	r2, [pc, #28]	; (18d48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   18d2a:	2000      	movs	r0, #0
   18d2c:	3208      	adds	r2, #8
   18d2e:	4906      	ldr	r1, [pc, #24]	; (18d48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   18d30:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   18d34:	1d0a      	adds	r2, r1, #4
   18d36:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   18d3a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   18d3e:	4902      	ldr	r1, [pc, #8]	; (18d48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   18d40:	310c      	adds	r1, #12
   18d42:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   18d46:	4770      	bx	lr
   18d48:	40008000 	.word	0x40008000
   18d4c:	4903      	ldr	r1, [pc, #12]	; (18d5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
   18d4e:	79c9      	ldrb	r1, [r1, #7]
   18d50:	2900      	cmp	r1, #0
   18d52:	d102      	bne.n	18d5a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
   18d54:	4902      	ldr	r1, [pc, #8]	; (18d60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
   18d56:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   18d5a:	4770      	bx	lr
   18d5c:	20001574 	.word	0x20001574
   18d60:	4001f098 	.word	0x4001f098
   18d64:	4802      	ldr	r0, [pc, #8]	; (18d70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
   18d66:	2100      	movs	r1, #0
   18d68:	71c1      	strb	r1, [r0, #7]
   18d6a:	7201      	strb	r1, [r0, #8]
   18d6c:	7241      	strb	r1, [r0, #9]
   18d6e:	4770      	bx	lr
   18d70:	20001574 	.word	0x20001574
   18d74:	4a05      	ldr	r2, [pc, #20]	; (18d8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
   18d76:	79d2      	ldrb	r2, [r2, #7]
   18d78:	2a01      	cmp	r2, #1
   18d7a:	d006      	beq.n	18d8a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
   18d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18d80:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
   18d84:	fbb1 f1f2 	udiv	r1, r1, r2
   18d88:	1a40      	subs	r0, r0, r1
   18d8a:	4770      	bx	lr
   18d8c:	20001574 	.word	0x20001574
   18d90:	b570      	push	{r4, r5, r6, lr}
   18d92:	4c13      	ldr	r4, [pc, #76]	; (18de0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
   18d94:	4603      	mov	r3, r0
   18d96:	460d      	mov	r5, r1
   18d98:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   18d9c:	2000      	movs	r0, #0
   18d9e:	b15a      	cbz	r2, 18db8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
   18da0:	4621      	mov	r1, r4
   18da2:	f891 1020 	ldrb.w	r1, [r1, #32]
   18da6:	b163      	cbz	r3, 18dc2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
   18da8:	2b01      	cmp	r3, #1
   18daa:	d111      	bne.n	18dd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
   18dac:	2a01      	cmp	r2, #1
   18dae:	4628      	mov	r0, r5
   18db0:	d012      	beq.n	18dd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
   18db2:	f003 feb8 	bl	1cb26 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   18db6:	e009      	b.n	18dcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   18db8:	f240 7152 	movw	r1, #1874	; 0x752
   18dbc:	203e      	movs	r0, #62	; 0x3e
   18dbe:	f7f7 fdd7 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18dc2:	2a01      	cmp	r2, #1
   18dc4:	4628      	mov	r0, r5
   18dc6:	d004      	beq.n	18dd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
   18dc8:	f003 febb 	bl	1cb42 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   18dcc:	69e1      	ldr	r1, [r4, #28]
   18dce:	4408      	add	r0, r1
   18dd0:	bd70      	pop	{r4, r5, r6, pc}
   18dd2:	f003 fed0 	bl	1cb76 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   18dd6:	e7f9      	b.n	18dcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   18dd8:	f003 febe 	bl	1cb58 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   18ddc:	e7f6      	b.n	18dcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   18dde:	0000      	.short	0x0000
   18de0:	20001574 	.word	0x20001574
   18de4:	b510      	push	{r4, lr}
   18de6:	2200      	movs	r2, #0
   18de8:	2901      	cmp	r1, #1
   18dea:	d008      	beq.n	18dfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
   18dec:	2902      	cmp	r1, #2
   18dee:	d004      	beq.n	18dfa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
   18df0:	f240 2163 	movw	r1, #611	; 0x263
   18df4:	203e      	movs	r0, #62	; 0x3e
   18df6:	f7f7 fdbb 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18dfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18dfe:	4905      	ldr	r1, [pc, #20]	; (18e14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
   18e00:	430a      	orrs	r2, r1
   18e02:	4905      	ldr	r1, [pc, #20]	; (18e18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
   18e04:	600a      	str	r2, [r1, #0]
   18e06:	4905      	ldr	r1, [pc, #20]	; (18e1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
   18e08:	4308      	orrs	r0, r1
   18e0a:	4903      	ldr	r1, [pc, #12]	; (18e18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
   18e0c:	1d09      	adds	r1, r1, #4
   18e0e:	6008      	str	r0, [r1, #0]
   18e10:	bd10      	pop	{r4, pc}
   18e12:	0000      	.short	0x0000
   18e14:	00100108 	.word	0x00100108
   18e18:	40001514 	.word	0x40001514
   18e1c:	02030000 	.word	0x02030000

00018e20 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
   18e20:	4901      	ldr	r1, [pc, #4]	; (18e28 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
   18e22:	b2c0      	uxtb	r0, r0
   18e24:	6008      	str	r0, [r1, #0]
   18e26:	4770      	bx	lr
   18e28:	4000150c 	.word	0x4000150c

00018e2c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
   18e2c:	b510      	push	{r4, lr}
   18e2e:	4907      	ldr	r1, [pc, #28]	; (18e4c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
   18e30:	2801      	cmp	r0, #1
   18e32:	d005      	beq.n	18e40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
   18e34:	2802      	cmp	r0, #2
   18e36:	d005      	beq.n	18e44 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
   18e38:	218b      	movs	r1, #139	; 0x8b
   18e3a:	203f      	movs	r0, #63	; 0x3f
   18e3c:	f7f7 fd98 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18e40:	2003      	movs	r0, #3
   18e42:	e000      	b.n	18e46 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
   18e44:	2004      	movs	r0, #4
   18e46:	6008      	str	r0, [r1, #0]
   18e48:	bd10      	pop	{r4, pc}
   18e4a:	0000      	.short	0x0000
   18e4c:	40001510 	.word	0x40001510

00018e50 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
   18e50:	4770      	bx	lr
   18e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e56:	000d      	movs	r5, r1
   18e58:	4604      	mov	r4, r0
   18e5a:	f04f 0602 	mov.w	r6, #2
   18e5e:	f04f 0701 	mov.w	r7, #1
   18e62:	d008      	beq.n	18e76 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
   18e64:	7828      	ldrb	r0, [r5, #0]
   18e66:	b1d0      	cbz	r0, 18e9e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   18e68:	2801      	cmp	r0, #1
   18e6a:	d007      	beq.n	18e7c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
   18e6c:	2802      	cmp	r0, #2
   18e6e:	d014      	beq.n	18e9a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18e70:	2803      	cmp	r0, #3
   18e72:	d13b      	bne.n	18eec <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
   18e74:	e016      	b.n	18ea4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
   18e76:	f880 7020 	strb.w	r7, [r0, #32]
   18e7a:	e00e      	b.n	18e9a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18e7c:	6868      	ldr	r0, [r5, #4]
   18e7e:	28c8      	cmp	r0, #200	; 0xc8
   18e80:	d303      	bcc.n	18e8a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
   18e82:	2104      	movs	r1, #4
   18e84:	f7f5 f836 	bl	def4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   18e88:	b108      	cbz	r0, 18e8e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
   18e8a:	2600      	movs	r6, #0
   18e8c:	e007      	b.n	18e9e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   18e8e:	4620      	mov	r0, r4
   18e90:	6869      	ldr	r1, [r5, #4]
   18e92:	f000 f92a 	bl	190ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
   18e96:	2601      	movs	r6, #1
   18e98:	e001      	b.n	18e9e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   18e9a:	f7f4 f849 	bl	cf30 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
   18e9e:	4630      	mov	r0, r6
   18ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ea4:	7820      	ldrb	r0, [r4, #0]
   18ea6:	2800      	cmp	r0, #0
   18ea8:	d1f7      	bne.n	18e9a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18eaa:	6868      	ldr	r0, [r5, #4]
   18eac:	f7f4 f812 	bl	ced4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
   18eb0:	b1e0      	cbz	r0, 18eec <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
   18eb2:	6869      	ldr	r1, [r5, #4]
   18eb4:	7808      	ldrb	r0, [r1, #0]
   18eb6:	b128      	cbz	r0, 18ec4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
   18eb8:	78a0      	ldrb	r0, [r4, #2]
   18eba:	2805      	cmp	r0, #5
   18ebc:	d007      	beq.n	18ece <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
   18ebe:	f240 1179 	movw	r1, #377	; 0x179
   18ec2:	e010      	b.n	18ee6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
   18ec4:	4620      	mov	r0, r4
   18ec6:	f000 f918 	bl	190fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
   18eca:	7067      	strb	r7, [r4, #1]
   18ecc:	e7e5      	b.n	18e9a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18ece:	4620      	mov	r0, r4
   18ed0:	f000 f92b 	bl	1912a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
   18ed4:	78e0      	ldrb	r0, [r4, #3]
   18ed6:	f104 010c 	add.w	r1, r4, #12
   18eda:	f000 f80a 	bl	18ef2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   18ede:	2800      	cmp	r0, #0
   18ee0:	d1db      	bne.n	18e9a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18ee2:	f240 117b 	movw	r1, #379	; 0x17b
   18ee6:	206a      	movs	r0, #106	; 0x6a
   18ee8:	f7f7 fa62 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   18eec:	f884 7020 	strb.w	r7, [r4, #32]
   18ef0:	e7d3      	b.n	18e9a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18ef2:	f7f5 ba8b 	b.w	e40c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   18ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18efa:	460d      	mov	r5, r1
   18efc:	0004      	movs	r4, r0
   18efe:	d00b      	beq.n	18f18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
   18f00:	7926      	ldrb	r6, [r4, #4]
   18f02:	2700      	movs	r7, #0
   18f04:	2002      	movs	r0, #2
   18f06:	2d09      	cmp	r5, #9
   18f08:	d27b      	bcs.n	19002 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
   18f0a:	e8df f005 	tbb	[pc, r5]
   18f0e:	1008      	.short	0x1008
   18f10:	645b2e2e 	.word	0x645b2e2e
   18f14:	0086977c 	.word	0x0086977c
   18f18:	f240 1193 	movw	r1, #403	; 0x193
   18f1c:	e0e2      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18f1e:	78a0      	ldrb	r0, [r4, #2]
   18f20:	2804      	cmp	r0, #4
   18f22:	d06f      	beq.n	19004 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
   18f24:	2803      	cmp	r0, #3
   18f26:	d0fc      	beq.n	18f22 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
   18f28:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   18f2c:	e0da      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18f2e:	78a0      	ldrb	r0, [r4, #2]
   18f30:	2804      	cmp	r0, #4
   18f32:	d004      	beq.n	18f3e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
   18f34:	2803      	cmp	r0, #3
   18f36:	d002      	beq.n	18f3e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
   18f38:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
   18f3c:	e0d2      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18f3e:	2005      	movs	r0, #5
   18f40:	70a0      	strb	r0, [r4, #2]
   18f42:	f884 7020 	strb.w	r7, [r4, #32]
   18f46:	7820      	ldrb	r0, [r4, #0]
   18f48:	bb80      	cbnz	r0, 18fac <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
   18f4a:	2100      	movs	r1, #0
   18f4c:	4620      	mov	r0, r4
   18f4e:	f000 f8cc 	bl	190ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
   18f52:	7b20      	ldrb	r0, [r4, #12]
   18f54:	2801      	cmp	r0, #1
   18f56:	d004      	beq.n	18f62 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
   18f58:	69a0      	ldr	r0, [r4, #24]
   18f5a:	61e0      	str	r0, [r4, #28]
   18f5c:	2100      	movs	r1, #0
   18f5e:	68a2      	ldr	r2, [r4, #8]
   18f60:	e041      	b.n	18fe6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   18f62:	78e0      	ldrb	r0, [r4, #3]
   18f64:	f7f5 f938 	bl	e1d8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
   18f68:	e7f7      	b.n	18f5a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
   18f6a:	78a1      	ldrb	r1, [r4, #2]
   18f6c:	2904      	cmp	r1, #4
   18f6e:	d004      	beq.n	18f7a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
   18f70:	2903      	cmp	r1, #3
   18f72:	d002      	beq.n	18f7a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
   18f74:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   18f78:	e0b4      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18f7a:	7822      	ldrb	r2, [r4, #0]
   18f7c:	b122      	cbz	r2, 18f88 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
   18f7e:	4621      	mov	r1, r4
   18f80:	4630      	mov	r0, r6
   18f82:	f000 f8ee 	bl	19162 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   18f86:	e0a4      	b.n	190d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   18f88:	2904      	cmp	r1, #4
   18f8a:	d000      	beq.n	18f8e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
   18f8c:	2001      	movs	r0, #1
   18f8e:	70a0      	strb	r0, [r4, #2]
   18f90:	68a2      	ldr	r2, [r4, #8]
   18f92:	2d02      	cmp	r5, #2
   18f94:	d00b      	beq.n	18fae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
   18f96:	2106      	movs	r1, #6
   18f98:	4630      	mov	r0, r6
   18f9a:	4790      	blx	r2
   18f9c:	2800      	cmp	r0, #0
   18f9e:	d06b      	beq.n	19078 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
   18fa0:	7800      	ldrb	r0, [r0, #0]
   18fa2:	2800      	cmp	r0, #0
   18fa4:	d068      	beq.n	19078 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
   18fa6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
   18faa:	e09b      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18fac:	e031      	b.n	19012 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
   18fae:	2105      	movs	r1, #5
   18fb0:	4630      	mov	r0, r6
   18fb2:	4790      	blx	r2
   18fb4:	2800      	cmp	r0, #0
   18fb6:	d071      	beq.n	1909c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   18fb8:	7800      	ldrb	r0, [r0, #0]
   18fba:	2800      	cmp	r0, #0
   18fbc:	d06e      	beq.n	1909c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   18fbe:	f240 11d5 	movw	r1, #469	; 0x1d5
   18fc2:	e08f      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18fc4:	78a0      	ldrb	r0, [r4, #2]
   18fc6:	2805      	cmp	r0, #5
   18fc8:	d002      	beq.n	18fd0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
   18fca:	f240 11e1 	movw	r1, #481	; 0x1e1
   18fce:	e089      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18fd0:	2102      	movs	r1, #2
   18fd2:	68a2      	ldr	r2, [r4, #8]
   18fd4:	e007      	b.n	18fe6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   18fd6:	78a0      	ldrb	r0, [r4, #2]
   18fd8:	2805      	cmp	r0, #5
   18fda:	d002      	beq.n	18fe2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
   18fdc:	f240 11e7 	movw	r1, #487	; 0x1e7
   18fe0:	e080      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18fe2:	68a2      	ldr	r2, [r4, #8]
   18fe4:	2101      	movs	r1, #1
   18fe6:	4630      	mov	r0, r6
   18fe8:	4790      	blx	r2
   18fea:	4601      	mov	r1, r0
   18fec:	4620      	mov	r0, r4
   18fee:	f7ff ff30 	bl	18e52 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
   18ff2:	2802      	cmp	r0, #2
   18ff4:	d06d      	beq.n	190d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   18ff6:	b3f0      	cbz	r0, 19076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
   18ff8:	2801      	cmp	r0, #1
   18ffa:	d064      	beq.n	190c6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
   18ffc:	f240 2127 	movw	r1, #551	; 0x227
   19000:	e070      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   19002:	e05d      	b.n	190c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
   19004:	e067      	b.n	190d6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
   19006:	78a0      	ldrb	r0, [r4, #2]
   19008:	2805      	cmp	r0, #5
   1900a:	d002      	beq.n	19012 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
   1900c:	f240 11ed 	movw	r1, #493	; 0x1ed
   19010:	e068      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   19012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19016:	f7f3 bf8b 	b.w	cf30 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
   1901a:	78a0      	ldrb	r0, [r4, #2]
   1901c:	2805      	cmp	r0, #5
   1901e:	d002      	beq.n	19026 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
   19020:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   19024:	e05e      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   19026:	68a2      	ldr	r2, [r4, #8]
   19028:	210a      	movs	r1, #10
   1902a:	4630      	mov	r0, r6
   1902c:	4790      	blx	r2
   1902e:	4601      	mov	r1, r0
   19030:	4620      	mov	r0, r4
   19032:	f7ff ff0e 	bl	18e52 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
   19036:	f240 11f5 	movw	r1, #501	; 0x1f5
   1903a:	e053      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1903c:	78a1      	ldrb	r1, [r4, #2]
   1903e:	2905      	cmp	r1, #5
   19040:	d006      	beq.n	19050 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
   19042:	7862      	ldrb	r2, [r4, #1]
   19044:	b10a      	cbz	r2, 1904a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
   19046:	2903      	cmp	r1, #3
   19048:	d002      	beq.n	19050 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
   1904a:	f240 11f9 	movw	r1, #505	; 0x1f9
   1904e:	e049      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   19050:	7821      	ldrb	r1, [r4, #0]
   19052:	b129      	cbz	r1, 19060 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
   19054:	4621      	mov	r1, r4
   19056:	4630      	mov	r0, r6
   19058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1905c:	f000 b881 	b.w	19162 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   19060:	f894 1020 	ldrb.w	r1, [r4, #32]
   19064:	b189      	cbz	r1, 1908a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
   19066:	f884 7020 	strb.w	r7, [r4, #32]
   1906a:	70a0      	strb	r0, [r4, #2]
   1906c:	68a2      	ldr	r2, [r4, #8]
   1906e:	2108      	movs	r1, #8
   19070:	4630      	mov	r0, r6
   19072:	4790      	blx	r2
   19074:	e001      	b.n	1907a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
   19076:	e029      	b.n	190cc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
   19078:	e02b      	b.n	190d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   1907a:	2800      	cmp	r0, #0
   1907c:	d00e      	beq.n	1909c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   1907e:	7800      	ldrb	r0, [r0, #0]
   19080:	2800      	cmp	r0, #0
   19082:	d00b      	beq.n	1909c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   19084:	f240 2105 	movw	r1, #517	; 0x205
   19088:	e02c      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1908a:	7861      	ldrb	r1, [r4, #1]
   1908c:	b159      	cbz	r1, 190a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
   1908e:	78e0      	ldrb	r0, [r4, #3]
   19090:	f104 010c 	add.w	r1, r4, #12
   19094:	f7ff ff2d 	bl	18ef2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   19098:	b110      	cbz	r0, 190a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
   1909a:	7067      	strb	r7, [r4, #1]
   1909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   190a0:	f240 2109 	movw	r1, #521	; 0x209
   190a4:	e01e      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   190a6:	70a0      	strb	r0, [r4, #2]
   190a8:	68a2      	ldr	r2, [r4, #8]
   190aa:	2107      	movs	r1, #7
   190ac:	4630      	mov	r0, r6
   190ae:	4790      	blx	r2
   190b0:	2800      	cmp	r0, #0
   190b2:	d0f3      	beq.n	1909c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   190b4:	7800      	ldrb	r0, [r0, #0]
   190b6:	2800      	cmp	r0, #0
   190b8:	d0f0      	beq.n	1909c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   190ba:	f240 2111 	movw	r1, #529	; 0x211
   190be:	e011      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   190c0:	f240 2116 	movw	r1, #534	; 0x216
   190c4:	e00e      	b.n	190e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   190c6:	2104      	movs	r1, #4
   190c8:	68a2      	ldr	r2, [r4, #8]
   190ca:	e78c      	b.n	18fe6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   190cc:	2103      	movs	r1, #3
   190ce:	68a2      	ldr	r2, [r4, #8]
   190d0:	e789      	b.n	18fe6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   190d2:	2d00      	cmp	r5, #0
   190d4:	d1e2      	bne.n	1909c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   190d6:	f000 f8f2 	bl	192be <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
   190da:	6800      	ldr	r0, [r0, #0]
   190dc:	2800      	cmp	r0, #0
   190de:	d0dd      	beq.n	1909c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   190e0:	f240 2131 	movw	r1, #561	; 0x231
   190e4:	206a      	movs	r0, #106	; 0x6a
   190e6:	f7f7 f963 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   190ea:	4602      	mov	r2, r0
   190ec:	7b03      	ldrb	r3, [r0, #12]
   190ee:	6900      	ldr	r0, [r0, #16]
   190f0:	4408      	add	r0, r1
   190f2:	6110      	str	r0, [r2, #16]
   190f4:	3859      	subs	r0, #89	; 0x59
   190f6:	f7f6 b80d 	b.w	f114 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   190fa:	2201      	movs	r2, #1
   190fc:	7302      	strb	r2, [r0, #12]
   190fe:	2200      	movs	r2, #0
   19100:	75c2      	strb	r2, [r0, #23]
   19102:	790a      	ldrb	r2, [r1, #4]
   19104:	b16a      	cbz	r2, 19122 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
   19106:	2200      	movs	r2, #0
   19108:	8282      	strh	r2, [r0, #20]
   1910a:	794a      	ldrb	r2, [r1, #5]
   1910c:	b15a      	cbz	r2, 19126 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
   1910e:	2204      	movs	r2, #4
   19110:	7582      	strb	r2, [r0, #22]
   19112:	688a      	ldr	r2, [r1, #8]
   19114:	326a      	adds	r2, #106	; 0x6a
   19116:	6102      	str	r2, [r0, #16]
   19118:	68c9      	ldr	r1, [r1, #12]
   1911a:	6181      	str	r1, [r0, #24]
   1911c:	2103      	movs	r1, #3
   1911e:	7081      	strb	r1, [r0, #2]
   19120:	4770      	bx	lr
   19122:	222b      	movs	r2, #43	; 0x2b
   19124:	e7f0      	b.n	19108 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
   19126:	2203      	movs	r2, #3
   19128:	e7f2      	b.n	19110 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
   1912a:	b510      	push	{r4, lr}
   1912c:	4604      	mov	r4, r0
   1912e:	2000      	movs	r0, #0
   19130:	7320      	strb	r0, [r4, #12]
   19132:	75e0      	strb	r0, [r4, #23]
   19134:	7908      	ldrb	r0, [r1, #4]
   19136:	b180      	cbz	r0, 1915a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
   19138:	2000      	movs	r0, #0
   1913a:	82a0      	strh	r0, [r4, #20]
   1913c:	7948      	ldrb	r0, [r1, #5]
   1913e:	b170      	cbz	r0, 1915e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
   19140:	2004      	movs	r0, #4
   19142:	75a0      	strb	r0, [r4, #22]
   19144:	68c8      	ldr	r0, [r1, #12]
   19146:	306a      	adds	r0, #106	; 0x6a
   19148:	6120      	str	r0, [r4, #16]
   1914a:	6889      	ldr	r1, [r1, #8]
   1914c:	69e0      	ldr	r0, [r4, #28]
   1914e:	f7f4 ffed 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   19152:	61a0      	str	r0, [r4, #24]
   19154:	2004      	movs	r0, #4
   19156:	70a0      	strb	r0, [r4, #2]
   19158:	bd10      	pop	{r4, pc}
   1915a:	202b      	movs	r0, #43	; 0x2b
   1915c:	e7ed      	b.n	1913a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
   1915e:	2003      	movs	r0, #3
   19160:	e7ef      	b.n	19142 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
   19162:	b570      	push	{r4, r5, r6, lr}
   19164:	4605      	mov	r5, r0
   19166:	460c      	mov	r4, r1
   19168:	78c8      	ldrb	r0, [r1, #3]
   1916a:	f7f5 fd9b 	bl	eca4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1916e:	b178      	cbz	r0, 19190 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
   19170:	4620      	mov	r0, r4
   19172:	f000 f810 	bl	19196 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
   19176:	68a2      	ldr	r2, [r4, #8]
   19178:	2109      	movs	r1, #9
   1917a:	4628      	mov	r0, r5
   1917c:	4790      	blx	r2
   1917e:	2800      	cmp	r0, #0
   19180:	d008      	beq.n	19194 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
   19182:	7800      	ldrb	r0, [r0, #0]
   19184:	2800      	cmp	r0, #0
   19186:	d005      	beq.n	19194 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
   19188:	21db      	movs	r1, #219	; 0xdb
   1918a:	206a      	movs	r0, #106	; 0x6a
   1918c:	f7f7 f910 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   19190:	21d7      	movs	r1, #215	; 0xd7
   19192:	e7fa      	b.n	1918a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
   19194:	bd70      	pop	{r4, r5, r6, pc}
   19196:	2100      	movs	r1, #0
   19198:	7081      	strb	r1, [r0, #2]
   1919a:	7001      	strb	r1, [r0, #0]
   1919c:	7041      	strb	r1, [r0, #1]
   1919e:	4770      	bx	lr

000191a0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   191a0:	b570      	push	{r4, r5, r6, lr}
   191a2:	f7f3 ff1f 	bl	cfe4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   191a6:	4605      	mov	r5, r0
   191a8:	2400      	movs	r4, #0
   191aa:	e006      	b.n	191ba <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   191ac:	4620      	mov	r0, r4
   191ae:	f7f3 ff1f 	bl	cff0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   191b2:	f7ff fff0 	bl	19196 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
   191b6:	1c64      	adds	r4, r4, #1
   191b8:	b2e4      	uxtb	r4, r4
   191ba:	42ac      	cmp	r4, r5
   191bc:	d3f6      	bcc.n	191ac <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   191be:	bd70      	pop	{r4, r5, r6, pc}

000191c0 <mpsl_timeslot_request>:
   191c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191c4:	460d      	mov	r5, r1
   191c6:	f7f3 ff13 	bl	cff0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   191ca:	0004      	movs	r4, r0
   191cc:	d007      	beq.n	191de <mpsl_timeslot_request+0x1e>
   191ce:	78a0      	ldrb	r0, [r4, #2]
   191d0:	f06f 0622 	mvn.w	r6, #34	; 0x22
   191d4:	2801      	cmp	r0, #1
   191d6:	d006      	beq.n	191e6 <mpsl_timeslot_request+0x26>
   191d8:	2802      	cmp	r0, #2
   191da:	d110      	bne.n	191fe <mpsl_timeslot_request+0x3e>
   191dc:	e003      	b.n	191e6 <mpsl_timeslot_request+0x26>
   191de:	f06f 0001 	mvn.w	r0, #1
   191e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191e6:	f06f 0715 	mvn.w	r7, #21
   191ea:	b155      	cbz	r5, 19202 <mpsl_timeslot_request+0x42>
   191ec:	4628      	mov	r0, r5
   191ee:	f7f3 fe71 	bl	ced4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
   191f2:	b130      	cbz	r0, 19202 <mpsl_timeslot_request+0x42>
   191f4:	7828      	ldrb	r0, [r5, #0]
   191f6:	b130      	cbz	r0, 19206 <mpsl_timeslot_request+0x46>
   191f8:	78a0      	ldrb	r0, [r4, #2]
   191fa:	2802      	cmp	r0, #2
   191fc:	d008      	beq.n	19210 <mpsl_timeslot_request+0x50>
   191fe:	4630      	mov	r0, r6
   19200:	e7ef      	b.n	191e2 <mpsl_timeslot_request+0x22>
   19202:	4638      	mov	r0, r7
   19204:	e7ed      	b.n	191e2 <mpsl_timeslot_request+0x22>
   19206:	4629      	mov	r1, r5
   19208:	4620      	mov	r0, r4
   1920a:	f7ff ff76 	bl	190fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
   1920e:	e003      	b.n	19218 <mpsl_timeslot_request+0x58>
   19210:	4629      	mov	r1, r5
   19212:	4620      	mov	r0, r4
   19214:	f7ff ff89 	bl	1912a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
   19218:	78e0      	ldrb	r0, [r4, #3]
   1921a:	f104 010c 	add.w	r1, r4, #12
   1921e:	f7ff fe68 	bl	18ef2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   19222:	b108      	cbz	r0, 19228 <mpsl_timeslot_request+0x68>
   19224:	2000      	movs	r0, #0
   19226:	e7dc      	b.n	191e2 <mpsl_timeslot_request+0x22>
   19228:	f44f 712b 	mov.w	r1, #684	; 0x2ac
   1922c:	206a      	movs	r0, #106	; 0x6a
   1922e:	f7f7 f8bf 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

00019232 <mpsl_timeslot_session_close>:
   19232:	b510      	push	{r4, lr}
   19234:	4604      	mov	r4, r0
   19236:	f7f3 fedb 	bl	cff0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1923a:	0001      	movs	r1, r0
   1923c:	d004      	beq.n	19248 <mpsl_timeslot_session_close+0x16>
   1923e:	7808      	ldrb	r0, [r1, #0]
   19240:	f06f 0222 	mvn.w	r2, #34	; 0x22
   19244:	b968      	cbnz	r0, 19262 <mpsl_timeslot_session_close+0x30>
   19246:	e002      	b.n	1924e <mpsl_timeslot_session_close+0x1c>
   19248:	f06f 0001 	mvn.w	r0, #1
   1924c:	bd10      	pop	{r4, pc}
   1924e:	7888      	ldrb	r0, [r1, #2]
   19250:	b138      	cbz	r0, 19262 <mpsl_timeslot_session_close+0x30>
   19252:	2802      	cmp	r0, #2
   19254:	d007      	beq.n	19266 <mpsl_timeslot_session_close+0x34>
   19256:	2801      	cmp	r0, #1
   19258:	d005      	beq.n	19266 <mpsl_timeslot_session_close+0x34>
   1925a:	2001      	movs	r0, #1
   1925c:	7008      	strb	r0, [r1, #0]
   1925e:	2000      	movs	r0, #0
   19260:	bd10      	pop	{r4, pc}
   19262:	4610      	mov	r0, r2
   19264:	bd10      	pop	{r4, pc}
   19266:	4620      	mov	r0, r4
   19268:	f7ff ff7b 	bl	19162 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   1926c:	e7f7      	b.n	1925e <mpsl_timeslot_session_close+0x2c>

0001926e <mpsl_timeslot_session_count_set>:
   1926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19272:	460e      	mov	r6, r1
   19274:	4607      	mov	r7, r0
   19276:	f7f3 feb5 	bl	cfe4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   1927a:	4605      	mov	r5, r0
   1927c:	2400      	movs	r4, #0
   1927e:	e00a      	b.n	19296 <mpsl_timeslot_session_count_set+0x28>
   19280:	4620      	mov	r0, r4
   19282:	f7f3 feb5 	bl	cff0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   19286:	7880      	ldrb	r0, [r0, #2]
   19288:	b118      	cbz	r0, 19292 <mpsl_timeslot_session_count_set+0x24>
   1928a:	f04f 30ff 	mov.w	r0, #4294967295
   1928e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19292:	1c64      	adds	r4, r4, #1
   19294:	b2e4      	uxtb	r4, r4
   19296:	42ac      	cmp	r4, r5
   19298:	d3f2      	bcc.n	19280 <mpsl_timeslot_session_count_set+0x12>
   1929a:	2e08      	cmp	r6, #8
   1929c:	d902      	bls.n	192a4 <mpsl_timeslot_session_count_set+0x36>
   1929e:	f06f 0015 	mvn.w	r0, #21
   192a2:	e7f4      	b.n	1928e <mpsl_timeslot_session_count_set+0x20>
   192a4:	b117      	cbz	r7, 192ac <mpsl_timeslot_session_count_set+0x3e>
   192a6:	4631      	mov	r1, r6
   192a8:	4638      	mov	r0, r7
   192aa:	e001      	b.n	192b0 <mpsl_timeslot_session_count_set+0x42>
   192ac:	2100      	movs	r1, #0
   192ae:	4608      	mov	r0, r1
   192b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   192b4:	f7f3 be82 	b.w	cfbc <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

000192b8 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
   192b8:	2000      	movs	r0, #0
   192ba:	f7f6 bcbd 	b.w	fc38 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

000192be <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
   192be:	2000      	movs	r0, #0
   192c0:	f7f6 bca0 	b.w	fc04 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

000192c4 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
   192c4:	b510      	push	{r4, lr}
   192c6:	f7f6 f973 	bl	f5b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   192ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   192ce:	f000 b800 	b.w	192d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

000192d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   192d2:	0a41      	lsrs	r1, r0, #9
   192d4:	f643 5209 	movw	r2, #15625	; 0x3d09
   192d8:	4351      	muls	r1, r2
   192da:	f3c0 0008 	ubfx	r0, r0, #0, #9
   192de:	fb10 f002 	smulbb	r0, r0, r2
   192e2:	f500 7080 	add.w	r0, r0, #256	; 0x100
   192e6:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   192ea:	4770      	bx	lr

000192ec <MPSL_IRQ_RADIO_Handler>:
   192ec:	f7f4 bf88 	b.w	e200 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
   192f0:	2800      	cmp	r0, #0
   192f2:	db09      	blt.n	19308 <MPSL_IRQ_RADIO_Handler+0x1c>
   192f4:	f000 021f 	and.w	r2, r0, #31
   192f8:	2101      	movs	r1, #1
   192fa:	4091      	lsls	r1, r2
   192fc:	0940      	lsrs	r0, r0, #5
   192fe:	0080      	lsls	r0, r0, #2
   19300:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   19304:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   19308:	4770      	bx	lr
   1930a:	2800      	cmp	r0, #0
   1930c:	db0d      	blt.n	1932a <MPSL_IRQ_RADIO_Handler+0x3e>
   1930e:	f000 021f 	and.w	r2, r0, #31
   19312:	2101      	movs	r1, #1
   19314:	4091      	lsls	r1, r2
   19316:	0940      	lsrs	r0, r0, #5
   19318:	0080      	lsls	r0, r0, #2
   1931a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1931e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   19322:	f3bf 8f4f 	dsb	sy
   19326:	f3bf 8f6f 	isb	sy
   1932a:	4770      	bx	lr

0001932c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
   1932c:	b570      	push	{r4, r5, r6, lr}
   1932e:	4602      	mov	r2, r0
   19330:	2000      	movs	r0, #0
   19332:	2900      	cmp	r1, #0
   19334:	d01d      	beq.n	19372 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
   19336:	fba2 0101 	umull	r0, r1, r2, r1
   1933a:	0a40      	lsrs	r0, r0, #9
   1933c:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
   19340:	0a49      	lsrs	r1, r1, #9
   19342:	1c40      	adds	r0, r0, #1
   19344:	f141 0100 	adc.w	r1, r1, #0
   19348:	f240 72a1 	movw	r2, #1953	; 0x7a1
   1934c:	1883      	adds	r3, r0, r2
   1934e:	f141 0100 	adc.w	r1, r1, #0
   19352:	1c5b      	adds	r3, r3, #1
   19354:	f141 0400 	adc.w	r4, r1, #0
   19358:	2100      	movs	r1, #0
   1935a:	f1d3 33ff 	rsbs	r3, r3, #4294967295
   1935e:	41a1      	sbcs	r1, r4
   19360:	d203      	bcs.n	1936a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
   19362:	2171      	movs	r1, #113	; 0x71
   19364:	206d      	movs	r0, #109	; 0x6d
   19366:	f7f7 f823 	bl	103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1936a:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
   1936e:	fbb0 f0f2 	udiv	r0, r0, r2
   19372:	bd70      	pop	{r4, r5, r6, pc}
   19374:	5840      	ldr	r0, [r0, r1]
   19376:	2800      	cmp	r0, #0
   19378:	d000      	beq.n	1937c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
   1937a:	2001      	movs	r0, #1
   1937c:	4770      	bx	lr
   1937e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   19382:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   19386:	f002 0201 	and.w	r2, r2, #1
   1938a:	03c0      	lsls	r0, r0, #15
   1938c:	d503      	bpl.n	19396 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   1938e:	428a      	cmp	r2, r1
   19390:	d101      	bne.n	19396 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   19392:	2001      	movs	r0, #1
   19394:	4770      	bx	lr
   19396:	2000      	movs	r0, #0
   19398:	4770      	bx	lr

0001939a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   1939a:	b510      	push	{r4, lr}
   1939c:	2101      	movs	r1, #1
   1939e:	0788      	lsls	r0, r1, #30
   193a0:	f7f6 ffb0 	bl	10304 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   193a4:	2800      	cmp	r0, #0
   193a6:	d000      	beq.n	193aa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   193a8:	2001      	movs	r0, #1
   193aa:	bd10      	pop	{r4, pc}

000193ac <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   193ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   193b0:	2101      	movs	r1, #1
   193b2:	6001      	str	r1, [r0, #0]
   193b4:	4770      	bx	lr

000193b6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   193b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   193ba:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   193be:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   193c2:	f002 0203 	and.w	r2, r2, #3
   193c6:	03c9      	lsls	r1, r1, #15
   193c8:	d503      	bpl.n	193d2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   193ca:	4282      	cmp	r2, r0
   193cc:	d101      	bne.n	193d2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   193ce:	2001      	movs	r0, #1
   193d0:	4770      	bx	lr
   193d2:	2000      	movs	r0, #0
   193d4:	4770      	bx	lr

000193d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   193d6:	b510      	push	{r4, lr}
   193d8:	2100      	movs	r1, #0
   193da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   193de:	f7f6 ff91 	bl	10304 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   193e2:	2800      	cmp	r0, #0
   193e4:	d000      	beq.n	193e8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   193e6:	2001      	movs	r0, #1
   193e8:	bd10      	pop	{r4, pc}
   193ea:	2800      	cmp	r0, #0
   193ec:	db09      	blt.n	19402 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   193ee:	f000 021f 	and.w	r2, r0, #31
   193f2:	2101      	movs	r1, #1
   193f4:	4091      	lsls	r1, r2
   193f6:	0940      	lsrs	r0, r0, #5
   193f8:	0080      	lsls	r0, r0, #2
   193fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   193fe:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   19402:	4770      	bx	lr
   19404:	2800      	cmp	r0, #0
   19406:	db0d      	blt.n	19424 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   19408:	f000 021f 	and.w	r2, r0, #31
   1940c:	2101      	movs	r1, #1
   1940e:	4091      	lsls	r1, r2
   19410:	0940      	lsrs	r0, r0, #5
   19412:	0080      	lsls	r0, r0, #2
   19414:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   19418:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1941c:	f3bf 8f4f 	dsb	sy
   19420:	f3bf 8f6f 	isb	sy
   19424:	4770      	bx	lr
   19426:	1000      	.short	0x1000
   19428:	00fa0002 	.word	0x00fa0002
   1942c:	57230000 	.word	0x57230000
   19430:	31232462 	.word	0x31232462
   19434:	ee74578f 	.word	0xee74578f
   19438:	c0882fd1 	.word	0xc0882fd1
   1943c:	a2f74594 	.word	0xa2f74594
   19440:	36f9      	.short	0x36f9
   19442:	2800      	cmp	r0, #0
   19444:	db09      	blt.n	1945a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   19446:	f000 021f 	and.w	r2, r0, #31
   1944a:	2101      	movs	r1, #1
   1944c:	4091      	lsls	r1, r2
   1944e:	0940      	lsrs	r0, r0, #5
   19450:	0080      	lsls	r0, r0, #2
   19452:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   19456:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1945a:	4770      	bx	lr

0001945c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   1945c:	f3ef 8110 	mrs	r1, PRIMASK
   19460:	b672      	cpsid	i
   19462:	7802      	ldrb	r2, [r0, #0]
   19464:	2a01      	cmp	r2, #1
   19466:	d001      	beq.n	1946c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   19468:	2201      	movs	r2, #1
   1946a:	e000      	b.n	1946e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   1946c:	2200      	movs	r2, #0
   1946e:	2301      	movs	r3, #1
   19470:	7003      	strb	r3, [r0, #0]
   19472:	b901      	cbnz	r1, 19476 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   19474:	b662      	cpsie	i
   19476:	b10a      	cbz	r2, 1947c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   19478:	2000      	movs	r0, #0
   1947a:	4770      	bx	lr
   1947c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19480:	4770      	bx	lr

00019482 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   19482:	2100      	movs	r1, #0
   19484:	7001      	strb	r1, [r0, #0]
   19486:	4608      	mov	r0, r1
   19488:	4770      	bx	lr

0001948a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   1948a:	f3ef 8110 	mrs	r1, PRIMASK
   1948e:	b672      	cpsid	i
   19490:	2200      	movs	r2, #0
   19492:	7002      	strb	r2, [r0, #0]
   19494:	b901      	cbnz	r1, 19498 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   19496:	b662      	cpsie	i
   19498:	2000      	movs	r0, #0
   1949a:	4770      	bx	lr

0001949c <mpsl_low_priority_process>:
   1949c:	f7f7 b874 	b.w	10588 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

000194a0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   194a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   194a4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   194a8:	280f      	cmp	r0, #15
   194aa:	d001      	beq.n	194b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   194ac:	2000      	movs	r0, #0
   194ae:	4770      	bx	lr
   194b0:	2001      	movs	r0, #1
   194b2:	4770      	bx	lr

000194b4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   194b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   194b8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   194bc:	280a      	cmp	r0, #10
   194be:	d001      	beq.n	194c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   194c0:	2000      	movs	r0, #0
   194c2:	4770      	bx	lr
   194c4:	2001      	movs	r0, #1
   194c6:	4770      	bx	lr

000194c8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   194c8:	b500      	push	{lr}
   194ca:	f7ff fff3 	bl	194b4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   194ce:	b120      	cbz	r0, 194da <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   194d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   194d4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   194d8:	b108      	cbz	r0, 194de <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   194da:	2000      	movs	r0, #0
   194dc:	bd00      	pop	{pc}
   194de:	2001      	movs	r0, #1
   194e0:	bd00      	pop	{pc}

000194e2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   194e2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   194e6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   194ea:	280e      	cmp	r0, #14
   194ec:	d001      	beq.n	194f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   194ee:	2000      	movs	r0, #0
   194f0:	4770      	bx	lr
   194f2:	2001      	movs	r0, #1
   194f4:	4770      	bx	lr

000194f6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   194f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   194fa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   194fe:	2810      	cmp	r0, #16
   19500:	d001      	beq.n	19506 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   19502:	2000      	movs	r0, #0
   19504:	4770      	bx	lr
   19506:	2001      	movs	r0, #1
   19508:	4770      	bx	lr

0001950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   1950a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1950e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   19512:	2806      	cmp	r0, #6
   19514:	d003      	beq.n	1951e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   19516:	1c40      	adds	r0, r0, #1
   19518:	d001      	beq.n	1951e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   1951a:	2000      	movs	r0, #0
   1951c:	4770      	bx	lr
   1951e:	2001      	movs	r0, #1
   19520:	4770      	bx	lr

00019522 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   19522:	b500      	push	{lr}
   19524:	f7ff fff1 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   19528:	b148      	cbz	r0, 1953e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1952a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1952e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   19532:	2806      	cmp	r0, #6
   19534:	d303      	bcc.n	1953e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   19536:	1c40      	adds	r0, r0, #1
   19538:	d001      	beq.n	1953e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1953a:	2001      	movs	r0, #1
   1953c:	bd00      	pop	{pc}
   1953e:	2000      	movs	r0, #0
   19540:	bd00      	pop	{pc}

00019542 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   19542:	b500      	push	{lr}
   19544:	f7ff ffe1 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   19548:	b138      	cbz	r0, 1955a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   1954a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1954e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   19552:	2806      	cmp	r0, #6
   19554:	d303      	bcc.n	1955e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   19556:	1c40      	adds	r0, r0, #1
   19558:	d001      	beq.n	1955e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   1955a:	2000      	movs	r0, #0
   1955c:	bd00      	pop	{pc}
   1955e:	2001      	movs	r0, #1
   19560:	bd00      	pop	{pc}

00019562 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   19562:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   19566:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1956a:	280d      	cmp	r0, #13
   1956c:	d001      	beq.n	19572 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   1956e:	2000      	movs	r0, #0
   19570:	4770      	bx	lr
   19572:	2001      	movs	r0, #1
   19574:	4770      	bx	lr

00019576 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   19576:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1957a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1957e:	2808      	cmp	r0, #8
   19580:	d001      	beq.n	19586 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   19582:	2000      	movs	r0, #0
   19584:	4770      	bx	lr
   19586:	2001      	movs	r0, #1
   19588:	4770      	bx	lr

0001958a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   1958a:	2a00      	cmp	r2, #0
   1958c:	bf04      	itt	eq
   1958e:	2000      	moveq	r0, #0
   19590:	4770      	bxeq	lr
   19592:	1e52      	subs	r2, r2, #1
   19594:	d007      	beq.n	195a6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   19596:	7803      	ldrb	r3, [r0, #0]
   19598:	f891 c000 	ldrb.w	ip, [r1]
   1959c:	4563      	cmp	r3, ip
   1959e:	bf04      	itt	eq
   195a0:	1c40      	addeq	r0, r0, #1
   195a2:	1c49      	addeq	r1, r1, #1
   195a4:	d0f5      	beq.n	19592 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   195a6:	7800      	ldrb	r0, [r0, #0]
   195a8:	7809      	ldrb	r1, [r1, #0]
   195aa:	1a40      	subs	r0, r0, r1
   195ac:	4770      	bx	lr

000195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   195ae:	b4f0      	push	{r4, r5, r6, r7}
   195b0:	ea80 0c01 	eor.w	ip, r0, r1
   195b4:	4603      	mov	r3, r0
   195b6:	f01c 0f03 	tst.w	ip, #3
   195ba:	d13c      	bne.n	19636 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   195bc:	f013 0f03 	tst.w	r3, #3
   195c0:	d00b      	beq.n	195da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   195c2:	2a00      	cmp	r2, #0
   195c4:	bf04      	itt	eq
   195c6:	bcf0      	popeq	{r4, r5, r6, r7}
   195c8:	4770      	bxeq	lr
   195ca:	f811 cb01 	ldrb.w	ip, [r1], #1
   195ce:	f803 cb01 	strb.w	ip, [r3], #1
   195d2:	1e52      	subs	r2, r2, #1
   195d4:	f013 0f03 	tst.w	r3, #3
   195d8:	d1f3      	bne.n	195c2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   195da:	2a03      	cmp	r2, #3
   195dc:	d94f      	bls.n	1967e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   195de:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   195e2:	d24c      	bcs.n	1967e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   195e4:	f1c2 0c00 	rsb	ip, r2, #0
   195e8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   195ec:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   195f0:	ea4f 0cac 	mov.w	ip, ip, asr #2
   195f4:	f1cc 0c00 	rsb	ip, ip, #0
   195f8:	f1bc 0f00 	cmp.w	ip, #0
   195fc:	dd1b      	ble.n	19636 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   195fe:	1f0d      	subs	r5, r1, #4
   19600:	1f1c      	subs	r4, r3, #4
   19602:	f01c 0f01 	tst.w	ip, #1
   19606:	d003      	beq.n	19610 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   19608:	f855 6f04 	ldr.w	r6, [r5, #4]!
   1960c:	f844 6f04 	str.w	r6, [r4, #4]!
   19610:	ea5f 066c 	movs.w	r6, ip, asr #1
   19614:	d007      	beq.n	19626 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   19616:	686f      	ldr	r7, [r5, #4]
   19618:	6067      	str	r7, [r4, #4]
   1961a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   1961e:	f844 7f08 	str.w	r7, [r4, #8]!
   19622:	1e76      	subs	r6, r6, #1
   19624:	d1f7      	bne.n	19616 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   19626:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   1962a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1962e:	f1cc 0c00 	rsb	ip, ip, #0
   19632:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   19636:	2a00      	cmp	r2, #0
   19638:	bf04      	itt	eq
   1963a:	bcf0      	popeq	{r4, r5, r6, r7}
   1963c:	4770      	bxeq	lr
   1963e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   19642:	d226      	bcs.n	19692 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   19644:	2a00      	cmp	r2, #0
   19646:	bfdc      	itt	le
   19648:	bcf0      	pople	{r4, r5, r6, r7}
   1964a:	4770      	bxle	lr
   1964c:	1e49      	subs	r1, r1, #1
   1964e:	1e5b      	subs	r3, r3, #1
   19650:	f012 0f01 	tst.w	r2, #1
   19654:	d003      	beq.n	1965e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   19656:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1965a:	f803 cf01 	strb.w	ip, [r3, #1]!
   1965e:	1052      	asrs	r2, r2, #1
   19660:	bf04      	itt	eq
   19662:	bcf0      	popeq	{r4, r5, r6, r7}
   19664:	4770      	bxeq	lr
   19666:	f891 c001 	ldrb.w	ip, [r1, #1]
   1966a:	f883 c001 	strb.w	ip, [r3, #1]
   1966e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   19672:	f803 cf02 	strb.w	ip, [r3, #2]!
   19676:	1e52      	subs	r2, r2, #1
   19678:	d1f5      	bne.n	19666 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   1967a:	bcf0      	pop	{r4, r5, r6, r7}
   1967c:	4770      	bx	lr
   1967e:	2a04      	cmp	r2, #4
   19680:	d3d9      	bcc.n	19636 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   19682:	f851 cb04 	ldr.w	ip, [r1], #4
   19686:	1f12      	subs	r2, r2, #4
   19688:	f843 cb04 	str.w	ip, [r3], #4
   1968c:	2a04      	cmp	r2, #4
   1968e:	d2f8      	bcs.n	19682 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   19690:	e7d1      	b.n	19636 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   19692:	f811 cb01 	ldrb.w	ip, [r1], #1
   19696:	f803 cb01 	strb.w	ip, [r3], #1
   1969a:	1e52      	subs	r2, r2, #1
   1969c:	d1f9      	bne.n	19692 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1969e:	bcf0      	pop	{r4, r5, r6, r7}
   196a0:	4770      	bx	lr

000196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   196a2:	b470      	push	{r4, r5, r6}
   196a4:	4603      	mov	r3, r0
   196a6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   196aa:	f010 0f03 	tst.w	r0, #3
   196ae:	d009      	beq.n	196c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   196b0:	2a00      	cmp	r2, #0
   196b2:	bf04      	itt	eq
   196b4:	bc70      	popeq	{r4, r5, r6}
   196b6:	4770      	bxeq	lr
   196b8:	f803 cb01 	strb.w	ip, [r3], #1
   196bc:	1e52      	subs	r2, r2, #1
   196be:	f013 0f03 	tst.w	r3, #3
   196c2:	d1f5      	bne.n	196b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   196c4:	b2c9      	uxtb	r1, r1
   196c6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   196ca:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   196ce:	2a03      	cmp	r2, #3
   196d0:	d939      	bls.n	19746 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   196d2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   196d6:	d236      	bcs.n	19746 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   196d8:	4251      	negs	r1, r2
   196da:	17cc      	asrs	r4, r1, #31
   196dc:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   196e0:	1089      	asrs	r1, r1, #2
   196e2:	424e      	negs	r6, r1
   196e4:	2e00      	cmp	r6, #0
   196e6:	dd11      	ble.n	1970c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   196e8:	1f19      	subs	r1, r3, #4
   196ea:	f016 0f01 	tst.w	r6, #1
   196ee:	bf18      	it	ne
   196f0:	f841 5f04 	strne.w	r5, [r1, #4]!
   196f4:	1074      	asrs	r4, r6, #1
   196f6:	d004      	beq.n	19702 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   196f8:	604d      	str	r5, [r1, #4]
   196fa:	f841 5f08 	str.w	r5, [r1, #8]!
   196fe:	1e64      	subs	r4, r4, #1
   19700:	d1fa      	bne.n	196f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   19702:	4271      	negs	r1, r6
   19704:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   19708:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1970c:	2a00      	cmp	r2, #0
   1970e:	bf04      	itt	eq
   19710:	bc70      	popeq	{r4, r5, r6}
   19712:	4770      	bxeq	lr
   19714:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   19718:	d21d      	bcs.n	19756 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1971a:	2a00      	cmp	r2, #0
   1971c:	bfdc      	itt	le
   1971e:	bc70      	pople	{r4, r5, r6}
   19720:	4770      	bxle	lr
   19722:	1e59      	subs	r1, r3, #1
   19724:	f012 0f01 	tst.w	r2, #1
   19728:	bf18      	it	ne
   1972a:	f801 cf01 	strbne.w	ip, [r1, #1]!
   1972e:	1052      	asrs	r2, r2, #1
   19730:	bf04      	itt	eq
   19732:	bc70      	popeq	{r4, r5, r6}
   19734:	4770      	bxeq	lr
   19736:	f881 c001 	strb.w	ip, [r1, #1]
   1973a:	f801 cf02 	strb.w	ip, [r1, #2]!
   1973e:	1e52      	subs	r2, r2, #1
   19740:	d1f9      	bne.n	19736 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   19742:	bc70      	pop	{r4, r5, r6}
   19744:	4770      	bx	lr
   19746:	2a04      	cmp	r2, #4
   19748:	d3e0      	bcc.n	1970c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1974a:	1f12      	subs	r2, r2, #4
   1974c:	f843 5b04 	str.w	r5, [r3], #4
   19750:	2a04      	cmp	r2, #4
   19752:	d2fa      	bcs.n	1974a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   19754:	e7da      	b.n	1970c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   19756:	f803 cb01 	strb.w	ip, [r3], #1
   1975a:	1e52      	subs	r2, r2, #1
   1975c:	d1fb      	bne.n	19756 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1975e:	bc70      	pop	{r4, r5, r6}
   19760:	4770      	bx	lr
   19762:	f04f 30ff 	mov.w	r0, #4294967295
   19766:	4770      	bx	lr
   19768:	2000      	movs	r0, #0
   1976a:	4770      	bx	lr
   1976c:	2000      	movs	r0, #0
   1976e:	4770      	bx	lr
   19770:	f04f 30ff 	mov.w	r0, #4294967295
   19774:	4770      	bx	lr
   19776:	4770      	bx	lr
   19778:	4770      	bx	lr
   1977a:	2000      	movs	r0, #0
   1977c:	4770      	bx	lr
   1977e:	f04f 30ff 	mov.w	r0, #4294967295
   19782:	4770      	bx	lr
   19784:	f04f 30ff 	mov.w	r0, #4294967295
   19788:	4770      	bx	lr
   1978a:	2100      	movs	r1, #0
   1978c:	7001      	strb	r1, [r0, #0]
   1978e:	4770      	bx	lr
   19790:	f04f 30ff 	mov.w	r0, #4294967295
   19794:	4770      	bx	lr
   19796:	f04f 30ff 	mov.w	r0, #4294967295
   1979a:	4770      	bx	lr
   1979c:	2000      	movs	r0, #0
   1979e:	4770      	bx	lr
   197a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   197a4:	4606      	mov	r6, r0
   197a6:	460c      	mov	r4, r1
   197a8:	7808      	ldrb	r0, [r1, #0]
   197aa:	7849      	ldrb	r1, [r1, #1]
   197ac:	2700      	movs	r7, #0
   197ae:	4408      	add	r0, r1
   197b0:	4691      	mov	r9, r2
   197b2:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   197b6:	463d      	mov	r5, r7
   197b8:	e00e      	b.n	197d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
   197ba:	7a23      	ldrb	r3, [r4, #8]
   197bc:	2b02      	cmp	r3, #2
   197be:	d200      	bcs.n	197c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
   197c0:	2302      	movs	r3, #2
   197c2:	79e2      	ldrb	r2, [r4, #7]
   197c4:	2a03      	cmp	r2, #3
   197c6:	d200      	bcs.n	197ca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
   197c8:	2203      	movs	r2, #3
   197ca:	79a1      	ldrb	r1, [r4, #6]
   197cc:	7960      	ldrb	r0, [r4, #5]
   197ce:	f000 ffd0 	bl	1a772 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
   197d2:	1c6d      	adds	r5, r5, #1
   197d4:	4407      	add	r7, r0
   197d6:	b2ed      	uxtb	r5, r5
   197d8:	4545      	cmp	r5, r8
   197da:	d3ee      	bcc.n	197ba <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
   197dc:	6830      	ldr	r0, [r6, #0]
   197de:	1cc0      	adds	r0, r0, #3
   197e0:	f020 0003 	bic.w	r0, r0, #3
   197e4:	6030      	str	r0, [r6, #0]
   197e6:	f1b9 0f00 	cmp.w	r9, #0
   197ea:	d000      	beq.n	197ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
   197ec:	2000      	movs	r0, #0
   197ee:	463a      	mov	r2, r7
   197f0:	4641      	mov	r1, r8
   197f2:	f7f7 fc73 	bl	110dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
   197f6:	6831      	ldr	r1, [r6, #0]
   197f8:	4408      	add	r0, r1
   197fa:	6030      	str	r0, [r6, #0]
   197fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019800 <sdc_soc_ecb_block_encrypt>:
   19800:	b530      	push	{r4, r5, lr}
   19802:	460d      	mov	r5, r1
   19804:	b08d      	sub	sp, #52	; 0x34
   19806:	4614      	mov	r4, r2
   19808:	4601      	mov	r1, r0
   1980a:	2210      	movs	r2, #16
   1980c:	4668      	mov	r0, sp
   1980e:	f7ff fece 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19812:	2210      	movs	r2, #16
   19814:	4629      	mov	r1, r5
   19816:	a804      	add	r0, sp, #16
   19818:	f7ff fec9 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1981c:	4668      	mov	r0, sp
   1981e:	f7f7 fd99 	bl	11354 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   19822:	b118      	cbz	r0, 1982c <sdc_soc_ecb_block_encrypt+0x2c>
   19824:	f06f 0015 	mvn.w	r0, #21
   19828:	b00d      	add	sp, #52	; 0x34
   1982a:	bd30      	pop	{r4, r5, pc}
   1982c:	2210      	movs	r2, #16
   1982e:	4620      	mov	r0, r4
   19830:	a908      	add	r1, sp, #32
   19832:	f7ff febc 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19836:	2000      	movs	r0, #0
   19838:	e7f6      	b.n	19828 <sdc_soc_ecb_block_encrypt+0x28>

0001983a <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
   1983a:	2000      	movs	r0, #0
   1983c:	4770      	bx	lr

0001983e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
   1983e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   19840:	4604      	mov	r4, r0
   19842:	1d01      	adds	r1, r0, #4
   19844:	4668      	mov	r0, sp
   19846:	f7f9 f8e5 	bl	12a14 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
   1984a:	2800      	cmp	r0, #0
   1984c:	d004      	beq.n	19858 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
   1984e:	4669      	mov	r1, sp
   19850:	4620      	mov	r0, r4
   19852:	f000 f848 	bl	198e6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
   19856:	2001      	movs	r0, #1
   19858:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001985a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
   1985a:	b50e      	push	{r1, r2, r3, lr}
   1985c:	4601      	mov	r1, r0
   1985e:	4668      	mov	r0, sp
   19860:	f000 f827 	bl	198b2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
   19864:	4668      	mov	r0, sp
   19866:	f001 fc51 	bl	1b10c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
   1986a:	bd0e      	pop	{r1, r2, r3, pc}

0001986c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
   1986c:	b510      	push	{r4, lr}
   1986e:	4604      	mov	r4, r0
   19870:	4620      	mov	r0, r4
   19872:	f7f7 f973 	bl	10b5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
   19876:	2800      	cmp	r0, #0
   19878:	d006      	beq.n	19888 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
   1987a:	78a1      	ldrb	r1, [r4, #2]
   1987c:	7820      	ldrb	r0, [r4, #0]
   1987e:	f000 f804 	bl	1988a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
   19882:	2800      	cmp	r0, #0
   19884:	d0f4      	beq.n	19870 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
   19886:	2001      	movs	r0, #1
   19888:	bd10      	pop	{r4, pc}
   1988a:	b570      	push	{r4, r5, r6, lr}
   1988c:	460c      	mov	r4, r1
   1988e:	4605      	mov	r5, r0
   19890:	f7f7 f9c0 	bl	10c14 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
   19894:	2800      	cmp	r0, #0
   19896:	d002      	beq.n	1989e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
   19898:	2d3e      	cmp	r5, #62	; 0x3e
   1989a:	d001      	beq.n	198a0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
   1989c:	2001      	movs	r0, #1
   1989e:	bd70      	pop	{r4, r5, r6, pc}
   198a0:	2c12      	cmp	r4, #18
   198a2:	d004      	beq.n	198ae <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
   198a4:	4620      	mov	r0, r4
   198a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   198aa:	f7f7 b9cf 	b.w	10c4c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   198ae:	2000      	movs	r0, #0
   198b0:	bd70      	pop	{r4, r5, r6, pc}

000198b2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
   198b2:	880a      	ldrh	r2, [r1, #0]
   198b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
   198b8:	8002      	strh	r2, [r0, #0]
   198ba:	884a      	ldrh	r2, [r1, #2]
   198bc:	8042      	strh	r2, [r0, #2]
   198be:	784a      	ldrb	r2, [r1, #1]
   198c0:	0993      	lsrs	r3, r2, #6
   198c2:	2200      	movs	r2, #0
   198c4:	7142      	strb	r2, [r0, #5]
   198c6:	784b      	ldrb	r3, [r1, #1]
   198c8:	f3c3 1301 	ubfx	r3, r3, #4, #2
   198cc:	b11b      	cbz	r3, 198d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   198ce:	2b01      	cmp	r3, #1
   198d0:	d005      	beq.n	198de <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
   198d2:	2b02      	cmp	r3, #2
   198d4:	d005      	beq.n	198e2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
   198d6:	7102      	strb	r2, [r0, #4]
   198d8:	1d09      	adds	r1, r1, #4
   198da:	6081      	str	r1, [r0, #8]
   198dc:	4770      	bx	lr
   198de:	2201      	movs	r2, #1
   198e0:	e7f9      	b.n	198d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   198e2:	2202      	movs	r2, #2
   198e4:	e7f7      	b.n	198d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

000198e6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
   198e6:	b510      	push	{r4, lr}
   198e8:	460c      	mov	r4, r1
   198ea:	7809      	ldrb	r1, [r1, #0]
   198ec:	7001      	strb	r1, [r0, #0]
   198ee:	7841      	ldrb	r1, [r0, #1]
   198f0:	f021 010f 	bic.w	r1, r1, #15
   198f4:	7041      	strb	r1, [r0, #1]
   198f6:	8822      	ldrh	r2, [r4, #0]
   198f8:	f3c2 2203 	ubfx	r2, r2, #8, #4
   198fc:	4311      	orrs	r1, r2
   198fe:	7041      	strb	r1, [r0, #1]
   19900:	78a2      	ldrb	r2, [r4, #2]
   19902:	7082      	strb	r2, [r0, #2]
   19904:	8862      	ldrh	r2, [r4, #2]
   19906:	f021 0130 	bic.w	r1, r1, #48	; 0x30
   1990a:	0a12      	lsrs	r2, r2, #8
   1990c:	70c2      	strb	r2, [r0, #3]
   1990e:	7041      	strb	r1, [r0, #1]
   19910:	7922      	ldrb	r2, [r4, #4]
   19912:	f002 0203 	and.w	r2, r2, #3
   19916:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   1991a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   1991e:	7041      	strb	r1, [r0, #1]
   19920:	7962      	ldrb	r2, [r4, #5]
   19922:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
   19926:	7041      	strb	r1, [r0, #1]
   19928:	68a1      	ldr	r1, [r4, #8]
   1992a:	1d02      	adds	r2, r0, #4
   1992c:	4291      	cmp	r1, r2
   1992e:	d006      	beq.n	1993e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
   19930:	8862      	ldrh	r2, [r4, #2]
   19932:	2afb      	cmp	r2, #251	; 0xfb
   19934:	d300      	bcc.n	19938 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
   19936:	22fb      	movs	r2, #251	; 0xfb
   19938:	1d00      	adds	r0, r0, #4
   1993a:	f7ff fe38 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1993e:	78a0      	ldrb	r0, [r4, #2]
   19940:	1d00      	adds	r0, r0, #4
   19942:	b2c0      	uxtb	r0, r0
   19944:	bd10      	pop	{r4, pc}

00019946 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   19946:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1994a:	4604      	mov	r4, r0
   1994c:	f891 c000 	ldrb.w	ip, [r1]
   19950:	2000      	movs	r0, #0
   19952:	270c      	movs	r7, #12
   19954:	223e      	movs	r2, #62	; 0x3e
   19956:	2612      	movs	r6, #18
   19958:	25ff      	movs	r5, #255	; 0xff
   1995a:	f04f 0b14 	mov.w	fp, #20
   1995e:	f04f 0e13 	mov.w	lr, #19
   19962:	f04f 0a05 	mov.w	sl, #5
   19966:	f104 030d 	add.w	r3, r4, #13
   1996a:	f04f 0911 	mov.w	r9, #17
   1996e:	f1bc 0f20 	cmp.w	ip, #32
   19972:	d272      	bcs.n	19a5a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
   19974:	e8df f00c 	tbb	[pc, ip]
   19978:	29271071 	.word	0x29271071
   1997c:	a46dfc2e 	.word	0xa46dfc2e
   19980:	fbdac0ae 	.word	0xfbdac0ae
   19984:	f7f8f9fa 	.word	0xf7f8f9fa
   19988:	507171f6 	.word	0x507171f6
   1998c:	f3f4f572 	.word	0xf3f4f572
   19990:	eff0f1f2 	.word	0xeff0f1f2
   19994:	ec71edee 	.word	0xec71edee
   19998:	7027      	strb	r7, [r4, #0]
   1999a:	7908      	ldrb	r0, [r1, #4]
   1999c:	70a0      	strb	r0, [r4, #2]
   1999e:	7948      	ldrb	r0, [r1, #5]
   199a0:	70e0      	strb	r0, [r4, #3]
   199a2:	f8b1 0005 	ldrh.w	r0, [r1, #5]
   199a6:	0a00      	lsrs	r0, r0, #8
   199a8:	7120      	strb	r0, [r4, #4]
   199aa:	79c8      	ldrb	r0, [r1, #7]
   199ac:	7160      	strb	r0, [r4, #5]
   199ae:	7a08      	ldrb	r0, [r1, #8]
   199b0:	71a0      	strb	r0, [r4, #6]
   199b2:	8908      	ldrh	r0, [r1, #8]
   199b4:	0a00      	lsrs	r0, r0, #8
   199b6:	71e0      	strb	r0, [r4, #7]
   199b8:	7a88      	ldrb	r0, [r1, #10]
   199ba:	7220      	strb	r0, [r4, #8]
   199bc:	8948      	ldrh	r0, [r1, #10]
   199be:	0a00      	lsrs	r0, r0, #8
   199c0:	7260      	strb	r0, [r4, #9]
   199c2:	2008      	movs	r0, #8
   199c4:	e154      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   199c6:	2010      	movs	r0, #16
   199c8:	e000      	b.n	199cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
   199ca:	201a      	movs	r0, #26
   199cc:	7020      	strb	r0, [r4, #0]
   199ce:	7908      	ldrb	r0, [r1, #4]
   199d0:	70a0      	strb	r0, [r4, #2]
   199d2:	e154      	b.n	19c7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
   199d4:	7022      	strb	r2, [r4, #0]
   199d6:	2002      	movs	r0, #2
   199d8:	70a0      	strb	r0, [r4, #2]
   199da:	7908      	ldrb	r0, [r1, #4]
   199dc:	70e0      	strb	r0, [r4, #3]
   199de:	7b88      	ldrb	r0, [r1, #14]
   199e0:	7120      	strb	r0, [r4, #4]
   199e2:	7948      	ldrb	r0, [r1, #5]
   199e4:	7160      	strb	r0, [r4, #5]
   199e6:	f8d1 0006 	ldr.w	r0, [r1, #6]
   199ea:	f8c4 0006 	str.w	r0, [r4, #6]
   199ee:	8948      	ldrh	r0, [r1, #10]
   199f0:	8160      	strh	r0, [r4, #10]
   199f2:	7b08      	ldrb	r0, [r1, #12]
   199f4:	7320      	strb	r0, [r4, #12]
   199f6:	7b0e      	ldrb	r6, [r1, #12]
   199f8:	1d0d      	adds	r5, r1, #4
   199fa:	2e1f      	cmp	r6, #31
   199fc:	d300      	bcc.n	19a00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
   199fe:	261f      	movs	r6, #31
   19a00:	4618      	mov	r0, r3
   19a02:	4632      	mov	r2, r6
   19a04:	f105 010b 	add.w	r1, r5, #11
   19a08:	f7ff fdd1 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19a0c:	360d      	adds	r6, #13
   19a0e:	7a69      	ldrb	r1, [r5, #9]
   19a10:	55a1      	strb	r1, [r4, r6]
   19a12:	1e76      	subs	r6, r6, #1
   19a14:	b2f0      	uxtb	r0, r6
   19a16:	e129      	b.n	19c6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
   19a18:	7022      	strb	r2, [r4, #0]
   19a1a:	200b      	movs	r0, #11
   19a1c:	70a0      	strb	r0, [r4, #2]
   19a1e:	7908      	ldrb	r0, [r1, #4]
   19a20:	70e0      	strb	r0, [r4, #3]
   19a22:	7948      	ldrb	r0, [r1, #5]
   19a24:	7120      	strb	r0, [r4, #4]
   19a26:	7988      	ldrb	r0, [r1, #6]
   19a28:	7160      	strb	r0, [r4, #5]
   19a2a:	f8d1 0007 	ldr.w	r0, [r1, #7]
   19a2e:	f8c4 0006 	str.w	r0, [r4, #6]
   19a32:	f8b1 000b 	ldrh.w	r0, [r1, #11]
   19a36:	8160      	strh	r0, [r4, #10]
   19a38:	7b48      	ldrb	r0, [r1, #13]
   19a3a:	7320      	strb	r0, [r4, #12]
   19a3c:	f8d1 000e 	ldr.w	r0, [r1, #14]
   19a40:	f8c4 000d 	str.w	r0, [r4, #13]
   19a44:	8a48      	ldrh	r0, [r1, #18]
   19a46:	f8a4 0011 	strh.w	r0, [r4, #17]
   19a4a:	7d08      	ldrb	r0, [r1, #20]
   19a4c:	74e0      	strb	r0, [r4, #19]
   19a4e:	4630      	mov	r0, r6
   19a50:	e10e      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19a52:	4620      	mov	r0, r4
   19a54:	f000 f98d 	bl	19d72 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
   19a58:	e108      	b.n	19c6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
   19a5a:	e10b      	b.n	19c74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
   19a5c:	7022      	strb	r2, [r4, #0]
   19a5e:	200a      	movs	r0, #10
   19a60:	70a0      	strb	r0, [r4, #2]
   19a62:	f811 0f04 	ldrb.w	r0, [r1, #4]!
   19a66:	70e0      	strb	r0, [r4, #3]
   19a68:	7888      	ldrb	r0, [r1, #2]
   19a6a:	7120      	strb	r0, [r4, #4]
   19a6c:	8848      	ldrh	r0, [r1, #2]
   19a6e:	0a00      	lsrs	r0, r0, #8
   19a70:	7160      	strb	r0, [r4, #5]
   19a72:	7908      	ldrb	r0, [r1, #4]
   19a74:	71a0      	strb	r0, [r4, #6]
   19a76:	7948      	ldrb	r0, [r1, #5]
   19a78:	71e0      	strb	r0, [r4, #7]
   19a7a:	f8d1 0006 	ldr.w	r0, [r1, #6]
   19a7e:	60a0      	str	r0, [r4, #8]
   19a80:	8948      	ldrh	r0, [r1, #10]
   19a82:	81a0      	strh	r0, [r4, #12]
   19a84:	68c8      	ldr	r0, [r1, #12]
   19a86:	f8c4 000e 	str.w	r0, [r4, #14]
   19a8a:	8a08      	ldrh	r0, [r1, #16]
   19a8c:	8260      	strh	r0, [r4, #18]
   19a8e:	f8d1 0012 	ldr.w	r0, [r1, #18]
   19a92:	6160      	str	r0, [r4, #20]
   19a94:	8ac8      	ldrh	r0, [r1, #22]
   19a96:	8320      	strh	r0, [r4, #24]
   19a98:	7e08      	ldrb	r0, [r1, #24]
   19a9a:	76a0      	strb	r0, [r4, #26]
   19a9c:	8b08      	ldrh	r0, [r1, #24]
   19a9e:	0a00      	lsrs	r0, r0, #8
   19aa0:	76e0      	strb	r0, [r4, #27]
   19aa2:	7e88      	ldrb	r0, [r1, #26]
   19aa4:	7720      	strb	r0, [r4, #28]
   19aa6:	8b48      	ldrh	r0, [r1, #26]
   19aa8:	0a00      	lsrs	r0, r0, #8
   19aaa:	7760      	strb	r0, [r4, #29]
   19aac:	7f08      	ldrb	r0, [r1, #28]
   19aae:	77a0      	strb	r0, [r4, #30]
   19ab0:	8b88      	ldrh	r0, [r1, #28]
   19ab2:	0a00      	lsrs	r0, r0, #8
   19ab4:	77e0      	strb	r0, [r4, #31]
   19ab6:	7f88      	ldrb	r0, [r1, #30]
   19ab8:	f884 0020 	strb.w	r0, [r4, #32]
   19abc:	201f      	movs	r0, #31
   19abe:	e0d7      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19ac0:	7022      	strb	r2, [r4, #0]
   19ac2:	f884 b002 	strb.w	fp, [r4, #2]
   19ac6:	7908      	ldrb	r0, [r1, #4]
   19ac8:	70e0      	strb	r0, [r4, #3]
   19aca:	8888      	ldrh	r0, [r1, #4]
   19acc:	0a00      	lsrs	r0, r0, #8
   19ace:	7120      	strb	r0, [r4, #4]
   19ad0:	7988      	ldrb	r0, [r1, #6]
   19ad2:	e0ed      	b.n	19cb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
   19ad4:	7022      	strb	r2, [r4, #0]
   19ad6:	2004      	movs	r0, #4
   19ad8:	70a0      	strb	r0, [r4, #2]
   19ada:	7908      	ldrb	r0, [r1, #4]
   19adc:	70e0      	strb	r0, [r4, #3]
   19ade:	7988      	ldrb	r0, [r1, #6]
   19ae0:	7120      	strb	r0, [r4, #4]
   19ae2:	88c8      	ldrh	r0, [r1, #6]
   19ae4:	0a00      	lsrs	r0, r0, #8
   19ae6:	7160      	strb	r0, [r4, #5]
   19ae8:	6888      	ldr	r0, [r1, #8]
   19aea:	f8c4 0006 	str.w	r0, [r4, #6]
   19aee:	68c8      	ldr	r0, [r1, #12]
   19af0:	f8c4 000a 	str.w	r0, [r4, #10]
   19af4:	200c      	movs	r0, #12
   19af6:	e0bb      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19af8:	7022      	strb	r2, [r4, #0]
   19afa:	2003      	movs	r0, #3
   19afc:	70a0      	strb	r0, [r4, #2]
   19afe:	7908      	ldrb	r0, [r1, #4]
   19b00:	70e0      	strb	r0, [r4, #3]
   19b02:	7988      	ldrb	r0, [r1, #6]
   19b04:	7120      	strb	r0, [r4, #4]
   19b06:	88c8      	ldrh	r0, [r1, #6]
   19b08:	0a00      	lsrs	r0, r0, #8
   19b0a:	7160      	strb	r0, [r4, #5]
   19b0c:	7a08      	ldrb	r0, [r1, #8]
   19b0e:	71a0      	strb	r0, [r4, #6]
   19b10:	8908      	ldrh	r0, [r1, #8]
   19b12:	0a00      	lsrs	r0, r0, #8
   19b14:	71e0      	strb	r0, [r4, #7]
   19b16:	7a88      	ldrb	r0, [r1, #10]
   19b18:	7220      	strb	r0, [r4, #8]
   19b1a:	8948      	ldrh	r0, [r1, #10]
   19b1c:	0a00      	lsrs	r0, r0, #8
   19b1e:	7260      	strb	r0, [r4, #9]
   19b20:	7b08      	ldrb	r0, [r1, #12]
   19b22:	72a0      	strb	r0, [r4, #10]
   19b24:	8988      	ldrh	r0, [r1, #12]
   19b26:	0a00      	lsrs	r0, r0, #8
   19b28:	72e0      	strb	r0, [r4, #11]
   19b2a:	e120      	b.n	19d6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
   19b2c:	7022      	strb	r2, [r4, #0]
   19b2e:	f884 a002 	strb.w	sl, [r4, #2]
   19b32:	7908      	ldrb	r0, [r1, #4]
   19b34:	70e0      	strb	r0, [r4, #3]
   19b36:	8888      	ldrh	r0, [r1, #4]
   19b38:	0a00      	lsrs	r0, r0, #8
   19b3a:	7120      	strb	r0, [r4, #4]
   19b3c:	f8d1 0006 	ldr.w	r0, [r1, #6]
   19b40:	f8c4 0005 	str.w	r0, [r4, #5]
   19b44:	f8d1 000a 	ldr.w	r0, [r1, #10]
   19b48:	f8c4 0009 	str.w	r0, [r4, #9]
   19b4c:	89c8      	ldrh	r0, [r1, #14]
   19b4e:	e010      	b.n	19b72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
   19b50:	e0fa      	b.n	19d48 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
   19b52:	e0ce      	b.n	19cf2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
   19b54:	e0af      	b.n	19cb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
   19b56:	e0da      	b.n	19d0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
   19b58:	e0e8      	b.n	19d2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
   19b5a:	e0a1      	b.n	19ca0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
   19b5c:	e08c      	b.n	19c78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
   19b5e:	e090      	b.n	19c82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
   19b60:	e033      	b.n	19bca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
   19b62:	e02f      	b.n	19bc4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
   19b64:	e043      	b.n	19bee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
   19b66:	e03d      	b.n	19be4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
   19b68:	e021      	b.n	19bae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
   19b6a:	e015      	b.n	19b98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
   19b6c:	e008      	b.n	19b80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
   19b6e:	e004      	b.n	19b7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
   19b70:	e046      	b.n	19c00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
   19b72:	f8a4 000d 	strh.w	r0, [r4, #13]
   19b76:	200d      	movs	r0, #13
   19b78:	e07a      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19b7a:	f884 9000 	strb.w	r9, [r4]
   19b7e:	e038      	b.n	19bf2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
   19b80:	f884 a000 	strb.w	sl, [r4]
   19b84:	7908      	ldrb	r0, [r1, #4]
   19b86:	70a0      	strb	r0, [r4, #2]
   19b88:	7948      	ldrb	r0, [r1, #5]
   19b8a:	70e0      	strb	r0, [r4, #3]
   19b8c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
   19b90:	0a00      	lsrs	r0, r0, #8
   19b92:	7120      	strb	r0, [r4, #4]
   19b94:	79c8      	ldrb	r0, [r1, #7]
   19b96:	e08b      	b.n	19cb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
   19b98:	2008      	movs	r0, #8
   19b9a:	7020      	strb	r0, [r4, #0]
   19b9c:	7908      	ldrb	r0, [r1, #4]
   19b9e:	70a0      	strb	r0, [r4, #2]
   19ba0:	7988      	ldrb	r0, [r1, #6]
   19ba2:	70e0      	strb	r0, [r4, #3]
   19ba4:	88c8      	ldrh	r0, [r1, #6]
   19ba6:	0a00      	lsrs	r0, r0, #8
   19ba8:	7120      	strb	r0, [r4, #4]
   19baa:	7a08      	ldrb	r0, [r1, #8]
   19bac:	e080      	b.n	19cb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
   19bae:	2030      	movs	r0, #48	; 0x30
   19bb0:	7020      	strb	r0, [r4, #0]
   19bb2:	7908      	ldrb	r0, [r1, #4]
   19bb4:	70a0      	strb	r0, [r4, #2]
   19bb6:	7988      	ldrb	r0, [r1, #6]
   19bb8:	70e0      	strb	r0, [r4, #3]
   19bba:	88c8      	ldrh	r0, [r1, #6]
   19bbc:	0a00      	lsrs	r0, r0, #8
   19bbe:	7120      	strb	r0, [r4, #4]
   19bc0:	2003      	movs	r0, #3
   19bc2:	e055      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19bc4:	7022      	strb	r2, [r4, #0]
   19bc6:	2007      	movs	r0, #7
   19bc8:	e077      	b.n	19cba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
   19bca:	7022      	strb	r2, [r4, #0]
   19bcc:	70a7      	strb	r7, [r4, #2]
   19bce:	7908      	ldrb	r0, [r1, #4]
   19bd0:	70e0      	strb	r0, [r4, #3]
   19bd2:	7988      	ldrb	r0, [r1, #6]
   19bd4:	7120      	strb	r0, [r4, #4]
   19bd6:	88c8      	ldrh	r0, [r1, #6]
   19bd8:	0a00      	lsrs	r0, r0, #8
   19bda:	7160      	strb	r0, [r4, #5]
   19bdc:	7a08      	ldrb	r0, [r1, #8]
   19bde:	71a0      	strb	r0, [r4, #6]
   19be0:	7a48      	ldrb	r0, [r1, #9]
   19be2:	e05a      	b.n	19c9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
   19be4:	4620      	mov	r0, r4
   19be6:	1d09      	adds	r1, r1, #4
   19be8:	f7f6 ffe6 	bl	10bb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
   19bec:	e03e      	b.n	19c6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
   19bee:	2057      	movs	r0, #87	; 0x57
   19bf0:	7020      	strb	r0, [r4, #0]
   19bf2:	7908      	ldrb	r0, [r1, #4]
   19bf4:	70a0      	strb	r0, [r4, #2]
   19bf6:	8888      	ldrh	r0, [r1, #4]
   19bf8:	0a00      	lsrs	r0, r0, #8
   19bfa:	70e0      	strb	r0, [r4, #3]
   19bfc:	2002      	movs	r0, #2
   19bfe:	e037      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19c00:	7022      	strb	r2, [r4, #0]
   19c02:	220d      	movs	r2, #13
   19c04:	70a2      	strb	r2, [r4, #2]
   19c06:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   19c0a:	70e2      	strb	r2, [r4, #3]
   19c0c:	894a      	ldrh	r2, [r1, #10]
   19c0e:	80a2      	strh	r2, [r4, #4]
   19c10:	784a      	ldrb	r2, [r1, #1]
   19c12:	71a2      	strb	r2, [r4, #6]
   19c14:	f8d1 2002 	ldr.w	r2, [r1, #2]
   19c18:	f8c4 2007 	str.w	r2, [r4, #7]
   19c1c:	88ca      	ldrh	r2, [r1, #6]
   19c1e:	f8a4 200b 	strh.w	r2, [r4, #11]
   19c22:	7b0a      	ldrb	r2, [r1, #12]
   19c24:	4620      	mov	r0, r4
   19c26:	7362      	strb	r2, [r4, #13]
   19c28:	7b4a      	ldrb	r2, [r1, #13]
   19c2a:	7382      	strb	r2, [r0, #14]
   19c2c:	7b8a      	ldrb	r2, [r1, #14]
   19c2e:	73c2      	strb	r2, [r0, #15]
   19c30:	7e8a      	ldrb	r2, [r1, #26]
   19c32:	7402      	strb	r2, [r0, #16]
   19c34:	7a4a      	ldrb	r2, [r1, #9]
   19c36:	7442      	strb	r2, [r0, #17]
   19c38:	f8b1 2011 	ldrh.w	r2, [r1, #17]
   19c3c:	f8ad 2000 	strh.w	r2, [sp]
   19c40:	8242      	strh	r2, [r0, #18]
   19c42:	7cca      	ldrb	r2, [r1, #19]
   19c44:	7502      	strb	r2, [r0, #20]
   19c46:	694a      	ldr	r2, [r1, #20]
   19c48:	f8c0 2015 	str.w	r2, [r0, #21]
   19c4c:	8b0a      	ldrh	r2, [r1, #24]
   19c4e:	f8a0 2019 	strh.w	r2, [r0, #25]
   19c52:	7a0a      	ldrb	r2, [r1, #8]
   19c54:	76c2      	strb	r2, [r0, #27]
   19c56:	7a0d      	ldrb	r5, [r1, #8]
   19c58:	2de5      	cmp	r5, #229	; 0xe5
   19c5a:	d300      	bcc.n	19c5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
   19c5c:	25e5      	movs	r5, #229	; 0xe5
   19c5e:	462a      	mov	r2, r5
   19c60:	301c      	adds	r0, #28
   19c62:	311c      	adds	r1, #28
   19c64:	f7ff fca3 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19c68:	351a      	adds	r5, #26
   19c6a:	b2e8      	uxtb	r0, r5
   19c6c:	2800      	cmp	r0, #0
   19c6e:	d001      	beq.n	19c74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
   19c70:	7060      	strb	r0, [r4, #1]
   19c72:	1c80      	adds	r0, r0, #2
   19c74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c78:	7022      	strb	r2, [r4, #0]
   19c7a:	f884 9002 	strb.w	r9, [r4, #2]
   19c7e:	2001      	movs	r0, #1
   19c80:	e7f6      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19c82:	7022      	strb	r2, [r4, #0]
   19c84:	70a6      	strb	r6, [r4, #2]
   19c86:	7908      	ldrb	r0, [r1, #4]
   19c88:	70e0      	strb	r0, [r4, #3]
   19c8a:	7948      	ldrb	r0, [r1, #5]
   19c8c:	7120      	strb	r0, [r4, #4]
   19c8e:	7988      	ldrb	r0, [r1, #6]
   19c90:	7160      	strb	r0, [r4, #5]
   19c92:	88c8      	ldrh	r0, [r1, #6]
   19c94:	0a00      	lsrs	r0, r0, #8
   19c96:	71a0      	strb	r0, [r4, #6]
   19c98:	7a08      	ldrb	r0, [r1, #8]
   19c9a:	71e0      	strb	r0, [r4, #7]
   19c9c:	2006      	movs	r0, #6
   19c9e:	e7e7      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19ca0:	7025      	strb	r5, [r4, #0]
   19ca2:	20a1      	movs	r0, #161	; 0xa1
   19ca4:	70a0      	strb	r0, [r4, #2]
   19ca6:	7908      	ldrb	r0, [r1, #4]
   19ca8:	70e0      	strb	r0, [r4, #3]
   19caa:	7948      	ldrb	r0, [r1, #5]
   19cac:	7120      	strb	r0, [r4, #4]
   19cae:	2000      	movs	r0, #0
   19cb0:	7160      	strb	r0, [r4, #5]
   19cb2:	2004      	movs	r0, #4
   19cb4:	e7dc      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19cb6:	7025      	strb	r5, [r4, #0]
   19cb8:	20a2      	movs	r0, #162	; 0xa2
   19cba:	70a0      	strb	r0, [r4, #2]
   19cbc:	7908      	ldrb	r0, [r1, #4]
   19cbe:	70e0      	strb	r0, [r4, #3]
   19cc0:	8888      	ldrh	r0, [r1, #4]
   19cc2:	0a00      	lsrs	r0, r0, #8
   19cc4:	7120      	strb	r0, [r4, #4]
   19cc6:	7988      	ldrb	r0, [r1, #6]
   19cc8:	7160      	strb	r0, [r4, #5]
   19cca:	88c8      	ldrh	r0, [r1, #6]
   19ccc:	0a00      	lsrs	r0, r0, #8
   19cce:	71a0      	strb	r0, [r4, #6]
   19cd0:	7a08      	ldrb	r0, [r1, #8]
   19cd2:	71e0      	strb	r0, [r4, #7]
   19cd4:	8908      	ldrh	r0, [r1, #8]
   19cd6:	0a00      	lsrs	r0, r0, #8
   19cd8:	7220      	strb	r0, [r4, #8]
   19cda:	7a88      	ldrb	r0, [r1, #10]
   19cdc:	7260      	strb	r0, [r4, #9]
   19cde:	8948      	ldrh	r0, [r1, #10]
   19ce0:	0a00      	lsrs	r0, r0, #8
   19ce2:	72a0      	strb	r0, [r4, #10]
   19ce4:	7b08      	ldrb	r0, [r1, #12]
   19ce6:	72e0      	strb	r0, [r4, #11]
   19ce8:	8988      	ldrh	r0, [r1, #12]
   19cea:	0a00      	lsrs	r0, r0, #8
   19cec:	7320      	strb	r0, [r4, #12]
   19cee:	200b      	movs	r0, #11
   19cf0:	e7be      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19cf2:	7025      	strb	r5, [r4, #0]
   19cf4:	20a3      	movs	r0, #163	; 0xa3
   19cf6:	70a0      	strb	r0, [r4, #2]
   19cf8:	7908      	ldrb	r0, [r1, #4]
   19cfa:	70e0      	strb	r0, [r4, #3]
   19cfc:	8888      	ldrh	r0, [r1, #4]
   19cfe:	0a00      	lsrs	r0, r0, #8
   19d00:	7120      	strb	r0, [r4, #4]
   19d02:	7988      	ldrb	r0, [r1, #6]
   19d04:	7160      	strb	r0, [r4, #5]
   19d06:	79c8      	ldrb	r0, [r1, #7]
   19d08:	71a0      	strb	r0, [r4, #6]
   19d0a:	2005      	movs	r0, #5
   19d0c:	e7b0      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19d0e:	7022      	strb	r2, [r4, #0]
   19d10:	f884 e002 	strb.w	lr, [r4, #2]
   19d14:	7908      	ldrb	r0, [r1, #4]
   19d16:	70e0      	strb	r0, [r4, #3]
   19d18:	7948      	ldrb	r0, [r1, #5]
   19d1a:	7120      	strb	r0, [r4, #4]
   19d1c:	f8d1 0006 	ldr.w	r0, [r1, #6]
   19d20:	f8c4 0005 	str.w	r0, [r4, #5]
   19d24:	8948      	ldrh	r0, [r1, #10]
   19d26:	f8a4 0009 	strh.w	r0, [r4, #9]
   19d2a:	e020      	b.n	19d6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
   19d2c:	7025      	strb	r5, [r4, #0]
   19d2e:	20a4      	movs	r0, #164	; 0xa4
   19d30:	70a0      	strb	r0, [r4, #2]
   19d32:	7908      	ldrb	r0, [r1, #4]
   19d34:	70e0      	strb	r0, [r4, #3]
   19d36:	8888      	ldrh	r0, [r1, #4]
   19d38:	0a00      	lsrs	r0, r0, #8
   19d3a:	7120      	strb	r0, [r4, #4]
   19d3c:	7988      	ldrb	r0, [r1, #6]
   19d3e:	7160      	strb	r0, [r4, #5]
   19d40:	79c8      	ldrb	r0, [r1, #7]
   19d42:	71a0      	strb	r0, [r4, #6]
   19d44:	2007      	movs	r0, #7
   19d46:	e793      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
   19d48:	7025      	strb	r5, [r4, #0]
   19d4a:	2080      	movs	r0, #128	; 0x80
   19d4c:	70a0      	strb	r0, [r4, #2]
   19d4e:	888a      	ldrh	r2, [r1, #4]
   19d50:	f8a4 2003 	strh.w	r2, [r4, #3]
   19d54:	88ca      	ldrh	r2, [r1, #6]
   19d56:	f8a4 2005 	strh.w	r2, [r4, #5]
   19d5a:	7a0a      	ldrb	r2, [r1, #8]
   19d5c:	71e2      	strb	r2, [r4, #7]
   19d5e:	7a4a      	ldrb	r2, [r1, #9]
   19d60:	8122      	strh	r2, [r4, #8]
   19d62:	7a8a      	ldrb	r2, [r1, #10]
   19d64:	72a2      	strb	r2, [r4, #10]
   19d66:	7ac9      	ldrb	r1, [r1, #11]
   19d68:	f001 0101 	and.w	r1, r1, #1
   19d6c:	72e1      	strb	r1, [r4, #11]
   19d6e:	200a      	movs	r0, #10
   19d70:	e77e      	b.n	19c70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

00019d72 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
   19d72:	223e      	movs	r2, #62	; 0x3e
   19d74:	7002      	strb	r2, [r0, #0]
   19d76:	2201      	movs	r2, #1
   19d78:	7082      	strb	r2, [r0, #2]
   19d7a:	790a      	ldrb	r2, [r1, #4]
   19d7c:	70c2      	strb	r2, [r0, #3]
   19d7e:	798a      	ldrb	r2, [r1, #6]
   19d80:	7102      	strb	r2, [r0, #4]
   19d82:	88ca      	ldrh	r2, [r1, #6]
   19d84:	0a12      	lsrs	r2, r2, #8
   19d86:	7142      	strb	r2, [r0, #5]
   19d88:	7a0a      	ldrb	r2, [r1, #8]
   19d8a:	7182      	strb	r2, [r0, #6]
   19d8c:	7a4a      	ldrb	r2, [r1, #9]
   19d8e:	71c2      	strb	r2, [r0, #7]
   19d90:	f8d1 200a 	ldr.w	r2, [r1, #10]
   19d94:	6082      	str	r2, [r0, #8]
   19d96:	89ca      	ldrh	r2, [r1, #14]
   19d98:	8182      	strh	r2, [r0, #12]
   19d9a:	7c0a      	ldrb	r2, [r1, #16]
   19d9c:	7382      	strb	r2, [r0, #14]
   19d9e:	8a0a      	ldrh	r2, [r1, #16]
   19da0:	0a12      	lsrs	r2, r2, #8
   19da2:	73c2      	strb	r2, [r0, #15]
   19da4:	7c8a      	ldrb	r2, [r1, #18]
   19da6:	7402      	strb	r2, [r0, #16]
   19da8:	8a4a      	ldrh	r2, [r1, #18]
   19daa:	0a12      	lsrs	r2, r2, #8
   19dac:	7442      	strb	r2, [r0, #17]
   19dae:	7d0a      	ldrb	r2, [r1, #20]
   19db0:	7482      	strb	r2, [r0, #18]
   19db2:	8a8a      	ldrh	r2, [r1, #20]
   19db4:	0a12      	lsrs	r2, r2, #8
   19db6:	74c2      	strb	r2, [r0, #19]
   19db8:	7d89      	ldrb	r1, [r1, #22]
   19dba:	7501      	strb	r1, [r0, #20]
   19dbc:	2013      	movs	r0, #19
   19dbe:	4770      	bx	lr

00019dc0 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
   19dc0:	223e      	movs	r2, #62	; 0x3e
   19dc2:	7002      	strb	r2, [r0, #0]
   19dc4:	2201      	movs	r2, #1
   19dc6:	7082      	strb	r2, [r0, #2]
   19dc8:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   19dcc:	70c2      	strb	r2, [r0, #3]
   19dce:	788a      	ldrb	r2, [r1, #2]
   19dd0:	7102      	strb	r2, [r0, #4]
   19dd2:	884a      	ldrh	r2, [r1, #2]
   19dd4:	0a12      	lsrs	r2, r2, #8
   19dd6:	7142      	strb	r2, [r0, #5]
   19dd8:	790a      	ldrb	r2, [r1, #4]
   19dda:	7182      	strb	r2, [r0, #6]
   19ddc:	794a      	ldrb	r2, [r1, #5]
   19dde:	71c2      	strb	r2, [r0, #7]
   19de0:	f8d1 2006 	ldr.w	r2, [r1, #6]
   19de4:	6082      	str	r2, [r0, #8]
   19de6:	894a      	ldrh	r2, [r1, #10]
   19de8:	8182      	strh	r2, [r0, #12]
   19dea:	7e0a      	ldrb	r2, [r1, #24]
   19dec:	7382      	strb	r2, [r0, #14]
   19dee:	8b0a      	ldrh	r2, [r1, #24]
   19df0:	0a12      	lsrs	r2, r2, #8
   19df2:	73c2      	strb	r2, [r0, #15]
   19df4:	7e8a      	ldrb	r2, [r1, #26]
   19df6:	7402      	strb	r2, [r0, #16]
   19df8:	8b4a      	ldrh	r2, [r1, #26]
   19dfa:	0a12      	lsrs	r2, r2, #8
   19dfc:	7442      	strb	r2, [r0, #17]
   19dfe:	7f0a      	ldrb	r2, [r1, #28]
   19e00:	7482      	strb	r2, [r0, #18]
   19e02:	8b8a      	ldrh	r2, [r1, #28]
   19e04:	0a12      	lsrs	r2, r2, #8
   19e06:	74c2      	strb	r2, [r0, #19]
   19e08:	7f89      	ldrb	r1, [r1, #30]
   19e0a:	7501      	strb	r1, [r0, #20]
   19e0c:	2113      	movs	r1, #19
   19e0e:	7041      	strb	r1, [r0, #1]
   19e10:	4608      	mov	r0, r1
   19e12:	4770      	bx	lr

00019e14 <sdc_hci_data_get>:
   19e14:	b510      	push	{r4, lr}
   19e16:	b120      	cbz	r0, 19e22 <sdc_hci_data_get+0xe>
   19e18:	f7ff fd11 	bl	1983e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
   19e1c:	b120      	cbz	r0, 19e28 <sdc_hci_data_get+0x14>
   19e1e:	2000      	movs	r0, #0
   19e20:	bd10      	pop	{r4, pc}
   19e22:	f06f 0015 	mvn.w	r0, #21
   19e26:	bd10      	pop	{r4, pc}
   19e28:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19e2c:	bd10      	pop	{r4, pc}

00019e2e <sdc_hci_data_put>:
   19e2e:	b510      	push	{r4, lr}
   19e30:	f06f 0415 	mvn.w	r4, #21
   19e34:	b120      	cbz	r0, 19e40 <sdc_hci_data_put+0x12>
   19e36:	f7ff fd10 	bl	1985a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
   19e3a:	b108      	cbz	r0, 19e40 <sdc_hci_data_put+0x12>
   19e3c:	2000      	movs	r0, #0
   19e3e:	bd10      	pop	{r4, pc}
   19e40:	4620      	mov	r0, r4
   19e42:	bd10      	pop	{r4, pc}

00019e44 <sdc_hci_evt_get>:
   19e44:	b510      	push	{r4, lr}
   19e46:	b120      	cbz	r0, 19e52 <sdc_hci_evt_get+0xe>
   19e48:	f7ff fd10 	bl	1986c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
   19e4c:	b120      	cbz	r0, 19e58 <sdc_hci_evt_get+0x14>
   19e4e:	2000      	movs	r0, #0
   19e50:	bd10      	pop	{r4, pc}
   19e52:	f06f 0015 	mvn.w	r0, #21
   19e56:	bd10      	pop	{r4, pc}
   19e58:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19e5c:	bd10      	pop	{r4, pc}

00019e5e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
   19e5e:	f002 b98e 	b.w	1c17e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

00019e62 <sdc_hci_cmd_cb_read_transmit_power_level>:
   19e62:	f002 b9cd 	b.w	1c200 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

00019e66 <sdc_hci_cmd_cb_set_event_mask>:
   19e66:	b510      	push	{r4, lr}
   19e68:	f7f6 ff04 	bl	10c74 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   19e6c:	2000      	movs	r0, #0
   19e6e:	bd10      	pop	{r4, pc}

00019e70 <sdc_hci_cmd_cb_set_event_mask_page_2>:
   19e70:	b510      	push	{r4, lr}
   19e72:	f7f6 ff0d 	bl	10c90 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
   19e76:	2000      	movs	r0, #0
   19e78:	bd10      	pop	{r4, pc}

00019e7a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
   19e7a:	f002 b9dd 	b.w	1c238 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

00019e7e <sdc_hci_cmd_vs_conn_event_extend>:
   19e7e:	b508      	push	{r3, lr}
   19e80:	7800      	ldrb	r0, [r0, #0]
   19e82:	f88d 0000 	strb.w	r0, [sp]
   19e86:	4668      	mov	r0, sp
   19e88:	f002 f94b 	bl	1c122 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   19e8c:	bd08      	pop	{r3, pc}

00019e8e <sdc_hci_cmd_vs_conn_update>:
   19e8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   19e90:	2100      	movs	r1, #0
   19e92:	9100      	str	r1, [sp, #0]
   19e94:	9101      	str	r1, [sp, #4]
   19e96:	9102      	str	r1, [sp, #8]
   19e98:	9103      	str	r1, [sp, #12]
   19e9a:	f8d0 1002 	ldr.w	r1, [r0, #2]
   19e9e:	f641 524c 	movw	r2, #7500	; 0x1d4c
   19ea2:	4291      	cmp	r1, r2
   19ea4:	d304      	bcc.n	19eb0 <sdc_hci_cmd_vs_conn_update+0x22>
   19ea6:	f240 42e2 	movw	r2, #1250	; 0x4e2
   19eaa:	fbb1 f1f2 	udiv	r1, r1, r2
   19eae:	e005      	b.n	19ebc <sdc_hci_cmd_vs_conn_update+0x2e>
   19eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19eb4:	fbb1 f1f2 	udiv	r1, r1, r2
   19eb8:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
   19ebc:	8802      	ldrh	r2, [r0, #0]
   19ebe:	b289      	uxth	r1, r1
   19ec0:	f8ad 2000 	strh.w	r2, [sp]
   19ec4:	f8ad 1002 	strh.w	r1, [sp, #2]
   19ec8:	f8ad 1004 	strh.w	r1, [sp, #4]
   19ecc:	88c1      	ldrh	r1, [r0, #6]
   19ece:	f8ad 1006 	strh.w	r1, [sp, #6]
   19ed2:	8900      	ldrh	r0, [r0, #8]
   19ed4:	f8ad 0008 	strh.w	r0, [sp, #8]
   19ed8:	4668      	mov	r0, sp
   19eda:	f001 fed9 	bl	1bc90 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
   19ede:	b004      	add	sp, #16
   19ee0:	bd10      	pop	{r4, pc}

00019ee2 <sdc_hci_cmd_vs_event_length_set>:
   19ee2:	f7fd bc17 	b.w	17714 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00019ee6 <sdc_hci_cmd_vs_llpm_mode_set>:
   19ee6:	2001      	movs	r0, #1
   19ee8:	4770      	bx	lr

00019eea <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   19eea:	7800      	ldrb	r0, [r0, #0]
   19eec:	b100      	cbz	r0, 19ef0 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   19eee:	2001      	movs	r0, #1
   19ef0:	f002 b8ef 	b.w	1c0d2 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00019ef4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
   19ef4:	b570      	push	{r4, r5, r6, lr}
   19ef6:	4605      	mov	r5, r0
   19ef8:	2210      	movs	r2, #16
   19efa:	2100      	movs	r1, #0
   19efc:	f7ff fbd1 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   19f00:	2210      	movs	r2, #16
   19f02:	2100      	movs	r1, #0
   19f04:	f105 0010 	add.w	r0, r5, #16
   19f08:	f7ff fbcb 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   19f0c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   19f10:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   19f14:	1c40      	adds	r0, r0, #1
   19f16:	d10b      	bne.n	19f30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   19f18:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   19f1c:	1c40      	adds	r0, r0, #1
   19f1e:	d107      	bne.n	19f30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   19f20:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   19f24:	1c40      	adds	r0, r0, #1
   19f26:	d103      	bne.n	19f30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   19f28:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   19f2c:	1c40      	adds	r0, r0, #1
   19f2e:	d00b      	beq.n	19f48 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
   19f30:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   19f34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   19f38:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   19f3c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   19f40:	612a      	str	r2, [r5, #16]
   19f42:	6168      	str	r0, [r5, #20]
   19f44:	61a9      	str	r1, [r5, #24]
   19f46:	61eb      	str	r3, [r5, #28]
   19f48:	2000      	movs	r0, #0
   19f4a:	f7f7 fb8f 	bl	1166c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   19f4e:	b918      	cbnz	r0, 19f58 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
   19f50:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   19f54:	07c0      	lsls	r0, r0, #31
   19f56:	d118      	bne.n	19f8a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   19f58:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   19f5c:	1c40      	adds	r0, r0, #1
   19f5e:	d10b      	bne.n	19f78 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19f60:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   19f64:	1c40      	adds	r0, r0, #1
   19f66:	d107      	bne.n	19f78 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19f68:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   19f6c:	1c40      	adds	r0, r0, #1
   19f6e:	d103      	bne.n	19f78 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19f70:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   19f74:	1c40      	adds	r0, r0, #1
   19f76:	d008      	beq.n	19f8a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   19f78:	f854 0f90 	ldr.w	r0, [r4, #144]!
   19f7c:	6861      	ldr	r1, [r4, #4]
   19f7e:	68a2      	ldr	r2, [r4, #8]
   19f80:	68e3      	ldr	r3, [r4, #12]
   19f82:	6028      	str	r0, [r5, #0]
   19f84:	6069      	str	r1, [r5, #4]
   19f86:	60aa      	str	r2, [r5, #8]
   19f88:	60eb      	str	r3, [r5, #12]
   19f8a:	2000      	movs	r0, #0
   19f8c:	bd70      	pop	{r4, r5, r6, pc}

00019f8e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   19f8e:	b538      	push	{r3, r4, r5, lr}
   19f90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   19f94:	4604      	mov	r4, r0
   19f96:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   19f9a:	1c40      	adds	r0, r0, #1
   19f9c:	d105      	bne.n	19faa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
   19f9e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   19fa2:	43c0      	mvns	r0, r0
   19fa4:	0400      	lsls	r0, r0, #16
   19fa6:	0c00      	lsrs	r0, r0, #16
   19fa8:	d03e      	beq.n	1a028 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   19faa:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   19fae:	07c0      	lsls	r0, r0, #31
   19fb0:	d03a      	beq.n	1a028 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   19fb2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   19fb6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
   19fba:	f8ad 1000 	strh.w	r1, [sp]
   19fbe:	f8c4 0001 	str.w	r0, [r4, #1]
   19fc2:	f8bd 0000 	ldrh.w	r0, [sp]
   19fc6:	f8a4 0005 	strh.w	r0, [r4, #5]
   19fca:	79a0      	ldrb	r0, [r4, #6]
   19fcc:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   19fd0:	71a0      	strb	r0, [r4, #6]
   19fd2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   19fd6:	1c40      	adds	r0, r0, #1
   19fd8:	d00f      	beq.n	19ffa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   19fda:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   19fde:	1c40      	adds	r0, r0, #1
   19fe0:	d00b      	beq.n	19ffa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   19fe2:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   19fe6:	1c40      	adds	r0, r0, #1
   19fe8:	d007      	beq.n	19ffa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   19fea:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   19fee:	1c40      	adds	r0, r0, #1
   19ff0:	d003      	beq.n	19ffa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   19ff2:	2000      	movs	r0, #0
   19ff4:	f7f7 fb3a 	bl	1166c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   19ff8:	b140      	cbz	r0, 1a00c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
   19ffa:	2210      	movs	r2, #16
   19ffc:	2100      	movs	r1, #0
   19ffe:	1de0      	adds	r0, r4, #7
   1a000:	f7ff fb4f 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1a004:	2001      	movs	r0, #1
   1a006:	7020      	strb	r0, [r4, #0]
   1a008:	2000      	movs	r0, #0
   1a00a:	bd38      	pop	{r3, r4, r5, pc}
   1a00c:	f855 2f90 	ldr.w	r2, [r5, #144]!
   1a010:	6869      	ldr	r1, [r5, #4]
   1a012:	68a8      	ldr	r0, [r5, #8]
   1a014:	68eb      	ldr	r3, [r5, #12]
   1a016:	f8c4 2007 	str.w	r2, [r4, #7]
   1a01a:	f8c4 100b 	str.w	r1, [r4, #11]
   1a01e:	f8c4 000f 	str.w	r0, [r4, #15]
   1a022:	f8c4 3013 	str.w	r3, [r4, #19]
   1a026:	e7ed      	b.n	1a004 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
   1a028:	2000      	movs	r0, #0
   1a02a:	e7ec      	b.n	1a006 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0001a02c <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   1a02c:	f002 b86b 	b.w	1c106 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0001a030 <sdc_hci_cmd_ip_read_bd_addr>:
   1a030:	f002 b8b6 	b.w	1c1a0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0001a034 <sdc_hci_cmd_ip_read_local_version_information>:
   1a034:	f7fd bbba 	b.w	177ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0001a038 <sdc_hci_cmd_le_add_device_to_resolving_list>:
   1a038:	f001 bde1 	b.w	1bbfe <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0001a03c <sdc_hci_cmd_le_add_device_to_white_list>:
   1a03c:	f001 bdfa 	b.w	1bc34 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0001a040 <sdc_hci_cmd_le_clear_resolving_list>:
   1a040:	f001 be0f 	b.w	1bc62 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0001a044 <sdc_hci_cmd_le_clear_white_list>:
   1a044:	f001 be1a 	b.w	1bc7c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0001a048 <sdc_hci_cmd_le_conn_update>:
   1a048:	f001 be22 	b.w	1bc90 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0001a04c <sdc_hci_cmd_le_create_conn>:
   1a04c:	f7fd b904 	b.w	17258 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0001a050 <sdc_hci_cmd_le_create_conn_cancel>:
   1a050:	f001 be60 	b.w	1bd14 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0001a054 <sdc_hci_cmd_le_enable_encryption>:
   1a054:	f001 bff4 	b.w	1c040 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0001a058 <sdc_hci_cmd_le_encrypt>:
   1a058:	f001 be84 	b.w	1bd64 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0001a05c <sdc_hci_cmd_le_rand>:
   1a05c:	f001 be8b 	b.w	1bd76 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0001a060 <sdc_hci_cmd_le_read_buffer_size>:
   1a060:	f7fd b954 	b.w	1730c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0001a064 <sdc_hci_cmd_le_read_channel_map>:
   1a064:	f7fd b95c 	b.w	17320 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0001a068 <sdc_hci_cmd_le_read_max_data_length>:
   1a068:	f001 be8b 	b.w	1bd82 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0001a06c <sdc_hci_cmd_le_read_phy>:
   1a06c:	f001 be99 	b.w	1bda2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0001a070 <sdc_hci_cmd_le_read_remote_features>:
   1a070:	f7fd b980 	b.w	17374 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0001a074 <sdc_hci_cmd_le_read_resolving_list_size>:
   1a074:	f001 bec0 	b.w	1bdf8 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0001a078 <sdc_hci_cmd_le_read_suggested_default_data_length>:
   1a078:	f7fd b9a0 	b.w	173bc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0001a07c <sdc_hci_cmd_le_read_transmit_power>:
   1a07c:	f001 bec0 	b.w	1be00 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0001a080 <sdc_hci_cmd_le_read_white_list_size>:
   1a080:	f001 bec7 	b.w	1be12 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0001a084 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
   1a084:	f001 bec9 	b.w	1be1a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0001a088 <sdc_hci_cmd_le_remove_device_from_white_list>:
   1a088:	f001 bee0 	b.w	1be4c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0001a08c <sdc_hci_cmd_le_set_address_resolution_enable>:
   1a08c:	f001 bef3 	b.w	1be76 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0001a090 <sdc_hci_cmd_le_set_data_length>:
   1a090:	f001 beff 	b.w	1be92 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0001a094 <sdc_hci_cmd_le_set_default_phy>:
   1a094:	f7fd b9a2 	b.w	173dc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0001a098 <sdc_hci_cmd_le_set_event_mask>:
   1a098:	b510      	push	{r4, lr}
   1a09a:	f7f6 fde5 	bl	10c68 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   1a09e:	2000      	movs	r0, #0
   1a0a0:	bd10      	pop	{r4, pc}

0001a0a2 <sdc_hci_cmd_le_set_host_channel_classification>:
   1a0a2:	f001 bf1d 	b.w	1bee0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0001a0a6 <sdc_hci_cmd_le_set_phy>:
   1a0a6:	f001 bf3b 	b.w	1bf20 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0001a0aa <sdc_hci_cmd_le_set_privacy_mode>:
   1a0aa:	f001 bf59 	b.w	1bf60 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0001a0ae <sdc_hci_cmd_le_set_random_address>:
   1a0ae:	f001 bf6d 	b.w	1bf8c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0001a0b2 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
   1a0b2:	f001 bf79 	b.w	1bfa8 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0001a0b6 <sdc_hci_cmd_le_set_scan_enable>:
   1a0b6:	f001 bf80 	b.w	1bfba <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0001a0ba <sdc_hci_cmd_le_set_scan_params>:
   1a0ba:	f001 bf94 	b.w	1bfe6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0001a0be <sdc_hci_cmd_le_write_suggested_default_data_length>:
   1a0be:	f001 bff1 	b.w	1c0a4 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0001a0c2 <sdc_hci_cmd_lc_disconnect>:
   1a0c2:	f001 bd4b 	b.w	1bb5c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0001a0c6 <sdc_hci_cmd_lc_read_remote_version_information>:
   1a0c6:	f002 b877 	b.w	1c1b8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
   1a0ca:	b570      	push	{r4, r5, r6, lr}
   1a0cc:	880b      	ldrh	r3, [r1, #0]
   1a0ce:	7f04      	ldrb	r4, [r0, #28]
   1a0d0:	f100 0524 	add.w	r5, r0, #36	; 0x24
   1a0d4:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
   1a0d8:	8802      	ldrh	r2, [r0, #0]
   1a0da:	4435      	add	r5, r6
   1a0dc:	1da4      	adds	r4, r4, #6
   1a0de:	882d      	ldrh	r5, [r5, #0]
   1a0e0:	4422      	add	r2, r4
   1a0e2:	b292      	uxth	r2, r2
   1a0e4:	4425      	add	r5, r4
   1a0e6:	1e54      	subs	r4, r2, #1
   1a0e8:	442c      	add	r4, r5
   1a0ea:	fb94 f4f2 	sdiv	r4, r4, r2
   1a0ee:	fb02 6204 	mla	r2, r2, r4, r6
   1a0f2:	8840      	ldrh	r0, [r0, #2]
   1a0f4:	b292      	uxth	r2, r2
   1a0f6:	4290      	cmp	r0, r2
   1a0f8:	d903      	bls.n	1a102 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
   1a0fa:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
   1a0fe:	4310      	orrs	r0, r2
   1a100:	e002      	b.n	1a108 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
   1a102:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1a106:	4398      	bics	r0, r3
   1a108:	8008      	strh	r0, [r1, #0]
   1a10a:	bd70      	pop	{r4, r5, r6, pc}
   1a10c:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   1a110:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   1a114:	429a      	cmp	r2, r3
   1a116:	d107      	bne.n	1a128 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
   1a118:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   1a11c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   1a120:	4288      	cmp	r0, r1
   1a122:	d001      	beq.n	1a128 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
   1a124:	2001      	movs	r0, #1
   1a126:	4770      	bx	lr
   1a128:	2000      	movs	r0, #0
   1a12a:	4770      	bx	lr

0001a12c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
   1a12c:	b570      	push	{r4, r5, r6, lr}
   1a12e:	7f00      	ldrb	r0, [r0, #28]
   1a130:	461c      	mov	r4, r3
   1a132:	1d80      	adds	r0, r0, #6
   1a134:	4408      	add	r0, r1
   1a136:	4613      	mov	r3, r2
   1a138:	8809      	ldrh	r1, [r1, #0]
   1a13a:	9a04      	ldr	r2, [sp, #16]
   1a13c:	1cc9      	adds	r1, r1, #3
   1a13e:	b289      	uxth	r1, r1
   1a140:	1915      	adds	r5, r2, r4
   1a142:	1ec0      	subs	r0, r0, #3
   1a144:	428d      	cmp	r5, r1
   1a146:	d805      	bhi.n	1a154 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
   1a148:	1881      	adds	r1, r0, r2
   1a14a:	4622      	mov	r2, r4
   1a14c:	4618      	mov	r0, r3
   1a14e:	f7ff fa2e 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a152:	e000      	b.n	1a156 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
   1a154:	2400      	movs	r4, #0
   1a156:	4620      	mov	r0, r4
   1a158:	bd70      	pop	{r4, r5, r6, pc}

0001a15a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
   1a15a:	b570      	push	{r4, r5, r6, lr}
   1a15c:	7f00      	ldrb	r0, [r0, #28]
   1a15e:	461c      	mov	r4, r3
   1a160:	1d80      	adds	r0, r0, #6
   1a162:	4408      	add	r0, r1
   1a164:	4613      	mov	r3, r2
   1a166:	8809      	ldrh	r1, [r1, #0]
   1a168:	9a04      	ldr	r2, [sp, #16]
   1a16a:	1cc9      	adds	r1, r1, #3
   1a16c:	b289      	uxth	r1, r1
   1a16e:	1915      	adds	r5, r2, r4
   1a170:	1ec0      	subs	r0, r0, #3
   1a172:	428d      	cmp	r5, r1
   1a174:	d805      	bhi.n	1a182 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
   1a176:	4410      	add	r0, r2
   1a178:	4622      	mov	r2, r4
   1a17a:	4619      	mov	r1, r3
   1a17c:	f7ff fa17 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a180:	e000      	b.n	1a184 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
   1a182:	2400      	movs	r4, #0
   1a184:	4620      	mov	r0, r4
   1a186:	bd70      	pop	{r4, r5, r6, pc}

0001a188 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   1a188:	8881      	ldrh	r1, [r0, #4]
   1a18a:	88c0      	ldrh	r0, [r0, #6]
   1a18c:	4288      	cmp	r0, r1
   1a18e:	d101      	bne.n	1a194 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
   1a190:	2001      	movs	r0, #1
   1a192:	4770      	bx	lr
   1a194:	2000      	movs	r0, #0
   1a196:	4770      	bx	lr

0001a198 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
   1a198:	8881      	ldrh	r1, [r0, #4]
   1a19a:	8900      	ldrh	r0, [r0, #8]
   1a19c:	4288      	cmp	r0, r1
   1a19e:	d101      	bne.n	1a1a4 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
   1a1a0:	2001      	movs	r0, #1
   1a1a2:	4770      	bx	lr
   1a1a4:	2000      	movs	r0, #0
   1a1a6:	4770      	bx	lr

0001a1a8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   1a1a8:	b570      	push	{r4, r5, r6, lr}
   1a1aa:	4604      	mov	r4, r0
   1a1ac:	f100 0124 	add.w	r1, r0, #36	; 0x24
   1a1b0:	8880      	ldrh	r0, [r0, #4]
   1a1b2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   1a1b6:	4401      	add	r1, r0
   1a1b8:	8a20      	ldrh	r0, [r4, #16]
   1a1ba:	2800      	cmp	r0, #0
   1a1bc:	d01a      	beq.n	1a1f4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
   1a1be:	89a2      	ldrh	r2, [r4, #12]
   1a1c0:	2500      	movs	r5, #0
   1a1c2:	4410      	add	r0, r2
   1a1c4:	b280      	uxth	r0, r0
   1a1c6:	81a0      	strh	r0, [r4, #12]
   1a1c8:	880a      	ldrh	r2, [r1, #0]
   1a1ca:	4290      	cmp	r0, r2
   1a1cc:	d905      	bls.n	1a1da <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
   1a1ce:	f240 1163 	movw	r1, #355	; 0x163
   1a1d2:	f04f 0014 	mov.w	r0, #20
   1a1d6:	f7f6 fbcb 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a1da:	d109      	bne.n	1a1f0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
   1a1dc:	69a0      	ldr	r0, [r4, #24]
   1a1de:	b108      	cbz	r0, 1a1e4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
   1a1e0:	7f40      	ldrb	r0, [r0, #29]
   1a1e2:	7088      	strb	r0, [r1, #2]
   1a1e4:	f104 0104 	add.w	r1, r4, #4
   1a1e8:	4620      	mov	r0, r4
   1a1ea:	f7ff ff6e 	bl	1a0ca <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1a1ee:	81a5      	strh	r5, [r4, #12]
   1a1f0:	8225      	strh	r5, [r4, #16]
   1a1f2:	2001      	movs	r0, #1
   1a1f4:	bd70      	pop	{r4, r5, r6, pc}

0001a1f6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   1a1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1f8:	4604      	mov	r4, r0
   1a1fa:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1a1fe:	88c0      	ldrh	r0, [r0, #6]
   1a200:	460e      	mov	r6, r1
   1a202:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   1a206:	8a60      	ldrh	r0, [r4, #18]
   1a208:	19d9      	adds	r1, r3, r7
   1a20a:	b108      	cbz	r0, 1a210 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
   1a20c:	42b0      	cmp	r0, r6
   1a20e:	d201      	bcs.n	1a214 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
   1a210:	2000      	movs	r0, #0
   1a212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a214:	89e0      	ldrh	r0, [r4, #14]
   1a216:	2500      	movs	r5, #0
   1a218:	b140      	cbz	r0, 1a22c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
   1a21a:	f8b1 c000 	ldrh.w	ip, [r1]
   1a21e:	4560      	cmp	r0, ip
   1a220:	d008      	beq.n	1a234 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
   1a222:	f240 214b 	movw	r1, #587	; 0x24b
   1a226:	2014      	movs	r0, #20
   1a228:	f7f6 fba2 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a22c:	7f60      	ldrb	r0, [r4, #29]
   1a22e:	7088      	strb	r0, [r1, #2]
   1a230:	800d      	strh	r5, [r1, #0]
   1a232:	e00e      	b.n	1a252 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   1a234:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1a238:	4418      	add	r0, r3
   1a23a:	f10c 0c06 	add.w	ip, ip, #6
   1a23e:	44bc      	add	ip, r7
   1a240:	4460      	add	r0, ip
   1a242:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   1a246:	f820 cc03 	strh.w	ip, [r0, #-3]
   1a24a:	f894 c020 	ldrb.w	ip, [r4, #32]
   1a24e:	f800 cc01 	strb.w	ip, [r0, #-1]
   1a252:	89e0      	ldrh	r0, [r4, #14]
   1a254:	4430      	add	r0, r6
   1a256:	81e0      	strh	r0, [r4, #14]
   1a258:	8808      	ldrh	r0, [r1, #0]
   1a25a:	4430      	add	r0, r6
   1a25c:	8008      	strh	r0, [r1, #0]
   1a25e:	b19a      	cbz	r2, 1a288 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
   1a260:	1da1      	adds	r1, r4, #6
   1a262:	4620      	mov	r0, r4
   1a264:	f7ff ff31 	bl	1a0ca <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1a268:	81e5      	strh	r5, [r4, #14]
   1a26a:	7f60      	ldrb	r0, [r4, #29]
   1a26c:	1c40      	adds	r0, r0, #1
   1a26e:	7760      	strb	r0, [r4, #29]
   1a270:	7da0      	ldrb	r0, [r4, #22]
   1a272:	f88d 0000 	strb.w	r0, [sp]
   1a276:	9800      	ldr	r0, [sp, #0]
   1a278:	9000      	str	r0, [sp, #0]
   1a27a:	f89d 0000 	ldrb.w	r0, [sp]
   1a27e:	b178      	cbz	r0, 1a2a0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   1a280:	88e0      	ldrh	r0, [r4, #6]
   1a282:	82a0      	strh	r0, [r4, #20]
   1a284:	75a5      	strb	r5, [r4, #22]
   1a286:	e00b      	b.n	1a2a0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   1a288:	7f20      	ldrb	r0, [r4, #28]
   1a28a:	89e1      	ldrh	r1, [r4, #14]
   1a28c:	1d80      	adds	r0, r0, #6
   1a28e:	4438      	add	r0, r7
   1a290:	4419      	add	r1, r3
   1a292:	4408      	add	r0, r1
   1a294:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   1a298:	83e1      	strh	r1, [r4, #30]
   1a29a:	7880      	ldrb	r0, [r0, #2]
   1a29c:	f884 0020 	strb.w	r0, [r4, #32]
   1a2a0:	8265      	strh	r5, [r4, #18]
   1a2a2:	2001      	movs	r0, #1
   1a2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a2a6 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
   1a2a6:	1cc0      	adds	r0, r0, #3
   1a2a8:	4770      	bx	lr

0001a2aa <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
   1a2aa:	b510      	push	{r4, lr}
   1a2ac:	88c2      	ldrh	r2, [r0, #6]
   1a2ae:	8943      	ldrh	r3, [r0, #10]
   1a2b0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1a2b4:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
   1a2b8:	1a61      	subs	r1, r4, r1
   1a2ba:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
   1a2be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   1a2c2:	429a      	cmp	r2, r3
   1a2c4:	d101      	bne.n	1a2ca <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
   1a2c6:	8842      	ldrh	r2, [r0, #2]
   1a2c8:	4411      	add	r1, r2
   1a2ca:	7f02      	ldrb	r2, [r0, #28]
   1a2cc:	8800      	ldrh	r0, [r0, #0]
   1a2ce:	4410      	add	r0, r2
   1a2d0:	1d80      	adds	r0, r0, #6
   1a2d2:	b280      	uxth	r0, r0
   1a2d4:	fb91 f0f0 	sdiv	r0, r1, r0
   1a2d8:	b280      	uxth	r0, r0
   1a2da:	bd10      	pop	{r4, pc}

0001a2dc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   1a2dc:	b510      	push	{r4, lr}
   1a2de:	4604      	mov	r4, r0
   1a2e0:	88c0      	ldrh	r0, [r0, #6]
   1a2e2:	88a1      	ldrh	r1, [r4, #4]
   1a2e4:	4281      	cmp	r1, r0
   1a2e6:	d007      	beq.n	1a2f8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   1a2e8:	89a0      	ldrh	r0, [r4, #12]
   1a2ea:	b928      	cbnz	r0, 1a2f8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   1a2ec:	8a20      	ldrh	r0, [r4, #16]
   1a2ee:	b918      	cbnz	r0, 1a2f8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   1a2f0:	88a0      	ldrh	r0, [r4, #4]
   1a2f2:	8aa1      	ldrh	r1, [r4, #20]
   1a2f4:	4288      	cmp	r0, r1
   1a2f6:	d101      	bne.n	1a2fc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
   1a2f8:	2000      	movs	r0, #0
   1a2fa:	bd10      	pop	{r4, pc}
   1a2fc:	1d21      	adds	r1, r4, #4
   1a2fe:	4620      	mov	r0, r4
   1a300:	f7ff fee3 	bl	1a0ca <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1a304:	2000      	movs	r0, #0
   1a306:	8220      	strh	r0, [r4, #16]
   1a308:	2001      	movs	r0, #1
   1a30a:	bd10      	pop	{r4, pc}

0001a30c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
   1a30c:	b510      	push	{r4, lr}
   1a30e:	4604      	mov	r4, r0
   1a310:	f100 0224 	add.w	r2, r0, #36	; 0x24
   1a314:	88c0      	ldrh	r0, [r0, #6]
   1a316:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   1a31a:	4402      	add	r2, r0
   1a31c:	8820      	ldrh	r0, [r4, #0]
   1a31e:	2845      	cmp	r0, #69	; 0x45
   1a320:	d200      	bcs.n	1a324 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
   1a322:	2045      	movs	r0, #69	; 0x45
   1a324:	4288      	cmp	r0, r1
   1a326:	d204      	bcs.n	1a332 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
   1a328:	f240 1119 	movw	r1, #281	; 0x119
   1a32c:	2014      	movs	r0, #20
   1a32e:	f7f6 fb1f 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a332:	7de0      	ldrb	r0, [r4, #23]
   1a334:	2800      	cmp	r0, #0
   1a336:	d003      	beq.n	1a340 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
   1a338:	8810      	ldrh	r0, [r2, #0]
   1a33a:	4288      	cmp	r0, r1
   1a33c:	d201      	bcs.n	1a342 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
   1a33e:	2000      	movs	r0, #0
   1a340:	bd10      	pop	{r4, pc}
   1a342:	8011      	strh	r1, [r2, #0]
   1a344:	1da1      	adds	r1, r4, #6
   1a346:	4620      	mov	r0, r4
   1a348:	f7ff febf 	bl	1a0ca <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1a34c:	2000      	movs	r0, #0
   1a34e:	75e0      	strb	r0, [r4, #23]
   1a350:	2001      	movs	r0, #1
   1a352:	bd10      	pop	{r4, pc}

0001a354 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
   1a354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a358:	8941      	ldrh	r1, [r0, #10]
   1a35a:	8886      	ldrh	r6, [r0, #4]
   1a35c:	4604      	mov	r4, r0
   1a35e:	2500      	movs	r5, #0
   1a360:	f100 070a 	add.w	r7, r0, #10
   1a364:	e006      	b.n	1a374 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
   1a366:	4639      	mov	r1, r7
   1a368:	4620      	mov	r0, r4
   1a36a:	f7ff feae 	bl	1a0ca <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1a36e:	1c6d      	adds	r5, r5, #1
   1a370:	8961      	ldrh	r1, [r4, #10]
   1a372:	b2ad      	uxth	r5, r5
   1a374:	42b1      	cmp	r1, r6
   1a376:	d1f6      	bne.n	1a366 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
   1a378:	4628      	mov	r0, r5
   1a37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a37e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   1a37e:	b530      	push	{r4, r5, lr}
   1a380:	88c4      	ldrh	r4, [r0, #6]
   1a382:	8881      	ldrh	r1, [r0, #4]
   1a384:	f100 0224 	add.w	r2, r0, #36	; 0x24
   1a388:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   1a38c:	4413      	add	r3, r2
   1a38e:	8882      	ldrh	r2, [r0, #4]
   1a390:	8a85      	ldrh	r5, [r0, #20]
   1a392:	42aa      	cmp	r2, r5
   1a394:	d012      	beq.n	1a3bc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   1a396:	42a1      	cmp	r1, r4
   1a398:	d010      	beq.n	1a3bc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   1a39a:	8981      	ldrh	r1, [r0, #12]
   1a39c:	b971      	cbnz	r1, 1a3bc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   1a39e:	6982      	ldr	r2, [r0, #24]
   1a3a0:	b172      	cbz	r2, 1a3c0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   1a3a2:	4610      	mov	r0, r2
   1a3a4:	f7ff fef8 	bl	1a198 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
   1a3a8:	b950      	cbnz	r0, 1a3c0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   1a3aa:	8910      	ldrh	r0, [r2, #8]
   1a3ac:	3224      	adds	r2, #36	; 0x24
   1a3ae:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   1a3b2:	4410      	add	r0, r2
   1a3b4:	7899      	ldrb	r1, [r3, #2]
   1a3b6:	7880      	ldrb	r0, [r0, #2]
   1a3b8:	4288      	cmp	r0, r1
   1a3ba:	d101      	bne.n	1a3c0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   1a3bc:	2000      	movs	r0, #0
   1a3be:	bd30      	pop	{r4, r5, pc}
   1a3c0:	4618      	mov	r0, r3
   1a3c2:	bd30      	pop	{r4, r5, pc}

0001a3c4 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
   1a3c4:	8803      	ldrh	r3, [r0, #0]
   1a3c6:	2b45      	cmp	r3, #69	; 0x45
   1a3c8:	d200      	bcs.n	1a3cc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
   1a3ca:	2345      	movs	r3, #69	; 0x45
   1a3cc:	8013      	strh	r3, [r2, #0]
   1a3ce:	88c2      	ldrh	r2, [r0, #6]
   1a3d0:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   1a3d4:	f100 0224 	add.w	r2, r0, #36	; 0x24
   1a3d8:	441a      	add	r2, r3
   1a3da:	600a      	str	r2, [r1, #0]
   1a3dc:	89c0      	ldrh	r0, [r0, #14]
   1a3de:	4770      	bx	lr

0001a3e0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   1a3e0:	7f00      	ldrb	r0, [r0, #28]
   1a3e2:	1d80      	adds	r0, r0, #6
   1a3e4:	4408      	add	r0, r1
   1a3e6:	1ec0      	subs	r0, r0, #3
   1a3e8:	6010      	str	r0, [r2, #0]
   1a3ea:	8808      	ldrh	r0, [r1, #0]
   1a3ec:	4770      	bx	lr

0001a3ee <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
   1a3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3f2:	460e      	mov	r6, r1
   1a3f4:	88c1      	ldrh	r1, [r0, #6]
   1a3f6:	8902      	ldrh	r2, [r0, #8]
   1a3f8:	4604      	mov	r4, r0
   1a3fa:	f100 0824 	add.w	r8, r0, #36	; 0x24
   1a3fe:	8800      	ldrh	r0, [r0, #0]
   1a400:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
   1a404:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
   1a408:	2845      	cmp	r0, #69	; 0x45
   1a40a:	d200      	bcs.n	1a40e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
   1a40c:	2045      	movs	r0, #69	; 0x45
   1a40e:	42b0      	cmp	r0, r6
   1a410:	d203      	bcs.n	1a41a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
   1a412:	21db      	movs	r1, #219	; 0xdb
   1a414:	2014      	movs	r0, #20
   1a416:	f7f6 faab 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a41a:	4610      	mov	r0, r2
   1a41c:	f7ff fe76 	bl	1a10c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   1a420:	b110      	cbz	r0, 1a428 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
   1a422:	2000      	movs	r0, #0
   1a424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a428:	42af      	cmp	r7, r5
   1a42a:	d908      	bls.n	1a43e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
   1a42c:	7f21      	ldrb	r1, [r4, #28]
   1a42e:	1b78      	subs	r0, r7, r5
   1a430:	1a40      	subs	r0, r0, r1
   1a432:	1f80      	subs	r0, r0, #6
   1a434:	4286      	cmp	r6, r0
   1a436:	dd02      	ble.n	1a43e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
   1a438:	2000      	movs	r0, #0
   1a43a:	75e0      	strb	r0, [r4, #23]
   1a43c:	e7f1      	b.n	1a422 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
   1a43e:	eb08 0005 	add.w	r0, r8, r5
   1a442:	2101      	movs	r1, #1
   1a444:	8006      	strh	r6, [r0, #0]
   1a446:	75e1      	strb	r1, [r4, #23]
   1a448:	e7ec      	b.n	1a424 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0001a44a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   1a44a:	b538      	push	{r3, r4, r5, lr}
   1a44c:	88c4      	ldrh	r4, [r0, #6]
   1a44e:	8881      	ldrh	r1, [r0, #4]
   1a450:	f100 0224 	add.w	r2, r0, #36	; 0x24
   1a454:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   1a458:	441a      	add	r2, r3
   1a45a:	42a1      	cmp	r1, r4
   1a45c:	d010      	beq.n	1a480 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   1a45e:	8983      	ldrh	r3, [r0, #12]
   1a460:	8a05      	ldrh	r5, [r0, #16]
   1a462:	8812      	ldrh	r2, [r2, #0]
   1a464:	442b      	add	r3, r5
   1a466:	4293      	cmp	r3, r2
   1a468:	d308      	bcc.n	1a47c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
   1a46a:	f8ad 1000 	strh.w	r1, [sp]
   1a46e:	4669      	mov	r1, sp
   1a470:	f7ff fe2b 	bl	1a0ca <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1a474:	f8bd 0000 	ldrh.w	r0, [sp]
   1a478:	42a0      	cmp	r0, r4
   1a47a:	d001      	beq.n	1a480 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   1a47c:	2001      	movs	r0, #1
   1a47e:	bd38      	pop	{r3, r4, r5, pc}
   1a480:	2000      	movs	r0, #0
   1a482:	bd38      	pop	{r3, r4, r5, pc}

0001a484 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   1a484:	b570      	push	{r4, r5, r6, lr}
   1a486:	88c6      	ldrh	r6, [r0, #6]
   1a488:	8885      	ldrh	r5, [r0, #4]
   1a48a:	4603      	mov	r3, r0
   1a48c:	f100 0424 	add.w	r4, r0, #36	; 0x24
   1a490:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
   1a494:	4420      	add	r0, r4
   1a496:	42b5      	cmp	r5, r6
   1a498:	d102      	bne.n	1a4a0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
   1a49a:	2000      	movs	r0, #0
   1a49c:	8218      	strh	r0, [r3, #16]
   1a49e:	bd70      	pop	{r4, r5, r6, pc}
   1a4a0:	8804      	ldrh	r4, [r0, #0]
   1a4a2:	899d      	ldrh	r5, [r3, #12]
   1a4a4:	7f1e      	ldrb	r6, [r3, #28]
   1a4a6:	1b64      	subs	r4, r4, r5
   1a4a8:	4435      	add	r5, r6
   1a4aa:	4428      	add	r0, r5
   1a4ac:	880d      	ldrh	r5, [r1, #0]
   1a4ae:	b2a4      	uxth	r4, r4
   1a4b0:	1cc0      	adds	r0, r0, #3
   1a4b2:	42a5      	cmp	r5, r4
   1a4b4:	d900      	bls.n	1a4b8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
   1a4b6:	800c      	strh	r4, [r1, #0]
   1a4b8:	899c      	ldrh	r4, [r3, #12]
   1a4ba:	b124      	cbz	r4, 1a4c6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
   1a4bc:	2400      	movs	r4, #0
   1a4be:	7014      	strb	r4, [r2, #0]
   1a4c0:	8809      	ldrh	r1, [r1, #0]
   1a4c2:	8219      	strh	r1, [r3, #16]
   1a4c4:	bd70      	pop	{r4, r5, r6, pc}
   1a4c6:	2401      	movs	r4, #1
   1a4c8:	e7f9      	b.n	1a4be <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0001a4ca <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
   1a4ca:	b508      	push	{r3, lr}
   1a4cc:	8a81      	ldrh	r1, [r0, #20]
   1a4ce:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   1a4d2:	3aff      	subs	r2, #255	; 0xff
   1a4d4:	d008      	beq.n	1a4e8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
   1a4d6:	7d82      	ldrb	r2, [r0, #22]
   1a4d8:	f88d 2000 	strb.w	r2, [sp]
   1a4dc:	9a00      	ldr	r2, [sp, #0]
   1a4de:	9200      	str	r2, [sp, #0]
   1a4e0:	f89d 2000 	ldrb.w	r2, [sp]
   1a4e4:	b952      	cbnz	r2, 1a4fc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
   1a4e6:	e004      	b.n	1a4f2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
   1a4e8:	f44f 7162 	mov.w	r1, #904	; 0x388
   1a4ec:	2014      	movs	r0, #20
   1a4ee:	f7f6 fa3f 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a4f2:	8880      	ldrh	r0, [r0, #4]
   1a4f4:	4281      	cmp	r1, r0
   1a4f6:	d101      	bne.n	1a4fc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
   1a4f8:	2000      	movs	r0, #0
   1a4fa:	bd08      	pop	{r3, pc}
   1a4fc:	2001      	movs	r0, #1
   1a4fe:	bd08      	pop	{r3, pc}

0001a500 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
   1a500:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a504:	8281      	strh	r1, [r0, #20]
   1a506:	2100      	movs	r1, #0
   1a508:	7581      	strb	r1, [r0, #22]
   1a50a:	4770      	bx	lr

0001a50c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
   1a50c:	b510      	push	{r4, lr}
   1a50e:	8a81      	ldrh	r1, [r0, #20]
   1a510:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   1a514:	3aff      	subs	r2, #255	; 0xff
   1a516:	d004      	beq.n	1a522 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
   1a518:	f44f 7159 	mov.w	r1, #868	; 0x364
   1a51c:	2014      	movs	r0, #20
   1a51e:	f7f6 fa27 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a522:	88c1      	ldrh	r1, [r0, #6]
   1a524:	8281      	strh	r1, [r0, #20]
   1a526:	89c1      	ldrh	r1, [r0, #14]
   1a528:	b109      	cbz	r1, 1a52e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
   1a52a:	2101      	movs	r1, #1
   1a52c:	e000      	b.n	1a530 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
   1a52e:	2100      	movs	r1, #0
   1a530:	7581      	strb	r1, [r0, #22]
   1a532:	bd10      	pop	{r4, pc}

0001a534 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   1a534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a538:	461d      	mov	r5, r3
   1a53a:	4616      	mov	r6, r2
   1a53c:	9f06      	ldr	r7, [sp, #24]
   1a53e:	460b      	mov	r3, r1
   1a540:	4604      	mov	r4, r0
   1a542:	463a      	mov	r2, r7
   1a544:	4629      	mov	r1, r5
   1a546:	4630      	mov	r0, r6
   1a548:	f000 f84f 	bl	1a5ea <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1a54c:	4283      	cmp	r3, r0
   1a54e:	d201      	bcs.n	1a554 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
   1a550:	21a8      	movs	r1, #168	; 0xa8
   1a552:	e018      	b.n	1a586 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
   1a554:	1ce0      	adds	r0, r4, #3
   1a556:	f020 0103 	bic.w	r1, r0, #3
   1a55a:	4620      	mov	r0, r4
   1a55c:	42a1      	cmp	r1, r4
   1a55e:	d001      	beq.n	1a564 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
   1a560:	21a9      	movs	r1, #169	; 0xa9
   1a562:	e010      	b.n	1a586 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
   1a564:	2224      	movs	r2, #36	; 0x24
   1a566:	2100      	movs	r1, #0
   1a568:	f7ff f89b 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1a56c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a570:	82a0      	strh	r0, [r4, #20]
   1a572:	19a8      	adds	r0, r5, r6
   1a574:	1d80      	adds	r0, r0, #6
   1a576:	4378      	muls	r0, r7
   1a578:	b280      	uxth	r0, r0
   1a57a:	7725      	strb	r5, [r4, #28]
   1a57c:	8060      	strh	r0, [r4, #2]
   1a57e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1a582:	d903      	bls.n	1a58c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
   1a584:	21af      	movs	r1, #175	; 0xaf
   1a586:	2014      	movs	r0, #20
   1a588:	f7f6 f9f2 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a58c:	8026      	strh	r6, [r4, #0]
   1a58e:	2000      	movs	r0, #0
   1a590:	7760      	strb	r0, [r4, #29]
   1a592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a596 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
   1a596:	6181      	str	r1, [r0, #24]
   1a598:	6188      	str	r0, [r1, #24]
   1a59a:	4770      	bx	lr

0001a59c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   1a59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5a0:	460b      	mov	r3, r1
   1a5a2:	4604      	mov	r4, r0
   1a5a4:	f100 0124 	add.w	r1, r0, #36	; 0x24
   1a5a8:	8905      	ldrh	r5, [r0, #8]
   1a5aa:	8946      	ldrh	r6, [r0, #10]
   1a5ac:	8880      	ldrh	r0, [r0, #4]
   1a5ae:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
   1a5b2:	4439      	add	r1, r7
   1a5b4:	460f      	mov	r7, r1
   1a5b6:	4285      	cmp	r5, r0
   1a5b8:	d102      	bne.n	1a5c0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
   1a5ba:	2000      	movs	r0, #0
   1a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a5c0:	b10a      	cbz	r2, 1a5c6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
   1a5c2:	1cc8      	adds	r0, r1, #3
   1a5c4:	6010      	str	r0, [r2, #0]
   1a5c6:	b123      	cbz	r3, 1a5d2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
   1a5c8:	7f22      	ldrb	r2, [r4, #28]
   1a5ca:	1cf9      	adds	r1, r7, #3
   1a5cc:	4618      	mov	r0, r3
   1a5ce:	f7fe ffee 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a5d2:	883f      	ldrh	r7, [r7, #0]
   1a5d4:	f104 0108 	add.w	r1, r4, #8
   1a5d8:	4620      	mov	r0, r4
   1a5da:	f7ff fd76 	bl	1a0ca <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1a5de:	42b5      	cmp	r5, r6
   1a5e0:	d101      	bne.n	1a5e6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
   1a5e2:	8920      	ldrh	r0, [r4, #8]
   1a5e4:	8160      	strh	r0, [r4, #10]
   1a5e6:	4638      	mov	r0, r7
   1a5e8:	e7e8      	b.n	1a5bc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0001a5ea <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   1a5ea:	4401      	add	r1, r0
   1a5ec:	1d89      	adds	r1, r1, #6
   1a5ee:	4351      	muls	r1, r2
   1a5f0:	b28a      	uxth	r2, r1
   1a5f2:	2100      	movs	r1, #0
   1a5f4:	2845      	cmp	r0, #69	; 0x45
   1a5f6:	d201      	bcs.n	1a5fc <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
   1a5f8:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
   1a5fc:	3224      	adds	r2, #36	; 0x24
   1a5fe:	1850      	adds	r0, r2, r1
   1a600:	b280      	uxth	r0, r0
   1a602:	4770      	bx	lr

0001a604 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   1a604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a608:	4688      	mov	r8, r1
   1a60a:	88c1      	ldrh	r1, [r0, #6]
   1a60c:	4604      	mov	r4, r0
   1a60e:	8900      	ldrh	r0, [r0, #8]
   1a610:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
   1a614:	f104 0524 	add.w	r5, r4, #36	; 0x24
   1a618:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   1a61c:	eb05 0906 	add.w	r9, r5, r6
   1a620:	f7ff fd74 	bl	1a10c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   1a624:	2200      	movs	r2, #0
   1a626:	b998      	cbnz	r0, 1a650 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
   1a628:	8820      	ldrh	r0, [r4, #0]
   1a62a:	2845      	cmp	r0, #69	; 0x45
   1a62c:	d200      	bcs.n	1a630 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
   1a62e:	2045      	movs	r0, #69	; 0x45
   1a630:	42b7      	cmp	r7, r6
   1a632:	d906      	bls.n	1a642 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   1a634:	7f23      	ldrb	r3, [r4, #28]
   1a636:	1bb9      	subs	r1, r7, r6
   1a638:	1ac9      	subs	r1, r1, r3
   1a63a:	1f89      	subs	r1, r1, #6
   1a63c:	4281      	cmp	r1, r0
   1a63e:	da00      	bge.n	1a642 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   1a640:	4608      	mov	r0, r1
   1a642:	89e1      	ldrh	r1, [r4, #14]
   1a644:	b111      	cbz	r1, 1a64c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
   1a646:	f8b9 3000 	ldrh.w	r3, [r9]
   1a64a:	1ac0      	subs	r0, r0, r3
   1a64c:	4540      	cmp	r0, r8
   1a64e:	da03      	bge.n	1a658 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
   1a650:	8262      	strh	r2, [r4, #18]
   1a652:	2000      	movs	r0, #0
   1a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a658:	7f20      	ldrb	r0, [r4, #28]
   1a65a:	4429      	add	r1, r5
   1a65c:	1d80      	adds	r0, r0, #6
   1a65e:	4430      	add	r0, r6
   1a660:	4408      	add	r0, r1
   1a662:	f8a4 8012 	strh.w	r8, [r4, #18]
   1a666:	1ec0      	subs	r0, r0, #3
   1a668:	e7f4      	b.n	1a654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0001a66a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   1a66a:	2100      	movs	r1, #0
   1a66c:	81c1      	strh	r1, [r0, #14]
   1a66e:	8241      	strh	r1, [r0, #18]
   1a670:	7581      	strb	r1, [r0, #22]
   1a672:	4770      	bx	lr

0001a674 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   1a674:	b570      	push	{r4, r5, r6, lr}
   1a676:	2300      	movs	r3, #0
   1a678:	2908      	cmp	r1, #8
   1a67a:	d204      	bcs.n	1a686 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
   1a67c:	f240 11cb 	movw	r1, #459	; 0x1cb
   1a680:	2015      	movs	r0, #21
   1a682:	f7f6 f975 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a686:	6802      	ldr	r2, [r0, #0]
   1a688:	b90a      	cbnz	r2, 1a68e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   1a68a:	e01e      	b.n	1a6ca <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   1a68c:	4610      	mov	r0, r2
   1a68e:	6802      	ldr	r2, [r0, #0]
   1a690:	8893      	ldrh	r3, [r2, #4]
   1a692:	428b      	cmp	r3, r1
   1a694:	d002      	beq.n	1a69c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
   1a696:	6813      	ldr	r3, [r2, #0]
   1a698:	2b00      	cmp	r3, #0
   1a69a:	d1f7      	bne.n	1a68c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
   1a69c:	8894      	ldrh	r4, [r2, #4]
   1a69e:	4613      	mov	r3, r2
   1a6a0:	428c      	cmp	r4, r1
   1a6a2:	d101      	bne.n	1a6a8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
   1a6a4:	6811      	ldr	r1, [r2, #0]
   1a6a6:	e00d      	b.n	1a6c4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
   1a6a8:	f101 0508 	add.w	r5, r1, #8
   1a6ac:	b2ae      	uxth	r6, r5
   1a6ae:	2500      	movs	r5, #0
   1a6b0:	42b4      	cmp	r4, r6
   1a6b2:	d309      	bcc.n	1a6c8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
   1a6b4:	1a64      	subs	r4, r4, r1
   1a6b6:	4411      	add	r1, r2
   1a6b8:	600d      	str	r5, [r1, #0]
   1a6ba:	808c      	strh	r4, [r1, #4]
   1a6bc:	6802      	ldr	r2, [r0, #0]
   1a6be:	6812      	ldr	r2, [r2, #0]
   1a6c0:	6002      	str	r2, [r0, #0]
   1a6c2:	600a      	str	r2, [r1, #0]
   1a6c4:	6001      	str	r1, [r0, #0]
   1a6c6:	e000      	b.n	1a6ca <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   1a6c8:	2300      	movs	r3, #0
   1a6ca:	4618      	mov	r0, r3
   1a6cc:	bd70      	pop	{r4, r5, r6, pc}

0001a6ce <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   1a6ce:	b510      	push	{r4, lr}
   1a6d0:	000c      	movs	r4, r1
   1a6d2:	d006      	beq.n	1a6e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
   1a6d4:	2c08      	cmp	r4, #8
   1a6d6:	d209      	bcs.n	1a6ec <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
   1a6d8:	f240 1195 	movw	r1, #405	; 0x195
   1a6dc:	2015      	movs	r0, #21
   1a6de:	f7f6 f947 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a6e2:	b108      	cbz	r0, 1a6e8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   1a6e4:	2100      	movs	r1, #0
   1a6e6:	6001      	str	r1, [r0, #0]
   1a6e8:	2000      	movs	r0, #0
   1a6ea:	bd10      	pop	{r4, pc}
   1a6ec:	b118      	cbz	r0, 1a6f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
   1a6ee:	b2a1      	uxth	r1, r4
   1a6f0:	6800      	ldr	r0, [r0, #0]
   1a6f2:	f000 f814 	bl	1a71e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   1a6f6:	1d20      	adds	r0, r4, #4
   1a6f8:	bd10      	pop	{r4, pc}

0001a6fa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   1a6fa:	2100      	movs	r1, #0
   1a6fc:	6802      	ldr	r2, [r0, #0]
   1a6fe:	e003      	b.n	1a708 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   1a700:	8893      	ldrh	r3, [r2, #4]
   1a702:	6812      	ldr	r2, [r2, #0]
   1a704:	4419      	add	r1, r3
   1a706:	b289      	uxth	r1, r1
   1a708:	2a00      	cmp	r2, #0
   1a70a:	d1f9      	bne.n	1a700 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   1a70c:	f000 b807 	b.w	1a71e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0001a710 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   1a710:	2300      	movs	r3, #0
   1a712:	600b      	str	r3, [r1, #0]
   1a714:	808a      	strh	r2, [r1, #4]
   1a716:	6802      	ldr	r2, [r0, #0]
   1a718:	600a      	str	r2, [r1, #0]
   1a71a:	6001      	str	r1, [r0, #0]
   1a71c:	4770      	bx	lr
   1a71e:	2300      	movs	r3, #0
   1a720:	6043      	str	r3, [r0, #4]
   1a722:	1d02      	adds	r2, r0, #4
   1a724:	8101      	strh	r1, [r0, #8]
   1a726:	6002      	str	r2, [r0, #0]
   1a728:	4770      	bx	lr

0001a72a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   1a72a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   1a72e:	3aff      	subs	r2, #255	; 0xff
   1a730:	d000      	beq.n	1a734 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
   1a732:	b109      	cbz	r1, 1a738 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
   1a734:	2000      	movs	r0, #0
   1a736:	4770      	bx	lr
   1a738:	f7f6 bbfa 	b.w	10f30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0001a73c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   1a73c:	b570      	push	{r4, r5, r6, lr}
   1a73e:	4605      	mov	r5, r0
   1a740:	460c      	mov	r4, r1
   1a742:	4608      	mov	r0, r1
   1a744:	f000 f854 	bl	1a7f0 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   1a748:	b108      	cbz	r0, 1a74e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   1a74a:	2010      	movs	r0, #16
   1a74c:	bd70      	pop	{r4, r5, r6, pc}
   1a74e:	b10d      	cbz	r5, 1a754 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
   1a750:	2007      	movs	r0, #7
   1a752:	bd70      	pop	{r4, r5, r6, pc}
   1a754:	7025      	strb	r5, [r4, #0]
   1a756:	2000      	movs	r0, #0
   1a758:	8060      	strh	r0, [r4, #2]
   1a75a:	bd70      	pop	{r4, r5, r6, pc}
   1a75c:	b510      	push	{r4, lr}
   1a75e:	4604      	mov	r4, r0
   1a760:	f7f6 fc32 	bl	10fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
   1a764:	42a0      	cmp	r0, r4
   1a766:	d901      	bls.n	1a76c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
   1a768:	2001      	movs	r0, #1
   1a76a:	bd10      	pop	{r4, pc}
   1a76c:	2000      	movs	r0, #0
   1a76e:	bd10      	pop	{r4, pc}
   1a770:	4770      	bx	lr

0001a772 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   1a772:	b570      	push	{r4, r5, r6, lr}
   1a774:	460e      	mov	r6, r1
   1a776:	461d      	mov	r5, r3
   1a778:	4611      	mov	r1, r2
   1a77a:	f000 f811 	bl	1a7a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   1a77e:	4604      	mov	r4, r0
   1a780:	4629      	mov	r1, r5
   1a782:	4630      	mov	r0, r6
   1a784:	f000 f803 	bl	1a78e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   1a788:	4420      	add	r0, r4
   1a78a:	1d00      	adds	r0, r0, #4
   1a78c:	bd70      	pop	{r4, r5, r6, pc}
   1a78e:	b510      	push	{r4, lr}
   1a790:	460a      	mov	r2, r1
   1a792:	2101      	movs	r1, #1
   1a794:	f7ff ff29 	bl	1a5ea <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1a798:	1cc0      	adds	r0, r0, #3
   1a79a:	f020 0003 	bic.w	r0, r0, #3
   1a79e:	bd10      	pop	{r4, pc}
   1a7a0:	b510      	push	{r4, lr}
   1a7a2:	460a      	mov	r2, r1
   1a7a4:	2101      	movs	r1, #1
   1a7a6:	f7ff ff20 	bl	1a5ea <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1a7aa:	1cc0      	adds	r0, r0, #3
   1a7ac:	f020 0003 	bic.w	r0, r0, #3
   1a7b0:	bd10      	pop	{r4, pc}
   1a7b2:	2800      	cmp	r0, #0
   1a7b4:	db09      	blt.n	1a7ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
   1a7b6:	f000 021f 	and.w	r2, r0, #31
   1a7ba:	2101      	movs	r1, #1
   1a7bc:	4091      	lsls	r1, r2
   1a7be:	0940      	lsrs	r0, r0, #5
   1a7c0:	0080      	lsls	r0, r0, #2
   1a7c2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1a7c6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1a7ca:	4770      	bx	lr
   1a7cc:	5840      	ldr	r0, [r0, r1]
   1a7ce:	2800      	cmp	r0, #0
   1a7d0:	d000      	beq.n	1a7d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
   1a7d2:	2001      	movs	r0, #1
   1a7d4:	4770      	bx	lr

0001a7d6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   1a7d6:	f7f6 bdbd 	b.w	11354 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0001a7da <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
   1a7da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1a7de:	2000      	movs	r0, #0
   1a7e0:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   1a7e4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1a7e8:	2001      	movs	r0, #1
   1a7ea:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   1a7ee:	4770      	bx	lr

0001a7f0 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   1a7f0:	b108      	cbz	r0, 1a7f6 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   1a7f2:	2000      	movs	r0, #0
   1a7f4:	4770      	bx	lr
   1a7f6:	2001      	movs	r0, #1
   1a7f8:	4770      	bx	lr

0001a7fa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
   1a7fa:	f7f6 befd 	b.w	115f8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0001a7fe <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
   1a7fe:	f7f6 beeb 	b.w	115d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0001a802 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   1a802:	b510      	push	{r4, lr}
   1a804:	2900      	cmp	r1, #0
   1a806:	4604      	mov	r4, r0
   1a808:	f04f 0106 	mov.w	r1, #6
   1a80c:	d002      	beq.n	1a814 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   1a80e:	f7f6 f93d 	bl	10a8c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1a812:	e001      	b.n	1a818 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   1a814:	f7f6 f956 	bl	10ac4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1a818:	7960      	ldrb	r0, [r4, #5]
   1a81a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   1a81e:	7160      	strb	r0, [r4, #5]
   1a820:	bd10      	pop	{r4, pc}

0001a822 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
   1a822:	4770      	bx	lr

0001a824 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   1a824:	b530      	push	{r4, r5, lr}
   1a826:	460c      	mov	r4, r1
   1a828:	4605      	mov	r5, r0
   1a82a:	b08d      	sub	sp, #52	; 0x34
   1a82c:	f04f 0103 	mov.w	r1, #3
   1a830:	f104 0003 	add.w	r0, r4, #3
   1a834:	b112      	cbz	r2, 1a83c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   1a836:	f7f6 f929 	bl	10a8c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1a83a:	e001      	b.n	1a840 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   1a83c:	f7f6 f942 	bl	10ac4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1a840:	7960      	ldrb	r0, [r4, #5]
   1a842:	220d      	movs	r2, #13
   1a844:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   1a848:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1a84c:	7160      	strb	r0, [r4, #5]
   1a84e:	2100      	movs	r1, #0
   1a850:	a804      	add	r0, sp, #16
   1a852:	f7fe ff26 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1a856:	78e0      	ldrb	r0, [r4, #3]
   1a858:	f88d 001f 	strb.w	r0, [sp, #31]
   1a85c:	7920      	ldrb	r0, [r4, #4]
   1a85e:	f88d 001e 	strb.w	r0, [sp, #30]
   1a862:	7960      	ldrb	r0, [r4, #5]
   1a864:	f88d 001d 	strb.w	r0, [sp, #29]
   1a868:	2210      	movs	r2, #16
   1a86a:	4629      	mov	r1, r5
   1a86c:	4668      	mov	r0, sp
   1a86e:	f7fe fe9e 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a872:	4668      	mov	r0, sp
   1a874:	f7ff ffaf 	bl	1a7d6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   1a878:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   1a87c:	7020      	strb	r0, [r4, #0]
   1a87e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1a882:	7060      	strb	r0, [r4, #1]
   1a884:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   1a888:	70a0      	strb	r0, [r4, #2]
   1a88a:	b00d      	add	sp, #52	; 0x34
   1a88c:	bd30      	pop	{r4, r5, pc}

0001a88e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
   1a88e:	b530      	push	{r4, r5, lr}
   1a890:	b08d      	sub	sp, #52	; 0x34
   1a892:	460c      	mov	r4, r1
   1a894:	4605      	mov	r5, r0
   1a896:	220d      	movs	r2, #13
   1a898:	2100      	movs	r1, #0
   1a89a:	a804      	add	r0, sp, #16
   1a89c:	f7fe ff01 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1a8a0:	78e0      	ldrb	r0, [r4, #3]
   1a8a2:	f88d 001f 	strb.w	r0, [sp, #31]
   1a8a6:	7920      	ldrb	r0, [r4, #4]
   1a8a8:	f88d 001e 	strb.w	r0, [sp, #30]
   1a8ac:	7960      	ldrb	r0, [r4, #5]
   1a8ae:	f88d 001d 	strb.w	r0, [sp, #29]
   1a8b2:	2210      	movs	r2, #16
   1a8b4:	4629      	mov	r1, r5
   1a8b6:	4668      	mov	r0, sp
   1a8b8:	f7fe fe79 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a8bc:	4668      	mov	r0, sp
   1a8be:	f7ff ff8a 	bl	1a7d6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   1a8c2:	7820      	ldrb	r0, [r4, #0]
   1a8c4:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   1a8c8:	4288      	cmp	r0, r1
   1a8ca:	d10c      	bne.n	1a8e6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
   1a8cc:	7860      	ldrb	r0, [r4, #1]
   1a8ce:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
   1a8d2:	4288      	cmp	r0, r1
   1a8d4:	d107      	bne.n	1a8e6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
   1a8d6:	78a0      	ldrb	r0, [r4, #2]
   1a8d8:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
   1a8dc:	4288      	cmp	r0, r1
   1a8de:	d102      	bne.n	1a8e6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
   1a8e0:	2001      	movs	r0, #1
   1a8e2:	b00d      	add	sp, #52	; 0x34
   1a8e4:	bd30      	pop	{r4, r5, pc}
   1a8e6:	2000      	movs	r0, #0
   1a8e8:	e7fb      	b.n	1a8e2 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0001a8ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
   1a8ea:	f7f7 ba49 	b.w	11d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
   1a8ee:	b510      	push	{r4, lr}
   1a8f0:	2801      	cmp	r0, #1
   1a8f2:	d008      	beq.n	1a906 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
   1a8f4:	2802      	cmp	r0, #2
   1a8f6:	d004      	beq.n	1a902 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
   1a8f8:	f240 31ad 	movw	r1, #941	; 0x3ad
   1a8fc:	2006      	movs	r0, #6
   1a8fe:	f7f6 f837 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a902:	2001      	movs	r0, #1
   1a904:	bd10      	pop	{r4, pc}
   1a906:	2000      	movs	r0, #0
   1a908:	bd10      	pop	{r4, pc}
   1a90a:	2900      	cmp	r1, #0
   1a90c:	d004      	beq.n	1a918 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
   1a90e:	2801      	cmp	r0, #1
   1a910:	d003      	beq.n	1a91a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
   1a912:	2901      	cmp	r1, #1
   1a914:	d001      	beq.n	1a91a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
   1a916:	2002      	movs	r0, #2
   1a918:	4770      	bx	lr
   1a91a:	2001      	movs	r0, #1
   1a91c:	4770      	bx	lr
   1a91e:	f7ff bdb1 	b.w	1a484 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0001a922 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
   1a922:	2101      	movs	r1, #1
   1a924:	f7f7 be40 	b.w	125a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0001a928 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   1a928:	b510      	push	{r4, lr}
   1a92a:	f002 f806 	bl	1c93a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   1a92e:	b118      	cbz	r0, 1a938 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
   1a930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a934:	f7fd b9d2 	b.w	17cdc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
   1a938:	20ff      	movs	r0, #255	; 0xff
   1a93a:	bd10      	pop	{r4, pc}

0001a93c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
   1a93c:	b510      	push	{r4, lr}
   1a93e:	f7f7 fe7b 	bl	12638 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   1a942:	2810      	cmp	r0, #16
   1a944:	d003      	beq.n	1a94e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
   1a946:	f7f7 fe47 	bl	125d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   1a94a:	2810      	cmp	r0, #16
   1a94c:	d100      	bne.n	1a950 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
   1a94e:	2008      	movs	r0, #8
   1a950:	bd10      	pop	{r4, pc}

0001a952 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
   1a952:	b510      	push	{r4, lr}
   1a954:	f7f7 fe70 	bl	12638 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   1a958:	2810      	cmp	r0, #16
   1a95a:	d007      	beq.n	1a96c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
   1a95c:	f7f7 fe3c 	bl	125d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   1a960:	2810      	cmp	r0, #16
   1a962:	d003      	beq.n	1a96c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
   1a964:	f7f7 feb0 	bl	126c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
   1a968:	2001      	movs	r0, #1
   1a96a:	bd10      	pop	{r4, pc}
   1a96c:	2000      	movs	r0, #0
   1a96e:	bd10      	pop	{r4, pc}

0001a970 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   1a970:	b510      	push	{r4, lr}
   1a972:	f7f7 fe61 	bl	12638 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   1a976:	2810      	cmp	r0, #16
   1a978:	d003      	beq.n	1a982 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
   1a97a:	f7f7 feed 	bl	12758 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
   1a97e:	2001      	movs	r0, #1
   1a980:	bd10      	pop	{r4, pc}
   1a982:	2000      	movs	r0, #0
   1a984:	bd10      	pop	{r4, pc}

0001a986 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
   1a986:	b570      	push	{r4, r5, r6, lr}
   1a988:	460e      	mov	r6, r1
   1a98a:	b08c      	sub	sp, #48	; 0x30
   1a98c:	4614      	mov	r4, r2
   1a98e:	4601      	mov	r1, r0
   1a990:	461d      	mov	r5, r3
   1a992:	2210      	movs	r2, #16
   1a994:	4668      	mov	r0, sp
   1a996:	f000 f9b8 	bl	1ad0a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   1a99a:	2210      	movs	r2, #16
   1a99c:	4631      	mov	r1, r6
   1a99e:	a804      	add	r0, sp, #16
   1a9a0:	f000 f9b3 	bl	1ad0a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   1a9a4:	4668      	mov	r0, sp
   1a9a6:	f7ff ff16 	bl	1a7d6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   1a9aa:	a908      	add	r1, sp, #32
   1a9ac:	f04f 0210 	mov.w	r2, #16
   1a9b0:	4628      	mov	r0, r5
   1a9b2:	b11c      	cbz	r4, 1a9bc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
   1a9b4:	f000 f9a9 	bl	1ad0a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   1a9b8:	b00c      	add	sp, #48	; 0x30
   1a9ba:	bd70      	pop	{r4, r5, r6, pc}
   1a9bc:	f7fe fdf7 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a9c0:	e7fa      	b.n	1a9b8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
   1a9c2:	0781      	lsls	r1, r0, #30
   1a9c4:	d501      	bpl.n	1a9ca <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
   1a9c6:	2002      	movs	r0, #2
   1a9c8:	4770      	bx	lr
   1a9ca:	07c0      	lsls	r0, r0, #31
   1a9cc:	d0fc      	beq.n	1a9c8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
   1a9ce:	2001      	movs	r0, #1
   1a9d0:	4770      	bx	lr

0001a9d2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
   1a9d2:	b530      	push	{r4, r5, lr}
   1a9d4:	4605      	mov	r5, r0
   1a9d6:	7900      	ldrb	r0, [r0, #4]
   1a9d8:	0940      	lsrs	r0, r0, #5
   1a9da:	d10e      	bne.n	1a9fa <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
   1a9dc:	2400      	movs	r4, #0
   1a9de:	4623      	mov	r3, r4
   1a9e0:	5ce8      	ldrb	r0, [r5, r3]
   1a9e2:	f000 f855 	bl	1aa90 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>
   1a9e6:	1c5b      	adds	r3, r3, #1
   1a9e8:	4420      	add	r0, r4
   1a9ea:	b2db      	uxtb	r3, r3
   1a9ec:	b2c4      	uxtb	r4, r0
   1a9ee:	2b05      	cmp	r3, #5
   1a9f0:	d3f6      	bcc.n	1a9e0 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
   1a9f2:	2c01      	cmp	r4, #1
   1a9f4:	d901      	bls.n	1a9fa <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
   1a9f6:	2001      	movs	r0, #1
   1a9f8:	bd30      	pop	{r4, r5, pc}
   1a9fa:	2000      	movs	r0, #0
   1a9fc:	bd30      	pop	{r4, r5, pc}

0001a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   1a9fe:	b510      	push	{r4, lr}
   1aa00:	460c      	mov	r4, r1
   1aa02:	2100      	movs	r1, #0
   1aa04:	f7ff fe91 	bl	1a72a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1aa08:	6060      	str	r0, [r4, #4]
   1aa0a:	b110      	cbz	r0, 1aa12 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
   1aa0c:	2000      	movs	r0, #0
   1aa0e:	7020      	strb	r0, [r4, #0]
   1aa10:	bd10      	pop	{r4, pc}
   1aa12:	2002      	movs	r0, #2
   1aa14:	bd10      	pop	{r4, pc}

0001aa16 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   1aa16:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1aa1a:	4348      	muls	r0, r1
   1aa1c:	4770      	bx	lr

0001aa1e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   1aa1e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1aa22:	fbb0 f0f1 	udiv	r0, r0, r1
   1aa26:	b280      	uxth	r0, r0
   1aa28:	4770      	bx	lr

0001aa2a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   1aa2a:	b570      	push	{r4, r5, r6, lr}
   1aa2c:	4604      	mov	r4, r0
   1aa2e:	4290      	cmp	r0, r2
   1aa30:	d20b      	bcs.n	1aa4a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
   1aa32:	1b10      	subs	r0, r2, r4
   1aa34:	2865      	cmp	r0, #101	; 0x65
   1aa36:	d200      	bcs.n	1aa3a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
   1aa38:	2065      	movs	r0, #101	; 0x65
   1aa3a:	1825      	adds	r5, r4, r0
   1aa3c:	428d      	cmp	r5, r1
   1aa3e:	d803      	bhi.n	1aa48 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
   1aa40:	2104      	movs	r1, #4
   1aa42:	f7f3 fa57 	bl	def4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1aa46:	b108      	cbz	r0, 1aa4c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
   1aa48:	4620      	mov	r0, r4
   1aa4a:	bd70      	pop	{r4, r5, r6, pc}
   1aa4c:	4628      	mov	r0, r5
   1aa4e:	bd70      	pop	{r4, r5, r6, pc}

0001aa50 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>:
   1aa50:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
   1aa54:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
   1aa58:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   1aa5c:	4408      	add	r0, r1
   1aa5e:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
   1aa62:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   1aa66:	ea02 0090 	and.w	r0, r2, r0, lsr #2
   1aa6a:	4408      	add	r0, r1
   1aa6c:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
   1aa70:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   1aa74:	ea02 1010 	and.w	r0, r2, r0, lsr #4
   1aa78:	4408      	add	r0, r1
   1aa7a:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
   1aa7e:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
   1aa82:	ea02 2010 	and.w	r0, r2, r0, lsr #8
   1aa86:	4408      	add	r0, r1
   1aa88:	b281      	uxth	r1, r0
   1aa8a:	eb01 4010 	add.w	r0, r1, r0, lsr #16
   1aa8e:	4770      	bx	lr

0001aa90 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>:
   1aa90:	f000 0155 	and.w	r1, r0, #85	; 0x55
   1aa94:	2255      	movs	r2, #85	; 0x55
   1aa96:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   1aa9a:	4408      	add	r0, r1
   1aa9c:	f000 0133 	and.w	r1, r0, #51	; 0x33
   1aaa0:	2233      	movs	r2, #51	; 0x33
   1aaa2:	ea02 0090 	and.w	r0, r2, r0, lsr #2
   1aaa6:	4408      	add	r0, r1
   1aaa8:	f000 010f 	and.w	r1, r0, #15
   1aaac:	eb01 1010 	add.w	r0, r1, r0, lsr #4
   1aab0:	4770      	bx	lr

0001aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   1aab2:	b510      	push	{r4, lr}
   1aab4:	f1a2 030f 	sub.w	r3, r2, #15
   1aab8:	290c      	cmp	r1, #12
   1aaba:	d24f      	bcs.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1aabc:	e8df f001 	tbb	[pc, r1]
   1aac0:	120d0806 	.word	0x120d0806
   1aac4:	2f271815 	.word	0x2f271815
   1aac8:	3d354c32 	.word	0x3d354c32
   1aacc:	b3a2      	cbz	r2, 1ab38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
   1aace:	e045      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1aad0:	2a07      	cmp	r2, #7
   1aad2:	d045      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1aad4:	2a08      	cmp	r2, #8
   1aad6:	d043      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1aad8:	e040      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1aada:	2a0c      	cmp	r2, #12
   1aadc:	d040      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1aade:	2a0b      	cmp	r2, #11
   1aae0:	d03e      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1aae2:	e03b      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1aae4:	2a0d      	cmp	r2, #13
   1aae6:	d03b      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1aae8:	e038      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1aaea:	2b0c      	cmp	r3, #12
   1aaec:	d938      	bls.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1aaee:	e035      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1aaf0:	2a12      	cmp	r2, #18
   1aaf2:	d035      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1aaf4:	2a11      	cmp	r2, #17
   1aaf6:	d033      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1aaf8:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   1aafc:	b120      	cbz	r0, 1ab08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
   1aafe:	2a12      	cmp	r2, #18
   1ab00:	d32c      	bcc.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab02:	2a1a      	cmp	r2, #26
   1ab04:	d92c      	bls.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab06:	e029      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab08:	2a16      	cmp	r2, #22
   1ab0a:	d2fa      	bcs.n	1ab02 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
   1ab0c:	e026      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab0e:	2b03      	cmp	r3, #3
   1ab10:	d926      	bls.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab12:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   1ab16:	b308      	cbz	r0, 1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab18:	2a1b      	cmp	r2, #27
   1ab1a:	d921      	bls.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab1c:	e01e      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab1e:	2a04      	cmp	r2, #4
   1ab20:	d01e      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab22:	e01b      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab24:	2a01      	cmp	r2, #1
   1ab26:	d01b      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab28:	e018      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab2a:	2a1c      	cmp	r2, #28
   1ab2c:	d018      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab2e:	2a1d      	cmp	r2, #29
   1ab30:	d016      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab32:	2a1e      	cmp	r2, #30
   1ab34:	d014      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab36:	e011      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab38:	e012      	b.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab3a:	2a1f      	cmp	r2, #31
   1ab3c:	d010      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab3e:	2a20      	cmp	r2, #32
   1ab40:	d00e      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab42:	2a21      	cmp	r2, #33	; 0x21
   1ab44:	d00c      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab46:	2a22      	cmp	r2, #34	; 0x22
   1ab48:	d00a      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab4a:	2a23      	cmp	r2, #35	; 0x23
   1ab4c:	d008      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab4e:	2a24      	cmp	r2, #36	; 0x24
   1ab50:	d006      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab52:	2a26      	cmp	r2, #38	; 0x26
   1ab54:	d004      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab56:	e001      	b.n	1ab5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
   1ab58:	2a05      	cmp	r2, #5
   1ab5a:	d001      	beq.n	1ab60 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
   1ab5c:	2000      	movs	r0, #0
   1ab5e:	bd10      	pop	{r4, pc}
   1ab60:	2001      	movs	r0, #1
   1ab62:	bd10      	pop	{r4, pc}

0001ab64 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   1ab64:	280c      	cmp	r0, #12
   1ab66:	d013      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab68:	280b      	cmp	r0, #11
   1ab6a:	d011      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab6c:	280d      	cmp	r0, #13
   1ab6e:	d00f      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab70:	281f      	cmp	r0, #31
   1ab72:	d00d      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab74:	2820      	cmp	r0, #32
   1ab76:	d00b      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab78:	2821      	cmp	r0, #33	; 0x21
   1ab7a:	d009      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab7c:	2822      	cmp	r0, #34	; 0x22
   1ab7e:	d007      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab80:	2823      	cmp	r0, #35	; 0x23
   1ab82:	d005      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab84:	2824      	cmp	r0, #36	; 0x24
   1ab86:	d003      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab88:	2826      	cmp	r0, #38	; 0x26
   1ab8a:	d001      	beq.n	1ab90 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   1ab8c:	2000      	movs	r0, #0
   1ab8e:	4770      	bx	lr
   1ab90:	2001      	movs	r0, #1
   1ab92:	4770      	bx	lr

0001ab94 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   1ab94:	f011 0f0c 	tst.w	r1, #12
   1ab98:	d016      	beq.n	1abc8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
   1ab9a:	074a      	lsls	r2, r1, #29
   1ab9c:	f44f 7116 	mov.w	r1, #600	; 0x258
   1aba0:	2a00      	cmp	r2, #0
   1aba2:	da02      	bge.n	1abaa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
   1aba4:	f04f 0210 	mov.w	r2, #16
   1aba8:	e001      	b.n	1abae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
   1abaa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1abae:	da01      	bge.n	1abb4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
   1abb0:	f04f 0196 	mov.w	r1, #150	; 0x96
   1abb4:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   1abb8:	eba0 0301 	sub.w	r3, r0, r1
   1abbc:	4288      	cmp	r0, r1
   1abbe:	d910      	bls.n	1abe2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   1abc0:	fb93 f0f2 	sdiv	r0, r3, r2
   1abc4:	b280      	uxth	r0, r0
   1abc6:	4770      	bx	lr
   1abc8:	2902      	cmp	r1, #2
   1abca:	d002      	beq.n	1abd2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
   1abcc:	2870      	cmp	r0, #112	; 0x70
   1abce:	d80a      	bhi.n	1abe6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
   1abd0:	e007      	b.n	1abe2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   1abd2:	283c      	cmp	r0, #60	; 0x3c
   1abd4:	d905      	bls.n	1abe2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   1abd6:	383c      	subs	r0, #60	; 0x3c
   1abd8:	17c1      	asrs	r1, r0, #31
   1abda:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   1abde:	1080      	asrs	r0, r0, #2
   1abe0:	e7f0      	b.n	1abc4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   1abe2:	2000      	movs	r0, #0
   1abe4:	e7ee      	b.n	1abc4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   1abe6:	3870      	subs	r0, #112	; 0x70
   1abe8:	17c1      	asrs	r1, r0, #31
   1abea:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   1abee:	10c0      	asrs	r0, r0, #3
   1abf0:	e7e8      	b.n	1abc4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0001abf2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   1abf2:	6809      	ldr	r1, [r1, #0]
   1abf4:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
   1abf8:	4770      	bx	lr

0001abfa <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
   1abfa:	2801      	cmp	r0, #1
   1abfc:	d002      	beq.n	1ac04 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
   1abfe:	2802      	cmp	r0, #2
   1ac00:	d000      	beq.n	1ac04 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
   1ac02:	2000      	movs	r0, #0
   1ac04:	4770      	bx	lr

0001ac06 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   1ac06:	b510      	push	{r4, lr}
   1ac08:	f640 12c4 	movw	r2, #2500	; 0x9c4
   1ac0c:	2901      	cmp	r1, #1
   1ac0e:	d006      	beq.n	1ac1e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
   1ac10:	2902      	cmp	r1, #2
   1ac12:	d005      	beq.n	1ac20 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
   1ac14:	f240 31b1 	movw	r1, #945	; 0x3b1
   1ac18:	2029      	movs	r0, #41	; 0x29
   1ac1a:	f7f5 fea9 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ac1e:	b108      	cbz	r0, 1ac24 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
   1ac20:	4610      	mov	r0, r2
   1ac22:	bd10      	pop	{r4, pc}
   1ac24:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1ac28:	bd10      	pop	{r4, pc}

0001ac2a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
   1ac2a:	b530      	push	{r4, r5, lr}
   1ac2c:	242a      	movs	r4, #42	; 0x2a
   1ac2e:	2523      	movs	r5, #35	; 0x23
   1ac30:	2a16      	cmp	r2, #22
   1ac32:	d105      	bne.n	1ac40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
   1ac34:	280c      	cmp	r0, #12
   1ac36:	d007      	beq.n	1ac48 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
   1ac38:	280d      	cmp	r0, #13
   1ac3a:	d005      	beq.n	1ac48 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
   1ac3c:	281f      	cmp	r0, #31
   1ac3e:	d005      	beq.n	1ac4c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
   1ac40:	b171      	cbz	r1, 1ac60 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
   1ac42:	2a16      	cmp	r2, #22
   1ac44:	d10c      	bne.n	1ac60 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
   1ac46:	e004      	b.n	1ac52 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
   1ac48:	701c      	strb	r4, [r3, #0]
   1ac4a:	e000      	b.n	1ac4e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
   1ac4c:	701d      	strb	r5, [r3, #0]
   1ac4e:	2001      	movs	r0, #1
   1ac50:	bd30      	pop	{r4, r5, pc}
   1ac52:	7808      	ldrb	r0, [r1, #0]
   1ac54:	2801      	cmp	r0, #1
   1ac56:	d0f7      	beq.n	1ac48 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
   1ac58:	2800      	cmp	r0, #0
   1ac5a:	d0f5      	beq.n	1ac48 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
   1ac5c:	2816      	cmp	r0, #22
   1ac5e:	d0f5      	beq.n	1ac4c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
   1ac60:	2000      	movs	r0, #0
   1ac62:	bd30      	pop	{r4, r5, pc}

0001ac64 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   1ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac66:	b2cf      	uxtb	r7, r1
   1ac68:	4606      	mov	r6, r0
   1ac6a:	f3c1 2407 	ubfx	r4, r1, #8, #8
   1ac6e:	4621      	mov	r1, r4
   1ac70:	4638      	mov	r0, r7
   1ac72:	f000 f8ca 	bl	1ae0a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
   1ac76:	b2f5      	uxtb	r5, r6
   1ac78:	f3c6 2607 	ubfx	r6, r6, #8, #8
   1ac7c:	b920      	cbnz	r0, 1ac88 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
   1ac7e:	4631      	mov	r1, r6
   1ac80:	4628      	mov	r0, r5
   1ac82:	f000 f8c2 	bl	1ae0a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
   1ac86:	b140      	cbz	r0, 1ac9a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
   1ac88:	4027      	ands	r7, r4
   1ac8a:	4035      	ands	r5, r6
   1ac8c:	403d      	ands	r5, r7
   1ac8e:	4644      	mov	r4, r8
   1ac90:	f365 0407 	bfi	r4, r5, #0, #8
   1ac94:	f365 240f 	bfi	r4, r5, #8, #8
   1ac98:	e006      	b.n	1aca8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
   1ac9a:	4025      	ands	r5, r4
   1ac9c:	4644      	mov	r4, r8
   1ac9e:	f365 0407 	bfi	r4, r5, #0, #8
   1aca2:	403e      	ands	r6, r7
   1aca4:	f366 240f 	bfi	r4, r6, #8, #8
   1aca8:	b2e0      	uxtb	r0, r4
   1acaa:	f7ff fe8a 	bl	1a9c2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
   1acae:	f88d 0000 	strb.w	r0, [sp]
   1acb2:	f3c4 2007 	ubfx	r0, r4, #8, #8
   1acb6:	f7ff fe84 	bl	1a9c2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
   1acba:	f88d 0001 	strb.w	r0, [sp, #1]
   1acbe:	f8bd 0000 	ldrh.w	r0, [sp]
   1acc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001acc4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   1acc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1acc8:	460c      	mov	r4, r1
   1acca:	4605      	mov	r5, r0
   1accc:	68c6      	ldr	r6, [r0, #12]
   1acce:	f7f3 fd6b 	bl	e7a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   1acd2:	b198      	cbz	r0, 1acfc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   1acd4:	b1bc      	cbz	r4, 1ad06 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1acd6:	4630      	mov	r0, r6
   1acd8:	68e9      	ldr	r1, [r5, #12]
   1acda:	f7f3 fa59 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1acde:	2800      	cmp	r0, #0
   1ace0:	dd11      	ble.n	1ad06 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1ace2:	4420      	add	r0, r4
   1ace4:	1e40      	subs	r0, r0, #1
   1ace6:	fbb0 f7f4 	udiv	r7, r0, r4
   1acea:	fb07 f104 	mul.w	r1, r7, r4
   1acee:	4630      	mov	r0, r6
   1acf0:	f7f3 fa1c 	bl	e12c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1acf4:	60e8      	str	r0, [r5, #12]
   1acf6:	4638      	mov	r0, r7
   1acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1acfc:	f240 2136 	movw	r1, #566	; 0x236
   1ad00:	2029      	movs	r0, #41	; 0x29
   1ad02:	f7f5 fe35 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ad06:	2000      	movs	r0, #0
   1ad08:	e7f6      	b.n	1acf8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0001ad0a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
   1ad0a:	b530      	push	{r4, r5, lr}
   1ad0c:	4613      	mov	r3, r2
   1ad0e:	e006      	b.n	1ad1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
   1ad10:	18cc      	adds	r4, r1, r3
   1ad12:	1ad5      	subs	r5, r2, r3
   1ad14:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   1ad18:	1e5b      	subs	r3, r3, #1
   1ad1a:	5544      	strb	r4, [r0, r5]
   1ad1c:	b2db      	uxtb	r3, r3
   1ad1e:	2b00      	cmp	r3, #0
   1ad20:	d1f6      	bne.n	1ad10 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
   1ad22:	bd30      	pop	{r4, r5, pc}

0001ad24 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   1ad24:	b538      	push	{r3, r4, r5, lr}
   1ad26:	4605      	mov	r5, r0
   1ad28:	460c      	mov	r4, r1
   1ad2a:	4668      	mov	r0, sp
   1ad2c:	f7fd fce6 	bl	186fc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   1ad30:	b310      	cbz	r0, 1ad78 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
   1ad32:	f99d 0000 	ldrsb.w	r0, [sp]
   1ad36:	7260      	strb	r0, [r4, #9]
   1ad38:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   1ad3c:	72a1      	strb	r1, [r4, #10]
   1ad3e:	f994 100b 	ldrsb.w	r1, [r4, #11]
   1ad42:	2200      	movs	r2, #0
   1ad44:	1a41      	subs	r1, r0, r1
   1ad46:	d500      	bpl.n	1ad4a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
   1ad48:	4249      	negs	r1, r1
   1ad4a:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1ad4e:	428b      	cmp	r3, r1
   1ad50:	dc10      	bgt.n	1ad74 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1ad52:	2bff      	cmp	r3, #255	; 0xff
   1ad54:	d00e      	beq.n	1ad74 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1ad56:	7b21      	ldrb	r1, [r4, #12]
   1ad58:	1c49      	adds	r1, r1, #1
   1ad5a:	b2c9      	uxtb	r1, r1
   1ad5c:	7321      	strb	r1, [r4, #12]
   1ad5e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1ad62:	4299      	cmp	r1, r3
   1ad64:	d802      	bhi.n	1ad6c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
   1ad66:	7ae1      	ldrb	r1, [r4, #11]
   1ad68:	297f      	cmp	r1, #127	; 0x7f
   1ad6a:	d103      	bne.n	1ad74 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1ad6c:	72e0      	strb	r0, [r4, #11]
   1ad6e:	2000      	movs	r0, #0
   1ad70:	7320      	strb	r0, [r4, #12]
   1ad72:	2201      	movs	r2, #1
   1ad74:	4610      	mov	r0, r2
   1ad76:	bd38      	pop	{r3, r4, r5, pc}
   1ad78:	207f      	movs	r0, #127	; 0x7f
   1ad7a:	7260      	strb	r0, [r4, #9]
   1ad7c:	2000      	movs	r0, #0
   1ad7e:	bd38      	pop	{r3, r4, r5, pc}

0001ad80 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   1ad80:	2300      	movs	r3, #0
   1ad82:	6283      	str	r3, [r0, #40]	; 0x28
   1ad84:	8602      	strh	r2, [r0, #48]	; 0x30
   1ad86:	f240 2371 	movw	r3, #625	; 0x271
   1ad8a:	435a      	muls	r2, r3
   1ad8c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1ad90:	1e52      	subs	r2, r2, #1
   1ad92:	fbb2 f1f1 	udiv	r1, r2, r1
   1ad96:	62c1      	str	r1, [r0, #44]	; 0x2c
   1ad98:	4770      	bx	lr

0001ad9a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   1ad9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1ad9e:	4348      	muls	r0, r1
   1ada0:	4770      	bx	lr

0001ada2 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
   1ada2:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1ada6:	fbb0 f0f1 	udiv	r0, r0, r1
   1adaa:	b280      	uxth	r0, r0
   1adac:	4770      	bx	lr

0001adae <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   1adae:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1adb2:	fb10 f001 	smulbb	r0, r0, r1
   1adb6:	4770      	bx	lr

0001adb8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
   1adb8:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1adbc:	fbb0 f0f1 	udiv	r0, r0, r1
   1adc0:	b2c0      	uxtb	r0, r0
   1adc2:	4770      	bx	lr

0001adc4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
   1adc4:	b510      	push	{r4, lr}
   1adc6:	2300      	movs	r3, #0
   1adc8:	461a      	mov	r2, r3
   1adca:	e003      	b.n	1add4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
   1adcc:	5c84      	ldrb	r4, [r0, r2]
   1adce:	4323      	orrs	r3, r4
   1add0:	1c52      	adds	r2, r2, #1
   1add2:	b2d2      	uxtb	r2, r2
   1add4:	428a      	cmp	r2, r1
   1add6:	d3f9      	bcc.n	1adcc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
   1add8:	b10b      	cbz	r3, 1adde <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
   1adda:	2000      	movs	r0, #0
   1addc:	bd10      	pop	{r4, pc}
   1adde:	2001      	movs	r0, #1
   1ade0:	bd10      	pop	{r4, pc}
   1ade2:	b510      	push	{r4, lr}
   1ade4:	4604      	mov	r4, r0
   1ade6:	f7fc fef5 	bl	17bd4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1adea:	f644 112b 	movw	r1, #18731	; 0x492b
   1adee:	4008      	ands	r0, r1
   1adf0:	2101      	movs	r1, #1
   1adf2:	7561      	strb	r1, [r4, #21]
   1adf4:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
   1adf8:	0a00      	lsrs	r0, r0, #8
   1adfa:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
   1adfe:	20fe      	movs	r0, #254	; 0xfe
   1ae00:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
   1ae04:	207f      	movs	r0, #127	; 0x7f
   1ae06:	7260      	strb	r0, [r4, #9]
   1ae08:	bd10      	pop	{r4, pc}
   1ae0a:	2801      	cmp	r0, #1
   1ae0c:	d002      	beq.n	1ae14 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
   1ae0e:	2802      	cmp	r0, #2
   1ae10:	d003      	beq.n	1ae1a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
   1ae12:	e004      	b.n	1ae1e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
   1ae14:	2901      	cmp	r1, #1
   1ae16:	d004      	beq.n	1ae22 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
   1ae18:	e001      	b.n	1ae1e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
   1ae1a:	2902      	cmp	r1, #2
   1ae1c:	d001      	beq.n	1ae22 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
   1ae1e:	2000      	movs	r0, #0
   1ae20:	4770      	bx	lr
   1ae22:	2001      	movs	r0, #1
   1ae24:	4770      	bx	lr

0001ae26 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
   1ae26:	b510      	push	{r4, lr}
   1ae28:	4604      	mov	r4, r0
   1ae2a:	f890 0020 	ldrb.w	r0, [r0, #32]
   1ae2e:	b108      	cbz	r0, 1ae34 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
   1ae30:	2825      	cmp	r0, #37	; 0x25
   1ae32:	d901      	bls.n	1ae38 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
   1ae34:	2012      	movs	r0, #18
   1ae36:	bd10      	pop	{r4, pc}
   1ae38:	b12a      	cbz	r2, 1ae46 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
   1ae3a:	7d60      	ldrb	r0, [r4, #21]
   1ae3c:	b128      	cbz	r0, 1ae4a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
   1ae3e:	2801      	cmp	r0, #1
   1ae40:	d009      	beq.n	1ae56 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
   1ae42:	201f      	movs	r0, #31
   1ae44:	bd10      	pop	{r4, pc}
   1ae46:	2000      	movs	r0, #0
   1ae48:	bd10      	pop	{r4, pc}
   1ae4a:	4620      	mov	r0, r4
   1ae4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ae50:	4611      	mov	r1, r2
   1ae52:	f7f7 bd77 	b.w	12944 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
   1ae56:	88a2      	ldrh	r2, [r4, #4]
   1ae58:	6909      	ldr	r1, [r1, #16]
   1ae5a:	f104 0015 	add.w	r0, r4, #21
   1ae5e:	f7f7 fd1d 	bl	1289c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   1ae62:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
   1ae66:	e7ee      	b.n	1ae46 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0001ae68 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
   1ae68:	b530      	push	{r4, r5, lr}
   1ae6a:	1c42      	adds	r2, r0, #1
   1ae6c:	428a      	cmp	r2, r1
   1ae6e:	d004      	beq.n	1ae7a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
   1ae70:	680a      	ldr	r2, [r1, #0]
   1ae72:	f8c0 2001 	str.w	r2, [r0, #1]
   1ae76:	7909      	ldrb	r1, [r1, #4]
   1ae78:	7141      	strb	r1, [r0, #5]
   1ae7a:	7941      	ldrb	r1, [r0, #5]
   1ae7c:	f001 011f 	and.w	r1, r1, #31
   1ae80:	7141      	strb	r1, [r0, #5]
   1ae82:	2100      	movs	r1, #0
   1ae84:	72c1      	strb	r1, [r0, #11]
   1ae86:	1843      	adds	r3, r0, r1
   1ae88:	1c49      	adds	r1, r1, #1
   1ae8a:	785c      	ldrb	r4, [r3, #1]
   1ae8c:	b2c9      	uxtb	r1, r1
   1ae8e:	f004 0201 	and.w	r2, r4, #1
   1ae92:	0864      	lsrs	r4, r4, #1
   1ae94:	f004 0501 	and.w	r5, r4, #1
   1ae98:	4415      	add	r5, r2
   1ae9a:	0862      	lsrs	r2, r4, #1
   1ae9c:	f002 0401 	and.w	r4, r2, #1
   1aea0:	442c      	add	r4, r5
   1aea2:	0852      	lsrs	r2, r2, #1
   1aea4:	f002 0501 	and.w	r5, r2, #1
   1aea8:	442c      	add	r4, r5
   1aeaa:	0852      	lsrs	r2, r2, #1
   1aeac:	f002 0501 	and.w	r5, r2, #1
   1aeb0:	442c      	add	r4, r5
   1aeb2:	0852      	lsrs	r2, r2, #1
   1aeb4:	f002 0501 	and.w	r5, r2, #1
   1aeb8:	442c      	add	r4, r5
   1aeba:	0852      	lsrs	r2, r2, #1
   1aebc:	f002 0501 	and.w	r5, r2, #1
   1aec0:	442c      	add	r4, r5
   1aec2:	eb04 0252 	add.w	r2, r4, r2, lsr #1
   1aec6:	719a      	strb	r2, [r3, #6]
   1aec8:	7ac3      	ldrb	r3, [r0, #11]
   1aeca:	2905      	cmp	r1, #5
   1aecc:	441a      	add	r2, r3
   1aece:	72c2      	strb	r2, [r0, #11]
   1aed0:	d3d9      	bcc.n	1ae86 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
   1aed2:	bd30      	pop	{r4, r5, pc}

0001aed4 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
   1aed4:	68c0      	ldr	r0, [r0, #12]
   1aed6:	6008      	str	r0, [r1, #0]
   1aed8:	4770      	bx	lr

0001aeda <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
   1aeda:	6842      	ldr	r2, [r0, #4]
   1aedc:	600a      	str	r2, [r1, #0]
   1aede:	6880      	ldr	r0, [r0, #8]
   1aee0:	6048      	str	r0, [r1, #4]
   1aee2:	4770      	bx	lr

0001aee4 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
   1aee4:	6842      	ldr	r2, [r0, #4]
   1aee6:	600a      	str	r2, [r1, #0]
   1aee8:	6880      	ldr	r0, [r0, #8]
   1aeea:	6048      	str	r0, [r1, #4]
   1aeec:	4770      	bx	lr

0001aeee <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   1aeee:	7800      	ldrb	r0, [r0, #0]
   1aef0:	f000 0003 	and.w	r0, r0, #3
   1aef4:	4770      	bx	lr

0001aef6 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   1aef6:	8880      	ldrh	r0, [r0, #4]
   1aef8:	4770      	bx	lr

0001aefa <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   1aefa:	88c0      	ldrh	r0, [r0, #6]
   1aefc:	4770      	bx	lr

0001aefe <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   1aefe:	8900      	ldrh	r0, [r0, #8]
   1af00:	4770      	bx	lr

0001af02 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   1af02:	8940      	ldrh	r0, [r0, #10]
   1af04:	4770      	bx	lr

0001af06 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   1af06:	7900      	ldrb	r0, [r0, #4]
   1af08:	4770      	bx	lr

0001af0a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   1af0a:	7900      	ldrb	r0, [r0, #4]
   1af0c:	4770      	bx	lr

0001af0e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   1af0e:	8901      	ldrh	r1, [r0, #8]
   1af10:	291b      	cmp	r1, #27
   1af12:	d30c      	bcc.n	1af2e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1af14:	8941      	ldrh	r1, [r0, #10]
   1af16:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1af1a:	4291      	cmp	r1, r2
   1af1c:	d307      	bcc.n	1af2e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1af1e:	8881      	ldrh	r1, [r0, #4]
   1af20:	291b      	cmp	r1, #27
   1af22:	d304      	bcc.n	1af2e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1af24:	88c0      	ldrh	r0, [r0, #6]
   1af26:	4290      	cmp	r0, r2
   1af28:	d301      	bcc.n	1af2e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1af2a:	2001      	movs	r0, #1
   1af2c:	4770      	bx	lr
   1af2e:	2000      	movs	r0, #0
   1af30:	4770      	bx	lr

0001af32 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   1af32:	b510      	push	{r4, lr}
   1af34:	29fb      	cmp	r1, #251	; 0xfb
   1af36:	d904      	bls.n	1af42 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
   1af38:	f44f 61af 	mov.w	r1, #1400	; 0x578
   1af3c:	202a      	movs	r0, #42	; 0x2a
   1af3e:	f7f5 fd17 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1af42:	7041      	strb	r1, [r0, #1]
   1af44:	bd10      	pop	{r4, pc}

0001af46 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   1af46:	7901      	ldrb	r1, [r0, #4]
   1af48:	0749      	lsls	r1, r1, #29
   1af4a:	d004      	beq.n	1af56 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
   1af4c:	7940      	ldrb	r0, [r0, #5]
   1af4e:	0740      	lsls	r0, r0, #29
   1af50:	d001      	beq.n	1af56 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
   1af52:	2001      	movs	r0, #1
   1af54:	4770      	bx	lr
   1af56:	2000      	movs	r0, #0
   1af58:	4770      	bx	lr

0001af5a <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
   1af5a:	7901      	ldrb	r1, [r0, #4]
   1af5c:	0749      	lsls	r1, r1, #29
   1af5e:	d004      	beq.n	1af6a <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
   1af60:	7940      	ldrb	r0, [r0, #5]
   1af62:	0740      	lsls	r0, r0, #29
   1af64:	d001      	beq.n	1af6a <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
   1af66:	2001      	movs	r0, #1
   1af68:	4770      	bx	lr
   1af6a:	2000      	movs	r0, #0
   1af6c:	4770      	bx	lr

0001af6e <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   1af6e:	7900      	ldrb	r0, [r0, #4]
   1af70:	4770      	bx	lr

0001af72 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   1af72:	7940      	ldrb	r0, [r0, #5]
   1af74:	4770      	bx	lr

0001af76 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   1af76:	7101      	strb	r1, [r0, #4]
   1af78:	4770      	bx	lr

0001af7a <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   1af7a:	7141      	strb	r1, [r0, #5]
   1af7c:	4770      	bx	lr

0001af7e <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
   1af7e:	680a      	ldr	r2, [r1, #0]
   1af80:	6042      	str	r2, [r0, #4]
   1af82:	7909      	ldrb	r1, [r1, #4]
   1af84:	7201      	strb	r1, [r0, #8]
   1af86:	4770      	bx	lr

0001af88 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
   1af88:	72c1      	strb	r1, [r0, #11]
   1af8a:	0a09      	lsrs	r1, r1, #8
   1af8c:	7301      	strb	r1, [r0, #12]
   1af8e:	4770      	bx	lr

0001af90 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
   1af90:	8809      	ldrh	r1, [r1, #0]
   1af92:	8181      	strh	r1, [r0, #12]
   1af94:	4770      	bx	lr

0001af96 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
   1af96:	6809      	ldr	r1, [r1, #0]
   1af98:	f8c0 1016 	str.w	r1, [r0, #22]
   1af9c:	4770      	bx	lr

0001af9e <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
   1af9e:	680a      	ldr	r2, [r1, #0]
   1afa0:	6042      	str	r2, [r0, #4]
   1afa2:	6849      	ldr	r1, [r1, #4]
   1afa4:	6081      	str	r1, [r0, #8]
   1afa6:	4770      	bx	lr

0001afa8 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
   1afa8:	680a      	ldr	r2, [r1, #0]
   1afaa:	f840 2f0e 	str.w	r2, [r0, #14]!
   1afae:	6849      	ldr	r1, [r1, #4]
   1afb0:	6041      	str	r1, [r0, #4]
   1afb2:	4770      	bx	lr

0001afb4 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   1afb4:	680a      	ldr	r2, [r1, #0]
   1afb6:	6042      	str	r2, [r0, #4]
   1afb8:	6849      	ldr	r1, [r1, #4]
   1afba:	6081      	str	r1, [r0, #8]
   1afbc:	4770      	bx	lr

0001afbe <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   1afbe:	7802      	ldrb	r2, [r0, #0]
   1afc0:	f001 0103 	and.w	r1, r1, #3
   1afc4:	f022 0203 	bic.w	r2, r2, #3
   1afc8:	430a      	orrs	r2, r1
   1afca:	7002      	strb	r2, [r0, #0]
   1afcc:	4770      	bx	lr

0001afce <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
   1afce:	7101      	strb	r1, [r0, #4]
   1afd0:	4770      	bx	lr

0001afd2 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   1afd2:	7101      	strb	r1, [r0, #4]
   1afd4:	0a09      	lsrs	r1, r1, #8
   1afd6:	7141      	strb	r1, [r0, #5]
   1afd8:	4770      	bx	lr

0001afda <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   1afda:	7181      	strb	r1, [r0, #6]
   1afdc:	0a09      	lsrs	r1, r1, #8
   1afde:	71c1      	strb	r1, [r0, #7]
   1afe0:	4770      	bx	lr

0001afe2 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   1afe2:	7201      	strb	r1, [r0, #8]
   1afe4:	0a09      	lsrs	r1, r1, #8
   1afe6:	7241      	strb	r1, [r0, #9]
   1afe8:	4770      	bx	lr

0001afea <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   1afea:	7281      	strb	r1, [r0, #10]
   1afec:	0a09      	lsrs	r1, r1, #8
   1afee:	72c1      	strb	r1, [r0, #11]
   1aff0:	4770      	bx	lr

0001aff2 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
   1aff2:	7181      	strb	r1, [r0, #6]
   1aff4:	0a09      	lsrs	r1, r1, #8
   1aff6:	71c1      	strb	r1, [r0, #7]
   1aff8:	4770      	bx	lr

0001affa <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
   1affa:	7141      	strb	r1, [r0, #5]
   1affc:	4770      	bx	lr

0001affe <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
   1affe:	7841      	ldrb	r1, [r0, #1]
   1b000:	7800      	ldrb	r0, [r0, #0]
   1b002:	f010 000f 	ands.w	r0, r0, #15
   1b006:	d005      	beq.n	1b014 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
   1b008:	2801      	cmp	r0, #1
   1b00a:	d007      	beq.n	1b01c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
   1b00c:	2802      	cmp	r0, #2
   1b00e:	d001      	beq.n	1b014 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
   1b010:	2806      	cmp	r0, #6
   1b012:	d105      	bne.n	1b020 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
   1b014:	1f89      	subs	r1, r1, #6
   1b016:	291f      	cmp	r1, #31
   1b018:	d904      	bls.n	1b024 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
   1b01a:	e001      	b.n	1b020 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
   1b01c:	290c      	cmp	r1, #12
   1b01e:	d001      	beq.n	1b024 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
   1b020:	2000      	movs	r0, #0
   1b022:	4770      	bx	lr
   1b024:	2001      	movs	r0, #1
   1b026:	4770      	bx	lr

0001b028 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
   1b028:	7800      	ldrb	r0, [r0, #0]
   1b02a:	09c0      	lsrs	r0, r0, #7
   1b02c:	4770      	bx	lr

0001b02e <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
   1b02e:	f850 2f03 	ldr.w	r2, [r0, #3]!
   1b032:	600a      	str	r2, [r1, #0]
   1b034:	8880      	ldrh	r0, [r0, #4]
   1b036:	8088      	strh	r0, [r1, #4]
   1b038:	4770      	bx	lr

0001b03a <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
   1b03a:	7800      	ldrb	r0, [r0, #0]
   1b03c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b040:	4770      	bx	lr

0001b042 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
   1b042:	7801      	ldrb	r1, [r0, #0]
   1b044:	f001 010f 	and.w	r1, r1, #15
   1b048:	2904      	cmp	r1, #4
   1b04a:	d105      	bne.n	1b058 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
   1b04c:	7840      	ldrb	r0, [r0, #1]
   1b04e:	1f80      	subs	r0, r0, #6
   1b050:	281f      	cmp	r0, #31
   1b052:	d801      	bhi.n	1b058 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
   1b054:	2001      	movs	r0, #1
   1b056:	4770      	bx	lr
   1b058:	2000      	movs	r0, #0
   1b05a:	4770      	bx	lr

0001b05c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   1b05c:	b510      	push	{r4, lr}
   1b05e:	7802      	ldrb	r2, [r0, #0]
   1b060:	f001 030f 	and.w	r3, r1, #15
   1b064:	f022 020f 	bic.w	r2, r2, #15
   1b068:	431a      	orrs	r2, r3
   1b06a:	7002      	strb	r2, [r0, #0]
   1b06c:	2907      	cmp	r1, #7
   1b06e:	d20c      	bcs.n	1b08a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
   1b070:	e8df f001 	tbb	[pc, r1]
   1b074:	06040604 	.word	0x06040604
   1b078:	00040804 	.word	0x00040804
   1b07c:	2106      	movs	r1, #6
   1b07e:	e002      	b.n	1b086 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
   1b080:	210c      	movs	r1, #12
   1b082:	e000      	b.n	1b086 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
   1b084:	2122      	movs	r1, #34	; 0x22
   1b086:	7041      	strb	r1, [r0, #1]
   1b088:	bd10      	pop	{r4, pc}
   1b08a:	216e      	movs	r1, #110	; 0x6e
   1b08c:	202a      	movs	r0, #42	; 0x2a
   1b08e:	f7f5 fc6f 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001b092 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   1b092:	680a      	ldr	r2, [r1, #0]
   1b094:	f840 2f09 	str.w	r2, [r0, #9]!
   1b098:	8889      	ldrh	r1, [r1, #4]
   1b09a:	8081      	strh	r1, [r0, #4]
   1b09c:	4770      	bx	lr

0001b09e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   1b09e:	7802      	ldrb	r2, [r0, #0]
   1b0a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1b0a4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   1b0a8:	7002      	strb	r2, [r0, #0]
   1b0aa:	4770      	bx	lr

0001b0ac <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   1b0ac:	680a      	ldr	r2, [r1, #0]
   1b0ae:	f840 2f03 	str.w	r2, [r0, #3]!
   1b0b2:	8889      	ldrh	r1, [r1, #4]
   1b0b4:	8081      	strh	r1, [r0, #4]
   1b0b6:	4770      	bx	lr

0001b0b8 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   1b0b8:	7802      	ldrb	r2, [r0, #0]
   1b0ba:	2340      	movs	r3, #64	; 0x40
   1b0bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1b0c0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   1b0c4:	430a      	orrs	r2, r1
   1b0c6:	7002      	strb	r2, [r0, #0]
   1b0c8:	4770      	bx	lr

0001b0ca <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   1b0ca:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1b0ce:	4604      	mov	r4, r0
   1b0d0:	2000      	movs	r0, #0
   1b0d2:	f7f5 fe31 	bl	10d38 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1b0d6:	2600      	movs	r6, #0
   1b0d8:	4605      	mov	r5, r0
   1b0da:	4637      	mov	r7, r6
   1b0dc:	e00e      	b.n	1b0fc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
   1b0de:	8820      	ldrh	r0, [r4, #0]
   1b0e0:	1c40      	adds	r0, r0, #1
   1b0e2:	b280      	uxth	r0, r0
   1b0e4:	8020      	strh	r0, [r4, #0]
   1b0e6:	42a8      	cmp	r0, r5
   1b0e8:	d300      	bcc.n	1b0ec <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
   1b0ea:	8027      	strh	r7, [r4, #0]
   1b0ec:	8820      	ldrh	r0, [r4, #0]
   1b0ee:	4669      	mov	r1, sp
   1b0f0:	f7ff fc85 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1b0f4:	2800      	cmp	r0, #0
   1b0f6:	d007      	beq.n	1b108 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
   1b0f8:	1c76      	adds	r6, r6, #1
   1b0fa:	b2f6      	uxtb	r6, r6
   1b0fc:	42ae      	cmp	r6, r5
   1b0fe:	d3ee      	bcc.n	1b0de <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
   1b100:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1b104:	8020      	strh	r0, [r4, #0]
   1b106:	2012      	movs	r0, #18
   1b108:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0001b10c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
   1b10c:	b510      	push	{r4, lr}
   1b10e:	7901      	ldrb	r1, [r0, #4]
   1b110:	b119      	cbz	r1, 1b11a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
   1b112:	2901      	cmp	r1, #1
   1b114:	d006      	beq.n	1b124 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
   1b116:	2000      	movs	r0, #0
   1b118:	bd10      	pop	{r4, pc}
   1b11a:	8842      	ldrh	r2, [r0, #2]
   1b11c:	6883      	ldr	r3, [r0, #8]
   1b11e:	8800      	ldrh	r0, [r0, #0]
   1b120:	2102      	movs	r1, #2
   1b122:	e003      	b.n	1b12c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
   1b124:	8842      	ldrh	r2, [r0, #2]
   1b126:	6883      	ldr	r3, [r0, #8]
   1b128:	8800      	ldrh	r0, [r0, #0]
   1b12a:	2101      	movs	r1, #1
   1b12c:	f7f7 fc9c 	bl	12a68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
   1b130:	b908      	cbnz	r0, 1b136 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
   1b132:	f7f7 fce7 	bl	12b04 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
   1b136:	2001      	movs	r0, #1
   1b138:	bd10      	pop	{r4, pc}
   1b13a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1b13e:	460e      	mov	r6, r1
   1b140:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
   1b144:	4617      	mov	r7, r2
   1b146:	39ff      	subs	r1, #255	; 0xff
   1b148:	d014      	beq.n	1b174 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
   1b14a:	8030      	strh	r0, [r6, #0]
   1b14c:	2100      	movs	r1, #0
   1b14e:	7171      	strb	r1, [r6, #5]
   1b150:	f7f6 f80c 	bl	1116c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1b154:	4604      	mov	r4, r0
   1b156:	f7ff f912 	bl	1a37e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
   1b15a:	0005      	movs	r5, r0
   1b15c:	d00a      	beq.n	1b174 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
   1b15e:	4620      	mov	r0, r4
   1b160:	4629      	mov	r1, r5
   1b162:	aa01      	add	r2, sp, #4
   1b164:	f7ff f93c 	bl	1a3e0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   1b168:	8070      	strh	r0, [r6, #2]
   1b16a:	b130      	cbz	r0, 1b17a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
   1b16c:	28fb      	cmp	r0, #251	; 0xfb
   1b16e:	d906      	bls.n	1b17e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
   1b170:	21ae      	movs	r1, #174	; 0xae
   1b172:	e026      	b.n	1b1c2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1b174:	2000      	movs	r0, #0
   1b176:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1b17a:	21ad      	movs	r1, #173	; 0xad
   1b17c:	e021      	b.n	1b1c2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1b17e:	9801      	ldr	r0, [sp, #4]
   1b180:	f7ff feb5 	bl	1aeee <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
   1b184:	2801      	cmp	r0, #1
   1b186:	d003      	beq.n	1b190 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
   1b188:	2802      	cmp	r0, #2
   1b18a:	d001      	beq.n	1b190 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
   1b18c:	21bd      	movs	r1, #189	; 0xbd
   1b18e:	e018      	b.n	1b1c2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1b190:	7130      	strb	r0, [r6, #4]
   1b192:	4629      	mov	r1, r5
   1b194:	8873      	ldrh	r3, [r6, #2]
   1b196:	2503      	movs	r5, #3
   1b198:	4620      	mov	r0, r4
   1b19a:	463a      	mov	r2, r7
   1b19c:	9500      	str	r5, [sp, #0]
   1b19e:	f7fe ffc5 	bl	1a12c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
   1b1a2:	4620      	mov	r0, r4
   1b1a4:	60b7      	str	r7, [r6, #8]
   1b1a6:	f7ff f899 	bl	1a2dc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
   1b1aa:	b138      	cbz	r0, 1b1bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
   1b1ac:	2100      	movs	r1, #0
   1b1ae:	4620      	mov	r0, r4
   1b1b0:	460a      	mov	r2, r1
   1b1b2:	f7ff f9f3 	bl	1a59c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   1b1b6:	b118      	cbz	r0, 1b1c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
   1b1b8:	2001      	movs	r0, #1
   1b1ba:	e7dc      	b.n	1b176 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
   1b1bc:	21cd      	movs	r1, #205	; 0xcd
   1b1be:	e000      	b.n	1b1c2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1b1c0:	21d2      	movs	r1, #210	; 0xd2
   1b1c2:	202b      	movs	r0, #43	; 0x2b
   1b1c4:	f7f5 fbd4 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001b1c8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
   1b1c8:	f7f7 be98 	b.w	12efc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
   1b1cc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1b1d0:	4604      	mov	r4, r0
   1b1d2:	2000      	movs	r0, #0
   1b1d4:	f7f5 fdb0 	bl	10d38 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1b1d8:	4605      	mov	r5, r0
   1b1da:	1c40      	adds	r0, r0, #1
   1b1dc:	2600      	movs	r6, #0
   1b1de:	b2c7      	uxtb	r7, r0
   1b1e0:	46b0      	mov	r8, r6
   1b1e2:	e017      	b.n	1b214 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
   1b1e4:	8820      	ldrh	r0, [r4, #0]
   1b1e6:	1c40      	adds	r0, r0, #1
   1b1e8:	b280      	uxth	r0, r0
   1b1ea:	8020      	strh	r0, [r4, #0]
   1b1ec:	42b8      	cmp	r0, r7
   1b1ee:	d302      	bcc.n	1b1f6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
   1b1f0:	4640      	mov	r0, r8
   1b1f2:	f8a4 8000 	strh.w	r8, [r4]
   1b1f6:	b280      	uxth	r0, r0
   1b1f8:	42a8      	cmp	r0, r5
   1b1fa:	d304      	bcc.n	1b206 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
   1b1fc:	42b8      	cmp	r0, r7
   1b1fe:	d202      	bcs.n	1b206 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
   1b200:	2000      	movs	r0, #0
   1b202:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1b206:	4669      	mov	r1, sp
   1b208:	f7ff fbf9 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1b20c:	2800      	cmp	r0, #0
   1b20e:	d0f8      	beq.n	1b202 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
   1b210:	1c76      	adds	r6, r6, #1
   1b212:	b2f6      	uxtb	r6, r6
   1b214:	42be      	cmp	r6, r7
   1b216:	d3e5      	bcc.n	1b1e4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
   1b218:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1b21c:	8020      	strh	r0, [r4, #0]
   1b21e:	2012      	movs	r0, #18
   1b220:	e7ef      	b.n	1b202 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0001b222 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   1b222:	b570      	push	{r4, r5, r6, lr}
   1b224:	8050      	strh	r0, [r2, #2]
   1b226:	890c      	ldrh	r4, [r1, #8]
   1b228:	8094      	strh	r4, [r2, #4]
   1b22a:	898b      	ldrh	r3, [r1, #12]
   1b22c:	80d3      	strh	r3, [r2, #6]
   1b22e:	8948      	ldrh	r0, [r1, #10]
   1b230:	8110      	strh	r0, [r2, #8]
   1b232:	89cd      	ldrh	r5, [r1, #14]
   1b234:	8155      	strh	r5, [r2, #10]
   1b236:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
   1b238:	42ae      	cmp	r6, r5
   1b23a:	d108      	bne.n	1b24e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1b23c:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
   1b23e:	4285      	cmp	r5, r0
   1b240:	d105      	bne.n	1b24e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1b242:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
   1b244:	429d      	cmp	r5, r3
   1b246:	d102      	bne.n	1b24e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1b248:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
   1b24a:	42a3      	cmp	r3, r4
   1b24c:	d001      	beq.n	1b252 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
   1b24e:	2301      	movs	r3, #1
   1b250:	e000      	b.n	1b254 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   1b252:	2300      	movs	r3, #0
   1b254:	7313      	strb	r3, [r2, #12]
   1b256:	8548      	strh	r0, [r1, #42]	; 0x2a
   1b258:	8950      	ldrh	r0, [r2, #10]
   1b25a:	85c8      	strh	r0, [r1, #46]	; 0x2e
   1b25c:	8890      	ldrh	r0, [r2, #4]
   1b25e:	8588      	strh	r0, [r1, #44]	; 0x2c
   1b260:	88d0      	ldrh	r0, [r2, #6]
   1b262:	8608      	strh	r0, [r1, #48]	; 0x30
   1b264:	2001      	movs	r0, #1
   1b266:	7010      	strb	r0, [r2, #0]
   1b268:	bd70      	pop	{r4, r5, r6, pc}

0001b26a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   1b26a:	b510      	push	{r4, lr}
   1b26c:	888c      	ldrh	r4, [r1, #4]
   1b26e:	890a      	ldrh	r2, [r1, #8]
   1b270:	884b      	ldrh	r3, [r1, #2]
   1b272:	88c9      	ldrh	r1, [r1, #6]
   1b274:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
   1b278:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
   1b27c:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
   1b280:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
   1b284:	bd10      	pop	{r4, pc}

0001b286 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   1b286:	b570      	push	{r4, r5, r6, lr}
   1b288:	4615      	mov	r5, r2
   1b28a:	460c      	mov	r4, r1
   1b28c:	f000 f8c7 	bl	1b41e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
   1b290:	3096      	adds	r0, #150	; 0x96
   1b292:	4428      	add	r0, r5
   1b294:	42a0      	cmp	r0, r4
   1b296:	d801      	bhi.n	1b29c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
   1b298:	1a20      	subs	r0, r4, r0
   1b29a:	bd70      	pop	{r4, r5, r6, pc}
   1b29c:	2000      	movs	r0, #0
   1b29e:	bd70      	pop	{r4, r5, r6, pc}

0001b2a0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   1b2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b2a4:	4604      	mov	r4, r0
   1b2a6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
   1b2a8:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
   1b2aa:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
   1b2ae:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   1b2b2:	4285      	cmp	r5, r0
   1b2b4:	d300      	bcc.n	1b2b8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
   1b2b6:	4605      	mov	r5, r0
   1b2b8:	4620      	mov	r0, r4
   1b2ba:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   1b2be:	f000 f89e 	bl	1b3fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
   1b2c2:	4601      	mov	r1, r0
   1b2c4:	86e5      	strh	r5, [r4, #54]	; 0x36
   1b2c6:	8761      	strh	r1, [r4, #58]	; 0x3a
   1b2c8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   1b2ca:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1b2ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   1b2d0:	4680      	mov	r8, r0
   1b2d2:	42aa      	cmp	r2, r5
   1b2d4:	d200      	bcs.n	1b2d8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
   1b2d6:	462a      	mov	r2, r5
   1b2d8:	428b      	cmp	r3, r1
   1b2da:	d200      	bcs.n	1b2de <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
   1b2dc:	460b      	mov	r3, r1
   1b2de:	8202      	strh	r2, [r0, #16]
   1b2e0:	f8a8 3012 	strh.w	r3, [r8, #18]
   1b2e4:	42bd      	cmp	r5, r7
   1b2e6:	d101      	bne.n	1b2ec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
   1b2e8:	42b1      	cmp	r1, r6
   1b2ea:	d001      	beq.n	1b2f0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
   1b2ec:	2001      	movs	r0, #1
   1b2ee:	e000      	b.n	1b2f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
   1b2f0:	2000      	movs	r0, #0
   1b2f2:	4681      	mov	r9, r0
   1b2f4:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
   1b2f8:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
   1b2fc:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
   1b2fe:	8f26      	ldrh	r6, [r4, #56]	; 0x38
   1b300:	4285      	cmp	r5, r0
   1b302:	d300      	bcc.n	1b306 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
   1b304:	4605      	mov	r5, r0
   1b306:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
   1b30a:	4620      	mov	r0, r4
   1b30c:	f000 f87f 	bl	1b40e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
   1b310:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   1b314:	2902      	cmp	r1, #2
   1b316:	d108      	bne.n	1b32a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
   1b318:	42af      	cmp	r7, r5
   1b31a:	d200      	bcs.n	1b31e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
   1b31c:	463d      	mov	r5, r7
   1b31e:	4286      	cmp	r6, r0
   1b320:	d200      	bcs.n	1b324 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   1b322:	4630      	mov	r0, r6
   1b324:	2100      	movs	r1, #0
   1b326:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   1b32a:	f8a8 5008 	strh.w	r5, [r8, #8]
   1b32e:	f8a8 000c 	strh.w	r0, [r8, #12]
   1b332:	42bd      	cmp	r5, r7
   1b334:	d101      	bne.n	1b33a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
   1b336:	42b0      	cmp	r0, r6
   1b338:	d001      	beq.n	1b33e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
   1b33a:	2001      	movs	r0, #1
   1b33c:	e000      	b.n	1b340 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
   1b33e:	2000      	movs	r0, #0
   1b340:	ea40 0009 	orr.w	r0, r0, r9
   1b344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b348 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
   1b348:	6840      	ldr	r0, [r0, #4]
   1b34a:	4770      	bx	lr

0001b34c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   1b34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b350:	4616      	mov	r6, r2
   1b352:	460f      	mov	r7, r1
   1b354:	4604      	mov	r4, r0
   1b356:	f000 f862 	bl	1b41e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
   1b35a:	4605      	mov	r5, r0
   1b35c:	463a      	mov	r2, r7
   1b35e:	68e1      	ldr	r1, [r4, #12]
   1b360:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1b362:	f000 f847 	bl	1b3f4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
   1b366:	19a9      	adds	r1, r5, r6
   1b368:	4281      	cmp	r1, r0
   1b36a:	d300      	bcc.n	1b36e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
   1b36c:	4608      	mov	r0, r1
   1b36e:	6320      	str	r0, [r4, #48]	; 0x30
   1b370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b374 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   1b374:	221b      	movs	r2, #27
   1b376:	8402      	strh	r2, [r0, #32]
   1b378:	8382      	strh	r2, [r0, #28]
   1b37a:	82c2      	strh	r2, [r0, #22]
   1b37c:	8282      	strh	r2, [r0, #20]
   1b37e:	8142      	strh	r2, [r0, #10]
   1b380:	8202      	strh	r2, [r0, #16]
   1b382:	8102      	strh	r2, [r0, #8]
   1b384:	8542      	strh	r2, [r0, #42]	; 0x2a
   1b386:	8582      	strh	r2, [r0, #44]	; 0x2c
   1b388:	8482      	strh	r2, [r0, #36]	; 0x24
   1b38a:	2900      	cmp	r1, #0
   1b38c:	d10a      	bne.n	1b3a4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   1b38e:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1b392:	8441      	strh	r1, [r0, #34]	; 0x22
   1b394:	83c1      	strh	r1, [r0, #30]
   1b396:	8341      	strh	r1, [r0, #26]
   1b398:	8301      	strh	r1, [r0, #24]
   1b39a:	81c1      	strh	r1, [r0, #14]
   1b39c:	8241      	strh	r1, [r0, #18]
   1b39e:	8181      	strh	r1, [r0, #12]
   1b3a0:	85c1      	strh	r1, [r0, #46]	; 0x2e
   1b3a2:	8601      	strh	r1, [r0, #48]	; 0x30
   1b3a4:	4770      	bx	lr

0001b3a6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   1b3a6:	6800      	ldr	r0, [r0, #0]
   1b3a8:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   1b3ac:	4290      	cmp	r0, r2
   1b3ae:	d903      	bls.n	1b3b8 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
   1b3b0:	1a40      	subs	r0, r0, r1
   1b3b2:	389c      	subs	r0, #156	; 0x9c
   1b3b4:	0840      	lsrs	r0, r0, #1
   1b3b6:	4770      	bx	lr
   1b3b8:	2000      	movs	r0, #0
   1b3ba:	4770      	bx	lr

0001b3bc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   1b3bc:	b510      	push	{r4, lr}
   1b3be:	9c02      	ldr	r4, [sp, #8]
   1b3c0:	8281      	strh	r1, [r0, #20]
   1b3c2:	82c2      	strh	r2, [r0, #22]
   1b3c4:	8303      	strh	r3, [r0, #24]
   1b3c6:	8344      	strh	r4, [r0, #26]
   1b3c8:	bd10      	pop	{r4, pc}

0001b3ca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   1b3ca:	8050      	strh	r0, [r2, #2]
   1b3cc:	8a88      	ldrh	r0, [r1, #20]
   1b3ce:	8090      	strh	r0, [r2, #4]
   1b3d0:	8ac8      	ldrh	r0, [r1, #22]
   1b3d2:	80d0      	strh	r0, [r2, #6]
   1b3d4:	8b08      	ldrh	r0, [r1, #24]
   1b3d6:	8110      	strh	r0, [r2, #8]
   1b3d8:	8b48      	ldrh	r0, [r1, #26]
   1b3da:	8150      	strh	r0, [r2, #10]
   1b3dc:	2001      	movs	r0, #1
   1b3de:	7010      	strb	r0, [r2, #0]
   1b3e0:	4770      	bx	lr
   1b3e2:	2902      	cmp	r1, #2
   1b3e4:	d003      	beq.n	1b3ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
   1b3e6:	00c0      	lsls	r0, r0, #3
   1b3e8:	3070      	adds	r0, #112	; 0x70
   1b3ea:	b280      	uxth	r0, r0
   1b3ec:	4770      	bx	lr
   1b3ee:	0080      	lsls	r0, r0, #2
   1b3f0:	303c      	adds	r0, #60	; 0x3c
   1b3f2:	e7fa      	b.n	1b3ea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
   1b3f4:	4288      	cmp	r0, r1
   1b3f6:	d300      	bcc.n	1b3fa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
   1b3f8:	4608      	mov	r0, r1
   1b3fa:	1a80      	subs	r0, r0, r2
   1b3fc:	4770      	bx	lr
   1b3fe:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
   1b402:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
   1b406:	4281      	cmp	r1, r0
   1b408:	d200      	bcs.n	1b40c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
   1b40a:	4608      	mov	r0, r1
   1b40c:	4770      	bx	lr
   1b40e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   1b412:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
   1b416:	4281      	cmp	r1, r0
   1b418:	d200      	bcs.n	1b41c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
   1b41a:	4608      	mov	r0, r1
   1b41c:	4770      	bx	lr
   1b41e:	2196      	movs	r1, #150	; 0x96
   1b420:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
   1b424:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
   1b428:	f000 b800 	b.w	1b42c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
   1b42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b430:	460d      	mov	r5, r1
   1b432:	4606      	mov	r6, r0
   1b434:	4698      	mov	r8, r3
   1b436:	4617      	mov	r7, r2
   1b438:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   1b43a:	4611      	mov	r1, r2
   1b43c:	f7ff ffd1 	bl	1b3e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
   1b440:	4604      	mov	r4, r0
   1b442:	4639      	mov	r1, r7
   1b444:	4630      	mov	r0, r6
   1b446:	f7ff ffe2 	bl	1b40e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
   1b44a:	42a0      	cmp	r0, r4
   1b44c:	d200      	bcs.n	1b450 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
   1b44e:	4604      	mov	r4, r0
   1b450:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
   1b452:	4641      	mov	r1, r8
   1b454:	f7ff ffc5 	bl	1b3e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
   1b458:	4607      	mov	r7, r0
   1b45a:	4641      	mov	r1, r8
   1b45c:	4630      	mov	r0, r6
   1b45e:	f7ff ffce 	bl	1b3fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
   1b462:	42b8      	cmp	r0, r7
   1b464:	d300      	bcc.n	1b468 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
   1b466:	4638      	mov	r0, r7
   1b468:	4420      	add	r0, r4
   1b46a:	4428      	add	r0, r5
   1b46c:	1d80      	adds	r0, r0, #6
   1b46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b472 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
   1b472:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1b474:	2700      	movs	r7, #0
   1b476:	463d      	mov	r5, r7
   1b478:	2623      	movs	r6, #35	; 0x23
   1b47a:	f7f7 fdf1 	bl	13060 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x58>
   1b47e:	4604      	mov	r4, r0
   1b480:	f7f7 fdc2 	bl	13008 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
   1b484:	b190      	cbz	r0, 1b4ac <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
   1b486:	4669      	mov	r1, sp
   1b488:	2000      	movs	r0, #0
   1b48a:	f7ff f957 	bl	1a73c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1b48e:	e003      	b.n	1b498 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x26>
   1b490:	9802      	ldr	r0, [sp, #8]
   1b492:	6901      	ldr	r1, [r0, #16]
   1b494:	42a1      	cmp	r1, r4
   1b496:	d009      	beq.n	1b4ac <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
   1b498:	4668      	mov	r0, sp
   1b49a:	f7f5 fc99 	bl	10dd0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1b49e:	2800      	cmp	r0, #0
   1b4a0:	d0f6      	beq.n	1b490 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x1e>
   1b4a2:	4625      	mov	r5, r4
   1b4a4:	4620      	mov	r0, r4
   1b4a6:	f7f7 fd73 	bl	12f90 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
   1b4aa:	4607      	mov	r7, r0
   1b4ac:	1e76      	subs	r6, r6, #1
   1b4ae:	d001      	beq.n	1b4b4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x42>
   1b4b0:	2f00      	cmp	r7, #0
   1b4b2:	d0e2      	beq.n	1b47a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8>
   1b4b4:	b10d      	cbz	r5, 1b4ba <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x48>
   1b4b6:	4628      	mov	r0, r5
   1b4b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b4ba:	f240 1177 	movw	r1, #375	; 0x177
   1b4be:	200f      	movs	r0, #15
   1b4c0:	f7f5 fa56 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b4c4:	ea00 0040 	and.w	r0, r0, r0, lsl #1
   1b4c8:	ea00 0040 	and.w	r0, r0, r0, lsl #1
   1b4cc:	ea00 0040 	and.w	r0, r0, r0, lsl #1
   1b4d0:	ea00 0040 	and.w	r0, r0, r0, lsl #1
   1b4d4:	ea00 0040 	and.w	r0, r0, r0, lsl #1
   1b4d8:	ea10 0f40 	tst.w	r0, r0, lsl #1
   1b4dc:	d001      	beq.n	1b4e2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x70>
   1b4de:	2000      	movs	r0, #0
   1b4e0:	4770      	bx	lr
   1b4e2:	2001      	movs	r0, #1
   1b4e4:	4770      	bx	lr

0001b4e6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
   1b4e6:	b510      	push	{r4, lr}
   1b4e8:	4604      	mov	r4, r0
   1b4ea:	2108      	movs	r1, #8
   1b4ec:	4620      	mov	r0, r4
   1b4ee:	f7f5 fae9 	bl	10ac4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1b4f2:	6820      	ldr	r0, [r4, #0]
   1b4f4:	2800      	cmp	r0, #0
   1b4f6:	d102      	bne.n	1b4fe <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
   1b4f8:	6860      	ldr	r0, [r4, #4]
   1b4fa:	2800      	cmp	r0, #0
   1b4fc:	d0f5      	beq.n	1b4ea <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
   1b4fe:	bd10      	pop	{r4, pc}
   1b500:	2801      	cmp	r0, #1
   1b502:	d102      	bne.n	1b50a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
   1b504:	7948      	ldrb	r0, [r1, #5]
   1b506:	0980      	lsrs	r0, r0, #6
   1b508:	d001      	beq.n	1b50e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
   1b50a:	2000      	movs	r0, #0
   1b50c:	4770      	bx	lr
   1b50e:	2001      	movs	r0, #1
   1b510:	4770      	bx	lr
   1b512:	2801      	cmp	r0, #1
   1b514:	d106      	bne.n	1b524 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
   1b516:	7948      	ldrb	r0, [r1, #5]
   1b518:	2101      	movs	r1, #1
   1b51a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
   1b51e:	d101      	bne.n	1b524 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
   1b520:	2001      	movs	r0, #1
   1b522:	4770      	bx	lr
   1b524:	2000      	movs	r0, #0
   1b526:	4770      	bx	lr
   1b528:	b118      	cbz	r0, 1b532 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
   1b52a:	2802      	cmp	r0, #2
   1b52c:	d001      	beq.n	1b532 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
   1b52e:	2001      	movs	r0, #1
   1b530:	4770      	bx	lr
   1b532:	2000      	movs	r0, #0
   1b534:	4770      	bx	lr
   1b536:	2802      	cmp	r0, #2
   1b538:	d003      	beq.n	1b542 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
   1b53a:	2803      	cmp	r0, #3
   1b53c:	d001      	beq.n	1b542 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
   1b53e:	2000      	movs	r0, #0
   1b540:	4770      	bx	lr
   1b542:	2001      	movs	r0, #1
   1b544:	4770      	bx	lr

0001b546 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
   1b546:	f7f8 bddb 	b.w	14100 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
   1b54a:	b510      	push	{r4, lr}
   1b54c:	f7f8 fc26 	bl	13d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
   1b550:	f7f7 ffc8 	bl	134e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
   1b554:	f7fc fdbc 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1b558:	2005      	movs	r0, #5
   1b55a:	bd10      	pop	{r4, pc}
   1b55c:	b510      	push	{r4, lr}
   1b55e:	f7f8 fc1d 	bl	13d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
   1b562:	f7fc fdb5 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1b566:	2005      	movs	r0, #5
   1b568:	bd10      	pop	{r4, pc}
   1b56a:	b530      	push	{r4, r5, lr}
   1b56c:	b089      	sub	sp, #36	; 0x24
   1b56e:	4605      	mov	r5, r0
   1b570:	f7f8 fc14 	bl	13d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
   1b574:	7828      	ldrb	r0, [r5, #0]
   1b576:	4669      	mov	r1, sp
   1b578:	f000 040f 	and.w	r4, r0, #15
   1b57c:	4622      	mov	r2, r4
   1b57e:	4628      	mov	r0, r5
   1b580:	f7f8 ff7e 	bl	14480 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
   1b584:	2200      	movs	r2, #0
   1b586:	4621      	mov	r1, r4
   1b588:	4668      	mov	r0, sp
   1b58a:	f7f8 f82b 	bl	135e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
   1b58e:	4621      	mov	r1, r4
   1b590:	4668      	mov	r0, sp
   1b592:	f7f8 fb83 	bl	13c9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f4>
   1b596:	4604      	mov	r4, r0
   1b598:	f7f7 ffa4 	bl	134e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
   1b59c:	b009      	add	sp, #36	; 0x24
   1b59e:	4620      	mov	r0, r4
   1b5a0:	bd30      	pop	{r4, r5, pc}
   1b5a2:	f240 21f2 	movw	r1, #754	; 0x2f2
   1b5a6:	2032      	movs	r0, #50	; 0x32
   1b5a8:	f7f5 f9e2 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b5ac:	b510      	push	{r4, lr}
   1b5ae:	f7f8 fbf5 	bl	13d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
   1b5b2:	f7fc fd8d 	bl	180d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1b5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b5ba:	f7f8 bdb9 	b.w	14130 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc88>
   1b5be:	f7f8 bd9f 	b.w	14100 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
   1b5c2:	f7ff b81f 	b.w	1a604 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0001b5c6 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
   1b5c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5c8:	b08b      	sub	sp, #44	; 0x2c
   1b5ca:	4607      	mov	r7, r0
   1b5cc:	f7f5 fe02 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   1b5d0:	4604      	mov	r4, r0
   1b5d2:	f7fe fed4 	bl	1a37e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
   1b5d6:	0005      	movs	r5, r0
   1b5d8:	d00c      	beq.n	1b5f4 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
   1b5da:	4620      	mov	r0, r4
   1b5dc:	4629      	mov	r1, r5
   1b5de:	466a      	mov	r2, sp
   1b5e0:	f7fe fefe 	bl	1a3e0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   1b5e4:	4606      	mov	r6, r0
   1b5e6:	f7f5 fdef 	bl	111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   1b5ea:	42b0      	cmp	r0, r6
   1b5ec:	d005      	beq.n	1b5fa <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
   1b5ee:	f44f 7198 	mov.w	r1, #304	; 0x130
   1b5f2:	e033      	b.n	1b65c <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
   1b5f4:	2000      	movs	r0, #0
   1b5f6:	b00b      	add	sp, #44	; 0x2c
   1b5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b5fa:	a901      	add	r1, sp, #4
   1b5fc:	9800      	ldr	r0, [sp, #0]
   1b5fe:	f000 f8b4 	bl	1b76a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
   1b602:	1d3e      	adds	r6, r7, #4
   1b604:	4628      	mov	r0, r5
   1b606:	f7fe fe4e 	bl	1a2a6 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   1b60a:	4605      	mov	r5, r0
   1b60c:	4601      	mov	r1, r0
   1b60e:	221c      	movs	r2, #28
   1b610:	4630      	mov	r0, r6
   1b612:	f7fd ffcc 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1b616:	7aa8      	ldrb	r0, [r5, #10]
   1b618:	f04f 0500 	mov.w	r5, #0
   1b61c:	06c1      	lsls	r1, r0, #27
   1b61e:	d50d      	bpl.n	1b63c <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
   1b620:	0740      	lsls	r0, r0, #29
   1b622:	d40a      	bmi.n	1b63a <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
   1b624:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1b628:	f106 001c 	add.w	r0, r6, #28
   1b62c:	9904      	ldr	r1, [sp, #16]
   1b62e:	f7fd ffbe 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1b632:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1b636:	7230      	strb	r0, [r6, #8]
   1b638:	e000      	b.n	1b63c <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
   1b63a:	7235      	strb	r5, [r6, #8]
   1b63c:	707d      	strb	r5, [r7, #1]
   1b63e:	2005      	movs	r0, #5
   1b640:	7038      	strb	r0, [r7, #0]
   1b642:	4620      	mov	r0, r4
   1b644:	f7fe fe4a 	bl	1a2dc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
   1b648:	b130      	cbz	r0, 1b658 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
   1b64a:	2100      	movs	r1, #0
   1b64c:	4620      	mov	r0, r4
   1b64e:	460a      	mov	r2, r1
   1b650:	f7fe ffa4 	bl	1a59c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   1b654:	2001      	movs	r0, #1
   1b656:	e7ce      	b.n	1b5f6 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
   1b658:	f240 1173 	movw	r1, #371	; 0x173
   1b65c:	2033      	movs	r0, #51	; 0x33
   1b65e:	f7f5 f987 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001b662 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
   1b662:	b510      	push	{r4, lr}
   1b664:	f7f5 fdb6 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   1b668:	f000 f874 	bl	1b754 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
   1b66c:	4604      	mov	r4, r0
   1b66e:	221c      	movs	r2, #28
   1b670:	2100      	movs	r1, #0
   1b672:	f7fe f816 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1b676:	207f      	movs	r0, #127	; 0x7f
   1b678:	76a0      	strb	r0, [r4, #26]
   1b67a:	21ff      	movs	r1, #255	; 0xff
   1b67c:	73a1      	strb	r1, [r4, #14]
   1b67e:	7061      	strb	r1, [r4, #1]
   1b680:	74e1      	strb	r1, [r4, #19]
   1b682:	7aa0      	ldrb	r0, [r4, #10]
   1b684:	f020 0060 	bic.w	r0, r0, #96	; 0x60
   1b688:	3020      	adds	r0, #32
   1b68a:	72a0      	strb	r0, [r4, #10]
   1b68c:	bd10      	pop	{r4, pc}

0001b68e <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
   1b68e:	f7ff bfe8 	b.w	1b662 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0001b692 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
   1b692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b696:	461e      	mov	r6, r3
   1b698:	4617      	mov	r7, r2
   1b69a:	4689      	mov	r9, r1
   1b69c:	4682      	mov	sl, r0
   1b69e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1b6a2:	f7f5 fd97 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   1b6a6:	4604      	mov	r4, r0
   1b6a8:	f7fe fdff 	bl	1a2aa <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
   1b6ac:	2801      	cmp	r0, #1
   1b6ae:	d034      	beq.n	1b71a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
   1b6b0:	4620      	mov	r0, r4
   1b6b2:	f000 f84f 	bl	1b754 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
   1b6b6:	4604      	mov	r4, r0
   1b6b8:	221c      	movs	r2, #28
   1b6ba:	2100      	movs	r1, #0
   1b6bc:	f7fd fff1 	bl	196a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1b6c0:	2501      	movs	r5, #1
   1b6c2:	7025      	strb	r5, [r4, #0]
   1b6c4:	1c63      	adds	r3, r4, #1
   1b6c6:	1ca2      	adds	r2, r4, #2
   1b6c8:	4649      	mov	r1, r9
   1b6ca:	4650      	mov	r0, sl
   1b6cc:	f000 f827 	bl	1b71e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
   1b6d0:	f884 8009 	strb.w	r8, [r4, #9]
   1b6d4:	7aa0      	ldrb	r0, [r4, #10]
   1b6d6:	21ff      	movs	r1, #255	; 0xff
   1b6d8:	f367 0000 	bfi	r0, r7, #0, #1
   1b6dc:	f040 001a 	orr.w	r0, r0, #26
   1b6e0:	72a0      	strb	r0, [r4, #10]
   1b6e2:	7325      	strb	r5, [r4, #12]
   1b6e4:	2000      	movs	r0, #0
   1b6e6:	7360      	strb	r0, [r4, #13]
   1b6e8:	73a1      	strb	r1, [r4, #14]
   1b6ea:	74e1      	strb	r1, [r4, #19]
   1b6ec:	207f      	movs	r0, #127	; 0x7f
   1b6ee:	76a0      	strb	r0, [r4, #26]
   1b6f0:	76e6      	strb	r6, [r4, #27]
   1b6f2:	f7f5 fd69 	bl	111c8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
   1b6f6:	4604      	mov	r4, r0
   1b6f8:	f7f5 fd6c 	bl	111d4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
   1b6fc:	2201      	movs	r2, #1
   1b6fe:	4621      	mov	r1, r4
   1b700:	f000 f831 	bl	1b766 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
   1b704:	b120      	cbz	r0, 1b710 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
   1b706:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b70a:	2005      	movs	r0, #5
   1b70c:	f7f8 bf80 	b.w	14610 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
   1b710:	f240 21c9 	movw	r1, #713	; 0x2c9
   1b714:	2033      	movs	r0, #51	; 0x33
   1b716:	f7f5 f92b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b71e:	b510      	push	{r4, lr}
   1b720:	461c      	mov	r4, r3
   1b722:	460b      	mov	r3, r1
   1b724:	29ff      	cmp	r1, #255	; 0xff
   1b726:	d00d      	beq.n	1b744 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
   1b728:	4621      	mov	r1, r4
   1b72a:	4618      	mov	r0, r3
   1b72c:	f7f6 fdee 	bl	1230c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   1b730:	b120      	cbz	r0, 1b73c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
   1b732:	7820      	ldrb	r0, [r4, #0]
   1b734:	f040 0002 	orr.w	r0, r0, #2
   1b738:	7020      	strb	r0, [r4, #0]
   1b73a:	bd10      	pop	{r4, pc}
   1b73c:	2150      	movs	r1, #80	; 0x50
   1b73e:	2033      	movs	r0, #51	; 0x33
   1b740:	f7f5 f916 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b744:	7c41      	ldrb	r1, [r0, #17]
   1b746:	7021      	strb	r1, [r4, #0]
   1b748:	6840      	ldr	r0, [r0, #4]
   1b74a:	6801      	ldr	r1, [r0, #0]
   1b74c:	6011      	str	r1, [r2, #0]
   1b74e:	8880      	ldrh	r0, [r0, #4]
   1b750:	8090      	strh	r0, [r2, #4]
   1b752:	bd10      	pop	{r4, pc}
   1b754:	b51c      	push	{r2, r3, r4, lr}
   1b756:	4669      	mov	r1, sp
   1b758:	aa01      	add	r2, sp, #4
   1b75a:	f7fe fe33 	bl	1a3c4 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
   1b75e:	9800      	ldr	r0, [sp, #0]
   1b760:	f7fe fda1 	bl	1a2a6 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   1b764:	bd1c      	pop	{r2, r3, r4, pc}
   1b766:	f7fe bd46 	b.w	1a1f6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0001b76a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
   1b76a:	7802      	ldrb	r2, [r0, #0]
   1b76c:	f002 020f 	and.w	r2, r2, #15
   1b770:	f7f8 be86 	b.w	14480 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
   1b774:	2800      	cmp	r0, #0
   1b776:	db04      	blt.n	1b782 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
   1b778:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1b77c:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
   1b780:	e005      	b.n	1b78e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
   1b782:	f000 000f 	and.w	r0, r0, #15
   1b786:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1b78a:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
   1b78e:	0940      	lsrs	r0, r0, #5
   1b790:	4770      	bx	lr
   1b792:	6940      	ldr	r0, [r0, #20]
   1b794:	2800      	cmp	r0, #0
   1b796:	d000      	beq.n	1b79a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
   1b798:	2001      	movs	r0, #1
   1b79a:	4770      	bx	lr

0001b79c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
   1b79c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
   1b7a0:	4770      	bx	lr
   1b7a2:	b510      	push	{r4, lr}
   1b7a4:	2808      	cmp	r0, #8
   1b7a6:	d00a      	beq.n	1b7be <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x22>
   1b7a8:	2804      	cmp	r0, #4
   1b7aa:	d00a      	beq.n	1b7c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x26>
   1b7ac:	2802      	cmp	r0, #2
   1b7ae:	d00a      	beq.n	1b7c6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2a>
   1b7b0:	2108      	movs	r1, #8
   1b7b2:	2801      	cmp	r0, #1
   1b7b4:	d009      	beq.n	1b7ca <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
   1b7b6:	21d9      	movs	r1, #217	; 0xd9
   1b7b8:	2005      	movs	r0, #5
   1b7ba:	f7f5 f8d9 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b7be:	2140      	movs	r1, #64	; 0x40
   1b7c0:	e7f7      	b.n	1b7b2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
   1b7c2:	2110      	movs	r1, #16
   1b7c4:	e7f5      	b.n	1b7b2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
   1b7c6:	2104      	movs	r1, #4
   1b7c8:	e7f3      	b.n	1b7b2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
   1b7ca:	222a      	movs	r2, #42	; 0x2a
   1b7cc:	2028      	movs	r0, #40	; 0x28
   1b7ce:	fb11 0002 	smlabb	r0, r1, r2, r0
   1b7d2:	b280      	uxth	r0, r0
   1b7d4:	bd10      	pop	{r4, pc}
   1b7d6:	2000      	movs	r0, #0
   1b7d8:	4770      	bx	lr
   1b7da:	b570      	push	{r4, r5, r6, lr}
   1b7dc:	4604      	mov	r4, r0
   1b7de:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
   1b7e2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   1b7e6:	f000 f80c 	bl	1b802 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x66>
   1b7ea:	4605      	mov	r5, r0
   1b7ec:	f000 f857 	bl	1b89e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
   1b7f0:	4601      	mov	r1, r0
   1b7f2:	462a      	mov	r2, r5
   1b7f4:	4620      	mov	r0, r4
   1b7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b7fa:	f7ff bda7 	b.w	1b34c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   1b7fe:	f7f2 be05 	b.w	e40c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   1b802:	b510      	push	{r4, lr}
   1b804:	4604      	mov	r4, r0
   1b806:	4608      	mov	r0, r1
   1b808:	f001 f919 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b80c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b810:	2c02      	cmp	r4, #2
   1b812:	d00a      	beq.n	1b82a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x8e>
   1b814:	f640 0234 	movw	r2, #2100	; 0x834
   1b818:	4410      	add	r0, r2
   1b81a:	f24a 5295 	movw	r2, #42389	; 0xa595
   1b81e:	4410      	add	r0, r2
   1b820:	fbb0 f0f1 	udiv	r0, r0, r1
   1b824:	f200 1037 	addw	r0, r0, #311	; 0x137
   1b828:	bd10      	pop	{r4, pc}
   1b82a:	460a      	mov	r2, r1
   1b82c:	e7f4      	b.n	1b818 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7c>
   1b82e:	b510      	push	{r4, lr}
   1b830:	4604      	mov	r4, r0
   1b832:	2000      	movs	r0, #0
   1b834:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
   1b838:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   1b83c:	f7f3 fa32 	bl	eca4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1b840:	b140      	cbz	r0, 1b854 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb8>
   1b842:	2020      	movs	r0, #32
   1b844:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
   1b848:	f504 7084 	add.w	r0, r4, #264	; 0x108
   1b84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b850:	f7fb bcaa 	b.w	171a8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
   1b854:	f44f 61a6 	mov.w	r1, #1328	; 0x530
   1b858:	2035      	movs	r0, #53	; 0x35
   1b85a:	f7f5 f889 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b85e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1b860:	4613      	mov	r3, r2
   1b862:	460a      	mov	r2, r1
   1b864:	4604      	mov	r4, r0
   1b866:	4601      	mov	r1, r0
   1b868:	4668      	mov	r0, sp
   1b86a:	f7f9 fab7 	bl	14ddc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x520>
   1b86e:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   1b872:	4669      	mov	r1, sp
   1b874:	f7ff ffc3 	bl	1b7fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
   1b878:	2800      	cmp	r0, #0
   1b87a:	d104      	bne.n	1b886 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xea>
   1b87c:	f640 2139 	movw	r1, #2617	; 0xa39
   1b880:	2035      	movs	r0, #53	; 0x35
   1b882:	f7f5 f875 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b886:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   1b888:	b510      	push	{r4, lr}
   1b88a:	245b      	movs	r4, #91	; 0x5b
   1b88c:	f001 f895 	bl	1c9ba <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
   1b890:	b910      	cbnz	r0, 1b898 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
   1b892:	f001 f888 	bl	1c9a6 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
   1b896:	b100      	cbz	r0, 1b89a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfe>
   1b898:	2462      	movs	r4, #98	; 0x62
   1b89a:	4620      	mov	r0, r4
   1b89c:	bd10      	pop	{r4, pc}
   1b89e:	b510      	push	{r4, lr}
   1b8a0:	f7ff fff2 	bl	1b888 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
   1b8a4:	3069      	adds	r0, #105	; 0x69
   1b8a6:	b280      	uxth	r0, r0
   1b8a8:	bd10      	pop	{r4, pc}
   1b8aa:	b510      	push	{r4, lr}
   1b8ac:	f7ff ffec 	bl	1b888 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
   1b8b0:	30ff      	adds	r0, #255	; 0xff
   1b8b2:	b280      	uxth	r0, r0
   1b8b4:	bd10      	pop	{r4, pc}
   1b8b6:	b1d0      	cbz	r0, 1b8ee <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x152>
   1b8b8:	2908      	cmp	r1, #8
   1b8ba:	d011      	beq.n	1b8e0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x144>
   1b8bc:	2904      	cmp	r1, #4
   1b8be:	d00b      	beq.n	1b8d8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x13c>
   1b8c0:	2000      	movs	r0, #0
   1b8c2:	2902      	cmp	r1, #2
   1b8c4:	d010      	beq.n	1b8e8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x14c>
   1b8c6:	2108      	movs	r1, #8
   1b8c8:	3028      	adds	r0, #40	; 0x28
   1b8ca:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
   1b8ce:	eb02 1141 	add.w	r1, r2, r1, lsl #5
   1b8d2:	4408      	add	r0, r1
   1b8d4:	3098      	adds	r0, #152	; 0x98
   1b8d6:	4770      	bx	lr
   1b8d8:	f44f 70bf 	mov.w	r0, #382	; 0x17e
   1b8dc:	2110      	movs	r1, #16
   1b8de:	e7f4      	b.n	1b8ca <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
   1b8e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1b8e4:	2140      	movs	r1, #64	; 0x40
   1b8e6:	e7f0      	b.n	1b8ca <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
   1b8e8:	2104      	movs	r1, #4
   1b8ea:	3018      	adds	r0, #24
   1b8ec:	e7ed      	b.n	1b8ca <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
   1b8ee:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
   1b8f2:	4770      	bx	lr
   1b8f4:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1b8f8:	f001 0307 	and.w	r3, r1, #7
   1b8fc:	7802      	ldrb	r2, [r0, #0]
   1b8fe:	2101      	movs	r1, #1
   1b900:	4099      	lsls	r1, r3
   1b902:	438a      	bics	r2, r1
   1b904:	7002      	strb	r2, [r0, #0]
   1b906:	4770      	bx	lr

0001b908 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   1b908:	f7f5 bbbc 	b.w	11084 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0001b90c <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
   1b90c:	2000      	movs	r0, #0
   1b90e:	4770      	bx	lr

0001b910 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
   1b910:	b538      	push	{r3, r4, r5, lr}
   1b912:	460d      	mov	r5, r1
   1b914:	4604      	mov	r4, r0
   1b916:	e050      	b.n	1b9ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
   1b918:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
   1b91c:	1c40      	adds	r0, r0, #1
   1b91e:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
   1b922:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
   1b926:	1c40      	adds	r0, r0, #1
   1b928:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
   1b92c:	4620      	mov	r0, r4
   1b92e:	f000 f8e1 	bl	1baf4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
   1b932:	b198      	cbz	r0, 1b95c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
   1b934:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1b938:	1c40      	adds	r0, r0, #1
   1b93a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
   1b93e:	4620      	mov	r0, r4
   1b940:	f000 f86e 	bl	1ba20 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
   1b944:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
   1b948:	4288      	cmp	r0, r1
   1b94a:	d307      	bcc.n	1b95c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
   1b94c:	2000      	movs	r0, #0
   1b94e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
   1b952:	2001      	movs	r0, #1
   1b954:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
   1b958:	f7f7 f94a 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1b95c:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
   1b960:	b120      	cbz	r0, 1b96c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
   1b962:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
   1b966:	1c40      	adds	r0, r0, #1
   1b968:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
   1b96c:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
   1b970:	b120      	cbz	r0, 1b97c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
   1b972:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
   1b976:	1c40      	adds	r0, r0, #1
   1b978:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
   1b97c:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
   1b980:	f88d 0000 	strb.w	r0, [sp]
   1b984:	9800      	ldr	r0, [sp, #0]
   1b986:	9000      	str	r0, [sp, #0]
   1b988:	f89d 0000 	ldrb.w	r0, [sp]
   1b98c:	b940      	cbnz	r0, 1b9a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
   1b98e:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
   1b992:	2300      	movs	r3, #0
   1b994:	2101      	movs	r1, #1
   1b996:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1b99a:	f7ff f88a 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1b99e:	b120      	cbz	r0, 1b9aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
   1b9a0:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
   1b9a4:	1c40      	adds	r0, r0, #1
   1b9a6:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
   1b9aa:	4620      	mov	r0, r4
   1b9ac:	f000 f847 	bl	1ba3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
   1b9b0:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   1b9b4:	1c40      	adds	r0, r0, #1
   1b9b6:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
   1b9ba:	1e6d      	subs	r5, r5, #1
   1b9bc:	b2ad      	uxth	r5, r5
   1b9be:	d2ab      	bcs.n	1b918 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
   1b9c0:	bd38      	pop	{r3, r4, r5, pc}

0001b9c2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
   1b9c2:	b510      	push	{r4, lr}
   1b9c4:	f7fa fb5c 	bl	16080 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
   1b9c8:	b128      	cbz	r0, 1b9d6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
   1b9ca:	2000      	movs	r0, #0
   1b9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b9d0:	4601      	mov	r1, r0
   1b9d2:	f7fa bb01 	b.w	15fd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
   1b9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b9da:	f7f5 bff5 	b.w	119c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
   1b9de:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
   1b9e2:	28fe      	cmp	r0, #254	; 0xfe
   1b9e4:	d001      	beq.n	1b9ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
   1b9e6:	2001      	movs	r0, #1
   1b9e8:	4770      	bx	lr
   1b9ea:	2000      	movs	r0, #0
   1b9ec:	4770      	bx	lr
   1b9ee:	b510      	push	{r4, lr}
   1b9f0:	2801      	cmp	r0, #1
   1b9f2:	d006      	beq.n	1ba02 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
   1b9f4:	2802      	cmp	r0, #2
   1b9f6:	d004      	beq.n	1ba02 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
   1b9f8:	f240 2163 	movw	r1, #611	; 0x263
   1b9fc:	2006      	movs	r0, #6
   1b9fe:	f7f4 ffb7 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ba02:	bd10      	pop	{r4, pc}
   1ba04:	2801      	cmp	r0, #1
   1ba06:	d002      	beq.n	1ba0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
   1ba08:	2802      	cmp	r0, #2
   1ba0a:	d105      	bne.n	1ba18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
   1ba0c:	e002      	b.n	1ba14 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
   1ba0e:	2901      	cmp	r1, #1
   1ba10:	d004      	beq.n	1ba1c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
   1ba12:	e001      	b.n	1ba18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
   1ba14:	2902      	cmp	r1, #2
   1ba16:	d001      	beq.n	1ba1c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
   1ba18:	2000      	movs	r0, #0
   1ba1a:	4770      	bx	lr
   1ba1c:	2001      	movs	r0, #1
   1ba1e:	4770      	bx	lr
   1ba20:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
   1ba24:	428a      	cmp	r2, r1
   1ba26:	d301      	bcc.n	1ba2c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
   1ba28:	1a51      	subs	r1, r2, r1
   1ba2a:	e000      	b.n	1ba2e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
   1ba2c:	2100      	movs	r1, #0
   1ba2e:	8a82      	ldrh	r2, [r0, #20]
   1ba30:	1d52      	adds	r2, r2, #5
   1ba32:	428a      	cmp	r2, r1
   1ba34:	d302      	bcc.n	1ba3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
   1ba36:	2101      	movs	r1, #1
   1ba38:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
   1ba3c:	4770      	bx	lr
   1ba3e:	b570      	push	{r4, r5, r6, lr}
   1ba40:	4604      	mov	r4, r0
   1ba42:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
   1ba46:	2500      	movs	r5, #0
   1ba48:	2601      	movs	r6, #1
   1ba4a:	280c      	cmp	r0, #12
   1ba4c:	d02c      	beq.n	1baa8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
   1ba4e:	280d      	cmp	r0, #13
   1ba50:	d129      	bne.n	1baa6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
   1ba52:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   1ba56:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
   1ba5a:	1c40      	adds	r0, r0, #1
   1ba5c:	4288      	cmp	r0, r1
   1ba5e:	d122      	bne.n	1baa6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
   1ba60:	8820      	ldrh	r0, [r4, #0]
   1ba62:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
   1ba66:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   1ba6a:	f7fe ffd8 	bl	1aa1e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   1ba6e:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
   1ba72:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
   1ba76:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
   1ba7a:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
   1ba7e:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
   1ba82:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
   1ba86:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
   1ba8a:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
   1ba8e:	2102      	movs	r1, #2
   1ba90:	4620      	mov	r0, r4
   1ba92:	f7f6 fe6f 	bl	12774 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
   1ba96:	f7f7 f8ab 	bl	12bf0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1ba9a:	2103      	movs	r1, #3
   1ba9c:	4620      	mov	r0, r4
   1ba9e:	f7f8 fd49 	bl	14534 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
   1baa2:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
   1baa6:	bd70      	pop	{r4, r5, r6, pc}
   1baa8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   1baac:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
   1bab0:	1c40      	adds	r0, r0, #1
   1bab2:	4288      	cmp	r0, r1
   1bab4:	d1f7      	bne.n	1baa6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
   1bab6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   1baba:	f8d0 1001 	ldr.w	r1, [r0, #1]
   1babe:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
   1bac2:	7940      	ldrb	r0, [r0, #5]
   1bac4:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
   1bac8:	2103      	movs	r1, #3
   1baca:	4620      	mov	r0, r4
   1bacc:	f7f6 fe52 	bl	12774 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
   1bad0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   1bad4:	7800      	ldrb	r0, [r0, #0]
   1bad6:	b140      	cbz	r0, 1baea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
   1bad8:	2101      	movs	r1, #1
   1bada:	20fe      	movs	r0, #254	; 0xfe
   1badc:	f7fb faec 	bl	170b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
   1bae0:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
   1bae4:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
   1bae8:	bd70      	pop	{r4, r5, r6, pc}
   1baea:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   1baee:	2036      	movs	r0, #54	; 0x36
   1baf0:	f7f4 ff3e 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1baf4:	b510      	push	{r4, lr}
   1baf6:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
   1bafa:	b941      	cbnz	r1, 1bb0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
   1bafc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
   1bb00:	2300      	movs	r3, #0
   1bb02:	2106      	movs	r1, #6
   1bb04:	3078      	adds	r0, #120	; 0x78
   1bb06:	f7fe ffd4 	bl	1aab2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1bb0a:	2800      	cmp	r0, #0
   1bb0c:	d000      	beq.n	1bb10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
   1bb0e:	2001      	movs	r0, #1
   1bb10:	bd10      	pop	{r4, pc}

0001bb12 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
   1bb12:	b510      	push	{r4, lr}
   1bb14:	460c      	mov	r4, r1
   1bb16:	4601      	mov	r1, r0
   1bb18:	4610      	mov	r0, r2
   1bb1a:	f7f2 fb39 	bl	e190 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1bb1e:	2800      	cmp	r0, #0
   1bb20:	da06      	bge.n	1bb30 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
   1bb22:	1a21      	subs	r1, r4, r0
   1bb24:	1e49      	subs	r1, r1, #1
   1bb26:	fbb1 f1f4 	udiv	r1, r1, r4
   1bb2a:	fb01 0004 	mla	r0, r1, r4, r0
   1bb2e:	bd10      	pop	{r4, pc}
   1bb30:	fb90 f1f4 	sdiv	r1, r0, r4
   1bb34:	fb01 0014 	mls	r0, r1, r4, r0
   1bb38:	bd10      	pop	{r4, pc}
   1bb3a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1bb3e:	f001 0107 	and.w	r1, r1, #7
   1bb42:	7800      	ldrb	r0, [r0, #0]
   1bb44:	2201      	movs	r2, #1
   1bb46:	408a      	lsls	r2, r1
   1bb48:	4010      	ands	r0, r2
   1bb4a:	40c8      	lsrs	r0, r1
   1bb4c:	4770      	bx	lr
   1bb4e:	b118      	cbz	r0, 1bb58 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
   1bb50:	2802      	cmp	r0, #2
   1bb52:	d001      	beq.n	1bb58 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
   1bb54:	2001      	movs	r0, #1
   1bb56:	4770      	bx	lr
   1bb58:	2000      	movs	r0, #0
   1bb5a:	4770      	bx	lr

0001bb5c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   1bb5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1bb5e:	7881      	ldrb	r1, [r0, #2]
   1bb60:	4604      	mov	r4, r0
   1bb62:	291a      	cmp	r1, #26
   1bb64:	d025      	beq.n	1bbb2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   1bb66:	dc0e      	bgt.n	1bb86 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   1bb68:	2916      	cmp	r1, #22
   1bb6a:	d22d      	bcs.n	1bbc8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1bb6c:	e8df f001 	tbb	[pc, r1]
   1bb70:	2c2c2c2c 	.word	0x2c2c2c2c
   1bb74:	2c2c212c 	.word	0x2c2c212c
   1bb78:	2c2c2c2c 	.word	0x2c2c2c2c
   1bb7c:	2c2c2c2c 	.word	0x2c2c2c2c
   1bb80:	212c2c2c 	.word	0x212c2c2c
   1bb84:	2121      	.short	0x2121
   1bb86:	292a      	cmp	r1, #42	; 0x2a
   1bb88:	d01e      	beq.n	1bbc8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1bb8a:	dc0b      	bgt.n	1bba4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   1bb8c:	f1a1 011e 	sub.w	r1, r1, #30
   1bb90:	290c      	cmp	r1, #12
   1bb92:	d219      	bcs.n	1bbc8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1bb94:	e8df f001 	tbb	[pc, r1]
   1bb98:	18181818 	.word	0x18181818
   1bb9c:	18181818 	.word	0x18181818
   1bba0:	0d181818 	.word	0x0d181818
   1bba4:	393a      	subs	r1, #58	; 0x3a
   1bba6:	2904      	cmp	r1, #4
   1bba8:	d20e      	bcs.n	1bbc8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1bbaa:	e8df f001 	tbb	[pc, r1]
   1bbae:	020d      	.short	0x020d
   1bbb0:	020d      	.short	0x020d
   1bbb2:	8820      	ldrh	r0, [r4, #0]
   1bbb4:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   1bbb8:	d206      	bcs.n	1bbc8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1bbba:	2701      	movs	r7, #1
   1bbbc:	4669      	mov	r1, sp
   1bbbe:	f7fe ff1e 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1bbc2:	b118      	cbz	r0, 1bbcc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   1bbc4:	2002      	movs	r0, #2
   1bbc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bbc8:	2012      	movs	r0, #18
   1bbca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bbcc:	9d01      	ldr	r5, [sp, #4]
   1bbce:	4668      	mov	r0, sp
   1bbd0:	462e      	mov	r6, r5
   1bbd2:	f505 759e 	add.w	r5, r5, #316	; 0x13c
   1bbd6:	f206 163d 	addw	r6, r6, #317	; 0x13d
   1bbda:	f000 fd7f 	bl	1c6dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
   1bbde:	b138      	cbz	r0, 1bbf0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
   1bbe0:	7828      	ldrb	r0, [r5, #0]
   1bbe2:	f88d 0008 	strb.w	r0, [sp, #8]
   1bbe6:	9802      	ldr	r0, [sp, #8]
   1bbe8:	9002      	str	r0, [sp, #8]
   1bbea:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1bbee:	b108      	cbz	r0, 1bbf4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
   1bbf0:	200c      	movs	r0, #12
   1bbf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bbf4:	702f      	strb	r7, [r5, #0]
   1bbf6:	78a0      	ldrb	r0, [r4, #2]
   1bbf8:	7030      	strb	r0, [r6, #0]
   1bbfa:	2000      	movs	r0, #0
   1bbfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001bbfe <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   1bbfe:	b510      	push	{r4, lr}
   1bc00:	4604      	mov	r4, r0
   1bc02:	7800      	ldrb	r0, [r0, #0]
   1bc04:	b118      	cbz	r0, 1bc0e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1bc06:	2801      	cmp	r0, #1
   1bc08:	d001      	beq.n	1bc0e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1bc0a:	2012      	movs	r0, #18
   1bc0c:	bd10      	pop	{r4, pc}
   1bc0e:	f000 fd7c 	bl	1c70a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
   1bc12:	b120      	cbz	r0, 1bc1e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1bc14:	f7f6 fb74 	bl	12300 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1bc18:	b108      	cbz	r0, 1bc1e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1bc1a:	200c      	movs	r0, #12
   1bc1c:	bd10      	pop	{r4, pc}
   1bc1e:	7820      	ldrb	r0, [r4, #0]
   1bc20:	f7ff ff95 	bl	1bb4e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   1bc24:	1de2      	adds	r2, r4, #7
   1bc26:	f104 0317 	add.w	r3, r4, #23
   1bc2a:	1c61      	adds	r1, r4, #1
   1bc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bc30:	f7f6 bb98 	b.w	12364 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0001bc34 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1bc34:	b510      	push	{r4, lr}
   1bc36:	4604      	mov	r4, r0
   1bc38:	f000 fe0e 	bl	1c858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
   1bc3c:	b108      	cbz	r0, 1bc42 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   1bc3e:	200c      	movs	r0, #12
   1bc40:	bd10      	pop	{r4, pc}
   1bc42:	7820      	ldrb	r0, [r4, #0]
   1bc44:	b118      	cbz	r0, 1bc4e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1bc46:	2801      	cmp	r0, #1
   1bc48:	d001      	beq.n	1bc4e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1bc4a:	2012      	movs	r0, #18
   1bc4c:	bd10      	pop	{r4, pc}
   1bc4e:	f7ff ff7e 	bl	1bb4e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   1bc52:	1c61      	adds	r1, r4, #1
   1bc54:	f7f6 fc2a 	bl	124ac <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   1bc58:	b108      	cbz	r0, 1bc5e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   1bc5a:	2000      	movs	r0, #0
   1bc5c:	bd10      	pop	{r4, pc}
   1bc5e:	2007      	movs	r0, #7
   1bc60:	bd10      	pop	{r4, pc}

0001bc62 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   1bc62:	b510      	push	{r4, lr}
   1bc64:	f000 fd51 	bl	1c70a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
   1bc68:	b120      	cbz	r0, 1bc74 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1bc6a:	f7f6 fb49 	bl	12300 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1bc6e:	b108      	cbz	r0, 1bc74 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1bc70:	200c      	movs	r0, #12
   1bc72:	bd10      	pop	{r4, pc}
   1bc74:	f7f6 fbbc 	bl	123f0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   1bc78:	2000      	movs	r0, #0
   1bc7a:	bd10      	pop	{r4, pc}

0001bc7c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   1bc7c:	b510      	push	{r4, lr}
   1bc7e:	f000 fdeb 	bl	1c858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
   1bc82:	b108      	cbz	r0, 1bc88 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   1bc84:	200c      	movs	r0, #12
   1bc86:	bd10      	pop	{r4, pc}
   1bc88:	f7f6 fc38 	bl	124fc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   1bc8c:	2000      	movs	r0, #0
   1bc8e:	bd10      	pop	{r4, pc}

0001bc90 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   1bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc92:	4605      	mov	r5, r0
   1bc94:	f000 fafa 	bl	1c28c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   1bc98:	2800      	cmp	r0, #0
   1bc9a:	d112      	bne.n	1bcc2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
   1bc9c:	8828      	ldrh	r0, [r5, #0]
   1bc9e:	2100      	movs	r1, #0
   1bca0:	f7fe fd43 	bl	1a72a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1bca4:	0004      	movs	r4, r0
   1bca6:	d00d      	beq.n	1bcc4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   1bca8:	f000 fd1b 	bl	1c6e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
   1bcac:	b150      	cbz	r0, 1bcc4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   1bcae:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
   1bcb2:	f88d 0000 	strb.w	r0, [sp]
   1bcb6:	9800      	ldr	r0, [sp, #0]
   1bcb8:	9000      	str	r0, [sp, #0]
   1bcba:	f89d 0000 	ldrb.w	r0, [sp]
   1bcbe:	b118      	cbz	r0, 1bcc8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   1bcc0:	203a      	movs	r0, #58	; 0x3a
   1bcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcc4:	2002      	movs	r0, #2
   1bcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcc8:	88a8      	ldrh	r0, [r5, #4]
   1bcca:	f7fe fea4 	bl	1aa16 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1bcce:	4606      	mov	r6, r0
   1bcd0:	4601      	mov	r1, r0
   1bcd2:	2008      	movs	r0, #8
   1bcd4:	f7ff f86b 	bl	1adae <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   1bcd8:	4601      	mov	r1, r0
   1bcda:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
   1bcde:	4281      	cmp	r1, r0
   1bce0:	d301      	bcc.n	1bce6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
   1bce2:	42b0      	cmp	r0, r6
   1bce4:	d301      	bcc.n	1bcea <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
   1bce6:	2012      	movs	r0, #18
   1bce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcea:	4631      	mov	r1, r6
   1bcec:	2005      	movs	r0, #5
   1bcee:	f7ff f85e 	bl	1adae <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   1bcf2:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
   1bcf6:	2000      	movs	r0, #0
   1bcf8:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
   1bcfc:	88e8      	ldrh	r0, [r5, #6]
   1bcfe:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
   1bd02:	8928      	ldrh	r0, [r5, #8]
   1bd04:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
   1bd08:	f504 74a2 	add.w	r4, r4, #324	; 0x144
   1bd0c:	2001      	movs	r0, #1
   1bd0e:	7020      	strb	r0, [r4, #0]
   1bd10:	2000      	movs	r0, #0
   1bd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bd14 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
   1bd14:	b508      	push	{r3, lr}
   1bd16:	f7f6 ff65 	bl	12be4 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
   1bd1a:	b970      	cbnz	r0, 1bd3a <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
   1bd1c:	f7f8 fdc8 	bl	148b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1bd20:	2805      	cmp	r0, #5
   1bd22:	d005      	beq.n	1bd30 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
   1bd24:	f7f7 fa1a 	bl	1315c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
   1bd28:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
   1bd2c:	39ff      	subs	r1, #255	; 0xff
   1bd2e:	d004      	beq.n	1bd3a <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
   1bd30:	4668      	mov	r0, sp
   1bd32:	f7f8 fd29 	bl	14788 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
   1bd36:	b110      	cbz	r0, 1bd3e <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
   1bd38:	e012      	b.n	1bd60 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x4c>
   1bd3a:	200c      	movs	r0, #12
   1bd3c:	bd08      	pop	{r3, pc}
   1bd3e:	9800      	ldr	r0, [sp, #0]
   1bd40:	8800      	ldrh	r0, [r0, #0]
   1bd42:	f7fe fd5a 	bl	1a7fa <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1bd46:	9800      	ldr	r0, [sp, #0]
   1bd48:	2100      	movs	r1, #0
   1bd4a:	8800      	ldrh	r0, [r0, #0]
   1bd4c:	f7f5 f88e 	bl	10e6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1bd50:	b120      	cbz	r0, 1bd5c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
   1bd52:	f640 717f 	movw	r1, #3967	; 0xf7f
   1bd56:	2039      	movs	r0, #57	; 0x39
   1bd58:	f7f4 fe0a 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1bd5c:	f7f6 ff3a 	bl	12bd4 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>
   1bd60:	2000      	movs	r0, #0
   1bd62:	bd08      	pop	{r3, pc}

0001bd64 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   1bd64:	b510      	push	{r4, lr}
   1bd66:	460b      	mov	r3, r1
   1bd68:	2201      	movs	r2, #1
   1bd6a:	f100 0110 	add.w	r1, r0, #16
   1bd6e:	f7fe fe0a 	bl	1a986 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   1bd72:	2000      	movs	r0, #0
   1bd74:	bd10      	pop	{r4, pc}

0001bd76 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   1bd76:	b510      	push	{r4, lr}
   1bd78:	2108      	movs	r1, #8
   1bd7a:	f7f4 fea3 	bl	10ac4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1bd7e:	2000      	movs	r0, #0
   1bd80:	bd10      	pop	{r4, pc}

0001bd82 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   1bd82:	b510      	push	{r4, lr}
   1bd84:	4604      	mov	r4, r0
   1bd86:	f000 fca3 	bl	1c6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   1bd8a:	b140      	cbz	r0, 1bd9e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   1bd8c:	20fb      	movs	r0, #251	; 0xfb
   1bd8e:	8020      	strh	r0, [r4, #0]
   1bd90:	f640 0148 	movw	r1, #2120	; 0x848
   1bd94:	8061      	strh	r1, [r4, #2]
   1bd96:	80a0      	strh	r0, [r4, #4]
   1bd98:	80e1      	strh	r1, [r4, #6]
   1bd9a:	2000      	movs	r0, #0
   1bd9c:	bd10      	pop	{r4, pc}
   1bd9e:	2001      	movs	r0, #1
   1bda0:	bd10      	pop	{r4, pc}

0001bda2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
   1bda2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1bda4:	460d      	mov	r5, r1
   1bda6:	4606      	mov	r6, r0
   1bda8:	f7fb ff14 	bl	17bd4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1bdac:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1bdb0:	b300      	cbz	r0, 1bdf4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
   1bdb2:	8830      	ldrh	r0, [r6, #0]
   1bdb4:	4669      	mov	r1, sp
   1bdb6:	f7fe fe22 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1bdba:	2800      	cmp	r0, #0
   1bdbc:	d119      	bne.n	1bdf2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
   1bdbe:	9c01      	ldr	r4, [sp, #4]
   1bdc0:	2700      	movs	r7, #0
   1bdc2:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
   1bdc6:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
   1bdca:	f000 fa94 	bl	1c2f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
   1bdce:	70a8      	strb	r0, [r5, #2]
   1bdd0:	7860      	ldrb	r0, [r4, #1]
   1bdd2:	f000 fa90 	bl	1c2f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
   1bdd6:	70e8      	strb	r0, [r5, #3]
   1bdd8:	78a0      	ldrb	r0, [r4, #2]
   1bdda:	f88d 0008 	strb.w	r0, [sp, #8]
   1bdde:	9802      	ldr	r0, [sp, #8]
   1bde0:	9002      	str	r0, [sp, #8]
   1bde2:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1bde6:	3c6a      	subs	r4, #106	; 0x6a
   1bde8:	2800      	cmp	r0, #0
   1bdea:	d1ea      	bne.n	1bdc2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
   1bdec:	8830      	ldrh	r0, [r6, #0]
   1bdee:	8028      	strh	r0, [r5, #0]
   1bdf0:	2000      	movs	r0, #0
   1bdf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bdf4:	2001      	movs	r0, #1
   1bdf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001bdf8 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   1bdf8:	2108      	movs	r1, #8
   1bdfa:	7001      	strb	r1, [r0, #0]
   1bdfc:	2000      	movs	r0, #0
   1bdfe:	4770      	bx	lr

0001be00 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   1be00:	b510      	push	{r4, lr}
   1be02:	4604      	mov	r4, r0
   1be04:	20d8      	movs	r0, #216	; 0xd8
   1be06:	7020      	strb	r0, [r4, #0]
   1be08:	f000 fc43 	bl	1c692 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
   1be0c:	7060      	strb	r0, [r4, #1]
   1be0e:	2000      	movs	r0, #0
   1be10:	bd10      	pop	{r4, pc}

0001be12 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1be12:	2108      	movs	r1, #8
   1be14:	7001      	strb	r1, [r0, #0]
   1be16:	2000      	movs	r0, #0
   1be18:	4770      	bx	lr

0001be1a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   1be1a:	b510      	push	{r4, lr}
   1be1c:	4604      	mov	r4, r0
   1be1e:	7800      	ldrb	r0, [r0, #0]
   1be20:	b108      	cbz	r0, 1be26 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   1be22:	2801      	cmp	r0, #1
   1be24:	d110      	bne.n	1be48 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1be26:	f000 fc70 	bl	1c70a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
   1be2a:	b120      	cbz	r0, 1be36 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1be2c:	f7f6 fa68 	bl	12300 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1be30:	b108      	cbz	r0, 1be36 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1be32:	200c      	movs	r0, #12
   1be34:	bd10      	pop	{r4, pc}
   1be36:	7820      	ldrb	r0, [r4, #0]
   1be38:	f7ff fe89 	bl	1bb4e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   1be3c:	1c61      	adds	r1, r4, #1
   1be3e:	f7fe fd88 	bl	1a952 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   1be42:	b108      	cbz	r0, 1be48 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1be44:	2000      	movs	r0, #0
   1be46:	bd10      	pop	{r4, pc}
   1be48:	2012      	movs	r0, #18
   1be4a:	bd10      	pop	{r4, pc}

0001be4c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   1be4c:	b510      	push	{r4, lr}
   1be4e:	4604      	mov	r4, r0
   1be50:	f000 fd02 	bl	1c858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
   1be54:	b108      	cbz	r0, 1be5a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   1be56:	200c      	movs	r0, #12
   1be58:	bd10      	pop	{r4, pc}
   1be5a:	7820      	ldrb	r0, [r4, #0]
   1be5c:	b108      	cbz	r0, 1be62 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   1be5e:	2801      	cmp	r0, #1
   1be60:	d107      	bne.n	1be72 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1be62:	f7ff fe74 	bl	1bb4e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   1be66:	1c61      	adds	r1, r4, #1
   1be68:	f7fe fd82 	bl	1a970 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   1be6c:	b108      	cbz	r0, 1be72 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1be6e:	2000      	movs	r0, #0
   1be70:	bd10      	pop	{r4, pc}
   1be72:	2012      	movs	r0, #18
   1be74:	bd10      	pop	{r4, pc}

0001be76 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   1be76:	b510      	push	{r4, lr}
   1be78:	4604      	mov	r4, r0
   1be7a:	f000 fc46 	bl	1c70a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
   1be7e:	b108      	cbz	r0, 1be84 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   1be80:	200c      	movs	r0, #12
   1be82:	bd10      	pop	{r4, pc}
   1be84:	7820      	ldrb	r0, [r4, #0]
   1be86:	f000 0001 	and.w	r0, r0, #1
   1be8a:	f7f6 fa33 	bl	122f4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   1be8e:	2000      	movs	r0, #0
   1be90:	bd10      	pop	{r4, pc}

0001be92 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   1be92:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1be94:	460d      	mov	r5, r1
   1be96:	4604      	mov	r4, r0
   1be98:	f000 fc1a 	bl	1c6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   1be9c:	b130      	cbz	r0, 1beac <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   1be9e:	88a2      	ldrh	r2, [r4, #4]
   1bea0:	f244 2090 	movw	r0, #17040	; 0x4290
   1bea4:	4282      	cmp	r2, r0
   1bea6:	d903      	bls.n	1beb0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   1bea8:	2012      	movs	r0, #18
   1beaa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1beac:	2001      	movs	r0, #1
   1beae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1beb0:	f640 0048 	movw	r0, #2120	; 0x848
   1beb4:	4282      	cmp	r2, r0
   1beb6:	d300      	bcc.n	1beba <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   1beb8:	4602      	mov	r2, r0
   1beba:	8820      	ldrh	r0, [r4, #0]
   1bebc:	f8ad 0000 	strh.w	r0, [sp]
   1bec0:	8860      	ldrh	r0, [r4, #2]
   1bec2:	f8ad 0002 	strh.w	r0, [sp, #2]
   1bec6:	f8ad 2004 	strh.w	r2, [sp, #4]
   1beca:	8860      	ldrh	r0, [r4, #2]
   1becc:	f8ad 0006 	strh.w	r0, [sp, #6]
   1bed0:	f8ad 2008 	strh.w	r2, [sp, #8]
   1bed4:	8820      	ldrh	r0, [r4, #0]
   1bed6:	8028      	strh	r0, [r5, #0]
   1bed8:	4668      	mov	r0, sp
   1beda:	f000 fc28 	bl	1c72e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
   1bede:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001bee0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
   1bee0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1bee2:	4604      	mov	r4, r0
   1bee4:	f7fe fd75 	bl	1a9d2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
   1bee8:	b160      	cbz	r0, 1bf04 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
   1beea:	4620      	mov	r0, r4
   1beec:	f7f6 fcc8 	bl	12880 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
   1bef0:	4669      	mov	r1, sp
   1bef2:	2000      	movs	r0, #0
   1bef4:	f7fe fc22 	bl	1a73c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1bef8:	b150      	cbz	r0, 1bf10 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
   1befa:	f241 0104 	movw	r1, #4100	; 0x1004
   1befe:	2039      	movs	r0, #57	; 0x39
   1bf00:	f7f4 fd36 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1bf04:	2012      	movs	r0, #18
   1bf06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bf08:	9802      	ldr	r0, [sp, #8]
   1bf0a:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
   1bf0e:	e000      	b.n	1bf12 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
   1bf10:	2401      	movs	r4, #1
   1bf12:	4668      	mov	r0, sp
   1bf14:	f7f4 ff5c 	bl	10dd0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1bf18:	2800      	cmp	r0, #0
   1bf1a:	d0f5      	beq.n	1bf08 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
   1bf1c:	2000      	movs	r0, #0
   1bf1e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001bf20 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1bf20:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1bf22:	4604      	mov	r4, r0
   1bf24:	f7fb fe56 	bl	17bd4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1bf28:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1bf2c:	b1b0      	cbz	r0, 1bf5c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   1bf2e:	f10d 0007 	add.w	r0, sp, #7
   1bf32:	9000      	str	r0, [sp, #0]
   1bf34:	7922      	ldrb	r2, [r4, #4]
   1bf36:	78e1      	ldrb	r1, [r4, #3]
   1bf38:	78a0      	ldrb	r0, [r4, #2]
   1bf3a:	f10d 0306 	add.w	r3, sp, #6
   1bf3e:	f000 fc74 	bl	1c82a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
   1bf42:	2800      	cmp	r0, #0
   1bf44:	d109      	bne.n	1bf5a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   1bf46:	8820      	ldrh	r0, [r4, #0]
   1bf48:	f8ad 0004 	strh.w	r0, [sp, #4]
   1bf4c:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   1bf50:	f8ad 0008 	strh.w	r0, [sp, #8]
   1bf54:	a801      	add	r0, sp, #4
   1bf56:	f000 f8f8 	bl	1c14a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   1bf5a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bf5c:	2001      	movs	r0, #1
   1bf5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001bf60 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   1bf60:	b510      	push	{r4, lr}
   1bf62:	4604      	mov	r4, r0
   1bf64:	f000 fbd1 	bl	1c70a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
   1bf68:	b120      	cbz	r0, 1bf74 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1bf6a:	f7f6 f9c9 	bl	12300 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1bf6e:	b108      	cbz	r0, 1bf74 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1bf70:	200c      	movs	r0, #12
   1bf72:	bd10      	pop	{r4, pc}
   1bf74:	7820      	ldrb	r0, [r4, #0]
   1bf76:	f7ff fdea 	bl	1bb4e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   1bf7a:	79e2      	ldrb	r2, [r4, #7]
   1bf7c:	1c61      	adds	r1, r4, #1
   1bf7e:	f7f6 f959 	bl	12234 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   1bf82:	b108      	cbz	r0, 1bf88 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   1bf84:	2000      	movs	r0, #0
   1bf86:	bd10      	pop	{r4, pc}
   1bf88:	2002      	movs	r0, #2
   1bf8a:	bd10      	pop	{r4, pc}

0001bf8c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   1bf8c:	b510      	push	{r4, lr}
   1bf8e:	4604      	mov	r4, r0
   1bf90:	2001      	movs	r0, #1
   1bf92:	f000 f9bb 	bl	1c30c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   1bf96:	b128      	cbz	r0, 1bfa4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   1bf98:	4621      	mov	r1, r4
   1bf9a:	2001      	movs	r0, #1
   1bf9c:	f7f5 fb52 	bl	11644 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1bfa0:	2000      	movs	r0, #0
   1bfa2:	bd10      	pop	{r4, pc}
   1bfa4:	200c      	movs	r0, #12
   1bfa6:	bd10      	pop	{r4, pc}

0001bfa8 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   1bfa8:	b510      	push	{r4, lr}
   1bfaa:	8800      	ldrh	r0, [r0, #0]
   1bfac:	f7f6 fa36 	bl	1241c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   1bfb0:	b108      	cbz	r0, 1bfb6 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   1bfb2:	2000      	movs	r0, #0
   1bfb4:	bd10      	pop	{r4, pc}
   1bfb6:	2030      	movs	r0, #48	; 0x30
   1bfb8:	bd10      	pop	{r4, pc}

0001bfba <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
   1bfba:	b51c      	push	{r2, r3, r4, lr}
   1bfbc:	7801      	ldrb	r1, [r0, #0]
   1bfbe:	f88d 1000 	strb.w	r1, [sp]
   1bfc2:	7840      	ldrb	r0, [r0, #1]
   1bfc4:	f88d 0001 	strb.w	r0, [sp, #1]
   1bfc8:	2000      	movs	r0, #0
   1bfca:	f8ad 0002 	strh.w	r0, [sp, #2]
   1bfce:	f8ad 0004 	strh.w	r0, [sp, #4]
   1bfd2:	4601      	mov	r1, r0
   1bfd4:	4668      	mov	r0, sp
   1bfd6:	f000 f9e4 	bl	1c3a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
   1bfda:	2800      	cmp	r0, #0
   1bfdc:	d102      	bne.n	1bfe4 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
   1bfde:	4668      	mov	r0, sp
   1bfe0:	f000 f9c3 	bl	1c36a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
   1bfe4:	bd1c      	pop	{r2, r3, r4, pc}

0001bfe6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
   1bfe6:	b500      	push	{lr}
   1bfe8:	b087      	sub	sp, #28
   1bfea:	7941      	ldrb	r1, [r0, #5]
   1bfec:	f88d 1000 	strb.w	r1, [sp]
   1bff0:	7981      	ldrb	r1, [r0, #6]
   1bff2:	f88d 1001 	strb.w	r1, [sp, #1]
   1bff6:	2101      	movs	r1, #1
   1bff8:	f88d 1002 	strb.w	r1, [sp, #2]
   1bffc:	7801      	ldrb	r1, [r0, #0]
   1bffe:	f88d 1003 	strb.w	r1, [sp, #3]
   1c002:	f8b0 1001 	ldrh.w	r1, [r0, #1]
   1c006:	f240 2271 	movw	r2, #625	; 0x271
   1c00a:	4351      	muls	r1, r2
   1c00c:	9102      	str	r1, [sp, #8]
   1c00e:	f8b0 0003 	ldrh.w	r0, [r0, #3]
   1c012:	4350      	muls	r0, r2
   1c014:	9004      	str	r0, [sp, #16]
   1c016:	2007      	movs	r0, #7
   1c018:	f88d 0018 	strb.w	r0, [sp, #24]
   1c01c:	2000      	movs	r0, #0
   1c01e:	f88d 0019 	strb.w	r0, [sp, #25]
   1c022:	9804      	ldr	r0, [sp, #16]
   1c024:	f7fb fcf8 	bl	17a18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
   1c028:	b140      	cbz	r0, 1c03c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
   1c02a:	9802      	ldr	r0, [sp, #8]
   1c02c:	f7fb fce8 	bl	17a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
   1c030:	b120      	cbz	r0, 1c03c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
   1c032:	4668      	mov	r0, sp
   1c034:	f7fb fb7c 	bl	17730 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
   1c038:	b007      	add	sp, #28
   1c03a:	bd00      	pop	{pc}
   1c03c:	2030      	movs	r0, #48	; 0x30
   1c03e:	e7fb      	b.n	1c038 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0001c040 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
   1c040:	b570      	push	{r4, r5, r6, lr}
   1c042:	4605      	mov	r5, r0
   1c044:	8800      	ldrh	r0, [r0, #0]
   1c046:	2100      	movs	r1, #0
   1c048:	f7fe fb6f 	bl	1a72a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1c04c:	0004      	movs	r4, r0
   1c04e:	d007      	beq.n	1c060 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
   1c050:	f000 fb47 	bl	1c6e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
   1c054:	b120      	cbz	r0, 1c060 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
   1c056:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
   1c05a:	b118      	cbz	r0, 1c064 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
   1c05c:	203a      	movs	r0, #58	; 0x3a
   1c05e:	bd70      	pop	{r4, r5, r6, pc}
   1c060:	2002      	movs	r0, #2
   1c062:	bd70      	pop	{r4, r5, r6, pc}
   1c064:	2100      	movs	r1, #0
   1c066:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
   1c06a:	f7ff fd66 	bl	1bb3a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   1c06e:	2801      	cmp	r0, #1
   1c070:	d001      	beq.n	1c076 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
   1c072:	201a      	movs	r0, #26
   1c074:	bd70      	pop	{r4, r5, r6, pc}
   1c076:	f8d5 1002 	ldr.w	r1, [r5, #2]
   1c07a:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
   1c07e:	f8d5 1006 	ldr.w	r1, [r5, #6]
   1c082:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
   1c086:	8969      	ldrh	r1, [r5, #10]
   1c088:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
   1c08c:	2210      	movs	r2, #16
   1c08e:	f105 010c 	add.w	r1, r5, #12
   1c092:	f204 1065 	addw	r0, r4, #357	; 0x165
   1c096:	f7fd fa8a 	bl	195ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1c09a:	2001      	movs	r0, #1
   1c09c:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
   1c0a0:	2000      	movs	r0, #0
   1c0a2:	bd70      	pop	{r4, r5, r6, pc}

0001c0a4 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   1c0a4:	b51c      	push	{r2, r3, r4, lr}
   1c0a6:	4604      	mov	r4, r0
   1c0a8:	f000 fb12 	bl	1c6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   1c0ac:	b178      	cbz	r0, 1c0ce <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   1c0ae:	8820      	ldrh	r0, [r4, #0]
   1c0b0:	f8ad 0000 	strh.w	r0, [sp]
   1c0b4:	8860      	ldrh	r0, [r4, #2]
   1c0b6:	f8ad 0002 	strh.w	r0, [sp, #2]
   1c0ba:	8820      	ldrh	r0, [r4, #0]
   1c0bc:	f8ad 0004 	strh.w	r0, [sp, #4]
   1c0c0:	8860      	ldrh	r0, [r4, #2]
   1c0c2:	f8ad 0006 	strh.w	r0, [sp, #6]
   1c0c6:	4668      	mov	r0, sp
   1c0c8:	f7fb fcdc 	bl	17a84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1dc>
   1c0cc:	bd1c      	pop	{r2, r3, r4, pc}
   1c0ce:	2001      	movs	r0, #1
   1c0d0:	bd1c      	pop	{r2, r3, r4, pc}

0001c0d2 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   1c0d2:	b510      	push	{r4, lr}
   1c0d4:	f7f5 fada 	bl	1168c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1c0d8:	2000      	movs	r0, #0
   1c0da:	bd10      	pop	{r4, pc}

0001c0dc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   1c0dc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1c0de:	460c      	mov	r4, r1
   1c0e0:	4605      	mov	r5, r0
   1c0e2:	f000 faf5 	bl	1c6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   1c0e6:	b160      	cbz	r0, 1c102 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   1c0e8:	4669      	mov	r1, sp
   1c0ea:	4628      	mov	r0, r5
   1c0ec:	f7fe fc87 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c0f0:	2800      	cmp	r0, #0
   1c0f2:	d105      	bne.n	1c100 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   1c0f4:	2101      	movs	r1, #1
   1c0f6:	4622      	mov	r2, r4
   1c0f8:	9801      	ldr	r0, [sp, #4]
   1c0fa:	f000 fa74 	bl	1c5e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   1c0fe:	2000      	movs	r0, #0
   1c100:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1c102:	2001      	movs	r0, #1
   1c104:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001c106 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1c106:	b510      	push	{r4, lr}
   1c108:	4604      	mov	r4, r0
   1c10a:	2000      	movs	r0, #0
   1c10c:	f000 f8fe 	bl	1c30c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   1c110:	b128      	cbz	r0, 1c11e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   1c112:	4621      	mov	r1, r4
   1c114:	2000      	movs	r0, #0
   1c116:	f7f5 fa95 	bl	11644 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1c11a:	2000      	movs	r0, #0
   1c11c:	bd10      	pop	{r4, pc}
   1c11e:	200c      	movs	r0, #12
   1c120:	bd10      	pop	{r4, pc}

0001c122 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1c122:	b510      	push	{r4, lr}
   1c124:	7800      	ldrb	r0, [r0, #0]
   1c126:	f000 0001 	and.w	r0, r0, #1
   1c12a:	f7f8 fb35 	bl	14798 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   1c12e:	2000      	movs	r0, #0
   1c130:	bd10      	pop	{r4, pc}

0001c132 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1c132:	b510      	push	{r4, lr}
   1c134:	4604      	mov	r4, r0
   1c136:	f000 facb 	bl	1c6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   1c13a:	b120      	cbz	r0, 1c146 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   1c13c:	4620      	mov	r0, r4
   1c13e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c142:	f000 baf4 	b.w	1c72e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
   1c146:	2001      	movs	r0, #1
   1c148:	bd10      	pop	{r4, pc}

0001c14a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1c14a:	b510      	push	{r4, lr}
   1c14c:	4604      	mov	r4, r0
   1c14e:	8880      	ldrh	r0, [r0, #4]
   1c150:	b128      	cbz	r0, 1c15e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1c152:	2801      	cmp	r0, #1
   1c154:	d003      	beq.n	1c15e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1c156:	2802      	cmp	r0, #2
   1c158:	d001      	beq.n	1c15e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1c15a:	2012      	movs	r0, #18
   1c15c:	bd10      	pop	{r4, pc}
   1c15e:	78e0      	ldrb	r0, [r4, #3]
   1c160:	f000 f8e0 	bl	1c324 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   1c164:	b148      	cbz	r0, 1c17a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1c166:	78a0      	ldrb	r0, [r4, #2]
   1c168:	f000 f8dc 	bl	1c324 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   1c16c:	b128      	cbz	r0, 1c17a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1c16e:	4620      	mov	r0, r4
   1c170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c174:	2101      	movs	r1, #1
   1c176:	f7fb bb31 	b.w	177dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1c17a:	2011      	movs	r0, #17
   1c17c:	bd10      	pop	{r4, pc}

0001c17e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   1c17e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1c180:	460c      	mov	r4, r1
   1c182:	4605      	mov	r5, r0
   1c184:	8800      	ldrh	r0, [r0, #0]
   1c186:	4669      	mov	r1, sp
   1c188:	f7fe fc39 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c18c:	2800      	cmp	r0, #0
   1c18e:	d106      	bne.n	1c19e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   1c190:	9801      	ldr	r0, [sp, #4]
   1c192:	8829      	ldrh	r1, [r5, #0]
   1c194:	8021      	strh	r1, [r4, #0]
   1c196:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
   1c19a:	8060      	strh	r0, [r4, #2]
   1c19c:	2000      	movs	r0, #0
   1c19e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001c1a0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   1c1a0:	b510      	push	{r4, lr}
   1c1a2:	4604      	mov	r4, r0
   1c1a4:	4601      	mov	r1, r0
   1c1a6:	2000      	movs	r0, #0
   1c1a8:	f7f5 fa34 	bl	11614 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1c1ac:	b910      	cbnz	r0, 1c1b4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   1c1ae:	2000      	movs	r0, #0
   1c1b0:	6020      	str	r0, [r4, #0]
   1c1b2:	80a0      	strh	r0, [r4, #4]
   1c1b4:	2000      	movs	r0, #0
   1c1b6:	bd10      	pop	{r4, pc}

0001c1b8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1c1b8:	b51c      	push	{r2, r3, r4, lr}
   1c1ba:	8800      	ldrh	r0, [r0, #0]
   1c1bc:	4669      	mov	r1, sp
   1c1be:	f7fe fc1e 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c1c2:	b968      	cbnz	r0, 1c1e0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   1c1c4:	4668      	mov	r0, sp
   1c1c6:	f000 fa89 	bl	1c6dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
   1c1ca:	b148      	cbz	r0, 1c1e0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   1c1cc:	9801      	ldr	r0, [sp, #4]
   1c1ce:	2201      	movs	r2, #1
   1c1d0:	4601      	mov	r1, r0
   1c1d2:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
   1c1d6:	3078      	adds	r0, #120	; 0x78
   1c1d8:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   1c1dc:	b92b      	cbnz	r3, 1c1ea <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   1c1de:	e001      	b.n	1c1e4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   1c1e0:	2002      	movs	r0, #2
   1c1e2:	bd1c      	pop	{r2, r3, r4, pc}
   1c1e4:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
   1c1e8:	b10b      	cbz	r3, 1c1ee <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
   1c1ea:	203a      	movs	r0, #58	; 0x3a
   1c1ec:	bd1c      	pop	{r2, r3, r4, pc}
   1c1ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   1c1f2:	079b      	lsls	r3, r3, #30
   1c1f4:	d100      	bne.n	1c1f8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
   1c1f6:	700a      	strb	r2, [r1, #0]
   1c1f8:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
   1c1fc:	2000      	movs	r0, #0
   1c1fe:	bd1c      	pop	{r2, r3, r4, pc}

0001c200 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1c200:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1c202:	460c      	mov	r4, r1
   1c204:	4605      	mov	r5, r0
   1c206:	8800      	ldrh	r0, [r0, #0]
   1c208:	4669      	mov	r1, sp
   1c20a:	f7fe fbf8 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c20e:	b108      	cbz	r0, 1c214 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1c210:	2002      	movs	r0, #2
   1c212:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1c214:	78a8      	ldrb	r0, [r5, #2]
   1c216:	b130      	cbz	r0, 1c226 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   1c218:	f000 fa3b 	bl	1c692 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
   1c21c:	70a0      	strb	r0, [r4, #2]
   1c21e:	8828      	ldrh	r0, [r5, #0]
   1c220:	8020      	strh	r0, [r4, #0]
   1c222:	2000      	movs	r0, #0
   1c224:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1c226:	9801      	ldr	r0, [sp, #4]
   1c228:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1c22c:	e7f6      	b.n	1c21c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001c22e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1c22e:	b510      	push	{r4, lr}
   1c230:	f7fb fc66 	bl	17b00 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1c234:	2000      	movs	r0, #0
   1c236:	bd10      	pop	{r4, pc}

0001c238 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   1c238:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1c23c:	4604      	mov	r4, r0
   1c23e:	8840      	ldrh	r0, [r0, #2]
   1c240:	460d      	mov	r5, r1
   1c242:	b1b8      	cbz	r0, 1c274 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1c244:	8820      	ldrh	r0, [r4, #0]
   1c246:	4669      	mov	r1, sp
   1c248:	f7fe fbd9 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c24c:	2800      	cmp	r0, #0
   1c24e:	d10f      	bne.n	1c270 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1c250:	8820      	ldrh	r0, [r4, #0]
   1c252:	8028      	strh	r0, [r5, #0]
   1c254:	9e01      	ldr	r6, [sp, #4]
   1c256:	f106 050c 	add.w	r5, r6, #12
   1c25a:	3678      	adds	r6, #120	; 0x78
   1c25c:	682f      	ldr	r7, [r5, #0]
   1c25e:	8862      	ldrh	r2, [r4, #2]
   1c260:	4639      	mov	r1, r7
   1c262:	4630      	mov	r0, r6
   1c264:	f7fe fd8c 	bl	1ad80 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   1c268:	6828      	ldr	r0, [r5, #0]
   1c26a:	42b8      	cmp	r0, r7
   1c26c:	d1f6      	bne.n	1c25c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1c26e:	2000      	movs	r0, #0
   1c270:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1c274:	2012      	movs	r0, #18
   1c276:	e7fb      	b.n	1c270 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001c278 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1c278:	f7fb bb16 	b.w	178a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0001c27c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   1c27c:	b510      	push	{r4, lr}
   1c27e:	2008      	movs	r0, #8
   1c280:	f7fb fc9e 	bl	17bc0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1c284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c288:	f7f9 baa0 	b.w	157cc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0001c28c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   1c28c:	b510      	push	{r4, lr}
   1c28e:	4604      	mov	r4, r0
   1c290:	2000      	movs	r0, #0
   1c292:	8822      	ldrh	r2, [r4, #0]
   1c294:	b086      	sub	sp, #24
   1c296:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   1c29a:	39ff      	subs	r1, #255	; 0xff
   1c29c:	d008      	beq.n	1c2b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   1c29e:	a903      	add	r1, sp, #12
   1c2a0:	4610      	mov	r0, r2
   1c2a2:	f7fe fbac 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c2a6:	b110      	cbz	r0, 1c2ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   1c2a8:	2002      	movs	r0, #2
   1c2aa:	b006      	add	sp, #24
   1c2ac:	bd10      	pop	{r4, pc}
   1c2ae:	9804      	ldr	r0, [sp, #16]
   1c2b0:	8921      	ldrh	r1, [r4, #8]
   1c2b2:	89a3      	ldrh	r3, [r4, #12]
   1c2b4:	8962      	ldrh	r2, [r4, #10]
   1c2b6:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   1c2ba:	88e3      	ldrh	r3, [r4, #6]
   1c2bc:	88a2      	ldrh	r2, [r4, #4]
   1c2be:	8861      	ldrh	r1, [r4, #2]
   1c2c0:	f000 f966 	bl	1c590 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   1c2c4:	b108      	cbz	r0, 1c2ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   1c2c6:	2000      	movs	r0, #0
   1c2c8:	e7ef      	b.n	1c2aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   1c2ca:	2030      	movs	r0, #48	; 0x30
   1c2cc:	e7ed      	b.n	1c2aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   1c2ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1c2d2:	4288      	cmp	r0, r1
   1c2d4:	d303      	bcc.n	1c2de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   1c2d6:	f640 0148 	movw	r1, #2120	; 0x848
   1c2da:	4288      	cmp	r0, r1
   1c2dc:	d300      	bcc.n	1c2e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   1c2de:	4608      	mov	r0, r1
   1c2e0:	4770      	bx	lr
   1c2e2:	07c1      	lsls	r1, r0, #31
   1c2e4:	d001      	beq.n	1c2ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   1c2e6:	2001      	movs	r0, #1
   1c2e8:	4770      	bx	lr
   1c2ea:	0780      	lsls	r0, r0, #30
   1c2ec:	d501      	bpl.n	1c2f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   1c2ee:	2002      	movs	r0, #2
   1c2f0:	4770      	bx	lr
   1c2f2:	2000      	movs	r0, #0
   1c2f4:	4770      	bx	lr
   1c2f6:	b510      	push	{r4, lr}
   1c2f8:	2801      	cmp	r0, #1
   1c2fa:	d006      	beq.n	1c30a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   1c2fc:	2802      	cmp	r0, #2
   1c2fe:	d004      	beq.n	1c30a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   1c300:	f240 2163 	movw	r1, #611	; 0x263
   1c304:	2006      	movs	r0, #6
   1c306:	f7f4 fb33 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c30a:	bd10      	pop	{r4, pc}
   1c30c:	b510      	push	{r4, lr}
   1c30e:	f000 fa03 	bl	1c718 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   1c312:	b128      	cbz	r0, 1c320 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   1c314:	f7f7 f8c0 	bl	13498 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   1c318:	2801      	cmp	r0, #1
   1c31a:	d001      	beq.n	1c320 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   1c31c:	2000      	movs	r0, #0
   1c31e:	bd10      	pop	{r4, pc}
   1c320:	2001      	movs	r0, #1
   1c322:	bd10      	pop	{r4, pc}
   1c324:	b510      	push	{r4, lr}
   1c326:	0004      	movs	r4, r0
   1c328:	d005      	beq.n	1c336 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   1c32a:	f7fb fc59 	bl	17be0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c32e:	4384      	bics	r4, r0
   1c330:	d001      	beq.n	1c336 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   1c332:	2000      	movs	r0, #0
   1c334:	bd10      	pop	{r4, pc}
   1c336:	2001      	movs	r0, #1
   1c338:	bd10      	pop	{r4, pc}
   1c33a:	28fb      	cmp	r0, #251	; 0xfb
   1c33c:	d803      	bhi.n	1c346 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
   1c33e:	f640 0048 	movw	r0, #2120	; 0x848
   1c342:	4281      	cmp	r1, r0
   1c344:	d901      	bls.n	1c34a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
   1c346:	2011      	movs	r0, #17
   1c348:	4770      	bx	lr
   1c34a:	2000      	movs	r0, #0
   1c34c:	4770      	bx	lr
   1c34e:	381b      	subs	r0, #27
   1c350:	28e1      	cmp	r0, #225	; 0xe1
   1c352:	d206      	bcs.n	1c362 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   1c354:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1c358:	d303      	bcc.n	1c362 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   1c35a:	f244 2090 	movw	r0, #17040	; 0x4290
   1c35e:	4281      	cmp	r1, r0
   1c360:	d901      	bls.n	1c366 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
   1c362:	2012      	movs	r0, #18
   1c364:	4770      	bx	lr
   1c366:	2000      	movs	r0, #0
   1c368:	4770      	bx	lr
   1c36a:	b510      	push	{r4, lr}
   1c36c:	4604      	mov	r4, r0
   1c36e:	7800      	ldrb	r0, [r0, #0]
   1c370:	2801      	cmp	r0, #1
   1c372:	d009      	beq.n	1c388 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
   1c374:	f7f8 fa9c 	bl	148b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1c378:	2805      	cmp	r0, #5
   1c37a:	d003      	beq.n	1c384 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
   1c37c:	f7f8 fa62 	bl	14844 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   1c380:	2800      	cmp	r0, #0
   1c382:	d000      	beq.n	1c386 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
   1c384:	200c      	movs	r0, #12
   1c386:	bd10      	pop	{r4, pc}
   1c388:	f7f7 f814 	bl	133b4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   1c38c:	b138      	cbz	r0, 1c39e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
   1c38e:	f7f6 fe8d 	bl	130ac <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   1c392:	88a1      	ldrh	r1, [r4, #4]
   1c394:	8860      	ldrh	r0, [r4, #2]
   1c396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c39a:	f7f8 ba17 	b.w	147cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   1c39e:	2012      	movs	r0, #18
   1c3a0:	bd10      	pop	{r4, pc}
   1c3a2:	7802      	ldrb	r2, [r0, #0]
   1c3a4:	2a01      	cmp	r2, #1
   1c3a6:	d001      	beq.n	1c3ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
   1c3a8:	b1ba      	cbz	r2, 1c3da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   1c3aa:	e018      	b.n	1c3de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   1c3ac:	7842      	ldrb	r2, [r0, #1]
   1c3ae:	b13a      	cbz	r2, 1c3c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   1c3b0:	2a01      	cmp	r2, #1
   1c3b2:	d005      	beq.n	1c3c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   1c3b4:	2a02      	cmp	r2, #2
   1c3b6:	d112      	bne.n	1c3de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   1c3b8:	b189      	cbz	r1, 1c3de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   1c3ba:	8881      	ldrh	r1, [r0, #4]
   1c3bc:	b179      	cbz	r1, 1c3de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   1c3be:	e000      	b.n	1c3c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
   1c3c0:	b159      	cbz	r1, 1c3da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   1c3c2:	8841      	ldrh	r1, [r0, #2]
   1c3c4:	b149      	cbz	r1, 1c3da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   1c3c6:	8880      	ldrh	r0, [r0, #4]
   1c3c8:	b138      	cbz	r0, 1c3da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   1c3ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1c3ce:	0049      	lsls	r1, r1, #1
   1c3d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c3d4:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   1c3d8:	d201      	bcs.n	1c3de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   1c3da:	2000      	movs	r0, #0
   1c3dc:	4770      	bx	lr
   1c3de:	2012      	movs	r0, #18
   1c3e0:	4770      	bx	lr
   1c3e2:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   1c3e6:	7a45      	ldrb	r5, [r0, #9]
   1c3e8:	4604      	mov	r4, r0
   1c3ea:	0768      	lsls	r0, r5, #29
   1c3ec:	d06c      	beq.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c3ee:	08e8      	lsrs	r0, r5, #3
   1c3f0:	d16a      	bne.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c3f2:	2d02      	cmp	r5, #2
   1c3f4:	d068      	beq.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c3f6:	f7fb fbf3 	bl	17be0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c3fa:	ea25 0000 	bic.w	r0, r5, r0
   1c3fe:	0740      	lsls	r0, r0, #29
   1c400:	d102      	bne.n	1c408 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
   1c402:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1c406:	b110      	cbz	r0, 1c40e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
   1c408:	2011      	movs	r0, #17
   1c40a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   1c40e:	2d01      	cmp	r5, #1
   1c410:	d15a      	bne.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c412:	27ff      	movs	r7, #255	; 0xff
   1c414:	2101      	movs	r1, #1
   1c416:	69a0      	ldr	r0, [r4, #24]
   1c418:	f7fb fb1e 	bl	17a58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
   1c41c:	b3e8      	cbz	r0, 1c49a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   1c41e:	46a8      	mov	r8, r5
   1c420:	2600      	movs	r6, #0
   1c422:	4635      	mov	r5, r6
   1c424:	42bd      	cmp	r5, r7
   1c426:	d02f      	beq.n	1c488 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   1c428:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1c42c:	6988      	ldr	r0, [r1, #24]
   1c42e:	68c9      	ldr	r1, [r1, #12]
   1c430:	4288      	cmp	r0, r1
   1c432:	d849      	bhi.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c434:	4406      	add	r6, r0
   1c436:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   1c43a:	4681      	mov	r9, r0
   1c43c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   1c43e:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   1c442:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   1c444:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   1c448:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1c44a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   1c44c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1c44e:	2000      	movs	r0, #0
   1c450:	f000 f89e 	bl	1c590 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   1c454:	b308      	cbz	r0, 1c49a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   1c456:	b1bd      	cbz	r5, 1c488 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   1c458:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   1c45c:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   1c460:	4281      	cmp	r1, r0
   1c462:	d131      	bne.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c464:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   1c468:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   1c46c:	4281      	cmp	r1, r0
   1c46e:	d12b      	bne.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c470:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1c474:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   1c478:	4281      	cmp	r1, r0
   1c47a:	d125      	bne.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c47c:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   1c480:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1c484:	4281      	cmp	r1, r0
   1c486:	d11f      	bne.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c488:	1c6d      	adds	r5, r5, #1
   1c48a:	b2ed      	uxtb	r5, r5
   1c48c:	4545      	cmp	r5, r8
   1c48e:	d3c9      	bcc.n	1c424 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
   1c490:	68e0      	ldr	r0, [r4, #12]
   1c492:	42b0      	cmp	r0, r6
   1c494:	d318      	bcc.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c496:	7820      	ldrb	r0, [r4, #0]
   1c498:	e000      	b.n	1c49c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   1c49a:	e003      	b.n	1c4a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
   1c49c:	b120      	cbz	r0, 1c4a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
   1c49e:	2801      	cmp	r0, #1
   1c4a0:	d112      	bne.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c4a2:	e004      	b.n	1c4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   1c4a4:	2030      	movs	r0, #48	; 0x30
   1c4a6:	e7b0      	b.n	1c40a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   1c4a8:	78a0      	ldrb	r0, [r4, #2]
   1c4aa:	2800      	cmp	r0, #0
   1c4ac:	d1f7      	bne.n	1c49e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
   1c4ae:	7860      	ldrb	r0, [r4, #1]
   1c4b0:	b128      	cbz	r0, 1c4be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   1c4b2:	2801      	cmp	r0, #1
   1c4b4:	d003      	beq.n	1c4be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   1c4b6:	2802      	cmp	r0, #2
   1c4b8:	d001      	beq.n	1c4be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   1c4ba:	2803      	cmp	r0, #3
   1c4bc:	d104      	bne.n	1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c4be:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   1c4c2:	b108      	cbz	r0, 1c4c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1c4c4:	2807      	cmp	r0, #7
   1c4c6:	d901      	bls.n	1c4cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   1c4c8:	2012      	movs	r0, #18
   1c4ca:	e79e      	b.n	1c40a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   1c4cc:	2000      	movs	r0, #0
   1c4ce:	e79c      	b.n	1c40a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   1c4d0:	b570      	push	{r4, r5, r6, lr}
   1c4d2:	4604      	mov	r4, r0
   1c4d4:	7800      	ldrb	r0, [r0, #0]
   1c4d6:	2500      	movs	r5, #0
   1c4d8:	2801      	cmp	r0, #1
   1c4da:	d004      	beq.n	1c4e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   1c4dc:	b118      	cbz	r0, 1c4e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   1c4de:	2802      	cmp	r0, #2
   1c4e0:	d001      	beq.n	1c4e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   1c4e2:	2803      	cmp	r0, #3
   1c4e4:	d139      	bne.n	1c55a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1c4e6:	7860      	ldrb	r0, [r4, #1]
   1c4e8:	b128      	cbz	r0, 1c4f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   1c4ea:	2801      	cmp	r0, #1
   1c4ec:	d003      	beq.n	1c4f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   1c4ee:	2802      	cmp	r0, #2
   1c4f0:	d001      	beq.n	1c4f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   1c4f2:	2803      	cmp	r0, #3
   1c4f4:	d131      	bne.n	1c55a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1c4f6:	7e60      	ldrb	r0, [r4, #25]
   1c4f8:	b948      	cbnz	r0, 1c50e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
   1c4fa:	78a0      	ldrb	r0, [r4, #2]
   1c4fc:	2801      	cmp	r0, #1
   1c4fe:	d12c      	bne.n	1c55a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1c500:	f7fb fb6e 	bl	17be0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c504:	4601      	mov	r1, r0
   1c506:	78a0      	ldrb	r0, [r4, #2]
   1c508:	ea30 0101 	bics.w	r1, r0, r1
   1c50c:	d001      	beq.n	1c512 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   1c50e:	2011      	movs	r0, #17
   1c510:	bd70      	pop	{r4, r5, r6, pc}
   1c512:	07c0      	lsls	r0, r0, #31
   1c514:	d006      	beq.n	1c524 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   1c516:	78e0      	ldrb	r0, [r4, #3]
   1c518:	2301      	movs	r3, #1
   1c51a:	6922      	ldr	r2, [r4, #16]
   1c51c:	68a1      	ldr	r1, [r4, #8]
   1c51e:	f000 f820 	bl	1c562 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   1c522:	4605      	mov	r5, r0
   1c524:	78a0      	ldrb	r0, [r4, #2]
   1c526:	0780      	lsls	r0, r0, #30
   1c528:	d506      	bpl.n	1c538 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
   1c52a:	78e0      	ldrb	r0, [r4, #3]
   1c52c:	2302      	movs	r3, #2
   1c52e:	6922      	ldr	r2, [r4, #16]
   1c530:	68a1      	ldr	r1, [r4, #8]
   1c532:	f000 f816 	bl	1c562 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   1c536:	4305      	orrs	r5, r0
   1c538:	78a0      	ldrb	r0, [r4, #2]
   1c53a:	0740      	lsls	r0, r0, #29
   1c53c:	d506      	bpl.n	1c54c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
   1c53e:	78e0      	ldrb	r0, [r4, #3]
   1c540:	2304      	movs	r3, #4
   1c542:	6922      	ldr	r2, [r4, #16]
   1c544:	68a1      	ldr	r1, [r4, #8]
   1c546:	f000 f80c 	bl	1c562 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   1c54a:	4305      	orrs	r5, r0
   1c54c:	b10d      	cbz	r5, 1c552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   1c54e:	4628      	mov	r0, r5
   1c550:	bd70      	pop	{r4, r5, r6, pc}
   1c552:	7e20      	ldrb	r0, [r4, #24]
   1c554:	b108      	cbz	r0, 1c55a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1c556:	2807      	cmp	r0, #7
   1c558:	d901      	bls.n	1c55e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   1c55a:	2012      	movs	r0, #18
   1c55c:	bd70      	pop	{r4, r5, r6, pc}
   1c55e:	2000      	movs	r0, #0
   1c560:	bd70      	pop	{r4, r5, r6, pc}
   1c562:	b570      	push	{r4, r5, r6, lr}
   1c564:	4614      	mov	r4, r2
   1c566:	460d      	mov	r5, r1
   1c568:	b108      	cbz	r0, 1c56e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
   1c56a:	2801      	cmp	r0, #1
   1c56c:	d10a      	bne.n	1c584 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
   1c56e:	4619      	mov	r1, r3
   1c570:	4610      	mov	r0, r2
   1c572:	f7fb fa71 	bl	17a58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
   1c576:	b138      	cbz	r0, 1c588 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   1c578:	4628      	mov	r0, r5
   1c57a:	f7fb fa35 	bl	179e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x140>
   1c57e:	b118      	cbz	r0, 1c588 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   1c580:	42ac      	cmp	r4, r5
   1c582:	d903      	bls.n	1c58c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
   1c584:	2012      	movs	r0, #18
   1c586:	bd70      	pop	{r4, r5, r6, pc}
   1c588:	2030      	movs	r0, #48	; 0x30
   1c58a:	bd70      	pop	{r4, r5, r6, pc}
   1c58c:	2000      	movs	r0, #0
   1c58e:	bd70      	pop	{r4, r5, r6, pc}
   1c590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c594:	461d      	mov	r5, r3
   1c596:	4610      	mov	r0, r2
   1c598:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   1c59c:	1f8b      	subs	r3, r1, #6
   1c59e:	f640 427a 	movw	r2, #3194	; 0xc7a
   1c5a2:	9e08      	ldr	r6, [sp, #32]
   1c5a4:	4293      	cmp	r3, r2
   1c5a6:	d81c      	bhi.n	1c5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1c5a8:	1f83      	subs	r3, r0, #6
   1c5aa:	4293      	cmp	r3, r2
   1c5ac:	d819      	bhi.n	1c5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1c5ae:	4281      	cmp	r1, r0
   1c5b0:	d817      	bhi.n	1c5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1c5b2:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1c5b6:	d214      	bcs.n	1c5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1c5b8:	f1a4 010a 	sub.w	r1, r4, #10
   1c5bc:	1f12      	subs	r2, r2, #4
   1c5be:	4291      	cmp	r1, r2
   1c5c0:	d80f      	bhi.n	1c5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1c5c2:	f7fe fa28 	bl	1aa16 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1c5c6:	1c6d      	adds	r5, r5, #1
   1c5c8:	4368      	muls	r0, r5
   1c5ca:	f240 2171 	movw	r1, #625	; 0x271
   1c5ce:	0040      	lsls	r0, r0, #1
   1c5d0:	434c      	muls	r4, r1
   1c5d2:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   1c5d6:	d204      	bcs.n	1c5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1c5d8:	42b7      	cmp	r7, r6
   1c5da:	d802      	bhi.n	1c5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1c5dc:	2001      	movs	r0, #1
   1c5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c5e2:	2000      	movs	r0, #0
   1c5e4:	e7fb      	b.n	1c5de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
   1c5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5ea:	4606      	mov	r6, r0
   1c5ec:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   1c5f0:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   1c5f4:	4615      	mov	r5, r2
   1c5f6:	302c      	adds	r0, #44	; 0x2c
   1c5f8:	f7f8 f8d4 	bl	147a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   1c5fc:	4680      	mov	r8, r0
   1c5fe:	2102      	movs	r1, #2
   1c600:	f7fe fac8 	bl	1ab94 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1c604:	4287      	cmp	r7, r0
   1c606:	d200      	bcs.n	1c60a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   1c608:	4638      	mov	r0, r7
   1c60a:	4607      	mov	r7, r0
   1c60c:	2102      	movs	r1, #2
   1c60e:	4640      	mov	r0, r8
   1c610:	f7fe fac0 	bl	1ab94 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1c614:	4284      	cmp	r4, r0
   1c616:	d200      	bcs.n	1c61a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
   1c618:	4620      	mov	r0, r4
   1c61a:	8831      	ldrh	r1, [r6, #0]
   1c61c:	8029      	strh	r1, [r5, #0]
   1c61e:	2f1b      	cmp	r7, #27
   1c620:	d913      	bls.n	1c64a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   1c622:	2ffb      	cmp	r7, #251	; 0xfb
   1c624:	d300      	bcc.n	1c628 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   1c626:	27fb      	movs	r7, #251	; 0xfb
   1c628:	806f      	strh	r7, [r5, #2]
   1c62a:	281b      	cmp	r0, #27
   1c62c:	d90f      	bls.n	1c64e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
   1c62e:	28fb      	cmp	r0, #251	; 0xfb
   1c630:	d300      	bcc.n	1c634 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   1c632:	20fb      	movs	r0, #251	; 0xfb
   1c634:	80e8      	strh	r0, [r5, #6]
   1c636:	4640      	mov	r0, r8
   1c638:	f7ff fe49 	bl	1c2ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   1c63c:	80a8      	strh	r0, [r5, #4]
   1c63e:	4640      	mov	r0, r8
   1c640:	f7ff fe45 	bl	1c2ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   1c644:	8128      	strh	r0, [r5, #8]
   1c646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c64a:	271b      	movs	r7, #27
   1c64c:	e7ec      	b.n	1c628 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   1c64e:	201b      	movs	r0, #27
   1c650:	e7f0      	b.n	1c634 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   1c652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c656:	7890      	ldrb	r0, [r2, #2]
   1c658:	9e06      	ldr	r6, [sp, #24]
   1c65a:	461d      	mov	r5, r3
   1c65c:	4614      	mov	r4, r2
   1c65e:	b908      	cbnz	r0, 1c664 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
   1c660:	f7fb fabe 	bl	17be0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c664:	78e4      	ldrb	r4, [r4, #3]
   1c666:	4607      	mov	r7, r0
   1c668:	b914      	cbnz	r4, 1c670 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e4>
   1c66a:	f7fb fab9 	bl	17be0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c66e:	4604      	mov	r4, r0
   1c670:	b16f      	cbz	r7, 1c68e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   1c672:	b164      	cbz	r4, 1c68e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   1c674:	4638      	mov	r0, r7
   1c676:	f7ff fe34 	bl	1c2e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   1c67a:	4620      	mov	r0, r4
   1c67c:	f7ff fe31 	bl	1c2e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   1c680:	b12f      	cbz	r7, 1c68e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   1c682:	b124      	cbz	r4, 1c68e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   1c684:	702f      	strb	r7, [r5, #0]
   1c686:	7034      	strb	r4, [r6, #0]
   1c688:	2000      	movs	r0, #0
   1c68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c68e:	2009      	movs	r0, #9
   1c690:	e7fb      	b.n	1c68a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fe>
   1c692:	b510      	push	{r4, lr}
   1c694:	f7fc ff2f 	bl	194f6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1c698:	b928      	cbnz	r0, 1c6a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
   1c69a:	f7fc ff62 	bl	19562 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   1c69e:	b910      	cbnz	r0, 1c6a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
   1c6a0:	f7fc ff69 	bl	19576 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1c6a4:	b108      	cbz	r0, 1c6aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41e>
   1c6a6:	2008      	movs	r0, #8
   1c6a8:	bd10      	pop	{r4, pc}
   1c6aa:	f7fc fef9 	bl	194a0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1c6ae:	b940      	cbnz	r0, 1c6c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
   1c6b0:	f7fc ff00 	bl	194b4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1c6b4:	b928      	cbnz	r0, 1c6c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
   1c6b6:	f7fc ff14 	bl	194e2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1c6ba:	b910      	cbnz	r0, 1c6c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
   1c6bc:	f7fc ff25 	bl	1950a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1c6c0:	b108      	cbz	r0, 1c6c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x43a>
   1c6c2:	2004      	movs	r0, #4
   1c6c4:	bd10      	pop	{r4, pc}
   1c6c6:	f240 519c 	movw	r1, #1436	; 0x59c
   1c6ca:	2039      	movs	r0, #57	; 0x39
   1c6cc:	f7f4 f950 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c6d0:	b510      	push	{r4, lr}
   1c6d2:	f7fb fa7f 	bl	17bd4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1c6d6:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c6da:	bd10      	pop	{r4, pc}
   1c6dc:	6840      	ldr	r0, [r0, #4]
   1c6de:	f000 b800 	b.w	1c6e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
   1c6e2:	b508      	push	{r3, lr}
   1c6e4:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   1c6e8:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   1c6ec:	f88d 0000 	strb.w	r0, [sp]
   1c6f0:	9800      	ldr	r0, [sp, #0]
   1c6f2:	9000      	str	r0, [sp, #0]
   1c6f4:	f89d 0000 	ldrb.w	r0, [sp]
   1c6f8:	1e40      	subs	r0, r0, #1
   1c6fa:	4208      	tst	r0, r1
   1c6fc:	d003      	beq.n	1c706 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
   1c6fe:	2904      	cmp	r1, #4
   1c700:	d001      	beq.n	1c706 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
   1c702:	2001      	movs	r0, #1
   1c704:	bd08      	pop	{r3, pc}
   1c706:	2000      	movs	r0, #0
   1c708:	bd08      	pop	{r3, pc}
   1c70a:	b510      	push	{r4, lr}
   1c70c:	f000 f804 	bl	1c718 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   1c710:	2800      	cmp	r0, #0
   1c712:	d000      	beq.n	1c716 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48a>
   1c714:	2001      	movs	r0, #1
   1c716:	bd10      	pop	{r4, pc}
   1c718:	b510      	push	{r4, lr}
   1c71a:	f7f8 f8c9 	bl	148b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1c71e:	2804      	cmp	r0, #4
   1c720:	d003      	beq.n	1c72a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   1c722:	2805      	cmp	r0, #5
   1c724:	d001      	beq.n	1c72a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   1c726:	2000      	movs	r0, #0
   1c728:	bd10      	pop	{r4, pc}
   1c72a:	2001      	movs	r0, #1
   1c72c:	bd10      	pop	{r4, pc}
   1c72e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c730:	b089      	sub	sp, #36	; 0x24
   1c732:	4604      	mov	r4, r0
   1c734:	8800      	ldrh	r0, [r0, #0]
   1c736:	a906      	add	r1, sp, #24
   1c738:	f7fe f961 	bl	1a9fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c73c:	2800      	cmp	r0, #0
   1c73e:	d143      	bne.n	1c7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1c740:	9807      	ldr	r0, [sp, #28]
   1c742:	2601      	movs	r6, #1
   1c744:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
   1c748:	f88d 1008 	strb.w	r1, [sp, #8]
   1c74c:	9902      	ldr	r1, [sp, #8]
   1c74e:	9102      	str	r1, [sp, #8]
   1c750:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1c754:	f88d 100c 	strb.w	r1, [sp, #12]
   1c758:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1c75c:	3078      	adds	r0, #120	; 0x78
   1c75e:	291d      	cmp	r1, #29
   1c760:	d102      	bne.n	1c768 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
   1c762:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1c766:	b141      	cbz	r1, 1c77a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
   1c768:	2100      	movs	r1, #0
   1c76a:	f88d 1004 	strb.w	r1, [sp, #4]
   1c76e:	2105      	movs	r1, #5
   1c770:	304e      	adds	r0, #78	; 0x4e
   1c772:	f7ff f9e2 	bl	1bb3a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   1c776:	b110      	cbz	r0, 1c77e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
   1c778:	e004      	b.n	1c784 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
   1c77a:	2101      	movs	r1, #1
   1c77c:	e7f5      	b.n	1c76a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   1c77e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1c782:	b300      	cbz	r0, 1c7c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
   1c784:	8921      	ldrh	r1, [r4, #8]
   1c786:	88e0      	ldrh	r0, [r4, #6]
   1c788:	f7ff fde1 	bl	1c34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   1c78c:	2800      	cmp	r0, #0
   1c78e:	d11b      	bne.n	1c7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1c790:	88a1      	ldrh	r1, [r4, #4]
   1c792:	8860      	ldrh	r0, [r4, #2]
   1c794:	f7ff fddb 	bl	1c34e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   1c798:	2800      	cmp	r0, #0
   1c79a:	d115      	bne.n	1c7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1c79c:	8921      	ldrh	r1, [r4, #8]
   1c79e:	88e0      	ldrh	r0, [r4, #6]
   1c7a0:	f7ff fdcb 	bl	1c33a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   1c7a4:	2800      	cmp	r0, #0
   1c7a6:	d10f      	bne.n	1c7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1c7a8:	88a1      	ldrh	r1, [r4, #4]
   1c7aa:	8860      	ldrh	r0, [r4, #2]
   1c7ac:	f7ff fdc5 	bl	1c33a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   1c7b0:	0007      	movs	r7, r0
   1c7b2:	d109      	bne.n	1c7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1c7b4:	9807      	ldr	r0, [sp, #28]
   1c7b6:	f500 7599 	add.w	r5, r0, #306	; 0x132
   1c7ba:	706e      	strb	r6, [r5, #1]
   1c7bc:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1c7c0:	b121      	cbz	r1, 1c7cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
   1c7c2:	273a      	movs	r7, #58	; 0x3a
   1c7c4:	e02d      	b.n	1c822 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   1c7c6:	201a      	movs	r0, #26
   1c7c8:	b009      	add	sp, #36	; 0x24
   1c7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c7cc:	4631      	mov	r1, r6
   1c7ce:	aa03      	add	r2, sp, #12
   1c7d0:	f7ff ff09 	bl	1c5e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   1c7d4:	8861      	ldrh	r1, [r4, #2]
   1c7d6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   1c7da:	4281      	cmp	r1, r0
   1c7dc:	d200      	bcs.n	1c7e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
   1c7de:	4608      	mov	r0, r1
   1c7e0:	80e8      	strh	r0, [r5, #6]
   1c7e2:	88a1      	ldrh	r1, [r4, #4]
   1c7e4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1c7e8:	4281      	cmp	r1, r0
   1c7ea:	d200      	bcs.n	1c7ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
   1c7ec:	4608      	mov	r0, r1
   1c7ee:	8128      	strh	r0, [r5, #8]
   1c7f0:	88e2      	ldrh	r2, [r4, #6]
   1c7f2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c7f6:	428a      	cmp	r2, r1
   1c7f8:	d200      	bcs.n	1c7fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   1c7fa:	4611      	mov	r1, r2
   1c7fc:	8069      	strh	r1, [r5, #2]
   1c7fe:	8922      	ldrh	r2, [r4, #8]
   1c800:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1c804:	428a      	cmp	r2, r1
   1c806:	d200      	bcs.n	1c80a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
   1c808:	4611      	mov	r1, r2
   1c80a:	f640 0248 	movw	r2, #2120	; 0x848
   1c80e:	80a9      	strh	r1, [r5, #4]
   1c810:	4291      	cmp	r1, r2
   1c812:	d300      	bcc.n	1c816 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
   1c814:	4611      	mov	r1, r2
   1c816:	80a9      	strh	r1, [r5, #4]
   1c818:	4290      	cmp	r0, r2
   1c81a:	d200      	bcs.n	1c81e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
   1c81c:	4602      	mov	r2, r0
   1c81e:	812a      	strh	r2, [r5, #8]
   1c820:	702e      	strb	r6, [r5, #0]
   1c822:	2000      	movs	r0, #0
   1c824:	7068      	strb	r0, [r5, #1]
   1c826:	4638      	mov	r0, r7
   1c828:	e7ce      	b.n	1c7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1c82a:	b530      	push	{r4, r5, lr}
   1c82c:	f340 0400 	sbfx	r4, r0, #0, #1
   1c830:	f340 0040 	sbfx	r0, r0, #1, #1
   1c834:	1c40      	adds	r0, r0, #1
   1c836:	9d03      	ldr	r5, [sp, #12]
   1c838:	1c64      	adds	r4, r4, #1
   1c83a:	d000      	beq.n	1c83e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
   1c83c:	b119      	cbz	r1, 1c846 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   1c83e:	b100      	cbz	r0, 1c842 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
   1c840:	b10a      	cbz	r2, 1c846 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   1c842:	b91c      	cbnz	r4, 1c84c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
   1c844:	e001      	b.n	1c84a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
   1c846:	2011      	movs	r0, #17
   1c848:	bd30      	pop	{r4, r5, pc}
   1c84a:	2100      	movs	r1, #0
   1c84c:	7019      	strb	r1, [r3, #0]
   1c84e:	b900      	cbnz	r0, 1c852 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
   1c850:	2200      	movs	r2, #0
   1c852:	702a      	strb	r2, [r5, #0]
   1c854:	2000      	movs	r0, #0
   1c856:	bd30      	pop	{r4, r5, pc}
   1c858:	b510      	push	{r4, lr}
   1c85a:	f7ff ff5d 	bl	1c718 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   1c85e:	b120      	cbz	r0, 1c86a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   1c860:	f7f6 fe22 	bl	134a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   1c864:	b108      	cbz	r0, 1c86a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   1c866:	2001      	movs	r0, #1
   1c868:	bd10      	pop	{r4, pc}
   1c86a:	2000      	movs	r0, #0
   1c86c:	bd10      	pop	{r4, pc}

0001c86e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   1c86e:	6802      	ldr	r2, [r0, #0]
   1c870:	b912      	cbnz	r2, 1c878 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   1c872:	6001      	str	r1, [r0, #0]
   1c874:	4770      	bx	lr
   1c876:	4602      	mov	r2, r0
   1c878:	6850      	ldr	r0, [r2, #4]
   1c87a:	b108      	cbz	r0, 1c880 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   1c87c:	428a      	cmp	r2, r1
   1c87e:	d1fa      	bne.n	1c876 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   1c880:	428a      	cmp	r2, r1
   1c882:	d0f7      	beq.n	1c874 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   1c884:	6051      	str	r1, [r2, #4]
   1c886:	4770      	bx	lr
   1c888:	b510      	push	{r4, lr}
   1c88a:	4604      	mov	r4, r0
   1c88c:	e002      	b.n	1c894 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   1c88e:	6820      	ldr	r0, [r4, #0]
   1c890:	4780      	blx	r0
   1c892:	6864      	ldr	r4, [r4, #4]
   1c894:	2c00      	cmp	r4, #0
   1c896:	d1fa      	bne.n	1c88e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
   1c898:	bd10      	pop	{r4, pc}
   1c89a:	b510      	push	{r4, lr}
   1c89c:	2000      	movs	r0, #0
   1c89e:	f7f4 fa2f 	bl	10d00 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1c8a2:	f7f4 fc4f 	bl	11144 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1c8a6:	f7f4 fe97 	bl	115d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1c8aa:	f7f5 f87f 	bl	119ac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1c8ae:	2800      	cmp	r0, #0
   1c8b0:	d003      	beq.n	1c8ba <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
   1c8b2:	21b8      	movs	r1, #184	; 0xb8
   1c8b4:	2001      	movs	r0, #1
   1c8b6:	f7f4 f85b 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c8ba:	bd10      	pop	{r4, pc}
   1c8bc:	b510      	push	{r4, lr}
   1c8be:	f000 f80a 	bl	1c8d6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
   1c8c2:	f7ff f823 	bl	1b90c <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1c8c6:	2800      	cmp	r0, #0
   1c8c8:	d004      	beq.n	1c8d4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   1c8ca:	f240 1135 	movw	r1, #309	; 0x135
   1c8ce:	2001      	movs	r0, #1
   1c8d0:	f7f4 f84e 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c8d4:	bd10      	pop	{r4, pc}
   1c8d6:	b510      	push	{r4, lr}
   1c8d8:	f7f7 ff06 	bl	146e8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   1c8dc:	b120      	cbz	r0, 1c8e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
   1c8de:	f240 111d 	movw	r1, #285	; 0x11d
   1c8e2:	2001      	movs	r0, #1
   1c8e4:	f7f4 f844 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c8e8:	f7f6 fd2e 	bl	13348 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   1c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c8f0:	f7fa bca8 	b.w	17244 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   1c8f4:	000b0001 	.word	0x000b0001
   1c8f8:	000a0002 	.word	0x000a0002
   1c8fc:	00090005 	.word	0x00090005
   1c900:	0008000a 	.word	0x0008000a
   1c904:	00070014 	.word	0x00070014
   1c908:	0006001e 	.word	0x0006001e
   1c90c:	00050032 	.word	0x00050032
   1c910:	0004004b 	.word	0x0004004b
   1c914:	00030064 	.word	0x00030064
   1c918:	00020096 	.word	0x00020096
   1c91c:	000100fa 	.word	0x000100fa
   1c920:	000001f4 	.word	0x000001f4

0001c924 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1c924:	b510      	push	{r4, lr}
   1c926:	f7fb fd13 	bl	18350 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1c92a:	f000 f850 	bl	1c9ce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1c92e:	f7fb f9cb 	bl	17cc8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1c932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c936:	f7fb bac9 	b.w	17ecc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001c93a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1c93a:	b510      	push	{r4, lr}
   1c93c:	24c8      	movs	r4, #200	; 0xc8
   1c93e:	1e64      	subs	r4, r4, #1
   1c940:	b2e4      	uxtb	r4, r4
   1c942:	f7fb f9df 	bl	17d04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   1c946:	2802      	cmp	r0, #2
   1c948:	d003      	beq.n	1c952 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1c94a:	2801      	cmp	r0, #1
   1c94c:	d000      	beq.n	1c950 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   1c94e:	2000      	movs	r0, #0
   1c950:	bd10      	pop	{r4, pc}
   1c952:	2c00      	cmp	r4, #0
   1c954:	d1f3      	bne.n	1c93e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   1c956:	2193      	movs	r1, #147	; 0x93
   1c958:	203b      	movs	r0, #59	; 0x3b
   1c95a:	f7f4 f809 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001c95e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   1c95e:	b510      	push	{r4, lr}
   1c960:	f7f3 fe9c 	bl	1069c <mpsl_fem_lna_configuration_clear>
   1c964:	2800      	cmp	r0, #0
   1c966:	d005      	beq.n	1c974 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   1c968:	1c40      	adds	r0, r0, #1
   1c96a:	d003      	beq.n	1c974 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   1c96c:	2150      	movs	r1, #80	; 0x50
   1c96e:	2040      	movs	r0, #64	; 0x40
   1c970:	f7f3 fffe 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c974:	bd10      	pop	{r4, pc}

0001c976 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   1c976:	b510      	push	{r4, lr}
   1c978:	f7f3 fe9c 	bl	106b4 <mpsl_fem_pa_configuration_clear>
   1c97c:	2800      	cmp	r0, #0
   1c97e:	d005      	beq.n	1c98c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1c980:	1c40      	adds	r0, r0, #1
   1c982:	d003      	beq.n	1c98c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1c984:	2149      	movs	r1, #73	; 0x49
   1c986:	2040      	movs	r0, #64	; 0x40
   1c988:	f7f3 fff2 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c98c:	bd10      	pop	{r4, pc}

0001c98e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   1c98e:	b510      	push	{r4, lr}
   1c990:	f7f3 fe7e 	bl	10690 <mpsl_fem_disable>
   1c994:	2800      	cmp	r0, #0
   1c996:	d005      	beq.n	1c9a4 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1c998:	1c40      	adds	r0, r0, #1
   1c99a:	d003      	beq.n	1c9a4 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1c99c:	2157      	movs	r1, #87	; 0x57
   1c99e:	2040      	movs	r0, #64	; 0x40
   1c9a0:	f7f3 ffe6 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c9a4:	bd10      	pop	{r4, pc}

0001c9a6 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   1c9a6:	b510      	push	{r4, lr}
   1c9a8:	2100      	movs	r1, #0
   1c9aa:	4608      	mov	r0, r1
   1c9ac:	f7f3 fe7c 	bl	106a8 <mpsl_fem_lna_configuration_set>
   1c9b0:	b108      	cbz	r0, 1c9b6 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   1c9b2:	2000      	movs	r0, #0
   1c9b4:	bd10      	pop	{r4, pc}
   1c9b6:	2001      	movs	r0, #1
   1c9b8:	bd10      	pop	{r4, pc}

0001c9ba <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   1c9ba:	b508      	push	{r3, lr}
   1c9bc:	4668      	mov	r0, sp
   1c9be:	f7f3 fe85 	bl	106cc <mpsl_fem_pa_is_configured>
   1c9c2:	f89d 0000 	ldrb.w	r0, [sp]
   1c9c6:	2800      	cmp	r0, #0
   1c9c8:	d000      	beq.n	1c9cc <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   1c9ca:	2001      	movs	r0, #1
   1c9cc:	bd08      	pop	{r3, pc}

0001c9ce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1c9ce:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1c9d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c9d6:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1c9da:	f3bf 8f4f 	dsb	sy
   1c9de:	f3bf 8f6f 	isb	sy
   1c9e2:	f7fb bb4d 	b.w	18080 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1c9e6:	2800      	cmp	r0, #0
   1c9e8:	db09      	blt.n	1c9fe <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1c9ea:	f000 021f 	and.w	r2, r0, #31
   1c9ee:	2101      	movs	r1, #1
   1c9f0:	4091      	lsls	r1, r2
   1c9f2:	0940      	lsrs	r0, r0, #5
   1c9f4:	0080      	lsls	r0, r0, #2
   1c9f6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1c9fa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1c9fe:	4770      	bx	lr
   1ca00:	2800      	cmp	r0, #0
   1ca02:	db0d      	blt.n	1ca20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   1ca04:	f000 021f 	and.w	r2, r0, #31
   1ca08:	2101      	movs	r1, #1
   1ca0a:	4091      	lsls	r1, r2
   1ca0c:	0940      	lsrs	r0, r0, #5
   1ca0e:	0080      	lsls	r0, r0, #2
   1ca10:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1ca14:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1ca18:	f3bf 8f4f 	dsb	sy
   1ca1c:	f3bf 8f6f 	isb	sy
   1ca20:	4770      	bx	lr

0001ca22 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   1ca22:	b510      	push	{r4, lr}
   1ca24:	2801      	cmp	r0, #1
   1ca26:	d006      	beq.n	1ca36 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   1ca28:	2802      	cmp	r0, #2
   1ca2a:	d006      	beq.n	1ca3a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   1ca2c:	f640 3141 	movw	r1, #2881	; 0xb41
   1ca30:	203e      	movs	r0, #62	; 0x3e
   1ca32:	f7f3 ff9d 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ca36:	2028      	movs	r0, #40	; 0x28
   1ca38:	bd10      	pop	{r4, pc}
   1ca3a:	2018      	movs	r0, #24
   1ca3c:	bd10      	pop	{r4, pc}

0001ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   1ca3e:	b510      	push	{r4, lr}
   1ca40:	2801      	cmp	r0, #1
   1ca42:	d006      	beq.n	1ca52 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   1ca44:	2802      	cmp	r0, #2
   1ca46:	d007      	beq.n	1ca58 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   1ca48:	f640 3155 	movw	r1, #2901	; 0xb55
   1ca4c:	203e      	movs	r0, #62	; 0x3e
   1ca4e:	f7f3 ff8f 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ca52:	f641 6014 	movw	r0, #7700	; 0x1e14
   1ca56:	bd10      	pop	{r4, pc}
   1ca58:	f241 1030 	movw	r0, #4400	; 0x1130
   1ca5c:	bd10      	pop	{r4, pc}

0001ca5e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   1ca5e:	f7fc b9c1 	b.w	18de4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   1ca62:	b510      	push	{r4, lr}
   1ca64:	460a      	mov	r2, r1
   1ca66:	b130      	cbz	r0, 1ca76 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   1ca68:	2801      	cmp	r0, #1
   1ca6a:	d00b      	beq.n	1ca84 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   1ca6c:	f240 6114 	movw	r1, #1556	; 0x614
   1ca70:	203e      	movs	r0, #62	; 0x3e
   1ca72:	f7f3 ff7d 	bl	10970 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ca76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ca7a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1ca7e:	4610      	mov	r0, r2
   1ca80:	f7fb b994 	b.w	17dac <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   1ca84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ca88:	f102 0129 	add.w	r1, r2, #41	; 0x29
   1ca8c:	4610      	mov	r0, r2
   1ca8e:	f7fb b977 	b.w	17d80 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   1ca92:	5840      	ldr	r0, [r0, r1]
   1ca94:	2800      	cmp	r0, #0
   1ca96:	d000      	beq.n	1ca9a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   1ca98:	2001      	movs	r0, #1
   1ca9a:	4770      	bx	lr
   1ca9c:	5840      	ldr	r0, [r0, r1]
   1ca9e:	2800      	cmp	r0, #0
   1caa0:	d000      	beq.n	1caa4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   1caa2:	2001      	movs	r0, #1
   1caa4:	4770      	bx	lr

0001caa6 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   1caa6:	b570      	push	{r4, r5, r6, lr}
   1caa8:	4605      	mov	r5, r0
   1caaa:	4614      	mov	r4, r2
   1caac:	4608      	mov	r0, r1
   1caae:	f7ff ffc6 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1cab2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   1cab6:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1caba:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   1cabe:	4620      	mov	r0, r4
   1cac0:	f7ff ffbd 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1cac4:	4428      	add	r0, r5
   1cac6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1caca:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1cace:	fbb0 f5f1 	udiv	r5, r0, r1
   1cad2:	4620      	mov	r0, r4
   1cad4:	f7ff ffa5 	bl	1ca22 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1cad8:	4428      	add	r0, r5
   1cada:	1d40      	adds	r0, r0, #5
   1cadc:	bd70      	pop	{r4, r5, r6, pc}

0001cade <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   1cade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cae2:	4607      	mov	r7, r0
   1cae4:	461d      	mov	r5, r3
   1cae6:	460e      	mov	r6, r1
   1cae8:	4614      	mov	r4, r2
   1caea:	4610      	mov	r0, r2
   1caec:	f7ff ffa7 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1caf0:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   1caf4:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1caf8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1cafc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1cb00:	2e02      	cmp	r6, #2
   1cb02:	d00e      	beq.n	1cb22 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   1cb04:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1cb08:	4411      	add	r1, r2
   1cb0a:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   1cb0e:	fbb1 f6f0 	udiv	r6, r1, r0
   1cb12:	4620      	mov	r0, r4
   1cb14:	f7ff ff85 	bl	1ca22 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1cb18:	4430      	add	r0, r6
   1cb1a:	4428      	add	r0, r5
   1cb1c:	1d40      	adds	r0, r0, #5
   1cb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cb22:	4602      	mov	r2, r0
   1cb24:	e7f0      	b.n	1cb08 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0001cb26 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1cb26:	b510      	push	{r4, lr}
   1cb28:	4604      	mov	r4, r0
   1cb2a:	4608      	mov	r0, r1
   1cb2c:	f7ff ff87 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1cb30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1cb34:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1cb38:	fbb0 f0f1 	udiv	r0, r0, r1
   1cb3c:	1a20      	subs	r0, r4, r0
   1cb3e:	1e80      	subs	r0, r0, #2
   1cb40:	bd10      	pop	{r4, pc}

0001cb42 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1cb42:	b510      	push	{r4, lr}
   1cb44:	4604      	mov	r4, r0
   1cb46:	4608      	mov	r0, r1
   1cb48:	f7ff ff79 	bl	1ca3e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1cb4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1cb50:	fbb0 f0f1 	udiv	r0, r0, r1
   1cb54:	1a20      	subs	r0, r4, r0
   1cb56:	bd10      	pop	{r4, pc}

0001cb58 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   1cb58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cb5c:	2902      	cmp	r1, #2
   1cb5e:	d008      	beq.n	1cb72 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   1cb60:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1cb64:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1cb68:	fbb1 f1f2 	udiv	r1, r1, r2
   1cb6c:	4408      	add	r0, r1
   1cb6e:	1e80      	subs	r0, r0, #2
   1cb70:	4770      	bx	lr
   1cb72:	4611      	mov	r1, r2
   1cb74:	e7f6      	b.n	1cb64 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0001cb76 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   1cb76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cb7a:	2902      	cmp	r1, #2
   1cb7c:	d007      	beq.n	1cb8e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   1cb7e:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1cb82:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1cb86:	fbb1 f1f2 	udiv	r1, r1, r2
   1cb8a:	4408      	add	r0, r1
   1cb8c:	4770      	bx	lr
   1cb8e:	4611      	mov	r1, r2
   1cb90:	e7f7      	b.n	1cb82 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   1cb92:	080c      	.short	0x080c
   1cb94:	010d1702 	.word	0x010d1702
   1cb98:	09090201 	.word	0x09090201
   1cb9c:	02060101 	.word	0x02060101
   1cba0:	03181809 	.word	0x03181809
   1cba4:	09090101 	.word	0x09090101
   1cba8:	0303      	.short	0x0303
   1cbaa:	05          	.byte	0x05
   1cbab:	55          	.byte	0x55
   1cbac:	26255555 	.word	0x26255555
   1cbb0:	27          	.byte	0x27
   1cbb1:	01          	.byte	0x01
   1cbb2:	0103      	.short	0x0103
   1cbb4:	01          	.byte	0x01
   1cbb5:	01          	.byte	0x01
	...

0001cbb8 <env_control_run>:
    smf_set_state(SMF_CTX(&env_control_fsm_user_object), &env_control_states[ENV_CONTROL_WFE]);
}

// --- ENV_CONTROL state ---
static void env_control_run(void *o)
{
   1cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbbc:	b095      	sub	sp, #84	; 0x54
    // Construct the message to be sent to 9160 in order to control GPIOs
    message_control_gpios_t message_control_gpios = {0};
   1cbbe:	2400      	movs	r4, #0
   1cbc0:	940f      	str	r4, [sp, #60]	; 0x3c
   1cbc2:	9410      	str	r4, [sp, #64]	; 0x40
   1cbc4:	9411      	str	r4, [sp, #68]	; 0x44
   1cbc6:	9412      	str	r4, [sp, #72]	; 0x48
   1cbc8:	f8cd 404b 	str.w	r4, [sp, #75]	; 0x4b
    message_control_gpios.type = MESSAGE_CONTROL_GPIOS;
   1cbcc:	2382      	movs	r3, #130	; 0x82
   1cbce:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    message_control_gpios.len = sizeof(message_control_gpios_t);
   1cbd2:	2313      	movs	r3, #19
   1cbd4:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    // Control the fans/lights/water row by row
    // Check if automatic control is enabled -> if enabled, check the threshold
    // and control fan/light/water
    // If automatic control is disabled, blindly do what user has set for fan/light/water
    for (uint8_t row_index = 0; row_index < MAX_CONFIGURATION_ID; row_index++)
   1cbd8:	464b      	mov	r3, r9
   1cbda:	46c1      	mov	r9, r8
   1cbdc:	46b8      	mov	r8, r7
   1cbde:	461f      	mov	r7, r3
   1cbe0:	e159      	b.n	1ce96 <env_control_run+0x2de>
                    // Set fan on for row index
                    LOG_INF("Manual fan on for %d", row_index + 1);
                }
                else
                {
                    message_control_gpios.row_fan_control[row_index] = false;
   1cbe2:	2200      	movs	r2, #0
   1cbe4:	ab14      	add	r3, sp, #80	; 0x50
   1cbe6:	4423      	add	r3, r4
   1cbe8:	f803 2c12 	strb.w	r2, [r3, #-18]
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1cbec:	4b92      	ldr	r3, [pc, #584]	; (1ce38 <env_control_run+0x280>)
   1cbee:	4993      	ldr	r1, [pc, #588]	; (1ce3c <env_control_run+0x284>)
   1cbf0:	1a5b      	subs	r3, r3, r1
   1cbf2:	08db      	lsrs	r3, r3, #3
                    // Set fan off for row index
                    LOG_INF("Manual fan off for %d", row_index + 1);
   1cbf4:	2103      	movs	r1, #3
   1cbf6:	f361 0902 	bfi	r9, r1, #0, #3
   1cbfa:	f362 09c5 	bfi	r9, r2, #3, #3
   1cbfe:	f363 198f 	bfi	r9, r3, #6, #10
   1cc02:	464a      	mov	r2, r9
   1cc04:	1c61      	adds	r1, r4, #1
   1cc06:	488e      	ldr	r0, [pc, #568]	; (1ce40 <env_control_run+0x288>)
   1cc08:	f003 fb4e 	bl	202a8 <log_1>
   1cc0c:	e16b      	b.n	1cee6 <env_control_run+0x32e>
                    // Set water on for row index
                    LOG_INF("Manual water on for %d", row_index + 1);
                }
                else
                {
                    message_control_gpios.row_water_control[row_index] = false;
   1cc0e:	2200      	movs	r2, #0
   1cc10:	ab14      	add	r3, sp, #80	; 0x50
   1cc12:	4423      	add	r3, r4
   1cc14:	f803 2c0d 	strb.w	r2, [r3, #-13]
   1cc18:	4b87      	ldr	r3, [pc, #540]	; (1ce38 <env_control_run+0x280>)
   1cc1a:	4988      	ldr	r1, [pc, #544]	; (1ce3c <env_control_run+0x284>)
   1cc1c:	1a5b      	subs	r3, r3, r1
   1cc1e:	08db      	lsrs	r3, r3, #3
                    // Set water off for row index
                    LOG_INF("Manual water off for %d", row_index + 1);
   1cc20:	2103      	movs	r1, #3
   1cc22:	f361 0b02 	bfi	fp, r1, #0, #3
   1cc26:	f362 0bc5 	bfi	fp, r2, #3, #3
   1cc2a:	f363 1b8f 	bfi	fp, r3, #6, #10
   1cc2e:	465a      	mov	r2, fp
   1cc30:	1c61      	adds	r1, r4, #1
   1cc32:	4884      	ldr	r0, [pc, #528]	; (1ce44 <env_control_run+0x28c>)
   1cc34:	f003 fb38 	bl	202a8 <log_1>
   1cc38:	e170      	b.n	1cf1c <env_control_run+0x364>
                    // Set lights on for row index
                    LOG_INF("Manual lights on for %d", row_index + 1);
                }
                else
                {
                    message_control_gpios.row_lights_control[row_index] = false;
   1cc3a:	2200      	movs	r2, #0
   1cc3c:	ab14      	add	r3, sp, #80	; 0x50
   1cc3e:	4423      	add	r3, r4
   1cc40:	f803 2c08 	strb.w	r2, [r3, #-8]
   1cc44:	4b7c      	ldr	r3, [pc, #496]	; (1ce38 <env_control_run+0x280>)
   1cc46:	497d      	ldr	r1, [pc, #500]	; (1ce3c <env_control_run+0x284>)
   1cc48:	1a5b      	subs	r3, r3, r1
   1cc4a:	08db      	lsrs	r3, r3, #3
                    // Set lights off for row index
                    LOG_INF("Manual lights off for %d", row_index + 1);
   1cc4c:	2103      	movs	r1, #3
   1cc4e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   1cc52:	f361 0002 	bfi	r0, r1, #0, #3
   1cc56:	4601      	mov	r1, r0
   1cc58:	f362 01c5 	bfi	r1, r2, #3, #3
   1cc5c:	460a      	mov	r2, r1
   1cc5e:	f363 128f 	bfi	r2, r3, #6, #10
   1cc62:	f8ad 201c 	strh.w	r2, [sp, #28]
   1cc66:	1c61      	adds	r1, r4, #1
   1cc68:	4877      	ldr	r0, [pc, #476]	; (1ce48 <env_control_run+0x290>)
   1cc6a:	f003 fb1d 	bl	202a8 <log_1>
   1cc6e:	e110      	b.n	1ce92 <env_control_run+0x2da>
                }
            }
            else // if automatic control
            {
                // Control the fan
                if ((get_row_current_temperature(row_index) > get_row_temp_threshold(row_index)) || (get_row_current_humidity(row_index) > get_row_hum_threshold(row_index)))
   1cc70:	4620      	mov	r0, r4
   1cc72:	f001 fe95 	bl	1e9a0 <get_row_current_temperature>
   1cc76:	9002      	str	r0, [sp, #8]
   1cc78:	4620      	mov	r0, r4
   1cc7a:	f001 ffcf 	bl	1ec1c <get_row_temp_threshold>
   1cc7e:	9b02      	ldr	r3, [sp, #8]
   1cc80:	4283      	cmp	r3, r0
   1cc82:	dc09      	bgt.n	1cc98 <env_control_run+0xe0>
   1cc84:	4620      	mov	r0, r4
   1cc86:	f001 fedb 	bl	1ea40 <get_row_current_humidity>
   1cc8a:	9002      	str	r0, [sp, #8]
   1cc8c:	4620      	mov	r0, r4
   1cc8e:	f002 f80f 	bl	1ecb0 <get_row_hum_threshold>
   1cc92:	9b02      	ldr	r3, [sp, #8]
   1cc94:	4283      	cmp	r3, r0
   1cc96:	dd4d      	ble.n	1cd34 <env_control_run+0x17c>
                {
                    message_control_gpios.row_fan_control[row_index] = true;
   1cc98:	2201      	movs	r2, #1
   1cc9a:	ab14      	add	r3, sp, #80	; 0x50
   1cc9c:	4423      	add	r3, r4
   1cc9e:	f803 2c12 	strb.w	r2, [r3, #-18]
   1cca2:	4b65      	ldr	r3, [pc, #404]	; (1ce38 <env_control_run+0x280>)
   1cca4:	4a65      	ldr	r2, [pc, #404]	; (1ce3c <env_control_run+0x284>)
   1cca6:	1a9b      	subs	r3, r3, r2
   1cca8:	08db      	lsrs	r3, r3, #3
                    // Set fan on for row index
                    LOG_INF("Auto fan on for %d", row_index + 1);
   1ccaa:	2203      	movs	r2, #3
   1ccac:	f362 0602 	bfi	r6, r2, #0, #3
   1ccb0:	f36f 06c5 	bfc	r6, #3, #3
   1ccb4:	f363 168f 	bfi	r6, r3, #6, #10
   1ccb8:	4632      	mov	r2, r6
   1ccba:	1c61      	adds	r1, r4, #1
   1ccbc:	4863      	ldr	r0, [pc, #396]	; (1ce4c <env_control_run+0x294>)
   1ccbe:	f003 faf3 	bl	202a8 <log_1>
                    // Set fan off for row index
                    LOG_INF("Auto fan off for %d", row_index + 1);
                }

                // Control the water
                if (get_row_current_soil_moisture(row_index) < get_row_soil_moisture_threshold(row_index))
   1ccc2:	4620      	mov	r0, r4
   1ccc4:	f001 ff0e 	bl	1eae4 <get_row_current_soil_moisture>
   1ccc8:	9002      	str	r0, [sp, #8]
   1ccca:	4620      	mov	r0, r4
   1cccc:	f002 f85e 	bl	1ed8c <get_row_soil_moisture_threshold>
   1ccd0:	9b02      	ldr	r3, [sp, #8]
   1ccd2:	4283      	cmp	r3, r0
   1ccd4:	da49      	bge.n	1cd6a <env_control_run+0x1b2>
                {
                    message_control_gpios.row_water_control[row_index] = true;
   1ccd6:	2201      	movs	r2, #1
   1ccd8:	ab14      	add	r3, sp, #80	; 0x50
   1ccda:	4423      	add	r3, r4
   1ccdc:	f803 2c0d 	strb.w	r2, [r3, #-13]
   1cce0:	4b55      	ldr	r3, [pc, #340]	; (1ce38 <env_control_run+0x280>)
   1cce2:	4a56      	ldr	r2, [pc, #344]	; (1ce3c <env_control_run+0x284>)
   1cce4:	1a9b      	subs	r3, r3, r2
   1cce6:	08db      	lsrs	r3, r3, #3
                    // Set water on for row index
                    LOG_INF("Auto water on for %d", row_index + 1);
   1cce8:	2203      	movs	r2, #3
   1ccea:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   1ccee:	f362 0102 	bfi	r1, r2, #0, #3
   1ccf2:	460a      	mov	r2, r1
   1ccf4:	f36f 02c5 	bfc	r2, #3, #3
   1ccf8:	f363 128f 	bfi	r2, r3, #6, #10
   1ccfc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
   1cd00:	1c61      	adds	r1, r4, #1
   1cd02:	4853      	ldr	r0, [pc, #332]	; (1ce50 <env_control_run+0x298>)
   1cd04:	f003 fad0 	bl	202a8 <log_1>
                    message_control_gpios.row_water_control[row_index] = false;
                    // Set water off for row index
                    LOG_INF("Auto water off for %d", row_index + 1);
                }
                // Lights will be on as long as the row is registered
                message_control_gpios.row_lights_control[row_index] = true;
   1cd08:	2201      	movs	r2, #1
   1cd0a:	ab14      	add	r3, sp, #80	; 0x50
   1cd0c:	4423      	add	r3, r4
   1cd0e:	f803 2c08 	strb.w	r2, [r3, #-8]
   1cd12:	4b49      	ldr	r3, [pc, #292]	; (1ce38 <env_control_run+0x280>)
   1cd14:	4a49      	ldr	r2, [pc, #292]	; (1ce3c <env_control_run+0x284>)
   1cd16:	1a9b      	subs	r3, r3, r2
   1cd18:	08db      	lsrs	r3, r3, #3
                    // Set lights on for row index
                LOG_INF("Auto lights on for %d", row_index + 1);
   1cd1a:	2203      	movs	r2, #3
   1cd1c:	f362 0a02 	bfi	sl, r2, #0, #3
   1cd20:	f36f 0ac5 	bfc	sl, #3, #3
   1cd24:	f363 1a8f 	bfi	sl, r3, #6, #10
   1cd28:	4652      	mov	r2, sl
   1cd2a:	1c61      	adds	r1, r4, #1
   1cd2c:	4849      	ldr	r0, [pc, #292]	; (1ce54 <env_control_run+0x29c>)
   1cd2e:	f003 fabb 	bl	202a8 <log_1>
   1cd32:	e0ae      	b.n	1ce92 <env_control_run+0x2da>
                    message_control_gpios.row_fan_control[row_index] = false;
   1cd34:	2200      	movs	r2, #0
   1cd36:	ab14      	add	r3, sp, #80	; 0x50
   1cd38:	4423      	add	r3, r4
   1cd3a:	f803 2c12 	strb.w	r2, [r3, #-18]
   1cd3e:	4b3e      	ldr	r3, [pc, #248]	; (1ce38 <env_control_run+0x280>)
   1cd40:	493e      	ldr	r1, [pc, #248]	; (1ce3c <env_control_run+0x284>)
   1cd42:	1a5b      	subs	r3, r3, r1
   1cd44:	08db      	lsrs	r3, r3, #3
                    LOG_INF("Auto fan off for %d", row_index + 1);
   1cd46:	2103      	movs	r1, #3
   1cd48:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
   1cd4c:	f361 0002 	bfi	r0, r1, #0, #3
   1cd50:	4601      	mov	r1, r0
   1cd52:	f362 01c5 	bfi	r1, r2, #3, #3
   1cd56:	460a      	mov	r2, r1
   1cd58:	f363 128f 	bfi	r2, r3, #6, #10
   1cd5c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   1cd60:	1c61      	adds	r1, r4, #1
   1cd62:	483d      	ldr	r0, [pc, #244]	; (1ce58 <env_control_run+0x2a0>)
   1cd64:	f003 faa0 	bl	202a8 <log_1>
   1cd68:	e7ab      	b.n	1ccc2 <env_control_run+0x10a>
                else if (get_row_current_soil_moisture(row_index) > get_row_soil_moisture_threshold(row_index) + SOIL_MOISTURE_OFFSET * get_row_soil_moisture_threshold(row_index))
   1cd6a:	4620      	mov	r0, r4
   1cd6c:	f001 feba 	bl	1eae4 <get_row_current_soil_moisture>
   1cd70:	f7ef fc18 	bl	c5a4 <__aeabi_i2d>
   1cd74:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1cd78:	4620      	mov	r0, r4
   1cd7a:	f002 f807 	bl	1ed8c <get_row_soil_moisture_threshold>
   1cd7e:	9005      	str	r0, [sp, #20]
   1cd80:	4620      	mov	r0, r4
   1cd82:	f002 f803 	bl	1ed8c <get_row_soil_moisture_threshold>
   1cd86:	f7ef fc0d 	bl	c5a4 <__aeabi_i2d>
   1cd8a:	a329      	add	r3, pc, #164	; (adr r3, 1ce30 <env_control_run+0x278>)
   1cd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cd90:	f7ef fc72 	bl	c678 <__aeabi_dmul>
   1cd94:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1cd98:	9805      	ldr	r0, [sp, #20]
   1cd9a:	f7ef fc03 	bl	c5a4 <__aeabi_i2d>
   1cd9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1cda2:	f7ef fab3 	bl	c30c <__adddf3>
   1cda6:	4602      	mov	r2, r0
   1cda8:	460b      	mov	r3, r1
   1cdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1cdae:	f7ef fef3 	bl	cb98 <__aeabi_dcmpgt>
   1cdb2:	b1d0      	cbz	r0, 1cdea <env_control_run+0x232>
                    message_control_gpios.row_water_control[row_index] = false;
   1cdb4:	2200      	movs	r2, #0
   1cdb6:	ab14      	add	r3, sp, #80	; 0x50
   1cdb8:	4423      	add	r3, r4
   1cdba:	f803 2c0d 	strb.w	r2, [r3, #-13]
   1cdbe:	4b1e      	ldr	r3, [pc, #120]	; (1ce38 <env_control_run+0x280>)
   1cdc0:	491e      	ldr	r1, [pc, #120]	; (1ce3c <env_control_run+0x284>)
   1cdc2:	1a5b      	subs	r3, r3, r1
   1cdc4:	08db      	lsrs	r3, r3, #3
                    LOG_INF("Auto water off for %d", row_index + 1);
   1cdc6:	2103      	movs	r1, #3
   1cdc8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   1cdcc:	f361 0002 	bfi	r0, r1, #0, #3
   1cdd0:	4601      	mov	r1, r0
   1cdd2:	f362 01c5 	bfi	r1, r2, #3, #3
   1cdd6:	460a      	mov	r2, r1
   1cdd8:	f363 128f 	bfi	r2, r3, #6, #10
   1cddc:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
   1cde0:	1c61      	adds	r1, r4, #1
   1cde2:	481e      	ldr	r0, [pc, #120]	; (1ce5c <env_control_run+0x2a4>)
   1cde4:	f003 fa60 	bl	202a8 <log_1>
   1cde8:	e78e      	b.n	1cd08 <env_control_run+0x150>
                else if (get_row_current_soil_moisture(row_index) >= ONE_HUNDRED_PERCENT)
   1cdea:	4620      	mov	r0, r4
   1cdec:	f001 fe7a 	bl	1eae4 <get_row_current_soil_moisture>
   1cdf0:	2863      	cmp	r0, #99	; 0x63
   1cdf2:	dd89      	ble.n	1cd08 <env_control_run+0x150>
                    message_control_gpios.row_water_control[row_index] = false;
   1cdf4:	2200      	movs	r2, #0
   1cdf6:	ab14      	add	r3, sp, #80	; 0x50
   1cdf8:	4423      	add	r3, r4
   1cdfa:	f803 2c0d 	strb.w	r2, [r3, #-13]
   1cdfe:	4b0e      	ldr	r3, [pc, #56]	; (1ce38 <env_control_run+0x280>)
   1ce00:	490e      	ldr	r1, [pc, #56]	; (1ce3c <env_control_run+0x284>)
   1ce02:	1a5b      	subs	r3, r3, r1
   1ce04:	08db      	lsrs	r3, r3, #3
                    LOG_INF("Auto water off for %d", row_index + 1);
   1ce06:	2103      	movs	r1, #3
   1ce08:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
   1ce0c:	f361 0002 	bfi	r0, r1, #0, #3
   1ce10:	4601      	mov	r1, r0
   1ce12:	f362 01c5 	bfi	r1, r2, #3, #3
   1ce16:	460a      	mov	r2, r1
   1ce18:	f363 128f 	bfi	r2, r3, #6, #10
   1ce1c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   1ce20:	1c61      	adds	r1, r4, #1
   1ce22:	480e      	ldr	r0, [pc, #56]	; (1ce5c <env_control_run+0x2a4>)
   1ce24:	f003 fa40 	bl	202a8 <log_1>
   1ce28:	e76e      	b.n	1cd08 <env_control_run+0x150>
   1ce2a:	bf00      	nop
   1ce2c:	f3af 8000 	nop.w
   1ce30:	9999999a 	.word	0x9999999a
   1ce34:	3fb99999 	.word	0x3fb99999
   1ce38:	0003d224 	.word	0x0003d224
   1ce3c:	0003d1a4 	.word	0x0003d1a4
   1ce40:	0003da1c 	.word	0x0003da1c
   1ce44:	0003da4c 	.word	0x0003da4c
   1ce48:	0003da7c 	.word	0x0003da7c
   1ce4c:	0003da98 	.word	0x0003da98
   1ce50:	0003dac0 	.word	0x0003dac0
   1ce54:	0003daf0 	.word	0x0003daf0
   1ce58:	0003daac 	.word	0x0003daac
   1ce5c:	0003dad8 	.word	0x0003dad8
            }
        }
        else
        {
            message_control_gpios.row_fan_control[row_index] = false;
   1ce60:	2200      	movs	r2, #0
   1ce62:	ab14      	add	r3, sp, #80	; 0x50
   1ce64:	4423      	add	r3, r4
   1ce66:	f803 2c12 	strb.w	r2, [r3, #-18]
            message_control_gpios.row_water_control[row_index] = false;
   1ce6a:	f803 2c0d 	strb.w	r2, [r3, #-13]
            message_control_gpios.row_lights_control[row_index] = false;
   1ce6e:	f803 2c08 	strb.w	r2, [r3, #-8]
   1ce72:	4b46      	ldr	r3, [pc, #280]	; (1cf8c <env_control_run+0x3d4>)
   1ce74:	4946      	ldr	r1, [pc, #280]	; (1cf90 <env_control_run+0x3d8>)
   1ce76:	1a5b      	subs	r3, r3, r1
   1ce78:	08db      	lsrs	r3, r3, #3
            // Set fan/water/light off
            LOG_INF("Row not registered, so all off %d", row_index + 1);
   1ce7a:	2103      	movs	r1, #3
   1ce7c:	f361 0502 	bfi	r5, r1, #0, #3
   1ce80:	f362 05c5 	bfi	r5, r2, #3, #3
   1ce84:	f363 158f 	bfi	r5, r3, #6, #10
   1ce88:	462a      	mov	r2, r5
   1ce8a:	1c61      	adds	r1, r4, #1
   1ce8c:	4841      	ldr	r0, [pc, #260]	; (1cf94 <env_control_run+0x3dc>)
   1ce8e:	f003 fa0b 	bl	202a8 <log_1>
    for (uint8_t row_index = 0; row_index < MAX_CONFIGURATION_ID; row_index++)
   1ce92:	3401      	adds	r4, #1
   1ce94:	b2e4      	uxtb	r4, r4
   1ce96:	2c04      	cmp	r4, #4
   1ce98:	d860      	bhi.n	1cf5c <env_control_run+0x3a4>
        if (get_row_registered(row_index))
   1ce9a:	4620      	mov	r0, r4
   1ce9c:	f002 f8c4 	bl	1f028 <get_row_registered>
   1cea0:	2800      	cmp	r0, #0
   1cea2:	d0dd      	beq.n	1ce60 <env_control_run+0x2a8>
            if (!get_row_automatic_control(row_index))
   1cea4:	4620      	mov	r0, r4
   1cea6:	f002 f899 	bl	1efdc <get_row_automatic_control>
   1ceaa:	2800      	cmp	r0, #0
   1ceac:	f47f aee0 	bne.w	1cc70 <env_control_run+0xb8>
                if (get_row_fan_switch(row_index))
   1ceb0:	4620      	mov	r0, r4
   1ceb2:	f001 ffff 	bl	1eeb4 <get_row_fan_switch>
   1ceb6:	2800      	cmp	r0, #0
   1ceb8:	f43f ae93 	beq.w	1cbe2 <env_control_run+0x2a>
                    message_control_gpios.row_fan_control[row_index] = true;
   1cebc:	2201      	movs	r2, #1
   1cebe:	ab14      	add	r3, sp, #80	; 0x50
   1cec0:	4423      	add	r3, r4
   1cec2:	f803 2c12 	strb.w	r2, [r3, #-18]
   1cec6:	4b31      	ldr	r3, [pc, #196]	; (1cf8c <env_control_run+0x3d4>)
   1cec8:	4a31      	ldr	r2, [pc, #196]	; (1cf90 <env_control_run+0x3d8>)
   1ceca:	1a9b      	subs	r3, r3, r2
   1cecc:	08db      	lsrs	r3, r3, #3
                    LOG_INF("Manual fan on for %d", row_index + 1);
   1cece:	2203      	movs	r2, #3
   1ced0:	f362 0802 	bfi	r8, r2, #0, #3
   1ced4:	f36f 08c5 	bfc	r8, #3, #3
   1ced8:	f363 188f 	bfi	r8, r3, #6, #10
   1cedc:	4642      	mov	r2, r8
   1cede:	1c61      	adds	r1, r4, #1
   1cee0:	482d      	ldr	r0, [pc, #180]	; (1cf98 <env_control_run+0x3e0>)
   1cee2:	f003 f9e1 	bl	202a8 <log_1>
                if (get_row_water_switch(row_index))
   1cee6:	4620      	mov	r0, r4
   1cee8:	f001 ff9a 	bl	1ee20 <get_row_water_switch>
   1ceec:	2800      	cmp	r0, #0
   1ceee:	f43f ae8e 	beq.w	1cc0e <env_control_run+0x56>
                    message_control_gpios.row_water_control[row_index] = true;
   1cef2:	2201      	movs	r2, #1
   1cef4:	ab14      	add	r3, sp, #80	; 0x50
   1cef6:	4423      	add	r3, r4
   1cef8:	f803 2c0d 	strb.w	r2, [r3, #-13]
   1cefc:	4b23      	ldr	r3, [pc, #140]	; (1cf8c <env_control_run+0x3d4>)
   1cefe:	4a24      	ldr	r2, [pc, #144]	; (1cf90 <env_control_run+0x3d8>)
   1cf00:	1a9b      	subs	r3, r3, r2
   1cf02:	08db      	lsrs	r3, r3, #3
                    LOG_INF("Manual water on for %d", row_index + 1);
   1cf04:	2203      	movs	r2, #3
   1cf06:	f362 0702 	bfi	r7, r2, #0, #3
   1cf0a:	f36f 07c5 	bfc	r7, #3, #3
   1cf0e:	f363 178f 	bfi	r7, r3, #6, #10
   1cf12:	463a      	mov	r2, r7
   1cf14:	1c61      	adds	r1, r4, #1
   1cf16:	4821      	ldr	r0, [pc, #132]	; (1cf9c <env_control_run+0x3e4>)
   1cf18:	f003 f9c6 	bl	202a8 <log_1>
                if (get_row_light_switch(row_index))
   1cf1c:	4620      	mov	r0, r4
   1cf1e:	f002 f813 	bl	1ef48 <get_row_light_switch>
   1cf22:	2800      	cmp	r0, #0
   1cf24:	f43f ae89 	beq.w	1cc3a <env_control_run+0x82>
                    message_control_gpios.row_lights_control[row_index] = true;
   1cf28:	2201      	movs	r2, #1
   1cf2a:	ab14      	add	r3, sp, #80	; 0x50
   1cf2c:	4423      	add	r3, r4
   1cf2e:	f803 2c08 	strb.w	r2, [r3, #-8]
   1cf32:	4b16      	ldr	r3, [pc, #88]	; (1cf8c <env_control_run+0x3d4>)
   1cf34:	4a16      	ldr	r2, [pc, #88]	; (1cf90 <env_control_run+0x3d8>)
   1cf36:	1a9b      	subs	r3, r3, r2
   1cf38:	08db      	lsrs	r3, r3, #3
                    LOG_INF("Manual lights on for %d", row_index + 1);
   1cf3a:	2203      	movs	r2, #3
   1cf3c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1cf40:	f362 0102 	bfi	r1, r2, #0, #3
   1cf44:	460a      	mov	r2, r1
   1cf46:	f36f 02c5 	bfc	r2, #3, #3
   1cf4a:	f363 128f 	bfi	r2, r3, #6, #10
   1cf4e:	f8ad 2018 	strh.w	r2, [sp, #24]
   1cf52:	1c61      	adds	r1, r4, #1
   1cf54:	4812      	ldr	r0, [pc, #72]	; (1cfa0 <env_control_run+0x3e8>)
   1cf56:	f003 f9a7 	bl	202a8 <log_1>
   1cf5a:	e79a      	b.n	1ce92 <env_control_run+0x2da>
 *
 * @return The computed CRC16 value
 */
static inline uint16_t crc16_ansi(const uint8_t *src, size_t len)
{
	return crc16(src, len, 0x8005, 0xffff, true);
   1cf5c:	2301      	movs	r3, #1
   1cf5e:	9300      	str	r3, [sp, #0]
   1cf60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cf64:	f248 0205 	movw	r2, #32773	; 0x8005
   1cf68:	2111      	movs	r1, #17
   1cf6a:	a80f      	add	r0, sp, #60	; 0x3c
   1cf6c:	f017 fa02 	bl	34374 <crc16>
        }
    }
    message_control_gpios.message_crc = crc16_ansi((uint8_t*)&message_control_gpios, sizeof(message_control_gpios_t) - sizeof(message_control_gpios.message_crc));
   1cf70:	f8ad 004d 	strh.w	r0, [sp, #77]	; 0x4d

    // Send message to 9160 in order to control the gpios
    internal_uart_send_data((uint8_t*)&message_control_gpios, sizeof(message_control_gpios_t));
   1cf74:	2113      	movs	r1, #19
   1cf76:	a80f      	add	r0, sp, #60	; 0x3c
   1cf78:	f001 faa6 	bl	1e4c8 <internal_uart_send_data>
    smf_set_state(SMF_CTX(&env_control_fsm_user_object), &env_control_states[ENV_CONTROL_WFE]);
   1cf7c:	4909      	ldr	r1, [pc, #36]	; (1cfa4 <env_control_run+0x3ec>)
   1cf7e:	480a      	ldr	r0, [pc, #40]	; (1cfa8 <env_control_run+0x3f0>)
   1cf80:	f005 ff3c 	bl	22dfc <smf_set_state>
}
   1cf84:	b015      	add	sp, #84	; 0x54
   1cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf8a:	bf00      	nop
   1cf8c:	0003d224 	.word	0x0003d224
   1cf90:	0003d1a4 	.word	0x0003d1a4
   1cf94:	0003db08 	.word	0x0003db08
   1cf98:	0003da04 	.word	0x0003da04
   1cf9c:	0003da34 	.word	0x0003da34
   1cfa0:	0003da64 	.word	0x0003da64
   1cfa4:	0003db78 	.word	0x0003db78
   1cfa8:	20007a30 	.word	0x20007a30
   1cfac:	00000000 	.word	0x00000000

0001cfb0 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1cfb0:	b538      	push	{r3, r4, r5, lr}
   1cfb2:	4605      	mov	r5, r0
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1cfb4:	f04f 30ff 	mov.w	r0, #4294967295
   1cfb8:	f04f 31ff 	mov.w	r1, #4294967295
   1cfbc:	f011 f994 	bl	2e2e8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1cfc0:	4945      	ldr	r1, [pc, #276]	; (1d0d8 <nrf_flash_sync_exe+0x128>)
   1cfc2:	4846      	ldr	r0, [pc, #280]	; (1d0dc <nrf_flash_sync_exe+0x12c>)
   1cfc4:	f7ef ffc2 	bl	cf4c <mpsl_timeslot_session_open>
   1cfc8:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1cfca:	f011 f997 	bl	2e2fc <multithreading_lock_release>

	if (ret < 0) {
   1cfce:	2c00      	cmp	r4, #0
   1cfd0:	db48      	blt.n	1d064 <nrf_flash_sync_exe+0xb4>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1cfd2:	4c43      	ldr	r4, [pc, #268]	; (1d0e0 <nrf_flash_sync_exe+0x130>)
   1cfd4:	2200      	movs	r2, #0
   1cfd6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1cfda:	2301      	movs	r3, #1
   1cfdc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
   1cfe0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1cfe4:	69e3      	ldr	r3, [r4, #28]
   1cfe6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
	req->params.earliest.length_us =
   1cfea:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   1cfec:	4b3d      	ldr	r3, [pc, #244]	; (1d0e4 <nrf_flash_sync_exe+0x134>)
   1cfee:	6323      	str	r3, [r4, #48]	; 0x30

	_context.op_desc = op_desc;
   1cff0:	6225      	str	r5, [r4, #32]
	_context.status = -ETIMEDOUT;
   1cff2:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1cff6:	63e3      	str	r3, [r4, #60]	; 0x3c
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cff8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1cffc:	f3bf 8f5b 	dmb	ish
   1d000:	e853 1f00 	ldrex	r1, [r3]
   1d004:	e843 2000 	strex	r0, r2, [r3]
   1d008:	2800      	cmp	r0, #0
   1d00a:	d1f9      	bne.n	1d000 <nrf_flash_sync_exe+0x50>
   1d00c:	f3bf 8f5b 	dmb	ish
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d010:	f04f 30ff 	mov.w	r0, #4294967295
   1d014:	f04f 31ff 	mov.w	r1, #4294967295
   1d018:	f011 f966 	bl	2e2e8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	ret = mpsl_timeslot_request(_context.session_id, req);
   1d01c:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1d020:	7e20      	ldrb	r0, [r4, #24]
   1d022:	f7fc f8cd 	bl	191c0 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   1d026:	f011 f969 	bl	2e2fc <multithreading_lock_release>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1d02a:	a329      	add	r3, pc, #164	; (adr r3, 1d0d0 <nrf_flash_sync_exe+0x120>)
   1d02c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d030:	4620      	mov	r0, r4
   1d032:	f013 f943 	bl	302bc <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1d036:	2800      	cmp	r0, #0
   1d038:	db28      	blt.n	1d08c <nrf_flash_sync_exe+0xdc>
		LOG_ERR("timeout");
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d03a:	f04f 30ff 	mov.w	r0, #4294967295
   1d03e:	f04f 31ff 	mov.w	r1, #4294967295
   1d042:	f011 f951 	bl	2e2e8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	mpsl_timeslot_session_close(_context.session_id);
   1d046:	4c26      	ldr	r4, [pc, #152]	; (1d0e0 <nrf_flash_sync_exe+0x130>)
   1d048:	7e20      	ldrb	r0, [r4, #24]
   1d04a:	f7fc f8f2 	bl	19232 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1d04e:	f011 f955 	bl	2e2fc <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d052:	f3bf 8f5b 	dmb	ish
   1d056:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1d058:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   1d05c:	bb93      	cbnz	r3, 1d0c4 <nrf_flash_sync_exe+0x114>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   1d05e:	4b20      	ldr	r3, [pc, #128]	; (1d0e0 <nrf_flash_sync_exe+0x130>)
   1d060:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
   1d062:	bd38      	pop	{r3, r4, r5, pc}
   1d064:	4b20      	ldr	r3, [pc, #128]	; (1d0e8 <nrf_flash_sync_exe+0x138>)
   1d066:	4a21      	ldr	r2, [pc, #132]	; (1d0ec <nrf_flash_sync_exe+0x13c>)
   1d068:	1a9b      	subs	r3, r3, r2
   1d06a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1d06c:	f04f 0200 	mov.w	r2, #0
   1d070:	2101      	movs	r1, #1
   1d072:	f361 0202 	bfi	r2, r1, #0, #3
   1d076:	f36f 02c5 	bfc	r2, #3, #3
   1d07a:	f363 128f 	bfi	r2, r3, #6, #10
   1d07e:	4621      	mov	r1, r4
   1d080:	481b      	ldr	r0, [pc, #108]	; (1d0f0 <nrf_flash_sync_exe+0x140>)
   1d082:	f003 f911 	bl	202a8 <log_1>
		return -ENOMEM;
   1d086:	f06f 000b 	mvn.w	r0, #11
   1d08a:	e7ea      	b.n	1d062 <nrf_flash_sync_exe+0xb2>
   1d08c:	4b16      	ldr	r3, [pc, #88]	; (1d0e8 <nrf_flash_sync_exe+0x138>)
   1d08e:	4a17      	ldr	r2, [pc, #92]	; (1d0ec <nrf_flash_sync_exe+0x13c>)
   1d090:	1a9b      	subs	r3, r3, r2
   1d092:	08db      	lsrs	r3, r3, #3
		LOG_ERR("timeout");
   1d094:	2401      	movs	r4, #1
   1d096:	f04f 0100 	mov.w	r1, #0
   1d09a:	f364 0102 	bfi	r1, r4, #0, #3
   1d09e:	f36f 01c5 	bfc	r1, #3, #3
   1d0a2:	f363 118f 	bfi	r1, r3, #6, #10
   1d0a6:	4813      	ldr	r0, [pc, #76]	; (1d0f4 <nrf_flash_sync_exe+0x144>)
   1d0a8:	f003 f9b4 	bl	20414 <log_0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d0ac:	4b12      	ldr	r3, [pc, #72]	; (1d0f8 <nrf_flash_sync_exe+0x148>)
   1d0ae:	f3bf 8f5b 	dmb	ish
   1d0b2:	e853 2f00 	ldrex	r2, [r3]
   1d0b6:	e843 4100 	strex	r1, r4, [r3]
   1d0ba:	2900      	cmp	r1, #0
   1d0bc:	d1f9      	bne.n	1d0b2 <nrf_flash_sync_exe+0x102>
   1d0be:	f3bf 8f5b 	dmb	ish
   1d0c2:	e7ba      	b.n	1d03a <nrf_flash_sync_exe+0x8a>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
   1d0c4:	4620      	mov	r0, r4
   1d0c6:	f013 f923 	bl	30310 <z_impl_k_sem_reset>
}
   1d0ca:	e7c8      	b.n	1d05e <nrf_flash_sync_exe+0xae>
   1d0cc:	f3af 8000 	nop.w
   1d0d0:	001138d5 	.word	0x001138d5
   1d0d4:	00000000 	.word	0x00000000
   1d0d8:	2000d014 	.word	0x2000d014
   1d0dc:	0002e9f5 	.word	0x0002e9f5
   1d0e0:	2000cffc 	.word	0x2000cffc
   1d0e4:	07a11fff 	.word	0x07a11fff
   1d0e8:	0003d23c 	.word	0x0003d23c
   1d0ec:	0003d1a4 	.word	0x0003d1a4
   1d0f0:	0004092c 	.word	0x0004092c
   1d0f4:	0003f938 	.word	0x0003f938
   1d0f8:	2000d03c 	.word	0x2000d03c

0001d0fc <ble_fsm>:
/**
 * @brief Bluetooth FSM -> Takes care of the bluetooth connection and disconnection process
 * 
 */
void ble_fsm(void)
{
   1d0fc:	b508      	push	{r3, lr}
    int32_t ret;

    // Set initial state
    smf_set_initial(SMF_CTX(&user_object), &ble_states[BLE_INIT_STATE]);
   1d0fe:	4905      	ldr	r1, [pc, #20]	; (1d114 <ble_fsm+0x18>)
   1d100:	4805      	ldr	r0, [pc, #20]	; (1d118 <ble_fsm+0x1c>)
   1d102:	f019 fe73 	bl	36dec <smf_set_initial>

    // Run the state machine
    while (1)
    {
        // State machine terminates if a non-zero value is returned
        ret = smf_run_state(SMF_CTX(&user_object));
   1d106:	4804      	ldr	r0, [pc, #16]	; (1d118 <ble_fsm+0x1c>)
   1d108:	f019 fe7f 	bl	36e0a <smf_run_state>
        if (ret)
   1d10c:	2800      	cmp	r0, #0
   1d10e:	d0fa      	beq.n	1d106 <ble_fsm+0xa>
        {
            // handle return code and terminate state machine
            break;
        }
    }
}
   1d110:	bd08      	pop	{r3, pc}
   1d112:	bf00      	nop
   1d114:	0003d48c 	.word	0x0003d48c
   1d118:	20006f20 	.word	0x20006f20

0001d11c <ble_wait_for_disconnect_run>:
{
   1d11c:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   1d11e:	f04f 32ff 	mov.w	r2, #4294967295
   1d122:	f04f 33ff 	mov.w	r3, #4294967295
   1d126:	4804      	ldr	r0, [pc, #16]	; (1d138 <ble_wait_for_disconnect_run+0x1c>)
   1d128:	f013 f8c8 	bl	302bc <z_impl_k_sem_take>
    smf_set_state(SMF_CTX(&user_object), &ble_states[BLE_CONNECT_STATE]);
   1d12c:	4903      	ldr	r1, [pc, #12]	; (1d13c <ble_wait_for_disconnect_run+0x20>)
   1d12e:	4804      	ldr	r0, [pc, #16]	; (1d140 <ble_wait_for_disconnect_run+0x24>)
   1d130:	f005 fe64 	bl	22dfc <smf_set_state>
}
   1d134:	bd08      	pop	{r3, pc}
   1d136:	bf00      	nop
   1d138:	20006f08 	.word	0x20006f08
   1d13c:	0003d49c 	.word	0x0003d49c
   1d140:	20006f20 	.word	0x20006f20

0001d144 <ble_wait_for_disconnect_entry>:
{
   1d144:	b508      	push	{r3, lr}
	z_impl_k_sem_reset(sem);
   1d146:	4802      	ldr	r0, [pc, #8]	; (1d150 <ble_wait_for_disconnect_entry+0xc>)
   1d148:	f013 f8e2 	bl	30310 <z_impl_k_sem_reset>
}
   1d14c:	bd08      	pop	{r3, pc}
   1d14e:	bf00      	nop
   1d150:	20006f08 	.word	0x20006f08

0001d154 <ble_char_discover_state_run>:
{
   1d154:	b538      	push	{r3, r4, r5, lr}
    if (user_ctx->active_connection_data->is_connected)
   1d156:	6903      	ldr	r3, [r0, #16]
   1d158:	7d5b      	ldrb	r3, [r3, #21]
   1d15a:	b33b      	cbz	r3, 1d1ac <ble_char_discover_state_run+0x58>
   1d15c:	4605      	mov	r5, r0
        for(int measurement_service_characteristic_count = 0; measurement_service_characteristic_count < MEASUREMENT_SERVICE_CHARACTERISTIC_COUNT; measurement_service_characteristic_count++)
   1d15e:	2400      	movs	r4, #0
   1d160:	e00c      	b.n	1d17c <ble_char_discover_state_run+0x28>
            characteristic_discovery_wrapper(user_ctx->active_connection_data->ble_connection_handle, MEASUREMENT_SERVICE_INDEX, measurement_service_characteristic_count);
   1d162:	692b      	ldr	r3, [r5, #16]
   1d164:	b2e2      	uxtb	r2, r4
   1d166:	2100      	movs	r1, #0
   1d168:	6818      	ldr	r0, [r3, #0]
   1d16a:	f000 fbcb 	bl	1d904 <characteristic_discovery_wrapper>
	return z_impl_k_sem_take(sem, timeout);
   1d16e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1d172:	2300      	movs	r3, #0
   1d174:	4810      	ldr	r0, [pc, #64]	; (1d1b8 <ble_char_discover_state_run+0x64>)
   1d176:	f013 f8a1 	bl	302bc <z_impl_k_sem_take>
        for(int measurement_service_characteristic_count = 0; measurement_service_characteristic_count < MEASUREMENT_SERVICE_CHARACTERISTIC_COUNT; measurement_service_characteristic_count++)
   1d17a:	3401      	adds	r4, #1
   1d17c:	2c03      	cmp	r4, #3
   1d17e:	ddf0      	ble.n	1d162 <ble_char_discover_state_run+0xe>
        for(int configure_service_char_count = 0 + MEASUREMENT_SERVICE_CHARACTERISTIC_COUNT; configure_service_char_count < CONFIGURE_SERVICE_CHARACTERISTIC_COUNT + MEASUREMENT_SERVICE_CHARACTERISTIC_COUNT; configure_service_char_count++)
   1d180:	2404      	movs	r4, #4
   1d182:	e00c      	b.n	1d19e <ble_char_discover_state_run+0x4a>
            characteristic_discovery_wrapper(user_ctx->active_connection_data->ble_connection_handle, CONFIGURE_SERVICE_INDEX, configure_service_char_count);
   1d184:	692b      	ldr	r3, [r5, #16]
   1d186:	b2e2      	uxtb	r2, r4
   1d188:	2101      	movs	r1, #1
   1d18a:	6818      	ldr	r0, [r3, #0]
   1d18c:	f000 fbba 	bl	1d904 <characteristic_discovery_wrapper>
   1d190:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1d194:	2300      	movs	r3, #0
   1d196:	4808      	ldr	r0, [pc, #32]	; (1d1b8 <ble_char_discover_state_run+0x64>)
   1d198:	f013 f890 	bl	302bc <z_impl_k_sem_take>
        for(int configure_service_char_count = 0 + MEASUREMENT_SERVICE_CHARACTERISTIC_COUNT; configure_service_char_count < CONFIGURE_SERVICE_CHARACTERISTIC_COUNT + MEASUREMENT_SERVICE_CHARACTERISTIC_COUNT; configure_service_char_count++)
   1d19c:	3401      	adds	r4, #1
   1d19e:	2c05      	cmp	r4, #5
   1d1a0:	ddf0      	ble.n	1d184 <ble_char_discover_state_run+0x30>
        smf_set_state(SMF_CTX(&user_object), &ble_states[BLE_CONNECT_STATE]);
   1d1a2:	4906      	ldr	r1, [pc, #24]	; (1d1bc <ble_char_discover_state_run+0x68>)
   1d1a4:	4806      	ldr	r0, [pc, #24]	; (1d1c0 <ble_char_discover_state_run+0x6c>)
   1d1a6:	f005 fe29 	bl	22dfc <smf_set_state>
}
   1d1aa:	bd38      	pop	{r3, r4, r5, pc}
        smf_set_state(SMF_CTX(&user_object), &ble_states[BLE_WAIT_FOR_DISCONNECT]);
   1d1ac:	4905      	ldr	r1, [pc, #20]	; (1d1c4 <ble_char_discover_state_run+0x70>)
   1d1ae:	4804      	ldr	r0, [pc, #16]	; (1d1c0 <ble_char_discover_state_run+0x6c>)
   1d1b0:	f005 fe24 	bl	22dfc <smf_set_state>
}
   1d1b4:	e7f9      	b.n	1d1aa <ble_char_discover_state_run+0x56>
   1d1b6:	bf00      	nop
   1d1b8:	20006ec0 	.word	0x20006ec0
   1d1bc:	0003d49c 	.word	0x0003d49c
   1d1c0:	20006f20 	.word	0x20006f20
   1d1c4:	0003d4bc 	.word	0x0003d4bc

0001d1c8 <ble_connect_state_run>:
{
   1d1c8:	b510      	push	{r4, lr}
   1d1ca:	4604      	mov	r4, r0
    user_ctx->active_connection_data = start_scan(&scan_param);
   1d1cc:	480a      	ldr	r0, [pc, #40]	; (1d1f8 <ble_connect_state_run+0x30>)
   1d1ce:	f000 fa15 	bl	1d5fc <start_scan>
   1d1d2:	6120      	str	r0, [r4, #16]
    if (user_ctx->active_connection_data == NULL)
   1d1d4:	b158      	cbz	r0, 1d1ee <ble_connect_state_run+0x26>
   1d1d6:	f04f 32ff 	mov.w	r2, #4294967295
   1d1da:	f04f 33ff 	mov.w	r3, #4294967295
   1d1de:	4807      	ldr	r0, [pc, #28]	; (1d1fc <ble_connect_state_run+0x34>)
   1d1e0:	f013 f86c 	bl	302bc <z_impl_k_sem_take>
        smf_set_state(SMF_CTX(&user_object), &ble_states[BLE_CHAR_DISCOVER_STATE]);
   1d1e4:	4906      	ldr	r1, [pc, #24]	; (1d200 <ble_connect_state_run+0x38>)
   1d1e6:	4807      	ldr	r0, [pc, #28]	; (1d204 <ble_connect_state_run+0x3c>)
   1d1e8:	f005 fe08 	bl	22dfc <smf_set_state>
}
   1d1ec:	bd10      	pop	{r4, pc}
        smf_set_state(SMF_CTX(&user_object), &ble_states[BLE_WAIT_FOR_DISCONNECT]);
   1d1ee:	4906      	ldr	r1, [pc, #24]	; (1d208 <ble_connect_state_run+0x40>)
   1d1f0:	4804      	ldr	r0, [pc, #16]	; (1d204 <ble_connect_state_run+0x3c>)
   1d1f2:	f005 fe03 	bl	22dfc <smf_set_state>
   1d1f6:	e7f9      	b.n	1d1ec <ble_connect_state_run+0x24>
   1d1f8:	20000420 	.word	0x20000420
   1d1fc:	20006ed8 	.word	0x20006ed8
   1d200:	0003d4ac 	.word	0x0003d4ac
   1d204:	20006f20 	.word	0x20006f20
   1d208:	0003d4bc 	.word	0x0003d4bc

0001d20c <ble_init_state_exit>:
{
   1d20c:	b508      	push	{r3, lr}
   1d20e:	4b08      	ldr	r3, [pc, #32]	; (1d230 <ble_init_state_exit+0x24>)
   1d210:	4a08      	ldr	r2, [pc, #32]	; (1d234 <ble_init_state_exit+0x28>)
   1d212:	1a9b      	subs	r3, r3, r2
   1d214:	08db      	lsrs	r3, r3, #3
    LOG_INF("Ble initialized");
   1d216:	f04f 0100 	mov.w	r1, #0
   1d21a:	2203      	movs	r2, #3
   1d21c:	f362 0102 	bfi	r1, r2, #0, #3
   1d220:	f36f 01c5 	bfc	r1, #3, #3
   1d224:	f363 118f 	bfi	r1, r3, #6, #10
   1d228:	4803      	ldr	r0, [pc, #12]	; (1d238 <ble_init_state_exit+0x2c>)
   1d22a:	f003 f8f3 	bl	20414 <log_0>
}
   1d22e:	bd08      	pop	{r3, pc}
   1d230:	0003d1a4 	.word	0x0003d1a4
   1d234:	0003d1a4 	.word	0x0003d1a4
   1d238:	0003d448 	.word	0x0003d448

0001d23c <ble_init_state_run>:
{
   1d23c:	b508      	push	{r3, lr}
   1d23e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d242:	2300      	movs	r3, #0
   1d244:	480e      	ldr	r0, [pc, #56]	; (1d280 <ble_init_state_run+0x44>)
   1d246:	f013 f839 	bl	302bc <z_impl_k_sem_take>
    if (err == -EAGAIN)
   1d24a:	f110 0f0b 	cmn.w	r0, #11
   1d24e:	d004      	beq.n	1d25a <ble_init_state_run+0x1e>
    smf_set_state(SMF_CTX(&user_object), &ble_states[BLE_CONNECT_STATE]);
   1d250:	490c      	ldr	r1, [pc, #48]	; (1d284 <ble_init_state_run+0x48>)
   1d252:	480d      	ldr	r0, [pc, #52]	; (1d288 <ble_init_state_run+0x4c>)
   1d254:	f005 fdd2 	bl	22dfc <smf_set_state>
}
   1d258:	bd08      	pop	{r3, pc}
   1d25a:	4b0c      	ldr	r3, [pc, #48]	; (1d28c <ble_init_state_run+0x50>)
   1d25c:	4a0c      	ldr	r2, [pc, #48]	; (1d290 <ble_init_state_run+0x54>)
   1d25e:	1a9b      	subs	r3, r3, r2
   1d260:	08db      	lsrs	r3, r3, #3
        LOG_INF("Ble could not start (err %d)", err);
   1d262:	f04f 0200 	mov.w	r2, #0
   1d266:	2103      	movs	r1, #3
   1d268:	f361 0202 	bfi	r2, r1, #0, #3
   1d26c:	f36f 02c5 	bfc	r2, #3, #3
   1d270:	f363 128f 	bfi	r2, r3, #6, #10
   1d274:	4601      	mov	r1, r0
   1d276:	4807      	ldr	r0, [pc, #28]	; (1d294 <ble_init_state_run+0x58>)
   1d278:	f003 f816 	bl	202a8 <log_1>
   1d27c:	e7e8      	b.n	1d250 <ble_init_state_run+0x14>
   1d27e:	bf00      	nop
   1d280:	20006ef0 	.word	0x20006ef0
   1d284:	0003d49c 	.word	0x0003d49c
   1d288:	20006f20 	.word	0x20006f20
   1d28c:	0003d1a4 	.word	0x0003d1a4
   1d290:	0003d1a4 	.word	0x0003d1a4
   1d294:	0003d458 	.word	0x0003d458

0001d298 <ble_init_state_entry>:
{
   1d298:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d29a:	2201      	movs	r2, #1
   1d29c:	2100      	movs	r1, #0
   1d29e:	480b      	ldr	r0, [pc, #44]	; (1d2cc <ble_init_state_entry+0x34>)
   1d2a0:	f01f f8a5 	bl	3c3ee <z_impl_k_sem_init>
   1d2a4:	2201      	movs	r2, #1
   1d2a6:	2100      	movs	r1, #0
   1d2a8:	4809      	ldr	r0, [pc, #36]	; (1d2d0 <ble_init_state_entry+0x38>)
   1d2aa:	f01f f8a0 	bl	3c3ee <z_impl_k_sem_init>
   1d2ae:	2201      	movs	r2, #1
   1d2b0:	2100      	movs	r1, #0
   1d2b2:	4808      	ldr	r0, [pc, #32]	; (1d2d4 <ble_init_state_entry+0x3c>)
   1d2b4:	f01f f89b 	bl	3c3ee <z_impl_k_sem_init>
   1d2b8:	2201      	movs	r2, #1
   1d2ba:	2100      	movs	r1, #0
   1d2bc:	4806      	ldr	r0, [pc, #24]	; (1d2d8 <ble_init_state_entry+0x40>)
   1d2be:	f01f f896 	bl	3c3ee <z_impl_k_sem_init>
    bt_enable(bt_ready);
   1d2c2:	4806      	ldr	r0, [pc, #24]	; (1d2dc <ble_init_state_entry+0x44>)
   1d2c4:	f008 fa0a 	bl	256dc <bt_enable>
}
   1d2c8:	bd08      	pop	{r3, pc}
   1d2ca:	bf00      	nop
   1d2cc:	20006ef0 	.word	0x20006ef0
   1d2d0:	20006ed8 	.word	0x20006ed8
   1d2d4:	20006ec0 	.word	0x20006ec0
   1d2d8:	20006f08 	.word	0x20006f08
   1d2dc:	0001d679 	.word	0x0001d679

0001d2e0 <connected>:
 * 
 * @param conn connection handle
 * @param conn_err 
 */
static void connected(struct bt_conn *conn, uint8_t conn_err)
{
   1d2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d2e2:	b093      	sub	sp, #76	; 0x4c
   1d2e4:	4606      	mov	r6, r0
   1d2e6:	460d      	mov	r5, r1
    char addr[BT_ADDR_LE_STR_LEN];
    char *log_addr;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1d2e8:	f01a fb64 	bl	379b4 <bt_conn_get_dst>
   1d2ec:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1d2ee:	7803      	ldrb	r3, [r0, #0]
   1d2f0:	2b03      	cmp	r3, #3
   1d2f2:	d83c      	bhi.n	1d36e <connected+0x8e>
   1d2f4:	e8df f003 	tbb	[pc, r3]
   1d2f8:	36312c02 	.word	0x36312c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1d2fc:	492d      	ldr	r1, [pc, #180]	; (1d3b4 <connected+0xd4>)
   1d2fe:	a807      	add	r0, sp, #28
   1d300:	f019 fcc4 	bl	36c8c <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1d304:	79a3      	ldrb	r3, [r4, #6]
   1d306:	7962      	ldrb	r2, [r4, #5]
   1d308:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1d30a:	78e0      	ldrb	r0, [r4, #3]
   1d30c:	78a7      	ldrb	r7, [r4, #2]
   1d30e:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1d310:	f10d 0c1c 	add.w	ip, sp, #28
   1d314:	f8cd c014 	str.w	ip, [sp, #20]
   1d318:	9404      	str	r4, [sp, #16]
   1d31a:	9703      	str	r7, [sp, #12]
   1d31c:	9002      	str	r0, [sp, #8]
   1d31e:	9101      	str	r1, [sp, #4]
   1d320:	9200      	str	r2, [sp, #0]
   1d322:	4a25      	ldr	r2, [pc, #148]	; (1d3b8 <connected+0xd8>)
   1d324:	211e      	movs	r1, #30
   1d326:	a80a      	add	r0, sp, #40	; 0x28
   1d328:	f017 f8af 	bl	3448a <snprintk>

    if (conn_err)
   1d32c:	bb2d      	cbnz	r5, 1d37a <connected+0x9a>

        k_sem_give(&ble_connect_ok_sem);
        return;
    }
    // Set connected flag to true after connection is established
    ble_connection_data->is_connected = true;
   1d32e:	4b23      	ldr	r3, [pc, #140]	; (1d3bc <connected+0xdc>)
   1d330:	6818      	ldr	r0, [r3, #0]
   1d332:	2301      	movs	r3, #1
   1d334:	7543      	strb	r3, [r0, #21]
    // Store mac address of device
    memcpy(ble_connection_data->mac_address, addr, sizeof(char) * MAC_ADDRESS_LENGTH);
   1d336:	2211      	movs	r2, #17
   1d338:	a90a      	add	r1, sp, #40	; 0x28
   1d33a:	3004      	adds	r0, #4
   1d33c:	f019 fd12 	bl	36d64 <memcpy>
	z_impl_k_sem_give(sem);
   1d340:	481f      	ldr	r0, [pc, #124]	; (1d3c0 <connected+0xe0>)
   1d342:	f012 ff93 	bl	3026c <z_impl_k_sem_give>
   1d346:	481f      	ldr	r0, [pc, #124]	; (1d3c4 <connected+0xe4>)
   1d348:	f012 ff90 	bl	3026c <z_impl_k_sem_give>

    k_sem_give(&ble_connect_ok_sem);
    k_sem_give(&at_least_one_active_connection_sem);
}
   1d34c:	b013      	add	sp, #76	; 0x4c
   1d34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1d350:	491d      	ldr	r1, [pc, #116]	; (1d3c8 <connected+0xe8>)
   1d352:	a807      	add	r0, sp, #28
   1d354:	f019 fc9a 	bl	36c8c <strcpy>
		break;
   1d358:	e7d4      	b.n	1d304 <connected+0x24>
		strcpy(type, "public-id");
   1d35a:	491c      	ldr	r1, [pc, #112]	; (1d3cc <connected+0xec>)
   1d35c:	a807      	add	r0, sp, #28
   1d35e:	f019 fc95 	bl	36c8c <strcpy>
		break;
   1d362:	e7cf      	b.n	1d304 <connected+0x24>
		strcpy(type, "random-id");
   1d364:	491a      	ldr	r1, [pc, #104]	; (1d3d0 <connected+0xf0>)
   1d366:	a807      	add	r0, sp, #28
   1d368:	f019 fc90 	bl	36c8c <strcpy>
		break;
   1d36c:	e7ca      	b.n	1d304 <connected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1d36e:	4a19      	ldr	r2, [pc, #100]	; (1d3d4 <connected+0xf4>)
   1d370:	210a      	movs	r1, #10
   1d372:	a807      	add	r0, sp, #28
   1d374:	f017 f889 	bl	3448a <snprintk>
		break;
   1d378:	e7c4      	b.n	1d304 <connected+0x24>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1d37a:	a80a      	add	r0, sp, #40	; 0x28
   1d37c:	f002 fe1c 	bl	1ffb8 <z_log_strdup>
   1d380:	4601      	mov	r1, r0
   1d382:	4a15      	ldr	r2, [pc, #84]	; (1d3d8 <connected+0xf8>)
   1d384:	4b15      	ldr	r3, [pc, #84]	; (1d3dc <connected+0xfc>)
   1d386:	1ad2      	subs	r2, r2, r3
   1d388:	08d2      	lsrs	r2, r2, #3
        LOG_INF("Failed to connect to %s (%u)", log_addr, conn_err);
   1d38a:	f04f 0300 	mov.w	r3, #0
   1d38e:	2003      	movs	r0, #3
   1d390:	f360 0302 	bfi	r3, r0, #0, #3
   1d394:	f36f 03c5 	bfc	r3, #3, #3
   1d398:	f362 138f 	bfi	r3, r2, #6, #10
   1d39c:	462a      	mov	r2, r5
   1d39e:	4810      	ldr	r0, [pc, #64]	; (1d3e0 <connected+0x100>)
   1d3a0:	f002 ffb8 	bl	20314 <log_2>
        bt_conn_unref(conn);
   1d3a4:	4630      	mov	r0, r6
   1d3a6:	f01a f9fb 	bl	377a0 <bt_conn_unref>
   1d3aa:	4805      	ldr	r0, [pc, #20]	; (1d3c0 <connected+0xe0>)
   1d3ac:	f012 ff5e 	bl	3026c <z_impl_k_sem_give>
        return;
   1d3b0:	e7cc      	b.n	1d34c <connected+0x6c>
   1d3b2:	bf00      	nop
   1d3b4:	0003d4cc 	.word	0x0003d4cc
   1d3b8:	0003d4f4 	.word	0x0003d4f4
   1d3bc:	20006f34 	.word	0x20006f34
   1d3c0:	20006ed8 	.word	0x20006ed8
   1d3c4:	2000722c 	.word	0x2000722c
   1d3c8:	0003d4d4 	.word	0x0003d4d4
   1d3cc:	0003d4dc 	.word	0x0003d4dc
   1d3d0:	0003d4e8 	.word	0x0003d4e8
   1d3d4:	000403d0 	.word	0x000403d0
   1d3d8:	0003d1a4 	.word	0x0003d1a4
   1d3dc:	0003d1a4 	.word	0x0003d1a4
   1d3e0:	0003d518 	.word	0x0003d518

0001d3e4 <device_found>:
    if (type == BT_GAP_ADV_TYPE_ADV_IND ||
   1d3e4:	2a01      	cmp	r2, #1
   1d3e6:	d900      	bls.n	1d3ea <device_found+0x6>
   1d3e8:	4770      	bx	lr
{
   1d3ea:	b508      	push	{r3, lr}
        bt_data_parse(ad, connectable_device_found, (void *)addr);
   1d3ec:	4602      	mov	r2, r0
   1d3ee:	4902      	ldr	r1, [pc, #8]	; (1d3f8 <device_found+0x14>)
   1d3f0:	4618      	mov	r0, r3
   1d3f2:	f008 fa1f 	bl	25834 <bt_data_parse>
}
   1d3f6:	bd08      	pop	{r3, pc}
   1d3f8:	0001d3fd 	.word	0x0001d3fd

0001d3fc <connectable_device_found>:
    switch (data->type)
   1d3fc:	7803      	ldrb	r3, [r0, #0]
   1d3fe:	3b06      	subs	r3, #6
   1d400:	2b01      	cmp	r3, #1
   1d402:	d901      	bls.n	1d408 <connectable_device_found+0xc>
    return true;
   1d404:	2001      	movs	r0, #1
}
   1d406:	4770      	bx	lr
{
   1d408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d40c:	b08e      	sub	sp, #56	; 0x38
   1d40e:	4604      	mov	r4, r0
   1d410:	4688      	mov	r8, r1
        if (data->data_len % BT_UUID_SIZE_128 != 0U)
   1d412:	7843      	ldrb	r3, [r0, #1]
   1d414:	f013 0f0f 	tst.w	r3, #15
   1d418:	d101      	bne.n	1d41e <connectable_device_found+0x22>
        for (i = 0; i < data->data_len; i += BT_UUID_SIZE_128)
   1d41a:	2600      	movs	r6, #0
   1d41c:	e021      	b.n	1d462 <connectable_device_found+0x66>
   1d41e:	4b35      	ldr	r3, [pc, #212]	; (1d4f4 <connectable_device_found+0xf8>)
   1d420:	4a35      	ldr	r2, [pc, #212]	; (1d4f8 <connectable_device_found+0xfc>)
   1d422:	1a9b      	subs	r3, r3, r2
   1d424:	08db      	lsrs	r3, r3, #3
            LOG_INF("AD malformed");
   1d426:	f04f 0100 	mov.w	r1, #0
   1d42a:	2203      	movs	r2, #3
   1d42c:	f362 0102 	bfi	r1, r2, #0, #3
   1d430:	f36f 01c5 	bfc	r1, #3, #3
   1d434:	f363 118f 	bfi	r1, r3, #6, #10
   1d438:	4830      	ldr	r0, [pc, #192]	; (1d4fc <connectable_device_found+0x100>)
   1d43a:	f002 ffeb 	bl	20414 <log_0>
            return true;
   1d43e:	2001      	movs	r0, #1
   1d440:	e03e      	b.n	1d4c0 <connectable_device_found+0xc4>
   1d442:	4b2c      	ldr	r3, [pc, #176]	; (1d4f4 <connectable_device_found+0xf8>)
   1d444:	4a2c      	ldr	r2, [pc, #176]	; (1d4f8 <connectable_device_found+0xfc>)
   1d446:	1a9b      	subs	r3, r3, r2
   1d448:	08db      	lsrs	r3, r3, #3
                LOG_INF("Stop LE scan failed (err %d)", err);
   1d44a:	2203      	movs	r2, #3
   1d44c:	f362 0702 	bfi	r7, r2, #0, #3
   1d450:	f36f 07c5 	bfc	r7, #3, #3
   1d454:	f363 178f 	bfi	r7, r3, #6, #10
   1d458:	463a      	mov	r2, r7
   1d45a:	4829      	ldr	r0, [pc, #164]	; (1d500 <connectable_device_found+0x104>)
   1d45c:	f002 ff24 	bl	202a8 <log_1>
        for (i = 0; i < data->data_len; i += BT_UUID_SIZE_128)
   1d460:	3610      	adds	r6, #16
   1d462:	7863      	ldrb	r3, [r4, #1]
   1d464:	429e      	cmp	r6, r3
   1d466:	da42      	bge.n	1d4ee <connectable_device_found+0xf2>
            uint8_t service_uuid[BT_UUID_SIZE_128] = {MEASUREMENT_SERVICE_UUID};
   1d468:	4b26      	ldr	r3, [pc, #152]	; (1d504 <connectable_device_found+0x108>)
   1d46a:	ad04      	add	r5, sp, #16
   1d46c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d46e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            memcpy(received_uuid, &data->data[i], BT_UUID_SIZE_128);
   1d472:	6861      	ldr	r1, [r4, #4]
   1d474:	2210      	movs	r2, #16
   1d476:	4431      	add	r1, r6
   1d478:	4668      	mov	r0, sp
   1d47a:	f019 fc73 	bl	36d64 <memcpy>
            if (memcmp(received_uuid, service_uuid, BT_UUID_SIZE_128))
   1d47e:	2210      	movs	r2, #16
   1d480:	4629      	mov	r1, r5
   1d482:	4668      	mov	r0, sp
   1d484:	f019 fc41 	bl	36d0a <memcmp>
   1d488:	2800      	cmp	r0, #0
   1d48a:	d1e9      	bne.n	1d460 <connectable_device_found+0x64>
            err = bt_le_scan_stop();
   1d48c:	f009 f914 	bl	266b8 <bt_le_scan_stop>
            if (err)
   1d490:	4601      	mov	r1, r0
   1d492:	2800      	cmp	r0, #0
   1d494:	d1d5      	bne.n	1d442 <connectable_device_found+0x46>
            err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
   1d496:	4d1b      	ldr	r5, [pc, #108]	; (1d504 <connectable_device_found+0x108>)
   1d498:	ac08      	add	r4, sp, #32
   1d49a:	f105 0310 	add.w	r3, r5, #16
   1d49e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d4a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                    BT_CONNECTION_PARAMETERS, &ble_connection_data->ble_connection_handle);
   1d4a4:	aa0c      	add	r2, sp, #48	; 0x30
   1d4a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1d4a8:	6a28      	ldr	r0, [r5, #32]
   1d4aa:	e882 0003 	stmia.w	r2, {r0, r1}
            err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
   1d4ae:	4b16      	ldr	r3, [pc, #88]	; (1d508 <connectable_device_found+0x10c>)
   1d4b0:	681b      	ldr	r3, [r3, #0]
   1d4b2:	4621      	mov	r1, r4
   1d4b4:	4640      	mov	r0, r8
   1d4b6:	f00a f851 	bl	2755c <bt_conn_le_create>
            if (err)
   1d4ba:	4601      	mov	r1, r0
   1d4bc:	b918      	cbnz	r0, 1d4c6 <connectable_device_found+0xca>
            return false;
   1d4be:	2000      	movs	r0, #0
}
   1d4c0:	b00e      	add	sp, #56	; 0x38
   1d4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d4c6:	4b0b      	ldr	r3, [pc, #44]	; (1d4f4 <connectable_device_found+0xf8>)
   1d4c8:	4a0b      	ldr	r2, [pc, #44]	; (1d4f8 <connectable_device_found+0xfc>)
   1d4ca:	1a9b      	subs	r3, r3, r2
   1d4cc:	08db      	lsrs	r3, r3, #3
                LOG_INF("Create conn failed (err %d)", err);
   1d4ce:	f04f 0200 	mov.w	r2, #0
   1d4d2:	2003      	movs	r0, #3
   1d4d4:	f360 0202 	bfi	r2, r0, #0, #3
   1d4d8:	f36f 02c5 	bfc	r2, #3, #3
   1d4dc:	f363 128f 	bfi	r2, r3, #6, #10
   1d4e0:	480a      	ldr	r0, [pc, #40]	; (1d50c <connectable_device_found+0x110>)
   1d4e2:	f002 fee1 	bl	202a8 <log_1>
   1d4e6:	480a      	ldr	r0, [pc, #40]	; (1d510 <connectable_device_found+0x114>)
   1d4e8:	f012 fec0 	bl	3026c <z_impl_k_sem_give>
}
   1d4ec:	e7e7      	b.n	1d4be <connectable_device_found+0xc2>
    return true;
   1d4ee:	2001      	movs	r0, #1
   1d4f0:	e7e6      	b.n	1d4c0 <connectable_device_found+0xc4>
   1d4f2:	bf00      	nop
   1d4f4:	0003d1a4 	.word	0x0003d1a4
   1d4f8:	0003d1a4 	.word	0x0003d1a4
   1d4fc:	0003d538 	.word	0x0003d538
   1d500:	0003d548 	.word	0x0003d548
   1d504:	0003d360 	.word	0x0003d360
   1d508:	20006f34 	.word	0x20006f34
   1d50c:	0003d568 	.word	0x0003d568
   1d510:	20006ed8 	.word	0x20006ed8

0001d514 <disconnected>:
 * 
 * @param conn Connection handle
 * @param reason 
 */
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   1d514:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d516:	b093      	sub	sp, #76	; 0x4c
   1d518:	4605      	mov	r5, r0
   1d51a:	460e      	mov	r6, r1
    // --- logging ---
    char addr[BT_ADDR_LE_STR_LEN];
    char *log_addr;
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1d51c:	f01a fa4a 	bl	379b4 <bt_conn_get_dst>
   1d520:	4604      	mov	r4, r0
	switch (addr->type) {
   1d522:	7803      	ldrb	r3, [r0, #0]
   1d524:	2b03      	cmp	r3, #3
   1d526:	d84c      	bhi.n	1d5c2 <disconnected+0xae>
   1d528:	e8df f003 	tbb	[pc, r3]
   1d52c:	46413c02 	.word	0x46413c02
		strcpy(type, "public");
   1d530:	4927      	ldr	r1, [pc, #156]	; (1d5d0 <disconnected+0xbc>)
   1d532:	a807      	add	r0, sp, #28
   1d534:	f019 fbaa 	bl	36c8c <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1d538:	79a3      	ldrb	r3, [r4, #6]
   1d53a:	7962      	ldrb	r2, [r4, #5]
   1d53c:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1d53e:	78e0      	ldrb	r0, [r4, #3]
   1d540:	78a7      	ldrb	r7, [r4, #2]
   1d542:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1d544:	f10d 0c1c 	add.w	ip, sp, #28
   1d548:	f8cd c014 	str.w	ip, [sp, #20]
   1d54c:	9404      	str	r4, [sp, #16]
   1d54e:	9703      	str	r7, [sp, #12]
   1d550:	9002      	str	r0, [sp, #8]
   1d552:	9101      	str	r1, [sp, #4]
   1d554:	9200      	str	r2, [sp, #0]
   1d556:	4a1f      	ldr	r2, [pc, #124]	; (1d5d4 <disconnected+0xc0>)
   1d558:	211e      	movs	r1, #30
   1d55a:	a80a      	add	r0, sp, #40	; 0x28
   1d55c:	f016 ff95 	bl	3448a <snprintk>
   1d560:	a80a      	add	r0, sp, #40	; 0x28
   1d562:	f002 fd29 	bl	1ffb8 <z_log_strdup>
   1d566:	4601      	mov	r1, r0
   1d568:	4a1b      	ldr	r2, [pc, #108]	; (1d5d8 <disconnected+0xc4>)
   1d56a:	4b1c      	ldr	r3, [pc, #112]	; (1d5dc <disconnected+0xc8>)
   1d56c:	1ad2      	subs	r2, r2, r3
   1d56e:	08d2      	lsrs	r2, r2, #3
    log_addr = log_strdup(addr);
    LOG_INF("Disconnected: %s, reason: %d", log_addr, reason);
   1d570:	f04f 0300 	mov.w	r3, #0
   1d574:	2003      	movs	r0, #3
   1d576:	f360 0302 	bfi	r3, r0, #0, #3
   1d57a:	f36f 03c5 	bfc	r3, #3, #3
   1d57e:	f362 138f 	bfi	r3, r2, #6, #10
   1d582:	4632      	mov	r2, r6
   1d584:	4816      	ldr	r0, [pc, #88]	; (1d5e0 <disconnected+0xcc>)
   1d586:	f002 fec5 	bl	20314 <log_2>

    // --- remove connection ---
    remove_connection_data(conn);
   1d58a:	4628      	mov	r0, r5
   1d58c:	f000 fadc 	bl	1db48 <remove_connection_data>
	z_impl_k_sem_give(sem);
   1d590:	4814      	ldr	r0, [pc, #80]	; (1d5e4 <disconnected+0xd0>)
   1d592:	f012 fe6b 	bl	3026c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1d596:	2200      	movs	r2, #0
   1d598:	2300      	movs	r3, #0
   1d59a:	4813      	ldr	r0, [pc, #76]	; (1d5e8 <disconnected+0xd4>)
   1d59c:	f012 fe8e 	bl	302bc <z_impl_k_sem_take>
    k_sem_give(&ble_wait_for_disconnect_sem);
    k_sem_take(&at_least_one_active_connection_sem, K_NO_WAIT);
}
   1d5a0:	b013      	add	sp, #76	; 0x4c
   1d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1d5a4:	4911      	ldr	r1, [pc, #68]	; (1d5ec <disconnected+0xd8>)
   1d5a6:	a807      	add	r0, sp, #28
   1d5a8:	f019 fb70 	bl	36c8c <strcpy>
		break;
   1d5ac:	e7c4      	b.n	1d538 <disconnected+0x24>
		strcpy(type, "public-id");
   1d5ae:	4910      	ldr	r1, [pc, #64]	; (1d5f0 <disconnected+0xdc>)
   1d5b0:	a807      	add	r0, sp, #28
   1d5b2:	f019 fb6b 	bl	36c8c <strcpy>
		break;
   1d5b6:	e7bf      	b.n	1d538 <disconnected+0x24>
		strcpy(type, "random-id");
   1d5b8:	490e      	ldr	r1, [pc, #56]	; (1d5f4 <disconnected+0xe0>)
   1d5ba:	a807      	add	r0, sp, #28
   1d5bc:	f019 fb66 	bl	36c8c <strcpy>
		break;
   1d5c0:	e7ba      	b.n	1d538 <disconnected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1d5c2:	4a0d      	ldr	r2, [pc, #52]	; (1d5f8 <disconnected+0xe4>)
   1d5c4:	210a      	movs	r1, #10
   1d5c6:	a807      	add	r0, sp, #28
   1d5c8:	f016 ff5f 	bl	3448a <snprintk>
		break;
   1d5cc:	e7b4      	b.n	1d538 <disconnected+0x24>
   1d5ce:	bf00      	nop
   1d5d0:	0003d4cc 	.word	0x0003d4cc
   1d5d4:	0003d4f4 	.word	0x0003d4f4
   1d5d8:	0003d1a4 	.word	0x0003d1a4
   1d5dc:	0003d1a4 	.word	0x0003d1a4
   1d5e0:	0003d584 	.word	0x0003d584
   1d5e4:	20006f08 	.word	0x20006f08
   1d5e8:	2000722c 	.word	0x2000722c
   1d5ec:	0003d4d4 	.word	0x0003d4d4
   1d5f0:	0003d4dc 	.word	0x0003d4dc
   1d5f4:	0003d4e8 	.word	0x0003d4e8
   1d5f8:	000403d0 	.word	0x000403d0

0001d5fc <start_scan>:
 * 
 * @param scan_parameters Scan parameters
 * @return ble_connection_data_t* 
 */
ble_connection_data_t *start_scan(const struct bt_le_scan_param *scan_parameters)
{
   1d5fc:	b510      	push	{r4, lr}
   1d5fe:	4604      	mov	r4, r0
    int err;

    // Fetch an available device from static ble_connection_data_t bluetooth_devices
    ble_connection_data = get_empty_ble_handle();
   1d600:	f000 fa70 	bl	1dae4 <get_empty_ble_handle>
   1d604:	4b16      	ldr	r3, [pc, #88]	; (1d660 <start_scan+0x64>)
   1d606:	6018      	str	r0, [r3, #0]

    // If this condition is true, device array is full
    if (ble_connection_data == NULL)
   1d608:	b1b8      	cbz	r0, 1d63a <start_scan+0x3e>

    // Start searching for connectable devices. If a connectable device is found,
    // device_found() cb will be called to check if this device supports the services
    // needed by the central_node
    // TODO: is bt_le_scan_start until connection? If not, returning ble_connection_data could be problematic
    err = bt_le_scan_start(scan_parameters, device_found);
   1d60a:	4916      	ldr	r1, [pc, #88]	; (1d664 <start_scan+0x68>)
   1d60c:	4620      	mov	r0, r4
   1d60e:	f008 ffbb 	bl	26588 <bt_le_scan_start>
    if (err)
   1d612:	4601      	mov	r1, r0
   1d614:	b990      	cbnz	r0, 1d63c <start_scan+0x40>
   1d616:	4b14      	ldr	r3, [pc, #80]	; (1d668 <start_scan+0x6c>)
   1d618:	4a14      	ldr	r2, [pc, #80]	; (1d66c <start_scan+0x70>)
   1d61a:	1a9b      	subs	r3, r3, r2
   1d61c:	08db      	lsrs	r3, r3, #3
    {
        LOG_INF("Scanning failed to start (err %d)", err);
        return NULL;
    }
    LOG_INF("Scan started");
   1d61e:	f04f 0100 	mov.w	r1, #0
   1d622:	2203      	movs	r2, #3
   1d624:	f362 0102 	bfi	r1, r2, #0, #3
   1d628:	f36f 01c5 	bfc	r1, #3, #3
   1d62c:	f363 118f 	bfi	r1, r3, #6, #10
   1d630:	480f      	ldr	r0, [pc, #60]	; (1d670 <start_scan+0x74>)
   1d632:	f002 feef 	bl	20414 <log_0>
    return ble_connection_data;
   1d636:	4b0a      	ldr	r3, [pc, #40]	; (1d660 <start_scan+0x64>)
   1d638:	6818      	ldr	r0, [r3, #0]
}
   1d63a:	bd10      	pop	{r4, pc}
   1d63c:	4b0a      	ldr	r3, [pc, #40]	; (1d668 <start_scan+0x6c>)
   1d63e:	4a0b      	ldr	r2, [pc, #44]	; (1d66c <start_scan+0x70>)
   1d640:	1a9b      	subs	r3, r3, r2
   1d642:	08db      	lsrs	r3, r3, #3
        LOG_INF("Scanning failed to start (err %d)", err);
   1d644:	f04f 0200 	mov.w	r2, #0
   1d648:	2003      	movs	r0, #3
   1d64a:	f360 0202 	bfi	r2, r0, #0, #3
   1d64e:	f36f 02c5 	bfc	r2, #3, #3
   1d652:	f363 128f 	bfi	r2, r3, #6, #10
   1d656:	4807      	ldr	r0, [pc, #28]	; (1d674 <start_scan+0x78>)
   1d658:	f002 fe26 	bl	202a8 <log_1>
        return NULL;
   1d65c:	2000      	movs	r0, #0
   1d65e:	e7ec      	b.n	1d63a <start_scan+0x3e>
   1d660:	20006f34 	.word	0x20006f34
   1d664:	0001d3e5 	.word	0x0001d3e5
   1d668:	0003d1a4 	.word	0x0003d1a4
   1d66c:	0003d1a4 	.word	0x0003d1a4
   1d670:	0003d5c8 	.word	0x0003d5c8
   1d674:	0003d5a4 	.word	0x0003d5a4

0001d678 <bt_ready>:
 *        started succesfully
 * 
 * @param err 
 */
void bt_ready(int err)
{
   1d678:	b510      	push	{r4, lr}
   1d67a:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d67c:	480b      	ldr	r0, [pc, #44]	; (1d6ac <bt_ready+0x34>)
   1d67e:	f012 fdf5 	bl	3026c <z_impl_k_sem_give>
    k_sem_give(&ble_init_ok_sem);
    if (err)
   1d682:	b904      	cbnz	r4, 1d686 <bt_ready+0xe>
    {
        LOG_INF("Error while enabling bluetooth (err %d)", err);
    }
   1d684:	bd10      	pop	{r4, pc}
   1d686:	4b0a      	ldr	r3, [pc, #40]	; (1d6b0 <bt_ready+0x38>)
   1d688:	4a0a      	ldr	r2, [pc, #40]	; (1d6b4 <bt_ready+0x3c>)
   1d68a:	1a9b      	subs	r3, r3, r2
   1d68c:	08db      	lsrs	r3, r3, #3
        LOG_INF("Error while enabling bluetooth (err %d)", err);
   1d68e:	f04f 0200 	mov.w	r2, #0
   1d692:	2103      	movs	r1, #3
   1d694:	f361 0202 	bfi	r2, r1, #0, #3
   1d698:	f36f 02c5 	bfc	r2, #3, #3
   1d69c:	f363 128f 	bfi	r2, r3, #6, #10
   1d6a0:	4621      	mov	r1, r4
   1d6a2:	4805      	ldr	r0, [pc, #20]	; (1d6b8 <bt_ready+0x40>)
   1d6a4:	f002 fe00 	bl	202a8 <log_1>
   1d6a8:	e7ec      	b.n	1d684 <bt_ready+0xc>
   1d6aa:	bf00      	nop
   1d6ac:	20006ef0 	.word	0x20006ef0
   1d6b0:	0003d1a4 	.word	0x0003d1a4
   1d6b4:	0003d1a4 	.word	0x0003d1a4
   1d6b8:	0003d5d8 	.word	0x0003d5d8

0001d6bc <store_value_handle>:
 * @param conn
 * @param value_handle
 * @param characteristic
 */
static void store_value_handle(struct bt_conn *conn, uint16_t value_handle, uint8_t characteristic)
{
   1d6bc:	b538      	push	{r3, r4, r5, lr}
   1d6be:	460d      	mov	r5, r1
   1d6c0:	4614      	mov	r4, r2
    ble_connection_data_t *conn_data;
    conn_data = get_device_by_conn_handle(conn);
   1d6c2:	f000 fa27 	bl	1db14 <get_device_by_conn_handle>

    if (conn_data == NULL)
   1d6c6:	b130      	cbz	r0, 1d6d6 <store_value_handle+0x1a>
    {
        LOG_INF("Invalid connection handle");
        return;
    }

    switch (characteristic)
   1d6c8:	2c05      	cmp	r4, #5
   1d6ca:	d821      	bhi.n	1d710 <store_value_handle+0x54>
   1d6cc:	e8df f004 	tbb	[pc, r4]
   1d6d0:	1a181614 	.word	0x1a181614
   1d6d4:	1e1c      	.short	0x1e1c
   1d6d6:	4b17      	ldr	r3, [pc, #92]	; (1d734 <store_value_handle+0x78>)
   1d6d8:	4a17      	ldr	r2, [pc, #92]	; (1d738 <store_value_handle+0x7c>)
   1d6da:	1a9b      	subs	r3, r3, r2
   1d6dc:	08db      	lsrs	r3, r3, #3
        LOG_INF("Invalid connection handle");
   1d6de:	f04f 0100 	mov.w	r1, #0
   1d6e2:	2203      	movs	r2, #3
   1d6e4:	f362 0102 	bfi	r1, r2, #0, #3
   1d6e8:	f36f 01c5 	bfc	r1, #3, #3
   1d6ec:	f363 118f 	bfi	r1, r3, #6, #10
   1d6f0:	4812      	ldr	r0, [pc, #72]	; (1d73c <store_value_handle+0x80>)
   1d6f2:	f002 fe8f 	bl	20414 <log_0>
        return;
   1d6f6:	e000      	b.n	1d6fa <store_value_handle+0x3e>
    {
    case TEMPERATURE_CHAR_INDEX:
        conn_data->temperature_value_handle = value_handle;
   1d6f8:	82c5      	strh	r5, [r0, #22]
        break;
    default:
        LOG_INF("Invalid characteristic value: %d", characteristic);
        break;
    }
}
   1d6fa:	bd38      	pop	{r3, r4, r5, pc}
        conn_data->humidity_value_handle = value_handle;
   1d6fc:	8305      	strh	r5, [r0, #24]
        break;
   1d6fe:	e7fc      	b.n	1d6fa <store_value_handle+0x3e>
        conn_data->soil_moisture_value_handle = value_handle;
   1d700:	8345      	strh	r5, [r0, #26]
        break;
   1d702:	e7fa      	b.n	1d6fa <store_value_handle+0x3e>
        conn_data->light_intensity_value_handle = value_handle;
   1d704:	8385      	strh	r5, [r0, #28]
        break;
   1d706:	e7f8      	b.n	1d6fa <store_value_handle+0x3e>
        conn_data->configuration_value_handle = value_handle;
   1d708:	83c5      	strh	r5, [r0, #30]
        break;
   1d70a:	e7f6      	b.n	1d6fa <store_value_handle+0x3e>
        conn_data->battery_value_handle = value_handle;
   1d70c:	8405      	strh	r5, [r0, #32]
        break;
   1d70e:	e7f4      	b.n	1d6fa <store_value_handle+0x3e>
   1d710:	4b08      	ldr	r3, [pc, #32]	; (1d734 <store_value_handle+0x78>)
   1d712:	4a09      	ldr	r2, [pc, #36]	; (1d738 <store_value_handle+0x7c>)
   1d714:	1a9b      	subs	r3, r3, r2
   1d716:	08db      	lsrs	r3, r3, #3
        LOG_INF("Invalid characteristic value: %d", characteristic);
   1d718:	f04f 0200 	mov.w	r2, #0
   1d71c:	2103      	movs	r1, #3
   1d71e:	f361 0202 	bfi	r2, r1, #0, #3
   1d722:	f36f 02c5 	bfc	r2, #3, #3
   1d726:	f363 128f 	bfi	r2, r3, #6, #10
   1d72a:	4621      	mov	r1, r4
   1d72c:	4804      	ldr	r0, [pc, #16]	; (1d740 <store_value_handle+0x84>)
   1d72e:	f002 fdbb 	bl	202a8 <log_1>
   1d732:	e7e2      	b.n	1d6fa <store_value_handle+0x3e>
   1d734:	0003d1a4 	.word	0x0003d1a4
   1d738:	0003d1a4 	.word	0x0003d1a4
   1d73c:	0003d600 	.word	0x0003d600
   1d740:	0003d61c 	.word	0x0003d61c

0001d744 <characteristic_discovery>:
{
   1d744:	b570      	push	{r4, r5, r6, lr}
    if (!attr)
   1d746:	2900      	cmp	r1, #0
   1d748:	d033      	beq.n	1d7b2 <characteristic_discovery+0x6e>
   1d74a:	4605      	mov	r5, r0
   1d74c:	460e      	mov	r6, r1
    if (!bt_uuid_cmp(discover_params.uuid, service[service_index]))
   1d74e:	4b30      	ldr	r3, [pc, #192]	; (1d810 <characteristic_discovery+0xcc>)
   1d750:	781a      	ldrb	r2, [r3, #0]
   1d752:	4b30      	ldr	r3, [pc, #192]	; (1d814 <characteristic_discovery+0xd0>)
   1d754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1d758:	4b2f      	ldr	r3, [pc, #188]	; (1d818 <characteristic_discovery+0xd4>)
   1d75a:	6818      	ldr	r0, [r3, #0]
   1d75c:	f019 fc2e 	bl	36fbc <bt_uuid_cmp>
   1d760:	2800      	cmp	r0, #0
   1d762:	d13b      	bne.n	1d7dc <characteristic_discovery+0x98>
        discover_params.uuid = characteristic[characteristic_index];
   1d764:	4b2d      	ldr	r3, [pc, #180]	; (1d81c <characteristic_discovery+0xd8>)
   1d766:	781a      	ldrb	r2, [r3, #0]
   1d768:	4b2d      	ldr	r3, [pc, #180]	; (1d820 <characteristic_discovery+0xdc>)
   1d76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d76e:	492a      	ldr	r1, [pc, #168]	; (1d818 <characteristic_discovery+0xd4>)
   1d770:	600b      	str	r3, [r1, #0]
        discover_params.start_handle = attr->handle + 1;
   1d772:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
   1d776:	3301      	adds	r3, #1
   1d778:	810b      	strh	r3, [r1, #8]
        discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   1d77a:	2303      	movs	r3, #3
   1d77c:	740b      	strb	r3, [r1, #16]
        err = bt_gatt_discover(conn, &discover_params);
   1d77e:	4628      	mov	r0, r5
   1d780:	f00c fd8a 	bl	2a298 <bt_gatt_discover>
        if (err)
   1d784:	4604      	mov	r4, r0
   1d786:	b398      	cbz	r0, 1d7f0 <characteristic_discovery+0xac>
            remove_connection_data(conn);
   1d788:	4628      	mov	r0, r5
   1d78a:	f000 f9dd 	bl	1db48 <remove_connection_data>
   1d78e:	4b25      	ldr	r3, [pc, #148]	; (1d824 <characteristic_discovery+0xe0>)
   1d790:	4a25      	ldr	r2, [pc, #148]	; (1d828 <characteristic_discovery+0xe4>)
   1d792:	1a9b      	subs	r3, r3, r2
   1d794:	08db      	lsrs	r3, r3, #3
            LOG_INF("Discover failed (err %d)", err);
   1d796:	f04f 0200 	mov.w	r2, #0
   1d79a:	2103      	movs	r1, #3
   1d79c:	f361 0202 	bfi	r2, r1, #0, #3
   1d7a0:	f36f 02c5 	bfc	r2, #3, #3
   1d7a4:	f363 128f 	bfi	r2, r3, #6, #10
   1d7a8:	4621      	mov	r1, r4
   1d7aa:	4820      	ldr	r0, [pc, #128]	; (1d82c <characteristic_discovery+0xe8>)
   1d7ac:	f002 fd7c 	bl	202a8 <log_1>
   1d7b0:	e01e      	b.n	1d7f0 <characteristic_discovery+0xac>
   1d7b2:	4614      	mov	r4, r2
   1d7b4:	4b1b      	ldr	r3, [pc, #108]	; (1d824 <characteristic_discovery+0xe0>)
   1d7b6:	4a1c      	ldr	r2, [pc, #112]	; (1d828 <characteristic_discovery+0xe4>)
   1d7b8:	1a9b      	subs	r3, r3, r2
   1d7ba:	08db      	lsrs	r3, r3, #3
        LOG_INF("Discover complete");
   1d7bc:	2203      	movs	r2, #3
   1d7be:	f362 0102 	bfi	r1, r2, #0, #3
   1d7c2:	f36f 01c5 	bfc	r1, #3, #3
   1d7c6:	f363 118f 	bfi	r1, r3, #6, #10
   1d7ca:	4819      	ldr	r0, [pc, #100]	; (1d830 <characteristic_discovery+0xec>)
   1d7cc:	f002 fe22 	bl	20414 <log_0>
        (void)memset(params, 0, sizeof(*params));
   1d7d0:	2214      	movs	r2, #20
   1d7d2:	2100      	movs	r1, #0
   1d7d4:	4620      	mov	r0, r4
   1d7d6:	f019 fae9 	bl	36dac <memset>
        return BT_GATT_ITER_STOP;
   1d7da:	e009      	b.n	1d7f0 <characteristic_discovery+0xac>
    else if (!bt_uuid_cmp(discover_params.uuid, characteristic[characteristic_index]))
   1d7dc:	4b0f      	ldr	r3, [pc, #60]	; (1d81c <characteristic_discovery+0xd8>)
   1d7de:	781a      	ldrb	r2, [r3, #0]
   1d7e0:	4b0f      	ldr	r3, [pc, #60]	; (1d820 <characteristic_discovery+0xdc>)
   1d7e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1d7e6:	4b0c      	ldr	r3, [pc, #48]	; (1d818 <characteristic_discovery+0xd4>)
   1d7e8:	6818      	ldr	r0, [r3, #0]
   1d7ea:	f019 fbe7 	bl	36fbc <bt_uuid_cmp>
   1d7ee:	b108      	cbz	r0, 1d7f4 <characteristic_discovery+0xb0>
}
   1d7f0:	2000      	movs	r0, #0
   1d7f2:	bd70      	pop	{r4, r5, r6, pc}
        store_value_handle(conn, bt_gatt_attr_value_handle(attr), characteristic_index);
   1d7f4:	4630      	mov	r0, r6
   1d7f6:	f01b fe8c 	bl	39512 <bt_gatt_attr_value_handle>
   1d7fa:	4601      	mov	r1, r0
   1d7fc:	4b07      	ldr	r3, [pc, #28]	; (1d81c <characteristic_discovery+0xd8>)
   1d7fe:	781a      	ldrb	r2, [r3, #0]
   1d800:	4628      	mov	r0, r5
   1d802:	f7ff ff5b 	bl	1d6bc <store_value_handle>
   1d806:	480b      	ldr	r0, [pc, #44]	; (1d834 <characteristic_discovery+0xf0>)
   1d808:	f012 fd30 	bl	3026c <z_impl_k_sem_give>
        return BT_GATT_ITER_STOP;
   1d80c:	e7f0      	b.n	1d7f0 <characteristic_discovery+0xac>
   1d80e:	bf00      	nop
   1d810:	2000da6b 	.word	0x2000da6b
   1d814:	0003d748 	.word	0x0003d748
   1d818:	20006f38 	.word	0x20006f38
   1d81c:	2000da6a 	.word	0x2000da6a
   1d820:	0003d730 	.word	0x0003d730
   1d824:	0003d1a4 	.word	0x0003d1a4
   1d828:	0003d1a4 	.word	0x0003d1a4
   1d82c:	0003d654 	.word	0x0003d654
   1d830:	0003d640 	.word	0x0003d640
   1d834:	20006ec0 	.word	0x20006ec0

0001d838 <read_characteristic_cb>:
{
   1d838:	b570      	push	{r4, r5, r6, lr}
   1d83a:	4606      	mov	r6, r0
   1d83c:	4615      	mov	r5, r2
   1d83e:	461c      	mov	r4, r3
    ble_connection_data_t *conn_data = get_device_by_conn_handle(conn);
   1d840:	f000 f968 	bl	1db14 <get_device_by_conn_handle>
    if (conn_data == NULL)
   1d844:	b1a8      	cbz	r0, 1d872 <read_characteristic_cb+0x3a>
    if (data == NULL)
   1d846:	b32c      	cbz	r4, 1d894 <read_characteristic_cb+0x5c>
    if (params->single.handle == conn_data->temperature_value_handle)
   1d848:	892a      	ldrh	r2, [r5, #8]
   1d84a:	8ac1      	ldrh	r1, [r0, #22]
   1d84c:	428a      	cmp	r2, r1
   1d84e:	d032      	beq.n	1d8b6 <read_characteristic_cb+0x7e>
    else if (params->single.handle == conn_data->humidity_value_handle)
   1d850:	8b01      	ldrh	r1, [r0, #24]
   1d852:	428a      	cmp	r2, r1
   1d854:	d034      	beq.n	1d8c0 <read_characteristic_cb+0x88>
    else if(params->single.handle == conn_data->soil_moisture_value_handle)
   1d856:	8b41      	ldrh	r1, [r0, #26]
   1d858:	428a      	cmp	r2, r1
   1d85a:	d036      	beq.n	1d8ca <read_characteristic_cb+0x92>
    else if(params->single.handle == conn_data->light_intensity_value_handle)
   1d85c:	8b81      	ldrh	r1, [r0, #28]
   1d85e:	428a      	cmp	r2, r1
   1d860:	d038      	beq.n	1d8d4 <read_characteristic_cb+0x9c>
    else if (params->single.handle == conn_data->configuration_value_handle)
   1d862:	8bc1      	ldrh	r1, [r0, #30]
   1d864:	428a      	cmp	r2, r1
   1d866:	d03a      	beq.n	1d8de <read_characteristic_cb+0xa6>
    else if (params->single.handle == conn_data->battery_value_handle)
   1d868:	8c03      	ldrh	r3, [r0, #32]
   1d86a:	429a      	cmp	r2, r3
   1d86c:	d03c      	beq.n	1d8e8 <read_characteristic_cb+0xb0>
}
   1d86e:	2000      	movs	r0, #0
   1d870:	bd70      	pop	{r4, r5, r6, pc}
   1d872:	4b20      	ldr	r3, [pc, #128]	; (1d8f4 <read_characteristic_cb+0xbc>)
   1d874:	4a20      	ldr	r2, [pc, #128]	; (1d8f8 <read_characteristic_cb+0xc0>)
   1d876:	1a9b      	subs	r3, r3, r2
   1d878:	08db      	lsrs	r3, r3, #3
        LOG_INF("Error in connection handle");
   1d87a:	f04f 0100 	mov.w	r1, #0
   1d87e:	2203      	movs	r2, #3
   1d880:	f362 0102 	bfi	r1, r2, #0, #3
   1d884:	f36f 01c5 	bfc	r1, #3, #3
   1d888:	f363 118f 	bfi	r1, r3, #6, #10
   1d88c:	481b      	ldr	r0, [pc, #108]	; (1d8fc <read_characteristic_cb+0xc4>)
   1d88e:	f002 fdc1 	bl	20414 <log_0>
        return BT_GATT_ITER_STOP;
   1d892:	e7ec      	b.n	1d86e <read_characteristic_cb+0x36>
   1d894:	4b17      	ldr	r3, [pc, #92]	; (1d8f4 <read_characteristic_cb+0xbc>)
   1d896:	4a18      	ldr	r2, [pc, #96]	; (1d8f8 <read_characteristic_cb+0xc0>)
   1d898:	1a9b      	subs	r3, r3, r2
   1d89a:	08db      	lsrs	r3, r3, #3
        LOG_INF("Read complete");
   1d89c:	f04f 0100 	mov.w	r1, #0
   1d8a0:	2203      	movs	r2, #3
   1d8a2:	f362 0102 	bfi	r1, r2, #0, #3
   1d8a6:	f36f 01c5 	bfc	r1, #3, #3
   1d8aa:	f363 118f 	bfi	r1, r3, #6, #10
   1d8ae:	4814      	ldr	r0, [pc, #80]	; (1d900 <read_characteristic_cb+0xc8>)
   1d8b0:	f002 fdb0 	bl	20414 <log_0>
        return BT_GATT_ITER_STOP;
   1d8b4:	e7db      	b.n	1d86e <read_characteristic_cb+0x36>
        set_temperature_measurement_value(conn, *measurement_data);
   1d8b6:	6821      	ldr	r1, [r4, #0]
   1d8b8:	4630      	mov	r0, r6
   1d8ba:	f000 fc09 	bl	1e0d0 <set_temperature_measurement_value>
   1d8be:	e7d6      	b.n	1d86e <read_characteristic_cb+0x36>
        set_humidity_measurement_value(conn, *measurement_data);
   1d8c0:	6821      	ldr	r1, [r4, #0]
   1d8c2:	4630      	mov	r0, r6
   1d8c4:	f000 fc24 	bl	1e110 <set_humidity_measurement_value>
   1d8c8:	e7d1      	b.n	1d86e <read_characteristic_cb+0x36>
        set_soil_moisture_measurement_value(conn, *measurement_data);
   1d8ca:	6821      	ldr	r1, [r4, #0]
   1d8cc:	4630      	mov	r0, r6
   1d8ce:	f000 fc3f 	bl	1e150 <set_soil_moisture_measurement_value>
   1d8d2:	e7cc      	b.n	1d86e <read_characteristic_cb+0x36>
        set_light_intensity_measurement_value(conn, *measurement_data);
   1d8d4:	6821      	ldr	r1, [r4, #0]
   1d8d6:	4630      	mov	r0, r6
   1d8d8:	f000 fc5a 	bl	1e190 <set_light_intensity_measurement_value>
   1d8dc:	e7c7      	b.n	1d86e <read_characteristic_cb+0x36>
        set_configuration_id_value(conn, (uint8_t)*measurement_data);
   1d8de:	7821      	ldrb	r1, [r4, #0]
   1d8e0:	4630      	mov	r0, r6
   1d8e2:	f000 fc75 	bl	1e1d0 <set_configuration_id_value>
   1d8e6:	e7c2      	b.n	1d86e <read_characteristic_cb+0x36>
        set_battery_level_value(conn, (uint8_t)*measurement_data);
   1d8e8:	7821      	ldrb	r1, [r4, #0]
   1d8ea:	4630      	mov	r0, r6
   1d8ec:	f000 fcb8 	bl	1e260 <set_battery_level_value>
   1d8f0:	e7bd      	b.n	1d86e <read_characteristic_cb+0x36>
   1d8f2:	bf00      	nop
   1d8f4:	0003d1a4 	.word	0x0003d1a4
   1d8f8:	0003d1a4 	.word	0x0003d1a4
   1d8fc:	0003d670 	.word	0x0003d670
   1d900:	0003d68c 	.word	0x0003d68c

0001d904 <characteristic_discovery_wrapper>:
 * @param conn Connection handle
 * @param service_select Service selection index (e.g. see MEASUREMENT_SERVICE_INDEX)
 * @param char_select Characteristic selection index (e.g. see TEMPERATURE_CHAR_INDEX)
 */
void characteristic_discovery_wrapper(struct bt_conn *conn, uint8_t service_select, uint8_t char_select)
{
   1d904:	b510      	push	{r4, lr}
   1d906:	4613      	mov	r3, r2
    // desired service UUID
    // TODO: probably include the characteristic switch inside the service
    // switch (case MEASUREMENT_SERVICE_INDEX)
    //              ...
    //              case TEMPERATURE_CHAR_INDEX ....
    switch (service_select)
   1d908:	b1a1      	cbz	r1, 1d934 <characteristic_discovery_wrapper+0x30>
   1d90a:	460c      	mov	r4, r1
   1d90c:	2901      	cmp	r1, #1
   1d90e:	d03c      	beq.n	1d98a <characteristic_discovery_wrapper+0x86>
   1d910:	4b41      	ldr	r3, [pc, #260]	; (1da18 <characteristic_discovery_wrapper+0x114>)
   1d912:	4a42      	ldr	r2, [pc, #264]	; (1da1c <characteristic_discovery_wrapper+0x118>)
   1d914:	1a9b      	subs	r3, r3, r2
   1d916:	08db      	lsrs	r3, r3, #3
            return;
        }
        break;
    default:
        // --- Add debug info
        LOG_INF("Invalid service selection: %d", service_select);
   1d918:	f04f 0200 	mov.w	r2, #0
   1d91c:	2103      	movs	r1, #3
   1d91e:	f361 0202 	bfi	r2, r1, #0, #3
   1d922:	f36f 02c5 	bfc	r2, #3, #3
   1d926:	f363 128f 	bfi	r2, r3, #6, #10
   1d92a:	4621      	mov	r1, r4
   1d92c:	483c      	ldr	r0, [pc, #240]	; (1da20 <characteristic_discovery_wrapper+0x11c>)
   1d92e:	f002 fcbb 	bl	202a8 <log_1>
   1d932:	e05a      	b.n	1d9ea <characteristic_discovery_wrapper+0xe6>
        service_index = MEASUREMENT_SERVICE_INDEX;
   1d934:	4a3b      	ldr	r2, [pc, #236]	; (1da24 <characteristic_discovery_wrapper+0x120>)
   1d936:	2100      	movs	r1, #0
   1d938:	7011      	strb	r1, [r2, #0]
        switch (char_select)
   1d93a:	2b03      	cmp	r3, #3
   1d93c:	d813      	bhi.n	1d966 <characteristic_discovery_wrapper+0x62>
   1d93e:	e8df f003 	tbb	[pc, r3]
   1d942:	0602      	.short	0x0602
   1d944:	0e0a      	.short	0x0e0a
            characteristic_index = TEMPERATURE_CHAR_INDEX;
   1d946:	4b38      	ldr	r3, [pc, #224]	; (1da28 <characteristic_discovery_wrapper+0x124>)
   1d948:	2200      	movs	r2, #0
   1d94a:	701a      	strb	r2, [r3, #0]
            break;
   1d94c:	e039      	b.n	1d9c2 <characteristic_discovery_wrapper+0xbe>
            characteristic_index = HUMIDITY_CHAR_INDEX;
   1d94e:	4b36      	ldr	r3, [pc, #216]	; (1da28 <characteristic_discovery_wrapper+0x124>)
   1d950:	2201      	movs	r2, #1
   1d952:	701a      	strb	r2, [r3, #0]
            break;
   1d954:	e035      	b.n	1d9c2 <characteristic_discovery_wrapper+0xbe>
            characteristic_index = SOIL_MOISTURE_CHAR_INDEX;
   1d956:	4b34      	ldr	r3, [pc, #208]	; (1da28 <characteristic_discovery_wrapper+0x124>)
   1d958:	2202      	movs	r2, #2
   1d95a:	701a      	strb	r2, [r3, #0]
            break;
   1d95c:	e031      	b.n	1d9c2 <characteristic_discovery_wrapper+0xbe>
            characteristic_index = LIGHT_INTENSITY_CHAR_INDEX;
   1d95e:	4b32      	ldr	r3, [pc, #200]	; (1da28 <characteristic_discovery_wrapper+0x124>)
   1d960:	2203      	movs	r2, #3
   1d962:	701a      	strb	r2, [r3, #0]
            break;
   1d964:	e02d      	b.n	1d9c2 <characteristic_discovery_wrapper+0xbe>
   1d966:	492c      	ldr	r1, [pc, #176]	; (1da18 <characteristic_discovery_wrapper+0x114>)
   1d968:	4a2c      	ldr	r2, [pc, #176]	; (1da1c <characteristic_discovery_wrapper+0x118>)
   1d96a:	1a89      	subs	r1, r1, r2
   1d96c:	08c9      	lsrs	r1, r1, #3
            LOG_INF("Invalid measurement characteristic selection: %d", char_select);
   1d96e:	f04f 0200 	mov.w	r2, #0
   1d972:	2003      	movs	r0, #3
   1d974:	f360 0202 	bfi	r2, r0, #0, #3
   1d978:	f36f 02c5 	bfc	r2, #3, #3
   1d97c:	f361 128f 	bfi	r2, r1, #6, #10
   1d980:	4619      	mov	r1, r3
   1d982:	482a      	ldr	r0, [pc, #168]	; (1da2c <characteristic_discovery_wrapper+0x128>)
   1d984:	f002 fc90 	bl	202a8 <log_1>
   1d988:	e02f      	b.n	1d9ea <characteristic_discovery_wrapper+0xe6>
        service_index = CONFIGURE_SERVICE_INDEX;
   1d98a:	4a26      	ldr	r2, [pc, #152]	; (1da24 <characteristic_discovery_wrapper+0x120>)
   1d98c:	2101      	movs	r1, #1
   1d98e:	7011      	strb	r1, [r2, #0]
        switch (char_select)
   1d990:	2b04      	cmp	r3, #4
   1d992:	d013      	beq.n	1d9bc <characteristic_discovery_wrapper+0xb8>
   1d994:	2b05      	cmp	r3, #5
   1d996:	d029      	beq.n	1d9ec <characteristic_discovery_wrapper+0xe8>
   1d998:	491f      	ldr	r1, [pc, #124]	; (1da18 <characteristic_discovery_wrapper+0x114>)
   1d99a:	4a20      	ldr	r2, [pc, #128]	; (1da1c <characteristic_discovery_wrapper+0x118>)
   1d99c:	1a89      	subs	r1, r1, r2
   1d99e:	08c9      	lsrs	r1, r1, #3
            LOG_INF("Invalid measurement characteristic selection: %d", char_select);
   1d9a0:	f04f 0200 	mov.w	r2, #0
   1d9a4:	2003      	movs	r0, #3
   1d9a6:	f360 0202 	bfi	r2, r0, #0, #3
   1d9aa:	f36f 02c5 	bfc	r2, #3, #3
   1d9ae:	f361 128f 	bfi	r2, r1, #6, #10
   1d9b2:	4619      	mov	r1, r3
   1d9b4:	481d      	ldr	r0, [pc, #116]	; (1da2c <characteristic_discovery_wrapper+0x128>)
   1d9b6:	f002 fc77 	bl	202a8 <log_1>
   1d9ba:	e016      	b.n	1d9ea <characteristic_discovery_wrapper+0xe6>
            characteristic_index = CONFIGURATION_CHAR_INDEX;
   1d9bc:	4b1a      	ldr	r3, [pc, #104]	; (1da28 <characteristic_discovery_wrapper+0x124>)
   1d9be:	2204      	movs	r2, #4
   1d9c0:	701a      	strb	r2, [r3, #0]
        return;
        break;
    }

    // --- Discover characteristic parameters
    discover_params.uuid = service[service_index];
   1d9c2:	4b18      	ldr	r3, [pc, #96]	; (1da24 <characteristic_discovery_wrapper+0x120>)
   1d9c4:	781a      	ldrb	r2, [r3, #0]
   1d9c6:	4b1a      	ldr	r3, [pc, #104]	; (1da30 <characteristic_discovery_wrapper+0x12c>)
   1d9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d9cc:	4919      	ldr	r1, [pc, #100]	; (1da34 <characteristic_discovery_wrapper+0x130>)
   1d9ce:	600b      	str	r3, [r1, #0]
    discover_params.func = characteristic_discovery;
   1d9d0:	4b19      	ldr	r3, [pc, #100]	; (1da38 <characteristic_discovery_wrapper+0x134>)
   1d9d2:	604b      	str	r3, [r1, #4]
    discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
   1d9d4:	2301      	movs	r3, #1
   1d9d6:	810b      	strh	r3, [r1, #8]
    discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
   1d9d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d9dc:	81cb      	strh	r3, [r1, #14]
    discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   1d9de:	2300      	movs	r3, #0
   1d9e0:	740b      	strb	r3, [r1, #16]

    err = bt_gatt_discover(conn, &discover_params);
   1d9e2:	f00c fc59 	bl	2a298 <bt_gatt_discover>
    if (err)
   1d9e6:	4601      	mov	r1, r0
   1d9e8:	b920      	cbnz	r0, 1d9f4 <characteristic_discovery_wrapper+0xf0>
    {
        LOG_INF("Discover failed(err %d)", err);
        return;
    }
}
   1d9ea:	bd10      	pop	{r4, pc}
            characteristic_index = BATTERY_CHAR_INDEX;
   1d9ec:	4b0e      	ldr	r3, [pc, #56]	; (1da28 <characteristic_discovery_wrapper+0x124>)
   1d9ee:	2205      	movs	r2, #5
   1d9f0:	701a      	strb	r2, [r3, #0]
            break;
   1d9f2:	e7e6      	b.n	1d9c2 <characteristic_discovery_wrapper+0xbe>
   1d9f4:	4b08      	ldr	r3, [pc, #32]	; (1da18 <characteristic_discovery_wrapper+0x114>)
   1d9f6:	4a09      	ldr	r2, [pc, #36]	; (1da1c <characteristic_discovery_wrapper+0x118>)
   1d9f8:	1a9b      	subs	r3, r3, r2
   1d9fa:	08db      	lsrs	r3, r3, #3
        LOG_INF("Discover failed(err %d)", err);
   1d9fc:	f04f 0200 	mov.w	r2, #0
   1da00:	2003      	movs	r0, #3
   1da02:	f360 0202 	bfi	r2, r0, #0, #3
   1da06:	f36f 02c5 	bfc	r2, #3, #3
   1da0a:	f363 128f 	bfi	r2, r3, #6, #10
   1da0e:	480b      	ldr	r0, [pc, #44]	; (1da3c <characteristic_discovery_wrapper+0x138>)
   1da10:	f002 fc4a 	bl	202a8 <log_1>
        return;
   1da14:	e7e9      	b.n	1d9ea <characteristic_discovery_wrapper+0xe6>
   1da16:	bf00      	nop
   1da18:	0003d1a4 	.word	0x0003d1a4
   1da1c:	0003d1a4 	.word	0x0003d1a4
   1da20:	0003d6d0 	.word	0x0003d6d0
   1da24:	2000da6b 	.word	0x2000da6b
   1da28:	2000da6a 	.word	0x2000da6a
   1da2c:	0003d69c 	.word	0x0003d69c
   1da30:	0003d748 	.word	0x0003d748
   1da34:	20006f38 	.word	0x20006f38
   1da38:	0001d745 	.word	0x0001d745
   1da3c:	0003d6f0 	.word	0x0003d6f0

0001da40 <read_characteristic_wrapper>:
 *
 * @param conn Connection handle
 * @param char_select Takes values like: TEMPERATURE_CHAR_INDEX
 */
void read_characteristic_wrapper(struct bt_conn *conn, uint8_t char_select)
{
   1da40:	b538      	push	{r3, r4, r5, lr}
   1da42:	4605      	mov	r5, r0
   1da44:	460c      	mov	r4, r1
    uint16_t characteristic_handle;

    // fetch the ble_connection_data bluetooth_devices that corresponds to the
    // given connection handle
    ble_connection_data_t *conn_data = get_device_by_conn_handle(conn);
   1da46:	f000 f865 	bl	1db14 <get_device_by_conn_handle>

    // if nothing fetched (invalid connection handle), get_device_by_conn_handle()
    // will return null
    if (conn_data == NULL)
   1da4a:	b130      	cbz	r0, 1da5a <read_characteristic_wrapper+0x1a>
        return;
    }

    // Select one of the available characteristics of the selected connected device
    // TODO: This switch will get bigger as more characteristics are added to the measurement service
    switch (char_select)
   1da4c:	2c05      	cmp	r4, #5
   1da4e:	d82a      	bhi.n	1daa6 <read_characteristic_wrapper+0x66>
   1da50:	e8df f004 	tbb	[pc, r4]
   1da54:	23211f14 	.word	0x23211f14
   1da58:	2725      	.short	0x2725
   1da5a:	4b1c      	ldr	r3, [pc, #112]	; (1dacc <read_characteristic_wrapper+0x8c>)
   1da5c:	4a1c      	ldr	r2, [pc, #112]	; (1dad0 <read_characteristic_wrapper+0x90>)
   1da5e:	1a9b      	subs	r3, r3, r2
   1da60:	08db      	lsrs	r3, r3, #3
        LOG_INF("Invalid connection handle");
   1da62:	f04f 0100 	mov.w	r1, #0
   1da66:	2203      	movs	r2, #3
   1da68:	f362 0102 	bfi	r1, r2, #0, #3
   1da6c:	f36f 01c5 	bfc	r1, #3, #3
   1da70:	f363 118f 	bfi	r1, r3, #6, #10
   1da74:	4817      	ldr	r0, [pc, #92]	; (1dad4 <read_characteristic_wrapper+0x94>)
   1da76:	f002 fccd 	bl	20414 <log_0>
        return;
   1da7a:	e009      	b.n	1da90 <read_characteristic_wrapper+0x50>
    {
    // --- measurement service
    case TEMPERATURE_CHAR_INDEX:
        characteristic_handle = conn_data->temperature_value_handle;
   1da7c:	8ac2      	ldrh	r2, [r0, #22]
        // --- Add debug info
        LOG_INF("Invalid characteristic selection: %d", char_select);
        return;
    }
    // --- Construct the read parameters
    read_parameters.handle_count = 1;
   1da7e:	4916      	ldr	r1, [pc, #88]	; (1dad8 <read_characteristic_wrapper+0x98>)
   1da80:	2301      	movs	r3, #1
   1da82:	604b      	str	r3, [r1, #4]
    read_parameters.single.handle = characteristic_handle;
   1da84:	810a      	strh	r2, [r1, #8]
    read_parameters.func = read_characteristic_cb;
   1da86:	4b15      	ldr	r3, [pc, #84]	; (1dadc <read_characteristic_wrapper+0x9c>)
   1da88:	600b      	str	r3, [r1, #0]

    // Read characteristic request
    bt_gatt_read(conn, &read_parameters);
   1da8a:	4628      	mov	r0, r5
   1da8c:	f00c fdc8 	bl	2a620 <bt_gatt_read>
   1da90:	bd38      	pop	{r3, r4, r5, pc}
        characteristic_handle = conn_data->humidity_value_handle;
   1da92:	8b02      	ldrh	r2, [r0, #24]
        break;
   1da94:	e7f3      	b.n	1da7e <read_characteristic_wrapper+0x3e>
        characteristic_handle = conn_data->soil_moisture_value_handle;
   1da96:	8b42      	ldrh	r2, [r0, #26]
        break;
   1da98:	e7f1      	b.n	1da7e <read_characteristic_wrapper+0x3e>
        characteristic_handle = conn_data->light_intensity_value_handle;
   1da9a:	8b82      	ldrh	r2, [r0, #28]
        break;
   1da9c:	e7ef      	b.n	1da7e <read_characteristic_wrapper+0x3e>
        characteristic_handle = conn_data->configuration_value_handle;
   1da9e:	8bc2      	ldrh	r2, [r0, #30]
        break;
   1daa0:	e7ed      	b.n	1da7e <read_characteristic_wrapper+0x3e>
        characteristic_handle = conn_data->battery_value_handle;
   1daa2:	8c02      	ldrh	r2, [r0, #32]
        break;
   1daa4:	e7eb      	b.n	1da7e <read_characteristic_wrapper+0x3e>
   1daa6:	4b09      	ldr	r3, [pc, #36]	; (1dacc <read_characteristic_wrapper+0x8c>)
   1daa8:	4a09      	ldr	r2, [pc, #36]	; (1dad0 <read_characteristic_wrapper+0x90>)
   1daaa:	1a9b      	subs	r3, r3, r2
   1daac:	08db      	lsrs	r3, r3, #3
        LOG_INF("Invalid characteristic selection: %d", char_select);
   1daae:	f04f 0200 	mov.w	r2, #0
   1dab2:	2103      	movs	r1, #3
   1dab4:	f361 0202 	bfi	r2, r1, #0, #3
   1dab8:	f36f 02c5 	bfc	r2, #3, #3
   1dabc:	f363 128f 	bfi	r2, r3, #6, #10
   1dac0:	4621      	mov	r1, r4
   1dac2:	4807      	ldr	r0, [pc, #28]	; (1dae0 <read_characteristic_wrapper+0xa0>)
   1dac4:	f002 fbf0 	bl	202a8 <log_1>
   1dac8:	e7e2      	b.n	1da90 <read_characteristic_wrapper+0x50>
   1daca:	bf00      	nop
   1dacc:	0003d1a4 	.word	0x0003d1a4
   1dad0:	0003d1a4 	.word	0x0003d1a4
   1dad4:	0003d600 	.word	0x0003d600
   1dad8:	20006f4c 	.word	0x20006f4c
   1dadc:	0001d839 	.word	0x0001d839
   1dae0:	0003d708 	.word	0x0003d708

0001dae4 <get_empty_ble_handle>:
 */
ble_connection_data_t *get_empty_ble_handle(void)
{
    int ble_device_index = 0;
    // Find a free space on bluetooth_device array
    for (ble_device_index = 0; ble_device_index < BLE_MAX_CONNECTIONS; ble_device_index++)
   1dae4:	2300      	movs	r3, #0
   1dae6:	2b13      	cmp	r3, #19
   1dae8:	dc08      	bgt.n	1dafc <get_empty_ble_handle+0x18>
    {
        if (!bluetooth_devices[ble_device_index].is_connected)
   1daea:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   1daee:	0091      	lsls	r1, r2, #2
   1daf0:	4a07      	ldr	r2, [pc, #28]	; (1db10 <get_empty_ble_handle+0x2c>)
   1daf2:	440a      	add	r2, r1
   1daf4:	7d52      	ldrb	r2, [r2, #21]
   1daf6:	b10a      	cbz	r2, 1dafc <get_empty_ble_handle+0x18>
    for (ble_device_index = 0; ble_device_index < BLE_MAX_CONNECTIONS; ble_device_index++)
   1daf8:	3301      	adds	r3, #1
   1dafa:	e7f4      	b.n	1dae6 <get_empty_ble_handle+0x2>
        }
    }

    // get_empty_ble_handle_index returns index = BLE_MAX_CONNECTIONS when
    // no empty connection slots are found
    if (ble_device_index == BLE_MAX_CONNECTIONS)
   1dafc:	2b14      	cmp	r3, #20
   1dafe:	d005      	beq.n	1db0c <get_empty_ble_handle+0x28>
    {
        // If return is null, it means we reached the maximum connection number
        return NULL;
    }

    return &bluetooth_devices[ble_device_index];
   1db00:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1db04:	009a      	lsls	r2, r3, #2
   1db06:	4802      	ldr	r0, [pc, #8]	; (1db10 <get_empty_ble_handle+0x2c>)
   1db08:	4410      	add	r0, r2
   1db0a:	4770      	bx	lr
        return NULL;
   1db0c:	2000      	movs	r0, #0
}
   1db0e:	4770      	bx	lr
   1db10:	20006f5c 	.word	0x20006f5c

0001db14 <get_device_by_conn_handle>:
 */
ble_connection_data_t *get_device_by_conn_handle(struct bt_conn *conn)
{
    int index = 0;
    bool device_found = false;
    for (index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1db14:	2300      	movs	r3, #0
   1db16:	2b13      	cmp	r3, #19
   1db18:	dc08      	bgt.n	1db2c <get_device_by_conn_handle+0x18>
    {
        if (bluetooth_devices[index].ble_connection_handle == conn)
   1db1a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   1db1e:	4909      	ldr	r1, [pc, #36]	; (1db44 <get_device_by_conn_handle+0x30>)
   1db20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1db24:	4282      	cmp	r2, r0
   1db26:	d003      	beq.n	1db30 <get_device_by_conn_handle+0x1c>
    for (index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1db28:	3301      	adds	r3, #1
   1db2a:	e7f4      	b.n	1db16 <get_device_by_conn_handle+0x2>
    bool device_found = false;
   1db2c:	2200      	movs	r2, #0
   1db2e:	e000      	b.n	1db32 <get_device_by_conn_handle+0x1e>
        {
            device_found = true;
   1db30:	2201      	movs	r2, #1
            break;
        }
    }
    if (device_found)
   1db32:	b12a      	cbz	r2, 1db40 <get_device_by_conn_handle+0x2c>
    {
        return &bluetooth_devices[index];
   1db34:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1db38:	4802      	ldr	r0, [pc, #8]	; (1db44 <get_device_by_conn_handle+0x30>)
   1db3a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1db3e:	4770      	bx	lr
    }
    else
    {
        return NULL;
   1db40:	2000      	movs	r0, #0
    }
}
   1db42:	4770      	bx	lr
   1db44:	20006f5c 	.word	0x20006f5c

0001db48 <remove_connection_data>:
{
   1db48:	b538      	push	{r3, r4, r5, lr}
   1db4a:	4604      	mov	r4, r0
    conn_data = get_device_by_conn_handle(conn);
   1db4c:	f7ff ffe2 	bl	1db14 <get_device_by_conn_handle>
    if (conn_data == NULL)
   1db50:	b148      	cbz	r0, 1db66 <remove_connection_data+0x1e>
   1db52:	4605      	mov	r5, r0
    bt_conn_unref(conn);
   1db54:	4620      	mov	r0, r4
   1db56:	f019 fe23 	bl	377a0 <bt_conn_unref>
    memset(conn_data, 0, sizeof(ble_connection_data_t));
   1db5a:	2224      	movs	r2, #36	; 0x24
   1db5c:	2100      	movs	r1, #0
   1db5e:	4628      	mov	r0, r5
   1db60:	f019 f924 	bl	36dac <memset>
}
   1db64:	bd38      	pop	{r3, r4, r5, pc}
   1db66:	4b08      	ldr	r3, [pc, #32]	; (1db88 <remove_connection_data+0x40>)
   1db68:	4a08      	ldr	r2, [pc, #32]	; (1db8c <remove_connection_data+0x44>)
   1db6a:	1a9b      	subs	r3, r3, r2
   1db6c:	08db      	lsrs	r3, r3, #3
        LOG_INF("Invalid connection handle");
   1db6e:	f04f 0100 	mov.w	r1, #0
   1db72:	2203      	movs	r2, #3
   1db74:	f362 0102 	bfi	r1, r2, #0, #3
   1db78:	f36f 01c5 	bfc	r1, #3, #3
   1db7c:	f363 118f 	bfi	r1, r3, #6, #10
   1db80:	4803      	ldr	r0, [pc, #12]	; (1db90 <remove_connection_data+0x48>)
   1db82:	f002 fc47 	bl	20414 <log_0>
        return;
   1db86:	e7ed      	b.n	1db64 <remove_connection_data+0x1c>
   1db88:	0003d1a4 	.word	0x0003d1a4
   1db8c:	0003d1a4 	.word	0x0003d1a4
   1db90:	0003d600 	.word	0x0003d600

0001db94 <get_ble_conn_handles>:
 * 
 * @param index 
 * @return struct bt_conn* 
 */
struct bt_conn *get_ble_conn_handles(uint8_t index)
{
   1db94:	b508      	push	{r3, lr}
    if(index < BLE_MAX_CONNECTIONS)
   1db96:	2813      	cmp	r0, #19
   1db98:	d805      	bhi.n	1dba6 <get_ble_conn_handles+0x12>
    {
        return bluetooth_devices[index].ble_connection_handle;
   1db9a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1db9e:	4b0b      	ldr	r3, [pc, #44]	; (1dbcc <get_ble_conn_handles+0x38>)
   1dba0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    else
    {
        LOG_INF("Wrong ble device index %d", index);
        return NULL;
    }
}
   1dba4:	bd08      	pop	{r3, pc}
   1dba6:	4b0a      	ldr	r3, [pc, #40]	; (1dbd0 <get_ble_conn_handles+0x3c>)
   1dba8:	4a0a      	ldr	r2, [pc, #40]	; (1dbd4 <get_ble_conn_handles+0x40>)
   1dbaa:	1a9b      	subs	r3, r3, r2
   1dbac:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong ble device index %d", index);
   1dbae:	f04f 0200 	mov.w	r2, #0
   1dbb2:	2103      	movs	r1, #3
   1dbb4:	f361 0202 	bfi	r2, r1, #0, #3
   1dbb8:	f36f 02c5 	bfc	r2, #3, #3
   1dbbc:	f363 128f 	bfi	r2, r3, #6, #10
   1dbc0:	4601      	mov	r1, r0
   1dbc2:	4805      	ldr	r0, [pc, #20]	; (1dbd8 <get_ble_conn_handles+0x44>)
   1dbc4:	f002 fb70 	bl	202a8 <log_1>
        return NULL;
   1dbc8:	2000      	movs	r0, #0
   1dbca:	e7eb      	b.n	1dba4 <get_ble_conn_handles+0x10>
   1dbcc:	20006f5c 	.word	0x20006f5c
   1dbd0:	0003d1a4 	.word	0x0003d1a4
   1dbd4:	0003d1a4 	.word	0x0003d1a4
   1dbd8:	0003d750 	.word	0x0003d750

0001dbdc <get_mac_address_by_conn_handle>:
 * @return the mac address corresponding to the connection handle
 * @return NULL if the connection handle is not found on the array of ble devices
 */
char *get_mac_address_by_conn_handle(struct bt_conn* conn)
{
    for(int index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1dbdc:	2300      	movs	r3, #0
   1dbde:	2b13      	cmp	r3, #19
   1dbe0:	dc05      	bgt.n	1dbee <get_mac_address_by_conn_handle+0x12>
    {
        if(bluetooth_devices->ble_connection_handle == conn)
   1dbe2:	4a05      	ldr	r2, [pc, #20]	; (1dbf8 <get_mac_address_by_conn_handle+0x1c>)
   1dbe4:	6812      	ldr	r2, [r2, #0]
   1dbe6:	4282      	cmp	r2, r0
   1dbe8:	d003      	beq.n	1dbf2 <get_mac_address_by_conn_handle+0x16>
    for(int index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1dbea:	3301      	adds	r3, #1
   1dbec:	e7f7      	b.n	1dbde <get_mac_address_by_conn_handle+0x2>
        {
            return bluetooth_devices->mac_address;
        }
    }

    return NULL;
   1dbee:	2000      	movs	r0, #0
   1dbf0:	4770      	bx	lr
            return bluetooth_devices->mac_address;
   1dbf2:	4802      	ldr	r0, [pc, #8]	; (1dbfc <get_mac_address_by_conn_handle+0x20>)
   1dbf4:	4770      	bx	lr
   1dbf6:	bf00      	nop
   1dbf8:	20006f5c 	.word	0x20006f5c
   1dbfc:	20006f60 	.word	0x20006f60

0001dc00 <thread_sleep_run>:
    smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[THREAD_SLEEP]);
}

// --- THREAD_SLEEP state ---
static void thread_sleep_run(void *o)
{
   1dc00:	b510      	push	{r4, lr}
   1dc02:	b082      	sub	sp, #8
	return z_impl_k_event_wait(event, events, reset, timeout);
   1dc04:	f04f 32ff 	mov.w	r2, #4294967295
   1dc08:	f04f 33ff 	mov.w	r3, #4294967295
   1dc0c:	e9cd 2300 	strd	r2, r3, [sp]
   1dc10:	2201      	movs	r2, #1
   1dc12:	21aa      	movs	r1, #170	; 0xaa
   1dc14:	4812      	ldr	r0, [pc, #72]	; (1dc60 <thread_sleep_run+0x60>)
   1dc16:	f01f f8df 	bl	3cdd8 <z_impl_k_event_wait>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1dc1a:	4b12      	ldr	r3, [pc, #72]	; (1dc64 <thread_sleep_run+0x64>)
   1dc1c:	689b      	ldr	r3, [r3, #8]
    events = k_event_wait(&measurements_fsm_event, MEASUREMENTS_FSM_RUN_EVT, true, K_FOREVER);

    // After thread wakes up, check if at least one sensor node is connected. If not, go back to sleep state
    is_anyone_connected = k_sem_count_get(&at_least_one_active_connection_sem) > 0 ? true : false;

    if (is_anyone_connected)
   1dc1e:	b943      	cbnz	r3, 1dc32 <thread_sleep_run+0x32>
        smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[TAKE_MEASUREMENTS]);
    }
    else
    {
        // check if data reset needed after everyone disconnecting: TODO: this is really bad, needs to be fixed in a proper way
        if(no_devices_connected_reset_needed)
   1dc20:	4b11      	ldr	r3, [pc, #68]	; (1dc68 <thread_sleep_run+0x68>)
   1dc22:	781b      	ldrb	r3, [r3, #0]
   1dc24:	b96b      	cbnz	r3, 1dc42 <thread_sleep_run+0x42>
            {
                reset_row_status(index);
            }
            k_event_post(&env_control_event, ENV_CONTROL_MEASUREMENTS_TAKEN_EVT);
        }
        smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[THREAD_SLEEP]);
   1dc26:	4911      	ldr	r1, [pc, #68]	; (1dc6c <thread_sleep_run+0x6c>)
   1dc28:	4811      	ldr	r0, [pc, #68]	; (1dc70 <thread_sleep_run+0x70>)
   1dc2a:	f005 f8e7 	bl	22dfc <smf_set_state>
    }
}
   1dc2e:	b002      	add	sp, #8
   1dc30:	bd10      	pop	{r4, pc}
        no_devices_connected_reset_needed = true;
   1dc32:	4b0d      	ldr	r3, [pc, #52]	; (1dc68 <thread_sleep_run+0x68>)
   1dc34:	2201      	movs	r2, #1
   1dc36:	701a      	strb	r2, [r3, #0]
        smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[TAKE_MEASUREMENTS]);
   1dc38:	490e      	ldr	r1, [pc, #56]	; (1dc74 <thread_sleep_run+0x74>)
   1dc3a:	480d      	ldr	r0, [pc, #52]	; (1dc70 <thread_sleep_run+0x70>)
   1dc3c:	f005 f8de 	bl	22dfc <smf_set_state>
   1dc40:	e7f5      	b.n	1dc2e <thread_sleep_run+0x2e>
            for(uint8_t index = 0; index < MAX_CONFIGURATION_ID; index++)
   1dc42:	2400      	movs	r4, #0
   1dc44:	2c04      	cmp	r4, #4
   1dc46:	d805      	bhi.n	1dc54 <thread_sleep_run+0x54>
                reset_row_status(index);
   1dc48:	4620      	mov	r0, r4
   1dc4a:	f001 fa13 	bl	1f074 <reset_row_status>
            for(uint8_t index = 0; index < MAX_CONFIGURATION_ID; index++)
   1dc4e:	3401      	adds	r4, #1
   1dc50:	b2e4      	uxtb	r4, r4
   1dc52:	e7f7      	b.n	1dc44 <thread_sleep_run+0x44>
	z_impl_k_event_post(event, events);
   1dc54:	2101      	movs	r1, #1
   1dc56:	4808      	ldr	r0, [pc, #32]	; (1dc78 <thread_sleep_run+0x78>)
   1dc58:	f01f f8b9 	bl	3cdce <z_impl_k_event_post>
}
   1dc5c:	e7e3      	b.n	1dc26 <thread_sleep_run+0x26>
   1dc5e:	bf00      	nop
   1dc60:	20007244 	.word	0x20007244
   1dc64:	2000722c 	.word	0x2000722c
   1dc68:	2000da6c 	.word	0x2000da6c
   1dc6c:	0003d890 	.word	0x0003d890
   1dc70:	20007250 	.word	0x20007250
   1dc74:	0003d850 	.word	0x0003d850
   1dc78:	20007a24 	.word	0x20007a24

0001dc7c <send_data_to_9160_run>:
{
   1dc7c:	b530      	push	{r4, r5, lr}
   1dc7e:	b093      	sub	sp, #76	; 0x4c
   1dc80:	4605      	mov	r5, r0
    message_measurement_data_t msg_measurement_data = {0};
   1dc82:	222b      	movs	r2, #43	; 0x2b
   1dc84:	2100      	movs	r1, #0
   1dc86:	a807      	add	r0, sp, #28
   1dc88:	f019 f890 	bl	36dac <memset>
    message_row_mean_data_t msg_row_mean_data = {0};
   1dc8c:	2400      	movs	r4, #0
   1dc8e:	9402      	str	r4, [sp, #8]
   1dc90:	9403      	str	r4, [sp, #12]
   1dc92:	9404      	str	r4, [sp, #16]
   1dc94:	9405      	str	r4, [sp, #20]
   1dc96:	f88d 4018 	strb.w	r4, [sp, #24]
    message_ready_for_cloud_t msg_ready_for_cloud = {0};
   1dc9a:	9401      	str	r4, [sp, #4]
    for (int index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1dc9c:	e007      	b.n	1dcae <send_data_to_9160_run+0x32>
            create_measurements_data_tx_message(&user_ctx->measurements_data[index], &msg_measurement_data);
   1dc9e:	a907      	add	r1, sp, #28
   1dca0:	f016 fb0a 	bl	342b8 <create_measurements_data_tx_message>
            internal_uart_send_data((uint8_t *)&msg_measurement_data, sizeof(message_measurement_data_t));
   1dca4:	212b      	movs	r1, #43	; 0x2b
   1dca6:	a807      	add	r0, sp, #28
   1dca8:	f000 fc0e 	bl	1e4c8 <internal_uart_send_data>
    for (int index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1dcac:	3401      	adds	r4, #1
   1dcae:	2c13      	cmp	r4, #19
   1dcb0:	dc09      	bgt.n	1dcc6 <send_data_to_9160_run+0x4a>
        if (user_ctx->measurements_data[index].ble_connection_handle != NULL)
   1dcb2:	692a      	ldr	r2, [r5, #16]
   1dcb4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1dcb8:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   1dcbc:	18d0      	adds	r0, r2, r3
   1dcbe:	58d3      	ldr	r3, [r2, r3]
   1dcc0:	2b00      	cmp	r3, #0
   1dcc2:	d1ec      	bne.n	1dc9e <send_data_to_9160_run+0x22>
   1dcc4:	e7f2      	b.n	1dcac <send_data_to_9160_run+0x30>
    for (int index = 0; index < MAX_CONFIGURATION_ID; index++)
   1dcc6:	2400      	movs	r4, #0
   1dcc8:	e000      	b.n	1dccc <send_data_to_9160_run+0x50>
   1dcca:	3401      	adds	r4, #1
   1dccc:	2c04      	cmp	r4, #4
   1dcce:	dc10      	bgt.n	1dcf2 <send_data_to_9160_run+0x76>
        if (user_ctx->row_mean_data[index].is_row_registered)
   1dcd0:	6968      	ldr	r0, [r5, #20]
   1dcd2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1dcd6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1dcda:	4418      	add	r0, r3
   1dcdc:	7ac3      	ldrb	r3, [r0, #11]
   1dcde:	2b00      	cmp	r3, #0
   1dce0:	d0f3      	beq.n	1dcca <send_data_to_9160_run+0x4e>
            create_row_mean_data_tx_message(&user_ctx->row_mean_data[index], &msg_row_mean_data);
   1dce2:	a902      	add	r1, sp, #8
   1dce4:	f016 fb04 	bl	342f0 <create_row_mean_data_tx_message>
            internal_uart_send_data((uint8_t *)&msg_row_mean_data, sizeof(message_row_mean_data_t));
   1dce8:	2111      	movs	r1, #17
   1dcea:	a802      	add	r0, sp, #8
   1dcec:	f000 fbec 	bl	1e4c8 <internal_uart_send_data>
   1dcf0:	e7eb      	b.n	1dcca <send_data_to_9160_run+0x4e>
    create_ready_for_cloud_tx_message(&msg_ready_for_cloud);
   1dcf2:	a801      	add	r0, sp, #4
   1dcf4:	f016 fb18 	bl	34328 <create_ready_for_cloud_tx_message>
    internal_uart_send_data((uint8_t *)&msg_ready_for_cloud, sizeof(message_ready_for_cloud_t));
   1dcf8:	2104      	movs	r1, #4
   1dcfa:	eb0d 0001 	add.w	r0, sp, r1
   1dcfe:	f000 fbe3 	bl	1e4c8 <internal_uart_send_data>
    smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[THREAD_SLEEP]);
   1dd02:	4903      	ldr	r1, [pc, #12]	; (1dd10 <send_data_to_9160_run+0x94>)
   1dd04:	4803      	ldr	r0, [pc, #12]	; (1dd14 <send_data_to_9160_run+0x98>)
   1dd06:	f005 f879 	bl	22dfc <smf_set_state>
}
   1dd0a:	b013      	add	sp, #76	; 0x4c
   1dd0c:	bd30      	pop	{r4, r5, pc}
   1dd0e:	bf00      	nop
   1dd10:	0003d890 	.word	0x0003d890
   1dd14:	20007250 	.word	0x20007250

0001dd18 <environment_control_run>:
{
   1dd18:	b570      	push	{r4, r5, r6, lr}
   1dd1a:	4606      	mov	r6, r0
    for(uint8_t row_id = 0; row_id < MAX_CONFIGURATION_ID; row_id++)
   1dd1c:	2400      	movs	r4, #0
   1dd1e:	e004      	b.n	1dd2a <environment_control_run+0x12>
            reset_row_status(row_id);
   1dd20:	4620      	mov	r0, r4
   1dd22:	f001 f9a7 	bl	1f074 <reset_row_status>
    for(uint8_t row_id = 0; row_id < MAX_CONFIGURATION_ID; row_id++)
   1dd26:	3401      	adds	r4, #1
   1dd28:	b2e4      	uxtb	r4, r4
   1dd2a:	2c04      	cmp	r4, #4
   1dd2c:	d824      	bhi.n	1dd78 <environment_control_run+0x60>
        if(user_ctx->row_mean_data[row_id].is_row_registered)
   1dd2e:	6973      	ldr	r3, [r6, #20]
   1dd30:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1dd34:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   1dd38:	442b      	add	r3, r5
   1dd3a:	7ada      	ldrb	r2, [r3, #11]
   1dd3c:	2a00      	cmp	r2, #0
   1dd3e:	d0ef      	beq.n	1dd20 <environment_control_run+0x8>
            set_row_current_humidity(user_ctx->row_mean_data[row_id].mean_row_humidity, row_id);
   1dd40:	4621      	mov	r1, r4
   1dd42:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
   1dd46:	f000 fe57 	bl	1e9f8 <set_row_current_humidity>
            set_row_current_temperature(user_ctx->row_mean_data[row_id].mean_row_temp, row_id);
   1dd4a:	6973      	ldr	r3, [r6, #20]
   1dd4c:	4621      	mov	r1, r4
   1dd4e:	5f58      	ldrsh	r0, [r3, r5]
   1dd50:	f000 fe04 	bl	1e95c <set_row_current_temperature>
            set_row_current_light_exposure(user_ctx->row_mean_data[row_id].mean_row_light, row_id);
   1dd54:	6973      	ldr	r3, [r6, #20]
   1dd56:	442b      	add	r3, r5
   1dd58:	4621      	mov	r1, r4
   1dd5a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
   1dd5e:	f000 feef 	bl	1eb40 <set_row_current_light_exposure>
            set_row_current_soil_moisture(user_ctx->row_mean_data[row_id].mean_row_soil_moisture, row_id);
   1dd62:	6973      	ldr	r3, [r6, #20]
   1dd64:	441d      	add	r5, r3
   1dd66:	4621      	mov	r1, r4
   1dd68:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
   1dd6c:	f000 fe96 	bl	1ea9c <set_row_current_soil_moisture>
            set_row_registered(row_id);
   1dd70:	4620      	mov	r0, r4
   1dd72:	f000 ff09 	bl	1eb88 <set_row_registered>
   1dd76:	e7d6      	b.n	1dd26 <environment_control_run+0xe>
	z_impl_k_event_post(event, events);
   1dd78:	2101      	movs	r1, #1
   1dd7a:	4804      	ldr	r0, [pc, #16]	; (1dd8c <environment_control_run+0x74>)
   1dd7c:	f01f f827 	bl	3cdce <z_impl_k_event_post>
    smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[SEND_DATA_TO_9160]);
   1dd80:	4903      	ldr	r1, [pc, #12]	; (1dd90 <environment_control_run+0x78>)
   1dd82:	4804      	ldr	r0, [pc, #16]	; (1dd94 <environment_control_run+0x7c>)
   1dd84:	f005 f83a 	bl	22dfc <smf_set_state>
}
   1dd88:	bd70      	pop	{r4, r5, r6, pc}
   1dd8a:	bf00      	nop
   1dd8c:	20007a24 	.word	0x20007a24
   1dd90:	0003d880 	.word	0x0003d880
   1dd94:	20007250 	.word	0x20007250

0001dd98 <calculate_mean_measurements_run>:
{
   1dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd9c:	b085      	sub	sp, #20
   1dd9e:	4604      	mov	r4, r0
    for (int row_index = 0; row_index < MAX_CONFIGURATION_ID; row_index++)
   1dda0:	2500      	movs	r5, #0
   1dda2:	e04d      	b.n	1de40 <calculate_mean_measurements_run+0xa8>
            for (uint8_t measurement_data_index = 0; measurement_data_index < BLE_MAX_CONNECTIONS; measurement_data_index++)
   1dda4:	3301      	adds	r3, #1
   1dda6:	b2db      	uxtb	r3, r3
   1dda8:	2b13      	cmp	r3, #19
   1ddaa:	d81b      	bhi.n	1dde4 <calculate_mean_measurements_run+0x4c>
                if (user_ctx->measurements_data[measurement_data_index].row_id == user_ctx->row_mean_data[row_index].row_id)
   1ddac:	6921      	ldr	r1, [r4, #16]
   1ddae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1ddb2:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
   1ddb6:	440a      	add	r2, r1
   1ddb8:	f892 b026 	ldrb.w	fp, [r2, #38]	; 0x26
   1ddbc:	7b01      	ldrb	r1, [r0, #12]
   1ddbe:	458b      	cmp	fp, r1
   1ddc0:	d1f0      	bne.n	1dda4 <calculate_mean_measurements_run+0xc>
                    mean_ambient_humidity += user_ctx->measurements_data[measurement_data_index].ambient_hum_measurement;
   1ddc2:	f8d2 1019 	ldr.w	r1, [r2, #25]
   1ddc6:	448a      	add	sl, r1
                    mean_ambient_temperature += user_ctx->measurements_data[measurement_data_index].ambient_temp_measurement;
   1ddc8:	f8d2 1015 	ldr.w	r1, [r2, #21]
   1ddcc:	448e      	add	lr, r1
                    mean_light_intensity += user_ctx->measurements_data[measurement_data_index].light_measurement;
   1ddce:	f8d2 1021 	ldr.w	r1, [r2, #33]	; 0x21
   1ddd2:	4489      	add	r9, r1
                    mean_soil_moisture += user_ctx->measurements_data[measurement_data_index].soil_moisture_measurement;
   1ddd4:	f8d2 201d 	ldr.w	r2, [r2, #29]
   1ddd8:	4490      	add	r8, r2
                    measurements_counter++;
   1ddda:	f10c 0c01 	add.w	ip, ip, #1
   1ddde:	fa5f fc8c 	uxtb.w	ip, ip
   1dde2:	e7df      	b.n	1dda4 <calculate_mean_measurements_run+0xc>
            user_ctx->row_mean_data[row_index].mean_row_humidity = mean_ambient_humidity;
   1dde4:	fb9a fafc 	sdiv	sl, sl, ip
   1dde8:	f8a0 a002 	strh.w	sl, [r0, #2]
            user_ctx->row_mean_data[row_index].mean_row_light = mean_light_intensity;
   1ddec:	6963      	ldr	r3, [r4, #20]
   1ddee:	4433      	add	r3, r6
   1ddf0:	fb99 f9fc 	sdiv	r9, r9, ip
   1ddf4:	f8a3 9006 	strh.w	r9, [r3, #6]
            user_ctx->row_mean_data[row_index].mean_row_soil_moisture = mean_soil_moisture;
   1ddf8:	6963      	ldr	r3, [r4, #20]
   1ddfa:	4433      	add	r3, r6
   1ddfc:	fb98 f8fc 	sdiv	r8, r8, ip
   1de00:	f8a3 8004 	strh.w	r8, [r3, #4]
            user_ctx->row_mean_data[row_index].mean_row_temp = mean_ambient_temperature;
   1de04:	6963      	ldr	r3, [r4, #20]
   1de06:	fb9e fcfc 	sdiv	ip, lr, ip
   1de0a:	f823 c006 	strh.w	ip, [r3, r6]
            user_ctx->row_mean_data[row_index].is_fan_active = get_row_fan_switch(row_index);
   1de0e:	fa5f f885 	uxtb.w	r8, r5
   1de12:	6963      	ldr	r3, [r4, #20]
   1de14:	eb03 0906 	add.w	r9, r3, r6
   1de18:	4640      	mov	r0, r8
   1de1a:	f001 f84b 	bl	1eeb4 <get_row_fan_switch>
   1de1e:	f889 0008 	strb.w	r0, [r9, #8]
            user_ctx->row_mean_data[row_index].is_watering_active = get_row_water_switch(row_index);
   1de22:	6963      	ldr	r3, [r4, #20]
   1de24:	eb03 0906 	add.w	r9, r3, r6
   1de28:	4640      	mov	r0, r8
   1de2a:	f000 fff9 	bl	1ee20 <get_row_water_switch>
   1de2e:	f889 0009 	strb.w	r0, [r9, #9]
            user_ctx->row_mean_data[row_index].are_lights_active = get_row_light_switch(row_index);
   1de32:	6963      	ldr	r3, [r4, #20]
   1de34:	441e      	add	r6, r3
   1de36:	4640      	mov	r0, r8
   1de38:	f001 f886 	bl	1ef48 <get_row_light_switch>
   1de3c:	72b0      	strb	r0, [r6, #10]
    for (int row_index = 0; row_index < MAX_CONFIGURATION_ID; row_index++)
   1de3e:	3501      	adds	r5, #1
   1de40:	2d04      	cmp	r5, #4
   1de42:	dc0f      	bgt.n	1de64 <calculate_mean_measurements_run+0xcc>
        if (user_ctx->row_mean_data[row_index].is_row_registered)
   1de44:	6960      	ldr	r0, [r4, #20]
   1de46:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   1de4a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   1de4e:	4430      	add	r0, r6
   1de50:	7ac3      	ldrb	r3, [r0, #11]
   1de52:	2b00      	cmp	r3, #0
   1de54:	d0f3      	beq.n	1de3e <calculate_mean_measurements_run+0xa6>
            for (uint8_t measurement_data_index = 0; measurement_data_index < BLE_MAX_CONNECTIONS; measurement_data_index++)
   1de56:	2300      	movs	r3, #0
        int32_t mean_light_intensity = 0;
   1de58:	4699      	mov	r9, r3
        int32_t mean_soil_moisture = 0;
   1de5a:	4698      	mov	r8, r3
        int32_t mean_ambient_temperature = 0;
   1de5c:	469e      	mov	lr, r3
        int32_t mean_ambient_humidity = 0;
   1de5e:	469a      	mov	sl, r3
        uint8_t measurements_counter = 0;
   1de60:	469c      	mov	ip, r3
   1de62:	e7a1      	b.n	1dda8 <calculate_mean_measurements_run+0x10>
    for (uint8_t index = 0; index < MAX_CONFIGURATION_ID; index++)
   1de64:	2500      	movs	r5, #0
   1de66:	f8bd 8004 	ldrh.w	r8, [sp, #4]
   1de6a:	f8bd 900a 	ldrh.w	r9, [sp, #10]
   1de6e:	f8bd a00c 	ldrh.w	sl, [sp, #12]
   1de72:	f8bd b00e 	ldrh.w	fp, [sp, #14]
   1de76:	e001      	b.n	1de7c <calculate_mean_measurements_run+0xe4>
   1de78:	3501      	adds	r5, #1
   1de7a:	b2ed      	uxtb	r5, r5
   1de7c:	2d04      	cmp	r5, #4
   1de7e:	d877      	bhi.n	1df70 <calculate_mean_measurements_run+0x1d8>
        if (user_ctx->row_mean_data[index].is_row_registered)
   1de80:	6963      	ldr	r3, [r4, #20]
   1de82:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   1de86:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   1de8a:	4433      	add	r3, r6
   1de8c:	7ada      	ldrb	r2, [r3, #11]
   1de8e:	2a00      	cmp	r2, #0
   1de90:	d0f2      	beq.n	1de78 <calculate_mean_measurements_run+0xe0>
   1de92:	4a3b      	ldr	r2, [pc, #236]	; (1df80 <calculate_mean_measurements_run+0x1e8>)
   1de94:	493b      	ldr	r1, [pc, #236]	; (1df84 <calculate_mean_measurements_run+0x1ec>)
   1de96:	1a52      	subs	r2, r2, r1
   1de98:	08d2      	lsrs	r2, r2, #3
            LOG_INF(" ------- MEAN DATA --------- row id: %d", user_ctx->row_mean_data[index].row_id);
   1de9a:	2103      	movs	r1, #3
   1de9c:	f361 0802 	bfi	r8, r1, #0, #3
   1dea0:	f36f 08c5 	bfc	r8, #3, #3
   1dea4:	9201      	str	r2, [sp, #4]
   1dea6:	f362 188f 	bfi	r8, r2, #6, #10
   1deaa:	4642      	mov	r2, r8
   1deac:	7b19      	ldrb	r1, [r3, #12]
   1deae:	4836      	ldr	r0, [pc, #216]	; (1df88 <calculate_mean_measurements_run+0x1f0>)
   1deb0:	f002 f9fa 	bl	202a8 <log_1>
            LOG_INF("Mean Temperature is: %d.%d C", user_ctx->row_mean_data[index].mean_row_temp / 100, user_ctx->row_mean_data[index].mean_row_temp % 100);
   1deb4:	2303      	movs	r3, #3
   1deb6:	f363 0902 	bfi	r9, r3, #0, #3
   1deba:	f36f 09c5 	bfc	r9, #3, #3
   1debe:	9b01      	ldr	r3, [sp, #4]
   1dec0:	f363 198f 	bfi	r9, r3, #6, #10
   1dec4:	6963      	ldr	r3, [r4, #20]
   1dec6:	5f9a      	ldrsh	r2, [r3, r6]
   1dec8:	4830      	ldr	r0, [pc, #192]	; (1df8c <calculate_mean_measurements_run+0x1f4>)
   1deca:	fb80 c302 	smull	ip, r3, r0, r2
   1dece:	17d1      	asrs	r1, r2, #31
   1ded0:	ebc1 1163 	rsb	r1, r1, r3, asr #5
   1ded4:	f04f 0c64 	mov.w	ip, #100	; 0x64
   1ded8:	fb0c 2211 	mls	r2, ip, r1, r2
   1dedc:	464b      	mov	r3, r9
   1dede:	b212      	sxth	r2, r2
   1dee0:	b209      	sxth	r1, r1
   1dee2:	482b      	ldr	r0, [pc, #172]	; (1df90 <calculate_mean_measurements_run+0x1f8>)
   1dee4:	f002 fa16 	bl	20314 <log_2>
            LOG_INF("Mean Humidity is: %d.%d percent", user_ctx->row_mean_data[index].mean_row_humidity / 100, user_ctx->row_mean_data[index].mean_row_humidity % 100);
   1dee8:	2203      	movs	r2, #3
   1deea:	f362 0a02 	bfi	sl, r2, #0, #3
   1deee:	f36f 0ac5 	bfc	sl, #3, #3
   1def2:	9a01      	ldr	r2, [sp, #4]
   1def4:	f362 1a8f 	bfi	sl, r2, #6, #10
   1def8:	6963      	ldr	r3, [r4, #20]
   1defa:	4433      	add	r3, r6
   1defc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1df00:	4822      	ldr	r0, [pc, #136]	; (1df8c <calculate_mean_measurements_run+0x1f4>)
   1df02:	fb80 e302 	smull	lr, r3, r0, r2
   1df06:	17d1      	asrs	r1, r2, #31
   1df08:	ebc1 1163 	rsb	r1, r1, r3, asr #5
   1df0c:	f04f 0c64 	mov.w	ip, #100	; 0x64
   1df10:	fb0c 2211 	mls	r2, ip, r1, r2
   1df14:	4653      	mov	r3, sl
   1df16:	b212      	sxth	r2, r2
   1df18:	b209      	sxth	r1, r1
   1df1a:	481e      	ldr	r0, [pc, #120]	; (1df94 <calculate_mean_measurements_run+0x1fc>)
   1df1c:	f002 f9fa 	bl	20314 <log_2>
            LOG_INF("Mean Soil moisture is: %d percent", user_ctx->row_mean_data[index].mean_row_soil_moisture / 100);
   1df20:	2103      	movs	r1, #3
   1df22:	f361 0b02 	bfi	fp, r1, #0, #3
   1df26:	f36f 0bc5 	bfc	fp, #3, #3
   1df2a:	9901      	ldr	r1, [sp, #4]
   1df2c:	f361 1b8f 	bfi	fp, r1, #6, #10
   1df30:	6963      	ldr	r3, [r4, #20]
   1df32:	4433      	add	r3, r6
   1df34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1df38:	4814      	ldr	r0, [pc, #80]	; (1df8c <calculate_mean_measurements_run+0x1f4>)
   1df3a:	fb80 0103 	smull	r0, r1, r0, r3
   1df3e:	17db      	asrs	r3, r3, #31
   1df40:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   1df44:	465a      	mov	r2, fp
   1df46:	b209      	sxth	r1, r1
   1df48:	4813      	ldr	r0, [pc, #76]	; (1df98 <calculate_mean_measurements_run+0x200>)
   1df4a:	f002 f9ad 	bl	202a8 <log_1>
            LOG_INF("Mean Light intensity is: %d", user_ctx->row_mean_data[index].mean_row_light);
   1df4e:	2303      	movs	r3, #3
   1df50:	f363 0702 	bfi	r7, r3, #0, #3
   1df54:	f36f 07c5 	bfc	r7, #3, #3
   1df58:	9901      	ldr	r1, [sp, #4]
   1df5a:	f361 178f 	bfi	r7, r1, #6, #10
   1df5e:	6963      	ldr	r3, [r4, #20]
   1df60:	441e      	add	r6, r3
   1df62:	463a      	mov	r2, r7
   1df64:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
   1df68:	480c      	ldr	r0, [pc, #48]	; (1df9c <calculate_mean_measurements_run+0x204>)
   1df6a:	f002 f99d 	bl	202a8 <log_1>
   1df6e:	e783      	b.n	1de78 <calculate_mean_measurements_run+0xe0>
    smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[ENVIRONMENT_CONTROL]);
   1df70:	490b      	ldr	r1, [pc, #44]	; (1dfa0 <calculate_mean_measurements_run+0x208>)
   1df72:	480c      	ldr	r0, [pc, #48]	; (1dfa4 <calculate_mean_measurements_run+0x20c>)
   1df74:	f004 ff42 	bl	22dfc <smf_set_state>
}
   1df78:	b005      	add	sp, #20
   1df7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df7e:	bf00      	nop
   1df80:	0003d26c 	.word	0x0003d26c
   1df84:	0003d1a4 	.word	0x0003d1a4
   1df88:	0003d76c 	.word	0x0003d76c
   1df8c:	51eb851f 	.word	0x51eb851f
   1df90:	0003d794 	.word	0x0003d794
   1df94:	0003d7b4 	.word	0x0003d7b4
   1df98:	0003d7d4 	.word	0x0003d7d4
   1df9c:	0003d7f8 	.word	0x0003d7f8
   1dfa0:	0003d870 	.word	0x0003d870
   1dfa4:	20007250 	.word	0x20007250

0001dfa8 <take_measurements_run>:
{
   1dfa8:	b508      	push	{r3, lr}
    measurements_taken = measurements_and_device_data();
   1dfaa:	f000 f979 	bl	1e2a0 <measurements_and_device_data>
    if (measurements_taken)
   1dfae:	b120      	cbz	r0, 1dfba <take_measurements_run+0x12>
        smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[CALCULATE_MEAN_MEASUREMENTS]);
   1dfb0:	490c      	ldr	r1, [pc, #48]	; (1dfe4 <take_measurements_run+0x3c>)
   1dfb2:	480d      	ldr	r0, [pc, #52]	; (1dfe8 <take_measurements_run+0x40>)
   1dfb4:	f004 ff22 	bl	22dfc <smf_set_state>
}
   1dfb8:	bd08      	pop	{r3, pc}
   1dfba:	4b0c      	ldr	r3, [pc, #48]	; (1dfec <take_measurements_run+0x44>)
   1dfbc:	4a0c      	ldr	r2, [pc, #48]	; (1dff0 <take_measurements_run+0x48>)
   1dfbe:	1a9b      	subs	r3, r3, r2
   1dfc0:	08db      	lsrs	r3, r3, #3
        LOG_INF("No measurements taken");
   1dfc2:	f04f 0100 	mov.w	r1, #0
   1dfc6:	2203      	movs	r2, #3
   1dfc8:	f362 0102 	bfi	r1, r2, #0, #3
   1dfcc:	f36f 01c5 	bfc	r1, #3, #3
   1dfd0:	f363 118f 	bfi	r1, r3, #6, #10
   1dfd4:	4807      	ldr	r0, [pc, #28]	; (1dff4 <take_measurements_run+0x4c>)
   1dfd6:	f002 fa1d 	bl	20414 <log_0>
        smf_set_state(SMF_CTX(&measurements_fsm_user_object), &measurement_states[THREAD_SLEEP]);
   1dfda:	4907      	ldr	r1, [pc, #28]	; (1dff8 <take_measurements_run+0x50>)
   1dfdc:	4802      	ldr	r0, [pc, #8]	; (1dfe8 <take_measurements_run+0x40>)
   1dfde:	f004 ff0d 	bl	22dfc <smf_set_state>
}
   1dfe2:	e7e9      	b.n	1dfb8 <take_measurements_run+0x10>
   1dfe4:	0003d860 	.word	0x0003d860
   1dfe8:	20007250 	.word	0x20007250
   1dfec:	0003d26c 	.word	0x0003d26c
   1dff0:	0003d1a4 	.word	0x0003d1a4
   1dff4:	0003d814 	.word	0x0003d814
   1dff8:	0003d890 	.word	0x0003d890

0001dffc <measurements_fsm>:

void measurements_fsm(void)
{
   1dffc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dffe:	2201      	movs	r2, #1
   1e000:	2100      	movs	r1, #0
   1e002:	4810      	ldr	r0, [pc, #64]	; (1e044 <measurements_fsm+0x48>)
   1e004:	f01e f9f3 	bl	3c3ee <z_impl_k_sem_init>
   1e008:	2214      	movs	r2, #20
   1e00a:	2100      	movs	r1, #0
   1e00c:	480e      	ldr	r0, [pc, #56]	; (1e048 <measurements_fsm+0x4c>)
   1e00e:	f01e f9ee 	bl	3c3ee <z_impl_k_sem_init>
	z_impl_k_event_init(event);
   1e012:	480e      	ldr	r0, [pc, #56]	; (1e04c <measurements_fsm+0x50>)
   1e014:	f01e fed6 	bl	3cdc4 <z_impl_k_event_init>
    k_sem_init(&read_response_sem, 0, 1);
    k_sem_init(&at_least_one_active_connection_sem, 0, BLE_MAX_CONNECTIONS);
    k_event_init(&measurements_fsm_event);

    // Set initial state
    smf_set_initial(SMF_CTX(&measurements_fsm_user_object), &measurement_states[THREAD_SLEEP]);
   1e018:	490d      	ldr	r1, [pc, #52]	; (1e050 <measurements_fsm+0x54>)
   1e01a:	480e      	ldr	r0, [pc, #56]	; (1e054 <measurements_fsm+0x58>)
   1e01c:	f018 fee6 	bl	36dec <smf_set_initial>
	return z_impl_k_sem_take(sem, timeout);
   1e020:	4c09      	ldr	r4, [pc, #36]	; (1e048 <measurements_fsm+0x4c>)
   1e022:	f04f 32ff 	mov.w	r2, #4294967295
   1e026:	f04f 33ff 	mov.w	r3, #4294967295
   1e02a:	4620      	mov	r0, r4
   1e02c:	f012 f946 	bl	302bc <z_impl_k_sem_take>
	z_impl_k_sem_give(sem);
   1e030:	4620      	mov	r0, r4
   1e032:	f012 f91b 	bl	3026c <z_impl_k_sem_give>
        // Wait for at least one connection to be active in order to start measurement fsm
        k_sem_take(&at_least_one_active_connection_sem, K_FOREVER);
        // give back the semaphore.
        k_sem_give(&at_least_one_active_connection_sem);
        // State machine terminates if a non-zero value is returned
        ret = smf_run_state(SMF_CTX(&measurements_fsm_user_object));
   1e036:	4807      	ldr	r0, [pc, #28]	; (1e054 <measurements_fsm+0x58>)
   1e038:	f018 fee7 	bl	36e0a <smf_run_state>
        if (ret)
   1e03c:	2800      	cmp	r0, #0
   1e03e:	d0ef      	beq.n	1e020 <measurements_fsm+0x24>
        {
            // handle return code and terminate state machine
            break;
        }
    }
}
   1e040:	bd10      	pop	{r4, pc}
   1e042:	bf00      	nop
   1e044:	20007268 	.word	0x20007268
   1e048:	2000722c 	.word	0x2000722c
   1e04c:	20007244 	.word	0x20007244
   1e050:	0003d890 	.word	0x0003d890
   1e054:	20007250 	.word	0x20007250

0001e058 <get_measurements_data>:

// --- functions definitions ---------------------------------------------------
measurements_data_t *get_measurements_data(void)
{
    return measurement_data;
}
   1e058:	4800      	ldr	r0, [pc, #0]	; (1e05c <get_measurements_data+0x4>)
   1e05a:	4770      	bx	lr
   1e05c:	200072c4 	.word	0x200072c4

0001e060 <get_row_mean_data>:

row_mean_data_t *get_row_mean_data(void)
{
    return mean_row_measurements;
}
   1e060:	4800      	ldr	r0, [pc, #0]	; (1e064 <get_row_mean_data+0x4>)
   1e062:	4770      	bx	lr
   1e064:	20007280 	.word	0x20007280

0001e068 <clear_measurement_data>:
 * @brief function to clear measurement_data, this is called
 *        every time we take measurements
 *
 */
void clear_measurement_data(void)
{
   1e068:	b508      	push	{r3, lr}
    // Clean measurement_data array
    memset(measurement_data, 0, sizeof(measurements_data_t) * BLE_MAX_CONNECTIONS);
   1e06a:	f44f 7243 	mov.w	r2, #780	; 0x30c
   1e06e:	2100      	movs	r1, #0
   1e070:	4804      	ldr	r0, [pc, #16]	; (1e084 <clear_measurement_data+0x1c>)
   1e072:	f018 fe9b 	bl	36dac <memset>
    memset(mean_row_measurements, 0, sizeof(row_mean_data_t) * MAX_CONFIGURATION_ID);
   1e076:	2241      	movs	r2, #65	; 0x41
   1e078:	2100      	movs	r1, #0
   1e07a:	4803      	ldr	r0, [pc, #12]	; (1e088 <clear_measurement_data+0x20>)
   1e07c:	f018 fe96 	bl	36dac <memset>
}
   1e080:	bd08      	pop	{r3, pc}
   1e082:	bf00      	nop
   1e084:	200072c4 	.word	0x200072c4
   1e088:	20007280 	.word	0x20007280

0001e08c <get_all_ble_connection_handles>:
 * @brief Get all connection handles from connected sensor nodes and store them
 *        on measurement_data.ble_connection_handle member
 *
 */
void get_all_ble_connection_handles(void)
{
   1e08c:	b510      	push	{r4, lr}
    char *mac_address;
    // store all connection handles on the local variable measurement_data
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e08e:	2400      	movs	r4, #0
   1e090:	e00a      	b.n	1e0a8 <get_all_ble_connection_handles+0x1c>
        // TODO: make sure ble_connection_handle is null if device is not connected
        measurement_data[i].ble_connection_handle = get_ble_conn_handles(i);
        mac_address = get_mac_address_by_conn_handle(measurement_data[i].ble_connection_handle);
        if(mac_address != NULL)
        {
            memcpy(measurement_data[i].mac_address, mac_address, MAC_ADDRESS_LENGTH * sizeof(char));
   1e092:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1e096:	ebc4 03c0 	rsb	r3, r4, r0, lsl #3
   1e09a:	480c      	ldr	r0, [pc, #48]	; (1e0cc <get_all_ble_connection_handles+0x40>)
   1e09c:	4418      	add	r0, r3
   1e09e:	2211      	movs	r2, #17
   1e0a0:	3004      	adds	r0, #4
   1e0a2:	f018 fe5f 	bl	36d64 <memcpy>
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e0a6:	3401      	adds	r4, #1
   1e0a8:	2c13      	cmp	r4, #19
   1e0aa:	dc0e      	bgt.n	1e0ca <get_all_ble_connection_handles+0x3e>
        measurement_data[i].ble_connection_handle = get_ble_conn_handles(i);
   1e0ac:	b2e0      	uxtb	r0, r4
   1e0ae:	f7ff fd71 	bl	1db94 <get_ble_conn_handles>
   1e0b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e0b6:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   1e0ba:	4a04      	ldr	r2, [pc, #16]	; (1e0cc <get_all_ble_connection_handles+0x40>)
   1e0bc:	50d0      	str	r0, [r2, r3]
        mac_address = get_mac_address_by_conn_handle(measurement_data[i].ble_connection_handle);
   1e0be:	f7ff fd8d 	bl	1dbdc <get_mac_address_by_conn_handle>
        if(mac_address != NULL)
   1e0c2:	4601      	mov	r1, r0
   1e0c4:	2800      	cmp	r0, #0
   1e0c6:	d1e4      	bne.n	1e092 <get_all_ble_connection_handles+0x6>
   1e0c8:	e7ed      	b.n	1e0a6 <get_all_ble_connection_handles+0x1a>
        }
    }
}
   1e0ca:	bd10      	pop	{r4, pc}
   1e0cc:	200072c4 	.word	0x200072c4

0001e0d0 <set_temperature_measurement_value>:
 * @param conn Ble connection handle
 * @param measured_temperature Measured temp
 */
void set_temperature_measurement_value(struct bt_conn *conn, int32_t measured_temperature)
{
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e0d0:	2300      	movs	r3, #0
   1e0d2:	2b13      	cmp	r3, #19
   1e0d4:	dc17      	bgt.n	1e106 <set_temperature_measurement_value+0x36>
{
   1e0d6:	b510      	push	{r4, lr}
    {
        if (measurement_data[i].ble_connection_handle == conn)
   1e0d8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e0dc:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
   1e0e0:	4c09      	ldr	r4, [pc, #36]	; (1e108 <set_temperature_measurement_value+0x38>)
   1e0e2:	58a2      	ldr	r2, [r4, r2]
   1e0e4:	4282      	cmp	r2, r0
   1e0e6:	d003      	beq.n	1e0f0 <set_temperature_measurement_value+0x20>
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e0e8:	3301      	adds	r3, #1
   1e0ea:	2b13      	cmp	r3, #19
   1e0ec:	ddf4      	ble.n	1e0d8 <set_temperature_measurement_value+0x8>
   1e0ee:	e009      	b.n	1e104 <set_temperature_measurement_value+0x34>
        {
            measurement_data[i].ambient_temp_measurement = measured_temperature;
   1e0f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e0f4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1e0f8:	4423      	add	r3, r4
   1e0fa:	f8c3 1015 	str.w	r1, [r3, #21]
   1e0fe:	4803      	ldr	r0, [pc, #12]	; (1e10c <set_temperature_measurement_value+0x3c>)
   1e100:	f012 f8b4 	bl	3026c <z_impl_k_sem_give>
            k_sem_give(&read_response_sem);
            break;
        }
    }
}
   1e104:	bd10      	pop	{r4, pc}
   1e106:	4770      	bx	lr
   1e108:	200072c4 	.word	0x200072c4
   1e10c:	20007268 	.word	0x20007268

0001e110 <set_humidity_measurement_value>:
 * @param conn Ble connection handle
 * @param measured_humidity Measured humidity
 */
void set_humidity_measurement_value(struct bt_conn *conn, int32_t measured_humidity)
{
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e110:	2300      	movs	r3, #0
   1e112:	2b13      	cmp	r3, #19
   1e114:	dc17      	bgt.n	1e146 <set_humidity_measurement_value+0x36>
{
   1e116:	b510      	push	{r4, lr}
    {
        if (measurement_data[i].ble_connection_handle == conn)
   1e118:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e11c:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
   1e120:	4c09      	ldr	r4, [pc, #36]	; (1e148 <set_humidity_measurement_value+0x38>)
   1e122:	58a2      	ldr	r2, [r4, r2]
   1e124:	4282      	cmp	r2, r0
   1e126:	d003      	beq.n	1e130 <set_humidity_measurement_value+0x20>
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e128:	3301      	adds	r3, #1
   1e12a:	2b13      	cmp	r3, #19
   1e12c:	ddf4      	ble.n	1e118 <set_humidity_measurement_value+0x8>
   1e12e:	e009      	b.n	1e144 <set_humidity_measurement_value+0x34>
        {
            measurement_data[i].ambient_hum_measurement = measured_humidity;
   1e130:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e134:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1e138:	4423      	add	r3, r4
   1e13a:	f8c3 1019 	str.w	r1, [r3, #25]
   1e13e:	4803      	ldr	r0, [pc, #12]	; (1e14c <set_humidity_measurement_value+0x3c>)
   1e140:	f012 f894 	bl	3026c <z_impl_k_sem_give>
            k_sem_give(&read_response_sem);
            break;
        }
    }
}
   1e144:	bd10      	pop	{r4, pc}
   1e146:	4770      	bx	lr
   1e148:	200072c4 	.word	0x200072c4
   1e14c:	20007268 	.word	0x20007268

0001e150 <set_soil_moisture_measurement_value>:
 * @param conn 
 * @param soil_moisture 
 */
void set_soil_moisture_measurement_value(struct bt_conn *conn, int32_t soil_moisture)
{
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e150:	2300      	movs	r3, #0
   1e152:	2b13      	cmp	r3, #19
   1e154:	dc17      	bgt.n	1e186 <set_soil_moisture_measurement_value+0x36>
{
   1e156:	b510      	push	{r4, lr}
    {
        if (measurement_data[i].ble_connection_handle == conn)
   1e158:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e15c:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
   1e160:	4c09      	ldr	r4, [pc, #36]	; (1e188 <set_soil_moisture_measurement_value+0x38>)
   1e162:	58a2      	ldr	r2, [r4, r2]
   1e164:	4282      	cmp	r2, r0
   1e166:	d003      	beq.n	1e170 <set_soil_moisture_measurement_value+0x20>
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e168:	3301      	adds	r3, #1
   1e16a:	2b13      	cmp	r3, #19
   1e16c:	ddf4      	ble.n	1e158 <set_soil_moisture_measurement_value+0x8>
   1e16e:	e009      	b.n	1e184 <set_soil_moisture_measurement_value+0x34>
        {
            measurement_data[i].soil_moisture_measurement = soil_moisture;
   1e170:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e174:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1e178:	4423      	add	r3, r4
   1e17a:	f8c3 101d 	str.w	r1, [r3, #29]
   1e17e:	4803      	ldr	r0, [pc, #12]	; (1e18c <set_soil_moisture_measurement_value+0x3c>)
   1e180:	f012 f874 	bl	3026c <z_impl_k_sem_give>
            k_sem_give(&read_response_sem);
            break;
        }
    }
}
   1e184:	bd10      	pop	{r4, pc}
   1e186:	4770      	bx	lr
   1e188:	200072c4 	.word	0x200072c4
   1e18c:	20007268 	.word	0x20007268

0001e190 <set_light_intensity_measurement_value>:
 * @param conn 
 * @param light_intensity 
 */
void set_light_intensity_measurement_value(struct bt_conn *conn, int32_t light_intensity)
{
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e190:	2300      	movs	r3, #0
   1e192:	2b13      	cmp	r3, #19
   1e194:	dc17      	bgt.n	1e1c6 <set_light_intensity_measurement_value+0x36>
{
   1e196:	b510      	push	{r4, lr}
    {
        if (measurement_data[i].ble_connection_handle == conn)
   1e198:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e19c:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
   1e1a0:	4c09      	ldr	r4, [pc, #36]	; (1e1c8 <set_light_intensity_measurement_value+0x38>)
   1e1a2:	58a2      	ldr	r2, [r4, r2]
   1e1a4:	4282      	cmp	r2, r0
   1e1a6:	d003      	beq.n	1e1b0 <set_light_intensity_measurement_value+0x20>
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e1a8:	3301      	adds	r3, #1
   1e1aa:	2b13      	cmp	r3, #19
   1e1ac:	ddf4      	ble.n	1e198 <set_light_intensity_measurement_value+0x8>
   1e1ae:	e009      	b.n	1e1c4 <set_light_intensity_measurement_value+0x34>
        {
            measurement_data[i].light_measurement = light_intensity;
   1e1b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e1b4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1e1b8:	4423      	add	r3, r4
   1e1ba:	f8c3 1021 	str.w	r1, [r3, #33]	; 0x21
   1e1be:	4803      	ldr	r0, [pc, #12]	; (1e1cc <set_light_intensity_measurement_value+0x3c>)
   1e1c0:	f012 f854 	bl	3026c <z_impl_k_sem_give>
            k_sem_give(&read_response_sem);
            break;
        }
    }
}
   1e1c4:	bd10      	pop	{r4, pc}
   1e1c6:	4770      	bx	lr
   1e1c8:	200072c4 	.word	0x200072c4
   1e1cc:	20007268 	.word	0x20007268

0001e1d0 <set_configuration_id_value>:
 * @param conn Ble connection handle
 * @param configuration_id Configuration id
 */
void set_configuration_id_value(struct bt_conn *conn, uint8_t configuration_id)
{
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e1d0:	2300      	movs	r3, #0
   1e1d2:	2b13      	cmp	r3, #19
   1e1d4:	dc36      	bgt.n	1e244 <set_configuration_id_value+0x74>
{
   1e1d6:	b510      	push	{r4, lr}
    {
        if (measurement_data[i].ble_connection_handle == conn)
   1e1d8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e1dc:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
   1e1e0:	4c19      	ldr	r4, [pc, #100]	; (1e248 <set_configuration_id_value+0x78>)
   1e1e2:	58a2      	ldr	r2, [r4, r2]
   1e1e4:	4282      	cmp	r2, r0
   1e1e6:	d003      	beq.n	1e1f0 <set_configuration_id_value+0x20>
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e1e8:	3301      	adds	r3, #1
   1e1ea:	2b13      	cmp	r3, #19
   1e1ec:	ddf4      	ble.n	1e1d8 <set_configuration_id_value+0x8>
   1e1ee:	e017      	b.n	1e220 <set_configuration_id_value+0x50>
        {
            measurement_data[i].row_id = configuration_id;
   1e1f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e1f4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1e1f8:	4423      	add	r3, r4
   1e1fa:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
            if (configuration_id > 0 && configuration_id <= MAX_CONFIGURATION_ID)
   1e1fe:	1e4b      	subs	r3, r1, #1
   1e200:	b2db      	uxtb	r3, r3
   1e202:	2b04      	cmp	r3, #4
   1e204:	d80d      	bhi.n	1e222 <set_configuration_id_value+0x52>
            {
                // Set row to registered
                mean_row_measurements[configuration_id - 1].is_row_registered = true;
   1e206:	1e4b      	subs	r3, r1, #1
   1e208:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1e20c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1e210:	4a0e      	ldr	r2, [pc, #56]	; (1e24c <set_configuration_id_value+0x7c>)
   1e212:	4413      	add	r3, r2
   1e214:	2201      	movs	r2, #1
   1e216:	72da      	strb	r2, [r3, #11]
                mean_row_measurements[configuration_id - 1].row_id = configuration_id;
   1e218:	7319      	strb	r1, [r3, #12]
   1e21a:	480d      	ldr	r0, [pc, #52]	; (1e250 <set_configuration_id_value+0x80>)
   1e21c:	f012 f826 	bl	3026c <z_impl_k_sem_give>

            k_sem_give(&read_response_sem);
            break;
        }
    }
}
   1e220:	bd10      	pop	{r4, pc}
   1e222:	4b0c      	ldr	r3, [pc, #48]	; (1e254 <set_configuration_id_value+0x84>)
   1e224:	4a0c      	ldr	r2, [pc, #48]	; (1e258 <set_configuration_id_value+0x88>)
   1e226:	1a9b      	subs	r3, r3, r2
   1e228:	08db      	lsrs	r3, r3, #3
                LOG_INF("Configuration id issue: %d", configuration_id);
   1e22a:	f04f 0200 	mov.w	r2, #0
   1e22e:	2003      	movs	r0, #3
   1e230:	f360 0202 	bfi	r2, r0, #0, #3
   1e234:	f36f 02c5 	bfc	r2, #3, #3
   1e238:	f363 128f 	bfi	r2, r3, #6, #10
   1e23c:	4807      	ldr	r0, [pc, #28]	; (1e25c <set_configuration_id_value+0x8c>)
   1e23e:	f002 f833 	bl	202a8 <log_1>
   1e242:	e7ea      	b.n	1e21a <set_configuration_id_value+0x4a>
   1e244:	4770      	bx	lr
   1e246:	bf00      	nop
   1e248:	200072c4 	.word	0x200072c4
   1e24c:	20007280 	.word	0x20007280
   1e250:	20007268 	.word	0x20007268
   1e254:	0003d26c 	.word	0x0003d26c
   1e258:	0003d1a4 	.word	0x0003d1a4
   1e25c:	0003d8a0 	.word	0x0003d8a0

0001e260 <set_battery_level_value>:
 * @param conn Ble connection handle
 * @param battery_level Battery level
 */
void set_battery_level_value(struct bt_conn *conn, uint8_t battery_level)
{
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e260:	2300      	movs	r3, #0
   1e262:	2b13      	cmp	r3, #19
   1e264:	dc17      	bgt.n	1e296 <set_battery_level_value+0x36>
{
   1e266:	b510      	push	{r4, lr}
    {
        if (measurement_data[i].ble_connection_handle == conn)
   1e268:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e26c:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
   1e270:	4c09      	ldr	r4, [pc, #36]	; (1e298 <set_battery_level_value+0x38>)
   1e272:	58a2      	ldr	r2, [r4, r2]
   1e274:	4282      	cmp	r2, r0
   1e276:	d003      	beq.n	1e280 <set_battery_level_value+0x20>
    for (int i = 0; i < BLE_MAX_CONNECTIONS; i++)
   1e278:	3301      	adds	r3, #1
   1e27a:	2b13      	cmp	r3, #19
   1e27c:	ddf4      	ble.n	1e268 <set_battery_level_value+0x8>
   1e27e:	e009      	b.n	1e294 <set_battery_level_value+0x34>
        {
            measurement_data[i].battery_level = battery_level;
   1e280:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e284:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1e288:	4423      	add	r3, r4
   1e28a:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
   1e28e:	4803      	ldr	r0, [pc, #12]	; (1e29c <set_battery_level_value+0x3c>)
   1e290:	f011 ffec 	bl	3026c <z_impl_k_sem_give>
            k_sem_give(&read_response_sem);
            break;
        }
    }
}
   1e294:	bd10      	pop	{r4, pc}
   1e296:	4770      	bx	lr
   1e298:	200072c4 	.word	0x200072c4
   1e29c:	20007268 	.word	0x20007268

0001e2a0 <measurements_and_device_data>:
 *
 * @return true if at least one measurement was taken, false if no measurements taken
 *         (false when no connected devices)
 */
bool measurements_and_device_data(void)
{
   1e2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int err;
    uint8_t measurement_taken = 0;
    // Take measurements from every connected sensor node
    for (int index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1e2a4:	2400      	movs	r4, #0
    uint8_t measurement_taken = 0;
   1e2a6:	4627      	mov	r7, r4
    for (int index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1e2a8:	e01c      	b.n	1e2e4 <measurements_and_device_data+0x44>
   1e2aa:	4b22      	ldr	r3, [pc, #136]	; (1e334 <measurements_and_device_data+0x94>)
   1e2ac:	4a22      	ldr	r2, [pc, #136]	; (1e338 <measurements_and_device_data+0x98>)
   1e2ae:	1a9b      	subs	r3, r3, r2
   1e2b0:	08db      	lsrs	r3, r3, #3
                // Reading every characteristic value from measurement service. (As measurement service gets bigger, we will not need to change this function)
                read_characteristic_wrapper(measurement_data[index].ble_connection_handle, char_index);
                err = k_sem_take(&read_response_sem, K_MSEC(1500));
                if(err != 0)
                {
                    LOG_INF("Error in characteristics read:%d", err);
   1e2b2:	2203      	movs	r2, #3
   1e2b4:	f362 0802 	bfi	r8, r2, #0, #3
   1e2b8:	f36f 08c5 	bfc	r8, #3, #3
   1e2bc:	f363 188f 	bfi	r8, r3, #6, #10
   1e2c0:	4642      	mov	r2, r8
   1e2c2:	481e      	ldr	r0, [pc, #120]	; (1e33c <measurements_and_device_data+0x9c>)
   1e2c4:	f001 fff0 	bl	202a8 <log_1>
                    measurement_data[index].ble_connection_handle = NULL;
   1e2c8:	481d      	ldr	r0, [pc, #116]	; (1e340 <measurements_and_device_data+0xa0>)
   1e2ca:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1e2ce:	ebc4 02c2 	rsb	r2, r4, r2, lsl #3
   1e2d2:	1881      	adds	r1, r0, r2
   1e2d4:	2300      	movs	r3, #0
   1e2d6:	5483      	strb	r3, [r0, r2]
   1e2d8:	704b      	strb	r3, [r1, #1]
   1e2da:	708b      	strb	r3, [r1, #2]
   1e2dc:	70cb      	strb	r3, [r1, #3]
                    // Measurement was invalid, so reduce measurement counter
                    measurement_taken--;
                    break;
   1e2de:	e000      	b.n	1e2e2 <measurements_and_device_data+0x42>
            measurement_taken++;
   1e2e0:	4637      	mov	r7, r6
    for (int index = 0; index < BLE_MAX_CONNECTIONS; index++)
   1e2e2:	3401      	adds	r4, #1
   1e2e4:	2c13      	cmp	r4, #19
   1e2e6:	dc20      	bgt.n	1e32a <measurements_and_device_data+0x8a>
        if (measurement_data[index].ble_connection_handle != NULL)
   1e2e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e2ec:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   1e2f0:	4a13      	ldr	r2, [pc, #76]	; (1e340 <measurements_and_device_data+0xa0>)
   1e2f2:	58d3      	ldr	r3, [r2, r3]
   1e2f4:	2b00      	cmp	r3, #0
   1e2f6:	d0f4      	beq.n	1e2e2 <measurements_and_device_data+0x42>
            measurement_taken++;
   1e2f8:	1c7e      	adds	r6, r7, #1
   1e2fa:	b2f6      	uxtb	r6, r6
            for (int char_index = 0; char_index < MEASUREMENT_SERVICE_CHARACTERISTIC_COUNT + CONFIGURE_SERVICE_CHARACTERISTIC_COUNT; char_index++)
   1e2fc:	2500      	movs	r5, #0
   1e2fe:	2d05      	cmp	r5, #5
   1e300:	dcee      	bgt.n	1e2e0 <measurements_and_device_data+0x40>
                read_characteristic_wrapper(measurement_data[index].ble_connection_handle, char_index);
   1e302:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e306:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   1e30a:	b2e9      	uxtb	r1, r5
   1e30c:	4a0c      	ldr	r2, [pc, #48]	; (1e340 <measurements_and_device_data+0xa0>)
   1e30e:	58d0      	ldr	r0, [r2, r3]
   1e310:	f7ff fb96 	bl	1da40 <read_characteristic_wrapper>
	return z_impl_k_sem_take(sem, timeout);
   1e314:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   1e318:	2300      	movs	r3, #0
   1e31a:	480a      	ldr	r0, [pc, #40]	; (1e344 <measurements_and_device_data+0xa4>)
   1e31c:	f011 ffce 	bl	302bc <z_impl_k_sem_take>
                if(err != 0)
   1e320:	4601      	mov	r1, r0
   1e322:	2800      	cmp	r0, #0
   1e324:	d1c1      	bne.n	1e2aa <measurements_and_device_data+0xa>
            for (int char_index = 0; char_index < MEASUREMENT_SERVICE_CHARACTERISTIC_COUNT + CONFIGURE_SERVICE_CHARACTERISTIC_COUNT; char_index++)
   1e326:	3501      	adds	r5, #1
   1e328:	e7e9      	b.n	1e2fe <measurements_and_device_data+0x5e>
            }
        }
    }

    return (measurement_taken > 0) ? true : false;
}
   1e32a:	1e38      	subs	r0, r7, #0
   1e32c:	bf18      	it	ne
   1e32e:	2001      	movne	r0, #1
   1e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e334:	0003d26c 	.word	0x0003d26c
   1e338:	0003d1a4 	.word	0x0003d1a4
   1e33c:	0003d8bc 	.word	0x0003d8bc
   1e340:	200072c4 	.word	0x200072c4
   1e344:	20007268 	.word	0x20007268

0001e348 <uart_cb>:
// --- static functions definitions --------------------------------------------
static void uart_cb(const struct device *x, void *user_data);

// --- static functions declarations -------------------------------------------
static void uart_cb(const struct device *x, void *user_data)
{
   1e348:	b538      	push	{r3, r4, r5, lr}
   1e34a:	4604      	mov	r4, r0
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1e34c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   1e34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e350:	b103      	cbz	r3, 1e354 <uart_cb+0xc>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   1e352:	4798      	blx	r3
	const struct uart_driver_api *api =
   1e354:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
   1e356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e358:	b113      	cbz	r3, 1e360 <uart_cb+0x18>
	return api->irq_rx_ready(dev);
   1e35a:	4620      	mov	r0, r4
   1e35c:	4798      	blx	r3
    static uint8_t message_length = RESET_VALUE;
    uart_irq_update(x);

    if (uart_irq_rx_ready(x))
   1e35e:	b1f0      	cbz	r0, 1e39e <uart_cb+0x56>
    {
        data_length += uart_fifo_read(x, &uart_buf[data_length], sizeof(uart_buf));
   1e360:	4b34      	ldr	r3, [pc, #208]	; (1e434 <uart_cb+0xec>)
   1e362:	681b      	ldr	r3, [r3, #0]
   1e364:	4934      	ldr	r1, [pc, #208]	; (1e438 <uart_cb+0xf0>)
   1e366:	4419      	add	r1, r3
	const struct uart_driver_api *api =
   1e368:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
   1e36a:	699b      	ldr	r3, [r3, #24]
   1e36c:	b1c3      	cbz	r3, 1e3a0 <uart_cb+0x58>
	return api->fifo_read(dev, rx_data, size);
   1e36e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e372:	4620      	mov	r0, r4
   1e374:	4798      	blx	r3
   1e376:	4b2f      	ldr	r3, [pc, #188]	; (1e434 <uart_cb+0xec>)
   1e378:	681a      	ldr	r2, [r3, #0]
   1e37a:	4410      	add	r0, r2
   1e37c:	6018      	str	r0, [r3, #0]
        // Evaluate message type
        if(data_length == 1)
   1e37e:	2801      	cmp	r0, #1
   1e380:	d011      	beq.n	1e3a6 <uart_cb+0x5e>
            }
        }

        // if the "message length" byte arrived and message_length is not configured
        // yet (message_length == 0), then store the message length value
        if(data_length >= SECOND_BYTE_ARRIVED && message_length == MESSAGE_LENGTH_UNCONFIGURED)
   1e382:	4b2c      	ldr	r3, [pc, #176]	; (1e434 <uart_cb+0xec>)
   1e384:	681b      	ldr	r3, [r3, #0]
   1e386:	2b01      	cmp	r3, #1
   1e388:	dd02      	ble.n	1e390 <uart_cb+0x48>
   1e38a:	4b2c      	ldr	r3, [pc, #176]	; (1e43c <uart_cb+0xf4>)
   1e38c:	781b      	ldrb	r3, [r3, #0]
   1e38e:	b363      	cbz	r3, 1e3ea <uart_cb+0xa2>
            message_length = uart_buf[MSG_LENGTH_POSITION];
            LOG_INF("Message length is: %d", message_length);
        }

        // If message_length is configured check for message end
        if(message_length != MESSAGE_LENGTH_UNCONFIGURED)
   1e390:	4b2a      	ldr	r3, [pc, #168]	; (1e43c <uart_cb+0xf4>)
   1e392:	781b      	ldrb	r3, [r3, #0]
   1e394:	b11b      	cbz	r3, 1e39e <uart_cb+0x56>
        {
            // reached the end of the message
            if(data_length == message_length)
   1e396:	4a27      	ldr	r2, [pc, #156]	; (1e434 <uart_cb+0xec>)
   1e398:	6812      	ldr	r2, [r2, #0]
   1e39a:	4293      	cmp	r3, r2
   1e39c:	d03a      	beq.n	1e414 <uart_cb+0xcc>
                message_length = RESET_VALUE;
                memset(uart_buf, RESET_VALUE, UART_BUFFER * sizeof(uint8_t));
            }
        }
    }
}
   1e39e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSYS;
   1e3a0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1e3a4:	e7e7      	b.n	1e376 <uart_cb+0x2e>
            if(!is_message_type_valid(uart_buf[MSG_TYPE_POSITION]))
   1e3a6:	4b24      	ldr	r3, [pc, #144]	; (1e438 <uart_cb+0xf0>)
   1e3a8:	7818      	ldrb	r0, [r3, #0]
   1e3aa:	f000 f911 	bl	1e5d0 <is_message_type_valid>
   1e3ae:	2800      	cmp	r0, #0
   1e3b0:	d1e7      	bne.n	1e382 <uart_cb+0x3a>
                data_length = RESET_VALUE;
   1e3b2:	2400      	movs	r4, #0
   1e3b4:	4b1f      	ldr	r3, [pc, #124]	; (1e434 <uart_cb+0xec>)
   1e3b6:	601c      	str	r4, [r3, #0]
                memset(uart_buf, RESET_VALUE, UART_BUFFER * sizeof(uint8_t));
   1e3b8:	4d1f      	ldr	r5, [pc, #124]	; (1e438 <uart_cb+0xf0>)
   1e3ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e3be:	4621      	mov	r1, r4
   1e3c0:	4628      	mov	r0, r5
   1e3c2:	f018 fcf3 	bl	36dac <memset>
   1e3c6:	4b1e      	ldr	r3, [pc, #120]	; (1e440 <uart_cb+0xf8>)
   1e3c8:	4a1e      	ldr	r2, [pc, #120]	; (1e444 <uart_cb+0xfc>)
   1e3ca:	1a9b      	subs	r3, r3, r2
   1e3cc:	08db      	lsrs	r3, r3, #3
                LOG_INF("Invalid message type: %d", uart_buf[MSG_TYPE_POSITION]);
   1e3ce:	f04f 0200 	mov.w	r2, #0
   1e3d2:	2103      	movs	r1, #3
   1e3d4:	f361 0202 	bfi	r2, r1, #0, #3
   1e3d8:	f364 02c5 	bfi	r2, r4, #3, #3
   1e3dc:	f363 128f 	bfi	r2, r3, #6, #10
   1e3e0:	7829      	ldrb	r1, [r5, #0]
   1e3e2:	4819      	ldr	r0, [pc, #100]	; (1e448 <uart_cb+0x100>)
   1e3e4:	f001 ff60 	bl	202a8 <log_1>
   1e3e8:	e7cb      	b.n	1e382 <uart_cb+0x3a>
            message_length = uart_buf[MSG_LENGTH_POSITION];
   1e3ea:	4b13      	ldr	r3, [pc, #76]	; (1e438 <uart_cb+0xf0>)
   1e3ec:	7859      	ldrb	r1, [r3, #1]
   1e3ee:	4b13      	ldr	r3, [pc, #76]	; (1e43c <uart_cb+0xf4>)
   1e3f0:	7019      	strb	r1, [r3, #0]
   1e3f2:	4b13      	ldr	r3, [pc, #76]	; (1e440 <uart_cb+0xf8>)
   1e3f4:	4a13      	ldr	r2, [pc, #76]	; (1e444 <uart_cb+0xfc>)
   1e3f6:	1a9b      	subs	r3, r3, r2
   1e3f8:	08db      	lsrs	r3, r3, #3
            LOG_INF("Message length is: %d", message_length);
   1e3fa:	f04f 0200 	mov.w	r2, #0
   1e3fe:	2003      	movs	r0, #3
   1e400:	f360 0202 	bfi	r2, r0, #0, #3
   1e404:	f36f 02c5 	bfc	r2, #3, #3
   1e408:	f363 128f 	bfi	r2, r3, #6, #10
   1e40c:	480f      	ldr	r0, [pc, #60]	; (1e44c <uart_cb+0x104>)
   1e40e:	f001 ff4b 	bl	202a8 <log_1>
   1e412:	e7bd      	b.n	1e390 <uart_cb+0x48>
                process_rx_message(uart_buf);
   1e414:	4c08      	ldr	r4, [pc, #32]	; (1e438 <uart_cb+0xf0>)
   1e416:	4620      	mov	r0, r4
   1e418:	f000 f876 	bl	1e508 <process_rx_message>
                data_length = RESET_VALUE;
   1e41c:	2100      	movs	r1, #0
   1e41e:	4b05      	ldr	r3, [pc, #20]	; (1e434 <uart_cb+0xec>)
   1e420:	6019      	str	r1, [r3, #0]
                message_length = RESET_VALUE;
   1e422:	4b06      	ldr	r3, [pc, #24]	; (1e43c <uart_cb+0xf4>)
   1e424:	7019      	strb	r1, [r3, #0]
                memset(uart_buf, RESET_VALUE, UART_BUFFER * sizeof(uint8_t));
   1e426:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e42a:	4620      	mov	r0, r4
   1e42c:	f018 fcbe 	bl	36dac <memset>
}
   1e430:	e7b5      	b.n	1e39e <uart_cb+0x56>
   1e432:	bf00      	nop
   1e434:	200075d0 	.word	0x200075d0
   1e438:	200075d4 	.word	0x200075d4
   1e43c:	2000da6d 	.word	0x2000da6d
   1e440:	0003d254 	.word	0x0003d254
   1e444:	0003d1a4 	.word	0x0003d1a4
   1e448:	0003d8e0 	.word	0x0003d8e0
   1e44c:	0003d8fc 	.word	0x0003d8fc

0001e450 <internal_uart_init>:
/**
 * @brief Initialize internal uart
 * 
 */
void internal_uart_init(void)
{
   1e450:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1e452:	4816      	ldr	r0, [pc, #88]	; (1e4ac <internal_uart_init+0x5c>)
   1e454:	f011 fac6 	bl	2f9e4 <z_impl_device_get_binding>
    // get uart device
    uart_dev = device_get_binding("UART_1");
   1e458:	4b15      	ldr	r3, [pc, #84]	; (1e4b0 <internal_uart_init+0x60>)
   1e45a:	6018      	str	r0, [r3, #0]

    // log in case of uart device error
    if (!uart_dev)
   1e45c:	b1a0      	cbz	r0, 1e488 <internal_uart_init+0x38>
    {
        LOG_INF("Could not get UART 1");
    }

    // Set uart interrupt cb function
    uart_irq_callback_set(uart_dev, uart_cb);
   1e45e:	4b14      	ldr	r3, [pc, #80]	; (1e4b0 <internal_uart_init+0x60>)
   1e460:	6818      	ldr	r0, [r3, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1e462:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1e464:	b123      	cbz	r3, 1e470 <internal_uart_init+0x20>
   1e466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e468:	b113      	cbz	r3, 1e470 <internal_uart_init+0x20>
		api->irq_callback_set(dev, cb, user_data);
   1e46a:	2200      	movs	r2, #0
   1e46c:	4911      	ldr	r1, [pc, #68]	; (1e4b4 <internal_uart_init+0x64>)
   1e46e:	4798      	blx	r3
    uart_irq_rx_enable(uart_dev);
   1e470:	4b0f      	ldr	r3, [pc, #60]	; (1e4b0 <internal_uart_init+0x60>)
   1e472:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   1e474:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   1e476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e478:	b103      	cbz	r3, 1e47c <internal_uart_init+0x2c>
		api->irq_rx_enable(dev);
   1e47a:	4798      	blx	r3
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e47c:	2201      	movs	r2, #1
   1e47e:	4611      	mov	r1, r2
   1e480:	480d      	ldr	r0, [pc, #52]	; (1e4b8 <internal_uart_init+0x68>)
   1e482:	f01d ffb4 	bl	3c3ee <z_impl_k_sem_init>
    // Init sem to lock send function
    k_sem_init(&uart_send_sem, 1, 1);
}
   1e486:	bd08      	pop	{r3, pc}
   1e488:	4b0c      	ldr	r3, [pc, #48]	; (1e4bc <internal_uart_init+0x6c>)
   1e48a:	4a0d      	ldr	r2, [pc, #52]	; (1e4c0 <internal_uart_init+0x70>)
   1e48c:	1a9b      	subs	r3, r3, r2
   1e48e:	08db      	lsrs	r3, r3, #3
        LOG_INF("Could not get UART 1");
   1e490:	f04f 0100 	mov.w	r1, #0
   1e494:	2203      	movs	r2, #3
   1e496:	f362 0102 	bfi	r1, r2, #0, #3
   1e49a:	f36f 01c5 	bfc	r1, #3, #3
   1e49e:	f363 118f 	bfi	r1, r3, #6, #10
   1e4a2:	4808      	ldr	r0, [pc, #32]	; (1e4c4 <internal_uart_init+0x74>)
   1e4a4:	f001 ffb6 	bl	20414 <log_0>
   1e4a8:	e7d9      	b.n	1e45e <internal_uart_init+0xe>
   1e4aa:	bf00      	nop
   1e4ac:	0003d914 	.word	0x0003d914
   1e4b0:	200079d4 	.word	0x200079d4
   1e4b4:	0001e349 	.word	0x0001e349
   1e4b8:	200079d8 	.word	0x200079d8
   1e4bc:	0003d254 	.word	0x0003d254
   1e4c0:	0003d1a4 	.word	0x0003d1a4
   1e4c4:	0003d91c 	.word	0x0003d91c

0001e4c8 <internal_uart_send_data>:
 * @param buf Buffer with data to send
 * @param size Size of buffer
 * @return int 
 */
int internal_uart_send_data(const uint8_t *buf, size_t size)
{
   1e4c8:	b570      	push	{r4, r5, r6, lr}
   1e4ca:	4606      	mov	r6, r0
   1e4cc:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   1e4ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   1e4d2:	2300      	movs	r3, #0
   1e4d4:	480a      	ldr	r0, [pc, #40]	; (1e500 <internal_uart_send_data+0x38>)
   1e4d6:	f011 fef1 	bl	302bc <z_impl_k_sem_take>
    k_sem_take(&uart_send_sem, K_MSEC(UART_SEND_SEM_TIMEOUT_MS));
    //printk("size of output_buffer: %d\n", size);
    if (size == 0)
   1e4da:	b10d      	cbz	r5, 1e4e0 <internal_uart_send_data+0x18>
        // Zero size
        return FAILURE;
    }

    // poll out the data
    for (int i = 0; i < size; i++)
   1e4dc:	2400      	movs	r4, #0
   1e4de:	e00b      	b.n	1e4f8 <internal_uart_send_data+0x30>
	z_impl_k_sem_give(sem);
   1e4e0:	4807      	ldr	r0, [pc, #28]	; (1e500 <internal_uart_send_data+0x38>)
   1e4e2:	f011 fec3 	bl	3026c <z_impl_k_sem_give>
        return FAILURE;
   1e4e6:	20ff      	movs	r0, #255	; 0xff
   1e4e8:	e009      	b.n	1e4fe <internal_uart_send_data+0x36>
    {
        uart_poll_out(uart_dev, buf[i]);
   1e4ea:	4b06      	ldr	r3, [pc, #24]	; (1e504 <internal_uart_send_data+0x3c>)
   1e4ec:	6818      	ldr	r0, [r3, #0]
   1e4ee:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
   1e4f0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1e4f2:	685b      	ldr	r3, [r3, #4]
   1e4f4:	4798      	blx	r3
    for (int i = 0; i < size; i++)
   1e4f6:	3401      	adds	r4, #1
   1e4f8:	42ac      	cmp	r4, r5
   1e4fa:	d3f6      	bcc.n	1e4ea <internal_uart_send_data+0x22>
    }

    return SUCCESS;
   1e4fc:	2000      	movs	r0, #0
   1e4fe:	bd70      	pop	{r4, r5, r6, pc}
   1e500:	200079d8 	.word	0x200079d8
   1e504:	200079d4 	.word	0x200079d4

0001e508 <process_rx_message>:
 * @brief Process internal uart received message based on the message type
 *
 * @param rx_buf buffer containing the message
 */
uint8_t process_rx_message(uint8_t *rx_buf)
{
   1e508:	b510      	push	{r4, lr}
   1e50a:	4604      	mov	r4, r0
    message_operation_result_t *p_msg_op_result;
    message_coap_row_control_user_data_t *p_msg_coap_row_control_user_data;
    message_coap_row_thresholds_user_data_t *p_msg_coap_row_thresholds_user_data;
    uint8_t ret = GENERIC_ERROR;

    switch (rx_buf[MSG_TYPE_POSITION])
   1e50c:	7803      	ldrb	r3, [r0, #0]
   1e50e:	2bb3      	cmp	r3, #179	; 0xb3
   1e510:	d02d      	beq.n	1e56e <process_rx_message+0x66>
   1e512:	2bfd      	cmp	r3, #253	; 0xfd
   1e514:	d057      	beq.n	1e5c6 <process_rx_message+0xbe>
   1e516:	2bb2      	cmp	r3, #178	; 0xb2
   1e518:	d001      	beq.n	1e51e <process_rx_message+0x16>
   1e51a:	20ff      	movs	r0, #255	; 0xff
    default:
        break;
    }

    return ret;
}
   1e51c:	bd10      	pop	{r4, pc}
        set_row_automatic_control(p_msg_coap_row_control_user_data->is_automatic_control, p_msg_coap_row_control_user_data->row_id - 1);
   1e51e:	f990 1002 	ldrsb.w	r1, [r0, #2]
   1e522:	3901      	subs	r1, #1
   1e524:	b2c9      	uxtb	r1, r1
   1e526:	78c0      	ldrb	r0, [r0, #3]
   1e528:	f000 fd34 	bl	1ef94 <set_row_automatic_control>
        set_row_fan_switch(p_msg_coap_row_control_user_data->is_fan_active, p_msg_coap_row_control_user_data->row_id - 1);
   1e52c:	f994 1002 	ldrsb.w	r1, [r4, #2]
   1e530:	3901      	subs	r1, #1
   1e532:	b2c9      	uxtb	r1, r1
   1e534:	79a0      	ldrb	r0, [r4, #6]
   1e536:	f000 fc99 	bl	1ee6c <set_row_fan_switch>
        set_row_light_switch(p_msg_coap_row_control_user_data->is_light_on, p_msg_coap_row_control_user_data->row_id - 1);
   1e53a:	f994 1002 	ldrsb.w	r1, [r4, #2]
   1e53e:	3901      	subs	r1, #1
   1e540:	b2c9      	uxtb	r1, r1
   1e542:	7920      	ldrb	r0, [r4, #4]
   1e544:	f000 fcdc 	bl	1ef00 <set_row_light_switch>
        set_row_water_switch(p_msg_coap_row_control_user_data->is_water_on, p_msg_coap_row_control_user_data->row_id - 1);
   1e548:	f994 1002 	ldrsb.w	r1, [r4, #2]
   1e54c:	3901      	subs	r1, #1
   1e54e:	b2c9      	uxtb	r1, r1
   1e550:	7960      	ldrb	r0, [r4, #5]
   1e552:	f000 fc41 	bl	1edd8 <set_row_water_switch>
	z_impl_k_event_post(event, events);
   1e556:	2102      	movs	r1, #2
   1e558:	481c      	ldr	r0, [pc, #112]	; (1e5cc <process_rx_message+0xc4>)
   1e55a:	f01e fc38 	bl	3cdce <z_impl_k_event_post>
        update_row_control_config_params_in_nvs(p_msg_coap_row_control_user_data->row_id - 1);
   1e55e:	f994 0002 	ldrsb.w	r0, [r4, #2]
   1e562:	3801      	subs	r0, #1
   1e564:	b2c0      	uxtb	r0, r0
   1e566:	f000 fd97 	bl	1f098 <update_row_control_config_params_in_nvs>
        ret = SUCCESS;
   1e56a:	2000      	movs	r0, #0
        break;
   1e56c:	e7d6      	b.n	1e51c <process_rx_message+0x14>
        set_row_hum_threshold(p_msg_coap_row_thresholds_user_data->humidity_threshold, p_msg_coap_row_thresholds_user_data->row_id - 1);
   1e56e:	f990 1002 	ldrsb.w	r1, [r0, #2]
   1e572:	3901      	subs	r1, #1
   1e574:	b2c9      	uxtb	r1, r1
   1e576:	f8b0 0005 	ldrh.w	r0, [r0, #5]
   1e57a:	f000 fb75 	bl	1ec68 <set_row_hum_threshold>
        set_row_temp_threshold(p_msg_coap_row_thresholds_user_data->temp_threshold, p_msg_coap_row_thresholds_user_data->row_id - 1);
   1e57e:	f994 1002 	ldrsb.w	r1, [r4, #2]
   1e582:	3901      	subs	r1, #1
   1e584:	b2c9      	uxtb	r1, r1
   1e586:	f9b4 0003 	ldrsh.w	r0, [r4, #3]
   1e58a:	f000 fb23 	bl	1ebd4 <set_row_temp_threshold>
        set_row_soil_moisture_threshold(p_msg_coap_row_thresholds_user_data->soil_moisture_threshold, p_msg_coap_row_thresholds_user_data->row_id - 1);
   1e58e:	f994 1002 	ldrsb.w	r1, [r4, #2]
   1e592:	3901      	subs	r1, #1
   1e594:	b2c9      	uxtb	r1, r1
   1e596:	f8b4 0009 	ldrh.w	r0, [r4, #9]
   1e59a:	f000 fbd3 	bl	1ed44 <set_row_soil_moisture_threshold>
        set_row_light_threshold(p_msg_coap_row_thresholds_user_data->light_threshold, p_msg_coap_row_thresholds_user_data->row_id - 1);
   1e59e:	f994 1002 	ldrsb.w	r1, [r4, #2]
   1e5a2:	3901      	subs	r1, #1
   1e5a4:	b2c9      	uxtb	r1, r1
   1e5a6:	f8b4 0007 	ldrh.w	r0, [r4, #7]
   1e5aa:	f000 fba7 	bl	1ecfc <set_row_light_threshold>
   1e5ae:	2102      	movs	r1, #2
   1e5b0:	4806      	ldr	r0, [pc, #24]	; (1e5cc <process_rx_message+0xc4>)
   1e5b2:	f01e fc0c 	bl	3cdce <z_impl_k_event_post>
        update_row_control_config_params_in_nvs(p_msg_coap_row_thresholds_user_data->row_id - 1);
   1e5b6:	f994 0002 	ldrsb.w	r0, [r4, #2]
   1e5ba:	3801      	subs	r0, #1
   1e5bc:	b2c0      	uxtb	r0, r0
   1e5be:	f000 fd6b 	bl	1f098 <update_row_control_config_params_in_nvs>
        ret = SUCCESS;
   1e5c2:	2000      	movs	r0, #0
        break;
   1e5c4:	e7aa      	b.n	1e51c <process_rx_message+0x14>
        ret = SUCCESS;
   1e5c6:	2000      	movs	r0, #0
   1e5c8:	e7a8      	b.n	1e51c <process_rx_message+0x14>
   1e5ca:	bf00      	nop
   1e5cc:	20007a24 	.word	0x20007a24

0001e5d0 <is_message_type_valid>:
bool is_message_type_valid(uint8_t type)
{
    bool ret;

    // Check if message type is valid
    switch (type)
   1e5d0:	28b3      	cmp	r0, #179	; 0xb3
   1e5d2:	d917      	bls.n	1e604 <is_message_type_valid+0x34>
   1e5d4:	28fd      	cmp	r0, #253	; 0xfd
   1e5d6:	d121      	bne.n	1e61c <is_message_type_valid+0x4c>
{
   1e5d8:	b508      	push	{r3, lr}
   1e5da:	4b11      	ldr	r3, [pc, #68]	; (1e620 <is_message_type_valid+0x50>)
   1e5dc:	4a11      	ldr	r2, [pc, #68]	; (1e624 <is_message_type_valid+0x54>)
   1e5de:	1a9b      	subs	r3, r3, r2
   1e5e0:	08db      	lsrs	r3, r3, #3
        break;
    case MESSAGE_OPERATION_RESULT:
        ret = true;
        // Receiving operation result message, means we can go on with next send
        // Todo, parse operation result message for errors and handle/log them
        LOG_INF("Received op result msg from 9160");
   1e5e2:	f04f 0100 	mov.w	r1, #0
   1e5e6:	2203      	movs	r2, #3
   1e5e8:	f362 0102 	bfi	r1, r2, #0, #3
   1e5ec:	f36f 01c5 	bfc	r1, #3, #3
   1e5f0:	f363 118f 	bfi	r1, r3, #6, #10
   1e5f4:	480c      	ldr	r0, [pc, #48]	; (1e628 <is_message_type_valid+0x58>)
   1e5f6:	f001 ff0d 	bl	20414 <log_0>
	z_impl_k_sem_give(sem);
   1e5fa:	480c      	ldr	r0, [pc, #48]	; (1e62c <is_message_type_valid+0x5c>)
   1e5fc:	f011 fe36 	bl	3026c <z_impl_k_sem_give>
        ret = true;
   1e600:	2001      	movs	r0, #1
        ret = false;
        break;
    }

    return ret;
   1e602:	bd08      	pop	{r3, pc}
    switch (type)
   1e604:	28b2      	cmp	r0, #178	; 0xb2
   1e606:	d205      	bcs.n	1e614 <is_message_type_valid+0x44>
   1e608:	305f      	adds	r0, #95	; 0x5f
   1e60a:	b2c0      	uxtb	r0, r0
   1e60c:	2801      	cmp	r0, #1
   1e60e:	d903      	bls.n	1e618 <is_message_type_valid+0x48>
        ret = false;
   1e610:	2000      	movs	r0, #0
   1e612:	4770      	bx	lr
    switch (type)
   1e614:	2001      	movs	r0, #1
   1e616:	4770      	bx	lr
   1e618:	2001      	movs	r0, #1
   1e61a:	4770      	bx	lr
        ret = false;
   1e61c:	2000      	movs	r0, #0
   1e61e:	4770      	bx	lr
   1e620:	0003d254 	.word	0x0003d254
   1e624:	0003d1a4 	.word	0x0003d1a4
   1e628:	0003d944 	.word	0x0003d944
   1e62c:	200079d8 	.word	0x200079d8

0001e630 <watchdog_thread>:
 *        some other thread has stuck. Watchdog won't be fed and
 *        thus a reset will be triggered.
 *
 */
static void watchdog_thread(void)
{
   1e630:	b508      	push	{r3, lr}
 */
__syscall int wdt_feed(const struct device *dev, int channel_id);

static inline int z_impl_wdt_feed(const struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
   1e632:	4805      	ldr	r0, [pc, #20]	; (1e648 <watchdog_thread+0x18>)
   1e634:	6883      	ldr	r3, [r0, #8]
		(const struct wdt_driver_api *)dev->api;

	return api->feed(dev, channel_id);
   1e636:	68db      	ldr	r3, [r3, #12]
   1e638:	2100      	movs	r1, #0
   1e63a:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   1e63c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1e640:	2100      	movs	r1, #0
   1e642:	f012 fbe7 	bl	30e14 <z_impl_k_sleep>

    if (hw_wdt_dev)
    {
        while (1)
   1e646:	e7f4      	b.n	1e632 <watchdog_thread+0x2>
   1e648:	0003cf40 	.word	0x0003cf40

0001e64c <init_watchdog>:
/**
 * @brief Watchdog initialization function
 *
 */
void init_watchdog(void)
{
   1e64c:	b538      	push	{r3, r4, r5, lr}
	const struct wdt_driver_api *api =
   1e64e:	4c07      	ldr	r4, [pc, #28]	; (1e66c <init_watchdog+0x20>)
   1e650:	68a5      	ldr	r5, [r4, #8]
	return api->install_timeout(dev, cfg);
   1e652:	68ab      	ldr	r3, [r5, #8]
   1e654:	4906      	ldr	r1, [pc, #24]	; (1e670 <init_watchdog+0x24>)
   1e656:	4620      	mov	r0, r4
   1e658:	4798      	blx	r3
	return api->setup(dev, options);
   1e65a:	682b      	ldr	r3, [r5, #0]
   1e65c:	2102      	movs	r1, #2
   1e65e:	4620      	mov	r0, r4
   1e660:	4798      	blx	r3
	return api->feed(dev, channel_id);
   1e662:	68eb      	ldr	r3, [r5, #12]
   1e664:	2100      	movs	r1, #0
   1e666:	4620      	mov	r0, r4
   1e668:	4798      	blx	r3
    }
    else
    {
        LOG_ERR("Watchdog initialization failed!");
    }
}
   1e66a:	bd38      	pop	{r3, r4, r5, pc}
   1e66c:	0003cf40 	.word	0x0003cf40
   1e670:	0003d980 	.word	0x0003d980

0001e674 <flash_system_init>:
static struct nvs_fs fs;
static const struct device *flash_dev;

// --- functions definitions ---------------------------------------------------
void flash_system_init(void)
{
   1e674:	b500      	push	{lr}
   1e676:	b085      	sub	sp, #20
   1e678:	482a      	ldr	r0, [pc, #168]	; (1e724 <flash_system_init+0xb0>)
   1e67a:	f011 f9b3 	bl	2f9e4 <z_impl_device_get_binding>
    int err = 0;
    struct flash_pages_info info;

    flash_dev = FLASH_AREA_DEVICE(STORAGE_NODE_LABEL);
   1e67e:	4b2a      	ldr	r3, [pc, #168]	; (1e728 <flash_system_init+0xb4>)
   1e680:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1e682:	f01d fc97 	bl	3bfb4 <z_device_ready>
   1e686:	b1b8      	cbz	r0, 1e6b8 <flash_system_init+0x44>
    {
        LOG_INF("Flash device %s is not ready\n", flash_dev->name);
        return;
    }

	fs.offset = FLASH_AREA_OFFSET(storage);
   1e688:	f44f 217a 	mov.w	r1, #1024000	; 0xfa000
   1e68c:	4b27      	ldr	r3, [pc, #156]	; (1e72c <flash_system_init+0xb8>)
   1e68e:	6019      	str	r1, [r3, #0]
	err = flash_get_page_info_by_offs(flash_dev, fs.offset, &info);
   1e690:	4b25      	ldr	r3, [pc, #148]	; (1e728 <flash_system_init+0xb4>)
   1e692:	6818      	ldr	r0, [r3, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   1e694:	aa01      	add	r2, sp, #4
   1e696:	f01c fceb 	bl	3b070 <z_impl_flash_get_page_info_by_offs>
	if (err) {
   1e69a:	bb08      	cbnz	r0, 1e6e0 <flash_system_init+0x6c>
		LOG_INF("Unable to get page info\n");
		return;
	}
    fs.sector_size = info.size;
   1e69c:	4823      	ldr	r0, [pc, #140]	; (1e72c <flash_system_init+0xb8>)
   1e69e:	9b02      	ldr	r3, [sp, #8]
   1e6a0:	8183      	strh	r3, [r0, #12]
    fs.sector_count = 3U;
   1e6a2:	2303      	movs	r3, #3
   1e6a4:	81c3      	strh	r3, [r0, #14]

    err = nvs_init(&fs, flash_dev->name);
   1e6a6:	4b20      	ldr	r3, [pc, #128]	; (1e728 <flash_system_init+0xb4>)
   1e6a8:	681b      	ldr	r3, [r3, #0]
   1e6aa:	6819      	ldr	r1, [r3, #0]
   1e6ac:	f002 fb7a 	bl	20da4 <nvs_init>
    if (err) {
   1e6b0:	bb38      	cbnz	r0, 1e702 <flash_system_init+0x8e>
        LOG_INF("Flash Init failed\n");
        return;
    }
}
   1e6b2:	b005      	add	sp, #20
   1e6b4:	f85d fb04 	ldr.w	pc, [sp], #4
   1e6b8:	4b1d      	ldr	r3, [pc, #116]	; (1e730 <flash_system_init+0xbc>)
   1e6ba:	4a1e      	ldr	r2, [pc, #120]	; (1e734 <flash_system_init+0xc0>)
   1e6bc:	1a9b      	subs	r3, r3, r2
   1e6be:	08db      	lsrs	r3, r3, #3
        LOG_INF("Flash device %s is not ready\n", flash_dev->name);
   1e6c0:	f04f 0200 	mov.w	r2, #0
   1e6c4:	2103      	movs	r1, #3
   1e6c6:	f361 0202 	bfi	r2, r1, #0, #3
   1e6ca:	f36f 02c5 	bfc	r2, #3, #3
   1e6ce:	f363 128f 	bfi	r2, r3, #6, #10
   1e6d2:	4b15      	ldr	r3, [pc, #84]	; (1e728 <flash_system_init+0xb4>)
   1e6d4:	681b      	ldr	r3, [r3, #0]
   1e6d6:	6819      	ldr	r1, [r3, #0]
   1e6d8:	4817      	ldr	r0, [pc, #92]	; (1e738 <flash_system_init+0xc4>)
   1e6da:	f001 fde5 	bl	202a8 <log_1>
        return;
   1e6de:	e7e8      	b.n	1e6b2 <flash_system_init+0x3e>
   1e6e0:	4b13      	ldr	r3, [pc, #76]	; (1e730 <flash_system_init+0xbc>)
   1e6e2:	4a14      	ldr	r2, [pc, #80]	; (1e734 <flash_system_init+0xc0>)
   1e6e4:	1a9b      	subs	r3, r3, r2
   1e6e6:	08db      	lsrs	r3, r3, #3
		LOG_INF("Unable to get page info\n");
   1e6e8:	f04f 0100 	mov.w	r1, #0
   1e6ec:	2203      	movs	r2, #3
   1e6ee:	f362 0102 	bfi	r1, r2, #0, #3
   1e6f2:	f36f 01c5 	bfc	r1, #3, #3
   1e6f6:	f363 118f 	bfi	r1, r3, #6, #10
   1e6fa:	4810      	ldr	r0, [pc, #64]	; (1e73c <flash_system_init+0xc8>)
   1e6fc:	f001 fe8a 	bl	20414 <log_0>
		return;
   1e700:	e7d7      	b.n	1e6b2 <flash_system_init+0x3e>
   1e702:	4b0b      	ldr	r3, [pc, #44]	; (1e730 <flash_system_init+0xbc>)
   1e704:	4a0b      	ldr	r2, [pc, #44]	; (1e734 <flash_system_init+0xc0>)
   1e706:	1a9b      	subs	r3, r3, r2
   1e708:	08db      	lsrs	r3, r3, #3
        LOG_INF("Flash Init failed\n");
   1e70a:	f04f 0100 	mov.w	r1, #0
   1e70e:	2203      	movs	r2, #3
   1e710:	f362 0102 	bfi	r1, r2, #0, #3
   1e714:	f36f 01c5 	bfc	r1, #3, #3
   1e718:	f363 118f 	bfi	r1, r3, #6, #10
   1e71c:	4808      	ldr	r0, [pc, #32]	; (1e740 <flash_system_init+0xcc>)
   1e71e:	f001 fe79 	bl	20414 <log_0>
        return;
   1e722:	e7c6      	b.n	1e6b2 <flash_system_init+0x3e>
   1e724:	0003d990 	.word	0x0003d990
   1e728:	200079f0 	.word	0x200079f0
   1e72c:	200079f4 	.word	0x200079f4
   1e730:	0003d244 	.word	0x0003d244
   1e734:	0003d1a4 	.word	0x0003d1a4
   1e738:	0003d9a4 	.word	0x0003d9a4
   1e73c:	0003d9c4 	.word	0x0003d9c4
   1e740:	0003d9e0 	.word	0x0003d9e0

0001e744 <get_file_system_handle>:

// File system handle getter
struct nvs_fs* get_file_system_handle(void)
{
    return &fs;
   1e744:	4800      	ldr	r0, [pc, #0]	; (1e748 <get_file_system_handle+0x4>)
   1e746:	4770      	bx	lr
   1e748:	200079f4 	.word	0x200079f4

0001e74c <env_control_fsm>:
    events = k_event_wait(&env_control_event, ENV_CONTROL_MEASUREMENTS_TAKEN_EVT | ENV_CONTROL_USER_REQUEST_EVENT, true, K_FOREVER);
    smf_set_state(SMF_CTX(&env_control_fsm_user_object), &env_control_states[ENV_CONTROL]);
}

void env_control_fsm(void)
{
   1e74c:	b508      	push	{r3, lr}
    int32_t ret;

    // Set initial state
    smf_set_initial(SMF_CTX(&env_control_fsm_user_object), &env_control_states[ENV_CONTROL_INIT]);
   1e74e:	4905      	ldr	r1, [pc, #20]	; (1e764 <env_control_fsm+0x18>)
   1e750:	4805      	ldr	r0, [pc, #20]	; (1e768 <env_control_fsm+0x1c>)
   1e752:	f018 fb4b 	bl	36dec <smf_set_initial>

    // Run the state machine
    while (1)
    {
        // State machine terminates if a non-zero value is returned
        ret = smf_run_state(SMF_CTX(&env_control_fsm_user_object));
   1e756:	4804      	ldr	r0, [pc, #16]	; (1e768 <env_control_fsm+0x1c>)
   1e758:	f018 fb57 	bl	36e0a <smf_run_state>
        if (ret)
   1e75c:	2800      	cmp	r0, #0
   1e75e:	d0fa      	beq.n	1e756 <env_control_fsm+0xa>
        {
            // handle return code and terminate state machine
            break;
        }
    }
}
   1e760:	bd08      	pop	{r3, pc}
   1e762:	bf00      	nop
   1e764:	0003db58 	.word	0x0003db58
   1e768:	20007a30 	.word	0x20007a30

0001e76c <env_control_wfe_run>:
{
   1e76c:	b500      	push	{lr}
   1e76e:	b083      	sub	sp, #12
	return z_impl_k_event_wait(event, events, reset, timeout);
   1e770:	f04f 32ff 	mov.w	r2, #4294967295
   1e774:	f04f 33ff 	mov.w	r3, #4294967295
   1e778:	e9cd 2300 	strd	r2, r3, [sp]
   1e77c:	2201      	movs	r2, #1
   1e77e:	2103      	movs	r1, #3
   1e780:	4804      	ldr	r0, [pc, #16]	; (1e794 <env_control_wfe_run+0x28>)
   1e782:	f01e fb29 	bl	3cdd8 <z_impl_k_event_wait>
    smf_set_state(SMF_CTX(&env_control_fsm_user_object), &env_control_states[ENV_CONTROL]);
   1e786:	4904      	ldr	r1, [pc, #16]	; (1e798 <env_control_wfe_run+0x2c>)
   1e788:	4804      	ldr	r0, [pc, #16]	; (1e79c <env_control_wfe_run+0x30>)
   1e78a:	f004 fb37 	bl	22dfc <smf_set_state>
}
   1e78e:	b003      	add	sp, #12
   1e790:	f85d fb04 	ldr.w	pc, [sp], #4
   1e794:	20007a24 	.word	0x20007a24
   1e798:	0003db68 	.word	0x0003db68
   1e79c:	20007a30 	.word	0x20007a30

0001e7a0 <env_control_init_run>:
{
   1e7a0:	b508      	push	{r3, lr}
	z_impl_k_event_init(event);
   1e7a2:	4805      	ldr	r0, [pc, #20]	; (1e7b8 <env_control_init_run+0x18>)
   1e7a4:	f01e fb0e 	bl	3cdc4 <z_impl_k_event_init>
    initialize_row_control_configuration();
   1e7a8:	f000 f852 	bl	1e850 <initialize_row_control_configuration>
    smf_set_state(SMF_CTX(&env_control_fsm_user_object), &env_control_states[ENV_CONTROL_WFE]);
   1e7ac:	4903      	ldr	r1, [pc, #12]	; (1e7bc <env_control_init_run+0x1c>)
   1e7ae:	4804      	ldr	r0, [pc, #16]	; (1e7c0 <env_control_init_run+0x20>)
   1e7b0:	f004 fb24 	bl	22dfc <smf_set_state>
}
   1e7b4:	bd08      	pop	{r3, pc}
   1e7b6:	bf00      	nop
   1e7b8:	20007a24 	.word	0x20007a24
   1e7bc:	0003db78 	.word	0x0003db78
   1e7c0:	20007a30 	.word	0x20007a30

0001e7c4 <store_row_config_params_in_nvs>:
 *        It is triggered every time user updates those parameters
 *
 * @param row_id
 */
static void store_row_config_params_in_nvs(uint8_t row_id)
{
   1e7c4:	b510      	push	{r4, lr}
   1e7c6:	4604      	mov	r4, r0
    int err;

    err = nvs_write(get_file_system_handle(), row_id, &row_control_config[row_id].row_control, sizeof(row_control_config[row_id].row_control));
   1e7c8:	f7ff ffbc 	bl	1e744 <get_file_system_handle>
   1e7cc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1e7d0:	00d2      	lsls	r2, r2, #3
   1e7d2:	3210      	adds	r2, #16
   1e7d4:	4b15      	ldr	r3, [pc, #84]	; (1e82c <store_row_config_params_in_nvs+0x68>)
   1e7d6:	441a      	add	r2, r3
   1e7d8:	2314      	movs	r3, #20
   1e7da:	3204      	adds	r2, #4
   1e7dc:	4621      	mov	r1, r4
   1e7de:	f002 fbd3 	bl	20f88 <nvs_write>
    if (err < 0)
   1e7e2:	1e01      	subs	r1, r0, #0
   1e7e4:	db11      	blt.n	1e80a <store_row_config_params_in_nvs+0x46>
   1e7e6:	4b12      	ldr	r3, [pc, #72]	; (1e830 <store_row_config_params_in_nvs+0x6c>)
   1e7e8:	4a12      	ldr	r2, [pc, #72]	; (1e834 <store_row_config_params_in_nvs+0x70>)
   1e7ea:	1a9b      	subs	r3, r3, r2
   1e7ec:	08db      	lsrs	r3, r3, #3
    {
        LOG_INF("NVS write failed (err: %d)", err);
    }
    else
    {
        LOG_INF("Stored row config params for row id: %d", row_id + 1);
   1e7ee:	f04f 0200 	mov.w	r2, #0
   1e7f2:	2103      	movs	r1, #3
   1e7f4:	f361 0202 	bfi	r2, r1, #0, #3
   1e7f8:	f36f 02c5 	bfc	r2, #3, #3
   1e7fc:	f363 128f 	bfi	r2, r3, #6, #10
   1e800:	1c61      	adds	r1, r4, #1
   1e802:	480d      	ldr	r0, [pc, #52]	; (1e838 <store_row_config_params_in_nvs+0x74>)
   1e804:	f001 fd50 	bl	202a8 <log_1>
    }
}
   1e808:	bd10      	pop	{r4, pc}
   1e80a:	4b09      	ldr	r3, [pc, #36]	; (1e830 <store_row_config_params_in_nvs+0x6c>)
   1e80c:	4a09      	ldr	r2, [pc, #36]	; (1e834 <store_row_config_params_in_nvs+0x70>)
   1e80e:	1a9b      	subs	r3, r3, r2
   1e810:	08db      	lsrs	r3, r3, #3
        LOG_INF("NVS write failed (err: %d)", err);
   1e812:	f04f 0200 	mov.w	r2, #0
   1e816:	2003      	movs	r0, #3
   1e818:	f360 0202 	bfi	r2, r0, #0, #3
   1e81c:	f36f 02c5 	bfc	r2, #3, #3
   1e820:	f363 128f 	bfi	r2, r3, #6, #10
   1e824:	4805      	ldr	r0, [pc, #20]	; (1e83c <store_row_config_params_in_nvs+0x78>)
   1e826:	f001 fd3f 	bl	202a8 <log_1>
   1e82a:	e7ed      	b.n	1e808 <store_row_config_params_in_nvs+0x44>
   1e82c:	20007a40 	.word	0x20007a40
   1e830:	0003d224 	.word	0x0003d224
   1e834:	0003d1a4 	.word	0x0003d1a4
   1e838:	0003dba4 	.word	0x0003dba4
   1e83c:	0003db88 	.word	0x0003db88

0001e840 <store_row_config_params_handler>:
{
   1e840:	b508      	push	{r3, lr}
    store_row_config_params_in_nvs(row_id_params_changed);
   1e842:	4b02      	ldr	r3, [pc, #8]	; (1e84c <store_row_config_params_handler+0xc>)
   1e844:	7818      	ldrb	r0, [r3, #0]
   1e846:	f7ff ffbd 	bl	1e7c4 <store_row_config_params_in_nvs>
}
   1e84a:	bd08      	pop	{r3, pc}
   1e84c:	2000da6e 	.word	0x2000da6e

0001e850 <initialize_row_control_configuration>:
 *        row_control_config[].row_control is stored in flash. those are the parameters
 *        set by the user in order to control each row
 *
 */
void initialize_row_control_configuration(void)
{
   1e850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e854:	b087      	sub	sp, #28
    int err;
    row_control_t row_control_config_params;
    // Initialize work item to store new row config params in flash
    k_work_init(&store_row_config_params_work, store_row_config_params_handler);
   1e856:	493a      	ldr	r1, [pc, #232]	; (1e940 <initialize_row_control_configuration+0xf0>)
   1e858:	483a      	ldr	r0, [pc, #232]	; (1e944 <initialize_row_control_configuration+0xf4>)
   1e85a:	f01d fe51 	bl	3c500 <k_work_init>
    // Check if default row control parameters exist already in flash
    for (int row_id = 0; row_id < MAX_CONFIGURATION_ID; row_id++)
   1e85e:	2400      	movs	r4, #0
   1e860:	e029      	b.n	1e8b6 <initialize_row_control_configuration+0x66>
            }
        }
        else
        {
            // Load row config params from flash
            memcpy(&row_control_config[row_id].row_control, &row_control_config_params, sizeof(row_control_config_params));
   1e862:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1e866:	00c0      	lsls	r0, r0, #3
   1e868:	3010      	adds	r0, #16
   1e86a:	4b37      	ldr	r3, [pc, #220]	; (1e948 <initialize_row_control_configuration+0xf8>)
   1e86c:	4418      	add	r0, r3
   1e86e:	2214      	movs	r2, #20
   1e870:	a901      	add	r1, sp, #4
   1e872:	3004      	adds	r0, #4
   1e874:	f018 fa76 	bl	36d64 <memcpy>
   1e878:	4b34      	ldr	r3, [pc, #208]	; (1e94c <initialize_row_control_configuration+0xfc>)
   1e87a:	4a35      	ldr	r2, [pc, #212]	; (1e950 <initialize_row_control_configuration+0x100>)
   1e87c:	1a9b      	subs	r3, r3, r2
   1e87e:	08db      	lsrs	r3, r3, #3
            LOG_INF("Loaded default row control config params from flash, row_id = %d", row_id + 1);
   1e880:	2203      	movs	r2, #3
   1e882:	f362 0602 	bfi	r6, r2, #0, #3
   1e886:	f36f 06c5 	bfc	r6, #3, #3
   1e88a:	f363 168f 	bfi	r6, r3, #6, #10
   1e88e:	4632      	mov	r2, r6
   1e890:	1c61      	adds	r1, r4, #1
   1e892:	4830      	ldr	r0, [pc, #192]	; (1e954 <initialize_row_control_configuration+0x104>)
   1e894:	f001 fd08 	bl	202a8 <log_1>
        }
        // Row id gets values from 1 to MAX_CONFIGURATION_ID
        row_control_config[row_id].row_id = row_id + 1;
   1e898:	1c62      	adds	r2, r4, #1
   1e89a:	492b      	ldr	r1, [pc, #172]	; (1e948 <initialize_row_control_configuration+0xf8>)
   1e89c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e8a0:	00d8      	lsls	r0, r3, #3
   1e8a2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1e8a6:	741a      	strb	r2, [r3, #16]
        row_control_config[row_id].row_hum = 0;
   1e8a8:	2200      	movs	r2, #0
   1e8aa:	605a      	str	r2, [r3, #4]
        row_control_config[row_id].row_light_exposure = 0;
   1e8ac:	60da      	str	r2, [r3, #12]
        row_control_config[row_id].row_soil_moisture = 0;
   1e8ae:	609a      	str	r2, [r3, #8]
        row_control_config[row_id].row_temp = 0;
   1e8b0:	500a      	str	r2, [r1, r0]
        // By default, no registered row. This flag will be set to true if a measurement
        // is taken from a sensor node existing on the corresponding row id
        row_control_config[row_id].row_registered = false;
   1e8b2:	745a      	strb	r2, [r3, #17]
    for (int row_id = 0; row_id < MAX_CONFIGURATION_ID; row_id++)
   1e8b4:	3401      	adds	r4, #1
   1e8b6:	2c04      	cmp	r4, #4
   1e8b8:	dc3f      	bgt.n	1e93a <initialize_row_control_configuration+0xea>
        if (nvs_read(get_file_system_handle(), row_id, &row_control_config_params, sizeof(row_control_config_params)) != sizeof(row_control_config_params))
   1e8ba:	f7ff ff43 	bl	1e744 <get_file_system_handle>
   1e8be:	fa1f f984 	uxth.w	r9, r4
   1e8c2:	2314      	movs	r3, #20
   1e8c4:	aa01      	add	r2, sp, #4
   1e8c6:	4649      	mov	r1, r9
   1e8c8:	f017 f8be 	bl	35a48 <nvs_read>
   1e8cc:	2814      	cmp	r0, #20
   1e8ce:	d0c8      	beq.n	1e862 <initialize_row_control_configuration+0x12>
            row_control_config[row_id].row_control.temp_threshold = DEFAULT_TEMPERATURE_THRESHOLD;
   1e8d0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1e948 <initialize_row_control_configuration+0xf8>
   1e8d4:	00a5      	lsls	r5, r4, #2
   1e8d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e8da:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1e8de:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
   1e8e2:	619a      	str	r2, [r3, #24]
            row_control_config[row_id].row_control.humidity_threshold = DEFAULT_HUMIDITY_THRESHOLD;
   1e8e4:	f641 3258 	movw	r2, #7000	; 0x1b58
   1e8e8:	61da      	str	r2, [r3, #28]
            row_control_config[row_id].row_control.light_threshold = DEFAULT_LIGHT_EXPOSURE_THRESHOLD;
   1e8ea:	2264      	movs	r2, #100	; 0x64
   1e8ec:	621a      	str	r2, [r3, #32]
            row_control_config[row_id].row_control.soil_moisture_threshold = DEFAULT_SOIL_MOISTURE_THRESHOLD;
   1e8ee:	f241 7270 	movw	r2, #6000	; 0x1770
   1e8f2:	625a      	str	r2, [r3, #36]	; 0x24
            row_control_config[row_id].row_control.fan_switch = false;
   1e8f4:	2200      	movs	r2, #0
   1e8f6:	751a      	strb	r2, [r3, #20]
            row_control_config[row_id].row_control.light_switch = false;
   1e8f8:	759a      	strb	r2, [r3, #22]
            row_control_config[row_id].row_control.water_switch = false;
   1e8fa:	755a      	strb	r2, [r3, #21]
            row_control_config[row_id].row_control.automatic_control = true;
   1e8fc:	2201      	movs	r2, #1
   1e8fe:	75da      	strb	r2, [r3, #23]
            err = nvs_write(get_file_system_handle(), row_id, &row_control_config[row_id].row_control, sizeof(row_control_config[row_id].row_control));
   1e900:	f7ff ff20 	bl	1e744 <get_file_system_handle>
   1e904:	192a      	adds	r2, r5, r4
   1e906:	00d2      	lsls	r2, r2, #3
   1e908:	3210      	adds	r2, #16
   1e90a:	4442      	add	r2, r8
   1e90c:	2314      	movs	r3, #20
   1e90e:	3204      	adds	r2, #4
   1e910:	4649      	mov	r1, r9
   1e912:	f002 fb39 	bl	20f88 <nvs_write>
            if (err < 0)
   1e916:	1e01      	subs	r1, r0, #0
   1e918:	dabe      	bge.n	1e898 <initialize_row_control_configuration+0x48>
   1e91a:	4b0c      	ldr	r3, [pc, #48]	; (1e94c <initialize_row_control_configuration+0xfc>)
   1e91c:	4a0c      	ldr	r2, [pc, #48]	; (1e950 <initialize_row_control_configuration+0x100>)
   1e91e:	1a9b      	subs	r3, r3, r2
   1e920:	08db      	lsrs	r3, r3, #3
                LOG_INF("NVS write failed (err: %d)", err);
   1e922:	2203      	movs	r2, #3
   1e924:	f362 0702 	bfi	r7, r2, #0, #3
   1e928:	f36f 07c5 	bfc	r7, #3, #3
   1e92c:	f363 178f 	bfi	r7, r3, #6, #10
   1e930:	463a      	mov	r2, r7
   1e932:	4809      	ldr	r0, [pc, #36]	; (1e958 <initialize_row_control_configuration+0x108>)
   1e934:	f001 fcb8 	bl	202a8 <log_1>
   1e938:	e7ae      	b.n	1e898 <initialize_row_control_configuration+0x48>
    }
}
   1e93a:	b007      	add	sp, #28
   1e93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e940:	0001e841 	.word	0x0001e841
   1e944:	20007b08 	.word	0x20007b08
   1e948:	20007a40 	.word	0x20007a40
   1e94c:	0003d224 	.word	0x0003d224
   1e950:	0003d1a4 	.word	0x0003d1a4
   1e954:	0003dbcc 	.word	0x0003dbcc
   1e958:	0003db88 	.word	0x0003db88

0001e95c <set_row_current_temperature>:
 * @param value temperature value
 * @param index This parameter is the indexing of row_control_config array,
 *               not the real row id
 */
void set_row_current_temperature(int32_t value, uint8_t index)
{
   1e95c:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1e95e:	2904      	cmp	r1, #4
   1e960:	d805      	bhi.n	1e96e <set_row_current_temperature+0x12>
    {
        row_control_config[index].row_temp = value;
   1e962:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1e966:	4b0a      	ldr	r3, [pc, #40]	; (1e990 <set_row_current_temperature+0x34>)
   1e968:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1e96c:	bd08      	pop	{r3, pc}
   1e96e:	4b09      	ldr	r3, [pc, #36]	; (1e994 <set_row_current_temperature+0x38>)
   1e970:	4a09      	ldr	r2, [pc, #36]	; (1e998 <set_row_current_temperature+0x3c>)
   1e972:	1a9b      	subs	r3, r3, r2
   1e974:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1e976:	f04f 0200 	mov.w	r2, #0
   1e97a:	2003      	movs	r0, #3
   1e97c:	f360 0202 	bfi	r2, r0, #0, #3
   1e980:	f36f 02c5 	bfc	r2, #3, #3
   1e984:	f363 128f 	bfi	r2, r3, #6, #10
   1e988:	4804      	ldr	r0, [pc, #16]	; (1e99c <set_row_current_temperature+0x40>)
   1e98a:	f001 fc8d 	bl	202a8 <log_1>
}
   1e98e:	e7ed      	b.n	1e96c <set_row_current_temperature+0x10>
   1e990:	20007a40 	.word	0x20007a40
   1e994:	0003d224 	.word	0x0003d224
   1e998:	0003d1a4 	.word	0x0003d1a4
   1e99c:	0003dc10 	.word	0x0003dc10

0001e9a0 <get_row_current_temperature>:
 *
 * @param index
 * @return int32_t
 */
int32_t get_row_current_temperature(uint8_t index)
{
   1e9a0:	b508      	push	{r3, lr}
   1e9a2:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1e9a4:	2804      	cmp	r0, #4
   1e9a6:	d80b      	bhi.n	1e9c0 <get_row_current_temperature+0x20>
    {
        // temperature is like 20.32 C -> 2032 we lose precision but its ok
        // TODO: fix the precision for all gets of this source file
        return row_control_config[index].row_temp / 100;
   1e9a8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1e9ac:	4b0d      	ldr	r3, [pc, #52]	; (1e9e4 <get_row_current_temperature+0x44>)
   1e9ae:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1e9b2:	4a0d      	ldr	r2, [pc, #52]	; (1e9e8 <get_row_current_temperature+0x48>)
   1e9b4:	fb82 1203 	smull	r1, r2, r2, r3
   1e9b8:	17d8      	asrs	r0, r3, #31
   1e9ba:	ebc0 1062 	rsb	r0, r0, r2, asr #5
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return 0;
}
   1e9be:	bd08      	pop	{r3, pc}
   1e9c0:	4b0a      	ldr	r3, [pc, #40]	; (1e9ec <get_row_current_temperature+0x4c>)
   1e9c2:	4a0b      	ldr	r2, [pc, #44]	; (1e9f0 <get_row_current_temperature+0x50>)
   1e9c4:	1a9b      	subs	r3, r3, r2
   1e9c6:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1e9c8:	f04f 0200 	mov.w	r2, #0
   1e9cc:	2003      	movs	r0, #3
   1e9ce:	f360 0202 	bfi	r2, r0, #0, #3
   1e9d2:	f36f 02c5 	bfc	r2, #3, #3
   1e9d6:	f363 128f 	bfi	r2, r3, #6, #10
   1e9da:	4806      	ldr	r0, [pc, #24]	; (1e9f4 <get_row_current_temperature+0x54>)
   1e9dc:	f001 fc64 	bl	202a8 <log_1>
    return 0;
   1e9e0:	2000      	movs	r0, #0
   1e9e2:	e7ec      	b.n	1e9be <get_row_current_temperature+0x1e>
   1e9e4:	20007a40 	.word	0x20007a40
   1e9e8:	51eb851f 	.word	0x51eb851f
   1e9ec:	0003d224 	.word	0x0003d224
   1e9f0:	0003d1a4 	.word	0x0003d1a4
   1e9f4:	0003dc10 	.word	0x0003dc10

0001e9f8 <set_row_current_humidity>:
 *
 * @param value
 * @param index
 */
void set_row_current_humidity(int32_t value, uint8_t index)
{
   1e9f8:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1e9fa:	2904      	cmp	r1, #4
   1e9fc:	d806      	bhi.n	1ea0c <set_row_current_humidity+0x14>
    {
        row_control_config[index].row_hum = value;
   1e9fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ea02:	4b0b      	ldr	r3, [pc, #44]	; (1ea30 <set_row_current_humidity+0x38>)
   1ea04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ea08:	6048      	str	r0, [r1, #4]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1ea0a:	bd08      	pop	{r3, pc}
   1ea0c:	4b09      	ldr	r3, [pc, #36]	; (1ea34 <set_row_current_humidity+0x3c>)
   1ea0e:	4a0a      	ldr	r2, [pc, #40]	; (1ea38 <set_row_current_humidity+0x40>)
   1ea10:	1a9b      	subs	r3, r3, r2
   1ea12:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ea14:	f04f 0200 	mov.w	r2, #0
   1ea18:	2003      	movs	r0, #3
   1ea1a:	f360 0202 	bfi	r2, r0, #0, #3
   1ea1e:	f36f 02c5 	bfc	r2, #3, #3
   1ea22:	f363 128f 	bfi	r2, r3, #6, #10
   1ea26:	4805      	ldr	r0, [pc, #20]	; (1ea3c <set_row_current_humidity+0x44>)
   1ea28:	f001 fc3e 	bl	202a8 <log_1>
}
   1ea2c:	e7ed      	b.n	1ea0a <set_row_current_humidity+0x12>
   1ea2e:	bf00      	nop
   1ea30:	20007a40 	.word	0x20007a40
   1ea34:	0003d224 	.word	0x0003d224
   1ea38:	0003d1a4 	.word	0x0003d1a4
   1ea3c:	0003dc10 	.word	0x0003dc10

0001ea40 <get_row_current_humidity>:
 *
 * @param index
 * @return int32_t
 */
int32_t get_row_current_humidity(uint8_t index)
{
   1ea40:	b508      	push	{r3, lr}
   1ea42:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1ea44:	2804      	cmp	r0, #4
   1ea46:	d80c      	bhi.n	1ea62 <get_row_current_humidity+0x22>
    {
        return row_control_config[index].row_hum  / 100;
   1ea48:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ea4c:	480e      	ldr	r0, [pc, #56]	; (1ea88 <get_row_current_humidity+0x48>)
   1ea4e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1ea52:	684b      	ldr	r3, [r1, #4]
   1ea54:	4a0d      	ldr	r2, [pc, #52]	; (1ea8c <get_row_current_humidity+0x4c>)
   1ea56:	fb82 1203 	smull	r1, r2, r2, r3
   1ea5a:	17d8      	asrs	r0, r3, #31
   1ea5c:	ebc0 1062 	rsb	r0, r0, r2, asr #5
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return 0;
}
   1ea60:	bd08      	pop	{r3, pc}
   1ea62:	4b0b      	ldr	r3, [pc, #44]	; (1ea90 <get_row_current_humidity+0x50>)
   1ea64:	4a0b      	ldr	r2, [pc, #44]	; (1ea94 <get_row_current_humidity+0x54>)
   1ea66:	1a9b      	subs	r3, r3, r2
   1ea68:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ea6a:	f04f 0200 	mov.w	r2, #0
   1ea6e:	2003      	movs	r0, #3
   1ea70:	f360 0202 	bfi	r2, r0, #0, #3
   1ea74:	f36f 02c5 	bfc	r2, #3, #3
   1ea78:	f363 128f 	bfi	r2, r3, #6, #10
   1ea7c:	4806      	ldr	r0, [pc, #24]	; (1ea98 <get_row_current_humidity+0x58>)
   1ea7e:	f001 fc13 	bl	202a8 <log_1>
    return 0;
   1ea82:	2000      	movs	r0, #0
   1ea84:	e7ec      	b.n	1ea60 <get_row_current_humidity+0x20>
   1ea86:	bf00      	nop
   1ea88:	20007a40 	.word	0x20007a40
   1ea8c:	51eb851f 	.word	0x51eb851f
   1ea90:	0003d224 	.word	0x0003d224
   1ea94:	0003d1a4 	.word	0x0003d1a4
   1ea98:	0003dc10 	.word	0x0003dc10

0001ea9c <set_row_current_soil_moisture>:
 *
 * @param value
 * @param index
 */
void set_row_current_soil_moisture(int32_t value, uint8_t index)
{
   1ea9c:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1ea9e:	2904      	cmp	r1, #4
   1eaa0:	d806      	bhi.n	1eab0 <set_row_current_soil_moisture+0x14>
    {
        row_control_config[index].row_soil_moisture = value;
   1eaa2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1eaa6:	4b0b      	ldr	r3, [pc, #44]	; (1ead4 <set_row_current_soil_moisture+0x38>)
   1eaa8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1eaac:	6088      	str	r0, [r1, #8]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1eaae:	bd08      	pop	{r3, pc}
   1eab0:	4b09      	ldr	r3, [pc, #36]	; (1ead8 <set_row_current_soil_moisture+0x3c>)
   1eab2:	4a0a      	ldr	r2, [pc, #40]	; (1eadc <set_row_current_soil_moisture+0x40>)
   1eab4:	1a9b      	subs	r3, r3, r2
   1eab6:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1eab8:	f04f 0200 	mov.w	r2, #0
   1eabc:	2003      	movs	r0, #3
   1eabe:	f360 0202 	bfi	r2, r0, #0, #3
   1eac2:	f36f 02c5 	bfc	r2, #3, #3
   1eac6:	f363 128f 	bfi	r2, r3, #6, #10
   1eaca:	4805      	ldr	r0, [pc, #20]	; (1eae0 <set_row_current_soil_moisture+0x44>)
   1eacc:	f001 fbec 	bl	202a8 <log_1>
}
   1ead0:	e7ed      	b.n	1eaae <set_row_current_soil_moisture+0x12>
   1ead2:	bf00      	nop
   1ead4:	20007a40 	.word	0x20007a40
   1ead8:	0003d224 	.word	0x0003d224
   1eadc:	0003d1a4 	.word	0x0003d1a4
   1eae0:	0003dc10 	.word	0x0003dc10

0001eae4 <get_row_current_soil_moisture>:
 *
 * @param index
 * @return int32_t
 */
int32_t get_row_current_soil_moisture(uint8_t index)
{
   1eae4:	b508      	push	{r3, lr}
   1eae6:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1eae8:	2804      	cmp	r0, #4
   1eaea:	d80c      	bhi.n	1eb06 <get_row_current_soil_moisture+0x22>
    {
        return row_control_config[index].row_soil_moisture / 100;
   1eaec:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1eaf0:	480e      	ldr	r0, [pc, #56]	; (1eb2c <get_row_current_soil_moisture+0x48>)
   1eaf2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1eaf6:	688b      	ldr	r3, [r1, #8]
   1eaf8:	4a0d      	ldr	r2, [pc, #52]	; (1eb30 <get_row_current_soil_moisture+0x4c>)
   1eafa:	fb82 1203 	smull	r1, r2, r2, r3
   1eafe:	17d8      	asrs	r0, r3, #31
   1eb00:	ebc0 1062 	rsb	r0, r0, r2, asr #5
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return 0;
}
   1eb04:	bd08      	pop	{r3, pc}
   1eb06:	4b0b      	ldr	r3, [pc, #44]	; (1eb34 <get_row_current_soil_moisture+0x50>)
   1eb08:	4a0b      	ldr	r2, [pc, #44]	; (1eb38 <get_row_current_soil_moisture+0x54>)
   1eb0a:	1a9b      	subs	r3, r3, r2
   1eb0c:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1eb0e:	f04f 0200 	mov.w	r2, #0
   1eb12:	2003      	movs	r0, #3
   1eb14:	f360 0202 	bfi	r2, r0, #0, #3
   1eb18:	f36f 02c5 	bfc	r2, #3, #3
   1eb1c:	f363 128f 	bfi	r2, r3, #6, #10
   1eb20:	4806      	ldr	r0, [pc, #24]	; (1eb3c <get_row_current_soil_moisture+0x58>)
   1eb22:	f001 fbc1 	bl	202a8 <log_1>
    return 0;
   1eb26:	2000      	movs	r0, #0
   1eb28:	e7ec      	b.n	1eb04 <get_row_current_soil_moisture+0x20>
   1eb2a:	bf00      	nop
   1eb2c:	20007a40 	.word	0x20007a40
   1eb30:	51eb851f 	.word	0x51eb851f
   1eb34:	0003d224 	.word	0x0003d224
   1eb38:	0003d1a4 	.word	0x0003d1a4
   1eb3c:	0003dc10 	.word	0x0003dc10

0001eb40 <set_row_current_light_exposure>:
 *
 * @param value
 * @param index
 */
void set_row_current_light_exposure(int32_t value, uint8_t index)
{
   1eb40:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1eb42:	2904      	cmp	r1, #4
   1eb44:	d806      	bhi.n	1eb54 <set_row_current_light_exposure+0x14>
    {
        row_control_config[index].row_light_exposure = value;
   1eb46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1eb4a:	4b0b      	ldr	r3, [pc, #44]	; (1eb78 <set_row_current_light_exposure+0x38>)
   1eb4c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1eb50:	60c8      	str	r0, [r1, #12]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1eb52:	bd08      	pop	{r3, pc}
   1eb54:	4b09      	ldr	r3, [pc, #36]	; (1eb7c <set_row_current_light_exposure+0x3c>)
   1eb56:	4a0a      	ldr	r2, [pc, #40]	; (1eb80 <set_row_current_light_exposure+0x40>)
   1eb58:	1a9b      	subs	r3, r3, r2
   1eb5a:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1eb5c:	f04f 0200 	mov.w	r2, #0
   1eb60:	2003      	movs	r0, #3
   1eb62:	f360 0202 	bfi	r2, r0, #0, #3
   1eb66:	f36f 02c5 	bfc	r2, #3, #3
   1eb6a:	f363 128f 	bfi	r2, r3, #6, #10
   1eb6e:	4805      	ldr	r0, [pc, #20]	; (1eb84 <set_row_current_light_exposure+0x44>)
   1eb70:	f001 fb9a 	bl	202a8 <log_1>
}
   1eb74:	e7ed      	b.n	1eb52 <set_row_current_light_exposure+0x12>
   1eb76:	bf00      	nop
   1eb78:	20007a40 	.word	0x20007a40
   1eb7c:	0003d224 	.word	0x0003d224
   1eb80:	0003d1a4 	.word	0x0003d1a4
   1eb84:	0003dc10 	.word	0x0003dc10

0001eb88 <set_row_registered>:
 * @brief Set the row registered object
 *
 * @param index
 */
void set_row_registered(uint8_t index)
{
   1eb88:	b508      	push	{r3, lr}
   1eb8a:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1eb8c:	2804      	cmp	r0, #4
   1eb8e:	d807      	bhi.n	1eba0 <set_row_registered+0x18>
    {
        row_control_config[index].row_registered = true;
   1eb90:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1eb94:	480b      	ldr	r0, [pc, #44]	; (1ebc4 <set_row_registered+0x3c>)
   1eb96:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1eb9a:	2301      	movs	r3, #1
   1eb9c:	744b      	strb	r3, [r1, #17]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1eb9e:	bd08      	pop	{r3, pc}
   1eba0:	4b09      	ldr	r3, [pc, #36]	; (1ebc8 <set_row_registered+0x40>)
   1eba2:	4a0a      	ldr	r2, [pc, #40]	; (1ebcc <set_row_registered+0x44>)
   1eba4:	1a9b      	subs	r3, r3, r2
   1eba6:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1eba8:	f04f 0200 	mov.w	r2, #0
   1ebac:	2003      	movs	r0, #3
   1ebae:	f360 0202 	bfi	r2, r0, #0, #3
   1ebb2:	f36f 02c5 	bfc	r2, #3, #3
   1ebb6:	f363 128f 	bfi	r2, r3, #6, #10
   1ebba:	4805      	ldr	r0, [pc, #20]	; (1ebd0 <set_row_registered+0x48>)
   1ebbc:	f001 fb74 	bl	202a8 <log_1>
}
   1ebc0:	e7ed      	b.n	1eb9e <set_row_registered+0x16>
   1ebc2:	bf00      	nop
   1ebc4:	20007a40 	.word	0x20007a40
   1ebc8:	0003d224 	.word	0x0003d224
   1ebcc:	0003d1a4 	.word	0x0003d1a4
   1ebd0:	0003dc10 	.word	0x0003dc10

0001ebd4 <set_row_temp_threshold>:
 *
 * @param value
 * @param index
 */
void set_row_temp_threshold(int32_t value, uint8_t index)
{
   1ebd4:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1ebd6:	2904      	cmp	r1, #4
   1ebd8:	d806      	bhi.n	1ebe8 <set_row_temp_threshold+0x14>
    {
        row_control_config[index].row_control.temp_threshold = value;
   1ebda:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ebde:	4b0b      	ldr	r3, [pc, #44]	; (1ec0c <set_row_temp_threshold+0x38>)
   1ebe0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ebe4:	6188      	str	r0, [r1, #24]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1ebe6:	bd08      	pop	{r3, pc}
   1ebe8:	4b09      	ldr	r3, [pc, #36]	; (1ec10 <set_row_temp_threshold+0x3c>)
   1ebea:	4a0a      	ldr	r2, [pc, #40]	; (1ec14 <set_row_temp_threshold+0x40>)
   1ebec:	1a9b      	subs	r3, r3, r2
   1ebee:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ebf0:	f04f 0200 	mov.w	r2, #0
   1ebf4:	2003      	movs	r0, #3
   1ebf6:	f360 0202 	bfi	r2, r0, #0, #3
   1ebfa:	f36f 02c5 	bfc	r2, #3, #3
   1ebfe:	f363 128f 	bfi	r2, r3, #6, #10
   1ec02:	4805      	ldr	r0, [pc, #20]	; (1ec18 <set_row_temp_threshold+0x44>)
   1ec04:	f001 fb50 	bl	202a8 <log_1>
}
   1ec08:	e7ed      	b.n	1ebe6 <set_row_temp_threshold+0x12>
   1ec0a:	bf00      	nop
   1ec0c:	20007a40 	.word	0x20007a40
   1ec10:	0003d224 	.word	0x0003d224
   1ec14:	0003d1a4 	.word	0x0003d1a4
   1ec18:	0003dc10 	.word	0x0003dc10

0001ec1c <get_row_temp_threshold>:
 *
 * @param index
 * @return int32_t
 */
int32_t get_row_temp_threshold(uint8_t index)
{
   1ec1c:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1ec1e:	2804      	cmp	r0, #4
   1ec20:	d806      	bhi.n	1ec30 <get_row_temp_threshold+0x14>
    {
        return row_control_config[index].row_control.temp_threshold;
   1ec22:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ec26:	480c      	ldr	r0, [pc, #48]	; (1ec58 <get_row_temp_threshold+0x3c>)
   1ec28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1ec2c:	6988      	ldr	r0, [r1, #24]
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return 0;
}
   1ec2e:	4770      	bx	lr
{
   1ec30:	b508      	push	{r3, lr}
   1ec32:	4b0a      	ldr	r3, [pc, #40]	; (1ec5c <get_row_temp_threshold+0x40>)
   1ec34:	4a0a      	ldr	r2, [pc, #40]	; (1ec60 <get_row_temp_threshold+0x44>)
   1ec36:	1a9b      	subs	r3, r3, r2
   1ec38:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ec3a:	f04f 0200 	mov.w	r2, #0
   1ec3e:	2003      	movs	r0, #3
   1ec40:	f360 0202 	bfi	r2, r0, #0, #3
   1ec44:	f36f 02c5 	bfc	r2, #3, #3
   1ec48:	f363 128f 	bfi	r2, r3, #6, #10
   1ec4c:	4805      	ldr	r0, [pc, #20]	; (1ec64 <get_row_temp_threshold+0x48>)
   1ec4e:	f001 fb2b 	bl	202a8 <log_1>
    return 0;
   1ec52:	2000      	movs	r0, #0
}
   1ec54:	bd08      	pop	{r3, pc}
   1ec56:	bf00      	nop
   1ec58:	20007a40 	.word	0x20007a40
   1ec5c:	0003d224 	.word	0x0003d224
   1ec60:	0003d1a4 	.word	0x0003d1a4
   1ec64:	0003dc10 	.word	0x0003dc10

0001ec68 <set_row_hum_threshold>:
 *
 * @param value
 * @param index
 */
void set_row_hum_threshold(int32_t value, uint8_t index)
{
   1ec68:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1ec6a:	2904      	cmp	r1, #4
   1ec6c:	d806      	bhi.n	1ec7c <set_row_hum_threshold+0x14>
    {
        row_control_config[index].row_control.humidity_threshold = value;
   1ec6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ec72:	4b0b      	ldr	r3, [pc, #44]	; (1eca0 <set_row_hum_threshold+0x38>)
   1ec74:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ec78:	61c8      	str	r0, [r1, #28]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1ec7a:	bd08      	pop	{r3, pc}
   1ec7c:	4b09      	ldr	r3, [pc, #36]	; (1eca4 <set_row_hum_threshold+0x3c>)
   1ec7e:	4a0a      	ldr	r2, [pc, #40]	; (1eca8 <set_row_hum_threshold+0x40>)
   1ec80:	1a9b      	subs	r3, r3, r2
   1ec82:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ec84:	f04f 0200 	mov.w	r2, #0
   1ec88:	2003      	movs	r0, #3
   1ec8a:	f360 0202 	bfi	r2, r0, #0, #3
   1ec8e:	f36f 02c5 	bfc	r2, #3, #3
   1ec92:	f363 128f 	bfi	r2, r3, #6, #10
   1ec96:	4805      	ldr	r0, [pc, #20]	; (1ecac <set_row_hum_threshold+0x44>)
   1ec98:	f001 fb06 	bl	202a8 <log_1>
}
   1ec9c:	e7ed      	b.n	1ec7a <set_row_hum_threshold+0x12>
   1ec9e:	bf00      	nop
   1eca0:	20007a40 	.word	0x20007a40
   1eca4:	0003d224 	.word	0x0003d224
   1eca8:	0003d1a4 	.word	0x0003d1a4
   1ecac:	0003dc10 	.word	0x0003dc10

0001ecb0 <get_row_hum_threshold>:
 *
 * @param index
 * @return int32_t
 */
int32_t get_row_hum_threshold(uint8_t index)
{
   1ecb0:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1ecb2:	2804      	cmp	r0, #4
   1ecb4:	d806      	bhi.n	1ecc4 <get_row_hum_threshold+0x14>
    {
        return row_control_config[index].row_control.humidity_threshold;
   1ecb6:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ecba:	480c      	ldr	r0, [pc, #48]	; (1ecec <get_row_hum_threshold+0x3c>)
   1ecbc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1ecc0:	69c8      	ldr	r0, [r1, #28]
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return 0;
}
   1ecc2:	4770      	bx	lr
{
   1ecc4:	b508      	push	{r3, lr}
   1ecc6:	4b0a      	ldr	r3, [pc, #40]	; (1ecf0 <get_row_hum_threshold+0x40>)
   1ecc8:	4a0a      	ldr	r2, [pc, #40]	; (1ecf4 <get_row_hum_threshold+0x44>)
   1ecca:	1a9b      	subs	r3, r3, r2
   1eccc:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ecce:	f04f 0200 	mov.w	r2, #0
   1ecd2:	2003      	movs	r0, #3
   1ecd4:	f360 0202 	bfi	r2, r0, #0, #3
   1ecd8:	f36f 02c5 	bfc	r2, #3, #3
   1ecdc:	f363 128f 	bfi	r2, r3, #6, #10
   1ece0:	4805      	ldr	r0, [pc, #20]	; (1ecf8 <get_row_hum_threshold+0x48>)
   1ece2:	f001 fae1 	bl	202a8 <log_1>
    return 0;
   1ece6:	2000      	movs	r0, #0
}
   1ece8:	bd08      	pop	{r3, pc}
   1ecea:	bf00      	nop
   1ecec:	20007a40 	.word	0x20007a40
   1ecf0:	0003d224 	.word	0x0003d224
   1ecf4:	0003d1a4 	.word	0x0003d1a4
   1ecf8:	0003dc10 	.word	0x0003dc10

0001ecfc <set_row_light_threshold>:
 *
 * @param value
 * @param index
 */
void set_row_light_threshold(int32_t value, uint8_t index)
{
   1ecfc:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1ecfe:	2904      	cmp	r1, #4
   1ed00:	d806      	bhi.n	1ed10 <set_row_light_threshold+0x14>
    {
        row_control_config[index].row_control.light_threshold = value;
   1ed02:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ed06:	4b0b      	ldr	r3, [pc, #44]	; (1ed34 <set_row_light_threshold+0x38>)
   1ed08:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ed0c:	6208      	str	r0, [r1, #32]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1ed0e:	bd08      	pop	{r3, pc}
   1ed10:	4b09      	ldr	r3, [pc, #36]	; (1ed38 <set_row_light_threshold+0x3c>)
   1ed12:	4a0a      	ldr	r2, [pc, #40]	; (1ed3c <set_row_light_threshold+0x40>)
   1ed14:	1a9b      	subs	r3, r3, r2
   1ed16:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ed18:	f04f 0200 	mov.w	r2, #0
   1ed1c:	2003      	movs	r0, #3
   1ed1e:	f360 0202 	bfi	r2, r0, #0, #3
   1ed22:	f36f 02c5 	bfc	r2, #3, #3
   1ed26:	f363 128f 	bfi	r2, r3, #6, #10
   1ed2a:	4805      	ldr	r0, [pc, #20]	; (1ed40 <set_row_light_threshold+0x44>)
   1ed2c:	f001 fabc 	bl	202a8 <log_1>
}
   1ed30:	e7ed      	b.n	1ed0e <set_row_light_threshold+0x12>
   1ed32:	bf00      	nop
   1ed34:	20007a40 	.word	0x20007a40
   1ed38:	0003d224 	.word	0x0003d224
   1ed3c:	0003d1a4 	.word	0x0003d1a4
   1ed40:	0003dc10 	.word	0x0003dc10

0001ed44 <set_row_soil_moisture_threshold>:
 *
 * @param value
 * @param index
 */
void set_row_soil_moisture_threshold(int32_t value, uint8_t index)
{
   1ed44:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1ed46:	2904      	cmp	r1, #4
   1ed48:	d806      	bhi.n	1ed58 <set_row_soil_moisture_threshold+0x14>
    {
        row_control_config[index].row_control.soil_moisture_threshold = value;
   1ed4a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ed4e:	4b0b      	ldr	r3, [pc, #44]	; (1ed7c <set_row_soil_moisture_threshold+0x38>)
   1ed50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ed54:	6248      	str	r0, [r1, #36]	; 0x24
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1ed56:	bd08      	pop	{r3, pc}
   1ed58:	4b09      	ldr	r3, [pc, #36]	; (1ed80 <set_row_soil_moisture_threshold+0x3c>)
   1ed5a:	4a0a      	ldr	r2, [pc, #40]	; (1ed84 <set_row_soil_moisture_threshold+0x40>)
   1ed5c:	1a9b      	subs	r3, r3, r2
   1ed5e:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ed60:	f04f 0200 	mov.w	r2, #0
   1ed64:	2003      	movs	r0, #3
   1ed66:	f360 0202 	bfi	r2, r0, #0, #3
   1ed6a:	f36f 02c5 	bfc	r2, #3, #3
   1ed6e:	f363 128f 	bfi	r2, r3, #6, #10
   1ed72:	4805      	ldr	r0, [pc, #20]	; (1ed88 <set_row_soil_moisture_threshold+0x44>)
   1ed74:	f001 fa98 	bl	202a8 <log_1>
}
   1ed78:	e7ed      	b.n	1ed56 <set_row_soil_moisture_threshold+0x12>
   1ed7a:	bf00      	nop
   1ed7c:	20007a40 	.word	0x20007a40
   1ed80:	0003d224 	.word	0x0003d224
   1ed84:	0003d1a4 	.word	0x0003d1a4
   1ed88:	0003dc10 	.word	0x0003dc10

0001ed8c <get_row_soil_moisture_threshold>:
 *
 * @param index
 * @return int32_t
 */
int32_t get_row_soil_moisture_threshold(uint8_t index)
{
   1ed8c:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1ed8e:	2804      	cmp	r0, #4
   1ed90:	d806      	bhi.n	1eda0 <get_row_soil_moisture_threshold+0x14>
    {
        return row_control_config[index].row_control.soil_moisture_threshold;
   1ed92:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ed96:	480c      	ldr	r0, [pc, #48]	; (1edc8 <get_row_soil_moisture_threshold+0x3c>)
   1ed98:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1ed9c:	6a48      	ldr	r0, [r1, #36]	; 0x24
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return 0;
}
   1ed9e:	4770      	bx	lr
{
   1eda0:	b508      	push	{r3, lr}
   1eda2:	4b0a      	ldr	r3, [pc, #40]	; (1edcc <get_row_soil_moisture_threshold+0x40>)
   1eda4:	4a0a      	ldr	r2, [pc, #40]	; (1edd0 <get_row_soil_moisture_threshold+0x44>)
   1eda6:	1a9b      	subs	r3, r3, r2
   1eda8:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1edaa:	f04f 0200 	mov.w	r2, #0
   1edae:	2003      	movs	r0, #3
   1edb0:	f360 0202 	bfi	r2, r0, #0, #3
   1edb4:	f36f 02c5 	bfc	r2, #3, #3
   1edb8:	f363 128f 	bfi	r2, r3, #6, #10
   1edbc:	4805      	ldr	r0, [pc, #20]	; (1edd4 <get_row_soil_moisture_threshold+0x48>)
   1edbe:	f001 fa73 	bl	202a8 <log_1>
    return 0;
   1edc2:	2000      	movs	r0, #0
}
   1edc4:	bd08      	pop	{r3, pc}
   1edc6:	bf00      	nop
   1edc8:	20007a40 	.word	0x20007a40
   1edcc:	0003d224 	.word	0x0003d224
   1edd0:	0003d1a4 	.word	0x0003d1a4
   1edd4:	0003dc10 	.word	0x0003dc10

0001edd8 <set_row_water_switch>:
 *
 * @param value
 * @param index
 */
void set_row_water_switch(bool value, uint8_t index)
{
   1edd8:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1edda:	2904      	cmp	r1, #4
   1eddc:	d806      	bhi.n	1edec <set_row_water_switch+0x14>
    {
        row_control_config[index].row_control.water_switch = value;
   1edde:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ede2:	4b0b      	ldr	r3, [pc, #44]	; (1ee10 <set_row_water_switch+0x38>)
   1ede4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ede8:	7548      	strb	r0, [r1, #21]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1edea:	bd08      	pop	{r3, pc}
   1edec:	4b09      	ldr	r3, [pc, #36]	; (1ee14 <set_row_water_switch+0x3c>)
   1edee:	4a0a      	ldr	r2, [pc, #40]	; (1ee18 <set_row_water_switch+0x40>)
   1edf0:	1a9b      	subs	r3, r3, r2
   1edf2:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1edf4:	f04f 0200 	mov.w	r2, #0
   1edf8:	2003      	movs	r0, #3
   1edfa:	f360 0202 	bfi	r2, r0, #0, #3
   1edfe:	f36f 02c5 	bfc	r2, #3, #3
   1ee02:	f363 128f 	bfi	r2, r3, #6, #10
   1ee06:	4805      	ldr	r0, [pc, #20]	; (1ee1c <set_row_water_switch+0x44>)
   1ee08:	f001 fa4e 	bl	202a8 <log_1>
}
   1ee0c:	e7ed      	b.n	1edea <set_row_water_switch+0x12>
   1ee0e:	bf00      	nop
   1ee10:	20007a40 	.word	0x20007a40
   1ee14:	0003d224 	.word	0x0003d224
   1ee18:	0003d1a4 	.word	0x0003d1a4
   1ee1c:	0003dc10 	.word	0x0003dc10

0001ee20 <get_row_water_switch>:
 * @param index
 * @return true
 * @return false
 */
bool get_row_water_switch(uint8_t index)
{
   1ee20:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1ee22:	2804      	cmp	r0, #4
   1ee24:	d806      	bhi.n	1ee34 <get_row_water_switch+0x14>
    {
        return row_control_config[index].row_control.water_switch;
   1ee26:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ee2a:	480c      	ldr	r0, [pc, #48]	; (1ee5c <get_row_water_switch+0x3c>)
   1ee2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1ee30:	7d48      	ldrb	r0, [r1, #21]
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return false;
}
   1ee32:	4770      	bx	lr
{
   1ee34:	b508      	push	{r3, lr}
   1ee36:	4b0a      	ldr	r3, [pc, #40]	; (1ee60 <get_row_water_switch+0x40>)
   1ee38:	4a0a      	ldr	r2, [pc, #40]	; (1ee64 <get_row_water_switch+0x44>)
   1ee3a:	1a9b      	subs	r3, r3, r2
   1ee3c:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ee3e:	f04f 0200 	mov.w	r2, #0
   1ee42:	2003      	movs	r0, #3
   1ee44:	f360 0202 	bfi	r2, r0, #0, #3
   1ee48:	f36f 02c5 	bfc	r2, #3, #3
   1ee4c:	f363 128f 	bfi	r2, r3, #6, #10
   1ee50:	4805      	ldr	r0, [pc, #20]	; (1ee68 <get_row_water_switch+0x48>)
   1ee52:	f001 fa29 	bl	202a8 <log_1>
    return false;
   1ee56:	2000      	movs	r0, #0
}
   1ee58:	bd08      	pop	{r3, pc}
   1ee5a:	bf00      	nop
   1ee5c:	20007a40 	.word	0x20007a40
   1ee60:	0003d224 	.word	0x0003d224
   1ee64:	0003d1a4 	.word	0x0003d1a4
   1ee68:	0003dc10 	.word	0x0003dc10

0001ee6c <set_row_fan_switch>:
 *
 * @param value
 * @param index
 */
void set_row_fan_switch(bool value, uint8_t index)
{
   1ee6c:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1ee6e:	2904      	cmp	r1, #4
   1ee70:	d806      	bhi.n	1ee80 <set_row_fan_switch+0x14>
    {
        row_control_config[index].row_control.fan_switch = value;
   1ee72:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ee76:	4b0b      	ldr	r3, [pc, #44]	; (1eea4 <set_row_fan_switch+0x38>)
   1ee78:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ee7c:	7508      	strb	r0, [r1, #20]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1ee7e:	bd08      	pop	{r3, pc}
   1ee80:	4b09      	ldr	r3, [pc, #36]	; (1eea8 <set_row_fan_switch+0x3c>)
   1ee82:	4a0a      	ldr	r2, [pc, #40]	; (1eeac <set_row_fan_switch+0x40>)
   1ee84:	1a9b      	subs	r3, r3, r2
   1ee86:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ee88:	f04f 0200 	mov.w	r2, #0
   1ee8c:	2003      	movs	r0, #3
   1ee8e:	f360 0202 	bfi	r2, r0, #0, #3
   1ee92:	f36f 02c5 	bfc	r2, #3, #3
   1ee96:	f363 128f 	bfi	r2, r3, #6, #10
   1ee9a:	4805      	ldr	r0, [pc, #20]	; (1eeb0 <set_row_fan_switch+0x44>)
   1ee9c:	f001 fa04 	bl	202a8 <log_1>
}
   1eea0:	e7ed      	b.n	1ee7e <set_row_fan_switch+0x12>
   1eea2:	bf00      	nop
   1eea4:	20007a40 	.word	0x20007a40
   1eea8:	0003d224 	.word	0x0003d224
   1eeac:	0003d1a4 	.word	0x0003d1a4
   1eeb0:	0003dc10 	.word	0x0003dc10

0001eeb4 <get_row_fan_switch>:
 * @param index
 * @return true
 * @return false
 */
bool get_row_fan_switch(uint8_t index)
{
   1eeb4:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1eeb6:	2804      	cmp	r0, #4
   1eeb8:	d806      	bhi.n	1eec8 <get_row_fan_switch+0x14>
    {
        return row_control_config[index].row_control.fan_switch;
   1eeba:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1eebe:	480c      	ldr	r0, [pc, #48]	; (1eef0 <get_row_fan_switch+0x3c>)
   1eec0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1eec4:	7d08      	ldrb	r0, [r1, #20]
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return false;
}
   1eec6:	4770      	bx	lr
{
   1eec8:	b508      	push	{r3, lr}
   1eeca:	4b0a      	ldr	r3, [pc, #40]	; (1eef4 <get_row_fan_switch+0x40>)
   1eecc:	4a0a      	ldr	r2, [pc, #40]	; (1eef8 <get_row_fan_switch+0x44>)
   1eece:	1a9b      	subs	r3, r3, r2
   1eed0:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1eed2:	f04f 0200 	mov.w	r2, #0
   1eed6:	2003      	movs	r0, #3
   1eed8:	f360 0202 	bfi	r2, r0, #0, #3
   1eedc:	f36f 02c5 	bfc	r2, #3, #3
   1eee0:	f363 128f 	bfi	r2, r3, #6, #10
   1eee4:	4805      	ldr	r0, [pc, #20]	; (1eefc <get_row_fan_switch+0x48>)
   1eee6:	f001 f9df 	bl	202a8 <log_1>
    return false;
   1eeea:	2000      	movs	r0, #0
}
   1eeec:	bd08      	pop	{r3, pc}
   1eeee:	bf00      	nop
   1eef0:	20007a40 	.word	0x20007a40
   1eef4:	0003d224 	.word	0x0003d224
   1eef8:	0003d1a4 	.word	0x0003d1a4
   1eefc:	0003dc10 	.word	0x0003dc10

0001ef00 <set_row_light_switch>:
 *
 * @param value
 * @param index
 */
void set_row_light_switch(bool value, uint8_t index)
{
   1ef00:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1ef02:	2904      	cmp	r1, #4
   1ef04:	d806      	bhi.n	1ef14 <set_row_light_switch+0x14>
    {
        row_control_config[index].row_control.light_switch = value;
   1ef06:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ef0a:	4b0b      	ldr	r3, [pc, #44]	; (1ef38 <set_row_light_switch+0x38>)
   1ef0c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1ef10:	7588      	strb	r0, [r1, #22]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1ef12:	bd08      	pop	{r3, pc}
   1ef14:	4b09      	ldr	r3, [pc, #36]	; (1ef3c <set_row_light_switch+0x3c>)
   1ef16:	4a0a      	ldr	r2, [pc, #40]	; (1ef40 <set_row_light_switch+0x40>)
   1ef18:	1a9b      	subs	r3, r3, r2
   1ef1a:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ef1c:	f04f 0200 	mov.w	r2, #0
   1ef20:	2003      	movs	r0, #3
   1ef22:	f360 0202 	bfi	r2, r0, #0, #3
   1ef26:	f36f 02c5 	bfc	r2, #3, #3
   1ef2a:	f363 128f 	bfi	r2, r3, #6, #10
   1ef2e:	4805      	ldr	r0, [pc, #20]	; (1ef44 <set_row_light_switch+0x44>)
   1ef30:	f001 f9ba 	bl	202a8 <log_1>
}
   1ef34:	e7ed      	b.n	1ef12 <set_row_light_switch+0x12>
   1ef36:	bf00      	nop
   1ef38:	20007a40 	.word	0x20007a40
   1ef3c:	0003d224 	.word	0x0003d224
   1ef40:	0003d1a4 	.word	0x0003d1a4
   1ef44:	0003dc10 	.word	0x0003dc10

0001ef48 <get_row_light_switch>:
 * @param index
 * @return true
 * @return false
 */
bool get_row_light_switch(uint8_t index)
{
   1ef48:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1ef4a:	2804      	cmp	r0, #4
   1ef4c:	d806      	bhi.n	1ef5c <get_row_light_switch+0x14>
    {
        return row_control_config[index].row_control.light_switch;
   1ef4e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ef52:	480c      	ldr	r0, [pc, #48]	; (1ef84 <get_row_light_switch+0x3c>)
   1ef54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1ef58:	7d88      	ldrb	r0, [r1, #22]
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return false;
}
   1ef5a:	4770      	bx	lr
{
   1ef5c:	b508      	push	{r3, lr}
   1ef5e:	4b0a      	ldr	r3, [pc, #40]	; (1ef88 <get_row_light_switch+0x40>)
   1ef60:	4a0a      	ldr	r2, [pc, #40]	; (1ef8c <get_row_light_switch+0x44>)
   1ef62:	1a9b      	subs	r3, r3, r2
   1ef64:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1ef66:	f04f 0200 	mov.w	r2, #0
   1ef6a:	2003      	movs	r0, #3
   1ef6c:	f360 0202 	bfi	r2, r0, #0, #3
   1ef70:	f36f 02c5 	bfc	r2, #3, #3
   1ef74:	f363 128f 	bfi	r2, r3, #6, #10
   1ef78:	4805      	ldr	r0, [pc, #20]	; (1ef90 <get_row_light_switch+0x48>)
   1ef7a:	f001 f995 	bl	202a8 <log_1>
    return false;
   1ef7e:	2000      	movs	r0, #0
}
   1ef80:	bd08      	pop	{r3, pc}
   1ef82:	bf00      	nop
   1ef84:	20007a40 	.word	0x20007a40
   1ef88:	0003d224 	.word	0x0003d224
   1ef8c:	0003d1a4 	.word	0x0003d1a4
   1ef90:	0003dc10 	.word	0x0003dc10

0001ef94 <set_row_automatic_control>:
 *
 * @param value
 * @param index
 */
void set_row_automatic_control(bool value, uint8_t index)
{
   1ef94:	b508      	push	{r3, lr}
    if (index < MAX_CONFIGURATION_ID)
   1ef96:	2904      	cmp	r1, #4
   1ef98:	d806      	bhi.n	1efa8 <set_row_automatic_control+0x14>
    {
        row_control_config[index].row_control.automatic_control = value;
   1ef9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1ef9e:	4b0b      	ldr	r3, [pc, #44]	; (1efcc <set_row_automatic_control+0x38>)
   1efa0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1efa4:	75c8      	strb	r0, [r1, #23]
    }
    else
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }
}
   1efa6:	bd08      	pop	{r3, pc}
   1efa8:	4b09      	ldr	r3, [pc, #36]	; (1efd0 <set_row_automatic_control+0x3c>)
   1efaa:	4a0a      	ldr	r2, [pc, #40]	; (1efd4 <set_row_automatic_control+0x40>)
   1efac:	1a9b      	subs	r3, r3, r2
   1efae:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1efb0:	f04f 0200 	mov.w	r2, #0
   1efb4:	2003      	movs	r0, #3
   1efb6:	f360 0202 	bfi	r2, r0, #0, #3
   1efba:	f36f 02c5 	bfc	r2, #3, #3
   1efbe:	f363 128f 	bfi	r2, r3, #6, #10
   1efc2:	4805      	ldr	r0, [pc, #20]	; (1efd8 <set_row_automatic_control+0x44>)
   1efc4:	f001 f970 	bl	202a8 <log_1>
}
   1efc8:	e7ed      	b.n	1efa6 <set_row_automatic_control+0x12>
   1efca:	bf00      	nop
   1efcc:	20007a40 	.word	0x20007a40
   1efd0:	0003d224 	.word	0x0003d224
   1efd4:	0003d1a4 	.word	0x0003d1a4
   1efd8:	0003dc10 	.word	0x0003dc10

0001efdc <get_row_automatic_control>:
 * @param index
 * @return true
 * @return false
 */
bool get_row_automatic_control(uint8_t index)
{
   1efdc:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1efde:	2804      	cmp	r0, #4
   1efe0:	d806      	bhi.n	1eff0 <get_row_automatic_control+0x14>
    {
        return row_control_config[index].row_control.automatic_control;
   1efe2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1efe6:	480c      	ldr	r0, [pc, #48]	; (1f018 <get_row_automatic_control+0x3c>)
   1efe8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1efec:	7dc8      	ldrb	r0, [r1, #23]
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return false;
}
   1efee:	4770      	bx	lr
{
   1eff0:	b508      	push	{r3, lr}
   1eff2:	4b0a      	ldr	r3, [pc, #40]	; (1f01c <get_row_automatic_control+0x40>)
   1eff4:	4a0a      	ldr	r2, [pc, #40]	; (1f020 <get_row_automatic_control+0x44>)
   1eff6:	1a9b      	subs	r3, r3, r2
   1eff8:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1effa:	f04f 0200 	mov.w	r2, #0
   1effe:	2003      	movs	r0, #3
   1f000:	f360 0202 	bfi	r2, r0, #0, #3
   1f004:	f36f 02c5 	bfc	r2, #3, #3
   1f008:	f363 128f 	bfi	r2, r3, #6, #10
   1f00c:	4805      	ldr	r0, [pc, #20]	; (1f024 <get_row_automatic_control+0x48>)
   1f00e:	f001 f94b 	bl	202a8 <log_1>
    return false;
   1f012:	2000      	movs	r0, #0
}
   1f014:	bd08      	pop	{r3, pc}
   1f016:	bf00      	nop
   1f018:	20007a40 	.word	0x20007a40
   1f01c:	0003d224 	.word	0x0003d224
   1f020:	0003d1a4 	.word	0x0003d1a4
   1f024:	0003dc10 	.word	0x0003dc10

0001f028 <get_row_registered>:
 * @param index
 * @return true
 * @return false
 */
bool get_row_registered(uint8_t index)
{
   1f028:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1f02a:	2804      	cmp	r0, #4
   1f02c:	d806      	bhi.n	1f03c <get_row_registered+0x14>
    {
        return row_control_config[index].row_registered;
   1f02e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1f032:	480c      	ldr	r0, [pc, #48]	; (1f064 <get_row_registered+0x3c>)
   1f034:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1f038:	7c48      	ldrb	r0, [r1, #17]
    {
        LOG_INF("Wrong row control config indexing %d", index);
    }

    return false;
}
   1f03a:	4770      	bx	lr
{
   1f03c:	b508      	push	{r3, lr}
   1f03e:	4b0a      	ldr	r3, [pc, #40]	; (1f068 <get_row_registered+0x40>)
   1f040:	4a0a      	ldr	r2, [pc, #40]	; (1f06c <get_row_registered+0x44>)
   1f042:	1a9b      	subs	r3, r3, r2
   1f044:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row control config indexing %d", index);
   1f046:	f04f 0200 	mov.w	r2, #0
   1f04a:	2003      	movs	r0, #3
   1f04c:	f360 0202 	bfi	r2, r0, #0, #3
   1f050:	f36f 02c5 	bfc	r2, #3, #3
   1f054:	f363 128f 	bfi	r2, r3, #6, #10
   1f058:	4805      	ldr	r0, [pc, #20]	; (1f070 <get_row_registered+0x48>)
   1f05a:	f001 f925 	bl	202a8 <log_1>
    return false;
   1f05e:	2000      	movs	r0, #0
}
   1f060:	bd08      	pop	{r3, pc}
   1f062:	bf00      	nop
   1f064:	20007a40 	.word	0x20007a40
   1f068:	0003d224 	.word	0x0003d224
   1f06c:	0003d1a4 	.word	0x0003d1a4
   1f070:	0003dc10 	.word	0x0003dc10

0001f074 <reset_row_status>:
 * @brief Reset row status
 *
 * @param index this is the indexing of the row control config array and index = row_id - 1
 */
void reset_row_status(uint8_t index)
{
   1f074:	b410      	push	{r4}
    row_control_config[index].row_hum = 0;
   1f076:	4a07      	ldr	r2, [pc, #28]	; (1f094 <reset_row_status+0x20>)
   1f078:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1f07c:	00dc      	lsls	r4, r3, #3
   1f07e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f082:	2100      	movs	r1, #0
   1f084:	6059      	str	r1, [r3, #4]
    row_control_config[index].row_light_exposure = 0;
   1f086:	60d9      	str	r1, [r3, #12]
    row_control_config[index].row_soil_moisture = 0;
   1f088:	6099      	str	r1, [r3, #8]
    row_control_config[index].row_temp = 0;
   1f08a:	5111      	str	r1, [r2, r4]
    row_control_config[index].row_registered = false;
   1f08c:	7459      	strb	r1, [r3, #17]
}
   1f08e:	bc10      	pop	{r4}
   1f090:	4770      	bx	lr
   1f092:	bf00      	nop
   1f094:	20007a40 	.word	0x20007a40

0001f098 <update_row_control_config_params_in_nvs>:
 * @brief Function to store new row config params in flash
 *
 * @param index
 */
void update_row_control_config_params_in_nvs(uint8_t index)
{
   1f098:	b508      	push	{r3, lr}
   1f09a:	4601      	mov	r1, r0
    if (index < MAX_CONFIGURATION_ID)
   1f09c:	2804      	cmp	r0, #4
   1f09e:	d805      	bhi.n	1f0ac <update_row_control_config_params_in_nvs+0x14>
    {
        row_id_params_changed = index;
   1f0a0:	4b0b      	ldr	r3, [pc, #44]	; (1f0d0 <update_row_control_config_params_in_nvs+0x38>)
   1f0a2:	7018      	strb	r0, [r3, #0]
        k_work_submit(&store_row_config_params_work);
   1f0a4:	480b      	ldr	r0, [pc, #44]	; (1f0d4 <update_row_control_config_params_in_nvs+0x3c>)
   1f0a6:	f011 facf 	bl	30648 <k_work_submit>
    }
    else
    {
        LOG_INF("Wrong row id index in update_row_control_config_params_in_nvs() %d", index);
    }
}
   1f0aa:	bd08      	pop	{r3, pc}
   1f0ac:	4b0a      	ldr	r3, [pc, #40]	; (1f0d8 <update_row_control_config_params_in_nvs+0x40>)
   1f0ae:	4a0b      	ldr	r2, [pc, #44]	; (1f0dc <update_row_control_config_params_in_nvs+0x44>)
   1f0b0:	1a9b      	subs	r3, r3, r2
   1f0b2:	08db      	lsrs	r3, r3, #3
        LOG_INF("Wrong row id index in update_row_control_config_params_in_nvs() %d", index);
   1f0b4:	f04f 0200 	mov.w	r2, #0
   1f0b8:	2003      	movs	r0, #3
   1f0ba:	f360 0202 	bfi	r2, r0, #0, #3
   1f0be:	f36f 02c5 	bfc	r2, #3, #3
   1f0c2:	f363 128f 	bfi	r2, r3, #6, #10
   1f0c6:	4806      	ldr	r0, [pc, #24]	; (1f0e0 <update_row_control_config_params_in_nvs+0x48>)
   1f0c8:	f001 f8ee 	bl	202a8 <log_1>
}
   1f0cc:	e7ed      	b.n	1f0aa <update_row_control_config_params_in_nvs+0x12>
   1f0ce:	bf00      	nop
   1f0d0:	2000da6e 	.word	0x2000da6e
   1f0d4:	20007b08 	.word	0x20007b08
   1f0d8:	0003d224 	.word	0x0003d224
   1f0dc:	0003d1a4 	.word	0x0003d1a4
   1f0e0:	0003dc38 	.word	0x0003dc38

0001f0e4 <measurements_fsm_timer_handler>:
static struct k_timer measurements_fsm_timer;
extern struct k_event measurements_fsm_event;

// --- interrupt handlers  -------------------------------------------
static void measurements_fsm_timer_handler(struct k_timer *timer_id)
{
   1f0e4:	b508      	push	{r3, lr}
	z_impl_k_event_post(event, events);
   1f0e6:	21aa      	movs	r1, #170	; 0xaa
   1f0e8:	4801      	ldr	r0, [pc, #4]	; (1f0f0 <measurements_fsm_timer_handler+0xc>)
   1f0ea:	f01d fe70 	bl	3cdce <z_impl_k_event_post>
    k_event_post(&measurements_fsm_event, MEASUREMENTS_FSM_RUN_EVT);
}
   1f0ee:	bd08      	pop	{r3, pc}
   1f0f0:	20007244 	.word	0x20007244

0001f0f4 <init_measurements_fsm_timer>:

// --- functions declarations -------------------------------------------
void init_measurements_fsm_timer(void)
{
   1f0f4:	b508      	push	{r3, lr}
    k_timer_init(&measurements_fsm_timer, measurements_fsm_timer_handler, NULL);
   1f0f6:	2200      	movs	r2, #0
   1f0f8:	4902      	ldr	r1, [pc, #8]	; (1f104 <init_measurements_fsm_timer+0x10>)
   1f0fa:	4803      	ldr	r0, [pc, #12]	; (1f108 <init_measurements_fsm_timer+0x14>)
   1f0fc:	f01d fd0a 	bl	3cb14 <k_timer_init>
}
   1f100:	bd08      	pop	{r3, pc}
   1f102:	bf00      	nop
   1f104:	0001f0e5 	.word	0x0001f0e5
   1f108:	20001cc8 	.word	0x20001cc8

0001f10c <start_measurements_fsm_timer>:

void start_measurements_fsm_timer(void)
{
   1f10c:	b500      	push	{lr}
   1f10e:	b083      	sub	sp, #12
	z_impl_k_timer_start(timer, duration, period);
   1f110:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1f114:	2300      	movs	r3, #0
   1f116:	e9cd 2300 	strd	r2, r3, [sp]
   1f11a:	2200      	movs	r2, #0
   1f11c:	2300      	movs	r3, #0
   1f11e:	4803      	ldr	r0, [pc, #12]	; (1f12c <start_measurements_fsm_timer+0x20>)
   1f120:	f012 f8cc 	bl	312bc <z_impl_k_timer_start>
    k_timer_start(&measurements_fsm_timer, K_SECONDS(0), K_SECONDS(MEASUREMENT_PERIOD_IN_SEC));
}
   1f124:	b003      	add	sp, #12
   1f126:	f85d fb04 	ldr.w	pc, [sp], #4
   1f12a:	bf00      	nop
   1f12c:	20001cc8 	.word	0x20001cc8

0001f130 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1f130:	b430      	push	{r4, r5}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   1f132:	2400      	movs	r4, #0
   1f134:	4294      	cmp	r4, r2
   1f136:	d20f      	bcs.n	1f158 <crc8_ccitt+0x28>
		val ^= p[i];
   1f138:	5d0b      	ldrb	r3, [r1, r4]
   1f13a:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1f13c:	0918      	lsrs	r0, r3, #4
   1f13e:	4d07      	ldr	r5, [pc, #28]	; (1f15c <crc8_ccitt+0x2c>)
   1f140:	5628      	ldrsb	r0, [r5, r0]
   1f142:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   1f146:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1f148:	f3c0 1003 	ubfx	r0, r0, #4, #4
   1f14c:	5628      	ldrsb	r0, [r5, r0]
   1f14e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   1f152:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   1f154:	3401      	adds	r4, #1
   1f156:	e7ed      	b.n	1f134 <crc8_ccitt+0x4>
	}
	return val;
}
   1f158:	bc30      	pop	{r4, r5}
   1f15a:	4770      	bx	lr
   1f15c:	0003dc7c 	.word	0x0003dc7c

0001f160 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   1f160:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1f162:	680b      	ldr	r3, [r1, #0]
   1f164:	3301      	adds	r3, #1
   1f166:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1f168:	4b01      	ldr	r3, [pc, #4]	; (1f170 <char_out+0x10>)
   1f16a:	681b      	ldr	r3, [r3, #0]
   1f16c:	4798      	blx	r3
}
   1f16e:	bd08      	pop	{r3, pc}
   1f170:	200004a4 	.word	0x200004a4

0001f174 <__printk_hook_install>:
	_char_out = fn;
   1f174:	4b01      	ldr	r3, [pc, #4]	; (1f17c <__printk_hook_install+0x8>)
   1f176:	6018      	str	r0, [r3, #0]
}
   1f178:	4770      	bx	lr
   1f17a:	bf00      	nop
   1f17c:	200004a4 	.word	0x200004a4

0001f180 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1f180:	b500      	push	{lr}
   1f182:	b083      	sub	sp, #12
   1f184:	4602      	mov	r2, r0
   1f186:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   1f188:	2100      	movs	r1, #0
   1f18a:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1f18c:	a901      	add	r1, sp, #4
   1f18e:	4803      	ldr	r0, [pc, #12]	; (1f19c <vprintk+0x1c>)
   1f190:	f000 f8c8 	bl	1f324 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1f194:	b003      	add	sp, #12
   1f196:	f85d fb04 	ldr.w	pc, [sp], #4
   1f19a:	bf00      	nop
   1f19c:	0001f161 	.word	0x0001f161

0001f1a0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1f1a0:	b510      	push	{r4, lr}
   1f1a2:	b084      	sub	sp, #16
   1f1a4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1f1a6:	9001      	str	r0, [sp, #4]
   1f1a8:	9102      	str	r1, [sp, #8]
   1f1aa:	2100      	movs	r1, #0
   1f1ac:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   1f1ae:	a901      	add	r1, sp, #4
   1f1b0:	4805      	ldr	r0, [pc, #20]	; (1f1c8 <vsnprintk+0x28>)
   1f1b2:	f000 f8b7 	bl	1f324 <cbvprintf>

	if (ctx.count < ctx.max) {
   1f1b6:	9b03      	ldr	r3, [sp, #12]
   1f1b8:	9a02      	ldr	r2, [sp, #8]
   1f1ba:	4293      	cmp	r3, r2
   1f1bc:	da01      	bge.n	1f1c2 <vsnprintk+0x22>
		str[ctx.count] = '\0';
   1f1be:	2200      	movs	r2, #0
   1f1c0:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   1f1c2:	9803      	ldr	r0, [sp, #12]
   1f1c4:	b004      	add	sp, #16
   1f1c6:	bd10      	pop	{r4, pc}
   1f1c8:	0003443f 	.word	0x0003443f

0001f1cc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1f1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f1d0:	b083      	sub	sp, #12
   1f1d2:	4604      	mov	r4, r0
   1f1d4:	4608      	mov	r0, r1
   1f1d6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f1d8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1f1da:	f013 0f08 	tst.w	r3, #8
   1f1de:	d105      	bne.n	1f1ec <process_event+0x20>
   1f1e0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1f1e4:	2300      	movs	r3, #0
   1f1e6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   1f1e8:	9301      	str	r3, [sp, #4]
}
   1f1ea:	e069      	b.n	1f2c0 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   1f1ec:	2901      	cmp	r1, #1
   1f1ee:	d009      	beq.n	1f204 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f1f0:	f043 0320 	orr.w	r3, r3, #32
   1f1f4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1f1f6:	f385 8811 	msr	BASEPRI, r5
   1f1fa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1f1fe:	b003      	add	sp, #12
   1f200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1f204:	f043 0310 	orr.w	r3, r3, #16
   1f208:	8323      	strh	r3, [r4, #24]
   1f20a:	e7f4      	b.n	1f1f6 <process_event+0x2a>
			evt = process_recheck(mgr);
   1f20c:	4620      	mov	r0, r4
   1f20e:	f015 f971 	bl	344f4 <process_recheck>
   1f212:	e057      	b.n	1f2c4 <process_event+0xf8>
			res = mgr->last_res;
   1f214:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   1f218:	464a      	mov	r2, r9
   1f21a:	4669      	mov	r1, sp
   1f21c:	4620      	mov	r0, r4
   1f21e:	f015 f982 	bl	34526 <process_complete>
		onoff_transition_fn transit = NULL;
   1f222:	2700      	movs	r7, #0
   1f224:	e05a      	b.n	1f2dc <process_event+0x110>
			transit = mgr->transitions->start;
   1f226:	6923      	ldr	r3, [r4, #16]
   1f228:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   1f22a:	2106      	movs	r1, #6
   1f22c:	4620      	mov	r0, r4
   1f22e:	f015 f93a 	bl	344a6 <set_state>
		res = 0;
   1f232:	f04f 0900 	mov.w	r9, #0
   1f236:	e051      	b.n	1f2dc <process_event+0x110>
			transit = mgr->transitions->stop;
   1f238:	6923      	ldr	r3, [r4, #16]
   1f23a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   1f23c:	2104      	movs	r1, #4
   1f23e:	4620      	mov	r0, r4
   1f240:	f015 f931 	bl	344a6 <set_state>
		res = 0;
   1f244:	f04f 0900 	mov.w	r9, #0
   1f248:	e048      	b.n	1f2dc <process_event+0x110>
			transit = mgr->transitions->reset;
   1f24a:	6923      	ldr	r3, [r4, #16]
   1f24c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   1f24e:	2105      	movs	r1, #5
   1f250:	4620      	mov	r0, r4
   1f252:	f015 f928 	bl	344a6 <set_state>
		res = 0;
   1f256:	f04f 0900 	mov.w	r9, #0
   1f25a:	e03f      	b.n	1f2dc <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   1f25c:	2200      	movs	r2, #0
   1f25e:	e046      	b.n	1f2ee <process_event+0x122>
   1f260:	2200      	movs	r2, #0
   1f262:	e044      	b.n	1f2ee <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1f264:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1f268:	8323      	strh	r3, [r4, #24]
   1f26a:	f385 8811 	msr	BASEPRI, r5
   1f26e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1f272:	2900      	cmp	r1, #0
   1f274:	d144      	bne.n	1f300 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1f276:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   1f278:	b12b      	cbz	r3, 1f286 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   1f27a:	464b      	mov	r3, r9
   1f27c:	4642      	mov	r2, r8
   1f27e:	4669      	mov	r1, sp
   1f280:	4620      	mov	r0, r4
   1f282:	f015 f9c6 	bl	34612 <notify_all>
			if (transit != NULL) {
   1f286:	b117      	cbz	r7, 1f28e <process_event+0xc2>
				transit(mgr, transition_complete);
   1f288:	4925      	ldr	r1, [pc, #148]	; (1f320 <process_event+0x154>)
   1f28a:	4620      	mov	r0, r4
   1f28c:	47b8      	blx	r7
	__asm__ volatile(
   1f28e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f292:	f3ef 8511 	mrs	r5, BASEPRI
   1f296:	f383 8812 	msr	BASEPRI_MAX, r3
   1f29a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1f29e:	8b23      	ldrh	r3, [r4, #24]
   1f2a0:	f023 0308 	bic.w	r3, r3, #8
   1f2a4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1f2a6:	8b23      	ldrh	r3, [r4, #24]
   1f2a8:	f013 0f10 	tst.w	r3, #16
   1f2ac:	d02e      	beq.n	1f30c <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1f2ae:	f023 0310 	bic.w	r3, r3, #16
   1f2b2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1f2b4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1f2b6:	8b26      	ldrh	r6, [r4, #24]
   1f2b8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   1f2bc:	2800      	cmp	r0, #0
   1f2be:	d09a      	beq.n	1f1f6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   1f2c0:	2802      	cmp	r0, #2
   1f2c2:	d0a3      	beq.n	1f20c <process_event+0x40>
		if (evt == EVT_NOP) {
   1f2c4:	2800      	cmp	r0, #0
   1f2c6:	d096      	beq.n	1f1f6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   1f2c8:	2801      	cmp	r0, #1
   1f2ca:	d0a3      	beq.n	1f214 <process_event+0x48>
		} else if (evt == EVT_START) {
   1f2cc:	2803      	cmp	r0, #3
   1f2ce:	d0aa      	beq.n	1f226 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   1f2d0:	2804      	cmp	r0, #4
   1f2d2:	d0b1      	beq.n	1f238 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   1f2d4:	2805      	cmp	r0, #5
   1f2d6:	d0b8      	beq.n	1f24a <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   1f2d8:	2700      	movs	r7, #0
		res = 0;
   1f2da:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1f2dc:	8b23      	ldrh	r3, [r4, #24]
   1f2de:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1f2e2:	45b0      	cmp	r8, r6
   1f2e4:	d0ba      	beq.n	1f25c <process_event+0x90>
   1f2e6:	68a2      	ldr	r2, [r4, #8]
   1f2e8:	2a00      	cmp	r2, #0
   1f2ea:	d0b9      	beq.n	1f260 <process_event+0x94>
   1f2ec:	2201      	movs	r2, #1
		if (do_monitors
   1f2ee:	4611      	mov	r1, r2
   1f2f0:	2a00      	cmp	r2, #0
   1f2f2:	d1b7      	bne.n	1f264 <process_event+0x98>
   1f2f4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   1f2f6:	2a00      	cmp	r2, #0
   1f2f8:	d1b4      	bne.n	1f264 <process_event+0x98>
		    || (transit != NULL)) {
   1f2fa:	2f00      	cmp	r7, #0
   1f2fc:	d1b2      	bne.n	1f264 <process_event+0x98>
   1f2fe:	e7d2      	b.n	1f2a6 <process_event+0xda>
				notify_monitors(mgr, state, res);
   1f300:	464a      	mov	r2, r9
   1f302:	4641      	mov	r1, r8
   1f304:	4620      	mov	r0, r4
   1f306:	f015 f8d6 	bl	344b6 <notify_monitors>
   1f30a:	e7b4      	b.n	1f276 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1f30c:	f013 0f20 	tst.w	r3, #32
   1f310:	d004      	beq.n	1f31c <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1f312:	f023 0320 	bic.w	r3, r3, #32
   1f316:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   1f318:	2002      	movs	r0, #2
   1f31a:	e7cc      	b.n	1f2b6 <process_event+0xea>
		evt = EVT_NOP;
   1f31c:	2000      	movs	r0, #0
   1f31e:	e7ca      	b.n	1f2b6 <process_event+0xea>
   1f320:	00034641 	.word	0x00034641

0001f324 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1f324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f328:	b093      	sub	sp, #76	; 0x4c
   1f32a:	4606      	mov	r6, r0
   1f32c:	460d      	mov	r5, r1
   1f32e:	4692      	mov	sl, r2
   1f330:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1f332:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1f334:	f89a 0000 	ldrb.w	r0, [sl]
   1f338:	2800      	cmp	r0, #0
   1f33a:	f000 84d6 	beq.w	1fcea <cbvprintf+0x9c6>
		if (*fp != '%') {
   1f33e:	2825      	cmp	r0, #37	; 0x25
   1f340:	d008      	beq.n	1f354 <cbvprintf+0x30>
			OUTC(*fp++);
   1f342:	f10a 0a01 	add.w	sl, sl, #1
   1f346:	4629      	mov	r1, r5
   1f348:	47b0      	blx	r6
   1f34a:	2800      	cmp	r0, #0
   1f34c:	f2c0 84ce 	blt.w	1fcec <cbvprintf+0x9c8>
   1f350:	3401      	adds	r4, #1
			continue;
   1f352:	e7ef      	b.n	1f334 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   1f354:	2300      	movs	r3, #0
   1f356:	9306      	str	r3, [sp, #24]
   1f358:	9307      	str	r3, [sp, #28]
   1f35a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   1f35c:	9308      	str	r3, [sp, #32]
   1f35e:	9309      	str	r3, [sp, #36]	; 0x24
   1f360:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   1f362:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   1f366:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1f36a:	2b25      	cmp	r3, #37	; 0x25
   1f36c:	d001      	beq.n	1f372 <cbvprintf+0x4e>
	bool loop = true;
   1f36e:	2701      	movs	r7, #1
   1f370:	e02c      	b.n	1f3cc <cbvprintf+0xa8>
		conv->specifier = *sp++;
   1f372:	f10a 0802 	add.w	r8, sl, #2
   1f376:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   1f37a:	e1a8      	b.n	1f6ce <cbvprintf+0x3aa>
			conv->flag_dash = true;
   1f37c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f380:	f043 0304 	orr.w	r3, r3, #4
   1f384:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   1f388:	b1ff      	cbz	r7, 1f3ca <cbvprintf+0xa6>
			++sp;
   1f38a:	f108 0801 	add.w	r8, r8, #1
   1f38e:	e01c      	b.n	1f3ca <cbvprintf+0xa6>
			conv->flag_plus = true;
   1f390:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f394:	f043 0308 	orr.w	r3, r3, #8
   1f398:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1f39c:	e7f4      	b.n	1f388 <cbvprintf+0x64>
			conv->flag_space = true;
   1f39e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f3a2:	f043 0310 	orr.w	r3, r3, #16
   1f3a6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1f3aa:	e7ed      	b.n	1f388 <cbvprintf+0x64>
			conv->flag_hash = true;
   1f3ac:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f3b0:	f043 0320 	orr.w	r3, r3, #32
   1f3b4:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1f3b8:	e7e6      	b.n	1f388 <cbvprintf+0x64>
			conv->flag_zero = true;
   1f3ba:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f3c2:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1f3c6:	e7df      	b.n	1f388 <cbvprintf+0x64>
		switch (*sp) {
   1f3c8:	2700      	movs	r7, #0
	} while (loop);
   1f3ca:	b34f      	cbz	r7, 1f420 <cbvprintf+0xfc>
		switch (*sp) {
   1f3cc:	f898 3000 	ldrb.w	r3, [r8]
   1f3d0:	3b20      	subs	r3, #32
   1f3d2:	2b10      	cmp	r3, #16
   1f3d4:	d8f8      	bhi.n	1f3c8 <cbvprintf+0xa4>
   1f3d6:	a201      	add	r2, pc, #4	; (adr r2, 1f3dc <cbvprintf+0xb8>)
   1f3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f3dc:	0001f39f 	.word	0x0001f39f
   1f3e0:	0001f3c9 	.word	0x0001f3c9
   1f3e4:	0001f3c9 	.word	0x0001f3c9
   1f3e8:	0001f3ad 	.word	0x0001f3ad
   1f3ec:	0001f3c9 	.word	0x0001f3c9
   1f3f0:	0001f3c9 	.word	0x0001f3c9
   1f3f4:	0001f3c9 	.word	0x0001f3c9
   1f3f8:	0001f3c9 	.word	0x0001f3c9
   1f3fc:	0001f3c9 	.word	0x0001f3c9
   1f400:	0001f3c9 	.word	0x0001f3c9
   1f404:	0001f3c9 	.word	0x0001f3c9
   1f408:	0001f391 	.word	0x0001f391
   1f40c:	0001f3c9 	.word	0x0001f3c9
   1f410:	0001f37d 	.word	0x0001f37d
   1f414:	0001f3c9 	.word	0x0001f3c9
   1f418:	0001f3c9 	.word	0x0001f3c9
   1f41c:	0001f3bb 	.word	0x0001f3bb
	if (conv->flag_zero && conv->flag_dash) {
   1f420:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f424:	f003 0344 	and.w	r3, r3, #68	; 0x44
   1f428:	2b44      	cmp	r3, #68	; 0x44
   1f42a:	d06d      	beq.n	1f508 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   1f42c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   1f430:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f438:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   1f43c:	f898 3000 	ldrb.w	r3, [r8]
   1f440:	2b2a      	cmp	r3, #42	; 0x2a
   1f442:	d068      	beq.n	1f516 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   1f444:	a805      	add	r0, sp, #20
   1f446:	f015 fb74 	bl	34b32 <extract_decimal>
	if (sp != wp) {
   1f44a:	9b05      	ldr	r3, [sp, #20]
   1f44c:	4598      	cmp	r8, r3
   1f44e:	d012      	beq.n	1f476 <cbvprintf+0x152>
		conv->width_present = true;
   1f450:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f458:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   1f45c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   1f45e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   1f462:	2800      	cmp	r0, #0
   1f464:	db60      	blt.n	1f528 <cbvprintf+0x204>
   1f466:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   1f468:	4313      	orrs	r3, r2
   1f46a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1f46e:	f363 0241 	bfi	r2, r3, #1, #1
   1f472:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   1f476:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   1f478:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1f47a:	781b      	ldrb	r3, [r3, #0]
   1f47c:	2b2e      	cmp	r3, #46	; 0x2e
   1f47e:	bf14      	ite	ne
   1f480:	2300      	movne	r3, #0
   1f482:	2301      	moveq	r3, #1
   1f484:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1f488:	f363 0241 	bfi	r2, r3, #1, #1
   1f48c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   1f490:	2b00      	cmp	r3, #0
   1f492:	d04b      	beq.n	1f52c <cbvprintf+0x208>
	++sp;
   1f494:	9b05      	ldr	r3, [sp, #20]
   1f496:	1c5a      	adds	r2, r3, #1
   1f498:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   1f49a:	785b      	ldrb	r3, [r3, #1]
   1f49c:	2b2a      	cmp	r3, #42	; 0x2a
   1f49e:	d048      	beq.n	1f532 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   1f4a0:	a805      	add	r0, sp, #20
   1f4a2:	f015 fb46 	bl	34b32 <extract_decimal>
	conv->prec_value = prec;
   1f4a6:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   1f4a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f4ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   1f4b0:	2800      	cmp	r0, #0
   1f4b2:	db47      	blt.n	1f544 <cbvprintf+0x220>
   1f4b4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   1f4b6:	4313      	orrs	r3, r2
   1f4b8:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1f4bc:	f363 0241 	bfi	r2, r3, #1, #1
   1f4c0:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   1f4c4:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   1f4c8:	f898 3000 	ldrb.w	r3, [r8]
   1f4cc:	3b4c      	subs	r3, #76	; 0x4c
   1f4ce:	2b2e      	cmp	r3, #46	; 0x2e
   1f4d0:	f200 80dc 	bhi.w	1f68c <cbvprintf+0x368>
   1f4d4:	e8df f003 	tbb	[pc, r3]
   1f4d8:	dadadaca 	.word	0xdadadaca
   1f4dc:	dadadada 	.word	0xdadadada
   1f4e0:	dadadada 	.word	0xdadadada
   1f4e4:	dadadada 	.word	0xdadadada
   1f4e8:	dadadada 	.word	0xdadadada
   1f4ec:	dadadada 	.word	0xdadadada
   1f4f0:	dadadada 	.word	0xdadadada
   1f4f4:	da6ada38 	.word	0xda6ada38
   1f4f8:	dadada51 	.word	0xdadada51
   1f4fc:	dadadada 	.word	0xdadadada
   1f500:	dadadac0 	.word	0xdadadac0
   1f504:	dada      	.short	0xdada
   1f506:	b6          	.byte	0xb6
   1f507:	00          	.byte	0x00
		conv->flag_zero = false;
   1f508:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f50c:	f36f 1386 	bfc	r3, #6, #1
   1f510:	f88d 3020 	strb.w	r3, [sp, #32]
   1f514:	e78a      	b.n	1f42c <cbvprintf+0x108>
		conv->width_star = true;
   1f516:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f51a:	f043 0301 	orr.w	r3, r3, #1
   1f51e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   1f522:	4643      	mov	r3, r8
   1f524:	3301      	adds	r3, #1
   1f526:	e7a7      	b.n	1f478 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   1f528:	2201      	movs	r2, #1
   1f52a:	e79d      	b.n	1f468 <cbvprintf+0x144>
		return sp;
   1f52c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1f530:	e7ca      	b.n	1f4c8 <cbvprintf+0x1a4>
		conv->prec_star = true;
   1f532:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f536:	f043 0304 	orr.w	r3, r3, #4
   1f53a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   1f53e:	f102 0801 	add.w	r8, r2, #1
   1f542:	e7c1      	b.n	1f4c8 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   1f544:	2201      	movs	r2, #1
   1f546:	e7b6      	b.n	1f4b6 <cbvprintf+0x192>
		if (*++sp == 'h') {
   1f548:	f108 0201 	add.w	r2, r8, #1
   1f54c:	f898 3001 	ldrb.w	r3, [r8, #1]
   1f550:	2b68      	cmp	r3, #104	; 0x68
   1f552:	d008      	beq.n	1f566 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   1f554:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f558:	2102      	movs	r1, #2
   1f55a:	f361 03c6 	bfi	r3, r1, #3, #4
   1f55e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   1f562:	4690      	mov	r8, r2
   1f564:	e02b      	b.n	1f5be <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   1f566:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f56a:	2201      	movs	r2, #1
   1f56c:	f362 03c6 	bfi	r3, r2, #3, #4
   1f570:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   1f574:	f108 0802 	add.w	r8, r8, #2
   1f578:	e021      	b.n	1f5be <cbvprintf+0x29a>
		if (*++sp == 'l') {
   1f57a:	f108 0201 	add.w	r2, r8, #1
   1f57e:	f898 3001 	ldrb.w	r3, [r8, #1]
   1f582:	2b6c      	cmp	r3, #108	; 0x6c
   1f584:	d008      	beq.n	1f598 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   1f586:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f58a:	2103      	movs	r1, #3
   1f58c:	f361 03c6 	bfi	r3, r1, #3, #4
   1f590:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   1f594:	4690      	mov	r8, r2
   1f596:	e012      	b.n	1f5be <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   1f598:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f59c:	2204      	movs	r2, #4
   1f59e:	f362 03c6 	bfi	r3, r2, #3, #4
   1f5a2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   1f5a6:	f108 0802 	add.w	r8, r8, #2
   1f5aa:	e008      	b.n	1f5be <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   1f5ac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f5b0:	2205      	movs	r2, #5
   1f5b2:	f362 03c6 	bfi	r3, r2, #3, #4
   1f5b6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1f5ba:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   1f5be:	f818 3b01 	ldrb.w	r3, [r8], #1
   1f5c2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   1f5c6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   1f5ca:	2a37      	cmp	r2, #55	; 0x37
   1f5cc:	f200 8150 	bhi.w	1f870 <cbvprintf+0x54c>
   1f5d0:	e8df f012 	tbh	[pc, r2, lsl #1]
   1f5d4:	014e0126 	.word	0x014e0126
   1f5d8:	014e014e 	.word	0x014e014e
   1f5dc:	01260126 	.word	0x01260126
   1f5e0:	014e0126 	.word	0x014e0126
   1f5e4:	014e014e 	.word	0x014e014e
   1f5e8:	014e014e 	.word	0x014e014e
   1f5ec:	014e014e 	.word	0x014e014e
   1f5f0:	014e014e 	.word	0x014e014e
   1f5f4:	014e014e 	.word	0x014e014e
   1f5f8:	014e014e 	.word	0x014e014e
   1f5fc:	014e014e 	.word	0x014e014e
   1f600:	0113014e 	.word	0x0113014e
   1f604:	014e014e 	.word	0x014e014e
   1f608:	014e014e 	.word	0x014e014e
   1f60c:	014e014e 	.word	0x014e014e
   1f610:	014e014e 	.word	0x014e014e
   1f614:	014e0126 	.word	0x014e0126
   1f618:	00630113 	.word	0x00630113
   1f61c:	01260126 	.word	0x01260126
   1f620:	014e0126 	.word	0x014e0126
   1f624:	014e0063 	.word	0x014e0063
   1f628:	014e014e 	.word	0x014e014e
   1f62c:	012f014e 	.word	0x012f014e
   1f630:	013f0113 	.word	0x013f0113
   1f634:	014e014e 	.word	0x014e014e
   1f638:	014e013f 	.word	0x014e013f
   1f63c:	014e0113 	.word	0x014e0113
   1f640:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   1f644:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f648:	2206      	movs	r2, #6
   1f64a:	f362 03c6 	bfi	r3, r2, #3, #4
   1f64e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1f652:	f108 0801 	add.w	r8, r8, #1
		break;
   1f656:	e7b2      	b.n	1f5be <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   1f658:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f65c:	2207      	movs	r2, #7
   1f65e:	f362 03c6 	bfi	r3, r2, #3, #4
   1f662:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1f666:	f108 0801 	add.w	r8, r8, #1
		break;
   1f66a:	e7a8      	b.n	1f5be <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   1f66c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f670:	2208      	movs	r2, #8
   1f672:	f362 03c6 	bfi	r3, r2, #3, #4
   1f676:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1f67a:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   1f67e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f682:	f043 0302 	orr.w	r3, r3, #2
   1f686:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   1f68a:	e798      	b.n	1f5be <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   1f68c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f690:	f36f 03c6 	bfc	r3, #3, #4
   1f694:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   1f698:	e791      	b.n	1f5be <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   1f69a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1f69e:	2101      	movs	r1, #1
   1f6a0:	f361 0202 	bfi	r2, r1, #0, #3
   1f6a4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   1f6a8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1f6ac:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1f6b0:	2a40      	cmp	r2, #64	; 0x40
   1f6b2:	f000 80aa 	beq.w	1f80a <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   1f6b6:	2b63      	cmp	r3, #99	; 0x63
   1f6b8:	f000 80ae 	beq.w	1f818 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   1f6bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f6c0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1f6c4:	4317      	orrs	r7, r2
   1f6c6:	f367 0341 	bfi	r3, r7, #1, #1
   1f6ca:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   1f6ce:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f6d2:	f013 0f01 	tst.w	r3, #1
   1f6d6:	f000 80da 	beq.w	1f88e <cbvprintf+0x56a>
			width = va_arg(ap, int);
   1f6da:	9b03      	ldr	r3, [sp, #12]
   1f6dc:	1d1a      	adds	r2, r3, #4
   1f6de:	9203      	str	r2, [sp, #12]
   1f6e0:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   1f6e2:	2f00      	cmp	r7, #0
   1f6e4:	f2c0 80cb 	blt.w	1f87e <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1f6e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f6ec:	f013 0f04 	tst.w	r3, #4
   1f6f0:	f000 80df 	beq.w	1f8b2 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   1f6f4:	9b03      	ldr	r3, [sp, #12]
   1f6f6:	1d1a      	adds	r2, r3, #4
   1f6f8:	9203      	str	r2, [sp, #12]
   1f6fa:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   1f6fe:	f1bb 0f00 	cmp.w	fp, #0
   1f702:	f2c0 80cd 	blt.w	1f8a0 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   1f706:	2300      	movs	r3, #0
   1f708:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   1f70a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   1f70c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1f710:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   1f714:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   1f718:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   1f71c:	2b01      	cmp	r3, #1
   1f71e:	f000 80d1 	beq.w	1f8c4 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   1f722:	2b02      	cmp	r3, #2
   1f724:	f000 8116 	beq.w	1f954 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1f728:	2b04      	cmp	r3, #4
   1f72a:	f000 8167 	beq.w	1f9fc <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   1f72e:	2b03      	cmp	r3, #3
   1f730:	f000 817e 	beq.w	1fa30 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   1f734:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1f738:	f019 0303 	ands.w	r3, r9, #3
   1f73c:	9302      	str	r3, [sp, #8]
   1f73e:	f040 817d 	bne.w	1fa3c <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   1f742:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1f746:	3b25      	subs	r3, #37	; 0x25
   1f748:	2b53      	cmp	r3, #83	; 0x53
   1f74a:	f200 8233 	bhi.w	1fbb4 <cbvprintf+0x890>
   1f74e:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f752:	0181      	.short	0x0181
   1f754:	02310231 	.word	0x02310231
   1f758:	02310231 	.word	0x02310231
   1f75c:	02310231 	.word	0x02310231
   1f760:	02310231 	.word	0x02310231
   1f764:	02310231 	.word	0x02310231
   1f768:	02310231 	.word	0x02310231
   1f76c:	02310231 	.word	0x02310231
   1f770:	02310231 	.word	0x02310231
   1f774:	02310231 	.word	0x02310231
   1f778:	02310231 	.word	0x02310231
   1f77c:	02310231 	.word	0x02310231
   1f780:	02310231 	.word	0x02310231
   1f784:	02310231 	.word	0x02310231
   1f788:	02310231 	.word	0x02310231
   1f78c:	02310231 	.word	0x02310231
   1f790:	02310231 	.word	0x02310231
   1f794:	02310231 	.word	0x02310231
   1f798:	02310231 	.word	0x02310231
   1f79c:	02310231 	.word	0x02310231
   1f7a0:	02310231 	.word	0x02310231
   1f7a4:	02310231 	.word	0x02310231
   1f7a8:	02310231 	.word	0x02310231
   1f7ac:	02310231 	.word	0x02310231
   1f7b0:	02310231 	.word	0x02310231
   1f7b4:	02310231 	.word	0x02310231
   1f7b8:	023101c7 	.word	0x023101c7
   1f7bc:	02310231 	.word	0x02310231
   1f7c0:	02310231 	.word	0x02310231
   1f7c4:	02310231 	.word	0x02310231
   1f7c8:	02310231 	.word	0x02310231
   1f7cc:	01a10231 	.word	0x01a10231
   1f7d0:	023101ab 	.word	0x023101ab
   1f7d4:	02310231 	.word	0x02310231
   1f7d8:	01ab0231 	.word	0x01ab0231
   1f7dc:	02310231 	.word	0x02310231
   1f7e0:	02310231 	.word	0x02310231
   1f7e4:	01c70208 	.word	0x01c70208
   1f7e8:	023101ea 	.word	0x023101ea
   1f7ec:	018f0231 	.word	0x018f0231
   1f7f0:	01c70231 	.word	0x01c70231
   1f7f4:	02310231 	.word	0x02310231
   1f7f8:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   1f7fa:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1f7fe:	2102      	movs	r1, #2
   1f800:	f361 0202 	bfi	r2, r1, #0, #3
   1f804:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   1f808:	e74e      	b.n	1f6a8 <cbvprintf+0x384>
			conv->invalid = true;
   1f80a:	f89d 1020 	ldrb.w	r1, [sp, #32]
   1f80e:	f041 0101 	orr.w	r1, r1, #1
   1f812:	f88d 1020 	strb.w	r1, [sp, #32]
   1f816:	e74e      	b.n	1f6b6 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1f818:	1e17      	subs	r7, r2, #0
   1f81a:	bf18      	it	ne
   1f81c:	2701      	movne	r7, #1
   1f81e:	e74d      	b.n	1f6bc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   1f820:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1f824:	2204      	movs	r2, #4
   1f826:	f362 0302 	bfi	r3, r2, #0, #3
   1f82a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   1f82e:	2701      	movs	r7, #1
			break;
   1f830:	e744      	b.n	1f6bc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   1f832:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1f836:	2203      	movs	r2, #3
   1f838:	f362 0302 	bfi	r3, r2, #0, #3
   1f83c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   1f840:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f844:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1f848:	2b40      	cmp	r3, #64	; 0x40
   1f84a:	f47f af37 	bne.w	1f6bc <cbvprintf+0x398>
			unsupported = true;
   1f84e:	2701      	movs	r7, #1
   1f850:	e734      	b.n	1f6bc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   1f852:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1f856:	2203      	movs	r2, #3
   1f858:	f362 0302 	bfi	r3, r2, #0, #3
   1f85c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   1f860:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f864:	f013 0f78 	tst.w	r3, #120	; 0x78
   1f868:	f43f af28 	beq.w	1f6bc <cbvprintf+0x398>
			unsupported = true;
   1f86c:	2701      	movs	r7, #1
   1f86e:	e725      	b.n	1f6bc <cbvprintf+0x398>
		conv->invalid = true;
   1f870:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f874:	f043 0301 	orr.w	r3, r3, #1
   1f878:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   1f87c:	e71e      	b.n	1f6bc <cbvprintf+0x398>
				conv->flag_dash = true;
   1f87e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f882:	f043 0304 	orr.w	r3, r3, #4
   1f886:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   1f88a:	427f      	negs	r7, r7
   1f88c:	e72c      	b.n	1f6e8 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   1f88e:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   1f892:	2b00      	cmp	r3, #0
   1f894:	db02      	blt.n	1f89c <cbvprintf+0x578>
		int width = -1;
   1f896:	f04f 37ff 	mov.w	r7, #4294967295
   1f89a:	e725      	b.n	1f6e8 <cbvprintf+0x3c4>
			width = conv->width_value;
   1f89c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1f89e:	e723      	b.n	1f6e8 <cbvprintf+0x3c4>
				conv->prec_present = false;
   1f8a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1f8a4:	f36f 0341 	bfc	r3, #1, #1
   1f8a8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   1f8ac:	f04f 3bff 	mov.w	fp, #4294967295
   1f8b0:	e729      	b.n	1f706 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   1f8b2:	f013 0f02 	tst.w	r3, #2
   1f8b6:	d002      	beq.n	1f8be <cbvprintf+0x59a>
			precision = conv->prec_value;
   1f8b8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1f8bc:	e723      	b.n	1f706 <cbvprintf+0x3e2>
		int precision = -1;
   1f8be:	f04f 3bff 	mov.w	fp, #4294967295
   1f8c2:	e720      	b.n	1f706 <cbvprintf+0x3e2>
			switch (length_mod) {
   1f8c4:	1ecb      	subs	r3, r1, #3
   1f8c6:	2b04      	cmp	r3, #4
   1f8c8:	d804      	bhi.n	1f8d4 <cbvprintf+0x5b0>
   1f8ca:	e8df f003 	tbb	[pc, r3]
   1f8ce:	1d0b      	.short	0x1d0b
   1f8d0:	3529      	.short	0x3529
   1f8d2:	35          	.byte	0x35
   1f8d3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1f8d4:	9b03      	ldr	r3, [sp, #12]
   1f8d6:	1d1a      	adds	r2, r3, #4
   1f8d8:	9203      	str	r2, [sp, #12]
   1f8da:	681a      	ldr	r2, [r3, #0]
   1f8dc:	17d3      	asrs	r3, r2, #31
   1f8de:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1f8e2:	e006      	b.n	1f8f2 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   1f8e4:	9b03      	ldr	r3, [sp, #12]
   1f8e6:	1d1a      	adds	r2, r3, #4
   1f8e8:	9203      	str	r2, [sp, #12]
   1f8ea:	681a      	ldr	r2, [r3, #0]
   1f8ec:	17d3      	asrs	r3, r2, #31
   1f8ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   1f8f2:	2901      	cmp	r1, #1
   1f8f4:	d028      	beq.n	1f948 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   1f8f6:	2902      	cmp	r1, #2
   1f8f8:	f47f af1c 	bne.w	1f734 <cbvprintf+0x410>
				value->sint = (short)value->sint;
   1f8fc:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   1f900:	17d3      	asrs	r3, r2, #31
   1f902:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f906:	e715      	b.n	1f734 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   1f908:	9b03      	ldr	r3, [sp, #12]
   1f90a:	3307      	adds	r3, #7
   1f90c:	f023 0307 	bic.w	r3, r3, #7
   1f910:	f103 0208 	add.w	r2, r3, #8
   1f914:	9203      	str	r2, [sp, #12]
   1f916:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1f91a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1f91e:	e7e8      	b.n	1f8f2 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   1f920:	9b03      	ldr	r3, [sp, #12]
   1f922:	3307      	adds	r3, #7
   1f924:	f023 0307 	bic.w	r3, r3, #7
   1f928:	f103 0208 	add.w	r2, r3, #8
   1f92c:	9203      	str	r2, [sp, #12]
   1f92e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1f932:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1f936:	e7dc      	b.n	1f8f2 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1f938:	9b03      	ldr	r3, [sp, #12]
   1f93a:	1d1a      	adds	r2, r3, #4
   1f93c:	9203      	str	r2, [sp, #12]
   1f93e:	681a      	ldr	r2, [r3, #0]
   1f940:	17d3      	asrs	r3, r2, #31
				value->sint =
   1f942:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1f946:	e7d4      	b.n	1f8f2 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   1f948:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1f94c:	9306      	str	r3, [sp, #24]
   1f94e:	2300      	movs	r3, #0
   1f950:	9307      	str	r3, [sp, #28]
   1f952:	e6ef      	b.n	1f734 <cbvprintf+0x410>
			switch (length_mod) {
   1f954:	1ecb      	subs	r3, r1, #3
   1f956:	2b04      	cmp	r3, #4
   1f958:	d804      	bhi.n	1f964 <cbvprintf+0x640>
   1f95a:	e8df f003 	tbb	[pc, r3]
   1f95e:	1f0b      	.short	0x1f0b
   1f960:	4135      	.short	0x4135
   1f962:	41          	.byte	0x41
   1f963:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   1f964:	9b03      	ldr	r3, [sp, #12]
   1f966:	1d1a      	adds	r2, r3, #4
   1f968:	9203      	str	r2, [sp, #12]
   1f96a:	681b      	ldr	r3, [r3, #0]
   1f96c:	9306      	str	r3, [sp, #24]
   1f96e:	2300      	movs	r3, #0
   1f970:	9307      	str	r3, [sp, #28]
				break;
   1f972:	e01e      	b.n	1f9b2 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   1f974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   1f978:	2b63      	cmp	r3, #99	; 0x63
   1f97a:	d007      	beq.n	1f98c <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   1f97c:	9b03      	ldr	r3, [sp, #12]
   1f97e:	1d1a      	adds	r2, r3, #4
   1f980:	9203      	str	r2, [sp, #12]
   1f982:	681b      	ldr	r3, [r3, #0]
   1f984:	9306      	str	r3, [sp, #24]
   1f986:	2300      	movs	r3, #0
   1f988:	9307      	str	r3, [sp, #28]
   1f98a:	e012      	b.n	1f9b2 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   1f98c:	9b03      	ldr	r3, [sp, #12]
   1f98e:	1d1a      	adds	r2, r3, #4
   1f990:	9203      	str	r2, [sp, #12]
   1f992:	681b      	ldr	r3, [r3, #0]
   1f994:	9306      	str	r3, [sp, #24]
   1f996:	2300      	movs	r3, #0
   1f998:	9307      	str	r3, [sp, #28]
   1f99a:	e00a      	b.n	1f9b2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   1f99c:	9b03      	ldr	r3, [sp, #12]
   1f99e:	3307      	adds	r3, #7
   1f9a0:	f023 0307 	bic.w	r3, r3, #7
   1f9a4:	f103 0208 	add.w	r2, r3, #8
   1f9a8:	9203      	str	r2, [sp, #12]
   1f9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1f9ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   1f9b2:	2901      	cmp	r1, #1
   1f9b4:	d01c      	beq.n	1f9f0 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   1f9b6:	2902      	cmp	r1, #2
   1f9b8:	f47f aebc 	bne.w	1f734 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   1f9bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1f9c0:	9306      	str	r3, [sp, #24]
   1f9c2:	2300      	movs	r3, #0
   1f9c4:	9307      	str	r3, [sp, #28]
   1f9c6:	e6b5      	b.n	1f734 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   1f9c8:	9b03      	ldr	r3, [sp, #12]
   1f9ca:	3307      	adds	r3, #7
   1f9cc:	f023 0307 	bic.w	r3, r3, #7
   1f9d0:	f103 0208 	add.w	r2, r3, #8
   1f9d4:	9203      	str	r2, [sp, #12]
   1f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1f9da:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1f9de:	e7e8      	b.n	1f9b2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   1f9e0:	9b03      	ldr	r3, [sp, #12]
   1f9e2:	1d1a      	adds	r2, r3, #4
   1f9e4:	9203      	str	r2, [sp, #12]
   1f9e6:	681b      	ldr	r3, [r3, #0]
				value->uint =
   1f9e8:	9306      	str	r3, [sp, #24]
   1f9ea:	2300      	movs	r3, #0
   1f9ec:	9307      	str	r3, [sp, #28]
				break;
   1f9ee:	e7e0      	b.n	1f9b2 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   1f9f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1f9f4:	9306      	str	r3, [sp, #24]
   1f9f6:	2300      	movs	r3, #0
   1f9f8:	9307      	str	r3, [sp, #28]
   1f9fa:	e69b      	b.n	1f734 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   1f9fc:	2908      	cmp	r1, #8
   1f9fe:	d00b      	beq.n	1fa18 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   1fa00:	9b03      	ldr	r3, [sp, #12]
   1fa02:	3307      	adds	r3, #7
   1fa04:	f023 0307 	bic.w	r3, r3, #7
   1fa08:	f103 0208 	add.w	r2, r3, #8
   1fa0c:	9203      	str	r2, [sp, #12]
   1fa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fa12:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fa16:	e68d      	b.n	1f734 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   1fa18:	9b03      	ldr	r3, [sp, #12]
   1fa1a:	3307      	adds	r3, #7
   1fa1c:	f023 0307 	bic.w	r3, r3, #7
   1fa20:	f103 0208 	add.w	r2, r3, #8
   1fa24:	9203      	str	r2, [sp, #12]
   1fa26:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fa2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fa2e:	e681      	b.n	1f734 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   1fa30:	9b03      	ldr	r3, [sp, #12]
   1fa32:	1d1a      	adds	r2, r3, #4
   1fa34:	9203      	str	r2, [sp, #12]
   1fa36:	681b      	ldr	r3, [r3, #0]
   1fa38:	9306      	str	r3, [sp, #24]
   1fa3a:	e67b      	b.n	1f734 <cbvprintf+0x410>
			OUTS(sp, fp);
   1fa3c:	4643      	mov	r3, r8
   1fa3e:	4652      	mov	r2, sl
   1fa40:	4629      	mov	r1, r5
   1fa42:	4630      	mov	r0, r6
   1fa44:	f015 f8f2 	bl	34c2c <outs>
   1fa48:	2800      	cmp	r0, #0
   1fa4a:	f2c0 814f 	blt.w	1fcec <cbvprintf+0x9c8>
   1fa4e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   1fa50:	46c2      	mov	sl, r8
			continue;
   1fa52:	e46f      	b.n	1f334 <cbvprintf+0x10>
		case '%':
			OUTC('%');
   1fa54:	4629      	mov	r1, r5
   1fa56:	2025      	movs	r0, #37	; 0x25
   1fa58:	47b0      	blx	r6
   1fa5a:	2800      	cmp	r0, #0
   1fa5c:	f2c0 8146 	blt.w	1fcec <cbvprintf+0x9c8>
   1fa60:	3401      	adds	r4, #1
		char sign = 0;
   1fa62:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1fa66:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1fa6a:	f04f 0a00 	mov.w	sl, #0
			break;
   1fa6e:	e0a7      	b.n	1fbc0 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   1fa70:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   1fa74:	f1bb 0f00 	cmp.w	fp, #0
   1fa78:	db08      	blt.n	1fa8c <cbvprintf+0x768>
				len = strnlen(bps, precision);
   1fa7a:	4659      	mov	r1, fp
   1fa7c:	4650      	mov	r0, sl
   1fa7e:	f017 f930 	bl	36ce2 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   1fa82:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   1fa86:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   1fa8a:	e099      	b.n	1fbc0 <cbvprintf+0x89c>
				len = strlen(bps);
   1fa8c:	4650      	mov	r0, sl
   1fa8e:	f017 f920 	bl	36cd2 <strlen>
   1fa92:	e7f6      	b.n	1fa82 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1fa94:	9b06      	ldr	r3, [sp, #24]
   1fa96:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   1fa9a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   1fa9e:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   1faa2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   1faa6:	e08b      	b.n	1fbc0 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   1faa8:	f019 0f08 	tst.w	r9, #8
   1faac:	d105      	bne.n	1faba <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   1faae:	f019 0910 	ands.w	r9, r9, #16
   1fab2:	d004      	beq.n	1fabe <cbvprintf+0x79a>
				sign = ' ';
   1fab4:	f04f 0920 	mov.w	r9, #32
   1fab8:	e001      	b.n	1fabe <cbvprintf+0x79a>
				sign = '+';
   1faba:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   1fabe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   1fac2:	2a00      	cmp	r2, #0
   1fac4:	f173 0100 	sbcs.w	r1, r3, #0
   1fac8:	db02      	blt.n	1fad0 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   1faca:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1face:	e009      	b.n	1fae4 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   1fad0:	4252      	negs	r2, r2
   1fad2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1fad6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   1fada:	f04f 092d 	mov.w	r9, #45	; 0x2d
   1fade:	e001      	b.n	1fae4 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   1fae0:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   1fae4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1fae8:	9300      	str	r3, [sp, #0]
   1faea:	ab0c      	add	r3, sp, #48	; 0x30
   1faec:	aa08      	add	r2, sp, #32
   1faee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1faf2:	f015 f831 	bl	34b58 <encode_uint>
   1faf6:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   1faf8:	f1bb 0f00 	cmp.w	fp, #0
   1fafc:	f2c0 8090 	blt.w	1fc20 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   1fb00:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1fb04:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   1fb08:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1fb0c:	f36f 1286 	bfc	r2, #6, #1
   1fb10:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   1fb14:	459b      	cmp	fp, r3
   1fb16:	f240 8086 	bls.w	1fc26 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   1fb1a:	ebab 0303 	sub.w	r3, fp, r3
   1fb1e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   1fb20:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1fb24:	e04c      	b.n	1fbc0 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   1fb26:	9806      	ldr	r0, [sp, #24]
   1fb28:	b930      	cbnz	r0, 1fb38 <cbvprintf+0x814>
		char sign = 0;
   1fb2a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1fb2e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 1fcf4 <cbvprintf+0x9d0>
			bps = "(nil)";
   1fb32:	f1ab 0a05 	sub.w	sl, fp, #5
   1fb36:	e043      	b.n	1fbc0 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1fb38:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1fb3c:	9300      	str	r3, [sp, #0]
   1fb3e:	ab0c      	add	r3, sp, #48	; 0x30
   1fb40:	aa08      	add	r2, sp, #32
   1fb42:	2100      	movs	r1, #0
   1fb44:	f015 f808 	bl	34b58 <encode_uint>
   1fb48:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1fb4a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1fb4e:	f043 0310 	orr.w	r3, r3, #16
   1fb52:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   1fb56:	2378      	movs	r3, #120	; 0x78
   1fb58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   1fb5c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   1fb60:	e7ca      	b.n	1faf8 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1fb62:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   1fb64:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1fb68:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1fb6c:	2b07      	cmp	r3, #7
   1fb6e:	d806      	bhi.n	1fb7e <cbvprintf+0x85a>
   1fb70:	e8df f003 	tbb	[pc, r3]
   1fb74:	100e0c04 	.word	0x100e0c04
   1fb78:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   1fb7c:	6014      	str	r4, [r2, #0]
		char sign = 0;
   1fb7e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1fb82:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1fb86:	f04f 0a00 	mov.w	sl, #0
}
   1fb8a:	e019      	b.n	1fbc0 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   1fb8c:	7014      	strb	r4, [r2, #0]
		break;
   1fb8e:	e7f6      	b.n	1fb7e <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   1fb90:	8014      	strh	r4, [r2, #0]
		break;
   1fb92:	e7f4      	b.n	1fb7e <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   1fb94:	6014      	str	r4, [r2, #0]
		break;
   1fb96:	e7f2      	b.n	1fb7e <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   1fb98:	4620      	mov	r0, r4
   1fb9a:	17e1      	asrs	r1, r4, #31
   1fb9c:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   1fba0:	e7ed      	b.n	1fb7e <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   1fba2:	4620      	mov	r0, r4
   1fba4:	17e1      	asrs	r1, r4, #31
   1fba6:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   1fbaa:	e7e8      	b.n	1fb7e <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   1fbac:	6014      	str	r4, [r2, #0]
		break;
   1fbae:	e7e6      	b.n	1fb7e <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1fbb0:	6014      	str	r4, [r2, #0]
		break;
   1fbb2:	e7e4      	b.n	1fb7e <cbvprintf+0x85a>
		switch (conv->specifier) {
   1fbb4:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1fbb8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1fbbc:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   1fbc0:	f1ba 0f00 	cmp.w	sl, #0
   1fbc4:	f000 808e 	beq.w	1fce4 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   1fbc8:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   1fbcc:	f1b9 0f00 	cmp.w	r9, #0
   1fbd0:	d000      	beq.n	1fbd4 <cbvprintf+0x8b0>
			nj_len += 1U;
   1fbd2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   1fbd4:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   1fbd8:	f011 0f10 	tst.w	r1, #16
   1fbdc:	d026      	beq.n	1fc2c <cbvprintf+0x908>
			nj_len += 2U;
   1fbde:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   1fbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fbe2:	4413      	add	r3, r2
		if (conv->pad_fp) {
   1fbe4:	f011 0f40 	tst.w	r1, #64	; 0x40
   1fbe8:	d001      	beq.n	1fbee <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   1fbea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fbec:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1fbee:	2f00      	cmp	r7, #0
   1fbf0:	dd32      	ble.n	1fc58 <cbvprintf+0x934>
			width -= (int)nj_len;
   1fbf2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   1fbf4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1fbf8:	f013 0f04 	tst.w	r3, #4
   1fbfc:	d12c      	bne.n	1fc58 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1fbfe:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fc02:	d018      	beq.n	1fc36 <cbvprintf+0x912>
					if (sign != 0) {
   1fc04:	f1b9 0f00 	cmp.w	r9, #0
   1fc08:	d018      	beq.n	1fc3c <cbvprintf+0x918>
						OUTC(sign);
   1fc0a:	4629      	mov	r1, r5
   1fc0c:	4648      	mov	r0, r9
   1fc0e:	47b0      	blx	r6
   1fc10:	2800      	cmp	r0, #0
   1fc12:	db6b      	blt.n	1fcec <cbvprintf+0x9c8>
   1fc14:	3401      	adds	r4, #1
						sign = 0;
   1fc16:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   1fc1a:	2330      	movs	r3, #48	; 0x30
   1fc1c:	9302      	str	r3, [sp, #8]
   1fc1e:	e00f      	b.n	1fc40 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   1fc20:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1fc24:	e7cc      	b.n	1fbc0 <cbvprintf+0x89c>
   1fc26:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1fc2a:	e7c9      	b.n	1fbc0 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   1fc2c:	f011 0f08 	tst.w	r1, #8
   1fc30:	d0d6      	beq.n	1fbe0 <cbvprintf+0x8bc>
			nj_len += 1U;
   1fc32:	3201      	adds	r2, #1
   1fc34:	e7d4      	b.n	1fbe0 <cbvprintf+0x8bc>
				char pad = ' ';
   1fc36:	2320      	movs	r3, #32
   1fc38:	9302      	str	r3, [sp, #8]
   1fc3a:	e001      	b.n	1fc40 <cbvprintf+0x91c>
					pad = '0';
   1fc3c:	2330      	movs	r3, #48	; 0x30
   1fc3e:	9302      	str	r3, [sp, #8]
   1fc40:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   1fc42:	1e5f      	subs	r7, r3, #1
   1fc44:	2b00      	cmp	r3, #0
   1fc46:	dd07      	ble.n	1fc58 <cbvprintf+0x934>
					OUTC(pad);
   1fc48:	4629      	mov	r1, r5
   1fc4a:	9802      	ldr	r0, [sp, #8]
   1fc4c:	47b0      	blx	r6
   1fc4e:	2800      	cmp	r0, #0
   1fc50:	db4c      	blt.n	1fcec <cbvprintf+0x9c8>
   1fc52:	3401      	adds	r4, #1
				while (width-- > 0) {
   1fc54:	463b      	mov	r3, r7
   1fc56:	e7f4      	b.n	1fc42 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   1fc58:	f1b9 0f00 	cmp.w	r9, #0
   1fc5c:	d005      	beq.n	1fc6a <cbvprintf+0x946>
			OUTC(sign);
   1fc5e:	4629      	mov	r1, r5
   1fc60:	4648      	mov	r0, r9
   1fc62:	47b0      	blx	r6
   1fc64:	2800      	cmp	r0, #0
   1fc66:	db41      	blt.n	1fcec <cbvprintf+0x9c8>
   1fc68:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   1fc6a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1fc6e:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1fc72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1fc76:	4313      	orrs	r3, r2
   1fc78:	d005      	beq.n	1fc86 <cbvprintf+0x962>
				OUTC('0');
   1fc7a:	4629      	mov	r1, r5
   1fc7c:	2030      	movs	r0, #48	; 0x30
   1fc7e:	47b0      	blx	r6
   1fc80:	2800      	cmp	r0, #0
   1fc82:	db33      	blt.n	1fcec <cbvprintf+0x9c8>
   1fc84:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   1fc86:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1fc8a:	f013 0f10 	tst.w	r3, #16
   1fc8e:	d006      	beq.n	1fc9e <cbvprintf+0x97a>
				OUTC(conv->specifier);
   1fc90:	4629      	mov	r1, r5
   1fc92:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1fc96:	47b0      	blx	r6
   1fc98:	2800      	cmp	r0, #0
   1fc9a:	db27      	blt.n	1fcec <cbvprintf+0x9c8>
   1fc9c:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   1fc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   1fca0:	f103 39ff 	add.w	r9, r3, #4294967295
   1fca4:	2b00      	cmp	r3, #0
   1fca6:	dd07      	ble.n	1fcb8 <cbvprintf+0x994>
				OUTC('0');
   1fca8:	4629      	mov	r1, r5
   1fcaa:	2030      	movs	r0, #48	; 0x30
   1fcac:	47b0      	blx	r6
   1fcae:	2800      	cmp	r0, #0
   1fcb0:	db1c      	blt.n	1fcec <cbvprintf+0x9c8>
   1fcb2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1fcb4:	464b      	mov	r3, r9
   1fcb6:	e7f3      	b.n	1fca0 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   1fcb8:	465b      	mov	r3, fp
   1fcba:	4652      	mov	r2, sl
   1fcbc:	4629      	mov	r1, r5
   1fcbe:	4630      	mov	r0, r6
   1fcc0:	f014 ffb4 	bl	34c2c <outs>
   1fcc4:	2800      	cmp	r0, #0
   1fcc6:	db11      	blt.n	1fcec <cbvprintf+0x9c8>
   1fcc8:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   1fcca:	2f00      	cmp	r7, #0
   1fccc:	dd07      	ble.n	1fcde <cbvprintf+0x9ba>
			OUTC(' ');
   1fcce:	4629      	mov	r1, r5
   1fcd0:	2020      	movs	r0, #32
   1fcd2:	47b0      	blx	r6
   1fcd4:	2800      	cmp	r0, #0
   1fcd6:	db09      	blt.n	1fcec <cbvprintf+0x9c8>
   1fcd8:	3401      	adds	r4, #1
			--width;
   1fcda:	3f01      	subs	r7, #1
   1fcdc:	e7f5      	b.n	1fcca <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   1fcde:	46c2      	mov	sl, r8
   1fce0:	f7ff bb28 	b.w	1f334 <cbvprintf+0x10>
   1fce4:	46c2      	mov	sl, r8
   1fce6:	f7ff bb25 	b.w	1f334 <cbvprintf+0x10>
		}
	}

	return count;
   1fcea:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   1fcec:	b013      	add	sp, #76	; 0x4c
   1fcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcf2:	bf00      	nop
   1fcf4:	0003dc91 	.word	0x0003dc91

0001fcf8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   1fcf8:	b508      	push	{r3, lr}
   1fcfa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fcfe:	f3ef 8311 	mrs	r3, BASEPRI
   1fd02:	f382 8812 	msr	BASEPRI_MAX, r2
   1fd06:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1fd0a:	f003 f8c9 	bl	22ea0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1fd0e:	4803      	ldr	r0, [pc, #12]	; (1fd1c <sys_reboot+0x24>)
   1fd10:	f014 fbad 	bl	3446e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1fd14:	f002 f95c 	bl	21fd0 <arch_cpu_idle>
   1fd18:	e7fc      	b.n	1fd14 <sys_reboot+0x1c>
   1fd1a:	bf00      	nop
   1fd1c:	0003dc94 	.word	0x0003dc94

0001fd20 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   1fd20:	4b05      	ldr	r3, [pc, #20]	; (1fd38 <is_rodata+0x18>)
   1fd22:	4298      	cmp	r0, r3
   1fd24:	d304      	bcc.n	1fd30 <is_rodata+0x10>
   1fd26:	4b05      	ldr	r3, [pc, #20]	; (1fd3c <is_rodata+0x1c>)
   1fd28:	4298      	cmp	r0, r3
   1fd2a:	d303      	bcc.n	1fd34 <is_rodata+0x14>
   1fd2c:	2000      	movs	r0, #0
   1fd2e:	4770      	bx	lr
   1fd30:	2000      	movs	r0, #0
   1fd32:	4770      	bx	lr
   1fd34:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   1fd36:	4770      	bx	lr
   1fd38:	0003ce48 	.word	0x0003ce48
   1fd3c:	00040c24 	.word	0x00040c24

0001fd40 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   1fd40:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   1fd42:	4b06      	ldr	r3, [pc, #24]	; (1fd5c <thread_set+0x1c>)
   1fd44:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1fd46:	b118      	cbz	r0, 1fd50 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1fd48:	4b05      	ldr	r3, [pc, #20]	; (1fd60 <thread_set+0x20>)
   1fd4a:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   1fd4c:	2b09      	cmp	r3, #9
   1fd4e:	dc00      	bgt.n	1fd52 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   1fd50:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   1fd52:	4804      	ldr	r0, [pc, #16]	; (1fd64 <thread_set+0x24>)
   1fd54:	f010 fa8a 	bl	3026c <z_impl_k_sem_give>
}
   1fd58:	e7fa      	b.n	1fd50 <thread_set+0x10>
   1fd5a:	bf00      	nop
   1fd5c:	20007b48 	.word	0x20007b48
   1fd60:	20007b18 	.word	0x20007b18
   1fd64:	20000b38 	.word	0x20000b38

0001fd68 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   1fd68:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1fd6a:	4802      	ldr	r0, [pc, #8]	; (1fd74 <log_process_thread_timer_expiry_fn+0xc>)
   1fd6c:	f010 fa7e 	bl	3026c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   1fd70:	bd08      	pop	{r3, pc}
   1fd72:	bf00      	nop
   1fd74:	20000b38 	.word	0x20000b38

0001fd78 <next_pending>:
{
   1fd78:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   1fd7a:	4803      	ldr	r0, [pc, #12]	; (1fd88 <next_pending+0x10>)
   1fd7c:	f014 ff7f 	bl	34c7e <log_list_head_peek>
}
   1fd80:	3800      	subs	r0, #0
   1fd82:	bf18      	it	ne
   1fd84:	2001      	movne	r0, #1
   1fd86:	bd08      	pop	{r3, pc}
   1fd88:	20007b24 	.word	0x20007b24

0001fd8c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1fd8c:	b530      	push	{r4, r5, lr}
   1fd8e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1fd90:	2200      	movs	r2, #0
   1fd92:	490f      	ldr	r1, [pc, #60]	; (1fdd0 <enable_logger+0x44>)
   1fd94:	480f      	ldr	r0, [pc, #60]	; (1fdd4 <enable_logger+0x48>)
   1fd96:	f01c febd 	bl	3cb14 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fd9a:	4d0f      	ldr	r5, [pc, #60]	; (1fdd8 <enable_logger+0x4c>)
   1fd9c:	2200      	movs	r2, #0
   1fd9e:	2300      	movs	r3, #0
   1fda0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fda4:	2400      	movs	r4, #0
   1fda6:	9404      	str	r4, [sp, #16]
   1fda8:	230e      	movs	r3, #14
   1fdaa:	9303      	str	r3, [sp, #12]
   1fdac:	9402      	str	r4, [sp, #8]
   1fdae:	9401      	str	r4, [sp, #4]
   1fdb0:	9400      	str	r4, [sp, #0]
   1fdb2:	4b0a      	ldr	r3, [pc, #40]	; (1fddc <enable_logger+0x50>)
   1fdb4:	f44f 7240 	mov.w	r2, #768	; 0x300
   1fdb8:	4909      	ldr	r1, [pc, #36]	; (1fde0 <enable_logger+0x54>)
   1fdba:	4628      	mov	r0, r5
   1fdbc:	f01c f9f1 	bl	3c1a2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1fdc0:	4908      	ldr	r1, [pc, #32]	; (1fde4 <enable_logger+0x58>)
   1fdc2:	4628      	mov	r0, r5
   1fdc4:	f010 f85a 	bl	2fe7c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   1fdc8:	4620      	mov	r0, r4
   1fdca:	b009      	add	sp, #36	; 0x24
   1fdcc:	bd30      	pop	{r4, r5, pc}
   1fdce:	bf00      	nop
   1fdd0:	0001fd69 	.word	0x0001fd69
   1fdd4:	20001d00 	.word	0x20001d00
   1fdd8:	20001d38 	.word	0x20001d38
   1fddc:	000204cd 	.word	0x000204cd
   1fde0:	2000e9c0 	.word	0x2000e9c0
   1fde4:	0003dcc0 	.word	0x0003dcc0

0001fde8 <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1fde8:	4b18      	ldr	r3, [pc, #96]	; (1fe4c <log_init+0x64>)
   1fdea:	f3bf 8f5b 	dmb	ish
   1fdee:	e853 2f00 	ldrex	r2, [r3]
   1fdf2:	1c51      	adds	r1, r2, #1
   1fdf4:	e843 1000 	strex	r0, r1, [r3]
   1fdf8:	2800      	cmp	r0, #0
   1fdfa:	d1f8      	bne.n	1fdee <log_init+0x6>
   1fdfc:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   1fe00:	bb1a      	cbnz	r2, 1fe4a <log_init+0x62>
{
   1fe02:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   1fe04:	2400      	movs	r4, #0
   1fe06:	e009      	b.n	1fe1c <log_init+0x34>
					   backend->cb->ctx,
   1fe08:	4b11      	ldr	r3, [pc, #68]	; (1fe50 <log_init+0x68>)
   1fe0a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1fe0e:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   1fe10:	2204      	movs	r2, #4
   1fe12:	6819      	ldr	r1, [r3, #0]
   1fe14:	4628      	mov	r0, r5
   1fe16:	f000 fb9d 	bl	20554 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1fe1a:	3401      	adds	r4, #1
   1fe1c:	4b0d      	ldr	r3, [pc, #52]	; (1fe54 <log_init+0x6c>)
   1fe1e:	4a0c      	ldr	r2, [pc, #48]	; (1fe50 <log_init+0x68>)
   1fe20:	1a9b      	subs	r3, r3, r2
   1fe22:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   1fe26:	da0f      	bge.n	1fe48 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
   1fe28:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   1fe2a:	4d09      	ldr	r5, [pc, #36]	; (1fe50 <log_init+0x68>)
   1fe2c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   1fe30:	7b2b      	ldrb	r3, [r5, #12]
   1fe32:	2b00      	cmp	r3, #0
   1fe34:	d0f1      	beq.n	1fe1a <log_init+0x32>
			if (backend->api->init != NULL) {
   1fe36:	0123      	lsls	r3, r4, #4
   1fe38:	4a05      	ldr	r2, [pc, #20]	; (1fe50 <log_init+0x68>)
   1fe3a:	58d3      	ldr	r3, [r2, r3]
   1fe3c:	699b      	ldr	r3, [r3, #24]
   1fe3e:	2b00      	cmp	r3, #0
   1fe40:	d0e2      	beq.n	1fe08 <log_init+0x20>
				backend->api->init(backend);
   1fe42:	4628      	mov	r0, r5
   1fe44:	4798      	blx	r3
   1fe46:	e7df      	b.n	1fe08 <log_init+0x20>
}
   1fe48:	bd70      	pop	{r4, r5, r6, pc}
   1fe4a:	4770      	bx	lr
   1fe4c:	20007b20 	.word	0x20007b20
   1fe50:	0003d2dc 	.word	0x0003d2dc
   1fe54:	0003d2ec 	.word	0x0003d2ec

0001fe58 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   1fe58:	b138      	cbz	r0, 1fe6a <log_set_timestamp_func+0x12>
{
   1fe5a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   1fe5c:	4a04      	ldr	r2, [pc, #16]	; (1fe70 <log_set_timestamp_func+0x18>)
   1fe5e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   1fe60:	4608      	mov	r0, r1
   1fe62:	f000 fdef 	bl	20a44 <log_output_timestamp_freq_set>
	return 0;
   1fe66:	2000      	movs	r0, #0
}
   1fe68:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1fe6a:	f06f 0015 	mvn.w	r0, #21
}
   1fe6e:	4770      	bx	lr
   1fe70:	200004a8 	.word	0x200004a8

0001fe74 <log_core_init>:
{
   1fe74:	b508      	push	{r3, lr}
	panic_mode = false;
   1fe76:	2300      	movs	r3, #0
   1fe78:	4a0a      	ldr	r2, [pc, #40]	; (1fea4 <log_core_init+0x30>)
   1fe7a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1fe7c:	4a0a      	ldr	r2, [pc, #40]	; (1fea8 <log_core_init+0x34>)
   1fe7e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   1fe80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1fe84:	4809      	ldr	r0, [pc, #36]	; (1feac <log_core_init+0x38>)
   1fe86:	f7ff ffe7 	bl	1fe58 <log_set_timestamp_func>
		log_msg_pool_init();
   1fe8a:	f000 fb85 	bl	20598 <log_msg_pool_init>
		log_list_init(&list);
   1fe8e:	4808      	ldr	r0, [pc, #32]	; (1feb0 <log_core_init+0x3c>)
   1fe90:	f014 fee7 	bl	34c62 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   1fe94:	2308      	movs	r3, #8
   1fe96:	2248      	movs	r2, #72	; 0x48
   1fe98:	4906      	ldr	r1, [pc, #24]	; (1feb4 <log_core_init+0x40>)
   1fe9a:	4807      	ldr	r0, [pc, #28]	; (1feb8 <log_core_init+0x44>)
   1fe9c:	f01c f91e 	bl	3c0dc <k_mem_slab_init>
}
   1fea0:	bd08      	pop	{r3, pc}
   1fea2:	bf00      	nop
   1fea4:	2000da70 	.word	0x2000da70
   1fea8:	20007b1c 	.word	0x20007b1c
   1feac:	00034c97 	.word	0x00034c97
   1feb0:	20007b24 	.word	0x20007b24
   1feb4:	20014360 	.word	0x20014360
   1feb8:	20007b2c 	.word	0x20007b2c

0001febc <get_msg>:
{
   1febc:	b510      	push	{r4, lr}
   1febe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fec2:	f3ef 8411 	mrs	r4, BASEPRI
   1fec6:	f383 8812 	msr	BASEPRI_MAX, r3
   1feca:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   1fece:	4804      	ldr	r0, [pc, #16]	; (1fee0 <get_msg+0x24>)
   1fed0:	f014 fed7 	bl	34c82 <log_list_head_get>
	__asm__ volatile(
   1fed4:	f384 8811 	msr	BASEPRI, r4
   1fed8:	f3bf 8f6f 	isb	sy
}
   1fedc:	bd10      	pop	{r4, pc}
   1fede:	bf00      	nop
   1fee0:	20007b24 	.word	0x20007b24

0001fee4 <z_log_notify_backend_enabled>:
{
   1fee4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1fee6:	4b05      	ldr	r3, [pc, #20]	; (1fefc <z_log_notify_backend_enabled+0x18>)
   1fee8:	781b      	ldrb	r3, [r3, #0]
   1feea:	b11b      	cbz	r3, 1fef4 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   1feec:	4b03      	ldr	r3, [pc, #12]	; (1fefc <z_log_notify_backend_enabled+0x18>)
   1feee:	2201      	movs	r2, #1
   1fef0:	701a      	strb	r2, [r3, #0]
}
   1fef2:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   1fef4:	4802      	ldr	r0, [pc, #8]	; (1ff00 <z_log_notify_backend_enabled+0x1c>)
   1fef6:	f010 f9b9 	bl	3026c <z_impl_k_sem_give>
}
   1fefa:	e7f7      	b.n	1feec <z_log_notify_backend_enabled+0x8>
   1fefc:	2000da6f 	.word	0x2000da6f
   1ff00:	20000b38 	.word	0x20000b38

0001ff04 <z_log_dropped>:
   1ff04:	4b0c      	ldr	r3, [pc, #48]	; (1ff38 <z_log_dropped+0x34>)
   1ff06:	f3bf 8f5b 	dmb	ish
   1ff0a:	e853 2f00 	ldrex	r2, [r3]
   1ff0e:	3201      	adds	r2, #1
   1ff10:	e843 2100 	strex	r1, r2, [r3]
   1ff14:	2900      	cmp	r1, #0
   1ff16:	d1f8      	bne.n	1ff0a <z_log_dropped+0x6>
   1ff18:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ff1c:	4b07      	ldr	r3, [pc, #28]	; (1ff3c <z_log_dropped+0x38>)
   1ff1e:	f3bf 8f5b 	dmb	ish
   1ff22:	e853 2f00 	ldrex	r2, [r3]
   1ff26:	3a01      	subs	r2, #1
   1ff28:	e843 2100 	strex	r1, r2, [r3]
   1ff2c:	2900      	cmp	r1, #0
   1ff2e:	d1f8      	bne.n	1ff22 <z_log_dropped+0x1e>
   1ff30:	f3bf 8f5b 	dmb	ish
}
   1ff34:	4770      	bx	lr
   1ff36:	bf00      	nop
   1ff38:	20007b1c 	.word	0x20007b1c
   1ff3c:	20007b18 	.word	0x20007b18

0001ff40 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ff40:	4b06      	ldr	r3, [pc, #24]	; (1ff5c <z_log_dropped_read_and_clear+0x1c>)
}
   1ff42:	2000      	movs	r0, #0
   1ff44:	4602      	mov	r2, r0
   1ff46:	f3bf 8f5b 	dmb	ish
   1ff4a:	e853 0f00 	ldrex	r0, [r3]
   1ff4e:	e843 2100 	strex	r1, r2, [r3]
   1ff52:	2900      	cmp	r1, #0
   1ff54:	d1f9      	bne.n	1ff4a <z_log_dropped_read_and_clear+0xa>
   1ff56:	f3bf 8f5b 	dmb	ish
   1ff5a:	4770      	bx	lr
   1ff5c:	20007b1c 	.word	0x20007b1c

0001ff60 <dropped_notify>:
{
   1ff60:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1ff62:	f7ff ffed 	bl	1ff40 <z_log_dropped_read_and_clear>
   1ff66:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   1ff68:	2400      	movs	r4, #0
   1ff6a:	e000      	b.n	1ff6e <dropped_notify+0xe>
   1ff6c:	3401      	adds	r4, #1
   1ff6e:	4b0b      	ldr	r3, [pc, #44]	; (1ff9c <dropped_notify+0x3c>)
   1ff70:	4a0b      	ldr	r2, [pc, #44]	; (1ffa0 <dropped_notify+0x40>)
   1ff72:	1a9b      	subs	r3, r3, r2
   1ff74:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   1ff78:	da0f      	bge.n	1ff9a <dropped_notify+0x3a>
   1ff7a:	4809      	ldr	r0, [pc, #36]	; (1ffa0 <dropped_notify+0x40>)
   1ff7c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1ff80:	6843      	ldr	r3, [r0, #4]
   1ff82:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   1ff84:	2b00      	cmp	r3, #0
   1ff86:	d0f1      	beq.n	1ff6c <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   1ff88:	0123      	lsls	r3, r4, #4
   1ff8a:	4a05      	ldr	r2, [pc, #20]	; (1ffa0 <dropped_notify+0x40>)
   1ff8c:	58d3      	ldr	r3, [r2, r3]
   1ff8e:	691b      	ldr	r3, [r3, #16]
   1ff90:	2b00      	cmp	r3, #0
   1ff92:	d0eb      	beq.n	1ff6c <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   1ff94:	4629      	mov	r1, r5
   1ff96:	4798      	blx	r3
   1ff98:	e7e8      	b.n	1ff6c <dropped_notify+0xc>
}
   1ff9a:	bd38      	pop	{r3, r4, r5, pc}
   1ff9c:	0003d2ec 	.word	0x0003d2ec
   1ffa0:	0003d2dc 	.word	0x0003d2dc

0001ffa4 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   1ffa4:	4b03      	ldr	r3, [pc, #12]	; (1ffb4 <z_log_dropped_pending+0x10>)
   1ffa6:	6818      	ldr	r0, [r3, #0]
}
   1ffa8:	2800      	cmp	r0, #0
   1ffaa:	bfd4      	ite	le
   1ffac:	2000      	movle	r0, #0
   1ffae:	2001      	movgt	r0, #1
   1ffb0:	4770      	bx	lr
   1ffb2:	bf00      	nop
   1ffb4:	20007b1c 	.word	0x20007b1c

0001ffb8 <z_log_strdup>:
{
   1ffb8:	b510      	push	{r4, lr}
   1ffba:	b082      	sub	sp, #8
   1ffbc:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   1ffbe:	f7ff feaf 	bl	1fd20 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1ffc2:	bb10      	cbnz	r0, 2000a <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   1ffc4:	2200      	movs	r2, #0
   1ffc6:	2300      	movs	r3, #0
   1ffc8:	a901      	add	r1, sp, #4
   1ffca:	4811      	ldr	r0, [pc, #68]	; (20010 <z_log_strdup+0x58>)
   1ffcc:	f00f fefc 	bl	2fdc8 <k_mem_slab_alloc>
	if (err != 0) {
   1ffd0:	b108      	cbz	r0, 1ffd6 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   1ffd2:	4c10      	ldr	r4, [pc, #64]	; (20014 <z_log_strdup+0x5c>)
   1ffd4:	e019      	b.n	2000a <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   1ffd6:	9b01      	ldr	r3, [sp, #4]
   1ffd8:	2201      	movs	r2, #1
   1ffda:	f3bf 8f5b 	dmb	ish
   1ffde:	e853 1f00 	ldrex	r1, [r3]
   1ffe2:	e843 2000 	strex	r0, r2, [r3]
   1ffe6:	2800      	cmp	r0, #0
   1ffe8:	d1f9      	bne.n	1ffde <z_log_strdup+0x26>
   1ffea:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   1ffee:	2241      	movs	r2, #65	; 0x41
   1fff0:	4621      	mov	r1, r4
   1fff2:	9801      	ldr	r0, [sp, #4]
   1fff4:	3004      	adds	r0, #4
   1fff6:	f016 fe52 	bl	36c9e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   1fffa:	9c01      	ldr	r4, [sp, #4]
   1fffc:	237e      	movs	r3, #126	; 0x7e
   1fffe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   20002:	2300      	movs	r3, #0
   20004:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	return dup->buf;
   20008:	3404      	adds	r4, #4
}
   2000a:	4620      	mov	r0, r4
   2000c:	b002      	add	sp, #8
   2000e:	bd10      	pop	{r4, pc}
   20010:	20007b2c 	.word	0x20007b2c
   20014:	0003dcc8 	.word	0x0003dcc8

00020018 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   20018:	b140      	cbz	r0, 2002c <log_is_strdup+0x14>
   2001a:	4a07      	ldr	r2, [pc, #28]	; (20038 <log_is_strdup+0x20>)
   2001c:	4290      	cmp	r0, r2
   2001e:	d307      	bcc.n	20030 <log_is_strdup+0x18>
   20020:	f502 7210 	add.w	r2, r2, #576	; 0x240
   20024:	4290      	cmp	r0, r2
   20026:	d305      	bcc.n	20034 <log_is_strdup+0x1c>
   20028:	2000      	movs	r0, #0
   2002a:	4770      	bx	lr
   2002c:	2000      	movs	r0, #0
   2002e:	4770      	bx	lr
   20030:	2000      	movs	r0, #0
   20032:	4770      	bx	lr
   20034:	2001      	movs	r0, #1
}
   20036:	4770      	bx	lr
   20038:	20014360 	.word	0x20014360

0002003c <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2003c:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   2003e:	f013 0f01 	tst.w	r3, #1
   20042:	d000      	beq.n	20046 <detect_missed_strdup+0xa>
   20044:	4770      	bx	lr
{
   20046:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2004a:	b083      	sub	sp, #12
   2004c:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   2004e:	f014 ff05 	bl	34e5c <log_msg_str_get>
   20052:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   20054:	4630      	mov	r0, r6
   20056:	f014 feec 	bl	34e32 <log_msg_nargs_get>
   2005a:	4601      	mov	r1, r0
   2005c:	4638      	mov	r0, r7
   2005e:	f014 fe1e 	bl	34c9e <z_log_get_s_mask>
   20062:	4605      	mov	r5, r0
	while (mask) {
   20064:	e004      	b.n	20070 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   20066:	2301      	movs	r3, #1
   20068:	fa03 f404 	lsl.w	r4, r3, r4
   2006c:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   20070:	b36d      	cbz	r5, 200ce <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   20072:	fab5 f485 	clz	r4, r5
   20076:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   2007a:	4621      	mov	r1, r4
   2007c:	4630      	mov	r0, r6
   2007e:	f014 fedb 	bl	34e38 <log_msg_arg_get>
   20082:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   20084:	f7ff fe4c 	bl	1fd20 <is_rodata>
   20088:	2800      	cmp	r0, #0
   2008a:	d1ec      	bne.n	20066 <detect_missed_strdup+0x2a>
   2008c:	4648      	mov	r0, r9
   2008e:	f7ff ffc3 	bl	20018 <log_is_strdup>
   20092:	2800      	cmp	r0, #0
   20094:	d1e7      	bne.n	20066 <detect_missed_strdup+0x2a>
   20096:	4b0f      	ldr	r3, [pc, #60]	; (200d4 <detect_missed_strdup+0x98>)
   20098:	4599      	cmp	r9, r3
   2009a:	d0e4      	beq.n	20066 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   2009c:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   2009e:	f3c1 1189 	ubfx	r1, r1, #6, #10
   200a2:	f000 fa47 	bl	20534 <log_source_name_get>
   200a6:	4602      	mov	r2, r0
   200a8:	4b0b      	ldr	r3, [pc, #44]	; (200d8 <detect_missed_strdup+0x9c>)
   200aa:	490c      	ldr	r1, [pc, #48]	; (200dc <detect_missed_strdup+0xa0>)
   200ac:	1a5b      	subs	r3, r3, r1
   200ae:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   200b0:	2101      	movs	r1, #1
   200b2:	f361 0802 	bfi	r8, r1, #0, #3
   200b6:	f36f 08c5 	bfc	r8, #3, #3
   200ba:	f363 188f 	bfi	r8, r3, #6, #10
   200be:	f8ad 8000 	strh.w	r8, [sp]
   200c2:	463b      	mov	r3, r7
   200c4:	4621      	mov	r1, r4
   200c6:	4806      	ldr	r0, [pc, #24]	; (200e0 <detect_missed_strdup+0xa4>)
   200c8:	f000 f8b0 	bl	2022c <log_3>
   200cc:	e7cb      	b.n	20066 <detect_missed_strdup+0x2a>
}
   200ce:	b003      	add	sp, #12
   200d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   200d4:	0003dcc8 	.word	0x0003dcc8
   200d8:	0003d25c 	.word	0x0003d25c
   200dc:	0003d1a4 	.word	0x0003d1a4
   200e0:	0003dce4 	.word	0x0003dce4

000200e4 <msg_process>:
{
   200e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200e6:	4606      	mov	r6, r0
	if (!bypass) {
   200e8:	bb19      	cbnz	r1, 20132 <msg_process+0x4e>
		    !panic_mode) {
   200ea:	4b14      	ldr	r3, [pc, #80]	; (2013c <msg_process+0x58>)
   200ec:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   200ee:	b10b      	cbz	r3, 200f4 <msg_process+0x10>
{
   200f0:	2400      	movs	r4, #0
   200f2:	e003      	b.n	200fc <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   200f4:	f7ff ffa2 	bl	2003c <detect_missed_strdup>
   200f8:	e7fa      	b.n	200f0 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   200fa:	3401      	adds	r4, #1
   200fc:	4b10      	ldr	r3, [pc, #64]	; (20140 <msg_process+0x5c>)
   200fe:	4a11      	ldr	r2, [pc, #68]	; (20144 <msg_process+0x60>)
   20100:	1a9b      	subs	r3, r3, r2
   20102:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   20106:	da14      	bge.n	20132 <msg_process+0x4e>
	return &__log_backends_start[idx];
   20108:	4d0e      	ldr	r5, [pc, #56]	; (20144 <msg_process+0x60>)
   2010a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   2010e:	686b      	ldr	r3, [r5, #4]
   20110:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   20112:	2b00      	cmp	r3, #0
   20114:	d0f1      	beq.n	200fa <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   20116:	4631      	mov	r1, r6
   20118:	4628      	mov	r0, r5
   2011a:	f014 fdba 	bl	34c92 <msg_filter_check>
			if (log_backend_is_active(backend) &&
   2011e:	2800      	cmp	r0, #0
   20120:	d0eb      	beq.n	200fa <msg_process+0x16>
	backend->api->put(backend, msg);
   20122:	0127      	lsls	r7, r4, #4
   20124:	4b07      	ldr	r3, [pc, #28]	; (20144 <msg_process+0x60>)
   20126:	59db      	ldr	r3, [r3, r7]
   20128:	685b      	ldr	r3, [r3, #4]
   2012a:	4631      	mov	r1, r6
   2012c:	4628      	mov	r0, r5
   2012e:	4798      	blx	r3
}
   20130:	e7e3      	b.n	200fa <msg_process+0x16>
			log_msg_put(msg.msg);
   20132:	4630      	mov	r0, r6
   20134:	f014 fe94 	bl	34e60 <log_msg_put>
}
   20138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2013a:	bf00      	nop
   2013c:	2000da70 	.word	0x2000da70
   20140:	0003d2ec 	.word	0x0003d2ec
   20144:	0003d2dc 	.word	0x0003d2dc

00020148 <z_impl_log_process>:
{
   20148:	b510      	push	{r4, lr}
   2014a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   2014c:	4b11      	ldr	r3, [pc, #68]	; (20194 <z_impl_log_process+0x4c>)
   2014e:	781b      	ldrb	r3, [r3, #0]
   20150:	b903      	cbnz	r3, 20154 <z_impl_log_process+0xc>
   20152:	b1d0      	cbz	r0, 2018a <z_impl_log_process+0x42>
	msg = get_msg();
   20154:	f7ff feb2 	bl	1febc <get_msg>
	if (msg.msg) {
   20158:	4603      	mov	r3, r0
   2015a:	b180      	cbz	r0, 2017e <z_impl_log_process+0x36>
		if (!bypass) {
   2015c:	b95c      	cbnz	r4, 20176 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2015e:	4a0e      	ldr	r2, [pc, #56]	; (20198 <z_impl_log_process+0x50>)
   20160:	f3bf 8f5b 	dmb	ish
   20164:	e852 1f00 	ldrex	r1, [r2]
   20168:	3901      	subs	r1, #1
   2016a:	e842 1000 	strex	r0, r1, [r2]
   2016e:	2800      	cmp	r0, #0
   20170:	d1f8      	bne.n	20164 <z_impl_log_process+0x1c>
   20172:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   20176:	4621      	mov	r1, r4
   20178:	4618      	mov	r0, r3
   2017a:	f7ff ffb3 	bl	200e4 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   2017e:	b914      	cbnz	r4, 20186 <z_impl_log_process+0x3e>
   20180:	f7ff ff10 	bl	1ffa4 <z_log_dropped_pending>
   20184:	b910      	cbnz	r0, 2018c <z_impl_log_process+0x44>
	return next_pending();
   20186:	f7ff fdf7 	bl	1fd78 <next_pending>
}
   2018a:	bd10      	pop	{r4, pc}
		dropped_notify();
   2018c:	f7ff fee8 	bl	1ff60 <dropped_notify>
   20190:	e7f9      	b.n	20186 <z_impl_log_process+0x3e>
   20192:	bf00      	nop
   20194:	2000da6f 	.word	0x2000da6f
   20198:	20007b18 	.word	0x20007b18

0002019c <z_log_msg_post_finalize>:
{
   2019c:	b510      	push	{r4, lr}
   2019e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   201a0:	4b1d      	ldr	r3, [pc, #116]	; (20218 <z_log_msg_post_finalize+0x7c>)
   201a2:	f3bf 8f5b 	dmb	ish
   201a6:	e853 2f00 	ldrex	r2, [r3]
   201aa:	1c51      	adds	r1, r2, #1
   201ac:	e843 1000 	strex	r0, r1, [r3]
   201b0:	2800      	cmp	r0, #0
   201b2:	d1f8      	bne.n	201a6 <z_log_msg_post_finalize+0xa>
   201b4:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   201b8:	4b18      	ldr	r3, [pc, #96]	; (2021c <z_log_msg_post_finalize+0x80>)
   201ba:	781b      	ldrb	r3, [r3, #0]
   201bc:	b93b      	cbnz	r3, 201ce <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
   201be:	4b18      	ldr	r3, [pc, #96]	; (20220 <z_log_msg_post_finalize+0x84>)
   201c0:	681b      	ldr	r3, [r3, #0]
   201c2:	b103      	cbz	r3, 201c6 <z_log_msg_post_finalize+0x2a>
   201c4:	b19a      	cbz	r2, 201ee <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   201c6:	2a0a      	cmp	r2, #10
   201c8:	d01c      	beq.n	20204 <z_log_msg_post_finalize+0x68>
}
   201ca:	b002      	add	sp, #8
   201cc:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   201ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   201d2:	f3ef 8411 	mrs	r4, BASEPRI
   201d6:	f383 8812 	msr	BASEPRI_MAX, r3
   201da:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   201de:	2000      	movs	r0, #0
   201e0:	f7ff ffb2 	bl	20148 <z_impl_log_process>
	__asm__ volatile(
   201e4:	f384 8811 	msr	BASEPRI, r4
   201e8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   201ec:	e7ed      	b.n	201ca <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
   201ee:	2200      	movs	r2, #0
   201f0:	2300      	movs	r3, #0
   201f2:	e9cd 2300 	strd	r2, r3, [sp]
   201f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   201fa:	2300      	movs	r3, #0
   201fc:	4809      	ldr	r0, [pc, #36]	; (20224 <z_log_msg_post_finalize+0x88>)
   201fe:	f011 f85d 	bl	312bc <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
   20202:	e7e2      	b.n	201ca <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   20204:	2b00      	cmp	r3, #0
   20206:	d0e0      	beq.n	201ca <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
   20208:	4806      	ldr	r0, [pc, #24]	; (20224 <z_log_msg_post_finalize+0x88>)
   2020a:	f01c fc8f 	bl	3cb2c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   2020e:	4806      	ldr	r0, [pc, #24]	; (20228 <z_log_msg_post_finalize+0x8c>)
   20210:	f010 f82c 	bl	3026c <z_impl_k_sem_give>
}
   20214:	e7d9      	b.n	201ca <z_log_msg_post_finalize+0x2e>
   20216:	bf00      	nop
   20218:	20007b18 	.word	0x20007b18
   2021c:	2000da70 	.word	0x2000da70
   20220:	20007b48 	.word	0x20007b48
   20224:	20001d00 	.word	0x20001d00
   20228:	20000b38 	.word	0x20000b38

0002022c <log_3>:
{
   2022c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20230:	4680      	mov	r8, r0
   20232:	460f      	mov	r7, r1
   20234:	4616      	mov	r6, r2
   20236:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   20238:	f000 f9d2 	bl	205e0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   2023c:	4604      	mov	r4, r0
   2023e:	b140      	cbz	r0, 20252 <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   20240:	2301      	movs	r3, #1
   20242:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   20244:	2200      	movs	r2, #0
   20246:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   20248:	f04f 0300 	mov.w	r3, #0
   2024c:	f362 0300 	bfi	r3, r2, #0, #1
   20250:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   20252:	b14c      	cbz	r4, 20268 <log_3+0x3c>
		msg->str = str;
   20254:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   20258:	7a63      	ldrb	r3, [r4, #9]
   2025a:	2203      	movs	r2, #3
   2025c:	f362 1307 	bfi	r3, r2, #4, #4
   20260:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   20262:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   20264:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   20266:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   20268:	b1c4      	cbz	r4, 2029c <log_3+0x70>
	msg->hdr.ids = src_level;
   2026a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2026e:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   20270:	4b0b      	ldr	r3, [pc, #44]	; (202a0 <log_3+0x74>)
   20272:	681b      	ldr	r3, [r3, #0]
   20274:	4798      	blx	r3
   20276:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   20278:	f04f 0340 	mov.w	r3, #64	; 0x40
   2027c:	f3ef 8511 	mrs	r5, BASEPRI
   20280:	f383 8812 	msr	BASEPRI_MAX, r3
   20284:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   20288:	4621      	mov	r1, r4
   2028a:	4806      	ldr	r0, [pc, #24]	; (202a4 <log_3+0x78>)
   2028c:	f014 fced 	bl	34c6a <log_list_add_tail>
	__asm__ volatile(
   20290:	f385 8811 	msr	BASEPRI, r5
   20294:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   20298:	f7ff ff80 	bl	2019c <z_log_msg_post_finalize>
}
   2029c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202a0:	200004a8 	.word	0x200004a8
   202a4:	20007b24 	.word	0x20007b24

000202a8 <log_1>:
{
   202a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202aa:	4606      	mov	r6, r0
   202ac:	460d      	mov	r5, r1
   202ae:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   202b0:	f000 f996 	bl	205e0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   202b4:	4604      	mov	r4, r0
   202b6:	b140      	cbz	r0, 202ca <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   202b8:	2301      	movs	r3, #1
   202ba:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   202bc:	2100      	movs	r1, #0
   202be:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   202c0:	f04f 0300 	mov.w	r3, #0
   202c4:	f361 0300 	bfi	r3, r1, #0, #1
   202c8:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   202ca:	b134      	cbz	r4, 202da <log_1+0x32>
		msg->str = str;
   202cc:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   202ce:	7a63      	ldrb	r3, [r4, #9]
   202d0:	2201      	movs	r2, #1
   202d2:	f362 1307 	bfi	r3, r2, #4, #4
   202d6:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   202d8:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   202da:	b1b4      	cbz	r4, 2030a <log_1+0x62>
	msg->hdr.ids = src_level;
   202dc:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   202de:	4b0b      	ldr	r3, [pc, #44]	; (2030c <log_1+0x64>)
   202e0:	681b      	ldr	r3, [r3, #0]
   202e2:	4798      	blx	r3
   202e4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   202e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   202ea:	f3ef 8511 	mrs	r5, BASEPRI
   202ee:	f383 8812 	msr	BASEPRI_MAX, r3
   202f2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   202f6:	4621      	mov	r1, r4
   202f8:	4805      	ldr	r0, [pc, #20]	; (20310 <log_1+0x68>)
   202fa:	f014 fcb6 	bl	34c6a <log_list_add_tail>
	__asm__ volatile(
   202fe:	f385 8811 	msr	BASEPRI, r5
   20302:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   20306:	f7ff ff49 	bl	2019c <z_log_msg_post_finalize>
}
   2030a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2030c:	200004a8 	.word	0x200004a8
   20310:	20007b24 	.word	0x20007b24

00020314 <log_2>:
{
   20314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20318:	4607      	mov	r7, r0
   2031a:	460e      	mov	r6, r1
   2031c:	4615      	mov	r5, r2
   2031e:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   20320:	f000 f95e 	bl	205e0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   20324:	4604      	mov	r4, r0
   20326:	b140      	cbz	r0, 2033a <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   20328:	2301      	movs	r3, #1
   2032a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2032c:	2200      	movs	r2, #0
   2032e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   20330:	f04f 0300 	mov.w	r3, #0
   20334:	f362 0300 	bfi	r3, r2, #0, #1
   20338:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   2033a:	b13c      	cbz	r4, 2034c <log_2+0x38>
		msg->str = str;
   2033c:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   2033e:	7a63      	ldrb	r3, [r4, #9]
   20340:	2202      	movs	r2, #2
   20342:	f362 1307 	bfi	r3, r2, #4, #4
   20346:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   20348:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   2034a:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   2034c:	b1bc      	cbz	r4, 2037e <log_2+0x6a>
	msg->hdr.ids = src_level;
   2034e:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   20352:	4b0c      	ldr	r3, [pc, #48]	; (20384 <log_2+0x70>)
   20354:	681b      	ldr	r3, [r3, #0]
   20356:	4798      	blx	r3
   20358:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2035a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2035e:	f3ef 8511 	mrs	r5, BASEPRI
   20362:	f383 8812 	msr	BASEPRI_MAX, r3
   20366:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   2036a:	4621      	mov	r1, r4
   2036c:	4806      	ldr	r0, [pc, #24]	; (20388 <log_2+0x74>)
   2036e:	f014 fc7c 	bl	34c6a <log_list_add_tail>
	__asm__ volatile(
   20372:	f385 8811 	msr	BASEPRI, r5
   20376:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   2037a:	f7ff ff0f 	bl	2019c <z_log_msg_post_finalize>
}
   2037e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20382:	bf00      	nop
   20384:	200004a8 	.word	0x200004a8
   20388:	20007b24 	.word	0x20007b24

0002038c <log_n>:
{
   2038c:	b538      	push	{r3, r4, r5, lr}
   2038e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   20390:	f014 fdaa 	bl	34ee8 <log_msg_create_n>
		if (msg == NULL) {
   20394:	b1b8      	cbz	r0, 203c6 <log_n+0x3a>
   20396:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   20398:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   2039a:	4b0b      	ldr	r3, [pc, #44]	; (203c8 <log_n+0x3c>)
   2039c:	681b      	ldr	r3, [r3, #0]
   2039e:	4798      	blx	r3
   203a0:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   203a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   203a6:	f3ef 8411 	mrs	r4, BASEPRI
   203aa:	f383 8812 	msr	BASEPRI_MAX, r3
   203ae:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   203b2:	4629      	mov	r1, r5
   203b4:	4805      	ldr	r0, [pc, #20]	; (203cc <log_n+0x40>)
   203b6:	f014 fc58 	bl	34c6a <log_list_add_tail>
	__asm__ volatile(
   203ba:	f384 8811 	msr	BASEPRI, r4
   203be:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   203c2:	f7ff feeb 	bl	2019c <z_log_msg_post_finalize>
}
   203c6:	bd38      	pop	{r3, r4, r5, pc}
   203c8:	200004a8 	.word	0x200004a8
   203cc:	20007b24 	.word	0x20007b24

000203d0 <log_hexdump>:
{
   203d0:	b538      	push	{r3, r4, r5, lr}
   203d2:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   203d4:	f014 fd9c 	bl	34f10 <log_msg_hexdump_create>
		if (msg == NULL) {
   203d8:	b1b8      	cbz	r0, 2040a <log_hexdump+0x3a>
   203da:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   203dc:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   203de:	4b0b      	ldr	r3, [pc, #44]	; (2040c <log_hexdump+0x3c>)
   203e0:	681b      	ldr	r3, [r3, #0]
   203e2:	4798      	blx	r3
   203e4:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   203e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   203ea:	f3ef 8411 	mrs	r4, BASEPRI
   203ee:	f383 8812 	msr	BASEPRI_MAX, r3
   203f2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   203f6:	4629      	mov	r1, r5
   203f8:	4805      	ldr	r0, [pc, #20]	; (20410 <log_hexdump+0x40>)
   203fa:	f014 fc36 	bl	34c6a <log_list_add_tail>
	__asm__ volatile(
   203fe:	f384 8811 	msr	BASEPRI, r4
   20402:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   20406:	f7ff fec9 	bl	2019c <z_log_msg_post_finalize>
}
   2040a:	bd38      	pop	{r3, r4, r5, pc}
   2040c:	200004a8 	.word	0x200004a8
   20410:	20007b24 	.word	0x20007b24

00020414 <log_0>:
{
   20414:	b570      	push	{r4, r5, r6, lr}
   20416:	4605      	mov	r5, r0
   20418:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2041a:	f000 f8e1 	bl	205e0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   2041e:	4604      	mov	r4, r0
   20420:	b140      	cbz	r0, 20434 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
   20422:	2301      	movs	r3, #1
   20424:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   20426:	2200      	movs	r2, #0
   20428:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   2042a:	f04f 0300 	mov.w	r3, #0
   2042e:	f362 0300 	bfi	r3, r2, #0, #1
   20432:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   20434:	b104      	cbz	r4, 20438 <log_0+0x24>
		msg->str = str;
   20436:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   20438:	b1b4      	cbz	r4, 20468 <log_0+0x54>
	msg->hdr.ids = src_level;
   2043a:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   2043c:	4b0b      	ldr	r3, [pc, #44]	; (2046c <log_0+0x58>)
   2043e:	681b      	ldr	r3, [r3, #0]
   20440:	4798      	blx	r3
   20442:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   20444:	f04f 0340 	mov.w	r3, #64	; 0x40
   20448:	f3ef 8511 	mrs	r5, BASEPRI
   2044c:	f383 8812 	msr	BASEPRI_MAX, r3
   20450:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   20454:	4621      	mov	r1, r4
   20456:	4806      	ldr	r0, [pc, #24]	; (20470 <log_0+0x5c>)
   20458:	f014 fc07 	bl	34c6a <log_list_add_tail>
	__asm__ volatile(
   2045c:	f385 8811 	msr	BASEPRI, r5
   20460:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   20464:	f7ff fe9a 	bl	2019c <z_log_msg_post_finalize>
}
   20468:	bd70      	pop	{r4, r5, r6, pc}
   2046a:	bf00      	nop
   2046c:	200004a8 	.word	0x200004a8
   20470:	20007b24 	.word	0x20007b24

00020474 <z_impl_log_panic>:
	if (panic_mode) {
   20474:	4b12      	ldr	r3, [pc, #72]	; (204c0 <z_impl_log_panic+0x4c>)
   20476:	781b      	ldrb	r3, [r3, #0]
   20478:	b103      	cbz	r3, 2047c <z_impl_log_panic+0x8>
   2047a:	4770      	bx	lr
{
   2047c:	b510      	push	{r4, lr}
	log_init();
   2047e:	f7ff fcb3 	bl	1fde8 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   20482:	2400      	movs	r4, #0
   20484:	e000      	b.n	20488 <z_impl_log_panic+0x14>
   20486:	3401      	adds	r4, #1
   20488:	4b0e      	ldr	r3, [pc, #56]	; (204c4 <z_impl_log_panic+0x50>)
   2048a:	4a0f      	ldr	r2, [pc, #60]	; (204c8 <z_impl_log_panic+0x54>)
   2048c:	1a9b      	subs	r3, r3, r2
   2048e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   20492:	da0c      	bge.n	204ae <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   20494:	480c      	ldr	r0, [pc, #48]	; (204c8 <z_impl_log_panic+0x54>)
   20496:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   2049a:	6843      	ldr	r3, [r0, #4]
   2049c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   2049e:	2b00      	cmp	r3, #0
   204a0:	d0f1      	beq.n	20486 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   204a2:	0123      	lsls	r3, r4, #4
   204a4:	4a08      	ldr	r2, [pc, #32]	; (204c8 <z_impl_log_panic+0x54>)
   204a6:	58d3      	ldr	r3, [r2, r3]
   204a8:	695b      	ldr	r3, [r3, #20]
   204aa:	4798      	blx	r3
}
   204ac:	e7eb      	b.n	20486 <z_impl_log_panic+0x12>
   204ae:	2000      	movs	r0, #0
   204b0:	f7ff fe4a 	bl	20148 <z_impl_log_process>
		while (log_process(false) == true) {
   204b4:	2800      	cmp	r0, #0
   204b6:	d1fa      	bne.n	204ae <z_impl_log_panic+0x3a>
	panic_mode = true;
   204b8:	4b01      	ldr	r3, [pc, #4]	; (204c0 <z_impl_log_panic+0x4c>)
   204ba:	2201      	movs	r2, #1
   204bc:	701a      	strb	r2, [r3, #0]
}
   204be:	bd10      	pop	{r4, pc}
   204c0:	2000da70 	.word	0x2000da70
   204c4:	0003d2ec 	.word	0x0003d2ec
   204c8:	0003d2dc 	.word	0x0003d2dc

000204cc <log_process_thread_func>:
{
   204cc:	b508      	push	{r3, lr}
	log_init();
   204ce:	f7ff fc8b 	bl	1fde8 <log_init>
	return z_impl_z_current_get();
   204d2:	f010 fccb 	bl	30e6c <z_impl_z_current_get>
	thread_set(k_current_get());
   204d6:	f7ff fc33 	bl	1fd40 <thread_set>
   204da:	e006      	b.n	204ea <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
   204dc:	f04f 32ff 	mov.w	r2, #4294967295
   204e0:	f04f 33ff 	mov.w	r3, #4294967295
   204e4:	4804      	ldr	r0, [pc, #16]	; (204f8 <log_process_thread_func+0x2c>)
   204e6:	f00f fee9 	bl	302bc <z_impl_k_sem_take>
   204ea:	2000      	movs	r0, #0
   204ec:	f7ff fe2c 	bl	20148 <z_impl_log_process>
		if (log_process(false) == false) {
   204f0:	2800      	cmp	r0, #0
   204f2:	d1fa      	bne.n	204ea <log_process_thread_func+0x1e>
   204f4:	e7f2      	b.n	204dc <log_process_thread_func+0x10>
   204f6:	bf00      	nop
   204f8:	20000b38 	.word	0x20000b38

000204fc <z_log_free>:
{
   204fc:	b500      	push	{lr}
   204fe:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   20500:	3804      	subs	r0, #4
   20502:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20504:	f3bf 8f5b 	dmb	ish
   20508:	e850 3f00 	ldrex	r3, [r0]
   2050c:	1e5a      	subs	r2, r3, #1
   2050e:	e840 2100 	strex	r1, r2, [r0]
   20512:	2900      	cmp	r1, #0
   20514:	d1f8      	bne.n	20508 <z_log_free+0xc>
   20516:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   2051a:	2b01      	cmp	r3, #1
   2051c:	d002      	beq.n	20524 <z_log_free+0x28>
}
   2051e:	b003      	add	sp, #12
   20520:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   20524:	a901      	add	r1, sp, #4
   20526:	4802      	ldr	r0, [pc, #8]	; (20530 <z_log_free+0x34>)
   20528:	f01b fde6 	bl	3c0f8 <k_mem_slab_free>
}
   2052c:	e7f7      	b.n	2051e <z_log_free+0x22>
   2052e:	bf00      	nop
   20530:	20007b2c 	.word	0x20007b2c

00020534 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   20534:	4b05      	ldr	r3, [pc, #20]	; (2054c <log_source_name_get+0x18>)
   20536:	4a06      	ldr	r2, [pc, #24]	; (20550 <log_source_name_get+0x1c>)
   20538:	1a9b      	subs	r3, r3, r2
   2053a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   2053e:	d202      	bcs.n	20546 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   20540:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   20544:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   20546:	2000      	movs	r0, #0
}
   20548:	4770      	bx	lr
   2054a:	bf00      	nop
   2054c:	0003d2dc 	.word	0x0003d2dc
   20550:	0003d1a4 	.word	0x0003d1a4

00020554 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   20554:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   20556:	4b07      	ldr	r3, [pc, #28]	; (20574 <log_backend_enable+0x20>)
   20558:	1ac3      	subs	r3, r0, r3
   2055a:	111b      	asrs	r3, r3, #4
   2055c:	3301      	adds	r3, #1
	backend->cb->id = id;
   2055e:	6842      	ldr	r2, [r0, #4]
   20560:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   20562:	6843      	ldr	r3, [r0, #4]
   20564:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   20566:	6843      	ldr	r3, [r0, #4]
   20568:	2201      	movs	r2, #1
   2056a:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   2056c:	f7ff fcba 	bl	1fee4 <z_log_notify_backend_enabled>
}
   20570:	bd08      	pop	{r3, pc}
   20572:	bf00      	nop
   20574:	0003d2dc 	.word	0x0003d2dc

00020578 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   20578:	b510      	push	{r4, lr}
   2057a:	b082      	sub	sp, #8
   2057c:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   2057e:	9b01      	ldr	r3, [sp, #4]
   20580:	b133      	cbz	r3, 20590 <cont_free+0x18>
		next = cont->next;
   20582:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   20584:	a901      	add	r1, sp, #4
   20586:	4803      	ldr	r0, [pc, #12]	; (20594 <cont_free+0x1c>)
   20588:	f01b fdb6 	bl	3c0f8 <k_mem_slab_free>
		cont = next;
   2058c:	9401      	str	r4, [sp, #4]
   2058e:	e7f6      	b.n	2057e <cont_free+0x6>
	}
}
   20590:	b002      	add	sp, #8
   20592:	bd10      	pop	{r4, pc}
   20594:	20007b4c 	.word	0x20007b4c

00020598 <log_msg_pool_init>:
{
   20598:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   2059a:	2320      	movs	r3, #32
   2059c:	461a      	mov	r2, r3
   2059e:	4902      	ldr	r1, [pc, #8]	; (205a8 <log_msg_pool_init+0x10>)
   205a0:	4802      	ldr	r0, [pc, #8]	; (205ac <log_msg_pool_init+0x14>)
   205a2:	f01b fd9b 	bl	3c0dc <k_mem_slab_init>
}
   205a6:	bd08      	pop	{r3, pc}
   205a8:	200145a0 	.word	0x200145a0
   205ac:	20007b4c 	.word	0x20007b4c

000205b0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   205b0:	b510      	push	{r4, lr}
   205b2:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   205b4:	2300      	movs	r3, #0
   205b6:	9301      	str	r3, [sp, #4]
   205b8:	2001      	movs	r0, #1
   205ba:	f7ff fdc5 	bl	20148 <z_impl_log_process>
   205be:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   205c0:	f7ff fca0 	bl	1ff04 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   205c4:	2200      	movs	r2, #0
   205c6:	2300      	movs	r3, #0
   205c8:	a901      	add	r1, sp, #4
   205ca:	4804      	ldr	r0, [pc, #16]	; (205dc <log_msg_no_space_handle+0x2c>)
   205cc:	f00f fbfc 	bl	2fdc8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   205d0:	b108      	cbz	r0, 205d6 <log_msg_no_space_handle+0x26>
   205d2:	2c00      	cmp	r4, #0
   205d4:	d1f0      	bne.n	205b8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   205d6:	9801      	ldr	r0, [sp, #4]
   205d8:	b002      	add	sp, #8
   205da:	bd10      	pop	{r4, pc}
   205dc:	20007b4c 	.word	0x20007b4c

000205e0 <log_msg_chunk_alloc>:
{
   205e0:	b500      	push	{lr}
   205e2:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   205e4:	2300      	movs	r3, #0
   205e6:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   205e8:	f014 fb7c 	bl	34ce4 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   205ec:	b150      	cbz	r0, 20604 <log_msg_chunk_alloc+0x24>
   205ee:	2200      	movs	r2, #0
   205f0:	2300      	movs	r3, #0
   205f2:	a901      	add	r1, sp, #4
   205f4:	4807      	ldr	r0, [pc, #28]	; (20614 <log_msg_chunk_alloc+0x34>)
   205f6:	f00f fbe7 	bl	2fdc8 <k_mem_slab_alloc>
	if (err != 0) {
   205fa:	b930      	cbnz	r0, 2060a <log_msg_chunk_alloc+0x2a>
}
   205fc:	9801      	ldr	r0, [sp, #4]
   205fe:	b003      	add	sp, #12
   20600:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   20604:	2200      	movs	r2, #0
   20606:	2300      	movs	r3, #0
   20608:	e7f3      	b.n	205f2 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   2060a:	f7ff ffd1 	bl	205b0 <log_msg_no_space_handle>
   2060e:	9001      	str	r0, [sp, #4]
   20610:	e7f4      	b.n	205fc <log_msg_chunk_alloc+0x1c>
   20612:	bf00      	nop
   20614:	20007b4c 	.word	0x20007b4c

00020618 <msg_free>:
{
   20618:	b5f0      	push	{r4, r5, r6, r7, lr}
   2061a:	b083      	sub	sp, #12
   2061c:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   2061e:	4604      	mov	r4, r0
   20620:	f014 fc07 	bl	34e32 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20624:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   20626:	f013 0f01 	tst.w	r3, #1
   2062a:	d101      	bne.n	20630 <msg_free+0x18>
   2062c:	4606      	mov	r6, r0
   2062e:	bb50      	cbnz	r0, 20686 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   20630:	9b01      	ldr	r3, [sp, #4]
   20632:	7a1a      	ldrb	r2, [r3, #8]
   20634:	f012 0f02 	tst.w	r2, #2
   20638:	d128      	bne.n	2068c <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   2063a:	a901      	add	r1, sp, #4
   2063c:	4815      	ldr	r0, [pc, #84]	; (20694 <msg_free+0x7c>)
   2063e:	f01b fd5b 	bl	3c0f8 <k_mem_slab_free>
}
   20642:	b003      	add	sp, #12
   20644:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   20646:	9801      	ldr	r0, [sp, #4]
   20648:	f014 fc08 	bl	34e5c <log_msg_str_get>
   2064c:	4631      	mov	r1, r6
   2064e:	f014 fb26 	bl	34c9e <z_log_get_s_mask>
					if (smask == 0U) {
   20652:	4607      	mov	r7, r0
   20654:	b988      	cbnz	r0, 2067a <msg_free+0x62>
   20656:	e7eb      	b.n	20630 <msg_free+0x18>
					z_log_free(buf);
   20658:	4628      	mov	r0, r5
   2065a:	f7ff ff4f 	bl	204fc <z_log_free>
		for (i = 0U; i < nargs; i++) {
   2065e:	3401      	adds	r4, #1
   20660:	42b4      	cmp	r4, r6
   20662:	d2e5      	bcs.n	20630 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   20664:	4621      	mov	r1, r4
   20666:	9801      	ldr	r0, [sp, #4]
   20668:	f014 fbe6 	bl	34e38 <log_msg_arg_get>
   2066c:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   2066e:	f7ff fcd3 	bl	20018 <log_is_strdup>
   20672:	2800      	cmp	r0, #0
   20674:	d0f3      	beq.n	2065e <msg_free+0x46>
				if (smask == 0U) {
   20676:	2f00      	cmp	r7, #0
   20678:	d0e5      	beq.n	20646 <msg_free+0x2e>
				if (smask & BIT(i)) {
   2067a:	fa27 f304 	lsr.w	r3, r7, r4
   2067e:	f013 0f01 	tst.w	r3, #1
   20682:	d0ec      	beq.n	2065e <msg_free+0x46>
   20684:	e7e8      	b.n	20658 <msg_free+0x40>
		uint32_t smask = 0U;
   20686:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   20688:	463c      	mov	r4, r7
   2068a:	e7e9      	b.n	20660 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   2068c:	6958      	ldr	r0, [r3, #20]
   2068e:	f7ff ff73 	bl	20578 <cont_free>
   20692:	e7d2      	b.n	2063a <msg_free+0x22>
   20694:	20007b4c 	.word	0x20007b4c

00020698 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   20698:	b40e      	push	{r1, r2, r3}
   2069a:	b500      	push	{lr}
   2069c:	b082      	sub	sp, #8
   2069e:	4601      	mov	r1, r0
   206a0:	ab03      	add	r3, sp, #12
   206a2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   206a6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   206a8:	4803      	ldr	r0, [pc, #12]	; (206b8 <print_formatted+0x20>)
   206aa:	f7fe fe3b 	bl	1f324 <cbvprintf>
	va_end(args);

	return length;
}
   206ae:	b002      	add	sp, #8
   206b0:	f85d eb04 	ldr.w	lr, [sp], #4
   206b4:	b003      	add	sp, #12
   206b6:	4770      	bx	lr
   206b8:	000352eb 	.word	0x000352eb

000206bc <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   206bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   206be:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   206c0:	f011 0f44 	tst.w	r1, #68	; 0x44
   206c4:	d005      	beq.n	206d2 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   206c6:	4b1a      	ldr	r3, [pc, #104]	; (20730 <timestamp_print+0x74>)
   206c8:	681c      	ldr	r4, [r3, #0]
   206ca:	b934      	cbnz	r4, 206da <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   206cc:	2000      	movs	r0, #0
	}

	return length;
}
   206ce:	b005      	add	sp, #20
   206d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   206d2:	4918      	ldr	r1, [pc, #96]	; (20734 <timestamp_print+0x78>)
   206d4:	f7ff ffe0 	bl	20698 <print_formatted>
   206d8:	e7f9      	b.n	206ce <timestamp_print+0x12>
		timestamp /= timestamp_div;
   206da:	4b17      	ldr	r3, [pc, #92]	; (20738 <timestamp_print+0x7c>)
   206dc:	6819      	ldr	r1, [r3, #0]
   206de:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   206e2:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   206e6:	4a15      	ldr	r2, [pc, #84]	; (2073c <timestamp_print+0x80>)
   206e8:	fba2 3205 	umull	r3, r2, r2, r5
   206ec:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   206ee:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   206f2:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   206f6:	4b12      	ldr	r3, [pc, #72]	; (20740 <timestamp_print+0x84>)
   206f8:	fba3 7306 	umull	r7, r3, r3, r6
   206fc:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   206fe:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   20702:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   20706:	fb05 f101 	mul.w	r1, r5, r1
   2070a:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2070e:	fb07 1114 	mls	r1, r7, r4, r1
   20712:	fb05 f101 	mul.w	r1, r5, r1
   20716:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   2071a:	9402      	str	r4, [sp, #8]
   2071c:	9701      	str	r7, [sp, #4]
   2071e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   20722:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   20726:	9100      	str	r1, [sp, #0]
   20728:	4906      	ldr	r1, [pc, #24]	; (20744 <timestamp_print+0x88>)
   2072a:	f7ff ffb5 	bl	20698 <print_formatted>
   2072e:	e7ce      	b.n	206ce <timestamp_print+0x12>
   20730:	20007b68 	.word	0x20007b68
   20734:	0003dd28 	.word	0x0003dd28
   20738:	20007b6c 	.word	0x20007b6c
   2073c:	91a2b3c5 	.word	0x91a2b3c5
   20740:	88888889 	.word	0x88888889
   20744:	0003dd34 	.word	0x0003dd34

00020748 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   20748:	b161      	cbz	r1, 20764 <color_print+0x1c>
{
   2074a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   2074c:	b12a      	cbz	r2, 2075a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   2074e:	4a06      	ldr	r2, [pc, #24]	; (20768 <color_print+0x20>)
   20750:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   20754:	b912      	cbnz	r2, 2075c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   20756:	4a05      	ldr	r2, [pc, #20]	; (2076c <color_print+0x24>)
   20758:	e000      	b.n	2075c <color_print+0x14>
   2075a:	4a04      	ldr	r2, [pc, #16]	; (2076c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   2075c:	4904      	ldr	r1, [pc, #16]	; (20770 <color_print+0x28>)
   2075e:	f7ff ff9b 	bl	20698 <print_formatted>
	}
}
   20762:	bd08      	pop	{r3, pc}
   20764:	4770      	bx	lr
   20766:	bf00      	nop
   20768:	0003dda8 	.word	0x0003dda8
   2076c:	0003dd50 	.word	0x0003dd50
   20770:	0003ed54 	.word	0x0003ed54

00020774 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   20774:	f011 0f10 	tst.w	r1, #16
   20778:	d10b      	bne.n	20792 <newline_print+0x1e>
{
   2077a:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   2077c:	f011 0f20 	tst.w	r1, #32
   20780:	d003      	beq.n	2078a <newline_print+0x16>
		print_formatted(ctx, "\n");
   20782:	4904      	ldr	r1, [pc, #16]	; (20794 <newline_print+0x20>)
   20784:	f7ff ff88 	bl	20698 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   20788:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   2078a:	4903      	ldr	r1, [pc, #12]	; (20798 <newline_print+0x24>)
   2078c:	f7ff ff84 	bl	20698 <print_formatted>
   20790:	e7fa      	b.n	20788 <newline_print+0x14>
   20792:	4770      	bx	lr
   20794:	00040bcc 	.word	0x00040bcc
   20798:	00040b00 	.word	0x00040b00

0002079c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   2079c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207a0:	4605      	mov	r5, r0
   207a2:	460f      	mov	r7, r1
   207a4:	4616      	mov	r6, r2
   207a6:	4698      	mov	r8, r3
	newline_print(output, flags);
   207a8:	9906      	ldr	r1, [sp, #24]
   207aa:	f7ff ffe3 	bl	20774 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   207ae:	2400      	movs	r4, #0
   207b0:	4544      	cmp	r4, r8
   207b2:	da05      	bge.n	207c0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   207b4:	4923      	ldr	r1, [pc, #140]	; (20844 <hexdump_line_print+0xa8>)
   207b6:	4628      	mov	r0, r5
   207b8:	f7ff ff6e 	bl	20698 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   207bc:	3401      	adds	r4, #1
   207be:	e7f7      	b.n	207b0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   207c0:	2400      	movs	r4, #0
   207c2:	e009      	b.n	207d8 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   207c4:	491f      	ldr	r1, [pc, #124]	; (20844 <hexdump_line_print+0xa8>)
   207c6:	4628      	mov	r0, r5
   207c8:	f7ff ff66 	bl	20698 <print_formatted>
   207cc:	e00b      	b.n	207e6 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   207ce:	491e      	ldr	r1, [pc, #120]	; (20848 <hexdump_line_print+0xac>)
   207d0:	4628      	mov	r0, r5
   207d2:	f7ff ff61 	bl	20698 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   207d6:	3401      	adds	r4, #1
   207d8:	2c0f      	cmp	r4, #15
   207da:	dc0c      	bgt.n	207f6 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   207dc:	2c00      	cmp	r4, #0
   207de:	dd02      	ble.n	207e6 <hexdump_line_print+0x4a>
   207e0:	f014 0f07 	tst.w	r4, #7
   207e4:	d0ee      	beq.n	207c4 <hexdump_line_print+0x28>
		if (i < length) {
   207e6:	42b4      	cmp	r4, r6
   207e8:	d2f1      	bcs.n	207ce <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   207ea:	5d3a      	ldrb	r2, [r7, r4]
   207ec:	4917      	ldr	r1, [pc, #92]	; (2084c <hexdump_line_print+0xb0>)
   207ee:	4628      	mov	r0, r5
   207f0:	f7ff ff52 	bl	20698 <print_formatted>
   207f4:	e7ef      	b.n	207d6 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   207f6:	4916      	ldr	r1, [pc, #88]	; (20850 <hexdump_line_print+0xb4>)
   207f8:	4628      	mov	r0, r5
   207fa:	f7ff ff4d 	bl	20698 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   207fe:	2400      	movs	r4, #0
   20800:	e009      	b.n	20816 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   20802:	4910      	ldr	r1, [pc, #64]	; (20844 <hexdump_line_print+0xa8>)
   20804:	4628      	mov	r0, r5
   20806:	f7ff ff47 	bl	20698 <print_formatted>
   2080a:	e00b      	b.n	20824 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   2080c:	4911      	ldr	r1, [pc, #68]	; (20854 <hexdump_line_print+0xb8>)
   2080e:	4628      	mov	r0, r5
   20810:	f7ff ff42 	bl	20698 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20814:	3401      	adds	r4, #1
   20816:	2c0f      	cmp	r4, #15
   20818:	dc12      	bgt.n	20840 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   2081a:	2c00      	cmp	r4, #0
   2081c:	dd02      	ble.n	20824 <hexdump_line_print+0x88>
   2081e:	f014 0f07 	tst.w	r4, #7
   20822:	d0ee      	beq.n	20802 <hexdump_line_print+0x66>
		if (i < length) {
   20824:	42b4      	cmp	r4, r6
   20826:	d206      	bcs.n	20836 <hexdump_line_print+0x9a>
			char c = (char)data[i];
   20828:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   2082a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   2082e:	2b5e      	cmp	r3, #94	; 0x5e
   20830:	d9ec      	bls.n	2080c <hexdump_line_print+0x70>
   20832:	222e      	movs	r2, #46	; 0x2e
   20834:	e7ea      	b.n	2080c <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
   20836:	4903      	ldr	r1, [pc, #12]	; (20844 <hexdump_line_print+0xa8>)
   20838:	4628      	mov	r0, r5
   2083a:	f7ff ff2d 	bl	20698 <print_formatted>
   2083e:	e7e9      	b.n	20814 <hexdump_line_print+0x78>
		}
	}
}
   20840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20844:	0003dd7c 	.word	0x0003dd7c
   20848:	0003dd60 	.word	0x0003dd60
   2084c:	0003dd58 	.word	0x0003dd58
   20850:	0003dd64 	.word	0x0003dd64
   20854:	0003dd68 	.word	0x0003dd68

00020858 <ids_print>:
{
   20858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2085c:	4680      	mov	r8, r0
   2085e:	4616      	mov	r6, r2
   20860:	461d      	mov	r5, r3
   20862:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   20866:	b959      	cbnz	r1, 20880 <ids_print+0x28>
	int total = 0;
   20868:	2400      	movs	r4, #0
	if (source_id >= 0) {
   2086a:	2f00      	cmp	r7, #0
   2086c:	db1c      	blt.n	208a8 <ids_print+0x50>
		total += print_formatted(output,
   2086e:	b186      	cbz	r6, 20892 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   20870:	2301      	movs	r3, #1
   20872:	9a07      	ldr	r2, [sp, #28]
   20874:	4093      	lsls	r3, r2
				(func_on &&
   20876:	f013 0f10 	tst.w	r3, #16
   2087a:	d118      	bne.n	208ae <ids_print+0x56>
		total += print_formatted(output,
   2087c:	4e0d      	ldr	r6, [pc, #52]	; (208b4 <ids_print+0x5c>)
   2087e:	e009      	b.n	20894 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   20880:	4b0d      	ldr	r3, [pc, #52]	; (208b8 <ids_print+0x60>)
   20882:	9a07      	ldr	r2, [sp, #28]
   20884:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   20888:	490c      	ldr	r1, [pc, #48]	; (208bc <ids_print+0x64>)
   2088a:	f7ff ff05 	bl	20698 <print_formatted>
   2088e:	4604      	mov	r4, r0
   20890:	e7eb      	b.n	2086a <ids_print+0x12>
		total += print_formatted(output,
   20892:	4e08      	ldr	r6, [pc, #32]	; (208b4 <ids_print+0x5c>)
   20894:	4639      	mov	r1, r7
   20896:	4628      	mov	r0, r5
   20898:	f7ff fe4c 	bl	20534 <log_source_name_get>
   2089c:	4602      	mov	r2, r0
   2089e:	4631      	mov	r1, r6
   208a0:	4640      	mov	r0, r8
   208a2:	f7ff fef9 	bl	20698 <print_formatted>
   208a6:	4404      	add	r4, r0
}
   208a8:	4620      	mov	r0, r4
   208aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   208ae:	4e04      	ldr	r6, [pc, #16]	; (208c0 <ids_print+0x68>)
   208b0:	e7f0      	b.n	20894 <ids_print+0x3c>
   208b2:	bf00      	nop
   208b4:	0003dd6c 	.word	0x0003dd6c
   208b8:	0003dde4 	.word	0x0003dde4
   208bc:	0003dd78 	.word	0x0003dd78
   208c0:	0003dd74 	.word	0x0003dd74

000208c4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   208c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208c8:	b085      	sub	sp, #20
   208ca:	4605      	mov	r5, r0
   208cc:	460c      	mov	r4, r1
   208ce:	4616      	mov	r6, r2
   208d0:	9303      	str	r3, [sp, #12]
   208d2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   208d6:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   208da:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   208de:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   208e2:	f014 f9fd 	bl	34ce0 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   208e6:	b1e8      	cbz	r0, 20924 <prefix_print+0x60>
   208e8:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   208ea:	4913      	ldr	r1, [pc, #76]	; (20938 <prefix_print+0x74>)
   208ec:	4628      	mov	r0, r5
   208ee:	f7ff fed3 	bl	20698 <print_formatted>
   208f2:	4607      	mov	r7, r0
	}

	if (stamp) {
   208f4:	f1bb 0f00 	cmp.w	fp, #0
   208f8:	d116      	bne.n	20928 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   208fa:	4642      	mov	r2, r8
   208fc:	4651      	mov	r1, sl
   208fe:	4628      	mov	r0, r5
   20900:	f014 fb73 	bl	34fea <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   20904:	f8cd 8004 	str.w	r8, [sp, #4]
   20908:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   2090c:	9300      	str	r3, [sp, #0]
   2090e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   20912:	4632      	mov	r2, r6
   20914:	4649      	mov	r1, r9
   20916:	4628      	mov	r0, r5
   20918:	f7ff ff9e 	bl	20858 <ids_print>
			domain_id, source_id, level);


	return length;
}
   2091c:	4438      	add	r0, r7
   2091e:	b005      	add	sp, #20
   20920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   20924:	2700      	movs	r7, #0
   20926:	e7e5      	b.n	208f4 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   20928:	9a03      	ldr	r2, [sp, #12]
   2092a:	4621      	mov	r1, r4
   2092c:	4628      	mov	r0, r5
   2092e:	f7ff fec5 	bl	206bc <timestamp_print>
   20932:	4407      	add	r7, r0
   20934:	e7e1      	b.n	208fa <prefix_print+0x36>
   20936:	bf00      	nop
   20938:	0003dd80 	.word	0x0003dd80

0002093c <hexdump_print>:
{
   2093c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20940:	b089      	sub	sp, #36	; 0x24
   20942:	4607      	mov	r7, r0
   20944:	460e      	mov	r6, r1
   20946:	4691      	mov	r9, r2
   20948:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
   2094a:	f014 fa87 	bl	34e5c <log_msg_str_get>
   2094e:	4602      	mov	r2, r0
   20950:	490e      	ldr	r1, [pc, #56]	; (2098c <hexdump_print+0x50>)
   20952:	4630      	mov	r0, r6
   20954:	f7ff fea0 	bl	20698 <print_formatted>
	uint32_t offset = 0U;
   20958:	2400      	movs	r4, #0
		length = sizeof(buf);
   2095a:	2510      	movs	r5, #16
   2095c:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   2095e:	4623      	mov	r3, r4
   20960:	aa03      	add	r2, sp, #12
   20962:	eb0d 0105 	add.w	r1, sp, r5
   20966:	4638      	mov	r0, r7
   20968:	f014 fb2a 	bl	34fc0 <log_msg_hexdump_data_get>
		if (length) {
   2096c:	9a03      	ldr	r2, [sp, #12]
   2096e:	b152      	cbz	r2, 20986 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   20970:	f8cd 8000 	str.w	r8, [sp]
   20974:	464b      	mov	r3, r9
   20976:	eb0d 0105 	add.w	r1, sp, r5
   2097a:	4630      	mov	r0, r6
   2097c:	f7ff ff0e 	bl	2079c <hexdump_line_print>
			offset += length;
   20980:	9d03      	ldr	r5, [sp, #12]
   20982:	442c      	add	r4, r5
		length = sizeof(buf);
   20984:	e7e9      	b.n	2095a <hexdump_print+0x1e>
}
   20986:	b009      	add	sp, #36	; 0x24
   20988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2098c:	0003ed54 	.word	0x0003ed54

00020990 <raw_string_print>:
{
   20990:	b5f0      	push	{r4, r5, r6, r7, lr}
   20992:	b083      	sub	sp, #12
   20994:	4606      	mov	r6, r0
   20996:	460c      	mov	r4, r1
	bool eol = false;
   20998:	2700      	movs	r7, #0
	size_t offset = 0;
   2099a:	463d      	mov	r5, r7
   2099c:	e00d      	b.n	209ba <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
   2099e:	68a2      	ldr	r2, [r4, #8]
   209a0:	4413      	add	r3, r2
   209a2:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   209a6:	2f0a      	cmp	r7, #10
   209a8:	bf14      	ite	ne
   209aa:	2700      	movne	r7, #0
   209ac:	2701      	moveq	r7, #1
		log_output_flush(output);
   209ae:	4620      	mov	r0, r4
   209b0:	f014 fc8e 	bl	352d0 <log_output_flush>
		offset += length;
   209b4:	9b01      	ldr	r3, [sp, #4]
   209b6:	441d      	add	r5, r3
	} while (length > 0);
   209b8:	b173      	cbz	r3, 209d8 <raw_string_print+0x48>
		length = output->size;
   209ba:	68e3      	ldr	r3, [r4, #12]
   209bc:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   209be:	462b      	mov	r3, r5
   209c0:	aa01      	add	r2, sp, #4
   209c2:	68a1      	ldr	r1, [r4, #8]
   209c4:	4630      	mov	r0, r6
   209c6:	f014 fafb 	bl	34fc0 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   209ca:	6863      	ldr	r3, [r4, #4]
   209cc:	9a01      	ldr	r2, [sp, #4]
   209ce:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   209d0:	9b01      	ldr	r3, [sp, #4]
   209d2:	2b00      	cmp	r3, #0
   209d4:	d0eb      	beq.n	209ae <raw_string_print+0x1e>
   209d6:	e7e2      	b.n	2099e <raw_string_print+0xe>
	if (eol) {
   209d8:	b90f      	cbnz	r7, 209de <raw_string_print+0x4e>
}
   209da:	b003      	add	sp, #12
   209dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   209de:	4902      	ldr	r1, [pc, #8]	; (209e8 <raw_string_print+0x58>)
   209e0:	4620      	mov	r0, r4
   209e2:	f7ff fe59 	bl	20698 <print_formatted>
}
   209e6:	e7f8      	b.n	209da <raw_string_print+0x4a>
   209e8:	0003dd84 	.word	0x0003dd84

000209ec <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   209ec:	b570      	push	{r4, r5, r6, lr}
   209ee:	b082      	sub	sp, #8
   209f0:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   209f2:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   209f4:	f242 730f 	movw	r3, #9999	; 0x270f
   209f8:	428b      	cmp	r3, r1
   209fa:	bf28      	it	cs
   209fc:	460b      	movcs	r3, r1
   209fe:	4a0e      	ldr	r2, [pc, #56]	; (20a38 <log_output_dropped_process+0x4c>)
   20a00:	2105      	movs	r1, #5
   20a02:	4668      	mov	r0, sp
   20a04:	f013 fd41 	bl	3448a <snprintk>
   20a08:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   20a0a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   20a0c:	685b      	ldr	r3, [r3, #4]
   20a0e:	220b      	movs	r2, #11
   20a10:	490a      	ldr	r1, [pc, #40]	; (20a3c <log_output_dropped_process+0x50>)
   20a12:	4628      	mov	r0, r5
   20a14:	f014 fadc 	bl	34fd0 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   20a18:	6863      	ldr	r3, [r4, #4]
   20a1a:	685b      	ldr	r3, [r3, #4]
   20a1c:	4632      	mov	r2, r6
   20a1e:	4669      	mov	r1, sp
   20a20:	4628      	mov	r0, r5
   20a22:	f014 fad5 	bl	34fd0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   20a26:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   20a28:	685b      	ldr	r3, [r3, #4]
   20a2a:	221b      	movs	r2, #27
   20a2c:	4904      	ldr	r1, [pc, #16]	; (20a40 <log_output_dropped_process+0x54>)
   20a2e:	4628      	mov	r0, r5
   20a30:	f014 face 	bl	34fd0 <buffer_write>
}
   20a34:	b002      	add	sp, #8
   20a36:	bd70      	pop	{r4, r5, r6, pc}
   20a38:	0003dc78 	.word	0x0003dc78
   20a3c:	0003ddd8 	.word	0x0003ddd8
   20a40:	0003ddbc 	.word	0x0003ddbc

00020a44 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   20a44:	4b07      	ldr	r3, [pc, #28]	; (20a64 <log_output_timestamp_freq_set+0x20>)
   20a46:	2201      	movs	r2, #1
   20a48:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   20a4a:	4b07      	ldr	r3, [pc, #28]	; (20a68 <log_output_timestamp_freq_set+0x24>)
   20a4c:	4298      	cmp	r0, r3
   20a4e:	d905      	bls.n	20a5c <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   20a50:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   20a52:	4a04      	ldr	r2, [pc, #16]	; (20a64 <log_output_timestamp_freq_set+0x20>)
   20a54:	6813      	ldr	r3, [r2, #0]
   20a56:	005b      	lsls	r3, r3, #1
   20a58:	6013      	str	r3, [r2, #0]
   20a5a:	e7f6      	b.n	20a4a <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   20a5c:	4b03      	ldr	r3, [pc, #12]	; (20a6c <log_output_timestamp_freq_set+0x28>)
   20a5e:	6018      	str	r0, [r3, #0]
}
   20a60:	4770      	bx	lr
   20a62:	bf00      	nop
   20a64:	20007b6c 	.word	0x20007b6c
   20a68:	000f4240 	.word	0x000f4240
   20a6c:	20007b68 	.word	0x20007b68

00020a70 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   20a70:	b570      	push	{r4, r5, r6, lr}
   20a72:	4606      	mov	r6, r0
   20a74:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   20a76:	2400      	movs	r4, #0
   20a78:	42ac      	cmp	r4, r5
   20a7a:	d207      	bcs.n	20a8c <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
   20a7c:	4b04      	ldr	r3, [pc, #16]	; (20a90 <char_out+0x20>)
   20a7e:	6818      	ldr	r0, [r3, #0]
   20a80:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
   20a82:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   20a84:	685b      	ldr	r3, [r3, #4]
   20a86:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   20a88:	3401      	adds	r4, #1
   20a8a:	e7f5      	b.n	20a78 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   20a8c:	4628      	mov	r0, r5
   20a8e:	bd70      	pop	{r4, r5, r6, pc}
   20a90:	20007b84 	.word	0x20007b84

00020a94 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   20a94:	4b01      	ldr	r3, [pc, #4]	; (20a9c <log_backend_uart_init+0x8>)
   20a96:	4a02      	ldr	r2, [pc, #8]	; (20aa0 <log_backend_uart_init+0xc>)
   20a98:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   20a9a:	4770      	bx	lr
   20a9c:	20007b84 	.word	0x20007b84
   20aa0:	0003cfa0 	.word	0x0003cfa0

00020aa4 <panic>:

static void panic(struct log_backend const *const backend)
{
   20aa4:	b508      	push	{r3, lr}
	in_panic = true;
   20aa6:	4b03      	ldr	r3, [pc, #12]	; (20ab4 <panic+0x10>)
   20aa8:	2201      	movs	r2, #1
   20aaa:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   20aac:	4802      	ldr	r0, [pc, #8]	; (20ab8 <panic+0x14>)
   20aae:	f014 fc0f 	bl	352d0 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   20ab2:	bd08      	pop	{r3, pc}
   20ab4:	2000da71 	.word	0x2000da71
   20ab8:	0003de34 	.word	0x0003de34

00020abc <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   20abc:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   20abe:	4802      	ldr	r0, [pc, #8]	; (20ac8 <dropped+0xc>)
   20ac0:	f7ff ff94 	bl	209ec <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   20ac4:	bd08      	pop	{r3, pc}
   20ac6:	bf00      	nop
   20ac8:	0003de34 	.word	0x0003de34

00020acc <put>:
{
   20acc:	b510      	push	{r4, lr}
   20ace:	460c      	mov	r4, r1
	log_msg_get(msg);
   20ad0:	4608      	mov	r0, r1
   20ad2:	f014 f9a1 	bl	34e18 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   20ad6:	220f      	movs	r2, #15
   20ad8:	4621      	mov	r1, r4
   20ada:	4803      	ldr	r0, [pc, #12]	; (20ae8 <put+0x1c>)
   20adc:	f014 fc21 	bl	35322 <log_output_msg_process>
	log_msg_put(msg);
   20ae0:	4620      	mov	r0, r4
   20ae2:	f014 f9bd 	bl	34e60 <log_msg_put>
}
   20ae6:	bd10      	pop	{r4, pc}
   20ae8:	0003de34 	.word	0x0003de34

00020aec <nvs_startup>:
	}
	return 0;
}

static int nvs_startup(struct nvs_fs *fs)
{
   20aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20af0:	b087      	sub	sp, #28
   20af2:	4604      	mov	r4, r0
	size_t ate_size, empty_len;
	/* Initialize addr to 0 for the case fs->sector_count == 0. This
	 * should never happen as this is verified in nvs_init() but both
	 * Coverity and GCC believe the contrary.
	 */
	uint32_t addr = 0U;
   20af4:	2300      	movs	r3, #0
   20af6:	9303      	str	r3, [sp, #12]
	uint16_t i, closed_sectors = 0;
	uint8_t erase_value = fs->flash_parameters->erase_value;
   20af8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20afa:	791e      	ldrb	r6, [r3, #4]

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   20afc:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   20b00:	f04f 32ff 	mov.w	r2, #4294967295
   20b04:	f04f 33ff 	mov.w	r3, #4294967295
   20b08:	4648      	mov	r0, r9
   20b0a:	f00f faa5 	bl	30058 <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20b0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20b10:	681b      	ldr	r3, [r3, #0]
   20b12:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   20b14:	2a01      	cmp	r2, #1
   20b16:	d906      	bls.n	20b26 <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20b18:	1dd7      	adds	r7, r2, #7
   20b1a:	4253      	negs	r3, r2
   20b1c:	401f      	ands	r7, r3
	uint16_t i, closed_sectors = 0;
   20b1e:	f04f 0800 	mov.w	r8, #0

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
	/* step through the sectors to find a open sector following
	 * a closed sector, this is where NVS can to write.
	 */
	for (i = 0; i < fs->sector_count; i++) {
   20b22:	4645      	mov	r5, r8
   20b24:	e003      	b.n	20b2e <nvs_startup+0x42>
		return len;
   20b26:	2708      	movs	r7, #8
   20b28:	e7f9      	b.n	20b1e <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
   20b2a:	3501      	adds	r5, #1
   20b2c:	b2ad      	uxth	r5, r5
   20b2e:	89e3      	ldrh	r3, [r4, #14]
   20b30:	42ab      	cmp	r3, r5
   20b32:	d91c      	bls.n	20b6e <nvs_startup+0x82>
		addr = (i << ADDR_SECT_SHIFT) +
		       (uint16_t)(fs->sector_size - ate_size);
   20b34:	89a1      	ldrh	r1, [r4, #12]
   20b36:	1bc9      	subs	r1, r1, r7
   20b38:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
   20b3a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   20b3e:	9103      	str	r1, [sp, #12]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   20b40:	2308      	movs	r3, #8
   20b42:	4632      	mov	r2, r6
   20b44:	4620      	mov	r0, r4
   20b46:	f014 fc82 	bl	3544e <nvs_flash_cmp_const>
					 sizeof(struct nvs_ate));
		if (rc) {
   20b4a:	2800      	cmp	r0, #0
   20b4c:	d0ed      	beq.n	20b2a <nvs_startup+0x3e>
			/* closed sector */
			closed_sectors++;
   20b4e:	f108 0801 	add.w	r8, r8, #1
   20b52:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
   20b56:	a903      	add	r1, sp, #12
   20b58:	4620      	mov	r0, r4
   20b5a:	f014 fc3f 	bl	353dc <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   20b5e:	2308      	movs	r3, #8
   20b60:	4632      	mov	r2, r6
   20b62:	9903      	ldr	r1, [sp, #12]
   20b64:	4620      	mov	r0, r4
   20b66:	f014 fc72 	bl	3544e <nvs_flash_cmp_const>
						 sizeof(struct nvs_ate));
			if (!rc) {
   20b6a:	2800      	cmp	r0, #0
   20b6c:	d1dd      	bne.n	20b2a <nvs_startup+0x3e>
				break;
			}
		}
	}
	/* all sectors are closed, this is not a nvs fs */
	if (closed_sectors == fs->sector_count) {
   20b6e:	89e3      	ldrh	r3, [r4, #14]
   20b70:	4543      	cmp	r3, r8
   20b72:	f000 810b 	beq.w	20d8c <nvs_startup+0x2a0>
		rc = -EDEADLK;
		goto end;
	}

	if (i == fs->sector_count) {
   20b76:	42ab      	cmp	r3, r5
   20b78:	d00d      	beq.n	20b96 <nvs_startup+0xaa>

	/* addr contains address of closing ate in the most recent sector,
	 * search for the last valid ate using the recover_last_ate routine
	 */

	rc = nvs_recover_last_ate(fs, &addr);
   20b7a:	a903      	add	r1, sp, #12
   20b7c:	4620      	mov	r0, r4
   20b7e:	f014 fcea 	bl	35556 <nvs_recover_last_ate>
	if (rc) {
   20b82:	4605      	mov	r5, r0
   20b84:	2800      	cmp	r0, #0
   20b86:	f040 80df 	bne.w	20d48 <nvs_startup+0x25c>

	/* addr contains address of the last valid ate in the most recent sector
	 * search for the first ate containing all cells erased, in the process
	 * also update fs->data_wra.
	 */
	fs->ate_wra = addr;
   20b8a:	9b03      	ldr	r3, [sp, #12]
   20b8c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   20b8e:	0c1b      	lsrs	r3, r3, #16
   20b90:	041b      	lsls	r3, r3, #16
   20b92:	60a3      	str	r3, [r4, #8]

	while (fs->ate_wra >= fs->data_wra) {
   20b94:	e010      	b.n	20bb8 <nvs_startup+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   20b96:	2308      	movs	r3, #8
   20b98:	4632      	mov	r2, r6
   20b9a:	9903      	ldr	r1, [sp, #12]
   20b9c:	1bc9      	subs	r1, r1, r7
   20b9e:	4620      	mov	r0, r4
   20ba0:	f014 fc55 	bl	3544e <nvs_flash_cmp_const>
		if (!rc) {
   20ba4:	2800      	cmp	r0, #0
   20ba6:	d1e8      	bne.n	20b7a <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
   20ba8:	a903      	add	r1, sp, #12
   20baa:	4620      	mov	r0, r4
   20bac:	f014 fc16 	bl	353dc <nvs_sector_advance>
   20bb0:	e7e3      	b.n	20b7a <nvs_startup+0x8e>
				rc = -ESPIPE;
				goto end;
			}
		}

		fs->ate_wra -= ate_size;
   20bb2:	6863      	ldr	r3, [r4, #4]
   20bb4:	1bdb      	subs	r3, r3, r7
   20bb6:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
   20bb8:	6861      	ldr	r1, [r4, #4]
   20bba:	68a3      	ldr	r3, [r4, #8]
   20bbc:	4299      	cmp	r1, r3
   20bbe:	d32e      	bcc.n	20c1e <nvs_startup+0x132>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
   20bc0:	aa04      	add	r2, sp, #16
   20bc2:	4620      	mov	r0, r4
   20bc4:	f014 fbf9 	bl	353ba <nvs_flash_ate_rd>
		if (rc) {
   20bc8:	4605      	mov	r5, r0
   20bca:	2800      	cmp	r0, #0
   20bcc:	f040 80bc 	bne.w	20d48 <nvs_startup+0x25c>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
   20bd0:	4631      	mov	r1, r6
   20bd2:	a804      	add	r0, sp, #16
   20bd4:	f014 fbf6 	bl	353c4 <nvs_ate_cmp_const>
		if (!rc) {
   20bd8:	b308      	cbz	r0, 20c1e <nvs_startup+0x132>
		if (nvs_ate_valid(fs, &last_ate)) {
   20bda:	a904      	add	r1, sp, #16
   20bdc:	4620      	mov	r0, r4
   20bde:	f014 fc9e 	bl	3551e <nvs_ate_valid>
   20be2:	2800      	cmp	r0, #0
   20be4:	d0e5      	beq.n	20bb2 <nvs_startup+0xc6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   20be6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   20bea:	0419      	lsls	r1, r3, #16
   20bec:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   20bee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   20bf2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   20bf6:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20bf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20bfa:	6812      	ldr	r2, [r2, #0]
   20bfc:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
   20bfe:	2d01      	cmp	r5, #1
   20c00:	d903      	bls.n	20c0a <nvs_startup+0x11e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20c02:	442b      	add	r3, r5
   20c04:	3b01      	subs	r3, #1
   20c06:	426a      	negs	r2, r5
   20c08:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   20c0a:	440b      	add	r3, r1
   20c0c:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   20c0e:	6862      	ldr	r2, [r4, #4]
   20c10:	4293      	cmp	r3, r2
   20c12:	d1ce      	bne.n	20bb2 <nvs_startup+0xc6>
   20c14:	2800      	cmp	r0, #0
   20c16:	d0cc      	beq.n	20bb2 <nvs_startup+0xc6>
				rc = -ESPIPE;
   20c18:	f06f 051c 	mvn.w	r5, #28
   20c1c:	e09b      	b.n	20d56 <nvs_startup+0x26a>
	 * we might need to restart gc if it has not yet finished. Otherwise
	 * just erase the sector.
	 * When gc needs to be restarted, first erase the sector otherwise the
	 * data might not fit into the sector.
	 */
	addr = fs->ate_wra & ADDR_SECT_MASK;
   20c1e:	88e3      	ldrh	r3, [r4, #6]
   20c20:	041b      	lsls	r3, r3, #16
   20c22:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &addr);
   20c24:	a903      	add	r1, sp, #12
   20c26:	4620      	mov	r0, r4
   20c28:	f014 fbd8 	bl	353dc <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   20c2c:	89a3      	ldrh	r3, [r4, #12]
   20c2e:	4632      	mov	r2, r6
   20c30:	9903      	ldr	r1, [sp, #12]
   20c32:	4620      	mov	r0, r4
   20c34:	f014 fc0b 	bl	3544e <nvs_flash_cmp_const>
	if (rc < 0) {
   20c38:	1e05      	subs	r5, r0, #0
   20c3a:	f2c0 8085 	blt.w	20d48 <nvs_startup+0x25c>
		goto end;
	}
	if (rc) {
   20c3e:	2d00      	cmp	r5, #0
   20c40:	d06a      	beq.n	20d18 <nvs_startup+0x22c>
		 * (gc_done_ate) that indicates that gc was finished.
		 */
		bool gc_done_marker = false;
		struct nvs_ate gc_done_ate;

		addr = fs->ate_wra + ate_size;
   20c42:	6863      	ldr	r3, [r4, #4]
   20c44:	443b      	add	r3, r7
   20c46:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   20c48:	e002      	b.n	20c50 <nvs_startup+0x164>
			    (gc_done_ate.id == 0xffff) &&
			    (gc_done_ate.len == 0U)) {
				gc_done_marker = true;
				break;
			}
			addr += ate_size;
   20c4a:	9b03      	ldr	r3, [sp, #12]
   20c4c:	443b      	add	r3, r7
   20c4e:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   20c50:	9903      	ldr	r1, [sp, #12]
   20c52:	b28a      	uxth	r2, r1
   20c54:	89a3      	ldrh	r3, [r4, #12]
   20c56:	1bdb      	subs	r3, r3, r7
   20c58:	429a      	cmp	r2, r3
   20c5a:	d218      	bcs.n	20c8e <nvs_startup+0x1a2>
			rc = nvs_flash_ate_rd(fs, addr, &gc_done_ate);
   20c5c:	aa01      	add	r2, sp, #4
   20c5e:	4620      	mov	r0, r4
   20c60:	f014 fbab 	bl	353ba <nvs_flash_ate_rd>
			if (rc) {
   20c64:	4605      	mov	r5, r0
   20c66:	2800      	cmp	r0, #0
   20c68:	d16e      	bne.n	20d48 <nvs_startup+0x25c>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   20c6a:	a901      	add	r1, sp, #4
   20c6c:	4620      	mov	r0, r4
   20c6e:	f014 fc56 	bl	3551e <nvs_ate_valid>
   20c72:	2800      	cmp	r0, #0
   20c74:	d0e9      	beq.n	20c4a <nvs_startup+0x15e>
			    (gc_done_ate.id == 0xffff) &&
   20c76:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   20c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20c7e:	429a      	cmp	r2, r3
   20c80:	d1e3      	bne.n	20c4a <nvs_startup+0x15e>
			    (gc_done_ate.len == 0U)) {
   20c82:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			    (gc_done_ate.id == 0xffff) &&
   20c86:	2b00      	cmp	r3, #0
   20c88:	d1df      	bne.n	20c4a <nvs_startup+0x15e>
				gc_done_marker = true;
   20c8a:	2301      	movs	r3, #1
   20c8c:	e000      	b.n	20c90 <nvs_startup+0x1a4>
		bool gc_done_marker = false;
   20c8e:	2300      	movs	r3, #0
		}

		if (gc_done_marker) {
   20c90:	bb2b      	cbnz	r3, 20cde <nvs_startup+0x1f2>
   20c92:	4b40      	ldr	r3, [pc, #256]	; (20d94 <nvs_startup+0x2a8>)
   20c94:	4a40      	ldr	r2, [pc, #256]	; (20d98 <nvs_startup+0x2ac>)
   20c96:	1a9b      	subs	r3, r3, r2
   20c98:	08db      	lsrs	r3, r3, #3
			addr = fs->ate_wra & ADDR_SECT_MASK;
			nvs_sector_advance(fs, &addr);
			rc = nvs_flash_erase_sector(fs, addr);
			goto end;
		}
		LOG_INF("No GC Done marker found: restarting gc");
   20c9a:	f04f 0100 	mov.w	r1, #0
   20c9e:	2203      	movs	r2, #3
   20ca0:	f362 0102 	bfi	r1, r2, #0, #3
   20ca4:	f36f 01c5 	bfc	r1, #3, #3
   20ca8:	f363 118f 	bfi	r1, r3, #6, #10
   20cac:	483b      	ldr	r0, [pc, #236]	; (20d9c <nvs_startup+0x2b0>)
   20cae:	f7ff fbb1 	bl	20414 <log_0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   20cb2:	6861      	ldr	r1, [r4, #4]
   20cb4:	4620      	mov	r0, r4
   20cb6:	f014 fbef 	bl	35498 <nvs_flash_erase_sector>
		if (rc) {
   20cba:	4605      	mov	r5, r0
   20cbc:	2800      	cmp	r0, #0
   20cbe:	d143      	bne.n	20d48 <nvs_startup+0x25c>
			goto end;
		}
		fs->ate_wra &= ADDR_SECT_MASK;
   20cc0:	88e2      	ldrh	r2, [r4, #6]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   20cc2:	89a3      	ldrh	r3, [r4, #12]
   20cc4:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
   20cc8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   20ccc:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   20cce:	0c1b      	lsrs	r3, r3, #16
   20cd0:	041b      	lsls	r3, r3, #16
   20cd2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   20cd4:	4620      	mov	r0, r4
   20cd6:	f014 fdc8 	bl	3586a <nvs_gc>
   20cda:	4605      	mov	r5, r0
		goto end;
   20cdc:	e034      	b.n	20d48 <nvs_startup+0x25c>
   20cde:	4b2d      	ldr	r3, [pc, #180]	; (20d94 <nvs_startup+0x2a8>)
   20ce0:	4a2d      	ldr	r2, [pc, #180]	; (20d98 <nvs_startup+0x2ac>)
   20ce2:	1a9b      	subs	r3, r3, r2
   20ce4:	08db      	lsrs	r3, r3, #3
			LOG_INF("GC Done marker found");
   20ce6:	f04f 0100 	mov.w	r1, #0
   20cea:	2203      	movs	r2, #3
   20cec:	f362 0102 	bfi	r1, r2, #0, #3
   20cf0:	f36f 01c5 	bfc	r1, #3, #3
   20cf4:	f363 118f 	bfi	r1, r3, #6, #10
   20cf8:	4829      	ldr	r0, [pc, #164]	; (20da0 <nvs_startup+0x2b4>)
   20cfa:	f7ff fb8b 	bl	20414 <log_0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   20cfe:	88e3      	ldrh	r3, [r4, #6]
   20d00:	041b      	lsls	r3, r3, #16
   20d02:	9303      	str	r3, [sp, #12]
			nvs_sector_advance(fs, &addr);
   20d04:	a903      	add	r1, sp, #12
   20d06:	4620      	mov	r0, r4
   20d08:	f014 fb68 	bl	353dc <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   20d0c:	9903      	ldr	r1, [sp, #12]
   20d0e:	4620      	mov	r0, r4
   20d10:	f014 fbc2 	bl	35498 <nvs_flash_erase_sector>
   20d14:	4605      	mov	r5, r0
			goto end;
   20d16:	e017      	b.n	20d48 <nvs_startup+0x25c>
	}

	/* possible data write after last ate write, update data_wra */
	while (fs->ate_wra > fs->data_wra) {
   20d18:	6863      	ldr	r3, [r4, #4]
   20d1a:	68a1      	ldr	r1, [r4, #8]
   20d1c:	428b      	cmp	r3, r1
   20d1e:	d90d      	bls.n	20d3c <nvs_startup+0x250>
		empty_len = fs->ate_wra - fs->data_wra;

		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   20d20:	1a5b      	subs	r3, r3, r1
   20d22:	4632      	mov	r2, r6
   20d24:	4620      	mov	r0, r4
   20d26:	f014 fb92 	bl	3544e <nvs_flash_cmp_const>
				empty_len);
		if (rc < 0) {
   20d2a:	1e05      	subs	r5, r0, #0
   20d2c:	db0c      	blt.n	20d48 <nvs_startup+0x25c>
			goto end;
		}
		if (!rc) {
   20d2e:	b12d      	cbz	r5, 20d3c <nvs_startup+0x250>
			break;
		}

		fs->data_wra += fs->flash_parameters->write_block_size;
   20d30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20d32:	681a      	ldr	r2, [r3, #0]
   20d34:	68a3      	ldr	r3, [r4, #8]
   20d36:	4413      	add	r3, r2
   20d38:	60a3      	str	r3, [r4, #8]
   20d3a:	e7ed      	b.n	20d18 <nvs_startup+0x22c>

	/* If the ate_wra is pointing to the first ate write location in a
	 * sector and data_wra is not 0, erase the sector as it contains no
	 * valid data (this also avoids closing a sector without any data).
	 */
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   20d3c:	6861      	ldr	r1, [r4, #4]
   20d3e:	eb01 0247 	add.w	r2, r1, r7, lsl #1
   20d42:	89a3      	ldrh	r3, [r4, #12]
   20d44:	429a      	cmp	r2, r3
   20d46:	d00d      	beq.n	20d64 <nvs_startup+0x278>

end:
	/* If the sector is empty add a gc done ate to avoid having insufficient
	 * space when doing gc.
	 */
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   20d48:	b92d      	cbnz	r5, 20d56 <nvs_startup+0x26a>
   20d4a:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   20d4c:	89a3      	ldrh	r3, [r4, #12]
   20d4e:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   20d52:	42ba      	cmp	r2, r7
   20d54:	d015      	beq.n	20d82 <nvs_startup+0x296>
	return z_impl_k_mutex_unlock(mutex);
   20d56:	4648      	mov	r0, r9
   20d58:	f00f fa08 	bl	3016c <z_impl_k_mutex_unlock>

		rc = nvs_add_gc_done_ate(fs);
	}
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   20d5c:	4628      	mov	r0, r5
   20d5e:	b007      	add	sp, #28
   20d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   20d64:	68a2      	ldr	r2, [r4, #8]
   20d66:	0c0b      	lsrs	r3, r1, #16
   20d68:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   20d6a:	429a      	cmp	r2, r3
   20d6c:	d0ec      	beq.n	20d48 <nvs_startup+0x25c>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   20d6e:	4620      	mov	r0, r4
   20d70:	f014 fb92 	bl	35498 <nvs_flash_erase_sector>
		if (rc) {
   20d74:	4605      	mov	r5, r0
   20d76:	2800      	cmp	r0, #0
   20d78:	d1e6      	bne.n	20d48 <nvs_startup+0x25c>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   20d7a:	88e3      	ldrh	r3, [r4, #6]
   20d7c:	041b      	lsls	r3, r3, #16
   20d7e:	60a3      	str	r3, [r4, #8]
   20d80:	e7e2      	b.n	20d48 <nvs_startup+0x25c>
		rc = nvs_add_gc_done_ate(fs);
   20d82:	4620      	mov	r0, r4
   20d84:	f014 fd5b 	bl	3583e <nvs_add_gc_done_ate>
   20d88:	4605      	mov	r5, r0
   20d8a:	e7e4      	b.n	20d56 <nvs_startup+0x26a>
		rc = -EDEADLK;
   20d8c:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   20d90:	e7e1      	b.n	20d56 <nvs_startup+0x26a>
   20d92:	bf00      	nop
   20d94:	0003d24c 	.word	0x0003d24c
   20d98:	0003d1a4 	.word	0x0003d1a4
   20d9c:	0003de5c 	.word	0x0003de5c
   20da0:	0003de44 	.word	0x0003de44

00020da4 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   20da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20da6:	b085      	sub	sp, #20
   20da8:	4604      	mov	r4, r0
   20daa:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   20dac:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
   20dae:	f01b fa36 	bl	3c21e <z_impl_k_mutex_init>
   20db2:	4628      	mov	r0, r5
   20db4:	f00e fe16 	bl	2f9e4 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   20db8:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   20dba:	2800      	cmp	r0, #0
   20dbc:	d02a      	beq.n	20e14 <nvs_init+0x70>
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   20dbe:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   20dc0:	691b      	ldr	r3, [r3, #16]
   20dc2:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   20dc4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   20dc6:	2800      	cmp	r0, #0
   20dc8:	d037      	beq.n	20e3a <nvs_init+0x96>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
   20dca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
   20dcc:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   20dce:	691b      	ldr	r3, [r3, #16]
   20dd0:	4798      	blx	r3
   20dd2:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   20dd4:	3b01      	subs	r3, #1
   20dd6:	2b1f      	cmp	r3, #31
   20dd8:	d842      	bhi.n	20e60 <nvs_init+0xbc>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   20dda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   20ddc:	6821      	ldr	r1, [r4, #0]
   20dde:	aa01      	add	r2, sp, #4
   20de0:	f01a f946 	bl	3b070 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   20de4:	2800      	cmp	r0, #0
   20de6:	d14e      	bne.n	20e86 <nvs_init+0xe2>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
   20de8:	89a3      	ldrh	r3, [r4, #12]
   20dea:	2b00      	cmp	r3, #0
   20dec:	d05e      	beq.n	20eac <nvs_init+0x108>
   20dee:	9902      	ldr	r1, [sp, #8]
   20df0:	fbb3 f2f1 	udiv	r2, r3, r1
   20df4:	fb01 3312 	mls	r3, r1, r2, r3
   20df8:	2b00      	cmp	r3, #0
   20dfa:	d157      	bne.n	20eac <nvs_init+0x108>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
   20dfc:	89e3      	ldrh	r3, [r4, #14]
   20dfe:	2b01      	cmp	r3, #1
   20e00:	d967      	bls.n	20ed2 <nvs_init+0x12e>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
   20e02:	4620      	mov	r0, r4
   20e04:	f7ff fe72 	bl	20aec <nvs_startup>
	if (rc) {
   20e08:	4606      	mov	r6, r0
   20e0a:	2800      	cmp	r0, #0
   20e0c:	d074      	beq.n	20ef8 <nvs_init+0x154>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   20e0e:	4630      	mov	r0, r6
   20e10:	b005      	add	sp, #20
   20e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e14:	4b51      	ldr	r3, [pc, #324]	; (20f5c <nvs_init+0x1b8>)
   20e16:	4a52      	ldr	r2, [pc, #328]	; (20f60 <nvs_init+0x1bc>)
   20e18:	1a9b      	subs	r3, r3, r2
   20e1a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No valid flash device found");
   20e1c:	f04f 0100 	mov.w	r1, #0
   20e20:	2201      	movs	r2, #1
   20e22:	f362 0102 	bfi	r1, r2, #0, #3
   20e26:	f36f 01c5 	bfc	r1, #3, #3
   20e2a:	f363 118f 	bfi	r1, r3, #6, #10
   20e2e:	484d      	ldr	r0, [pc, #308]	; (20f64 <nvs_init+0x1c0>)
   20e30:	f7ff faf0 	bl	20414 <log_0>
		return -ENXIO;
   20e34:	f06f 0605 	mvn.w	r6, #5
   20e38:	e7e9      	b.n	20e0e <nvs_init+0x6a>
   20e3a:	4b48      	ldr	r3, [pc, #288]	; (20f5c <nvs_init+0x1b8>)
   20e3c:	4a48      	ldr	r2, [pc, #288]	; (20f60 <nvs_init+0x1bc>)
   20e3e:	1a9b      	subs	r3, r3, r2
   20e40:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not obtain flash parameters");
   20e42:	f04f 0100 	mov.w	r1, #0
   20e46:	2201      	movs	r2, #1
   20e48:	f362 0102 	bfi	r1, r2, #0, #3
   20e4c:	f36f 01c5 	bfc	r1, #3, #3
   20e50:	f363 118f 	bfi	r1, r3, #6, #10
   20e54:	4844      	ldr	r0, [pc, #272]	; (20f68 <nvs_init+0x1c4>)
   20e56:	f7ff fadd 	bl	20414 <log_0>
		return -EINVAL;
   20e5a:	f06f 0615 	mvn.w	r6, #21
   20e5e:	e7d6      	b.n	20e0e <nvs_init+0x6a>
   20e60:	4b3e      	ldr	r3, [pc, #248]	; (20f5c <nvs_init+0x1b8>)
   20e62:	4a3f      	ldr	r2, [pc, #252]	; (20f60 <nvs_init+0x1bc>)
   20e64:	1a9b      	subs	r3, r3, r2
   20e66:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported write block size");
   20e68:	f04f 0100 	mov.w	r1, #0
   20e6c:	2201      	movs	r2, #1
   20e6e:	f362 0102 	bfi	r1, r2, #0, #3
   20e72:	f36f 01c5 	bfc	r1, #3, #3
   20e76:	f363 118f 	bfi	r1, r3, #6, #10
   20e7a:	483c      	ldr	r0, [pc, #240]	; (20f6c <nvs_init+0x1c8>)
   20e7c:	f7ff faca 	bl	20414 <log_0>
		return -EINVAL;
   20e80:	f06f 0615 	mvn.w	r6, #21
   20e84:	e7c3      	b.n	20e0e <nvs_init+0x6a>
   20e86:	4b35      	ldr	r3, [pc, #212]	; (20f5c <nvs_init+0x1b8>)
   20e88:	4a35      	ldr	r2, [pc, #212]	; (20f60 <nvs_init+0x1bc>)
   20e8a:	1a9b      	subs	r3, r3, r2
   20e8c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to get page info");
   20e8e:	f04f 0100 	mov.w	r1, #0
   20e92:	2201      	movs	r2, #1
   20e94:	f362 0102 	bfi	r1, r2, #0, #3
   20e98:	f36f 01c5 	bfc	r1, #3, #3
   20e9c:	f363 118f 	bfi	r1, r3, #6, #10
   20ea0:	4833      	ldr	r0, [pc, #204]	; (20f70 <nvs_init+0x1cc>)
   20ea2:	f7ff fab7 	bl	20414 <log_0>
		return -EINVAL;
   20ea6:	f06f 0615 	mvn.w	r6, #21
   20eaa:	e7b0      	b.n	20e0e <nvs_init+0x6a>
   20eac:	4b2b      	ldr	r3, [pc, #172]	; (20f5c <nvs_init+0x1b8>)
   20eae:	4a2c      	ldr	r2, [pc, #176]	; (20f60 <nvs_init+0x1bc>)
   20eb0:	1a9b      	subs	r3, r3, r2
   20eb2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid sector size");
   20eb4:	f04f 0100 	mov.w	r1, #0
   20eb8:	2201      	movs	r2, #1
   20eba:	f362 0102 	bfi	r1, r2, #0, #3
   20ebe:	f36f 01c5 	bfc	r1, #3, #3
   20ec2:	f363 118f 	bfi	r1, r3, #6, #10
   20ec6:	482b      	ldr	r0, [pc, #172]	; (20f74 <nvs_init+0x1d0>)
   20ec8:	f7ff faa4 	bl	20414 <log_0>
		return -EINVAL;
   20ecc:	f06f 0615 	mvn.w	r6, #21
   20ed0:	e79d      	b.n	20e0e <nvs_init+0x6a>
   20ed2:	4b22      	ldr	r3, [pc, #136]	; (20f5c <nvs_init+0x1b8>)
   20ed4:	4a22      	ldr	r2, [pc, #136]	; (20f60 <nvs_init+0x1bc>)
   20ed6:	1a9b      	subs	r3, r3, r2
   20ed8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Configuration error - sector count");
   20eda:	f04f 0100 	mov.w	r1, #0
   20ede:	2201      	movs	r2, #1
   20ee0:	f362 0102 	bfi	r1, r2, #0, #3
   20ee4:	f36f 01c5 	bfc	r1, #3, #3
   20ee8:	f363 118f 	bfi	r1, r3, #6, #10
   20eec:	4822      	ldr	r0, [pc, #136]	; (20f78 <nvs_init+0x1d4>)
   20eee:	f7ff fa91 	bl	20414 <log_0>
		return -EINVAL;
   20ef2:	f06f 0615 	mvn.w	r6, #21
   20ef6:	e78a      	b.n	20e0e <nvs_init+0x6a>
	fs->ready = true;
   20ef8:	2301      	movs	r3, #1
   20efa:	7423      	strb	r3, [r4, #16]
   20efc:	4d17      	ldr	r5, [pc, #92]	; (20f5c <nvs_init+0x1b8>)
   20efe:	4b18      	ldr	r3, [pc, #96]	; (20f60 <nvs_init+0x1bc>)
   20f00:	1aed      	subs	r5, r5, r3
   20f02:	08ed      	lsrs	r5, r5, #3
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   20f04:	2703      	movs	r7, #3
   20f06:	f04f 0300 	mov.w	r3, #0
   20f0a:	f367 0302 	bfi	r3, r7, #0, #3
   20f0e:	f36f 03c5 	bfc	r3, #3, #3
   20f12:	f365 138f 	bfi	r3, r5, #6, #10
   20f16:	89a2      	ldrh	r2, [r4, #12]
   20f18:	89e1      	ldrh	r1, [r4, #14]
   20f1a:	4818      	ldr	r0, [pc, #96]	; (20f7c <nvs_init+0x1d8>)
   20f1c:	f7ff f9fa 	bl	20314 <log_2>
	LOG_INF("alloc wra: %d, %x",
   20f20:	f04f 0300 	mov.w	r3, #0
   20f24:	f367 0302 	bfi	r3, r7, #0, #3
   20f28:	f36f 03c5 	bfc	r3, #3, #3
   20f2c:	f365 138f 	bfi	r3, r5, #6, #10
   20f30:	6861      	ldr	r1, [r4, #4]
   20f32:	b28a      	uxth	r2, r1
   20f34:	0c09      	lsrs	r1, r1, #16
   20f36:	4812      	ldr	r0, [pc, #72]	; (20f80 <nvs_init+0x1dc>)
   20f38:	f7ff f9ec 	bl	20314 <log_2>
	LOG_INF("data wra: %d, %x",
   20f3c:	f04f 0300 	mov.w	r3, #0
   20f40:	f367 0302 	bfi	r3, r7, #0, #3
   20f44:	f36f 03c5 	bfc	r3, #3, #3
   20f48:	f365 138f 	bfi	r3, r5, #6, #10
   20f4c:	68a1      	ldr	r1, [r4, #8]
   20f4e:	b28a      	uxth	r2, r1
   20f50:	0c09      	lsrs	r1, r1, #16
   20f52:	480c      	ldr	r0, [pc, #48]	; (20f84 <nvs_init+0x1e0>)
   20f54:	f7ff f9de 	bl	20314 <log_2>
	return 0;
   20f58:	e759      	b.n	20e0e <nvs_init+0x6a>
   20f5a:	bf00      	nop
   20f5c:	0003d24c 	.word	0x0003d24c
   20f60:	0003d1a4 	.word	0x0003d1a4
   20f64:	0003de98 	.word	0x0003de98
   20f68:	0003deb4 	.word	0x0003deb4
   20f6c:	0003ded8 	.word	0x0003ded8
   20f70:	0003def8 	.word	0x0003def8
   20f74:	0003df10 	.word	0x0003df10
   20f78:	0003df24 	.word	0x0003df24
   20f7c:	0003df48 	.word	0x0003df48
   20f80:	0003df60 	.word	0x0003df60
   20f84:	0003df74 	.word	0x0003df74

00020f88 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   20f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f8c:	b087      	sub	sp, #28
   20f8e:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   20f90:	f890 b010 	ldrb.w	fp, [r0, #16]
   20f94:	f1bb 0f00 	cmp.w	fp, #0
   20f98:	d026      	beq.n	20fe8 <nvs_write+0x60>
   20f9a:	4604      	mov	r4, r0
   20f9c:	460e      	mov	r6, r1
   20f9e:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20fa0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20fa2:	681b      	ldr	r3, [r3, #0]
   20fa4:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   20fa6:	2901      	cmp	r1, #1
   20fa8:	d931      	bls.n	2100e <nvs_write+0x86>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20faa:	f101 0a07 	add.w	sl, r1, #7
   20fae:	424a      	negs	r2, r1
   20fb0:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
   20fb4:	2901      	cmp	r1, #1
   20fb6:	d92d      	bls.n	21014 <nvs_write+0x8c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20fb8:	b2db      	uxtb	r3, r3
   20fba:	eb03 0809 	add.w	r8, r3, r9
   20fbe:	f108 38ff 	add.w	r8, r8, #4294967295
   20fc2:	425b      	negs	r3, r3
   20fc4:	ea08 0803 	and.w	r8, r8, r3

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   20fc8:	89a3      	ldrh	r3, [r4, #12]
   20fca:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   20fce:	4599      	cmp	r9, r3
   20fd0:	f200 8096 	bhi.w	21100 <nvs_write+0x178>
   20fd4:	f1b9 0f00 	cmp.w	r9, #0
   20fd8:	d003      	beq.n	20fe2 <nvs_write+0x5a>
	    ((len > 0) && (data == NULL))) {
   20fda:	9b01      	ldr	r3, [sp, #4]
   20fdc:	2b00      	cmp	r3, #0
   20fde:	f000 8092 	beq.w	21106 <nvs_write+0x17e>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   20fe2:	6863      	ldr	r3, [r4, #4]
   20fe4:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
   20fe6:	e01b      	b.n	21020 <nvs_write+0x98>
   20fe8:	4b48      	ldr	r3, [pc, #288]	; (2110c <nvs_write+0x184>)
   20fea:	4a49      	ldr	r2, [pc, #292]	; (21110 <nvs_write+0x188>)
   20fec:	1a9b      	subs	r3, r3, r2
   20fee:	08db      	lsrs	r3, r3, #3
		LOG_ERR("NVS not initialized");
   20ff0:	f04f 0100 	mov.w	r1, #0
   20ff4:	2201      	movs	r2, #1
   20ff6:	f362 0102 	bfi	r1, r2, #0, #3
   20ffa:	f36f 01c5 	bfc	r1, #3, #3
   20ffe:	f363 118f 	bfi	r1, r3, #6, #10
   21002:	4844      	ldr	r0, [pc, #272]	; (21114 <nvs_write+0x18c>)
   21004:	f7ff fa06 	bl	20414 <log_0>
		return -EACCES;
   21008:	f06f 050c 	mvn.w	r5, #12
   2100c:	e072      	b.n	210f4 <nvs_write+0x16c>
		return len;
   2100e:	f04f 0a08 	mov.w	sl, #8
   21012:	e7cf      	b.n	20fb4 <nvs_write+0x2c>
   21014:	46c8      	mov	r8, r9
   21016:	e7d7      	b.n	20fc8 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   21018:	6862      	ldr	r2, [r4, #4]
   2101a:	9b03      	ldr	r3, [sp, #12]
   2101c:	429a      	cmp	r2, r3
   2101e:	d013      	beq.n	21048 <nvs_write+0xc0>
		rd_addr = wlk_addr;
   21020:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   21022:	aa04      	add	r2, sp, #16
   21024:	a903      	add	r1, sp, #12
   21026:	4620      	mov	r0, r4
   21028:	f014 faf5 	bl	35616 <nvs_prev_ate>
		if (rc) {
   2102c:	4605      	mov	r5, r0
   2102e:	2800      	cmp	r0, #0
   21030:	d160      	bne.n	210f4 <nvs_write+0x16c>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   21032:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   21036:	429e      	cmp	r6, r3
   21038:	d1ee      	bne.n	21018 <nvs_write+0x90>
   2103a:	a904      	add	r1, sp, #16
   2103c:	4620      	mov	r0, r4
   2103e:	f014 fa6e 	bl	3551e <nvs_ate_valid>
   21042:	2800      	cmp	r0, #0
   21044:	d0e8      	beq.n	21018 <nvs_write+0x90>
   21046:	e001      	b.n	2104c <nvs_write+0xc4>
	bool prev_found = false;
   21048:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
   2104c:	f1bb 0f00 	cmp.w	fp, #0
   21050:	d018      	beq.n	21084 <nvs_write+0xfc>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
   21052:	0c3f      	lsrs	r7, r7, #16
   21054:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
   21056:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   2105a:	4439      	add	r1, r7

		if (len == 0) {
   2105c:	f1b9 0f00 	cmp.w	r9, #0
   21060:	d103      	bne.n	2106a <nvs_write+0xe2>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
   21062:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   21066:	b983      	cbnz	r3, 2108a <nvs_write+0x102>
   21068:	e044      	b.n	210f4 <nvs_write+0x16c>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
   2106a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2106e:	4599      	cmp	r9, r3
   21070:	d10b      	bne.n	2108a <nvs_write+0x102>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   21072:	464b      	mov	r3, r9
   21074:	9a01      	ldr	r2, [sp, #4]
   21076:	4620      	mov	r0, r4
   21078:	f014 f9bd 	bl	353f6 <nvs_flash_block_cmp>
			if (rc <= 0) {
   2107c:	2800      	cmp	r0, #0
   2107e:	dc04      	bgt.n	2108a <nvs_write+0x102>
				return rc;
   21080:	4605      	mov	r5, r0
   21082:	e037      	b.n	210f4 <nvs_write+0x16c>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   21084:	f1b9 0f00 	cmp.w	r9, #0
   21088:	d034      	beq.n	210f4 <nvs_write+0x16c>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   2108a:	f1b8 0f00 	cmp.w	r8, #0
   2108e:	d00c      	beq.n	210aa <nvs_write+0x122>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
   21090:	fa1a f788 	uxtah	r7, sl, r8
   21094:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   21096:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2109a:	f04f 32ff 	mov.w	r2, #4294967295
   2109e:	f04f 33ff 	mov.w	r3, #4294967295
   210a2:	4640      	mov	r0, r8
   210a4:	f00e ffd8 	bl	30058 <z_impl_k_mutex_lock>

	gc_count = 0;
   210a8:	e00c      	b.n	210c4 <nvs_write+0x13c>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
   210aa:	2700      	movs	r7, #0
   210ac:	e7f3      	b.n	21096 <nvs_write+0x10e>
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {

			rc = nvs_flash_wrt_entry(fs, id, data, len);
   210ae:	464b      	mov	r3, r9
   210b0:	9a01      	ldr	r2, [sp, #4]
   210b2:	4631      	mov	r1, r6
   210b4:	4620      	mov	r0, r4
   210b6:	f014 fc78 	bl	359aa <nvs_flash_wrt_entry>
			if (rc) {
   210ba:	4605      	mov	r5, r0
   210bc:	b9b8      	cbnz	r0, 210ee <nvs_write+0x166>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   210be:	464d      	mov	r5, r9
   210c0:	e015      	b.n	210ee <nvs_write+0x166>
		gc_count++;
   210c2:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   210c4:	89e3      	ldrh	r3, [r4, #14]
   210c6:	429d      	cmp	r5, r3
   210c8:	d00f      	beq.n	210ea <nvs_write+0x162>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   210ca:	6862      	ldr	r2, [r4, #4]
   210cc:	68a3      	ldr	r3, [r4, #8]
   210ce:	443b      	add	r3, r7
   210d0:	429a      	cmp	r2, r3
   210d2:	d2ec      	bcs.n	210ae <nvs_write+0x126>
		rc = nvs_sector_close(fs);
   210d4:	4620      	mov	r0, r4
   210d6:	f014 fc87 	bl	359e8 <nvs_sector_close>
		if (rc) {
   210da:	b978      	cbnz	r0, 210fc <nvs_write+0x174>
		rc = nvs_gc(fs);
   210dc:	4620      	mov	r0, r4
   210de:	f014 fbc4 	bl	3586a <nvs_gc>
		if (rc) {
   210e2:	2800      	cmp	r0, #0
   210e4:	d0ed      	beq.n	210c2 <nvs_write+0x13a>
		rc = nvs_gc(fs);
   210e6:	4605      	mov	r5, r0
   210e8:	e001      	b.n	210ee <nvs_write+0x166>
			rc = -ENOSPC;
   210ea:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
   210ee:	4640      	mov	r0, r8
   210f0:	f00f f83c 	bl	3016c <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   210f4:	4628      	mov	r0, r5
   210f6:	b007      	add	sp, #28
   210f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
   210fc:	4605      	mov	r5, r0
   210fe:	e7f6      	b.n	210ee <nvs_write+0x166>
		return -EINVAL;
   21100:	f06f 0515 	mvn.w	r5, #21
   21104:	e7f6      	b.n	210f4 <nvs_write+0x16c>
   21106:	f06f 0515 	mvn.w	r5, #21
   2110a:	e7f3      	b.n	210f4 <nvs_write+0x16c>
   2110c:	0003d24c 	.word	0x0003d24c
   21110:	0003d1a4 	.word	0x0003d1a4
   21114:	0003de84 	.word	0x0003de84

00021118 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   21118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2111c:	b084      	sub	sp, #16
   2111e:	4699      	mov	r9, r3
   21120:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   21124:	7c03      	ldrb	r3, [r0, #16]
   21126:	b1a3      	cbz	r3, 21152 <nvs_read_hist+0x3a>
   21128:	4604      	mov	r4, r0
   2112a:	460f      	mov	r7, r1
   2112c:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2112e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21130:	681b      	ldr	r3, [r3, #0]
   21132:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   21134:	2a01      	cmp	r2, #1
   21136:	d91f      	bls.n	21178 <nvs_read_hist+0x60>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   21138:	4613      	mov	r3, r2
   2113a:	3207      	adds	r2, #7
   2113c:	425b      	negs	r3, r3
   2113e:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
   21140:	89a3      	ldrh	r3, [r4, #12]
   21142:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   21146:	4599      	cmp	r9, r3
   21148:	d857      	bhi.n	211fa <nvs_read_hist+0xe2>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   2114a:	6866      	ldr	r6, [r4, #4]
   2114c:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
   2114e:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   21150:	e018      	b.n	21184 <nvs_read_hist+0x6c>
   21152:	4b2e      	ldr	r3, [pc, #184]	; (2120c <nvs_read_hist+0xf4>)
   21154:	4a2e      	ldr	r2, [pc, #184]	; (21210 <nvs_read_hist+0xf8>)
   21156:	1a9b      	subs	r3, r3, r2
   21158:	08db      	lsrs	r3, r3, #3
		LOG_ERR("NVS not initialized");
   2115a:	f04f 0100 	mov.w	r1, #0
   2115e:	2201      	movs	r2, #1
   21160:	f362 0102 	bfi	r1, r2, #0, #3
   21164:	f36f 01c5 	bfc	r1, #3, #3
   21168:	f363 118f 	bfi	r1, r3, #6, #10
   2116c:	4829      	ldr	r0, [pc, #164]	; (21214 <nvs_read_hist+0xfc>)
   2116e:	f7ff f951 	bl	20414 <log_0>
		return -EACCES;
   21172:	f06f 030c 	mvn.w	r3, #12
   21176:	e035      	b.n	211e4 <nvs_read_hist+0xcc>
		return len;
   21178:	2208      	movs	r2, #8
   2117a:	e7e1      	b.n	21140 <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
   2117c:	6862      	ldr	r2, [r4, #4]
   2117e:	9b03      	ldr	r3, [sp, #12]
   21180:	429a      	cmp	r2, r3
   21182:	d016      	beq.n	211b2 <nvs_read_hist+0x9a>
	while (cnt_his <= cnt) {
   21184:	45a8      	cmp	r8, r5
   21186:	d314      	bcc.n	211b2 <nvs_read_hist+0x9a>
		rd_addr = wlk_addr;
   21188:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2118a:	aa01      	add	r2, sp, #4
   2118c:	a903      	add	r1, sp, #12
   2118e:	4620      	mov	r0, r4
   21190:	f014 fa41 	bl	35616 <nvs_prev_ate>
		if (rc) {
   21194:	4603      	mov	r3, r0
   21196:	bb28      	cbnz	r0, 211e4 <nvs_read_hist+0xcc>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   21198:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2119c:	429f      	cmp	r7, r3
   2119e:	d1ed      	bne.n	2117c <nvs_read_hist+0x64>
   211a0:	a901      	add	r1, sp, #4
   211a2:	4620      	mov	r0, r4
   211a4:	f014 f9bb 	bl	3551e <nvs_ate_valid>
   211a8:	2800      	cmp	r0, #0
   211aa:	d0e7      	beq.n	2117c <nvs_read_hist+0x64>
			cnt_his++;
   211ac:	3501      	adds	r5, #1
   211ae:	b2ad      	uxth	r5, r5
   211b0:	e7e4      	b.n	2117c <nvs_read_hist+0x64>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   211b2:	6862      	ldr	r2, [r4, #4]
   211b4:	9b03      	ldr	r3, [sp, #12]
   211b6:	429a      	cmp	r2, r3
   211b8:	d018      	beq.n	211ec <nvs_read_hist+0xd4>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   211ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   211be:	b1fb      	cbz	r3, 21200 <nvs_read_hist+0xe8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   211c0:	45a8      	cmp	r8, r5
   211c2:	d820      	bhi.n	21206 <nvs_read_hist+0xee>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
   211c4:	0c36      	lsrs	r6, r6, #16
   211c6:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
   211c8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   211cc:	454b      	cmp	r3, r9
   211ce:	bf28      	it	cs
   211d0:	464b      	movcs	r3, r9
   211d2:	4652      	mov	r2, sl
   211d4:	4431      	add	r1, r6
   211d6:	4620      	mov	r0, r4
   211d8:	f014 f8e2 	bl	353a0 <nvs_flash_rd>
	if (rc) {
   211dc:	4603      	mov	r3, r0
   211de:	b908      	cbnz	r0, 211e4 <nvs_read_hist+0xcc>
		goto err;
	}

	return wlk_ate.len;
   211e0:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
   211e4:	4618      	mov	r0, r3
   211e6:	b004      	add	sp, #16
   211e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   211ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   211f0:	429f      	cmp	r7, r3
   211f2:	d0e2      	beq.n	211ba <nvs_read_hist+0xa2>
		return -ENOENT;
   211f4:	f06f 0301 	mvn.w	r3, #1
   211f8:	e7f4      	b.n	211e4 <nvs_read_hist+0xcc>
		return -EINVAL;
   211fa:	f06f 0315 	mvn.w	r3, #21
   211fe:	e7f1      	b.n	211e4 <nvs_read_hist+0xcc>
		return -ENOENT;
   21200:	f06f 0301 	mvn.w	r3, #1
   21204:	e7ee      	b.n	211e4 <nvs_read_hist+0xcc>
   21206:	f06f 0301 	mvn.w	r3, #1
   2120a:	e7eb      	b.n	211e4 <nvs_read_hist+0xcc>
   2120c:	0003d24c 	.word	0x0003d24c
   21210:	0003d1a4 	.word	0x0003d1a4
   21214:	0003de84 	.word	0x0003de84

00021218 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   21218:	b570      	push	{r4, r5, r6, lr}
   2121a:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   2121c:	4b2c      	ldr	r3, [pc, #176]	; (212d0 <pm_system_resume+0xb8>)
   2121e:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   21220:	f004 031f 	and.w	r3, r4, #31
   21224:	2201      	movs	r2, #1
   21226:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21228:	0961      	lsrs	r1, r4, #5
   2122a:	4b2a      	ldr	r3, [pc, #168]	; (212d4 <pm_system_resume+0xbc>)
   2122c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   21230:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21232:	f3bf 8f5b 	dmb	ish
   21236:	e853 1f00 	ldrex	r1, [r3]
   2123a:	ea01 0500 	and.w	r5, r1, r0
   2123e:	e843 5600 	strex	r6, r5, [r3]
   21242:	2e00      	cmp	r6, #0
   21244:	d1f7      	bne.n	21236 <pm_system_resume+0x1e>
   21246:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2124a:	420a      	tst	r2, r1
   2124c:	d03d      	beq.n	212ca <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
   2124e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   21252:	009a      	lsls	r2, r3, #2
   21254:	4b20      	ldr	r3, [pc, #128]	; (212d8 <pm_system_resume+0xc0>)
   21256:	4413      	add	r3, r2
   21258:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2125c:	ab04      	add	r3, sp, #16
   2125e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   21262:	4b1e      	ldr	r3, [pc, #120]	; (212dc <pm_system_resume+0xc4>)
   21264:	b163      	cbz	r3, 21280 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   21266:	f015 fdf2 	bl	36e4e <pm_power_state_exit_post_ops>
	__asm__ volatile(
   2126a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2126e:	f3ef 8611 	mrs	r6, BASEPRI
   21272:	f383 8812 	msr	BASEPRI_MAX, r3
   21276:	f3bf 8f6f 	isb	sy
   2127a:	4b19      	ldr	r3, [pc, #100]	; (212e0 <pm_system_resume+0xc8>)
   2127c:	681d      	ldr	r5, [r3, #0]
   2127e:	e00a      	b.n	21296 <pm_system_resume+0x7e>
	__asm__ volatile(
   21280:	2300      	movs	r3, #0
   21282:	f383 8811 	msr	BASEPRI, r3
   21286:	f3bf 8f6f 	isb	sy
}
   2128a:	e7ee      	b.n	2126a <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2128c:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   2128e:	b10d      	cbz	r5, 21294 <pm_system_resume+0x7c>
	return node->next;
   21290:	682b      	ldr	r3, [r5, #0]
   21292:	b16b      	cbz	r3, 212b0 <pm_system_resume+0x98>
{
   21294:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   21296:	b15d      	cbz	r5, 212b0 <pm_system_resume+0x98>
			callback = notifier->state_exit;
   21298:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   2129a:	2a00      	cmp	r2, #0
   2129c:	d0f6      	beq.n	2128c <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
   2129e:	4b0c      	ldr	r3, [pc, #48]	; (212d0 <pm_system_resume+0xb8>)
   212a0:	7d1b      	ldrb	r3, [r3, #20]
   212a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   212a6:	0099      	lsls	r1, r3, #2
   212a8:	4b0b      	ldr	r3, [pc, #44]	; (212d8 <pm_system_resume+0xc0>)
   212aa:	5c58      	ldrb	r0, [r3, r1]
   212ac:	4790      	blx	r2
   212ae:	e7ed      	b.n	2128c <pm_system_resume+0x74>
	__asm__ volatile(
   212b0:	f386 8811 	msr	BASEPRI, r6
   212b4:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   212b8:	4807      	ldr	r0, [pc, #28]	; (212d8 <pm_system_resume+0xc0>)
   212ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   212be:	00a2      	lsls	r2, r4, #2
   212c0:	1881      	adds	r1, r0, r2
   212c2:	2300      	movs	r3, #0
   212c4:	5083      	str	r3, [r0, r2]
   212c6:	604b      	str	r3, [r1, #4]
   212c8:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
   212ca:	b004      	add	sp, #16
   212cc:	bd70      	pop	{r4, r5, r6, pc}
   212ce:	bf00      	nop
   212d0:	2000d04c 	.word	0x2000d04c
   212d4:	20007b94 	.word	0x20007b94
   212d8:	20007b98 	.word	0x20007b98
   212dc:	00036e4f 	.word	0x00036e4f
   212e0:	20007b8c 	.word	0x20007b8c

000212e4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   212e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   212e6:	b089      	sub	sp, #36	; 0x24
   212e8:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   212ea:	4b55      	ldr	r3, [pc, #340]	; (21440 <pm_system_suspend+0x15c>)
   212ec:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   212ee:	f004 031f 	and.w	r3, r4, #31
   212f2:	2201      	movs	r2, #1
   212f4:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   212f6:	0961      	lsrs	r1, r4, #5
   212f8:	4b52      	ldr	r3, [pc, #328]	; (21444 <pm_system_suspend+0x160>)
   212fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   212fe:	f3bf 8f5b 	dmb	ish
   21302:	e853 1f00 	ldrex	r1, [r3]
   21306:	ea41 0002 	orr.w	r0, r1, r2
   2130a:	e843 0600 	strex	r6, r0, [r3]
   2130e:	2e00      	cmp	r6, #0
   21310:	d1f7      	bne.n	21302 <pm_system_suspend+0x1e>
   21312:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   21316:	420a      	tst	r2, r1
   21318:	d017      	beq.n	2134a <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   2131a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2131e:	4a4a      	ldr	r2, [pc, #296]	; (21448 <pm_system_suspend+0x164>)
   21320:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   21324:	2b00      	cmp	r3, #0
   21326:	f000 8088 	beq.w	2143a <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   2132a:	f1b5 3fff 	cmp.w	r5, #4294967295
   2132e:	d11c      	bne.n	2136a <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   21330:	f00f fa5e 	bl	307f0 <k_sched_lock>
	__asm__ volatile(
   21334:	f04f 0340 	mov.w	r3, #64	; 0x40
   21338:	f3ef 8611 	mrs	r6, BASEPRI
   2133c:	f383 8812 	msr	BASEPRI_MAX, r3
   21340:	f3bf 8f6f 	isb	sy
	return list->head;
   21344:	4b41      	ldr	r3, [pc, #260]	; (2144c <pm_system_suspend+0x168>)
   21346:	681d      	ldr	r5, [r3, #0]
   21348:	e02a      	b.n	213a0 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   2134a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   2134e:	4b3e      	ldr	r3, [pc, #248]	; (21448 <pm_system_suspend+0x164>)
   21350:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   21354:	466f      	mov	r7, sp
   21356:	462a      	mov	r2, r5
   21358:	4621      	mov	r1, r4
   2135a:	4638      	mov	r0, r7
   2135c:	f014 fb7c 	bl	35a58 <pm_policy_next_state>
   21360:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   21364:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   21368:	e7d7      	b.n	2131a <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
   2136a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2136e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   21372:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   21374:	0c59      	lsrs	r1, r3, #17
   21376:	03d8      	lsls	r0, r3, #15
   21378:	4e35      	ldr	r6, [pc, #212]	; (21450 <pm_system_suspend+0x16c>)
   2137a:	4a36      	ldr	r2, [pc, #216]	; (21454 <pm_system_suspend+0x170>)
   2137c:	2300      	movs	r3, #0
   2137e:	1980      	adds	r0, r0, r6
   21380:	f04f 0600 	mov.w	r6, #0
   21384:	eb46 0101 	adc.w	r1, r6, r1
   21388:	f7eb fc10 	bl	cbac <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   2138c:	2101      	movs	r1, #1
   2138e:	1a28      	subs	r0, r5, r0
   21390:	f01b fb5b 	bl	3ca4a <z_set_timeout_expiry>
   21394:	e7cc      	b.n	21330 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   21396:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   21398:	b10d      	cbz	r5, 2139e <pm_system_suspend+0xba>
	return node->next;
   2139a:	682b      	ldr	r3, [r5, #0]
   2139c:	b16b      	cbz	r3, 213ba <pm_system_suspend+0xd6>
{
   2139e:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   213a0:	b15d      	cbz	r5, 213ba <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
   213a2:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   213a4:	2a00      	cmp	r2, #0
   213a6:	d0f6      	beq.n	21396 <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
   213a8:	4b25      	ldr	r3, [pc, #148]	; (21440 <pm_system_suspend+0x15c>)
   213aa:	7d1b      	ldrb	r3, [r3, #20]
   213ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   213b0:	4925      	ldr	r1, [pc, #148]	; (21448 <pm_system_suspend+0x164>)
   213b2:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   213b6:	4790      	blx	r2
   213b8:	e7ed      	b.n	21396 <pm_system_suspend+0xb2>
	__asm__ volatile(
   213ba:	f386 8811 	msr	BASEPRI, r6
   213be:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   213c2:	f004 031f 	and.w	r3, r4, #31
   213c6:	2101      	movs	r1, #1
   213c8:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   213ca:	0963      	lsrs	r3, r4, #5
   213cc:	4a22      	ldr	r2, [pc, #136]	; (21458 <pm_system_suspend+0x174>)
   213ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   213d2:	f3bf 8f5b 	dmb	ish
   213d6:	e853 2f00 	ldrex	r2, [r3]
   213da:	430a      	orrs	r2, r1
   213dc:	e843 2000 	strex	r0, r2, [r3]
   213e0:	2800      	cmp	r0, #0
   213e2:	d1f8      	bne.n	213d6 <pm_system_suspend+0xf2>
   213e4:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   213e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   213ec:	4a16      	ldr	r2, [pc, #88]	; (21448 <pm_system_suspend+0x164>)
   213ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   213f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   213f6:	ab08      	add	r3, sp, #32
   213f8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   213fc:	4b17      	ldr	r3, [pc, #92]	; (2145c <pm_system_suspend+0x178>)
   213fe:	b10b      	cbz	r3, 21404 <pm_system_suspend+0x120>
		pm_power_state_set(info);
   21400:	f015 fd12 	bl	36e28 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   21404:	f7ff ff08 	bl	21218 <pm_system_resume>
	k_sched_unlock();
   21408:	f00f fbf0 	bl	30bec <k_sched_unlock>
	bool ret = true;
   2140c:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   2140e:	f004 021f 	and.w	r2, r4, #31
   21412:	2301      	movs	r3, #1
   21414:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21416:	0964      	lsrs	r4, r4, #5
   21418:	4a0a      	ldr	r2, [pc, #40]	; (21444 <pm_system_suspend+0x160>)
   2141a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   2141e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21420:	f3bf 8f5b 	dmb	ish
   21424:	e854 2f00 	ldrex	r2, [r4]
   21428:	401a      	ands	r2, r3
   2142a:	e844 2100 	strex	r1, r2, [r4]
   2142e:	2900      	cmp	r1, #0
   21430:	d1f8      	bne.n	21424 <pm_system_suspend+0x140>
   21432:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   21436:	b009      	add	sp, #36	; 0x24
   21438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
   2143a:	2000      	movs	r0, #0
   2143c:	e7e7      	b.n	2140e <pm_system_suspend+0x12a>
   2143e:	bf00      	nop
   21440:	2000d04c 	.word	0x2000d04c
   21444:	20007ba4 	.word	0x20007ba4
   21448:	20007b98 	.word	0x20007b98
   2144c:	20007b8c 	.word	0x20007b8c
   21450:	000f423f 	.word	0x000f423f
   21454:	000f4240 	.word	0x000f4240
   21458:	20007b94 	.word	0x20007b94
   2145c:	00036e29 	.word	0x00036e29

00021460 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   21460:	4b01      	ldr	r3, [pc, #4]	; (21468 <uECC_get_rng+0x8>)
   21462:	6818      	ldr	r0, [r3, #0]
   21464:	4770      	bx	lr
   21466:	bf00      	nop
   21468:	200004ac 	.word	0x200004ac

0002146c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2146c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2146e:	b089      	sub	sp, #36	; 0x24
   21470:	4605      	mov	r5, r0
   21472:	460c      	mov	r4, r1
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   21474:	2208      	movs	r2, #8
   21476:	f014 fc93 	bl	35da0 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   2147a:	2700      	movs	r7, #0
   2147c:	9702      	str	r7, [sp, #8]
   2147e:	9701      	str	r7, [sp, #4]
   21480:	9700      	str	r7, [sp, #0]
	tmp[3] = product[11];
   21482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21484:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   21486:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21488:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2148a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2148c:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2148e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21490:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   21492:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   21494:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   21496:	2308      	movs	r3, #8
   21498:	466a      	mov	r2, sp
   2149a:	4669      	mov	r1, sp
   2149c:	4668      	mov	r0, sp
   2149e:	f014 fcc4 	bl	35e2a <uECC_vli_add>
   214a2:	4606      	mov	r6, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   214a4:	2308      	movs	r3, #8
   214a6:	466a      	mov	r2, sp
   214a8:	4629      	mov	r1, r5
   214aa:	4628      	mov	r0, r5
   214ac:	f014 fcbd 	bl	35e2a <uECC_vli_add>
   214b0:	4406      	add	r6, r0

	/* s2 */
	tmp[3] = product[12];
   214b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   214b4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   214b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   214b8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   214ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   214bc:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   214be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   214c0:	9306      	str	r3, [sp, #24]
	tmp[7] = 0;
   214c2:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   214c4:	2308      	movs	r3, #8
   214c6:	466a      	mov	r2, sp
   214c8:	4669      	mov	r1, sp
   214ca:	4668      	mov	r0, sp
   214cc:	f014 fcad 	bl	35e2a <uECC_vli_add>
   214d0:	4406      	add	r6, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   214d2:	2308      	movs	r3, #8
   214d4:	466a      	mov	r2, sp
   214d6:	4629      	mov	r1, r5
   214d8:	4628      	mov	r0, r5
   214da:	f014 fca6 	bl	35e2a <uECC_vli_add>
   214de:	4406      	add	r6, r0

	/* s3 */
	tmp[0] = product[8];
   214e0:	6a23      	ldr	r3, [r4, #32]
   214e2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   214e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   214e6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   214e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   214ea:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   214ec:	9705      	str	r7, [sp, #20]
   214ee:	9704      	str	r7, [sp, #16]
   214f0:	9703      	str	r7, [sp, #12]
	tmp[6] = product[14];
   214f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   214f4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   214f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   214f8:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   214fa:	2308      	movs	r3, #8
   214fc:	466a      	mov	r2, sp
   214fe:	4629      	mov	r1, r5
   21500:	4628      	mov	r0, r5
   21502:	f014 fc92 	bl	35e2a <uECC_vli_add>
   21506:	4406      	add	r6, r0

	/* s4 */
	tmp[0] = product[9];
   21508:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2150a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   2150c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2150e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   21510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21512:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   21514:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21516:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
   21518:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2151a:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
   2151c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   2151e:	9205      	str	r2, [sp, #20]
	tmp[6] = product[13];
   21520:	9306      	str	r3, [sp, #24]
	tmp[7] = product[8];
   21522:	6a23      	ldr	r3, [r4, #32]
   21524:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   21526:	2308      	movs	r3, #8
   21528:	466a      	mov	r2, sp
   2152a:	4629      	mov	r1, r5
   2152c:	4628      	mov	r0, r5
   2152e:	f014 fc7c 	bl	35e2a <uECC_vli_add>
   21532:	4406      	add	r6, r0

	/* d1 */
	tmp[0] = product[11];
   21534:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21536:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   21538:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2153a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   2153c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2153e:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   21540:	9705      	str	r7, [sp, #20]
   21542:	9704      	str	r7, [sp, #16]
   21544:	9703      	str	r7, [sp, #12]
	tmp[6] = product[8];
   21546:	6a23      	ldr	r3, [r4, #32]
   21548:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   2154a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2154c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2154e:	2308      	movs	r3, #8
   21550:	466a      	mov	r2, sp
   21552:	4629      	mov	r1, r5
   21554:	4628      	mov	r0, r5
   21556:	f014 fca8 	bl	35eaa <uECC_vli_sub>
   2155a:	1a36      	subs	r6, r6, r0

	/* d2 */
	tmp[0] = product[12];
   2155c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2155e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   21560:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21562:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   21564:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21566:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   21568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2156a:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
   2156c:	9705      	str	r7, [sp, #20]
   2156e:	9704      	str	r7, [sp, #16]
	tmp[6] = product[9];
   21570:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21572:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   21574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21576:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   21578:	2308      	movs	r3, #8
   2157a:	466a      	mov	r2, sp
   2157c:	4629      	mov	r1, r5
   2157e:	4628      	mov	r0, r5
   21580:	f014 fc93 	bl	35eaa <uECC_vli_sub>
   21584:	1a36      	subs	r6, r6, r0

	/* d3 */
	tmp[0] = product[13];
   21586:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21588:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2158a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2158c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2158e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   21590:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   21592:	6a23      	ldr	r3, [r4, #32]
   21594:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   21596:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21598:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2159a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2159c:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   2159e:	9706      	str	r7, [sp, #24]
	tmp[7] = product[12];
   215a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   215a2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   215a4:	2308      	movs	r3, #8
   215a6:	466a      	mov	r2, sp
   215a8:	4629      	mov	r1, r5
   215aa:	4628      	mov	r0, r5
   215ac:	f014 fc7d 	bl	35eaa <uECC_vli_sub>
   215b0:	1a36      	subs	r6, r6, r0

	/* d4 */
	tmp[0] = product[14];
   215b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   215b4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   215b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   215b8:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
   215ba:	9702      	str	r7, [sp, #8]
	tmp[3] = product[9];
   215bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   215be:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   215c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   215c2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   215c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   215c6:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   215c8:	9706      	str	r7, [sp, #24]
	tmp[7] = product[13];
   215ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   215cc:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   215ce:	2308      	movs	r3, #8
   215d0:	466a      	mov	r2, sp
   215d2:	4629      	mov	r1, r5
   215d4:	4628      	mov	r0, r5
   215d6:	f014 fc68 	bl	35eaa <uECC_vli_sub>

	if (carry < 0) {
   215da:	1a36      	subs	r6, r6, r0
   215dc:	d50f      	bpl.n	215fe <vli_mmod_fast_secp256r1+0x192>
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   215de:	2308      	movs	r3, #8
   215e0:	4a0c      	ldr	r2, [pc, #48]	; (21614 <vli_mmod_fast_secp256r1+0x1a8>)
   215e2:	4629      	mov	r1, r5
   215e4:	4628      	mov	r0, r5
   215e6:	f014 fc20 	bl	35e2a <uECC_vli_add>
		}
		while (carry < 0);
   215ea:	1836      	adds	r6, r6, r0
   215ec:	d4f7      	bmi.n	215de <vli_mmod_fast_secp256r1+0x172>
   215ee:	e00f      	b.n	21610 <vli_mmod_fast_secp256r1+0x1a4>
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   215f0:	2308      	movs	r3, #8
   215f2:	4a08      	ldr	r2, [pc, #32]	; (21614 <vli_mmod_fast_secp256r1+0x1a8>)
   215f4:	4629      	mov	r1, r5
   215f6:	4628      	mov	r0, r5
   215f8:	f014 fc57 	bl	35eaa <uECC_vli_sub>
   215fc:	1a36      	subs	r6, r6, r0
		while (carry || 
   215fe:	2e00      	cmp	r6, #0
   21600:	d1f6      	bne.n	215f0 <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   21602:	2208      	movs	r2, #8
   21604:	4629      	mov	r1, r5
   21606:	4803      	ldr	r0, [pc, #12]	; (21614 <vli_mmod_fast_secp256r1+0x1a8>)
   21608:	f014 fbd9 	bl	35dbe <uECC_vli_cmp_unsafe>
		while (carry || 
   2160c:	2801      	cmp	r0, #1
   2160e:	d1ef      	bne.n	215f0 <vli_mmod_fast_secp256r1+0x184>
		}
	}
}
   21610:	b009      	add	sp, #36	; 0x24
   21612:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21614:	0003df98 	.word	0x0003df98

00021618 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   21618:	b4f0      	push	{r4, r5, r6, r7}
   2161a:	b08c      	sub	sp, #48	; 0x30
   2161c:	4607      	mov	r7, r0
   2161e:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   21620:	ac01      	add	r4, sp, #4
   21622:	4d2a      	ldr	r5, [pc, #168]	; (216cc <tc_aes128_set_encrypt_key+0xb4>)
   21624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2162c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   21630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   21634:	2f00      	cmp	r7, #0
   21636:	d045      	beq.n	216c4 <tc_aes128_set_encrypt_key+0xac>
   21638:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   2163a:	2e00      	cmp	r6, #0
   2163c:	d044      	beq.n	216c8 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   2163e:	2300      	movs	r3, #0
   21640:	e00f      	b.n	21662 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   21642:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   21646:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   2164a:	784a      	ldrb	r2, [r1, #1]
   2164c:	0412      	lsls	r2, r2, #16
   2164e:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   21652:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   21654:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   21658:	78c9      	ldrb	r1, [r1, #3]
   2165a:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2165c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   21660:	3301      	adds	r3, #1
   21662:	2b03      	cmp	r3, #3
   21664:	d9ed      	bls.n	21642 <tc_aes128_set_encrypt_key+0x2a>
   21666:	e006      	b.n	21676 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   21668:	1f19      	subs	r1, r3, #4
   2166a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   2166e:	404a      	eors	r2, r1
   21670:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   21674:	3301      	adds	r3, #1
   21676:	2b2b      	cmp	r3, #43	; 0x2b
   21678:	d820      	bhi.n	216bc <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   2167a:	1e5a      	subs	r2, r3, #1
   2167c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   21680:	f013 0f03 	tst.w	r3, #3
   21684:	d1f0      	bne.n	21668 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   21686:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2168a:	0e11      	lsrs	r1, r2, #24
   2168c:	4c10      	ldr	r4, [pc, #64]	; (216d0 <tc_aes128_set_encrypt_key+0xb8>)
   2168e:	5c65      	ldrb	r5, [r4, r1]
   21690:	f3c2 4107 	ubfx	r1, r2, #16, #8
   21694:	5c61      	ldrb	r1, [r4, r1]
   21696:	0409      	lsls	r1, r1, #16
   21698:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   2169c:	f3c2 2507 	ubfx	r5, r2, #8, #8
   216a0:	5d65      	ldrb	r5, [r4, r5]
   216a2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   216a6:	b2d2      	uxtb	r2, r2
   216a8:	5ca2      	ldrb	r2, [r4, r2]
   216aa:	4311      	orrs	r1, r2
   216ac:	f023 0203 	bic.w	r2, r3, #3
   216b0:	ac0c      	add	r4, sp, #48	; 0x30
   216b2:	4422      	add	r2, r4
   216b4:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   216b8:	404a      	eors	r2, r1
   216ba:	e7d5      	b.n	21668 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   216bc:	2001      	movs	r0, #1
}
   216be:	b00c      	add	sp, #48	; 0x30
   216c0:	bcf0      	pop	{r4, r5, r6, r7}
   216c2:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   216c4:	2000      	movs	r0, #0
   216c6:	e7fa      	b.n	216be <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   216c8:	2000      	movs	r0, #0
   216ca:	e7f8      	b.n	216be <tc_aes128_set_encrypt_key+0xa6>
   216cc:	0003d388 	.word	0x0003d388
   216d0:	0003e044 	.word	0x0003e044

000216d4 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   216d4:	2800      	cmp	r0, #0
   216d6:	f000 839a 	beq.w	21e0e <tc_aes_encrypt+0x73a>
{
   216da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216de:	b088      	sub	sp, #32
   216e0:	4616      	mov	r6, r2
   216e2:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   216e4:	2900      	cmp	r1, #0
   216e6:	f000 8394 	beq.w	21e12 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   216ea:	2a00      	cmp	r2, #0
   216ec:	f000 8393 	beq.w	21e16 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   216f0:	2310      	movs	r3, #16
   216f2:	460a      	mov	r2, r1
   216f4:	4619      	mov	r1, r3
   216f6:	eb0d 0003 	add.w	r0, sp, r3
   216fa:	f014 f9b2 	bl	35a62 <_copy>
	add_round_key(state, s->words);
   216fe:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   21700:	6833      	ldr	r3, [r6, #0]
   21702:	f89d 2010 	ldrb.w	r2, [sp, #16]
   21706:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2170a:	f88d 2010 	strb.w	r2, [sp, #16]
   2170e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   21712:	f89d 1011 	ldrb.w	r1, [sp, #17]
   21716:	404a      	eors	r2, r1
   21718:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2171c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   21720:	f89d 1012 	ldrb.w	r1, [sp, #18]
   21724:	404a      	eors	r2, r1
   21726:	f88d 2012 	strb.w	r2, [sp, #18]
   2172a:	b2db      	uxtb	r3, r3
   2172c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   21730:	4053      	eors	r3, r2
   21732:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   21736:	6873      	ldr	r3, [r6, #4]
   21738:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2173c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   21740:	f88d 2014 	strb.w	r2, [sp, #20]
   21744:	f3c3 4207 	ubfx	r2, r3, #16, #8
   21748:	f89d 1015 	ldrb.w	r1, [sp, #21]
   2174c:	404a      	eors	r2, r1
   2174e:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   21752:	f3c3 2207 	ubfx	r2, r3, #8, #8
   21756:	f89d 1016 	ldrb.w	r1, [sp, #22]
   2175a:	404a      	eors	r2, r1
   2175c:	f88d 2016 	strb.w	r2, [sp, #22]
   21760:	b2db      	uxtb	r3, r3
   21762:	f89d 2017 	ldrb.w	r2, [sp, #23]
   21766:	4053      	eors	r3, r2
   21768:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2176c:	68b3      	ldr	r3, [r6, #8]
   2176e:	f89d 2018 	ldrb.w	r2, [sp, #24]
   21772:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   21776:	f88d 2018 	strb.w	r2, [sp, #24]
   2177a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2177e:	f89d 1019 	ldrb.w	r1, [sp, #25]
   21782:	404a      	eors	r2, r1
   21784:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   21788:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2178c:	f89d 101a 	ldrb.w	r1, [sp, #26]
   21790:	404a      	eors	r2, r1
   21792:	f88d 201a 	strb.w	r2, [sp, #26]
   21796:	b2db      	uxtb	r3, r3
   21798:	f89d 201b 	ldrb.w	r2, [sp, #27]
   2179c:	4053      	eors	r3, r2
   2179e:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   217a2:	68f3      	ldr	r3, [r6, #12]
   217a4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   217a8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   217ac:	f88d 201c 	strb.w	r2, [sp, #28]
   217b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   217b4:	f89d 101d 	ldrb.w	r1, [sp, #29]
   217b8:	404a      	eors	r2, r1
   217ba:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   217be:	f3c3 2207 	ubfx	r2, r3, #8, #8
   217c2:	f89d 101e 	ldrb.w	r1, [sp, #30]
   217c6:	404a      	eors	r2, r1
   217c8:	f88d 201e 	strb.w	r2, [sp, #30]
   217cc:	b2db      	uxtb	r3, r3
   217ce:	f89d 201f 	ldrb.w	r2, [sp, #31]
   217d2:	4053      	eors	r3, r2
   217d4:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   217d8:	2400      	movs	r4, #0
}
   217da:	e239      	b.n	21c50 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   217dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   217e0:	f88d 3000 	strb.w	r3, [sp]
   217e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   217e8:	f88d 3001 	strb.w	r3, [sp, #1]
   217ec:	f89d 301a 	ldrb.w	r3, [sp, #26]
   217f0:	f88d 3002 	strb.w	r3, [sp, #2]
   217f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
   217f8:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   217fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21800:	f88d 3004 	strb.w	r3, [sp, #4]
   21804:	f89d 3019 	ldrb.w	r3, [sp, #25]
   21808:	f88d 3005 	strb.w	r3, [sp, #5]
   2180c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   21810:	f88d 3006 	strb.w	r3, [sp, #6]
   21814:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21818:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2181c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   21820:	f88d 3008 	strb.w	r3, [sp, #8]
   21824:	f89d 301d 	ldrb.w	r3, [sp, #29]
   21828:	f88d 3009 	strb.w	r3, [sp, #9]
   2182c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   21830:	f88d 300a 	strb.w	r3, [sp, #10]
   21834:	f89d 3017 	ldrb.w	r3, [sp, #23]
   21838:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2183c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   21840:	f88d 300c 	strb.w	r3, [sp, #12]
   21844:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21848:	f88d 300d 	strb.w	r3, [sp, #13]
   2184c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   21850:	f88d 300e 	strb.w	r3, [sp, #14]
   21854:	f89d 301b 	ldrb.w	r3, [sp, #27]
   21858:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2185c:	2310      	movs	r3, #16
   2185e:	466a      	mov	r2, sp
   21860:	4619      	mov	r1, r3
   21862:	eb0d 0003 	add.w	r0, sp, r3
   21866:	f014 f8fc 	bl	35a62 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2186a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2186e:	f014 f909 	bl	35a84 <_double_byte>
   21872:	4680      	mov	r8, r0
   21874:	f89d 0011 	ldrb.w	r0, [sp, #17]
   21878:	f014 f904 	bl	35a84 <_double_byte>
   2187c:	4601      	mov	r1, r0
   2187e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   21882:	f89d 2012 	ldrb.w	r2, [sp, #18]
   21886:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2188a:	4041      	eors	r1, r0
   2188c:	ea88 0801 	eor.w	r8, r8, r1
   21890:	ea82 0208 	eor.w	r2, r2, r8
   21894:	4053      	eors	r3, r2
   21896:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2189a:	f89d 8010 	ldrb.w	r8, [sp, #16]
   2189e:	f014 f8f1 	bl	35a84 <_double_byte>
   218a2:	ea88 0800 	eor.w	r8, r8, r0
   218a6:	fa5f f888 	uxtb.w	r8, r8
   218aa:	f89d 0012 	ldrb.w	r0, [sp, #18]
   218ae:	f014 f8e9 	bl	35a84 <_double_byte>
   218b2:	4602      	mov	r2, r0
   218b4:	f89d 0012 	ldrb.w	r0, [sp, #18]
   218b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   218bc:	4042      	eors	r2, r0
   218be:	ea88 0802 	eor.w	r8, r8, r2
   218c2:	ea83 0308 	eor.w	r3, r3, r8
   218c6:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   218ca:	f89d 8010 	ldrb.w	r8, [sp, #16]
   218ce:	f89d 3011 	ldrb.w	r3, [sp, #17]
   218d2:	ea88 0803 	eor.w	r8, r8, r3
   218d6:	f014 f8d5 	bl	35a84 <_double_byte>
   218da:	ea88 0800 	eor.w	r8, r8, r0
   218de:	fa5f f888 	uxtb.w	r8, r8
   218e2:	f89d 0013 	ldrb.w	r0, [sp, #19]
   218e6:	f014 f8cd 	bl	35a84 <_double_byte>
   218ea:	f89d 3013 	ldrb.w	r3, [sp, #19]
   218ee:	4058      	eors	r0, r3
   218f0:	ea88 0800 	eor.w	r8, r8, r0
   218f4:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   218f8:	f89d 0010 	ldrb.w	r0, [sp, #16]
   218fc:	f014 f8c2 	bl	35a84 <_double_byte>
   21900:	f89d 2010 	ldrb.w	r2, [sp, #16]
   21904:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21908:	f89d 8012 	ldrb.w	r8, [sp, #18]
   2190c:	4050      	eors	r0, r2
   2190e:	4043      	eors	r3, r0
   21910:	ea88 0803 	eor.w	r8, r8, r3
   21914:	fa5f f888 	uxtb.w	r8, r8
   21918:	f89d 0013 	ldrb.w	r0, [sp, #19]
   2191c:	f014 f8b2 	bl	35a84 <_double_byte>
   21920:	ea88 0800 	eor.w	r8, r8, r0
   21924:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   21928:	f89d 0014 	ldrb.w	r0, [sp, #20]
   2192c:	f014 f8aa 	bl	35a84 <_double_byte>
   21930:	4680      	mov	r8, r0
   21932:	f89d 0015 	ldrb.w	r0, [sp, #21]
   21936:	f014 f8a5 	bl	35a84 <_double_byte>
   2193a:	4601      	mov	r1, r0
   2193c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   21940:	f89d 2016 	ldrb.w	r2, [sp, #22]
   21944:	f89d 3017 	ldrb.w	r3, [sp, #23]
   21948:	4041      	eors	r1, r0
   2194a:	ea88 0801 	eor.w	r8, r8, r1
   2194e:	ea82 0208 	eor.w	r2, r2, r8
   21952:	4053      	eors	r3, r2
   21954:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   21958:	f89d 8014 	ldrb.w	r8, [sp, #20]
   2195c:	f014 f892 	bl	35a84 <_double_byte>
   21960:	ea88 0800 	eor.w	r8, r8, r0
   21964:	fa5f f888 	uxtb.w	r8, r8
   21968:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2196c:	f014 f88a 	bl	35a84 <_double_byte>
   21970:	4602      	mov	r2, r0
   21972:	f89d 0016 	ldrb.w	r0, [sp, #22]
   21976:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2197a:	4042      	eors	r2, r0
   2197c:	ea88 0802 	eor.w	r8, r8, r2
   21980:	ea83 0308 	eor.w	r3, r3, r8
   21984:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   21988:	f89d 8014 	ldrb.w	r8, [sp, #20]
   2198c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   21990:	ea88 0803 	eor.w	r8, r8, r3
   21994:	f014 f876 	bl	35a84 <_double_byte>
   21998:	ea88 0800 	eor.w	r8, r8, r0
   2199c:	fa5f f888 	uxtb.w	r8, r8
   219a0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   219a4:	f014 f86e 	bl	35a84 <_double_byte>
   219a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   219ac:	4058      	eors	r0, r3
   219ae:	ea88 0800 	eor.w	r8, r8, r0
   219b2:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   219b6:	f89d 0014 	ldrb.w	r0, [sp, #20]
   219ba:	f014 f863 	bl	35a84 <_double_byte>
   219be:	f89d 2014 	ldrb.w	r2, [sp, #20]
   219c2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   219c6:	f89d 8016 	ldrb.w	r8, [sp, #22]
   219ca:	4050      	eors	r0, r2
   219cc:	4043      	eors	r3, r0
   219ce:	ea88 0803 	eor.w	r8, r8, r3
   219d2:	fa5f f888 	uxtb.w	r8, r8
   219d6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   219da:	f014 f853 	bl	35a84 <_double_byte>
   219de:	ea88 0800 	eor.w	r8, r8, r0
   219e2:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   219e6:	f89d 0018 	ldrb.w	r0, [sp, #24]
   219ea:	f014 f84b 	bl	35a84 <_double_byte>
   219ee:	4680      	mov	r8, r0
   219f0:	f89d 0019 	ldrb.w	r0, [sp, #25]
   219f4:	f014 f846 	bl	35a84 <_double_byte>
   219f8:	4601      	mov	r1, r0
   219fa:	f89d 0019 	ldrb.w	r0, [sp, #25]
   219fe:	f89d 201a 	ldrb.w	r2, [sp, #26]
   21a02:	f89d 301b 	ldrb.w	r3, [sp, #27]
   21a06:	4041      	eors	r1, r0
   21a08:	ea88 0801 	eor.w	r8, r8, r1
   21a0c:	ea82 0208 	eor.w	r2, r2, r8
   21a10:	4053      	eors	r3, r2
   21a12:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   21a16:	f89d 8018 	ldrb.w	r8, [sp, #24]
   21a1a:	f014 f833 	bl	35a84 <_double_byte>
   21a1e:	ea88 0800 	eor.w	r8, r8, r0
   21a22:	fa5f f888 	uxtb.w	r8, r8
   21a26:	f89d 001a 	ldrb.w	r0, [sp, #26]
   21a2a:	f014 f82b 	bl	35a84 <_double_byte>
   21a2e:	4602      	mov	r2, r0
   21a30:	f89d 001a 	ldrb.w	r0, [sp, #26]
   21a34:	f89d 301b 	ldrb.w	r3, [sp, #27]
   21a38:	4042      	eors	r2, r0
   21a3a:	ea88 0802 	eor.w	r8, r8, r2
   21a3e:	ea83 0308 	eor.w	r3, r3, r8
   21a42:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   21a46:	f89d 8018 	ldrb.w	r8, [sp, #24]
   21a4a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   21a4e:	ea88 0803 	eor.w	r8, r8, r3
   21a52:	f014 f817 	bl	35a84 <_double_byte>
   21a56:	ea88 0800 	eor.w	r8, r8, r0
   21a5a:	fa5f f888 	uxtb.w	r8, r8
   21a5e:	f89d 001b 	ldrb.w	r0, [sp, #27]
   21a62:	f014 f80f 	bl	35a84 <_double_byte>
   21a66:	f89d 301b 	ldrb.w	r3, [sp, #27]
   21a6a:	4058      	eors	r0, r3
   21a6c:	ea88 0800 	eor.w	r8, r8, r0
   21a70:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   21a74:	f89d 0018 	ldrb.w	r0, [sp, #24]
   21a78:	f014 f804 	bl	35a84 <_double_byte>
   21a7c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   21a80:	f89d 3019 	ldrb.w	r3, [sp, #25]
   21a84:	f89d 801a 	ldrb.w	r8, [sp, #26]
   21a88:	4050      	eors	r0, r2
   21a8a:	4043      	eors	r3, r0
   21a8c:	ea88 0803 	eor.w	r8, r8, r3
   21a90:	fa5f f888 	uxtb.w	r8, r8
   21a94:	f89d 001b 	ldrb.w	r0, [sp, #27]
   21a98:	f013 fff4 	bl	35a84 <_double_byte>
   21a9c:	ea88 0800 	eor.w	r8, r8, r0
   21aa0:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   21aa4:	f89d 001c 	ldrb.w	r0, [sp, #28]
   21aa8:	f013 ffec 	bl	35a84 <_double_byte>
   21aac:	4680      	mov	r8, r0
   21aae:	f89d 001d 	ldrb.w	r0, [sp, #29]
   21ab2:	f013 ffe7 	bl	35a84 <_double_byte>
   21ab6:	4601      	mov	r1, r0
   21ab8:	f89d 001d 	ldrb.w	r0, [sp, #29]
   21abc:	f89d 201e 	ldrb.w	r2, [sp, #30]
   21ac0:	f89d 301f 	ldrb.w	r3, [sp, #31]
   21ac4:	4041      	eors	r1, r0
   21ac6:	ea88 0801 	eor.w	r8, r8, r1
   21aca:	ea82 0208 	eor.w	r2, r2, r8
   21ace:	4053      	eors	r3, r2
   21ad0:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   21ad4:	f89d 801c 	ldrb.w	r8, [sp, #28]
   21ad8:	f013 ffd4 	bl	35a84 <_double_byte>
   21adc:	ea88 0800 	eor.w	r8, r8, r0
   21ae0:	fa5f f888 	uxtb.w	r8, r8
   21ae4:	f89d 001e 	ldrb.w	r0, [sp, #30]
   21ae8:	f013 ffcc 	bl	35a84 <_double_byte>
   21aec:	4602      	mov	r2, r0
   21aee:	f89d 001e 	ldrb.w	r0, [sp, #30]
   21af2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   21af6:	4042      	eors	r2, r0
   21af8:	ea88 0802 	eor.w	r8, r8, r2
   21afc:	ea83 0308 	eor.w	r3, r3, r8
   21b00:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   21b04:	f89d 801c 	ldrb.w	r8, [sp, #28]
   21b08:	f89d 301d 	ldrb.w	r3, [sp, #29]
   21b0c:	ea88 0803 	eor.w	r8, r8, r3
   21b10:	f013 ffb8 	bl	35a84 <_double_byte>
   21b14:	ea88 0800 	eor.w	r8, r8, r0
   21b18:	fa5f f888 	uxtb.w	r8, r8
   21b1c:	f89d 001f 	ldrb.w	r0, [sp, #31]
   21b20:	f013 ffb0 	bl	35a84 <_double_byte>
   21b24:	f89d 301f 	ldrb.w	r3, [sp, #31]
   21b28:	4058      	eors	r0, r3
   21b2a:	ea88 0800 	eor.w	r8, r8, r0
   21b2e:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   21b32:	f89d 001c 	ldrb.w	r0, [sp, #28]
   21b36:	f013 ffa5 	bl	35a84 <_double_byte>
   21b3a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   21b3e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   21b42:	f89d 801e 	ldrb.w	r8, [sp, #30]
   21b46:	4050      	eors	r0, r2
   21b48:	4043      	eors	r3, r0
   21b4a:	ea88 0803 	eor.w	r8, r8, r3
   21b4e:	fa5f f888 	uxtb.w	r8, r8
   21b52:	f89d 001f 	ldrb.w	r0, [sp, #31]
   21b56:	f013 ff95 	bl	35a84 <_double_byte>
   21b5a:	ea88 0800 	eor.w	r8, r8, r0
   21b5e:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   21b62:	2310      	movs	r3, #16
   21b64:	466a      	mov	r2, sp
   21b66:	4619      	mov	r1, r3
   21b68:	eb0d 0003 	add.w	r0, sp, r3
   21b6c:	f013 ff79 	bl	35a62 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   21b70:	3401      	adds	r4, #1
   21b72:	0123      	lsls	r3, r4, #4
   21b74:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   21b78:	58eb      	ldr	r3, [r5, r3]
   21b7a:	f89d 1010 	ldrb.w	r1, [sp, #16]
   21b7e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   21b82:	f88d 1010 	strb.w	r1, [sp, #16]
   21b86:	f3c3 4107 	ubfx	r1, r3, #16, #8
   21b8a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   21b8e:	4041      	eors	r1, r0
   21b90:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   21b94:	f3c3 2107 	ubfx	r1, r3, #8, #8
   21b98:	f89d 0012 	ldrb.w	r0, [sp, #18]
   21b9c:	4041      	eors	r1, r0
   21b9e:	f88d 1012 	strb.w	r1, [sp, #18]
   21ba2:	b2db      	uxtb	r3, r3
   21ba4:	f89d 1013 	ldrb.w	r1, [sp, #19]
   21ba8:	404b      	eors	r3, r1
   21baa:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   21bae:	6853      	ldr	r3, [r2, #4]
   21bb0:	f89d 1014 	ldrb.w	r1, [sp, #20]
   21bb4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   21bb8:	f88d 1014 	strb.w	r1, [sp, #20]
   21bbc:	f3c3 4107 	ubfx	r1, r3, #16, #8
   21bc0:	f89d 0015 	ldrb.w	r0, [sp, #21]
   21bc4:	4041      	eors	r1, r0
   21bc6:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   21bca:	f3c3 2107 	ubfx	r1, r3, #8, #8
   21bce:	f89d 0016 	ldrb.w	r0, [sp, #22]
   21bd2:	4041      	eors	r1, r0
   21bd4:	f88d 1016 	strb.w	r1, [sp, #22]
   21bd8:	b2db      	uxtb	r3, r3
   21bda:	f89d 1017 	ldrb.w	r1, [sp, #23]
   21bde:	404b      	eors	r3, r1
   21be0:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   21be4:	6893      	ldr	r3, [r2, #8]
   21be6:	f89d 1018 	ldrb.w	r1, [sp, #24]
   21bea:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   21bee:	f88d 1018 	strb.w	r1, [sp, #24]
   21bf2:	f3c3 4107 	ubfx	r1, r3, #16, #8
   21bf6:	f89d 0019 	ldrb.w	r0, [sp, #25]
   21bfa:	4041      	eors	r1, r0
   21bfc:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   21c00:	f3c3 2107 	ubfx	r1, r3, #8, #8
   21c04:	f89d 001a 	ldrb.w	r0, [sp, #26]
   21c08:	4041      	eors	r1, r0
   21c0a:	f88d 101a 	strb.w	r1, [sp, #26]
   21c0e:	b2db      	uxtb	r3, r3
   21c10:	f89d 101b 	ldrb.w	r1, [sp, #27]
   21c14:	404b      	eors	r3, r1
   21c16:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   21c1a:	68d3      	ldr	r3, [r2, #12]
   21c1c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   21c20:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   21c24:	f88d 201c 	strb.w	r2, [sp, #28]
   21c28:	f3c3 4207 	ubfx	r2, r3, #16, #8
   21c2c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   21c30:	404a      	eors	r2, r1
   21c32:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   21c36:	f3c3 2207 	ubfx	r2, r3, #8, #8
   21c3a:	f89d 101e 	ldrb.w	r1, [sp, #30]
   21c3e:	404a      	eors	r2, r1
   21c40:	f88d 201e 	strb.w	r2, [sp, #30]
   21c44:	b2db      	uxtb	r3, r3
   21c46:	f89d 201f 	ldrb.w	r2, [sp, #31]
   21c4a:	4053      	eors	r3, r2
   21c4c:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   21c50:	2c08      	cmp	r4, #8
   21c52:	d80a      	bhi.n	21c6a <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   21c54:	2300      	movs	r3, #0
   21c56:	2b0f      	cmp	r3, #15
   21c58:	f63f adc0 	bhi.w	217dc <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   21c5c:	a904      	add	r1, sp, #16
   21c5e:	5cc8      	ldrb	r0, [r1, r3]
   21c60:	4a6e      	ldr	r2, [pc, #440]	; (21e1c <tc_aes_encrypt+0x748>)
   21c62:	5c10      	ldrb	r0, [r2, r0]
   21c64:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   21c66:	3301      	adds	r3, #1
   21c68:	e7f5      	b.n	21c56 <tc_aes_encrypt+0x582>
   21c6a:	2300      	movs	r3, #0
   21c6c:	e005      	b.n	21c7a <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   21c6e:	aa04      	add	r2, sp, #16
   21c70:	5cd1      	ldrb	r1, [r2, r3]
   21c72:	486a      	ldr	r0, [pc, #424]	; (21e1c <tc_aes_encrypt+0x748>)
   21c74:	5c41      	ldrb	r1, [r0, r1]
   21c76:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   21c78:	3301      	adds	r3, #1
   21c7a:	2b0f      	cmp	r3, #15
   21c7c:	d9f7      	bls.n	21c6e <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   21c7e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   21c82:	f88d 3000 	strb.w	r3, [sp]
   21c86:	f89d 3015 	ldrb.w	r3, [sp, #21]
   21c8a:	f88d 3001 	strb.w	r3, [sp, #1]
   21c8e:	f89d 301a 	ldrb.w	r3, [sp, #26]
   21c92:	f88d 3002 	strb.w	r3, [sp, #2]
   21c96:	f89d 301f 	ldrb.w	r3, [sp, #31]
   21c9a:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   21c9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21ca2:	f88d 3004 	strb.w	r3, [sp, #4]
   21ca6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   21caa:	f88d 3005 	strb.w	r3, [sp, #5]
   21cae:	f89d 301e 	ldrb.w	r3, [sp, #30]
   21cb2:	f88d 3006 	strb.w	r3, [sp, #6]
   21cb6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21cba:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   21cbe:	f89d 3018 	ldrb.w	r3, [sp, #24]
   21cc2:	f88d 3008 	strb.w	r3, [sp, #8]
   21cc6:	f89d 301d 	ldrb.w	r3, [sp, #29]
   21cca:	f88d 3009 	strb.w	r3, [sp, #9]
   21cce:	f89d 3012 	ldrb.w	r3, [sp, #18]
   21cd2:	f88d 300a 	strb.w	r3, [sp, #10]
   21cd6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   21cda:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   21cde:	f89d 301c 	ldrb.w	r3, [sp, #28]
   21ce2:	f88d 300c 	strb.w	r3, [sp, #12]
   21ce6:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21cea:	f88d 300d 	strb.w	r3, [sp, #13]
   21cee:	f89d 3016 	ldrb.w	r3, [sp, #22]
   21cf2:	f88d 300e 	strb.w	r3, [sp, #14]
   21cf6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   21cfa:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   21cfe:	2310      	movs	r3, #16
   21d00:	466a      	mov	r2, sp
   21d02:	4619      	mov	r1, r3
   21d04:	eb0d 0003 	add.w	r0, sp, r3
   21d08:	f013 feab 	bl	35a62 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   21d0c:	1c63      	adds	r3, r4, #1
   21d0e:	011a      	lsls	r2, r3, #4
   21d10:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   21d14:	58b2      	ldr	r2, [r6, r2]
   21d16:	f89d 1010 	ldrb.w	r1, [sp, #16]
   21d1a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   21d1e:	f88d 1010 	strb.w	r1, [sp, #16]
   21d22:	f3c2 4107 	ubfx	r1, r2, #16, #8
   21d26:	f89d 0011 	ldrb.w	r0, [sp, #17]
   21d2a:	4041      	eors	r1, r0
   21d2c:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   21d30:	f3c2 2107 	ubfx	r1, r2, #8, #8
   21d34:	f89d 0012 	ldrb.w	r0, [sp, #18]
   21d38:	4041      	eors	r1, r0
   21d3a:	f88d 1012 	strb.w	r1, [sp, #18]
   21d3e:	b2d2      	uxtb	r2, r2
   21d40:	f89d 1013 	ldrb.w	r1, [sp, #19]
   21d44:	404a      	eors	r2, r1
   21d46:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   21d4a:	685a      	ldr	r2, [r3, #4]
   21d4c:	f89d 1014 	ldrb.w	r1, [sp, #20]
   21d50:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   21d54:	f88d 1014 	strb.w	r1, [sp, #20]
   21d58:	f3c2 4107 	ubfx	r1, r2, #16, #8
   21d5c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   21d60:	4041      	eors	r1, r0
   21d62:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   21d66:	f3c2 2107 	ubfx	r1, r2, #8, #8
   21d6a:	f89d 0016 	ldrb.w	r0, [sp, #22]
   21d6e:	4041      	eors	r1, r0
   21d70:	f88d 1016 	strb.w	r1, [sp, #22]
   21d74:	b2d2      	uxtb	r2, r2
   21d76:	f89d 1017 	ldrb.w	r1, [sp, #23]
   21d7a:	404a      	eors	r2, r1
   21d7c:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   21d80:	689a      	ldr	r2, [r3, #8]
   21d82:	f89d 1018 	ldrb.w	r1, [sp, #24]
   21d86:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   21d8a:	f88d 1018 	strb.w	r1, [sp, #24]
   21d8e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   21d92:	f89d 0019 	ldrb.w	r0, [sp, #25]
   21d96:	4041      	eors	r1, r0
   21d98:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   21d9c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   21da0:	f89d 001a 	ldrb.w	r0, [sp, #26]
   21da4:	4041      	eors	r1, r0
   21da6:	f88d 101a 	strb.w	r1, [sp, #26]
   21daa:	b2d2      	uxtb	r2, r2
   21dac:	f89d 101b 	ldrb.w	r1, [sp, #27]
   21db0:	404a      	eors	r2, r1
   21db2:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   21db6:	68db      	ldr	r3, [r3, #12]
   21db8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   21dbc:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   21dc0:	f88d 201c 	strb.w	r2, [sp, #28]
   21dc4:	f3c3 4207 	ubfx	r2, r3, #16, #8
   21dc8:	f89d 101d 	ldrb.w	r1, [sp, #29]
   21dcc:	404a      	eors	r2, r1
   21dce:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   21dd2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   21dd6:	f89d 101e 	ldrb.w	r1, [sp, #30]
   21dda:	404a      	eors	r2, r1
   21ddc:	f88d 201e 	strb.w	r2, [sp, #30]
   21de0:	b2db      	uxtb	r3, r3
   21de2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   21de6:	4053      	eors	r3, r2
   21de8:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   21dec:	2310      	movs	r3, #16
   21dee:	eb0d 0203 	add.w	r2, sp, r3
   21df2:	4619      	mov	r1, r3
   21df4:	4638      	mov	r0, r7
   21df6:	f013 fe34 	bl	35a62 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   21dfa:	2210      	movs	r2, #16
   21dfc:	2100      	movs	r1, #0
   21dfe:	eb0d 0002 	add.w	r0, sp, r2
   21e02:	f013 fe3b 	bl	35a7c <_set>

	return TC_CRYPTO_SUCCESS;
   21e06:	2001      	movs	r0, #1
}
   21e08:	b008      	add	sp, #32
   21e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   21e0e:	2000      	movs	r0, #0
}
   21e10:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   21e12:	2000      	movs	r0, #0
   21e14:	e7f8      	b.n	21e08 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   21e16:	2000      	movs	r0, #0
   21e18:	e7f6      	b.n	21e08 <tc_aes_encrypt+0x734>
   21e1a:	bf00      	nop
   21e1c:	0003e044 	.word	0x0003e044

00021e20 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   21e20:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   21e22:	4802      	ldr	r0, [pc, #8]	; (21e2c <nrf_cc3xx_platform_abort_init+0xc>)
   21e24:	f00f fdfc 	bl	31a20 <nrf_cc3xx_platform_set_abort>
}
   21e28:	bd08      	pop	{r3, pc}
   21e2a:	bf00      	nop
   21e2c:	0003e144 	.word	0x0003e144

00021e30 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   21e30:	b1d0      	cbz	r0, 21e68 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   21e32:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   21e34:	6842      	ldr	r2, [r0, #4]
   21e36:	2a04      	cmp	r2, #4
   21e38:	d005      	beq.n	21e46 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   21e3a:	b1d2      	cbz	r2, 21e72 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   21e3c:	6800      	ldr	r0, [r0, #0]
   21e3e:	f00e f995 	bl	3016c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   21e42:	2000      	movs	r0, #0
    }
}
   21e44:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   21e46:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21e48:	2200      	movs	r2, #0
   21e4a:	f3bf 8f5b 	dmb	ish
   21e4e:	e853 1f00 	ldrex	r1, [r3]
   21e52:	2901      	cmp	r1, #1
   21e54:	d103      	bne.n	21e5e <mutex_unlock_platform+0x2e>
   21e56:	e843 2000 	strex	r0, r2, [r3]
   21e5a:	2800      	cmp	r0, #0
   21e5c:	d1f7      	bne.n	21e4e <mutex_unlock_platform+0x1e>
   21e5e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   21e62:	d104      	bne.n	21e6e <mutex_unlock_platform+0x3e>
   21e64:	4610      	mov	r0, r2
   21e66:	e7ed      	b.n	21e44 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   21e68:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   21e6c:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   21e6e:	4802      	ldr	r0, [pc, #8]	; (21e78 <mutex_unlock_platform+0x48>)
   21e70:	e7e8      	b.n	21e44 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   21e72:	4802      	ldr	r0, [pc, #8]	; (21e7c <mutex_unlock_platform+0x4c>)
   21e74:	e7e6      	b.n	21e44 <mutex_unlock_platform+0x14>
   21e76:	bf00      	nop
   21e78:	ffff8fe9 	.word	0xffff8fe9
   21e7c:	ffff8fea 	.word	0xffff8fea

00021e80 <mutex_lock_platform>:
    if(mutex == NULL) {
   21e80:	b320      	cbz	r0, 21ecc <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   21e82:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   21e84:	6842      	ldr	r2, [r0, #4]
   21e86:	2a04      	cmp	r2, #4
   21e88:	d002      	beq.n	21e90 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   21e8a:	b992      	cbnz	r2, 21eb2 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   21e8c:	4811      	ldr	r0, [pc, #68]	; (21ed4 <mutex_lock_platform+0x54>)
   21e8e:	e00f      	b.n	21eb0 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   21e90:	6803      	ldr	r3, [r0, #0]
   21e92:	2201      	movs	r2, #1
   21e94:	f3bf 8f5b 	dmb	ish
   21e98:	e853 1f00 	ldrex	r1, [r3]
   21e9c:	2900      	cmp	r1, #0
   21e9e:	d103      	bne.n	21ea8 <mutex_lock_platform+0x28>
   21ea0:	e843 2000 	strex	r0, r2, [r3]
   21ea4:	2800      	cmp	r0, #0
   21ea6:	d1f7      	bne.n	21e98 <mutex_lock_platform+0x18>
   21ea8:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   21eac:	d10c      	bne.n	21ec8 <mutex_lock_platform+0x48>
   21eae:	2000      	movs	r0, #0
}
   21eb0:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   21eb2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   21eb4:	f04f 32ff 	mov.w	r2, #4294967295
   21eb8:	f04f 33ff 	mov.w	r3, #4294967295
   21ebc:	f00e f8cc 	bl	30058 <z_impl_k_mutex_lock>
        if (ret == 0) {
   21ec0:	2800      	cmp	r0, #0
   21ec2:	d0f5      	beq.n	21eb0 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   21ec4:	4804      	ldr	r0, [pc, #16]	; (21ed8 <mutex_lock_platform+0x58>)
   21ec6:	e7f3      	b.n	21eb0 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   21ec8:	4803      	ldr	r0, [pc, #12]	; (21ed8 <mutex_lock_platform+0x58>)
   21eca:	e7f1      	b.n	21eb0 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   21ecc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   21ed0:	4770      	bx	lr
   21ed2:	bf00      	nop
   21ed4:	ffff8fea 	.word	0xffff8fea
   21ed8:	ffff8fe9 	.word	0xffff8fe9

00021edc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   21edc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   21ede:	4604      	mov	r4, r0
   21ee0:	b188      	cbz	r0, 21f06 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   21ee2:	6863      	ldr	r3, [r4, #4]
   21ee4:	2b04      	cmp	r3, #4
   21ee6:	d00d      	beq.n	21f04 <mutex_free_platform+0x28>
   21ee8:	2b08      	cmp	r3, #8
   21eea:	d00b      	beq.n	21f04 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   21eec:	b153      	cbz	r3, 21f04 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   21eee:	f013 0f02 	tst.w	r3, #2
   21ef2:	d00d      	beq.n	21f10 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   21ef4:	4621      	mov	r1, r4
   21ef6:	4809      	ldr	r0, [pc, #36]	; (21f1c <mutex_free_platform+0x40>)
   21ef8:	f01a f8fe 	bl	3c0f8 <k_mem_slab_free>
        mutex->mutex = NULL;
   21efc:	2300      	movs	r3, #0
   21efe:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   21f00:	2300      	movs	r3, #0
   21f02:	6063      	str	r3, [r4, #4]
}
   21f04:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   21f06:	4b06      	ldr	r3, [pc, #24]	; (21f20 <mutex_free_platform+0x44>)
   21f08:	685b      	ldr	r3, [r3, #4]
   21f0a:	4806      	ldr	r0, [pc, #24]	; (21f24 <mutex_free_platform+0x48>)
   21f0c:	4798      	blx	r3
   21f0e:	e7e8      	b.n	21ee2 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   21f10:	2214      	movs	r2, #20
   21f12:	2100      	movs	r1, #0
   21f14:	6820      	ldr	r0, [r4, #0]
   21f16:	f014 ff49 	bl	36dac <memset>
   21f1a:	e7f1      	b.n	21f00 <mutex_free_platform+0x24>
   21f1c:	20007ba8 	.word	0x20007ba8
   21f20:	20000910 	.word	0x20000910
   21f24:	0003e14c 	.word	0x0003e14c

00021f28 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   21f28:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   21f2a:	4604      	mov	r4, r0
   21f2c:	b178      	cbz	r0, 21f4e <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   21f2e:	6863      	ldr	r3, [r4, #4]
   21f30:	2b04      	cmp	r3, #4
   21f32:	d00b      	beq.n	21f4c <mutex_init_platform+0x24>
   21f34:	2b08      	cmp	r3, #8
   21f36:	d009      	beq.n	21f4c <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   21f38:	b90b      	cbnz	r3, 21f3e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   21f3a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   21f3c:	b163      	cbz	r3, 21f58 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   21f3e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   21f40:	f01a f96d 	bl	3c21e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   21f44:	6863      	ldr	r3, [r4, #4]
   21f46:	f043 0301 	orr.w	r3, r3, #1
   21f4a:	6063      	str	r3, [r4, #4]
}
   21f4c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   21f4e:	4b0f      	ldr	r3, [pc, #60]	; (21f8c <mutex_init_platform+0x64>)
   21f50:	685b      	ldr	r3, [r3, #4]
   21f52:	480f      	ldr	r0, [pc, #60]	; (21f90 <mutex_init_platform+0x68>)
   21f54:	4798      	blx	r3
   21f56:	e7ea      	b.n	21f2e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   21f58:	f04f 32ff 	mov.w	r2, #4294967295
   21f5c:	f04f 33ff 	mov.w	r3, #4294967295
   21f60:	4621      	mov	r1, r4
   21f62:	480c      	ldr	r0, [pc, #48]	; (21f94 <mutex_init_platform+0x6c>)
   21f64:	f00d ff30 	bl	2fdc8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   21f68:	b908      	cbnz	r0, 21f6e <mutex_init_platform+0x46>
   21f6a:	6823      	ldr	r3, [r4, #0]
   21f6c:	b91b      	cbnz	r3, 21f76 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   21f6e:	4b07      	ldr	r3, [pc, #28]	; (21f8c <mutex_init_platform+0x64>)
   21f70:	685b      	ldr	r3, [r3, #4]
   21f72:	4809      	ldr	r0, [pc, #36]	; (21f98 <mutex_init_platform+0x70>)
   21f74:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   21f76:	2214      	movs	r2, #20
   21f78:	2100      	movs	r1, #0
   21f7a:	6820      	ldr	r0, [r4, #0]
   21f7c:	f014 ff16 	bl	36dac <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   21f80:	6863      	ldr	r3, [r4, #4]
   21f82:	f043 0302 	orr.w	r3, r3, #2
   21f86:	6063      	str	r3, [r4, #4]
   21f88:	e7d9      	b.n	21f3e <mutex_init_platform+0x16>
   21f8a:	bf00      	nop
   21f8c:	20000910 	.word	0x20000910
   21f90:	0003e14c 	.word	0x0003e14c
   21f94:	20007ba8 	.word	0x20007ba8
   21f98:	0003e174 	.word	0x0003e174

00021f9c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   21f9c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   21f9e:	2340      	movs	r3, #64	; 0x40
   21fa0:	2214      	movs	r2, #20
   21fa2:	4904      	ldr	r1, [pc, #16]	; (21fb4 <nrf_cc3xx_platform_mutex_init+0x18>)
   21fa4:	4804      	ldr	r0, [pc, #16]	; (21fb8 <nrf_cc3xx_platform_mutex_init+0x1c>)
   21fa6:	f01a f899 	bl	3c0dc <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   21faa:	4904      	ldr	r1, [pc, #16]	; (21fbc <nrf_cc3xx_platform_mutex_init+0x20>)
   21fac:	4804      	ldr	r0, [pc, #16]	; (21fc0 <nrf_cc3xx_platform_mutex_init+0x24>)
   21fae:	f00f fdef 	bl	31b90 <nrf_cc3xx_platform_set_mutexes>
}
   21fb2:	bd08      	pop	{r3, pc}
   21fb4:	20007bc4 	.word	0x20007bc4
   21fb8:	20007ba8 	.word	0x20007ba8
   21fbc:	0003e1b4 	.word	0x0003e1b4
   21fc0:	0003e1a4 	.word	0x0003e1a4

00021fc4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   21fc4:	4901      	ldr	r1, [pc, #4]	; (21fcc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   21fc6:	2210      	movs	r2, #16
	str	r2, [r1]
   21fc8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   21fca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   21fcc:	e000ed10 	.word	0xe000ed10

00021fd0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   21fd0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   21fd2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   21fd4:	f380 8811 	msr	BASEPRI, r0
	isb
   21fd8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   21fdc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   21fe0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   21fe2:	b662      	cpsie	i
	isb
   21fe4:	f3bf 8f6f 	isb	sy

	bx	lr
   21fe8:	4770      	bx	lr
   21fea:	bf00      	nop

00021fec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   21fec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   21fee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   21ff0:	f381 8811 	msr	BASEPRI, r1

	wfe
   21ff4:	bf20      	wfe

	msr	BASEPRI, r0
   21ff6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   21ffa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   21ffc:	4770      	bx	lr
   21ffe:	bf00      	nop

00022000 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   22000:	b570      	push	{r4, r5, r6, lr}
   22002:	b082      	sub	sp, #8
   22004:	4604      	mov	r4, r0
   22006:	4d1f      	ldr	r5, [pc, #124]	; (22084 <esf_dump+0x84>)
   22008:	4b1f      	ldr	r3, [pc, #124]	; (22088 <esf_dump+0x88>)
   2200a:	1aed      	subs	r5, r5, r3
   2200c:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2200e:	2601      	movs	r6, #1
   22010:	f04f 0300 	mov.w	r3, #0
   22014:	f366 0302 	bfi	r3, r6, #0, #3
   22018:	f36f 03c5 	bfc	r3, #3, #3
   2201c:	f365 138f 	bfi	r3, r5, #6, #10
   22020:	f8ad 3000 	strh.w	r3, [sp]
   22024:	6883      	ldr	r3, [r0, #8]
   22026:	6842      	ldr	r2, [r0, #4]
   22028:	6801      	ldr	r1, [r0, #0]
   2202a:	4818      	ldr	r0, [pc, #96]	; (2208c <esf_dump+0x8c>)
   2202c:	f7fe f8fe 	bl	2022c <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   22030:	f04f 0300 	mov.w	r3, #0
   22034:	f366 0302 	bfi	r3, r6, #0, #3
   22038:	f36f 03c5 	bfc	r3, #3, #3
   2203c:	f365 138f 	bfi	r3, r5, #6, #10
   22040:	f8ad 3000 	strh.w	r3, [sp]
   22044:	6963      	ldr	r3, [r4, #20]
   22046:	6922      	ldr	r2, [r4, #16]
   22048:	68e1      	ldr	r1, [r4, #12]
   2204a:	4811      	ldr	r0, [pc, #68]	; (22090 <esf_dump+0x90>)
   2204c:	f7fe f8ee 	bl	2022c <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   22050:	f04f 0200 	mov.w	r2, #0
   22054:	f366 0202 	bfi	r2, r6, #0, #3
   22058:	f36f 02c5 	bfc	r2, #3, #3
   2205c:	f365 128f 	bfi	r2, r5, #6, #10
   22060:	69e1      	ldr	r1, [r4, #28]
   22062:	480c      	ldr	r0, [pc, #48]	; (22094 <esf_dump+0x94>)
   22064:	f7fe f920 	bl	202a8 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   22068:	f04f 0200 	mov.w	r2, #0
   2206c:	f366 0202 	bfi	r2, r6, #0, #3
   22070:	f36f 02c5 	bfc	r2, #3, #3
   22074:	f365 128f 	bfi	r2, r5, #6, #10
   22078:	69a1      	ldr	r1, [r4, #24]
   2207a:	4807      	ldr	r0, [pc, #28]	; (22098 <esf_dump+0x98>)
   2207c:	f7fe f914 	bl	202a8 <log_1>
		esf->basic.pc);
}
   22080:	b002      	add	sp, #8
   22082:	bd70      	pop	{r4, r5, r6, pc}
   22084:	0003d28c 	.word	0x0003d28c
   22088:	0003d1a4 	.word	0x0003d1a4
   2208c:	0003e1c8 	.word	0x0003e1c8
   22090:	0003e1f8 	.word	0x0003e1f8
   22094:	0003e228 	.word	0x0003e228
   22098:	0003e238 	.word	0x0003e238

0002209c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2209c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2209e:	2b00      	cmp	r3, #0
   220a0:	db08      	blt.n	220b4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   220a2:	f000 001f 	and.w	r0, r0, #31
   220a6:	095b      	lsrs	r3, r3, #5
   220a8:	2201      	movs	r2, #1
   220aa:	fa02 f000 	lsl.w	r0, r2, r0
   220ae:	4a02      	ldr	r2, [pc, #8]	; (220b8 <arch_irq_enable+0x1c>)
   220b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   220b4:	4770      	bx	lr
   220b6:	bf00      	nop
   220b8:	e000e100 	.word	0xe000e100

000220bc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   220bc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   220be:	2b00      	cmp	r3, #0
   220c0:	db0d      	blt.n	220de <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   220c2:	f000 001f 	and.w	r0, r0, #31
   220c6:	095b      	lsrs	r3, r3, #5
   220c8:	2201      	movs	r2, #1
   220ca:	fa02 f000 	lsl.w	r0, r2, r0
   220ce:	3320      	adds	r3, #32
   220d0:	4a03      	ldr	r2, [pc, #12]	; (220e0 <arch_irq_disable+0x24>)
   220d2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   220d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   220da:	f3bf 8f6f 	isb	sy
}
   220de:	4770      	bx	lr
   220e0:	e000e100 	.word	0xe000e100

000220e4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   220e4:	0942      	lsrs	r2, r0, #5
   220e6:	4b05      	ldr	r3, [pc, #20]	; (220fc <arch_irq_is_enabled+0x18>)
   220e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   220ec:	f000 001f 	and.w	r0, r0, #31
   220f0:	2301      	movs	r3, #1
   220f2:	fa03 f000 	lsl.w	r0, r3, r0
}
   220f6:	4010      	ands	r0, r2
   220f8:	4770      	bx	lr
   220fa:	bf00      	nop
   220fc:	e000e100 	.word	0xe000e100

00022100 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   22100:	f012 0f01 	tst.w	r2, #1
   22104:	d10c      	bne.n	22120 <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   22106:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   22108:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2210a:	2b00      	cmp	r3, #0
   2210c:	db0a      	blt.n	22124 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2210e:	0149      	lsls	r1, r1, #5
   22110:	b2c9      	uxtb	r1, r1
   22112:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   22116:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   2211a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   2211e:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   22120:	2100      	movs	r1, #0
   22122:	e7f1      	b.n	22108 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22124:	f000 000f 	and.w	r0, r0, #15
   22128:	0149      	lsls	r1, r1, #5
   2212a:	b2c9      	uxtb	r1, r1
   2212c:	4b01      	ldr	r3, [pc, #4]	; (22134 <z_arm_irq_priority_set+0x34>)
   2212e:	5419      	strb	r1, [r3, r0]
}
   22130:	4770      	bx	lr
   22132:	bf00      	nop
   22134:	e000ed14 	.word	0xe000ed14

00022138 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   22138:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2213a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2213c:	4b05      	ldr	r3, [pc, #20]	; (22154 <_arch_isr_direct_pm+0x1c>)
   2213e:	699b      	ldr	r3, [r3, #24]
   22140:	b90b      	cbnz	r3, 22146 <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   22142:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   22144:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   22146:	4b03      	ldr	r3, [pc, #12]	; (22154 <_arch_isr_direct_pm+0x1c>)
   22148:	2200      	movs	r2, #0
   2214a:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2214c:	f01a f84b 	bl	3c1e6 <z_pm_save_idle_exit>
   22150:	e7f7      	b.n	22142 <_arch_isr_direct_pm+0xa>
   22152:	bf00      	nop
   22154:	2000d04c 	.word	0x2000d04c

00022158 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   22158:	bf30      	wfi
    b z_SysNmiOnReset
   2215a:	f7ff bffd 	b.w	22158 <z_SysNmiOnReset>
   2215e:	bf00      	nop

00022160 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   22160:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22162:	4b0b      	ldr	r3, [pc, #44]	; (22190 <z_arm_prep_c+0x30>)
   22164:	4a0b      	ldr	r2, [pc, #44]	; (22194 <z_arm_prep_c+0x34>)
   22166:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2216a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2216c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22170:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   22174:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22178:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2217c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   22180:	f00d fdac 	bl	2fcdc <z_bss_zero>
	z_data_copy();
   22184:	f00e fec2 	bl	30f0c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   22188:	f000 fcb6 	bl	22af8 <z_arm_interrupt_init>
	z_cstart();
   2218c:	f00d fdb2 	bl	2fcf4 <z_cstart>
   22190:	e000ed00 	.word	0xe000ed00
   22194:	0000c200 	.word	0x0000c200

00022198 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   22198:	4a0a      	ldr	r2, [pc, #40]	; (221c4 <arch_swap+0x2c>)
   2219a:	6893      	ldr	r3, [r2, #8]
   2219c:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
	_current->arch.swap_return_value = _k_neg_eagain;
   221a0:	4909      	ldr	r1, [pc, #36]	; (221c8 <arch_swap+0x30>)
   221a2:	6809      	ldr	r1, [r1, #0]
   221a4:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   221a8:	4908      	ldr	r1, [pc, #32]	; (221cc <arch_swap+0x34>)
   221aa:	684b      	ldr	r3, [r1, #4]
   221ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   221b0:	604b      	str	r3, [r1, #4]
   221b2:	2300      	movs	r3, #0
   221b4:	f383 8811 	msr	BASEPRI, r3
   221b8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   221bc:	6893      	ldr	r3, [r2, #8]
}
   221be:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
   221c2:	4770      	bx	lr
   221c4:	2000d04c 	.word	0x2000d04c
   221c8:	00040978 	.word	0x00040978
   221cc:	e000ed00 	.word	0xe000ed00

000221d0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   221d0:	4913      	ldr	r1, [pc, #76]	; (22220 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   221d2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   221d4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   221d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   221da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   221de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   221e2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   221e4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   221e8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   221ec:	4f0d      	ldr	r7, [pc, #52]	; (22224 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   221ee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   221f2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   221f4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   221f6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   221f8:	f8d2 00b8 	ldr.w	r0, [r2, #184]	; 0xb8
    movs r3, #0
   221fc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   221fe:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   22202:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   22206:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   22208:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   2220a:	f000 fd17 	bl	22c3c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   2220e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   22212:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   22216:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2221a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2221e:	4770      	bx	lr
    ldr r1, =_kernel
   22220:	2000d04c 	.word	0x2000d04c
    ldr v4, =_SCS_ICSR
   22224:	e000ed04 	.word	0xe000ed04

00022228 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   22228:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2222c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2222e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   22232:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   22236:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   22238:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2223c:	2902      	cmp	r1, #2
    beq _oops
   2223e:	d0ff      	beq.n	22240 <_oops>

00022240 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   22240:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   22242:	f014 fcb2 	bl	36baa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   22246:	bd01      	pop	{r0, pc}

00022248 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   22248:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2224a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   2224e:	490d      	ldr	r1, [pc, #52]	; (22284 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   22250:	f021 0101 	bic.w	r1, r1, #1
   22254:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   22258:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2225c:	9b01      	ldr	r3, [sp, #4]
   2225e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   22262:	9b02      	ldr	r3, [sp, #8]
   22264:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   22268:	9b03      	ldr	r3, [sp, #12]
   2226a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2226e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   22272:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   22276:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   22278:	2300      	movs	r3, #0
   2227a:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2227e:	bc10      	pop	{r4}
   22280:	4770      	bx	lr
   22282:	bf00      	nop
   22284:	0003474d 	.word	0x0003474d

00022288 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   22288:	4b16      	ldr	r3, [pc, #88]	; (222e4 <z_check_thread_stack_fail+0x5c>)
   2228a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   2228c:	b1da      	cbz	r2, 222c6 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   2228e:	f110 0f16 	cmn.w	r0, #22
   22292:	d01a      	beq.n	222ca <z_check_thread_stack_fail+0x42>
{
   22294:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   22296:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   2229a:	f1a3 0420 	sub.w	r4, r3, #32
   2229e:	4284      	cmp	r4, r0
   222a0:	d805      	bhi.n	222ae <z_check_thread_stack_fail+0x26>
   222a2:	4283      	cmp	r3, r0
   222a4:	d908      	bls.n	222b8 <z_check_thread_stack_fail+0x30>
   222a6:	428b      	cmp	r3, r1
   222a8:	d808      	bhi.n	222bc <z_check_thread_stack_fail+0x34>
   222aa:	2100      	movs	r1, #0
   222ac:	e000      	b.n	222b0 <z_check_thread_stack_fail+0x28>
   222ae:	2100      	movs	r1, #0
   222b0:	b931      	cbnz	r1, 222c0 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   222b2:	2000      	movs	r0, #0
}
   222b4:	bc10      	pop	{r4}
   222b6:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   222b8:	2100      	movs	r1, #0
   222ba:	e7f9      	b.n	222b0 <z_check_thread_stack_fail+0x28>
   222bc:	2101      	movs	r1, #1
   222be:	e7f7      	b.n	222b0 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   222c0:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
   222c4:	e7f6      	b.n	222b4 <z_check_thread_stack_fail+0x2c>
		return 0;
   222c6:	2000      	movs	r0, #0
   222c8:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   222ca:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   222ce:	428b      	cmp	r3, r1
   222d0:	bf94      	ite	ls
   222d2:	2100      	movls	r1, #0
   222d4:	2101      	movhi	r1, #1
   222d6:	b909      	cbnz	r1, 222dc <z_check_thread_stack_fail+0x54>
	return 0;
   222d8:	2000      	movs	r0, #0
}
   222da:	4770      	bx	lr
		return thread->stack_info.start;
   222dc:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
   222e0:	4770      	bx	lr
   222e2:	bf00      	nop
   222e4:	2000d04c 	.word	0x2000d04c

000222e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   222e8:	b508      	push	{r3, lr}
   222ea:	460d      	mov	r5, r1
   222ec:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   222ee:	4b08      	ldr	r3, [pc, #32]	; (22310 <arch_switch_to_main_thread+0x28>)
   222f0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   222f2:	f000 fca3 	bl	22c3c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   222f6:	4620      	mov	r0, r4
   222f8:	f385 8809 	msr	PSP, r5
   222fc:	2100      	movs	r1, #0
   222fe:	b663      	cpsie	if
   22300:	f381 8811 	msr	BASEPRI, r1
   22304:	f3bf 8f6f 	isb	sy
   22308:	2200      	movs	r2, #0
   2230a:	2300      	movs	r3, #0
   2230c:	f012 fa1e 	bl	3474c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   22310:	2000d04c 	.word	0x2000d04c

00022314 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   22314:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   22316:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   22318:	4a0b      	ldr	r2, [pc, #44]	; (22348 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2231a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2231c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2231e:	bf1e      	ittt	ne
	movne	r1, #0
   22320:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   22322:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   22324:	f019 ff5f 	blne	3c1e6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   22328:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2232a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2232e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   22332:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   22336:	4905      	ldr	r1, [pc, #20]	; (2234c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   22338:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2233a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2233c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2233e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   22342:	4903      	ldr	r1, [pc, #12]	; (22350 <_isr_wrapper+0x3c>)
	bx r1
   22344:	4708      	bx	r1
   22346:	0000      	.short	0x0000
	ldr r2, =_kernel
   22348:	2000d04c 	.word	0x2000d04c
	ldr r1, =_sw_isr_table
   2234c:	0003cfd0 	.word	0x0003cfd0
	ldr r1, =z_arm_int_exit
   22350:	00022355 	.word	0x00022355

00022354 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   22354:	4b04      	ldr	r3, [pc, #16]	; (22368 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   22356:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   22358:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2235a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2235c:	d003      	beq.n	22366 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2235e:	4903      	ldr	r1, [pc, #12]	; (2236c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   22360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   22364:	600a      	str	r2, [r1, #0]

00022366 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   22366:	4770      	bx	lr
	ldr r3, =_kernel
   22368:	2000d04c 	.word	0x2000d04c
	ldr r1, =_SCS_ICSR
   2236c:	e000ed04 	.word	0xe000ed04

00022370 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   22370:	b508      	push	{r3, lr}
   22372:	4b4e      	ldr	r3, [pc, #312]	; (224ac <usage_fault+0x13c>)
   22374:	4a4e      	ldr	r2, [pc, #312]	; (224b0 <usage_fault+0x140>)
   22376:	1a9b      	subs	r3, r3, r2
   22378:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   2237a:	f04f 0100 	mov.w	r1, #0
   2237e:	2201      	movs	r2, #1
   22380:	f362 0102 	bfi	r1, r2, #0, #3
   22384:	f36f 01c5 	bfc	r1, #3, #3
   22388:	f363 118f 	bfi	r1, r3, #6, #10
   2238c:	4849      	ldr	r0, [pc, #292]	; (224b4 <usage_fault+0x144>)
   2238e:	f7fe f841 	bl	20414 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22392:	4b49      	ldr	r3, [pc, #292]	; (224b8 <usage_fault+0x148>)
   22394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22396:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   2239a:	d121      	bne.n	223e0 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2239c:	4b46      	ldr	r3, [pc, #280]	; (224b8 <usage_fault+0x148>)
   2239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   223a4:	d12d      	bne.n	22402 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   223a6:	4b44      	ldr	r3, [pc, #272]	; (224b8 <usage_fault+0x148>)
   223a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223aa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   223ae:	d139      	bne.n	22424 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   223b0:	4b41      	ldr	r3, [pc, #260]	; (224b8 <usage_fault+0x148>)
   223b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   223b8:	d145      	bne.n	22446 <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   223ba:	4b3f      	ldr	r3, [pc, #252]	; (224b8 <usage_fault+0x148>)
   223bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   223c2:	d151      	bne.n	22468 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   223c4:	4b3c      	ldr	r3, [pc, #240]	; (224b8 <usage_fault+0x148>)
   223c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   223cc:	d15d      	bne.n	2248a <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   223ce:	4a3a      	ldr	r2, [pc, #232]	; (224b8 <usage_fault+0x148>)
   223d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   223d2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   223d6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   223da:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   223dc:	2000      	movs	r0, #0
   223de:	bd08      	pop	{r3, pc}
   223e0:	4b32      	ldr	r3, [pc, #200]	; (224ac <usage_fault+0x13c>)
   223e2:	4a33      	ldr	r2, [pc, #204]	; (224b0 <usage_fault+0x140>)
   223e4:	1a9b      	subs	r3, r3, r2
   223e6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   223e8:	f04f 0100 	mov.w	r1, #0
   223ec:	2201      	movs	r2, #1
   223ee:	f362 0102 	bfi	r1, r2, #0, #3
   223f2:	f36f 01c5 	bfc	r1, #3, #3
   223f6:	f363 118f 	bfi	r1, r3, #6, #10
   223fa:	4830      	ldr	r0, [pc, #192]	; (224bc <usage_fault+0x14c>)
   223fc:	f7fe f80a 	bl	20414 <log_0>
   22400:	e7cc      	b.n	2239c <usage_fault+0x2c>
   22402:	4b2a      	ldr	r3, [pc, #168]	; (224ac <usage_fault+0x13c>)
   22404:	4a2a      	ldr	r2, [pc, #168]	; (224b0 <usage_fault+0x140>)
   22406:	1a9b      	subs	r3, r3, r2
   22408:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   2240a:	f04f 0100 	mov.w	r1, #0
   2240e:	2201      	movs	r2, #1
   22410:	f362 0102 	bfi	r1, r2, #0, #3
   22414:	f36f 01c5 	bfc	r1, #3, #3
   22418:	f363 118f 	bfi	r1, r3, #6, #10
   2241c:	4828      	ldr	r0, [pc, #160]	; (224c0 <usage_fault+0x150>)
   2241e:	f7fd fff9 	bl	20414 <log_0>
   22422:	e7c0      	b.n	223a6 <usage_fault+0x36>
   22424:	4b21      	ldr	r3, [pc, #132]	; (224ac <usage_fault+0x13c>)
   22426:	4a22      	ldr	r2, [pc, #136]	; (224b0 <usage_fault+0x140>)
   22428:	1a9b      	subs	r3, r3, r2
   2242a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   2242c:	f04f 0100 	mov.w	r1, #0
   22430:	2201      	movs	r2, #1
   22432:	f362 0102 	bfi	r1, r2, #0, #3
   22436:	f36f 01c5 	bfc	r1, #3, #3
   2243a:	f363 118f 	bfi	r1, r3, #6, #10
   2243e:	4821      	ldr	r0, [pc, #132]	; (224c4 <usage_fault+0x154>)
   22440:	f7fd ffe8 	bl	20414 <log_0>
   22444:	e7b4      	b.n	223b0 <usage_fault+0x40>
   22446:	4b19      	ldr	r3, [pc, #100]	; (224ac <usage_fault+0x13c>)
   22448:	4a19      	ldr	r2, [pc, #100]	; (224b0 <usage_fault+0x140>)
   2244a:	1a9b      	subs	r3, r3, r2
   2244c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   2244e:	f04f 0100 	mov.w	r1, #0
   22452:	2201      	movs	r2, #1
   22454:	f362 0102 	bfi	r1, r2, #0, #3
   22458:	f36f 01c5 	bfc	r1, #3, #3
   2245c:	f363 118f 	bfi	r1, r3, #6, #10
   22460:	4819      	ldr	r0, [pc, #100]	; (224c8 <usage_fault+0x158>)
   22462:	f7fd ffd7 	bl	20414 <log_0>
   22466:	e7a8      	b.n	223ba <usage_fault+0x4a>
   22468:	4b10      	ldr	r3, [pc, #64]	; (224ac <usage_fault+0x13c>)
   2246a:	4a11      	ldr	r2, [pc, #68]	; (224b0 <usage_fault+0x140>)
   2246c:	1a9b      	subs	r3, r3, r2
   2246e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   22470:	f04f 0100 	mov.w	r1, #0
   22474:	2201      	movs	r2, #1
   22476:	f362 0102 	bfi	r1, r2, #0, #3
   2247a:	f36f 01c5 	bfc	r1, #3, #3
   2247e:	f363 118f 	bfi	r1, r3, #6, #10
   22482:	4812      	ldr	r0, [pc, #72]	; (224cc <usage_fault+0x15c>)
   22484:	f7fd ffc6 	bl	20414 <log_0>
   22488:	e79c      	b.n	223c4 <usage_fault+0x54>
   2248a:	4b08      	ldr	r3, [pc, #32]	; (224ac <usage_fault+0x13c>)
   2248c:	4a08      	ldr	r2, [pc, #32]	; (224b0 <usage_fault+0x140>)
   2248e:	1a9b      	subs	r3, r3, r2
   22490:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   22492:	f04f 0100 	mov.w	r1, #0
   22496:	2201      	movs	r2, #1
   22498:	f362 0102 	bfi	r1, r2, #0, #3
   2249c:	f36f 01c5 	bfc	r1, #3, #3
   224a0:	f363 118f 	bfi	r1, r3, #6, #10
   224a4:	480a      	ldr	r0, [pc, #40]	; (224d0 <usage_fault+0x160>)
   224a6:	f7fd ffb5 	bl	20414 <log_0>
   224aa:	e790      	b.n	223ce <usage_fault+0x5e>
   224ac:	0003d28c 	.word	0x0003d28c
   224b0:	0003d1a4 	.word	0x0003d1a4
   224b4:	0003e268 	.word	0x0003e268
   224b8:	e000ed00 	.word	0xe000ed00
   224bc:	0003e280 	.word	0x0003e280
   224c0:	0003e294 	.word	0x0003e294
   224c4:	0003e2b0 	.word	0x0003e2b0
   224c8:	0003e2d0 	.word	0x0003e2d0
   224cc:	0003e2f8 	.word	0x0003e2f8
   224d0:	0003e314 	.word	0x0003e314

000224d4 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   224d4:	b508      	push	{r3, lr}
	*recoverable = false;
   224d6:	2200      	movs	r2, #0
   224d8:	700a      	strb	r2, [r1, #0]
   224da:	4b08      	ldr	r3, [pc, #32]	; (224fc <debug_monitor+0x28>)
   224dc:	4908      	ldr	r1, [pc, #32]	; (22500 <debug_monitor+0x2c>)
   224de:	1a5b      	subs	r3, r3, r1
   224e0:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   224e2:	f04f 0100 	mov.w	r1, #0
   224e6:	2001      	movs	r0, #1
   224e8:	f360 0102 	bfi	r1, r0, #0, #3
   224ec:	f362 01c5 	bfi	r1, r2, #3, #3
   224f0:	f363 118f 	bfi	r1, r3, #6, #10
   224f4:	4803      	ldr	r0, [pc, #12]	; (22504 <debug_monitor+0x30>)
   224f6:	f7fd ff8d 	bl	20414 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   224fa:	bd08      	pop	{r3, pc}
   224fc:	0003d28c 	.word	0x0003d28c
   22500:	0003d1a4 	.word	0x0003d1a4
   22504:	0003e340 	.word	0x0003e340

00022508 <bus_fault>:
{
   22508:	b570      	push	{r4, r5, r6, lr}
   2250a:	4605      	mov	r5, r0
   2250c:	460e      	mov	r6, r1
   2250e:	4614      	mov	r4, r2
   22510:	4b5e      	ldr	r3, [pc, #376]	; (2268c <bus_fault+0x184>)
   22512:	4a5f      	ldr	r2, [pc, #380]	; (22690 <bus_fault+0x188>)
   22514:	1a9b      	subs	r3, r3, r2
   22516:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   22518:	f04f 0100 	mov.w	r1, #0
   2251c:	2201      	movs	r2, #1
   2251e:	f362 0102 	bfi	r1, r2, #0, #3
   22522:	f36f 01c5 	bfc	r1, #3, #3
   22526:	f363 118f 	bfi	r1, r3, #6, #10
   2252a:	485a      	ldr	r0, [pc, #360]	; (22694 <bus_fault+0x18c>)
   2252c:	f7fd ff72 	bl	20414 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   22530:	4b59      	ldr	r3, [pc, #356]	; (22698 <bus_fault+0x190>)
   22532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22534:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   22538:	d124      	bne.n	22584 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2253a:	4b57      	ldr	r3, [pc, #348]	; (22698 <bus_fault+0x190>)
   2253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2253e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   22542:	d130      	bne.n	225a6 <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   22544:	4b54      	ldr	r3, [pc, #336]	; (22698 <bus_fault+0x190>)
   22546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22548:	f413 7f00 	tst.w	r3, #512	; 0x200
   2254c:	d13c      	bne.n	225c8 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2254e:	4b52      	ldr	r3, [pc, #328]	; (22698 <bus_fault+0x190>)
   22550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22552:	f413 6f80 	tst.w	r3, #1024	; 0x400
   22556:	d165      	bne.n	22624 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   22558:	4b4f      	ldr	r3, [pc, #316]	; (22698 <bus_fault+0x190>)
   2255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2255c:	f413 7f80 	tst.w	r3, #256	; 0x100
   22560:	d171      	bne.n	22646 <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   22562:	4b4d      	ldr	r3, [pc, #308]	; (22698 <bus_fault+0x190>)
   22564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22566:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2256a:	d17d      	bne.n	22668 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2256c:	4a4a      	ldr	r2, [pc, #296]	; (22698 <bus_fault+0x190>)
   2256e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22570:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   22574:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   22576:	2101      	movs	r1, #1
   22578:	4628      	mov	r0, r5
   2257a:	f014 fb28 	bl	36bce <memory_fault_recoverable>
   2257e:	7020      	strb	r0, [r4, #0]
}
   22580:	2000      	movs	r0, #0
   22582:	bd70      	pop	{r4, r5, r6, pc}
   22584:	4b41      	ldr	r3, [pc, #260]	; (2268c <bus_fault+0x184>)
   22586:	4a42      	ldr	r2, [pc, #264]	; (22690 <bus_fault+0x188>)
   22588:	1a9b      	subs	r3, r3, r2
   2258a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   2258c:	f04f 0100 	mov.w	r1, #0
   22590:	2201      	movs	r2, #1
   22592:	f362 0102 	bfi	r1, r2, #0, #3
   22596:	f36f 01c5 	bfc	r1, #3, #3
   2259a:	f363 118f 	bfi	r1, r3, #6, #10
   2259e:	483f      	ldr	r0, [pc, #252]	; (2269c <bus_fault+0x194>)
   225a0:	f7fd ff38 	bl	20414 <log_0>
   225a4:	e7c9      	b.n	2253a <bus_fault+0x32>
   225a6:	4b39      	ldr	r3, [pc, #228]	; (2268c <bus_fault+0x184>)
   225a8:	4a39      	ldr	r2, [pc, #228]	; (22690 <bus_fault+0x188>)
   225aa:	1a9b      	subs	r3, r3, r2
   225ac:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   225ae:	f04f 0100 	mov.w	r1, #0
   225b2:	2201      	movs	r2, #1
   225b4:	f362 0102 	bfi	r1, r2, #0, #3
   225b8:	f36f 01c5 	bfc	r1, #3, #3
   225bc:	f363 118f 	bfi	r1, r3, #6, #10
   225c0:	4837      	ldr	r0, [pc, #220]	; (226a0 <bus_fault+0x198>)
   225c2:	f7fd ff27 	bl	20414 <log_0>
   225c6:	e7bd      	b.n	22544 <bus_fault+0x3c>
   225c8:	4b30      	ldr	r3, [pc, #192]	; (2268c <bus_fault+0x184>)
   225ca:	4a31      	ldr	r2, [pc, #196]	; (22690 <bus_fault+0x188>)
   225cc:	1a9b      	subs	r3, r3, r2
   225ce:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   225d0:	f04f 0100 	mov.w	r1, #0
   225d4:	2201      	movs	r2, #1
   225d6:	f362 0102 	bfi	r1, r2, #0, #3
   225da:	f36f 01c5 	bfc	r1, #3, #3
   225de:	f363 118f 	bfi	r1, r3, #6, #10
   225e2:	4830      	ldr	r0, [pc, #192]	; (226a4 <bus_fault+0x19c>)
   225e4:	f7fd ff16 	bl	20414 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   225e8:	4b2b      	ldr	r3, [pc, #172]	; (22698 <bus_fault+0x190>)
   225ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   225ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   225ee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   225f2:	d0ac      	beq.n	2254e <bus_fault+0x46>
   225f4:	4b25      	ldr	r3, [pc, #148]	; (2268c <bus_fault+0x184>)
   225f6:	4a26      	ldr	r2, [pc, #152]	; (22690 <bus_fault+0x188>)
   225f8:	1a9b      	subs	r3, r3, r2
   225fa:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   225fc:	f04f 0200 	mov.w	r2, #0
   22600:	2001      	movs	r0, #1
   22602:	f360 0202 	bfi	r2, r0, #0, #3
   22606:	f36f 02c5 	bfc	r2, #3, #3
   2260a:	f363 128f 	bfi	r2, r3, #6, #10
   2260e:	4826      	ldr	r0, [pc, #152]	; (226a8 <bus_fault+0x1a0>)
   22610:	f7fd fe4a 	bl	202a8 <log_1>
			if (from_hard_fault != 0) {
   22614:	2e00      	cmp	r6, #0
   22616:	d09a      	beq.n	2254e <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   22618:	4a1f      	ldr	r2, [pc, #124]	; (22698 <bus_fault+0x190>)
   2261a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2261c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   22620:	6293      	str	r3, [r2, #40]	; 0x28
   22622:	e794      	b.n	2254e <bus_fault+0x46>
   22624:	4b19      	ldr	r3, [pc, #100]	; (2268c <bus_fault+0x184>)
   22626:	4a1a      	ldr	r2, [pc, #104]	; (22690 <bus_fault+0x188>)
   22628:	1a9b      	subs	r3, r3, r2
   2262a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   2262c:	f04f 0100 	mov.w	r1, #0
   22630:	2201      	movs	r2, #1
   22632:	f362 0102 	bfi	r1, r2, #0, #3
   22636:	f36f 01c5 	bfc	r1, #3, #3
   2263a:	f363 118f 	bfi	r1, r3, #6, #10
   2263e:	481b      	ldr	r0, [pc, #108]	; (226ac <bus_fault+0x1a4>)
   22640:	f7fd fee8 	bl	20414 <log_0>
   22644:	e788      	b.n	22558 <bus_fault+0x50>
   22646:	4b11      	ldr	r3, [pc, #68]	; (2268c <bus_fault+0x184>)
   22648:	4a11      	ldr	r2, [pc, #68]	; (22690 <bus_fault+0x188>)
   2264a:	1a9b      	subs	r3, r3, r2
   2264c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   2264e:	f04f 0100 	mov.w	r1, #0
   22652:	2201      	movs	r2, #1
   22654:	f362 0102 	bfi	r1, r2, #0, #3
   22658:	f36f 01c5 	bfc	r1, #3, #3
   2265c:	f363 118f 	bfi	r1, r3, #6, #10
   22660:	4813      	ldr	r0, [pc, #76]	; (226b0 <bus_fault+0x1a8>)
   22662:	f7fd fed7 	bl	20414 <log_0>
   22666:	e781      	b.n	2256c <bus_fault+0x64>
   22668:	4b08      	ldr	r3, [pc, #32]	; (2268c <bus_fault+0x184>)
   2266a:	4a09      	ldr	r2, [pc, #36]	; (22690 <bus_fault+0x188>)
   2266c:	1a9b      	subs	r3, r3, r2
   2266e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22670:	f04f 0100 	mov.w	r1, #0
   22674:	2201      	movs	r2, #1
   22676:	f362 0102 	bfi	r1, r2, #0, #3
   2267a:	f36f 01c5 	bfc	r1, #3, #3
   2267e:	f363 118f 	bfi	r1, r3, #6, #10
   22682:	480c      	ldr	r0, [pc, #48]	; (226b4 <bus_fault+0x1ac>)
   22684:	f7fd fec6 	bl	20414 <log_0>
   22688:	e770      	b.n	2256c <bus_fault+0x64>
   2268a:	bf00      	nop
   2268c:	0003d28c 	.word	0x0003d28c
   22690:	0003d1a4 	.word	0x0003d1a4
   22694:	0003e364 	.word	0x0003e364
   22698:	e000ed00 	.word	0xe000ed00
   2269c:	0003e37c 	.word	0x0003e37c
   226a0:	0003e390 	.word	0x0003e390
   226a4:	0003e3a4 	.word	0x0003e3a4
   226a8:	0003e3c0 	.word	0x0003e3c0
   226ac:	0003e3d8 	.word	0x0003e3d8
   226b0:	0003e3f4 	.word	0x0003e3f4
   226b4:	0003e40c 	.word	0x0003e40c

000226b8 <mem_manage_fault>:
{
   226b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   226ba:	4605      	mov	r5, r0
   226bc:	460c      	mov	r4, r1
   226be:	4616      	mov	r6, r2
   226c0:	4b64      	ldr	r3, [pc, #400]	; (22854 <mem_manage_fault+0x19c>)
   226c2:	4a65      	ldr	r2, [pc, #404]	; (22858 <mem_manage_fault+0x1a0>)
   226c4:	1a9b      	subs	r3, r3, r2
   226c6:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   226c8:	f04f 0100 	mov.w	r1, #0
   226cc:	2201      	movs	r2, #1
   226ce:	f362 0102 	bfi	r1, r2, #0, #3
   226d2:	f36f 01c5 	bfc	r1, #3, #3
   226d6:	f363 118f 	bfi	r1, r3, #6, #10
   226da:	4860      	ldr	r0, [pc, #384]	; (2285c <mem_manage_fault+0x1a4>)
   226dc:	f7fd fe9a 	bl	20414 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   226e0:	4b5f      	ldr	r3, [pc, #380]	; (22860 <mem_manage_fault+0x1a8>)
   226e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   226e4:	f013 0f10 	tst.w	r3, #16
   226e8:	d132      	bne.n	22750 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   226ea:	4b5d      	ldr	r3, [pc, #372]	; (22860 <mem_manage_fault+0x1a8>)
   226ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   226ee:	f013 0f08 	tst.w	r3, #8
   226f2:	d13e      	bne.n	22772 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   226f4:	4b5a      	ldr	r3, [pc, #360]	; (22860 <mem_manage_fault+0x1a8>)
   226f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   226f8:	f013 0f02 	tst.w	r3, #2
   226fc:	d14a      	bne.n	22794 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   226fe:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   22702:	4b57      	ldr	r3, [pc, #348]	; (22860 <mem_manage_fault+0x1a8>)
   22704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22706:	f013 0f01 	tst.w	r3, #1
   2270a:	d175      	bne.n	227f8 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2270c:	4b54      	ldr	r3, [pc, #336]	; (22860 <mem_manage_fault+0x1a8>)
   2270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22710:	f013 0f20 	tst.w	r3, #32
   22714:	f040 8081 	bne.w	2281a <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   22718:	4b51      	ldr	r3, [pc, #324]	; (22860 <mem_manage_fault+0x1a8>)
   2271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2271c:	f013 0f10 	tst.w	r3, #16
   22720:	d104      	bne.n	2272c <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   22722:	4b4f      	ldr	r3, [pc, #316]	; (22860 <mem_manage_fault+0x1a8>)
   22724:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   22726:	f014 0402 	ands.w	r4, r4, #2
   2272a:	d005      	beq.n	22738 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   2272c:	4b4c      	ldr	r3, [pc, #304]	; (22860 <mem_manage_fault+0x1a8>)
   2272e:	685c      	ldr	r4, [r3, #4]
   22730:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   22734:	f040 8082 	bne.w	2283c <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   22738:	4a49      	ldr	r2, [pc, #292]	; (22860 <mem_manage_fault+0x1a8>)
   2273a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2273c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   22740:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   22742:	2101      	movs	r1, #1
   22744:	4628      	mov	r0, r5
   22746:	f014 fa42 	bl	36bce <memory_fault_recoverable>
   2274a:	7030      	strb	r0, [r6, #0]
}
   2274c:	4620      	mov	r0, r4
   2274e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22750:	4b40      	ldr	r3, [pc, #256]	; (22854 <mem_manage_fault+0x19c>)
   22752:	4a41      	ldr	r2, [pc, #260]	; (22858 <mem_manage_fault+0x1a0>)
   22754:	1a9b      	subs	r3, r3, r2
   22756:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   22758:	f04f 0100 	mov.w	r1, #0
   2275c:	2201      	movs	r2, #1
   2275e:	f362 0102 	bfi	r1, r2, #0, #3
   22762:	f36f 01c5 	bfc	r1, #3, #3
   22766:	f363 118f 	bfi	r1, r3, #6, #10
   2276a:	483e      	ldr	r0, [pc, #248]	; (22864 <mem_manage_fault+0x1ac>)
   2276c:	f7fd fe52 	bl	20414 <log_0>
   22770:	e7bb      	b.n	226ea <mem_manage_fault+0x32>
   22772:	4b38      	ldr	r3, [pc, #224]	; (22854 <mem_manage_fault+0x19c>)
   22774:	4a38      	ldr	r2, [pc, #224]	; (22858 <mem_manage_fault+0x1a0>)
   22776:	1a9b      	subs	r3, r3, r2
   22778:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   2277a:	f04f 0100 	mov.w	r1, #0
   2277e:	2201      	movs	r2, #1
   22780:	f362 0102 	bfi	r1, r2, #0, #3
   22784:	f36f 01c5 	bfc	r1, #3, #3
   22788:	f363 118f 	bfi	r1, r3, #6, #10
   2278c:	4836      	ldr	r0, [pc, #216]	; (22868 <mem_manage_fault+0x1b0>)
   2278e:	f7fd fe41 	bl	20414 <log_0>
   22792:	e7af      	b.n	226f4 <mem_manage_fault+0x3c>
   22794:	4b2f      	ldr	r3, [pc, #188]	; (22854 <mem_manage_fault+0x19c>)
   22796:	4a30      	ldr	r2, [pc, #192]	; (22858 <mem_manage_fault+0x1a0>)
   22798:	1a9b      	subs	r3, r3, r2
   2279a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   2279c:	f04f 0100 	mov.w	r1, #0
   227a0:	2201      	movs	r2, #1
   227a2:	f362 0102 	bfi	r1, r2, #0, #3
   227a6:	f36f 01c5 	bfc	r1, #3, #3
   227aa:	f363 118f 	bfi	r1, r3, #6, #10
   227ae:	482f      	ldr	r0, [pc, #188]	; (2286c <mem_manage_fault+0x1b4>)
   227b0:	f7fd fe30 	bl	20414 <log_0>
		uint32_t temp = SCB->MMFAR;
   227b4:	4b2a      	ldr	r3, [pc, #168]	; (22860 <mem_manage_fault+0x1a8>)
   227b6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   227b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   227ba:	f013 0f80 	tst.w	r3, #128	; 0x80
   227be:	d102      	bne.n	227c6 <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   227c0:	f06f 0715 	mvn.w	r7, #21
   227c4:	e79d      	b.n	22702 <mem_manage_fault+0x4a>
   227c6:	4b23      	ldr	r3, [pc, #140]	; (22854 <mem_manage_fault+0x19c>)
   227c8:	4a23      	ldr	r2, [pc, #140]	; (22858 <mem_manage_fault+0x1a0>)
   227ca:	1a9b      	subs	r3, r3, r2
   227cc:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   227ce:	f04f 0200 	mov.w	r2, #0
   227d2:	2101      	movs	r1, #1
   227d4:	f361 0202 	bfi	r2, r1, #0, #3
   227d8:	f36f 02c5 	bfc	r2, #3, #3
   227dc:	f363 128f 	bfi	r2, r3, #6, #10
   227e0:	4639      	mov	r1, r7
   227e2:	4823      	ldr	r0, [pc, #140]	; (22870 <mem_manage_fault+0x1b8>)
   227e4:	f7fd fd60 	bl	202a8 <log_1>
			if (from_hard_fault != 0) {
   227e8:	2c00      	cmp	r4, #0
   227ea:	d08a      	beq.n	22702 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   227ec:	4a1c      	ldr	r2, [pc, #112]	; (22860 <mem_manage_fault+0x1a8>)
   227ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
   227f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   227f4:	6293      	str	r3, [r2, #40]	; 0x28
   227f6:	e784      	b.n	22702 <mem_manage_fault+0x4a>
   227f8:	4b16      	ldr	r3, [pc, #88]	; (22854 <mem_manage_fault+0x19c>)
   227fa:	4a17      	ldr	r2, [pc, #92]	; (22858 <mem_manage_fault+0x1a0>)
   227fc:	1a9b      	subs	r3, r3, r2
   227fe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   22800:	f04f 0100 	mov.w	r1, #0
   22804:	2201      	movs	r2, #1
   22806:	f362 0102 	bfi	r1, r2, #0, #3
   2280a:	f36f 01c5 	bfc	r1, #3, #3
   2280e:	f363 118f 	bfi	r1, r3, #6, #10
   22812:	4818      	ldr	r0, [pc, #96]	; (22874 <mem_manage_fault+0x1bc>)
   22814:	f7fd fdfe 	bl	20414 <log_0>
   22818:	e778      	b.n	2270c <mem_manage_fault+0x54>
   2281a:	4b0e      	ldr	r3, [pc, #56]	; (22854 <mem_manage_fault+0x19c>)
   2281c:	4a0e      	ldr	r2, [pc, #56]	; (22858 <mem_manage_fault+0x1a0>)
   2281e:	1a9b      	subs	r3, r3, r2
   22820:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   22822:	f04f 0100 	mov.w	r1, #0
   22826:	2201      	movs	r2, #1
   22828:	f362 0102 	bfi	r1, r2, #0, #3
   2282c:	f36f 01c5 	bfc	r1, #3, #3
   22830:	f363 118f 	bfi	r1, r3, #6, #10
   22834:	4810      	ldr	r0, [pc, #64]	; (22878 <mem_manage_fault+0x1c0>)
   22836:	f7fd fded 	bl	20414 <log_0>
   2283a:	e76d      	b.n	22718 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   2283c:	4629      	mov	r1, r5
   2283e:	4638      	mov	r0, r7
   22840:	f7ff fd22 	bl	22288 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   22844:	4604      	mov	r4, r0
   22846:	2800      	cmp	r0, #0
   22848:	f43f af76 	beq.w	22738 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   2284c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   22850:	2402      	movs	r4, #2
   22852:	e771      	b.n	22738 <mem_manage_fault+0x80>
   22854:	0003d28c 	.word	0x0003d28c
   22858:	0003d1a4 	.word	0x0003d1a4
   2285c:	0003e43c 	.word	0x0003e43c
   22860:	e000ed00 	.word	0xe000ed00
   22864:	0003e454 	.word	0x0003e454
   22868:	0003e390 	.word	0x0003e390
   2286c:	0003e488 	.word	0x0003e488
   22870:	0003e4a0 	.word	0x0003e4a0
   22874:	0003e4b8 	.word	0x0003e4b8
   22878:	0003e40c 	.word	0x0003e40c

0002287c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   2287c:	b570      	push	{r4, r5, r6, lr}
   2287e:	4605      	mov	r5, r0
   22880:	460c      	mov	r4, r1
   22882:	4b47      	ldr	r3, [pc, #284]	; (229a0 <hard_fault+0x124>)
   22884:	4a47      	ldr	r2, [pc, #284]	; (229a4 <hard_fault+0x128>)
   22886:	1a9b      	subs	r3, r3, r2
   22888:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   2288a:	f04f 0100 	mov.w	r1, #0
   2288e:	2201      	movs	r2, #1
   22890:	f362 0102 	bfi	r1, r2, #0, #3
   22894:	f36f 01c5 	bfc	r1, #3, #3
   22898:	f363 118f 	bfi	r1, r3, #6, #10
   2289c:	4842      	ldr	r0, [pc, #264]	; (229a8 <hard_fault+0x12c>)
   2289e:	f7fd fdb9 	bl	20414 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   228a2:	2300      	movs	r3, #0
   228a4:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   228a6:	4b41      	ldr	r3, [pc, #260]	; (229ac <hard_fault+0x130>)
   228a8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   228aa:	f016 0602 	ands.w	r6, r6, #2
   228ae:	d109      	bne.n	228c4 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   228b0:	4b3e      	ldr	r3, [pc, #248]	; (229ac <hard_fault+0x130>)
   228b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   228b4:	2b00      	cmp	r3, #0
   228b6:	db17      	blt.n	228e8 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   228b8:	4b3c      	ldr	r3, [pc, #240]	; (229ac <hard_fault+0x130>)
   228ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   228bc:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   228c0:	d124      	bne.n	2290c <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   228c2:	bd70      	pop	{r4, r5, r6, pc}
   228c4:	4b36      	ldr	r3, [pc, #216]	; (229a0 <hard_fault+0x124>)
   228c6:	4a37      	ldr	r2, [pc, #220]	; (229a4 <hard_fault+0x128>)
   228c8:	1a9b      	subs	r3, r3, r2
   228ca:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   228cc:	f04f 0100 	mov.w	r1, #0
   228d0:	2201      	movs	r2, #1
   228d2:	f362 0102 	bfi	r1, r2, #0, #3
   228d6:	f36f 01c5 	bfc	r1, #3, #3
   228da:	f363 118f 	bfi	r1, r3, #6, #10
   228de:	4834      	ldr	r0, [pc, #208]	; (229b0 <hard_fault+0x134>)
   228e0:	f7fd fd98 	bl	20414 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   228e4:	2000      	movs	r0, #0
   228e6:	e7ec      	b.n	228c2 <hard_fault+0x46>
   228e8:	4b2d      	ldr	r3, [pc, #180]	; (229a0 <hard_fault+0x124>)
   228ea:	4a2e      	ldr	r2, [pc, #184]	; (229a4 <hard_fault+0x128>)
   228ec:	1a9b      	subs	r3, r3, r2
   228ee:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   228f0:	f04f 0100 	mov.w	r1, #0
   228f4:	2201      	movs	r2, #1
   228f6:	f362 0102 	bfi	r1, r2, #0, #3
   228fa:	f36f 01c5 	bfc	r1, #3, #3
   228fe:	f363 118f 	bfi	r1, r3, #6, #10
   22902:	482c      	ldr	r0, [pc, #176]	; (229b4 <hard_fault+0x138>)
   22904:	f7fd fd86 	bl	20414 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   22908:	4630      	mov	r0, r6
   2290a:	e7da      	b.n	228c2 <hard_fault+0x46>
   2290c:	4b24      	ldr	r3, [pc, #144]	; (229a0 <hard_fault+0x124>)
   2290e:	4a25      	ldr	r2, [pc, #148]	; (229a4 <hard_fault+0x128>)
   22910:	1a9b      	subs	r3, r3, r2
   22912:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   22914:	f04f 0100 	mov.w	r1, #0
   22918:	2201      	movs	r2, #1
   2291a:	f362 0102 	bfi	r1, r2, #0, #3
   2291e:	f36f 01c5 	bfc	r1, #3, #3
   22922:	f363 118f 	bfi	r1, r3, #6, #10
   22926:	4824      	ldr	r0, [pc, #144]	; (229b8 <hard_fault+0x13c>)
   22928:	f7fd fd74 	bl	20414 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   2292c:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   2292e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   22932:	f64d 7302 	movw	r3, #57090	; 0xdf02
   22936:	429a      	cmp	r2, r3
   22938:	d00e      	beq.n	22958 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
   2293a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   2293e:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   22942:	781b      	ldrb	r3, [r3, #0]
   22944:	b9db      	cbnz	r3, 2297e <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
   22946:	4b1d      	ldr	r3, [pc, #116]	; (229bc <hard_fault+0x140>)
   22948:	781b      	ldrb	r3, [r3, #0]
   2294a:	b9f3      	cbnz	r3, 2298a <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
   2294c:	4b1c      	ldr	r3, [pc, #112]	; (229c0 <hard_fault+0x144>)
   2294e:	881b      	ldrh	r3, [r3, #0]
   22950:	b29b      	uxth	r3, r3
   22952:	bb03      	cbnz	r3, 22996 <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   22954:	4630      	mov	r0, r6
	return reason;
   22956:	e7b4      	b.n	228c2 <hard_fault+0x46>
   22958:	4b11      	ldr	r3, [pc, #68]	; (229a0 <hard_fault+0x124>)
   2295a:	4a12      	ldr	r2, [pc, #72]	; (229a4 <hard_fault+0x128>)
   2295c:	1a9b      	subs	r3, r3, r2
   2295e:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   22960:	f04f 0200 	mov.w	r2, #0
   22964:	2101      	movs	r1, #1
   22966:	f361 0202 	bfi	r2, r1, #0, #3
   2296a:	f36f 02c5 	bfc	r2, #3, #3
   2296e:	f363 128f 	bfi	r2, r3, #6, #10
   22972:	6829      	ldr	r1, [r5, #0]
   22974:	4813      	ldr	r0, [pc, #76]	; (229c4 <hard_fault+0x148>)
   22976:	f7fd fc97 	bl	202a8 <log_1>
			reason = esf->basic.r0;
   2297a:	6828      	ldr	r0, [r5, #0]
   2297c:	e7a1      	b.n	228c2 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
   2297e:	4622      	mov	r2, r4
   22980:	2101      	movs	r1, #1
   22982:	4628      	mov	r0, r5
   22984:	f7ff fe98 	bl	226b8 <mem_manage_fault>
   22988:	e79b      	b.n	228c2 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
   2298a:	4622      	mov	r2, r4
   2298c:	2101      	movs	r1, #1
   2298e:	4628      	mov	r0, r5
   22990:	f7ff fdba 	bl	22508 <bus_fault>
   22994:	e795      	b.n	228c2 <hard_fault+0x46>
			reason = usage_fault(esf);
   22996:	4628      	mov	r0, r5
   22998:	f7ff fcea 	bl	22370 <usage_fault>
   2299c:	e791      	b.n	228c2 <hard_fault+0x46>
   2299e:	bf00      	nop
   229a0:	0003d28c 	.word	0x0003d28c
   229a4:	0003d1a4 	.word	0x0003d1a4
   229a8:	0003e4d8 	.word	0x0003e4d8
   229ac:	e000ed00 	.word	0xe000ed00
   229b0:	0003e4f0 	.word	0x0003e4f0
   229b4:	0003e514 	.word	0x0003e514
   229b8:	0003e524 	.word	0x0003e524
   229bc:	e000ed29 	.word	0xe000ed29
   229c0:	e000ed2a 	.word	0xe000ed2a
   229c4:	0003e544 	.word	0x0003e544

000229c8 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   229c8:	b508      	push	{r3, lr}
   229ca:	460a      	mov	r2, r1
   229cc:	480b      	ldr	r0, [pc, #44]	; (229fc <reserved_exception+0x34>)
   229ce:	4b0c      	ldr	r3, [pc, #48]	; (22a00 <reserved_exception+0x38>)
   229d0:	1ac0      	subs	r0, r0, r3
   229d2:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   229d4:	f04f 0300 	mov.w	r3, #0
   229d8:	2101      	movs	r1, #1
   229da:	f361 0302 	bfi	r3, r1, #0, #3
   229de:	f36f 03c5 	bfc	r3, #3, #3
   229e2:	f360 138f 	bfi	r3, r0, #6, #10
   229e6:	2a0f      	cmp	r2, #15
   229e8:	dc05      	bgt.n	229f6 <reserved_exception+0x2e>
   229ea:	4906      	ldr	r1, [pc, #24]	; (22a04 <reserved_exception+0x3c>)
   229ec:	3a10      	subs	r2, #16
   229ee:	4806      	ldr	r0, [pc, #24]	; (22a08 <reserved_exception+0x40>)
   229f0:	f7fd fc90 	bl	20314 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   229f4:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   229f6:	4905      	ldr	r1, [pc, #20]	; (22a0c <reserved_exception+0x44>)
   229f8:	e7f8      	b.n	229ec <reserved_exception+0x24>
   229fa:	bf00      	nop
   229fc:	0003d28c 	.word	0x0003d28c
   22a00:	0003d1a4 	.word	0x0003d1a4
   22a04:	0003e560 	.word	0x0003e560
   22a08:	0003e594 	.word	0x0003e594
   22a0c:	0003e578 	.word	0x0003e578

00022a10 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   22a10:	b570      	push	{r4, r5, r6, lr}
   22a12:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   22a14:	4b2b      	ldr	r3, [pc, #172]	; (22ac4 <z_arm_fault+0xb4>)
   22a16:	685d      	ldr	r5, [r3, #4]
   22a18:	f3c5 0508 	ubfx	r5, r5, #0, #9
   22a1c:	2300      	movs	r3, #0
   22a1e:	f383 8811 	msr	BASEPRI, r3
   22a22:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   22a26:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   22a2a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22a2e:	d12a      	bne.n	22a86 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   22a30:	f002 030c 	and.w	r3, r2, #12
   22a34:	2b08      	cmp	r3, #8
   22a36:	d010      	beq.n	22a5a <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   22a38:	f012 0f08 	tst.w	r2, #8
   22a3c:	d020      	beq.n	22a80 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
   22a3e:	460c      	mov	r4, r1
	*nested_exc = false;
   22a40:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   22a42:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   22a46:	4629      	mov	r1, r5
   22a48:	4620      	mov	r0, r4
   22a4a:	f014 f8c2 	bl	36bd2 <fault_handle>
   22a4e:	4605      	mov	r5, r0
	if (recoverable) {
   22a50:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   22a54:	b1d3      	cbz	r3, 22a8c <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   22a56:	b00a      	add	sp, #40	; 0x28
   22a58:	bd70      	pop	{r4, r5, r6, pc}
   22a5a:	4b1b      	ldr	r3, [pc, #108]	; (22ac8 <z_arm_fault+0xb8>)
   22a5c:	4a1b      	ldr	r2, [pc, #108]	; (22acc <z_arm_fault+0xbc>)
   22a5e:	1a9b      	subs	r3, r3, r2
   22a60:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   22a62:	f04f 0100 	mov.w	r1, #0
   22a66:	2201      	movs	r2, #1
   22a68:	f362 0102 	bfi	r1, r2, #0, #3
   22a6c:	f36f 01c5 	bfc	r1, #3, #3
   22a70:	f363 118f 	bfi	r1, r3, #6, #10
   22a74:	4816      	ldr	r0, [pc, #88]	; (22ad0 <z_arm_fault+0xc0>)
   22a76:	f7fd fccd 	bl	20414 <log_0>
	*nested_exc = false;
   22a7a:	2600      	movs	r6, #0
		return NULL;
   22a7c:	4634      	mov	r4, r6
   22a7e:	e7e0      	b.n	22a42 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   22a80:	4604      	mov	r4, r0
			*nested_exc = true;
   22a82:	2601      	movs	r6, #1
   22a84:	e7dd      	b.n	22a42 <z_arm_fault+0x32>
	*nested_exc = false;
   22a86:	2600      	movs	r6, #0
		return NULL;
   22a88:	4634      	mov	r4, r6
   22a8a:	e7da      	b.n	22a42 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   22a8c:	2220      	movs	r2, #32
   22a8e:	4621      	mov	r1, r4
   22a90:	a801      	add	r0, sp, #4
   22a92:	f014 f967 	bl	36d64 <memcpy>
	if (nested_exc) {
   22a96:	b14e      	cbz	r6, 22aac <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   22a98:	9b08      	ldr	r3, [sp, #32]
   22a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   22a9e:	b95a      	cbnz	r2, 22ab8 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   22aa0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   22aa4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   22aa8:	9308      	str	r3, [sp, #32]
   22aaa:	e005      	b.n	22ab8 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   22aac:	9b08      	ldr	r3, [sp, #32]
   22aae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   22ab2:	f023 0301 	bic.w	r3, r3, #1
   22ab6:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   22ab8:	a901      	add	r1, sp, #4
   22aba:	4628      	mov	r0, r5
   22abc:	f014 f869 	bl	36b92 <z_arm_fatal_error>
   22ac0:	e7c9      	b.n	22a56 <z_arm_fault+0x46>
   22ac2:	bf00      	nop
   22ac4:	e000ed00 	.word	0xe000ed00
   22ac8:	0003d28c 	.word	0x0003d28c
   22acc:	0003d1a4 	.word	0x0003d1a4
   22ad0:	0003e5a8 	.word	0x0003e5a8

00022ad4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   22ad4:	4a02      	ldr	r2, [pc, #8]	; (22ae0 <z_arm_fault_init+0xc>)
   22ad6:	6953      	ldr	r3, [r2, #20]
   22ad8:	f043 0310 	orr.w	r3, r3, #16
   22adc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   22ade:	4770      	bx	lr
   22ae0:	e000ed00 	.word	0xe000ed00

00022ae4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   22ae4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   22ae8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   22aec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   22aee:	4672      	mov	r2, lr
	bl z_arm_fault
   22af0:	f7ff ff8e 	bl	22a10 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   22af4:	bd01      	pop	{r0, pc}
   22af6:	bf00      	nop

00022af8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   22af8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   22afa:	e006      	b.n	22b0a <z_arm_interrupt_init+0x12>
   22afc:	f002 010f 	and.w	r1, r2, #15
   22b00:	4b09      	ldr	r3, [pc, #36]	; (22b28 <z_arm_interrupt_init+0x30>)
   22b02:	440b      	add	r3, r1
   22b04:	2140      	movs	r1, #64	; 0x40
   22b06:	7619      	strb	r1, [r3, #24]
   22b08:	3201      	adds	r2, #1
   22b0a:	2a2f      	cmp	r2, #47	; 0x2f
   22b0c:	dc0a      	bgt.n	22b24 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   22b0e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   22b10:	2b00      	cmp	r3, #0
   22b12:	dbf3      	blt.n	22afc <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22b14:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   22b18:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   22b1c:	2140      	movs	r1, #64	; 0x40
   22b1e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   22b22:	e7f1      	b.n	22b08 <z_arm_interrupt_init+0x10>
	}
}
   22b24:	4770      	bx	lr
   22b26:	bf00      	nop
   22b28:	e000ecfc 	.word	0xe000ecfc

00022b2c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   22b2c:	2000      	movs	r0, #0
    msr CONTROL, r0
   22b2e:	f380 8814 	msr	CONTROL, r0
    isb
   22b32:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   22b36:	f01a f981 	bl	3ce3c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   22b3a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   22b3c:	490d      	ldr	r1, [pc, #52]	; (22b74 <__start+0x48>)
    str r0, [r1]
   22b3e:	6008      	str	r0, [r1, #0]
    dsb
   22b40:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   22b44:	480c      	ldr	r0, [pc, #48]	; (22b78 <__start+0x4c>)
    msr msp, r0
   22b46:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   22b4a:	f000 f829 	bl	22ba0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   22b4e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   22b50:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   22b54:	4809      	ldr	r0, [pc, #36]	; (22b7c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   22b56:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   22b5a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   22b5c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   22b60:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   22b64:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   22b66:	4308      	orrs	r0, r1
    msr CONTROL, r0
   22b68:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   22b6c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   22b70:	f7ff faf6 	bl	22160 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   22b74:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   22b78:	20011800 	.word	0x20011800
    ldr r0, =z_interrupt_stacks
   22b7c:	20011980 	.word	0x20011980

00022b80 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   22b80:	4b06      	ldr	r3, [pc, #24]	; (22b9c <z_arm_clear_arm_mpu_config+0x1c>)
   22b82:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   22b84:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   22b88:	2300      	movs	r3, #0
   22b8a:	4283      	cmp	r3, r0
   22b8c:	da05      	bge.n	22b9a <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   22b8e:	4a03      	ldr	r2, [pc, #12]	; (22b9c <z_arm_clear_arm_mpu_config+0x1c>)
   22b90:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   22b92:	2100      	movs	r1, #0
   22b94:	6111      	str	r1, [r2, #16]
   22b96:	3301      	adds	r3, #1
   22b98:	e7f7      	b.n	22b8a <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   22b9a:	4770      	bx	lr
   22b9c:	e000ed90 	.word	0xe000ed90

00022ba0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   22ba0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   22ba2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   22ba4:	2400      	movs	r4, #0
   22ba6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   22baa:	f7ff ffe9 	bl	22b80 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   22bae:	4623      	mov	r3, r4
   22bb0:	e008      	b.n	22bc4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   22bb2:	f103 0120 	add.w	r1, r3, #32
   22bb6:	4a0e      	ldr	r2, [pc, #56]	; (22bf0 <z_arm_init_arch_hw_at_boot+0x50>)
   22bb8:	f04f 30ff 	mov.w	r0, #4294967295
   22bbc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   22bc0:	3301      	adds	r3, #1
   22bc2:	b2db      	uxtb	r3, r3
   22bc4:	2b07      	cmp	r3, #7
   22bc6:	d9f4      	bls.n	22bb2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   22bc8:	2300      	movs	r3, #0
   22bca:	e008      	b.n	22bde <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   22bcc:	f103 0160 	add.w	r1, r3, #96	; 0x60
   22bd0:	4a07      	ldr	r2, [pc, #28]	; (22bf0 <z_arm_init_arch_hw_at_boot+0x50>)
   22bd2:	f04f 30ff 	mov.w	r0, #4294967295
   22bd6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   22bda:	3301      	adds	r3, #1
   22bdc:	b2db      	uxtb	r3, r3
   22bde:	2b07      	cmp	r3, #7
   22be0:	d9f4      	bls.n	22bcc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   22be2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   22be4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22be8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   22bec:	bd10      	pop	{r4, pc}
   22bee:	bf00      	nop
   22bf0:	e000e100 	.word	0xe000e100

00022bf4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   22bf4:	b508      	push	{r3, lr}
	if (_current == thread) {
   22bf6:	4b08      	ldr	r3, [pc, #32]	; (22c18 <z_impl_k_thread_abort+0x24>)
   22bf8:	689b      	ldr	r3, [r3, #8]
   22bfa:	4283      	cmp	r3, r0
   22bfc:	d002      	beq.n	22c04 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   22bfe:	f00e f94b 	bl	30e98 <z_thread_abort>
}
   22c02:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22c04:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   22c08:	2b00      	cmp	r3, #0
   22c0a:	d0f8      	beq.n	22bfe <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22c0c:	4a03      	ldr	r2, [pc, #12]	; (22c1c <z_impl_k_thread_abort+0x28>)
   22c0e:	6853      	ldr	r3, [r2, #4]
   22c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   22c14:	6053      	str	r3, [r2, #4]
   22c16:	e7f2      	b.n	22bfe <z_impl_k_thread_abort+0xa>
   22c18:	2000d04c 	.word	0x2000d04c
   22c1c:	e000ed00 	.word	0xe000ed00

00022c20 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   22c20:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   22c22:	4b03      	ldr	r3, [pc, #12]	; (22c30 <z_arm_configure_static_mpu_regions+0x10>)
   22c24:	4a03      	ldr	r2, [pc, #12]	; (22c34 <z_arm_configure_static_mpu_regions+0x14>)
   22c26:	2101      	movs	r1, #1
   22c28:	4803      	ldr	r0, [pc, #12]	; (22c38 <z_arm_configure_static_mpu_regions+0x18>)
   22c2a:	f014 f827 	bl	36c7c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   22c2e:	bd08      	pop	{r3, pc}
   22c30:	20040000 	.word	0x20040000
   22c34:	20000000 	.word	0x20000000
   22c38:	0003e5d8 	.word	0x0003e5d8

00022c3c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   22c3c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   22c3e:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   22c42:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   22c44:	4804      	ldr	r0, [pc, #16]	; (22c58 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   22c46:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   22c48:	2320      	movs	r3, #32
   22c4a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   22c4c:	4b03      	ldr	r3, [pc, #12]	; (22c5c <z_arm_configure_dynamic_mpu_regions+0x20>)
   22c4e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   22c50:	2101      	movs	r1, #1
   22c52:	f014 f817 	bl	36c84 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   22c56:	bd08      	pop	{r3, pc}
   22c58:	200080c4 	.word	0x200080c4
   22c5c:	150b0000 	.word	0x150b0000

00022c60 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   22c60:	4a06      	ldr	r2, [pc, #24]	; (22c7c <region_init+0x1c>)
   22c62:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   22c64:	680b      	ldr	r3, [r1, #0]
   22c66:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   22c6a:	4303      	orrs	r3, r0
   22c6c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   22c70:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   22c72:	688b      	ldr	r3, [r1, #8]
   22c74:	f043 0301 	orr.w	r3, r3, #1
   22c78:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   22c7a:	4770      	bx	lr
   22c7c:	e000ed90 	.word	0xe000ed90

00022c80 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   22c80:	b510      	push	{r4, lr}
   22c82:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   22c84:	2807      	cmp	r0, #7
   22c86:	d803      	bhi.n	22c90 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   22c88:	f7ff ffea 	bl	22c60 <region_init>

	return index;
   22c8c:	4620      	mov	r0, r4
}
   22c8e:	bd10      	pop	{r4, pc}
   22c90:	4b09      	ldr	r3, [pc, #36]	; (22cb8 <region_allocate_and_init+0x38>)
   22c92:	4a0a      	ldr	r2, [pc, #40]	; (22cbc <region_allocate_and_init+0x3c>)
   22c94:	1a9b      	subs	r3, r3, r2
   22c96:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   22c98:	f04f 0200 	mov.w	r2, #0
   22c9c:	2101      	movs	r1, #1
   22c9e:	f361 0202 	bfi	r2, r1, #0, #3
   22ca2:	f36f 02c5 	bfc	r2, #3, #3
   22ca6:	f363 128f 	bfi	r2, r3, #6, #10
   22caa:	4601      	mov	r1, r0
   22cac:	4804      	ldr	r0, [pc, #16]	; (22cc0 <region_allocate_and_init+0x40>)
   22cae:	f7fd fafb 	bl	202a8 <log_1>
		return -EINVAL;
   22cb2:	f06f 0015 	mvn.w	r0, #21
   22cb6:	e7ea      	b.n	22c8e <region_allocate_and_init+0xe>
   22cb8:	0003d27c 	.word	0x0003d27c
   22cbc:	0003d1a4 	.word	0x0003d1a4
   22cc0:	0003e5e4 	.word	0x0003e5e4

00022cc4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   22cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22cc8:	4680      	mov	r8, r0
   22cca:	460f      	mov	r7, r1
   22ccc:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   22cce:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   22cd0:	2400      	movs	r4, #0
   22cd2:	e009      	b.n	22ce8 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   22cd4:	4629      	mov	r1, r5
   22cd6:	b2f0      	uxtb	r0, r6
   22cd8:	f013 ffb1 	bl	36c3e <mpu_configure_region>
   22cdc:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   22cde:	f110 0f16 	cmn.w	r0, #22
   22ce2:	d025      	beq.n	22d30 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   22ce4:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   22ce6:	3401      	adds	r4, #1
   22ce8:	42bc      	cmp	r4, r7
   22cea:	da21      	bge.n	22d30 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   22cec:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   22cf0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   22cf4:	686a      	ldr	r2, [r5, #4]
   22cf6:	2a00      	cmp	r2, #0
   22cf8:	d0f5      	beq.n	22ce6 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   22cfa:	f1ba 0f00 	cmp.w	sl, #0
   22cfe:	d0e9      	beq.n	22cd4 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   22d00:	4628      	mov	r0, r5
   22d02:	f013 ff8b 	bl	36c1c <mpu_partition_is_valid>
		if (do_sanity_check &&
   22d06:	2800      	cmp	r0, #0
   22d08:	d1e4      	bne.n	22cd4 <mpu_configure_regions+0x10>
   22d0a:	4b0b      	ldr	r3, [pc, #44]	; (22d38 <mpu_configure_regions+0x74>)
   22d0c:	4a0b      	ldr	r2, [pc, #44]	; (22d3c <mpu_configure_regions+0x78>)
   22d0e:	1a9b      	subs	r3, r3, r2
   22d10:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   22d12:	f04f 0200 	mov.w	r2, #0
   22d16:	2101      	movs	r1, #1
   22d18:	f361 0202 	bfi	r2, r1, #0, #3
   22d1c:	f36f 02c5 	bfc	r2, #3, #3
   22d20:	f363 128f 	bfi	r2, r3, #6, #10
   22d24:	4621      	mov	r1, r4
   22d26:	4806      	ldr	r0, [pc, #24]	; (22d40 <mpu_configure_regions+0x7c>)
   22d28:	f7fd fabe 	bl	202a8 <log_1>
			return -EINVAL;
   22d2c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   22d30:	4630      	mov	r0, r6
   22d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22d36:	bf00      	nop
   22d38:	0003d27c 	.word	0x0003d27c
   22d3c:	0003d1a4 	.word	0x0003d1a4
   22d40:	0003e60c 	.word	0x0003e60c

00022d44 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   22d44:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   22d46:	4c03      	ldr	r4, [pc, #12]	; (22d54 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   22d48:	2301      	movs	r3, #1
   22d4a:	7822      	ldrb	r2, [r4, #0]
   22d4c:	f7ff ffba 	bl	22cc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   22d50:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   22d52:	bd10      	pop	{r4, pc}
   22d54:	2000da72 	.word	0x2000da72

00022d58 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   22d58:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   22d5a:	2300      	movs	r3, #0
   22d5c:	4a08      	ldr	r2, [pc, #32]	; (22d80 <mpu_configure_dynamic_mpu_regions+0x28>)
   22d5e:	7812      	ldrb	r2, [r2, #0]
   22d60:	f7ff ffb0 	bl	22cc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   22d64:	f110 0f16 	cmn.w	r0, #22
   22d68:	d008      	beq.n	22d7c <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   22d6a:	4603      	mov	r3, r0
   22d6c:	2b07      	cmp	r3, #7
   22d6e:	dc05      	bgt.n	22d7c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   22d70:	4a04      	ldr	r2, [pc, #16]	; (22d84 <mpu_configure_dynamic_mpu_regions+0x2c>)
   22d72:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   22d74:	2100      	movs	r1, #0
   22d76:	6111      	str	r1, [r2, #16]
   22d78:	3301      	adds	r3, #1
   22d7a:	e7f7      	b.n	22d6c <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   22d7c:	bd08      	pop	{r3, pc}
   22d7e:	bf00      	nop
   22d80:	2000da72 	.word	0x2000da72
   22d84:	e000ed90 	.word	0xe000ed90

00022d88 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   22d88:	4b03      	ldr	r3, [pc, #12]	; (22d98 <arm_core_mpu_enable+0x10>)
   22d8a:	2205      	movs	r2, #5
   22d8c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   22d8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22d92:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   22d96:	4770      	bx	lr
   22d98:	e000ed90 	.word	0xe000ed90

00022d9c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   22d9c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   22da0:	4b01      	ldr	r3, [pc, #4]	; (22da8 <arm_core_mpu_disable+0xc>)
   22da2:	2200      	movs	r2, #0
   22da4:	605a      	str	r2, [r3, #4]
}
   22da6:	4770      	bx	lr
   22da8:	e000ed90 	.word	0xe000ed90

00022dac <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   22dac:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   22dae:	4b0e      	ldr	r3, [pc, #56]	; (22de8 <z_arm_mpu_init+0x3c>)
   22db0:	681d      	ldr	r5, [r3, #0]
   22db2:	2d08      	cmp	r5, #8
   22db4:	d815      	bhi.n	22de2 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   22db6:	f7ff fff1 	bl	22d9c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   22dba:	2400      	movs	r4, #0
   22dbc:	42a5      	cmp	r5, r4
   22dbe:	d90a      	bls.n	22dd6 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   22dc0:	4b09      	ldr	r3, [pc, #36]	; (22de8 <z_arm_mpu_init+0x3c>)
   22dc2:	6859      	ldr	r1, [r3, #4]
   22dc4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   22dc8:	0093      	lsls	r3, r2, #2
   22dca:	4419      	add	r1, r3
   22dcc:	4620      	mov	r0, r4
   22dce:	f7ff ff47 	bl	22c60 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   22dd2:	3401      	adds	r4, #1
   22dd4:	e7f2      	b.n	22dbc <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   22dd6:	4b05      	ldr	r3, [pc, #20]	; (22dec <z_arm_mpu_init+0x40>)
   22dd8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   22dda:	f7ff ffd5 	bl	22d88 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   22dde:	2000      	movs	r0, #0
}
   22de0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   22de2:	f04f 30ff 	mov.w	r0, #4294967295
   22de6:	e7fb      	b.n	22de0 <z_arm_mpu_init+0x34>
   22de8:	0003e670 	.word	0x0003e670
   22dec:	2000da72 	.word	0x2000da72

00022df0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   22df0:	4b01      	ldr	r3, [pc, #4]	; (22df8 <__stdout_hook_install+0x8>)
   22df2:	6018      	str	r0, [r3, #0]
}
   22df4:	4770      	bx	lr
   22df6:	bf00      	nop
   22df8:	200004d0 	.word	0x200004d0

00022dfc <smf_set_state>:
		init_state->entry(ctx);
	}
}

void smf_set_state(struct smf_ctx *const ctx, const struct smf_state *target)
{
   22dfc:	b538      	push	{r3, r4, r5, lr}
	/*
	 * It does not make sense to call set_state in an exit phase of a state
	 * since we are already in a transition; we would always ignore the
	 * intended state to transition into.
	 */
	if (internal->exit) {
   22dfe:	7b03      	ldrb	r3, [r0, #12]
   22e00:	f013 0f04 	tst.w	r3, #4
   22e04:	d119      	bne.n	22e3a <smf_set_state+0x3e>
   22e06:	4604      	mov	r4, r0
   22e08:	460d      	mov	r5, r1
		LOG_WRN("Calling %s from exit action", __func__);
		return;
	}

	internal->exit = true;
   22e0a:	7b03      	ldrb	r3, [r0, #12]
   22e0c:	f043 0304 	orr.w	r3, r3, #4
   22e10:	7303      	strb	r3, [r0, #12]

	/* Execute the current states exit action */
	if (ctx->current->exit) {
   22e12:	6803      	ldr	r3, [r0, #0]
   22e14:	689b      	ldr	r3, [r3, #8]
   22e16:	b123      	cbz	r3, 22e22 <smf_set_state+0x26>
		ctx->current->exit(ctx);
   22e18:	4798      	blx	r3

		/*
		 * No need to continue if terminate was set in the
		 * exit action
		 */
		if (internal->terminate) {
   22e1a:	7b23      	ldrb	r3, [r4, #12]
   22e1c:	f013 0f02 	tst.w	r3, #2
   22e20:	d10a      	bne.n	22e38 <smf_set_state+0x3c>
		if (smf_execute_ancestor_exit_actions(ctx, target)) {
			return;
		}
	}

	internal->exit = false;
   22e22:	7b23      	ldrb	r3, [r4, #12]
   22e24:	f36f 0382 	bfc	r3, #2, #1
   22e28:	7323      	strb	r3, [r4, #12]

	/* update the state variables */
	ctx->previous = ctx->current;
   22e2a:	6823      	ldr	r3, [r4, #0]
   22e2c:	6063      	str	r3, [r4, #4]
	ctx->current = target;
   22e2e:	6025      	str	r5, [r4, #0]
			return;
		}
	}

	/* Now execute the target entry action */
	if (ctx->current->entry) {
   22e30:	682b      	ldr	r3, [r5, #0]
   22e32:	b10b      	cbz	r3, 22e38 <smf_set_state+0x3c>
		ctx->current->entry(ctx);
   22e34:	4620      	mov	r0, r4
   22e36:	4798      	blx	r3
		/*
		 * If terminate was set, it will be handled in the
		 * smf_run_state function
		 */
	}
}
   22e38:	bd38      	pop	{r3, r4, r5, pc}
   22e3a:	4b09      	ldr	r3, [pc, #36]	; (22e60 <smf_set_state+0x64>)
   22e3c:	4a09      	ldr	r2, [pc, #36]	; (22e64 <smf_set_state+0x68>)
   22e3e:	1a9b      	subs	r3, r3, r2
   22e40:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Calling %s from exit action", __func__);
   22e42:	f04f 0200 	mov.w	r2, #0
   22e46:	2102      	movs	r1, #2
   22e48:	f361 0202 	bfi	r2, r1, #0, #3
   22e4c:	f36f 02c5 	bfc	r2, #3, #3
   22e50:	f363 128f 	bfi	r2, r3, #6, #10
   22e54:	4904      	ldr	r1, [pc, #16]	; (22e68 <smf_set_state+0x6c>)
   22e56:	4805      	ldr	r0, [pc, #20]	; (22e6c <smf_set_state+0x70>)
   22e58:	f7fd fa26 	bl	202a8 <log_1>
		return;
   22e5c:	e7ec      	b.n	22e38 <smf_set_state+0x3c>
   22e5e:	bf00      	nop
   22e60:	0003d2b4 	.word	0x0003d2b4
   22e64:	0003d1a4 	.word	0x0003d1a4
   22e68:	0003e650 	.word	0x0003e650
   22e6c:	0003e630 	.word	0x0003e630

00022e70 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   22e70:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e74:	f3ef 8211 	mrs	r2, BASEPRI
   22e78:	f383 8812 	msr	BASEPRI_MAX, r3
   22e7c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   22e80:	2301      	movs	r3, #1
   22e82:	4906      	ldr	r1, [pc, #24]	; (22e9c <nordicsemi_nrf52_init+0x2c>)
   22e84:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   22e88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   22e8c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   22e90:	f382 8811 	msr	BASEPRI, r2
   22e94:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   22e98:	2000      	movs	r0, #0
   22e9a:	4770      	bx	lr
   22e9c:	4001e000 	.word	0x4001e000

00022ea0 <sys_arch_reboot>:
    *p_gpregret = val;
   22ea0:	b2c0      	uxtb	r0, r0
   22ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22ea6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   22eaa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22eae:	4905      	ldr	r1, [pc, #20]	; (22ec4 <sys_arch_reboot+0x24>)
   22eb0:	68ca      	ldr	r2, [r1, #12]
   22eb2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22eb6:	4b04      	ldr	r3, [pc, #16]	; (22ec8 <sys_arch_reboot+0x28>)
   22eb8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22eba:	60cb      	str	r3, [r1, #12]
   22ebc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   22ec0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22ec2:	e7fd      	b.n	22ec0 <sys_arch_reboot+0x20>
   22ec4:	e000ed00 	.word	0xe000ed00
   22ec8:	05fa0004 	.word	0x05fa0004

00022ecc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   22ecc:	b130      	cbz	r0, 22edc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   22ece:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   22ed0:	0180      	lsls	r0, r0, #6
   22ed2:	4b03      	ldr	r3, [pc, #12]	; (22ee0 <arch_busy_wait+0x14>)
   22ed4:	f043 0301 	orr.w	r3, r3, #1
   22ed8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   22eda:	bd08      	pop	{r3, pc}
   22edc:	4770      	bx	lr
   22ede:	bf00      	nop
   22ee0:	0003d440 	.word	0x0003d440

00022ee4 <init>:
	return 0;
}
#endif /* USE_RESET_GPIO */

static int init(const struct device *dev)
{
   22ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ee6:	b085      	sub	sp, #20
	int rc;

	for (int i = 0; i < ARRAY_SIZE(routing_switches); ++i) {
   22ee8:	2400      	movs	r4, #0
   22eea:	e04a      	b.n	22f82 <init+0x9e>
   22eec:	4b57      	ldr	r3, [pc, #348]	; (2304c <init+0x168>)
   22eee:	4a58      	ldr	r2, [pc, #352]	; (23050 <init+0x16c>)
   22ef0:	1a9b      	subs	r3, r3, r2
   22ef2:	08db      	lsrs	r3, r3, #3
		const struct switch_cfg *cfg = &routing_switches[i];
		gpio_flags_t flags = cfg->flags;

		if (!device_is_ready(cfg->gpio)) {
			LOG_ERR("%s is not ready", cfg->gpio->name);
   22ef4:	f04f 0200 	mov.w	r2, #0
   22ef8:	2101      	movs	r1, #1
   22efa:	f361 0202 	bfi	r2, r1, #0, #3
   22efe:	f36f 02c5 	bfc	r2, #3, #3
   22f02:	f363 128f 	bfi	r2, r3, #6, #10
   22f06:	0124      	lsls	r4, r4, #4
   22f08:	4b52      	ldr	r3, [pc, #328]	; (23054 <init+0x170>)
   22f0a:	591b      	ldr	r3, [r3, r4]
   22f0c:	6819      	ldr	r1, [r3, #0]
   22f0e:	4852      	ldr	r0, [pc, #328]	; (23058 <init+0x174>)
   22f10:	f7fd f9ca 	bl	202a8 <log_1>
			return -ENODEV;
   22f14:	f06f 0512 	mvn.w	r5, #18
   22f18:	e094      	b.n	23044 <init+0x160>
		}

		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
				  : GPIO_OUTPUT_INACTIVE);
   22f1a:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   22f1e:	e044      	b.n	22faa <init+0xc6>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   22f20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   22f24:	f013 0f01 	tst.w	r3, #1
   22f28:	d055      	beq.n	22fd6 <init+0xf2>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   22f2a:	2301      	movs	r3, #1
   22f2c:	fa03 fe01 	lsl.w	lr, r3, r1
   22f30:	682b      	ldr	r3, [r5, #0]
   22f32:	ea43 030e 	orr.w	r3, r3, lr
   22f36:	602b      	str	r3, [r5, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   22f38:	f8dc 3000 	ldr.w	r3, [ip]
   22f3c:	4798      	blx	r3
		rc = gpio_pin_configure(cfg->gpio, cfg->pin, flags);
#if IS_ENABLED(CONFIG_LOG)
		LOG_DBG("Configuring P%d.%02d with flags: 0x%08x",
			cfg->port, cfg->pin, flags);
		if (rc) {
   22f3e:	4605      	mov	r5, r0
   22f40:	2800      	cmp	r0, #0
   22f42:	d150      	bne.n	22fe6 <init+0x102>
			LOG_ERR("Error %d while configuring pin P%d.%02d (%s)",
				rc, cfg->port, cfg->pin, cfg->name);
		} else if (cfg->info) {
   22f44:	4b43      	ldr	r3, [pc, #268]	; (23054 <init+0x170>)
   22f46:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   22f4a:	7a1b      	ldrb	r3, [r3, #8]
   22f4c:	b1b3      	cbz	r3, 22f7c <init+0x98>
   22f4e:	4b3f      	ldr	r3, [pc, #252]	; (2304c <init+0x168>)
   22f50:	4a3f      	ldr	r2, [pc, #252]	; (23050 <init+0x16c>)
   22f52:	1a9b      	subs	r3, r3, r2
   22f54:	08db      	lsrs	r3, r3, #3
			LOG_INF("%s is %s",
   22f56:	2203      	movs	r2, #3
   22f58:	f362 0602 	bfi	r6, r2, #0, #3
   22f5c:	f36f 06c5 	bfc	r6, #3, #3
   22f60:	f363 168f 	bfi	r6, r3, #6, #10
   22f64:	4b3b      	ldr	r3, [pc, #236]	; (23054 <init+0x170>)
   22f66:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   22f6a:	68d9      	ldr	r1, [r3, #12]
   22f6c:	799b      	ldrb	r3, [r3, #6]
   22f6e:	2b00      	cmp	r3, #0
   22f70:	d055      	beq.n	2301e <init+0x13a>
   22f72:	4a3a      	ldr	r2, [pc, #232]	; (2305c <init+0x178>)
   22f74:	4633      	mov	r3, r6
   22f76:	483a      	ldr	r0, [pc, #232]	; (23060 <init+0x17c>)
   22f78:	f7fd f9cc 	bl	20314 <log_2>
				cfg->name, cfg->on ? "ENABLED" : "disabled");
		}
#endif
		if (rc) {
   22f7c:	2d00      	cmp	r5, #0
   22f7e:	d161      	bne.n	23044 <init+0x160>
	for (int i = 0; i < ARRAY_SIZE(routing_switches); ++i) {
   22f80:	3401      	adds	r4, #1
   22f82:	2c0d      	cmp	r4, #13
   22f84:	dc4d      	bgt.n	23022 <init+0x13e>
		gpio_flags_t flags = cfg->flags;
   22f86:	4a33      	ldr	r2, [pc, #204]	; (23054 <init+0x170>)
   22f88:	0123      	lsls	r3, r4, #4
   22f8a:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   22f8e:	794d      	ldrb	r5, [r1, #5]
		if (!device_is_ready(cfg->gpio)) {
   22f90:	58d0      	ldr	r0, [r2, r3]
   22f92:	f019 f80f 	bl	3bfb4 <z_device_ready>
   22f96:	2800      	cmp	r0, #0
   22f98:	d0a8      	beq.n	22eec <init+0x8>
		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
   22f9a:	4b2e      	ldr	r3, [pc, #184]	; (23054 <init+0x170>)
   22f9c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   22fa0:	799b      	ldrb	r3, [r3, #6]
				  : GPIO_OUTPUT_INACTIVE);
   22fa2:	2b00      	cmp	r3, #0
   22fa4:	d0b9      	beq.n	22f1a <init+0x36>
   22fa6:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
   22faa:	432b      	orrs	r3, r5
		rc = gpio_pin_configure(cfg->gpio, cfg->pin, flags);
   22fac:	4929      	ldr	r1, [pc, #164]	; (23054 <init+0x170>)
   22fae:	0122      	lsls	r2, r4, #4
   22fb0:	eb01 1504 	add.w	r5, r1, r4, lsl #4
   22fb4:	5888      	ldr	r0, [r1, r2]
   22fb6:	7929      	ldrb	r1, [r5, #4]
	const struct gpio_driver_api *api =
   22fb8:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
   22fbc:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   22fbe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   22fc2:	d0ad      	beq.n	22f20 <init+0x3c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   22fc4:	f413 6f40 	tst.w	r3, #3072	; 0xc00
   22fc8:	d0aa      	beq.n	22f20 <init+0x3c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   22fca:	f013 0f01 	tst.w	r3, #1
   22fce:	d0a7      	beq.n	22f20 <init+0x3c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   22fd0:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
   22fd4:	e7a4      	b.n	22f20 <init+0x3c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   22fd6:	2301      	movs	r3, #1
   22fd8:	fa03 fe01 	lsl.w	lr, r3, r1
   22fdc:	682b      	ldr	r3, [r5, #0]
   22fde:	ea23 030e 	bic.w	r3, r3, lr
   22fe2:	602b      	str	r3, [r5, #0]
   22fe4:	e7a8      	b.n	22f38 <init+0x54>
   22fe6:	4b19      	ldr	r3, [pc, #100]	; (2304c <init+0x168>)
   22fe8:	4a19      	ldr	r2, [pc, #100]	; (23050 <init+0x16c>)
   22fea:	1a9b      	subs	r3, r3, r2
   22fec:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Error %d while configuring pin P%d.%02d (%s)",
   22fee:	2201      	movs	r2, #1
   22ff0:	f362 0702 	bfi	r7, r2, #0, #3
   22ff4:	f36f 07c5 	bfc	r7, #3, #3
   22ff8:	f363 178f 	bfi	r7, r3, #6, #10
   22ffc:	9000      	str	r0, [sp, #0]
   22ffe:	4b15      	ldr	r3, [pc, #84]	; (23054 <init+0x170>)
   23000:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   23004:	79da      	ldrb	r2, [r3, #7]
   23006:	9201      	str	r2, [sp, #4]
   23008:	791a      	ldrb	r2, [r3, #4]
   2300a:	9202      	str	r2, [sp, #8]
   2300c:	68db      	ldr	r3, [r3, #12]
   2300e:	9303      	str	r3, [sp, #12]
   23010:	463b      	mov	r3, r7
   23012:	2204      	movs	r2, #4
   23014:	4669      	mov	r1, sp
   23016:	4813      	ldr	r0, [pc, #76]	; (23064 <init+0x180>)
   23018:	f7fd f9b8 	bl	2038c <log_n>
   2301c:	e7ae      	b.n	22f7c <init+0x98>
			LOG_INF("%s is %s",
   2301e:	4a12      	ldr	r2, [pc, #72]	; (23068 <init+0x184>)
   23020:	e7a8      	b.n	22f74 <init+0x90>
   23022:	4b0a      	ldr	r3, [pc, #40]	; (2304c <init+0x168>)
   23024:	4a0a      	ldr	r2, [pc, #40]	; (23050 <init+0x16c>)
   23026:	1a9b      	subs	r3, r3, r2
   23028:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to configure reset pin, err %d", rc);
		return -EIO;
	}
#endif

	LOG_INF("Board configured.");
   2302a:	f04f 0100 	mov.w	r1, #0
   2302e:	2203      	movs	r2, #3
   23030:	f362 0102 	bfi	r1, r2, #0, #3
   23034:	f36f 01c5 	bfc	r1, #3, #3
   23038:	f363 118f 	bfi	r1, r3, #6, #10
   2303c:	480b      	ldr	r0, [pc, #44]	; (2306c <init+0x188>)
   2303e:	f7fd f9e9 	bl	20414 <log_0>

	return 0;
   23042:	2500      	movs	r5, #0
}
   23044:	4628      	mov	r0, r5
   23046:	b005      	add	sp, #20
   23048:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2304a:	bf00      	nop
   2304c:	0003d1ac 	.word	0x0003d1ac
   23050:	0003d1a4 	.word	0x0003d1a4
   23054:	0003e840 	.word	0x0003e840
   23058:	0003e694 	.word	0x0003e694
   2305c:	0003e6d4 	.word	0x0003e6d4
   23060:	0003e6e8 	.word	0x0003e6e8
   23064:	0003e6a4 	.word	0x0003e6a4
   23068:	0003e6dc 	.word	0x0003e6dc
   2306c:	0003e6f4 	.word	0x0003e6f4

00023070 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   23070:	2940      	cmp	r1, #64	; 0x40
   23072:	bf28      	it	cs
   23074:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   23076:	2300      	movs	r3, #0
   23078:	428b      	cmp	r3, r1
   2307a:	d217      	bcs.n	230ac <bt_hex_real+0x3c>
{
   2307c:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   2307e:	5cc4      	ldrb	r4, [r0, r3]
   23080:	0924      	lsrs	r4, r4, #4
   23082:	005a      	lsls	r2, r3, #1
   23084:	4e0c      	ldr	r6, [pc, #48]	; (230b8 <bt_hex_real+0x48>)
   23086:	5d34      	ldrb	r4, [r6, r4]
   23088:	4d0c      	ldr	r5, [pc, #48]	; (230bc <bt_hex_real+0x4c>)
   2308a:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   2308e:	5cc4      	ldrb	r4, [r0, r3]
   23090:	f004 040f 	and.w	r4, r4, #15
   23094:	3201      	adds	r2, #1
   23096:	5d34      	ldrb	r4, [r6, r4]
   23098:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   2309a:	3301      	adds	r3, #1
   2309c:	428b      	cmp	r3, r1
   2309e:	d3ee      	bcc.n	2307e <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   230a0:	4806      	ldr	r0, [pc, #24]	; (230bc <bt_hex_real+0x4c>)
   230a2:	2200      	movs	r2, #0
   230a4:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   230a8:	bc70      	pop	{r4, r5, r6}
   230aa:	4770      	bx	lr
	str[i * 2] = '\0';
   230ac:	4803      	ldr	r0, [pc, #12]	; (230bc <bt_hex_real+0x4c>)
   230ae:	2200      	movs	r2, #0
   230b0:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   230b4:	4770      	bx	lr
   230b6:	bf00      	nop
   230b8:	0003e920 	.word	0x0003e920
   230bc:	200080d0 	.word	0x200080d0

000230c0 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   230c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   230c2:	b08b      	sub	sp, #44	; 0x2c
   230c4:	4604      	mov	r4, r0
	switch (addr->type) {
   230c6:	7803      	ldrb	r3, [r0, #0]
   230c8:	2b03      	cmp	r3, #3
   230ca:	d82c      	bhi.n	23126 <bt_addr_le_str_real+0x66>
   230cc:	e8df f003 	tbb	[pc, r3]
   230d0:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   230d4:	4917      	ldr	r1, [pc, #92]	; (23134 <bt_addr_le_str_real+0x74>)
   230d6:	a807      	add	r0, sp, #28
   230d8:	f013 fdd8 	bl	36c8c <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   230dc:	7963      	ldrb	r3, [r4, #5]
   230de:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   230e0:	78e1      	ldrb	r1, [r4, #3]
   230e2:	78a0      	ldrb	r0, [r4, #2]
   230e4:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   230e6:	4d14      	ldr	r5, [pc, #80]	; (23138 <bt_addr_le_str_real+0x78>)
   230e8:	af07      	add	r7, sp, #28
   230ea:	9705      	str	r7, [sp, #20]
   230ec:	9604      	str	r6, [sp, #16]
   230ee:	9003      	str	r0, [sp, #12]
   230f0:	9102      	str	r1, [sp, #8]
   230f2:	9201      	str	r2, [sp, #4]
   230f4:	9300      	str	r3, [sp, #0]
   230f6:	79a3      	ldrb	r3, [r4, #6]
   230f8:	4a10      	ldr	r2, [pc, #64]	; (2313c <bt_addr_le_str_real+0x7c>)
   230fa:	211e      	movs	r1, #30
   230fc:	4628      	mov	r0, r5
   230fe:	f011 f9c4 	bl	3448a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   23102:	4628      	mov	r0, r5
   23104:	b00b      	add	sp, #44	; 0x2c
   23106:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   23108:	490d      	ldr	r1, [pc, #52]	; (23140 <bt_addr_le_str_real+0x80>)
   2310a:	a807      	add	r0, sp, #28
   2310c:	f013 fdbe 	bl	36c8c <strcpy>
		break;
   23110:	e7e4      	b.n	230dc <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
   23112:	490c      	ldr	r1, [pc, #48]	; (23144 <bt_addr_le_str_real+0x84>)
   23114:	a807      	add	r0, sp, #28
   23116:	f013 fdb9 	bl	36c8c <strcpy>
		break;
   2311a:	e7df      	b.n	230dc <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
   2311c:	490a      	ldr	r1, [pc, #40]	; (23148 <bt_addr_le_str_real+0x88>)
   2311e:	a807      	add	r0, sp, #28
   23120:	f013 fdb4 	bl	36c8c <strcpy>
		break;
   23124:	e7da      	b.n	230dc <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   23126:	4a09      	ldr	r2, [pc, #36]	; (2314c <bt_addr_le_str_real+0x8c>)
   23128:	210a      	movs	r1, #10
   2312a:	a807      	add	r0, sp, #28
   2312c:	f011 f9ad 	bl	3448a <snprintk>
		break;
   23130:	e7d4      	b.n	230dc <bt_addr_le_str_real+0x1c>
   23132:	bf00      	nop
   23134:	0003d4cc 	.word	0x0003d4cc
   23138:	20008154 	.word	0x20008154
   2313c:	0003d4f4 	.word	0x0003d4f4
   23140:	0003d4d4 	.word	0x0003d4d4
   23144:	0003d4dc 	.word	0x0003d4dc
   23148:	0003d4e8 	.word	0x0003d4e8
   2314c:	000403d0 	.word	0x000403d0

00023150 <le_p256_pub_key>:
	net_buf_unref(buf);
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
}

static void le_p256_pub_key(struct net_buf *buf)
{
   23150:	b508      	push	{r3, lr}
	uint8_t status;

	net_buf_unref(buf);
   23152:	f017 fc64 	bl	3aa1e <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23156:	f3bf 8f5b 	dmb	ish
   2315a:	4b12      	ldr	r3, [pc, #72]	; (231a4 <le_p256_pub_key+0x54>)
   2315c:	681b      	ldr	r3, [r3, #0]
   2315e:	f3bf 8f5b 	dmb	ish

	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   23162:	f013 0f02 	tst.w	r3, #2
   23166:	d005      	beq.n	23174 <le_p256_pub_key+0x24>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   23168:	210c      	movs	r1, #12
	} else {
		k_sem_give(&cmd_sem);
		status = BT_HCI_ERR_SUCCESS;
	}

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2316a:	f242 0025 	movw	r0, #8229	; 0x2025
   2316e:	f013 feb9 	bl	36ee4 <send_cmd_status>
}
   23172:	bd08      	pop	{r3, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23174:	4b0b      	ldr	r3, [pc, #44]	; (231a4 <le_p256_pub_key+0x54>)
   23176:	f3bf 8f5b 	dmb	ish
   2317a:	e853 2f00 	ldrex	r2, [r3]
   2317e:	f042 0101 	orr.w	r1, r2, #1
   23182:	e843 1000 	strex	r0, r1, [r3]
   23186:	2800      	cmp	r0, #0
   23188:	d1f7      	bne.n	2317a <le_p256_pub_key+0x2a>
   2318a:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2318e:	f012 0f01 	tst.w	r2, #1
   23192:	d001      	beq.n	23198 <le_p256_pub_key+0x48>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   23194:	210c      	movs	r1, #12
   23196:	e7e8      	b.n	2316a <le_p256_pub_key+0x1a>
	z_impl_k_sem_give(sem);
   23198:	4803      	ldr	r0, [pc, #12]	; (231a8 <le_p256_pub_key+0x58>)
   2319a:	f00d f867 	bl	3026c <z_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
   2319e:	2100      	movs	r1, #0
   231a0:	e7e3      	b.n	2316a <le_p256_pub_key+0x1a>
   231a2:	bf00      	nop
   231a4:	200081d4 	.word	0x200081d4
   231a8:	20000b20 	.word	0x20000b20

000231ac <le_gen_dhkey>:
{
   231ac:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   231ae:	f3bf 8f5b 	dmb	ish
   231b2:	4b2b      	ldr	r3, [pc, #172]	; (23260 <le_gen_dhkey+0xb4>)
   231b4:	681b      	ldr	r3, [r3, #0]
   231b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   231ba:	f013 0f01 	tst.w	r3, #1
   231be:	d149      	bne.n	23254 <le_gen_dhkey+0xa8>
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   231c0:	2901      	cmp	r1, #1
   231c2:	d849      	bhi.n	23258 <le_gen_dhkey+0xac>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   231c4:	4b26      	ldr	r3, [pc, #152]	; (23260 <le_gen_dhkey+0xb4>)
   231c6:	f3bf 8f5b 	dmb	ish
   231ca:	e853 2f00 	ldrex	r2, [r3]
   231ce:	f042 0402 	orr.w	r4, r2, #2
   231d2:	e843 4500 	strex	r5, r4, [r3]
   231d6:	2d00      	cmp	r5, #0
   231d8:	d1f7      	bne.n	231ca <le_gen_dhkey+0x1e>
   231da:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   231de:	f012 0f02 	tst.w	r2, #2
   231e2:	d13b      	bne.n	2325c <le_gen_dhkey+0xb0>

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   231e4:	f100 021f 	add.w	r2, r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   231e8:	4b1e      	ldr	r3, [pc, #120]	; (23264 <le_gen_dhkey+0xb8>)

	for (; length > 0; length--) {
   231ea:	2420      	movs	r4, #32
   231ec:	b12c      	cbz	r4, 231fa <le_gen_dhkey+0x4e>
		*pdst++ = *psrc--;
   231ee:	f812 5901 	ldrb.w	r5, [r2], #-1
   231f2:	f803 5b01 	strb.w	r5, [r3], #1
	for (; length > 0; length--) {
   231f6:	3c01      	subs	r4, #1
   231f8:	e7f8      	b.n	231ec <le_gen_dhkey+0x40>
	psrc += length - 1;
   231fa:	303f      	adds	r0, #63	; 0x3f
	uint8_t *pdst = (uint8_t *)dst;
   231fc:	4b1a      	ldr	r3, [pc, #104]	; (23268 <le_gen_dhkey+0xbc>)
	for (; length > 0; length--) {
   231fe:	2220      	movs	r2, #32
   23200:	e004      	b.n	2320c <le_gen_dhkey+0x60>
		*pdst++ = *psrc--;
   23202:	f810 4901 	ldrb.w	r4, [r0], #-1
   23206:	f803 4b01 	strb.w	r4, [r3], #1
	for (; length > 0; length--) {
   2320a:	3a01      	subs	r2, #1
   2320c:	2a00      	cmp	r2, #0
   2320e:	d1f8      	bne.n	23202 <le_gen_dhkey+0x56>
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   23210:	2901      	cmp	r1, #1
   23212:	d111      	bne.n	23238 <le_gen_dhkey+0x8c>
   23214:	4b12      	ldr	r3, [pc, #72]	; (23260 <le_gen_dhkey+0xb4>)
   23216:	f3bf 8f5b 	dmb	ish
   2321a:	e853 2f00 	ldrex	r2, [r3]
   2321e:	f042 0204 	orr.w	r2, r2, #4
   23222:	e843 2100 	strex	r1, r2, [r3]
   23226:	2900      	cmp	r1, #0
   23228:	d1f7      	bne.n	2321a <le_gen_dhkey+0x6e>
   2322a:	f3bf 8f5b 	dmb	ish
   2322e:	480f      	ldr	r0, [pc, #60]	; (2326c <le_gen_dhkey+0xc0>)
   23230:	f00d f81c 	bl	3026c <z_impl_k_sem_give>
	return BT_HCI_ERR_SUCCESS;
   23234:	2000      	movs	r0, #0
   23236:	e010      	b.n	2325a <le_gen_dhkey+0xae>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23238:	4b09      	ldr	r3, [pc, #36]	; (23260 <le_gen_dhkey+0xb4>)
   2323a:	f3bf 8f5b 	dmb	ish
   2323e:	e853 2f00 	ldrex	r2, [r3]
   23242:	f022 0204 	bic.w	r2, r2, #4
   23246:	e843 2100 	strex	r1, r2, [r3]
   2324a:	2900      	cmp	r1, #0
   2324c:	d1f7      	bne.n	2323e <le_gen_dhkey+0x92>
   2324e:	f3bf 8f5b 	dmb	ish
   23252:	e7ec      	b.n	2322e <le_gen_dhkey+0x82>
		return BT_HCI_ERR_CMD_DISALLOWED;
   23254:	200c      	movs	r0, #12
   23256:	e000      	b.n	2325a <le_gen_dhkey+0xae>
		return BT_HCI_ERR_INVALID_PARAM;
   23258:	2012      	movs	r0, #18
}
   2325a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2325c:	200c      	movs	r0, #12
   2325e:	e7fc      	b.n	2325a <le_gen_dhkey+0xae>
   23260:	200081d4 	.word	0x200081d4
   23264:	20008194 	.word	0x20008194
   23268:	200081b4 	.word	0x200081b4
   2326c:	20000b20 	.word	0x20000b20

00023270 <generate_keys>:
{
   23270:	b508      	push	{r3, lr}
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   23272:	4911      	ldr	r1, [pc, #68]	; (232b8 <generate_keys+0x48>)
   23274:	4a11      	ldr	r2, [pc, #68]	; (232bc <generate_keys+0x4c>)
   23276:	f101 0020 	add.w	r0, r1, #32
   2327a:	f012 fc0c 	bl	35a96 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2327e:	b140      	cbz	r0, 23292 <generate_keys+0x22>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   23280:	2220      	movs	r2, #32
   23282:	490f      	ldr	r1, [pc, #60]	; (232c0 <generate_keys+0x50>)
   23284:	480c      	ldr	r0, [pc, #48]	; (232b8 <generate_keys+0x48>)
   23286:	f013 fd40 	bl	36d0a <memcmp>
   2328a:	2800      	cmp	r0, #0
   2328c:	d0f1      	beq.n	23272 <generate_keys+0x2>
	return 0;
   2328e:	2000      	movs	r0, #0
   23290:	e010      	b.n	232b4 <generate_keys+0x44>
   23292:	4b0c      	ldr	r3, [pc, #48]	; (232c4 <generate_keys+0x54>)
   23294:	4a0c      	ldr	r2, [pc, #48]	; (232c8 <generate_keys+0x58>)
   23296:	1a9b      	subs	r3, r3, r2
   23298:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to create ECC public/private pair");
   2329a:	f04f 0100 	mov.w	r1, #0
   2329e:	2201      	movs	r2, #1
   232a0:	f362 0102 	bfi	r1, r2, #0, #3
   232a4:	f36f 01c5 	bfc	r1, #3, #3
   232a8:	f363 118f 	bfi	r1, r3, #6, #10
   232ac:	4807      	ldr	r0, [pc, #28]	; (232cc <generate_keys+0x5c>)
   232ae:	f7fd f8b1 	bl	20414 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   232b2:	201f      	movs	r0, #31
}
   232b4:	bd08      	pop	{r3, pc}
   232b6:	bf00      	nop
   232b8:	20008174 	.word	0x20008174
   232bc:	0003e9a0 	.word	0x0003e9a0
   232c0:	0003ea50 	.word	0x0003ea50
   232c4:	0003d1e4 	.word	0x0003d1e4
   232c8:	0003d1a4 	.word	0x0003d1a4
   232cc:	0003e93c 	.word	0x0003e93c

000232d0 <emulate_le_p256_public_key_cmd>:
{
   232d0:	b570      	push	{r4, r5, r6, lr}
	status = generate_keys();
   232d2:	f7ff ffcd 	bl	23270 <generate_keys>
   232d6:	4605      	mov	r5, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   232d8:	f04f 32ff 	mov.w	r2, #4294967295
   232dc:	f04f 33ff 	mov.w	r3, #4294967295
   232e0:	2001      	movs	r0, #1
   232e2:	f000 f983 	bl	235ec <bt_buf_get_rx>
   232e6:	4604      	mov	r4, r0
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   232e8:	f100 0608 	add.w	r6, r0, #8
   232ec:	2102      	movs	r1, #2
   232ee:	4630      	mov	r0, r6
   232f0:	f017 fbdf 	bl	3aab2 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   232f4:	233e      	movs	r3, #62	; 0x3e
   232f6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   232f8:	2342      	movs	r3, #66	; 0x42
   232fa:	7043      	strb	r3, [r0, #1]
   232fc:	2101      	movs	r1, #1
   232fe:	4630      	mov	r0, r6
   23300:	f017 fbd7 	bl	3aab2 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   23304:	2308      	movs	r3, #8
   23306:	7003      	strb	r3, [r0, #0]
   23308:	2141      	movs	r1, #65	; 0x41
   2330a:	4630      	mov	r0, r6
   2330c:	f017 fbd1 	bl	3aab2 <net_buf_simple_add>
	evt->status = status;
   23310:	7005      	strb	r5, [r0, #0]
	if (status) {
   23312:	b94d      	cbnz	r5, 23328 <emulate_le_p256_public_key_cmd+0x58>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   23314:	1c42      	adds	r2, r0, #1
	psrc += length - 1;
   23316:	4b15      	ldr	r3, [pc, #84]	; (2336c <emulate_le_p256_public_key_cmd+0x9c>)
	for (; length > 0; length--) {
   23318:	2120      	movs	r1, #32
   2331a:	b159      	cbz	r1, 23334 <emulate_le_p256_public_key_cmd+0x64>
		*pdst++ = *psrc--;
   2331c:	f813 5901 	ldrb.w	r5, [r3], #-1
   23320:	f802 5b01 	strb.w	r5, [r2], #1
	for (; length > 0; length--) {
   23324:	3901      	subs	r1, #1
   23326:	e7f8      	b.n	2331a <emulate_le_p256_public_key_cmd+0x4a>
		(void)memset(evt->key, 0, sizeof(evt->key));
   23328:	2240      	movs	r2, #64	; 0x40
   2332a:	2100      	movs	r1, #0
   2332c:	3001      	adds	r0, #1
   2332e:	f013 fd3d 	bl	36dac <memset>
   23332:	e00a      	b.n	2334a <emulate_le_p256_public_key_cmd+0x7a>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   23334:	3021      	adds	r0, #33	; 0x21
	psrc += length - 1;
   23336:	4b0e      	ldr	r3, [pc, #56]	; (23370 <emulate_le_p256_public_key_cmd+0xa0>)
	for (; length > 0; length--) {
   23338:	2220      	movs	r2, #32
   2333a:	e004      	b.n	23346 <emulate_le_p256_public_key_cmd+0x76>
		*pdst++ = *psrc--;
   2333c:	f813 1901 	ldrb.w	r1, [r3], #-1
   23340:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   23344:	3a01      	subs	r2, #1
   23346:	2a00      	cmp	r2, #0
   23348:	d1f8      	bne.n	2333c <emulate_le_p256_public_key_cmd+0x6c>
   2334a:	4b0a      	ldr	r3, [pc, #40]	; (23374 <emulate_le_p256_public_key_cmd+0xa4>)
   2334c:	f3bf 8f5b 	dmb	ish
   23350:	e853 2f00 	ldrex	r2, [r3]
   23354:	f022 0201 	bic.w	r2, r2, #1
   23358:	e843 2100 	strex	r1, r2, [r3]
   2335c:	2900      	cmp	r1, #0
   2335e:	d1f7      	bne.n	23350 <emulate_le_p256_public_key_cmd+0x80>
   23360:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   23364:	4620      	mov	r0, r4
   23366:	f002 f92d 	bl	255c4 <bt_recv>
}
   2336a:	bd70      	pop	{r4, r5, r6, pc}
   2336c:	200081b3 	.word	0x200081b3
   23370:	200081d3 	.word	0x200081d3
   23374:	200081d4 	.word	0x200081d4

00023378 <emulate_le_generate_dhkey>:
{
   23378:	b570      	push	{r4, r5, r6, lr}
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2337a:	4936      	ldr	r1, [pc, #216]	; (23454 <emulate_le_generate_dhkey+0xdc>)
   2337c:	4836      	ldr	r0, [pc, #216]	; (23458 <emulate_le_generate_dhkey+0xe0>)
   2337e:	f013 fad8 	bl	36932 <uECC_valid_public_key>
	if (ret < 0) {
   23382:	1e01      	subs	r1, r0, #0
   23384:	db32      	blt.n	233ec <emulate_le_generate_dhkey+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23386:	f3bf 8f5b 	dmb	ish
   2338a:	4b34      	ldr	r3, [pc, #208]	; (2345c <emulate_le_generate_dhkey+0xe4>)
   2338c:	681b      	ldr	r3, [r3, #0]
   2338e:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   23392:	f013 0f04 	tst.w	r3, #4
   23396:	d03b      	beq.n	23410 <emulate_le_generate_dhkey+0x98>
   23398:	4931      	ldr	r1, [pc, #196]	; (23460 <emulate_le_generate_dhkey+0xe8>)
   2339a:	482f      	ldr	r0, [pc, #188]	; (23458 <emulate_le_generate_dhkey+0xe0>)
   2339c:	4b2d      	ldr	r3, [pc, #180]	; (23454 <emulate_le_generate_dhkey+0xdc>)
   2339e:	4602      	mov	r2, r0
   233a0:	f012 fbca 	bl	35b38 <uECC_shared_secret>
   233a4:	4606      	mov	r6, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   233a6:	f04f 32ff 	mov.w	r2, #4294967295
   233aa:	f04f 33ff 	mov.w	r3, #4294967295
   233ae:	2001      	movs	r0, #1
   233b0:	f000 f91c 	bl	235ec <bt_buf_get_rx>
   233b4:	4604      	mov	r4, r0
   233b6:	f100 0508 	add.w	r5, r0, #8
   233ba:	2102      	movs	r1, #2
   233bc:	4628      	mov	r0, r5
   233be:	f017 fb78 	bl	3aab2 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   233c2:	233e      	movs	r3, #62	; 0x3e
   233c4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   233c6:	2322      	movs	r3, #34	; 0x22
   233c8:	7043      	strb	r3, [r0, #1]
   233ca:	2101      	movs	r1, #1
   233cc:	4628      	mov	r0, r5
   233ce:	f017 fb70 	bl	3aab2 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   233d2:	2309      	movs	r3, #9
   233d4:	7003      	strb	r3, [r0, #0]
   233d6:	2121      	movs	r1, #33	; 0x21
   233d8:	4628      	mov	r0, r5
   233da:	f017 fb6a 	bl	3aab2 <net_buf_simple_add>
	if (ret == TC_CRYPTO_FAIL) {
   233de:	b1ce      	cbz	r6, 23414 <emulate_le_generate_dhkey+0x9c>
		evt->status = 0U;
   233e0:	2300      	movs	r3, #0
   233e2:	f800 3b01 	strb.w	r3, [r0], #1
	psrc += length - 1;
   233e6:	4b1f      	ldr	r3, [pc, #124]	; (23464 <emulate_le_generate_dhkey+0xec>)
	for (; length > 0; length--) {
   233e8:	2220      	movs	r2, #32
   233ea:	e020      	b.n	2342e <emulate_le_generate_dhkey+0xb6>
   233ec:	4b1e      	ldr	r3, [pc, #120]	; (23468 <emulate_le_generate_dhkey+0xf0>)
   233ee:	4a1f      	ldr	r2, [pc, #124]	; (2346c <emulate_le_generate_dhkey+0xf4>)
   233f0:	1a9b      	subs	r3, r3, r2
   233f2:	08db      	lsrs	r3, r3, #3
		BT_ERR("public key is not valid (ret %d)", ret);
   233f4:	f04f 0200 	mov.w	r2, #0
   233f8:	2001      	movs	r0, #1
   233fa:	f360 0202 	bfi	r2, r0, #0, #3
   233fe:	f36f 02c5 	bfc	r2, #3, #3
   23402:	f363 128f 	bfi	r2, r3, #6, #10
   23406:	481a      	ldr	r0, [pc, #104]	; (23470 <emulate_le_generate_dhkey+0xf8>)
   23408:	f7fc ff4e 	bl	202a8 <log_1>
		ret = TC_CRYPTO_FAIL;
   2340c:	2600      	movs	r6, #0
   2340e:	e7ca      	b.n	233a6 <emulate_le_generate_dhkey+0x2e>
		ret = uECC_shared_secret(ecc.public_key_be,
   23410:	4918      	ldr	r1, [pc, #96]	; (23474 <emulate_le_generate_dhkey+0xfc>)
   23412:	e7c2      	b.n	2339a <emulate_le_generate_dhkey+0x22>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   23414:	231f      	movs	r3, #31
   23416:	f800 3b01 	strb.w	r3, [r0], #1
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2341a:	2220      	movs	r2, #32
   2341c:	21ff      	movs	r1, #255	; 0xff
   2341e:	f013 fcc5 	bl	36dac <memset>
   23422:	e006      	b.n	23432 <emulate_le_generate_dhkey+0xba>
		*pdst++ = *psrc--;
   23424:	f813 1901 	ldrb.w	r1, [r3], #-1
   23428:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   2342c:	3a01      	subs	r2, #1
   2342e:	2a00      	cmp	r2, #0
   23430:	d1f8      	bne.n	23424 <emulate_le_generate_dhkey+0xac>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23432:	4b0a      	ldr	r3, [pc, #40]	; (2345c <emulate_le_generate_dhkey+0xe4>)
   23434:	f3bf 8f5b 	dmb	ish
   23438:	e853 2f00 	ldrex	r2, [r3]
   2343c:	f022 0202 	bic.w	r2, r2, #2
   23440:	e843 2100 	strex	r1, r2, [r3]
   23444:	2900      	cmp	r1, #0
   23446:	d1f7      	bne.n	23438 <emulate_le_generate_dhkey+0xc0>
   23448:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2344c:	4620      	mov	r0, r4
   2344e:	f002 f8b9 	bl	255c4 <bt_recv>
}
   23452:	bd70      	pop	{r4, r5, r6, pc}
   23454:	0003e9a0 	.word	0x0003e9a0
   23458:	20008194 	.word	0x20008194
   2345c:	200081d4 	.word	0x200081d4
   23460:	0003ea50 	.word	0x0003ea50
   23464:	200081b3 	.word	0x200081b3
   23468:	0003d1e4 	.word	0x0003d1e4
   2346c:	0003d1a4 	.word	0x0003d1a4
   23470:	0003e968 	.word	0x0003e968
   23474:	20008174 	.word	0x20008174

00023478 <ecc_thread>:
{
   23478:	b508      	push	{r3, lr}
   2347a:	e008      	b.n	2348e <ecc_thread+0x16>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2347c:	f3bf 8f5b 	dmb	ish
   23480:	4b0e      	ldr	r3, [pc, #56]	; (234bc <ecc_thread+0x44>)
   23482:	681b      	ldr	r3, [r3, #0]
   23484:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   23488:	f013 0f02 	tst.w	r3, #2
   2348c:	d112      	bne.n	234b4 <ecc_thread+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   2348e:	f04f 32ff 	mov.w	r2, #4294967295
   23492:	f04f 33ff 	mov.w	r3, #4294967295
   23496:	480a      	ldr	r0, [pc, #40]	; (234c0 <ecc_thread+0x48>)
   23498:	f00c ff10 	bl	302bc <z_impl_k_sem_take>
   2349c:	f3bf 8f5b 	dmb	ish
   234a0:	4b06      	ldr	r3, [pc, #24]	; (234bc <ecc_thread+0x44>)
   234a2:	681b      	ldr	r3, [r3, #0]
   234a4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   234a8:	f013 0f01 	tst.w	r3, #1
   234ac:	d0e6      	beq.n	2347c <ecc_thread+0x4>
			emulate_le_p256_public_key_cmd();
   234ae:	f7ff ff0f 	bl	232d0 <emulate_le_p256_public_key_cmd>
   234b2:	e7ec      	b.n	2348e <ecc_thread+0x16>
			emulate_le_generate_dhkey();
   234b4:	f7ff ff60 	bl	23378 <emulate_le_generate_dhkey>
	while (true) {
   234b8:	e7e9      	b.n	2348e <ecc_thread+0x16>
   234ba:	bf00      	nop
   234bc:	200081d4 	.word	0x200081d4
   234c0:	20000b20 	.word	0x20000b20

000234c4 <bt_hci_ecc_send>:

int bt_hci_ecc_send(struct net_buf *buf)
{
   234c4:	b510      	push	{r4, lr}
   234c6:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   234c8:	7d03      	ldrb	r3, [r0, #20]
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   234ca:	bb7b      	cbnz	r3, 2352c <bt_hci_ecc_send+0x68>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   234cc:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   234ce:	881b      	ldrh	r3, [r3, #0]
   234d0:	f242 0226 	movw	r2, #8230	; 0x2026
   234d4:	4293      	cmp	r3, r2
   234d6:	d01e      	beq.n	23516 <bt_hci_ecc_send+0x52>
   234d8:	d810      	bhi.n	234fc <bt_hci_ecc_send+0x38>
   234da:	f242 0201 	movw	r2, #8193	; 0x2001
   234de:	4293      	cmp	r3, r2
   234e0:	d022      	beq.n	23528 <bt_hci_ecc_send+0x64>
   234e2:	f242 0225 	movw	r2, #8229	; 0x2025
   234e6:	4293      	cmp	r3, r2
   234e8:	d120      	bne.n	2352c <bt_hci_ecc_send+0x68>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   234ea:	2103      	movs	r1, #3
   234ec:	3008      	adds	r0, #8
   234ee:	f017 fb09 	bl	3ab04 <net_buf_simple_pull>
		case BT_HCI_OP_LE_P256_PUBLIC_KEY:
			net_buf_pull(buf, sizeof(*chdr));
			le_p256_pub_key(buf);
   234f2:	4620      	mov	r0, r4
   234f4:	f7ff fe2c 	bl	23150 <le_p256_pub_key>
			return 0;
   234f8:	2000      	movs	r0, #0
   234fa:	e01d      	b.n	23538 <bt_hci_ecc_send+0x74>
		switch (sys_le16_to_cpu(chdr->opcode)) {
   234fc:	f242 025e 	movw	r2, #8286	; 0x205e
   23500:	4293      	cmp	r3, r2
   23502:	d113      	bne.n	2352c <bt_hci_ecc_send+0x68>
   23504:	2103      	movs	r1, #3
   23506:	3008      	adds	r0, #8
   23508:	f017 fafc 	bl	3ab04 <net_buf_simple_pull>
			net_buf_pull(buf, sizeof(*chdr));
			le_gen_dhkey_v1(buf);
			return 0;
		case BT_HCI_OP_LE_GENERATE_DHKEY_V2:
			net_buf_pull(buf, sizeof(*chdr));
			le_gen_dhkey_v2(buf);
   2350c:	4620      	mov	r0, r4
   2350e:	f013 fd1d 	bl	36f4c <le_gen_dhkey_v2>
			return 0;
   23512:	2000      	movs	r0, #0
   23514:	e010      	b.n	23538 <bt_hci_ecc_send+0x74>
   23516:	2103      	movs	r1, #3
   23518:	3008      	adds	r0, #8
   2351a:	f017 faf3 	bl	3ab04 <net_buf_simple_pull>
			le_gen_dhkey_v1(buf);
   2351e:	4620      	mov	r0, r4
   23520:	f013 fd04 	bl	36f2c <le_gen_dhkey_v1>
			return 0;
   23524:	2000      	movs	r0, #0
   23526:	e007      	b.n	23538 <bt_hci_ecc_send+0x74>
		case BT_HCI_OP_LE_SET_EVENT_MASK:
			clear_ecc_events(buf);
   23528:	f013 fcd2 	bl	36ed0 <clear_ecc_events>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2352c:	4b03      	ldr	r3, [pc, #12]	; (2353c <bt_hci_ecc_send+0x78>)
   2352e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   23532:	691b      	ldr	r3, [r3, #16]
   23534:	4620      	mov	r0, r4
   23536:	4798      	blx	r3
}
   23538:	bd10      	pop	{r4, pc}
   2353a:	bf00      	nop
   2353c:	200002b0 	.word	0x200002b0

00023540 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   23540:	b510      	push	{r4, lr}
   23542:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23544:	4c0c      	ldr	r4, [pc, #48]	; (23578 <bt_hci_ecc_init+0x38>)
   23546:	2200      	movs	r2, #0
   23548:	2300      	movs	r3, #0
   2354a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2354e:	2300      	movs	r3, #0
   23550:	9304      	str	r3, [sp, #16]
   23552:	220a      	movs	r2, #10
   23554:	9203      	str	r2, [sp, #12]
   23556:	9302      	str	r3, [sp, #8]
   23558:	9301      	str	r3, [sp, #4]
   2355a:	9300      	str	r3, [sp, #0]
   2355c:	4b07      	ldr	r3, [pc, #28]	; (2357c <bt_hci_ecc_init+0x3c>)
   2355e:	f44f 628f 	mov.w	r2, #1144	; 0x478
   23562:	4907      	ldr	r1, [pc, #28]	; (23580 <bt_hci_ecc_init+0x40>)
   23564:	4620      	mov	r0, r4
   23566:	f018 fe1c 	bl	3c1a2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2356a:	4906      	ldr	r1, [pc, #24]	; (23584 <bt_hci_ecc_init+0x44>)
   2356c:	4620      	mov	r0, r4
   2356e:	f00c fc85 	bl	2fe7c <z_impl_k_thread_name_set>
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   23572:	b008      	add	sp, #32
   23574:	bd10      	pop	{r4, pc}
   23576:	bf00      	nop
   23578:	20001df8 	.word	0x20001df8
   2357c:	00023479 	.word	0x00023479
   23580:	2000ece0 	.word	0x2000ece0
   23584:	0003e98c 	.word	0x0003e98c

00023588 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   23588:	b570      	push	{r4, r5, r6, lr}
   2358a:	4605      	mov	r5, r0
   2358c:	460c      	mov	r4, r1
	switch (src->type) {
   2358e:	7803      	ldrb	r3, [r0, #0]
   23590:	2b01      	cmp	r3, #1
   23592:	d010      	beq.n	235b6 <uuid_to_uuid128+0x2e>
   23594:	2b02      	cmp	r3, #2
   23596:	d020      	beq.n	235da <uuid_to_uuid128+0x52>
   23598:	b103      	cbz	r3, 2359c <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2359a:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
   2359c:	4e12      	ldr	r6, [pc, #72]	; (235e8 <uuid_to_uuid128+0x60>)
   2359e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   235a0:	6020      	str	r0, [r4, #0]
   235a2:	6061      	str	r1, [r4, #4]
   235a4:	60a2      	str	r2, [r4, #8]
   235a6:	60e3      	str	r3, [r4, #12]
   235a8:	7833      	ldrb	r3, [r6, #0]
   235aa:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   235ac:	886b      	ldrh	r3, [r5, #2]
	dst[0] = val;
   235ae:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   235b0:	0a1b      	lsrs	r3, r3, #8
   235b2:	73a3      	strb	r3, [r4, #14]
}
   235b4:	e7f1      	b.n	2359a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   235b6:	4e0c      	ldr	r6, [pc, #48]	; (235e8 <uuid_to_uuid128+0x60>)
   235b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   235ba:	6020      	str	r0, [r4, #0]
   235bc:	6061      	str	r1, [r4, #4]
   235be:	60a2      	str	r2, [r4, #8]
   235c0:	60e3      	str	r3, [r4, #12]
   235c2:	7833      	ldrb	r3, [r6, #0]
   235c4:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   235c6:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   235c8:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   235ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
   235ce:	73a2      	strb	r2, [r4, #14]
	sys_put_le16(val >> 16, &dst[2]);
   235d0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   235d2:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   235d4:	0e1b      	lsrs	r3, r3, #24
   235d6:	7423      	strb	r3, [r4, #16]
}
   235d8:	e7df      	b.n	2359a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   235da:	2211      	movs	r2, #17
   235dc:	4601      	mov	r1, r0
   235de:	4620      	mov	r0, r4
   235e0:	f013 fbc0 	bl	36d64 <memcpy>
		return;
   235e4:	e7d9      	b.n	2359a <uuid_to_uuid128+0x12>
   235e6:	bf00      	nop
   235e8:	0003ea70 	.word	0x0003ea70

000235ec <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   235ec:	b538      	push	{r3, r4, r5, lr}
   235ee:	4604      	mov	r4, r0
	return net_buf_alloc_fixed(pool, timeout);
   235f0:	4805      	ldr	r0, [pc, #20]	; (23608 <bt_buf_get_rx+0x1c>)
   235f2:	f017 f9db 	bl	3a9ac <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   235f6:	4605      	mov	r5, r0
   235f8:	b120      	cbz	r0, 23604 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   235fa:	2100      	movs	r1, #0
   235fc:	3008      	adds	r0, #8
   235fe:	f017 f9fd 	bl	3a9fc <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   23602:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   23604:	4628      	mov	r0, r5
   23606:	bd38      	pop	{r3, r4, r5, pc}
   23608:	20000c60 	.word	0x20000c60

0002360c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2360c:	b510      	push	{r4, lr}
   2360e:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   23610:	4b0a      	ldr	r3, [pc, #40]	; (2363c <bt_buf_get_cmd_complete+0x30>)
   23612:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   23616:	b158      	cbz	r0, 23630 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   23618:	f017 fa27 	bl	3aa6a <net_buf_ref>
   2361c:	4604      	mov	r4, r0
   2361e:	2301      	movs	r3, #1
   23620:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   23622:	2100      	movs	r1, #0
   23624:	8181      	strh	r1, [r0, #12]
   23626:	3008      	adds	r0, #8
   23628:	f017 f9e8 	bl	3a9fc <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2362c:	4620      	mov	r0, r4
   2362e:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   23630:	460b      	mov	r3, r1
   23632:	2001      	movs	r0, #1
   23634:	f7ff ffda 	bl	235ec <bt_buf_get_rx>
   23638:	4604      	mov	r4, r0
   2363a:	e7f7      	b.n	2362c <bt_buf_get_cmd_complete+0x20>
   2363c:	200002b0 	.word	0x200002b0

00023640 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   23640:	b510      	push	{r4, lr}
	switch (evt) {
   23642:	280f      	cmp	r0, #15
   23644:	d90d      	bls.n	23662 <bt_buf_get_evt+0x22>
   23646:	2813      	cmp	r0, #19
   23648:	d10d      	bne.n	23666 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   2364a:	4814      	ldr	r0, [pc, #80]	; (2369c <bt_buf_get_evt+0x5c>)
   2364c:	f017 f9ae 	bl	3a9ac <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   23650:	4604      	mov	r4, r0
   23652:	b198      	cbz	r0, 2367c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   23654:	2100      	movs	r1, #0
   23656:	3008      	adds	r0, #8
   23658:	f017 f9d0 	bl	3a9fc <net_buf_simple_reserve>
   2365c:	2301      	movs	r3, #1
   2365e:	7523      	strb	r3, [r4, #20]
}
   23660:	e00c      	b.n	2367c <bt_buf_get_evt+0x3c>
	switch (evt) {
   23662:	280e      	cmp	r0, #14
   23664:	d205      	bcs.n	23672 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   23666:	b959      	cbnz	r1, 23680 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   23668:	2001      	movs	r0, #1
   2366a:	f7ff ffbf 	bl	235ec <bt_buf_get_rx>
   2366e:	4604      	mov	r4, r0
   23670:	e004      	b.n	2367c <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   23672:	4610      	mov	r0, r2
   23674:	4619      	mov	r1, r3
   23676:	f7ff ffc9 	bl	2360c <bt_buf_get_cmd_complete>
   2367a:	4604      	mov	r4, r0
	}
}
   2367c:	4620      	mov	r0, r4
   2367e:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   23680:	4807      	ldr	r0, [pc, #28]	; (236a0 <bt_buf_get_evt+0x60>)
   23682:	f017 f993 	bl	3a9ac <net_buf_alloc_fixed>
			if (buf) {
   23686:	4604      	mov	r4, r0
   23688:	2800      	cmp	r0, #0
   2368a:	d0f7      	beq.n	2367c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   2368c:	2100      	movs	r1, #0
   2368e:	3008      	adds	r0, #8
   23690:	f017 f9b4 	bl	3a9fc <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   23694:	2301      	movs	r3, #1
   23696:	7523      	strb	r3, [r4, #20]
			return buf;
   23698:	e7f0      	b.n	2367c <bt_buf_get_evt+0x3c>
   2369a:	bf00      	nop
   2369c:	20000c8c 	.word	0x20000c8c
   236a0:	20000bdc 	.word	0x20000bdc

000236a4 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   236a4:	2300      	movs	r3, #0
   236a6:	e000      	b.n	236aa <conn_handle_disconnected+0x6>
   236a8:	3301      	adds	r3, #1
   236aa:	2b13      	cmp	r3, #19
   236ac:	dc0a      	bgt.n	236c4 <conn_handle_disconnected+0x20>
		if (!disconnected_handles[i]) {
   236ae:	4a06      	ldr	r2, [pc, #24]	; (236c8 <conn_handle_disconnected+0x24>)
   236b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   236b4:	2a00      	cmp	r2, #0
   236b6:	d1f7      	bne.n	236a8 <conn_handle_disconnected+0x4>
			/* Use invalid connection handle bits so that connection
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   236b8:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   236bc:	4902      	ldr	r1, [pc, #8]	; (236c8 <conn_handle_disconnected+0x24>)
   236be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   236c2:	e7f1      	b.n	236a8 <conn_handle_disconnected+0x4>
		}
	}
}
   236c4:	4770      	bx	lr
   236c6:	bf00      	nop
   236c8:	200081f0 	.word	0x200081f0

000236cc <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   236cc:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   236d0:	2300      	movs	r3, #0
   236d2:	2b13      	cmp	r3, #19
   236d4:	dc0c      	bgt.n	236f0 <conn_handle_is_disconnected+0x24>
		if (disconnected_handles[i] == handle) {
   236d6:	4a07      	ldr	r2, [pc, #28]	; (236f4 <conn_handle_is_disconnected+0x28>)
   236d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   236dc:	4282      	cmp	r2, r0
   236de:	d001      	beq.n	236e4 <conn_handle_is_disconnected+0x18>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   236e0:	3301      	adds	r3, #1
   236e2:	e7f6      	b.n	236d2 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   236e4:	4a03      	ldr	r2, [pc, #12]	; (236f4 <conn_handle_is_disconnected+0x28>)
   236e6:	2100      	movs	r1, #0
   236e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   236ec:	2001      	movs	r0, #1
   236ee:	4770      	bx	lr
		}
	}

	return false;
   236f0:	2000      	movs	r0, #0
}
   236f2:	4770      	bx	lr
   236f4:	200081f0 	.word	0x200081f0

000236f8 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   236f8:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   236fa:	7851      	ldrb	r1, [r2, #1]
   236fc:	4b08      	ldr	r3, [pc, #32]	; (23720 <read_local_ver_complete+0x28>)
   236fe:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   23702:	8851      	ldrh	r1, [r2, #2]
   23704:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   23708:	7911      	ldrb	r1, [r2, #4]
   2370a:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   2370e:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   23712:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   23716:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   2371a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   2371e:	4770      	bx	lr
   23720:	200002b0 	.word	0x200002b0

00023724 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   23724:	6883      	ldr	r3, [r0, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   23726:	7a19      	ldrb	r1, [r3, #8]
   23728:	79da      	ldrb	r2, [r3, #7]
   2372a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   2372e:	7998      	ldrb	r0, [r3, #6]
   23730:	795a      	ldrb	r2, [r3, #5]
   23732:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23736:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   2373a:	7918      	ldrb	r0, [r3, #4]
   2373c:	78d9      	ldrb	r1, [r3, #3]
   2373e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   23742:	7898      	ldrb	r0, [r3, #2]
   23744:	785b      	ldrb	r3, [r3, #1]
   23746:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2374a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   2374e:	4903      	ldr	r1, [pc, #12]	; (2375c <le_read_supp_states_complete+0x38>)
   23750:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   23754:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   23758:	4770      	bx	lr
   2375a:	bf00      	nop
   2375c:	200002b0 	.word	0x200002b0

00023760 <le_read_resolving_list_size_complete>:

#if defined(CONFIG_BT_SMP)
static void le_read_resolving_list_size_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_rl_size *rp = (void *)buf->data;
   23760:	6883      	ldr	r3, [r0, #8]

	BT_DBG("Resolving List size %u", rp->rl_size);

	bt_dev.le.rl_size = rp->rl_size;
   23762:	785a      	ldrb	r2, [r3, #1]
   23764:	4b01      	ldr	r3, [pc, #4]	; (2376c <le_read_resolving_list_size_complete+0xc>)
   23766:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   2376a:	4770      	bx	lr
   2376c:	200002b0 	.word	0x200002b0

00023770 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   23770:	b470      	push	{r4, r5, r6}
   23772:	b08f      	sub	sp, #60	; 0x3c
   23774:	4606      	mov	r6, r0
	const char * const str[] = {
   23776:	ac01      	add	r4, sp, #4
   23778:	4d0a      	ldr	r5, [pc, #40]	; (237a4 <ver_str+0x34>)
   2377a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2377c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2377e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   23780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   23782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   23784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   23786:	682b      	ldr	r3, [r5, #0]
   23788:	6023      	str	r3, [r4, #0]
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
   2378a:	2e0c      	cmp	r6, #12
   2378c:	d903      	bls.n	23796 <ver_str+0x26>
		return str[ver];
	}

	return "unknown";
   2378e:	4806      	ldr	r0, [pc, #24]	; (237a8 <ver_str+0x38>)
}
   23790:	b00f      	add	sp, #60	; 0x3c
   23792:	bc70      	pop	{r4, r5, r6}
   23794:	4770      	bx	lr
		return str[ver];
   23796:	ab0e      	add	r3, sp, #56	; 0x38
   23798:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2379c:	f856 0c34 	ldr.w	r0, [r6, #-52]
   237a0:	e7f6      	b.n	23790 <ver_str+0x20>
   237a2:	bf00      	nop
   237a4:	0003d3b4 	.word	0x0003d3b4
   237a8:	0003ebc0 	.word	0x0003ebc0

000237ac <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
   237ac:	2803      	cmp	r0, #3
   237ae:	d901      	bls.n	237b4 <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
   237b0:	4802      	ldr	r0, [pc, #8]	; (237bc <vs_hw_platform+0x10>)
}
   237b2:	4770      	bx	lr
		return plat_str[platform];
   237b4:	4b02      	ldr	r3, [pc, #8]	; (237c0 <vs_hw_platform+0x14>)
   237b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   237ba:	4770      	bx	lr
   237bc:	0003ebc0 	.word	0x0003ebc0
   237c0:	0003f2f4 	.word	0x0003f2f4

000237c4 <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   237c4:	2802      	cmp	r0, #2
   237c6:	d107      	bne.n	237d8 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
   237c8:	2903      	cmp	r1, #3
   237ca:	d901      	bls.n	237d0 <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
   237cc:	4803      	ldr	r0, [pc, #12]	; (237dc <vs_hw_variant+0x18>)
}
   237ce:	4770      	bx	lr
		return nordic_str[variant];
   237d0:	4b03      	ldr	r3, [pc, #12]	; (237e0 <vs_hw_variant+0x1c>)
   237d2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   237d6:	4770      	bx	lr
		return "unknown";
   237d8:	4800      	ldr	r0, [pc, #0]	; (237dc <vs_hw_variant+0x18>)
   237da:	4770      	bx	lr
   237dc:	0003ebc0 	.word	0x0003ebc0
   237e0:	0003f2b4 	.word	0x0003f2b4

000237e4 <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
   237e4:	2803      	cmp	r0, #3
   237e6:	d901      	bls.n	237ec <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
   237e8:	4802      	ldr	r0, [pc, #8]	; (237f4 <vs_fw_variant+0x10>)
}
   237ea:	4770      	bx	lr
		return var_str[variant];
   237ec:	4b02      	ldr	r3, [pc, #8]	; (237f8 <vs_fw_variant+0x14>)
   237ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   237f2:	4770      	bx	lr
   237f4:	0003ebc0 	.word	0x0003ebc0
   237f8:	0003f32c 	.word	0x0003f32c

000237fc <hci_reset_complete>:
{
   237fc:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   237fe:	6883      	ldr	r3, [r0, #8]
   23800:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   23802:	b9a3      	cbnz	r3, 2382e <hci_reset_complete+0x32>
		bt_scan_reset();
   23804:	f002 fcea 	bl	261dc <bt_scan_reset>
   23808:	f3bf 8f5b 	dmb	ish
   2380c:	4b08      	ldr	r3, [pc, #32]	; (23830 <hci_reset_complete+0x34>)
   2380e:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   23812:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   23816:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2381a:	f3bf 8f5b 	dmb	ish
   2381e:	e853 1f00 	ldrex	r1, [r3]
   23822:	e843 2000 	strex	r0, r2, [r3]
   23826:	2800      	cmp	r0, #0
   23828:	d1f9      	bne.n	2381e <hci_reset_complete+0x22>
   2382a:	f3bf 8f5b 	dmb	ish
}
   2382e:	bd08      	pop	{r3, pc}
   23830:	200002b0 	.word	0x200002b0

00023834 <read_local_features_complete>:
{
   23834:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   23836:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   23838:	2208      	movs	r2, #8
   2383a:	3101      	adds	r1, #1
   2383c:	4801      	ldr	r0, [pc, #4]	; (23844 <read_local_features_complete+0x10>)
   2383e:	f013 fa91 	bl	36d64 <memcpy>
}
   23842:	bd08      	pop	{r3, pc}
   23844:	20000320 	.word	0x20000320

00023848 <read_le_features_complete>:
{
   23848:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   2384a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   2384c:	2208      	movs	r2, #8
   2384e:	3101      	adds	r1, #1
   23850:	4801      	ldr	r0, [pc, #4]	; (23858 <read_le_features_complete+0x10>)
   23852:	f013 fa87 	bl	36d64 <memcpy>
}
   23856:	bd08      	pop	{r3, pc}
   23858:	20000380 	.word	0x20000380

0002385c <read_supported_commands_complete>:
{
   2385c:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   2385e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   23860:	4c04      	ldr	r4, [pc, #16]	; (23874 <read_supported_commands_complete+0x18>)
   23862:	2240      	movs	r2, #64	; 0x40
   23864:	3101      	adds	r1, #1
   23866:	4620      	mov	r0, r4
   23868:	f013 fa7c 	bl	36d64 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   2386c:	4620      	mov	r0, r4
   2386e:	f013 fb7e 	bl	36f6e <bt_hci_ecc_supported_commands>
}
   23872:	bd10      	pop	{r4, pc}
   23874:	20000328 	.word	0x20000328

00023878 <le_read_buffer_size_complete>:
{
   23878:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   2387a:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   2387c:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   23880:	b299      	uxth	r1, r3
   23882:	4806      	ldr	r0, [pc, #24]	; (2389c <le_read_buffer_size_complete+0x24>)
   23884:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   23888:	b901      	cbnz	r1, 2388c <le_read_buffer_size_complete+0x14>
}
   2388a:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   2388c:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2388e:	460a      	mov	r2, r1
   23890:	f500 7080 	add.w	r0, r0, #256	; 0x100
   23894:	f018 fdab 	bl	3c3ee <z_impl_k_sem_init>
   23898:	e7f7      	b.n	2388a <le_read_buffer_size_complete+0x12>
   2389a:	bf00      	nop
   2389c:	200002b0 	.word	0x200002b0

000238a0 <read_buffer_size_complete>:
{
   238a0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   238a2:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   238a4:	4b08      	ldr	r3, [pc, #32]	; (238c8 <read_buffer_size_complete+0x28>)
   238a6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   238aa:	b103      	cbz	r3, 238ae <read_buffer_size_complete+0xe>
}
   238ac:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   238ae:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   238b2:	4805      	ldr	r0, [pc, #20]	; (238c8 <read_buffer_size_complete+0x28>)
   238b4:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   238b8:	8891      	ldrh	r1, [r2, #4]
   238ba:	460a      	mov	r2, r1
   238bc:	f500 7080 	add.w	r0, r0, #256	; 0x100
   238c0:	f018 fd95 	bl	3c3ee <z_impl_k_sem_init>
   238c4:	e7f2      	b.n	238ac <read_buffer_size_complete+0xc>
   238c6:	bf00      	nop
   238c8:	200002b0 	.word	0x200002b0

000238cc <hci_data_buf_overflow>:
{
   238cc:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   238ce:	6881      	ldr	r1, [r0, #8]
   238d0:	4b08      	ldr	r3, [pc, #32]	; (238f4 <hci_data_buf_overflow+0x28>)
   238d2:	4a09      	ldr	r2, [pc, #36]	; (238f8 <hci_data_buf_overflow+0x2c>)
   238d4:	1a9b      	subs	r3, r3, r2
   238d6:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   238d8:	f04f 0200 	mov.w	r2, #0
   238dc:	2002      	movs	r0, #2
   238de:	f360 0202 	bfi	r2, r0, #0, #3
   238e2:	f36f 02c5 	bfc	r2, #3, #3
   238e6:	f363 128f 	bfi	r2, r3, #6, #10
   238ea:	7809      	ldrb	r1, [r1, #0]
   238ec:	4803      	ldr	r0, [pc, #12]	; (238fc <hci_data_buf_overflow+0x30>)
   238ee:	f7fc fcdb 	bl	202a8 <log_1>
}
   238f2:	bd08      	pop	{r3, pc}
   238f4:	0003d1dc 	.word	0x0003d1dc
   238f8:	0003d1a4 	.word	0x0003d1a4
   238fc:	0003ebc8 	.word	0x0003ebc8

00023900 <le_conn_complete_cancel>:
{
   23900:	b510      	push	{r4, lr}
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   23902:	2100      	movs	r1, #0
   23904:	4608      	mov	r0, r1
   23906:	f013 fbca 	bl	3709e <find_pending_connect>
	if (!conn) {
   2390a:	b188      	cbz	r0, 23930 <le_conn_complete_cancel+0x30>
   2390c:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   2390e:	2302      	movs	r3, #2
   23910:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   23912:	2100      	movs	r1, #0
   23914:	f003 fb0c 	bl	26f30 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23918:	f3bf 8f5b 	dmb	ish
   2391c:	6863      	ldr	r3, [r4, #4]
   2391e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   23922:	f013 0f01 	tst.w	r3, #1
   23926:	d114      	bne.n	23952 <le_conn_complete_cancel+0x52>
	bt_conn_unref(conn);
   23928:	4620      	mov	r0, r4
   2392a:	f013 ff39 	bl	377a0 <bt_conn_unref>
}
   2392e:	bd10      	pop	{r4, pc}
   23930:	4b0a      	ldr	r3, [pc, #40]	; (2395c <le_conn_complete_cancel+0x5c>)
   23932:	4a0b      	ldr	r2, [pc, #44]	; (23960 <le_conn_complete_cancel+0x60>)
   23934:	1a9b      	subs	r3, r3, r2
   23936:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending central connection");
   23938:	f04f 0100 	mov.w	r1, #0
   2393c:	2201      	movs	r2, #1
   2393e:	f362 0102 	bfi	r1, r2, #0, #3
   23942:	f36f 01c5 	bfc	r1, #3, #3
   23946:	f363 118f 	bfi	r1, r3, #6, #10
   2394a:	4806      	ldr	r0, [pc, #24]	; (23964 <le_conn_complete_cancel+0x64>)
   2394c:	f7fc fd62 	bl	20414 <log_0>
		return;
   23950:	e7ed      	b.n	2392e <le_conn_complete_cancel+0x2e>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   23952:	2102      	movs	r1, #2
   23954:	4620      	mov	r0, r4
   23956:	f003 faeb 	bl	26f30 <bt_conn_set_state>
   2395a:	e7e5      	b.n	23928 <le_conn_complete_cancel+0x28>
   2395c:	0003d1dc 	.word	0x0003d1dc
   23960:	0003d1a4 	.word	0x0003d1a4
   23964:	0003ebf0 	.word	0x0003ebf0

00023968 <hci_disconn_complete>:
{
   23968:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2396a:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2396c:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   23970:	7823      	ldrb	r3, [r4, #0]
   23972:	b103      	cbz	r3, 23976 <hci_disconn_complete+0xe>
}
   23974:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   23976:	4630      	mov	r0, r6
   23978:	f003 fad0 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   2397c:	4605      	mov	r5, r0
   2397e:	b158      	cbz	r0, 23998 <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   23980:	78e3      	ldrb	r3, [r4, #3]
   23982:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   23984:	2100      	movs	r1, #0
   23986:	f003 fad3 	bl	26f30 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   2398a:	78ab      	ldrb	r3, [r5, #2]
   2398c:	2b01      	cmp	r3, #1
   2398e:	d015      	beq.n	239bc <hci_disconn_complete+0x54>
		bt_conn_unref(conn);
   23990:	4628      	mov	r0, r5
   23992:	f013 ff05 	bl	377a0 <bt_conn_unref>
		return;
   23996:	e7ed      	b.n	23974 <hci_disconn_complete+0xc>
   23998:	4b12      	ldr	r3, [pc, #72]	; (239e4 <hci_disconn_complete+0x7c>)
   2399a:	4a13      	ldr	r2, [pc, #76]	; (239e8 <hci_disconn_complete+0x80>)
   2399c:	1a9b      	subs	r3, r3, r2
   2399e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   239a0:	f04f 0200 	mov.w	r2, #0
   239a4:	2101      	movs	r1, #1
   239a6:	f361 0202 	bfi	r2, r1, #0, #3
   239aa:	f36f 02c5 	bfc	r2, #3, #3
   239ae:	f363 128f 	bfi	r2, r3, #6, #10
   239b2:	4631      	mov	r1, r6
   239b4:	480d      	ldr	r0, [pc, #52]	; (239ec <hci_disconn_complete+0x84>)
   239b6:	f7fc fc77 	bl	202a8 <log_1>
		return;
   239ba:	e7db      	b.n	23974 <hci_disconn_complete+0xc>
   239bc:	f3bf 8f5b 	dmb	ish
   239c0:	686b      	ldr	r3, [r5, #4]
   239c2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   239c6:	f013 0f01 	tst.w	r3, #1
   239ca:	d103      	bne.n	239d4 <hci_disconn_complete+0x6c>
	bt_conn_unref(conn);
   239cc:	4628      	mov	r0, r5
   239ce:	f013 fee7 	bl	377a0 <bt_conn_unref>
   239d2:	e7cf      	b.n	23974 <hci_disconn_complete+0xc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   239d4:	2102      	movs	r1, #2
   239d6:	4628      	mov	r0, r5
   239d8:	f003 faaa 	bl	26f30 <bt_conn_set_state>
		bt_le_scan_update(false);
   239dc:	2000      	movs	r0, #0
   239de:	f002 fc5d 	bl	2629c <bt_le_scan_update>
   239e2:	e7f3      	b.n	239cc <hci_disconn_complete+0x64>
   239e4:	0003d1dc 	.word	0x0003d1dc
   239e8:	0003d1a4 	.word	0x0003d1a4
   239ec:	0003ec10 	.word	0x0003ec10

000239f0 <le_data_len_change>:
{
   239f0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   239f2:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   239f4:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   239f6:	4620      	mov	r0, r4
   239f8:	f003 fa90 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   239fc:	b110      	cbz	r0, 23a04 <le_data_len_change+0x14>
	bt_conn_unref(conn);
   239fe:	f013 fecf 	bl	377a0 <bt_conn_unref>
}
   23a02:	bd10      	pop	{r4, pc}
   23a04:	4b08      	ldr	r3, [pc, #32]	; (23a28 <le_data_len_change+0x38>)
   23a06:	4a09      	ldr	r2, [pc, #36]	; (23a2c <le_data_len_change+0x3c>)
   23a08:	1a9b      	subs	r3, r3, r2
   23a0a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   23a0c:	f04f 0200 	mov.w	r2, #0
   23a10:	2101      	movs	r1, #1
   23a12:	f361 0202 	bfi	r2, r1, #0, #3
   23a16:	f36f 02c5 	bfc	r2, #3, #3
   23a1a:	f363 128f 	bfi	r2, r3, #6, #10
   23a1e:	4621      	mov	r1, r4
   23a20:	4803      	ldr	r0, [pc, #12]	; (23a30 <le_data_len_change+0x40>)
   23a22:	f7fc fc41 	bl	202a8 <log_1>
		return;
   23a26:	e7ec      	b.n	23a02 <le_data_len_change+0x12>
   23a28:	0003d1dc 	.word	0x0003d1dc
   23a2c:	0003d1a4 	.word	0x0003d1a4
   23a30:	0003ec38 	.word	0x0003ec38

00023a34 <hci_num_completed_packets>:
{
   23a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   23a38:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   23a3c:	2700      	movs	r7, #0
   23a3e:	e05c      	b.n	23afa <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   23a40:	3b01      	subs	r3, #1
   23a42:	61e3      	str	r3, [r4, #28]
   23a44:	f382 8811 	msr	BASEPRI, r2
   23a48:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   23a4c:	4620      	mov	r0, r4
   23a4e:	f003 f851 	bl	26af4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   23a52:	f00c fc0b 	bl	3026c <z_impl_k_sem_give>
				continue;
   23a56:	e025      	b.n	23aa4 <hci_num_completed_packets+0x70>
	list->tail = node;
   23a58:	61a1      	str	r1, [r4, #24]
   23a5a:	f382 8811 	msr	BASEPRI, r2
   23a5e:	f3bf 8f6f 	isb	sy
			if (!node) {
   23a62:	2b00      	cmp	r3, #0
   23a64:	d036      	beq.n	23ad4 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   23a66:	f04f 0240 	mov.w	r2, #64	; 0x40
   23a6a:	f3ef 8111 	mrs	r1, BASEPRI
   23a6e:	f382 8812 	msr	BASEPRI_MAX, r2
   23a72:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   23a76:	68da      	ldr	r2, [r3, #12]
   23a78:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   23a7a:	2200      	movs	r2, #0
   23a7c:	60da      	str	r2, [r3, #12]
	parent->next = child;
   23a7e:	601a      	str	r2, [r3, #0]
	return list->tail;
   23a80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   23a82:	2a00      	cmp	r2, #0
   23a84:	d05a      	beq.n	23b3c <hci_num_completed_packets+0x108>
	parent->next = child;
   23a86:	6013      	str	r3, [r2, #0]
	list->tail = node;
   23a88:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   23a8a:	f381 8811 	msr	BASEPRI, r1
   23a8e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   23a92:	f104 0028 	add.w	r0, r4, #40	; 0x28
   23a96:	f00c fdd7 	bl	30648 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   23a9a:	4620      	mov	r0, r4
   23a9c:	f003 f82a 	bl	26af4 <bt_conn_get_pkts>
   23aa0:	f00c fbe4 	bl	3026c <z_impl_k_sem_give>
{
   23aa4:	462e      	mov	r6, r5
		while (count--) {
   23aa6:	1e75      	subs	r5, r6, #1
   23aa8:	b2ad      	uxth	r5, r5
   23aaa:	b316      	cbz	r6, 23af2 <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   23aac:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ab0:	f3ef 8211 	mrs	r2, BASEPRI
   23ab4:	f383 8812 	msr	BASEPRI_MAX, r3
   23ab8:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   23abc:	69e3      	ldr	r3, [r4, #28]
   23abe:	2b00      	cmp	r3, #0
   23ac0:	d1be      	bne.n	23a40 <hci_num_completed_packets+0xc>
	return list->head;
   23ac2:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   23ac4:	2b00      	cmp	r3, #0
   23ac6:	d0c8      	beq.n	23a5a <hci_num_completed_packets+0x26>
	return node->next;
   23ac8:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   23aca:	6161      	str	r1, [r4, #20]
	return list->tail;
   23acc:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23ace:	4298      	cmp	r0, r3
   23ad0:	d1c3      	bne.n	23a5a <hci_num_completed_packets+0x26>
   23ad2:	e7c1      	b.n	23a58 <hci_num_completed_packets+0x24>
   23ad4:	4b1c      	ldr	r3, [pc, #112]	; (23b48 <hci_num_completed_packets+0x114>)
   23ad6:	4a1d      	ldr	r2, [pc, #116]	; (23b4c <hci_num_completed_packets+0x118>)
   23ad8:	1a9b      	subs	r3, r3, r2
   23ada:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   23adc:	2201      	movs	r2, #1
   23ade:	f362 0902 	bfi	r9, r2, #0, #3
   23ae2:	f36f 09c5 	bfc	r9, #3, #3
   23ae6:	f363 198f 	bfi	r9, r3, #6, #10
   23aea:	4649      	mov	r1, r9
   23aec:	4818      	ldr	r0, [pc, #96]	; (23b50 <hci_num_completed_packets+0x11c>)
   23aee:	f7fc fc91 	bl	20414 <log_0>
		bt_conn_unref(conn);
   23af2:	4620      	mov	r0, r4
   23af4:	f013 fe54 	bl	377a0 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   23af8:	3701      	adds	r7, #1
   23afa:	f898 3000 	ldrb.w	r3, [r8]
   23afe:	429f      	cmp	r7, r3
   23b00:	da1f      	bge.n	23b42 <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   23b02:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   23b06:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   23b0a:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   23b0e:	4628      	mov	r0, r5
   23b10:	f003 fa04 	bl	26f1c <bt_conn_lookup_handle>
		if (!conn) {
   23b14:	4604      	mov	r4, r0
   23b16:	2800      	cmp	r0, #0
   23b18:	d1c5      	bne.n	23aa6 <hci_num_completed_packets+0x72>
   23b1a:	4b0b      	ldr	r3, [pc, #44]	; (23b48 <hci_num_completed_packets+0x114>)
   23b1c:	4a0b      	ldr	r2, [pc, #44]	; (23b4c <hci_num_completed_packets+0x118>)
   23b1e:	1a9b      	subs	r3, r3, r2
   23b20:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   23b22:	2201      	movs	r2, #1
   23b24:	f362 0a02 	bfi	sl, r2, #0, #3
   23b28:	f36f 0ac5 	bfc	sl, #3, #3
   23b2c:	f363 1a8f 	bfi	sl, r3, #6, #10
   23b30:	4652      	mov	r2, sl
   23b32:	4629      	mov	r1, r5
   23b34:	4807      	ldr	r0, [pc, #28]	; (23b54 <hci_num_completed_packets+0x120>)
   23b36:	f7fc fbb7 	bl	202a8 <log_1>
			continue;
   23b3a:	e7dd      	b.n	23af8 <hci_num_completed_packets+0xc4>
	list->tail = node;
   23b3c:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   23b3e:	6223      	str	r3, [r4, #32]
}
   23b40:	e7a3      	b.n	23a8a <hci_num_completed_packets+0x56>
}
   23b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23b46:	bf00      	nop
   23b48:	0003d1dc 	.word	0x0003d1dc
   23b4c:	0003d1a4 	.word	0x0003d1a4
   23b50:	0003ec78 	.word	0x0003ec78
   23b54:	0003ec5c 	.word	0x0003ec5c

00023b58 <hci_cmd_done>:
{
   23b58:	b570      	push	{r4, r5, r6, lr}
   23b5a:	b084      	sub	sp, #16
   23b5c:	4605      	mov	r5, r0
   23b5e:	460e      	mov	r6, r1
   23b60:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   23b62:	7990      	ldrb	r0, [r2, #6]
   23b64:	f009 f8cc 	bl	2cd00 <net_buf_pool_get>
   23b68:	4b55      	ldr	r3, [pc, #340]	; (23cc0 <hci_cmd_done+0x168>)
   23b6a:	4283      	cmp	r3, r0
   23b6c:	d01c      	beq.n	23ba8 <hci_cmd_done+0x50>
   23b6e:	4b55      	ldr	r3, [pc, #340]	; (23cc4 <hci_cmd_done+0x16c>)
   23b70:	4a55      	ldr	r2, [pc, #340]	; (23cc8 <hci_cmd_done+0x170>)
   23b72:	1a9b      	subs	r3, r3, r2
   23b74:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   23b76:	f04f 0600 	mov.w	r6, #0
   23b7a:	2202      	movs	r2, #2
   23b7c:	f362 0602 	bfi	r6, r2, #0, #3
   23b80:	f36f 06c5 	bfc	r6, #3, #3
   23b84:	f363 168f 	bfi	r6, r3, #6, #10
   23b88:	9500      	str	r5, [sp, #0]
   23b8a:	79a0      	ldrb	r0, [r4, #6]
   23b8c:	9001      	str	r0, [sp, #4]
   23b8e:	f009 f8b7 	bl	2cd00 <net_buf_pool_get>
   23b92:	9002      	str	r0, [sp, #8]
   23b94:	4b4a      	ldr	r3, [pc, #296]	; (23cc0 <hci_cmd_done+0x168>)
   23b96:	9303      	str	r3, [sp, #12]
   23b98:	4633      	mov	r3, r6
   23b9a:	2204      	movs	r2, #4
   23b9c:	4669      	mov	r1, sp
   23b9e:	484b      	ldr	r0, [pc, #300]	; (23ccc <hci_cmd_done+0x174>)
   23ba0:	f7fc fbf4 	bl	2038c <log_n>
}
   23ba4:	b004      	add	sp, #16
   23ba6:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   23ba8:	4620      	mov	r0, r4
   23baa:	f016 fe4c 	bl	3a846 <net_buf_id>
   23bae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   23bb2:	4b47      	ldr	r3, [pc, #284]	; (23cd0 <hci_cmd_done+0x178>)
   23bb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23bb8:	8843      	ldrh	r3, [r0, #2]
   23bba:	42ab      	cmp	r3, r5
   23bbc:	d133      	bne.n	23c26 <hci_cmd_done+0xce>
	if (bt_dev.sent_cmd) {
   23bbe:	4b45      	ldr	r3, [pc, #276]	; (23cd4 <hci_cmd_done+0x17c>)
   23bc0:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   23bc4:	b128      	cbz	r0, 23bd2 <hci_cmd_done+0x7a>
		net_buf_unref(bt_dev.sent_cmd);
   23bc6:	f016 ff2a 	bl	3aa1e <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   23bca:	4b42      	ldr	r3, [pc, #264]	; (23cd4 <hci_cmd_done+0x17c>)
   23bcc:	2200      	movs	r2, #0
   23bce:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   23bd2:	4620      	mov	r0, r4
   23bd4:	f016 fe37 	bl	3a846 <net_buf_id>
   23bd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   23bdc:	4b3c      	ldr	r3, [pc, #240]	; (23cd0 <hci_cmd_done+0x178>)
   23bde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23be2:	6843      	ldr	r3, [r0, #4]
   23be4:	b10b      	cbz	r3, 23bea <hci_cmd_done+0x92>
   23be6:	2e00      	cmp	r6, #0
   23be8:	d039      	beq.n	23c5e <hci_cmd_done+0x106>
	if (cmd(buf)->sync) {
   23bea:	4620      	mov	r0, r4
   23bec:	f016 fe2b 	bl	3a846 <net_buf_id>
   23bf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   23bf4:	4b36      	ldr	r3, [pc, #216]	; (23cd0 <hci_cmd_done+0x178>)
   23bf6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23bfa:	6883      	ldr	r3, [r0, #8]
   23bfc:	2b00      	cmp	r3, #0
   23bfe:	d0d1      	beq.n	23ba4 <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   23c00:	4620      	mov	r0, r4
   23c02:	f016 fe20 	bl	3a846 <net_buf_id>
   23c06:	4d32      	ldr	r5, [pc, #200]	; (23cd0 <hci_cmd_done+0x178>)
   23c08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   23c0c:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   23c10:	4620      	mov	r0, r4
   23c12:	f016 fe18 	bl	3a846 <net_buf_id>
   23c16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   23c1a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   23c1e:	68a8      	ldr	r0, [r5, #8]
   23c20:	f00c fb24 	bl	3026c <z_impl_k_sem_give>
}
   23c24:	e7be      	b.n	23ba4 <hci_cmd_done+0x4c>
   23c26:	4b27      	ldr	r3, [pc, #156]	; (23cc4 <hci_cmd_done+0x16c>)
   23c28:	4a27      	ldr	r2, [pc, #156]	; (23cc8 <hci_cmd_done+0x170>)
   23c2a:	1a9b      	subs	r3, r3, r2
   23c2c:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   23c2e:	f04f 0600 	mov.w	r6, #0
   23c32:	2202      	movs	r2, #2
   23c34:	f362 0602 	bfi	r6, r2, #0, #3
   23c38:	f36f 06c5 	bfc	r6, #3, #3
   23c3c:	f363 168f 	bfi	r6, r3, #6, #10
   23c40:	4620      	mov	r0, r4
   23c42:	f016 fe00 	bl	3a846 <net_buf_id>
   23c46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   23c4a:	4b21      	ldr	r3, [pc, #132]	; (23cd0 <hci_cmd_done+0x178>)
   23c4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23c50:	4633      	mov	r3, r6
   23c52:	8842      	ldrh	r2, [r0, #2]
   23c54:	4629      	mov	r1, r5
   23c56:	4820      	ldr	r0, [pc, #128]	; (23cd8 <hci_cmd_done+0x180>)
   23c58:	f7fc fb5c 	bl	20314 <log_2>
		return;
   23c5c:	e7a2      	b.n	23ba4 <hci_cmd_done+0x4c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   23c5e:	4620      	mov	r0, r4
   23c60:	f016 fdf1 	bl	3a846 <net_buf_id>
   23c64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   23c68:	4b19      	ldr	r3, [pc, #100]	; (23cd0 <hci_cmd_done+0x178>)
   23c6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23c6e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   23c70:	6813      	ldr	r3, [r2, #0]
   23c72:	6851      	ldr	r1, [r2, #4]
   23c74:	7a10      	ldrb	r0, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   23c76:	f001 051f 	and.w	r5, r1, #31
   23c7a:	2201      	movs	r2, #1
   23c7c:	40aa      	lsls	r2, r5
	if (val) {
   23c7e:	b170      	cbz	r0, 23c9e <hci_cmd_done+0x146>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   23c80:	0949      	lsrs	r1, r1, #5
   23c82:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23c86:	f3bf 8f5b 	dmb	ish
   23c8a:	e853 1f00 	ldrex	r1, [r3]
   23c8e:	4311      	orrs	r1, r2
   23c90:	e843 1000 	strex	r0, r1, [r3]
   23c94:	2800      	cmp	r0, #0
   23c96:	d1f8      	bne.n	23c8a <hci_cmd_done+0x132>
   23c98:	f3bf 8f5b 	dmb	ish
   23c9c:	e7a5      	b.n	23bea <hci_cmd_done+0x92>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23c9e:	0949      	lsrs	r1, r1, #5
   23ca0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   23ca4:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23ca6:	f3bf 8f5b 	dmb	ish
   23caa:	e853 1f00 	ldrex	r1, [r3]
   23cae:	4011      	ands	r1, r2
   23cb0:	e843 1000 	strex	r0, r1, [r3]
   23cb4:	2800      	cmp	r0, #0
   23cb6:	d1f8      	bne.n	23caa <hci_cmd_done+0x152>
   23cb8:	f3bf 8f5b 	dmb	ish
	}
}
   23cbc:	e795      	b.n	23bea <hci_cmd_done+0x92>
   23cbe:	bf00      	nop
   23cc0:	20000c34 	.word	0x20000c34
   23cc4:	0003d1dc 	.word	0x0003d1dc
   23cc8:	0003d1a4 	.word	0x0003d1a4
   23ccc:	0003ec90 	.word	0x0003ec90
   23cd0:	200081d8 	.word	0x200081d8
   23cd4:	200002b0 	.word	0x200002b0
   23cd8:	0003ecc8 	.word	0x0003ecc8

00023cdc <hci_cmd_status>:
{
   23cdc:	b538      	push	{r3, r4, r5, lr}
   23cde:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   23ce0:	2104      	movs	r1, #4
   23ce2:	3008      	adds	r0, #8
   23ce4:	f016 ff16 	bl	3ab14 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   23ce8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   23cea:	4622      	mov	r2, r4
   23cec:	7801      	ldrb	r1, [r0, #0]
   23cee:	8840      	ldrh	r0, [r0, #2]
   23cf0:	f7ff ff32 	bl	23b58 <hci_cmd_done>
	if (ncmd) {
   23cf4:	b905      	cbnz	r5, 23cf8 <hci_cmd_status+0x1c>
}
   23cf6:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   23cf8:	4801      	ldr	r0, [pc, #4]	; (23d00 <hci_cmd_status+0x24>)
   23cfa:	f00c fab7 	bl	3026c <z_impl_k_sem_give>
   23cfe:	e7fa      	b.n	23cf6 <hci_cmd_status+0x1a>
   23d00:	200003d0 	.word	0x200003d0

00023d04 <hci_cmd_complete>:
{
   23d04:	b538      	push	{r3, r4, r5, lr}
   23d06:	4604      	mov	r4, r0
   23d08:	2103      	movs	r1, #3
   23d0a:	3008      	adds	r0, #8
   23d0c:	f016 ff02 	bl	3ab14 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   23d10:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   23d12:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   23d14:	4622      	mov	r2, r4
   23d16:	7819      	ldrb	r1, [r3, #0]
   23d18:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   23d1c:	f7ff ff1c 	bl	23b58 <hci_cmd_done>
	if (ncmd) {
   23d20:	b905      	cbnz	r5, 23d24 <hci_cmd_complete+0x20>
}
   23d22:	bd38      	pop	{r3, r4, r5, pc}
   23d24:	4801      	ldr	r0, [pc, #4]	; (23d2c <hci_cmd_complete+0x28>)
   23d26:	f00c faa1 	bl	3026c <z_impl_k_sem_give>
   23d2a:	e7fa      	b.n	23d22 <hci_cmd_complete+0x1e>
   23d2c:	200003d0 	.word	0x200003d0

00023d30 <hci_hardware_error>:
{
   23d30:	b508      	push	{r3, lr}
   23d32:	2101      	movs	r1, #1
   23d34:	3008      	adds	r0, #8
   23d36:	f016 feed 	bl	3ab14 <net_buf_simple_pull_mem>
   23d3a:	4b09      	ldr	r3, [pc, #36]	; (23d60 <hci_hardware_error+0x30>)
   23d3c:	4a09      	ldr	r2, [pc, #36]	; (23d64 <hci_hardware_error+0x34>)
   23d3e:	1a9b      	subs	r3, r3, r2
   23d40:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   23d42:	f04f 0200 	mov.w	r2, #0
   23d46:	2101      	movs	r1, #1
   23d48:	f361 0202 	bfi	r2, r1, #0, #3
   23d4c:	f36f 02c5 	bfc	r2, #3, #3
   23d50:	f363 128f 	bfi	r2, r3, #6, #10
   23d54:	7801      	ldrb	r1, [r0, #0]
   23d56:	4804      	ldr	r0, [pc, #16]	; (23d68 <hci_hardware_error+0x38>)
   23d58:	f7fc faa6 	bl	202a8 <log_1>
}
   23d5c:	bd08      	pop	{r3, pc}
   23d5e:	bf00      	nop
   23d60:	0003d1dc 	.word	0x0003d1dc
   23d64:	0003d1a4 	.word	0x0003d1a4
   23d68:	0003ecfc 	.word	0x0003ecfc

00023d6c <hci_vendor_event>:
{
   23d6c:	b510      	push	{r4, lr}
   23d6e:	4b0c      	ldr	r3, [pc, #48]	; (23da0 <hci_vendor_event+0x34>)
   23d70:	4a0c      	ldr	r2, [pc, #48]	; (23da4 <hci_vendor_event+0x38>)
   23d72:	1a9b      	subs	r3, r3, r2
   23d74:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   23d76:	f04f 0400 	mov.w	r4, #0
   23d7a:	2202      	movs	r2, #2
   23d7c:	f362 0402 	bfi	r4, r2, #0, #3
   23d80:	f36f 04c5 	bfc	r4, #3, #3
   23d84:	f363 148f 	bfi	r4, r3, #6, #10
   23d88:	8981      	ldrh	r1, [r0, #12]
   23d8a:	6880      	ldr	r0, [r0, #8]
   23d8c:	f7ff f970 	bl	23070 <bt_hex_real>
   23d90:	f7fc f912 	bl	1ffb8 <z_log_strdup>
   23d94:	4601      	mov	r1, r0
   23d96:	4622      	mov	r2, r4
   23d98:	4803      	ldr	r0, [pc, #12]	; (23da8 <hci_vendor_event+0x3c>)
   23d9a:	f7fc fa85 	bl	202a8 <log_1>
}
   23d9e:	bd10      	pop	{r4, pc}
   23da0:	0003d1dc 	.word	0x0003d1dc
   23da4:	0003d1a4 	.word	0x0003d1a4
   23da8:	0003ed20 	.word	0x0003ed20

00023dac <bt_dev_show_info>:
{
   23dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23db0:	b086      	sub	sp, #24
   23db2:	4b3d      	ldr	r3, [pc, #244]	; (23ea8 <bt_dev_show_info+0xfc>)
   23db4:	4a3d      	ldr	r2, [pc, #244]	; (23eac <bt_dev_show_info+0x100>)
   23db6:	1a9b      	subs	r3, r3, r2
   23db8:	08db      	lsrs	r3, r3, #3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   23dba:	f04f 0400 	mov.w	r4, #0
   23dbe:	2203      	movs	r2, #3
   23dc0:	f362 0402 	bfi	r4, r2, #0, #3
   23dc4:	f36f 04c5 	bfc	r4, #3, #3
   23dc8:	f363 148f 	bfi	r4, r3, #6, #10
   23dcc:	4b38      	ldr	r3, [pc, #224]	; (23eb0 <bt_dev_show_info+0x104>)
   23dce:	79db      	ldrb	r3, [r3, #7]
   23dd0:	2b01      	cmp	r3, #1
   23dd2:	d92b      	bls.n	23e2c <bt_dev_show_info+0x80>
   23dd4:	4e37      	ldr	r6, [pc, #220]	; (23eb4 <bt_dev_show_info+0x108>)
   23dd6:	4836      	ldr	r0, [pc, #216]	; (23eb0 <bt_dev_show_info+0x104>)
   23dd8:	f7ff f972 	bl	230c0 <bt_addr_le_str_real>
   23ddc:	f7fc f8ec 	bl	1ffb8 <z_log_strdup>
   23de0:	4602      	mov	r2, r0
   23de2:	4623      	mov	r3, r4
   23de4:	4631      	mov	r1, r6
   23de6:	4834      	ldr	r0, [pc, #208]	; (23eb8 <bt_dev_show_info+0x10c>)
   23de8:	f7fc fa94 	bl	20314 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   23dec:	2401      	movs	r4, #1
   23dee:	4b30      	ldr	r3, [pc, #192]	; (23eb0 <bt_dev_show_info+0x104>)
   23df0:	79db      	ldrb	r3, [r3, #7]
   23df2:	42a3      	cmp	r3, r4
   23df4:	dd1c      	ble.n	23e30 <bt_dev_show_info+0x84>
   23df6:	4b2c      	ldr	r3, [pc, #176]	; (23ea8 <bt_dev_show_info+0xfc>)
   23df8:	4a2c      	ldr	r2, [pc, #176]	; (23eac <bt_dev_show_info+0x100>)
   23dfa:	1a9b      	subs	r3, r3, r2
   23dfc:	08db      	lsrs	r3, r3, #3
		BT_INFO("Identity[%d]: %s",
   23dfe:	2203      	movs	r2, #3
   23e00:	f362 0502 	bfi	r5, r2, #0, #3
   23e04:	f36f 05c5 	bfc	r5, #3, #3
   23e08:	f363 158f 	bfi	r5, r3, #6, #10
   23e0c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   23e10:	4827      	ldr	r0, [pc, #156]	; (23eb0 <bt_dev_show_info+0x104>)
   23e12:	4418      	add	r0, r3
   23e14:	f7ff f954 	bl	230c0 <bt_addr_le_str_real>
   23e18:	f7fc f8ce 	bl	1ffb8 <z_log_strdup>
   23e1c:	4602      	mov	r2, r0
   23e1e:	462b      	mov	r3, r5
   23e20:	4621      	mov	r1, r4
   23e22:	4826      	ldr	r0, [pc, #152]	; (23ebc <bt_dev_show_info+0x110>)
   23e24:	f7fc fa76 	bl	20314 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   23e28:	3401      	adds	r4, #1
   23e2a:	e7e0      	b.n	23dee <bt_dev_show_info+0x42>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   23e2c:	4e24      	ldr	r6, [pc, #144]	; (23ec0 <bt_dev_show_info+0x114>)
   23e2e:	e7d2      	b.n	23dd6 <bt_dev_show_info+0x2a>
   23e30:	4c1d      	ldr	r4, [pc, #116]	; (23ea8 <bt_dev_show_info+0xfc>)
   23e32:	4b1e      	ldr	r3, [pc, #120]	; (23eac <bt_dev_show_info+0x100>)
   23e34:	1ae4      	subs	r4, r4, r3
   23e36:	08e4      	lsrs	r4, r4, #3
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   23e38:	2703      	movs	r7, #3
   23e3a:	f04f 0500 	mov.w	r5, #0
   23e3e:	f367 0502 	bfi	r5, r7, #0, #3
   23e42:	f36f 05c5 	bfc	r5, #3, #3
   23e46:	f364 158f 	bfi	r5, r4, #6, #10
   23e4a:	4e19      	ldr	r6, [pc, #100]	; (23eb0 <bt_dev_show_info+0x104>)
   23e4c:	f896 8068 	ldrb.w	r8, [r6, #104]	; 0x68
   23e50:	4640      	mov	r0, r8
   23e52:	f7ff fc8d 	bl	23770 <ver_str>
   23e56:	9002      	str	r0, [sp, #8]
   23e58:	f8cd 800c 	str.w	r8, [sp, #12]
   23e5c:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
   23e60:	9304      	str	r3, [sp, #16]
   23e62:	f8b6 306e 	ldrh.w	r3, [r6, #110]	; 0x6e
   23e66:	9305      	str	r3, [sp, #20]
   23e68:	462b      	mov	r3, r5
   23e6a:	2204      	movs	r2, #4
   23e6c:	a902      	add	r1, sp, #8
   23e6e:	4815      	ldr	r0, [pc, #84]	; (23ec4 <bt_dev_show_info+0x118>)
   23e70:	f7fc fa8c 	bl	2038c <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   23e74:	f04f 0500 	mov.w	r5, #0
   23e78:	f367 0502 	bfi	r5, r7, #0, #3
   23e7c:	f36f 05c5 	bfc	r5, #3, #3
   23e80:	f364 158f 	bfi	r5, r4, #6, #10
   23e84:	f896 4069 	ldrb.w	r4, [r6, #105]	; 0x69
   23e88:	4620      	mov	r0, r4
   23e8a:	f7ff fc71 	bl	23770 <ver_str>
   23e8e:	4601      	mov	r1, r0
   23e90:	f8ad 5000 	strh.w	r5, [sp]
   23e94:	f8b6 306c 	ldrh.w	r3, [r6, #108]	; 0x6c
   23e98:	4622      	mov	r2, r4
   23e9a:	480b      	ldr	r0, [pc, #44]	; (23ec8 <bt_dev_show_info+0x11c>)
   23e9c:	f7fc f9c6 	bl	2022c <log_3>
}
   23ea0:	b006      	add	sp, #24
   23ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ea6:	bf00      	nop
   23ea8:	0003d1dc 	.word	0x0003d1dc
   23eac:	0003d1a4 	.word	0x0003d1a4
   23eb0:	200002b0 	.word	0x200002b0
   23eb4:	0003ed44 	.word	0x0003ed44
   23eb8:	0003ed48 	.word	0x0003ed48
   23ebc:	0003ed58 	.word	0x0003ed58
   23ec0:	0003dcbc 	.word	0x0003dcbc
   23ec4:	0003ed6c 	.word	0x0003ed6c
   23ec8:	0003edac 	.word	0x0003edac

00023ecc <hci_acl>:
{
   23ecc:	b570      	push	{r4, r5, r6, lr}
   23ece:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   23ed0:	8983      	ldrh	r3, [r0, #12]
   23ed2:	2b03      	cmp	r3, #3
   23ed4:	d923      	bls.n	23f1e <hci_acl+0x52>
   23ed6:	2104      	movs	r1, #4
   23ed8:	f104 0008 	add.w	r0, r4, #8
   23edc:	f016 fe1a 	bl	3ab14 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   23ee0:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   23ee2:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   23ee4:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   23ee6:	f3c0 000b 	ubfx	r0, r0, #0, #12
   23eea:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   23eec:	23ff      	movs	r3, #255	; 0xff
   23eee:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   23ef0:	89a1      	ldrh	r1, [r4, #12]
   23ef2:	4291      	cmp	r1, r2
   23ef4:	d021      	beq.n	23f3a <hci_acl+0x6e>
   23ef6:	4823      	ldr	r0, [pc, #140]	; (23f84 <hci_acl+0xb8>)
   23ef8:	4b23      	ldr	r3, [pc, #140]	; (23f88 <hci_acl+0xbc>)
   23efa:	1ac0      	subs	r0, r0, r3
   23efc:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   23efe:	f04f 0300 	mov.w	r3, #0
   23f02:	2501      	movs	r5, #1
   23f04:	f365 0302 	bfi	r3, r5, #0, #3
   23f08:	f36f 03c5 	bfc	r3, #3, #3
   23f0c:	f360 138f 	bfi	r3, r0, #6, #10
   23f10:	481e      	ldr	r0, [pc, #120]	; (23f8c <hci_acl+0xc0>)
   23f12:	f7fc f9ff 	bl	20314 <log_2>
		net_buf_unref(buf);
   23f16:	4620      	mov	r0, r4
   23f18:	f016 fd81 	bl	3aa1e <net_buf_unref>
}
   23f1c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   23f1e:	f240 13b5 	movw	r3, #437	; 0x1b5
   23f22:	4a1b      	ldr	r2, [pc, #108]	; (23f90 <hci_acl+0xc4>)
   23f24:	491b      	ldr	r1, [pc, #108]	; (23f94 <hci_acl+0xc8>)
   23f26:	481c      	ldr	r0, [pc, #112]	; (23f98 <hci_acl+0xcc>)
   23f28:	f010 faa1 	bl	3446e <printk>
   23f2c:	4040      	eors	r0, r0
   23f2e:	f380 8811 	msr	BASEPRI, r0
   23f32:	f04f 0003 	mov.w	r0, #3
   23f36:	df02      	svc	2
   23f38:	e7cd      	b.n	23ed6 <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   23f3a:	f002 ffef 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   23f3e:	4605      	mov	r5, r0
   23f40:	b158      	cbz	r0, 23f5a <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   23f42:	f003 f91b 	bl	2717c <bt_conn_index>
   23f46:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   23f48:	4632      	mov	r2, r6
   23f4a:	4621      	mov	r1, r4
   23f4c:	4628      	mov	r0, r5
   23f4e:	f013 fbf4 	bl	3773a <bt_conn_recv>
	bt_conn_unref(conn);
   23f52:	4628      	mov	r0, r5
   23f54:	f013 fc24 	bl	377a0 <bt_conn_unref>
   23f58:	e7e0      	b.n	23f1c <hci_acl+0x50>
   23f5a:	4b0a      	ldr	r3, [pc, #40]	; (23f84 <hci_acl+0xb8>)
   23f5c:	4a0a      	ldr	r2, [pc, #40]	; (23f88 <hci_acl+0xbc>)
   23f5e:	1a9b      	subs	r3, r3, r2
   23f60:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   23f62:	f04f 0200 	mov.w	r2, #0
   23f66:	2101      	movs	r1, #1
   23f68:	f361 0202 	bfi	r2, r1, #0, #3
   23f6c:	f36f 02c5 	bfc	r2, #3, #3
   23f70:	f363 128f 	bfi	r2, r3, #6, #10
   23f74:	8ae1      	ldrh	r1, [r4, #22]
   23f76:	4809      	ldr	r0, [pc, #36]	; (23f9c <hci_acl+0xd0>)
   23f78:	f7fc f996 	bl	202a8 <log_1>
		net_buf_unref(buf);
   23f7c:	4620      	mov	r0, r4
   23f7e:	f016 fd4e 	bl	3aa1e <net_buf_unref>
		return;
   23f82:	e7cb      	b.n	23f1c <hci_acl+0x50>
   23f84:	0003d1dc 	.word	0x0003d1dc
   23f88:	0003d1a4 	.word	0x0003d1a4
   23f8c:	0003ee44 	.word	0x0003ee44
   23f90:	0003edd4 	.word	0x0003edd4
   23f94:	0003ee08 	.word	0x0003ee08
   23f98:	0003ee24 	.word	0x0003ee24
   23f9c:	0003ee68 	.word	0x0003ee68

00023fa0 <le_conn_update_complete>:
{
   23fa0:	b570      	push	{r4, r5, r6, lr}
   23fa2:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   23fa4:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   23fa6:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   23faa:	4630      	mov	r0, r6
   23fac:	f002 ffb6 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   23fb0:	b148      	cbz	r0, 23fc6 <le_conn_update_complete+0x26>
   23fb2:	4605      	mov	r5, r0
	if (!evt->status) {
   23fb4:	7823      	ldrb	r3, [r4, #0]
   23fb6:	b1c3      	cbz	r3, 23fea <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   23fb8:	2b1a      	cmp	r3, #26
   23fba:	d025      	beq.n	24008 <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   23fbc:	4628      	mov	r0, r5
   23fbe:	f013 fbef 	bl	377a0 <bt_conn_unref>
}
   23fc2:	b002      	add	sp, #8
   23fc4:	bd70      	pop	{r4, r5, r6, pc}
   23fc6:	4b24      	ldr	r3, [pc, #144]	; (24058 <le_conn_update_complete+0xb8>)
   23fc8:	4a24      	ldr	r2, [pc, #144]	; (2405c <le_conn_update_complete+0xbc>)
   23fca:	1a9b      	subs	r3, r3, r2
   23fcc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   23fce:	f04f 0200 	mov.w	r2, #0
   23fd2:	2101      	movs	r1, #1
   23fd4:	f361 0202 	bfi	r2, r1, #0, #3
   23fd8:	f36f 02c5 	bfc	r2, #3, #3
   23fdc:	f363 128f 	bfi	r2, r3, #6, #10
   23fe0:	4631      	mov	r1, r6
   23fe2:	481f      	ldr	r0, [pc, #124]	; (24060 <le_conn_update_complete+0xc0>)
   23fe4:	f7fc f960 	bl	202a8 <log_1>
		return;
   23fe8:	e7eb      	b.n	23fc2 <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   23fea:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   23fee:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   23ff2:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   23ff6:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   23ffa:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   23ffe:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   24002:	f003 f8f1 	bl	271e8 <notify_le_param_updated>
   24006:	e7d9      	b.n	23fbc <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   24008:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   2400a:	2b01      	cmp	r3, #1
   2400c:	d1d6      	bne.n	23fbc <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   2400e:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24010:	f3bf 8f5b 	dmb	ish
   24014:	e853 2f00 	ldrex	r2, [r3]
   24018:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   2401c:	e843 1000 	strex	r0, r1, [r3]
   24020:	2800      	cmp	r0, #0
   24022:	d1f7      	bne.n	24014 <le_conn_update_complete+0x74>
   24024:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   24028:	f412 6f80 	tst.w	r2, #1024	; 0x400
   2402c:	d1c6      	bne.n	23fbc <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   2402e:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   24032:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   24036:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   2403a:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   2403e:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   24042:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   24046:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   2404a:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   2404e:	4669      	mov	r1, sp
   24050:	4628      	mov	r0, r5
   24052:	f013 fe64 	bl	37d1e <bt_l2cap_update_conn_param>
   24056:	e7b1      	b.n	23fbc <le_conn_update_complete+0x1c>
   24058:	0003d1dc 	.word	0x0003d1dc
   2405c:	0003d1a4 	.word	0x0003d1a4
   24060:	0003ec38 	.word	0x0003ec38

00024064 <hci_le_meta_event>:
{
   24064:	b5f0      	push	{r4, r5, r6, r7, lr}
   24066:	b083      	sub	sp, #12
   24068:	4604      	mov	r4, r0
   2406a:	2101      	movs	r1, #1
   2406c:	3008      	adds	r0, #8
   2406e:	f016 fd51 	bl	3ab14 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   24072:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   24074:	2300      	movs	r3, #0
   24076:	2b0a      	cmp	r3, #10
   24078:	d823      	bhi.n	240c2 <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   2407a:	4a20      	ldr	r2, [pc, #128]	; (240fc <hci_le_meta_event+0x98>)
   2407c:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   24080:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   24084:	4295      	cmp	r5, r2
   24086:	d108      	bne.n	2409a <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   24088:	89a1      	ldrh	r1, [r4, #12]
   2408a:	7843      	ldrb	r3, [r0, #1]
   2408c:	4299      	cmp	r1, r3
   2408e:	d306      	bcc.n	2409e <hci_le_meta_event+0x3a>
		handler->handler(buf);
   24090:	6843      	ldr	r3, [r0, #4]
   24092:	4620      	mov	r0, r4
   24094:	4798      	blx	r3
}
   24096:	b003      	add	sp, #12
   24098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   2409a:	3301      	adds	r3, #1
   2409c:	e7eb      	b.n	24076 <hci_le_meta_event+0x12>
   2409e:	4a18      	ldr	r2, [pc, #96]	; (24100 <hci_le_meta_event+0x9c>)
   240a0:	4b18      	ldr	r3, [pc, #96]	; (24104 <hci_le_meta_event+0xa0>)
   240a2:	1ad2      	subs	r2, r2, r3
   240a4:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   240a6:	f04f 0300 	mov.w	r3, #0
   240aa:	2001      	movs	r0, #1
   240ac:	f360 0302 	bfi	r3, r0, #0, #3
   240b0:	f36f 03c5 	bfc	r3, #3, #3
   240b4:	f362 138f 	bfi	r3, r2, #6, #10
   240b8:	462a      	mov	r2, r5
   240ba:	4813      	ldr	r0, [pc, #76]	; (24108 <hci_le_meta_event+0xa4>)
   240bc:	f7fc f92a 	bl	20314 <log_2>
			return;
   240c0:	e7e9      	b.n	24096 <hci_le_meta_event+0x32>
   240c2:	4b0f      	ldr	r3, [pc, #60]	; (24100 <hci_le_meta_event+0x9c>)
   240c4:	4a0f      	ldr	r2, [pc, #60]	; (24104 <hci_le_meta_event+0xa0>)
   240c6:	1a9b      	subs	r3, r3, r2
   240c8:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   240ca:	f04f 0600 	mov.w	r6, #0
   240ce:	2202      	movs	r2, #2
   240d0:	f362 0602 	bfi	r6, r2, #0, #3
   240d4:	f36f 06c5 	bfc	r6, #3, #3
   240d8:	f363 168f 	bfi	r6, r3, #6, #10
   240dc:	89a7      	ldrh	r7, [r4, #12]
   240de:	4639      	mov	r1, r7
   240e0:	68a0      	ldr	r0, [r4, #8]
   240e2:	f7fe ffc5 	bl	23070 <bt_hex_real>
   240e6:	f7fb ff67 	bl	1ffb8 <z_log_strdup>
   240ea:	4603      	mov	r3, r0
   240ec:	f8ad 6000 	strh.w	r6, [sp]
   240f0:	463a      	mov	r2, r7
   240f2:	4629      	mov	r1, r5
   240f4:	4805      	ldr	r0, [pc, #20]	; (2410c <hci_le_meta_event+0xa8>)
   240f6:	f7fc f899 	bl	2022c <log_3>
}
   240fa:	e7cc      	b.n	24096 <hci_le_meta_event+0x32>
   240fc:	0003f24c 	.word	0x0003f24c
   24100:	0003d1dc 	.word	0x0003d1dc
   24104:	0003d1a4 	.word	0x0003d1a4
   24108:	0003ee8c 	.word	0x0003ee8c
   2410c:	0003eeb0 	.word	0x0003eeb0

00024110 <hci_event>:
{
   24110:	b5f0      	push	{r4, r5, r6, r7, lr}
   24112:	b083      	sub	sp, #12
   24114:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   24116:	8983      	ldrh	r3, [r0, #12]
   24118:	2b01      	cmp	r3, #1
   2411a:	d916      	bls.n	2414a <hci_event+0x3a>
   2411c:	2102      	movs	r1, #2
   2411e:	f104 0008 	add.w	r0, r4, #8
   24122:	f016 fcf7 	bl	3ab14 <net_buf_simple_pull_mem>
   24126:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   24128:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2412a:	3b05      	subs	r3, #5
   2412c:	2b15      	cmp	r3, #21
   2412e:	d81c      	bhi.n	2416a <hci_event+0x5a>
   24130:	e8df f003 	tbb	[pc, r3]
   24134:	1b1b1b19 	.word	0x1b1b1b19
   24138:	1b1b1b1b 	.word	0x1b1b1b1b
   2413c:	1b36361b 	.word	0x1b36361b
   24140:	1b361b1b 	.word	0x1b361b1b
   24144:	1b1b1b1b 	.word	0x1b1b1b1b
   24148:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2414a:	f640 1317 	movw	r3, #2327	; 0x917
   2414e:	4a35      	ldr	r2, [pc, #212]	; (24224 <hci_event+0x114>)
   24150:	4935      	ldr	r1, [pc, #212]	; (24228 <hci_event+0x118>)
   24152:	4836      	ldr	r0, [pc, #216]	; (2422c <hci_event+0x11c>)
   24154:	f010 f98b 	bl	3446e <printk>
   24158:	4040      	eors	r0, r0
   2415a:	f380 8811 	msr	BASEPRI, r0
   2415e:	f04f 0003 	mov.w	r0, #3
   24162:	df02      	svc	2
   24164:	e7da      	b.n	2411c <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   24166:	2303      	movs	r3, #3
   24168:	e000      	b.n	2416c <hci_event+0x5c>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2416a:	2302      	movs	r3, #2
   2416c:	f013 0f02 	tst.w	r3, #2
   24170:	d018      	beq.n	241a4 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   24172:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   24174:	2300      	movs	r3, #0
   24176:	2b05      	cmp	r3, #5
   24178:	d836      	bhi.n	241e8 <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   2417a:	4a2d      	ldr	r2, [pc, #180]	; (24230 <hci_event+0x120>)
   2417c:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   24180:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   24184:	4295      	cmp	r5, r2
   24186:	d11b      	bne.n	241c0 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   24188:	89a1      	ldrh	r1, [r4, #12]
   2418a:	7843      	ldrb	r3, [r0, #1]
   2418c:	4299      	cmp	r1, r3
   2418e:	d319      	bcc.n	241c4 <hci_event+0xb4>
		handler->handler(buf);
   24190:	6843      	ldr	r3, [r0, #4]
   24192:	4620      	mov	r0, r4
   24194:	4798      	blx	r3
	net_buf_unref(buf);
   24196:	4620      	mov	r0, r4
   24198:	f016 fc41 	bl	3aa1e <net_buf_unref>
}
   2419c:	b003      	add	sp, #12
   2419e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   241a0:	2301      	movs	r3, #1
   241a2:	e7e3      	b.n	2416c <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   241a4:	f640 131b 	movw	r3, #2331	; 0x91b
   241a8:	4a1e      	ldr	r2, [pc, #120]	; (24224 <hci_event+0x114>)
   241aa:	4922      	ldr	r1, [pc, #136]	; (24234 <hci_event+0x124>)
   241ac:	481f      	ldr	r0, [pc, #124]	; (2422c <hci_event+0x11c>)
   241ae:	f010 f95e 	bl	3446e <printk>
   241b2:	4040      	eors	r0, r0
   241b4:	f380 8811 	msr	BASEPRI, r0
   241b8:	f04f 0003 	mov.w	r0, #3
   241bc:	df02      	svc	2
   241be:	e7d8      	b.n	24172 <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   241c0:	3301      	adds	r3, #1
   241c2:	e7d8      	b.n	24176 <hci_event+0x66>
   241c4:	4a1c      	ldr	r2, [pc, #112]	; (24238 <hci_event+0x128>)
   241c6:	4b1d      	ldr	r3, [pc, #116]	; (2423c <hci_event+0x12c>)
   241c8:	1ad2      	subs	r2, r2, r3
   241ca:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   241cc:	f04f 0300 	mov.w	r3, #0
   241d0:	2001      	movs	r0, #1
   241d2:	f360 0302 	bfi	r3, r0, #0, #3
   241d6:	f36f 03c5 	bfc	r3, #3, #3
   241da:	f362 138f 	bfi	r3, r2, #6, #10
   241de:	462a      	mov	r2, r5
   241e0:	4817      	ldr	r0, [pc, #92]	; (24240 <hci_event+0x130>)
   241e2:	f7fc f897 	bl	20314 <log_2>
			return;
   241e6:	e7d6      	b.n	24196 <hci_event+0x86>
   241e8:	4b13      	ldr	r3, [pc, #76]	; (24238 <hci_event+0x128>)
   241ea:	4a14      	ldr	r2, [pc, #80]	; (2423c <hci_event+0x12c>)
   241ec:	1a9b      	subs	r3, r3, r2
   241ee:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   241f0:	f04f 0600 	mov.w	r6, #0
   241f4:	2202      	movs	r2, #2
   241f6:	f362 0602 	bfi	r6, r2, #0, #3
   241fa:	f36f 06c5 	bfc	r6, #3, #3
   241fe:	f363 168f 	bfi	r6, r3, #6, #10
   24202:	89a7      	ldrh	r7, [r4, #12]
   24204:	4639      	mov	r1, r7
   24206:	68a0      	ldr	r0, [r4, #8]
   24208:	f7fe ff32 	bl	23070 <bt_hex_real>
   2420c:	f7fb fed4 	bl	1ffb8 <z_log_strdup>
   24210:	4603      	mov	r3, r0
   24212:	f8ad 6000 	strh.w	r6, [sp]
   24216:	463a      	mov	r2, r7
   24218:	4629      	mov	r1, r5
   2421a:	480a      	ldr	r0, [pc, #40]	; (24244 <hci_event+0x134>)
   2421c:	f7fc f806 	bl	2022c <log_3>
   24220:	e7b9      	b.n	24196 <hci_event+0x86>
   24222:	bf00      	nop
   24224:	0003edd4 	.word	0x0003edd4
   24228:	0003ee08 	.word	0x0003ee08
   2422c:	0003ee24 	.word	0x0003ee24
   24230:	0003f2c4 	.word	0x0003f2c4
   24234:	0003eed4 	.word	0x0003eed4
   24238:	0003d1dc 	.word	0x0003d1dc
   2423c:	0003d1a4 	.word	0x0003d1a4
   24240:	0003ee8c 	.word	0x0003ee8c
   24244:	0003eeb0 	.word	0x0003eeb0

00024248 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   24248:	b538      	push	{r3, r4, r5, lr}
   2424a:	e003      	b.n	24254 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   2424c:	f7ff ff60 	bl	24110 <hci_event>
	z_impl_k_yield();
   24250:	f00c fd4c 	bl	30cec <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   24254:	f04f 32ff 	mov.w	r2, #4294967295
   24258:	f04f 33ff 	mov.w	r3, #4294967295
   2425c:	480f      	ldr	r0, [pc, #60]	; (2429c <hci_rx_thread+0x54>)
   2425e:	f016 fbac 	bl	3a9ba <net_buf_get>
   24262:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   24264:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   24266:	2901      	cmp	r1, #1
   24268:	d0f0      	beq.n	2424c <hci_rx_thread+0x4>
   2426a:	2903      	cmp	r1, #3
   2426c:	d102      	bne.n	24274 <hci_rx_thread+0x2c>
			hci_acl(buf);
   2426e:	f7ff fe2d 	bl	23ecc <hci_acl>
			break;
   24272:	e7ed      	b.n	24250 <hci_rx_thread+0x8>
   24274:	4b0a      	ldr	r3, [pc, #40]	; (242a0 <hci_rx_thread+0x58>)
   24276:	4a0b      	ldr	r2, [pc, #44]	; (242a4 <hci_rx_thread+0x5c>)
   24278:	1a9b      	subs	r3, r3, r2
   2427a:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   2427c:	2201      	movs	r2, #1
   2427e:	f362 0502 	bfi	r5, r2, #0, #3
   24282:	f36f 05c5 	bfc	r5, #3, #3
   24286:	f363 158f 	bfi	r5, r3, #6, #10
   2428a:	462a      	mov	r2, r5
   2428c:	4806      	ldr	r0, [pc, #24]	; (242a8 <hci_rx_thread+0x60>)
   2428e:	f7fc f80b 	bl	202a8 <log_1>
			net_buf_unref(buf);
   24292:	4620      	mov	r0, r4
   24294:	f016 fbc3 	bl	3aa1e <net_buf_unref>
			break;
   24298:	e7da      	b.n	24250 <hci_rx_thread+0x8>
   2429a:	bf00      	nop
   2429c:	200003ec 	.word	0x200003ec
   242a0:	0003d1dc 	.word	0x0003d1dc
   242a4:	0003d1a4 	.word	0x0003d1a4
   242a8:	0003ef04 	.word	0x0003ef04

000242ac <bt_hci_cmd_state_set_init>:
{
   242ac:	b510      	push	{r4, lr}
   242ae:	460c      	mov	r4, r1
	state->target = target;
   242b0:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   242b2:	604b      	str	r3, [r1, #4]
	state->val = val;
   242b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   242b8:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   242ba:	f016 fac4 	bl	3a846 <net_buf_id>
   242be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   242c2:	4b02      	ldr	r3, [pc, #8]	; (242cc <bt_hci_cmd_state_set_init+0x20>)
   242c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   242c8:	6044      	str	r4, [r0, #4]
}
   242ca:	bd10      	pop	{r4, pc}
   242cc:	200081d8 	.word	0x200081d8

000242d0 <bt_hci_cmd_create>:
{
   242d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   242d4:	4682      	mov	sl, r0
   242d6:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   242d8:	f04f 32ff 	mov.w	r2, #4294967295
   242dc:	f04f 33ff 	mov.w	r3, #4294967295
   242e0:	4817      	ldr	r0, [pc, #92]	; (24340 <bt_hci_cmd_create+0x70>)
   242e2:	f016 fb63 	bl	3a9ac <net_buf_alloc_fixed>
   242e6:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   242e8:	f100 0808 	add.w	r8, r0, #8
   242ec:	2100      	movs	r1, #0
   242ee:	4640      	mov	r0, r8
   242f0:	f016 fb84 	bl	3a9fc <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   242f4:	2700      	movs	r7, #0
   242f6:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   242f8:	4620      	mov	r0, r4
   242fa:	f016 faa4 	bl	3a846 <net_buf_id>
   242fe:	4d11      	ldr	r5, [pc, #68]	; (24344 <bt_hci_cmd_create+0x74>)
   24300:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   24304:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   24308:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   2430c:	4620      	mov	r0, r4
   2430e:	f016 fa9a 	bl	3a846 <net_buf_id>
   24312:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   24316:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   2431a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   2431c:	4620      	mov	r0, r4
   2431e:	f016 fa92 	bl	3a846 <net_buf_id>
   24322:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   24326:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   2432a:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   2432c:	2103      	movs	r1, #3
   2432e:	4640      	mov	r0, r8
   24330:	f016 fbbf 	bl	3aab2 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   24334:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   24338:	7086      	strb	r6, [r0, #2]
}
   2433a:	4620      	mov	r0, r4
   2433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24340:	20000c34 	.word	0x20000c34
   24344:	200081d8 	.word	0x200081d8

00024348 <bt_hci_cmd_send_sync>:
{
   24348:	b5f0      	push	{r4, r5, r6, r7, lr}
   2434a:	b087      	sub	sp, #28
   2434c:	4606      	mov	r6, r0
   2434e:	4615      	mov	r5, r2
	if (!buf) {
   24350:	460c      	mov	r4, r1
   24352:	b361      	cbz	r1, 243ae <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   24354:	2201      	movs	r2, #1
   24356:	2100      	movs	r1, #0
   24358:	4668      	mov	r0, sp
   2435a:	f018 f848 	bl	3c3ee <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2435e:	4620      	mov	r0, r4
   24360:	f016 fa71 	bl	3a846 <net_buf_id>
   24364:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   24368:	4b2f      	ldr	r3, [pc, #188]	; (24428 <bt_hci_cmd_send_sync+0xe0>)
   2436a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2436e:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   24372:	4620      	mov	r0, r4
   24374:	f016 fb79 	bl	3aa6a <net_buf_ref>
   24378:	4601      	mov	r1, r0
   2437a:	482c      	ldr	r0, [pc, #176]	; (2442c <bt_hci_cmd_send_sync+0xe4>)
   2437c:	f016 fb42 	bl	3aa04 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   24380:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   24384:	2300      	movs	r3, #0
   24386:	4668      	mov	r0, sp
   24388:	f00b ff98 	bl	302bc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2438c:	4607      	mov	r7, r0
   2438e:	b9b0      	cbnz	r0, 243be <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   24390:	4620      	mov	r0, r4
   24392:	f016 fa58 	bl	3a846 <net_buf_id>
   24396:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2439a:	4b23      	ldr	r3, [pc, #140]	; (24428 <bt_hci_cmd_send_sync+0xe0>)
   2439c:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   243a0:	b9ff      	cbnz	r7, 243e2 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   243a2:	2d00      	cmp	r5, #0
   243a4:	d03a      	beq.n	2441c <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   243a6:	602c      	str	r4, [r5, #0]
	return 0;
   243a8:	2000      	movs	r0, #0
}
   243aa:	b007      	add	sp, #28
   243ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   243ae:	f7ff ff8f 	bl	242d0 <bt_hci_cmd_create>
		if (!buf) {
   243b2:	4604      	mov	r4, r0
   243b4:	2800      	cmp	r0, #0
   243b6:	d1cd      	bne.n	24354 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   243b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   243bc:	e7f5      	b.n	243aa <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   243be:	f240 1331 	movw	r3, #305	; 0x131
   243c2:	4a1b      	ldr	r2, [pc, #108]	; (24430 <bt_hci_cmd_send_sync+0xe8>)
   243c4:	491b      	ldr	r1, [pc, #108]	; (24434 <bt_hci_cmd_send_sync+0xec>)
   243c6:	481c      	ldr	r0, [pc, #112]	; (24438 <bt_hci_cmd_send_sync+0xf0>)
   243c8:	f010 f851 	bl	3446e <printk>
   243cc:	4639      	mov	r1, r7
   243ce:	481b      	ldr	r0, [pc, #108]	; (2443c <bt_hci_cmd_send_sync+0xf4>)
   243d0:	f010 f84d 	bl	3446e <printk>
   243d4:	4040      	eors	r0, r0
   243d6:	f380 8811 	msr	BASEPRI, r0
   243da:	f04f 0003 	mov.w	r0, #3
   243de:	df02      	svc	2
   243e0:	e7d6      	b.n	24390 <bt_hci_cmd_send_sync+0x48>
   243e2:	4a17      	ldr	r2, [pc, #92]	; (24440 <bt_hci_cmd_send_sync+0xf8>)
   243e4:	4b17      	ldr	r3, [pc, #92]	; (24444 <bt_hci_cmd_send_sync+0xfc>)
   243e6:	1ad2      	subs	r2, r2, r3
   243e8:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   243ea:	f04f 0300 	mov.w	r3, #0
   243ee:	2102      	movs	r1, #2
   243f0:	f361 0302 	bfi	r3, r1, #0, #3
   243f4:	f36f 03c5 	bfc	r3, #3, #3
   243f8:	f362 138f 	bfi	r3, r2, #6, #10
   243fc:	463a      	mov	r2, r7
   243fe:	4631      	mov	r1, r6
   24400:	4811      	ldr	r0, [pc, #68]	; (24448 <bt_hci_cmd_send_sync+0x100>)
   24402:	f7fb ff87 	bl	20314 <log_2>
		net_buf_unref(buf);
   24406:	4620      	mov	r0, r4
   24408:	f016 fb09 	bl	3aa1e <net_buf_unref>
		switch (status) {
   2440c:	2f09      	cmp	r7, #9
   2440e:	d002      	beq.n	24416 <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   24410:	f06f 0004 	mvn.w	r0, #4
   24414:	e7c9      	b.n	243aa <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   24416:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   2441a:	e7c6      	b.n	243aa <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   2441c:	4620      	mov	r0, r4
   2441e:	f016 fafe 	bl	3aa1e <net_buf_unref>
	return 0;
   24422:	2000      	movs	r0, #0
   24424:	e7c1      	b.n	243aa <bt_hci_cmd_send_sync+0x62>
   24426:	bf00      	nop
   24428:	200081d8 	.word	0x200081d8
   2442c:	20000404 	.word	0x20000404
   24430:	0003edd4 	.word	0x0003edd4
   24434:	0003ef18 	.word	0x0003ef18
   24438:	0003ee24 	.word	0x0003ee24
   2443c:	0003ef24 	.word	0x0003ef24
   24440:	0003d1dc 	.word	0x0003d1dc
   24444:	0003d1a4 	.word	0x0003d1a4
   24448:	0003ef44 	.word	0x0003ef44

0002444c <common_init>:
{
   2444c:	b510      	push	{r4, lr}
   2444e:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   24450:	4b22      	ldr	r3, [pc, #136]	; (244dc <common_init+0x90>)
   24452:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   24456:	689b      	ldr	r3, [r3, #8]
   24458:	f013 0f01 	tst.w	r3, #1
   2445c:	d10d      	bne.n	2447a <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   2445e:	aa01      	add	r2, sp, #4
   24460:	2100      	movs	r1, #0
   24462:	f640 4003 	movw	r0, #3075	; 0xc03
   24466:	f7ff ff6f 	bl	24348 <bt_hci_cmd_send_sync>
		if (err) {
   2446a:	4604      	mov	r4, r0
   2446c:	b968      	cbnz	r0, 2448a <common_init+0x3e>
		hci_reset_complete(rsp);
   2446e:	9801      	ldr	r0, [sp, #4]
   24470:	f7ff f9c4 	bl	237fc <hci_reset_complete>
		net_buf_unref(rsp);
   24474:	9801      	ldr	r0, [sp, #4]
   24476:	f016 fad2 	bl	3aa1e <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   2447a:	aa01      	add	r2, sp, #4
   2447c:	2100      	movs	r1, #0
   2447e:	f241 0003 	movw	r0, #4099	; 0x1003
   24482:	f7ff ff61 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   24486:	4604      	mov	r4, r0
   24488:	b110      	cbz	r0, 24490 <common_init+0x44>
}
   2448a:	4620      	mov	r0, r4
   2448c:	b002      	add	sp, #8
   2448e:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   24490:	9801      	ldr	r0, [sp, #4]
   24492:	f7ff f9cf 	bl	23834 <read_local_features_complete>
	net_buf_unref(rsp);
   24496:	9801      	ldr	r0, [sp, #4]
   24498:	f016 fac1 	bl	3aa1e <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   2449c:	aa01      	add	r2, sp, #4
   2449e:	2100      	movs	r1, #0
   244a0:	f241 0001 	movw	r0, #4097	; 0x1001
   244a4:	f7ff ff50 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   244a8:	4604      	mov	r4, r0
   244aa:	2800      	cmp	r0, #0
   244ac:	d1ed      	bne.n	2448a <common_init+0x3e>
	read_local_ver_complete(rsp);
   244ae:	9801      	ldr	r0, [sp, #4]
   244b0:	f7ff f922 	bl	236f8 <read_local_ver_complete>
	net_buf_unref(rsp);
   244b4:	9801      	ldr	r0, [sp, #4]
   244b6:	f016 fab2 	bl	3aa1e <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   244ba:	aa01      	add	r2, sp, #4
   244bc:	2100      	movs	r1, #0
   244be:	f241 0002 	movw	r0, #4098	; 0x1002
   244c2:	f7ff ff41 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   244c6:	4604      	mov	r4, r0
   244c8:	2800      	cmp	r0, #0
   244ca:	d1de      	bne.n	2448a <common_init+0x3e>
	read_supported_commands_complete(rsp);
   244cc:	9801      	ldr	r0, [sp, #4]
   244ce:	f7ff f9c5 	bl	2385c <read_supported_commands_complete>
	net_buf_unref(rsp);
   244d2:	9801      	ldr	r0, [sp, #4]
   244d4:	f016 faa3 	bl	3aa1e <net_buf_unref>
	return 0;
   244d8:	e7d7      	b.n	2448a <common_init+0x3e>
   244da:	bf00      	nop
   244dc:	200002b0 	.word	0x200002b0

000244e0 <hci_le_read_max_data_len>:
{
   244e0:	b570      	push	{r4, r5, r6, lr}
   244e2:	b082      	sub	sp, #8
   244e4:	4605      	mov	r5, r0
   244e6:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   244e8:	aa01      	add	r2, sp, #4
   244ea:	2100      	movs	r1, #0
   244ec:	f242 002f 	movw	r0, #8239	; 0x202f
   244f0:	f7ff ff2a 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   244f4:	4606      	mov	r6, r0
   244f6:	b960      	cbnz	r0, 24512 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   244f8:	9801      	ldr	r0, [sp, #4]
   244fa:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   244fc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   24500:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   24502:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   24506:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   24508:	f016 fa89 	bl	3aa1e <net_buf_unref>
}
   2450c:	4630      	mov	r0, r6
   2450e:	b002      	add	sp, #8
   24510:	bd70      	pop	{r4, r5, r6, pc}
   24512:	4b08      	ldr	r3, [pc, #32]	; (24534 <hci_le_read_max_data_len+0x54>)
   24514:	4a08      	ldr	r2, [pc, #32]	; (24538 <hci_le_read_max_data_len+0x58>)
   24516:	1a9b      	subs	r3, r3, r2
   24518:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
   2451a:	f04f 0100 	mov.w	r1, #0
   2451e:	2201      	movs	r2, #1
   24520:	f362 0102 	bfi	r1, r2, #0, #3
   24524:	f36f 01c5 	bfc	r1, #3, #3
   24528:	f363 118f 	bfi	r1, r3, #6, #10
   2452c:	4803      	ldr	r0, [pc, #12]	; (2453c <hci_le_read_max_data_len+0x5c>)
   2452e:	f7fb ff71 	bl	20414 <log_0>
		return err;
   24532:	e7eb      	b.n	2450c <hci_le_read_max_data_len+0x2c>
   24534:	0003d1dc 	.word	0x0003d1dc
   24538:	0003d1a4 	.word	0x0003d1a4
   2453c:	0003ef60 	.word	0x0003ef60

00024540 <le_set_event_mask>:
{
   24540:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   24542:	2108      	movs	r1, #8
   24544:	f242 0001 	movw	r0, #8193	; 0x2001
   24548:	f7ff fec2 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   2454c:	2800      	cmp	r0, #0
   2454e:	d04b      	beq.n	245e8 <le_set_event_mask+0xa8>
   24550:	4604      	mov	r4, r0
   24552:	2108      	movs	r1, #8
   24554:	4408      	add	r0, r1
   24556:	f016 faac 	bl	3aab2 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   2455a:	4b25      	ldr	r3, [pc, #148]	; (245f0 <le_set_event_mask+0xb0>)
   2455c:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
		if ((IS_ENABLED(CONFIG_BT_SMP) &&
   24560:	f011 0f40 	tst.w	r1, #64	; 0x40
   24564:	d03a      	beq.n	245dc <le_set_event_mask+0x9c>
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
   24566:	f240 2602 	movw	r6, #514	; 0x202
   2456a:	2500      	movs	r5, #0
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   2456c:	f046 030c 	orr.w	r3, r6, #12
   24570:	462a      	mov	r2, r5
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   24572:	f011 0f02 	tst.w	r1, #2
   24576:	d001      	beq.n	2457c <le_set_event_mask+0x3c>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   24578:	f046 032c 	orr.w	r3, r6, #44	; 0x2c
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   2457c:	f011 0f20 	tst.w	r1, #32
   24580:	d001      	beq.n	24586 <le_set_event_mask+0x46>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   24582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   24586:	4d1a      	ldr	r5, [pc, #104]	; (245f0 <le_set_event_mask+0xb0>)
   24588:	f895 50d1 	ldrb.w	r5, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2458c:	f015 0f09 	tst.w	r5, #9
   24590:	d001      	beq.n	24596 <le_set_event_mask+0x56>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   24592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   24596:	f011 0f01 	tst.w	r1, #1
   2459a:	d001      	beq.n	245a0 <le_set_event_mask+0x60>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   2459c:	f043 0310 	orr.w	r3, r3, #16
	    (BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
   245a0:	4913      	ldr	r1, [pc, #76]	; (245f0 <le_set_event_mask+0xb0>)
   245a2:	f891 109a 	ldrb.w	r1, [r1, #154]	; 0x9a
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   245a6:	f001 0106 	and.w	r1, r1, #6
   245aa:	2906      	cmp	r1, #6
   245ac:	d019      	beq.n	245e2 <le_set_event_mask+0xa2>
	dst[0] = val;
   245ae:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   245b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
   245b4:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   245b6:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
   245b8:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   245ba:	0e1b      	lsrs	r3, r3, #24
   245bc:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   245be:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   245c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
   245c4:	7143      	strb	r3, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   245c6:	0c13      	lsrs	r3, r2, #16
	dst[0] = val;
   245c8:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
   245ca:	0e12      	lsrs	r2, r2, #24
   245cc:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   245ce:	2200      	movs	r2, #0
   245d0:	4621      	mov	r1, r4
   245d2:	f242 0001 	movw	r0, #8193	; 0x2001
   245d6:	f7ff feb7 	bl	24348 <bt_hci_cmd_send_sync>
}
   245da:	bd70      	pop	{r4, r5, r6, pc}
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   245dc:	2603      	movs	r6, #3
   245de:	2500      	movs	r5, #0
   245e0:	e7c4      	b.n	2456c <le_set_event_mask+0x2c>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   245e2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
   245e6:	e7e2      	b.n	245ae <le_set_event_mask+0x6e>
		return -ENOBUFS;
   245e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   245ec:	e7f5      	b.n	245da <le_set_event_mask+0x9a>
   245ee:	bf00      	nop
   245f0:	200002b0 	.word	0x200002b0

000245f4 <le_init>:
{
   245f4:	b510      	push	{r4, lr}
   245f6:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   245f8:	4b5b      	ldr	r3, [pc, #364]	; (24768 <le_init+0x174>)
   245fa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   245fe:	f013 0f40 	tst.w	r3, #64	; 0x40
   24602:	d00a      	beq.n	2461a <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   24604:	aa01      	add	r2, sp, #4
   24606:	2100      	movs	r1, #0
   24608:	f242 0003 	movw	r0, #8195	; 0x2003
   2460c:	f7ff fe9c 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   24610:	4603      	mov	r3, r0
   24612:	b1a8      	cbz	r0, 24640 <le_init+0x4c>
}
   24614:	4618      	mov	r0, r3
   24616:	b002      	add	sp, #8
   24618:	bd10      	pop	{r4, pc}
   2461a:	4b54      	ldr	r3, [pc, #336]	; (2476c <le_init+0x178>)
   2461c:	4a54      	ldr	r2, [pc, #336]	; (24770 <le_init+0x17c>)
   2461e:	1a9b      	subs	r3, r3, r2
   24620:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   24622:	f04f 0100 	mov.w	r1, #0
   24626:	2201      	movs	r2, #1
   24628:	f362 0102 	bfi	r1, r2, #0, #3
   2462c:	f36f 01c5 	bfc	r1, #3, #3
   24630:	f363 118f 	bfi	r1, r3, #6, #10
   24634:	484f      	ldr	r0, [pc, #316]	; (24774 <le_init+0x180>)
   24636:	f7fb feed 	bl	20414 <log_0>
		return -ENODEV;
   2463a:	f06f 0312 	mvn.w	r3, #18
   2463e:	e7e9      	b.n	24614 <le_init+0x20>
	read_le_features_complete(rsp);
   24640:	9801      	ldr	r0, [sp, #4]
   24642:	f7ff f901 	bl	23848 <read_le_features_complete>
	net_buf_unref(rsp);
   24646:	9801      	ldr	r0, [sp, #4]
   24648:	f016 f9e9 	bl	3aa1e <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   2464c:	aa01      	add	r2, sp, #4
   2464e:	2100      	movs	r1, #0
   24650:	f242 0002 	movw	r0, #8194	; 0x2002
   24654:	f7ff fe78 	bl	24348 <bt_hci_cmd_send_sync>
		if (err) {
   24658:	4603      	mov	r3, r0
   2465a:	2800      	cmp	r0, #0
   2465c:	d1da      	bne.n	24614 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   2465e:	9801      	ldr	r0, [sp, #4]
   24660:	f7ff f90a 	bl	23878 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   24664:	9801      	ldr	r0, [sp, #4]
   24666:	f016 f9da 	bl	3aa1e <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   2466a:	4b3f      	ldr	r3, [pc, #252]	; (24768 <le_init+0x174>)
   2466c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   24670:	f013 0f20 	tst.w	r3, #32
   24674:	d024      	beq.n	246c0 <le_init+0xcc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   24676:	4b3c      	ldr	r3, [pc, #240]	; (24768 <le_init+0x174>)
   24678:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   2467c:	f013 0f08 	tst.w	r3, #8
   24680:	d137      	bne.n	246f2 <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   24682:	4b39      	ldr	r3, [pc, #228]	; (24768 <le_init+0x174>)
   24684:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   24688:	f013 0f20 	tst.w	r3, #32
   2468c:	d141      	bne.n	24712 <le_init+0x11e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   2468e:	4b36      	ldr	r3, [pc, #216]	; (24768 <le_init+0x174>)
   24690:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   24694:	f013 0f40 	tst.w	r3, #64	; 0x40
   24698:	d00e      	beq.n	246b8 <le_init+0xc4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   2469a:	aa01      	add	r2, sp, #4
   2469c:	2100      	movs	r1, #0
   2469e:	f242 002a 	movw	r0, #8234	; 0x202a
   246a2:	f7ff fe51 	bl	24348 <bt_hci_cmd_send_sync>
		if (err) {
   246a6:	4603      	mov	r3, r0
   246a8:	2800      	cmp	r0, #0
   246aa:	d1b3      	bne.n	24614 <le_init+0x20>
		le_read_resolving_list_size_complete(rsp);
   246ac:	9801      	ldr	r0, [sp, #4]
   246ae:	f7ff f857 	bl	23760 <le_read_resolving_list_size_complete>
		net_buf_unref(rsp);
   246b2:	9801      	ldr	r0, [sp, #4]
   246b4:	f016 f9b3 	bl	3aa1e <net_buf_unref>
	return  le_set_event_mask();
   246b8:	f7ff ff42 	bl	24540 <le_set_event_mask>
   246bc:	4603      	mov	r3, r0
   246be:	e7a9      	b.n	24614 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   246c0:	2102      	movs	r1, #2
   246c2:	f640 406d 	movw	r0, #3181	; 0xc6d
   246c6:	f7ff fe03 	bl	242d0 <bt_hci_cmd_create>
		if (!buf) {
   246ca:	4604      	mov	r4, r0
   246cc:	2800      	cmp	r0, #0
   246ce:	d047      	beq.n	24760 <le_init+0x16c>
   246d0:	2102      	movs	r1, #2
   246d2:	3008      	adds	r0, #8
   246d4:	f016 f9ed 	bl	3aab2 <net_buf_simple_add>
		cp_le->le = 0x01;
   246d8:	2301      	movs	r3, #1
   246da:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   246dc:	2200      	movs	r2, #0
   246de:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   246e0:	4621      	mov	r1, r4
   246e2:	f640 406d 	movw	r0, #3181	; 0xc6d
   246e6:	f7ff fe2f 	bl	24348 <bt_hci_cmd_send_sync>
		if (err) {
   246ea:	4603      	mov	r3, r0
   246ec:	2800      	cmp	r0, #0
   246ee:	d0c2      	beq.n	24676 <le_init+0x82>
   246f0:	e790      	b.n	24614 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   246f2:	aa01      	add	r2, sp, #4
   246f4:	2100      	movs	r1, #0
   246f6:	f242 001c 	movw	r0, #8220	; 0x201c
   246fa:	f7ff fe25 	bl	24348 <bt_hci_cmd_send_sync>
		if (err) {
   246fe:	4603      	mov	r3, r0
   24700:	2800      	cmp	r0, #0
   24702:	d187      	bne.n	24614 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   24704:	9801      	ldr	r0, [sp, #4]
   24706:	f7ff f80d 	bl	23724 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   2470a:	9801      	ldr	r0, [sp, #4]
   2470c:	f016 f987 	bl	3aa1e <net_buf_unref>
   24710:	e7b7      	b.n	24682 <le_init+0x8e>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   24712:	f10d 0102 	add.w	r1, sp, #2
   24716:	4668      	mov	r0, sp
   24718:	f7ff fee2 	bl	244e0 <hci_le_read_max_data_len>
		if (err) {
   2471c:	4603      	mov	r3, r0
   2471e:	2800      	cmp	r0, #0
   24720:	f47f af78 	bne.w	24614 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   24724:	2104      	movs	r1, #4
   24726:	f242 0024 	movw	r0, #8228	; 0x2024
   2472a:	f7ff fdd1 	bl	242d0 <bt_hci_cmd_create>
		if (!buf) {
   2472e:	4604      	mov	r4, r0
   24730:	b198      	cbz	r0, 2475a <le_init+0x166>
   24732:	2104      	movs	r1, #4
   24734:	3008      	adds	r0, #8
   24736:	f016 f9bc 	bl	3aab2 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   2473a:	f8bd 3000 	ldrh.w	r3, [sp]
   2473e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   24740:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   24744:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   24746:	2200      	movs	r2, #0
   24748:	4621      	mov	r1, r4
   2474a:	f242 0024 	movw	r0, #8228	; 0x2024
   2474e:	f7ff fdfb 	bl	24348 <bt_hci_cmd_send_sync>
		if (err) {
   24752:	4603      	mov	r3, r0
   24754:	2800      	cmp	r0, #0
   24756:	d09a      	beq.n	2468e <le_init+0x9a>
   24758:	e75c      	b.n	24614 <le_init+0x20>
			return -ENOBUFS;
   2475a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2475e:	e759      	b.n	24614 <le_init+0x20>
			return -ENOBUFS;
   24760:	f06f 0368 	mvn.w	r3, #104	; 0x68
   24764:	e756      	b.n	24614 <le_init+0x20>
   24766:	bf00      	nop
   24768:	200002b0 	.word	0x200002b0
   2476c:	0003d1dc 	.word	0x0003d1dc
   24770:	0003d1a4 	.word	0x0003d1a4
   24774:	0003ef80 	.word	0x0003ef80

00024778 <bt_br_init>:
{
   24778:	b510      	push	{r4, lr}
   2477a:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   2477c:	4b0b      	ldr	r3, [pc, #44]	; (247ac <bt_br_init+0x34>)
   2477e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   24782:	b11b      	cbz	r3, 2478c <bt_br_init+0x14>
		return 0;
   24784:	2400      	movs	r4, #0
}
   24786:	4620      	mov	r0, r4
   24788:	b002      	add	sp, #8
   2478a:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   2478c:	aa01      	add	r2, sp, #4
   2478e:	2100      	movs	r1, #0
   24790:	f241 0005 	movw	r0, #4101	; 0x1005
   24794:	f7ff fdd8 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   24798:	4604      	mov	r4, r0
   2479a:	2800      	cmp	r0, #0
   2479c:	d1f3      	bne.n	24786 <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   2479e:	9801      	ldr	r0, [sp, #4]
   247a0:	f7ff f87e 	bl	238a0 <read_buffer_size_complete>
	net_buf_unref(rsp);
   247a4:	9801      	ldr	r0, [sp, #4]
   247a6:	f016 f93a 	bl	3aa1e <net_buf_unref>
	return 0;
   247aa:	e7ec      	b.n	24786 <bt_br_init+0xe>
   247ac:	200002b0 	.word	0x200002b0

000247b0 <set_event_mask>:
{
   247b0:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   247b2:	2108      	movs	r1, #8
   247b4:	f640 4001 	movw	r0, #3073	; 0xc01
   247b8:	f7ff fd8a 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   247bc:	b338      	cbz	r0, 2480e <set_event_mask+0x5e>
   247be:	4604      	mov	r4, r0
   247c0:	2108      	movs	r1, #8
   247c2:	4408      	add	r0, r1
   247c4:	f016 f975 	bl	3aab2 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
   247c8:	4b12      	ldr	r3, [pc, #72]	; (24814 <set_event_mask+0x64>)
   247ca:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   247ce:	f013 0f01 	tst.w	r3, #1
   247d2:	d119      	bne.n	24808 <set_event_mask+0x58>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   247d4:	4a10      	ldr	r2, [pc, #64]	; (24818 <set_event_mask+0x68>)
   247d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
   247da:	b291      	uxth	r1, r2
	dst[0] = val;
   247dc:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   247de:	0a09      	lsrs	r1, r1, #8
   247e0:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   247e2:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   247e4:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   247e6:	0e12      	lsrs	r2, r2, #24
   247e8:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   247ea:	b29a      	uxth	r2, r3
	dst[0] = val;
   247ec:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   247ee:	0a12      	lsrs	r2, r2, #8
   247f0:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   247f2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   247f4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   247f6:	0e1b      	lsrs	r3, r3, #24
   247f8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   247fa:	2200      	movs	r2, #0
   247fc:	4621      	mov	r1, r4
   247fe:	f640 4001 	movw	r0, #3073	; 0xc01
   24802:	f7ff fda1 	bl	24348 <bt_hci_cmd_send_sync>
}
   24806:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   24808:	4a04      	ldr	r2, [pc, #16]	; (2481c <set_event_mask+0x6c>)
   2480a:	4b05      	ldr	r3, [pc, #20]	; (24820 <set_event_mask+0x70>)
   2480c:	e7e5      	b.n	247da <set_event_mask+0x2a>
		return -ENOBUFS;
   2480e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24812:	e7f8      	b.n	24806 <set_event_mask+0x56>
   24814:	200002b0 	.word	0x200002b0
   24818:	02008810 	.word	0x02008810
   2481c:	02008890 	.word	0x02008890
   24820:	20008000 	.word	0x20008000

00024824 <hci_vs_init>:
{
   24824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24828:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   2482a:	aa05      	add	r2, sp, #20
   2482c:	2100      	movs	r1, #0
   2482e:	f64f 4001 	movw	r0, #64513	; 0xfc01
   24832:	f7ff fd89 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   24836:	2800      	cmp	r0, #0
   24838:	d178      	bne.n	2492c <hci_vs_init+0x108>
	rp.info = (void *)rsp->data;
   2483a:	9b05      	ldr	r3, [sp, #20]
   2483c:	689c      	ldr	r4, [r3, #8]
   2483e:	4d56      	ldr	r5, [pc, #344]	; (24998 <hci_vs_init+0x174>)
   24840:	4b56      	ldr	r3, [pc, #344]	; (2499c <hci_vs_init+0x178>)
   24842:	1aed      	subs	r5, r5, r3
   24844:	08ed      	lsrs	r5, r5, #3
	BT_INFO("HW Platform: %s (0x%04x)",
   24846:	2703      	movs	r7, #3
   24848:	f04f 0600 	mov.w	r6, #0
   2484c:	f367 0602 	bfi	r6, r7, #0, #3
   24850:	f36f 06c5 	bfc	r6, #3, #3
   24854:	f365 168f 	bfi	r6, r5, #6, #10
   24858:	f8b4 8001 	ldrh.w	r8, [r4, #1]
   2485c:	4640      	mov	r0, r8
   2485e:	f7fe ffa5 	bl	237ac <vs_hw_platform>
   24862:	4601      	mov	r1, r0
   24864:	4633      	mov	r3, r6
   24866:	4642      	mov	r2, r8
   24868:	484d      	ldr	r0, [pc, #308]	; (249a0 <hci_vs_init+0x17c>)
   2486a:	f7fb fd53 	bl	20314 <log_2>
	BT_INFO("HW Variant: %s (0x%04x)",
   2486e:	f04f 0600 	mov.w	r6, #0
   24872:	f367 0602 	bfi	r6, r7, #0, #3
   24876:	f36f 06c5 	bfc	r6, #3, #3
   2487a:	f365 168f 	bfi	r6, r5, #6, #10
   2487e:	f8b4 8003 	ldrh.w	r8, [r4, #3]
   24882:	4641      	mov	r1, r8
   24884:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   24888:	f7fe ff9c 	bl	237c4 <vs_hw_variant>
   2488c:	4601      	mov	r1, r0
   2488e:	4633      	mov	r3, r6
   24890:	4642      	mov	r2, r8
   24892:	4844      	ldr	r0, [pc, #272]	; (249a4 <hci_vs_init+0x180>)
   24894:	f7fb fd3e 	bl	20314 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   24898:	f04f 0600 	mov.w	r6, #0
   2489c:	f367 0602 	bfi	r6, r7, #0, #3
   248a0:	f36f 06c5 	bfc	r6, #3, #3
   248a4:	f365 168f 	bfi	r6, r5, #6, #10
   248a8:	7965      	ldrb	r5, [r4, #5]
   248aa:	4628      	mov	r0, r5
   248ac:	f7fe ff9a 	bl	237e4 <vs_fw_variant>
   248b0:	9000      	str	r0, [sp, #0]
   248b2:	9501      	str	r5, [sp, #4]
   248b4:	79a3      	ldrb	r3, [r4, #6]
   248b6:	9302      	str	r3, [sp, #8]
   248b8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   248bc:	9303      	str	r3, [sp, #12]
   248be:	f8d4 3009 	ldr.w	r3, [r4, #9]
   248c2:	9304      	str	r3, [sp, #16]
   248c4:	4633      	mov	r3, r6
   248c6:	2205      	movs	r2, #5
   248c8:	4669      	mov	r1, sp
   248ca:	4837      	ldr	r0, [pc, #220]	; (249a8 <hci_vs_init+0x184>)
   248cc:	f7fb fd5e 	bl	2038c <log_n>
	net_buf_unref(rsp);
   248d0:	9805      	ldr	r0, [sp, #20]
   248d2:	f016 f8a4 	bl	3aa1e <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   248d6:	aa05      	add	r2, sp, #20
   248d8:	2100      	movs	r1, #0
   248da:	f64f 4002 	movw	r0, #64514	; 0xfc02
   248de:	f7ff fd33 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   248e2:	2800      	cmp	r0, #0
   248e4:	d135      	bne.n	24952 <hci_vs_init+0x12e>
	rp.cmds = (void *)rsp->data;
   248e6:	9b05      	ldr	r3, [sp, #20]
   248e8:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   248ea:	4c30      	ldr	r4, [pc, #192]	; (249ac <hci_vs_init+0x188>)
   248ec:	2202      	movs	r2, #2
   248ee:	3101      	adds	r1, #1
   248f0:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   248f4:	f012 fa36 	bl	36d64 <memcpy>
	net_buf_unref(rsp);
   248f8:	9805      	ldr	r0, [sp, #20]
   248fa:	f016 f890 	bl	3aa1e <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   248fe:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   24902:	f013 0f04 	tst.w	r3, #4
   24906:	d021      	beq.n	2494c <hci_vs_init+0x128>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   24908:	aa05      	add	r2, sp, #20
   2490a:	2100      	movs	r1, #0
   2490c:	f64f 4003 	movw	r0, #64515	; 0xfc03
   24910:	f7ff fd1a 	bl	24348 <bt_hci_cmd_send_sync>
		if (err) {
   24914:	bb70      	cbnz	r0, 24974 <hci_vs_init+0x150>
		rp.feat = (void *)rsp->data;
   24916:	9b05      	ldr	r3, [sp, #20]
   24918:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   2491a:	2201      	movs	r2, #1
   2491c:	4411      	add	r1, r2
   2491e:	4824      	ldr	r0, [pc, #144]	; (249b0 <hci_vs_init+0x18c>)
   24920:	f012 fa20 	bl	36d64 <memcpy>
		net_buf_unref(rsp);
   24924:	9805      	ldr	r0, [sp, #20]
   24926:	f016 f87a 	bl	3aa1e <net_buf_unref>
   2492a:	e00f      	b.n	2494c <hci_vs_init+0x128>
   2492c:	4b1a      	ldr	r3, [pc, #104]	; (24998 <hci_vs_init+0x174>)
   2492e:	4a1b      	ldr	r2, [pc, #108]	; (2499c <hci_vs_init+0x178>)
   24930:	1a9b      	subs	r3, r3, r2
   24932:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   24934:	f04f 0100 	mov.w	r1, #0
   24938:	2202      	movs	r2, #2
   2493a:	f362 0102 	bfi	r1, r2, #0, #3
   2493e:	f36f 01c5 	bfc	r1, #3, #3
   24942:	f363 118f 	bfi	r1, r3, #6, #10
   24946:	481b      	ldr	r0, [pc, #108]	; (249b4 <hci_vs_init+0x190>)
   24948:	f7fb fd64 	bl	20414 <log_0>
}
   2494c:	b006      	add	sp, #24
   2494e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24952:	4b11      	ldr	r3, [pc, #68]	; (24998 <hci_vs_init+0x174>)
   24954:	4a11      	ldr	r2, [pc, #68]	; (2499c <hci_vs_init+0x178>)
   24956:	1a9b      	subs	r3, r3, r2
   24958:	40fb      	lsrs	r3, r7
		BT_WARN("Failed to read supported vendor commands");
   2495a:	f04f 0100 	mov.w	r1, #0
   2495e:	2202      	movs	r2, #2
   24960:	f362 0102 	bfi	r1, r2, #0, #3
   24964:	f36f 01c5 	bfc	r1, #3, #3
   24968:	f363 118f 	bfi	r1, r3, #6, #10
   2496c:	4812      	ldr	r0, [pc, #72]	; (249b8 <hci_vs_init+0x194>)
   2496e:	f7fb fd51 	bl	20414 <log_0>
		return;
   24972:	e7eb      	b.n	2494c <hci_vs_init+0x128>
   24974:	4b08      	ldr	r3, [pc, #32]	; (24998 <hci_vs_init+0x174>)
   24976:	4a09      	ldr	r2, [pc, #36]	; (2499c <hci_vs_init+0x178>)
   24978:	1a9b      	subs	r3, r3, r2
   2497a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   2497c:	f04f 0100 	mov.w	r1, #0
   24980:	2202      	movs	r2, #2
   24982:	f362 0102 	bfi	r1, r2, #0, #3
   24986:	f36f 01c5 	bfc	r1, #3, #3
   2498a:	f363 118f 	bfi	r1, r3, #6, #10
   2498e:	480b      	ldr	r0, [pc, #44]	; (249bc <hci_vs_init+0x198>)
   24990:	f7fb fd40 	bl	20414 <log_0>
			return;
   24994:	e7da      	b.n	2494c <hci_vs_init+0x128>
   24996:	bf00      	nop
   24998:	0003d1dc 	.word	0x0003d1dc
   2499c:	0003d1a4 	.word	0x0003d1a4
   249a0:	0003efc8 	.word	0x0003efc8
   249a4:	0003efe4 	.word	0x0003efe4
   249a8:	0003effc 	.word	0x0003effc
   249ac:	200002b0 	.word	0x200002b0
   249b0:	20000368 	.word	0x20000368
   249b4:	0003efa4 	.word	0x0003efa4
   249b8:	0003f02c 	.word	0x0003f02c
   249bc:	0003f058 	.word	0x0003f058

000249c0 <hci_init>:
{
   249c0:	b508      	push	{r3, lr}
	err = common_init();
   249c2:	f7ff fd43 	bl	2444c <common_init>
	if (err) {
   249c6:	4603      	mov	r3, r0
   249c8:	b108      	cbz	r0, 249ce <hci_init+0xe>
}
   249ca:	4618      	mov	r0, r3
   249cc:	bd08      	pop	{r3, pc}
	err = le_init();
   249ce:	f7ff fe11 	bl	245f4 <le_init>
	if (err) {
   249d2:	4603      	mov	r3, r0
   249d4:	2800      	cmp	r0, #0
   249d6:	d1f8      	bne.n	249ca <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   249d8:	4b16      	ldr	r3, [pc, #88]	; (24a34 <hci_init+0x74>)
   249da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   249de:	f013 0f20 	tst.w	r3, #32
   249e2:	d00e      	beq.n	24a02 <hci_init+0x42>
	else if (!bt_dev.le.acl_mtu) {
   249e4:	4b13      	ldr	r3, [pc, #76]	; (24a34 <hci_init+0x74>)
   249e6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   249ea:	b183      	cbz	r3, 24a0e <hci_init+0x4e>
	err = set_event_mask();
   249ec:	f7ff fee0 	bl	247b0 <set_event_mask>
	if (err) {
   249f0:	4603      	mov	r3, r0
   249f2:	2800      	cmp	r0, #0
   249f4:	d1e9      	bne.n	249ca <hci_init+0xa>
	hci_vs_init();
   249f6:	f7ff ff15 	bl	24824 <hci_vs_init>
	err = bt_id_init();
   249fa:	f001 fb61 	bl	260c0 <bt_id_init>
   249fe:	4603      	mov	r3, r0
	if (err) {
   24a00:	e7e3      	b.n	249ca <hci_init+0xa>
		err = bt_br_init();
   24a02:	f7ff feb9 	bl	24778 <bt_br_init>
		if (err) {
   24a06:	4603      	mov	r3, r0
   24a08:	2800      	cmp	r0, #0
   24a0a:	d0ef      	beq.n	249ec <hci_init+0x2c>
   24a0c:	e7dd      	b.n	249ca <hci_init+0xa>
   24a0e:	4b0a      	ldr	r3, [pc, #40]	; (24a38 <hci_init+0x78>)
   24a10:	4a0a      	ldr	r2, [pc, #40]	; (24a3c <hci_init+0x7c>)
   24a12:	1a9b      	subs	r3, r3, r2
   24a14:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL BR/EDR buffers not initialized");
   24a16:	f04f 0100 	mov.w	r1, #0
   24a1a:	2201      	movs	r2, #1
   24a1c:	f362 0102 	bfi	r1, r2, #0, #3
   24a20:	f36f 01c5 	bfc	r1, #3, #3
   24a24:	f363 118f 	bfi	r1, r3, #6, #10
   24a28:	4805      	ldr	r0, [pc, #20]	; (24a40 <hci_init+0x80>)
   24a2a:	f7fb fcf3 	bl	20414 <log_0>
		return -EIO;
   24a2e:	f06f 0304 	mvn.w	r3, #4
   24a32:	e7ca      	b.n	249ca <hci_init+0xa>
   24a34:	200002b0 	.word	0x200002b0
   24a38:	0003d1dc 	.word	0x0003d1dc
   24a3c:	0003d1a4 	.word	0x0003d1a4
   24a40:	0003f084 	.word	0x0003f084

00024a44 <le_phy_update_complete>:
{
   24a44:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   24a46:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   24a48:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   24a4c:	4630      	mov	r0, r6
   24a4e:	f002 fa65 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   24a52:	b188      	cbz	r0, 24a78 <le_phy_update_complete+0x34>
   24a54:	4604      	mov	r4, r0
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   24a56:	78e8      	ldrb	r0, [r5, #3]
   24a58:	f012 fb40 	bl	370dc <bt_get_phy>
   24a5c:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   24a60:	7928      	ldrb	r0, [r5, #4]
   24a62:	f012 fb3b 	bl	370dc <bt_get_phy>
   24a66:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   24a6a:	4620      	mov	r0, r4
   24a6c:	f002 fc0e 	bl	2728c <notify_le_phy_updated>
	bt_conn_unref(conn);
   24a70:	4620      	mov	r0, r4
   24a72:	f012 fe95 	bl	377a0 <bt_conn_unref>
}
   24a76:	bd70      	pop	{r4, r5, r6, pc}
   24a78:	4b08      	ldr	r3, [pc, #32]	; (24a9c <le_phy_update_complete+0x58>)
   24a7a:	4a09      	ldr	r2, [pc, #36]	; (24aa0 <le_phy_update_complete+0x5c>)
   24a7c:	1a9b      	subs	r3, r3, r2
   24a7e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   24a80:	f04f 0200 	mov.w	r2, #0
   24a84:	2101      	movs	r1, #1
   24a86:	f361 0202 	bfi	r2, r1, #0, #3
   24a8a:	f36f 02c5 	bfc	r2, #3, #3
   24a8e:	f363 128f 	bfi	r2, r3, #6, #10
   24a92:	4631      	mov	r1, r6
   24a94:	4803      	ldr	r0, [pc, #12]	; (24aa4 <le_phy_update_complete+0x60>)
   24a96:	f7fb fc07 	bl	202a8 <log_1>
		return;
   24a9a:	e7ec      	b.n	24a76 <le_phy_update_complete+0x32>
   24a9c:	0003d1dc 	.word	0x0003d1dc
   24aa0:	0003d1a4 	.word	0x0003d1a4
   24aa4:	0003ec38 	.word	0x0003ec38

00024aa8 <bt_le_create_conn_legacy>:
{
   24aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24aaa:	b087      	sub	sp, #28
   24aac:	4605      	mov	r5, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   24aae:	f10d 010b 	add.w	r1, sp, #11
   24ab2:	2000      	movs	r0, #0
   24ab4:	f001 fada 	bl	2606c <bt_id_set_create_conn_own_addr>
	if (err) {
   24ab8:	b108      	cbz	r0, 24abe <bt_le_create_conn_legacy+0x16>
}
   24aba:	b007      	add	sp, #28
   24abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   24abe:	2119      	movs	r1, #25
   24ac0:	f242 000d 	movw	r0, #8205	; 0x200d
   24ac4:	f7ff fc04 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   24ac8:	4606      	mov	r6, r0
   24aca:	2800      	cmp	r0, #0
   24acc:	d042      	beq.n	24b54 <bt_le_create_conn_legacy+0xac>
   24ace:	2119      	movs	r1, #25
   24ad0:	3008      	adds	r0, #8
   24ad2:	f015 ffee 	bl	3aab2 <net_buf_simple_add>
   24ad6:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
   24ad8:	2219      	movs	r2, #25
   24ada:	2100      	movs	r1, #0
   24adc:	f012 f966 	bl	36dac <memset>
	cp->own_addr_type = own_addr_type;
   24ae0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   24ae4:	7323      	strb	r3, [r4, #12]
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   24ae6:	f105 0188 	add.w	r1, r5, #136	; 0x88
		if (!bt_dev.le.rl_size ||
   24aea:	4b1c      	ldr	r3, [pc, #112]	; (24b5c <bt_le_create_conn_legacy+0xb4>)
   24aec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   24af0:	b123      	cbz	r3, 24afc <bt_le_create_conn_legacy+0x54>
		    bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   24af2:	4a1a      	ldr	r2, [pc, #104]	; (24b5c <bt_le_create_conn_legacy+0xb4>)
   24af4:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
		if (!bt_dev.le.rl_size ||
   24af8:	4293      	cmp	r3, r2
   24afa:	d201      	bcs.n	24b00 <bt_le_create_conn_legacy+0x58>
			peer_addr = &conn->le.resp_addr;
   24afc:	f105 0196 	add.w	r1, r5, #150	; 0x96
	memcpy(dst, src, sizeof(*dst));
   24b00:	2207      	movs	r2, #7
   24b02:	1d60      	adds	r0, r4, #5
   24b04:	f012 f92e 	bl	36d64 <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   24b08:	2700      	movs	r7, #0
   24b0a:	7127      	strb	r7, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   24b0c:	4a13      	ldr	r2, [pc, #76]	; (24b5c <bt_le_create_conn_legacy+0xb4>)
   24b0e:	8993      	ldrh	r3, [r2, #12]
   24b10:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   24b12:	89d3      	ldrh	r3, [r2, #14]
   24b14:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   24b16:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   24b1a:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   24b1e:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   24b22:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   24b26:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   24b2a:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   24b2e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   24b32:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   24b36:	2301      	movs	r3, #1
   24b38:	9300      	str	r3, [sp, #0]
   24b3a:	230b      	movs	r3, #11
   24b3c:	32cc      	adds	r2, #204	; 0xcc
   24b3e:	a903      	add	r1, sp, #12
   24b40:	4630      	mov	r0, r6
   24b42:	f7ff fbb3 	bl	242ac <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   24b46:	463a      	mov	r2, r7
   24b48:	4631      	mov	r1, r6
   24b4a:	f242 000d 	movw	r0, #8205	; 0x200d
   24b4e:	f7ff fbfb 	bl	24348 <bt_hci_cmd_send_sync>
   24b52:	e7b2      	b.n	24aba <bt_le_create_conn_legacy+0x12>
		return -ENOBUFS;
   24b54:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24b58:	e7af      	b.n	24aba <bt_le_create_conn_legacy+0x12>
   24b5a:	bf00      	nop
   24b5c:	200002b0 	.word	0x200002b0

00024b60 <bt_le_create_conn_cancel>:
{
   24b60:	b530      	push	{r4, r5, lr}
   24b62:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   24b64:	2100      	movs	r1, #0
   24b66:	f242 000e 	movw	r0, #8206	; 0x200e
   24b6a:	f7ff fbb1 	bl	242d0 <bt_hci_cmd_create>
   24b6e:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   24b70:	2500      	movs	r5, #0
   24b72:	9500      	str	r5, [sp, #0]
   24b74:	230b      	movs	r3, #11
   24b76:	4a06      	ldr	r2, [pc, #24]	; (24b90 <bt_le_create_conn_cancel+0x30>)
   24b78:	a903      	add	r1, sp, #12
   24b7a:	f7ff fb97 	bl	242ac <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   24b7e:	462a      	mov	r2, r5
   24b80:	4621      	mov	r1, r4
   24b82:	f242 000e 	movw	r0, #8206	; 0x200e
   24b86:	f7ff fbdf 	bl	24348 <bt_hci_cmd_send_sync>
}
   24b8a:	b007      	add	sp, #28
   24b8c:	bd30      	pop	{r4, r5, pc}
   24b8e:	bf00      	nop
   24b90:	2000037c 	.word	0x2000037c

00024b94 <hci_encrypt_key_refresh_complete>:
{
   24b94:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   24b96:	6883      	ldr	r3, [r0, #8]
	uint8_t status = evt->status;
   24b98:	781c      	ldrb	r4, [r3, #0]
	handle = sys_le16_to_cpu(evt->handle);
   24b9a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   24b9e:	4630      	mov	r0, r6
   24ba0:	f002 f9bc 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   24ba4:	b188      	cbz	r0, 24bca <hci_encrypt_key_refresh_complete+0x36>
   24ba6:	4605      	mov	r5, r0
	if (status) {
   24ba8:	bb0c      	cbnz	r4, 24bee <hci_encrypt_key_refresh_complete+0x5a>
	if (conn->type == BT_CONN_TYPE_LE) {
   24baa:	7883      	ldrb	r3, [r0, #2]
   24bac:	2b01      	cmp	r3, #1
   24bae:	d02a      	beq.n	24c06 <hci_encrypt_key_refresh_complete+0x72>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   24bb0:	4620      	mov	r0, r4
   24bb2:	f012 fae6 	bl	37182 <bt_security_err_get>
   24bb6:	4602      	mov	r2, r0
   24bb8:	4621      	mov	r1, r4
   24bba:	4628      	mov	r0, r5
   24bbc:	f002 fbf2 	bl	273a4 <bt_conn_security_changed>
	if (status) {
   24bc0:	bb54      	cbnz	r4, 24c18 <hci_encrypt_key_refresh_complete+0x84>
	bt_conn_unref(conn);
   24bc2:	4628      	mov	r0, r5
   24bc4:	f012 fdec 	bl	377a0 <bt_conn_unref>
}
   24bc8:	bd70      	pop	{r4, r5, r6, pc}
   24bca:	4b1e      	ldr	r3, [pc, #120]	; (24c44 <hci_encrypt_key_refresh_complete+0xb0>)
   24bcc:	4a1e      	ldr	r2, [pc, #120]	; (24c48 <hci_encrypt_key_refresh_complete+0xb4>)
   24bce:	1a9b      	subs	r3, r3, r2
   24bd0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   24bd2:	f04f 0200 	mov.w	r2, #0
   24bd6:	2101      	movs	r1, #1
   24bd8:	f361 0202 	bfi	r2, r1, #0, #3
   24bdc:	f36f 02c5 	bfc	r2, #3, #3
   24be0:	f363 128f 	bfi	r2, r3, #6, #10
   24be4:	4631      	mov	r1, r6
   24be6:	4819      	ldr	r0, [pc, #100]	; (24c4c <hci_encrypt_key_refresh_complete+0xb8>)
   24be8:	f7fb fb5e 	bl	202a8 <log_1>
		return;
   24bec:	e7ec      	b.n	24bc8 <hci_encrypt_key_refresh_complete+0x34>
		bt_conn_security_changed(conn, status,
   24bee:	4620      	mov	r0, r4
   24bf0:	f012 fac7 	bl	37182 <bt_security_err_get>
   24bf4:	4602      	mov	r2, r0
   24bf6:	4621      	mov	r1, r4
   24bf8:	4628      	mov	r0, r5
   24bfa:	f002 fbd3 	bl	273a4 <bt_conn_security_changed>
		bt_conn_unref(conn);
   24bfe:	4628      	mov	r0, r5
   24c00:	f012 fdce 	bl	377a0 <bt_conn_unref>
		return;
   24c04:	e7e0      	b.n	24bc8 <hci_encrypt_key_refresh_complete+0x34>
		bt_smp_update_keys(conn);
   24c06:	f007 fea9 	bl	2c95c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   24c0a:	4628      	mov	r0, r5
   24c0c:	f012 fa2b 	bl	37066 <update_sec_level>
   24c10:	2800      	cmp	r0, #0
   24c12:	d1cd      	bne.n	24bb0 <hci_encrypt_key_refresh_complete+0x1c>
			status = BT_HCI_ERR_AUTH_FAIL;
   24c14:	2405      	movs	r4, #5
   24c16:	e7cb      	b.n	24bb0 <hci_encrypt_key_refresh_complete+0x1c>
   24c18:	4b0a      	ldr	r3, [pc, #40]	; (24c44 <hci_encrypt_key_refresh_complete+0xb0>)
   24c1a:	4a0b      	ldr	r2, [pc, #44]	; (24c48 <hci_encrypt_key_refresh_complete+0xb4>)
   24c1c:	1a9b      	subs	r3, r3, r2
   24c1e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set required security level");
   24c20:	f04f 0100 	mov.w	r1, #0
   24c24:	2201      	movs	r2, #1
   24c26:	f362 0102 	bfi	r1, r2, #0, #3
   24c2a:	f36f 01c5 	bfc	r1, #3, #3
   24c2e:	f363 118f 	bfi	r1, r3, #6, #10
   24c32:	4807      	ldr	r0, [pc, #28]	; (24c50 <hci_encrypt_key_refresh_complete+0xbc>)
   24c34:	f7fb fbee 	bl	20414 <log_0>
		bt_conn_disconnect(conn, status);
   24c38:	4621      	mov	r1, r4
   24c3a:	4628      	mov	r0, r5
   24c3c:	f012 febc 	bl	379b8 <bt_conn_disconnect>
   24c40:	e7bf      	b.n	24bc2 <hci_encrypt_key_refresh_complete+0x2e>
   24c42:	bf00      	nop
   24c44:	0003d1dc 	.word	0x0003d1dc
   24c48:	0003d1a4 	.word	0x0003d1a4
   24c4c:	0003ec10 	.word	0x0003ec10
   24c50:	0003f0a8 	.word	0x0003f0a8

00024c54 <hci_encrypt_change>:
{
   24c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   24c56:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   24c58:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   24c5c:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   24c5e:	4638      	mov	r0, r7
   24c60:	f002 f95c 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   24c64:	b198      	cbz	r0, 24c8e <hci_encrypt_change+0x3a>
   24c66:	4604      	mov	r4, r0
	if (status) {
   24c68:	bb1d      	cbnz	r5, 24cb2 <hci_encrypt_change+0x5e>
	conn->encrypt = evt->encrypt;
   24c6a:	78f3      	ldrb	r3, [r6, #3]
   24c6c:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   24c6e:	7882      	ldrb	r2, [r0, #2]
   24c70:	2a01      	cmp	r2, #1
   24c72:	d02a      	beq.n	24cca <hci_encrypt_change+0x76>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   24c74:	4628      	mov	r0, r5
   24c76:	f012 fa84 	bl	37182 <bt_security_err_get>
   24c7a:	4602      	mov	r2, r0
   24c7c:	4629      	mov	r1, r5
   24c7e:	4620      	mov	r0, r4
   24c80:	f002 fb90 	bl	273a4 <bt_conn_security_changed>
	if (status) {
   24c84:	bb65      	cbnz	r5, 24ce0 <hci_encrypt_change+0x8c>
	bt_conn_unref(conn);
   24c86:	4620      	mov	r0, r4
   24c88:	f012 fd8a 	bl	377a0 <bt_conn_unref>
}
   24c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c8e:	4b1f      	ldr	r3, [pc, #124]	; (24d0c <hci_encrypt_change+0xb8>)
   24c90:	4a1f      	ldr	r2, [pc, #124]	; (24d10 <hci_encrypt_change+0xbc>)
   24c92:	1a9b      	subs	r3, r3, r2
   24c94:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   24c96:	f04f 0200 	mov.w	r2, #0
   24c9a:	2101      	movs	r1, #1
   24c9c:	f361 0202 	bfi	r2, r1, #0, #3
   24ca0:	f36f 02c5 	bfc	r2, #3, #3
   24ca4:	f363 128f 	bfi	r2, r3, #6, #10
   24ca8:	4639      	mov	r1, r7
   24caa:	481a      	ldr	r0, [pc, #104]	; (24d14 <hci_encrypt_change+0xc0>)
   24cac:	f7fb fafc 	bl	202a8 <log_1>
		return;
   24cb0:	e7ec      	b.n	24c8c <hci_encrypt_change+0x38>
		bt_conn_security_changed(conn, status,
   24cb2:	4628      	mov	r0, r5
   24cb4:	f012 fa65 	bl	37182 <bt_security_err_get>
   24cb8:	4602      	mov	r2, r0
   24cba:	4629      	mov	r1, r5
   24cbc:	4620      	mov	r0, r4
   24cbe:	f002 fb71 	bl	273a4 <bt_conn_security_changed>
		bt_conn_unref(conn);
   24cc2:	4620      	mov	r0, r4
   24cc4:	f012 fd6c 	bl	377a0 <bt_conn_unref>
		return;
   24cc8:	e7e0      	b.n	24c8c <hci_encrypt_change+0x38>
		if (conn->encrypt) {
   24cca:	b933      	cbnz	r3, 24cda <hci_encrypt_change+0x86>
		if (!update_sec_level(conn)) {
   24ccc:	4620      	mov	r0, r4
   24cce:	f012 f9ca 	bl	37066 <update_sec_level>
   24cd2:	2800      	cmp	r0, #0
   24cd4:	d1ce      	bne.n	24c74 <hci_encrypt_change+0x20>
			status = BT_HCI_ERR_AUTH_FAIL;
   24cd6:	2505      	movs	r5, #5
   24cd8:	e7cc      	b.n	24c74 <hci_encrypt_change+0x20>
			bt_smp_update_keys(conn);
   24cda:	f007 fe3f 	bl	2c95c <bt_smp_update_keys>
   24cde:	e7f5      	b.n	24ccc <hci_encrypt_change+0x78>
   24ce0:	4b0a      	ldr	r3, [pc, #40]	; (24d0c <hci_encrypt_change+0xb8>)
   24ce2:	4a0b      	ldr	r2, [pc, #44]	; (24d10 <hci_encrypt_change+0xbc>)
   24ce4:	1a9b      	subs	r3, r3, r2
   24ce6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set required security level");
   24ce8:	f04f 0100 	mov.w	r1, #0
   24cec:	2201      	movs	r2, #1
   24cee:	f362 0102 	bfi	r1, r2, #0, #3
   24cf2:	f36f 01c5 	bfc	r1, #3, #3
   24cf6:	f363 118f 	bfi	r1, r3, #6, #10
   24cfa:	4807      	ldr	r0, [pc, #28]	; (24d18 <hci_encrypt_change+0xc4>)
   24cfc:	f7fb fb8a 	bl	20414 <log_0>
		bt_conn_disconnect(conn, status);
   24d00:	4629      	mov	r1, r5
   24d02:	4620      	mov	r0, r4
   24d04:	f012 fe58 	bl	379b8 <bt_conn_disconnect>
   24d08:	e7bd      	b.n	24c86 <hci_encrypt_change+0x32>
   24d0a:	bf00      	nop
   24d0c:	0003d1dc 	.word	0x0003d1dc
   24d10:	0003d1a4 	.word	0x0003d1a4
   24d14:	0003ec10 	.word	0x0003ec10
   24d18:	0003f0a8 	.word	0x0003f0a8

00024d1c <bt_hci_cmd_send>:
{
   24d1c:	b538      	push	{r3, r4, r5, lr}
   24d1e:	4604      	mov	r4, r0
	if (!buf) {
   24d20:	460d      	mov	r5, r1
   24d22:	b151      	cbz	r1, 24d3a <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   24d24:	f640 4335 	movw	r3, #3125	; 0xc35
   24d28:	429c      	cmp	r4, r3
   24d2a:	d00e      	beq.n	24d4a <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   24d2c:	4629      	mov	r1, r5
   24d2e:	4814      	ldr	r0, [pc, #80]	; (24d80 <bt_hci_cmd_send+0x64>)
   24d30:	f015 fe68 	bl	3aa04 <net_buf_put>
	return 0;
   24d34:	2400      	movs	r4, #0
}
   24d36:	4620      	mov	r0, r4
   24d38:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   24d3a:	f7ff fac9 	bl	242d0 <bt_hci_cmd_create>
		if (!buf) {
   24d3e:	4605      	mov	r5, r0
   24d40:	2800      	cmp	r0, #0
   24d42:	d1ef      	bne.n	24d24 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   24d44:	f06f 0468 	mvn.w	r4, #104	; 0x68
   24d48:	e7f5      	b.n	24d36 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   24d4a:	4628      	mov	r0, r5
   24d4c:	f012 fa3e 	bl	371cc <bt_send>
		if (err) {
   24d50:	4604      	mov	r4, r0
   24d52:	2800      	cmp	r0, #0
   24d54:	d0ef      	beq.n	24d36 <bt_hci_cmd_send+0x1a>
   24d56:	4b0b      	ldr	r3, [pc, #44]	; (24d84 <bt_hci_cmd_send+0x68>)
   24d58:	4a0b      	ldr	r2, [pc, #44]	; (24d88 <bt_hci_cmd_send+0x6c>)
   24d5a:	1a9b      	subs	r3, r3, r2
   24d5c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   24d5e:	f04f 0200 	mov.w	r2, #0
   24d62:	2101      	movs	r1, #1
   24d64:	f361 0202 	bfi	r2, r1, #0, #3
   24d68:	f36f 02c5 	bfc	r2, #3, #3
   24d6c:	f363 128f 	bfi	r2, r3, #6, #10
   24d70:	4601      	mov	r1, r0
   24d72:	4806      	ldr	r0, [pc, #24]	; (24d8c <bt_hci_cmd_send+0x70>)
   24d74:	f7fb fa98 	bl	202a8 <log_1>
			net_buf_unref(buf);
   24d78:	4628      	mov	r0, r5
   24d7a:	f015 fe50 	bl	3aa1e <net_buf_unref>
		return err;
   24d7e:	e7da      	b.n	24d36 <bt_hci_cmd_send+0x1a>
   24d80:	20000404 	.word	0x20000404
   24d84:	0003d1dc 	.word	0x0003d1dc
   24d88:	0003d1a4 	.word	0x0003d1a4
   24d8c:	0003f0d0 	.word	0x0003f0d0

00024d90 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   24d90:	7b43      	ldrb	r3, [r0, #13]
   24d92:	2b07      	cmp	r3, #7
   24d94:	d000      	beq.n	24d98 <conn_auto_initiate+0x8>
   24d96:	4770      	bx	lr
{
   24d98:	b510      	push	{r4, lr}
   24d9a:	b082      	sub	sp, #8
   24d9c:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24d9e:	f3bf 8f5b 	dmb	ish
   24da2:	6843      	ldr	r3, [r0, #4]
   24da4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   24da8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   24dac:	d10b      	bne.n	24dc6 <conn_auto_initiate+0x36>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   24dae:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   24db0:	b12b      	cbz	r3, 24dbe <conn_auto_initiate+0x2e>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   24db2:	4b1d      	ldr	r3, [pc, #116]	; (24e28 <conn_auto_initiate+0x98>)
   24db4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   24db8:	f013 0f08 	tst.w	r3, #8
   24dbc:	d003      	beq.n	24dc6 <conn_auto_initiate+0x36>
		err = hci_le_read_remote_features(conn);
   24dbe:	4620      	mov	r0, r4
   24dc0:	f012 fa24 	bl	3720c <hci_le_read_remote_features>
		if (!err) {
   24dc4:	b160      	cbz	r0, 24de0 <conn_auto_initiate+0x50>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   24dc6:	4b18      	ldr	r3, [pc, #96]	; (24e28 <conn_auto_initiate+0x98>)
   24dc8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   24dcc:	f013 0f20 	tst.w	r3, #32
   24dd0:	d006      	beq.n	24de0 <conn_auto_initiate+0x50>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   24dd2:	4b15      	ldr	r3, [pc, #84]	; (24e28 <conn_auto_initiate+0x98>)
   24dd4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   24dd8:	689b      	ldr	r3, [r3, #8]
   24dda:	f013 0f02 	tst.w	r3, #2
   24dde:	d101      	bne.n	24de4 <conn_auto_initiate+0x54>
}
   24de0:	b002      	add	sp, #8
   24de2:	bd10      	pop	{r4, pc}
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   24de4:	f10d 0106 	add.w	r1, sp, #6
   24de8:	a801      	add	r0, sp, #4
   24dea:	f7ff fb79 	bl	244e0 <hci_le_read_max_data_len>
			if (!err) {
   24dee:	2800      	cmp	r0, #0
   24df0:	d1f6      	bne.n	24de0 <conn_auto_initiate+0x50>
				err = bt_le_set_data_len(conn,
   24df2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   24df6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   24dfa:	4620      	mov	r0, r4
   24dfc:	f012 f9ea 	bl	371d4 <bt_le_set_data_len>
				if (err) {
   24e00:	4601      	mov	r1, r0
   24e02:	2800      	cmp	r0, #0
   24e04:	d0ec      	beq.n	24de0 <conn_auto_initiate+0x50>
   24e06:	4b09      	ldr	r3, [pc, #36]	; (24e2c <conn_auto_initiate+0x9c>)
   24e08:	4a09      	ldr	r2, [pc, #36]	; (24e30 <conn_auto_initiate+0xa0>)
   24e0a:	1a9b      	subs	r3, r3, r2
   24e0c:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
   24e0e:	f04f 0200 	mov.w	r2, #0
   24e12:	2001      	movs	r0, #1
   24e14:	f360 0202 	bfi	r2, r0, #0, #3
   24e18:	f36f 02c5 	bfc	r2, #3, #3
   24e1c:	f363 128f 	bfi	r2, r3, #6, #10
   24e20:	4804      	ldr	r0, [pc, #16]	; (24e34 <conn_auto_initiate+0xa4>)
   24e22:	f7fb fa41 	bl	202a8 <log_1>
		}
   24e26:	e7db      	b.n	24de0 <conn_auto_initiate+0x50>
   24e28:	200002b0 	.word	0x200002b0
   24e2c:	0003d1dc 	.word	0x0003d1dc
   24e30:	0003d1a4 	.word	0x0003d1a4
   24e34:	0003f0f4 	.word	0x0003f0f4

00024e38 <bt_hci_le_enh_conn_complete>:
{
   24e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e3c:	b084      	sub	sp, #16
   24e3e:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   24e40:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   24e44:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   24e48:	4640      	mov	r0, r8
   24e4a:	f7fe fc3f 	bl	236cc <conn_handle_is_disconnected>
   24e4e:	4606      	mov	r6, r0
	bt_id_pending_keys_update();
   24e50:	f000 fe06 	bl	25a60 <bt_id_pending_keys_update>
	if (evt->status) {
   24e54:	7820      	ldrb	r0, [r4, #0]
   24e56:	b1d8      	cbz	r0, 24e90 <bt_hci_le_enh_conn_complete+0x58>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24e58:	2802      	cmp	r0, #2
   24e5a:	d013      	beq.n	24e84 <bt_hci_le_enh_conn_complete+0x4c>
   24e5c:	4b61      	ldr	r3, [pc, #388]	; (24fe4 <bt_hci_le_enh_conn_complete+0x1ac>)
   24e5e:	4a62      	ldr	r2, [pc, #392]	; (24fe8 <bt_hci_le_enh_conn_complete+0x1b0>)
   24e60:	1a9b      	subs	r3, r3, r2
   24e62:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   24e64:	f04f 0200 	mov.w	r2, #0
   24e68:	2102      	movs	r1, #2
   24e6a:	f361 0202 	bfi	r2, r1, #0, #3
   24e6e:	f36f 02c5 	bfc	r2, #3, #3
   24e72:	f363 128f 	bfi	r2, r3, #6, #10
   24e76:	4601      	mov	r1, r0
   24e78:	485c      	ldr	r0, [pc, #368]	; (24fec <bt_hci_le_enh_conn_complete+0x1b4>)
   24e7a:	f7fb fa15 	bl	202a8 <log_1>
}
   24e7e:	b004      	add	sp, #16
   24e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			le_conn_complete_cancel();
   24e84:	f7fe fd3c 	bl	23900 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   24e88:	2000      	movs	r0, #0
   24e8a:	f001 fa07 	bl	2629c <bt_le_scan_update>
			return;
   24e8e:	e7f6      	b.n	24e7e <bt_hci_le_enh_conn_complete+0x46>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   24e90:	7923      	ldrb	r3, [r4, #4]
   24e92:	3b02      	subs	r3, #2
   24e94:	b2db      	uxtb	r3, r3
   24e96:	2b01      	cmp	r3, #1
   24e98:	d95a      	bls.n	24f50 <bt_hci_le_enh_conn_complete+0x118>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   24e9a:	78e3      	ldrb	r3, [r4, #3]
   24e9c:	2b01      	cmp	r3, #1
   24e9e:	d06c      	beq.n	24f7a <bt_hci_le_enh_conn_complete+0x142>
				bt_lookup_id_addr(id, &evt->peer_addr));
   24ea0:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   24ea2:	4629      	mov	r1, r5
   24ea4:	f012 fab7 	bl	37416 <bt_lookup_id_addr>
   24ea8:	4601      	mov	r1, r0
   24eaa:	2207      	movs	r2, #7
   24eac:	4668      	mov	r0, sp
   24eae:	f011 ff59 	bl	36d64 <memcpy>
   24eb2:	2207      	movs	r2, #7
   24eb4:	4629      	mov	r1, r5
   24eb6:	a802      	add	r0, sp, #8
   24eb8:	f011 ff54 	bl	36d64 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   24ebc:	4669      	mov	r1, sp
   24ebe:	78e0      	ldrb	r0, [r4, #3]
   24ec0:	f012 f8ed 	bl	3709e <find_pending_connect>
   24ec4:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   24ec6:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24ec8:	b963      	cbnz	r3, 24ee4 <bt_hci_le_enh_conn_complete+0xac>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24eca:	4b49      	ldr	r3, [pc, #292]	; (24ff0 <bt_hci_le_enh_conn_complete+0x1b8>)
   24ecc:	f3bf 8f5b 	dmb	ish
   24ed0:	e853 2f00 	ldrex	r2, [r3]
   24ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   24ed8:	e843 2100 	strex	r1, r2, [r3]
   24edc:	2900      	cmp	r1, #0
   24ede:	d1f7      	bne.n	24ed0 <bt_hci_le_enh_conn_complete+0x98>
   24ee0:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   24ee4:	2d00      	cmp	r5, #0
   24ee6:	d04c      	beq.n	24f82 <bt_hci_le_enh_conn_complete+0x14a>
	conn->handle = handle;
   24ee8:	4628      	mov	r0, r5
   24eea:	f820 7b88 	strh.w	r7, [r0], #136
   24eee:	2207      	movs	r2, #7
   24ef0:	4669      	mov	r1, sp
   24ef2:	f011 ff37 	bl	36d64 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   24ef6:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   24efa:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   24efe:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   24f02:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   24f06:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   24f0a:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   24f0e:	78e3      	ldrb	r3, [r4, #3]
   24f10:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   24f12:	2200      	movs	r2, #0
   24f14:	732a      	strb	r2, [r5, #12]
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   24f16:	2201      	movs	r2, #1
   24f18:	f885 20b8 	strb.w	r2, [r5, #184]	; 0xb8
	conn->le.phy.rx_phy = BT_GAP_LE_PHY_1M;
   24f1c:	f885 20b9 	strb.w	r2, [r5, #185]	; 0xb9
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24f20:	2b00      	cmp	r3, #0
   24f22:	d048      	beq.n	24fb6 <bt_hci_le_enh_conn_complete+0x17e>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   24f24:	2107      	movs	r1, #7
   24f26:	4628      	mov	r0, r5
   24f28:	f002 f802 	bl	26f30 <bt_conn_set_state>
	if (is_disconnected) {
   24f2c:	2e00      	cmp	r6, #0
   24f2e:	d153      	bne.n	24fd8 <bt_hci_le_enh_conn_complete+0x1a0>
	bt_conn_connected(conn);
   24f30:	4628      	mov	r0, r5
   24f32:	f012 fc7f 	bl	37834 <bt_conn_connected>
	conn_auto_initiate(conn);
   24f36:	4628      	mov	r0, r5
   24f38:	f7ff ff2a 	bl	24d90 <conn_auto_initiate>
	bt_conn_unref(conn);
   24f3c:	4628      	mov	r0, r5
   24f3e:	f012 fc2f 	bl	377a0 <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   24f42:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24f44:	2b00      	cmp	r3, #0
   24f46:	d19a      	bne.n	24e7e <bt_hci_le_enh_conn_complete+0x46>
		bt_le_scan_update(false);
   24f48:	2000      	movs	r0, #0
   24f4a:	f001 f9a7 	bl	2629c <bt_le_scan_update>
   24f4e:	e796      	b.n	24e7e <bt_hci_le_enh_conn_complete+0x46>
   24f50:	2207      	movs	r2, #7
   24f52:	1d21      	adds	r1, r4, #4
   24f54:	4668      	mov	r0, sp
   24f56:	f011 ff05 	bl	36d64 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   24f5a:	f89d 3000 	ldrb.w	r3, [sp]
   24f5e:	3b02      	subs	r3, #2
   24f60:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   24f64:	2206      	movs	r2, #6
   24f66:	f104 0111 	add.w	r1, r4, #17
   24f6a:	f10d 0009 	add.w	r0, sp, #9
   24f6e:	f011 fef9 	bl	36d64 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   24f72:	2301      	movs	r3, #1
   24f74:	f88d 3008 	strb.w	r3, [sp, #8]
   24f78:	e7a0      	b.n	24ebc <bt_hci_le_enh_conn_complete+0x84>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   24f7a:	4b1e      	ldr	r3, [pc, #120]	; (24ff4 <bt_hci_le_enh_conn_complete+0x1bc>)
   24f7c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   24f80:	e78e      	b.n	24ea0 <bt_hci_le_enh_conn_complete+0x68>
   24f82:	4b18      	ldr	r3, [pc, #96]	; (24fe4 <bt_hci_le_enh_conn_complete+0x1ac>)
   24f84:	4a18      	ldr	r2, [pc, #96]	; (24fe8 <bt_hci_le_enh_conn_complete+0x1b0>)
   24f86:	1a9b      	subs	r3, r3, r2
   24f88:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   24f8a:	2201      	movs	r2, #1
   24f8c:	f362 0502 	bfi	r5, r2, #0, #3
   24f90:	f36f 05c5 	bfc	r5, #3, #3
   24f94:	f363 158f 	bfi	r5, r3, #6, #10
   24f98:	1d20      	adds	r0, r4, #4
   24f9a:	f7fe f891 	bl	230c0 <bt_addr_le_str_real>
   24f9e:	f7fb f80b 	bl	1ffb8 <z_log_strdup>
   24fa2:	4601      	mov	r1, r0
   24fa4:	462a      	mov	r2, r5
   24fa6:	4814      	ldr	r0, [pc, #80]	; (24ff8 <bt_hci_le_enh_conn_complete+0x1c0>)
   24fa8:	f7fb f97e 	bl	202a8 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   24fac:	211f      	movs	r1, #31
   24fae:	4640      	mov	r0, r8
   24fb0:	f012 f8a3 	bl	370fa <bt_hci_disconnect>
		return;
   24fb4:	e763      	b.n	24e7e <bt_hci_le_enh_conn_complete+0x46>
	memcpy(dst, src, sizeof(*dst));
   24fb6:	2207      	movs	r2, #7
   24fb8:	a902      	add	r1, sp, #8
   24fba:	f105 0096 	add.w	r0, r5, #150	; 0x96
   24fbe:	f011 fed1 	bl	36d64 <memcpy>
					&bt_dev.id_addr[conn->id]);
   24fc2:	7a29      	ldrb	r1, [r5, #8]
   24fc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   24fc8:	2207      	movs	r2, #7
   24fca:	4b0a      	ldr	r3, [pc, #40]	; (24ff4 <bt_hci_le_enh_conn_complete+0x1bc>)
   24fcc:	4419      	add	r1, r3
   24fce:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   24fd2:	f011 fec7 	bl	36d64 <memcpy>
}
   24fd6:	e7a5      	b.n	24f24 <bt_hci_le_enh_conn_complete+0xec>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   24fd8:	2101      	movs	r1, #1
   24fda:	4628      	mov	r0, r5
   24fdc:	f001 ffa8 	bl	26f30 <bt_conn_set_state>
   24fe0:	e7a6      	b.n	24f30 <bt_hci_le_enh_conn_complete+0xf8>
   24fe2:	bf00      	nop
   24fe4:	0003d1dc 	.word	0x0003d1dc
   24fe8:	0003d1a4 	.word	0x0003d1a4
   24fec:	0003f110 	.word	0x0003f110
   24ff0:	2000037c 	.word	0x2000037c
   24ff4:	200002b0 	.word	0x200002b0
   24ff8:	0003f12c 	.word	0x0003f12c

00024ffc <le_remote_feat_complete>:
{
   24ffc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   24ffe:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   25000:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   25004:	4630      	mov	r0, r6
   25006:	f001 ff89 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   2500a:	b1b0      	cbz	r0, 2503a <le_remote_feat_complete+0x3e>
   2500c:	4604      	mov	r4, r0
	if (!evt->status) {
   2500e:	782b      	ldrb	r3, [r5, #0]
   25010:	b32b      	cbz	r3, 2505e <le_remote_feat_complete+0x62>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   25012:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25014:	f3bf 8f5b 	dmb	ish
   25018:	e853 2f00 	ldrex	r2, [r3]
   2501c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   25020:	e843 2100 	strex	r1, r2, [r3]
   25024:	2900      	cmp	r1, #0
   25026:	d1f7      	bne.n	25018 <le_remote_feat_complete+0x1c>
   25028:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   2502c:	4620      	mov	r0, r4
   2502e:	f7ff feaf 	bl	24d90 <conn_auto_initiate>
	bt_conn_unref(conn);
   25032:	4620      	mov	r0, r4
   25034:	f012 fbb4 	bl	377a0 <bt_conn_unref>
}
   25038:	bd70      	pop	{r4, r5, r6, pc}
   2503a:	4b0c      	ldr	r3, [pc, #48]	; (2506c <le_remote_feat_complete+0x70>)
   2503c:	4a0c      	ldr	r2, [pc, #48]	; (25070 <le_remote_feat_complete+0x74>)
   2503e:	1a9b      	subs	r3, r3, r2
   25040:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   25042:	f04f 0200 	mov.w	r2, #0
   25046:	2101      	movs	r1, #1
   25048:	f361 0202 	bfi	r2, r1, #0, #3
   2504c:	f36f 02c5 	bfc	r2, #3, #3
   25050:	f363 128f 	bfi	r2, r3, #6, #10
   25054:	4631      	mov	r1, r6
   25056:	4807      	ldr	r0, [pc, #28]	; (25074 <le_remote_feat_complete+0x78>)
   25058:	f7fb f926 	bl	202a8 <log_1>
		return;
   2505c:	e7ec      	b.n	25038 <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
   2505e:	2208      	movs	r2, #8
   25060:	1ce9      	adds	r1, r5, #3
   25062:	30ac      	adds	r0, #172	; 0xac
   25064:	f011 fe7e 	bl	36d64 <memcpy>
   25068:	e7d3      	b.n	25012 <le_remote_feat_complete+0x16>
   2506a:	bf00      	nop
   2506c:	0003d1dc 	.word	0x0003d1dc
   25070:	0003d1a4 	.word	0x0003d1a4
   25074:	0003ec38 	.word	0x0003ec38

00025078 <le_ltk_reply>:
{
   25078:	b570      	push	{r4, r5, r6, lr}
   2507a:	4605      	mov	r5, r0
   2507c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   2507e:	2112      	movs	r1, #18
   25080:	f242 001a 	movw	r0, #8218	; 0x201a
   25084:	f7ff f924 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   25088:	b180      	cbz	r0, 250ac <le_ltk_reply+0x34>
   2508a:	4606      	mov	r6, r0
   2508c:	2112      	movs	r1, #18
   2508e:	3008      	adds	r0, #8
   25090:	f015 fd0f 	bl	3aab2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   25094:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   25098:	2210      	movs	r2, #16
   2509a:	4621      	mov	r1, r4
   2509c:	f011 fe62 	bl	36d64 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   250a0:	4631      	mov	r1, r6
   250a2:	f242 001a 	movw	r0, #8218	; 0x201a
   250a6:	f7ff fe39 	bl	24d1c <bt_hci_cmd_send>
}
   250aa:	bd70      	pop	{r4, r5, r6, pc}
   250ac:	4b08      	ldr	r3, [pc, #32]	; (250d0 <le_ltk_reply+0x58>)
   250ae:	4a09      	ldr	r2, [pc, #36]	; (250d4 <le_ltk_reply+0x5c>)
   250b0:	1a9b      	subs	r3, r3, r2
   250b2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Out of command buffers");
   250b4:	f04f 0100 	mov.w	r1, #0
   250b8:	2201      	movs	r2, #1
   250ba:	f362 0102 	bfi	r1, r2, #0, #3
   250be:	f36f 01c5 	bfc	r1, #3, #3
   250c2:	f363 118f 	bfi	r1, r3, #6, #10
   250c6:	4804      	ldr	r0, [pc, #16]	; (250d8 <le_ltk_reply+0x60>)
   250c8:	f7fb f9a4 	bl	20414 <log_0>
		return;
   250cc:	e7ed      	b.n	250aa <le_ltk_reply+0x32>
   250ce:	bf00      	nop
   250d0:	0003d1dc 	.word	0x0003d1dc
   250d4:	0003d1a4 	.word	0x0003d1a4
   250d8:	0003f148 	.word	0x0003f148

000250dc <le_ltk_neg_reply>:
{
   250dc:	b538      	push	{r3, r4, r5, lr}
   250de:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   250e0:	2102      	movs	r1, #2
   250e2:	f242 001b 	movw	r0, #8219	; 0x201b
   250e6:	f7ff f8f3 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   250ea:	b158      	cbz	r0, 25104 <le_ltk_neg_reply+0x28>
   250ec:	4605      	mov	r5, r0
   250ee:	2102      	movs	r1, #2
   250f0:	3008      	adds	r0, #8
   250f2:	f015 fcde 	bl	3aab2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   250f6:	8004      	strh	r4, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   250f8:	4629      	mov	r1, r5
   250fa:	f242 001b 	movw	r0, #8219	; 0x201b
   250fe:	f7ff fe0d 	bl	24d1c <bt_hci_cmd_send>
}
   25102:	bd38      	pop	{r3, r4, r5, pc}
   25104:	4b08      	ldr	r3, [pc, #32]	; (25128 <le_ltk_neg_reply+0x4c>)
   25106:	4a09      	ldr	r2, [pc, #36]	; (2512c <le_ltk_neg_reply+0x50>)
   25108:	1a9b      	subs	r3, r3, r2
   2510a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Out of command buffers");
   2510c:	f04f 0100 	mov.w	r1, #0
   25110:	2201      	movs	r2, #1
   25112:	f362 0102 	bfi	r1, r2, #0, #3
   25116:	f36f 01c5 	bfc	r1, #3, #3
   2511a:	f363 118f 	bfi	r1, r3, #6, #10
   2511e:	4804      	ldr	r0, [pc, #16]	; (25130 <le_ltk_neg_reply+0x54>)
   25120:	f7fb f978 	bl	20414 <log_0>
		return;
   25124:	e7ed      	b.n	25102 <le_ltk_neg_reply+0x26>
   25126:	bf00      	nop
   25128:	0003d1dc 	.word	0x0003d1dc
   2512c:	0003d1a4 	.word	0x0003d1a4
   25130:	0003f148 	.word	0x0003f148

00025134 <le_ltk_request>:
{
   25134:	b570      	push	{r4, r5, r6, lr}
   25136:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   25138:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   2513a:	8825      	ldrh	r5, [r4, #0]
	conn = bt_conn_lookup_handle(handle);
   2513c:	4628      	mov	r0, r5
   2513e:	f001 feed 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   25142:	b1a0      	cbz	r0, 2516e <le_ltk_request+0x3a>
   25144:	4606      	mov	r6, r0
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   25146:	f8d4 2002 	ldr.w	r2, [r4, #2]
   2514a:	f8d4 3006 	ldr.w	r3, [r4, #6]
   2514e:	a902      	add	r1, sp, #8
   25150:	9101      	str	r1, [sp, #4]
   25152:	8961      	ldrh	r1, [r4, #10]
   25154:	9100      	str	r1, [sp, #0]
   25156:	f015 f85e 	bl	3a216 <bt_smp_request_ltk>
   2515a:	b1d0      	cbz	r0, 25192 <le_ltk_request+0x5e>
		le_ltk_reply(handle, ltk);
   2515c:	a902      	add	r1, sp, #8
   2515e:	4628      	mov	r0, r5
   25160:	f7ff ff8a 	bl	25078 <le_ltk_reply>
	bt_conn_unref(conn);
   25164:	4630      	mov	r0, r6
   25166:	f012 fb1b 	bl	377a0 <bt_conn_unref>
}
   2516a:	b006      	add	sp, #24
   2516c:	bd70      	pop	{r4, r5, r6, pc}
   2516e:	4b0b      	ldr	r3, [pc, #44]	; (2519c <le_ltk_request+0x68>)
   25170:	4a0b      	ldr	r2, [pc, #44]	; (251a0 <le_ltk_request+0x6c>)
   25172:	1a9b      	subs	r3, r3, r2
   25174:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   25176:	f04f 0200 	mov.w	r2, #0
   2517a:	2101      	movs	r1, #1
   2517c:	f361 0202 	bfi	r2, r1, #0, #3
   25180:	f36f 02c5 	bfc	r2, #3, #3
   25184:	f363 128f 	bfi	r2, r3, #6, #10
   25188:	4629      	mov	r1, r5
   2518a:	4806      	ldr	r0, [pc, #24]	; (251a4 <le_ltk_request+0x70>)
   2518c:	f7fb f88c 	bl	202a8 <log_1>
		return;
   25190:	e7eb      	b.n	2516a <le_ltk_request+0x36>
		le_ltk_neg_reply(handle);
   25192:	4628      	mov	r0, r5
   25194:	f7ff ffa2 	bl	250dc <le_ltk_neg_reply>
   25198:	e7e4      	b.n	25164 <le_ltk_request+0x30>
   2519a:	bf00      	nop
   2519c:	0003d1dc 	.word	0x0003d1dc
   251a0:	0003d1a4 	.word	0x0003d1a4
   251a4:	0003ec38 	.word	0x0003ec38

000251a8 <le_conn_param_neg_reply>:
{
   251a8:	b570      	push	{r4, r5, r6, lr}
   251aa:	4605      	mov	r5, r0
   251ac:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   251ae:	2103      	movs	r1, #3
   251b0:	f242 0021 	movw	r0, #8225	; 0x2021
   251b4:	f7ff f88c 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   251b8:	b160      	cbz	r0, 251d4 <le_conn_param_neg_reply+0x2c>
   251ba:	4606      	mov	r6, r0
   251bc:	2103      	movs	r1, #3
   251be:	3008      	adds	r0, #8
   251c0:	f015 fc77 	bl	3aab2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   251c4:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   251c6:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   251c8:	4631      	mov	r1, r6
   251ca:	f242 0021 	movw	r0, #8225	; 0x2021
   251ce:	f7ff fda5 	bl	24d1c <bt_hci_cmd_send>
}
   251d2:	bd70      	pop	{r4, r5, r6, pc}
   251d4:	4b08      	ldr	r3, [pc, #32]	; (251f8 <le_conn_param_neg_reply+0x50>)
   251d6:	4a09      	ldr	r2, [pc, #36]	; (251fc <le_conn_param_neg_reply+0x54>)
   251d8:	1a9b      	subs	r3, r3, r2
   251da:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   251dc:	f04f 0100 	mov.w	r1, #0
   251e0:	2201      	movs	r2, #1
   251e2:	f362 0102 	bfi	r1, r2, #0, #3
   251e6:	f36f 01c5 	bfc	r1, #3, #3
   251ea:	f363 118f 	bfi	r1, r3, #6, #10
   251ee:	4804      	ldr	r0, [pc, #16]	; (25200 <le_conn_param_neg_reply+0x58>)
   251f0:	f7fb f910 	bl	20414 <log_0>
		return;
   251f4:	e7ed      	b.n	251d2 <le_conn_param_neg_reply+0x2a>
   251f6:	bf00      	nop
   251f8:	0003d1dc 	.word	0x0003d1dc
   251fc:	0003d1a4 	.word	0x0003d1a4
   25200:	0003f160 	.word	0x0003f160

00025204 <le_conn_param_req>:
{
   25204:	b530      	push	{r4, r5, lr}
   25206:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   25208:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   2520a:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   2520c:	885a      	ldrh	r2, [r3, #2]
   2520e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   25212:	889a      	ldrh	r2, [r3, #4]
   25214:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   25218:	88da      	ldrh	r2, [r3, #6]
   2521a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2521e:	891b      	ldrh	r3, [r3, #8]
   25220:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   25224:	4620      	mov	r0, r4
   25226:	f001 fe79 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   2522a:	b168      	cbz	r0, 25248 <le_conn_param_req+0x44>
   2522c:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   2522e:	4669      	mov	r1, sp
   25230:	f002 f850 	bl	272d4 <le_param_req>
   25234:	b9f0      	cbnz	r0, 25274 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   25236:	211e      	movs	r1, #30
   25238:	4620      	mov	r0, r4
   2523a:	f7ff ffb5 	bl	251a8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   2523e:	4628      	mov	r0, r5
   25240:	f012 faae 	bl	377a0 <bt_conn_unref>
}
   25244:	b003      	add	sp, #12
   25246:	bd30      	pop	{r4, r5, pc}
   25248:	4b0d      	ldr	r3, [pc, #52]	; (25280 <le_conn_param_req+0x7c>)
   2524a:	4a0e      	ldr	r2, [pc, #56]	; (25284 <le_conn_param_req+0x80>)
   2524c:	1a9b      	subs	r3, r3, r2
   2524e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   25250:	f04f 0200 	mov.w	r2, #0
   25254:	2101      	movs	r1, #1
   25256:	f361 0202 	bfi	r2, r1, #0, #3
   2525a:	f36f 02c5 	bfc	r2, #3, #3
   2525e:	f363 128f 	bfi	r2, r3, #6, #10
   25262:	4621      	mov	r1, r4
   25264:	4808      	ldr	r0, [pc, #32]	; (25288 <le_conn_param_req+0x84>)
   25266:	f7fb f81f 	bl	202a8 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   2526a:	2102      	movs	r1, #2
   2526c:	4620      	mov	r0, r4
   2526e:	f7ff ff9b 	bl	251a8 <le_conn_param_neg_reply>
		return;
   25272:	e7e7      	b.n	25244 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   25274:	4669      	mov	r1, sp
   25276:	4620      	mov	r0, r4
   25278:	f012 f823 	bl	372c2 <le_conn_param_req_reply>
   2527c:	e7df      	b.n	2523e <le_conn_param_req+0x3a>
   2527e:	bf00      	nop
   25280:	0003d1dc 	.word	0x0003d1dc
   25284:	0003d1a4 	.word	0x0003d1a4
   25288:	0003ec38 	.word	0x0003ec38

0002528c <send_cmd>:
{
   2528c:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2528e:	2200      	movs	r2, #0
   25290:	2300      	movs	r3, #0
   25292:	4837      	ldr	r0, [pc, #220]	; (25370 <send_cmd+0xe4>)
   25294:	f015 fb91 	bl	3a9ba <net_buf_get>
	BT_ASSERT(buf);
   25298:	4604      	mov	r4, r0
   2529a:	b370      	cbz	r0, 252fa <send_cmd+0x6e>
   2529c:	4d35      	ldr	r5, [pc, #212]	; (25374 <send_cmd+0xe8>)
   2529e:	f04f 32ff 	mov.w	r2, #4294967295
   252a2:	f04f 33ff 	mov.w	r3, #4294967295
   252a6:	f505 7090 	add.w	r0, r5, #288	; 0x120
   252aa:	f00b f807 	bl	302bc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   252ae:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   252b2:	b1b3      	cbz	r3, 252e2 <send_cmd+0x56>
   252b4:	4b30      	ldr	r3, [pc, #192]	; (25378 <send_cmd+0xec>)
   252b6:	4a31      	ldr	r2, [pc, #196]	; (2537c <send_cmd+0xf0>)
   252b8:	1a9b      	subs	r3, r3, r2
   252ba:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   252bc:	f04f 0100 	mov.w	r1, #0
   252c0:	2201      	movs	r2, #1
   252c2:	f362 0102 	bfi	r1, r2, #0, #3
   252c6:	f36f 01c5 	bfc	r1, #3, #3
   252ca:	f363 118f 	bfi	r1, r3, #6, #10
   252ce:	482c      	ldr	r0, [pc, #176]	; (25380 <send_cmd+0xf4>)
   252d0:	f7fb f8a0 	bl	20414 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   252d4:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   252d8:	f015 fba1 	bl	3aa1e <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   252dc:	2300      	movs	r3, #0
   252de:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   252e2:	4620      	mov	r0, r4
   252e4:	f015 fbc1 	bl	3aa6a <net_buf_ref>
   252e8:	4b22      	ldr	r3, [pc, #136]	; (25374 <send_cmd+0xe8>)
   252ea:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
	err = bt_send(buf);
   252ee:	4620      	mov	r0, r4
   252f0:	f011 ff6c 	bl	371cc <bt_send>
	if (err) {
   252f4:	4601      	mov	r1, r0
   252f6:	b970      	cbnz	r0, 25316 <send_cmd+0x8a>
}
   252f8:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   252fa:	f640 132a 	movw	r3, #2346	; 0x92a
   252fe:	4a21      	ldr	r2, [pc, #132]	; (25384 <send_cmd+0xf8>)
   25300:	4921      	ldr	r1, [pc, #132]	; (25388 <send_cmd+0xfc>)
   25302:	4822      	ldr	r0, [pc, #136]	; (2538c <send_cmd+0x100>)
   25304:	f00f f8b3 	bl	3446e <printk>
   25308:	4040      	eors	r0, r0
   2530a:	f380 8811 	msr	BASEPRI, r0
   2530e:	f04f 0003 	mov.w	r0, #3
   25312:	df02      	svc	2
   25314:	e7c2      	b.n	2529c <send_cmd+0x10>
   25316:	4b18      	ldr	r3, [pc, #96]	; (25378 <send_cmd+0xec>)
   25318:	4a18      	ldr	r2, [pc, #96]	; (2537c <send_cmd+0xf0>)
   2531a:	1a9b      	subs	r3, r3, r2
   2531c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   2531e:	f04f 0200 	mov.w	r2, #0
   25322:	2001      	movs	r0, #1
   25324:	f360 0202 	bfi	r2, r0, #0, #3
   25328:	f36f 02c5 	bfc	r2, #3, #3
   2532c:	f363 128f 	bfi	r2, r3, #6, #10
   25330:	4817      	ldr	r0, [pc, #92]	; (25390 <send_cmd+0x104>)
   25332:	f7fa ffb9 	bl	202a8 <log_1>
	z_impl_k_sem_give(sem);
   25336:	4d0f      	ldr	r5, [pc, #60]	; (25374 <send_cmd+0xe8>)
   25338:	f505 7090 	add.w	r0, r5, #288	; 0x120
   2533c:	f00a ff96 	bl	3026c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   25340:	4620      	mov	r0, r4
   25342:	f015 fa80 	bl	3a846 <net_buf_id>
   25346:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2534a:	4b12      	ldr	r3, [pc, #72]	; (25394 <send_cmd+0x108>)
   2534c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   25350:	4622      	mov	r2, r4
   25352:	211f      	movs	r1, #31
   25354:	8840      	ldrh	r0, [r0, #2]
   25356:	f7fe fbff 	bl	23b58 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2535a:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   2535e:	f015 fb5e 	bl	3aa1e <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   25362:	2300      	movs	r3, #0
   25364:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
   25368:	4620      	mov	r0, r4
   2536a:	f015 fb58 	bl	3aa1e <net_buf_unref>
   2536e:	e7c3      	b.n	252f8 <send_cmd+0x6c>
   25370:	20000404 	.word	0x20000404
   25374:	200002b0 	.word	0x200002b0
   25378:	0003d1dc 	.word	0x0003d1dc
   2537c:	0003d1a4 	.word	0x0003d1a4
   25380:	0003f17c 	.word	0x0003f17c
   25384:	0003edd4 	.word	0x0003edd4
   25388:	00040520 	.word	0x00040520
   2538c:	0003ee24 	.word	0x0003ee24
   25390:	0003f0d0 	.word	0x0003f0d0
   25394:	200081d8 	.word	0x200081d8

00025398 <process_events>:
{
   25398:	b570      	push	{r4, r5, r6, lr}
   2539a:	4604      	mov	r4, r0
   2539c:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   2539e:	e013      	b.n	253c8 <process_events+0x30>
				send_cmd();
   253a0:	f7ff ff74 	bl	2528c <send_cmd>
   253a4:	e00e      	b.n	253c4 <process_events+0x2c>
   253a6:	4b12      	ldr	r3, [pc, #72]	; (253f0 <process_events+0x58>)
   253a8:	4a12      	ldr	r2, [pc, #72]	; (253f4 <process_events+0x5c>)
   253aa:	1a9b      	subs	r3, r3, r2
   253ac:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   253ae:	2202      	movs	r2, #2
   253b0:	f362 0602 	bfi	r6, r2, #0, #3
   253b4:	f36f 06c5 	bfc	r6, #3, #3
   253b8:	f363 168f 	bfi	r6, r3, #6, #10
   253bc:	4632      	mov	r2, r6
   253be:	480e      	ldr	r0, [pc, #56]	; (253f8 <process_events+0x60>)
   253c0:	f7fa ff72 	bl	202a8 <log_1>
	for (; count; ev++, count--) {
   253c4:	3414      	adds	r4, #20
   253c6:	3d01      	subs	r5, #1
   253c8:	b185      	cbz	r5, 253ec <process_events+0x54>
		switch (ev->state) {
   253ca:	68e1      	ldr	r1, [r4, #12]
   253cc:	f3c1 3145 	ubfx	r1, r1, #13, #6
   253d0:	2901      	cmp	r1, #1
   253d2:	d9f7      	bls.n	253c4 <process_events+0x2c>
   253d4:	2904      	cmp	r1, #4
   253d6:	d1e6      	bne.n	253a6 <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   253d8:	7b23      	ldrb	r3, [r4, #12]
   253da:	2b00      	cmp	r3, #0
   253dc:	d0e0      	beq.n	253a0 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   253de:	2b01      	cmp	r3, #1
   253e0:	d1f0      	bne.n	253c4 <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   253e2:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   253e4:	3838      	subs	r0, #56	; 0x38
   253e6:	f002 fa99 	bl	2791c <bt_conn_process_tx>
   253ea:	e7eb      	b.n	253c4 <process_events+0x2c>
}
   253ec:	bd70      	pop	{r4, r5, r6, pc}
   253ee:	bf00      	nop
   253f0:	0003d1dc 	.word	0x0003d1dc
   253f4:	0003d1a4 	.word	0x0003d1a4
   253f8:	0003f198 	.word	0x0003f198

000253fc <hci_tx_thread>:
{
   253fc:	b538      	push	{r3, r4, r5, lr}
   253fe:	e005      	b.n	2540c <hci_tx_thread+0x10>
		process_events(events, ev_count);
   25400:	4621      	mov	r1, r4
   25402:	4813      	ldr	r0, [pc, #76]	; (25450 <hci_tx_thread+0x54>)
   25404:	f7ff ffc8 	bl	25398 <process_events>
	z_impl_k_yield();
   25408:	f00b fc70 	bl	30cec <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   2540c:	4d10      	ldr	r5, [pc, #64]	; (25450 <hci_tx_thread+0x54>)
   2540e:	68eb      	ldr	r3, [r5, #12]
   25410:	f36f 3352 	bfc	r3, #13, #6
   25414:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   25416:	f105 0014 	add.w	r0, r5, #20
   2541a:	f001 fd5b 	bl	26ed4 <bt_conn_prepare_events>
   2541e:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   25420:	f04f 32ff 	mov.w	r2, #4294967295
   25424:	f04f 33ff 	mov.w	r3, #4294967295
   25428:	4621      	mov	r1, r4
   2542a:	4628      	mov	r0, r5
   2542c:	f00b ffb6 	bl	3139c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   25430:	2800      	cmp	r0, #0
   25432:	d0e5      	beq.n	25400 <hci_tx_thread+0x4>
   25434:	f640 1393 	movw	r3, #2451	; 0x993
   25438:	4a06      	ldr	r2, [pc, #24]	; (25454 <hci_tx_thread+0x58>)
   2543a:	4907      	ldr	r1, [pc, #28]	; (25458 <hci_tx_thread+0x5c>)
   2543c:	4807      	ldr	r0, [pc, #28]	; (2545c <hci_tx_thread+0x60>)
   2543e:	f00f f816 	bl	3446e <printk>
   25442:	4040      	eors	r0, r0
   25444:	f380 8811 	msr	BASEPRI, r0
   25448:	f04f 0003 	mov.w	r0, #3
   2544c:	df02      	svc	2
   2544e:	e7d7      	b.n	25400 <hci_tx_thread+0x4>
   25450:	200004d4 	.word	0x200004d4
   25454:	0003edd4 	.word	0x0003edd4
   25458:	0003ef18 	.word	0x0003ef18
   2545c:	0003ee24 	.word	0x0003ee24

00025460 <hci_event_prio>:
{
   25460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25464:	b084      	sub	sp, #16
   25466:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   25468:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2546c:	4628      	mov	r0, r5
   2546e:	f015 fb69 	bl	3ab44 <net_buf_simple_headroom>
   25472:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   25476:	89a3      	ldrh	r3, [r4, #12]
   25478:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2547c:	2b01      	cmp	r3, #1
   2547e:	d915      	bls.n	254ac <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   25480:	2102      	movs	r1, #2
   25482:	4628      	mov	r0, r5
   25484:	f015 fb46 	bl	3ab14 <net_buf_simple_pull_mem>
   25488:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2548a:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   2548c:	3b05      	subs	r3, #5
   2548e:	2b15      	cmp	r3, #21
   25490:	d81c      	bhi.n	254cc <hci_event_prio+0x6c>
   25492:	e8df f003 	tbb	[pc, r3]
   25496:	1b19      	.short	0x1b19
   25498:	1b1b1b1b 	.word	0x1b1b1b1b
   2549c:	3f1b1b1b 	.word	0x3f1b1b1b
   254a0:	1b1b1b3f 	.word	0x1b1b1b3f
   254a4:	1b1b1b3f 	.word	0x1b1b1b3f
   254a8:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   254ac:	f640 5327 	movw	r3, #3367	; 0xd27
   254b0:	4a3b      	ldr	r2, [pc, #236]	; (255a0 <hci_event_prio+0x140>)
   254b2:	493c      	ldr	r1, [pc, #240]	; (255a4 <hci_event_prio+0x144>)
   254b4:	483c      	ldr	r0, [pc, #240]	; (255a8 <hci_event_prio+0x148>)
   254b6:	f00e ffda 	bl	3446e <printk>
   254ba:	4040      	eors	r0, r0
   254bc:	f380 8811 	msr	BASEPRI, r0
   254c0:	f04f 0003 	mov.w	r0, #3
   254c4:	df02      	svc	2
   254c6:	e7db      	b.n	25480 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   254c8:	2603      	movs	r6, #3
   254ca:	e000      	b.n	254ce <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   254cc:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   254ce:	f016 0f01 	tst.w	r6, #1
   254d2:	d021      	beq.n	25518 <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   254d4:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   254d6:	2300      	movs	r3, #0
   254d8:	2b04      	cmp	r3, #4
   254da:	d83f      	bhi.n	2555c <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   254dc:	4a33      	ldr	r2, [pc, #204]	; (255ac <hci_event_prio+0x14c>)
   254de:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   254e2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   254e6:	4295      	cmp	r5, r2
   254e8:	d124      	bne.n	25534 <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   254ea:	89a1      	ldrh	r1, [r4, #12]
   254ec:	7843      	ldrb	r3, [r0, #1]
   254ee:	4299      	cmp	r1, r3
   254f0:	d322      	bcc.n	25538 <hci_event_prio+0xd8>
		handler->handler(buf);
   254f2:	6843      	ldr	r3, [r0, #4]
   254f4:	4620      	mov	r0, r4
   254f6:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   254f8:	f016 0f02 	tst.w	r6, #2
   254fc:	d04c      	beq.n	25598 <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   254fe:	6923      	ldr	r3, [r4, #16]
   25500:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   25504:	4413      	add	r3, r2
   25506:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   25508:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2550c:	81a3      	strh	r3, [r4, #12]
}
   2550e:	b004      	add	sp, #16
   25510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   25514:	2601      	movs	r6, #1
   25516:	e7da      	b.n	254ce <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   25518:	f640 532b 	movw	r3, #3371	; 0xd2b
   2551c:	4a20      	ldr	r2, [pc, #128]	; (255a0 <hci_event_prio+0x140>)
   2551e:	4924      	ldr	r1, [pc, #144]	; (255b0 <hci_event_prio+0x150>)
   25520:	4821      	ldr	r0, [pc, #132]	; (255a8 <hci_event_prio+0x148>)
   25522:	f00e ffa4 	bl	3446e <printk>
   25526:	4040      	eors	r0, r0
   25528:	f380 8811 	msr	BASEPRI, r0
   2552c:	f04f 0003 	mov.w	r0, #3
   25530:	df02      	svc	2
   25532:	e7cf      	b.n	254d4 <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   25534:	3301      	adds	r3, #1
   25536:	e7cf      	b.n	254d8 <hci_event_prio+0x78>
   25538:	4a1e      	ldr	r2, [pc, #120]	; (255b4 <hci_event_prio+0x154>)
   2553a:	4b1f      	ldr	r3, [pc, #124]	; (255b8 <hci_event_prio+0x158>)
   2553c:	1ad2      	subs	r2, r2, r3
   2553e:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   25540:	f04f 0300 	mov.w	r3, #0
   25544:	2001      	movs	r0, #1
   25546:	f360 0302 	bfi	r3, r0, #0, #3
   2554a:	f36f 03c5 	bfc	r3, #3, #3
   2554e:	f362 138f 	bfi	r3, r2, #6, #10
   25552:	462a      	mov	r2, r5
   25554:	4819      	ldr	r0, [pc, #100]	; (255bc <hci_event_prio+0x15c>)
   25556:	f7fa fedd 	bl	20314 <log_2>
			return;
   2555a:	e7cd      	b.n	254f8 <hci_event_prio+0x98>
   2555c:	4b15      	ldr	r3, [pc, #84]	; (255b4 <hci_event_prio+0x154>)
   2555e:	4a16      	ldr	r2, [pc, #88]	; (255b8 <hci_event_prio+0x158>)
   25560:	1a9b      	subs	r3, r3, r2
   25562:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   25564:	f04f 0700 	mov.w	r7, #0
   25568:	2202      	movs	r2, #2
   2556a:	f362 0702 	bfi	r7, r2, #0, #3
   2556e:	f36f 07c5 	bfc	r7, #3, #3
   25572:	f363 178f 	bfi	r7, r3, #6, #10
   25576:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   2557a:	4641      	mov	r1, r8
   2557c:	68a0      	ldr	r0, [r4, #8]
   2557e:	f7fd fd77 	bl	23070 <bt_hex_real>
   25582:	f7fa fd19 	bl	1ffb8 <z_log_strdup>
   25586:	4603      	mov	r3, r0
   25588:	f8ad 7000 	strh.w	r7, [sp]
   2558c:	4642      	mov	r2, r8
   2558e:	4629      	mov	r1, r5
   25590:	480b      	ldr	r0, [pc, #44]	; (255c0 <hci_event_prio+0x160>)
   25592:	f7fa fe4b 	bl	2022c <log_3>
   25596:	e7af      	b.n	254f8 <hci_event_prio+0x98>
		net_buf_unref(buf);
   25598:	4620      	mov	r0, r4
   2559a:	f015 fa40 	bl	3aa1e <net_buf_unref>
}
   2559e:	e7b6      	b.n	2550e <hci_event_prio+0xae>
   255a0:	0003edd4 	.word	0x0003edd4
   255a4:	0003ee08 	.word	0x0003ee08
   255a8:	0003ee24 	.word	0x0003ee24
   255ac:	0003f304 	.word	0x0003f304
   255b0:	0003f1bc 	.word	0x0003f1bc
   255b4:	0003d1dc 	.word	0x0003d1dc
   255b8:	0003d1a4 	.word	0x0003d1a4
   255bc:	0003ee8c 	.word	0x0003ee8c
   255c0:	0003eeb0 	.word	0x0003eeb0

000255c4 <bt_recv>:
{
   255c4:	b538      	push	{r3, r4, r5, lr}
   255c6:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   255c8:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   255ca:	2d01      	cmp	r5, #1
   255cc:	d007      	beq.n	255de <bt_recv+0x1a>
   255ce:	2d03      	cmp	r5, #3
   255d0:	d12c      	bne.n	2562c <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   255d2:	4601      	mov	r1, r0
   255d4:	4821      	ldr	r0, [pc, #132]	; (2565c <bt_recv+0x98>)
   255d6:	f015 fa15 	bl	3aa04 <net_buf_put>
		return 0;
   255da:	2000      	movs	r0, #0
}
   255dc:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   255de:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   255e0:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   255e2:	3b05      	subs	r3, #5
   255e4:	2b15      	cmp	r3, #21
   255e6:	d80e      	bhi.n	25606 <bt_recv+0x42>
   255e8:	e8df f003 	tbb	[pc, r3]
   255ec:	0d0d0d0b 	.word	0x0d0d0d0b
   255f0:	0d0d0d0d 	.word	0x0d0d0d0d
   255f4:	0d0e0e0d 	.word	0x0d0e0e0d
   255f8:	0d0e0d0d 	.word	0x0d0e0d0d
   255fc:	0d0d0d0d 	.word	0x0d0d0d0d
   25600:	0e0d      	.short	0x0e0d
   25602:	2503      	movs	r5, #3
   25604:	e000      	b.n	25608 <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   25606:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   25608:	f015 0f01 	tst.w	r5, #1
   2560c:	d104      	bne.n	25618 <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2560e:	f015 0f02 	tst.w	r5, #2
   25612:	d105      	bne.n	25620 <bt_recv+0x5c>
		return 0;
   25614:	2000      	movs	r0, #0
   25616:	e7e1      	b.n	255dc <bt_recv+0x18>
			hci_event_prio(buf);
   25618:	4620      	mov	r0, r4
   2561a:	f7ff ff21 	bl	25460 <hci_event_prio>
   2561e:	e7f6      	b.n	2560e <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   25620:	4621      	mov	r1, r4
   25622:	480e      	ldr	r0, [pc, #56]	; (2565c <bt_recv+0x98>)
   25624:	f015 f9ee 	bl	3aa04 <net_buf_put>
		return 0;
   25628:	2000      	movs	r0, #0
   2562a:	e7d7      	b.n	255dc <bt_recv+0x18>
   2562c:	4b0c      	ldr	r3, [pc, #48]	; (25660 <bt_recv+0x9c>)
   2562e:	4a0d      	ldr	r2, [pc, #52]	; (25664 <bt_recv+0xa0>)
   25630:	1a9b      	subs	r3, r3, r2
   25632:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   25634:	f04f 0200 	mov.w	r2, #0
   25638:	2101      	movs	r1, #1
   2563a:	f361 0202 	bfi	r2, r1, #0, #3
   2563e:	f36f 02c5 	bfc	r2, #3, #3
   25642:	f363 128f 	bfi	r2, r3, #6, #10
   25646:	4629      	mov	r1, r5
   25648:	4807      	ldr	r0, [pc, #28]	; (25668 <bt_recv+0xa4>)
   2564a:	f7fa fe2d 	bl	202a8 <log_1>
		net_buf_unref(buf);
   2564e:	4620      	mov	r0, r4
   25650:	f015 f9e5 	bl	3aa1e <net_buf_unref>
		return -EINVAL;
   25654:	f06f 0015 	mvn.w	r0, #21
   25658:	e7c0      	b.n	255dc <bt_recv+0x18>
   2565a:	bf00      	nop
   2565c:	200003ec 	.word	0x200003ec
   25660:	0003d1dc 	.word	0x0003d1dc
   25664:	0003d1a4 	.word	0x0003d1a4
   25668:	0003f1d8 	.word	0x0003f1d8

0002566c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2566c:	4b0a      	ldr	r3, [pc, #40]	; (25698 <bt_hci_driver_register+0x2c>)
   2566e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   25672:	b943      	cbnz	r3, 25686 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   25674:	68c3      	ldr	r3, [r0, #12]
   25676:	b14b      	cbz	r3, 2568c <bt_hci_driver_register+0x20>
   25678:	6903      	ldr	r3, [r0, #16]
   2567a:	b153      	cbz	r3, 25692 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   2567c:	4b06      	ldr	r3, [pc, #24]	; (25698 <bt_hci_driver_register+0x2c>)
   2567e:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
	return 0;
   25682:	2000      	movs	r0, #0
   25684:	4770      	bx	lr
		return -EALREADY;
   25686:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2568a:	4770      	bx	lr
		return -EINVAL;
   2568c:	f06f 0015 	mvn.w	r0, #21
   25690:	4770      	bx	lr
   25692:	f06f 0015 	mvn.w	r0, #21
}
   25696:	4770      	bx	lr
   25698:	200002b0 	.word	0x200002b0

0002569c <bt_finalize_init>:
{
   2569c:	b508      	push	{r3, lr}
   2569e:	4b09      	ldr	r3, [pc, #36]	; (256c4 <bt_finalize_init+0x28>)
   256a0:	f3bf 8f5b 	dmb	ish
   256a4:	e853 2f00 	ldrex	r2, [r3]
   256a8:	f042 0202 	orr.w	r2, r2, #2
   256ac:	e843 2100 	strex	r1, r2, [r3]
   256b0:	2900      	cmp	r1, #0
   256b2:	d1f7      	bne.n	256a4 <bt_finalize_init+0x8>
   256b4:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   256b8:	2000      	movs	r0, #0
   256ba:	f000 fdef 	bl	2629c <bt_le_scan_update>
	bt_dev_show_info();
   256be:	f7fe fb75 	bl	23dac <bt_dev_show_info>
}
   256c2:	bd08      	pop	{r3, pc}
   256c4:	2000037c 	.word	0x2000037c

000256c8 <init_work>:
{
   256c8:	b508      	push	{r3, lr}
	err = bt_init();
   256ca:	f011 fe1f 	bl	3730c <bt_init>
	if (ready_cb) {
   256ce:	4b02      	ldr	r3, [pc, #8]	; (256d8 <init_work+0x10>)
   256d0:	681b      	ldr	r3, [r3, #0]
   256d2:	b103      	cbz	r3, 256d6 <init_work+0xe>
		ready_cb(err);
   256d4:	4798      	blx	r3
}
   256d6:	bd08      	pop	{r3, pc}
   256d8:	20008218 	.word	0x20008218

000256dc <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   256dc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   256e0:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   256e2:	4b42      	ldr	r3, [pc, #264]	; (257ec <bt_enable+0x110>)
   256e4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   256e8:	2b00      	cmp	r3, #0
   256ea:	d052      	beq.n	25792 <bt_enable+0xb6>
   256ec:	4605      	mov	r5, r0
   256ee:	4b40      	ldr	r3, [pc, #256]	; (257f0 <bt_enable+0x114>)
   256f0:	f3bf 8f5b 	dmb	ish
   256f4:	e853 2f00 	ldrex	r2, [r3]
   256f8:	f042 0101 	orr.w	r1, r2, #1
   256fc:	e843 1000 	strex	r0, r1, [r3]
   25700:	2800      	cmp	r0, #0
   25702:	d1f7      	bne.n	256f4 <bt_enable+0x18>
   25704:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   25708:	f012 0f01 	tst.w	r2, #1
   2570c:	d16a      	bne.n	257e4 <bt_enable+0x108>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2570e:	4b39      	ldr	r3, [pc, #228]	; (257f4 <bt_enable+0x118>)
   25710:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   25712:	f04f 0800 	mov.w	r8, #0
   25716:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2571a:	4e37      	ldr	r6, [pc, #220]	; (257f8 <bt_enable+0x11c>)
   2571c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   25720:	2400      	movs	r4, #0
   25722:	9404      	str	r4, [sp, #16]
   25724:	f06f 0308 	mvn.w	r3, #8
   25728:	9303      	str	r3, [sp, #12]
   2572a:	9402      	str	r4, [sp, #8]
   2572c:	9401      	str	r4, [sp, #4]
   2572e:	9400      	str	r4, [sp, #0]
   25730:	4b32      	ldr	r3, [pc, #200]	; (257fc <bt_enable+0x120>)
   25732:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   25736:	4932      	ldr	r1, [pc, #200]	; (25800 <bt_enable+0x124>)
   25738:	4630      	mov	r0, r6
   2573a:	f016 fd32 	bl	3c1a2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2573e:	4931      	ldr	r1, [pc, #196]	; (25804 <bt_enable+0x128>)
   25740:	4630      	mov	r0, r6
   25742:	f00a fb9b 	bl	2fe7c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25746:	4e30      	ldr	r6, [pc, #192]	; (25808 <bt_enable+0x12c>)
   25748:	e9cd 8906 	strd	r8, r9, [sp, #24]
   2574c:	9404      	str	r4, [sp, #16]
   2574e:	f06f 0307 	mvn.w	r3, #7
   25752:	9303      	str	r3, [sp, #12]
   25754:	9402      	str	r4, [sp, #8]
   25756:	9401      	str	r4, [sp, #4]
   25758:	9400      	str	r4, [sp, #0]
   2575a:	4b2c      	ldr	r3, [pc, #176]	; (2580c <bt_enable+0x130>)
   2575c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   25760:	492b      	ldr	r1, [pc, #172]	; (25810 <bt_enable+0x134>)
   25762:	4630      	mov	r0, r6
   25764:	f016 fd1d 	bl	3c1a2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   25768:	492a      	ldr	r1, [pc, #168]	; (25814 <bt_enable+0x138>)
   2576a:	4630      	mov	r0, r6
   2576c:	f00a fb86 	bl	2fe7c <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   25770:	f7fd fee6 	bl	23540 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   25774:	4b1d      	ldr	r3, [pc, #116]	; (257ec <bt_enable+0x110>)
   25776:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   2577a:	68db      	ldr	r3, [r3, #12]
   2577c:	4798      	blx	r3
	if (err) {
   2577e:	4604      	mov	r4, r0
   25780:	b9d0      	cbnz	r0, 257b8 <bt_enable+0xdc>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   25782:	b35d      	cbz	r5, 257dc <bt_enable+0x100>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   25784:	4824      	ldr	r0, [pc, #144]	; (25818 <bt_enable+0x13c>)
   25786:	f00a ff5f 	bl	30648 <k_work_submit>
	return 0;
}
   2578a:	4620      	mov	r0, r4
   2578c:	b008      	add	sp, #32
   2578e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   25792:	4b22      	ldr	r3, [pc, #136]	; (2581c <bt_enable+0x140>)
   25794:	4a22      	ldr	r2, [pc, #136]	; (25820 <bt_enable+0x144>)
   25796:	1a9b      	subs	r3, r3, r2
   25798:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   2579a:	f04f 0100 	mov.w	r1, #0
   2579e:	2201      	movs	r2, #1
   257a0:	f362 0102 	bfi	r1, r2, #0, #3
   257a4:	f36f 01c5 	bfc	r1, #3, #3
   257a8:	f363 118f 	bfi	r1, r3, #6, #10
   257ac:	481d      	ldr	r0, [pc, #116]	; (25824 <bt_enable+0x148>)
   257ae:	f7fa fe31 	bl	20414 <log_0>
		return -ENODEV;
   257b2:	f06f 0412 	mvn.w	r4, #18
   257b6:	e7e8      	b.n	2578a <bt_enable+0xae>
   257b8:	4b18      	ldr	r3, [pc, #96]	; (2581c <bt_enable+0x140>)
   257ba:	4a19      	ldr	r2, [pc, #100]	; (25820 <bt_enable+0x144>)
   257bc:	1a9b      	subs	r3, r3, r2
   257be:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   257c0:	f04f 0200 	mov.w	r2, #0
   257c4:	2101      	movs	r1, #1
   257c6:	f361 0202 	bfi	r2, r1, #0, #3
   257ca:	f36f 02c5 	bfc	r2, #3, #3
   257ce:	f363 128f 	bfi	r2, r3, #6, #10
   257d2:	4601      	mov	r1, r0
   257d4:	4814      	ldr	r0, [pc, #80]	; (25828 <bt_enable+0x14c>)
   257d6:	f7fa fd67 	bl	202a8 <log_1>
		return err;
   257da:	e7d6      	b.n	2578a <bt_enable+0xae>
		return bt_init();
   257dc:	f011 fd96 	bl	3730c <bt_init>
   257e0:	4604      	mov	r4, r0
   257e2:	e7d2      	b.n	2578a <bt_enable+0xae>
		return -EALREADY;
   257e4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   257e8:	e7cf      	b.n	2578a <bt_enable+0xae>
   257ea:	bf00      	nop
   257ec:	200002b0 	.word	0x200002b0
   257f0:	2000037c 	.word	0x2000037c
   257f4:	20008218 	.word	0x20008218
   257f8:	20001f78 	.word	0x20001f78
   257fc:	000253fd 	.word	0x000253fd
   25800:	200101a0 	.word	0x200101a0
   25804:	0003f208 	.word	0x0003f208
   25808:	20001eb8 	.word	0x20001eb8
   2580c:	00024249 	.word	0x00024249
   25810:	2000f180 	.word	0x2000f180
   25814:	0003f210 	.word	0x0003f210
   25818:	2000036c 	.word	0x2000036c
   2581c:	0003d1dc 	.word	0x0003d1dc
   25820:	0003d1a4 	.word	0x0003d1a4
   25824:	0003f1ec 	.word	0x0003f1ec
   25828:	0003f218 	.word	0x0003f218

0002582c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2582c:	4800      	ldr	r0, [pc, #0]	; (25830 <bt_get_name+0x4>)
   2582e:	4770      	bx	lr
   25830:	0003f234 	.word	0x0003f234

00025834 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   25834:	b5f0      	push	{r4, r5, r6, r7, lr}
   25836:	b083      	sub	sp, #12
   25838:	4604      	mov	r4, r0
   2583a:	460f      	mov	r7, r1
   2583c:	4616      	mov	r6, r2
	while (ad->len > 1) {
   2583e:	e015      	b.n	2586c <bt_data_parse+0x38>
   25840:	4b19      	ldr	r3, [pc, #100]	; (258a8 <bt_data_parse+0x74>)
   25842:	4a1a      	ldr	r2, [pc, #104]	; (258ac <bt_data_parse+0x78>)
   25844:	1a9b      	subs	r3, r3, r2
   25846:	08db      	lsrs	r3, r3, #3
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			BT_WARN("Malformed data");
   25848:	f04f 0100 	mov.w	r1, #0
   2584c:	2202      	movs	r2, #2
   2584e:	f362 0102 	bfi	r1, r2, #0, #3
   25852:	f36f 01c5 	bfc	r1, #3, #3
   25856:	f363 118f 	bfi	r1, r3, #6, #10
   2585a:	4815      	ldr	r0, [pc, #84]	; (258b0 <bt_data_parse+0x7c>)
   2585c:	f7fa fdda 	bl	20414 <log_0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   25860:	b003      	add	sp, #12
   25862:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_simple_pull(ad, len - 1);
   25864:	1e69      	subs	r1, r5, #1
   25866:	4620      	mov	r0, r4
   25868:	f015 f94c 	bl	3ab04 <net_buf_simple_pull>
	while (ad->len > 1) {
   2586c:	88a3      	ldrh	r3, [r4, #4]
   2586e:	2b01      	cmp	r3, #1
   25870:	d9f6      	bls.n	25860 <bt_data_parse+0x2c>
		len = net_buf_simple_pull_u8(ad);
   25872:	4620      	mov	r0, r4
   25874:	f015 f956 	bl	3ab24 <net_buf_simple_pull_u8>
		if (len == 0U) {
   25878:	4605      	mov	r5, r0
   2587a:	2800      	cmp	r0, #0
   2587c:	d0f0      	beq.n	25860 <bt_data_parse+0x2c>
		if (len > ad->len) {
   2587e:	b283      	uxth	r3, r0
   25880:	88a2      	ldrh	r2, [r4, #4]
   25882:	4293      	cmp	r3, r2
   25884:	d8dc      	bhi.n	25840 <bt_data_parse+0xc>
		data.type = net_buf_simple_pull_u8(ad);
   25886:	4620      	mov	r0, r4
   25888:	f015 f94c 	bl	3ab24 <net_buf_simple_pull_u8>
   2588c:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
   25890:	1e6b      	subs	r3, r5, #1
   25892:	f88d 3001 	strb.w	r3, [sp, #1]
		data.data = ad->data;
   25896:	6823      	ldr	r3, [r4, #0]
   25898:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   2589a:	4631      	mov	r1, r6
   2589c:	4668      	mov	r0, sp
   2589e:	47b8      	blx	r7
   258a0:	2800      	cmp	r0, #0
   258a2:	d1df      	bne.n	25864 <bt_data_parse+0x30>
   258a4:	e7dc      	b.n	25860 <bt_data_parse+0x2c>
   258a6:	bf00      	nop
   258a8:	0003d1dc 	.word	0x0003d1dc
   258ac:	0003d1a4 	.word	0x0003d1a4
   258b0:	0003f23c 	.word	0x0003f23c

000258b4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   258b4:	b570      	push	{r4, r5, r6, lr}
   258b6:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   258b8:	2400      	movs	r4, #0
   258ba:	4b0a      	ldr	r3, [pc, #40]	; (258e4 <id_find+0x30>)
   258bc:	79db      	ldrb	r3, [r3, #7]
   258be:	42a3      	cmp	r3, r4
   258c0:	d90c      	bls.n	258dc <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   258c2:	4626      	mov	r6, r4
   258c4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   258c8:	2207      	movs	r2, #7
   258ca:	4b06      	ldr	r3, [pc, #24]	; (258e4 <id_find+0x30>)
   258cc:	4419      	add	r1, r3
   258ce:	4628      	mov	r0, r5
   258d0:	f011 fa1b 	bl	36d0a <memcmp>
   258d4:	b120      	cbz	r0, 258e0 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   258d6:	3401      	adds	r4, #1
   258d8:	b2e4      	uxtb	r4, r4
   258da:	e7ee      	b.n	258ba <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   258dc:	f06f 0601 	mvn.w	r6, #1
}
   258e0:	4630      	mov	r0, r6
   258e2:	bd70      	pop	{r4, r5, r6, pc}
   258e4:	200002b0 	.word	0x200002b0

000258e8 <set_random_address>:
{
   258e8:	b570      	push	{r4, r5, r6, lr}
   258ea:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   258ec:	2206      	movs	r2, #6
   258ee:	4914      	ldr	r1, [pc, #80]	; (25940 <set_random_address+0x58>)
   258f0:	f011 fa0b 	bl	36d0a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   258f4:	4605      	mov	r5, r0
   258f6:	b908      	cbnz	r0, 258fc <set_random_address+0x14>
}
   258f8:	4628      	mov	r0, r5
   258fa:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   258fc:	2106      	movs	r1, #6
   258fe:	f242 0005 	movw	r0, #8197	; 0x2005
   25902:	f7fe fce5 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   25906:	4605      	mov	r5, r0
   25908:	b1b8      	cbz	r0, 2593a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2590a:	2206      	movs	r2, #6
   2590c:	4621      	mov	r1, r4
   2590e:	3008      	adds	r0, #8
   25910:	f015 f8d5 	bl	3aabe <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   25914:	2200      	movs	r2, #0
   25916:	4629      	mov	r1, r5
   25918:	f242 0005 	movw	r0, #8197	; 0x2005
   2591c:	f7fe fd14 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   25920:	4605      	mov	r5, r0
   25922:	2800      	cmp	r0, #0
   25924:	d1e8      	bne.n	258f8 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   25926:	4e06      	ldr	r6, [pc, #24]	; (25940 <set_random_address+0x58>)
   25928:	2206      	movs	r2, #6
   2592a:	4621      	mov	r1, r4
   2592c:	4630      	mov	r0, r6
   2592e:	f011 fa19 	bl	36d64 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   25932:	2301      	movs	r3, #1
   25934:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   25938:	e7de      	b.n	258f8 <set_random_address+0x10>
		return -ENOBUFS;
   2593a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2593e:	e7db      	b.n	258f8 <set_random_address+0x10>
   25940:	20000311 	.word	0x20000311

00025944 <le_set_privacy_mode>:
{
   25944:	b510      	push	{r4, lr}
   25946:	b082      	sub	sp, #8
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   25948:	4b1b      	ldr	r3, [pc, #108]	; (259b8 <le_set_privacy_mode+0x74>)
   2594a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   2594e:	f013 0f04 	tst.w	r3, #4
   25952:	d01b      	beq.n	2598c <le_set_privacy_mode+0x48>
   25954:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
   25956:	2207      	movs	r2, #7
   25958:	4601      	mov	r1, r0
   2595a:	4668      	mov	r0, sp
   2595c:	f011 fa02 	bl	36d64 <memcpy>
	cp.mode = mode;
   25960:	f88d 4007 	strb.w	r4, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   25964:	2108      	movs	r1, #8
   25966:	f242 004e 	movw	r0, #8270	; 0x204e
   2596a:	f7fe fcb1 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   2596e:	4604      	mov	r4, r0
   25970:	b1f0      	cbz	r0, 259b0 <le_set_privacy_mode+0x6c>
   25972:	2208      	movs	r2, #8
   25974:	4669      	mov	r1, sp
   25976:	4410      	add	r0, r2
   25978:	f015 f8a1 	bl	3aabe <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2597c:	2200      	movs	r2, #0
   2597e:	4621      	mov	r1, r4
   25980:	f242 004e 	movw	r0, #8270	; 0x204e
   25984:	f7fe fce0 	bl	24348 <bt_hci_cmd_send_sync>
}
   25988:	b002      	add	sp, #8
   2598a:	bd10      	pop	{r4, pc}
   2598c:	4b0b      	ldr	r3, [pc, #44]	; (259bc <le_set_privacy_mode+0x78>)
   2598e:	4a0c      	ldr	r2, [pc, #48]	; (259c0 <le_set_privacy_mode+0x7c>)
   25990:	1a9b      	subs	r3, r3, r2
   25992:	08db      	lsrs	r3, r3, #3
		BT_WARN("Set privacy mode command is not supported");
   25994:	f04f 0100 	mov.w	r1, #0
   25998:	2202      	movs	r2, #2
   2599a:	f362 0102 	bfi	r1, r2, #0, #3
   2599e:	f36f 01c5 	bfc	r1, #3, #3
   259a2:	f363 118f 	bfi	r1, r3, #6, #10
   259a6:	4807      	ldr	r0, [pc, #28]	; (259c4 <le_set_privacy_mode+0x80>)
   259a8:	f7fa fd34 	bl	20414 <log_0>
		return 0;
   259ac:	2000      	movs	r0, #0
   259ae:	e7eb      	b.n	25988 <le_set_privacy_mode+0x44>
		return -ENOBUFS;
   259b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   259b4:	e7e8      	b.n	25988 <le_set_privacy_mode+0x44>
   259b6:	bf00      	nop
   259b8:	200002b0 	.word	0x200002b0
   259bc:	0003d1ec 	.word	0x0003d1ec
   259c0:	0003d1a4 	.word	0x0003d1a4
   259c4:	0003f33c 	.word	0x0003f33c

000259c8 <bt_id_pending_keys_update_set>:
   259c8:	4b08      	ldr	r3, [pc, #32]	; (259ec <bt_id_pending_keys_update_set+0x24>)
   259ca:	f3bf 8f5b 	dmb	ish
   259ce:	e853 2f00 	ldrex	r2, [r3]
   259d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   259d6:	e843 2c00 	strex	ip, r2, [r3]
   259da:	f1bc 0f00 	cmp.w	ip, #0
   259de:	d1f6      	bne.n	259ce <bt_id_pending_keys_update_set+0x6>
   259e0:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   259e4:	7a03      	ldrb	r3, [r0, #8]
   259e6:	4319      	orrs	r1, r3
   259e8:	7201      	strb	r1, [r0, #8]
}
   259ea:	4770      	bx	lr
   259ec:	2000037c 	.word	0x2000037c

000259f0 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   259f0:	b530      	push	{r4, r5, lr}
   259f2:	b085      	sub	sp, #20
   259f4:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   259f6:	460d      	mov	r5, r1
   259f8:	b149      	cbz	r1, 25a0e <id_create+0x1e>
   259fa:	2300      	movs	r3, #0
   259fc:	9302      	str	r3, [sp, #8]
   259fe:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   25a02:	2207      	movs	r2, #7
   25a04:	a902      	add	r1, sp, #8
   25a06:	4628      	mov	r0, r5
   25a08:	f011 f97f 	bl	36d0a <memcmp>
   25a0c:	b9e0      	cbnz	r0, 25a48 <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   25a0e:	4668      	mov	r0, sp
   25a10:	f011 fb1b 	bl	3704a <bt_addr_le_create_static>
			if (err) {
   25a14:	4603      	mov	r3, r0
   25a16:	b9a0      	cbnz	r0, 25a42 <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   25a18:	4668      	mov	r0, sp
   25a1a:	f7ff ff4b 	bl	258b4 <id_find>
   25a1e:	2800      	cmp	r0, #0
   25a20:	daf5      	bge.n	25a0e <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   25a22:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   25a26:	4b0d      	ldr	r3, [pc, #52]	; (25a5c <id_create+0x6c>)
   25a28:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   25a2a:	2207      	movs	r2, #7
   25a2c:	4669      	mov	r1, sp
   25a2e:	4620      	mov	r0, r4
   25a30:	f011 f998 	bl	36d64 <memcpy>

		if (addr) {
   25a34:	b125      	cbz	r5, 25a40 <id_create+0x50>
   25a36:	2207      	movs	r2, #7
   25a38:	4621      	mov	r1, r4
   25a3a:	4628      	mov	r0, r5
   25a3c:	f011 f992 	bl	36d64 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   25a40:	2300      	movs	r3, #0
}
   25a42:	4618      	mov	r0, r3
   25a44:	b005      	add	sp, #20
   25a46:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   25a48:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   25a4c:	2207      	movs	r2, #7
   25a4e:	4629      	mov	r1, r5
   25a50:	4802      	ldr	r0, [pc, #8]	; (25a5c <id_create+0x6c>)
   25a52:	4420      	add	r0, r4
   25a54:	f011 f986 	bl	36d64 <memcpy>
}
   25a58:	e7f2      	b.n	25a40 <id_create+0x50>
   25a5a:	bf00      	nop
   25a5c:	200002b0 	.word	0x200002b0

00025a60 <bt_id_pending_keys_update>:
{
   25a60:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25a62:	4b0b      	ldr	r3, [pc, #44]	; (25a90 <bt_id_pending_keys_update+0x30>)
   25a64:	f3bf 8f5b 	dmb	ish
   25a68:	e853 2f00 	ldrex	r2, [r3]
   25a6c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   25a70:	e843 1000 	strex	r0, r1, [r3]
   25a74:	2800      	cmp	r0, #0
   25a76:	d1f7      	bne.n	25a68 <bt_id_pending_keys_update+0x8>
   25a78:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   25a7c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   25a80:	d100      	bne.n	25a84 <bt_id_pending_keys_update+0x24>
}
   25a82:	bd08      	pop	{r3, pc}
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   25a84:	2200      	movs	r2, #0
   25a86:	4903      	ldr	r1, [pc, #12]	; (25a94 <bt_id_pending_keys_update+0x34>)
   25a88:	2002      	movs	r0, #2
   25a8a:	f007 f861 	bl	2cb50 <bt_keys_foreach>
}
   25a8e:	e7f8      	b.n	25a82 <bt_id_pending_keys_update+0x22>
   25a90:	2000037c 	.word	0x2000037c
   25a94:	00037455 	.word	0x00037455

00025a98 <bt_id_add>:
{
   25a98:	b570      	push	{r4, r5, r6, lr}
   25a9a:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   25a9c:	4b64      	ldr	r3, [pc, #400]	; (25c30 <bt_id_add+0x198>)
   25a9e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   25aa2:	b123      	cbz	r3, 25aae <bt_id_add+0x16>
   25aa4:	4a62      	ldr	r2, [pc, #392]	; (25c30 <bt_id_add+0x198>)
   25aa6:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   25aaa:	4293      	cmp	r3, r2
   25aac:	d20a      	bcs.n	25ac4 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   25aae:	4a60      	ldr	r2, [pc, #384]	; (25c30 <bt_id_add+0x198>)
   25ab0:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   25ab4:	3301      	adds	r3, #1
   25ab6:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   25aba:	7a23      	ldrb	r3, [r4, #8]
   25abc:	f043 0304 	orr.w	r3, r3, #4
   25ac0:	7223      	strb	r3, [r4, #8]
}
   25ac2:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   25ac4:	2206      	movs	r2, #6
   25ac6:	2100      	movs	r1, #0
   25ac8:	4608      	mov	r0, r1
   25aca:	f001 fd11 	bl	274f0 <bt_conn_lookup_state_le>
	if (conn) {
   25ace:	4605      	mov	r5, r0
   25ad0:	b138      	cbz	r0, 25ae2 <bt_id_add+0x4a>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_ADD);
   25ad2:	2101      	movs	r1, #1
   25ad4:	4620      	mov	r0, r4
   25ad6:	f7ff ff77 	bl	259c8 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   25ada:	4628      	mov	r0, r5
   25adc:	f011 fe60 	bl	377a0 <bt_conn_unref>
		return;
   25ae0:	e7ef      	b.n	25ac2 <bt_id_add+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25ae2:	f3bf 8f5b 	dmb	ish
   25ae6:	4b53      	ldr	r3, [pc, #332]	; (25c34 <bt_id_add+0x19c>)
   25ae8:	681b      	ldr	r3, [r3, #0]
   25aea:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25aee:	f3c3 1540 	ubfx	r5, r3, #5, #1
	if (scan_enabled) {
   25af2:	f013 0f20 	tst.w	r3, #32
   25af6:	d12c      	bne.n	25b52 <bt_id_add+0xba>
	if (bt_dev.le.rl_entries) {
   25af8:	4b4d      	ldr	r3, [pc, #308]	; (25c30 <bt_id_add+0x198>)
   25afa:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   25afe:	bb63      	cbnz	r3, 25b5a <bt_id_add+0xc2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   25b00:	4b4b      	ldr	r3, [pc, #300]	; (25c30 <bt_id_add+0x198>)
   25b02:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
   25b06:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   25b0a:	429a      	cmp	r2, r3
   25b0c:	d03b      	beq.n	25b86 <bt_id_add+0xee>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   25b0e:	1c66      	adds	r6, r4, #1
   25b10:	4622      	mov	r2, r4
   25b12:	f812 0b2a 	ldrb.w	r0, [r2], #42
   25b16:	4631      	mov	r1, r6
   25b18:	f011 fc15 	bl	37346 <hci_id_add>
	if (err) {
   25b1c:	2800      	cmp	r0, #0
   25b1e:	d165      	bne.n	25bec <bt_id_add+0x154>
	bt_dev.le.rl_entries++;
   25b20:	4a43      	ldr	r2, [pc, #268]	; (25c30 <bt_id_add+0x198>)
   25b22:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   25b26:	3301      	adds	r3, #1
   25b28:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   25b2c:	7a23      	ldrb	r3, [r4, #8]
   25b2e:	f043 0304 	orr.w	r3, r3, #4
   25b32:	7223      	strb	r3, [r4, #8]
	err = le_set_privacy_mode(&keys->addr, BT_HCI_LE_PRIVACY_MODE_DEVICE);
   25b34:	2101      	movs	r1, #1
   25b36:	4630      	mov	r0, r6
   25b38:	f7ff ff04 	bl	25944 <le_set_privacy_mode>
	if (err) {
   25b3c:	2800      	cmp	r0, #0
   25b3e:	d166      	bne.n	25c0e <bt_id_add+0x176>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   25b40:	2001      	movs	r0, #1
   25b42:	f011 fc51 	bl	373e8 <addr_res_enable>
	if (scan_enabled) {
   25b46:	2d00      	cmp	r5, #0
   25b48:	d0bb      	beq.n	25ac2 <bt_id_add+0x2a>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   25b4a:	2001      	movs	r0, #1
   25b4c:	f011 fccb 	bl	374e6 <bt_le_scan_set_enable>
   25b50:	e7b7      	b.n	25ac2 <bt_id_add+0x2a>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   25b52:	2000      	movs	r0, #0
   25b54:	f011 fcc7 	bl	374e6 <bt_le_scan_set_enable>
   25b58:	e7ce      	b.n	25af8 <bt_id_add+0x60>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   25b5a:	2000      	movs	r0, #0
   25b5c:	f011 fc44 	bl	373e8 <addr_res_enable>
		if (err) {
   25b60:	2800      	cmp	r0, #0
   25b62:	d0cd      	beq.n	25b00 <bt_id_add+0x68>
   25b64:	4b34      	ldr	r3, [pc, #208]	; (25c38 <bt_id_add+0x1a0>)
   25b66:	4a35      	ldr	r2, [pc, #212]	; (25c3c <bt_id_add+0x1a4>)
   25b68:	1a9b      	subs	r3, r3, r2
   25b6a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to disable address resolution");
   25b6c:	f04f 0100 	mov.w	r1, #0
   25b70:	2202      	movs	r2, #2
   25b72:	f362 0102 	bfi	r1, r2, #0, #3
   25b76:	f36f 01c5 	bfc	r1, #3, #3
   25b7a:	f363 118f 	bfi	r1, r3, #6, #10
   25b7e:	4830      	ldr	r0, [pc, #192]	; (25c40 <bt_id_add+0x1a8>)
   25b80:	f7fa fc48 	bl	20414 <log_0>
			goto done;
   25b84:	e7dc      	b.n	25b40 <bt_id_add+0xa8>
   25b86:	4b2c      	ldr	r3, [pc, #176]	; (25c38 <bt_id_add+0x1a0>)
   25b88:	4a2c      	ldr	r2, [pc, #176]	; (25c3c <bt_id_add+0x1a4>)
   25b8a:	1a9b      	subs	r3, r3, r2
   25b8c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Resolving list size exceeded. Switching to host.");
   25b8e:	f04f 0100 	mov.w	r1, #0
   25b92:	2202      	movs	r2, #2
   25b94:	f362 0102 	bfi	r1, r2, #0, #3
   25b98:	f36f 01c5 	bfc	r1, #3, #3
   25b9c:	f363 118f 	bfi	r1, r3, #6, #10
   25ba0:	4828      	ldr	r0, [pc, #160]	; (25c44 <bt_id_add+0x1ac>)
   25ba2:	f7fa fc37 	bl	20414 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   25ba6:	2200      	movs	r2, #0
   25ba8:	4611      	mov	r1, r2
   25baa:	f242 0029 	movw	r0, #8233	; 0x2029
   25bae:	f7fe fbcb 	bl	24348 <bt_hci_cmd_send_sync>
		if (err) {
   25bb2:	b950      	cbnz	r0, 25bca <bt_id_add+0x132>
		bt_dev.le.rl_entries++;
   25bb4:	4a1e      	ldr	r2, [pc, #120]	; (25c30 <bt_id_add+0x198>)
   25bb6:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   25bba:	3301      	adds	r3, #1
   25bbc:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   25bc0:	7a23      	ldrb	r3, [r4, #8]
   25bc2:	f043 0304 	orr.w	r3, r3, #4
   25bc6:	7223      	strb	r3, [r4, #8]
		goto done;
   25bc8:	e7ba      	b.n	25b40 <bt_id_add+0xa8>
   25bca:	4b1b      	ldr	r3, [pc, #108]	; (25c38 <bt_id_add+0x1a0>)
   25bcc:	4a1b      	ldr	r2, [pc, #108]	; (25c3c <bt_id_add+0x1a4>)
   25bce:	1a9b      	subs	r3, r3, r2
   25bd0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear resolution list");
   25bd2:	f04f 0100 	mov.w	r1, #0
   25bd6:	2201      	movs	r2, #1
   25bd8:	f362 0102 	bfi	r1, r2, #0, #3
   25bdc:	f36f 01c5 	bfc	r1, #3, #3
   25be0:	f363 118f 	bfi	r1, r3, #6, #10
   25be4:	4818      	ldr	r0, [pc, #96]	; (25c48 <bt_id_add+0x1b0>)
   25be6:	f7fa fc15 	bl	20414 <log_0>
			goto done;
   25bea:	e7a9      	b.n	25b40 <bt_id_add+0xa8>
   25bec:	4b12      	ldr	r3, [pc, #72]	; (25c38 <bt_id_add+0x1a0>)
   25bee:	4a13      	ldr	r2, [pc, #76]	; (25c3c <bt_id_add+0x1a4>)
   25bf0:	1a9b      	subs	r3, r3, r2
   25bf2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to add IRK to controller");
   25bf4:	f04f 0100 	mov.w	r1, #0
   25bf8:	2201      	movs	r2, #1
   25bfa:	f362 0102 	bfi	r1, r2, #0, #3
   25bfe:	f36f 01c5 	bfc	r1, #3, #3
   25c02:	f363 118f 	bfi	r1, r3, #6, #10
   25c06:	4811      	ldr	r0, [pc, #68]	; (25c4c <bt_id_add+0x1b4>)
   25c08:	f7fa fc04 	bl	20414 <log_0>
		goto done;
   25c0c:	e798      	b.n	25b40 <bt_id_add+0xa8>
   25c0e:	4b0a      	ldr	r3, [pc, #40]	; (25c38 <bt_id_add+0x1a0>)
   25c10:	4a0a      	ldr	r2, [pc, #40]	; (25c3c <bt_id_add+0x1a4>)
   25c12:	1a9b      	subs	r3, r3, r2
   25c14:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set privacy mode");
   25c16:	f04f 0100 	mov.w	r1, #0
   25c1a:	2201      	movs	r2, #1
   25c1c:	f362 0102 	bfi	r1, r2, #0, #3
   25c20:	f36f 01c5 	bfc	r1, #3, #3
   25c24:	f363 118f 	bfi	r1, r3, #6, #10
   25c28:	4809      	ldr	r0, [pc, #36]	; (25c50 <bt_id_add+0x1b8>)
   25c2a:	f7fa fbf3 	bl	20414 <log_0>
		goto done;
   25c2e:	e787      	b.n	25b40 <bt_id_add+0xa8>
   25c30:	200002b0 	.word	0x200002b0
   25c34:	2000037c 	.word	0x2000037c
   25c38:	0003d1ec 	.word	0x0003d1ec
   25c3c:	0003d1a4 	.word	0x0003d1a4
   25c40:	0003f368 	.word	0x0003f368
   25c44:	0003f390 	.word	0x0003f390
   25c48:	0003f3c4 	.word	0x0003f3c4
   25c4c:	0003f3e4 	.word	0x0003f3e4
   25c50:	0003f404 	.word	0x0003f404

00025c54 <bt_id_del>:
{
   25c54:	b538      	push	{r3, r4, r5, lr}
   25c56:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   25c58:	4b46      	ldr	r3, [pc, #280]	; (25d74 <bt_id_del+0x120>)
   25c5a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   25c5e:	b12b      	cbz	r3, 25c6c <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   25c60:	4a44      	ldr	r2, [pc, #272]	; (25d74 <bt_id_del+0x120>)
   25c62:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   25c66:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
   25c68:	429a      	cmp	r2, r3
   25c6a:	dd0a      	ble.n	25c82 <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
   25c6c:	4a41      	ldr	r2, [pc, #260]	; (25d74 <bt_id_del+0x120>)
   25c6e:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   25c72:	3b01      	subs	r3, #1
   25c74:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   25c78:	7a23      	ldrb	r3, [r4, #8]
   25c7a:	f023 0304 	bic.w	r3, r3, #4
   25c7e:	7223      	strb	r3, [r4, #8]
}
   25c80:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   25c82:	2206      	movs	r2, #6
   25c84:	2100      	movs	r1, #0
   25c86:	4608      	mov	r0, r1
   25c88:	f001 fc32 	bl	274f0 <bt_conn_lookup_state_le>
	if (conn) {
   25c8c:	4605      	mov	r5, r0
   25c8e:	b138      	cbz	r0, 25ca0 <bt_id_del+0x4c>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
   25c90:	2102      	movs	r1, #2
   25c92:	4620      	mov	r0, r4
   25c94:	f7ff fe98 	bl	259c8 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   25c98:	4628      	mov	r0, r5
   25c9a:	f011 fd81 	bl	377a0 <bt_conn_unref>
		return;
   25c9e:	e7ef      	b.n	25c80 <bt_id_del+0x2c>
   25ca0:	f3bf 8f5b 	dmb	ish
   25ca4:	4b34      	ldr	r3, [pc, #208]	; (25d78 <bt_id_del+0x124>)
   25ca6:	681b      	ldr	r3, [r3, #0]
   25ca8:	f3bf 8f5b 	dmb	ish
   25cac:	f3c3 1540 	ubfx	r5, r3, #5, #1
	if (scan_enabled) {
   25cb0:	f013 0f20 	tst.w	r3, #32
   25cb4:	d125      	bne.n	25d02 <bt_id_del+0xae>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   25cb6:	2000      	movs	r0, #0
   25cb8:	f011 fb96 	bl	373e8 <addr_res_enable>
	if (err) {
   25cbc:	4601      	mov	r1, r0
   25cbe:	bb20      	cbnz	r0, 25d0a <bt_id_del+0xb6>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   25cc0:	4a2c      	ldr	r2, [pc, #176]	; (25d74 <bt_id_del+0x120>)
   25cc2:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   25cc6:	f892 2118 	ldrb.w	r2, [r2, #280]	; 0x118
   25cca:	4293      	cmp	r3, r2
   25ccc:	d82e      	bhi.n	25d2c <bt_id_del+0xd8>
	err = hci_id_del(&keys->addr);
   25cce:	1c60      	adds	r0, r4, #1
   25cd0:	f011 fb6f 	bl	373b2 <hci_id_del>
	if (err) {
   25cd4:	2800      	cmp	r0, #0
   25cd6:	d137      	bne.n	25d48 <bt_id_del+0xf4>
	bt_dev.le.rl_entries--;
   25cd8:	4a26      	ldr	r2, [pc, #152]	; (25d74 <bt_id_del+0x120>)
   25cda:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   25cde:	3b01      	subs	r3, #1
   25ce0:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   25ce4:	7a23      	ldrb	r3, [r4, #8]
   25ce6:	f023 0304 	bic.w	r3, r3, #4
   25cea:	7223      	strb	r3, [r4, #8]
	if (bt_dev.le.rl_entries) {
   25cec:	4b21      	ldr	r3, [pc, #132]	; (25d74 <bt_id_del+0x120>)
   25cee:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   25cf2:	2b00      	cmp	r3, #0
   25cf4:	d139      	bne.n	25d6a <bt_id_del+0x116>
	if (scan_enabled) {
   25cf6:	2d00      	cmp	r5, #0
   25cf8:	d0c2      	beq.n	25c80 <bt_id_del+0x2c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   25cfa:	2001      	movs	r0, #1
   25cfc:	f011 fbf3 	bl	374e6 <bt_le_scan_set_enable>
   25d00:	e7be      	b.n	25c80 <bt_id_del+0x2c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   25d02:	2000      	movs	r0, #0
   25d04:	f011 fbef 	bl	374e6 <bt_le_scan_set_enable>
   25d08:	e7d5      	b.n	25cb6 <bt_id_del+0x62>
   25d0a:	4b1c      	ldr	r3, [pc, #112]	; (25d7c <bt_id_del+0x128>)
   25d0c:	4a1c      	ldr	r2, [pc, #112]	; (25d80 <bt_id_del+0x12c>)
   25d0e:	1a9b      	subs	r3, r3, r2
   25d10:	08db      	lsrs	r3, r3, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   25d12:	f04f 0200 	mov.w	r2, #0
   25d16:	2001      	movs	r0, #1
   25d18:	f360 0202 	bfi	r2, r0, #0, #3
   25d1c:	f36f 02c5 	bfc	r2, #3, #3
   25d20:	f363 128f 	bfi	r2, r3, #6, #10
   25d24:	4817      	ldr	r0, [pc, #92]	; (25d84 <bt_id_del+0x130>)
   25d26:	f7fa fabf 	bl	202a8 <log_1>
		goto done;
   25d2a:	e7df      	b.n	25cec <bt_id_del+0x98>
		bt_dev.le.rl_entries--;
   25d2c:	3b01      	subs	r3, #1
   25d2e:	4a11      	ldr	r2, [pc, #68]	; (25d74 <bt_id_del+0x120>)
   25d30:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   25d34:	7a23      	ldrb	r3, [r4, #8]
   25d36:	f023 0304 	bic.w	r3, r3, #4
   25d3a:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   25d3c:	2200      	movs	r2, #0
   25d3e:	4912      	ldr	r1, [pc, #72]	; (25d88 <bt_id_del+0x134>)
   25d40:	2002      	movs	r0, #2
   25d42:	f006 ff05 	bl	2cb50 <bt_keys_foreach>
		goto done;
   25d46:	e7d1      	b.n	25cec <bt_id_del+0x98>
   25d48:	4b0c      	ldr	r3, [pc, #48]	; (25d7c <bt_id_del+0x128>)
   25d4a:	4a0d      	ldr	r2, [pc, #52]	; (25d80 <bt_id_del+0x12c>)
   25d4c:	1a9b      	subs	r3, r3, r2
   25d4e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to remove IRK from controller");
   25d50:	f04f 0100 	mov.w	r1, #0
   25d54:	2201      	movs	r2, #1
   25d56:	f362 0102 	bfi	r1, r2, #0, #3
   25d5a:	f36f 01c5 	bfc	r1, #3, #3
   25d5e:	f363 118f 	bfi	r1, r3, #6, #10
   25d62:	480a      	ldr	r0, [pc, #40]	; (25d8c <bt_id_del+0x138>)
   25d64:	f7fa fb56 	bl	20414 <log_0>
		goto done;
   25d68:	e7c0      	b.n	25cec <bt_id_del+0x98>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   25d6a:	2001      	movs	r0, #1
   25d6c:	f011 fb3c 	bl	373e8 <addr_res_enable>
   25d70:	e7c1      	b.n	25cf6 <bt_id_del+0xa2>
   25d72:	bf00      	nop
   25d74:	200002b0 	.word	0x200002b0
   25d78:	2000037c 	.word	0x2000037c
   25d7c:	0003d1ec 	.word	0x0003d1ec
   25d80:	0003d1a4 	.word	0x0003d1a4
   25d84:	0003f420 	.word	0x0003f420
   25d88:	00037397 	.word	0x00037397
   25d8c:	0003f450 	.word	0x0003f450

00025d90 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   25d90:	b570      	push	{r4, r5, r6, lr}
   25d92:	b084      	sub	sp, #16
   25d94:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   25d96:	4605      	mov	r5, r0
   25d98:	b340      	cbz	r0, 25dec <bt_id_create+0x5c>
   25d9a:	2300      	movs	r3, #0
   25d9c:	9300      	str	r3, [sp, #0]
   25d9e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   25da2:	2207      	movs	r2, #7
   25da4:	4669      	mov	r1, sp
   25da6:	f010 ffb0 	bl	36d0a <memcmp>
   25daa:	b1f8      	cbz	r0, 25dec <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   25dac:	782b      	ldrb	r3, [r5, #0]
   25dae:	2b01      	cmp	r3, #1
   25db0:	d104      	bne.n	25dbc <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   25db2:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   25db4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   25db8:	2bc0      	cmp	r3, #192	; 0xc0
   25dba:	d012      	beq.n	25de2 <bt_id_create+0x52>
   25dbc:	4b24      	ldr	r3, [pc, #144]	; (25e50 <bt_id_create+0xc0>)
   25dbe:	4a25      	ldr	r2, [pc, #148]	; (25e54 <bt_id_create+0xc4>)
   25dc0:	1a9b      	subs	r3, r3, r2
   25dc2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   25dc4:	f04f 0100 	mov.w	r1, #0
   25dc8:	2201      	movs	r2, #1
   25dca:	f362 0102 	bfi	r1, r2, #0, #3
   25dce:	f36f 01c5 	bfc	r1, #3, #3
   25dd2:	f363 118f 	bfi	r1, r3, #6, #10
   25dd6:	4820      	ldr	r0, [pc, #128]	; (25e58 <bt_id_create+0xc8>)
   25dd8:	f7fa fb1c 	bl	20414 <log_0>
			return -EINVAL;
   25ddc:	f06f 0015 	mvn.w	r0, #21
   25de0:	e028      	b.n	25e34 <bt_id_create+0xa4>
		}

		if (id_find(addr) >= 0) {
   25de2:	4628      	mov	r0, r5
   25de4:	f7ff fd66 	bl	258b4 <id_find>
   25de8:	2800      	cmp	r0, #0
   25dea:	da25      	bge.n	25e38 <bt_id_create+0xa8>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   25dec:	bb54      	cbnz	r4, 25e44 <bt_id_create+0xb4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   25dee:	4b1b      	ldr	r3, [pc, #108]	; (25e5c <bt_id_create+0xcc>)
   25df0:	79db      	ldrb	r3, [r3, #7]
   25df2:	2b01      	cmp	r3, #1
   25df4:	d029      	beq.n	25e4a <bt_id_create+0xba>
   25df6:	f3bf 8f5b 	dmb	ish
   25dfa:	4b19      	ldr	r3, [pc, #100]	; (25e60 <bt_id_create+0xd0>)
   25dfc:	681b      	ldr	r3, [r3, #0]
   25dfe:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   25e02:	f013 0f01 	tst.w	r3, #1
   25e06:	d10a      	bne.n	25e1e <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   25e08:	b1cd      	cbz	r5, 25e3e <bt_id_create+0xae>
   25e0a:	2300      	movs	r3, #0
   25e0c:	9302      	str	r3, [sp, #8]
   25e0e:	f8cd 300b 	str.w	r3, [sp, #11]
   25e12:	2207      	movs	r2, #7
   25e14:	a902      	add	r1, sp, #8
   25e16:	4628      	mov	r0, r5
   25e18:	f010 ff77 	bl	36d0a <memcmp>
   25e1c:	b178      	cbz	r0, 25e3e <bt_id_create+0xae>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   25e1e:	4b0f      	ldr	r3, [pc, #60]	; (25e5c <bt_id_create+0xcc>)
   25e20:	79de      	ldrb	r6, [r3, #7]
   25e22:	1c72      	adds	r2, r6, #1
   25e24:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   25e26:	4622      	mov	r2, r4
   25e28:	4629      	mov	r1, r5
   25e2a:	4630      	mov	r0, r6
   25e2c:	f7ff fde0 	bl	259f0 <id_create>
	if (err) {
   25e30:	b900      	cbnz	r0, 25e34 <bt_id_create+0xa4>
		return err;
	}

	return new_id;
   25e32:	4630      	mov	r0, r6
}
   25e34:	b004      	add	sp, #16
   25e36:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   25e38:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25e3c:	e7fa      	b.n	25e34 <bt_id_create+0xa4>
			return -EINVAL;
   25e3e:	f06f 0015 	mvn.w	r0, #21
   25e42:	e7f7      	b.n	25e34 <bt_id_create+0xa4>
		return -EINVAL;
   25e44:	f06f 0015 	mvn.w	r0, #21
   25e48:	e7f4      	b.n	25e34 <bt_id_create+0xa4>
		return -ENOMEM;
   25e4a:	f06f 000b 	mvn.w	r0, #11
   25e4e:	e7f1      	b.n	25e34 <bt_id_create+0xa4>
   25e50:	0003d1ec 	.word	0x0003d1ec
   25e54:	0003d1a4 	.word	0x0003d1a4
   25e58:	0003f478 	.word	0x0003f478
   25e5c:	200002b0 	.word	0x200002b0
   25e60:	2000037c 	.word	0x2000037c

00025e64 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   25e64:	b530      	push	{r4, r5, lr}
   25e66:	b087      	sub	sp, #28
   25e68:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   25e6a:	aa01      	add	r2, sp, #4
   25e6c:	2100      	movs	r1, #0
   25e6e:	f241 0009 	movw	r0, #4105	; 0x1009
   25e72:	f7fe fa69 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   25e76:	b9f0      	cbnz	r0, 25eb6 <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   25e78:	9b01      	ldr	r3, [sp, #4]
   25e7a:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   25e7c:	3401      	adds	r4, #1
   25e7e:	2300      	movs	r3, #0
   25e80:	9302      	str	r3, [sp, #8]
   25e82:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   25e86:	2206      	movs	r2, #6
   25e88:	a902      	add	r1, sp, #8
   25e8a:	4620      	mov	r0, r4
   25e8c:	f010 ff3d 	bl	36d0a <memcmp>
   25e90:	b158      	cbz	r0, 25eaa <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   25e92:	4b18      	ldr	r3, [pc, #96]	; (25ef4 <bt_id_read_public_addr+0x90>)
   25e94:	e893 0003 	ldmia.w	r3, {r0, r1}
   25e98:	9004      	str	r0, [sp, #16]
   25e9a:	f8ad 1014 	strh.w	r1, [sp, #20]
   25e9e:	2206      	movs	r2, #6
   25ea0:	a904      	add	r1, sp, #16
   25ea2:	4620      	mov	r0, r4
   25ea4:	f010 ff31 	bl	36d0a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   25ea8:	b9b8      	cbnz	r0, 25eda <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   25eaa:	9801      	ldr	r0, [sp, #4]
   25eac:	f014 fdb7 	bl	3aa1e <net_buf_unref>
		return 0U;
   25eb0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   25eb2:	b007      	add	sp, #28
   25eb4:	bd30      	pop	{r4, r5, pc}
   25eb6:	4b10      	ldr	r3, [pc, #64]	; (25ef8 <bt_id_read_public_addr+0x94>)
   25eb8:	4a10      	ldr	r2, [pc, #64]	; (25efc <bt_id_read_public_addr+0x98>)
   25eba:	1a9b      	subs	r3, r3, r2
   25ebc:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   25ebe:	f04f 0100 	mov.w	r1, #0
   25ec2:	2202      	movs	r2, #2
   25ec4:	f362 0102 	bfi	r1, r2, #0, #3
   25ec8:	f36f 01c5 	bfc	r1, #3, #3
   25ecc:	f363 118f 	bfi	r1, r3, #6, #10
   25ed0:	480b      	ldr	r0, [pc, #44]	; (25f00 <bt_id_read_public_addr+0x9c>)
   25ed2:	f7fa fa9f 	bl	20414 <log_0>
		return 0U;
   25ed6:	2000      	movs	r0, #0
   25ed8:	e7eb      	b.n	25eb2 <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
   25eda:	2206      	movs	r2, #6
   25edc:	4621      	mov	r1, r4
   25ede:	1c68      	adds	r0, r5, #1
   25ee0:	f010 ff40 	bl	36d64 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   25ee4:	2300      	movs	r3, #0
   25ee6:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   25ee8:	9801      	ldr	r0, [sp, #4]
   25eea:	f014 fd98 	bl	3aa1e <net_buf_unref>
	return 1U;
   25eee:	2001      	movs	r0, #1
   25ef0:	e7df      	b.n	25eb2 <bt_id_read_public_addr+0x4e>
   25ef2:	bf00      	nop
   25ef4:	0003d3e8 	.word	0x0003d3e8
   25ef8:	0003d1ec 	.word	0x0003d1ec
   25efc:	0003d1a4 	.word	0x0003d1a4
   25f00:	0003f4a8 	.word	0x0003f4a8

00025f04 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   25f04:	b500      	push	{lr}
   25f06:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   25f08:	4668      	mov	r0, sp
   25f0a:	f7ff ffab 	bl	25e64 <bt_id_read_public_addr>
   25f0e:	4b06      	ldr	r3, [pc, #24]	; (25f28 <bt_setup_public_id_addr+0x24>)
   25f10:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   25f12:	b918      	cbnz	r0, 25f1c <bt_setup_public_id_addr+0x18>
		return 0;
   25f14:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   25f16:	b003      	add	sp, #12
   25f18:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   25f1c:	2200      	movs	r2, #0
   25f1e:	4669      	mov	r1, sp
   25f20:	4610      	mov	r0, r2
   25f22:	f7ff fd65 	bl	259f0 <id_create>
   25f26:	e7f6      	b.n	25f16 <bt_setup_public_id_addr+0x12>
   25f28:	200002b0 	.word	0x200002b0

00025f2c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   25f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f30:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   25f32:	4b2e      	ldr	r3, [pc, #184]	; (25fec <bt_read_static_addr+0xc0>)
   25f34:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   25f38:	f015 0501 	ands.w	r5, r5, #1
   25f3c:	d010      	beq.n	25f60 <bt_read_static_addr+0x34>
   25f3e:	4607      	mov	r7, r0
   25f40:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   25f42:	aa01      	add	r2, sp, #4
   25f44:	2100      	movs	r1, #0
   25f46:	f64f 4009 	movw	r0, #64521	; 0xfc09
   25f4a:	f7fe f9fd 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   25f4e:	4604      	mov	r4, r0
   25f50:	b9b8      	cbnz	r0, 25f82 <bt_read_static_addr+0x56>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   25f52:	9b01      	ldr	r3, [sp, #4]
   25f54:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   25f56:	7875      	ldrb	r5, [r6, #1]
   25f58:	4545      	cmp	r5, r8
   25f5a:	bf28      	it	cs
   25f5c:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   25f5e:	e029      	b.n	25fb4 <bt_read_static_addr+0x88>
   25f60:	4b23      	ldr	r3, [pc, #140]	; (25ff0 <bt_read_static_addr+0xc4>)
   25f62:	4a24      	ldr	r2, [pc, #144]	; (25ff4 <bt_read_static_addr+0xc8>)
   25f64:	1a9b      	subs	r3, r3, r2
   25f66:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   25f68:	f04f 0100 	mov.w	r1, #0
   25f6c:	2202      	movs	r2, #2
   25f6e:	f362 0102 	bfi	r1, r2, #0, #3
   25f72:	f36f 01c5 	bfc	r1, #3, #3
   25f76:	f363 118f 	bfi	r1, r3, #6, #10
   25f7a:	481f      	ldr	r0, [pc, #124]	; (25ff8 <bt_read_static_addr+0xcc>)
   25f7c:	f7fa fa4a 	bl	20414 <log_0>
		return 0;
   25f80:	e01e      	b.n	25fc0 <bt_read_static_addr+0x94>
   25f82:	4b1b      	ldr	r3, [pc, #108]	; (25ff0 <bt_read_static_addr+0xc4>)
   25f84:	4a1b      	ldr	r2, [pc, #108]	; (25ff4 <bt_read_static_addr+0xc8>)
   25f86:	1a9b      	subs	r3, r3, r2
   25f88:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   25f8a:	f04f 0100 	mov.w	r1, #0
   25f8e:	2202      	movs	r2, #2
   25f90:	f362 0102 	bfi	r1, r2, #0, #3
   25f94:	f36f 01c5 	bfc	r1, #3, #3
   25f98:	f363 118f 	bfi	r1, r3, #6, #10
   25f9c:	4817      	ldr	r0, [pc, #92]	; (25ffc <bt_read_static_addr+0xd0>)
   25f9e:	f7fa fa39 	bl	20414 <log_0>
		return 0;
   25fa2:	2500      	movs	r5, #0
   25fa4:	e00c      	b.n	25fc0 <bt_read_static_addr+0x94>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   25fa6:	2216      	movs	r2, #22
   25fa8:	1cb1      	adds	r1, r6, #2
   25faa:	fb02 7004 	mla	r0, r2, r4, r7
   25fae:	f010 fed9 	bl	36d64 <memcpy>
	for (i = 0; i < cnt; i++) {
   25fb2:	3401      	adds	r4, #1
   25fb4:	42a5      	cmp	r5, r4
   25fb6:	dcf6      	bgt.n	25fa6 <bt_read_static_addr+0x7a>
	}

	net_buf_unref(rsp);
   25fb8:	9801      	ldr	r0, [sp, #4]
   25fba:	f014 fd30 	bl	3aa1e <net_buf_unref>
	if (!cnt) {
   25fbe:	b11d      	cbz	r5, 25fc8 <bt_read_static_addr+0x9c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   25fc0:	4628      	mov	r0, r5
   25fc2:	b002      	add	sp, #8
   25fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25fc8:	4b09      	ldr	r3, [pc, #36]	; (25ff0 <bt_read_static_addr+0xc4>)
   25fca:	4a0a      	ldr	r2, [pc, #40]	; (25ff4 <bt_read_static_addr+0xc8>)
   25fcc:	1a9b      	subs	r3, r3, r2
   25fce:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   25fd0:	f04f 0100 	mov.w	r1, #0
   25fd4:	2202      	movs	r2, #2
   25fd6:	f362 0102 	bfi	r1, r2, #0, #3
   25fda:	f36f 01c5 	bfc	r1, #3, #3
   25fde:	f363 118f 	bfi	r1, r3, #6, #10
   25fe2:	4807      	ldr	r0, [pc, #28]	; (26000 <bt_read_static_addr+0xd4>)
   25fe4:	f7fa fa16 	bl	20414 <log_0>
   25fe8:	e7ea      	b.n	25fc0 <bt_read_static_addr+0x94>
   25fea:	bf00      	nop
   25fec:	200002b0 	.word	0x200002b0
   25ff0:	0003d1ec 	.word	0x0003d1ec
   25ff4:	0003d1a4 	.word	0x0003d1a4
   25ff8:	0003f4c8 	.word	0x0003f4c8
   25ffc:	0003f4f4 	.word	0x0003f4f4
   26000:	0003f514 	.word	0x0003f514

00026004 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   26004:	b510      	push	{r4, lr}
   26006:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   26008:	4b17      	ldr	r3, [pc, #92]	; (26068 <bt_setup_random_id_addr+0x64>)
   2600a:	79dc      	ldrb	r4, [r3, #7]
   2600c:	b934      	cbnz	r4, 2601c <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2600e:	2101      	movs	r1, #1
   26010:	a802      	add	r0, sp, #8
   26012:	f7ff ff8b 	bl	25f2c <bt_read_static_addr>
   26016:	4b14      	ldr	r3, [pc, #80]	; (26068 <bt_setup_random_id_addr+0x64>)
   26018:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   2601a:	b938      	cbnz	r0, 2602c <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   2601c:	2100      	movs	r1, #0
   2601e:	4608      	mov	r0, r1
   26020:	f7ff feb6 	bl	25d90 <bt_id_create>
   26024:	4603      	mov	r3, r0
}
   26026:	4618      	mov	r0, r3
   26028:	b008      	add	sp, #32
   2602a:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2602c:	4b0e      	ldr	r3, [pc, #56]	; (26068 <bt_setup_random_id_addr+0x64>)
   2602e:	79db      	ldrb	r3, [r3, #7]
   26030:	42a3      	cmp	r3, r4
   26032:	d916      	bls.n	26062 <bt_setup_random_id_addr+0x5e>
   26034:	2206      	movs	r2, #6
   26036:	2116      	movs	r1, #22
   26038:	ab02      	add	r3, sp, #8
   2603a:	fb01 3104 	mla	r1, r1, r4, r3
   2603e:	f10d 0001 	add.w	r0, sp, #1
   26042:	f010 fe8f 	bl	36d64 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   26046:	2301      	movs	r3, #1
   26048:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2604c:	2200      	movs	r2, #0
   2604e:	4669      	mov	r1, sp
   26050:	4620      	mov	r0, r4
   26052:	f7ff fccd 	bl	259f0 <id_create>
				if (err) {
   26056:	4603      	mov	r3, r0
   26058:	2800      	cmp	r0, #0
   2605a:	d1e4      	bne.n	26026 <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2605c:	3401      	adds	r4, #1
   2605e:	b2e4      	uxtb	r4, r4
   26060:	e7e4      	b.n	2602c <bt_setup_random_id_addr+0x28>
			return 0;
   26062:	2300      	movs	r3, #0
   26064:	e7df      	b.n	26026 <bt_setup_random_id_addr+0x22>
   26066:	bf00      	nop
   26068:	200002b0 	.word	0x200002b0

0002606c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   2606c:	b510      	push	{r4, lr}
   2606e:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   26070:	4b07      	ldr	r3, [pc, #28]	; (26090 <bt_id_set_create_conn_own_addr+0x24>)
   26072:	781b      	ldrb	r3, [r3, #0]
   26074:	2b01      	cmp	r3, #1
   26076:	d004      	beq.n	26082 <bt_id_set_create_conn_own_addr+0x16>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   26078:	4b05      	ldr	r3, [pc, #20]	; (26090 <bt_id_set_create_conn_own_addr+0x24>)
   2607a:	781b      	ldrb	r3, [r3, #0]
   2607c:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   2607e:	2000      	movs	r0, #0
}
   26080:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   26082:	4804      	ldr	r0, [pc, #16]	; (26094 <bt_id_set_create_conn_own_addr+0x28>)
   26084:	f7ff fc30 	bl	258e8 <set_random_address>
			if (err) {
   26088:	2800      	cmp	r0, #0
   2608a:	d0f5      	beq.n	26078 <bt_id_set_create_conn_own_addr+0xc>
   2608c:	e7f8      	b.n	26080 <bt_id_set_create_conn_own_addr+0x14>
   2608e:	bf00      	nop
   26090:	200002b0 	.word	0x200002b0
   26094:	200002b1 	.word	0x200002b1

00026098 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   26098:	b510      	push	{r4, lr}
   2609a:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   2609c:	4b07      	ldr	r3, [pc, #28]	; (260bc <bt_id_set_scan_own_addr+0x24>)
   2609e:	781b      	ldrb	r3, [r3, #0]
   260a0:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   260a2:	f011 f94e 	bl	37342 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   260a6:	b108      	cbz	r0, 260ac <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
   260a8:	2000      	movs	r0, #0
}
   260aa:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   260ac:	f011 f9bc 	bl	37428 <bt_id_set_private_addr>
			if (err) {
   260b0:	2800      	cmp	r0, #0
   260b2:	d1fa      	bne.n	260aa <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   260b4:	2301      	movs	r3, #1
   260b6:	7023      	strb	r3, [r4, #0]
   260b8:	e7f7      	b.n	260aa <bt_id_set_scan_own_addr+0x12>
   260ba:	bf00      	nop
   260bc:	200002b0 	.word	0x200002b0

000260c0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   260c0:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   260c2:	4b25      	ldr	r3, [pc, #148]	; (26158 <bt_id_init+0x98>)
   260c4:	79db      	ldrb	r3, [r3, #7]
   260c6:	b12b      	cbz	r3, 260d4 <bt_id_init+0x14>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   260c8:	4b23      	ldr	r3, [pc, #140]	; (26158 <bt_id_init+0x98>)
   260ca:	79db      	ldrb	r3, [r3, #7]
   260cc:	b1c3      	cbz	r3, 26100 <bt_id_init+0x40>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   260ce:	2400      	movs	r4, #0
}
   260d0:	4620      	mov	r0, r4
   260d2:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   260d4:	f7ff ff16 	bl	25f04 <bt_setup_public_id_addr>
		if (err) {
   260d8:	4604      	mov	r4, r0
   260da:	2800      	cmp	r0, #0
   260dc:	d0f4      	beq.n	260c8 <bt_id_init+0x8>
   260de:	4b1f      	ldr	r3, [pc, #124]	; (2615c <bt_id_init+0x9c>)
   260e0:	4a1f      	ldr	r2, [pc, #124]	; (26160 <bt_id_init+0xa0>)
   260e2:	1a9b      	subs	r3, r3, r2
   260e4:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   260e6:	f04f 0100 	mov.w	r1, #0
   260ea:	2201      	movs	r2, #1
   260ec:	f362 0102 	bfi	r1, r2, #0, #3
   260f0:	f36f 01c5 	bfc	r1, #3, #3
   260f4:	f363 118f 	bfi	r1, r3, #6, #10
   260f8:	481a      	ldr	r0, [pc, #104]	; (26164 <bt_id_init+0xa4>)
   260fa:	f7fa f98b 	bl	20414 <log_0>
			return err;
   260fe:	e7e7      	b.n	260d0 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   26100:	f7ff ff80 	bl	26004 <bt_setup_random_id_addr>
		if (err) {
   26104:	4604      	mov	r4, r0
   26106:	b9b0      	cbnz	r0, 26136 <bt_id_init+0x76>
		err = set_random_address(&bt_dev.id_addr[0].a);
   26108:	4817      	ldr	r0, [pc, #92]	; (26168 <bt_id_init+0xa8>)
   2610a:	f7ff fbed 	bl	258e8 <set_random_address>
		if (err) {
   2610e:	4604      	mov	r4, r0
   26110:	2800      	cmp	r0, #0
   26112:	d0dd      	beq.n	260d0 <bt_id_init+0x10>
   26114:	4b11      	ldr	r3, [pc, #68]	; (2615c <bt_id_init+0x9c>)
   26116:	4a12      	ldr	r2, [pc, #72]	; (26160 <bt_id_init+0xa0>)
   26118:	1a9b      	subs	r3, r3, r2
   2611a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   2611c:	f04f 0100 	mov.w	r1, #0
   26120:	2201      	movs	r2, #1
   26122:	f362 0102 	bfi	r1, r2, #0, #3
   26126:	f36f 01c5 	bfc	r1, #3, #3
   2612a:	f363 118f 	bfi	r1, r3, #6, #10
   2612e:	480f      	ldr	r0, [pc, #60]	; (2616c <bt_id_init+0xac>)
   26130:	f7fa f970 	bl	20414 <log_0>
			return err;
   26134:	e7cc      	b.n	260d0 <bt_id_init+0x10>
   26136:	4b09      	ldr	r3, [pc, #36]	; (2615c <bt_id_init+0x9c>)
   26138:	4a09      	ldr	r2, [pc, #36]	; (26160 <bt_id_init+0xa0>)
   2613a:	1a9b      	subs	r3, r3, r2
   2613c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   2613e:	f04f 0100 	mov.w	r1, #0
   26142:	2201      	movs	r2, #1
   26144:	f362 0102 	bfi	r1, r2, #0, #3
   26148:	f36f 01c5 	bfc	r1, #3, #3
   2614c:	f363 118f 	bfi	r1, r3, #6, #10
   26150:	4804      	ldr	r0, [pc, #16]	; (26164 <bt_id_init+0xa4>)
   26152:	f7fa f95f 	bl	20414 <log_0>
			return err;
   26156:	e7bb      	b.n	260d0 <bt_id_init+0x10>
   26158:	200002b0 	.word	0x200002b0
   2615c:	0003d1ec 	.word	0x0003d1ec
   26160:	0003d1a4 	.word	0x0003d1a4
   26164:	0003f540 	.word	0x0003f540
   26168:	200002b1 	.word	0x200002b1
   2616c:	0003f560 	.word	0x0003f560

00026170 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   26170:	b530      	push	{r4, r5, lr}
   26172:	b087      	sub	sp, #28
   26174:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   26176:	2102      	movs	r1, #2
   26178:	f242 000c 	movw	r0, #8204	; 0x200c
   2617c:	f7fe f8a8 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   26180:	b330      	cbz	r0, 261d0 <bt_le_scan_set_enable_legacy+0x60>
   26182:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   26184:	2102      	movs	r1, #2
   26186:	3008      	adds	r0, #8
   26188:	f014 fc93 	bl	3aab2 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   2618c:	2c01      	cmp	r4, #1
   2618e:	d015      	beq.n	261bc <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   26190:	2300      	movs	r3, #0
   26192:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   26194:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   26196:	2c01      	cmp	r4, #1
   26198:	bf14      	ite	ne
   2619a:	2400      	movne	r4, #0
   2619c:	2401      	moveq	r4, #1
   2619e:	9400      	str	r4, [sp, #0]
   261a0:	2305      	movs	r3, #5
   261a2:	4a0d      	ldr	r2, [pc, #52]	; (261d8 <bt_le_scan_set_enable_legacy+0x68>)
   261a4:	a903      	add	r1, sp, #12
   261a6:	4628      	mov	r0, r5
   261a8:	f7fe f880 	bl	242ac <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   261ac:	2200      	movs	r2, #0
   261ae:	4629      	mov	r1, r5
   261b0:	f242 000c 	movw	r0, #8204	; 0x200c
   261b4:	f7fe f8c8 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   261b8:	b007      	add	sp, #28
   261ba:	bd30      	pop	{r4, r5, pc}
   261bc:	f3bf 8f5b 	dmb	ish
   261c0:	4b05      	ldr	r3, [pc, #20]	; (261d8 <bt_le_scan_set_enable_legacy+0x68>)
   261c2:	681b      	ldr	r3, [r3, #0]
   261c4:	f3bf 8f5b 	dmb	ish
   261c8:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   261cc:	7043      	strb	r3, [r0, #1]
   261ce:	e7e1      	b.n	26194 <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   261d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   261d4:	e7f0      	b.n	261b8 <bt_le_scan_set_enable_legacy+0x48>
   261d6:	bf00      	nop
   261d8:	2000037c 	.word	0x2000037c

000261dc <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   261dc:	4b01      	ldr	r3, [pc, #4]	; (261e4 <bt_scan_reset+0x8>)
   261de:	2200      	movs	r2, #0
   261e0:	601a      	str	r2, [r3, #0]
}
   261e2:	4770      	bx	lr
   261e4:	20008224 	.word	0x20008224

000261e8 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   261e8:	b570      	push	{r4, r5, r6, lr}
   261ea:	b082      	sub	sp, #8
   261ec:	4604      	mov	r4, r0
   261ee:	460e      	mov	r6, r1
   261f0:	4615      	mov	r5, r2
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   261f2:	2207      	movs	r2, #7
   261f4:	2100      	movs	r1, #0
   261f6:	4668      	mov	r0, sp
   261f8:	f010 fdd8 	bl	36dac <memset>

	set_param.scan_type = scan_type;
   261fc:	f88d 4000 	strb.w	r4, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   26200:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   26204:	f8ad 5003 	strh.w	r5, [sp, #3]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   26208:	2300      	movs	r3, #0
   2620a:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   2620e:	2c01      	cmp	r4, #1
   26210:	bf14      	ite	ne
   26212:	2400      	movne	r4, #0
   26214:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   26216:	f10d 0105 	add.w	r1, sp, #5
   2621a:	4620      	mov	r0, r4
   2621c:	f7ff ff3c 	bl	26098 <bt_id_set_scan_own_addr>
	if (err) {
   26220:	b108      	cbz	r0, 26226 <start_le_scan_legacy+0x3e>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   26222:	b002      	add	sp, #8
   26224:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   26226:	2107      	movs	r1, #7
   26228:	f242 000b 	movw	r0, #8203	; 0x200b
   2622c:	f7fe f850 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   26230:	4605      	mov	r5, r0
   26232:	b370      	cbz	r0, 26292 <start_le_scan_legacy+0xaa>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   26234:	2207      	movs	r2, #7
   26236:	4669      	mov	r1, sp
   26238:	3008      	adds	r0, #8
   2623a:	f014 fc40 	bl	3aabe <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   2623e:	2200      	movs	r2, #0
   26240:	4629      	mov	r1, r5
   26242:	f242 000b 	movw	r0, #8203	; 0x200b
   26246:	f7fe f87f 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   2624a:	2800      	cmp	r0, #0
   2624c:	d1e9      	bne.n	26222 <start_le_scan_legacy+0x3a>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2624e:	2001      	movs	r0, #1
   26250:	f011 f949 	bl	374e6 <bt_le_scan_set_enable>
	if (err) {
   26254:	2800      	cmp	r0, #0
   26256:	d1e4      	bne.n	26222 <start_le_scan_legacy+0x3a>
	if (val) {
   26258:	b16c      	cbz	r4, 26276 <start_le_scan_legacy+0x8e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2625a:	4b0f      	ldr	r3, [pc, #60]	; (26298 <start_le_scan_legacy+0xb0>)
   2625c:	f3bf 8f5b 	dmb	ish
   26260:	e853 2f00 	ldrex	r2, [r3]
   26264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   26268:	e843 2100 	strex	r1, r2, [r3]
   2626c:	2900      	cmp	r1, #0
   2626e:	d1f7      	bne.n	26260 <start_le_scan_legacy+0x78>
   26270:	f3bf 8f5b 	dmb	ish
   26274:	e7d5      	b.n	26222 <start_le_scan_legacy+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26276:	4b08      	ldr	r3, [pc, #32]	; (26298 <start_le_scan_legacy+0xb0>)
   26278:	f3bf 8f5b 	dmb	ish
   2627c:	e853 2f00 	ldrex	r2, [r3]
   26280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   26284:	e843 2100 	strex	r1, r2, [r3]
   26288:	2900      	cmp	r1, #0
   2628a:	d1f7      	bne.n	2627c <start_le_scan_legacy+0x94>
   2628c:	f3bf 8f5b 	dmb	ish
}
   26290:	e7c7      	b.n	26222 <start_le_scan_legacy+0x3a>
		return -ENOBUFS;
   26292:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26296:	e7c4      	b.n	26222 <start_le_scan_legacy+0x3a>
   26298:	2000037c 	.word	0x2000037c

0002629c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   2629c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2629e:	f3bf 8f5b 	dmb	ish
   262a2:	4b21      	ldr	r3, [pc, #132]	; (26328 <bt_le_scan_update+0x8c>)
   262a4:	681b      	ldr	r3, [r3, #0]
   262a6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   262aa:	f3c3 1480 	ubfx	r4, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   262ae:	f013 0f40 	tst.w	r3, #64	; 0x40
   262b2:	d002      	beq.n	262ba <bt_le_scan_update+0x1e>
		return 0;
   262b4:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   262b6:	4620      	mov	r0, r4
   262b8:	bd38      	pop	{r3, r4, r5, pc}
   262ba:	4605      	mov	r5, r0
   262bc:	f3bf 8f5b 	dmb	ish
   262c0:	4b19      	ldr	r3, [pc, #100]	; (26328 <bt_le_scan_update+0x8c>)
   262c2:	681b      	ldr	r3, [r3, #0]
   262c4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   262c8:	f013 0f20 	tst.w	r3, #32
   262cc:	d003      	beq.n	262d6 <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   262ce:	2000      	movs	r0, #0
   262d0:	f011 f909 	bl	374e6 <bt_le_scan_set_enable>
		if (err) {
   262d4:	bb28      	cbnz	r0, 26322 <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   262d6:	2206      	movs	r2, #6
   262d8:	2100      	movs	r1, #0
   262da:	4608      	mov	r0, r1
   262dc:	f001 f908 	bl	274f0 <bt_conn_lookup_state_le>
		if (conn) {
   262e0:	b110      	cbz	r0, 262e8 <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   262e2:	f011 fa5d 	bl	377a0 <bt_conn_unref>
			return 0;
   262e6:	e7e6      	b.n	262b6 <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   262e8:	2202      	movs	r2, #2
   262ea:	2100      	movs	r1, #0
   262ec:	4608      	mov	r0, r1
   262ee:	f001 f8ff 	bl	274f0 <bt_conn_lookup_state_le>
		if (conn) {
   262f2:	4603      	mov	r3, r0
   262f4:	2800      	cmp	r0, #0
   262f6:	d0de      	beq.n	262b6 <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   262f8:	4a0b      	ldr	r2, [pc, #44]	; (26328 <bt_le_scan_update+0x8c>)
   262fa:	f3bf 8f5b 	dmb	ish
   262fe:	e852 1f00 	ldrex	r1, [r2]
   26302:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   26306:	e842 1000 	strex	r0, r1, [r2]
   2630a:	2800      	cmp	r0, #0
   2630c:	d1f7      	bne.n	262fe <bt_le_scan_update+0x62>
   2630e:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   26312:	4618      	mov	r0, r3
   26314:	f011 fa44 	bl	377a0 <bt_conn_unref>
			return start_passive_scan(fast_scan);
   26318:	4628      	mov	r0, r5
   2631a:	f011 f8e8 	bl	374ee <start_passive_scan>
   2631e:	4604      	mov	r4, r0
   26320:	e7c9      	b.n	262b6 <bt_le_scan_update+0x1a>
			return err;
   26322:	4604      	mov	r4, r0
   26324:	e7c7      	b.n	262b6 <bt_le_scan_update+0x1a>
   26326:	bf00      	nop
   26328:	2000037c 	.word	0x2000037c

0002632c <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   2632c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2632e:	f3bf 8f5b 	dmb	ish
   26332:	4b20      	ldr	r3, [pc, #128]	; (263b4 <check_pending_conn+0x88>)
   26334:	681b      	ldr	r3, [r3, #0]
   26336:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2633a:	f013 0f40 	tst.w	r3, #64	; 0x40
   2633e:	d103      	bne.n	26348 <check_pending_conn+0x1c>
   26340:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   26342:	f012 0f01 	tst.w	r2, #1
   26346:	d100      	bne.n	2634a <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   26348:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   2634a:	2202      	movs	r2, #2
   2634c:	4601      	mov	r1, r0
   2634e:	2000      	movs	r0, #0
   26350:	f001 f8ce 	bl	274f0 <bt_conn_lookup_state_le>
	if (!conn) {
   26354:	4605      	mov	r5, r0
   26356:	2800      	cmp	r0, #0
   26358:	d0f6      	beq.n	26348 <check_pending_conn+0x1c>
   2635a:	f3bf 8f5b 	dmb	ish
   2635e:	4b15      	ldr	r3, [pc, #84]	; (263b4 <check_pending_conn+0x88>)
   26360:	681b      	ldr	r3, [r3, #0]
   26362:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   26366:	f013 0f20 	tst.w	r3, #32
   2636a:	d003      	beq.n	26374 <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   2636c:	2000      	movs	r0, #0
   2636e:	f011 f8ba 	bl	374e6 <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   26372:	b948      	cbnz	r0, 26388 <check_pending_conn+0x5c>
	memcpy(dst, src, sizeof(*dst));
   26374:	2207      	movs	r2, #7
   26376:	4621      	mov	r1, r4
   26378:	f105 0096 	add.w	r0, r5, #150	; 0x96
   2637c:	f010 fcf2 	bl	36d64 <memcpy>
	if (bt_le_create_conn(conn)) {
   26380:	4628      	mov	r0, r5
   26382:	f010 feb6 	bl	370f2 <bt_le_create_conn>
   26386:	b160      	cbz	r0, 263a2 <check_pending_conn+0x76>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   26388:	231f      	movs	r3, #31
   2638a:	732b      	strb	r3, [r5, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2638c:	2100      	movs	r1, #0
   2638e:	4628      	mov	r0, r5
   26390:	f000 fdce 	bl	26f30 <bt_conn_set_state>
	bt_conn_unref(conn);
   26394:	4628      	mov	r0, r5
   26396:	f011 fa03 	bl	377a0 <bt_conn_unref>
	bt_le_scan_update(false);
   2639a:	2000      	movs	r0, #0
   2639c:	f7ff ff7e 	bl	2629c <bt_le_scan_update>
   263a0:	e7d2      	b.n	26348 <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   263a2:	2106      	movs	r1, #6
   263a4:	4628      	mov	r0, r5
   263a6:	f000 fdc3 	bl	26f30 <bt_conn_set_state>
	bt_conn_unref(conn);
   263aa:	4628      	mov	r0, r5
   263ac:	f011 f9f8 	bl	377a0 <bt_conn_unref>
	return;
   263b0:	e7ca      	b.n	26348 <check_pending_conn+0x1c>
   263b2:	bf00      	nop
   263b4:	2000037c 	.word	0x2000037c

000263b8 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   263b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263bc:	b085      	sub	sp, #20
   263be:	4682      	mov	sl, r0
   263c0:	4688      	mov	r8, r1
   263c2:	4615      	mov	r5, r2
   263c4:	4699      	mov	r9, r3
   263c6:	f3bf 8f5b 	dmb	ish
   263ca:	4b42      	ldr	r3, [pc, #264]	; (264d4 <le_adv_recv+0x11c>)
   263cc:	681b      	ldr	r3, [r3, #0]
   263ce:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	BT_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr),
	       info->adv_type, len, info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   263d2:	f013 0f40 	tst.w	r3, #64	; 0x40
   263d6:	d003      	beq.n	263e0 <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   263d8:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   263da:	f013 0f04 	tst.w	r3, #4
   263de:	d175      	bne.n	264cc <le_adv_recv+0x114>
		BT_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   263e0:	f89a 2000 	ldrb.w	r2, [sl]
   263e4:	1e93      	subs	r3, r2, #2
   263e6:	b2db      	uxtb	r3, r3
   263e8:	2b01      	cmp	r3, #1
   263ea:	d92f      	bls.n	2644c <le_adv_recv+0x94>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   263ec:	2aff      	cmp	r2, #255	; 0xff
   263ee:	d038      	beq.n	26462 <le_adv_recv+0xaa>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   263f0:	4651      	mov	r1, sl
   263f2:	2000      	movs	r0, #0
   263f4:	f011 f80f 	bl	37416 <bt_lookup_id_addr>
   263f8:	4601      	mov	r1, r0
   263fa:	2207      	movs	r2, #7
   263fc:	4668      	mov	r0, sp
   263fe:	f010 fcb1 	bl	36d64 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	info->addr = &id_addr;
   26402:	f8c8 d000 	str.w	sp, [r8]

	if (scan_dev_found_cb) {
   26406:	4b34      	ldr	r3, [pc, #208]	; (264d8 <le_adv_recv+0x120>)
   26408:	681b      	ldr	r3, [r3, #0]
   2640a:	b19b      	cbz	r3, 26434 <le_adv_recv+0x7c>
	state->offset = net_buf_simple_headroom(buf);
   2640c:	4628      	mov	r0, r5
   2640e:	f014 fb99 	bl	3ab44 <net_buf_simple_headroom>
   26412:	b284      	uxth	r4, r0
	state->len = buf->len;
   26414:	88ae      	ldrh	r6, [r5, #4]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   26416:	f8a5 9004 	strh.w	r9, [r5, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2641a:	4b2f      	ldr	r3, [pc, #188]	; (264d8 <le_adv_recv+0x120>)
   2641c:	681f      	ldr	r7, [r3, #0]
   2641e:	462b      	mov	r3, r5
   26420:	f898 2007 	ldrb.w	r2, [r8, #7]
   26424:	f998 1005 	ldrsb.w	r1, [r8, #5]
   26428:	4668      	mov	r0, sp
   2642a:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   2642c:	68ab      	ldr	r3, [r5, #8]
   2642e:	4423      	add	r3, r4
   26430:	602b      	str	r3, [r5, #0]
	buf->len = state->len;
   26432:	80ae      	strh	r6, [r5, #4]
	return list->head;
   26434:	4b29      	ldr	r3, [pc, #164]	; (264dc <le_adv_recv+0x124>)
   26436:	681e      	ldr	r6, [r3, #0]

		net_buf_simple_restore(buf, &state);
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   26438:	b1ee      	cbz	r6, 26476 <le_adv_recv+0xbe>
   2643a:	3e08      	subs	r6, #8
   2643c:	d01d      	beq.n	2647a <le_adv_recv+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2643e:	f116 0408 	adds.w	r4, r6, #8
   26442:	d01f      	beq.n	26484 <le_adv_recv+0xcc>
	return node->next;
   26444:	68b4      	ldr	r4, [r6, #8]
   26446:	b1ec      	cbz	r4, 26484 <le_adv_recv+0xcc>
   26448:	3c08      	subs	r4, #8
   2644a:	e01b      	b.n	26484 <le_adv_recv+0xcc>
   2644c:	2207      	movs	r2, #7
   2644e:	4651      	mov	r1, sl
   26450:	4668      	mov	r0, sp
   26452:	f010 fc87 	bl	36d64 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   26456:	f89d 3000 	ldrb.w	r3, [sp]
   2645a:	3b02      	subs	r3, #2
   2645c:	f88d 3000 	strb.w	r3, [sp]
   26460:	e7cf      	b.n	26402 <le_adv_recv+0x4a>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   26462:	2300      	movs	r3, #0
   26464:	9302      	str	r3, [sp, #8]
   26466:	f8cd 300b 	str.w	r3, [sp, #11]
   2646a:	2207      	movs	r2, #7
   2646c:	a902      	add	r1, sp, #8
   2646e:	4668      	mov	r0, sp
   26470:	f010 fc78 	bl	36d64 <memcpy>
   26474:	e7c5      	b.n	26402 <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   26476:	4634      	mov	r4, r6
   26478:	e004      	b.n	26484 <le_adv_recv+0xcc>
   2647a:	4634      	mov	r4, r6
   2647c:	e002      	b.n	26484 <le_adv_recv+0xcc>
   2647e:	4622      	mov	r2, r4
   26480:	4626      	mov	r6, r4
   26482:	4614      	mov	r4, r2
   26484:	b1e6      	cbz	r6, 264c0 <le_adv_recv+0x108>
		if (listener->recv) {
   26486:	6833      	ldr	r3, [r6, #0]
   26488:	b183      	cbz	r3, 264ac <le_adv_recv+0xf4>
	state->offset = net_buf_simple_headroom(buf);
   2648a:	4628      	mov	r0, r5
   2648c:	f014 fb5a 	bl	3ab44 <net_buf_simple_headroom>
   26490:	b287      	uxth	r7, r0
	state->len = buf->len;
   26492:	f8b5 b004 	ldrh.w	fp, [r5, #4]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   26496:	f8a5 9004 	strh.w	r9, [r5, #4]
			listener->recv(info, buf);
   2649a:	6833      	ldr	r3, [r6, #0]
   2649c:	4629      	mov	r1, r5
   2649e:	4640      	mov	r0, r8
   264a0:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   264a2:	68a8      	ldr	r0, [r5, #8]
   264a4:	4438      	add	r0, r7
   264a6:	6028      	str	r0, [r5, #0]
	buf->len = state->len;
   264a8:	f8a5 b004 	strh.w	fp, [r5, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   264ac:	2c00      	cmp	r4, #0
   264ae:	d0e6      	beq.n	2647e <le_adv_recv+0xc6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   264b0:	f114 0208 	adds.w	r2, r4, #8
   264b4:	d0e4      	beq.n	26480 <le_adv_recv+0xc8>
	return node->next;
   264b6:	68a2      	ldr	r2, [r4, #8]
   264b8:	2a00      	cmp	r2, #0
   264ba:	d0e1      	beq.n	26480 <le_adv_recv+0xc8>
   264bc:	3a08      	subs	r2, #8
   264be:	e7df      	b.n	26480 <le_adv_recv+0xc8>
			net_buf_simple_restore(buf, &state);
		}
	}

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   264c0:	f898 2008 	ldrb.w	r2, [r8, #8]
   264c4:	4651      	mov	r1, sl
   264c6:	4668      	mov	r0, sp
   264c8:	f7ff ff30 	bl	2632c <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   264cc:	b005      	add	sp, #20
   264ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264d2:	bf00      	nop
   264d4:	2000037c 	.word	0x2000037c
   264d8:	20008224 	.word	0x20008224
   264dc:	2000821c 	.word	0x2000821c

000264e0 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   264e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   264e2:	b085      	sub	sp, #20
   264e4:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   264e6:	f100 0608 	add.w	r6, r0, #8
   264ea:	4630      	mov	r0, r6
   264ec:	f014 fb1a 	bl	3ab24 <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   264f0:	1e45      	subs	r5, r0, #1
   264f2:	b2ed      	uxtb	r5, r5
   264f4:	2800      	cmp	r0, #0
   264f6:	d03f      	beq.n	26578 <bt_hci_le_adv_report+0x98>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   264f8:	89bb      	ldrh	r3, [r7, #12]
   264fa:	2b08      	cmp	r3, #8
   264fc:	d92c      	bls.n	26558 <bt_hci_le_adv_report+0x78>
	return net_buf_simple_pull_mem(&buf->b, len);
   264fe:	2109      	movs	r1, #9
   26500:	4630      	mov	r0, r6
   26502:	f014 fb07 	bl	3ab14 <net_buf_simple_pull_mem>
   26506:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   26508:	2301      	movs	r3, #1
   2650a:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   2650e:	2200      	movs	r2, #0
   26510:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   26514:	237f      	movs	r3, #127	; 0x7f
   26516:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   2651a:	7a03      	ldrb	r3, [r0, #8]
   2651c:	4403      	add	r3, r0
   2651e:	f993 3009 	ldrsb.w	r3, [r3, #9]
   26522:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   26526:	23ff      	movs	r3, #255	; 0xff
   26528:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   2652c:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   26530:	7800      	ldrb	r0, [r0, #0]
   26532:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   26536:	f010 ffa2 	bl	3747e <get_adv_props_legacy>
   2653a:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   2653e:	7a23      	ldrb	r3, [r4, #8]
   26540:	4632      	mov	r2, r6
   26542:	4669      	mov	r1, sp
   26544:	1c60      	adds	r0, r4, #1
   26546:	f7ff ff37 	bl	263b8 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   2654a:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   2654c:	3101      	adds	r1, #1
   2654e:	4630      	mov	r0, r6
   26550:	f014 fad8 	bl	3ab04 <net_buf_simple_pull>
	while (num_reports--) {
   26554:	4628      	mov	r0, r5
   26556:	e7cb      	b.n	264f0 <bt_hci_le_adv_report+0x10>
   26558:	4b08      	ldr	r3, [pc, #32]	; (2657c <bt_hci_le_adv_report+0x9c>)
   2655a:	4a09      	ldr	r2, [pc, #36]	; (26580 <bt_hci_le_adv_report+0xa0>)
   2655c:	1a9b      	subs	r3, r3, r2
   2655e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected end of buffer");
   26560:	f04f 0100 	mov.w	r1, #0
   26564:	2201      	movs	r2, #1
   26566:	f362 0102 	bfi	r1, r2, #0, #3
   2656a:	f36f 01c5 	bfc	r1, #3, #3
   2656e:	f363 118f 	bfi	r1, r3, #6, #10
   26572:	4804      	ldr	r0, [pc, #16]	; (26584 <bt_hci_le_adv_report+0xa4>)
   26574:	f7f9 ff4e 	bl	20414 <log_0>
	}
}
   26578:	b005      	add	sp, #20
   2657a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2657c:	0003d20c 	.word	0x0003d20c
   26580:	0003d1a4 	.word	0x0003d1a4
   26584:	0003f588 	.word	0x0003f588

00026588 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   26588:	b538      	push	{r3, r4, r5, lr}
   2658a:	f3bf 8f5b 	dmb	ish
   2658e:	4b48      	ldr	r3, [pc, #288]	; (266b0 <bt_le_scan_start+0x128>)
   26590:	681b      	ldr	r3, [r3, #0]
   26592:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   26596:	f013 0f02 	tst.w	r3, #2
   2659a:	d07d      	beq.n	26698 <bt_le_scan_start+0x110>
   2659c:	4604      	mov	r4, r0
   2659e:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   265a0:	f010 ff7e 	bl	374a0 <valid_le_scan_param>
   265a4:	2800      	cmp	r0, #0
   265a6:	d07a      	beq.n	2669e <bt_le_scan_start+0x116>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   265a8:	7823      	ldrb	r3, [r4, #0]
   265aa:	b11b      	cbz	r3, 265b4 <bt_le_scan_start+0x2c>
   265ac:	f010 ff50 	bl	37450 <bt_id_scan_random_addr_check>
   265b0:	2800      	cmp	r0, #0
   265b2:	d077      	beq.n	266a4 <bt_le_scan_start+0x11c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   265b4:	4b3e      	ldr	r3, [pc, #248]	; (266b0 <bt_le_scan_start+0x128>)
   265b6:	f3bf 8f5b 	dmb	ish
   265ba:	e853 2f00 	ldrex	r2, [r3]
   265be:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   265c2:	e843 1000 	strex	r0, r1, [r3]
   265c6:	2800      	cmp	r0, #0
   265c8:	d1f7      	bne.n	265ba <bt_le_scan_start+0x32>
   265ca:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   265ce:	f012 0f40 	tst.w	r2, #64	; 0x40
   265d2:	d16a      	bne.n	266aa <bt_le_scan_start+0x122>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   265d4:	f3bf 8f5b 	dmb	ish
   265d8:	681b      	ldr	r3, [r3, #0]
   265da:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   265de:	f013 0f20 	tst.w	r3, #32
   265e2:	d003      	beq.n	265ec <bt_le_scan_start+0x64>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   265e4:	2000      	movs	r0, #0
   265e6:	f010 ff7e 	bl	374e6 <bt_le_scan_set_enable>
		if (err) {
   265ea:	b9d8      	cbnz	r0, 26624 <bt_le_scan_start+0x9c>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   265ec:	6863      	ldr	r3, [r4, #4]
	if (val) {
   265ee:	f013 0f01 	tst.w	r3, #1
   265f2:	d025      	beq.n	26640 <bt_le_scan_start+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   265f4:	4b2e      	ldr	r3, [pc, #184]	; (266b0 <bt_le_scan_start+0x128>)
   265f6:	f3bf 8f5b 	dmb	ish
   265fa:	e853 2f00 	ldrex	r2, [r3]
   265fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   26602:	e843 2100 	strex	r1, r2, [r3]
   26606:	2900      	cmp	r1, #0
   26608:	d1f7      	bne.n	265fa <bt_le_scan_start+0x72>
   2660a:	f3bf 8f5b 	dmb	ish
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
   2660e:	89a3      	ldrh	r3, [r4, #12]
   26610:	bb23      	cbnz	r3, 2665c <bt_le_scan_start+0xd4>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
   26612:	8962      	ldrh	r2, [r4, #10]
   26614:	8921      	ldrh	r1, [r4, #8]
   26616:	7820      	ldrb	r0, [r4, #0]
   26618:	f7ff fde6 	bl	261e8 <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
   2661c:	bb70      	cbnz	r0, 2667c <bt_le_scan_start+0xf4>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   2661e:	4b25      	ldr	r3, [pc, #148]	; (266b4 <bt_le_scan_start+0x12c>)
   26620:	601d      	str	r5, [r3, #0]

	return 0;
}
   26622:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26624:	4b22      	ldr	r3, [pc, #136]	; (266b0 <bt_le_scan_start+0x128>)
   26626:	f3bf 8f5b 	dmb	ish
   2662a:	e853 2f00 	ldrex	r2, [r3]
   2662e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   26632:	e843 2100 	strex	r1, r2, [r3]
   26636:	2900      	cmp	r1, #0
   26638:	d1f7      	bne.n	2662a <bt_le_scan_start+0xa2>
   2663a:	f3bf 8f5b 	dmb	ish
			return err;
   2663e:	e7f0      	b.n	26622 <bt_le_scan_start+0x9a>
   26640:	4b1b      	ldr	r3, [pc, #108]	; (266b0 <bt_le_scan_start+0x128>)
   26642:	f3bf 8f5b 	dmb	ish
   26646:	e853 2f00 	ldrex	r2, [r3]
   2664a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   2664e:	e843 2100 	strex	r1, r2, [r3]
   26652:	2900      	cmp	r1, #0
   26654:	d1f7      	bne.n	26646 <bt_le_scan_start+0xbe>
   26656:	f3bf 8f5b 	dmb	ish
   2665a:	e7d8      	b.n	2660e <bt_le_scan_start+0x86>
   2665c:	4b14      	ldr	r3, [pc, #80]	; (266b0 <bt_le_scan_start+0x128>)
   2665e:	f3bf 8f5b 	dmb	ish
   26662:	e853 2f00 	ldrex	r2, [r3]
   26666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   2666a:	e843 2100 	strex	r1, r2, [r3]
   2666e:	2900      	cmp	r1, #0
   26670:	d1f7      	bne.n	26662 <bt_le_scan_start+0xda>
   26672:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
   26676:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2667a:	e7d2      	b.n	26622 <bt_le_scan_start+0x9a>
   2667c:	4b0c      	ldr	r3, [pc, #48]	; (266b0 <bt_le_scan_start+0x128>)
   2667e:	f3bf 8f5b 	dmb	ish
   26682:	e853 2f00 	ldrex	r2, [r3]
   26686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   2668a:	e843 2100 	strex	r1, r2, [r3]
   2668e:	2900      	cmp	r1, #0
   26690:	d1f7      	bne.n	26682 <bt_le_scan_start+0xfa>
   26692:	f3bf 8f5b 	dmb	ish
		return err;
   26696:	e7c4      	b.n	26622 <bt_le_scan_start+0x9a>
		return -EAGAIN;
   26698:	f06f 000a 	mvn.w	r0, #10
   2669c:	e7c1      	b.n	26622 <bt_le_scan_start+0x9a>
		return -EINVAL;
   2669e:	f06f 0015 	mvn.w	r0, #21
   266a2:	e7be      	b.n	26622 <bt_le_scan_start+0x9a>
		return -EINVAL;
   266a4:	f06f 0015 	mvn.w	r0, #21
   266a8:	e7bb      	b.n	26622 <bt_le_scan_start+0x9a>
		return -EALREADY;
   266aa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   266ae:	e7b8      	b.n	26622 <bt_le_scan_start+0x9a>
   266b0:	2000037c 	.word	0x2000037c
   266b4:	20008224 	.word	0x20008224

000266b8 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   266b8:	b508      	push	{r3, lr}
   266ba:	4b0c      	ldr	r3, [pc, #48]	; (266ec <bt_le_scan_stop+0x34>)
   266bc:	f3bf 8f5b 	dmb	ish
   266c0:	e853 2f00 	ldrex	r2, [r3]
   266c4:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   266c8:	e843 1000 	strex	r0, r1, [r3]
   266cc:	2800      	cmp	r0, #0
   266ce:	d1f7      	bne.n	266c0 <bt_le_scan_stop+0x8>
   266d0:	f3bf 8f5b 	dmb	ish
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   266d4:	f012 0f40 	tst.w	r2, #64	; 0x40
   266d8:	d005      	beq.n	266e6 <bt_le_scan_stop+0x2e>
		return -EALREADY;
	}

	bt_scan_reset();
   266da:	f7ff fd7f 	bl	261dc <bt_scan_reset>
#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
   266de:	2000      	movs	r0, #0
   266e0:	f7ff fddc 	bl	2629c <bt_le_scan_update>
}
   266e4:	bd08      	pop	{r3, pc}
		return -EALREADY;
   266e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   266ea:	e7fb      	b.n	266e4 <bt_le_scan_stop+0x2c>
   266ec:	2000037c 	.word	0x2000037c

000266f0 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   266f0:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   266f2:	2240      	movs	r2, #64	; 0x40
   266f4:	4903      	ldr	r1, [pc, #12]	; (26704 <bt_pub_key_is_debug+0x14>)
   266f6:	f010 fb08 	bl	36d0a <memcmp>
}
   266fa:	fab0 f080 	clz	r0, r0
   266fe:	0940      	lsrs	r0, r0, #5
   26700:	bd08      	pop	{r3, pc}
   26702:	bf00      	nop
   26704:	0003f640 	.word	0x0003f640

00026708 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   26708:	b538      	push	{r3, r4, r5, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2670a:	4b54      	ldr	r3, [pc, #336]	; (2685c <bt_pub_key_gen+0x154>)
   2670c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   26710:	f003 0306 	and.w	r3, r3, #6
   26714:	2b06      	cmp	r3, #6
   26716:	d107      	bne.n	26728 <bt_pub_key_gen+0x20>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   26718:	2800      	cmp	r0, #0
   2671a:	f000 809c 	beq.w	26856 <bt_pub_key_gen+0x14e>
	return list->head;
   2671e:	4b50      	ldr	r3, [pc, #320]	; (26860 <bt_pub_key_gen+0x158>)
   26720:	6819      	ldr	r1, [r3, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   26722:	b339      	cbz	r1, 26774 <bt_pub_key_gen+0x6c>
   26724:	1f0b      	subs	r3, r1, #4
   26726:	e028      	b.n	2677a <bt_pub_key_gen+0x72>
   26728:	4b4e      	ldr	r3, [pc, #312]	; (26864 <bt_pub_key_gen+0x15c>)
   2672a:	4a4f      	ldr	r2, [pc, #316]	; (26868 <bt_pub_key_gen+0x160>)
   2672c:	1a9b      	subs	r3, r3, r2
   2672e:	08db      	lsrs	r3, r3, #3
		BT_WARN("ECC HCI commands not available");
   26730:	f04f 0100 	mov.w	r1, #0
   26734:	2202      	movs	r2, #2
   26736:	f362 0102 	bfi	r1, r2, #0, #3
   2673a:	f36f 01c5 	bfc	r1, #3, #3
   2673e:	f363 118f 	bfi	r1, r3, #6, #10
   26742:	484a      	ldr	r0, [pc, #296]	; (2686c <bt_pub_key_gen+0x164>)
   26744:	f7f9 fe66 	bl	20414 <log_0>
		return -ENOTSUP;
   26748:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2674c:	e04d      	b.n	267ea <bt_pub_key_gen+0xe2>
   2674e:	4b45      	ldr	r3, [pc, #276]	; (26864 <bt_pub_key_gen+0x15c>)
   26750:	4a45      	ldr	r2, [pc, #276]	; (26868 <bt_pub_key_gen+0x160>)
   26752:	1a9b      	subs	r3, r3, r2
   26754:	08db      	lsrs	r3, r3, #3
		if (cb == new_cb) {
			BT_WARN("Callback already registered");
   26756:	f04f 0100 	mov.w	r1, #0
   2675a:	2202      	movs	r2, #2
   2675c:	f362 0102 	bfi	r1, r2, #0, #3
   26760:	f36f 01c5 	bfc	r1, #3, #3
   26764:	f363 118f 	bfi	r1, r3, #6, #10
   26768:	4841      	ldr	r0, [pc, #260]	; (26870 <bt_pub_key_gen+0x168>)
   2676a:	f7f9 fe53 	bl	20414 <log_0>
			return -EALREADY;
   2676e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   26772:	e03a      	b.n	267ea <bt_pub_key_gen+0xe2>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   26774:	460b      	mov	r3, r1
   26776:	e000      	b.n	2677a <bt_pub_key_gen+0x72>
   26778:	4613      	mov	r3, r2
   2677a:	b13b      	cbz	r3, 2678c <bt_pub_key_gen+0x84>
		if (cb == new_cb) {
   2677c:	4298      	cmp	r0, r3
   2677e:	d0e6      	beq.n	2674e <bt_pub_key_gen+0x46>
Z_GENLIST_PEEK_NEXT(slist, snode)
   26780:	1d1a      	adds	r2, r3, #4
   26782:	d0f9      	beq.n	26778 <bt_pub_key_gen+0x70>
	return node->next;
   26784:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   26786:	b10b      	cbz	r3, 2678c <bt_pub_key_gen+0x84>
   26788:	3b04      	subs	r3, #4
   2678a:	e7f6      	b.n	2677a <bt_pub_key_gen+0x72>
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2678c:	1d02      	adds	r2, r0, #4
	parent->next = child;
   2678e:	6041      	str	r1, [r0, #4]
	list->head = node;
   26790:	4b33      	ldr	r3, [pc, #204]	; (26860 <bt_pub_key_gen+0x158>)
   26792:	601a      	str	r2, [r3, #0]
	return list->tail;
   26794:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26796:	b18b      	cbz	r3, 267bc <bt_pub_key_gen+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26798:	4b36      	ldr	r3, [pc, #216]	; (26874 <bt_pub_key_gen+0x16c>)
   2679a:	f3bf 8f5b 	dmb	ish
   2679e:	e853 2f00 	ldrex	r2, [r3]
   267a2:	f042 0110 	orr.w	r1, r2, #16
   267a6:	e843 1000 	strex	r0, r1, [r3]
   267aa:	2800      	cmp	r0, #0
   267ac:	d1f7      	bne.n	2679e <bt_pub_key_gen+0x96>
   267ae:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   267b2:	f012 0f10 	tst.w	r2, #16
   267b6:	d004      	beq.n	267c2 <bt_pub_key_gen+0xba>
		return 0;
   267b8:	2500      	movs	r5, #0
   267ba:	e016      	b.n	267ea <bt_pub_key_gen+0xe2>
	list->tail = node;
   267bc:	4b28      	ldr	r3, [pc, #160]	; (26860 <bt_pub_key_gen+0x158>)
   267be:	605a      	str	r2, [r3, #4]
}
   267c0:	e7ea      	b.n	26798 <bt_pub_key_gen+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   267c2:	f3bf 8f5b 	dmb	ish
   267c6:	e853 2f00 	ldrex	r2, [r3]
   267ca:	f022 0208 	bic.w	r2, r2, #8
   267ce:	e843 2100 	strex	r1, r2, [r3]
   267d2:	2900      	cmp	r1, #0
   267d4:	d1f7      	bne.n	267c6 <bt_pub_key_gen+0xbe>
   267d6:	f3bf 8f5b 	dmb	ish
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   267da:	2200      	movs	r2, #0
   267dc:	4611      	mov	r1, r2
   267de:	f242 0025 	movw	r0, #8229	; 0x2025
   267e2:	f7fd fdb1 	bl	24348 <bt_hci_cmd_send_sync>
	if (err) {
   267e6:	4605      	mov	r5, r0
   267e8:	b908      	cbnz	r0, 267ee <bt_pub_key_gen+0xe6>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   267ea:	4628      	mov	r0, r5
   267ec:	bd38      	pop	{r3, r4, r5, pc}
   267ee:	4b1d      	ldr	r3, [pc, #116]	; (26864 <bt_pub_key_gen+0x15c>)
   267f0:	4a1d      	ldr	r2, [pc, #116]	; (26868 <bt_pub_key_gen+0x160>)
   267f2:	1a9b      	subs	r3, r3, r2
   267f4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Sending LE P256 Public Key command failed");
   267f6:	f04f 0100 	mov.w	r1, #0
   267fa:	2201      	movs	r2, #1
   267fc:	f362 0102 	bfi	r1, r2, #0, #3
   26800:	f36f 01c5 	bfc	r1, #3, #3
   26804:	f363 118f 	bfi	r1, r3, #6, #10
   26808:	481b      	ldr	r0, [pc, #108]	; (26878 <bt_pub_key_gen+0x170>)
   2680a:	f7f9 fe03 	bl	20414 <log_0>
   2680e:	4b19      	ldr	r3, [pc, #100]	; (26874 <bt_pub_key_gen+0x16c>)
   26810:	f3bf 8f5b 	dmb	ish
   26814:	e853 2f00 	ldrex	r2, [r3]
   26818:	f022 0210 	bic.w	r2, r2, #16
   2681c:	e843 2100 	strex	r1, r2, [r3]
   26820:	2900      	cmp	r1, #0
   26822:	d1f7      	bne.n	26814 <bt_pub_key_gen+0x10c>
   26824:	f3bf 8f5b 	dmb	ish
	return list->head;
   26828:	4b0d      	ldr	r3, [pc, #52]	; (26860 <bt_pub_key_gen+0x158>)
   2682a:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2682c:	b13c      	cbz	r4, 2683e <bt_pub_key_gen+0x136>
   2682e:	3c04      	subs	r4, #4
   26830:	e005      	b.n	2683e <bt_pub_key_gen+0x136>
Z_GENLIST_PEEK_NEXT(slist, snode)
   26832:	f114 0f04 	cmn.w	r4, #4
   26836:	d009      	beq.n	2684c <bt_pub_key_gen+0x144>
	return node->next;
   26838:	6864      	ldr	r4, [r4, #4]
   2683a:	b13c      	cbz	r4, 2684c <bt_pub_key_gen+0x144>
   2683c:	3c04      	subs	r4, #4
   2683e:	b12c      	cbz	r4, 2684c <bt_pub_key_gen+0x144>
			if (cb->func) {
   26840:	6823      	ldr	r3, [r4, #0]
   26842:	2b00      	cmp	r3, #0
   26844:	d0f5      	beq.n	26832 <bt_pub_key_gen+0x12a>
				cb->func(NULL);
   26846:	2000      	movs	r0, #0
   26848:	4798      	blx	r3
   2684a:	e7f2      	b.n	26832 <bt_pub_key_gen+0x12a>
	list->head = NULL;
   2684c:	4b04      	ldr	r3, [pc, #16]	; (26860 <bt_pub_key_gen+0x158>)
   2684e:	2200      	movs	r2, #0
   26850:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   26852:	605a      	str	r2, [r3, #4]
		return err;
   26854:	e7c9      	b.n	267ea <bt_pub_key_gen+0xe2>
		return -EINVAL;
   26856:	f06f 0515 	mvn.w	r5, #21
   2685a:	e7c6      	b.n	267ea <bt_pub_key_gen+0xe2>
   2685c:	200002b0 	.word	0x200002b0
   26860:	2000826c 	.word	0x2000826c
   26864:	0003d1cc 	.word	0x0003d1cc
   26868:	0003d1a4 	.word	0x0003d1a4
   2686c:	0003f5ac 	.word	0x0003f5ac
   26870:	0003f5cc 	.word	0x0003f5cc
   26874:	2000037c 	.word	0x2000037c
   26878:	0003f5e8 	.word	0x0003f5e8

0002687c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2687c:	f3bf 8f5b 	dmb	ish
   26880:	4b05      	ldr	r3, [pc, #20]	; (26898 <bt_pub_key_get+0x1c>)
   26882:	681b      	ldr	r3, [r3, #0]
   26884:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		return debug_public_key;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   26888:	f013 0f08 	tst.w	r3, #8
   2688c:	d001      	beq.n	26892 <bt_pub_key_get+0x16>
		return pub_key;
   2688e:	4803      	ldr	r0, [pc, #12]	; (2689c <bt_pub_key_get+0x20>)
	}

	return NULL;
}
   26890:	4770      	bx	lr
	return NULL;
   26892:	2000      	movs	r0, #0
   26894:	4770      	bx	lr
   26896:	bf00      	nop
   26898:	2000037c 	.word	0x2000037c
   2689c:	2000822c 	.word	0x2000822c

000268a0 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   268a0:	b510      	push	{r4, lr}
	int err;

	if (dh_key_cb == cb) {
   268a2:	4b1e      	ldr	r3, [pc, #120]	; (2691c <bt_dh_key_gen+0x7c>)
   268a4:	681b      	ldr	r3, [r3, #0]
   268a6:	428b      	cmp	r3, r1
   268a8:	d032      	beq.n	26910 <bt_dh_key_gen+0x70>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   268aa:	b9cb      	cbnz	r3, 268e0 <bt_dh_key_gen+0x40>
   268ac:	f3bf 8f5b 	dmb	ish
   268b0:	4b1b      	ldr	r3, [pc, #108]	; (26920 <bt_dh_key_gen+0x80>)
   268b2:	681b      	ldr	r3, [r3, #0]
   268b4:	f3bf 8f5b 	dmb	ish
   268b8:	f013 0f10 	tst.w	r3, #16
   268bc:	d110      	bne.n	268e0 <bt_dh_key_gen+0x40>
   268be:	f3bf 8f5b 	dmb	ish
   268c2:	4b17      	ldr	r3, [pc, #92]	; (26920 <bt_dh_key_gen+0x80>)
   268c4:	681b      	ldr	r3, [r3, #0]
   268c6:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   268ca:	f013 0f08 	tst.w	r3, #8
   268ce:	d022      	beq.n	26916 <bt_dh_key_gen+0x76>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
   268d0:	4b12      	ldr	r3, [pc, #72]	; (2691c <bt_dh_key_gen+0x7c>)
   268d2:	6019      	str	r1, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		err = hci_generate_dhkey_v2(remote_pk,
					    BT_HCI_LE_KEY_TYPE_DEBUG);
	} else {
		err = hci_generate_dhkey_v1(remote_pk);
   268d4:	f010 fe17 	bl	37506 <hci_generate_dhkey_v1>
	}

	if (err) {
   268d8:	4604      	mov	r4, r0
   268da:	b920      	cbnz	r0, 268e6 <bt_dh_key_gen+0x46>
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   268dc:	4620      	mov	r0, r4
   268de:	bd10      	pop	{r4, pc}
		return -EBUSY;
   268e0:	f06f 040f 	mvn.w	r4, #15
   268e4:	e7fa      	b.n	268dc <bt_dh_key_gen+0x3c>
		dh_key_cb = NULL;
   268e6:	2100      	movs	r1, #0
   268e8:	4b0c      	ldr	r3, [pc, #48]	; (2691c <bt_dh_key_gen+0x7c>)
   268ea:	6019      	str	r1, [r3, #0]
   268ec:	4b0d      	ldr	r3, [pc, #52]	; (26924 <bt_dh_key_gen+0x84>)
   268ee:	4a0e      	ldr	r2, [pc, #56]	; (26928 <bt_dh_key_gen+0x88>)
   268f0:	1a9b      	subs	r3, r3, r2
   268f2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to generate DHKey (err %d)", err);
   268f4:	f04f 0200 	mov.w	r2, #0
   268f8:	2002      	movs	r0, #2
   268fa:	f360 0202 	bfi	r2, r0, #0, #3
   268fe:	f361 02c5 	bfi	r2, r1, #3, #3
   26902:	f363 128f 	bfi	r2, r3, #6, #10
   26906:	4621      	mov	r1, r4
   26908:	4808      	ldr	r0, [pc, #32]	; (2692c <bt_dh_key_gen+0x8c>)
   2690a:	f7f9 fccd 	bl	202a8 <log_1>
		return err;
   2690e:	e7e5      	b.n	268dc <bt_dh_key_gen+0x3c>
		return -EALREADY;
   26910:	f06f 0477 	mvn.w	r4, #119	; 0x77
   26914:	e7e2      	b.n	268dc <bt_dh_key_gen+0x3c>
		return -EADDRNOTAVAIL;
   26916:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   2691a:	e7df      	b.n	268dc <bt_dh_key_gen+0x3c>
   2691c:	20008228 	.word	0x20008228
   26920:	2000037c 	.word	0x2000037c
   26924:	0003d1cc 	.word	0x0003d1cc
   26928:	0003d1a4 	.word	0x0003d1a4
   2692c:	0003f614 	.word	0x0003f614

00026930 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   26930:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   26932:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26934:	4b1e      	ldr	r3, [pc, #120]	; (269b0 <bt_hci_evt_le_pkey_complete+0x80>)
   26936:	f3bf 8f5b 	dmb	ish
   2693a:	e853 2f00 	ldrex	r2, [r3]
   2693e:	f022 0210 	bic.w	r2, r2, #16
   26942:	e843 2100 	strex	r1, r2, [r3]
   26946:	2900      	cmp	r1, #0
   26948:	d1f7      	bne.n	2693a <bt_hci_evt_le_pkey_complete+0xa>
   2694a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2694e:	782b      	ldrb	r3, [r5, #0]
   26950:	b123      	cbz	r3, 2695c <bt_hci_evt_le_pkey_complete+0x2c>
	return list->head;
   26952:	4b18      	ldr	r3, [pc, #96]	; (269b4 <bt_hci_evt_le_pkey_complete+0x84>)
   26954:	681c      	ldr	r4, [r3, #0]
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   26956:	b1dc      	cbz	r4, 26990 <bt_hci_evt_le_pkey_complete+0x60>
   26958:	3c04      	subs	r4, #4
   2695a:	e019      	b.n	26990 <bt_hci_evt_le_pkey_complete+0x60>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2695c:	2240      	movs	r2, #64	; 0x40
   2695e:	1c69      	adds	r1, r5, #1
   26960:	4815      	ldr	r0, [pc, #84]	; (269b8 <bt_hci_evt_le_pkey_complete+0x88>)
   26962:	f010 f9ff 	bl	36d64 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26966:	4b12      	ldr	r3, [pc, #72]	; (269b0 <bt_hci_evt_le_pkey_complete+0x80>)
   26968:	f3bf 8f5b 	dmb	ish
   2696c:	e853 2f00 	ldrex	r2, [r3]
   26970:	f042 0208 	orr.w	r2, r2, #8
   26974:	e843 2100 	strex	r1, r2, [r3]
   26978:	2900      	cmp	r1, #0
   2697a:	d1f7      	bne.n	2696c <bt_hci_evt_le_pkey_complete+0x3c>
   2697c:	f3bf 8f5b 	dmb	ish
}
   26980:	e7e7      	b.n	26952 <bt_hci_evt_le_pkey_complete+0x22>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   26982:	2000      	movs	r0, #0
   26984:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   26986:	1d23      	adds	r3, r4, #4
   26988:	d00b      	beq.n	269a2 <bt_hci_evt_le_pkey_complete+0x72>
	return node->next;
   2698a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2698c:	b15c      	cbz	r4, 269a6 <bt_hci_evt_le_pkey_complete+0x76>
   2698e:	3c04      	subs	r4, #4
   26990:	b14c      	cbz	r4, 269a6 <bt_hci_evt_le_pkey_complete+0x76>
		if (cb->func) {
   26992:	6823      	ldr	r3, [r4, #0]
   26994:	2b00      	cmp	r3, #0
   26996:	d0f6      	beq.n	26986 <bt_hci_evt_le_pkey_complete+0x56>
			cb->func(evt->status ? NULL : pub_key);
   26998:	782a      	ldrb	r2, [r5, #0]
   2699a:	2a00      	cmp	r2, #0
   2699c:	d1f1      	bne.n	26982 <bt_hci_evt_le_pkey_complete+0x52>
   2699e:	4806      	ldr	r0, [pc, #24]	; (269b8 <bt_hci_evt_le_pkey_complete+0x88>)
   269a0:	e7f0      	b.n	26984 <bt_hci_evt_le_pkey_complete+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   269a2:	461c      	mov	r4, r3
   269a4:	e7f4      	b.n	26990 <bt_hci_evt_le_pkey_complete+0x60>
	list->head = NULL;
   269a6:	4b03      	ldr	r3, [pc, #12]	; (269b4 <bt_hci_evt_le_pkey_complete+0x84>)
   269a8:	2200      	movs	r2, #0
   269aa:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   269ac:	605a      	str	r2, [r3, #4]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   269ae:	bd38      	pop	{r3, r4, r5, pc}
   269b0:	2000037c 	.word	0x2000037c
   269b4:	2000826c 	.word	0x2000826c
   269b8:	2000822c 	.word	0x2000822c

000269bc <bt_hci_evt_le_dhkey_complete>:

void bt_hci_evt_le_dhkey_complete(struct net_buf *buf)
{
   269bc:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   269be:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   269c0:	4b06      	ldr	r3, [pc, #24]	; (269dc <bt_hci_evt_le_dhkey_complete+0x20>)
   269c2:	681b      	ldr	r3, [r3, #0]
   269c4:	b133      	cbz	r3, 269d4 <bt_hci_evt_le_dhkey_complete+0x18>
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   269c6:	4a05      	ldr	r2, [pc, #20]	; (269dc <bt_hci_evt_le_dhkey_complete+0x20>)
   269c8:	2100      	movs	r1, #0
   269ca:	6011      	str	r1, [r2, #0]
		cb(evt->status ? NULL : evt->dhkey);
   269cc:	7802      	ldrb	r2, [r0, #0]
   269ce:	b912      	cbnz	r2, 269d6 <bt_hci_evt_le_dhkey_complete+0x1a>
   269d0:	3001      	adds	r0, #1
   269d2:	4798      	blx	r3
	}
}
   269d4:	bd08      	pop	{r3, pc}
		cb(evt->status ? NULL : evt->dhkey);
   269d6:	2000      	movs	r0, #0
   269d8:	e7fb      	b.n	269d2 <bt_hci_evt_le_dhkey_complete+0x16>
   269da:	bf00      	nop
   269dc:	20008228 	.word	0x20008228

000269e0 <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   269e0:	b538      	push	{r3, r4, r5, lr}
   269e2:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   269e4:	4b0c      	ldr	r3, [pc, #48]	; (26a18 <notify_disconnected+0x38>)
   269e6:	681c      	ldr	r4, [r3, #0]
   269e8:	e000      	b.n	269ec <notify_disconnected+0xc>
   269ea:	69e4      	ldr	r4, [r4, #28]
   269ec:	b134      	cbz	r4, 269fc <notify_disconnected+0x1c>
		if (cb->disconnected) {
   269ee:	6863      	ldr	r3, [r4, #4]
   269f0:	2b00      	cmp	r3, #0
   269f2:	d0fa      	beq.n	269ea <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   269f4:	7b29      	ldrb	r1, [r5, #12]
   269f6:	4628      	mov	r0, r5
   269f8:	4798      	blx	r3
   269fa:	e7f6      	b.n	269ea <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   269fc:	4c07      	ldr	r4, [pc, #28]	; (26a1c <notify_disconnected+0x3c>)
   269fe:	e000      	b.n	26a02 <notify_disconnected+0x22>
   26a00:	3420      	adds	r4, #32
   26a02:	4b07      	ldr	r3, [pc, #28]	; (26a20 <notify_disconnected+0x40>)
   26a04:	429c      	cmp	r4, r3
   26a06:	d206      	bcs.n	26a16 <notify_disconnected+0x36>
		if (cb->disconnected) {
   26a08:	6863      	ldr	r3, [r4, #4]
   26a0a:	2b00      	cmp	r3, #0
   26a0c:	d0f8      	beq.n	26a00 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   26a0e:	7b29      	ldrb	r1, [r5, #12]
   26a10:	4628      	mov	r0, r5
   26a12:	4798      	blx	r3
   26a14:	e7f4      	b.n	26a00 <notify_disconnected+0x20>
		}
	}
}
   26a16:	bd38      	pop	{r3, r4, r5, pc}
   26a18:	20008278 	.word	0x20008278
   26a1c:	0003d174 	.word	0x0003d174
   26a20:	0003d194 	.word	0x0003d194

00026a24 <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
   26a24:	b430      	push	{r4, r5}
	bt_dev.create_param = *param;
   26a26:	4d0c      	ldr	r5, [pc, #48]	; (26a58 <create_param_setup+0x34>)
   26a28:	f105 0408 	add.w	r4, r5, #8
   26a2c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   26a2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
   26a32:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   26a34:	b90b      	cbnz	r3, 26a3a <create_param_setup+0x16>
   26a36:	f44f 7396 	mov.w	r3, #300	; 0x12c
   26a3a:	4a07      	ldr	r2, [pc, #28]	; (26a58 <create_param_setup+0x34>)
   26a3c:	8293      	strh	r3, [r2, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
   26a3e:	8a13      	ldrh	r3, [r2, #16]
	bt_dev.create_param.interval_coded =
   26a40:	b903      	cbnz	r3, 26a44 <create_param_setup+0x20>
   26a42:	8993      	ldrh	r3, [r2, #12]
   26a44:	4a04      	ldr	r2, [pc, #16]	; (26a58 <create_param_setup+0x34>)
   26a46:	8213      	strh	r3, [r2, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
   26a48:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   26a4a:	b903      	cbnz	r3, 26a4e <create_param_setup+0x2a>
   26a4c:	89d3      	ldrh	r3, [r2, #14]
   26a4e:	4a02      	ldr	r2, [pc, #8]	; (26a58 <create_param_setup+0x34>)
   26a50:	8253      	strh	r3, [r2, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
   26a52:	bc30      	pop	{r4, r5}
   26a54:	4770      	bx	lr
   26a56:	bf00      	nop
   26a58:	200002b0 	.word	0x200002b0

00026a5c <tx_free>:
{
   26a5c:	b508      	push	{r3, lr}
   26a5e:	4601      	mov	r1, r0
	tx->cb = NULL;
   26a60:	2300      	movs	r3, #0
   26a62:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   26a64:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   26a66:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   26a68:	4801      	ldr	r0, [pc, #4]	; (26a70 <tx_free+0x14>)
   26a6a:	f015 fc6d 	bl	3c348 <k_queue_append>
}
   26a6e:	bd08      	pop	{r3, pc}
   26a70:	20000b98 	.word	0x20000b98

00026a74 <conn_tx_alloc>:
{
   26a74:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   26a76:	f00a f9f9 	bl	30e6c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   26a7a:	4b08      	ldr	r3, [pc, #32]	; (26a9c <conn_tx_alloc+0x28>)
   26a7c:	4283      	cmp	r3, r0
   26a7e:	d007      	beq.n	26a90 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   26a80:	f04f 32ff 	mov.w	r2, #4294967295
   26a84:	f04f 33ff 	mov.w	r3, #4294967295
   26a88:	4805      	ldr	r0, [pc, #20]	; (26aa0 <conn_tx_alloc+0x2c>)
   26a8a:	f009 fbb3 	bl	301f4 <z_impl_k_queue_get>
}
   26a8e:	bd08      	pop	{r3, pc}
   26a90:	2200      	movs	r2, #0
   26a92:	2300      	movs	r3, #0
   26a94:	4802      	ldr	r0, [pc, #8]	; (26aa0 <conn_tx_alloc+0x2c>)
   26a96:	f009 fbad 	bl	301f4 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   26a9a:	e7f8      	b.n	26a8e <conn_tx_alloc+0x1a>
   26a9c:	20006dd8 	.word	0x20006dd8
   26aa0:	20000b98 	.word	0x20000b98

00026aa4 <notify_connected>:
{
   26aa4:	b538      	push	{r3, r4, r5, lr}
   26aa6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   26aa8:	4b0f      	ldr	r3, [pc, #60]	; (26ae8 <notify_connected+0x44>)
   26aaa:	681c      	ldr	r4, [r3, #0]
   26aac:	e000      	b.n	26ab0 <notify_connected+0xc>
   26aae:	69e4      	ldr	r4, [r4, #28]
   26ab0:	b134      	cbz	r4, 26ac0 <notify_connected+0x1c>
		if (cb->connected) {
   26ab2:	6823      	ldr	r3, [r4, #0]
   26ab4:	2b00      	cmp	r3, #0
   26ab6:	d0fa      	beq.n	26aae <notify_connected+0xa>
			cb->connected(conn, conn->err);
   26ab8:	7b29      	ldrb	r1, [r5, #12]
   26aba:	4628      	mov	r0, r5
   26abc:	4798      	blx	r3
   26abe:	e7f6      	b.n	26aae <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   26ac0:	4c0a      	ldr	r4, [pc, #40]	; (26aec <notify_connected+0x48>)
   26ac2:	e000      	b.n	26ac6 <notify_connected+0x22>
   26ac4:	3420      	adds	r4, #32
   26ac6:	4b0a      	ldr	r3, [pc, #40]	; (26af0 <notify_connected+0x4c>)
   26ac8:	429c      	cmp	r4, r3
   26aca:	d206      	bcs.n	26ada <notify_connected+0x36>
		if (cb->connected) {
   26acc:	6823      	ldr	r3, [r4, #0]
   26ace:	2b00      	cmp	r3, #0
   26ad0:	d0f8      	beq.n	26ac4 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   26ad2:	7b29      	ldrb	r1, [r5, #12]
   26ad4:	4628      	mov	r0, r5
   26ad6:	4798      	blx	r3
   26ad8:	e7f4      	b.n	26ac4 <notify_connected+0x20>
	if (!conn->err) {
   26ada:	7b2b      	ldrb	r3, [r5, #12]
   26adc:	b103      	cbz	r3, 26ae0 <notify_connected+0x3c>
}
   26ade:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   26ae0:	4628      	mov	r0, r5
   26ae2:	f003 fea1 	bl	2a828 <bt_gatt_connected>
}
   26ae6:	e7fa      	b.n	26ade <notify_connected+0x3a>
   26ae8:	20008278 	.word	0x20008278
   26aec:	0003d174 	.word	0x0003d174
   26af0:	0003d194 	.word	0x0003d194

00026af4 <bt_conn_get_pkts>:
}
   26af4:	4800      	ldr	r0, [pc, #0]	; (26af8 <bt_conn_get_pkts+0x4>)
   26af6:	4770      	bx	lr
   26af8:	200003b0 	.word	0x200003b0

00026afc <send_frag>:
{
   26afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26b00:	4605      	mov	r5, r0
   26b02:	460e      	mov	r6, r1
   26b04:	4691      	mov	r9, r2
   26b06:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   26b08:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   26b0a:	f7ff fff3 	bl	26af4 <bt_conn_get_pkts>
   26b0e:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   26b10:	f04f 32ff 	mov.w	r2, #4294967295
   26b14:	f04f 33ff 	mov.w	r3, #4294967295
   26b18:	f009 fbd0 	bl	302bc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   26b1c:	7b6b      	ldrb	r3, [r5, #13]
   26b1e:	2b07      	cmp	r3, #7
   26b20:	d159      	bne.n	26bd6 <send_frag+0xda>
   26b22:	f04f 0240 	mov.w	r2, #64	; 0x40
   26b26:	f3ef 8311 	mrs	r3, BASEPRI
   26b2a:	f382 8812 	msr	BASEPRI_MAX, r2
   26b2e:	f3bf 8f6f 	isb	sy
	if (tx) {
   26b32:	b1af      	cbz	r7, 26b60 <send_frag+0x64>
	parent->next = child;
   26b34:	2200      	movs	r2, #0
   26b36:	603a      	str	r2, [r7, #0]
	return list->tail;
   26b38:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   26b3a:	b172      	cbz	r2, 26b5a <send_frag+0x5e>
	parent->next = child;
   26b3c:	6017      	str	r7, [r2, #0]
	list->tail = node;
   26b3e:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   26b40:	f383 8811 	msr	BASEPRI, r3
   26b44:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   26b48:	464a      	mov	r2, r9
   26b4a:	4631      	mov	r1, r6
   26b4c:	4628      	mov	r0, r5
   26b4e:	f010 fd31 	bl	375b4 <send_acl>
	if (err) {
   26b52:	4601      	mov	r1, r0
   26b54:	b988      	cbnz	r0, 26b7a <send_frag+0x7e>
	return true;
   26b56:	2001      	movs	r0, #1
   26b58:	e046      	b.n	26be8 <send_frag+0xec>
   26b5a:	61af      	str	r7, [r5, #24]
	list->head = node;
   26b5c:	616f      	str	r7, [r5, #20]
}
   26b5e:	e7ef      	b.n	26b40 <send_frag+0x44>
	return list->tail;
   26b60:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   26b62:	b13a      	cbz	r2, 26b74 <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   26b64:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   26b68:	f8da 2000 	ldr.w	r2, [sl]
   26b6c:	3201      	adds	r2, #1
   26b6e:	f8ca 2000 	str.w	r2, [sl]
   26b72:	e7e5      	b.n	26b40 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   26b74:	f105 0a1c 	add.w	sl, r5, #28
   26b78:	e7f6      	b.n	26b68 <send_frag+0x6c>
   26b7a:	4b26      	ldr	r3, [pc, #152]	; (26c14 <send_frag+0x118>)
   26b7c:	4a26      	ldr	r2, [pc, #152]	; (26c18 <send_frag+0x11c>)
   26b7e:	1a9b      	subs	r3, r3, r2
   26b80:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   26b82:	f04f 0200 	mov.w	r2, #0
   26b86:	2001      	movs	r0, #1
   26b88:	f360 0202 	bfi	r2, r0, #0, #3
   26b8c:	f36f 02c5 	bfc	r2, #3, #3
   26b90:	f363 128f 	bfi	r2, r3, #6, #10
   26b94:	4821      	ldr	r0, [pc, #132]	; (26c1c <send_frag+0x120>)
   26b96:	f7f9 fb87 	bl	202a8 <log_1>
	__asm__ volatile(
   26b9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b9e:	f3ef 8011 	mrs	r0, BASEPRI
   26ba2:	f383 8812 	msr	BASEPRI_MAX, r3
   26ba6:	f3bf 8f6f 	isb	sy
		if (tx) {
   26baa:	b347      	cbz	r7, 26bfe <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   26bac:	4639      	mov	r1, r7
	return list->head;
   26bae:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26bb0:	2200      	movs	r2, #0
   26bb2:	b163      	cbz	r3, 26bce <send_frag+0xd2>
   26bb4:	428b      	cmp	r3, r1
   26bb6:	d002      	beq.n	26bbe <send_frag+0xc2>
   26bb8:	461a      	mov	r2, r3
   26bba:	681b      	ldr	r3, [r3, #0]
   26bbc:	e7f9      	b.n	26bb2 <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   26bbe:	b1aa      	cbz	r2, 26bec <send_frag+0xf0>
	return node->next;
   26bc0:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   26bc2:	6013      	str	r3, [r2, #0]
	return list->tail;
   26bc4:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   26bc6:	42bb      	cmp	r3, r7
   26bc8:	d017      	beq.n	26bfa <send_frag+0xfe>
	parent->next = child;
   26bca:	2300      	movs	r3, #0
   26bcc:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   26bce:	f380 8811 	msr	BASEPRI, r0
   26bd2:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   26bd6:	4640      	mov	r0, r8
   26bd8:	f009 fb48 	bl	3026c <z_impl_k_sem_give>
	if (tx) {
   26bdc:	b117      	cbz	r7, 26be4 <send_frag+0xe8>
		tx_free(tx);
   26bde:	4638      	mov	r0, r7
   26be0:	f7ff ff3c 	bl	26a5c <tx_free>
	if (always_consume) {
   26be4:	b98c      	cbnz	r4, 26c0a <send_frag+0x10e>
	return false;
   26be6:	4620      	mov	r0, r4
}
   26be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   26bec:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   26bee:	616b      	str	r3, [r5, #20]
	return list->tail;
   26bf0:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   26bf2:	42ba      	cmp	r2, r7
   26bf4:	d1e9      	bne.n	26bca <send_frag+0xce>
	list->tail = node;
   26bf6:	61ab      	str	r3, [r5, #24]
}
   26bf8:	e7e7      	b.n	26bca <send_frag+0xce>
	list->tail = node;
   26bfa:	61aa      	str	r2, [r5, #24]
}
   26bfc:	e7e5      	b.n	26bca <send_frag+0xce>
			(*pending_no_cb)--;
   26bfe:	f8da 3000 	ldr.w	r3, [sl]
   26c02:	3b01      	subs	r3, #1
   26c04:	f8ca 3000 	str.w	r3, [sl]
   26c08:	e7e1      	b.n	26bce <send_frag+0xd2>
		net_buf_unref(buf);
   26c0a:	4630      	mov	r0, r6
   26c0c:	f013 ff07 	bl	3aa1e <net_buf_unref>
	return false;
   26c10:	2000      	movs	r0, #0
   26c12:	e7e9      	b.n	26be8 <send_frag+0xec>
   26c14:	0003d1c4 	.word	0x0003d1c4
   26c18:	0003d1a4 	.word	0x0003d1a4
   26c1c:	0003f0d0 	.word	0x0003f0d0

00026c20 <bt_conn_new>:
{
   26c20:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   26c22:	2300      	movs	r3, #0
   26c24:	428b      	cmp	r3, r1
   26c26:	d228      	bcs.n	26c7a <bt_conn_new+0x5a>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   26c28:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   26c2c:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   26c30:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   26c34:	2501      	movs	r5, #1
   26c36:	f3bf 8f5b 	dmb	ish
   26c3a:	e852 6f00 	ldrex	r6, [r2]
   26c3e:	2e00      	cmp	r6, #0
   26c40:	d104      	bne.n	26c4c <bt_conn_new+0x2c>
   26c42:	e842 5c00 	strex	ip, r5, [r2]
   26c46:	f1bc 0f00 	cmp.w	ip, #0
   26c4a:	d1f6      	bne.n	26c3a <bt_conn_new+0x1a>
   26c4c:	f3bf 8f5b 	dmb	ish
   26c50:	d111      	bne.n	26c76 <bt_conn_new+0x56>
	if (!conn) {
   26c52:	b174      	cbz	r4, 26c72 <bt_conn_new+0x52>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   26c54:	22bc      	movs	r2, #188	; 0xbc
   26c56:	2100      	movs	r1, #0
   26c58:	4620      	mov	r0, r4
   26c5a:	f010 f8a7 	bl	36dac <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   26c5e:	4908      	ldr	r1, [pc, #32]	; (26c80 <bt_conn_new+0x60>)
   26c60:	f104 0058 	add.w	r0, r4, #88	; 0x58
   26c64:	f015 fc72 	bl	3c54c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   26c68:	4906      	ldr	r1, [pc, #24]	; (26c84 <bt_conn_new+0x64>)
   26c6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   26c6e:	f015 fc47 	bl	3c500 <k_work_init>
}
   26c72:	4620      	mov	r0, r4
   26c74:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   26c76:	442b      	add	r3, r5
   26c78:	e7d4      	b.n	26c24 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   26c7a:	2400      	movs	r4, #0
   26c7c:	e7e9      	b.n	26c52 <bt_conn_new+0x32>
   26c7e:	bf00      	nop
   26c80:	00037a67 	.word	0x00037a67
   26c84:	000375ab 	.word	0x000375ab

00026c88 <acl_conn_new>:
{
   26c88:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   26c8a:	2114      	movs	r1, #20
   26c8c:	4801      	ldr	r0, [pc, #4]	; (26c94 <acl_conn_new+0xc>)
   26c8e:	f7ff ffc7 	bl	26c20 <bt_conn_new>
}
   26c92:	bd08      	pop	{r3, pc}
   26c94:	20002038 	.word	0x20002038

00026c98 <bt_acl_recv>:
{
   26c98:	b570      	push	{r4, r5, r6, lr}
   26c9a:	4604      	mov	r4, r0
   26c9c:	460d      	mov	r5, r1
	switch (flags) {
   26c9e:	2a01      	cmp	r2, #1
   26ca0:	d02d      	beq.n	26cfe <bt_acl_recv+0x66>
   26ca2:	4611      	mov	r1, r2
   26ca4:	2a02      	cmp	r2, #2
   26ca6:	d173      	bne.n	26d90 <bt_acl_recv+0xf8>
		if (conn->rx) {
   26ca8:	6903      	ldr	r3, [r0, #16]
   26caa:	b193      	cbz	r3, 26cd2 <bt_acl_recv+0x3a>
   26cac:	4b4e      	ldr	r3, [pc, #312]	; (26de8 <bt_acl_recv+0x150>)
   26cae:	4a4f      	ldr	r2, [pc, #316]	; (26dec <bt_acl_recv+0x154>)
   26cb0:	1a9b      	subs	r3, r3, r2
   26cb2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   26cb4:	f04f 0100 	mov.w	r1, #0
   26cb8:	2201      	movs	r2, #1
   26cba:	f362 0102 	bfi	r1, r2, #0, #3
   26cbe:	f36f 01c5 	bfc	r1, #3, #3
   26cc2:	f363 118f 	bfi	r1, r3, #6, #10
   26cc6:	484a      	ldr	r0, [pc, #296]	; (26df0 <bt_acl_recv+0x158>)
   26cc8:	f7f9 fba4 	bl	20414 <log_0>
			bt_conn_reset_rx_state(conn);
   26ccc:	4620      	mov	r0, r4
   26cce:	f010 fcd8 	bl	37682 <bt_conn_reset_rx_state>
		conn->rx = buf;
   26cd2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   26cd4:	6921      	ldr	r1, [r4, #16]
   26cd6:	8988      	ldrh	r0, [r1, #12]
   26cd8:	2801      	cmp	r0, #1
   26cda:	d96f      	bls.n	26dbc <bt_acl_recv+0x124>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   26cdc:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   26cde:	785d      	ldrb	r5, [r3, #1]
   26ce0:	781a      	ldrb	r2, [r3, #0]
   26ce2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   26ce6:	3204      	adds	r2, #4
   26ce8:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   26cea:	4290      	cmp	r0, r2
   26cec:	d366      	bcc.n	26dbc <bt_acl_recv+0x124>
	if (conn->rx->len > acl_total_len) {
   26cee:	d866      	bhi.n	26dbe <bt_acl_recv+0x126>
	conn->rx = NULL;
   26cf0:	2300      	movs	r3, #0
   26cf2:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   26cf4:	2201      	movs	r2, #1
   26cf6:	4620      	mov	r0, r4
   26cf8:	f001 f88e 	bl	27e18 <bt_l2cap_recv>
   26cfc:	e05e      	b.n	26dbc <bt_acl_recv+0x124>
		if (!conn->rx) {
   26cfe:	6900      	ldr	r0, [r0, #16]
   26d00:	b180      	cbz	r0, 26d24 <bt_acl_recv+0x8c>
		if (!buf->len) {
   26d02:	898e      	ldrh	r6, [r1, #12]
   26d04:	b32e      	cbz	r6, 26d52 <bt_acl_recv+0xba>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   26d06:	3008      	adds	r0, #8
   26d08:	f013 ff20 	bl	3ab4c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   26d0c:	4286      	cmp	r6, r0
   26d0e:	d824      	bhi.n	26d5a <bt_acl_recv+0xc2>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   26d10:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   26d12:	89aa      	ldrh	r2, [r5, #12]
   26d14:	68a9      	ldr	r1, [r5, #8]
   26d16:	3008      	adds	r0, #8
   26d18:	f013 fed1 	bl	3aabe <net_buf_simple_add_mem>
		net_buf_unref(buf);
   26d1c:	4628      	mov	r0, r5
   26d1e:	f013 fe7e 	bl	3aa1e <net_buf_unref>
		break;
   26d22:	e7d7      	b.n	26cd4 <bt_acl_recv+0x3c>
   26d24:	4b30      	ldr	r3, [pc, #192]	; (26de8 <bt_acl_recv+0x150>)
   26d26:	4a31      	ldr	r2, [pc, #196]	; (26dec <bt_acl_recv+0x154>)
   26d28:	1a9b      	subs	r3, r3, r2
   26d2a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   26d2c:	f04f 0100 	mov.w	r1, #0
   26d30:	2201      	movs	r2, #1
   26d32:	f362 0102 	bfi	r1, r2, #0, #3
   26d36:	f36f 01c5 	bfc	r1, #3, #3
   26d3a:	f363 118f 	bfi	r1, r3, #6, #10
   26d3e:	482d      	ldr	r0, [pc, #180]	; (26df4 <bt_acl_recv+0x15c>)
   26d40:	f7f9 fb68 	bl	20414 <log_0>
			bt_conn_reset_rx_state(conn);
   26d44:	4620      	mov	r0, r4
   26d46:	f010 fc9c 	bl	37682 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   26d4a:	4628      	mov	r0, r5
   26d4c:	f013 fe67 	bl	3aa1e <net_buf_unref>
			return;
   26d50:	e034      	b.n	26dbc <bt_acl_recv+0x124>
			net_buf_unref(buf);
   26d52:	4608      	mov	r0, r1
   26d54:	f013 fe63 	bl	3aa1e <net_buf_unref>
			return;
   26d58:	e030      	b.n	26dbc <bt_acl_recv+0x124>
   26d5a:	4b23      	ldr	r3, [pc, #140]	; (26de8 <bt_acl_recv+0x150>)
   26d5c:	4a23      	ldr	r2, [pc, #140]	; (26dec <bt_acl_recv+0x154>)
   26d5e:	1a9b      	subs	r3, r3, r2
   26d60:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   26d62:	f04f 0100 	mov.w	r1, #0
   26d66:	2201      	movs	r2, #1
   26d68:	f362 0102 	bfi	r1, r2, #0, #3
   26d6c:	f36f 01c5 	bfc	r1, #3, #3
   26d70:	f363 118f 	bfi	r1, r3, #6, #10
   26d74:	4820      	ldr	r0, [pc, #128]	; (26df8 <bt_acl_recv+0x160>)
   26d76:	f7f9 fb4d 	bl	20414 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   26d7a:	2200      	movs	r2, #0
   26d7c:	6921      	ldr	r1, [r4, #16]
   26d7e:	4620      	mov	r0, r4
   26d80:	f001 f84a 	bl	27e18 <bt_l2cap_recv>
			conn->rx = NULL;
   26d84:	2300      	movs	r3, #0
   26d86:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   26d88:	4628      	mov	r0, r5
   26d8a:	f013 fe48 	bl	3aa1e <net_buf_unref>
			return;
   26d8e:	e015      	b.n	26dbc <bt_acl_recv+0x124>
   26d90:	4b15      	ldr	r3, [pc, #84]	; (26de8 <bt_acl_recv+0x150>)
   26d92:	4a16      	ldr	r2, [pc, #88]	; (26dec <bt_acl_recv+0x154>)
   26d94:	1a9b      	subs	r3, r3, r2
   26d96:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   26d98:	f04f 0200 	mov.w	r2, #0
   26d9c:	2001      	movs	r0, #1
   26d9e:	f360 0202 	bfi	r2, r0, #0, #3
   26da2:	f36f 02c5 	bfc	r2, #3, #3
   26da6:	f363 128f 	bfi	r2, r3, #6, #10
   26daa:	4814      	ldr	r0, [pc, #80]	; (26dfc <bt_acl_recv+0x164>)
   26dac:	f7f9 fa7c 	bl	202a8 <log_1>
		bt_conn_reset_rx_state(conn);
   26db0:	4620      	mov	r0, r4
   26db2:	f010 fc66 	bl	37682 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   26db6:	4628      	mov	r0, r5
   26db8:	f013 fe31 	bl	3aa1e <net_buf_unref>
}
   26dbc:	bd70      	pop	{r4, r5, r6, pc}
   26dbe:	490a      	ldr	r1, [pc, #40]	; (26de8 <bt_acl_recv+0x150>)
   26dc0:	4b0a      	ldr	r3, [pc, #40]	; (26dec <bt_acl_recv+0x154>)
   26dc2:	1ac9      	subs	r1, r1, r3
   26dc4:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   26dc6:	f04f 0300 	mov.w	r3, #0
   26dca:	2501      	movs	r5, #1
   26dcc:	f365 0302 	bfi	r3, r5, #0, #3
   26dd0:	f36f 03c5 	bfc	r3, #3, #3
   26dd4:	f361 138f 	bfi	r3, r1, #6, #10
   26dd8:	4601      	mov	r1, r0
   26dda:	4809      	ldr	r0, [pc, #36]	; (26e00 <bt_acl_recv+0x168>)
   26ddc:	f7f9 fa9a 	bl	20314 <log_2>
		bt_conn_reset_rx_state(conn);
   26de0:	4620      	mov	r0, r4
   26de2:	f010 fc4e 	bl	37682 <bt_conn_reset_rx_state>
		return;
   26de6:	e7e9      	b.n	26dbc <bt_acl_recv+0x124>
   26de8:	0003d1c4 	.word	0x0003d1c4
   26dec:	0003d1a4 	.word	0x0003d1a4
   26df0:	0003f680 	.word	0x0003f680
   26df4:	0003f6a0 	.word	0x0003f6a0
   26df8:	0003f6c0 	.word	0x0003f6c0
   26dfc:	0003f6e8 	.word	0x0003f6e8
   26e00:	0003f708 	.word	0x0003f708

00026e04 <bt_conn_send_cb>:
{
   26e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e08:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   26e0a:	7b43      	ldrb	r3, [r0, #13]
   26e0c:	2b07      	cmp	r3, #7
   26e0e:	d118      	bne.n	26e42 <bt_conn_send_cb+0x3e>
   26e10:	4604      	mov	r4, r0
   26e12:	460d      	mov	r5, r1
   26e14:	4616      	mov	r6, r2
	if (cb) {
   26e16:	2a00      	cmp	r2, #0
   26e18:	d04f      	beq.n	26eba <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   26e1a:	f7ff fe2b 	bl	26a74 <conn_tx_alloc>
		if (!tx) {
   26e1e:	4680      	mov	r8, r0
   26e20:	b310      	cbz	r0, 26e68 <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   26e22:	7b63      	ldrb	r3, [r4, #13]
   26e24:	2b07      	cmp	r3, #7
   26e26:	d132      	bne.n	26e8e <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   26e28:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   26e2a:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   26e2c:	2300      	movs	r3, #0
   26e2e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   26e30:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   26e32:	4629      	mov	r1, r5
   26e34:	f104 0038 	add.w	r0, r4, #56	; 0x38
   26e38:	f013 fde4 	bl	3aa04 <net_buf_put>
	return 0;
   26e3c:	2000      	movs	r0, #0
}
   26e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e42:	4b1f      	ldr	r3, [pc, #124]	; (26ec0 <bt_conn_send_cb+0xbc>)
   26e44:	4a1f      	ldr	r2, [pc, #124]	; (26ec4 <bt_conn_send_cb+0xc0>)
   26e46:	1a9b      	subs	r3, r3, r2
   26e48:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   26e4a:	f04f 0100 	mov.w	r1, #0
   26e4e:	2201      	movs	r2, #1
   26e50:	f362 0102 	bfi	r1, r2, #0, #3
   26e54:	f36f 01c5 	bfc	r1, #3, #3
   26e58:	f363 118f 	bfi	r1, r3, #6, #10
   26e5c:	481a      	ldr	r0, [pc, #104]	; (26ec8 <bt_conn_send_cb+0xc4>)
   26e5e:	f7f9 fad9 	bl	20414 <log_0>
		return -ENOTCONN;
   26e62:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   26e66:	e7ea      	b.n	26e3e <bt_conn_send_cb+0x3a>
   26e68:	4b15      	ldr	r3, [pc, #84]	; (26ec0 <bt_conn_send_cb+0xbc>)
   26e6a:	4a16      	ldr	r2, [pc, #88]	; (26ec4 <bt_conn_send_cb+0xc0>)
   26e6c:	1a9b      	subs	r3, r3, r2
   26e6e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   26e70:	f04f 0100 	mov.w	r1, #0
   26e74:	2201      	movs	r2, #1
   26e76:	f362 0102 	bfi	r1, r2, #0, #3
   26e7a:	f36f 01c5 	bfc	r1, #3, #3
   26e7e:	f363 118f 	bfi	r1, r3, #6, #10
   26e82:	4812      	ldr	r0, [pc, #72]	; (26ecc <bt_conn_send_cb+0xc8>)
   26e84:	f7f9 fac6 	bl	20414 <log_0>
			return -ENOBUFS;
   26e88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26e8c:	e7d7      	b.n	26e3e <bt_conn_send_cb+0x3a>
   26e8e:	4b0c      	ldr	r3, [pc, #48]	; (26ec0 <bt_conn_send_cb+0xbc>)
   26e90:	4a0c      	ldr	r2, [pc, #48]	; (26ec4 <bt_conn_send_cb+0xc0>)
   26e92:	1a9b      	subs	r3, r3, r2
   26e94:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   26e96:	f04f 0100 	mov.w	r1, #0
   26e9a:	2202      	movs	r2, #2
   26e9c:	f362 0102 	bfi	r1, r2, #0, #3
   26ea0:	f36f 01c5 	bfc	r1, #3, #3
   26ea4:	f363 118f 	bfi	r1, r3, #6, #10
   26ea8:	4809      	ldr	r0, [pc, #36]	; (26ed0 <bt_conn_send_cb+0xcc>)
   26eaa:	f7f9 fab3 	bl	20414 <log_0>
			tx_free(tx);
   26eae:	4640      	mov	r0, r8
   26eb0:	f7ff fdd4 	bl	26a5c <tx_free>
			return -ENOTCONN;
   26eb4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   26eb8:	e7c1      	b.n	26e3e <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   26eba:	2300      	movs	r3, #0
   26ebc:	614b      	str	r3, [r1, #20]
   26ebe:	e7b8      	b.n	26e32 <bt_conn_send_cb+0x2e>
   26ec0:	0003d1c4 	.word	0x0003d1c4
   26ec4:	0003d1a4 	.word	0x0003d1a4
   26ec8:	0003f724 	.word	0x0003f724
   26ecc:	0003f734 	.word	0x0003f734
   26ed0:	0003f754 	.word	0x0003f754

00026ed4 <bt_conn_prepare_events>:
{
   26ed4:	b570      	push	{r4, r5, r6, lr}
   26ed6:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   26ed8:	4b0e      	ldr	r3, [pc, #56]	; (26f14 <bt_conn_prepare_events+0x40>)
   26eda:	2400      	movs	r4, #0
   26edc:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   26ede:	4622      	mov	r2, r4
   26ee0:	2101      	movs	r1, #1
   26ee2:	f015 feb0 	bl	3cc46 <k_poll_event_init>
   26ee6:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   26ee8:	e000      	b.n	26eec <bt_conn_prepare_events+0x18>
   26eea:	3401      	adds	r4, #1
   26eec:	2c13      	cmp	r4, #19
   26eee:	dc0e      	bgt.n	26f0e <bt_conn_prepare_events+0x3a>
		conn = &acl_conns[i];
   26ef0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   26ef4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   26ef8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   26efc:	4b06      	ldr	r3, [pc, #24]	; (26f18 <bt_conn_prepare_events+0x44>)
   26efe:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   26f02:	f010 fbe5 	bl	376d0 <conn_prepare_events>
   26f06:	2800      	cmp	r0, #0
   26f08:	d1ef      	bne.n	26eea <bt_conn_prepare_events+0x16>
			ev_count++;
   26f0a:	3501      	adds	r5, #1
   26f0c:	e7ed      	b.n	26eea <bt_conn_prepare_events+0x16>
}
   26f0e:	4628      	mov	r0, r5
   26f10:	bd70      	pop	{r4, r5, r6, pc}
   26f12:	bf00      	nop
   26f14:	2000068c 	.word	0x2000068c
   26f18:	20002038 	.word	0x20002038

00026f1c <bt_conn_lookup_handle>:
{
   26f1c:	b508      	push	{r3, lr}
   26f1e:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   26f20:	2114      	movs	r1, #20
   26f22:	4802      	ldr	r0, [pc, #8]	; (26f2c <bt_conn_lookup_handle+0x10>)
   26f24:	f010 fc49 	bl	377ba <conn_lookup_handle>
}
   26f28:	bd08      	pop	{r3, pc}
   26f2a:	bf00      	nop
   26f2c:	20002038 	.word	0x20002038

00026f30 <bt_conn_set_state>:
{
   26f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f32:	460e      	mov	r6, r1
	if (conn->state == state) {
   26f34:	7b45      	ldrb	r5, [r0, #13]
   26f36:	428d      	cmp	r5, r1
   26f38:	d014      	beq.n	26f64 <bt_conn_set_state+0x34>
   26f3a:	4604      	mov	r4, r0
	conn->state = state;
   26f3c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   26f3e:	2d00      	cmp	r5, #0
   26f40:	d03d      	beq.n	26fbe <bt_conn_set_state+0x8e>
   26f42:	2d06      	cmp	r5, #6
   26f44:	d041      	beq.n	26fca <bt_conn_set_state+0x9a>
	switch (conn->state) {
   26f46:	7b63      	ldrb	r3, [r4, #13]
   26f48:	2b08      	cmp	r3, #8
   26f4a:	f200 80e3 	bhi.w	27114 <bt_conn_set_state+0x1e4>
   26f4e:	e8df f013 	tbh	[pc, r3, lsl #1]
   26f52:	0053      	.short	0x0053
   26f54:	00e000dd 	.word	0x00e000dd
   26f58:	00e000e0 	.word	0x00e000e0
   26f5c:	00b900e0 	.word	0x00b900e0
   26f60:	00e00043 	.word	0x00e00043
   26f64:	4b74      	ldr	r3, [pc, #464]	; (27138 <bt_conn_set_state+0x208>)
   26f66:	4a75      	ldr	r2, [pc, #468]	; (2713c <bt_conn_set_state+0x20c>)
   26f68:	1a9b      	subs	r3, r3, r2
   26f6a:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   26f6c:	f04f 0200 	mov.w	r2, #0
   26f70:	2102      	movs	r1, #2
   26f72:	f361 0202 	bfi	r2, r1, #0, #3
   26f76:	f36f 02c5 	bfc	r2, #3, #3
   26f7a:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   26f7e:	2e08      	cmp	r6, #8
   26f80:	d819      	bhi.n	26fb6 <bt_conn_set_state+0x86>
   26f82:	e8df f006 	tbb	[pc, r6]
   26f86:	1a05      	.short	0x1a05
   26f88:	0c0e100a 	.word	0x0c0e100a
   26f8c:	1412      	.short	0x1412
   26f8e:	16          	.byte	0x16
   26f8f:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   26f90:	496b      	ldr	r1, [pc, #428]	; (27140 <bt_conn_set_state+0x210>)
   26f92:	486c      	ldr	r0, [pc, #432]	; (27144 <bt_conn_set_state+0x214>)
   26f94:	f7f9 f988 	bl	202a8 <log_1>
		return;
   26f98:	e0bb      	b.n	27112 <bt_conn_set_state+0x1e2>
		return "connect-scan";
   26f9a:	496b      	ldr	r1, [pc, #428]	; (27148 <bt_conn_set_state+0x218>)
   26f9c:	e7f9      	b.n	26f92 <bt_conn_set_state+0x62>
		return "connect-dir-adv";
   26f9e:	496b      	ldr	r1, [pc, #428]	; (2714c <bt_conn_set_state+0x21c>)
   26fa0:	e7f7      	b.n	26f92 <bt_conn_set_state+0x62>
		return "connect-adv";
   26fa2:	496b      	ldr	r1, [pc, #428]	; (27150 <bt_conn_set_state+0x220>)
   26fa4:	e7f5      	b.n	26f92 <bt_conn_set_state+0x62>
		return "connect-auto";
   26fa6:	496b      	ldr	r1, [pc, #428]	; (27154 <bt_conn_set_state+0x224>)
   26fa8:	e7f3      	b.n	26f92 <bt_conn_set_state+0x62>
		return "connect";
   26faa:	496b      	ldr	r1, [pc, #428]	; (27158 <bt_conn_set_state+0x228>)
   26fac:	e7f1      	b.n	26f92 <bt_conn_set_state+0x62>
		return "connected";
   26fae:	496b      	ldr	r1, [pc, #428]	; (2715c <bt_conn_set_state+0x22c>)
   26fb0:	e7ef      	b.n	26f92 <bt_conn_set_state+0x62>
		return "disconnect";
   26fb2:	496b      	ldr	r1, [pc, #428]	; (27160 <bt_conn_set_state+0x230>)
   26fb4:	e7ed      	b.n	26f92 <bt_conn_set_state+0x62>
		return "(unknown)";
   26fb6:	496b      	ldr	r1, [pc, #428]	; (27164 <bt_conn_set_state+0x234>)
   26fb8:	e7eb      	b.n	26f92 <bt_conn_set_state+0x62>
		return "disconnect-complete";
   26fba:	496b      	ldr	r1, [pc, #428]	; (27168 <bt_conn_set_state+0x238>)
   26fbc:	e7e9      	b.n	26f92 <bt_conn_set_state+0x62>
		if (conn->type != BT_CONN_TYPE_ISO) {
   26fbe:	7883      	ldrb	r3, [r0, #2]
   26fc0:	2b08      	cmp	r3, #8
   26fc2:	d0c0      	beq.n	26f46 <bt_conn_set_state+0x16>
			bt_conn_ref(conn);
   26fc4:	f010 fbc5 	bl	37752 <bt_conn_ref>
   26fc8:	e7bd      	b.n	26f46 <bt_conn_set_state+0x16>
		    conn->type == BT_CONN_TYPE_LE) {
   26fca:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   26fcc:	2b01      	cmp	r3, #1
   26fce:	d1ba      	bne.n	26f46 <bt_conn_set_state+0x16>
			k_work_cancel_delayable(&conn->deferred_work);
   26fd0:	3058      	adds	r0, #88	; 0x58
   26fd2:	f015 fb07 	bl	3c5e4 <k_work_cancel_delayable>
   26fd6:	e7b6      	b.n	26f46 <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   26fd8:	78a3      	ldrb	r3, [r4, #2]
   26fda:	2b04      	cmp	r3, #4
   26fdc:	f000 8099 	beq.w	27112 <bt_conn_set_state+0x1e2>
		k_fifo_init(&conn->tx_queue);
   26fe0:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   26fe4:	f015 f9a4 	bl	3c330 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   26fe8:	2100      	movs	r1, #0
   26fea:	4860      	ldr	r0, [pc, #384]	; (2716c <bt_conn_set_state+0x23c>)
   26fec:	f00a fc78 	bl	318e0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   26ff0:	2300      	movs	r3, #0
   26ff2:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   26ff4:	6563      	str	r3, [r4, #84]	; 0x54
}
   26ff6:	e08c      	b.n	27112 <bt_conn_set_state+0x1e2>
		if (conn->type == BT_CONN_TYPE_SCO) {
   26ff8:	78a3      	ldrb	r3, [r4, #2]
   26ffa:	2b04      	cmp	r3, #4
   26ffc:	d009      	beq.n	27012 <bt_conn_set_state+0xe2>
		switch (old_state) {
   26ffe:	2d08      	cmp	r5, #8
   27000:	f200 8087 	bhi.w	27112 <bt_conn_set_state+0x1e2>
   27004:	e8df f005 	tbb	[pc, r5]
   27008:	4430094c 	.word	0x4430094c
   2700c:	4c263a48 	.word	0x4c263a48
   27010:	4c          	.byte	0x4c
   27011:	00          	.byte	0x00
			bt_conn_unref(conn);
   27012:	4620      	mov	r0, r4
   27014:	f010 fbc4 	bl	377a0 <bt_conn_unref>
			break;
   27018:	e07b      	b.n	27112 <bt_conn_set_state+0x1e2>
			tx_notify(conn);
   2701a:	4620      	mov	r0, r4
   2701c:	f010 faa0 	bl	37560 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   27020:	78a3      	ldrb	r3, [r4, #2]
   27022:	2b01      	cmp	r3, #1
   27024:	d011      	beq.n	2704a <bt_conn_set_state+0x11a>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   27026:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27028:	f3bf 8f5b 	dmb	ish
   2702c:	e854 3f00 	ldrex	r3, [r4]
   27030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27034:	e844 3200 	strex	r2, r3, [r4]
   27038:	2a00      	cmp	r2, #0
   2703a:	d1f7      	bne.n	2702c <bt_conn_set_state+0xfc>
   2703c:	f3bf 8f5b 	dmb	ish
   27040:	2100      	movs	r1, #0
   27042:	484a      	ldr	r0, [pc, #296]	; (2716c <bt_conn_set_state+0x23c>)
   27044:	f00a fc4c 	bl	318e0 <z_impl_k_poll_signal_raise>
   27048:	e063      	b.n	27112 <bt_conn_set_state+0x1e2>
				k_work_cancel_delayable(&conn->deferred_work);
   2704a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2704e:	f015 fac9 	bl	3c5e4 <k_work_cancel_delayable>
   27052:	e7e8      	b.n	27026 <bt_conn_set_state+0xf6>
			if (conn->err) {
   27054:	7b23      	ldrb	r3, [r4, #12]
   27056:	b91b      	cbnz	r3, 27060 <bt_conn_set_state+0x130>
			bt_conn_unref(conn);
   27058:	4620      	mov	r0, r4
   2705a:	f010 fba1 	bl	377a0 <bt_conn_unref>
			break;
   2705e:	e058      	b.n	27112 <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   27060:	4620      	mov	r0, r4
   27062:	f7ff fd1f 	bl	26aa4 <notify_connected>
   27066:	e7f7      	b.n	27058 <bt_conn_set_state+0x128>
			if (conn->err) {
   27068:	7b23      	ldrb	r3, [r4, #12]
   2706a:	b91b      	cbnz	r3, 27074 <bt_conn_set_state+0x144>
			bt_conn_unref(conn);
   2706c:	4620      	mov	r0, r4
   2706e:	f010 fb97 	bl	377a0 <bt_conn_unref>
			break;
   27072:	e04e      	b.n	27112 <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   27074:	4620      	mov	r0, r4
   27076:	f7ff fd15 	bl	26aa4 <notify_connected>
   2707a:	e7f7      	b.n	2706c <bt_conn_set_state+0x13c>
			if (conn->err) {
   2707c:	7b23      	ldrb	r3, [r4, #12]
   2707e:	b91b      	cbnz	r3, 27088 <bt_conn_set_state+0x158>
			bt_conn_unref(conn);
   27080:	4620      	mov	r0, r4
   27082:	f010 fb8d 	bl	377a0 <bt_conn_unref>
			break;
   27086:	e044      	b.n	27112 <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   27088:	4620      	mov	r0, r4
   2708a:	f7ff fd0b 	bl	26aa4 <notify_connected>
   2708e:	e7f7      	b.n	27080 <bt_conn_set_state+0x150>
			bt_conn_unref(conn);
   27090:	4620      	mov	r0, r4
   27092:	f010 fb85 	bl	377a0 <bt_conn_unref>
			break;
   27096:	e03c      	b.n	27112 <bt_conn_set_state+0x1e2>
			bt_conn_unref(conn);
   27098:	4620      	mov	r0, r4
   2709a:	f010 fb81 	bl	377a0 <bt_conn_unref>
			break;
   2709e:	e038      	b.n	27112 <bt_conn_set_state+0x1e2>
   270a0:	4b25      	ldr	r3, [pc, #148]	; (27138 <bt_conn_set_state+0x208>)
   270a2:	4a26      	ldr	r2, [pc, #152]	; (2713c <bt_conn_set_state+0x20c>)
   270a4:	1a9b      	subs	r3, r3, r2
   270a6:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   270a8:	f04f 0200 	mov.w	r2, #0
   270ac:	2102      	movs	r1, #2
   270ae:	f361 0202 	bfi	r2, r1, #0, #3
   270b2:	f36f 02c5 	bfc	r2, #3, #3
   270b6:	f363 128f 	bfi	r2, r3, #6, #10
   270ba:	4631      	mov	r1, r6
   270bc:	482c      	ldr	r0, [pc, #176]	; (27170 <bt_conn_set_state+0x240>)
   270be:	f7f9 f8f3 	bl	202a8 <log_1>
   270c2:	e026      	b.n	27112 <bt_conn_set_state+0x1e2>
		if (conn->type == BT_CONN_TYPE_SCO) {
   270c4:	78a3      	ldrb	r3, [r4, #2]
   270c6:	2b04      	cmp	r3, #4
   270c8:	d023      	beq.n	27112 <bt_conn_set_state+0x1e2>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   270ca:	2b01      	cmp	r3, #1
   270cc:	d121      	bne.n	27112 <bt_conn_set_state+0x1e2>
					K_MSEC(10 * bt_dev.create_param.timeout));
   270ce:	4b29      	ldr	r3, [pc, #164]	; (27174 <bt_conn_set_state+0x244>)
   270d0:	8a9b      	ldrh	r3, [r3, #20]
   270d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   270d6:	005b      	lsls	r3, r3, #1
   270d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   270dc:	17df      	asrs	r7, r3, #31
		} else {
			return (t * to_hz + off) / from_hz;
   270de:	03f9      	lsls	r1, r7, #15
   270e0:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   270e4:	03d8      	lsls	r0, r3, #15
   270e6:	f240 35e7 	movw	r5, #999	; 0x3e7
   270ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   270ee:	2300      	movs	r3, #0
   270f0:	1940      	adds	r0, r0, r5
   270f2:	f04f 0500 	mov.w	r5, #0
   270f6:	eb45 0101 	adc.w	r1, r5, r1
   270fa:	f7e5 fd57 	bl	cbac <__aeabi_uldivmod>
   270fe:	4602      	mov	r2, r0
   27100:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   27102:	f104 0058 	add.w	r0, r4, #88	; 0x58
   27106:	f009 fae5 	bl	306d4 <k_work_schedule>
   2710a:	e002      	b.n	27112 <bt_conn_set_state+0x1e2>
		process_unack_tx(conn);
   2710c:	4620      	mov	r0, r4
   2710e:	f010 fa77 	bl	37600 <process_unack_tx>
}
   27112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27114:	4b08      	ldr	r3, [pc, #32]	; (27138 <bt_conn_set_state+0x208>)
   27116:	4a09      	ldr	r2, [pc, #36]	; (2713c <bt_conn_set_state+0x20c>)
   27118:	1a9b      	subs	r3, r3, r2
   2711a:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   2711c:	f04f 0200 	mov.w	r2, #0
   27120:	2102      	movs	r1, #2
   27122:	f361 0202 	bfi	r2, r1, #0, #3
   27126:	f36f 02c5 	bfc	r2, #3, #3
   2712a:	f363 128f 	bfi	r2, r3, #6, #10
   2712e:	4631      	mov	r1, r6
   27130:	4811      	ldr	r0, [pc, #68]	; (27178 <bt_conn_set_state+0x248>)
   27132:	f7f9 f8b9 	bl	202a8 <log_1>
   27136:	e7ec      	b.n	27112 <bt_conn_set_state+0x1e2>
   27138:	0003d1c4 	.word	0x0003d1c4
   2713c:	0003d1a4 	.word	0x0003d1a4
   27140:	0003f7ec 	.word	0x0003f7ec
   27144:	0003f7fc 	.word	0x0003f7fc
   27148:	0003f79c 	.word	0x0003f79c
   2714c:	0003f7ac 	.word	0x0003f7ac
   27150:	0003f7bc 	.word	0x0003f7bc
   27154:	0003f7c8 	.word	0x0003f7c8
   27158:	0003f7d8 	.word	0x0003f7d8
   2715c:	0003fab8 	.word	0x0003fab8
   27160:	0003f7e0 	.word	0x0003f7e0
   27164:	0003f77c 	.word	0x0003f77c
   27168:	0003f788 	.word	0x0003f788
   2716c:	2000068c 	.word	0x2000068c
   27170:	0003f810 	.word	0x0003f810
   27174:	200002b0 	.word	0x200002b0
   27178:	0003f828 	.word	0x0003f828

0002717c <bt_conn_index>:
		index = conn - acl_conns;
   2717c:	4b03      	ldr	r3, [pc, #12]	; (2718c <bt_conn_index+0x10>)
   2717e:	1ac0      	subs	r0, r0, r3
   27180:	1180      	asrs	r0, r0, #6
   27182:	4b03      	ldr	r3, [pc, #12]	; (27190 <bt_conn_index+0x14>)
   27184:	fb03 f000 	mul.w	r0, r3, r0
}
   27188:	b2c0      	uxtb	r0, r0
   2718a:	4770      	bx	lr
   2718c:	20002038 	.word	0x20002038
   27190:	aaaaaaab 	.word	0xaaaaaaab

00027194 <bt_conn_create_pdu_timeout>:
{
   27194:	b538      	push	{r3, r4, r5, lr}
   27196:	460c      	mov	r4, r1
	if (!pool) {
   27198:	4601      	mov	r1, r0
   2719a:	b150      	cbz	r0, 271b2 <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   2719c:	4608      	mov	r0, r1
   2719e:	f013 fc05 	bl	3a9ac <net_buf_alloc_fixed>
	if (!buf) {
   271a2:	4605      	mov	r5, r0
   271a4:	b138      	cbz	r0, 271b6 <bt_conn_create_pdu_timeout+0x22>
	net_buf_simple_reserve(&buf->b, reserve);
   271a6:	1d21      	adds	r1, r4, #4
   271a8:	3008      	adds	r0, #8
   271aa:	f013 fc27 	bl	3a9fc <net_buf_simple_reserve>
}
   271ae:	4628      	mov	r0, r5
   271b0:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   271b2:	4909      	ldr	r1, [pc, #36]	; (271d8 <bt_conn_create_pdu_timeout+0x44>)
   271b4:	e7f2      	b.n	2719c <bt_conn_create_pdu_timeout+0x8>
   271b6:	4b09      	ldr	r3, [pc, #36]	; (271dc <bt_conn_create_pdu_timeout+0x48>)
   271b8:	4a09      	ldr	r2, [pc, #36]	; (271e0 <bt_conn_create_pdu_timeout+0x4c>)
   271ba:	1a9b      	subs	r3, r3, r2
   271bc:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   271be:	f04f 0100 	mov.w	r1, #0
   271c2:	2202      	movs	r2, #2
   271c4:	f362 0102 	bfi	r1, r2, #0, #3
   271c8:	f36f 01c5 	bfc	r1, #3, #3
   271cc:	f363 118f 	bfi	r1, r3, #6, #10
   271d0:	4804      	ldr	r0, [pc, #16]	; (271e4 <bt_conn_create_pdu_timeout+0x50>)
   271d2:	f7f9 f91f 	bl	20414 <log_0>
		return NULL;
   271d6:	e7ea      	b.n	271ae <bt_conn_create_pdu_timeout+0x1a>
   271d8:	20000bb0 	.word	0x20000bb0
   271dc:	0003d1c4 	.word	0x0003d1c4
   271e0:	0003d1a4 	.word	0x0003d1a4
   271e4:	0003f844 	.word	0x0003f844

000271e8 <notify_le_param_updated>:
{
   271e8:	b570      	push	{r4, r5, r6, lr}
   271ea:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   271ec:	f3bf 8f5b 	dmb	ish
   271f0:	6843      	ldr	r3, [r0, #4]
   271f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   271f6:	f413 7f00 	tst.w	r3, #512	; 0x200
   271fa:	d010      	beq.n	2721e <notify_le_param_updated+0x36>
   271fc:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   271fe:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   27202:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   27206:	428b      	cmp	r3, r1
   27208:	d309      	bcc.n	2721e <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   2720a:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   2720e:	428b      	cmp	r3, r1
   27210:	d805      	bhi.n	2721e <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   27212:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   27216:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   2721a:	4299      	cmp	r1, r3
   2721c:	d002      	beq.n	27224 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   2721e:	4b18      	ldr	r3, [pc, #96]	; (27280 <notify_le_param_updated+0x98>)
   27220:	681d      	ldr	r5, [r3, #0]
   27222:	e00d      	b.n	27240 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27224:	f3bf 8f5b 	dmb	ish
   27228:	e852 3f00 	ldrex	r3, [r2]
   2722c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   27230:	e842 3100 	strex	r1, r3, [r2]
   27234:	2900      	cmp	r1, #0
   27236:	d1f7      	bne.n	27228 <notify_le_param_updated+0x40>
   27238:	f3bf 8f5b 	dmb	ish
}
   2723c:	e7ef      	b.n	2721e <notify_le_param_updated+0x36>
   2723e:	69ed      	ldr	r5, [r5, #28]
   27240:	b15d      	cbz	r5, 2725a <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   27242:	68ee      	ldr	r6, [r5, #12]
   27244:	2e00      	cmp	r6, #0
   27246:	d0fa      	beq.n	2723e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   27248:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2724c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   27250:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   27254:	4620      	mov	r0, r4
   27256:	47b0      	blx	r6
   27258:	e7f1      	b.n	2723e <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2725a:	4d0a      	ldr	r5, [pc, #40]	; (27284 <notify_le_param_updated+0x9c>)
   2725c:	e000      	b.n	27260 <notify_le_param_updated+0x78>
   2725e:	3520      	adds	r5, #32
   27260:	4b09      	ldr	r3, [pc, #36]	; (27288 <notify_le_param_updated+0xa0>)
   27262:	429d      	cmp	r5, r3
   27264:	d20b      	bcs.n	2727e <notify_le_param_updated+0x96>
		if (cb->le_param_updated) {
   27266:	68ee      	ldr	r6, [r5, #12]
   27268:	2e00      	cmp	r6, #0
   2726a:	d0f8      	beq.n	2725e <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   2726c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   27270:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   27274:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   27278:	4620      	mov	r0, r4
   2727a:	47b0      	blx	r6
   2727c:	e7ef      	b.n	2725e <notify_le_param_updated+0x76>
}
   2727e:	bd70      	pop	{r4, r5, r6, pc}
   27280:	20008278 	.word	0x20008278
   27284:	0003d174 	.word	0x0003d174
   27288:	0003d194 	.word	0x0003d194

0002728c <notify_le_phy_updated>:
{
   2728c:	b538      	push	{r3, r4, r5, lr}
   2728e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   27290:	4b0d      	ldr	r3, [pc, #52]	; (272c8 <notify_le_phy_updated+0x3c>)
   27292:	681c      	ldr	r4, [r3, #0]
   27294:	e000      	b.n	27298 <notify_le_phy_updated+0xc>
   27296:	69e4      	ldr	r4, [r4, #28]
   27298:	b13c      	cbz	r4, 272aa <notify_le_phy_updated+0x1e>
		if (cb->le_phy_updated) {
   2729a:	69a3      	ldr	r3, [r4, #24]
   2729c:	2b00      	cmp	r3, #0
   2729e:	d0fa      	beq.n	27296 <notify_le_phy_updated+0xa>
			cb->le_phy_updated(conn, &conn->le.phy);
   272a0:	f105 01b8 	add.w	r1, r5, #184	; 0xb8
   272a4:	4628      	mov	r0, r5
   272a6:	4798      	blx	r3
   272a8:	e7f5      	b.n	27296 <notify_le_phy_updated+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   272aa:	4c08      	ldr	r4, [pc, #32]	; (272cc <notify_le_phy_updated+0x40>)
   272ac:	e000      	b.n	272b0 <notify_le_phy_updated+0x24>
   272ae:	3420      	adds	r4, #32
   272b0:	4b07      	ldr	r3, [pc, #28]	; (272d0 <notify_le_phy_updated+0x44>)
   272b2:	429c      	cmp	r4, r3
   272b4:	d207      	bcs.n	272c6 <notify_le_phy_updated+0x3a>
		if (cb->le_phy_updated) {
   272b6:	69a3      	ldr	r3, [r4, #24]
   272b8:	2b00      	cmp	r3, #0
   272ba:	d0f8      	beq.n	272ae <notify_le_phy_updated+0x22>
			cb->le_phy_updated(conn, &conn->le.phy);
   272bc:	f105 01b8 	add.w	r1, r5, #184	; 0xb8
   272c0:	4628      	mov	r0, r5
   272c2:	4798      	blx	r3
   272c4:	e7f3      	b.n	272ae <notify_le_phy_updated+0x22>
}
   272c6:	bd38      	pop	{r3, r4, r5, pc}
   272c8:	20008278 	.word	0x20008278
   272cc:	0003d174 	.word	0x0003d174
   272d0:	0003d194 	.word	0x0003d194

000272d4 <le_param_req>:
{
   272d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   272d6:	4606      	mov	r6, r0
   272d8:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   272da:	4608      	mov	r0, r1
   272dc:	f00f ff27 	bl	3712e <bt_le_conn_params_valid>
   272e0:	4607      	mov	r7, r0
   272e2:	b338      	cbz	r0, 27334 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   272e4:	4b15      	ldr	r3, [pc, #84]	; (2733c <le_param_req+0x68>)
   272e6:	681c      	ldr	r4, [r3, #0]
   272e8:	e000      	b.n	272ec <le_param_req+0x18>
   272ea:	69e4      	ldr	r4, [r4, #28]
   272ec:	b16c      	cbz	r4, 2730a <le_param_req+0x36>
		if (!cb->le_param_req) {
   272ee:	68a3      	ldr	r3, [r4, #8]
   272f0:	2b00      	cmp	r3, #0
   272f2:	d0fa      	beq.n	272ea <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   272f4:	4629      	mov	r1, r5
   272f6:	4630      	mov	r0, r6
   272f8:	4798      	blx	r3
   272fa:	b1d0      	cbz	r0, 27332 <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   272fc:	4628      	mov	r0, r5
   272fe:	f00f ff16 	bl	3712e <bt_le_conn_params_valid>
   27302:	2800      	cmp	r0, #0
   27304:	d1f1      	bne.n	272ea <le_param_req+0x16>
			return false;
   27306:	4607      	mov	r7, r0
   27308:	e014      	b.n	27334 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2730a:	4c0d      	ldr	r4, [pc, #52]	; (27340 <le_param_req+0x6c>)
   2730c:	e000      	b.n	27310 <le_param_req+0x3c>
   2730e:	3420      	adds	r4, #32
   27310:	4b0c      	ldr	r3, [pc, #48]	; (27344 <le_param_req+0x70>)
   27312:	429c      	cmp	r4, r3
   27314:	d20e      	bcs.n	27334 <le_param_req+0x60>
		if (!cb->le_param_req) {
   27316:	68a3      	ldr	r3, [r4, #8]
   27318:	2b00      	cmp	r3, #0
   2731a:	d0f8      	beq.n	2730e <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   2731c:	4629      	mov	r1, r5
   2731e:	4630      	mov	r0, r6
   27320:	4798      	blx	r3
   27322:	b148      	cbz	r0, 27338 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   27324:	4628      	mov	r0, r5
   27326:	f00f ff02 	bl	3712e <bt_le_conn_params_valid>
   2732a:	2800      	cmp	r0, #0
   2732c:	d1ef      	bne.n	2730e <le_param_req+0x3a>
			return false;
   2732e:	4607      	mov	r7, r0
   27330:	e000      	b.n	27334 <le_param_req+0x60>
			return false;
   27332:	4607      	mov	r7, r0
}
   27334:	4638      	mov	r0, r7
   27336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   27338:	4607      	mov	r7, r0
   2733a:	e7fb      	b.n	27334 <le_param_req+0x60>
   2733c:	20008278 	.word	0x20008278
   27340:	0003d174 	.word	0x0003d174
   27344:	0003d194 	.word	0x0003d194

00027348 <bt_conn_identity_resolved>:
{
   27348:	b570      	push	{r4, r5, r6, lr}
   2734a:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2734c:	78c3      	ldrb	r3, [r0, #3]
   2734e:	b923      	cbnz	r3, 2735a <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
   27350:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   27354:	4b10      	ldr	r3, [pc, #64]	; (27398 <bt_conn_identity_resolved+0x50>)
   27356:	681c      	ldr	r4, [r3, #0]
   27358:	e003      	b.n	27362 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
   2735a:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2735e:	e7f9      	b.n	27354 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
   27360:	69e4      	ldr	r4, [r4, #28]
   27362:	b144      	cbz	r4, 27376 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
   27364:	6923      	ldr	r3, [r4, #16]
   27366:	2b00      	cmp	r3, #0
   27368:	d0fa      	beq.n	27360 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2736a:	f105 0288 	add.w	r2, r5, #136	; 0x88
   2736e:	4631      	mov	r1, r6
   27370:	4628      	mov	r0, r5
   27372:	4798      	blx	r3
   27374:	e7f4      	b.n	27360 <bt_conn_identity_resolved+0x18>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   27376:	4c09      	ldr	r4, [pc, #36]	; (2739c <bt_conn_identity_resolved+0x54>)
   27378:	e000      	b.n	2737c <bt_conn_identity_resolved+0x34>
   2737a:	3420      	adds	r4, #32
   2737c:	4b08      	ldr	r3, [pc, #32]	; (273a0 <bt_conn_identity_resolved+0x58>)
   2737e:	429c      	cmp	r4, r3
   27380:	d208      	bcs.n	27394 <bt_conn_identity_resolved+0x4c>
		if (cb->identity_resolved) {
   27382:	6923      	ldr	r3, [r4, #16]
   27384:	2b00      	cmp	r3, #0
   27386:	d0f8      	beq.n	2737a <bt_conn_identity_resolved+0x32>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   27388:	f105 0288 	add.w	r2, r5, #136	; 0x88
   2738c:	4631      	mov	r1, r6
   2738e:	4628      	mov	r0, r5
   27390:	4798      	blx	r3
   27392:	e7f2      	b.n	2737a <bt_conn_identity_resolved+0x32>
}
   27394:	bd70      	pop	{r4, r5, r6, pc}
   27396:	bf00      	nop
   27398:	20008278 	.word	0x20008278
   2739c:	0003d174 	.word	0x0003d174
   273a0:	0003d194 	.word	0x0003d194

000273a4 <bt_conn_security_changed>:
{
   273a4:	b570      	push	{r4, r5, r6, lr}
   273a6:	4605      	mov	r5, r0
   273a8:	460c      	mov	r4, r1
   273aa:	4616      	mov	r6, r2
	reset_pairing(conn);
   273ac:	f010 f8c6 	bl	3753c <reset_pairing>
	bt_l2cap_security_changed(conn, hci_err);
   273b0:	4621      	mov	r1, r4
   273b2:	4628      	mov	r0, r5
   273b4:	f010 fc21 	bl	37bfa <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   273b8:	4b0d      	ldr	r3, [pc, #52]	; (273f0 <bt_conn_security_changed+0x4c>)
   273ba:	681c      	ldr	r4, [r3, #0]
   273bc:	e000      	b.n	273c0 <bt_conn_security_changed+0x1c>
   273be:	69e4      	ldr	r4, [r4, #28]
   273c0:	b13c      	cbz	r4, 273d2 <bt_conn_security_changed+0x2e>
		if (cb->security_changed) {
   273c2:	6963      	ldr	r3, [r4, #20]
   273c4:	2b00      	cmp	r3, #0
   273c6:	d0fa      	beq.n	273be <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
   273c8:	4632      	mov	r2, r6
   273ca:	7a69      	ldrb	r1, [r5, #9]
   273cc:	4628      	mov	r0, r5
   273ce:	4798      	blx	r3
   273d0:	e7f5      	b.n	273be <bt_conn_security_changed+0x1a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   273d2:	4c08      	ldr	r4, [pc, #32]	; (273f4 <bt_conn_security_changed+0x50>)
   273d4:	e000      	b.n	273d8 <bt_conn_security_changed+0x34>
   273d6:	3420      	adds	r4, #32
   273d8:	4b07      	ldr	r3, [pc, #28]	; (273f8 <bt_conn_security_changed+0x54>)
   273da:	429c      	cmp	r4, r3
   273dc:	d207      	bcs.n	273ee <bt_conn_security_changed+0x4a>
		if (cb->security_changed) {
   273de:	6963      	ldr	r3, [r4, #20]
   273e0:	2b00      	cmp	r3, #0
   273e2:	d0f8      	beq.n	273d6 <bt_conn_security_changed+0x32>
			cb->security_changed(conn, conn->sec_level, err);
   273e4:	4632      	mov	r2, r6
   273e6:	7a69      	ldrb	r1, [r5, #9]
   273e8:	4628      	mov	r0, r5
   273ea:	4798      	blx	r3
   273ec:	e7f3      	b.n	273d6 <bt_conn_security_changed+0x32>
}
   273ee:	bd70      	pop	{r4, r5, r6, pc}
   273f0:	20008278 	.word	0x20008278
   273f4:	0003d174 	.word	0x0003d174
   273f8:	0003d194 	.word	0x0003d194

000273fc <bt_conn_lookup_addr_le>:
{
   273fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273fe:	4607      	mov	r7, r0
   27400:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   27402:	2400      	movs	r4, #0
   27404:	e002      	b.n	2740c <bt_conn_lookup_addr_le+0x10>
			bt_conn_unref(conn);
   27406:	f010 f9cb 	bl	377a0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2740a:	3401      	adds	r4, #1
   2740c:	2c13      	cmp	r4, #19
   2740e:	dc17      	bgt.n	27440 <bt_conn_lookup_addr_le+0x44>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   27410:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   27414:	480b      	ldr	r0, [pc, #44]	; (27444 <bt_conn_lookup_addr_le+0x48>)
   27416:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   2741a:	f010 f99a 	bl	37752 <bt_conn_ref>
		if (!conn) {
   2741e:	4605      	mov	r5, r0
   27420:	2800      	cmp	r0, #0
   27422:	d0f2      	beq.n	2740a <bt_conn_lookup_addr_le+0xe>
		if (conn->type != BT_CONN_TYPE_LE) {
   27424:	7883      	ldrb	r3, [r0, #2]
   27426:	2b01      	cmp	r3, #1
   27428:	d1ed      	bne.n	27406 <bt_conn_lookup_addr_le+0xa>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2742a:	4632      	mov	r2, r6
   2742c:	4639      	mov	r1, r7
   2742e:	f010 fa9a 	bl	37966 <bt_conn_is_peer_addr_le>
   27432:	b108      	cbz	r0, 27438 <bt_conn_lookup_addr_le+0x3c>
}
   27434:	4628      	mov	r0, r5
   27436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   27438:	4628      	mov	r0, r5
   2743a:	f010 f9b1 	bl	377a0 <bt_conn_unref>
			continue;
   2743e:	e7e4      	b.n	2740a <bt_conn_lookup_addr_le+0xe>
	return NULL;
   27440:	2500      	movs	r5, #0
   27442:	e7f7      	b.n	27434 <bt_conn_lookup_addr_le+0x38>
   27444:	20002038 	.word	0x20002038

00027448 <bt_conn_exists_le>:
{
   27448:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   2744a:	f7ff ffd7 	bl	273fc <bt_conn_lookup_addr_le>
	if (conn) {
   2744e:	b908      	cbnz	r0, 27454 <bt_conn_exists_le+0xc>
	return false;
   27450:	2000      	movs	r0, #0
}
   27452:	bd10      	pop	{r4, pc}
   27454:	4604      	mov	r4, r0
   27456:	4b19      	ldr	r3, [pc, #100]	; (274bc <bt_conn_exists_le+0x74>)
   27458:	4a19      	ldr	r2, [pc, #100]	; (274c0 <bt_conn_exists_le+0x78>)
   2745a:	1a9b      	subs	r3, r3, r2
   2745c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Found valid connection in %s state",
   2745e:	f04f 0200 	mov.w	r2, #0
   27462:	2102      	movs	r1, #2
   27464:	f361 0202 	bfi	r2, r1, #0, #3
   27468:	f36f 02c5 	bfc	r2, #3, #3
   2746c:	f363 128f 	bfi	r2, r3, #6, #10
   27470:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   27472:	2b08      	cmp	r3, #8
   27474:	d81d      	bhi.n	274b2 <bt_conn_exists_le+0x6a>
   27476:	e8df f003 	tbb	[pc, r3]
   2747a:	1e05      	.short	0x1e05
   2747c:	1012140e 	.word	0x1012140e
   27480:	1816      	.short	0x1816
   27482:	1a          	.byte	0x1a
   27483:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   27484:	490f      	ldr	r1, [pc, #60]	; (274c4 <bt_conn_exists_le+0x7c>)
   27486:	4810      	ldr	r0, [pc, #64]	; (274c8 <bt_conn_exists_le+0x80>)
   27488:	f7f8 ff0e 	bl	202a8 <log_1>
		bt_conn_unref(conn);
   2748c:	4620      	mov	r0, r4
   2748e:	f010 f987 	bl	377a0 <bt_conn_unref>
		return true;
   27492:	2001      	movs	r0, #1
   27494:	e7dd      	b.n	27452 <bt_conn_exists_le+0xa>
		return "connect-scan";
   27496:	490d      	ldr	r1, [pc, #52]	; (274cc <bt_conn_exists_le+0x84>)
   27498:	e7f5      	b.n	27486 <bt_conn_exists_le+0x3e>
		return "connect-dir-adv";
   2749a:	490d      	ldr	r1, [pc, #52]	; (274d0 <bt_conn_exists_le+0x88>)
   2749c:	e7f3      	b.n	27486 <bt_conn_exists_le+0x3e>
		return "connect-adv";
   2749e:	490d      	ldr	r1, [pc, #52]	; (274d4 <bt_conn_exists_le+0x8c>)
   274a0:	e7f1      	b.n	27486 <bt_conn_exists_le+0x3e>
		return "connect-auto";
   274a2:	490d      	ldr	r1, [pc, #52]	; (274d8 <bt_conn_exists_le+0x90>)
   274a4:	e7ef      	b.n	27486 <bt_conn_exists_le+0x3e>
		return "connect";
   274a6:	490d      	ldr	r1, [pc, #52]	; (274dc <bt_conn_exists_le+0x94>)
   274a8:	e7ed      	b.n	27486 <bt_conn_exists_le+0x3e>
		return "connected";
   274aa:	490d      	ldr	r1, [pc, #52]	; (274e0 <bt_conn_exists_le+0x98>)
   274ac:	e7eb      	b.n	27486 <bt_conn_exists_le+0x3e>
		return "disconnect";
   274ae:	490d      	ldr	r1, [pc, #52]	; (274e4 <bt_conn_exists_le+0x9c>)
   274b0:	e7e9      	b.n	27486 <bt_conn_exists_le+0x3e>
		return "(unknown)";
   274b2:	490d      	ldr	r1, [pc, #52]	; (274e8 <bt_conn_exists_le+0xa0>)
   274b4:	e7e7      	b.n	27486 <bt_conn_exists_le+0x3e>
		return "disconnect-complete";
   274b6:	490d      	ldr	r1, [pc, #52]	; (274ec <bt_conn_exists_le+0xa4>)
   274b8:	e7e5      	b.n	27486 <bt_conn_exists_le+0x3e>
   274ba:	bf00      	nop
   274bc:	0003d1c4 	.word	0x0003d1c4
   274c0:	0003d1a4 	.word	0x0003d1a4
   274c4:	0003f7ec 	.word	0x0003f7ec
   274c8:	0003f870 	.word	0x0003f870
   274cc:	0003f79c 	.word	0x0003f79c
   274d0:	0003f7ac 	.word	0x0003f7ac
   274d4:	0003f7bc 	.word	0x0003f7bc
   274d8:	0003f7c8 	.word	0x0003f7c8
   274dc:	0003f7d8 	.word	0x0003f7d8
   274e0:	0003fab8 	.word	0x0003fab8
   274e4:	0003f7e0 	.word	0x0003f7e0
   274e8:	0003f77c 	.word	0x0003f77c
   274ec:	0003f788 	.word	0x0003f788

000274f0 <bt_conn_lookup_state_le>:
{
   274f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274f4:	4607      	mov	r7, r0
   274f6:	460e      	mov	r6, r1
   274f8:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   274fa:	2400      	movs	r4, #0
   274fc:	e00a      	b.n	27514 <bt_conn_lookup_state_le+0x24>
			bt_conn_unref(conn);
   274fe:	f010 f94f 	bl	377a0 <bt_conn_unref>
			continue;
   27502:	e006      	b.n	27512 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   27504:	4628      	mov	r0, r5
   27506:	f010 f94b 	bl	377a0 <bt_conn_unref>
			continue;
   2750a:	e002      	b.n	27512 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   2750c:	4628      	mov	r0, r5
   2750e:	f010 f947 	bl	377a0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   27512:	3401      	adds	r4, #1
   27514:	2c13      	cmp	r4, #19
   27516:	dc1c      	bgt.n	27552 <bt_conn_lookup_state_le+0x62>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   27518:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2751c:	480e      	ldr	r0, [pc, #56]	; (27558 <bt_conn_lookup_state_le+0x68>)
   2751e:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   27522:	f010 f916 	bl	37752 <bt_conn_ref>
		if (!conn) {
   27526:	4605      	mov	r5, r0
   27528:	2800      	cmp	r0, #0
   2752a:	d0f2      	beq.n	27512 <bt_conn_lookup_state_le+0x22>
		if (conn->type != BT_CONN_TYPE_LE) {
   2752c:	7883      	ldrb	r3, [r0, #2]
   2752e:	2b01      	cmp	r3, #1
   27530:	d1e5      	bne.n	274fe <bt_conn_lookup_state_le+0xe>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   27532:	b12e      	cbz	r6, 27540 <bt_conn_lookup_state_le+0x50>
   27534:	4632      	mov	r2, r6
   27536:	4639      	mov	r1, r7
   27538:	f010 fa15 	bl	37966 <bt_conn_is_peer_addr_le>
   2753c:	2800      	cmp	r0, #0
   2753e:	d0e1      	beq.n	27504 <bt_conn_lookup_state_le+0x14>
		if (!(conn->state == state && conn->id == id)) {
   27540:	7b6b      	ldrb	r3, [r5, #13]
   27542:	4543      	cmp	r3, r8
   27544:	d1e2      	bne.n	2750c <bt_conn_lookup_state_le+0x1c>
   27546:	7a2b      	ldrb	r3, [r5, #8]
   27548:	42bb      	cmp	r3, r7
   2754a:	d1df      	bne.n	2750c <bt_conn_lookup_state_le+0x1c>
}
   2754c:	4628      	mov	r0, r5
   2754e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   27552:	2500      	movs	r5, #0
   27554:	e7fa      	b.n	2754c <bt_conn_lookup_state_le+0x5c>
   27556:	bf00      	nop
   27558:	20002038 	.word	0x20002038

0002755c <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   2755c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2755e:	b083      	sub	sp, #12
   27560:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27562:	f3bf 8f5b 	dmb	ish
   27566:	4b52      	ldr	r3, [pc, #328]	; (276b0 <bt_conn_le_create+0x154>)
   27568:	681b      	ldr	r3, [r3, #0]
   2756a:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2756e:	f013 0f02 	tst.w	r3, #2
   27572:	f000 8085 	beq.w	27680 <bt_conn_le_create+0x124>
   27576:	4604      	mov	r4, r0
   27578:	460e      	mov	r6, r1
   2757a:	4615      	mov	r5, r2
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   2757c:	4610      	mov	r0, r2
   2757e:	f00f fdd6 	bl	3712e <bt_le_conn_params_valid>
   27582:	2800      	cmp	r0, #0
   27584:	d07f      	beq.n	27686 <bt_conn_le_create+0x12a>
		return -EINVAL;
	}

	if (!create_param_validate(create_param)) {
   27586:	4630      	mov	r0, r6
   27588:	f00f ffe8 	bl	3755c <create_param_validate>
   2758c:	2800      	cmp	r0, #0
   2758e:	d07d      	beq.n	2768c <bt_conn_le_create+0x130>
   27590:	f3bf 8f5b 	dmb	ish
   27594:	4b46      	ldr	r3, [pc, #280]	; (276b0 <bt_conn_le_create+0x154>)
   27596:	681b      	ldr	r3, [r3, #0]
   27598:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2759c:	f013 0f40 	tst.w	r3, #64	; 0x40
   275a0:	d177      	bne.n	27692 <bt_conn_le_create+0x136>
   275a2:	f3bf 8f5b 	dmb	ish
   275a6:	4b42      	ldr	r3, [pc, #264]	; (276b0 <bt_conn_le_create+0x154>)
   275a8:	681b      	ldr	r3, [r3, #0]
   275aa:	f3bf 8f5b 	dmb	ish
		return -EAGAIN;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   275ae:	f413 6f00 	tst.w	r3, #2048	; 0x800
   275b2:	d171      	bne.n	27698 <bt_conn_le_create+0x13c>
		return -EALREADY;
	}

	if (!bt_id_scan_random_addr_check()) {
   275b4:	f00f ff4c 	bl	37450 <bt_id_scan_random_addr_check>
   275b8:	2800      	cmp	r0, #0
   275ba:	d070      	beq.n	2769e <bt_conn_le_create+0x142>
		return -EINVAL;
	}

	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   275bc:	4621      	mov	r1, r4
   275be:	2000      	movs	r0, #0
   275c0:	f7ff ff42 	bl	27448 <bt_conn_exists_le>
   275c4:	2800      	cmp	r0, #0
   275c6:	d16d      	bne.n	276a4 <bt_conn_le_create+0x148>
		return -EINVAL;
	}

	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   275c8:	7820      	ldrb	r0, [r4, #0]
   275ca:	3802      	subs	r0, #2
   275cc:	b2c0      	uxtb	r0, r0
   275ce:	2801      	cmp	r0, #1
   275d0:	d92b      	bls.n	2762a <bt_conn_le_create+0xce>
	    peer->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&dst, peer);
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
	} else {
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   275d2:	4621      	mov	r1, r4
   275d4:	2000      	movs	r0, #0
   275d6:	f00f ff1e 	bl	37416 <bt_lookup_id_addr>
   275da:	4601      	mov	r1, r0
   275dc:	2207      	movs	r2, #7
   275de:	4668      	mov	r0, sp
   275e0:	f00f fbc0 	bl	36d64 <memcpy>
	}

	/* Only default identity supported for now */
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   275e4:	4669      	mov	r1, sp
   275e6:	2000      	movs	r0, #0
   275e8:	f010 f9a4 	bl	37934 <bt_conn_add_le>
	if (!conn) {
   275ec:	4604      	mov	r4, r0
   275ee:	2800      	cmp	r0, #0
   275f0:	d05b      	beq.n	276aa <bt_conn_le_create+0x14e>
		return -ENOMEM;
	}

	bt_conn_set_param_le(conn, conn_param);
   275f2:	4629      	mov	r1, r5
   275f4:	f00f ffa5 	bl	37542 <bt_conn_set_param_le>
	create_param_setup(create_param);
   275f8:	4630      	mov	r0, r6
   275fa:	f7ff fa13 	bl	26a24 <create_param_setup>

#if defined(CONFIG_BT_SMP)
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   275fe:	4b2d      	ldr	r3, [pc, #180]	; (276b4 <bt_conn_le_create+0x158>)
   27600:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   27604:	b123      	cbz	r3, 27610 <bt_conn_le_create+0xb4>
   27606:	4a2b      	ldr	r2, [pc, #172]	; (276b4 <bt_conn_le_create+0x158>)
   27608:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   2760c:	4293      	cmp	r3, r2
   2760e:	d21f      	bcs.n	27650 <bt_conn_le_create+0xf4>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   27610:	2102      	movs	r1, #2
   27612:	4620      	mov	r0, r4
   27614:	f7ff fc8c 	bl	26f30 <bt_conn_set_state>

		err = bt_le_scan_update(true);
   27618:	2001      	movs	r0, #1
   2761a:	f7fe fe3f 	bl	2629c <bt_le_scan_update>
		if (err) {
   2761e:	4605      	mov	r5, r0
   27620:	b970      	cbnz	r0, 27640 <bt_conn_le_create+0xe4>
			bt_conn_unref(conn);

			return err;
		}

		*ret_conn = conn;
   27622:	603c      	str	r4, [r7, #0]
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   27624:	4628      	mov	r0, r5
   27626:	b003      	add	sp, #12
   27628:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2762a:	2207      	movs	r2, #7
   2762c:	4621      	mov	r1, r4
   2762e:	4668      	mov	r0, sp
   27630:	f00f fb98 	bl	36d64 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   27634:	f89d 3000 	ldrb.w	r3, [sp]
   27638:	3b02      	subs	r3, #2
   2763a:	f88d 3000 	strb.w	r3, [sp]
   2763e:	e7d1      	b.n	275e4 <bt_conn_le_create+0x88>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27640:	2100      	movs	r1, #0
   27642:	4620      	mov	r0, r4
   27644:	f7ff fc74 	bl	26f30 <bt_conn_set_state>
			bt_conn_unref(conn);
   27648:	4620      	mov	r0, r4
   2764a:	f010 f8a9 	bl	377a0 <bt_conn_unref>
			return err;
   2764e:	e7e9      	b.n	27624 <bt_conn_le_create+0xc8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   27650:	2106      	movs	r1, #6
   27652:	4620      	mov	r0, r4
   27654:	f7ff fc6c 	bl	26f30 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   27658:	4620      	mov	r0, r4
   2765a:	f00f fd4a 	bl	370f2 <bt_le_create_conn>
	if (err) {
   2765e:	4605      	mov	r5, r0
   27660:	b908      	cbnz	r0, 27666 <bt_conn_le_create+0x10a>
	*ret_conn = conn;
   27662:	603c      	str	r4, [r7, #0]
	return 0;
   27664:	e7de      	b.n	27624 <bt_conn_le_create+0xc8>
		conn->err = 0;
   27666:	2600      	movs	r6, #0
   27668:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2766a:	4631      	mov	r1, r6
   2766c:	4620      	mov	r0, r4
   2766e:	f7ff fc5f 	bl	26f30 <bt_conn_set_state>
		bt_conn_unref(conn);
   27672:	4620      	mov	r0, r4
   27674:	f010 f894 	bl	377a0 <bt_conn_unref>
		bt_le_scan_update(false);
   27678:	4630      	mov	r0, r6
   2767a:	f7fe fe0f 	bl	2629c <bt_le_scan_update>
		return err;
   2767e:	e7d1      	b.n	27624 <bt_conn_le_create+0xc8>
		return -EAGAIN;
   27680:	f06f 050a 	mvn.w	r5, #10
   27684:	e7ce      	b.n	27624 <bt_conn_le_create+0xc8>
		return -EINVAL;
   27686:	f06f 0515 	mvn.w	r5, #21
   2768a:	e7cb      	b.n	27624 <bt_conn_le_create+0xc8>
		return -EINVAL;
   2768c:	f06f 0515 	mvn.w	r5, #21
   27690:	e7c8      	b.n	27624 <bt_conn_le_create+0xc8>
		return -EAGAIN;
   27692:	f06f 050a 	mvn.w	r5, #10
   27696:	e7c5      	b.n	27624 <bt_conn_le_create+0xc8>
		return -EALREADY;
   27698:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2769c:	e7c2      	b.n	27624 <bt_conn_le_create+0xc8>
		return -EINVAL;
   2769e:	f06f 0515 	mvn.w	r5, #21
   276a2:	e7bf      	b.n	27624 <bt_conn_le_create+0xc8>
		return -EINVAL;
   276a4:	f06f 0515 	mvn.w	r5, #21
   276a8:	e7bc      	b.n	27624 <bt_conn_le_create+0xc8>
		return -ENOMEM;
   276aa:	f06f 050b 	mvn.w	r5, #11
   276ae:	e7b9      	b.n	27624 <bt_conn_le_create+0xc8>
   276b0:	2000037c 	.word	0x2000037c
   276b4:	200002b0 	.word	0x200002b0

000276b8 <bt_le_set_auto_conn>:
   276b8:	f3bf 8f5b 	dmb	ish
   276bc:	4b3c      	ldr	r3, [pc, #240]	; (277b0 <bt_le_set_auto_conn+0xf8>)
   276be:	681b      	ldr	r3, [r3, #0]
   276c0:	f3bf 8f5b 	dmb	ish
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   276c4:	f013 0f02 	tst.w	r3, #2
   276c8:	d068      	beq.n	2779c <bt_le_set_auto_conn+0xe4>
{
   276ca:	b570      	push	{r4, r5, r6, lr}
   276cc:	4606      	mov	r6, r0
   276ce:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   276d0:	b121      	cbz	r1, 276dc <bt_le_set_auto_conn+0x24>
   276d2:	4608      	mov	r0, r1
   276d4:	f00f fd2b 	bl	3712e <bt_le_conn_params_valid>
   276d8:	2800      	cmp	r0, #0
   276da:	d062      	beq.n	277a2 <bt_le_set_auto_conn+0xea>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   276dc:	f00f feb8 	bl	37450 <bt_id_scan_random_addr_check>
   276e0:	2800      	cmp	r0, #0
   276e2:	d061      	beq.n	277a8 <bt_le_set_auto_conn+0xf0>
		return -EINVAL;
	}

	/* Only default identity is supported */
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   276e4:	4631      	mov	r1, r6
   276e6:	2000      	movs	r0, #0
   276e8:	f7ff fe88 	bl	273fc <bt_conn_lookup_addr_le>
	if (!conn) {
   276ec:	4605      	mov	r5, r0
   276ee:	b1d8      	cbz	r0, 27728 <bt_le_set_auto_conn+0x70>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
   276f0:	b33c      	cbz	r4, 27742 <bt_le_set_auto_conn+0x8a>
		bt_conn_set_param_le(conn, param);
   276f2:	4621      	mov	r1, r4
   276f4:	4628      	mov	r0, r5
   276f6:	f00f ff24 	bl	37542 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
   276fa:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   276fc:	f3bf 8f5b 	dmb	ish
   27700:	e853 2f00 	ldrex	r2, [r3]
   27704:	f042 0101 	orr.w	r1, r2, #1
   27708:	e843 1000 	strex	r0, r1, [r3]
   2770c:	2800      	cmp	r0, #0
   2770e:	d1f7      	bne.n	27700 <bt_le_set_auto_conn+0x48>
   27710:	f3bf 8f5b 	dmb	ish
   27714:	f012 0f01 	tst.w	r2, #1
   27718:	d00f      	beq.n	2773a <bt_le_set_auto_conn+0x82>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
   2771a:	7b6b      	ldrb	r3, [r5, #13]
   2771c:	b363      	cbz	r3, 27778 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
   2771e:	4628      	mov	r0, r5
   27720:	f010 f83e 	bl	377a0 <bt_conn_unref>

	return 0;
   27724:	2000      	movs	r0, #0
}
   27726:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   27728:	4631      	mov	r1, r6
   2772a:	f010 f903 	bl	37934 <bt_conn_add_le>
		if (!conn) {
   2772e:	4605      	mov	r5, r0
   27730:	2800      	cmp	r0, #0
   27732:	d1dd      	bne.n	276f0 <bt_le_set_auto_conn+0x38>
			return -ENOMEM;
   27734:	f06f 000b 	mvn.w	r0, #11
   27738:	e7f5      	b.n	27726 <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
   2773a:	4628      	mov	r0, r5
   2773c:	f010 f809 	bl	37752 <bt_conn_ref>
   27740:	e7eb      	b.n	2771a <bt_le_set_auto_conn+0x62>
		if (atomic_test_and_clear_bit(conn->flags,
   27742:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27744:	f3bf 8f5b 	dmb	ish
   27748:	e853 2f00 	ldrex	r2, [r3]
   2774c:	f022 0101 	bic.w	r1, r2, #1
   27750:	e843 1000 	strex	r0, r1, [r3]
   27754:	2800      	cmp	r0, #0
   27756:	d1f7      	bne.n	27748 <bt_le_set_auto_conn+0x90>
   27758:	f3bf 8f5b 	dmb	ish
   2775c:	f012 0f01 	tst.w	r2, #1
   27760:	d0db      	beq.n	2771a <bt_le_set_auto_conn+0x62>
			bt_conn_unref(conn);
   27762:	4628      	mov	r0, r5
   27764:	f010 f81c 	bl	377a0 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   27768:	7b6b      	ldrb	r3, [r5, #13]
   2776a:	2b02      	cmp	r3, #2
   2776c:	d1d5      	bne.n	2771a <bt_le_set_auto_conn+0x62>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2776e:	2100      	movs	r1, #0
   27770:	4628      	mov	r0, r5
   27772:	f7ff fbdd 	bl	26f30 <bt_conn_set_state>
   27776:	e7d0      	b.n	2771a <bt_le_set_auto_conn+0x62>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27778:	f3bf 8f5b 	dmb	ish
   2777c:	4b0c      	ldr	r3, [pc, #48]	; (277b0 <bt_le_set_auto_conn+0xf8>)
   2777e:	681b      	ldr	r3, [r3, #0]
   27780:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   27784:	f013 0f02 	tst.w	r3, #2
   27788:	d0c9      	beq.n	2771e <bt_le_set_auto_conn+0x66>
		if (param) {
   2778a:	b11c      	cbz	r4, 27794 <bt_le_set_auto_conn+0xdc>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2778c:	2102      	movs	r1, #2
   2778e:	4628      	mov	r0, r5
   27790:	f7ff fbce 	bl	26f30 <bt_conn_set_state>
		bt_le_scan_update(false);
   27794:	2000      	movs	r0, #0
   27796:	f7fe fd81 	bl	2629c <bt_le_scan_update>
   2779a:	e7c0      	b.n	2771e <bt_le_set_auto_conn+0x66>
		return -EAGAIN;
   2779c:	f06f 000a 	mvn.w	r0, #10
}
   277a0:	4770      	bx	lr
		return -EINVAL;
   277a2:	f06f 0015 	mvn.w	r0, #21
   277a6:	e7be      	b.n	27726 <bt_le_set_auto_conn+0x6e>
		return -EINVAL;
   277a8:	f06f 0015 	mvn.w	r0, #21
   277ac:	e7bb      	b.n	27726 <bt_le_set_auto_conn+0x6e>
   277ae:	bf00      	nop
   277b0:	2000037c 	.word	0x2000037c

000277b4 <send_conn_le_param_update>:
{
   277b4:	b538      	push	{r3, r4, r5, lr}
   277b6:	4604      	mov	r4, r0
   277b8:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   277ba:	4608      	mov	r0, r1
   277bc:	f00f fcb7 	bl	3712e <bt_le_conn_params_valid>
   277c0:	b360      	cbz	r0, 2781c <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   277c2:	4b18      	ldr	r3, [pc, #96]	; (27824 <send_conn_le_param_update+0x70>)
   277c4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   277c8:	f013 0f02 	tst.w	r3, #2
   277cc:	d004      	beq.n	277d8 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   277ce:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   277d2:	f013 0f02 	tst.w	r3, #2
   277d6:	d113      	bne.n	27800 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   277d8:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   277da:	b9d3      	cbnz	r3, 27812 <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   277dc:	4629      	mov	r1, r5
   277de:	4620      	mov	r0, r4
   277e0:	f010 f91a 	bl	37a18 <bt_conn_le_conn_update>
		if (rc == 0) {
   277e4:	b9c8      	cbnz	r0, 2781a <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   277e6:	882b      	ldrh	r3, [r5, #0]
   277e8:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   277ec:	886b      	ldrh	r3, [r5, #2]
   277ee:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   277f2:	88ab      	ldrh	r3, [r5, #4]
   277f4:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   277f8:	88eb      	ldrh	r3, [r5, #6]
   277fa:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   277fe:	e00c      	b.n	2781a <send_conn_le_param_update+0x66>
   27800:	f3bf 8f5b 	dmb	ish
   27804:	6863      	ldr	r3, [r4, #4]
   27806:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   2780a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2780e:	d1e3      	bne.n	277d8 <send_conn_le_param_update+0x24>
   27810:	e7e4      	b.n	277dc <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   27812:	4629      	mov	r1, r5
   27814:	4620      	mov	r0, r4
   27816:	f010 fa82 	bl	37d1e <bt_l2cap_update_conn_param>
}
   2781a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2781c:	f06f 0015 	mvn.w	r0, #21
   27820:	e7fb      	b.n	2781a <send_conn_le_param_update+0x66>
   27822:	bf00      	nop
   27824:	200002b0 	.word	0x200002b0

00027828 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   27828:	b508      	push	{r3, lr}
   2782a:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   2782c:	4801      	ldr	r0, [pc, #4]	; (27834 <bt_conn_create_frag_timeout+0xc>)
   2782e:	f7ff fcb1 	bl	27194 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   27832:	bd08      	pop	{r3, pc}
   27834:	20000c08 	.word	0x20000c08

00027838 <create_frag>:
{
   27838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2783a:	4606      	mov	r6, r0
   2783c:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   2783e:	f04f 32ff 	mov.w	r2, #4294967295
   27842:	f04f 33ff 	mov.w	r3, #4294967295
   27846:	2000      	movs	r0, #0
   27848:	f7ff ffee 	bl	27828 <bt_conn_create_frag_timeout>
   2784c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2784e:	7b73      	ldrb	r3, [r6, #13]
   27850:	2b07      	cmp	r3, #7
   27852:	d11a      	bne.n	2788a <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   27854:	2300      	movs	r3, #0
   27856:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   27858:	4b10      	ldr	r3, [pc, #64]	; (2789c <create_frag+0x64>)
   2785a:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   2785e:	f100 0708 	add.w	r7, r0, #8
   27862:	4638      	mov	r0, r7
   27864:	f013 f972 	bl	3ab4c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   27868:	4286      	cmp	r6, r0
   2786a:	d212      	bcs.n	27892 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   2786c:	4b0b      	ldr	r3, [pc, #44]	; (2789c <create_frag+0x64>)
   2786e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   27872:	4632      	mov	r2, r6
   27874:	f855 1f08 	ldr.w	r1, [r5, #8]!
   27878:	4638      	mov	r0, r7
   2787a:	f013 f920 	bl	3aabe <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   2787e:	4631      	mov	r1, r6
   27880:	4628      	mov	r0, r5
   27882:	f013 f93f 	bl	3ab04 <net_buf_simple_pull>
}
   27886:	4620      	mov	r0, r4
   27888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   2788a:	f013 f8c8 	bl	3aa1e <net_buf_unref>
		return NULL;
   2788e:	2400      	movs	r4, #0
   27890:	e7f9      	b.n	27886 <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   27892:	4638      	mov	r0, r7
   27894:	f013 f95a 	bl	3ab4c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   27898:	b286      	uxth	r6, r0
   2789a:	e7ea      	b.n	27872 <create_frag+0x3a>
   2789c:	200002b0 	.word	0x200002b0

000278a0 <send_buf>:
{
   278a0:	b538      	push	{r3, r4, r5, lr}
   278a2:	4605      	mov	r5, r0
   278a4:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   278a6:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   278a8:	4a1b      	ldr	r2, [pc, #108]	; (27918 <send_buf+0x78>)
   278aa:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   278ae:	429a      	cmp	r2, r3
   278b0:	d21f      	bcs.n	278f2 <send_buf+0x52>
	frag = create_frag(conn, buf);
   278b2:	f7ff ffc1 	bl	27838 <create_frag>
	if (!frag) {
   278b6:	4601      	mov	r1, r0
   278b8:	b350      	cbz	r0, 27910 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   278ba:	2301      	movs	r3, #1
   278bc:	2200      	movs	r2, #0
   278be:	4628      	mov	r0, r5
   278c0:	f7ff f91c 	bl	26afc <send_frag>
   278c4:	4603      	mov	r3, r0
   278c6:	b1c8      	cbz	r0, 278fc <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   278c8:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   278ca:	4a13      	ldr	r2, [pc, #76]	; (27918 <send_buf+0x78>)
   278cc:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   278d0:	429a      	cmp	r2, r3
   278d2:	d215      	bcs.n	27900 <send_buf+0x60>
		frag = create_frag(conn, buf);
   278d4:	4621      	mov	r1, r4
   278d6:	4628      	mov	r0, r5
   278d8:	f7ff ffae 	bl	27838 <create_frag>
		if (!frag) {
   278dc:	4601      	mov	r1, r0
   278de:	b1c8      	cbz	r0, 27914 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   278e0:	2301      	movs	r3, #1
   278e2:	461a      	mov	r2, r3
   278e4:	4628      	mov	r0, r5
   278e6:	f7ff f909 	bl	26afc <send_frag>
   278ea:	4603      	mov	r3, r0
   278ec:	2800      	cmp	r0, #0
   278ee:	d1eb      	bne.n	278c8 <send_buf+0x28>
   278f0:	e004      	b.n	278fc <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   278f2:	2300      	movs	r3, #0
   278f4:	2202      	movs	r2, #2
   278f6:	f7ff f901 	bl	26afc <send_frag>
   278fa:	4603      	mov	r3, r0
}
   278fc:	4618      	mov	r0, r3
   278fe:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   27900:	2300      	movs	r3, #0
   27902:	2203      	movs	r2, #3
   27904:	4621      	mov	r1, r4
   27906:	4628      	mov	r0, r5
   27908:	f7ff f8f8 	bl	26afc <send_frag>
   2790c:	4603      	mov	r3, r0
   2790e:	e7f5      	b.n	278fc <send_buf+0x5c>
		return false;
   27910:	2300      	movs	r3, #0
   27912:	e7f3      	b.n	278fc <send_buf+0x5c>
			return false;
   27914:	2300      	movs	r3, #0
   27916:	e7f1      	b.n	278fc <send_buf+0x5c>
   27918:	200002b0 	.word	0x200002b0

0002791c <bt_conn_process_tx>:
{
   2791c:	b538      	push	{r3, r4, r5, lr}
   2791e:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   27920:	7b43      	ldrb	r3, [r0, #13]
   27922:	b97b      	cbnz	r3, 27944 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   27924:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27926:	f3bf 8f5b 	dmb	ish
   2792a:	e853 2f00 	ldrex	r2, [r3]
   2792e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   27932:	e843 1000 	strex	r0, r1, [r3]
   27936:	2800      	cmp	r0, #0
   27938:	d1f7      	bne.n	2792a <bt_conn_process_tx+0xe>
   2793a:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   2793e:	f012 0f40 	tst.w	r2, #64	; 0x40
   27942:	d10d      	bne.n	27960 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   27944:	2200      	movs	r2, #0
   27946:	2300      	movs	r3, #0
   27948:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2794c:	f013 f835 	bl	3a9ba <net_buf_get>
	BT_ASSERT(buf);
   27950:	4605      	mov	r5, r0
   27952:	b148      	cbz	r0, 27968 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   27954:	4629      	mov	r1, r5
   27956:	4620      	mov	r0, r4
   27958:	f7ff ffa2 	bl	278a0 <send_buf>
   2795c:	b190      	cbz	r0, 27984 <bt_conn_process_tx+0x68>
}
   2795e:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   27960:	4620      	mov	r0, r4
   27962:	f00f fe97 	bl	37694 <conn_cleanup>
		return;
   27966:	e7fa      	b.n	2795e <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   27968:	f240 23e7 	movw	r3, #743	; 0x2e7
   2796c:	4a07      	ldr	r2, [pc, #28]	; (2798c <bt_conn_process_tx+0x70>)
   2796e:	4908      	ldr	r1, [pc, #32]	; (27990 <bt_conn_process_tx+0x74>)
   27970:	4808      	ldr	r0, [pc, #32]	; (27994 <bt_conn_process_tx+0x78>)
   27972:	f00c fd7c 	bl	3446e <printk>
   27976:	4040      	eors	r0, r0
   27978:	f380 8811 	msr	BASEPRI, r0
   2797c:	f04f 0003 	mov.w	r0, #3
   27980:	df02      	svc	2
   27982:	e7e7      	b.n	27954 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   27984:	4628      	mov	r0, r5
   27986:	f013 f84a 	bl	3aa1e <net_buf_unref>
   2798a:	e7e8      	b.n	2795e <bt_conn_process_tx+0x42>
   2798c:	0003f894 	.word	0x0003f894
   27990:	00040520 	.word	0x00040520
   27994:	0003ee24 	.word	0x0003ee24

00027998 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   27998:	b570      	push	{r4, r5, r6, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   2799a:	2400      	movs	r4, #0
   2799c:	e006      	b.n	279ac <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   2799e:	4919      	ldr	r1, [pc, #100]	; (27a04 <bt_conn_init+0x6c>)
   279a0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   279a4:	4818      	ldr	r0, [pc, #96]	; (27a08 <bt_conn_init+0x70>)
   279a6:	f014 fccf 	bl	3c348 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   279aa:	3401      	adds	r4, #1
   279ac:	2c02      	cmp	r4, #2
   279ae:	ddf6      	ble.n	2799e <bt_conn_init+0x6>
	}

	bt_att_init();
   279b0:	f010 ff55 	bl	3885e <bt_att_init>

	err = bt_smp_init();
   279b4:	f005 f874 	bl	2caa0 <bt_smp_init>
	if (err) {
   279b8:	4606      	mov	r6, r0
   279ba:	b108      	cbz	r0, 279c0 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   279bc:	4630      	mov	r0, r6
   279be:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_init();
   279c0:	f010 f9da 	bl	37d78 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   279c4:	4634      	mov	r4, r6
   279c6:	e008      	b.n	279da <bt_conn_init+0x42>
				conn->id = BT_ID_DEFAULT;
   279c8:	2300      	movs	r3, #0
   279ca:	7203      	strb	r3, [r0, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   279cc:	2102      	movs	r1, #2
   279ce:	f7ff faaf 	bl	26f30 <bt_conn_set_state>
			bt_conn_unref(conn);
   279d2:	4628      	mov	r0, r5
   279d4:	f00f fee4 	bl	377a0 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   279d8:	3401      	adds	r4, #1
   279da:	2c13      	cmp	r4, #19
   279dc:	dcee      	bgt.n	279bc <bt_conn_init+0x24>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   279de:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   279e2:	4b0a      	ldr	r3, [pc, #40]	; (27a0c <bt_conn_init+0x74>)
   279e4:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   279e8:	f00f feb3 	bl	37752 <bt_conn_ref>
			if (!conn) {
   279ec:	4605      	mov	r5, r0
   279ee:	2800      	cmp	r0, #0
   279f0:	d0f2      	beq.n	279d8 <bt_conn_init+0x40>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   279f2:	f3bf 8f5b 	dmb	ish
   279f6:	6843      	ldr	r3, [r0, #4]
   279f8:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
   279fc:	f013 0f01 	tst.w	r3, #1
   27a00:	d0e7      	beq.n	279d2 <bt_conn_init+0x3a>
   27a02:	e7e1      	b.n	279c8 <bt_conn_init+0x30>
   27a04:	2000827c 	.word	0x2000827c
   27a08:	20000b98 	.word	0x20000b98
   27a0c:	20002038 	.word	0x20002038

00027a10 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   27a10:	4a05      	ldr	r2, [pc, #20]	; (27a28 <get_ident+0x18>)
   27a12:	7813      	ldrb	r3, [r2, #0]
   27a14:	3301      	adds	r3, #1
   27a16:	b2db      	uxtb	r3, r3
   27a18:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   27a1a:	b90b      	cbnz	r3, 27a20 <get_ident+0x10>
		ident++;
   27a1c:	3301      	adds	r3, #1
   27a1e:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   27a20:	4b01      	ldr	r3, [pc, #4]	; (27a28 <get_ident+0x18>)
   27a22:	7818      	ldrb	r0, [r3, #0]
   27a24:	4770      	bx	lr
   27a26:	bf00      	nop
   27a28:	2000da73 	.word	0x2000da73

00027a2c <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   27a2c:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   27a2e:	898b      	ldrh	r3, [r1, #12]
   27a30:	2b01      	cmp	r3, #1
   27a32:	d900      	bls.n	27a36 <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   27a34:	bd08      	pop	{r3, pc}
   27a36:	4b08      	ldr	r3, [pc, #32]	; (27a58 <le_conn_param_rsp+0x2c>)
   27a38:	4a08      	ldr	r2, [pc, #32]	; (27a5c <le_conn_param_rsp+0x30>)
   27a3a:	1a9b      	subs	r3, r3, r2
   27a3c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   27a3e:	f04f 0100 	mov.w	r1, #0
   27a42:	2201      	movs	r2, #1
   27a44:	f362 0102 	bfi	r1, r2, #0, #3
   27a48:	f36f 01c5 	bfc	r1, #3, #3
   27a4c:	f363 118f 	bfi	r1, r3, #6, #10
   27a50:	4803      	ldr	r0, [pc, #12]	; (27a60 <le_conn_param_rsp+0x34>)
   27a52:	f7f8 fcdf 	bl	20414 <log_0>
		return;
   27a56:	e7ed      	b.n	27a34 <le_conn_param_rsp+0x8>
   27a58:	0003d1fc 	.word	0x0003d1fc
   27a5c:	0003d1a4 	.word	0x0003d1a4
   27a60:	0003f8ec 	.word	0x0003f8ec

00027a64 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   27a64:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   27a66:	2300      	movs	r3, #0
   27a68:	e000      	b.n	27a6c <l2cap_accept+0x8>
   27a6a:	3301      	adds	r3, #1
   27a6c:	2b13      	cmp	r3, #19
   27a6e:	dc0f      	bgt.n	27a90 <l2cap_accept+0x2c>
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   27a70:	22e8      	movs	r2, #232	; 0xe8
   27a72:	fb02 f203 	mul.w	r2, r2, r3
   27a76:	4c10      	ldr	r4, [pc, #64]	; (27ab8 <l2cap_accept+0x54>)
   27a78:	58a2      	ldr	r2, [r4, r2]
   27a7a:	2a00      	cmp	r2, #0
   27a7c:	d1f5      	bne.n	27a6a <l2cap_accept+0x6>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   27a7e:	4a0e      	ldr	r2, [pc, #56]	; (27ab8 <l2cap_accept+0x54>)
   27a80:	20e8      	movs	r0, #232	; 0xe8
   27a82:	fb00 2303 	mla	r3, r0, r3, r2
   27a86:	4a0d      	ldr	r2, [pc, #52]	; (27abc <l2cap_accept+0x58>)
   27a88:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   27a8a:	600b      	str	r3, [r1, #0]

		return 0;
   27a8c:	2000      	movs	r0, #0
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   27a8e:	bd10      	pop	{r4, pc}
   27a90:	4b0b      	ldr	r3, [pc, #44]	; (27ac0 <l2cap_accept+0x5c>)
   27a92:	4a0c      	ldr	r2, [pc, #48]	; (27ac4 <l2cap_accept+0x60>)
   27a94:	1a9b      	subs	r3, r3, r2
   27a96:	08db      	lsrs	r3, r3, #3
	BT_ERR("No available L2CAP context for conn %p", conn);
   27a98:	f04f 0200 	mov.w	r2, #0
   27a9c:	2101      	movs	r1, #1
   27a9e:	f361 0202 	bfi	r2, r1, #0, #3
   27aa2:	f36f 02c5 	bfc	r2, #3, #3
   27aa6:	f363 128f 	bfi	r2, r3, #6, #10
   27aaa:	4601      	mov	r1, r0
   27aac:	4806      	ldr	r0, [pc, #24]	; (27ac8 <l2cap_accept+0x64>)
   27aae:	f7f8 fbfb 	bl	202a8 <log_1>
	return -ENOMEM;
   27ab2:	f06f 000b 	mvn.w	r0, #11
   27ab6:	e7ea      	b.n	27a8e <l2cap_accept+0x2a>
   27ab8:	20002f38 	.word	0x20002f38
   27abc:	0003fa90 	.word	0x0003fa90
   27ac0:	0003d1fc 	.word	0x0003d1fc
   27ac4:	0003d1a4 	.word	0x0003d1a4
   27ac8:	0003f908 	.word	0x0003f908

00027acc <l2cap_rtx_timeout>:
{
   27acc:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   27ace:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   27ad2:	f850 5c10 	ldr.w	r5, [r0, #-16]
   27ad6:	4b0c      	ldr	r3, [pc, #48]	; (27b08 <l2cap_rtx_timeout+0x3c>)
   27ad8:	4a0c      	ldr	r2, [pc, #48]	; (27b0c <l2cap_rtx_timeout+0x40>)
   27ada:	1a9b      	subs	r3, r3, r2
   27adc:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   27ade:	f04f 0200 	mov.w	r2, #0
   27ae2:	2101      	movs	r1, #1
   27ae4:	f361 0202 	bfi	r2, r1, #0, #3
   27ae8:	f36f 02c5 	bfc	r2, #3, #3
   27aec:	f363 128f 	bfi	r2, r3, #6, #10
   27af0:	4621      	mov	r1, r4
   27af2:	4807      	ldr	r0, [pc, #28]	; (27b10 <l2cap_rtx_timeout+0x44>)
   27af4:	f7f8 fbd8 	bl	202a8 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   27af8:	4621      	mov	r1, r4
   27afa:	4628      	mov	r0, r5
   27afc:	f010 f811 	bl	37b22 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   27b00:	4620      	mov	r0, r4
   27b02:	f010 f836 	bl	37b72 <bt_l2cap_chan_del>
}
   27b06:	bd38      	pop	{r3, r4, r5, pc}
   27b08:	0003d1fc 	.word	0x0003d1fc
   27b0c:	0003d1a4 	.word	0x0003d1a4
   27b10:	0003f930 	.word	0x0003f930

00027b14 <l2cap_chan_add>:
{
   27b14:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   27b16:	b1d9      	cbz	r1, 27b50 <l2cap_chan_add+0x3c>
   27b18:	4604      	mov	r4, r0
   27b1a:	4615      	mov	r5, r2
   27b1c:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   27b1e:	4914      	ldr	r1, [pc, #80]	; (27b70 <l2cap_chan_add+0x5c>)
   27b20:	f106 0010 	add.w	r0, r6, #16
   27b24:	f014 fd12 	bl	3c54c <k_work_init_delayable>
	atomic_clear(chan->status);
   27b28:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27b2c:	2200      	movs	r2, #0
   27b2e:	f3bf 8f5b 	dmb	ish
   27b32:	e853 1f00 	ldrex	r1, [r3]
   27b36:	e843 2000 	strex	r0, r2, [r3]
   27b3a:	2800      	cmp	r0, #0
   27b3c:	d1f9      	bne.n	27b32 <l2cap_chan_add+0x1e>
   27b3e:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   27b42:	462a      	mov	r2, r5
   27b44:	4631      	mov	r1, r6
   27b46:	4620      	mov	r0, r4
   27b48:	f010 f826 	bl	37b98 <bt_l2cap_chan_add>
	return true;
   27b4c:	2001      	movs	r0, #1
}
   27b4e:	bd70      	pop	{r4, r5, r6, pc}
   27b50:	4b08      	ldr	r3, [pc, #32]	; (27b74 <l2cap_chan_add+0x60>)
   27b52:	4a09      	ldr	r2, [pc, #36]	; (27b78 <l2cap_chan_add+0x64>)
   27b54:	1a9b      	subs	r3, r3, r2
   27b56:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   27b58:	2201      	movs	r2, #1
   27b5a:	f362 0102 	bfi	r1, r2, #0, #3
   27b5e:	f36f 01c5 	bfc	r1, #3, #3
   27b62:	f363 118f 	bfi	r1, r3, #6, #10
   27b66:	4805      	ldr	r0, [pc, #20]	; (27b7c <l2cap_chan_add+0x68>)
   27b68:	f7f8 fc54 	bl	20414 <log_0>
		return false;
   27b6c:	2000      	movs	r0, #0
   27b6e:	e7ee      	b.n	27b4e <l2cap_chan_add+0x3a>
   27b70:	00027acd 	.word	0x00027acd
   27b74:	0003d1fc 	.word	0x0003d1fc
   27b78:	0003d1a4 	.word	0x0003d1a4
   27b7c:	0003f940 	.word	0x0003f940

00027b80 <bt_l2cap_connected>:
{
   27b80:	b530      	push	{r4, r5, lr}
   27b82:	b083      	sub	sp, #12
   27b84:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   27b86:	4c1a      	ldr	r4, [pc, #104]	; (27bf0 <bt_l2cap_connected+0x70>)
   27b88:	e000      	b.n	27b8c <bt_l2cap_connected+0xc>
   27b8a:	340c      	adds	r4, #12
   27b8c:	4b19      	ldr	r3, [pc, #100]	; (27bf4 <bt_l2cap_connected+0x74>)
   27b8e:	429c      	cmp	r4, r3
   27b90:	d22c      	bcs.n	27bec <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   27b92:	6863      	ldr	r3, [r4, #4]
   27b94:	a901      	add	r1, sp, #4
   27b96:	4628      	mov	r0, r5
   27b98:	4798      	blx	r3
   27b9a:	2800      	cmp	r0, #0
   27b9c:	dbf5      	blt.n	27b8a <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   27b9e:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   27ba0:	8823      	ldrh	r3, [r4, #0]
   27ba2:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   27ba6:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   27baa:	68a2      	ldr	r2, [r4, #8]
   27bac:	4628      	mov	r0, r5
   27bae:	f7ff ffb1 	bl	27b14 <l2cap_chan_add>
   27bb2:	b1d8      	cbz	r0, 27bec <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   27bb4:	9801      	ldr	r0, [sp, #4]
   27bb6:	6843      	ldr	r3, [r0, #4]
   27bb8:	681b      	ldr	r3, [r3, #0]
   27bba:	b103      	cbz	r3, 27bbe <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   27bbc:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   27bbe:	9b01      	ldr	r3, [sp, #4]
   27bc0:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27bc2:	f3bf 8f5b 	dmb	ish
   27bc6:	e853 2f00 	ldrex	r2, [r3]
   27bca:	f042 0201 	orr.w	r2, r2, #1
   27bce:	e843 2100 	strex	r1, r2, [r3]
   27bd2:	2900      	cmp	r1, #0
   27bd4:	d1f7      	bne.n	27bc6 <bt_l2cap_connected+0x46>
   27bd6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   27bda:	9801      	ldr	r0, [sp, #4]
   27bdc:	6843      	ldr	r3, [r0, #4]
   27bde:	699b      	ldr	r3, [r3, #24]
   27be0:	2b00      	cmp	r3, #0
   27be2:	d0d2      	beq.n	27b8a <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   27be4:	f100 0168 	add.w	r1, r0, #104	; 0x68
   27be8:	4798      	blx	r3
   27bea:	e7ce      	b.n	27b8a <bt_l2cap_connected+0xa>
}
   27bec:	b003      	add	sp, #12
   27bee:	bd30      	pop	{r4, r5, pc}
   27bf0:	0003d150 	.word	0x0003d150
   27bf4:	0003d174 	.word	0x0003d174

00027bf8 <l2cap_create_le_sig_pdu>:
{
   27bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27bfa:	460c      	mov	r4, r1
   27bfc:	4616      	mov	r6, r2
   27bfe:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   27c00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   27c04:	2300      	movs	r3, #0
   27c06:	2100      	movs	r1, #0
   27c08:	4608      	mov	r0, r1
   27c0a:	f010 f81b 	bl	37c44 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   27c0e:	4607      	mov	r7, r0
   27c10:	b140      	cbz	r0, 27c24 <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   27c12:	2104      	movs	r1, #4
   27c14:	3008      	adds	r0, #8
   27c16:	f012 ff4c 	bl	3aab2 <net_buf_simple_add>
	hdr->code = code;
   27c1a:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   27c1c:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   27c1e:	8045      	strh	r5, [r0, #2]
}
   27c20:	4638      	mov	r0, r7
   27c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c24:	4b08      	ldr	r3, [pc, #32]	; (27c48 <l2cap_create_le_sig_pdu+0x50>)
   27c26:	4a09      	ldr	r2, [pc, #36]	; (27c4c <l2cap_create_le_sig_pdu+0x54>)
   27c28:	1a9b      	subs	r3, r3, r2
   27c2a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   27c2c:	f04f 0200 	mov.w	r2, #0
   27c30:	2101      	movs	r1, #1
   27c32:	f361 0202 	bfi	r2, r1, #0, #3
   27c36:	f36f 02c5 	bfc	r2, #3, #3
   27c3a:	f363 128f 	bfi	r2, r3, #6, #10
   27c3e:	4621      	mov	r1, r4
   27c40:	4803      	ldr	r0, [pc, #12]	; (27c50 <l2cap_create_le_sig_pdu+0x58>)
   27c42:	f7f8 fb31 	bl	202a8 <log_1>
		return NULL;
   27c46:	e7eb      	b.n	27c20 <l2cap_create_le_sig_pdu+0x28>
   27c48:	0003d1fc 	.word	0x0003d1fc
   27c4c:	0003d1a4 	.word	0x0003d1a4
   27c50:	0003f964 	.word	0x0003f964

00027c54 <le_conn_param_update_req>:
{
   27c54:	b570      	push	{r4, r5, r6, lr}
   27c56:	b084      	sub	sp, #16
   27c58:	4614      	mov	r4, r2
	struct bt_conn *conn = l2cap->chan.chan.conn;
   27c5a:	6805      	ldr	r5, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   27c5c:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
   27c5e:	8992      	ldrh	r2, [r2, #12]
   27c60:	2a07      	cmp	r2, #7
   27c62:	d932      	bls.n	27cca <le_conn_param_update_req+0x76>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   27c64:	78ea      	ldrb	r2, [r5, #3]
   27c66:	2a00      	cmp	r2, #0
   27c68:	d140      	bne.n	27cec <le_conn_param_update_req+0x98>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   27c6a:	881a      	ldrh	r2, [r3, #0]
   27c6c:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   27c70:	885a      	ldrh	r2, [r3, #2]
   27c72:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   27c76:	889a      	ldrh	r2, [r3, #4]
   27c78:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   27c7c:	88db      	ldrh	r3, [r3, #6]
   27c7e:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   27c82:	2302      	movs	r3, #2
   27c84:	460a      	mov	r2, r1
   27c86:	2113      	movs	r1, #19
   27c88:	4620      	mov	r0, r4
   27c8a:	f7ff ffb5 	bl	27bf8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   27c8e:	4606      	mov	r6, r0
   27c90:	b390      	cbz	r0, 27cf8 <le_conn_param_update_req+0xa4>
	accepted = le_param_req(conn, &param);
   27c92:	a902      	add	r1, sp, #8
   27c94:	4628      	mov	r0, r5
   27c96:	f7ff fb1d 	bl	272d4 <le_param_req>
   27c9a:	4604      	mov	r4, r0
   27c9c:	2102      	movs	r1, #2
   27c9e:	f106 0008 	add.w	r0, r6, #8
   27ca2:	f012 ff06 	bl	3aab2 <net_buf_simple_add>
	if (accepted) {
   27ca6:	b34c      	cbz	r4, 27cfc <le_conn_param_update_req+0xa8>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   27ca8:	2300      	movs	r3, #0
   27caa:	7003      	strb	r3, [r0, #0]
   27cac:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   27cae:	2300      	movs	r3, #0
   27cb0:	9300      	str	r3, [sp, #0]
   27cb2:	4632      	mov	r2, r6
   27cb4:	2105      	movs	r1, #5
   27cb6:	4628      	mov	r0, r5
   27cb8:	f00f ffc9 	bl	37c4e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   27cbc:	bb18      	cbnz	r0, 27d06 <le_conn_param_update_req+0xb2>
	if (accepted) {
   27cbe:	b1dc      	cbz	r4, 27cf8 <le_conn_param_update_req+0xa4>
		bt_conn_le_conn_update(conn, &param);
   27cc0:	a902      	add	r1, sp, #8
   27cc2:	4628      	mov	r0, r5
   27cc4:	f00f fea8 	bl	37a18 <bt_conn_le_conn_update>
   27cc8:	e016      	b.n	27cf8 <le_conn_param_update_req+0xa4>
   27cca:	4b11      	ldr	r3, [pc, #68]	; (27d10 <le_conn_param_update_req+0xbc>)
   27ccc:	4a11      	ldr	r2, [pc, #68]	; (27d14 <le_conn_param_update_req+0xc0>)
   27cce:	1a9b      	subs	r3, r3, r2
   27cd0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn update param req");
   27cd2:	f04f 0100 	mov.w	r1, #0
   27cd6:	2201      	movs	r2, #1
   27cd8:	f362 0102 	bfi	r1, r2, #0, #3
   27cdc:	f36f 01c5 	bfc	r1, #3, #3
   27ce0:	f363 118f 	bfi	r1, r3, #6, #10
   27ce4:	480c      	ldr	r0, [pc, #48]	; (27d18 <le_conn_param_update_req+0xc4>)
   27ce6:	f7f8 fb95 	bl	20414 <log_0>
		return;
   27cea:	e005      	b.n	27cf8 <le_conn_param_update_req+0xa4>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   27cec:	2200      	movs	r2, #0
   27cee:	9200      	str	r2, [sp, #0]
   27cf0:	4613      	mov	r3, r2
   27cf2:	4628      	mov	r0, r5
   27cf4:	f00f ffc0 	bl	37c78 <l2cap_send_reject>
}
   27cf8:	b004      	add	sp, #16
   27cfa:	bd70      	pop	{r4, r5, r6, pc}
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   27cfc:	2301      	movs	r3, #1
   27cfe:	7003      	strb	r3, [r0, #0]
   27d00:	2300      	movs	r3, #0
   27d02:	7043      	strb	r3, [r0, #1]
   27d04:	e7d3      	b.n	27cae <le_conn_param_update_req+0x5a>
		net_buf_unref(buf);
   27d06:	4630      	mov	r0, r6
   27d08:	f012 fe89 	bl	3aa1e <net_buf_unref>
   27d0c:	e7d7      	b.n	27cbe <le_conn_param_update_req+0x6a>
   27d0e:	bf00      	nop
   27d10:	0003d1fc 	.word	0x0003d1fc
   27d14:	0003d1a4 	.word	0x0003d1a4
   27d18:	0003f98c 	.word	0x0003f98c

00027d1c <l2cap_recv>:
{
   27d1c:	b570      	push	{r4, r5, r6, lr}
   27d1e:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   27d20:	898b      	ldrh	r3, [r1, #12]
   27d22:	2b03      	cmp	r3, #3
   27d24:	d92e      	bls.n	27d84 <l2cap_recv+0x68>
   27d26:	4606      	mov	r6, r0
   27d28:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   27d2a:	2104      	movs	r1, #4
   27d2c:	f104 0008 	add.w	r0, r4, #8
   27d30:	f012 fef0 	bl	3ab14 <net_buf_simple_pull_mem>
   27d34:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   27d36:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   27d38:	89a1      	ldrh	r1, [r4, #12]
   27d3a:	4291      	cmp	r1, r2
   27d3c:	d135      	bne.n	27daa <l2cap_recv+0x8e>
	if (!hdr->ident) {
   27d3e:	7841      	ldrb	r1, [r0, #1]
   27d40:	2900      	cmp	r1, #0
   27d42:	d043      	beq.n	27dcc <l2cap_recv+0xb0>
	switch (hdr->code) {
   27d44:	7803      	ldrb	r3, [r0, #0]
   27d46:	2b12      	cmp	r3, #18
   27d48:	d054      	beq.n	27df4 <l2cap_recv+0xd8>
   27d4a:	2b13      	cmp	r3, #19
   27d4c:	d04d      	beq.n	27dea <l2cap_recv+0xce>
   27d4e:	2b01      	cmp	r3, #1
   27d50:	d028      	beq.n	27da4 <l2cap_recv+0x88>
   27d52:	492b      	ldr	r1, [pc, #172]	; (27e00 <l2cap_recv+0xe4>)
   27d54:	4a2b      	ldr	r2, [pc, #172]	; (27e04 <l2cap_recv+0xe8>)
   27d56:	1a89      	subs	r1, r1, r2
   27d58:	08c9      	lsrs	r1, r1, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   27d5a:	f04f 0200 	mov.w	r2, #0
   27d5e:	2002      	movs	r0, #2
   27d60:	f360 0202 	bfi	r2, r0, #0, #3
   27d64:	f36f 02c5 	bfc	r2, #3, #3
   27d68:	f361 128f 	bfi	r2, r1, #6, #10
   27d6c:	4619      	mov	r1, r3
   27d6e:	4826      	ldr	r0, [pc, #152]	; (27e08 <l2cap_recv+0xec>)
   27d70:	f7f8 fa9a 	bl	202a8 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   27d74:	7869      	ldrb	r1, [r5, #1]
   27d76:	2200      	movs	r2, #0
   27d78:	9200      	str	r2, [sp, #0]
   27d7a:	4613      	mov	r3, r2
   27d7c:	6830      	ldr	r0, [r6, #0]
   27d7e:	f00f ff7b 	bl	37c78 <l2cap_send_reject>
		break;
   27d82:	e00f      	b.n	27da4 <l2cap_recv+0x88>
   27d84:	4b1e      	ldr	r3, [pc, #120]	; (27e00 <l2cap_recv+0xe4>)
   27d86:	4a1f      	ldr	r2, [pc, #124]	; (27e04 <l2cap_recv+0xe8>)
   27d88:	1a9b      	subs	r3, r3, r2
   27d8a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   27d8c:	f04f 0100 	mov.w	r1, #0
   27d90:	2201      	movs	r2, #1
   27d92:	f362 0102 	bfi	r1, r2, #0, #3
   27d96:	f36f 01c5 	bfc	r1, #3, #3
   27d9a:	f363 118f 	bfi	r1, r3, #6, #10
   27d9e:	481b      	ldr	r0, [pc, #108]	; (27e0c <l2cap_recv+0xf0>)
   27da0:	f7f8 fb38 	bl	20414 <log_0>
}
   27da4:	2000      	movs	r0, #0
   27da6:	b002      	add	sp, #8
   27da8:	bd70      	pop	{r4, r5, r6, pc}
   27daa:	4815      	ldr	r0, [pc, #84]	; (27e00 <l2cap_recv+0xe4>)
   27dac:	4b15      	ldr	r3, [pc, #84]	; (27e04 <l2cap_recv+0xe8>)
   27dae:	1ac0      	subs	r0, r0, r3
   27db0:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   27db2:	f04f 0300 	mov.w	r3, #0
   27db6:	2401      	movs	r4, #1
   27db8:	f364 0302 	bfi	r3, r4, #0, #3
   27dbc:	f36f 03c5 	bfc	r3, #3, #3
   27dc0:	f360 138f 	bfi	r3, r0, #6, #10
   27dc4:	4812      	ldr	r0, [pc, #72]	; (27e10 <l2cap_recv+0xf4>)
   27dc6:	f7f8 faa5 	bl	20314 <log_2>
		return 0;
   27dca:	e7eb      	b.n	27da4 <l2cap_recv+0x88>
   27dcc:	4b0c      	ldr	r3, [pc, #48]	; (27e00 <l2cap_recv+0xe4>)
   27dce:	4a0d      	ldr	r2, [pc, #52]	; (27e04 <l2cap_recv+0xe8>)
   27dd0:	1a9b      	subs	r3, r3, r2
   27dd2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   27dd4:	2201      	movs	r2, #1
   27dd6:	f362 0102 	bfi	r1, r2, #0, #3
   27dda:	f36f 01c5 	bfc	r1, #3, #3
   27dde:	f363 118f 	bfi	r1, r3, #6, #10
   27de2:	480c      	ldr	r0, [pc, #48]	; (27e14 <l2cap_recv+0xf8>)
   27de4:	f7f8 fb16 	bl	20414 <log_0>
		return 0;
   27de8:	e7dc      	b.n	27da4 <l2cap_recv+0x88>
		le_conn_param_rsp(l2cap, buf);
   27dea:	4621      	mov	r1, r4
   27dec:	4630      	mov	r0, r6
   27dee:	f7ff fe1d 	bl	27a2c <le_conn_param_rsp>
		break;
   27df2:	e7d7      	b.n	27da4 <l2cap_recv+0x88>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   27df4:	4622      	mov	r2, r4
   27df6:	4630      	mov	r0, r6
   27df8:	f7ff ff2c 	bl	27c54 <le_conn_param_update_req>
			break;
   27dfc:	e7d2      	b.n	27da4 <l2cap_recv+0x88>
   27dfe:	bf00      	nop
   27e00:	0003d1fc 	.word	0x0003d1fc
   27e04:	0003d1a4 	.word	0x0003d1a4
   27e08:	0003fa18 	.word	0x0003fa18
   27e0c:	0003f9b0 	.word	0x0003f9b0
   27e10:	0003f9d0 	.word	0x0003f9d0
   27e14:	0003f9f4 	.word	0x0003f9f4

00027e18 <bt_l2cap_recv>:
{
   27e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e1a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   27e1c:	898b      	ldrh	r3, [r1, #12]
   27e1e:	2b03      	cmp	r3, #3
   27e20:	d911      	bls.n	27e46 <bt_l2cap_recv+0x2e>
   27e22:	4605      	mov	r5, r0
   27e24:	4616      	mov	r6, r2
   27e26:	2104      	movs	r1, #4
   27e28:	f104 0008 	add.w	r0, r4, #8
   27e2c:	f012 fe72 	bl	3ab14 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   27e30:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   27e32:	4639      	mov	r1, r7
   27e34:	4628      	mov	r0, r5
   27e36:	f00f ff5f 	bl	37cf8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   27e3a:	b1c0      	cbz	r0, 27e6e <bt_l2cap_recv+0x56>
	l2cap_chan_recv(chan, buf, complete);
   27e3c:	4632      	mov	r2, r6
   27e3e:	4621      	mov	r1, r4
   27e40:	f00f fe61 	bl	37b06 <l2cap_chan_recv>
}
   27e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27e46:	4b14      	ldr	r3, [pc, #80]	; (27e98 <bt_l2cap_recv+0x80>)
   27e48:	4a14      	ldr	r2, [pc, #80]	; (27e9c <bt_l2cap_recv+0x84>)
   27e4a:	1a9b      	subs	r3, r3, r2
   27e4c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   27e4e:	f04f 0100 	mov.w	r1, #0
   27e52:	2201      	movs	r2, #1
   27e54:	f362 0102 	bfi	r1, r2, #0, #3
   27e58:	f36f 01c5 	bfc	r1, #3, #3
   27e5c:	f363 118f 	bfi	r1, r3, #6, #10
   27e60:	480f      	ldr	r0, [pc, #60]	; (27ea0 <bt_l2cap_recv+0x88>)
   27e62:	f7f8 fad7 	bl	20414 <log_0>
		net_buf_unref(buf);
   27e66:	4620      	mov	r0, r4
   27e68:	f012 fdd9 	bl	3aa1e <net_buf_unref>
		return;
   27e6c:	e7ea      	b.n	27e44 <bt_l2cap_recv+0x2c>
   27e6e:	4b0a      	ldr	r3, [pc, #40]	; (27e98 <bt_l2cap_recv+0x80>)
   27e70:	4a0a      	ldr	r2, [pc, #40]	; (27e9c <bt_l2cap_recv+0x84>)
   27e72:	1a9b      	subs	r3, r3, r2
   27e74:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   27e76:	f04f 0200 	mov.w	r2, #0
   27e7a:	2102      	movs	r1, #2
   27e7c:	f361 0202 	bfi	r2, r1, #0, #3
   27e80:	f36f 02c5 	bfc	r2, #3, #3
   27e84:	f363 128f 	bfi	r2, r3, #6, #10
   27e88:	4639      	mov	r1, r7
   27e8a:	4806      	ldr	r0, [pc, #24]	; (27ea4 <bt_l2cap_recv+0x8c>)
   27e8c:	f7f8 fa0c 	bl	202a8 <log_1>
		net_buf_unref(buf);
   27e90:	4620      	mov	r0, r4
   27e92:	f012 fdc4 	bl	3aa1e <net_buf_unref>
		return;
   27e96:	e7d5      	b.n	27e44 <bt_l2cap_recv+0x2c>
   27e98:	0003d1fc 	.word	0x0003d1fc
   27e9c:	0003d1a4 	.word	0x0003d1a4
   27ea0:	0003fa38 	.word	0x0003fa38
   27ea4:	0003fa58 	.word	0x0003fa58

00027ea8 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   27ea8:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   27eaa:	4b03      	ldr	r3, [pc, #12]	; (27eb8 <att_cfm_sent+0x10>)
   27eac:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   27eb0:	f00f ff63 	bl	37d7a <att_sent>
}
   27eb4:	bd08      	pop	{r3, pc}
   27eb6:	bf00      	nop
   27eb8:	00038075 	.word	0x00038075

00027ebc <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   27ebc:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   27ebe:	4b03      	ldr	r3, [pc, #12]	; (27ecc <att_rsp_sent+0x10>)
   27ec0:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   27ec4:	f00f ff59 	bl	37d7a <att_sent>
}
   27ec8:	bd08      	pop	{r3, pc}
   27eca:	bf00      	nop
   27ecc:	00038091 	.word	0x00038091

00027ed0 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   27ed0:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   27ed2:	4b03      	ldr	r3, [pc, #12]	; (27ee0 <att_req_sent+0x10>)
   27ed4:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   27ed8:	f00f ff4f 	bl	37d7a <att_sent>
}
   27edc:	bd08      	pop	{r3, pc}
   27ede:	bf00      	nop
   27ee0:	0003805d 	.word	0x0003805d

00027ee4 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   27ee4:	4b08      	ldr	r3, [pc, #32]	; (27f08 <att_cb+0x24>)
   27ee6:	4298      	cmp	r0, r3
   27ee8:	d009      	beq.n	27efe <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   27eea:	4b08      	ldr	r3, [pc, #32]	; (27f0c <att_cb+0x28>)
   27eec:	4298      	cmp	r0, r3
   27eee:	d008      	beq.n	27f02 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   27ef0:	4b07      	ldr	r3, [pc, #28]	; (27f10 <att_cb+0x2c>)
   27ef2:	4298      	cmp	r0, r3
   27ef4:	d001      	beq.n	27efa <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   27ef6:	4807      	ldr	r0, [pc, #28]	; (27f14 <att_cb+0x30>)
	}
}
   27ef8:	4770      	bx	lr
		return att_req_sent;
   27efa:	4807      	ldr	r0, [pc, #28]	; (27f18 <att_cb+0x34>)
   27efc:	4770      	bx	lr
		return att_rsp_sent;
   27efe:	4807      	ldr	r0, [pc, #28]	; (27f1c <att_cb+0x38>)
   27f00:	4770      	bx	lr
		return att_cfm_sent;
   27f02:	4807      	ldr	r0, [pc, #28]	; (27f20 <att_cb+0x3c>)
   27f04:	4770      	bx	lr
   27f06:	bf00      	nop
   27f08:	00038091 	.word	0x00038091
   27f0c:	00038075 	.word	0x00038075
   27f10:	0003805d 	.word	0x0003805d
   27f14:	00037d7b 	.word	0x00037d7b
   27f18:	00027ed1 	.word	0x00027ed1
   27f1c:	00027ebd 	.word	0x00027ebd
   27f20:	00027ea9 	.word	0x00027ea9

00027f24 <chan_cb>:
{
   27f24:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   27f26:	6883      	ldr	r3, [r0, #8]
   27f28:	7818      	ldrb	r0, [r3, #0]
   27f2a:	f00f ff6f 	bl	37e0c <att_op_get_type>
   27f2e:	3801      	subs	r0, #1
   27f30:	2804      	cmp	r0, #4
   27f32:	d808      	bhi.n	27f46 <chan_cb+0x22>
   27f34:	e8df f000 	tbb	[pc, r0]
   27f38:	09070305 	.word	0x09070305
   27f3c:	05          	.byte	0x05
   27f3d:	00          	.byte	0x00
   27f3e:	4804      	ldr	r0, [pc, #16]	; (27f50 <chan_cb+0x2c>)
   27f40:	e000      	b.n	27f44 <chan_cb+0x20>
		return chan_req_sent;
   27f42:	4804      	ldr	r0, [pc, #16]	; (27f54 <chan_cb+0x30>)
}
   27f44:	bd08      	pop	{r3, pc}
		return NULL;
   27f46:	2000      	movs	r0, #0
   27f48:	e7fc      	b.n	27f44 <chan_cb+0x20>
		return chan_cfm_sent;
   27f4a:	4803      	ldr	r0, [pc, #12]	; (27f58 <chan_cb+0x34>)
   27f4c:	e7fa      	b.n	27f44 <chan_cb+0x20>
   27f4e:	bf00      	nop
   27f50:	00038091 	.word	0x00038091
   27f54:	0003805d 	.word	0x0003805d
   27f58:	00038075 	.word	0x00038075

00027f5c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   27f5c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   27f5e:	7b43      	ldrb	r3, [r0, #13]
   27f60:	2b07      	cmp	r3, #7
   27f62:	d111      	bne.n	27f88 <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   27f64:	2104      	movs	r1, #4
   27f66:	f00f fec7 	bl	37cf8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   27f6a:	4604      	mov	r4, r0
   27f6c:	b1f0      	cbz	r0, 27fac <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27f6e:	f3bf 8f5b 	dmb	ish
   27f72:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   27f76:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   27f7a:	f013 0f04 	tst.w	r3, #4
   27f7e:	d126      	bne.n	27fce <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   27f80:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   27f84:	4620      	mov	r0, r4
   27f86:	bd10      	pop	{r4, pc}
   27f88:	4b1a      	ldr	r3, [pc, #104]	; (27ff4 <att_get+0x98>)
   27f8a:	4a1b      	ldr	r2, [pc, #108]	; (27ff8 <att_get+0x9c>)
   27f8c:	1a9b      	subs	r3, r3, r2
   27f8e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   27f90:	f04f 0100 	mov.w	r1, #0
   27f94:	2202      	movs	r2, #2
   27f96:	f362 0102 	bfi	r1, r2, #0, #3
   27f9a:	f36f 01c5 	bfc	r1, #3, #3
   27f9e:	f363 118f 	bfi	r1, r3, #6, #10
   27fa2:	4816      	ldr	r0, [pc, #88]	; (27ffc <att_get+0xa0>)
   27fa4:	f7f8 fa36 	bl	20414 <log_0>
		return NULL;
   27fa8:	2400      	movs	r4, #0
   27faa:	e7eb      	b.n	27f84 <att_get+0x28>
   27fac:	4b11      	ldr	r3, [pc, #68]	; (27ff4 <att_get+0x98>)
   27fae:	4a12      	ldr	r2, [pc, #72]	; (27ff8 <att_get+0x9c>)
   27fb0:	1a9b      	subs	r3, r3, r2
   27fb2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   27fb4:	f04f 0100 	mov.w	r1, #0
   27fb8:	2201      	movs	r2, #1
   27fba:	f362 0102 	bfi	r1, r2, #0, #3
   27fbe:	f36f 01c5 	bfc	r1, #3, #3
   27fc2:	f363 118f 	bfi	r1, r3, #6, #10
   27fc6:	480e      	ldr	r0, [pc, #56]	; (28000 <att_get+0xa4>)
   27fc8:	f7f8 fa24 	bl	20414 <log_0>
		return NULL;
   27fcc:	e7da      	b.n	27f84 <att_get+0x28>
   27fce:	4b09      	ldr	r3, [pc, #36]	; (27ff4 <att_get+0x98>)
   27fd0:	4a09      	ldr	r2, [pc, #36]	; (27ff8 <att_get+0x9c>)
   27fd2:	1a9b      	subs	r3, r3, r2
   27fd4:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   27fd6:	f04f 0100 	mov.w	r1, #0
   27fda:	2202      	movs	r2, #2
   27fdc:	f362 0102 	bfi	r1, r2, #0, #3
   27fe0:	f36f 01c5 	bfc	r1, #3, #3
   27fe4:	f363 118f 	bfi	r1, r3, #6, #10
   27fe8:	4806      	ldr	r0, [pc, #24]	; (28004 <att_get+0xa8>)
   27fea:	f7f8 fa13 	bl	20414 <log_0>
		return NULL;
   27fee:	2400      	movs	r4, #0
   27ff0:	e7c8      	b.n	27f84 <att_get+0x28>
   27ff2:	bf00      	nop
   27ff4:	0003d1b4 	.word	0x0003d1b4
   27ff8:	0003d1a4 	.word	0x0003d1a4
   27ffc:	0003fab4 	.word	0x0003fab4
   28000:	0003fac4 	.word	0x0003fac4
   28004:	0003fae0 	.word	0x0003fae0

00028008 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   28008:	b570      	push	{r4, r5, r6, lr}
   2800a:	b082      	sub	sp, #8
   2800c:	4605      	mov	r5, r0
   2800e:	460e      	mov	r6, r1
	return list->head;
   28010:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28012:	b10b      	cbz	r3, 28018 <att_chan_new+0x10>
   28014:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   28018:	9301      	str	r3, [sp, #4]
	int quota = 0;
   2801a:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2801c:	e014      	b.n	28048 <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   2801e:	3101      	adds	r1, #1
   28020:	e017      	b.n	28052 <att_chan_new+0x4a>
   28022:	4b2d      	ldr	r3, [pc, #180]	; (280d8 <att_chan_new+0xd0>)
   28024:	4a2d      	ldr	r2, [pc, #180]	; (280dc <att_chan_new+0xd4>)
   28026:	1a9b      	subs	r3, r3, r2
   28028:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   2802a:	f04f 0200 	mov.w	r2, #0
   2802e:	2001      	movs	r0, #1
   28030:	f360 0202 	bfi	r2, r0, #0, #3
   28034:	f36f 02c5 	bfc	r2, #3, #3
   28038:	f363 128f 	bfi	r2, r3, #6, #10
   2803c:	4828      	ldr	r0, [pc, #160]	; (280e0 <att_chan_new+0xd8>)
   2803e:	f7f8 f933 	bl	202a8 <log_1>
			return NULL;
   28042:	2400      	movs	r4, #0
   28044:	e033      	b.n	280ae <att_chan_new+0xa6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28046:	9301      	str	r3, [sp, #4]
   28048:	9c01      	ldr	r4, [sp, #4]
   2804a:	b174      	cbz	r4, 2806a <att_chan_new+0x62>
		if (chan->att == att) {
   2804c:	6823      	ldr	r3, [r4, #0]
   2804e:	42ab      	cmp	r3, r5
   28050:	d0e5      	beq.n	2801e <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   28052:	2901      	cmp	r1, #1
   28054:	d0e5      	beq.n	28022 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28056:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   2805a:	d0f4      	beq.n	28046 <att_chan_new+0x3e>
	return node->next;
   2805c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28060:	2b00      	cmp	r3, #0
   28062:	d0f0      	beq.n	28046 <att_chan_new+0x3e>
   28064:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   28068:	e7ed      	b.n	28046 <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2806a:	2200      	movs	r2, #0
   2806c:	2300      	movs	r3, #0
   2806e:	a901      	add	r1, sp, #4
   28070:	481c      	ldr	r0, [pc, #112]	; (280e4 <att_chan_new+0xdc>)
   28072:	f007 fea9 	bl	2fdc8 <k_mem_slab_alloc>
   28076:	b9e8      	cbnz	r0, 280b4 <att_chan_new+0xac>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   28078:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2807c:	2100      	movs	r1, #0
   2807e:	9801      	ldr	r0, [sp, #4]
   28080:	f00e fe94 	bl	36dac <memset>
	chan->chan.chan.ops = &ops;
   28084:	9801      	ldr	r0, [sp, #4]
   28086:	4b18      	ldr	r3, [pc, #96]	; (280e8 <att_chan_new+0xe0>)
   28088:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   2808a:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   2808c:	f014 f950 	bl	3c330 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   28090:	9b01      	ldr	r3, [sp, #4]
   28092:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28094:	f3bf 8f5b 	dmb	ish
   28098:	e853 2f00 	ldrex	r2, [r3]
   2809c:	e843 6100 	strex	r1, r6, [r3]
   280a0:	2900      	cmp	r1, #0
   280a2:	d1f9      	bne.n	28098 <att_chan_new+0x90>
   280a4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   280a8:	9b01      	ldr	r3, [sp, #4]
   280aa:	601d      	str	r5, [r3, #0]

	return chan;
   280ac:	9c01      	ldr	r4, [sp, #4]
}
   280ae:	4620      	mov	r0, r4
   280b0:	b002      	add	sp, #8
   280b2:	bd70      	pop	{r4, r5, r6, pc}
   280b4:	4b08      	ldr	r3, [pc, #32]	; (280d8 <att_chan_new+0xd0>)
   280b6:	4a09      	ldr	r2, [pc, #36]	; (280dc <att_chan_new+0xd4>)
   280b8:	1a9b      	subs	r3, r3, r2
   280ba:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   280bc:	f04f 0200 	mov.w	r2, #0
   280c0:	2101      	movs	r1, #1
   280c2:	f361 0202 	bfi	r2, r1, #0, #3
   280c6:	f36f 02c5 	bfc	r2, #3, #3
   280ca:	f363 128f 	bfi	r2, r3, #6, #10
   280ce:	6829      	ldr	r1, [r5, #0]
   280d0:	4806      	ldr	r0, [pc, #24]	; (280ec <att_chan_new+0xe4>)
   280d2:	f7f8 f8e9 	bl	202a8 <log_1>
		return NULL;
   280d6:	e7ea      	b.n	280ae <att_chan_new+0xa6>
   280d8:	0003d1b4 	.word	0x0003d1b4
   280dc:	0003d1a4 	.word	0x0003d1a4
   280e0:	0003fb04 	.word	0x0003fb04
   280e4:	20000a84 	.word	0x20000a84
   280e8:	2000069c 	.word	0x2000069c
   280ec:	0003fb2c 	.word	0x0003fb2c

000280f0 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   280f0:	b570      	push	{r4, r5, r6, lr}
   280f2:	b082      	sub	sp, #8
   280f4:	4606      	mov	r6, r0
   280f6:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   280f8:	2200      	movs	r2, #0
   280fa:	2300      	movs	r3, #0
   280fc:	a901      	add	r1, sp, #4
   280fe:	4819      	ldr	r0, [pc, #100]	; (28164 <bt_att_accept+0x74>)
   28100:	f007 fe62 	bl	2fdc8 <k_mem_slab_alloc>
   28104:	b9b0      	cbnz	r0, 28134 <bt_att_accept+0x44>
   28106:	4605      	mov	r5, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   28108:	222c      	movs	r2, #44	; 0x2c
   2810a:	2100      	movs	r1, #0
   2810c:	9801      	ldr	r0, [sp, #4]
   2810e:	f00e fe4d 	bl	36dac <memset>
	att->conn = conn;
   28112:	9b01      	ldr	r3, [sp, #4]
   28114:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   28116:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   28118:	2100      	movs	r1, #0
   2811a:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   2811c:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   2811e:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   28120:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   28122:	f7ff ff71 	bl	28008 <att_chan_new>
	if (!chan) {
   28126:	4603      	mov	r3, r0
   28128:	b1c0      	cbz	r0, 2815c <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   2812a:	3308      	adds	r3, #8
   2812c:	6023      	str	r3, [r4, #0]

	return 0;
}
   2812e:	4628      	mov	r0, r5
   28130:	b002      	add	sp, #8
   28132:	bd70      	pop	{r4, r5, r6, pc}
   28134:	4b0c      	ldr	r3, [pc, #48]	; (28168 <bt_att_accept+0x78>)
   28136:	4a0d      	ldr	r2, [pc, #52]	; (2816c <bt_att_accept+0x7c>)
   28138:	1a9b      	subs	r3, r3, r2
   2813a:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   2813c:	f04f 0200 	mov.w	r2, #0
   28140:	2101      	movs	r1, #1
   28142:	f361 0202 	bfi	r2, r1, #0, #3
   28146:	f36f 02c5 	bfc	r2, #3, #3
   2814a:	f363 128f 	bfi	r2, r3, #6, #10
   2814e:	4631      	mov	r1, r6
   28150:	4807      	ldr	r0, [pc, #28]	; (28170 <bt_att_accept+0x80>)
   28152:	f7f8 f8a9 	bl	202a8 <log_1>
		return -ENOMEM;
   28156:	f06f 050b 	mvn.w	r5, #11
   2815a:	e7e8      	b.n	2812e <bt_att_accept+0x3e>
		return -ENOMEM;
   2815c:	f06f 050b 	mvn.w	r5, #11
   28160:	e7e5      	b.n	2812e <bt_att_accept+0x3e>
   28162:	bf00      	nop
   28164:	20000a68 	.word	0x20000a68
   28168:	0003d1b4 	.word	0x0003d1b4
   2816c:	0003d1a4 	.word	0x0003d1a4
   28170:	0003fb54 	.word	0x0003fb54

00028174 <bt_att_released>:
{
   28174:	b500      	push	{lr}
   28176:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   28178:	3808      	subs	r0, #8
   2817a:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   2817c:	a901      	add	r1, sp, #4
   2817e:	4803      	ldr	r0, [pc, #12]	; (2818c <bt_att_released+0x18>)
   28180:	f013 ffba 	bl	3c0f8 <k_mem_slab_free>
}
   28184:	b003      	add	sp, #12
   28186:	f85d fb04 	ldr.w	pc, [sp], #4
   2818a:	bf00      	nop
   2818c:	20000a84 	.word	0x20000a84

00028190 <chan_send>:
{
   28190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28194:	b083      	sub	sp, #12
   28196:	4604      	mov	r4, r0
   28198:	460d      	mov	r5, r1
   2819a:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   2819c:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2819e:	781b      	ldrb	r3, [r3, #0]
   281a0:	2bd2      	cmp	r3, #210	; 0xd2
   281a2:	d021      	beq.n	281e8 <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   281a4:	f105 0008 	add.w	r0, r5, #8
   281a8:	f012 fccc 	bl	3ab44 <net_buf_simple_headroom>
   281ac:	b287      	uxth	r7, r0
	state->len = buf->len;
   281ae:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   281b2:	b3a6      	cbz	r6, 2821e <chan_send+0x8e>
   281b4:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   281b8:	f854 8b08 	ldr.w	r8, [r4], #8
   281bc:	4630      	mov	r0, r6
   281be:	f7ff fe91 	bl	27ee4 <att_cb>
   281c2:	4603      	mov	r3, r0
   281c4:	f8d8 0000 	ldr.w	r0, [r8]
   281c8:	9400      	str	r4, [sp, #0]
   281ca:	462a      	mov	r2, r5
   281cc:	2104      	movs	r1, #4
   281ce:	f00f fd3e 	bl	37c4e <bt_l2cap_send_cb>
	if (err) {
   281d2:	4680      	mov	r8, r0
   281d4:	b120      	cbz	r0, 281e0 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   281d6:	6928      	ldr	r0, [r5, #16]
   281d8:	4438      	add	r0, r7
   281da:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   281dc:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   281e0:	4640      	mov	r0, r8
   281e2:	b003      	add	sp, #12
   281e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   281e8:	6803      	ldr	r3, [r0, #0]
   281ea:	6818      	ldr	r0, [r3, #0]
   281ec:	f012 f8eb 	bl	3a3c6 <bt_smp_sign>
		if (err) {
   281f0:	4680      	mov	r8, r0
   281f2:	2800      	cmp	r0, #0
   281f4:	d0d6      	beq.n	281a4 <chan_send+0x14>
   281f6:	4b0c      	ldr	r3, [pc, #48]	; (28228 <chan_send+0x98>)
   281f8:	4a0c      	ldr	r2, [pc, #48]	; (2822c <chan_send+0x9c>)
   281fa:	1a9b      	subs	r3, r3, r2
   281fc:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   281fe:	f04f 0100 	mov.w	r1, #0
   28202:	2201      	movs	r2, #1
   28204:	f362 0102 	bfi	r1, r2, #0, #3
   28208:	f36f 01c5 	bfc	r1, #3, #3
   2820c:	f363 118f 	bfi	r1, r3, #6, #10
   28210:	4807      	ldr	r0, [pc, #28]	; (28230 <chan_send+0xa0>)
   28212:	f7f8 f8ff 	bl	20414 <log_0>
			net_buf_unref(buf);
   28216:	4628      	mov	r0, r5
   28218:	f012 fc01 	bl	3aa1e <net_buf_unref>
			return err;
   2821c:	e7e0      	b.n	281e0 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   2821e:	4628      	mov	r0, r5
   28220:	f7ff fe80 	bl	27f24 <chan_cb>
   28224:	4606      	mov	r6, r0
   28226:	e7c5      	b.n	281b4 <chan_send+0x24>
   28228:	0003d1b4 	.word	0x0003d1b4
   2822c:	0003d1a4 	.word	0x0003d1a4
   28230:	0003fb7c 	.word	0x0003fb7c

00028234 <read_group_cb>:
{
   28234:	b5f0      	push	{r4, r5, r6, r7, lr}
   28236:	b085      	sub	sp, #20
   28238:	4605      	mov	r5, r0
   2823a:	460e      	mov	r6, r1
   2823c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2823e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   28240:	2300      	movs	r3, #0
   28242:	f88d 3008 	strb.w	r3, [sp, #8]
   28246:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2824a:	f8ad 300a 	strh.w	r3, [sp, #10]
   2824e:	a902      	add	r1, sp, #8
   28250:	6800      	ldr	r0, [r0, #0]
   28252:	f00e feb3 	bl	36fbc <bt_uuid_cmp>
   28256:	b158      	cbz	r0, 28270 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   28258:	2300      	movs	r3, #0
   2825a:	f88d 300c 	strb.w	r3, [sp, #12]
   2825e:	f642 0301 	movw	r3, #10241	; 0x2801
   28262:	f8ad 300e 	strh.w	r3, [sp, #14]
   28266:	a903      	add	r1, sp, #12
   28268:	6828      	ldr	r0, [r5, #0]
   2826a:	f00e fea7 	bl	36fbc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2826e:	bb30      	cbnz	r0, 282be <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   28270:	6861      	ldr	r1, [r4, #4]
   28272:	6828      	ldr	r0, [r5, #0]
   28274:	f00e fea2 	bl	36fbc <bt_uuid_cmp>
   28278:	bb48      	cbnz	r0, 282ce <read_group_cb+0x9a>
	if (data->rsp->len &&
   2827a:	68e3      	ldr	r3, [r4, #12]
   2827c:	781a      	ldrb	r2, [r3, #0]
   2827e:	b132      	cbz	r2, 2828e <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   28280:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   28284:	68a1      	ldr	r1, [r4, #8]
   28286:	8989      	ldrh	r1, [r1, #12]
   28288:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   2828a:	4293      	cmp	r3, r2
   2828c:	db24      	blt.n	282d8 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2828e:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   28290:	2104      	movs	r1, #4
   28292:	3008      	adds	r0, #8
   28294:	f012 fc0d 	bl	3aab2 <net_buf_simple_add>
   28298:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2829a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2829c:	6923      	ldr	r3, [r4, #16]
   2829e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   282a0:	9401      	str	r4, [sp, #4]
   282a2:	4b10      	ldr	r3, [pc, #64]	; (282e4 <read_group_cb+0xb0>)
   282a4:	9300      	str	r3, [sp, #0]
   282a6:	2300      	movs	r3, #0
   282a8:	68a2      	ldr	r2, [r4, #8]
   282aa:	4629      	mov	r1, r5
   282ac:	4638      	mov	r0, r7
   282ae:	f010 f853 	bl	38358 <att_chan_read>
	if (read < 0) {
   282b2:	2800      	cmp	r0, #0
   282b4:	db12      	blt.n	282dc <read_group_cb+0xa8>
	if (!data->group) {
   282b6:	6923      	ldr	r3, [r4, #16]
   282b8:	b193      	cbz	r3, 282e0 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   282ba:	2001      	movs	r0, #1
   282bc:	e00a      	b.n	282d4 <read_group_cb+0xa0>
		if (data->group &&
   282be:	6923      	ldr	r3, [r4, #16]
   282c0:	b11b      	cbz	r3, 282ca <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   282c2:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   282c4:	42b2      	cmp	r2, r6
   282c6:	d200      	bcs.n	282ca <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   282c8:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   282ca:	2001      	movs	r0, #1
   282cc:	e002      	b.n	282d4 <read_group_cb+0xa0>
		data->group = NULL;
   282ce:	2300      	movs	r3, #0
   282d0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   282d2:	2001      	movs	r0, #1
}
   282d4:	b005      	add	sp, #20
   282d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   282d8:	2000      	movs	r0, #0
   282da:	e7fb      	b.n	282d4 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   282dc:	2000      	movs	r0, #0
   282de:	e7f9      	b.n	282d4 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   282e0:	2000      	movs	r0, #0
   282e2:	e7f7      	b.n	282d4 <read_group_cb+0xa0>
   282e4:	00037ddf 	.word	0x00037ddf

000282e8 <read_type_cb>:
{
   282e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   282ec:	b083      	sub	sp, #12
   282ee:	4606      	mov	r6, r0
   282f0:	4688      	mov	r8, r1
   282f2:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   282f4:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   282f6:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   282f8:	6851      	ldr	r1, [r2, #4]
   282fa:	6800      	ldr	r0, [r0, #0]
   282fc:	f00e fe5e 	bl	36fbc <bt_uuid_cmp>
   28300:	b120      	cbz	r0, 2830c <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   28302:	2501      	movs	r5, #1
}
   28304:	4628      	mov	r0, r5
   28306:	b003      	add	sp, #12
   28308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2830c:	2215      	movs	r2, #21
   2830e:	4631      	mov	r1, r6
   28310:	4628      	mov	r0, r5
   28312:	f011 f952 	bl	395ba <bt_gatt_check_perm>
   28316:	4605      	mov	r5, r0
   28318:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2831a:	b130      	cbz	r0, 2832a <read_type_cb+0x42>
		if (data->rsp->len) {
   2831c:	68e3      	ldr	r3, [r4, #12]
   2831e:	781b      	ldrb	r3, [r3, #0]
   28320:	b10b      	cbz	r3, 28326 <read_type_cb+0x3e>
			data->err = 0x00;
   28322:	2300      	movs	r3, #0
   28324:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   28326:	2500      	movs	r5, #0
   28328:	e7ec      	b.n	28304 <read_type_cb+0x1c>
	data->err = 0x00;
   2832a:	f04f 0900 	mov.w	r9, #0
   2832e:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   28332:	68a0      	ldr	r0, [r4, #8]
   28334:	f012 fb9d 	bl	3aa72 <net_buf_frag_last>
   28338:	2102      	movs	r1, #2
   2833a:	3008      	adds	r0, #8
   2833c:	f012 fbb9 	bl	3aab2 <net_buf_simple_add>
   28340:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   28342:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   28346:	9401      	str	r4, [sp, #4]
   28348:	4b11      	ldr	r3, [pc, #68]	; (28390 <read_type_cb+0xa8>)
   2834a:	9300      	str	r3, [sp, #0]
   2834c:	464b      	mov	r3, r9
   2834e:	68a2      	ldr	r2, [r4, #8]
   28350:	4631      	mov	r1, r6
   28352:	4638      	mov	r0, r7
   28354:	f010 f800 	bl	38358 <att_chan_read>
	if (read < 0) {
   28358:	2800      	cmp	r0, #0
   2835a:	db07      	blt.n	2836c <read_type_cb+0x84>
	if (!data->item) {
   2835c:	6923      	ldr	r3, [r4, #16]
   2835e:	2b00      	cmp	r3, #0
   28360:	d0d0      	beq.n	28304 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   28362:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   28366:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   28368:	2200      	movs	r2, #0

	while (buf) {
   2836a:	e006      	b.n	2837a <read_type_cb+0x92>
		data->err = err_to_att(read);
   2836c:	f00f fd1b 	bl	37da6 <err_to_att>
   28370:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   28372:	e7c7      	b.n	28304 <read_type_cb+0x1c>
		bytes += buf->len;
   28374:	8999      	ldrh	r1, [r3, #12]
   28376:	440a      	add	r2, r1
		buf = buf->frags;
   28378:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2837a:	2b00      	cmp	r3, #0
   2837c:	d1fa      	bne.n	28374 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2837e:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   28380:	68e3      	ldr	r3, [r4, #12]
   28382:	781d      	ldrb	r5, [r3, #0]
   28384:	42aa      	cmp	r2, r5
   28386:	bf94      	ite	ls
   28388:	2500      	movls	r5, #0
   2838a:	2501      	movhi	r5, #1
   2838c:	e7ba      	b.n	28304 <read_type_cb+0x1c>
   2838e:	bf00      	nop
   28390:	00037db7 	.word	0x00037db7

00028394 <find_type_cb>:
{
   28394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28398:	b093      	sub	sp, #76	; 0x4c
   2839a:	4606      	mov	r6, r0
   2839c:	460f      	mov	r7, r1
   2839e:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   283a0:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   283a4:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   283a8:	2300      	movs	r3, #0
   283aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   283ae:	f642 0301 	movw	r3, #10241	; 0x2801
   283b2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   283b6:	a910      	add	r1, sp, #64	; 0x40
   283b8:	6800      	ldr	r0, [r0, #0]
   283ba:	f00e fdff 	bl	36fbc <bt_uuid_cmp>
   283be:	b928      	cbnz	r0, 283cc <find_type_cb+0x38>
	data->group = NULL;
   283c0:	2300      	movs	r3, #0
   283c2:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   283c4:	2001      	movs	r0, #1
}
   283c6:	b013      	add	sp, #76	; 0x4c
   283c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   283cc:	2300      	movs	r3, #0
   283ce:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   283d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   283d6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   283da:	a911      	add	r1, sp, #68	; 0x44
   283dc:	6830      	ldr	r0, [r6, #0]
   283de:	f00e fded 	bl	36fbc <bt_uuid_cmp>
   283e2:	b928      	cbnz	r0, 283f0 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   283e4:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   283e8:	6868      	ldr	r0, [r5, #4]
   283ea:	4603      	mov	r3, r0
	size_t bytes = 0;
   283ec:	2400      	movs	r4, #0
	while (buf) {
   283ee:	e00a      	b.n	28406 <find_type_cb+0x72>
		if (data->group &&
   283f0:	68ab      	ldr	r3, [r5, #8]
   283f2:	b11b      	cbz	r3, 283fc <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   283f4:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   283f6:	42ba      	cmp	r2, r7
   283f8:	d200      	bcs.n	283fc <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   283fa:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   283fc:	2001      	movs	r0, #1
   283fe:	e7e2      	b.n	283c6 <find_type_cb+0x32>
		bytes += buf->len;
   28400:	899a      	ldrh	r2, [r3, #12]
   28402:	4414      	add	r4, r2
		buf = buf->frags;
   28404:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   28406:	2b00      	cmp	r3, #0
   28408:	d1fa      	bne.n	28400 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   2840a:	1b0c      	subs	r4, r1, r4
   2840c:	2c03      	cmp	r4, #3
   2840e:	d801      	bhi.n	28414 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   28410:	2000      	movs	r0, #0
   28412:	e7d8      	b.n	283c6 <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   28414:	f012 fb2d 	bl	3aa72 <net_buf_frag_last>
   28418:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   2841a:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   2841e:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   28420:	2200      	movs	r2, #0
	while (buf) {
   28422:	b11b      	cbz	r3, 2842c <find_type_cb+0x98>
		bytes += buf->len;
   28424:	8999      	ldrh	r1, [r3, #12]
   28426:	440a      	add	r2, r1
		buf = buf->frags;
   28428:	681b      	ldr	r3, [r3, #0]
   2842a:	e7fa      	b.n	28422 <find_type_cb+0x8e>
   2842c:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   28430:	f104 0b08 	add.w	fp, r4, #8
   28434:	4658      	mov	r0, fp
   28436:	f012 fb89 	bl	3ab4c <net_buf_simple_tailroom>
   2843a:	4582      	cmp	sl, r0
   2843c:	d22b      	bcs.n	28496 <find_type_cb+0x102>
   2843e:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   28442:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   28444:	2200      	movs	r2, #0
	while (buf) {
   28446:	e002      	b.n	2844e <find_type_cb+0xba>
		bytes += buf->len;
   28448:	8999      	ldrh	r1, [r3, #12]
   2844a:	440a      	add	r2, r1
		buf = buf->frags;
   2844c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2844e:	2b00      	cmp	r3, #0
   28450:	d1fa      	bne.n	28448 <find_type_cb+0xb4>
   28452:	1a80      	subs	r0, r0, r2
	if (!len) {
   28454:	b318      	cbz	r0, 2849e <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   28456:	f8d6 8004 	ldr.w	r8, [r6, #4]
   2845a:	2300      	movs	r3, #0
   2845c:	9300      	str	r3, [sp, #0]
   2845e:	2310      	movs	r3, #16
   28460:	aa0c      	add	r2, sp, #48	; 0x30
   28462:	4631      	mov	r1, r6
   28464:	4648      	mov	r0, r9
   28466:	47c0      	blx	r8
	if (read < 0) {
   28468:	1e06      	subs	r6, r0, #0
   2846a:	dba9      	blt.n	283c0 <find_type_cb+0x2c>
	if (read != data->value_len) {
   2846c:	7c2a      	ldrb	r2, [r5, #16]
   2846e:	42b2      	cmp	r2, r6
   28470:	d049      	beq.n	28506 <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   28472:	68e9      	ldr	r1, [r5, #12]
   28474:	a807      	add	r0, sp, #28
   28476:	f00e fdbf 	bl	36ff8 <bt_uuid_create>
   2847a:	b300      	cbz	r0, 284be <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   2847c:	b2f2      	uxtb	r2, r6
   2847e:	a90c      	add	r1, sp, #48	; 0x30
   28480:	a802      	add	r0, sp, #8
   28482:	f00e fdb9 	bl	36ff8 <bt_uuid_create>
   28486:	b360      	cbz	r0, 284e2 <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   28488:	a902      	add	r1, sp, #8
   2848a:	a807      	add	r0, sp, #28
   2848c:	f00e fd96 	bl	36fbc <bt_uuid_cmp>
   28490:	2800      	cmp	r0, #0
   28492:	d040      	beq.n	28516 <find_type_cb+0x182>
   28494:	e794      	b.n	283c0 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   28496:	4658      	mov	r0, fp
   28498:	f012 fb58 	bl	3ab4c <net_buf_simple_tailroom>
   2849c:	e7da      	b.n	28454 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   2849e:	686b      	ldr	r3, [r5, #4]
   284a0:	7998      	ldrb	r0, [r3, #6]
   284a2:	f004 fc2d 	bl	2cd00 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   284a6:	2200      	movs	r2, #0
   284a8:	2300      	movs	r3, #0
   284aa:	f012 fa7f 	bl	3a9ac <net_buf_alloc_fixed>
		if (!frag) {
   284ae:	4604      	mov	r4, r0
   284b0:	2800      	cmp	r0, #0
   284b2:	d088      	beq.n	283c6 <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   284b4:	4601      	mov	r1, r0
   284b6:	6868      	ldr	r0, [r5, #4]
   284b8:	f012 faec 	bl	3aa94 <net_buf_frag_add>
   284bc:	e7cb      	b.n	28456 <find_type_cb+0xc2>
   284be:	4b1c      	ldr	r3, [pc, #112]	; (28530 <find_type_cb+0x19c>)
   284c0:	4a1c      	ldr	r2, [pc, #112]	; (28534 <find_type_cb+0x1a0>)
   284c2:	1a9b      	subs	r3, r3, r2
   284c4:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   284c6:	f04f 0200 	mov.w	r2, #0
   284ca:	2102      	movs	r1, #2
   284cc:	f361 0202 	bfi	r2, r1, #0, #3
   284d0:	f36f 02c5 	bfc	r2, #3, #3
   284d4:	f363 128f 	bfi	r2, r3, #6, #10
   284d8:	7c29      	ldrb	r1, [r5, #16]
   284da:	4817      	ldr	r0, [pc, #92]	; (28538 <find_type_cb+0x1a4>)
   284dc:	f7f7 fee4 	bl	202a8 <log_1>
			goto skip;
   284e0:	e76e      	b.n	283c0 <find_type_cb+0x2c>
   284e2:	4b13      	ldr	r3, [pc, #76]	; (28530 <find_type_cb+0x19c>)
   284e4:	4a13      	ldr	r2, [pc, #76]	; (28534 <find_type_cb+0x1a0>)
   284e6:	1a9b      	subs	r3, r3, r2
   284e8:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   284ea:	f04f 0200 	mov.w	r2, #0
   284ee:	2102      	movs	r1, #2
   284f0:	f361 0202 	bfi	r2, r1, #0, #3
   284f4:	f36f 02c5 	bfc	r2, #3, #3
   284f8:	f363 128f 	bfi	r2, r3, #6, #10
   284fc:	4631      	mov	r1, r6
   284fe:	480f      	ldr	r0, [pc, #60]	; (2853c <find_type_cb+0x1a8>)
   28500:	f7f7 fed2 	bl	202a8 <log_1>
			goto skip;
   28504:	e75c      	b.n	283c0 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   28506:	4632      	mov	r2, r6
   28508:	a90c      	add	r1, sp, #48	; 0x30
   2850a:	68e8      	ldr	r0, [r5, #12]
   2850c:	f00e fbfd 	bl	36d0a <memcmp>
   28510:	2800      	cmp	r0, #0
   28512:	f47f af55 	bne.w	283c0 <find_type_cb+0x2c>
	data->err = 0x00;
   28516:	2300      	movs	r3, #0
   28518:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   2851a:	2104      	movs	r1, #4
   2851c:	f104 0008 	add.w	r0, r4, #8
   28520:	f012 fac7 	bl	3aab2 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   28524:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   28526:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   28528:	68ab      	ldr	r3, [r5, #8]
   2852a:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   2852c:	2001      	movs	r0, #1
   2852e:	e74a      	b.n	283c6 <find_type_cb+0x32>
   28530:	0003d1b4 	.word	0x0003d1b4
   28534:	0003d1a4 	.word	0x0003d1a4
   28538:	0003fb90 	.word	0x0003fb90
   2853c:	0003fbb0 	.word	0x0003fbb0

00028540 <bt_att_connected>:
{
   28540:	b538      	push	{r3, r4, r5, lr}
   28542:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   28544:	4605      	mov	r5, r0
   28546:	f855 0908 	ldr.w	r0, [r5], #-8
   2854a:	f010 f830 	bl	385ae <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   2854e:	4629      	mov	r1, r5
   28550:	6800      	ldr	r0, [r0, #0]
   28552:	f00f fcdc 	bl	37f0e <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28556:	f3bf 8f5b 	dmb	ish
   2855a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   2855e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   28562:	f013 0f08 	tst.w	r3, #8
   28566:	d104      	bne.n	28572 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   28568:	2317      	movs	r3, #23
   2856a:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2856e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   28572:	4628      	mov	r0, r5
   28574:	f00f fe59 	bl	3822a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   28578:	4902      	ldr	r1, [pc, #8]	; (28584 <bt_att_connected+0x44>)
   2857a:	f504 7084 	add.w	r0, r4, #264	; 0x108
   2857e:	f013 ffe5 	bl	3c54c <k_work_init_delayable>
}
   28582:	bd38      	pop	{r3, r4, r5, pc}
   28584:	00028f45 	.word	0x00028f45

00028588 <bt_att_chan_create_pdu>:
{
   28588:	b538      	push	{r3, r4, r5, lr}
   2858a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2858c:	3201      	adds	r2, #1
   2858e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   28592:	428a      	cmp	r2, r1
   28594:	d810      	bhi.n	285b8 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   28596:	4628      	mov	r0, r5
   28598:	f00f fc38 	bl	37e0c <att_op_get_type>
   2859c:	2802      	cmp	r0, #2
   2859e:	d01d      	beq.n	285dc <bt_att_chan_create_pdu+0x54>
   285a0:	2804      	cmp	r0, #4
   285a2:	d01b      	beq.n	285dc <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   285a4:	f04f 32ff 	mov.w	r2, #4294967295
   285a8:	f04f 33ff 	mov.w	r3, #4294967295
   285ac:	2100      	movs	r1, #0
   285ae:	4608      	mov	r0, r1
   285b0:	f00f fb48 	bl	37c44 <bt_l2cap_create_pdu_timeout>
   285b4:	4604      	mov	r4, r0
   285b6:	e019      	b.n	285ec <bt_att_chan_create_pdu+0x64>
   285b8:	481a      	ldr	r0, [pc, #104]	; (28624 <bt_att_chan_create_pdu+0x9c>)
   285ba:	4b1b      	ldr	r3, [pc, #108]	; (28628 <bt_att_chan_create_pdu+0xa0>)
   285bc:	1ac0      	subs	r0, r0, r3
   285be:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   285c0:	f04f 0300 	mov.w	r3, #0
   285c4:	2402      	movs	r4, #2
   285c6:	f364 0302 	bfi	r3, r4, #0, #3
   285ca:	f36f 03c5 	bfc	r3, #3, #3
   285ce:	f360 138f 	bfi	r3, r0, #6, #10
   285d2:	4816      	ldr	r0, [pc, #88]	; (2862c <bt_att_chan_create_pdu+0xa4>)
   285d4:	f7f7 fe9e 	bl	20314 <log_2>
		return NULL;
   285d8:	2400      	movs	r4, #0
   285da:	e00e      	b.n	285fa <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   285dc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   285e0:	2300      	movs	r3, #0
   285e2:	2100      	movs	r1, #0
   285e4:	4608      	mov	r0, r1
   285e6:	f00f fb2d 	bl	37c44 <bt_l2cap_create_pdu_timeout>
   285ea:	4604      	mov	r4, r0
	if (!buf) {
   285ec:	b13c      	cbz	r4, 285fe <bt_att_chan_create_pdu+0x76>
   285ee:	2101      	movs	r1, #1
   285f0:	f104 0008 	add.w	r0, r4, #8
   285f4:	f012 fa5d 	bl	3aab2 <net_buf_simple_add>
	hdr->code = op;
   285f8:	7005      	strb	r5, [r0, #0]
}
   285fa:	4620      	mov	r0, r4
   285fc:	bd38      	pop	{r3, r4, r5, pc}
   285fe:	4b09      	ldr	r3, [pc, #36]	; (28624 <bt_att_chan_create_pdu+0x9c>)
   28600:	4a09      	ldr	r2, [pc, #36]	; (28628 <bt_att_chan_create_pdu+0xa0>)
   28602:	1a9b      	subs	r3, r3, r2
   28604:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   28606:	f04f 0200 	mov.w	r2, #0
   2860a:	2101      	movs	r1, #1
   2860c:	f361 0202 	bfi	r2, r1, #0, #3
   28610:	f36f 02c5 	bfc	r2, #3, #3
   28614:	f363 128f 	bfi	r2, r3, #6, #10
   28618:	4629      	mov	r1, r5
   2861a:	4805      	ldr	r0, [pc, #20]	; (28630 <bt_att_chan_create_pdu+0xa8>)
   2861c:	f7f7 fe44 	bl	202a8 <log_1>
		return NULL;
   28620:	e7eb      	b.n	285fa <bt_att_chan_create_pdu+0x72>
   28622:	bf00      	nop
   28624:	0003d1b4 	.word	0x0003d1b4
   28628:	0003d1a4 	.word	0x0003d1a4
   2862c:	0003fbd0 	.word	0x0003fbd0
   28630:	0003f964 	.word	0x0003f964

00028634 <att_indicate>:
{
   28634:	b570      	push	{r4, r5, r6, lr}
   28636:	4605      	mov	r5, r0
   28638:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2863a:	f101 0008 	add.w	r0, r1, #8
   2863e:	f012 fa79 	bl	3ab34 <net_buf_simple_pull_le16>
   28642:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   28644:	682e      	ldr	r6, [r5, #0]
   28646:	89a3      	ldrh	r3, [r4, #12]
   28648:	68a2      	ldr	r2, [r4, #8]
   2864a:	6830      	ldr	r0, [r6, #0]
   2864c:	f011 f952 	bl	398f4 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   28650:	2200      	movs	r2, #0
   28652:	211e      	movs	r1, #30
   28654:	4628      	mov	r0, r5
   28656:	f7ff ff97 	bl	28588 <bt_att_chan_create_pdu>
	if (!buf) {
   2865a:	b120      	cbz	r0, 28666 <att_indicate+0x32>
   2865c:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   2865e:	4a03      	ldr	r2, [pc, #12]	; (2866c <att_indicate+0x38>)
   28660:	4628      	mov	r0, r5
   28662:	f00f fdd5 	bl	38210 <bt_att_chan_send_rsp>
}
   28666:	2000      	movs	r0, #0
   28668:	bd70      	pop	{r4, r5, r6, pc}
   2866a:	bf00      	nop
   2866c:	00038075 	.word	0x00038075

00028670 <send_err_rsp>:
	if (!req) {
   28670:	b901      	cbnz	r1, 28674 <send_err_rsp+0x4>
   28672:	4770      	bx	lr
{
   28674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28678:	4606      	mov	r6, r0
   2867a:	4615      	mov	r5, r2
   2867c:	461c      	mov	r4, r3
   2867e:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   28680:	2204      	movs	r2, #4
   28682:	2101      	movs	r1, #1
   28684:	f7ff ff80 	bl	28588 <bt_att_chan_create_pdu>
	if (!buf) {
   28688:	4680      	mov	r8, r0
   2868a:	b160      	cbz	r0, 286a6 <send_err_rsp+0x36>
	return net_buf_simple_add(&buf->b, len);
   2868c:	2104      	movs	r1, #4
   2868e:	3008      	adds	r0, #8
   28690:	f012 fa0f 	bl	3aab2 <net_buf_simple_add>
	rsp->request = req;
   28694:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   28696:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   2869a:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2869c:	4a03      	ldr	r2, [pc, #12]	; (286ac <send_err_rsp+0x3c>)
   2869e:	4641      	mov	r1, r8
   286a0:	4630      	mov	r0, r6
   286a2:	f00f fdb5 	bl	38210 <bt_att_chan_send_rsp>
}
   286a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   286aa:	bf00      	nop
   286ac:	00038091 	.word	0x00038091

000286b0 <bt_att_recv>:
{
   286b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   286b4:	898b      	ldrh	r3, [r1, #12]
   286b6:	b1bb      	cbz	r3, 286e8 <bt_att_recv+0x38>
   286b8:	4607      	mov	r7, r0
   286ba:	460e      	mov	r6, r1
   286bc:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   286c0:	2101      	movs	r1, #1
   286c2:	f106 0008 	add.w	r0, r6, #8
   286c6:	f012 fa25 	bl	3ab14 <net_buf_simple_pull_mem>
   286ca:	4605      	mov	r5, r0
	if (!att_chan->att) {
   286cc:	f857 3c08 	ldr.w	r3, [r7, #-8]
   286d0:	b1d3      	cbz	r3, 28708 <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   286d2:	2300      	movs	r3, #0
   286d4:	2b1b      	cmp	r3, #27
   286d6:	d838      	bhi.n	2874a <bt_att_recv+0x9a>
		if (hdr->code == handlers[i].op) {
   286d8:	782c      	ldrb	r4, [r5, #0]
   286da:	4a58      	ldr	r2, [pc, #352]	; (2883c <bt_att_recv+0x18c>)
   286dc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   286e0:	4294      	cmp	r4, r2
   286e2:	d014      	beq.n	2870e <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   286e4:	3301      	adds	r3, #1
   286e6:	e7f5      	b.n	286d4 <bt_att_recv+0x24>
   286e8:	4b55      	ldr	r3, [pc, #340]	; (28840 <bt_att_recv+0x190>)
   286ea:	4a56      	ldr	r2, [pc, #344]	; (28844 <bt_att_recv+0x194>)
   286ec:	1a9b      	subs	r3, r3, r2
   286ee:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   286f0:	f04f 0100 	mov.w	r1, #0
   286f4:	2201      	movs	r2, #1
   286f6:	f362 0102 	bfi	r1, r2, #0, #3
   286fa:	f36f 01c5 	bfc	r1, #3, #3
   286fe:	f363 118f 	bfi	r1, r3, #6, #10
   28702:	4851      	ldr	r0, [pc, #324]	; (28848 <bt_att_recv+0x198>)
   28704:	f7f7 fe86 	bl	20414 <log_0>
}
   28708:	2000      	movs	r0, #0
   2870a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   2870e:	4c4b      	ldr	r4, [pc, #300]	; (2883c <bt_att_recv+0x18c>)
   28710:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
   28714:	b1dc      	cbz	r4, 2874e <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   28716:	78a3      	ldrb	r3, [r4, #2]
   28718:	2b01      	cmp	r3, #1
   2871a:	d038      	beq.n	2878e <bt_att_recv+0xde>
		} else if (handler->type == ATT_INDICATION &&
   2871c:	78a3      	ldrb	r3, [r4, #2]
   2871e:	2b05      	cmp	r3, #5
   28720:	d057      	beq.n	287d2 <bt_att_recv+0x122>
	if (buf->len < handler->expect_len) {
   28722:	89b1      	ldrh	r1, [r6, #12]
   28724:	7863      	ldrb	r3, [r4, #1]
   28726:	4299      	cmp	r1, r3
   28728:	d374      	bcc.n	28814 <bt_att_recv+0x164>
		err = handler->func(att_chan, buf);
   2872a:	6863      	ldr	r3, [r4, #4]
   2872c:	4631      	mov	r1, r6
   2872e:	4640      	mov	r0, r8
   28730:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   28732:	78a3      	ldrb	r3, [r4, #2]
   28734:	2b01      	cmp	r3, #1
   28736:	d1e7      	bne.n	28708 <bt_att_recv+0x58>
   28738:	2800      	cmp	r0, #0
   2873a:	d0e5      	beq.n	28708 <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   2873c:	4603      	mov	r3, r0
   2873e:	2200      	movs	r2, #0
   28740:	7829      	ldrb	r1, [r5, #0]
   28742:	4640      	mov	r0, r8
   28744:	f7ff ff94 	bl	28670 <send_err_rsp>
   28748:	e7de      	b.n	28708 <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2874a:	2400      	movs	r4, #0
   2874c:	e7e2      	b.n	28714 <bt_att_recv+0x64>
   2874e:	4b3c      	ldr	r3, [pc, #240]	; (28840 <bt_att_recv+0x190>)
   28750:	4a3c      	ldr	r2, [pc, #240]	; (28844 <bt_att_recv+0x194>)
   28752:	1a9b      	subs	r3, r3, r2
   28754:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   28756:	f04f 0200 	mov.w	r2, #0
   2875a:	2102      	movs	r1, #2
   2875c:	f361 0202 	bfi	r2, r1, #0, #3
   28760:	f36f 02c5 	bfc	r2, #3, #3
   28764:	f363 128f 	bfi	r2, r3, #6, #10
   28768:	7829      	ldrb	r1, [r5, #0]
   2876a:	4838      	ldr	r0, [pc, #224]	; (2884c <bt_att_recv+0x19c>)
   2876c:	f7f7 fd9c 	bl	202a8 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   28770:	782c      	ldrb	r4, [r5, #0]
   28772:	4620      	mov	r0, r4
   28774:	f00f fb4a 	bl	37e0c <att_op_get_type>
   28778:	2800      	cmp	r0, #0
   2877a:	d0c5      	beq.n	28708 <bt_att_recv+0x58>
   2877c:	2805      	cmp	r0, #5
   2877e:	d0c3      	beq.n	28708 <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   28780:	2306      	movs	r3, #6
   28782:	2200      	movs	r2, #0
   28784:	4621      	mov	r1, r4
   28786:	4640      	mov	r0, r8
   28788:	f7ff ff72 	bl	28670 <send_err_rsp>
		return 0;
   2878c:	e7bc      	b.n	28708 <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   2878e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28792:	f3bf 8f5b 	dmb	ish
   28796:	e853 2f00 	ldrex	r2, [r3]
   2879a:	f042 0101 	orr.w	r1, r2, #1
   2879e:	e843 1000 	strex	r0, r1, [r3]
   287a2:	2800      	cmp	r0, #0
   287a4:	d1f7      	bne.n	28796 <bt_att_recv+0xe6>
   287a6:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   287aa:	f012 0f01 	tst.w	r2, #1
   287ae:	d0b5      	beq.n	2871c <bt_att_recv+0x6c>
   287b0:	4b23      	ldr	r3, [pc, #140]	; (28840 <bt_att_recv+0x190>)
   287b2:	4a24      	ldr	r2, [pc, #144]	; (28844 <bt_att_recv+0x194>)
   287b4:	1a9b      	subs	r3, r3, r2
   287b6:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   287b8:	f04f 0100 	mov.w	r1, #0
   287bc:	2202      	movs	r2, #2
   287be:	f362 0102 	bfi	r1, r2, #0, #3
   287c2:	f36f 01c5 	bfc	r1, #3, #3
   287c6:	f363 118f 	bfi	r1, r3, #6, #10
   287ca:	4821      	ldr	r0, [pc, #132]	; (28850 <bt_att_recv+0x1a0>)
   287cc:	f7f7 fe22 	bl	20414 <log_0>
			return 0;
   287d0:	e79a      	b.n	28708 <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   287d2:	37e8      	adds	r7, #232	; 0xe8
   287d4:	f3bf 8f5b 	dmb	ish
   287d8:	e857 3f00 	ldrex	r3, [r7]
   287dc:	f043 0202 	orr.w	r2, r3, #2
   287e0:	e847 2100 	strex	r1, r2, [r7]
   287e4:	2900      	cmp	r1, #0
   287e6:	d1f7      	bne.n	287d8 <bt_att_recv+0x128>
   287e8:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   287ec:	f013 0f02 	tst.w	r3, #2
   287f0:	d097      	beq.n	28722 <bt_att_recv+0x72>
   287f2:	4b13      	ldr	r3, [pc, #76]	; (28840 <bt_att_recv+0x190>)
   287f4:	4a13      	ldr	r2, [pc, #76]	; (28844 <bt_att_recv+0x194>)
   287f6:	1a9b      	subs	r3, r3, r2
   287f8:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   287fa:	f04f 0100 	mov.w	r1, #0
   287fe:	2202      	movs	r2, #2
   28800:	f362 0102 	bfi	r1, r2, #0, #3
   28804:	f36f 01c5 	bfc	r1, #3, #3
   28808:	f363 118f 	bfi	r1, r3, #6, #10
   2880c:	4811      	ldr	r0, [pc, #68]	; (28854 <bt_att_recv+0x1a4>)
   2880e:	f7f7 fe01 	bl	20414 <log_0>
			return 0;
   28812:	e779      	b.n	28708 <bt_att_recv+0x58>
   28814:	4a0a      	ldr	r2, [pc, #40]	; (28840 <bt_att_recv+0x190>)
   28816:	4b0b      	ldr	r3, [pc, #44]	; (28844 <bt_att_recv+0x194>)
   28818:	1ad2      	subs	r2, r2, r3
   2881a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   2881c:	f04f 0300 	mov.w	r3, #0
   28820:	2001      	movs	r0, #1
   28822:	f360 0302 	bfi	r3, r0, #0, #3
   28826:	f36f 03c5 	bfc	r3, #3, #3
   2882a:	f362 138f 	bfi	r3, r2, #6, #10
   2882e:	782a      	ldrb	r2, [r5, #0]
   28830:	4809      	ldr	r0, [pc, #36]	; (28858 <bt_att_recv+0x1a8>)
   28832:	f7f7 fd6f 	bl	20314 <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   28836:	2004      	movs	r0, #4
   28838:	e77b      	b.n	28732 <bt_att_recv+0x82>
   2883a:	bf00      	nop
   2883c:	0003fcd4 	.word	0x0003fcd4
   28840:	0003d1b4 	.word	0x0003d1b4
   28844:	0003d1a4 	.word	0x0003d1a4
   28848:	0003fbf8 	.word	0x0003fbf8
   2884c:	0003fc14 	.word	0x0003fc14
   28850:	0003fc30 	.word	0x0003fc30
   28854:	0003fc4c 	.word	0x0003fc4c
   28858:	0003fc6c 	.word	0x0003fc6c

0002885c <att_write_rsp>:
{
   2885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28860:	b08a      	sub	sp, #40	; 0x28
   28862:	4604      	mov	r4, r0
   28864:	4617      	mov	r7, r2
   28866:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   28868:	6803      	ldr	r3, [r0, #0]
   2886a:	4688      	mov	r8, r1
   2886c:	3900      	subs	r1, #0
   2886e:	bf18      	it	ne
   28870:	2101      	movne	r1, #1
   28872:	6818      	ldr	r0, [r3, #0]
   28874:	f011 f874 	bl	39960 <bt_gatt_change_aware>
   28878:	2800      	cmp	r0, #0
   2887a:	d04f      	beq.n	2891c <att_write_rsp+0xc0>
	if (!handle) {
   2887c:	b925      	cbnz	r5, 28888 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   2887e:	2601      	movs	r6, #1
}
   28880:	4630      	mov	r0, r6
   28882:	b00a      	add	sp, #40	; 0x28
   28884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   28888:	2218      	movs	r2, #24
   2888a:	2100      	movs	r1, #0
   2888c:	a804      	add	r0, sp, #16
   2888e:	f00e fa8d 	bl	36dac <memset>
	if (rsp) {
   28892:	b13f      	cbz	r7, 288a4 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   28894:	2200      	movs	r2, #0
   28896:	4639      	mov	r1, r7
   28898:	4620      	mov	r0, r4
   2889a:	f7ff fe75 	bl	28588 <bt_att_chan_create_pdu>
   2889e:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   288a0:	2800      	cmp	r0, #0
   288a2:	d03d      	beq.n	28920 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
   288a4:	6823      	ldr	r3, [r4, #0]
   288a6:	681b      	ldr	r3, [r3, #0]
   288a8:	9304      	str	r3, [sp, #16]
	data.req = req;
   288aa:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   288ae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   288b2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   288b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   288b8:	9307      	str	r3, [sp, #28]
	data.len = len;
   288ba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   288be:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   288c2:	2301      	movs	r3, #1
   288c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   288c8:	ab04      	add	r3, sp, #16
   288ca:	9302      	str	r3, [sp, #8]
   288cc:	4b15      	ldr	r3, [pc, #84]	; (28924 <att_write_rsp+0xc8>)
   288ce:	9301      	str	r3, [sp, #4]
   288d0:	2200      	movs	r2, #0
   288d2:	9200      	str	r2, [sp, #0]
   288d4:	4613      	mov	r3, r2
   288d6:	4629      	mov	r1, r5
   288d8:	4628      	mov	r0, r5
   288da:	f001 f927 	bl	29b2c <bt_gatt_foreach_attr_type>
	if (data.err) {
   288de:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   288e2:	b93e      	cbnz	r6, 288f4 <att_write_rsp+0x98>
	if (data.buf) {
   288e4:	9905      	ldr	r1, [sp, #20]
   288e6:	2900      	cmp	r1, #0
   288e8:	d0ca      	beq.n	28880 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   288ea:	4a0f      	ldr	r2, [pc, #60]	; (28928 <att_write_rsp+0xcc>)
   288ec:	4620      	mov	r0, r4
   288ee:	f00f fc8f 	bl	38210 <bt_att_chan_send_rsp>
   288f2:	e7c5      	b.n	28880 <att_write_rsp+0x24>
		if (rsp) {
   288f4:	b927      	cbnz	r7, 28900 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   288f6:	f1b8 0f18 	cmp.w	r8, #24
   288fa:	d00c      	beq.n	28916 <att_write_rsp+0xba>
   288fc:	2600      	movs	r6, #0
   288fe:	e7bf      	b.n	28880 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   28900:	9805      	ldr	r0, [sp, #20]
   28902:	f012 f88c 	bl	3aa1e <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   28906:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   2890a:	462a      	mov	r2, r5
   2890c:	4641      	mov	r1, r8
   2890e:	4620      	mov	r0, r4
   28910:	f7ff feae 	bl	28670 <send_err_rsp>
   28914:	e7ef      	b.n	288f6 <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   28916:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   2891a:	e7b1      	b.n	28880 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2891c:	2612      	movs	r6, #18
   2891e:	e7af      	b.n	28880 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   28920:	260e      	movs	r6, #14
   28922:	e7ad      	b.n	28880 <att_write_rsp+0x24>
   28924:	000382fb 	.word	0x000382fb
   28928:	00038091 	.word	0x00038091

0002892c <bt_att_create_pdu>:
{
   2892c:	b570      	push	{r4, r5, r6, lr}
   2892e:	460e      	mov	r6, r1
   28930:	4615      	mov	r5, r2
	att = att_get(conn);
   28932:	f7ff fb13 	bl	27f5c <att_get>
	if (!att) {
   28936:	4604      	mov	r4, r0
   28938:	b340      	cbz	r0, 2898c <bt_att_create_pdu+0x60>
	return list->head;
   2893a:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2893c:	b344      	cbz	r4, 28990 <bt_att_create_pdu+0x64>
   2893e:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   28942:	d027      	beq.n	28994 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28944:	f514 70a2 	adds.w	r0, r4, #324	; 0x144
   28948:	d008      	beq.n	2895c <bt_att_create_pdu+0x30>
	return node->next;
   2894a:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   2894e:	b128      	cbz	r0, 2895c <bt_att_create_pdu+0x30>
   28950:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   28954:	e002      	b.n	2895c <bt_att_create_pdu+0x30>
   28956:	4603      	mov	r3, r0
   28958:	4604      	mov	r4, r0
   2895a:	4618      	mov	r0, r3
   2895c:	b1e4      	cbz	r4, 28998 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2895e:	1c6b      	adds	r3, r5, #1
   28960:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   28964:	4293      	cmp	r3, r2
   28966:	d90b      	bls.n	28980 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28968:	2800      	cmp	r0, #0
   2896a:	d0f4      	beq.n	28956 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2896c:	f510 73a2 	adds.w	r3, r0, #324	; 0x144
   28970:	d0f2      	beq.n	28958 <bt_att_create_pdu+0x2c>
	return node->next;
   28972:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   28976:	2b00      	cmp	r3, #0
   28978:	d0ee      	beq.n	28958 <bt_att_create_pdu+0x2c>
   2897a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   2897e:	e7eb      	b.n	28958 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   28980:	462a      	mov	r2, r5
   28982:	4631      	mov	r1, r6
   28984:	4620      	mov	r0, r4
   28986:	f7ff fdff 	bl	28588 <bt_att_chan_create_pdu>
   2898a:	4604      	mov	r4, r0
}
   2898c:	4620      	mov	r0, r4
   2898e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28990:	4620      	mov	r0, r4
   28992:	e7e3      	b.n	2895c <bt_att_create_pdu+0x30>
   28994:	4620      	mov	r0, r4
   28996:	e7e1      	b.n	2895c <bt_att_create_pdu+0x30>
   28998:	4b08      	ldr	r3, [pc, #32]	; (289bc <bt_att_create_pdu+0x90>)
   2899a:	4a09      	ldr	r2, [pc, #36]	; (289c0 <bt_att_create_pdu+0x94>)
   2899c:	1a9b      	subs	r3, r3, r2
   2899e:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   289a0:	f04f 0200 	mov.w	r2, #0
   289a4:	2102      	movs	r1, #2
   289a6:	f361 0202 	bfi	r2, r1, #0, #3
   289aa:	f36f 02c5 	bfc	r2, #3, #3
   289ae:	f363 128f 	bfi	r2, r3, #6, #10
   289b2:	1c69      	adds	r1, r5, #1
   289b4:	4803      	ldr	r0, [pc, #12]	; (289c4 <bt_att_create_pdu+0x98>)
   289b6:	f7f7 fc77 	bl	202a8 <log_1>
	return NULL;
   289ba:	e7e7      	b.n	2898c <bt_att_create_pdu+0x60>
   289bc:	0003d1b4 	.word	0x0003d1b4
   289c0:	0003d1a4 	.word	0x0003d1a4
   289c4:	0003fc8c 	.word	0x0003fc8c

000289c8 <att_read_group_rsp>:
{
   289c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   289cc:	b08a      	sub	sp, #40	; 0x28
   289ce:	4604      	mov	r4, r0
   289d0:	460f      	mov	r7, r1
   289d2:	4615      	mov	r5, r2
   289d4:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   289d6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   289da:	2214      	movs	r2, #20
   289dc:	2100      	movs	r1, #0
   289de:	eb0d 0002 	add.w	r0, sp, r2
   289e2:	f00e f9e3 	bl	36dac <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   289e6:	2201      	movs	r2, #1
   289e8:	2111      	movs	r1, #17
   289ea:	4640      	mov	r0, r8
   289ec:	f7ff ff9e 	bl	2892c <bt_att_create_pdu>
   289f0:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   289f2:	b350      	cbz	r0, 28a4a <att_read_group_rsp+0x82>
	data.chan = chan;
   289f4:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   289f6:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   289f8:	2101      	movs	r1, #1
   289fa:	3008      	adds	r0, #8
   289fc:	f012 f859 	bl	3aab2 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   28a00:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   28a02:	2200      	movs	r2, #0
   28a04:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   28a06:	9209      	str	r2, [sp, #36]	; 0x24
   28a08:	ab05      	add	r3, sp, #20
   28a0a:	9302      	str	r3, [sp, #8]
   28a0c:	4b10      	ldr	r3, [pc, #64]	; (28a50 <att_read_group_rsp+0x88>)
   28a0e:	9301      	str	r3, [sp, #4]
   28a10:	9200      	str	r2, [sp, #0]
   28a12:	4613      	mov	r3, r2
   28a14:	4631      	mov	r1, r6
   28a16:	4628      	mov	r0, r5
   28a18:	f001 f888 	bl	29b2c <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   28a1c:	9b08      	ldr	r3, [sp, #32]
   28a1e:	781e      	ldrb	r6, [r3, #0]
   28a20:	b14e      	cbz	r6, 28a36 <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   28a22:	4a0c      	ldr	r2, [pc, #48]	; (28a54 <att_read_group_rsp+0x8c>)
   28a24:	9907      	ldr	r1, [sp, #28]
   28a26:	4620      	mov	r0, r4
   28a28:	f00f fbf2 	bl	38210 <bt_att_chan_send_rsp>
	return 0;
   28a2c:	2600      	movs	r6, #0
}
   28a2e:	4630      	mov	r0, r6
   28a30:	b00a      	add	sp, #40	; 0x28
   28a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   28a36:	9807      	ldr	r0, [sp, #28]
   28a38:	f011 fff1 	bl	3aa1e <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   28a3c:	230a      	movs	r3, #10
   28a3e:	462a      	mov	r2, r5
   28a40:	2110      	movs	r1, #16
   28a42:	4620      	mov	r0, r4
   28a44:	f7ff fe14 	bl	28670 <send_err_rsp>
		return 0;
   28a48:	e7f1      	b.n	28a2e <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   28a4a:	260e      	movs	r6, #14
   28a4c:	e7ef      	b.n	28a2e <att_read_group_rsp+0x66>
   28a4e:	bf00      	nop
   28a50:	00028235 	.word	0x00028235
   28a54:	00038091 	.word	0x00038091

00028a58 <att_read_mult_req>:
{
   28a58:	b570      	push	{r4, r5, r6, lr}
   28a5a:	b088      	sub	sp, #32
   28a5c:	4606      	mov	r6, r0
   28a5e:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   28a60:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   28a62:	2101      	movs	r1, #1
   28a64:	4620      	mov	r0, r4
   28a66:	f010 ff7b 	bl	39960 <bt_gatt_change_aware>
   28a6a:	2800      	cmp	r0, #0
   28a6c:	d039      	beq.n	28ae2 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   28a6e:	2210      	movs	r2, #16
   28a70:	2100      	movs	r1, #0
   28a72:	eb0d 0002 	add.w	r0, sp, r2
   28a76:	f00e f999 	bl	36dac <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   28a7a:	2200      	movs	r2, #0
   28a7c:	210f      	movs	r1, #15
   28a7e:	4620      	mov	r0, r4
   28a80:	f7ff ff54 	bl	2892c <bt_att_create_pdu>
   28a84:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   28a86:	b378      	cbz	r0, 28ae8 <att_read_mult_req+0x90>
	data.chan = chan;
   28a88:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   28a8a:	89ab      	ldrh	r3, [r5, #12]
   28a8c:	2b01      	cmp	r3, #1
   28a8e:	d921      	bls.n	28ad4 <att_read_mult_req+0x7c>
	return net_buf_simple_pull_le16(&buf->b);
   28a90:	f105 0008 	add.w	r0, r5, #8
   28a94:	f012 f84e 	bl	3ab34 <net_buf_simple_pull_le16>
   28a98:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   28a9a:	2301      	movs	r3, #1
   28a9c:	f88d 301c 	strb.w	r3, [sp, #28]
   28aa0:	ab04      	add	r3, sp, #16
   28aa2:	9302      	str	r3, [sp, #8]
   28aa4:	4b11      	ldr	r3, [pc, #68]	; (28aec <att_read_mult_req+0x94>)
   28aa6:	9301      	str	r3, [sp, #4]
   28aa8:	2200      	movs	r2, #0
   28aaa:	9200      	str	r2, [sp, #0]
   28aac:	4613      	mov	r3, r2
   28aae:	4601      	mov	r1, r0
   28ab0:	f001 f83c 	bl	29b2c <bt_gatt_foreach_attr_type>
		if (data.err) {
   28ab4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   28ab8:	2b00      	cmp	r3, #0
   28aba:	d0e6      	beq.n	28a8a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   28abc:	9806      	ldr	r0, [sp, #24]
   28abe:	f011 ffae 	bl	3aa1e <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   28ac2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   28ac6:	4622      	mov	r2, r4
   28ac8:	210e      	movs	r1, #14
   28aca:	4630      	mov	r0, r6
   28acc:	f7ff fdd0 	bl	28670 <send_err_rsp>
			return 0;
   28ad0:	2000      	movs	r0, #0
   28ad2:	e007      	b.n	28ae4 <att_read_mult_req+0x8c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   28ad4:	4a06      	ldr	r2, [pc, #24]	; (28af0 <att_read_mult_req+0x98>)
   28ad6:	9906      	ldr	r1, [sp, #24]
   28ad8:	4630      	mov	r0, r6
   28ada:	f00f fb99 	bl	38210 <bt_att_chan_send_rsp>
	return 0;
   28ade:	2000      	movs	r0, #0
   28ae0:	e000      	b.n	28ae4 <att_read_mult_req+0x8c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   28ae2:	2012      	movs	r0, #18
}
   28ae4:	b008      	add	sp, #32
   28ae6:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   28ae8:	200e      	movs	r0, #14
   28aea:	e7fb      	b.n	28ae4 <att_read_mult_req+0x8c>
   28aec:	000384af 	.word	0x000384af
   28af0:	00038091 	.word	0x00038091

00028af4 <att_read_rsp>:
{
   28af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28af8:	b088      	sub	sp, #32
   28afa:	4604      	mov	r4, r0
   28afc:	4688      	mov	r8, r1
   28afe:	4616      	mov	r6, r2
   28b00:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   28b02:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   28b04:	2101      	movs	r1, #1
   28b06:	4638      	mov	r0, r7
   28b08:	f010 ff2a 	bl	39960 <bt_gatt_change_aware>
   28b0c:	2800      	cmp	r0, #0
   28b0e:	d03a      	beq.n	28b86 <att_read_rsp+0x92>
	if (!handle) {
   28b10:	b925      	cbnz	r5, 28b1c <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   28b12:	2601      	movs	r6, #1
}
   28b14:	4630      	mov	r0, r6
   28b16:	b008      	add	sp, #32
   28b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   28b1c:	2210      	movs	r2, #16
   28b1e:	2100      	movs	r1, #0
   28b20:	eb0d 0002 	add.w	r0, sp, r2
   28b24:	f00e f942 	bl	36dac <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   28b28:	2200      	movs	r2, #0
   28b2a:	4631      	mov	r1, r6
   28b2c:	4638      	mov	r0, r7
   28b2e:	f7ff fefd 	bl	2892c <bt_att_create_pdu>
   28b32:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   28b34:	b348      	cbz	r0, 28b8a <att_read_rsp+0x96>
	data.chan = chan;
   28b36:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   28b38:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   28b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   28b40:	2301      	movs	r3, #1
   28b42:	f88d 301c 	strb.w	r3, [sp, #28]
   28b46:	ab04      	add	r3, sp, #16
   28b48:	9302      	str	r3, [sp, #8]
   28b4a:	4b11      	ldr	r3, [pc, #68]	; (28b90 <att_read_rsp+0x9c>)
   28b4c:	9301      	str	r3, [sp, #4]
   28b4e:	2200      	movs	r2, #0
   28b50:	9200      	str	r2, [sp, #0]
   28b52:	4613      	mov	r3, r2
   28b54:	4629      	mov	r1, r5
   28b56:	4628      	mov	r0, r5
   28b58:	f000 ffe8 	bl	29b2c <bt_gatt_foreach_attr_type>
	if (data.err) {
   28b5c:	f89d 601c 	ldrb.w	r6, [sp, #28]
   28b60:	b92e      	cbnz	r6, 28b6e <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   28b62:	4a0c      	ldr	r2, [pc, #48]	; (28b94 <att_read_rsp+0xa0>)
   28b64:	9906      	ldr	r1, [sp, #24]
   28b66:	4620      	mov	r0, r4
   28b68:	f00f fb52 	bl	38210 <bt_att_chan_send_rsp>
	return 0;
   28b6c:	e7d2      	b.n	28b14 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   28b6e:	9806      	ldr	r0, [sp, #24]
   28b70:	f011 ff55 	bl	3aa1e <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   28b74:	f89d 301c 	ldrb.w	r3, [sp, #28]
   28b78:	462a      	mov	r2, r5
   28b7a:	4641      	mov	r1, r8
   28b7c:	4620      	mov	r0, r4
   28b7e:	f7ff fd77 	bl	28670 <send_err_rsp>
		return 0;
   28b82:	2600      	movs	r6, #0
   28b84:	e7c6      	b.n	28b14 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   28b86:	2612      	movs	r6, #18
   28b88:	e7c4      	b.n	28b14 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   28b8a:	260e      	movs	r6, #14
   28b8c:	e7c2      	b.n	28b14 <att_read_rsp+0x20>
   28b8e:	bf00      	nop
   28b90:	000384af 	.word	0x000384af
   28b94:	00038091 	.word	0x00038091

00028b98 <att_read_type_rsp>:
{
   28b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b9c:	b08a      	sub	sp, #40	; 0x28
   28b9e:	4604      	mov	r4, r0
   28ba0:	460f      	mov	r7, r1
   28ba2:	4615      	mov	r5, r2
   28ba4:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   28ba6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   28baa:	2218      	movs	r2, #24
   28bac:	2100      	movs	r1, #0
   28bae:	a804      	add	r0, sp, #16
   28bb0:	f00e f8fc 	bl	36dac <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   28bb4:	2201      	movs	r2, #1
   28bb6:	2109      	movs	r1, #9
   28bb8:	4640      	mov	r0, r8
   28bba:	f7ff feb7 	bl	2892c <bt_att_create_pdu>
   28bbe:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   28bc0:	b368      	cbz	r0, 28c1e <att_read_type_rsp+0x86>
	data.chan = chan;
   28bc2:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   28bc4:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   28bc6:	2101      	movs	r1, #1
   28bc8:	3008      	adds	r0, #8
   28bca:	f011 ff72 	bl	3aab2 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   28bce:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   28bd0:	2200      	movs	r2, #0
   28bd2:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   28bd4:	230a      	movs	r3, #10
   28bd6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   28bda:	ab04      	add	r3, sp, #16
   28bdc:	9302      	str	r3, [sp, #8]
   28bde:	4b11      	ldr	r3, [pc, #68]	; (28c24 <att_read_type_rsp+0x8c>)
   28be0:	9301      	str	r3, [sp, #4]
   28be2:	9200      	str	r2, [sp, #0]
   28be4:	4613      	mov	r3, r2
   28be6:	4631      	mov	r1, r6
   28be8:	4628      	mov	r0, r5
   28bea:	f000 ff9f 	bl	29b2c <bt_gatt_foreach_attr_type>
	if (data.err) {
   28bee:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   28bf2:	b946      	cbnz	r6, 28c06 <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   28bf4:	4a0c      	ldr	r2, [pc, #48]	; (28c28 <att_read_type_rsp+0x90>)
   28bf6:	9906      	ldr	r1, [sp, #24]
   28bf8:	4620      	mov	r0, r4
   28bfa:	f00f fb09 	bl	38210 <bt_att_chan_send_rsp>
}
   28bfe:	4630      	mov	r0, r6
   28c00:	b00a      	add	sp, #40	; 0x28
   28c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   28c06:	9806      	ldr	r0, [sp, #24]
   28c08:	f011 ff09 	bl	3aa1e <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   28c0c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   28c10:	462a      	mov	r2, r5
   28c12:	2108      	movs	r1, #8
   28c14:	4620      	mov	r0, r4
   28c16:	f7ff fd2b 	bl	28670 <send_err_rsp>
		return 0;
   28c1a:	2600      	movs	r6, #0
   28c1c:	e7ef      	b.n	28bfe <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   28c1e:	260e      	movs	r6, #14
   28c20:	e7ed      	b.n	28bfe <att_read_type_rsp+0x66>
   28c22:	bf00      	nop
   28c24:	000282e9 	.word	0x000282e9
   28c28:	00038091 	.word	0x00038091

00028c2c <att_find_type_rsp>:
{
   28c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c30:	b08a      	sub	sp, #40	; 0x28
   28c32:	4604      	mov	r4, r0
   28c34:	460d      	mov	r5, r1
   28c36:	4616      	mov	r6, r2
   28c38:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   28c3a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   28c3e:	2214      	movs	r2, #20
   28c40:	2100      	movs	r1, #0
   28c42:	eb0d 0002 	add.w	r0, sp, r2
   28c46:	f00e f8b1 	bl	36dac <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   28c4a:	2200      	movs	r2, #0
   28c4c:	2107      	movs	r1, #7
   28c4e:	4640      	mov	r0, r8
   28c50:	f7ff fe6c 	bl	2892c <bt_att_create_pdu>
   28c54:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   28c56:	b360      	cbz	r0, 28cb2 <att_find_type_rsp+0x86>
	data.chan = chan;
   28c58:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   28c5a:	2200      	movs	r2, #0
   28c5c:	9207      	str	r2, [sp, #28]
	data.value = value;
   28c5e:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   28c60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   28c64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   28c68:	230a      	movs	r3, #10
   28c6a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   28c6e:	ab05      	add	r3, sp, #20
   28c70:	9302      	str	r3, [sp, #8]
   28c72:	4b11      	ldr	r3, [pc, #68]	; (28cb8 <att_find_type_rsp+0x8c>)
   28c74:	9301      	str	r3, [sp, #4]
   28c76:	9200      	str	r2, [sp, #0]
   28c78:	4613      	mov	r3, r2
   28c7a:	4631      	mov	r1, r6
   28c7c:	4628      	mov	r0, r5
   28c7e:	f000 ff55 	bl	29b2c <bt_gatt_foreach_attr_type>
	if (data.err) {
   28c82:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   28c86:	b946      	cbnz	r6, 28c9a <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   28c88:	4a0c      	ldr	r2, [pc, #48]	; (28cbc <att_find_type_rsp+0x90>)
   28c8a:	9906      	ldr	r1, [sp, #24]
   28c8c:	4620      	mov	r0, r4
   28c8e:	f00f fabf 	bl	38210 <bt_att_chan_send_rsp>
}
   28c92:	4630      	mov	r0, r6
   28c94:	b00a      	add	sp, #40	; 0x28
   28c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   28c9a:	9806      	ldr	r0, [sp, #24]
   28c9c:	f011 febf 	bl	3aa1e <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   28ca0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   28ca4:	462a      	mov	r2, r5
   28ca6:	2106      	movs	r1, #6
   28ca8:	4620      	mov	r0, r4
   28caa:	f7ff fce1 	bl	28670 <send_err_rsp>
		return 0;
   28cae:	2600      	movs	r6, #0
   28cb0:	e7ef      	b.n	28c92 <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   28cb2:	260e      	movs	r6, #14
   28cb4:	e7ed      	b.n	28c92 <att_find_type_rsp+0x66>
   28cb6:	bf00      	nop
   28cb8:	00028395 	.word	0x00028395
   28cbc:	00038091 	.word	0x00038091

00028cc0 <att_find_info_rsp>:
{
   28cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   28cc2:	b089      	sub	sp, #36	; 0x24
   28cc4:	4604      	mov	r4, r0
   28cc6:	460f      	mov	r7, r1
   28cc8:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   28cca:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   28ccc:	2210      	movs	r2, #16
   28cce:	2100      	movs	r1, #0
   28cd0:	eb0d 0002 	add.w	r0, sp, r2
   28cd4:	f00e f86a 	bl	36dac <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   28cd8:	2200      	movs	r2, #0
   28cda:	2105      	movs	r1, #5
   28cdc:	4628      	mov	r0, r5
   28cde:	f7ff fe25 	bl	2892c <bt_att_create_pdu>
   28ce2:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   28ce4:	b300      	cbz	r0, 28d28 <att_find_info_rsp+0x68>
	data.chan = chan;
   28ce6:	9404      	str	r4, [sp, #16]
   28ce8:	ab04      	add	r3, sp, #16
   28cea:	9302      	str	r3, [sp, #8]
   28cec:	4b0f      	ldr	r3, [pc, #60]	; (28d2c <att_find_info_rsp+0x6c>)
   28cee:	9301      	str	r3, [sp, #4]
   28cf0:	2200      	movs	r2, #0
   28cf2:	9200      	str	r2, [sp, #0]
   28cf4:	4613      	mov	r3, r2
   28cf6:	4631      	mov	r1, r6
   28cf8:	4638      	mov	r0, r7
   28cfa:	f000 ff17 	bl	29b2c <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   28cfe:	9b06      	ldr	r3, [sp, #24]
   28d00:	b13b      	cbz	r3, 28d12 <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   28d02:	4a0b      	ldr	r2, [pc, #44]	; (28d30 <att_find_info_rsp+0x70>)
   28d04:	9905      	ldr	r1, [sp, #20]
   28d06:	4620      	mov	r0, r4
   28d08:	f00f fa82 	bl	38210 <bt_att_chan_send_rsp>
	return 0;
   28d0c:	2000      	movs	r0, #0
}
   28d0e:	b009      	add	sp, #36	; 0x24
   28d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   28d12:	9805      	ldr	r0, [sp, #20]
   28d14:	f011 fe83 	bl	3aa1e <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   28d18:	230a      	movs	r3, #10
   28d1a:	463a      	mov	r2, r7
   28d1c:	2104      	movs	r1, #4
   28d1e:	4620      	mov	r0, r4
   28d20:	f7ff fca6 	bl	28670 <send_err_rsp>
		return 0;
   28d24:	2000      	movs	r0, #0
   28d26:	e7f2      	b.n	28d0e <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   28d28:	200e      	movs	r0, #14
   28d2a:	e7f0      	b.n	28d0e <att_find_info_rsp+0x4e>
   28d2c:	000384f7 	.word	0x000384f7
   28d30:	00038091 	.word	0x00038091

00028d34 <att_mtu_req>:
{
   28d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d36:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   28d38:	6803      	ldr	r3, [r0, #0]
   28d3a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28d3c:	f3bf 8f5b 	dmb	ish
   28d40:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   28d44:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   28d48:	f013 0f08 	tst.w	r3, #8
   28d4c:	d122      	bne.n	28d94 <att_mtu_req+0x60>
	req = (void *)buf->data;
   28d4e:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   28d50:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   28d52:	2e16      	cmp	r6, #22
   28d54:	d920      	bls.n	28d98 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   28d56:	2202      	movs	r2, #2
   28d58:	2103      	movs	r1, #3
   28d5a:	f7ff fde7 	bl	2892c <bt_att_create_pdu>
	if (!pdu) {
   28d5e:	4607      	mov	r7, r0
   28d60:	b1e0      	cbz	r0, 28d9c <att_mtu_req+0x68>
   28d62:	2102      	movs	r1, #2
   28d64:	3008      	adds	r0, #8
   28d66:	f011 fea4 	bl	3aab2 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   28d6a:	2500      	movs	r5, #0
   28d6c:	2341      	movs	r3, #65	; 0x41
   28d6e:	7003      	strb	r3, [r0, #0]
   28d70:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   28d72:	4a0b      	ldr	r2, [pc, #44]	; (28da0 <att_mtu_req+0x6c>)
   28d74:	4639      	mov	r1, r7
   28d76:	4620      	mov	r0, r4
   28d78:	f00f fa4a 	bl	38210 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   28d7c:	2e41      	cmp	r6, #65	; 0x41
   28d7e:	bf28      	it	cs
   28d80:	2641      	movcs	r6, #65	; 0x41
   28d82:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   28d86:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   28d8a:	4620      	mov	r0, r4
   28d8c:	f00f fa4d 	bl	3822a <att_chan_mtu_updated>
	return 0;
   28d90:	4628      	mov	r0, r5
}
   28d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   28d94:	2006      	movs	r0, #6
   28d96:	e7fc      	b.n	28d92 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   28d98:	2004      	movs	r0, #4
   28d9a:	e7fa      	b.n	28d92 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   28d9c:	200e      	movs	r0, #14
   28d9e:	e7f8      	b.n	28d92 <att_mtu_req+0x5e>
   28da0:	00038091 	.word	0x00038091

00028da4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   28da4:	b500      	push	{lr}
   28da6:	b083      	sub	sp, #12
   28da8:	4602      	mov	r2, r0
   28daa:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   28dac:	2100      	movs	r1, #0
   28dae:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   28db0:	a901      	add	r1, sp, #4
   28db2:	4807      	ldr	r0, [pc, #28]	; (28dd0 <bt_att_req_alloc+0x2c>)
   28db4:	f007 f808 	bl	2fdc8 <k_mem_slab_alloc>
   28db8:	b940      	cbnz	r0, 28dcc <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   28dba:	221c      	movs	r2, #28
   28dbc:	2100      	movs	r1, #0
   28dbe:	9801      	ldr	r0, [sp, #4]
   28dc0:	f00d fff4 	bl	36dac <memset>

	return req;
   28dc4:	9801      	ldr	r0, [sp, #4]
}
   28dc6:	b003      	add	sp, #12
   28dc8:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   28dcc:	2000      	movs	r0, #0
   28dce:	e7fa      	b.n	28dc6 <bt_att_req_alloc+0x22>
   28dd0:	20000aa0 	.word	0x20000aa0

00028dd4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   28dd4:	b500      	push	{lr}
   28dd6:	b083      	sub	sp, #12
   28dd8:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   28dda:	6880      	ldr	r0, [r0, #8]
   28ddc:	b120      	cbz	r0, 28de8 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   28dde:	f011 fe1e 	bl	3aa1e <net_buf_unref>
		req->buf = NULL;
   28de2:	9b01      	ldr	r3, [sp, #4]
   28de4:	2200      	movs	r2, #0
   28de6:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   28de8:	a901      	add	r1, sp, #4
   28dea:	4803      	ldr	r0, [pc, #12]	; (28df8 <bt_att_req_free+0x24>)
   28dec:	f013 f984 	bl	3c0f8 <k_mem_slab_free>
}
   28df0:	b003      	add	sp, #12
   28df2:	f85d fb04 	ldr.w	pc, [sp], #4
   28df6:	bf00      	nop
   28df8:	20000aa0 	.word	0x20000aa0

00028dfc <att_handle_rsp>:
{
   28dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28e00:	b082      	sub	sp, #8
   28e02:	4604      	mov	r4, r0
   28e04:	460f      	mov	r7, r1
   28e06:	4691      	mov	r9, r2
   28e08:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   28e0a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   28e0e:	f013 fbe9 	bl	3c5e4 <k_work_cancel_delayable>
	if (!chan->req) {
   28e12:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   28e16:	b1f8      	cbz	r0, 28e58 <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   28e18:	4b1a      	ldr	r3, [pc, #104]	; (28e84 <att_handle_rsp+0x88>)
   28e1a:	4298      	cmp	r0, r3
   28e1c:	d02e      	beq.n	28e7c <att_handle_rsp+0x80>
	func = chan->req->func;
   28e1e:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   28e20:	f04f 0a00 	mov.w	sl, #0
   28e24:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   28e28:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   28e2c:	f8d0 8018 	ldr.w	r8, [r0, #24]
	bt_att_req_free(chan->req);
   28e30:	f7ff ffd0 	bl	28dd4 <bt_att_req_free>
	chan->req = NULL;
   28e34:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   28e38:	6820      	ldr	r0, [r4, #0]
   28e3a:	f00f f8cb 	bl	37fd4 <att_req_send_process>
	if (func) {
   28e3e:	b13d      	cbz	r5, 28e50 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   28e40:	6823      	ldr	r3, [r4, #0]
   28e42:	6818      	ldr	r0, [r3, #0]
   28e44:	f8cd 8000 	str.w	r8, [sp]
   28e48:	464b      	mov	r3, r9
   28e4a:	463a      	mov	r2, r7
   28e4c:	4631      	mov	r1, r6
   28e4e:	47a8      	blx	r5
}
   28e50:	2000      	movs	r0, #0
   28e52:	b002      	add	sp, #8
   28e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28e58:	4b0b      	ldr	r3, [pc, #44]	; (28e88 <att_handle_rsp+0x8c>)
   28e5a:	4a0c      	ldr	r2, [pc, #48]	; (28e8c <att_handle_rsp+0x90>)
   28e5c:	1a9b      	subs	r3, r3, r2
   28e5e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   28e60:	f04f 0100 	mov.w	r1, #0
   28e64:	2202      	movs	r2, #2
   28e66:	f362 0102 	bfi	r1, r2, #0, #3
   28e6a:	f36f 01c5 	bfc	r1, #3, #3
   28e6e:	f363 118f 	bfi	r1, r3, #6, #10
   28e72:	4807      	ldr	r0, [pc, #28]	; (28e90 <att_handle_rsp+0x94>)
   28e74:	f7f7 face 	bl	20414 <log_0>
	bt_att_func_t func = NULL;
   28e78:	2500      	movs	r5, #0
		goto process;
   28e7a:	e7dd      	b.n	28e38 <att_handle_rsp+0x3c>
		chan->req = NULL;
   28e7c:	2500      	movs	r5, #0
   28e7e:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   28e82:	e7d9      	b.n	28e38 <att_handle_rsp+0x3c>
   28e84:	200082ac 	.word	0x200082ac
   28e88:	0003d1b4 	.word	0x0003d1b4
   28e8c:	0003d1a4 	.word	0x0003d1a4
   28e90:	0003fca8 	.word	0x0003fca8

00028e94 <att_error_rsp>:
{
   28e94:	b538      	push	{r3, r4, r5, lr}
   28e96:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   28e98:	6889      	ldr	r1, [r1, #8]
	if (!chan->req || chan->req == &cancel) {
   28e9a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   28e9e:	b1b3      	cbz	r3, 28ece <att_error_rsp+0x3a>
   28ea0:	4a0d      	ldr	r2, [pc, #52]	; (28ed8 <att_error_rsp+0x44>)
   28ea2:	4293      	cmp	r3, r2
   28ea4:	d015      	beq.n	28ed2 <att_error_rsp+0x3e>
	err = rsp->error;
   28ea6:	78cd      	ldrb	r5, [r1, #3]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   28ea8:	4629      	mov	r1, r5
   28eaa:	6880      	ldr	r0, [r0, #8]
   28eac:	f00f fa03 	bl	382b6 <att_change_security>
   28eb0:	b130      	cbz	r0, 28ec0 <att_error_rsp+0x2c>
	return att_handle_rsp(chan, NULL, 0, err);
   28eb2:	462b      	mov	r3, r5
   28eb4:	2200      	movs	r2, #0
   28eb6:	4611      	mov	r1, r2
   28eb8:	4620      	mov	r0, r4
   28eba:	f7ff ff9f 	bl	28dfc <att_handle_rsp>
}
   28ebe:	bd38      	pop	{r3, r4, r5, pc}
		chan->req->retrying = true;
   28ec0:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   28ec4:	7c13      	ldrb	r3, [r2, #16]
   28ec6:	f043 0301 	orr.w	r3, r3, #1
   28eca:	7413      	strb	r3, [r2, #16]
		return 0;
   28ecc:	e7f7      	b.n	28ebe <att_error_rsp+0x2a>
		err = BT_ATT_ERR_UNLIKELY;
   28ece:	250e      	movs	r5, #14
   28ed0:	e7ef      	b.n	28eb2 <att_error_rsp+0x1e>
   28ed2:	250e      	movs	r5, #14
   28ed4:	e7ed      	b.n	28eb2 <att_error_rsp+0x1e>
   28ed6:	bf00      	nop
   28ed8:	200082ac 	.word	0x200082ac

00028edc <att_reset>:
{
   28edc:	b530      	push	{r4, r5, lr}
   28ede:	b085      	sub	sp, #20
   28ee0:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   28ee2:	2200      	movs	r2, #0
   28ee4:	2300      	movs	r3, #0
   28ee6:	9803      	ldr	r0, [sp, #12]
   28ee8:	300c      	adds	r0, #12
   28eea:	f011 fd66 	bl	3a9ba <net_buf_get>
   28eee:	4603      	mov	r3, r0
   28ef0:	b118      	cbz	r0, 28efa <att_reset+0x1e>
		net_buf_unref(buf);
   28ef2:	4618      	mov	r0, r3
   28ef4:	f011 fd93 	bl	3aa1e <net_buf_unref>
   28ef8:	e7f3      	b.n	28ee2 <att_reset+0x6>
	att->conn = NULL;
   28efa:	9b03      	ldr	r3, [sp, #12]
   28efc:	2200      	movs	r2, #0
   28efe:	601a      	str	r2, [r3, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   28f00:	e004      	b.n	28f0c <att_reset+0x30>
	list->tail = node;
   28f02:	609a      	str	r2, [r3, #8]
}
   28f04:	e00a      	b.n	28f1c <att_reset+0x40>
		bt_att_req_free(req);
   28f06:	4620      	mov	r0, r4
   28f08:	f7ff ff64 	bl	28dd4 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   28f0c:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   28f0e:	685c      	ldr	r4, [r3, #4]
   28f10:	b17c      	cbz	r4, 28f32 <att_reset+0x56>
	return node->next;
   28f12:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   28f14:	605a      	str	r2, [r3, #4]
	return list->tail;
   28f16:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28f18:	42a1      	cmp	r1, r4
   28f1a:	d0f2      	beq.n	28f02 <att_reset+0x26>
		if (req->func) {
   28f1c:	6865      	ldr	r5, [r4, #4]
   28f1e:	2d00      	cmp	r5, #0
   28f20:	d0f1      	beq.n	28f06 <att_reset+0x2a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   28f22:	69a3      	ldr	r3, [r4, #24]
   28f24:	9300      	str	r3, [sp, #0]
   28f26:	2300      	movs	r3, #0
   28f28:	461a      	mov	r2, r3
   28f2a:	210e      	movs	r1, #14
   28f2c:	4618      	mov	r0, r3
   28f2e:	47a8      	blx	r5
   28f30:	e7e9      	b.n	28f06 <att_reset+0x2a>
	k_mem_slab_free(&att_slab, (void **)&att);
   28f32:	a903      	add	r1, sp, #12
   28f34:	4802      	ldr	r0, [pc, #8]	; (28f40 <att_reset+0x64>)
   28f36:	f013 f8df 	bl	3c0f8 <k_mem_slab_free>
}
   28f3a:	b005      	add	sp, #20
   28f3c:	bd30      	pop	{r4, r5, pc}
   28f3e:	bf00      	nop
   28f40:	20000a68 	.word	0x20000a68

00028f44 <att_timeout>:
{
   28f44:	b510      	push	{r4, lr}
   28f46:	4604      	mov	r4, r0
   28f48:	4b0a      	ldr	r3, [pc, #40]	; (28f74 <att_timeout+0x30>)
   28f4a:	4a0b      	ldr	r2, [pc, #44]	; (28f78 <att_timeout+0x34>)
   28f4c:	1a9b      	subs	r3, r3, r2
   28f4e:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   28f50:	f04f 0100 	mov.w	r1, #0
   28f54:	2201      	movs	r2, #1
   28f56:	f362 0102 	bfi	r1, r2, #0, #3
   28f5a:	f36f 01c5 	bfc	r1, #3, #3
   28f5e:	f363 118f 	bfi	r1, r3, #6, #10
   28f62:	4806      	ldr	r0, [pc, #24]	; (28f7c <att_timeout+0x38>)
   28f64:	f7f7 fa56 	bl	20414 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   28f68:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
   28f6c:	f00f fd7f 	bl	38a6e <bt_att_disconnected>
}
   28f70:	bd10      	pop	{r4, pc}
   28f72:	bf00      	nop
   28f74:	0003d1b4 	.word	0x0003d1b4
   28f78:	0003d1a4 	.word	0x0003d1a4
   28f7c:	0003fcc0 	.word	0x0003fcc0

00028f80 <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
   28f80:	b508      	push	{r3, lr}
	if (chan->req != req) {
   28f82:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   28f86:	428b      	cmp	r3, r1
   28f88:	d001      	beq.n	28f8e <bt_att_chan_req_cancel+0xe>
		return false;
   28f8a:	2000      	movs	r0, #0
	chan->req = &cancel;

	bt_att_req_free(req);

	return true;
}
   28f8c:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
   28f8e:	4b04      	ldr	r3, [pc, #16]	; (28fa0 <bt_att_chan_req_cancel+0x20>)
   28f90:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	bt_att_req_free(req);
   28f94:	4608      	mov	r0, r1
   28f96:	f7ff ff1d 	bl	28dd4 <bt_att_req_free>
	return true;
   28f9a:	2001      	movs	r0, #1
   28f9c:	e7f6      	b.n	28f8c <bt_att_chan_req_cancel+0xc>
   28f9e:	bf00      	nop
   28fa0:	200082ac 	.word	0x200082ac

00028fa4 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28fa4:	4b0d      	ldr	r3, [pc, #52]	; (28fdc <bt_gatt_service_init+0x38>)
   28fa6:	2201      	movs	r2, #1
   28fa8:	f3bf 8f5b 	dmb	ish
   28fac:	e853 1f00 	ldrex	r1, [r3]
   28fb0:	2900      	cmp	r1, #0
   28fb2:	d103      	bne.n	28fbc <bt_gatt_service_init+0x18>
   28fb4:	e843 2000 	strex	r0, r2, [r3]
   28fb8:	2800      	cmp	r0, #0
   28fba:	d1f7      	bne.n	28fac <bt_gatt_service_init+0x8>
   28fbc:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   28fc0:	d101      	bne.n	28fc6 <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   28fc2:	4b07      	ldr	r3, [pc, #28]	; (28fe0 <bt_gatt_service_init+0x3c>)
   28fc4:	e006      	b.n	28fd4 <bt_gatt_service_init+0x30>
   28fc6:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   28fc8:	685a      	ldr	r2, [r3, #4]
   28fca:	4906      	ldr	r1, [pc, #24]	; (28fe4 <bt_gatt_service_init+0x40>)
   28fcc:	8808      	ldrh	r0, [r1, #0]
   28fce:	4402      	add	r2, r0
   28fd0:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   28fd2:	3308      	adds	r3, #8
   28fd4:	4a04      	ldr	r2, [pc, #16]	; (28fe8 <bt_gatt_service_init+0x44>)
   28fd6:	4293      	cmp	r3, r2
   28fd8:	d3f6      	bcc.n	28fc8 <bt_gatt_service_init+0x24>
	}
}
   28fda:	4770      	bx	lr
   28fdc:	20008700 	.word	0x20008700
   28fe0:	0003d194 	.word	0x0003d194
   28fe4:	2000da68 	.word	0x2000da68
   28fe8:	0003d1a4 	.word	0x0003d1a4

00028fec <parse_read_std_char_desc>:
}

static uint16_t parse_read_std_char_desc(struct bt_conn *conn, const void *pdu,
					 struct bt_gatt_discover_params *params,
					 uint16_t length)
{
   28fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28ff0:	b088      	sub	sp, #32
   28ff2:	4681      	mov	r9, r0
   28ff4:	460f      	mov	r7, r1
   28ff6:	4616      	mov	r6, r2
	const struct bt_att_read_type_rsp *rsp = pdu;
	uint16_t handle = 0U;
	uint16_t uuid_val;

	if (params->uuid->type != BT_UUID_TYPE_16) {
   28ff8:	6812      	ldr	r2, [r2, #0]
   28ffa:	7811      	ldrb	r1, [r2, #0]
   28ffc:	2900      	cmp	r1, #0
   28ffe:	d164      	bne.n	290ca <parse_read_std_char_desc+0xde>
		goto done;
	}

	uuid_val = BT_UUID_16(params->uuid)->val;
   29000:	f8b2 a002 	ldrh.w	sl, [r2, #2]

	/* Parse characteristics found */
	for (length--, pdu = rsp->data; length >= rsp->len;
   29004:	3b01      	subs	r3, #1
   29006:	b29c      	uxth	r4, r3
   29008:	1c7d      	adds	r5, r7, #1
	uint16_t handle = 0U;
   2900a:	f04f 0800 	mov.w	r8, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   2900e:	e01b      	b.n	29048 <parse_read_std_char_desc+0x5c>
   29010:	78e9      	ldrb	r1, [r5, #3]
   29012:	78ab      	ldrb	r3, [r5, #2]
   29014:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			goto done;
		}

		switch (uuid_val) {
		case BT_UUID_GATT_CEP_VAL:
			value.cep.properties = sys_get_le16(data->value);
   29018:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		default:
			goto done;
		}

		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   2901c:	6833      	ldr	r3, [r6, #0]
   2901e:	9303      	str	r3, [sp, #12]
   29020:	2300      	movs	r3, #0
   29022:	9304      	str	r3, [sp, #16]
   29024:	9305      	str	r3, [sp, #20]
   29026:	a901      	add	r1, sp, #4
   29028:	9106      	str	r1, [sp, #24]
   2902a:	f88d 301e 	strb.w	r3, [sp, #30]
			params->uuid, 0, NULL, NULL, &value);
		attr.handle = handle;
   2902e:	f8ad 201c 	strh.w	r2, [sp, #28]

		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   29032:	6873      	ldr	r3, [r6, #4]
   29034:	4632      	mov	r2, r6
   29036:	a903      	add	r1, sp, #12
   29038:	4648      	mov	r0, r9
   2903a:	4798      	blx	r3
   2903c:	2800      	cmp	r0, #0
   2903e:	d03d      	beq.n	290bc <parse_read_std_char_desc+0xd0>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   29040:	783a      	ldrb	r2, [r7, #0]
   29042:	1aa4      	subs	r4, r4, r2
   29044:	b2a4      	uxth	r4, r4
   29046:	4415      	add	r5, r2
	for (length--, pdu = rsp->data; length >= rsp->len;
   29048:	783b      	ldrb	r3, [r7, #0]
   2904a:	42a3      	cmp	r3, r4
   2904c:	d839      	bhi.n	290c2 <parse_read_std_char_desc+0xd6>
		handle = sys_le16_to_cpu(data->handle);
   2904e:	882a      	ldrh	r2, [r5, #0]
   29050:	fa1f f882 	uxth.w	r8, r2
		if (!handle) {
   29054:	f1b8 0f00 	cmp.w	r8, #0
   29058:	d037      	beq.n	290ca <parse_read_std_char_desc+0xde>
		switch (uuid_val) {
   2905a:	f5aa 5324 	sub.w	r3, sl, #10496	; 0x2900
   2905e:	2b04      	cmp	r3, #4
   29060:	d833      	bhi.n	290ca <parse_read_std_char_desc+0xde>
   29062:	a101      	add	r1, pc, #4	; (adr r1, 29068 <parse_read_std_char_desc+0x7c>)
   29064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   29068:	00029011 	.word	0x00029011
   2906c:	000290cb 	.word	0x000290cb
   29070:	0002907d 	.word	0x0002907d
   29074:	0002908b 	.word	0x0002908b
   29078:	00029099 	.word	0x00029099
   2907c:	78e9      	ldrb	r1, [r5, #3]
   2907e:	78ab      	ldrb	r3, [r5, #2]
   29080:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			value.ccc.flags = sys_get_le16(data->value);
   29084:	f8ad 3004 	strh.w	r3, [sp, #4]
			break;
   29088:	e7c8      	b.n	2901c <parse_read_std_char_desc+0x30>
   2908a:	78e9      	ldrb	r1, [r5, #3]
   2908c:	78ab      	ldrb	r3, [r5, #2]
   2908e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			value.scc.flags = sys_get_le16(data->value);
   29092:	f8ad 3004 	strh.w	r3, [sp, #4]
			break;
   29096:	e7c1      	b.n	2901c <parse_read_std_char_desc+0x30>
			value.cpf.format = cpf->format;
   29098:	78ab      	ldrb	r3, [r5, #2]
   2909a:	f88d 3004 	strb.w	r3, [sp, #4]
			value.cpf.exponent = cpf->exponent;
   2909e:	f995 3003 	ldrsb.w	r3, [r5, #3]
   290a2:	f88d 3005 	strb.w	r3, [sp, #5]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   290a6:	88ab      	ldrh	r3, [r5, #4]
   290a8:	f8ad 3006 	strh.w	r3, [sp, #6]
			value.cpf.name_space = cpf->name_space;
   290ac:	79ab      	ldrb	r3, [r5, #6]
   290ae:	f88d 3008 	strb.w	r3, [sp, #8]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   290b2:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   290b6:	f8ad 300a 	strh.w	r3, [sp, #10]
			break;
   290ba:	e7af      	b.n	2901c <parse_read_std_char_desc+0x30>
			return 0;
   290bc:	f04f 0800 	mov.w	r8, #0
   290c0:	e00a      	b.n	290d8 <parse_read_std_char_desc+0xec>
		}
	}

	/* Whole PDU read without error */
	if (length == 0U && handle) {
   290c2:	b914      	cbnz	r4, 290ca <parse_read_std_char_desc+0xde>
   290c4:	f1b8 0f00 	cmp.w	r8, #0
   290c8:	d106      	bne.n	290d8 <parse_read_std_char_desc+0xec>
		return handle;
	}

done:
	params->func(conn, NULL, params);
   290ca:	6873      	ldr	r3, [r6, #4]
   290cc:	4632      	mov	r2, r6
   290ce:	2100      	movs	r1, #0
   290d0:	4648      	mov	r0, r9
   290d2:	4798      	blx	r3
	return 0;
   290d4:	f04f 0800 	mov.w	r8, #0
}
   290d8:	4640      	mov	r0, r8
   290da:	b008      	add	sp, #32
   290dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000290e0 <find_cf_cfg>:
{
   290e0:	b570      	push	{r4, r5, r6, lr}
   290e2:	b082      	sub	sp, #8
   290e4:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   290e6:	2400      	movs	r4, #0
   290e8:	e00b      	b.n	29102 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   290ea:	4628      	mov	r0, r5
   290ec:	2300      	movs	r3, #0
   290ee:	9300      	str	r3, [sp, #0]
   290f0:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   290f4:	2207      	movs	r2, #7
   290f6:	4669      	mov	r1, sp
   290f8:	3001      	adds	r0, #1
   290fa:	f00d fe06 	bl	36d0a <memcmp>
   290fe:	b1a0      	cbz	r0, 2912a <find_cf_cfg+0x4a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   29100:	3401      	adds	r4, #1
   29102:	2c14      	cmp	r4, #20
   29104:	dc10      	bgt.n	29128 <find_cf_cfg+0x48>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   29106:	4d0a      	ldr	r5, [pc, #40]	; (29130 <find_cf_cfg+0x50>)
   29108:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   2910c:	2e00      	cmp	r6, #0
   2910e:	d0ec      	beq.n	290ea <find_cf_cfg+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   29110:	4907      	ldr	r1, [pc, #28]	; (29130 <find_cf_cfg+0x50>)
   29112:	0123      	lsls	r3, r4, #4
   29114:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   29118:	3201      	adds	r2, #1
   2911a:	5cc9      	ldrb	r1, [r1, r3]
   2911c:	4630      	mov	r0, r6
   2911e:	f00e fc22 	bl	37966 <bt_conn_is_peer_addr_le>
   29122:	2800      	cmp	r0, #0
   29124:	d0ec      	beq.n	29100 <find_cf_cfg+0x20>
   29126:	e000      	b.n	2912a <find_cf_cfg+0x4a>
	return NULL;
   29128:	2500      	movs	r5, #0
}
   2912a:	4628      	mov	r0, r5
   2912c:	b002      	add	sp, #8
   2912e:	bd70      	pop	{r4, r5, r6, pc}
   29130:	200082d0 	.word	0x200082d0

00029134 <find_sc_cfg>:
{
   29134:	b570      	push	{r4, r5, r6, lr}
   29136:	4605      	mov	r5, r0
   29138:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2913a:	2400      	movs	r4, #0
   2913c:	e000      	b.n	29140 <find_sc_cfg+0xc>
   2913e:	3401      	adds	r4, #1
   29140:	2c14      	cmp	r4, #20
   29142:	d817      	bhi.n	29174 <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   29144:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   29148:	4a0b      	ldr	r2, [pc, #44]	; (29178 <find_sc_cfg+0x44>)
   2914a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   2914e:	429d      	cmp	r5, r3
   29150:	d1f5      	bne.n	2913e <find_sc_cfg+0xa>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   29152:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   29156:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   2915a:	2207      	movs	r2, #7
   2915c:	4631      	mov	r1, r6
   2915e:	3001      	adds	r0, #1
   29160:	f00d fdd3 	bl	36d0a <memcmp>
		if (id == sc_cfg[i].id &&
   29164:	2800      	cmp	r0, #0
   29166:	d1ea      	bne.n	2913e <find_sc_cfg+0xa>
			return &sc_cfg[i];
   29168:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2916c:	4802      	ldr	r0, [pc, #8]	; (29178 <find_sc_cfg+0x44>)
   2916e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   29172:	e000      	b.n	29176 <find_sc_cfg+0x42>
	return NULL;
   29174:	2000      	movs	r0, #0
}
   29176:	bd70      	pop	{r4, r5, r6, pc}
   29178:	20008424 	.word	0x20008424

0002917c <gatt_sub_find>:
{
   2917c:	b570      	push	{r4, r5, r6, lr}
   2917e:	b082      	sub	sp, #8
   29180:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   29182:	2400      	movs	r4, #0
   29184:	e00b      	b.n	2919e <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   29186:	4628      	mov	r0, r5
   29188:	2300      	movs	r3, #0
   2918a:	9300      	str	r3, [sp, #0]
   2918c:	f8cd 3003 	str.w	r3, [sp, #3]
   29190:	2207      	movs	r2, #7
   29192:	4669      	mov	r1, sp
   29194:	3001      	adds	r0, #1
   29196:	f00d fdb8 	bl	36d0a <memcmp>
   2919a:	b1a0      	cbz	r0, 291c6 <gatt_sub_find+0x4a>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   2919c:	3401      	adds	r4, #1
   2919e:	2c14      	cmp	r4, #20
   291a0:	dc10      	bgt.n	291c4 <gatt_sub_find+0x48>
		struct gatt_sub *sub = &subscriptions[i];
   291a2:	4d0a      	ldr	r5, [pc, #40]	; (291cc <gatt_sub_find+0x50>)
   291a4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   291a8:	2e00      	cmp	r6, #0
   291aa:	d0ec      	beq.n	29186 <gatt_sub_find+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   291ac:	4907      	ldr	r1, [pc, #28]	; (291cc <gatt_sub_find+0x50>)
   291ae:	0123      	lsls	r3, r4, #4
   291b0:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   291b4:	3201      	adds	r2, #1
   291b6:	5cc9      	ldrb	r1, [r1, r3]
   291b8:	4630      	mov	r0, r6
   291ba:	f00e fbd4 	bl	37966 <bt_conn_is_peer_addr_le>
   291be:	2800      	cmp	r0, #0
   291c0:	d0ec      	beq.n	2919c <gatt_sub_find+0x20>
   291c2:	e000      	b.n	291c6 <gatt_sub_find+0x4a>
	return NULL;
   291c4:	2500      	movs	r5, #0
}
   291c6:	4628      	mov	r0, r5
   291c8:	b002      	add	sp, #8
   291ca:	bd70      	pop	{r4, r5, r6, pc}
   291cc:	20008704 	.word	0x20008704

000291d0 <cf_write>:
{
   291d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   291d4:	461d      	mov	r5, r3
   291d6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   291da:	2b01      	cmp	r3, #1
   291dc:	d83f      	bhi.n	2925e <cf_write+0x8e>
   291de:	4606      	mov	r6, r0
   291e0:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   291e2:	462f      	mov	r7, r5
   291e4:	442b      	add	r3, r5
   291e6:	2b01      	cmp	r3, #1
   291e8:	d83c      	bhi.n	29264 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   291ea:	f7ff ff79 	bl	290e0 <find_cf_cfg>
	if (!cfg) {
   291ee:	4604      	mov	r4, r0
   291f0:	b1f0      	cbz	r0, 29230 <cf_write+0x60>
	if (!cfg) {
   291f2:	b30c      	cbz	r4, 29238 <cf_write+0x68>
	if (!cf_set_value(cfg, value, len)) {
   291f4:	462a      	mov	r2, r5
   291f6:	4641      	mov	r1, r8
   291f8:	4620      	mov	r0, r4
   291fa:	f00f fcea 	bl	38bd2 <cf_set_value>
   291fe:	b3a0      	cbz	r0, 2926a <cf_write+0x9a>
	memcpy(dst, src, sizeof(*dst));
   29200:	2207      	movs	r2, #7
   29202:	f106 0188 	add.w	r1, r6, #136	; 0x88
   29206:	1c60      	adds	r0, r4, #1
   29208:	f00d fdac 	bl	36d64 <memcpy>
	cfg->id = conn->id;
   2920c:	7a33      	ldrb	r3, [r6, #8]
   2920e:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29212:	f3bf 8f5b 	dmb	ish
   29216:	e854 3f00 	ldrex	r3, [r4]
   2921a:	f043 0301 	orr.w	r3, r3, #1
   2921e:	e844 3200 	strex	r2, r3, [r4]
   29222:	2a00      	cmp	r2, #0
   29224:	d1f7      	bne.n	29216 <cf_write+0x46>
   29226:	f3bf 8f5b 	dmb	ish
}
   2922a:	4638      	mov	r0, r7
   2922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   29230:	f7ff ff56 	bl	290e0 <find_cf_cfg>
   29234:	4604      	mov	r4, r0
   29236:	e7dc      	b.n	291f2 <cf_write+0x22>
   29238:	4b0d      	ldr	r3, [pc, #52]	; (29270 <cf_write+0xa0>)
   2923a:	4a0e      	ldr	r2, [pc, #56]	; (29274 <cf_write+0xa4>)
   2923c:	1a9b      	subs	r3, r3, r2
   2923e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   29240:	f04f 0100 	mov.w	r1, #0
   29244:	2202      	movs	r2, #2
   29246:	f362 0102 	bfi	r1, r2, #0, #3
   2924a:	f36f 01c5 	bfc	r1, #3, #3
   2924e:	f363 118f 	bfi	r1, r3, #6, #10
   29252:	4809      	ldr	r0, [pc, #36]	; (29278 <cf_write+0xa8>)
   29254:	f7f7 f8de 	bl	20414 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   29258:	f06f 0710 	mvn.w	r7, #16
   2925c:	e7e5      	b.n	2922a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2925e:	f06f 0706 	mvn.w	r7, #6
   29262:	e7e2      	b.n	2922a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   29264:	f06f 070c 	mvn.w	r7, #12
   29268:	e7df      	b.n	2922a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   2926a:	f06f 0712 	mvn.w	r7, #18
   2926e:	e7dc      	b.n	2922a <cf_write+0x5a>
   29270:	0003d1d4 	.word	0x0003d1d4
   29274:	0003d1a4 	.word	0x0003d1a4
   29278:	0003fdb4 	.word	0x0003fdb4

0002927c <sc_save>:
{
   2927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29280:	b082      	sub	sp, #8
   29282:	4607      	mov	r7, r0
   29284:	4688      	mov	r8, r1
   29286:	4616      	mov	r6, r2
   29288:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   2928a:	f7ff ff53 	bl	29134 <find_sc_cfg>
	if (!cfg) {
   2928e:	4604      	mov	r4, r0
   29290:	b170      	cbz	r0, 292b0 <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   29292:	8923      	ldrh	r3, [r4, #8]
   29294:	b90b      	cbnz	r3, 2929a <sc_save+0x1e>
   29296:	8963      	ldrh	r3, [r4, #10]
   29298:	b353      	cbz	r3, 292f0 <sc_save+0x74>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   2929a:	462b      	mov	r3, r5
   2929c:	4632      	mov	r2, r6
   2929e:	f104 010a 	add.w	r1, r4, #10
   292a2:	f104 0008 	add.w	r0, r4, #8
   292a6:	f00f fc7f 	bl	38ba8 <update_range>
}
   292aa:	b002      	add	sp, #8
   292ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   292b0:	9000      	str	r0, [sp, #0]
   292b2:	f8cd 0003 	str.w	r0, [sp, #3]
   292b6:	4669      	mov	r1, sp
   292b8:	f7ff ff3c 	bl	29134 <find_sc_cfg>
		if (!cfg) {
   292bc:	4604      	mov	r4, r0
   292be:	b130      	cbz	r0, 292ce <sc_save+0x52>
		cfg->id = id;
   292c0:	f800 7b01 	strb.w	r7, [r0], #1
   292c4:	2207      	movs	r2, #7
   292c6:	4641      	mov	r1, r8
   292c8:	f00d fd4c 	bl	36d64 <memcpy>
   292cc:	e7e1      	b.n	29292 <sc_save+0x16>
   292ce:	4b0a      	ldr	r3, [pc, #40]	; (292f8 <sc_save+0x7c>)
   292d0:	4a0a      	ldr	r2, [pc, #40]	; (292fc <sc_save+0x80>)
   292d2:	1a9b      	subs	r3, r3, r2
   292d4:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   292d6:	f04f 0100 	mov.w	r1, #0
   292da:	2201      	movs	r2, #1
   292dc:	f362 0102 	bfi	r1, r2, #0, #3
   292e0:	f36f 01c5 	bfc	r1, #3, #3
   292e4:	f363 118f 	bfi	r1, r3, #6, #10
   292e8:	4805      	ldr	r0, [pc, #20]	; (29300 <sc_save+0x84>)
   292ea:	f7f7 f893 	bl	20414 <log_0>
			return;
   292ee:	e7dc      	b.n	292aa <sc_save+0x2e>
		cfg->data.start = start;
   292f0:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   292f2:	8165      	strh	r5, [r4, #10]
		goto done;
   292f4:	e7d9      	b.n	292aa <sc_save+0x2e>
   292f6:	bf00      	nop
   292f8:	0003d1d4 	.word	0x0003d1d4
   292fc:	0003d1a4 	.word	0x0003d1a4
   29300:	0003fde0 	.word	0x0003fde0

00029304 <bt_gatt_attr_write_ccc>:
{
   29304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29308:	461c      	mov	r4, r3
   2930a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2930e:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   29310:	2b00      	cmp	r3, #0
   29312:	d159      	bne.n	293c8 <bt_gatt_attr_write_ccc+0xc4>
   29314:	4681      	mov	r9, r0
   29316:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   29318:	1e63      	subs	r3, r4, #1
   2931a:	b29b      	uxth	r3, r3
   2931c:	2b01      	cmp	r3, #1
   2931e:	d856      	bhi.n	293ce <bt_gatt_attr_write_ccc+0xca>
	if (len < sizeof(uint16_t)) {
   29320:	2c01      	cmp	r4, #1
   29322:	d91f      	bls.n	29364 <bt_gatt_attr_write_ccc+0x60>
   29324:	7853      	ldrb	r3, [r2, #1]
   29326:	7815      	ldrb	r5, [r2, #0]
   29328:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   2932c:	4639      	mov	r1, r7
   2932e:	4648      	mov	r0, r9
   29330:	f00f fd48 	bl	38dc4 <find_ccc_cfg>
	if (!cfg) {
   29334:	4680      	mov	r8, r0
   29336:	b1b8      	cbz	r0, 29368 <bt_gatt_attr_write_ccc+0x64>
	if (ccc->cfg_write) {
   29338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
   2933c:	b143      	cbz	r3, 29350 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2933e:	462a      	mov	r2, r5
   29340:	4631      	mov	r1, r6
   29342:	4648      	mov	r0, r9
   29344:	4798      	blx	r3
		if (write < 0) {
   29346:	2800      	cmp	r0, #0
   29348:	db0a      	blt.n	29360 <bt_gatt_attr_write_ccc+0x5c>
		if (write != sizeof(value) && write != 1) {
   2934a:	3801      	subs	r0, #1
   2934c:	2801      	cmp	r0, #1
   2934e:	d841      	bhi.n	293d4 <bt_gatt_attr_write_ccc+0xd0>
	cfg->value = value;
   29350:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   29354:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
   29358:	429d      	cmp	r5, r3
   2935a:	d12c      	bne.n	293b6 <bt_gatt_attr_write_ccc+0xb2>
	if (!value) {
   2935c:	b385      	cbz	r5, 293c0 <bt_gatt_attr_write_ccc+0xbc>
	return len;
   2935e:	4620      	mov	r0, r4
}
   29360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   29364:	7815      	ldrb	r5, [r2, #0]
   29366:	e7e1      	b.n	2932c <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   29368:	b90d      	cbnz	r5, 2936e <bt_gatt_attr_write_ccc+0x6a>
			return len;
   2936a:	4620      	mov	r0, r4
   2936c:	e7f8      	b.n	29360 <bt_gatt_attr_write_ccc+0x5c>
		cfg = find_ccc_cfg(NULL, ccc);
   2936e:	4639      	mov	r1, r7
   29370:	2000      	movs	r0, #0
   29372:	f00f fd27 	bl	38dc4 <find_ccc_cfg>
		if (!cfg) {
   29376:	4680      	mov	r8, r0
   29378:	b150      	cbz	r0, 29390 <bt_gatt_attr_write_ccc+0x8c>
   2937a:	2207      	movs	r2, #7
   2937c:	f109 0188 	add.w	r1, r9, #136	; 0x88
   29380:	3001      	adds	r0, #1
   29382:	f00d fcef 	bl	36d64 <memcpy>
		cfg->id = conn->id;
   29386:	f899 3008 	ldrb.w	r3, [r9, #8]
   2938a:	f888 3000 	strb.w	r3, [r8]
   2938e:	e7d3      	b.n	29338 <bt_gatt_attr_write_ccc+0x34>
   29390:	4b12      	ldr	r3, [pc, #72]	; (293dc <bt_gatt_attr_write_ccc+0xd8>)
   29392:	4a13      	ldr	r2, [pc, #76]	; (293e0 <bt_gatt_attr_write_ccc+0xdc>)
   29394:	1a9b      	subs	r3, r3, r2
   29396:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   29398:	f04f 0100 	mov.w	r1, #0
   2939c:	2202      	movs	r2, #2
   2939e:	f362 0102 	bfi	r1, r2, #0, #3
   293a2:	f36f 01c5 	bfc	r1, #3, #3
   293a6:	f363 118f 	bfi	r1, r3, #6, #10
   293aa:	480e      	ldr	r0, [pc, #56]	; (293e4 <bt_gatt_attr_write_ccc+0xe0>)
   293ac:	f7f7 f832 	bl	20414 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   293b0:	f06f 0010 	mvn.w	r0, #16
   293b4:	e7d4      	b.n	29360 <bt_gatt_attr_write_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   293b6:	4639      	mov	r1, r7
   293b8:	4630      	mov	r0, r6
   293ba:	f00f fc3b 	bl	38c34 <gatt_ccc_changed>
   293be:	e7cd      	b.n	2935c <bt_gatt_attr_write_ccc+0x58>
		clear_ccc_cfg(cfg);
   293c0:	4640      	mov	r0, r8
   293c2:	f00f fd2a 	bl	38e1a <clear_ccc_cfg>
   293c6:	e7ca      	b.n	2935e <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   293c8:	f06f 0006 	mvn.w	r0, #6
   293cc:	e7c8      	b.n	29360 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   293ce:	f06f 000c 	mvn.w	r0, #12
   293d2:	e7c5      	b.n	29360 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   293d4:	f06f 000d 	mvn.w	r0, #13
   293d8:	e7c2      	b.n	29360 <bt_gatt_attr_write_ccc+0x5c>
   293da:	bf00      	nop
   293dc:	0003d1d4 	.word	0x0003d1d4
   293e0:	0003d1a4 	.word	0x0003d1a4
   293e4:	0003fe00 	.word	0x0003fe00

000293e8 <parse_service>:
}

static uint16_t parse_service(struct bt_conn *conn, const void *pdu,
				  struct bt_gatt_discover_params *params,
				  uint16_t length)
{
   293e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293ec:	b08f      	sub	sp, #60	; 0x3c
   293ee:	4682      	mov	sl, r0
   293f0:	4689      	mov	r9, r1
   293f2:	4616      	mov	r6, r2
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Data can be either in UUID16 or UUID128 */
	switch (rsp->len) {
   293f4:	7809      	ldrb	r1, [r1, #0]
   293f6:	2906      	cmp	r1, #6
   293f8:	d01b      	beq.n	29432 <parse_service+0x4a>
   293fa:	2914      	cmp	r1, #20
   293fc:	d022      	beq.n	29444 <parse_service+0x5c>
   293fe:	4b3f      	ldr	r3, [pc, #252]	; (294fc <parse_service+0x114>)
   29400:	4a3f      	ldr	r2, [pc, #252]	; (29500 <parse_service+0x118>)
   29402:	1a9b      	subs	r3, r3, r2
   29404:	08db      	lsrs	r3, r3, #3
		break;
	case 20: /* UUID128 */
		u.uuid.type = BT_UUID_TYPE_128;
		break;
	default:
		BT_ERR("Invalid data len %u", rsp->len);
   29406:	f04f 0200 	mov.w	r2, #0
   2940a:	2001      	movs	r0, #1
   2940c:	f360 0202 	bfi	r2, r0, #0, #3
   29410:	f36f 02c5 	bfc	r2, #3, #3
   29414:	f363 128f 	bfi	r2, r3, #6, #10
   29418:	483a      	ldr	r0, [pc, #232]	; (29504 <parse_service+0x11c>)
   2941a:	f7f6 ff45 	bl	202a8 <log_1>
	if (length == 0U && end_handle) {
		return end_handle;
	}

done:
	params->func(conn, NULL, params);
   2941e:	6873      	ldr	r3, [r6, #4]
   29420:	4632      	mov	r2, r6
   29422:	2100      	movs	r1, #0
   29424:	4650      	mov	r0, sl
   29426:	4798      	blx	r3
	return 0;
   29428:	2700      	movs	r7, #0
}
   2942a:	4638      	mov	r0, r7
   2942c:	b00f      	add	sp, #60	; 0x3c
   2942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   29432:	2200      	movs	r2, #0
   29434:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	for (length--, pdu = rsp->data; length >= rsp->len;
   29438:	3b01      	subs	r3, #1
   2943a:	b29c      	uxth	r4, r3
   2943c:	f109 0501 	add.w	r5, r9, #1
	uint16_t start_handle, end_handle = 0U;
   29440:	2700      	movs	r7, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   29442:	e02a      	b.n	2949a <parse_service+0xb2>
		u.uuid.type = BT_UUID_TYPE_128;
   29444:	2202      	movs	r2, #2
   29446:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		break;
   2944a:	e7f5      	b.n	29438 <parse_service+0x50>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   2944c:	2202      	movs	r2, #2
   2944e:	1d29      	adds	r1, r5, #4
   29450:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   29454:	f00d fc86 	bl	36d64 <memcpy>
			break;
   29458:	e03d      	b.n	294d6 <parse_service+0xee>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   2945a:	2210      	movs	r2, #16
   2945c:	1d29      	adds	r1, r5, #4
   2945e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
   29462:	f00d fc7f 	bl	36d64 <memcpy>
			break;
   29466:	e036      	b.n	294d6 <parse_service+0xee>
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   29468:	f642 0301 	movw	r3, #10241	; 0x2801
   2946c:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.end_handle = end_handle;
   29470:	f8ad b00c 	strh.w	fp, [sp, #12]
		value.uuid = &u.uuid;
   29474:	ab09      	add	r3, sp, #36	; 0x24
   29476:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   29478:	ab01      	add	r3, sp, #4
   2947a:	9304      	str	r3, [sp, #16]
		attr.handle = start_handle;
   2947c:	f8ad 8020 	strh.w	r8, [sp, #32]
		attr.user_data = &value;
   29480:	ab02      	add	r3, sp, #8
   29482:	9307      	str	r3, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   29484:	6873      	ldr	r3, [r6, #4]
   29486:	4632      	mov	r2, r6
   29488:	a904      	add	r1, sp, #16
   2948a:	4650      	mov	r0, sl
   2948c:	4798      	blx	r3
   2948e:	b368      	cbz	r0, 294ec <parse_service+0x104>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   29490:	f899 3000 	ldrb.w	r3, [r9]
   29494:	1ae4      	subs	r4, r4, r3
   29496:	b2a4      	uxth	r4, r4
   29498:	441d      	add	r5, r3
	for (length--, pdu = rsp->data; length >= rsp->len;
   2949a:	f899 3000 	ldrb.w	r3, [r9]
   2949e:	429c      	cmp	r4, r3
   294a0:	d326      	bcc.n	294f0 <parse_service+0x108>
		struct bt_gatt_attr attr = {};
   294a2:	2300      	movs	r3, #0
   294a4:	9304      	str	r3, [sp, #16]
   294a6:	9305      	str	r3, [sp, #20]
   294a8:	9306      	str	r3, [sp, #24]
   294aa:	9307      	str	r3, [sp, #28]
   294ac:	9308      	str	r3, [sp, #32]
		start_handle = sys_le16_to_cpu(data->start_handle);
   294ae:	f8b5 8000 	ldrh.w	r8, [r5]
   294b2:	fa1f f388 	uxth.w	r3, r8
		if (!start_handle) {
   294b6:	2b00      	cmp	r3, #0
   294b8:	d0b1      	beq.n	2941e <parse_service+0x36>
		end_handle = sys_le16_to_cpu(data->end_handle);
   294ba:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   294be:	fa1f f78b 	uxth.w	r7, fp
		if (!end_handle || end_handle < start_handle) {
   294c2:	2f00      	cmp	r7, #0
   294c4:	d0ab      	beq.n	2941e <parse_service+0x36>
   294c6:	42bb      	cmp	r3, r7
   294c8:	d8a9      	bhi.n	2941e <parse_service+0x36>
		switch (u.uuid.type) {
   294ca:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   294ce:	2b00      	cmp	r3, #0
   294d0:	d0bc      	beq.n	2944c <parse_service+0x64>
   294d2:	2b02      	cmp	r3, #2
   294d4:	d0c1      	beq.n	2945a <parse_service+0x72>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   294d6:	2300      	movs	r3, #0
   294d8:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   294dc:	7c33      	ldrb	r3, [r6, #16]
   294de:	2b00      	cmp	r3, #0
   294e0:	d1c2      	bne.n	29468 <parse_service+0x80>
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   294e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   294e6:	f8ad 3006 	strh.w	r3, [sp, #6]
   294ea:	e7c1      	b.n	29470 <parse_service+0x88>
			return 0;
   294ec:	2700      	movs	r7, #0
   294ee:	e79c      	b.n	2942a <parse_service+0x42>
	if (length == 0U && end_handle) {
   294f0:	2c00      	cmp	r4, #0
   294f2:	d194      	bne.n	2941e <parse_service+0x36>
   294f4:	2f00      	cmp	r7, #0
   294f6:	d092      	beq.n	2941e <parse_service+0x36>
   294f8:	e797      	b.n	2942a <parse_service+0x42>
   294fa:	bf00      	nop
   294fc:	0003d1d4 	.word	0x0003d1d4
   29500:	0003d1a4 	.word	0x0003d1a4
   29504:	0003fe1c 	.word	0x0003fe1c

00029508 <sc_clear>:
{
   29508:	b538      	push	{r3, r4, r5, lr}
   2950a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2950c:	f100 0588 	add.w	r5, r0, #136	; 0x88
   29510:	4629      	mov	r1, r5
   29512:	7a00      	ldrb	r0, [r0, #8]
   29514:	f00d ff09 	bl	3732a <bt_addr_le_is_bonded>
   29518:	b1b8      	cbz	r0, 2954a <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   2951a:	4629      	mov	r1, r5
   2951c:	7a20      	ldrb	r0, [r4, #8]
   2951e:	f00f fd13 	bl	38f48 <bt_gatt_clear_sc>
		if (err) {
   29522:	4601      	mov	r1, r0
   29524:	b900      	cbnz	r0, 29528 <sc_clear+0x20>
}
   29526:	bd38      	pop	{r3, r4, r5, pc}
   29528:	4b0c      	ldr	r3, [pc, #48]	; (2955c <sc_clear+0x54>)
   2952a:	4a0d      	ldr	r2, [pc, #52]	; (29560 <sc_clear+0x58>)
   2952c:	1a9b      	subs	r3, r3, r2
   2952e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   29530:	f04f 0200 	mov.w	r2, #0
   29534:	2001      	movs	r0, #1
   29536:	f360 0202 	bfi	r2, r0, #0, #3
   2953a:	f36f 02c5 	bfc	r2, #3, #3
   2953e:	f363 128f 	bfi	r2, r3, #6, #10
   29542:	4808      	ldr	r0, [pc, #32]	; (29564 <sc_clear+0x5c>)
   29544:	f7f6 feb0 	bl	202a8 <log_1>
   29548:	e7ed      	b.n	29526 <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2954a:	4629      	mov	r1, r5
   2954c:	7a20      	ldrb	r0, [r4, #8]
   2954e:	f7ff fdf1 	bl	29134 <find_sc_cfg>
		if (cfg) {
   29552:	2800      	cmp	r0, #0
   29554:	d0e7      	beq.n	29526 <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   29556:	f00f fcf1 	bl	38f3c <clear_sc_cfg>
}
   2955a:	e7e4      	b.n	29526 <sc_clear+0x1e>
   2955c:	0003d1d4 	.word	0x0003d1d4
   29560:	0003d1a4 	.word	0x0003d1a4
   29564:	0003fe30 	.word	0x0003fe30

00029568 <sc_indicate_rsp>:
{
   29568:	b510      	push	{r4, lr}
   2956a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2956c:	4b19      	ldr	r3, [pc, #100]	; (295d4 <sc_indicate_rsp+0x6c>)
   2956e:	f103 0250 	add.w	r2, r3, #80	; 0x50
   29572:	f3bf 8f5b 	dmb	ish
   29576:	e852 1f00 	ldrex	r1, [r2]
   2957a:	f021 0102 	bic.w	r1, r1, #2
   2957e:	e842 1000 	strex	r0, r1, [r2]
   29582:	2800      	cmp	r0, #0
   29584:	d1f7      	bne.n	29576 <sc_indicate_rsp+0xe>
   29586:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2958a:	f3bf 8f5b 	dmb	ish
   2958e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   29590:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   29594:	f013 0f01 	tst.w	r3, #1
   29598:	d116      	bne.n	295c8 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   2959a:	4620      	mov	r0, r4
   2959c:	f7ff fda0 	bl	290e0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   295a0:	4603      	mov	r3, r0
   295a2:	b180      	cbz	r0, 295c6 <sc_indicate_rsp+0x5e>
   295a4:	7a02      	ldrb	r2, [r0, #8]
   295a6:	f012 0f01 	tst.w	r2, #1
   295aa:	d00c      	beq.n	295c6 <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   295ac:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   295ae:	f3bf 8f5b 	dmb	ish
   295b2:	e853 2f00 	ldrex	r2, [r3]
   295b6:	f042 0201 	orr.w	r2, r2, #1
   295ba:	e843 2100 	strex	r1, r2, [r3]
   295be:	2900      	cmp	r1, #0
   295c0:	d1f7      	bne.n	295b2 <sc_indicate_rsp+0x4a>
   295c2:	f3bf 8f5b 	dmb	ish
}
   295c6:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   295c8:	2200      	movs	r2, #0
   295ca:	2300      	movs	r3, #0
   295cc:	4802      	ldr	r0, [pc, #8]	; (295d8 <sc_indicate_rsp+0x70>)
   295ce:	f007 f889 	bl	306e4 <k_work_reschedule>
   295d2:	e7e2      	b.n	2959a <sc_indicate_rsp+0x32>
   295d4:	200041c0 	.word	0x200041c0
   295d8:	200041e0 	.word	0x200041e0

000295dc <parse_characteristic>:
{
   295dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   295e0:	b08e      	sub	sp, #56	; 0x38
   295e2:	4682      	mov	sl, r0
   295e4:	4688      	mov	r8, r1
   295e6:	4616      	mov	r6, r2
	switch (rsp->len) {
   295e8:	7809      	ldrb	r1, [r1, #0]
   295ea:	2907      	cmp	r1, #7
   295ec:	d01c      	beq.n	29628 <parse_characteristic+0x4c>
   295ee:	2915      	cmp	r1, #21
   295f0:	d024      	beq.n	2963c <parse_characteristic+0x60>
   295f2:	4b3e      	ldr	r3, [pc, #248]	; (296ec <parse_characteristic+0x110>)
   295f4:	4a3e      	ldr	r2, [pc, #248]	; (296f0 <parse_characteristic+0x114>)
   295f6:	1a9b      	subs	r3, r3, r2
   295f8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid data len %u", rsp->len);
   295fa:	f04f 0200 	mov.w	r2, #0
   295fe:	2001      	movs	r0, #1
   29600:	f360 0202 	bfi	r2, r0, #0, #3
   29604:	f36f 02c5 	bfc	r2, #3, #3
   29608:	f363 128f 	bfi	r2, r3, #6, #10
   2960c:	4839      	ldr	r0, [pc, #228]	; (296f4 <parse_characteristic+0x118>)
   2960e:	f7f6 fe4b 	bl	202a8 <log_1>
	params->func(conn, NULL, params);
   29612:	6873      	ldr	r3, [r6, #4]
   29614:	4632      	mov	r2, r6
   29616:	2100      	movs	r1, #0
   29618:	4650      	mov	r0, sl
   2961a:	4798      	blx	r3
	return 0;
   2961c:	f04f 0900 	mov.w	r9, #0
}
   29620:	4648      	mov	r0, r9
   29622:	b00e      	add	sp, #56	; 0x38
   29624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   29628:	2200      	movs	r2, #0
   2962a:	f88d 2020 	strb.w	r2, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   2962e:	3b01      	subs	r3, #1
   29630:	b29c      	uxth	r4, r3
   29632:	f108 0501 	add.w	r5, r8, #1
	uint16_t handle = 0U;
   29636:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   2963a:	e034      	b.n	296a6 <parse_characteristic+0xca>
		u.uuid.type = BT_UUID_TYPE_128;
   2963c:	2202      	movs	r2, #2
   2963e:	f88d 2020 	strb.w	r2, [sp, #32]
		break;
   29642:	e7f4      	b.n	2962e <parse_characteristic+0x52>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   29644:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   29648:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   2964c:	e03b      	b.n	296c6 <parse_characteristic+0xea>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   2964e:	2210      	movs	r2, #16
   29650:	1d69      	adds	r1, r5, #5
   29652:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   29656:	f00d fb85 	bl	36d64 <memcpy>
			break;
   2965a:	e034      	b.n	296c6 <parse_characteristic+0xea>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   2965c:	f8b5 2003 	ldrh.w	r2, [r5, #3]
   29660:	78ab      	ldrb	r3, [r5, #2]
   29662:	a908      	add	r1, sp, #32
   29664:	9101      	str	r1, [sp, #4]
   29666:	f8ad 2008 	strh.w	r2, [sp, #8]
   2966a:	f88d 300a 	strb.w	r3, [sp, #10]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   2966e:	2300      	movs	r3, #0
   29670:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   29674:	f642 0203 	movw	r2, #10243	; 0x2803
   29678:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
   2967c:	aa0d      	add	r2, sp, #52	; 0x34
   2967e:	9203      	str	r2, [sp, #12]
   29680:	9304      	str	r3, [sp, #16]
   29682:	9305      	str	r3, [sp, #20]
   29684:	aa01      	add	r2, sp, #4
   29686:	9206      	str	r2, [sp, #24]
   29688:	f88d 301e 	strb.w	r3, [sp, #30]
		attr.handle = handle;
   2968c:	f8ad 701c 	strh.w	r7, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   29690:	6873      	ldr	r3, [r6, #4]
   29692:	4632      	mov	r2, r6
   29694:	a903      	add	r1, sp, #12
   29696:	4650      	mov	r0, sl
   29698:	4798      	blx	r3
   2969a:	b1e8      	cbz	r0, 296d8 <parse_characteristic+0xfc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   2969c:	f898 3000 	ldrb.w	r3, [r8]
   296a0:	1ae4      	subs	r4, r4, r3
   296a2:	b2a4      	uxth	r4, r4
   296a4:	441d      	add	r5, r3
	for (length--, pdu = rsp->data; length >= rsp->len;
   296a6:	f898 3000 	ldrb.w	r3, [r8]
   296aa:	429c      	cmp	r4, r3
   296ac:	d317      	bcc.n	296de <parse_characteristic+0x102>
		handle = sys_le16_to_cpu(data->handle);
   296ae:	882f      	ldrh	r7, [r5, #0]
   296b0:	fa1f f987 	uxth.w	r9, r7
		if (!handle) {
   296b4:	f1b9 0f00 	cmp.w	r9, #0
   296b8:	d0ab      	beq.n	29612 <parse_characteristic+0x36>
		switch (u.uuid.type) {
   296ba:	f89d 3020 	ldrb.w	r3, [sp, #32]
   296be:	2b00      	cmp	r3, #0
   296c0:	d0c0      	beq.n	29644 <parse_characteristic+0x68>
   296c2:	2b02      	cmp	r3, #2
   296c4:	d0c3      	beq.n	2964e <parse_characteristic+0x72>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   296c6:	6831      	ldr	r1, [r6, #0]
   296c8:	2900      	cmp	r1, #0
   296ca:	d0c7      	beq.n	2965c <parse_characteristic+0x80>
   296cc:	a808      	add	r0, sp, #32
   296ce:	f00d fc75 	bl	36fbc <bt_uuid_cmp>
   296d2:	2800      	cmp	r0, #0
   296d4:	d0c2      	beq.n	2965c <parse_characteristic+0x80>
   296d6:	e7e1      	b.n	2969c <parse_characteristic+0xc0>
			return 0;
   296d8:	f04f 0900 	mov.w	r9, #0
   296dc:	e7a0      	b.n	29620 <parse_characteristic+0x44>
	if (length == 0U && handle) {
   296de:	2c00      	cmp	r4, #0
   296e0:	d197      	bne.n	29612 <parse_characteristic+0x36>
   296e2:	f1b9 0f00 	cmp.w	r9, #0
   296e6:	d094      	beq.n	29612 <parse_characteristic+0x36>
   296e8:	e79a      	b.n	29620 <parse_characteristic+0x44>
   296ea:	bf00      	nop
   296ec:	0003d1d4 	.word	0x0003d1d4
   296f0:	0003d1a4 	.word	0x0003d1a4
   296f4:	0003fe1c 	.word	0x0003fe1c

000296f8 <disconnected_cb>:
{
   296f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   296fc:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   296fe:	6882      	ldr	r2, [r0, #8]
   29700:	4b2e      	ldr	r3, [pc, #184]	; (297bc <disconnected_cb+0xc4>)
   29702:	429a      	cmp	r2, r3
   29704:	d002      	beq.n	2970c <disconnected_cb+0x14>
}
   29706:	2001      	movs	r0, #1
   29708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2970c:	4681      	mov	r9, r0
	ccc = attr->user_data;
   2970e:	68c6      	ldr	r6, [r0, #12]
	if (!ccc->value) {
   29710:	f8b6 30d2 	ldrh.w	r3, [r6, #210]	; 0xd2
   29714:	2b00      	cmp	r3, #0
   29716:	d0f6      	beq.n	29706 <disconnected_cb+0xe>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   29718:	2400      	movs	r4, #0
	value_used = false;
   2971a:	46a2      	mov	sl, r4
   2971c:	e003      	b.n	29726 <disconnected_cb+0x2e>
				bt_conn_unref(tmp);
   2971e:	4618      	mov	r0, r3
   29720:	f00e f83e 	bl	377a0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   29724:	3401      	adds	r4, #1
   29726:	2c14      	cmp	r4, #20
   29728:	d83a      	bhi.n	297a0 <disconnected_cb+0xa8>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2972a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   2972e:	eb06 0545 	add.w	r5, r6, r5, lsl #1
		if (!cfg->value) {
   29732:	892b      	ldrh	r3, [r5, #8]
   29734:	2b00      	cmp	r3, #0
   29736:	d0f5      	beq.n	29724 <disconnected_cb+0x2c>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   29738:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2973c:	462f      	mov	r7, r5
   2973e:	3701      	adds	r7, #1
   29740:	463a      	mov	r2, r7
   29742:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   29746:	4640      	mov	r0, r8
   29748:	f00e f90d 	bl	37966 <bt_conn_is_peer_addr_le>
   2974c:	b978      	cbnz	r0, 2976e <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2974e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   29752:	4639      	mov	r1, r7
   29754:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
   29758:	f7fd fe50 	bl	273fc <bt_conn_lookup_addr_le>
			if (tmp) {
   2975c:	4603      	mov	r3, r0
   2975e:	2800      	cmp	r0, #0
   29760:	d0e0      	beq.n	29724 <disconnected_cb+0x2c>
				if (tmp->state == BT_CONN_CONNECTED) {
   29762:	7b42      	ldrb	r2, [r0, #13]
   29764:	2a07      	cmp	r2, #7
   29766:	d1da      	bne.n	2971e <disconnected_cb+0x26>
					value_used = true;
   29768:	f04f 0a01 	mov.w	sl, #1
   2976c:	e7d7      	b.n	2971e <disconnected_cb+0x26>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2976e:	f108 0b88 	add.w	fp, r8, #136	; 0x88
   29772:	4659      	mov	r1, fp
   29774:	f898 0008 	ldrb.w	r0, [r8, #8]
   29778:	f00d fdd7 	bl	3732a <bt_addr_le_is_bonded>
   2977c:	b950      	cbnz	r0, 29794 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   2977e:	4b10      	ldr	r3, [pc, #64]	; (297c0 <disconnected_cb+0xc8>)
   29780:	429e      	cmp	r6, r3
   29782:	d003      	beq.n	2978c <disconnected_cb+0x94>
				clear_ccc_cfg(cfg);
   29784:	4628      	mov	r0, r5
   29786:	f00f fb48 	bl	38e1a <clear_ccc_cfg>
   2978a:	e7cb      	b.n	29724 <disconnected_cb+0x2c>
					sc_clear(conn);
   2978c:	4640      	mov	r0, r8
   2978e:	f7ff febb 	bl	29508 <sc_clear>
   29792:	e7f7      	b.n	29784 <disconnected_cb+0x8c>
   29794:	2207      	movs	r2, #7
   29796:	4659      	mov	r1, fp
   29798:	4638      	mov	r0, r7
   2979a:	f00d fae3 	bl	36d64 <memcpy>
}
   2979e:	e7c1      	b.n	29724 <disconnected_cb+0x2c>
	if (!value_used) {
   297a0:	f1ba 0f00 	cmp.w	sl, #0
   297a4:	d1af      	bne.n	29706 <disconnected_cb+0xe>
		ccc->value = 0U;
   297a6:	2300      	movs	r3, #0
   297a8:	f8a6 30d2 	strh.w	r3, [r6, #210]	; 0xd2
		if (ccc->cfg_changed) {
   297ac:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
   297b0:	2b00      	cmp	r3, #0
   297b2:	d0a8      	beq.n	29706 <disconnected_cb+0xe>
			ccc->cfg_changed(attr, ccc->value);
   297b4:	2100      	movs	r1, #0
   297b6:	4648      	mov	r0, r9
   297b8:	4798      	blx	r3
   297ba:	e7a4      	b.n	29706 <disconnected_cb+0xe>
   297bc:	00029305 	.word	0x00029305
   297c0:	20000738 	.word	0x20000738

000297c4 <gatt_find_type>:
{
   297c4:	b500      	push	{lr}
   297c6:	b083      	sub	sp, #12
   297c8:	460a      	mov	r2, r1
	switch (params->uuid->type) {
   297ca:	680b      	ldr	r3, [r1, #0]
   297cc:	7819      	ldrb	r1, [r3, #0]
   297ce:	b1a1      	cbz	r1, 297fa <gatt_find_type+0x36>
   297d0:	2902      	cmp	r1, #2
   297d2:	d014      	beq.n	297fe <gatt_find_type+0x3a>
   297d4:	4b0f      	ldr	r3, [pc, #60]	; (29814 <gatt_find_type+0x50>)
   297d6:	4a10      	ldr	r2, [pc, #64]	; (29818 <gatt_find_type+0x54>)
   297d8:	1a9b      	subs	r3, r3, r2
   297da:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   297dc:	f04f 0200 	mov.w	r2, #0
   297e0:	2001      	movs	r0, #1
   297e2:	f360 0202 	bfi	r2, r0, #0, #3
   297e6:	f36f 02c5 	bfc	r2, #3, #3
   297ea:	f363 128f 	bfi	r2, r3, #6, #10
   297ee:	480b      	ldr	r0, [pc, #44]	; (2981c <gatt_find_type+0x58>)
   297f0:	f7f6 fd5a 	bl	202a8 <log_1>
		return -EINVAL;
   297f4:	f06f 0015 	mvn.w	r0, #21
   297f8:	e009      	b.n	2980e <gatt_find_type+0x4a>
	switch (params->uuid->type) {
   297fa:	2308      	movs	r3, #8
   297fc:	e000      	b.n	29800 <gatt_find_type+0x3c>
		len += BT_UUID_SIZE_128;
   297fe:	2316      	movs	r3, #22
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   29800:	9301      	str	r3, [sp, #4]
   29802:	2306      	movs	r3, #6
   29804:	9300      	str	r3, [sp, #0]
   29806:	4b06      	ldr	r3, [pc, #24]	; (29820 <gatt_find_type+0x5c>)
   29808:	4906      	ldr	r1, [pc, #24]	; (29824 <gatt_find_type+0x60>)
   2980a:	f00f fc60 	bl	390ce <gatt_req_send>
}
   2980e:	b003      	add	sp, #12
   29810:	f85d fb04 	ldr.w	pc, [sp], #4
   29814:	0003d1d4 	.word	0x0003d1d4
   29818:	0003d1a4 	.word	0x0003d1a4
   2981c:	0003fe48 	.word	0x0003fe48
   29820:	000392c7 	.word	0x000392c7
   29824:	00039653 	.word	0x00039653

00029828 <gatt_read_group>:
	return 0;
}

static int gatt_read_group(struct bt_conn *conn,
			   struct bt_gatt_discover_params *params)
{
   29828:	b500      	push	{lr}
   2982a:	b083      	sub	sp, #12
   2982c:	460a      	mov	r2, r1
	BT_DBG("start_handle 0x%04x end_handle 0x%04x", params->start_handle,
	       params->end_handle);

	return gatt_req_send(conn, gatt_read_group_rsp, params,
   2982e:	2304      	movs	r3, #4
   29830:	9301      	str	r3, [sp, #4]
   29832:	2310      	movs	r3, #16
   29834:	9300      	str	r3, [sp, #0]
   29836:	4b03      	ldr	r3, [pc, #12]	; (29844 <gatt_read_group+0x1c>)
   29838:	4903      	ldr	r1, [pc, #12]	; (29848 <gatt_read_group+0x20>)
   2983a:	f00f fc48 	bl	390ce <gatt_req_send>
			     gatt_read_group_encode,
			     BT_ATT_OP_READ_GROUP_REQ,
			     sizeof(struct bt_att_read_group_req));
}
   2983e:	b003      	add	sp, #12
   29840:	f85d fb04 	ldr.w	pc, [sp], #4
   29844:	000391e9 	.word	0x000391e9
   29848:	000396eb 	.word	0x000396eb

0002984c <gatt_read_type>:
{
   2984c:	b500      	push	{lr}
   2984e:	b083      	sub	sp, #12
   29850:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   29852:	2304      	movs	r3, #4
   29854:	9301      	str	r3, [sp, #4]
   29856:	2308      	movs	r3, #8
   29858:	9300      	str	r3, [sp, #0]
   2985a:	4b03      	ldr	r3, [pc, #12]	; (29868 <gatt_read_type+0x1c>)
   2985c:	4903      	ldr	r1, [pc, #12]	; (2986c <gatt_read_type+0x20>)
   2985e:	f00f fc36 	bl	390ce <gatt_req_send>
}
   29862:	b003      	add	sp, #12
   29864:	f85d fb04 	ldr.w	pc, [sp], #4
   29868:	0003921f 	.word	0x0003921f
   2986c:	00039719 	.word	0x00039719

00029870 <read_included_uuid>:
{
   29870:	b500      	push	{lr}
   29872:	b083      	sub	sp, #12
   29874:	460a      	mov	r2, r1
	return gatt_req_send(conn, read_included_uuid_cb, params,
   29876:	2302      	movs	r3, #2
   29878:	9301      	str	r3, [sp, #4]
   2987a:	230a      	movs	r3, #10
   2987c:	9300      	str	r3, [sp, #0]
   2987e:	4b03      	ldr	r3, [pc, #12]	; (2988c <read_included_uuid+0x1c>)
   29880:	4903      	ldr	r1, [pc, #12]	; (29890 <read_included_uuid+0x20>)
   29882:	f00f fc24 	bl	390ce <gatt_req_send>
}
   29886:	b003      	add	sp, #12
   29888:	f85d fb04 	ldr.w	pc, [sp], #4
   2988c:	00039191 	.word	0x00039191
   29890:	0002a3fd 	.word	0x0002a3fd

00029894 <parse_include>:
{
   29894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29898:	b08e      	sub	sp, #56	; 0x38
   2989a:	4680      	mov	r8, r0
   2989c:	460f      	mov	r7, r1
   2989e:	4616      	mov	r6, r2
	switch (rsp->len) {
   298a0:	7809      	ldrb	r1, [r1, #0]
   298a2:	2906      	cmp	r1, #6
   298a4:	d00a      	beq.n	298bc <parse_include+0x28>
   298a6:	2908      	cmp	r1, #8
   298a8:	d10c      	bne.n	298c4 <parse_include+0x30>
		u.uuid.type = BT_UUID_TYPE_16;
   298aa:	2200      	movs	r2, #0
   298ac:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   298b0:	3b01      	subs	r3, #1
   298b2:	b29c      	uxth	r4, r3
   298b4:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   298b8:	2500      	movs	r5, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   298ba:	e048      	b.n	2994e <parse_include+0xba>
		u.uuid.type = BT_UUID_TYPE_128;
   298bc:	2202      	movs	r2, #2
   298be:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   298c2:	e7f5      	b.n	298b0 <parse_include+0x1c>
   298c4:	4b36      	ldr	r3, [pc, #216]	; (299a0 <parse_include+0x10c>)
   298c6:	4a37      	ldr	r2, [pc, #220]	; (299a4 <parse_include+0x110>)
   298c8:	1a9b      	subs	r3, r3, r2
   298ca:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid data len %u", rsp->len);
   298cc:	f04f 0200 	mov.w	r2, #0
   298d0:	2001      	movs	r0, #1
   298d2:	f360 0202 	bfi	r2, r0, #0, #3
   298d6:	f36f 02c5 	bfc	r2, #3, #3
   298da:	f363 128f 	bfi	r2, r3, #6, #10
   298de:	4832      	ldr	r0, [pc, #200]	; (299a8 <parse_include+0x114>)
   298e0:	f7f6 fce2 	bl	202a8 <log_1>
	params->func(conn, NULL, params);
   298e4:	6873      	ldr	r3, [r6, #4]
   298e6:	4632      	mov	r2, r6
   298e8:	2100      	movs	r1, #0
   298ea:	4640      	mov	r0, r8
   298ec:	4798      	blx	r3
	return 0;
   298ee:	2500      	movs	r5, #0
   298f0:	e00e      	b.n	29910 <parse_include+0x7c>
			value.uuid = &u.uuid;
   298f2:	ab06      	add	r3, sp, #24
   298f4:	930b      	str	r3, [sp, #44]	; 0x2c
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   298f6:	f8b9 3006 	ldrh.w	r3, [r9, #6]
   298fa:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   298fe:	e03f      	b.n	29980 <parse_include+0xec>
			params->_included.attr_handle = handle;
   29900:	8135      	strh	r5, [r6, #8]
			params->_included.start_handle = value.start_handle;
   29902:	8171      	strh	r1, [r6, #10]
			params->_included.end_handle = value.end_handle;
   29904:	81b2      	strh	r2, [r6, #12]
			return read_included_uuid(conn, params);
   29906:	4631      	mov	r1, r6
   29908:	4640      	mov	r0, r8
   2990a:	f7ff ffb1 	bl	29870 <read_included_uuid>
   2990e:	b285      	uxth	r5, r0
}
   29910:	4628      	mov	r0, r5
   29912:	b00e      	add	sp, #56	; 0x38
   29914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   29918:	2300      	movs	r3, #0
   2991a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   2991e:	f642 0202 	movw	r2, #10242	; 0x2802
   29922:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
   29926:	aa0d      	add	r2, sp, #52	; 0x34
   29928:	9201      	str	r2, [sp, #4]
   2992a:	9302      	str	r3, [sp, #8]
   2992c:	9303      	str	r3, [sp, #12]
   2992e:	aa0b      	add	r2, sp, #44	; 0x2c
   29930:	9204      	str	r2, [sp, #16]
   29932:	f88d 3016 	strb.w	r3, [sp, #22]
		attr.handle = handle;
   29936:	f8ad a014 	strh.w	sl, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2993a:	6873      	ldr	r3, [r6, #4]
   2993c:	4632      	mov	r2, r6
   2993e:	a901      	add	r1, sp, #4
   29940:	4640      	mov	r0, r8
   29942:	4798      	blx	r3
   29944:	b328      	cbz	r0, 29992 <parse_include+0xfe>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   29946:	783a      	ldrb	r2, [r7, #0]
   29948:	1aa4      	subs	r4, r4, r2
   2994a:	b2a4      	uxth	r4, r4
   2994c:	4491      	add	r9, r2
	for (length--, pdu = rsp->data; length >= rsp->len;
   2994e:	783b      	ldrb	r3, [r7, #0]
   29950:	429c      	cmp	r4, r3
   29952:	d320      	bcc.n	29996 <parse_include+0x102>
		handle = sys_le16_to_cpu(data->handle);
   29954:	f8b9 a000 	ldrh.w	sl, [r9]
   29958:	fa1f f58a 	uxth.w	r5, sl
		if (!handle) {
   2995c:	2d00      	cmp	r5, #0
   2995e:	d0c1      	beq.n	298e4 <parse_include+0x50>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   29960:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   29964:	b299      	uxth	r1, r3
   29966:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   2996a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   2996e:	b29a      	uxth	r2, r3
   29970:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		switch (u.uuid.type) {
   29974:	f89d 3018 	ldrb.w	r3, [sp, #24]
   29978:	2b00      	cmp	r3, #0
   2997a:	d0ba      	beq.n	298f2 <parse_include+0x5e>
   2997c:	2b02      	cmp	r3, #2
   2997e:	d0bf      	beq.n	29900 <parse_include+0x6c>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   29980:	6831      	ldr	r1, [r6, #0]
   29982:	2900      	cmp	r1, #0
   29984:	d0c8      	beq.n	29918 <parse_include+0x84>
   29986:	a806      	add	r0, sp, #24
   29988:	f00d fb18 	bl	36fbc <bt_uuid_cmp>
   2998c:	2800      	cmp	r0, #0
   2998e:	d0c3      	beq.n	29918 <parse_include+0x84>
   29990:	e7d9      	b.n	29946 <parse_include+0xb2>
			return 0;
   29992:	2500      	movs	r5, #0
   29994:	e7bc      	b.n	29910 <parse_include+0x7c>
	if (length == 0U && handle) {
   29996:	2c00      	cmp	r4, #0
   29998:	d1a4      	bne.n	298e4 <parse_include+0x50>
   2999a:	2d00      	cmp	r5, #0
   2999c:	d0a2      	beq.n	298e4 <parse_include+0x50>
   2999e:	e7b7      	b.n	29910 <parse_include+0x7c>
   299a0:	0003d1d4 	.word	0x0003d1d4
   299a4:	0003d1a4 	.word	0x0003d1a4
   299a8:	0003fe1c 	.word	0x0003fe1c

000299ac <gatt_find_info>:
	return 0;
}

static int gatt_find_info(struct bt_conn *conn,
			  struct bt_gatt_discover_params *params)
{
   299ac:	b500      	push	{lr}
   299ae:	b083      	sub	sp, #12
   299b0:	460a      	mov	r2, r1
	BT_DBG("start_handle 0x%04x end_handle 0x%04x", params->start_handle,
	       params->end_handle);

	return gatt_req_send(conn, gatt_find_info_rsp, params,
   299b2:	2304      	movs	r3, #4
   299b4:	9301      	str	r3, [sp, #4]
   299b6:	9300      	str	r3, [sp, #0]
   299b8:	4b03      	ldr	r3, [pc, #12]	; (299c8 <gatt_find_info+0x1c>)
   299ba:	4904      	ldr	r1, [pc, #16]	; (299cc <gatt_find_info+0x20>)
   299bc:	f00f fb87 	bl	390ce <gatt_req_send>
			     gatt_find_info_encode, BT_ATT_OP_FIND_INFO_REQ,
			     sizeof(struct bt_att_find_info_req));
}
   299c0:	b003      	add	sp, #12
   299c2:	f85d fb04 	ldr.w	pc, [sp], #4
   299c6:	bf00      	nop
   299c8:	000391a5 	.word	0x000391a5
   299cc:	0002a4b1 	.word	0x0002a4b1

000299d0 <gatt_read_uuid>:
	return 0;
}

static int gatt_read_uuid(struct bt_conn *conn,
			  struct bt_gatt_read_params *params)
{
   299d0:	b500      	push	{lr}
   299d2:	b083      	sub	sp, #12
   299d4:	460a      	mov	r2, r1
	BT_DBG("start_handle 0x%04x end_handle 0x%04x uuid %s",
		params->by_uuid.start_handle, params->by_uuid.end_handle,
		bt_uuid_str(params->by_uuid.uuid));

	return gatt_req_send(conn, gatt_read_rsp, params,
   299d6:	2304      	movs	r3, #4
   299d8:	9301      	str	r3, [sp, #4]
   299da:	2308      	movs	r3, #8
   299dc:	9300      	str	r3, [sp, #0]
   299de:	4b03      	ldr	r3, [pc, #12]	; (299ec <gatt_read_uuid+0x1c>)
   299e0:	4903      	ldr	r1, [pc, #12]	; (299f0 <gatt_read_uuid+0x20>)
   299e2:	f00f fb74 	bl	390ce <gatt_req_send>
			     gatt_read_uuid_encode, BT_ATT_OP_READ_TYPE_REQ,
			     sizeof(struct bt_att_read_type_req));
}
   299e6:	b003      	add	sp, #12
   299e8:	f85d fb04 	ldr.w	pc, [sp], #4
   299ec:	00039313 	.word	0x00039313
   299f0:	00039767 	.word	0x00039767

000299f4 <gatt_read_mult>:
	return 0;
}

static int gatt_read_mult(struct bt_conn *conn,
			  struct bt_gatt_read_params *params)
{
   299f4:	b500      	push	{lr}
   299f6:	b083      	sub	sp, #12
   299f8:	460a      	mov	r2, r1
	BT_DBG("handle_count %zu", params->handle_count);

	return gatt_req_send(conn, gatt_read_mult_rsp, params,
			     gatt_read_mult_encode, BT_ATT_OP_READ_MULT_REQ,
			     params->handle_count * sizeof(uint16_t));
   299fa:	684b      	ldr	r3, [r1, #4]
	return gatt_req_send(conn, gatt_read_mult_rsp, params,
   299fc:	005b      	lsls	r3, r3, #1
   299fe:	9301      	str	r3, [sp, #4]
   29a00:	230e      	movs	r3, #14
   29a02:	9300      	str	r3, [sp, #0]
   29a04:	4b03      	ldr	r3, [pc, #12]	; (29a14 <gatt_read_mult+0x20>)
   29a06:	4904      	ldr	r1, [pc, #16]	; (29a18 <gatt_read_mult+0x24>)
   29a08:	f00f fb61 	bl	390ce <gatt_req_send>
}
   29a0c:	b003      	add	sp, #12
   29a0e:	f85d fb04 	ldr.w	pc, [sp], #4
   29a12:	bf00      	nop
   29a14:	00039267 	.word	0x00039267
   29a18:	00038ca1 	.word	0x00038ca1

00029a1c <gatt_read_blob>:
{
   29a1c:	b500      	push	{lr}
   29a1e:	b083      	sub	sp, #12
   29a20:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_read_rsp, params,
   29a22:	2304      	movs	r3, #4
   29a24:	9301      	str	r3, [sp, #4]
   29a26:	230c      	movs	r3, #12
   29a28:	9300      	str	r3, [sp, #0]
   29a2a:	4b03      	ldr	r3, [pc, #12]	; (29a38 <gatt_read_blob+0x1c>)
   29a2c:	4903      	ldr	r1, [pc, #12]	; (29a3c <gatt_read_blob+0x20>)
   29a2e:	f00f fb4e 	bl	390ce <gatt_req_send>
}
   29a32:	b003      	add	sp, #12
   29a34:	f85d fb04 	ldr.w	pc, [sp], #4
   29a38:	000391d1 	.word	0x000391d1
   29a3c:	00039767 	.word	0x00039767

00029a40 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   29a40:	b500      	push	{lr}
   29a42:	b083      	sub	sp, #12
   29a44:	460a      	mov	r2, r1
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   29a46:	2304      	movs	r3, #4
   29a48:	9301      	str	r3, [sp, #4]
   29a4a:	2312      	movs	r3, #18
   29a4c:	9300      	str	r3, [sp, #0]
   29a4e:	4b03      	ldr	r3, [pc, #12]	; (29a5c <gatt_write_ccc+0x1c>)
   29a50:	4903      	ldr	r1, [pc, #12]	; (29a60 <gatt_write_ccc+0x20>)
   29a52:	f00f fb3c 	bl	390ce <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   29a56:	b003      	add	sp, #12
   29a58:	f85d fb04 	ldr.w	pc, [sp], #4
   29a5c:	0003928d 	.word	0x0003928d
   29a60:	00038fcd 	.word	0x00038fcd

00029a64 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   29a64:	4b13      	ldr	r3, [pc, #76]	; (29ab4 <bt_gatt_init+0x50>)
   29a66:	2201      	movs	r2, #1
   29a68:	f3bf 8f5b 	dmb	ish
   29a6c:	e853 1f00 	ldrex	r1, [r3]
   29a70:	2900      	cmp	r1, #0
   29a72:	d103      	bne.n	29a7c <bt_gatt_init+0x18>
   29a74:	e843 2000 	strex	r0, r2, [r3]
   29a78:	2800      	cmp	r0, #0
   29a7a:	d1f7      	bne.n	29a6c <bt_gatt_init+0x8>
   29a7c:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   29a80:	d116      	bne.n	29ab0 <bt_gatt_init+0x4c>
{
   29a82:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   29a84:	f7ff fa8e 	bl	28fa4 <bt_gatt_service_init>
	list->head = NULL;
   29a88:	4b0b      	ldr	r3, [pc, #44]	; (29ab8 <bt_gatt_init+0x54>)
   29a8a:	2200      	movs	r2, #0
   29a8c:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   29a8e:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   29a90:	4c0a      	ldr	r4, [pc, #40]	; (29abc <bt_gatt_init+0x58>)
   29a92:	490b      	ldr	r1, [pc, #44]	; (29ac0 <bt_gatt_init+0x5c>)
   29a94:	4620      	mov	r0, r4
   29a96:	f012 fd59 	bl	3c54c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   29a9a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   29a9e:	2300      	movs	r3, #0
   29aa0:	4620      	mov	r0, r4
   29aa2:	f006 fe17 	bl	306d4 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   29aa6:	4907      	ldr	r1, [pc, #28]	; (29ac4 <bt_gatt_init+0x60>)
   29aa8:	4807      	ldr	r0, [pc, #28]	; (29ac8 <bt_gatt_init+0x64>)
   29aaa:	f012 fd4f 	bl	3c54c <k_work_init_delayable>
}
   29aae:	bd10      	pop	{r4, pc}
   29ab0:	4770      	bx	lr
   29ab2:	bf00      	nop
   29ab4:	20008420 	.word	0x20008420
   29ab8:	200082c8 	.word	0x200082c8
   29abc:	20004168 	.word	0x20004168
   29ac0:	000395b1 	.word	0x000395b1
   29ac4:	00029e9d 	.word	0x00029e9d
   29ac8:	200041e0 	.word	0x200041e0

00029acc <bt_gatt_attr_get_handle>:
	if (!attr) {
   29acc:	b328      	cbz	r0, 29b1a <bt_gatt_attr_get_handle+0x4e>
{
   29ace:	b4f0      	push	{r4, r5, r6, r7}
   29ad0:	4606      	mov	r6, r0
	if (attr->handle) {
   29ad2:	8a00      	ldrh	r0, [r0, #16]
   29ad4:	bb20      	cbnz	r0, 29b20 <bt_gatt_attr_get_handle+0x54>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   29ad6:	4d13      	ldr	r5, [pc, #76]	; (29b24 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   29ad8:	2201      	movs	r2, #1
   29ada:	e003      	b.n	29ae4 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   29adc:	686b      	ldr	r3, [r5, #4]
   29ade:	441a      	add	r2, r3
   29ae0:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   29ae2:	3508      	adds	r5, #8
   29ae4:	4b10      	ldr	r3, [pc, #64]	; (29b28 <bt_gatt_attr_get_handle+0x5c>)
   29ae6:	429d      	cmp	r5, r3
   29ae8:	d21a      	bcs.n	29b20 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   29aea:	682c      	ldr	r4, [r5, #0]
   29aec:	42b4      	cmp	r4, r6
   29aee:	d8f5      	bhi.n	29adc <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   29af0:	686f      	ldr	r7, [r5, #4]
   29af2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   29af6:	009b      	lsls	r3, r3, #2
   29af8:	3b14      	subs	r3, #20
   29afa:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   29afc:	42b3      	cmp	r3, r6
   29afe:	d3ed      	bcc.n	29adc <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   29b00:	2300      	movs	r3, #0
   29b02:	429f      	cmp	r7, r3
   29b04:	d9ed      	bls.n	29ae2 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   29b06:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   29b0a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   29b0e:	42b1      	cmp	r1, r6
   29b10:	d005      	beq.n	29b1e <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   29b12:	3301      	adds	r3, #1
   29b14:	3201      	adds	r2, #1
   29b16:	b292      	uxth	r2, r2
   29b18:	e7f3      	b.n	29b02 <bt_gatt_attr_get_handle+0x36>
		return 0;
   29b1a:	2000      	movs	r0, #0
}
   29b1c:	4770      	bx	lr
				return handle;
   29b1e:	4610      	mov	r0, r2
}
   29b20:	bcf0      	pop	{r4, r5, r6, r7}
   29b22:	4770      	bx	lr
   29b24:	0003d194 	.word	0x0003d194
   29b28:	0003d1a4 	.word	0x0003d1a4

00029b2c <bt_gatt_foreach_attr_type>:
{
   29b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b30:	b089      	sub	sp, #36	; 0x24
   29b32:	4607      	mov	r7, r0
   29b34:	468a      	mov	sl, r1
   29b36:	4690      	mov	r8, r2
   29b38:	4699      	mov	r9, r3
   29b3a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   29b3e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   29b42:	b91b      	cbnz	r3, 29b4c <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   29b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29b48:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   29b4c:	4b19      	ldr	r3, [pc, #100]	; (29bb4 <bt_gatt_foreach_attr_type+0x88>)
   29b4e:	881b      	ldrh	r3, [r3, #0]
   29b50:	42bb      	cmp	r3, r7
   29b52:	d22c      	bcs.n	29bae <bt_gatt_foreach_attr_type+0x82>
}
   29b54:	b009      	add	sp, #36	; 0x24
   29b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   29b5a:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   29b5c:	3608      	adds	r6, #8
   29b5e:	4b16      	ldr	r3, [pc, #88]	; (29bb8 <bt_gatt_foreach_attr_type+0x8c>)
   29b60:	429e      	cmp	r6, r3
   29b62:	d2f7      	bcs.n	29b54 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   29b64:	6873      	ldr	r3, [r6, #4]
   29b66:	18e2      	adds	r2, r4, r3
   29b68:	42ba      	cmp	r2, r7
   29b6a:	d3f6      	bcc.n	29b5a <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   29b6c:	2500      	movs	r5, #0
   29b6e:	9707      	str	r7, [sp, #28]
   29b70:	6873      	ldr	r3, [r6, #4]
   29b72:	42ab      	cmp	r3, r5
   29b74:	d919      	bls.n	29baa <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   29b76:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   29b7a:	f8cd b010 	str.w	fp, [sp, #16]
   29b7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   29b80:	9303      	str	r3, [sp, #12]
   29b82:	ab12      	add	r3, sp, #72	; 0x48
   29b84:	9302      	str	r3, [sp, #8]
   29b86:	f8cd 9004 	str.w	r9, [sp, #4]
   29b8a:	f8cd 8000 	str.w	r8, [sp]
   29b8e:	4653      	mov	r3, sl
   29b90:	9a07      	ldr	r2, [sp, #28]
   29b92:	4621      	mov	r1, r4
   29b94:	6837      	ldr	r7, [r6, #0]
   29b96:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   29b9a:	f00f fa56 	bl	3904a <gatt_foreach_iter>
   29b9e:	2800      	cmp	r0, #0
   29ba0:	d0d8      	beq.n	29b54 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   29ba2:	3501      	adds	r5, #1
   29ba4:	3401      	adds	r4, #1
   29ba6:	b2a4      	uxth	r4, r4
   29ba8:	e7e2      	b.n	29b70 <bt_gatt_foreach_attr_type+0x44>
   29baa:	9f07      	ldr	r7, [sp, #28]
   29bac:	e7d6      	b.n	29b5c <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   29bae:	4e03      	ldr	r6, [pc, #12]	; (29bbc <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   29bb0:	2401      	movs	r4, #1
   29bb2:	e7d4      	b.n	29b5e <bt_gatt_foreach_attr_type+0x32>
   29bb4:	2000da68 	.word	0x2000da68
   29bb8:	0003d1a4 	.word	0x0003d1a4
   29bbc:	0003d194 	.word	0x0003d194

00029bc0 <db_hash_gen>:
{
   29bc0:	b510      	push	{r4, lr}
   29bc2:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   29bc4:	2300      	movs	r3, #0
   29bc6:	9348      	str	r3, [sp, #288]	; 0x120
   29bc8:	9349      	str	r3, [sp, #292]	; 0x124
   29bca:	934a      	str	r3, [sp, #296]	; 0x128
   29bcc:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   29bce:	aa1c      	add	r2, sp, #112	; 0x70
   29bd0:	a948      	add	r1, sp, #288	; 0x120
   29bd2:	a804      	add	r0, sp, #16
   29bd4:	f00c ff0a 	bl	369ec <tc_cmac_setup>
   29bd8:	b190      	cbz	r0, 29c00 <db_hash_gen+0x40>
   29bda:	ac04      	add	r4, sp, #16
   29bdc:	9402      	str	r4, [sp, #8]
   29bde:	4b26      	ldr	r3, [pc, #152]	; (29c78 <db_hash_gen+0xb8>)
   29be0:	9301      	str	r3, [sp, #4]
   29be2:	2200      	movs	r2, #0
   29be4:	9200      	str	r2, [sp, #0]
   29be6:	4613      	mov	r3, r2
   29be8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   29bec:	2001      	movs	r0, #1
   29bee:	f7ff ff9d 	bl	29b2c <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   29bf2:	4621      	mov	r1, r4
   29bf4:	4821      	ldr	r0, [pc, #132]	; (29c7c <db_hash_gen+0xbc>)
   29bf6:	f00c ff94 	bl	36b22 <tc_cmac_final>
   29bfa:	b190      	cbz	r0, 29c22 <db_hash_gen+0x62>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   29bfc:	2300      	movs	r3, #0
   29bfe:	e029      	b.n	29c54 <db_hash_gen+0x94>
   29c00:	4b1f      	ldr	r3, [pc, #124]	; (29c80 <db_hash_gen+0xc0>)
   29c02:	4a20      	ldr	r2, [pc, #128]	; (29c84 <db_hash_gen+0xc4>)
   29c04:	1a9b      	subs	r3, r3, r2
   29c06:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   29c08:	f04f 0100 	mov.w	r1, #0
   29c0c:	2201      	movs	r2, #1
   29c0e:	f362 0102 	bfi	r1, r2, #0, #3
   29c12:	f36f 01c5 	bfc	r1, #3, #3
   29c16:	f363 118f 	bfi	r1, r3, #6, #10
   29c1a:	481b      	ldr	r0, [pc, #108]	; (29c88 <db_hash_gen+0xc8>)
   29c1c:	f7f6 fbfa 	bl	20414 <log_0>
		return;
   29c20:	e027      	b.n	29c72 <db_hash_gen+0xb2>
   29c22:	4b17      	ldr	r3, [pc, #92]	; (29c80 <db_hash_gen+0xc0>)
   29c24:	4a17      	ldr	r2, [pc, #92]	; (29c84 <db_hash_gen+0xc4>)
   29c26:	1a9b      	subs	r3, r3, r2
   29c28:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   29c2a:	f04f 0100 	mov.w	r1, #0
   29c2e:	2201      	movs	r2, #1
   29c30:	f362 0102 	bfi	r1, r2, #0, #3
   29c34:	f36f 01c5 	bfc	r1, #3, #3
   29c38:	f363 118f 	bfi	r1, r3, #6, #10
   29c3c:	4813      	ldr	r0, [pc, #76]	; (29c8c <db_hash_gen+0xcc>)
   29c3e:	f7f6 fbe9 	bl	20414 <log_0>
		return;
   29c42:	e016      	b.n	29c72 <db_hash_gen+0xb2>
		uint8_t tmp = ((uint8_t *)buf)[i];
   29c44:	4a0d      	ldr	r2, [pc, #52]	; (29c7c <db_hash_gen+0xbc>)
   29c46:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   29c48:	f1c3 010f 	rsb	r1, r3, #15
   29c4c:	5c54      	ldrb	r4, [r2, r1]
   29c4e:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   29c50:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   29c52:	3301      	adds	r3, #1
   29c54:	2b07      	cmp	r3, #7
   29c56:	d9f5      	bls.n	29c44 <db_hash_gen+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29c58:	4b0d      	ldr	r3, [pc, #52]	; (29c90 <db_hash_gen+0xd0>)
   29c5a:	f3bf 8f5b 	dmb	ish
   29c5e:	e853 2f00 	ldrex	r2, [r3]
   29c62:	f042 0204 	orr.w	r2, r2, #4
   29c66:	e843 2100 	strex	r1, r2, [r3]
   29c6a:	2900      	cmp	r1, #0
   29c6c:	d1f7      	bne.n	29c5e <db_hash_gen+0x9e>
   29c6e:	f3bf 8f5b 	dmb	ish
}
   29c72:	b04c      	add	sp, #304	; 0x130
   29c74:	bd10      	pop	{r4, pc}
   29c76:	bf00      	nop
   29c78:	00038ce5 	.word	0x00038ce5
   29c7c:	20004158 	.word	0x20004158
   29c80:	0003d1d4 	.word	0x0003d1d4
   29c84:	0003d1a4 	.word	0x0003d1a4
   29c88:	0003fe60 	.word	0x0003fe60
   29c8c:	0003fe7c 	.word	0x0003fe7c
   29c90:	20004210 	.word	0x20004210

00029c94 <gatt_find_by_uuid>:
{
   29c94:	b510      	push	{r4, lr}
   29c96:	b084      	sub	sp, #16
   29c98:	4604      	mov	r4, r0
   29c9a:	460a      	mov	r2, r1
	found->attr = NULL;
   29c9c:	2300      	movs	r3, #0
   29c9e:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   29ca0:	9002      	str	r0, [sp, #8]
   29ca2:	4907      	ldr	r1, [pc, #28]	; (29cc0 <gatt_find_by_uuid+0x2c>)
   29ca4:	9101      	str	r1, [sp, #4]
   29ca6:	2101      	movs	r1, #1
   29ca8:	9100      	str	r1, [sp, #0]
   29caa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   29cae:	8880      	ldrh	r0, [r0, #4]
   29cb0:	f7ff ff3c 	bl	29b2c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   29cb4:	6820      	ldr	r0, [r4, #0]
}
   29cb6:	3800      	subs	r0, #0
   29cb8:	bf18      	it	ne
   29cba:	2001      	movne	r0, #1
   29cbc:	b004      	add	sp, #16
   29cbe:	bd10      	pop	{r4, pc}
   29cc0:	00038c8f 	.word	0x00038c8f

00029cc4 <gatt_indicate>:
{
   29cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29cc8:	b082      	sub	sp, #8
   29cca:	4606      	mov	r6, r0
   29ccc:	460f      	mov	r7, r1
   29cce:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   29cd0:	2214      	movs	r2, #20
   29cd2:	6861      	ldr	r1, [r4, #4]
   29cd4:	f00f fc71 	bl	395ba <bt_gatt_check_perm>
   29cd8:	bb80      	cbnz	r0, 29d3c <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   29cda:	8aa5      	ldrh	r5, [r4, #20]
   29cdc:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   29cde:	9500      	str	r5, [sp, #0]
   29ce0:	231d      	movs	r3, #29
   29ce2:	2200      	movs	r2, #0
   29ce4:	4621      	mov	r1, r4
   29ce6:	482d      	ldr	r0, [pc, #180]	; (29d9c <gatt_indicate+0xd8>)
   29ce8:	f00f f9da 	bl	390a0 <gatt_req_alloc>
	if (!req) {
   29cec:	4680      	mov	r8, r0
   29cee:	2800      	cmp	r0, #0
   29cf0:	d051      	beq.n	29d96 <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   29cf2:	462a      	mov	r2, r5
   29cf4:	211d      	movs	r1, #29
   29cf6:	4630      	mov	r0, r6
   29cf8:	f7fe fe18 	bl	2892c <bt_att_create_pdu>
	if (!buf) {
   29cfc:	4681      	mov	r9, r0
   29cfe:	b380      	cbz	r0, 29d62 <gatt_indicate+0x9e>
   29d00:	f100 0a08 	add.w	sl, r0, #8
   29d04:	2102      	movs	r1, #2
   29d06:	4650      	mov	r0, sl
   29d08:	f010 fed3 	bl	3aab2 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   29d0c:	4605      	mov	r5, r0
   29d0e:	f825 7b02 	strh.w	r7, [r5], #2
   29d12:	8aa1      	ldrh	r1, [r4, #20]
   29d14:	4650      	mov	r0, sl
   29d16:	f010 fecc 	bl	3aab2 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   29d1a:	8aa2      	ldrh	r2, [r4, #20]
   29d1c:	6921      	ldr	r1, [r4, #16]
   29d1e:	4628      	mov	r0, r5
   29d20:	f00d f820 	bl	36d64 <memcpy>
	req->buf = buf;
   29d24:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   29d28:	4641      	mov	r1, r8
   29d2a:	4630      	mov	r0, r6
   29d2c:	f00e fed6 	bl	38adc <bt_att_req_send>
	if (err) {
   29d30:	4604      	mov	r4, r0
   29d32:	bb60      	cbnz	r0, 29d8e <gatt_indicate+0xca>
}
   29d34:	4620      	mov	r0, r4
   29d36:	b002      	add	sp, #8
   29d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29d3c:	4b18      	ldr	r3, [pc, #96]	; (29da0 <gatt_indicate+0xdc>)
   29d3e:	4a19      	ldr	r2, [pc, #100]	; (29da4 <gatt_indicate+0xe0>)
   29d40:	1a9b      	subs	r3, r3, r2
   29d42:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   29d44:	f04f 0100 	mov.w	r1, #0
   29d48:	2202      	movs	r2, #2
   29d4a:	f362 0102 	bfi	r1, r2, #0, #3
   29d4e:	f36f 01c5 	bfc	r1, #3, #3
   29d52:	f363 118f 	bfi	r1, r3, #6, #10
   29d56:	4814      	ldr	r0, [pc, #80]	; (29da8 <gatt_indicate+0xe4>)
   29d58:	f7f6 fb5c 	bl	20414 <log_0>
		return -EPERM;
   29d5c:	f04f 34ff 	mov.w	r4, #4294967295
   29d60:	e7e8      	b.n	29d34 <gatt_indicate+0x70>
   29d62:	4b0f      	ldr	r3, [pc, #60]	; (29da0 <gatt_indicate+0xdc>)
   29d64:	4a0f      	ldr	r2, [pc, #60]	; (29da4 <gatt_indicate+0xe0>)
   29d66:	1a9b      	subs	r3, r3, r2
   29d68:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   29d6a:	f04f 0100 	mov.w	r1, #0
   29d6e:	2202      	movs	r2, #2
   29d70:	f362 0102 	bfi	r1, r2, #0, #3
   29d74:	f36f 01c5 	bfc	r1, #3, #3
   29d78:	f363 118f 	bfi	r1, r3, #6, #10
   29d7c:	480b      	ldr	r0, [pc, #44]	; (29dac <gatt_indicate+0xe8>)
   29d7e:	f7f6 fb49 	bl	20414 <log_0>
		bt_att_req_free(req);
   29d82:	4640      	mov	r0, r8
   29d84:	f7ff f826 	bl	28dd4 <bt_att_req_free>
		return -ENOMEM;
   29d88:	f06f 040b 	mvn.w	r4, #11
   29d8c:	e7d2      	b.n	29d34 <gatt_indicate+0x70>
		bt_att_req_free(req);
   29d8e:	4640      	mov	r0, r8
   29d90:	f7ff f820 	bl	28dd4 <bt_att_req_free>
   29d94:	e7ce      	b.n	29d34 <gatt_indicate+0x70>
		return -ENOMEM;
   29d96:	f06f 040b 	mvn.w	r4, #11
   29d9a:	e7cb      	b.n	29d34 <gatt_indicate+0x70>
   29d9c:	00038c6d 	.word	0x00038c6d
   29da0:	0003d1d4 	.word	0x0003d1d4
   29da4:	0003d1a4 	.word	0x0003d1a4
   29da8:	0003fe98 	.word	0x0003fe98
   29dac:	0003feb0 	.word	0x0003feb0

00029db0 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29db0:	f3bf 8f5b 	dmb	ish
   29db4:	4b37      	ldr	r3, [pc, #220]	; (29e94 <bt_gatt_indicate+0xe4>)
   29db6:	681b      	ldr	r3, [r3, #0]
   29db8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   29dbc:	f013 0f02 	tst.w	r3, #2
   29dc0:	d05e      	beq.n	29e80 <bt_gatt_indicate+0xd0>
{
   29dc2:	b530      	push	{r4, r5, lr}
   29dc4:	b08d      	sub	sp, #52	; 0x34
   29dc6:	4605      	mov	r5, r0
   29dc8:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   29dca:	b110      	cbz	r0, 29dd2 <bt_gatt_indicate+0x22>
   29dcc:	7b43      	ldrb	r3, [r0, #13]
   29dce:	2b07      	cmp	r3, #7
   29dd0:	d159      	bne.n	29e86 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   29dd2:	6860      	ldr	r0, [r4, #4]
   29dd4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   29dd6:	f7ff fe79 	bl	29acc <bt_gatt_attr_get_handle>
   29dda:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   29dde:	6821      	ldr	r1, [r4, #0]
   29de0:	b341      	cbz	r1, 29e34 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   29de2:	a805      	add	r0, sp, #20
   29de4:	f7ff ff56 	bl	29c94 <gatt_find_by_uuid>
   29de8:	2800      	cmp	r0, #0
   29dea:	d04f      	beq.n	29e8c <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   29dec:	9b05      	ldr	r3, [sp, #20]
   29dee:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   29df0:	9b05      	ldr	r3, [sp, #20]
   29df2:	6818      	ldr	r0, [r3, #0]
   29df4:	2300      	movs	r3, #0
   29df6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   29dfa:	f642 0303 	movw	r3, #10243	; 0x2803
   29dfe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   29e02:	a90b      	add	r1, sp, #44	; 0x2c
   29e04:	f00d f8da 	bl	36fbc <bt_uuid_cmp>
   29e08:	b948      	cbnz	r0, 29e1e <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   29e0a:	9805      	ldr	r0, [sp, #20]
   29e0c:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   29e0e:	799b      	ldrb	r3, [r3, #6]
   29e10:	f013 0f20 	tst.w	r3, #32
   29e14:	d013      	beq.n	29e3e <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   29e16:	f00f fb7c 	bl	39512 <bt_gatt_attr_value_handle>
   29e1a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   29e1e:	b18d      	cbz	r5, 29e44 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   29e20:	2301      	movs	r3, #1
   29e22:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   29e24:	4622      	mov	r2, r4
   29e26:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   29e2a:	4628      	mov	r0, r5
   29e2c:	f7ff ff4a 	bl	29cc4 <gatt_indicate>
}
   29e30:	b00d      	add	sp, #52	; 0x34
   29e32:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   29e34:	2800      	cmp	r0, #0
   29e36:	d1db      	bne.n	29df0 <bt_gatt_indicate+0x40>
			return -ENOENT;
   29e38:	f06f 0001 	mvn.w	r0, #1
   29e3c:	e7f8      	b.n	29e30 <bt_gatt_indicate+0x80>
			return -EINVAL;
   29e3e:	f06f 0015 	mvn.w	r0, #21
   29e42:	e7f5      	b.n	29e30 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   29e44:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   29e48:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   29e4a:	2302      	movs	r3, #2
   29e4c:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   29e50:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   29e52:	2300      	movs	r3, #0
   29e54:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   29e56:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   29e5a:	f642 1202 	movw	r2, #10498	; 0x2902
   29e5e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   29e62:	aa05      	add	r2, sp, #20
   29e64:	9202      	str	r2, [sp, #8]
   29e66:	4a0c      	ldr	r2, [pc, #48]	; (29e98 <bt_gatt_indicate+0xe8>)
   29e68:	9201      	str	r2, [sp, #4]
   29e6a:	2201      	movs	r2, #1
   29e6c:	9200      	str	r2, [sp, #0]
   29e6e:	aa0a      	add	r2, sp, #40	; 0x28
   29e70:	f64f 71ff 	movw	r1, #65535	; 0xffff
   29e74:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   29e78:	f7ff fe58 	bl	29b2c <bt_gatt_foreach_attr_type>
	return data.err;
   29e7c:	9807      	ldr	r0, [sp, #28]
   29e7e:	e7d7      	b.n	29e30 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   29e80:	f06f 000a 	mvn.w	r0, #10
}
   29e84:	4770      	bx	lr
		return -ENOTCONN;
   29e86:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29e8a:	e7d1      	b.n	29e30 <bt_gatt_indicate+0x80>
			return -ENOENT;
   29e8c:	f06f 0001 	mvn.w	r0, #1
   29e90:	e7ce      	b.n	29e30 <bt_gatt_indicate+0x80>
   29e92:	bf00      	nop
   29e94:	2000037c 	.word	0x2000037c
   29e98:	0002a065 	.word	0x0002a065

00029e9c <sc_process>:
{
   29e9c:	b510      	push	{r4, lr}
   29e9e:	b082      	sub	sp, #8
   29ea0:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   29ea2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   29ea6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   29eaa:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   29eae:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   29eb2:	f1a0 0120 	sub.w	r1, r0, #32
   29eb6:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29eba:	f3bf 8f5b 	dmb	ish
   29ebe:	e854 2f00 	ldrex	r2, [r4]
   29ec2:	f022 0201 	bic.w	r2, r2, #1
   29ec6:	e844 2000 	strex	r0, r2, [r4]
   29eca:	2800      	cmp	r0, #0
   29ecc:	d1f7      	bne.n	29ebe <sc_process+0x22>
   29ece:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   29ed2:	2000      	movs	r0, #0
   29ed4:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   29ed8:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   29edc:	4a0e      	ldr	r2, [pc, #56]	; (29f18 <sc_process+0x7c>)
   29ede:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   29ee2:	4a0e      	ldr	r2, [pc, #56]	; (29f1c <sc_process+0x80>)
   29ee4:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   29ee8:	aa01      	add	r2, sp, #4
   29eea:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   29eee:	2204      	movs	r2, #4
   29ef0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   29ef4:	f7ff ff5c 	bl	29db0 <bt_gatt_indicate>
   29ef8:	b108      	cbz	r0, 29efe <sc_process+0x62>
}
   29efa:	b002      	add	sp, #8
   29efc:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29efe:	f3bf 8f5b 	dmb	ish
   29f02:	e854 3f00 	ldrex	r3, [r4]
   29f06:	f043 0302 	orr.w	r3, r3, #2
   29f0a:	e844 3200 	strex	r2, r3, [r4]
   29f0e:	2a00      	cmp	r2, #0
   29f10:	d1f7      	bne.n	29f02 <sc_process+0x66>
   29f12:	f3bf 8f5b 	dmb	ish
   29f16:	e7f0      	b.n	29efa <sc_process+0x5e>
   29f18:	0003fff8 	.word	0x0003fff8
   29f1c:	00029569 	.word	0x00029569

00029f20 <sc_restore>:
{
   29f20:	b510      	push	{r4, lr}
   29f22:	b082      	sub	sp, #8
   29f24:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   29f26:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29f2a:	7a00      	ldrb	r0, [r0, #8]
   29f2c:	f7ff f902 	bl	29134 <find_sc_cfg>
	if (!cfg) {
   29f30:	b1f0      	cbz	r0, 29f70 <sc_restore+0x50>
   29f32:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   29f34:	8902      	ldrh	r2, [r0, #8]
   29f36:	b90a      	cbnz	r2, 29f3c <sc_restore+0x1c>
   29f38:	8941      	ldrh	r1, [r0, #10]
   29f3a:	b1c9      	cbz	r1, 29f70 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   29f3c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   29f40:	895b      	ldrh	r3, [r3, #10]
   29f42:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   29f46:	4620      	mov	r0, r4
   29f48:	f7fd f918 	bl	2717c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   29f4c:	4912      	ldr	r1, [pc, #72]	; (29f98 <sc_restore+0x78>)
   29f4e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   29f52:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   29f56:	4a11      	ldr	r2, [pc, #68]	; (29f9c <sc_restore+0x7c>)
   29f58:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   29f5a:	4a11      	ldr	r2, [pc, #68]	; (29fa0 <sc_restore+0x80>)
   29f5c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   29f5e:	aa01      	add	r2, sp, #4
   29f60:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   29f62:	2204      	movs	r2, #4
   29f64:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   29f66:	4619      	mov	r1, r3
   29f68:	4620      	mov	r0, r4
   29f6a:	f7ff ff21 	bl	29db0 <bt_gatt_indicate>
   29f6e:	b908      	cbnz	r0, 29f74 <sc_restore+0x54>
}
   29f70:	b002      	add	sp, #8
   29f72:	bd10      	pop	{r4, pc}
   29f74:	4b0b      	ldr	r3, [pc, #44]	; (29fa4 <sc_restore+0x84>)
   29f76:	4a0c      	ldr	r2, [pc, #48]	; (29fa8 <sc_restore+0x88>)
   29f78:	1a9b      	subs	r3, r3, r2
   29f7a:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   29f7c:	f04f 0100 	mov.w	r1, #0
   29f80:	2201      	movs	r2, #1
   29f82:	f362 0102 	bfi	r1, r2, #0, #3
   29f86:	f36f 01c5 	bfc	r1, #3, #3
   29f8a:	f363 118f 	bfi	r1, r3, #6, #10
   29f8e:	4807      	ldr	r0, [pc, #28]	; (29fac <sc_restore+0x8c>)
   29f90:	f7f6 fa40 	bl	20414 <log_0>
   29f94:	e7ec      	b.n	29f70 <sc_restore+0x50>
   29f96:	bf00      	nop
   29f98:	20008520 	.word	0x20008520
   29f9c:	0003fff8 	.word	0x0003fff8
   29fa0:	00038f85 	.word	0x00038f85
   29fa4:	0003d1d4 	.word	0x0003d1d4
   29fa8:	0003d1a4 	.word	0x0003d1a4
   29fac:	0003fed8 	.word	0x0003fed8

00029fb0 <gatt_notify>:
{
   29fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29fb4:	4606      	mov	r6, r0
   29fb6:	460f      	mov	r7, r1
   29fb8:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   29fba:	2214      	movs	r2, #20
   29fbc:	6861      	ldr	r1, [r4, #4]
   29fbe:	f00f fafc 	bl	395ba <bt_gatt_check_perm>
   29fc2:	bb08      	cbnz	r0, 2a008 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   29fc4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   29fc6:	3202      	adds	r2, #2
   29fc8:	211b      	movs	r1, #27
   29fca:	4630      	mov	r0, r6
   29fcc:	f7fe fcae 	bl	2892c <bt_att_create_pdu>
	if (!buf) {
   29fd0:	4680      	mov	r8, r0
   29fd2:	b360      	cbz	r0, 2a02e <gatt_notify+0x7e>
   29fd4:	f100 0908 	add.w	r9, r0, #8
   29fd8:	2102      	movs	r1, #2
   29fda:	4648      	mov	r0, r9
   29fdc:	f010 fd69 	bl	3aab2 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   29fe0:	4605      	mov	r5, r0
   29fe2:	f825 7b02 	strh.w	r7, [r5], #2
   29fe6:	89a1      	ldrh	r1, [r4, #12]
   29fe8:	4648      	mov	r0, r9
   29fea:	f010 fd62 	bl	3aab2 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   29fee:	89a2      	ldrh	r2, [r4, #12]
   29ff0:	68a1      	ldr	r1, [r4, #8]
   29ff2:	4628      	mov	r0, r5
   29ff4:	f00c feb6 	bl	36d64 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   29ff8:	6963      	ldr	r3, [r4, #20]
   29ffa:	6922      	ldr	r2, [r4, #16]
   29ffc:	4641      	mov	r1, r8
   29ffe:	4630      	mov	r0, r6
   2a000:	f00e fd47 	bl	38a92 <bt_att_send>
}
   2a004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a008:	4b12      	ldr	r3, [pc, #72]	; (2a054 <gatt_notify+0xa4>)
   2a00a:	4a13      	ldr	r2, [pc, #76]	; (2a058 <gatt_notify+0xa8>)
   2a00c:	1a9b      	subs	r3, r3, r2
   2a00e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   2a010:	f04f 0100 	mov.w	r1, #0
   2a014:	2202      	movs	r2, #2
   2a016:	f362 0102 	bfi	r1, r2, #0, #3
   2a01a:	f36f 01c5 	bfc	r1, #3, #3
   2a01e:	f363 118f 	bfi	r1, r3, #6, #10
   2a022:	480e      	ldr	r0, [pc, #56]	; (2a05c <gatt_notify+0xac>)
   2a024:	f7f6 f9f6 	bl	20414 <log_0>
		return -EPERM;
   2a028:	f04f 30ff 	mov.w	r0, #4294967295
   2a02c:	e7ea      	b.n	2a004 <gatt_notify+0x54>
   2a02e:	4b09      	ldr	r3, [pc, #36]	; (2a054 <gatt_notify+0xa4>)
   2a030:	4a09      	ldr	r2, [pc, #36]	; (2a058 <gatt_notify+0xa8>)
   2a032:	1a9b      	subs	r3, r3, r2
   2a034:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   2a036:	f04f 0100 	mov.w	r1, #0
   2a03a:	2202      	movs	r2, #2
   2a03c:	f362 0102 	bfi	r1, r2, #0, #3
   2a040:	f36f 01c5 	bfc	r1, #3, #3
   2a044:	f363 118f 	bfi	r1, r3, #6, #10
   2a048:	4805      	ldr	r0, [pc, #20]	; (2a060 <gatt_notify+0xb0>)
   2a04a:	f7f6 f9e3 	bl	20414 <log_0>
		return -ENOMEM;
   2a04e:	f06f 000b 	mvn.w	r0, #11
   2a052:	e7d7      	b.n	2a004 <gatt_notify+0x54>
   2a054:	0003d1d4 	.word	0x0003d1d4
   2a058:	0003d1a4 	.word	0x0003d1a4
   2a05c:	0003fe98 	.word	0x0003fe98
   2a060:	0003fef8 	.word	0x0003fef8

0002a064 <notify_cb>:
{
   2a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a068:	b083      	sub	sp, #12
   2a06a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2a06c:	6882      	ldr	r2, [r0, #8]
   2a06e:	4b51      	ldr	r3, [pc, #324]	; (2a1b4 <notify_cb+0x150>)
   2a070:	429a      	cmp	r2, r3
   2a072:	d005      	beq.n	2a080 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   2a074:	f04f 0a01 	mov.w	sl, #1
}
   2a078:	4650      	mov	r0, sl
   2a07a:	b003      	add	sp, #12
   2a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a080:	4607      	mov	r7, r0
	ccc = attr->user_data;
   2a082:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   2a084:	4b4c      	ldr	r3, [pc, #304]	; (2a1b8 <notify_cb+0x154>)
   2a086:	429d      	cmp	r5, r3
   2a088:	d031      	beq.n	2a0ee <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2a08a:	2400      	movs	r4, #0
   2a08c:	e05d      	b.n	2a14a <notify_cb+0xe6>
				sc = (struct sc_data *)data->ind_params->data;
   2a08e:	6933      	ldr	r3, [r6, #16]
   2a090:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   2a092:	eb09 0049 	add.w	r0, r9, r9, lsl #1
   2a096:	8853      	ldrh	r3, [r2, #2]
   2a098:	8812      	ldrh	r2, [r2, #0]
   2a09a:	4621      	mov	r1, r4
   2a09c:	4c47      	ldr	r4, [pc, #284]	; (2a1bc <notify_cb+0x158>)
   2a09e:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
   2a0a2:	f7ff f8eb 	bl	2927c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2a0a6:	f109 0901 	add.w	r9, r9, #1
   2a0aa:	f1b9 0f14 	cmp.w	r9, #20
   2a0ae:	d8ec      	bhi.n	2a08a <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2a0b0:	eb09 0449 	add.w	r4, r9, r9, lsl #1
   2a0b4:	4b41      	ldr	r3, [pc, #260]	; (2a1bc <notify_cb+0x158>)
   2a0b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2a0ba:	3401      	adds	r4, #1
   2a0bc:	2300      	movs	r3, #0
   2a0be:	9300      	str	r3, [sp, #0]
   2a0c0:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   2a0c4:	2207      	movs	r2, #7
   2a0c6:	4669      	mov	r1, sp
   2a0c8:	4620      	mov	r0, r4
   2a0ca:	f00c fe1e 	bl	36d0a <memcmp>
   2a0ce:	2800      	cmp	r0, #0
   2a0d0:	d0e9      	beq.n	2a0a6 <notify_cb+0x42>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   2a0d2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   2a0d6:	2207      	movs	r2, #7
   2a0d8:	4621      	mov	r1, r4
   2a0da:	4838      	ldr	r0, [pc, #224]	; (2a1bc <notify_cb+0x158>)
   2a0dc:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   2a0e0:	f7fd fa06 	bl	274f0 <bt_conn_lookup_state_le>
			if (!conn) {
   2a0e4:	2800      	cmp	r0, #0
   2a0e6:	d0d2      	beq.n	2a08e <notify_cb+0x2a>
			bt_conn_unref(conn);
   2a0e8:	f00d fb5a 	bl	377a0 <bt_conn_unref>
   2a0ec:	e7db      	b.n	2a0a6 <notify_cb+0x42>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2a0ee:	f04f 0900 	mov.w	r9, #0
   2a0f2:	e7da      	b.n	2a0aa <notify_cb+0x46>
			bt_conn_unref(conn);
   2a0f4:	f00d fb54 	bl	377a0 <bt_conn_unref>
			continue;
   2a0f8:	e026      	b.n	2a148 <notify_cb+0xe4>
			bt_conn_unref(conn);
   2a0fa:	4648      	mov	r0, r9
   2a0fc:	f00d fb50 	bl	377a0 <bt_conn_unref>
			continue;
   2a100:	e022      	b.n	2a148 <notify_cb+0xe4>
   2a102:	4b2f      	ldr	r3, [pc, #188]	; (2a1c0 <notify_cb+0x15c>)
   2a104:	4a2f      	ldr	r2, [pc, #188]	; (2a1c4 <notify_cb+0x160>)
   2a106:	1a9b      	subs	r3, r3, r2
   2a108:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   2a10a:	2202      	movs	r2, #2
   2a10c:	f362 0802 	bfi	r8, r2, #0, #3
   2a110:	f36f 08c5 	bfc	r8, #3, #3
   2a114:	f363 188f 	bfi	r8, r3, #6, #10
   2a118:	4641      	mov	r1, r8
   2a11a:	482b      	ldr	r0, [pc, #172]	; (2a1c8 <notify_cb+0x164>)
   2a11c:	f7f6 f97a 	bl	20414 <log_0>
			continue;
   2a120:	e012      	b.n	2a148 <notify_cb+0xe4>
			err = gatt_indicate(conn, data->handle,
   2a122:	6932      	ldr	r2, [r6, #16]
   2a124:	88b1      	ldrh	r1, [r6, #4]
   2a126:	4648      	mov	r0, r9
   2a128:	f7ff fdcc 	bl	29cc4 <gatt_indicate>
			if (err == 0) {
   2a12c:	4683      	mov	fp, r0
   2a12e:	b918      	cbnz	r0, 2a138 <notify_cb+0xd4>
				data->ind_params->_ref++;
   2a130:	6932      	ldr	r2, [r6, #16]
   2a132:	7d93      	ldrb	r3, [r2, #22]
   2a134:	3301      	adds	r3, #1
   2a136:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2a138:	4648      	mov	r0, r9
   2a13a:	f00d fb31 	bl	377a0 <bt_conn_unref>
		if (err < 0) {
   2a13e:	f1bb 0f00 	cmp.w	fp, #0
   2a142:	db99      	blt.n	2a078 <notify_cb+0x14>
		data->err = 0;
   2a144:	2300      	movs	r3, #0
   2a146:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2a148:	3401      	adds	r4, #1
   2a14a:	2c14      	cmp	r4, #20
   2a14c:	d82f      	bhi.n	2a1ae <notify_cb+0x14a>
		if (cfg->value != data->type) {
   2a14e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2a152:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   2a156:	891a      	ldrh	r2, [r3, #8]
   2a158:	89b3      	ldrh	r3, [r6, #12]
   2a15a:	429a      	cmp	r2, r3
   2a15c:	d1f4      	bne.n	2a148 <notify_cb+0xe4>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2a15e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2a162:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   2a166:	3101      	adds	r1, #1
   2a168:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   2a16c:	f7fd f946 	bl	273fc <bt_conn_lookup_addr_le>
		if (!conn) {
   2a170:	4681      	mov	r9, r0
   2a172:	2800      	cmp	r0, #0
   2a174:	d0e8      	beq.n	2a148 <notify_cb+0xe4>
		if (conn->state != BT_CONN_CONNECTED) {
   2a176:	7b43      	ldrb	r3, [r0, #13]
   2a178:	2b07      	cmp	r3, #7
   2a17a:	d1bb      	bne.n	2a0f4 <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   2a17c:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2a180:	b11b      	cbz	r3, 2a18a <notify_cb+0x126>
   2a182:	4639      	mov	r1, r7
   2a184:	4798      	blx	r3
   2a186:	2800      	cmp	r0, #0
   2a188:	d0b7      	beq.n	2a0fa <notify_cb+0x96>
		if (bt_gatt_check_perm(conn, attr,
   2a18a:	2214      	movs	r2, #20
   2a18c:	4639      	mov	r1, r7
   2a18e:	4648      	mov	r0, r9
   2a190:	f00f fa13 	bl	395ba <bt_gatt_check_perm>
   2a194:	4682      	mov	sl, r0
   2a196:	2800      	cmp	r0, #0
   2a198:	d1b3      	bne.n	2a102 <notify_cb+0x9e>
		if (data->type == BT_GATT_CCC_INDICATE) {
   2a19a:	89b3      	ldrh	r3, [r6, #12]
   2a19c:	2b02      	cmp	r3, #2
   2a19e:	d0c0      	beq.n	2a122 <notify_cb+0xbe>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2a1a0:	6932      	ldr	r2, [r6, #16]
   2a1a2:	88b1      	ldrh	r1, [r6, #4]
   2a1a4:	4648      	mov	r0, r9
   2a1a6:	f7ff ff03 	bl	29fb0 <gatt_notify>
   2a1aa:	4683      	mov	fp, r0
   2a1ac:	e7c4      	b.n	2a138 <notify_cb+0xd4>
	return BT_GATT_ITER_CONTINUE;
   2a1ae:	f04f 0a01 	mov.w	sl, #1
   2a1b2:	e761      	b.n	2a078 <notify_cb+0x14>
   2a1b4:	00029305 	.word	0x00029305
   2a1b8:	20000738 	.word	0x20000738
   2a1bc:	20008424 	.word	0x20008424
   2a1c0:	0003d1d4 	.word	0x0003d1d4
   2a1c4:	0003d1a4 	.word	0x0003d1a4
   2a1c8:	0003fe98 	.word	0x0003fe98

0002a1cc <update_ccc>:
{
   2a1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a1d0:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   2a1d2:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
   2a1d6:	6882      	ldr	r2, [r0, #8]
   2a1d8:	4b2a      	ldr	r3, [pc, #168]	; (2a284 <update_ccc+0xb8>)
   2a1da:	429a      	cmp	r2, r3
   2a1dc:	d002      	beq.n	2a1e4 <update_ccc+0x18>
}
   2a1de:	2001      	movs	r0, #1
   2a1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a1e4:	4606      	mov	r6, r0
	ccc = attr->user_data;
   2a1e6:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2a1e8:	2400      	movs	r4, #0
   2a1ea:	e019      	b.n	2a220 <update_ccc+0x54>
   2a1ec:	4b26      	ldr	r3, [pc, #152]	; (2a288 <update_ccc+0xbc>)
   2a1ee:	4a27      	ldr	r2, [pc, #156]	; (2a28c <update_ccc+0xc0>)
   2a1f0:	1a9b      	subs	r3, r3, r2
   2a1f2:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   2a1f4:	2202      	movs	r2, #2
   2a1f6:	f362 0902 	bfi	r9, r2, #0, #3
   2a1fa:	f36f 09c5 	bfc	r9, #3, #3
   2a1fe:	f363 198f 	bfi	r9, r3, #6, #10
   2a202:	464a      	mov	r2, r9
   2a204:	4631      	mov	r1, r6
   2a206:	4822      	ldr	r0, [pc, #136]	; (2a290 <update_ccc+0xc4>)
   2a208:	f7f6 f84e 	bl	202a8 <log_1>
				continue;
   2a20c:	e007      	b.n	2a21e <update_ccc+0x52>
				sec = BT_SECURITY_L3;
   2a20e:	f04f 0a03 	mov.w	sl, #3
   2a212:	e026      	b.n	2a262 <update_ccc+0x96>
				if (data->sec < sec) {
   2a214:	793b      	ldrb	r3, [r7, #4]
   2a216:	459a      	cmp	sl, r3
   2a218:	d901      	bls.n	2a21e <update_ccc+0x52>
					data->sec = sec;
   2a21a:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2a21e:	3401      	adds	r4, #1
   2a220:	2c14      	cmp	r4, #20
   2a222:	d8dc      	bhi.n	2a1de <update_ccc+0x12>
		if (!cfg->value ||
   2a224:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2a228:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   2a22c:	891b      	ldrh	r3, [r3, #8]
   2a22e:	2b00      	cmp	r3, #0
   2a230:	d0f5      	beq.n	2a21e <update_ccc+0x52>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2a232:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2a236:	eb05 0243 	add.w	r2, r5, r3, lsl #1
   2a23a:	3201      	adds	r2, #1
   2a23c:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   2a240:	4640      	mov	r0, r8
   2a242:	f00d fb90 	bl	37966 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2a246:	2800      	cmp	r0, #0
   2a248:	d0e9      	beq.n	2a21e <update_ccc+0x52>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2a24a:	222a      	movs	r2, #42	; 0x2a
   2a24c:	4631      	mov	r1, r6
   2a24e:	4640      	mov	r0, r8
   2a250:	f00f f9b3 	bl	395ba <bt_gatt_check_perm>
		if (err) {
   2a254:	b150      	cbz	r0, 2a26c <update_ccc+0xa0>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2a256:	2803      	cmp	r0, #3
   2a258:	d0c8      	beq.n	2a1ec <update_ccc+0x20>
			if (err == BT_ATT_ERR_AUTHENTICATION) {
   2a25a:	2805      	cmp	r0, #5
   2a25c:	d0d7      	beq.n	2a20e <update_ccc+0x42>
			sec = BT_SECURITY_L2;
   2a25e:	f04f 0a02 	mov.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   2a262:	4640      	mov	r0, r8
   2a264:	f00d fb64 	bl	37930 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   2a268:	4582      	cmp	sl, r0
   2a26a:	d8d3      	bhi.n	2a214 <update_ccc+0x48>
		gatt_ccc_changed(attr, ccc);
   2a26c:	4629      	mov	r1, r5
   2a26e:	4630      	mov	r0, r6
   2a270:	f00e fce0 	bl	38c34 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2a274:	4b07      	ldr	r3, [pc, #28]	; (2a294 <update_ccc+0xc8>)
   2a276:	429d      	cmp	r5, r3
   2a278:	d1b1      	bne.n	2a1de <update_ccc+0x12>
			sc_restore(conn);
   2a27a:	4640      	mov	r0, r8
   2a27c:	f7ff fe50 	bl	29f20 <sc_restore>
   2a280:	e7ad      	b.n	2a1de <update_ccc+0x12>
   2a282:	bf00      	nop
   2a284:	00029305 	.word	0x00029305
   2a288:	0003d1d4 	.word	0x0003d1d4
   2a28c:	0003d1a4 	.word	0x0003d1a4
   2a290:	0003ff24 	.word	0x0003ff24
   2a294:	20000738 	.word	0x20000738

0002a298 <bt_gatt_discover>:
	if (conn->state != BT_CONN_CONNECTED) {
   2a298:	7b43      	ldrb	r3, [r0, #13]
   2a29a:	2b07      	cmp	r3, #7
   2a29c:	f040 80a4 	bne.w	2a3e8 <bt_gatt_discover+0x150>
{
   2a2a0:	b530      	push	{r4, r5, lr}
   2a2a2:	b089      	sub	sp, #36	; 0x24
   2a2a4:	4605      	mov	r5, r0
   2a2a6:	460c      	mov	r4, r1
	switch (params->type) {
   2a2a8:	7c09      	ldrb	r1, [r1, #16]
   2a2aa:	2906      	cmp	r1, #6
   2a2ac:	f200 8089 	bhi.w	2a3c2 <bt_gatt_discover+0x12a>
   2a2b0:	e8df f001 	tbb	[pc, r1]
   2a2b4:	1e1e0404 	.word	0x1e1e0404
   2a2b8:	7f4e      	.short	0x7f4e
   2a2ba:	0e          	.byte	0x0e
   2a2bb:	00          	.byte	0x00
		if (params->uuid) {
   2a2bc:	6823      	ldr	r3, [r4, #0]
   2a2be:	b11b      	cbz	r3, 2a2c8 <bt_gatt_discover+0x30>
			return gatt_find_type(conn, params);
   2a2c0:	4621      	mov	r1, r4
   2a2c2:	f7ff fa7f 	bl	297c4 <gatt_find_type>
   2a2c6:	e017      	b.n	2a2f8 <bt_gatt_discover+0x60>
		return gatt_read_group(conn, params);
   2a2c8:	4621      	mov	r1, r4
   2a2ca:	f7ff faad 	bl	29828 <gatt_read_group>
   2a2ce:	e013      	b.n	2a2f8 <bt_gatt_discover+0x60>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   2a2d0:	6820      	ldr	r0, [r4, #0]
   2a2d2:	2800      	cmp	r0, #0
   2a2d4:	d039      	beq.n	2a34a <bt_gatt_discover+0xb2>
   2a2d6:	7803      	ldrb	r3, [r0, #0]
   2a2d8:	2b00      	cmp	r3, #0
   2a2da:	d136      	bne.n	2a34a <bt_gatt_discover+0xb2>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   2a2dc:	f88d 3000 	strb.w	r3, [sp]
   2a2e0:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   2a2e4:	f8ad 3002 	strh.w	r3, [sp, #2]
   2a2e8:	4669      	mov	r1, sp
   2a2ea:	f00c fe67 	bl	36fbc <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   2a2ee:	b928      	cbnz	r0, 2a2fc <bt_gatt_discover+0x64>
		return gatt_read_type(conn, params);
   2a2f0:	4621      	mov	r1, r4
   2a2f2:	4628      	mov	r0, r5
   2a2f4:	f7ff faaa 	bl	2984c <gatt_read_type>
}
   2a2f8:	b009      	add	sp, #36	; 0x24
   2a2fa:	bd30      	pop	{r4, r5, pc}
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   2a2fc:	2300      	movs	r3, #0
   2a2fe:	f88d 3004 	strb.w	r3, [sp, #4]
   2a302:	f642 1302 	movw	r3, #10498	; 0x2902
   2a306:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a30a:	a901      	add	r1, sp, #4
   2a30c:	6820      	ldr	r0, [r4, #0]
   2a30e:	f00c fe55 	bl	36fbc <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   2a312:	2800      	cmp	r0, #0
   2a314:	d0ec      	beq.n	2a2f0 <bt_gatt_discover+0x58>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   2a316:	2300      	movs	r3, #0
   2a318:	f88d 3008 	strb.w	r3, [sp, #8]
   2a31c:	f642 1303 	movw	r3, #10499	; 0x2903
   2a320:	f8ad 300a 	strh.w	r3, [sp, #10]
   2a324:	a902      	add	r1, sp, #8
   2a326:	6820      	ldr	r0, [r4, #0]
   2a328:	f00c fe48 	bl	36fbc <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   2a32c:	2800      	cmp	r0, #0
   2a32e:	d0df      	beq.n	2a2f0 <bt_gatt_discover+0x58>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   2a330:	2300      	movs	r3, #0
   2a332:	f88d 300c 	strb.w	r3, [sp, #12]
   2a336:	f642 1304 	movw	r3, #10500	; 0x2904
   2a33a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a33e:	a903      	add	r1, sp, #12
   2a340:	6820      	ldr	r0, [r4, #0]
   2a342:	f00c fe3b 	bl	36fbc <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   2a346:	2800      	cmp	r0, #0
   2a348:	d0d2      	beq.n	2a2f0 <bt_gatt_discover+0x58>
			return -EINVAL;
   2a34a:	f06f 0015 	mvn.w	r0, #21
   2a34e:	e7d3      	b.n	2a2f8 <bt_gatt_discover+0x60>
		if (params->uuid &&
   2a350:	6820      	ldr	r0, [r4, #0]
   2a352:	b370      	cbz	r0, 2a3b2 <bt_gatt_discover+0x11a>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   2a354:	2300      	movs	r3, #0
   2a356:	f88d 3010 	strb.w	r3, [sp, #16]
   2a35a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2a35e:	f8ad 3012 	strh.w	r3, [sp, #18]
   2a362:	a904      	add	r1, sp, #16
   2a364:	f00c fe2a 	bl	36fbc <bt_uuid_cmp>
		if (params->uuid &&
   2a368:	b340      	cbz	r0, 2a3bc <bt_gatt_discover+0x124>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   2a36a:	2300      	movs	r3, #0
   2a36c:	f88d 3014 	strb.w	r3, [sp, #20]
   2a370:	f642 0301 	movw	r3, #10241	; 0x2801
   2a374:	f8ad 3016 	strh.w	r3, [sp, #22]
   2a378:	a905      	add	r1, sp, #20
   2a37a:	6820      	ldr	r0, [r4, #0]
   2a37c:	f00c fe1e 	bl	36fbc <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   2a380:	b1e0      	cbz	r0, 2a3bc <bt_gatt_discover+0x124>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   2a382:	2300      	movs	r3, #0
   2a384:	f88d 3018 	strb.w	r3, [sp, #24]
   2a388:	f642 0302 	movw	r3, #10242	; 0x2802
   2a38c:	f8ad 301a 	strh.w	r3, [sp, #26]
   2a390:	a906      	add	r1, sp, #24
   2a392:	6820      	ldr	r0, [r4, #0]
   2a394:	f00c fe12 	bl	36fbc <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   2a398:	b180      	cbz	r0, 2a3bc <bt_gatt_discover+0x124>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   2a39a:	2300      	movs	r3, #0
   2a39c:	f88d 301c 	strb.w	r3, [sp, #28]
   2a3a0:	f642 0303 	movw	r3, #10243	; 0x2803
   2a3a4:	f8ad 301e 	strh.w	r3, [sp, #30]
   2a3a8:	a907      	add	r1, sp, #28
   2a3aa:	6820      	ldr	r0, [r4, #0]
   2a3ac:	f00c fe06 	bl	36fbc <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   2a3b0:	b120      	cbz	r0, 2a3bc <bt_gatt_discover+0x124>
		return gatt_find_info(conn, params);
   2a3b2:	4621      	mov	r1, r4
   2a3b4:	4628      	mov	r0, r5
   2a3b6:	f7ff faf9 	bl	299ac <gatt_find_info>
   2a3ba:	e79d      	b.n	2a2f8 <bt_gatt_discover+0x60>
			return -EINVAL;
   2a3bc:	f06f 0015 	mvn.w	r0, #21
   2a3c0:	e79a      	b.n	2a2f8 <bt_gatt_discover+0x60>
   2a3c2:	4b0b      	ldr	r3, [pc, #44]	; (2a3f0 <bt_gatt_discover+0x158>)
   2a3c4:	4a0b      	ldr	r2, [pc, #44]	; (2a3f4 <bt_gatt_discover+0x15c>)
   2a3c6:	1a9b      	subs	r3, r3, r2
   2a3c8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid discovery type: %u", params->type);
   2a3ca:	f04f 0200 	mov.w	r2, #0
   2a3ce:	2001      	movs	r0, #1
   2a3d0:	f360 0202 	bfi	r2, r0, #0, #3
   2a3d4:	f36f 02c5 	bfc	r2, #3, #3
   2a3d8:	f363 128f 	bfi	r2, r3, #6, #10
   2a3dc:	4806      	ldr	r0, [pc, #24]	; (2a3f8 <bt_gatt_discover+0x160>)
   2a3de:	f7f5 ff63 	bl	202a8 <log_1>
	return -EINVAL;
   2a3e2:	f06f 0015 	mvn.w	r0, #21
   2a3e6:	e787      	b.n	2a2f8 <bt_gatt_discover+0x60>
		return -ENOTCONN;
   2a3e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2a3ec:	4770      	bx	lr
   2a3ee:	bf00      	nop
   2a3f0:	0003d1d4 	.word	0x0003d1d4
   2a3f4:	0003d1a4 	.word	0x0003d1a4
   2a3f8:	0003ff38 	.word	0x0003ff38

0002a3fc <read_included_uuid_cb>:
{
   2a3fc:	b530      	push	{r4, r5, lr}
   2a3fe:	b08f      	sub	sp, #60	; 0x3c
   2a400:	4605      	mov	r5, r0
   2a402:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   2a404:	2b10      	cmp	r3, #16
   2a406:	d017      	beq.n	2a438 <read_included_uuid_cb+0x3c>
   2a408:	4926      	ldr	r1, [pc, #152]	; (2a4a4 <read_included_uuid_cb+0xa8>)
   2a40a:	4a27      	ldr	r2, [pc, #156]	; (2a4a8 <read_included_uuid_cb+0xac>)
   2a40c:	1a89      	subs	r1, r1, r2
   2a40e:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid data len %u", length);
   2a410:	f04f 0200 	mov.w	r2, #0
   2a414:	2001      	movs	r0, #1
   2a416:	f360 0202 	bfi	r2, r0, #0, #3
   2a41a:	f36f 02c5 	bfc	r2, #3, #3
   2a41e:	f361 128f 	bfi	r2, r1, #6, #10
   2a422:	4619      	mov	r1, r3
   2a424:	4821      	ldr	r0, [pc, #132]	; (2a4ac <read_included_uuid_cb+0xb0>)
   2a426:	f7f5 ff3f 	bl	202a8 <log_1>
		params->func(conn, NULL, params);
   2a42a:	6863      	ldr	r3, [r4, #4]
   2a42c:	4622      	mov	r2, r4
   2a42e:	2100      	movs	r1, #0
   2a430:	4628      	mov	r0, r5
   2a432:	4798      	blx	r3
}
   2a434:	b00f      	add	sp, #60	; 0x3c
   2a436:	bd30      	pop	{r4, r5, pc}
   2a438:	4611      	mov	r1, r2
	value.start_handle = params->_included.start_handle;
   2a43a:	8962      	ldrh	r2, [r4, #10]
   2a43c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	value.end_handle = params->_included.end_handle;
   2a440:	89a2      	ldrh	r2, [r4, #12]
   2a442:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	value.uuid = &u.uuid;
   2a446:	aa01      	add	r2, sp, #4
   2a448:	920b      	str	r2, [sp, #44]	; 0x2c
	u.uuid.type = BT_UUID_TYPE_128;
   2a44a:	2202      	movs	r2, #2
   2a44c:	f88d 2004 	strb.w	r2, [sp, #4]
	memcpy(u.u128.val, pdu, length);
   2a450:	461a      	mov	r2, r3
   2a452:	f10d 0005 	add.w	r0, sp, #5
   2a456:	f00c fc85 	bl	36d64 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   2a45a:	6821      	ldr	r1, [r4, #0]
   2a45c:	b119      	cbz	r1, 2a466 <read_included_uuid_cb+0x6a>
   2a45e:	a801      	add	r0, sp, #4
   2a460:	f00c fdac 	bl	36fbc <bt_uuid_cmp>
   2a464:	b9c0      	cbnz	r0, 2a498 <read_included_uuid_cb+0x9c>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   2a466:	2300      	movs	r3, #0
   2a468:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   2a46c:	f642 0202 	movw	r2, #10242	; 0x2802
   2a470:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
   2a474:	aa0d      	add	r2, sp, #52	; 0x34
   2a476:	9206      	str	r2, [sp, #24]
   2a478:	9307      	str	r3, [sp, #28]
   2a47a:	9308      	str	r3, [sp, #32]
   2a47c:	aa0b      	add	r2, sp, #44	; 0x2c
   2a47e:	9209      	str	r2, [sp, #36]	; 0x24
   2a480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	attr.handle = params->_included.attr_handle;
   2a484:	8923      	ldrh	r3, [r4, #8]
   2a486:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2a48a:	6863      	ldr	r3, [r4, #4]
   2a48c:	4622      	mov	r2, r4
   2a48e:	a906      	add	r1, sp, #24
   2a490:	4628      	mov	r0, r5
   2a492:	4798      	blx	r3
   2a494:	2800      	cmp	r0, #0
   2a496:	d0cd      	beq.n	2a434 <read_included_uuid_cb+0x38>
	gatt_discover_next(conn, params->start_handle, params);
   2a498:	4622      	mov	r2, r4
   2a49a:	8921      	ldrh	r1, [r4, #8]
   2a49c:	4628      	mov	r0, r5
   2a49e:	f00f f8bd 	bl	3961c <gatt_discover_next>
	return;
   2a4a2:	e7c7      	b.n	2a434 <read_included_uuid_cb+0x38>
   2a4a4:	0003d1d4 	.word	0x0003d1d4
   2a4a8:	0003d1a4 	.word	0x0003d1a4
   2a4ac:	0003fe1c 	.word	0x0003fe1c

0002a4b0 <gatt_find_info_rsp>:
{
   2a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a4b4:	b08f      	sub	sp, #60	; 0x3c
   2a4b6:	4680      	mov	r8, r0
   2a4b8:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   2a4ba:	b9a1      	cbnz	r1, 2a4e6 <gatt_find_info_rsp+0x36>
	switch (rsp->format) {
   2a4bc:	7811      	ldrb	r1, [r2, #0]
   2a4be:	2901      	cmp	r1, #1
   2a4c0:	d019      	beq.n	2a4f6 <gatt_find_info_rsp+0x46>
   2a4c2:	2902      	cmp	r1, #2
   2a4c4:	d027      	beq.n	2a516 <gatt_find_info_rsp+0x66>
   2a4c6:	4b53      	ldr	r3, [pc, #332]	; (2a614 <gatt_find_info_rsp+0x164>)
   2a4c8:	4a53      	ldr	r2, [pc, #332]	; (2a618 <gatt_find_info_rsp+0x168>)
   2a4ca:	1a9b      	subs	r3, r3, r2
   2a4cc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid format %u", rsp->format);
   2a4ce:	f04f 0200 	mov.w	r2, #0
   2a4d2:	2001      	movs	r0, #1
   2a4d4:	f360 0202 	bfi	r2, r0, #0, #3
   2a4d8:	f36f 02c5 	bfc	r2, #3, #3
   2a4dc:	f363 128f 	bfi	r2, r3, #6, #10
   2a4e0:	484e      	ldr	r0, [pc, #312]	; (2a61c <gatt_find_info_rsp+0x16c>)
   2a4e2:	f7f5 fee1 	bl	202a8 <log_1>
	params->func(conn, NULL, params);
   2a4e6:	6873      	ldr	r3, [r6, #4]
   2a4e8:	4632      	mov	r2, r6
   2a4ea:	2100      	movs	r1, #0
   2a4ec:	4640      	mov	r0, r8
   2a4ee:	4798      	blx	r3
}
   2a4f0:	b00f      	add	sp, #60	; 0x3c
   2a4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   2a4f6:	2100      	movs	r1, #0
   2a4f8:	f88d 1014 	strb.w	r1, [sp, #20]
		len = sizeof(*info.i16);
   2a4fc:	f04f 0a04 	mov.w	sl, #4
	length--;
   2a500:	3b01      	subs	r3, #1
   2a502:	b29c      	uxth	r4, r3
	if (length < len) {
   2a504:	4554      	cmp	r4, sl
   2a506:	d3ee      	bcc.n	2a4e6 <gatt_find_info_rsp+0x36>
	for (i = length / len, pdu = rsp->info; i != 0;
   2a508:	fbb4 f4fa 	udiv	r4, r4, sl
   2a50c:	1c55      	adds	r5, r2, #1
	bool skip = false;
   2a50e:	f04f 0900 	mov.w	r9, #0
	uint16_t handle = 0U;
   2a512:	46cb      	mov	fp, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   2a514:	e026      	b.n	2a564 <gatt_find_info_rsp+0xb4>
		u.uuid.type = BT_UUID_TYPE_128;
   2a516:	2102      	movs	r1, #2
   2a518:	f88d 1014 	strb.w	r1, [sp, #20]
		len = sizeof(*info.i128);
   2a51c:	f04f 0a12 	mov.w	sl, #18
		break;
   2a520:	e7ee      	b.n	2a500 <gatt_find_info_rsp+0x50>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   2a522:	886b      	ldrh	r3, [r5, #2]
   2a524:	f8ad 3016 	strh.w	r3, [sp, #22]
			break;
   2a528:	e02a      	b.n	2a580 <gatt_find_info_rsp+0xd0>
			memcpy(u.u128.val, info.i128->uuid, 16);
   2a52a:	2210      	movs	r2, #16
   2a52c:	1ca9      	adds	r1, r5, #2
   2a52e:	f10d 0015 	add.w	r0, sp, #21
   2a532:	f00c fc17 	bl	36d64 <memcpy>
			break;
   2a536:	e023      	b.n	2a580 <gatt_find_info_rsp+0xd0>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   2a538:	7c33      	ldrb	r3, [r6, #16]
   2a53a:	2b04      	cmp	r3, #4
   2a53c:	d029      	beq.n	2a592 <gatt_find_info_rsp+0xe2>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   2a53e:	ab05      	add	r3, sp, #20
   2a540:	9300      	str	r3, [sp, #0]
   2a542:	2300      	movs	r3, #0
   2a544:	9301      	str	r3, [sp, #4]
   2a546:	9302      	str	r3, [sp, #8]
   2a548:	9303      	str	r3, [sp, #12]
   2a54a:	f88d 3012 	strb.w	r3, [sp, #18]
		attr.handle = handle;
   2a54e:	f8ad 7010 	strh.w	r7, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2a552:	6873      	ldr	r3, [r6, #4]
   2a554:	4632      	mov	r2, r6
   2a556:	4669      	mov	r1, sp
   2a558:	4640      	mov	r0, r8
   2a55a:	4798      	blx	r3
   2a55c:	2800      	cmp	r0, #0
   2a55e:	d0c7      	beq.n	2a4f0 <gatt_find_info_rsp+0x40>
	     i--, pdu = (const uint8_t *)pdu + len) {
   2a560:	3c01      	subs	r4, #1
   2a562:	4455      	add	r5, sl
	for (i = length / len, pdu = rsp->info; i != 0;
   2a564:	2c00      	cmp	r4, #0
   2a566:	d04e      	beq.n	2a606 <gatt_find_info_rsp+0x156>
		handle = sys_le16_to_cpu(info.i16->handle);
   2a568:	882f      	ldrh	r7, [r5, #0]
   2a56a:	fa1f fb87 	uxth.w	fp, r7
		if (skip) {
   2a56e:	f1b9 0f00 	cmp.w	r9, #0
   2a572:	d145      	bne.n	2a600 <gatt_find_info_rsp+0x150>
		switch (u.uuid.type) {
   2a574:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2a578:	2b00      	cmp	r3, #0
   2a57a:	d0d2      	beq.n	2a522 <gatt_find_info_rsp+0x72>
   2a57c:	2b02      	cmp	r3, #2
   2a57e:	d0d4      	beq.n	2a52a <gatt_find_info_rsp+0x7a>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   2a580:	6831      	ldr	r1, [r6, #0]
   2a582:	2900      	cmp	r1, #0
   2a584:	d0d8      	beq.n	2a538 <gatt_find_info_rsp+0x88>
   2a586:	a805      	add	r0, sp, #20
   2a588:	f00c fd18 	bl	36fbc <bt_uuid_cmp>
   2a58c:	2800      	cmp	r0, #0
   2a58e:	d0d3      	beq.n	2a538 <gatt_find_info_rsp+0x88>
   2a590:	e7e6      	b.n	2a560 <gatt_find_info_rsp+0xb0>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   2a592:	2300      	movs	r3, #0
   2a594:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   2a598:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2a59c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
   2a5a0:	a90a      	add	r1, sp, #40	; 0x28
   2a5a2:	a805      	add	r0, sp, #20
   2a5a4:	f00c fd0a 	bl	36fbc <bt_uuid_cmp>
   2a5a8:	2800      	cmp	r0, #0
   2a5aa:	d0d9      	beq.n	2a560 <gatt_find_info_rsp+0xb0>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   2a5ac:	2300      	movs	r3, #0
   2a5ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2a5b2:	f642 0301 	movw	r3, #10241	; 0x2801
   2a5b6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2a5ba:	a90b      	add	r1, sp, #44	; 0x2c
   2a5bc:	a805      	add	r0, sp, #20
   2a5be:	f00c fcfd 	bl	36fbc <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   2a5c2:	2800      	cmp	r0, #0
   2a5c4:	d0cc      	beq.n	2a560 <gatt_find_info_rsp+0xb0>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   2a5c6:	2300      	movs	r3, #0
   2a5c8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   2a5cc:	f642 0302 	movw	r3, #10242	; 0x2802
   2a5d0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
   2a5d4:	a90c      	add	r1, sp, #48	; 0x30
   2a5d6:	a805      	add	r0, sp, #20
   2a5d8:	f00c fcf0 	bl	36fbc <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   2a5dc:	2800      	cmp	r0, #0
   2a5de:	d0bf      	beq.n	2a560 <gatt_find_info_rsp+0xb0>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   2a5e0:	2300      	movs	r3, #0
   2a5e2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   2a5e6:	f642 0303 	movw	r3, #10243	; 0x2803
   2a5ea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   2a5ee:	a90d      	add	r1, sp, #52	; 0x34
   2a5f0:	a805      	add	r0, sp, #20
   2a5f2:	f00c fce3 	bl	36fbc <bt_uuid_cmp>
   2a5f6:	2800      	cmp	r0, #0
   2a5f8:	d1a1      	bne.n	2a53e <gatt_find_info_rsp+0x8e>
				skip = true;
   2a5fa:	f04f 0901 	mov.w	r9, #1
   2a5fe:	e7af      	b.n	2a560 <gatt_find_info_rsp+0xb0>
			skip = false;
   2a600:	f04f 0900 	mov.w	r9, #0
   2a604:	e7ac      	b.n	2a560 <gatt_find_info_rsp+0xb0>
	gatt_discover_next(conn, handle, params);
   2a606:	4632      	mov	r2, r6
   2a608:	4659      	mov	r1, fp
   2a60a:	4640      	mov	r0, r8
   2a60c:	f00f f806 	bl	3961c <gatt_discover_next>
	return;
   2a610:	e76e      	b.n	2a4f0 <gatt_find_info_rsp+0x40>
   2a612:	bf00      	nop
   2a614:	0003d1d4 	.word	0x0003d1d4
   2a618:	0003d1a4 	.word	0x0003d1a4
   2a61c:	0003ff54 	.word	0x0003ff54

0002a620 <bt_gatt_read>:
	if (conn->state != BT_CONN_CONNECTED) {
   2a620:	7b43      	ldrb	r3, [r0, #13]
   2a622:	2b07      	cmp	r3, #7
   2a624:	d121      	bne.n	2a66a <bt_gatt_read+0x4a>
{
   2a626:	b500      	push	{lr}
   2a628:	b083      	sub	sp, #12
	if (params->handle_count == 0) {
   2a62a:	684b      	ldr	r3, [r1, #4]
   2a62c:	b143      	cbz	r3, 2a640 <bt_gatt_read+0x20>
	if (params->handle_count > 1) {
   2a62e:	2b01      	cmp	r3, #1
   2a630:	d90c      	bls.n	2a64c <bt_gatt_read+0x2c>
		if (params->multiple.variable) {
   2a632:	7b0b      	ldrb	r3, [r1, #12]
   2a634:	b13b      	cbz	r3, 2a646 <bt_gatt_read+0x26>
			return gatt_read_mult_vl(conn, params);
   2a636:	f00e fb52 	bl	38cde <gatt_read_mult_vl>
}
   2a63a:	b003      	add	sp, #12
   2a63c:	f85d fb04 	ldr.w	pc, [sp], #4
		return gatt_read_uuid(conn, params);
   2a640:	f7ff f9c6 	bl	299d0 <gatt_read_uuid>
   2a644:	e7f9      	b.n	2a63a <bt_gatt_read+0x1a>
			return gatt_read_mult(conn, params);
   2a646:	f7ff f9d5 	bl	299f4 <gatt_read_mult>
   2a64a:	e7f6      	b.n	2a63a <bt_gatt_read+0x1a>
	if (params->single.offset) {
   2a64c:	894b      	ldrh	r3, [r1, #10]
   2a64e:	b94b      	cbnz	r3, 2a664 <bt_gatt_read+0x44>
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   2a650:	2302      	movs	r3, #2
   2a652:	9301      	str	r3, [sp, #4]
   2a654:	230a      	movs	r3, #10
   2a656:	9300      	str	r3, [sp, #0]
   2a658:	4b05      	ldr	r3, [pc, #20]	; (2a670 <bt_gatt_read+0x50>)
   2a65a:	460a      	mov	r2, r1
   2a65c:	4905      	ldr	r1, [pc, #20]	; (2a674 <bt_gatt_read+0x54>)
   2a65e:	f00e fd36 	bl	390ce <gatt_req_send>
   2a662:	e7ea      	b.n	2a63a <bt_gatt_read+0x1a>
		return gatt_read_blob(conn, params);
   2a664:	f7ff f9da 	bl	29a1c <gatt_read_blob>
   2a668:	e7e7      	b.n	2a63a <bt_gatt_read+0x1a>
		return -ENOTCONN;
   2a66a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2a66e:	4770      	bx	lr
   2a670:	000391bd 	.word	0x000391bd
   2a674:	00039767 	.word	0x00039767

0002a678 <parse_read_by_uuid>:
{
   2a678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a67c:	b083      	sub	sp, #12
   2a67e:	4681      	mov	r9, r0
   2a680:	460d      	mov	r5, r1
   2a682:	4690      	mov	r8, r2
	for (length--, pdu = rsp->data; length;
   2a684:	1e5c      	subs	r4, r3, #1
   2a686:	b2a4      	uxth	r4, r4
   2a688:	1c57      	adds	r7, r2, #1
   2a68a:	e02a      	b.n	2a6e2 <parse_read_by_uuid+0x6a>
   2a68c:	4b28      	ldr	r3, [pc, #160]	; (2a730 <parse_read_by_uuid+0xb8>)
   2a68e:	4a29      	ldr	r2, [pc, #164]	; (2a734 <parse_read_by_uuid+0xbc>)
   2a690:	1a9b      	subs	r3, r3, r2
   2a692:	08db      	lsrs	r3, r3, #3
			BT_ERR("Invalid handle");
   2a694:	f04f 0100 	mov.w	r1, #0
   2a698:	2201      	movs	r2, #1
   2a69a:	f362 0102 	bfi	r1, r2, #0, #3
   2a69e:	f36f 01c5 	bfc	r1, #3, #3
   2a6a2:	f363 118f 	bfi	r1, r3, #6, #10
   2a6a6:	4824      	ldr	r0, [pc, #144]	; (2a738 <parse_read_by_uuid+0xc0>)
   2a6a8:	f7f5 feb4 	bl	20414 <log_0>
			return;
   2a6ac:	e034      	b.n	2a718 <parse_read_by_uuid+0xa0>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   2a6ae:	3b02      	subs	r3, #2
   2a6b0:	b29b      	uxth	r3, r3
		params->by_uuid.start_handle = handle;
   2a6b2:	812a      	strh	r2, [r5, #8]
		if (params->func(conn, 0, params, data->value, len) ==
   2a6b4:	682e      	ldr	r6, [r5, #0]
   2a6b6:	9300      	str	r3, [sp, #0]
   2a6b8:	1cbb      	adds	r3, r7, #2
   2a6ba:	462a      	mov	r2, r5
   2a6bc:	2100      	movs	r1, #0
   2a6be:	4648      	mov	r0, r9
   2a6c0:	47b0      	blx	r6
   2a6c2:	b348      	cbz	r0, 2a718 <parse_read_by_uuid+0xa0>
		if (rsp->len > length) {
   2a6c4:	f898 3000 	ldrb.w	r3, [r8]
   2a6c8:	429c      	cmp	r4, r3
   2a6ca:	d31f      	bcc.n	2a70c <parse_read_by_uuid+0x94>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   2a6cc:	892b      	ldrh	r3, [r5, #8]
   2a6ce:	896a      	ldrh	r2, [r5, #10]
   2a6d0:	4293      	cmp	r3, r2
   2a6d2:	d013      	beq.n	2a6fc <parse_read_by_uuid+0x84>
		params->by_uuid.start_handle++;
   2a6d4:	3301      	adds	r3, #1
   2a6d6:	812b      	strh	r3, [r5, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   2a6d8:	f898 2000 	ldrb.w	r2, [r8]
   2a6dc:	1aa4      	subs	r4, r4, r2
   2a6de:	b2a4      	uxth	r4, r4
   2a6e0:	4417      	add	r7, r2
	for (length--, pdu = rsp->data; length;
   2a6e2:	b19c      	cbz	r4, 2a70c <parse_read_by_uuid+0x94>
		handle = sys_le16_to_cpu(data->handle);
   2a6e4:	883a      	ldrh	r2, [r7, #0]
   2a6e6:	b293      	uxth	r3, r2
		if (!handle) {
   2a6e8:	2b00      	cmp	r3, #0
   2a6ea:	d0cf      	beq.n	2a68c <parse_read_by_uuid+0x14>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   2a6ec:	f898 3000 	ldrb.w	r3, [r8]
   2a6f0:	b299      	uxth	r1, r3
   2a6f2:	42a1      	cmp	r1, r4
   2a6f4:	d9db      	bls.n	2a6ae <parse_read_by_uuid+0x36>
   2a6f6:	1ea3      	subs	r3, r4, #2
   2a6f8:	b29b      	uxth	r3, r3
   2a6fa:	e7da      	b.n	2a6b2 <parse_read_by_uuid+0x3a>
			params->func(conn, 0, params, NULL, 0);
   2a6fc:	682c      	ldr	r4, [r5, #0]
   2a6fe:	2100      	movs	r1, #0
   2a700:	9100      	str	r1, [sp, #0]
   2a702:	460b      	mov	r3, r1
   2a704:	462a      	mov	r2, r5
   2a706:	4648      	mov	r0, r9
   2a708:	47a0      	blx	r4
			return;
   2a70a:	e005      	b.n	2a718 <parse_read_by_uuid+0xa0>
	if (bt_gatt_read(conn, params) < 0) {
   2a70c:	4629      	mov	r1, r5
   2a70e:	4648      	mov	r0, r9
   2a710:	f7ff ff86 	bl	2a620 <bt_gatt_read>
   2a714:	2800      	cmp	r0, #0
   2a716:	db02      	blt.n	2a71e <parse_read_by_uuid+0xa6>
}
   2a718:	b003      	add	sp, #12
   2a71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   2a71e:	682c      	ldr	r4, [r5, #0]
   2a720:	2300      	movs	r3, #0
   2a722:	9300      	str	r3, [sp, #0]
   2a724:	462a      	mov	r2, r5
   2a726:	210e      	movs	r1, #14
   2a728:	4648      	mov	r0, r9
   2a72a:	47a0      	blx	r4
   2a72c:	e7f4      	b.n	2a718 <parse_read_by_uuid+0xa0>
   2a72e:	bf00      	nop
   2a730:	0003d1d4 	.word	0x0003d1d4
   2a734:	0003d1a4 	.word	0x0003d1a4
   2a738:	0003ff68 	.word	0x0003ff68

0002a73c <bt_gatt_mult_notification>:
{
   2a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a740:	b087      	sub	sp, #28
   2a742:	4682      	mov	sl, r0
   2a744:	460c      	mov	r4, r1
   2a746:	4617      	mov	r7, r2
	sub = gatt_sub_find(conn);
   2a748:	f7fe fd18 	bl	2917c <gatt_sub_find>
	if (!sub) {
   2a74c:	b1c0      	cbz	r0, 2a780 <bt_gatt_mult_notification+0x44>
   2a74e:	4683      	mov	fp, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   2a750:	463a      	mov	r2, r7
   2a752:	4621      	mov	r1, r4
   2a754:	a803      	add	r0, sp, #12
   2a756:	f010 f94b 	bl	3a9f0 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   2a75a:	e03f      	b.n	2a7dc <bt_gatt_mult_notification+0xa0>
   2a75c:	4a2f      	ldr	r2, [pc, #188]	; (2a81c <bt_gatt_mult_notification+0xe0>)
   2a75e:	4b30      	ldr	r3, [pc, #192]	; (2a820 <bt_gatt_mult_notification+0xe4>)
   2a760:	1ad2      	subs	r2, r2, r3
   2a762:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Invalid data len %u > %u", len, length);
   2a764:	f04f 0300 	mov.w	r3, #0
   2a768:	2101      	movs	r1, #1
   2a76a:	f361 0302 	bfi	r3, r1, #0, #3
   2a76e:	f36f 03c5 	bfc	r3, #3, #3
   2a772:	f362 138f 	bfi	r3, r2, #6, #10
   2a776:	463a      	mov	r2, r7
   2a778:	4649      	mov	r1, r9
   2a77a:	482a      	ldr	r0, [pc, #168]	; (2a824 <bt_gatt_mult_notification+0xe8>)
   2a77c:	f7f5 fdca 	bl	20314 <log_2>
}
   2a780:	b007      	add	sp, #28
   2a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				bt_gatt_unsubscribe(conn, params);
   2a786:	4629      	mov	r1, r5
   2a788:	4650      	mov	r0, sl
   2a78a:	f00f f830 	bl	397ee <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   2a78e:	b1d4      	cbz	r4, 2a7c6 <bt_gatt_mult_notification+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a790:	f114 0314 	adds.w	r3, r4, #20
   2a794:	d002      	beq.n	2a79c <bt_gatt_mult_notification+0x60>
	return node->next;
   2a796:	6963      	ldr	r3, [r4, #20]
   2a798:	b103      	cbz	r3, 2a79c <bt_gatt_mult_notification+0x60>
   2a79a:	3b14      	subs	r3, #20
   2a79c:	4625      	mov	r5, r4
   2a79e:	461c      	mov	r4, r3
   2a7a0:	b1bd      	cbz	r5, 2a7d2 <bt_gatt_mult_notification+0x96>
			if (handle != params->value_handle) {
   2a7a2:	892b      	ldrh	r3, [r5, #8]
   2a7a4:	4598      	cmp	r8, r3
   2a7a6:	d1f2      	bne.n	2a78e <bt_gatt_mult_notification+0x52>
			if (params->notify(conn, params, nfy->value, len) ==
   2a7a8:	464b      	mov	r3, r9
   2a7aa:	1d32      	adds	r2, r6, #4
   2a7ac:	4629      	mov	r1, r5
   2a7ae:	4650      	mov	r0, sl
   2a7b0:	682f      	ldr	r7, [r5, #0]
   2a7b2:	47b8      	blx	r7
   2a7b4:	2800      	cmp	r0, #0
   2a7b6:	d1ea      	bne.n	2a78e <bt_gatt_mult_notification+0x52>
   2a7b8:	e7e5      	b.n	2a786 <bt_gatt_mult_notification+0x4a>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   2a7ba:	462c      	mov	r4, r5
   2a7bc:	9701      	str	r7, [sp, #4]
   2a7be:	e7ef      	b.n	2a7a0 <bt_gatt_mult_notification+0x64>
   2a7c0:	462c      	mov	r4, r5
   2a7c2:	9701      	str	r7, [sp, #4]
   2a7c4:	e7ec      	b.n	2a7a0 <bt_gatt_mult_notification+0x64>
   2a7c6:	4623      	mov	r3, r4
   2a7c8:	e7e8      	b.n	2a79c <bt_gatt_mult_notification+0x60>
   2a7ca:	9701      	str	r7, [sp, #4]
   2a7cc:	e7e8      	b.n	2a7a0 <bt_gatt_mult_notification+0x64>
   2a7ce:	9701      	str	r7, [sp, #4]
   2a7d0:	e7e6      	b.n	2a7a0 <bt_gatt_mult_notification+0x64>
   2a7d2:	9f01      	ldr	r7, [sp, #4]
		net_buf_simple_pull_mem(&buf, len);
   2a7d4:	4649      	mov	r1, r9
   2a7d6:	a803      	add	r0, sp, #12
   2a7d8:	f010 f99c 	bl	3ab14 <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
   2a7dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2a7e0:	2b04      	cmp	r3, #4
   2a7e2:	d9cd      	bls.n	2a780 <bt_gatt_mult_notification+0x44>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   2a7e4:	2104      	movs	r1, #4
   2a7e6:	a803      	add	r0, sp, #12
   2a7e8:	f010 f994 	bl	3ab14 <net_buf_simple_pull_mem>
   2a7ec:	4606      	mov	r6, r0
		handle = sys_cpu_to_le16(nfy->handle);
   2a7ee:	f8b0 8000 	ldrh.w	r8, [r0]
		len = sys_cpu_to_le16(nfy->len);
   2a7f2:	f8b0 9002 	ldrh.w	r9, [r0, #2]
		if (len > buf.len) {
   2a7f6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2a7fa:	454b      	cmp	r3, r9
   2a7fc:	d3ae      	bcc.n	2a75c <bt_gatt_mult_notification+0x20>
	return list->head;
   2a7fe:	f8db 5008 	ldr.w	r5, [fp, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   2a802:	2d00      	cmp	r5, #0
   2a804:	d0d9      	beq.n	2a7ba <bt_gatt_mult_notification+0x7e>
   2a806:	3d14      	subs	r5, #20
   2a808:	d0da      	beq.n	2a7c0 <bt_gatt_mult_notification+0x84>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a80a:	f115 0414 	adds.w	r4, r5, #20
   2a80e:	d0dc      	beq.n	2a7ca <bt_gatt_mult_notification+0x8e>
	return node->next;
   2a810:	696c      	ldr	r4, [r5, #20]
   2a812:	2c00      	cmp	r4, #0
   2a814:	d0db      	beq.n	2a7ce <bt_gatt_mult_notification+0x92>
   2a816:	3c14      	subs	r4, #20
   2a818:	9701      	str	r7, [sp, #4]
   2a81a:	e7c1      	b.n	2a7a0 <bt_gatt_mult_notification+0x64>
   2a81c:	0003d1d4 	.word	0x0003d1d4
   2a820:	0003d1a4 	.word	0x0003d1a4
   2a824:	0003ff78 	.word	0x0003ff78

0002a828 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   2a828:	b510      	push	{r4, lr}
   2a82a:	b086      	sub	sp, #24
   2a82c:	4604      	mov	r4, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   2a82e:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   2a830:	2001      	movs	r0, #1
   2a832:	f88d 0014 	strb.w	r0, [sp, #20]
   2a836:	ab04      	add	r3, sp, #16
   2a838:	9302      	str	r3, [sp, #8]
   2a83a:	4b16      	ldr	r3, [pc, #88]	; (2a894 <bt_gatt_connected+0x6c>)
   2a83c:	9301      	str	r3, [sp, #4]
   2a83e:	2200      	movs	r2, #0
   2a840:	9200      	str	r2, [sp, #0]
   2a842:	4613      	mov	r3, r2
   2a844:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2a848:	f7ff f970 	bl	29b2c <bt_gatt_foreach_attr_type>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   2a84c:	4620      	mov	r0, r4
   2a84e:	f00d f86f 	bl	37930 <bt_conn_get_security>
   2a852:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2a856:	4288      	cmp	r0, r1
   2a858:	d304      	bcc.n	2a864 <bt_gatt_connected+0x3c>
				err);
		}
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
   2a85a:	4620      	mov	r0, r4
   2a85c:	f00e fc71 	bl	39142 <add_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */
}
   2a860:	b006      	add	sp, #24
   2a862:	bd10      	pop	{r4, pc}
		int err = bt_conn_set_security(conn, data.sec);
   2a864:	4620      	mov	r0, r4
   2a866:	f00d f82b 	bl	378c0 <bt_conn_set_security>
		if (err) {
   2a86a:	4601      	mov	r1, r0
   2a86c:	2800      	cmp	r0, #0
   2a86e:	d0f4      	beq.n	2a85a <bt_gatt_connected+0x32>
   2a870:	4b09      	ldr	r3, [pc, #36]	; (2a898 <bt_gatt_connected+0x70>)
   2a872:	4a0a      	ldr	r2, [pc, #40]	; (2a89c <bt_gatt_connected+0x74>)
   2a874:	1a9b      	subs	r3, r3, r2
   2a876:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to set security for bonded peer (%d)",
   2a878:	f04f 0200 	mov.w	r2, #0
   2a87c:	2002      	movs	r0, #2
   2a87e:	f360 0202 	bfi	r2, r0, #0, #3
   2a882:	f36f 02c5 	bfc	r2, #3, #3
   2a886:	f363 128f 	bfi	r2, r3, #6, #10
   2a88a:	4805      	ldr	r0, [pc, #20]	; (2a8a0 <bt_gatt_connected+0x78>)
   2a88c:	f7f5 fd0c 	bl	202a8 <log_1>
   2a890:	e7e3      	b.n	2a85a <bt_gatt_connected+0x32>
   2a892:	bf00      	nop
   2a894:	0002a1cd 	.word	0x0002a1cd
   2a898:	0003d1d4 	.word	0x0003d1d4
   2a89c:	0003d1a4 	.word	0x0003d1a4
   2a8a0:	0003ff94 	.word	0x0003ff94

0002a8a4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   2a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a8a6:	4605      	mov	r5, r0
   2a8a8:	460e      	mov	r6, r1
   2a8aa:	4617      	mov	r7, r2
	return list->head;
   2a8ac:	4b0a      	ldr	r3, [pc, #40]	; (2a8d8 <bt_gatt_att_max_mtu_changed+0x34>)
   2a8ae:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2a8b0:	b134      	cbz	r4, 2a8c0 <bt_gatt_att_max_mtu_changed+0x1c>
   2a8b2:	3c04      	subs	r4, #4
   2a8b4:	e004      	b.n	2a8c0 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a8b6:	1d23      	adds	r3, r4, #4
   2a8b8:	d00b      	beq.n	2a8d2 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   2a8ba:	6864      	ldr	r4, [r4, #4]
   2a8bc:	b15c      	cbz	r4, 2a8d6 <bt_gatt_att_max_mtu_changed+0x32>
   2a8be:	3c04      	subs	r4, #4
   2a8c0:	b14c      	cbz	r4, 2a8d6 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   2a8c2:	6823      	ldr	r3, [r4, #0]
   2a8c4:	2b00      	cmp	r3, #0
   2a8c6:	d0f6      	beq.n	2a8b6 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   2a8c8:	463a      	mov	r2, r7
   2a8ca:	4631      	mov	r1, r6
   2a8cc:	4628      	mov	r0, r5
   2a8ce:	4798      	blx	r3
   2a8d0:	e7f1      	b.n	2a8b6 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2a8d2:	461c      	mov	r4, r3
   2a8d4:	e7f4      	b.n	2a8c0 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   2a8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8d8:	200082c8 	.word	0x200082c8

0002a8dc <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   2a8dc:	b500      	push	{lr}
   2a8de:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   2a8e0:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   2a8e2:	2001      	movs	r0, #1
   2a8e4:	f88d 0014 	strb.w	r0, [sp, #20]
   2a8e8:	ab04      	add	r3, sp, #16
   2a8ea:	9302      	str	r3, [sp, #8]
   2a8ec:	4b05      	ldr	r3, [pc, #20]	; (2a904 <bt_gatt_encrypt_change+0x28>)
   2a8ee:	9301      	str	r3, [sp, #4]
   2a8f0:	2200      	movs	r2, #0
   2a8f2:	9200      	str	r2, [sp, #0]
   2a8f4:	4613      	mov	r3, r2
   2a8f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2a8fa:	f7ff f917 	bl	29b2c <bt_gatt_foreach_attr_type>

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
}
   2a8fe:	b007      	add	sp, #28
   2a900:	f85d fb04 	ldr.w	pc, [sp], #4
   2a904:	0002a1cd 	.word	0x0002a1cd

0002a908 <db_hash_read>:
{
   2a908:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a90a:	b085      	sub	sp, #20
   2a90c:	4604      	mov	r4, r0
   2a90e:	460d      	mov	r5, r1
   2a910:	4616      	mov	r6, r2
   2a912:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2a914:	4812      	ldr	r0, [pc, #72]	; (2a960 <db_hash_read+0x58>)
   2a916:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2a91a:	3010      	adds	r0, #16
   2a91c:	f011 fe72 	bl	3c604 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a920:	f3bf 8f5b 	dmb	ish
   2a924:	4b0f      	ldr	r3, [pc, #60]	; (2a964 <db_hash_read+0x5c>)
   2a926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2a928:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2a92c:	f013 0f04 	tst.w	r3, #4
   2a930:	d012      	beq.n	2a958 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   2a932:	2101      	movs	r1, #1
   2a934:	4620      	mov	r0, r4
   2a936:	f00f f813 	bl	39960 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   2a93a:	2310      	movs	r3, #16
   2a93c:	9302      	str	r3, [sp, #8]
   2a93e:	4b08      	ldr	r3, [pc, #32]	; (2a960 <db_hash_read+0x58>)
   2a940:	9301      	str	r3, [sp, #4]
   2a942:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2a946:	9300      	str	r3, [sp, #0]
   2a948:	463b      	mov	r3, r7
   2a94a:	4632      	mov	r2, r6
   2a94c:	4629      	mov	r1, r5
   2a94e:	4620      	mov	r0, r4
   2a950:	f00e fd3d 	bl	393ce <bt_gatt_attr_read>
}
   2a954:	b005      	add	sp, #20
   2a956:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   2a958:	2001      	movs	r0, #1
   2a95a:	f7ff f931 	bl	29bc0 <db_hash_gen>
   2a95e:	e7e8      	b.n	2a932 <db_hash_read+0x2a>
   2a960:	20004158 	.word	0x20004158
   2a964:	200041c0 	.word	0x200041c0

0002a968 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   2a968:	b510      	push	{r4, lr}
   2a96a:	b084      	sub	sp, #16
   2a96c:	4604      	mov	r4, r0
   2a96e:	9002      	str	r0, [sp, #8]
   2a970:	4b08      	ldr	r3, [pc, #32]	; (2a994 <bt_gatt_disconnected+0x2c>)
   2a972:	9301      	str	r3, [sp, #4]
   2a974:	2200      	movs	r2, #0
   2a976:	9200      	str	r2, [sp, #0]
   2a978:	4613      	mov	r3, r2
   2a97a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2a97e:	2001      	movs	r0, #1
   2a980:	f7ff f8d4 	bl	29b2c <bt_gatt_foreach_attr_type>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
   2a984:	4620      	mov	r0, r4
   2a986:	f00e fa94 	bl	38eb2 <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   2a98a:	4620      	mov	r0, r4
   2a98c:	f00e fcfb 	bl	39386 <remove_cf_cfg>
#endif
}
   2a990:	b004      	add	sp, #16
   2a992:	bd10      	pop	{r4, pc}
   2a994:	000296f9 	.word	0x000296f9

0002a998 <le_sc_supported>:
	 */
	if (IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		return false;
	}

	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2a998:	4b04      	ldr	r3, [pc, #16]	; (2a9ac <le_sc_supported+0x14>)
   2a99a:	f893 009a 	ldrb.w	r0, [r3, #154]	; 0x9a
   2a99e:	f000 0006 	and.w	r0, r0, #6
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}
   2a9a2:	2806      	cmp	r0, #6
   2a9a4:	bf14      	ite	ne
   2a9a6:	2000      	movne	r0, #0
   2a9a8:	2001      	moveq	r0, #1
   2a9aa:	4770      	bx	lr
   2a9ac:	200002b0 	.word	0x200002b0

0002a9b0 <get_io_capa>:

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   2a9b0:	4b11      	ldr	r3, [pc, #68]	; (2a9f8 <get_io_capa+0x48>)
   2a9b2:	681b      	ldr	r3, [r3, #0]
   2a9b4:	b1bb      	cbz	r3, 2a9e6 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   2a9b6:	681a      	ldr	r2, [r3, #0]
   2a9b8:	b132      	cbz	r2, 2a9c8 <get_io_capa+0x18>
   2a9ba:	6859      	ldr	r1, [r3, #4]
   2a9bc:	b121      	cbz	r1, 2a9c8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   2a9be:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   2a9c0:	b999      	cbnz	r1, 2a9ea <get_io_capa+0x3a>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   2a9c2:	490e      	ldr	r1, [pc, #56]	; (2a9fc <get_io_capa+0x4c>)
   2a9c4:	7809      	ldrb	r1, [r1, #0]
   2a9c6:	b191      	cbz	r1, 2a9ee <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   2a9c8:	490c      	ldr	r1, [pc, #48]	; (2a9fc <get_io_capa+0x4c>)
   2a9ca:	7809      	ldrb	r1, [r1, #0]
   2a9cc:	b121      	cbz	r1, 2a9d8 <get_io_capa+0x28>
   2a9ce:	b11a      	cbz	r2, 2a9d8 <get_io_capa+0x28>
	    bt_auth->passkey_confirm) {
   2a9d0:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
   2a9d2:	b109      	cbz	r1, 2a9d8 <get_io_capa+0x28>
		return BT_SMP_IO_DISPLAY_YESNO;
   2a9d4:	2001      	movs	r0, #1
   2a9d6:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
   2a9d8:	685b      	ldr	r3, [r3, #4]
   2a9da:	b953      	cbnz	r3, 2a9f2 <get_io_capa+0x42>
		} else {
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
   2a9dc:	b10a      	cbz	r2, 2a9e2 <get_io_capa+0x32>
		return BT_SMP_IO_DISPLAY_ONLY;
   2a9de:	2000      	movs	r0, #0
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}
}
   2a9e0:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   2a9e2:	2003      	movs	r0, #3
   2a9e4:	4770      	bx	lr
   2a9e6:	2003      	movs	r0, #3
   2a9e8:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   2a9ea:	2004      	movs	r0, #4
   2a9ec:	4770      	bx	lr
   2a9ee:	2004      	movs	r0, #4
   2a9f0:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   2a9f2:	2002      	movs	r0, #2
   2a9f4:	4770      	bx	lr
   2a9f6:	bf00      	nop
   2a9f8:	20008274 	.word	0x20008274
   2a9fc:	2000da75 	.word	0x2000da75

0002aa00 <legacy_get_pair_method>:
static uint8_t legacy_get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	uint8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   2aa00:	2904      	cmp	r1, #4
   2aa02:	d820      	bhi.n	2aa46 <legacy_get_pair_method+0x46>
{
   2aa04:	b538      	push	{r3, r4, r5, lr}
   2aa06:	4604      	mov	r4, r0
   2aa08:	460d      	mov	r5, r1

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if both sides have OOB data use OOB */
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   2aa0a:	7ac3      	ldrb	r3, [r0, #11]
   2aa0c:	7c82      	ldrb	r2, [r0, #18]
   2aa0e:	4013      	ands	r3, r2
   2aa10:	f013 0f01 	tst.w	r3, #1
   2aa14:	d119      	bne.n	2aa4a <legacy_get_pair_method+0x4a>
		return LEGACY_OOB;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   2aa16:	7b00      	ldrb	r0, [r0, #12]
   2aa18:	7ce3      	ldrb	r3, [r4, #19]
   2aa1a:	4318      	orrs	r0, r3
   2aa1c:	f010 0004 	ands.w	r0, r0, #4
   2aa20:	d008      	beq.n	2aa34 <legacy_get_pair_method+0x34>
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
   2aa22:	f7ff ffc5 	bl	2a9b0 <get_io_capa>
   2aa26:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   2aa2a:	4909      	ldr	r1, [pc, #36]	; (2aa50 <legacy_get_pair_method+0x50>)
   2aa2c:	440d      	add	r5, r1
   2aa2e:	5c28      	ldrb	r0, [r5, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
   2aa30:	2804      	cmp	r0, #4
   2aa32:	d000      	beq.n	2aa36 <legacy_get_pair_method+0x36>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
   2aa34:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2aa36:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2aa3a:	78db      	ldrb	r3, [r3, #3]
   2aa3c:	b10b      	cbz	r3, 2aa42 <legacy_get_pair_method+0x42>
			method = PASSKEY_INPUT;
   2aa3e:	2001      	movs	r0, #1
   2aa40:	e7f8      	b.n	2aa34 <legacy_get_pair_method+0x34>
			method = PASSKEY_DISPLAY;
   2aa42:	2002      	movs	r0, #2
   2aa44:	e7f6      	b.n	2aa34 <legacy_get_pair_method+0x34>
		return JUST_WORKS;
   2aa46:	2000      	movs	r0, #0
}
   2aa48:	4770      	bx	lr
		return LEGACY_OOB;
   2aa4a:	2006      	movs	r0, #6
   2aa4c:	e7f2      	b.n	2aa34 <legacy_get_pair_method+0x34>
   2aa4e:	bf00      	nop
   2aa50:	00040430 	.word	0x00040430

0002aa54 <get_auth>:
{
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
   2aa54:	b510      	push	{r4, lr}
	if (sc_supported) {
   2aa56:	4b0d      	ldr	r3, [pc, #52]	; (2aa8c <get_auth+0x38>)
   2aa58:	781b      	ldrb	r3, [r3, #0]
   2aa5a:	b16b      	cbz	r3, 2aa78 <get_auth+0x24>
		auth &= BT_SMP_AUTH_MASK_SC;
   2aa5c:	f001 040f 	and.w	r4, r1, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2aa60:	f7ff ffa6 	bl	2a9b0 <get_io_capa>
   2aa64:	2803      	cmp	r0, #3
   2aa66:	d00a      	beq.n	2aa7e <get_auth+0x2a>
	    (!IS_ENABLED(CONFIG_BT_SMP_ENFORCE_MITM) &&
	    (conn->required_sec_level < BT_SECURITY_L3))) {
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
   2aa68:	f044 0004 	orr.w	r0, r4, #4
	}

	if (bondable) {
   2aa6c:	4b08      	ldr	r3, [pc, #32]	; (2aa90 <get_auth+0x3c>)
   2aa6e:	781b      	ldrb	r3, [r3, #0]
   2aa70:	b143      	cbz	r3, 2aa84 <get_auth+0x30>
		auth |= BT_SMP_AUTH_BONDING;
   2aa72:	f040 0001 	orr.w	r0, r0, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
   2aa76:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   2aa78:	f001 0407 	and.w	r4, r1, #7
   2aa7c:	e7f0      	b.n	2aa60 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
   2aa7e:	f004 000b 	and.w	r0, r4, #11
   2aa82:	e7f3      	b.n	2aa6c <get_auth+0x18>
		auth &= ~BT_SMP_AUTH_BONDING;
   2aa84:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   2aa88:	e7f5      	b.n	2aa76 <get_auth+0x22>
   2aa8a:	bf00      	nop
   2aa8c:	2000da75 	.word	0x2000da75
   2aa90:	20000980 	.word	0x20000980

0002aa94 <sec_level_reachable>:
		return BT_SMP_ERR_UNSPECIFIED;
	}
}

static bool sec_level_reachable(struct bt_conn *conn)
{
   2aa94:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   2aa96:	7a83      	ldrb	r3, [r0, #10]
   2aa98:	2b03      	cmp	r3, #3
   2aa9a:	d015      	beq.n	2aac8 <sec_level_reachable+0x34>
   2aa9c:	d807      	bhi.n	2aaae <sec_level_reachable+0x1a>
   2aa9e:	3b01      	subs	r3, #1
   2aaa0:	b2db      	uxtb	r3, r3
   2aaa2:	2b01      	cmp	r3, #1
   2aaa4:	d801      	bhi.n	2aaaa <sec_level_reachable+0x16>
   2aaa6:	2001      	movs	r0, #1
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
	default:
		return false;
	}
}
   2aaa8:	bd08      	pop	{r3, pc}
		return false;
   2aaaa:	2000      	movs	r0, #0
   2aaac:	e7fc      	b.n	2aaa8 <sec_level_reachable+0x14>
	switch (conn->required_sec_level) {
   2aaae:	2b04      	cmp	r3, #4
   2aab0:	d108      	bne.n	2aac4 <sec_level_reachable+0x30>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2aab2:	f7ff ff7d 	bl	2a9b0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2aab6:	2803      	cmp	r0, #3
   2aab8:	d017      	beq.n	2aaea <sec_level_reachable+0x56>
   2aaba:	4b12      	ldr	r3, [pc, #72]	; (2ab04 <sec_level_reachable+0x70>)
   2aabc:	781b      	ldrb	r3, [r3, #0]
   2aabe:	b9f3      	cbnz	r3, 2aafe <sec_level_reachable+0x6a>
   2aac0:	2000      	movs	r0, #0
   2aac2:	e7f1      	b.n	2aaa8 <sec_level_reachable+0x14>
		return false;
   2aac4:	2000      	movs	r0, #0
   2aac6:	e7ef      	b.n	2aaa8 <sec_level_reachable+0x14>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2aac8:	f7ff ff72 	bl	2a9b0 <get_io_capa>
   2aacc:	2803      	cmp	r0, #3
   2aace:	d001      	beq.n	2aad4 <sec_level_reachable+0x40>
   2aad0:	2001      	movs	r0, #1
   2aad2:	e7e9      	b.n	2aaa8 <sec_level_reachable+0x14>
		       (bt_auth && bt_auth->oob_data_request);
   2aad4:	4b0c      	ldr	r3, [pc, #48]	; (2ab08 <sec_level_reachable+0x74>)
   2aad6:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2aad8:	b12b      	cbz	r3, 2aae6 <sec_level_reachable+0x52>
		       (bt_auth && bt_auth->oob_data_request);
   2aada:	68db      	ldr	r3, [r3, #12]
   2aadc:	b10b      	cbz	r3, 2aae2 <sec_level_reachable+0x4e>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2aade:	2001      	movs	r0, #1
   2aae0:	e7e2      	b.n	2aaa8 <sec_level_reachable+0x14>
   2aae2:	2000      	movs	r0, #0
   2aae4:	e7e0      	b.n	2aaa8 <sec_level_reachable+0x14>
   2aae6:	2000      	movs	r0, #0
   2aae8:	e7de      	b.n	2aaa8 <sec_level_reachable+0x14>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2aaea:	4b07      	ldr	r3, [pc, #28]	; (2ab08 <sec_level_reachable+0x74>)
   2aaec:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2aaee:	b123      	cbz	r3, 2aafa <sec_level_reachable+0x66>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2aaf0:	68db      	ldr	r3, [r3, #12]
   2aaf2:	2b00      	cmp	r3, #0
   2aaf4:	d1e1      	bne.n	2aaba <sec_level_reachable+0x26>
   2aaf6:	2000      	movs	r0, #0
   2aaf8:	e7d6      	b.n	2aaa8 <sec_level_reachable+0x14>
   2aafa:	2000      	movs	r0, #0
   2aafc:	e7d4      	b.n	2aaa8 <sec_level_reachable+0x14>
   2aafe:	2001      	movs	r0, #1
   2ab00:	e7d2      	b.n	2aaa8 <sec_level_reachable+0x14>
   2ab02:	bf00      	nop
   2ab04:	2000da75 	.word	0x2000da75
   2ab08:	20008274 	.word	0x20008274

0002ab0c <smp_chan_get>:

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   2ab0c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2ab0e:	2106      	movs	r1, #6
   2ab10:	f00d f8f2 	bl	37cf8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2ab14:	4604      	mov	r4, r0
   2ab16:	b118      	cbz	r0, 2ab20 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
   2ab18:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
}
   2ab1c:	4620      	mov	r0, r4
   2ab1e:	bd10      	pop	{r4, pc}
   2ab20:	4b08      	ldr	r3, [pc, #32]	; (2ab44 <smp_chan_get+0x38>)
   2ab22:	4a09      	ldr	r2, [pc, #36]	; (2ab48 <smp_chan_get+0x3c>)
   2ab24:	1a9b      	subs	r3, r3, r2
   2ab26:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find SMP channel");
   2ab28:	f04f 0100 	mov.w	r1, #0
   2ab2c:	2201      	movs	r2, #1
   2ab2e:	f362 0102 	bfi	r1, r2, #0, #3
   2ab32:	f36f 01c5 	bfc	r1, #3, #3
   2ab36:	f363 118f 	bfi	r1, r3, #6, #10
   2ab3a:	4804      	ldr	r0, [pc, #16]	; (2ab4c <smp_chan_get+0x40>)
   2ab3c:	f7f5 fc6a 	bl	20414 <log_0>
		return NULL;
   2ab40:	e7ec      	b.n	2ab1c <smp_chan_get+0x10>
   2ab42:	bf00      	nop
   2ab44:	0003d214 	.word	0x0003d214
   2ab48:	0003d1a4 	.word	0x0003d1a4
   2ab4c:	000400d4 	.word	0x000400d4

0002ab50 <smp_find>:
	return 0;
}

static struct bt_smp *smp_find(int flag)
{
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   2ab50:	2100      	movs	r1, #0
   2ab52:	2913      	cmp	r1, #19
   2ab54:	dc1a      	bgt.n	2ab8c <smp_find+0x3c>
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   2ab56:	eb01 1381 	add.w	r3, r1, r1, lsl #6
   2ab5a:	4a0d      	ldr	r2, [pc, #52]	; (2ab90 <smp_find+0x40>)
   2ab5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2ab60:	3304      	adds	r3, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ab62:	0942      	lsrs	r2, r0, #5
   2ab64:	f3bf 8f5b 	dmb	ish
   2ab68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2ab6c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ab70:	f000 021f 	and.w	r2, r0, #31
   2ab74:	4113      	asrs	r3, r2
   2ab76:	f013 0f01 	tst.w	r3, #1
   2ab7a:	d101      	bne.n	2ab80 <smp_find+0x30>
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   2ab7c:	3101      	adds	r1, #1
   2ab7e:	e7e8      	b.n	2ab52 <smp_find+0x2>
			return &bt_smp_pool[i];
   2ab80:	eb01 1181 	add.w	r1, r1, r1, lsl #6
   2ab84:	4802      	ldr	r0, [pc, #8]	; (2ab90 <smp_find+0x40>)
   2ab86:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2ab8a:	4770      	bx	lr
		}
	}

	return NULL;
   2ab8c:	2000      	movs	r0, #0
}
   2ab8e:	4770      	bx	lr
   2ab90:	20004218 	.word	0x20004218

0002ab94 <get_pair_method>:
{
   2ab94:	b510      	push	{r4, lr}
   2ab96:	460c      	mov	r4, r1
   2ab98:	f3bf 8f5b 	dmb	ish
   2ab9c:	6843      	ldr	r3, [r0, #4]
   2ab9e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2aba2:	f013 0f20 	tst.w	r3, #32
   2aba6:	d01b      	beq.n	2abe0 <get_pair_method+0x4c>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2aba8:	7b03      	ldrb	r3, [r0, #12]
   2abaa:	7cc2      	ldrb	r2, [r0, #19]
   2abac:	ea03 0102 	and.w	r1, r3, r2
   2abb0:	f011 0f08 	tst.w	r1, #8
   2abb4:	d005      	beq.n	2abc2 <get_pair_method+0x2e>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   2abb6:	7ac1      	ldrb	r1, [r0, #11]
   2abb8:	7c80      	ldrb	r0, [r0, #18]
   2abba:	4301      	orrs	r1, r0
   2abbc:	f011 0f01 	tst.w	r1, #1
   2abc0:	d111      	bne.n	2abe6 <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   2abc2:	2c04      	cmp	r4, #4
   2abc4:	d811      	bhi.n	2abea <get_pair_method+0x56>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   2abc6:	ea43 0002 	orr.w	r0, r3, r2
   2abca:	f010 0004 	ands.w	r0, r0, #4
   2abce:	d009      	beq.n	2abe4 <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
   2abd0:	f7ff feee 	bl	2a9b0 <get_io_capa>
   2abd4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2abd8:	4905      	ldr	r1, [pc, #20]	; (2abf0 <get_pair_method+0x5c>)
   2abda:	440c      	add	r4, r1
   2abdc:	5c20      	ldrb	r0, [r4, r0]
   2abde:	e001      	b.n	2abe4 <get_pair_method+0x50>
		return legacy_get_pair_method(smp, remote_io);
   2abe0:	f7ff ff0e 	bl	2aa00 <legacy_get_pair_method>
}
   2abe4:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
   2abe6:	2005      	movs	r0, #5
   2abe8:	e7fc      	b.n	2abe4 <get_pair_method+0x50>
		return JUST_WORKS;
   2abea:	2000      	movs	r0, #0
   2abec:	e7fa      	b.n	2abe4 <get_pair_method+0x50>
   2abee:	bf00      	nop
   2abf0:	0004044c 	.word	0x0004044c

0002abf4 <sc_send_public_key>:
{
   2abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2abf6:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   2abf8:	2240      	movs	r2, #64	; 0x40
   2abfa:	210c      	movs	r1, #12
   2abfc:	f00f f8c1 	bl	39d82 <smp_create_pdu>
	if (!req_buf) {
   2ac00:	b1c0      	cbz	r0, 2ac34 <sc_send_public_key+0x40>
   2ac02:	4606      	mov	r6, r0
   2ac04:	2140      	movs	r1, #64	; 0x40
   2ac06:	3008      	adds	r0, #8
   2ac08:	f00f ff53 	bl	3aab2 <net_buf_simple_add>
   2ac0c:	4605      	mov	r5, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
   2ac0e:	4f0a      	ldr	r7, [pc, #40]	; (2ac38 <sc_send_public_key+0x44>)
   2ac10:	2220      	movs	r2, #32
   2ac12:	6839      	ldr	r1, [r7, #0]
   2ac14:	f00c f8a6 	bl	36d64 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   2ac18:	6839      	ldr	r1, [r7, #0]
   2ac1a:	2220      	movs	r2, #32
   2ac1c:	4411      	add	r1, r2
   2ac1e:	18a8      	adds	r0, r5, r2
   2ac20:	f00c f8a0 	bl	36d64 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   2ac24:	2300      	movs	r3, #0
   2ac26:	461a      	mov	r2, r3
   2ac28:	4631      	mov	r1, r6
   2ac2a:	4620      	mov	r0, r4
   2ac2c:	f00f f8d4 	bl	39dd8 <smp_send>
	return 0;
   2ac30:	2000      	movs	r0, #0
}
   2ac32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ac34:	2008      	movs	r0, #8
   2ac36:	e7fc      	b.n	2ac32 <sc_send_public_key+0x3e>
   2ac38:	20008854 	.word	0x20008854

0002ac3c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   2ac3c:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   2ac3e:	2300      	movs	r3, #0
   2ac40:	e000      	b.n	2ac44 <bt_smp_accept+0x8>
   2ac42:	3301      	adds	r3, #1
   2ac44:	2b13      	cmp	r3, #19
   2ac46:	dc18      	bgt.n	2ac7a <bt_smp_accept+0x3e>
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   2ac48:	eb03 1283 	add.w	r2, r3, r3, lsl #6
   2ac4c:	4c15      	ldr	r4, [pc, #84]	; (2aca4 <bt_smp_accept+0x68>)
   2ac4e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   2ac52:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   2ac56:	2a00      	cmp	r2, #0
   2ac58:	d1f3      	bne.n	2ac42 <bt_smp_accept+0x6>
			continue;
		}

		smp->chan.chan.ops = &ops;
   2ac5a:	4812      	ldr	r0, [pc, #72]	; (2aca4 <bt_smp_accept+0x68>)
   2ac5c:	eb03 1283 	add.w	r2, r3, r3, lsl #6
   2ac60:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   2ac64:	4c10      	ldr	r4, [pc, #64]	; (2aca8 <bt_smp_accept+0x6c>)
   2ac66:	f8c2 40f4 	str.w	r4, [r2, #244]	; 0xf4

		*chan = &smp->chan.chan;
   2ac6a:	eb03 1383 	add.w	r3, r3, r3, lsl #6
   2ac6e:	00db      	lsls	r3, r3, #3
   2ac70:	33f0      	adds	r3, #240	; 0xf0
   2ac72:	4403      	add	r3, r0
   2ac74:	600b      	str	r3, [r1, #0]

		return 0;
   2ac76:	2000      	movs	r0, #0
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   2ac78:	bd10      	pop	{r4, pc}
   2ac7a:	4b0c      	ldr	r3, [pc, #48]	; (2acac <bt_smp_accept+0x70>)
   2ac7c:	4a0c      	ldr	r2, [pc, #48]	; (2acb0 <bt_smp_accept+0x74>)
   2ac7e:	1a9b      	subs	r3, r3, r2
   2ac80:	08db      	lsrs	r3, r3, #3
	BT_ERR("No available SMP context for conn %p", conn);
   2ac82:	f04f 0200 	mov.w	r2, #0
   2ac86:	2101      	movs	r1, #1
   2ac88:	f361 0202 	bfi	r2, r1, #0, #3
   2ac8c:	f36f 02c5 	bfc	r2, #3, #3
   2ac90:	f363 128f 	bfi	r2, r3, #6, #10
   2ac94:	4601      	mov	r1, r0
   2ac96:	4807      	ldr	r0, [pc, #28]	; (2acb4 <bt_smp_accept+0x78>)
   2ac98:	f7f5 fb06 	bl	202a8 <log_1>
	return -ENOMEM;
   2ac9c:	f06f 000b 	mvn.w	r0, #11
   2aca0:	e7ea      	b.n	2ac78 <bt_smp_accept+0x3c>
   2aca2:	bf00      	nop
   2aca4:	20004218 	.word	0x20004218
   2aca8:	000404e0 	.word	0x000404e0
   2acac:	0003d214 	.word	0x0003d214
   2acb0:	0003d1a4 	.word	0x0003d1a4
   2acb4:	000400f0 	.word	0x000400f0

0002acb8 <smp_send_pairing_confirm>:
{
   2acb8:	b570      	push	{r4, r5, r6, lr}
   2acba:	b082      	sub	sp, #8
   2acbc:	4605      	mov	r5, r0
	switch (smp->method) {
   2acbe:	7a04      	ldrb	r4, [r0, #8]
   2acc0:	2c02      	cmp	r4, #2
   2acc2:	d816      	bhi.n	2acf2 <smp_send_pairing_confirm+0x3a>
   2acc4:	b263      	sxtb	r3, r4
   2acc6:	2b00      	cmp	r3, #0
   2acc8:	d142      	bne.n	2ad50 <smp_send_pairing_confirm+0x98>
   2acca:	b1ac      	cbz	r4, 2acf8 <smp_send_pairing_confirm+0x40>
   2accc:	4b29      	ldr	r3, [pc, #164]	; (2ad74 <smp_send_pairing_confirm+0xbc>)
   2acce:	4a2a      	ldr	r2, [pc, #168]	; (2ad78 <smp_send_pairing_confirm+0xc0>)
   2acd0:	1a9b      	subs	r3, r3, r2
   2acd2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   2acd4:	f04f 0200 	mov.w	r2, #0
   2acd8:	2101      	movs	r1, #1
   2acda:	f361 0202 	bfi	r2, r1, #0, #3
   2acde:	f36f 02c5 	bfc	r2, #3, #3
   2ace2:	f363 128f 	bfi	r2, r3, #6, #10
   2ace6:	4621      	mov	r1, r4
   2ace8:	4824      	ldr	r0, [pc, #144]	; (2ad7c <smp_send_pairing_confirm+0xc4>)
   2acea:	f7f5 fadd 	bl	202a8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   2acee:	2008      	movs	r0, #8
   2acf0:	e02c      	b.n	2ad4c <smp_send_pairing_confirm+0x94>
	switch (smp->method) {
   2acf2:	2c03      	cmp	r4, #3
   2acf4:	d1ea      	bne.n	2accc <smp_send_pairing_confirm+0x14>
   2acf6:	2400      	movs	r4, #0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2acf8:	2210      	movs	r2, #16
   2acfa:	2103      	movs	r1, #3
   2acfc:	4628      	mov	r0, r5
   2acfe:	f00f f840 	bl	39d82 <smp_create_pdu>
	if (!buf) {
   2ad02:	4606      	mov	r6, r0
   2ad04:	b3a0      	cbz	r0, 2ad70 <smp_send_pairing_confirm+0xb8>
   2ad06:	2110      	movs	r1, #16
   2ad08:	3008      	adds	r0, #8
   2ad0a:	f00f fed2 	bl	3aab2 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   2ad0e:	9000      	str	r0, [sp, #0]
   2ad10:	4623      	mov	r3, r4
   2ad12:	f105 0227 	add.w	r2, r5, #39	; 0x27
   2ad16:	f105 0157 	add.w	r1, r5, #87	; 0x57
   2ad1a:	4819      	ldr	r0, [pc, #100]	; (2ad80 <smp_send_pairing_confirm+0xc8>)
   2ad1c:	6800      	ldr	r0, [r0, #0]
   2ad1e:	f00f f936 	bl	39f8e <smp_f4>
   2ad22:	bb00      	cbnz	r0, 2ad66 <smp_send_pairing_confirm+0xae>
	smp_send(smp, buf, NULL, NULL);
   2ad24:	2300      	movs	r3, #0
   2ad26:	461a      	mov	r2, r3
   2ad28:	4631      	mov	r1, r6
   2ad2a:	4628      	mov	r0, r5
   2ad2c:	f00f f854 	bl	39dd8 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2ad30:	1d28      	adds	r0, r5, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ad32:	f3bf 8f5b 	dmb	ish
   2ad36:	e850 3f00 	ldrex	r3, [r0]
   2ad3a:	f023 0301 	bic.w	r3, r3, #1
   2ad3e:	e840 3200 	strex	r2, r3, [r0]
   2ad42:	2a00      	cmp	r2, #0
   2ad44:	d1f7      	bne.n	2ad36 <smp_send_pairing_confirm+0x7e>
   2ad46:	f3bf 8f5b 	dmb	ish
	return 0;
   2ad4a:	2000      	movs	r0, #0
}
   2ad4c:	b002      	add	sp, #8
   2ad4e:	bd70      	pop	{r4, r5, r6, pc}
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2ad50:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   2ad54:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   2ad58:	40dc      	lsrs	r4, r3
   2ad5a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   2ad5e:	f064 047f 	orn	r4, r4, #127	; 0x7f
   2ad62:	b2e4      	uxtb	r4, r4
		break;
   2ad64:	e7c8      	b.n	2acf8 <smp_send_pairing_confirm+0x40>
		net_buf_unref(buf);
   2ad66:	4630      	mov	r0, r6
   2ad68:	f00f fe59 	bl	3aa1e <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2ad6c:	2008      	movs	r0, #8
   2ad6e:	e7ed      	b.n	2ad4c <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
   2ad70:	2008      	movs	r0, #8
   2ad72:	e7eb      	b.n	2ad4c <smp_send_pairing_confirm+0x94>
   2ad74:	0003d214 	.word	0x0003d214
   2ad78:	0003d1a4 	.word	0x0003d1a4
   2ad7c:	00040118 	.word	0x00040118
   2ad80:	20008854 	.word	0x20008854

0002ad84 <sc_smp_check_confirm>:
{
   2ad84:	b510      	push	{r4, lr}
   2ad86:	b086      	sub	sp, #24
   2ad88:	4604      	mov	r4, r0
	switch (smp->method) {
   2ad8a:	7a01      	ldrb	r1, [r0, #8]
   2ad8c:	2905      	cmp	r1, #5
   2ad8e:	d80f      	bhi.n	2adb0 <sc_smp_check_confirm+0x2c>
   2ad90:	e8df f001 	tbb	[pc, r1]
   2ad94:	20030320 	.word	0x20030320
   2ad98:	470e      	.short	0x470e
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2ad9a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   2ad9e:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   2ada2:	40d3      	lsrs	r3, r2
   2ada4:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   2ada8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2adac:	b2db      	uxtb	r3, r3
		break;
   2adae:	e012      	b.n	2add6 <sc_smp_check_confirm+0x52>
   2adb0:	4b1e      	ldr	r3, [pc, #120]	; (2ae2c <sc_smp_check_confirm+0xa8>)
   2adb2:	4a1f      	ldr	r2, [pc, #124]	; (2ae30 <sc_smp_check_confirm+0xac>)
   2adb4:	1a9b      	subs	r3, r3, r2
   2adb6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   2adb8:	f04f 0200 	mov.w	r2, #0
   2adbc:	2001      	movs	r0, #1
   2adbe:	f360 0202 	bfi	r2, r0, #0, #3
   2adc2:	f36f 02c5 	bfc	r2, #3, #3
   2adc6:	f363 128f 	bfi	r2, r3, #6, #10
   2adca:	481a      	ldr	r0, [pc, #104]	; (2ae34 <sc_smp_check_confirm+0xb0>)
   2adcc:	f7f5 fa6c 	bl	202a8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   2add0:	2008      	movs	r0, #8
   2add2:	e012      	b.n	2adfa <sc_smp_check_confirm+0x76>
	switch (smp->method) {
   2add4:	2300      	movs	r3, #0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2add6:	aa02      	add	r2, sp, #8
   2add8:	9200      	str	r2, [sp, #0]
   2adda:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2adde:	4916      	ldr	r1, [pc, #88]	; (2ae38 <sc_smp_check_confirm+0xb4>)
   2ade0:	6809      	ldr	r1, [r1, #0]
   2ade2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2ade6:	f00f f8d2 	bl	39f8e <smp_f4>
   2adea:	b940      	cbnz	r0, 2adfe <sc_smp_check_confirm+0x7a>
	if (memcmp(smp->pcnf, cfm, 16)) {
   2adec:	2210      	movs	r2, #16
   2adee:	a902      	add	r1, sp, #8
   2adf0:	f104 0017 	add.w	r0, r4, #23
   2adf4:	f00b ff89 	bl	36d0a <memcmp>
   2adf8:	b9a8      	cbnz	r0, 2ae26 <sc_smp_check_confirm+0xa2>
}
   2adfa:	b006      	add	sp, #24
   2adfc:	bd10      	pop	{r4, pc}
   2adfe:	4b0b      	ldr	r3, [pc, #44]	; (2ae2c <sc_smp_check_confirm+0xa8>)
   2ae00:	4a0b      	ldr	r2, [pc, #44]	; (2ae30 <sc_smp_check_confirm+0xac>)
   2ae02:	1a9b      	subs	r3, r3, r2
   2ae04:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate confirm failed");
   2ae06:	f04f 0100 	mov.w	r1, #0
   2ae0a:	2201      	movs	r2, #1
   2ae0c:	f362 0102 	bfi	r1, r2, #0, #3
   2ae10:	f36f 01c5 	bfc	r1, #3, #3
   2ae14:	f363 118f 	bfi	r1, r3, #6, #10
   2ae18:	4808      	ldr	r0, [pc, #32]	; (2ae3c <sc_smp_check_confirm+0xb8>)
   2ae1a:	f7f5 fafb 	bl	20414 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   2ae1e:	2008      	movs	r0, #8
   2ae20:	e7eb      	b.n	2adfa <sc_smp_check_confirm+0x76>
	switch (smp->method) {
   2ae22:	2000      	movs	r0, #0
   2ae24:	e7e9      	b.n	2adfa <sc_smp_check_confirm+0x76>
		return BT_SMP_ERR_CONFIRM_FAILED;
   2ae26:	2004      	movs	r0, #4
   2ae28:	e7e7      	b.n	2adfa <sc_smp_check_confirm+0x76>
   2ae2a:	bf00      	nop
   2ae2c:	0003d214 	.word	0x0003d214
   2ae30:	0003d1a4 	.word	0x0003d1a4
   2ae34:	00040118 	.word	0x00040118
   2ae38:	20008854 	.word	0x20008854
   2ae3c:	00040134 	.word	0x00040134

0002ae40 <smp_f5>:
{
   2ae40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ae44:	b09b      	sub	sp, #108	; 0x6c
   2ae46:	4604      	mov	r4, r0
   2ae48:	460f      	mov	r7, r1
   2ae4a:	4616      	mov	r6, r2
   2ae4c:	461d      	mov	r5, r3
   2ae4e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   2ae52:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	uint8_t m[53] = { 0x00, /* counter */
   2ae56:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   2ae5a:	f8df e124 	ldr.w	lr, [pc, #292]	; 2af80 <smp_f5+0x140>
   2ae5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2ae62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2ae66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2ae6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2ae6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2ae72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2ae76:	e89e 0003 	ldmia.w	lr, {r0, r1}
   2ae7a:	f84c 0b04 	str.w	r0, [ip], #4
   2ae7e:	f88c 1000 	strb.w	r1, [ip]
	psrc += length - 1;
   2ae82:	f104 001f 	add.w	r0, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
   2ae86:	466b      	mov	r3, sp
	for (; length > 0; length--) {
   2ae88:	2220      	movs	r2, #32
   2ae8a:	b12a      	cbz	r2, 2ae98 <smp_f5+0x58>
		*pdst++ = *psrc--;
   2ae8c:	f810 1901 	ldrb.w	r1, [r0], #-1
   2ae90:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   2ae94:	3a01      	subs	r2, #1
   2ae96:	e7f8      	b.n	2ae8a <smp_f5+0x4a>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   2ae98:	ab08      	add	r3, sp, #32
   2ae9a:	2220      	movs	r2, #32
   2ae9c:	4669      	mov	r1, sp
   2ae9e:	4837      	ldr	r0, [pc, #220]	; (2af7c <smp_f5+0x13c>)
   2aea0:	f00f f853 	bl	39f4a <bt_smp_aes_cmac>
	if (err) {
   2aea4:	4684      	mov	ip, r0
   2aea6:	2800      	cmp	r0, #0
   2aea8:	d164      	bne.n	2af74 <smp_f5+0x134>
	psrc += length - 1;
   2aeaa:	370f      	adds	r7, #15
	uint8_t *pdst = (uint8_t *)dst;
   2aeac:	f10d 0335 	add.w	r3, sp, #53	; 0x35
	for (; length > 0; length--) {
   2aeb0:	2210      	movs	r2, #16
   2aeb2:	e004      	b.n	2aebe <smp_f5+0x7e>
		*pdst++ = *psrc--;
   2aeb4:	f817 1901 	ldrb.w	r1, [r7], #-1
   2aeb8:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   2aebc:	3a01      	subs	r2, #1
   2aebe:	2a00      	cmp	r2, #0
   2aec0:	d1f8      	bne.n	2aeb4 <smp_f5+0x74>
	psrc += length - 1;
   2aec2:	360f      	adds	r6, #15
	uint8_t *pdst = (uint8_t *)dst;
   2aec4:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	for (; length > 0; length--) {
   2aec8:	2210      	movs	r2, #16
   2aeca:	b12a      	cbz	r2, 2aed8 <smp_f5+0x98>
		*pdst++ = *psrc--;
   2aecc:	f816 1901 	ldrb.w	r1, [r6], #-1
   2aed0:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   2aed4:	3a01      	subs	r2, #1
   2aed6:	e7f8      	b.n	2aeca <smp_f5+0x8a>
	m[37] = a1->type;
   2aed8:	f815 3b06 	ldrb.w	r3, [r5], #6
   2aedc:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	uint8_t *pdst = (uint8_t *)dst;
   2aee0:	f10d 0356 	add.w	r3, sp, #86	; 0x56
	for (; length > 0; length--) {
   2aee4:	2206      	movs	r2, #6
   2aee6:	b12a      	cbz	r2, 2aef4 <smp_f5+0xb4>
		*pdst++ = *psrc--;
   2aee8:	f815 1901 	ldrb.w	r1, [r5], #-1
   2aeec:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   2aef0:	3a01      	subs	r2, #1
   2aef2:	e7f8      	b.n	2aee6 <smp_f5+0xa6>
	m[44] = a2->type;
   2aef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2aef6:	f813 2b06 	ldrb.w	r2, [r3], #6
   2aefa:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	uint8_t *pdst = (uint8_t *)dst;
   2aefe:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
	for (; length > 0; length--) {
   2af02:	2406      	movs	r4, #6
   2af04:	e004      	b.n	2af10 <smp_f5+0xd0>
		*pdst++ = *psrc--;
   2af06:	f813 1901 	ldrb.w	r1, [r3], #-1
   2af0a:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   2af0e:	3c01      	subs	r4, #1
   2af10:	2c00      	cmp	r4, #0
   2af12:	d1f8      	bne.n	2af06 <smp_f5+0xc6>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   2af14:	4643      	mov	r3, r8
   2af16:	2235      	movs	r2, #53	; 0x35
   2af18:	a90c      	add	r1, sp, #48	; 0x30
   2af1a:	a808      	add	r0, sp, #32
   2af1c:	f00f f815 	bl	39f4a <bt_smp_aes_cmac>
	if (err) {
   2af20:	4684      	mov	ip, r0
   2af22:	bb38      	cbnz	r0, 2af74 <smp_f5+0x134>
	for (i = 0; i < (length/2); i++) {
   2af24:	4623      	mov	r3, r4
   2af26:	e00a      	b.n	2af3e <smp_f5+0xfe>
		uint8_t tmp = ((uint8_t *)buf)[i];
   2af28:	f818 1003 	ldrb.w	r1, [r8, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2af2c:	f1c3 020f 	rsb	r2, r3, #15
   2af30:	f818 0002 	ldrb.w	r0, [r8, r2]
   2af34:	f808 0003 	strb.w	r0, [r8, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2af38:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
   2af3c:	3301      	adds	r3, #1
   2af3e:	2b07      	cmp	r3, #7
   2af40:	d9f2      	bls.n	2af28 <smp_f5+0xe8>
	m[0] = 0x01;
   2af42:	2301      	movs	r3, #1
   2af44:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   2af48:	464b      	mov	r3, r9
   2af4a:	2235      	movs	r2, #53	; 0x35
   2af4c:	a90c      	add	r1, sp, #48	; 0x30
   2af4e:	a808      	add	r0, sp, #32
   2af50:	f00e fffb 	bl	39f4a <bt_smp_aes_cmac>
	if (err) {
   2af54:	4684      	mov	ip, r0
   2af56:	b968      	cbnz	r0, 2af74 <smp_f5+0x134>
   2af58:	2c07      	cmp	r4, #7
   2af5a:	d80b      	bhi.n	2af74 <smp_f5+0x134>
		uint8_t tmp = ((uint8_t *)buf)[i];
   2af5c:	f819 2004 	ldrb.w	r2, [r9, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2af60:	f1c4 030f 	rsb	r3, r4, #15
   2af64:	f819 1003 	ldrb.w	r1, [r9, r3]
   2af68:	f809 1004 	strb.w	r1, [r9, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2af6c:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
   2af70:	3401      	adds	r4, #1
   2af72:	e7f1      	b.n	2af58 <smp_f5+0x118>
}
   2af74:	4660      	mov	r0, ip
   2af76:	b01b      	add	sp, #108	; 0x6c
   2af78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2af7c:	00040504 	.word	0x00040504
   2af80:	0003d3f0 	.word	0x0003d3f0

0002af84 <compute_and_send_central_dhcheck>:
{
   2af84:	b5f0      	push	{r4, r5, r6, r7, lr}
   2af86:	b08d      	sub	sp, #52	; 0x34
   2af88:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   2af8a:	2210      	movs	r2, #16
   2af8c:	2100      	movs	r1, #0
   2af8e:	eb0d 0002 	add.w	r0, sp, r2
   2af92:	f00b ff0b 	bl	36dac <memset>
	switch (smp->method) {
   2af96:	7a21      	ldrb	r1, [r4, #8]
   2af98:	2905      	cmp	r1, #5
   2af9a:	d852      	bhi.n	2b042 <compute_and_send_central_dhcheck+0xbe>
   2af9c:	e8df f001 	tbb	[pc, r1]
   2afa0:	09030309 	.word	0x09030309
   2afa4:	4751      	.short	0x4751
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   2afa6:	2204      	movs	r2, #4
   2afa8:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   2afac:	a804      	add	r0, sp, #16
   2afae:	f00b fed9 	bl	36d64 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   2afb2:	f104 0627 	add.w	r6, r4, #39	; 0x27
   2afb6:	f104 0737 	add.w	r7, r4, #55	; 0x37
		   &smp->chan.chan.conn->le.init_addr,
   2afba:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   2afbe:	f103 0296 	add.w	r2, r3, #150	; 0x96
   2afc2:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
		   smp->tk)) {
   2afc6:	f104 0147 	add.w	r1, r4, #71	; 0x47
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   2afca:	9102      	str	r1, [sp, #8]
   2afcc:	9501      	str	r5, [sp, #4]
   2afce:	9200      	str	r2, [sp, #0]
   2afd0:	338f      	adds	r3, #143	; 0x8f
   2afd2:	463a      	mov	r2, r7
   2afd4:	4631      	mov	r1, r6
   2afd6:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2afda:	f7ff ff31 	bl	2ae40 <smp_f5>
   2afde:	2800      	cmp	r0, #0
   2afe0:	d141      	bne.n	2b066 <compute_and_send_central_dhcheck+0xe2>
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   2afe2:	f104 020a 	add.w	r2, r4, #10
		   &smp->chan.chan.conn->le.init_addr,
   2afe6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2afea:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   2afee:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   2aff0:	a808      	add	r0, sp, #32
   2aff2:	9003      	str	r0, [sp, #12]
   2aff4:	9302      	str	r3, [sp, #8]
   2aff6:	9101      	str	r1, [sp, #4]
   2aff8:	9200      	str	r2, [sp, #0]
   2affa:	ab04      	add	r3, sp, #16
   2affc:	463a      	mov	r2, r7
   2affe:	4631      	mov	r1, r6
   2b000:	4628      	mov	r0, r5
   2b002:	f00e fffb 	bl	39ffc <smp_f6>
   2b006:	2800      	cmp	r0, #0
   2b008:	d13f      	bne.n	2b08a <compute_and_send_central_dhcheck+0x106>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b00a:	f3bf 8f5b 	dmb	ish
   2b00e:	e854 3f00 	ldrex	r3, [r4]
   2b012:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2b016:	e844 3200 	strex	r2, r3, [r4]
   2b01a:	2a00      	cmp	r2, #0
   2b01c:	d1f7      	bne.n	2b00e <compute_and_send_central_dhcheck+0x8a>
   2b01e:	f3bf 8f5b 	dmb	ish
	return sc_smp_send_dhkey_check(smp, e);
   2b022:	a908      	add	r1, sp, #32
   2b024:	4620      	mov	r0, r4
   2b026:	f00e ff2f 	bl	39e88 <sc_smp_send_dhkey_check>
}
   2b02a:	b00d      	add	sp, #52	; 0x34
   2b02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->oobd_remote) {
   2b02e:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   2b032:	2900      	cmp	r1, #0
   2b034:	d0bd      	beq.n	2afb2 <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2b036:	2210      	movs	r2, #16
   2b038:	eb0d 0002 	add.w	r0, sp, r2
   2b03c:	f00b fe92 	bl	36d64 <memcpy>
   2b040:	e7b7      	b.n	2afb2 <compute_and_send_central_dhcheck+0x2e>
   2b042:	4b1b      	ldr	r3, [pc, #108]	; (2b0b0 <compute_and_send_central_dhcheck+0x12c>)
   2b044:	4a1b      	ldr	r2, [pc, #108]	; (2b0b4 <compute_and_send_central_dhcheck+0x130>)
   2b046:	1a9b      	subs	r3, r3, r2
   2b048:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   2b04a:	f04f 0200 	mov.w	r2, #0
   2b04e:	2001      	movs	r0, #1
   2b050:	f360 0202 	bfi	r2, r0, #0, #3
   2b054:	f36f 02c5 	bfc	r2, #3, #3
   2b058:	f363 128f 	bfi	r2, r3, #6, #10
   2b05c:	4816      	ldr	r0, [pc, #88]	; (2b0b8 <compute_and_send_central_dhcheck+0x134>)
   2b05e:	f7f5 f923 	bl	202a8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   2b062:	2008      	movs	r0, #8
   2b064:	e7e1      	b.n	2b02a <compute_and_send_central_dhcheck+0xa6>
   2b066:	4b12      	ldr	r3, [pc, #72]	; (2b0b0 <compute_and_send_central_dhcheck+0x12c>)
   2b068:	4a12      	ldr	r2, [pc, #72]	; (2b0b4 <compute_and_send_central_dhcheck+0x130>)
   2b06a:	1a9b      	subs	r3, r3, r2
   2b06c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate LTK failed");
   2b06e:	f04f 0100 	mov.w	r1, #0
   2b072:	2201      	movs	r2, #1
   2b074:	f362 0102 	bfi	r1, r2, #0, #3
   2b078:	f36f 01c5 	bfc	r1, #3, #3
   2b07c:	f363 118f 	bfi	r1, r3, #6, #10
   2b080:	480e      	ldr	r0, [pc, #56]	; (2b0bc <compute_and_send_central_dhcheck+0x138>)
   2b082:	f7f5 f9c7 	bl	20414 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   2b086:	2008      	movs	r0, #8
   2b088:	e7cf      	b.n	2b02a <compute_and_send_central_dhcheck+0xa6>
   2b08a:	4b09      	ldr	r3, [pc, #36]	; (2b0b0 <compute_and_send_central_dhcheck+0x12c>)
   2b08c:	4a09      	ldr	r2, [pc, #36]	; (2b0b4 <compute_and_send_central_dhcheck+0x130>)
   2b08e:	1a9b      	subs	r3, r3, r2
   2b090:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate local DHKey check failed");
   2b092:	f04f 0100 	mov.w	r1, #0
   2b096:	2201      	movs	r2, #1
   2b098:	f362 0102 	bfi	r1, r2, #0, #3
   2b09c:	f36f 01c5 	bfc	r1, #3, #3
   2b0a0:	f363 118f 	bfi	r1, r3, #6, #10
   2b0a4:	4806      	ldr	r0, [pc, #24]	; (2b0c0 <compute_and_send_central_dhcheck+0x13c>)
   2b0a6:	f7f5 f9b5 	bl	20414 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   2b0aa:	2008      	movs	r0, #8
   2b0ac:	e7bd      	b.n	2b02a <compute_and_send_central_dhcheck+0xa6>
   2b0ae:	bf00      	nop
   2b0b0:	0003d214 	.word	0x0003d214
   2b0b4:	0003d1a4 	.word	0x0003d1a4
   2b0b8:	00040118 	.word	0x00040118
   2b0bc:	00040150 	.word	0x00040150
   2b0c0:	00040168 	.word	0x00040168

0002b0c4 <smp_g2>:
{
   2b0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b0c6:	b099      	sub	sp, #100	; 0x64
   2b0c8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	psrc += length - 1;
   2b0ca:	301f      	adds	r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   2b0cc:	ad04      	add	r5, sp, #16
	for (; length > 0; length--) {
   2b0ce:	2620      	movs	r6, #32
   2b0d0:	b12e      	cbz	r6, 2b0de <smp_g2+0x1a>
		*pdst++ = *psrc--;
   2b0d2:	f810 7901 	ldrb.w	r7, [r0], #-1
   2b0d6:	f805 7b01 	strb.w	r7, [r5], #1
	for (; length > 0; length--) {
   2b0da:	3e01      	subs	r6, #1
   2b0dc:	e7f8      	b.n	2b0d0 <smp_g2+0xc>
	psrc += length - 1;
   2b0de:	311f      	adds	r1, #31
	uint8_t *pdst = (uint8_t *)dst;
   2b0e0:	a80c      	add	r0, sp, #48	; 0x30
	for (; length > 0; length--) {
   2b0e2:	2520      	movs	r5, #32
   2b0e4:	b12d      	cbz	r5, 2b0f2 <smp_g2+0x2e>
		*pdst++ = *psrc--;
   2b0e6:	f811 6901 	ldrb.w	r6, [r1], #-1
   2b0ea:	f800 6b01 	strb.w	r6, [r0], #1
	for (; length > 0; length--) {
   2b0ee:	3d01      	subs	r5, #1
   2b0f0:	e7f8      	b.n	2b0e4 <smp_g2+0x20>
	psrc += length - 1;
   2b0f2:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
   2b0f4:	a914      	add	r1, sp, #80	; 0x50
	for (; length > 0; length--) {
   2b0f6:	2010      	movs	r0, #16
   2b0f8:	b128      	cbz	r0, 2b106 <smp_g2+0x42>
		*pdst++ = *psrc--;
   2b0fa:	f813 5901 	ldrb.w	r5, [r3], #-1
   2b0fe:	f801 5b01 	strb.w	r5, [r1], #1
	for (; length > 0; length--) {
   2b102:	3801      	subs	r0, #1
   2b104:	e7f8      	b.n	2b0f8 <smp_g2+0x34>
	psrc += length - 1;
   2b106:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
   2b108:	466b      	mov	r3, sp
	for (; length > 0; length--) {
   2b10a:	2110      	movs	r1, #16
   2b10c:	e004      	b.n	2b118 <smp_g2+0x54>
		*pdst++ = *psrc--;
   2b10e:	f812 0901 	ldrb.w	r0, [r2], #-1
   2b112:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   2b116:	3901      	subs	r1, #1
   2b118:	2900      	cmp	r1, #0
   2b11a:	d1f8      	bne.n	2b10e <smp_g2+0x4a>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   2b11c:	466b      	mov	r3, sp
   2b11e:	2250      	movs	r2, #80	; 0x50
   2b120:	a904      	add	r1, sp, #16
   2b122:	4668      	mov	r0, sp
   2b124:	f00e ff11 	bl	39f4a <bt_smp_aes_cmac>
	if (err) {
   2b128:	4605      	mov	r5, r0
   2b12a:	b110      	cbz	r0, 2b132 <smp_g2+0x6e>
}
   2b12c:	4628      	mov	r0, r5
   2b12e:	b019      	add	sp, #100	; 0x64
   2b130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
   2b132:	2204      	movs	r2, #4
   2b134:	a903      	add	r1, sp, #12
   2b136:	4620      	mov	r0, r4
   2b138:	f00b fe14 	bl	36d64 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2b13c:	6822      	ldr	r2, [r4, #0]
   2b13e:	0a13      	lsrs	r3, r2, #8
   2b140:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2b144:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   2b148:	0211      	lsls	r1, r2, #8
   2b14a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   2b14e:	430b      	orrs	r3, r1
   2b150:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2b154:	4a04      	ldr	r2, [pc, #16]	; (2b168 <smp_g2+0xa4>)
   2b156:	fba2 1203 	umull	r1, r2, r2, r3
   2b15a:	0c92      	lsrs	r2, r2, #18
   2b15c:	4903      	ldr	r1, [pc, #12]	; (2b16c <smp_g2+0xa8>)
   2b15e:	fb01 3212 	mls	r2, r1, r2, r3
   2b162:	6022      	str	r2, [r4, #0]
	return 0;
   2b164:	e7e2      	b.n	2b12c <smp_g2+0x68>
   2b166:	bf00      	nop
   2b168:	431bde83 	.word	0x431bde83
   2b16c:	000f4240 	.word	0x000f4240

0002b170 <display_passkey>:
{
   2b170:	b510      	push	{r4, lr}
   2b172:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   2b174:	2104      	movs	r1, #4
   2b176:	30d8      	adds	r0, #216	; 0xd8
   2b178:	f003 fb44 	bl	2e804 <bt_rand>
   2b17c:	bb48      	cbnz	r0, 2b1d2 <display_passkey+0x62>
		smp->passkey %= 1000000;
   2b17e:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   2b182:	4b15      	ldr	r3, [pc, #84]	; (2b1d8 <display_passkey+0x68>)
   2b184:	fba3 1302 	umull	r1, r3, r3, r2
   2b188:	0c9b      	lsrs	r3, r3, #18
   2b18a:	4914      	ldr	r1, [pc, #80]	; (2b1dc <display_passkey+0x6c>)
   2b18c:	fb01 2313 	mls	r3, r1, r3, r2
   2b190:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   2b194:	2300      	movs	r3, #0
   2b196:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   2b19a:	4b11      	ldr	r3, [pc, #68]	; (2b1e0 <display_passkey+0x70>)
   2b19c:	681b      	ldr	r3, [r3, #0]
   2b19e:	b1b3      	cbz	r3, 2b1ce <display_passkey+0x5e>
   2b1a0:	681b      	ldr	r3, [r3, #0]
   2b1a2:	b1a3      	cbz	r3, 2b1ce <display_passkey+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   2b1a4:	1d23      	adds	r3, r4, #4
   2b1a6:	f3bf 8f5b 	dmb	ish
   2b1aa:	e853 2f00 	ldrex	r2, [r3]
   2b1ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2b1b2:	e843 2100 	strex	r1, r2, [r3]
   2b1b6:	2900      	cmp	r1, #0
   2b1b8:	d1f7      	bne.n	2b1aa <display_passkey+0x3a>
   2b1ba:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   2b1be:	4b08      	ldr	r3, [pc, #32]	; (2b1e0 <display_passkey+0x70>)
   2b1c0:	681b      	ldr	r3, [r3, #0]
   2b1c2:	681b      	ldr	r3, [r3, #0]
   2b1c4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   2b1c8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2b1cc:	4798      	blx	r3
	return 0;
   2b1ce:	2000      	movs	r0, #0
}
   2b1d0:	bd10      	pop	{r4, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   2b1d2:	2008      	movs	r0, #8
   2b1d4:	e7fc      	b.n	2b1d0 <display_passkey+0x60>
   2b1d6:	bf00      	nop
   2b1d8:	431bde83 	.word	0x431bde83
   2b1dc:	000f4240 	.word	0x000f4240
   2b1e0:	20008274 	.word	0x20008274

0002b1e4 <smp_dhkey_check>:
{
   2b1e4:	b570      	push	{r4, r5, r6, lr}
   2b1e6:	b090      	sub	sp, #64	; 0x40
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2b1e8:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2b1ea:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   2b1ee:	78dd      	ldrb	r5, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2b1f0:	b11d      	cbz	r5, 2b1fa <smp_dhkey_check+0x16>
	return 0;
   2b1f2:	2500      	movs	r5, #0
}
   2b1f4:	4628      	mov	r0, r5
   2b1f6:	b010      	add	sp, #64	; 0x40
   2b1f8:	bd70      	pop	{r4, r5, r6, pc}
   2b1fa:	4604      	mov	r4, r0
		(void)memset(r, 0, sizeof(r));
   2b1fc:	2210      	movs	r2, #16
   2b1fe:	2100      	movs	r1, #0
   2b200:	a80c      	add	r0, sp, #48	; 0x30
   2b202:	f00b fdd3 	bl	36dac <memset>
		switch (smp->method) {
   2b206:	7a21      	ldrb	r1, [r4, #8]
   2b208:	2905      	cmp	r1, #5
   2b20a:	d82b      	bhi.n	2b264 <smp_dhkey_check+0x80>
   2b20c:	e8df f001 	tbb	[pc, r1]
   2b210:	09030309 	.word	0x09030309
   2b214:	212a      	.short	0x212a
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   2b216:	2204      	movs	r2, #4
   2b218:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   2b21c:	a80c      	add	r0, sp, #48	; 0x30
   2b21e:	f00b fda1 	bl	36d64 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   2b222:	f104 0211 	add.w	r2, r4, #17
			   &smp->chan.chan.conn->le.resp_addr,
   2b226:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2b22a:	f103 0196 	add.w	r1, r3, #150	; 0x96
			   &smp->chan.chan.conn->le.init_addr, e)) {
   2b22e:	338f      	adds	r3, #143	; 0x8f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   2b230:	a808      	add	r0, sp, #32
   2b232:	9003      	str	r0, [sp, #12]
   2b234:	9302      	str	r3, [sp, #8]
   2b236:	9101      	str	r1, [sp, #4]
   2b238:	9200      	str	r2, [sp, #0]
   2b23a:	ab0c      	add	r3, sp, #48	; 0x30
   2b23c:	f104 0227 	add.w	r2, r4, #39	; 0x27
   2b240:	f104 0137 	add.w	r1, r4, #55	; 0x37
   2b244:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   2b248:	f00e fed8 	bl	39ffc <smp_f6>
   2b24c:	b1e0      	cbz	r0, 2b288 <smp_dhkey_check+0xa4>
			return BT_SMP_ERR_UNSPECIFIED;
   2b24e:	2508      	movs	r5, #8
   2b250:	e7d0      	b.n	2b1f4 <smp_dhkey_check+0x10>
			if (smp->oobd_local) {
   2b252:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   2b256:	2900      	cmp	r1, #0
   2b258:	d0e3      	beq.n	2b222 <smp_dhkey_check+0x3e>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   2b25a:	2210      	movs	r2, #16
   2b25c:	a80c      	add	r0, sp, #48	; 0x30
   2b25e:	f00b fd81 	bl	36d64 <memcpy>
   2b262:	e7de      	b.n	2b222 <smp_dhkey_check+0x3e>
   2b264:	4b29      	ldr	r3, [pc, #164]	; (2b30c <smp_dhkey_check+0x128>)
   2b266:	4a2a      	ldr	r2, [pc, #168]	; (2b310 <smp_dhkey_check+0x12c>)
   2b268:	1a9b      	subs	r3, r3, r2
   2b26a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unknown pairing method (%u)", smp->method);
   2b26c:	f04f 0200 	mov.w	r2, #0
   2b270:	2001      	movs	r0, #1
   2b272:	f360 0202 	bfi	r2, r0, #0, #3
   2b276:	f36f 02c5 	bfc	r2, #3, #3
   2b27a:	f363 128f 	bfi	r2, r3, #6, #10
   2b27e:	4825      	ldr	r0, [pc, #148]	; (2b314 <smp_dhkey_check+0x130>)
   2b280:	f7f5 f812 	bl	202a8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   2b284:	2508      	movs	r5, #8
   2b286:	e7b5      	b.n	2b1f4 <smp_dhkey_check+0x10>
		if (memcmp(e, req->e, 16)) {
   2b288:	2210      	movs	r2, #16
   2b28a:	4631      	mov	r1, r6
   2b28c:	a808      	add	r0, sp, #32
   2b28e:	f00b fd3c 	bl	36d0a <memcmp>
   2b292:	b108      	cbz	r0, 2b298 <smp_dhkey_check+0xb4>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2b294:	250b      	movs	r5, #11
   2b296:	e7ad      	b.n	2b1f4 <smp_dhkey_check+0x10>
		enc_size = get_encryption_key_size(smp);
   2b298:	4620      	mov	r0, r4
   2b29a:	f00e fbdf 	bl	39a5c <get_encryption_key_size>
   2b29e:	4606      	mov	r6, r0
		(void)memset(ediv, 0, sizeof(ediv));
   2b2a0:	2202      	movs	r2, #2
   2b2a2:	2100      	movs	r1, #0
   2b2a4:	a805      	add	r0, sp, #20
   2b2a6:	f00b fd81 	bl	36dac <memset>
		(void)memset(rand, 0, sizeof(rand));
   2b2aa:	2208      	movs	r2, #8
   2b2ac:	2100      	movs	r1, #0
   2b2ae:	a806      	add	r0, sp, #24
   2b2b0:	f00b fd7c 	bl	36dac <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   2b2b4:	9600      	str	r6, [sp, #0]
   2b2b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2b2ba:	aa05      	add	r2, sp, #20
   2b2bc:	a906      	add	r1, sp, #24
   2b2be:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2b2c2:	f00c fabf 	bl	37844 <bt_conn_le_start_encryption>
   2b2c6:	2800      	cmp	r0, #0
   2b2c8:	db0d      	blt.n	2b2e6 <smp_dhkey_check+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2b2ca:	3404      	adds	r4, #4
   2b2cc:	f3bf 8f5b 	dmb	ish
   2b2d0:	e854 3f00 	ldrex	r3, [r4]
   2b2d4:	f043 0302 	orr.w	r3, r3, #2
   2b2d8:	e844 3200 	strex	r2, r3, [r4]
   2b2dc:	2a00      	cmp	r2, #0
   2b2de:	d1f7      	bne.n	2b2d0 <smp_dhkey_check+0xec>
   2b2e0:	f3bf 8f5b 	dmb	ish
		return 0;
   2b2e4:	e786      	b.n	2b1f4 <smp_dhkey_check+0x10>
   2b2e6:	4b09      	ldr	r3, [pc, #36]	; (2b30c <smp_dhkey_check+0x128>)
   2b2e8:	4a09      	ldr	r2, [pc, #36]	; (2b310 <smp_dhkey_check+0x12c>)
   2b2ea:	1a9b      	subs	r3, r3, r2
   2b2ec:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to start encryption");
   2b2ee:	f04f 0100 	mov.w	r1, #0
   2b2f2:	2201      	movs	r2, #1
   2b2f4:	f362 0102 	bfi	r1, r2, #0, #3
   2b2f8:	f36f 01c5 	bfc	r1, #3, #3
   2b2fc:	f363 118f 	bfi	r1, r3, #6, #10
   2b300:	4805      	ldr	r0, [pc, #20]	; (2b318 <smp_dhkey_check+0x134>)
   2b302:	f7f5 f887 	bl	20414 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   2b306:	2508      	movs	r5, #8
   2b308:	e774      	b.n	2b1f4 <smp_dhkey_check+0x10>
   2b30a:	bf00      	nop
   2b30c:	0003d214 	.word	0x0003d214
   2b310:	0003d1a4 	.word	0x0003d1a4
   2b314:	00040118 	.word	0x00040118
   2b318:	0004018c 	.word	0x0004018c

0002b31c <legacy_pairing_random>:
{
   2b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b320:	b08c      	sub	sp, #48	; 0x30
   2b322:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2b324:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   2b328:	f100 0747 	add.w	r7, r0, #71	; 0x47
   2b32c:	f100 0837 	add.w	r8, r0, #55	; 0x37
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   2b330:	f105 038f 	add.w	r3, r5, #143	; 0x8f
   2b334:	f105 0296 	add.w	r2, r5, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   2b338:	a908      	add	r1, sp, #32
   2b33a:	9102      	str	r1, [sp, #8]
   2b33c:	9201      	str	r2, [sp, #4]
   2b33e:	9300      	str	r3, [sp, #0]
   2b340:	f100 0310 	add.w	r3, r0, #16
   2b344:	f100 0209 	add.w	r2, r0, #9
   2b348:	4641      	mov	r1, r8
   2b34a:	4638      	mov	r0, r7
   2b34c:	f00e fcbb 	bl	39cc6 <smp_c1>
	if (err) {
   2b350:	2800      	cmp	r0, #0
   2b352:	d14a      	bne.n	2b3ea <legacy_pairing_random+0xce>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   2b354:	2210      	movs	r2, #16
   2b356:	a908      	add	r1, sp, #32
   2b358:	f104 0017 	add.w	r0, r4, #23
   2b35c:	f00b fcd5 	bl	36d0a <memcmp>
   2b360:	2800      	cmp	r0, #0
   2b362:	d147      	bne.n	2b3f4 <legacy_pairing_random+0xd8>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   2b364:	78ee      	ldrb	r6, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2b366:	b10e      	cbz	r6, 2b36c <legacy_pairing_random+0x50>
	return 0;
   2b368:	2600      	movs	r6, #0
   2b36a:	e03f      	b.n	2b3ec <legacy_pairing_random+0xd0>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
   2b36c:	ab08      	add	r3, sp, #32
   2b36e:	f104 0227 	add.w	r2, r4, #39	; 0x27
   2b372:	4641      	mov	r1, r8
   2b374:	4638      	mov	r0, r7
   2b376:	f00e fcf0 	bl	39d5a <smp_s1>
		if (err) {
   2b37a:	b108      	cbz	r0, 2b380 <legacy_pairing_random+0x64>
			return BT_SMP_ERR_UNSPECIFIED;
   2b37c:	2608      	movs	r6, #8
   2b37e:	e035      	b.n	2b3ec <legacy_pairing_random+0xd0>
		(void)memset(ediv, 0, sizeof(ediv));
   2b380:	2202      	movs	r2, #2
   2b382:	2100      	movs	r1, #0
   2b384:	a805      	add	r0, sp, #20
   2b386:	f00b fd11 	bl	36dac <memset>
		(void)memset(rand, 0, sizeof(rand));
   2b38a:	2208      	movs	r2, #8
   2b38c:	2100      	movs	r1, #0
   2b38e:	a806      	add	r0, sp, #24
   2b390:	f00b fd0c 	bl	36dac <memset>
						get_encryption_key_size(smp))) {
   2b394:	4620      	mov	r0, r4
   2b396:	f00e fb61 	bl	39a5c <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   2b39a:	9000      	str	r0, [sp, #0]
   2b39c:	ab08      	add	r3, sp, #32
   2b39e:	aa05      	add	r2, sp, #20
   2b3a0:	a906      	add	r1, sp, #24
   2b3a2:	4628      	mov	r0, r5
   2b3a4:	f00c fa4e 	bl	37844 <bt_conn_le_start_encryption>
   2b3a8:	b188      	cbz	r0, 2b3ce <legacy_pairing_random+0xb2>
   2b3aa:	4b13      	ldr	r3, [pc, #76]	; (2b3f8 <legacy_pairing_random+0xdc>)
   2b3ac:	4a13      	ldr	r2, [pc, #76]	; (2b3fc <legacy_pairing_random+0xe0>)
   2b3ae:	1a9b      	subs	r3, r3, r2
   2b3b0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to start encryption");
   2b3b2:	f04f 0100 	mov.w	r1, #0
   2b3b6:	2201      	movs	r2, #1
   2b3b8:	f362 0102 	bfi	r1, r2, #0, #3
   2b3bc:	f36f 01c5 	bfc	r1, #3, #3
   2b3c0:	f363 118f 	bfi	r1, r3, #6, #10
   2b3c4:	480e      	ldr	r0, [pc, #56]	; (2b400 <legacy_pairing_random+0xe4>)
   2b3c6:	f7f5 f825 	bl	20414 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   2b3ca:	2608      	movs	r6, #8
   2b3cc:	e00e      	b.n	2b3ec <legacy_pairing_random+0xd0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2b3ce:	3404      	adds	r4, #4
   2b3d0:	f3bf 8f5b 	dmb	ish
   2b3d4:	e854 3f00 	ldrex	r3, [r4]
   2b3d8:	f043 0302 	orr.w	r3, r3, #2
   2b3dc:	e844 3200 	strex	r2, r3, [r4]
   2b3e0:	2a00      	cmp	r2, #0
   2b3e2:	d1f7      	bne.n	2b3d4 <legacy_pairing_random+0xb8>
   2b3e4:	f3bf 8f5b 	dmb	ish
		return 0;
   2b3e8:	e000      	b.n	2b3ec <legacy_pairing_random+0xd0>
		return BT_SMP_ERR_UNSPECIFIED;
   2b3ea:	2608      	movs	r6, #8
}
   2b3ec:	4630      	mov	r0, r6
   2b3ee:	b00c      	add	sp, #48	; 0x30
   2b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_SMP_ERR_CONFIRM_FAILED;
   2b3f4:	2604      	movs	r6, #4
   2b3f6:	e7f9      	b.n	2b3ec <legacy_pairing_random+0xd0>
   2b3f8:	0003d214 	.word	0x0003d214
   2b3fc:	0003d1a4 	.word	0x0003d1a4
   2b400:	0004018c 	.word	0x0004018c

0002b404 <smp_pairing_random>:
{
   2b404:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b406:	b085      	sub	sp, #20
   2b408:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2b40a:	f100 0637 	add.w	r6, r0, #55	; 0x37
   2b40e:	2210      	movs	r2, #16
   2b410:	6889      	ldr	r1, [r1, #8]
   2b412:	4630      	mov	r0, r6
   2b414:	f00b fca6 	bl	36d64 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b418:	f3bf 8f5b 	dmb	ish
   2b41c:	6863      	ldr	r3, [r4, #4]
   2b41e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2b422:	f013 0f20 	tst.w	r3, #32
   2b426:	d008      	beq.n	2b43a <smp_pairing_random+0x36>
   2b428:	1d27      	adds	r7, r4, #4
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2b42a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2b42e:	78db      	ldrb	r3, [r3, #3]
   2b430:	b143      	cbz	r3, 2b444 <smp_pairing_random+0x40>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   2b432:	2505      	movs	r5, #5
}
   2b434:	4628      	mov	r0, r5
   2b436:	b005      	add	sp, #20
   2b438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return legacy_pairing_random(smp);
   2b43a:	4620      	mov	r0, r4
   2b43c:	f7ff ff6e 	bl	2b31c <legacy_pairing_random>
   2b440:	4605      	mov	r5, r0
   2b442:	e7f7      	b.n	2b434 <smp_pairing_random+0x30>
		err = sc_smp_check_confirm(smp);
   2b444:	4620      	mov	r0, r4
   2b446:	f7ff fc9d 	bl	2ad84 <sc_smp_check_confirm>
		if (err) {
   2b44a:	4605      	mov	r5, r0
   2b44c:	2800      	cmp	r0, #0
   2b44e:	d1f1      	bne.n	2b434 <smp_pairing_random+0x30>
		switch (smp->method) {
   2b450:	7a21      	ldrb	r1, [r4, #8]
   2b452:	2905      	cmp	r1, #5
   2b454:	d868      	bhi.n	2b528 <smp_pairing_random+0x124>
   2b456:	e8df f001 	tbb	[pc, r1]
   2b45a:	3139      	.short	0x3139
   2b45c:	39670331 	.word	0x39670331
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   2b460:	ab03      	add	r3, sp, #12
   2b462:	9300      	str	r3, [sp, #0]
   2b464:	4633      	mov	r3, r6
   2b466:	f104 0227 	add.w	r2, r4, #39	; 0x27
   2b46a:	f104 0157 	add.w	r1, r4, #87	; 0x57
   2b46e:	483a      	ldr	r0, [pc, #232]	; (2b558 <smp_pairing_random+0x154>)
   2b470:	6800      	ldr	r0, [r0, #0]
   2b472:	f7ff fe27 	bl	2b0c4 <smp_g2>
   2b476:	b108      	cbz	r0, 2b47c <smp_pairing_random+0x78>
				return BT_SMP_ERR_UNSPECIFIED;
   2b478:	2508      	movs	r5, #8
   2b47a:	e7db      	b.n	2b434 <smp_pairing_random+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b47c:	f3bf 8f5b 	dmb	ish
   2b480:	e857 3f00 	ldrex	r3, [r7]
   2b484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2b488:	e847 3200 	strex	r2, r3, [r7]
   2b48c:	2a00      	cmp	r2, #0
   2b48e:	d1f7      	bne.n	2b480 <smp_pairing_random+0x7c>
   2b490:	f3bf 8f5b 	dmb	ish
   2b494:	f3bf 8f5b 	dmb	ish
   2b498:	e857 3f00 	ldrex	r3, [r7]
   2b49c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2b4a0:	e847 3200 	strex	r2, r3, [r7]
   2b4a4:	2a00      	cmp	r2, #0
   2b4a6:	d1f7      	bne.n	2b498 <smp_pairing_random+0x94>
   2b4a8:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   2b4ac:	4b2b      	ldr	r3, [pc, #172]	; (2b55c <smp_pairing_random+0x158>)
   2b4ae:	681b      	ldr	r3, [r3, #0]
   2b4b0:	689b      	ldr	r3, [r3, #8]
   2b4b2:	9903      	ldr	r1, [sp, #12]
   2b4b4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2b4b8:	4798      	blx	r3
			return 0;
   2b4ba:	e7bb      	b.n	2b434 <smp_pairing_random+0x30>
			smp->passkey_round++;
   2b4bc:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   2b4c0:	3301      	adds	r3, #1
   2b4c2:	b2db      	uxtb	r3, r3
   2b4c4:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   2b4c8:	2b14      	cmp	r3, #20
   2b4ca:	d114      	bne.n	2b4f6 <smp_pairing_random+0xf2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b4cc:	f3bf 8f5b 	dmb	ish
   2b4d0:	6863      	ldr	r3, [r4, #4]
   2b4d2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2b4d6:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b4da:	d037      	beq.n	2b54c <smp_pairing_random+0x148>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b4dc:	f3bf 8f5b 	dmb	ish
   2b4e0:	e857 3f00 	ldrex	r3, [r7]
   2b4e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2b4e8:	e847 3200 	strex	r2, r3, [r7]
   2b4ec:	2a00      	cmp	r2, #0
   2b4ee:	d1f7      	bne.n	2b4e0 <smp_pairing_random+0xdc>
   2b4f0:	f3bf 8f5b 	dmb	ish
			return 0;
   2b4f4:	e79e      	b.n	2b434 <smp_pairing_random+0x30>
			if (bt_rand(smp->prnd, 16)) {
   2b4f6:	2110      	movs	r1, #16
   2b4f8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2b4fc:	f003 f982 	bl	2e804 <bt_rand>
   2b500:	b108      	cbz	r0, 2b506 <smp_pairing_random+0x102>
				return BT_SMP_ERR_UNSPECIFIED;
   2b502:	2508      	movs	r5, #8
   2b504:	e796      	b.n	2b434 <smp_pairing_random+0x30>
   2b506:	f3bf 8f5b 	dmb	ish
   2b50a:	e854 3f00 	ldrex	r3, [r4]
   2b50e:	f043 0308 	orr.w	r3, r3, #8
   2b512:	e844 3200 	strex	r2, r3, [r4]
   2b516:	2a00      	cmp	r2, #0
   2b518:	d1f7      	bne.n	2b50a <smp_pairing_random+0x106>
   2b51a:	f3bf 8f5b 	dmb	ish
			return smp_send_pairing_confirm(smp);
   2b51e:	4620      	mov	r0, r4
   2b520:	f7ff fbca 	bl	2acb8 <smp_send_pairing_confirm>
   2b524:	4605      	mov	r5, r0
   2b526:	e785      	b.n	2b434 <smp_pairing_random+0x30>
   2b528:	4b0d      	ldr	r3, [pc, #52]	; (2b560 <smp_pairing_random+0x15c>)
   2b52a:	4a0e      	ldr	r2, [pc, #56]	; (2b564 <smp_pairing_random+0x160>)
   2b52c:	1a9b      	subs	r3, r3, r2
   2b52e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unknown pairing method (%u)", smp->method);
   2b530:	f04f 0200 	mov.w	r2, #0
   2b534:	2001      	movs	r0, #1
   2b536:	f360 0202 	bfi	r2, r0, #0, #3
   2b53a:	f36f 02c5 	bfc	r2, #3, #3
   2b53e:	f363 128f 	bfi	r2, r3, #6, #10
   2b542:	4809      	ldr	r0, [pc, #36]	; (2b568 <smp_pairing_random+0x164>)
   2b544:	f7f4 feb0 	bl	202a8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   2b548:	2508      	movs	r5, #8
   2b54a:	e773      	b.n	2b434 <smp_pairing_random+0x30>
		return compute_and_send_central_dhcheck(smp);
   2b54c:	4620      	mov	r0, r4
   2b54e:	f7ff fd19 	bl	2af84 <compute_and_send_central_dhcheck>
   2b552:	4605      	mov	r5, r0
   2b554:	e76e      	b.n	2b434 <smp_pairing_random+0x30>
   2b556:	bf00      	nop
   2b558:	20008854 	.word	0x20008854
   2b55c:	20008274 	.word	0x20008274
   2b560:	0003d214 	.word	0x0003d214
   2b564:	0003d1a4 	.word	0x0003d1a4
   2b568:	00040118 	.word	0x00040118

0002b56c <smp_init>:
{
   2b56c:	b538      	push	{r3, r4, r5, lr}
   2b56e:	4604      	mov	r4, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2b570:	22f0      	movs	r2, #240	; 0xf0
   2b572:	2100      	movs	r1, #0
   2b574:	f00b fc1a 	bl	36dac <memset>
	if (bt_rand(smp->prnd, 16)) {
   2b578:	2110      	movs	r1, #16
   2b57a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2b57e:	f003 f941 	bl	2e804 <bt_rand>
   2b582:	b990      	cbnz	r0, 2b5aa <smp_init+0x3e>
   2b584:	4605      	mov	r5, r0
   2b586:	f3bf 8f5b 	dmb	ish
   2b58a:	e854 3f00 	ldrex	r3, [r4]
   2b58e:	f043 0320 	orr.w	r3, r3, #32
   2b592:	e844 3200 	strex	r2, r3, [r4]
   2b596:	2a00      	cmp	r2, #0
   2b598:	d1f7      	bne.n	2b58a <smp_init+0x1e>
   2b59a:	f3bf 8f5b 	dmb	ish
	sc_public_key = bt_pub_key_get();
   2b59e:	f7fb f96d 	bl	2687c <bt_pub_key_get>
   2b5a2:	4b03      	ldr	r3, [pc, #12]	; (2b5b0 <smp_init+0x44>)
   2b5a4:	6018      	str	r0, [r3, #0]
}
   2b5a6:	4628      	mov	r0, r5
   2b5a8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2b5aa:	2508      	movs	r5, #8
   2b5ac:	e7fb      	b.n	2b5a6 <smp_init+0x3a>
   2b5ae:	bf00      	nop
   2b5b0:	20008854 	.word	0x20008854

0002b5b4 <smp_send_pairing_req>:
{
   2b5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b5b8:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   2b5ba:	f7ff faa7 	bl	2ab0c <smp_chan_get>
	if (!smp) {
   2b5be:	2800      	cmp	r0, #0
   2b5c0:	f000 8097 	beq.w	2b6f2 <smp_send_pairing_req+0x13e>
   2b5c4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2b5c6:	f100 0804 	add.w	r8, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b5ca:	f3bf 8f5b 	dmb	ish
   2b5ce:	6843      	ldr	r3, [r0, #4]
   2b5d0:	f3bf 8f5b 	dmb	ish
   2b5d4:	f3c3 1700 	ubfx	r7, r3, #4, #1
   2b5d8:	f013 0f10 	tst.w	r3, #16
   2b5dc:	f040 808c 	bne.w	2b6f8 <smp_send_pairing_req+0x144>
   2b5e0:	f3bf 8f5b 	dmb	ish
   2b5e4:	6843      	ldr	r3, [r0, #4]
   2b5e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2b5ea:	f013 0f04 	tst.w	r3, #4
   2b5ee:	d171      	bne.n	2b6d4 <smp_send_pairing_req+0x120>
   2b5f0:	f3bf 8f5b 	dmb	ish
   2b5f4:	6843      	ldr	r3, [r0, #4]
   2b5f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2b5fa:	f013 0f08 	tst.w	r3, #8
   2b5fe:	d17e      	bne.n	2b6fe <smp_send_pairing_req+0x14a>
   2b600:	f3bf 8f5b 	dmb	ish
   2b604:	6843      	ldr	r3, [r0, #4]
   2b606:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2b60a:	f013 0f02 	tst.w	r3, #2
   2b60e:	d179      	bne.n	2b704 <smp_send_pairing_req+0x150>
	if (!sec_level_reachable(conn)) {
   2b610:	4628      	mov	r0, r5
   2b612:	f7ff fa3f 	bl	2aa94 <sec_level_reachable>
   2b616:	2800      	cmp	r0, #0
   2b618:	d077      	beq.n	2b70a <smp_send_pairing_req+0x156>
	if (!conn->le.keys) {
   2b61a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2b61e:	2b00      	cmp	r3, #0
   2b620:	d05b      	beq.n	2b6da <smp_send_pairing_req+0x126>
	if (smp_init(smp)) {
   2b622:	4620      	mov	r0, r4
   2b624:	f7ff ffa2 	bl	2b56c <smp_init>
   2b628:	4607      	mov	r7, r0
   2b62a:	2800      	cmp	r0, #0
   2b62c:	d170      	bne.n	2b710 <smp_send_pairing_req+0x15c>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   2b62e:	2206      	movs	r2, #6
   2b630:	2101      	movs	r1, #1
   2b632:	4620      	mov	r0, r4
   2b634:	f00e fba5 	bl	39d82 <smp_create_pdu>
	if (!req_buf) {
   2b638:	4681      	mov	r9, r0
   2b63a:	2800      	cmp	r0, #0
   2b63c:	d06b      	beq.n	2b716 <smp_send_pairing_req+0x162>
   2b63e:	2106      	movs	r1, #6
   2b640:	3008      	adds	r0, #8
   2b642:	f00f fa36 	bl	3aab2 <net_buf_simple_add>
   2b646:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   2b648:	2109      	movs	r1, #9
   2b64a:	4628      	mov	r0, r5
   2b64c:	f7ff fa02 	bl	2aa54 <get_auth>
   2b650:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
   2b652:	f7ff f9ad 	bl	2a9b0 <get_io_capa>
   2b656:	7030      	strb	r0, [r6, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2b658:	4b30      	ldr	r3, [pc, #192]	; (2b71c <smp_send_pairing_req+0x168>)
   2b65a:	781b      	ldrb	r3, [r3, #0]
   2b65c:	7073      	strb	r3, [r6, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   2b65e:	2310      	movs	r3, #16
   2b660:	70f3      	strb	r3, [r6, #3]
	req->init_key_dist = SEND_KEYS;
   2b662:	2301      	movs	r3, #1
   2b664:	7133      	strb	r3, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
   2b666:	2203      	movs	r2, #3
   2b668:	7172      	strb	r2, [r6, #5]
	smp->local_dist = SEND_KEYS;
   2b66a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = RECV_KEYS;
   2b66e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2b672:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   2b674:	2206      	movs	r2, #6
   2b676:	4631      	mov	r1, r6
   2b678:	f104 000a 	add.w	r0, r4, #10
   2b67c:	f00b fb72 	bl	36d64 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   2b680:	2300      	movs	r3, #0
   2b682:	461a      	mov	r2, r3
   2b684:	4649      	mov	r1, r9
   2b686:	4620      	mov	r0, r4
   2b688:	f00e fba6 	bl	39dd8 <smp_send>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b68c:	f3bf 8f5b 	dmb	ish
   2b690:	e854 3f00 	ldrex	r3, [r4]
   2b694:	f043 0304 	orr.w	r3, r3, #4
   2b698:	e844 3200 	strex	r2, r3, [r4]
   2b69c:	2a00      	cmp	r2, #0
   2b69e:	d1f7      	bne.n	2b690 <smp_send_pairing_req+0xdc>
   2b6a0:	f3bf 8f5b 	dmb	ish
   2b6a4:	f3bf 8f5b 	dmb	ish
   2b6a8:	e854 3f00 	ldrex	r3, [r4]
   2b6ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2b6b0:	e844 3200 	strex	r2, r3, [r4]
   2b6b4:	2a00      	cmp	r2, #0
   2b6b6:	d1f7      	bne.n	2b6a8 <smp_send_pairing_req+0xf4>
   2b6b8:	f3bf 8f5b 	dmb	ish
   2b6bc:	f3bf 8f5b 	dmb	ish
   2b6c0:	e858 3f00 	ldrex	r3, [r8]
   2b6c4:	f043 0308 	orr.w	r3, r3, #8
   2b6c8:	e848 3200 	strex	r2, r3, [r8]
   2b6cc:	2a00      	cmp	r2, #0
   2b6ce:	d1f7      	bne.n	2b6c0 <smp_send_pairing_req+0x10c>
   2b6d0:	f3bf 8f5b 	dmb	ish
}
   2b6d4:	4638      	mov	r0, r7
   2b6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2b6da:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2b6de:	7a28      	ldrb	r0, [r5, #8]
   2b6e0:	f001 f9ec 	bl	2cabc <bt_keys_get_addr>
   2b6e4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   2b6e8:	2800      	cmp	r0, #0
   2b6ea:	d19a      	bne.n	2b622 <smp_send_pairing_req+0x6e>
			return -ENOMEM;
   2b6ec:	f06f 070b 	mvn.w	r7, #11
   2b6f0:	e7f0      	b.n	2b6d4 <smp_send_pairing_req+0x120>
		return -ENOTCONN;
   2b6f2:	f06f 077f 	mvn.w	r7, #127	; 0x7f
   2b6f6:	e7ed      	b.n	2b6d4 <smp_send_pairing_req+0x120>
		return -EIO;
   2b6f8:	f06f 0704 	mvn.w	r7, #4
   2b6fc:	e7ea      	b.n	2b6d4 <smp_send_pairing_req+0x120>
		return -EBUSY;
   2b6fe:	f06f 070f 	mvn.w	r7, #15
   2b702:	e7e7      	b.n	2b6d4 <smp_send_pairing_req+0x120>
		return -EBUSY;
   2b704:	f06f 070f 	mvn.w	r7, #15
   2b708:	e7e4      	b.n	2b6d4 <smp_send_pairing_req+0x120>
		return -EINVAL;
   2b70a:	f06f 0715 	mvn.w	r7, #21
   2b70e:	e7e1      	b.n	2b6d4 <smp_send_pairing_req+0x120>
		return -ENOBUFS;
   2b710:	f06f 0768 	mvn.w	r7, #104	; 0x68
   2b714:	e7de      	b.n	2b6d4 <smp_send_pairing_req+0x120>
		return -ENOBUFS;
   2b716:	f06f 0768 	mvn.w	r7, #104	; 0x68
   2b71a:	e7db      	b.n	2b6d4 <smp_send_pairing_req+0x120>
   2b71c:	2000da74 	.word	0x2000da74

0002b720 <smp_security_request>:
{
   2b720:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b722:	b083      	sub	sp, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   2b724:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   2b728:	688a      	ldr	r2, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b72a:	f3bf 8f5b 	dmb	ish
   2b72e:	6843      	ldr	r3, [r0, #4]
   2b730:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2b734:	f013 0f04 	tst.w	r3, #4
   2b738:	d002      	beq.n	2b740 <smp_security_request+0x20>
		return 0;
   2b73a:	2000      	movs	r0, #0
}
   2b73c:	b003      	add	sp, #12
   2b73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b740:	1d05      	adds	r5, r0, #4
   2b742:	f3bf 8f5b 	dmb	ish
   2b746:	6843      	ldr	r3, [r0, #4]
   2b748:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2b74c:	f013 0f08 	tst.w	r3, #8
   2b750:	d001      	beq.n	2b756 <smp_security_request+0x36>
		return 0;
   2b752:	2000      	movs	r0, #0
   2b754:	e7f2      	b.n	2b73c <smp_security_request+0x1c>
   2b756:	f3bf 8f5b 	dmb	ish
   2b75a:	6843      	ldr	r3, [r0, #4]
   2b75c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2b760:	f013 0f02 	tst.w	r3, #2
   2b764:	f040 80af 	bne.w	2b8c6 <smp_security_request+0x1a6>
	if (sc_supported) {
   2b768:	4b59      	ldr	r3, [pc, #356]	; (2b8d0 <smp_security_request+0x1b0>)
   2b76a:	781b      	ldrb	r3, [r3, #0]
   2b76c:	2b00      	cmp	r3, #0
   2b76e:	d03c      	beq.n	2b7ea <smp_security_request+0xca>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   2b770:	7816      	ldrb	r6, [r2, #0]
   2b772:	f006 060f 	and.w	r6, r6, #15
	if (conn->le.keys) {
   2b776:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2b77a:	2b00      	cmp	r3, #0
   2b77c:	d039      	beq.n	2b7f2 <smp_security_request+0xd2>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2b77e:	89db      	ldrh	r3, [r3, #14]
   2b780:	f013 0f24 	tst.w	r3, #36	; 0x24
   2b784:	d01e      	beq.n	2b7c4 <smp_security_request+0xa4>
	if (!conn->le.keys) {
   2b786:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2b78a:	b1d9      	cbz	r1, 2b7c4 <smp_security_request+0xa4>
	if ((auth & BT_SMP_AUTH_MITM) &&
   2b78c:	f016 0f04 	tst.w	r6, #4
   2b790:	d054      	beq.n	2b83c <smp_security_request+0x11c>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2b792:	7b4b      	ldrb	r3, [r1, #13]
	if ((auth & BT_SMP_AUTH_MITM) &&
   2b794:	f013 0f01 	tst.w	r3, #1
   2b798:	d150      	bne.n	2b83c <smp_security_request+0x11c>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   2b79a:	f7ff f909 	bl	2a9b0 <get_io_capa>
   2b79e:	2803      	cmp	r0, #3
   2b7a0:	d03a      	beq.n	2b818 <smp_security_request+0xf8>
   2b7a2:	4b4c      	ldr	r3, [pc, #304]	; (2b8d4 <smp_security_request+0x1b4>)
   2b7a4:	4a4c      	ldr	r2, [pc, #304]	; (2b8d8 <smp_security_request+0x1b8>)
   2b7a6:	1a9b      	subs	r3, r3, r2
   2b7a8:	08db      	lsrs	r3, r3, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
   2b7aa:	f04f 0200 	mov.w	r2, #0
   2b7ae:	2103      	movs	r1, #3
   2b7b0:	f361 0202 	bfi	r2, r1, #0, #3
   2b7b4:	f36f 02c5 	bfc	r2, #3, #3
   2b7b8:	f363 128f 	bfi	r2, r3, #6, #10
   2b7bc:	4631      	mov	r1, r6
   2b7be:	4847      	ldr	r0, [pc, #284]	; (2b8dc <smp_security_request+0x1bc>)
   2b7c0:	f7f4 fd72 	bl	202a8 <log_1>
	if (smp_send_pairing_req(conn) < 0) {
   2b7c4:	4620      	mov	r0, r4
   2b7c6:	f7ff fef5 	bl	2b5b4 <smp_send_pairing_req>
   2b7ca:	2800      	cmp	r0, #0
   2b7cc:	db7d      	blt.n	2b8ca <smp_security_request+0x1aa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b7ce:	f3bf 8f5b 	dmb	ish
   2b7d2:	e855 3f00 	ldrex	r3, [r5]
   2b7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   2b7da:	e845 3200 	strex	r2, r3, [r5]
   2b7de:	2a00      	cmp	r2, #0
   2b7e0:	d1f7      	bne.n	2b7d2 <smp_security_request+0xb2>
   2b7e2:	f3bf 8f5b 	dmb	ish
	return 0;
   2b7e6:	2000      	movs	r0, #0
   2b7e8:	e7a8      	b.n	2b73c <smp_security_request+0x1c>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   2b7ea:	7816      	ldrb	r6, [r2, #0]
   2b7ec:	f006 0607 	and.w	r6, r6, #7
   2b7f0:	e7c1      	b.n	2b776 <smp_security_request+0x56>
					     &conn->le.dst);
   2b7f2:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2b7f6:	463a      	mov	r2, r7
   2b7f8:	7a21      	ldrb	r1, [r4, #8]
   2b7fa:	2020      	movs	r0, #32
   2b7fc:	f001 f9c0 	bl	2cb80 <bt_keys_find>
   2b800:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2b804:	2800      	cmp	r0, #0
   2b806:	d1be      	bne.n	2b786 <smp_security_request+0x66>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   2b808:	463a      	mov	r2, r7
   2b80a:	7a21      	ldrb	r1, [r4, #8]
   2b80c:	2004      	movs	r0, #4
   2b80e:	f001 f9b7 	bl	2cb80 <bt_keys_find>
   2b812:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
   2b816:	e7b6      	b.n	2b786 <smp_security_request+0x66>
   2b818:	4b2e      	ldr	r3, [pc, #184]	; (2b8d4 <smp_security_request+0x1b4>)
   2b81a:	4a2f      	ldr	r2, [pc, #188]	; (2b8d8 <smp_security_request+0x1b8>)
   2b81c:	1a9b      	subs	r3, r3, r2
   2b81e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   2b820:	f04f 0200 	mov.w	r2, #0
   2b824:	2102      	movs	r1, #2
   2b826:	f361 0202 	bfi	r2, r1, #0, #3
   2b82a:	f36f 02c5 	bfc	r2, #3, #3
   2b82e:	f363 128f 	bfi	r2, r3, #6, #10
   2b832:	4631      	mov	r1, r6
   2b834:	482a      	ldr	r0, [pc, #168]	; (2b8e0 <smp_security_request+0x1c0>)
   2b836:	f7f4 fd37 	bl	202a8 <log_1>
		goto pair;
   2b83a:	e7c3      	b.n	2b7c4 <smp_security_request+0xa4>
	if ((auth & BT_SMP_AUTH_SC) &&
   2b83c:	f016 0f08 	tst.w	r6, #8
   2b840:	d003      	beq.n	2b84a <smp_security_request+0x12a>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2b842:	89cb      	ldrh	r3, [r1, #14]
	if ((auth & BT_SMP_AUTH_SC) &&
   2b844:	f013 0f20 	tst.w	r3, #32
   2b848:	d019      	beq.n	2b87e <smp_security_request+0x15e>
					conn->le.keys->enc_size) < 0) {
   2b84a:	7b0b      	ldrb	r3, [r1, #12]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   2b84c:	9300      	str	r3, [sp, #0]
   2b84e:	f101 031a 	add.w	r3, r1, #26
   2b852:	f101 0218 	add.w	r2, r1, #24
   2b856:	3110      	adds	r1, #16
   2b858:	4620      	mov	r0, r4
   2b85a:	f00b fff3 	bl	37844 <bt_conn_le_start_encryption>
   2b85e:	2800      	cmp	r0, #0
   2b860:	db1f      	blt.n	2b8a2 <smp_security_request+0x182>
   2b862:	f3bf 8f5b 	dmb	ish
   2b866:	e855 3f00 	ldrex	r3, [r5]
   2b86a:	f043 0302 	orr.w	r3, r3, #2
   2b86e:	e845 3200 	strex	r2, r3, [r5]
   2b872:	2a00      	cmp	r2, #0
   2b874:	d1f7      	bne.n	2b866 <smp_security_request+0x146>
   2b876:	f3bf 8f5b 	dmb	ish
	return 0;
   2b87a:	2000      	movs	r0, #0
   2b87c:	e75e      	b.n	2b73c <smp_security_request+0x1c>
   2b87e:	4b15      	ldr	r3, [pc, #84]	; (2b8d4 <smp_security_request+0x1b4>)
   2b880:	4a15      	ldr	r2, [pc, #84]	; (2b8d8 <smp_security_request+0x1b8>)
   2b882:	1a9b      	subs	r3, r3, r2
   2b884:	08db      	lsrs	r3, r3, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   2b886:	f04f 0200 	mov.w	r2, #0
   2b88a:	2103      	movs	r1, #3
   2b88c:	f361 0202 	bfi	r2, r1, #0, #3
   2b890:	f36f 02c5 	bfc	r2, #3, #3
   2b894:	f363 128f 	bfi	r2, r3, #6, #10
   2b898:	4631      	mov	r1, r6
   2b89a:	4810      	ldr	r0, [pc, #64]	; (2b8dc <smp_security_request+0x1bc>)
   2b89c:	f7f4 fd04 	bl	202a8 <log_1>
		goto pair;
   2b8a0:	e790      	b.n	2b7c4 <smp_security_request+0xa4>
   2b8a2:	4b0c      	ldr	r3, [pc, #48]	; (2b8d4 <smp_security_request+0x1b4>)
   2b8a4:	4a0c      	ldr	r2, [pc, #48]	; (2b8d8 <smp_security_request+0x1b8>)
   2b8a6:	1a9b      	subs	r3, r3, r2
   2b8a8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to start encryption");
   2b8aa:	f04f 0100 	mov.w	r1, #0
   2b8ae:	2201      	movs	r2, #1
   2b8b0:	f362 0102 	bfi	r1, r2, #0, #3
   2b8b4:	f36f 01c5 	bfc	r1, #3, #3
   2b8b8:	f363 118f 	bfi	r1, r3, #6, #10
   2b8bc:	4809      	ldr	r0, [pc, #36]	; (2b8e4 <smp_security_request+0x1c4>)
   2b8be:	f7f4 fda9 	bl	20414 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   2b8c2:	2008      	movs	r0, #8
   2b8c4:	e73a      	b.n	2b73c <smp_security_request+0x1c>
		return 0;
   2b8c6:	2000      	movs	r0, #0
   2b8c8:	e738      	b.n	2b73c <smp_security_request+0x1c>
		return BT_SMP_ERR_UNSPECIFIED;
   2b8ca:	2008      	movs	r0, #8
   2b8cc:	e736      	b.n	2b73c <smp_security_request+0x1c>
   2b8ce:	bf00      	nop
   2b8d0:	2000da75 	.word	0x2000da75
   2b8d4:	0003d214 	.word	0x0003d214
   2b8d8:	0003d1a4 	.word	0x0003d1a4
   2b8dc:	000401a8 	.word	0x000401a8
   2b8e0:	000401d0 	.word	0x000401d0
   2b8e4:	0004018c 	.word	0x0004018c

0002b8e8 <legacy_distribute_keys>:
{
   2b8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b8ea:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = smp->chan.chan.conn;
   2b8ec:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
   2b8f0:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   2b8f4:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   2b8f8:	f013 0f01 	tst.w	r3, #1
   2b8fc:	d101      	bne.n	2b902 <legacy_distribute_keys+0x1a>
}
   2b8fe:	b009      	add	sp, #36	; 0x24
   2b900:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b902:	4604      	mov	r4, r0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   2b904:	211a      	movs	r1, #26
   2b906:	a801      	add	r0, sp, #4
   2b908:	f002 ff7c 	bl	2e804 <bt_rand>
   2b90c:	2800      	cmp	r0, #0
   2b90e:	d155      	bne.n	2b9bc <legacy_distribute_keys+0xd4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   2b910:	2210      	movs	r2, #16
   2b912:	2106      	movs	r1, #6
   2b914:	4620      	mov	r0, r4
   2b916:	f00e fa34 	bl	39d82 <smp_create_pdu>
		if (!buf) {
   2b91a:	4607      	mov	r7, r0
   2b91c:	2800      	cmp	r0, #0
   2b91e:	d05e      	beq.n	2b9de <legacy_distribute_keys+0xf6>
   2b920:	2110      	movs	r1, #16
   2b922:	3008      	adds	r0, #8
   2b924:	f00f f8c5 	bl	3aab2 <net_buf_simple_add>
   2b928:	4606      	mov	r6, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
   2b92a:	7b2a      	ldrb	r2, [r5, #12]
   2b92c:	a901      	add	r1, sp, #4
   2b92e:	f00b fa19 	bl	36d64 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   2b932:	7b28      	ldrb	r0, [r5, #12]
   2b934:	280f      	cmp	r0, #15
   2b936:	d963      	bls.n	2ba00 <legacy_distribute_keys+0x118>
		smp_send(smp, buf, NULL, NULL);
   2b938:	2300      	movs	r3, #0
   2b93a:	461a      	mov	r2, r3
   2b93c:	4639      	mov	r1, r7
   2b93e:	4620      	mov	r0, r4
   2b940:	f00e fa4a 	bl	39dd8 <smp_send>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   2b944:	220a      	movs	r2, #10
   2b946:	2107      	movs	r1, #7
   2b948:	4620      	mov	r0, r4
   2b94a:	f00e fa1a 	bl	39d82 <smp_create_pdu>
		if (!buf) {
   2b94e:	4607      	mov	r7, r0
   2b950:	2800      	cmp	r0, #0
   2b952:	d05c      	beq.n	2ba0e <legacy_distribute_keys+0x126>
   2b954:	210a      	movs	r1, #10
   2b956:	3008      	adds	r0, #8
   2b958:	f00f f8ab 	bl	3aab2 <net_buf_simple_add>
   2b95c:	4606      	mov	r6, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   2b95e:	2208      	movs	r2, #8
   2b960:	a905      	add	r1, sp, #20
   2b962:	3002      	adds	r0, #2
   2b964:	f00b f9fe 	bl	36d64 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   2b968:	2202      	movs	r2, #2
   2b96a:	a907      	add	r1, sp, #28
   2b96c:	4630      	mov	r0, r6
   2b96e:	f00b f9f9 	bl	36d64 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   2b972:	2300      	movs	r3, #0
   2b974:	4a2e      	ldr	r2, [pc, #184]	; (2ba30 <legacy_distribute_keys+0x148>)
   2b976:	4639      	mov	r1, r7
   2b978:	4620      	mov	r0, r4
   2b97a:	f00e fa2d 	bl	39dd8 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b97e:	f3bf 8f5b 	dmb	ish
   2b982:	6863      	ldr	r3, [r4, #4]
   2b984:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2b988:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2b98c:	d0b7      	beq.n	2b8fe <legacy_distribute_keys+0x16>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   2b98e:	2101      	movs	r1, #1
   2b990:	4628      	mov	r0, r5
   2b992:	f00e ff0a 	bl	3a7aa <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   2b996:	2210      	movs	r2, #16
   2b998:	a901      	add	r1, sp, #4
   2b99a:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   2b99e:	f00b f9e1 	bl	36d64 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   2b9a2:	2208      	movs	r2, #8
   2b9a4:	a905      	add	r1, sp, #20
   2b9a6:	f105 0040 	add.w	r0, r5, #64	; 0x40
   2b9aa:	f00b f9db 	bl	36d64 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   2b9ae:	2202      	movs	r2, #2
   2b9b0:	a907      	add	r1, sp, #28
   2b9b2:	f105 0048 	add.w	r0, r5, #72	; 0x48
   2b9b6:	f00b f9d5 	bl	36d64 <memcpy>
   2b9ba:	e7a0      	b.n	2b8fe <legacy_distribute_keys+0x16>
   2b9bc:	4b1d      	ldr	r3, [pc, #116]	; (2ba34 <legacy_distribute_keys+0x14c>)
   2b9be:	4a1e      	ldr	r2, [pc, #120]	; (2ba38 <legacy_distribute_keys+0x150>)
   2b9c0:	1a9b      	subs	r3, r3, r2
   2b9c2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get random bytes");
   2b9c4:	f04f 0100 	mov.w	r1, #0
   2b9c8:	2201      	movs	r2, #1
   2b9ca:	f362 0102 	bfi	r1, r2, #0, #3
   2b9ce:	f36f 01c5 	bfc	r1, #3, #3
   2b9d2:	f363 118f 	bfi	r1, r3, #6, #10
   2b9d6:	4819      	ldr	r0, [pc, #100]	; (2ba3c <legacy_distribute_keys+0x154>)
   2b9d8:	f7f4 fd1c 	bl	20414 <log_0>
			return;
   2b9dc:	e78f      	b.n	2b8fe <legacy_distribute_keys+0x16>
   2b9de:	4b15      	ldr	r3, [pc, #84]	; (2ba34 <legacy_distribute_keys+0x14c>)
   2b9e0:	4a15      	ldr	r2, [pc, #84]	; (2ba38 <legacy_distribute_keys+0x150>)
   2b9e2:	1a9b      	subs	r3, r3, r2
   2b9e4:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate Encrypt Info buffer");
   2b9e6:	f04f 0100 	mov.w	r1, #0
   2b9ea:	2201      	movs	r2, #1
   2b9ec:	f362 0102 	bfi	r1, r2, #0, #3
   2b9f0:	f36f 01c5 	bfc	r1, #3, #3
   2b9f4:	f363 118f 	bfi	r1, r3, #6, #10
   2b9f8:	4811      	ldr	r0, [pc, #68]	; (2ba40 <legacy_distribute_keys+0x158>)
   2b9fa:	f7f4 fd0b 	bl	20414 <log_0>
			return;
   2b9fe:	e77e      	b.n	2b8fe <legacy_distribute_keys+0x16>
			(void)memset(info->ltk + keys->enc_size, 0,
   2ba00:	f1c0 0210 	rsb	r2, r0, #16
   2ba04:	2100      	movs	r1, #0
   2ba06:	4430      	add	r0, r6
   2ba08:	f00b f9d0 	bl	36dac <memset>
   2ba0c:	e794      	b.n	2b938 <legacy_distribute_keys+0x50>
   2ba0e:	4b09      	ldr	r3, [pc, #36]	; (2ba34 <legacy_distribute_keys+0x14c>)
   2ba10:	4a09      	ldr	r2, [pc, #36]	; (2ba38 <legacy_distribute_keys+0x150>)
   2ba12:	1a9b      	subs	r3, r3, r2
   2ba14:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate Central Ident buffer");
   2ba16:	f04f 0100 	mov.w	r1, #0
   2ba1a:	2201      	movs	r2, #1
   2ba1c:	f362 0102 	bfi	r1, r2, #0, #3
   2ba20:	f36f 01c5 	bfc	r1, #3, #3
   2ba24:	f363 118f 	bfi	r1, r3, #6, #10
   2ba28:	4806      	ldr	r0, [pc, #24]	; (2ba44 <legacy_distribute_keys+0x15c>)
   2ba2a:	f7f4 fcf3 	bl	20414 <log_0>
			return;
   2ba2e:	e766      	b.n	2b8fe <legacy_distribute_keys+0x16>
   2ba30:	0003a593 	.word	0x0003a593
   2ba34:	0003d214 	.word	0x0003d214
   2ba38:	0003d1a4 	.word	0x0003d1a4
   2ba3c:	00040200 	.word	0x00040200
   2ba40:	0004021c 	.word	0x0004021c
   2ba44:	00040244 	.word	0x00040244

0002ba48 <bt_smp_distribute_keys>:
{
   2ba48:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2ba4a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
   2ba4e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	if (!keys) {
   2ba52:	b14a      	cbz	r2, 2ba68 <bt_smp_distribute_keys+0x20>
   2ba54:	f3bf 8f5b 	dmb	ish
   2ba58:	6843      	ldr	r3, [r0, #4]
   2ba5a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2ba5e:	f013 0f20 	tst.w	r3, #32
   2ba62:	d01b      	beq.n	2ba9c <bt_smp_distribute_keys+0x54>
	return 0;
   2ba64:	2000      	movs	r0, #0
}
   2ba66:	bd10      	pop	{r4, pc}
   2ba68:	4a0e      	ldr	r2, [pc, #56]	; (2baa4 <bt_smp_distribute_keys+0x5c>)
   2ba6a:	490f      	ldr	r1, [pc, #60]	; (2baa8 <bt_smp_distribute_keys+0x60>)
   2ba6c:	1a52      	subs	r2, r2, r1
   2ba6e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   2ba70:	f04f 0400 	mov.w	r4, #0
   2ba74:	2101      	movs	r1, #1
   2ba76:	f361 0402 	bfi	r4, r1, #0, #3
   2ba7a:	f36f 04c5 	bfc	r4, #3, #3
   2ba7e:	f362 148f 	bfi	r4, r2, #6, #10
   2ba82:	f103 0088 	add.w	r0, r3, #136	; 0x88
   2ba86:	f7f7 fb1b 	bl	230c0 <bt_addr_le_str_real>
   2ba8a:	f7f4 fa95 	bl	1ffb8 <z_log_strdup>
   2ba8e:	4601      	mov	r1, r0
   2ba90:	4622      	mov	r2, r4
   2ba92:	4806      	ldr	r0, [pc, #24]	; (2baac <bt_smp_distribute_keys+0x64>)
   2ba94:	f7f4 fc08 	bl	202a8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   2ba98:	2008      	movs	r0, #8
   2ba9a:	e7e4      	b.n	2ba66 <bt_smp_distribute_keys+0x1e>
		legacy_distribute_keys(smp);
   2ba9c:	f7ff ff24 	bl	2b8e8 <legacy_distribute_keys>
	return 0;
   2baa0:	2000      	movs	r0, #0
   2baa2:	e7e0      	b.n	2ba66 <bt_smp_distribute_keys+0x1e>
   2baa4:	0003d214 	.word	0x0003d214
   2baa8:	0003d1a4 	.word	0x0003d1a4
   2baac:	0004026c 	.word	0x0004026c

0002bab0 <smp_dhkey_generate>:
{
   2bab0:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2bab2:	1d04      	adds	r4, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bab4:	f3bf 8f5b 	dmb	ish
   2bab8:	e854 3f00 	ldrex	r3, [r4]
   2babc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2bac0:	e844 3200 	strex	r2, r3, [r4]
   2bac4:	2a00      	cmp	r2, #0
   2bac6:	d1f7      	bne.n	2bab8 <smp_dhkey_generate+0x8>
   2bac8:	f3bf 8f5b 	dmb	ish
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   2bacc:	4912      	ldr	r1, [pc, #72]	; (2bb18 <smp_dhkey_generate+0x68>)
   2bace:	3057      	adds	r0, #87	; 0x57
   2bad0:	f7fa fee6 	bl	268a0 <bt_dh_key_gen>
	if (err) {
   2bad4:	b908      	cbnz	r0, 2bada <smp_dhkey_generate+0x2a>
	return 0;
   2bad6:	2000      	movs	r0, #0
}
   2bad8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bada:	f3bf 8f5b 	dmb	ish
   2bade:	e854 3f00 	ldrex	r3, [r4]
   2bae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   2bae6:	e844 3200 	strex	r2, r3, [r4]
   2baea:	2a00      	cmp	r2, #0
   2baec:	d1f7      	bne.n	2bade <smp_dhkey_generate+0x2e>
   2baee:	f3bf 8f5b 	dmb	ish
   2baf2:	4b0a      	ldr	r3, [pc, #40]	; (2bb1c <smp_dhkey_generate+0x6c>)
   2baf4:	4a0a      	ldr	r2, [pc, #40]	; (2bb20 <smp_dhkey_generate+0x70>)
   2baf6:	1a9b      	subs	r3, r3, r2
   2baf8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to generate DHKey");
   2bafa:	f04f 0100 	mov.w	r1, #0
   2bafe:	2201      	movs	r2, #1
   2bb00:	f362 0102 	bfi	r1, r2, #0, #3
   2bb04:	f36f 01c5 	bfc	r1, #3, #3
   2bb08:	f363 118f 	bfi	r1, r3, #6, #10
   2bb0c:	4805      	ldr	r0, [pc, #20]	; (2bb24 <smp_dhkey_generate+0x74>)
   2bb0e:	f7f4 fc81 	bl	20414 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   2bb12:	2008      	movs	r0, #8
   2bb14:	e7e0      	b.n	2bad8 <smp_dhkey_generate+0x28>
   2bb16:	bf00      	nop
   2bb18:	0003a4fb 	.word	0x0003a4fb
   2bb1c:	0003d214 	.word	0x0003d214
   2bb20:	0003d1a4 	.word	0x0003d1a4
   2bb24:	00040284 	.word	0x00040284

0002bb28 <smp_public_key>:
{
   2bb28:	b570      	push	{r4, r5, r6, lr}
   2bb2a:	b082      	sub	sp, #8
   2bb2c:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
   2bb2e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   2bb30:	f100 0557 	add.w	r5, r0, #87	; 0x57
   2bb34:	2220      	movs	r2, #32
   2bb36:	4631      	mov	r1, r6
   2bb38:	4628      	mov	r0, r5
   2bb3a:	f00b f913 	bl	36d64 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   2bb3e:	2220      	movs	r2, #32
   2bb40:	18b1      	adds	r1, r6, r2
   2bb42:	f104 0077 	add.w	r0, r4, #119	; 0x77
   2bb46:	f00b f90d 	bl	36d64 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   2bb4a:	4628      	mov	r0, r5
   2bb4c:	f7fa fdd0 	bl	266f0 <bt_pub_key_is_debug>
   2bb50:	b310      	cbz	r0, 2bb98 <smp_public_key+0x70>
   2bb52:	4b78      	ldr	r3, [pc, #480]	; (2bd34 <smp_public_key+0x20c>)
   2bb54:	4a78      	ldr	r2, [pc, #480]	; (2bd38 <smp_public_key+0x210>)
   2bb56:	1a9b      	subs	r3, r3, r2
   2bb58:	08db      	lsrs	r3, r3, #3
		BT_INFO("Remote is using Debug Public key");
   2bb5a:	f04f 0100 	mov.w	r1, #0
   2bb5e:	2203      	movs	r2, #3
   2bb60:	f362 0102 	bfi	r1, r2, #0, #3
   2bb64:	f36f 01c5 	bfc	r1, #3, #3
   2bb68:	f363 118f 	bfi	r1, r3, #6, #10
   2bb6c:	4873      	ldr	r0, [pc, #460]	; (2bd3c <smp_public_key+0x214>)
   2bb6e:	f7f4 fc51 	bl	20414 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   2bb72:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bb74:	f3bf 8f5b 	dmb	ish
   2bb78:	e853 2f00 	ldrex	r2, [r3]
   2bb7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   2bb80:	e843 2100 	strex	r1, r2, [r3]
   2bb84:	2900      	cmp	r1, #0
   2bb86:	d1f7      	bne.n	2bb78 <smp_public_key+0x50>
   2bb88:	f3bf 8f5b 	dmb	ish
		if (!update_debug_keys_check(smp)) {
   2bb8c:	4620      	mov	r0, r4
   2bb8e:	f00e fb08 	bl	3a1a2 <update_debug_keys_check>
   2bb92:	2800      	cmp	r0, #0
   2bb94:	f000 80c6 	beq.w	2bd24 <smp_public_key+0x1fc>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2bb98:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2bb9c:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2bb9e:	b113      	cbz	r3, 2bba6 <smp_public_key+0x7e>
	return 0;
   2bba0:	2000      	movs	r0, #0
}
   2bba2:	b002      	add	sp, #8
   2bba4:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2bba6:	1d26      	adds	r6, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bba8:	f3bf 8f5b 	dmb	ish
   2bbac:	6863      	ldr	r3, [r4, #4]
   2bbae:	f3bf 8f5b 	dmb	ish
   2bbb2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   2bbb6:	d008      	beq.n	2bbca <smp_public_key+0xa2>
		switch (smp->method) {
   2bbb8:	7a21      	ldrb	r1, [r4, #8]
   2bbba:	2905      	cmp	r1, #5
   2bbbc:	f200 80a0 	bhi.w	2bd00 <smp_public_key+0x1d8>
   2bbc0:	e8df f001 	tbb	[pc, r1]
   2bbc4:	1d2a4d1d 	.word	0x1d2a4d1d
   2bbc8:	6f9e      	.short	0x6f9e
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   2bbca:	2220      	movs	r2, #32
   2bbcc:	4b5c      	ldr	r3, [pc, #368]	; (2bd40 <smp_public_key+0x218>)
   2bbce:	6819      	ldr	r1, [r3, #0]
   2bbd0:	4628      	mov	r0, r5
   2bbd2:	f00b f89a 	bl	36d0a <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2bbd6:	2800      	cmp	r0, #0
   2bbd8:	d1ee      	bne.n	2bbb8 <smp_public_key+0x90>
   2bbda:	4b56      	ldr	r3, [pc, #344]	; (2bd34 <smp_public_key+0x20c>)
   2bbdc:	4a56      	ldr	r2, [pc, #344]	; (2bd38 <smp_public_key+0x210>)
   2bbde:	1a9b      	subs	r3, r3, r2
   2bbe0:	08db      	lsrs	r3, r3, #3
			BT_WARN("Remote public key rejected");
   2bbe2:	f04f 0100 	mov.w	r1, #0
   2bbe6:	2202      	movs	r2, #2
   2bbe8:	f362 0102 	bfi	r1, r2, #0, #3
   2bbec:	f36f 01c5 	bfc	r1, #3, #3
   2bbf0:	f363 118f 	bfi	r1, r3, #6, #10
   2bbf4:	4853      	ldr	r0, [pc, #332]	; (2bd44 <smp_public_key+0x21c>)
   2bbf6:	f7f4 fc0d 	bl	20414 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   2bbfa:	2008      	movs	r0, #8
   2bbfc:	e7d1      	b.n	2bba2 <smp_public_key+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bbfe:	f3bf 8f5b 	dmb	ish
   2bc02:	e854 3f00 	ldrex	r3, [r4]
   2bc06:	f043 0308 	orr.w	r3, r3, #8
   2bc0a:	e844 3200 	strex	r2, r3, [r4]
   2bc0e:	2a00      	cmp	r2, #0
   2bc10:	d1f7      	bne.n	2bc02 <smp_public_key+0xda>
   2bc12:	f3bf 8f5b 	dmb	ish
}
   2bc16:	e040      	b.n	2bc9a <smp_public_key+0x172>
			err = display_passkey(smp);
   2bc18:	4620      	mov	r0, r4
   2bc1a:	f7ff faa9 	bl	2b170 <display_passkey>
			if (err) {
   2bc1e:	2800      	cmp	r0, #0
   2bc20:	d1bf      	bne.n	2bba2 <smp_public_key+0x7a>
   2bc22:	f3bf 8f5b 	dmb	ish
   2bc26:	e854 3f00 	ldrex	r3, [r4]
   2bc2a:	f043 0308 	orr.w	r3, r3, #8
   2bc2e:	e844 3200 	strex	r2, r3, [r4]
   2bc32:	2a00      	cmp	r2, #0
   2bc34:	d1f7      	bne.n	2bc26 <smp_public_key+0xfe>
   2bc36:	f3bf 8f5b 	dmb	ish
   2bc3a:	f3bf 8f5b 	dmb	ish
   2bc3e:	e854 3f00 	ldrex	r3, [r4]
   2bc42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2bc46:	e844 3200 	strex	r2, r3, [r4]
   2bc4a:	2a00      	cmp	r2, #0
   2bc4c:	d1f7      	bne.n	2bc3e <smp_public_key+0x116>
   2bc4e:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
   2bc52:	4620      	mov	r0, r4
   2bc54:	f7ff f830 	bl	2acb8 <smp_send_pairing_confirm>
			if (err) {
   2bc58:	2800      	cmp	r0, #0
   2bc5a:	d1a2      	bne.n	2bba2 <smp_public_key+0x7a>
   2bc5c:	e01d      	b.n	2bc9a <smp_public_key+0x172>
   2bc5e:	f3bf 8f5b 	dmb	ish
   2bc62:	e856 3f00 	ldrex	r3, [r6]
   2bc66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2bc6a:	e846 3200 	strex	r2, r3, [r6]
   2bc6e:	2a00      	cmp	r2, #0
   2bc70:	d1f7      	bne.n	2bc62 <smp_public_key+0x13a>
   2bc72:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
   2bc76:	4b34      	ldr	r3, [pc, #208]	; (2bd48 <smp_public_key+0x220>)
   2bc78:	681b      	ldr	r3, [r3, #0]
   2bc7a:	685b      	ldr	r3, [r3, #4]
   2bc7c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2bc80:	4798      	blx	r3
   2bc82:	f3bf 8f5b 	dmb	ish
   2bc86:	e854 3f00 	ldrex	r3, [r4]
   2bc8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2bc8e:	e844 3200 	strex	r2, r3, [r4]
   2bc92:	2a00      	cmp	r2, #0
   2bc94:	d1f7      	bne.n	2bc86 <smp_public_key+0x15e>
   2bc96:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
   2bc9a:	4620      	mov	r0, r4
   2bc9c:	f00e faa2 	bl	3a1e4 <generate_dhkey>
   2bca0:	e77f      	b.n	2bba2 <smp_public_key+0x7a>
			if (bt_rand(smp->prnd, 16)) {
   2bca2:	2110      	movs	r1, #16
   2bca4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2bca8:	f002 fdac 	bl	2e804 <bt_rand>
   2bcac:	2800      	cmp	r0, #0
   2bcae:	d13b      	bne.n	2bd28 <smp_public_key+0x200>
			if (bt_auth && bt_auth->oob_data_request) {
   2bcb0:	4b25      	ldr	r3, [pc, #148]	; (2bd48 <smp_public_key+0x220>)
   2bcb2:	681b      	ldr	r3, [r3, #0]
   2bcb4:	2b00      	cmp	r3, #0
   2bcb6:	d039      	beq.n	2bd2c <smp_public_key+0x204>
   2bcb8:	68db      	ldr	r3, [r3, #12]
   2bcba:	2b00      	cmp	r3, #0
   2bcbc:	d038      	beq.n	2bd30 <smp_public_key+0x208>
				struct bt_conn_oob_info info = {
   2bcbe:	4b23      	ldr	r3, [pc, #140]	; (2bd4c <smp_public_key+0x224>)
   2bcc0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   2bcc2:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   2bcc6:	a901      	add	r1, sp, #4
   2bcc8:	4620      	mov	r0, r4
   2bcca:	f00d fefb 	bl	39ac4 <le_sc_oob_config_set>
				smp->oobd_local = NULL;
   2bcce:	2300      	movs	r3, #0
   2bcd0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
				smp->oobd_remote = NULL;
   2bcd4:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   2bcd8:	f3bf 8f5b 	dmb	ish
   2bcdc:	e856 3f00 	ldrex	r3, [r6]
   2bce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2bce4:	e846 3200 	strex	r2, r3, [r6]
   2bce8:	2a00      	cmp	r2, #0
   2bcea:	d1f7      	bne.n	2bcdc <smp_public_key+0x1b4>
   2bcec:	f3bf 8f5b 	dmb	ish
				bt_auth->oob_data_request(smp->chan.chan.conn,
   2bcf0:	4b15      	ldr	r3, [pc, #84]	; (2bd48 <smp_public_key+0x220>)
   2bcf2:	681b      	ldr	r3, [r3, #0]
   2bcf4:	68db      	ldr	r3, [r3, #12]
   2bcf6:	a901      	add	r1, sp, #4
   2bcf8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2bcfc:	4798      	blx	r3
			break;
   2bcfe:	e7cc      	b.n	2bc9a <smp_public_key+0x172>
   2bd00:	4b0c      	ldr	r3, [pc, #48]	; (2bd34 <smp_public_key+0x20c>)
   2bd02:	4a0d      	ldr	r2, [pc, #52]	; (2bd38 <smp_public_key+0x210>)
   2bd04:	1a9b      	subs	r3, r3, r2
   2bd06:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unknown pairing method (%u)", smp->method);
   2bd08:	f04f 0200 	mov.w	r2, #0
   2bd0c:	2001      	movs	r0, #1
   2bd0e:	f360 0202 	bfi	r2, r0, #0, #3
   2bd12:	f36f 02c5 	bfc	r2, #3, #3
   2bd16:	f363 128f 	bfi	r2, r3, #6, #10
   2bd1a:	480d      	ldr	r0, [pc, #52]	; (2bd50 <smp_public_key+0x228>)
   2bd1c:	f7f4 fac4 	bl	202a8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   2bd20:	2008      	movs	r0, #8
   2bd22:	e73e      	b.n	2bba2 <smp_public_key+0x7a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2bd24:	2003      	movs	r0, #3
   2bd26:	e73c      	b.n	2bba2 <smp_public_key+0x7a>
				return BT_SMP_ERR_UNSPECIFIED;
   2bd28:	2008      	movs	r0, #8
   2bd2a:	e73a      	b.n	2bba2 <smp_public_key+0x7a>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   2bd2c:	2002      	movs	r0, #2
   2bd2e:	e738      	b.n	2bba2 <smp_public_key+0x7a>
   2bd30:	2002      	movs	r0, #2
   2bd32:	e736      	b.n	2bba2 <smp_public_key+0x7a>
   2bd34:	0003d214 	.word	0x0003d214
   2bd38:	0003d1a4 	.word	0x0003d1a4
   2bd3c:	000402a0 	.word	0x000402a0
   2bd40:	20008854 	.word	0x20008854
   2bd44:	000402c4 	.word	0x000402c4
   2bd48:	20008274 	.word	0x20008274
   2bd4c:	0003d3f0 	.word	0x0003d3f0
   2bd50:	00040118 	.word	0x00040118

0002bd54 <legacy_request_tk>:
{
   2bd54:	b530      	push	{r4, r5, lr}
   2bd56:	b083      	sub	sp, #12
   2bd58:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2bd5a:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   2bd5e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2bd62:	7a28      	ldrb	r0, [r5, #8]
   2bd64:	f000 ff9e 	bl	2cca4 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   2bd68:	b128      	cbz	r0, 2bd76 <legacy_request_tk+0x22>
   2bd6a:	7b43      	ldrb	r3, [r0, #13]
   2bd6c:	f013 0f01 	tst.w	r3, #1
   2bd70:	d001      	beq.n	2bd76 <legacy_request_tk+0x22>
	    smp->method == JUST_WORKS) {
   2bd72:	7a23      	ldrb	r3, [r4, #8]
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   2bd74:	b14b      	cbz	r3, 2bd8a <legacy_request_tk+0x36>
	switch (smp->method) {
   2bd76:	7a20      	ldrb	r0, [r4, #8]
   2bd78:	2806      	cmp	r0, #6
   2bd7a:	f200 8084 	bhi.w	2be86 <legacy_request_tk+0x132>
   2bd7e:	e8df f000 	tbb	[pc, r0]
   2bd82:	6d80      	.short	0x6d80
   2bd84:	82828236 	.word	0x82828236
   2bd88:	16          	.byte	0x16
   2bd89:	00          	.byte	0x00
   2bd8a:	4b4b      	ldr	r3, [pc, #300]	; (2beb8 <legacy_request_tk+0x164>)
   2bd8c:	4a4b      	ldr	r2, [pc, #300]	; (2bebc <legacy_request_tk+0x168>)
   2bd8e:	1a9b      	subs	r3, r3, r2
   2bd90:	08db      	lsrs	r3, r3, #3
		BT_ERR("JustWorks failed, authenticated keys present");
   2bd92:	f04f 0100 	mov.w	r1, #0
   2bd96:	2201      	movs	r2, #1
   2bd98:	f362 0102 	bfi	r1, r2, #0, #3
   2bd9c:	f36f 01c5 	bfc	r1, #3, #3
   2bda0:	f363 118f 	bfi	r1, r3, #6, #10
   2bda4:	4846      	ldr	r0, [pc, #280]	; (2bec0 <legacy_request_tk+0x16c>)
   2bda6:	f7f4 fb35 	bl	20414 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   2bdaa:	2008      	movs	r0, #8
   2bdac:	e069      	b.n	2be82 <legacy_request_tk+0x12e>
		if (bt_auth && bt_auth->oob_data_request) {
   2bdae:	4b45      	ldr	r3, [pc, #276]	; (2bec4 <legacy_request_tk+0x170>)
   2bdb0:	681b      	ldr	r3, [r3, #0]
   2bdb2:	2b00      	cmp	r3, #0
   2bdb4:	d07a      	beq.n	2beac <legacy_request_tk+0x158>
   2bdb6:	68db      	ldr	r3, [r3, #12]
   2bdb8:	2b00      	cmp	r3, #0
   2bdba:	d079      	beq.n	2beb0 <legacy_request_tk+0x15c>
			struct bt_conn_oob_info info = {
   2bdbc:	2500      	movs	r5, #0
   2bdbe:	f8ad 5000 	strh.w	r5, [sp]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2bdc2:	1d23      	adds	r3, r4, #4
   2bdc4:	f3bf 8f5b 	dmb	ish
   2bdc8:	e853 2f00 	ldrex	r2, [r3]
   2bdcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2bdd0:	e843 2100 	strex	r1, r2, [r3]
   2bdd4:	2900      	cmp	r1, #0
   2bdd6:	d1f7      	bne.n	2bdc8 <legacy_request_tk+0x74>
   2bdd8:	f3bf 8f5b 	dmb	ish
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   2bddc:	4b39      	ldr	r3, [pc, #228]	; (2bec4 <legacy_request_tk+0x170>)
   2bdde:	681b      	ldr	r3, [r3, #0]
   2bde0:	68db      	ldr	r3, [r3, #12]
   2bde2:	4669      	mov	r1, sp
   2bde4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2bde8:	4798      	blx	r3
	return 0;
   2bdea:	4628      	mov	r0, r5
		break;
   2bdec:	e049      	b.n	2be82 <legacy_request_tk+0x12e>
			if (bt_rand(&passkey, sizeof(passkey))) {
   2bdee:	2104      	movs	r1, #4
   2bdf0:	eb0d 0001 	add.w	r0, sp, r1
   2bdf4:	f002 fd06 	bl	2e804 <bt_rand>
   2bdf8:	2800      	cmp	r0, #0
   2bdfa:	d15b      	bne.n	2beb4 <legacy_request_tk+0x160>
			passkey %= 1000000;
   2bdfc:	9a01      	ldr	r2, [sp, #4]
   2bdfe:	4b32      	ldr	r3, [pc, #200]	; (2bec8 <legacy_request_tk+0x174>)
   2be00:	fba3 1302 	umull	r1, r3, r3, r2
   2be04:	0c9b      	lsrs	r3, r3, #18
   2be06:	4931      	ldr	r1, [pc, #196]	; (2becc <legacy_request_tk+0x178>)
   2be08:	fb01 2313 	mls	r3, r1, r3, r2
   2be0c:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   2be0e:	4b2d      	ldr	r3, [pc, #180]	; (2bec4 <legacy_request_tk+0x170>)
   2be10:	681b      	ldr	r3, [r3, #0]
   2be12:	b1a3      	cbz	r3, 2be3e <legacy_request_tk+0xea>
   2be14:	681b      	ldr	r3, [r3, #0]
   2be16:	b193      	cbz	r3, 2be3e <legacy_request_tk+0xea>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   2be18:	1d23      	adds	r3, r4, #4
   2be1a:	f3bf 8f5b 	dmb	ish
   2be1e:	e853 2f00 	ldrex	r2, [r3]
   2be22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2be26:	e843 2100 	strex	r1, r2, [r3]
   2be2a:	2900      	cmp	r1, #0
   2be2c:	d1f7      	bne.n	2be1e <legacy_request_tk+0xca>
   2be2e:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_display(conn, passkey);
   2be32:	4b24      	ldr	r3, [pc, #144]	; (2bec4 <legacy_request_tk+0x170>)
   2be34:	681b      	ldr	r3, [r3, #0]
   2be36:	681b      	ldr	r3, [r3, #0]
   2be38:	9901      	ldr	r1, [sp, #4]
   2be3a:	4628      	mov	r0, r5
   2be3c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   2be3e:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   2be40:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   2be44:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2be48:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	sys_put_le16(val >> 16, &dst[2]);
   2be4c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   2be4e:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   2be52:	0e1b      	lsrs	r3, r3, #24
   2be54:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return 0;
   2be58:	2000      	movs	r0, #0
}
   2be5a:	e012      	b.n	2be82 <legacy_request_tk+0x12e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2be5c:	3404      	adds	r4, #4
   2be5e:	f3bf 8f5b 	dmb	ish
   2be62:	e854 3f00 	ldrex	r3, [r4]
   2be66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2be6a:	e844 3200 	strex	r2, r3, [r4]
   2be6e:	2a00      	cmp	r2, #0
   2be70:	d1f7      	bne.n	2be62 <legacy_request_tk+0x10e>
   2be72:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
   2be76:	4b13      	ldr	r3, [pc, #76]	; (2bec4 <legacy_request_tk+0x170>)
   2be78:	681b      	ldr	r3, [r3, #0]
   2be7a:	685b      	ldr	r3, [r3, #4]
   2be7c:	4628      	mov	r0, r5
   2be7e:	4798      	blx	r3
	return 0;
   2be80:	2000      	movs	r0, #0
}
   2be82:	b003      	add	sp, #12
   2be84:	bd30      	pop	{r4, r5, pc}
   2be86:	4b0c      	ldr	r3, [pc, #48]	; (2beb8 <legacy_request_tk+0x164>)
   2be88:	4a0c      	ldr	r2, [pc, #48]	; (2bebc <legacy_request_tk+0x168>)
   2be8a:	1a9b      	subs	r3, r3, r2
   2be8c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   2be8e:	f04f 0200 	mov.w	r2, #0
   2be92:	2101      	movs	r1, #1
   2be94:	f361 0202 	bfi	r2, r1, #0, #3
   2be98:	f36f 02c5 	bfc	r2, #3, #3
   2be9c:	f363 128f 	bfi	r2, r3, #6, #10
   2bea0:	4601      	mov	r1, r0
   2bea2:	480b      	ldr	r0, [pc, #44]	; (2bed0 <legacy_request_tk+0x17c>)
   2bea4:	f7f4 fa00 	bl	202a8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   2bea8:	2008      	movs	r0, #8
   2beaa:	e7ea      	b.n	2be82 <legacy_request_tk+0x12e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   2beac:	2002      	movs	r0, #2
   2beae:	e7e8      	b.n	2be82 <legacy_request_tk+0x12e>
   2beb0:	2002      	movs	r0, #2
   2beb2:	e7e6      	b.n	2be82 <legacy_request_tk+0x12e>
				return BT_SMP_ERR_UNSPECIFIED;
   2beb4:	2008      	movs	r0, #8
   2beb6:	e7e4      	b.n	2be82 <legacy_request_tk+0x12e>
   2beb8:	0003d214 	.word	0x0003d214
   2bebc:	0003d1a4 	.word	0x0003d1a4
   2bec0:	000402e0 	.word	0x000402e0
   2bec4:	20008274 	.word	0x20008274
   2bec8:	431bde83 	.word	0x431bde83
   2becc:	000f4240 	.word	0x000f4240
   2bed0:	00040118 	.word	0x00040118

0002bed4 <legacy_pairing_rsp>:
{
   2bed4:	b538      	push	{r3, r4, r5, lr}
   2bed6:	4604      	mov	r4, r0
	ret = legacy_request_tk(smp);
   2bed8:	f7ff ff3c 	bl	2bd54 <legacy_request_tk>
	if (ret) {
   2bedc:	2800      	cmp	r0, #0
   2bede:	d154      	bne.n	2bf8a <legacy_pairing_rsp+0xb6>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2bee0:	7a25      	ldrb	r5, [r4, #8]
   2bee2:	b96d      	cbnz	r5, 2bf00 <legacy_pairing_rsp+0x2c>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2bee4:	1d22      	adds	r2, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bee6:	f3bf 8f5b 	dmb	ish
   2beea:	6863      	ldr	r3, [r4, #4]
   2beec:	f3bf 8f5b 	dmb	ish
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2bef0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2bef4:	d004      	beq.n	2bf00 <legacy_pairing_rsp+0x2c>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2bef6:	4b25      	ldr	r3, [pc, #148]	; (2bf8c <legacy_pairing_rsp+0xb8>)
   2bef8:	681b      	ldr	r3, [r3, #0]
   2befa:	b10b      	cbz	r3, 2bf00 <legacy_pairing_rsp+0x2c>
	    bt_auth && bt_auth->pairing_confirm) {
   2befc:	695b      	ldr	r3, [r3, #20]
   2befe:	b9ab      	cbnz	r3, 2bf2c <legacy_pairing_rsp+0x58>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2bf00:	1d23      	adds	r3, r4, #4
   2bf02:	f3bf 8f5b 	dmb	ish
   2bf06:	6862      	ldr	r2, [r4, #4]
   2bf08:	f3bf 8f5b 	dmb	ish
   2bf0c:	f412 6f80 	tst.w	r2, #1024	; 0x400
   2bf10:	d020      	beq.n	2bf54 <legacy_pairing_rsp+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bf12:	f3bf 8f5b 	dmb	ish
   2bf16:	e853 2f00 	ldrex	r2, [r3]
   2bf1a:	f042 0201 	orr.w	r2, r2, #1
   2bf1e:	e843 2100 	strex	r1, r2, [r3]
   2bf22:	2900      	cmp	r1, #0
   2bf24:	d1f7      	bne.n	2bf16 <legacy_pairing_rsp+0x42>
   2bf26:	f3bf 8f5b 	dmb	ish
	return 0;
   2bf2a:	e02e      	b.n	2bf8a <legacy_pairing_rsp+0xb6>
   2bf2c:	f3bf 8f5b 	dmb	ish
   2bf30:	e852 3f00 	ldrex	r3, [r2]
   2bf34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2bf38:	e842 3100 	strex	r1, r3, [r2]
   2bf3c:	2900      	cmp	r1, #0
   2bf3e:	d1f7      	bne.n	2bf30 <legacy_pairing_rsp+0x5c>
   2bf40:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   2bf44:	4b11      	ldr	r3, [pc, #68]	; (2bf8c <legacy_pairing_rsp+0xb8>)
   2bf46:	681b      	ldr	r3, [r3, #0]
   2bf48:	695b      	ldr	r3, [r3, #20]
   2bf4a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2bf4e:	4798      	blx	r3
		return 0;
   2bf50:	4628      	mov	r0, r5
   2bf52:	e01a      	b.n	2bf8a <legacy_pairing_rsp+0xb6>
   2bf54:	f3bf 8f5b 	dmb	ish
   2bf58:	e854 3f00 	ldrex	r3, [r4]
   2bf5c:	f043 0308 	orr.w	r3, r3, #8
   2bf60:	e844 3200 	strex	r2, r3, [r4]
   2bf64:	2a00      	cmp	r2, #0
   2bf66:	d1f7      	bne.n	2bf58 <legacy_pairing_rsp+0x84>
   2bf68:	f3bf 8f5b 	dmb	ish
   2bf6c:	f3bf 8f5b 	dmb	ish
   2bf70:	e854 3f00 	ldrex	r3, [r4]
   2bf74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2bf78:	e844 3200 	strex	r2, r3, [r4]
   2bf7c:	2a00      	cmp	r2, #0
   2bf7e:	d1f7      	bne.n	2bf70 <legacy_pairing_rsp+0x9c>
   2bf80:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
   2bf84:	4620      	mov	r0, r4
   2bf86:	f00d ff42 	bl	39e0e <legacy_send_pairing_confirm>
}
   2bf8a:	bd38      	pop	{r3, r4, r5, pc}
   2bf8c:	20008274 	.word	0x20008274

0002bf90 <smp_pairing_rsp>:
{
   2bf90:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2bf92:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	struct bt_smp_pairing *rsp = (void *)buf->data;
   2bf96:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   2bf98:	78eb      	ldrb	r3, [r5, #3]
   2bf9a:	3b07      	subs	r3, #7
   2bf9c:	b2db      	uxtb	r3, r3
   2bf9e:	2b09      	cmp	r3, #9
   2bfa0:	f200 80ca 	bhi.w	2c138 <smp_pairing_rsp+0x1a8>
   2bfa4:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
   2bfa6:	792b      	ldrb	r3, [r5, #4]
   2bfa8:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   2bfac:	4013      	ands	r3, r2
   2bfae:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   2bfb2:	796b      	ldrb	r3, [r5, #5]
   2bfb4:	f890 20e9 	ldrb.w	r2, [r0, #233]	; 0xe9
   2bfb8:	4013      	ands	r3, r2
   2bfba:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   2bfbe:	2302      	movs	r3, #2
   2bfc0:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   2bfc2:	2206      	movs	r2, #6
   2bfc4:	4629      	mov	r1, r5
   2bfc6:	3011      	adds	r0, #17
   2bfc8:	f00a fecc 	bl	36d64 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2bfcc:	78ab      	ldrb	r3, [r5, #2]
   2bfce:	f013 0f08 	tst.w	r3, #8
   2bfd2:	d010      	beq.n	2bff6 <smp_pairing_rsp+0x66>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
   2bfd4:	7b23      	ldrb	r3, [r4, #12]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2bfd6:	f013 0f08 	tst.w	r3, #8
   2bfda:	d00c      	beq.n	2bff6 <smp_pairing_rsp+0x66>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   2bfdc:	1d23      	adds	r3, r4, #4
   2bfde:	f3bf 8f5b 	dmb	ish
   2bfe2:	e853 2f00 	ldrex	r2, [r3]
   2bfe6:	f042 0220 	orr.w	r2, r2, #32
   2bfea:	e843 2100 	strex	r1, r2, [r3]
   2bfee:	2900      	cmp	r1, #0
   2bff0:	d1f7      	bne.n	2bfe2 <smp_pairing_rsp+0x52>
   2bff2:	f3bf 8f5b 	dmb	ish
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   2bff6:	78ab      	ldrb	r3, [r5, #2]
   2bff8:	f013 0f20 	tst.w	r3, #32
   2bffc:	d010      	beq.n	2c020 <smp_pairing_rsp+0x90>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
   2bffe:	7b23      	ldrb	r3, [r4, #12]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   2c000:	f013 0f20 	tst.w	r3, #32
   2c004:	d00c      	beq.n	2c020 <smp_pairing_rsp+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   2c006:	1d23      	adds	r3, r4, #4
   2c008:	f3bf 8f5b 	dmb	ish
   2c00c:	e853 2f00 	ldrex	r2, [r3]
   2c010:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2c014:	e843 2100 	strex	r1, r2, [r3]
   2c018:	2900      	cmp	r1, #0
   2c01a:	d1f7      	bne.n	2c00c <smp_pairing_rsp+0x7c>
   2c01c:	f3bf 8f5b 	dmb	ish
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   2c020:	78ab      	ldrb	r3, [r5, #2]
   2c022:	f013 0f01 	tst.w	r3, #1
   2c026:	d010      	beq.n	2c04a <smp_pairing_rsp+0xba>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
   2c028:	7b23      	ldrb	r3, [r4, #12]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   2c02a:	f013 0f01 	tst.w	r3, #1
   2c02e:	d00c      	beq.n	2c04a <smp_pairing_rsp+0xba>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   2c030:	1d23      	adds	r3, r4, #4
   2c032:	f3bf 8f5b 	dmb	ish
   2c036:	e853 2f00 	ldrex	r2, [r3]
   2c03a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2c03e:	e843 2100 	strex	r1, r2, [r3]
   2c042:	2900      	cmp	r1, #0
   2c044:	d1f7      	bne.n	2c036 <smp_pairing_rsp+0xa6>
   2c046:	f3bf 8f5b 	dmb	ish
	smp->method = get_pair_method(smp, rsp->io_capability);
   2c04a:	7829      	ldrb	r1, [r5, #0]
   2c04c:	4620      	mov	r0, r4
   2c04e:	f7fe fda1 	bl	2ab94 <get_pair_method>
   2c052:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   2c054:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   2c058:	4620      	mov	r0, r4
   2c05a:	f00d fdaa 	bl	39bb2 <update_keys_check>
   2c05e:	2800      	cmp	r0, #0
   2c060:	d06c      	beq.n	2c13c <smp_pairing_rsp+0x1ac>
	err = remote_sec_level_reachable(smp);
   2c062:	4620      	mov	r0, r4
   2c064:	f00d fdd6 	bl	39c14 <remote_sec_level_reachable>
	if (err) {
   2c068:	bb90      	cbnz	r0, 2c0d0 <smp_pairing_rsp+0x140>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c06a:	1d22      	adds	r2, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c06c:	f3bf 8f5b 	dmb	ish
   2c070:	6863      	ldr	r3, [r4, #4]
   2c072:	f3bf 8f5b 	dmb	ish
   2c076:	f013 0f20 	tst.w	r3, #32
   2c07a:	d02a      	beq.n	2c0d2 <smp_pairing_rsp+0x142>
	smp->local_dist &= SEND_KEYS_SC;
   2c07c:	2300      	movs	r3, #0
   2c07e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   2c082:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2c086:	f003 0302 	and.w	r3, r3, #2
   2c08a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2c08e:	7a25      	ldrb	r5, [r4, #8]
   2c090:	b31d      	cbz	r5, 2c0da <smp_pairing_rsp+0x14a>
	if (!sc_public_key) {
   2c092:	4b2b      	ldr	r3, [pc, #172]	; (2c140 <smp_pairing_rsp+0x1b0>)
   2c094:	681b      	ldr	r3, [r3, #0]
   2c096:	2b00      	cmp	r3, #0
   2c098:	d041      	beq.n	2c11e <smp_pairing_rsp+0x18e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c09a:	f3bf 8f5b 	dmb	ish
   2c09e:	e854 3f00 	ldrex	r3, [r4]
   2c0a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2c0a6:	e844 3200 	strex	r2, r3, [r4]
   2c0aa:	2a00      	cmp	r2, #0
   2c0ac:	d1f7      	bne.n	2c09e <smp_pairing_rsp+0x10e>
   2c0ae:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c0b2:	f3bf 8f5b 	dmb	ish
   2c0b6:	e854 3f00 	ldrex	r3, [r4]
   2c0ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   2c0be:	e844 3200 	strex	r2, r3, [r4]
   2c0c2:	2a00      	cmp	r2, #0
   2c0c4:	d1f7      	bne.n	2c0b6 <smp_pairing_rsp+0x126>
   2c0c6:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
   2c0ca:	4620      	mov	r0, r4
   2c0cc:	f7fe fd92 	bl	2abf4 <sc_send_public_key>
}
   2c0d0:	bd70      	pop	{r4, r5, r6, pc}
		return legacy_pairing_rsp(smp);
   2c0d2:	4620      	mov	r0, r4
   2c0d4:	f7ff fefe 	bl	2bed4 <legacy_pairing_rsp>
   2c0d8:	e7fa      	b.n	2c0d0 <smp_pairing_rsp+0x140>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c0da:	f3bf 8f5b 	dmb	ish
   2c0de:	6863      	ldr	r3, [r4, #4]
   2c0e0:	f3bf 8f5b 	dmb	ish
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2c0e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2c0e8:	d0d3      	beq.n	2c092 <smp_pairing_rsp+0x102>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2c0ea:	4b16      	ldr	r3, [pc, #88]	; (2c144 <smp_pairing_rsp+0x1b4>)
   2c0ec:	681b      	ldr	r3, [r3, #0]
   2c0ee:	2b00      	cmp	r3, #0
   2c0f0:	d0cf      	beq.n	2c092 <smp_pairing_rsp+0x102>
	    bt_auth && bt_auth->pairing_confirm) {
   2c0f2:	695b      	ldr	r3, [r3, #20]
   2c0f4:	2b00      	cmp	r3, #0
   2c0f6:	d0cc      	beq.n	2c092 <smp_pairing_rsp+0x102>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c0f8:	f3bf 8f5b 	dmb	ish
   2c0fc:	e852 3f00 	ldrex	r3, [r2]
   2c100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2c104:	e842 3100 	strex	r1, r3, [r2]
   2c108:	2900      	cmp	r1, #0
   2c10a:	d1f7      	bne.n	2c0fc <smp_pairing_rsp+0x16c>
   2c10c:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(conn);
   2c110:	4b0c      	ldr	r3, [pc, #48]	; (2c144 <smp_pairing_rsp+0x1b4>)
   2c112:	681b      	ldr	r3, [r3, #0]
   2c114:	695b      	ldr	r3, [r3, #20]
   2c116:	4630      	mov	r0, r6
   2c118:	4798      	blx	r3
		return 0;
   2c11a:	4628      	mov	r0, r5
   2c11c:	e7d8      	b.n	2c0d0 <smp_pairing_rsp+0x140>
   2c11e:	f3bf 8f5b 	dmb	ish
   2c122:	e852 3f00 	ldrex	r3, [r2]
   2c126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c12a:	e842 3100 	strex	r1, r3, [r2]
   2c12e:	2900      	cmp	r1, #0
   2c130:	d1f7      	bne.n	2c122 <smp_pairing_rsp+0x192>
   2c132:	f3bf 8f5b 	dmb	ish
		return 0;
   2c136:	e7cb      	b.n	2c0d0 <smp_pairing_rsp+0x140>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   2c138:	2006      	movs	r0, #6
   2c13a:	e7c9      	b.n	2c0d0 <smp_pairing_rsp+0x140>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2c13c:	2003      	movs	r0, #3
   2c13e:	e7c7      	b.n	2c0d0 <smp_pairing_rsp+0x140>
   2c140:	20008854 	.word	0x20008854
   2c144:	20008274 	.word	0x20008274

0002c148 <smp_ident_info>:
{
   2c148:	b570      	push	{r4, r5, r6, lr}
   2c14a:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c14c:	f3bf 8f5b 	dmb	ish
   2c150:	6843      	ldr	r3, [r0, #4]
   2c152:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2c156:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2c15a:	d00f      	beq.n	2c17c <smp_ident_info+0x34>
		struct bt_smp_ident_info *req = (void *)buf->data;
   2c15c:	688e      	ldr	r6, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   2c15e:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   2c162:	f103 0588 	add.w	r5, r3, #136	; 0x88
   2c166:	462a      	mov	r2, r5
   2c168:	7a19      	ldrb	r1, [r3, #8]
   2c16a:	2002      	movs	r0, #2
   2c16c:	f00e fb21 	bl	3a7b2 <bt_keys_get_type>
		if (!keys) {
   2c170:	b190      	cbz	r0, 2c198 <smp_ident_info+0x50>
		memcpy(keys->irk.val, req->irk, 16);
   2c172:	2210      	movs	r2, #16
   2c174:	4631      	mov	r1, r6
   2c176:	302a      	adds	r0, #42	; 0x2a
   2c178:	f00a fdf4 	bl	36d64 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c17c:	f3bf 8f5b 	dmb	ish
   2c180:	e854 3f00 	ldrex	r3, [r4]
   2c184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2c188:	e844 3200 	strex	r2, r3, [r4]
   2c18c:	2a00      	cmp	r2, #0
   2c18e:	d1f7      	bne.n	2c180 <smp_ident_info+0x38>
   2c190:	f3bf 8f5b 	dmb	ish
	return 0;
   2c194:	2000      	movs	r0, #0
}
   2c196:	bd70      	pop	{r4, r5, r6, pc}
   2c198:	4b0c      	ldr	r3, [pc, #48]	; (2c1cc <smp_ident_info+0x84>)
   2c19a:	4a0d      	ldr	r2, [pc, #52]	; (2c1d0 <smp_ident_info+0x88>)
   2c19c:	1a9b      	subs	r3, r3, r2
   2c19e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get keys for %s",
   2c1a0:	f04f 0400 	mov.w	r4, #0
   2c1a4:	2201      	movs	r2, #1
   2c1a6:	f362 0402 	bfi	r4, r2, #0, #3
   2c1aa:	f36f 04c5 	bfc	r4, #3, #3
   2c1ae:	f363 148f 	bfi	r4, r3, #6, #10
   2c1b2:	4628      	mov	r0, r5
   2c1b4:	f7f6 ff84 	bl	230c0 <bt_addr_le_str_real>
   2c1b8:	f7f3 fefe 	bl	1ffb8 <z_log_strdup>
   2c1bc:	4601      	mov	r1, r0
   2c1be:	4622      	mov	r2, r4
   2c1c0:	4804      	ldr	r0, [pc, #16]	; (2c1d4 <smp_ident_info+0x8c>)
   2c1c2:	f7f4 f871 	bl	202a8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   2c1c6:	2008      	movs	r0, #8
   2c1c8:	e7e5      	b.n	2c196 <smp_ident_info+0x4e>
   2c1ca:	bf00      	nop
   2c1cc:	0003d214 	.word	0x0003d214
   2c1d0:	0003d1a4 	.word	0x0003d1a4
   2c1d4:	00040310 	.word	0x00040310

0002c1d8 <smp_encrypt_info>:
{
   2c1d8:	b570      	push	{r4, r5, r6, lr}
   2c1da:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c1dc:	f3bf 8f5b 	dmb	ish
   2c1e0:	6843      	ldr	r3, [r0, #4]
   2c1e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2c1e6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2c1ea:	d00f      	beq.n	2c20c <smp_encrypt_info+0x34>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   2c1ec:	688e      	ldr	r6, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   2c1ee:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   2c1f2:	f103 0588 	add.w	r5, r3, #136	; 0x88
   2c1f6:	462a      	mov	r2, r5
   2c1f8:	7a19      	ldrb	r1, [r3, #8]
   2c1fa:	2004      	movs	r0, #4
   2c1fc:	f00e fad9 	bl	3a7b2 <bt_keys_get_type>
		if (!keys) {
   2c200:	b190      	cbz	r0, 2c228 <smp_encrypt_info+0x50>
		memcpy(keys->ltk.val, req->ltk, 16);
   2c202:	2210      	movs	r2, #16
   2c204:	4631      	mov	r1, r6
   2c206:	301a      	adds	r0, #26
   2c208:	f00a fdac 	bl	36d64 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c20c:	f3bf 8f5b 	dmb	ish
   2c210:	e854 3f00 	ldrex	r3, [r4]
   2c214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c218:	e844 3200 	strex	r2, r3, [r4]
   2c21c:	2a00      	cmp	r2, #0
   2c21e:	d1f7      	bne.n	2c210 <smp_encrypt_info+0x38>
   2c220:	f3bf 8f5b 	dmb	ish
	return 0;
   2c224:	2000      	movs	r0, #0
}
   2c226:	bd70      	pop	{r4, r5, r6, pc}
   2c228:	4b0c      	ldr	r3, [pc, #48]	; (2c25c <smp_encrypt_info+0x84>)
   2c22a:	4a0d      	ldr	r2, [pc, #52]	; (2c260 <smp_encrypt_info+0x88>)
   2c22c:	1a9b      	subs	r3, r3, r2
   2c22e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get keys for %s",
   2c230:	f04f 0400 	mov.w	r4, #0
   2c234:	2201      	movs	r2, #1
   2c236:	f362 0402 	bfi	r4, r2, #0, #3
   2c23a:	f36f 04c5 	bfc	r4, #3, #3
   2c23e:	f363 148f 	bfi	r4, r3, #6, #10
   2c242:	4628      	mov	r0, r5
   2c244:	f7f6 ff3c 	bl	230c0 <bt_addr_le_str_real>
   2c248:	f7f3 feb6 	bl	1ffb8 <z_log_strdup>
   2c24c:	4601      	mov	r1, r0
   2c24e:	4622      	mov	r2, r4
   2c250:	4804      	ldr	r0, [pc, #16]	; (2c264 <smp_encrypt_info+0x8c>)
   2c252:	f7f4 f829 	bl	202a8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   2c256:	2008      	movs	r0, #8
   2c258:	e7e5      	b.n	2c226 <smp_encrypt_info+0x4e>
   2c25a:	bf00      	nop
   2c25c:	0003d214 	.word	0x0003d214
   2c260:	0003d1a4 	.word	0x0003d1a4
   2c264:	00040310 	.word	0x00040310

0002c268 <bt_smp_connected>:
{
   2c268:	b510      	push	{r4, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2c26a:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
	k_work_init_delayable(&smp->work, smp_timeout);
   2c26e:	4904      	ldr	r1, [pc, #16]	; (2c280 <bt_smp_connected+0x18>)
   2c270:	30e8      	adds	r0, #232	; 0xe8
   2c272:	f010 f96b 	bl	3c54c <k_work_init_delayable>
	smp_reset(smp);
   2c276:	4620      	mov	r0, r4
   2c278:	f00d fcf6 	bl	39c68 <smp_reset>
}
   2c27c:	bd10      	pop	{r4, pc}
   2c27e:	bf00      	nop
   2c280:	0002c901 	.word	0x0002c901

0002c284 <smp_pairing_complete>:
{
   2c284:	b570      	push	{r4, r5, r6, lr}
   2c286:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2c288:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	if (!status) {
   2c28c:	2900      	cmp	r1, #0
   2c28e:	d037      	beq.n	2c300 <smp_pairing_complete+0x7c>
   2c290:	4608      	mov	r0, r1
		enum bt_security_err security_err = security_err_get(status);
   2c292:	f00d fbb2 	bl	399fa <security_err_get>
   2c296:	4606      	mov	r6, r0
		if (conn->le.keys &&
   2c298:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2c29c:	b183      	cbz	r3, 2c2c0 <smp_pairing_complete+0x3c>
		    (!conn->le.keys->enc_size ||
   2c29e:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys &&
   2c2a0:	b13b      	cbz	r3, 2c2b2 <smp_pairing_complete+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c2a2:	f3bf 8f5b 	dmb	ish
   2c2a6:	6863      	ldr	r3, [r4, #4]
   2c2a8:	f3bf 8f5b 	dmb	ish
		    (!conn->le.keys->enc_size ||
   2c2ac:	f013 0f04 	tst.w	r3, #4
   2c2b0:	d006      	beq.n	2c2c0 <smp_pairing_complete+0x3c>
			bt_keys_clear(conn->le.keys);
   2c2b2:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   2c2b6:	f00e fa91 	bl	3a7dc <bt_keys_clear>
			conn->le.keys = NULL;
   2c2ba:	2300      	movs	r3, #0
   2c2bc:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
   2c2c0:	f3bf 8f5b 	dmb	ish
   2c2c4:	6863      	ldr	r3, [r4, #4]
   2c2c6:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2c2ca:	f013 0f04 	tst.w	r3, #4
   2c2ce:	d028      	beq.n	2c322 <smp_pairing_complete+0x9e>
   2c2d0:	f3bf 8f5b 	dmb	ish
   2c2d4:	6863      	ldr	r3, [r4, #4]
   2c2d6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c2da:	f013 0f08 	tst.w	r3, #8
   2c2de:	d007      	beq.n	2c2f0 <smp_pairing_complete+0x6c>
   2c2e0:	4b16      	ldr	r3, [pc, #88]	; (2c33c <smp_pairing_complete+0xb8>)
   2c2e2:	681b      	ldr	r3, [r3, #0]
   2c2e4:	b123      	cbz	r3, 2c2f0 <smp_pairing_complete+0x6c>
		    bt_auth && bt_auth->pairing_failed) {
   2c2e6:	69db      	ldr	r3, [r3, #28]
   2c2e8:	b113      	cbz	r3, 2c2f0 <smp_pairing_complete+0x6c>
			bt_auth->pairing_failed(conn, security_err);
   2c2ea:	4631      	mov	r1, r6
   2c2ec:	4628      	mov	r0, r5
   2c2ee:	4798      	blx	r3
	smp_reset(smp);
   2c2f0:	4620      	mov	r0, r4
   2c2f2:	f00d fcb9 	bl	39c68 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   2c2f6:	7a6a      	ldrb	r2, [r5, #9]
   2c2f8:	7aab      	ldrb	r3, [r5, #10]
   2c2fa:	429a      	cmp	r2, r3
   2c2fc:	d11a      	bne.n	2c334 <smp_pairing_complete+0xb0>
}
   2c2fe:	bd70      	pop	{r4, r5, r6, pc}
   2c300:	f3bf 8f5b 	dmb	ish
   2c304:	6841      	ldr	r1, [r0, #4]
   2c306:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c30a:	f3c1 3140 	ubfx	r1, r1, #13, #1
		if (bt_auth && bt_auth->pairing_complete) {
   2c30e:	4b0b      	ldr	r3, [pc, #44]	; (2c33c <smp_pairing_complete+0xb8>)
   2c310:	681b      	ldr	r3, [r3, #0]
   2c312:	2b00      	cmp	r3, #0
   2c314:	d0ec      	beq.n	2c2f0 <smp_pairing_complete+0x6c>
   2c316:	699b      	ldr	r3, [r3, #24]
   2c318:	2b00      	cmp	r3, #0
   2c31a:	d0e9      	beq.n	2c2f0 <smp_pairing_complete+0x6c>
			bt_auth->pairing_complete(conn, bond_flag);
   2c31c:	4628      	mov	r0, r5
   2c31e:	4798      	blx	r3
   2c320:	e7e6      	b.n	2c2f0 <smp_pairing_complete+0x6c>
			bt_conn_security_changed(conn,
   2c322:	4630      	mov	r0, r6
   2c324:	f00d fba1 	bl	39a6a <hci_err_get>
   2c328:	4601      	mov	r1, r0
   2c32a:	4632      	mov	r2, r6
   2c32c:	4628      	mov	r0, r5
   2c32e:	f7fb f839 	bl	273a4 <bt_conn_security_changed>
   2c332:	e7cd      	b.n	2c2d0 <smp_pairing_complete+0x4c>
		bt_smp_start_security(conn);
   2c334:	4628      	mov	r0, r5
   2c336:	f00e f849 	bl	3a3cc <bt_smp_start_security>
}
   2c33a:	e7e0      	b.n	2c2fe <smp_pairing_complete+0x7a>
   2c33c:	20008274 	.word	0x20008274

0002c340 <bt_smp_recv>:
{
   2c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   2c342:	898b      	ldrh	r3, [r1, #12]
   2c344:	2b00      	cmp	r3, #0
   2c346:	d046      	beq.n	2c3d6 <bt_smp_recv+0x96>
   2c348:	4604      	mov	r4, r0
   2c34a:	460d      	mov	r5, r1
   2c34c:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	return net_buf_simple_pull_mem(&buf->b, len);
   2c350:	2101      	movs	r1, #1
   2c352:	f105 0008 	add.w	r0, r5, #8
   2c356:	f00e fbdd 	bl	3ab14 <net_buf_simple_pull_mem>
   2c35a:	4607      	mov	r7, r0
   2c35c:	f3bf 8f5b 	dmb	ish
   2c360:	f854 3cec 	ldr.w	r3, [r4, #-236]
   2c364:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c368:	f013 0f10 	tst.w	r3, #16
   2c36c:	d145      	bne.n	2c3fa <bt_smp_recv+0xba>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   2c36e:	7801      	ldrb	r1, [r0, #0]
   2c370:	290e      	cmp	r1, #14
   2c372:	d854      	bhi.n	2c41e <bt_smp_recv+0xde>
	if (!handlers[hdr->code].func) {
   2c374:	4b54      	ldr	r3, [pc, #336]	; (2c4c8 <bt_smp_recv+0x188>)
   2c376:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   2c37a:	2b00      	cmp	r3, #0
   2c37c:	d060      	beq.n	2c440 <bt_smp_recv+0x100>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   2c37e:	3cf0      	subs	r4, #240	; 0xf0
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c380:	f001 031f 	and.w	r3, r1, #31
   2c384:	2201      	movs	r2, #1
   2c386:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c388:	094b      	lsrs	r3, r1, #5
   2c38a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   2c38e:	43d1      	mvns	r1, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c390:	f3bf 8f5b 	dmb	ish
   2c394:	e854 3f00 	ldrex	r3, [r4]
   2c398:	ea03 0001 	and.w	r0, r3, r1
   2c39c:	e844 0c00 	strex	ip, r0, [r4]
   2c3a0:	f1bc 0f00 	cmp.w	ip, #0
   2c3a4:	d1f6      	bne.n	2c394 <bt_smp_recv+0x54>
   2c3a6:	f3bf 8f5b 	dmb	ish
   2c3aa:	421a      	tst	r2, r3
   2c3ac:	d05d      	beq.n	2c46a <bt_smp_recv+0x12a>
	if (buf->len != handlers[hdr->code].expect_len) {
   2c3ae:	89a9      	ldrh	r1, [r5, #12]
   2c3b0:	783a      	ldrb	r2, [r7, #0]
   2c3b2:	4b45      	ldr	r3, [pc, #276]	; (2c4c8 <bt_smp_recv+0x188>)
   2c3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2c3b8:	791b      	ldrb	r3, [r3, #4]
   2c3ba:	4299      	cmp	r1, r3
   2c3bc:	d16e      	bne.n	2c49c <bt_smp_recv+0x15c>
	err = handlers[hdr->code].func(smp, buf);
   2c3be:	4b42      	ldr	r3, [pc, #264]	; (2c4c8 <bt_smp_recv+0x188>)
   2c3c0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   2c3c4:	4629      	mov	r1, r5
   2c3c6:	4630      	mov	r0, r6
   2c3c8:	4798      	blx	r3
	if (err) {
   2c3ca:	4601      	mov	r1, r0
   2c3cc:	b198      	cbz	r0, 2c3f6 <bt_smp_recv+0xb6>
		smp_error(smp, err);
   2c3ce:	4630      	mov	r0, r6
   2c3d0:	f00e f853 	bl	3a47a <smp_error>
   2c3d4:	e00f      	b.n	2c3f6 <bt_smp_recv+0xb6>
   2c3d6:	4b3d      	ldr	r3, [pc, #244]	; (2c4cc <bt_smp_recv+0x18c>)
   2c3d8:	4a3d      	ldr	r2, [pc, #244]	; (2c4d0 <bt_smp_recv+0x190>)
   2c3da:	1a9b      	subs	r3, r3, r2
   2c3dc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small SMP PDU received");
   2c3de:	f04f 0100 	mov.w	r1, #0
   2c3e2:	2201      	movs	r2, #1
   2c3e4:	f362 0102 	bfi	r1, r2, #0, #3
   2c3e8:	f36f 01c5 	bfc	r1, #3, #3
   2c3ec:	f363 118f 	bfi	r1, r3, #6, #10
   2c3f0:	4838      	ldr	r0, [pc, #224]	; (2c4d4 <bt_smp_recv+0x194>)
   2c3f2:	f7f4 f80f 	bl	20414 <log_0>
}
   2c3f6:	2000      	movs	r0, #0
   2c3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c3fa:	4b34      	ldr	r3, [pc, #208]	; (2c4cc <bt_smp_recv+0x18c>)
   2c3fc:	4a34      	ldr	r2, [pc, #208]	; (2c4d0 <bt_smp_recv+0x190>)
   2c3fe:	1a9b      	subs	r3, r3, r2
   2c400:	08db      	lsrs	r3, r3, #3
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   2c402:	f04f 0200 	mov.w	r2, #0
   2c406:	2102      	movs	r1, #2
   2c408:	f361 0202 	bfi	r2, r1, #0, #3
   2c40c:	f36f 02c5 	bfc	r2, #3, #3
   2c410:	f363 128f 	bfi	r2, r3, #6, #10
   2c414:	7801      	ldrb	r1, [r0, #0]
   2c416:	4830      	ldr	r0, [pc, #192]	; (2c4d8 <bt_smp_recv+0x198>)
   2c418:	f7f3 ff46 	bl	202a8 <log_1>
		return 0;
   2c41c:	e7eb      	b.n	2c3f6 <bt_smp_recv+0xb6>
   2c41e:	4b2b      	ldr	r3, [pc, #172]	; (2c4cc <bt_smp_recv+0x18c>)
   2c420:	4a2b      	ldr	r2, [pc, #172]	; (2c4d0 <bt_smp_recv+0x190>)
   2c422:	1a9b      	subs	r3, r3, r2
   2c424:	08db      	lsrs	r3, r3, #3
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   2c426:	f04f 0200 	mov.w	r2, #0
   2c42a:	2002      	movs	r0, #2
   2c42c:	f360 0202 	bfi	r2, r0, #0, #3
   2c430:	f36f 02c5 	bfc	r2, #3, #3
   2c434:	f363 128f 	bfi	r2, r3, #6, #10
   2c438:	4828      	ldr	r0, [pc, #160]	; (2c4dc <bt_smp_recv+0x19c>)
   2c43a:	f7f3 ff35 	bl	202a8 <log_1>
		return 0;
   2c43e:	e7da      	b.n	2c3f6 <bt_smp_recv+0xb6>
   2c440:	4b22      	ldr	r3, [pc, #136]	; (2c4cc <bt_smp_recv+0x18c>)
   2c442:	4a23      	ldr	r2, [pc, #140]	; (2c4d0 <bt_smp_recv+0x190>)
   2c444:	1a9b      	subs	r3, r3, r2
   2c446:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   2c448:	f04f 0200 	mov.w	r2, #0
   2c44c:	2002      	movs	r0, #2
   2c44e:	f360 0202 	bfi	r2, r0, #0, #3
   2c452:	f36f 02c5 	bfc	r2, #3, #3
   2c456:	f363 128f 	bfi	r2, r3, #6, #10
   2c45a:	4821      	ldr	r0, [pc, #132]	; (2c4e0 <bt_smp_recv+0x1a0>)
   2c45c:	f7f3 ff24 	bl	202a8 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   2c460:	2107      	movs	r1, #7
   2c462:	4630      	mov	r0, r6
   2c464:	f00e f809 	bl	3a47a <smp_error>
		return 0;
   2c468:	e7c5      	b.n	2c3f6 <bt_smp_recv+0xb6>
   2c46a:	4b18      	ldr	r3, [pc, #96]	; (2c4cc <bt_smp_recv+0x18c>)
   2c46c:	4a18      	ldr	r2, [pc, #96]	; (2c4d0 <bt_smp_recv+0x190>)
   2c46e:	1a9b      	subs	r3, r3, r2
   2c470:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   2c472:	f04f 0200 	mov.w	r2, #0
   2c476:	2102      	movs	r1, #2
   2c478:	f361 0202 	bfi	r2, r1, #0, #3
   2c47c:	f36f 02c5 	bfc	r2, #3, #3
   2c480:	f363 128f 	bfi	r2, r3, #6, #10
   2c484:	7839      	ldrb	r1, [r7, #0]
   2c486:	4817      	ldr	r0, [pc, #92]	; (2c4e4 <bt_smp_recv+0x1a4>)
   2c488:	f7f3 ff0e 	bl	202a8 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   2c48c:	783b      	ldrb	r3, [r7, #0]
   2c48e:	2b05      	cmp	r3, #5
   2c490:	d0b1      	beq.n	2c3f6 <bt_smp_recv+0xb6>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2c492:	2108      	movs	r1, #8
   2c494:	4630      	mov	r0, r6
   2c496:	f00d fff0 	bl	3a47a <smp_error>
		return 0;
   2c49a:	e7ac      	b.n	2c3f6 <bt_smp_recv+0xb6>
   2c49c:	480b      	ldr	r0, [pc, #44]	; (2c4cc <bt_smp_recv+0x18c>)
   2c49e:	4b0c      	ldr	r3, [pc, #48]	; (2c4d0 <bt_smp_recv+0x190>)
   2c4a0:	1ac0      	subs	r0, r0, r3
   2c4a2:	08c0      	lsrs	r0, r0, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   2c4a4:	f04f 0300 	mov.w	r3, #0
   2c4a8:	2401      	movs	r4, #1
   2c4aa:	f364 0302 	bfi	r3, r4, #0, #3
   2c4ae:	f36f 03c5 	bfc	r3, #3, #3
   2c4b2:	f360 138f 	bfi	r3, r0, #6, #10
   2c4b6:	480c      	ldr	r0, [pc, #48]	; (2c4e8 <bt_smp_recv+0x1a8>)
   2c4b8:	f7f3 ff2c 	bl	20314 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   2c4bc:	210a      	movs	r1, #10
   2c4be:	4630      	mov	r0, r6
   2c4c0:	f00d ffdb 	bl	3a47a <smp_error>
		return 0;
   2c4c4:	e797      	b.n	2c3f6 <bt_smp_recv+0xb6>
   2c4c6:	bf00      	nop
   2c4c8:	00040468 	.word	0x00040468
   2c4cc:	0003d214 	.word	0x0003d214
   2c4d0:	0003d1a4 	.word	0x0003d1a4
   2c4d4:	0004032c 	.word	0x0004032c
   2c4d8:	00040348 	.word	0x00040348
   2c4dc:	0004037c 	.word	0x0004037c
   2c4e0:	000403a0 	.word	0x000403a0
   2c4e4:	000403bc 	.word	0x000403bc
   2c4e8:	0003fc6c 	.word	0x0003fc6c

0002c4ec <bt_smp_pkey_ready>:
{
   2c4ec:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   2c4ee:	4b24      	ldr	r3, [pc, #144]	; (2c580 <bt_smp_pkey_ready+0x94>)
   2c4f0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   2c4f2:	b120      	cbz	r0, 2c4fe <bt_smp_pkey_ready+0x12>
	z_impl_k_sem_give(sem);
   2c4f4:	4823      	ldr	r0, [pc, #140]	; (2c584 <bt_smp_pkey_ready+0x98>)
   2c4f6:	f003 feb9 	bl	3026c <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   2c4fa:	2400      	movs	r4, #0
   2c4fc:	e022      	b.n	2c544 <bt_smp_pkey_ready+0x58>
   2c4fe:	4b22      	ldr	r3, [pc, #136]	; (2c588 <bt_smp_pkey_ready+0x9c>)
   2c500:	4a22      	ldr	r2, [pc, #136]	; (2c58c <bt_smp_pkey_ready+0xa0>)
   2c502:	1a9b      	subs	r3, r3, r2
   2c504:	08db      	lsrs	r3, r3, #3
		BT_WARN("Public key not available");
   2c506:	f04f 0100 	mov.w	r1, #0
   2c50a:	2202      	movs	r2, #2
   2c50c:	f362 0102 	bfi	r1, r2, #0, #3
   2c510:	f36f 01c5 	bfc	r1, #3, #3
   2c514:	f363 118f 	bfi	r1, r3, #6, #10
   2c518:	481d      	ldr	r0, [pc, #116]	; (2c590 <bt_smp_pkey_ready+0xa4>)
   2c51a:	f7f3 ff7b 	bl	20414 <log_0>
}
   2c51e:	bd38      	pop	{r3, r4, r5, pc}
			atomic_set_bit(smp->allowed_cmds,
   2c520:	eb04 1384 	add.w	r3, r4, r4, lsl #6
   2c524:	4a1b      	ldr	r2, [pc, #108]	; (2c594 <bt_smp_pkey_ready+0xa8>)
   2c526:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c52a:	f3bf 8f5b 	dmb	ish
   2c52e:	e853 2f00 	ldrex	r2, [r3]
   2c532:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   2c536:	e843 2100 	strex	r1, r2, [r3]
   2c53a:	2900      	cmp	r1, #0
   2c53c:	d1f7      	bne.n	2c52e <bt_smp_pkey_ready+0x42>
   2c53e:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   2c542:	3401      	adds	r4, #1
   2c544:	2c13      	cmp	r4, #19
   2c546:	dcea      	bgt.n	2c51e <bt_smp_pkey_ready+0x32>
		struct bt_smp *smp = &bt_smp_pool[i];
   2c548:	eb04 1584 	add.w	r5, r4, r4, lsl #6
   2c54c:	4b11      	ldr	r3, [pc, #68]	; (2c594 <bt_smp_pkey_ready+0xa8>)
   2c54e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c552:	f3bf 8f5b 	dmb	ish
   2c556:	686b      	ldr	r3, [r5, #4]
   2c558:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   2c55c:	f013 0f40 	tst.w	r3, #64	; 0x40
   2c560:	d0ef      	beq.n	2c542 <bt_smp_pkey_ready+0x56>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2c562:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   2c566:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c568:	2b00      	cmp	r3, #0
   2c56a:	d1ea      	bne.n	2c542 <bt_smp_pkey_ready+0x56>
			err = sc_send_public_key(smp);
   2c56c:	4628      	mov	r0, r5
   2c56e:	f7fe fb41 	bl	2abf4 <sc_send_public_key>
			if (err) {
   2c572:	4601      	mov	r1, r0
   2c574:	2800      	cmp	r0, #0
   2c576:	d0d3      	beq.n	2c520 <bt_smp_pkey_ready+0x34>
				smp_error(smp, err);
   2c578:	4628      	mov	r0, r5
   2c57a:	f00d ff7e 	bl	3a47a <smp_error>
   2c57e:	e7cf      	b.n	2c520 <bt_smp_pkey_ready+0x34>
   2c580:	20008854 	.word	0x20008854
   2c584:	20000b50 	.word	0x20000b50
   2c588:	0003d214 	.word	0x0003d214
   2c58c:	0003d1a4 	.word	0x0003d1a4
   2c590:	000403d8 	.word	0x000403d8
   2c594:	20004218 	.word	0x20004218

0002c598 <smp_ident_addr_info>:
{
   2c598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c59c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2c59e:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   2c5a2:	688e      	ldr	r6, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   2c5a4:	7833      	ldrb	r3, [r6, #0]
   2c5a6:	b123      	cbz	r3, 2c5b2 <smp_ident_addr_info+0x1a>
	return BT_ADDR_IS_STATIC(&addr->a);
   2c5a8:	79b3      	ldrb	r3, [r6, #6]
   2c5aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_identity(&req->addr)) {
   2c5ae:	2bc0      	cmp	r3, #192	; 0xc0
   2c5b0:	d143      	bne.n	2c63a <smp_ident_addr_info+0xa2>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   2c5b2:	f105 0788 	add.w	r7, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   2c5b6:	2207      	movs	r2, #7
   2c5b8:	4631      	mov	r1, r6
   2c5ba:	4638      	mov	r0, r7
   2c5bc:	f00a fba5 	bl	36d0a <memcmp>
   2c5c0:	b178      	cbz	r0, 2c5e2 <smp_ident_addr_info+0x4a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   2c5c2:	4631      	mov	r1, r6
   2c5c4:	7a28      	ldrb	r0, [r5, #8]
   2c5c6:	f000 fb6d 	bl	2cca4 <bt_keys_find_addr>
		if (keys) {
   2c5ca:	4680      	mov	r8, r0
   2c5cc:	b148      	cbz	r0, 2c5e2 <smp_ident_addr_info+0x4a>
			if (!update_keys_check(smp, keys)) {
   2c5ce:	4601      	mov	r1, r0
   2c5d0:	4620      	mov	r0, r4
   2c5d2:	f00d faee 	bl	39bb2 <update_keys_check>
   2c5d6:	2800      	cmp	r0, #0
   2c5d8:	f000 80bb 	beq.w	2c752 <smp_ident_addr_info+0x1ba>
			bt_keys_clear(keys);
   2c5dc:	4640      	mov	r0, r8
   2c5de:	f00e f8fd 	bl	3a7dc <bt_keys_clear>
   2c5e2:	f3bf 8f5b 	dmb	ish
   2c5e6:	6863      	ldr	r3, [r4, #4]
   2c5e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2c5ec:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2c5f0:	d150      	bne.n	2c694 <smp_ident_addr_info+0xfc>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   2c5f2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2c5f6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   2c5fa:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2c5fe:	f013 0f04 	tst.w	r3, #4
   2c602:	d00b      	beq.n	2c61c <smp_ident_addr_info+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c604:	f3bf 8f5b 	dmb	ish
   2c608:	e854 3f00 	ldrex	r3, [r4]
   2c60c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2c610:	e844 3200 	strex	r2, r3, [r4]
   2c614:	2a00      	cmp	r2, #0
   2c616:	d1f7      	bne.n	2c608 <smp_ident_addr_info+0x70>
   2c618:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   2c61c:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c61e:	b923      	cbnz	r3, 2c62a <smp_ident_addr_info+0x92>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   2c620:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2c624:	2b00      	cmp	r3, #0
   2c626:	f000 8087 	beq.w	2c738 <smp_ident_addr_info+0x1a0>
	if (!smp->local_dist && !smp->remote_dist) {
   2c62a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   2c62e:	2b00      	cmp	r3, #0
   2c630:	f000 8089 	beq.w	2c746 <smp_ident_addr_info+0x1ae>
	return 0;
   2c634:	2000      	movs	r0, #0
}
   2c636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c63a:	4c47      	ldr	r4, [pc, #284]	; (2c758 <smp_ident_addr_info+0x1c0>)
   2c63c:	4b47      	ldr	r3, [pc, #284]	; (2c75c <smp_ident_addr_info+0x1c4>)
   2c63e:	1ae4      	subs	r4, r4, r3
   2c640:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   2c642:	f04f 0801 	mov.w	r8, #1
   2c646:	f04f 0700 	mov.w	r7, #0
   2c64a:	f368 0702 	bfi	r7, r8, #0, #3
   2c64e:	f36f 07c5 	bfc	r7, #3, #3
   2c652:	f364 178f 	bfi	r7, r4, #6, #10
   2c656:	4630      	mov	r0, r6
   2c658:	f7f6 fd32 	bl	230c0 <bt_addr_le_str_real>
   2c65c:	f7f3 fcac 	bl	1ffb8 <z_log_strdup>
   2c660:	4601      	mov	r1, r0
   2c662:	463a      	mov	r2, r7
   2c664:	483e      	ldr	r0, [pc, #248]	; (2c760 <smp_ident_addr_info+0x1c8>)
   2c666:	f7f3 fe1f 	bl	202a8 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   2c66a:	f04f 0600 	mov.w	r6, #0
   2c66e:	f368 0602 	bfi	r6, r8, #0, #3
   2c672:	f36f 06c5 	bfc	r6, #3, #3
   2c676:	f364 168f 	bfi	r6, r4, #6, #10
   2c67a:	f105 0088 	add.w	r0, r5, #136	; 0x88
   2c67e:	f7f6 fd1f 	bl	230c0 <bt_addr_le_str_real>
   2c682:	f7f3 fc99 	bl	1ffb8 <z_log_strdup>
   2c686:	4601      	mov	r1, r0
   2c688:	4632      	mov	r2, r6
   2c68a:	4836      	ldr	r0, [pc, #216]	; (2c764 <smp_ident_addr_info+0x1cc>)
   2c68c:	f7f3 fe0c 	bl	202a8 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   2c690:	200a      	movs	r0, #10
   2c692:	e7d0      	b.n	2c636 <smp_ident_addr_info+0x9e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   2c694:	463a      	mov	r2, r7
   2c696:	7a29      	ldrb	r1, [r5, #8]
   2c698:	2002      	movs	r0, #2
   2c69a:	f00e f88a 	bl	3a7b2 <bt_keys_get_type>
		if (!keys) {
   2c69e:	4680      	mov	r8, r0
   2c6a0:	b178      	cbz	r0, 2c6c2 <smp_ident_addr_info+0x12a>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c6a2:	78eb      	ldrb	r3, [r5, #3]
   2c6a4:	bb33      	cbnz	r3, 2c6f4 <smp_ident_addr_info+0x15c>
			dst = &conn->le.resp_addr;
   2c6a6:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2c6aa:	780b      	ldrb	r3, [r1, #0]
   2c6ac:	2b01      	cmp	r3, #1
   2c6ae:	d104      	bne.n	2c6ba <smp_ident_addr_info+0x122>
	return BT_ADDR_IS_RPA(&addr->a);
   2c6b0:	798b      	ldrb	r3, [r1, #6]
   2c6b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		if (bt_addr_le_is_rpa(dst)) {
   2c6b6:	2b40      	cmp	r3, #64	; 0x40
   2c6b8:	d01f      	beq.n	2c6fa <smp_ident_addr_info+0x162>
		bt_id_add(keys);
   2c6ba:	4640      	mov	r0, r8
   2c6bc:	f7f9 f9ec 	bl	25a98 <bt_id_add>
   2c6c0:	e797      	b.n	2c5f2 <smp_ident_addr_info+0x5a>
   2c6c2:	4b25      	ldr	r3, [pc, #148]	; (2c758 <smp_ident_addr_info+0x1c0>)
   2c6c4:	4a25      	ldr	r2, [pc, #148]	; (2c75c <smp_ident_addr_info+0x1c4>)
   2c6c6:	1a9b      	subs	r3, r3, r2
   2c6c8:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get keys for %s",
   2c6ca:	f04f 0400 	mov.w	r4, #0
   2c6ce:	2201      	movs	r2, #1
   2c6d0:	f362 0402 	bfi	r4, r2, #0, #3
   2c6d4:	f36f 04c5 	bfc	r4, #3, #3
   2c6d8:	f363 148f 	bfi	r4, r3, #6, #10
   2c6dc:	4638      	mov	r0, r7
   2c6de:	f7f6 fcef 	bl	230c0 <bt_addr_le_str_real>
   2c6e2:	f7f3 fc69 	bl	1ffb8 <z_log_strdup>
   2c6e6:	4601      	mov	r1, r0
   2c6e8:	4622      	mov	r2, r4
   2c6ea:	481f      	ldr	r0, [pc, #124]	; (2c768 <smp_ident_addr_info+0x1d0>)
   2c6ec:	f7f3 fddc 	bl	202a8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   2c6f0:	2008      	movs	r0, #8
   2c6f2:	e7a0      	b.n	2c636 <smp_ident_addr_info+0x9e>
			dst = &conn->le.init_addr;
   2c6f4:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   2c6f8:	e7d7      	b.n	2c6aa <smp_ident_addr_info+0x112>
	memcpy(dst, src, sizeof(*dst));
   2c6fa:	2206      	movs	r2, #6
   2c6fc:	3101      	adds	r1, #1
   2c6fe:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   2c702:	f00a fb2f 	bl	36d64 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   2c706:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   2c70a:	2b00      	cmp	r3, #0
   2c70c:	d0d5      	beq.n	2c6ba <smp_ident_addr_info+0x122>
	return BT_ADDR_IS_STATIC(&addr->a);
   2c70e:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   2c712:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   2c716:	2bc0      	cmp	r3, #192	; 0xc0
   2c718:	d0cf      	beq.n	2c6ba <smp_ident_addr_info+0x122>
	memcpy(dst, src, sizeof(*dst));
   2c71a:	2207      	movs	r2, #7
   2c71c:	4631      	mov	r1, r6
   2c71e:	f108 0001 	add.w	r0, r8, #1
   2c722:	f00a fb1f 	bl	36d64 <memcpy>
   2c726:	2207      	movs	r2, #7
   2c728:	4631      	mov	r1, r6
   2c72a:	4638      	mov	r0, r7
   2c72c:	f00a fb1a 	bl	36d64 <memcpy>
				bt_conn_identity_resolved(conn);
   2c730:	4628      	mov	r0, r5
   2c732:	f7fa fe09 	bl	27348 <bt_conn_identity_resolved>
   2c736:	e7c0      	b.n	2c6ba <smp_ident_addr_info+0x122>
		err = bt_smp_distribute_keys(smp);
   2c738:	4620      	mov	r0, r4
   2c73a:	f7ff f985 	bl	2ba48 <bt_smp_distribute_keys>
		if (err) {
   2c73e:	2800      	cmp	r0, #0
   2c740:	f43f af73 	beq.w	2c62a <smp_ident_addr_info+0x92>
   2c744:	e777      	b.n	2c636 <smp_ident_addr_info+0x9e>
		smp_pairing_complete(smp, 0);
   2c746:	2100      	movs	r1, #0
   2c748:	4620      	mov	r0, r4
   2c74a:	f7ff fd9b 	bl	2c284 <smp_pairing_complete>
	return 0;
   2c74e:	2000      	movs	r0, #0
   2c750:	e771      	b.n	2c636 <smp_ident_addr_info+0x9e>
				return BT_SMP_ERR_UNSPECIFIED;
   2c752:	2008      	movs	r0, #8
   2c754:	e76f      	b.n	2c636 <smp_ident_addr_info+0x9e>
   2c756:	bf00      	nop
   2c758:	0003d214 	.word	0x0003d214
   2c75c:	0003d1a4 	.word	0x0003d1a4
   2c760:	000403f4 	.word	0x000403f4
   2c764:	00040408 	.word	0x00040408
   2c768:	00040310 	.word	0x00040310

0002c76c <smp_central_ident>:
{
   2c76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c770:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2c772:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c776:	f3bf 8f5b 	dmb	ish
   2c77a:	6843      	ldr	r3, [r0, #4]
   2c77c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2c780:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2c784:	d118      	bne.n	2c7b8 <smp_central_ident+0x4c>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   2c786:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2c78a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   2c78e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2c792:	f013 0f02 	tst.w	r3, #2
   2c796:	d13e      	bne.n	2c816 <smp_central_ident+0xaa>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2c798:	f013 0f04 	tst.w	r3, #4
   2c79c:	d047      	beq.n	2c82e <smp_central_ident+0xc2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c79e:	f3bf 8f5b 	dmb	ish
   2c7a2:	e854 3f00 	ldrex	r3, [r4]
   2c7a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2c7aa:	e844 3200 	strex	r2, r3, [r4]
   2c7ae:	2a00      	cmp	r2, #0
   2c7b0:	d1f7      	bne.n	2c7a2 <smp_central_ident+0x36>
   2c7b2:	f3bf 8f5b 	dmb	ish
}
   2c7b6:	e03a      	b.n	2c82e <smp_central_ident+0xc2>
		struct bt_smp_central_ident *req = (void *)buf->data;
   2c7b8:	688f      	ldr	r7, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   2c7ba:	f105 0888 	add.w	r8, r5, #136	; 0x88
   2c7be:	4642      	mov	r2, r8
   2c7c0:	7a29      	ldrb	r1, [r5, #8]
   2c7c2:	2004      	movs	r0, #4
   2c7c4:	f00d fff5 	bl	3a7b2 <bt_keys_get_type>
		if (!keys) {
   2c7c8:	4606      	mov	r6, r0
   2c7ca:	b158      	cbz	r0, 2c7e4 <smp_central_ident+0x78>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   2c7cc:	2202      	movs	r2, #2
   2c7ce:	4639      	mov	r1, r7
   2c7d0:	3018      	adds	r0, #24
   2c7d2:	f00a fac7 	bl	36d64 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   2c7d6:	2208      	movs	r2, #8
   2c7d8:	1cb9      	adds	r1, r7, #2
   2c7da:	f106 0010 	add.w	r0, r6, #16
   2c7de:	f00a fac1 	bl	36d64 <memcpy>
   2c7e2:	e7d0      	b.n	2c786 <smp_central_ident+0x1a>
   2c7e4:	4b1d      	ldr	r3, [pc, #116]	; (2c85c <smp_central_ident+0xf0>)
   2c7e6:	4a1e      	ldr	r2, [pc, #120]	; (2c860 <smp_central_ident+0xf4>)
   2c7e8:	1a9b      	subs	r3, r3, r2
   2c7ea:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get keys for %s",
   2c7ec:	f04f 0400 	mov.w	r4, #0
   2c7f0:	2201      	movs	r2, #1
   2c7f2:	f362 0402 	bfi	r4, r2, #0, #3
   2c7f6:	f36f 04c5 	bfc	r4, #3, #3
   2c7fa:	f363 148f 	bfi	r4, r3, #6, #10
   2c7fe:	4640      	mov	r0, r8
   2c800:	f7f6 fc5e 	bl	230c0 <bt_addr_le_str_real>
   2c804:	f7f3 fbd8 	bl	1ffb8 <z_log_strdup>
   2c808:	4601      	mov	r1, r0
   2c80a:	4622      	mov	r2, r4
   2c80c:	4815      	ldr	r0, [pc, #84]	; (2c864 <smp_central_ident+0xf8>)
   2c80e:	f7f3 fd4b 	bl	202a8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   2c812:	2008      	movs	r0, #8
   2c814:	e014      	b.n	2c840 <smp_central_ident+0xd4>
   2c816:	f3bf 8f5b 	dmb	ish
   2c81a:	e854 3f00 	ldrex	r3, [r4]
   2c81e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2c822:	e844 3200 	strex	r2, r3, [r4]
   2c826:	2a00      	cmp	r2, #0
   2c828:	d1f7      	bne.n	2c81a <smp_central_ident+0xae>
   2c82a:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   2c82e:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c830:	b913      	cbnz	r3, 2c838 <smp_central_ident+0xcc>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   2c832:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2c836:	b12b      	cbz	r3, 2c844 <smp_central_ident+0xd8>
	if (!smp->local_dist && !smp->remote_dist) {
   2c838:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   2c83c:	b143      	cbz	r3, 2c850 <smp_central_ident+0xe4>
	return 0;
   2c83e:	2000      	movs	r0, #0
}
   2c840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_smp_distribute_keys(smp);
   2c844:	4620      	mov	r0, r4
   2c846:	f7ff f8ff 	bl	2ba48 <bt_smp_distribute_keys>
		if (err) {
   2c84a:	2800      	cmp	r0, #0
   2c84c:	d0f4      	beq.n	2c838 <smp_central_ident+0xcc>
   2c84e:	e7f7      	b.n	2c840 <smp_central_ident+0xd4>
		smp_pairing_complete(smp, 0);
   2c850:	2100      	movs	r1, #0
   2c852:	4620      	mov	r0, r4
   2c854:	f7ff fd16 	bl	2c284 <smp_pairing_complete>
	return 0;
   2c858:	2000      	movs	r0, #0
   2c85a:	e7f1      	b.n	2c840 <smp_central_ident+0xd4>
   2c85c:	0003d214 	.word	0x0003d214
   2c860:	0003d1a4 	.word	0x0003d1a4
   2c864:	00040310 	.word	0x00040310

0002c868 <smp_pairing_failed>:
{
   2c868:	b570      	push	{r4, r5, r6, lr}
   2c86a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2c86c:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   2c870:	688d      	ldr	r5, [r1, #8]
   2c872:	4b1f      	ldr	r3, [pc, #124]	; (2c8f0 <smp_pairing_failed+0x88>)
   2c874:	4a1f      	ldr	r2, [pc, #124]	; (2c8f4 <smp_pairing_failed+0x8c>)
   2c876:	1a9b      	subs	r3, r3, r2
   2c878:	08db      	lsrs	r3, r3, #3
	BT_ERR("reason 0x%x", req->reason);
   2c87a:	f04f 0200 	mov.w	r2, #0
   2c87e:	2101      	movs	r1, #1
   2c880:	f361 0202 	bfi	r2, r1, #0, #3
   2c884:	f36f 02c5 	bfc	r2, #3, #3
   2c888:	f363 128f 	bfi	r2, r3, #6, #10
   2c88c:	7829      	ldrb	r1, [r5, #0]
   2c88e:	481a      	ldr	r0, [pc, #104]	; (2c8f8 <smp_pairing_failed+0x90>)
   2c890:	f7f3 fd0a 	bl	202a8 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2c894:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c896:	f3bf 8f5b 	dmb	ish
   2c89a:	e853 2f00 	ldrex	r2, [r3]
   2c89e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
   2c8a2:	e843 1000 	strex	r0, r1, [r3]
   2c8a6:	2800      	cmp	r0, #0
   2c8a8:	d1f7      	bne.n	2c89a <smp_pairing_failed+0x32>
   2c8aa:	f3bf 8f5b 	dmb	ish
   2c8ae:	f412 6f80 	tst.w	r2, #1024	; 0x400
   2c8b2:	d007      	beq.n	2c8c4 <smp_pairing_failed+0x5c>
		if (bt_auth && bt_auth->cancel) {
   2c8b4:	4b11      	ldr	r3, [pc, #68]	; (2c8fc <smp_pairing_failed+0x94>)
   2c8b6:	681b      	ldr	r3, [r3, #0]
   2c8b8:	b19b      	cbz	r3, 2c8e2 <smp_pairing_failed+0x7a>
   2c8ba:	691b      	ldr	r3, [r3, #16]
   2c8bc:	b18b      	cbz	r3, 2c8e2 <smp_pairing_failed+0x7a>
			bt_auth->cancel(conn);
   2c8be:	4630      	mov	r0, r6
   2c8c0:	4798      	blx	r3
   2c8c2:	e00e      	b.n	2c8e2 <smp_pairing_failed+0x7a>
   2c8c4:	f3bf 8f5b 	dmb	ish
   2c8c8:	e853 2f00 	ldrex	r2, [r3]
   2c8cc:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
   2c8d0:	e843 1000 	strex	r0, r1, [r3]
   2c8d4:	2800      	cmp	r0, #0
   2c8d6:	d1f7      	bne.n	2c8c8 <smp_pairing_failed+0x60>
   2c8d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2c8dc:	f412 6f00 	tst.w	r2, #2048	; 0x800
   2c8e0:	d1e8      	bne.n	2c8b4 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   2c8e2:	7829      	ldrb	r1, [r5, #0]
   2c8e4:	4620      	mov	r0, r4
   2c8e6:	f7ff fccd 	bl	2c284 <smp_pairing_complete>
}
   2c8ea:	2000      	movs	r0, #0
   2c8ec:	bd70      	pop	{r4, r5, r6, pc}
   2c8ee:	bf00      	nop
   2c8f0:	0003d214 	.word	0x0003d214
   2c8f4:	0003d1a4 	.word	0x0003d1a4
   2c8f8:	00040410 	.word	0x00040410
   2c8fc:	20008274 	.word	0x20008274

0002c900 <smp_timeout>:
{
   2c900:	b538      	push	{r3, r4, r5, lr}
   2c902:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   2c904:	f5a0 75ec 	sub.w	r5, r0, #472	; 0x1d8
   2c908:	4b11      	ldr	r3, [pc, #68]	; (2c950 <smp_timeout+0x50>)
   2c90a:	4a12      	ldr	r2, [pc, #72]	; (2c954 <smp_timeout+0x54>)
   2c90c:	1a9b      	subs	r3, r3, r2
   2c90e:	08db      	lsrs	r3, r3, #3
	BT_ERR("SMP Timeout");
   2c910:	f04f 0100 	mov.w	r1, #0
   2c914:	2201      	movs	r2, #1
   2c916:	f362 0102 	bfi	r1, r2, #0, #3
   2c91a:	f36f 01c5 	bfc	r1, #3, #3
   2c91e:	f363 118f 	bfi	r1, r3, #6, #10
   2c922:	480d      	ldr	r0, [pc, #52]	; (2c958 <smp_timeout+0x58>)
   2c924:	f7f3 fd76 	bl	20414 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2c928:	2108      	movs	r1, #8
   2c92a:	4628      	mov	r0, r5
   2c92c:	f7ff fcaa 	bl	2c284 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2c930:	f5a4 74ea 	sub.w	r4, r4, #468	; 0x1d4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c934:	f3bf 8f5b 	dmb	ish
   2c938:	e854 3f00 	ldrex	r3, [r4]
   2c93c:	f043 0310 	orr.w	r3, r3, #16
   2c940:	e844 3200 	strex	r2, r3, [r4]
   2c944:	2a00      	cmp	r2, #0
   2c946:	d1f7      	bne.n	2c938 <smp_timeout+0x38>
   2c948:	f3bf 8f5b 	dmb	ish
}
   2c94c:	bd38      	pop	{r3, r4, r5, pc}
   2c94e:	bf00      	nop
   2c950:	0003d214 	.word	0x0003d214
   2c954:	0003d1a4 	.word	0x0003d1a4
   2c958:	0004041c 	.word	0x0004041c

0002c95c <bt_smp_update_keys>:
{
   2c95c:	b570      	push	{r4, r5, r6, lr}
   2c95e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2c960:	f7fe f8d4 	bl	2ab0c <smp_chan_get>
	if (!smp) {
   2c964:	2800      	cmp	r0, #0
   2c966:	d06a      	beq.n	2ca3e <bt_smp_update_keys+0xe2>
   2c968:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c96a:	f3bf 8f5b 	dmb	ish
   2c96e:	6843      	ldr	r3, [r0, #4]
   2c970:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2c974:	f013 0f08 	tst.w	r3, #8
   2c978:	d061      	beq.n	2ca3e <bt_smp_update_keys+0xe2>
	if (conn->le.keys) {
   2c97a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c97e:	b108      	cbz	r0, 2c984 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   2c980:	f00d ff2c 	bl	3a7dc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2c984:	f104 0688 	add.w	r6, r4, #136	; 0x88
   2c988:	4631      	mov	r1, r6
   2c98a:	7a20      	ldrb	r0, [r4, #8]
   2c98c:	f000 f896 	bl	2cabc <bt_keys_get_addr>
   2c990:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   2c994:	b1c8      	cbz	r0, 2c9ca <bt_smp_update_keys+0x6e>
   2c996:	f3bf 8f5b 	dmb	ish
   2c99a:	686b      	ldr	r3, [r5, #4]
   2c99c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   2c9a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   2c9a4:	d005      	beq.n	2c9b2 <bt_smp_update_keys+0x56>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   2c9a6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2c9aa:	7b53      	ldrb	r3, [r2, #13]
   2c9ac:	f043 0302 	orr.w	r3, r3, #2
   2c9b0:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   2c9b2:	7a2b      	ldrb	r3, [r5, #8]
   2c9b4:	2b03      	cmp	r3, #3
   2c9b6:	d824      	bhi.n	2ca02 <bt_smp_update_keys+0xa6>
   2c9b8:	b25b      	sxtb	r3, r3
   2c9ba:	bb33      	cbnz	r3, 2ca0a <bt_smp_update_keys+0xae>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2c9bc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2c9c0:	7b53      	ldrb	r3, [r2, #13]
   2c9c2:	f023 0301 	bic.w	r3, r3, #1
   2c9c6:	7353      	strb	r3, [r2, #13]
		break;
   2c9c8:	e025      	b.n	2ca16 <bt_smp_update_keys+0xba>
   2c9ca:	4b32      	ldr	r3, [pc, #200]	; (2ca94 <bt_smp_update_keys+0x138>)
   2c9cc:	4a32      	ldr	r2, [pc, #200]	; (2ca98 <bt_smp_update_keys+0x13c>)
   2c9ce:	1a9b      	subs	r3, r3, r2
   2c9d0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to get keys for %s",
   2c9d2:	f04f 0400 	mov.w	r4, #0
   2c9d6:	2201      	movs	r2, #1
   2c9d8:	f362 0402 	bfi	r4, r2, #0, #3
   2c9dc:	f36f 04c5 	bfc	r4, #3, #3
   2c9e0:	f363 148f 	bfi	r4, r3, #6, #10
   2c9e4:	4630      	mov	r0, r6
   2c9e6:	f7f6 fb6b 	bl	230c0 <bt_addr_le_str_real>
   2c9ea:	f7f3 fae5 	bl	1ffb8 <z_log_strdup>
   2c9ee:	4601      	mov	r1, r0
   2c9f0:	4622      	mov	r2, r4
   2c9f2:	482a      	ldr	r0, [pc, #168]	; (2ca9c <bt_smp_update_keys+0x140>)
   2c9f4:	f7f3 fc58 	bl	202a8 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2c9f8:	2108      	movs	r1, #8
   2c9fa:	4628      	mov	r0, r5
   2c9fc:	f00d fd3d 	bl	3a47a <smp_error>
		return;
   2ca00:	e01d      	b.n	2ca3e <bt_smp_update_keys+0xe2>
	switch (smp->method) {
   2ca02:	3b05      	subs	r3, #5
   2ca04:	b2db      	uxtb	r3, r3
   2ca06:	2b01      	cmp	r3, #1
   2ca08:	d8d8      	bhi.n	2c9bc <bt_smp_update_keys+0x60>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   2ca0a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2ca0e:	7b53      	ldrb	r3, [r2, #13]
   2ca10:	f043 0301 	orr.w	r3, r3, #1
   2ca14:	7353      	strb	r3, [r2, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   2ca16:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
   2ca1a:	4628      	mov	r0, r5
   2ca1c:	f00d f81e 	bl	39a5c <get_encryption_key_size>
   2ca20:	7330      	strb	r0, [r6, #12]
   2ca22:	f3bf 8f5b 	dmb	ish
   2ca26:	686b      	ldr	r3, [r5, #4]
   2ca28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2ca2c:	f013 0f20 	tst.w	r3, #32
   2ca30:	d106      	bne.n	2ca40 <bt_smp_update_keys+0xe4>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   2ca32:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2ca36:	7b53      	ldrb	r3, [r2, #13]
   2ca38:	f023 0310 	bic.w	r3, r3, #16
   2ca3c:	7353      	strb	r3, [r2, #13]
}
   2ca3e:	bd70      	pop	{r4, r5, r6, pc}
		conn->le.keys->flags |= BT_KEYS_SC;
   2ca40:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2ca44:	7b53      	ldrb	r3, [r2, #13]
   2ca46:	f043 0310 	orr.w	r3, r3, #16
   2ca4a:	7353      	strb	r3, [r2, #13]
   2ca4c:	f3bf 8f5b 	dmb	ish
   2ca50:	686b      	ldr	r3, [r5, #4]
   2ca52:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2ca56:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2ca5a:	d0f0      	beq.n	2ca3e <bt_smp_update_keys+0xe2>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   2ca5c:	2120      	movs	r1, #32
   2ca5e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2ca62:	f00d fea2 	bl	3a7aa <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   2ca66:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2ca6a:	2210      	movs	r2, #16
   2ca6c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2ca70:	301a      	adds	r0, #26
   2ca72:	f00a f977 	bl	36d64 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   2ca76:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2ca7a:	2208      	movs	r2, #8
   2ca7c:	2100      	movs	r1, #0
   2ca7e:	3010      	adds	r0, #16
   2ca80:	f00a f994 	bl	36dac <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   2ca84:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2ca88:	2202      	movs	r2, #2
   2ca8a:	2100      	movs	r1, #0
   2ca8c:	3018      	adds	r0, #24
   2ca8e:	f00a f98d 	bl	36dac <memset>
   2ca92:	e7d4      	b.n	2ca3e <bt_smp_update_keys+0xe2>
   2ca94:	0003d214 	.word	0x0003d214
   2ca98:	0003d1a4 	.word	0x0003d1a4
   2ca9c:	00040310 	.word	0x00040310

0002caa0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   2caa0:	b508      	push	{r3, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
   2caa2:	f7fd ff79 	bl	2a998 <le_sc_supported>
   2caa6:	4b03      	ldr	r3, [pc, #12]	; (2cab4 <bt_smp_init+0x14>)
   2caa8:	7018      	strb	r0, [r3, #0]
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   2caaa:	4803      	ldr	r0, [pc, #12]	; (2cab8 <bt_smp_init+0x18>)
   2caac:	f7f9 fe2c 	bl	26708 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   2cab0:	2000      	movs	r0, #0
   2cab2:	bd08      	pop	{r3, pc}
   2cab4:	2000da75 	.word	0x2000da75
   2cab8:	20000818 	.word	0x20000818

0002cabc <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   2cabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cac0:	b082      	sub	sp, #8
   2cac2:	4605      	mov	r5, r0
   2cac4:	460f      	mov	r7, r1
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   2cac6:	f04f 0801 	mov.w	r8, #1

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2caca:	2400      	movs	r4, #0
   2cacc:	2c00      	cmp	r4, #0
   2cace:	dd07      	ble.n	2cae0 <bt_keys_get_addr+0x24>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   2cad0:	f1b8 0f00 	cmp.w	r8, #0
   2cad4:	d02b      	beq.n	2cb2e <bt_keys_get_addr+0x72>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   2cad6:	2600      	movs	r6, #0
}
   2cad8:	4630      	mov	r0, r6
   2cada:	b002      	add	sp, #8
   2cadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys = &key_pool[i];
   2cae0:	4a1a      	ldr	r2, [pc, #104]	; (2cb4c <bt_keys_get_addr+0x90>)
   2cae2:	235c      	movs	r3, #92	; 0x5c
   2cae4:	fb03 f304 	mul.w	r3, r3, r4
   2cae8:	18d6      	adds	r6, r2, r3
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2caea:	5cd3      	ldrb	r3, [r2, r3]
   2caec:	42ab      	cmp	r3, r5
   2caee:	d004      	beq.n	2cafa <bt_keys_get_addr+0x3e>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   2caf0:	f1b8 0f01 	cmp.w	r8, #1
   2caf4:	d00a      	beq.n	2cb0c <bt_keys_get_addr+0x50>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2caf6:	3401      	adds	r4, #1
   2caf8:	e7e8      	b.n	2cacc <bt_keys_get_addr+0x10>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2cafa:	4630      	mov	r0, r6
	return memcmp(a, b, sizeof(*a));
   2cafc:	2207      	movs	r2, #7
   2cafe:	4639      	mov	r1, r7
   2cb00:	3001      	adds	r0, #1
   2cb02:	f00a f902 	bl	36d0a <memcmp>
   2cb06:	2800      	cmp	r0, #0
   2cb08:	d1f2      	bne.n	2caf0 <bt_keys_get_addr+0x34>
   2cb0a:	e7e5      	b.n	2cad8 <bt_keys_get_addr+0x1c>
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   2cb0c:	4b0f      	ldr	r3, [pc, #60]	; (2cb4c <bt_keys_get_addr+0x90>)
   2cb0e:	205c      	movs	r0, #92	; 0x5c
   2cb10:	fb00 3004 	mla	r0, r0, r4, r3
   2cb14:	2300      	movs	r3, #0
   2cb16:	9300      	str	r3, [sp, #0]
   2cb18:	f8cd 3003 	str.w	r3, [sp, #3]
   2cb1c:	2207      	movs	r2, #7
   2cb1e:	4669      	mov	r1, sp
   2cb20:	3001      	adds	r0, #1
   2cb22:	f00a f8f2 	bl	36d0a <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   2cb26:	2800      	cmp	r0, #0
   2cb28:	d1e5      	bne.n	2caf6 <bt_keys_get_addr+0x3a>
			first_free_slot = i;
   2cb2a:	46a0      	mov	r8, r4
   2cb2c:	e7e3      	b.n	2caf6 <bt_keys_get_addr+0x3a>
		keys = &key_pool[first_free_slot];
   2cb2e:	4a07      	ldr	r2, [pc, #28]	; (2cb4c <bt_keys_get_addr+0x90>)
   2cb30:	235c      	movs	r3, #92	; 0x5c
   2cb32:	fb03 f808 	mul.w	r8, r3, r8
   2cb36:	eb02 0608 	add.w	r6, r2, r8
		keys->id = id;
   2cb3a:	f802 5008 	strb.w	r5, [r2, r8]
	memcpy(dst, src, sizeof(*dst));
   2cb3e:	2207      	movs	r2, #7
   2cb40:	4639      	mov	r1, r7
   2cb42:	1c70      	adds	r0, r6, #1
   2cb44:	f00a f90e 	bl	36d64 <memcpy>
		return keys;
   2cb48:	e7c6      	b.n	2cad8 <bt_keys_get_addr+0x1c>
   2cb4a:	bf00      	nop
   2cb4c:	20008858 	.word	0x20008858

0002cb50 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   2cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cb52:	4605      	mov	r5, r0
   2cb54:	460f      	mov	r7, r1
   2cb56:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2cb58:	2400      	movs	r4, #0
   2cb5a:	2c00      	cmp	r4, #0
   2cb5c:	dd00      	ble.n	2cb60 <bt_keys_foreach+0x10>
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   2cb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type)) {
   2cb60:	4a06      	ldr	r2, [pc, #24]	; (2cb7c <bt_keys_foreach+0x2c>)
   2cb62:	235c      	movs	r3, #92	; 0x5c
   2cb64:	fb03 2304 	mla	r3, r3, r4, r2
   2cb68:	89db      	ldrh	r3, [r3, #14]
   2cb6a:	422b      	tst	r3, r5
   2cb6c:	d004      	beq.n	2cb78 <bt_keys_foreach+0x28>
			func(&key_pool[i], data);
   2cb6e:	4631      	mov	r1, r6
   2cb70:	205c      	movs	r0, #92	; 0x5c
   2cb72:	fb00 2004 	mla	r0, r0, r4, r2
   2cb76:	47b8      	blx	r7
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2cb78:	3401      	adds	r4, #1
   2cb7a:	e7ee      	b.n	2cb5a <bt_keys_foreach+0xa>
   2cb7c:	20008858 	.word	0x20008858

0002cb80 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   2cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cb82:	4607      	mov	r7, r0
   2cb84:	460e      	mov	r6, r1
   2cb86:	4615      	mov	r5, r2
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2cb88:	2400      	movs	r4, #0
   2cb8a:	2c00      	cmp	r4, #0
   2cb8c:	dd01      	ble.n	2cb92 <bt_keys_find+0x12>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   2cb8e:	2000      	movs	r0, #0
}
   2cb90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2cb92:	4a0f      	ldr	r2, [pc, #60]	; (2cbd0 <bt_keys_find+0x50>)
   2cb94:	235c      	movs	r3, #92	; 0x5c
   2cb96:	fb03 2304 	mla	r3, r3, r4, r2
   2cb9a:	89db      	ldrh	r3, [r3, #14]
   2cb9c:	421f      	tst	r7, r3
   2cb9e:	d005      	beq.n	2cbac <bt_keys_find+0x2c>
   2cba0:	235c      	movs	r3, #92	; 0x5c
   2cba2:	fb03 f304 	mul.w	r3, r3, r4
   2cba6:	5cd3      	ldrb	r3, [r2, r3]
   2cba8:	429e      	cmp	r6, r3
   2cbaa:	d001      	beq.n	2cbb0 <bt_keys_find+0x30>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2cbac:	3401      	adds	r4, #1
   2cbae:	e7ec      	b.n	2cb8a <bt_keys_find+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
   2cbb0:	205c      	movs	r0, #92	; 0x5c
   2cbb2:	fb00 2004 	mla	r0, r0, r4, r2
	return memcmp(a, b, sizeof(*a));
   2cbb6:	2207      	movs	r2, #7
   2cbb8:	4629      	mov	r1, r5
   2cbba:	3001      	adds	r0, #1
   2cbbc:	f00a f8a5 	bl	36d0a <memcmp>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2cbc0:	2800      	cmp	r0, #0
   2cbc2:	d1f3      	bne.n	2cbac <bt_keys_find+0x2c>
			return &key_pool[i];
   2cbc4:	4802      	ldr	r0, [pc, #8]	; (2cbd0 <bt_keys_find+0x50>)
   2cbc6:	235c      	movs	r3, #92	; 0x5c
   2cbc8:	fb03 0004 	mla	r0, r3, r4, r0
   2cbcc:	e7e0      	b.n	2cb90 <bt_keys_find+0x10>
   2cbce:	bf00      	nop
   2cbd0:	20008858 	.word	0x20008858

0002cbd4 <bt_keys_find_irk>:
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2cbd4:	780b      	ldrb	r3, [r1, #0]
   2cbd6:	2b01      	cmp	r3, #1
   2cbd8:	d15f      	bne.n	2cc9a <bt_keys_find_irk+0xc6>

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   2cbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cbde:	4606      	mov	r6, r0
   2cbe0:	460d      	mov	r5, r1
	return BT_ADDR_IS_RPA(&addr->a);
   2cbe2:	798b      	ldrb	r3, [r1, #6]
   2cbe4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
   2cbe8:	2b40      	cmp	r3, #64	; 0x40
   2cbea:	d101      	bne.n	2cbf0 <bt_keys_find_irk+0x1c>
		return NULL;
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2cbec:	2400      	movs	r4, #0
   2cbee:	e002      	b.n	2cbf6 <bt_keys_find_irk+0x22>
		return NULL;
   2cbf0:	2000      	movs	r0, #0
   2cbf2:	e025      	b.n	2cc40 <bt_keys_find_irk+0x6c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2cbf4:	3401      	adds	r4, #1
   2cbf6:	2c00      	cmp	r4, #0
   2cbf8:	dc1e      	bgt.n	2cc38 <bt_keys_find_irk+0x64>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2cbfa:	4a29      	ldr	r2, [pc, #164]	; (2cca0 <bt_keys_find_irk+0xcc>)
   2cbfc:	235c      	movs	r3, #92	; 0x5c
   2cbfe:	fb03 2304 	mla	r3, r3, r4, r2
   2cc02:	89db      	ldrh	r3, [r3, #14]
   2cc04:	f013 0f02 	tst.w	r3, #2
   2cc08:	d0f4      	beq.n	2cbf4 <bt_keys_find_irk+0x20>
			continue;
		}

		if (key_pool[i].id == id &&
   2cc0a:	235c      	movs	r3, #92	; 0x5c
   2cc0c:	fb03 f304 	mul.w	r3, r3, r4
   2cc10:	5cd3      	ldrb	r3, [r2, r3]
   2cc12:	42b3      	cmp	r3, r6
   2cc14:	d1ee      	bne.n	2cbf4 <bt_keys_find_irk+0x20>
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   2cc16:	215c      	movs	r1, #92	; 0x5c
   2cc18:	fb01 f104 	mul.w	r1, r1, r4
   2cc1c:	3138      	adds	r1, #56	; 0x38
   2cc1e:	4411      	add	r1, r2
	return memcmp(a, b, sizeof(*a));
   2cc20:	2206      	movs	r2, #6
   2cc22:	3102      	adds	r1, #2
   2cc24:	1c68      	adds	r0, r5, #1
   2cc26:	f00a f870 	bl	36d0a <memcmp>
		if (key_pool[i].id == id &&
   2cc2a:	2800      	cmp	r0, #0
   2cc2c:	d1e2      	bne.n	2cbf4 <bt_keys_find_irk+0x20>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
   2cc2e:	481c      	ldr	r0, [pc, #112]	; (2cca0 <bt_keys_find_irk+0xcc>)
   2cc30:	235c      	movs	r3, #92	; 0x5c
   2cc32:	fb03 0004 	mla	r0, r3, r4, r0
   2cc36:	e003      	b.n	2cc40 <bt_keys_find_irk+0x6c>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2cc38:	2700      	movs	r7, #0
   2cc3a:	2f00      	cmp	r7, #0
   2cc3c:	dd02      	ble.n	2cc44 <bt_keys_find_irk+0x70>
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
   2cc3e:	2000      	movs	r0, #0
}
   2cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2cc44:	4a16      	ldr	r2, [pc, #88]	; (2cca0 <bt_keys_find_irk+0xcc>)
   2cc46:	235c      	movs	r3, #92	; 0x5c
   2cc48:	fb03 2307 	mla	r3, r3, r7, r2
   2cc4c:	89db      	ldrh	r3, [r3, #14]
   2cc4e:	f013 0f02 	tst.w	r3, #2
   2cc52:	d005      	beq.n	2cc60 <bt_keys_find_irk+0x8c>
		if (key_pool[i].id != id) {
   2cc54:	235c      	movs	r3, #92	; 0x5c
   2cc56:	fb03 f307 	mul.w	r3, r3, r7
   2cc5a:	5cd3      	ldrb	r3, [r2, r3]
   2cc5c:	42b3      	cmp	r3, r6
   2cc5e:	d001      	beq.n	2cc64 <bt_keys_find_irk+0x90>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2cc60:	3701      	adds	r7, #1
   2cc62:	e7ea      	b.n	2cc3a <bt_keys_find_irk+0x66>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2cc64:	205c      	movs	r0, #92	; 0x5c
   2cc66:	fb00 f007 	mul.w	r0, r0, r7
   2cc6a:	3028      	adds	r0, #40	; 0x28
   2cc6c:	4410      	add	r0, r2
   2cc6e:	f105 0801 	add.w	r8, r5, #1
   2cc72:	4641      	mov	r1, r8
   2cc74:	3002      	adds	r0, #2
   2cc76:	f00a f917 	bl	36ea8 <bt_rpa_irk_matches>
   2cc7a:	2800      	cmp	r0, #0
   2cc7c:	d0f0      	beq.n	2cc60 <bt_keys_find_irk+0x8c>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   2cc7e:	4c08      	ldr	r4, [pc, #32]	; (2cca0 <bt_keys_find_irk+0xcc>)
   2cc80:	205c      	movs	r0, #92	; 0x5c
   2cc82:	fb00 f707 	mul.w	r7, r0, r7
   2cc86:	f107 0038 	add.w	r0, r7, #56	; 0x38
   2cc8a:	4420      	add	r0, r4
	memcpy(dst, src, sizeof(*dst));
   2cc8c:	2206      	movs	r2, #6
   2cc8e:	4641      	mov	r1, r8
   2cc90:	3002      	adds	r0, #2
   2cc92:	f00a f867 	bl	36d64 <memcpy>
			return &key_pool[i];
   2cc96:	19e0      	adds	r0, r4, r7
   2cc98:	e7d2      	b.n	2cc40 <bt_keys_find_irk+0x6c>
		return NULL;
   2cc9a:	2000      	movs	r0, #0
}
   2cc9c:	4770      	bx	lr
   2cc9e:	bf00      	nop
   2cca0:	20008858 	.word	0x20008858

0002cca4 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   2cca4:	b570      	push	{r4, r5, r6, lr}
   2cca6:	4606      	mov	r6, r0
   2cca8:	460d      	mov	r5, r1
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2ccaa:	2400      	movs	r4, #0
   2ccac:	2c00      	cmp	r4, #0
   2ccae:	dd01      	ble.n	2ccb4 <bt_keys_find_addr+0x10>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   2ccb0:	2000      	movs	r0, #0
}
   2ccb2:	bd70      	pop	{r4, r5, r6, pc}
		if (key_pool[i].id == id &&
   2ccb4:	235c      	movs	r3, #92	; 0x5c
   2ccb6:	fb03 f304 	mul.w	r3, r3, r4
   2ccba:	4a0a      	ldr	r2, [pc, #40]	; (2cce4 <bt_keys_find_addr+0x40>)
   2ccbc:	5cd3      	ldrb	r3, [r2, r3]
   2ccbe:	429e      	cmp	r6, r3
   2ccc0:	d001      	beq.n	2ccc6 <bt_keys_find_addr+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2ccc2:	3401      	adds	r4, #1
   2ccc4:	e7f2      	b.n	2ccac <bt_keys_find_addr+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
   2ccc6:	205c      	movs	r0, #92	; 0x5c
   2ccc8:	fb00 2004 	mla	r0, r0, r4, r2
	return memcmp(a, b, sizeof(*a));
   2cccc:	2207      	movs	r2, #7
   2ccce:	4629      	mov	r1, r5
   2ccd0:	3001      	adds	r0, #1
   2ccd2:	f00a f81a 	bl	36d0a <memcmp>
		if (key_pool[i].id == id &&
   2ccd6:	2800      	cmp	r0, #0
   2ccd8:	d1f3      	bne.n	2ccc2 <bt_keys_find_addr+0x1e>
			return &key_pool[i];
   2ccda:	4802      	ldr	r0, [pc, #8]	; (2cce4 <bt_keys_find_addr+0x40>)
   2ccdc:	235c      	movs	r3, #92	; 0x5c
   2ccde:	fb03 0004 	mla	r0, r3, r4, r0
   2cce2:	e7e6      	b.n	2ccb2 <bt_keys_find_addr+0xe>
   2cce4:	20008858 	.word	0x20008858

0002cce8 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   2cce8:	4b03      	ldr	r3, [pc, #12]	; (2ccf8 <pool_id+0x10>)
   2ccea:	1ac0      	subs	r0, r0, r3
   2ccec:	1080      	asrs	r0, r0, #2
}
   2ccee:	4b03      	ldr	r3, [pc, #12]	; (2ccfc <pool_id+0x14>)
   2ccf0:	fb03 f000 	mul.w	r0, r3, r0
   2ccf4:	4770      	bx	lr
   2ccf6:	bf00      	nop
   2ccf8:	20000bb0 	.word	0x20000bb0
   2ccfc:	ba2e8ba3 	.word	0xba2e8ba3

0002cd00 <net_buf_pool_get>:
}
   2cd00:	222c      	movs	r2, #44	; 0x2c
   2cd02:	4b02      	ldr	r3, [pc, #8]	; (2cd0c <net_buf_pool_get+0xc>)
   2cd04:	fb02 3000 	mla	r0, r2, r0, r3
   2cd08:	4770      	bx	lr
   2cd0a:	bf00      	nop
   2cd0c:	20000bb0 	.word	0x20000bb0

0002cd10 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   2cd10:	4800      	ldr	r0, [pc, #0]	; (2cd14 <get_hf_flags+0x4>)
   2cd12:	4770      	bx	lr
   2cd14:	20008904 	.word	0x20008904

0002cd18 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   2cd18:	4b03      	ldr	r3, [pc, #12]	; (2cd28 <get_subsys+0x10>)
   2cd1a:	1ac0      	subs	r0, r0, r3
   2cd1c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   2cd1e:	4b03      	ldr	r3, [pc, #12]	; (2cd2c <get_subsys+0x14>)
   2cd20:	fb03 f000 	mul.w	r0, r3, r0
   2cd24:	4770      	bx	lr
   2cd26:	bf00      	nop
   2cd28:	200088c4 	.word	0x200088c4
   2cd2c:	b6db6db7 	.word	0xb6db6db7

0002cd30 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2cd30:	b538      	push	{r3, r4, r5, lr}
   2cd32:	4605      	mov	r5, r0
   2cd34:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2cd36:	f7ff ffef 	bl	2cd18 <get_subsys>
   2cd3a:	4601      	mov	r1, r0
   2cd3c:	2240      	movs	r2, #64	; 0x40
   2cd3e:	4803      	ldr	r0, [pc, #12]	; (2cd4c <onoff_stop+0x1c>)
   2cd40:	f00d ff86 	bl	3ac50 <stop>
   2cd44:	4601      	mov	r1, r0
	notify(mgr, res);
   2cd46:	4628      	mov	r0, r5
   2cd48:	47a0      	blx	r4
}
   2cd4a:	bd38      	pop	{r3, r4, r5, pc}
   2cd4c:	0003cef8 	.word	0x0003cef8

0002cd50 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2cd50:	b530      	push	{r4, r5, lr}
   2cd52:	b083      	sub	sp, #12
   2cd54:	4605      	mov	r5, r0
   2cd56:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2cd58:	f7ff ffde 	bl	2cd18 <get_subsys>
   2cd5c:	4601      	mov	r1, r0
   2cd5e:	2340      	movs	r3, #64	; 0x40
   2cd60:	9300      	str	r3, [sp, #0]
   2cd62:	4623      	mov	r3, r4
   2cd64:	4a05      	ldr	r2, [pc, #20]	; (2cd7c <onoff_start+0x2c>)
   2cd66:	4806      	ldr	r0, [pc, #24]	; (2cd80 <onoff_start+0x30>)
   2cd68:	f00d ff8c 	bl	3ac84 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2cd6c:	1e01      	subs	r1, r0, #0
   2cd6e:	db01      	blt.n	2cd74 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   2cd70:	b003      	add	sp, #12
   2cd72:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   2cd74:	4628      	mov	r0, r5
   2cd76:	47a0      	blx	r4
}
   2cd78:	e7fa      	b.n	2cd70 <onoff_start+0x20>
   2cd7a:	bf00      	nop
   2cd7c:	0003accd 	.word	0x0003accd
   2cd80:	0003cef8 	.word	0x0003cef8

0002cd84 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   2cd84:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   2cd86:	b110      	cbz	r0, 2cd8e <clock_event_handler+0xa>
   2cd88:	2801      	cmp	r0, #1
   2cd8a:	d00d      	beq.n	2cda8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   2cd8c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   2cd8e:	2100      	movs	r1, #0
   2cd90:	4808      	ldr	r0, [pc, #32]	; (2cdb4 <clock_event_handler+0x30>)
   2cd92:	f00d fee4 	bl	3ab5e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2cd96:	6883      	ldr	r3, [r0, #8]
   2cd98:	f013 0f07 	tst.w	r3, #7
   2cd9c:	d1f6      	bne.n	2cd8c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   2cd9e:	2100      	movs	r1, #0
   2cda0:	4804      	ldr	r0, [pc, #16]	; (2cdb4 <clock_event_handler+0x30>)
   2cda2:	f00d ff43 	bl	3ac2c <clkstarted_handle>
   2cda6:	e7f1      	b.n	2cd8c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2cda8:	2101      	movs	r1, #1
   2cdaa:	4802      	ldr	r0, [pc, #8]	; (2cdb4 <clock_event_handler+0x30>)
   2cdac:	f00d ff3e 	bl	3ac2c <clkstarted_handle>
}
   2cdb0:	e7ec      	b.n	2cd8c <clock_event_handler+0x8>
   2cdb2:	bf00      	nop
   2cdb4:	0003cef8 	.word	0x0003cef8

0002cdb8 <generic_hfclk_start>:
{
   2cdb8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2cdba:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cdbe:	f3ef 8411 	mrs	r4, BASEPRI
   2cdc2:	f383 8812 	msr	BASEPRI_MAX, r3
   2cdc6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2cdca:	4a13      	ldr	r2, [pc, #76]	; (2ce18 <generic_hfclk_start+0x60>)
   2cdcc:	6813      	ldr	r3, [r2, #0]
   2cdce:	f043 0302 	orr.w	r3, r3, #2
   2cdd2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   2cdd4:	f013 0f01 	tst.w	r3, #1
   2cdd8:	d108      	bne.n	2cdec <generic_hfclk_start+0x34>
	bool already_started = false;
   2cdda:	2300      	movs	r3, #0
	__asm__ volatile(
   2cddc:	f384 8811 	msr	BASEPRI, r4
   2cde0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2cde4:	b99b      	cbnz	r3, 2ce0e <generic_hfclk_start+0x56>
	hfclk_start();
   2cde6:	f00d ff79 	bl	3acdc <hfclk_start>
}
   2cdea:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2cdec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cdf0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2cdf4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2cdf8:	f012 0f01 	tst.w	r2, #1
   2cdfc:	d101      	bne.n	2ce02 <generic_hfclk_start+0x4a>
	bool already_started = false;
   2cdfe:	2300      	movs	r3, #0
   2ce00:	e7ec      	b.n	2cddc <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   2ce02:	f7ff ff85 	bl	2cd10 <get_hf_flags>
   2ce06:	f00d fefe 	bl	3ac06 <set_on_state>
			already_started = true;
   2ce0a:	2301      	movs	r3, #1
   2ce0c:	e7e6      	b.n	2cddc <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   2ce0e:	2100      	movs	r1, #0
   2ce10:	4802      	ldr	r0, [pc, #8]	; (2ce1c <generic_hfclk_start+0x64>)
   2ce12:	f00d ff0b 	bl	3ac2c <clkstarted_handle>
		return;
   2ce16:	e7e8      	b.n	2cdea <generic_hfclk_start+0x32>
   2ce18:	20008914 	.word	0x20008914
   2ce1c:	0003cef8 	.word	0x0003cef8

0002ce20 <generic_hfclk_stop>:
{
   2ce20:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ce22:	4b0a      	ldr	r3, [pc, #40]	; (2ce4c <generic_hfclk_stop+0x2c>)
   2ce24:	f3bf 8f5b 	dmb	ish
   2ce28:	e853 2f00 	ldrex	r2, [r3]
   2ce2c:	f022 0102 	bic.w	r1, r2, #2
   2ce30:	e843 1000 	strex	r0, r1, [r3]
   2ce34:	2800      	cmp	r0, #0
   2ce36:	d1f7      	bne.n	2ce28 <generic_hfclk_stop+0x8>
   2ce38:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   2ce3c:	f012 0f01 	tst.w	r2, #1
   2ce40:	d000      	beq.n	2ce44 <generic_hfclk_stop+0x24>
}
   2ce42:	bd08      	pop	{r3, pc}
	hfclk_stop();
   2ce44:	f00d ff54 	bl	3acf0 <hfclk_stop>
   2ce48:	e7fb      	b.n	2ce42 <generic_hfclk_stop+0x22>
   2ce4a:	bf00      	nop
   2ce4c:	20008914 	.word	0x20008914

0002ce50 <api_blocking_start>:
{
   2ce50:	b500      	push	{lr}
   2ce52:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2ce54:	f8cd d000 	str.w	sp, [sp]
   2ce58:	f8cd d004 	str.w	sp, [sp, #4]
   2ce5c:	2300      	movs	r3, #0
   2ce5e:	9302      	str	r3, [sp, #8]
   2ce60:	2301      	movs	r3, #1
   2ce62:	9303      	str	r3, [sp, #12]
   2ce64:	ab04      	add	r3, sp, #16
   2ce66:	9304      	str	r3, [sp, #16]
   2ce68:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2ce6a:	466b      	mov	r3, sp
   2ce6c:	4a06      	ldr	r2, [pc, #24]	; (2ce88 <api_blocking_start+0x38>)
   2ce6e:	f00d ff25 	bl	3acbc <api_start>
	if (err < 0) {
   2ce72:	2800      	cmp	r0, #0
   2ce74:	db05      	blt.n	2ce82 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   2ce76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2ce7a:	2300      	movs	r3, #0
   2ce7c:	4668      	mov	r0, sp
   2ce7e:	f003 fa1d 	bl	302bc <z_impl_k_sem_take>
}
   2ce82:	b007      	add	sp, #28
   2ce84:	f85d fb04 	ldr.w	pc, [sp], #4
   2ce88:	0003ad05 	.word	0x0003ad05

0002ce8c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   2ce8c:	b570      	push	{r4, r5, r6, lr}
   2ce8e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2ce90:	2200      	movs	r2, #0
   2ce92:	2101      	movs	r1, #1
   2ce94:	4610      	mov	r0, r2
   2ce96:	f7f5 f933 	bl	22100 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   2ce9a:	2000      	movs	r0, #0
   2ce9c:	f7f5 f8fe 	bl	2209c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2cea0:	4811      	ldr	r0, [pc, #68]	; (2cee8 <clk_init+0x5c>)
   2cea2:	f001 fd87 	bl	2e9b4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2cea6:	4b11      	ldr	r3, [pc, #68]	; (2ceec <clk_init+0x60>)
   2cea8:	4298      	cmp	r0, r3
   2ceaa:	d11a      	bne.n	2cee2 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2ceac:	f00f f811 	bl	3bed2 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   2ceb0:	2400      	movs	r4, #0
   2ceb2:	e003      	b.n	2cebc <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2ceb4:	2301      	movs	r3, #1
   2ceb6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   2ceb8:	441c      	add	r4, r3
   2ceba:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   2cebc:	2c01      	cmp	r4, #1
   2cebe:	d80e      	bhi.n	2cede <clk_init+0x52>
						get_sub_data(dev, i);
   2cec0:	4621      	mov	r1, r4
   2cec2:	4630      	mov	r0, r6
   2cec4:	f00d fe4b 	bl	3ab5e <get_sub_data>
   2cec8:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2ceca:	4621      	mov	r1, r4
   2cecc:	4630      	mov	r0, r6
   2cece:	f00d fe53 	bl	3ab78 <get_onoff_manager>
   2ced2:	4907      	ldr	r1, [pc, #28]	; (2cef0 <clk_init+0x64>)
   2ced4:	f007 fbc2 	bl	3465c <onoff_manager_init>
		if (err < 0) {
   2ced8:	2800      	cmp	r0, #0
   2ceda:	daeb      	bge.n	2ceb4 <clk_init+0x28>
   2cedc:	e000      	b.n	2cee0 <clk_init+0x54>
	}

	return 0;
   2cede:	2000      	movs	r0, #0
}
   2cee0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2cee2:	f06f 0004 	mvn.w	r0, #4
   2cee6:	e7fb      	b.n	2cee0 <clk_init+0x54>
   2cee8:	0002cd85 	.word	0x0002cd85
   2ceec:	0bad0000 	.word	0x0bad0000
   2cef0:	00040588 	.word	0x00040588

0002cef4 <lfclk_spinwait>:
{
   2cef4:	b570      	push	{r4, r5, r6, lr}
   2cef6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2cef8:	2801      	cmp	r0, #1
   2cefa:	d107      	bne.n	2cf0c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2cefc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cf00:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2cf04:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2cf08:	2b01      	cmp	r3, #1
   2cf0a:	d058      	beq.n	2cfbe <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2cf0c:	f00f f932 	bl	3c174 <k_is_in_isr>
   2cf10:	b928      	cbnz	r0, 2cf1e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   2cf12:	4b2e      	ldr	r3, [pc, #184]	; (2cfcc <lfclk_spinwait+0xd8>)
   2cf14:	781b      	ldrb	r3, [r3, #0]
   2cf16:	2b00      	cmp	r3, #0
   2cf18:	d041      	beq.n	2cf9e <lfclk_spinwait+0xaa>
   2cf1a:	2300      	movs	r3, #0
   2cf1c:	e000      	b.n	2cf20 <lfclk_spinwait+0x2c>
   2cf1e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   2cf20:	461c      	mov	r4, r3
   2cf22:	2b00      	cmp	r3, #0
   2cf24:	d03d      	beq.n	2cfa2 <lfclk_spinwait+0xae>
	__asm__ volatile(
   2cf26:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cf2a:	f3ef 8611 	mrs	r6, BASEPRI
   2cf2e:	f383 8812 	msr	BASEPRI_MAX, r3
   2cf32:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   2cf36:	b924      	cbnz	r4, 2cf42 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   2cf38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cf3c:	2202      	movs	r2, #2
   2cf3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2cf42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2cf46:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2cf4a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2cf4e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   2cf52:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   2cf56:	d12b      	bne.n	2cfb0 <lfclk_spinwait+0xbc>
    return false;
   2cf58:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2cf5a:	b11a      	cbz	r2, 2cf64 <lfclk_spinwait+0x70>
   2cf5c:	2b01      	cmp	r3, #1
   2cf5e:	d029      	beq.n	2cfb4 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2cf60:	2d01      	cmp	r5, #1
   2cf62:	d027      	beq.n	2cfb4 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2cf64:	b1fc      	cbz	r4, 2cfa6 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2cf66:	4630      	mov	r0, r6
   2cf68:	f7f5 f840 	bl	21fec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   2cf6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cf70:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2cf74:	2b00      	cmp	r3, #0
   2cf76:	d1e4      	bne.n	2cf42 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2cf78:	4b15      	ldr	r3, [pc, #84]	; (2cfd0 <lfclk_spinwait+0xdc>)
   2cf7a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   2cf7c:	2b00      	cmp	r3, #0
   2cf7e:	d0e0      	beq.n	2cf42 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2cf80:	4b13      	ldr	r3, [pc, #76]	; (2cfd0 <lfclk_spinwait+0xdc>)
   2cf82:	2200      	movs	r2, #0
   2cf84:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2cf86:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   2cf88:	2301      	movs	r3, #1
   2cf8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2cf8e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cf92:	4a10      	ldr	r2, [pc, #64]	; (2cfd4 <lfclk_spinwait+0xe0>)
   2cf94:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cf98:	4a0f      	ldr	r2, [pc, #60]	; (2cfd8 <lfclk_spinwait+0xe4>)
   2cf9a:	6013      	str	r3, [r2, #0]
}
   2cf9c:	e7d1      	b.n	2cf42 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2cf9e:	2301      	movs	r3, #1
   2cfa0:	e7be      	b.n	2cf20 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   2cfa2:	2600      	movs	r6, #0
   2cfa4:	e7c7      	b.n	2cf36 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   2cfa6:	2021      	movs	r0, #33	; 0x21
   2cfa8:	2100      	movs	r1, #0
   2cfaa:	f003 ff33 	bl	30e14 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2cfae:	e7dd      	b.n	2cf6c <lfclk_spinwait+0x78>
                return true;
   2cfb0:	2201      	movs	r2, #1
   2cfb2:	e7d2      	b.n	2cf5a <lfclk_spinwait+0x66>
	if (isr_mode) {
   2cfb4:	b124      	cbz	r4, 2cfc0 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   2cfb6:	f386 8811 	msr	BASEPRI, r6
   2cfba:	f3bf 8f6f 	isb	sy
}
   2cfbe:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   2cfc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cfc4:	2202      	movs	r2, #2
   2cfc6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2cfca:	e7f8      	b.n	2cfbe <lfclk_spinwait+0xca>
   2cfcc:	2000da77 	.word	0x2000da77
   2cfd0:	40000104 	.word	0x40000104
   2cfd4:	e000e100 	.word	0xe000e100
   2cfd8:	40000008 	.word	0x40000008

0002cfdc <z_nrf_clock_control_lf_on>:
{
   2cfdc:	b510      	push	{r4, lr}
   2cfde:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2cfe0:	4b10      	ldr	r3, [pc, #64]	; (2d024 <z_nrf_clock_control_lf_on+0x48>)
   2cfe2:	2101      	movs	r1, #1
   2cfe4:	f3bf 8f5b 	dmb	ish
   2cfe8:	e853 2f00 	ldrex	r2, [r3]
   2cfec:	e843 1000 	strex	r0, r1, [r3]
   2cff0:	2800      	cmp	r0, #0
   2cff2:	d1f9      	bne.n	2cfe8 <z_nrf_clock_control_lf_on+0xc>
   2cff4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   2cff8:	b11a      	cbz	r2, 2d002 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   2cffa:	1e63      	subs	r3, r4, #1
   2cffc:	2b01      	cmp	r3, #1
   2cffe:	d90c      	bls.n	2d01a <z_nrf_clock_control_lf_on+0x3e>
}
   2d000:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   2d002:	4809      	ldr	r0, [pc, #36]	; (2d028 <z_nrf_clock_control_lf_on+0x4c>)
   2d004:	f00d fdb8 	bl	3ab78 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2d008:	4908      	ldr	r1, [pc, #32]	; (2d02c <z_nrf_clock_control_lf_on+0x50>)
   2d00a:	2300      	movs	r3, #0
   2d00c:	604b      	str	r3, [r1, #4]
   2d00e:	60cb      	str	r3, [r1, #12]
   2d010:	2301      	movs	r3, #1
   2d012:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   2d014:	f007 fb3e 	bl	34694 <onoff_request>
   2d018:	e7ef      	b.n	2cffa <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   2d01a:	4620      	mov	r0, r4
   2d01c:	f7ff ff6a 	bl	2cef4 <lfclk_spinwait>
		break;
   2d020:	e7ee      	b.n	2d000 <z_nrf_clock_control_lf_on+0x24>
   2d022:	bf00      	nop
   2d024:	20008918 	.word	0x20008918
   2d028:	0003cef8 	.word	0x0003cef8
   2d02c:	200088b4 	.word	0x200088b4

0002d030 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   2d030:	b510      	push	{r4, lr}
   2d032:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   2d034:	280a      	cmp	r0, #10
   2d036:	d007      	beq.n	2d048 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   2d038:	4b07      	ldr	r3, [pc, #28]	; (2d058 <console_out+0x28>)
   2d03a:	6818      	ldr	r0, [r3, #0]
   2d03c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   2d03e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   2d040:	685b      	ldr	r3, [r3, #4]
   2d042:	4798      	blx	r3

	return c;
}
   2d044:	4620      	mov	r0, r4
   2d046:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   2d048:	4b03      	ldr	r3, [pc, #12]	; (2d058 <console_out+0x28>)
   2d04a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   2d04c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   2d04e:	685b      	ldr	r3, [r3, #4]
   2d050:	210d      	movs	r1, #13
   2d052:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   2d054:	e7f0      	b.n	2d038 <console_out+0x8>
   2d056:	bf00      	nop
   2d058:	2000891c 	.word	0x2000891c

0002d05c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   2d05c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   2d05e:	4c04      	ldr	r4, [pc, #16]	; (2d070 <uart_console_hook_install+0x14>)
   2d060:	4620      	mov	r0, r4
   2d062:	f7f5 fec5 	bl	22df0 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   2d066:	4620      	mov	r0, r4
   2d068:	f7f2 f884 	bl	1f174 <__printk_hook_install>
#endif
}
   2d06c:	bd10      	pop	{r4, pc}
   2d06e:	bf00      	nop
   2d070:	0002d031 	.word	0x0002d031

0002d074 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   2d074:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   2d076:	4806      	ldr	r0, [pc, #24]	; (2d090 <uart_console_init+0x1c>)
   2d078:	4b06      	ldr	r3, [pc, #24]	; (2d094 <uart_console_init+0x20>)
   2d07a:	6018      	str	r0, [r3, #0]
   2d07c:	f00e ff9a 	bl	3bfb4 <z_device_ready>
   2d080:	b118      	cbz	r0, 2d08a <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   2d082:	f7ff ffeb 	bl	2d05c <uart_console_hook_install>

	return 0;
   2d086:	2000      	movs	r0, #0
}
   2d088:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2d08a:	f06f 0012 	mvn.w	r0, #18
   2d08e:	e7fb      	b.n	2d088 <uart_console_init+0x14>
   2d090:	0003cfa0 	.word	0x0003cfa0
   2d094:	2000891c 	.word	0x2000891c

0002d098 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2d098:	4b1f      	ldr	r3, [pc, #124]	; (2d118 <get_drive+0x80>)
   2d09a:	4003      	ands	r3, r0
   2d09c:	4a1f      	ldr	r2, [pc, #124]	; (2d11c <get_drive+0x84>)
   2d09e:	4293      	cmp	r3, r2
   2d0a0:	d032      	beq.n	2d108 <get_drive+0x70>
   2d0a2:	d816      	bhi.n	2d0d2 <get_drive+0x3a>
   2d0a4:	2b06      	cmp	r3, #6
   2d0a6:	d02b      	beq.n	2d100 <get_drive+0x68>
   2d0a8:	d906      	bls.n	2d0b8 <get_drive+0x20>
   2d0aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2d0ae:	d10d      	bne.n	2d0cc <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   2d0b0:	2301      	movs	r3, #1
   2d0b2:	700b      	strb	r3, [r1, #0]
	int err = 0;
   2d0b4:	2000      	movs	r0, #0
		break;
   2d0b6:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2d0b8:	b1fb      	cbz	r3, 2d0fa <get_drive+0x62>
   2d0ba:	2b02      	cmp	r3, #2
   2d0bc:	d103      	bne.n	2d0c6 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   2d0be:	2304      	movs	r3, #4
   2d0c0:	700b      	strb	r3, [r1, #0]
	int err = 0;
   2d0c2:	2000      	movs	r0, #0
		break;
   2d0c4:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2d0c6:	f06f 0015 	mvn.w	r0, #21
   2d0ca:	4770      	bx	lr
   2d0cc:	f06f 0015 	mvn.w	r0, #21
   2d0d0:	4770      	bx	lr
   2d0d2:	4a13      	ldr	r2, [pc, #76]	; (2d120 <get_drive+0x88>)
   2d0d4:	4293      	cmp	r3, r2
   2d0d6:	d01b      	beq.n	2d110 <get_drive+0x78>
   2d0d8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   2d0dc:	d103      	bne.n	2d0e6 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   2d0de:	2303      	movs	r3, #3
   2d0e0:	700b      	strb	r3, [r1, #0]
	int err = 0;
   2d0e2:	2000      	movs	r0, #0
		break;
   2d0e4:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2d0e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2d0ea:	d103      	bne.n	2d0f4 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   2d0ec:	2302      	movs	r3, #2
   2d0ee:	700b      	strb	r3, [r1, #0]
	int err = 0;
   2d0f0:	2000      	movs	r0, #0
		break;
   2d0f2:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2d0f4:	f06f 0015 	mvn.w	r0, #21
   2d0f8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2d0fa:	2000      	movs	r0, #0
   2d0fc:	7008      	strb	r0, [r1, #0]
		break;
   2d0fe:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   2d100:	2306      	movs	r3, #6
   2d102:	700b      	strb	r3, [r1, #0]
	int err = 0;
   2d104:	2000      	movs	r0, #0
		break;
   2d106:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2d108:	2307      	movs	r3, #7
   2d10a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   2d10c:	2000      	movs	r0, #0
		break;
   2d10e:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   2d110:	2305      	movs	r3, #5
   2d112:	700b      	strb	r3, [r1, #0]
	int err = 0;
   2d114:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   2d116:	4770      	bx	lr
   2d118:	00f00006 	.word	0x00f00006
   2d11c:	00100006 	.word	0x00100006
   2d120:	00400002 	.word	0x00400002

0002d124 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2d124:	b128      	cbz	r0, 2d132 <get_dev+0xe>
   2d126:	2801      	cmp	r0, #1
   2d128:	d101      	bne.n	2d12e <get_dev+0xa>
   2d12a:	4803      	ldr	r0, [pc, #12]	; (2d138 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   2d12c:	4770      	bx	lr
	const struct device *dev = NULL;
   2d12e:	2000      	movs	r0, #0
   2d130:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2d132:	4802      	ldr	r0, [pc, #8]	; (2d13c <get_dev+0x18>)
   2d134:	4770      	bx	lr
   2d136:	bf00      	nop
   2d138:	0003cf10 	.word	0x0003cf10
   2d13c:	0003cf28 	.word	0x0003cf28

0002d140 <gpio_nrfx_pin_interrupt_configure>:
{
   2d140:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d142:	b085      	sub	sp, #20
   2d144:	460e      	mov	r6, r1
   2d146:	4619      	mov	r1, r3
	return port->config;
   2d148:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2d14a:	7b1b      	ldrb	r3, [r3, #12]
   2d14c:	f006 051f 	and.w	r5, r6, #31
   2d150:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2d154:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   2d158:	d022      	beq.n	2d1a0 <gpio_nrfx_pin_interrupt_configure+0x60>
   2d15a:	4607      	mov	r7, r0
   2d15c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2d15e:	2300      	movs	r3, #0
   2d160:	9302      	str	r3, [sp, #8]
   2d162:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   2d164:	4610      	mov	r0, r2
   2d166:	f00d fe05 	bl	3ad74 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2d16a:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   2d16e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2d170:	6899      	ldr	r1, [r3, #8]
   2d172:	40f1      	lsrs	r1, r6
   2d174:	f011 0f01 	tst.w	r1, #1
   2d178:	d102      	bne.n	2d180 <gpio_nrfx_pin_interrupt_configure+0x40>
   2d17a:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   2d17e:	d014      	beq.n	2d1aa <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2d180:	2300      	movs	r3, #0
   2d182:	aa02      	add	r2, sp, #8
   2d184:	4619      	mov	r1, r3
   2d186:	4628      	mov	r0, r5
   2d188:	f002 f848 	bl	2f21c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2d18c:	4b1b      	ldr	r3, [pc, #108]	; (2d1fc <gpio_nrfx_pin_interrupt_configure+0xbc>)
   2d18e:	4298      	cmp	r0, r3
   2d190:	d131      	bne.n	2d1f6 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2d192:	2101      	movs	r1, #1
   2d194:	4628      	mov	r0, r5
   2d196:	f002 fa19 	bl	2f5cc <nrfx_gpiote_trigger_enable>
	return 0;
   2d19a:	2000      	movs	r0, #0
}
   2d19c:	b005      	add	sp, #20
   2d19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   2d1a0:	4628      	mov	r0, r5
   2d1a2:	f002 fa77 	bl	2f694 <nrfx_gpiote_trigger_disable>
		return 0;
   2d1a6:	2000      	movs	r0, #0
   2d1a8:	e7f8      	b.n	2d19c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   2d1aa:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   2d1ae:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d1b0:	2a01      	cmp	r2, #1
   2d1b2:	d014      	beq.n	2d1de <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   2d1b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2d1b8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2d1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2d1c0:	f013 0f01 	tst.w	r3, #1
   2d1c4:	d1dc      	bne.n	2d180 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2d1c6:	f10d 0107 	add.w	r1, sp, #7
   2d1ca:	4628      	mov	r0, r5
   2d1cc:	f002 f9a2 	bl	2f514 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2d1d0:	4b0b      	ldr	r3, [pc, #44]	; (2d200 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   2d1d2:	4298      	cmp	r0, r3
   2d1d4:	d005      	beq.n	2d1e2 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   2d1d6:	f10d 0307 	add.w	r3, sp, #7
   2d1da:	9303      	str	r3, [sp, #12]
   2d1dc:	e7d0      	b.n	2d180 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   2d1de:	4a09      	ldr	r2, [pc, #36]	; (2d204 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   2d1e0:	e7ea      	b.n	2d1b8 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   2d1e2:	f10d 0007 	add.w	r0, sp, #7
   2d1e6:	f002 f9e9 	bl	2f5bc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   2d1ea:	4b04      	ldr	r3, [pc, #16]	; (2d1fc <gpio_nrfx_pin_interrupt_configure+0xbc>)
   2d1ec:	4298      	cmp	r0, r3
   2d1ee:	d0f2      	beq.n	2d1d6 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   2d1f0:	f06f 000b 	mvn.w	r0, #11
   2d1f4:	e7d2      	b.n	2d19c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   2d1f6:	f06f 0004 	mvn.w	r0, #4
   2d1fa:	e7cf      	b.n	2d19c <gpio_nrfx_pin_interrupt_configure+0x5c>
   2d1fc:	0bad0000 	.word	0x0bad0000
   2d200:	0bad0004 	.word	0x0bad0004
   2d204:	50000300 	.word	0x50000300

0002d208 <pin_uninit>:
{
   2d208:	b530      	push	{r4, r5, lr}
   2d20a:	b083      	sub	sp, #12
   2d20c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   2d20e:	f10d 0107 	add.w	r1, sp, #7
   2d212:	f002 f97f 	bl	2f514 <nrfx_gpiote_channel_get>
   2d216:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   2d218:	4620      	mov	r0, r4
   2d21a:	f002 fa6b 	bl	2f6f4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   2d21e:	4b0b      	ldr	r3, [pc, #44]	; (2d24c <pin_uninit+0x44>)
   2d220:	4298      	cmp	r0, r3
   2d222:	d10f      	bne.n	2d244 <pin_uninit+0x3c>
	if (free_ch) {
   2d224:	429d      	cmp	r5, r3
   2d226:	d005      	beq.n	2d234 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   2d228:	4b08      	ldr	r3, [pc, #32]	; (2d24c <pin_uninit+0x44>)
   2d22a:	4298      	cmp	r0, r3
   2d22c:	d107      	bne.n	2d23e <pin_uninit+0x36>
   2d22e:	2000      	movs	r0, #0
}
   2d230:	b003      	add	sp, #12
   2d232:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   2d234:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2d238:	f002 f9b8 	bl	2f5ac <nrfx_gpiote_channel_free>
   2d23c:	e7f4      	b.n	2d228 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   2d23e:	f06f 0004 	mvn.w	r0, #4
   2d242:	e7f5      	b.n	2d230 <pin_uninit+0x28>
		return -EIO;
   2d244:	f06f 0004 	mvn.w	r0, #4
   2d248:	e7f2      	b.n	2d230 <pin_uninit+0x28>
   2d24a:	bf00      	nop
   2d24c:	0bad0000 	.word	0x0bad0000

0002d250 <gpio_nrfx_pin_configure>:
{
   2d250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d254:	b087      	sub	sp, #28
	return port->config;
   2d256:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2d25a:	f898 300c 	ldrb.w	r3, [r8, #12]
   2d25e:	f001 051f 	and.w	r5, r1, #31
   2d262:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   2d266:	2a00      	cmp	r2, #0
   2d268:	d044      	beq.n	2d2f4 <gpio_nrfx_pin_configure+0xa4>
   2d26a:	460c      	mov	r4, r1
   2d26c:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2d26e:	2600      	movs	r6, #0
   2d270:	9603      	str	r6, [sp, #12]
   2d272:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   2d274:	f10d 0117 	add.w	r1, sp, #23
   2d278:	4620      	mov	r0, r4
   2d27a:	f002 f94b 	bl	2f514 <nrfx_gpiote_channel_get>
   2d27e:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2d280:	4633      	mov	r3, r6
   2d282:	aa03      	add	r2, sp, #12
   2d284:	4631      	mov	r1, r6
   2d286:	4628      	mov	r0, r5
   2d288:	f001 ffc8 	bl	2f21c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2d28c:	4b30      	ldr	r3, [pc, #192]	; (2d350 <gpio_nrfx_pin_configure+0x100>)
   2d28e:	4298      	cmp	r0, r3
   2d290:	d15b      	bne.n	2d34a <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   2d292:	4599      	cmp	r9, r3
   2d294:	d036      	beq.n	2d304 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   2d296:	f417 7f00 	tst.w	r7, #512	; 0x200
   2d29a:	d043      	beq.n	2d324 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   2d29c:	f10d 0103 	add.w	r1, sp, #3
   2d2a0:	4638      	mov	r0, r7
   2d2a2:	f7ff fef9 	bl	2d098 <get_drive>
		if (rv != 0) {
   2d2a6:	4606      	mov	r6, r0
   2d2a8:	bb40      	cbnz	r0, 2d2fc <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   2d2aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2d2ae:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2d2b2:	f417 7f80 	tst.w	r7, #256	; 0x100
   2d2b6:	bf0c      	ite	eq
   2d2b8:	2301      	moveq	r3, #1
   2d2ba:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   2d2bc:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   2d2c0:	4638      	mov	r0, r7
   2d2c2:	f00d fd24 	bl	3ad0e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   2d2c6:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2d2ca:	f417 6f00 	tst.w	r7, #2048	; 0x800
   2d2ce:	d01e      	beq.n	2d30e <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2d2d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2d2d4:	2101      	movs	r1, #1
   2d2d6:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   2d2da:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2d2de:	2200      	movs	r2, #0
   2d2e0:	a901      	add	r1, sp, #4
   2d2e2:	4628      	mov	r0, r5
   2d2e4:	f002 f850 	bl	2f388 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2d2e8:	4b19      	ldr	r3, [pc, #100]	; (2d350 <gpio_nrfx_pin_configure+0x100>)
   2d2ea:	4298      	cmp	r0, r3
   2d2ec:	d006      	beq.n	2d2fc <gpio_nrfx_pin_configure+0xac>
   2d2ee:	f06f 0615 	mvn.w	r6, #21
   2d2f2:	e003      	b.n	2d2fc <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   2d2f4:	4628      	mov	r0, r5
   2d2f6:	f7ff ff87 	bl	2d208 <pin_uninit>
   2d2fa:	4606      	mov	r6, r0
}
   2d2fc:	4630      	mov	r0, r6
   2d2fe:	b007      	add	sp, #28
   2d300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   2d304:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2d308:	f002 f950 	bl	2f5ac <nrfx_gpiote_channel_free>
   2d30c:	e7c3      	b.n	2d296 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2d30e:	f417 6f80 	tst.w	r7, #1024	; 0x400
   2d312:	d0e4      	beq.n	2d2de <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2d314:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2d318:	2301      	movs	r3, #1
   2d31a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   2d31e:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   2d322:	e7dc      	b.n	2d2de <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   2d324:	4638      	mov	r0, r7
   2d326:	f00d fcf2 	bl	3ad0e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   2d32a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2d32e:	2300      	movs	r3, #0
   2d330:	461a      	mov	r2, r3
   2d332:	a902      	add	r1, sp, #8
   2d334:	4628      	mov	r0, r5
   2d336:	f001 ff71 	bl	2f21c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2d33a:	4b05      	ldr	r3, [pc, #20]	; (2d350 <gpio_nrfx_pin_configure+0x100>)
   2d33c:	4298      	cmp	r0, r3
   2d33e:	d101      	bne.n	2d344 <gpio_nrfx_pin_configure+0xf4>
   2d340:	2600      	movs	r6, #0
   2d342:	e7db      	b.n	2d2fc <gpio_nrfx_pin_configure+0xac>
   2d344:	f06f 0615 	mvn.w	r6, #21
   2d348:	e7d8      	b.n	2d2fc <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   2d34a:	f06f 0615 	mvn.w	r6, #21
   2d34e:	e7d5      	b.n	2d2fc <gpio_nrfx_pin_configure+0xac>
   2d350:	0bad0000 	.word	0x0bad0000

0002d354 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2d354:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2d356:	f002 f91f 	bl	2f598 <nrfx_gpiote_is_init>
   2d35a:	b108      	cbz	r0, 2d360 <gpio_nrfx_init+0xc>
		return 0;
   2d35c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2d35e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   2d360:	f002 f8f0 	bl	2f544 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2d364:	4b08      	ldr	r3, [pc, #32]	; (2d388 <gpio_nrfx_init+0x34>)
   2d366:	4298      	cmp	r0, r3
   2d368:	d10a      	bne.n	2d380 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2d36a:	2100      	movs	r1, #0
   2d36c:	4807      	ldr	r0, [pc, #28]	; (2d38c <gpio_nrfx_init+0x38>)
   2d36e:	f002 f8cb 	bl	2f508 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2d372:	2200      	movs	r2, #0
   2d374:	2105      	movs	r1, #5
   2d376:	2006      	movs	r0, #6
   2d378:	f7f4 fec2 	bl	22100 <z_arm_irq_priority_set>
	return 0;
   2d37c:	2000      	movs	r0, #0
   2d37e:	e7ee      	b.n	2d35e <gpio_nrfx_init+0xa>
		return -EIO;
   2d380:	f06f 0004 	mvn.w	r0, #4
   2d384:	e7eb      	b.n	2d35e <gpio_nrfx_init+0xa>
   2d386:	bf00      	nop
   2d388:	0bad0000 	.word	0x0bad0000
   2d38c:	0003ae05 	.word	0x0003ae05

0002d390 <wdt_0_event_handler>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   2d390:	b508      	push	{r3, lr}
   2d392:	4802      	ldr	r0, [pc, #8]	; (2d39c <wdt_0_event_handler+0xc>)
   2d394:	f00d fd5d 	bl	3ae52 <wdt_event_handler>
   2d398:	bd08      	pop	{r3, pc}
   2d39a:	bf00      	nop
   2d39c:	0003cf40 	.word	0x0003cf40

0002d3a0 <wdt_nrf_install_timeout>:
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   2d3a0:	7b0b      	ldrb	r3, [r1, #12]
   2d3a2:	2b02      	cmp	r3, #2
   2d3a4:	d12f      	bne.n	2d406 <wdt_nrf_install_timeout+0x66>
{
   2d3a6:	b530      	push	{r4, r5, lr}
   2d3a8:	b083      	sub	sp, #12
   2d3aa:	4605      	mov	r5, r0
   2d3ac:	460c      	mov	r4, r1
	if (cfg->window.min != 0U) {
   2d3ae:	680b      	ldr	r3, [r1, #0]
   2d3b0:	bb63      	cbnz	r3, 2d40c <wdt_nrf_install_timeout+0x6c>
	return dev->data;
   2d3b2:	6903      	ldr	r3, [r0, #16]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   2d3b4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2d3b8:	b9f2      	cbnz	r2, 2d3f8 <wdt_nrf_install_timeout+0x58>
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   2d3ba:	684a      	ldr	r2, [r1, #4]
   2d3bc:	1e50      	subs	r0, r2, #1
   2d3be:	4918      	ldr	r1, [pc, #96]	; (2d420 <wdt_nrf_install_timeout+0x80>)
   2d3c0:	4288      	cmp	r0, r1
   2d3c2:	d826      	bhi.n	2d412 <wdt_nrf_install_timeout+0x72>
		get_dev_data(dev)->m_timeout = cfg->window.max;
   2d3c4:	621a      	str	r2, [r3, #32]
	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   2d3c6:	f10d 0107 	add.w	r1, sp, #7
   2d3ca:	6868      	ldr	r0, [r5, #4]
   2d3cc:	f002 fa8e 	bl	2f8ec <nrfx_wdt_channel_alloc>
	if (err_code == NRFX_ERROR_NO_MEM) {
   2d3d0:	4b14      	ldr	r3, [pc, #80]	; (2d424 <wdt_nrf_install_timeout+0x84>)
   2d3d2:	4298      	cmp	r0, r3
   2d3d4:	d020      	beq.n	2d418 <wdt_nrf_install_timeout+0x78>
	if (cfg->callback != NULL) {
   2d3d6:	68a3      	ldr	r3, [r4, #8]
   2d3d8:	b123      	cbz	r3, 2d3e4 <wdt_nrf_install_timeout+0x44>
	return dev->data;
   2d3da:	692a      	ldr	r2, [r5, #16]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   2d3dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2d3e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return dev->data;
   2d3e4:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->m_allocated_channels++;
   2d3e6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   2d3ea:	3301      	adds	r3, #1
   2d3ec:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
   2d3f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   2d3f4:	b003      	add	sp, #12
   2d3f6:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   2d3f8:	684a      	ldr	r2, [r1, #4]
   2d3fa:	6a1b      	ldr	r3, [r3, #32]
   2d3fc:	429a      	cmp	r2, r3
   2d3fe:	d0e2      	beq.n	2d3c6 <wdt_nrf_install_timeout+0x26>
		return -EINVAL;
   2d400:	f06f 0015 	mvn.w	r0, #21
   2d404:	e7f6      	b.n	2d3f4 <wdt_nrf_install_timeout+0x54>
		return -ENOTSUP;
   2d406:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2d40a:	4770      	bx	lr
		return -EINVAL;
   2d40c:	f06f 0015 	mvn.w	r0, #21
   2d410:	e7f0      	b.n	2d3f4 <wdt_nrf_install_timeout+0x54>
			return -EINVAL;
   2d412:	f06f 0015 	mvn.w	r0, #21
   2d416:	e7ed      	b.n	2d3f4 <wdt_nrf_install_timeout+0x54>
		return -ENOMEM;
   2d418:	f06f 000b 	mvn.w	r0, #11
   2d41c:	e7ea      	b.n	2d3f4 <wdt_nrf_install_timeout+0x54>
   2d41e:	bf00      	nop
   2d420:	07cffffe 	.word	0x07cffffe
   2d424:	0bad0002 	.word	0x0bad0002

0002d428 <wdt_0_init>:
WDT_NRFX_WDT_DEVICE(0);
   2d428:	b510      	push	{r4, lr}
   2d42a:	4604      	mov	r4, r0
   2d42c:	2200      	movs	r2, #0
   2d42e:	2101      	movs	r1, #1
   2d430:	2010      	movs	r0, #16
   2d432:	f7f4 fe65 	bl	22100 <z_arm_irq_priority_set>
	return dev->config;
   2d436:	6860      	ldr	r0, [r4, #4]
WDT_NRFX_WDT_DEVICE(0);
   2d438:	4a06      	ldr	r2, [pc, #24]	; (2d454 <wdt_0_init+0x2c>)
   2d43a:	f100 0108 	add.w	r1, r0, #8
   2d43e:	f002 fa15 	bl	2f86c <nrfx_wdt_init>
   2d442:	4b05      	ldr	r3, [pc, #20]	; (2d458 <wdt_0_init+0x30>)
   2d444:	4298      	cmp	r0, r3
   2d446:	d101      	bne.n	2d44c <wdt_0_init+0x24>
   2d448:	2000      	movs	r0, #0
   2d44a:	bd10      	pop	{r4, pc}
   2d44c:	f06f 000f 	mvn.w	r0, #15
   2d450:	e7fb      	b.n	2d44a <wdt_0_init+0x22>
   2d452:	bf00      	nop
   2d454:	0002d391 	.word	0x0002d391
   2d458:	0bad0000 	.word	0x0bad0000

0002d45c <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d45c:	4b03      	ldr	r3, [pc, #12]	; (2d46c <nrf52_errata_242+0x10>)
   2d45e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2d460:	2b08      	cmp	r3, #8
   2d462:	d001      	beq.n	2d468 <nrf52_errata_242+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2d464:	2000      	movs	r0, #0
   2d466:	4770      	bx	lr
                        return true;
   2d468:	2001      	movs	r0, #1
    #endif
}
   2d46a:	4770      	bx	lr
   2d46c:	10000130 	.word	0x10000130

0002d470 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2d470:	4b03      	ldr	r3, [pc, #12]	; (2d480 <nvmc_wait_ready+0x10>)
   2d472:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   2d476:	f013 0f01 	tst.w	r3, #1
   2d47a:	d0f9      	beq.n	2d470 <nvmc_wait_ready>
	}
}
   2d47c:	4770      	bx	lr
   2d47e:	bf00      	nop
   2d480:	4001e000 	.word	0x4001e000

0002d484 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2d484:	4b02      	ldr	r3, [pc, #8]	; (2d490 <flash_nrf_pages_layout+0xc>)
   2d486:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2d488:	2301      	movs	r3, #1
   2d48a:	6013      	str	r3, [r2, #0]
}
   2d48c:	4770      	bx	lr
   2d48e:	bf00      	nop
   2d490:	20008960 	.word	0x20008960

0002d494 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2d494:	4800      	ldr	r0, [pc, #0]	; (2d498 <flash_nrf_get_parameters+0x4>)
   2d496:	4770      	bx	lr
   2d498:	000406a0 	.word	0x000406a0

0002d49c <suspend_pofwarn>:
 * Do not attempt to write or erase if EVENTS_POFWARN is already asserted.
 */
static bool pofcon_enabled;

static int suspend_pofwarn(void)
{
   2d49c:	b508      	push	{r3, lr}
	if (!nrf52_errata_242()) {
   2d49e:	f7ff ffdd 	bl	2d45c <nrf52_errata_242>
   2d4a2:	b328      	cbz	r0, 2d4f0 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   2d4a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d4a8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
   2d4ac:	f013 0201 	ands.w	r2, r3, #1
   2d4b0:	b2d2      	uxtb	r2, r2
	bool enabled;
	nrf_power_pof_thr_t pof_thr;

	pof_thr = nrf_power_pofcon_get(NRF_POWER, &enabled);

	if (enabled) {
   2d4b2:	d01f      	beq.n	2d4f4 <suspend_pofwarn+0x58>
    uint32_t pofcon = p_reg->POFCON;
   2d4b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   2d4b8:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2d4bc:	f021 011f 	bic.w	r1, r1, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2d4c0:	f003 031e 	and.w	r3, r3, #30
    pofcon |=
   2d4c4:	4319      	orrs	r1, r3
    p_reg->POFCON = pofcon;
   2d4c6:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d4ca:	490b      	ldr	r1, [pc, #44]	; (2d4f8 <suspend_pofwarn+0x5c>)
   2d4cc:	6809      	ldr	r1, [r1, #0]
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);

		/* This check need to be reworked once POFWARN event will be
		 * served by zephyr.
		 */
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   2d4ce:	b919      	cbnz	r1, 2d4d8 <suspend_pofwarn+0x3c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
			return -ECANCELED;
		}

		pofcon_enabled = enabled;
   2d4d0:	4b0a      	ldr	r3, [pc, #40]	; (2d4fc <suspend_pofwarn+0x60>)
   2d4d2:	701a      	strb	r2, [r3, #0]
	}

	return 0;
   2d4d4:	2000      	movs	r0, #0
   2d4d6:	e00c      	b.n	2d4f2 <suspend_pofwarn+0x56>
    uint32_t pofcon = p_reg->POFCON;
   2d4d8:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2d4dc:	f022 021f 	bic.w	r2, r2, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2d4e0:	f043 0301 	orr.w	r3, r3, #1
    pofcon |=
   2d4e4:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
   2d4e6:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
			return -ECANCELED;
   2d4ea:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2d4ee:	e000      	b.n	2d4f2 <suspend_pofwarn+0x56>
		return 0;
   2d4f0:	2000      	movs	r0, #0
}
   2d4f2:	bd08      	pop	{r3, pc}
	return 0;
   2d4f4:	2000      	movs	r0, #0
   2d4f6:	e7fc      	b.n	2d4f2 <suspend_pofwarn+0x56>
   2d4f8:	40000108 	.word	0x40000108
   2d4fc:	2000da76 	.word	0x2000da76

0002d500 <restore_pofwarn>:

static void restore_pofwarn(void)
{
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
   2d500:	4b0a      	ldr	r3, [pc, #40]	; (2d52c <restore_pofwarn+0x2c>)
   2d502:	781b      	ldrb	r3, [r3, #0]
   2d504:	b18b      	cbz	r3, 2d52a <restore_pofwarn+0x2a>
    uint32_t pofcon = p_reg->POFCON;
   2d506:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2d50a:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   2d50e:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2d512:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2d516:	f002 021e 	and.w	r2, r2, #30
   2d51a:	f042 0201 	orr.w	r2, r2, #1
    pofcon |=
   2d51e:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
   2d520:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   2d524:	4b01      	ldr	r3, [pc, #4]	; (2d52c <restore_pofwarn+0x2c>)
   2d526:	2200      	movs	r2, #0
   2d528:	701a      	strb	r2, [r3, #0]
	}
}
   2d52a:	4770      	bx	lr
   2d52c:	2000da76 	.word	0x2000da76

0002d530 <erase_synchronously>:
{
   2d530:	b500      	push	{lr}
   2d532:	b089      	sub	sp, #36	; 0x24
	struct flash_context context = {
   2d534:	ab03      	add	r3, sp, #12
   2d536:	2200      	movs	r2, #0
   2d538:	9203      	str	r2, [sp, #12]
   2d53a:	9206      	str	r2, [sp, #24]
   2d53c:	9004      	str	r0, [sp, #16]
   2d53e:	9105      	str	r1, [sp, #20]
   2d540:	2201      	movs	r2, #1
   2d542:	f88d 2018 	strb.w	r2, [sp, #24]
   2d546:	9007      	str	r0, [sp, #28]
	struct flash_op_desc flash_op_desc = {
   2d548:	4a06      	ldr	r2, [pc, #24]	; (2d564 <erase_synchronously+0x34>)
   2d54a:	9201      	str	r2, [sp, #4]
   2d54c:	9302      	str	r3, [sp, #8]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   2d54e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   2d552:	f001 fa93 	bl	2ea7c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2d556:	a801      	add	r0, sp, #4
   2d558:	f7ef fd2a 	bl	1cfb0 <nrf_flash_sync_exe>
}
   2d55c:	b009      	add	sp, #36	; 0x24
   2d55e:	f85d fb04 	ldr.w	pc, [sp], #4
   2d562:	bf00      	nop
   2d564:	0003af03 	.word	0x0003af03

0002d568 <write_synchronously>:
{
   2d568:	b500      	push	{lr}
   2d56a:	b089      	sub	sp, #36	; 0x24
	struct flash_context context = {
   2d56c:	2300      	movs	r3, #0
   2d56e:	9306      	str	r3, [sp, #24]
   2d570:	9307      	str	r3, [sp, #28]
   2d572:	9103      	str	r1, [sp, #12]
   2d574:	9004      	str	r0, [sp, #16]
   2d576:	9205      	str	r2, [sp, #20]
   2d578:	2301      	movs	r3, #1
   2d57a:	f88d 3018 	strb.w	r3, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   2d57e:	4b07      	ldr	r3, [pc, #28]	; (2d59c <write_synchronously+0x34>)
   2d580:	9301      	str	r3, [sp, #4]
   2d582:	ab03      	add	r3, sp, #12
   2d584:	9302      	str	r3, [sp, #8]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   2d586:	f641 504c 	movw	r0, #7500	; 0x1d4c
   2d58a:	f001 fa77 	bl	2ea7c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2d58e:	a801      	add	r0, sp, #4
   2d590:	f7ef fd0e 	bl	1cfb0 <nrf_flash_sync_exe>
}
   2d594:	b009      	add	sp, #36	; 0x24
   2d596:	f85d fb04 	ldr.w	pc, [sp], #4
   2d59a:	bf00      	nop
   2d59c:	0003af91 	.word	0x0003af91

0002d5a0 <flash_nrf_erase>:
{
   2d5a0:	b570      	push	{r4, r5, r6, lr}
   2d5a2:	460c      	mov	r4, r1
   2d5a4:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2d5a6:	f00e fcfd 	bl	3bfa4 <nrfx_nvmc_flash_page_size_get>
   2d5aa:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2d5ac:	f00e fcf6 	bl	3bf9c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2d5b0:	42a0      	cmp	r0, r4
   2d5b2:	d914      	bls.n	2d5de <flash_nrf_erase+0x3e>
   2d5b4:	2c00      	cmp	r4, #0
   2d5b6:	db12      	blt.n	2d5de <flash_nrf_erase+0x3e>
	    addr < 0 ||
   2d5b8:	42a8      	cmp	r0, r5
   2d5ba:	d310      	bcc.n	2d5de <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
   2d5bc:	192b      	adds	r3, r5, r4
	    len > flash_size ||
   2d5be:	4283      	cmp	r3, r0
   2d5c0:	d80d      	bhi.n	2d5de <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2d5c2:	fbb4 f3f6 	udiv	r3, r4, r6
   2d5c6:	fb06 4313 	mls	r3, r6, r3, r4
   2d5ca:	b9f3      	cbnz	r3, 2d60a <flash_nrf_erase+0x6a>
   2d5cc:	fbb5 f3f6 	udiv	r3, r5, r6
   2d5d0:	fb06 5313 	mls	r3, r6, r3, r5
   2d5d4:	b9cb      	cbnz	r3, 2d60a <flash_nrf_erase+0x6a>
		if (!n_pages) {
   2d5d6:	42b5      	cmp	r5, r6
   2d5d8:	d22c      	bcs.n	2d634 <flash_nrf_erase+0x94>
			return 0;
   2d5da:	2400      	movs	r4, #0
   2d5dc:	e013      	b.n	2d606 <flash_nrf_erase+0x66>
   2d5de:	4a22      	ldr	r2, [pc, #136]	; (2d668 <flash_nrf_erase+0xc8>)
   2d5e0:	4b22      	ldr	r3, [pc, #136]	; (2d66c <flash_nrf_erase+0xcc>)
   2d5e2:	1ad2      	subs	r2, r2, r3
   2d5e4:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2d5e6:	f04f 0300 	mov.w	r3, #0
   2d5ea:	2101      	movs	r1, #1
   2d5ec:	f361 0302 	bfi	r3, r1, #0, #3
   2d5f0:	f36f 03c5 	bfc	r3, #3, #3
   2d5f4:	f362 138f 	bfi	r3, r2, #6, #10
   2d5f8:	462a      	mov	r2, r5
   2d5fa:	4621      	mov	r1, r4
   2d5fc:	481c      	ldr	r0, [pc, #112]	; (2d670 <flash_nrf_erase+0xd0>)
   2d5fe:	f7f2 fe89 	bl	20314 <log_2>
		return -EINVAL;
   2d602:	f06f 0415 	mvn.w	r4, #21
}
   2d606:	4620      	mov	r0, r4
   2d608:	bd70      	pop	{r4, r5, r6, pc}
   2d60a:	4a17      	ldr	r2, [pc, #92]	; (2d668 <flash_nrf_erase+0xc8>)
   2d60c:	4b17      	ldr	r3, [pc, #92]	; (2d66c <flash_nrf_erase+0xcc>)
   2d60e:	1ad2      	subs	r2, r2, r3
   2d610:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2d612:	f04f 0300 	mov.w	r3, #0
   2d616:	2101      	movs	r1, #1
   2d618:	f361 0302 	bfi	r3, r1, #0, #3
   2d61c:	f36f 03c5 	bfc	r3, #3, #3
   2d620:	f362 138f 	bfi	r3, r2, #6, #10
   2d624:	462a      	mov	r2, r5
   2d626:	4621      	mov	r1, r4
   2d628:	4812      	ldr	r0, [pc, #72]	; (2d674 <flash_nrf_erase+0xd4>)
   2d62a:	f7f2 fe73 	bl	20314 <log_2>
			return -EINVAL;
   2d62e:	f06f 0415 	mvn.w	r4, #21
   2d632:	e7e8      	b.n	2d606 <flash_nrf_erase+0x66>
	return z_impl_k_sem_take(sem, timeout);
   2d634:	f04f 32ff 	mov.w	r2, #4294967295
   2d638:	f04f 33ff 	mov.w	r3, #4294967295
   2d63c:	480e      	ldr	r0, [pc, #56]	; (2d678 <flash_nrf_erase+0xd8>)
   2d63e:	f002 fe3d 	bl	302bc <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2d642:	f00e fc4b 	bl	3bedc <nrf_flash_sync_is_required>
   2d646:	b140      	cbz	r0, 2d65a <flash_nrf_erase+0xba>
		ret = erase_synchronously(addr, size);
   2d648:	4629      	mov	r1, r5
   2d64a:	4620      	mov	r0, r4
   2d64c:	f7ff ff70 	bl	2d530 <erase_synchronously>
   2d650:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2d652:	4809      	ldr	r0, [pc, #36]	; (2d678 <flash_nrf_erase+0xd8>)
   2d654:	f002 fe0a 	bl	3026c <z_impl_k_sem_give>
	return ret;
   2d658:	e7d5      	b.n	2d606 <flash_nrf_erase+0x66>
		ret = erase(addr, size);
   2d65a:	4629      	mov	r1, r5
   2d65c:	4620      	mov	r0, r4
   2d65e:	f00d fc89 	bl	3af74 <erase>
   2d662:	4604      	mov	r4, r0
   2d664:	e7f5      	b.n	2d652 <flash_nrf_erase+0xb2>
   2d666:	bf00      	nop
   2d668:	0003d234 	.word	0x0003d234
   2d66c:	0003d1a4 	.word	0x0003d1a4
   2d670:	0004061c 	.word	0x0004061c
   2d674:	0004063c 	.word	0x0004063c
   2d678:	20008968 	.word	0x20008968

0002d67c <flash_nrf_write>:
{
   2d67c:	b570      	push	{r4, r5, r6, lr}
   2d67e:	460c      	mov	r4, r1
   2d680:	4616      	mov	r6, r2
   2d682:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2d684:	f00e fc8a 	bl	3bf9c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2d688:	42a0      	cmp	r0, r4
   2d68a:	d90f      	bls.n	2d6ac <flash_nrf_write+0x30>
   2d68c:	2c00      	cmp	r4, #0
   2d68e:	db0d      	blt.n	2d6ac <flash_nrf_write+0x30>
	    addr < 0 ||
   2d690:	42a8      	cmp	r0, r5
   2d692:	d30b      	bcc.n	2d6ac <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
   2d694:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   2d696:	4298      	cmp	r0, r3
   2d698:	d308      	bcc.n	2d6ac <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2d69a:	f014 0f03 	tst.w	r4, #3
   2d69e:	d11b      	bne.n	2d6d8 <flash_nrf_write+0x5c>
   2d6a0:	f015 0f03 	tst.w	r5, #3
   2d6a4:	d118      	bne.n	2d6d8 <flash_nrf_write+0x5c>
	if (!len) {
   2d6a6:	bb65      	cbnz	r5, 2d702 <flash_nrf_write+0x86>
		return 0;
   2d6a8:	2400      	movs	r4, #0
   2d6aa:	e013      	b.n	2d6d4 <flash_nrf_write+0x58>
   2d6ac:	4a22      	ldr	r2, [pc, #136]	; (2d738 <flash_nrf_write+0xbc>)
   2d6ae:	4b23      	ldr	r3, [pc, #140]	; (2d73c <flash_nrf_write+0xc0>)
   2d6b0:	1ad2      	subs	r2, r2, r3
   2d6b2:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2d6b4:	f04f 0300 	mov.w	r3, #0
   2d6b8:	2101      	movs	r1, #1
   2d6ba:	f361 0302 	bfi	r3, r1, #0, #3
   2d6be:	f36f 03c5 	bfc	r3, #3, #3
   2d6c2:	f362 138f 	bfi	r3, r2, #6, #10
   2d6c6:	462a      	mov	r2, r5
   2d6c8:	4621      	mov	r1, r4
   2d6ca:	481d      	ldr	r0, [pc, #116]	; (2d740 <flash_nrf_write+0xc4>)
   2d6cc:	f7f2 fe22 	bl	20314 <log_2>
		return -EINVAL;
   2d6d0:	f06f 0415 	mvn.w	r4, #21
}
   2d6d4:	4620      	mov	r0, r4
   2d6d6:	bd70      	pop	{r4, r5, r6, pc}
   2d6d8:	4a17      	ldr	r2, [pc, #92]	; (2d738 <flash_nrf_write+0xbc>)
   2d6da:	4b18      	ldr	r3, [pc, #96]	; (2d73c <flash_nrf_write+0xc0>)
   2d6dc:	1ad2      	subs	r2, r2, r3
   2d6de:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2d6e0:	f04f 0300 	mov.w	r3, #0
   2d6e4:	2101      	movs	r1, #1
   2d6e6:	f361 0302 	bfi	r3, r1, #0, #3
   2d6ea:	f36f 03c5 	bfc	r3, #3, #3
   2d6ee:	f362 138f 	bfi	r3, r2, #6, #10
   2d6f2:	462a      	mov	r2, r5
   2d6f4:	4621      	mov	r1, r4
   2d6f6:	4813      	ldr	r0, [pc, #76]	; (2d744 <flash_nrf_write+0xc8>)
   2d6f8:	f7f2 fe0c 	bl	20314 <log_2>
		return -EINVAL;
   2d6fc:	f06f 0415 	mvn.w	r4, #21
   2d700:	e7e8      	b.n	2d6d4 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2d702:	f04f 32ff 	mov.w	r2, #4294967295
   2d706:	f04f 33ff 	mov.w	r3, #4294967295
   2d70a:	480f      	ldr	r0, [pc, #60]	; (2d748 <flash_nrf_write+0xcc>)
   2d70c:	f002 fdd6 	bl	302bc <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2d710:	f00e fbe4 	bl	3bedc <nrf_flash_sync_is_required>
   2d714:	b148      	cbz	r0, 2d72a <flash_nrf_write+0xae>
		ret = write_synchronously(addr, data, len);
   2d716:	462a      	mov	r2, r5
   2d718:	4631      	mov	r1, r6
   2d71a:	4620      	mov	r0, r4
   2d71c:	f7ff ff24 	bl	2d568 <write_synchronously>
   2d720:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2d722:	4809      	ldr	r0, [pc, #36]	; (2d748 <flash_nrf_write+0xcc>)
   2d724:	f002 fda2 	bl	3026c <z_impl_k_sem_give>
	return ret;
   2d728:	e7d4      	b.n	2d6d4 <flash_nrf_write+0x58>
		ret = write(addr, data, len);
   2d72a:	462a      	mov	r2, r5
   2d72c:	4631      	mov	r1, r6
   2d72e:	4620      	mov	r0, r4
   2d730:	f00d fc5b 	bl	3afea <write>
   2d734:	4604      	mov	r4, r0
   2d736:	e7f4      	b.n	2d722 <flash_nrf_write+0xa6>
   2d738:	0003d234 	.word	0x0003d234
   2d73c:	0003d1a4 	.word	0x0003d1a4
   2d740:	0004061c 	.word	0x0004061c
   2d744:	0004065c 	.word	0x0004065c
   2d748:	20008968 	.word	0x20008968

0002d74c <flash_nrf_read>:
{
   2d74c:	b570      	push	{r4, r5, r6, lr}
   2d74e:	460c      	mov	r4, r1
   2d750:	4616      	mov	r6, r2
   2d752:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2d754:	f00e fc22 	bl	3bf9c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2d758:	4284      	cmp	r4, r0
   2d75a:	d209      	bcs.n	2d770 <flash_nrf_read+0x24>
   2d75c:	2c00      	cmp	r4, #0
   2d75e:	db07      	blt.n	2d770 <flash_nrf_read+0x24>
	    addr < 0 ||
   2d760:	42a8      	cmp	r0, r5
   2d762:	d305      	bcc.n	2d770 <flash_nrf_read+0x24>
	    (addr) + len > flash_size) {
   2d764:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   2d766:	4283      	cmp	r3, r0
   2d768:	d802      	bhi.n	2d770 <flash_nrf_read+0x24>
	if (!len) {
   2d76a:	b9b5      	cbnz	r5, 2d79a <flash_nrf_read+0x4e>
		return 0;
   2d76c:	2000      	movs	r0, #0
   2d76e:	e013      	b.n	2d798 <flash_nrf_read+0x4c>
   2d770:	4a0d      	ldr	r2, [pc, #52]	; (2d7a8 <flash_nrf_read+0x5c>)
   2d772:	4b0e      	ldr	r3, [pc, #56]	; (2d7ac <flash_nrf_read+0x60>)
   2d774:	1ad2      	subs	r2, r2, r3
   2d776:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2d778:	f04f 0300 	mov.w	r3, #0
   2d77c:	2101      	movs	r1, #1
   2d77e:	f361 0302 	bfi	r3, r1, #0, #3
   2d782:	f36f 03c5 	bfc	r3, #3, #3
   2d786:	f362 138f 	bfi	r3, r2, #6, #10
   2d78a:	462a      	mov	r2, r5
   2d78c:	4621      	mov	r1, r4
   2d78e:	4808      	ldr	r0, [pc, #32]	; (2d7b0 <flash_nrf_read+0x64>)
   2d790:	f7f2 fdc0 	bl	20314 <log_2>
		return -EINVAL;
   2d794:	f06f 0015 	mvn.w	r0, #21
}
   2d798:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (void *)addr, len);
   2d79a:	462a      	mov	r2, r5
   2d79c:	4621      	mov	r1, r4
   2d79e:	4630      	mov	r0, r6
   2d7a0:	f009 fae0 	bl	36d64 <memcpy>
	return 0;
   2d7a4:	2000      	movs	r0, #0
   2d7a6:	e7f7      	b.n	2d798 <flash_nrf_read+0x4c>
   2d7a8:	0003d234 	.word	0x0003d234
   2d7ac:	0003d1a4 	.word	0x0003d1a4
   2d7b0:	0004061c 	.word	0x0004061c

0002d7b4 <nrf_flash_init>:
{
   2d7b4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2d7b6:	2201      	movs	r2, #1
   2d7b8:	4611      	mov	r1, r2
   2d7ba:	4807      	ldr	r0, [pc, #28]	; (2d7d8 <nrf_flash_init+0x24>)
   2d7bc:	f00e fe17 	bl	3c3ee <z_impl_k_sem_init>
	nrf_flash_sync_init();
   2d7c0:	f001 f952 	bl	2ea68 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2d7c4:	f00e fbf2 	bl	3bfac <nrfx_nvmc_flash_page_count_get>
   2d7c8:	4c04      	ldr	r4, [pc, #16]	; (2d7dc <nrf_flash_init+0x28>)
   2d7ca:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2d7cc:	f00e fbea 	bl	3bfa4 <nrfx_nvmc_flash_page_size_get>
   2d7d0:	6060      	str	r0, [r4, #4]
}
   2d7d2:	2000      	movs	r0, #0
   2d7d4:	bd10      	pop	{r4, pc}
   2d7d6:	bf00      	nop
   2d7d8:	20008968 	.word	0x20008968
   2d7dc:	20008960 	.word	0x20008960

0002d7e0 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
   2d7e0:	b410      	push	{r4}
	return dev->config;
   2d7e2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   2d7e4:	2900      	cmp	r1, #0
   2d7e6:	d17e      	bne.n	2d8e6 <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2d7e8:	68da      	ldr	r2, [r3, #12]
   2d7ea:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d7ee:	d017      	beq.n	2d820 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
   2d7f0:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d7f4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d7f6:	2a01      	cmp	r2, #1
   2d7f8:	d065      	beq.n	2d8c6 <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
   2d7fa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d7fe:	2201      	movs	r2, #1
   2d800:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   2d802:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   2d806:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   2d808:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d80c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d80e:	2a01      	cmp	r2, #1
   2d810:	d05b      	beq.n	2d8ca <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
   2d812:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2d816:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2d81a:	2103      	movs	r1, #3
   2d81c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2d820:	691a      	ldr	r2, [r3, #16]
   2d822:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d826:	d00f      	beq.n	2d848 <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   2d828:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   2d82a:	2900      	cmp	r1, #0
   2d82c:	d04f      	beq.n	2d8ce <uarte_nrfx_pins_configure+0xee>
   2d82e:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   2d830:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d834:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d836:	2a01      	cmp	r2, #1
   2d838:	d04b      	beq.n	2d8d2 <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
   2d83a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2d83e:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   2d840:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2d844:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2d848:	695a      	ldr	r2, [r3, #20]
   2d84a:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d84e:	d017      	beq.n	2d880 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
   2d850:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d854:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d856:	2a01      	cmp	r2, #1
   2d858:	d03d      	beq.n	2d8d6 <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
   2d85a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d85e:	2201      	movs	r2, #1
   2d860:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   2d862:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   2d866:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   2d868:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d86c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d86e:	2a01      	cmp	r2, #1
   2d870:	d033      	beq.n	2d8da <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
   2d872:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2d876:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2d87a:	2103      	movs	r1, #3
   2d87c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2d880:	699a      	ldr	r2, [r3, #24]
   2d882:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d886:	d00e      	beq.n	2d8a6 <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   2d888:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   2d88a:	b341      	cbz	r1, 2d8de <uarte_nrfx_pins_configure+0xfe>
   2d88c:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   2d88e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d892:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d894:	2a01      	cmp	r2, #1
   2d896:	d024      	beq.n	2d8e2 <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
   2d898:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2d89c:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   2d89e:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2d8a2:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   2d8a6:	681a      	ldr	r2, [r3, #0]
   2d8a8:	68d8      	ldr	r0, [r3, #12]
   2d8aa:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   2d8ac:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2d8b0:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   2d8b4:	681a      	ldr	r2, [r3, #0]
   2d8b6:	6959      	ldr	r1, [r3, #20]
   2d8b8:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   2d8ba:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   2d8be:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   2d8c2:	bc10      	pop	{r4}
   2d8c4:	4770      	bx	lr
        case 1: return NRF_P1;
   2d8c6:	482c      	ldr	r0, [pc, #176]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d8c8:	e799      	b.n	2d7fe <uarte_nrfx_pins_configure+0x1e>
   2d8ca:	482b      	ldr	r0, [pc, #172]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d8cc:	e7a3      	b.n	2d816 <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
   2d8ce:	2000      	movs	r0, #0
   2d8d0:	e7ae      	b.n	2d830 <uarte_nrfx_pins_configure+0x50>
   2d8d2:	4c29      	ldr	r4, [pc, #164]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d8d4:	e7b3      	b.n	2d83e <uarte_nrfx_pins_configure+0x5e>
   2d8d6:	4828      	ldr	r0, [pc, #160]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d8d8:	e7c1      	b.n	2d85e <uarte_nrfx_pins_configure+0x7e>
   2d8da:	4827      	ldr	r0, [pc, #156]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d8dc:	e7cb      	b.n	2d876 <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
   2d8de:	2000      	movs	r0, #0
   2d8e0:	e7d5      	b.n	2d88e <uarte_nrfx_pins_configure+0xae>
   2d8e2:	4c25      	ldr	r4, [pc, #148]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d8e4:	e7da      	b.n	2d89c <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2d8e6:	68da      	ldr	r2, [r3, #12]
   2d8e8:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d8ec:	d00b      	beq.n	2d906 <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
   2d8ee:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d8f2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d8f4:	2a01      	cmp	r2, #1
   2d8f6:	d037      	beq.n	2d968 <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
   2d8f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2d8fc:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2d900:	2102      	movs	r1, #2
   2d902:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2d906:	691a      	ldr	r2, [r3, #16]
   2d908:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d90c:	d00b      	beq.n	2d926 <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
   2d90e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d912:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d914:	2a01      	cmp	r2, #1
   2d916:	d029      	beq.n	2d96c <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
   2d918:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2d91c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2d920:	2102      	movs	r1, #2
   2d922:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2d926:	695a      	ldr	r2, [r3, #20]
   2d928:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d92c:	d00b      	beq.n	2d946 <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
   2d92e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d932:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d934:	2a01      	cmp	r2, #1
   2d936:	d01b      	beq.n	2d970 <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
   2d938:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2d93c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2d940:	2102      	movs	r1, #2
   2d942:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2d946:	699a      	ldr	r2, [r3, #24]
   2d948:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d94c:	d0ab      	beq.n	2d8a6 <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
   2d94e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2d952:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d954:	2a01      	cmp	r2, #1
   2d956:	d00d      	beq.n	2d974 <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
   2d958:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2d95c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2d960:	2102      	movs	r1, #2
   2d962:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   2d966:	e79e      	b.n	2d8a6 <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
   2d968:	4803      	ldr	r0, [pc, #12]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d96a:	e7c7      	b.n	2d8fc <uarte_nrfx_pins_configure+0x11c>
   2d96c:	4802      	ldr	r0, [pc, #8]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d96e:	e7d5      	b.n	2d91c <uarte_nrfx_pins_configure+0x13c>
   2d970:	4801      	ldr	r0, [pc, #4]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d972:	e7e3      	b.n	2d93c <uarte_nrfx_pins_configure+0x15c>
   2d974:	4800      	ldr	r0, [pc, #0]	; (2d978 <uarte_nrfx_pins_configure+0x198>)
   2d976:	e7f1      	b.n	2d95c <uarte_nrfx_pins_configure+0x17c>
   2d978:	50000300 	.word	0x50000300

0002d97c <baudrate_set>:
	return dev->config;
   2d97c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2d97e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   2d980:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   2d984:	d06f      	beq.n	2da66 <baudrate_set+0xea>
   2d986:	d83a      	bhi.n	2d9fe <baudrate_set+0x82>
   2d988:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   2d98c:	d06e      	beq.n	2da6c <baudrate_set+0xf0>
   2d98e:	d90a      	bls.n	2d9a6 <baudrate_set+0x2a>
   2d990:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   2d994:	d075      	beq.n	2da82 <baudrate_set+0x106>
   2d996:	d924      	bls.n	2d9e2 <baudrate_set+0x66>
   2d998:	f647 2312 	movw	r3, #31250	; 0x7a12
   2d99c:	4299      	cmp	r1, r3
   2d99e:	d12b      	bne.n	2d9f8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2d9a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2d9a4:	e013      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2d9a6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   2d9aa:	d061      	beq.n	2da70 <baudrate_set+0xf4>
   2d9ac:	d907      	bls.n	2d9be <baudrate_set+0x42>
   2d9ae:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   2d9b2:	d063      	beq.n	2da7c <baudrate_set+0x100>
   2d9b4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   2d9b8:	d110      	bne.n	2d9dc <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2d9ba:	4b3c      	ldr	r3, [pc, #240]	; (2daac <baudrate_set+0x130>)
   2d9bc:	e007      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2d9be:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   2d9c2:	d058      	beq.n	2da76 <baudrate_set+0xfa>
   2d9c4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   2d9c8:	d105      	bne.n	2d9d6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   2d9ca:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2d9ce:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   2d9d2:	2000      	movs	r0, #0
   2d9d4:	4770      	bx	lr
	switch (baudrate) {
   2d9d6:	f06f 0015 	mvn.w	r0, #21
   2d9da:	4770      	bx	lr
   2d9dc:	f06f 0015 	mvn.w	r0, #21
   2d9e0:	4770      	bx	lr
   2d9e2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   2d9e6:	d04e      	beq.n	2da86 <baudrate_set+0x10a>
   2d9e8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   2d9ec:	d101      	bne.n	2d9f2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2d9ee:	4b30      	ldr	r3, [pc, #192]	; (2dab0 <baudrate_set+0x134>)
   2d9f0:	e7ed      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2d9f2:	f06f 0015 	mvn.w	r0, #21
   2d9f6:	4770      	bx	lr
   2d9f8:	f06f 0015 	mvn.w	r0, #21
   2d9fc:	4770      	bx	lr
   2d9fe:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   2da02:	d042      	beq.n	2da8a <baudrate_set+0x10e>
   2da04:	d909      	bls.n	2da1a <baudrate_set+0x9e>
   2da06:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   2da0a:	d046      	beq.n	2da9a <baudrate_set+0x11e>
   2da0c:	d91f      	bls.n	2da4e <baudrate_set+0xd2>
   2da0e:	4b29      	ldr	r3, [pc, #164]	; (2dab4 <baudrate_set+0x138>)
   2da10:	4299      	cmp	r1, r3
   2da12:	d148      	bne.n	2daa6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2da14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2da18:	e7d9      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2da1a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   2da1e:	d037      	beq.n	2da90 <baudrate_set+0x114>
   2da20:	d905      	bls.n	2da2e <baudrate_set+0xb2>
   2da22:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   2da26:	d10f      	bne.n	2da48 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2da28:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2da2c:	e7cf      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2da2e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   2da32:	4299      	cmp	r1, r3
   2da34:	d02e      	beq.n	2da94 <baudrate_set+0x118>
   2da36:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   2da3a:	d102      	bne.n	2da42 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2da3c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2da40:	e7c5      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2da42:	f06f 0015 	mvn.w	r0, #21
   2da46:	4770      	bx	lr
   2da48:	f06f 0015 	mvn.w	r0, #21
   2da4c:	4770      	bx	lr
   2da4e:	4b1a      	ldr	r3, [pc, #104]	; (2dab8 <baudrate_set+0x13c>)
   2da50:	4299      	cmp	r1, r3
   2da52:	d025      	beq.n	2daa0 <baudrate_set+0x124>
   2da54:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   2da58:	d102      	bne.n	2da60 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2da5a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2da5e:	e7b6      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2da60:	f06f 0015 	mvn.w	r0, #21
   2da64:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2da66:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2da6a:	e7b0      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   2da6c:	4b13      	ldr	r3, [pc, #76]	; (2dabc <baudrate_set+0x140>)
   2da6e:	e7ae      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2da70:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2da74:	e7ab      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2da76:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2da7a:	e7a8      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2da7c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2da80:	e7a5      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2da82:	4b0f      	ldr	r3, [pc, #60]	; (2dac0 <baudrate_set+0x144>)
   2da84:	e7a3      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2da86:	4b0f      	ldr	r3, [pc, #60]	; (2dac4 <baudrate_set+0x148>)
   2da88:	e7a1      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2da8a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2da8e:	e79e      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2da90:	4b0d      	ldr	r3, [pc, #52]	; (2dac8 <baudrate_set+0x14c>)
   2da92:	e79c      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2da94:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2da98:	e799      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2da9a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2da9e:	e796      	b.n	2d9ce <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2daa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2daa4:	e793      	b.n	2d9ce <baudrate_set+0x52>
	switch (baudrate) {
   2daa6:	f06f 0015 	mvn.w	r0, #21
}
   2daaa:	4770      	bx	lr
   2daac:	0013b000 	.word	0x0013b000
   2dab0:	004ea000 	.word	0x004ea000
   2dab4:	000f4240 	.word	0x000f4240
   2dab8:	0003d090 	.word	0x0003d090
   2dabc:	00275000 	.word	0x00275000
   2dac0:	0075c000 	.word	0x0075c000
   2dac4:	003af000 	.word	0x003af000
   2dac8:	013a9000 	.word	0x013a9000

0002dacc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   2dacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dad0:	4605      	mov	r5, r0
   2dad2:	460f      	mov	r7, r1
	return dev->data;
   2dad4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2dad8:	f00e fb4c 	bl	3c174 <k_is_in_isr>
   2dadc:	b920      	cbnz	r0, 2dae8 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   2dade:	4b16      	ldr	r3, [pc, #88]	; (2db38 <uarte_nrfx_poll_out+0x6c>)
   2dae0:	781b      	ldrb	r3, [r3, #0]
   2dae2:	b1ab      	cbz	r3, 2db10 <uarte_nrfx_poll_out+0x44>
   2dae4:	2300      	movs	r3, #0
   2dae6:	e000      	b.n	2daea <uarte_nrfx_poll_out+0x1e>
   2dae8:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   2daea:	b19b      	cbz	r3, 2db14 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   2daec:	f04f 0340 	mov.w	r3, #64	; 0x40
   2daf0:	f3ef 8411 	mrs	r4, BASEPRI
   2daf4:	f383 8812 	msr	BASEPRI_MAX, r3
   2daf8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   2dafc:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   2dafe:	4628      	mov	r0, r5
   2db00:	f00d fb88 	bl	3b214 <is_tx_ready>
   2db04:	b950      	cbnz	r0, 2db1c <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   2db06:	f384 8811 	msr	BASEPRI, r4
   2db0a:	f3bf 8f6f 	isb	sy
}
   2db0e:	e7ed      	b.n	2daec <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2db10:	2301      	movs	r3, #1
   2db12:	e7ea      	b.n	2daea <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   2db14:	4628      	mov	r0, r5
   2db16:	f00d fc9e 	bl	3b456 <wait_tx_ready>
   2db1a:	4606      	mov	r6, r0
	}

	data->char_out = c;
   2db1c:	4641      	mov	r1, r8
   2db1e:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   2db22:	2201      	movs	r2, #1
   2db24:	4628      	mov	r0, r5
   2db26:	f00d fb8f 	bl	3b248 <tx_start>
	__asm__ volatile(
   2db2a:	f386 8811 	msr	BASEPRI, r6
   2db2e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   2db32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2db36:	bf00      	nop
   2db38:	2000da77 	.word	0x2000da77

0002db3c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   2db3c:	b538      	push	{r3, r4, r5, lr}
   2db3e:	4604      	mov	r4, r0
   2db40:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2db42:	f101 0016 	add.w	r0, r1, #22
   2db46:	f001 fe89 	bl	2f85c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2db4a:	4b14      	ldr	r3, [pc, #80]	; (2db9c <endtx_stoptx_ppi_init+0x60>)
   2db4c:	4298      	cmp	r0, r3
   2db4e:	d111      	bne.n	2db74 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   2db50:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   2db52:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   2db56:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2db58:	4a11      	ldr	r2, [pc, #68]	; (2dba0 <endtx_stoptx_ppi_init+0x64>)
   2db5a:	33a2      	adds	r3, #162	; 0xa2
   2db5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2db60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2db64:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2db66:	7da9      	ldrb	r1, [r5, #22]
   2db68:	2301      	movs	r3, #1
   2db6a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   2db6c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   2db70:	2000      	movs	r0, #0
}
   2db72:	bd38      	pop	{r3, r4, r5, pc}
   2db74:	4b0b      	ldr	r3, [pc, #44]	; (2dba4 <endtx_stoptx_ppi_init+0x68>)
   2db76:	4a0c      	ldr	r2, [pc, #48]	; (2dba8 <endtx_stoptx_ppi_init+0x6c>)
   2db78:	1a9b      	subs	r3, r3, r2
   2db7a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   2db7c:	f04f 0100 	mov.w	r1, #0
   2db80:	2201      	movs	r2, #1
   2db82:	f362 0102 	bfi	r1, r2, #0, #3
   2db86:	f36f 01c5 	bfc	r1, #3, #3
   2db8a:	f363 118f 	bfi	r1, r3, #6, #10
   2db8e:	4807      	ldr	r0, [pc, #28]	; (2dbac <endtx_stoptx_ppi_init+0x70>)
   2db90:	f7f2 fc40 	bl	20414 <log_0>
		return -EIO;
   2db94:	f06f 0004 	mvn.w	r0, #4
   2db98:	e7eb      	b.n	2db72 <endtx_stoptx_ppi_init+0x36>
   2db9a:	bf00      	nop
   2db9c:	0bad0000 	.word	0x0bad0000
   2dba0:	4001f000 	.word	0x4001f000
   2dba4:	0003d2c4 	.word	0x0003d2c4
   2dba8:	0003d1a4 	.word	0x0003d1a4
   2dbac:	000406a8 	.word	0x000406a8

0002dbb0 <random_byte_get>:
	__asm__ volatile(
   2dbb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dbb4:	f3ef 8211 	mrs	r2, BASEPRI
   2dbb8:	f383 8812 	msr	BASEPRI_MAX, r3
   2dbbc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2dbc0:	4b09      	ldr	r3, [pc, #36]	; (2dbe8 <random_byte_get+0x38>)
   2dbc2:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2dbc4:	b16b      	cbz	r3, 2dbe2 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   2dbc6:	4b09      	ldr	r3, [pc, #36]	; (2dbec <random_byte_get+0x3c>)
   2dbc8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   2dbcc:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2dbce:	f503 7380 	add.w	r3, r3, #256	; 0x100
   2dbd2:	2100      	movs	r1, #0
   2dbd4:	6019      	str	r1, [r3, #0]
   2dbd6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2dbd8:	f382 8811 	msr	BASEPRI, r2
   2dbdc:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   2dbe0:	4770      	bx	lr
	int retval = -EAGAIN;
   2dbe2:	f06f 000a 	mvn.w	r0, #10
   2dbe6:	e7f7      	b.n	2dbd8 <random_byte_get+0x28>
   2dbe8:	4000d100 	.word	0x4000d100
   2dbec:	4000d000 	.word	0x4000d000

0002dbf0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   2dbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dbf4:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   2dbf6:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   2dbfa:	78c5      	ldrb	r5, [r0, #3]
   2dbfc:	462f      	mov	r7, r5
	__asm__ volatile(
   2dbfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dc02:	f3ef 8811 	mrs	r8, BASEPRI
   2dc06:	f383 8812 	msr	BASEPRI_MAX, r3
   2dc0a:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   2dc0e:	7800      	ldrb	r0, [r0, #0]
   2dc10:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2dc12:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   2dc16:	ebac 0c00 	sub.w	ip, ip, r0
   2dc1a:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   2dc1e:	4562      	cmp	r2, ip
   2dc20:	d901      	bls.n	2dc26 <rng_pool_get+0x36>
		len = available;
   2dc22:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2dc26:	1883      	adds	r3, r0, r2
   2dc28:	402b      	ands	r3, r5
   2dc2a:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   2dc2c:	f388 8811 	msr	BASEPRI, r8
   2dc30:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   2dc34:	460b      	mov	r3, r1
}
   2dc36:	e006      	b.n	2dc46 <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   2dc38:	1932      	adds	r2, r6, r4
   2dc3a:	7952      	ldrb	r2, [r2, #5]
   2dc3c:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   2dc40:	3401      	adds	r4, #1
   2dc42:	403c      	ands	r4, r7
	while (likely(len--)) {
   2dc44:	462a      	mov	r2, r5
   2dc46:	1e55      	subs	r5, r2, #1
   2dc48:	b2ad      	uxth	r5, r5
   2dc4a:	2a00      	cmp	r2, #0
   2dc4c:	d1f4      	bne.n	2dc38 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   2dc4e:	4570      	cmp	r0, lr
   2dc50:	d10d      	bne.n	2dc6e <rng_pool_get+0x7e>
	__asm__ volatile(
   2dc52:	f04f 0040 	mov.w	r0, #64	; 0x40
   2dc56:	f3ef 8211 	mrs	r2, BASEPRI
   2dc5a:	f380 8812 	msr	BASEPRI_MAX, r0
   2dc5e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   2dc62:	7830      	ldrb	r0, [r6, #0]
   2dc64:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   2dc66:	f382 8811 	msr	BASEPRI, r2
   2dc6a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   2dc6e:	1a5b      	subs	r3, r3, r1
   2dc70:	b298      	uxth	r0, r3
	available = available - len;
   2dc72:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   2dc76:	7933      	ldrb	r3, [r6, #4]
   2dc78:	4563      	cmp	r3, ip
   2dc7a:	d302      	bcc.n	2dc82 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2dc7c:	4b02      	ldr	r3, [pc, #8]	; (2dc88 <rng_pool_get+0x98>)
   2dc7e:	2201      	movs	r2, #1
   2dc80:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   2dc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dc86:	bf00      	nop
   2dc88:	4000d000 	.word	0x4000d000

0002dc8c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   2dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dc8e:	460d      	mov	r5, r1
   2dc90:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2dc92:	f013 0f01 	tst.w	r3, #1
   2dc96:	d103      	bne.n	2dca0 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2dc98:	4822      	ldr	r0, [pc, #136]	; (2dd24 <entropy_nrf5_get_entropy_isr+0x98>)
   2dc9a:	f7ff ffa9 	bl	2dbf0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2dc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   2dca0:	b90a      	cbnz	r2, 2dca6 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   2dca2:	4620      	mov	r0, r4
   2dca4:	e7fb      	b.n	2dc9e <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   2dca6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dcaa:	f3ef 8611 	mrs	r6, BASEPRI
   2dcae:	f383 8812 	msr	BASEPRI_MAX, r3
   2dcb2:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   2dcb6:	200d      	movs	r0, #13
   2dcb8:	f7f4 fa14 	bl	220e4 <arch_irq_is_enabled>
   2dcbc:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2dcbe:	200d      	movs	r0, #13
   2dcc0:	f7f4 f9fc 	bl	220bc <arch_irq_disable>
	__asm__ volatile(
   2dcc4:	f386 8811 	msr	BASEPRI, r6
   2dcc8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2dccc:	4b16      	ldr	r3, [pc, #88]	; (2dd28 <entropy_nrf5_get_entropy_isr+0x9c>)
   2dcce:	2200      	movs	r2, #0
   2dcd0:	601a      	str	r2, [r3, #0]
   2dcd2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2dcd4:	4b15      	ldr	r3, [pc, #84]	; (2dd2c <entropy_nrf5_get_entropy_isr+0xa0>)
   2dcd6:	2201      	movs	r2, #1
   2dcd8:	601a      	str	r2, [r3, #0]
   2dcda:	4b15      	ldr	r3, [pc, #84]	; (2dd30 <entropy_nrf5_get_entropy_isr+0xa4>)
   2dcdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2dce0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2dce4:	4626      	mov	r6, r4
   2dce6:	e004      	b.n	2dcf2 <entropy_nrf5_get_entropy_isr+0x66>
   2dce8:	f3bf 8f4f 	dsb	sy
				__WFE();
   2dcec:	bf20      	wfe
				__SEV();
   2dcee:	bf40      	sev
				__WFE();
   2dcf0:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2dcf2:	4b0d      	ldr	r3, [pc, #52]	; (2dd28 <entropy_nrf5_get_entropy_isr+0x9c>)
   2dcf4:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   2dcf6:	2b00      	cmp	r3, #0
   2dcf8:	d0f6      	beq.n	2dce8 <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   2dcfa:	f7ff ff59 	bl	2dbb0 <random_byte_get>
   2dcfe:	4b0c      	ldr	r3, [pc, #48]	; (2dd30 <entropy_nrf5_get_entropy_isr+0xa4>)
   2dd00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2dd04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   2dd08:	2800      	cmp	r0, #0
   2dd0a:	db02      	blt.n	2dd12 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   2dd0c:	3e01      	subs	r6, #1
   2dd0e:	b2b6      	uxth	r6, r6
   2dd10:	55a8      	strb	r0, [r5, r6]
		} while (len);
   2dd12:	2e00      	cmp	r6, #0
   2dd14:	d1ed      	bne.n	2dcf2 <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   2dd16:	2f00      	cmp	r7, #0
   2dd18:	d0c3      	beq.n	2dca2 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   2dd1a:	200d      	movs	r0, #13
   2dd1c:	f7f4 f9be 	bl	2209c <arch_irq_enable>
   2dd20:	e7bf      	b.n	2dca2 <entropy_nrf5_get_entropy_isr+0x16>
   2dd22:	bf00      	nop
   2dd24:	200089f0 	.word	0x200089f0
   2dd28:	4000d100 	.word	0x4000d100
   2dd2c:	4000d000 	.word	0x4000d000
   2dd30:	e000e100 	.word	0xe000e100

0002dd34 <isr>:
{
   2dd34:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2dd36:	f7ff ff3b 	bl	2dbb0 <random_byte_get>
	if (byte < 0) {
   2dd3a:	2800      	cmp	r0, #0
   2dd3c:	db06      	blt.n	2dd4c <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2dd3e:	b2c4      	uxtb	r4, r0
   2dd40:	4621      	mov	r1, r4
   2dd42:	480a      	ldr	r0, [pc, #40]	; (2dd6c <isr+0x38>)
   2dd44:	f00d fc16 	bl	3b574 <rng_pool_put>
	if (ret < 0) {
   2dd48:	2800      	cmp	r0, #0
   2dd4a:	db00      	blt.n	2dd4e <isr+0x1a>
}
   2dd4c:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   2dd4e:	4621      	mov	r1, r4
   2dd50:	4807      	ldr	r0, [pc, #28]	; (2dd70 <isr+0x3c>)
   2dd52:	f00d fc0f 	bl	3b574 <rng_pool_put>
		if (ret < 0) {
   2dd56:	2800      	cmp	r0, #0
   2dd58:	db03      	blt.n	2dd62 <isr+0x2e>
	z_impl_k_sem_give(sem);
   2dd5a:	4806      	ldr	r0, [pc, #24]	; (2dd74 <isr+0x40>)
   2dd5c:	f002 fa86 	bl	3026c <z_impl_k_sem_give>
}
   2dd60:	e7f4      	b.n	2dd4c <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2dd62:	4b05      	ldr	r3, [pc, #20]	; (2dd78 <isr+0x44>)
   2dd64:	2201      	movs	r2, #1
   2dd66:	601a      	str	r2, [r3, #0]
}
   2dd68:	e7f7      	b.n	2dd5a <isr+0x26>
   2dd6a:	bf00      	nop
   2dd6c:	200089f0 	.word	0x200089f0
   2dd70:	20008a05 	.word	0x20008a05
   2dd74:	200089d8 	.word	0x200089d8
   2dd78:	4000d004 	.word	0x4000d004

0002dd7c <entropy_nrf5_get_entropy>:
{
   2dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd7e:	460f      	mov	r7, r1
   2dd80:	4614      	mov	r4, r2
	while (len) {
   2dd82:	e002      	b.n	2dd8a <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   2dd84:	1b64      	subs	r4, r4, r5
   2dd86:	b2a4      	uxth	r4, r4
		buf += bytes;
   2dd88:	442f      	add	r7, r5
	while (len) {
   2dd8a:	b1e4      	cbz	r4, 2ddc6 <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   2dd8c:	4e0f      	ldr	r6, [pc, #60]	; (2ddcc <entropy_nrf5_get_entropy+0x50>)
   2dd8e:	f04f 32ff 	mov.w	r2, #4294967295
   2dd92:	f04f 33ff 	mov.w	r3, #4294967295
   2dd96:	4630      	mov	r0, r6
   2dd98:	f002 fa90 	bl	302bc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2dd9c:	4622      	mov	r2, r4
   2dd9e:	4639      	mov	r1, r7
   2dda0:	f106 0045 	add.w	r0, r6, #69	; 0x45
   2dda4:	f7ff ff24 	bl	2dbf0 <rng_pool_get>
   2dda8:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   2ddaa:	4630      	mov	r0, r6
   2ddac:	f002 fa5e 	bl	3026c <z_impl_k_sem_give>
		if (bytes == 0U) {
   2ddb0:	2d00      	cmp	r5, #0
   2ddb2:	d1e7      	bne.n	2dd84 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   2ddb4:	f04f 32ff 	mov.w	r2, #4294967295
   2ddb8:	f04f 33ff 	mov.w	r3, #4294967295
   2ddbc:	f106 0018 	add.w	r0, r6, #24
   2ddc0:	f002 fa7c 	bl	302bc <z_impl_k_sem_take>
			continue;
   2ddc4:	e7e1      	b.n	2dd8a <entropy_nrf5_get_entropy+0xe>
}
   2ddc6:	2000      	movs	r0, #0
   2ddc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ddca:	bf00      	nop
   2ddcc:	200089c0 	.word	0x200089c0

0002ddd0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   2ddd0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2ddd2:	4c18      	ldr	r4, [pc, #96]	; (2de34 <entropy_nrf5_init+0x64>)
   2ddd4:	2201      	movs	r2, #1
   2ddd6:	4611      	mov	r1, r2
   2ddd8:	4620      	mov	r0, r4
   2ddda:	f00e fb08 	bl	3c3ee <z_impl_k_sem_init>
   2ddde:	2201      	movs	r2, #1
   2dde0:	2100      	movs	r1, #0
   2dde2:	f104 0018 	add.w	r0, r4, #24
   2dde6:	f00e fb02 	bl	3c3ee <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   2ddea:	2204      	movs	r2, #4
   2ddec:	2108      	movs	r1, #8
   2ddee:	f104 0045 	add.w	r0, r4, #69	; 0x45
   2ddf2:	f00d fbd3 	bl	3b59c <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   2ddf6:	220c      	movs	r2, #12
   2ddf8:	2110      	movs	r1, #16
   2ddfa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ddfe:	f00d fbcd 	bl	3b59c <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   2de02:	4b0d      	ldr	r3, [pc, #52]	; (2de38 <entropy_nrf5_init+0x68>)
   2de04:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2de08:	f022 0201 	bic.w	r2, r2, #1
   2de0c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2de10:	4a0a      	ldr	r2, [pc, #40]	; (2de3c <entropy_nrf5_init+0x6c>)
   2de12:	2400      	movs	r4, #0
   2de14:	6014      	str	r4, [r2, #0]
   2de16:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   2de18:	2101      	movs	r1, #1
   2de1a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2de1e:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   2de20:	4622      	mov	r2, r4
   2de22:	200d      	movs	r0, #13
   2de24:	f7f4 f96c 	bl	22100 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2de28:	200d      	movs	r0, #13
   2de2a:	f7f4 f937 	bl	2209c <arch_irq_enable>

	return 0;
}
   2de2e:	4620      	mov	r0, r4
   2de30:	bd10      	pop	{r4, pc}
   2de32:	bf00      	nop
   2de34:	200089c0 	.word	0x200089c0
   2de38:	4000d000 	.word	0x4000d000
   2de3c:	4000d100 	.word	0x4000d100

0002de40 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2de40:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   2de44:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   2de48:	4b01      	ldr	r3, [pc, #4]	; (2de50 <set_comparator+0x10>)
   2de4a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   2de4e:	4770      	bx	lr
   2de50:	40011000 	.word	0x40011000

0002de54 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   2de54:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   2de58:	4b01      	ldr	r3, [pc, #4]	; (2de60 <get_comparator+0xc>)
   2de5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   2de5e:	4770      	bx	lr
   2de60:	40011000 	.word	0x40011000

0002de64 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2de64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2de68:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   2de6a:	4a02      	ldr	r2, [pc, #8]	; (2de74 <event_enable+0x10>)
   2de6c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   2de70:	4770      	bx	lr
   2de72:	bf00      	nop
   2de74:	40011000 	.word	0x40011000

0002de78 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2de78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2de7c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2de7e:	4a02      	ldr	r2, [pc, #8]	; (2de88 <event_disable+0x10>)
   2de80:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   2de84:	4770      	bx	lr
   2de86:	bf00      	nop
   2de88:	40011000 	.word	0x40011000

0002de8c <counter>:
     return p_reg->COUNTER;
   2de8c:	4b01      	ldr	r3, [pc, #4]	; (2de94 <counter+0x8>)
   2de8e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   2de92:	4770      	bx	lr
   2de94:	40011000 	.word	0x40011000

0002de98 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   2de98:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2de9a:	2301      	movs	r3, #1
   2de9c:	4083      	lsls	r3, r0
   2de9e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2dea0:	4a10      	ldr	r2, [pc, #64]	; (2dee4 <compare_int_lock+0x4c>)
   2dea2:	f3bf 8f5b 	dmb	ish
   2dea6:	e852 1f00 	ldrex	r1, [r2]
   2deaa:	ea01 0c04 	and.w	ip, r1, r4
   2deae:	e842 ce00 	strex	lr, ip, [r2]
   2deb2:	f1be 0f00 	cmp.w	lr, #0
   2deb6:	d1f6      	bne.n	2dea6 <compare_int_lock+0xe>
   2deb8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2debc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2dec0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   2dec4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2dec8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   2decc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   2ded0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2ded4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   2ded8:	420b      	tst	r3, r1
}
   2deda:	bf14      	ite	ne
   2dedc:	2001      	movne	r0, #1
   2dede:	2000      	moveq	r0, #0
   2dee0:	bd10      	pop	{r4, pc}
   2dee2:	bf00      	nop
   2dee4:	20008a18 	.word	0x20008a18

0002dee8 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   2dee8:	b570      	push	{r4, r5, r6, lr}
   2deea:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   2deec:	f00d fb9e 	bl	3b62c <full_int_lock>
   2def0:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2def2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2def6:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   2def8:	4a17      	ldr	r2, [pc, #92]	; (2df58 <channel_processing_check_and_clear+0x70>)
   2defa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   2defe:	4213      	tst	r3, r2
   2df00:	d105      	bne.n	2df0e <channel_processing_check_and_clear+0x26>
	bool result = false;
   2df02:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   2df04:	4628      	mov	r0, r5
   2df06:	f00d fb95 	bl	3b634 <full_int_unlock>

	return result;
}
   2df0a:	4630      	mov	r0, r6
   2df0c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2df0e:	2301      	movs	r3, #1
   2df10:	40a3      	lsls	r3, r4
   2df12:	43db      	mvns	r3, r3
   2df14:	4a11      	ldr	r2, [pc, #68]	; (2df5c <channel_processing_check_and_clear+0x74>)
   2df16:	f3bf 8f5b 	dmb	ish
   2df1a:	e852 1f00 	ldrex	r1, [r2]
   2df1e:	ea01 0003 	and.w	r0, r1, r3
   2df22:	e842 0600 	strex	r6, r0, [r2]
   2df26:	2e00      	cmp	r6, #0
   2df28:	d1f7      	bne.n	2df1a <channel_processing_check_and_clear+0x32>
   2df2a:	f3bf 8f5b 	dmb	ish
   2df2e:	b959      	cbnz	r1, 2df48 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2df30:	f104 0350 	add.w	r3, r4, #80	; 0x50
   2df34:	009b      	lsls	r3, r3, #2
   2df36:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2df38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2df3c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2df40:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2df42:	b113      	cbz	r3, 2df4a <channel_processing_check_and_clear+0x62>
   2df44:	2301      	movs	r3, #1
   2df46:	e000      	b.n	2df4a <channel_processing_check_and_clear+0x62>
   2df48:	2301      	movs	r3, #1
		if (result) {
   2df4a:	461e      	mov	r6, r3
   2df4c:	2b00      	cmp	r3, #0
   2df4e:	d0d9      	beq.n	2df04 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   2df50:	4620      	mov	r0, r4
   2df52:	f00d fb5c 	bl	3b60e <event_clear>
   2df56:	e7d5      	b.n	2df04 <channel_processing_check_and_clear+0x1c>
   2df58:	40011000 	.word	0x40011000
   2df5c:	20008a14 	.word	0x20008a14

0002df60 <compare_int_unlock>:
	if (key) {
   2df60:	b901      	cbnz	r1, 2df64 <compare_int_unlock+0x4>
}
   2df62:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   2df64:	2301      	movs	r3, #1
   2df66:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2df68:	4a11      	ldr	r2, [pc, #68]	; (2dfb0 <compare_int_unlock+0x50>)
   2df6a:	f3bf 8f5b 	dmb	ish
   2df6e:	e852 1f00 	ldrex	r1, [r2]
   2df72:	4319      	orrs	r1, r3
   2df74:	e842 1c00 	strex	ip, r1, [r2]
   2df78:	f1bc 0f00 	cmp.w	ip, #0
   2df7c:	d1f7      	bne.n	2df6e <compare_int_unlock+0xe>
   2df7e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2df82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2df86:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   2df88:	4a0a      	ldr	r2, [pc, #40]	; (2dfb4 <compare_int_unlock+0x54>)
   2df8a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2df8e:	f3bf 8f5b 	dmb	ish
   2df92:	4b09      	ldr	r3, [pc, #36]	; (2dfb8 <compare_int_unlock+0x58>)
   2df94:	681b      	ldr	r3, [r3, #0]
   2df96:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2df9a:	fa23 f000 	lsr.w	r0, r3, r0
   2df9e:	f010 0f01 	tst.w	r0, #1
   2dfa2:	d0de      	beq.n	2df62 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2dfa4:	4b05      	ldr	r3, [pc, #20]	; (2dfbc <compare_int_unlock+0x5c>)
   2dfa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2dfaa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2dfae:	e7d8      	b.n	2df62 <compare_int_unlock+0x2>
   2dfb0:	20008a18 	.word	0x20008a18
   2dfb4:	40011000 	.word	0x40011000
   2dfb8:	20008a14 	.word	0x20008a14
   2dfbc:	e000e100 	.word	0xe000e100

0002dfc0 <sys_clock_timeout_handler>:
{
   2dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dfc2:	4607      	mov	r7, r0
   2dfc4:	4614      	mov	r4, r2
   2dfc6:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   2dfc8:	4610      	mov	r0, r2
   2dfca:	4619      	mov	r1, r3
   2dfcc:	f00d fb2b 	bl	3b626 <absolute_time_to_cc>
   2dfd0:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2dfd2:	4b15      	ldr	r3, [pc, #84]	; (2e028 <sys_clock_timeout_handler+0x68>)
   2dfd4:	681a      	ldr	r2, [r3, #0]
   2dfd6:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   2dfd8:	601c      	str	r4, [r3, #0]
   2dfda:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2dfdc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2dfe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2dfe4:	d308      	bcc.n	2dff8 <sys_clock_timeout_handler+0x38>
	return false;
   2dfe6:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2dfe8:	f003 f89c 	bl	31124 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   2dfec:	4638      	mov	r0, r7
   2dfee:	f7ff ff31 	bl	2de54 <get_comparator>
   2dff2:	42a8      	cmp	r0, r5
   2dff4:	d00c      	beq.n	2e010 <sys_clock_timeout_handler+0x50>
}
   2dff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2dff8:	4b0c      	ldr	r3, [pc, #48]	; (2e02c <sys_clock_timeout_handler+0x6c>)
   2dffa:	6819      	ldr	r1, [r3, #0]
   2dffc:	0a0b      	lsrs	r3, r1, #8
   2dffe:	060a      	lsls	r2, r1, #24
   2e000:	1952      	adds	r2, r2, r5
   2e002:	f143 0300 	adc.w	r3, r3, #0
   2e006:	490a      	ldr	r1, [pc, #40]	; (2e030 <sys_clock_timeout_handler+0x70>)
   2e008:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   2e00c:	2401      	movs	r4, #1
   2e00e:	e7eb      	b.n	2dfe8 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   2e010:	b11c      	cbz	r4, 2e01a <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   2e012:	4638      	mov	r0, r7
   2e014:	f7ff ff26 	bl	2de64 <event_enable>
}
   2e018:	e7ed      	b.n	2dff6 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   2e01a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2e01e:	4638      	mov	r0, r7
   2e020:	f7ff ff0e 	bl	2de40 <set_comparator>
   2e024:	e7f5      	b.n	2e012 <sys_clock_timeout_handler+0x52>
   2e026:	bf00      	nop
   2e028:	20006ad0 	.word	0x20006ad0
   2e02c:	20008a1c 	.word	0x20008a1c
   2e030:	20006ab8 	.word	0x20006ab8

0002e034 <z_nrf_rtc_timer_read>:
{
   2e034:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2e036:	4b0d      	ldr	r3, [pc, #52]	; (2e06c <z_nrf_rtc_timer_read+0x38>)
   2e038:	681b      	ldr	r3, [r3, #0]
   2e03a:	0a1d      	lsrs	r5, r3, #8
   2e03c:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2e03e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   2e042:	f7ff ff23 	bl	2de8c <counter>
   2e046:	4603      	mov	r3, r0
	val += cntr;
   2e048:	1820      	adds	r0, r4, r0
   2e04a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2e04e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2e052:	d20a      	bcs.n	2e06a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   2e054:	4b06      	ldr	r3, [pc, #24]	; (2e070 <z_nrf_rtc_timer_read+0x3c>)
   2e056:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e05a:	4299      	cmp	r1, r3
   2e05c:	bf08      	it	eq
   2e05e:	4290      	cmpeq	r0, r2
   2e060:	d203      	bcs.n	2e06a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   2e062:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2e066:	f141 0100 	adc.w	r1, r1, #0
}
   2e06a:	bd38      	pop	{r3, r4, r5, pc}
   2e06c:	20008a1c 	.word	0x20008a1c
   2e070:	20006ab8 	.word	0x20006ab8

0002e074 <compare_set_nolocks>:
{
   2e074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e078:	4606      	mov	r6, r0
   2e07a:	4614      	mov	r4, r2
   2e07c:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   2e07e:	4610      	mov	r0, r2
   2e080:	4619      	mov	r1, r3
   2e082:	f00d fad0 	bl	3b626 <absolute_time_to_cc>
   2e086:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2e088:	f7ff ffd4 	bl	2e034 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2e08c:	42a9      	cmp	r1, r5
   2e08e:	bf08      	it	eq
   2e090:	42a0      	cmpeq	r0, r4
   2e092:	d21e      	bcs.n	2e0d2 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   2e094:	ebb4 0800 	subs.w	r8, r4, r0
   2e098:	eb65 0901 	sbc.w	r9, r5, r1
   2e09c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2e0a0:	2300      	movs	r3, #0
   2e0a2:	454b      	cmp	r3, r9
   2e0a4:	bf08      	it	eq
   2e0a6:	4542      	cmpeq	r2, r8
   2e0a8:	d32e      	bcc.n	2e108 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   2e0aa:	4b19      	ldr	r3, [pc, #100]	; (2e110 <compare_set_nolocks+0x9c>)
   2e0ac:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   2e0b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2e0b4:	42ab      	cmp	r3, r5
   2e0b6:	bf08      	it	eq
   2e0b8:	42a2      	cmpeq	r2, r4
   2e0ba:	d018      	beq.n	2e0ee <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   2e0bc:	4639      	mov	r1, r7
   2e0be:	4630      	mov	r0, r6
   2e0c0:	f00d fabb 	bl	3b63a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   2e0c4:	4639      	mov	r1, r7
   2e0c6:	f00d fa9e 	bl	3b606 <counter_sub>
   2e0ca:	1824      	adds	r4, r4, r0
   2e0cc:	f145 0500 	adc.w	r5, r5, #0
   2e0d0:	e00d      	b.n	2e0ee <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   2e0d2:	2301      	movs	r3, #1
   2e0d4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e0d6:	4a0f      	ldr	r2, [pc, #60]	; (2e114 <compare_set_nolocks+0xa0>)
   2e0d8:	f3bf 8f5b 	dmb	ish
   2e0dc:	e852 1f00 	ldrex	r1, [r2]
   2e0e0:	4319      	orrs	r1, r3
   2e0e2:	e842 1000 	strex	r0, r1, [r2]
   2e0e6:	2800      	cmp	r0, #0
   2e0e8:	d1f8      	bne.n	2e0dc <compare_set_nolocks+0x68>
   2e0ea:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   2e0ee:	4b08      	ldr	r3, [pc, #32]	; (2e110 <compare_set_nolocks+0x9c>)
   2e0f0:	0132      	lsls	r2, r6, #4
   2e0f2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   2e0f6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   2e0fa:	9908      	ldr	r1, [sp, #32]
   2e0fc:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   2e0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e100:	6073      	str	r3, [r6, #4]
	return ret;
   2e102:	2000      	movs	r0, #0
}
   2e104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   2e108:	f06f 0015 	mvn.w	r0, #21
   2e10c:	e7fa      	b.n	2e104 <compare_set_nolocks+0x90>
   2e10e:	bf00      	nop
   2e110:	20006ac0 	.word	0x20006ac0
   2e114:	20008a14 	.word	0x20008a14

0002e118 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   2e118:	b530      	push	{r4, r5, lr}
   2e11a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   2e11c:	2300      	movs	r3, #0
   2e11e:	4a1e      	ldr	r2, [pc, #120]	; (2e198 <sys_clock_driver_init+0x80>)
   2e120:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2e124:	2b00      	cmp	r3, #0
   2e126:	dd25      	ble.n	2e174 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   2e128:	4c1b      	ldr	r4, [pc, #108]	; (2e198 <sys_clock_driver_init+0x80>)
   2e12a:	2502      	movs	r5, #2
   2e12c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e130:	4b1a      	ldr	r3, [pc, #104]	; (2e19c <sys_clock_driver_init+0x84>)
   2e132:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2e136:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2e13a:	2200      	movs	r2, #0
   2e13c:	2101      	movs	r1, #1
   2e13e:	2011      	movs	r0, #17
   2e140:	f7f3 ffde 	bl	22100 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2e144:	2011      	movs	r0, #17
   2e146:	f7f3 ffa9 	bl	2209c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2e14a:	2301      	movs	r3, #1
   2e14c:	4a14      	ldr	r2, [pc, #80]	; (2e1a0 <sys_clock_driver_init+0x88>)
   2e14e:	6013      	str	r3, [r2, #0]
   2e150:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2e152:	4a14      	ldr	r2, [pc, #80]	; (2e1a4 <sys_clock_driver_init+0x8c>)
   2e154:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2e156:	2400      	movs	r4, #0
   2e158:	9401      	str	r4, [sp, #4]
   2e15a:	4b13      	ldr	r3, [pc, #76]	; (2e1a8 <sys_clock_driver_init+0x90>)
   2e15c:	9300      	str	r3, [sp, #0]
   2e15e:	4a13      	ldr	r2, [pc, #76]	; (2e1ac <sys_clock_driver_init+0x94>)
   2e160:	2300      	movs	r3, #0
   2e162:	4620      	mov	r0, r4
   2e164:	f00d faa4 	bl	3b6b0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2e168:	4628      	mov	r0, r5
   2e16a:	f7fe ff37 	bl	2cfdc <z_nrf_clock_control_lf_on>

	return 0;
}
   2e16e:	4620      	mov	r0, r4
   2e170:	b003      	add	sp, #12
   2e172:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2e174:	4a0e      	ldr	r2, [pc, #56]	; (2e1b0 <sys_clock_driver_init+0x98>)
   2e176:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2e17a:	f04f 30ff 	mov.w	r0, #4294967295
   2e17e:	f04f 31ff 	mov.w	r1, #4294967295
   2e182:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2e186:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2e18a:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   2e18c:	4902      	ldr	r1, [pc, #8]	; (2e198 <sys_clock_driver_init+0x80>)
   2e18e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2e192:	3301      	adds	r3, #1
   2e194:	e7c6      	b.n	2e124 <sys_clock_driver_init+0xc>
   2e196:	bf00      	nop
   2e198:	40011000 	.word	0x40011000
   2e19c:	e000e100 	.word	0xe000e100
   2e1a0:	40011008 	.word	0x40011008
   2e1a4:	20008a18 	.word	0x20008a18
   2e1a8:	0002dfc1 	.word	0x0002dfc1
   2e1ac:	007fffff 	.word	0x007fffff
   2e1b0:	20006ac0 	.word	0x20006ac0

0002e1b4 <process_channel>:
{
   2e1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e1b8:	b082      	sub	sp, #8
   2e1ba:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   2e1bc:	f7ff fe94 	bl	2dee8 <channel_processing_check_and_clear>
   2e1c0:	b910      	cbnz	r0, 2e1c8 <process_channel+0x14>
}
   2e1c2:	b002      	add	sp, #8
   2e1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   2e1c8:	f7ff ff34 	bl	2e034 <z_nrf_rtc_timer_read>
   2e1cc:	4606      	mov	r6, r0
   2e1ce:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   2e1d0:	f00d fa2c 	bl	3b62c <full_int_lock>
   2e1d4:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   2e1d6:	4b13      	ldr	r3, [pc, #76]	; (2e224 <process_channel+0x70>)
   2e1d8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2e1dc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   2e1e0:	454f      	cmp	r7, r9
   2e1e2:	bf08      	it	eq
   2e1e4:	4546      	cmpeq	r6, r8
   2e1e6:	d20b      	bcs.n	2e200 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   2e1e8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   2e1ea:	4650      	mov	r0, sl
   2e1ec:	f00d fa22 	bl	3b634 <full_int_unlock>
		if (handler) {
   2e1f0:	2e00      	cmp	r6, #0
   2e1f2:	d0e6      	beq.n	2e1c2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   2e1f4:	9500      	str	r5, [sp, #0]
   2e1f6:	4642      	mov	r2, r8
   2e1f8:	464b      	mov	r3, r9
   2e1fa:	4620      	mov	r0, r4
   2e1fc:	47b0      	blx	r6
}
   2e1fe:	e7e0      	b.n	2e1c2 <process_channel+0xe>
			handler = cc_data[chan].callback;
   2e200:	4a08      	ldr	r2, [pc, #32]	; (2e224 <process_channel+0x70>)
   2e202:	0123      	lsls	r3, r4, #4
   2e204:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   2e208:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   2e20a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   2e20c:	2000      	movs	r0, #0
   2e20e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2e210:	f04f 32ff 	mov.w	r2, #4294967295
   2e214:	f04f 33ff 	mov.w	r3, #4294967295
   2e218:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   2e21c:	4620      	mov	r0, r4
   2e21e:	f7ff fe2b 	bl	2de78 <event_disable>
   2e222:	e7e2      	b.n	2e1ea <process_channel+0x36>
   2e224:	20006ac0 	.word	0x20006ac0

0002e228 <rtc_nrf_isr>:
{
   2e228:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   2e22a:	4b0d      	ldr	r3, [pc, #52]	; (2e260 <rtc_nrf_isr+0x38>)
   2e22c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2e230:	f013 0f02 	tst.w	r3, #2
   2e234:	d00a      	beq.n	2e24c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e236:	4b0b      	ldr	r3, [pc, #44]	; (2e264 <rtc_nrf_isr+0x3c>)
   2e238:	681b      	ldr	r3, [r3, #0]
   2e23a:	b13b      	cbz	r3, 2e24c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e23c:	4b09      	ldr	r3, [pc, #36]	; (2e264 <rtc_nrf_isr+0x3c>)
   2e23e:	2200      	movs	r2, #0
   2e240:	601a      	str	r2, [r3, #0]
   2e242:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   2e244:	4a08      	ldr	r2, [pc, #32]	; (2e268 <rtc_nrf_isr+0x40>)
   2e246:	6813      	ldr	r3, [r2, #0]
   2e248:	3301      	adds	r3, #1
   2e24a:	6013      	str	r3, [r2, #0]
{
   2e24c:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2e24e:	2c00      	cmp	r4, #0
   2e250:	dd00      	ble.n	2e254 <rtc_nrf_isr+0x2c>
}
   2e252:	bd10      	pop	{r4, pc}
		process_channel(chan);
   2e254:	4620      	mov	r0, r4
   2e256:	f7ff ffad 	bl	2e1b4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2e25a:	3401      	adds	r4, #1
   2e25c:	e7f7      	b.n	2e24e <rtc_nrf_isr+0x26>
   2e25e:	bf00      	nop
   2e260:	40011000 	.word	0x40011000
   2e264:	40011104 	.word	0x40011104
   2e268:	20008a1c 	.word	0x20008a1c

0002e26c <sys_clock_set_timeout>:
{
   2e26c:	b510      	push	{r4, lr}
   2e26e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2e270:	f1b0 3fff 	cmp.w	r0, #4294967295
   2e274:	d007      	beq.n	2e286 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2e276:	1e44      	subs	r4, r0, #1
   2e278:	2c00      	cmp	r4, #0
   2e27a:	dd07      	ble.n	2e28c <sys_clock_set_timeout+0x20>
   2e27c:	4b11      	ldr	r3, [pc, #68]	; (2e2c4 <sys_clock_set_timeout+0x58>)
   2e27e:	429c      	cmp	r4, r3
   2e280:	dd05      	ble.n	2e28e <sys_clock_set_timeout+0x22>
   2e282:	4c11      	ldr	r4, [pc, #68]	; (2e2c8 <sys_clock_set_timeout+0x5c>)
   2e284:	e003      	b.n	2e28e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2e286:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   2e28a:	e7f4      	b.n	2e276 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2e28c:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2e28e:	f7ff fed1 	bl	2e034 <z_nrf_rtc_timer_read>
   2e292:	4b0e      	ldr	r3, [pc, #56]	; (2e2cc <sys_clock_set_timeout+0x60>)
   2e294:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e298:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   2e29a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2e29e:	d300      	bcc.n	2e2a2 <sys_clock_set_timeout+0x36>
		ticks = 0;
   2e2a0:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2e2a2:	4404      	add	r4, r0
   2e2a4:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   2e2a6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   2e2aa:	d300      	bcc.n	2e2ae <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   2e2ac:	4c06      	ldr	r4, [pc, #24]	; (2e2c8 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2e2ae:	2000      	movs	r0, #0
   2e2b0:	9001      	str	r0, [sp, #4]
   2e2b2:	4907      	ldr	r1, [pc, #28]	; (2e2d0 <sys_clock_set_timeout+0x64>)
   2e2b4:	9100      	str	r1, [sp, #0]
   2e2b6:	1912      	adds	r2, r2, r4
   2e2b8:	f143 0300 	adc.w	r3, r3, #0
   2e2bc:	f00d f9f8 	bl	3b6b0 <compare_set>
}
   2e2c0:	b002      	add	sp, #8
   2e2c2:	bd10      	pop	{r4, pc}
   2e2c4:	007ffffe 	.word	0x007ffffe
   2e2c8:	007fffff 	.word	0x007fffff
   2e2cc:	20006ad0 	.word	0x20006ad0
   2e2d0:	0002dfc1 	.word	0x0002dfc1

0002e2d4 <sys_clock_elapsed>:
{
   2e2d4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2e2d6:	f7ff fead 	bl	2e034 <z_nrf_rtc_timer_read>
   2e2da:	4b02      	ldr	r3, [pc, #8]	; (2e2e4 <sys_clock_elapsed+0x10>)
   2e2dc:	681b      	ldr	r3, [r3, #0]
}
   2e2de:	1ac0      	subs	r0, r0, r3
   2e2e0:	bd08      	pop	{r3, pc}
   2e2e2:	bf00      	nop
   2e2e4:	20006ad0 	.word	0x20006ad0

0002e2e8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   2e2e8:	b508      	push	{r3, lr}
   2e2ea:	4602      	mov	r2, r0
   2e2ec:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   2e2ee:	4802      	ldr	r0, [pc, #8]	; (2e2f8 <multithreading_lock_acquire+0x10>)
   2e2f0:	f001 feb2 	bl	30058 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   2e2f4:	bd08      	pop	{r3, pc}
   2e2f6:	bf00      	nop
   2e2f8:	20000ad0 	.word	0x20000ad0

0002e2fc <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   2e2fc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   2e2fe:	4802      	ldr	r0, [pc, #8]	; (2e308 <multithreading_lock_release+0xc>)
   2e300:	f001 ff34 	bl	3016c <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   2e304:	bd08      	pop	{r3, pc}
   2e306:	bf00      	nop
   2e308:	20000ad0 	.word	0x20000ad0

0002e30c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2e30c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   2e30e:	f7f2 f8b1 	bl	20474 <z_impl_log_panic>
   2e312:	4b09      	ldr	r3, [pc, #36]	; (2e338 <k_sys_fatal_error_handler+0x2c>)
   2e314:	4a09      	ldr	r2, [pc, #36]	; (2e33c <k_sys_fatal_error_handler+0x30>)
   2e316:	1a9b      	subs	r3, r3, r2
   2e318:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2e31a:	f04f 0100 	mov.w	r1, #0
   2e31e:	2201      	movs	r2, #1
   2e320:	f362 0102 	bfi	r1, r2, #0, #3
   2e324:	f36f 01c5 	bfc	r1, #3, #3
   2e328:	f363 118f 	bfi	r1, r3, #6, #10
   2e32c:	4804      	ldr	r0, [pc, #16]	; (2e340 <k_sys_fatal_error_handler+0x34>)
   2e32e:	f7f2 f871 	bl	20414 <log_0>
		sys_arch_reboot(0);
   2e332:	2000      	movs	r0, #0
   2e334:	f7f4 fdb4 	bl	22ea0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2e338:	0003d22c 	.word	0x0003d22c
   2e33c:	0003d1a4 	.word	0x0003d1a4
   2e340:	0004078c 	.word	0x0004078c

0002e344 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   2e344:	b510      	push	{r4, lr}
   2e346:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   2e348:	4a03      	ldr	r2, [pc, #12]	; (2e358 <rand_prio_low_vector_get_blocking+0x14>)
   2e34a:	6810      	ldr	r0, [r2, #0]
   2e34c:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   2e34e:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2e350:	680c      	ldr	r4, [r1, #0]
   2e352:	4619      	mov	r1, r3
   2e354:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   2e356:	bd10      	pop	{r4, pc}
   2e358:	20008a20 	.word	0x20008a20

0002e35c <sdc_assertion_handler>:
{
   2e35c:	b538      	push	{r3, r4, r5, lr}
   2e35e:	460d      	mov	r5, r1
   2e360:	4b0d      	ldr	r3, [pc, #52]	; (2e398 <sdc_assertion_handler+0x3c>)
   2e362:	4a0e      	ldr	r2, [pc, #56]	; (2e39c <sdc_assertion_handler+0x40>)
   2e364:	1a9b      	subs	r3, r3, r2
   2e366:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   2e368:	f04f 0400 	mov.w	r4, #0
   2e36c:	2201      	movs	r2, #1
   2e36e:	f362 0402 	bfi	r4, r2, #0, #3
   2e372:	f36f 04c5 	bfc	r4, #3, #3
   2e376:	f363 148f 	bfi	r4, r3, #6, #10
   2e37a:	f7f1 fe1d 	bl	1ffb8 <z_log_strdup>
   2e37e:	4601      	mov	r1, r0
   2e380:	4623      	mov	r3, r4
   2e382:	462a      	mov	r2, r5
   2e384:	4806      	ldr	r0, [pc, #24]	; (2e3a0 <sdc_assertion_handler+0x44>)
   2e386:	f7f1 ffc5 	bl	20314 <log_2>
	k_oops();
   2e38a:	4040      	eors	r0, r0
   2e38c:	f380 8811 	msr	BASEPRI, r0
   2e390:	f04f 0003 	mov.w	r0, #3
   2e394:	df02      	svc	2
}
   2e396:	bd38      	pop	{r3, r4, r5, pc}
   2e398:	0003d2a4 	.word	0x0003d2a4
   2e39c:	0003d1a4 	.word	0x0003d1a4
   2e3a0:	000407ac 	.word	0x000407ac

0002e3a4 <host_signal>:
{
   2e3a4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2e3a6:	4802      	ldr	r0, [pc, #8]	; (2e3b0 <host_signal+0xc>)
   2e3a8:	f001 ff60 	bl	3026c <z_impl_k_sem_give>
}
   2e3ac:	bd08      	pop	{r3, pc}
   2e3ae:	bf00      	nop
   2e3b0:	20000b68 	.word	0x20000b68

0002e3b4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   2e3b4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   2e3b6:	4803      	ldr	r0, [pc, #12]	; (2e3c4 <hci_driver_init+0x10>)
   2e3b8:	f7f7 f958 	bl	2566c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   2e3bc:	4802      	ldr	r0, [pc, #8]	; (2e3c8 <hci_driver_init+0x14>)
   2e3be:	f7e2 fa8b 	bl	108d8 <sdc_init>
	return err;
}
   2e3c2:	bd08      	pop	{r3, pc}
   2e3c4:	000408cc 	.word	0x000408cc
   2e3c8:	0002e35d 	.word	0x0002e35d

0002e3cc <acl_handle>:
{
   2e3cc:	b538      	push	{r3, r4, r5, lr}
   2e3ce:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e3d0:	f04f 30ff 	mov.w	r0, #4294967295
   2e3d4:	f04f 31ff 	mov.w	r1, #4294967295
   2e3d8:	f7ff ff86 	bl	2e2e8 <multithreading_lock_acquire>
	if (!errcode) {
   2e3dc:	4605      	mov	r5, r0
   2e3de:	b108      	cbz	r0, 2e3e4 <acl_handle+0x18>
}
   2e3e0:	4628      	mov	r0, r5
   2e3e2:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   2e3e4:	68a0      	ldr	r0, [r4, #8]
   2e3e6:	f7eb fd22 	bl	19e2e <sdc_hci_data_put>
   2e3ea:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2e3ec:	f7ff ff86 	bl	2e2fc <multithreading_lock_release>
		if (errcode) {
   2e3f0:	2d00      	cmp	r5, #0
   2e3f2:	d0f5      	beq.n	2e3e0 <acl_handle+0x14>
   2e3f4:	4801      	ldr	r0, [pc, #4]	; (2e3fc <acl_handle+0x30>)
   2e3f6:	f001 ff39 	bl	3026c <z_impl_k_sem_give>
}
   2e3fa:	e7f1      	b.n	2e3e0 <acl_handle+0x14>
   2e3fc:	20000b68 	.word	0x20000b68

0002e400 <cmd_handle>:
{
   2e400:	b538      	push	{r3, r4, r5, lr}
   2e402:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e404:	f04f 30ff 	mov.w	r0, #4294967295
   2e408:	f04f 31ff 	mov.w	r1, #4294967295
   2e40c:	f7ff ff6c 	bl	2e2e8 <multithreading_lock_acquire>
	if (!errcode) {
   2e410:	4604      	mov	r4, r0
   2e412:	b110      	cbz	r0, 2e41a <cmd_handle+0x1a>
	if (errcode) {
   2e414:	b144      	cbz	r4, 2e428 <cmd_handle+0x28>
}
   2e416:	4620      	mov	r0, r4
   2e418:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   2e41a:	68a8      	ldr	r0, [r5, #8]
   2e41c:	f000 f9c6 	bl	2e7ac <hci_internal_cmd_put>
   2e420:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2e422:	f7ff ff6b 	bl	2e2fc <multithreading_lock_release>
   2e426:	e7f5      	b.n	2e414 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   2e428:	4801      	ldr	r0, [pc, #4]	; (2e430 <cmd_handle+0x30>)
   2e42a:	f001 ff1f 	bl	3026c <z_impl_k_sem_give>
	return 0;
   2e42e:	e7f2      	b.n	2e416 <cmd_handle+0x16>
   2e430:	20000b68 	.word	0x20000b68

0002e434 <rand_prio_high_vector_get>:
{
   2e434:	b538      	push	{r3, r4, r5, lr}
   2e436:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   2e438:	4b07      	ldr	r3, [pc, #28]	; (2e458 <rand_prio_high_vector_get+0x24>)
   2e43a:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   2e43c:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   2e43e:	685d      	ldr	r5, [r3, #4]
   2e440:	b13d      	cbz	r5, 2e452 <rand_prio_high_vector_get+0x1e>
   2e442:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   2e444:	2300      	movs	r3, #0
   2e446:	4621      	mov	r1, r4
   2e448:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   2e44a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   2e44e:	b2c0      	uxtb	r0, r0
   2e450:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   2e452:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e456:	e7f8      	b.n	2e44a <rand_prio_high_vector_get+0x16>
   2e458:	20008a20 	.word	0x20008a20

0002e45c <rand_prio_low_vector_get>:
{
   2e45c:	b538      	push	{r3, r4, r5, lr}
   2e45e:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   2e460:	4b07      	ldr	r3, [pc, #28]	; (2e480 <rand_prio_low_vector_get+0x24>)
   2e462:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   2e464:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   2e466:	685d      	ldr	r5, [r3, #4]
   2e468:	b13d      	cbz	r5, 2e47a <rand_prio_low_vector_get+0x1e>
   2e46a:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   2e46c:	2300      	movs	r3, #0
   2e46e:	4621      	mov	r1, r4
   2e470:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   2e472:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   2e476:	b2c0      	uxtb	r0, r0
   2e478:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   2e47a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e47e:	e7f8      	b.n	2e472 <rand_prio_low_vector_get+0x16>
   2e480:	20008a20 	.word	0x20008a20

0002e484 <event_packet_process>:
{
   2e484:	b570      	push	{r4, r5, r6, lr}
   2e486:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   2e488:	f00d f92f 	bl	3b6ea <event_packet_is_discardable>
   2e48c:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   2e48e:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2e490:	461d      	mov	r5, r3
   2e492:	b183      	cbz	r3, 2e4b6 <event_packet_process+0x32>
   2e494:	2200      	movs	r2, #0
   2e496:	2300      	movs	r3, #0
   2e498:	4629      	mov	r1, r5
   2e49a:	f7f5 f8d1 	bl	23640 <bt_buf_get_evt>
	if (!evt_buf) {
   2e49e:	4606      	mov	r6, r0
   2e4a0:	b170      	cbz	r0, 2e4c0 <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   2e4a2:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2e4a4:	3202      	adds	r2, #2
   2e4a6:	4621      	mov	r1, r4
   2e4a8:	3008      	adds	r0, #8
   2e4aa:	f00c fb08 	bl	3aabe <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2e4ae:	4630      	mov	r0, r6
   2e4b0:	f7f7 f888 	bl	255c4 <bt_recv>
}
   2e4b4:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2e4b6:	f04f 32ff 	mov.w	r2, #4294967295
   2e4ba:	f04f 33ff 	mov.w	r3, #4294967295
   2e4be:	e7eb      	b.n	2e498 <event_packet_process+0x14>
		if (discardable) {
   2e4c0:	2d00      	cmp	r5, #0
   2e4c2:	d1f7      	bne.n	2e4b4 <event_packet_process+0x30>
   2e4c4:	4b08      	ldr	r3, [pc, #32]	; (2e4e8 <event_packet_process+0x64>)
   2e4c6:	4a09      	ldr	r2, [pc, #36]	; (2e4ec <event_packet_process+0x68>)
   2e4c8:	1a9b      	subs	r3, r3, r2
   2e4ca:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   2e4cc:	f04f 0100 	mov.w	r1, #0
   2e4d0:	2201      	movs	r2, #1
   2e4d2:	f362 0102 	bfi	r1, r2, #0, #3
   2e4d6:	f36f 01c5 	bfc	r1, #3, #3
   2e4da:	f363 118f 	bfi	r1, r3, #6, #10
   2e4de:	4804      	ldr	r0, [pc, #16]	; (2e4f0 <event_packet_process+0x6c>)
   2e4e0:	f7f1 ff98 	bl	20414 <log_0>
		return;
   2e4e4:	e7e6      	b.n	2e4b4 <event_packet_process+0x30>
   2e4e6:	bf00      	nop
   2e4e8:	0003d2a4 	.word	0x0003d2a4
   2e4ec:	0003d1a4 	.word	0x0003d1a4
   2e4f0:	000407d4 	.word	0x000407d4

0002e4f4 <data_packet_process>:
{
   2e4f4:	b538      	push	{r3, r4, r5, lr}
   2e4f6:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   2e4f8:	f04f 32ff 	mov.w	r2, #4294967295
   2e4fc:	f04f 33ff 	mov.w	r3, #4294967295
   2e500:	2003      	movs	r0, #3
   2e502:	f7f5 f873 	bl	235ec <bt_buf_get_rx>
	if (!data_buf) {
   2e506:	b150      	cbz	r0, 2e51e <data_packet_process+0x2a>
   2e508:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   2e50a:	8862      	ldrh	r2, [r4, #2]
   2e50c:	3204      	adds	r2, #4
   2e50e:	4621      	mov	r1, r4
   2e510:	3008      	adds	r0, #8
   2e512:	f00c fad4 	bl	3aabe <net_buf_simple_add_mem>
	bt_recv(data_buf);
   2e516:	4628      	mov	r0, r5
   2e518:	f7f7 f854 	bl	255c4 <bt_recv>
}
   2e51c:	bd38      	pop	{r3, r4, r5, pc}
   2e51e:	4b08      	ldr	r3, [pc, #32]	; (2e540 <data_packet_process+0x4c>)
   2e520:	4a08      	ldr	r2, [pc, #32]	; (2e544 <data_packet_process+0x50>)
   2e522:	1a9b      	subs	r3, r3, r2
   2e524:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   2e526:	f04f 0100 	mov.w	r1, #0
   2e52a:	2201      	movs	r2, #1
   2e52c:	f362 0102 	bfi	r1, r2, #0, #3
   2e530:	f36f 01c5 	bfc	r1, #3, #3
   2e534:	f363 118f 	bfi	r1, r3, #6, #10
   2e538:	4803      	ldr	r0, [pc, #12]	; (2e548 <data_packet_process+0x54>)
   2e53a:	f7f1 ff6b 	bl	20414 <log_0>
		return;
   2e53e:	e7ed      	b.n	2e51c <data_packet_process+0x28>
   2e540:	0003d2a4 	.word	0x0003d2a4
   2e544:	0003d1a4 	.word	0x0003d1a4
   2e548:	000407f0 	.word	0x000407f0

0002e54c <recv_thread>:
{
   2e54c:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   2e54e:	2500      	movs	r5, #0
	bool received_evt = false;
   2e550:	462c      	mov	r4, r5
   2e552:	e00a      	b.n	2e56a <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   2e554:	4d0b      	ldr	r5, [pc, #44]	; (2e584 <recv_thread+0x38>)
   2e556:	4628      	mov	r0, r5
   2e558:	f00d f8f7 	bl	3b74a <fetch_and_process_hci_evt>
   2e55c:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   2e55e:	4628      	mov	r0, r5
   2e560:	f00d f90c 	bl	3b77c <fetch_and_process_acl_data>
   2e564:	4605      	mov	r5, r0
	z_impl_k_yield();
   2e566:	f002 fbc1 	bl	30cec <z_impl_k_yield>
		if (!received_evt && !received_data) {
   2e56a:	2c00      	cmp	r4, #0
   2e56c:	d1f2      	bne.n	2e554 <recv_thread+0x8>
   2e56e:	2d00      	cmp	r5, #0
   2e570:	d1f0      	bne.n	2e554 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   2e572:	f04f 32ff 	mov.w	r2, #4294967295
   2e576:	f04f 33ff 	mov.w	r3, #4294967295
   2e57a:	4803      	ldr	r0, [pc, #12]	; (2e588 <recv_thread+0x3c>)
   2e57c:	f001 fe9e 	bl	302bc <z_impl_k_sem_take>
   2e580:	e7e8      	b.n	2e554 <recv_thread+0x8>
   2e582:	bf00      	nop
   2e584:	20008a24 	.word	0x20008a24
   2e588:	20000b68 	.word	0x20000b68

0002e58c <configure_memory_usage>:
{
   2e58c:	b500      	push	{lr}
   2e58e:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   2e590:	2314      	movs	r3, #20
   2e592:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e596:	aa01      	add	r2, sp, #4
   2e598:	2101      	movs	r1, #1
   2e59a:	2000      	movs	r0, #0
   2e59c:	f7e2 f916 	bl	107cc <sdc_cfg_set>
	if (required_memory < 0) {
   2e5a0:	2800      	cmp	r0, #0
   2e5a2:	db3b      	blt.n	2e61c <configure_memory_usage+0x90>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2e5a4:	2000      	movs	r0, #0
   2e5a6:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e5aa:	aa01      	add	r2, sp, #4
   2e5ac:	2102      	movs	r1, #2
   2e5ae:	f7e2 f90d 	bl	107cc <sdc_cfg_set>
	if (required_memory < 0) {
   2e5b2:	2800      	cmp	r0, #0
   2e5b4:	db32      	blt.n	2e61c <configure_memory_usage+0x90>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   2e5b6:	231b      	movs	r3, #27
   2e5b8:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   2e5bc:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   2e5c0:	2302      	movs	r3, #2
   2e5c2:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   2e5c6:	2103      	movs	r1, #3
   2e5c8:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e5cc:	aa01      	add	r2, sp, #4
   2e5ce:	2000      	movs	r0, #0
   2e5d0:	f7e2 f8fc 	bl	107cc <sdc_cfg_set>
	if (required_memory < 0) {
   2e5d4:	2800      	cmp	r0, #0
   2e5d6:	db21      	blt.n	2e61c <configure_memory_usage+0x90>
	cfg.event_length.event_length_us =
   2e5d8:	f641 534c 	movw	r3, #7500	; 0x1d4c
   2e5dc:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e5de:	aa01      	add	r2, sp, #4
   2e5e0:	2104      	movs	r1, #4
   2e5e2:	2000      	movs	r0, #0
   2e5e4:	f7e2 f8f2 	bl	107cc <sdc_cfg_set>
	if (required_memory < 0) {
   2e5e8:	2800      	cmp	r0, #0
   2e5ea:	db17      	blt.n	2e61c <configure_memory_usage+0x90>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   2e5ec:	2000      	movs	r0, #0
   2e5ee:	f88d 0004 	strb.w	r0, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e5f2:	aa01      	add	r2, sp, #4
   2e5f4:	2105      	movs	r1, #5
   2e5f6:	f7e2 f8e9 	bl	107cc <sdc_cfg_set>
	if (required_memory < 0) {
   2e5fa:	2800      	cmp	r0, #0
   2e5fc:	db0e      	blt.n	2e61c <configure_memory_usage+0x90>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   2e5fe:	2303      	movs	r3, #3
   2e600:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e604:	aa01      	add	r2, sp, #4
   2e606:	2106      	movs	r1, #6
   2e608:	2000      	movs	r0, #0
   2e60a:	f7e2 f8df 	bl	107cc <sdc_cfg_set>
		if (required_memory < 0) {
   2e60e:	2800      	cmp	r0, #0
   2e610:	db04      	blt.n	2e61c <configure_memory_usage+0x90>
	if (required_memory > sizeof(sdc_mempool)) {
   2e612:	f244 5318 	movw	r3, #17688	; 0x4518
   2e616:	4298      	cmp	r0, r3
   2e618:	d803      	bhi.n	2e622 <configure_memory_usage+0x96>
	return 0;
   2e61a:	2000      	movs	r0, #0
}
   2e61c:	b003      	add	sp, #12
   2e61e:	f85d fb04 	ldr.w	pc, [sp], #4
   2e622:	4a0e      	ldr	r2, [pc, #56]	; (2e65c <configure_memory_usage+0xd0>)
   2e624:	4b0e      	ldr	r3, [pc, #56]	; (2e660 <configure_memory_usage+0xd4>)
   2e626:	1ad2      	subs	r2, r2, r3
   2e628:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   2e62a:	f04f 0300 	mov.w	r3, #0
   2e62e:	2101      	movs	r1, #1
   2e630:	f361 0302 	bfi	r3, r1, #0, #3
   2e634:	f36f 03c5 	bfc	r3, #3, #3
   2e638:	f362 138f 	bfi	r3, r2, #6, #10
   2e63c:	4602      	mov	r2, r0
   2e63e:	f244 5118 	movw	r1, #17688	; 0x4518
   2e642:	4808      	ldr	r0, [pc, #32]	; (2e664 <configure_memory_usage+0xd8>)
   2e644:	f7f1 fe66 	bl	20314 <log_2>
		k_panic();
   2e648:	4040      	eors	r0, r0
   2e64a:	f380 8811 	msr	BASEPRI, r0
   2e64e:	f04f 0004 	mov.w	r0, #4
   2e652:	df02      	svc	2
		return -ENOMEM;
   2e654:	f06f 000b 	mvn.w	r0, #11
   2e658:	e7e0      	b.n	2e61c <configure_memory_usage+0x90>
   2e65a:	bf00      	nop
   2e65c:	0003d2a4 	.word	0x0003d2a4
   2e660:	0003d1a4 	.word	0x0003d1a4
   2e664:	0004080c 	.word	0x0004080c

0002e668 <hci_driver_open>:
{
   2e668:	b530      	push	{r4, r5, lr}
   2e66a:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2e66c:	4d41      	ldr	r5, [pc, #260]	; (2e774 <hci_driver_open+0x10c>)
   2e66e:	2200      	movs	r2, #0
   2e670:	2300      	movs	r3, #0
   2e672:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2e676:	2400      	movs	r4, #0
   2e678:	9404      	str	r4, [sp, #16]
   2e67a:	f06f 0309 	mvn.w	r3, #9
   2e67e:	9303      	str	r3, [sp, #12]
   2e680:	9402      	str	r4, [sp, #8]
   2e682:	9401      	str	r4, [sp, #4]
   2e684:	9400      	str	r4, [sp, #0]
   2e686:	4b3c      	ldr	r3, [pc, #240]	; (2e778 <hci_driver_open+0x110>)
   2e688:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2e68c:	493b      	ldr	r1, [pc, #236]	; (2e77c <hci_driver_open+0x114>)
   2e68e:	4628      	mov	r0, r5
   2e690:	f00d fd87 	bl	3c1a2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2e694:	493a      	ldr	r1, [pc, #232]	; (2e780 <hci_driver_open+0x118>)
   2e696:	4628      	mov	r0, r5
   2e698:	f001 fbf0 	bl	2fe7c <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   2e69c:	a80b      	add	r0, sp, #44	; 0x2c
   2e69e:	f7e2 f887 	bl	107b0 <sdc_build_revision_get>
   2e6a2:	4a38      	ldr	r2, [pc, #224]	; (2e784 <hci_driver_open+0x11c>)
   2e6a4:	4b38      	ldr	r3, [pc, #224]	; (2e788 <hci_driver_open+0x120>)
   2e6a6:	1ad2      	subs	r2, r2, r3
   2e6a8:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   2e6aa:	f04f 0300 	mov.w	r3, #0
   2e6ae:	2103      	movs	r1, #3
   2e6b0:	f361 0302 	bfi	r3, r1, #0, #3
   2e6b4:	f364 03c5 	bfi	r3, r4, #3, #3
   2e6b8:	f362 138f 	bfi	r3, r2, #6, #10
   2e6bc:	2214      	movs	r2, #20
   2e6be:	a90b      	add	r1, sp, #44	; 0x2c
   2e6c0:	4832      	ldr	r0, [pc, #200]	; (2e78c <hci_driver_open+0x124>)
   2e6c2:	f7f1 fe85 	bl	203d0 <log_hexdump>
	err = configure_supported_features();
   2e6c6:	f00d f872 	bl	3b7ae <configure_supported_features>
	if (err) {
   2e6ca:	4604      	mov	r4, r0
   2e6cc:	b110      	cbz	r0, 2e6d4 <hci_driver_open+0x6c>
}
   2e6ce:	4620      	mov	r0, r4
   2e6d0:	b011      	add	sp, #68	; 0x44
   2e6d2:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   2e6d4:	f7ff ff5a 	bl	2e58c <configure_memory_usage>
	if (err) {
   2e6d8:	4604      	mov	r4, r0
   2e6da:	2800      	cmp	r0, #0
   2e6dc:	d1f7      	bne.n	2e6ce <hci_driver_open+0x66>
   2e6de:	482c      	ldr	r0, [pc, #176]	; (2e790 <hci_driver_open+0x128>)
   2e6e0:	f001 f980 	bl	2f9e4 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   2e6e4:	4b2b      	ldr	r3, [pc, #172]	; (2e794 <hci_driver_open+0x12c>)
   2e6e6:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   2e6e8:	b1a8      	cbz	r0, 2e716 <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   2e6ea:	4a2b      	ldr	r2, [pc, #172]	; (2e798 <hci_driver_open+0x130>)
   2e6ec:	ab08      	add	r3, sp, #32
   2e6ee:	ca07      	ldmia	r2, {r0, r1, r2}
   2e6f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   2e6f4:	4618      	mov	r0, r3
   2e6f6:	f7e2 fa01 	bl	10afc <sdc_rand_source_register>
	if (err) {
   2e6fa:	4604      	mov	r4, r0
   2e6fc:	b9f0      	cbnz	r0, 2e73c <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2e6fe:	f04f 30ff 	mov.w	r0, #4294967295
   2e702:	f04f 31ff 	mov.w	r1, #4294967295
   2e706:	f7ff fdef 	bl	2e2e8 <multithreading_lock_acquire>
	if (!err) {
   2e70a:	4605      	mov	r5, r0
   2e70c:	b350      	cbz	r0, 2e764 <hci_driver_open+0xfc>
	if (err < 0) {
   2e70e:	2d00      	cmp	r5, #0
   2e710:	dadd      	bge.n	2e6ce <hci_driver_open+0x66>
		return err;
   2e712:	462c      	mov	r4, r5
   2e714:	e7db      	b.n	2e6ce <hci_driver_open+0x66>
   2e716:	4b1b      	ldr	r3, [pc, #108]	; (2e784 <hci_driver_open+0x11c>)
   2e718:	4a1b      	ldr	r2, [pc, #108]	; (2e788 <hci_driver_open+0x120>)
   2e71a:	1a9b      	subs	r3, r3, r2
   2e71c:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   2e71e:	f04f 0100 	mov.w	r1, #0
   2e722:	2201      	movs	r2, #1
   2e724:	f362 0102 	bfi	r1, r2, #0, #3
   2e728:	f36f 01c5 	bfc	r1, #3, #3
   2e72c:	f363 118f 	bfi	r1, r3, #6, #10
   2e730:	481a      	ldr	r0, [pc, #104]	; (2e79c <hci_driver_open+0x134>)
   2e732:	f7f1 fe6f 	bl	20414 <log_0>
		return -ENODEV;
   2e736:	f06f 0412 	mvn.w	r4, #18
   2e73a:	e7c8      	b.n	2e6ce <hci_driver_open+0x66>
   2e73c:	4b11      	ldr	r3, [pc, #68]	; (2e784 <hci_driver_open+0x11c>)
   2e73e:	4a12      	ldr	r2, [pc, #72]	; (2e788 <hci_driver_open+0x120>)
   2e740:	1a9b      	subs	r3, r3, r2
   2e742:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   2e744:	f04f 0200 	mov.w	r2, #0
   2e748:	2101      	movs	r1, #1
   2e74a:	f361 0202 	bfi	r2, r1, #0, #3
   2e74e:	f36f 02c5 	bfc	r2, #3, #3
   2e752:	f363 128f 	bfi	r2, r3, #6, #10
   2e756:	4601      	mov	r1, r0
   2e758:	4811      	ldr	r0, [pc, #68]	; (2e7a0 <hci_driver_open+0x138>)
   2e75a:	f7f1 fda5 	bl	202a8 <log_1>
		return -EINVAL;
   2e75e:	f06f 0415 	mvn.w	r4, #21
   2e762:	e7b4      	b.n	2e6ce <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   2e764:	490f      	ldr	r1, [pc, #60]	; (2e7a4 <hci_driver_open+0x13c>)
   2e766:	4810      	ldr	r0, [pc, #64]	; (2e7a8 <hci_driver_open+0x140>)
   2e768:	f7e2 f88e 	bl	10888 <sdc_enable>
   2e76c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2e76e:	f7ff fdc5 	bl	2e2fc <multithreading_lock_release>
   2e772:	e7cc      	b.n	2e70e <hci_driver_open+0xa6>
   2e774:	20006ad8 	.word	0x20006ad8
   2e778:	0002e54d 	.word	0x0002e54d
   2e77c:	200107c0 	.word	0x200107c0
   2e780:	00040830 	.word	0x00040830
   2e784:	0003d2a4 	.word	0x0003d2a4
   2e788:	0003d1a4 	.word	0x0003d1a4
   2e78c:	00040838 	.word	0x00040838
   2e790:	0004076c 	.word	0x0004076c
   2e794:	20008a20 	.word	0x20008a20
   2e798:	0003d42c 	.word	0x0003d42c
   2e79c:	00040860 	.word	0x00040860
   2e7a0:	00040880 	.word	0x00040880
   2e7a4:	20008a70 	.word	0x20008a70
   2e7a8:	0002e3a5 	.word	0x0002e3a5

0002e7ac <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   2e7ac:	4b0b      	ldr	r3, [pc, #44]	; (2e7dc <hci_internal_cmd_put+0x30>)
   2e7ae:	781b      	ldrb	r3, [r3, #0]
   2e7b0:	b96b      	cbnz	r3, 2e7ce <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   2e7b2:	7883      	ldrb	r3, [r0, #2]
   2e7b4:	3303      	adds	r3, #3
   2e7b6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2e7ba:	dc0b      	bgt.n	2e7d4 <hci_internal_cmd_put+0x28>
{
   2e7bc:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   2e7be:	4c07      	ldr	r4, [pc, #28]	; (2e7dc <hci_internal_cmd_put+0x30>)
   2e7c0:	1c61      	adds	r1, r4, #1
   2e7c2:	f00d fac3 	bl	3bd4c <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   2e7c6:	2301      	movs	r3, #1
   2e7c8:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   2e7ca:	2000      	movs	r0, #0
}
   2e7cc:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   2e7ce:	f04f 30ff 	mov.w	r0, #4294967295
   2e7d2:	4770      	bx	lr
		return -EINVAL;
   2e7d4:	f06f 0015 	mvn.w	r0, #21
}
   2e7d8:	4770      	bx	lr
   2e7da:	bf00      	nop
   2e7dc:	2000cf88 	.word	0x2000cf88

0002e7e0 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   2e7e0:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   2e7e2:	4b07      	ldr	r3, [pc, #28]	; (2e800 <hci_internal_evt_get+0x20>)
   2e7e4:	781b      	ldrb	r3, [r3, #0]
   2e7e6:	b913      	cbnz	r3, 2e7ee <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   2e7e8:	f7eb fb2c 	bl	19e44 <sdc_hci_evt_get>
}
   2e7ec:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   2e7ee:	4c04      	ldr	r4, [pc, #16]	; (2e800 <hci_internal_evt_get+0x20>)
   2e7f0:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   2e7f2:	3202      	adds	r2, #2
   2e7f4:	1c61      	adds	r1, r4, #1
   2e7f6:	f008 fab5 	bl	36d64 <memcpy>
		cmd_complete_or_status.occurred = false;
   2e7fa:	2000      	movs	r0, #0
   2e7fc:	7020      	strb	r0, [r4, #0]
		return 0;
   2e7fe:	e7f5      	b.n	2e7ec <hci_internal_evt_get+0xc>
   2e800:	2000cf88 	.word	0x2000cf88

0002e804 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   2e804:	b538      	push	{r3, r4, r5, lr}
   2e806:	4605      	mov	r5, r0
   2e808:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   2e80a:	4b0a      	ldr	r3, [pc, #40]	; (2e834 <bt_rand+0x30>)
   2e80c:	681b      	ldr	r3, [r3, #0]
   2e80e:	b13b      	cbz	r3, 2e820 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   2e810:	4b08      	ldr	r3, [pc, #32]	; (2e834 <bt_rand+0x30>)
   2e812:	6818      	ldr	r0, [r3, #0]
   2e814:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   2e816:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   2e818:	681b      	ldr	r3, [r3, #0]
   2e81a:	4629      	mov	r1, r5
   2e81c:	4798      	blx	r3
}
   2e81e:	bd38      	pop	{r3, r4, r5, pc}
   2e820:	4805      	ldr	r0, [pc, #20]	; (2e838 <bt_rand+0x34>)
   2e822:	f001 f8df 	bl	2f9e4 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   2e826:	4b03      	ldr	r3, [pc, #12]	; (2e834 <bt_rand+0x30>)
   2e828:	6018      	str	r0, [r3, #0]
		if (!dev) {
   2e82a:	2800      	cmp	r0, #0
   2e82c:	d1f0      	bne.n	2e810 <bt_rand+0xc>
			return -ENODEV;
   2e82e:	f06f 0012 	mvn.w	r0, #18
   2e832:	e7f4      	b.n	2e81e <bt_rand+0x1a>
   2e834:	2000cfd0 	.word	0x2000cfd0
   2e838:	0004076c 	.word	0x0004076c

0002e83c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   2e83c:	b510      	push	{r4, lr}
   2e83e:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   2e840:	f00d fb13 	bl	3be6a <m_config_clock_source_get>
   2e844:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   2e848:	2332      	movs	r3, #50	; 0x32
   2e84a:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   2e84e:	2300      	movs	r3, #0
   2e850:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   2e854:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   2e858:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2e85c:	4a10      	ldr	r2, [pc, #64]	; (2e8a0 <mpsl_lib_init+0x64>)
   2e85e:	2119      	movs	r1, #25
   2e860:	4668      	mov	r0, sp
   2e862:	f7e1 fdc9 	bl	103f8 <mpsl_init>
	if (err) {
   2e866:	4604      	mov	r4, r0
   2e868:	b110      	cbz	r0, 2e870 <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   2e86a:	4620      	mov	r0, r4
   2e86c:	b002      	add	sp, #8
   2e86e:	bd10      	pop	{r4, pc}
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   2e870:	2101      	movs	r1, #1
   2e872:	480c      	ldr	r0, [pc, #48]	; (2e8a4 <mpsl_lib_init+0x68>)
   2e874:	f7ea fcfb 	bl	1926e <mpsl_timeslot_session_count_set>
	if (err) {
   2e878:	4604      	mov	r4, r0
   2e87a:	2800      	cmp	r0, #0
   2e87c:	d1f5      	bne.n	2e86a <mpsl_lib_init+0x2e>
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2e87e:	2201      	movs	r2, #1
   2e880:	2100      	movs	r1, #0
   2e882:	2008      	movs	r0, #8
   2e884:	f7f3 fc3c 	bl	22100 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2e888:	2201      	movs	r2, #1
   2e88a:	2100      	movs	r1, #0
   2e88c:	200b      	movs	r0, #11
   2e88e:	f7f3 fc37 	bl	22100 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2e892:	2201      	movs	r2, #1
   2e894:	2100      	movs	r1, #0
   2e896:	4610      	mov	r0, r2
   2e898:	f7f3 fc32 	bl	22100 <z_arm_irq_priority_set>
	return 0;
   2e89c:	e7e5      	b.n	2e86a <mpsl_lib_init+0x2e>
   2e89e:	bf00      	nop
   2e8a0:	0002e8a9 	.word	0x0002e8a9
   2e8a4:	2000cfd4 	.word	0x2000cfd4

0002e8a8 <m_assert_handler>:
{
   2e8a8:	b538      	push	{r3, r4, r5, lr}
   2e8aa:	460d      	mov	r5, r1
   2e8ac:	4b0d      	ldr	r3, [pc, #52]	; (2e8e4 <m_assert_handler+0x3c>)
   2e8ae:	4a0e      	ldr	r2, [pc, #56]	; (2e8e8 <m_assert_handler+0x40>)
   2e8b0:	1a9b      	subs	r3, r3, r2
   2e8b2:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   2e8b4:	f04f 0400 	mov.w	r4, #0
   2e8b8:	2201      	movs	r2, #1
   2e8ba:	f362 0402 	bfi	r4, r2, #0, #3
   2e8be:	f36f 04c5 	bfc	r4, #3, #3
   2e8c2:	f363 148f 	bfi	r4, r3, #6, #10
   2e8c6:	f7f1 fb77 	bl	1ffb8 <z_log_strdup>
   2e8ca:	4601      	mov	r1, r0
   2e8cc:	4623      	mov	r3, r4
   2e8ce:	462a      	mov	r2, r5
   2e8d0:	4806      	ldr	r0, [pc, #24]	; (2e8ec <m_assert_handler+0x44>)
   2e8d2:	f7f1 fd1f 	bl	20314 <log_2>
	k_oops();
   2e8d6:	4040      	eors	r0, r0
   2e8d8:	f380 8811 	msr	BASEPRI, r0
   2e8dc:	f04f 0003 	mov.w	r0, #3
   2e8e0:	df02      	svc	2
}
   2e8e2:	bd38      	pop	{r3, r4, r5, pc}
   2e8e4:	0003d274 	.word	0x0003d274
   2e8e8:	0003d1a4 	.word	0x0003d1a4
   2e8ec:	00040900 	.word	0x00040900

0002e8f0 <signal_thread>:
{
   2e8f0:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   2e8f2:	f04f 34ff 	mov.w	r4, #4294967295
   2e8f6:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   2e8fa:	4622      	mov	r2, r4
   2e8fc:	462b      	mov	r3, r5
   2e8fe:	4806      	ldr	r0, [pc, #24]	; (2e918 <signal_thread+0x28>)
   2e900:	f001 fcdc 	bl	302bc <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e904:	4620      	mov	r0, r4
   2e906:	4629      	mov	r1, r5
   2e908:	f7ff fcee 	bl	2e2e8 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   2e90c:	f7ea fdc6 	bl	1949c <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   2e910:	f7ff fcf4 	bl	2e2fc <multithreading_lock_release>
	while (true) {
   2e914:	e7ed      	b.n	2e8f2 <signal_thread+0x2>
   2e916:	bf00      	nop
   2e918:	20000b80 	.word	0x20000b80

0002e91c <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   2e91c:	b530      	push	{r4, r5, lr}
   2e91e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2e920:	4d0f      	ldr	r5, [pc, #60]	; (2e960 <mpsl_signal_thread_init+0x44>)
   2e922:	2200      	movs	r2, #0
   2e924:	2300      	movs	r3, #0
   2e926:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2e92a:	2400      	movs	r4, #0
   2e92c:	9404      	str	r4, [sp, #16]
   2e92e:	f06f 0309 	mvn.w	r3, #9
   2e932:	9303      	str	r3, [sp, #12]
   2e934:	9402      	str	r4, [sp, #8]
   2e936:	9401      	str	r4, [sp, #4]
   2e938:	9400      	str	r4, [sp, #0]
   2e93a:	4b0a      	ldr	r3, [pc, #40]	; (2e964 <mpsl_signal_thread_init+0x48>)
   2e93c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2e940:	4909      	ldr	r1, [pc, #36]	; (2e968 <mpsl_signal_thread_init+0x4c>)
   2e942:	4628      	mov	r0, r5
   2e944:	f00d fc2d 	bl	3c1a2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2e948:	4908      	ldr	r1, [pc, #32]	; (2e96c <mpsl_signal_thread_init+0x50>)
   2e94a:	4628      	mov	r0, r5
   2e94c:	f001 fa96 	bl	2fe7c <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   2e950:	4622      	mov	r2, r4
   2e952:	2104      	movs	r1, #4
   2e954:	2019      	movs	r0, #25
   2e956:	f7f3 fbd3 	bl	22100 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   2e95a:	4620      	mov	r0, r4
   2e95c:	b009      	add	sp, #36	; 0x24
   2e95e:	bd30      	pop	{r4, r5, pc}
   2e960:	20006b98 	.word	0x20006b98
   2e964:	0002e8f1 	.word	0x0002e8f1
   2e968:	20010be0 	.word	0x20010be0
   2e96c:	00040914 	.word	0x00040914

0002e970 <mpsl_low_prio_irq_handler>:
{
   2e970:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2e972:	4802      	ldr	r0, [pc, #8]	; (2e97c <mpsl_low_prio_irq_handler+0xc>)
   2e974:	f001 fc7a 	bl	3026c <z_impl_k_sem_give>
}
   2e978:	bd08      	pop	{r3, pc}
   2e97a:	bf00      	nop
   2e97c:	20000b80 	.word	0x20000b80

0002e980 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   2e980:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2e982:	4b02      	ldr	r3, [pc, #8]	; (2e98c <mpsl_hfclk_callback+0xc>)
   2e984:	681b      	ldr	r3, [r3, #0]
   2e986:	2000      	movs	r0, #0
   2e988:	4798      	blx	r3
}
   2e98a:	bd08      	pop	{r3, pc}
   2e98c:	2000cff8 	.word	0x2000cff8

0002e990 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2e990:	b508      	push	{r3, lr}
	switch (domain) {
   2e992:	b128      	cbz	r0, 2e9a0 <nrfx_clock_start+0x10>
   2e994:	2801      	cmp	r0, #1
   2e996:	d102      	bne.n	2e99e <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   2e998:	4804      	ldr	r0, [pc, #16]	; (2e9ac <nrfx_clock_start+0x1c>)
   2e99a:	f7e1 fb97 	bl	100cc <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2e99e:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2e9a0:	4b03      	ldr	r3, [pc, #12]	; (2e9b0 <nrfx_clock_start+0x20>)
   2e9a2:	681b      	ldr	r3, [r3, #0]
   2e9a4:	2001      	movs	r0, #1
   2e9a6:	4798      	blx	r3
}
   2e9a8:	e7f9      	b.n	2e99e <nrfx_clock_start+0xe>
   2e9aa:	bf00      	nop
   2e9ac:	0002e981 	.word	0x0002e981
   2e9b0:	2000cff8 	.word	0x2000cff8

0002e9b4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   2e9b4:	4b01      	ldr	r3, [pc, #4]	; (2e9bc <nrfx_clock_init+0x8>)
   2e9b6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   2e9b8:	4801      	ldr	r0, [pc, #4]	; (2e9c0 <nrfx_clock_init+0xc>)
   2e9ba:	4770      	bx	lr
   2e9bc:	2000cff8 	.word	0x2000cff8
   2e9c0:	0bad0000 	.word	0x0bad0000

0002e9c4 <get_timeslot_time_us>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e9c4:	4b03      	ldr	r3, [pc, #12]	; (2e9d4 <get_timeslot_time_us+0x10>)
   2e9c6:	2201      	movs	r2, #1
   2e9c8:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   2e9ca:	3b40      	subs	r3, #64	; 0x40
   2e9cc:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   2e9d0:	4770      	bx	lr
   2e9d2:	bf00      	nop
   2e9d4:	40008040 	.word	0x40008040

0002e9d8 <reschedule_next_timeslot>:
{
   2e9d8:	b508      	push	{r3, lr}
	_context.timeslot_request.params.earliest.priority =
   2e9da:	4b05      	ldr	r3, [pc, #20]	; (2e9f0 <reschedule_next_timeslot+0x18>)
   2e9dc:	2200      	movs	r2, #0
   2e9de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2e9e2:	f103 0124 	add.w	r1, r3, #36	; 0x24
   2e9e6:	7e18      	ldrb	r0, [r3, #24]
   2e9e8:	f7ea fbea 	bl	191c0 <mpsl_timeslot_request>
}
   2e9ec:	bd08      	pop	{r3, pc}
   2e9ee:	bf00      	nop
   2e9f0:	2000cffc 	.word	0x2000cffc

0002e9f4 <timeslot_callback>:
{
   2e9f4:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e9f6:	f3bf 8f5b 	dmb	ish
   2e9fa:	4b1a      	ldr	r3, [pc, #104]	; (2ea64 <timeslot_callback+0x70>)
   2e9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2e9fe:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   2ea02:	bb6b      	cbnz	r3, 2ea60 <timeslot_callback+0x6c>
	switch (signal) {
   2ea04:	2906      	cmp	r1, #6
   2ea06:	d812      	bhi.n	2ea2e <timeslot_callback+0x3a>
   2ea08:	2905      	cmp	r1, #5
   2ea0a:	d225      	bcs.n	2ea58 <timeslot_callback+0x64>
   2ea0c:	b969      	cbnz	r1, 2ea2a <timeslot_callback+0x36>
		rc = _context.op_desc->handler(_context.op_desc->context);
   2ea0e:	4b15      	ldr	r3, [pc, #84]	; (2ea64 <timeslot_callback+0x70>)
   2ea10:	6a1b      	ldr	r3, [r3, #32]
   2ea12:	681a      	ldr	r2, [r3, #0]
   2ea14:	6858      	ldr	r0, [r3, #4]
   2ea16:	4790      	blx	r2
   2ea18:	4603      	mov	r3, r0
		if (rc != FLASH_OP_ONGOING) {
   2ea1a:	2801      	cmp	r0, #1
   2ea1c:	d010      	beq.n	2ea40 <timeslot_callback+0x4c>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   2ea1e:	4811      	ldr	r0, [pc, #68]	; (2ea64 <timeslot_callback+0x70>)
   2ea20:	63c3      	str	r3, [r0, #60]	; 0x3c
			_context.return_param.callback_action =
   2ea22:	2302      	movs	r3, #2
   2ea24:	f800 3f34 	strb.w	r3, [r0, #52]!
   2ea28:	e000      	b.n	2ea2c <timeslot_callback+0x38>
	switch (signal) {
   2ea2a:	2000      	movs	r0, #0
}
   2ea2c:	bd08      	pop	{r3, pc}
	switch (signal) {
   2ea2e:	2907      	cmp	r1, #7
   2ea30:	d104      	bne.n	2ea3c <timeslot_callback+0x48>
   2ea32:	480c      	ldr	r0, [pc, #48]	; (2ea64 <timeslot_callback+0x70>)
   2ea34:	f001 fc1a 	bl	3026c <z_impl_k_sem_give>
		return NULL;
   2ea38:	2000      	movs	r0, #0
   2ea3a:	e7f7      	b.n	2ea2c <timeslot_callback+0x38>
	switch (signal) {
   2ea3c:	2000      	movs	r0, #0
   2ea3e:	e7f5      	b.n	2ea2c <timeslot_callback+0x38>
			_context.timeslot_request.params.earliest.priority =
   2ea40:	4808      	ldr	r0, [pc, #32]	; (2ea64 <timeslot_callback+0x70>)
   2ea42:	2301      	movs	r3, #1
   2ea44:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
			_context.return_param.callback_action =
   2ea48:	2303      	movs	r3, #3
   2ea4a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			_context.return_param.params.request.p_next =
   2ea4e:	f100 0324 	add.w	r3, r0, #36	; 0x24
   2ea52:	6383      	str	r3, [r0, #56]	; 0x38
	return &_context.return_param;
   2ea54:	3034      	adds	r0, #52	; 0x34
   2ea56:	e7e9      	b.n	2ea2c <timeslot_callback+0x38>
		reschedule_next_timeslot();
   2ea58:	f7ff ffbe 	bl	2e9d8 <reschedule_next_timeslot>
		return NULL;
   2ea5c:	2000      	movs	r0, #0
   2ea5e:	e7e5      	b.n	2ea2c <timeslot_callback+0x38>
		return NULL;
   2ea60:	2000      	movs	r0, #0
   2ea62:	e7e3      	b.n	2ea2c <timeslot_callback+0x38>
   2ea64:	2000cffc 	.word	0x2000cffc

0002ea68 <nrf_flash_sync_init>:
{
   2ea68:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2ea6a:	2201      	movs	r2, #1
   2ea6c:	2100      	movs	r1, #0
   2ea6e:	4802      	ldr	r0, [pc, #8]	; (2ea78 <nrf_flash_sync_init+0x10>)
   2ea70:	f00d fcbd 	bl	3c3ee <z_impl_k_sem_init>
}
   2ea74:	bd08      	pop	{r3, pc}
   2ea76:	bf00      	nop
   2ea78:	2000cffc 	.word	0x2000cffc

0002ea7c <nrf_flash_sync_set_context>:
	_context.request_length_us = duration;
   2ea7c:	4b01      	ldr	r3, [pc, #4]	; (2ea84 <nrf_flash_sync_set_context+0x8>)
   2ea7e:	61d8      	str	r0, [r3, #28]
}
   2ea80:	4770      	bx	lr
   2ea82:	bf00      	nop
   2ea84:	2000cffc 	.word	0x2000cffc

0002ea88 <nrf_flash_sync_check_time_limit>:
{
	/* Not needed for this driver. */
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   2ea88:	b510      	push	{r4, lr}
   2ea8a:	4604      	mov	r4, r0
	uint32_t now_us = get_timeslot_time_us();
   2ea8c:	f7ff ff9a 	bl	2e9c4 <get_timeslot_time_us>
	uint32_t time_per_iteration_us = now_us / iteration;
   2ea90:	fbb0 f4f4 	udiv	r4, r0, r4
	return now_us + time_per_iteration_us >= _context.request_length_us;
   2ea94:	4420      	add	r0, r4
   2ea96:	4b03      	ldr	r3, [pc, #12]	; (2eaa4 <nrf_flash_sync_check_time_limit+0x1c>)
   2ea98:	69db      	ldr	r3, [r3, #28]
}
   2ea9a:	4298      	cmp	r0, r3
   2ea9c:	bf34      	ite	cc
   2ea9e:	2000      	movcc	r0, #0
   2eaa0:	2001      	movcs	r0, #1
   2eaa2:	bd10      	pop	{r4, pc}
   2eaa4:	2000cffc 	.word	0x2000cffc

0002eaa8 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eaa8:	4b03      	ldr	r3, [pc, #12]	; (2eab8 <nrf52_errata_36+0x10>)
   2eaaa:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2eaac:	2b08      	cmp	r3, #8
   2eaae:	d001      	beq.n	2eab4 <nrf52_errata_36+0xc>
        return false;
   2eab0:	2000      	movs	r0, #0
   2eab2:	4770      	bx	lr
                        return true;
   2eab4:	2001      	movs	r0, #1
}
   2eab6:	4770      	bx	lr
   2eab8:	10000130 	.word	0x10000130

0002eabc <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eabc:	4b03      	ldr	r3, [pc, #12]	; (2eacc <nrf52_errata_66+0x10>)
   2eabe:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2eac0:	2b08      	cmp	r3, #8
   2eac2:	d001      	beq.n	2eac8 <nrf52_errata_66+0xc>
        return false;
   2eac4:	2000      	movs	r0, #0
   2eac6:	4770      	bx	lr
                        return true;
   2eac8:	2001      	movs	r0, #1
}
   2eaca:	4770      	bx	lr
   2eacc:	10000130 	.word	0x10000130

0002ead0 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ead0:	4b08      	ldr	r3, [pc, #32]	; (2eaf4 <nrf52_errata_98+0x24>)
   2ead2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2ead4:	3304      	adds	r3, #4
   2ead6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2ead8:	2a08      	cmp	r2, #8
   2eada:	d001      	beq.n	2eae0 <nrf52_errata_98+0x10>
        return false;
   2eadc:	2000      	movs	r0, #0
   2eade:	4770      	bx	lr
                switch(var2)
   2eae0:	2b00      	cmp	r3, #0
   2eae2:	d804      	bhi.n	2eaee <nrf52_errata_98+0x1e>
   2eae4:	e8df f003 	tbb	[pc, r3]
   2eae8:	01          	.byte	0x01
   2eae9:	00          	.byte	0x00
            if (var1 == 0x08)
   2eaea:	2001      	movs	r0, #1
   2eaec:	4770      	bx	lr
                        return false;
   2eaee:	2000      	movs	r0, #0
}
   2eaf0:	4770      	bx	lr
   2eaf2:	bf00      	nop
   2eaf4:	10000130 	.word	0x10000130

0002eaf8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eaf8:	4b08      	ldr	r3, [pc, #32]	; (2eb1c <nrf52_errata_103+0x24>)
   2eafa:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2eafc:	3304      	adds	r3, #4
   2eafe:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2eb00:	2a08      	cmp	r2, #8
   2eb02:	d001      	beq.n	2eb08 <nrf52_errata_103+0x10>
        return false;
   2eb04:	2000      	movs	r0, #0
   2eb06:	4770      	bx	lr
                switch(var2)
   2eb08:	2b00      	cmp	r3, #0
   2eb0a:	d804      	bhi.n	2eb16 <nrf52_errata_103+0x1e>
   2eb0c:	e8df f003 	tbb	[pc, r3]
   2eb10:	01          	.byte	0x01
   2eb11:	00          	.byte	0x00
            if (var1 == 0x08)
   2eb12:	2001      	movs	r0, #1
   2eb14:	4770      	bx	lr
                        return false;
   2eb16:	2000      	movs	r0, #0
}
   2eb18:	4770      	bx	lr
   2eb1a:	bf00      	nop
   2eb1c:	10000130 	.word	0x10000130

0002eb20 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eb20:	4b08      	ldr	r3, [pc, #32]	; (2eb44 <nrf52_errata_115+0x24>)
   2eb22:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2eb24:	3304      	adds	r3, #4
   2eb26:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2eb28:	2a08      	cmp	r2, #8
   2eb2a:	d001      	beq.n	2eb30 <nrf52_errata_115+0x10>
        return false;
   2eb2c:	2000      	movs	r0, #0
   2eb2e:	4770      	bx	lr
                switch(var2)
   2eb30:	2b00      	cmp	r3, #0
   2eb32:	d804      	bhi.n	2eb3e <nrf52_errata_115+0x1e>
   2eb34:	e8df f003 	tbb	[pc, r3]
   2eb38:	01          	.byte	0x01
   2eb39:	00          	.byte	0x00
            if (var1 == 0x08)
   2eb3a:	2001      	movs	r0, #1
   2eb3c:	4770      	bx	lr
                        return false;
   2eb3e:	2000      	movs	r0, #0
}
   2eb40:	4770      	bx	lr
   2eb42:	bf00      	nop
   2eb44:	10000130 	.word	0x10000130

0002eb48 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eb48:	4b08      	ldr	r3, [pc, #32]	; (2eb6c <nrf52_errata_120+0x24>)
   2eb4a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2eb4c:	3304      	adds	r3, #4
   2eb4e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2eb50:	2a08      	cmp	r2, #8
   2eb52:	d001      	beq.n	2eb58 <nrf52_errata_120+0x10>
        return false;
   2eb54:	2000      	movs	r0, #0
   2eb56:	4770      	bx	lr
                switch(var2)
   2eb58:	2b00      	cmp	r3, #0
   2eb5a:	d804      	bhi.n	2eb66 <nrf52_errata_120+0x1e>
   2eb5c:	e8df f003 	tbb	[pc, r3]
   2eb60:	01          	.byte	0x01
   2eb61:	00          	.byte	0x00
            if (var1 == 0x08)
   2eb62:	2001      	movs	r0, #1
   2eb64:	4770      	bx	lr
                        return false;
   2eb66:	2000      	movs	r0, #0
}
   2eb68:	4770      	bx	lr
   2eb6a:	bf00      	nop
   2eb6c:	10000130 	.word	0x10000130

0002eb70 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eb70:	4b03      	ldr	r3, [pc, #12]	; (2eb80 <nrf52_errata_136+0x10>)
   2eb72:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2eb74:	2b08      	cmp	r3, #8
   2eb76:	d001      	beq.n	2eb7c <nrf52_errata_136+0xc>
        return false;
   2eb78:	2000      	movs	r0, #0
   2eb7a:	4770      	bx	lr
                        return true;
   2eb7c:	2001      	movs	r0, #1
}
   2eb7e:	4770      	bx	lr
   2eb80:	10000130 	.word	0x10000130

0002eb84 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eb84:	4b06      	ldr	r3, [pc, #24]	; (2eba0 <nrf52_configuration_249+0x1c>)
   2eb86:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2eb88:	4a06      	ldr	r2, [pc, #24]	; (2eba4 <nrf52_configuration_249+0x20>)
   2eb8a:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2eb8c:	2b08      	cmp	r3, #8
   2eb8e:	d001      	beq.n	2eb94 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2eb90:	2000      	movs	r0, #0
   2eb92:	4770      	bx	lr
                switch(var2)
   2eb94:	2a04      	cmp	r2, #4
   2eb96:	d801      	bhi.n	2eb9c <nrf52_configuration_249+0x18>
   2eb98:	2000      	movs	r0, #0
   2eb9a:	4770      	bx	lr
                        return true;
   2eb9c:	2001      	movs	r0, #1
    #endif
}
   2eb9e:	4770      	bx	lr
   2eba0:	10000130 	.word	0x10000130
   2eba4:	10000134 	.word	0x10000134

0002eba8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   2eba8:	4b02      	ldr	r3, [pc, #8]	; (2ebb4 <nvmc_wait+0xc>)
   2ebaa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2ebae:	2b00      	cmp	r3, #0
   2ebb0:	d0fa      	beq.n	2eba8 <nvmc_wait>
}
   2ebb2:	4770      	bx	lr
   2ebb4:	4001e000 	.word	0x4001e000

0002ebb8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   2ebb8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2ebba:	4b03      	ldr	r3, [pc, #12]	; (2ebc8 <nvmc_config+0x10>)
   2ebbc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   2ebc0:	f7ff fff2 	bl	2eba8 <nvmc_wait>
}
   2ebc4:	bd08      	pop	{r3, pc}
   2ebc6:	bf00      	nop
   2ebc8:	4001e000 	.word	0x4001e000

0002ebcc <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2ebcc:	4b01      	ldr	r3, [pc, #4]	; (2ebd4 <SystemCoreClockUpdate+0x8>)
   2ebce:	4a02      	ldr	r2, [pc, #8]	; (2ebd8 <SystemCoreClockUpdate+0xc>)
   2ebd0:	601a      	str	r2, [r3, #0]
}
   2ebd2:	4770      	bx	lr
   2ebd4:	20000878 	.word	0x20000878
   2ebd8:	03d09000 	.word	0x03d09000

0002ebdc <SystemInit>:

void SystemInit(void)
{
   2ebdc:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   2ebde:	f7ff ff63 	bl	2eaa8 <nrf52_errata_36>
   2ebe2:	b140      	cbz	r0, 2ebf6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   2ebe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ebe8:	2200      	movs	r2, #0
   2ebea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2ebee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2ebf2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2ebf6:	f7ff ff61 	bl	2eabc <nrf52_errata_66>
   2ebfa:	2800      	cmp	r0, #0
   2ebfc:	d046      	beq.n	2ec8c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2ebfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2ec02:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2ec06:	4b56      	ldr	r3, [pc, #344]	; (2ed60 <SystemInit+0x184>)
   2ec08:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2ec0c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   2ec10:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2ec14:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   2ec18:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2ec1c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   2ec20:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2ec24:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   2ec28:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2ec2c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   2ec30:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2ec34:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   2ec38:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2ec3c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   2ec40:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2ec44:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2ec48:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2ec4c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   2ec50:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2ec54:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2ec58:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2ec5c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   2ec60:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2ec64:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2ec68:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2ec6c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   2ec70:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2ec74:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   2ec78:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2ec7c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   2ec80:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2ec84:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   2ec88:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2ec8c:	f7ff ff20 	bl	2ead0 <nrf52_errata_98>
   2ec90:	b110      	cbz	r0, 2ec98 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2ec92:	4b34      	ldr	r3, [pc, #208]	; (2ed64 <SystemInit+0x188>)
   2ec94:	4a34      	ldr	r2, [pc, #208]	; (2ed68 <SystemInit+0x18c>)
   2ec96:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2ec98:	f7ff ff2e 	bl	2eaf8 <nrf52_errata_103>
   2ec9c:	b118      	cbz	r0, 2eca6 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2ec9e:	4b33      	ldr	r3, [pc, #204]	; (2ed6c <SystemInit+0x190>)
   2eca0:	22fb      	movs	r2, #251	; 0xfb
   2eca2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2eca6:	f7ff ff3b 	bl	2eb20 <nrf52_errata_115>
   2ecaa:	b148      	cbz	r0, 2ecc0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2ecac:	4930      	ldr	r1, [pc, #192]	; (2ed70 <SystemInit+0x194>)
   2ecae:	680b      	ldr	r3, [r1, #0]
   2ecb0:	f023 030f 	bic.w	r3, r3, #15
   2ecb4:	4a2f      	ldr	r2, [pc, #188]	; (2ed74 <SystemInit+0x198>)
   2ecb6:	6812      	ldr	r2, [r2, #0]
   2ecb8:	f002 020f 	and.w	r2, r2, #15
   2ecbc:	4313      	orrs	r3, r2
   2ecbe:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2ecc0:	f7ff ff42 	bl	2eb48 <nrf52_errata_120>
   2ecc4:	b118      	cbz	r0, 2ecce <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2ecc6:	4b2c      	ldr	r3, [pc, #176]	; (2ed78 <SystemInit+0x19c>)
   2ecc8:	f44f 7200 	mov.w	r2, #512	; 0x200
   2eccc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   2ecce:	f7ff ff4f 	bl	2eb70 <nrf52_errata_136>
   2ecd2:	b160      	cbz	r0, 2ecee <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2ecd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ecd8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2ecdc:	f013 0f01 	tst.w	r3, #1
   2ece0:	d005      	beq.n	2ecee <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2ece2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ece6:	f06f 0201 	mvn.w	r2, #1
   2ecea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2ecee:	f7ff ff49 	bl	2eb84 <nrf52_configuration_249>
   2ecf2:	b138      	cbz	r0, 2ed04 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2ecf4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2ecf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2ecfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ed00:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2ed04:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2ed08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2ed0c:	2b00      	cmp	r3, #0
   2ed0e:	db08      	blt.n	2ed22 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2ed10:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2ed14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2ed18:	2b00      	cmp	r3, #0
   2ed1a:	db02      	blt.n	2ed22 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   2ed1c:	f7ff ff56 	bl	2ebcc <SystemCoreClockUpdate>
}
   2ed20:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   2ed22:	2001      	movs	r0, #1
   2ed24:	f7ff ff48 	bl	2ebb8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2ed28:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   2ed2c:	2512      	movs	r5, #18
   2ed2e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   2ed32:	f7ff ff39 	bl	2eba8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2ed36:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   2ed3a:	f7ff ff35 	bl	2eba8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   2ed3e:	2000      	movs	r0, #0
   2ed40:	f7ff ff3a 	bl	2ebb8 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   2ed44:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2ed48:	490c      	ldr	r1, [pc, #48]	; (2ed7c <SystemInit+0x1a0>)
   2ed4a:	68ca      	ldr	r2, [r1, #12]
   2ed4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2ed50:	4b0b      	ldr	r3, [pc, #44]	; (2ed80 <SystemInit+0x1a4>)
   2ed52:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2ed54:	60cb      	str	r3, [r1, #12]
   2ed56:	f3bf 8f4f 	dsb	sy
    __NOP();
   2ed5a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2ed5c:	e7fd      	b.n	2ed5a <SystemInit+0x17e>
   2ed5e:	bf00      	nop
   2ed60:	4000c000 	.word	0x4000c000
   2ed64:	4000568c 	.word	0x4000568c
   2ed68:	00038148 	.word	0x00038148
   2ed6c:	4000f000 	.word	0x4000f000
   2ed70:	40000ee4 	.word	0x40000ee4
   2ed74:	10000258 	.word	0x10000258
   2ed78:	40029640 	.word	0x40029640
   2ed7c:	e000ed00 	.word	0xe000ed00
   2ed80:	05fa0004 	.word	0x05fa0004

0002ed84 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2ed84:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   2ed86:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2ed88:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   2ed8c:	f1d3 031f 	rsbs	r3, r3, #31
   2ed90:	d415      	bmi.n	2edbe <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2ed92:	2201      	movs	r2, #1
   2ed94:	409a      	lsls	r2, r3
   2ed96:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2ed9a:	f3bf 8f5b 	dmb	ish
   2ed9e:	e850 5f00 	ldrex	r5, [r0]
   2eda2:	42a5      	cmp	r5, r4
   2eda4:	d104      	bne.n	2edb0 <nrfx_flag32_alloc+0x2c>
   2eda6:	e840 2c00 	strex	ip, r2, [r0]
   2edaa:	f1bc 0f00 	cmp.w	ip, #0
   2edae:	d1f6      	bne.n	2ed9e <nrfx_flag32_alloc+0x1a>
   2edb0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2edb4:	d1e7      	bne.n	2ed86 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   2edb6:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   2edb8:	4802      	ldr	r0, [pc, #8]	; (2edc4 <nrfx_flag32_alloc+0x40>)
}
   2edba:	bc30      	pop	{r4, r5}
   2edbc:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   2edbe:	4802      	ldr	r0, [pc, #8]	; (2edc8 <nrfx_flag32_alloc+0x44>)
   2edc0:	e7fb      	b.n	2edba <nrfx_flag32_alloc+0x36>
   2edc2:	bf00      	nop
   2edc4:	0bad0000 	.word	0x0bad0000
   2edc8:	0bad0002 	.word	0x0bad0002

0002edcc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   2edcc:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2edce:	6803      	ldr	r3, [r0, #0]
   2edd0:	460c      	mov	r4, r1
   2edd2:	fa23 f101 	lsr.w	r1, r3, r1
   2edd6:	f011 0f01 	tst.w	r1, #1
   2edda:	d114      	bne.n	2ee06 <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   2eddc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   2edde:	2301      	movs	r3, #1
   2ede0:	40a3      	lsls	r3, r4
   2ede2:	4313      	orrs	r3, r2
   2ede4:	f3bf 8f5b 	dmb	ish
   2ede8:	e850 1f00 	ldrex	r1, [r0]
   2edec:	4291      	cmp	r1, r2
   2edee:	d104      	bne.n	2edfa <nrfx_flag32_free+0x2e>
   2edf0:	e840 3c00 	strex	ip, r3, [r0]
   2edf4:	f1bc 0f00 	cmp.w	ip, #0
   2edf8:	d1f6      	bne.n	2ede8 <nrfx_flag32_free+0x1c>
   2edfa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2edfe:	d1ed      	bne.n	2eddc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   2ee00:	4802      	ldr	r0, [pc, #8]	; (2ee0c <nrfx_flag32_free+0x40>)
}
   2ee02:	bc10      	pop	{r4}
   2ee04:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   2ee06:	4802      	ldr	r0, [pc, #8]	; (2ee10 <nrfx_flag32_free+0x44>)
   2ee08:	e7fb      	b.n	2ee02 <nrfx_flag32_free+0x36>
   2ee0a:	bf00      	nop
   2ee0c:	0bad0000 	.word	0x0bad0000
   2ee10:	0bad0004 	.word	0x0bad0004

0002ee14 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2ee14:	3008      	adds	r0, #8
   2ee16:	4b03      	ldr	r3, [pc, #12]	; (2ee24 <pin_in_use+0x10>)
   2ee18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2ee1c:	f000 0001 	and.w	r0, r0, #1
   2ee20:	4770      	bx	lr
   2ee22:	bf00      	nop
   2ee24:	2000087c 	.word	0x2000087c

0002ee28 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2ee28:	3008      	adds	r0, #8
   2ee2a:	4b03      	ldr	r3, [pc, #12]	; (2ee38 <pin_in_use_by_te+0x10>)
   2ee2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2ee30:	f3c0 1040 	ubfx	r0, r0, #5, #1
   2ee34:	4770      	bx	lr
   2ee36:	bf00      	nop
   2ee38:	2000087c 	.word	0x2000087c

0002ee3c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2ee3c:	3008      	adds	r0, #8
   2ee3e:	4b04      	ldr	r3, [pc, #16]	; (2ee50 <pin_has_trigger+0x14>)
   2ee40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2ee44:	f010 001c 	ands.w	r0, r0, #28
   2ee48:	bf18      	it	ne
   2ee4a:	2001      	movne	r0, #1
   2ee4c:	4770      	bx	lr
   2ee4e:	bf00      	nop
   2ee50:	2000087c 	.word	0x2000087c

0002ee54 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2ee54:	3008      	adds	r0, #8
   2ee56:	4b03      	ldr	r3, [pc, #12]	; (2ee64 <pin_is_output+0x10>)
   2ee58:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2ee5c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2ee60:	4770      	bx	lr
   2ee62:	bf00      	nop
   2ee64:	2000087c 	.word	0x2000087c

0002ee68 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2ee68:	3008      	adds	r0, #8
   2ee6a:	4b02      	ldr	r3, [pc, #8]	; (2ee74 <pin_te_get+0xc>)
   2ee6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2ee70:	0b40      	lsrs	r0, r0, #13
   2ee72:	4770      	bx	lr
   2ee74:	2000087c 	.word	0x2000087c

0002ee78 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2ee78:	2200      	movs	r2, #0
   2ee7a:	e004      	b.n	2ee86 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2ee7c:	f04f 33ff 	mov.w	r3, #4294967295
   2ee80:	4283      	cmp	r3, r0
   2ee82:	d00f      	beq.n	2eea4 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2ee84:	3201      	adds	r2, #1
   2ee86:	2a2f      	cmp	r2, #47	; 0x2f
   2ee88:	d80a      	bhi.n	2eea0 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2ee8a:	f102 0308 	add.w	r3, r2, #8
   2ee8e:	4906      	ldr	r1, [pc, #24]	; (2eea8 <handler_in_use+0x30>)
   2ee90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   2ee94:	f413 7f80 	tst.w	r3, #256	; 0x100
   2ee98:	d0f0      	beq.n	2ee7c <handler_in_use+0x4>
   2ee9a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2ee9e:	e7ef      	b.n	2ee80 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   2eea0:	2000      	movs	r0, #0
   2eea2:	4770      	bx	lr
            return true;
   2eea4:	2001      	movs	r0, #1
}
   2eea6:	4770      	bx	lr
   2eea8:	2000087c 	.word	0x2000087c

0002eeac <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   2eeac:	2300      	movs	r3, #0
   2eeae:	b113      	cbz	r3, 2eeb6 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   2eeb0:	f04f 30ff 	mov.w	r0, #4294967295
}
   2eeb4:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2eeb6:	4a07      	ldr	r2, [pc, #28]	; (2eed4 <find_handler+0x28>)
   2eeb8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   2eebc:	4282      	cmp	r2, r0
   2eebe:	d001      	beq.n	2eec4 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   2eec0:	3301      	adds	r3, #1
   2eec2:	e7f4      	b.n	2eeae <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2eec4:	4a03      	ldr	r2, [pc, #12]	; (2eed4 <find_handler+0x28>)
   2eec6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2eeca:	6852      	ldr	r2, [r2, #4]
   2eecc:	428a      	cmp	r2, r1
   2eece:	d1f7      	bne.n	2eec0 <find_handler+0x14>
            return i;
   2eed0:	4618      	mov	r0, r3
   2eed2:	4770      	bx	lr
   2eed4:	2000087c 	.word	0x2000087c

0002eed8 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2eed8:	3008      	adds	r0, #8
   2eeda:	4b06      	ldr	r3, [pc, #24]	; (2eef4 <channel_handler_get+0x1c>)
   2eedc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   2eee0:	f410 7f80 	tst.w	r0, #256	; 0x100
   2eee4:	d004      	beq.n	2eef0 <channel_handler_get+0x18>
   2eee6:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   2eeea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2eeee:	4770      	bx	lr
        return NULL;
   2eef0:	2000      	movs	r0, #0
}
   2eef2:	4770      	bx	lr
   2eef4:	2000087c 	.word	0x2000087c

0002eef8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2eef8:	b570      	push	{r4, r5, r6, lr}
   2eefa:	4604      	mov	r4, r0
   2eefc:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   2eefe:	f7ff ffeb 	bl	2eed8 <channel_handler_get>

    if (handler)
   2ef02:	b120      	cbz	r0, 2ef0e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   2ef04:	6806      	ldr	r6, [r0, #0]
   2ef06:	6842      	ldr	r2, [r0, #4]
   2ef08:	4629      	mov	r1, r5
   2ef0a:	4620      	mov	r0, r4
   2ef0c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   2ef0e:	4b04      	ldr	r3, [pc, #16]	; (2ef20 <call_handler+0x28>)
   2ef10:	689b      	ldr	r3, [r3, #8]
   2ef12:	b123      	cbz	r3, 2ef1e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2ef14:	4a02      	ldr	r2, [pc, #8]	; (2ef20 <call_handler+0x28>)
   2ef16:	68d2      	ldr	r2, [r2, #12]
   2ef18:	4629      	mov	r1, r5
   2ef1a:	4620      	mov	r0, r4
   2ef1c:	4798      	blx	r3
    }
}
   2ef1e:	bd70      	pop	{r4, r5, r6, pc}
   2ef20:	2000087c 	.word	0x2000087c

0002ef24 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   2ef24:	b570      	push	{r4, r5, r6, lr}
   2ef26:	4604      	mov	r4, r0
   2ef28:	460d      	mov	r5, r1
   2ef2a:	4616      	mov	r6, r2
    if (is_level(trigger))
   2ef2c:	4608      	mov	r0, r1
   2ef2e:	f00d f807 	bl	3bf40 <is_level>
   2ef32:	b9d0      	cbnz	r0, 2ef6a <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2ef34:	2e02      	cmp	r6, #2
   2ef36:	d03e      	beq.n	2efb6 <next_sense_cond_call_handler+0x92>
   2ef38:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   2ef3a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   2ef3e:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ef40:	2901      	cmp	r1, #1
   2ef42:	d03a      	beq.n	2efba <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
   2ef44:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ef48:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2ef4c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   2ef50:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ef54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   2ef58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2ef5c:	2d03      	cmp	r5, #3
   2ef5e:	d030      	beq.n	2efc2 <next_sense_cond_call_handler+0x9e>
   2ef60:	2e02      	cmp	r6, #2
   2ef62:	d02c      	beq.n	2efbe <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2ef64:	2e03      	cmp	r6, #3
   2ef66:	d031      	beq.n	2efcc <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   2ef68:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   2ef6a:	4629      	mov	r1, r5
   2ef6c:	4620      	mov	r0, r4
   2ef6e:	f7ff ffc3 	bl	2eef8 <call_handler>
    *p_pin = pin_number & 0x1F;
   2ef72:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   2ef76:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ef78:	2c01      	cmp	r4, #1
   2ef7a:	d01a      	beq.n	2efb2 <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
   2ef7c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2ef80:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
   2ef84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   2ef88:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2ef8c:	4296      	cmp	r6, r2
   2ef8e:	d1eb      	bne.n	2ef68 <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ef90:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2ef94:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   2ef98:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   2ef9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2efa0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   2efa4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2efa8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   2efac:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   2efb0:	e7da      	b.n	2ef68 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   2efb2:	4908      	ldr	r1, [pc, #32]	; (2efd4 <next_sense_cond_call_handler+0xb0>)
   2efb4:	e7e4      	b.n	2ef80 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2efb6:	2003      	movs	r0, #3
   2efb8:	e7bf      	b.n	2ef3a <next_sense_cond_call_handler+0x16>
   2efba:	4906      	ldr	r1, [pc, #24]	; (2efd4 <next_sense_cond_call_handler+0xb0>)
   2efbc:	e7c4      	b.n	2ef48 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2efbe:	2d01      	cmp	r5, #1
   2efc0:	d1d0      	bne.n	2ef64 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   2efc2:	4629      	mov	r1, r5
   2efc4:	4620      	mov	r0, r4
   2efc6:	f7ff ff97 	bl	2eef8 <call_handler>
}
   2efca:	e7cd      	b.n	2ef68 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2efcc:	2d02      	cmp	r5, #2
   2efce:	d1cb      	bne.n	2ef68 <next_sense_cond_call_handler+0x44>
   2efd0:	e7f7      	b.n	2efc2 <next_sense_cond_call_handler+0x9e>
   2efd2:	bf00      	nop
   2efd4:	50000300 	.word	0x50000300

0002efd8 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   2efd8:	b410      	push	{r4}
   2efda:	b083      	sub	sp, #12
   2efdc:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   2efde:	4b12      	ldr	r3, [pc, #72]	; (2f028 <latch_pending_read_and_check+0x50>)
   2efe0:	e893 0003 	ldmia.w	r3, {r0, r1}
   2efe4:	ab02      	add	r3, sp, #8
   2efe6:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   2efea:	4620      	mov	r0, r4
   2efec:	2300      	movs	r3, #0
   2efee:	e00b      	b.n	2f008 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   2eff0:	aa02      	add	r2, sp, #8
   2eff2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2eff6:	f852 2c08 	ldr.w	r2, [r2, #-8]
   2effa:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   2effe:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   2f002:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   2f006:	3301      	adds	r3, #1
   2f008:	2b01      	cmp	r3, #1
   2f00a:	d9f1      	bls.n	2eff0 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2f00c:	2300      	movs	r3, #0
   2f00e:	2b01      	cmp	r3, #1
   2f010:	d804      	bhi.n	2f01c <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   2f012:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2f016:	b92a      	cbnz	r2, 2f024 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2f018:	3301      	adds	r3, #1
   2f01a:	e7f8      	b.n	2f00e <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   2f01c:	2000      	movs	r0, #0
}
   2f01e:	b003      	add	sp, #12
   2f020:	bc10      	pop	{r4}
   2f022:	4770      	bx	lr
            return true;
   2f024:	2001      	movs	r0, #1
   2f026:	e7fa      	b.n	2f01e <latch_pending_read_and_check+0x46>
   2f028:	0003d438 	.word	0x0003d438

0002f02c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2f02c:	f100 0208 	add.w	r2, r0, #8
   2f030:	4b0e      	ldr	r3, [pc, #56]	; (2f06c <release_handler+0x40>)
   2f032:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   2f036:	f413 7f80 	tst.w	r3, #256	; 0x100
   2f03a:	d016      	beq.n	2f06a <release_handler+0x3e>
{
   2f03c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2f03e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2f042:	4610      	mov	r0, r2
   2f044:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2f048:	4a08      	ldr	r2, [pc, #32]	; (2f06c <release_handler+0x40>)
   2f04a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   2f04e:	4620      	mov	r0, r4
   2f050:	f7ff ff12 	bl	2ee78 <handler_in_use>
   2f054:	b100      	cbz	r0, 2f058 <release_handler+0x2c>
}
   2f056:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   2f058:	4804      	ldr	r0, [pc, #16]	; (2f06c <release_handler+0x40>)
   2f05a:	2300      	movs	r3, #0
   2f05c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2f060:	4621      	mov	r1, r4
   2f062:	3074      	adds	r0, #116	; 0x74
   2f064:	f7ff feb2 	bl	2edcc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2f068:	e7f5      	b.n	2f056 <release_handler+0x2a>
   2f06a:	4770      	bx	lr
   2f06c:	2000087c 	.word	0x2000087c

0002f070 <pin_handler_trigger_uninit>:
{
   2f070:	b510      	push	{r4, lr}
   2f072:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   2f074:	f7ff fed8 	bl	2ee28 <pin_in_use_by_te>
   2f078:	b140      	cbz	r0, 2f08c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2f07a:	4620      	mov	r0, r4
   2f07c:	f7ff fef4 	bl	2ee68 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2f080:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2f084:	4b06      	ldr	r3, [pc, #24]	; (2f0a0 <pin_handler_trigger_uninit+0x30>)
   2f086:	2200      	movs	r2, #0
   2f088:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   2f08c:	4620      	mov	r0, r4
   2f08e:	f7ff ffcd 	bl	2f02c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2f092:	3408      	adds	r4, #8
   2f094:	4b03      	ldr	r3, [pc, #12]	; (2f0a4 <pin_handler_trigger_uninit+0x34>)
   2f096:	2200      	movs	r2, #0
   2f098:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   2f09c:	bd10      	pop	{r4, pc}
   2f09e:	bf00      	nop
   2f0a0:	40006000 	.word	0x40006000
   2f0a4:	2000087c 	.word	0x2000087c

0002f0a8 <pin_handler_set>:
{
   2f0a8:	b570      	push	{r4, r5, r6, lr}
   2f0aa:	b082      	sub	sp, #8
   2f0ac:	4606      	mov	r6, r0
   2f0ae:	460c      	mov	r4, r1
   2f0b0:	4615      	mov	r5, r2
    release_handler(pin);
   2f0b2:	f7ff ffbb 	bl	2f02c <release_handler>
    if (!handler)
   2f0b6:	b324      	cbz	r4, 2f102 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   2f0b8:	4629      	mov	r1, r5
   2f0ba:	4620      	mov	r0, r4
   2f0bc:	f7ff fef6 	bl	2eeac <find_handler>
    if (handler_id < 0)
   2f0c0:	1e03      	subs	r3, r0, #0
   2f0c2:	db13      	blt.n	2f0ec <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   2f0c4:	4a10      	ldr	r2, [pc, #64]	; (2f108 <pin_handler_set+0x60>)
   2f0c6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2f0ca:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   2f0ce:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2f0d0:	025b      	lsls	r3, r3, #9
   2f0d2:	b29b      	uxth	r3, r3
   2f0d4:	f106 0008 	add.w	r0, r6, #8
   2f0d8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   2f0dc:	430b      	orrs	r3, r1
   2f0de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2f0e2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   2f0e6:	4809      	ldr	r0, [pc, #36]	; (2f10c <pin_handler_set+0x64>)
}
   2f0e8:	b002      	add	sp, #8
   2f0ea:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2f0ec:	f10d 0107 	add.w	r1, sp, #7
   2f0f0:	4807      	ldr	r0, [pc, #28]	; (2f110 <pin_handler_set+0x68>)
   2f0f2:	f7ff fe47 	bl	2ed84 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2f0f6:	4b05      	ldr	r3, [pc, #20]	; (2f10c <pin_handler_set+0x64>)
   2f0f8:	4298      	cmp	r0, r3
   2f0fa:	d1f5      	bne.n	2f0e8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   2f0fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2f100:	e7e0      	b.n	2f0c4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   2f102:	4802      	ldr	r0, [pc, #8]	; (2f10c <pin_handler_set+0x64>)
   2f104:	e7f0      	b.n	2f0e8 <pin_handler_set+0x40>
   2f106:	bf00      	nop
   2f108:	2000087c 	.word	0x2000087c
   2f10c:	0bad0000 	.word	0x0bad0000
   2f110:	200008f0 	.word	0x200008f0

0002f114 <port_event_handle>:

static void port_event_handle(void)
{
   2f114:	b570      	push	{r4, r5, r6, lr}
   2f116:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   2f118:	4a2c      	ldr	r2, [pc, #176]	; (2f1cc <port_event_handle+0xb8>)
   2f11a:	466b      	mov	r3, sp
   2f11c:	e892 0003 	ldmia.w	r2, {r0, r1}
   2f120:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   2f124:	2300      	movs	r3, #0
   2f126:	a802      	add	r0, sp, #8
   2f128:	e00b      	b.n	2f142 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   2f12a:	aa04      	add	r2, sp, #16
   2f12c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2f130:	f852 2c10 	ldr.w	r2, [r2, #-16]
   2f134:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   2f138:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   2f13c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   2f140:	3301      	adds	r3, #1
   2f142:	2b01      	cmp	r3, #1
   2f144:	d9f1      	bls.n	2f12a <port_event_handle+0x16>
   2f146:	e03d      	b.n	2f1c4 <port_event_handle+0xb0>
        case 1: return NRF_P1;
   2f148:	4e21      	ldr	r6, [pc, #132]	; (2f1d0 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2f14a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   2f14e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   2f152:	f3c2 4201 	ubfx	r2, r2, #16, #2
   2f156:	f7ff fee5 	bl	2ef24 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   2f15a:	2301      	movs	r3, #1
   2f15c:	40ab      	lsls	r3, r5
   2f15e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   2f162:	ab04      	add	r3, sp, #16
   2f164:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2f168:	f853 0c08 	ldr.w	r0, [r3, #-8]
   2f16c:	b1f8      	cbz	r0, 2f1ae <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
   2f16e:	fa90 f0a0 	rbit	r0, r0
   2f172:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   2f176:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2f17a:	f100 0208 	add.w	r2, r0, #8
   2f17e:	4b15      	ldr	r3, [pc, #84]	; (2f1d4 <port_event_handle+0xc0>)
   2f180:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   2f184:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2f188:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   2f18a:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2f18e:	ae02      	add	r6, sp, #8
   2f190:	2301      	movs	r3, #1
   2f192:	fa03 f202 	lsl.w	r2, r3, r2
   2f196:	5d73      	ldrb	r3, [r6, r5]
   2f198:	ea23 0302 	bic.w	r3, r3, r2
   2f19c:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
   2f19e:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   2f1a2:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f1a4:	2b01      	cmp	r3, #1
   2f1a6:	d0cf      	beq.n	2f148 <port_event_handle+0x34>
        case 0: return NRF_P0;
   2f1a8:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   2f1ac:	e7cd      	b.n	2f14a <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2f1ae:	3401      	adds	r4, #1
   2f1b0:	2c01      	cmp	r4, #1
   2f1b2:	d9d6      	bls.n	2f162 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2f1b4:	4b08      	ldr	r3, [pc, #32]	; (2f1d8 <port_event_handle+0xc4>)
   2f1b6:	2200      	movs	r2, #0
   2f1b8:	601a      	str	r2, [r3, #0]
   2f1ba:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   2f1bc:	a802      	add	r0, sp, #8
   2f1be:	f7ff ff0b 	bl	2efd8 <latch_pending_read_and_check>
   2f1c2:	b108      	cbz	r0, 2f1c8 <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2f1c4:	2400      	movs	r4, #0
   2f1c6:	e7f3      	b.n	2f1b0 <port_event_handle+0x9c>
}
   2f1c8:	b004      	add	sp, #16
   2f1ca:	bd70      	pop	{r4, r5, r6, pc}
   2f1cc:	0003d438 	.word	0x0003d438
   2f1d0:	50000300 	.word	0x50000300
   2f1d4:	2000087c 	.word	0x2000087c
   2f1d8:	4000617c 	.word	0x4000617c

0002f1dc <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   2f1dc:	b538      	push	{r3, r4, r5, lr}
   2f1de:	4604      	mov	r4, r0
    while (mask)
   2f1e0:	b1cc      	cbz	r4, 2f216 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   2f1e2:	fa94 f3a4 	rbit	r3, r4
   2f1e6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2f1ea:	2201      	movs	r2, #1
   2f1ec:	409a      	lsls	r2, r3
   2f1ee:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2f1f2:	4a09      	ldr	r2, [pc, #36]	; (2f218 <gpiote_evt_handle+0x3c>)
   2f1f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   2f1f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   2f1fc:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2f200:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2f204:	f3c0 4001 	ubfx	r0, r0, #16, #2
   2f208:	f00c fe98 	bl	3bf3c <gpiote_polarity_to_trigger>
   2f20c:	4601      	mov	r1, r0
   2f20e:	4628      	mov	r0, r5
   2f210:	f7ff fe72 	bl	2eef8 <call_handler>
   2f214:	e7e4      	b.n	2f1e0 <gpiote_evt_handle+0x4>
    }
}
   2f216:	bd38      	pop	{r3, r4, r5, pc}
   2f218:	40006000 	.word	0x40006000

0002f21c <nrfx_gpiote_input_configure>:
{
   2f21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f220:	4604      	mov	r4, r0
   2f222:	4615      	mov	r5, r2
   2f224:	461e      	mov	r6, r3
    if (p_input_config)
   2f226:	b361      	cbz	r1, 2f282 <nrfx_gpiote_input_configure+0x66>
   2f228:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   2f22a:	f00c fe71 	bl	3bf10 <pin_is_task_output>
   2f22e:	2800      	cmp	r0, #0
   2f230:	f040 8097 	bne.w	2f362 <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
   2f234:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   2f238:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f23a:	2b01      	cmp	r3, #1
   2f23c:	d042      	beq.n	2f2c4 <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
   2f23e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2f242:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2f246:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f24a:	2f00      	cmp	r7, #0
   2f24c:	d03c      	beq.n	2f2c8 <nrfx_gpiote_input_configure+0xac>
   2f24e:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2f250:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   2f254:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2f258:	2f00      	cmp	r7, #0
   2f25a:	d037      	beq.n	2f2cc <nrfx_gpiote_input_configure+0xb0>
   2f25c:	7839      	ldrb	r1, [r7, #0]
   2f25e:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2f260:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   2f262:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2f266:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2f26a:	4a42      	ldr	r2, [pc, #264]	; (2f374 <nrfx_gpiote_input_configure+0x158>)
   2f26c:	f104 0108 	add.w	r1, r4, #8
   2f270:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2f274:	f023 0302 	bic.w	r3, r3, #2
   2f278:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2f27a:	f043 0301 	orr.w	r3, r3, #1
   2f27e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   2f282:	b1b5      	cbz	r5, 2f2b2 <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2f284:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2f288:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   2f28c:	4620      	mov	r0, r4
   2f28e:	f7ff fde1 	bl	2ee54 <pin_is_output>
   2f292:	b1e8      	cbz	r0, 2f2d0 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
   2f294:	f1b9 0f00 	cmp.w	r9, #0
   2f298:	d165      	bne.n	2f366 <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2f29a:	4b36      	ldr	r3, [pc, #216]	; (2f374 <nrfx_gpiote_input_configure+0x158>)
   2f29c:	f104 0208 	add.w	r2, r4, #8
   2f2a0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   2f2a4:	f020 001c 	bic.w	r0, r0, #28
   2f2a8:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2f2aa:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   2f2ae:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   2f2b2:	2e00      	cmp	r6, #0
   2f2b4:	d05b      	beq.n	2f36e <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2f2b6:	6872      	ldr	r2, [r6, #4]
   2f2b8:	6831      	ldr	r1, [r6, #0]
   2f2ba:	4620      	mov	r0, r4
   2f2bc:	f7ff fef4 	bl	2f0a8 <pin_handler_set>
}
   2f2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
   2f2c4:	482c      	ldr	r0, [pc, #176]	; (2f378 <nrfx_gpiote_input_configure+0x15c>)
   2f2c6:	e7bc      	b.n	2f242 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f2c8:	2100      	movs	r1, #0
   2f2ca:	e7c1      	b.n	2f250 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2f2cc:	2100      	movs	r1, #0
   2f2ce:	e7c7      	b.n	2f260 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2f2d0:	4b28      	ldr	r3, [pc, #160]	; (2f374 <nrfx_gpiote_input_configure+0x158>)
   2f2d2:	f104 0208 	add.w	r2, r4, #8
   2f2d6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   2f2da:	f027 0720 	bic.w	r7, r7, #32
   2f2de:	04ff      	lsls	r7, r7, #19
   2f2e0:	0cff      	lsrs	r7, r7, #19
   2f2e2:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   2f2e6:	f1b9 0f00 	cmp.w	r9, #0
   2f2ea:	d0d6      	beq.n	2f29a <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
   2f2ec:	f1b8 0f03 	cmp.w	r8, #3
   2f2f0:	d83b      	bhi.n	2f36a <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   2f2f2:	686b      	ldr	r3, [r5, #4]
   2f2f4:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2f2f6:	f1b8 0f00 	cmp.w	r8, #0
   2f2fa:	d106      	bne.n	2f30a <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   2f2fc:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   2f300:	4b1e      	ldr	r3, [pc, #120]	; (2f37c <nrfx_gpiote_input_configure+0x160>)
   2f302:	2200      	movs	r2, #0
   2f304:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   2f308:	e7c7      	b.n	2f29a <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   2f30a:	4640      	mov	r0, r8
   2f30c:	f00c fe17 	bl	3bf3e <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2f310:	4b1a      	ldr	r3, [pc, #104]	; (2f37c <nrfx_gpiote_input_configure+0x160>)
   2f312:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   2f316:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2f31a:	f021 0103 	bic.w	r1, r1, #3
   2f31e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2f322:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2f326:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   2f32a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   2f32e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2f332:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   2f336:	0221      	lsls	r1, r4, #8
   2f338:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   2f33c:	0400      	lsls	r0, r0, #16
   2f33e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2f342:	4301      	orrs	r1, r0
   2f344:	ea4c 0101 	orr.w	r1, ip, r1
   2f348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2f34c:	036d      	lsls	r5, r5, #13
   2f34e:	b2ad      	uxth	r5, r5
   2f350:	f104 0308 	add.w	r3, r4, #8
   2f354:	432f      	orrs	r7, r5
   2f356:	f047 0720 	orr.w	r7, r7, #32
   2f35a:	4a06      	ldr	r2, [pc, #24]	; (2f374 <nrfx_gpiote_input_configure+0x158>)
   2f35c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   2f360:	e79b      	b.n	2f29a <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
   2f362:	4807      	ldr	r0, [pc, #28]	; (2f380 <nrfx_gpiote_input_configure+0x164>)
   2f364:	e7ac      	b.n	2f2c0 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
   2f366:	4806      	ldr	r0, [pc, #24]	; (2f380 <nrfx_gpiote_input_configure+0x164>)
   2f368:	e7aa      	b.n	2f2c0 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
   2f36a:	4805      	ldr	r0, [pc, #20]	; (2f380 <nrfx_gpiote_input_configure+0x164>)
   2f36c:	e7a8      	b.n	2f2c0 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
   2f36e:	4805      	ldr	r0, [pc, #20]	; (2f384 <nrfx_gpiote_input_configure+0x168>)
   2f370:	e7a6      	b.n	2f2c0 <nrfx_gpiote_input_configure+0xa4>
   2f372:	bf00      	nop
   2f374:	2000087c 	.word	0x2000087c
   2f378:	50000300 	.word	0x50000300
   2f37c:	40006000 	.word	0x40006000
   2f380:	0bad0004 	.word	0x0bad0004
   2f384:	0bad0000 	.word	0x0bad0000

0002f388 <nrfx_gpiote_output_configure>:
{
   2f388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f38a:	4604      	mov	r4, r0
   2f38c:	4615      	mov	r5, r2
    if (p_config)
   2f38e:	2900      	cmp	r1, #0
   2f390:	d052      	beq.n	2f438 <nrfx_gpiote_output_configure+0xb0>
   2f392:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2f394:	f00c fdcb 	bl	3bf2e <pin_is_input>
   2f398:	b128      	cbz	r0, 2f3a6 <nrfx_gpiote_output_configure+0x1e>
   2f39a:	4620      	mov	r0, r4
   2f39c:	f7ff fd44 	bl	2ee28 <pin_in_use_by_te>
   2f3a0:	2800      	cmp	r0, #0
   2f3a2:	f040 809d 	bne.w	2f4e0 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2f3a6:	4620      	mov	r0, r4
   2f3a8:	f7ff fd48 	bl	2ee3c <pin_has_trigger>
   2f3ac:	b118      	cbz	r0, 2f3b6 <nrfx_gpiote_output_configure+0x2e>
   2f3ae:	7873      	ldrb	r3, [r6, #1]
   2f3b0:	2b01      	cmp	r3, #1
   2f3b2:	f000 8097 	beq.w	2f4e4 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2f3b6:	f106 0c01 	add.w	ip, r6, #1
   2f3ba:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   2f3bc:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   2f3c0:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f3c2:	2b01      	cmp	r3, #1
   2f3c4:	d07c      	beq.n	2f4c0 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
   2f3c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2f3ca:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2f3ce:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2f3d2:	f1bc 0f00 	cmp.w	ip, #0
   2f3d6:	d075      	beq.n	2f4c4 <nrfx_gpiote_output_configure+0x13c>
   2f3d8:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2f3da:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f3de:	2f00      	cmp	r7, #0
   2f3e0:	d072      	beq.n	2f4c8 <nrfx_gpiote_output_configure+0x140>
   2f3e2:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2f3e6:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2f3ea:	2e00      	cmp	r6, #0
   2f3ec:	d06f      	beq.n	2f4ce <nrfx_gpiote_output_configure+0x146>
   2f3ee:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f3f2:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   2f3f6:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2f3fa:	f1bc 0f00 	cmp.w	ip, #0
   2f3fe:	d069      	beq.n	2f4d4 <nrfx_gpiote_output_configure+0x14c>
   2f400:	7873      	ldrb	r3, [r6, #1]
   2f402:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2f404:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2f408:	2f00      	cmp	r7, #0
   2f40a:	d065      	beq.n	2f4d8 <nrfx_gpiote_output_configure+0x150>
   2f40c:	78b7      	ldrb	r7, [r6, #2]
   2f40e:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2f410:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2f412:	2e00      	cmp	r6, #0
   2f414:	d062      	beq.n	2f4dc <nrfx_gpiote_output_configure+0x154>
   2f416:	7836      	ldrb	r6, [r6, #0]
   2f418:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2f41a:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2f41c:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   2f41e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2f422:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2f426:	4a33      	ldr	r2, [pc, #204]	; (2f4f4 <nrfx_gpiote_output_configure+0x16c>)
   2f428:	f104 0108 	add.w	r1, r4, #8
   2f42c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2f430:	f043 0303 	orr.w	r3, r3, #3
   2f434:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   2f438:	2d00      	cmp	r5, #0
   2f43a:	d055      	beq.n	2f4e8 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
   2f43c:	4620      	mov	r0, r4
   2f43e:	f00c fd76 	bl	3bf2e <pin_is_input>
   2f442:	2800      	cmp	r0, #0
   2f444:	d152      	bne.n	2f4ec <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
   2f446:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   2f448:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   2f44c:	4b2a      	ldr	r3, [pc, #168]	; (2f4f8 <nrfx_gpiote_output_configure+0x170>)
   2f44e:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2f452:	4928      	ldr	r1, [pc, #160]	; (2f4f4 <nrfx_gpiote_output_configure+0x16c>)
   2f454:	f104 0008 	add.w	r0, r4, #8
   2f458:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   2f45c:	f023 0320 	bic.w	r3, r3, #32
   2f460:	04db      	lsls	r3, r3, #19
   2f462:	0cdb      	lsrs	r3, r3, #19
   2f464:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2f468:	7869      	ldrb	r1, [r5, #1]
   2f46a:	2900      	cmp	r1, #0
   2f46c:	d040      	beq.n	2f4f0 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   2f46e:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2f472:	4d21      	ldr	r5, [pc, #132]	; (2f4f8 <nrfx_gpiote_output_configure+0x170>)
   2f474:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   2f478:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   2f47c:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
   2f480:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   2f484:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2f488:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   2f48c:	0220      	lsls	r0, r4, #8
   2f48e:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2f492:	0409      	lsls	r1, r1, #16
   2f494:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2f498:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2f49a:	ea4f 500c 	mov.w	r0, ip, lsl #20
   2f49e:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2f4a2:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2f4a4:	4339      	orrs	r1, r7
   2f4a6:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2f4aa:	0352      	lsls	r2, r2, #13
   2f4ac:	b292      	uxth	r2, r2
   2f4ae:	3408      	adds	r4, #8
   2f4b0:	431a      	orrs	r2, r3
   2f4b2:	f042 0220 	orr.w	r2, r2, #32
   2f4b6:	4b0f      	ldr	r3, [pc, #60]	; (2f4f4 <nrfx_gpiote_output_configure+0x16c>)
   2f4b8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   2f4bc:	480f      	ldr	r0, [pc, #60]	; (2f4fc <nrfx_gpiote_output_configure+0x174>)
   2f4be:	e014      	b.n	2f4ea <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
   2f4c0:	490f      	ldr	r1, [pc, #60]	; (2f500 <nrfx_gpiote_output_configure+0x178>)
   2f4c2:	e782      	b.n	2f3ca <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2f4c4:	2300      	movs	r3, #0
   2f4c6:	e788      	b.n	2f3da <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f4c8:	f04f 0e00 	mov.w	lr, #0
   2f4cc:	e78b      	b.n	2f3e6 <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2f4ce:	f04f 0e00 	mov.w	lr, #0
   2f4d2:	e78e      	b.n	2f3f2 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2f4d4:	2300      	movs	r3, #0
   2f4d6:	e795      	b.n	2f404 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2f4d8:	2700      	movs	r7, #0
   2f4da:	e799      	b.n	2f410 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2f4dc:	2600      	movs	r6, #0
   2f4de:	e79c      	b.n	2f41a <nrfx_gpiote_output_configure+0x92>
   2f4e0:	4808      	ldr	r0, [pc, #32]	; (2f504 <nrfx_gpiote_output_configure+0x17c>)
   2f4e2:	e002      	b.n	2f4ea <nrfx_gpiote_output_configure+0x162>
   2f4e4:	4807      	ldr	r0, [pc, #28]	; (2f504 <nrfx_gpiote_output_configure+0x17c>)
   2f4e6:	e000      	b.n	2f4ea <nrfx_gpiote_output_configure+0x162>
   2f4e8:	4804      	ldr	r0, [pc, #16]	; (2f4fc <nrfx_gpiote_output_configure+0x174>)
}
   2f4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   2f4ec:	4805      	ldr	r0, [pc, #20]	; (2f504 <nrfx_gpiote_output_configure+0x17c>)
   2f4ee:	e7fc      	b.n	2f4ea <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
   2f4f0:	4802      	ldr	r0, [pc, #8]	; (2f4fc <nrfx_gpiote_output_configure+0x174>)
   2f4f2:	e7fa      	b.n	2f4ea <nrfx_gpiote_output_configure+0x162>
   2f4f4:	2000087c 	.word	0x2000087c
   2f4f8:	40006000 	.word	0x40006000
   2f4fc:	0bad0000 	.word	0x0bad0000
   2f500:	50000300 	.word	0x50000300
   2f504:	0bad0004 	.word	0x0bad0004

0002f508 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2f508:	4b01      	ldr	r3, [pc, #4]	; (2f510 <nrfx_gpiote_global_callback_set+0x8>)
   2f50a:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   2f50c:	60d9      	str	r1, [r3, #12]
}
   2f50e:	4770      	bx	lr
   2f510:	2000087c 	.word	0x2000087c

0002f514 <nrfx_gpiote_channel_get>:
{
   2f514:	b538      	push	{r3, r4, r5, lr}
   2f516:	4604      	mov	r4, r0
   2f518:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   2f51a:	f7ff fc85 	bl	2ee28 <pin_in_use_by_te>
   2f51e:	b140      	cbz	r0, 2f532 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2f520:	f104 0008 	add.w	r0, r4, #8
   2f524:	4b04      	ldr	r3, [pc, #16]	; (2f538 <nrfx_gpiote_channel_get+0x24>)
   2f526:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   2f52a:	0b5b      	lsrs	r3, r3, #13
   2f52c:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   2f52e:	4803      	ldr	r0, [pc, #12]	; (2f53c <nrfx_gpiote_channel_get+0x28>)
}
   2f530:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2f532:	4803      	ldr	r0, [pc, #12]	; (2f540 <nrfx_gpiote_channel_get+0x2c>)
   2f534:	e7fc      	b.n	2f530 <nrfx_gpiote_channel_get+0x1c>
   2f536:	bf00      	nop
   2f538:	2000087c 	.word	0x2000087c
   2f53c:	0bad0000 	.word	0x0bad0000
   2f540:	0bad0004 	.word	0x0bad0004

0002f544 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2f544:	4b0f      	ldr	r3, [pc, #60]	; (2f584 <nrfx_gpiote_init+0x40>)
   2f546:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   2f54a:	b10b      	cbz	r3, 2f550 <nrfx_gpiote_init+0xc>
        return err_code;
   2f54c:	480e      	ldr	r0, [pc, #56]	; (2f588 <nrfx_gpiote_init+0x44>)
}
   2f54e:	4770      	bx	lr
{
   2f550:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2f552:	4c0c      	ldr	r4, [pc, #48]	; (2f584 <nrfx_gpiote_init+0x40>)
   2f554:	2260      	movs	r2, #96	; 0x60
   2f556:	2100      	movs	r1, #0
   2f558:	f104 0010 	add.w	r0, r4, #16
   2f55c:	f007 fc26 	bl	36dac <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2f560:	2006      	movs	r0, #6
   2f562:	f7f2 fd9b 	bl	2209c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2f566:	4b09      	ldr	r3, [pc, #36]	; (2f58c <nrfx_gpiote_init+0x48>)
   2f568:	2200      	movs	r2, #0
   2f56a:	601a      	str	r2, [r3, #0]
   2f56c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2f56e:	4b08      	ldr	r3, [pc, #32]	; (2f590 <nrfx_gpiote_init+0x4c>)
   2f570:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2f574:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2f578:	2301      	movs	r3, #1
   2f57a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2f57e:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   2f580:	4804      	ldr	r0, [pc, #16]	; (2f594 <nrfx_gpiote_init+0x50>)
}
   2f582:	bd10      	pop	{r4, pc}
   2f584:	2000087c 	.word	0x2000087c
   2f588:	0bad0005 	.word	0x0bad0005
   2f58c:	4000617c 	.word	0x4000617c
   2f590:	40006000 	.word	0x40006000
   2f594:	0bad0000 	.word	0x0bad0000

0002f598 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2f598:	4b03      	ldr	r3, [pc, #12]	; (2f5a8 <nrfx_gpiote_is_init+0x10>)
   2f59a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2f59e:	3800      	subs	r0, #0
   2f5a0:	bf18      	it	ne
   2f5a2:	2001      	movne	r0, #1
   2f5a4:	4770      	bx	lr
   2f5a6:	bf00      	nop
   2f5a8:	2000087c 	.word	0x2000087c

0002f5ac <nrfx_gpiote_channel_free>:
{
   2f5ac:	b508      	push	{r3, lr}
   2f5ae:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2f5b0:	4801      	ldr	r0, [pc, #4]	; (2f5b8 <nrfx_gpiote_channel_free+0xc>)
   2f5b2:	f7ff fc0b 	bl	2edcc <nrfx_flag32_free>
}
   2f5b6:	bd08      	pop	{r3, pc}
   2f5b8:	200008ec 	.word	0x200008ec

0002f5bc <nrfx_gpiote_channel_alloc>:
{
   2f5bc:	b508      	push	{r3, lr}
   2f5be:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2f5c0:	4801      	ldr	r0, [pc, #4]	; (2f5c8 <nrfx_gpiote_channel_alloc+0xc>)
   2f5c2:	f7ff fbdf 	bl	2ed84 <nrfx_flag32_alloc>
}
   2f5c6:	bd08      	pop	{r3, pc}
   2f5c8:	200008ec 	.word	0x200008ec

0002f5cc <nrfx_gpiote_trigger_enable>:
{
   2f5cc:	b538      	push	{r3, r4, r5, lr}
   2f5ce:	4604      	mov	r4, r0
   2f5d0:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2f5d2:	f7ff fc29 	bl	2ee28 <pin_in_use_by_te>
   2f5d6:	b308      	cbz	r0, 2f61c <nrfx_gpiote_trigger_enable+0x50>
   2f5d8:	4620      	mov	r0, r4
   2f5da:	f00c fca8 	bl	3bf2e <pin_is_input>
   2f5de:	b1e8      	cbz	r0, 2f61c <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   2f5e0:	4620      	mov	r0, r4
   2f5e2:	f7ff fc41 	bl	2ee68 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2f5e6:	0083      	lsls	r3, r0, #2
   2f5e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   2f5ec:	b29b      	uxth	r3, r3
   2f5ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2f5f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2f5f6:	2200      	movs	r2, #0
   2f5f8:	601a      	str	r2, [r3, #0]
   2f5fa:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2f5fc:	4a22      	ldr	r2, [pc, #136]	; (2f688 <nrfx_gpiote_trigger_enable+0xbc>)
   2f5fe:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   2f602:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2f606:	f043 0301 	orr.w	r3, r3, #1
   2f60a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   2f60e:	b39d      	cbz	r5, 2f678 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   2f610:	2301      	movs	r3, #1
   2f612:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   2f616:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   2f61a:	e02d      	b.n	2f678 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2f61c:	f104 0308 	add.w	r3, r4, #8
   2f620:	4a1a      	ldr	r2, [pc, #104]	; (2f68c <nrfx_gpiote_trigger_enable+0xc0>)
   2f622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   2f626:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2f62a:	2b04      	cmp	r3, #4
   2f62c:	d012      	beq.n	2f654 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2f62e:	2b05      	cmp	r3, #5
   2f630:	d023      	beq.n	2f67a <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
   2f632:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   2f636:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f638:	2b01      	cmp	r3, #1
   2f63a:	d009      	beq.n	2f650 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
   2f63c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   2f640:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2f644:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2f646:	f013 0f01 	tst.w	r3, #1
   2f64a:	d018      	beq.n	2f67e <nrfx_gpiote_trigger_enable+0xb2>
   2f64c:	2003      	movs	r0, #3
   2f64e:	e002      	b.n	2f656 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   2f650:	4b0f      	ldr	r3, [pc, #60]	; (2f690 <nrfx_gpiote_trigger_enable+0xc4>)
   2f652:	e7f5      	b.n	2f640 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2f654:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   2f656:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   2f65a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f65c:	2c01      	cmp	r4, #1
   2f65e:	d010      	beq.n	2f682 <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
   2f660:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2f664:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2f668:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   2f66c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2f670:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   2f674:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   2f678:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2f67a:	2002      	movs	r0, #2
   2f67c:	e7eb      	b.n	2f656 <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2f67e:	2002      	movs	r0, #2
   2f680:	e7e9      	b.n	2f656 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   2f682:	4903      	ldr	r1, [pc, #12]	; (2f690 <nrfx_gpiote_trigger_enable+0xc4>)
   2f684:	e7ee      	b.n	2f664 <nrfx_gpiote_trigger_enable+0x98>
   2f686:	bf00      	nop
   2f688:	40006000 	.word	0x40006000
   2f68c:	2000087c 	.word	0x2000087c
   2f690:	50000300 	.word	0x50000300

0002f694 <nrfx_gpiote_trigger_disable>:
{
   2f694:	b510      	push	{r4, lr}
   2f696:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2f698:	f7ff fbc6 	bl	2ee28 <pin_in_use_by_te>
   2f69c:	b1a0      	cbz	r0, 2f6c8 <nrfx_gpiote_trigger_disable+0x34>
   2f69e:	4620      	mov	r0, r4
   2f6a0:	f00c fc45 	bl	3bf2e <pin_is_input>
   2f6a4:	b180      	cbz	r0, 2f6c8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   2f6a6:	4620      	mov	r0, r4
   2f6a8:	f7ff fbde 	bl	2ee68 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2f6ac:	2201      	movs	r2, #1
   2f6ae:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   2f6b0:	4b0e      	ldr	r3, [pc, #56]	; (2f6ec <nrfx_gpiote_trigger_disable+0x58>)
   2f6b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2f6b6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2f6ba:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   2f6be:	f022 0203 	bic.w	r2, r2, #3
   2f6c2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   2f6c6:	e00e      	b.n	2f6e6 <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   2f6c8:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   2f6cc:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f6ce:	2c01      	cmp	r4, #1
   2f6d0:	d00a      	beq.n	2f6e8 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   2f6d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2f6d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2f6da:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   2f6de:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   2f6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   2f6e6:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   2f6e8:	4901      	ldr	r1, [pc, #4]	; (2f6f0 <nrfx_gpiote_trigger_disable+0x5c>)
   2f6ea:	e7f4      	b.n	2f6d6 <nrfx_gpiote_trigger_disable+0x42>
   2f6ec:	40006000 	.word	0x40006000
   2f6f0:	50000300 	.word	0x50000300

0002f6f4 <nrfx_gpiote_pin_uninit>:
{
   2f6f4:	b510      	push	{r4, lr}
   2f6f6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   2f6f8:	f7ff fb8c 	bl	2ee14 <pin_in_use>
   2f6fc:	b908      	cbnz	r0, 2f702 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   2f6fe:	480c      	ldr	r0, [pc, #48]	; (2f730 <nrfx_gpiote_pin_uninit+0x3c>)
}
   2f700:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   2f702:	4620      	mov	r0, r4
   2f704:	f7ff ffc6 	bl	2f694 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2f708:	4620      	mov	r0, r4
   2f70a:	f7ff fcb1 	bl	2f070 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   2f70e:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   2f712:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f714:	2c01      	cmp	r4, #1
   2f716:	d008      	beq.n	2f72a <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   2f718:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2f71c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2f720:	2102      	movs	r1, #2
   2f722:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   2f726:	4803      	ldr	r0, [pc, #12]	; (2f734 <nrfx_gpiote_pin_uninit+0x40>)
   2f728:	e7ea      	b.n	2f700 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   2f72a:	4a03      	ldr	r2, [pc, #12]	; (2f738 <nrfx_gpiote_pin_uninit+0x44>)
   2f72c:	e7f6      	b.n	2f71c <nrfx_gpiote_pin_uninit+0x28>
   2f72e:	bf00      	nop
   2f730:	0bad0004 	.word	0x0bad0004
   2f734:	0bad0000 	.word	0x0bad0000
   2f738:	50000300 	.word	0x50000300

0002f73c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   2f73c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2f73e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   2f740:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2f744:	2100      	movs	r1, #0
    uint32_t status = 0;
   2f746:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2f748:	e003      	b.n	2f752 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   2f74a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   2f74c:	3304      	adds	r3, #4
   2f74e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2f750:	3101      	adds	r1, #1
   2f752:	2907      	cmp	r1, #7
   2f754:	d814      	bhi.n	2f780 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f756:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   2f75a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   2f75e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2f760:	2a00      	cmp	r2, #0
   2f762:	d0f2      	beq.n	2f74a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   2f764:	4a0b      	ldr	r2, [pc, #44]	; (2f794 <nrfx_gpiote_irq_handler+0x58>)
   2f766:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   2f76a:	4210      	tst	r0, r2
   2f76c:	d0ed      	beq.n	2f74a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   2f76e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   2f772:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2f776:	2400      	movs	r4, #0
   2f778:	6014      	str	r4, [r2, #0]
   2f77a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   2f77c:	4305      	orrs	r5, r0
   2f77e:	e7e4      	b.n	2f74a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f780:	4b05      	ldr	r3, [pc, #20]	; (2f798 <nrfx_gpiote_irq_handler+0x5c>)
   2f782:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2f784:	b91b      	cbnz	r3, 2f78e <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   2f786:	4628      	mov	r0, r5
   2f788:	f7ff fd28 	bl	2f1dc <gpiote_evt_handle>
}
   2f78c:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   2f78e:	f7ff fcc1 	bl	2f114 <port_event_handle>
   2f792:	e7f8      	b.n	2f786 <nrfx_gpiote_irq_handler+0x4a>
   2f794:	40006000 	.word	0x40006000
   2f798:	4000617c 	.word	0x4000617c

0002f79c <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   2f79c:	4b02      	ldr	r3, [pc, #8]	; (2f7a8 <nvmc_readonly_mode_set+0xc>)
   2f79e:	2200      	movs	r2, #0
   2f7a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   2f7a4:	4770      	bx	lr
   2f7a6:	bf00      	nop
   2f7a8:	4001e000 	.word	0x4001e000

0002f7ac <nvmc_write_mode_set>:
   2f7ac:	4b02      	ldr	r3, [pc, #8]	; (2f7b8 <nvmc_write_mode_set+0xc>)
   2f7ae:	2201      	movs	r2, #1
   2f7b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   2f7b4:	4770      	bx	lr
   2f7b6:	bf00      	nop
   2f7b8:	4001e000 	.word	0x4001e000

0002f7bc <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2f7bc:	4b04      	ldr	r3, [pc, #16]	; (2f7d0 <nvmc_word_write+0x14>)
   2f7be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2f7c2:	f013 0f01 	tst.w	r3, #1
   2f7c6:	d0f9      	beq.n	2f7bc <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   2f7c8:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   2f7ca:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   2f7ce:	4770      	bx	lr
   2f7d0:	4001e000 	.word	0x4001e000

0002f7d4 <nrfx_nvmc_page_partial_erase_init>:
    nvmc_readonly_mode_set();
}

#if defined(NRF_NVMC_PARTIAL_ERASE_PRESENT)
nrfx_err_t nrfx_nvmc_page_partial_erase_init(uint32_t addr, uint32_t duration_ms)
{
   2f7d4:	b538      	push	{r3, r4, r5, lr}
   2f7d6:	4605      	mov	r5, r0
   2f7d8:	460c      	mov	r4, r1
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   2f7da:	f00c fbc7 	bl	3bf6c <is_page_aligned_check>
   2f7de:	b148      	cbz	r0, 2f7f4 <nrfx_nvmc_page_partial_erase_init+0x20>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    m_partial_erase_time_elapsed = 0;
   2f7e0:	4b05      	ldr	r3, [pc, #20]	; (2f7f8 <nrfx_nvmc_page_partial_erase_init+0x24>)
   2f7e2:	2200      	movs	r2, #0
   2f7e4:	601a      	str	r2, [r3, #0]
    m_partial_erase_page_addr = addr;
   2f7e6:	4b05      	ldr	r3, [pc, #20]	; (2f7fc <nrfx_nvmc_page_partial_erase_init+0x28>)
   2f7e8:	601d      	str	r5, [r3, #0]

#if defined(NRF_NVMC_PARTIAL_ERASE_PRESENT)
NRF_STATIC_INLINE void nrf_nvmc_partial_erase_duration_set(NRF_NVMC_Type * p_reg,
                                                           uint32_t        duration_ms)
{
    p_reg->ERASEPAGEPARTIALCFG = duration_ms;
   2f7ea:	4b05      	ldr	r3, [pc, #20]	; (2f800 <nrfx_nvmc_page_partial_erase_init+0x2c>)
   2f7ec:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c
    nrf_nvmc_partial_erase_duration_set(NRF_NVMC, duration_ms);

    return NRFX_SUCCESS;
   2f7f0:	4804      	ldr	r0, [pc, #16]	; (2f804 <nrfx_nvmc_page_partial_erase_init+0x30>)
}
   2f7f2:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_ADDR;
   2f7f4:	4804      	ldr	r0, [pc, #16]	; (2f808 <nrfx_nvmc_page_partial_erase_init+0x34>)
   2f7f6:	e7fc      	b.n	2f7f2 <nrfx_nvmc_page_partial_erase_init+0x1e>
   2f7f8:	2000d040 	.word	0x2000d040
   2f7fc:	200008f8 	.word	0x200008f8
   2f800:	4001e000 	.word	0x4001e000
   2f804:	0bad0000 	.word	0x0bad0000
   2f808:	0bad000a 	.word	0x0bad000a

0002f80c <nrfx_nvmc_page_partial_erase_continue>:

bool nrfx_nvmc_page_partial_erase_continue(void)
{
   2f80c:	b510      	push	{r4, lr}
}

NRF_STATIC_INLINE uint32_t nrf_nvmc_partial_erase_duration_get(NRF_NVMC_Type const * p_reg)
{
    return p_reg->ERASEPAGEPARTIALCFG;
   2f80e:	4b10      	ldr	r3, [pc, #64]	; (2f850 <nrfx_nvmc_page_partial_erase_continue+0x44>)
   2f810:	f8d3 451c 	ldr.w	r4, [r3, #1308]	; 0x51c
    p_reg->CONFIG = (uint32_t)mode;
   2f814:	2202      	movs	r2, #2
   2f816:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_PARTIAL_ERASE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif

    nrf_nvmc_page_partial_erase_start(NRF_NVMC, m_partial_erase_page_addr);
   2f81a:	4a0e      	ldr	r2, [pc, #56]	; (2f854 <nrfx_nvmc_page_partial_erase_continue+0x48>)
   2f81c:	6812      	ldr	r2, [r2, #0]

NRF_STATIC_INLINE void nrf_nvmc_page_partial_erase_start(NRF_NVMC_Type * p_reg,
                                                         uint32_t        page_addr)
{
#if defined(NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Msk)
    p_reg->ERASEPAGEPARTIAL = page_addr;
   2f81e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2f822:	4b0b      	ldr	r3, [pc, #44]	; (2f850 <nrfx_nvmc_page_partial_erase_continue+0x44>)
   2f824:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2f828:	f013 0f01 	tst.w	r3, #1
   2f82c:	d0f9      	beq.n	2f822 <nrfx_nvmc_page_partial_erase_continue+0x16>
    {}
    nvmc_readonly_mode_set();
   2f82e:	f7ff ffb5 	bl	2f79c <nvmc_readonly_mode_set>

    m_partial_erase_time_elapsed += duration_ms;
   2f832:	4a09      	ldr	r2, [pc, #36]	; (2f858 <nrfx_nvmc_page_partial_erase_continue+0x4c>)
   2f834:	6813      	ldr	r3, [r2, #0]
   2f836:	4423      	add	r3, r4
   2f838:	6013      	str	r3, [r2, #0]
    if (m_partial_erase_time_elapsed < NVMC_PAGE_ERASE_DURATION_MS)
   2f83a:	2b54      	cmp	r3, #84	; 0x54
   2f83c:	d905      	bls.n	2f84a <nrfx_nvmc_page_partial_erase_continue+0x3e>
    {
        return false;
    }
    else
    {
        m_partial_erase_page_addr = NVMC_PARTIAL_ERASE_INVALID_ADDR;
   2f83e:	4b05      	ldr	r3, [pc, #20]	; (2f854 <nrfx_nvmc_page_partial_erase_continue+0x48>)
   2f840:	f04f 32ff 	mov.w	r2, #4294967295
   2f844:	601a      	str	r2, [r3, #0]
        return true;
   2f846:	2001      	movs	r0, #1
   2f848:	e000      	b.n	2f84c <nrfx_nvmc_page_partial_erase_continue+0x40>
        return false;
   2f84a:	2000      	movs	r0, #0
    }
}
   2f84c:	bd10      	pop	{r4, pc}
   2f84e:	bf00      	nop
   2f850:	4001e000 	.word	0x4001e000
   2f854:	200008f8 	.word	0x200008f8
   2f858:	2000d040 	.word	0x2000d040

0002f85c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   2f85c:	b508      	push	{r3, lr}
   2f85e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   2f860:	4801      	ldr	r0, [pc, #4]	; (2f868 <nrfx_ppi_channel_alloc+0xc>)
   2f862:	f7ff fa8f 	bl	2ed84 <nrfx_flag32_alloc>
}
   2f866:	bd08      	pop	{r3, pc}
   2f868:	200008fc 	.word	0x200008fc

0002f86c <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   2f86c:	b538      	push	{r3, r4, r5, lr}
   2f86e:	4604      	mov	r4, r0
   2f870:	4615      	mov	r5, r2
    NRFX_ASSERT(p_config);
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2f872:	7903      	ldrb	r3, [r0, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   2f874:	4a14      	ldr	r2, [pc, #80]	; (2f8c8 <nrfx_wdt_init+0x5c>)
   2f876:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   2f87a:	6045      	str	r5, [r0, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   2f87c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   2f880:	b9f2      	cbnz	r2, 2f8c0 <nrfx_wdt_init+0x54>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2f882:	4a11      	ldr	r2, [pc, #68]	; (2f8c8 <nrfx_wdt_init+0x5c>)
   2f884:	2001      	movs	r0, #1
   2f886:	f802 0033 	strb.w	r0, [r2, r3, lsl #3]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   2f88a:	6823      	ldr	r3, [r4, #0]
   2f88c:	780a      	ldrb	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_wdt_behaviour_set(NRF_WDT_Type * p_reg, nrf_wdt_behaviour_t behaviour)
{
    p_reg->CONFIG = behaviour;
   2f88e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   2f892:	6849      	ldr	r1, [r1, #4]
   2f894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f898:	2300      	movs	r3, #0
   2f89a:	03c8      	lsls	r0, r1, #15
   2f89c:	0c49      	lsrs	r1, r1, #17
   2f89e:	f7dd f985 	bl	cbac <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   2f8a2:	6823      	ldr	r3, [r4, #0]
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   2f8a4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   2f8a8:	b165      	cbz	r5, 2f8c4 <nrfx_wdt_init+0x58>
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
   2f8aa:	6823      	ldr	r3, [r4, #0]
    p_reg->INTENSET = mask;
   2f8ac:	2201      	movs	r2, #1
   2f8ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2f8b2:	6820      	ldr	r0, [r4, #0]
   2f8b4:	f340 3007 	sbfx	r0, r0, #12, #8
   2f8b8:	f7f2 fbf0 	bl	2209c <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2f8bc:	4803      	ldr	r0, [pc, #12]	; (2f8cc <nrfx_wdt_init+0x60>)
}
   2f8be:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2f8c0:	4803      	ldr	r0, [pc, #12]	; (2f8d0 <nrfx_wdt_init+0x64>)
   2f8c2:	e7fc      	b.n	2f8be <nrfx_wdt_init+0x52>
    return err_code;
   2f8c4:	4801      	ldr	r0, [pc, #4]	; (2f8cc <nrfx_wdt_init+0x60>)
   2f8c6:	e7fa      	b.n	2f8be <nrfx_wdt_init+0x52>
   2f8c8:	2000d044 	.word	0x2000d044
   2f8cc:	0bad0000 	.word	0x0bad0000
   2f8d0:	0bad0005 	.word	0x0bad0005

0002f8d4 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2f8d4:	7902      	ldrb	r2, [r0, #4]
    NRFX_ASSERT(p_cb->alloc_index != 0);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   2f8d6:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   2f8d8:	2101      	movs	r1, #1
   2f8da:	6019      	str	r1, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2f8dc:	4b02      	ldr	r3, [pc, #8]	; (2f8e8 <nrfx_wdt_enable+0x14>)
   2f8de:	2102      	movs	r1, #2
   2f8e0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   2f8e4:	4770      	bx	lr
   2f8e6:	bf00      	nop
   2f8e8:	2000d044 	.word	0x2000d044

0002f8ec <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   2f8ec:	b430      	push	{r4, r5}
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2f8ee:	7902      	ldrb	r2, [r0, #4]
	__asm__ volatile(
   2f8f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f8f4:	f3ef 8411 	mrs	r4, BASEPRI
   2f8f8:	f383 8812 	msr	BASEPRI_MAX, r3
   2f8fc:	f3bf 8f6f 	isb	sy

    NRFX_ASSERT(p_channel_id);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   2f900:	4b0e      	ldr	r3, [pc, #56]	; (2f93c <nrfx_wdt_channel_alloc+0x50>)
   2f902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2f906:	785b      	ldrb	r3, [r3, #1]
   2f908:	2b07      	cmp	r3, #7
   2f90a:	d815      	bhi.n	2f938 <nrfx_wdt_channel_alloc+0x4c>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   2f90c:	700b      	strb	r3, [r1, #0]
        p_cb->alloc_index++;
   2f90e:	4d0b      	ldr	r5, [pc, #44]	; (2f93c <nrfx_wdt_channel_alloc+0x50>)
   2f910:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   2f914:	3301      	adds	r3, #1
   2f916:	7053      	strb	r3, [r2, #1]
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   2f918:	6802      	ldr	r2, [r0, #0]
   2f91a:	7808      	ldrb	r0, [r1, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   2f91c:	f8d2 1508 	ldr.w	r1, [r2, #1288]	; 0x508
   2f920:	2301      	movs	r3, #1
   2f922:	4083      	lsls	r3, r0
   2f924:	430b      	orrs	r3, r1
   2f926:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
        result = NRFX_SUCCESS;
   2f92a:	4805      	ldr	r0, [pc, #20]	; (2f940 <nrfx_wdt_channel_alloc+0x54>)
	__asm__ volatile(
   2f92c:	f384 8811 	msr	BASEPRI, r4
   2f930:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   2f934:	bc30      	pop	{r4, r5}
   2f936:	4770      	bx	lr
        result = NRFX_ERROR_NO_MEM;
   2f938:	4802      	ldr	r0, [pc, #8]	; (2f944 <nrfx_wdt_channel_alloc+0x58>)
   2f93a:	e7f7      	b.n	2f92c <nrfx_wdt_channel_alloc+0x40>
   2f93c:	2000d044 	.word	0x2000d044
   2f940:	0bad0000 	.word	0x0bad0000
   2f944:	0bad0002 	.word	0x0bad0002

0002f948 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   2f948:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   2f94a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
   2f94e:	4a02      	ldr	r2, [pc, #8]	; (2f958 <nrfx_wdt_channel_feed+0x10>)
   2f950:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   2f954:	4770      	bx	lr
   2f956:	bf00      	nop
   2f958:	6e524635 	.word	0x6e524635

0002f95c <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   2f95c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2f95e:	4b05      	ldr	r3, [pc, #20]	; (2f974 <nrfx_wdt_0_irq_handler+0x18>)
   2f960:	681b      	ldr	r3, [r3, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   2f962:	b133      	cbz	r3, 2f972 <nrfx_wdt_0_irq_handler+0x16>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   2f964:	4b04      	ldr	r3, [pc, #16]	; (2f978 <nrfx_wdt_0_irq_handler+0x1c>)
   2f966:	685b      	ldr	r3, [r3, #4]
   2f968:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f96a:	4b02      	ldr	r3, [pc, #8]	; (2f974 <nrfx_wdt_0_irq_handler+0x18>)
   2f96c:	2200      	movs	r2, #0
   2f96e:	601a      	str	r2, [r3, #0]
   2f970:	681b      	ldr	r3, [r3, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   2f972:	bd08      	pop	{r3, pc}
   2f974:	40010100 	.word	0x40010100
   2f978:	2000d044 	.word	0x2000d044

0002f97c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   2f97c:	4b03      	ldr	r3, [pc, #12]	; (2f98c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   2f97e:	4a04      	ldr	r2, [pc, #16]	; (2f990 <z_device_state_init+0x14>)
   2f980:	4293      	cmp	r3, r2
   2f982:	d201      	bcs.n	2f988 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   2f984:	3318      	adds	r3, #24
   2f986:	e7fa      	b.n	2f97e <z_device_state_init+0x2>
	}
}
   2f988:	4770      	bx	lr
   2f98a:	bf00      	nop
   2f98c:	0003cef8 	.word	0x0003cef8
   2f990:	0003cfd0 	.word	0x0003cfd0

0002f994 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   2f994:	b570      	push	{r4, r5, r6, lr}
   2f996:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2f998:	4b11      	ldr	r3, [pc, #68]	; (2f9e0 <z_sys_init_run_level+0x4c>)
   2f99a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2f99e:	e009      	b.n	2f9b4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   2f9a0:	4240      	negs	r0, r0
   2f9a2:	e017      	b.n	2f9d4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   2f9a4:	68eb      	ldr	r3, [r5, #12]
   2f9a6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   2f9a8:	68ea      	ldr	r2, [r5, #12]
   2f9aa:	7853      	ldrb	r3, [r2, #1]
   2f9ac:	f043 0301 	orr.w	r3, r3, #1
   2f9b0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2f9b2:	3408      	adds	r4, #8
   2f9b4:	1c73      	adds	r3, r6, #1
   2f9b6:	4a0a      	ldr	r2, [pc, #40]	; (2f9e0 <z_sys_init_run_level+0x4c>)
   2f9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2f9bc:	42a3      	cmp	r3, r4
   2f9be:	d90d      	bls.n	2f9dc <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   2f9c0:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   2f9c2:	6823      	ldr	r3, [r4, #0]
   2f9c4:	4628      	mov	r0, r5
   2f9c6:	4798      	blx	r3
		if (dev != NULL) {
   2f9c8:	2d00      	cmp	r5, #0
   2f9ca:	d0f2      	beq.n	2f9b2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   2f9cc:	2800      	cmp	r0, #0
   2f9ce:	d0eb      	beq.n	2f9a8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   2f9d0:	2800      	cmp	r0, #0
   2f9d2:	dbe5      	blt.n	2f9a0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   2f9d4:	28ff      	cmp	r0, #255	; 0xff
   2f9d6:	dde5      	ble.n	2f9a4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   2f9d8:	20ff      	movs	r0, #255	; 0xff
   2f9da:	e7e3      	b.n	2f9a4 <z_sys_init_run_level+0x10>
		}
	}
}
   2f9dc:	bd70      	pop	{r4, r5, r6, pc}
   2f9de:	bf00      	nop
   2f9e0:	00040964 	.word	0x00040964

0002f9e4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   2f9e4:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   2f9e6:	4605      	mov	r5, r0
   2f9e8:	b328      	cbz	r0, 2fa36 <z_impl_device_get_binding+0x52>
   2f9ea:	7803      	ldrb	r3, [r0, #0]
   2f9ec:	b32b      	cbz	r3, 2fa3a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   2f9ee:	4c14      	ldr	r4, [pc, #80]	; (2fa40 <z_impl_device_get_binding+0x5c>)
   2f9f0:	e000      	b.n	2f9f4 <z_impl_device_get_binding+0x10>
   2f9f2:	3418      	adds	r4, #24
   2f9f4:	4b13      	ldr	r3, [pc, #76]	; (2fa44 <z_impl_device_get_binding+0x60>)
   2f9f6:	429c      	cmp	r4, r3
   2f9f8:	d008      	beq.n	2fa0c <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   2f9fa:	4620      	mov	r0, r4
   2f9fc:	f00c fada 	bl	3bfb4 <z_device_ready>
   2fa00:	2800      	cmp	r0, #0
   2fa02:	d0f6      	beq.n	2f9f2 <z_impl_device_get_binding+0xe>
   2fa04:	6823      	ldr	r3, [r4, #0]
   2fa06:	42ab      	cmp	r3, r5
   2fa08:	d1f3      	bne.n	2f9f2 <z_impl_device_get_binding+0xe>
   2fa0a:	e012      	b.n	2fa32 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   2fa0c:	4c0c      	ldr	r4, [pc, #48]	; (2fa40 <z_impl_device_get_binding+0x5c>)
   2fa0e:	e000      	b.n	2fa12 <z_impl_device_get_binding+0x2e>
   2fa10:	3418      	adds	r4, #24
   2fa12:	4b0c      	ldr	r3, [pc, #48]	; (2fa44 <z_impl_device_get_binding+0x60>)
   2fa14:	429c      	cmp	r4, r3
   2fa16:	d00b      	beq.n	2fa30 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2fa18:	4620      	mov	r0, r4
   2fa1a:	f00c facb 	bl	3bfb4 <z_device_ready>
   2fa1e:	2800      	cmp	r0, #0
   2fa20:	d0f6      	beq.n	2fa10 <z_impl_device_get_binding+0x2c>
   2fa22:	6821      	ldr	r1, [r4, #0]
   2fa24:	4628      	mov	r0, r5
   2fa26:	f007 f966 	bl	36cf6 <strcmp>
   2fa2a:	2800      	cmp	r0, #0
   2fa2c:	d1f0      	bne.n	2fa10 <z_impl_device_get_binding+0x2c>
   2fa2e:	e000      	b.n	2fa32 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   2fa30:	2400      	movs	r4, #0
}
   2fa32:	4620      	mov	r0, r4
   2fa34:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   2fa36:	4604      	mov	r4, r0
   2fa38:	e7fb      	b.n	2fa32 <z_impl_device_get_binding+0x4e>
   2fa3a:	2400      	movs	r4, #0
   2fa3c:	e7f9      	b.n	2fa32 <z_impl_device_get_binding+0x4e>
   2fa3e:	bf00      	nop
   2fa40:	0003cef8 	.word	0x0003cef8
   2fa44:	0003cfd0 	.word	0x0003cfd0

0002fa48 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   2fa48:	2804      	cmp	r0, #4
   2fa4a:	d80c      	bhi.n	2fa66 <reason_to_str+0x1e>
   2fa4c:	e8df f000 	tbb	[pc, r0]
   2fa50:	07050d03 	.word	0x07050d03
   2fa54:	09          	.byte	0x09
   2fa55:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   2fa56:	4806      	ldr	r0, [pc, #24]	; (2fa70 <reason_to_str+0x28>)
   2fa58:	4770      	bx	lr
		return "Stack overflow";
   2fa5a:	4806      	ldr	r0, [pc, #24]	; (2fa74 <reason_to_str+0x2c>)
   2fa5c:	4770      	bx	lr
		return "Kernel oops";
   2fa5e:	4806      	ldr	r0, [pc, #24]	; (2fa78 <reason_to_str+0x30>)
   2fa60:	4770      	bx	lr
		return "Kernel panic";
   2fa62:	4806      	ldr	r0, [pc, #24]	; (2fa7c <reason_to_str+0x34>)
   2fa64:	4770      	bx	lr
	default:
		return "Unknown error";
   2fa66:	4806      	ldr	r0, [pc, #24]	; (2fa80 <reason_to_str+0x38>)
   2fa68:	4770      	bx	lr
		return "Unhandled interrupt";
   2fa6a:	4806      	ldr	r0, [pc, #24]	; (2fa84 <reason_to_str+0x3c>)
	}
}
   2fa6c:	4770      	bx	lr
   2fa6e:	bf00      	nop
   2fa70:	000409cc 	.word	0x000409cc
   2fa74:	000409a0 	.word	0x000409a0
   2fa78:	000409b0 	.word	0x000409b0
   2fa7c:	000409bc 	.word	0x000409bc
   2fa80:	0004097c 	.word	0x0004097c
   2fa84:	0004098c 	.word	0x0004098c

0002fa88 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2fa88:	b130      	cbz	r0, 2fa98 <thread_name_get+0x10>
{
   2fa8a:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2fa8c:	f00c fb78 	bl	3c180 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2fa90:	b120      	cbz	r0, 2fa9c <thread_name_get+0x14>
   2fa92:	7803      	ldrb	r3, [r0, #0]
   2fa94:	b123      	cbz	r3, 2faa0 <thread_name_get+0x18>
}
   2fa96:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   2fa98:	4802      	ldr	r0, [pc, #8]	; (2faa4 <thread_name_get+0x1c>)
}
   2fa9a:	4770      	bx	lr
		thread_name = "unknown";
   2fa9c:	4801      	ldr	r0, [pc, #4]	; (2faa4 <thread_name_get+0x1c>)
   2fa9e:	e7fa      	b.n	2fa96 <thread_name_get+0xe>
   2faa0:	4800      	ldr	r0, [pc, #0]	; (2faa4 <thread_name_get+0x1c>)
	return thread_name;
   2faa2:	e7f8      	b.n	2fa96 <thread_name_get+0xe>
   2faa4:	0003ebc0 	.word	0x0003ebc0

0002faa8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2faa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2faac:	b082      	sub	sp, #8
   2faae:	4605      	mov	r5, r0
   2fab0:	460e      	mov	r6, r1
	__asm__ volatile(
   2fab2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fab6:	f3ef 8711 	mrs	r7, BASEPRI
   2faba:	f383 8812 	msr	BASEPRI_MAX, r3
   2fabe:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2fac2:	f001 f9d3 	bl	30e6c <z_impl_z_current_get>
   2fac6:	4604      	mov	r4, r0
   2fac8:	4b29      	ldr	r3, [pc, #164]	; (2fb70 <z_fatal_error+0xc8>)
   2faca:	4a2a      	ldr	r2, [pc, #168]	; (2fb74 <z_fatal_error+0xcc>)
   2facc:	1a9b      	subs	r3, r3, r2
   2face:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2fad0:	f04f 0800 	mov.w	r8, #0
   2fad4:	2201      	movs	r2, #1
   2fad6:	f362 0802 	bfi	r8, r2, #0, #3
   2fada:	f36f 08c5 	bfc	r8, #3, #3
   2fade:	f363 188f 	bfi	r8, r3, #6, #10
   2fae2:	4628      	mov	r0, r5
   2fae4:	f7ff ffb0 	bl	2fa48 <reason_to_str>
   2fae8:	4602      	mov	r2, r0
   2faea:	f8ad 8000 	strh.w	r8, [sp]
   2faee:	2300      	movs	r3, #0
   2faf0:	4629      	mov	r1, r5
   2faf2:	4821      	ldr	r0, [pc, #132]	; (2fb78 <z_fatal_error+0xd0>)
   2faf4:	f7f0 fb9a 	bl	2022c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2faf8:	b11e      	cbz	r6, 2fb02 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2fafa:	69f3      	ldr	r3, [r6, #28]
   2fafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2fb00:	bb2b      	cbnz	r3, 2fb4e <z_fatal_error+0xa6>
   2fb02:	4b1b      	ldr	r3, [pc, #108]	; (2fb70 <z_fatal_error+0xc8>)
   2fb04:	4a1b      	ldr	r2, [pc, #108]	; (2fb74 <z_fatal_error+0xcc>)
   2fb06:	1a9b      	subs	r3, r3, r2
   2fb08:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2fb0a:	f04f 0800 	mov.w	r8, #0
   2fb0e:	2201      	movs	r2, #1
   2fb10:	f362 0802 	bfi	r8, r2, #0, #3
   2fb14:	f36f 08c5 	bfc	r8, #3, #3
   2fb18:	f363 188f 	bfi	r8, r3, #6, #10
   2fb1c:	4620      	mov	r0, r4
   2fb1e:	f7ff ffb3 	bl	2fa88 <thread_name_get>
   2fb22:	f7f0 fa49 	bl	1ffb8 <z_log_strdup>
   2fb26:	4602      	mov	r2, r0
   2fb28:	4643      	mov	r3, r8
   2fb2a:	4621      	mov	r1, r4
   2fb2c:	4813      	ldr	r0, [pc, #76]	; (2fb7c <z_fatal_error+0xd4>)
   2fb2e:	f7f0 fbf1 	bl	20314 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2fb32:	4631      	mov	r1, r6
   2fb34:	4628      	mov	r0, r5
   2fb36:	f7fe fbe9 	bl	2e30c <k_sys_fatal_error_handler>
	__asm__ volatile(
   2fb3a:	f387 8811 	msr	BASEPRI, r7
   2fb3e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2fb42:	4620      	mov	r0, r4
   2fb44:	f7f3 f856 	bl	22bf4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2fb48:	b002      	add	sp, #8
   2fb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fb4e:	4b08      	ldr	r3, [pc, #32]	; (2fb70 <z_fatal_error+0xc8>)
   2fb50:	4a08      	ldr	r2, [pc, #32]	; (2fb74 <z_fatal_error+0xcc>)
   2fb52:	1a9b      	subs	r3, r3, r2
   2fb54:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   2fb56:	f04f 0100 	mov.w	r1, #0
   2fb5a:	2201      	movs	r2, #1
   2fb5c:	f362 0102 	bfi	r1, r2, #0, #3
   2fb60:	f36f 01c5 	bfc	r1, #3, #3
   2fb64:	f363 118f 	bfi	r1, r3, #6, #10
   2fb68:	4805      	ldr	r0, [pc, #20]	; (2fb80 <z_fatal_error+0xd8>)
   2fb6a:	f7f0 fc53 	bl	20414 <log_0>
   2fb6e:	e7c8      	b.n	2fb02 <z_fatal_error+0x5a>
   2fb70:	0003d28c 	.word	0x0003d28c
   2fb74:	0003d1a4 	.word	0x0003d1a4
   2fb78:	000409dc 	.word	0x000409dc
   2fb7c:	00040a28 	.word	0x00040a28
   2fb80:	00040a04 	.word	0x00040a04

0002fb84 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   2fb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2fb88:	b089      	sub	sp, #36	; 0x24
   2fb8a:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   2fb8c:	4e17      	ldr	r6, [pc, #92]	; (2fbec <init_idle_thread+0x68>)
   2fb8e:	0047      	lsls	r7, r0, #1
   2fb90:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   2fb94:	eb06 1585 	add.w	r5, r6, r5, lsl #6
	k_thread_stack_t *stack = z_idle_stacks[i];
   2fb98:	4b15      	ldr	r3, [pc, #84]	; (2fbf0 <init_idle_thread+0x6c>)
   2fb9a:	f44f 78b0 	mov.w	r8, #352	; 0x160
   2fb9e:	fb08 3800 	mla	r8, r8, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   2fba2:	f10d 0918 	add.w	r9, sp, #24
   2fba6:	4603      	mov	r3, r0
   2fba8:	4a12      	ldr	r2, [pc, #72]	; (2fbf4 <init_idle_thread+0x70>)
   2fbaa:	2108      	movs	r1, #8
   2fbac:	4648      	mov	r0, r9
   2fbae:	f004 fc6c 	bl	3448a <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2fbb2:	193a      	adds	r2, r7, r4
   2fbb4:	4b10      	ldr	r3, [pc, #64]	; (2fbf8 <init_idle_thread+0x74>)
   2fbb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
   2fbba:	f8cd 9014 	str.w	r9, [sp, #20]
   2fbbe:	2201      	movs	r2, #1
   2fbc0:	9204      	str	r2, [sp, #16]
   2fbc2:	220f      	movs	r2, #15
   2fbc4:	9203      	str	r2, [sp, #12]
   2fbc6:	2200      	movs	r2, #0
   2fbc8:	9202      	str	r2, [sp, #8]
   2fbca:	9201      	str	r2, [sp, #4]
   2fbcc:	9300      	str	r3, [sp, #0]
   2fbce:	4b0b      	ldr	r3, [pc, #44]	; (2fbfc <init_idle_thread+0x78>)
   2fbd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2fbd4:	4641      	mov	r1, r8
   2fbd6:	4628      	mov	r0, r5
   2fbd8:	f000 f974 	bl	2fec4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2fbdc:	7b6b      	ldrb	r3, [r5, #13]
   2fbde:	f023 0304 	bic.w	r3, r3, #4
   2fbe2:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   2fbe4:	b009      	add	sp, #36	; 0x24
   2fbe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2fbea:	bf00      	nop
   2fbec:	20006c58 	.word	0x20006c58
   2fbf0:	20011820 	.word	0x20011820
   2fbf4:	00040a40 	.word	0x00040a40
   2fbf8:	2000d04c 	.word	0x2000d04c
   2fbfc:	00030029 	.word	0x00030029

0002fc00 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   2fc00:	b570      	push	{r4, r5, r6, lr}
   2fc02:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   2fc04:	f001 f866 	bl	30cd4 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   2fc08:	4d1b      	ldr	r5, [pc, #108]	; (2fc78 <prepare_multithreading+0x78>)
   2fc0a:	4b1c      	ldr	r3, [pc, #112]	; (2fc7c <prepare_multithreading+0x7c>)
   2fc0c:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2fc0e:	4b1c      	ldr	r3, [pc, #112]	; (2fc80 <prepare_multithreading+0x80>)
   2fc10:	9305      	str	r3, [sp, #20]
   2fc12:	2301      	movs	r3, #1
   2fc14:	9304      	str	r3, [sp, #16]
   2fc16:	2400      	movs	r4, #0
   2fc18:	9403      	str	r4, [sp, #12]
   2fc1a:	9402      	str	r4, [sp, #8]
   2fc1c:	9401      	str	r4, [sp, #4]
   2fc1e:	9400      	str	r4, [sp, #0]
   2fc20:	4b18      	ldr	r3, [pc, #96]	; (2fc84 <prepare_multithreading+0x84>)
   2fc22:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2fc26:	4918      	ldr	r1, [pc, #96]	; (2fc88 <prepare_multithreading+0x88>)
   2fc28:	4628      	mov	r0, r5
   2fc2a:	f000 f94b 	bl	2fec4 <z_setup_new_thread>
   2fc2e:	4606      	mov	r6, r0
   2fc30:	7b6b      	ldrb	r3, [r5, #13]
   2fc32:	f023 0304 	bic.w	r3, r3, #4
   2fc36:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   2fc38:	4628      	mov	r0, r5
   2fc3a:	f00c fd82 	bl	3c742 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   2fc3e:	2c00      	cmp	r4, #0
   2fc40:	dd02      	ble.n	2fc48 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   2fc42:	4630      	mov	r0, r6
   2fc44:	b006      	add	sp, #24
   2fc46:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   2fc48:	4620      	mov	r0, r4
   2fc4a:	f7ff ff9b 	bl	2fb84 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2fc4e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2fc52:	4a0e      	ldr	r2, [pc, #56]	; (2fc8c <prepare_multithreading+0x8c>)
   2fc54:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   2fc58:	4619      	mov	r1, r3
   2fc5a:	4b08      	ldr	r3, [pc, #32]	; (2fc7c <prepare_multithreading+0x7c>)
   2fc5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   2fc60:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   2fc62:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   2fc64:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   2fc68:	4a09      	ldr	r2, [pc, #36]	; (2fc90 <prepare_multithreading+0x90>)
   2fc6a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   2fc6e:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   2fc72:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   2fc74:	3401      	adds	r4, #1
   2fc76:	e7e2      	b.n	2fc3e <prepare_multithreading+0x3e>
   2fc78:	20006d18 	.word	0x20006d18
   2fc7c:	2000d04c 	.word	0x2000d04c
   2fc80:	00040a4c 	.word	0x00040a4c
   2fc84:	0002fc95 	.word	0x0002fc95
   2fc88:	20011000 	.word	0x20011000
   2fc8c:	20006c58 	.word	0x20006c58
   2fc90:	20011980 	.word	0x20011980

0002fc94 <bg_thread_main>:
{
   2fc94:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2fc96:	4b0a      	ldr	r3, [pc, #40]	; (2fcc0 <bg_thread_main+0x2c>)
   2fc98:	2201      	movs	r2, #1
   2fc9a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2fc9c:	2002      	movs	r0, #2
   2fc9e:	f7ff fe79 	bl	2f994 <z_sys_init_run_level>
	boot_banner();
   2fca2:	f001 fe5b 	bl	3195c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2fca6:	2003      	movs	r0, #3
   2fca8:	f7ff fe74 	bl	2f994 <z_sys_init_run_level>
	z_init_static_threads();
   2fcac:	f000 f96e 	bl	2ff8c <z_init_static_threads>
	main();
   2fcb0:	f004 fad8 	bl	34264 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2fcb4:	4a03      	ldr	r2, [pc, #12]	; (2fcc4 <bg_thread_main+0x30>)
   2fcb6:	7b13      	ldrb	r3, [r2, #12]
   2fcb8:	f023 0301 	bic.w	r3, r3, #1
   2fcbc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2fcbe:	bd08      	pop	{r3, pc}
   2fcc0:	2000da77 	.word	0x2000da77
   2fcc4:	20006d18 	.word	0x20006d18

0002fcc8 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   2fcc8:	b508      	push	{r3, lr}
   2fcca:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2fccc:	4a01      	ldr	r2, [pc, #4]	; (2fcd4 <switch_to_main_thread+0xc>)
   2fcce:	4802      	ldr	r0, [pc, #8]	; (2fcd8 <switch_to_main_thread+0x10>)
   2fcd0:	f7f2 fb0a 	bl	222e8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2fcd4:	0002fc95 	.word	0x0002fc95
   2fcd8:	20006d18 	.word	0x20006d18

0002fcdc <z_bss_zero>:
{
   2fcdc:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2fcde:	4803      	ldr	r0, [pc, #12]	; (2fcec <z_bss_zero+0x10>)
   2fce0:	4a03      	ldr	r2, [pc, #12]	; (2fcf0 <z_bss_zero+0x14>)
   2fce2:	1a12      	subs	r2, r2, r0
   2fce4:	2100      	movs	r1, #0
   2fce6:	f007 f861 	bl	36dac <memset>
}
   2fcea:	bd08      	pop	{r3, pc}
   2fcec:	20000cb8 	.word	0x20000cb8
   2fcf0:	2000dc34 	.word	0x2000dc34

0002fcf4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2fcf4:	b500      	push	{lr}
   2fcf6:	b0b1      	sub	sp, #196	; 0xc4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2fcf8:	f7f0 f8bc 	bl	1fe74 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2fcfc:	4b1d      	ldr	r3, [pc, #116]	; (2fd74 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2fcfe:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2fd02:	4c1d      	ldr	r4, [pc, #116]	; (2fd78 <z_cstart+0x84>)
   2fd04:	6963      	ldr	r3, [r4, #20]
   2fd06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2fd0a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2fd0c:	23e0      	movs	r3, #224	; 0xe0
   2fd0e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   2fd12:	2320      	movs	r3, #32
   2fd14:	77e3      	strb	r3, [r4, #31]
   2fd16:	2500      	movs	r5, #0
   2fd18:	7625      	strb	r5, [r4, #24]
   2fd1a:	7665      	strb	r5, [r4, #25]
   2fd1c:	76a5      	strb	r5, [r4, #26]
   2fd1e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2fd22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2fd24:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2fd28:	6263      	str	r3, [r4, #36]	; 0x24
   2fd2a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2fd2e:	f7f2 fed1 	bl	22ad4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2fd32:	f7f2 f947 	bl	21fc4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2fd36:	f04f 33ff 	mov.w	r3, #4294967295
   2fd3a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2fd3c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2fd3e:	f7f3 f835 	bl	22dac <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2fd42:	f7f2 ff6d 	bl	22c20 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   2fd46:	2401      	movs	r4, #1
   2fd48:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   2fd4c:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   2fd50:	952a      	str	r5, [sp, #168]	; 0xa8
	dummy_thread->stack_info.size = 0U;
   2fd52:	952b      	str	r5, [sp, #172]	; 0xac
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   2fd54:	4b09      	ldr	r3, [pc, #36]	; (2fd7c <z_cstart+0x88>)
   2fd56:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2fd5a:	f7ff fe0f 	bl	2f97c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2fd5e:	4628      	mov	r0, r5
   2fd60:	f7ff fe18 	bl	2f994 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2fd64:	4620      	mov	r0, r4
   2fd66:	f7ff fe15 	bl	2f994 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   2fd6a:	f7ff ff49 	bl	2fc00 <prepare_multithreading>
   2fd6e:	f7ff ffab 	bl	2fcc8 <switch_to_main_thread>
   2fd72:	bf00      	nop
   2fd74:	200121a0 	.word	0x200121a0
   2fd78:	e000ed00 	.word	0xe000ed00
   2fd7c:	2000d04c 	.word	0x2000d04c

0002fd80 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   2fd80:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2fd82:	4c06      	ldr	r4, [pc, #24]	; (2fd9c <statics_init+0x1c>)
   2fd84:	4b06      	ldr	r3, [pc, #24]	; (2fda0 <statics_init+0x20>)
   2fd86:	429c      	cmp	r4, r3
   2fd88:	d206      	bcs.n	2fd98 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2fd8a:	68a2      	ldr	r2, [r4, #8]
   2fd8c:	6861      	ldr	r1, [r4, #4]
   2fd8e:	4620      	mov	r0, r4
   2fd90:	f00c f91d 	bl	3bfce <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2fd94:	3414      	adds	r4, #20
   2fd96:	e7f5      	b.n	2fd84 <statics_init+0x4>
		}
	}
	return 0;
}
   2fd98:	2000      	movs	r0, #0
   2fd9a:	bd10      	pop	{r4, pc}
   2fd9c:	20000abc 	.word	0x20000abc
   2fda0:	20000abc 	.word	0x20000abc

0002fda4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   2fda4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2fda6:	4c06      	ldr	r4, [pc, #24]	; (2fdc0 <init_mem_slab_module+0x1c>)
	int rc = 0;
   2fda8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2fdaa:	4b06      	ldr	r3, [pc, #24]	; (2fdc4 <init_mem_slab_module+0x20>)
   2fdac:	429c      	cmp	r4, r3
   2fdae:	d206      	bcs.n	2fdbe <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   2fdb0:	4620      	mov	r0, r4
   2fdb2:	f00c f97c 	bl	3c0ae <create_free_list>
		if (rc < 0) {
   2fdb6:	2800      	cmp	r0, #0
   2fdb8:	db01      	blt.n	2fdbe <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2fdba:	341c      	adds	r4, #28
   2fdbc:	e7f5      	b.n	2fdaa <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   2fdbe:	bd10      	pop	{r4, pc}
   2fdc0:	20000a68 	.word	0x20000a68
   2fdc4:	20000abc 	.word	0x20000abc

0002fdc8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2fdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fdca:	b083      	sub	sp, #12
   2fdcc:	460c      	mov	r4, r1
   2fdce:	461f      	mov	r7, r3
	__asm__ volatile(
   2fdd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fdd4:	f3ef 8111 	mrs	r1, BASEPRI
   2fdd8:	f383 8812 	msr	BASEPRI_MAX, r3
   2fddc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2fde0:	6943      	ldr	r3, [r0, #20]
   2fde2:	b16b      	cbz	r3, 2fe00 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   2fde4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2fde6:	6943      	ldr	r3, [r0, #20]
   2fde8:	681b      	ldr	r3, [r3, #0]
   2fdea:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2fdec:	6983      	ldr	r3, [r0, #24]
   2fdee:	3301      	adds	r3, #1
   2fdf0:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2fdf2:	2000      	movs	r0, #0
	__asm__ volatile(
   2fdf4:	f381 8811 	msr	BASEPRI, r1
   2fdf8:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   2fdfc:	b003      	add	sp, #12
   2fdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fe00:	4616      	mov	r6, r2
   2fe02:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2fe06:	ea56 0307 	orrs.w	r3, r6, r7
   2fe0a:	d104      	bne.n	2fe16 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   2fe0c:	2300      	movs	r3, #0
   2fe0e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   2fe10:	f06f 000b 	mvn.w	r0, #11
   2fe14:	e7ee      	b.n	2fdf4 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2fe16:	e9cd 6700 	strd	r6, r7, [sp]
   2fe1a:	4602      	mov	r2, r0
   2fe1c:	4628      	mov	r0, r5
   2fe1e:	f000 fe2f 	bl	30a80 <z_pend_curr>
		if (result == 0) {
   2fe22:	2800      	cmp	r0, #0
   2fe24:	d1ea      	bne.n	2fdfc <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   2fe26:	4b02      	ldr	r3, [pc, #8]	; (2fe30 <k_mem_slab_alloc+0x68>)
   2fe28:	689b      	ldr	r3, [r3, #8]
   2fe2a:	695b      	ldr	r3, [r3, #20]
   2fe2c:	6023      	str	r3, [r4, #0]
		return result;
   2fe2e:	e7e5      	b.n	2fdfc <k_mem_slab_alloc+0x34>
   2fe30:	2000d04c 	.word	0x2000d04c

0002fe34 <z_thread_monitor_exit>:
	__asm__ volatile(
   2fe34:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fe38:	f3ef 8111 	mrs	r1, BASEPRI
   2fe3c:	f383 8812 	msr	BASEPRI_MAX, r3
   2fe40:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   2fe44:	4b0c      	ldr	r3, [pc, #48]	; (2fe78 <z_thread_monitor_exit+0x44>)
   2fe46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2fe48:	4283      	cmp	r3, r0
   2fe4a:	d105      	bne.n	2fe58 <z_thread_monitor_exit+0x24>
		_kernel.threads = _kernel.threads->next_thread;
   2fe4c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   2fe50:	4b09      	ldr	r3, [pc, #36]	; (2fe78 <z_thread_monitor_exit+0x44>)
   2fe52:	629a      	str	r2, [r3, #40]	; 0x28
   2fe54:	e00a      	b.n	2fe6c <z_thread_monitor_exit+0x38>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   2fe56:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   2fe58:	b11b      	cbz	r3, 2fe62 <z_thread_monitor_exit+0x2e>
			(thread != prev_thread->next_thread)) {
   2fe5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
		while ((prev_thread != NULL) &&
   2fe5e:	4282      	cmp	r2, r0
   2fe60:	d1f9      	bne.n	2fe56 <z_thread_monitor_exit+0x22>
		}
		if (prev_thread != NULL) {
   2fe62:	b11b      	cbz	r3, 2fe6c <z_thread_monitor_exit+0x38>
			prev_thread->next_thread = thread->next_thread;
   2fe64:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
   2fe68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	__asm__ volatile(
   2fe6c:	f381 8811 	msr	BASEPRI, r1
   2fe70:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   2fe74:	4770      	bx	lr
   2fe76:	bf00      	nop
   2fe78:	2000d04c 	.word	0x2000d04c

0002fe7c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   2fe7c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   2fe7e:	4604      	mov	r4, r0
   2fe80:	b140      	cbz	r0, 2fe94 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   2fe82:	2220      	movs	r2, #32
   2fe84:	f104 0084 	add.w	r0, r4, #132	; 0x84
   2fe88:	f006 ff09 	bl	36c9e <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   2fe8c:	2000      	movs	r0, #0
   2fe8e:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   2fe92:	bd10      	pop	{r4, pc}
		thread = _current;
   2fe94:	4b01      	ldr	r3, [pc, #4]	; (2fe9c <z_impl_k_thread_name_set+0x20>)
   2fe96:	689c      	ldr	r4, [r3, #8]
   2fe98:	e7f3      	b.n	2fe82 <z_impl_k_thread_name_set+0x6>
   2fe9a:	bf00      	nop
   2fe9c:	2000d04c 	.word	0x2000d04c

0002fea0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   2fea0:	b538      	push	{r3, r4, r5, lr}
   2fea2:	4614      	mov	r4, r2
   2fea4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2fea6:	ea54 0305 	orrs.w	r3, r4, r5
   2feaa:	d102      	bne.n	2feb2 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   2feac:	f00c f96a 	bl	3c184 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   2feb0:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2feb2:	462b      	mov	r3, r5
   2feb4:	4902      	ldr	r1, [pc, #8]	; (2fec0 <schedule_new_thread+0x20>)
   2feb6:	3018      	adds	r0, #24
   2feb8:	f001 f88a 	bl	30fd0 <z_add_timeout>
   2febc:	e7f8      	b.n	2feb0 <schedule_new_thread+0x10>
   2febe:	bf00      	nop
   2fec0:	0003c77b 	.word	0x0003c77b

0002fec4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2fec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fec8:	b085      	sub	sp, #20
   2feca:	4604      	mov	r4, r0
   2fecc:	460f      	mov	r7, r1
   2fece:	4615      	mov	r5, r2
   2fed0:	461e      	mov	r6, r3
   2fed2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2fed6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   2feda:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   2fede:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2fee2:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   2fee6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   2fee8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   2feea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2feec:	2204      	movs	r2, #4
   2feee:	9911      	ldr	r1, [sp, #68]	; 0x44
   2fef0:	f00c f94c 	bl	3c18c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   2fef4:	462a      	mov	r2, r5
   2fef6:	4639      	mov	r1, r7
   2fef8:	4620      	mov	r0, r4
   2fefa:	f00c f929 	bl	3c150 <setup_thread_stack>
   2fefe:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2ff00:	f8cd 8008 	str.w	r8, [sp, #8]
   2ff04:	f8cd 9004 	str.w	r9, [sp, #4]
   2ff08:	f8cd a000 	str.w	sl, [sp]
   2ff0c:	4633      	mov	r3, r6
   2ff0e:	4602      	mov	r2, r0
   2ff10:	4639      	mov	r1, r7
   2ff12:	4620      	mov	r0, r4
   2ff14:	f7f2 f998 	bl	22248 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   2ff18:	2300      	movs	r3, #0
   2ff1a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   2ff1c:	6726      	str	r6, [r4, #112]	; 0x70
	new_thread->entry.parameter1 = p1;
   2ff1e:	f8c4 a074 	str.w	sl, [r4, #116]	; 0x74
	new_thread->entry.parameter2 = p2;
   2ff22:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
	new_thread->entry.parameter3 = p3;
   2ff26:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	__asm__ volatile(
   2ff2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ff2e:	f3ef 8211 	mrs	r2, BASEPRI
   2ff32:	f383 8812 	msr	BASEPRI_MAX, r3
   2ff36:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   2ff3a:	4b13      	ldr	r3, [pc, #76]	; (2ff88 <z_setup_new_thread+0xc4>)
   2ff3c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2ff3e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	_kernel.threads = new_thread;
   2ff42:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   2ff44:	f382 8811 	msr	BASEPRI, r2
   2ff48:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   2ff4c:	f1bb 0f00 	cmp.w	fp, #0
   2ff50:	d013      	beq.n	2ff7a <z_setup_new_thread+0xb6>
		strncpy(new_thread->name, name,
   2ff52:	221f      	movs	r2, #31
   2ff54:	4659      	mov	r1, fp
   2ff56:	f104 0084 	add.w	r0, r4, #132	; 0x84
   2ff5a:	f006 fea0 	bl	36c9e <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   2ff5e:	2300      	movs	r3, #0
   2ff60:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2ff64:	4b08      	ldr	r3, [pc, #32]	; (2ff88 <z_setup_new_thread+0xc4>)
   2ff66:	689b      	ldr	r3, [r3, #8]
   2ff68:	b15b      	cbz	r3, 2ff82 <z_setup_new_thread+0xbe>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   2ff6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   2ff6e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   2ff72:	4628      	mov	r0, r5
   2ff74:	b005      	add	sp, #20
   2ff76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   2ff7a:	2300      	movs	r3, #0
   2ff7c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
   2ff80:	e7f0      	b.n	2ff64 <z_setup_new_thread+0xa0>
		new_thread->resource_pool = NULL;
   2ff82:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		return stack_ptr;
   2ff86:	e7f4      	b.n	2ff72 <z_setup_new_thread+0xae>
   2ff88:	2000d04c 	.word	0x2000d04c

0002ff8c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   2ff8c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   2ff90:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   2ff92:	4c23      	ldr	r4, [pc, #140]	; (30020 <z_init_static_threads+0x94>)
   2ff94:	4b23      	ldr	r3, [pc, #140]	; (30024 <z_init_static_threads+0x98>)
   2ff96:	429c      	cmp	r4, r3
   2ff98:	d215      	bcs.n	2ffc6 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   2ff9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ff9c:	9305      	str	r3, [sp, #20]
   2ff9e:	6a23      	ldr	r3, [r4, #32]
   2ffa0:	9304      	str	r3, [sp, #16]
   2ffa2:	69e3      	ldr	r3, [r4, #28]
   2ffa4:	9303      	str	r3, [sp, #12]
   2ffa6:	69a3      	ldr	r3, [r4, #24]
   2ffa8:	9302      	str	r3, [sp, #8]
   2ffaa:	6963      	ldr	r3, [r4, #20]
   2ffac:	9301      	str	r3, [sp, #4]
   2ffae:	6923      	ldr	r3, [r4, #16]
   2ffb0:	9300      	str	r3, [sp, #0]
   2ffb2:	68e3      	ldr	r3, [r4, #12]
   2ffb4:	68a2      	ldr	r2, [r4, #8]
   2ffb6:	6861      	ldr	r1, [r4, #4]
   2ffb8:	6820      	ldr	r0, [r4, #0]
   2ffba:	f7ff ff83 	bl	2fec4 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   2ffbe:	6823      	ldr	r3, [r4, #0]
   2ffc0:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2ffc2:	3430      	adds	r4, #48	; 0x30
   2ffc4:	e7e6      	b.n	2ff94 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   2ffc6:	f000 fc13 	bl	307f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2ffca:	4c15      	ldr	r4, [pc, #84]	; (30020 <z_init_static_threads+0x94>)
   2ffcc:	e01b      	b.n	30006 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   2ffce:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   2ffd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ffd4:	ea4f 79e3 	mov.w	r9, r3, asr #31
   2ffd8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   2ffdc:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   2ffe0:	03d8      	lsls	r0, r3, #15
   2ffe2:	f240 35e7 	movw	r5, #999	; 0x3e7
   2ffe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ffea:	2300      	movs	r3, #0
   2ffec:	1940      	adds	r0, r0, r5
   2ffee:	f04f 0500 	mov.w	r5, #0
   2fff2:	eb45 0101 	adc.w	r1, r5, r1
   2fff6:	f7dc fdd9 	bl	cbac <__aeabi_uldivmod>
   2fffa:	4602      	mov	r2, r0
   2fffc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   2fffe:	4630      	mov	r0, r6
   30000:	f7ff ff4e 	bl	2fea0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   30004:	3430      	adds	r4, #48	; 0x30
   30006:	4b07      	ldr	r3, [pc, #28]	; (30024 <z_init_static_threads+0x98>)
   30008:	429c      	cmp	r4, r3
   3000a:	d204      	bcs.n	30016 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   3000c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3000e:	f1b3 3fff 	cmp.w	r3, #4294967295
   30012:	d0f7      	beq.n	30004 <z_init_static_threads+0x78>
   30014:	e7db      	b.n	2ffce <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   30016:	f000 fde9 	bl	30bec <k_sched_unlock>
}
   3001a:	b006      	add	sp, #24
   3001c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   30020:	200009a8 	.word	0x200009a8
   30024:	20000a68 	.word	0x20000a68

00030028 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   30028:	b508      	push	{r3, lr}
   3002a:	e001      	b.n	30030 <idle+0x8>
	arch_cpu_idle();
   3002c:	f7f1 ffd0 	bl	21fd0 <arch_cpu_idle>
	__asm__ volatile(
   30030:	f04f 0240 	mov.w	r2, #64	; 0x40
   30034:	f3ef 8311 	mrs	r3, BASEPRI
   30038:	f382 8812 	msr	BASEPRI_MAX, r2
   3003c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   30040:	f00c fced 	bl	3ca1e <z_get_next_timeout_expiry>
   30044:	4b03      	ldr	r3, [pc, #12]	; (30054 <idle+0x2c>)
   30046:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   30048:	f7f1 f94c 	bl	212e4 <pm_system_suspend>
   3004c:	2800      	cmp	r0, #0
   3004e:	d1ef      	bne.n	30030 <idle+0x8>
   30050:	e7ec      	b.n	3002c <idle+0x4>
   30052:	bf00      	nop
   30054:	2000d04c 	.word	0x2000d04c

00030058 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   30058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3005c:	b083      	sub	sp, #12
   3005e:	4604      	mov	r4, r0
   30060:	461d      	mov	r5, r3
   30062:	f04f 0340 	mov.w	r3, #64	; 0x40
   30066:	f3ef 8711 	mrs	r7, BASEPRI
   3006a:	f383 8812 	msr	BASEPRI_MAX, r3
   3006e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   30072:	68c1      	ldr	r1, [r0, #12]
   30074:	b999      	cbnz	r1, 3009e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   30076:	2900      	cmp	r1, #0
   30078:	d14f      	bne.n	3011a <z_impl_k_mutex_lock+0xc2>
   3007a:	4b3a      	ldr	r3, [pc, #232]	; (30164 <z_impl_k_mutex_lock+0x10c>)
   3007c:	689b      	ldr	r3, [r3, #8]
   3007e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   30082:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   30084:	3101      	adds	r1, #1
   30086:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   30088:	4b36      	ldr	r3, [pc, #216]	; (30164 <z_impl_k_mutex_lock+0x10c>)
   3008a:	689b      	ldr	r3, [r3, #8]
   3008c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   3008e:	f387 8811 	msr	BASEPRI, r7
   30092:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   30096:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   30098:	b003      	add	sp, #12
   3009a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3009e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   300a0:	6882      	ldr	r2, [r0, #8]
   300a2:	4b30      	ldr	r3, [pc, #192]	; (30164 <z_impl_k_mutex_lock+0x10c>)
   300a4:	689b      	ldr	r3, [r3, #8]
   300a6:	429a      	cmp	r2, r3
   300a8:	d0e5      	beq.n	30076 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   300aa:	ea55 0106 	orrs.w	r1, r5, r6
   300ae:	bf0c      	ite	eq
   300b0:	f04f 0801 	moveq.w	r8, #1
   300b4:	f04f 0800 	movne.w	r8, #0
   300b8:	d031      	beq.n	3011e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   300ba:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   300be:	4649      	mov	r1, r9
   300c0:	f993 000e 	ldrsb.w	r0, [r3, #14]
   300c4:	f00c f895 	bl	3c1f2 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   300c8:	4581      	cmp	r9, r0
   300ca:	dc2f      	bgt.n	3012c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   300cc:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   300d0:	9600      	str	r6, [sp, #0]
   300d2:	9501      	str	r5, [sp, #4]
   300d4:	4622      	mov	r2, r4
   300d6:	4639      	mov	r1, r7
   300d8:	4823      	ldr	r0, [pc, #140]	; (30168 <z_impl_k_mutex_lock+0x110>)
   300da:	f000 fcd1 	bl	30a80 <z_pend_curr>
	if (got_mutex == 0) {
   300de:	2800      	cmp	r0, #0
   300e0:	d0da      	beq.n	30098 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   300e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   300e6:	f3ef 8511 	mrs	r5, BASEPRI
   300ea:	f383 8812 	msr	BASEPRI_MAX, r3
   300ee:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   300f2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   300f4:	42a3      	cmp	r3, r4
   300f6:	d01f      	beq.n	30138 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   300f8:	b1f3      	cbz	r3, 30138 <z_impl_k_mutex_lock+0xe0>
   300fa:	6921      	ldr	r1, [r4, #16]
   300fc:	f993 000e 	ldrsb.w	r0, [r3, #14]
   30100:	f00c f877 	bl	3c1f2 <new_prio_for_inheritance>
   30104:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   30106:	4620      	mov	r0, r4
   30108:	f00c f87e 	bl	3c208 <adjust_owner_prio>
   3010c:	b9b0      	cbnz	r0, 3013c <z_impl_k_mutex_lock+0xe4>
   3010e:	f1b9 0f00 	cmp.w	r9, #0
   30112:	d015      	beq.n	30140 <z_impl_k_mutex_lock+0xe8>
   30114:	f04f 0801 	mov.w	r8, #1
   30118:	e012      	b.n	30140 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   3011a:	6923      	ldr	r3, [r4, #16]
   3011c:	e7b1      	b.n	30082 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   3011e:	f387 8811 	msr	BASEPRI, r7
   30122:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   30126:	f06f 000f 	mvn.w	r0, #15
   3012a:	e7b5      	b.n	30098 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   3012c:	4601      	mov	r1, r0
   3012e:	4620      	mov	r0, r4
   30130:	f00c f86a 	bl	3c208 <adjust_owner_prio>
   30134:	4681      	mov	r9, r0
   30136:	e7cb      	b.n	300d0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   30138:	6921      	ldr	r1, [r4, #16]
   3013a:	e7e4      	b.n	30106 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3013c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   30140:	f1b8 0f00 	cmp.w	r8, #0
   30144:	d106      	bne.n	30154 <z_impl_k_mutex_lock+0xfc>
   30146:	f385 8811 	msr	BASEPRI, r5
   3014a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   3014e:	f06f 000a 	mvn.w	r0, #10
   30152:	e7a1      	b.n	30098 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   30154:	4629      	mov	r1, r5
   30156:	4804      	ldr	r0, [pc, #16]	; (30168 <z_impl_k_mutex_lock+0x110>)
   30158:	f000 fb2e 	bl	307b8 <z_reschedule>
	return -EAGAIN;
   3015c:	f06f 000a 	mvn.w	r0, #10
   30160:	e79a      	b.n	30098 <z_impl_k_mutex_lock+0x40>
   30162:	bf00      	nop
   30164:	2000d04c 	.word	0x2000d04c
   30168:	2000d078 	.word	0x2000d078

0003016c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   3016c:	6882      	ldr	r2, [r0, #8]
   3016e:	2a00      	cmp	r2, #0
   30170:	d035      	beq.n	301de <z_impl_k_mutex_unlock+0x72>
{
   30172:	b538      	push	{r3, r4, r5, lr}
   30174:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   30176:	4b1d      	ldr	r3, [pc, #116]	; (301ec <z_impl_k_mutex_unlock+0x80>)
   30178:	689b      	ldr	r3, [r3, #8]
   3017a:	429a      	cmp	r2, r3
   3017c:	d132      	bne.n	301e4 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   3017e:	7bda      	ldrb	r2, [r3, #15]
   30180:	3a01      	subs	r2, #1
   30182:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   30184:	68c3      	ldr	r3, [r0, #12]
   30186:	2b01      	cmp	r3, #1
   30188:	d905      	bls.n	30196 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   3018a:	3b01      	subs	r3, #1
   3018c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   3018e:	f000 fd2d 	bl	30bec <k_sched_unlock>

	return 0;
   30192:	2000      	movs	r0, #0
}
   30194:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   30196:	f04f 0340 	mov.w	r3, #64	; 0x40
   3019a:	f3ef 8511 	mrs	r5, BASEPRI
   3019e:	f383 8812 	msr	BASEPRI_MAX, r3
   301a2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   301a6:	6901      	ldr	r1, [r0, #16]
   301a8:	f00c f82e 	bl	3c208 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   301ac:	4620      	mov	r0, r4
   301ae:	f00c fb8a 	bl	3c8c6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   301b2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   301b4:	b160      	cbz	r0, 301d0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   301b6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   301ba:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   301bc:	2300      	movs	r3, #0
   301be:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
		z_ready_thread(new_owner);
   301c2:	f00c fabe 	bl	3c742 <z_ready_thread>
		z_reschedule(&lock, key);
   301c6:	4629      	mov	r1, r5
   301c8:	4809      	ldr	r0, [pc, #36]	; (301f0 <z_impl_k_mutex_unlock+0x84>)
   301ca:	f000 faf5 	bl	307b8 <z_reschedule>
   301ce:	e7de      	b.n	3018e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   301d0:	2300      	movs	r3, #0
   301d2:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   301d4:	f385 8811 	msr	BASEPRI, r5
   301d8:	f3bf 8f6f 	isb	sy
   301dc:	e7d7      	b.n	3018e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   301de:	f06f 0015 	mvn.w	r0, #21
}
   301e2:	4770      	bx	lr
		return -EPERM;
   301e4:	f04f 30ff 	mov.w	r0, #4294967295
   301e8:	e7d4      	b.n	30194 <z_impl_k_mutex_unlock+0x28>
   301ea:	bf00      	nop
   301ec:	2000d04c 	.word	0x2000d04c
   301f0:	2000d078 	.word	0x2000d078

000301f4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   301f4:	b5d0      	push	{r4, r6, r7, lr}
   301f6:	b082      	sub	sp, #8
   301f8:	4601      	mov	r1, r0
   301fa:	4616      	mov	r6, r2
   301fc:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   301fe:	4602      	mov	r2, r0
	__asm__ volatile(
   30200:	f04f 0340 	mov.w	r3, #64	; 0x40
   30204:	f3ef 8411 	mrs	r4, BASEPRI
   30208:	f383 8812 	msr	BASEPRI_MAX, r3
   3020c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   30210:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   30214:	b188      	cbz	r0, 3023a <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   30216:	6803      	ldr	r3, [r0, #0]
   30218:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   3021c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   3021e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   30220:	4290      	cmp	r0, r2
   30222:	d008      	beq.n	30236 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   30224:	2101      	movs	r1, #1
   30226:	f00c f874 	bl	3c312 <z_queue_node_peek>
	__asm__ volatile(
   3022a:	f384 8811 	msr	BASEPRI, r4
   3022e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   30232:	b002      	add	sp, #8
   30234:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   30236:	604b      	str	r3, [r1, #4]
}
   30238:	e7f4      	b.n	30224 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3023a:	ea56 0307 	orrs.w	r3, r6, r7
   3023e:	d00a      	beq.n	30256 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   30240:	e9cd 6700 	strd	r6, r7, [sp]
   30244:	4621      	mov	r1, r4
   30246:	4610      	mov	r0, r2
   30248:	f000 fc1a 	bl	30a80 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   3024c:	b948      	cbnz	r0, 30262 <z_impl_k_queue_get+0x6e>
   3024e:	4b06      	ldr	r3, [pc, #24]	; (30268 <z_impl_k_queue_get+0x74>)
   30250:	689b      	ldr	r3, [r3, #8]
   30252:	6958      	ldr	r0, [r3, #20]
   30254:	e7ed      	b.n	30232 <z_impl_k_queue_get+0x3e>
   30256:	f384 8811 	msr	BASEPRI, r4
   3025a:	f3bf 8f6f 	isb	sy
		return NULL;
   3025e:	2000      	movs	r0, #0
   30260:	e7e7      	b.n	30232 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   30262:	2000      	movs	r0, #0
   30264:	e7e5      	b.n	30232 <z_impl_k_queue_get+0x3e>
   30266:	bf00      	nop
   30268:	2000d04c 	.word	0x2000d04c

0003026c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3026c:	b538      	push	{r3, r4, r5, lr}
   3026e:	4604      	mov	r4, r0
	__asm__ volatile(
   30270:	f04f 0340 	mov.w	r3, #64	; 0x40
   30274:	f3ef 8511 	mrs	r5, BASEPRI
   30278:	f383 8812 	msr	BASEPRI_MAX, r3
   3027c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   30280:	f00c fb21 	bl	3c8c6 <z_unpend_first_thread>

	if (thread != NULL) {
   30284:	b148      	cbz	r0, 3029a <z_impl_k_sem_give+0x2e>
   30286:	2200      	movs	r2, #0
   30288:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   3028c:	f00c fa59 	bl	3c742 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   30290:	4629      	mov	r1, r5
   30292:	4809      	ldr	r0, [pc, #36]	; (302b8 <z_impl_k_sem_give+0x4c>)
   30294:	f000 fa90 	bl	307b8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   30298:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3029a:	68a3      	ldr	r3, [r4, #8]
   3029c:	68e2      	ldr	r2, [r4, #12]
   3029e:	4293      	cmp	r3, r2
   302a0:	d008      	beq.n	302b4 <z_impl_k_sem_give+0x48>
   302a2:	2201      	movs	r2, #1
   302a4:	4413      	add	r3, r2
   302a6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   302a8:	2102      	movs	r1, #2
   302aa:	f104 0010 	add.w	r0, r4, #16
   302ae:	f00c fce1 	bl	3cc74 <z_handle_obj_poll_events>
}
   302b2:	e7ed      	b.n	30290 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   302b4:	2200      	movs	r2, #0
   302b6:	e7f5      	b.n	302a4 <z_impl_k_sem_give+0x38>
   302b8:	2000d078 	.word	0x2000d078

000302bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   302bc:	b530      	push	{r4, r5, lr}
   302be:	b083      	sub	sp, #12
   302c0:	461d      	mov	r5, r3
   302c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   302c6:	f3ef 8111 	mrs	r1, BASEPRI
   302ca:	f383 8812 	msr	BASEPRI_MAX, r3
   302ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   302d2:	6883      	ldr	r3, [r0, #8]
   302d4:	b143      	cbz	r3, 302e8 <z_impl_k_sem_take+0x2c>
		sem->count--;
   302d6:	3b01      	subs	r3, #1
   302d8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   302da:	f381 8811 	msr	BASEPRI, r1
   302de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   302e2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   302e4:	b003      	add	sp, #12
   302e6:	bd30      	pop	{r4, r5, pc}
   302e8:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   302ea:	ea54 0305 	orrs.w	r3, r4, r5
   302ee:	d006      	beq.n	302fe <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   302f0:	e9cd 4500 	strd	r4, r5, [sp]
   302f4:	4602      	mov	r2, r0
   302f6:	4805      	ldr	r0, [pc, #20]	; (3030c <z_impl_k_sem_take+0x50>)
   302f8:	f000 fbc2 	bl	30a80 <z_pend_curr>
	return ret;
   302fc:	e7f2      	b.n	302e4 <z_impl_k_sem_take+0x28>
   302fe:	f381 8811 	msr	BASEPRI, r1
   30302:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   30306:	f06f 000f 	mvn.w	r0, #15
   3030a:	e7eb      	b.n	302e4 <z_impl_k_sem_take+0x28>
   3030c:	2000d078 	.word	0x2000d078

00030310 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   30310:	b538      	push	{r3, r4, r5, lr}
   30312:	4604      	mov	r4, r0
	__asm__ volatile(
   30314:	f04f 0340 	mov.w	r3, #64	; 0x40
   30318:	f3ef 8511 	mrs	r5, BASEPRI
   3031c:	f383 8812 	msr	BASEPRI_MAX, r3
   30320:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   30324:	4620      	mov	r0, r4
   30326:	f00c face 	bl	3c8c6 <z_unpend_first_thread>
		if (thread == NULL) {
   3032a:	b130      	cbz	r0, 3033a <z_impl_k_sem_reset+0x2a>
   3032c:	f06f 020a 	mvn.w	r2, #10
   30330:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   30334:	f00c fa05 	bl	3c742 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   30338:	e7f4      	b.n	30324 <z_impl_k_sem_reset+0x14>
	}
	sem->count = 0;
   3033a:	2300      	movs	r3, #0
   3033c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3033e:	2102      	movs	r1, #2
   30340:	f104 0010 	add.w	r0, r4, #16
   30344:	f00c fc96 	bl	3cc74 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   30348:	4629      	mov	r1, r5
   3034a:	4802      	ldr	r0, [pc, #8]	; (30354 <z_impl_k_sem_reset+0x44>)
   3034c:	f000 fa34 	bl	307b8 <z_reschedule>
}
   30350:	bd38      	pop	{r3, r4, r5, pc}
   30352:	bf00      	nop
   30354:	2000d078 	.word	0x2000d078

00030358 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   30358:	b510      	push	{r4, lr}
   3035a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   3035c:	4b08      	ldr	r3, [pc, #32]	; (30380 <k_sys_work_q_init+0x28>)
   3035e:	9302      	str	r3, [sp, #8]
   30360:	2400      	movs	r4, #0
   30362:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   30366:	ab02      	add	r3, sp, #8
   30368:	9300      	str	r3, [sp, #0]
   3036a:	f04f 33ff 	mov.w	r3, #4294967295
   3036e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   30372:	4904      	ldr	r1, [pc, #16]	; (30384 <k_sys_work_q_init+0x2c>)
   30374:	4804      	ldr	r0, [pc, #16]	; (30388 <k_sys_work_q_init+0x30>)
   30376:	f000 f96f 	bl	30658 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   3037a:	4620      	mov	r0, r4
   3037c:	b004      	add	sp, #16
   3037e:	bd10      	pop	{r4, pc}
   30380:	00040a58 	.word	0x00040a58
   30384:	200121a0 	.word	0x200121a0
   30388:	20006dd8 	.word	0x20006dd8

0003038c <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   3038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3038e:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   30390:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30392:	f013 0f02 	tst.w	r3, #2
   30396:	d15b      	bne.n	30450 <submit_to_queue_locked+0xc4>
   30398:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   3039a:	f013 0f04 	tst.w	r3, #4
   3039e:	d15c      	bne.n	3045a <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   303a0:	680b      	ldr	r3, [r1, #0]
   303a2:	2b00      	cmp	r3, #0
   303a4:	d037      	beq.n	30416 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   303a6:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   303a8:	f013 0f01 	tst.w	r3, #1
   303ac:	d036      	beq.n	3041c <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   303ae:	68a3      	ldr	r3, [r4, #8]
   303b0:	602b      	str	r3, [r5, #0]
			ret = 2;
   303b2:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   303b4:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   303b6:	2e00      	cmp	r6, #0
   303b8:	d03e      	beq.n	30438 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   303ba:	4b29      	ldr	r3, [pc, #164]	; (30460 <submit_to_queue_locked+0xd4>)
   303bc:	689b      	ldr	r3, [r3, #8]
   303be:	42b3      	cmp	r3, r6
   303c0:	d02e      	beq.n	30420 <submit_to_queue_locked+0x94>
   303c2:	2300      	movs	r3, #0
   303c4:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   303c6:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   303ca:	f3c3 0180 	ubfx	r1, r3, #2, #1
   303ce:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   303d2:	f013 0f01 	tst.w	r3, #1
   303d6:	d032      	beq.n	3043e <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   303d8:	b101      	cbz	r1, 303dc <submit_to_queue_locked+0x50>
   303da:	b39a      	cbz	r2, 30444 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   303dc:	b100      	cbz	r0, 303e0 <submit_to_queue_locked+0x54>
   303de:	b3a1      	cbz	r1, 3044a <submit_to_queue_locked+0xbe>
	parent->next = child;
   303e0:	2300      	movs	r3, #0
   303e2:	6023      	str	r3, [r4, #0]
	return list->tail;
   303e4:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
Z_GENLIST_APPEND(slist, snode)
   303e8:	b30b      	cbz	r3, 3042e <submit_to_queue_locked+0xa2>
	parent->next = child;
   303ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   303ec:	f8c6 40c4 	str.w	r4, [r6, #196]	; 0xc4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   303f0:	2200      	movs	r2, #0
   303f2:	4611      	mov	r1, r2
   303f4:	f106 00c8 	add.w	r0, r6, #200	; 0xc8
   303f8:	f00c faa5 	bl	3c946 <z_sched_wake>
		ret = 1;
   303fc:	2001      	movs	r0, #1

		if (rc < 0) {
   303fe:	2800      	cmp	r0, #0
   30400:	db06      	blt.n	30410 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   30402:	68e3      	ldr	r3, [r4, #12]
   30404:	f043 0304 	orr.w	r3, r3, #4
   30408:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   3040a:	682b      	ldr	r3, [r5, #0]
   3040c:	60a3      	str	r3, [r4, #8]
   3040e:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   30410:	2800      	cmp	r0, #0
   30412:	dc21      	bgt.n	30458 <submit_to_queue_locked+0xcc>
   30414:	e01e      	b.n	30454 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   30416:	6883      	ldr	r3, [r0, #8]
   30418:	600b      	str	r3, [r1, #0]
   3041a:	e7c4      	b.n	303a6 <submit_to_queue_locked+0x1a>
		ret = 1;
   3041c:	2701      	movs	r7, #1
   3041e:	e7c9      	b.n	303b4 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   30420:	f00b fea8 	bl	3c174 <k_is_in_isr>
   30424:	b908      	cbnz	r0, 3042a <submit_to_queue_locked+0x9e>
   30426:	2301      	movs	r3, #1
   30428:	e7cc      	b.n	303c4 <submit_to_queue_locked+0x38>
   3042a:	2300      	movs	r3, #0
   3042c:	e7ca      	b.n	303c4 <submit_to_queue_locked+0x38>
   3042e:	f8c6 40c4 	str.w	r4, [r6, #196]	; 0xc4
	list->head = node;
   30432:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
}
   30436:	e7db      	b.n	303f0 <submit_to_queue_locked+0x64>
		return -EINVAL;
   30438:	f06f 0015 	mvn.w	r0, #21
   3043c:	e7df      	b.n	303fe <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   3043e:	f06f 0012 	mvn.w	r0, #18
   30442:	e7dc      	b.n	303fe <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   30444:	f06f 000f 	mvn.w	r0, #15
   30448:	e7d9      	b.n	303fe <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   3044a:	f06f 000f 	mvn.w	r0, #15
   3044e:	e7d6      	b.n	303fe <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   30450:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   30454:	2300      	movs	r3, #0
   30456:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   30458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   3045a:	2000      	movs	r0, #0
   3045c:	e7fa      	b.n	30454 <submit_to_queue_locked+0xc8>
   3045e:	bf00      	nop
   30460:	2000d04c 	.word	0x2000d04c

00030464 <finalize_cancel_locked>:
{
   30464:	b570      	push	{r4, r5, r6, lr}
   30466:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   30468:	68c3      	ldr	r3, [r0, #12]
   3046a:	f023 0302 	bic.w	r3, r3, #2
   3046e:	60c3      	str	r3, [r0, #12]
	return list->head;
   30470:	4b19      	ldr	r3, [pc, #100]	; (304d8 <finalize_cancel_locked+0x74>)
   30472:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   30474:	b1e8      	cbz	r0, 304b2 <finalize_cancel_locked+0x4e>
   30476:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   30478:	b100      	cbz	r0, 3047c <finalize_cancel_locked+0x18>
	return node->next;
   3047a:	6804      	ldr	r4, [r0, #0]
   3047c:	2600      	movs	r6, #0
   3047e:	e01d      	b.n	304bc <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   30480:	b15e      	cbz	r6, 3049a <finalize_cancel_locked+0x36>
	return node->next;
   30482:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   30484:	6033      	str	r3, [r6, #0]
	return list->tail;
   30486:	4b14      	ldr	r3, [pc, #80]	; (304d8 <finalize_cancel_locked+0x74>)
   30488:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   3048a:	4298      	cmp	r0, r3
   3048c:	d00e      	beq.n	304ac <finalize_cancel_locked+0x48>
	parent->next = child;
   3048e:	2300      	movs	r3, #0
   30490:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   30494:	f7ff feea 	bl	3026c <z_impl_k_sem_give>
}
   30498:	e015      	b.n	304c6 <finalize_cancel_locked+0x62>
	return node->next;
   3049a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   3049c:	4b0e      	ldr	r3, [pc, #56]	; (304d8 <finalize_cancel_locked+0x74>)
   3049e:	601a      	str	r2, [r3, #0]
	return list->tail;
   304a0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   304a2:	4298      	cmp	r0, r3
   304a4:	d1f3      	bne.n	3048e <finalize_cancel_locked+0x2a>
	list->tail = node;
   304a6:	4b0c      	ldr	r3, [pc, #48]	; (304d8 <finalize_cancel_locked+0x74>)
   304a8:	605a      	str	r2, [r3, #4]
}
   304aa:	e7f0      	b.n	3048e <finalize_cancel_locked+0x2a>
	list->tail = node;
   304ac:	4b0a      	ldr	r3, [pc, #40]	; (304d8 <finalize_cancel_locked+0x74>)
   304ae:	605e      	str	r6, [r3, #4]
}
   304b0:	e7ed      	b.n	3048e <finalize_cancel_locked+0x2a>
   304b2:	4604      	mov	r4, r0
   304b4:	e7e2      	b.n	3047c <finalize_cancel_locked+0x18>
   304b6:	4623      	mov	r3, r4
   304b8:	4620      	mov	r0, r4
   304ba:	461c      	mov	r4, r3
   304bc:	b150      	cbz	r0, 304d4 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   304be:	6843      	ldr	r3, [r0, #4]
   304c0:	42ab      	cmp	r3, r5
   304c2:	d0dd      	beq.n	30480 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   304c4:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   304c6:	2c00      	cmp	r4, #0
   304c8:	d0f5      	beq.n	304b6 <finalize_cancel_locked+0x52>
   304ca:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   304cc:	2c00      	cmp	r4, #0
   304ce:	d0f3      	beq.n	304b8 <finalize_cancel_locked+0x54>
	return node->next;
   304d0:	6823      	ldr	r3, [r4, #0]
   304d2:	e7f1      	b.n	304b8 <finalize_cancel_locked+0x54>
}
   304d4:	bd70      	pop	{r4, r5, r6, pc}
   304d6:	bf00      	nop
   304d8:	2000d078 	.word	0x2000d078

000304dc <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   304dc:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   304de:	68c5      	ldr	r5, [r0, #12]
   304e0:	f015 0f02 	tst.w	r5, #2
   304e4:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   304e8:	d101      	bne.n	304ee <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   304ea:	4628      	mov	r0, r5
   304ec:	bd70      	pop	{r4, r5, r6, pc}
   304ee:	4604      	mov	r4, r0
   304f0:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   304f2:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   304f6:	2201      	movs	r2, #1
   304f8:	2100      	movs	r1, #0
   304fa:	f00b ff78 	bl	3c3ee <z_impl_k_sem_init>
	canceler->work = work;
   304fe:	6074      	str	r4, [r6, #4]
	parent->next = child;
   30500:	2300      	movs	r3, #0
   30502:	6033      	str	r3, [r6, #0]
	return list->tail;
   30504:	4b05      	ldr	r3, [pc, #20]	; (3051c <cancel_sync_locked+0x40>)
   30506:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   30508:	b11b      	cbz	r3, 30512 <cancel_sync_locked+0x36>
	parent->next = child;
   3050a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   3050c:	4b03      	ldr	r3, [pc, #12]	; (3051c <cancel_sync_locked+0x40>)
   3050e:	605e      	str	r6, [r3, #4]
}
   30510:	e7eb      	b.n	304ea <cancel_sync_locked+0xe>
   30512:	4b02      	ldr	r3, [pc, #8]	; (3051c <cancel_sync_locked+0x40>)
   30514:	605e      	str	r6, [r3, #4]
	list->head = node;
   30516:	601e      	str	r6, [r3, #0]
}
   30518:	e7e7      	b.n	304ea <cancel_sync_locked+0xe>
   3051a:	bf00      	nop
   3051c:	2000d078 	.word	0x2000d078

00030520 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   30520:	b5f0      	push	{r4, r5, r6, r7, lr}
   30522:	b085      	sub	sp, #20
   30524:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   30526:	e016      	b.n	30556 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   30528:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	*flagp &= ~BIT(bit);
   3052c:	f023 0204 	bic.w	r2, r3, #4
   30530:	f8c5 20d8 	str.w	r2, [r5, #216]	; 0xd8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   30534:	f013 0f04 	tst.w	r3, #4
   30538:	d158      	bne.n	305ec <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   3053a:	2300      	movs	r3, #0
   3053c:	9302      	str	r3, [sp, #8]
   3053e:	f04f 32ff 	mov.w	r2, #4294967295
   30542:	f04f 33ff 	mov.w	r3, #4294967295
   30546:	e9cd 2300 	strd	r2, r3, [sp]
   3054a:	f105 02c8 	add.w	r2, r5, #200	; 0xc8
   3054e:	4631      	mov	r1, r6
   30550:	482e      	ldr	r0, [pc, #184]	; (3060c <work_queue_main+0xec>)
   30552:	f000 fcc9 	bl	30ee8 <z_sched_wait>
   30556:	f04f 0340 	mov.w	r3, #64	; 0x40
   3055a:	f3ef 8611 	mrs	r6, BASEPRI
   3055e:	f383 8812 	msr	BASEPRI_MAX, r3
   30562:	f3bf 8f6f 	isb	sy
	return list->head;
   30566:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
Z_GENLIST_GET(slist, snode)
   3056a:	2c00      	cmp	r4, #0
   3056c:	d0dc      	beq.n	30528 <work_queue_main+0x8>
	return node->next;
   3056e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   30570:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	return list->tail;
   30574:	f8d5 20c4 	ldr.w	r2, [r5, #196]	; 0xc4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30578:	4294      	cmp	r4, r2
   3057a:	d034      	beq.n	305e6 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   3057c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
   30580:	f043 0302 	orr.w	r3, r3, #2
   30584:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
   30588:	68e3      	ldr	r3, [r4, #12]
   3058a:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   3058e:	f023 0304 	bic.w	r3, r3, #4
   30592:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   30594:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   30596:	2c00      	cmp	r4, #0
   30598:	d0cf      	beq.n	3053a <work_queue_main+0x1a>
	__asm__ volatile(
   3059a:	f386 8811 	msr	BASEPRI, r6
   3059e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   305a2:	4620      	mov	r0, r4
   305a4:	4798      	blx	r3
	__asm__ volatile(
   305a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   305aa:	f3ef 8611 	mrs	r6, BASEPRI
   305ae:	f383 8812 	msr	BASEPRI_MAX, r3
   305b2:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   305b6:	68e3      	ldr	r3, [r4, #12]
   305b8:	f023 0301 	bic.w	r3, r3, #1
   305bc:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   305be:	f013 0f02 	tst.w	r3, #2
   305c2:	d11e      	bne.n	30602 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   305c4:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
   305c8:	f023 0302 	bic.w	r3, r3, #2
   305cc:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
	return (*flagp & BIT(bit)) != 0U;
   305d0:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   305d4:	f386 8811 	msr	BASEPRI, r6
   305d8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   305dc:	2b00      	cmp	r3, #0
   305de:	d1ba      	bne.n	30556 <work_queue_main+0x36>
	z_impl_k_yield();
   305e0:	f000 fb84 	bl	30cec <z_impl_k_yield>
}
   305e4:	e7b7      	b.n	30556 <work_queue_main+0x36>
	list->tail = node;
   305e6:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
}
   305ea:	e7c7      	b.n	3057c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   305ec:	f105 07d0 	add.w	r7, r5, #208	; 0xd0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   305f0:	2200      	movs	r2, #0
   305f2:	2101      	movs	r1, #1
   305f4:	4638      	mov	r0, r7
   305f6:	f00c f9a6 	bl	3c946 <z_sched_wake>
   305fa:	2800      	cmp	r0, #0
   305fc:	d1f8      	bne.n	305f0 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   305fe:	2300      	movs	r3, #0
   30600:	e7c9      	b.n	30596 <work_queue_main+0x76>
			finalize_cancel_locked(work);
   30602:	4620      	mov	r0, r4
   30604:	f7ff ff2e 	bl	30464 <finalize_cancel_locked>
   30608:	e7dc      	b.n	305c4 <work_queue_main+0xa4>
   3060a:	bf00      	nop
   3060c:	2000d078 	.word	0x2000d078

00030610 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   30610:	b570      	push	{r4, r5, r6, lr}
   30612:	4606      	mov	r6, r0
   30614:	4608      	mov	r0, r1
   30616:	4614      	mov	r4, r2
   30618:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3061a:	ea54 0305 	orrs.w	r3, r4, r5
   3061e:	d00c      	beq.n	3063a <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   30620:	68cb      	ldr	r3, [r1, #12]
   30622:	f043 0308 	orr.w	r3, r3, #8
   30626:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   30628:	6833      	ldr	r3, [r6, #0]
   3062a:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   3062c:	462b      	mov	r3, r5
   3062e:	4905      	ldr	r1, [pc, #20]	; (30644 <schedule_for_queue_locked+0x34>)
   30630:	3010      	adds	r0, #16
   30632:	f000 fccd 	bl	30fd0 <z_add_timeout>

	return ret;
   30636:	2001      	movs	r0, #1
}
   30638:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   3063a:	4631      	mov	r1, r6
   3063c:	f7ff fea6 	bl	3038c <submit_to_queue_locked>
   30640:	e7fa      	b.n	30638 <schedule_for_queue_locked+0x28>
   30642:	bf00      	nop
   30644:	0003c499 	.word	0x0003c499

00030648 <k_work_submit>:
{
   30648:	b508      	push	{r3, lr}
   3064a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   3064c:	4801      	ldr	r0, [pc, #4]	; (30654 <k_work_submit+0xc>)
   3064e:	f00b ff5d 	bl	3c50c <k_work_submit_to_queue>
}
   30652:	bd08      	pop	{r3, pc}
   30654:	20006dd8 	.word	0x20006dd8

00030658 <k_work_queue_start>:
{
   30658:	b5f0      	push	{r4, r5, r6, r7, lr}
   3065a:	b089      	sub	sp, #36	; 0x24
   3065c:	4604      	mov	r4, r0
   3065e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   30660:	2000      	movs	r0, #0
   30662:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = NULL;
   30666:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   3066a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   3066e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   30672:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
   30676:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->head = (sys_dnode_t *)list;
   3067a:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	list->tail = (sys_dnode_t *)list;
   3067e:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if ((cfg != NULL) && cfg->no_yield) {
   30682:	b1fd      	cbz	r5, 306c4 <k_work_queue_start+0x6c>
   30684:	7928      	ldrb	r0, [r5, #4]
   30686:	b9f8      	cbnz	r0, 306c8 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   30688:	2001      	movs	r0, #1
	*flagp = flags;
   3068a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3068e:	f04f 36ff 	mov.w	r6, #4294967295
   30692:	f04f 37ff 	mov.w	r7, #4294967295
   30696:	e9cd 6706 	strd	r6, r7, [sp, #24]
   3069a:	2000      	movs	r0, #0
   3069c:	9004      	str	r0, [sp, #16]
   3069e:	9303      	str	r3, [sp, #12]
   306a0:	9002      	str	r0, [sp, #8]
   306a2:	9001      	str	r0, [sp, #4]
   306a4:	9400      	str	r4, [sp, #0]
   306a6:	4b0a      	ldr	r3, [pc, #40]	; (306d0 <k_work_queue_start+0x78>)
   306a8:	4620      	mov	r0, r4
   306aa:	f00b fd7a 	bl	3c1a2 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   306ae:	b125      	cbz	r5, 306ba <k_work_queue_start+0x62>
   306b0:	6829      	ldr	r1, [r5, #0]
   306b2:	b111      	cbz	r1, 306ba <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   306b4:	4620      	mov	r0, r4
   306b6:	f7ff fbe1 	bl	2fe7c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   306ba:	4620      	mov	r0, r4
   306bc:	f00b fd62 	bl	3c184 <z_impl_k_thread_start>
}
   306c0:	b009      	add	sp, #36	; 0x24
   306c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   306c4:	2001      	movs	r0, #1
   306c6:	e7e0      	b.n	3068a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   306c8:	f240 1001 	movw	r0, #257	; 0x101
   306cc:	e7dd      	b.n	3068a <k_work_queue_start+0x32>
   306ce:	bf00      	nop
   306d0:	00030521 	.word	0x00030521

000306d4 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   306d4:	b508      	push	{r3, lr}
   306d6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   306d8:	4801      	ldr	r0, [pc, #4]	; (306e0 <k_work_schedule+0xc>)
   306da:	f00b ff43 	bl	3c564 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   306de:	bd08      	pop	{r3, pc}
   306e0:	20006dd8 	.word	0x20006dd8

000306e4 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   306e4:	b508      	push	{r3, lr}
   306e6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   306e8:	4801      	ldr	r0, [pc, #4]	; (306f0 <k_work_reschedule+0xc>)
   306ea:	f00b ff55 	bl	3c598 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   306ee:	bd08      	pop	{r3, pc}
   306f0:	20006dd8 	.word	0x20006dd8

000306f4 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   306f4:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   306f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   306fa:	bf08      	it	eq
   306fc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   30700:	d100      	bne.n	30704 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   30702:	bd38      	pop	{r3, r4, r5, pc}
   30704:	4902      	ldr	r1, [pc, #8]	; (30710 <add_thread_timeout+0x1c>)
   30706:	3018      	adds	r0, #24
   30708:	f000 fc62 	bl	30fd0 <z_add_timeout>
   3070c:	e7f9      	b.n	30702 <add_thread_timeout+0xe>
   3070e:	bf00      	nop
   30710:	0003c77b 	.word	0x0003c77b

00030714 <z_reset_time_slice>:
{
   30714:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   30716:	4b08      	ldr	r3, [pc, #32]	; (30738 <z_reset_time_slice+0x24>)
   30718:	681b      	ldr	r3, [r3, #0]
   3071a:	b903      	cbnz	r3, 3071e <z_reset_time_slice+0xa>
}
   3071c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   3071e:	f7fd fdd9 	bl	2e2d4 <sys_clock_elapsed>
   30722:	4603      	mov	r3, r0
   30724:	4a04      	ldr	r2, [pc, #16]	; (30738 <z_reset_time_slice+0x24>)
   30726:	6810      	ldr	r0, [r2, #0]
   30728:	4403      	add	r3, r0
   3072a:	4a04      	ldr	r2, [pc, #16]	; (3073c <z_reset_time_slice+0x28>)
   3072c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   3072e:	2100      	movs	r1, #0
   30730:	f00c f98b 	bl	3ca4a <z_set_timeout_expiry>
}
   30734:	e7f2      	b.n	3071c <z_reset_time_slice+0x8>
   30736:	bf00      	nop
   30738:	2000d088 	.word	0x2000d088
   3073c:	2000d04c 	.word	0x2000d04c

00030740 <k_sched_time_slice_set>:
{
   30740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30744:	4606      	mov	r6, r0
   30746:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   30748:	2300      	movs	r3, #0
	__asm__ volatile(
   3074a:	f04f 0240 	mov.w	r2, #64	; 0x40
   3074e:	f3ef 8711 	mrs	r7, BASEPRI
   30752:	f382 8812 	msr	BASEPRI_MAX, r2
   30756:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   3075a:	e009      	b.n	30770 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   3075c:	4b13      	ldr	r3, [pc, #76]	; (307ac <k_sched_time_slice_set+0x6c>)
   3075e:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   30762:	f7ff ffd7 	bl	30714 <z_reset_time_slice>
	__asm__ volatile(
   30766:	f387 8811 	msr	BASEPRI, r7
   3076a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3076e:	2301      	movs	r3, #1
   30770:	b9cb      	cbnz	r3, 307a6 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   30772:	2300      	movs	r3, #0
   30774:	4a0e      	ldr	r2, [pc, #56]	; (307b0 <k_sched_time_slice_set+0x70>)
   30776:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   30778:	0c75      	lsrs	r5, r6, #17
   3077a:	03f4      	lsls	r4, r6, #15
   3077c:	f240 30e7 	movw	r0, #999	; 0x3e7
   30780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   30784:	2300      	movs	r3, #0
   30786:	1820      	adds	r0, r4, r0
   30788:	f04f 0100 	mov.w	r1, #0
   3078c:	eb45 0101 	adc.w	r1, r5, r1
   30790:	f7dc fa0c 	bl	cbac <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   30794:	4b07      	ldr	r3, [pc, #28]	; (307b4 <k_sched_time_slice_set+0x74>)
   30796:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   30798:	2e00      	cmp	r6, #0
   3079a:	dddf      	ble.n	3075c <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   3079c:	2802      	cmp	r0, #2
   3079e:	bfb8      	it	lt
   307a0:	2002      	movlt	r0, #2
   307a2:	6018      	str	r0, [r3, #0]
   307a4:	e7da      	b.n	3075c <k_sched_time_slice_set+0x1c>
}
   307a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   307aa:	bf00      	nop
   307ac:	2000d084 	.word	0x2000d084
   307b0:	2000d04c 	.word	0x2000d04c
   307b4:	2000d088 	.word	0x2000d088

000307b8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   307b8:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   307ba:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   307bc:	b921      	cbnz	r1, 307c8 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   307be:	f3ef 8305 	mrs	r3, IPSR
   307c2:	b913      	cbnz	r3, 307ca <z_reschedule+0x12>
   307c4:	2101      	movs	r1, #1
   307c6:	e000      	b.n	307ca <z_reschedule+0x12>
   307c8:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   307ca:	f011 0f01 	tst.w	r1, #1
   307ce:	d007      	beq.n	307e0 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   307d0:	4b06      	ldr	r3, [pc, #24]	; (307ec <z_reschedule+0x34>)
   307d2:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   307d4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   307d6:	429a      	cmp	r2, r3
   307d8:	d002      	beq.n	307e0 <z_reschedule+0x28>
	ret = arch_swap(key);
   307da:	f7f1 fcdd 	bl	22198 <arch_swap>
		z_swap(lock, key);
   307de:	e003      	b.n	307e8 <z_reschedule+0x30>
   307e0:	f380 8811 	msr	BASEPRI, r0
   307e4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   307e8:	bd08      	pop	{r3, pc}
   307ea:	bf00      	nop
   307ec:	2000d04c 	.word	0x2000d04c

000307f0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   307f0:	2300      	movs	r3, #0
	__asm__ volatile(
   307f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   307f6:	f3ef 8111 	mrs	r1, BASEPRI
   307fa:	f382 8812 	msr	BASEPRI_MAX, r2
   307fe:	f3bf 8f6f 	isb	sy
   30802:	b953      	cbnz	r3, 3081a <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   30804:	4b05      	ldr	r3, [pc, #20]	; (3081c <k_sched_lock+0x2c>)
   30806:	689a      	ldr	r2, [r3, #8]
   30808:	7bd3      	ldrb	r3, [r2, #15]
   3080a:	3b01      	subs	r3, #1
   3080c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   3080e:	f381 8811 	msr	BASEPRI, r1
   30812:	f3bf 8f6f 	isb	sy
   30816:	2301      	movs	r3, #1
   30818:	e7f3      	b.n	30802 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   3081a:	4770      	bx	lr
   3081c:	2000d04c 	.word	0x2000d04c

00030820 <update_cache>:
{
   30820:	b538      	push	{r3, r4, r5, lr}
   30822:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   30824:	480f      	ldr	r0, [pc, #60]	; (30864 <update_cache+0x44>)
   30826:	f00b ff85 	bl	3c734 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   3082a:	4605      	mov	r5, r0
   3082c:	b170      	cbz	r0, 3084c <update_cache+0x2c>
	if (preempt_ok != 0) {
   3082e:	b984      	cbnz	r4, 30852 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   30830:	4b0d      	ldr	r3, [pc, #52]	; (30868 <update_cache+0x48>)
   30832:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   30834:	7b5a      	ldrb	r2, [r3, #13]
   30836:	f012 0f1f 	tst.w	r2, #31
   3083a:	d10a      	bne.n	30852 <update_cache+0x32>
	return node->next != NULL;
   3083c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3083e:	b942      	cbnz	r2, 30852 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   30840:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   30842:	2a7f      	cmp	r2, #127	; 0x7f
   30844:	d905      	bls.n	30852 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   30846:	4a08      	ldr	r2, [pc, #32]	; (30868 <update_cache+0x48>)
   30848:	61d3      	str	r3, [r2, #28]
   3084a:	e00a      	b.n	30862 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   3084c:	4b06      	ldr	r3, [pc, #24]	; (30868 <update_cache+0x48>)
   3084e:	68dd      	ldr	r5, [r3, #12]
   30850:	e7ed      	b.n	3082e <update_cache+0xe>
		if (thread != _current) {
   30852:	4b05      	ldr	r3, [pc, #20]	; (30868 <update_cache+0x48>)
   30854:	689b      	ldr	r3, [r3, #8]
   30856:	42ab      	cmp	r3, r5
   30858:	d001      	beq.n	3085e <update_cache+0x3e>
			z_reset_time_slice();
   3085a:	f7ff ff5b 	bl	30714 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   3085e:	4b02      	ldr	r3, [pc, #8]	; (30868 <update_cache+0x48>)
   30860:	61dd      	str	r5, [r3, #28]
}
   30862:	bd38      	pop	{r3, r4, r5, pc}
   30864:	2000d06c 	.word	0x2000d06c
   30868:	2000d04c 	.word	0x2000d04c

0003086c <move_thread_to_end_of_prio_q>:
{
   3086c:	b538      	push	{r3, r4, r5, lr}
   3086e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   30870:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   30872:	f990 300d 	ldrsb.w	r3, [r0, #13]
   30876:	2b00      	cmp	r3, #0
   30878:	db28      	blt.n	308cc <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   3087a:	7b6b      	ldrb	r3, [r5, #13]
   3087c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   30880:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   30882:	4b1a      	ldr	r3, [pc, #104]	; (308ec <move_thread_to_end_of_prio_q+0x80>)
   30884:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30888:	429c      	cmp	r4, r3
   3088a:	d02d      	beq.n	308e8 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3088c:	b16c      	cbz	r4, 308aa <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3088e:	4621      	mov	r1, r4
   30890:	4628      	mov	r0, r5
   30892:	f00b fee6 	bl	3c662 <z_sched_prio_cmp>
   30896:	2800      	cmp	r0, #0
   30898:	dc20      	bgt.n	308dc <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3089a:	b134      	cbz	r4, 308aa <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   3089c:	4b13      	ldr	r3, [pc, #76]	; (308ec <move_thread_to_end_of_prio_q+0x80>)
   3089e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   308a0:	429c      	cmp	r4, r3
   308a2:	d002      	beq.n	308aa <move_thread_to_end_of_prio_q+0x3e>
   308a4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   308a6:	2c00      	cmp	r4, #0
   308a8:	d1f0      	bne.n	3088c <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   308aa:	4b10      	ldr	r3, [pc, #64]	; (308ec <move_thread_to_end_of_prio_q+0x80>)
   308ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   308ae:	f103 0120 	add.w	r1, r3, #32
   308b2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   308b4:	606a      	str	r2, [r5, #4]

	tail->next = node;
   308b6:	6015      	str	r5, [r2, #0]
	list->tail = node;
   308b8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   308ba:	4b0c      	ldr	r3, [pc, #48]	; (308ec <move_thread_to_end_of_prio_q+0x80>)
   308bc:	6898      	ldr	r0, [r3, #8]
   308be:	42a8      	cmp	r0, r5
   308c0:	bf14      	ite	ne
   308c2:	2000      	movne	r0, #0
   308c4:	2001      	moveq	r0, #1
   308c6:	f7ff ffab 	bl	30820 <update_cache>
}
   308ca:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   308cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   308d0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   308d2:	4601      	mov	r1, r0
   308d4:	4806      	ldr	r0, [pc, #24]	; (308f0 <move_thread_to_end_of_prio_q+0x84>)
   308d6:	f00b ff02 	bl	3c6de <z_priq_dumb_remove>
}
   308da:	e7ce      	b.n	3087a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   308dc:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   308de:	606b      	str	r3, [r5, #4]
	node->next = successor;
   308e0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   308e2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   308e4:	6065      	str	r5, [r4, #4]
}
   308e6:	e7e8      	b.n	308ba <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   308e8:	2400      	movs	r4, #0
   308ea:	e7cf      	b.n	3088c <move_thread_to_end_of_prio_q+0x20>
   308ec:	2000d04c 	.word	0x2000d04c
   308f0:	2000d06c 	.word	0x2000d06c

000308f4 <z_time_slice>:
{
   308f4:	b510      	push	{r4, lr}
	__asm__ volatile(
   308f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   308fa:	f3ef 8411 	mrs	r4, BASEPRI
   308fe:	f383 8812 	msr	BASEPRI_MAX, r3
   30902:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   30906:	4b1c      	ldr	r3, [pc, #112]	; (30978 <z_time_slice+0x84>)
   30908:	689b      	ldr	r3, [r3, #8]
   3090a:	4a1c      	ldr	r2, [pc, #112]	; (3097c <z_time_slice+0x88>)
   3090c:	6812      	ldr	r2, [r2, #0]
   3090e:	4293      	cmp	r3, r2
   30910:	d01d      	beq.n	3094e <z_time_slice+0x5a>
	pending_current = NULL;
   30912:	4a1a      	ldr	r2, [pc, #104]	; (3097c <z_time_slice+0x88>)
   30914:	2100      	movs	r1, #0
   30916:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   30918:	4a19      	ldr	r2, [pc, #100]	; (30980 <z_time_slice+0x8c>)
   3091a:	6812      	ldr	r2, [r2, #0]
   3091c:	b322      	cbz	r2, 30968 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   3091e:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   30920:	2a7f      	cmp	r2, #127	; 0x7f
   30922:	d821      	bhi.n	30968 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   30924:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   30926:	f012 0f1f 	tst.w	r2, #31
   3092a:	d11d      	bne.n	30968 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   3092c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   30930:	4a14      	ldr	r2, [pc, #80]	; (30984 <z_time_slice+0x90>)
   30932:	6812      	ldr	r2, [r2, #0]
   30934:	4291      	cmp	r1, r2
   30936:	db17      	blt.n	30968 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   30938:	4a13      	ldr	r2, [pc, #76]	; (30988 <z_time_slice+0x94>)
   3093a:	4293      	cmp	r3, r2
   3093c:	d014      	beq.n	30968 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   3093e:	4a0e      	ldr	r2, [pc, #56]	; (30978 <z_time_slice+0x84>)
   30940:	6912      	ldr	r2, [r2, #16]
   30942:	4282      	cmp	r2, r0
   30944:	dd0a      	ble.n	3095c <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   30946:	1a10      	subs	r0, r2, r0
   30948:	4b0b      	ldr	r3, [pc, #44]	; (30978 <z_time_slice+0x84>)
   3094a:	6118      	str	r0, [r3, #16]
   3094c:	e00f      	b.n	3096e <z_time_slice+0x7a>
		z_reset_time_slice();
   3094e:	f7ff fee1 	bl	30714 <z_reset_time_slice>
	__asm__ volatile(
   30952:	f384 8811 	msr	BASEPRI, r4
   30956:	f3bf 8f6f 	isb	sy
		return;
   3095a:	e00c      	b.n	30976 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   3095c:	4618      	mov	r0, r3
   3095e:	f7ff ff85 	bl	3086c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   30962:	f7ff fed7 	bl	30714 <z_reset_time_slice>
   30966:	e002      	b.n	3096e <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   30968:	4b03      	ldr	r3, [pc, #12]	; (30978 <z_time_slice+0x84>)
   3096a:	2200      	movs	r2, #0
   3096c:	611a      	str	r2, [r3, #16]
   3096e:	f384 8811 	msr	BASEPRI, r4
   30972:	f3bf 8f6f 	isb	sy
}
   30976:	bd10      	pop	{r4, pc}
   30978:	2000d04c 	.word	0x2000d04c
   3097c:	2000d080 	.word	0x2000d080
   30980:	2000d088 	.word	0x2000d088
   30984:	2000d084 	.word	0x2000d084
   30988:	20006c58 	.word	0x20006c58

0003098c <ready_thread>:
{
   3098c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   3098e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   30990:	f990 200d 	ldrsb.w	r2, [r0, #13]
   30994:	2a00      	cmp	r2, #0
   30996:	db2d      	blt.n	309f4 <ready_thread+0x68>
   30998:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3099a:	f013 0f1f 	tst.w	r3, #31
   3099e:	d105      	bne.n	309ac <ready_thread+0x20>
	return node->next != NULL;
   309a0:	6982      	ldr	r2, [r0, #24]
   309a2:	b10a      	cbz	r2, 309a8 <ready_thread+0x1c>
   309a4:	2200      	movs	r2, #0
   309a6:	e002      	b.n	309ae <ready_thread+0x22>
   309a8:	2201      	movs	r2, #1
   309aa:	e000      	b.n	309ae <ready_thread+0x22>
   309ac:	2200      	movs	r2, #0
   309ae:	b30a      	cbz	r2, 309f4 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   309b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   309b4:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   309b6:	4b14      	ldr	r3, [pc, #80]	; (30a08 <ready_thread+0x7c>)
   309b8:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   309bc:	429d      	cmp	r5, r3
   309be:	d020      	beq.n	30a02 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   309c0:	b16d      	cbz	r5, 309de <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   309c2:	4629      	mov	r1, r5
   309c4:	4620      	mov	r0, r4
   309c6:	f00b fe4c 	bl	3c662 <z_sched_prio_cmp>
   309ca:	2800      	cmp	r0, #0
   309cc:	dc13      	bgt.n	309f6 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   309ce:	b135      	cbz	r5, 309de <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   309d0:	4b0d      	ldr	r3, [pc, #52]	; (30a08 <ready_thread+0x7c>)
   309d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   309d4:	429d      	cmp	r5, r3
   309d6:	d002      	beq.n	309de <ready_thread+0x52>
   309d8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   309da:	2d00      	cmp	r5, #0
   309dc:	d1f0      	bne.n	309c0 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   309de:	4b0a      	ldr	r3, [pc, #40]	; (30a08 <ready_thread+0x7c>)
   309e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   309e2:	f103 0120 	add.w	r1, r3, #32
   309e6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   309e8:	6062      	str	r2, [r4, #4]
	tail->next = node;
   309ea:	6014      	str	r4, [r2, #0]
	list->tail = node;
   309ec:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   309ee:	2000      	movs	r0, #0
   309f0:	f7ff ff16 	bl	30820 <update_cache>
}
   309f4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   309f6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   309f8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   309fa:	6025      	str	r5, [r4, #0]
	prev->next = node;
   309fc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   309fe:	606c      	str	r4, [r5, #4]
}
   30a00:	e7f5      	b.n	309ee <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   30a02:	2500      	movs	r5, #0
   30a04:	e7dc      	b.n	309c0 <ready_thread+0x34>
   30a06:	bf00      	nop
   30a08:	2000d04c 	.word	0x2000d04c

00030a0c <z_sched_start>:
{
   30a0c:	b510      	push	{r4, lr}
	__asm__ volatile(
   30a0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   30a12:	f3ef 8411 	mrs	r4, BASEPRI
   30a16:	f383 8812 	msr	BASEPRI_MAX, r3
   30a1a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   30a1e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   30a20:	f013 0f04 	tst.w	r3, #4
   30a24:	d104      	bne.n	30a30 <z_sched_start+0x24>
	__asm__ volatile(
   30a26:	f384 8811 	msr	BASEPRI, r4
   30a2a:	f3bf 8f6f 	isb	sy
}
   30a2e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   30a30:	f023 0304 	bic.w	r3, r3, #4
   30a34:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   30a36:	f7ff ffa9 	bl	3098c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   30a3a:	4621      	mov	r1, r4
   30a3c:	4801      	ldr	r0, [pc, #4]	; (30a44 <z_sched_start+0x38>)
   30a3e:	f7ff febb 	bl	307b8 <z_reschedule>
   30a42:	e7f4      	b.n	30a2e <z_sched_start+0x22>
   30a44:	2000d084 	.word	0x2000d084

00030a48 <unready_thread>:
{
   30a48:	b510      	push	{r4, lr}
   30a4a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   30a4c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   30a4e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   30a52:	2b00      	cmp	r3, #0
   30a54:	db08      	blt.n	30a68 <unready_thread+0x20>
	update_cache(thread == _current);
   30a56:	4b08      	ldr	r3, [pc, #32]	; (30a78 <unready_thread+0x30>)
   30a58:	6898      	ldr	r0, [r3, #8]
   30a5a:	42a0      	cmp	r0, r4
   30a5c:	bf14      	ite	ne
   30a5e:	2000      	movne	r0, #0
   30a60:	2001      	moveq	r0, #1
   30a62:	f7ff fedd 	bl	30820 <update_cache>
}
   30a66:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   30a68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   30a6c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   30a6e:	4601      	mov	r1, r0
   30a70:	4802      	ldr	r0, [pc, #8]	; (30a7c <unready_thread+0x34>)
   30a72:	f00b fe34 	bl	3c6de <z_priq_dumb_remove>
}
   30a76:	e7ee      	b.n	30a56 <unready_thread+0xe>
   30a78:	2000d04c 	.word	0x2000d04c
   30a7c:	2000d06c 	.word	0x2000d06c

00030a80 <z_pend_curr>:
{
   30a80:	b510      	push	{r4, lr}
   30a82:	460c      	mov	r4, r1
   30a84:	4611      	mov	r1, r2
	pending_current = _current;
   30a86:	4b06      	ldr	r3, [pc, #24]	; (30aa0 <z_pend_curr+0x20>)
   30a88:	6898      	ldr	r0, [r3, #8]
   30a8a:	4b06      	ldr	r3, [pc, #24]	; (30aa4 <z_pend_curr+0x24>)
   30a8c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   30a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   30a92:	f00b fed0 	bl	3c836 <pend>
   30a96:	4620      	mov	r0, r4
   30a98:	f7f1 fb7e 	bl	22198 <arch_swap>
}
   30a9c:	bd10      	pop	{r4, pc}
   30a9e:	bf00      	nop
   30aa0:	2000d04c 	.word	0x2000d04c
   30aa4:	2000d080 	.word	0x2000d080

00030aa8 <z_set_prio>:
{
   30aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30aac:	4604      	mov	r4, r0
   30aae:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   30ab0:	2300      	movs	r3, #0
	__asm__ volatile(
   30ab2:	f04f 0240 	mov.w	r2, #64	; 0x40
   30ab6:	f3ef 8611 	mrs	r6, BASEPRI
   30aba:	f382 8812 	msr	BASEPRI_MAX, r2
   30abe:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   30ac2:	4698      	mov	r8, r3
   30ac4:	e008      	b.n	30ad8 <z_set_prio+0x30>
		if (need_sched) {
   30ac6:	f012 0801 	ands.w	r8, r2, #1
   30aca:	d111      	bne.n	30af0 <z_set_prio+0x48>
			thread->base.prio = prio;
   30acc:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   30ace:	f386 8811 	msr	BASEPRI, r6
   30ad2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   30ad6:	2301      	movs	r3, #1
   30ad8:	461a      	mov	r2, r3
   30ada:	2b00      	cmp	r3, #0
   30adc:	d13d      	bne.n	30b5a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   30ade:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   30ae0:	f013 0f1f 	tst.w	r3, #31
   30ae4:	d1ef      	bne.n	30ac6 <z_set_prio+0x1e>
	return node->next != NULL;
   30ae6:	69a1      	ldr	r1, [r4, #24]
   30ae8:	2900      	cmp	r1, #0
   30aea:	d1ec      	bne.n	30ac6 <z_set_prio+0x1e>
   30aec:	2201      	movs	r2, #1
   30aee:	e7ea      	b.n	30ac6 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   30af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   30af4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   30af6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 30b64 <z_set_prio+0xbc>
   30afa:	4621      	mov	r1, r4
   30afc:	4648      	mov	r0, r9
   30afe:	f00b fdee 	bl	3c6de <z_priq_dumb_remove>
				thread->base.prio = prio;
   30b02:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   30b04:	7b63      	ldrb	r3, [r4, #13]
   30b06:	f063 037f 	orn	r3, r3, #127	; 0x7f
   30b0a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   30b0c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30b10:	454d      	cmp	r5, r9
   30b12:	d020      	beq.n	30b56 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   30b14:	b16d      	cbz	r5, 30b32 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   30b16:	4629      	mov	r1, r5
   30b18:	4620      	mov	r0, r4
   30b1a:	f00b fda2 	bl	3c662 <z_sched_prio_cmp>
   30b1e:	2800      	cmp	r0, #0
   30b20:	dc13      	bgt.n	30b4a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   30b22:	b135      	cbz	r5, 30b32 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   30b24:	4b0e      	ldr	r3, [pc, #56]	; (30b60 <z_set_prio+0xb8>)
   30b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   30b28:	429d      	cmp	r5, r3
   30b2a:	d002      	beq.n	30b32 <z_set_prio+0x8a>
   30b2c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   30b2e:	2d00      	cmp	r5, #0
   30b30:	d1f0      	bne.n	30b14 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   30b32:	4b0b      	ldr	r3, [pc, #44]	; (30b60 <z_set_prio+0xb8>)
   30b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   30b36:	f103 0120 	add.w	r1, r3, #32
   30b3a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   30b3c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   30b3e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   30b40:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   30b42:	2001      	movs	r0, #1
   30b44:	f7ff fe6c 	bl	30820 <update_cache>
   30b48:	e7c1      	b.n	30ace <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   30b4a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   30b4c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   30b4e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   30b50:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   30b52:	606c      	str	r4, [r5, #4]
}
   30b54:	e7f5      	b.n	30b42 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   30b56:	2500      	movs	r5, #0
   30b58:	e7dc      	b.n	30b14 <z_set_prio+0x6c>
}
   30b5a:	4640      	mov	r0, r8
   30b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30b60:	2000d04c 	.word	0x2000d04c
   30b64:	2000d06c 	.word	0x2000d06c

00030b68 <z_impl_k_thread_suspend>:
{
   30b68:	b538      	push	{r3, r4, r5, lr}
   30b6a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   30b6c:	3018      	adds	r0, #24
   30b6e:	f00b ff38 	bl	3c9e2 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   30b72:	2300      	movs	r3, #0
	__asm__ volatile(
   30b74:	f04f 0240 	mov.w	r2, #64	; 0x40
   30b78:	f3ef 8511 	mrs	r5, BASEPRI
   30b7c:	f382 8812 	msr	BASEPRI_MAX, r2
   30b80:	f3bf 8f6f 	isb	sy
   30b84:	e010      	b.n	30ba8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   30b86:	7b63      	ldrb	r3, [r4, #13]
   30b88:	f043 0310 	orr.w	r3, r3, #16
   30b8c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   30b8e:	4b15      	ldr	r3, [pc, #84]	; (30be4 <z_impl_k_thread_suspend+0x7c>)
   30b90:	6898      	ldr	r0, [r3, #8]
   30b92:	42a0      	cmp	r0, r4
   30b94:	bf14      	ite	ne
   30b96:	2000      	movne	r0, #0
   30b98:	2001      	moveq	r0, #1
   30b9a:	f7ff fe41 	bl	30820 <update_cache>
	__asm__ volatile(
   30b9e:	f385 8811 	msr	BASEPRI, r5
   30ba2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   30ba6:	2301      	movs	r3, #1
   30ba8:	b963      	cbnz	r3, 30bc4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   30baa:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   30bac:	f994 300d 	ldrsb.w	r3, [r4, #13]
   30bb0:	2b00      	cmp	r3, #0
   30bb2:	dae8      	bge.n	30b86 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   30bb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   30bb8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   30bba:	4621      	mov	r1, r4
   30bbc:	480a      	ldr	r0, [pc, #40]	; (30be8 <z_impl_k_thread_suspend+0x80>)
   30bbe:	f00b fd8e 	bl	3c6de <z_priq_dumb_remove>
}
   30bc2:	e7e0      	b.n	30b86 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   30bc4:	4b07      	ldr	r3, [pc, #28]	; (30be4 <z_impl_k_thread_suspend+0x7c>)
   30bc6:	689b      	ldr	r3, [r3, #8]
   30bc8:	42a3      	cmp	r3, r4
   30bca:	d000      	beq.n	30bce <z_impl_k_thread_suspend+0x66>
}
   30bcc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   30bce:	f04f 0340 	mov.w	r3, #64	; 0x40
   30bd2:	f3ef 8011 	mrs	r0, BASEPRI
   30bd6:	f383 8812 	msr	BASEPRI_MAX, r3
   30bda:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   30bde:	f00b fd69 	bl	3c6b4 <z_reschedule_irqlock>
   30be2:	e7f3      	b.n	30bcc <z_impl_k_thread_suspend+0x64>
   30be4:	2000d04c 	.word	0x2000d04c
   30be8:	2000d06c 	.word	0x2000d06c

00030bec <k_sched_unlock>:

void k_sched_unlock(void)
{
   30bec:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   30bee:	2300      	movs	r3, #0
   30bf0:	f04f 0240 	mov.w	r2, #64	; 0x40
   30bf4:	f3ef 8411 	mrs	r4, BASEPRI
   30bf8:	f382 8812 	msr	BASEPRI_MAX, r2
   30bfc:	f3bf 8f6f 	isb	sy
   30c00:	b96b      	cbnz	r3, 30c1e <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   30c02:	4b0c      	ldr	r3, [pc, #48]	; (30c34 <k_sched_unlock+0x48>)
   30c04:	689a      	ldr	r2, [r3, #8]
   30c06:	7bd3      	ldrb	r3, [r2, #15]
   30c08:	3301      	adds	r3, #1
   30c0a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   30c0c:	2000      	movs	r0, #0
   30c0e:	f7ff fe07 	bl	30820 <update_cache>
	__asm__ volatile(
   30c12:	f384 8811 	msr	BASEPRI, r4
   30c16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   30c1a:	2301      	movs	r3, #1
   30c1c:	e7f0      	b.n	30c00 <k_sched_unlock+0x14>
	__asm__ volatile(
   30c1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   30c22:	f3ef 8011 	mrs	r0, BASEPRI
   30c26:	f383 8812 	msr	BASEPRI_MAX, r3
   30c2a:	f3bf 8f6f 	isb	sy
   30c2e:	f00b fd41 	bl	3c6b4 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   30c32:	bd10      	pop	{r4, pc}
   30c34:	2000d04c 	.word	0x2000d04c

00030c38 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   30c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   30c3a:	7b43      	ldrb	r3, [r0, #13]
   30c3c:	f013 0f08 	tst.w	r3, #8
   30c40:	d145      	bne.n	30cce <end_thread+0x96>
   30c42:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   30c44:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   30c48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   30c4c:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   30c4e:	f013 0f80 	tst.w	r3, #128	; 0x80
   30c52:	d114      	bne.n	30c7e <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   30c54:	68ab      	ldr	r3, [r5, #8]
   30c56:	b15b      	cbz	r3, 30c70 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   30c58:	4628      	mov	r0, r5
   30c5a:	f00b fd00 	bl	3c65e <pended_on_thread>
   30c5e:	4629      	mov	r1, r5
   30c60:	f00b fd3d 	bl	3c6de <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   30c64:	7b6b      	ldrb	r3, [r5, #13]
   30c66:	f023 0302 	bic.w	r3, r3, #2
   30c6a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   30c6c:	2300      	movs	r3, #0
   30c6e:	60ab      	str	r3, [r5, #8]
   30c70:	f105 0018 	add.w	r0, r5, #24
   30c74:	f00b feb5 	bl	3c9e2 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   30c78:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30c7c:	e01c      	b.n	30cb8 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   30c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   30c82:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   30c84:	4601      	mov	r1, r0
   30c86:	4812      	ldr	r0, [pc, #72]	; (30cd0 <end_thread+0x98>)
   30c88:	f00b fd29 	bl	3c6de <z_priq_dumb_remove>
}
   30c8c:	e7e2      	b.n	30c54 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   30c8e:	4620      	mov	r0, r4
   30c90:	f00b fce5 	bl	3c65e <pended_on_thread>
   30c94:	4621      	mov	r1, r4
   30c96:	f00b fd22 	bl	3c6de <z_priq_dumb_remove>
   30c9a:	7b63      	ldrb	r3, [r4, #13]
   30c9c:	f023 0302 	bic.w	r3, r3, #2
   30ca0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   30ca2:	2600      	movs	r6, #0
   30ca4:	60a6      	str	r6, [r4, #8]
   30ca6:	f104 0018 	add.w	r0, r4, #24
   30caa:	f00b fe9a 	bl	3c9e2 <z_abort_timeout>
   30cae:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
		ready_thread(thread);
   30cb2:	4620      	mov	r0, r4
   30cb4:	f7ff fe6a 	bl	3098c <ready_thread>
	return list->head == list;
   30cb8:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30cba:	42bc      	cmp	r4, r7
   30cbc:	d001      	beq.n	30cc2 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30cbe:	2c00      	cmp	r4, #0
   30cc0:	d1e5      	bne.n	30c8e <end_thread+0x56>
		update_cache(1);
   30cc2:	2001      	movs	r0, #1
   30cc4:	f7ff fdac 	bl	30820 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   30cc8:	4628      	mov	r0, r5
   30cca:	f7ff f8b3 	bl	2fe34 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   30cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30cd0:	2000d06c 	.word	0x2000d06c

00030cd4 <z_sched_init>:
{
   30cd4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   30cd6:	4804      	ldr	r0, [pc, #16]	; (30ce8 <z_sched_init+0x14>)
   30cd8:	f00b fe31 	bl	3c93e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   30cdc:	2100      	movs	r1, #0
   30cde:	4608      	mov	r0, r1
   30ce0:	f7ff fd2e 	bl	30740 <k_sched_time_slice_set>
}
   30ce4:	bd08      	pop	{r3, pc}
   30ce6:	bf00      	nop
   30ce8:	2000d068 	.word	0x2000d068

00030cec <z_impl_k_yield>:
{
   30cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30cee:	f04f 0340 	mov.w	r3, #64	; 0x40
   30cf2:	f3ef 8611 	mrs	r6, BASEPRI
   30cf6:	f383 8812 	msr	BASEPRI_MAX, r3
   30cfa:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   30cfe:	4c1c      	ldr	r4, [pc, #112]	; (30d70 <z_impl_k_yield+0x84>)
   30d00:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   30d02:	7b4b      	ldrb	r3, [r1, #13]
   30d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   30d08:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   30d0a:	f104 0720 	add.w	r7, r4, #32
   30d0e:	4638      	mov	r0, r7
   30d10:	f00b fce5 	bl	3c6de <z_priq_dumb_remove>
	queue_thread(_current);
   30d14:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   30d16:	7b6b      	ldrb	r3, [r5, #13]
   30d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
   30d1c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   30d1e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30d20:	42bc      	cmp	r4, r7
   30d22:	d023      	beq.n	30d6c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   30d24:	b16c      	cbz	r4, 30d42 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   30d26:	4621      	mov	r1, r4
   30d28:	4628      	mov	r0, r5
   30d2a:	f00b fc9a 	bl	3c662 <z_sched_prio_cmp>
   30d2e:	2800      	cmp	r0, #0
   30d30:	dc16      	bgt.n	30d60 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   30d32:	b134      	cbz	r4, 30d42 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   30d34:	4b0e      	ldr	r3, [pc, #56]	; (30d70 <z_impl_k_yield+0x84>)
   30d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   30d38:	429c      	cmp	r4, r3
   30d3a:	d002      	beq.n	30d42 <z_impl_k_yield+0x56>
   30d3c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   30d3e:	2c00      	cmp	r4, #0
   30d40:	d1f0      	bne.n	30d24 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   30d42:	4b0b      	ldr	r3, [pc, #44]	; (30d70 <z_impl_k_yield+0x84>)
   30d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   30d46:	f103 0120 	add.w	r1, r3, #32
   30d4a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   30d4c:	606a      	str	r2, [r5, #4]
	tail->next = node;
   30d4e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   30d50:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   30d52:	2001      	movs	r0, #1
   30d54:	f7ff fd64 	bl	30820 <update_cache>
   30d58:	4630      	mov	r0, r6
   30d5a:	f7f1 fa1d 	bl	22198 <arch_swap>
}
   30d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   30d60:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   30d62:	606b      	str	r3, [r5, #4]
	node->next = successor;
   30d64:	602c      	str	r4, [r5, #0]
	prev->next = node;
   30d66:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   30d68:	6065      	str	r5, [r4, #4]
}
   30d6a:	e7f2      	b.n	30d52 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   30d6c:	2400      	movs	r4, #0
   30d6e:	e7d9      	b.n	30d24 <z_impl_k_yield+0x38>
   30d70:	2000d04c 	.word	0x2000d04c

00030d74 <z_tick_sleep>:
{
   30d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30d78:	4604      	mov	r4, r0
   30d7a:	460d      	mov	r5, r1
	if (ticks == 0) {
   30d7c:	ea54 0105 	orrs.w	r1, r4, r5
   30d80:	d037      	beq.n	30df2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   30d82:	f06f 0101 	mvn.w	r1, #1
   30d86:	1a0a      	subs	r2, r1, r0
   30d88:	f04f 31ff 	mov.w	r1, #4294967295
   30d8c:	eb61 0305 	sbc.w	r3, r1, r5
   30d90:	2a01      	cmp	r2, #1
   30d92:	f173 0300 	sbcs.w	r3, r3, #0
   30d96:	db30      	blt.n	30dfa <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   30d98:	f06f 0601 	mvn.w	r6, #1
   30d9c:	1a36      	subs	r6, r6, r0
   30d9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   30da2:	f3ef 8811 	mrs	r8, BASEPRI
   30da6:	f383 8812 	msr	BASEPRI_MAX, r3
   30daa:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   30dae:	4f16      	ldr	r7, [pc, #88]	; (30e08 <z_tick_sleep+0x94>)
   30db0:	68b8      	ldr	r0, [r7, #8]
   30db2:	4b16      	ldr	r3, [pc, #88]	; (30e0c <z_tick_sleep+0x98>)
   30db4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   30db6:	f7ff fe47 	bl	30a48 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   30dba:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   30dbc:	4622      	mov	r2, r4
   30dbe:	462b      	mov	r3, r5
   30dc0:	4913      	ldr	r1, [pc, #76]	; (30e10 <z_tick_sleep+0x9c>)
   30dc2:	3018      	adds	r0, #24
   30dc4:	f000 f904 	bl	30fd0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   30dc8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   30dca:	7b53      	ldrb	r3, [r2, #13]
   30dcc:	f043 0310 	orr.w	r3, r3, #16
   30dd0:	7353      	strb	r3, [r2, #13]
   30dd2:	4640      	mov	r0, r8
   30dd4:	f7f1 f9e0 	bl	22198 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   30dd8:	2500      	movs	r5, #0
   30dda:	f00b fe61 	bl	3caa0 <sys_clock_tick_get_32>
   30dde:	1a34      	subs	r4, r6, r0
   30de0:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   30de4:	2c01      	cmp	r4, #1
   30de6:	f175 0300 	sbcs.w	r3, r5, #0
   30dea:	da0a      	bge.n	30e02 <z_tick_sleep+0x8e>
	return 0;
   30dec:	2000      	movs	r0, #0
}
   30dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   30df2:	f7ff ff7b 	bl	30cec <z_impl_k_yield>
		return 0;
   30df6:	2000      	movs	r0, #0
   30df8:	e7f9      	b.n	30dee <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   30dfa:	f00b fe51 	bl	3caa0 <sys_clock_tick_get_32>
   30dfe:	1906      	adds	r6, r0, r4
   30e00:	e7cd      	b.n	30d9e <z_tick_sleep+0x2a>
		return ticks;
   30e02:	4620      	mov	r0, r4
   30e04:	e7f3      	b.n	30dee <z_tick_sleep+0x7a>
   30e06:	bf00      	nop
   30e08:	2000d04c 	.word	0x2000d04c
   30e0c:	2000d080 	.word	0x2000d080
   30e10:	0003c77b 	.word	0x0003c77b

00030e14 <z_impl_k_sleep>:
{
   30e14:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30e16:	f1b1 3fff 	cmp.w	r1, #4294967295
   30e1a:	bf08      	it	eq
   30e1c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   30e20:	d01a      	beq.n	30e58 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   30e22:	f7ff ffa7 	bl	30d74 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   30e26:	4604      	mov	r4, r0
   30e28:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   30e2a:	0169      	lsls	r1, r5, #5
   30e2c:	0143      	lsls	r3, r0, #5
   30e2e:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   30e32:	1a18      	subs	r0, r3, r0
   30e34:	eb62 0305 	sbc.w	r3, r2, r5
   30e38:	009a      	lsls	r2, r3, #2
   30e3a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   30e3e:	0081      	lsls	r1, r0, #2
   30e40:	4613      	mov	r3, r2
   30e42:	1908      	adds	r0, r1, r4
   30e44:	eb45 0303 	adc.w	r3, r5, r3
   30e48:	00da      	lsls	r2, r3, #3
   30e4a:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   30e4e:	00c1      	lsls	r1, r0, #3
   30e50:	0bc8      	lsrs	r0, r1, #15
   30e52:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   30e56:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   30e58:	4b03      	ldr	r3, [pc, #12]	; (30e68 <z_impl_k_sleep+0x54>)
   30e5a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   30e5c:	f7ff fe84 	bl	30b68 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   30e60:	f04f 30ff 	mov.w	r0, #4294967295
   30e64:	e7f7      	b.n	30e56 <z_impl_k_sleep+0x42>
   30e66:	bf00      	nop
   30e68:	2000d04c 	.word	0x2000d04c

00030e6c <z_impl_z_current_get>:
}
   30e6c:	4b01      	ldr	r3, [pc, #4]	; (30e74 <z_impl_z_current_get+0x8>)
   30e6e:	6898      	ldr	r0, [r3, #8]
   30e70:	4770      	bx	lr
   30e72:	bf00      	nop
   30e74:	2000d04c 	.word	0x2000d04c

00030e78 <z_impl_k_is_preempt_thread>:
   30e78:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   30e7c:	b933      	cbnz	r3, 30e8c <z_impl_k_is_preempt_thread+0x14>
   30e7e:	4b05      	ldr	r3, [pc, #20]	; (30e94 <z_impl_k_is_preempt_thread+0x1c>)
   30e80:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   30e82:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   30e84:	2b7f      	cmp	r3, #127	; 0x7f
   30e86:	d803      	bhi.n	30e90 <z_impl_k_is_preempt_thread+0x18>
   30e88:	2001      	movs	r0, #1
   30e8a:	4770      	bx	lr
   30e8c:	2000      	movs	r0, #0
   30e8e:	4770      	bx	lr
   30e90:	2000      	movs	r0, #0
}
   30e92:	4770      	bx	lr
   30e94:	2000d04c 	.word	0x2000d04c

00030e98 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   30e98:	b538      	push	{r3, r4, r5, lr}
   30e9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   30e9e:	f3ef 8511 	mrs	r5, BASEPRI
   30ea2:	f383 8812 	msr	BASEPRI_MAX, r3
   30ea6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   30eaa:	7b43      	ldrb	r3, [r0, #13]
   30eac:	f013 0f08 	tst.w	r3, #8
   30eb0:	d004      	beq.n	30ebc <z_thread_abort+0x24>
	__asm__ volatile(
   30eb2:	f385 8811 	msr	BASEPRI, r5
   30eb6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   30eba:	bd38      	pop	{r3, r4, r5, pc}
   30ebc:	4604      	mov	r4, r0
	end_thread(thread);
   30ebe:	f7ff febb 	bl	30c38 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   30ec2:	4b08      	ldr	r3, [pc, #32]	; (30ee4 <z_thread_abort+0x4c>)
   30ec4:	689b      	ldr	r3, [r3, #8]
   30ec6:	42a3      	cmp	r3, r4
   30ec8:	d004      	beq.n	30ed4 <z_thread_abort+0x3c>
   30eca:	f385 8811 	msr	BASEPRI, r5
   30ece:	f3bf 8f6f 	isb	sy
   30ed2:	e7f2      	b.n	30eba <z_thread_abort+0x22>
   30ed4:	f3ef 8305 	mrs	r3, IPSR
   30ed8:	2b00      	cmp	r3, #0
   30eda:	d1f6      	bne.n	30eca <z_thread_abort+0x32>
   30edc:	4628      	mov	r0, r5
   30ede:	f7f1 f95b 	bl	22198 <arch_swap>
	return ret;
   30ee2:	e7f2      	b.n	30eca <z_thread_abort+0x32>
   30ee4:	2000d04c 	.word	0x2000d04c

00030ee8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   30ee8:	b5d0      	push	{r4, r6, r7, lr}
   30eea:	b082      	sub	sp, #8
   30eec:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   30eee:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   30ef2:	e9cd 6700 	strd	r6, r7, [sp]
   30ef6:	f7ff fdc3 	bl	30a80 <z_pend_curr>

	if (data != NULL) {
   30efa:	b11c      	cbz	r4, 30f04 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   30efc:	4b02      	ldr	r3, [pc, #8]	; (30f08 <z_sched_wait+0x20>)
   30efe:	689b      	ldr	r3, [r3, #8]
   30f00:	695b      	ldr	r3, [r3, #20]
   30f02:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   30f04:	b002      	add	sp, #8
   30f06:	bdd0      	pop	{r4, r6, r7, pc}
   30f08:	2000d04c 	.word	0x2000d04c

00030f0c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   30f0c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   30f0e:	4806      	ldr	r0, [pc, #24]	; (30f28 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   30f10:	4a06      	ldr	r2, [pc, #24]	; (30f2c <z_data_copy+0x20>)
   30f12:	1a12      	subs	r2, r2, r0
   30f14:	4906      	ldr	r1, [pc, #24]	; (30f30 <z_data_copy+0x24>)
   30f16:	f005 ff25 	bl	36d64 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   30f1a:	4a06      	ldr	r2, [pc, #24]	; (30f34 <z_data_copy+0x28>)
   30f1c:	4906      	ldr	r1, [pc, #24]	; (30f38 <z_data_copy+0x2c>)
   30f1e:	4807      	ldr	r0, [pc, #28]	; (30f3c <z_data_copy+0x30>)
   30f20:	f005 ff20 	bl	36d64 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   30f24:	bd08      	pop	{r3, pc}
   30f26:	bf00      	nop
   30f28:	20000000 	.word	0x20000000
   30f2c:	20000cb8 	.word	0x20000cb8
   30f30:	00040c24 	.word	0x00040c24
   30f34:	00000000 	.word	0x00000000
   30f38:	00040c24 	.word	0x00040c24
   30f3c:	20000000 	.word	0x20000000

00030f40 <first>:
	return list->head == list;
   30f40:	4b03      	ldr	r3, [pc, #12]	; (30f50 <first+0x10>)
   30f42:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30f44:	4298      	cmp	r0, r3
   30f46:	d000      	beq.n	30f4a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   30f48:	4770      	bx	lr
   30f4a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   30f4c:	e7fc      	b.n	30f48 <first+0x8>
   30f4e:	bf00      	nop
   30f50:	20000900 	.word	0x20000900

00030f54 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   30f54:	b130      	cbz	r0, 30f64 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   30f56:	4a04      	ldr	r2, [pc, #16]	; (30f68 <next+0x14>)
   30f58:	6852      	ldr	r2, [r2, #4]
   30f5a:	4290      	cmp	r0, r2
   30f5c:	d001      	beq.n	30f62 <next+0xe>
   30f5e:	6800      	ldr	r0, [r0, #0]
   30f60:	4770      	bx	lr
   30f62:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   30f64:	4770      	bx	lr
   30f66:	bf00      	nop
   30f68:	20000900 	.word	0x20000900

00030f6c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   30f6c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   30f6e:	4b04      	ldr	r3, [pc, #16]	; (30f80 <elapsed+0x14>)
   30f70:	681b      	ldr	r3, [r3, #0]
   30f72:	b10b      	cbz	r3, 30f78 <elapsed+0xc>
   30f74:	2000      	movs	r0, #0
}
   30f76:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   30f78:	f7fd f9ac 	bl	2e2d4 <sys_clock_elapsed>
   30f7c:	e7fb      	b.n	30f76 <elapsed+0xa>
   30f7e:	bf00      	nop
   30f80:	2000d08c 	.word	0x2000d08c

00030f84 <next_timeout>:

static int32_t next_timeout(void)
{
   30f84:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   30f86:	f7ff ffdb 	bl	30f40 <first>
   30f8a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   30f8c:	f7ff ffee 	bl	30f6c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   30f90:	b18c      	cbz	r4, 30fb6 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   30f92:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   30f96:	1a12      	subs	r2, r2, r0
   30f98:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   30f9c:	2a01      	cmp	r2, #1
   30f9e:	f173 0100 	sbcs.w	r1, r3, #0
   30fa2:	db11      	blt.n	30fc8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   30fa4:	4610      	mov	r0, r2
   30fa6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   30faa:	f173 0300 	sbcs.w	r3, r3, #0
   30fae:	db04      	blt.n	30fba <next_timeout+0x36>
   30fb0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   30fb4:	e001      	b.n	30fba <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   30fb6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   30fba:	4b04      	ldr	r3, [pc, #16]	; (30fcc <next_timeout+0x48>)
   30fbc:	691b      	ldr	r3, [r3, #16]
   30fbe:	b113      	cbz	r3, 30fc6 <next_timeout+0x42>
   30fc0:	4283      	cmp	r3, r0
   30fc2:	da00      	bge.n	30fc6 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   30fc4:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   30fc6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   30fc8:	2000      	movs	r0, #0
   30fca:	e7f6      	b.n	30fba <next_timeout+0x36>
   30fcc:	2000d04c 	.word	0x2000d04c

00030fd0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   30fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30fd4:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
   30fda:	bf08      	it	eq
   30fdc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   30fe0:	f000 8096 	beq.w	31110 <z_add_timeout+0x140>
   30fe4:	4682      	mov	sl, r0
   30fe6:	4614      	mov	r4, r2
   30fe8:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   30fea:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   30fec:	2300      	movs	r3, #0
	__asm__ volatile(
   30fee:	f04f 0240 	mov.w	r2, #64	; 0x40
   30ff2:	f3ef 8b11 	mrs	fp, BASEPRI
   30ff6:	f382 8812 	msr	BASEPRI_MAX, r2
   30ffa:	f3bf 8f6f 	isb	sy
   30ffe:	e02e      	b.n	3105e <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   31000:	2201      	movs	r2, #1
   31002:	2300      	movs	r3, #0
   31004:	e04b      	b.n	3109e <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   31006:	f7ff ffb1 	bl	30f6c <elapsed>
   3100a:	1822      	adds	r2, r4, r0
   3100c:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   31010:	3201      	adds	r2, #1
   31012:	f143 0300 	adc.w	r3, r3, #0
   31016:	f8ca 2010 	str.w	r2, [sl, #16]
   3101a:	f8ca 3014 	str.w	r3, [sl, #20]
   3101e:	e042      	b.n	310a6 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   31020:	9b00      	ldr	r3, [sp, #0]
   31022:	1ac2      	subs	r2, r0, r3
   31024:	9b01      	ldr	r3, [sp, #4]
   31026:	eb61 0303 	sbc.w	r3, r1, r3
   3102a:	f8cc 2010 	str.w	r2, [ip, #16]
   3102e:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   31032:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   31036:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   3103a:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   3103e:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   31042:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   31046:	f1bc 0f00 	cmp.w	ip, #0
   3104a:	d049      	beq.n	310e0 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3104c:	f7ff ff78 	bl	30f40 <first>
   31050:	4582      	cmp	sl, r0
   31052:	d050      	beq.n	310f6 <z_add_timeout+0x126>
	__asm__ volatile(
   31054:	f38b 8811 	msr	BASEPRI, fp
   31058:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   3105c:	2301      	movs	r3, #1
   3105e:	2b00      	cmp	r3, #0
   31060:	d156      	bne.n	31110 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   31062:	f06f 0301 	mvn.w	r3, #1
   31066:	ebb3 0804 	subs.w	r8, r3, r4
   3106a:	f04f 30ff 	mov.w	r0, #4294967295
   3106e:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   31072:	f1b8 0f00 	cmp.w	r8, #0
   31076:	f179 0300 	sbcs.w	r3, r9, #0
   3107a:	dbc4      	blt.n	31006 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   3107c:	4a26      	ldr	r2, [pc, #152]	; (31118 <z_add_timeout+0x148>)
   3107e:	6813      	ldr	r3, [r2, #0]
   31080:	6852      	ldr	r2, [r2, #4]
   31082:	18e3      	adds	r3, r4, r3
   31084:	eb45 0202 	adc.w	r2, r5, r2
   31088:	f06f 0101 	mvn.w	r1, #1
   3108c:	1ace      	subs	r6, r1, r3
   3108e:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   31092:	4632      	mov	r2, r6
   31094:	463b      	mov	r3, r7
   31096:	2e01      	cmp	r6, #1
   31098:	f177 0100 	sbcs.w	r1, r7, #0
   3109c:	dbb0      	blt.n	31000 <z_add_timeout+0x30>
   3109e:	f8ca 2010 	str.w	r2, [sl, #16]
   310a2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   310a6:	f7ff ff4b 	bl	30f40 <first>
   310aa:	4684      	mov	ip, r0
   310ac:	f1bc 0f00 	cmp.w	ip, #0
   310b0:	d0c9      	beq.n	31046 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   310b2:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   310b6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   310ba:	e9cd 2300 	strd	r2, r3, [sp]
   310be:	4282      	cmp	r2, r0
   310c0:	418b      	sbcs	r3, r1
   310c2:	dbad      	blt.n	31020 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   310c4:	9b00      	ldr	r3, [sp, #0]
   310c6:	1a1a      	subs	r2, r3, r0
   310c8:	9b01      	ldr	r3, [sp, #4]
   310ca:	eb63 0301 	sbc.w	r3, r3, r1
   310ce:	f8ca 2010 	str.w	r2, [sl, #16]
   310d2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   310d6:	4660      	mov	r0, ip
   310d8:	f7ff ff3c 	bl	30f54 <next>
   310dc:	4684      	mov	ip, r0
   310de:	e7e5      	b.n	310ac <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   310e0:	4b0e      	ldr	r3, [pc, #56]	; (3111c <z_add_timeout+0x14c>)
   310e2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   310e4:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   310e8:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   310ec:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   310f0:	f8c3 a004 	str.w	sl, [r3, #4]
}
   310f4:	e7aa      	b.n	3104c <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   310f6:	f7ff ff45 	bl	30f84 <next_timeout>

			if (next_time == 0 ||
   310fa:	4603      	mov	r3, r0
   310fc:	b118      	cbz	r0, 31106 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   310fe:	4a08      	ldr	r2, [pc, #32]	; (31120 <z_add_timeout+0x150>)
   31100:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   31102:	4282      	cmp	r2, r0
   31104:	d0a6      	beq.n	31054 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   31106:	2100      	movs	r1, #0
   31108:	4618      	mov	r0, r3
   3110a:	f7fd f8af 	bl	2e26c <sys_clock_set_timeout>
   3110e:	e7a1      	b.n	31054 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   31110:	b003      	add	sp, #12
   31112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31116:	bf00      	nop
   31118:	20006eb8 	.word	0x20006eb8
   3111c:	20000900 	.word	0x20000900
   31120:	2000d04c 	.word	0x2000d04c

00031124 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   31124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31126:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   31128:	f7ff fbe4 	bl	308f4 <z_time_slice>
	__asm__ volatile(
   3112c:	f04f 0340 	mov.w	r3, #64	; 0x40
   31130:	f3ef 8511 	mrs	r5, BASEPRI
   31134:	f383 8812 	msr	BASEPRI_MAX, r3
   31138:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3113c:	4b28      	ldr	r3, [pc, #160]	; (311e0 <sys_clock_announce+0xbc>)
   3113e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   31140:	f7ff fefe 	bl	30f40 <first>
   31144:	4604      	mov	r4, r0
   31146:	b350      	cbz	r0, 3119e <sys_clock_announce+0x7a>
   31148:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   3114c:	4b24      	ldr	r3, [pc, #144]	; (311e0 <sys_clock_announce+0xbc>)
   3114e:	681b      	ldr	r3, [r3, #0]
   31150:	17d9      	asrs	r1, r3, #31
   31152:	42b3      	cmp	r3, r6
   31154:	eb71 0207 	sbcs.w	r2, r1, r7
   31158:	db21      	blt.n	3119e <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   3115a:	4a22      	ldr	r2, [pc, #136]	; (311e4 <sys_clock_announce+0xc0>)
   3115c:	e9d2 0100 	ldrd	r0, r1, [r2]
   31160:	1980      	adds	r0, r0, r6
   31162:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   31166:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   3116a:	1b9b      	subs	r3, r3, r6
   3116c:	4a1c      	ldr	r2, [pc, #112]	; (311e0 <sys_clock_announce+0xbc>)
   3116e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   31170:	2200      	movs	r2, #0
   31172:	2300      	movs	r3, #0
   31174:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   31178:	4620      	mov	r0, r4
   3117a:	f00b fc1b 	bl	3c9b4 <remove_timeout>
	__asm__ volatile(
   3117e:	f385 8811 	msr	BASEPRI, r5
   31182:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   31186:	68a3      	ldr	r3, [r4, #8]
   31188:	4620      	mov	r0, r4
   3118a:	4798      	blx	r3
	__asm__ volatile(
   3118c:	f04f 0340 	mov.w	r3, #64	; 0x40
   31190:	f3ef 8511 	mrs	r5, BASEPRI
   31194:	f383 8812 	msr	BASEPRI_MAX, r3
   31198:	f3bf 8f6f 	isb	sy
   3119c:	e7d0      	b.n	31140 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   3119e:	b144      	cbz	r4, 311b2 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   311a0:	4b0f      	ldr	r3, [pc, #60]	; (311e0 <sys_clock_announce+0xbc>)
   311a2:	6819      	ldr	r1, [r3, #0]
   311a4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   311a8:	1a52      	subs	r2, r2, r1
   311aa:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   311ae:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   311b2:	480c      	ldr	r0, [pc, #48]	; (311e4 <sys_clock_announce+0xc0>)
   311b4:	490a      	ldr	r1, [pc, #40]	; (311e0 <sys_clock_announce+0xbc>)
   311b6:	680c      	ldr	r4, [r1, #0]
   311b8:	e9d0 2300 	ldrd	r2, r3, [r0]
   311bc:	1912      	adds	r2, r2, r4
   311be:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   311c2:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   311c6:	2400      	movs	r4, #0
   311c8:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   311ca:	f7ff fedb 	bl	30f84 <next_timeout>
   311ce:	4621      	mov	r1, r4
   311d0:	f7fd f84c 	bl	2e26c <sys_clock_set_timeout>
	__asm__ volatile(
   311d4:	f385 8811 	msr	BASEPRI, r5
   311d8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   311dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   311de:	bf00      	nop
   311e0:	2000d08c 	.word	0x2000d08c
   311e4:	20006eb8 	.word	0x20006eb8

000311e8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   311e8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   311ea:	2100      	movs	r1, #0
	__asm__ volatile(
   311ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   311f0:	f3ef 8411 	mrs	r4, BASEPRI
   311f4:	f383 8812 	msr	BASEPRI_MAX, r3
   311f8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   311fc:	2200      	movs	r2, #0
   311fe:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   31200:	b969      	cbnz	r1, 3121e <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   31202:	f7fd f867 	bl	2e2d4 <sys_clock_elapsed>
   31206:	4b07      	ldr	r3, [pc, #28]	; (31224 <sys_clock_tick_get+0x3c>)
   31208:	e9d3 2300 	ldrd	r2, r3, [r3]
   3120c:	1812      	adds	r2, r2, r0
   3120e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   31212:	f384 8811 	msr	BASEPRI, r4
   31216:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   3121a:	2101      	movs	r1, #1
   3121c:	e7f0      	b.n	31200 <sys_clock_tick_get+0x18>
	}
	return t;
}
   3121e:	4610      	mov	r0, r2
   31220:	4619      	mov	r1, r3
   31222:	bd10      	pop	{r4, pc}
   31224:	20006eb8 	.word	0x20006eb8

00031228 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   31228:	b570      	push	{r4, r5, r6, lr}
   3122a:	4604      	mov	r4, r0
	__asm__ volatile(
   3122c:	f04f 0340 	mov.w	r3, #64	; 0x40
   31230:	f3ef 8611 	mrs	r6, BASEPRI
   31234:	f383 8812 	msr	BASEPRI_MAX, r3
   31238:	f3bf 8f6f 	isb	sy
   3123c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   3123e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   31242:	ea52 0103 	orrs.w	r1, r2, r3
   31246:	d005      	beq.n	31254 <z_timer_expiration_handler+0x2c>
   31248:	f1b3 3fff 	cmp.w	r3, #4294967295
   3124c:	bf08      	it	eq
   3124e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   31252:	d127      	bne.n	312a4 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   31254:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31256:	3301      	adds	r3, #1
   31258:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   3125a:	6a23      	ldr	r3, [r4, #32]
   3125c:	b173      	cbz	r3, 3127c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   3125e:	f386 8811 	msr	BASEPRI, r6
   31262:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   31266:	6a23      	ldr	r3, [r4, #32]
   31268:	4620      	mov	r0, r4
   3126a:	4798      	blx	r3
	__asm__ volatile(
   3126c:	f04f 0340 	mov.w	r3, #64	; 0x40
   31270:	f3ef 8511 	mrs	r5, BASEPRI
   31274:	f383 8812 	msr	BASEPRI_MAX, r3
   31278:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   3127c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   31280:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31282:	42a3      	cmp	r3, r4
   31284:	d012      	beq.n	312ac <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   31286:	b18c      	cbz	r4, 312ac <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   31288:	4620      	mov	r0, r4
   3128a:	f00b f9f4 	bl	3c676 <z_unpend_thread_no_timeout>
   3128e:	2300      	movs	r3, #0
   31290:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	__asm__ volatile(
   31294:	f385 8811 	msr	BASEPRI, r5
   31298:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   3129c:	4620      	mov	r0, r4
   3129e:	f00b fa50 	bl	3c742 <z_ready_thread>
}
   312a2:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   312a4:	4904      	ldr	r1, [pc, #16]	; (312b8 <z_timer_expiration_handler+0x90>)
   312a6:	f7ff fe93 	bl	30fd0 <z_add_timeout>
   312aa:	e7d3      	b.n	31254 <z_timer_expiration_handler+0x2c>
   312ac:	f385 8811 	msr	BASEPRI, r5
   312b0:	f3bf 8f6f 	isb	sy
		return;
   312b4:	e7f5      	b.n	312a2 <z_timer_expiration_handler+0x7a>
   312b6:	bf00      	nop
   312b8:	00031229 	.word	0x00031229

000312bc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   312bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   312c0:	b087      	sub	sp, #28
   312c2:	4614      	mov	r4, r2
   312c4:	461d      	mov	r5, r3
   312c6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   312ca:	f1b3 3fff 	cmp.w	r3, #4294967295
   312ce:	bf08      	it	eq
   312d0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   312d4:	d035      	beq.n	31342 <z_impl_k_timer_start+0x86>
   312d6:	4606      	mov	r6, r0
   312d8:	4613      	mov	r3, r2
   312da:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   312dc:	f1b9 3fff 	cmp.w	r9, #4294967295
   312e0:	bf08      	it	eq
   312e2:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   312e6:	d012      	beq.n	3130e <z_impl_k_timer_start+0x52>
   312e8:	ea58 0109 	orrs.w	r1, r8, r9
   312ec:	d00f      	beq.n	3130e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   312ee:	f06f 0701 	mvn.w	r7, #1
   312f2:	ebb7 0708 	subs.w	r7, r7, r8
   312f6:	9702      	str	r7, [sp, #8]
   312f8:	f04f 31ff 	mov.w	r1, #4294967295
   312fc:	eb61 0709 	sbc.w	r7, r1, r9
   31300:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   31302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   31306:	2800      	cmp	r0, #0
   31308:	f171 0100 	sbcs.w	r1, r1, #0
   3130c:	db1c      	blt.n	31348 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   3130e:	f06f 0101 	mvn.w	r1, #1
   31312:	ebb1 0a03 	subs.w	sl, r1, r3
   31316:	f04f 31ff 	mov.w	r1, #4294967295
   3131a:	eb61 0b02 	sbc.w	fp, r1, r2
   3131e:	f1ba 0f00 	cmp.w	sl, #0
   31322:	f17b 0100 	sbcs.w	r1, fp, #0
   31326:	db23      	blt.n	31370 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   31328:	4630      	mov	r0, r6
   3132a:	f00b fb5a 	bl	3c9e2 <z_abort_timeout>
	timer->period = period;
   3132e:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   31332:	2300      	movs	r3, #0
   31334:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   31336:	4622      	mov	r2, r4
   31338:	462b      	mov	r3, r5
   3133a:	4917      	ldr	r1, [pc, #92]	; (31398 <z_impl_k_timer_start+0xdc>)
   3133c:	4630      	mov	r0, r6
   3133e:	f7ff fe47 	bl	30fd0 <z_add_timeout>
		     duration);
}
   31342:	b007      	add	sp, #28
   31344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   31348:	f118 31ff 	adds.w	r1, r8, #4294967295
   3134c:	9104      	str	r1, [sp, #16]
   3134e:	f149 31ff 	adc.w	r1, r9, #4294967295
   31352:	9105      	str	r1, [sp, #20]
   31354:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   31358:	4638      	mov	r0, r7
   3135a:	4641      	mov	r1, r8
   3135c:	2f01      	cmp	r7, #1
   3135e:	f178 0700 	sbcs.w	r7, r8, #0
   31362:	db02      	blt.n	3136a <z_impl_k_timer_start+0xae>
   31364:	4680      	mov	r8, r0
   31366:	4689      	mov	r9, r1
   31368:	e7d1      	b.n	3130e <z_impl_k_timer_start+0x52>
   3136a:	2001      	movs	r0, #1
   3136c:	2100      	movs	r1, #0
   3136e:	e7f9      	b.n	31364 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   31370:	f113 33ff 	adds.w	r3, r3, #4294967295
   31374:	9300      	str	r3, [sp, #0]
   31376:	f142 33ff 	adc.w	r3, r2, #4294967295
   3137a:	9301      	str	r3, [sp, #4]
   3137c:	e9dd 0100 	ldrd	r0, r1, [sp]
   31380:	4602      	mov	r2, r0
   31382:	460b      	mov	r3, r1
   31384:	2800      	cmp	r0, #0
   31386:	f171 0100 	sbcs.w	r1, r1, #0
   3138a:	db02      	blt.n	31392 <z_impl_k_timer_start+0xd6>
   3138c:	4614      	mov	r4, r2
   3138e:	461d      	mov	r5, r3
   31390:	e7ca      	b.n	31328 <z_impl_k_timer_start+0x6c>
   31392:	2200      	movs	r2, #0
   31394:	4613      	mov	r3, r2
   31396:	e7f9      	b.n	3138c <z_impl_k_timer_start+0xd0>
   31398:	00031229 	.word	0x00031229

0003139c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   3139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   313a0:	b08d      	sub	sp, #52	; 0x34
   313a2:	4605      	mov	r5, r0
   313a4:	9107      	str	r1, [sp, #28]
   313a6:	9202      	str	r2, [sp, #8]
   313a8:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   313aa:	4ba4      	ldr	r3, [pc, #656]	; (3163c <z_impl_k_poll+0x2a0>)
   313ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
   313b0:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   313b4:	2301      	movs	r3, #1
   313b6:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   313ba:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   313be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   313c2:	4613      	mov	r3, r2
   313c4:	430b      	orrs	r3, r1
   313c6:	bf0c      	ite	eq
   313c8:	2301      	moveq	r3, #1
   313ca:	2300      	movne	r3, #0
   313cc:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   313ce:	2600      	movs	r6, #0
	int events_registered = 0;
   313d0:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   313d2:	e02e      	b.n	31432 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   313d4:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   313d6:	689b      	ldr	r3, [r3, #8]
   313d8:	b1c3      	cbz	r3, 3140c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   313da:	2302      	movs	r3, #2
   313dc:	9305      	str	r3, [sp, #20]
			return true;
   313de:	2301      	movs	r3, #1
   313e0:	e014      	b.n	3140c <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   313e2:	6923      	ldr	r3, [r4, #16]
	return list->head;
   313e4:	681b      	ldr	r3, [r3, #0]
   313e6:	b18b      	cbz	r3, 3140c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   313e8:	2304      	movs	r3, #4
   313ea:	9305      	str	r3, [sp, #20]
			return true;
   313ec:	2301      	movs	r3, #1
   313ee:	e00d      	b.n	3140c <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   313f0:	6923      	ldr	r3, [r4, #16]
   313f2:	689b      	ldr	r3, [r3, #8]
   313f4:	b153      	cbz	r3, 3140c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   313f6:	2301      	movs	r3, #1
   313f8:	9305      	str	r3, [sp, #20]
   313fa:	e007      	b.n	3140c <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   313fc:	6923      	ldr	r3, [r4, #16]
   313fe:	6a1b      	ldr	r3, [r3, #32]
   31400:	b123      	cbz	r3, 3140c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   31402:	2310      	movs	r3, #16
   31404:	9305      	str	r3, [sp, #20]
			return true;
   31406:	2301      	movs	r3, #1
   31408:	e000      	b.n	3140c <z_impl_k_poll+0x70>
	switch (event->type) {
   3140a:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   3140c:	2b00      	cmp	r3, #0
   3140e:	d03d      	beq.n	3148c <z_impl_k_poll+0xf0>
	event->poller = NULL;
   31410:	2100      	movs	r1, #0
   31412:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   31414:	68e3      	ldr	r3, [r4, #12]
   31416:	f3c3 3245 	ubfx	r2, r3, #13, #6
   3141a:	9805      	ldr	r0, [sp, #20]
   3141c:	4302      	orrs	r2, r0
   3141e:	f362 3352 	bfi	r3, r2, #13, #6
   31422:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   31424:	7039      	strb	r1, [r7, #0]
   31426:	9b08      	ldr	r3, [sp, #32]
   31428:	f383 8811 	msr	BASEPRI, r3
   3142c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   31430:	3601      	adds	r6, #1
   31432:	9b07      	ldr	r3, [sp, #28]
   31434:	42b3      	cmp	r3, r6
   31436:	f340 81bf 	ble.w	317b8 <z_impl_k_poll+0x41c>
	__asm__ volatile(
   3143a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3143e:	f3ef 8211 	mrs	r2, BASEPRI
   31442:	f383 8812 	msr	BASEPRI_MAX, r3
   31446:	f3bf 8f6f 	isb	sy
   3144a:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   3144c:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   31450:	00a3      	lsls	r3, r4, #2
   31452:	9309      	str	r3, [sp, #36]	; 0x24
   31454:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   31458:	7b63      	ldrb	r3, [r4, #13]
   3145a:	f003 031f 	and.w	r3, r3, #31
   3145e:	3b01      	subs	r3, #1
   31460:	2b07      	cmp	r3, #7
   31462:	d8d2      	bhi.n	3140a <z_impl_k_poll+0x6e>
   31464:	a201      	add	r2, pc, #4	; (adr r2, 3146c <z_impl_k_poll+0xd0>)
   31466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3146a:	bf00      	nop
   3146c:	000313f1 	.word	0x000313f1
   31470:	000313d5 	.word	0x000313d5
   31474:	0003140b 	.word	0x0003140b
   31478:	000313e3 	.word	0x000313e3
   3147c:	0003140b 	.word	0x0003140b
   31480:	0003140b 	.word	0x0003140b
   31484:	0003140b 	.word	0x0003140b
   31488:	000313fd 	.word	0x000313fd
		} else if (!just_check && poller->is_polling) {
   3148c:	9b06      	ldr	r3, [sp, #24]
   3148e:	2b00      	cmp	r3, #0
   31490:	d1c9      	bne.n	31426 <z_impl_k_poll+0x8a>
   31492:	783b      	ldrb	r3, [r7, #0]
   31494:	2b00      	cmp	r3, #0
   31496:	d0c6      	beq.n	31426 <z_impl_k_poll+0x8a>
	switch (event->type) {
   31498:	7b63      	ldrb	r3, [r4, #13]
   3149a:	f003 031f 	and.w	r3, r3, #31
   3149e:	3b01      	subs	r3, #1
   314a0:	2b07      	cmp	r3, #7
   314a2:	d846      	bhi.n	31532 <z_impl_k_poll+0x196>
   314a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   314a8:	000800cc 	.word	0x000800cc
   314ac:	006a0045 	.word	0x006a0045
   314b0:	00450045 	.word	0x00450045
   314b4:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   314b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
   314bc:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   314c0:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   314c4:	4598      	cmp	r8, r3
   314c6:	d02b      	beq.n	31520 <z_impl_k_poll+0x184>
   314c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   314cc:	b343      	cbz	r3, 31520 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   314ce:	6898      	ldr	r0, [r3, #8]
   314d0:	f00b fb47 	bl	3cb62 <poller_thread>
   314d4:	900b      	str	r0, [sp, #44]	; 0x2c
   314d6:	4638      	mov	r0, r7
   314d8:	f00b fb43 	bl	3cb62 <poller_thread>
   314dc:	4601      	mov	r1, r0
   314de:	900a      	str	r0, [sp, #40]	; 0x28
   314e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   314e2:	f00b f8be 	bl	3c662 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   314e6:	2800      	cmp	r0, #0
   314e8:	dc1a      	bgt.n	31520 <z_impl_k_poll+0x184>
	return list->head == list;
   314ea:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   314ee:	45d0      	cmp	r8, sl
   314f0:	d02f      	beq.n	31552 <z_impl_k_poll+0x1b6>
   314f2:	4653      	mov	r3, sl
   314f4:	46a2      	mov	sl, r4
   314f6:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   314f8:	b38c      	cbz	r4, 3155e <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   314fa:	68a0      	ldr	r0, [r4, #8]
   314fc:	f00b fb31 	bl	3cb62 <poller_thread>
   31500:	4601      	mov	r1, r0
   31502:	980a      	ldr	r0, [sp, #40]	; 0x28
   31504:	f00b f8ad 	bl	3c662 <z_sched_prio_cmp>
   31508:	2800      	cmp	r0, #0
   3150a:	dc16      	bgt.n	3153a <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3150c:	b34c      	cbz	r4, 31562 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   3150e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   31512:	429c      	cmp	r4, r3
   31514:	d030      	beq.n	31578 <z_impl_k_poll+0x1dc>
   31516:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   31518:	2c00      	cmp	r4, #0
   3151a:	d1ed      	bne.n	314f8 <z_impl_k_poll+0x15c>
   3151c:	4654      	mov	r4, sl
   3151e:	e021      	b.n	31564 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   31520:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   31524:	9a09      	ldr	r2, [sp, #36]	; 0x24
   31526:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   3152a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   3152c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3152e:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   31532:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   31534:	f10b 0b01 	add.w	fp, fp, #1
   31538:	e775      	b.n	31426 <z_impl_k_poll+0x8a>
   3153a:	4623      	mov	r3, r4
   3153c:	4654      	mov	r4, sl
   3153e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   31540:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   31542:	6063      	str	r3, [r4, #4]
	node->next = successor;
   31544:	9a09      	ldr	r2, [sp, #36]	; 0x24
   31546:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   3154a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3154c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   31550:	e7ef      	b.n	31532 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   31552:	f04f 0a00 	mov.w	sl, #0
   31556:	4653      	mov	r3, sl
   31558:	46a2      	mov	sl, r4
   3155a:	461c      	mov	r4, r3
   3155c:	e7cc      	b.n	314f8 <z_impl_k_poll+0x15c>
   3155e:	4654      	mov	r4, sl
   31560:	e000      	b.n	31564 <z_impl_k_poll+0x1c8>
   31562:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   31564:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   31568:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3156a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   3156e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   31570:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31572:	f8c8 4004 	str.w	r4, [r8, #4]
}
   31576:	e7dc      	b.n	31532 <z_impl_k_poll+0x196>
   31578:	4654      	mov	r4, sl
   3157a:	e7f3      	b.n	31564 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   3157c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   31580:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   31584:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   31588:	4598      	cmp	r8, r3
   3158a:	d02b      	beq.n	315e4 <z_impl_k_poll+0x248>
   3158c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   31590:	b343      	cbz	r3, 315e4 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31592:	6898      	ldr	r0, [r3, #8]
   31594:	f00b fae5 	bl	3cb62 <poller_thread>
   31598:	900b      	str	r0, [sp, #44]	; 0x2c
   3159a:	4638      	mov	r0, r7
   3159c:	f00b fae1 	bl	3cb62 <poller_thread>
   315a0:	4601      	mov	r1, r0
   315a2:	900a      	str	r0, [sp, #40]	; 0x28
   315a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   315a6:	f00b f85c 	bl	3c662 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   315aa:	2800      	cmp	r0, #0
   315ac:	dc1a      	bgt.n	315e4 <z_impl_k_poll+0x248>
	return list->head == list;
   315ae:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   315b2:	45d0      	cmp	r8, sl
   315b4:	d02c      	beq.n	31610 <z_impl_k_poll+0x274>
   315b6:	4653      	mov	r3, sl
   315b8:	46a2      	mov	sl, r4
   315ba:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   315bc:	b374      	cbz	r4, 3161c <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   315be:	68a0      	ldr	r0, [r4, #8]
   315c0:	f00b facf 	bl	3cb62 <poller_thread>
   315c4:	4601      	mov	r1, r0
   315c6:	980a      	ldr	r0, [sp, #40]	; 0x28
   315c8:	f00b f84b 	bl	3c662 <z_sched_prio_cmp>
   315cc:	2800      	cmp	r0, #0
   315ce:	dc13      	bgt.n	315f8 <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   315d0:	b334      	cbz	r4, 31620 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   315d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   315d6:	429c      	cmp	r4, r3
   315d8:	d02d      	beq.n	31636 <z_impl_k_poll+0x29a>
   315da:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   315dc:	2c00      	cmp	r4, #0
   315de:	d1ed      	bne.n	315bc <z_impl_k_poll+0x220>
   315e0:	4654      	mov	r4, sl
   315e2:	e01e      	b.n	31622 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   315e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   315e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   315ea:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   315ee:	6063      	str	r3, [r4, #4]
	tail->next = node;
   315f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   315f2:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   315f6:	e79c      	b.n	31532 <z_impl_k_poll+0x196>
   315f8:	4623      	mov	r3, r4
   315fa:	4654      	mov	r4, sl
   315fc:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   315fe:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   31600:	6063      	str	r3, [r4, #4]
	node->next = successor;
   31602:	9a09      	ldr	r2, [sp, #36]	; 0x24
   31604:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   31608:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3160a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   3160e:	e790      	b.n	31532 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   31610:	f04f 0a00 	mov.w	sl, #0
   31614:	4653      	mov	r3, sl
   31616:	46a2      	mov	sl, r4
   31618:	461c      	mov	r4, r3
   3161a:	e7cf      	b.n	315bc <z_impl_k_poll+0x220>
   3161c:	4654      	mov	r4, sl
   3161e:	e000      	b.n	31622 <z_impl_k_poll+0x286>
   31620:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   31622:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   31626:	9a09      	ldr	r2, [sp, #36]	; 0x24
   31628:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   3162c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   3162e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31630:	f8c8 4004 	str.w	r4, [r8, #4]
}
   31634:	e77d      	b.n	31532 <z_impl_k_poll+0x196>
   31636:	4654      	mov	r4, sl
   31638:	e7f3      	b.n	31622 <z_impl_k_poll+0x286>
   3163a:	bf00      	nop
   3163c:	2000d04c 	.word	0x2000d04c
		add_event(&event->signal->poll_events, event, poller);
   31640:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   31644:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   31648:	4598      	cmp	r8, r3
   3164a:	d02b      	beq.n	316a4 <z_impl_k_poll+0x308>
   3164c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   31650:	b343      	cbz	r3, 316a4 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31652:	6898      	ldr	r0, [r3, #8]
   31654:	f00b fa85 	bl	3cb62 <poller_thread>
   31658:	4682      	mov	sl, r0
   3165a:	4638      	mov	r0, r7
   3165c:	f00b fa81 	bl	3cb62 <poller_thread>
   31660:	4601      	mov	r1, r0
   31662:	900a      	str	r0, [sp, #40]	; 0x28
   31664:	4650      	mov	r0, sl
   31666:	f00a fffc 	bl	3c662 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3166a:	2800      	cmp	r0, #0
   3166c:	dc1a      	bgt.n	316a4 <z_impl_k_poll+0x308>
	return list->head == list;
   3166e:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31672:	45d0      	cmp	r8, sl
   31674:	d02c      	beq.n	316d0 <z_impl_k_poll+0x334>
   31676:	4653      	mov	r3, sl
   31678:	46a2      	mov	sl, r4
   3167a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3167c:	b374      	cbz	r4, 316dc <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   3167e:	68a0      	ldr	r0, [r4, #8]
   31680:	f00b fa6f 	bl	3cb62 <poller_thread>
   31684:	4601      	mov	r1, r0
   31686:	980a      	ldr	r0, [sp, #40]	; 0x28
   31688:	f00a ffeb 	bl	3c662 <z_sched_prio_cmp>
   3168c:	2800      	cmp	r0, #0
   3168e:	dc13      	bgt.n	316b8 <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   31690:	b334      	cbz	r4, 316e0 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   31692:	f8d8 3004 	ldr.w	r3, [r8, #4]
   31696:	429c      	cmp	r4, r3
   31698:	d02d      	beq.n	316f6 <z_impl_k_poll+0x35a>
   3169a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3169c:	2c00      	cmp	r4, #0
   3169e:	d1ed      	bne.n	3167c <z_impl_k_poll+0x2e0>
   316a0:	4654      	mov	r4, sl
   316a2:	e01e      	b.n	316e2 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   316a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   316a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   316aa:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   316ae:	6063      	str	r3, [r4, #4]
	tail->next = node;
   316b0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   316b2:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   316b6:	e73c      	b.n	31532 <z_impl_k_poll+0x196>
   316b8:	4623      	mov	r3, r4
   316ba:	4654      	mov	r4, sl
   316bc:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   316be:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   316c0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   316c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   316c4:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   316c8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   316ca:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   316ce:	e730      	b.n	31532 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   316d0:	f04f 0a00 	mov.w	sl, #0
   316d4:	4653      	mov	r3, sl
   316d6:	46a2      	mov	sl, r4
   316d8:	461c      	mov	r4, r3
   316da:	e7cf      	b.n	3167c <z_impl_k_poll+0x2e0>
   316dc:	4654      	mov	r4, sl
   316de:	e000      	b.n	316e2 <z_impl_k_poll+0x346>
   316e0:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   316e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   316e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   316e8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   316ec:	6063      	str	r3, [r4, #4]
	tail->next = node;
   316ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   316f0:	f8c8 4004 	str.w	r4, [r8, #4]
}
   316f4:	e71d      	b.n	31532 <z_impl_k_poll+0x196>
   316f6:	4654      	mov	r4, sl
   316f8:	e7f3      	b.n	316e2 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   316fa:	f8d4 a010 	ldr.w	sl, [r4, #16]
   316fe:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   31702:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   31706:	4598      	cmp	r8, r3
   31708:	d02b      	beq.n	31762 <z_impl_k_poll+0x3c6>
   3170a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   3170e:	b343      	cbz	r3, 31762 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31710:	6898      	ldr	r0, [r3, #8]
   31712:	f00b fa26 	bl	3cb62 <poller_thread>
   31716:	900b      	str	r0, [sp, #44]	; 0x2c
   31718:	4638      	mov	r0, r7
   3171a:	f00b fa22 	bl	3cb62 <poller_thread>
   3171e:	4601      	mov	r1, r0
   31720:	900a      	str	r0, [sp, #40]	; 0x28
   31722:	980b      	ldr	r0, [sp, #44]	; 0x2c
   31724:	f00a ff9d 	bl	3c662 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   31728:	2800      	cmp	r0, #0
   3172a:	dc1a      	bgt.n	31762 <z_impl_k_poll+0x3c6>
	return list->head == list;
   3172c:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31730:	45d0      	cmp	r8, sl
   31732:	d02c      	beq.n	3178e <z_impl_k_poll+0x3f2>
   31734:	4653      	mov	r3, sl
   31736:	46a2      	mov	sl, r4
   31738:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3173a:	b374      	cbz	r4, 3179a <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   3173c:	68a0      	ldr	r0, [r4, #8]
   3173e:	f00b fa10 	bl	3cb62 <poller_thread>
   31742:	4601      	mov	r1, r0
   31744:	980a      	ldr	r0, [sp, #40]	; 0x28
   31746:	f00a ff8c 	bl	3c662 <z_sched_prio_cmp>
   3174a:	2800      	cmp	r0, #0
   3174c:	dc13      	bgt.n	31776 <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3174e:	b334      	cbz	r4, 3179e <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   31750:	f8d8 3004 	ldr.w	r3, [r8, #4]
   31754:	429c      	cmp	r4, r3
   31756:	d02d      	beq.n	317b4 <z_impl_k_poll+0x418>
   31758:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3175a:	2c00      	cmp	r4, #0
   3175c:	d1ed      	bne.n	3173a <z_impl_k_poll+0x39e>
   3175e:	4654      	mov	r4, sl
   31760:	e01e      	b.n	317a0 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   31762:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   31766:	9a09      	ldr	r2, [sp, #36]	; 0x24
   31768:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   3176c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   3176e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31770:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   31774:	e6dd      	b.n	31532 <z_impl_k_poll+0x196>
   31776:	4623      	mov	r3, r4
   31778:	4654      	mov	r4, sl
   3177a:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   3177c:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   3177e:	6063      	str	r3, [r4, #4]
	node->next = successor;
   31780:	9a09      	ldr	r2, [sp, #36]	; 0x24
   31782:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   31786:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   31788:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   3178c:	e6d1      	b.n	31532 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3178e:	f04f 0a00 	mov.w	sl, #0
   31792:	4653      	mov	r3, sl
   31794:	46a2      	mov	sl, r4
   31796:	461c      	mov	r4, r3
   31798:	e7cf      	b.n	3173a <z_impl_k_poll+0x39e>
   3179a:	4654      	mov	r4, sl
   3179c:	e000      	b.n	317a0 <z_impl_k_poll+0x404>
   3179e:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   317a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   317a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   317a6:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   317aa:	6063      	str	r3, [r4, #4]
	tail->next = node;
   317ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
   317ae:	f8c8 4004 	str.w	r4, [r8, #4]
}
   317b2:	e6be      	b.n	31532 <z_impl_k_poll+0x196>
   317b4:	4654      	mov	r4, sl
   317b6:	e7f3      	b.n	317a0 <z_impl_k_poll+0x404>
   317b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   317bc:	f3ef 8111 	mrs	r1, BASEPRI
   317c0:	f383 8812 	msr	BASEPRI_MAX, r3
   317c4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   317c8:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   317cc:	b1cb      	cbz	r3, 31802 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   317ce:	2300      	movs	r3, #0
   317d0:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   317d4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   317d8:	4323      	orrs	r3, r4
   317da:	d045      	beq.n	31868 <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   317dc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   317e0:	e9cd 3400 	strd	r3, r4, [sp]
   317e4:	4a3c      	ldr	r2, [pc, #240]	; (318d8 <z_impl_k_poll+0x53c>)
   317e6:	483d      	ldr	r0, [pc, #244]	; (318dc <z_impl_k_poll+0x540>)
   317e8:	f7ff f94a 	bl	30a80 <z_pend_curr>
   317ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   317f0:	f3ef 8c11 	mrs	ip, BASEPRI
   317f4:	f383 8812 	msr	BASEPRI_MAX, r3
   317f8:	f3bf 8f6f 	isb	sy
   317fc:	4661      	mov	r1, ip
	while (num_events--) {
   317fe:	465b      	mov	r3, fp
   31800:	e04e      	b.n	318a0 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   31802:	4608      	mov	r0, r1
	while (num_events--) {
   31804:	465b      	mov	r3, fp
   31806:	e014      	b.n	31832 <z_impl_k_poll+0x496>
	return node->next != NULL;
   31808:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   3180a:	b12a      	cbz	r2, 31818 <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   3180c:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   3180e:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   31810:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   31812:	2200      	movs	r2, #0
   31814:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   31816:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   31818:	f380 8811 	msr	BASEPRI, r0
   3181c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   31820:	f04f 0340 	mov.w	r3, #64	; 0x40
   31824:	f3ef 8011 	mrs	r0, BASEPRI
   31828:	f383 8812 	msr	BASEPRI_MAX, r3
   3182c:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   31830:	463b      	mov	r3, r7
   31832:	1e5f      	subs	r7, r3, #1
   31834:	b193      	cbz	r3, 3185c <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   31836:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   3183a:	009e      	lsls	r6, r3, #2
   3183c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   31840:	2200      	movs	r2, #0
   31842:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   31844:	7b5a      	ldrb	r2, [r3, #13]
   31846:	f002 021f 	and.w	r2, r2, #31
   3184a:	2a08      	cmp	r2, #8
   3184c:	d8e4      	bhi.n	31818 <z_impl_k_poll+0x47c>
   3184e:	2401      	movs	r4, #1
   31850:	fa04 f202 	lsl.w	r2, r4, r2
   31854:	f412 7f8b 	tst.w	r2, #278	; 0x116
   31858:	d0de      	beq.n	31818 <z_impl_k_poll+0x47c>
   3185a:	e7d5      	b.n	31808 <z_impl_k_poll+0x46c>
	__asm__ volatile(
   3185c:	f381 8811 	msr	BASEPRI, r1
   31860:	f3bf 8f6f 	isb	sy
		return 0;
   31864:	4618      	mov	r0, r3
   31866:	e034      	b.n	318d2 <z_impl_k_poll+0x536>
   31868:	f381 8811 	msr	BASEPRI, r1
   3186c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   31870:	f06f 000a 	mvn.w	r0, #10
   31874:	e02d      	b.n	318d2 <z_impl_k_poll+0x536>
	return node->next != NULL;
   31876:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   31878:	b12a      	cbz	r2, 31886 <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   3187a:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   3187c:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   3187e:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   31880:	2200      	movs	r2, #0
   31882:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   31884:	605a      	str	r2, [r3, #4]
   31886:	f381 8811 	msr	BASEPRI, r1
   3188a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3188e:	f04f 0340 	mov.w	r3, #64	; 0x40
   31892:	f3ef 8111 	mrs	r1, BASEPRI
   31896:	f383 8812 	msr	BASEPRI_MAX, r3
   3189a:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   3189e:	4623      	mov	r3, r4
   318a0:	1e5c      	subs	r4, r3, #1
   318a2:	b193      	cbz	r3, 318ca <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   318a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   318a8:	009f      	lsls	r7, r3, #2
   318aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   318ae:	2200      	movs	r2, #0
   318b0:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   318b2:	7b5a      	ldrb	r2, [r3, #13]
   318b4:	f002 021f 	and.w	r2, r2, #31
   318b8:	2a08      	cmp	r2, #8
   318ba:	d8e4      	bhi.n	31886 <z_impl_k_poll+0x4ea>
   318bc:	2601      	movs	r6, #1
   318be:	fa06 f202 	lsl.w	r2, r6, r2
   318c2:	f412 7f8b 	tst.w	r2, #278	; 0x116
   318c6:	d0de      	beq.n	31886 <z_impl_k_poll+0x4ea>
   318c8:	e7d5      	b.n	31876 <z_impl_k_poll+0x4da>
	__asm__ volatile(
   318ca:	f38c 8811 	msr	BASEPRI, ip
   318ce:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   318d2:	b00d      	add	sp, #52	; 0x34
   318d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   318d8:	20000908 	.word	0x20000908
   318dc:	2000d090 	.word	0x2000d090

000318e0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   318e0:	b538      	push	{r3, r4, r5, lr}
   318e2:	4603      	mov	r3, r0
	__asm__ volatile(
   318e4:	f04f 0240 	mov.w	r2, #64	; 0x40
   318e8:	f3ef 8511 	mrs	r5, BASEPRI
   318ec:	f382 8812 	msr	BASEPRI_MAX, r2
   318f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   318f4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   318f6:	2201      	movs	r2, #1
   318f8:	6082      	str	r2, [r0, #8]
	return list->head == list;
   318fa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   318fc:	4283      	cmp	r3, r0
   318fe:	d011      	beq.n	31924 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   31900:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   31902:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   31904:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   31906:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   31908:	2300      	movs	r3, #0
   3190a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3190c:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   3190e:	b148      	cbz	r0, 31924 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   31910:	2101      	movs	r1, #1
   31912:	f00b f976 	bl	3cc02 <signal_poll_event>
   31916:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   31918:	4629      	mov	r1, r5
   3191a:	4805      	ldr	r0, [pc, #20]	; (31930 <z_impl_k_poll_signal_raise+0x50>)
   3191c:	f7fe ff4c 	bl	307b8 <z_reschedule>
	return rc;
}
   31920:	4620      	mov	r0, r4
   31922:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   31924:	f385 8811 	msr	BASEPRI, r5
   31928:	f3bf 8f6f 	isb	sy
		return 0;
   3192c:	2400      	movs	r4, #0
   3192e:	e7f7      	b.n	31920 <z_impl_k_poll_signal_raise+0x40>
   31930:	2000d090 	.word	0x2000d090

00031934 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   31934:	b538      	push	{r3, r4, r5, lr}
   31936:	4604      	mov	r4, r0
   31938:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   3193a:	f00a fc1b 	bl	3c174 <k_is_in_isr>
   3193e:	b948      	cbnz	r0, 31954 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   31940:	4b05      	ldr	r3, [pc, #20]	; (31958 <z_thread_aligned_alloc+0x24>)
   31942:	689b      	ldr	r3, [r3, #8]
   31944:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
	}

	if (heap != NULL) {
   31948:	b118      	cbz	r0, 31952 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   3194a:	462a      	mov	r2, r5
   3194c:	4621      	mov	r1, r4
   3194e:	f00b fa51 	bl	3cdf4 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   31952:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   31954:	2000      	movs	r0, #0
	return ret;
   31956:	e7fc      	b.n	31952 <z_thread_aligned_alloc+0x1e>
   31958:	2000d04c 	.word	0x2000d04c

0003195c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   3195c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   3195e:	4a03      	ldr	r2, [pc, #12]	; (3196c <boot_banner+0x10>)
   31960:	4903      	ldr	r1, [pc, #12]	; (31970 <boot_banner+0x14>)
   31962:	4804      	ldr	r0, [pc, #16]	; (31974 <boot_banner+0x18>)
   31964:	f002 fd83 	bl	3446e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   31968:	bd08      	pop	{r3, pc}
   3196a:	bf00      	nop
   3196c:	0003dcbc 	.word	0x0003dcbc
   31970:	00040a64 	.word	0x00040a64
   31974:	00040a74 	.word	0x00040a74

00031978 <nrf_cc3xx_platform_init>:
   31978:	b510      	push	{r4, lr}
   3197a:	4c0c      	ldr	r4, [pc, #48]	; (319ac <nrf_cc3xx_platform_init+0x34>)
   3197c:	6823      	ldr	r3, [r4, #0]
   3197e:	b113      	cbz	r3, 31986 <nrf_cc3xx_platform_init+0xe>
   31980:	4b0b      	ldr	r3, [pc, #44]	; (319b0 <nrf_cc3xx_platform_init+0x38>)
   31982:	681b      	ldr	r3, [r3, #0]
   31984:	b92b      	cbnz	r3, 31992 <nrf_cc3xx_platform_init+0x1a>
   31986:	f000 fe73 	bl	32670 <CC_LibInit>
   3198a:	b930      	cbnz	r0, 3199a <nrf_cc3xx_platform_init+0x22>
   3198c:	4b08      	ldr	r3, [pc, #32]	; (319b0 <nrf_cc3xx_platform_init+0x38>)
   3198e:	2201      	movs	r2, #1
   31990:	601a      	str	r2, [r3, #0]
   31992:	2301      	movs	r3, #1
   31994:	6023      	str	r3, [r4, #0]
   31996:	2000      	movs	r0, #0
   31998:	bd10      	pop	{r4, pc}
   3199a:	3801      	subs	r0, #1
   3199c:	2806      	cmp	r0, #6
   3199e:	d901      	bls.n	319a4 <nrf_cc3xx_platform_init+0x2c>
   319a0:	4804      	ldr	r0, [pc, #16]	; (319b4 <nrf_cc3xx_platform_init+0x3c>)
   319a2:	bd10      	pop	{r4, pc}
   319a4:	4b04      	ldr	r3, [pc, #16]	; (319b8 <nrf_cc3xx_platform_init+0x40>)
   319a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   319aa:	bd10      	pop	{r4, pc}
   319ac:	2000d090 	.word	0x2000d090
   319b0:	2000d094 	.word	0x2000d094
   319b4:	ffff8ffe 	.word	0xffff8ffe
   319b8:	00040a9c 	.word	0x00040a9c

000319bc <nrf_cc3xx_platform_abort>:
   319bc:	f3bf 8f4f 	dsb	sy
   319c0:	4905      	ldr	r1, [pc, #20]	; (319d8 <nrf_cc3xx_platform_abort+0x1c>)
   319c2:	4b06      	ldr	r3, [pc, #24]	; (319dc <nrf_cc3xx_platform_abort+0x20>)
   319c4:	68ca      	ldr	r2, [r1, #12]
   319c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   319ca:	4313      	orrs	r3, r2
   319cc:	60cb      	str	r3, [r1, #12]
   319ce:	f3bf 8f4f 	dsb	sy
   319d2:	bf00      	nop
   319d4:	e7fd      	b.n	319d2 <nrf_cc3xx_platform_abort+0x16>
   319d6:	bf00      	nop
   319d8:	e000ed00 	.word	0xe000ed00
   319dc:	05fa0004 	.word	0x05fa0004

000319e0 <CC_PalAbort>:
   319e0:	b4f0      	push	{r4, r5, r6, r7}
   319e2:	4f09      	ldr	r7, [pc, #36]	; (31a08 <CC_PalAbort+0x28>)
   319e4:	4e09      	ldr	r6, [pc, #36]	; (31a0c <CC_PalAbort+0x2c>)
   319e6:	4c0a      	ldr	r4, [pc, #40]	; (31a10 <CC_PalAbort+0x30>)
   319e8:	4a0a      	ldr	r2, [pc, #40]	; (31a14 <CC_PalAbort+0x34>)
   319ea:	4d0b      	ldr	r5, [pc, #44]	; (31a18 <CC_PalAbort+0x38>)
   319ec:	490b      	ldr	r1, [pc, #44]	; (31a1c <CC_PalAbort+0x3c>)
   319ee:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   319f2:	603b      	str	r3, [r7, #0]
   319f4:	6852      	ldr	r2, [r2, #4]
   319f6:	6033      	str	r3, [r6, #0]
   319f8:	6023      	str	r3, [r4, #0]
   319fa:	2400      	movs	r4, #0
   319fc:	602b      	str	r3, [r5, #0]
   319fe:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   31a02:	bcf0      	pop	{r4, r5, r6, r7}
   31a04:	4710      	bx	r2
   31a06:	bf00      	nop
   31a08:	5002b400 	.word	0x5002b400
   31a0c:	5002b404 	.word	0x5002b404
   31a10:	5002b408 	.word	0x5002b408
   31a14:	20000910 	.word	0x20000910
   31a18:	5002b40c 	.word	0x5002b40c
   31a1c:	5002a000 	.word	0x5002a000

00031a20 <nrf_cc3xx_platform_set_abort>:
   31a20:	e9d0 1200 	ldrd	r1, r2, [r0]
   31a24:	4b01      	ldr	r3, [pc, #4]	; (31a2c <nrf_cc3xx_platform_set_abort+0xc>)
   31a26:	e9c3 1200 	strd	r1, r2, [r3]
   31a2a:	4770      	bx	lr
   31a2c:	20000910 	.word	0x20000910

00031a30 <nrf_cc3xx_platform_ctr_drbg_init>:
   31a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31a34:	4c15      	ldr	r4, [pc, #84]	; (31a8c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   31a36:	f8df 805c 	ldr.w	r8, [pc, #92]	; 31a94 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   31a3a:	2800      	cmp	r0, #0
   31a3c:	bf18      	it	ne
   31a3e:	4604      	movne	r4, r0
   31a40:	b083      	sub	sp, #12
   31a42:	6820      	ldr	r0, [r4, #0]
   31a44:	4540      	cmp	r0, r8
   31a46:	d01d      	beq.n	31a84 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   31a48:	460d      	mov	r5, r1
   31a4a:	4620      	mov	r0, r4
   31a4c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   31a50:	f104 0904 	add.w	r9, r4, #4
   31a54:	4616      	mov	r6, r2
   31a56:	f504 778c 	add.w	r7, r4, #280	; 0x118
   31a5a:	f000 f8d3 	bl	31c04 <mbedtls_platform_zeroize>
   31a5e:	4648      	mov	r0, r9
   31a60:	f000 fcf2 	bl	32448 <cc_mbedtls_entropy_init>
   31a64:	4638      	mov	r0, r7
   31a66:	f000 fb1f 	bl	320a8 <cc_mbedtls_ctr_drbg_init>
   31a6a:	4909      	ldr	r1, [pc, #36]	; (31a90 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   31a6c:	9600      	str	r6, [sp, #0]
   31a6e:	464a      	mov	r2, r9
   31a70:	4638      	mov	r0, r7
   31a72:	462b      	mov	r3, r5
   31a74:	f000 fb2e 	bl	320d4 <cc_mbedtls_ctr_drbg_seed>
   31a78:	b908      	cbnz	r0, 31a7e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   31a7a:	f8c4 8000 	str.w	r8, [r4]
   31a7e:	b003      	add	sp, #12
   31a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31a84:	2000      	movs	r0, #0
   31a86:	b003      	add	sp, #12
   31a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31a8c:	2000da78 	.word	0x2000da78
   31a90:	000324c5 	.word	0x000324c5
   31a94:	5ac9bca5 	.word	0x5ac9bca5

00031a98 <nrf_cc3xx_platform_ctr_drbg_get>:
   31a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   31a9a:	4c0d      	ldr	r4, [pc, #52]	; (31ad0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   31a9c:	4e0d      	ldr	r6, [pc, #52]	; (31ad4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   31a9e:	2800      	cmp	r0, #0
   31aa0:	bf08      	it	eq
   31aa2:	4620      	moveq	r0, r4
   31aa4:	b083      	sub	sp, #12
   31aa6:	6807      	ldr	r7, [r0, #0]
   31aa8:	42b7      	cmp	r7, r6
   31aaa:	d10e      	bne.n	31aca <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   31aac:	2600      	movs	r6, #0
   31aae:	461d      	mov	r5, r3
   31ab0:	f500 708c 	add.w	r0, r0, #280	; 0x118
   31ab4:	9600      	str	r6, [sp, #0]
   31ab6:	4633      	mov	r3, r6
   31ab8:	4614      	mov	r4, r2
   31aba:	f000 fb57 	bl	3216c <cc_mbedtls_ctr_drbg_random_with_add>
   31abe:	2800      	cmp	r0, #0
   31ac0:	bf18      	it	ne
   31ac2:	4634      	movne	r4, r6
   31ac4:	602c      	str	r4, [r5, #0]
   31ac6:	b003      	add	sp, #12
   31ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31aca:	4803      	ldr	r0, [pc, #12]	; (31ad8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   31acc:	e7fb      	b.n	31ac6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   31ace:	bf00      	nop
   31ad0:	2000da78 	.word	0x2000da78
   31ad4:	5ac9bca5 	.word	0x5ac9bca5
   31ad8:	ffff8fe8 	.word	0xffff8fe8

00031adc <mutex_free>:
   31adc:	b510      	push	{r4, lr}
   31ade:	4604      	mov	r4, r0
   31ae0:	b130      	cbz	r0, 31af0 <mutex_free+0x14>
   31ae2:	6863      	ldr	r3, [r4, #4]
   31ae4:	06db      	lsls	r3, r3, #27
   31ae6:	d502      	bpl.n	31aee <mutex_free+0x12>
   31ae8:	2300      	movs	r3, #0
   31aea:	6023      	str	r3, [r4, #0]
   31aec:	6063      	str	r3, [r4, #4]
   31aee:	bd10      	pop	{r4, pc}
   31af0:	4b02      	ldr	r3, [pc, #8]	; (31afc <mutex_free+0x20>)
   31af2:	4803      	ldr	r0, [pc, #12]	; (31b00 <mutex_free+0x24>)
   31af4:	685b      	ldr	r3, [r3, #4]
   31af6:	4798      	blx	r3
   31af8:	e7f3      	b.n	31ae2 <mutex_free+0x6>
   31afa:	bf00      	nop
   31afc:	20000910 	.word	0x20000910
   31b00:	00040ab8 	.word	0x00040ab8

00031b04 <mutex_unlock>:
   31b04:	b168      	cbz	r0, 31b22 <mutex_unlock+0x1e>
   31b06:	6843      	ldr	r3, [r0, #4]
   31b08:	b13b      	cbz	r3, 31b1a <mutex_unlock+0x16>
   31b0a:	06db      	lsls	r3, r3, #27
   31b0c:	d507      	bpl.n	31b1e <mutex_unlock+0x1a>
   31b0e:	f3bf 8f5f 	dmb	sy
   31b12:	2300      	movs	r3, #0
   31b14:	6003      	str	r3, [r0, #0]
   31b16:	4618      	mov	r0, r3
   31b18:	4770      	bx	lr
   31b1a:	4803      	ldr	r0, [pc, #12]	; (31b28 <mutex_unlock+0x24>)
   31b1c:	4770      	bx	lr
   31b1e:	4803      	ldr	r0, [pc, #12]	; (31b2c <mutex_unlock+0x28>)
   31b20:	4770      	bx	lr
   31b22:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   31b26:	4770      	bx	lr
   31b28:	ffff8fea 	.word	0xffff8fea
   31b2c:	ffff8fe9 	.word	0xffff8fe9

00031b30 <mutex_init>:
   31b30:	b510      	push	{r4, lr}
   31b32:	4604      	mov	r4, r0
   31b34:	b120      	cbz	r0, 31b40 <mutex_init+0x10>
   31b36:	2200      	movs	r2, #0
   31b38:	2311      	movs	r3, #17
   31b3a:	6022      	str	r2, [r4, #0]
   31b3c:	6063      	str	r3, [r4, #4]
   31b3e:	bd10      	pop	{r4, pc}
   31b40:	4801      	ldr	r0, [pc, #4]	; (31b48 <mutex_init+0x18>)
   31b42:	f7ff ff4d 	bl	319e0 <CC_PalAbort>
   31b46:	e7f6      	b.n	31b36 <mutex_init+0x6>
   31b48:	00040ae0 	.word	0x00040ae0

00031b4c <mutex_lock>:
   31b4c:	b1c0      	cbz	r0, 31b80 <mutex_lock+0x34>
   31b4e:	6843      	ldr	r3, [r0, #4]
   31b50:	b1a3      	cbz	r3, 31b7c <mutex_lock+0x30>
   31b52:	06db      	lsls	r3, r3, #27
   31b54:	d510      	bpl.n	31b78 <mutex_lock+0x2c>
   31b56:	2201      	movs	r2, #1
   31b58:	f3bf 8f5b 	dmb	ish
   31b5c:	e850 3f00 	ldrex	r3, [r0]
   31b60:	e840 2100 	strex	r1, r2, [r0]
   31b64:	2900      	cmp	r1, #0
   31b66:	d1f9      	bne.n	31b5c <mutex_lock+0x10>
   31b68:	f3bf 8f5b 	dmb	ish
   31b6c:	2b01      	cmp	r3, #1
   31b6e:	d0f3      	beq.n	31b58 <mutex_lock+0xc>
   31b70:	f3bf 8f5f 	dmb	sy
   31b74:	2000      	movs	r0, #0
   31b76:	4770      	bx	lr
   31b78:	4803      	ldr	r0, [pc, #12]	; (31b88 <mutex_lock+0x3c>)
   31b7a:	4770      	bx	lr
   31b7c:	4803      	ldr	r0, [pc, #12]	; (31b8c <mutex_lock+0x40>)
   31b7e:	4770      	bx	lr
   31b80:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   31b84:	4770      	bx	lr
   31b86:	bf00      	nop
   31b88:	ffff8fe9 	.word	0xffff8fe9
   31b8c:	ffff8fea 	.word	0xffff8fea

00031b90 <nrf_cc3xx_platform_set_mutexes>:
   31b90:	b570      	push	{r4, r5, r6, lr}
   31b92:	e9d0 2300 	ldrd	r2, r3, [r0]
   31b96:	4c13      	ldr	r4, [pc, #76]	; (31be4 <nrf_cc3xx_platform_set_mutexes+0x54>)
   31b98:	4d13      	ldr	r5, [pc, #76]	; (31be8 <nrf_cc3xx_platform_set_mutexes+0x58>)
   31b9a:	e9c4 2300 	strd	r2, r3, [r4]
   31b9e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   31ba2:	e9c4 6302 	strd	r6, r3, [r4, #8]
   31ba6:	4b11      	ldr	r3, [pc, #68]	; (31bec <nrf_cc3xx_platform_set_mutexes+0x5c>)
   31ba8:	6808      	ldr	r0, [r1, #0]
   31baa:	6018      	str	r0, [r3, #0]
   31bac:	6848      	ldr	r0, [r1, #4]
   31bae:	6058      	str	r0, [r3, #4]
   31bb0:	6888      	ldr	r0, [r1, #8]
   31bb2:	6098      	str	r0, [r3, #8]
   31bb4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   31bb8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   31bbc:	60de      	str	r6, [r3, #12]
   31bbe:	6118      	str	r0, [r3, #16]
   31bc0:	06cb      	lsls	r3, r1, #27
   31bc2:	d50d      	bpl.n	31be0 <nrf_cc3xx_platform_set_mutexes+0x50>
   31bc4:	2300      	movs	r3, #0
   31bc6:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   31bca:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   31bce:	f505 7088 	add.w	r0, r5, #272	; 0x110
   31bd2:	4790      	blx	r2
   31bd4:	6823      	ldr	r3, [r4, #0]
   31bd6:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   31bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   31bde:	4718      	bx	r3
   31be0:	bd70      	pop	{r4, r5, r6, pc}
   31be2:	bf00      	nop
   31be4:	20000920 	.word	0x20000920
   31be8:	2000da78 	.word	0x2000da78
   31bec:	20000930 	.word	0x20000930

00031bf0 <mbedtls_zeroize_internal>:
   31bf0:	b138      	cbz	r0, 31c02 <mbedtls_zeroize_internal+0x12>
   31bf2:	b131      	cbz	r1, 31c02 <mbedtls_zeroize_internal+0x12>
   31bf4:	4401      	add	r1, r0
   31bf6:	2200      	movs	r2, #0
   31bf8:	4603      	mov	r3, r0
   31bfa:	3001      	adds	r0, #1
   31bfc:	4281      	cmp	r1, r0
   31bfe:	701a      	strb	r2, [r3, #0]
   31c00:	d1fa      	bne.n	31bf8 <mbedtls_zeroize_internal+0x8>
   31c02:	4770      	bx	lr

00031c04 <mbedtls_platform_zeroize>:
   31c04:	b138      	cbz	r0, 31c16 <mbedtls_platform_zeroize+0x12>
   31c06:	b131      	cbz	r1, 31c16 <mbedtls_platform_zeroize+0x12>
   31c08:	4401      	add	r1, r0
   31c0a:	2200      	movs	r2, #0
   31c0c:	4603      	mov	r3, r0
   31c0e:	3001      	adds	r0, #1
   31c10:	4288      	cmp	r0, r1
   31c12:	701a      	strb	r2, [r3, #0]
   31c14:	d1fa      	bne.n	31c0c <mbedtls_platform_zeroize+0x8>
   31c16:	4770      	bx	lr

00031c18 <block_cipher_df>:
   31c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31c1c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   31c20:	b0b1      	sub	sp, #196	; 0xc4
   31c22:	f200 812e 	bhi.w	31e82 <block_cipher_df+0x26a>
   31c26:	f8df 926c 	ldr.w	r9, [pc, #620]	; 31e94 <block_cipher_df+0x27c>
   31c2a:	4614      	mov	r4, r2
   31c2c:	460d      	mov	r5, r1
   31c2e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   31c32:	2100      	movs	r1, #0
   31c34:	4682      	mov	sl, r0
   31c36:	4648      	mov	r0, r9
   31c38:	f005 f8b8 	bl	36dac <memset>
   31c3c:	a813      	add	r0, sp, #76	; 0x4c
   31c3e:	f001 f9e5 	bl	3300c <cc_mbedtls_aes_init>
   31c42:	2600      	movs	r6, #0
   31c44:	4629      	mov	r1, r5
   31c46:	2320      	movs	r3, #32
   31c48:	ba65      	rev16	r5, r4
   31c4a:	4622      	mov	r2, r4
   31c4c:	f109 0018 	add.w	r0, r9, #24
   31c50:	f8a9 5012 	strh.w	r5, [r9, #18]
   31c54:	f889 3017 	strb.w	r3, [r9, #23]
   31c58:	f8a9 6010 	strh.w	r6, [r9, #16]
   31c5c:	f005 f882 	bl	36d64 <memcpy>
   31c60:	eb09 0304 	add.w	r3, r9, r4
   31c64:	2280      	movs	r2, #128	; 0x80
   31c66:	4d88      	ldr	r5, [pc, #544]	; (31e88 <block_cipher_df+0x270>)
   31c68:	761a      	strb	r2, [r3, #24]
   31c6a:	4b88      	ldr	r3, [pc, #544]	; (31e8c <block_cipher_df+0x274>)
   31c6c:	9503      	str	r5, [sp, #12]
   31c6e:	9304      	str	r3, [sp, #16]
   31c70:	a813      	add	r0, sp, #76	; 0x4c
   31c72:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   31c76:	a903      	add	r1, sp, #12
   31c78:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   31c7c:	e9cd 5305 	strd	r5, r3, [sp, #20]
   31c80:	f001 f9da 	bl	33038 <cc_mbedtls_aes_setkey_enc>
   31c84:	4680      	mov	r8, r0
   31c86:	2800      	cmp	r0, #0
   31c88:	f040 80da 	bne.w	31e40 <block_cipher_df+0x228>
   31c8c:	f104 0319 	add.w	r3, r4, #25
   31c90:	9301      	str	r3, [sp, #4]
   31c92:	af07      	add	r7, sp, #28
   31c94:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   31c98:	2210      	movs	r2, #16
   31c9a:	2100      	movs	r1, #0
   31c9c:	4638      	mov	r0, r7
   31c9e:	f005 f885 	bl	36dac <memset>
   31ca2:	4c7b      	ldr	r4, [pc, #492]	; (31e90 <block_cipher_df+0x278>)
   31ca4:	9d01      	ldr	r5, [sp, #4]
   31ca6:	f89d 601d 	ldrb.w	r6, [sp, #29]
   31caa:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   31cae:	f89d e01c 	ldrb.w	lr, [sp, #28]
   31cb2:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   31cb6:	f89d c01f 	ldrb.w	ip, [sp, #31]
   31cba:	f89d 001e 	ldrb.w	r0, [sp, #30]
   31cbe:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   31cc2:	404e      	eors	r6, r1
   31cc4:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   31cc8:	f88d 601d 	strb.w	r6, [sp, #29]
   31ccc:	ea8e 0303 	eor.w	r3, lr, r3
   31cd0:	4050      	eors	r0, r2
   31cd2:	ea8c 0101 	eor.w	r1, ip, r1
   31cd6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   31cda:	f88d 301c 	strb.w	r3, [sp, #28]
   31cde:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   31ce2:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   31ce6:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   31cea:	f88d 001e 	strb.w	r0, [sp, #30]
   31cee:	f88d 101f 	strb.w	r1, [sp, #31]
   31cf2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   31cf6:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   31cfa:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   31cfe:	405a      	eors	r2, r3
   31d00:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   31d04:	f88d 2020 	strb.w	r2, [sp, #32]
   31d08:	ea8c 0606 	eor.w	r6, ip, r6
   31d0c:	4048      	eors	r0, r1
   31d0e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   31d12:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   31d16:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   31d1a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   31d1e:	ea8e 0303 	eor.w	r3, lr, r3
   31d22:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   31d26:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   31d2a:	ea8c 0101 	eor.w	r1, ip, r1
   31d2e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   31d32:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   31d36:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   31d3a:	ea82 020c 	eor.w	r2, r2, ip
   31d3e:	4073      	eors	r3, r6
   31d40:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   31d44:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   31d48:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   31d4c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   31d50:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   31d54:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   31d58:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   31d5c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   31d60:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   31d64:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   31d68:	ea8e 0202 	eor.w	r2, lr, r2
   31d6c:	4041      	eors	r1, r0
   31d6e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   31d72:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   31d76:	4073      	eors	r3, r6
   31d78:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   31d7c:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   31d80:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   31d84:	ea8c 0000 	eor.w	r0, ip, r0
   31d88:	4056      	eors	r6, r2
   31d8a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   31d8e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   31d92:	463b      	mov	r3, r7
   31d94:	463a      	mov	r2, r7
   31d96:	2101      	movs	r1, #1
   31d98:	a813      	add	r0, sp, #76	; 0x4c
   31d9a:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   31d9e:	f001 f965 	bl	3306c <cc_mbedtls_aes_crypt_ecb>
   31da2:	2d10      	cmp	r5, #16
   31da4:	bf94      	ite	ls
   31da6:	1b6d      	subls	r5, r5, r5
   31da8:	3d10      	subhi	r5, #16
   31daa:	2800      	cmp	r0, #0
   31dac:	d167      	bne.n	31e7e <block_cipher_df+0x266>
   31dae:	3410      	adds	r4, #16
   31db0:	2d00      	cmp	r5, #0
   31db2:	f47f af78 	bne.w	31ca6 <block_cipher_df+0x8e>
   31db6:	eb0b 0008 	add.w	r0, fp, r8
   31dba:	2210      	movs	r2, #16
   31dbc:	4639      	mov	r1, r7
   31dbe:	f004 ffd1 	bl	36d64 <memcpy>
   31dc2:	f899 3003 	ldrb.w	r3, [r9, #3]
   31dc6:	f108 0810 	add.w	r8, r8, #16
   31dca:	3301      	adds	r3, #1
   31dcc:	f1b8 0f20 	cmp.w	r8, #32
   31dd0:	f889 3003 	strb.w	r3, [r9, #3]
   31dd4:	f47f af60 	bne.w	31c98 <block_cipher_df+0x80>
   31dd8:	2280      	movs	r2, #128	; 0x80
   31dda:	4659      	mov	r1, fp
   31ddc:	a813      	add	r0, sp, #76	; 0x4c
   31dde:	f001 f92b 	bl	33038 <cc_mbedtls_aes_setkey_enc>
   31de2:	4680      	mov	r8, r0
   31de4:	bb78      	cbnz	r0, 31e46 <block_cipher_df+0x22e>
   31de6:	f10a 0520 	add.w	r5, sl, #32
   31dea:	4654      	mov	r4, sl
   31dec:	ab0f      	add	r3, sp, #60	; 0x3c
   31dee:	461a      	mov	r2, r3
   31df0:	2101      	movs	r1, #1
   31df2:	a813      	add	r0, sp, #76	; 0x4c
   31df4:	f001 f93a 	bl	3306c <cc_mbedtls_aes_crypt_ecb>
   31df8:	2210      	movs	r2, #16
   31dfa:	4680      	mov	r8, r0
   31dfc:	a90f      	add	r1, sp, #60	; 0x3c
   31dfe:	4620      	mov	r0, r4
   31e00:	4414      	add	r4, r2
   31e02:	f1b8 0f00 	cmp.w	r8, #0
   31e06:	d11e      	bne.n	31e46 <block_cipher_df+0x22e>
   31e08:	f004 ffac 	bl	36d64 <memcpy>
   31e0c:	42ac      	cmp	r4, r5
   31e0e:	d1ed      	bne.n	31dec <block_cipher_df+0x1d4>
   31e10:	a813      	add	r0, sp, #76	; 0x4c
   31e12:	f001 f90b 	bl	3302c <cc_mbedtls_aes_free>
   31e16:	481f      	ldr	r0, [pc, #124]	; (31e94 <block_cipher_df+0x27c>)
   31e18:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   31e1c:	f7ff fef2 	bl	31c04 <mbedtls_platform_zeroize>
   31e20:	4658      	mov	r0, fp
   31e22:	2120      	movs	r1, #32
   31e24:	f7ff feee 	bl	31c04 <mbedtls_platform_zeroize>
   31e28:	a803      	add	r0, sp, #12
   31e2a:	2110      	movs	r1, #16
   31e2c:	f7ff feea 	bl	31c04 <mbedtls_platform_zeroize>
   31e30:	4638      	mov	r0, r7
   31e32:	2110      	movs	r1, #16
   31e34:	f7ff fee6 	bl	31c04 <mbedtls_platform_zeroize>
   31e38:	4640      	mov	r0, r8
   31e3a:	b031      	add	sp, #196	; 0xc4
   31e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e40:	af07      	add	r7, sp, #28
   31e42:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   31e46:	a813      	add	r0, sp, #76	; 0x4c
   31e48:	f001 f8f0 	bl	3302c <cc_mbedtls_aes_free>
   31e4c:	4811      	ldr	r0, [pc, #68]	; (31e94 <block_cipher_df+0x27c>)
   31e4e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   31e52:	f7ff fed7 	bl	31c04 <mbedtls_platform_zeroize>
   31e56:	4658      	mov	r0, fp
   31e58:	2120      	movs	r1, #32
   31e5a:	f7ff fed3 	bl	31c04 <mbedtls_platform_zeroize>
   31e5e:	a803      	add	r0, sp, #12
   31e60:	2110      	movs	r1, #16
   31e62:	f7ff fecf 	bl	31c04 <mbedtls_platform_zeroize>
   31e66:	4638      	mov	r0, r7
   31e68:	2110      	movs	r1, #16
   31e6a:	f7ff fecb 	bl	31c04 <mbedtls_platform_zeroize>
   31e6e:	4650      	mov	r0, sl
   31e70:	2120      	movs	r1, #32
   31e72:	f7ff fec7 	bl	31c04 <mbedtls_platform_zeroize>
   31e76:	4640      	mov	r0, r8
   31e78:	b031      	add	sp, #196	; 0xc4
   31e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e7e:	4680      	mov	r8, r0
   31e80:	e7e1      	b.n	31e46 <block_cipher_df+0x22e>
   31e82:	f06f 0837 	mvn.w	r8, #55	; 0x37
   31e86:	e7f6      	b.n	31e76 <block_cipher_df+0x25e>
   31e88:	03020100 	.word	0x03020100
   31e8c:	07060504 	.word	0x07060504
   31e90:	2000d0b8 	.word	0x2000d0b8
   31e94:	2000d0a8 	.word	0x2000d0a8

00031e98 <ctr_drbg_update_internal>:
   31e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31e9c:	b088      	sub	sp, #32
   31e9e:	4604      	mov	r4, r0
   31ea0:	2220      	movs	r2, #32
   31ea2:	460d      	mov	r5, r1
   31ea4:	4668      	mov	r0, sp
   31ea6:	2100      	movs	r1, #0
   31ea8:	eb04 0802 	add.w	r8, r4, r2
   31eac:	f004 ff7e 	bl	36dac <memset>
   31eb0:	466e      	mov	r6, sp
   31eb2:	7be2      	ldrb	r2, [r4, #15]
   31eb4:	3201      	adds	r2, #1
   31eb6:	b2d2      	uxtb	r2, r2
   31eb8:	73e2      	strb	r2, [r4, #15]
   31eba:	2a00      	cmp	r2, #0
   31ebc:	d14d      	bne.n	31f5a <ctr_drbg_update_internal+0xc2>
   31ebe:	7ba2      	ldrb	r2, [r4, #14]
   31ec0:	3201      	adds	r2, #1
   31ec2:	b2d2      	uxtb	r2, r2
   31ec4:	73a2      	strb	r2, [r4, #14]
   31ec6:	2a00      	cmp	r2, #0
   31ec8:	d147      	bne.n	31f5a <ctr_drbg_update_internal+0xc2>
   31eca:	7b63      	ldrb	r3, [r4, #13]
   31ecc:	3301      	adds	r3, #1
   31ece:	b2db      	uxtb	r3, r3
   31ed0:	7363      	strb	r3, [r4, #13]
   31ed2:	2b00      	cmp	r3, #0
   31ed4:	d141      	bne.n	31f5a <ctr_drbg_update_internal+0xc2>
   31ed6:	7b23      	ldrb	r3, [r4, #12]
   31ed8:	3301      	adds	r3, #1
   31eda:	b2db      	uxtb	r3, r3
   31edc:	7323      	strb	r3, [r4, #12]
   31ede:	2b00      	cmp	r3, #0
   31ee0:	d13b      	bne.n	31f5a <ctr_drbg_update_internal+0xc2>
   31ee2:	7ae3      	ldrb	r3, [r4, #11]
   31ee4:	3301      	adds	r3, #1
   31ee6:	b2db      	uxtb	r3, r3
   31ee8:	72e3      	strb	r3, [r4, #11]
   31eea:	2b00      	cmp	r3, #0
   31eec:	d135      	bne.n	31f5a <ctr_drbg_update_internal+0xc2>
   31eee:	7aa3      	ldrb	r3, [r4, #10]
   31ef0:	3301      	adds	r3, #1
   31ef2:	b2db      	uxtb	r3, r3
   31ef4:	72a3      	strb	r3, [r4, #10]
   31ef6:	2b00      	cmp	r3, #0
   31ef8:	d12f      	bne.n	31f5a <ctr_drbg_update_internal+0xc2>
   31efa:	7a63      	ldrb	r3, [r4, #9]
   31efc:	3301      	adds	r3, #1
   31efe:	b2db      	uxtb	r3, r3
   31f00:	7263      	strb	r3, [r4, #9]
   31f02:	bb53      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f04:	7a23      	ldrb	r3, [r4, #8]
   31f06:	3301      	adds	r3, #1
   31f08:	b2db      	uxtb	r3, r3
   31f0a:	7223      	strb	r3, [r4, #8]
   31f0c:	bb2b      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f0e:	79e3      	ldrb	r3, [r4, #7]
   31f10:	3301      	adds	r3, #1
   31f12:	b2db      	uxtb	r3, r3
   31f14:	71e3      	strb	r3, [r4, #7]
   31f16:	bb03      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f18:	79a3      	ldrb	r3, [r4, #6]
   31f1a:	3301      	adds	r3, #1
   31f1c:	b2db      	uxtb	r3, r3
   31f1e:	71a3      	strb	r3, [r4, #6]
   31f20:	b9db      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f22:	7963      	ldrb	r3, [r4, #5]
   31f24:	3301      	adds	r3, #1
   31f26:	b2db      	uxtb	r3, r3
   31f28:	7163      	strb	r3, [r4, #5]
   31f2a:	b9b3      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f2c:	7923      	ldrb	r3, [r4, #4]
   31f2e:	3301      	adds	r3, #1
   31f30:	b2db      	uxtb	r3, r3
   31f32:	7123      	strb	r3, [r4, #4]
   31f34:	b98b      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f36:	78e3      	ldrb	r3, [r4, #3]
   31f38:	3301      	adds	r3, #1
   31f3a:	b2db      	uxtb	r3, r3
   31f3c:	70e3      	strb	r3, [r4, #3]
   31f3e:	b963      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f40:	78a3      	ldrb	r3, [r4, #2]
   31f42:	3301      	adds	r3, #1
   31f44:	b2db      	uxtb	r3, r3
   31f46:	70a3      	strb	r3, [r4, #2]
   31f48:	b93b      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f4a:	7863      	ldrb	r3, [r4, #1]
   31f4c:	3301      	adds	r3, #1
   31f4e:	b2db      	uxtb	r3, r3
   31f50:	7063      	strb	r3, [r4, #1]
   31f52:	b913      	cbnz	r3, 31f5a <ctr_drbg_update_internal+0xc2>
   31f54:	7823      	ldrb	r3, [r4, #0]
   31f56:	3301      	adds	r3, #1
   31f58:	7023      	strb	r3, [r4, #0]
   31f5a:	4633      	mov	r3, r6
   31f5c:	4622      	mov	r2, r4
   31f5e:	2101      	movs	r1, #1
   31f60:	4640      	mov	r0, r8
   31f62:	f001 f883 	bl	3306c <cc_mbedtls_aes_crypt_ecb>
   31f66:	4607      	mov	r7, r0
   31f68:	2800      	cmp	r0, #0
   31f6a:	d12b      	bne.n	31fc4 <ctr_drbg_update_internal+0x12c>
   31f6c:	3610      	adds	r6, #16
   31f6e:	ab08      	add	r3, sp, #32
   31f70:	429e      	cmp	r6, r3
   31f72:	d19e      	bne.n	31eb2 <ctr_drbg_update_internal+0x1a>
   31f74:	9e01      	ldr	r6, [sp, #4]
   31f76:	686a      	ldr	r2, [r5, #4]
   31f78:	9f00      	ldr	r7, [sp, #0]
   31f7a:	6829      	ldr	r1, [r5, #0]
   31f7c:	68ab      	ldr	r3, [r5, #8]
   31f7e:	4072      	eors	r2, r6
   31f80:	9e02      	ldr	r6, [sp, #8]
   31f82:	9201      	str	r2, [sp, #4]
   31f84:	4079      	eors	r1, r7
   31f86:	4073      	eors	r3, r6
   31f88:	9100      	str	r1, [sp, #0]
   31f8a:	9e03      	ldr	r6, [sp, #12]
   31f8c:	68e9      	ldr	r1, [r5, #12]
   31f8e:	692a      	ldr	r2, [r5, #16]
   31f90:	9302      	str	r3, [sp, #8]
   31f92:	4071      	eors	r1, r6
   31f94:	9e04      	ldr	r6, [sp, #16]
   31f96:	696b      	ldr	r3, [r5, #20]
   31f98:	9103      	str	r1, [sp, #12]
   31f9a:	4056      	eors	r6, r2
   31f9c:	9a05      	ldr	r2, [sp, #20]
   31f9e:	9604      	str	r6, [sp, #16]
   31fa0:	ea83 0102 	eor.w	r1, r3, r2
   31fa4:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   31fa8:	9d06      	ldr	r5, [sp, #24]
   31faa:	9105      	str	r1, [sp, #20]
   31fac:	4055      	eors	r5, r2
   31fae:	9a07      	ldr	r2, [sp, #28]
   31fb0:	4640      	mov	r0, r8
   31fb2:	4053      	eors	r3, r2
   31fb4:	4669      	mov	r1, sp
   31fb6:	2280      	movs	r2, #128	; 0x80
   31fb8:	e9cd 5306 	strd	r5, r3, [sp, #24]
   31fbc:	f001 f83c 	bl	33038 <cc_mbedtls_aes_setkey_enc>
   31fc0:	4607      	mov	r7, r0
   31fc2:	b138      	cbz	r0, 31fd4 <ctr_drbg_update_internal+0x13c>
   31fc4:	4668      	mov	r0, sp
   31fc6:	2120      	movs	r1, #32
   31fc8:	f7ff fe1c 	bl	31c04 <mbedtls_platform_zeroize>
   31fcc:	4638      	mov	r0, r7
   31fce:	b008      	add	sp, #32
   31fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31fd4:	2210      	movs	r2, #16
   31fd6:	4620      	mov	r0, r4
   31fd8:	eb0d 0102 	add.w	r1, sp, r2
   31fdc:	f004 fec2 	bl	36d64 <memcpy>
   31fe0:	e7f0      	b.n	31fc4 <ctr_drbg_update_internal+0x12c>
   31fe2:	bf00      	nop

00031fe4 <mbedtls_ctr_drbg_reseed_internal>:
   31fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31fe8:	4604      	mov	r4, r0
   31fea:	6980      	ldr	r0, [r0, #24]
   31fec:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   31ff0:	d852      	bhi.n	32098 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   31ff2:	461d      	mov	r5, r3
   31ff4:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   31ff8:	42ab      	cmp	r3, r5
   31ffa:	d34d      	bcc.n	32098 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   31ffc:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   32000:	1a18      	subs	r0, r3, r0
   32002:	4290      	cmp	r0, r2
   32004:	4616      	mov	r6, r2
   32006:	d347      	bcc.n	32098 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   32008:	f8df 9098 	ldr.w	r9, [pc, #152]	; 320a4 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   3200c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   32010:	460f      	mov	r7, r1
   32012:	4648      	mov	r0, r9
   32014:	2100      	movs	r1, #0
   32016:	f004 fec9 	bl	36dac <memset>
   3201a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   3201e:	69a2      	ldr	r2, [r4, #24]
   32020:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   32024:	4649      	mov	r1, r9
   32026:	4798      	blx	r3
   32028:	2800      	cmp	r0, #0
   3202a:	d138      	bne.n	3209e <mbedtls_ctr_drbg_reseed_internal+0xba>
   3202c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   32030:	b13d      	cbz	r5, 32042 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   32032:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   32036:	462a      	mov	r2, r5
   32038:	eb09 0108 	add.w	r1, r9, r8
   3203c:	4798      	blx	r3
   3203e:	bb70      	cbnz	r0, 3209e <mbedtls_ctr_drbg_reseed_internal+0xba>
   32040:	44a8      	add	r8, r5
   32042:	b107      	cbz	r7, 32046 <mbedtls_ctr_drbg_reseed_internal+0x62>
   32044:	b9c6      	cbnz	r6, 32078 <mbedtls_ctr_drbg_reseed_internal+0x94>
   32046:	4917      	ldr	r1, [pc, #92]	; (320a4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   32048:	4642      	mov	r2, r8
   3204a:	4608      	mov	r0, r1
   3204c:	f7ff fde4 	bl	31c18 <block_cipher_df>
   32050:	4605      	mov	r5, r0
   32052:	b138      	cbz	r0, 32064 <mbedtls_ctr_drbg_reseed_internal+0x80>
   32054:	4813      	ldr	r0, [pc, #76]	; (320a4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   32056:	f44f 71c0 	mov.w	r1, #384	; 0x180
   3205a:	f7ff fdd3 	bl	31c04 <mbedtls_platform_zeroize>
   3205e:	4628      	mov	r0, r5
   32060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   32064:	490f      	ldr	r1, [pc, #60]	; (320a4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   32066:	4620      	mov	r0, r4
   32068:	f7ff ff16 	bl	31e98 <ctr_drbg_update_internal>
   3206c:	4605      	mov	r5, r0
   3206e:	2800      	cmp	r0, #0
   32070:	d1f0      	bne.n	32054 <mbedtls_ctr_drbg_reseed_internal+0x70>
   32072:	2301      	movs	r3, #1
   32074:	6123      	str	r3, [r4, #16]
   32076:	e7ed      	b.n	32054 <mbedtls_ctr_drbg_reseed_internal+0x70>
   32078:	4639      	mov	r1, r7
   3207a:	eb09 0008 	add.w	r0, r9, r8
   3207e:	4632      	mov	r2, r6
   32080:	f004 fe70 	bl	36d64 <memcpy>
   32084:	4907      	ldr	r1, [pc, #28]	; (320a4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   32086:	44b0      	add	r8, r6
   32088:	4642      	mov	r2, r8
   3208a:	4608      	mov	r0, r1
   3208c:	f7ff fdc4 	bl	31c18 <block_cipher_df>
   32090:	4605      	mov	r5, r0
   32092:	2800      	cmp	r0, #0
   32094:	d1de      	bne.n	32054 <mbedtls_ctr_drbg_reseed_internal+0x70>
   32096:	e7e5      	b.n	32064 <mbedtls_ctr_drbg_reseed_internal+0x80>
   32098:	f06f 0537 	mvn.w	r5, #55	; 0x37
   3209c:	e7df      	b.n	3205e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   3209e:	f06f 0533 	mvn.w	r5, #51	; 0x33
   320a2:	e7dc      	b.n	3205e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   320a4:	2000d248 	.word	0x2000d248

000320a8 <cc_mbedtls_ctr_drbg_init>:
   320a8:	b510      	push	{r4, lr}
   320aa:	22a4      	movs	r2, #164	; 0xa4
   320ac:	4604      	mov	r4, r0
   320ae:	2100      	movs	r1, #0
   320b0:	f004 fe7c 	bl	36dac <memset>
   320b4:	4b06      	ldr	r3, [pc, #24]	; (320d0 <cc_mbedtls_ctr_drbg_init+0x28>)
   320b6:	f04f 31ff 	mov.w	r1, #4294967295
   320ba:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   320be:	6121      	str	r1, [r4, #16]
   320c0:	61e2      	str	r2, [r4, #28]
   320c2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   320c6:	681b      	ldr	r3, [r3, #0]
   320c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   320cc:	4718      	bx	r3
   320ce:	bf00      	nop
   320d0:	20000974 	.word	0x20000974

000320d4 <cc_mbedtls_ctr_drbg_seed>:
   320d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   320d8:	b085      	sub	sp, #20
   320da:	4605      	mov	r5, r0
   320dc:	460f      	mov	r7, r1
   320de:	4616      	mov	r6, r2
   320e0:	4668      	mov	r0, sp
   320e2:	2210      	movs	r2, #16
   320e4:	2100      	movs	r1, #0
   320e6:	4699      	mov	r9, r3
   320e8:	f004 fe60 	bl	36dac <memset>
   320ec:	4b1d      	ldr	r3, [pc, #116]	; (32164 <cc_mbedtls_ctr_drbg_seed+0x90>)
   320ee:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   320f2:	681b      	ldr	r3, [r3, #0]
   320f4:	4640      	mov	r0, r8
   320f6:	4798      	blx	r3
   320f8:	b120      	cbz	r0, 32104 <cc_mbedtls_ctr_drbg_seed+0x30>
   320fa:	4604      	mov	r4, r0
   320fc:	4620      	mov	r0, r4
   320fe:	b005      	add	sp, #20
   32100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32104:	f105 0420 	add.w	r4, r5, #32
   32108:	4620      	mov	r0, r4
   3210a:	f000 ff7f 	bl	3300c <cc_mbedtls_aes_init>
   3210e:	69aa      	ldr	r2, [r5, #24]
   32110:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   32114:	692e      	ldr	r6, [r5, #16]
   32116:	b9e2      	cbnz	r2, 32152 <cc_mbedtls_ctr_drbg_seed+0x7e>
   32118:	2220      	movs	r2, #32
   3211a:	2e00      	cmp	r6, #0
   3211c:	61aa      	str	r2, [r5, #24]
   3211e:	db1f      	blt.n	32160 <cc_mbedtls_ctr_drbg_seed+0x8c>
   32120:	4620      	mov	r0, r4
   32122:	4669      	mov	r1, sp
   32124:	2280      	movs	r2, #128	; 0x80
   32126:	f000 ff87 	bl	33038 <cc_mbedtls_aes_setkey_enc>
   3212a:	4604      	mov	r4, r0
   3212c:	b930      	cbnz	r0, 3213c <cc_mbedtls_ctr_drbg_seed+0x68>
   3212e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   32130:	4633      	mov	r3, r6
   32132:	4649      	mov	r1, r9
   32134:	4628      	mov	r0, r5
   32136:	f7ff ff55 	bl	31fe4 <mbedtls_ctr_drbg_reseed_internal>
   3213a:	4604      	mov	r4, r0
   3213c:	4b0a      	ldr	r3, [pc, #40]	; (32168 <cc_mbedtls_ctr_drbg_seed+0x94>)
   3213e:	4640      	mov	r0, r8
   32140:	681b      	ldr	r3, [r3, #0]
   32142:	4798      	blx	r3
   32144:	2800      	cmp	r0, #0
   32146:	bf18      	it	ne
   32148:	4604      	movne	r4, r0
   3214a:	4620      	mov	r0, r4
   3214c:	b005      	add	sp, #20
   3214e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32152:	2e00      	cmp	r6, #0
   32154:	dae4      	bge.n	32120 <cc_mbedtls_ctr_drbg_seed+0x4c>
   32156:	2a17      	cmp	r2, #23
   32158:	d802      	bhi.n	32160 <cc_mbedtls_ctr_drbg_seed+0x8c>
   3215a:	1c53      	adds	r3, r2, #1
   3215c:	085e      	lsrs	r6, r3, #1
   3215e:	e7df      	b.n	32120 <cc_mbedtls_ctr_drbg_seed+0x4c>
   32160:	2600      	movs	r6, #0
   32162:	e7dd      	b.n	32120 <cc_mbedtls_ctr_drbg_seed+0x4c>
   32164:	20000978 	.word	0x20000978
   32168:	2000097c 	.word	0x2000097c

0003216c <cc_mbedtls_ctr_drbg_random_with_add>:
   3216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32170:	b08d      	sub	sp, #52	; 0x34
   32172:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   32176:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   3217a:	f200 80e4 	bhi.w	32346 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   3217e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   32182:	f200 80dd 	bhi.w	32340 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   32186:	4604      	mov	r4, r0
   32188:	4615      	mov	r5, r2
   3218a:	460e      	mov	r6, r1
   3218c:	2220      	movs	r2, #32
   3218e:	2100      	movs	r1, #0
   32190:	a804      	add	r0, sp, #16
   32192:	461f      	mov	r7, r3
   32194:	f004 fe0a 	bl	36dac <memset>
   32198:	4b6c      	ldr	r3, [pc, #432]	; (3234c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   3219a:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   3219e:	681b      	ldr	r3, [r3, #0]
   321a0:	4648      	mov	r0, r9
   321a2:	4798      	blx	r3
   321a4:	4683      	mov	fp, r0
   321a6:	2800      	cmp	r0, #0
   321a8:	f040 8093 	bne.w	322d2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   321ac:	6922      	ldr	r2, [r4, #16]
   321ae:	69e3      	ldr	r3, [r4, #28]
   321b0:	429a      	cmp	r2, r3
   321b2:	f300 8092 	bgt.w	322da <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   321b6:	6963      	ldr	r3, [r4, #20]
   321b8:	2b00      	cmp	r3, #0
   321ba:	f040 808e 	bne.w	322da <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   321be:	f1b8 0f00 	cmp.w	r8, #0
   321c2:	f040 80a9 	bne.w	32318 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   321c6:	f8df a188 	ldr.w	sl, [pc, #392]	; 32350 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   321ca:	466f      	mov	r7, sp
   321cc:	2d00      	cmp	r5, #0
   321ce:	f000 8098 	beq.w	32302 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   321d2:	f104 0820 	add.w	r8, r4, #32
   321d6:	466f      	mov	r7, sp
   321d8:	e00e      	b.n	321f8 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   321da:	2d10      	cmp	r5, #16
   321dc:	46ab      	mov	fp, r5
   321de:	bf28      	it	cs
   321e0:	f04f 0b10 	movcs.w	fp, #16
   321e4:	4630      	mov	r0, r6
   321e6:	465a      	mov	r2, fp
   321e8:	4639      	mov	r1, r7
   321ea:	f004 fdbb 	bl	36d64 <memcpy>
   321ee:	ebb5 050b 	subs.w	r5, r5, fp
   321f2:	445e      	add	r6, fp
   321f4:	f000 8085 	beq.w	32302 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   321f8:	7be3      	ldrb	r3, [r4, #15]
   321fa:	3301      	adds	r3, #1
   321fc:	b2db      	uxtb	r3, r3
   321fe:	73e3      	strb	r3, [r4, #15]
   32200:	2b00      	cmp	r3, #0
   32202:	d14d      	bne.n	322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32204:	7ba3      	ldrb	r3, [r4, #14]
   32206:	3301      	adds	r3, #1
   32208:	b2db      	uxtb	r3, r3
   3220a:	73a3      	strb	r3, [r4, #14]
   3220c:	2b00      	cmp	r3, #0
   3220e:	d147      	bne.n	322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32210:	7b63      	ldrb	r3, [r4, #13]
   32212:	3301      	adds	r3, #1
   32214:	b2db      	uxtb	r3, r3
   32216:	7363      	strb	r3, [r4, #13]
   32218:	2b00      	cmp	r3, #0
   3221a:	d141      	bne.n	322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   3221c:	7b23      	ldrb	r3, [r4, #12]
   3221e:	3301      	adds	r3, #1
   32220:	b2db      	uxtb	r3, r3
   32222:	7323      	strb	r3, [r4, #12]
   32224:	2b00      	cmp	r3, #0
   32226:	d13b      	bne.n	322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32228:	7ae3      	ldrb	r3, [r4, #11]
   3222a:	3301      	adds	r3, #1
   3222c:	b2db      	uxtb	r3, r3
   3222e:	72e3      	strb	r3, [r4, #11]
   32230:	2b00      	cmp	r3, #0
   32232:	d135      	bne.n	322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32234:	7aa3      	ldrb	r3, [r4, #10]
   32236:	3301      	adds	r3, #1
   32238:	b2db      	uxtb	r3, r3
   3223a:	72a3      	strb	r3, [r4, #10]
   3223c:	2b00      	cmp	r3, #0
   3223e:	d12f      	bne.n	322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32240:	7a63      	ldrb	r3, [r4, #9]
   32242:	3301      	adds	r3, #1
   32244:	b2db      	uxtb	r3, r3
   32246:	7263      	strb	r3, [r4, #9]
   32248:	bb53      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   3224a:	7a23      	ldrb	r3, [r4, #8]
   3224c:	3301      	adds	r3, #1
   3224e:	b2db      	uxtb	r3, r3
   32250:	7223      	strb	r3, [r4, #8]
   32252:	bb2b      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32254:	79e3      	ldrb	r3, [r4, #7]
   32256:	3301      	adds	r3, #1
   32258:	b2db      	uxtb	r3, r3
   3225a:	71e3      	strb	r3, [r4, #7]
   3225c:	bb03      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   3225e:	79a3      	ldrb	r3, [r4, #6]
   32260:	3301      	adds	r3, #1
   32262:	b2db      	uxtb	r3, r3
   32264:	71a3      	strb	r3, [r4, #6]
   32266:	b9db      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32268:	7963      	ldrb	r3, [r4, #5]
   3226a:	3301      	adds	r3, #1
   3226c:	b2db      	uxtb	r3, r3
   3226e:	7163      	strb	r3, [r4, #5]
   32270:	b9b3      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32272:	7923      	ldrb	r3, [r4, #4]
   32274:	3301      	adds	r3, #1
   32276:	b2db      	uxtb	r3, r3
   32278:	7123      	strb	r3, [r4, #4]
   3227a:	b98b      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   3227c:	78e3      	ldrb	r3, [r4, #3]
   3227e:	3301      	adds	r3, #1
   32280:	b2db      	uxtb	r3, r3
   32282:	70e3      	strb	r3, [r4, #3]
   32284:	b963      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32286:	78a3      	ldrb	r3, [r4, #2]
   32288:	3301      	adds	r3, #1
   3228a:	b2db      	uxtb	r3, r3
   3228c:	70a3      	strb	r3, [r4, #2]
   3228e:	b93b      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   32290:	7863      	ldrb	r3, [r4, #1]
   32292:	3301      	adds	r3, #1
   32294:	b2db      	uxtb	r3, r3
   32296:	7063      	strb	r3, [r4, #1]
   32298:	b913      	cbnz	r3, 322a0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   3229a:	7823      	ldrb	r3, [r4, #0]
   3229c:	3301      	adds	r3, #1
   3229e:	7023      	strb	r3, [r4, #0]
   322a0:	463b      	mov	r3, r7
   322a2:	4622      	mov	r2, r4
   322a4:	2101      	movs	r1, #1
   322a6:	4640      	mov	r0, r8
   322a8:	f000 fee0 	bl	3306c <cc_mbedtls_aes_crypt_ecb>
   322ac:	4683      	mov	fp, r0
   322ae:	2800      	cmp	r0, #0
   322b0:	d093      	beq.n	321da <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   322b2:	f8da 3000 	ldr.w	r3, [sl]
   322b6:	4648      	mov	r0, r9
   322b8:	4798      	blx	r3
   322ba:	2120      	movs	r1, #32
   322bc:	4603      	mov	r3, r0
   322be:	a804      	add	r0, sp, #16
   322c0:	2b00      	cmp	r3, #0
   322c2:	bf18      	it	ne
   322c4:	469b      	movne	fp, r3
   322c6:	f7ff fc9d 	bl	31c04 <mbedtls_platform_zeroize>
   322ca:	4638      	mov	r0, r7
   322cc:	2110      	movs	r1, #16
   322ce:	f7ff fc99 	bl	31c04 <mbedtls_platform_zeroize>
   322d2:	4658      	mov	r0, fp
   322d4:	b00d      	add	sp, #52	; 0x34
   322d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   322da:	4642      	mov	r2, r8
   322dc:	4639      	mov	r1, r7
   322de:	2300      	movs	r3, #0
   322e0:	4620      	mov	r0, r4
   322e2:	f7ff fe7f 	bl	31fe4 <mbedtls_ctr_drbg_reseed_internal>
   322e6:	f8df a068 	ldr.w	sl, [pc, #104]	; 32350 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   322ea:	2800      	cmp	r0, #0
   322ec:	f43f af6d 	beq.w	321ca <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   322f0:	f8da 3000 	ldr.w	r3, [sl]
   322f4:	4648      	mov	r0, r9
   322f6:	4798      	blx	r3
   322f8:	4683      	mov	fp, r0
   322fa:	2800      	cmp	r0, #0
   322fc:	f43f af65 	beq.w	321ca <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   32300:	e7e7      	b.n	322d2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   32302:	a904      	add	r1, sp, #16
   32304:	4620      	mov	r0, r4
   32306:	f7ff fdc7 	bl	31e98 <ctr_drbg_update_internal>
   3230a:	4683      	mov	fp, r0
   3230c:	2800      	cmp	r0, #0
   3230e:	d1d0      	bne.n	322b2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   32310:	6923      	ldr	r3, [r4, #16]
   32312:	3301      	adds	r3, #1
   32314:	6123      	str	r3, [r4, #16]
   32316:	e7cc      	b.n	322b2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   32318:	4642      	mov	r2, r8
   3231a:	4639      	mov	r1, r7
   3231c:	a804      	add	r0, sp, #16
   3231e:	f7ff fc7b 	bl	31c18 <block_cipher_df>
   32322:	4683      	mov	fp, r0
   32324:	b118      	cbz	r0, 3232e <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   32326:	f8df a028 	ldr.w	sl, [pc, #40]	; 32350 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   3232a:	466f      	mov	r7, sp
   3232c:	e7c1      	b.n	322b2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   3232e:	a904      	add	r1, sp, #16
   32330:	4620      	mov	r0, r4
   32332:	f7ff fdb1 	bl	31e98 <ctr_drbg_update_internal>
   32336:	4683      	mov	fp, r0
   32338:	2800      	cmp	r0, #0
   3233a:	f43f af44 	beq.w	321c6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   3233e:	e7f2      	b.n	32326 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   32340:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   32344:	e7c5      	b.n	322d2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   32346:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   3234a:	e7c2      	b.n	322d2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   3234c:	20000978 	.word	0x20000978
   32350:	2000097c 	.word	0x2000097c

00032354 <entropy_update>:
   32354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32358:	2b20      	cmp	r3, #32
   3235a:	b08b      	sub	sp, #44	; 0x2c
   3235c:	461d      	mov	r5, r3
   3235e:	4606      	mov	r6, r0
   32360:	4689      	mov	r9, r1
   32362:	4690      	mov	r8, r2
   32364:	d826      	bhi.n	323b4 <entropy_update+0x60>
   32366:	b2db      	uxtb	r3, r3
   32368:	af02      	add	r7, sp, #8
   3236a:	6831      	ldr	r1, [r6, #0]
   3236c:	f88d 9004 	strb.w	r9, [sp, #4]
   32370:	f88d 3005 	strb.w	r3, [sp, #5]
   32374:	f106 0904 	add.w	r9, r6, #4
   32378:	b921      	cbnz	r1, 32384 <entropy_update+0x30>
   3237a:	4648      	mov	r0, r9
   3237c:	f000 feba 	bl	330f4 <cc_mbedtls_sha256_starts>
   32380:	4604      	mov	r4, r0
   32382:	b940      	cbnz	r0, 32396 <entropy_update+0x42>
   32384:	2301      	movs	r3, #1
   32386:	6033      	str	r3, [r6, #0]
   32388:	2202      	movs	r2, #2
   3238a:	a901      	add	r1, sp, #4
   3238c:	4648      	mov	r0, r9
   3238e:	f000 fec5 	bl	3311c <cc_mbedtls_sha256_update>
   32392:	4604      	mov	r4, r0
   32394:	b138      	cbz	r0, 323a6 <entropy_update+0x52>
   32396:	4638      	mov	r0, r7
   32398:	2120      	movs	r1, #32
   3239a:	f7ff fc33 	bl	31c04 <mbedtls_platform_zeroize>
   3239e:	4620      	mov	r0, r4
   323a0:	b00b      	add	sp, #44	; 0x2c
   323a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   323a6:	462a      	mov	r2, r5
   323a8:	4641      	mov	r1, r8
   323aa:	4648      	mov	r0, r9
   323ac:	f000 feb6 	bl	3311c <cc_mbedtls_sha256_update>
   323b0:	4604      	mov	r4, r0
   323b2:	e7f0      	b.n	32396 <entropy_update+0x42>
   323b4:	af02      	add	r7, sp, #8
   323b6:	4619      	mov	r1, r3
   323b8:	4610      	mov	r0, r2
   323ba:	2300      	movs	r3, #0
   323bc:	463a      	mov	r2, r7
   323be:	f000 ffad 	bl	3331c <cc_mbedtls_sha256>
   323c2:	4604      	mov	r4, r0
   323c4:	2800      	cmp	r0, #0
   323c6:	d1e6      	bne.n	32396 <entropy_update+0x42>
   323c8:	2320      	movs	r3, #32
   323ca:	461d      	mov	r5, r3
   323cc:	46b8      	mov	r8, r7
   323ce:	e7cc      	b.n	3236a <entropy_update+0x16>

000323d0 <entropy_gather_internal.part.0>:
   323d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   323d2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   323d6:	b0a7      	sub	sp, #156	; 0x9c
   323d8:	2b00      	cmp	r3, #0
   323da:	bfd8      	it	le
   323dc:	ae02      	addle	r6, sp, #8
   323de:	dd2c      	ble.n	3243a <entropy_gather_internal.part.0+0x6a>
   323e0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   323e4:	4605      	mov	r5, r0
   323e6:	2300      	movs	r3, #0
   323e8:	ae02      	add	r6, sp, #8
   323ea:	9301      	str	r3, [sp, #4]
   323ec:	f1a4 0701 	sub.w	r7, r4, #1
   323f0:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   323f4:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   323f8:	4631      	mov	r1, r6
   323fa:	ab01      	add	r3, sp, #4
   323fc:	2290      	movs	r2, #144	; 0x90
   323fe:	47a0      	blx	r4
   32400:	fab7 f787 	clz	r7, r7
   32404:	097f      	lsrs	r7, r7, #5
   32406:	4604      	mov	r4, r0
   32408:	b910      	cbnz	r0, 32410 <entropy_gather_internal.part.0+0x40>
   3240a:	9b01      	ldr	r3, [sp, #4]
   3240c:	b93b      	cbnz	r3, 3241e <entropy_gather_internal.part.0+0x4e>
   3240e:	b1a7      	cbz	r7, 3243a <entropy_gather_internal.part.0+0x6a>
   32410:	4630      	mov	r0, r6
   32412:	2190      	movs	r1, #144	; 0x90
   32414:	f7ff fbf6 	bl	31c04 <mbedtls_platform_zeroize>
   32418:	4620      	mov	r0, r4
   3241a:	b027      	add	sp, #156	; 0x9c
   3241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3241e:	4601      	mov	r1, r0
   32420:	4632      	mov	r2, r6
   32422:	4628      	mov	r0, r5
   32424:	f7ff ff96 	bl	32354 <entropy_update>
   32428:	b950      	cbnz	r0, 32440 <entropy_gather_internal.part.0+0x70>
   3242a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   3242e:	9a01      	ldr	r2, [sp, #4]
   32430:	4413      	add	r3, r2
   32432:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   32436:	2f00      	cmp	r7, #0
   32438:	d1ea      	bne.n	32410 <entropy_gather_internal.part.0+0x40>
   3243a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   3243e:	e7e7      	b.n	32410 <entropy_gather_internal.part.0+0x40>
   32440:	4604      	mov	r4, r0
   32442:	4620      	mov	r0, r4
   32444:	b027      	add	sp, #156	; 0x9c
   32446:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032448 <cc_mbedtls_entropy_init>:
   32448:	b570      	push	{r4, r5, r6, lr}
   3244a:	2500      	movs	r5, #0
   3244c:	4604      	mov	r4, r0
   3244e:	4629      	mov	r1, r5
   32450:	2214      	movs	r2, #20
   32452:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   32456:	30f8      	adds	r0, #248	; 0xf8
   32458:	f004 fca8 	bl	36dac <memset>
   3245c:	4b15      	ldr	r3, [pc, #84]	; (324b4 <cc_mbedtls_entropy_init+0x6c>)
   3245e:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   32462:	681b      	ldr	r3, [r3, #0]
   32464:	4630      	mov	r0, r6
   32466:	4798      	blx	r3
   32468:	4620      	mov	r0, r4
   3246a:	f840 5b04 	str.w	r5, [r0], #4
   3246e:	f000 fe27 	bl	330c0 <cc_mbedtls_sha256_init>
   32472:	4b11      	ldr	r3, [pc, #68]	; (324b8 <cc_mbedtls_entropy_init+0x70>)
   32474:	4630      	mov	r0, r6
   32476:	681b      	ldr	r3, [r3, #0]
   32478:	4798      	blx	r3
   3247a:	b9c8      	cbnz	r0, 324b0 <cc_mbedtls_entropy_init+0x68>
   3247c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   32480:	42ab      	cmp	r3, r5
   32482:	dc0f      	bgt.n	324a4 <cc_mbedtls_entropy_init+0x5c>
   32484:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   32488:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   3248c:	490b      	ldr	r1, [pc, #44]	; (324bc <cc_mbedtls_entropy_init+0x74>)
   3248e:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   32492:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   32496:	3301      	adds	r3, #1
   32498:	2020      	movs	r0, #32
   3249a:	2101      	movs	r1, #1
   3249c:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   324a0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   324a4:	4b06      	ldr	r3, [pc, #24]	; (324c0 <cc_mbedtls_entropy_init+0x78>)
   324a6:	4630      	mov	r0, r6
   324a8:	681b      	ldr	r3, [r3, #0]
   324aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   324ae:	4718      	bx	r3
   324b0:	bd70      	pop	{r4, r5, r6, pc}
   324b2:	bf00      	nop
   324b4:	20000974 	.word	0x20000974
   324b8:	20000978 	.word	0x20000978
   324bc:	00032f11 	.word	0x00032f11
   324c0:	2000097c 	.word	0x2000097c

000324c4 <cc_mbedtls_entropy_func>:
   324c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   324c8:	2a20      	cmp	r2, #32
   324ca:	b088      	sub	sp, #32
   324cc:	d876      	bhi.n	325bc <cc_mbedtls_entropy_func+0xf8>
   324ce:	4b3d      	ldr	r3, [pc, #244]	; (325c4 <cc_mbedtls_entropy_func+0x100>)
   324d0:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   324d4:	681b      	ldr	r3, [r3, #0]
   324d6:	4604      	mov	r4, r0
   324d8:	4648      	mov	r0, r9
   324da:	4617      	mov	r7, r2
   324dc:	4688      	mov	r8, r1
   324de:	4798      	blx	r3
   324e0:	4605      	mov	r5, r0
   324e2:	bba0      	cbnz	r0, 3254e <cc_mbedtls_entropy_func+0x8a>
   324e4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   324e8:	f240 1601 	movw	r6, #257	; 0x101
   324ec:	e001      	b.n	324f2 <cc_mbedtls_entropy_func+0x2e>
   324ee:	3e01      	subs	r6, #1
   324f0:	d060      	beq.n	325b4 <cc_mbedtls_entropy_func+0xf0>
   324f2:	4620      	mov	r0, r4
   324f4:	b37b      	cbz	r3, 32556 <cc_mbedtls_entropy_func+0x92>
   324f6:	f7ff ff6b 	bl	323d0 <entropy_gather_internal.part.0>
   324fa:	4605      	mov	r5, r0
   324fc:	bb68      	cbnz	r0, 3255a <cc_mbedtls_entropy_func+0x96>
   324fe:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   32502:	2b00      	cmp	r3, #0
   32504:	ddf3      	ble.n	324ee <cc_mbedtls_entropy_func+0x2a>
   32506:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   3250a:	4290      	cmp	r0, r2
   3250c:	d3ef      	bcc.n	324ee <cc_mbedtls_entropy_func+0x2a>
   3250e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   32512:	2a01      	cmp	r2, #1
   32514:	d1eb      	bne.n	324ee <cc_mbedtls_entropy_func+0x2a>
   32516:	281f      	cmp	r0, #31
   32518:	d9e9      	bls.n	324ee <cc_mbedtls_entropy_func+0x2a>
   3251a:	466e      	mov	r6, sp
   3251c:	4629      	mov	r1, r5
   3251e:	2220      	movs	r2, #32
   32520:	4630      	mov	r0, r6
   32522:	f104 0a04 	add.w	sl, r4, #4
   32526:	f004 fc41 	bl	36dac <memset>
   3252a:	4631      	mov	r1, r6
   3252c:	4650      	mov	r0, sl
   3252e:	f000 fe1f 	bl	33170 <cc_mbedtls_sha256_finish>
   32532:	4605      	mov	r5, r0
   32534:	b198      	cbz	r0, 3255e <cc_mbedtls_entropy_func+0x9a>
   32536:	4630      	mov	r0, r6
   32538:	2120      	movs	r1, #32
   3253a:	f7ff fb63 	bl	31c04 <mbedtls_platform_zeroize>
   3253e:	4b22      	ldr	r3, [pc, #136]	; (325c8 <cc_mbedtls_entropy_func+0x104>)
   32540:	4648      	mov	r0, r9
   32542:	681b      	ldr	r3, [r3, #0]
   32544:	4798      	blx	r3
   32546:	2800      	cmp	r0, #0
   32548:	bf18      	it	ne
   3254a:	f06f 051d 	mvnne.w	r5, #29
   3254e:	4628      	mov	r0, r5
   32550:	b008      	add	sp, #32
   32552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32556:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   3255a:	466e      	mov	r6, sp
   3255c:	e7eb      	b.n	32536 <cc_mbedtls_entropy_func+0x72>
   3255e:	4650      	mov	r0, sl
   32560:	f000 fdc2 	bl	330e8 <cc_mbedtls_sha256_free>
   32564:	4650      	mov	r0, sl
   32566:	f000 fdab 	bl	330c0 <cc_mbedtls_sha256_init>
   3256a:	4629      	mov	r1, r5
   3256c:	4650      	mov	r0, sl
   3256e:	f000 fdc1 	bl	330f4 <cc_mbedtls_sha256_starts>
   32572:	4605      	mov	r5, r0
   32574:	2800      	cmp	r0, #0
   32576:	d1de      	bne.n	32536 <cc_mbedtls_entropy_func+0x72>
   32578:	4650      	mov	r0, sl
   3257a:	2220      	movs	r2, #32
   3257c:	4631      	mov	r1, r6
   3257e:	f000 fdcd 	bl	3311c <cc_mbedtls_sha256_update>
   32582:	4605      	mov	r5, r0
   32584:	2800      	cmp	r0, #0
   32586:	d1d6      	bne.n	32536 <cc_mbedtls_entropy_func+0x72>
   32588:	4603      	mov	r3, r0
   3258a:	4632      	mov	r2, r6
   3258c:	2120      	movs	r1, #32
   3258e:	4630      	mov	r0, r6
   32590:	f000 fec4 	bl	3331c <cc_mbedtls_sha256>
   32594:	4605      	mov	r5, r0
   32596:	2800      	cmp	r0, #0
   32598:	d1cd      	bne.n	32536 <cc_mbedtls_entropy_func+0x72>
   3259a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   3259e:	2b00      	cmp	r3, #0
   325a0:	bfc4      	itt	gt
   325a2:	2300      	movgt	r3, #0
   325a4:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   325a8:	463a      	mov	r2, r7
   325aa:	4640      	mov	r0, r8
   325ac:	4631      	mov	r1, r6
   325ae:	f004 fbd9 	bl	36d64 <memcpy>
   325b2:	e7c0      	b.n	32536 <cc_mbedtls_entropy_func+0x72>
   325b4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   325b8:	466e      	mov	r6, sp
   325ba:	e7bc      	b.n	32536 <cc_mbedtls_entropy_func+0x72>
   325bc:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   325c0:	e7c5      	b.n	3254e <cc_mbedtls_entropy_func+0x8a>
   325c2:	bf00      	nop
   325c4:	20000978 	.word	0x20000978
   325c8:	2000097c 	.word	0x2000097c

000325cc <RndStartupTest.constprop.0>:
   325cc:	b530      	push	{r4, r5, lr}
   325ce:	b0c3      	sub	sp, #268	; 0x10c
   325d0:	22dc      	movs	r2, #220	; 0xdc
   325d2:	2100      	movs	r1, #0
   325d4:	a80b      	add	r0, sp, #44	; 0x2c
   325d6:	f004 fbe9 	bl	36dac <memset>
   325da:	2228      	movs	r2, #40	; 0x28
   325dc:	2100      	movs	r1, #0
   325de:	a801      	add	r0, sp, #4
   325e0:	f004 fbe4 	bl	36dac <memset>
   325e4:	a801      	add	r0, sp, #4
   325e6:	f000 fec1 	bl	3336c <RNG_PLAT_SetUserRngParameters>
   325ea:	4604      	mov	r4, r0
   325ec:	b110      	cbz	r0, 325f4 <RndStartupTest.constprop.0+0x28>
   325ee:	4620      	mov	r0, r4
   325f0:	b043      	add	sp, #268	; 0x10c
   325f2:	bd30      	pop	{r4, r5, pc}
   325f4:	4d18      	ldr	r5, [pc, #96]	; (32658 <RndStartupTest.constprop.0+0x8c>)
   325f6:	f04f 31ff 	mov.w	r1, #4294967295
   325fa:	6828      	ldr	r0, [r5, #0]
   325fc:	f000 f93c 	bl	32878 <CC_PalMutexLock>
   32600:	4604      	mov	r4, r0
   32602:	b9c0      	cbnz	r0, 32636 <RndStartupTest.constprop.0+0x6a>
   32604:	2000      	movs	r0, #0
   32606:	f000 f967 	bl	328d8 <CC_PalPowerSaveModeSelect>
   3260a:	bb00      	cbnz	r0, 3264e <RndStartupTest.constprop.0+0x82>
   3260c:	4a13      	ldr	r2, [pc, #76]	; (3265c <RndStartupTest.constprop.0+0x90>)
   3260e:	a901      	add	r1, sp, #4
   32610:	a80b      	add	r0, sp, #44	; 0x2c
   32612:	f000 fc6f 	bl	32ef4 <LLF_RND_RunTrngStartupTest>
   32616:	4604      	mov	r4, r0
   32618:	2001      	movs	r0, #1
   3261a:	f000 f95d 	bl	328d8 <CC_PalPowerSaveModeSelect>
   3261e:	b990      	cbnz	r0, 32646 <RndStartupTest.constprop.0+0x7a>
   32620:	6828      	ldr	r0, [r5, #0]
   32622:	f000 f931 	bl	32888 <CC_PalMutexUnlock>
   32626:	2800      	cmp	r0, #0
   32628:	d0e1      	beq.n	325ee <RndStartupTest.constprop.0+0x22>
   3262a:	480d      	ldr	r0, [pc, #52]	; (32660 <RndStartupTest.constprop.0+0x94>)
   3262c:	f7ff f9d8 	bl	319e0 <CC_PalAbort>
   32630:	4620      	mov	r0, r4
   32632:	b043      	add	sp, #268	; 0x10c
   32634:	bd30      	pop	{r4, r5, pc}
   32636:	480b      	ldr	r0, [pc, #44]	; (32664 <RndStartupTest.constprop.0+0x98>)
   32638:	f7ff f9d2 	bl	319e0 <CC_PalAbort>
   3263c:	2c01      	cmp	r4, #1
   3263e:	bf08      	it	eq
   32640:	2405      	moveq	r4, #5
   32642:	d0ed      	beq.n	32620 <RndStartupTest.constprop.0+0x54>
   32644:	e7de      	b.n	32604 <RndStartupTest.constprop.0+0x38>
   32646:	4808      	ldr	r0, [pc, #32]	; (32668 <RndStartupTest.constprop.0+0x9c>)
   32648:	f7ff f9ca 	bl	319e0 <CC_PalAbort>
   3264c:	e7e8      	b.n	32620 <RndStartupTest.constprop.0+0x54>
   3264e:	4807      	ldr	r0, [pc, #28]	; (3266c <RndStartupTest.constprop.0+0xa0>)
   32650:	f7ff f9c6 	bl	319e0 <CC_PalAbort>
   32654:	e7da      	b.n	3260c <RndStartupTest.constprop.0+0x40>
   32656:	bf00      	nop
   32658:	20000970 	.word	0x20000970
   3265c:	2000d430 	.word	0x2000d430
   32660:	00040b5c 	.word	0x00040b5c
   32664:	00040b04 	.word	0x00040b04
   32668:	00040b3c 	.word	0x00040b3c
   3266c:	00040b1c 	.word	0x00040b1c

00032670 <CC_LibInit>:
   32670:	b510      	push	{r4, lr}
   32672:	b082      	sub	sp, #8
   32674:	f000 f854 	bl	32720 <CC_HalInit>
   32678:	b128      	cbz	r0, 32686 <CC_LibInit+0x16>
   3267a:	f000 f8a3 	bl	327c4 <CC_PalTerminate>
   3267e:	2403      	movs	r4, #3
   32680:	4620      	mov	r0, r4
   32682:	b002      	add	sp, #8
   32684:	bd10      	pop	{r4, pc}
   32686:	f000 f86f 	bl	32768 <CC_PalInit>
   3268a:	b9d0      	cbnz	r0, 326c2 <CC_LibInit+0x52>
   3268c:	f000 f924 	bl	328d8 <CC_PalPowerSaveModeSelect>
   32690:	b9d8      	cbnz	r0, 326ca <CC_LibInit+0x5a>
   32692:	4b1e      	ldr	r3, [pc, #120]	; (3270c <CC_LibInit+0x9c>)
   32694:	681b      	ldr	r3, [r3, #0]
   32696:	0e1b      	lsrs	r3, r3, #24
   32698:	2bf0      	cmp	r3, #240	; 0xf0
   3269a:	d10a      	bne.n	326b2 <CC_LibInit+0x42>
   3269c:	4a1c      	ldr	r2, [pc, #112]	; (32710 <CC_LibInit+0xa0>)
   3269e:	4b1d      	ldr	r3, [pc, #116]	; (32714 <CC_LibInit+0xa4>)
   326a0:	6812      	ldr	r2, [r2, #0]
   326a2:	429a      	cmp	r2, r3
   326a4:	d029      	beq.n	326fa <CC_LibInit+0x8a>
   326a6:	f000 f83d 	bl	32724 <CC_HalTerminate>
   326aa:	2407      	movs	r4, #7
   326ac:	f000 f88a 	bl	327c4 <CC_PalTerminate>
   326b0:	e7e6      	b.n	32680 <CC_LibInit+0x10>
   326b2:	f000 f837 	bl	32724 <CC_HalTerminate>
   326b6:	f000 f885 	bl	327c4 <CC_PalTerminate>
   326ba:	2406      	movs	r4, #6
   326bc:	4620      	mov	r0, r4
   326be:	b002      	add	sp, #8
   326c0:	bd10      	pop	{r4, pc}
   326c2:	2404      	movs	r4, #4
   326c4:	4620      	mov	r0, r4
   326c6:	b002      	add	sp, #8
   326c8:	bd10      	pop	{r4, pc}
   326ca:	f000 f82b 	bl	32724 <CC_HalTerminate>
   326ce:	f000 f879 	bl	327c4 <CC_PalTerminate>
   326d2:	f7ff ff7b 	bl	325cc <RndStartupTest.constprop.0>
   326d6:	4604      	mov	r4, r0
   326d8:	b958      	cbnz	r0, 326f2 <CC_LibInit+0x82>
   326da:	4602      	mov	r2, r0
   326dc:	4601      	mov	r1, r0
   326de:	f7ff f9a7 	bl	31a30 <nrf_cc3xx_platform_ctr_drbg_init>
   326e2:	b930      	cbnz	r0, 326f2 <CC_LibInit+0x82>
   326e4:	490c      	ldr	r1, [pc, #48]	; (32718 <CC_LibInit+0xa8>)
   326e6:	ab01      	add	r3, sp, #4
   326e8:	2268      	movs	r2, #104	; 0x68
   326ea:	f7ff f9d5 	bl	31a98 <nrf_cc3xx_platform_ctr_drbg_get>
   326ee:	2800      	cmp	r0, #0
   326f0:	d0c6      	beq.n	32680 <CC_LibInit+0x10>
   326f2:	2405      	movs	r4, #5
   326f4:	4620      	mov	r0, r4
   326f6:	b002      	add	sp, #8
   326f8:	bd10      	pop	{r4, pc}
   326fa:	2001      	movs	r0, #1
   326fc:	f000 f8ec 	bl	328d8 <CC_PalPowerSaveModeSelect>
   32700:	2800      	cmp	r0, #0
   32702:	d1e2      	bne.n	326ca <CC_LibInit+0x5a>
   32704:	4b05      	ldr	r3, [pc, #20]	; (3271c <CC_LibInit+0xac>)
   32706:	6018      	str	r0, [r3, #0]
   32708:	e7e3      	b.n	326d2 <CC_LibInit+0x62>
   3270a:	bf00      	nop
   3270c:	5002b928 	.word	0x5002b928
   32710:	5002ba24 	.word	0x5002ba24
   32714:	20e00000 	.word	0x20e00000
   32718:	2000d3c8 	.word	0x2000d3c8
   3271c:	5002ba0c 	.word	0x5002ba0c

00032720 <CC_HalInit>:
   32720:	2000      	movs	r0, #0
   32722:	4770      	bx	lr

00032724 <CC_HalTerminate>:
   32724:	2000      	movs	r0, #0
   32726:	4770      	bx	lr

00032728 <CC_HalClearInterruptBit>:
   32728:	0543      	lsls	r3, r0, #21
   3272a:	d503      	bpl.n	32734 <CC_HalClearInterruptBit+0xc>
   3272c:	4b03      	ldr	r3, [pc, #12]	; (3273c <CC_HalClearInterruptBit+0x14>)
   3272e:	f04f 32ff 	mov.w	r2, #4294967295
   32732:	601a      	str	r2, [r3, #0]
   32734:	4b02      	ldr	r3, [pc, #8]	; (32740 <CC_HalClearInterruptBit+0x18>)
   32736:	6018      	str	r0, [r3, #0]
   32738:	4770      	bx	lr
   3273a:	bf00      	nop
   3273c:	5002b108 	.word	0x5002b108
   32740:	5002ba08 	.word	0x5002ba08

00032744 <CC_HalMaskInterrupt>:
   32744:	4b01      	ldr	r3, [pc, #4]	; (3274c <CC_HalMaskInterrupt+0x8>)
   32746:	6018      	str	r0, [r3, #0]
   32748:	4770      	bx	lr
   3274a:	bf00      	nop
   3274c:	5002ba04 	.word	0x5002ba04

00032750 <CC_HalWaitInterrupt>:
   32750:	b108      	cbz	r0, 32756 <CC_HalWaitInterrupt+0x6>
   32752:	f000 b86f 	b.w	32834 <CC_PalWaitInterrupt>
   32756:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   3275a:	4770      	bx	lr

0003275c <CC_HalWaitInterruptRND>:
   3275c:	b108      	cbz	r0, 32762 <CC_HalWaitInterruptRND+0x6>
   3275e:	f000 b84f 	b.w	32800 <CC_PalWaitInterruptRND>
   32762:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   32766:	4770      	bx	lr

00032768 <CC_PalInit>:
   32768:	b510      	push	{r4, lr}
   3276a:	4811      	ldr	r0, [pc, #68]	; (327b0 <CC_PalInit+0x48>)
   3276c:	f000 f870 	bl	32850 <CC_PalMutexCreate>
   32770:	b100      	cbz	r0, 32774 <CC_PalInit+0xc>
   32772:	bd10      	pop	{r4, pc}
   32774:	480f      	ldr	r0, [pc, #60]	; (327b4 <CC_PalInit+0x4c>)
   32776:	f000 f86b 	bl	32850 <CC_PalMutexCreate>
   3277a:	2800      	cmp	r0, #0
   3277c:	d1f9      	bne.n	32772 <CC_PalInit+0xa>
   3277e:	4c0e      	ldr	r4, [pc, #56]	; (327b8 <CC_PalInit+0x50>)
   32780:	4620      	mov	r0, r4
   32782:	f000 f865 	bl	32850 <CC_PalMutexCreate>
   32786:	2800      	cmp	r0, #0
   32788:	d1f3      	bne.n	32772 <CC_PalInit+0xa>
   3278a:	4b0c      	ldr	r3, [pc, #48]	; (327bc <CC_PalInit+0x54>)
   3278c:	480c      	ldr	r0, [pc, #48]	; (327c0 <CC_PalInit+0x58>)
   3278e:	601c      	str	r4, [r3, #0]
   32790:	f000 f85e 	bl	32850 <CC_PalMutexCreate>
   32794:	4601      	mov	r1, r0
   32796:	2800      	cmp	r0, #0
   32798:	d1eb      	bne.n	32772 <CC_PalInit+0xa>
   3279a:	f000 f82d 	bl	327f8 <CC_PalDmaInit>
   3279e:	4604      	mov	r4, r0
   327a0:	b108      	cbz	r0, 327a6 <CC_PalInit+0x3e>
   327a2:	4620      	mov	r0, r4
   327a4:	bd10      	pop	{r4, pc}
   327a6:	f000 f879 	bl	3289c <CC_PalPowerSaveModeInit>
   327aa:	4620      	mov	r0, r4
   327ac:	e7fa      	b.n	327a4 <CC_PalInit+0x3c>
   327ae:	bf00      	nop
   327b0:	2000096c 	.word	0x2000096c
   327b4:	20000960 	.word	0x20000960
   327b8:	20000968 	.word	0x20000968
   327bc:	20000970 	.word	0x20000970
   327c0:	20000964 	.word	0x20000964

000327c4 <CC_PalTerminate>:
   327c4:	b508      	push	{r3, lr}
   327c6:	4808      	ldr	r0, [pc, #32]	; (327e8 <CC_PalTerminate+0x24>)
   327c8:	f000 f84c 	bl	32864 <CC_PalMutexDestroy>
   327cc:	4807      	ldr	r0, [pc, #28]	; (327ec <CC_PalTerminate+0x28>)
   327ce:	f000 f849 	bl	32864 <CC_PalMutexDestroy>
   327d2:	4807      	ldr	r0, [pc, #28]	; (327f0 <CC_PalTerminate+0x2c>)
   327d4:	f000 f846 	bl	32864 <CC_PalMutexDestroy>
   327d8:	4806      	ldr	r0, [pc, #24]	; (327f4 <CC_PalTerminate+0x30>)
   327da:	f000 f843 	bl	32864 <CC_PalMutexDestroy>
   327de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   327e2:	f000 b80b 	b.w	327fc <CC_PalDmaTerminate>
   327e6:	bf00      	nop
   327e8:	2000096c 	.word	0x2000096c
   327ec:	20000960 	.word	0x20000960
   327f0:	20000968 	.word	0x20000968
   327f4:	20000964 	.word	0x20000964

000327f8 <CC_PalDmaInit>:
   327f8:	2000      	movs	r0, #0
   327fa:	4770      	bx	lr

000327fc <CC_PalDmaTerminate>:
   327fc:	4770      	bx	lr
   327fe:	bf00      	nop

00032800 <CC_PalWaitInterruptRND>:
   32800:	b410      	push	{r4}
   32802:	4c08      	ldr	r4, [pc, #32]	; (32824 <CC_PalWaitInterruptRND+0x24>)
   32804:	4602      	mov	r2, r0
   32806:	6823      	ldr	r3, [r4, #0]
   32808:	4213      	tst	r3, r2
   3280a:	d0fc      	beq.n	32806 <CC_PalWaitInterruptRND+0x6>
   3280c:	b121      	cbz	r1, 32818 <CC_PalWaitInterruptRND+0x18>
   3280e:	4b06      	ldr	r3, [pc, #24]	; (32828 <CC_PalWaitInterruptRND+0x28>)
   32810:	4806      	ldr	r0, [pc, #24]	; (3282c <CC_PalWaitInterruptRND+0x2c>)
   32812:	681b      	ldr	r3, [r3, #0]
   32814:	600b      	str	r3, [r1, #0]
   32816:	6003      	str	r3, [r0, #0]
   32818:	4b05      	ldr	r3, [pc, #20]	; (32830 <CC_PalWaitInterruptRND+0x30>)
   3281a:	601a      	str	r2, [r3, #0]
   3281c:	2000      	movs	r0, #0
   3281e:	bc10      	pop	{r4}
   32820:	4770      	bx	lr
   32822:	bf00      	nop
   32824:	5002ba00 	.word	0x5002ba00
   32828:	5002b104 	.word	0x5002b104
   3282c:	5002b108 	.word	0x5002b108
   32830:	5002ba08 	.word	0x5002ba08

00032834 <CC_PalWaitInterrupt>:
   32834:	4904      	ldr	r1, [pc, #16]	; (32848 <CC_PalWaitInterrupt+0x14>)
   32836:	4602      	mov	r2, r0
   32838:	680b      	ldr	r3, [r1, #0]
   3283a:	421a      	tst	r2, r3
   3283c:	d0fc      	beq.n	32838 <CC_PalWaitInterrupt+0x4>
   3283e:	4b03      	ldr	r3, [pc, #12]	; (3284c <CC_PalWaitInterrupt+0x18>)
   32840:	2000      	movs	r0, #0
   32842:	601a      	str	r2, [r3, #0]
   32844:	4770      	bx	lr
   32846:	bf00      	nop
   32848:	5002ba00 	.word	0x5002ba00
   3284c:	5002ba08 	.word	0x5002ba08

00032850 <CC_PalMutexCreate>:
   32850:	b508      	push	{r3, lr}
   32852:	4b03      	ldr	r3, [pc, #12]	; (32860 <CC_PalMutexCreate+0x10>)
   32854:	6802      	ldr	r2, [r0, #0]
   32856:	681b      	ldr	r3, [r3, #0]
   32858:	6810      	ldr	r0, [r2, #0]
   3285a:	4798      	blx	r3
   3285c:	2000      	movs	r0, #0
   3285e:	bd08      	pop	{r3, pc}
   32860:	20000920 	.word	0x20000920

00032864 <CC_PalMutexDestroy>:
   32864:	b508      	push	{r3, lr}
   32866:	4b03      	ldr	r3, [pc, #12]	; (32874 <CC_PalMutexDestroy+0x10>)
   32868:	6802      	ldr	r2, [r0, #0]
   3286a:	685b      	ldr	r3, [r3, #4]
   3286c:	6810      	ldr	r0, [r2, #0]
   3286e:	4798      	blx	r3
   32870:	2000      	movs	r0, #0
   32872:	bd08      	pop	{r3, pc}
   32874:	20000920 	.word	0x20000920

00032878 <CC_PalMutexLock>:
   32878:	4b02      	ldr	r3, [pc, #8]	; (32884 <CC_PalMutexLock+0xc>)
   3287a:	6802      	ldr	r2, [r0, #0]
   3287c:	689b      	ldr	r3, [r3, #8]
   3287e:	6810      	ldr	r0, [r2, #0]
   32880:	4718      	bx	r3
   32882:	bf00      	nop
   32884:	20000920 	.word	0x20000920

00032888 <CC_PalMutexUnlock>:
   32888:	b508      	push	{r3, lr}
   3288a:	4b03      	ldr	r3, [pc, #12]	; (32898 <CC_PalMutexUnlock+0x10>)
   3288c:	6802      	ldr	r2, [r0, #0]
   3288e:	68db      	ldr	r3, [r3, #12]
   32890:	6810      	ldr	r0, [r2, #0]
   32892:	4798      	blx	r3
   32894:	2000      	movs	r0, #0
   32896:	bd08      	pop	{r3, pc}
   32898:	20000920 	.word	0x20000920

0003289c <CC_PalPowerSaveModeInit>:
   3289c:	b570      	push	{r4, r5, r6, lr}
   3289e:	4c09      	ldr	r4, [pc, #36]	; (328c4 <CC_PalPowerSaveModeInit+0x28>)
   328a0:	4d09      	ldr	r5, [pc, #36]	; (328c8 <CC_PalPowerSaveModeInit+0x2c>)
   328a2:	6920      	ldr	r0, [r4, #16]
   328a4:	68ab      	ldr	r3, [r5, #8]
   328a6:	4798      	blx	r3
   328a8:	b118      	cbz	r0, 328b2 <CC_PalPowerSaveModeInit+0x16>
   328aa:	4b08      	ldr	r3, [pc, #32]	; (328cc <CC_PalPowerSaveModeInit+0x30>)
   328ac:	4808      	ldr	r0, [pc, #32]	; (328d0 <CC_PalPowerSaveModeInit+0x34>)
   328ae:	685b      	ldr	r3, [r3, #4]
   328b0:	4798      	blx	r3
   328b2:	4a08      	ldr	r2, [pc, #32]	; (328d4 <CC_PalPowerSaveModeInit+0x38>)
   328b4:	68eb      	ldr	r3, [r5, #12]
   328b6:	6920      	ldr	r0, [r4, #16]
   328b8:	2100      	movs	r1, #0
   328ba:	6011      	str	r1, [r2, #0]
   328bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   328c0:	4718      	bx	r3
   328c2:	bf00      	nop
   328c4:	20000930 	.word	0x20000930
   328c8:	20000920 	.word	0x20000920
   328cc:	20000910 	.word	0x20000910
   328d0:	00040b74 	.word	0x00040b74
   328d4:	2000d650 	.word	0x2000d650

000328d8 <CC_PalPowerSaveModeSelect>:
   328d8:	b570      	push	{r4, r5, r6, lr}
   328da:	4d1a      	ldr	r5, [pc, #104]	; (32944 <CC_PalPowerSaveModeSelect+0x6c>)
   328dc:	4e1a      	ldr	r6, [pc, #104]	; (32948 <CC_PalPowerSaveModeSelect+0x70>)
   328de:	4604      	mov	r4, r0
   328e0:	68b2      	ldr	r2, [r6, #8]
   328e2:	6928      	ldr	r0, [r5, #16]
   328e4:	4790      	blx	r2
   328e6:	b9f0      	cbnz	r0, 32926 <CC_PalPowerSaveModeSelect+0x4e>
   328e8:	b15c      	cbz	r4, 32902 <CC_PalPowerSaveModeSelect+0x2a>
   328ea:	4c18      	ldr	r4, [pc, #96]	; (3294c <CC_PalPowerSaveModeSelect+0x74>)
   328ec:	6823      	ldr	r3, [r4, #0]
   328ee:	b1ab      	cbz	r3, 3291c <CC_PalPowerSaveModeSelect+0x44>
   328f0:	2b01      	cmp	r3, #1
   328f2:	d01a      	beq.n	3292a <CC_PalPowerSaveModeSelect+0x52>
   328f4:	3b01      	subs	r3, #1
   328f6:	6023      	str	r3, [r4, #0]
   328f8:	6928      	ldr	r0, [r5, #16]
   328fa:	68f3      	ldr	r3, [r6, #12]
   328fc:	4798      	blx	r3
   328fe:	2000      	movs	r0, #0
   32900:	bd70      	pop	{r4, r5, r6, pc}
   32902:	4c12      	ldr	r4, [pc, #72]	; (3294c <CC_PalPowerSaveModeSelect+0x74>)
   32904:	6821      	ldr	r1, [r4, #0]
   32906:	b939      	cbnz	r1, 32918 <CC_PalPowerSaveModeSelect+0x40>
   32908:	4b11      	ldr	r3, [pc, #68]	; (32950 <CC_PalPowerSaveModeSelect+0x78>)
   3290a:	4a12      	ldr	r2, [pc, #72]	; (32954 <CC_PalPowerSaveModeSelect+0x7c>)
   3290c:	2001      	movs	r0, #1
   3290e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   32912:	6813      	ldr	r3, [r2, #0]
   32914:	2b00      	cmp	r3, #0
   32916:	d1fc      	bne.n	32912 <CC_PalPowerSaveModeSelect+0x3a>
   32918:	3101      	adds	r1, #1
   3291a:	6021      	str	r1, [r4, #0]
   3291c:	68f3      	ldr	r3, [r6, #12]
   3291e:	6928      	ldr	r0, [r5, #16]
   32920:	4798      	blx	r3
   32922:	2000      	movs	r0, #0
   32924:	bd70      	pop	{r4, r5, r6, pc}
   32926:	480c      	ldr	r0, [pc, #48]	; (32958 <CC_PalPowerSaveModeSelect+0x80>)
   32928:	bd70      	pop	{r4, r5, r6, pc}
   3292a:	4a0a      	ldr	r2, [pc, #40]	; (32954 <CC_PalPowerSaveModeSelect+0x7c>)
   3292c:	6813      	ldr	r3, [r2, #0]
   3292e:	2b00      	cmp	r3, #0
   32930:	d1fc      	bne.n	3292c <CC_PalPowerSaveModeSelect+0x54>
   32932:	4a07      	ldr	r2, [pc, #28]	; (32950 <CC_PalPowerSaveModeSelect+0x78>)
   32934:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   32938:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   3293c:	f7ff ff02 	bl	32744 <CC_HalMaskInterrupt>
   32940:	6823      	ldr	r3, [r4, #0]
   32942:	e7d7      	b.n	328f4 <CC_PalPowerSaveModeSelect+0x1c>
   32944:	20000930 	.word	0x20000930
   32948:	20000920 	.word	0x20000920
   3294c:	2000d650 	.word	0x2000d650
   32950:	5002a000 	.word	0x5002a000
   32954:	5002b910 	.word	0x5002b910
   32958:	ffff8fe9 	.word	0xffff8fe9

0003295c <mutex_init>:
   3295c:	4b01      	ldr	r3, [pc, #4]	; (32964 <mutex_init+0x8>)
   3295e:	681b      	ldr	r3, [r3, #0]
   32960:	4718      	bx	r3
   32962:	bf00      	nop
   32964:	20000920 	.word	0x20000920

00032968 <mutex_lock>:
   32968:	4b01      	ldr	r3, [pc, #4]	; (32970 <mutex_lock+0x8>)
   3296a:	689b      	ldr	r3, [r3, #8]
   3296c:	4718      	bx	r3
   3296e:	bf00      	nop
   32970:	20000920 	.word	0x20000920

00032974 <mutex_unlock>:
   32974:	4b01      	ldr	r3, [pc, #4]	; (3297c <mutex_unlock+0x8>)
   32976:	68db      	ldr	r3, [r3, #12]
   32978:	4718      	bx	r3
   3297a:	bf00      	nop
   3297c:	20000920 	.word	0x20000920

00032980 <startTrngHW>:
   32980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32984:	2800      	cmp	r0, #0
   32986:	d07b      	beq.n	32a80 <startTrngHW+0x100>
   32988:	460c      	mov	r4, r1
   3298a:	2900      	cmp	r1, #0
   3298c:	d078      	beq.n	32a80 <startTrngHW+0x100>
   3298e:	461d      	mov	r5, r3
   32990:	2b00      	cmp	r3, #0
   32992:	d075      	beq.n	32a80 <startTrngHW+0x100>
   32994:	4606      	mov	r6, r0
   32996:	b122      	cbz	r2, 329a2 <startTrngHW+0x22>
   32998:	2201      	movs	r2, #1
   3299a:	2300      	movs	r3, #0
   3299c:	602a      	str	r2, [r5, #0]
   3299e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   329a2:	682b      	ldr	r3, [r5, #0]
   329a4:	2b00      	cmp	r3, #0
   329a6:	d067      	beq.n	32a78 <startTrngHW+0xf8>
   329a8:	4629      	mov	r1, r5
   329aa:	4620      	mov	r0, r4
   329ac:	f000 fda4 	bl	334f8 <LLF_RND_GetFastestRosc>
   329b0:	4607      	mov	r7, r0
   329b2:	2800      	cmp	r0, #0
   329b4:	d161      	bne.n	32a7a <startTrngHW+0xfa>
   329b6:	6828      	ldr	r0, [r5, #0]
   329b8:	4621      	mov	r1, r4
   329ba:	f000 fd7f 	bl	334bc <LLF_RND_GetRoscSampleCnt>
   329be:	4607      	mov	r7, r0
   329c0:	2800      	cmp	r0, #0
   329c2:	d15a      	bne.n	32a7a <startTrngHW+0xfa>
   329c4:	682b      	ldr	r3, [r5, #0]
   329c6:	2b08      	cmp	r3, #8
   329c8:	d069      	beq.n	32a9e <startTrngHW+0x11e>
   329ca:	2b04      	cmp	r3, #4
   329cc:	d06a      	beq.n	32aa4 <startTrngHW+0x124>
   329ce:	f1a3 0802 	sub.w	r8, r3, #2
   329d2:	fab8 f888 	clz	r8, r8
   329d6:	ea4f 1858 	mov.w	r8, r8, lsr #5
   329da:	4b34      	ldr	r3, [pc, #208]	; (32aac <startTrngHW+0x12c>)
   329dc:	4934      	ldr	r1, [pc, #208]	; (32ab0 <startTrngHW+0x130>)
   329de:	4a35      	ldr	r2, [pc, #212]	; (32ab4 <startTrngHW+0x134>)
   329e0:	2001      	movs	r0, #1
   329e2:	6018      	str	r0, [r3, #0]
   329e4:	469c      	mov	ip, r3
   329e6:	6008      	str	r0, [r1, #0]
   329e8:	f8cc 0000 	str.w	r0, [ip]
   329ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   329ee:	6013      	str	r3, [r2, #0]
   329f0:	6811      	ldr	r1, [r2, #0]
   329f2:	428b      	cmp	r3, r1
   329f4:	d1f8      	bne.n	329e8 <startTrngHW+0x68>
   329f6:	4b30      	ldr	r3, [pc, #192]	; (32ab8 <startTrngHW+0x138>)
   329f8:	f04f 0900 	mov.w	r9, #0
   329fc:	f8c3 9000 	str.w	r9, [r3]
   32a00:	f04f 30ff 	mov.w	r0, #4294967295
   32a04:	f7ff fe90 	bl	32728 <CC_HalClearInterruptBit>
   32a08:	4b2c      	ldr	r3, [pc, #176]	; (32abc <startTrngHW+0x13c>)
   32a0a:	f06f 021b 	mvn.w	r2, #27
   32a0e:	601a      	str	r2, [r3, #0]
   32a10:	4648      	mov	r0, r9
   32a12:	f7ff fe97 	bl	32744 <CC_HalMaskInterrupt>
   32a16:	4a2a      	ldr	r2, [pc, #168]	; (32ac0 <startTrngHW+0x140>)
   32a18:	4b2a      	ldr	r3, [pc, #168]	; (32ac4 <startTrngHW+0x144>)
   32a1a:	f8c2 8000 	str.w	r8, [r2]
   32a1e:	6818      	ldr	r0, [r3, #0]
   32a20:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   32a24:	f7ff fe8e 	bl	32744 <CC_HalMaskInterrupt>
   32a28:	4b27      	ldr	r3, [pc, #156]	; (32ac8 <startTrngHW+0x148>)
   32a2a:	220a      	movs	r2, #10
   32a2c:	601a      	str	r2, [r3, #0]
   32a2e:	9908      	ldr	r1, [sp, #32]
   32a30:	6923      	ldr	r3, [r4, #16]
   32a32:	6a62      	ldr	r2, [r4, #36]	; 0x24
   32a34:	2901      	cmp	r1, #1
   32a36:	d027      	beq.n	32a88 <startTrngHW+0x108>
   32a38:	4924      	ldr	r1, [pc, #144]	; (32acc <startTrngHW+0x14c>)
   32a3a:	fba1 1303 	umull	r1, r3, r1, r3
   32a3e:	091b      	lsrs	r3, r3, #4
   32a40:	fb03 f302 	mul.w	r3, r3, r2
   32a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   32a48:	4921      	ldr	r1, [pc, #132]	; (32ad0 <startTrngHW+0x150>)
   32a4a:	4a1b      	ldr	r2, [pc, #108]	; (32ab8 <startTrngHW+0x138>)
   32a4c:	03db      	lsls	r3, r3, #15
   32a4e:	099b      	lsrs	r3, r3, #6
   32a50:	600b      	str	r3, [r1, #0]
   32a52:	2301      	movs	r3, #1
   32a54:	6013      	str	r3, [r2, #0]
   32a56:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   32a5a:	682a      	ldr	r2, [r5, #0]
   32a5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   32a60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   32a64:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   32a68:	682a      	ldr	r2, [r5, #0]
   32a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   32a6e:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   32a72:	4638      	mov	r0, r7
   32a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   32a78:	4f16      	ldr	r7, [pc, #88]	; (32ad4 <startTrngHW+0x154>)
   32a7a:	4638      	mov	r0, r7
   32a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   32a80:	4f15      	ldr	r7, [pc, #84]	; (32ad8 <startTrngHW+0x158>)
   32a82:	4638      	mov	r0, r7
   32a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   32a88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   32a8c:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   32a90:	3101      	adds	r1, #1
   32a92:	d002      	beq.n	32a9a <startTrngHW+0x11a>
   32a94:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   32a98:	e7ce      	b.n	32a38 <startTrngHW+0xb8>
   32a9a:	2316      	movs	r3, #22
   32a9c:	e7d0      	b.n	32a40 <startTrngHW+0xc0>
   32a9e:	f04f 0803 	mov.w	r8, #3
   32aa2:	e79a      	b.n	329da <startTrngHW+0x5a>
   32aa4:	f04f 0802 	mov.w	r8, #2
   32aa8:	e797      	b.n	329da <startTrngHW+0x5a>
   32aaa:	bf00      	nop
   32aac:	5002b1c4 	.word	0x5002b1c4
   32ab0:	5002b140 	.word	0x5002b140
   32ab4:	5002b130 	.word	0x5002b130
   32ab8:	5002b12c 	.word	0x5002b12c
   32abc:	5002b100 	.word	0x5002b100
   32ac0:	5002b10c 	.word	0x5002b10c
   32ac4:	5002ba04 	.word	0x5002ba04
   32ac8:	5002b138 	.word	0x5002b138
   32acc:	aaaaaaab 	.word	0xaaaaaaab
   32ad0:	5002b1d8 	.word	0x5002b1d8
   32ad4:	00f10c31 	.word	0x00f10c31
   32ad8:	00f10c35 	.word	0x00f10c35

00032adc <LLF_RND_RepetitionCounterTest.part.0>:
   32adc:	b4f0      	push	{r4, r5, r6, r7}
   32ade:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   32ae2:	2400      	movs	r4, #0
   32ae4:	f10c 3cff 	add.w	ip, ip, #4294967295
   32ae8:	4626      	mov	r6, r4
   32aea:	4627      	mov	r7, r4
   32aec:	e006      	b.n	32afc <LLF_RND_RepetitionCounterTest.part.0+0x20>
   32aee:	429f      	cmp	r7, r3
   32af0:	d016      	beq.n	32b20 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   32af2:	2601      	movs	r6, #1
   32af4:	4565      	cmp	r5, ip
   32af6:	d819      	bhi.n	32b2c <LLF_RND_RepetitionCounterTest.part.0+0x50>
   32af8:	462c      	mov	r4, r5
   32afa:	461f      	mov	r7, r3
   32afc:	0963      	lsrs	r3, r4, #5
   32afe:	f004 011f 	and.w	r1, r4, #31
   32b02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   32b06:	291f      	cmp	r1, #31
   32b08:	fa23 f301 	lsr.w	r3, r3, r1
   32b0c:	f104 0501 	add.w	r5, r4, #1
   32b10:	bf18      	it	ne
   32b12:	f003 0301 	andne.w	r3, r3, #1
   32b16:	2c00      	cmp	r4, #0
   32b18:	d1e9      	bne.n	32aee <LLF_RND_RepetitionCounterTest.part.0+0x12>
   32b1a:	2601      	movs	r6, #1
   32b1c:	4635      	mov	r5, r6
   32b1e:	e7eb      	b.n	32af8 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   32b20:	3601      	adds	r6, #1
   32b22:	4296      	cmp	r6, r2
   32b24:	d1e6      	bne.n	32af4 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   32b26:	4803      	ldr	r0, [pc, #12]	; (32b34 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   32b28:	bcf0      	pop	{r4, r5, r6, r7}
   32b2a:	4770      	bx	lr
   32b2c:	2000      	movs	r0, #0
   32b2e:	bcf0      	pop	{r4, r5, r6, r7}
   32b30:	4770      	bx	lr
   32b32:	bf00      	nop
   32b34:	00f10c36 	.word	0x00f10c36

00032b38 <LLF_RND_AdaptiveProportionTest>:
   32b38:	2800      	cmp	r0, #0
   32b3a:	d061      	beq.n	32c00 <LLF_RND_AdaptiveProportionTest+0xc8>
   32b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32b40:	1e4c      	subs	r4, r1, #1
   32b42:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   32b46:	d227      	bcs.n	32b98 <LLF_RND_AdaptiveProportionTest+0x60>
   32b48:	b333      	cbz	r3, 32b98 <LLF_RND_AdaptiveProportionTest+0x60>
   32b4a:	b32a      	cbz	r2, 32b98 <LLF_RND_AdaptiveProportionTest+0x60>
   32b4c:	00cd      	lsls	r5, r1, #3
   32b4e:	2b01      	cmp	r3, #1
   32b50:	f105 3eff 	add.w	lr, r5, #4294967295
   32b54:	d030      	beq.n	32bb8 <LLF_RND_AdaptiveProportionTest+0x80>
   32b56:	2100      	movs	r1, #0
   32b58:	468c      	mov	ip, r1
   32b5a:	460f      	mov	r7, r1
   32b5c:	460e      	mov	r6, r1
   32b5e:	f103 38ff 	add.w	r8, r3, #4294967295
   32b62:	094c      	lsrs	r4, r1, #5
   32b64:	f001 051f 	and.w	r5, r1, #31
   32b68:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   32b6c:	2d1f      	cmp	r5, #31
   32b6e:	fa24 f405 	lsr.w	r4, r4, r5
   32b72:	bf18      	it	ne
   32b74:	f004 0401 	andne.w	r4, r4, #1
   32b78:	b921      	cbnz	r1, 32b84 <LLF_RND_AdaptiveProportionTest+0x4c>
   32b7a:	2601      	movs	r6, #1
   32b7c:	46b4      	mov	ip, r6
   32b7e:	4631      	mov	r1, r6
   32b80:	4627      	mov	r7, r4
   32b82:	e7ee      	b.n	32b62 <LLF_RND_AdaptiveProportionTest+0x2a>
   32b84:	42b3      	cmp	r3, r6
   32b86:	d013      	beq.n	32bb0 <LLF_RND_AdaptiveProportionTest+0x78>
   32b88:	42a7      	cmp	r7, r4
   32b8a:	d101      	bne.n	32b90 <LLF_RND_AdaptiveProportionTest+0x58>
   32b8c:	f10c 0c01 	add.w	ip, ip, #1
   32b90:	4546      	cmp	r6, r8
   32b92:	d104      	bne.n	32b9e <LLF_RND_AdaptiveProportionTest+0x66>
   32b94:	4562      	cmp	r2, ip
   32b96:	d202      	bcs.n	32b9e <LLF_RND_AdaptiveProportionTest+0x66>
   32b98:	481a      	ldr	r0, [pc, #104]	; (32c04 <LLF_RND_AdaptiveProportionTest+0xcc>)
   32b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32b9e:	463c      	mov	r4, r7
   32ba0:	3101      	adds	r1, #1
   32ba2:	458e      	cmp	lr, r1
   32ba4:	f106 0601 	add.w	r6, r6, #1
   32ba8:	d2ea      	bcs.n	32b80 <LLF_RND_AdaptiveProportionTest+0x48>
   32baa:	2000      	movs	r0, #0
   32bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32bb0:	2600      	movs	r6, #0
   32bb2:	f04f 0c01 	mov.w	ip, #1
   32bb6:	e7f3      	b.n	32ba0 <LLF_RND_AdaptiveProportionTest+0x68>
   32bb8:	2600      	movs	r6, #0
   32bba:	46b4      	mov	ip, r6
   32bbc:	4637      	mov	r7, r6
   32bbe:	4634      	mov	r4, r6
   32bc0:	0961      	lsrs	r1, r4, #5
   32bc2:	f004 031f 	and.w	r3, r4, #31
   32bc6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   32bca:	2b1f      	cmp	r3, #31
   32bcc:	fa21 f103 	lsr.w	r1, r1, r3
   32bd0:	bf18      	it	ne
   32bd2:	f001 0101 	andne.w	r1, r1, #1
   32bd6:	b13c      	cbz	r4, 32be8 <LLF_RND_AdaptiveProportionTest+0xb0>
   32bd8:	b95f      	cbnz	r7, 32bf2 <LLF_RND_AdaptiveProportionTest+0xba>
   32bda:	458c      	cmp	ip, r1
   32bdc:	d001      	beq.n	32be2 <LLF_RND_AdaptiveProportionTest+0xaa>
   32bde:	4661      	mov	r1, ip
   32be0:	e008      	b.n	32bf4 <LLF_RND_AdaptiveProportionTest+0xbc>
   32be2:	3601      	adds	r6, #1
   32be4:	4661      	mov	r1, ip
   32be6:	e005      	b.n	32bf4 <LLF_RND_AdaptiveProportionTest+0xbc>
   32be8:	2601      	movs	r6, #1
   32bea:	4634      	mov	r4, r6
   32bec:	468c      	mov	ip, r1
   32bee:	2701      	movs	r7, #1
   32bf0:	e7e6      	b.n	32bc0 <LLF_RND_AdaptiveProportionTest+0x88>
   32bf2:	463e      	mov	r6, r7
   32bf4:	42b2      	cmp	r2, r6
   32bf6:	d3cf      	bcc.n	32b98 <LLF_RND_AdaptiveProportionTest+0x60>
   32bf8:	3401      	adds	r4, #1
   32bfa:	42ac      	cmp	r4, r5
   32bfc:	d1f6      	bne.n	32bec <LLF_RND_AdaptiveProportionTest+0xb4>
   32bfe:	e7d4      	b.n	32baa <LLF_RND_AdaptiveProportionTest+0x72>
   32c00:	4800      	ldr	r0, [pc, #0]	; (32c04 <LLF_RND_AdaptiveProportionTest+0xcc>)
   32c02:	4770      	bx	lr
   32c04:	00f10c37 	.word	0x00f10c37

00032c08 <getTrngSource>:
   32c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32c0c:	b08d      	sub	sp, #52	; 0x34
   32c0e:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   32c12:	4607      	mov	r7, r0
   32c14:	460c      	mov	r4, r1
   32c16:	2d00      	cmp	r5, #0
   32c18:	d14d      	bne.n	32cb6 <getTrngSource+0xae>
   32c1a:	f8d1 a010 	ldr.w	sl, [r1, #16]
   32c1e:	601e      	str	r6, [r3, #0]
   32c20:	9b16      	ldr	r3, [sp, #88]	; 0x58
   32c22:	2100      	movs	r1, #0
   32c24:	6019      	str	r1, [r3, #0]
   32c26:	2a00      	cmp	r2, #0
   32c28:	f000 8120 	beq.w	32e6c <getTrngSource+0x264>
   32c2c:	4a9b      	ldr	r2, [pc, #620]	; (32e9c <getTrngSource+0x294>)
   32c2e:	4b9c      	ldr	r3, [pc, #624]	; (32ea0 <getTrngSource+0x298>)
   32c30:	6811      	ldr	r1, [r2, #0]
   32c32:	6a62      	ldr	r2, [r4, #36]	; 0x24
   32c34:	681b      	ldr	r3, [r3, #0]
   32c36:	429a      	cmp	r2, r3
   32c38:	d148      	bne.n	32ccc <getTrngSource+0xc4>
   32c3a:	290a      	cmp	r1, #10
   32c3c:	d146      	bne.n	32ccc <getTrngSource+0xc4>
   32c3e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   32c42:	9304      	str	r3, [sp, #16]
   32c44:	4b97      	ldr	r3, [pc, #604]	; (32ea4 <getTrngSource+0x29c>)
   32c46:	fba3 230a 	umull	r2, r3, r3, sl
   32c4a:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   32c4e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   32c52:	f106 0208 	add.w	r2, r6, #8
   32c56:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   32c5a:	2304      	movs	r3, #4
   32c5c:	9203      	str	r2, [sp, #12]
   32c5e:	9302      	str	r3, [sp, #8]
   32c60:	46b8      	mov	r8, r7
   32c62:	9b16      	ldr	r3, [sp, #88]	; 0x58
   32c64:	f8c3 a000 	str.w	sl, [r3]
   32c68:	f1ba 0f00 	cmp.w	sl, #0
   32c6c:	f000 80c4 	beq.w	32df8 <getTrngSource+0x1f0>
   32c70:	9e03      	ldr	r6, [sp, #12]
   32c72:	4655      	mov	r5, sl
   32c74:	f04f 0900 	mov.w	r9, #0
   32c78:	f000 fc4e 	bl	33518 <LLF_RND_TurnOffTrng>
   32c7c:	2300      	movs	r3, #0
   32c7e:	9305      	str	r3, [sp, #20]
   32c80:	f1b8 0f00 	cmp.w	r8, #0
   32c84:	f000 80e6 	beq.w	32e54 <getTrngSource+0x24c>
   32c88:	2c00      	cmp	r4, #0
   32c8a:	f000 80e3 	beq.w	32e54 <getTrngSource+0x24c>
   32c8e:	9b04      	ldr	r3, [sp, #16]
   32c90:	2b00      	cmp	r3, #0
   32c92:	f000 80dd 	beq.w	32e50 <getTrngSource+0x248>
   32c96:	a904      	add	r1, sp, #16
   32c98:	4620      	mov	r0, r4
   32c9a:	f000 fc2d 	bl	334f8 <LLF_RND_GetFastestRosc>
   32c9e:	b1b8      	cbz	r0, 32cd0 <getTrngSource+0xc8>
   32ca0:	4b81      	ldr	r3, [pc, #516]	; (32ea8 <getTrngSource+0x2a0>)
   32ca2:	4298      	cmp	r0, r3
   32ca4:	f040 80a8 	bne.w	32df8 <getTrngSource+0x1f0>
   32ca8:	9002      	str	r0, [sp, #8]
   32caa:	f000 fc35 	bl	33518 <LLF_RND_TurnOffTrng>
   32cae:	9802      	ldr	r0, [sp, #8]
   32cb0:	b00d      	add	sp, #52	; 0x34
   32cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32cb6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   32cba:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   32cbe:	3001      	adds	r0, #1
   32cc0:	bf14      	ite	ne
   32cc2:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   32cc6:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   32cca:	e7a8      	b.n	32c1e <getTrngSource+0x16>
   32ccc:	4877      	ldr	r0, [pc, #476]	; (32eac <getTrngSource+0x2a4>)
   32cce:	e7eb      	b.n	32ca8 <getTrngSource+0xa0>
   32cd0:	9804      	ldr	r0, [sp, #16]
   32cd2:	4621      	mov	r1, r4
   32cd4:	f000 fbf2 	bl	334bc <LLF_RND_GetRoscSampleCnt>
   32cd8:	2800      	cmp	r0, #0
   32cda:	d1e1      	bne.n	32ca0 <getTrngSource+0x98>
   32cdc:	9f04      	ldr	r7, [sp, #16]
   32cde:	2f08      	cmp	r7, #8
   32ce0:	f000 80ba 	beq.w	32e58 <getTrngSource+0x250>
   32ce4:	2f04      	cmp	r7, #4
   32ce6:	f000 80b9 	beq.w	32e5c <getTrngSource+0x254>
   32cea:	f1a7 0702 	sub.w	r7, r7, #2
   32cee:	fab7 f787 	clz	r7, r7
   32cf2:	097f      	lsrs	r7, r7, #5
   32cf4:	496e      	ldr	r1, [pc, #440]	; (32eb0 <getTrngSource+0x2a8>)
   32cf6:	2301      	movs	r3, #1
   32cf8:	600b      	str	r3, [r1, #0]
   32cfa:	f841 3c84 	str.w	r3, [r1, #-132]
   32cfe:	4619      	mov	r1, r3
   32d00:	4b6b      	ldr	r3, [pc, #428]	; (32eb0 <getTrngSource+0x2a8>)
   32d02:	4867      	ldr	r0, [pc, #412]	; (32ea0 <getTrngSource+0x298>)
   32d04:	6019      	str	r1, [r3, #0]
   32d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32d08:	6003      	str	r3, [r0, #0]
   32d0a:	6800      	ldr	r0, [r0, #0]
   32d0c:	4283      	cmp	r3, r0
   32d0e:	d1f7      	bne.n	32d00 <getTrngSource+0xf8>
   32d10:	4a68      	ldr	r2, [pc, #416]	; (32eb4 <getTrngSource+0x2ac>)
   32d12:	2300      	movs	r3, #0
   32d14:	6013      	str	r3, [r2, #0]
   32d16:	f04f 30ff 	mov.w	r0, #4294967295
   32d1a:	f7ff fd05 	bl	32728 <CC_HalClearInterruptBit>
   32d1e:	2300      	movs	r3, #0
   32d20:	4618      	mov	r0, r3
   32d22:	4b65      	ldr	r3, [pc, #404]	; (32eb8 <getTrngSource+0x2b0>)
   32d24:	f06f 011b 	mvn.w	r1, #27
   32d28:	6019      	str	r1, [r3, #0]
   32d2a:	f7ff fd0b 	bl	32744 <CC_HalMaskInterrupt>
   32d2e:	4963      	ldr	r1, [pc, #396]	; (32ebc <getTrngSource+0x2b4>)
   32d30:	4b63      	ldr	r3, [pc, #396]	; (32ec0 <getTrngSource+0x2b8>)
   32d32:	600f      	str	r7, [r1, #0]
   32d34:	6818      	ldr	r0, [r3, #0]
   32d36:	4f5b      	ldr	r7, [pc, #364]	; (32ea4 <getTrngSource+0x29c>)
   32d38:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   32d3c:	f7ff fd02 	bl	32744 <CC_HalMaskInterrupt>
   32d40:	4b56      	ldr	r3, [pc, #344]	; (32e9c <getTrngSource+0x294>)
   32d42:	4860      	ldr	r0, [pc, #384]	; (32ec4 <getTrngSource+0x2bc>)
   32d44:	210a      	movs	r1, #10
   32d46:	6019      	str	r1, [r3, #0]
   32d48:	6921      	ldr	r1, [r4, #16]
   32d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32d4c:	fba7 c101 	umull	ip, r1, r7, r1
   32d50:	0909      	lsrs	r1, r1, #4
   32d52:	fb03 f301 	mul.w	r3, r3, r1
   32d56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   32d5a:	03db      	lsls	r3, r3, #15
   32d5c:	099b      	lsrs	r3, r3, #6
   32d5e:	6003      	str	r3, [r0, #0]
   32d60:	4b54      	ldr	r3, [pc, #336]	; (32eb4 <getTrngSource+0x2ac>)
   32d62:	2201      	movs	r2, #1
   32d64:	601a      	str	r2, [r3, #0]
   32d66:	9904      	ldr	r1, [sp, #16]
   32d68:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   32d6c:	020b      	lsls	r3, r1, #8
   32d6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   32d72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   32d76:	4313      	orrs	r3, r2
   32d78:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   32d7c:	a805      	add	r0, sp, #20
   32d7e:	f000 fb8d 	bl	3349c <LLF_RND_WaitRngInterrupt>
   32d82:	9b05      	ldr	r3, [sp, #20]
   32d84:	f003 031a 	and.w	r3, r3, #26
   32d88:	4303      	orrs	r3, r0
   32d8a:	d135      	bne.n	32df8 <getTrngSource+0x1f0>
   32d8c:	4a4e      	ldr	r2, [pc, #312]	; (32ec8 <getTrngSource+0x2c0>)
   32d8e:	4b4f      	ldr	r3, [pc, #316]	; (32ecc <getTrngSource+0x2c4>)
   32d90:	6812      	ldr	r2, [r2, #0]
   32d92:	9206      	str	r2, [sp, #24]
   32d94:	681a      	ldr	r2, [r3, #0]
   32d96:	9207      	str	r2, [sp, #28]
   32d98:	685a      	ldr	r2, [r3, #4]
   32d9a:	9208      	str	r2, [sp, #32]
   32d9c:	689a      	ldr	r2, [r3, #8]
   32d9e:	9209      	str	r2, [sp, #36]	; 0x24
   32da0:	68da      	ldr	r2, [r3, #12]
   32da2:	920a      	str	r2, [sp, #40]	; 0x28
   32da4:	3310      	adds	r3, #16
   32da6:	fba7 2705 	umull	r2, r7, r7, r5
   32daa:	681b      	ldr	r3, [r3, #0]
   32dac:	930b      	str	r3, [sp, #44]	; 0x2c
   32dae:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   32db2:	d102      	bne.n	32dba <getTrngSource+0x1b2>
   32db4:	f1bb 0f00 	cmp.w	fp, #0
   32db8:	d141      	bne.n	32e3e <getTrngSource+0x236>
   32dba:	2218      	movs	r2, #24
   32dbc:	4630      	mov	r0, r6
   32dbe:	eb0d 0102 	add.w	r1, sp, r2
   32dc2:	f000 fb0f 	bl	333e4 <CC_PalMemCopyPlat>
   32dc6:	3d18      	subs	r5, #24
   32dc8:	3618      	adds	r6, #24
   32dca:	f109 0901 	add.w	r9, r9, #1
   32dce:	2d00      	cmp	r5, #0
   32dd0:	f47f af52 	bne.w	32c78 <getTrngSource+0x70>
   32dd4:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   32dd8:	d85d      	bhi.n	32e96 <getTrngSource+0x28e>
   32dda:	9d03      	ldr	r5, [sp, #12]
   32ddc:	6962      	ldr	r2, [r4, #20]
   32dde:	4651      	mov	r1, sl
   32de0:	4628      	mov	r0, r5
   32de2:	f7ff fe7b 	bl	32adc <LLF_RND_RepetitionCounterTest.part.0>
   32de6:	2800      	cmp	r0, #0
   32de8:	d04b      	beq.n	32e82 <getTrngSource+0x27a>
   32dea:	9a16      	ldr	r2, [sp, #88]	; 0x58
   32dec:	2300      	movs	r3, #0
   32dee:	6013      	str	r3, [r2, #0]
   32df0:	4b2d      	ldr	r3, [pc, #180]	; (32ea8 <getTrngSource+0x2a0>)
   32df2:	4298      	cmp	r0, r3
   32df4:	f43f af58 	beq.w	32ca8 <getTrngSource+0xa0>
   32df8:	9d04      	ldr	r5, [sp, #16]
   32dfa:	2d08      	cmp	r5, #8
   32dfc:	d034      	beq.n	32e68 <getTrngSource+0x260>
   32dfe:	2200      	movs	r2, #0
   32e00:	ab04      	add	r3, sp, #16
   32e02:	006d      	lsls	r5, r5, #1
   32e04:	9200      	str	r2, [sp, #0]
   32e06:	4621      	mov	r1, r4
   32e08:	4640      	mov	r0, r8
   32e0a:	9504      	str	r5, [sp, #16]
   32e0c:	f7ff fdb8 	bl	32980 <startTrngHW>
   32e10:	4b2f      	ldr	r3, [pc, #188]	; (32ed0 <getTrngSource+0x2c8>)
   32e12:	4298      	cmp	r0, r3
   32e14:	d024      	beq.n	32e60 <getTrngSource+0x258>
   32e16:	2800      	cmp	r0, #0
   32e18:	f47f af46 	bne.w	32ca8 <getTrngSource+0xa0>
   32e1c:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   32e20:	0a13      	lsrs	r3, r2, #8
   32e22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   32e26:	4313      	orrs	r3, r2
   32e28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   32e2c:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   32e30:	9b02      	ldr	r3, [sp, #8]
   32e32:	3b01      	subs	r3, #1
   32e34:	9302      	str	r3, [sp, #8]
   32e36:	f47f af14 	bne.w	32c62 <getTrngSource+0x5a>
   32e3a:	2000      	movs	r0, #0
   32e3c:	e734      	b.n	32ca8 <getTrngSource+0xa0>
   32e3e:	4630      	mov	r0, r6
   32e40:	465a      	mov	r2, fp
   32e42:	a906      	add	r1, sp, #24
   32e44:	f000 face 	bl	333e4 <CC_PalMemCopyPlat>
   32e48:	eba5 050b 	sub.w	r5, r5, fp
   32e4c:	445e      	add	r6, fp
   32e4e:	e7bc      	b.n	32dca <getTrngSource+0x1c2>
   32e50:	481f      	ldr	r0, [pc, #124]	; (32ed0 <getTrngSource+0x2c8>)
   32e52:	e725      	b.n	32ca0 <getTrngSource+0x98>
   32e54:	481f      	ldr	r0, [pc, #124]	; (32ed4 <getTrngSource+0x2cc>)
   32e56:	e723      	b.n	32ca0 <getTrngSource+0x98>
   32e58:	2703      	movs	r7, #3
   32e5a:	e74b      	b.n	32cf4 <getTrngSource+0xec>
   32e5c:	2702      	movs	r7, #2
   32e5e:	e749      	b.n	32cf4 <getTrngSource+0xec>
   32e60:	6a23      	ldr	r3, [r4, #32]
   32e62:	2b00      	cmp	r3, #0
   32e64:	f43f af20 	beq.w	32ca8 <getTrngSource+0xa0>
   32e68:	481b      	ldr	r0, [pc, #108]	; (32ed8 <getTrngSource+0x2d0>)
   32e6a:	e71d      	b.n	32ca8 <getTrngSource+0xa0>
   32e6c:	9500      	str	r5, [sp, #0]
   32e6e:	ab04      	add	r3, sp, #16
   32e70:	2201      	movs	r2, #1
   32e72:	4621      	mov	r1, r4
   32e74:	4638      	mov	r0, r7
   32e76:	f7ff fd83 	bl	32980 <startTrngHW>
   32e7a:	2800      	cmp	r0, #0
   32e7c:	f43f aee2 	beq.w	32c44 <getTrngSource+0x3c>
   32e80:	e712      	b.n	32ca8 <getTrngSource+0xa0>
   32e82:	69a2      	ldr	r2, [r4, #24]
   32e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
   32e88:	4651      	mov	r1, sl
   32e8a:	4628      	mov	r0, r5
   32e8c:	f7ff fe54 	bl	32b38 <LLF_RND_AdaptiveProportionTest>
   32e90:	2800      	cmp	r0, #0
   32e92:	d1aa      	bne.n	32dea <getTrngSource+0x1e2>
   32e94:	e7d1      	b.n	32e3a <getTrngSource+0x232>
   32e96:	9b16      	ldr	r3, [sp, #88]	; 0x58
   32e98:	601d      	str	r5, [r3, #0]
   32e9a:	e7ad      	b.n	32df8 <getTrngSource+0x1f0>
   32e9c:	5002b138 	.word	0x5002b138
   32ea0:	5002b130 	.word	0x5002b130
   32ea4:	aaaaaaab 	.word	0xaaaaaaab
   32ea8:	00f10c02 	.word	0x00f10c02
   32eac:	00f10c30 	.word	0x00f10c30
   32eb0:	5002b1c4 	.word	0x5002b1c4
   32eb4:	5002b12c 	.word	0x5002b12c
   32eb8:	5002b100 	.word	0x5002b100
   32ebc:	5002b10c 	.word	0x5002b10c
   32ec0:	5002ba04 	.word	0x5002ba04
   32ec4:	5002b1d8 	.word	0x5002b1d8
   32ec8:	5002b114 	.word	0x5002b114
   32ecc:	5002b118 	.word	0x5002b118
   32ed0:	00f10c31 	.word	0x00f10c31
   32ed4:	00f10c35 	.word	0x00f10c35
   32ed8:	00f10c32 	.word	0x00f10c32

00032edc <LLF_RND_GetTrngSource>:
   32edc:	b430      	push	{r4, r5}
   32ede:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   32ee2:	9d04      	ldr	r5, [sp, #16]
   32ee4:	9402      	str	r4, [sp, #8]
   32ee6:	2400      	movs	r4, #0
   32ee8:	e9cd 5403 	strd	r5, r4, [sp, #12]
   32eec:	bc30      	pop	{r4, r5}
   32eee:	f7ff be8b 	b.w	32c08 <getTrngSource>
   32ef2:	bf00      	nop

00032ef4 <LLF_RND_RunTrngStartupTest>:
   32ef4:	b510      	push	{r4, lr}
   32ef6:	b086      	sub	sp, #24
   32ef8:	ab05      	add	r3, sp, #20
   32efa:	2401      	movs	r4, #1
   32efc:	e9cd 2401 	strd	r2, r4, [sp, #4]
   32f00:	9300      	str	r3, [sp, #0]
   32f02:	2200      	movs	r2, #0
   32f04:	ab04      	add	r3, sp, #16
   32f06:	f7ff fe7f 	bl	32c08 <getTrngSource>
   32f0a:	b006      	add	sp, #24
   32f0c:	bd10      	pop	{r4, pc}
   32f0e:	bf00      	nop

00032f10 <mbedtls_hardware_poll>:
   32f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   32f12:	b089      	sub	sp, #36	; 0x24
   32f14:	9205      	str	r2, [sp, #20]
   32f16:	2900      	cmp	r1, #0
   32f18:	d064      	beq.n	32fe4 <mbedtls_hardware_poll+0xd4>
   32f1a:	461c      	mov	r4, r3
   32f1c:	2b00      	cmp	r3, #0
   32f1e:	d061      	beq.n	32fe4 <mbedtls_hardware_poll+0xd4>
   32f20:	4615      	mov	r5, r2
   32f22:	2a00      	cmp	r2, #0
   32f24:	d05e      	beq.n	32fe4 <mbedtls_hardware_poll+0xd4>
   32f26:	4f31      	ldr	r7, [pc, #196]	; (32fec <mbedtls_hardware_poll+0xdc>)
   32f28:	460e      	mov	r6, r1
   32f2a:	6838      	ldr	r0, [r7, #0]
   32f2c:	f04f 31ff 	mov.w	r1, #4294967295
   32f30:	f7ff fca2 	bl	32878 <CC_PalMutexLock>
   32f34:	2800      	cmp	r0, #0
   32f36:	d14b      	bne.n	32fd0 <mbedtls_hardware_poll+0xc0>
   32f38:	2000      	movs	r0, #0
   32f3a:	f7ff fccd 	bl	328d8 <CC_PalPowerSaveModeSelect>
   32f3e:	2800      	cmp	r0, #0
   32f40:	d142      	bne.n	32fc8 <mbedtls_hardware_poll+0xb8>
   32f42:	482b      	ldr	r0, [pc, #172]	; (32ff0 <mbedtls_hardware_poll+0xe0>)
   32f44:	f000 fa12 	bl	3336c <RNG_PLAT_SetUserRngParameters>
   32f48:	b1d8      	cbz	r0, 32f82 <mbedtls_hardware_poll+0x72>
   32f4a:	2001      	movs	r0, #1
   32f4c:	f04f 36ff 	mov.w	r6, #4294967295
   32f50:	f7ff fcc2 	bl	328d8 <CC_PalPowerSaveModeSelect>
   32f54:	2800      	cmp	r0, #0
   32f56:	d133      	bne.n	32fc0 <mbedtls_hardware_poll+0xb0>
   32f58:	4826      	ldr	r0, [pc, #152]	; (32ff4 <mbedtls_hardware_poll+0xe4>)
   32f5a:	f44f 7108 	mov.w	r1, #544	; 0x220
   32f5e:	f7fe fe47 	bl	31bf0 <mbedtls_zeroize_internal>
   32f62:	4825      	ldr	r0, [pc, #148]	; (32ff8 <mbedtls_hardware_poll+0xe8>)
   32f64:	21dc      	movs	r1, #220	; 0xdc
   32f66:	f7fe fe43 	bl	31bf0 <mbedtls_zeroize_internal>
   32f6a:	4821      	ldr	r0, [pc, #132]	; (32ff0 <mbedtls_hardware_poll+0xe0>)
   32f6c:	2128      	movs	r1, #40	; 0x28
   32f6e:	f7fe fe3f 	bl	31bf0 <mbedtls_zeroize_internal>
   32f72:	6838      	ldr	r0, [r7, #0]
   32f74:	f7ff fc88 	bl	32888 <CC_PalMutexUnlock>
   32f78:	2800      	cmp	r0, #0
   32f7a:	d12d      	bne.n	32fd8 <mbedtls_hardware_poll+0xc8>
   32f7c:	4630      	mov	r0, r6
   32f7e:	b009      	add	sp, #36	; 0x24
   32f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32f82:	491c      	ldr	r1, [pc, #112]	; (32ff4 <mbedtls_hardware_poll+0xe4>)
   32f84:	9003      	str	r0, [sp, #12]
   32f86:	ab07      	add	r3, sp, #28
   32f88:	4602      	mov	r2, r0
   32f8a:	9102      	str	r1, [sp, #8]
   32f8c:	9300      	str	r3, [sp, #0]
   32f8e:	4918      	ldr	r1, [pc, #96]	; (32ff0 <mbedtls_hardware_poll+0xe0>)
   32f90:	4819      	ldr	r0, [pc, #100]	; (32ff8 <mbedtls_hardware_poll+0xe8>)
   32f92:	9401      	str	r4, [sp, #4]
   32f94:	ab05      	add	r3, sp, #20
   32f96:	f7ff ffa1 	bl	32edc <LLF_RND_GetTrngSource>
   32f9a:	4603      	mov	r3, r0
   32f9c:	2800      	cmp	r0, #0
   32f9e:	d1d4      	bne.n	32f4a <mbedtls_hardware_poll+0x3a>
   32fa0:	6822      	ldr	r2, [r4, #0]
   32fa2:	42aa      	cmp	r2, r5
   32fa4:	d3d1      	bcc.n	32f4a <mbedtls_hardware_poll+0x3a>
   32fa6:	9907      	ldr	r1, [sp, #28]
   32fa8:	4630      	mov	r0, r6
   32faa:	3108      	adds	r1, #8
   32fac:	462a      	mov	r2, r5
   32fae:	461e      	mov	r6, r3
   32fb0:	f000 fa18 	bl	333e4 <CC_PalMemCopyPlat>
   32fb4:	6025      	str	r5, [r4, #0]
   32fb6:	2001      	movs	r0, #1
   32fb8:	f7ff fc8e 	bl	328d8 <CC_PalPowerSaveModeSelect>
   32fbc:	2800      	cmp	r0, #0
   32fbe:	d0cb      	beq.n	32f58 <mbedtls_hardware_poll+0x48>
   32fc0:	480e      	ldr	r0, [pc, #56]	; (32ffc <mbedtls_hardware_poll+0xec>)
   32fc2:	f7fe fd0d 	bl	319e0 <CC_PalAbort>
   32fc6:	e7c7      	b.n	32f58 <mbedtls_hardware_poll+0x48>
   32fc8:	480d      	ldr	r0, [pc, #52]	; (33000 <mbedtls_hardware_poll+0xf0>)
   32fca:	f7fe fd09 	bl	319e0 <CC_PalAbort>
   32fce:	e7b8      	b.n	32f42 <mbedtls_hardware_poll+0x32>
   32fd0:	480c      	ldr	r0, [pc, #48]	; (33004 <mbedtls_hardware_poll+0xf4>)
   32fd2:	f7fe fd05 	bl	319e0 <CC_PalAbort>
   32fd6:	e7af      	b.n	32f38 <mbedtls_hardware_poll+0x28>
   32fd8:	480b      	ldr	r0, [pc, #44]	; (33008 <mbedtls_hardware_poll+0xf8>)
   32fda:	f7fe fd01 	bl	319e0 <CC_PalAbort>
   32fde:	4630      	mov	r0, r6
   32fe0:	b009      	add	sp, #36	; 0x24
   32fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32fe4:	f04f 36ff 	mov.w	r6, #4294967295
   32fe8:	e7c8      	b.n	32f7c <mbedtls_hardware_poll+0x6c>
   32fea:	bf00      	nop
   32fec:	20000970 	.word	0x20000970
   32ff0:	2000d950 	.word	0x2000d950
   32ff4:	2000d730 	.word	0x2000d730
   32ff8:	2000d654 	.word	0x2000d654
   32ffc:	00040b3c 	.word	0x00040b3c
   33000:	00040b1c 	.word	0x00040b1c
   33004:	00040b04 	.word	0x00040b04
   33008:	00040b94 	.word	0x00040b94

0003300c <cc_mbedtls_aes_init>:
   3300c:	b510      	push	{r4, lr}
   3300e:	4604      	mov	r4, r0
   33010:	b130      	cbz	r0, 33020 <cc_mbedtls_aes_init+0x14>
   33012:	2200      	movs	r2, #0
   33014:	2301      	movs	r3, #1
   33016:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   3301a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   3301e:	bd10      	pop	{r4, pc}
   33020:	4801      	ldr	r0, [pc, #4]	; (33028 <cc_mbedtls_aes_init+0x1c>)
   33022:	f7fe fcdd 	bl	319e0 <CC_PalAbort>
   33026:	e7f4      	b.n	33012 <cc_mbedtls_aes_init+0x6>
   33028:	00040bac 	.word	0x00040bac

0003302c <cc_mbedtls_aes_free>:
   3302c:	b118      	cbz	r0, 33036 <cc_mbedtls_aes_free+0xa>
   3302e:	2274      	movs	r2, #116	; 0x74
   33030:	2100      	movs	r1, #0
   33032:	f000 b9d9 	b.w	333e8 <CC_PalMemSetPlat>
   33036:	4770      	bx	lr

00033038 <cc_mbedtls_aes_setkey_enc>:
   33038:	b190      	cbz	r0, 33060 <cc_mbedtls_aes_setkey_enc+0x28>
   3303a:	b1a1      	cbz	r1, 33066 <cc_mbedtls_aes_setkey_enc+0x2e>
   3303c:	b510      	push	{r4, lr}
   3303e:	2a80      	cmp	r2, #128	; 0x80
   33040:	f04f 0400 	mov.w	r4, #0
   33044:	6384      	str	r4, [r0, #56]	; 0x38
   33046:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   3304a:	d106      	bne.n	3305a <cc_mbedtls_aes_setkey_enc+0x22>
   3304c:	6304      	str	r4, [r0, #48]	; 0x30
   3304e:	2210      	movs	r2, #16
   33050:	3010      	adds	r0, #16
   33052:	f000 f9c7 	bl	333e4 <CC_PalMemCopyPlat>
   33056:	4620      	mov	r0, r4
   33058:	bd10      	pop	{r4, pc}
   3305a:	f06f 001f 	mvn.w	r0, #31
   3305e:	bd10      	pop	{r4, pc}
   33060:	f06f 0021 	mvn.w	r0, #33	; 0x21
   33064:	4770      	bx	lr
   33066:	f06f 001f 	mvn.w	r0, #31
   3306a:	4770      	bx	lr

0003306c <cc_mbedtls_aes_crypt_ecb>:
   3306c:	b320      	cbz	r0, 330b8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   3306e:	b31a      	cbz	r2, 330b8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   33070:	b313      	cbz	r3, 330b8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   33072:	2901      	cmp	r1, #1
   33074:	d820      	bhi.n	330b8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   33076:	b570      	push	{r4, r5, r6, lr}
   33078:	4604      	mov	r4, r0
   3307a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   3307c:	b086      	sub	sp, #24
   3307e:	d016      	beq.n	330ae <cc_mbedtls_aes_crypt_ecb+0x42>
   33080:	2901      	cmp	r1, #1
   33082:	d116      	bne.n	330b2 <cc_mbedtls_aes_crypt_ecb+0x46>
   33084:	2100      	movs	r1, #0
   33086:	2510      	movs	r5, #16
   33088:	ae04      	add	r6, sp, #16
   3308a:	6361      	str	r1, [r4, #52]	; 0x34
   3308c:	4610      	mov	r0, r2
   3308e:	e9cd 5600 	strd	r5, r6, [sp]
   33092:	aa02      	add	r2, sp, #8
   33094:	4629      	mov	r1, r5
   33096:	f000 fa4d 	bl	33534 <SetDataBuffersInfo>
   3309a:	b950      	cbnz	r0, 330b2 <cc_mbedtls_aes_crypt_ecb+0x46>
   3309c:	462b      	mov	r3, r5
   3309e:	4632      	mov	r2, r6
   330a0:	a902      	add	r1, sp, #8
   330a2:	4620      	mov	r0, r4
   330a4:	f000 fcda 	bl	33a5c <ProcessAesDrv>
   330a8:	b918      	cbnz	r0, 330b2 <cc_mbedtls_aes_crypt_ecb+0x46>
   330aa:	b006      	add	sp, #24
   330ac:	bd70      	pop	{r4, r5, r6, pc}
   330ae:	2900      	cmp	r1, #0
   330b0:	d0e8      	beq.n	33084 <cc_mbedtls_aes_crypt_ecb+0x18>
   330b2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   330b6:	e7f8      	b.n	330aa <cc_mbedtls_aes_crypt_ecb+0x3e>
   330b8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   330bc:	4770      	bx	lr
   330be:	bf00      	nop

000330c0 <cc_mbedtls_sha256_init>:
   330c0:	b510      	push	{r4, lr}
   330c2:	4604      	mov	r4, r0
   330c4:	b128      	cbz	r0, 330d2 <cc_mbedtls_sha256_init+0x12>
   330c6:	4620      	mov	r0, r4
   330c8:	21f0      	movs	r1, #240	; 0xf0
   330ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   330ce:	f000 b98d 	b.w	333ec <CC_PalMemSetZeroPlat>
   330d2:	4804      	ldr	r0, [pc, #16]	; (330e4 <cc_mbedtls_sha256_init+0x24>)
   330d4:	f7fe fc84 	bl	319e0 <CC_PalAbort>
   330d8:	4620      	mov	r0, r4
   330da:	21f0      	movs	r1, #240	; 0xf0
   330dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   330e0:	f000 b984 	b.w	333ec <CC_PalMemSetZeroPlat>
   330e4:	00040bc0 	.word	0x00040bc0

000330e8 <cc_mbedtls_sha256_free>:
   330e8:	b110      	cbz	r0, 330f0 <cc_mbedtls_sha256_free+0x8>
   330ea:	21f0      	movs	r1, #240	; 0xf0
   330ec:	f7fe bd80 	b.w	31bf0 <mbedtls_zeroize_internal>
   330f0:	4770      	bx	lr
   330f2:	bf00      	nop

000330f4 <cc_mbedtls_sha256_starts>:
   330f4:	b508      	push	{r3, lr}
   330f6:	b161      	cbz	r1, 33112 <cc_mbedtls_sha256_starts+0x1e>
   330f8:	2901      	cmp	r1, #1
   330fa:	d107      	bne.n	3310c <cc_mbedtls_sha256_starts+0x18>
   330fc:	2102      	movs	r1, #2
   330fe:	f000 f85b 	bl	331b8 <mbedtls_sha_starts_internal>
   33102:	2800      	cmp	r0, #0
   33104:	bf18      	it	ne
   33106:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   3310a:	bd08      	pop	{r3, pc}
   3310c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   33110:	bd08      	pop	{r3, pc}
   33112:	2101      	movs	r1, #1
   33114:	f000 f850 	bl	331b8 <mbedtls_sha_starts_internal>
   33118:	e7f3      	b.n	33102 <cc_mbedtls_sha256_starts+0xe>
   3311a:	bf00      	nop

0003311c <cc_mbedtls_sha256_update>:
   3311c:	b570      	push	{r4, r5, r6, lr}
   3311e:	188e      	adds	r6, r1, r2
   33120:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   33124:	b0a0      	sub	sp, #128	; 0x80
   33126:	460b      	mov	r3, r1
   33128:	4614      	mov	r4, r2
   3312a:	4605      	mov	r5, r0
   3312c:	d801      	bhi.n	33132 <cc_mbedtls_sha256_update+0x16>
   3312e:	2a80      	cmp	r2, #128	; 0x80
   33130:	d90c      	bls.n	3314c <cc_mbedtls_sha256_update+0x30>
   33132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   33136:	d917      	bls.n	33168 <cc_mbedtls_sha256_update+0x4c>
   33138:	4622      	mov	r2, r4
   3313a:	4619      	mov	r1, r3
   3313c:	4628      	mov	r0, r5
   3313e:	f000 f87d 	bl	3323c <mbedtls_sha_update_internal>
   33142:	4604      	mov	r4, r0
   33144:	b984      	cbnz	r4, 33168 <cc_mbedtls_sha256_update+0x4c>
   33146:	4620      	mov	r0, r4
   33148:	b020      	add	sp, #128	; 0x80
   3314a:	bd70      	pop	{r4, r5, r6, pc}
   3314c:	4668      	mov	r0, sp
   3314e:	f000 f949 	bl	333e4 <CC_PalMemCopyPlat>
   33152:	4622      	mov	r2, r4
   33154:	4669      	mov	r1, sp
   33156:	4628      	mov	r0, r5
   33158:	f000 f870 	bl	3323c <mbedtls_sha_update_internal>
   3315c:	2180      	movs	r1, #128	; 0x80
   3315e:	4604      	mov	r4, r0
   33160:	4668      	mov	r0, sp
   33162:	f000 f943 	bl	333ec <CC_PalMemSetZeroPlat>
   33166:	e7ed      	b.n	33144 <cc_mbedtls_sha256_update+0x28>
   33168:	f06f 0436 	mvn.w	r4, #54	; 0x36
   3316c:	e7eb      	b.n	33146 <cc_mbedtls_sha256_update+0x2a>
   3316e:	bf00      	nop

00033170 <cc_mbedtls_sha256_finish>:
   33170:	b570      	push	{r4, r5, r6, lr}
   33172:	b1e8      	cbz	r0, 331b0 <cc_mbedtls_sha256_finish+0x40>
   33174:	460e      	mov	r6, r1
   33176:	b1d9      	cbz	r1, 331b0 <cc_mbedtls_sha256_finish+0x40>
   33178:	4604      	mov	r4, r0
   3317a:	f000 f831 	bl	331e0 <mbedtls_sha_finish_internal>
   3317e:	4605      	mov	r5, r0
   33180:	b9b0      	cbnz	r0, 331b0 <cc_mbedtls_sha256_finish+0x40>
   33182:	6823      	ldr	r3, [r4, #0]
   33184:	2b01      	cmp	r3, #1
   33186:	d00b      	beq.n	331a0 <cc_mbedtls_sha256_finish+0x30>
   33188:	2b02      	cmp	r3, #2
   3318a:	d001      	beq.n	33190 <cc_mbedtls_sha256_finish+0x20>
   3318c:	4628      	mov	r0, r5
   3318e:	bd70      	pop	{r4, r5, r6, pc}
   33190:	f104 0108 	add.w	r1, r4, #8
   33194:	4630      	mov	r0, r6
   33196:	221c      	movs	r2, #28
   33198:	f000 f924 	bl	333e4 <CC_PalMemCopyPlat>
   3319c:	4628      	mov	r0, r5
   3319e:	bd70      	pop	{r4, r5, r6, pc}
   331a0:	f104 0108 	add.w	r1, r4, #8
   331a4:	4630      	mov	r0, r6
   331a6:	2220      	movs	r2, #32
   331a8:	f000 f91c 	bl	333e4 <CC_PalMemCopyPlat>
   331ac:	4628      	mov	r0, r5
   331ae:	bd70      	pop	{r4, r5, r6, pc}
   331b0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   331b4:	e7ea      	b.n	3318c <cc_mbedtls_sha256_finish+0x1c>
   331b6:	bf00      	nop

000331b8 <mbedtls_sha_starts_internal>:
   331b8:	b178      	cbz	r0, 331da <mbedtls_sha_starts_internal+0x22>
   331ba:	b538      	push	{r3, r4, r5, lr}
   331bc:	4604      	mov	r4, r0
   331be:	460d      	mov	r5, r1
   331c0:	21f0      	movs	r1, #240	; 0xf0
   331c2:	f000 f913 	bl	333ec <CC_PalMemSetZeroPlat>
   331c6:	2340      	movs	r3, #64	; 0x40
   331c8:	6025      	str	r5, [r4, #0]
   331ca:	65e3      	str	r3, [r4, #92]	; 0x5c
   331cc:	4620      	mov	r0, r4
   331ce:	f000 f9e5 	bl	3359c <InitHashDrv>
   331d2:	3800      	subs	r0, #0
   331d4:	bf18      	it	ne
   331d6:	2001      	movne	r0, #1
   331d8:	bd38      	pop	{r3, r4, r5, pc}
   331da:	2001      	movs	r0, #1
   331dc:	4770      	bx	lr
   331de:	bf00      	nop

000331e0 <mbedtls_sha_finish_internal>:
   331e0:	b570      	push	{r4, r5, r6, lr}
   331e2:	6e05      	ldr	r5, [r0, #96]	; 0x60
   331e4:	b0a4      	sub	sp, #144	; 0x90
   331e6:	4604      	mov	r4, r0
   331e8:	ae04      	add	r6, sp, #16
   331ea:	b9e5      	cbnz	r5, 33226 <mbedtls_sha_finish_internal+0x46>
   331ec:	2201      	movs	r2, #1
   331ee:	2300      	movs	r3, #0
   331f0:	6062      	str	r2, [r4, #4]
   331f2:	4630      	mov	r0, r6
   331f4:	e9cd 3300 	strd	r3, r3, [sp]
   331f8:	aa02      	add	r2, sp, #8
   331fa:	4629      	mov	r1, r5
   331fc:	f000 f99a 	bl	33534 <SetDataBuffersInfo>
   33200:	b110      	cbz	r0, 33208 <mbedtls_sha_finish_internal+0x28>
   33202:	2001      	movs	r0, #1
   33204:	b024      	add	sp, #144	; 0x90
   33206:	bd70      	pop	{r4, r5, r6, pc}
   33208:	462a      	mov	r2, r5
   3320a:	a902      	add	r1, sp, #8
   3320c:	4620      	mov	r0, r4
   3320e:	f000 f9ef 	bl	335f0 <ProcessHashDrv>
   33212:	2800      	cmp	r0, #0
   33214:	d1f5      	bne.n	33202 <mbedtls_sha_finish_internal+0x22>
   33216:	4620      	mov	r0, r4
   33218:	f000 fb18 	bl	3384c <FinishHashDrv>
   3321c:	2800      	cmp	r0, #0
   3321e:	d1f0      	bne.n	33202 <mbedtls_sha_finish_internal+0x22>
   33220:	6620      	str	r0, [r4, #96]	; 0x60
   33222:	b024      	add	sp, #144	; 0x90
   33224:	bd70      	pop	{r4, r5, r6, pc}
   33226:	2d80      	cmp	r5, #128	; 0x80
   33228:	462a      	mov	r2, r5
   3322a:	4630      	mov	r0, r6
   3322c:	bf28      	it	cs
   3322e:	2280      	movcs	r2, #128	; 0x80
   33230:	f104 0164 	add.w	r1, r4, #100	; 0x64
   33234:	f000 f8d6 	bl	333e4 <CC_PalMemCopyPlat>
   33238:	6e25      	ldr	r5, [r4, #96]	; 0x60
   3323a:	e7d7      	b.n	331ec <mbedtls_sha_finish_internal+0xc>

0003323c <mbedtls_sha_update_internal>:
   3323c:	2800      	cmp	r0, #0
   3323e:	d054      	beq.n	332ea <mbedtls_sha_update_internal+0xae>
   33240:	b5f0      	push	{r4, r5, r6, r7, lr}
   33242:	4614      	mov	r4, r2
   33244:	b0a5      	sub	sp, #148	; 0x94
   33246:	b1b2      	cbz	r2, 33276 <mbedtls_sha_update_internal+0x3a>
   33248:	460e      	mov	r6, r1
   3324a:	b351      	cbz	r1, 332a2 <mbedtls_sha_update_internal+0x66>
   3324c:	4605      	mov	r5, r0
   3324e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   33252:	1a1a      	subs	r2, r3, r0
   33254:	fbb2 f7f3 	udiv	r7, r2, r3
   33258:	fb03 2717 	mls	r7, r3, r7, r2
   3325c:	42a7      	cmp	r7, r4
   3325e:	bf28      	it	cs
   33260:	4627      	movcs	r7, r4
   33262:	2f00      	cmp	r7, #0
   33264:	d143      	bne.n	332ee <mbedtls_sha_update_internal+0xb2>
   33266:	4283      	cmp	r3, r0
   33268:	d008      	beq.n	3327c <mbedtls_sha_update_internal+0x40>
   3326a:	fbb4 f7f3 	udiv	r7, r4, r3
   3326e:	fb03 f707 	mul.w	r7, r3, r7
   33272:	b9cf      	cbnz	r7, 332a8 <mbedtls_sha_update_internal+0x6c>
   33274:	bb6c      	cbnz	r4, 332d2 <mbedtls_sha_update_internal+0x96>
   33276:	2000      	movs	r0, #0
   33278:	b025      	add	sp, #148	; 0x94
   3327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3327c:	2b80      	cmp	r3, #128	; 0x80
   3327e:	bf28      	it	cs
   33280:	2380      	movcs	r3, #128	; 0x80
   33282:	461a      	mov	r2, r3
   33284:	f105 0164 	add.w	r1, r5, #100	; 0x64
   33288:	a804      	add	r0, sp, #16
   3328a:	f000 f8ab 	bl	333e4 <CC_PalMemCopyPlat>
   3328e:	2300      	movs	r3, #0
   33290:	e9cd 3300 	strd	r3, r3, [sp]
   33294:	a804      	add	r0, sp, #16
   33296:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   33298:	aa02      	add	r2, sp, #8
   3329a:	f000 f94b 	bl	33534 <SetDataBuffersInfo>
   3329e:	2800      	cmp	r0, #0
   332a0:	d032      	beq.n	33308 <mbedtls_sha_update_internal+0xcc>
   332a2:	2001      	movs	r0, #1
   332a4:	b025      	add	sp, #148	; 0x94
   332a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   332a8:	2300      	movs	r3, #0
   332aa:	e9cd 3300 	strd	r3, r3, [sp]
   332ae:	aa02      	add	r2, sp, #8
   332b0:	4639      	mov	r1, r7
   332b2:	4630      	mov	r0, r6
   332b4:	f000 f93e 	bl	33534 <SetDataBuffersInfo>
   332b8:	2800      	cmp	r0, #0
   332ba:	d1f2      	bne.n	332a2 <mbedtls_sha_update_internal+0x66>
   332bc:	a902      	add	r1, sp, #8
   332be:	463a      	mov	r2, r7
   332c0:	4628      	mov	r0, r5
   332c2:	f000 f995 	bl	335f0 <ProcessHashDrv>
   332c6:	2800      	cmp	r0, #0
   332c8:	d1eb      	bne.n	332a2 <mbedtls_sha_update_internal+0x66>
   332ca:	1be4      	subs	r4, r4, r7
   332cc:	443e      	add	r6, r7
   332ce:	2c00      	cmp	r4, #0
   332d0:	d0d1      	beq.n	33276 <mbedtls_sha_update_internal+0x3a>
   332d2:	6e28      	ldr	r0, [r5, #96]	; 0x60
   332d4:	3019      	adds	r0, #25
   332d6:	4622      	mov	r2, r4
   332d8:	4631      	mov	r1, r6
   332da:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   332de:	f000 f881 	bl	333e4 <CC_PalMemCopyPlat>
   332e2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   332e4:	4422      	add	r2, r4
   332e6:	662a      	str	r2, [r5, #96]	; 0x60
   332e8:	e7c5      	b.n	33276 <mbedtls_sha_update_internal+0x3a>
   332ea:	2001      	movs	r0, #1
   332ec:	4770      	bx	lr
   332ee:	f105 0364 	add.w	r3, r5, #100	; 0x64
   332f2:	4418      	add	r0, r3
   332f4:	463a      	mov	r2, r7
   332f6:	f000 f875 	bl	333e4 <CC_PalMemCopyPlat>
   332fa:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   332fe:	4438      	add	r0, r7
   33300:	443e      	add	r6, r7
   33302:	1be4      	subs	r4, r4, r7
   33304:	6628      	str	r0, [r5, #96]	; 0x60
   33306:	e7ae      	b.n	33266 <mbedtls_sha_update_internal+0x2a>
   33308:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   3330a:	a902      	add	r1, sp, #8
   3330c:	4628      	mov	r0, r5
   3330e:	f000 f96f 	bl	335f0 <ProcessHashDrv>
   33312:	2800      	cmp	r0, #0
   33314:	d1c5      	bne.n	332a2 <mbedtls_sha_update_internal+0x66>
   33316:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   33318:	6628      	str	r0, [r5, #96]	; 0x60
   3331a:	e7a6      	b.n	3326a <mbedtls_sha_update_internal+0x2e>

0003331c <cc_mbedtls_sha256>:
   3331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3331e:	461c      	mov	r4, r3
   33320:	4605      	mov	r5, r0
   33322:	4811      	ldr	r0, [pc, #68]	; (33368 <cc_mbedtls_sha256+0x4c>)
   33324:	460e      	mov	r6, r1
   33326:	4617      	mov	r7, r2
   33328:	f7ff feca 	bl	330c0 <cc_mbedtls_sha256_init>
   3332c:	4621      	mov	r1, r4
   3332e:	480e      	ldr	r0, [pc, #56]	; (33368 <cc_mbedtls_sha256+0x4c>)
   33330:	f7ff fee0 	bl	330f4 <cc_mbedtls_sha256_starts>
   33334:	4604      	mov	r4, r0
   33336:	b120      	cbz	r0, 33342 <cc_mbedtls_sha256+0x26>
   33338:	480b      	ldr	r0, [pc, #44]	; (33368 <cc_mbedtls_sha256+0x4c>)
   3333a:	f7ff fed5 	bl	330e8 <cc_mbedtls_sha256_free>
   3333e:	4620      	mov	r0, r4
   33340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33342:	4809      	ldr	r0, [pc, #36]	; (33368 <cc_mbedtls_sha256+0x4c>)
   33344:	4632      	mov	r2, r6
   33346:	4629      	mov	r1, r5
   33348:	f7ff fee8 	bl	3311c <cc_mbedtls_sha256_update>
   3334c:	4604      	mov	r4, r0
   3334e:	2800      	cmp	r0, #0
   33350:	d1f2      	bne.n	33338 <cc_mbedtls_sha256+0x1c>
   33352:	4639      	mov	r1, r7
   33354:	4804      	ldr	r0, [pc, #16]	; (33368 <cc_mbedtls_sha256+0x4c>)
   33356:	f7ff ff0b 	bl	33170 <cc_mbedtls_sha256_finish>
   3335a:	4604      	mov	r4, r0
   3335c:	4802      	ldr	r0, [pc, #8]	; (33368 <cc_mbedtls_sha256+0x4c>)
   3335e:	f7ff fec3 	bl	330e8 <cc_mbedtls_sha256_free>
   33362:	4620      	mov	r0, r4
   33364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33366:	bf00      	nop
   33368:	2000d978 	.word	0x2000d978

0003336c <RNG_PLAT_SetUserRngParameters>:
   3336c:	b530      	push	{r4, r5, lr}
   3336e:	b083      	sub	sp, #12
   33370:	231c      	movs	r3, #28
   33372:	a901      	add	r1, sp, #4
   33374:	4604      	mov	r4, r0
   33376:	9301      	str	r3, [sp, #4]
   33378:	f000 f83c 	bl	333f4 <CC_PalTrngParamGet>
   3337c:	4605      	mov	r5, r0
   3337e:	b938      	cbnz	r0, 33390 <RNG_PLAT_SetUserRngParameters+0x24>
   33380:	9b01      	ldr	r3, [sp, #4]
   33382:	2b1c      	cmp	r3, #28
   33384:	d007      	beq.n	33396 <RNG_PLAT_SetUserRngParameters+0x2a>
   33386:	4d15      	ldr	r5, [pc, #84]	; (333dc <RNG_PLAT_SetUserRngParameters+0x70>)
   33388:	4620      	mov	r0, r4
   3338a:	211c      	movs	r1, #28
   3338c:	f000 f82e 	bl	333ec <CC_PalMemSetZeroPlat>
   33390:	4628      	mov	r0, r5
   33392:	b003      	add	sp, #12
   33394:	bd30      	pop	{r4, r5, pc}
   33396:	e9d4 3200 	ldrd	r3, r2, [r4]
   3339a:	2101      	movs	r1, #1
   3339c:	3b00      	subs	r3, #0
   3339e:	bf18      	it	ne
   333a0:	2301      	movne	r3, #1
   333a2:	61e1      	str	r1, [r4, #28]
   333a4:	b10a      	cbz	r2, 333aa <RNG_PLAT_SetUserRngParameters+0x3e>
   333a6:	f043 0302 	orr.w	r3, r3, #2
   333aa:	68a2      	ldr	r2, [r4, #8]
   333ac:	b932      	cbnz	r2, 333bc <RNG_PLAT_SetUserRngParameters+0x50>
   333ae:	68e2      	ldr	r2, [r4, #12]
   333b0:	b942      	cbnz	r2, 333c4 <RNG_PLAT_SetUserRngParameters+0x58>
   333b2:	e9c4 3208 	strd	r3, r2, [r4, #32]
   333b6:	b97b      	cbnz	r3, 333d8 <RNG_PLAT_SetUserRngParameters+0x6c>
   333b8:	4d09      	ldr	r5, [pc, #36]	; (333e0 <RNG_PLAT_SetUserRngParameters+0x74>)
   333ba:	e7e5      	b.n	33388 <RNG_PLAT_SetUserRngParameters+0x1c>
   333bc:	68e2      	ldr	r2, [r4, #12]
   333be:	f043 0304 	orr.w	r3, r3, #4
   333c2:	b13a      	cbz	r2, 333d4 <RNG_PLAT_SetUserRngParameters+0x68>
   333c4:	f043 0308 	orr.w	r3, r3, #8
   333c8:	2200      	movs	r2, #0
   333ca:	4628      	mov	r0, r5
   333cc:	e9c4 3208 	strd	r3, r2, [r4, #32]
   333d0:	b003      	add	sp, #12
   333d2:	bd30      	pop	{r4, r5, pc}
   333d4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   333d8:	4615      	mov	r5, r2
   333da:	e7d9      	b.n	33390 <RNG_PLAT_SetUserRngParameters+0x24>
   333dc:	00f00c37 	.word	0x00f00c37
   333e0:	00f00c0e 	.word	0x00f00c0e

000333e4 <CC_PalMemCopyPlat>:
   333e4:	f003 bca8 	b.w	36d38 <memmove>

000333e8 <CC_PalMemSetPlat>:
   333e8:	f003 bce0 	b.w	36dac <memset>

000333ec <CC_PalMemSetZeroPlat>:
   333ec:	460a      	mov	r2, r1
   333ee:	2100      	movs	r1, #0
   333f0:	f003 bcdc 	b.w	36dac <memset>

000333f4 <CC_PalTrngParamGet>:
   333f4:	b118      	cbz	r0, 333fe <CC_PalTrngParamGet+0xa>
   333f6:	b111      	cbz	r1, 333fe <CC_PalTrngParamGet+0xa>
   333f8:	680b      	ldr	r3, [r1, #0]
   333fa:	2b1c      	cmp	r3, #28
   333fc:	d001      	beq.n	33402 <CC_PalTrngParamGet+0xe>
   333fe:	2001      	movs	r0, #1
   33400:	4770      	bx	lr
   33402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33406:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   3340a:	3201      	adds	r2, #1
   3340c:	bf14      	ite	ne
   3340e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   33412:	f241 225c 	movweq	r2, #4700	; 0x125c
   33416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3341a:	6002      	str	r2, [r0, #0]
   3341c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   33420:	3201      	adds	r2, #1
   33422:	bf14      	ite	ne
   33424:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   33428:	f641 1264 	movweq	r2, #6500	; 0x1964
   3342c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33430:	6042      	str	r2, [r0, #4]
   33432:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   33436:	3201      	adds	r2, #1
   33438:	bf14      	ite	ne
   3343a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   3343e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   33442:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33446:	6082      	str	r2, [r0, #8]
   33448:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   3344c:	3201      	adds	r2, #1
   3344e:	bf14      	ite	ne
   33450:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   33454:	f241 3288 	movweq	r2, #5000	; 0x1388
   33458:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3345c:	60c2      	str	r2, [r0, #12]
   3345e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   33462:	3201      	adds	r2, #1
   33464:	bf14      	ite	ne
   33466:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   3346a:	2290      	moveq	r2, #144	; 0x90
   3346c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33470:	6102      	str	r2, [r0, #16]
   33472:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   33476:	3201      	adds	r2, #1
   33478:	bf14      	ite	ne
   3347a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   3347e:	2251      	moveq	r2, #81	; 0x51
   33480:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33484:	6142      	str	r2, [r0, #20]
   33486:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   3348a:	3201      	adds	r2, #1
   3348c:	bf14      	ite	ne
   3348e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   33492:	f240 3337 	movweq	r3, #823	; 0x337
   33496:	6183      	str	r3, [r0, #24]
   33498:	2000      	movs	r0, #0
   3349a:	4770      	bx	lr

0003349c <LLF_RND_WaitRngInterrupt>:
   3349c:	b508      	push	{r3, lr}
   3349e:	4601      	mov	r1, r0
   334a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   334a4:	f7ff f95a 	bl	3275c <CC_HalWaitInterruptRND>
   334a8:	4902      	ldr	r1, [pc, #8]	; (334b4 <LLF_RND_WaitRngInterrupt+0x18>)
   334aa:	4a03      	ldr	r2, [pc, #12]	; (334b8 <LLF_RND_WaitRngInterrupt+0x1c>)
   334ac:	2300      	movs	r3, #0
   334ae:	600b      	str	r3, [r1, #0]
   334b0:	6013      	str	r3, [r2, #0]
   334b2:	bd08      	pop	{r3, pc}
   334b4:	5002b1c8 	.word	0x5002b1c8
   334b8:	5002b12c 	.word	0x5002b12c

000334bc <LLF_RND_GetRoscSampleCnt>:
   334bc:	3801      	subs	r0, #1
   334be:	2807      	cmp	r0, #7
   334c0:	d805      	bhi.n	334ce <LLF_RND_GetRoscSampleCnt+0x12>
   334c2:	e8df f000 	tbb	[pc, r0]
   334c6:	0e0a      	.short	0x0e0a
   334c8:	04041204 	.word	0x04041204
   334cc:	0604      	.short	0x0604
   334ce:	4809      	ldr	r0, [pc, #36]	; (334f4 <LLF_RND_GetRoscSampleCnt+0x38>)
   334d0:	4770      	bx	lr
   334d2:	68cb      	ldr	r3, [r1, #12]
   334d4:	624b      	str	r3, [r1, #36]	; 0x24
   334d6:	2000      	movs	r0, #0
   334d8:	4770      	bx	lr
   334da:	680b      	ldr	r3, [r1, #0]
   334dc:	624b      	str	r3, [r1, #36]	; 0x24
   334de:	2000      	movs	r0, #0
   334e0:	4770      	bx	lr
   334e2:	684b      	ldr	r3, [r1, #4]
   334e4:	624b      	str	r3, [r1, #36]	; 0x24
   334e6:	2000      	movs	r0, #0
   334e8:	4770      	bx	lr
   334ea:	688b      	ldr	r3, [r1, #8]
   334ec:	624b      	str	r3, [r1, #36]	; 0x24
   334ee:	2000      	movs	r0, #0
   334f0:	4770      	bx	lr
   334f2:	bf00      	nop
   334f4:	00f10c31 	.word	0x00f10c31

000334f8 <LLF_RND_GetFastestRosc>:
   334f8:	680b      	ldr	r3, [r1, #0]
   334fa:	e002      	b.n	33502 <LLF_RND_GetFastestRosc+0xa>
   334fc:	2b08      	cmp	r3, #8
   334fe:	600b      	str	r3, [r1, #0]
   33500:	d806      	bhi.n	33510 <LLF_RND_GetFastestRosc+0x18>
   33502:	6a02      	ldr	r2, [r0, #32]
   33504:	4213      	tst	r3, r2
   33506:	ea4f 0343 	mov.w	r3, r3, lsl #1
   3350a:	d0f7      	beq.n	334fc <LLF_RND_GetFastestRosc+0x4>
   3350c:	2000      	movs	r0, #0
   3350e:	4770      	bx	lr
   33510:	4800      	ldr	r0, [pc, #0]	; (33514 <LLF_RND_GetFastestRosc+0x1c>)
   33512:	4770      	bx	lr
   33514:	00f10c31 	.word	0x00f10c31

00033518 <LLF_RND_TurnOffTrng>:
   33518:	4904      	ldr	r1, [pc, #16]	; (3352c <LLF_RND_TurnOffTrng+0x14>)
   3351a:	4a05      	ldr	r2, [pc, #20]	; (33530 <LLF_RND_TurnOffTrng+0x18>)
   3351c:	2300      	movs	r3, #0
   3351e:	600b      	str	r3, [r1, #0]
   33520:	f44f 6080 	mov.w	r0, #1024	; 0x400
   33524:	6013      	str	r3, [r2, #0]
   33526:	f7ff b8ff 	b.w	32728 <CC_HalClearInterruptBit>
   3352a:	bf00      	nop
   3352c:	5002b12c 	.word	0x5002b12c
   33530:	5002b1c4 	.word	0x5002b1c4

00033534 <SetDataBuffersInfo>:
   33534:	b5f0      	push	{r4, r5, r6, r7, lr}
   33536:	b083      	sub	sp, #12
   33538:	2400      	movs	r4, #0
   3353a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   3353e:	f88d 4007 	strb.w	r4, [sp, #7]
   33542:	d325      	bcc.n	33590 <SetDataBuffersInfo+0x5c>
   33544:	460c      	mov	r4, r1
   33546:	4404      	add	r4, r0
   33548:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   3354c:	4605      	mov	r5, r0
   3354e:	d81f      	bhi.n	33590 <SetDataBuffersInfo+0x5c>
   33550:	4617      	mov	r7, r2
   33552:	461e      	mov	r6, r3
   33554:	2201      	movs	r2, #1
   33556:	f10d 0307 	add.w	r3, sp, #7
   3355a:	f000 fe7f 	bl	3425c <CC_PalDataBufferAttrGet>
   3355e:	4604      	mov	r4, r0
   33560:	b9b0      	cbnz	r0, 33590 <SetDataBuffersInfo+0x5c>
   33562:	9a09      	ldr	r2, [sp, #36]	; 0x24
   33564:	f89d 3007 	ldrb.w	r3, [sp, #7]
   33568:	603d      	str	r5, [r7, #0]
   3356a:	713b      	strb	r3, [r7, #4]
   3356c:	b192      	cbz	r2, 33594 <SetDataBuffersInfo+0x60>
   3356e:	b14e      	cbz	r6, 33584 <SetDataBuffersInfo+0x50>
   33570:	4602      	mov	r2, r0
   33572:	9908      	ldr	r1, [sp, #32]
   33574:	f10d 0307 	add.w	r3, sp, #7
   33578:	4630      	mov	r0, r6
   3357a:	f000 fe6f 	bl	3425c <CC_PalDataBufferAttrGet>
   3357e:	b938      	cbnz	r0, 33590 <SetDataBuffersInfo+0x5c>
   33580:	f89d 3007 	ldrb.w	r3, [sp, #7]
   33584:	9a09      	ldr	r2, [sp, #36]	; 0x24
   33586:	4620      	mov	r0, r4
   33588:	6016      	str	r6, [r2, #0]
   3358a:	7113      	strb	r3, [r2, #4]
   3358c:	b003      	add	sp, #12
   3358e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33590:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   33594:	4620      	mov	r0, r4
   33596:	b003      	add	sp, #12
   33598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3359a:	bf00      	nop

0003359c <InitHashDrv>:
   3359c:	b1e8      	cbz	r0, 335da <InitHashDrv+0x3e>
   3359e:	b510      	push	{r4, lr}
   335a0:	6804      	ldr	r4, [r0, #0]
   335a2:	2c01      	cmp	r4, #1
   335a4:	d004      	beq.n	335b0 <InitHashDrv+0x14>
   335a6:	2c02      	cmp	r4, #2
   335a8:	d010      	beq.n	335cc <InitHashDrv+0x30>
   335aa:	b144      	cbz	r4, 335be <InitHashDrv+0x22>
   335ac:	480c      	ldr	r0, [pc, #48]	; (335e0 <InitHashDrv+0x44>)
   335ae:	bd10      	pop	{r4, pc}
   335b0:	490c      	ldr	r1, [pc, #48]	; (335e4 <InitHashDrv+0x48>)
   335b2:	2220      	movs	r2, #32
   335b4:	3008      	adds	r0, #8
   335b6:	f7ff ff15 	bl	333e4 <CC_PalMemCopyPlat>
   335ba:	2000      	movs	r0, #0
   335bc:	bd10      	pop	{r4, pc}
   335be:	490a      	ldr	r1, [pc, #40]	; (335e8 <InitHashDrv+0x4c>)
   335c0:	2214      	movs	r2, #20
   335c2:	3008      	adds	r0, #8
   335c4:	f7ff ff0e 	bl	333e4 <CC_PalMemCopyPlat>
   335c8:	4620      	mov	r0, r4
   335ca:	bd10      	pop	{r4, pc}
   335cc:	4907      	ldr	r1, [pc, #28]	; (335ec <InitHashDrv+0x50>)
   335ce:	2220      	movs	r2, #32
   335d0:	3008      	adds	r0, #8
   335d2:	f7ff ff07 	bl	333e4 <CC_PalMemCopyPlat>
   335d6:	2000      	movs	r0, #0
   335d8:	bd10      	pop	{r4, pc}
   335da:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   335de:	4770      	bx	lr
   335e0:	00f30001 	.word	0x00f30001
   335e4:	00040c04 	.word	0x00040c04
   335e8:	00040bd0 	.word	0x00040bd0
   335ec:	00040be4 	.word	0x00040be4

000335f0 <ProcessHashDrv>:
   335f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   335f4:	2900      	cmp	r1, #0
   335f6:	f000 80ef 	beq.w	337d8 <ProcessHashDrv+0x1e8>
   335fa:	4604      	mov	r4, r0
   335fc:	2800      	cmp	r0, #0
   335fe:	f000 80ef 	beq.w	337e0 <ProcessHashDrv+0x1f0>
   33602:	6803      	ldr	r3, [r0, #0]
   33604:	4617      	mov	r7, r2
   33606:	460e      	mov	r6, r1
   33608:	2b00      	cmp	r3, #0
   3360a:	f000 80b9 	beq.w	33780 <ProcessHashDrv+0x190>
   3360e:	3b01      	subs	r3, #1
   33610:	2b01      	cmp	r3, #1
   33612:	f200 80cd 	bhi.w	337b0 <ProcessHashDrv+0x1c0>
   33616:	4874      	ldr	r0, [pc, #464]	; (337e8 <ProcessHashDrv+0x1f8>)
   33618:	f04f 31ff 	mov.w	r1, #4294967295
   3361c:	f04f 0802 	mov.w	r8, #2
   33620:	f7ff f92a 	bl	32878 <CC_PalMutexLock>
   33624:	2800      	cmp	r0, #0
   33626:	f040 80b5 	bne.w	33794 <ProcessHashDrv+0x1a4>
   3362a:	2000      	movs	r0, #0
   3362c:	f7ff f954 	bl	328d8 <CC_PalPowerSaveModeSelect>
   33630:	4605      	mov	r5, r0
   33632:	2800      	cmp	r0, #0
   33634:	f040 80b8 	bne.w	337a8 <ProcessHashDrv+0x1b8>
   33638:	4a6c      	ldr	r2, [pc, #432]	; (337ec <ProcessHashDrv+0x1fc>)
   3363a:	6813      	ldr	r3, [r2, #0]
   3363c:	2b00      	cmp	r3, #0
   3363e:	d1fc      	bne.n	3363a <ProcessHashDrv+0x4a>
   33640:	486b      	ldr	r0, [pc, #428]	; (337f0 <ProcessHashDrv+0x200>)
   33642:	6803      	ldr	r3, [r0, #0]
   33644:	2b00      	cmp	r3, #0
   33646:	d1fc      	bne.n	33642 <ProcessHashDrv+0x52>
   33648:	f04f 30ff 	mov.w	r0, #4294967295
   3364c:	f7ff f86c 	bl	32728 <CC_HalClearInterruptBit>
   33650:	4b68      	ldr	r3, [pc, #416]	; (337f4 <ProcessHashDrv+0x204>)
   33652:	6818      	ldr	r0, [r3, #0]
   33654:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   33658:	f7ff f874 	bl	32744 <CC_HalMaskInterrupt>
   3365c:	4866      	ldr	r0, [pc, #408]	; (337f8 <ProcessHashDrv+0x208>)
   3365e:	4a67      	ldr	r2, [pc, #412]	; (337fc <ProcessHashDrv+0x20c>)
   33660:	4967      	ldr	r1, [pc, #412]	; (33800 <ProcessHashDrv+0x210>)
   33662:	2301      	movs	r3, #1
   33664:	6003      	str	r3, [r0, #0]
   33666:	2007      	movs	r0, #7
   33668:	6010      	str	r0, [r2, #0]
   3366a:	600b      	str	r3, [r1, #0]
   3366c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   33670:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   33672:	6013      	str	r3, [r2, #0]
   33674:	4b63      	ldr	r3, [pc, #396]	; (33804 <ProcessHashDrv+0x214>)
   33676:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   33678:	6051      	str	r1, [r2, #4]
   3367a:	f8c3 8000 	str.w	r8, [r3]
   3367e:	6823      	ldr	r3, [r4, #0]
   33680:	b15b      	cbz	r3, 3369a <ProcessHashDrv+0xaa>
   33682:	3b01      	subs	r3, #1
   33684:	2b01      	cmp	r3, #1
   33686:	d817      	bhi.n	336b8 <ProcessHashDrv+0xc8>
   33688:	4b5f      	ldr	r3, [pc, #380]	; (33808 <ProcessHashDrv+0x218>)
   3368a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3368c:	601a      	str	r2, [r3, #0]
   3368e:	6a22      	ldr	r2, [r4, #32]
   33690:	f843 2c04 	str.w	r2, [r3, #-4]
   33694:	69e2      	ldr	r2, [r4, #28]
   33696:	f843 2c08 	str.w	r2, [r3, #-8]
   3369a:	4b5c      	ldr	r3, [pc, #368]	; (3380c <ProcessHashDrv+0x21c>)
   3369c:	69a2      	ldr	r2, [r4, #24]
   3369e:	601a      	str	r2, [r3, #0]
   336a0:	6962      	ldr	r2, [r4, #20]
   336a2:	f843 2c04 	str.w	r2, [r3, #-4]
   336a6:	6922      	ldr	r2, [r4, #16]
   336a8:	f843 2c08 	str.w	r2, [r3, #-8]
   336ac:	68e2      	ldr	r2, [r4, #12]
   336ae:	f843 2c0c 	str.w	r2, [r3, #-12]
   336b2:	68a2      	ldr	r2, [r4, #8]
   336b4:	f843 2c10 	str.w	r2, [r3, #-16]
   336b8:	4a55      	ldr	r2, [pc, #340]	; (33810 <ProcessHashDrv+0x220>)
   336ba:	6813      	ldr	r3, [r2, #0]
   336bc:	2b00      	cmp	r3, #0
   336be:	d1fc      	bne.n	336ba <ProcessHashDrv+0xca>
   336c0:	2f00      	cmp	r7, #0
   336c2:	d059      	beq.n	33778 <ProcessHashDrv+0x188>
   336c4:	6863      	ldr	r3, [r4, #4]
   336c6:	2b01      	cmp	r3, #1
   336c8:	bf04      	itt	eq
   336ca:	4a52      	ldreq	r2, [pc, #328]	; (33814 <ProcessHashDrv+0x224>)
   336cc:	6013      	streq	r3, [r2, #0]
   336ce:	4a52      	ldr	r2, [pc, #328]	; (33818 <ProcessHashDrv+0x228>)
   336d0:	4b52      	ldr	r3, [pc, #328]	; (3381c <ProcessHashDrv+0x22c>)
   336d2:	6831      	ldr	r1, [r6, #0]
   336d4:	6011      	str	r1, [r2, #0]
   336d6:	2040      	movs	r0, #64	; 0x40
   336d8:	601f      	str	r7, [r3, #0]
   336da:	f7ff f839 	bl	32750 <CC_HalWaitInterrupt>
   336de:	4605      	mov	r5, r0
   336e0:	4a4b      	ldr	r2, [pc, #300]	; (33810 <ProcessHashDrv+0x220>)
   336e2:	6813      	ldr	r3, [r2, #0]
   336e4:	2b00      	cmp	r3, #0
   336e6:	d1fc      	bne.n	336e2 <ProcessHashDrv+0xf2>
   336e8:	4a41      	ldr	r2, [pc, #260]	; (337f0 <ProcessHashDrv+0x200>)
   336ea:	6813      	ldr	r3, [r2, #0]
   336ec:	2b00      	cmp	r3, #0
   336ee:	d1fc      	bne.n	336ea <ProcessHashDrv+0xfa>
   336f0:	6823      	ldr	r3, [r4, #0]
   336f2:	b15b      	cbz	r3, 3370c <ProcessHashDrv+0x11c>
   336f4:	3b01      	subs	r3, #1
   336f6:	2b01      	cmp	r3, #1
   336f8:	d817      	bhi.n	3372a <ProcessHashDrv+0x13a>
   336fa:	4a43      	ldr	r2, [pc, #268]	; (33808 <ProcessHashDrv+0x218>)
   336fc:	4b48      	ldr	r3, [pc, #288]	; (33820 <ProcessHashDrv+0x230>)
   336fe:	6812      	ldr	r2, [r2, #0]
   33700:	6262      	str	r2, [r4, #36]	; 0x24
   33702:	681a      	ldr	r2, [r3, #0]
   33704:	6222      	str	r2, [r4, #32]
   33706:	3b04      	subs	r3, #4
   33708:	681b      	ldr	r3, [r3, #0]
   3370a:	61e3      	str	r3, [r4, #28]
   3370c:	4a3f      	ldr	r2, [pc, #252]	; (3380c <ProcessHashDrv+0x21c>)
   3370e:	4b45      	ldr	r3, [pc, #276]	; (33824 <ProcessHashDrv+0x234>)
   33710:	6812      	ldr	r2, [r2, #0]
   33712:	61a2      	str	r2, [r4, #24]
   33714:	681a      	ldr	r2, [r3, #0]
   33716:	6162      	str	r2, [r4, #20]
   33718:	f853 2c04 	ldr.w	r2, [r3, #-4]
   3371c:	6122      	str	r2, [r4, #16]
   3371e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   33722:	60e2      	str	r2, [r4, #12]
   33724:	3b0c      	subs	r3, #12
   33726:	681b      	ldr	r3, [r3, #0]
   33728:	60a3      	str	r3, [r4, #8]
   3372a:	4b3f      	ldr	r3, [pc, #252]	; (33828 <ProcessHashDrv+0x238>)
   3372c:	4a3f      	ldr	r2, [pc, #252]	; (3382c <ProcessHashDrv+0x23c>)
   3372e:	681b      	ldr	r3, [r3, #0]
   33730:	64a3      	str	r3, [r4, #72]	; 0x48
   33732:	6812      	ldr	r2, [r2, #0]
   33734:	4b32      	ldr	r3, [pc, #200]	; (33800 <ProcessHashDrv+0x210>)
   33736:	64e2      	str	r2, [r4, #76]	; 0x4c
   33738:	4836      	ldr	r0, [pc, #216]	; (33814 <ProcessHashDrv+0x224>)
   3373a:	493d      	ldr	r1, [pc, #244]	; (33830 <ProcessHashDrv+0x240>)
   3373c:	2201      	movs	r2, #1
   3373e:	601a      	str	r2, [r3, #0]
   33740:	2300      	movs	r3, #0
   33742:	4a33      	ldr	r2, [pc, #204]	; (33810 <ProcessHashDrv+0x220>)
   33744:	6003      	str	r3, [r0, #0]
   33746:	600b      	str	r3, [r1, #0]
   33748:	6813      	ldr	r3, [r2, #0]
   3374a:	2b00      	cmp	r3, #0
   3374c:	d1fc      	bne.n	33748 <ProcessHashDrv+0x158>
   3374e:	4a2a      	ldr	r2, [pc, #168]	; (337f8 <ProcessHashDrv+0x208>)
   33750:	6013      	str	r3, [r2, #0]
   33752:	2d00      	cmp	r5, #0
   33754:	d13a      	bne.n	337cc <ProcessHashDrv+0x1dc>
   33756:	4b27      	ldr	r3, [pc, #156]	; (337f4 <ProcessHashDrv+0x204>)
   33758:	6818      	ldr	r0, [r3, #0]
   3375a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   3375e:	f7fe fff1 	bl	32744 <CC_HalMaskInterrupt>
   33762:	2001      	movs	r0, #1
   33764:	f7ff f8b8 	bl	328d8 <CC_PalPowerSaveModeSelect>
   33768:	bb60      	cbnz	r0, 337c4 <ProcessHashDrv+0x1d4>
   3376a:	481f      	ldr	r0, [pc, #124]	; (337e8 <ProcessHashDrv+0x1f8>)
   3376c:	f7ff f88c 	bl	32888 <CC_PalMutexUnlock>
   33770:	bb10      	cbnz	r0, 337b8 <ProcessHashDrv+0x1c8>
   33772:	4628      	mov	r0, r5
   33774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33778:	4b2d      	ldr	r3, [pc, #180]	; (33830 <ProcessHashDrv+0x240>)
   3377a:	2204      	movs	r2, #4
   3377c:	601a      	str	r2, [r3, #0]
   3377e:	e7af      	b.n	336e0 <ProcessHashDrv+0xf0>
   33780:	4819      	ldr	r0, [pc, #100]	; (337e8 <ProcessHashDrv+0x1f8>)
   33782:	f04f 31ff 	mov.w	r1, #4294967295
   33786:	f04f 0801 	mov.w	r8, #1
   3378a:	f7ff f875 	bl	32878 <CC_PalMutexLock>
   3378e:	2800      	cmp	r0, #0
   33790:	f43f af4b 	beq.w	3362a <ProcessHashDrv+0x3a>
   33794:	4827      	ldr	r0, [pc, #156]	; (33834 <ProcessHashDrv+0x244>)
   33796:	f7fe f923 	bl	319e0 <CC_PalAbort>
   3379a:	2000      	movs	r0, #0
   3379c:	f7ff f89c 	bl	328d8 <CC_PalPowerSaveModeSelect>
   337a0:	4605      	mov	r5, r0
   337a2:	2800      	cmp	r0, #0
   337a4:	f43f af48 	beq.w	33638 <ProcessHashDrv+0x48>
   337a8:	4823      	ldr	r0, [pc, #140]	; (33838 <ProcessHashDrv+0x248>)
   337aa:	f7fe f919 	bl	319e0 <CC_PalAbort>
   337ae:	e743      	b.n	33638 <ProcessHashDrv+0x48>
   337b0:	4d22      	ldr	r5, [pc, #136]	; (3383c <ProcessHashDrv+0x24c>)
   337b2:	4628      	mov	r0, r5
   337b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   337b8:	4821      	ldr	r0, [pc, #132]	; (33840 <ProcessHashDrv+0x250>)
   337ba:	f7fe f911 	bl	319e0 <CC_PalAbort>
   337be:	4628      	mov	r0, r5
   337c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   337c4:	481f      	ldr	r0, [pc, #124]	; (33844 <ProcessHashDrv+0x254>)
   337c6:	f7fe f90b 	bl	319e0 <CC_PalAbort>
   337ca:	e7ce      	b.n	3376a <ProcessHashDrv+0x17a>
   337cc:	f104 0008 	add.w	r0, r4, #8
   337d0:	2110      	movs	r1, #16
   337d2:	f7ff fe0b 	bl	333ec <CC_PalMemSetZeroPlat>
   337d6:	e7be      	b.n	33756 <ProcessHashDrv+0x166>
   337d8:	4d1b      	ldr	r5, [pc, #108]	; (33848 <ProcessHashDrv+0x258>)
   337da:	4628      	mov	r0, r5
   337dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   337e0:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   337e4:	e7c5      	b.n	33772 <ProcessHashDrv+0x182>
   337e6:	bf00      	nop
   337e8:	2000096c 	.word	0x2000096c
   337ec:	5002b91c 	.word	0x5002b91c
   337f0:	5002bc20 	.word	0x5002bc20
   337f4:	5002ba04 	.word	0x5002ba04
   337f8:	5002b818 	.word	0x5002b818
   337fc:	5002b900 	.word	0x5002b900
   33800:	5002b7c4 	.word	0x5002b7c4
   33804:	5002b7c0 	.word	0x5002b7c0
   33808:	5002b65c 	.word	0x5002b65c
   3380c:	5002b650 	.word	0x5002b650
   33810:	5002b910 	.word	0x5002b910
   33814:	5002b684 	.word	0x5002b684
   33818:	5002bc28 	.word	0x5002bc28
   3381c:	5002bc2c 	.word	0x5002bc2c
   33820:	5002b658 	.word	0x5002b658
   33824:	5002b64c 	.word	0x5002b64c
   33828:	5002b7cc 	.word	0x5002b7cc
   3382c:	5002b7d0 	.word	0x5002b7d0
   33830:	5002b7c8 	.word	0x5002b7c8
   33834:	00040b04 	.word	0x00040b04
   33838:	00040b1c 	.word	0x00040b1c
   3383c:	00f30001 	.word	0x00f30001
   33840:	00040b5c 	.word	0x00040b5c
   33844:	00040b3c 	.word	0x00040b3c
   33848:	00f30003 	.word	0x00f30003

0003384c <FinishHashDrv>:
   3384c:	2800      	cmp	r0, #0
   3384e:	d03b      	beq.n	338c8 <FinishHashDrv+0x7c>
   33850:	b4f0      	push	{r4, r5, r6, r7}
   33852:	b082      	sub	sp, #8
   33854:	6a43      	ldr	r3, [r0, #36]	; 0x24
   33856:	9301      	str	r3, [sp, #4]
   33858:	6883      	ldr	r3, [r0, #8]
   3385a:	fa93 fc83 	rev.w	ip, r3
   3385e:	9b01      	ldr	r3, [sp, #4]
   33860:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   33864:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   33868:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   3386c:	ba1b      	rev	r3, r3
   3386e:	6243      	str	r3, [r0, #36]	; 0x24
   33870:	6c43      	ldr	r3, [r0, #68]	; 0x44
   33872:	9301      	str	r3, [sp, #4]
   33874:	ba09      	rev	r1, r1
   33876:	6a83      	ldr	r3, [r0, #40]	; 0x28
   33878:	61c1      	str	r1, [r0, #28]
   3387a:	ba12      	rev	r2, r2
   3387c:	6202      	str	r2, [r0, #32]
   3387e:	ba3f      	rev	r7, r7
   33880:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   33884:	ba36      	rev	r6, r6
   33886:	ba2d      	rev	r5, r5
   33888:	ba24      	rev	r4, r4
   3388a:	e9c0 c702 	strd	ip, r7, [r0, #8]
   3388e:	e9c0 6504 	strd	r6, r5, [r0, #16]
   33892:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   33894:	6b06      	ldr	r6, [r0, #48]	; 0x30
   33896:	6b45      	ldr	r5, [r0, #52]	; 0x34
   33898:	6184      	str	r4, [r0, #24]
   3389a:	fa93 fc83 	rev.w	ip, r3
   3389e:	6b84      	ldr	r4, [r0, #56]	; 0x38
   338a0:	9b01      	ldr	r3, [sp, #4]
   338a2:	ba3f      	rev	r7, r7
   338a4:	ba36      	rev	r6, r6
   338a6:	ba2d      	rev	r5, r5
   338a8:	ba24      	rev	r4, r4
   338aa:	ba09      	rev	r1, r1
   338ac:	ba12      	rev	r2, r2
   338ae:	ba1b      	rev	r3, r3
   338b0:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   338b4:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   338b8:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   338bc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   338c0:	2000      	movs	r0, #0
   338c2:	b002      	add	sp, #8
   338c4:	bcf0      	pop	{r4, r5, r6, r7}
   338c6:	4770      	bx	lr
   338c8:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   338cc:	4770      	bx	lr
   338ce:	bf00      	nop

000338d0 <LoadAesKey>:
   338d0:	2800      	cmp	r0, #0
   338d2:	d03b      	beq.n	3394c <LoadAesKey+0x7c>
   338d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   338d8:	2b00      	cmp	r3, #0
   338da:	d02c      	beq.n	33936 <LoadAesKey+0x66>
   338dc:	2b03      	cmp	r3, #3
   338de:	b510      	push	{r4, lr}
   338e0:	d00f      	beq.n	33902 <LoadAesKey+0x32>
   338e2:	481c      	ldr	r0, [pc, #112]	; (33954 <LoadAesKey+0x84>)
   338e4:	4c1c      	ldr	r4, [pc, #112]	; (33958 <LoadAesKey+0x88>)
   338e6:	6822      	ldr	r2, [r4, #0]
   338e8:	4b1c      	ldr	r3, [pc, #112]	; (3395c <LoadAesKey+0x8c>)
   338ea:	6812      	ldr	r2, [r2, #0]
   338ec:	601a      	str	r2, [r3, #0]
   338ee:	6822      	ldr	r2, [r4, #0]
   338f0:	6852      	ldr	r2, [r2, #4]
   338f2:	605a      	str	r2, [r3, #4]
   338f4:	6822      	ldr	r2, [r4, #0]
   338f6:	6892      	ldr	r2, [r2, #8]
   338f8:	609a      	str	r2, [r3, #8]
   338fa:	6822      	ldr	r2, [r4, #0]
   338fc:	68d2      	ldr	r2, [r2, #12]
   338fe:	60da      	str	r2, [r3, #12]
   33900:	bd10      	pop	{r4, pc}
   33902:	6b01      	ldr	r1, [r0, #48]	; 0x30
   33904:	6c00      	ldr	r0, [r0, #64]	; 0x40
   33906:	4c14      	ldr	r4, [pc, #80]	; (33958 <LoadAesKey+0x88>)
   33908:	f000 fba4 	bl	34054 <kmu_validate_kdr_slot_and_size>
   3390c:	2800      	cmp	r0, #0
   3390e:	d1ea      	bne.n	338e6 <LoadAesKey+0x16>
   33910:	6821      	ldr	r1, [r4, #0]
   33912:	4a12      	ldr	r2, [pc, #72]	; (3395c <LoadAesKey+0x8c>)
   33914:	6809      	ldr	r1, [r1, #0]
   33916:	6011      	str	r1, [r2, #0]
   33918:	6821      	ldr	r1, [r4, #0]
   3391a:	4b11      	ldr	r3, [pc, #68]	; (33960 <LoadAesKey+0x90>)
   3391c:	6849      	ldr	r1, [r1, #4]
   3391e:	6019      	str	r1, [r3, #0]
   33920:	6821      	ldr	r1, [r4, #0]
   33922:	6889      	ldr	r1, [r1, #8]
   33924:	6091      	str	r1, [r2, #8]
   33926:	6822      	ldr	r2, [r4, #0]
   33928:	68d2      	ldr	r2, [r2, #12]
   3392a:	609a      	str	r2, [r3, #8]
   3392c:	f000 fb9e 	bl	3406c <kmu_use_kdr_key>
   33930:	2800      	cmp	r0, #0
   33932:	d1d8      	bne.n	338e6 <LoadAesKey+0x16>
   33934:	bd10      	pop	{r4, pc}
   33936:	4a09      	ldr	r2, [pc, #36]	; (3395c <LoadAesKey+0x8c>)
   33938:	6901      	ldr	r1, [r0, #16]
   3393a:	6011      	str	r1, [r2, #0]
   3393c:	6941      	ldr	r1, [r0, #20]
   3393e:	6051      	str	r1, [r2, #4]
   33940:	6981      	ldr	r1, [r0, #24]
   33942:	6091      	str	r1, [r2, #8]
   33944:	69c1      	ldr	r1, [r0, #28]
   33946:	60d1      	str	r1, [r2, #12]
   33948:	4618      	mov	r0, r3
   3394a:	4770      	bx	lr
   3394c:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   33950:	4770      	bx	lr
   33952:	bf00      	nop
   33954:	00f10009 	.word	0x00f10009
   33958:	2000095c 	.word	0x2000095c
   3395c:	5002b400 	.word	0x5002b400
   33960:	5002b404 	.word	0x5002b404

00033964 <InitAes.part.0>:
   33964:	4a32      	ldr	r2, [pc, #200]	; (33a30 <InitAes.part.0+0xcc>)
   33966:	b510      	push	{r4, lr}
   33968:	4604      	mov	r4, r0
   3396a:	6813      	ldr	r3, [r2, #0]
   3396c:	2b00      	cmp	r3, #0
   3396e:	d1fc      	bne.n	3396a <InitAes.part.0+0x6>
   33970:	4a30      	ldr	r2, [pc, #192]	; (33a34 <InitAes.part.0+0xd0>)
   33972:	6813      	ldr	r3, [r2, #0]
   33974:	2b00      	cmp	r3, #0
   33976:	d1fc      	bne.n	33972 <InitAes.part.0+0xe>
   33978:	4a2f      	ldr	r2, [pc, #188]	; (33a38 <InitAes.part.0+0xd4>)
   3397a:	6813      	ldr	r3, [r2, #0]
   3397c:	2b00      	cmp	r3, #0
   3397e:	d1fc      	bne.n	3397a <InitAes.part.0+0x16>
   33980:	4a2e      	ldr	r2, [pc, #184]	; (33a3c <InitAes.part.0+0xd8>)
   33982:	6813      	ldr	r3, [r2, #0]
   33984:	2b00      	cmp	r3, #0
   33986:	d1fc      	bne.n	33982 <InitAes.part.0+0x1e>
   33988:	4a2d      	ldr	r2, [pc, #180]	; (33a40 <InitAes.part.0+0xdc>)
   3398a:	6813      	ldr	r3, [r2, #0]
   3398c:	2b00      	cmp	r3, #0
   3398e:	d1fc      	bne.n	3398a <InitAes.part.0+0x26>
   33990:	4a2c      	ldr	r2, [pc, #176]	; (33a44 <InitAes.part.0+0xe0>)
   33992:	6813      	ldr	r3, [r2, #0]
   33994:	2b00      	cmp	r3, #0
   33996:	d1fc      	bne.n	33992 <InitAes.part.0+0x2e>
   33998:	f04f 30ff 	mov.w	r0, #4294967295
   3399c:	f7fe fec4 	bl	32728 <CC_HalClearInterruptBit>
   339a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   339a2:	f023 0304 	bic.w	r3, r3, #4
   339a6:	2b03      	cmp	r3, #3
   339a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   339aa:	d036      	beq.n	33a1a <InitAes.part.0+0xb6>
   339ac:	2b01      	cmp	r3, #1
   339ae:	4b26      	ldr	r3, [pc, #152]	; (33a48 <InitAes.part.0+0xe4>)
   339b0:	6818      	ldr	r0, [r3, #0]
   339b2:	bf0c      	ite	eq
   339b4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   339b8:	f020 0020 	bicne.w	r0, r0, #32
   339bc:	f7fe fec2 	bl	32744 <CC_HalMaskInterrupt>
   339c0:	4b22      	ldr	r3, [pc, #136]	; (33a4c <InitAes.part.0+0xe8>)
   339c2:	4a1b      	ldr	r2, [pc, #108]	; (33a30 <InitAes.part.0+0xcc>)
   339c4:	2101      	movs	r1, #1
   339c6:	6019      	str	r1, [r3, #0]
   339c8:	6813      	ldr	r3, [r2, #0]
   339ca:	2b00      	cmp	r3, #0
   339cc:	d1fc      	bne.n	339c8 <InitAes.part.0+0x64>
   339ce:	4a19      	ldr	r2, [pc, #100]	; (33a34 <InitAes.part.0+0xd0>)
   339d0:	6813      	ldr	r3, [r2, #0]
   339d2:	2b00      	cmp	r3, #0
   339d4:	d1fc      	bne.n	339d0 <InitAes.part.0+0x6c>
   339d6:	491e      	ldr	r1, [pc, #120]	; (33a50 <InitAes.part.0+0xec>)
   339d8:	4a15      	ldr	r2, [pc, #84]	; (33a30 <InitAes.part.0+0xcc>)
   339da:	600b      	str	r3, [r1, #0]
   339dc:	6813      	ldr	r3, [r2, #0]
   339de:	2b00      	cmp	r3, #0
   339e0:	d1fc      	bne.n	339dc <InitAes.part.0+0x78>
   339e2:	4a14      	ldr	r2, [pc, #80]	; (33a34 <InitAes.part.0+0xd0>)
   339e4:	6813      	ldr	r3, [r2, #0]
   339e6:	2b00      	cmp	r3, #0
   339e8:	d1fc      	bne.n	339e4 <InitAes.part.0+0x80>
   339ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
   339ec:	f022 0104 	bic.w	r1, r2, #4
   339f0:	2903      	cmp	r1, #3
   339f2:	bf18      	it	ne
   339f4:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   339f6:	4917      	ldr	r1, [pc, #92]	; (33a54 <InitAes.part.0+0xf0>)
   339f8:	ea4f 0282 	mov.w	r2, r2, lsl #2
   339fc:	bf18      	it	ne
   339fe:	f003 0301 	andne.w	r3, r3, #1
   33a02:	f002 021c 	and.w	r2, r2, #28
   33a06:	4313      	orrs	r3, r2
   33a08:	600b      	str	r3, [r1, #0]
   33a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33a0c:	2b07      	cmp	r3, #7
   33a0e:	d102      	bne.n	33a16 <InitAes.part.0+0xb2>
   33a10:	4b11      	ldr	r3, [pc, #68]	; (33a58 <InitAes.part.0+0xf4>)
   33a12:	2201      	movs	r2, #1
   33a14:	601a      	str	r2, [r3, #0]
   33a16:	2000      	movs	r0, #0
   33a18:	bd10      	pop	{r4, pc}
   33a1a:	2b01      	cmp	r3, #1
   33a1c:	4b0a      	ldr	r3, [pc, #40]	; (33a48 <InitAes.part.0+0xe4>)
   33a1e:	6818      	ldr	r0, [r3, #0]
   33a20:	bf0c      	ite	eq
   33a22:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   33a26:	f020 0010 	bicne.w	r0, r0, #16
   33a2a:	f7fe fe8b 	bl	32744 <CC_HalMaskInterrupt>
   33a2e:	e7c7      	b.n	339c0 <InitAes.part.0+0x5c>
   33a30:	5002b910 	.word	0x5002b910
   33a34:	5002b470 	.word	0x5002b470
   33a38:	5002bd20 	.word	0x5002bd20
   33a3c:	5002bc20 	.word	0x5002bc20
   33a40:	5002bd38 	.word	0x5002bd38
   33a44:	5002bc38 	.word	0x5002bc38
   33a48:	5002ba04 	.word	0x5002ba04
   33a4c:	5002b900 	.word	0x5002b900
   33a50:	5002b4bc 	.word	0x5002b4bc
   33a54:	5002b4c0 	.word	0x5002b4c0
   33a58:	5002b47c 	.word	0x5002b47c

00033a5c <ProcessAesDrv>:
   33a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a60:	b087      	sub	sp, #28
   33a62:	2900      	cmp	r1, #0
   33a64:	f000 80a5 	beq.w	33bb2 <ProcessAesDrv+0x156>
   33a68:	4616      	mov	r6, r2
   33a6a:	2a00      	cmp	r2, #0
   33a6c:	f000 80a1 	beq.w	33bb2 <ProcessAesDrv+0x156>
   33a70:	4604      	mov	r4, r0
   33a72:	2800      	cmp	r0, #0
   33a74:	f000 813f 	beq.w	33cf6 <ProcessAesDrv+0x29a>
   33a78:	461f      	mov	r7, r3
   33a7a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   33a7c:	460d      	mov	r5, r1
   33a7e:	2b00      	cmp	r3, #0
   33a80:	d150      	bne.n	33b24 <ProcessAesDrv+0xc8>
   33a82:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   33a86:	d252      	bcs.n	33b2e <ProcessAesDrv+0xd2>
   33a88:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   33a8c:	2b04      	cmp	r3, #4
   33a8e:	f000 8109 	beq.w	33ca4 <ProcessAesDrv+0x248>
   33a92:	f04f 0800 	mov.w	r8, #0
   33a96:	48aa      	ldr	r0, [pc, #680]	; (33d40 <ProcessAesDrv+0x2e4>)
   33a98:	f04f 31ff 	mov.w	r1, #4294967295
   33a9c:	f7fe feec 	bl	32878 <CC_PalMutexLock>
   33aa0:	2800      	cmp	r0, #0
   33aa2:	f040 80de 	bne.w	33c62 <ProcessAesDrv+0x206>
   33aa6:	2000      	movs	r0, #0
   33aa8:	f7fe ff16 	bl	328d8 <CC_PalPowerSaveModeSelect>
   33aac:	2800      	cmp	r0, #0
   33aae:	f040 80e1 	bne.w	33c74 <ProcessAesDrv+0x218>
   33ab2:	4ba4      	ldr	r3, [pc, #656]	; (33d44 <ProcessAesDrv+0x2e8>)
   33ab4:	4aa4      	ldr	r2, [pc, #656]	; (33d48 <ProcessAesDrv+0x2ec>)
   33ab6:	2101      	movs	r1, #1
   33ab8:	6019      	str	r1, [r3, #0]
   33aba:	6813      	ldr	r3, [r2, #0]
   33abc:	2b00      	cmp	r3, #0
   33abe:	d1fc      	bne.n	33aba <ProcessAesDrv+0x5e>
   33ac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33ac2:	2b03      	cmp	r3, #3
   33ac4:	dc39      	bgt.n	33b3a <ProcessAesDrv+0xde>
   33ac6:	2b00      	cmp	r3, #0
   33ac8:	da3a      	bge.n	33b40 <ProcessAesDrv+0xe4>
   33aca:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 33d94 <ProcessAesDrv+0x338>
   33ace:	4a9e      	ldr	r2, [pc, #632]	; (33d48 <ProcessAesDrv+0x2ec>)
   33ad0:	6813      	ldr	r3, [r2, #0]
   33ad2:	2b00      	cmp	r3, #0
   33ad4:	d1fc      	bne.n	33ad0 <ProcessAesDrv+0x74>
   33ad6:	f1b8 0f00 	cmp.w	r8, #0
   33ada:	f040 80da 	bne.w	33c92 <ProcessAesDrv+0x236>
   33ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33ae0:	f023 0304 	bic.w	r3, r3, #4
   33ae4:	2b03      	cmp	r3, #3
   33ae6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   33ae8:	d058      	beq.n	33b9c <ProcessAesDrv+0x140>
   33aea:	2b01      	cmp	r3, #1
   33aec:	4b97      	ldr	r3, [pc, #604]	; (33d4c <ProcessAesDrv+0x2f0>)
   33aee:	6818      	ldr	r0, [r3, #0]
   33af0:	bf0c      	ite	eq
   33af2:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   33af6:	f040 0020 	orrne.w	r0, r0, #32
   33afa:	f7fe fe23 	bl	32744 <CC_HalMaskInterrupt>
   33afe:	4b91      	ldr	r3, [pc, #580]	; (33d44 <ProcessAesDrv+0x2e8>)
   33b00:	2200      	movs	r2, #0
   33b02:	601a      	str	r2, [r3, #0]
   33b04:	2001      	movs	r0, #1
   33b06:	f7fe fee7 	bl	328d8 <CC_PalPowerSaveModeSelect>
   33b0a:	2800      	cmp	r0, #0
   33b0c:	f040 80bd 	bne.w	33c8a <ProcessAesDrv+0x22e>
   33b10:	488b      	ldr	r0, [pc, #556]	; (33d40 <ProcessAesDrv+0x2e4>)
   33b12:	f7fe feb9 	bl	32888 <CC_PalMutexUnlock>
   33b16:	2800      	cmp	r0, #0
   33b18:	f040 80b0 	bne.w	33c7c <ProcessAesDrv+0x220>
   33b1c:	4648      	mov	r0, r9
   33b1e:	b007      	add	sp, #28
   33b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b24:	2b01      	cmp	r3, #1
   33b26:	d1af      	bne.n	33a88 <ProcessAesDrv+0x2c>
   33b28:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   33b2c:	d3ac      	bcc.n	33a88 <ProcessAesDrv+0x2c>
   33b2e:	f8df 9268 	ldr.w	r9, [pc, #616]	; 33d98 <ProcessAesDrv+0x33c>
   33b32:	4648      	mov	r0, r9
   33b34:	b007      	add	sp, #28
   33b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b3a:	3b06      	subs	r3, #6
   33b3c:	2b01      	cmp	r3, #1
   33b3e:	d8c4      	bhi.n	33aca <ProcessAesDrv+0x6e>
   33b40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   33b42:	2b01      	cmp	r3, #1
   33b44:	f200 80d4 	bhi.w	33cf0 <ProcessAesDrv+0x294>
   33b48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   33b4a:	2b01      	cmp	r3, #1
   33b4c:	d837      	bhi.n	33bbe <ProcessAesDrv+0x162>
   33b4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   33b50:	2b01      	cmp	r3, #1
   33b52:	f200 8131 	bhi.w	33db8 <ProcessAesDrv+0x35c>
   33b56:	4620      	mov	r0, r4
   33b58:	f7ff ff04 	bl	33964 <InitAes.part.0>
   33b5c:	4681      	mov	r9, r0
   33b5e:	2800      	cmp	r0, #0
   33b60:	d1b5      	bne.n	33ace <ProcessAesDrv+0x72>
   33b62:	4620      	mov	r0, r4
   33b64:	f7ff feb4 	bl	338d0 <LoadAesKey>
   33b68:	4681      	mov	r9, r0
   33b6a:	2800      	cmp	r0, #0
   33b6c:	d1af      	bne.n	33ace <ProcessAesDrv+0x72>
   33b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33b70:	2b07      	cmp	r3, #7
   33b72:	d8aa      	bhi.n	33aca <ProcessAesDrv+0x6e>
   33b74:	a201      	add	r2, pc, #4	; (adr r2, 33b7c <ProcessAesDrv+0x120>)
   33b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   33b7a:	bf00      	nop
   33b7c:	00033bd9 	.word	0x00033bd9
   33b80:	00033bc5 	.word	0x00033bc5
   33b84:	00033d35 	.word	0x00033d35
   33b88:	00033bc5 	.word	0x00033bc5
   33b8c:	00033acb 	.word	0x00033acb
   33b90:	00033acb 	.word	0x00033acb
   33b94:	00033d35 	.word	0x00033d35
   33b98:	00033bc5 	.word	0x00033bc5
   33b9c:	2b01      	cmp	r3, #1
   33b9e:	4b6b      	ldr	r3, [pc, #428]	; (33d4c <ProcessAesDrv+0x2f0>)
   33ba0:	6818      	ldr	r0, [r3, #0]
   33ba2:	bf0c      	ite	eq
   33ba4:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   33ba8:	f040 0010 	orrne.w	r0, r0, #16
   33bac:	f7fe fdca 	bl	32744 <CC_HalMaskInterrupt>
   33bb0:	e7a5      	b.n	33afe <ProcessAesDrv+0xa2>
   33bb2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 33d9c <ProcessAesDrv+0x340>
   33bb6:	4648      	mov	r0, r9
   33bb8:	b007      	add	sp, #28
   33bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33bbe:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 33da0 <ProcessAesDrv+0x344>
   33bc2:	e784      	b.n	33ace <ProcessAesDrv+0x72>
   33bc4:	4b62      	ldr	r3, [pc, #392]	; (33d50 <ProcessAesDrv+0x2f4>)
   33bc6:	6822      	ldr	r2, [r4, #0]
   33bc8:	601a      	str	r2, [r3, #0]
   33bca:	6862      	ldr	r2, [r4, #4]
   33bcc:	605a      	str	r2, [r3, #4]
   33bce:	68a2      	ldr	r2, [r4, #8]
   33bd0:	609a      	str	r2, [r3, #8]
   33bd2:	68e2      	ldr	r2, [r4, #12]
   33bd4:	60da      	str	r2, [r3, #12]
   33bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33bd8:	682a      	ldr	r2, [r5, #0]
   33bda:	f023 0304 	bic.w	r3, r3, #4
   33bde:	2b03      	cmp	r3, #3
   33be0:	d009      	beq.n	33bf6 <ProcessAesDrv+0x19a>
   33be2:	6e21      	ldr	r1, [r4, #96]	; 0x60
   33be4:	6833      	ldr	r3, [r6, #0]
   33be6:	2901      	cmp	r1, #1
   33be8:	bf07      	ittee	eq
   33bea:	485a      	ldreq	r0, [pc, #360]	; (33d54 <ProcessAesDrv+0x2f8>)
   33bec:	495a      	ldreq	r1, [pc, #360]	; (33d58 <ProcessAesDrv+0x2fc>)
   33bee:	485b      	ldrne	r0, [pc, #364]	; (33d5c <ProcessAesDrv+0x300>)
   33bf0:	495b      	ldrne	r1, [pc, #364]	; (33d60 <ProcessAesDrv+0x304>)
   33bf2:	6003      	str	r3, [r0, #0]
   33bf4:	600f      	str	r7, [r1, #0]
   33bf6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   33bf8:	2b01      	cmp	r3, #1
   33bfa:	bf0b      	itete	eq
   33bfc:	4b59      	ldreq	r3, [pc, #356]	; (33d64 <ProcessAesDrv+0x308>)
   33bfe:	4b5a      	ldrne	r3, [pc, #360]	; (33d68 <ProcessAesDrv+0x30c>)
   33c00:	495a      	ldreq	r1, [pc, #360]	; (33d6c <ProcessAesDrv+0x310>)
   33c02:	495b      	ldrne	r1, [pc, #364]	; (33d70 <ProcessAesDrv+0x314>)
   33c04:	600a      	str	r2, [r1, #0]
   33c06:	601f      	str	r7, [r3, #0]
   33c08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33c0a:	f023 0304 	bic.w	r3, r3, #4
   33c0e:	2b03      	cmp	r3, #3
   33c10:	d074      	beq.n	33cfc <ProcessAesDrv+0x2a0>
   33c12:	6e23      	ldr	r3, [r4, #96]	; 0x60
   33c14:	2b01      	cmp	r3, #1
   33c16:	bf0c      	ite	eq
   33c18:	2080      	moveq	r0, #128	; 0x80
   33c1a:	2020      	movne	r0, #32
   33c1c:	f7fe fd98 	bl	32750 <CC_HalWaitInterrupt>
   33c20:	4681      	mov	r9, r0
   33c22:	2800      	cmp	r0, #0
   33c24:	f47f af53 	bne.w	33ace <ProcessAesDrv+0x72>
   33c28:	4b47      	ldr	r3, [pc, #284]	; (33d48 <ProcessAesDrv+0x2ec>)
   33c2a:	681a      	ldr	r2, [r3, #0]
   33c2c:	2a00      	cmp	r2, #0
   33c2e:	d1fc      	bne.n	33c2a <ProcessAesDrv+0x1ce>
   33c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33c32:	3b01      	subs	r3, #1
   33c34:	4691      	mov	r9, r2
   33c36:	2b06      	cmp	r3, #6
   33c38:	d810      	bhi.n	33c5c <ProcessAesDrv+0x200>
   33c3a:	e8df f003 	tbb	[pc, r3]
   33c3e:	7d04      	.short	0x7d04
   33c40:	7d0f0f04 	.word	0x7d0f0f04
   33c44:	04          	.byte	0x04
   33c45:	00          	.byte	0x00
   33c46:	4a42      	ldr	r2, [pc, #264]	; (33d50 <ProcessAesDrv+0x2f4>)
   33c48:	4b4a      	ldr	r3, [pc, #296]	; (33d74 <ProcessAesDrv+0x318>)
   33c4a:	6812      	ldr	r2, [r2, #0]
   33c4c:	6022      	str	r2, [r4, #0]
   33c4e:	681a      	ldr	r2, [r3, #0]
   33c50:	6062      	str	r2, [r4, #4]
   33c52:	685a      	ldr	r2, [r3, #4]
   33c54:	60a2      	str	r2, [r4, #8]
   33c56:	3308      	adds	r3, #8
   33c58:	681b      	ldr	r3, [r3, #0]
   33c5a:	60e3      	str	r3, [r4, #12]
   33c5c:	2301      	movs	r3, #1
   33c5e:	65a3      	str	r3, [r4, #88]	; 0x58
   33c60:	e735      	b.n	33ace <ProcessAesDrv+0x72>
   33c62:	4845      	ldr	r0, [pc, #276]	; (33d78 <ProcessAesDrv+0x31c>)
   33c64:	f7fd febc 	bl	319e0 <CC_PalAbort>
   33c68:	2000      	movs	r0, #0
   33c6a:	f7fe fe35 	bl	328d8 <CC_PalPowerSaveModeSelect>
   33c6e:	2800      	cmp	r0, #0
   33c70:	f43f af1f 	beq.w	33ab2 <ProcessAesDrv+0x56>
   33c74:	4841      	ldr	r0, [pc, #260]	; (33d7c <ProcessAesDrv+0x320>)
   33c76:	f7fd feb3 	bl	319e0 <CC_PalAbort>
   33c7a:	e71a      	b.n	33ab2 <ProcessAesDrv+0x56>
   33c7c:	4840      	ldr	r0, [pc, #256]	; (33d80 <ProcessAesDrv+0x324>)
   33c7e:	f7fd feaf 	bl	319e0 <CC_PalAbort>
   33c82:	4648      	mov	r0, r9
   33c84:	b007      	add	sp, #28
   33c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c8a:	483e      	ldr	r0, [pc, #248]	; (33d84 <ProcessAesDrv+0x328>)
   33c8c:	f7fd fea8 	bl	319e0 <CC_PalAbort>
   33c90:	e73e      	b.n	33b10 <ProcessAesDrv+0xb4>
   33c92:	2304      	movs	r3, #4
   33c94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   33c98:	2120      	movs	r1, #32
   33c9a:	f104 0010 	add.w	r0, r4, #16
   33c9e:	f7ff fba5 	bl	333ec <CC_PalMemSetZeroPlat>
   33ca2:	e71c      	b.n	33ade <ProcessAesDrv+0x82>
   33ca4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   33ca6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   33ca8:	f000 f9c8 	bl	3403c <kmu_validate_slot_and_size>
   33cac:	b9e8      	cbnz	r0, 33cea <ProcessAesDrv+0x28e>
   33cae:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 33da4 <ProcessAesDrv+0x348>
   33cb2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 33da8 <ProcessAesDrv+0x34c>
   33cb6:	f8d8 3000 	ldr.w	r3, [r8]
   33cba:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 33dac <ProcessAesDrv+0x350>
   33cbe:	681b      	ldr	r3, [r3, #0]
   33cc0:	f8cb 3000 	str.w	r3, [fp]
   33cc4:	f8d8 3000 	ldr.w	r3, [r8]
   33cc8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 33db0 <ProcessAesDrv+0x354>
   33ccc:	685b      	ldr	r3, [r3, #4]
   33cce:	f8ca 3000 	str.w	r3, [sl]
   33cd2:	f8d8 3000 	ldr.w	r3, [r8]
   33cd6:	4a2c      	ldr	r2, [pc, #176]	; (33d88 <ProcessAesDrv+0x32c>)
   33cd8:	689b      	ldr	r3, [r3, #8]
   33cda:	f8c9 3000 	str.w	r3, [r9]
   33cde:	f8d8 3000 	ldr.w	r3, [r8]
   33ce2:	68db      	ldr	r3, [r3, #12]
   33ce4:	6013      	str	r3, [r2, #0]
   33ce6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   33ce8:	b171      	cbz	r1, 33d08 <ProcessAesDrv+0x2ac>
   33cea:	f04f 0801 	mov.w	r8, #1
   33cee:	e6d2      	b.n	33a96 <ProcessAesDrv+0x3a>
   33cf0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 33db4 <ProcessAesDrv+0x358>
   33cf4:	e6eb      	b.n	33ace <ProcessAesDrv+0x72>
   33cf6:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   33cfa:	e70f      	b.n	33b1c <ProcessAesDrv+0xc0>
   33cfc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   33cfe:	2b01      	cmp	r3, #1
   33d00:	bf0c      	ite	eq
   33d02:	2040      	moveq	r0, #64	; 0x40
   33d04:	2010      	movne	r0, #16
   33d06:	e789      	b.n	33c1c <ProcessAesDrv+0x1c0>
   33d08:	f104 0310 	add.w	r3, r4, #16
   33d0c:	4618      	mov	r0, r3
   33d0e:	9305      	str	r3, [sp, #20]
   33d10:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   33d14:	e9cd 3200 	strd	r3, r2, [sp]
   33d18:	9002      	str	r0, [sp, #8]
   33d1a:	2010      	movs	r0, #16
   33d1c:	9003      	str	r0, [sp, #12]
   33d1e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   33d22:	6c20      	ldr	r0, [r4, #64]	; 0x40
   33d24:	f000 f9ae 	bl	34084 <kmu_derive_cmac>
   33d28:	2800      	cmp	r0, #0
   33d2a:	d148      	bne.n	33dbe <ProcessAesDrv+0x362>
   33d2c:	2300      	movs	r3, #0
   33d2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   33d32:	e7da      	b.n	33cea <ProcessAesDrv+0x28e>
   33d34:	4b15      	ldr	r3, [pc, #84]	; (33d8c <ProcessAesDrv+0x330>)
   33d36:	e746      	b.n	33bc6 <ProcessAesDrv+0x16a>
   33d38:	4a14      	ldr	r2, [pc, #80]	; (33d8c <ProcessAesDrv+0x330>)
   33d3a:	4b15      	ldr	r3, [pc, #84]	; (33d90 <ProcessAesDrv+0x334>)
   33d3c:	e785      	b.n	33c4a <ProcessAesDrv+0x1ee>
   33d3e:	bf00      	nop
   33d40:	2000096c 	.word	0x2000096c
   33d44:	5002b810 	.word	0x5002b810
   33d48:	5002b910 	.word	0x5002b910
   33d4c:	5002ba04 	.word	0x5002ba04
   33d50:	5002b440 	.word	0x5002b440
   33d54:	5002bd28 	.word	0x5002bd28
   33d58:	5002bd2c 	.word	0x5002bd2c
   33d5c:	5002bd30 	.word	0x5002bd30
   33d60:	5002bd34 	.word	0x5002bd34
   33d64:	5002bc2c 	.word	0x5002bc2c
   33d68:	5002bc34 	.word	0x5002bc34
   33d6c:	5002bc28 	.word	0x5002bc28
   33d70:	5002bc30 	.word	0x5002bc30
   33d74:	5002b444 	.word	0x5002b444
   33d78:	00040b04 	.word	0x00040b04
   33d7c:	00040b1c 	.word	0x00040b1c
   33d80:	00040b5c 	.word	0x00040b5c
   33d84:	00040b3c 	.word	0x00040b3c
   33d88:	5002b40c 	.word	0x5002b40c
   33d8c:	5002b460 	.word	0x5002b460
   33d90:	5002b464 	.word	0x5002b464
   33d94:	00f10001 	.word	0x00f10001
   33d98:	00f10005 	.word	0x00f10005
   33d9c:	00f1000b 	.word	0x00f1000b
   33da0:	00f10003 	.word	0x00f10003
   33da4:	2000095c 	.word	0x2000095c
   33da8:	5002b400 	.word	0x5002b400
   33dac:	5002b404 	.word	0x5002b404
   33db0:	5002b408 	.word	0x5002b408
   33db4:	00f10002 	.word	0x00f10002
   33db8:	f8df 9038 	ldr.w	r9, [pc, #56]	; 33df4 <ProcessAesDrv+0x398>
   33dbc:	e687      	b.n	33ace <ProcessAesDrv+0x72>
   33dbe:	f8d8 3000 	ldr.w	r3, [r8]
   33dc2:	4a0b      	ldr	r2, [pc, #44]	; (33df0 <ProcessAesDrv+0x394>)
   33dc4:	681b      	ldr	r3, [r3, #0]
   33dc6:	f8cb 3000 	str.w	r3, [fp]
   33dca:	f8d8 3000 	ldr.w	r3, [r8]
   33dce:	685b      	ldr	r3, [r3, #4]
   33dd0:	f8ca 3000 	str.w	r3, [sl]
   33dd4:	f8d8 3000 	ldr.w	r3, [r8]
   33dd8:	689b      	ldr	r3, [r3, #8]
   33dda:	f8c9 3000 	str.w	r3, [r9]
   33dde:	f8d8 3000 	ldr.w	r3, [r8]
   33de2:	68db      	ldr	r3, [r3, #12]
   33de4:	6013      	str	r3, [r2, #0]
   33de6:	9805      	ldr	r0, [sp, #20]
   33de8:	2110      	movs	r1, #16
   33dea:	f7ff faff 	bl	333ec <CC_PalMemSetZeroPlat>
   33dee:	e79d      	b.n	33d2c <ProcessAesDrv+0x2d0>
   33df0:	5002b40c 	.word	0x5002b40c
   33df4:	00f10004 	.word	0x00f10004

00033df8 <FinishAesDrv>:
   33df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33dfc:	b301      	cbz	r1, 33e40 <FinishAesDrv+0x48>
   33dfe:	b1fa      	cbz	r2, 33e40 <FinishAesDrv+0x48>
   33e00:	4604      	mov	r4, r0
   33e02:	2800      	cmp	r0, #0
   33e04:	d07a      	beq.n	33efc <FinishAesDrv+0x104>
   33e06:	461d      	mov	r5, r3
   33e08:	6b43      	ldr	r3, [r0, #52]	; 0x34
   33e0a:	2b07      	cmp	r3, #7
   33e0c:	460e      	mov	r6, r1
   33e0e:	d01b      	beq.n	33e48 <FinishAesDrv+0x50>
   33e10:	b95d      	cbnz	r5, 33e2a <FinishAesDrv+0x32>
   33e12:	2b03      	cmp	r3, #3
   33e14:	d110      	bne.n	33e38 <FinishAesDrv+0x40>
   33e16:	6d83      	ldr	r3, [r0, #88]	; 0x58
   33e18:	b973      	cbnz	r3, 33e38 <FinishAesDrv+0x40>
   33e1a:	f100 0364 	add.w	r3, r0, #100	; 0x64
   33e1e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   33e22:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   33e26:	600b      	str	r3, [r1, #0]
   33e28:	2510      	movs	r5, #16
   33e2a:	462b      	mov	r3, r5
   33e2c:	4631      	mov	r1, r6
   33e2e:	4620      	mov	r0, r4
   33e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33e34:	f7ff be12 	b.w	33a5c <ProcessAesDrv>
   33e38:	462f      	mov	r7, r5
   33e3a:	4638      	mov	r0, r7
   33e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33e40:	4f66      	ldr	r7, [pc, #408]	; (33fdc <FinishAesDrv+0x1e4>)
   33e42:	4638      	mov	r0, r7
   33e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33e48:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   33e4a:	2b00      	cmp	r3, #0
   33e4c:	d159      	bne.n	33f02 <FinishAesDrv+0x10a>
   33e4e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   33e52:	d25b      	bcs.n	33f0c <FinishAesDrv+0x114>
   33e54:	b915      	cbnz	r5, 33e5c <FinishAesDrv+0x64>
   33e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
   33e58:	2b00      	cmp	r3, #0
   33e5a:	d157      	bne.n	33f0c <FinishAesDrv+0x114>
   33e5c:	4860      	ldr	r0, [pc, #384]	; (33fe0 <FinishAesDrv+0x1e8>)
   33e5e:	f04f 31ff 	mov.w	r1, #4294967295
   33e62:	f7fe fd09 	bl	32878 <CC_PalMutexLock>
   33e66:	2800      	cmp	r0, #0
   33e68:	f040 8097 	bne.w	33f9a <FinishAesDrv+0x1a2>
   33e6c:	2000      	movs	r0, #0
   33e6e:	f7fe fd33 	bl	328d8 <CC_PalPowerSaveModeSelect>
   33e72:	2800      	cmp	r0, #0
   33e74:	f040 808d 	bne.w	33f92 <FinishAesDrv+0x19a>
   33e78:	4b5a      	ldr	r3, [pc, #360]	; (33fe4 <FinishAesDrv+0x1ec>)
   33e7a:	4a5b      	ldr	r2, [pc, #364]	; (33fe8 <FinishAesDrv+0x1f0>)
   33e7c:	2101      	movs	r1, #1
   33e7e:	6019      	str	r1, [r3, #0]
   33e80:	6813      	ldr	r3, [r2, #0]
   33e82:	2b00      	cmp	r3, #0
   33e84:	d1fc      	bne.n	33e80 <FinishAesDrv+0x88>
   33e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33e88:	2b03      	cmp	r3, #3
   33e8a:	dd20      	ble.n	33ece <FinishAesDrv+0xd6>
   33e8c:	3b06      	subs	r3, #6
   33e8e:	2b01      	cmp	r3, #1
   33e90:	d81f      	bhi.n	33ed2 <FinishAesDrv+0xda>
   33e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   33e94:	2b01      	cmp	r3, #1
   33e96:	d83b      	bhi.n	33f10 <FinishAesDrv+0x118>
   33e98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   33e9a:	2b01      	cmp	r3, #1
   33e9c:	f200 8085 	bhi.w	33faa <FinishAesDrv+0x1b2>
   33ea0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   33ea2:	2b01      	cmp	r3, #1
   33ea4:	f200 8083 	bhi.w	33fae <FinishAesDrv+0x1b6>
   33ea8:	4620      	mov	r0, r4
   33eaa:	f7ff fd5b 	bl	33964 <InitAes.part.0>
   33eae:	4607      	mov	r7, r0
   33eb0:	b980      	cbnz	r0, 33ed4 <FinishAesDrv+0xdc>
   33eb2:	4620      	mov	r0, r4
   33eb4:	f7ff fd0c 	bl	338d0 <LoadAesKey>
   33eb8:	4607      	mov	r7, r0
   33eba:	b958      	cbnz	r0, 33ed4 <FinishAesDrv+0xdc>
   33ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33ebe:	2b07      	cmp	r3, #7
   33ec0:	d807      	bhi.n	33ed2 <FinishAesDrv+0xda>
   33ec2:	e8df f003 	tbb	[pc, r3]
   33ec6:	2730      	.short	0x2730
   33ec8:	06062755 	.word	0x06062755
   33ecc:	2755      	.short	0x2755
   33ece:	2b00      	cmp	r3, #0
   33ed0:	dadf      	bge.n	33e92 <FinishAesDrv+0x9a>
   33ed2:	4f46      	ldr	r7, [pc, #280]	; (33fec <FinishAesDrv+0x1f4>)
   33ed4:	4a44      	ldr	r2, [pc, #272]	; (33fe8 <FinishAesDrv+0x1f0>)
   33ed6:	6813      	ldr	r3, [r2, #0]
   33ed8:	2b00      	cmp	r3, #0
   33eda:	d1fc      	bne.n	33ed6 <FinishAesDrv+0xde>
   33edc:	4a41      	ldr	r2, [pc, #260]	; (33fe4 <FinishAesDrv+0x1ec>)
   33ede:	2001      	movs	r0, #1
   33ee0:	6013      	str	r3, [r2, #0]
   33ee2:	f7fe fcf9 	bl	328d8 <CC_PalPowerSaveModeSelect>
   33ee6:	2800      	cmp	r0, #0
   33ee8:	d15b      	bne.n	33fa2 <FinishAesDrv+0x1aa>
   33eea:	483d      	ldr	r0, [pc, #244]	; (33fe0 <FinishAesDrv+0x1e8>)
   33eec:	f7fe fccc 	bl	32888 <CC_PalMutexUnlock>
   33ef0:	2800      	cmp	r0, #0
   33ef2:	d0a2      	beq.n	33e3a <FinishAesDrv+0x42>
   33ef4:	483e      	ldr	r0, [pc, #248]	; (33ff0 <FinishAesDrv+0x1f8>)
   33ef6:	f7fd fd73 	bl	319e0 <CC_PalAbort>
   33efa:	e79e      	b.n	33e3a <FinishAesDrv+0x42>
   33efc:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   33f00:	e79b      	b.n	33e3a <FinishAesDrv+0x42>
   33f02:	2b01      	cmp	r3, #1
   33f04:	d1a6      	bne.n	33e54 <FinishAesDrv+0x5c>
   33f06:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   33f0a:	d3a3      	bcc.n	33e54 <FinishAesDrv+0x5c>
   33f0c:	4f39      	ldr	r7, [pc, #228]	; (33ff4 <FinishAesDrv+0x1fc>)
   33f0e:	e794      	b.n	33e3a <FinishAesDrv+0x42>
   33f10:	4f39      	ldr	r7, [pc, #228]	; (33ff8 <FinishAesDrv+0x200>)
   33f12:	e7df      	b.n	33ed4 <FinishAesDrv+0xdc>
   33f14:	4b39      	ldr	r3, [pc, #228]	; (33ffc <FinishAesDrv+0x204>)
   33f16:	6822      	ldr	r2, [r4, #0]
   33f18:	601a      	str	r2, [r3, #0]
   33f1a:	6862      	ldr	r2, [r4, #4]
   33f1c:	605a      	str	r2, [r3, #4]
   33f1e:	68a2      	ldr	r2, [r4, #8]
   33f20:	609a      	str	r2, [r3, #8]
   33f22:	68e2      	ldr	r2, [r4, #12]
   33f24:	60da      	str	r2, [r3, #12]
   33f26:	4936      	ldr	r1, [pc, #216]	; (34000 <FinishAesDrv+0x208>)
   33f28:	4a36      	ldr	r2, [pc, #216]	; (34004 <FinishAesDrv+0x20c>)
   33f2a:	2301      	movs	r3, #1
   33f2c:	600b      	str	r3, [r1, #0]
   33f2e:	6015      	str	r5, [r2, #0]
   33f30:	2d00      	cmp	r5, #0
   33f32:	d13e      	bne.n	33fb2 <FinishAesDrv+0x1ba>
   33f34:	6da2      	ldr	r2, [r4, #88]	; 0x58
   33f36:	b90a      	cbnz	r2, 33f3c <FinishAesDrv+0x144>
   33f38:	4a33      	ldr	r2, [pc, #204]	; (34008 <FinishAesDrv+0x210>)
   33f3a:	6013      	str	r3, [r2, #0]
   33f3c:	4b2a      	ldr	r3, [pc, #168]	; (33fe8 <FinishAesDrv+0x1f0>)
   33f3e:	681f      	ldr	r7, [r3, #0]
   33f40:	2f00      	cmp	r7, #0
   33f42:	d1fc      	bne.n	33f3e <FinishAesDrv+0x146>
   33f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33f46:	3b01      	subs	r3, #1
   33f48:	2b06      	cmp	r3, #6
   33f4a:	d8c3      	bhi.n	33ed4 <FinishAesDrv+0xdc>
   33f4c:	a201      	add	r2, pc, #4	; (adr r2, 33f54 <FinishAesDrv+0x15c>)
   33f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   33f52:	bf00      	nop
   33f54:	00033f75 	.word	0x00033f75
   33f58:	00033f8d 	.word	0x00033f8d
   33f5c:	00033f75 	.word	0x00033f75
   33f60:	00033ed5 	.word	0x00033ed5
   33f64:	00033ed5 	.word	0x00033ed5
   33f68:	00033f8d 	.word	0x00033f8d
   33f6c:	00033f75 	.word	0x00033f75
   33f70:	4b26      	ldr	r3, [pc, #152]	; (3400c <FinishAesDrv+0x214>)
   33f72:	e7d0      	b.n	33f16 <FinishAesDrv+0x11e>
   33f74:	4a21      	ldr	r2, [pc, #132]	; (33ffc <FinishAesDrv+0x204>)
   33f76:	4b26      	ldr	r3, [pc, #152]	; (34010 <FinishAesDrv+0x218>)
   33f78:	6812      	ldr	r2, [r2, #0]
   33f7a:	6022      	str	r2, [r4, #0]
   33f7c:	681a      	ldr	r2, [r3, #0]
   33f7e:	6062      	str	r2, [r4, #4]
   33f80:	685a      	ldr	r2, [r3, #4]
   33f82:	60a2      	str	r2, [r4, #8]
   33f84:	3308      	adds	r3, #8
   33f86:	681b      	ldr	r3, [r3, #0]
   33f88:	60e3      	str	r3, [r4, #12]
   33f8a:	e7a3      	b.n	33ed4 <FinishAesDrv+0xdc>
   33f8c:	4a1f      	ldr	r2, [pc, #124]	; (3400c <FinishAesDrv+0x214>)
   33f8e:	4b21      	ldr	r3, [pc, #132]	; (34014 <FinishAesDrv+0x21c>)
   33f90:	e7f2      	b.n	33f78 <FinishAesDrv+0x180>
   33f92:	4821      	ldr	r0, [pc, #132]	; (34018 <FinishAesDrv+0x220>)
   33f94:	f7fd fd24 	bl	319e0 <CC_PalAbort>
   33f98:	e76e      	b.n	33e78 <FinishAesDrv+0x80>
   33f9a:	4820      	ldr	r0, [pc, #128]	; (3401c <FinishAesDrv+0x224>)
   33f9c:	f7fd fd20 	bl	319e0 <CC_PalAbort>
   33fa0:	e764      	b.n	33e6c <FinishAesDrv+0x74>
   33fa2:	481f      	ldr	r0, [pc, #124]	; (34020 <FinishAesDrv+0x228>)
   33fa4:	f7fd fd1c 	bl	319e0 <CC_PalAbort>
   33fa8:	e79f      	b.n	33eea <FinishAesDrv+0xf2>
   33faa:	4f1e      	ldr	r7, [pc, #120]	; (34024 <FinishAesDrv+0x22c>)
   33fac:	e792      	b.n	33ed4 <FinishAesDrv+0xdc>
   33fae:	4f1e      	ldr	r7, [pc, #120]	; (34028 <FinishAesDrv+0x230>)
   33fb0:	e790      	b.n	33ed4 <FinishAesDrv+0xdc>
   33fb2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   33fb4:	6833      	ldr	r3, [r6, #0]
   33fb6:	2a01      	cmp	r2, #1
   33fb8:	d00a      	beq.n	33fd0 <FinishAesDrv+0x1d8>
   33fba:	491c      	ldr	r1, [pc, #112]	; (3402c <FinishAesDrv+0x234>)
   33fbc:	4a1c      	ldr	r2, [pc, #112]	; (34030 <FinishAesDrv+0x238>)
   33fbe:	600b      	str	r3, [r1, #0]
   33fc0:	2010      	movs	r0, #16
   33fc2:	6015      	str	r5, [r2, #0]
   33fc4:	f7fe fbc4 	bl	32750 <CC_HalWaitInterrupt>
   33fc8:	4607      	mov	r7, r0
   33fca:	2800      	cmp	r0, #0
   33fcc:	d0b6      	beq.n	33f3c <FinishAesDrv+0x144>
   33fce:	e781      	b.n	33ed4 <FinishAesDrv+0xdc>
   33fd0:	4918      	ldr	r1, [pc, #96]	; (34034 <FinishAesDrv+0x23c>)
   33fd2:	4a19      	ldr	r2, [pc, #100]	; (34038 <FinishAesDrv+0x240>)
   33fd4:	600b      	str	r3, [r1, #0]
   33fd6:	2040      	movs	r0, #64	; 0x40
   33fd8:	6015      	str	r5, [r2, #0]
   33fda:	e7f3      	b.n	33fc4 <FinishAesDrv+0x1cc>
   33fdc:	00f1000b 	.word	0x00f1000b
   33fe0:	2000096c 	.word	0x2000096c
   33fe4:	5002b810 	.word	0x5002b810
   33fe8:	5002b910 	.word	0x5002b910
   33fec:	00f10001 	.word	0x00f10001
   33ff0:	00040b5c 	.word	0x00040b5c
   33ff4:	00f10005 	.word	0x00f10005
   33ff8:	00f10002 	.word	0x00f10002
   33ffc:	5002b440 	.word	0x5002b440
   34000:	5002b47c 	.word	0x5002b47c
   34004:	5002b4bc 	.word	0x5002b4bc
   34008:	5002b524 	.word	0x5002b524
   3400c:	5002b460 	.word	0x5002b460
   34010:	5002b444 	.word	0x5002b444
   34014:	5002b464 	.word	0x5002b464
   34018:	00040b1c 	.word	0x00040b1c
   3401c:	00040b04 	.word	0x00040b04
   34020:	00040b3c 	.word	0x00040b3c
   34024:	00f10003 	.word	0x00f10003
   34028:	00f10004 	.word	0x00f10004
   3402c:	5002bc30 	.word	0x5002bc30
   34030:	5002bc34 	.word	0x5002bc34
   34034:	5002bc28 	.word	0x5002bc28
   34038:	5002bc2c 	.word	0x5002bc2c

0003403c <kmu_validate_slot_and_size>:
   3403c:	b921      	cbnz	r1, 34048 <kmu_validate_slot_and_size+0xc>
   3403e:	4b03      	ldr	r3, [pc, #12]	; (3404c <kmu_validate_slot_and_size+0x10>)
   34040:	2800      	cmp	r0, #0
   34042:	bf18      	it	ne
   34044:	4618      	movne	r0, r3
   34046:	4770      	bx	lr
   34048:	4801      	ldr	r0, [pc, #4]	; (34050 <kmu_validate_slot_and_size+0x14>)
   3404a:	4770      	bx	lr
   3404c:	00f70001 	.word	0x00f70001
   34050:	00f70003 	.word	0x00f70003

00034054 <kmu_validate_kdr_slot_and_size>:
   34054:	b921      	cbnz	r1, 34060 <kmu_validate_kdr_slot_and_size+0xc>
   34056:	4b03      	ldr	r3, [pc, #12]	; (34064 <kmu_validate_kdr_slot_and_size+0x10>)
   34058:	2800      	cmp	r0, #0
   3405a:	bf18      	it	ne
   3405c:	4618      	movne	r0, r3
   3405e:	4770      	bx	lr
   34060:	4801      	ldr	r0, [pc, #4]	; (34068 <kmu_validate_kdr_slot_and_size+0x14>)
   34062:	4770      	bx	lr
   34064:	00f70001 	.word	0x00f70001
   34068:	00f70003 	.word	0x00f70003

0003406c <kmu_use_kdr_key>:
   3406c:	4903      	ldr	r1, [pc, #12]	; (3407c <kmu_use_kdr_key+0x10>)
   3406e:	4b04      	ldr	r3, [pc, #16]	; (34080 <kmu_use_kdr_key+0x14>)
   34070:	2000      	movs	r0, #0
   34072:	2201      	movs	r2, #1
   34074:	6008      	str	r0, [r1, #0]
   34076:	601a      	str	r2, [r3, #0]
   34078:	4770      	bx	lr
   3407a:	bf00      	nop
   3407c:	5002ba38 	.word	0x5002ba38
   34080:	5002b478 	.word	0x5002b478

00034084 <kmu_derive_cmac>:
   34084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34088:	b0cd      	sub	sp, #308	; 0x134
   3408a:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   3408e:	460f      	mov	r7, r1
   34090:	2100      	movs	r1, #0
   34092:	460c      	mov	r4, r1
   34094:	4681      	mov	r9, r0
   34096:	4616      	mov	r6, r2
   34098:	a80e      	add	r0, sp, #56	; 0x38
   3409a:	2274      	movs	r2, #116	; 0x74
   3409c:	469b      	mov	fp, r3
   3409e:	f002 fe85 	bl	36dac <memset>
   340a2:	4621      	mov	r1, r4
   340a4:	2280      	movs	r2, #128	; 0x80
   340a6:	a82c      	add	r0, sp, #176	; 0xb0
   340a8:	942b      	str	r4, [sp, #172]	; 0xac
   340aa:	f002 fe7f 	bl	36dac <memset>
   340ae:	2384      	movs	r3, #132	; 0x84
   340b0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   340b4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   340b8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   340bc:	9305      	str	r3, [sp, #20]
   340be:	d860      	bhi.n	34182 <kmu_derive_cmac+0xfe>
   340c0:	ab05      	add	r3, sp, #20
   340c2:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   340c6:	9301      	str	r3, [sp, #4]
   340c8:	9502      	str	r5, [sp, #8]
   340ca:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   340ce:	4659      	mov	r1, fp
   340d0:	4630      	mov	r0, r6
   340d2:	f8cd a000 	str.w	sl, [sp]
   340d6:	f000 f865 	bl	341a4 <UtilCmacBuildDataForDerivation>
   340da:	2800      	cmp	r0, #0
   340dc:	d14c      	bne.n	34178 <kmu_derive_cmac+0xf4>
   340de:	2303      	movs	r3, #3
   340e0:	f88d 3013 	strb.w	r3, [sp, #19]
   340e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   340e8:	901c      	str	r0, [sp, #112]	; 0x70
   340ea:	2200      	movs	r2, #0
   340ec:	2110      	movs	r1, #16
   340ee:	a80e      	add	r0, sp, #56	; 0x38
   340f0:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   340f4:	2607      	movs	r6, #7
   340f6:	2301      	movs	r3, #1
   340f8:	2401      	movs	r4, #1
   340fa:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   340fe:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   34102:	971a      	str	r7, [sp, #104]	; 0x68
   34104:	961b      	str	r6, [sp, #108]	; 0x6c
   34106:	9426      	str	r4, [sp, #152]	; 0x98
   34108:	f10d 0920 	add.w	r9, sp, #32
   3410c:	f7ff f96e 	bl	333ec <CC_PalMemSetZeroPlat>
   34110:	2110      	movs	r1, #16
   34112:	e9cd 1900 	strd	r1, r9, [sp]
   34116:	ab0a      	add	r3, sp, #40	; 0x28
   34118:	9905      	ldr	r1, [sp, #20]
   3411a:	4650      	mov	r0, sl
   3411c:	aa06      	add	r2, sp, #24
   3411e:	f7ff fa09 	bl	33534 <SetDataBuffersInfo>
   34122:	4607      	mov	r7, r0
   34124:	b150      	cbz	r0, 3413c <kmu_derive_cmac+0xb8>
   34126:	e01e      	b.n	34166 <kmu_derive_cmac+0xe2>
   34128:	f7ff f95c 	bl	333e4 <CC_PalMemCopyPlat>
   3412c:	2110      	movs	r1, #16
   3412e:	a80e      	add	r0, sp, #56	; 0x38
   34130:	f7ff f95c 	bl	333ec <CC_PalMemSetZeroPlat>
   34134:	3401      	adds	r4, #1
   34136:	1bad      	subs	r5, r5, r6
   34138:	b2e4      	uxtb	r4, r4
   3413a:	d027      	beq.n	3418c <kmu_derive_cmac+0x108>
   3413c:	9b05      	ldr	r3, [sp, #20]
   3413e:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   34142:	2d10      	cmp	r5, #16
   34144:	464a      	mov	r2, r9
   34146:	a906      	add	r1, sp, #24
   34148:	a80e      	add	r0, sp, #56	; 0x38
   3414a:	462e      	mov	r6, r5
   3414c:	bf28      	it	cs
   3414e:	2610      	movcs	r6, #16
   34150:	f7ff fe52 	bl	33df8 <FinishAesDrv>
   34154:	4603      	mov	r3, r0
   34156:	4632      	mov	r2, r6
   34158:	eb08 0007 	add.w	r0, r8, r7
   3415c:	a90e      	add	r1, sp, #56	; 0x38
   3415e:	4437      	add	r7, r6
   34160:	2b00      	cmp	r3, #0
   34162:	d0e1      	beq.n	34128 <kmu_derive_cmac+0xa4>
   34164:	461f      	mov	r7, r3
   34166:	a80e      	add	r0, sp, #56	; 0x38
   34168:	2274      	movs	r2, #116	; 0x74
   3416a:	2100      	movs	r1, #0
   3416c:	f7ff f93c 	bl	333e8 <CC_PalMemSetPlat>
   34170:	4638      	mov	r0, r7
   34172:	b04d      	add	sp, #308	; 0x134
   34174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34178:	4f08      	ldr	r7, [pc, #32]	; (3419c <kmu_derive_cmac+0x118>)
   3417a:	4638      	mov	r0, r7
   3417c:	b04d      	add	sp, #308	; 0x134
   3417e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34182:	4f07      	ldr	r7, [pc, #28]	; (341a0 <kmu_derive_cmac+0x11c>)
   34184:	4638      	mov	r0, r7
   34186:	b04d      	add	sp, #308	; 0x134
   34188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3418c:	a80e      	add	r0, sp, #56	; 0x38
   3418e:	2274      	movs	r2, #116	; 0x74
   34190:	2100      	movs	r1, #0
   34192:	462f      	mov	r7, r5
   34194:	f7ff f928 	bl	333e8 <CC_PalMemSetPlat>
   34198:	e7ea      	b.n	34170 <kmu_derive_cmac+0xec>
   3419a:	bf00      	nop
   3419c:	00f1000e 	.word	0x00f1000e
   341a0:	00f1000f 	.word	0x00f1000f

000341a4 <UtilCmacBuildDataForDerivation>:
   341a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   341a8:	b082      	sub	sp, #8
   341aa:	2600      	movs	r6, #0
   341ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   341ae:	9601      	str	r6, [sp, #4]
   341b0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   341b4:	d83c      	bhi.n	34230 <UtilCmacBuildDataForDerivation+0x8c>
   341b6:	00ee      	lsls	r6, r5, #3
   341b8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   341bc:	f101 35ff 	add.w	r5, r1, #4294967295
   341c0:	461f      	mov	r7, r3
   341c2:	bf34      	ite	cc
   341c4:	2303      	movcc	r3, #3
   341c6:	2304      	movcs	r3, #4
   341c8:	2d3f      	cmp	r5, #63	; 0x3f
   341ca:	460c      	mov	r4, r1
   341cc:	9300      	str	r3, [sp, #0]
   341ce:	d82f      	bhi.n	34230 <UtilCmacBuildDataForDerivation+0x8c>
   341d0:	b370      	cbz	r0, 34230 <UtilCmacBuildDataForDerivation+0x8c>
   341d2:	4690      	mov	r8, r2
   341d4:	b117      	cbz	r7, 341dc <UtilCmacBuildDataForDerivation+0x38>
   341d6:	b35a      	cbz	r2, 34230 <UtilCmacBuildDataForDerivation+0x8c>
   341d8:	2f40      	cmp	r7, #64	; 0x40
   341da:	d829      	bhi.n	34230 <UtilCmacBuildDataForDerivation+0x8c>
   341dc:	9a08      	ldr	r2, [sp, #32]
   341de:	b33a      	cbz	r2, 34230 <UtilCmacBuildDataForDerivation+0x8c>
   341e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   341e2:	6811      	ldr	r1, [r2, #0]
   341e4:	b321      	cbz	r1, 34230 <UtilCmacBuildDataForDerivation+0x8c>
   341e6:	19e2      	adds	r2, r4, r7
   341e8:	4413      	add	r3, r2
   341ea:	4299      	cmp	r1, r3
   341ec:	d320      	bcc.n	34230 <UtilCmacBuildDataForDerivation+0x8c>
   341ee:	9b08      	ldr	r3, [sp, #32]
   341f0:	4622      	mov	r2, r4
   341f2:	4601      	mov	r1, r0
   341f4:	1c58      	adds	r0, r3, #1
   341f6:	f7ff f8f5 	bl	333e4 <CC_PalMemCopyPlat>
   341fa:	9b08      	ldr	r3, [sp, #32]
   341fc:	4423      	add	r3, r4
   341fe:	2200      	movs	r2, #0
   34200:	3402      	adds	r4, #2
   34202:	705a      	strb	r2, [r3, #1]
   34204:	bb07      	cbnz	r7, 34248 <UtilCmacBuildDataForDerivation+0xa4>
   34206:	2eff      	cmp	r6, #255	; 0xff
   34208:	9600      	str	r6, [sp, #0]
   3420a:	d915      	bls.n	34238 <UtilCmacBuildDataForDerivation+0x94>
   3420c:	9b08      	ldr	r3, [sp, #32]
   3420e:	0235      	lsls	r5, r6, #8
   34210:	b2ad      	uxth	r5, r5
   34212:	1918      	adds	r0, r3, r4
   34214:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   34218:	2202      	movs	r2, #2
   3421a:	a901      	add	r1, sp, #4
   3421c:	9501      	str	r5, [sp, #4]
   3421e:	f7ff f8e1 	bl	333e4 <CC_PalMemCopyPlat>
   34222:	3402      	adds	r4, #2
   34224:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34226:	2000      	movs	r0, #0
   34228:	601c      	str	r4, [r3, #0]
   3422a:	b002      	add	sp, #8
   3422c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34230:	4809      	ldr	r0, [pc, #36]	; (34258 <UtilCmacBuildDataForDerivation+0xb4>)
   34232:	b002      	add	sp, #8
   34234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34238:	9b08      	ldr	r3, [sp, #32]
   3423a:	2201      	movs	r2, #1
   3423c:	1918      	adds	r0, r3, r4
   3423e:	4669      	mov	r1, sp
   34240:	f7ff f8d0 	bl	333e4 <CC_PalMemCopyPlat>
   34244:	3401      	adds	r4, #1
   34246:	e7ed      	b.n	34224 <UtilCmacBuildDataForDerivation+0x80>
   34248:	9b08      	ldr	r3, [sp, #32]
   3424a:	4641      	mov	r1, r8
   3424c:	1918      	adds	r0, r3, r4
   3424e:	463a      	mov	r2, r7
   34250:	f7ff f8c8 	bl	333e4 <CC_PalMemCopyPlat>
   34254:	443c      	add	r4, r7
   34256:	e7d6      	b.n	34206 <UtilCmacBuildDataForDerivation+0x62>
   34258:	80000006 	.word	0x80000006

0003425c <CC_PalDataBufferAttrGet>:
   3425c:	2000      	movs	r0, #0
   3425e:	7018      	strb	r0, [r3, #0]
   34260:	4770      	bx	lr
   34262:	bf00      	nop

00034264 <main>:
#include "flash_system/flash_system.h"
#include "measurements/measurements_fsm_timer.h"

// --- functions definitions ---------------------------------------------------
void main(void)
{
   34264:	b508      	push	{r3, lr}
    // Init watchdog init
    init_watchdog();
   34266:	f7ea f9f1 	bl	1e64c <init_watchdog>
    // Initialize internal uart (to communicate with 9160)
    internal_uart_init();
   3426a:	f7ea f8f1 	bl	1e450 <internal_uart_init>
    flash_system_init();
   3426e:	f7ea fa01 	bl	1e674 <flash_system_init>
    init_measurements_fsm_timer();
   34272:	f7ea ff3f 	bl	1f0f4 <init_measurements_fsm_timer>
    start_measurements_fsm_timer();
   34276:	f7ea ff49 	bl	1f10c <start_measurements_fsm_timer>
   3427a:	bd08      	pop	{r3, pc}

0003427c <send_data_to_9160_entry>:
{
   3427c:	b500      	push	{lr}
   3427e:	b083      	sub	sp, #12
    message_update_timestamp_t msg_update_timestamp = {0};
   34280:	2300      	movs	r3, #0
   34282:	9301      	str	r3, [sp, #4]
    create_update_timestamp_tx_message(&msg_update_timestamp);
   34284:	a801      	add	r0, sp, #4
   34286:	f000 f862 	bl	3434e <create_update_timestamp_tx_message>
    internal_uart_send_data((uint8_t *)&msg_update_timestamp, sizeof(message_update_timestamp_t));
   3428a:	2104      	movs	r1, #4
   3428c:	eb0d 0001 	add.w	r0, sp, r1
   34290:	f7ea f91a 	bl	1e4c8 <internal_uart_send_data>
}
   34294:	b003      	add	sp, #12
   34296:	f85d fb04 	ldr.w	pc, [sp], #4

0003429a <calculate_mean_measurements_entry>:
{
   3429a:	b510      	push	{r4, lr}
   3429c:	4604      	mov	r4, r0
    user_ctx->measurements_data = get_measurements_data();
   3429e:	f7e9 fedb 	bl	1e058 <get_measurements_data>
   342a2:	6120      	str	r0, [r4, #16]
    user_ctx->row_mean_data = get_row_mean_data();
   342a4:	f7e9 fedc 	bl	1e060 <get_row_mean_data>
   342a8:	6160      	str	r0, [r4, #20]
}
   342aa:	bd10      	pop	{r4, pc}

000342ac <take_measurements_entry>:
{
   342ac:	b508      	push	{r3, lr}
    clear_measurement_data();
   342ae:	f7e9 fedb 	bl	1e068 <clear_measurement_data>
    get_all_ble_connection_handles();
   342b2:	f7e9 feeb 	bl	1e08c <get_all_ble_connection_handles>
}
   342b6:	bd08      	pop	{r3, pc}

000342b8 <create_measurements_data_tx_message>:
 * 
 * @param in_buffer 
 * @param out_buffer 
 */
void create_measurements_data_tx_message(const measurements_data_t *in_buffer, message_measurement_data_t *out_buffer)
{
   342b8:	b510      	push	{r4, lr}
   342ba:	b082      	sub	sp, #8
   342bc:	460c      	mov	r4, r1
    // Set type and length of message
    out_buffer->len = sizeof(message_measurement_data_t);
   342be:	232b      	movs	r3, #43	; 0x2b
   342c0:	704b      	strb	r3, [r1, #1]
    out_buffer->type = MESSAGE_MEASUREMENT_DATA;
   342c2:	460b      	mov	r3, r1
   342c4:	22a1      	movs	r2, #161	; 0xa1
   342c6:	f803 2b02 	strb.w	r2, [r3], #2

    // Set the message data
    memcpy(&out_buffer->message_buffer, in_buffer, sizeof(measurements_data_t));
   342ca:	2227      	movs	r2, #39	; 0x27
   342cc:	4601      	mov	r1, r0
   342ce:	4618      	mov	r0, r3
   342d0:	f002 fd48 	bl	36d64 <memcpy>
   342d4:	2301      	movs	r3, #1
   342d6:	9300      	str	r3, [sp, #0]
   342d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   342dc:	f248 0205 	movw	r2, #32773	; 0x8005
   342e0:	2129      	movs	r1, #41	; 0x29
   342e2:	4620      	mov	r0, r4
   342e4:	f000 f846 	bl	34374 <crc16>

    // Calculate crc of the message
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_measurement_data_t) - sizeof(out_buffer->message_crc));
   342e8:	f8a4 0029 	strh.w	r0, [r4, #41]	; 0x29
}
   342ec:	b002      	add	sp, #8
   342ee:	bd10      	pop	{r4, pc}

000342f0 <create_row_mean_data_tx_message>:
 * 
 * @param in_buffer 
 * @param out_buffer 
 */
void create_row_mean_data_tx_message(const row_mean_data_t *in_buffer, message_row_mean_data_t *out_buffer)
{
   342f0:	b510      	push	{r4, lr}
   342f2:	b082      	sub	sp, #8
   342f4:	460c      	mov	r4, r1
    // Set type and length of message
    out_buffer->len = sizeof(message_row_mean_data_t);
   342f6:	2311      	movs	r3, #17
   342f8:	704b      	strb	r3, [r1, #1]
    out_buffer->type = MESSAGE_ROW_MEAN_DATA;
   342fa:	460b      	mov	r3, r1
   342fc:	22a2      	movs	r2, #162	; 0xa2
   342fe:	f803 2b02 	strb.w	r2, [r3], #2

    // Set the message data
    memcpy(&out_buffer->message_buffer, in_buffer, sizeof(row_mean_data_t));
   34302:	220d      	movs	r2, #13
   34304:	4601      	mov	r1, r0
   34306:	4618      	mov	r0, r3
   34308:	f002 fd2c 	bl	36d64 <memcpy>
   3430c:	2301      	movs	r3, #1
   3430e:	9300      	str	r3, [sp, #0]
   34310:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34314:	f248 0205 	movw	r2, #32773	; 0x8005
   34318:	210f      	movs	r1, #15
   3431a:	4620      	mov	r0, r4
   3431c:	f000 f82a 	bl	34374 <crc16>

    // Calculate crc of the message
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_row_mean_data_t) - sizeof(out_buffer->message_crc));
   34320:	f8a4 000f 	strh.w	r0, [r4, #15]
}
   34324:	b002      	add	sp, #8
   34326:	bd10      	pop	{r4, pc}

00034328 <create_ready_for_cloud_tx_message>:
 * @brief Create a ready for cloud tx message object
 * 
 * @param out_buffer 
 */
void create_ready_for_cloud_tx_message(message_ready_for_cloud_t *out_buffer)
{
   34328:	b510      	push	{r4, lr}
   3432a:	b082      	sub	sp, #8
   3432c:	4604      	mov	r4, r0
    // Set type and length of message
    out_buffer->len = sizeof(message_ready_for_cloud_t);
   3432e:	2304      	movs	r3, #4
   34330:	7043      	strb	r3, [r0, #1]
    out_buffer->type = MESSAGE_READY_FOR_CLOUD;
   34332:	23c0      	movs	r3, #192	; 0xc0
   34334:	7003      	strb	r3, [r0, #0]
   34336:	2301      	movs	r3, #1
   34338:	9300      	str	r3, [sp, #0]
   3433a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3433e:	f248 0205 	movw	r2, #32773	; 0x8005
   34342:	2102      	movs	r1, #2
   34344:	f000 f816 	bl	34374 <crc16>

    // Calculate crc of the message
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_ready_for_cloud_t) - sizeof(out_buffer->message_crc));
   34348:	8060      	strh	r0, [r4, #2]
}
   3434a:	b002      	add	sp, #8
   3434c:	bd10      	pop	{r4, pc}

0003434e <create_update_timestamp_tx_message>:
 * @brief Create a update timestamp tx message object
 * 
 * @param out_buffer 
 */
void create_update_timestamp_tx_message(message_update_timestamp_t *out_buffer)
{
   3434e:	b510      	push	{r4, lr}
   34350:	b082      	sub	sp, #8
   34352:	4604      	mov	r4, r0
    // Set type and length of message
    out_buffer->len = sizeof(message_update_timestamp_t);
   34354:	2304      	movs	r3, #4
   34356:	7043      	strb	r3, [r0, #1]
    out_buffer->type = MESSAGE_UPDATE_TIMESTAMP;
   34358:	2383      	movs	r3, #131	; 0x83
   3435a:	7003      	strb	r3, [r0, #0]
   3435c:	2301      	movs	r3, #1
   3435e:	9300      	str	r3, [sp, #0]
   34360:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34364:	f248 0205 	movw	r2, #32773	; 0x8005
   34368:	2102      	movs	r1, #2
   3436a:	f000 f803 	bl	34374 <crc16>

    // Calculate crc of the message
    out_buffer->message_crc = crc16_ansi((uint8_t*)out_buffer, sizeof(message_update_timestamp_t) - sizeof(out_buffer->message_crc));
   3436e:	8060      	strh	r0, [r4, #2]
   34370:	b002      	add	sp, #8
   34372:	bd10      	pop	{r4, pc}

00034374 <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
   34374:	b5f0      	push	{r4, r5, r6, r7, lr}
   34376:	4684      	mov	ip, r0
   34378:	4618      	mov	r0, r3
   3437a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	uint16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
   3437e:	b11b      	cbz	r3, 34388 <crc16+0x14>
   34380:	f04f 0e02 	mov.w	lr, #2
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
   34384:	2600      	movs	r6, #0
   34386:	e019      	b.n	343bc <crc16+0x48>
	size_t padding = pad ? sizeof(crc) : 0;
   34388:	f04f 0e00 	mov.w	lr, #0
   3438c:	e7fa      	b.n	34384 <crc16+0x10>
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
			}

			if (divide != 0U) {
   3438e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   34392:	d110      	bne.n	343b6 <crc16+0x42>
		for (b = 0; b < 8; b++) {
   34394:	3501      	adds	r5, #1
   34396:	4620      	mov	r0, r4
   34398:	2d07      	cmp	r5, #7
   3439a:	d80e      	bhi.n	343ba <crc16+0x46>
			crc = (crc << 1U);
   3439c:	0044      	lsls	r4, r0, #1
   3439e:	b2a4      	uxth	r4, r4
			if (i < len) {
   343a0:	428e      	cmp	r6, r1
   343a2:	d2f4      	bcs.n	3438e <crc16+0x1a>
				crc |= !!(src[i] & (0x80U >> b));
   343a4:	f81c 7006 	ldrb.w	r7, [ip, r6]
   343a8:	2380      	movs	r3, #128	; 0x80
   343aa:	40eb      	lsrs	r3, r5
   343ac:	421f      	tst	r7, r3
   343ae:	bf18      	it	ne
   343b0:	f044 0401 	orrne.w	r4, r4, #1
   343b4:	e7eb      	b.n	3438e <crc16+0x1a>
				crc = crc ^ polynomial;
   343b6:	4054      	eors	r4, r2
   343b8:	e7ec      	b.n	34394 <crc16+0x20>
	for (i = 0; i < len + padding; i++) {
   343ba:	3601      	adds	r6, #1
   343bc:	eb0e 0301 	add.w	r3, lr, r1
   343c0:	42b3      	cmp	r3, r6
   343c2:	d901      	bls.n	343c8 <crc16+0x54>
		for (b = 0; b < 8; b++) {
   343c4:	2500      	movs	r5, #0
   343c6:	e7e7      	b.n	34398 <crc16+0x24>
			}
		}
	}

	return crc;
}
   343c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000343ca <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   343ca:	4602      	mov	r2, r0
   343cc:	b1b0      	cbz	r0, 343fc <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   343ce:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   343d0:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   343d4:	2b02      	cmp	r3, #2
   343d6:	d00b      	beq.n	343f0 <sys_notify_validate+0x26>
   343d8:	2b03      	cmp	r3, #3
   343da:	d004      	beq.n	343e6 <sys_notify_validate+0x1c>
   343dc:	2b01      	cmp	r3, #1
   343de:	d004      	beq.n	343ea <sys_notify_validate+0x20>
   343e0:	f06f 0015 	mvn.w	r0, #21
   343e4:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   343e6:	6803      	ldr	r3, [r0, #0]
   343e8:	b15b      	cbz	r3, 34402 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   343ea:	2000      	movs	r0, #0
   343ec:	6090      	str	r0, [r2, #8]
   343ee:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   343f0:	6803      	ldr	r3, [r0, #0]
   343f2:	2b00      	cmp	r3, #0
   343f4:	d1f9      	bne.n	343ea <sys_notify_validate+0x20>
			rv = -EINVAL;
   343f6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   343fa:	4770      	bx	lr
		return -EINVAL;
   343fc:	f06f 0015 	mvn.w	r0, #21
   34400:	4770      	bx	lr
			rv = -EINVAL;
   34402:	f06f 0015 	mvn.w	r0, #21
   34406:	4770      	bx	lr

00034408 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   34408:	b510      	push	{r4, lr}
   3440a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3440c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3440e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   34412:	6081      	str	r1, [r0, #8]
	switch (method) {
   34414:	2a02      	cmp	r2, #2
   34416:	d004      	beq.n	34422 <sys_notify_finalize+0x1a>
   34418:	2a03      	cmp	r2, #3
   3441a:	d105      	bne.n	34428 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   3441c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   3441e:	2000      	movs	r0, #0
		break;
   34420:	e004      	b.n	3442c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   34422:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   34424:	2400      	movs	r4, #0
		break;
   34426:	e001      	b.n	3442c <sys_notify_finalize+0x24>
	switch (method) {
   34428:	2400      	movs	r4, #0
   3442a:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   3442c:	2200      	movs	r2, #0
   3442e:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   34430:	b108      	cbz	r0, 34436 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   34432:	f7fd fa55 	bl	318e0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   34436:	4620      	mov	r0, r4
   34438:	bd10      	pop	{r4, pc}

0003443a <arch_printk_char_out>:
}
   3443a:	2000      	movs	r0, #0
   3443c:	4770      	bx	lr

0003443e <str_out>:
{
   3443e:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   34440:	680c      	ldr	r4, [r1, #0]
   34442:	b154      	cbz	r4, 3445a <str_out+0x1c>
   34444:	688a      	ldr	r2, [r1, #8]
   34446:	684b      	ldr	r3, [r1, #4]
   34448:	429a      	cmp	r2, r3
   3444a:	da06      	bge.n	3445a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   3444c:	3b01      	subs	r3, #1
   3444e:	429a      	cmp	r2, r3
   34450:	d008      	beq.n	34464 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   34452:	1c53      	adds	r3, r2, #1
   34454:	608b      	str	r3, [r1, #8]
   34456:	54a0      	strb	r0, [r4, r2]
   34458:	e002      	b.n	34460 <str_out+0x22>
		ctx->count++;
   3445a:	688b      	ldr	r3, [r1, #8]
   3445c:	3301      	adds	r3, #1
   3445e:	608b      	str	r3, [r1, #8]
}
   34460:	bc10      	pop	{r4}
   34462:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   34464:	1c53      	adds	r3, r2, #1
   34466:	608b      	str	r3, [r1, #8]
   34468:	2300      	movs	r3, #0
   3446a:	54a3      	strb	r3, [r4, r2]
   3446c:	e7f8      	b.n	34460 <str_out+0x22>

0003446e <printk>:
{
   3446e:	b40f      	push	{r0, r1, r2, r3}
   34470:	b500      	push	{lr}
   34472:	b083      	sub	sp, #12
   34474:	a904      	add	r1, sp, #16
   34476:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3447a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   3447c:	f7ea fe80 	bl	1f180 <vprintk>
}
   34480:	b003      	add	sp, #12
   34482:	f85d eb04 	ldr.w	lr, [sp], #4
   34486:	b004      	add	sp, #16
   34488:	4770      	bx	lr

0003448a <snprintk>:
{
   3448a:	b40c      	push	{r2, r3}
   3448c:	b500      	push	{lr}
   3448e:	b083      	sub	sp, #12
   34490:	ab04      	add	r3, sp, #16
   34492:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   34496:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   34498:	f7ea fe82 	bl	1f1a0 <vsnprintk>
}
   3449c:	b003      	add	sp, #12
   3449e:	f85d eb04 	ldr.w	lr, [sp], #4
   344a2:	b002      	add	sp, #8
   344a4:	4770      	bx	lr

000344a6 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   344a6:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   344aa:	8b01      	ldrh	r1, [r0, #24]
   344ac:	f021 0107 	bic.w	r1, r1, #7
   344b0:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   344b2:	8301      	strh	r1, [r0, #24]
}
   344b4:	4770      	bx	lr

000344b6 <notify_monitors>:
{
   344b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   344ba:	4606      	mov	r6, r0
   344bc:	460f      	mov	r7, r1
   344be:	4690      	mov	r8, r2
	return list->head;
   344c0:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   344c2:	b119      	cbz	r1, 344cc <notify_monitors+0x16>
   344c4:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   344c6:	b131      	cbz	r1, 344d6 <notify_monitors+0x20>
	return node->next;
   344c8:	680c      	ldr	r4, [r1, #0]
   344ca:	e004      	b.n	344d6 <notify_monitors+0x20>
   344cc:	460c      	mov	r4, r1
   344ce:	e002      	b.n	344d6 <notify_monitors+0x20>
   344d0:	4623      	mov	r3, r4
   344d2:	4621      	mov	r1, r4
   344d4:	461c      	mov	r4, r3
   344d6:	b159      	cbz	r1, 344f0 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   344d8:	684d      	ldr	r5, [r1, #4]
   344da:	4643      	mov	r3, r8
   344dc:	463a      	mov	r2, r7
   344de:	4630      	mov	r0, r6
   344e0:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   344e2:	2c00      	cmp	r4, #0
   344e4:	d0f4      	beq.n	344d0 <notify_monitors+0x1a>
   344e6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   344e8:	2c00      	cmp	r4, #0
   344ea:	d0f2      	beq.n	344d2 <notify_monitors+0x1c>
	return node->next;
   344ec:	6823      	ldr	r3, [r4, #0]
   344ee:	e7f0      	b.n	344d2 <notify_monitors+0x1c>
}
   344f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000344f4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   344f4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   344f6:	f013 0307 	ands.w	r3, r3, #7
   344fa:	d103      	bne.n	34504 <process_recheck+0x10>
	return list->head;
   344fc:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   344fe:	b10a      	cbz	r2, 34504 <process_recheck+0x10>
		evt = EVT_START;
   34500:	2003      	movs	r0, #3
   34502:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   34504:	2b02      	cmp	r3, #2
   34506:	d003      	beq.n	34510 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   34508:	2b01      	cmp	r3, #1
   3450a:	d006      	beq.n	3451a <process_recheck+0x26>
	int evt = EVT_NOP;
   3450c:	2000      	movs	r0, #0
   3450e:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   34510:	8b42      	ldrh	r2, [r0, #26]
   34512:	2a00      	cmp	r2, #0
   34514:	d1f8      	bne.n	34508 <process_recheck+0x14>
		evt = EVT_STOP;
   34516:	2004      	movs	r0, #4
   34518:	4770      	bx	lr
   3451a:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   3451c:	b10b      	cbz	r3, 34522 <process_recheck+0x2e>
		evt = EVT_RESET;
   3451e:	2005      	movs	r0, #5
}
   34520:	4770      	bx	lr
	int evt = EVT_NOP;
   34522:	2000      	movs	r0, #0
   34524:	4770      	bx	lr

00034526 <process_complete>:
{
   34526:	b538      	push	{r3, r4, r5, lr}
   34528:	4604      	mov	r4, r0
   3452a:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3452c:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   3452e:	2a00      	cmp	r2, #0
   34530:	db07      	blt.n	34542 <process_complete+0x1c>
   34532:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   34536:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   34538:	2a01      	cmp	r2, #1
   3453a:	d90e      	bls.n	3455a <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   3453c:	2b04      	cmp	r3, #4
   3453e:	d032      	beq.n	345a6 <process_complete+0x80>
}
   34540:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   34542:	e9d0 0100 	ldrd	r0, r1, [r0]
   34546:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   3454a:	2300      	movs	r3, #0
   3454c:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   3454e:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   34550:	2101      	movs	r1, #1
   34552:	4620      	mov	r0, r4
   34554:	f7ff ffa7 	bl	344a6 <set_state>
   34558:	e7f2      	b.n	34540 <process_complete+0x1a>
		*clients = mgr->clients;
   3455a:	e9d0 0100 	ldrd	r0, r1, [r0]
   3455e:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   34562:	2200      	movs	r2, #0
   34564:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   34566:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   34568:	2b06      	cmp	r3, #6
   3456a:	d117      	bne.n	3459c <process_complete+0x76>
	return list->head;
   3456c:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   3456e:	b13b      	cbz	r3, 34580 <process_complete+0x5a>
				mgr->refs += 1U;
   34570:	8b62      	ldrh	r2, [r4, #26]
   34572:	3201      	adds	r2, #1
   34574:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   34576:	2b00      	cmp	r3, #0
   34578:	d0f9      	beq.n	3456e <process_complete+0x48>
	return node->next;
   3457a:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   3457c:	2b00      	cmp	r3, #0
   3457e:	d1f6      	bne.n	3456e <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   34580:	2102      	movs	r1, #2
   34582:	4620      	mov	r0, r4
   34584:	f7ff ff8f 	bl	344a6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   34588:	4620      	mov	r0, r4
   3458a:	f7ff ffb3 	bl	344f4 <process_recheck>
   3458e:	2800      	cmp	r0, #0
   34590:	d0d6      	beq.n	34540 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   34592:	8b23      	ldrh	r3, [r4, #24]
   34594:	f043 0320 	orr.w	r3, r3, #32
   34598:	8323      	strh	r3, [r4, #24]
   3459a:	e7d1      	b.n	34540 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   3459c:	2100      	movs	r1, #0
   3459e:	4620      	mov	r0, r4
   345a0:	f7ff ff81 	bl	344a6 <set_state>
   345a4:	e7f0      	b.n	34588 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   345a6:	2100      	movs	r1, #0
   345a8:	f7ff ff7d 	bl	344a6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   345ac:	4620      	mov	r0, r4
   345ae:	f7ff ffa1 	bl	344f4 <process_recheck>
   345b2:	2800      	cmp	r0, #0
   345b4:	d0c4      	beq.n	34540 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   345b6:	8b23      	ldrh	r3, [r4, #24]
   345b8:	f043 0320 	orr.w	r3, r3, #32
   345bc:	8323      	strh	r3, [r4, #24]
}
   345be:	e7bf      	b.n	34540 <process_complete+0x1a>

000345c0 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   345c0:	b158      	cbz	r0, 345da <validate_args+0x1a>
{
   345c2:	b510      	push	{r4, lr}
   345c4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   345c6:	b159      	cbz	r1, 345e0 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   345c8:	1d08      	adds	r0, r1, #4
   345ca:	f7ff fefe 	bl	343ca <sys_notify_validate>
	if ((rv == 0)
   345ce:	b918      	cbnz	r0, 345d8 <validate_args+0x18>
	    && ((cli->notify.flags
   345d0:	68a3      	ldr	r3, [r4, #8]
   345d2:	f033 0303 	bics.w	r3, r3, #3
   345d6:	d106      	bne.n	345e6 <validate_args+0x26>
}
   345d8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   345da:	f06f 0015 	mvn.w	r0, #21
}
   345de:	4770      	bx	lr
		return -EINVAL;
   345e0:	f06f 0015 	mvn.w	r0, #21
   345e4:	e7f8      	b.n	345d8 <validate_args+0x18>
		rv = -EINVAL;
   345e6:	f06f 0015 	mvn.w	r0, #21
   345ea:	e7f5      	b.n	345d8 <validate_args+0x18>

000345ec <notify_one>:
{
   345ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   345f0:	4607      	mov	r7, r0
   345f2:	460c      	mov	r4, r1
   345f4:	4616      	mov	r6, r2
   345f6:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   345f8:	4619      	mov	r1, r3
   345fa:	1d20      	adds	r0, r4, #4
   345fc:	f7ff ff04 	bl	34408 <sys_notify_finalize>
	if (cb) {
   34600:	b128      	cbz	r0, 3460e <notify_one+0x22>
   34602:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   34604:	462b      	mov	r3, r5
   34606:	4632      	mov	r2, r6
   34608:	4621      	mov	r1, r4
   3460a:	4638      	mov	r0, r7
   3460c:	47c0      	blx	r8
}
   3460e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034612 <notify_all>:
{
   34612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   34616:	4681      	mov	r9, r0
   34618:	460c      	mov	r4, r1
   3461a:	4690      	mov	r8, r2
   3461c:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   3461e:	e005      	b.n	3462c <notify_all+0x1a>
	list->tail = node;
   34620:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   34622:	463b      	mov	r3, r7
   34624:	4642      	mov	r2, r8
   34626:	4648      	mov	r0, r9
   34628:	f7ff ffe0 	bl	345ec <notify_one>
	return list->head;
   3462c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   3462e:	b129      	cbz	r1, 3463c <notify_all+0x2a>
	return node->next;
   34630:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   34632:	6025      	str	r5, [r4, #0]
	return list->tail;
   34634:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   34636:	428e      	cmp	r6, r1
   34638:	d1f3      	bne.n	34622 <notify_all+0x10>
   3463a:	e7f1      	b.n	34620 <notify_all+0xe>
}
   3463c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00034640 <transition_complete>:
{
   34640:	b510      	push	{r4, lr}
	__asm__ volatile(
   34642:	f04f 0440 	mov.w	r4, #64	; 0x40
   34646:	f3ef 8211 	mrs	r2, BASEPRI
   3464a:	f384 8812 	msr	BASEPRI_MAX, r4
   3464e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   34652:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   34654:	2101      	movs	r1, #1
   34656:	f7ea fdb9 	bl	1f1cc <process_event>
}
   3465a:	bd10      	pop	{r4, pc}

0003465c <onoff_manager_init>:
	if ((mgr == NULL)
   3465c:	4603      	mov	r3, r0
   3465e:	b168      	cbz	r0, 3467c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   34660:	b179      	cbz	r1, 34682 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   34662:	680a      	ldr	r2, [r1, #0]
   34664:	b182      	cbz	r2, 34688 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   34666:	684a      	ldr	r2, [r1, #4]
   34668:	b18a      	cbz	r2, 3468e <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3466a:	2000      	movs	r0, #0
   3466c:	6018      	str	r0, [r3, #0]
   3466e:	6058      	str	r0, [r3, #4]
   34670:	6098      	str	r0, [r3, #8]
   34672:	60d8      	str	r0, [r3, #12]
   34674:	6158      	str	r0, [r3, #20]
   34676:	6198      	str	r0, [r3, #24]
   34678:	6119      	str	r1, [r3, #16]
	return 0;
   3467a:	4770      	bx	lr
		return -EINVAL;
   3467c:	f06f 0015 	mvn.w	r0, #21
   34680:	4770      	bx	lr
   34682:	f06f 0015 	mvn.w	r0, #21
   34686:	4770      	bx	lr
   34688:	f06f 0015 	mvn.w	r0, #21
   3468c:	4770      	bx	lr
   3468e:	f06f 0015 	mvn.w	r0, #21
}
   34692:	4770      	bx	lr

00034694 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   34694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34696:	4604      	mov	r4, r0
   34698:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   3469a:	f7ff ff91 	bl	345c0 <validate_args>

	if (rv < 0) {
   3469e:	1e06      	subs	r6, r0, #0
   346a0:	db37      	blt.n	34712 <onoff_request+0x7e>
   346a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   346a6:	f3ef 8211 	mrs	r2, BASEPRI
   346aa:	f383 8812 	msr	BASEPRI_MAX, r3
   346ae:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   346b2:	8b25      	ldrh	r5, [r4, #24]
   346b4:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   346b8:	8b63      	ldrh	r3, [r4, #26]
   346ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   346be:	428b      	cmp	r3, r1
   346c0:	d02f      	beq.n	34722 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   346c2:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   346c4:	2d02      	cmp	r5, #2
   346c6:	d00c      	beq.n	346e2 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   346c8:	b18d      	cbz	r5, 346ee <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   346ca:	2d04      	cmp	r5, #4
   346cc:	d00f      	beq.n	346ee <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   346ce:	2d06      	cmp	r5, #6
   346d0:	d00d      	beq.n	346ee <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   346d2:	2d05      	cmp	r5, #5
   346d4:	d01f      	beq.n	34716 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   346d6:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   346da:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   346dc:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   346de:	4608      	mov	r0, r1
   346e0:	e00a      	b.n	346f8 <onoff_request+0x64>
		mgr->refs += 1U;
   346e2:	3301      	adds	r3, #1
   346e4:	8363      	strh	r3, [r4, #26]
		notify = true;
   346e6:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   346e8:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   346ea:	4618      	mov	r0, r3
   346ec:	e004      	b.n	346f8 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   346ee:	fab5 f385 	clz	r3, r5
   346f2:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   346f4:	2100      	movs	r1, #0
		add_client = true;
   346f6:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   346f8:	b128      	cbz	r0, 34706 <onoff_request+0x72>
	parent->next = child;
   346fa:	2000      	movs	r0, #0
   346fc:	6038      	str	r0, [r7, #0]
	return list->tail;
   346fe:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   34700:	b1a8      	cbz	r0, 3472e <onoff_request+0x9a>
	parent->next = child;
   34702:	6007      	str	r7, [r0, #0]
	list->tail = node;
   34704:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   34706:	b9ab      	cbnz	r3, 34734 <onoff_request+0xa0>
	__asm__ volatile(
   34708:	f382 8811 	msr	BASEPRI, r2
   3470c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   34710:	b9a9      	cbnz	r1, 3473e <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   34712:	4630      	mov	r0, r6
   34714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   34716:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   3471a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   3471c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   3471e:	4608      	mov	r0, r1
   34720:	e7ea      	b.n	346f8 <onoff_request+0x64>
		rv = -EAGAIN;
   34722:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   34726:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   34728:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   3472a:	4608      	mov	r0, r1
   3472c:	e7e4      	b.n	346f8 <onoff_request+0x64>
   3472e:	6067      	str	r7, [r4, #4]
	list->head = node;
   34730:	6027      	str	r7, [r4, #0]
}
   34732:	e7e8      	b.n	34706 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   34734:	2102      	movs	r1, #2
   34736:	4620      	mov	r0, r4
   34738:	f7ea fd48 	bl	1f1cc <process_event>
   3473c:	e7e9      	b.n	34712 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   3473e:	2300      	movs	r3, #0
   34740:	462a      	mov	r2, r5
   34742:	4639      	mov	r1, r7
   34744:	4620      	mov	r0, r4
   34746:	f7ff ff51 	bl	345ec <notify_one>
   3474a:	e7e2      	b.n	34712 <onoff_request+0x7e>

0003474c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3474c:	b508      	push	{r3, lr}
   3474e:	4604      	mov	r4, r0
   34750:	4608      	mov	r0, r1
   34752:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   34754:	461a      	mov	r2, r3
   34756:	47a0      	blx	r4
	return z_impl_z_current_get();
   34758:	f7fc fb88 	bl	30e6c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   3475c:	f7ee fa4a 	bl	22bf4 <z_impl_k_thread_abort>

00034760 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   34760:	00c9      	lsls	r1, r1, #3
   34762:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   34764:	4408      	add	r0, r1
   34766:	4770      	bx	lr

00034768 <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   34768:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   3476c:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   3476e:	4299      	cmp	r1, r3
   34770:	d00e      	beq.n	34790 <free_list_remove_bidx+0x28>
{
   34772:	b410      	push	{r4}
   34774:	00cc      	lsls	r4, r1, #3
   34776:	4404      	add	r4, r0
   34778:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   3477a:	3204      	adds	r2, #4
   3477c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   34780:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   34782:	3206      	adds	r2, #6
   34784:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   34786:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   34788:	3304      	adds	r3, #4
   3478a:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   3478c:	bc10      	pop	{r4}
   3478e:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   34790:	2301      	movs	r3, #1
   34792:	fa03 f102 	lsl.w	r1, r3, r2
   34796:	68c3      	ldr	r3, [r0, #12]
   34798:	ea23 0301 	bic.w	r3, r3, r1
   3479c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   3479e:	3204      	adds	r2, #4
   347a0:	2300      	movs	r3, #0
   347a2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   347a6:	4770      	bx	lr

000347a8 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   347a8:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   347aa:	1d13      	adds	r3, r2, #4
   347ac:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   347b0:	b984      	cbnz	r4, 347d4 <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   347b2:	2301      	movs	r3, #1
   347b4:	fa03 f402 	lsl.w	r4, r3, r2
   347b8:	68c3      	ldr	r3, [r0, #12]
   347ba:	4323      	orrs	r3, r4
   347bc:	60c3      	str	r3, [r0, #12]
		b->next = c;
   347be:	3204      	adds	r2, #4
   347c0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   347c4:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   347c6:	1d1a      	adds	r2, r3, #4
   347c8:	b289      	uxth	r1, r1
   347ca:	5281      	strh	r1, [r0, r2]
   347cc:	3306      	adds	r3, #6
   347ce:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   347d0:	bc70      	pop	{r4, r5, r6}
   347d2:	4770      	bx	lr
	void *cmem = &buf[c];
   347d4:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   347d6:	3204      	adds	r2, #4
   347d8:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   347da:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   347dc:	1d2e      	adds	r6, r5, #4
   347de:	5383      	strh	r3, [r0, r6]
   347e0:	3506      	adds	r5, #6
   347e2:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   347e4:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   347e6:	3306      	adds	r3, #6
   347e8:	b289      	uxth	r1, r1
   347ea:	52c1      	strh	r1, [r0, r3]
   347ec:	5281      	strh	r1, [r0, r2]
   347ee:	e7ef      	b.n	347d0 <free_list_add_bidx+0x28>

000347f0 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   347f0:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   347f2:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   347f4:	3302      	adds	r3, #2
   347f6:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   347f8:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   347fa:	1a89      	subs	r1, r1, r2
   347fc:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   34800:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   34802:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   34804:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   34806:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   34808:	3402      	adds	r4, #2
   3480a:	5303      	strh	r3, [r0, r4]
   3480c:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   34810:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   34814:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   34816:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   3481a:	bc30      	pop	{r4, r5}
   3481c:	4770      	bx	lr

0003481e <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   3481e:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   34820:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   34822:	3102      	adds	r1, #2
   34824:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   34826:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   34828:	3402      	adds	r4, #2
   3482a:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3482c:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3482e:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   34832:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   34834:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   34836:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   34838:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   3483c:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   34840:	bc30      	pop	{r4, r5}
   34842:	4770      	bx	lr

00034844 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   34844:	3904      	subs	r1, #4
   34846:	1a08      	subs	r0, r1, r0
}
   34848:	08c0      	lsrs	r0, r0, #3
   3484a:	4770      	bx	lr

0003484c <free_list_remove>:
{
   3484c:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   3484e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   34852:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   34854:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   34856:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   3485a:	f1c2 021f 	rsb	r2, r2, #31
   3485e:	f7ff ff83 	bl	34768 <free_list_remove_bidx>
}
   34862:	bd08      	pop	{r3, pc}

00034864 <free_list_add>:
{
   34864:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   34866:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   3486a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3486c:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   3486e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   34872:	f1c2 021f 	rsb	r2, r2, #31
   34876:	f7ff ff97 	bl	347a8 <free_list_add_bidx>
}
   3487a:	bd08      	pop	{r3, pc}

0003487c <free_chunk>:
{
   3487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3487e:	4604      	mov	r4, r0
   34880:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   34882:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   34884:	1cb7      	adds	r7, r6, #2
   34886:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   34888:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   3488c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   34890:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   34892:	f013 0f01 	tst.w	r3, #1
   34896:	d00c      	beq.n	348b2 <free_chunk+0x36>
   34898:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   3489a:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   3489c:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   348a0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   348a2:	f013 0f01 	tst.w	r3, #1
   348a6:	d00e      	beq.n	348c6 <free_chunk+0x4a>
	free_list_add(h, c);
   348a8:	4629      	mov	r1, r5
   348aa:	4620      	mov	r0, r4
   348ac:	f7ff ffda 	bl	34864 <free_list_add>
}
   348b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   348b2:	f7ff ffcb 	bl	3484c <free_list_remove>
   348b6:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   348b8:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   348bc:	4629      	mov	r1, r5
   348be:	4620      	mov	r0, r4
   348c0:	f7ff ffad 	bl	3481e <merge_chunks>
   348c4:	e7e8      	b.n	34898 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   348c6:	4620      	mov	r0, r4
   348c8:	f7ff ffc0 	bl	3484c <free_list_remove>
   348cc:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   348ce:	462a      	mov	r2, r5
   348d0:	1a69      	subs	r1, r5, r1
   348d2:	4620      	mov	r0, r4
   348d4:	f7ff ffa3 	bl	3481e <merge_chunks>
   348d8:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   348da:	1aed      	subs	r5, r5, r3
   348dc:	e7e4      	b.n	348a8 <free_chunk+0x2c>

000348de <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   348de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   348e0:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   348e4:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   348e8:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   348ec:	b1b7      	cbz	r7, 3491c <alloc_chunk+0x3e>
   348ee:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   348f2:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   348f4:	1d14      	adds	r4, r2, #4
   348f6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   348fa:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   348fc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   34900:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   34904:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   34908:	d912      	bls.n	34930 <alloc_chunk+0x52>
   3490a:	4405      	add	r5, r0
   3490c:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   3490e:	1d15      	adds	r5, r2, #4
   34910:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   34914:	3e01      	subs	r6, #1
   34916:	d001      	beq.n	3491c <alloc_chunk+0x3e>
   34918:	42a7      	cmp	r7, r4
   3491a:	d1eb      	bne.n	348f4 <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   3491c:	68c4      	ldr	r4, [r0, #12]
   3491e:	f1c3 0220 	rsb	r2, r3, #32
   34922:	2301      	movs	r3, #1
   34924:	4093      	lsls	r3, r2
   34926:	425b      	negs	r3, r3

	if (bmask != 0U) {
   34928:	401c      	ands	r4, r3
   3492a:	d105      	bne.n	34938 <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   3492c:	4620      	mov	r0, r4
   3492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   34930:	4621      	mov	r1, r4
   34932:	f7ff ff19 	bl	34768 <free_list_remove_bidx>
				return c;
   34936:	e7f9      	b.n	3492c <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   34938:	fa94 f2a4 	rbit	r2, r4
   3493c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   34940:	1d13      	adds	r3, r2, #4
   34942:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   34946:	4621      	mov	r1, r4
   34948:	f7ff ff0e 	bl	34768 <free_list_remove_bidx>
		return c;
   3494c:	e7ee      	b.n	3492c <alloc_chunk+0x4e>

0003494e <sys_heap_free>:
	if (mem == NULL) {
   3494e:	b179      	cbz	r1, 34970 <sys_heap_free+0x22>
{
   34950:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   34952:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   34954:	4620      	mov	r0, r4
   34956:	f7ff ff75 	bl	34844 <mem_to_chunkid>
   3495a:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   3495c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   34960:	8853      	ldrh	r3, [r2, #2]
   34962:	f023 0301 	bic.w	r3, r3, #1
   34966:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   34968:	4620      	mov	r0, r4
   3496a:	f7ff ff87 	bl	3487c <free_chunk>
}
   3496e:	bd10      	pop	{r4, pc}
   34970:	4770      	bx	lr

00034972 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   34972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   34974:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   34976:	b341      	cbz	r1, 349ca <sys_heap_alloc+0x58>
   34978:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   3497a:	68aa      	ldr	r2, [r5, #8]
   3497c:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   34980:	d925      	bls.n	349ce <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   34982:	330b      	adds	r3, #11
   34984:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   34986:	4621      	mov	r1, r4
   34988:	4628      	mov	r0, r5
   3498a:	f7ff ffa8 	bl	348de <alloc_chunk>
	if (c == 0U) {
   3498e:	4607      	mov	r7, r0
   34990:	b1f8      	cbz	r0, 349d2 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   34992:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   34994:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   34998:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   3499a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   3499e:	d309      	bcc.n	349b4 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   349a0:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   349a2:	885a      	ldrh	r2, [r3, #2]
   349a4:	f042 0201 	orr.w	r2, r2, #1
   349a8:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   349aa:	4639      	mov	r1, r7
   349ac:	4628      	mov	r0, r5
   349ae:	f7ff fed7 	bl	34760 <chunk_mem>
}
   349b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   349b4:	4404      	add	r4, r0
   349b6:	4622      	mov	r2, r4
   349b8:	4601      	mov	r1, r0
   349ba:	4628      	mov	r0, r5
   349bc:	f7ff ff18 	bl	347f0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   349c0:	4621      	mov	r1, r4
   349c2:	4628      	mov	r0, r5
   349c4:	f7ff ff4e 	bl	34864 <free_list_add>
   349c8:	e7ea      	b.n	349a0 <sys_heap_alloc+0x2e>
		return NULL;
   349ca:	2000      	movs	r0, #0
   349cc:	e7f1      	b.n	349b2 <sys_heap_alloc+0x40>
   349ce:	2000      	movs	r0, #0
   349d0:	e7ef      	b.n	349b2 <sys_heap_alloc+0x40>
		return NULL;
   349d2:	2000      	movs	r0, #0
   349d4:	e7ed      	b.n	349b2 <sys_heap_alloc+0x40>

000349d6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   349d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   349da:	460d      	mov	r5, r1
   349dc:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   349de:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   349e0:	424b      	negs	r3, r1
   349e2:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   349e6:	ea31 0303 	bics.w	r3, r1, r3
   349ea:	d03e      	beq.n	34a6a <sys_heap_aligned_alloc+0x94>
		align -= rew;
   349ec:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   349f0:	f1b8 0f03 	cmp.w	r8, #3
   349f4:	d844      	bhi.n	34a80 <sys_heap_aligned_alloc+0xaa>
   349f6:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   349f8:	2c00      	cmp	r4, #0
   349fa:	d057      	beq.n	34aac <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   349fc:	68b3      	ldr	r3, [r6, #8]
   349fe:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   34a02:	d955      	bls.n	34ab0 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   34a04:	1929      	adds	r1, r5, r4
   34a06:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   34a08:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   34a0a:	08c9      	lsrs	r1, r1, #3
   34a0c:	4630      	mov	r0, r6
   34a0e:	f7ff ff66 	bl	348de <alloc_chunk>

	if (c0 == 0) {
   34a12:	4607      	mov	r7, r0
   34a14:	2800      	cmp	r0, #0
   34a16:	d04d      	beq.n	34ab4 <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   34a18:	4601      	mov	r1, r0
   34a1a:	4630      	mov	r0, r6
   34a1c:	f7ff fea0 	bl	34760 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   34a20:	4440      	add	r0, r8
   34a22:	4428      	add	r0, r5
   34a24:	3801      	subs	r0, #1
   34a26:	426d      	negs	r5, r5
   34a28:	4005      	ands	r5, r0
   34a2a:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   34a2e:	442c      	add	r4, r5
   34a30:	3407      	adds	r4, #7
   34a32:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   34a36:	4629      	mov	r1, r5
   34a38:	4630      	mov	r0, r6
   34a3a:	f7ff ff03 	bl	34844 <mem_to_chunkid>
   34a3e:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   34a40:	1ba4      	subs	r4, r4, r6
   34a42:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   34a44:	4287      	cmp	r7, r0
   34a46:	d31d      	bcc.n	34a84 <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   34a48:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   34a4c:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   34a50:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   34a52:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   34a56:	429c      	cmp	r4, r3
   34a58:	d31e      	bcc.n	34a98 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   34a5a:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   34a5c:	8873      	ldrh	r3, [r6, #2]
   34a5e:	f043 0301 	orr.w	r3, r3, #1
   34a62:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   34a64:	4628      	mov	r0, r5
   34a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   34a6a:	2904      	cmp	r1, #4
   34a6c:	d903      	bls.n	34a76 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   34a6e:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   34a72:	2204      	movs	r2, #4
   34a74:	e7c0      	b.n	349f8 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   34a76:	4611      	mov	r1, r2
   34a78:	f7ff ff7b 	bl	34972 <sys_heap_alloc>
   34a7c:	4605      	mov	r5, r0
   34a7e:	e7f1      	b.n	34a64 <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   34a80:	2204      	movs	r2, #4
   34a82:	e7b9      	b.n	349f8 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   34a84:	4602      	mov	r2, r0
   34a86:	4639      	mov	r1, r7
   34a88:	4630      	mov	r0, r6
   34a8a:	f7ff feb1 	bl	347f0 <split_chunks>
		free_list_add(h, c0);
   34a8e:	4639      	mov	r1, r7
   34a90:	4630      	mov	r0, r6
   34a92:	f7ff fee7 	bl	34864 <free_list_add>
   34a96:	e7d7      	b.n	34a48 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   34a98:	4622      	mov	r2, r4
   34a9a:	4641      	mov	r1, r8
   34a9c:	4630      	mov	r0, r6
   34a9e:	f7ff fea7 	bl	347f0 <split_chunks>
		free_list_add(h, c_end);
   34aa2:	4621      	mov	r1, r4
   34aa4:	4630      	mov	r0, r6
   34aa6:	f7ff fedd 	bl	34864 <free_list_add>
   34aaa:	e7d6      	b.n	34a5a <sys_heap_aligned_alloc+0x84>
		return NULL;
   34aac:	2500      	movs	r5, #0
   34aae:	e7d9      	b.n	34a64 <sys_heap_aligned_alloc+0x8e>
   34ab0:	2500      	movs	r5, #0
   34ab2:	e7d7      	b.n	34a64 <sys_heap_aligned_alloc+0x8e>
		return NULL;
   34ab4:	2500      	movs	r5, #0
   34ab6:	e7d5      	b.n	34a64 <sys_heap_aligned_alloc+0x8e>

00034ab8 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   34ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34aba:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   34abc:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   34abe:	1dc8      	adds	r0, r1, #7
   34ac0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   34ac4:	440d      	add	r5, r1
   34ac6:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   34aca:	1a2d      	subs	r5, r5, r0
   34acc:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   34ad0:	4607      	mov	r7, r0
	heap->heap = h;
   34ad2:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   34ad4:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   34ad8:	2300      	movs	r3, #0
   34ada:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   34adc:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   34ae0:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   34ae4:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   34ae8:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   34aea:	f102 0c07 	add.w	ip, r2, #7
   34aee:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   34af2:	42b3      	cmp	r3, r6
   34af4:	da05      	bge.n	34b02 <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   34af6:	1d1a      	adds	r2, r3, #4
   34af8:	2400      	movs	r4, #0
   34afa:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   34afe:	3301      	adds	r3, #1
   34b00:	e7f7      	b.n	34af2 <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   34b02:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   34b04:	b29b      	uxth	r3, r3
   34b06:	2200      	movs	r2, #0
   34b08:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   34b0a:	f043 0301 	orr.w	r3, r3, #1
   34b0e:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   34b10:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   34b14:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   34b16:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   34b1a:	1c94      	adds	r4, r2, #2
   34b1c:	5306      	strh	r6, [r0, r4]
   34b1e:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   34b20:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   34b24:	4405      	add	r5, r0
   34b26:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   34b28:	2301      	movs	r3, #1
   34b2a:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   34b2c:	f7ff fe9a 	bl	34864 <free_list_add>
}
   34b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034b32 <extract_decimal>:
{
   34b32:	b410      	push	{r4}
   34b34:	4604      	mov	r4, r0
	const char *sp = *str;
   34b36:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   34b38:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   34b3a:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   34b3c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   34b40:	2909      	cmp	r1, #9
   34b42:	d806      	bhi.n	34b52 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   34b44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34b48:	3201      	adds	r2, #1
   34b4a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   34b4e:	3830      	subs	r0, #48	; 0x30
   34b50:	e7f3      	b.n	34b3a <extract_decimal+0x8>
	*str = sp;
   34b52:	6022      	str	r2, [r4, #0]
}
   34b54:	bc10      	pop	{r4}
   34b56:	4770      	bx	lr

00034b58 <encode_uint>:
{
   34b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34b5c:	b083      	sub	sp, #12
   34b5e:	4604      	mov	r4, r0
   34b60:	460d      	mov	r5, r1
   34b62:	9201      	str	r2, [sp, #4]
   34b64:	469a      	mov	sl, r3
   34b66:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   34b6a:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   34b6c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   34b70:	2b6f      	cmp	r3, #111	; 0x6f
   34b72:	d00f      	beq.n	34b94 <encode_uint+0x3c>
   34b74:	d906      	bls.n	34b84 <encode_uint+0x2c>
   34b76:	2b70      	cmp	r3, #112	; 0x70
   34b78:	d00f      	beq.n	34b9a <encode_uint+0x42>
   34b7a:	2b78      	cmp	r3, #120	; 0x78
   34b7c:	d110      	bne.n	34ba0 <encode_uint+0x48>
		return 16;
   34b7e:	f04f 0910 	mov.w	r9, #16
   34b82:	e026      	b.n	34bd2 <encode_uint+0x7a>
	switch (specifier) {
   34b84:	2b58      	cmp	r3, #88	; 0x58
   34b86:	d002      	beq.n	34b8e <encode_uint+0x36>
   34b88:	f04f 090a 	mov.w	r9, #10
   34b8c:	e021      	b.n	34bd2 <encode_uint+0x7a>
		return 16;
   34b8e:	f04f 0910 	mov.w	r9, #16
   34b92:	e01e      	b.n	34bd2 <encode_uint+0x7a>
		return 8;
   34b94:	f04f 0908 	mov.w	r9, #8
   34b98:	e01b      	b.n	34bd2 <encode_uint+0x7a>
		return 16;
   34b9a:	f04f 0910 	mov.w	r9, #16
   34b9e:	e018      	b.n	34bd2 <encode_uint+0x7a>
	switch (specifier) {
   34ba0:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   34ba4:	e015      	b.n	34bd2 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   34ba6:	f1bb 0f19 	cmp.w	fp, #25
   34baa:	d820      	bhi.n	34bee <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   34bac:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   34bae:	3237      	adds	r2, #55	; 0x37
   34bb0:	b2d2      	uxtb	r2, r2
   34bb2:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   34bb6:	4632      	mov	r2, r6
   34bb8:	463b      	mov	r3, r7
   34bba:	4620      	mov	r0, r4
   34bbc:	4629      	mov	r1, r5
   34bbe:	f7d7 fff5 	bl	cbac <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   34bc2:	42bd      	cmp	r5, r7
   34bc4:	bf08      	it	eq
   34bc6:	42b4      	cmpeq	r4, r6
   34bc8:	d315      	bcc.n	34bf6 <encode_uint+0x9e>
   34bca:	45d0      	cmp	r8, sl
   34bcc:	d913      	bls.n	34bf6 <encode_uint+0x9e>
		value /= radix;
   34bce:	4604      	mov	r4, r0
   34bd0:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   34bd2:	464e      	mov	r6, r9
   34bd4:	2700      	movs	r7, #0
   34bd6:	464a      	mov	r2, r9
   34bd8:	463b      	mov	r3, r7
   34bda:	4620      	mov	r0, r4
   34bdc:	4629      	mov	r1, r5
   34bde:	f7d7 ffe5 	bl	cbac <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   34be2:	2a09      	cmp	r2, #9
   34be4:	d8df      	bhi.n	34ba6 <encode_uint+0x4e>
   34be6:	b2d2      	uxtb	r2, r2
   34be8:	3230      	adds	r2, #48	; 0x30
   34bea:	b2d2      	uxtb	r2, r2
   34bec:	e7e1      	b.n	34bb2 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   34bee:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   34bf0:	3257      	adds	r2, #87	; 0x57
   34bf2:	b2d2      	uxtb	r2, r2
   34bf4:	e7dd      	b.n	34bb2 <encode_uint+0x5a>
	if (conv->flag_hash) {
   34bf6:	9b01      	ldr	r3, [sp, #4]
   34bf8:	781b      	ldrb	r3, [r3, #0]
   34bfa:	f013 0f20 	tst.w	r3, #32
   34bfe:	d005      	beq.n	34c0c <encode_uint+0xb4>
		if (radix == 8) {
   34c00:	f1b9 0f08 	cmp.w	r9, #8
   34c04:	d006      	beq.n	34c14 <encode_uint+0xbc>
		} else if (radix == 16) {
   34c06:	f1b9 0f10 	cmp.w	r9, #16
   34c0a:	d009      	beq.n	34c20 <encode_uint+0xc8>
}
   34c0c:	4640      	mov	r0, r8
   34c0e:	b003      	add	sp, #12
   34c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   34c14:	9a01      	ldr	r2, [sp, #4]
   34c16:	7893      	ldrb	r3, [r2, #2]
   34c18:	f043 0308 	orr.w	r3, r3, #8
   34c1c:	7093      	strb	r3, [r2, #2]
   34c1e:	e7f5      	b.n	34c0c <encode_uint+0xb4>
			conv->altform_0c = true;
   34c20:	9a01      	ldr	r2, [sp, #4]
   34c22:	7893      	ldrb	r3, [r2, #2]
   34c24:	f043 0310 	orr.w	r3, r3, #16
   34c28:	7093      	strb	r3, [r2, #2]
   34c2a:	e7ef      	b.n	34c0c <encode_uint+0xb4>

00034c2c <outs>:
{
   34c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34c30:	4607      	mov	r7, r0
   34c32:	460e      	mov	r6, r1
   34c34:	4614      	mov	r4, r2
   34c36:	4698      	mov	r8, r3
	size_t count = 0;
   34c38:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   34c3a:	e006      	b.n	34c4a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   34c3c:	4631      	mov	r1, r6
   34c3e:	f814 0b01 	ldrb.w	r0, [r4], #1
   34c42:	47b8      	blx	r7
		if (rc < 0) {
   34c44:	2800      	cmp	r0, #0
   34c46:	db09      	blt.n	34c5c <outs+0x30>
		++count;
   34c48:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   34c4a:	4544      	cmp	r4, r8
   34c4c:	d3f6      	bcc.n	34c3c <outs+0x10>
   34c4e:	f1b8 0f00 	cmp.w	r8, #0
   34c52:	d102      	bne.n	34c5a <outs+0x2e>
   34c54:	7823      	ldrb	r3, [r4, #0]
   34c56:	2b00      	cmp	r3, #0
   34c58:	d1f0      	bne.n	34c3c <outs+0x10>
	return (int)count;
   34c5a:	4628      	mov	r0, r5
}
   34c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034c60 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   34c60:	4770      	bx	lr

00034c62 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   34c62:	2300      	movs	r3, #0
   34c64:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   34c66:	6003      	str	r3, [r0, #0]
}
   34c68:	4770      	bx	lr

00034c6a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   34c6a:	6803      	ldr	r3, [r0, #0]
   34c6c:	b12b      	cbz	r3, 34c7a <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   34c6e:	6843      	ldr	r3, [r0, #4]
   34c70:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   34c72:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   34c74:	2300      	movs	r3, #0
   34c76:	600b      	str	r3, [r1, #0]
}
   34c78:	4770      	bx	lr
		list->head = msg;
   34c7a:	6001      	str	r1, [r0, #0]
   34c7c:	e7f9      	b.n	34c72 <log_list_add_tail+0x8>

00034c7e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   34c7e:	6800      	ldr	r0, [r0, #0]
   34c80:	4770      	bx	lr

00034c82 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   34c82:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   34c84:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   34c86:	b108      	cbz	r0, 34c8c <log_list_head_get+0xa>
		list->head = list->head->next;
   34c88:	6802      	ldr	r2, [r0, #0]
   34c8a:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   34c8c:	4770      	bx	lr

00034c8e <dummy_timestamp>:
}
   34c8e:	2000      	movs	r0, #0
   34c90:	4770      	bx	lr

00034c92 <msg_filter_check>:
}
   34c92:	2001      	movs	r0, #1
   34c94:	4770      	bx	lr

00034c96 <default_get_timestamp>:
{
   34c96:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   34c98:	f006 fd23 	bl	3b6e2 <sys_clock_cycle_get_32>
}
   34c9c:	bd08      	pop	{r3, pc}

00034c9e <z_log_get_s_mask>:
{
   34c9e:	b470      	push	{r4, r5, r6}
   34ca0:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   34ca2:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   34ca4:	4605      	mov	r5, r0
	bool arm = false;
   34ca6:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   34ca8:	e001      	b.n	34cae <z_log_get_s_mask+0x10>
			arm = !arm;
   34caa:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   34cae:	f813 2b01 	ldrb.w	r2, [r3], #1
   34cb2:	b19a      	cbz	r2, 34cdc <z_log_get_s_mask+0x3e>
   34cb4:	428d      	cmp	r5, r1
   34cb6:	d211      	bcs.n	34cdc <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   34cb8:	2a25      	cmp	r2, #37	; 0x25
   34cba:	d0f6      	beq.n	34caa <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   34cbc:	2c00      	cmp	r4, #0
   34cbe:	d0f6      	beq.n	34cae <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   34cc0:	f042 0620 	orr.w	r6, r2, #32
   34cc4:	3e61      	subs	r6, #97	; 0x61
   34cc6:	2e19      	cmp	r6, #25
   34cc8:	d8f1      	bhi.n	34cae <z_log_get_s_mask+0x10>
			if (curr == 's') {
   34cca:	2a73      	cmp	r2, #115	; 0x73
   34ccc:	d002      	beq.n	34cd4 <z_log_get_s_mask+0x36>
			arg++;
   34cce:	3501      	adds	r5, #1
			arm = false;
   34cd0:	2400      	movs	r4, #0
   34cd2:	e7ec      	b.n	34cae <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   34cd4:	2201      	movs	r2, #1
   34cd6:	40aa      	lsls	r2, r5
   34cd8:	4310      	orrs	r0, r2
   34cda:	e7f8      	b.n	34cce <z_log_get_s_mask+0x30>
}
   34cdc:	bc70      	pop	{r4, r5, r6}
   34cde:	4770      	bx	lr

00034ce0 <z_log_get_tag>:
}
   34ce0:	2000      	movs	r0, #0
   34ce2:	4770      	bx	lr

00034ce4 <block_on_alloc>:
}
   34ce4:	2000      	movs	r0, #0
   34ce6:	4770      	bx	lr

00034ce8 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   34ce8:	2901      	cmp	r1, #1
   34cea:	d906      	bls.n	34cfa <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   34cec:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   34cee:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   34cf0:	2906      	cmp	r1, #6
   34cf2:	d907      	bls.n	34d04 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   34cf4:	3907      	subs	r1, #7
		cont = cont->next;
   34cf6:	681b      	ldr	r3, [r3, #0]
   34cf8:	e7fa      	b.n	34cf0 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   34cfa:	3104      	adds	r1, #4
   34cfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   34d00:	6888      	ldr	r0, [r1, #8]
   34d02:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   34d04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   34d08:	6848      	ldr	r0, [r1, #4]
}
   34d0a:	4770      	bx	lr

00034d0c <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   34d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34d10:	460d      	mov	r5, r1
   34d12:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   34d14:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   34d16:	2a03      	cmp	r2, #3
   34d18:	d917      	bls.n	34d4a <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   34d1a:	2208      	movs	r2, #8
   34d1c:	3018      	adds	r0, #24
   34d1e:	f002 f821 	bl	36d64 <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   34d22:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   34d24:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   34d26:	b1b4      	cbz	r4, 34d56 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   34d28:	46a0      	mov	r8, r4
   34d2a:	2c07      	cmp	r4, #7
   34d2c:	bf28      	it	cs
   34d2e:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   34d32:	ea4f 0788 	mov.w	r7, r8, lsl #2
   34d36:	463a      	mov	r2, r7
   34d38:	4629      	mov	r1, r5
   34d3a:	1d30      	adds	r0, r6, #4
   34d3c:	f002 f812 	bl	36d64 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   34d40:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   34d44:	443d      	add	r5, r7
		cont = cont->next;
   34d46:	6836      	ldr	r6, [r6, #0]
   34d48:	e7ed      	b.n	34d26 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   34d4a:	0092      	lsls	r2, r2, #2
   34d4c:	3014      	adds	r0, #20
   34d4e:	f002 f809 	bl	36d64 <memcpy>
		nargs  = 0U;
   34d52:	2400      	movs	r4, #0
   34d54:	e7e7      	b.n	34d26 <copy_args_to_msg+0x1a>
	}
}
   34d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034d5a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   34d5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   34d5e:	461c      	mov	r4, r3
   34d60:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   34d64:	8903      	ldrh	r3, [r0, #8]
   34d66:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   34d6a:	42a3      	cmp	r3, r4
   34d6c:	d91f      	bls.n	34dae <log_msg_hexdump_data_op+0x54>
   34d6e:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   34d70:	6811      	ldr	r1, [r2, #0]
   34d72:	4421      	add	r1, r4
   34d74:	4299      	cmp	r1, r3
   34d76:	d901      	bls.n	34d7c <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   34d78:	1b19      	subs	r1, r3, r4
   34d7a:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   34d7c:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   34d7e:	2b0c      	cmp	r3, #12
   34d80:	d919      	bls.n	34db6 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   34d82:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   34d86:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   34d88:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   34d8a:	42a3      	cmp	r3, r4
   34d8c:	d91e      	bls.n	34dcc <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   34d8e:	42bb      	cmp	r3, r7
   34d90:	bf28      	it	cs
   34d92:	463b      	movcs	r3, r7
   34d94:	461d      	mov	r5, r3

		if (put_op) {
   34d96:	f1b9 0f00 	cmp.w	r9, #0
   34d9a:	d010      	beq.n	34dbe <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   34d9c:	461a      	mov	r2, r3
   34d9e:	4641      	mov	r1, r8
   34da0:	eb0c 0004 	add.w	r0, ip, r4
   34da4:	f001 ffde 	bl	36d64 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   34da8:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   34daa:	44a8      	add	r8, r5
   34dac:	e021      	b.n	34df2 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   34dae:	2300      	movs	r3, #0
   34db0:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   34db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   34db6:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   34dba:	2600      	movs	r6, #0
   34dbc:	e7e5      	b.n	34d8a <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   34dbe:	461a      	mov	r2, r3
   34dc0:	eb0c 0104 	add.w	r1, ip, r4
   34dc4:	4640      	mov	r0, r8
   34dc6:	f001 ffcd 	bl	36d64 <memcpy>
   34dca:	e7ed      	b.n	34da8 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   34dcc:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   34dce:	b91e      	cbnz	r6, 34dd8 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   34dd0:	6946      	ldr	r6, [r0, #20]
   34dd2:	e001      	b.n	34dd8 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   34dd4:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   34dd6:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   34dd8:	2c1b      	cmp	r4, #27
   34dda:	d8fb      	bhi.n	34dd4 <log_msg_hexdump_data_op+0x7a>
   34ddc:	e009      	b.n	34df2 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   34dde:	1931      	adds	r1, r6, r4
   34de0:	462a      	mov	r2, r5
   34de2:	3104      	adds	r1, #4
   34de4:	4640      	mov	r0, r8
   34de6:	f001 ffbd 	bl	36d64 <memcpy>
		cont = cont->next;
   34dea:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   34dec:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   34dee:	44a8      	add	r8, r5
		offset = 0;
   34df0:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   34df2:	2f00      	cmp	r7, #0
   34df4:	d0dd      	beq.n	34db2 <log_msg_hexdump_data_op+0x58>
   34df6:	2e00      	cmp	r6, #0
   34df8:	d0db      	beq.n	34db2 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   34dfa:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   34dfe:	42bd      	cmp	r5, r7
   34e00:	bf28      	it	cs
   34e02:	463d      	movcs	r5, r7
		if (put_op) {
   34e04:	f1b9 0f00 	cmp.w	r9, #0
   34e08:	d0e9      	beq.n	34dde <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   34e0a:	1930      	adds	r0, r6, r4
   34e0c:	462a      	mov	r2, r5
   34e0e:	4641      	mov	r1, r8
   34e10:	3004      	adds	r0, #4
   34e12:	f001 ffa7 	bl	36d64 <memcpy>
   34e16:	e7e8      	b.n	34dea <log_msg_hexdump_data_op+0x90>

00034e18 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   34e18:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   34e1a:	f3bf 8f5b 	dmb	ish
   34e1e:	e850 3f00 	ldrex	r3, [r0]
   34e22:	3301      	adds	r3, #1
   34e24:	e840 3200 	strex	r2, r3, [r0]
   34e28:	2a00      	cmp	r2, #0
   34e2a:	d1f8      	bne.n	34e1e <log_msg_get+0x6>
   34e2c:	f3bf 8f5b 	dmb	ish
}
   34e30:	4770      	bx	lr

00034e32 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   34e32:	7a40      	ldrb	r0, [r0, #9]
}
   34e34:	0900      	lsrs	r0, r0, #4
   34e36:	4770      	bx	lr

00034e38 <log_msg_arg_get>:
{
   34e38:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   34e3a:	7a43      	ldrb	r3, [r0, #9]
   34e3c:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   34e40:	d20a      	bcs.n	34e58 <log_msg_arg_get+0x20>
   34e42:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   34e44:	2a03      	cmp	r2, #3
   34e46:	d804      	bhi.n	34e52 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   34e48:	3104      	adds	r1, #4
   34e4a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   34e4e:	6840      	ldr	r0, [r0, #4]
   34e50:	e003      	b.n	34e5a <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   34e52:	f7ff ff49 	bl	34ce8 <cont_arg_get>
   34e56:	e000      	b.n	34e5a <log_msg_arg_get+0x22>
		return 0;
   34e58:	2000      	movs	r0, #0
}
   34e5a:	bd08      	pop	{r3, pc}

00034e5c <log_msg_str_get>:
}
   34e5c:	6900      	ldr	r0, [r0, #16]
   34e5e:	4770      	bx	lr

00034e60 <log_msg_put>:
{
   34e60:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   34e62:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   34e64:	f3bf 8f5b 	dmb	ish
   34e68:	e853 2f00 	ldrex	r2, [r3]
   34e6c:	3a01      	subs	r2, #1
   34e6e:	e843 2100 	strex	r1, r2, [r3]
   34e72:	2900      	cmp	r1, #0
   34e74:	d1f8      	bne.n	34e68 <log_msg_put+0x8>
   34e76:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   34e7a:	6843      	ldr	r3, [r0, #4]
   34e7c:	b103      	cbz	r3, 34e80 <log_msg_put+0x20>
}
   34e7e:	bd08      	pop	{r3, pc}
		msg_free(msg);
   34e80:	f7eb fbca 	bl	20618 <msg_free>
}
   34e84:	e7fb      	b.n	34e7e <log_msg_put+0x1e>

00034e86 <msg_alloc>:
{
   34e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34e88:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   34e8a:	f7eb fba9 	bl	205e0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   34e8e:	4607      	mov	r7, r0
   34e90:	b140      	cbz	r0, 34ea4 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   34e92:	2301      	movs	r3, #1
   34e94:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   34e96:	2200      	movs	r2, #0
   34e98:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   34e9a:	f04f 0300 	mov.w	r3, #0
   34e9e:	f362 0300 	bfi	r3, r2, #0, #1
   34ea2:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   34ea4:	b1f7      	cbz	r7, 34ee4 <msg_alloc+0x5e>
   34ea6:	2d03      	cmp	r5, #3
   34ea8:	d91c      	bls.n	34ee4 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   34eaa:	7a7b      	ldrb	r3, [r7, #9]
   34eac:	f36f 1307 	bfc	r3, #4, #4
   34eb0:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   34eb2:	7a3b      	ldrb	r3, [r7, #8]
   34eb4:	f043 0302 	orr.w	r3, r3, #2
   34eb8:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   34eba:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   34ebc:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   34ec0:	2300      	movs	r3, #0
   34ec2:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   34ec4:	2d00      	cmp	r5, #0
   34ec6:	dd0d      	ble.n	34ee4 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   34ec8:	f7eb fb8a 	bl	205e0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   34ecc:	4604      	mov	r4, r0
   34ece:	b128      	cbz	r0, 34edc <msg_alloc+0x56>
		*next = cont;
   34ed0:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   34ed2:	2300      	movs	r3, #0
   34ed4:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   34ed6:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   34ed8:	3d07      	subs	r5, #7
   34eda:	e7f3      	b.n	34ec4 <msg_alloc+0x3e>
			msg_free(msg);
   34edc:	4638      	mov	r0, r7
   34ede:	f7eb fb9b 	bl	20618 <msg_free>
			return NULL;
   34ee2:	4627      	mov	r7, r4
}
   34ee4:	4638      	mov	r0, r7
   34ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034ee8 <log_msg_create_n>:
{
   34ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34eea:	4607      	mov	r7, r0
   34eec:	460e      	mov	r6, r1
   34eee:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   34ef0:	4610      	mov	r0, r2
   34ef2:	f7ff ffc8 	bl	34e86 <msg_alloc>
	if (msg != NULL) {
   34ef6:	4605      	mov	r5, r0
   34ef8:	b140      	cbz	r0, 34f0c <log_msg_create_n+0x24>
		msg->str = str;
   34efa:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   34efc:	7a43      	ldrb	r3, [r0, #9]
   34efe:	f364 1307 	bfi	r3, r4, #4, #4
   34f02:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   34f04:	4622      	mov	r2, r4
   34f06:	4631      	mov	r1, r6
   34f08:	f7ff ff00 	bl	34d0c <copy_args_to_msg>
}
   34f0c:	4628      	mov	r0, r5
   34f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034f10 <log_msg_hexdump_create>:
{
   34f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   34f14:	4606      	mov	r6, r0
   34f16:	460f      	mov	r7, r1
   34f18:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   34f1a:	f643 75ff 	movw	r5, #16383	; 0x3fff
   34f1e:	4295      	cmp	r5, r2
   34f20:	bf28      	it	cs
   34f22:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   34f24:	f7eb fb5c 	bl	205e0 <log_msg_chunk_alloc>
	if (msg == NULL) {
   34f28:	4681      	mov	r9, r0
   34f2a:	2800      	cmp	r0, #0
   34f2c:	d045      	beq.n	34fba <log_msg_hexdump_create+0xaa>
	msg->hdr.ref_cnt = 1;
   34f2e:	2301      	movs	r3, #1
   34f30:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   34f32:	7a03      	ldrb	r3, [r0, #8]
   34f34:	f043 0301 	orr.w	r3, r3, #1
   34f38:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   34f3a:	8903      	ldrh	r3, [r0, #8]
   34f3c:	f365 038f 	bfi	r3, r5, #2, #14
   34f40:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   34f42:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   34f44:	2c0c      	cmp	r4, #12
   34f46:	d927      	bls.n	34f98 <log_msg_hexdump_create+0x88>
		(void)memcpy(msg->payload.ext.data.bytes,
   34f48:	2208      	movs	r2, #8
   34f4a:	4639      	mov	r1, r7
   34f4c:	3018      	adds	r0, #24
   34f4e:	f001 ff09 	bl	36d64 <memcpy>
		msg->payload.ext.next = NULL;
   34f52:	2300      	movs	r3, #0
   34f54:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
   34f58:	f899 3008 	ldrb.w	r3, [r9, #8]
   34f5c:	f043 0302 	orr.w	r3, r3, #2
   34f60:	f889 3008 	strb.w	r3, [r9, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   34f64:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   34f66:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   34f68:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   34f6c:	b32d      	cbz	r5, 34fba <log_msg_hexdump_create+0xaa>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   34f6e:	f7eb fb37 	bl	205e0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   34f72:	4604      	mov	r4, r0
   34f74:	b1e8      	cbz	r0, 34fb2 <log_msg_hexdump_create+0xa2>
		*prev_cont = cont;
   34f76:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   34f7a:	2300      	movs	r3, #0
   34f7c:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   34f7e:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   34f80:	462e      	mov	r6, r5
   34f82:	2d1c      	cmp	r5, #28
   34f84:	bf28      	it	cs
   34f86:	261c      	movcs	r6, #28
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   34f88:	4632      	mov	r2, r6
   34f8a:	4639      	mov	r1, r7
   34f8c:	3004      	adds	r0, #4
   34f8e:	f001 fee9 	bl	36d64 <memcpy>
		data += chunk_length;
   34f92:	4437      	add	r7, r6
		length -= chunk_length;
   34f94:	1bad      	subs	r5, r5, r6
   34f96:	e7e9      	b.n	34f6c <log_msg_hexdump_create+0x5c>
		(void)memcpy(msg->payload.single.bytes, data, length);
   34f98:	462a      	mov	r2, r5
   34f9a:	4639      	mov	r1, r7
   34f9c:	3014      	adds	r0, #20
   34f9e:	f001 fee1 	bl	36d64 <memcpy>
		msg->hdr.params.generic.ext = 0;
   34fa2:	f899 3008 	ldrb.w	r3, [r9, #8]
   34fa6:	f36f 0341 	bfc	r3, #1, #1
   34faa:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   34fae:	2500      	movs	r5, #0
   34fb0:	e7da      	b.n	34f68 <log_msg_hexdump_create+0x58>
			msg_free(msg);
   34fb2:	4648      	mov	r0, r9
   34fb4:	f7eb fb30 	bl	20618 <msg_free>
			return NULL;
   34fb8:	46a1      	mov	r9, r4
}
   34fba:	4648      	mov	r0, r9
   34fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00034fc0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   34fc0:	b510      	push	{r4, lr}
   34fc2:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   34fc4:	2400      	movs	r4, #0
   34fc6:	9400      	str	r4, [sp, #0]
   34fc8:	f7ff fec7 	bl	34d5a <log_msg_hexdump_data_op>
}
   34fcc:	b002      	add	sp, #8
   34fce:	bd10      	pop	{r4, pc}

00034fd0 <buffer_write>:
{
   34fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34fd2:	4607      	mov	r7, r0
   34fd4:	460d      	mov	r5, r1
   34fd6:	4614      	mov	r4, r2
   34fd8:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   34fda:	4632      	mov	r2, r6
   34fdc:	4621      	mov	r1, r4
   34fde:	4628      	mov	r0, r5
   34fe0:	47b8      	blx	r7
		buf += processed;
   34fe2:	4405      	add	r5, r0
	} while (len != 0);
   34fe4:	1a24      	subs	r4, r4, r0
   34fe6:	d1f8      	bne.n	34fda <buffer_write+0xa>
}
   34fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034fea <color_prefix>:
{
   34fea:	b508      	push	{r3, lr}
   34fec:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   34fee:	2201      	movs	r2, #1
   34ff0:	f7eb fbaa 	bl	20748 <color_print>
}
   34ff4:	bd08      	pop	{r3, pc}

00034ff6 <color_postfix>:
{
   34ff6:	b508      	push	{r3, lr}
   34ff8:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   34ffa:	2200      	movs	r2, #0
   34ffc:	f7eb fba4 	bl	20748 <color_print>
}
   35000:	bd08      	pop	{r3, pc}

00035002 <postfix_print>:
{
   35002:	b538      	push	{r3, r4, r5, lr}
   35004:	4605      	mov	r5, r0
   35006:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   35008:	f001 0101 	and.w	r1, r1, #1
   3500c:	f7ff fff3 	bl	34ff6 <color_postfix>
	newline_print(output, flags);
   35010:	4621      	mov	r1, r4
   35012:	4628      	mov	r0, r5
   35014:	f7eb fbae 	bl	20774 <newline_print>
}
   35018:	bd38      	pop	{r3, r4, r5, pc}

0003501a <std_print>:
{
   3501a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3501e:	b08e      	sub	sp, #56	; 0x38
   35020:	af0e      	add	r7, sp, #56	; 0x38
   35022:	4606      	mov	r6, r0
   35024:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   35026:	f7ff ff19 	bl	34e5c <log_msg_str_get>
   3502a:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   3502c:	4630      	mov	r0, r6
   3502e:	f7ff ff00 	bl	34e32 <log_msg_nargs_get>
   35032:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   35034:	0083      	lsls	r3, r0, #2
   35036:	3307      	adds	r3, #7
   35038:	f023 0307 	bic.w	r3, r3, #7
   3503c:	ebad 0d03 	sub.w	sp, sp, r3
   35040:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   35042:	2400      	movs	r4, #0
   35044:	4544      	cmp	r4, r8
   35046:	d207      	bcs.n	35058 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   35048:	4621      	mov	r1, r4
   3504a:	4630      	mov	r0, r6
   3504c:	f7ff fef4 	bl	34e38 <log_msg_arg_get>
   35050:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   35054:	3401      	adds	r4, #1
   35056:	e7f5      	b.n	35044 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   35058:	4630      	mov	r0, r6
   3505a:	f7ff feea 	bl	34e32 <log_msg_nargs_get>
   3505e:	280f      	cmp	r0, #15
   35060:	d815      	bhi.n	3508e <std_print+0x74>
   35062:	e8df f010 	tbh	[pc, r0, lsl #1]
   35066:	0010      	.short	0x0010
   35068:	001d0017 	.word	0x001d0017
   3506c:	002d0024 	.word	0x002d0024
   35070:	00450038 	.word	0x00450038
   35074:	00650054 	.word	0x00650054
   35078:	008d0078 	.word	0x008d0078
   3507c:	00bd00a4 	.word	0x00bd00a4
   35080:	00f500d8 	.word	0x00f500d8
   35084:	0114      	.short	0x0114
		print_formatted(output, str);
   35086:	4651      	mov	r1, sl
   35088:	4648      	mov	r0, r9
   3508a:	f7eb fb05 	bl	20698 <print_formatted>
}
   3508e:	46bd      	mov	sp, r7
   35090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   35094:	682a      	ldr	r2, [r5, #0]
   35096:	4651      	mov	r1, sl
   35098:	4648      	mov	r0, r9
   3509a:	f7eb fafd 	bl	20698 <print_formatted>
		break;
   3509e:	e7f6      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   350a0:	686b      	ldr	r3, [r5, #4]
   350a2:	682a      	ldr	r2, [r5, #0]
   350a4:	4651      	mov	r1, sl
   350a6:	4648      	mov	r0, r9
   350a8:	f7eb faf6 	bl	20698 <print_formatted>
		break;
   350ac:	e7ef      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   350ae:	686b      	ldr	r3, [r5, #4]
   350b0:	682a      	ldr	r2, [r5, #0]
   350b2:	68a9      	ldr	r1, [r5, #8]
   350b4:	9100      	str	r1, [sp, #0]
   350b6:	4651      	mov	r1, sl
   350b8:	4648      	mov	r0, r9
   350ba:	f7eb faed 	bl	20698 <print_formatted>
		break;
   350be:	e7e6      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   350c0:	686b      	ldr	r3, [r5, #4]
   350c2:	682a      	ldr	r2, [r5, #0]
   350c4:	68e9      	ldr	r1, [r5, #12]
   350c6:	9101      	str	r1, [sp, #4]
   350c8:	68a9      	ldr	r1, [r5, #8]
   350ca:	9100      	str	r1, [sp, #0]
   350cc:	4651      	mov	r1, sl
   350ce:	4648      	mov	r0, r9
   350d0:	f7eb fae2 	bl	20698 <print_formatted>
		break;
   350d4:	e7db      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   350d6:	686b      	ldr	r3, [r5, #4]
   350d8:	682a      	ldr	r2, [r5, #0]
   350da:	6929      	ldr	r1, [r5, #16]
   350dc:	9102      	str	r1, [sp, #8]
   350de:	68e9      	ldr	r1, [r5, #12]
   350e0:	9101      	str	r1, [sp, #4]
   350e2:	68a9      	ldr	r1, [r5, #8]
   350e4:	9100      	str	r1, [sp, #0]
   350e6:	4651      	mov	r1, sl
   350e8:	4648      	mov	r0, r9
   350ea:	f7eb fad5 	bl	20698 <print_formatted>
		break;
   350ee:	e7ce      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   350f0:	686b      	ldr	r3, [r5, #4]
   350f2:	682a      	ldr	r2, [r5, #0]
   350f4:	6969      	ldr	r1, [r5, #20]
   350f6:	9103      	str	r1, [sp, #12]
   350f8:	6929      	ldr	r1, [r5, #16]
   350fa:	9102      	str	r1, [sp, #8]
   350fc:	68e9      	ldr	r1, [r5, #12]
   350fe:	9101      	str	r1, [sp, #4]
   35100:	68a9      	ldr	r1, [r5, #8]
   35102:	9100      	str	r1, [sp, #0]
   35104:	4651      	mov	r1, sl
   35106:	4648      	mov	r0, r9
   35108:	f7eb fac6 	bl	20698 <print_formatted>
		break;
   3510c:	e7bf      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   3510e:	686b      	ldr	r3, [r5, #4]
   35110:	682a      	ldr	r2, [r5, #0]
   35112:	69a9      	ldr	r1, [r5, #24]
   35114:	9104      	str	r1, [sp, #16]
   35116:	6969      	ldr	r1, [r5, #20]
   35118:	9103      	str	r1, [sp, #12]
   3511a:	6929      	ldr	r1, [r5, #16]
   3511c:	9102      	str	r1, [sp, #8]
   3511e:	68e9      	ldr	r1, [r5, #12]
   35120:	9101      	str	r1, [sp, #4]
   35122:	68a9      	ldr	r1, [r5, #8]
   35124:	9100      	str	r1, [sp, #0]
   35126:	4651      	mov	r1, sl
   35128:	4648      	mov	r0, r9
   3512a:	f7eb fab5 	bl	20698 <print_formatted>
		break;
   3512e:	e7ae      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   35130:	686b      	ldr	r3, [r5, #4]
   35132:	682a      	ldr	r2, [r5, #0]
   35134:	69e9      	ldr	r1, [r5, #28]
   35136:	9105      	str	r1, [sp, #20]
   35138:	69a9      	ldr	r1, [r5, #24]
   3513a:	9104      	str	r1, [sp, #16]
   3513c:	6969      	ldr	r1, [r5, #20]
   3513e:	9103      	str	r1, [sp, #12]
   35140:	6929      	ldr	r1, [r5, #16]
   35142:	9102      	str	r1, [sp, #8]
   35144:	68e9      	ldr	r1, [r5, #12]
   35146:	9101      	str	r1, [sp, #4]
   35148:	68a9      	ldr	r1, [r5, #8]
   3514a:	9100      	str	r1, [sp, #0]
   3514c:	4651      	mov	r1, sl
   3514e:	4648      	mov	r0, r9
   35150:	f7eb faa2 	bl	20698 <print_formatted>
		break;
   35154:	e79b      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   35156:	686b      	ldr	r3, [r5, #4]
   35158:	682a      	ldr	r2, [r5, #0]
   3515a:	6a29      	ldr	r1, [r5, #32]
   3515c:	9106      	str	r1, [sp, #24]
   3515e:	69e9      	ldr	r1, [r5, #28]
   35160:	9105      	str	r1, [sp, #20]
   35162:	69a9      	ldr	r1, [r5, #24]
   35164:	9104      	str	r1, [sp, #16]
   35166:	6969      	ldr	r1, [r5, #20]
   35168:	9103      	str	r1, [sp, #12]
   3516a:	6929      	ldr	r1, [r5, #16]
   3516c:	9102      	str	r1, [sp, #8]
   3516e:	68e9      	ldr	r1, [r5, #12]
   35170:	9101      	str	r1, [sp, #4]
   35172:	68a9      	ldr	r1, [r5, #8]
   35174:	9100      	str	r1, [sp, #0]
   35176:	4651      	mov	r1, sl
   35178:	4648      	mov	r0, r9
   3517a:	f7eb fa8d 	bl	20698 <print_formatted>
		break;
   3517e:	e786      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   35180:	686b      	ldr	r3, [r5, #4]
   35182:	682a      	ldr	r2, [r5, #0]
   35184:	6a69      	ldr	r1, [r5, #36]	; 0x24
   35186:	9107      	str	r1, [sp, #28]
   35188:	6a29      	ldr	r1, [r5, #32]
   3518a:	9106      	str	r1, [sp, #24]
   3518c:	69e9      	ldr	r1, [r5, #28]
   3518e:	9105      	str	r1, [sp, #20]
   35190:	69a9      	ldr	r1, [r5, #24]
   35192:	9104      	str	r1, [sp, #16]
   35194:	6969      	ldr	r1, [r5, #20]
   35196:	9103      	str	r1, [sp, #12]
   35198:	6929      	ldr	r1, [r5, #16]
   3519a:	9102      	str	r1, [sp, #8]
   3519c:	68e9      	ldr	r1, [r5, #12]
   3519e:	9101      	str	r1, [sp, #4]
   351a0:	68a9      	ldr	r1, [r5, #8]
   351a2:	9100      	str	r1, [sp, #0]
   351a4:	4651      	mov	r1, sl
   351a6:	4648      	mov	r0, r9
   351a8:	f7eb fa76 	bl	20698 <print_formatted>
		break;
   351ac:	e76f      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   351ae:	686b      	ldr	r3, [r5, #4]
   351b0:	682a      	ldr	r2, [r5, #0]
   351b2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   351b4:	9108      	str	r1, [sp, #32]
   351b6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   351b8:	9107      	str	r1, [sp, #28]
   351ba:	6a29      	ldr	r1, [r5, #32]
   351bc:	9106      	str	r1, [sp, #24]
   351be:	69e9      	ldr	r1, [r5, #28]
   351c0:	9105      	str	r1, [sp, #20]
   351c2:	69a9      	ldr	r1, [r5, #24]
   351c4:	9104      	str	r1, [sp, #16]
   351c6:	6969      	ldr	r1, [r5, #20]
   351c8:	9103      	str	r1, [sp, #12]
   351ca:	6929      	ldr	r1, [r5, #16]
   351cc:	9102      	str	r1, [sp, #8]
   351ce:	68e9      	ldr	r1, [r5, #12]
   351d0:	9101      	str	r1, [sp, #4]
   351d2:	68a9      	ldr	r1, [r5, #8]
   351d4:	9100      	str	r1, [sp, #0]
   351d6:	4651      	mov	r1, sl
   351d8:	4648      	mov	r0, r9
   351da:	f7eb fa5d 	bl	20698 <print_formatted>
		break;
   351de:	e756      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   351e0:	686b      	ldr	r3, [r5, #4]
   351e2:	682a      	ldr	r2, [r5, #0]
   351e4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   351e6:	9109      	str	r1, [sp, #36]	; 0x24
   351e8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   351ea:	9108      	str	r1, [sp, #32]
   351ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
   351ee:	9107      	str	r1, [sp, #28]
   351f0:	6a29      	ldr	r1, [r5, #32]
   351f2:	9106      	str	r1, [sp, #24]
   351f4:	69e9      	ldr	r1, [r5, #28]
   351f6:	9105      	str	r1, [sp, #20]
   351f8:	69a9      	ldr	r1, [r5, #24]
   351fa:	9104      	str	r1, [sp, #16]
   351fc:	6969      	ldr	r1, [r5, #20]
   351fe:	9103      	str	r1, [sp, #12]
   35200:	6929      	ldr	r1, [r5, #16]
   35202:	9102      	str	r1, [sp, #8]
   35204:	68e9      	ldr	r1, [r5, #12]
   35206:	9101      	str	r1, [sp, #4]
   35208:	68a9      	ldr	r1, [r5, #8]
   3520a:	9100      	str	r1, [sp, #0]
   3520c:	4651      	mov	r1, sl
   3520e:	4648      	mov	r0, r9
   35210:	f7eb fa42 	bl	20698 <print_formatted>
		break;
   35214:	e73b      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   35216:	686b      	ldr	r3, [r5, #4]
   35218:	682a      	ldr	r2, [r5, #0]
   3521a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   3521c:	910a      	str	r1, [sp, #40]	; 0x28
   3521e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   35220:	9109      	str	r1, [sp, #36]	; 0x24
   35222:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   35224:	9108      	str	r1, [sp, #32]
   35226:	6a69      	ldr	r1, [r5, #36]	; 0x24
   35228:	9107      	str	r1, [sp, #28]
   3522a:	6a29      	ldr	r1, [r5, #32]
   3522c:	9106      	str	r1, [sp, #24]
   3522e:	69e9      	ldr	r1, [r5, #28]
   35230:	9105      	str	r1, [sp, #20]
   35232:	69a9      	ldr	r1, [r5, #24]
   35234:	9104      	str	r1, [sp, #16]
   35236:	6969      	ldr	r1, [r5, #20]
   35238:	9103      	str	r1, [sp, #12]
   3523a:	6929      	ldr	r1, [r5, #16]
   3523c:	9102      	str	r1, [sp, #8]
   3523e:	68e9      	ldr	r1, [r5, #12]
   35240:	9101      	str	r1, [sp, #4]
   35242:	68a9      	ldr	r1, [r5, #8]
   35244:	9100      	str	r1, [sp, #0]
   35246:	4651      	mov	r1, sl
   35248:	4648      	mov	r0, r9
   3524a:	f7eb fa25 	bl	20698 <print_formatted>
		break;
   3524e:	e71e      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   35250:	686b      	ldr	r3, [r5, #4]
   35252:	682a      	ldr	r2, [r5, #0]
   35254:	6b69      	ldr	r1, [r5, #52]	; 0x34
   35256:	910b      	str	r1, [sp, #44]	; 0x2c
   35258:	6b29      	ldr	r1, [r5, #48]	; 0x30
   3525a:	910a      	str	r1, [sp, #40]	; 0x28
   3525c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   3525e:	9109      	str	r1, [sp, #36]	; 0x24
   35260:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   35262:	9108      	str	r1, [sp, #32]
   35264:	6a69      	ldr	r1, [r5, #36]	; 0x24
   35266:	9107      	str	r1, [sp, #28]
   35268:	6a29      	ldr	r1, [r5, #32]
   3526a:	9106      	str	r1, [sp, #24]
   3526c:	69e9      	ldr	r1, [r5, #28]
   3526e:	9105      	str	r1, [sp, #20]
   35270:	69a9      	ldr	r1, [r5, #24]
   35272:	9104      	str	r1, [sp, #16]
   35274:	6969      	ldr	r1, [r5, #20]
   35276:	9103      	str	r1, [sp, #12]
   35278:	6929      	ldr	r1, [r5, #16]
   3527a:	9102      	str	r1, [sp, #8]
   3527c:	68e9      	ldr	r1, [r5, #12]
   3527e:	9101      	str	r1, [sp, #4]
   35280:	68a9      	ldr	r1, [r5, #8]
   35282:	9100      	str	r1, [sp, #0]
   35284:	4651      	mov	r1, sl
   35286:	4648      	mov	r0, r9
   35288:	f7eb fa06 	bl	20698 <print_formatted>
		break;
   3528c:	e6ff      	b.n	3508e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   3528e:	686b      	ldr	r3, [r5, #4]
   35290:	682a      	ldr	r2, [r5, #0]
   35292:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   35294:	910c      	str	r1, [sp, #48]	; 0x30
   35296:	6b69      	ldr	r1, [r5, #52]	; 0x34
   35298:	910b      	str	r1, [sp, #44]	; 0x2c
   3529a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   3529c:	910a      	str	r1, [sp, #40]	; 0x28
   3529e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   352a0:	9109      	str	r1, [sp, #36]	; 0x24
   352a2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   352a4:	9108      	str	r1, [sp, #32]
   352a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   352a8:	9107      	str	r1, [sp, #28]
   352aa:	6a29      	ldr	r1, [r5, #32]
   352ac:	9106      	str	r1, [sp, #24]
   352ae:	69e9      	ldr	r1, [r5, #28]
   352b0:	9105      	str	r1, [sp, #20]
   352b2:	69a9      	ldr	r1, [r5, #24]
   352b4:	9104      	str	r1, [sp, #16]
   352b6:	6969      	ldr	r1, [r5, #20]
   352b8:	9103      	str	r1, [sp, #12]
   352ba:	6929      	ldr	r1, [r5, #16]
   352bc:	9102      	str	r1, [sp, #8]
   352be:	68e9      	ldr	r1, [r5, #12]
   352c0:	9101      	str	r1, [sp, #4]
   352c2:	68a9      	ldr	r1, [r5, #8]
   352c4:	9100      	str	r1, [sp, #0]
   352c6:	4651      	mov	r1, sl
   352c8:	4648      	mov	r0, r9
   352ca:	f7eb f9e5 	bl	20698 <print_formatted>
}
   352ce:	e6de      	b.n	3508e <std_print+0x74>

000352d0 <log_output_flush>:
{
   352d0:	b510      	push	{r4, lr}
   352d2:	4604      	mov	r4, r0
		     output->control_block->offset,
   352d4:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   352d6:	6853      	ldr	r3, [r2, #4]
   352d8:	6812      	ldr	r2, [r2, #0]
   352da:	6881      	ldr	r1, [r0, #8]
   352dc:	6800      	ldr	r0, [r0, #0]
   352de:	f7ff fe77 	bl	34fd0 <buffer_write>
	output->control_block->offset = 0;
   352e2:	6863      	ldr	r3, [r4, #4]
   352e4:	2200      	movs	r2, #0
   352e6:	601a      	str	r2, [r3, #0]
}
   352e8:	bd10      	pop	{r4, pc}

000352ea <out_func>:
{
   352ea:	b538      	push	{r3, r4, r5, lr}
   352ec:	4605      	mov	r5, r0
   352ee:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   352f0:	684b      	ldr	r3, [r1, #4]
   352f2:	681a      	ldr	r2, [r3, #0]
   352f4:	68cb      	ldr	r3, [r1, #12]
   352f6:	429a      	cmp	r2, r3
   352f8:	d00f      	beq.n	3531a <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   352fa:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   352fc:	f3bf 8f5b 	dmb	ish
   35300:	e853 2f00 	ldrex	r2, [r3]
   35304:	1c51      	adds	r1, r2, #1
   35306:	e843 1000 	strex	r0, r1, [r3]
   3530a:	2800      	cmp	r0, #0
   3530c:	d1f8      	bne.n	35300 <out_func+0x16>
   3530e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   35312:	68a3      	ldr	r3, [r4, #8]
   35314:	549d      	strb	r5, [r3, r2]
}
   35316:	2000      	movs	r0, #0
   35318:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   3531a:	4608      	mov	r0, r1
   3531c:	f7ff ffd8 	bl	352d0 <log_output_flush>
   35320:	e7eb      	b.n	352fa <out_func+0x10>

00035322 <log_output_msg_process>:
{
   35322:	b5f0      	push	{r4, r5, r6, r7, lr}
   35324:	b085      	sub	sp, #20
   35326:	4606      	mov	r6, r0
   35328:	460c      	mov	r4, r1
   3532a:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   3532c:	7a0b      	ldrb	r3, [r1, #8]
   3532e:	f083 0301 	eor.w	r3, r3, #1
   35332:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   35336:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   35338:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   3533a:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   3533e:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   35340:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   35344:	f011 0507 	ands.w	r5, r1, #7
   35348:	d10f      	bne.n	3536a <log_output_msg_process+0x48>
   3534a:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   3534c:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   3534e:	f013 0f01 	tst.w	r3, #1
   35352:	d014      	beq.n	3537e <log_output_msg_process+0x5c>
	} else if (raw_string) {
   35354:	b9c5      	cbnz	r5, 35388 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   35356:	4631      	mov	r1, r6
   35358:	4620      	mov	r0, r4
   3535a:	f7eb fb19 	bl	20990 <raw_string_print>
	if (!raw_string) {
   3535e:	b9cd      	cbnz	r5, 35394 <log_output_msg_process+0x72>
	log_output_flush(output);
   35360:	4630      	mov	r0, r6
   35362:	f7ff ffb5 	bl	352d0 <log_output_flush>
}
   35366:	b005      	add	sp, #20
   35368:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   3536a:	9002      	str	r0, [sp, #8]
   3536c:	f8cd c004 	str.w	ip, [sp, #4]
   35370:	9500      	str	r5, [sp, #0]
   35372:	4639      	mov	r1, r7
   35374:	4630      	mov	r0, r6
   35376:	f7eb faa5 	bl	208c4 <prefix_print>
   3537a:	4602      	mov	r2, r0
   3537c:	e7e6      	b.n	3534c <log_output_msg_process+0x2a>
		std_print(msg, output);
   3537e:	4631      	mov	r1, r6
   35380:	4620      	mov	r0, r4
   35382:	f7ff fe4a 	bl	3501a <std_print>
   35386:	e7ea      	b.n	3535e <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   35388:	463b      	mov	r3, r7
   3538a:	4631      	mov	r1, r6
   3538c:	4620      	mov	r0, r4
   3538e:	f7eb fad5 	bl	2093c <hexdump_print>
   35392:	e7e4      	b.n	3535e <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   35394:	462a      	mov	r2, r5
   35396:	4639      	mov	r1, r7
   35398:	4630      	mov	r0, r6
   3539a:	f7ff fe32 	bl	35002 <postfix_print>
   3539e:	e7df      	b.n	35360 <log_output_msg_process+0x3e>

000353a0 <nvs_flash_rd>:
{
   353a0:	b570      	push	{r4, r5, r6, lr}
	offset = fs->offset;
   353a2:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   353a4:	8984      	ldrh	r4, [r0, #12]
   353a6:	0c0e      	lsrs	r6, r1, #16
   353a8:	fb06 5404 	mla	r4, r6, r4, r5
	offset += addr & ADDR_OFFS_MASK;
   353ac:	fa14 f181 	uxtah	r1, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   353b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   353b2:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
   353b4:	6824      	ldr	r4, [r4, #0]
   353b6:	47a0      	blx	r4
}
   353b8:	bd70      	pop	{r4, r5, r6, pc}

000353ba <nvs_flash_ate_rd>:
{
   353ba:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   353bc:	2308      	movs	r3, #8
   353be:	f7ff ffef 	bl	353a0 <nvs_flash_rd>
}
   353c2:	bd08      	pop	{r3, pc}

000353c4 <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   353c4:	2300      	movs	r3, #0
   353c6:	e000      	b.n	353ca <nvs_ate_cmp_const+0x6>
   353c8:	3301      	adds	r3, #1
   353ca:	2b07      	cmp	r3, #7
   353cc:	d804      	bhi.n	353d8 <nvs_ate_cmp_const+0x14>
		if (data8[i] != value) {
   353ce:	5cc2      	ldrb	r2, [r0, r3]
   353d0:	428a      	cmp	r2, r1
   353d2:	d0f9      	beq.n	353c8 <nvs_ate_cmp_const+0x4>
			return 1;
   353d4:	2001      	movs	r0, #1
}
   353d6:	4770      	bx	lr
	return 0;
   353d8:	2000      	movs	r0, #0
   353da:	4770      	bx	lr

000353dc <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   353dc:	680b      	ldr	r3, [r1, #0]
   353de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   353e2:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   353e4:	89c2      	ldrh	r2, [r0, #14]
   353e6:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   353ea:	d000      	beq.n	353ee <nvs_sector_advance+0x12>
}
   353ec:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   353ee:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
   353f2:	600b      	str	r3, [r1, #0]
}
   353f4:	e7fa      	b.n	353ec <nvs_sector_advance+0x10>

000353f6 <nvs_flash_block_cmp>:
{
   353f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   353fa:	b089      	sub	sp, #36	; 0x24
   353fc:	4681      	mov	r9, r0
   353fe:	460e      	mov	r6, r1
   35400:	4617      	mov	r7, r2
   35402:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   35404:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   35406:	681b      	ldr	r3, [r3, #0]
   35408:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   3540c:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   35410:	e002      	b.n	35418 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
   35412:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
   35414:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
   35416:	4427      	add	r7, r4
	while (len) {
   35418:	b1a5      	cbz	r5, 35444 <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
   3541a:	462c      	mov	r4, r5
   3541c:	4545      	cmp	r5, r8
   3541e:	bf28      	it	cs
   35420:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   35422:	4623      	mov	r3, r4
   35424:	466a      	mov	r2, sp
   35426:	4631      	mov	r1, r6
   35428:	4648      	mov	r0, r9
   3542a:	f7ff ffb9 	bl	353a0 <nvs_flash_rd>
		if (rc) {
   3542e:	4603      	mov	r3, r0
   35430:	b948      	cbnz	r0, 35446 <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
   35432:	4622      	mov	r2, r4
   35434:	4669      	mov	r1, sp
   35436:	4638      	mov	r0, r7
   35438:	f001 fc67 	bl	36d0a <memcmp>
		if (rc) {
   3543c:	2800      	cmp	r0, #0
   3543e:	d0e8      	beq.n	35412 <nvs_flash_block_cmp+0x1c>
			return 1;
   35440:	2301      	movs	r3, #1
   35442:	e000      	b.n	35446 <nvs_flash_block_cmp+0x50>
	return 0;
   35444:	2300      	movs	r3, #0
}
   35446:	4618      	mov	r0, r3
   35448:	b009      	add	sp, #36	; 0x24
   3544a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0003544e <nvs_flash_cmp_const>:
{
   3544e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35452:	b088      	sub	sp, #32
   35454:	4680      	mov	r8, r0
   35456:	460e      	mov	r6, r1
   35458:	4611      	mov	r1, r2
   3545a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   3545c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   3545e:	681f      	ldr	r7, [r3, #0]
   35460:	427f      	negs	r7, r7
	block_size =
   35462:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   35466:	463a      	mov	r2, r7
   35468:	4668      	mov	r0, sp
   3546a:	f001 fc9f 	bl	36dac <memset>
	while (len) {
   3546e:	b174      	cbz	r4, 3548e <nvs_flash_cmp_const+0x40>
		bytes_to_cmp = MIN(block_size, len);
   35470:	4625      	mov	r5, r4
   35472:	42bc      	cmp	r4, r7
   35474:	bf28      	it	cs
   35476:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   35478:	462b      	mov	r3, r5
   3547a:	466a      	mov	r2, sp
   3547c:	4631      	mov	r1, r6
   3547e:	4640      	mov	r0, r8
   35480:	f7ff ffb9 	bl	353f6 <nvs_flash_block_cmp>
		if (rc) {
   35484:	4603      	mov	r3, r0
   35486:	b918      	cbnz	r0, 35490 <nvs_flash_cmp_const+0x42>
		len -= bytes_to_cmp;
   35488:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   3548a:	442e      	add	r6, r5
   3548c:	e7ef      	b.n	3546e <nvs_flash_cmp_const+0x20>
	return 0;
   3548e:	2300      	movs	r3, #0
}
   35490:	4618      	mov	r0, r3
   35492:	b008      	add	sp, #32
   35494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035498 <nvs_flash_erase_sector>:
{
   35498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3549c:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   3549e:	ea4f 4811 	mov.w	r8, r1, lsr #16
   354a2:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset = fs->offset;
   354a6:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   354a8:	f8b0 900c 	ldrh.w	r9, [r0, #12]
   354ac:	0c09      	lsrs	r1, r1, #16
   354ae:	fb01 5509 	mla	r5, r1, r9, r5
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   354b2:	6a87      	ldr	r7, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   354b4:	f8d7 a008 	ldr.w	sl, [r7, #8]
	if (api->write_protection != NULL) {
   354b8:	f8da 300c 	ldr.w	r3, [sl, #12]
   354bc:	b123      	cbz	r3, 354c8 <nvs_flash_erase_sector+0x30>
		rc = api->write_protection(dev, false);
   354be:	2100      	movs	r1, #0
   354c0:	4638      	mov	r0, r7
   354c2:	4798      	blx	r3
		if (rc) {
   354c4:	4606      	mov	r6, r0
   354c6:	b960      	cbnz	r0, 354e2 <nvs_flash_erase_sector+0x4a>
	rc = api->erase(dev, offset, size);
   354c8:	f8da 3008 	ldr.w	r3, [sl, #8]
   354cc:	464a      	mov	r2, r9
   354ce:	4629      	mov	r1, r5
   354d0:	4638      	mov	r0, r7
   354d2:	4798      	blx	r3
   354d4:	4606      	mov	r6, r0
	if (api->write_protection != NULL) {
   354d6:	f8da 300c 	ldr.w	r3, [sl, #12]
   354da:	b113      	cbz	r3, 354e2 <nvs_flash_erase_sector+0x4a>
		(void) api->write_protection(dev, true);
   354dc:	2101      	movs	r1, #1
   354de:	4638      	mov	r0, r7
   354e0:	4798      	blx	r3
	if (rc) {
   354e2:	b116      	cbz	r6, 354ea <nvs_flash_erase_sector+0x52>
}
   354e4:	4630      	mov	r0, r6
   354e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   354ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   354ec:	89a3      	ldrh	r3, [r4, #12]
   354ee:	7912      	ldrb	r2, [r2, #4]
   354f0:	4641      	mov	r1, r8
   354f2:	4620      	mov	r0, r4
   354f4:	f7ff ffab 	bl	3544e <nvs_flash_cmp_const>
   354f8:	2800      	cmp	r0, #0
   354fa:	d0f3      	beq.n	354e4 <nvs_flash_erase_sector+0x4c>
		rc = -ENXIO;
   354fc:	f06f 0605 	mvn.w	r6, #5
   35500:	e7f0      	b.n	354e4 <nvs_flash_erase_sector+0x4c>

00035502 <nvs_ate_crc8_check>:
{
   35502:	b510      	push	{r4, lr}
   35504:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   35506:	2207      	movs	r2, #7
   35508:	4601      	mov	r1, r0
   3550a:	20ff      	movs	r0, #255	; 0xff
   3550c:	f7e9 fe10 	bl	1f130 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   35510:	79e3      	ldrb	r3, [r4, #7]
   35512:	4283      	cmp	r3, r0
   35514:	d001      	beq.n	3551a <nvs_ate_crc8_check+0x18>
	return 1;
   35516:	2001      	movs	r0, #1
}
   35518:	bd10      	pop	{r4, pc}
		return 0;
   3551a:	2000      	movs	r0, #0
   3551c:	e7fc      	b.n	35518 <nvs_ate_crc8_check+0x16>

0003551e <nvs_ate_valid>:
{
   3551e:	b570      	push	{r4, r5, r6, lr}
   35520:	4604      	mov	r4, r0
   35522:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   35524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   35526:	681b      	ldr	r3, [r3, #0]
   35528:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   3552a:	2a01      	cmp	r2, #1
   3552c:	d90d      	bls.n	3554a <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   3552e:	1dd6      	adds	r6, r2, #7
   35530:	4253      	negs	r3, r2
   35532:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   35534:	4628      	mov	r0, r5
   35536:	f7ff ffe4 	bl	35502 <nvs_ate_crc8_check>
   3553a:	b940      	cbnz	r0, 3554e <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   3553c:	886a      	ldrh	r2, [r5, #2]
   3553e:	89a3      	ldrh	r3, [r4, #12]
   35540:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   35542:	429a      	cmp	r2, r3
   35544:	d205      	bcs.n	35552 <nvs_ate_valid+0x34>
	return 1;
   35546:	2001      	movs	r0, #1
}
   35548:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   3554a:	2608      	movs	r6, #8
   3554c:	e7f2      	b.n	35534 <nvs_ate_valid+0x16>
		return 0;
   3554e:	2000      	movs	r0, #0
   35550:	e7fa      	b.n	35548 <nvs_ate_valid+0x2a>
   35552:	2000      	movs	r0, #0
   35554:	e7f8      	b.n	35548 <nvs_ate_valid+0x2a>

00035556 <nvs_recover_last_ate>:
{
   35556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3555a:	b082      	sub	sp, #8
   3555c:	4606      	mov	r6, r0
   3555e:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   35560:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   35562:	681f      	ldr	r7, [r3, #0]
   35564:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   35566:	2b01      	cmp	r3, #1
   35568:	d90b      	bls.n	35582 <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   3556a:	461f      	mov	r7, r3
   3556c:	3307      	adds	r3, #7
   3556e:	427f      	negs	r7, r7
   35570:	401f      	ands	r7, r3
	*addr -= ate_size;
   35572:	f8d8 4000 	ldr.w	r4, [r8]
   35576:	1be4      	subs	r4, r4, r7
   35578:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   3557c:	0c25      	lsrs	r5, r4, #16
   3557e:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   35580:	e002      	b.n	35588 <nvs_recover_last_ate+0x32>
		return len;
   35582:	2708      	movs	r7, #8
   35584:	e7f5      	b.n	35572 <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   35586:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   35588:	42ac      	cmp	r4, r5
   3558a:	d917      	bls.n	355bc <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   3558c:	466a      	mov	r2, sp
   3558e:	4621      	mov	r1, r4
   35590:	4630      	mov	r0, r6
   35592:	f7ff ff12 	bl	353ba <nvs_flash_ate_rd>
		if (rc) {
   35596:	4603      	mov	r3, r0
   35598:	b988      	cbnz	r0, 355be <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   3559a:	4669      	mov	r1, sp
   3559c:	4630      	mov	r0, r6
   3559e:	f7ff ffbe 	bl	3551e <nvs_ate_valid>
   355a2:	2800      	cmp	r0, #0
   355a4:	d0ef      	beq.n	35586 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   355a6:	0c2d      	lsrs	r5, r5, #16
   355a8:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   355aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   355ae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   355b2:	4413      	add	r3, r2
   355b4:	441d      	add	r5, r3
			*addr = ate_end_addr;
   355b6:	f8c8 4000 	str.w	r4, [r8]
   355ba:	e7e4      	b.n	35586 <nvs_recover_last_ate+0x30>
	return 0;
   355bc:	2300      	movs	r3, #0
}
   355be:	4618      	mov	r0, r3
   355c0:	b002      	add	sp, #8
   355c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000355c6 <nvs_close_ate_valid>:
{
   355c6:	b538      	push	{r3, r4, r5, lr}
   355c8:	4605      	mov	r5, r0
   355ca:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   355cc:	f7ff ffa7 	bl	3551e <nvs_ate_valid>
   355d0:	b1e0      	cbz	r0, 3560c <nvs_close_ate_valid+0x46>
   355d2:	88a3      	ldrh	r3, [r4, #4]
   355d4:	b9cb      	cbnz	r3, 3560a <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   355d6:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   355d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   355dc:	429a      	cmp	r2, r3
   355de:	d116      	bne.n	3560e <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   355e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   355e2:	681b      	ldr	r3, [r3, #0]
   355e4:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   355e6:	2a01      	cmp	r2, #1
   355e8:	d90d      	bls.n	35606 <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   355ea:	4613      	mov	r3, r2
   355ec:	3207      	adds	r2, #7
   355ee:	425b      	negs	r3, r3
   355f0:	4013      	ands	r3, r2
	if ((fs->sector_size - entry->offset) % ate_size) {
   355f2:	89aa      	ldrh	r2, [r5, #12]
   355f4:	8861      	ldrh	r1, [r4, #2]
   355f6:	1a52      	subs	r2, r2, r1
   355f8:	fbb2 f1f3 	udiv	r1, r2, r3
   355fc:	fb03 2311 	mls	r3, r3, r1, r2
   35600:	b93b      	cbnz	r3, 35612 <nvs_close_ate_valid+0x4c>
	return 1;
   35602:	2001      	movs	r0, #1
   35604:	e002      	b.n	3560c <nvs_close_ate_valid+0x46>
		return len;
   35606:	2308      	movs	r3, #8
   35608:	e7f3      	b.n	355f2 <nvs_close_ate_valid+0x2c>
		return 0;
   3560a:	2000      	movs	r0, #0
}
   3560c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   3560e:	2000      	movs	r0, #0
   35610:	e7fc      	b.n	3560c <nvs_close_ate_valid+0x46>
		return 0;
   35612:	2000      	movs	r0, #0
   35614:	e7fa      	b.n	3560c <nvs_close_ate_valid+0x46>

00035616 <nvs_prev_ate>:
{
   35616:	b5f0      	push	{r4, r5, r6, r7, lr}
   35618:	b083      	sub	sp, #12
   3561a:	4604      	mov	r4, r0
   3561c:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   3561e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   35620:	681b      	ldr	r3, [r3, #0]
   35622:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   35624:	2901      	cmp	r1, #1
   35626:	d92a      	bls.n	3567e <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   35628:	1dce      	adds	r6, r1, #7
   3562a:	424b      	negs	r3, r1
   3562c:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   3562e:	6829      	ldr	r1, [r5, #0]
   35630:	4620      	mov	r0, r4
   35632:	f7ff fec2 	bl	353ba <nvs_flash_ate_rd>
	if (rc) {
   35636:	4607      	mov	r7, r0
   35638:	b9f0      	cbnz	r0, 35678 <nvs_prev_ate+0x62>
	*addr += ate_size;
   3563a:	682a      	ldr	r2, [r5, #0]
   3563c:	4432      	add	r2, r6
   3563e:	602a      	str	r2, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   35640:	b291      	uxth	r1, r2
   35642:	89a3      	ldrh	r3, [r4, #12]
   35644:	1b9b      	subs	r3, r3, r6
   35646:	4299      	cmp	r1, r3
   35648:	d116      	bne.n	35678 <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   3564a:	0c13      	lsrs	r3, r2, #16
   3564c:	d119      	bne.n	35682 <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   3564e:	89e3      	ldrh	r3, [r4, #14]
   35650:	3b01      	subs	r3, #1
   35652:	eb02 4203 	add.w	r2, r2, r3, lsl #16
   35656:	602a      	str	r2, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   35658:	466a      	mov	r2, sp
   3565a:	6829      	ldr	r1, [r5, #0]
   3565c:	4620      	mov	r0, r4
   3565e:	f7ff feac 	bl	353ba <nvs_flash_ate_rd>
	if (rc) {
   35662:	4607      	mov	r7, r0
   35664:	b940      	cbnz	r0, 35678 <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   35666:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   35668:	7919      	ldrb	r1, [r3, #4]
   3566a:	4668      	mov	r0, sp
   3566c:	f7ff feaa 	bl	353c4 <nvs_ate_cmp_const>
	if (!rc) {
   35670:	b958      	cbnz	r0, 3568a <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   35672:	6862      	ldr	r2, [r4, #4]
   35674:	602a      	str	r2, [r5, #0]
		return 0;
   35676:	4607      	mov	r7, r0
}
   35678:	4638      	mov	r0, r7
   3567a:	b003      	add	sp, #12
   3567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   3567e:	2608      	movs	r6, #8
   35680:	e7d5      	b.n	3562e <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   35682:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   35686:	602a      	str	r2, [r5, #0]
   35688:	e7e6      	b.n	35658 <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   3568a:	4669      	mov	r1, sp
   3568c:	4620      	mov	r0, r4
   3568e:	f7ff ff9a 	bl	355c6 <nvs_close_ate_valid>
   35692:	b130      	cbz	r0, 356a2 <nvs_prev_ate+0x8c>
		(*addr) &= ADDR_SECT_MASK;
   35694:	886a      	ldrh	r2, [r5, #2]
		(*addr) += close_ate.offset;
   35696:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   3569a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   3569e:	602b      	str	r3, [r5, #0]
		return 0;
   356a0:	e7ea      	b.n	35678 <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   356a2:	4629      	mov	r1, r5
   356a4:	4620      	mov	r0, r4
   356a6:	f7ff ff56 	bl	35556 <nvs_recover_last_ate>
   356aa:	4607      	mov	r7, r0
   356ac:	e7e4      	b.n	35678 <nvs_prev_ate+0x62>

000356ae <nvs_ate_crc8_update>:
{
   356ae:	b510      	push	{r4, lr}
   356b0:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   356b2:	2207      	movs	r2, #7
   356b4:	4601      	mov	r1, r0
   356b6:	20ff      	movs	r0, #255	; 0xff
   356b8:	f7e9 fd3a 	bl	1f130 <crc8_ccitt>
	entry->crc8 = crc8;
   356bc:	71e0      	strb	r0, [r4, #7]
}
   356be:	bd10      	pop	{r4, pc}

000356c0 <nvs_flash_al_wrt>:
{
   356c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   356c4:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   356c6:	2b00      	cmp	r3, #0
   356c8:	d062      	beq.n	35790 <_flash_used+0xb4>
   356ca:	4605      	mov	r5, r0
   356cc:	4691      	mov	r9, r2
   356ce:	4698      	mov	r8, r3
	offset = fs->offset;
   356d0:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   356d2:	8984      	ldrh	r4, [r0, #12]
   356d4:	0c0a      	lsrs	r2, r1, #16
   356d6:	fb02 3404 	mla	r4, r2, r4, r3
	offset += addr & ADDR_OFFS_MASK;
   356da:	fa14 f481 	uxtah	r4, r4, r1
   356de:	46a2      	mov	sl, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   356e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   356e2:	681b      	ldr	r3, [r3, #0]
   356e4:	425b      	negs	r3, r3
	if (blen > 0) {
   356e6:	ea13 0608 	ands.w	r6, r3, r8
   356ea:	d107      	bne.n	356fc <_flash_used+0x20>
	int rc = 0;
   356ec:	2700      	movs	r7, #0
	if (len) {
   356ee:	f1b8 0f00 	cmp.w	r8, #0
   356f2:	d125      	bne.n	35740 <_flash_used+0x64>
}
   356f4:	4638      	mov	r0, r7
   356f6:	b009      	add	sp, #36	; 0x24
   356f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = flash_write(fs->flash_device, offset, data8, blen);
   356fc:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   35700:	f8da b008 	ldr.w	fp, [sl, #8]
	if (api->write_protection != NULL) {
   35704:	f8db 300c 	ldr.w	r3, [fp, #12]
   35708:	b123      	cbz	r3, 35714 <_flash_used+0x38>
		rc = api->write_protection(dev, false);
   3570a:	2100      	movs	r1, #0
   3570c:	4650      	mov	r0, sl
   3570e:	4798      	blx	r3
		if (rc) {
   35710:	4607      	mov	r7, r0
   35712:	b968      	cbnz	r0, 35730 <_flash_used+0x54>
	rc = api->write(dev, offset, data, len);
   35714:	f8db 7004 	ldr.w	r7, [fp, #4]
   35718:	4633      	mov	r3, r6
   3571a:	464a      	mov	r2, r9
   3571c:	4621      	mov	r1, r4
   3571e:	4650      	mov	r0, sl
   35720:	47b8      	blx	r7
   35722:	4607      	mov	r7, r0
	if (api->write_protection != NULL) {
   35724:	f8db 300c 	ldr.w	r3, [fp, #12]
   35728:	b113      	cbz	r3, 35730 <_flash_used+0x54>
		(void) api->write_protection(dev, true);
   3572a:	2101      	movs	r1, #1
   3572c:	4650      	mov	r0, sl
   3572e:	4798      	blx	r3
		if (rc) {
   35730:	2f00      	cmp	r7, #0
   35732:	d1df      	bne.n	356f4 <_flash_used+0x18>
		len -= blen;
   35734:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   35738:	eb04 0a06 	add.w	sl, r4, r6
		data8 += blen;
   3573c:	44b1      	add	r9, r6
   3573e:	e7d6      	b.n	356ee <_flash_used+0x12>
		memcpy(buf, data8, len);
   35740:	4642      	mov	r2, r8
   35742:	4649      	mov	r1, r9
   35744:	4668      	mov	r0, sp
   35746:	f001 fb0d 	bl	36d64 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   3574a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->flash_parameters->write_block_size - len);
   3574c:	681a      	ldr	r2, [r3, #0]
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   3574e:	eba2 0208 	sub.w	r2, r2, r8
   35752:	7919      	ldrb	r1, [r3, #4]
   35754:	eb0d 0008 	add.w	r0, sp, r8
   35758:	f001 fb28 	bl	36dac <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   3575c:	6aac      	ldr	r4, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   3575e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		rc = flash_write(fs->flash_device, offset, buf,
   35760:	681e      	ldr	r6, [r3, #0]
	const struct flash_driver_api *api =
   35762:	68a5      	ldr	r5, [r4, #8]
	if (api->write_protection != NULL) {
   35764:	68eb      	ldr	r3, [r5, #12]
   35766:	b12b      	cbz	r3, 35774 <_flash_used+0x98>
		rc = api->write_protection(dev, false);
   35768:	2100      	movs	r1, #0
   3576a:	4620      	mov	r0, r4
   3576c:	4798      	blx	r3
		if (rc) {
   3576e:	4607      	mov	r7, r0
   35770:	2800      	cmp	r0, #0
   35772:	d1bf      	bne.n	356f4 <_flash_used+0x18>
	rc = api->write(dev, offset, data, len);
   35774:	686f      	ldr	r7, [r5, #4]
   35776:	4633      	mov	r3, r6
   35778:	466a      	mov	r2, sp
   3577a:	4651      	mov	r1, sl
   3577c:	4620      	mov	r0, r4
   3577e:	47b8      	blx	r7
   35780:	4607      	mov	r7, r0
	if (api->write_protection != NULL) {
   35782:	68eb      	ldr	r3, [r5, #12]
   35784:	2b00      	cmp	r3, #0
   35786:	d0b5      	beq.n	356f4 <_flash_used+0x18>
		(void) api->write_protection(dev, true);
   35788:	2101      	movs	r1, #1
   3578a:	4620      	mov	r0, r4
   3578c:	4798      	blx	r3
   3578e:	e7b1      	b.n	356f4 <_flash_used+0x18>
		return 0;
   35790:	2700      	movs	r7, #0
   35792:	e7af      	b.n	356f4 <_flash_used+0x18>

00035794 <nvs_flash_data_wrt>:
{
   35794:	b538      	push	{r3, r4, r5, lr}
   35796:	4605      	mov	r5, r0
   35798:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   3579a:	4613      	mov	r3, r2
   3579c:	460a      	mov	r2, r1
   3579e:	6881      	ldr	r1, [r0, #8]
   357a0:	f7ff ff8e 	bl	356c0 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   357a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   357a6:	681a      	ldr	r2, [r3, #0]
   357a8:	b2d3      	uxtb	r3, r2
	if (write_block_size <= 1U) {
   357aa:	2b01      	cmp	r3, #1
   357ac:	d903      	bls.n	357b6 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   357ae:	441c      	add	r4, r3
   357b0:	3c01      	subs	r4, #1
   357b2:	425a      	negs	r2, r3
   357b4:	4014      	ands	r4, r2
	fs->data_wra += nvs_al_size(fs, len);
   357b6:	68aa      	ldr	r2, [r5, #8]
   357b8:	4422      	add	r2, r4
   357ba:	60aa      	str	r2, [r5, #8]
}
   357bc:	bd38      	pop	{r3, r4, r5, pc}

000357be <nvs_flash_block_move>:
{
   357be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   357c2:	b088      	sub	sp, #32
   357c4:	4607      	mov	r7, r0
   357c6:	460e      	mov	r6, r1
   357c8:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   357ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   357cc:	681b      	ldr	r3, [r3, #0]
   357ce:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   357d2:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   357d6:	e001      	b.n	357dc <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   357d8:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   357da:	4426      	add	r6, r4
	while (len) {
   357dc:	b1a5      	cbz	r5, 35808 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   357de:	462c      	mov	r4, r5
   357e0:	4545      	cmp	r5, r8
   357e2:	bf28      	it	cs
   357e4:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   357e6:	4623      	mov	r3, r4
   357e8:	466a      	mov	r2, sp
   357ea:	4631      	mov	r1, r6
   357ec:	4638      	mov	r0, r7
   357ee:	f7ff fdd7 	bl	353a0 <nvs_flash_rd>
		if (rc) {
   357f2:	4603      	mov	r3, r0
   357f4:	b948      	cbnz	r0, 3580a <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   357f6:	4622      	mov	r2, r4
   357f8:	4669      	mov	r1, sp
   357fa:	4638      	mov	r0, r7
   357fc:	f7ff ffca 	bl	35794 <nvs_flash_data_wrt>
		if (rc) {
   35800:	4603      	mov	r3, r0
   35802:	2800      	cmp	r0, #0
   35804:	d0e8      	beq.n	357d8 <nvs_flash_block_move+0x1a>
   35806:	e000      	b.n	3580a <nvs_flash_block_move+0x4c>
	return 0;
   35808:	2300      	movs	r3, #0
}
   3580a:	4618      	mov	r0, r3
   3580c:	b008      	add	sp, #32
   3580e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035812 <nvs_flash_ate_wrt>:
{
   35812:	b510      	push	{r4, lr}
   35814:	4604      	mov	r4, r0
   35816:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   35818:	2308      	movs	r3, #8
   3581a:	6841      	ldr	r1, [r0, #4]
   3581c:	f7ff ff50 	bl	356c0 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   35820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   35822:	681b      	ldr	r3, [r3, #0]
   35824:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   35826:	2a01      	cmp	r2, #1
   35828:	d907      	bls.n	3583a <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   3582a:	4613      	mov	r3, r2
   3582c:	3207      	adds	r2, #7
   3582e:	425b      	negs	r3, r3
   35830:	4013      	ands	r3, r2
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   35832:	6862      	ldr	r2, [r4, #4]
   35834:	1ad2      	subs	r2, r2, r3
   35836:	6062      	str	r2, [r4, #4]
}
   35838:	bd10      	pop	{r4, pc}
		return len;
   3583a:	2308      	movs	r3, #8
   3583c:	e7f9      	b.n	35832 <nvs_flash_ate_wrt+0x20>

0003583e <nvs_add_gc_done_ate>:
{
   3583e:	b510      	push	{r4, lr}
   35840:	b082      	sub	sp, #8
   35842:	4604      	mov	r4, r0
	gc_done_ate.id = 0xffff;
   35844:	f64f 73ff 	movw	r3, #65535	; 0xffff
   35848:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   3584c:	2300      	movs	r3, #0
   3584e:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   35852:	8903      	ldrh	r3, [r0, #8]
   35854:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   35858:	4668      	mov	r0, sp
   3585a:	f7ff ff28 	bl	356ae <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   3585e:	4669      	mov	r1, sp
   35860:	4620      	mov	r0, r4
   35862:	f7ff ffd6 	bl	35812 <nvs_flash_ate_wrt>
}
   35866:	b002      	add	sp, #8
   35868:	bd10      	pop	{r4, pc}

0003586a <nvs_gc>:
{
   3586a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3586e:	b08a      	sub	sp, #40	; 0x28
   35870:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   35872:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   35874:	681d      	ldr	r5, [r3, #0]
   35876:	b2eb      	uxtb	r3, r5
	if (write_block_size <= 1U) {
   35878:	2b01      	cmp	r3, #1
   3587a:	d92e      	bls.n	358da <nvs_gc+0x70>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   3587c:	461d      	mov	r5, r3
   3587e:	3307      	adds	r3, #7
   35880:	426d      	negs	r5, r5
   35882:	401d      	ands	r5, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   35884:	88e3      	ldrh	r3, [r4, #6]
   35886:	041b      	lsls	r3, r3, #16
   35888:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   3588a:	a903      	add	r1, sp, #12
   3588c:	4620      	mov	r0, r4
   3588e:	f7ff fda5 	bl	353dc <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   35892:	89a1      	ldrh	r1, [r4, #12]
   35894:	9b03      	ldr	r3, [sp, #12]
   35896:	4419      	add	r1, r3
   35898:	1b49      	subs	r1, r1, r5
   3589a:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   3589c:	aa08      	add	r2, sp, #32
   3589e:	4620      	mov	r0, r4
   358a0:	f7ff fd8b 	bl	353ba <nvs_flash_ate_rd>
	if (rc < 0) {
   358a4:	1e03      	subs	r3, r0, #0
   358a6:	db14      	blt.n	358d2 <nvs_gc+0x68>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   358a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   358aa:	7919      	ldrb	r1, [r3, #4]
   358ac:	a808      	add	r0, sp, #32
   358ae:	f7ff fd89 	bl	353c4 <nvs_ate_cmp_const>
	if (!rc) {
   358b2:	b9a0      	cbnz	r0, 358de <nvs_gc+0x74>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   358b4:	6863      	ldr	r3, [r4, #4]
   358b6:	68a2      	ldr	r2, [r4, #8]
   358b8:	4415      	add	r5, r2
   358ba:	42ab      	cmp	r3, r5
   358bc:	d304      	bcc.n	358c8 <nvs_gc+0x5e>
		rc = nvs_add_gc_done_ate(fs);
   358be:	4620      	mov	r0, r4
   358c0:	f7ff ffbd 	bl	3583e <nvs_add_gc_done_ate>
		if (rc) {
   358c4:	4603      	mov	r3, r0
   358c6:	b920      	cbnz	r0, 358d2 <nvs_gc+0x68>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   358c8:	9903      	ldr	r1, [sp, #12]
   358ca:	4620      	mov	r0, r4
   358cc:	f7ff fde4 	bl	35498 <nvs_flash_erase_sector>
   358d0:	4603      	mov	r3, r0
}
   358d2:	4618      	mov	r0, r3
   358d4:	b00a      	add	sp, #40	; 0x28
   358d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return len;
   358da:	2508      	movs	r5, #8
   358dc:	e7d2      	b.n	35884 <nvs_gc+0x1a>
	stop_addr = gc_addr - ate_size;
   358de:	9b02      	ldr	r3, [sp, #8]
   358e0:	eba3 0805 	sub.w	r8, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   358e4:	a908      	add	r1, sp, #32
   358e6:	4620      	mov	r0, r4
   358e8:	f7ff fe6d 	bl	355c6 <nvs_close_ate_valid>
   358ec:	b138      	cbz	r0, 358fe <nvs_gc+0x94>
		gc_addr &= ADDR_SECT_MASK;
   358ee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
		gc_addr += close_ate.offset;
   358f2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   358f6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   358fa:	9302      	str	r3, [sp, #8]
   358fc:	e023      	b.n	35946 <nvs_gc+0xdc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   358fe:	a902      	add	r1, sp, #8
   35900:	4620      	mov	r0, r4
   35902:	f7ff fe28 	bl	35556 <nvs_recover_last_ate>
		if (rc) {
   35906:	4603      	mov	r3, r0
   35908:	b1e8      	cbz	r0, 35946 <nvs_gc+0xdc>
   3590a:	e7e2      	b.n	358d2 <nvs_gc+0x68>
		} while (wlk_addr != fs->ate_wra);
   3590c:	6862      	ldr	r2, [r4, #4]
   3590e:	9b01      	ldr	r3, [sp, #4]
   35910:	429a      	cmp	r2, r3
   35912:	d014      	beq.n	3593e <nvs_gc+0xd4>
			wlk_prev_addr = wlk_addr;
   35914:	9e01      	ldr	r6, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   35916:	aa04      	add	r2, sp, #16
   35918:	a901      	add	r1, sp, #4
   3591a:	4620      	mov	r0, r4
   3591c:	f7ff fe7b 	bl	35616 <nvs_prev_ate>
			if (rc) {
   35920:	4603      	mov	r3, r0
   35922:	2800      	cmp	r0, #0
   35924:	d1d5      	bne.n	358d2 <nvs_gc+0x68>
			if ((wlk_ate.id == gc_ate.id) &&
   35926:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   3592a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   3592e:	429a      	cmp	r2, r3
   35930:	d1ec      	bne.n	3590c <nvs_gc+0xa2>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   35932:	a904      	add	r1, sp, #16
   35934:	4620      	mov	r0, r4
   35936:	f7ff fdf2 	bl	3551e <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   3593a:	2800      	cmp	r0, #0
   3593c:	d0e6      	beq.n	3590c <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   3593e:	42be      	cmp	r6, r7
   35940:	d013      	beq.n	3596a <nvs_gc+0x100>
	} while (gc_prev_addr != stop_addr);
   35942:	4547      	cmp	r7, r8
   35944:	d0b6      	beq.n	358b4 <nvs_gc+0x4a>
		gc_prev_addr = gc_addr;
   35946:	9f02      	ldr	r7, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   35948:	aa06      	add	r2, sp, #24
   3594a:	a902      	add	r1, sp, #8
   3594c:	4620      	mov	r0, r4
   3594e:	f7ff fe62 	bl	35616 <nvs_prev_ate>
		if (rc) {
   35952:	4603      	mov	r3, r0
   35954:	2800      	cmp	r0, #0
   35956:	d1bc      	bne.n	358d2 <nvs_gc+0x68>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   35958:	a906      	add	r1, sp, #24
   3595a:	4620      	mov	r0, r4
   3595c:	f7ff fddf 	bl	3551e <nvs_ate_valid>
   35960:	2800      	cmp	r0, #0
   35962:	d0ee      	beq.n	35942 <nvs_gc+0xd8>
		wlk_addr = fs->ate_wra;
   35964:	6863      	ldr	r3, [r4, #4]
   35966:	9301      	str	r3, [sp, #4]
   35968:	e7d4      	b.n	35914 <nvs_gc+0xaa>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   3596a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   3596e:	2b00      	cmp	r3, #0
   35970:	d0e7      	beq.n	35942 <nvs_gc+0xd8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   35972:	0c3b      	lsrs	r3, r7, #16
   35974:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   35976:	f8bd 601a 	ldrh.w	r6, [sp, #26]
   3597a:	441e      	add	r6, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   3597c:	8923      	ldrh	r3, [r4, #8]
   3597e:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   35982:	a806      	add	r0, sp, #24
   35984:	f7ff fe93 	bl	356ae <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   35988:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   3598c:	4631      	mov	r1, r6
   3598e:	4620      	mov	r0, r4
   35990:	f7ff ff15 	bl	357be <nvs_flash_block_move>
			if (rc) {
   35994:	4603      	mov	r3, r0
   35996:	2800      	cmp	r0, #0
   35998:	d19b      	bne.n	358d2 <nvs_gc+0x68>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   3599a:	a906      	add	r1, sp, #24
   3599c:	4620      	mov	r0, r4
   3599e:	f7ff ff38 	bl	35812 <nvs_flash_ate_wrt>
			if (rc) {
   359a2:	4603      	mov	r3, r0
   359a4:	2800      	cmp	r0, #0
   359a6:	d0cc      	beq.n	35942 <nvs_gc+0xd8>
   359a8:	e793      	b.n	358d2 <nvs_gc+0x68>

000359aa <nvs_flash_wrt_entry>:
{
   359aa:	b570      	push	{r4, r5, r6, lr}
   359ac:	b082      	sub	sp, #8
   359ae:	4604      	mov	r4, r0
   359b0:	4616      	mov	r6, r2
   359b2:	461d      	mov	r5, r3
	entry.id = id;
   359b4:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   359b8:	8903      	ldrh	r3, [r0, #8]
   359ba:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   359be:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   359c2:	23ff      	movs	r3, #255	; 0xff
   359c4:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   359c8:	4668      	mov	r0, sp
   359ca:	f7ff fe70 	bl	356ae <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   359ce:	462a      	mov	r2, r5
   359d0:	4631      	mov	r1, r6
   359d2:	4620      	mov	r0, r4
   359d4:	f7ff fede 	bl	35794 <nvs_flash_data_wrt>
	if (rc) {
   359d8:	b108      	cbz	r0, 359de <nvs_flash_wrt_entry+0x34>
}
   359da:	b002      	add	sp, #8
   359dc:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   359de:	4669      	mov	r1, sp
   359e0:	4620      	mov	r0, r4
   359e2:	f7ff ff16 	bl	35812 <nvs_flash_ate_wrt>
	if (rc) {
   359e6:	e7f8      	b.n	359da <nvs_flash_wrt_entry+0x30>

000359e8 <nvs_sector_close>:
{
   359e8:	b530      	push	{r4, r5, lr}
   359ea:	b083      	sub	sp, #12
   359ec:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   359ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   359f0:	681b      	ldr	r3, [r3, #0]
   359f2:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   359f4:	2a01      	cmp	r2, #1
   359f6:	d925      	bls.n	35a44 <nvs_sector_close+0x5c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   359f8:	4613      	mov	r3, r2
   359fa:	3207      	adds	r2, #7
   359fc:	425b      	negs	r3, r3
   359fe:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   35a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   35a04:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   35a08:	2500      	movs	r5, #0
   35a0a:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   35a0e:	6863      	ldr	r3, [r4, #4]
   35a10:	1899      	adds	r1, r3, r2
   35a12:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   35a16:	0c1b      	lsrs	r3, r3, #16
   35a18:	041b      	lsls	r3, r3, #16
	fs->ate_wra += (fs->sector_size - ate_size);
   35a1a:	89a1      	ldrh	r1, [r4, #12]
   35a1c:	1a8a      	subs	r2, r1, r2
   35a1e:	4413      	add	r3, r2
   35a20:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   35a22:	4668      	mov	r0, sp
   35a24:	f7ff fe43 	bl	356ae <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   35a28:	4669      	mov	r1, sp
   35a2a:	4620      	mov	r0, r4
   35a2c:	f7ff fef1 	bl	35812 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   35a30:	1d21      	adds	r1, r4, #4
   35a32:	4620      	mov	r0, r4
   35a34:	f7ff fcd2 	bl	353dc <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   35a38:	88e3      	ldrh	r3, [r4, #6]
   35a3a:	041b      	lsls	r3, r3, #16
   35a3c:	60a3      	str	r3, [r4, #8]
}
   35a3e:	4628      	mov	r0, r5
   35a40:	b003      	add	sp, #12
   35a42:	bd30      	pop	{r4, r5, pc}
		return len;
   35a44:	2208      	movs	r2, #8
   35a46:	e7db      	b.n	35a00 <nvs_sector_close+0x18>

00035a48 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   35a48:	b510      	push	{r4, lr}
   35a4a:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   35a4c:	2400      	movs	r4, #0
   35a4e:	9400      	str	r4, [sp, #0]
   35a50:	f7eb fb62 	bl	21118 <nvs_read_hist>
	return rc;
}
   35a54:	b002      	add	sp, #8
   35a56:	bd10      	pop	{r4, pc}

00035a58 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   35a58:	2200      	movs	r2, #0
   35a5a:	6002      	str	r2, [r0, #0]
   35a5c:	6042      	str	r2, [r0, #4]
   35a5e:	6082      	str	r2, [r0, #8]
}
   35a60:	4770      	bx	lr

00035a62 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   35a62:	428b      	cmp	r3, r1
   35a64:	d901      	bls.n	35a6a <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   35a66:	2000      	movs	r0, #0
	}
}
   35a68:	4770      	bx	lr
{
   35a6a:	b538      	push	{r3, r4, r5, lr}
   35a6c:	4615      	mov	r5, r2
   35a6e:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   35a70:	461a      	mov	r2, r3
   35a72:	4629      	mov	r1, r5
   35a74:	f001 f976 	bl	36d64 <memcpy>
		return from_len;
   35a78:	4620      	mov	r0, r4
}
   35a7a:	bd38      	pop	{r3, r4, r5, pc}

00035a7c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   35a7c:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   35a7e:	f001 f995 	bl	36dac <memset>
}
   35a82:	bd08      	pop	{r3, pc}

00035a84 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   35a84:	09c3      	lsrs	r3, r0, #7
   35a86:	005a      	lsls	r2, r3, #1
   35a88:	4413      	add	r3, r2
   35a8a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   35a8e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   35a92:	b2c0      	uxtb	r0, r0
   35a94:	4770      	bx	lr

00035a96 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   35a96:	b5f0      	push	{r4, r5, r6, r7, lr}
   35a98:	b0a9      	sub	sp, #164	; 0xa4
   35a9a:	4606      	mov	r6, r0
   35a9c:	460f      	mov	r7, r1
   35a9e:	4614      	mov	r4, r2
	uECC_word_t _random[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];
	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t tries;

	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   35aa0:	2500      	movs	r5, #0
   35aa2:	e00f      	b.n	35ac4 <uECC_make_key+0x2e>
		/* Generating _private uniformly at random: */
		uECC_RNG_Function rng_function = uECC_get_rng();
		if (!rng_function ||
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
   35aa4:	2000      	movs	r0, #0

      			return 1;
    		}
  	}
	return 0;
}
   35aa6:	b029      	add	sp, #164	; 0xa4
   35aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   35aaa:	f343 1347 	sbfx	r3, r3, #5, #8
   35aae:	a918      	add	r1, sp, #96	; 0x60
   35ab0:	a810      	add	r0, sp, #64	; 0x40
   35ab2:	f000 fa44 	bl	35f3e <uECC_vli_mmod>
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   35ab6:	4622      	mov	r2, r4
   35ab8:	a910      	add	r1, sp, #64	; 0x40
   35aba:	4668      	mov	r0, sp
   35abc:	f000 fe9f 	bl	367fe <EccPoint_compute_public_key>
   35ac0:	b9a0      	cbnz	r0, 35aec <uECC_make_key+0x56>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   35ac2:	3501      	adds	r5, #1
   35ac4:	2d3f      	cmp	r5, #63	; 0x3f
   35ac6:	d835      	bhi.n	35b34 <uECC_make_key+0x9e>
		uECC_RNG_Function rng_function = uECC_get_rng();
   35ac8:	f7eb fcca 	bl	21460 <uECC_get_rng>
		if (!rng_function ||
   35acc:	4603      	mov	r3, r0
   35ace:	2800      	cmp	r0, #0
   35ad0:	d0e8      	beq.n	35aa4 <uECC_make_key+0xe>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   35ad2:	2140      	movs	r1, #64	; 0x40
   35ad4:	a818      	add	r0, sp, #96	; 0x60
   35ad6:	4798      	blx	r3
		if (!rng_function ||
   35ad8:	2800      	cmp	r0, #0
   35ada:	d0e3      	beq.n	35aa4 <uECC_make_key+0xe>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   35adc:	f104 0224 	add.w	r2, r4, #36	; 0x24
   35ae0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   35ae4:	331f      	adds	r3, #31
   35ae6:	d5e0      	bpl.n	35aaa <uECC_make_key+0x14>
   35ae8:	331f      	adds	r3, #31
   35aea:	e7de      	b.n	35aaa <uECC_make_key+0x14>
					       BITS_TO_BYTES(curve->num_n_bits),
   35aec:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   35af0:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
   35af2:	4619      	mov	r1, r3
   35af4:	2b00      	cmp	r3, #0
   35af6:	db1b      	blt.n	35b30 <uECC_make_key+0x9a>
   35af8:	aa10      	add	r2, sp, #64	; 0x40
   35afa:	10c9      	asrs	r1, r1, #3
   35afc:	4638      	mov	r0, r7
   35afe:	f000 fea8 	bl	36852 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key,
   35b02:	466a      	mov	r2, sp
   35b04:	f994 1001 	ldrsb.w	r1, [r4, #1]
   35b08:	4630      	mov	r0, r6
   35b0a:	f000 fea2 	bl	36852 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   35b0e:	f994 1001 	ldrsb.w	r1, [r4, #1]
					       _public + curve->num_words);
   35b12:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   35b16:	eb0d 0282 	add.w	r2, sp, r2, lsl #2
   35b1a:	1870      	adds	r0, r6, r1
   35b1c:	f000 fe99 	bl	36852 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   35b20:	ac10      	add	r4, sp, #64	; 0x40
   35b22:	2220      	movs	r2, #32
   35b24:	2100      	movs	r1, #0
   35b26:	4620      	mov	r0, r4
   35b28:	f001 f940 	bl	36dac <memset>
      			return 1;
   35b2c:	2001      	movs	r0, #1
   35b2e:	e7ba      	b.n	35aa6 <uECC_make_key+0x10>
			uECC_vli_nativeToBytes(private_key,
   35b30:	1dd9      	adds	r1, r3, #7
   35b32:	e7e1      	b.n	35af8 <uECC_make_key+0x62>
	return 0;
   35b34:	2000      	movs	r0, #0
   35b36:	e7b6      	b.n	35aa6 <uECC_make_key+0x10>

00035b38 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   35b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35b3c:	b0a5      	sub	sp, #148	; 0x94
   35b3e:	4606      	mov	r6, r0
   35b40:	4690      	mov	r8, r2
   35b42:	461c      	mov	r4, r3

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];

	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
   35b44:	ab0c      	add	r3, sp, #48	; 0x30
   35b46:	9302      	str	r3, [sp, #8]
   35b48:	ab04      	add	r3, sp, #16
   35b4a:	9303      	str	r3, [sp, #12]
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   35b4c:	f994 9000 	ldrsb.w	r9, [r4]
	wordcount_t num_bytes = curve->num_bytes;
   35b50:	f994 7001 	ldrsb.w	r7, [r4, #1]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   35b54:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
	uECC_vli_bytesToNative(_private,
   35b58:	3207      	adds	r2, #7
   35b5a:	d44a      	bmi.n	35bf2 <uECC_shared_secret+0xba>
   35b5c:	ad0c      	add	r5, sp, #48	; 0x30
   35b5e:	10d2      	asrs	r2, r2, #3
   35b60:	4628      	mov	r0, r5
   35b62:	f000 fe8a 	bl	3687a <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   35b66:	463a      	mov	r2, r7
   35b68:	4631      	mov	r1, r6
   35b6a:	a814      	add	r0, sp, #80	; 0x50
   35b6c:	f000 fe85 	bl	3687a <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   35b70:	463a      	mov	r2, r7
   35b72:	19f1      	adds	r1, r6, r7
   35b74:	ab14      	add	r3, sp, #80	; 0x50
   35b76:	eb03 0089 	add.w	r0, r3, r9, lsl #2
   35b7a:	f000 fe7e 	bl	3687a <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   35b7e:	ae04      	add	r6, sp, #16
   35b80:	4623      	mov	r3, r4
   35b82:	4632      	mov	r2, r6
   35b84:	4629      	mov	r1, r5
   35b86:	4628      	mov	r0, r5
   35b88:	f000 fe07 	bl	3679a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   35b8c:	fab0 f080 	clz	r0, r0
   35b90:	0940      	lsrs	r0, r0, #5
   35b92:	ab24      	add	r3, sp, #144	; 0x90
   35b94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   35b98:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   35b9c:	9401      	str	r4, [sp, #4]
   35b9e:	3301      	adds	r3, #1
   35ba0:	b21b      	sxth	r3, r3
   35ba2:	9300      	str	r3, [sp, #0]
   35ba4:	2300      	movs	r3, #0
   35ba6:	f850 2c88 	ldr.w	r2, [r0, #-136]
   35baa:	a914      	add	r1, sp, #80	; 0x50
   35bac:	4608      	mov	r0, r1
   35bae:	f000 fd3e 	bl	3662e <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   35bb2:	aa14      	add	r2, sp, #80	; 0x50
   35bb4:	4639      	mov	r1, r7
   35bb6:	4640      	mov	r0, r8
   35bb8:	f000 fe4b 	bl	36852 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   35bbc:	4621      	mov	r1, r4
   35bbe:	a814      	add	r0, sp, #80	; 0x50
   35bc0:	f000 fc70 	bl	364a4 <EccPoint_isZero>
   35bc4:	fab0 f480 	clz	r4, r0
   35bc8:	0964      	lsrs	r4, r4, #5
   35bca:	af02      	add	r7, sp, #8
   35bcc:	2208      	movs	r2, #8
   35bce:	2100      	movs	r1, #0
   35bd0:	4638      	mov	r0, r7
   35bd2:	f001 f8eb 	bl	36dac <memset>
   35bd6:	2220      	movs	r2, #32
   35bd8:	2100      	movs	r1, #0
   35bda:	4630      	mov	r0, r6
   35bdc:	f001 f8e6 	bl	36dac <memset>
   35be0:	2220      	movs	r2, #32
   35be2:	2100      	movs	r1, #0
   35be4:	4628      	mov	r0, r5
   35be6:	f001 f8e1 	bl	36dac <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   35bea:	4620      	mov	r0, r4
   35bec:	b025      	add	sp, #148	; 0x94
   35bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uECC_vli_bytesToNative(_private,
   35bf2:	3207      	adds	r2, #7
   35bf4:	e7b2      	b.n	35b5c <uECC_shared_secret+0x24>

00035bf6 <vli_numDigits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   35bf6:	3901      	subs	r1, #1
   35bf8:	b249      	sxtb	r1, r1
   35bfa:	2900      	cmp	r1, #0
   35bfc:	db05      	blt.n	35c0a <vli_numDigits+0x14>
   35bfe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   35c02:	b913      	cbnz	r3, 35c0a <vli_numDigits+0x14>
   35c04:	3901      	subs	r1, #1
   35c06:	b249      	sxtb	r1, r1
   35c08:	e7f7      	b.n	35bfa <vli_numDigits+0x4>
	return (i + 1);
   35c0a:	1c48      	adds	r0, r1, #1
}
   35c0c:	b240      	sxtb	r0, r0
   35c0e:	4770      	bx	lr

00035c10 <uECC_vli_rshift1>:
{
   35c10:	b410      	push	{r4}
	vli += num_words;
   35c12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   35c16:	2300      	movs	r3, #0
	while (vli-- > end) {
   35c18:	1f0c      	subs	r4, r1, #4
   35c1a:	4281      	cmp	r1, r0
   35c1c:	d908      	bls.n	35c30 <uECC_vli_rshift1+0x20>
		uECC_word_t temp = *vli;
   35c1e:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
   35c22:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   35c26:	f841 3c04 	str.w	r3, [r1, #-4]
		carry = temp << (uECC_WORD_BITS - 1);
   35c2a:	07d3      	lsls	r3, r2, #31
	while (vli-- > end) {
   35c2c:	4621      	mov	r1, r4
   35c2e:	e7f3      	b.n	35c18 <uECC_vli_rshift1+0x8>
}
   35c30:	bc10      	pop	{r4}
   35c32:	4770      	bx	lr

00035c34 <muladd>:
{
   35c34:	b4f0      	push	{r4, r5, r6, r7}
   35c36:	9f04      	ldr	r7, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   35c38:	fba0 0101 	umull	r0, r1, r0, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   35c3c:	6816      	ldr	r6, [r2, #0]
   35c3e:	f8d3 c000 	ldr.w	ip, [r3]
	r01 += p;
   35c42:	1984      	adds	r4, r0, r6
   35c44:	eb41 050c 	adc.w	r5, r1, ip
	*r2 += (r01 < p);
   35c48:	428d      	cmp	r5, r1
   35c4a:	bf08      	it	eq
   35c4c:	4284      	cmpeq	r4, r0
   35c4e:	bf34      	ite	cc
   35c50:	2001      	movcc	r0, #1
   35c52:	2000      	movcs	r0, #0
   35c54:	6839      	ldr	r1, [r7, #0]
   35c56:	4401      	add	r1, r0
   35c58:	6039      	str	r1, [r7, #0]
	*r1 = r01 >> uECC_WORD_BITS;
   35c5a:	601d      	str	r5, [r3, #0]
	*r0 = (uECC_word_t)r01;
   35c5c:	6014      	str	r4, [r2, #0]
}
   35c5e:	bcf0      	pop	{r4, r5, r6, r7}
   35c60:	4770      	bx	lr

00035c62 <uECC_vli_mult>:
{
   35c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35c66:	b086      	sub	sp, #24
   35c68:	4681      	mov	r9, r0
   35c6a:	460e      	mov	r6, r1
   35c6c:	4617      	mov	r7, r2
   35c6e:	4698      	mov	r8, r3
	uECC_word_t r0 = 0;
   35c70:	2500      	movs	r5, #0
   35c72:	9505      	str	r5, [sp, #20]
	uECC_word_t r1 = 0;
   35c74:	9504      	str	r5, [sp, #16]
	uECC_word_t r2 = 0;
   35c76:	9503      	str	r5, [sp, #12]
	for (k = 0; k < num_words; ++k) {
   35c78:	e00a      	b.n	35c90 <uECC_vli_mult+0x2e>
		result[k] = r0;
   35c7a:	9b05      	ldr	r3, [sp, #20]
   35c7c:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
		r0 = r1;
   35c80:	9b04      	ldr	r3, [sp, #16]
   35c82:	9305      	str	r3, [sp, #20]
		r1 = r2;
   35c84:	9b03      	ldr	r3, [sp, #12]
   35c86:	9304      	str	r3, [sp, #16]
		r2 = 0;
   35c88:	2300      	movs	r3, #0
   35c8a:	9303      	str	r3, [sp, #12]
	for (k = 0; k < num_words; ++k) {
   35c8c:	3501      	adds	r5, #1
   35c8e:	b26d      	sxtb	r5, r5
   35c90:	4545      	cmp	r5, r8
   35c92:	da10      	bge.n	35cb6 <uECC_vli_mult+0x54>
		for (i = 0; i <= k; ++i) {
   35c94:	2400      	movs	r4, #0
   35c96:	42ac      	cmp	r4, r5
   35c98:	dcef      	bgt.n	35c7a <uECC_vli_mult+0x18>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   35c9a:	1b29      	subs	r1, r5, r4
   35c9c:	ab03      	add	r3, sp, #12
   35c9e:	9300      	str	r3, [sp, #0]
   35ca0:	ab04      	add	r3, sp, #16
   35ca2:	aa05      	add	r2, sp, #20
   35ca4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   35ca8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   35cac:	f7ff ffc2 	bl	35c34 <muladd>
		for (i = 0; i <= k; ++i) {
   35cb0:	3401      	adds	r4, #1
   35cb2:	b264      	sxtb	r4, r4
   35cb4:	e7ef      	b.n	35c96 <uECC_vli_mult+0x34>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   35cb6:	46c2      	mov	sl, r8
   35cb8:	e01b      	b.n	35cf2 <uECC_vli_mult+0x90>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   35cba:	1b29      	subs	r1, r5, r4
   35cbc:	ab03      	add	r3, sp, #12
   35cbe:	9300      	str	r3, [sp, #0]
   35cc0:	ab04      	add	r3, sp, #16
   35cc2:	aa05      	add	r2, sp, #20
   35cc4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   35cc8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   35ccc:	f7ff ffb2 	bl	35c34 <muladd>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   35cd0:	3401      	adds	r4, #1
   35cd2:	b264      	sxtb	r4, r4
   35cd4:	4544      	cmp	r4, r8
   35cd6:	dbf0      	blt.n	35cba <uECC_vli_mult+0x58>
		result[k] = r0;
   35cd8:	9b05      	ldr	r3, [sp, #20]
   35cda:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
		r0 = r1;
   35cde:	9b04      	ldr	r3, [sp, #16]
   35ce0:	9305      	str	r3, [sp, #20]
		r1 = r2;
   35ce2:	9b03      	ldr	r3, [sp, #12]
   35ce4:	9304      	str	r3, [sp, #16]
		r2 = 0;
   35ce6:	2300      	movs	r3, #0
   35ce8:	9303      	str	r3, [sp, #12]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   35cea:	f10a 0a01 	add.w	sl, sl, #1
   35cee:	fa4f fa8a 	sxtb.w	sl, sl
   35cf2:	4655      	mov	r5, sl
   35cf4:	4642      	mov	r2, r8
   35cf6:	ea4f 0348 	mov.w	r3, r8, lsl #1
   35cfa:	3b01      	subs	r3, #1
   35cfc:	459a      	cmp	sl, r3
   35cfe:	da05      	bge.n	35d0c <uECC_vli_mult+0xaa>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   35d00:	ebaa 0408 	sub.w	r4, sl, r8
   35d04:	b264      	sxtb	r4, r4
   35d06:	3401      	adds	r4, #1
   35d08:	b264      	sxtb	r4, r4
   35d0a:	e7e3      	b.n	35cd4 <uECC_vli_mult+0x72>
	result[num_words * 2 - 1] = r0;
   35d0c:	00d3      	lsls	r3, r2, #3
   35d0e:	3b04      	subs	r3, #4
   35d10:	9a05      	ldr	r2, [sp, #20]
   35d12:	f849 2003 	str.w	r2, [r9, r3]
}
   35d16:	b006      	add	sp, #24
   35d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00035d1c <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   35d1c:	2300      	movs	r3, #0
   35d1e:	428b      	cmp	r3, r1
   35d20:	da05      	bge.n	35d2e <uECC_vli_clear+0x12>
		 vli[i] = 0;
   35d22:	2200      	movs	r2, #0
   35d24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   35d28:	3301      	adds	r3, #1
   35d2a:	b25b      	sxtb	r3, r3
   35d2c:	e7f7      	b.n	35d1e <uECC_vli_clear+0x2>
}
   35d2e:	4770      	bx	lr

00035d30 <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   35d30:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   35d32:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   35d34:	428b      	cmp	r3, r1
   35d36:	da0c      	bge.n	35d52 <uECC_vli_isZero+0x22>
{
   35d38:	b410      	push	{r4}
		bits |= vli[i];
   35d3a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   35d3e:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   35d40:	3301      	adds	r3, #1
   35d42:	b25b      	sxtb	r3, r3
   35d44:	428b      	cmp	r3, r1
   35d46:	dbf8      	blt.n	35d3a <uECC_vli_isZero+0xa>
}
   35d48:	fab2 f082 	clz	r0, r2
   35d4c:	0940      	lsrs	r0, r0, #5
   35d4e:	bc10      	pop	{r4}
   35d50:	4770      	bx	lr
   35d52:	fab3 f083 	clz	r0, r3
   35d56:	0940      	lsrs	r0, r0, #5
   35d58:	4770      	bx	lr

00035d5a <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   35d5a:	114b      	asrs	r3, r1, #5
   35d5c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   35d60:	f001 011f 	and.w	r1, r1, #31
   35d64:	2301      	movs	r3, #1
   35d66:	fa03 f101 	lsl.w	r1, r3, r1
}
   35d6a:	4008      	ands	r0, r1
   35d6c:	4770      	bx	lr

00035d6e <uECC_vli_numBits>:
{
   35d6e:	b510      	push	{r4, lr}
   35d70:	4604      	mov	r4, r0
	wordcount_t num_digits = vli_numDigits(vli, max_words);
   35d72:	f7ff ff40 	bl	35bf6 <vli_numDigits>
	if (num_digits == 0) {
   35d76:	b188      	cbz	r0, 35d9c <uECC_vli_numBits+0x2e>
   35d78:	4602      	mov	r2, r0
	digit = vli[num_digits - 1];
   35d7a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   35d7e:	3b01      	subs	r3, #1
   35d80:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	for (i = 0; digit; ++i) {
   35d84:	2000      	movs	r0, #0
   35d86:	b113      	cbz	r3, 35d8e <uECC_vli_numBits+0x20>
		digit >>= 1;
   35d88:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   35d8a:	3001      	adds	r0, #1
   35d8c:	e7fb      	b.n	35d86 <uECC_vli_numBits+0x18>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   35d8e:	1e53      	subs	r3, r2, #1
   35d90:	b29b      	uxth	r3, r3
   35d92:	015b      	lsls	r3, r3, #5
   35d94:	b29b      	uxth	r3, r3
   35d96:	4418      	add	r0, r3
   35d98:	b200      	sxth	r0, r0
}
   35d9a:	bd10      	pop	{r4, pc}
		return 0;
   35d9c:	2000      	movs	r0, #0
   35d9e:	e7fc      	b.n	35d9a <uECC_vli_numBits+0x2c>

00035da0 <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   35da0:	2300      	movs	r3, #0
   35da2:	4293      	cmp	r3, r2
   35da4:	da0a      	bge.n	35dbc <uECC_vli_set+0x1c>
{
   35da6:	b410      	push	{r4}
		dest[i] = src[i];
   35da8:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   35dac:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   35db0:	3301      	adds	r3, #1
   35db2:	b25b      	sxtb	r3, r3
   35db4:	4293      	cmp	r3, r2
   35db6:	dbf7      	blt.n	35da8 <uECC_vli_set+0x8>
}
   35db8:	bc10      	pop	{r4}
   35dba:	4770      	bx	lr
   35dbc:	4770      	bx	lr

00035dbe <uECC_vli_cmp_unsafe>:
	for (i = num_words - 1; i >= 0; --i) {
   35dbe:	3a01      	subs	r2, #1
   35dc0:	b252      	sxtb	r2, r2
   35dc2:	2a00      	cmp	r2, #0
   35dc4:	db13      	blt.n	35dee <uECC_vli_cmp_unsafe+0x30>
{
   35dc6:	b410      	push	{r4}
		if (left[i] > right[i]) {
   35dc8:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   35dcc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   35dd0:	429c      	cmp	r4, r3
   35dd2:	d807      	bhi.n	35de4 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   35dd4:	d308      	bcc.n	35de8 <uECC_vli_cmp_unsafe+0x2a>
	for (i = num_words - 1; i >= 0; --i) {
   35dd6:	3a01      	subs	r2, #1
   35dd8:	b252      	sxtb	r2, r2
   35dda:	2a00      	cmp	r2, #0
   35ddc:	daf4      	bge.n	35dc8 <uECC_vli_cmp_unsafe+0xa>
	return 0;
   35dde:	2000      	movs	r0, #0
}
   35de0:	bc10      	pop	{r4}
   35de2:	4770      	bx	lr
			return 1;
   35de4:	2001      	movs	r0, #1
   35de6:	e7fb      	b.n	35de0 <uECC_vli_cmp_unsafe+0x22>
			return -1;
   35de8:	f04f 30ff 	mov.w	r0, #4294967295
   35dec:	e7f8      	b.n	35de0 <uECC_vli_cmp_unsafe+0x22>
	return 0;
   35dee:	2000      	movs	r0, #0
}
   35df0:	4770      	bx	lr

00035df2 <uECC_vli_equal>:
{
   35df2:	b430      	push	{r4, r5}
	for (i = num_words - 1; i >= 0; --i) {
   35df4:	3a01      	subs	r2, #1
   35df6:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   35df8:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   35dfa:	2a00      	cmp	r2, #0
   35dfc:	db08      	blt.n	35e10 <uECC_vli_equal+0x1e>
		diff |= (left[i] ^ right[i]);
   35dfe:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   35e02:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   35e06:	406b      	eors	r3, r5
   35e08:	431c      	orrs	r4, r3
	for (i = num_words - 1; i >= 0; --i) {
   35e0a:	3a01      	subs	r2, #1
   35e0c:	b252      	sxtb	r2, r2
   35e0e:	e7f4      	b.n	35dfa <uECC_vli_equal+0x8>
}
   35e10:	1e20      	subs	r0, r4, #0
   35e12:	bf18      	it	ne
   35e14:	2001      	movne	r0, #1
   35e16:	bc30      	pop	{r4, r5}
   35e18:	4770      	bx	lr

00035e1a <cond_set>:
	return (p_true*(cond)) | (p_false*(!cond));
   35e1a:	fb02 f000 	mul.w	r0, r2, r0
   35e1e:	2a00      	cmp	r2, #0
   35e20:	bf0c      	ite	eq
   35e22:	460a      	moveq	r2, r1
   35e24:	2200      	movne	r2, #0
}
   35e26:	4310      	orrs	r0, r2
   35e28:	4770      	bx	lr

00035e2a <uECC_vli_add>:
{
   35e2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35e2e:	4681      	mov	r9, r0
   35e30:	4688      	mov	r8, r1
   35e32:	4617      	mov	r7, r2
   35e34:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   35e36:	2400      	movs	r4, #0
	uECC_word_t carry = 0;
   35e38:	4621      	mov	r1, r4
	for (i = 0; i < num_words; ++i) {
   35e3a:	42b4      	cmp	r4, r6
   35e3c:	da14      	bge.n	35e68 <uECC_vli_add+0x3e>
		uECC_word_t sum = left[i] + right[i] + carry;
   35e3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   35e42:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   35e46:	441d      	add	r5, r3
   35e48:	440d      	add	r5, r1
		uECC_word_t val = (sum < left[i]);
   35e4a:	42ab      	cmp	r3, r5
		carry = cond_set(val, carry, (sum != left[i]));
   35e4c:	bf14      	ite	ne
   35e4e:	2201      	movne	r2, #1
   35e50:	2200      	moveq	r2, #0
   35e52:	bf8c      	ite	hi
   35e54:	2001      	movhi	r0, #1
   35e56:	2000      	movls	r0, #0
   35e58:	f7ff ffdf 	bl	35e1a <cond_set>
   35e5c:	4601      	mov	r1, r0
		result[i] = sum;
   35e5e:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   35e62:	3401      	adds	r4, #1
   35e64:	b264      	sxtb	r4, r4
   35e66:	e7e8      	b.n	35e3a <uECC_vli_add+0x10>
}
   35e68:	4608      	mov	r0, r1
   35e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00035e6e <vli_modInv_update>:
{
   35e6e:	b570      	push	{r4, r5, r6, lr}
   35e70:	4605      	mov	r5, r0
   35e72:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   35e74:	6800      	ldr	r0, [r0, #0]
   35e76:	f010 0601 	ands.w	r6, r0, #1
   35e7a:	d10e      	bne.n	35e9a <vli_modInv_update+0x2c>
	uECC_vli_rshift1(uv, num_words);
   35e7c:	4621      	mov	r1, r4
   35e7e:	4628      	mov	r0, r5
   35e80:	f7ff fec6 	bl	35c10 <uECC_vli_rshift1>
	if (carry) {
   35e84:	b146      	cbz	r6, 35e98 <vli_modInv_update+0x2a>
		uv[num_words - 1] |= HIGH_BIT_SET;
   35e86:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   35e8a:	3c01      	subs	r4, #1
   35e8c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   35e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   35e94:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   35e98:	bd70      	pop	{r4, r5, r6, pc}
		carry = uECC_vli_add(uv, uv, mod, num_words);
   35e9a:	4613      	mov	r3, r2
   35e9c:	460a      	mov	r2, r1
   35e9e:	4629      	mov	r1, r5
   35ea0:	4628      	mov	r0, r5
   35ea2:	f7ff ffc2 	bl	35e2a <uECC_vli_add>
   35ea6:	4606      	mov	r6, r0
   35ea8:	e7e8      	b.n	35e7c <vli_modInv_update+0xe>

00035eaa <uECC_vli_sub>:
{
   35eaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35eae:	4681      	mov	r9, r0
   35eb0:	4688      	mov	r8, r1
   35eb2:	4617      	mov	r7, r2
   35eb4:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   35eb6:	2400      	movs	r4, #0
	uECC_word_t borrow = 0;
   35eb8:	4621      	mov	r1, r4
	for (i = 0; i < num_words; ++i) {
   35eba:	42b4      	cmp	r4, r6
   35ebc:	da14      	bge.n	35ee8 <uECC_vli_sub+0x3e>
		uECC_word_t diff = left[i] - right[i] - borrow;
   35ebe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   35ec2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   35ec6:	1b5d      	subs	r5, r3, r5
   35ec8:	1a6d      	subs	r5, r5, r1
		uECC_word_t val = (diff > left[i]);
   35eca:	42ab      	cmp	r3, r5
		borrow = cond_set(val, borrow, (diff != left[i]));
   35ecc:	bf14      	ite	ne
   35ece:	2201      	movne	r2, #1
   35ed0:	2200      	moveq	r2, #0
   35ed2:	bf34      	ite	cc
   35ed4:	2001      	movcc	r0, #1
   35ed6:	2000      	movcs	r0, #0
   35ed8:	f7ff ff9f 	bl	35e1a <cond_set>
   35edc:	4601      	mov	r1, r0
		result[i] = diff;
   35ede:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   35ee2:	3401      	adds	r4, #1
   35ee4:	b264      	sxtb	r4, r4
   35ee6:	e7e8      	b.n	35eba <uECC_vli_sub+0x10>
}
   35ee8:	4608      	mov	r0, r1
   35eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00035eee <uECC_vli_modAdd>:
{
   35eee:	b570      	push	{r4, r5, r6, lr}
   35ef0:	4604      	mov	r4, r0
   35ef2:	461d      	mov	r5, r3
   35ef4:	f99d 6010 	ldrsb.w	r6, [sp, #16]
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   35ef8:	4633      	mov	r3, r6
   35efa:	f7ff ff96 	bl	35e2a <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   35efe:	b930      	cbnz	r0, 35f0e <uECC_vli_modAdd+0x20>
   35f00:	4632      	mov	r2, r6
   35f02:	4621      	mov	r1, r4
   35f04:	4628      	mov	r0, r5
   35f06:	f7ff ff5a 	bl	35dbe <uECC_vli_cmp_unsafe>
   35f0a:	2801      	cmp	r0, #1
   35f0c:	d005      	beq.n	35f1a <uECC_vli_modAdd+0x2c>
		uECC_vli_sub(result, result, mod, num_words);
   35f0e:	4633      	mov	r3, r6
   35f10:	462a      	mov	r2, r5
   35f12:	4621      	mov	r1, r4
   35f14:	4620      	mov	r0, r4
   35f16:	f7ff ffc8 	bl	35eaa <uECC_vli_sub>
}
   35f1a:	bd70      	pop	{r4, r5, r6, pc}

00035f1c <uECC_vli_modSub>:
{
   35f1c:	b570      	push	{r4, r5, r6, lr}
   35f1e:	4604      	mov	r4, r0
   35f20:	461d      	mov	r5, r3
   35f22:	f99d 6010 	ldrsb.w	r6, [sp, #16]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   35f26:	4633      	mov	r3, r6
   35f28:	f7ff ffbf 	bl	35eaa <uECC_vli_sub>
	if (l_borrow) {
   35f2c:	b900      	cbnz	r0, 35f30 <uECC_vli_modSub+0x14>
}
   35f2e:	bd70      	pop	{r4, r5, r6, pc}
		uECC_vli_add(result, result, mod, num_words);
   35f30:	4633      	mov	r3, r6
   35f32:	462a      	mov	r2, r5
   35f34:	4621      	mov	r1, r4
   35f36:	4620      	mov	r0, r4
   35f38:	f7ff ff77 	bl	35e2a <uECC_vli_add>
}
   35f3c:	e7f7      	b.n	35f2e <uECC_vli_modSub+0x12>

00035f3e <uECC_vli_mmod>:
{
   35f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35f42:	b0a2      	sub	sp, #136	; 0x88
   35f44:	4682      	mov	sl, r0
   35f46:	4691      	mov	r9, r2
   35f48:	461c      	mov	r4, r3
	uECC_word_t *v[2] = {tmp, product};
   35f4a:	ab02      	add	r3, sp, #8
   35f4c:	9300      	str	r3, [sp, #0]
   35f4e:	9101      	str	r1, [sp, #4]
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   35f50:	01a5      	lsls	r5, r4, #6
			   uECC_vli_numBits(mod, num_words);
   35f52:	4621      	mov	r1, r4
   35f54:	4610      	mov	r0, r2
   35f56:	f7ff ff0a 	bl	35d6e <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   35f5a:	1a2d      	subs	r5, r5, r0
   35f5c:	b22e      	sxth	r6, r5
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   35f5e:	46b0      	mov	r8, r6
   35f60:	2e00      	cmp	r6, #0
   35f62:	db11      	blt.n	35f88 <uECC_vli_mmod+0x4a>
   35f64:	f348 1847 	sbfx	r8, r8, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   35f68:	4273      	negs	r3, r6
   35f6a:	f006 051f 	and.w	r5, r6, #31
   35f6e:	f003 031f 	and.w	r3, r3, #31
   35f72:	bf58      	it	pl
   35f74:	425d      	negpl	r5, r3
	uECC_vli_clear(mod_multiple, word_shift);
   35f76:	4641      	mov	r1, r8
   35f78:	a812      	add	r0, sp, #72	; 0x48
   35f7a:	f7ff fecf 	bl	35d1c <uECC_vli_clear>
	if (bit_shift > 0) {
   35f7e:	2d00      	cmp	r5, #0
   35f80:	dd1a      	ble.n	35fb8 <uECC_vli_mmod+0x7a>
	uECC_word_t carry = 0;
   35f82:	2100      	movs	r1, #0
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   35f84:	460b      	mov	r3, r1
   35f86:	e013      	b.n	35fb0 <uECC_vli_mmod+0x72>
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   35f88:	f106 081f 	add.w	r8, r6, #31
   35f8c:	e7ea      	b.n	35f64 <uECC_vli_mmod+0x26>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   35f8e:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
   35f92:	fa07 f005 	lsl.w	r0, r7, r5
   35f96:	eb08 0203 	add.w	r2, r8, r3
   35f9a:	4301      	orrs	r1, r0
   35f9c:	a822      	add	r0, sp, #136	; 0x88
   35f9e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   35fa2:	f842 1c40 	str.w	r1, [r2, #-64]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   35fa6:	f1c5 0120 	rsb	r1, r5, #32
   35faa:	fa27 f101 	lsr.w	r1, r7, r1
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   35fae:	3301      	adds	r3, #1
   35fb0:	429c      	cmp	r4, r3
   35fb2:	d8ec      	bhi.n	35f8e <uECC_vli_mmod+0x50>
		uECC_word_t borrow = 0;
   35fb4:	2501      	movs	r5, #1
   35fb6:	e04b      	b.n	36050 <uECC_vli_mmod+0x112>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   35fb8:	4622      	mov	r2, r4
   35fba:	4649      	mov	r1, r9
   35fbc:	ab12      	add	r3, sp, #72	; 0x48
   35fbe:	eb03 0088 	add.w	r0, r3, r8, lsl #2
   35fc2:	f7ff feed 	bl	35da0 <uECC_vli_set>
   35fc6:	e7f5      	b.n	35fb4 <uECC_vli_mmod+0x76>
				borrow = (diff > v[index][i]);
   35fc8:	428b      	cmp	r3, r1
   35fca:	bf2c      	ite	cs
   35fcc:	f04f 0c00 	movcs.w	ip, #0
   35fd0:	f04f 0c01 	movcc.w	ip, #1
			v[1 - index][i] = diff;
   35fd4:	f1c5 0301 	rsb	r3, r5, #1
   35fd8:	af22      	add	r7, sp, #136	; 0x88
   35fda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   35fde:	f853 3c88 	ldr.w	r3, [r3, #-136]
   35fe2:	5019      	str	r1, [r3, r0]
		for (i = 0; i < num_words * 2; ++i) {
   35fe4:	3201      	adds	r2, #1
   35fe6:	b252      	sxtb	r2, r2
   35fe8:	ebb2 0f44 	cmp.w	r2, r4, lsl #1
   35fec:	da12      	bge.n	36014 <uECC_vli_mmod+0xd6>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   35fee:	ab22      	add	r3, sp, #136	; 0x88
   35ff0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   35ff4:	f853 3c88 	ldr.w	r3, [r3, #-136]
   35ff8:	0090      	lsls	r0, r2, #2
   35ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   35ffe:	a922      	add	r1, sp, #136	; 0x88
   36000:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   36004:	f851 1c40 	ldr.w	r1, [r1, #-64]
   36008:	1a59      	subs	r1, r3, r1
   3600a:	eba1 010c 	sub.w	r1, r1, ip
			if (diff != v[index][i]) {
   3600e:	428b      	cmp	r3, r1
   36010:	d1da      	bne.n	35fc8 <uECC_vli_mmod+0x8a>
   36012:	e7df      	b.n	35fd4 <uECC_vli_mmod+0x96>
		index = !(index ^ borrow);
   36014:	4565      	cmp	r5, ip
   36016:	bf14      	ite	ne
   36018:	2500      	movne	r5, #0
   3601a:	2501      	moveq	r5, #1
		uECC_vli_rshift1(mod_multiple, num_words);
   3601c:	4621      	mov	r1, r4
   3601e:	a812      	add	r0, sp, #72	; 0x48
   36020:	f7ff fdf6 	bl	35c10 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   36024:	1e63      	subs	r3, r4, #1
   36026:	aa22      	add	r2, sp, #136	; 0x88
   36028:	eb02 0884 	add.w	r8, r2, r4, lsl #2
   3602c:	f858 1c40 	ldr.w	r1, [r8, #-64]
   36030:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   36034:	f853 2c40 	ldr.w	r2, [r3, #-64]
   36038:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   3603c:	f843 2c40 	str.w	r2, [r3, #-64]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   36040:	4621      	mov	r1, r4
   36042:	ab12      	add	r3, sp, #72	; 0x48
   36044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   36048:	f7ff fde2 	bl	35c10 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   3604c:	3e01      	subs	r6, #1
   3604e:	b236      	sxth	r6, r6
   36050:	2e00      	cmp	r6, #0
   36052:	db02      	blt.n	3605a <uECC_vli_mmod+0x11c>
		for (i = 0; i < num_words * 2; ++i) {
   36054:	2200      	movs	r2, #0
		uECC_word_t borrow = 0;
   36056:	4694      	mov	ip, r2
   36058:	e7c6      	b.n	35fe8 <uECC_vli_mmod+0xaa>
	uECC_vli_set(result, v[index], num_words);
   3605a:	ab22      	add	r3, sp, #136	; 0x88
   3605c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   36060:	4622      	mov	r2, r4
   36062:	f855 1c88 	ldr.w	r1, [r5, #-136]
   36066:	4650      	mov	r0, sl
   36068:	f7ff fe9a 	bl	35da0 <uECC_vli_set>
}
   3606c:	b022      	add	sp, #136	; 0x88
   3606e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00036072 <uECC_vli_modMult_fast>:
{
   36072:	b530      	push	{r4, r5, lr}
   36074:	b091      	sub	sp, #68	; 0x44
   36076:	4605      	mov	r5, r0
   36078:	461c      	mov	r4, r3
	uECC_vli_mult(product, left, right, curve->num_words);
   3607a:	f993 3000 	ldrsb.w	r3, [r3]
   3607e:	4668      	mov	r0, sp
   36080:	f7ff fdef 	bl	35c62 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   36084:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   36088:	4669      	mov	r1, sp
   3608a:	4628      	mov	r0, r5
   3608c:	4798      	blx	r3
}
   3608e:	b011      	add	sp, #68	; 0x44
   36090:	bd30      	pop	{r4, r5, pc}

00036092 <uECC_vli_modSquare_fast>:
{
   36092:	b508      	push	{r3, lr}
   36094:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   36096:	460a      	mov	r2, r1
   36098:	f7ff ffeb 	bl	36072 <uECC_vli_modMult_fast>
}
   3609c:	bd08      	pop	{r3, pc}

0003609e <double_jacobian_default>:
{
   3609e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   360a2:	b092      	sub	sp, #72	; 0x48
   360a4:	4605      	mov	r5, r0
   360a6:	4689      	mov	r9, r1
   360a8:	4614      	mov	r4, r2
   360aa:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   360ac:	f993 6000 	ldrsb.w	r6, [r3]
	if (uECC_vli_isZero(Z1, num_words)) {
   360b0:	4631      	mov	r1, r6
   360b2:	4610      	mov	r0, r2
   360b4:	f7ff fe3c 	bl	35d30 <uECC_vli_isZero>
   360b8:	b110      	cbz	r0, 360c0 <double_jacobian_default+0x22>
}
   360ba:	b012      	add	sp, #72	; 0x48
   360bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   360c0:	463a      	mov	r2, r7
   360c2:	4649      	mov	r1, r9
   360c4:	a80a      	add	r0, sp, #40	; 0x28
   360c6:	f7ff ffe4 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   360ca:	463b      	mov	r3, r7
   360cc:	aa0a      	add	r2, sp, #40	; 0x28
   360ce:	4629      	mov	r1, r5
   360d0:	a802      	add	r0, sp, #8
   360d2:	f7ff ffce 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   360d6:	463a      	mov	r2, r7
   360d8:	a90a      	add	r1, sp, #40	; 0x28
   360da:	4608      	mov	r0, r1
   360dc:	f7ff ffd9 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   360e0:	463b      	mov	r3, r7
   360e2:	4622      	mov	r2, r4
   360e4:	4649      	mov	r1, r9
   360e6:	4648      	mov	r0, r9
   360e8:	f7ff ffc3 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   360ec:	463a      	mov	r2, r7
   360ee:	4621      	mov	r1, r4
   360f0:	4620      	mov	r0, r4
   360f2:	f7ff ffce 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   360f6:	f107 0804 	add.w	r8, r7, #4
   360fa:	9600      	str	r6, [sp, #0]
   360fc:	4643      	mov	r3, r8
   360fe:	4622      	mov	r2, r4
   36100:	4629      	mov	r1, r5
   36102:	4628      	mov	r0, r5
   36104:	f7ff fef3 	bl	35eee <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   36108:	9600      	str	r6, [sp, #0]
   3610a:	4643      	mov	r3, r8
   3610c:	4622      	mov	r2, r4
   3610e:	4621      	mov	r1, r4
   36110:	4620      	mov	r0, r4
   36112:	f7ff feec 	bl	35eee <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   36116:	9600      	str	r6, [sp, #0]
   36118:	4643      	mov	r3, r8
   3611a:	4622      	mov	r2, r4
   3611c:	4629      	mov	r1, r5
   3611e:	4620      	mov	r0, r4
   36120:	f7ff fefc 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   36124:	463b      	mov	r3, r7
   36126:	4622      	mov	r2, r4
   36128:	4629      	mov	r1, r5
   3612a:	4628      	mov	r0, r5
   3612c:	f7ff ffa1 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   36130:	9600      	str	r6, [sp, #0]
   36132:	4643      	mov	r3, r8
   36134:	462a      	mov	r2, r5
   36136:	4629      	mov	r1, r5
   36138:	4620      	mov	r0, r4
   3613a:	f7ff fed8 	bl	35eee <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   3613e:	9600      	str	r6, [sp, #0]
   36140:	4643      	mov	r3, r8
   36142:	4622      	mov	r2, r4
   36144:	4629      	mov	r1, r5
   36146:	4628      	mov	r0, r5
   36148:	f7ff fed1 	bl	35eee <uECC_vli_modAdd>
	if (uECC_vli_testBit(X1, 0)) {
   3614c:	2100      	movs	r1, #0
   3614e:	4628      	mov	r0, r5
   36150:	f7ff fe03 	bl	35d5a <uECC_vli_testBit>
   36154:	2800      	cmp	r0, #0
   36156:	d04a      	beq.n	361ee <double_jacobian_default+0x150>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   36158:	4633      	mov	r3, r6
   3615a:	4642      	mov	r2, r8
   3615c:	4629      	mov	r1, r5
   3615e:	4628      	mov	r0, r5
   36160:	f7ff fe63 	bl	35e2a <uECC_vli_add>
   36164:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   36166:	4631      	mov	r1, r6
   36168:	4628      	mov	r0, r5
   3616a:	f7ff fd51 	bl	35c10 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   3616e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   36172:	3b01      	subs	r3, #1
   36174:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   36178:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   3617c:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   36180:	463a      	mov	r2, r7
   36182:	4629      	mov	r1, r5
   36184:	4620      	mov	r0, r4
   36186:	f7ff ff84 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   3618a:	9600      	str	r6, [sp, #0]
   3618c:	4643      	mov	r3, r8
   3618e:	aa02      	add	r2, sp, #8
   36190:	4621      	mov	r1, r4
   36192:	4620      	mov	r0, r4
   36194:	f7ff fec2 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   36198:	9600      	str	r6, [sp, #0]
   3619a:	4643      	mov	r3, r8
   3619c:	aa02      	add	r2, sp, #8
   3619e:	4621      	mov	r1, r4
   361a0:	4620      	mov	r0, r4
   361a2:	f7ff febb 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   361a6:	9600      	str	r6, [sp, #0]
   361a8:	4643      	mov	r3, r8
   361aa:	4622      	mov	r2, r4
   361ac:	a902      	add	r1, sp, #8
   361ae:	4608      	mov	r0, r1
   361b0:	f7ff feb4 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   361b4:	463b      	mov	r3, r7
   361b6:	aa02      	add	r2, sp, #8
   361b8:	4629      	mov	r1, r5
   361ba:	4628      	mov	r0, r5
   361bc:	f7ff ff59 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   361c0:	9600      	str	r6, [sp, #0]
   361c2:	4643      	mov	r3, r8
   361c4:	aa0a      	add	r2, sp, #40	; 0x28
   361c6:	4629      	mov	r1, r5
   361c8:	4610      	mov	r0, r2
   361ca:	f7ff fea7 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   361ce:	4632      	mov	r2, r6
   361d0:	4621      	mov	r1, r4
   361d2:	4628      	mov	r0, r5
   361d4:	f7ff fde4 	bl	35da0 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   361d8:	4632      	mov	r2, r6
   361da:	4649      	mov	r1, r9
   361dc:	4620      	mov	r0, r4
   361de:	f7ff fddf 	bl	35da0 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   361e2:	4632      	mov	r2, r6
   361e4:	a90a      	add	r1, sp, #40	; 0x28
   361e6:	4648      	mov	r0, r9
   361e8:	f7ff fdda 	bl	35da0 <uECC_vli_set>
   361ec:	e765      	b.n	360ba <double_jacobian_default+0x1c>
		uECC_vli_rshift1(X1, num_words);
   361ee:	4631      	mov	r1, r6
   361f0:	4628      	mov	r0, r5
   361f2:	f7ff fd0d 	bl	35c10 <uECC_vli_rshift1>
   361f6:	e7c3      	b.n	36180 <double_jacobian_default+0xe2>

000361f8 <x_side_default>:
{
   361f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   361fc:	b08a      	sub	sp, #40	; 0x28
   361fe:	4604      	mov	r4, r0
   36200:	460f      	mov	r7, r1
   36202:	4615      	mov	r5, r2
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   36204:	2300      	movs	r3, #0
   36206:	9303      	str	r3, [sp, #12]
   36208:	9304      	str	r3, [sp, #16]
   3620a:	9305      	str	r3, [sp, #20]
   3620c:	9306      	str	r3, [sp, #24]
   3620e:	9307      	str	r3, [sp, #28]
   36210:	9308      	str	r3, [sp, #32]
   36212:	9309      	str	r3, [sp, #36]	; 0x24
   36214:	2303      	movs	r3, #3
   36216:	9302      	str	r3, [sp, #8]
	wordcount_t num_words = curve->num_words;
   36218:	4616      	mov	r6, r2
   3621a:	f916 8b04 	ldrsb.w	r8, [r6], #4
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   3621e:	f7ff ff38 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   36222:	f8cd 8000 	str.w	r8, [sp]
   36226:	4633      	mov	r3, r6
   36228:	aa02      	add	r2, sp, #8
   3622a:	4621      	mov	r1, r4
   3622c:	4620      	mov	r0, r4
   3622e:	f7ff fe75 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   36232:	462b      	mov	r3, r5
   36234:	463a      	mov	r2, r7
   36236:	4621      	mov	r1, r4
   36238:	4620      	mov	r0, r4
   3623a:	f7ff ff1a 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   3623e:	f8cd 8000 	str.w	r8, [sp]
   36242:	4633      	mov	r3, r6
   36244:	f105 0284 	add.w	r2, r5, #132	; 0x84
   36248:	4621      	mov	r1, r4
   3624a:	4620      	mov	r0, r4
   3624c:	f7ff fe4f 	bl	35eee <uECC_vli_modAdd>
}
   36250:	b00a      	add	sp, #40	; 0x28
   36252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036256 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   36256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3625a:	b09a      	sub	sp, #104	; 0x68
   3625c:	4607      	mov	r7, r0
   3625e:	4689      	mov	r9, r1
   36260:	4616      	mov	r6, r2
   36262:	4698      	mov	r8, r3
   36264:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   36268:	4654      	mov	r4, sl
   3626a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   3626e:	9500      	str	r5, [sp, #0]
   36270:	4623      	mov	r3, r4
   36272:	4602      	mov	r2, r0
   36274:	4631      	mov	r1, r6
   36276:	a812      	add	r0, sp, #72	; 0x48
   36278:	f7ff fe50 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   3627c:	4652      	mov	r2, sl
   3627e:	a912      	add	r1, sp, #72	; 0x48
   36280:	4608      	mov	r0, r1
   36282:	f7ff ff06 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   36286:	4653      	mov	r3, sl
   36288:	aa12      	add	r2, sp, #72	; 0x48
   3628a:	4639      	mov	r1, r7
   3628c:	4638      	mov	r0, r7
   3628e:	f7ff fef0 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   36292:	4653      	mov	r3, sl
   36294:	aa12      	add	r2, sp, #72	; 0x48
   36296:	4631      	mov	r1, r6
   36298:	4630      	mov	r0, r6
   3629a:	f7ff feea 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   3629e:	9500      	str	r5, [sp, #0]
   362a0:	4623      	mov	r3, r4
   362a2:	464a      	mov	r2, r9
   362a4:	4641      	mov	r1, r8
   362a6:	a812      	add	r0, sp, #72	; 0x48
   362a8:	f7ff fe21 	bl	35eee <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   362ac:	9500      	str	r5, [sp, #0]
   362ae:	4623      	mov	r3, r4
   362b0:	464a      	mov	r2, r9
   362b2:	4641      	mov	r1, r8
   362b4:	4640      	mov	r0, r8
   362b6:	f7ff fe31 	bl	35f1c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   362ba:	9500      	str	r5, [sp, #0]
   362bc:	4623      	mov	r3, r4
   362be:	463a      	mov	r2, r7
   362c0:	4631      	mov	r1, r6
   362c2:	a80a      	add	r0, sp, #40	; 0x28
   362c4:	f7ff fe2a 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   362c8:	4653      	mov	r3, sl
   362ca:	aa0a      	add	r2, sp, #40	; 0x28
   362cc:	4649      	mov	r1, r9
   362ce:	4648      	mov	r0, r9
   362d0:	f7ff fecf 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   362d4:	9500      	str	r5, [sp, #0]
   362d6:	4623      	mov	r3, r4
   362d8:	4632      	mov	r2, r6
   362da:	4639      	mov	r1, r7
   362dc:	a80a      	add	r0, sp, #40	; 0x28
   362de:	f7ff fe06 	bl	35eee <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   362e2:	4652      	mov	r2, sl
   362e4:	4641      	mov	r1, r8
   362e6:	4630      	mov	r0, r6
   362e8:	f7ff fed3 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   362ec:	9500      	str	r5, [sp, #0]
   362ee:	4623      	mov	r3, r4
   362f0:	aa0a      	add	r2, sp, #40	; 0x28
   362f2:	4631      	mov	r1, r6
   362f4:	4630      	mov	r0, r6
   362f6:	f7ff fe11 	bl	35f1c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   362fa:	9500      	str	r5, [sp, #0]
   362fc:	4623      	mov	r3, r4
   362fe:	4632      	mov	r2, r6
   36300:	4639      	mov	r1, r7
   36302:	a802      	add	r0, sp, #8
   36304:	f7ff fe0a 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   36308:	4653      	mov	r3, sl
   3630a:	aa02      	add	r2, sp, #8
   3630c:	4641      	mov	r1, r8
   3630e:	4640      	mov	r0, r8
   36310:	f7ff feaf 	bl	36072 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   36314:	9500      	str	r5, [sp, #0]
   36316:	4623      	mov	r3, r4
   36318:	464a      	mov	r2, r9
   3631a:	4641      	mov	r1, r8
   3631c:	4640      	mov	r0, r8
   3631e:	f7ff fdfd 	bl	35f1c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   36322:	4652      	mov	r2, sl
   36324:	a912      	add	r1, sp, #72	; 0x48
   36326:	a802      	add	r0, sp, #8
   36328:	f7ff feb3 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   3632c:	9500      	str	r5, [sp, #0]
   3632e:	4623      	mov	r3, r4
   36330:	aa0a      	add	r2, sp, #40	; 0x28
   36332:	a902      	add	r1, sp, #8
   36334:	4608      	mov	r0, r1
   36336:	f7ff fdf1 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   3633a:	9500      	str	r5, [sp, #0]
   3633c:	4623      	mov	r3, r4
   3633e:	463a      	mov	r2, r7
   36340:	a902      	add	r1, sp, #8
   36342:	a80a      	add	r0, sp, #40	; 0x28
   36344:	f7ff fdea 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   36348:	4653      	mov	r3, sl
   3634a:	aa12      	add	r2, sp, #72	; 0x48
   3634c:	a90a      	add	r1, sp, #40	; 0x28
   3634e:	4608      	mov	r0, r1
   36350:	f7ff fe8f 	bl	36072 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   36354:	9500      	str	r5, [sp, #0]
   36356:	4623      	mov	r3, r4
   36358:	464a      	mov	r2, r9
   3635a:	a90a      	add	r1, sp, #40	; 0x28
   3635c:	4648      	mov	r0, r9
   3635e:	f7ff fddd 	bl	35f1c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   36362:	462a      	mov	r2, r5
   36364:	a902      	add	r1, sp, #8
   36366:	4638      	mov	r0, r7
   36368:	f7ff fd1a 	bl	35da0 <uECC_vli_set>
}
   3636c:	b01a      	add	sp, #104	; 0x68
   3636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00036372 <uECC_vli_modInv>:
{
   36372:	b5f0      	push	{r4, r5, r6, r7, lr}
   36374:	b0a1      	sub	sp, #132	; 0x84
   36376:	4607      	mov	r7, r0
   36378:	460e      	mov	r6, r1
   3637a:	4615      	mov	r5, r2
   3637c:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   3637e:	4619      	mov	r1, r3
   36380:	4630      	mov	r0, r6
   36382:	f7ff fcd5 	bl	35d30 <uECC_vli_isZero>
   36386:	b9a0      	cbnz	r0, 363b2 <uECC_vli_modInv+0x40>
	uECC_vli_set(a, input, num_words);
   36388:	4622      	mov	r2, r4
   3638a:	4631      	mov	r1, r6
   3638c:	a818      	add	r0, sp, #96	; 0x60
   3638e:	f7ff fd07 	bl	35da0 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   36392:	4622      	mov	r2, r4
   36394:	4629      	mov	r1, r5
   36396:	a810      	add	r0, sp, #64	; 0x40
   36398:	f7ff fd02 	bl	35da0 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   3639c:	4621      	mov	r1, r4
   3639e:	a808      	add	r0, sp, #32
   363a0:	f7ff fcbc 	bl	35d1c <uECC_vli_clear>
	u[0] = 1;
   363a4:	2301      	movs	r3, #1
   363a6:	9308      	str	r3, [sp, #32]
	uECC_vli_clear(v, num_words);
   363a8:	4621      	mov	r1, r4
   363aa:	4668      	mov	r0, sp
   363ac:	f7ff fcb6 	bl	35d1c <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   363b0:	e00d      	b.n	363ce <uECC_vli_modInv+0x5c>
		uECC_vli_clear(result, num_words);
   363b2:	4621      	mov	r1, r4
   363b4:	4638      	mov	r0, r7
   363b6:	f7ff fcb1 	bl	35d1c <uECC_vli_clear>
		return;
   363ba:	e071      	b.n	364a0 <uECC_vli_modInv+0x12e>
			uECC_vli_rshift1(a, num_words);
   363bc:	4621      	mov	r1, r4
   363be:	a818      	add	r0, sp, #96	; 0x60
   363c0:	f7ff fc26 	bl	35c10 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   363c4:	4622      	mov	r2, r4
   363c6:	4629      	mov	r1, r5
   363c8:	a808      	add	r0, sp, #32
   363ca:	f7ff fd50 	bl	35e6e <vli_modInv_update>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   363ce:	4622      	mov	r2, r4
   363d0:	a910      	add	r1, sp, #64	; 0x40
   363d2:	a818      	add	r0, sp, #96	; 0x60
   363d4:	f7ff fcf3 	bl	35dbe <uECC_vli_cmp_unsafe>
   363d8:	4602      	mov	r2, r0
   363da:	2800      	cmp	r0, #0
   363dc:	d05b      	beq.n	36496 <uECC_vli_modInv+0x124>
		if (EVEN(a)) {
   363de:	9b18      	ldr	r3, [sp, #96]	; 0x60
   363e0:	f013 0f01 	tst.w	r3, #1
   363e4:	d0ea      	beq.n	363bc <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
   363e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   363e8:	f013 0f01 	tst.w	r3, #1
   363ec:	d01e      	beq.n	3642c <uECC_vli_modInv+0xba>
		} else if (cmpResult > 0) {
   363ee:	2a00      	cmp	r2, #0
   363f0:	dd2d      	ble.n	3644e <uECC_vli_modInv+0xdc>
			uECC_vli_sub(a, a, b, num_words);
   363f2:	4623      	mov	r3, r4
   363f4:	aa10      	add	r2, sp, #64	; 0x40
   363f6:	a918      	add	r1, sp, #96	; 0x60
   363f8:	4608      	mov	r0, r1
   363fa:	f7ff fd56 	bl	35eaa <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   363fe:	4621      	mov	r1, r4
   36400:	a818      	add	r0, sp, #96	; 0x60
   36402:	f7ff fc05 	bl	35c10 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   36406:	4622      	mov	r2, r4
   36408:	4669      	mov	r1, sp
   3640a:	a808      	add	r0, sp, #32
   3640c:	f7ff fcd7 	bl	35dbe <uECC_vli_cmp_unsafe>
   36410:	2800      	cmp	r0, #0
   36412:	db15      	blt.n	36440 <uECC_vli_modInv+0xce>
      			uECC_vli_sub(u, u, v, num_words);
   36414:	4623      	mov	r3, r4
   36416:	466a      	mov	r2, sp
   36418:	a908      	add	r1, sp, #32
   3641a:	4608      	mov	r0, r1
   3641c:	f7ff fd45 	bl	35eaa <uECC_vli_sub>
      			vli_modInv_update(u, mod, num_words);
   36420:	4622      	mov	r2, r4
   36422:	4629      	mov	r1, r5
   36424:	a808      	add	r0, sp, #32
   36426:	f7ff fd22 	bl	35e6e <vli_modInv_update>
   3642a:	e7d0      	b.n	363ce <uECC_vli_modInv+0x5c>
			uECC_vli_rshift1(b, num_words);
   3642c:	4621      	mov	r1, r4
   3642e:	a810      	add	r0, sp, #64	; 0x40
   36430:	f7ff fbee 	bl	35c10 <uECC_vli_rshift1>
			vli_modInv_update(v, mod, num_words);
   36434:	4622      	mov	r2, r4
   36436:	4629      	mov	r1, r5
   36438:	4668      	mov	r0, sp
   3643a:	f7ff fd18 	bl	35e6e <vli_modInv_update>
   3643e:	e7c6      	b.n	363ce <uECC_vli_modInv+0x5c>
        			uECC_vli_add(u, u, mod, num_words);
   36440:	4623      	mov	r3, r4
   36442:	462a      	mov	r2, r5
   36444:	a908      	add	r1, sp, #32
   36446:	4608      	mov	r0, r1
   36448:	f7ff fcef 	bl	35e2a <uECC_vli_add>
   3644c:	e7e2      	b.n	36414 <uECC_vli_modInv+0xa2>
      			uECC_vli_sub(b, b, a, num_words);
   3644e:	4623      	mov	r3, r4
   36450:	aa18      	add	r2, sp, #96	; 0x60
   36452:	a910      	add	r1, sp, #64	; 0x40
   36454:	4608      	mov	r0, r1
   36456:	f7ff fd28 	bl	35eaa <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   3645a:	4621      	mov	r1, r4
   3645c:	a810      	add	r0, sp, #64	; 0x40
   3645e:	f7ff fbd7 	bl	35c10 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   36462:	4622      	mov	r2, r4
   36464:	a908      	add	r1, sp, #32
   36466:	4668      	mov	r0, sp
   36468:	f7ff fca9 	bl	35dbe <uECC_vli_cmp_unsafe>
   3646c:	2800      	cmp	r0, #0
   3646e:	db0b      	blt.n	36488 <uECC_vli_modInv+0x116>
      			uECC_vli_sub(v, v, u, num_words);
   36470:	4623      	mov	r3, r4
   36472:	aa08      	add	r2, sp, #32
   36474:	4669      	mov	r1, sp
   36476:	4668      	mov	r0, sp
   36478:	f7ff fd17 	bl	35eaa <uECC_vli_sub>
      			vli_modInv_update(v, mod, num_words);
   3647c:	4622      	mov	r2, r4
   3647e:	4629      	mov	r1, r5
   36480:	4668      	mov	r0, sp
   36482:	f7ff fcf4 	bl	35e6e <vli_modInv_update>
   36486:	e7a2      	b.n	363ce <uECC_vli_modInv+0x5c>
        			uECC_vli_add(v, v, mod, num_words);
   36488:	4623      	mov	r3, r4
   3648a:	462a      	mov	r2, r5
   3648c:	4669      	mov	r1, sp
   3648e:	4668      	mov	r0, sp
   36490:	f7ff fccb 	bl	35e2a <uECC_vli_add>
   36494:	e7ec      	b.n	36470 <uECC_vli_modInv+0xfe>
  	uECC_vli_set(result, u, num_words);
   36496:	4622      	mov	r2, r4
   36498:	a908      	add	r1, sp, #32
   3649a:	4638      	mov	r0, r7
   3649c:	f7ff fc80 	bl	35da0 <uECC_vli_set>
}
   364a0:	b021      	add	sp, #132	; 0x84
   364a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000364a4 <EccPoint_isZero>:
{
   364a4:	b508      	push	{r3, lr}
	return uECC_vli_isZero(point, curve->num_words * 2);
   364a6:	f991 1000 	ldrsb.w	r1, [r1]
   364aa:	0049      	lsls	r1, r1, #1
   364ac:	b249      	sxtb	r1, r1
   364ae:	f7ff fc3f 	bl	35d30 <uECC_vli_isZero>
}
   364b2:	bd08      	pop	{r3, pc}

000364b4 <apply_z>:
{
   364b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   364b6:	b089      	sub	sp, #36	; 0x24
   364b8:	4607      	mov	r7, r0
   364ba:	460d      	mov	r5, r1
   364bc:	4616      	mov	r6, r2
   364be:	461c      	mov	r4, r3
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   364c0:	461a      	mov	r2, r3
   364c2:	4631      	mov	r1, r6
   364c4:	4668      	mov	r0, sp
   364c6:	f7ff fde4 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   364ca:	4623      	mov	r3, r4
   364cc:	466a      	mov	r2, sp
   364ce:	4639      	mov	r1, r7
   364d0:	4638      	mov	r0, r7
   364d2:	f7ff fdce 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   364d6:	4623      	mov	r3, r4
   364d8:	4632      	mov	r2, r6
   364da:	4669      	mov	r1, sp
   364dc:	4668      	mov	r0, sp
   364de:	f7ff fdc8 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   364e2:	4623      	mov	r3, r4
   364e4:	466a      	mov	r2, sp
   364e6:	4629      	mov	r1, r5
   364e8:	4628      	mov	r0, r5
   364ea:	f7ff fdc2 	bl	36072 <uECC_vli_modMult_fast>
}
   364ee:	b009      	add	sp, #36	; 0x24
   364f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000364f2 <XYcZ_initial_double>:
{
   364f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   364f6:	b089      	sub	sp, #36	; 0x24
   364f8:	4605      	mov	r5, r0
   364fa:	460e      	mov	r6, r1
   364fc:	4690      	mov	r8, r2
   364fe:	4699      	mov	r9, r3
   36500:	9910      	ldr	r1, [sp, #64]	; 0x40
   36502:	9c11      	ldr	r4, [sp, #68]	; 0x44
	wordcount_t num_words = curve->num_words;
   36504:	f994 7000 	ldrsb.w	r7, [r4]
	if (initial_Z) {
   36508:	b319      	cbz	r1, 36552 <XYcZ_initial_double+0x60>
		uECC_vli_set(z, initial_Z, num_words);
   3650a:	463a      	mov	r2, r7
   3650c:	4668      	mov	r0, sp
   3650e:	f7ff fc47 	bl	35da0 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   36512:	463a      	mov	r2, r7
   36514:	4629      	mov	r1, r5
   36516:	4640      	mov	r0, r8
   36518:	f7ff fc42 	bl	35da0 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   3651c:	463a      	mov	r2, r7
   3651e:	4631      	mov	r1, r6
   36520:	4648      	mov	r0, r9
   36522:	f7ff fc3d 	bl	35da0 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   36526:	4623      	mov	r3, r4
   36528:	466a      	mov	r2, sp
   3652a:	4631      	mov	r1, r6
   3652c:	4628      	mov	r0, r5
   3652e:	f7ff ffc1 	bl	364b4 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   36532:	f8d4 70a4 	ldr.w	r7, [r4, #164]	; 0xa4
   36536:	4623      	mov	r3, r4
   36538:	466a      	mov	r2, sp
   3653a:	4631      	mov	r1, r6
   3653c:	4628      	mov	r0, r5
   3653e:	47b8      	blx	r7
	apply_z(X2, Y2, z, curve);
   36540:	4623      	mov	r3, r4
   36542:	466a      	mov	r2, sp
   36544:	4649      	mov	r1, r9
   36546:	4640      	mov	r0, r8
   36548:	f7ff ffb4 	bl	364b4 <apply_z>
}
   3654c:	b009      	add	sp, #36	; 0x24
   3654e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uECC_vli_clear(z, num_words);
   36552:	4639      	mov	r1, r7
   36554:	4668      	mov	r0, sp
   36556:	f7ff fbe1 	bl	35d1c <uECC_vli_clear>
		z[0] = 1;
   3655a:	2301      	movs	r3, #1
   3655c:	9300      	str	r3, [sp, #0]
   3655e:	e7d8      	b.n	36512 <XYcZ_initial_double+0x20>

00036560 <XYcZ_add>:
{
   36560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36564:	b08a      	sub	sp, #40	; 0x28
   36566:	4680      	mov	r8, r0
   36568:	4689      	mov	r9, r1
   3656a:	4614      	mov	r4, r2
   3656c:	461d      	mov	r5, r3
   3656e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   36572:	4656      	mov	r6, sl
   36574:	f916 7b04 	ldrsb.w	r7, [r6], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   36578:	9700      	str	r7, [sp, #0]
   3657a:	4633      	mov	r3, r6
   3657c:	4602      	mov	r2, r0
   3657e:	4621      	mov	r1, r4
   36580:	a802      	add	r0, sp, #8
   36582:	f7ff fccb 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   36586:	4652      	mov	r2, sl
   36588:	a902      	add	r1, sp, #8
   3658a:	4608      	mov	r0, r1
   3658c:	f7ff fd81 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   36590:	4653      	mov	r3, sl
   36592:	aa02      	add	r2, sp, #8
   36594:	4641      	mov	r1, r8
   36596:	4640      	mov	r0, r8
   36598:	f7ff fd6b 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   3659c:	4653      	mov	r3, sl
   3659e:	aa02      	add	r2, sp, #8
   365a0:	4621      	mov	r1, r4
   365a2:	4620      	mov	r0, r4
   365a4:	f7ff fd65 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   365a8:	9700      	str	r7, [sp, #0]
   365aa:	4633      	mov	r3, r6
   365ac:	464a      	mov	r2, r9
   365ae:	4629      	mov	r1, r5
   365b0:	4628      	mov	r0, r5
   365b2:	f7ff fcb3 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   365b6:	4652      	mov	r2, sl
   365b8:	4629      	mov	r1, r5
   365ba:	a802      	add	r0, sp, #8
   365bc:	f7ff fd69 	bl	36092 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   365c0:	9700      	str	r7, [sp, #0]
   365c2:	4633      	mov	r3, r6
   365c4:	4642      	mov	r2, r8
   365c6:	a902      	add	r1, sp, #8
   365c8:	4608      	mov	r0, r1
   365ca:	f7ff fca7 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   365ce:	9700      	str	r7, [sp, #0]
   365d0:	4633      	mov	r3, r6
   365d2:	4622      	mov	r2, r4
   365d4:	a902      	add	r1, sp, #8
   365d6:	4608      	mov	r0, r1
   365d8:	f7ff fca0 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   365dc:	9700      	str	r7, [sp, #0]
   365de:	4633      	mov	r3, r6
   365e0:	4642      	mov	r2, r8
   365e2:	4621      	mov	r1, r4
   365e4:	4620      	mov	r0, r4
   365e6:	f7ff fc99 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   365ea:	4653      	mov	r3, sl
   365ec:	4622      	mov	r2, r4
   365ee:	4649      	mov	r1, r9
   365f0:	4648      	mov	r0, r9
   365f2:	f7ff fd3e 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   365f6:	9700      	str	r7, [sp, #0]
   365f8:	4633      	mov	r3, r6
   365fa:	aa02      	add	r2, sp, #8
   365fc:	4641      	mov	r1, r8
   365fe:	4620      	mov	r0, r4
   36600:	f7ff fc8c 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   36604:	4653      	mov	r3, sl
   36606:	4622      	mov	r2, r4
   36608:	4629      	mov	r1, r5
   3660a:	4628      	mov	r0, r5
   3660c:	f7ff fd31 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   36610:	9700      	str	r7, [sp, #0]
   36612:	4633      	mov	r3, r6
   36614:	464a      	mov	r2, r9
   36616:	4629      	mov	r1, r5
   36618:	4628      	mov	r0, r5
   3661a:	f7ff fc7f 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   3661e:	463a      	mov	r2, r7
   36620:	a902      	add	r1, sp, #8
   36622:	4620      	mov	r0, r4
   36624:	f7ff fbbc 	bl	35da0 <uECC_vli_set>
}
   36628:	b00a      	add	sp, #40	; 0x28
   3662a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003662e <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   3662e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36632:	b0af      	sub	sp, #188	; 0xbc
   36634:	9004      	str	r0, [sp, #16]
   36636:	460d      	mov	r5, r1
   36638:	9105      	str	r1, [sp, #20]
   3663a:	4692      	mov	sl, r2
   3663c:	461c      	mov	r4, r3
   3663e:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   36642:	f998 b000 	ldrsb.w	fp, [r8]

	uECC_vli_set(Rx[1], point, num_words);
   36646:	465a      	mov	r2, fp
   36648:	a826      	add	r0, sp, #152	; 0x98
   3664a:	f7ff fba9 	bl	35da0 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   3664e:	ea4f 038b 	mov.w	r3, fp, lsl #2
   36652:	9302      	str	r3, [sp, #8]
   36654:	eb05 038b 	add.w	r3, r5, fp, lsl #2
   36658:	9303      	str	r3, [sp, #12]
   3665a:	465a      	mov	r2, fp
   3665c:	4619      	mov	r1, r3
   3665e:	a816      	add	r0, sp, #88	; 0x58
   36660:	f7ff fb9e 	bl	35da0 <uECC_vli_set>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
   36664:	f8cd 8004 	str.w	r8, [sp, #4]
   36668:	9400      	str	r4, [sp, #0]
   3666a:	ab0e      	add	r3, sp, #56	; 0x38
   3666c:	aa1e      	add	r2, sp, #120	; 0x78
   3666e:	a916      	add	r1, sp, #88	; 0x58
   36670:	a826      	add	r0, sp, #152	; 0x98
   36672:	f7ff ff3e 	bl	364f2 <XYcZ_initial_double>

	for (i = num_bits - 2; i > 0; --i) {
   36676:	f9bd 40e0 	ldrsh.w	r4, [sp, #224]	; 0xe0
   3667a:	3c02      	subs	r4, #2
   3667c:	b224      	sxth	r4, r4
   3667e:	4647      	mov	r7, r8
   36680:	2c00      	cmp	r4, #0
   36682:	dd25      	ble.n	366d0 <EccPoint_mult+0xa2>
		nb = !uECC_vli_testBit(scalar, i);
   36684:	4621      	mov	r1, r4
   36686:	4650      	mov	r0, sl
   36688:	f7ff fb67 	bl	35d5a <uECC_vli_testBit>
   3668c:	fab0 f080 	clz	r0, r0
   36690:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   36692:	f1c0 0601 	rsb	r6, r0, #1
   36696:	ab1e      	add	r3, sp, #120	; 0x78
   36698:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   3669c:	ab0e      	add	r3, sp, #56	; 0x38
   3669e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   366a2:	ab1e      	add	r3, sp, #120	; 0x78
   366a4:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   366a8:	ab0e      	add	r3, sp, #56	; 0x38
   366aa:	eb03 1940 	add.w	r9, r3, r0, lsl #5
   366ae:	9700      	str	r7, [sp, #0]
   366b0:	464b      	mov	r3, r9
   366b2:	462a      	mov	r2, r5
   366b4:	4631      	mov	r1, r6
   366b6:	4640      	mov	r0, r8
   366b8:	f7ff fdcd 	bl	36256 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   366bc:	9700      	str	r7, [sp, #0]
   366be:	4633      	mov	r3, r6
   366c0:	4642      	mov	r2, r8
   366c2:	4649      	mov	r1, r9
   366c4:	4628      	mov	r0, r5
   366c6:	f7ff ff4b 	bl	36560 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   366ca:	3c01      	subs	r4, #1
   366cc:	b224      	sxth	r4, r4
   366ce:	e7d7      	b.n	36680 <EccPoint_mult+0x52>
   366d0:	46b8      	mov	r8, r7
	}

	nb = !uECC_vli_testBit(scalar, 0);
   366d2:	2100      	movs	r1, #0
   366d4:	4650      	mov	r0, sl
   366d6:	f7ff fb40 	bl	35d5a <uECC_vli_testBit>
   366da:	fab0 f480 	clz	r4, r0
   366de:	0964      	lsrs	r4, r4, #5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   366e0:	f1c4 0501 	rsb	r5, r4, #1
   366e4:	ab1e      	add	r3, sp, #120	; 0x78
   366e6:	eb03 1645 	add.w	r6, r3, r5, lsl #5
   366ea:	ab0e      	add	r3, sp, #56	; 0x38
   366ec:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   366f0:	ab1e      	add	r3, sp, #120	; 0x78
   366f2:	eb03 1744 	add.w	r7, r3, r4, lsl #5
   366f6:	ab0e      	add	r3, sp, #56	; 0x38
   366f8:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   366fc:	f8cd 8000 	str.w	r8, [sp]
   36700:	4623      	mov	r3, r4
   36702:	463a      	mov	r2, r7
   36704:	4629      	mov	r1, r5
   36706:	4630      	mov	r0, r6
   36708:	f7ff fda5 	bl	36256 <XYcZ_addC>

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   3670c:	f108 0904 	add.w	r9, r8, #4
   36710:	f8cd b000 	str.w	fp, [sp]
   36714:	464b      	mov	r3, r9
   36716:	aa1e      	add	r2, sp, #120	; 0x78
   36718:	a926      	add	r1, sp, #152	; 0x98
   3671a:	a806      	add	r0, sp, #24
   3671c:	f7ff fbfe 	bl	35f1c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   36720:	4643      	mov	r3, r8
   36722:	462a      	mov	r2, r5
   36724:	a906      	add	r1, sp, #24
   36726:	4608      	mov	r0, r1
   36728:	f7ff fca3 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   3672c:	4643      	mov	r3, r8
   3672e:	9a05      	ldr	r2, [sp, #20]
   36730:	a906      	add	r1, sp, #24
   36732:	4608      	mov	r0, r1
   36734:	f7ff fc9d 	bl	36072 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   36738:	465b      	mov	r3, fp
   3673a:	464a      	mov	r2, r9
   3673c:	a906      	add	r1, sp, #24
   3673e:	4608      	mov	r0, r1
   36740:	f7ff fe17 	bl	36372 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   36744:	4643      	mov	r3, r8
   36746:	9a03      	ldr	r2, [sp, #12]
   36748:	a906      	add	r1, sp, #24
   3674a:	4608      	mov	r0, r1
   3674c:	f7ff fc91 	bl	36072 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   36750:	4643      	mov	r3, r8
   36752:	4632      	mov	r2, r6
   36754:	a906      	add	r1, sp, #24
   36756:	4608      	mov	r0, r1
   36758:	f7ff fc8b 	bl	36072 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   3675c:	f8cd 8000 	str.w	r8, [sp]
   36760:	462b      	mov	r3, r5
   36762:	4632      	mov	r2, r6
   36764:	4621      	mov	r1, r4
   36766:	4638      	mov	r0, r7
   36768:	f7ff fefa 	bl	36560 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   3676c:	4643      	mov	r3, r8
   3676e:	aa06      	add	r2, sp, #24
   36770:	a90e      	add	r1, sp, #56	; 0x38
   36772:	a81e      	add	r0, sp, #120	; 0x78
   36774:	f7ff fe9e 	bl	364b4 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   36778:	465a      	mov	r2, fp
   3677a:	a91e      	add	r1, sp, #120	; 0x78
   3677c:	9c04      	ldr	r4, [sp, #16]
   3677e:	4620      	mov	r0, r4
   36780:	f7ff fb0e 	bl	35da0 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   36784:	465a      	mov	r2, fp
   36786:	a90e      	add	r1, sp, #56	; 0x38
   36788:	4623      	mov	r3, r4
   3678a:	9c02      	ldr	r4, [sp, #8]
   3678c:	4423      	add	r3, r4
   3678e:	4618      	mov	r0, r3
   36790:	f7ff fb06 	bl	35da0 <uECC_vli_set>
}
   36794:	b02f      	add	sp, #188	; 0xbc
   36796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003679a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   3679a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3679e:	460e      	mov	r6, r1
   367a0:	4617      	mov	r7, r2

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   367a2:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
   367a6:	f118 051f 	adds.w	r5, r8, #31
   367aa:	d415      	bmi.n	367d8 <regularize_k+0x3e>
   367ac:	f345 1547 	sbfx	r5, r5, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   367b0:	f103 0424 	add.w	r4, r3, #36	; 0x24
   367b4:	462b      	mov	r3, r5
   367b6:	4622      	mov	r2, r4
   367b8:	4601      	mov	r1, r0
   367ba:	4630      	mov	r0, r6
   367bc:	f7ff fb35 	bl	35e2a <uECC_vli_add>
   367c0:	b960      	cbnz	r0, 367dc <regularize_k+0x42>
   367c2:	ebb8 1f45 	cmp.w	r8, r5, lsl #5
   367c6:	da14      	bge.n	367f2 <regularize_k+0x58>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   367c8:	4641      	mov	r1, r8
   367ca:	4630      	mov	r0, r6
   367cc:	f7ff fac5 	bl	35d5a <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   367d0:	b990      	cbnz	r0, 367f8 <regularize_k+0x5e>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   367d2:	f04f 0800 	mov.w	r8, #0
   367d6:	e003      	b.n	367e0 <regularize_k+0x46>
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   367d8:	351f      	adds	r5, #31
   367da:	e7e7      	b.n	367ac <regularize_k+0x12>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   367dc:	f04f 0801 	mov.w	r8, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   367e0:	462b      	mov	r3, r5
   367e2:	4622      	mov	r2, r4
   367e4:	4631      	mov	r1, r6
   367e6:	4638      	mov	r0, r7
   367e8:	f7ff fb1f 	bl	35e2a <uECC_vli_add>

	return carry;
}
   367ec:	4640      	mov	r0, r8
   367ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   367f2:	f04f 0800 	mov.w	r8, #0
   367f6:	e7f3      	b.n	367e0 <regularize_k+0x46>
   367f8:	f04f 0801 	mov.w	r8, #1
   367fc:	e7f0      	b.n	367e0 <regularize_k+0x46>

000367fe <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   367fe:	b530      	push	{r4, r5, lr}
   36800:	b095      	sub	sp, #84	; 0x54
   36802:	4605      	mov	r5, r0
   36804:	4608      	mov	r0, r1
   36806:	4614      	mov	r4, r2

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   36808:	a90c      	add	r1, sp, #48	; 0x30
   3680a:	9102      	str	r1, [sp, #8]
   3680c:	aa04      	add	r2, sp, #16
   3680e:	9203      	str	r2, [sp, #12]
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   36810:	4623      	mov	r3, r4
   36812:	f7ff ffc2 	bl	3679a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   36816:	fab0 f380 	clz	r3, r0
   3681a:	095b      	lsrs	r3, r3, #5
   3681c:	aa14      	add	r2, sp, #80	; 0x50
   3681e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   36822:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   36826:	9401      	str	r4, [sp, #4]
   36828:	3301      	adds	r3, #1
   3682a:	b21b      	sxth	r3, r3
   3682c:	9300      	str	r3, [sp, #0]
   3682e:	2300      	movs	r3, #0
   36830:	f852 2c48 	ldr.w	r2, [r2, #-72]
   36834:	f104 0144 	add.w	r1, r4, #68	; 0x44
   36838:	4628      	mov	r0, r5
   3683a:	f7ff fef8 	bl	3662e <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   3683e:	4621      	mov	r1, r4
   36840:	4628      	mov	r0, r5
   36842:	f7ff fe2f 	bl	364a4 <EccPoint_isZero>
   36846:	b910      	cbnz	r0, 3684e <EccPoint_compute_public_key+0x50>
		return 0;
	}
	return 1;
   36848:	2001      	movs	r0, #1
}
   3684a:	b015      	add	sp, #84	; 0x54
   3684c:	bd30      	pop	{r4, r5, pc}
		return 0;
   3684e:	2000      	movs	r0, #0
   36850:	e7fb      	b.n	3684a <EccPoint_compute_public_key+0x4c>

00036852 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   36852:	b430      	push	{r4, r5}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   36854:	2400      	movs	r4, #0
   36856:	428c      	cmp	r4, r1
   36858:	da0d      	bge.n	36876 <uECC_vli_nativeToBytes+0x24>
		unsigned b = num_bytes - 1 - i;
   3685a:	1b0b      	subs	r3, r1, r4
   3685c:	3b01      	subs	r3, #1
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   3685e:	f023 0503 	bic.w	r5, r3, #3
   36862:	5955      	ldr	r5, [r2, r5]
   36864:	f003 0303 	and.w	r3, r3, #3
   36868:	00db      	lsls	r3, r3, #3
   3686a:	fa25 f303 	lsr.w	r3, r5, r3
   3686e:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   36870:	3401      	adds	r4, #1
   36872:	b264      	sxtb	r4, r4
   36874:	e7ef      	b.n	36856 <uECC_vli_nativeToBytes+0x4>
	}
}
   36876:	bc30      	pop	{r4, r5}
   36878:	4770      	bx	lr

0003687a <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   3687a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3687c:	4606      	mov	r6, r0
   3687e:	460f      	mov	r7, r1
   36880:	4615      	mov	r5, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   36882:	1cd1      	adds	r1, r2, #3
   36884:	d417      	bmi.n	368b6 <uECC_vli_bytesToNative+0x3c>
   36886:	f341 0187 	sbfx	r1, r1, #2, #8
   3688a:	4630      	mov	r0, r6
   3688c:	f7ff fa46 	bl	35d1c <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   36890:	2400      	movs	r4, #0
   36892:	42ac      	cmp	r4, r5
   36894:	da11      	bge.n	368ba <uECC_vli_bytesToNative+0x40>
		unsigned b = num_bytes - 1 - i;
   36896:	1b2b      	subs	r3, r5, r4
   36898:	3b01      	subs	r3, #1
		native[b / uECC_WORD_SIZE] |=
   3689a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   3689e:	5d3a      	ldrb	r2, [r7, r4]
   368a0:	f003 0303 	and.w	r3, r3, #3
   368a4:	00db      	lsls	r3, r3, #3
   368a6:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   368aa:	5872      	ldr	r2, [r6, r1]
   368ac:	431a      	orrs	r2, r3
   368ae:	5072      	str	r2, [r6, r1]
	for (i = 0; i < num_bytes; ++i) {
   368b0:	3401      	adds	r4, #1
   368b2:	b264      	sxtb	r4, r4
   368b4:	e7ed      	b.n	36892 <uECC_vli_bytesToNative+0x18>
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   368b6:	3103      	adds	r1, #3
   368b8:	e7e5      	b.n	36886 <uECC_vli_bytesToNative+0xc>
  	}
}
   368ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000368bc <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   368bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   368c0:	b090      	sub	sp, #64	; 0x40
   368c2:	4680      	mov	r8, r0
   368c4:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   368c6:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   368ca:	f7ff fdeb 	bl	364a4 <EccPoint_isZero>
   368ce:	bb20      	cbnz	r0, 3691a <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   368d0:	1d26      	adds	r6, r4, #4
   368d2:	462a      	mov	r2, r5
   368d4:	4641      	mov	r1, r8
   368d6:	4630      	mov	r0, r6
   368d8:	f7ff fa71 	bl	35dbe <uECC_vli_cmp_unsafe>
   368dc:	2801      	cmp	r0, #1
   368de:	d11f      	bne.n	36920 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   368e0:	eb08 0785 	add.w	r7, r8, r5, lsl #2
   368e4:	462a      	mov	r2, r5
   368e6:	4639      	mov	r1, r7
   368e8:	4630      	mov	r0, r6
   368ea:	f7ff fa68 	bl	35dbe <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   368ee:	2801      	cmp	r0, #1
   368f0:	d119      	bne.n	36926 <uECC_valid_point+0x6a>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   368f2:	4622      	mov	r2, r4
   368f4:	4639      	mov	r1, r7
   368f6:	a808      	add	r0, sp, #32
   368f8:	f7ff fbcb 	bl	36092 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   368fc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   36900:	4622      	mov	r2, r4
   36902:	4641      	mov	r1, r8
   36904:	4668      	mov	r0, sp
   36906:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   36908:	462a      	mov	r2, r5
   3690a:	4669      	mov	r1, sp
   3690c:	a808      	add	r0, sp, #32
   3690e:	f7ff fa70 	bl	35df2 <uECC_vli_equal>
   36912:	b958      	cbnz	r0, 3692c <uECC_valid_point+0x70>
		return -3;

	return 0;
}
   36914:	b010      	add	sp, #64	; 0x40
   36916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   3691a:	f04f 30ff 	mov.w	r0, #4294967295
   3691e:	e7f9      	b.n	36914 <uECC_valid_point+0x58>
		return -2;
   36920:	f06f 0001 	mvn.w	r0, #1
   36924:	e7f6      	b.n	36914 <uECC_valid_point+0x58>
   36926:	f06f 0001 	mvn.w	r0, #1
   3692a:	e7f3      	b.n	36914 <uECC_valid_point+0x58>
		return -3;
   3692c:	f06f 0002 	mvn.w	r0, #2
   36930:	e7f0      	b.n	36914 <uECC_valid_point+0x58>

00036932 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   36932:	b530      	push	{r4, r5, lr}
   36934:	b091      	sub	sp, #68	; 0x44
   36936:	4605      	mov	r5, r0
   36938:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   3693a:	f991 2001 	ldrsb.w	r2, [r1, #1]
   3693e:	4601      	mov	r1, r0
   36940:	4668      	mov	r0, sp
   36942:	f7ff ff9a 	bl	3687a <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   36946:	f994 0000 	ldrsb.w	r0, [r4]
	public_key + curve->num_bytes,
   3694a:	f994 2001 	ldrsb.w	r2, [r4, #1]
	uECC_vli_bytesToNative(
   3694e:	18a9      	adds	r1, r5, r2
   36950:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   36954:	f7ff ff91 	bl	3687a <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   36958:	2210      	movs	r2, #16
   3695a:	f104 0144 	add.w	r1, r4, #68	; 0x44
   3695e:	4668      	mov	r0, sp
   36960:	f7ff fa2d 	bl	35dbe <uECC_vli_cmp_unsafe>
   36964:	b128      	cbz	r0, 36972 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   36966:	4621      	mov	r1, r4
   36968:	4668      	mov	r0, sp
   3696a:	f7ff ffa7 	bl	368bc <uECC_valid_point>
}
   3696e:	b011      	add	sp, #68	; 0x44
   36970:	bd30      	pop	{r4, r5, pc}
		return -4;
   36972:	f06f 0003 	mvn.w	r0, #3
   36976:	e7fa      	b.n	3696e <uECC_valid_public_key+0x3c>

00036978 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   36978:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   3697a:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   3697c:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   36980:	2a00      	cmp	r2, #0
   36982:	db03      	blt.n	3698c <gf_double+0x14>
   36984:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   36986:	f100 020f 	add.w	r2, r0, #15
   3698a:	e004      	b.n	36996 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   3698c:	2487      	movs	r4, #135	; 0x87
   3698e:	e7fa      	b.n	36986 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   36990:	f813 0901 	ldrb.w	r0, [r3], #-1
   36994:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   36996:	7818      	ldrb	r0, [r3, #0]
   36998:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   3699c:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   369a0:	428b      	cmp	r3, r1
   369a2:	d1f5      	bne.n	36990 <gf_double+0x18>
	}
}
   369a4:	bc10      	pop	{r4}
   369a6:	4770      	bx	lr

000369a8 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   369a8:	b130      	cbz	r0, 369b8 <tc_cmac_erase+0x10>
{
   369aa:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   369ac:	2258      	movs	r2, #88	; 0x58
   369ae:	2100      	movs	r1, #0
   369b0:	f7ff f864 	bl	35a7c <_set>

	return TC_CRYPTO_SUCCESS;
   369b4:	2001      	movs	r0, #1
}
   369b6:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   369b8:	2000      	movs	r0, #0
}
   369ba:	4770      	bx	lr

000369bc <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   369bc:	b1a0      	cbz	r0, 369e8 <tc_cmac_init+0x2c>
{
   369be:	b510      	push	{r4, lr}
   369c0:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   369c2:	2210      	movs	r2, #16
   369c4:	2100      	movs	r1, #0
   369c6:	f7ff f859 	bl	35a7c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   369ca:	2210      	movs	r2, #16
   369cc:	2100      	movs	r1, #0
   369ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   369d2:	f7ff f853 	bl	35a7c <_set>
	s->leftover_offset = 0;
   369d6:	2300      	movs	r3, #0
   369d8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   369da:	2200      	movs	r2, #0
   369dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   369e0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   369e4:	2001      	movs	r0, #1
}
   369e6:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   369e8:	2000      	movs	r0, #0
}
   369ea:	4770      	bx	lr

000369ec <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   369ec:	b338      	cbz	r0, 36a3e <tc_cmac_setup+0x52>
{
   369ee:	b570      	push	{r4, r5, r6, lr}
   369f0:	460d      	mov	r5, r1
   369f2:	4616      	mov	r6, r2
   369f4:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   369f6:	b321      	cbz	r1, 36a42 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   369f8:	2258      	movs	r2, #88	; 0x58
   369fa:	2100      	movs	r1, #0
   369fc:	f7ff f83e 	bl	35a7c <_set>
	s->sched = sched;
   36a00:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   36a02:	4629      	mov	r1, r5
   36a04:	4630      	mov	r0, r6
   36a06:	f7ea fe07 	bl	21618 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   36a0a:	2210      	movs	r2, #16
   36a0c:	2100      	movs	r1, #0
   36a0e:	4620      	mov	r0, r4
   36a10:	f7ff f834 	bl	35a7c <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   36a14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   36a16:	4621      	mov	r1, r4
   36a18:	4620      	mov	r0, r4
   36a1a:	f7ea fe5b 	bl	216d4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   36a1e:	f104 0510 	add.w	r5, r4, #16
   36a22:	4621      	mov	r1, r4
   36a24:	4628      	mov	r0, r5
   36a26:	f7ff ffa7 	bl	36978 <gf_double>
	gf_double (s->K2, s->K1);
   36a2a:	4629      	mov	r1, r5
   36a2c:	f104 0020 	add.w	r0, r4, #32
   36a30:	f7ff ffa2 	bl	36978 <gf_double>
	tc_cmac_init(s);
   36a34:	4620      	mov	r0, r4
   36a36:	f7ff ffc1 	bl	369bc <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   36a3a:	2001      	movs	r0, #1
}
   36a3c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   36a3e:	2000      	movs	r0, #0
}
   36a40:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   36a42:	2000      	movs	r0, #0
   36a44:	e7fa      	b.n	36a3c <tc_cmac_setup+0x50>

00036a46 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   36a46:	2800      	cmp	r0, #0
   36a48:	d062      	beq.n	36b10 <tc_cmac_update+0xca>
{
   36a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36a4e:	460e      	mov	r6, r1
   36a50:	4617      	mov	r7, r2
   36a52:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   36a54:	2a00      	cmp	r2, #0
   36a56:	d05d      	beq.n	36b14 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   36a58:	2900      	cmp	r1, #0
   36a5a:	d05e      	beq.n	36b1a <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   36a5c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   36a60:	ea50 0301 	orrs.w	r3, r0, r1
   36a64:	d05b      	beq.n	36b1e <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   36a66:	f110 32ff 	adds.w	r2, r0, #4294967295
   36a6a:	f141 33ff 	adc.w	r3, r1, #4294967295
   36a6e:	6522      	str	r2, [r4, #80]	; 0x50
   36a70:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   36a72:	6c65      	ldr	r5, [r4, #68]	; 0x44
   36a74:	b3a5      	cbz	r5, 36ae0 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   36a76:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   36a7a:	4547      	cmp	r7, r8
   36a7c:	d30d      	bcc.n	36a9a <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   36a7e:	f105 0030 	add.w	r0, r5, #48	; 0x30
   36a82:	4643      	mov	r3, r8
   36a84:	4632      	mov	r2, r6
   36a86:	4641      	mov	r1, r8
   36a88:	4420      	add	r0, r4
   36a8a:	f7fe ffea 	bl	35a62 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   36a8e:	3d10      	subs	r5, #16
   36a90:	442f      	add	r7, r5
		data += remaining_space;
   36a92:	4446      	add	r6, r8
		s->leftover_offset = 0;
   36a94:	2300      	movs	r3, #0
   36a96:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   36a98:	e013      	b.n	36ac2 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   36a9a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   36a9e:	463b      	mov	r3, r7
   36aa0:	4632      	mov	r2, r6
   36aa2:	4639      	mov	r1, r7
   36aa4:	4420      	add	r0, r4
   36aa6:	f7fe ffdc 	bl	35a62 <_copy>
			s->leftover_offset += data_length;
   36aaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   36aac:	443b      	add	r3, r7
   36aae:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   36ab0:	2001      	movs	r0, #1
   36ab2:	e030      	b.n	36b16 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   36ab4:	18e2      	adds	r2, r4, r3
   36ab6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   36aba:	5ce1      	ldrb	r1, [r4, r3]
   36abc:	404a      	eors	r2, r1
   36abe:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   36ac0:	3301      	adds	r3, #1
   36ac2:	2b0f      	cmp	r3, #15
   36ac4:	d9f6      	bls.n	36ab4 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   36ac6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   36ac8:	4621      	mov	r1, r4
   36aca:	4620      	mov	r0, r4
   36acc:	f7ea fe02 	bl	216d4 <tc_aes_encrypt>
   36ad0:	e006      	b.n	36ae0 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   36ad2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   36ad4:	4621      	mov	r1, r4
   36ad6:	4620      	mov	r0, r4
   36ad8:	f7ea fdfc 	bl	216d4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   36adc:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   36ade:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   36ae0:	2f10      	cmp	r7, #16
   36ae2:	d908      	bls.n	36af6 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   36ae4:	2300      	movs	r3, #0
   36ae6:	2b0f      	cmp	r3, #15
   36ae8:	d8f3      	bhi.n	36ad2 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   36aea:	5cf0      	ldrb	r0, [r6, r3]
   36aec:	5ce5      	ldrb	r5, [r4, r3]
   36aee:	4068      	eors	r0, r5
   36af0:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   36af2:	3301      	adds	r3, #1
   36af4:	e7f7      	b.n	36ae6 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   36af6:	b90f      	cbnz	r7, 36afc <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   36af8:	2001      	movs	r0, #1
   36afa:	e00c      	b.n	36b16 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   36afc:	463b      	mov	r3, r7
   36afe:	4632      	mov	r2, r6
   36b00:	4639      	mov	r1, r7
   36b02:	f104 0030 	add.w	r0, r4, #48	; 0x30
   36b06:	f7fe ffac 	bl	35a62 <_copy>
		s->leftover_offset = data_length;
   36b0a:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   36b0c:	2001      	movs	r0, #1
   36b0e:	e002      	b.n	36b16 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   36b10:	2000      	movs	r0, #0
}
   36b12:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   36b14:	2001      	movs	r0, #1
}
   36b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   36b1a:	2000      	movs	r0, #0
   36b1c:	e7fb      	b.n	36b16 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   36b1e:	2000      	movs	r0, #0
   36b20:	e7f9      	b.n	36b16 <tc_cmac_update+0xd0>

00036b22 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   36b22:	b370      	cbz	r0, 36b82 <tc_cmac_final+0x60>
{
   36b24:	b538      	push	{r3, r4, r5, lr}
   36b26:	460c      	mov	r4, r1
   36b28:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   36b2a:	b361      	cbz	r1, 36b86 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   36b2c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   36b2e:	2a10      	cmp	r2, #16
   36b30:	d10d      	bne.n	36b4e <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   36b32:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   36b34:	2300      	movs	r3, #0
   36b36:	2b0f      	cmp	r3, #15
   36b38:	d819      	bhi.n	36b6e <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   36b3a:	18e2      	adds	r2, r4, r3
   36b3c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   36b40:	5cc8      	ldrb	r0, [r1, r3]
   36b42:	4050      	eors	r0, r2
   36b44:	5ce2      	ldrb	r2, [r4, r3]
   36b46:	4042      	eors	r2, r0
   36b48:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   36b4a:	3301      	adds	r3, #1
   36b4c:	e7f3      	b.n	36b36 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   36b4e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   36b52:	f1c2 0210 	rsb	r2, r2, #16
   36b56:	2100      	movs	r1, #0
   36b58:	4420      	add	r0, r4
   36b5a:	f7fe ff8f 	bl	35a7c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   36b5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   36b60:	4423      	add	r3, r4
   36b62:	2280      	movs	r2, #128	; 0x80
   36b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   36b68:	f104 0120 	add.w	r1, r4, #32
   36b6c:	e7e2      	b.n	36b34 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   36b6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   36b70:	4621      	mov	r1, r4
   36b72:	4628      	mov	r0, r5
   36b74:	f7ea fdae 	bl	216d4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   36b78:	4620      	mov	r0, r4
   36b7a:	f7ff ff15 	bl	369a8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   36b7e:	2001      	movs	r0, #1
}
   36b80:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   36b82:	2000      	movs	r0, #0
}
   36b84:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   36b86:	2000      	movs	r0, #0
   36b88:	e7fa      	b.n	36b80 <tc_cmac_final+0x5e>

00036b8a <abort_function>:
{
   36b8a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   36b8c:	2000      	movs	r0, #0
   36b8e:	f7e9 f8b3 	bl	1fcf8 <sys_reboot>

00036b92 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   36b92:	b538      	push	{r3, r4, r5, lr}
   36b94:	4604      	mov	r4, r0

	if (esf != NULL) {
   36b96:	460d      	mov	r5, r1
   36b98:	b111      	cbz	r1, 36ba0 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   36b9a:	4608      	mov	r0, r1
   36b9c:	f7eb fa30 	bl	22000 <esf_dump>
	}
	z_fatal_error(reason, esf);
   36ba0:	4629      	mov	r1, r5
   36ba2:	4620      	mov	r0, r4
   36ba4:	f7f8 ff80 	bl	2faa8 <z_fatal_error>
}
   36ba8:	bd38      	pop	{r3, r4, r5, pc}

00036baa <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   36baa:	b508      	push	{r3, lr}
   36bac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   36bae:	6800      	ldr	r0, [r0, #0]
   36bb0:	f7ff ffef 	bl	36b92 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   36bb4:	bd08      	pop	{r3, pc}

00036bb6 <z_irq_spurious>:
{
   36bb6:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   36bb8:	2100      	movs	r1, #0
   36bba:	2001      	movs	r0, #1
   36bbc:	f7ff ffe9 	bl	36b92 <z_arm_fatal_error>
}
   36bc0:	bd08      	pop	{r3, pc}

00036bc2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   36bc2:	b508      	push	{r3, lr}
	handler();
   36bc4:	f7eb fac8 	bl	22158 <z_SysNmiOnReset>
	z_arm_int_exit();
   36bc8:	f7eb fbc4 	bl	22354 <z_arm_exc_exit>
}
   36bcc:	bd08      	pop	{r3, pc}

00036bce <memory_fault_recoverable>:
}
   36bce:	2000      	movs	r0, #0
   36bd0:	4770      	bx	lr

00036bd2 <fault_handle>:
{
   36bd2:	b508      	push	{r3, lr}
	*recoverable = false;
   36bd4:	2300      	movs	r3, #0
   36bd6:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   36bd8:	1ecb      	subs	r3, r1, #3
   36bda:	2b09      	cmp	r3, #9
   36bdc:	d81a      	bhi.n	36c14 <fault_handle+0x42>
   36bde:	e8df f003 	tbb	[pc, r3]
   36be2:	0905      	.short	0x0905
   36be4:	1919110d 	.word	0x1919110d
   36be8:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   36bec:	4611      	mov	r1, r2
   36bee:	f7eb fe45 	bl	2287c <hard_fault>
}
   36bf2:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   36bf4:	2100      	movs	r1, #0
   36bf6:	f7eb fd5f 	bl	226b8 <mem_manage_fault>
		break;
   36bfa:	e7fa      	b.n	36bf2 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   36bfc:	2100      	movs	r1, #0
   36bfe:	f7eb fc83 	bl	22508 <bus_fault>
		break;
   36c02:	e7f6      	b.n	36bf2 <fault_handle+0x20>
		reason = usage_fault(esf);
   36c04:	f7eb fbb4 	bl	22370 <usage_fault>
		break;
   36c08:	e7f3      	b.n	36bf2 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   36c0a:	4611      	mov	r1, r2
   36c0c:	f7eb fc62 	bl	224d4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   36c10:	2000      	movs	r0, #0
		break;
   36c12:	e7ee      	b.n	36bf2 <fault_handle+0x20>
		reserved_exception(esf, fault);
   36c14:	f7eb fed8 	bl	229c8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   36c18:	2000      	movs	r0, #0
	return reason;
   36c1a:	e7ea      	b.n	36bf2 <fault_handle+0x20>

00036c1c <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   36c1c:	6843      	ldr	r3, [r0, #4]
   36c1e:	1e5a      	subs	r2, r3, #1
		&&
   36c20:	4213      	tst	r3, r2
   36c22:	d106      	bne.n	36c32 <mpu_partition_is_valid+0x16>
		&&
   36c24:	2b1f      	cmp	r3, #31
   36c26:	d906      	bls.n	36c36 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   36c28:	6803      	ldr	r3, [r0, #0]
		&&
   36c2a:	421a      	tst	r2, r3
   36c2c:	d005      	beq.n	36c3a <mpu_partition_is_valid+0x1e>
   36c2e:	2000      	movs	r0, #0
   36c30:	4770      	bx	lr
   36c32:	2000      	movs	r0, #0
   36c34:	4770      	bx	lr
   36c36:	2000      	movs	r0, #0
   36c38:	4770      	bx	lr
   36c3a:	2001      	movs	r0, #1
}
   36c3c:	4770      	bx	lr

00036c3e <mpu_configure_region>:
{
   36c3e:	b500      	push	{lr}
   36c40:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   36c42:	680b      	ldr	r3, [r1, #0]
   36c44:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   36c46:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   36c48:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   36c4a:	2b20      	cmp	r3, #32
   36c4c:	d912      	bls.n	36c74 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   36c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   36c52:	d811      	bhi.n	36c78 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   36c54:	3b01      	subs	r3, #1
   36c56:	fab3 f383 	clz	r3, r3
   36c5a:	f1c3 031f 	rsb	r3, r3, #31
   36c5e:	005b      	lsls	r3, r3, #1
   36c60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   36c64:	4313      	orrs	r3, r2
   36c66:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   36c68:	a901      	add	r1, sp, #4
   36c6a:	f7ec f809 	bl	22c80 <region_allocate_and_init>
}
   36c6e:	b005      	add	sp, #20
   36c70:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   36c74:	2308      	movs	r3, #8
   36c76:	e7f5      	b.n	36c64 <mpu_configure_region+0x26>
		return REGION_4G;
   36c78:	233e      	movs	r3, #62	; 0x3e
   36c7a:	e7f3      	b.n	36c64 <mpu_configure_region+0x26>

00036c7c <arm_core_mpu_configure_static_mpu_regions>:
{
   36c7c:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   36c7e:	f7ec f861 	bl	22d44 <mpu_configure_static_mpu_regions>
}
   36c82:	bd08      	pop	{r3, pc}

00036c84 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   36c84:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   36c86:	f7ec f867 	bl	22d58 <mpu_configure_dynamic_mpu_regions>
}
   36c8a:	bd08      	pop	{r3, pc}

00036c8c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   36c8c:	4602      	mov	r2, r0
   36c8e:	780b      	ldrb	r3, [r1, #0]
   36c90:	b11b      	cbz	r3, 36c9a <strcpy+0xe>
		*d = *s;
   36c92:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   36c96:	3101      	adds	r1, #1
   36c98:	e7f9      	b.n	36c8e <strcpy+0x2>
	}

	*d = '\0';
   36c9a:	7013      	strb	r3, [r2, #0]

	return dest;
}
   36c9c:	4770      	bx	lr

00036c9e <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   36c9e:	4603      	mov	r3, r0
   36ca0:	b1a2      	cbz	r2, 36ccc <strncpy+0x2e>
{
   36ca2:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   36ca4:	780c      	ldrb	r4, [r1, #0]
   36ca6:	b12c      	cbz	r4, 36cb4 <strncpy+0x16>
		*d = *s;
   36ca8:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   36cac:	3101      	adds	r1, #1
		d++;
		n--;
   36cae:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   36cb0:	2a00      	cmp	r2, #0
   36cb2:	d1f7      	bne.n	36ca4 <strncpy+0x6>
	}

	while (n > 0) {
   36cb4:	b122      	cbz	r2, 36cc0 <strncpy+0x22>
		*d = '\0';
   36cb6:	2100      	movs	r1, #0
   36cb8:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   36cbc:	3a01      	subs	r2, #1
   36cbe:	e7f9      	b.n	36cb4 <strncpy+0x16>
	}

	return dest;
}
   36cc0:	bc10      	pop	{r4}
   36cc2:	4770      	bx	lr
		*d = '\0';
   36cc4:	2100      	movs	r1, #0
   36cc6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   36cca:	3a01      	subs	r2, #1
	while (n > 0) {
   36ccc:	2a00      	cmp	r2, #0
   36cce:	d1f9      	bne.n	36cc4 <strncpy+0x26>
   36cd0:	4770      	bx	lr

00036cd2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   36cd2:	4603      	mov	r3, r0
	size_t n = 0;
   36cd4:	2000      	movs	r0, #0

	while (*s != '\0') {
   36cd6:	781a      	ldrb	r2, [r3, #0]
   36cd8:	b112      	cbz	r2, 36ce0 <strlen+0xe>
		s++;
   36cda:	3301      	adds	r3, #1
		n++;
   36cdc:	3001      	adds	r0, #1
   36cde:	e7fa      	b.n	36cd6 <strlen+0x4>
	}

	return n;
}
   36ce0:	4770      	bx	lr

00036ce2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   36ce2:	4603      	mov	r3, r0
	size_t n = 0;
   36ce4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   36ce6:	781a      	ldrb	r2, [r3, #0]
   36ce8:	b122      	cbz	r2, 36cf4 <strnlen+0x12>
   36cea:	4288      	cmp	r0, r1
   36cec:	d202      	bcs.n	36cf4 <strnlen+0x12>
		s++;
   36cee:	3301      	adds	r3, #1
		n++;
   36cf0:	3001      	adds	r0, #1
   36cf2:	e7f8      	b.n	36ce6 <strnlen+0x4>
	}

	return n;
}
   36cf4:	4770      	bx	lr

00036cf6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   36cf6:	7803      	ldrb	r3, [r0, #0]
   36cf8:	780a      	ldrb	r2, [r1, #0]
   36cfa:	4293      	cmp	r3, r2
   36cfc:	d103      	bne.n	36d06 <strcmp+0x10>
   36cfe:	b113      	cbz	r3, 36d06 <strcmp+0x10>
		s1++;
   36d00:	3001      	adds	r0, #1
		s2++;
   36d02:	3101      	adds	r1, #1
   36d04:	e7f7      	b.n	36cf6 <strcmp>
	}

	return *s1 - *s2;
}
   36d06:	1a98      	subs	r0, r3, r2
   36d08:	4770      	bx	lr

00036d0a <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   36d0a:	b17a      	cbz	r2, 36d2c <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   36d0c:	1e53      	subs	r3, r2, #1
   36d0e:	d00f      	beq.n	36d30 <memcmp+0x26>
{
   36d10:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   36d12:	7804      	ldrb	r4, [r0, #0]
   36d14:	780a      	ldrb	r2, [r1, #0]
   36d16:	4294      	cmp	r4, r2
   36d18:	d103      	bne.n	36d22 <memcmp+0x18>
		c1++;
   36d1a:	3001      	adds	r0, #1
		c2++;
   36d1c:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   36d1e:	3b01      	subs	r3, #1
   36d20:	d1f7      	bne.n	36d12 <memcmp+0x8>
	}

	return *c1 - *c2;
   36d22:	7800      	ldrb	r0, [r0, #0]
   36d24:	780b      	ldrb	r3, [r1, #0]
   36d26:	1ac0      	subs	r0, r0, r3
}
   36d28:	bc10      	pop	{r4}
   36d2a:	4770      	bx	lr
		return 0;
   36d2c:	2000      	movs	r0, #0
   36d2e:	4770      	bx	lr
	return *c1 - *c2;
   36d30:	7800      	ldrb	r0, [r0, #0]
   36d32:	780b      	ldrb	r3, [r1, #0]
   36d34:	1ac0      	subs	r0, r0, r3
}
   36d36:	4770      	bx	lr

00036d38 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   36d38:	1a43      	subs	r3, r0, r1
   36d3a:	4293      	cmp	r3, r2
   36d3c:	d30b      	bcc.n	36d56 <memmove+0x1e>
	char *dest = d;
   36d3e:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   36d40:	b17a      	cbz	r2, 36d62 <memmove+0x2a>
{
   36d42:	b410      	push	{r4}
			*dest = *src;
   36d44:	f811 4b01 	ldrb.w	r4, [r1], #1
   36d48:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
   36d4c:	3a01      	subs	r2, #1
		while (n > 0) {
   36d4e:	2a00      	cmp	r2, #0
   36d50:	d1f8      	bne.n	36d44 <memmove+0xc>
		}
	}

	return d;
}
   36d52:	bc10      	pop	{r4}
   36d54:	4770      	bx	lr
		while (n > 0) {
   36d56:	b11a      	cbz	r2, 36d60 <memmove+0x28>
			n--;
   36d58:	3a01      	subs	r2, #1
			dest[n] = src[n];
   36d5a:	5c8b      	ldrb	r3, [r1, r2]
   36d5c:	5483      	strb	r3, [r0, r2]
   36d5e:	e7fa      	b.n	36d56 <memmove+0x1e>
   36d60:	4770      	bx	lr
   36d62:	4770      	bx	lr

00036d64 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   36d64:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   36d66:	ea80 0301 	eor.w	r3, r0, r1
   36d6a:	f013 0f03 	tst.w	r3, #3
   36d6e:	d001      	beq.n	36d74 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   36d70:	4603      	mov	r3, r0
   36d72:	e017      	b.n	36da4 <memcpy+0x40>
   36d74:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   36d76:	f013 0f03 	tst.w	r3, #3
   36d7a:	d00b      	beq.n	36d94 <memcpy+0x30>
			if (n == 0) {
   36d7c:	b1a2      	cbz	r2, 36da8 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   36d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   36d82:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   36d86:	3a01      	subs	r2, #1
   36d88:	e7f5      	b.n	36d76 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   36d8a:	f851 4b04 	ldr.w	r4, [r1], #4
   36d8e:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   36d92:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   36d94:	2a03      	cmp	r2, #3
   36d96:	d8f8      	bhi.n	36d8a <memcpy+0x26>
   36d98:	e004      	b.n	36da4 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   36d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   36d9e:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   36da2:	3a01      	subs	r2, #1
	while (n > 0) {
   36da4:	2a00      	cmp	r2, #0
   36da6:	d1f8      	bne.n	36d9a <memcpy+0x36>
	}

	return d;
}
   36da8:	bc10      	pop	{r4}
   36daa:	4770      	bx	lr

00036dac <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   36dac:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   36dae:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   36db0:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   36db2:	f013 0f03 	tst.w	r3, #3
   36db6:	d004      	beq.n	36dc2 <memset+0x16>
		if (n == 0) {
   36db8:	b19a      	cbz	r2, 36de2 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   36dba:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   36dbe:	3a01      	subs	r2, #1
   36dc0:	e7f7      	b.n	36db2 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   36dc2:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   36dc4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   36dc8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   36dcc:	2a03      	cmp	r2, #3
   36dce:	d906      	bls.n	36dde <memset+0x32>
		*(d_word++) = c_word;
   36dd0:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   36dd4:	3a04      	subs	r2, #4
   36dd6:	e7f9      	b.n	36dcc <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   36dd8:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   36ddc:	3a01      	subs	r2, #1
	while (n > 0) {
   36dde:	2a00      	cmp	r2, #0
   36de0:	d1fa      	bne.n	36dd8 <memset+0x2c>
	}

	return buf;
}
   36de2:	bc10      	pop	{r4}
   36de4:	4770      	bx	lr

00036de6 <_stdout_hook_default>:
}
   36de6:	f04f 30ff 	mov.w	r0, #4294967295
   36dea:	4770      	bx	lr

00036dec <smf_set_initial>:
{
   36dec:	b508      	push	{r3, lr}
	internal->exit = false;
   36dee:	7b03      	ldrb	r3, [r0, #12]
	internal->terminate = false;
   36df0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   36df4:	f36f 0341 	bfc	r3, #1, #1
   36df8:	7303      	strb	r3, [r0, #12]
	ctx->current = init_state;
   36dfa:	6001      	str	r1, [r0, #0]
	ctx->previous = NULL;
   36dfc:	2300      	movs	r3, #0
   36dfe:	6043      	str	r3, [r0, #4]
	ctx->terminate_val = 0;
   36e00:	6083      	str	r3, [r0, #8]
	if (init_state->entry) {
   36e02:	680b      	ldr	r3, [r1, #0]
   36e04:	b103      	cbz	r3, 36e08 <smf_set_initial+0x1c>
		init_state->entry(ctx);
   36e06:	4798      	blx	r3
}
   36e08:	bd08      	pop	{r3, pc}

00036e0a <smf_run_state>:
	internal->terminate = true;
	ctx->terminate_val = val;
}

int32_t smf_run_state(struct smf_ctx *const ctx)
{
   36e0a:	b508      	push	{r3, lr}
	struct internal_ctx * const internal = (void *) &ctx->internal;

	/* No need to continue if terminate was set */
	if (internal->terminate) {
   36e0c:	7b03      	ldrb	r3, [r0, #12]
   36e0e:	f013 0f02 	tst.w	r3, #2
   36e12:	d105      	bne.n	36e20 <smf_run_state+0x16>
		return ctx->terminate_val;
	}

	if (ctx->current->run) {
   36e14:	6803      	ldr	r3, [r0, #0]
   36e16:	685b      	ldr	r3, [r3, #4]
   36e18:	b123      	cbz	r3, 36e24 <smf_run_state+0x1a>
		ctx->current->run(ctx);
   36e1a:	4798      	blx	r3
		if (smf_execute_ancestor_run_actions(ctx)) {
			return ctx->terminate_val;
		}
	}

	return 0;
   36e1c:	2000      	movs	r0, #0
}
   36e1e:	bd08      	pop	{r3, pc}
		return ctx->terminate_val;
   36e20:	6880      	ldr	r0, [r0, #8]
   36e22:	e7fc      	b.n	36e1e <smf_run_state+0x14>
	return 0;
   36e24:	2000      	movs	r0, #0
   36e26:	e7fa      	b.n	36e1e <smf_run_state+0x14>

00036e28 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   36e28:	b084      	sub	sp, #16
   36e2a:	ab04      	add	r3, sp, #16
   36e2c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   36e30:	f89d 3004 	ldrb.w	r3, [sp, #4]
   36e34:	2b06      	cmp	r3, #6
   36e36:	d001      	beq.n	36e3c <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   36e38:	b004      	add	sp, #16
   36e3a:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   36e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   36e40:	2201      	movs	r2, #1
   36e42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   36e46:	f3bf 8f4f 	dsb	sy
        __WFE();
   36e4a:	bf20      	wfe
    while (true)
   36e4c:	e7fd      	b.n	36e4a <pm_power_state_set+0x22>

00036e4e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   36e4e:	b084      	sub	sp, #16
   36e50:	ab04      	add	r3, sp, #16
   36e52:	e903 0007 	stmdb	r3, {r0, r1, r2}
   36e56:	2300      	movs	r3, #0
   36e58:	f383 8811 	msr	BASEPRI, r3
   36e5c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   36e60:	b004      	add	sp, #16
   36e62:	4770      	bx	lr

00036e64 <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
   36e64:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
   36e66:	f004 ffc8 	bl	3bdfa <bt_encrypt_le>
#endif
}
   36e6a:	bd08      	pop	{r3, pc}

00036e6c <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   36e6c:	b530      	push	{r4, r5, lr}
   36e6e:	b085      	sub	sp, #20
   36e70:	4604      	mov	r4, r0
   36e72:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   36e74:	2203      	movs	r2, #3
   36e76:	4668      	mov	r0, sp
   36e78:	f7ff ff74 	bl	36d64 <memcpy>
	(void)memset(res + 3, 0, 13);
   36e7c:	220d      	movs	r2, #13
   36e7e:	2100      	movs	r1, #0
   36e80:	f10d 0003 	add.w	r0, sp, #3
   36e84:	f7ff ff92 	bl	36dac <memset>

	err = internal_encrypt_le(irk, res, res);
   36e88:	466a      	mov	r2, sp
   36e8a:	4669      	mov	r1, sp
   36e8c:	4620      	mov	r0, r4
   36e8e:	f7ff ffe9 	bl	36e64 <internal_encrypt_le>
	if (err) {
   36e92:	4604      	mov	r4, r0
   36e94:	b110      	cbz	r0, 36e9c <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   36e96:	4620      	mov	r0, r4
   36e98:	b005      	add	sp, #20
   36e9a:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   36e9c:	2203      	movs	r2, #3
   36e9e:	4669      	mov	r1, sp
   36ea0:	4628      	mov	r0, r5
   36ea2:	f7ff ff5f 	bl	36d64 <memcpy>
	return 0;
   36ea6:	e7f6      	b.n	36e96 <ah+0x2a>

00036ea8 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   36ea8:	b510      	push	{r4, lr}
   36eaa:	b082      	sub	sp, #8
   36eac:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   36eae:	aa01      	add	r2, sp, #4
   36eb0:	3103      	adds	r1, #3
   36eb2:	f7ff ffdb 	bl	36e6c <ah>
	if (err) {
   36eb6:	b110      	cbz	r0, 36ebe <bt_rpa_irk_matches+0x16>
		return false;
   36eb8:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   36eba:	b002      	add	sp, #8
   36ebc:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
   36ebe:	2203      	movs	r2, #3
   36ec0:	a901      	add	r1, sp, #4
   36ec2:	4620      	mov	r0, r4
   36ec4:	f7ff ff21 	bl	36d0a <memcmp>
   36ec8:	fab0 f080 	clz	r0, r0
   36ecc:	0940      	lsrs	r0, r0, #5
   36ece:	e7f4      	b.n	36eba <bt_rpa_irk_matches+0x12>

00036ed0 <clear_ecc_events>:
	cmd = (void *)(buf->data + sizeof(struct bt_hci_cmd_hdr));
   36ed0:	6883      	ldr	r3, [r0, #8]
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   36ed2:	78da      	ldrb	r2, [r3, #3]
   36ed4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   36ed8:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   36eda:	791a      	ldrb	r2, [r3, #4]
   36edc:	f022 0201 	bic.w	r2, r2, #1
   36ee0:	711a      	strb	r2, [r3, #4]
}
   36ee2:	4770      	bx	lr

00036ee4 <send_cmd_status>:
{
   36ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36ee8:	4606      	mov	r6, r0
   36eea:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   36eec:	f04f 32ff 	mov.w	r2, #4294967295
   36ef0:	f04f 33ff 	mov.w	r3, #4294967295
   36ef4:	2100      	movs	r1, #0
   36ef6:	200f      	movs	r0, #15
   36ef8:	f7ec fba2 	bl	23640 <bt_buf_get_evt>
   36efc:	4604      	mov	r4, r0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   36efe:	2701      	movs	r7, #1
   36f00:	7507      	strb	r7, [r0, #20]
	return net_buf_simple_add(&buf->b, len);
   36f02:	f100 0808 	add.w	r8, r0, #8
   36f06:	2102      	movs	r1, #2
   36f08:	4640      	mov	r0, r8
   36f0a:	f003 fdd2 	bl	3aab2 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   36f0e:	230f      	movs	r3, #15
   36f10:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   36f12:	2104      	movs	r1, #4
   36f14:	7041      	strb	r1, [r0, #1]
   36f16:	4640      	mov	r0, r8
   36f18:	f003 fdcb 	bl	3aab2 <net_buf_simple_add>
	evt->ncmd = 1U;
   36f1c:	7047      	strb	r7, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
   36f1e:	8046      	strh	r6, [r0, #2]
	evt->status = status;
   36f20:	7005      	strb	r5, [r0, #0]
		bt_recv(buf);
   36f22:	4620      	mov	r0, r4
   36f24:	f7ee fb4e 	bl	255c4 <bt_recv>
}
   36f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036f2c <le_gen_dhkey_v1>:
{
   36f2c:	b538      	push	{r3, r4, r5, lr}
   36f2e:	4604      	mov	r4, r0
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   36f30:	2100      	movs	r1, #0
   36f32:	6880      	ldr	r0, [r0, #8]
   36f34:	f7ec f93a 	bl	231ac <le_gen_dhkey>
   36f38:	4605      	mov	r5, r0
	net_buf_unref(buf);
   36f3a:	4620      	mov	r0, r4
   36f3c:	f003 fd6f 	bl	3aa1e <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   36f40:	4629      	mov	r1, r5
   36f42:	f242 0026 	movw	r0, #8230	; 0x2026
   36f46:	f7ff ffcd 	bl	36ee4 <send_cmd_status>
}
   36f4a:	bd38      	pop	{r3, r4, r5, pc}

00036f4c <le_gen_dhkey_v2>:
{
   36f4c:	b538      	push	{r3, r4, r5, lr}
   36f4e:	4604      	mov	r4, r0
	cmd = (void *)buf->data;
   36f50:	6880      	ldr	r0, [r0, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   36f52:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   36f56:	f7ec f929 	bl	231ac <le_gen_dhkey>
   36f5a:	4605      	mov	r5, r0
	net_buf_unref(buf);
   36f5c:	4620      	mov	r0, r4
   36f5e:	f003 fd5e 	bl	3aa1e <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   36f62:	4629      	mov	r1, r5
   36f64:	f242 005e 	movw	r0, #8286	; 0x205e
   36f68:	f7ff ffbc 	bl	36ee4 <send_cmd_status>
}
   36f6c:	bd38      	pop	{r3, r4, r5, pc}

00036f6e <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(1);
   36f6e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	supported_commands[34] |= BIT(2);
   36f72:	f043 0306 	orr.w	r3, r3, #6
   36f76:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   36f7a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   36f7e:	f043 0304 	orr.w	r3, r3, #4
   36f82:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   36f86:	4770      	bx	lr

00036f88 <default_CSPRNG>:
{
   36f88:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   36f8a:	f7f7 fc3b 	bl	2e804 <bt_rand>
}
   36f8e:	fab0 f080 	clz	r0, r0
   36f92:	0940      	lsrs	r0, r0, #5
   36f94:	bd08      	pop	{r3, pc}

00036f96 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   36f96:	b510      	push	{r4, lr}
   36f98:	b08a      	sub	sp, #40	; 0x28
   36f9a:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   36f9c:	a905      	add	r1, sp, #20
   36f9e:	f7ec faf3 	bl	23588 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   36fa2:	4669      	mov	r1, sp
   36fa4:	4620      	mov	r0, r4
   36fa6:	f7ec faef 	bl	23588 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   36faa:	2210      	movs	r2, #16
   36fac:	f10d 0101 	add.w	r1, sp, #1
   36fb0:	f10d 0015 	add.w	r0, sp, #21
   36fb4:	f7ff fea9 	bl	36d0a <memcmp>
}
   36fb8:	b00a      	add	sp, #40	; 0x28
   36fba:	bd10      	pop	{r4, pc}

00036fbc <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   36fbc:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   36fbe:	7803      	ldrb	r3, [r0, #0]
   36fc0:	780a      	ldrb	r2, [r1, #0]
   36fc2:	4293      	cmp	r3, r2
   36fc4:	d107      	bne.n	36fd6 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   36fc6:	2b01      	cmp	r3, #1
   36fc8:	d00c      	beq.n	36fe4 <bt_uuid_cmp+0x28>
   36fca:	2b02      	cmp	r3, #2
   36fcc:	d00e      	beq.n	36fec <bt_uuid_cmp+0x30>
   36fce:	b12b      	cbz	r3, 36fdc <bt_uuid_cmp+0x20>
   36fd0:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   36fd4:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   36fd6:	f7ff ffde 	bl	36f96 <uuid128_cmp>
   36fda:	e7fb      	b.n	36fd4 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   36fdc:	8840      	ldrh	r0, [r0, #2]
   36fde:	884b      	ldrh	r3, [r1, #2]
   36fe0:	1ac0      	subs	r0, r0, r3
   36fe2:	e7f7      	b.n	36fd4 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   36fe4:	6840      	ldr	r0, [r0, #4]
   36fe6:	684b      	ldr	r3, [r1, #4]
   36fe8:	1ac0      	subs	r0, r0, r3
   36fea:	e7f3      	b.n	36fd4 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   36fec:	2210      	movs	r2, #16
   36fee:	3101      	adds	r1, #1
   36ff0:	3001      	adds	r0, #1
   36ff2:	f7ff fe8a 	bl	36d0a <memcmp>
   36ff6:	e7ed      	b.n	36fd4 <bt_uuid_cmp+0x18>

00036ff8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   36ff8:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   36ffa:	2a04      	cmp	r2, #4
   36ffc:	d00e      	beq.n	3701c <bt_uuid_create+0x24>
   36ffe:	2a10      	cmp	r2, #16
   37000:	d01b      	beq.n	3703a <bt_uuid_create+0x42>
   37002:	2a02      	cmp	r2, #2
   37004:	d001      	beq.n	3700a <bt_uuid_create+0x12>
   37006:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   37008:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
   3700a:	2300      	movs	r3, #0
   3700c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   3700e:	784a      	ldrb	r2, [r1, #1]
   37010:	780b      	ldrb	r3, [r1, #0]
   37012:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   37016:	8043      	strh	r3, [r0, #2]
	return true;
   37018:	2001      	movs	r0, #1
		break;
   3701a:	e7f5      	b.n	37008 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   3701c:	2301      	movs	r3, #1
   3701e:	7003      	strb	r3, [r0, #0]
   37020:	78cc      	ldrb	r4, [r1, #3]
   37022:	788a      	ldrb	r2, [r1, #2]
   37024:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   37028:	784d      	ldrb	r5, [r1, #1]
   3702a:	780a      	ldrb	r2, [r1, #0]
   3702c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   37030:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   37034:	6042      	str	r2, [r0, #4]
	return true;
   37036:	4618      	mov	r0, r3
		break;
   37038:	e7e6      	b.n	37008 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   3703a:	2302      	movs	r3, #2
   3703c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   37040:	2210      	movs	r2, #16
   37042:	f7ff fe8f 	bl	36d64 <memcpy>
	return true;
   37046:	2001      	movs	r0, #1
		break;
   37048:	e7de      	b.n	37008 <bt_uuid_create+0x10>

0003704a <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   3704a:	b510      	push	{r4, lr}
   3704c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   3704e:	2301      	movs	r3, #1
   37050:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   37054:	2106      	movs	r1, #6
   37056:	f7f7 fbd5 	bl	2e804 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   3705a:	b918      	cbnz	r0, 37064 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   3705c:	79a3      	ldrb	r3, [r4, #6]
   3705e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   37062:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   37064:	bd10      	pop	{r4, pc}

00037066 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   37066:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   3706a:	b17b      	cbz	r3, 3708c <update_sec_level+0x26>
   3706c:	7b5a      	ldrb	r2, [r3, #13]
   3706e:	f012 0f01 	tst.w	r2, #1
   37072:	d00b      	beq.n	3708c <update_sec_level+0x26>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   37074:	f012 0f10 	tst.w	r2, #16
   37078:	d002      	beq.n	37080 <update_sec_level+0x1a>
		    conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE) {
   3707a:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys->flags & BT_KEYS_SC &&
   3707c:	2b10      	cmp	r3, #16
   3707e:	d002      	beq.n	37086 <update_sec_level+0x20>
			conn->sec_level = BT_SECURITY_L3;
   37080:	2303      	movs	r3, #3
   37082:	7243      	strb	r3, [r0, #9]
   37084:	e004      	b.n	37090 <update_sec_level+0x2a>
			conn->sec_level = BT_SECURITY_L4;
   37086:	2304      	movs	r3, #4
   37088:	7243      	strb	r3, [r0, #9]
   3708a:	e001      	b.n	37090 <update_sec_level+0x2a>
		conn->sec_level = BT_SECURITY_L2;
   3708c:	2302      	movs	r3, #2
   3708e:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   37090:	7a82      	ldrb	r2, [r0, #10]
   37092:	7a40      	ldrb	r0, [r0, #9]
}
   37094:	4282      	cmp	r2, r0
   37096:	bf8c      	ite	hi
   37098:	2000      	movhi	r0, #0
   3709a:	2001      	movls	r0, #1
   3709c:	4770      	bx	lr

0003709e <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   3709e:	b108      	cbz	r0, 370a4 <find_pending_connect+0x6>
	return NULL;
   370a0:	2000      	movs	r0, #0
}
   370a2:	4770      	bx	lr
{
   370a4:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   370a6:	2206      	movs	r2, #6
   370a8:	f7f0 fa22 	bl	274f0 <bt_conn_lookup_state_le>
}
   370ac:	bd08      	pop	{r3, pc}

000370ae <hci_disconn_complete_prio>:
{
   370ae:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   370b0:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   370b2:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   370b6:	781b      	ldrb	r3, [r3, #0]
   370b8:	b103      	cbz	r3, 370bc <hci_disconn_complete_prio+0xe>
}
   370ba:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   370bc:	4620      	mov	r0, r4
   370be:	f7ef ff2d 	bl	26f1c <bt_conn_lookup_handle>
	if (!conn) {
   370c2:	4605      	mov	r5, r0
   370c4:	b130      	cbz	r0, 370d4 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   370c6:	2101      	movs	r1, #1
   370c8:	f7ef ff32 	bl	26f30 <bt_conn_set_state>
	bt_conn_unref(conn);
   370cc:	4628      	mov	r0, r5
   370ce:	f000 fb67 	bl	377a0 <bt_conn_unref>
   370d2:	e7f2      	b.n	370ba <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   370d4:	4620      	mov	r0, r4
   370d6:	f7ec fae5 	bl	236a4 <conn_handle_disconnected>
		return;
   370da:	e7ee      	b.n	370ba <hci_disconn_complete_prio+0xc>

000370dc <bt_get_phy>:
	switch (hci_phy) {
   370dc:	2802      	cmp	r0, #2
   370de:	d004      	beq.n	370ea <bt_get_phy+0xe>
   370e0:	2803      	cmp	r0, #3
   370e2:	d004      	beq.n	370ee <bt_get_phy+0x12>
   370e4:	2801      	cmp	r0, #1
   370e6:	d001      	beq.n	370ec <bt_get_phy+0x10>
		return 0;
   370e8:	2000      	movs	r0, #0
}
   370ea:	4770      	bx	lr
   370ec:	4770      	bx	lr
		return BT_GAP_LE_PHY_CODED;
   370ee:	2004      	movs	r0, #4
   370f0:	4770      	bx	lr

000370f2 <bt_le_create_conn>:
{
   370f2:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   370f4:	f7ed fcd8 	bl	24aa8 <bt_le_create_conn_legacy>
}
   370f8:	bd08      	pop	{r3, pc}

000370fa <bt_hci_disconnect>:
{
   370fa:	b570      	push	{r4, r5, r6, lr}
   370fc:	4605      	mov	r5, r0
   370fe:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   37100:	2103      	movs	r1, #3
   37102:	f240 4006 	movw	r0, #1030	; 0x406
   37106:	f7ed f8e3 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   3710a:	b168      	cbz	r0, 37128 <bt_hci_disconnect+0x2e>
   3710c:	4606      	mov	r6, r0
   3710e:	2103      	movs	r1, #3
   37110:	3008      	adds	r0, #8
   37112:	f003 fcce 	bl	3aab2 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   37116:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   37118:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   3711a:	2200      	movs	r2, #0
   3711c:	4631      	mov	r1, r6
   3711e:	f240 4006 	movw	r0, #1030	; 0x406
   37122:	f7ed f911 	bl	24348 <bt_hci_cmd_send_sync>
}
   37126:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   37128:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3712c:	e7fb      	b.n	37126 <bt_hci_disconnect+0x2c>

0003712e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   3712e:	8802      	ldrh	r2, [r0, #0]
   37130:	8843      	ldrh	r3, [r0, #2]
   37132:	429a      	cmp	r2, r3
   37134:	d819      	bhi.n	3716a <bt_le_conn_params_valid+0x3c>
   37136:	2a05      	cmp	r2, #5
   37138:	d919      	bls.n	3716e <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   3713a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   3713e:	d818      	bhi.n	37172 <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   37140:	8881      	ldrh	r1, [r0, #4]
   37142:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   37146:	d216      	bcs.n	37176 <bt_le_conn_params_valid+0x48>
{
   37148:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   3714a:	88c0      	ldrh	r0, [r0, #6]
   3714c:	f1a0 020a 	sub.w	r2, r0, #10
   37150:	b292      	uxth	r2, r2
   37152:	f640 4476 	movw	r4, #3190	; 0xc76
   37156:	42a2      	cmp	r2, r4
   37158:	d80f      	bhi.n	3717a <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   3715a:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   3715e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   37162:	d20c      	bcs.n	3717e <bt_le_conn_params_valid+0x50>
	return true;
   37164:	2001      	movs	r0, #1
}
   37166:	bc10      	pop	{r4}
   37168:	4770      	bx	lr
		return false;
   3716a:	2000      	movs	r0, #0
   3716c:	4770      	bx	lr
   3716e:	2000      	movs	r0, #0
   37170:	4770      	bx	lr
   37172:	2000      	movs	r0, #0
   37174:	4770      	bx	lr
		return false;
   37176:	2000      	movs	r0, #0
}
   37178:	4770      	bx	lr
		return false;
   3717a:	2000      	movs	r0, #0
   3717c:	e7f3      	b.n	37166 <bt_le_conn_params_valid+0x38>
   3717e:	2000      	movs	r0, #0
   37180:	e7f1      	b.n	37166 <bt_le_conn_params_valid+0x38>

00037182 <bt_security_err_get>:
	switch (hci_err) {
   37182:	2829      	cmp	r0, #41	; 0x29
   37184:	d81e      	bhi.n	371c4 <bt_security_err_get+0x42>
   37186:	e8df f000 	tbb	[pc, r0]
   3718a:	1d20      	.short	0x1d20
   3718c:	1f1d1d1d 	.word	0x1f1d1d1d
   37190:	1d1d1d15 	.word	0x1d1d1d15
   37194:	1d1d1d1d 	.word	0x1d1d1d1d
   37198:	1d1d1d1d 	.word	0x1d1d1d1d
   3719c:	1d1d1d1b 	.word	0x1d1d1d1b
   371a0:	1d191d1d 	.word	0x1d191d1d
   371a4:	1d1d1d1d 	.word	0x1d1d1d1d
   371a8:	1d1d1d1d 	.word	0x1d1d1d1d
   371ac:	1d1d1d1d 	.word	0x1d1d1d1d
   371b0:	171d1d1d 	.word	0x171d1d1d
		return BT_SECURITY_ERR_PIN_OR_KEY_MISSING;
   371b4:	2002      	movs	r0, #2
   371b6:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   371b8:	2005      	movs	r0, #5
   371ba:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   371bc:	2006      	movs	r0, #6
   371be:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   371c0:	2007      	movs	r0, #7
   371c2:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   371c4:	2009      	movs	r0, #9
   371c6:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_FAIL;
   371c8:	2001      	movs	r0, #1
}
   371ca:	4770      	bx	lr

000371cc <bt_send>:
{
   371cc:	b508      	push	{r3, lr}
		return bt_hci_ecc_send(buf);
   371ce:	f7ec f979 	bl	234c4 <bt_hci_ecc_send>
}
   371d2:	bd08      	pop	{r3, pc}

000371d4 <bt_le_set_data_len>:
{
   371d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   371d6:	4606      	mov	r6, r0
   371d8:	460f      	mov	r7, r1
   371da:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   371dc:	2106      	movs	r1, #6
   371de:	f242 0022 	movw	r0, #8226	; 0x2022
   371e2:	f7ed f875 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   371e6:	b170      	cbz	r0, 37206 <bt_le_set_data_len+0x32>
   371e8:	4605      	mov	r5, r0
   371ea:	2106      	movs	r1, #6
   371ec:	3008      	adds	r0, #8
   371ee:	f003 fc60 	bl	3aab2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   371f2:	8833      	ldrh	r3, [r6, #0]
   371f4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   371f6:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   371f8:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   371fa:	4629      	mov	r1, r5
   371fc:	f242 0022 	movw	r0, #8226	; 0x2022
   37200:	f7ed fd8c 	bl	24d1c <bt_hci_cmd_send>
}
   37204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   37206:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3720a:	e7fb      	b.n	37204 <bt_le_set_data_len+0x30>

0003720c <hci_le_read_remote_features>:
{
   3720c:	b538      	push	{r3, r4, r5, lr}
   3720e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   37210:	2102      	movs	r1, #2
   37212:	f242 0016 	movw	r0, #8214	; 0x2016
   37216:	f7ed f85b 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   3721a:	b168      	cbz	r0, 37238 <hci_le_read_remote_features+0x2c>
   3721c:	4605      	mov	r5, r0
   3721e:	2102      	movs	r1, #2
   37220:	3008      	adds	r0, #8
   37222:	f003 fc46 	bl	3aab2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   37226:	8823      	ldrh	r3, [r4, #0]
   37228:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   3722a:	4629      	mov	r1, r5
   3722c:	f242 0016 	movw	r0, #8214	; 0x2016
   37230:	f7ed fd74 	bl	24d1c <bt_hci_cmd_send>
	return 0;
   37234:	2000      	movs	r0, #0
}
   37236:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   37238:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3723c:	e7fb      	b.n	37236 <hci_le_read_remote_features+0x2a>

0003723e <enh_conn_complete>:
{
   3723e:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   37240:	f7ed fdfa 	bl	24e38 <bt_hci_le_enh_conn_complete>
}
   37244:	bd08      	pop	{r3, pc}

00037246 <le_enh_conn_complete>:
{
   37246:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   37248:	6880      	ldr	r0, [r0, #8]
   3724a:	f7ff fff8 	bl	3723e <enh_conn_complete>
}
   3724e:	bd08      	pop	{r3, pc}

00037250 <le_legacy_conn_complete>:
{
   37250:	b510      	push	{r4, lr}
   37252:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   37254:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   37256:	780b      	ldrb	r3, [r1, #0]
   37258:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   3725c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   37260:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   37264:	78cb      	ldrb	r3, [r1, #3]
   37266:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   3726a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   3726e:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   37272:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   37276:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   3727a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   3727e:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   37282:	7c4b      	ldrb	r3, [r1, #17]
   37284:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   37288:	2207      	movs	r2, #7
   3728a:	3104      	adds	r1, #4
   3728c:	a801      	add	r0, sp, #4
   3728e:	f7ff fd69 	bl	36d64 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   37292:	2400      	movs	r4, #0
   37294:	940a      	str	r4, [sp, #40]	; 0x28
   37296:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   3729a:	2206      	movs	r2, #6
   3729c:	a90a      	add	r1, sp, #40	; 0x28
   3729e:	f10d 000b 	add.w	r0, sp, #11
   372a2:	f7ff fd5f 	bl	36d64 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   372a6:	9408      	str	r4, [sp, #32]
   372a8:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   372ac:	2206      	movs	r2, #6
   372ae:	a908      	add	r1, sp, #32
   372b0:	f10d 0011 	add.w	r0, sp, #17
   372b4:	f7ff fd56 	bl	36d64 <memcpy>
	enh_conn_complete(&enh);
   372b8:	4668      	mov	r0, sp
   372ba:	f7ff ffc0 	bl	3723e <enh_conn_complete>
}
   372be:	b00c      	add	sp, #48	; 0x30
   372c0:	bd10      	pop	{r4, pc}

000372c2 <le_conn_param_req_reply>:
{
   372c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   372c4:	4606      	mov	r6, r0
   372c6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   372c8:	210e      	movs	r1, #14
   372ca:	f242 0020 	movw	r0, #8224	; 0x2020
   372ce:	f7ec ffff 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   372d2:	b1c0      	cbz	r0, 37306 <le_conn_param_req_reply+0x44>
   372d4:	4607      	mov	r7, r0
   372d6:	210e      	movs	r1, #14
   372d8:	3008      	adds	r0, #8
   372da:	f003 fbea 	bl	3aab2 <net_buf_simple_add>
   372de:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   372e0:	220e      	movs	r2, #14
   372e2:	2100      	movs	r1, #0
   372e4:	f7ff fd62 	bl	36dac <memset>
	cp->handle = sys_cpu_to_le16(handle);
   372e8:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   372ea:	882b      	ldrh	r3, [r5, #0]
   372ec:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   372ee:	886b      	ldrh	r3, [r5, #2]
   372f0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   372f2:	88ab      	ldrh	r3, [r5, #4]
   372f4:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   372f6:	88eb      	ldrh	r3, [r5, #6]
   372f8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   372fa:	4639      	mov	r1, r7
   372fc:	f242 0020 	movw	r0, #8224	; 0x2020
   37300:	f7ed fd0c 	bl	24d1c <bt_hci_cmd_send>
}
   37304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   37306:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3730a:	e7fb      	b.n	37304 <le_conn_param_req_reply+0x42>

0003730c <bt_init>:
{
   3730c:	b510      	push	{r4, lr}
	err = hci_init();
   3730e:	f7ed fb57 	bl	249c0 <hci_init>
	if (err) {
   37312:	4604      	mov	r4, r0
   37314:	b108      	cbz	r0, 3731a <bt_init+0xe>
}
   37316:	4620      	mov	r0, r4
   37318:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   3731a:	f7f0 fb3d 	bl	27998 <bt_conn_init>
		if (err) {
   3731e:	4604      	mov	r4, r0
   37320:	2800      	cmp	r0, #0
   37322:	d1f8      	bne.n	37316 <bt_init+0xa>
	bt_finalize_init();
   37324:	f7ee f9ba 	bl	2569c <bt_finalize_init>
	return 0;
   37328:	e7f5      	b.n	37316 <bt_init+0xa>

0003732a <bt_addr_le_is_bonded>:
{
   3732a:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   3732c:	f7f5 fcba 	bl	2cca4 <bt_keys_find_addr>
		return keys && keys->keys;
   37330:	b118      	cbz	r0, 3733a <bt_addr_le_is_bonded+0x10>
   37332:	89c3      	ldrh	r3, [r0, #14]
   37334:	b91b      	cbnz	r3, 3733e <bt_addr_le_is_bonded+0x14>
   37336:	2000      	movs	r0, #0
}
   37338:	bd08      	pop	{r3, pc}
		return keys && keys->keys;
   3733a:	2000      	movs	r0, #0
   3733c:	e7fc      	b.n	37338 <bt_addr_le_is_bonded+0xe>
   3733e:	2001      	movs	r0, #1
   37340:	e7fa      	b.n	37338 <bt_addr_le_is_bonded+0xe>

00037342 <is_adv_using_rand_addr>:
}
   37342:	2000      	movs	r0, #0
   37344:	4770      	bx	lr

00037346 <hci_id_add>:
{
   37346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37348:	460e      	mov	r6, r1
   3734a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   3734c:	2127      	movs	r1, #39	; 0x27
   3734e:	f242 0027 	movw	r0, #8231	; 0x2027
   37352:	f7ec ffbd 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   37356:	b1d8      	cbz	r0, 37390 <hci_id_add+0x4a>
   37358:	4607      	mov	r7, r0
   3735a:	2127      	movs	r1, #39	; 0x27
   3735c:	3008      	adds	r0, #8
   3735e:	f003 fba8 	bl	3aab2 <net_buf_simple_add>
   37362:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   37364:	2207      	movs	r2, #7
   37366:	4631      	mov	r1, r6
   37368:	f7ff fcfc 	bl	36d64 <memcpy>
	memcpy(cp->peer_irk, peer_irk, 16);
   3736c:	2210      	movs	r2, #16
   3736e:	4629      	mov	r1, r5
   37370:	1de0      	adds	r0, r4, #7
   37372:	f7ff fcf7 	bl	36d64 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   37376:	2210      	movs	r2, #16
   37378:	2100      	movs	r1, #0
   3737a:	f104 0017 	add.w	r0, r4, #23
   3737e:	f7ff fd15 	bl	36dac <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   37382:	2200      	movs	r2, #0
   37384:	4639      	mov	r1, r7
   37386:	f242 0027 	movw	r0, #8231	; 0x2027
   3738a:	f7ec ffdd 	bl	24348 <bt_hci_cmd_send_sync>
}
   3738e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   37390:	f06f 0068 	mvn.w	r0, #104	; 0x68
   37394:	e7fb      	b.n	3738e <hci_id_add+0x48>

00037396 <keys_add_id>:
{
   37396:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   37398:	7a03      	ldrb	r3, [r0, #8]
   3739a:	f013 0f04 	tst.w	r3, #4
   3739e:	d100      	bne.n	373a2 <keys_add_id+0xc>
}
   373a0:	bd08      	pop	{r3, pc}
   373a2:	4601      	mov	r1, r0
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   373a4:	4602      	mov	r2, r0
   373a6:	f812 0b2a 	ldrb.w	r0, [r2], #42
   373aa:	3101      	adds	r1, #1
   373ac:	f7ff ffcb 	bl	37346 <hci_id_add>
}
   373b0:	e7f6      	b.n	373a0 <keys_add_id+0xa>

000373b2 <hci_id_del>:
{
   373b2:	b538      	push	{r3, r4, r5, lr}
   373b4:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   373b6:	2107      	movs	r1, #7
   373b8:	f242 0028 	movw	r0, #8232	; 0x2028
   373bc:	f7ec ff88 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   373c0:	b178      	cbz	r0, 373e2 <hci_id_del+0x30>
   373c2:	4605      	mov	r5, r0
   373c4:	2107      	movs	r1, #7
   373c6:	3008      	adds	r0, #8
   373c8:	f003 fb73 	bl	3aab2 <net_buf_simple_add>
   373cc:	2207      	movs	r2, #7
   373ce:	4621      	mov	r1, r4
   373d0:	f7ff fcc8 	bl	36d64 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   373d4:	2200      	movs	r2, #0
   373d6:	4629      	mov	r1, r5
   373d8:	f242 0028 	movw	r0, #8232	; 0x2028
   373dc:	f7ec ffb4 	bl	24348 <bt_hci_cmd_send_sync>
}
   373e0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   373e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   373e6:	e7fb      	b.n	373e0 <hci_id_del+0x2e>

000373e8 <addr_res_enable>:
{
   373e8:	b538      	push	{r3, r4, r5, lr}
   373ea:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   373ec:	2101      	movs	r1, #1
   373ee:	f242 002d 	movw	r0, #8237	; 0x202d
   373f2:	f7ec ff6d 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   373f6:	b158      	cbz	r0, 37410 <addr_res_enable+0x28>
   373f8:	4605      	mov	r5, r0
	return net_buf_simple_add_u8(&buf->b, val);
   373fa:	4621      	mov	r1, r4
   373fc:	3008      	adds	r0, #8
   373fe:	f003 fb69 	bl	3aad4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   37402:	2200      	movs	r2, #0
   37404:	4629      	mov	r1, r5
   37406:	f242 002d 	movw	r0, #8237	; 0x202d
   3740a:	f7ec ff9d 	bl	24348 <bt_hci_cmd_send_sync>
}
   3740e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   37410:	f06f 0068 	mvn.w	r0, #104	; 0x68
   37414:	e7fb      	b.n	3740e <addr_res_enable+0x26>

00037416 <bt_lookup_id_addr>:
{
   37416:	b510      	push	{r4, lr}
   37418:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   3741a:	f7f5 fbdb 	bl	2cbd4 <bt_keys_find_irk>
		if (keys) {
   3741e:	b108      	cbz	r0, 37424 <bt_lookup_id_addr+0xe>
			return &keys->addr;
   37420:	3001      	adds	r0, #1
}
   37422:	bd10      	pop	{r4, pc}
	return addr;
   37424:	4620      	mov	r0, r4
   37426:	e7fc      	b.n	37422 <bt_lookup_id_addr+0xc>

00037428 <bt_id_set_private_addr>:
{
   37428:	b500      	push	{lr}
   3742a:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   3742c:	2106      	movs	r1, #6
   3742e:	4668      	mov	r0, sp
   37430:	f7f7 f9e8 	bl	2e804 <bt_rand>
	if (err) {
   37434:	b110      	cbz	r0, 3743c <bt_id_set_private_addr+0x14>
}
   37436:	b003      	add	sp, #12
   37438:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   3743c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   37440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   37444:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   37448:	4668      	mov	r0, sp
   3744a:	f7ee fa4d 	bl	258e8 <set_random_address>
	if (err)  {
   3744e:	e7f2      	b.n	37436 <bt_id_set_private_addr+0xe>

00037450 <bt_id_scan_random_addr_check>:
}
   37450:	2001      	movs	r0, #1
   37452:	4770      	bx	lr

00037454 <pending_id_update>:
{
   37454:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   37456:	7a03      	ldrb	r3, [r0, #8]
   37458:	f013 0f01 	tst.w	r3, #1
   3745c:	d103      	bne.n	37466 <pending_id_update+0x12>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   3745e:	f013 0f02 	tst.w	r3, #2
   37462:	d106      	bne.n	37472 <pending_id_update+0x1e>
}
   37464:	bd08      	pop	{r3, pc}
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   37466:	f023 0301 	bic.w	r3, r3, #1
   3746a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   3746c:	f7ee fb14 	bl	25a98 <bt_id_add>
		return;
   37470:	e7f8      	b.n	37464 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   37472:	f023 0302 	bic.w	r3, r3, #2
   37476:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   37478:	f7ee fbec 	bl	25c54 <bt_id_del>
		return;
   3747c:	e7f2      	b.n	37464 <pending_id_update+0x10>

0003747e <get_adv_props_legacy>:
	switch (evt_type) {
   3747e:	2804      	cmp	r0, #4
   37480:	d80a      	bhi.n	37498 <get_adv_props_legacy+0x1a>
   37482:	e8df f000 	tbb	[pc, r0]
   37486:	0b03      	.short	0x0b03
   37488:	050c      	.short	0x050c
   3748a:	07          	.byte	0x07
   3748b:	00          	.byte	0x00
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   3748c:	2003      	movs	r0, #3
   3748e:	4770      	bx	lr
		return 0;
   37490:	2000      	movs	r0, #0
   37492:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   37494:	200a      	movs	r0, #10
   37496:	4770      	bx	lr
		return 0;
   37498:	2000      	movs	r0, #0
   3749a:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   3749c:	2005      	movs	r0, #5
}
   3749e:	4770      	bx	lr

000374a0 <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   374a0:	7803      	ldrb	r3, [r0, #0]
   374a2:	2b01      	cmp	r3, #1
   374a4:	d815      	bhi.n	374d2 <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   374a6:	6843      	ldr	r3, [r0, #4]
   374a8:	f033 030f 	bics.w	r3, r3, #15
   374ac:	d113      	bne.n	374d6 <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   374ae:	8902      	ldrh	r2, [r0, #8]
   374b0:	1f13      	subs	r3, r2, #4
   374b2:	b29b      	uxth	r3, r3
   374b4:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   374b8:	428b      	cmp	r3, r1
   374ba:	d80e      	bhi.n	374da <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   374bc:	8941      	ldrh	r1, [r0, #10]
   374be:	1f0b      	subs	r3, r1, #4
   374c0:	b29b      	uxth	r3, r3
   374c2:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   374c6:	4283      	cmp	r3, r0
   374c8:	d809      	bhi.n	374de <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   374ca:	428a      	cmp	r2, r1
   374cc:	d309      	bcc.n	374e2 <valid_le_scan_param+0x42>
	return true;
   374ce:	2001      	movs	r0, #1
   374d0:	4770      	bx	lr
		return false;
   374d2:	2000      	movs	r0, #0
   374d4:	4770      	bx	lr
		return false;
   374d6:	2000      	movs	r0, #0
   374d8:	4770      	bx	lr
		return false;
   374da:	2000      	movs	r0, #0
   374dc:	4770      	bx	lr
		return false;
   374de:	2000      	movs	r0, #0
   374e0:	4770      	bx	lr
		return false;
   374e2:	2000      	movs	r0, #0
}
   374e4:	4770      	bx	lr

000374e6 <bt_le_scan_set_enable>:
{
   374e6:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   374e8:	f7ee fe42 	bl	26170 <bt_le_scan_set_enable_legacy>
}
   374ec:	bd08      	pop	{r3, pc}

000374ee <start_passive_scan>:
{
   374ee:	b508      	push	{r3, lr}
	if (fast_scan) {
   374f0:	b128      	cbz	r0, 374fe <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   374f2:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   374f4:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   374f6:	2000      	movs	r0, #0
   374f8:	f7ee fe76 	bl	261e8 <start_le_scan_legacy>
}
   374fc:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   374fe:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   37500:	f44f 6100 	mov.w	r1, #2048	; 0x800
   37504:	e7f7      	b.n	374f6 <start_passive_scan+0x8>

00037506 <hci_generate_dhkey_v1>:
{
   37506:	b538      	push	{r3, r4, r5, lr}
   37508:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   3750a:	2140      	movs	r1, #64	; 0x40
   3750c:	f242 0026 	movw	r0, #8230	; 0x2026
   37510:	f7ec fede 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   37514:	b178      	cbz	r0, 37536 <hci_generate_dhkey_v1+0x30>
   37516:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   37518:	2140      	movs	r1, #64	; 0x40
   3751a:	3008      	adds	r0, #8
   3751c:	f003 fac9 	bl	3aab2 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   37520:	2240      	movs	r2, #64	; 0x40
   37522:	4621      	mov	r1, r4
   37524:	f7ff fc1e 	bl	36d64 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   37528:	2200      	movs	r2, #0
   3752a:	4629      	mov	r1, r5
   3752c:	f242 0026 	movw	r0, #8230	; 0x2026
   37530:	f7ec ff0a 	bl	24348 <bt_hci_cmd_send_sync>
}
   37534:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   37536:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3753a:	e7fb      	b.n	37534 <hci_generate_dhkey_v1+0x2e>

0003753c <reset_pairing>:
	conn->required_sec_level = conn->sec_level;
   3753c:	7a43      	ldrb	r3, [r0, #9]
   3753e:	7283      	strb	r3, [r0, #10]
}
   37540:	4770      	bx	lr

00037542 <bt_conn_set_param_le>:
	conn->le.interval_min = param->interval_min;
   37542:	880b      	ldrh	r3, [r1, #0]
   37544:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   37548:	884b      	ldrh	r3, [r1, #2]
   3754a:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   3754e:	888b      	ldrh	r3, [r1, #4]
   37550:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   37554:	88cb      	ldrh	r3, [r1, #6]
   37556:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   3755a:	4770      	bx	lr

0003755c <create_param_validate>:
}
   3755c:	2001      	movs	r0, #1
   3755e:	4770      	bx	lr

00037560 <tx_notify>:
{
   37560:	b570      	push	{r4, r5, r6, lr}
   37562:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   37564:	e010      	b.n	37588 <tx_notify+0x28>
   37566:	f383 8811 	msr	BASEPRI, r3
   3756a:	f3bf 8f6f 	isb	sy
}
   3756e:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   37570:	6262      	str	r2, [r4, #36]	; 0x24
   37572:	f383 8811 	msr	BASEPRI, r3
   37576:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   3757a:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   3757c:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   3757e:	f7ef fa6d 	bl	26a5c <tx_free>
		cb(conn, user_data);
   37582:	4631      	mov	r1, r6
   37584:	4620      	mov	r0, r4
   37586:	47a8      	blx	r5
	__asm__ volatile(
   37588:	f04f 0240 	mov.w	r2, #64	; 0x40
   3758c:	f3ef 8311 	mrs	r3, BASEPRI
   37590:	f382 8812 	msr	BASEPRI_MAX, r2
   37594:	f3bf 8f6f 	isb	sy
	return list->head;
   37598:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   3759a:	2800      	cmp	r0, #0
   3759c:	d0e3      	beq.n	37566 <tx_notify+0x6>
	return node->next;
   3759e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   375a0:	6222      	str	r2, [r4, #32]
	return list->tail;
   375a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   375a4:	4281      	cmp	r1, r0
   375a6:	d1e4      	bne.n	37572 <tx_notify+0x12>
   375a8:	e7e2      	b.n	37570 <tx_notify+0x10>

000375aa <tx_complete_work>:
{
   375aa:	b508      	push	{r3, lr}
	tx_notify(conn);
   375ac:	3828      	subs	r0, #40	; 0x28
   375ae:	f7ff ffd7 	bl	37560 <tx_notify>
}
   375b2:	bd08      	pop	{r3, pc}

000375b4 <send_acl>:
{
   375b4:	b570      	push	{r4, r5, r6, lr}
   375b6:	4605      	mov	r5, r0
   375b8:	460c      	mov	r4, r1
	switch (flags) {
   375ba:	2a03      	cmp	r2, #3
   375bc:	d819      	bhi.n	375f2 <send_acl+0x3e>
   375be:	e8df f002 	tbb	[pc, r2]
   375c2:	1602      	.short	0x1602
   375c4:	1602      	.short	0x1602
		flags = BT_ACL_CONT;
   375c6:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   375c8:	2104      	movs	r1, #4
   375ca:	f104 0008 	add.w	r0, r4, #8
   375ce:	f003 fa91 	bl	3aaf4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   375d2:	f9b5 3000 	ldrsh.w	r3, [r5]
   375d6:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   375da:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   375dc:	89a3      	ldrh	r3, [r4, #12]
   375de:	3b04      	subs	r3, #4
   375e0:	8043      	strh	r3, [r0, #2]
   375e2:	2302      	movs	r3, #2
   375e4:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   375e6:	4620      	mov	r0, r4
   375e8:	f7ff fdf0 	bl	371cc <bt_send>
}
   375ec:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   375ee:	2601      	movs	r6, #1
   375f0:	e7ea      	b.n	375c8 <send_acl+0x14>
   375f2:	f06f 0015 	mvn.w	r0, #21
   375f6:	e7f9      	b.n	375ec <send_acl+0x38>

000375f8 <start_security>:
{
   375f8:	b508      	push	{r3, lr}
		return bt_smp_start_security(conn);
   375fa:	f002 fee7 	bl	3a3cc <bt_smp_start_security>
}
   375fe:	bd08      	pop	{r3, pc}

00037600 <process_unack_tx>:
{
   37600:	b510      	push	{r4, lr}
   37602:	4604      	mov	r4, r0
   37604:	e028      	b.n	37658 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   37606:	3b01      	subs	r3, #1
   37608:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   3760a:	f382 8811 	msr	BASEPRI, r2
   3760e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   37612:	4620      	mov	r0, r4
   37614:	f7ef fa6e 	bl	26af4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   37618:	f7f8 fe28 	bl	3026c <z_impl_k_sem_give>
			continue;
   3761c:	e01c      	b.n	37658 <process_unack_tx+0x58>
	list->tail = node;
   3761e:	61a3      	str	r3, [r4, #24]
   37620:	f382 8811 	msr	BASEPRI, r2
   37624:	f3bf 8f6f 	isb	sy
		if (!node) {
   37628:	b350      	cbz	r0, 37680 <process_unack_tx+0x80>
	__asm__ volatile(
   3762a:	f04f 0240 	mov.w	r2, #64	; 0x40
   3762e:	f3ef 8311 	mrs	r3, BASEPRI
   37632:	f382 8812 	msr	BASEPRI_MAX, r2
   37636:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   3763a:	68c2      	ldr	r2, [r0, #12]
   3763c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   3763e:	2200      	movs	r2, #0
   37640:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   37642:	f383 8811 	msr	BASEPRI, r3
   37646:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   3764a:	f7ef fa07 	bl	26a5c <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   3764e:	4620      	mov	r0, r4
   37650:	f7ef fa50 	bl	26af4 <bt_conn_get_pkts>
   37654:	f7f8 fe0a 	bl	3026c <z_impl_k_sem_give>
	__asm__ volatile(
   37658:	f04f 0340 	mov.w	r3, #64	; 0x40
   3765c:	f3ef 8211 	mrs	r2, BASEPRI
   37660:	f383 8812 	msr	BASEPRI_MAX, r3
   37664:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   37668:	69e3      	ldr	r3, [r4, #28]
   3766a:	2b00      	cmp	r3, #0
   3766c:	d1cb      	bne.n	37606 <process_unack_tx+0x6>
	return list->head;
   3766e:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   37670:	2800      	cmp	r0, #0
   37672:	d0d5      	beq.n	37620 <process_unack_tx+0x20>
	return node->next;
   37674:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   37676:	6163      	str	r3, [r4, #20]
	return list->tail;
   37678:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3767a:	4288      	cmp	r0, r1
   3767c:	d1d0      	bne.n	37620 <process_unack_tx+0x20>
   3767e:	e7ce      	b.n	3761e <process_unack_tx+0x1e>
}
   37680:	bd10      	pop	{r4, pc}

00037682 <bt_conn_reset_rx_state>:
{
   37682:	b510      	push	{r4, lr}
   37684:	4604      	mov	r4, r0
	if (!conn->rx) {
   37686:	6900      	ldr	r0, [r0, #16]
   37688:	b118      	cbz	r0, 37692 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   3768a:	f003 f9c8 	bl	3aa1e <net_buf_unref>
	conn->rx = NULL;
   3768e:	2300      	movs	r3, #0
   37690:	6123      	str	r3, [r4, #16]
}
   37692:	bd10      	pop	{r4, pc}

00037694 <conn_cleanup>:
{
   37694:	b538      	push	{r3, r4, r5, lr}
   37696:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   37698:	e004      	b.n	376a4 <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   3769a:	f7ef f9df 	bl	26a5c <tx_free>
		net_buf_unref(buf);
   3769e:	4620      	mov	r0, r4
   376a0:	f003 f9bd 	bl	3aa1e <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   376a4:	2200      	movs	r2, #0
   376a6:	2300      	movs	r3, #0
   376a8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   376ac:	f003 f985 	bl	3a9ba <net_buf_get>
   376b0:	4604      	mov	r4, r0
   376b2:	b118      	cbz	r0, 376bc <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   376b4:	6960      	ldr	r0, [r4, #20]
   376b6:	2800      	cmp	r0, #0
   376b8:	d1ef      	bne.n	3769a <conn_cleanup+0x6>
   376ba:	e7f0      	b.n	3769e <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   376bc:	4628      	mov	r0, r5
   376be:	f7ff ffe0 	bl	37682 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   376c2:	2200      	movs	r2, #0
   376c4:	2300      	movs	r3, #0
   376c6:	f105 0058 	add.w	r0, r5, #88	; 0x58
   376ca:	f7f9 f80b 	bl	306e4 <k_work_reschedule>
}
   376ce:	bd38      	pop	{r3, r4, r5, pc}

000376d0 <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   376d0:	f3bf 8f5b 	dmb	ish
   376d4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   376d8:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   376dc:	b33b      	cbz	r3, 3772e <conn_prepare_events+0x5e>
{
   376de:	b510      	push	{r4, lr}
   376e0:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   376e2:	7b43      	ldrb	r3, [r0, #13]
   376e4:	b983      	cbnz	r3, 37708 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   376e6:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   376e8:	f3bf 8f5b 	dmb	ish
   376ec:	e853 2f00 	ldrex	r2, [r3]
   376f0:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   376f4:	e843 1c00 	strex	ip, r1, [r3]
   376f8:	f1bc 0f00 	cmp.w	ip, #0
   376fc:	d1f6      	bne.n	376ec <conn_prepare_events+0x1c>
   376fe:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   37702:	f012 0f40 	tst.w	r2, #64	; 0x40
   37706:	d10d      	bne.n	37724 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   37708:	7b43      	ldrb	r3, [r0, #13]
   3770a:	2b07      	cmp	r3, #7
   3770c:	d112      	bne.n	37734 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   3770e:	f100 0338 	add.w	r3, r0, #56	; 0x38
   37712:	2200      	movs	r2, #0
   37714:	2104      	movs	r1, #4
   37716:	4620      	mov	r0, r4
   37718:	f005 fa95 	bl	3cc46 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   3771c:	2301      	movs	r3, #1
   3771e:	7323      	strb	r3, [r4, #12]
	return 0;
   37720:	2000      	movs	r0, #0
}
   37722:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   37724:	f7ff ffb6 	bl	37694 <conn_cleanup>
		return -ENOTCONN;
   37728:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3772c:	e7f9      	b.n	37722 <conn_prepare_events+0x52>
		return -ENOTCONN;
   3772e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   37732:	4770      	bx	lr
		return -ENOTCONN;
   37734:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   37738:	e7f3      	b.n	37722 <conn_prepare_events+0x52>

0003773a <bt_conn_recv>:
{
   3773a:	b570      	push	{r4, r5, r6, lr}
   3773c:	4604      	mov	r4, r0
   3773e:	460d      	mov	r5, r1
   37740:	4616      	mov	r6, r2
	tx_notify(conn);
   37742:	f7ff ff0d 	bl	37560 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   37746:	4632      	mov	r2, r6
   37748:	4629      	mov	r1, r5
   3774a:	4620      	mov	r0, r4
   3774c:	f7ef faa4 	bl	26c98 <bt_acl_recv>
}
   37750:	bd70      	pop	{r4, r5, r6, pc}

00037752 <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   37752:	f3bf 8f5b 	dmb	ish
   37756:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   3775a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   3775e:	b1eb      	cbz	r3, 3779c <bt_conn_ref+0x4a>
{
   37760:	b410      	push	{r4}
   37762:	e006      	b.n	37772 <bt_conn_ref+0x20>
   37764:	f3bf 8f5b 	dmb	ish
   37768:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   3776c:	f3bf 8f5b 	dmb	ish
		if (!old) {
   37770:	b193      	cbz	r3, 37798 <bt_conn_ref+0x46>
   37772:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	} while (!atomic_cas(&conn->ref, old, old + 1));
   37776:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   37778:	f3bf 8f5b 	dmb	ish
   3777c:	e852 4f00 	ldrex	r4, [r2]
   37780:	429c      	cmp	r4, r3
   37782:	d104      	bne.n	3778e <bt_conn_ref+0x3c>
   37784:	e842 1c00 	strex	ip, r1, [r2]
   37788:	f1bc 0f00 	cmp.w	ip, #0
   3778c:	d1f6      	bne.n	3777c <bt_conn_ref+0x2a>
   3778e:	f3bf 8f5b 	dmb	ish
   37792:	d1e7      	bne.n	37764 <bt_conn_ref+0x12>
}
   37794:	bc10      	pop	{r4}
   37796:	4770      	bx	lr
			return NULL;
   37798:	2000      	movs	r0, #0
   3779a:	e7fb      	b.n	37794 <bt_conn_ref+0x42>
   3779c:	2000      	movs	r0, #0
}
   3779e:	4770      	bx	lr

000377a0 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   377a0:	30bc      	adds	r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   377a2:	f3bf 8f5b 	dmb	ish
   377a6:	e850 3f00 	ldrex	r3, [r0]
   377aa:	3b01      	subs	r3, #1
   377ac:	e840 3200 	strex	r2, r3, [r0]
   377b0:	2a00      	cmp	r2, #0
   377b2:	d1f8      	bne.n	377a6 <bt_conn_unref+0x6>
   377b4:	f3bf 8f5b 	dmb	ish
}
   377b8:	4770      	bx	lr

000377ba <conn_lookup_handle>:
{
   377ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   377be:	4607      	mov	r7, r0
   377c0:	460e      	mov	r6, r1
   377c2:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   377c4:	2400      	movs	r4, #0
   377c6:	e003      	b.n	377d0 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   377c8:	4628      	mov	r0, r5
   377ca:	f7ff ffe9 	bl	377a0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   377ce:	3401      	adds	r4, #1
   377d0:	42b4      	cmp	r4, r6
   377d2:	d21c      	bcs.n	3780e <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   377d4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   377d8:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   377dc:	f7ff ffb9 	bl	37752 <bt_conn_ref>
		if (!conn) {
   377e0:	4605      	mov	r5, r0
   377e2:	2800      	cmp	r0, #0
   377e4:	d0f3      	beq.n	377ce <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   377e6:	7b43      	ldrb	r3, [r0, #13]
   377e8:	2b01      	cmp	r3, #1
   377ea:	d006      	beq.n	377fa <conn_lookup_handle+0x40>
   377ec:	b25a      	sxtb	r2, r3
   377ee:	2a00      	cmp	r2, #0
   377f0:	d0ea      	beq.n	377c8 <conn_lookup_handle+0xe>
   377f2:	3b07      	subs	r3, #7
   377f4:	b2db      	uxtb	r3, r3
   377f6:	2b01      	cmp	r3, #1
   377f8:	d8e6      	bhi.n	377c8 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   377fa:	882b      	ldrh	r3, [r5, #0]
   377fc:	4543      	cmp	r3, r8
   377fe:	d102      	bne.n	37806 <conn_lookup_handle+0x4c>
}
   37800:	4628      	mov	r0, r5
   37802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   37806:	4628      	mov	r0, r5
   37808:	f7ff ffca 	bl	377a0 <bt_conn_unref>
			continue;
   3780c:	e7df      	b.n	377ce <conn_lookup_handle+0x14>
	return NULL;
   3780e:	2500      	movs	r5, #0
   37810:	e7f6      	b.n	37800 <conn_lookup_handle+0x46>

00037812 <conn_disconnect>:
{
   37812:	b538      	push	{r3, r4, r5, lr}
   37814:	4604      	mov	r4, r0
	err = bt_hci_disconnect(conn->handle, reason);
   37816:	8800      	ldrh	r0, [r0, #0]
   37818:	f7ff fc6f 	bl	370fa <bt_hci_disconnect>
	if (err) {
   3781c:	4605      	mov	r5, r0
   3781e:	b910      	cbnz	r0, 37826 <conn_disconnect+0x14>
	if (conn->state == BT_CONN_CONNECTED) {
   37820:	7b63      	ldrb	r3, [r4, #13]
   37822:	2b07      	cmp	r3, #7
   37824:	d001      	beq.n	3782a <conn_disconnect+0x18>
}
   37826:	4628      	mov	r0, r5
   37828:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   3782a:	2108      	movs	r1, #8
   3782c:	4620      	mov	r0, r4
   3782e:	f7ef fb7f 	bl	26f30 <bt_conn_set_state>
   37832:	e7f8      	b.n	37826 <conn_disconnect+0x14>

00037834 <bt_conn_connected>:
{
   37834:	b510      	push	{r4, lr}
   37836:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   37838:	f7f0 f9a2 	bl	27b80 <bt_l2cap_connected>
	notify_connected(conn);
   3783c:	4620      	mov	r0, r4
   3783e:	f7ef f931 	bl	26aa4 <notify_connected>
}
   37842:	bd10      	pop	{r4, pc}

00037844 <bt_conn_le_start_encryption>:
{
   37844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37848:	4680      	mov	r8, r0
   3784a:	460f      	mov	r7, r1
   3784c:	4616      	mov	r6, r2
   3784e:	461d      	mov	r5, r3
   37850:	f8dd 9020 	ldr.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   37854:	211c      	movs	r1, #28
   37856:	f242 0019 	movw	r0, #8217	; 0x2019
   3785a:	f7ec fd39 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   3785e:	b360      	cbz	r0, 378ba <bt_conn_le_start_encryption+0x76>
   37860:	4682      	mov	sl, r0
	return net_buf_simple_add(&buf->b, len);
   37862:	211c      	movs	r1, #28
   37864:	3008      	adds	r0, #8
   37866:	f003 f924 	bl	3aab2 <net_buf_simple_add>
   3786a:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   3786c:	f8b8 3000 	ldrh.w	r3, [r8]
   37870:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   37874:	2208      	movs	r2, #8
   37876:	4639      	mov	r1, r7
   37878:	f7ff fa74 	bl	36d64 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   3787c:	2202      	movs	r2, #2
   3787e:	4631      	mov	r1, r6
   37880:	f104 000a 	add.w	r0, r4, #10
   37884:	f7ff fa6e 	bl	36d64 <memcpy>
	memcpy(cp->ltk, ltk, len);
   37888:	340c      	adds	r4, #12
   3788a:	464a      	mov	r2, r9
   3788c:	4629      	mov	r1, r5
   3788e:	4620      	mov	r0, r4
   37890:	f7ff fa68 	bl	36d64 <memcpy>
	if (len < sizeof(cp->ltk)) {
   37894:	f1b9 0f0f 	cmp.w	r9, #15
   37898:	d907      	bls.n	378aa <bt_conn_le_start_encryption+0x66>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   3789a:	2200      	movs	r2, #0
   3789c:	4651      	mov	r1, sl
   3789e:	f242 0019 	movw	r0, #8217	; 0x2019
   378a2:	f7ec fd51 	bl	24348 <bt_hci_cmd_send_sync>
}
   378a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   378aa:	f1c9 0210 	rsb	r2, r9, #16
   378ae:	2100      	movs	r1, #0
   378b0:	eb04 0009 	add.w	r0, r4, r9
   378b4:	f7ff fa7a 	bl	36dac <memset>
   378b8:	e7ef      	b.n	3789a <bt_conn_le_start_encryption+0x56>
		return -ENOBUFS;
   378ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   378be:	e7f2      	b.n	378a6 <bt_conn_le_start_encryption+0x62>

000378c0 <bt_conn_set_security>:
	if (conn->state != BT_CONN_CONNECTED) {
   378c0:	7b43      	ldrb	r3, [r0, #13]
   378c2:	2b07      	cmp	r3, #7
   378c4:	d12f      	bne.n	37926 <bt_conn_set_security+0x66>
{
   378c6:	b510      	push	{r4, lr}
   378c8:	4604      	mov	r4, r0
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   378ca:	7a43      	ldrb	r3, [r0, #9]
   378cc:	428b      	cmp	r3, r1
   378ce:	d22d      	bcs.n	3792c <bt_conn_set_security+0x6c>
   378d0:	7a83      	ldrb	r3, [r0, #10]
   378d2:	428b      	cmp	r3, r1
   378d4:	d301      	bcc.n	378da <bt_conn_set_security+0x1a>
		return 0;
   378d6:	2000      	movs	r0, #0
   378d8:	e029      	b.n	3792e <bt_conn_set_security+0x6e>
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   378da:	1d03      	adds	r3, r0, #4
	if (val) {
   378dc:	09ca      	lsrs	r2, r1, #7
   378de:	d015      	beq.n	3790c <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   378e0:	f3bf 8f5b 	dmb	ish
   378e4:	e853 2f00 	ldrex	r2, [r3]
   378e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   378ec:	e843 2000 	strex	r0, r2, [r3]
   378f0:	2800      	cmp	r0, #0
   378f2:	d1f7      	bne.n	378e4 <bt_conn_set_security+0x24>
   378f4:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   378f8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   378fc:	72a1      	strb	r1, [r4, #10]
	err = start_security(conn);
   378fe:	4620      	mov	r0, r4
   37900:	f7ff fe7a 	bl	375f8 <start_security>
	if (err) {
   37904:	b198      	cbz	r0, 3792e <bt_conn_set_security+0x6e>
		conn->required_sec_level = conn->sec_level;
   37906:	7a63      	ldrb	r3, [r4, #9]
   37908:	72a3      	strb	r3, [r4, #10]
   3790a:	e010      	b.n	3792e <bt_conn_set_security+0x6e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3790c:	f3bf 8f5b 	dmb	ish
   37910:	e853 2f00 	ldrex	r2, [r3]
   37914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   37918:	e843 2000 	strex	r0, r2, [r3]
   3791c:	2800      	cmp	r0, #0
   3791e:	d1f7      	bne.n	37910 <bt_conn_set_security+0x50>
   37920:	f3bf 8f5b 	dmb	ish
   37924:	e7e8      	b.n	378f8 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   37926:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   3792a:	4770      	bx	lr
		return 0;
   3792c:	2000      	movs	r0, #0
}
   3792e:	bd10      	pop	{r4, pc}

00037930 <bt_conn_get_security>:
}
   37930:	7a40      	ldrb	r0, [r0, #9]
   37932:	4770      	bx	lr

00037934 <bt_conn_add_le>:
{
   37934:	b570      	push	{r4, r5, r6, lr}
   37936:	4606      	mov	r6, r0
   37938:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   3793a:	f7ef f9a5 	bl	26c88 <acl_conn_new>
	if (!conn) {
   3793e:	4604      	mov	r4, r0
   37940:	b178      	cbz	r0, 37962 <bt_conn_add_le+0x2e>
	conn->id = id;
   37942:	7206      	strb	r6, [r0, #8]
   37944:	2207      	movs	r2, #7
   37946:	4629      	mov	r1, r5
   37948:	3088      	adds	r0, #136	; 0x88
   3794a:	f7ff fa0b 	bl	36d64 <memcpy>
	conn->sec_level = BT_SECURITY_L1;
   3794e:	2301      	movs	r3, #1
   37950:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   37952:	72a3      	strb	r3, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
   37954:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   37956:	2318      	movs	r3, #24
   37958:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   3795c:	2328      	movs	r3, #40	; 0x28
   3795e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   37962:	4620      	mov	r0, r4
   37964:	bd70      	pop	{r4, r5, r6, pc}

00037966 <bt_conn_is_peer_addr_le>:
{
   37966:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   37968:	7a03      	ldrb	r3, [r0, #8]
   3796a:	428b      	cmp	r3, r1
   3796c:	d001      	beq.n	37972 <bt_conn_is_peer_addr_le+0xc>
		return false;
   3796e:	2000      	movs	r0, #0
}
   37970:	bd38      	pop	{r3, r4, r5, pc}
   37972:	4604      	mov	r4, r0
   37974:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   37976:	2207      	movs	r2, #7
   37978:	f100 0188 	add.w	r1, r0, #136	; 0x88
   3797c:	4628      	mov	r0, r5
   3797e:	f7ff f9c4 	bl	36d0a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   37982:	b1a8      	cbz	r0, 379b0 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   37984:	78e3      	ldrb	r3, [r4, #3]
   37986:	b14b      	cbz	r3, 3799c <bt_conn_is_peer_addr_le+0x36>
   37988:	2207      	movs	r2, #7
   3798a:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   3798e:	4628      	mov	r0, r5
   37990:	f7ff f9bb 	bl	36d0a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   37994:	fab0 f080 	clz	r0, r0
   37998:	0940      	lsrs	r0, r0, #5
   3799a:	e7e9      	b.n	37970 <bt_conn_is_peer_addr_le+0xa>
   3799c:	2207      	movs	r2, #7
   3799e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   379a2:	4628      	mov	r0, r5
   379a4:	f7ff f9b1 	bl	36d0a <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   379a8:	fab0 f080 	clz	r0, r0
   379ac:	0940      	lsrs	r0, r0, #5
   379ae:	e7df      	b.n	37970 <bt_conn_is_peer_addr_le+0xa>
		return true;
   379b0:	2001      	movs	r0, #1
   379b2:	e7dd      	b.n	37970 <bt_conn_is_peer_addr_le+0xa>

000379b4 <bt_conn_get_dst>:
}
   379b4:	3088      	adds	r0, #136	; 0x88
   379b6:	4770      	bx	lr

000379b8 <bt_conn_disconnect>:
{
   379b8:	b538      	push	{r3, r4, r5, lr}
   379ba:	4604      	mov	r4, r0
   379bc:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
   379be:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   379c0:	2b01      	cmp	r3, #1
   379c2:	d009      	beq.n	379d8 <bt_conn_disconnect+0x20>
	switch (conn->state) {
   379c4:	7b63      	ldrb	r3, [r4, #13]
   379c6:	3b02      	subs	r3, #2
   379c8:	2b06      	cmp	r3, #6
   379ca:	d822      	bhi.n	37a12 <bt_conn_disconnect+0x5a>
   379cc:	e8df f003 	tbb	[pc, r3]
   379d0:	2121210b 	.word	0x2121210b
   379d4:	1c15      	.short	0x1c15
   379d6:	09          	.byte	0x09
   379d7:	00          	.byte	0x00
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   379d8:	2100      	movs	r1, #0
   379da:	3088      	adds	r0, #136	; 0x88
   379dc:	f7ef fe6c 	bl	276b8 <bt_le_set_auto_conn>
   379e0:	e7f0      	b.n	379c4 <bt_conn_disconnect+0xc>
	switch (conn->state) {
   379e2:	2000      	movs	r0, #0
   379e4:	e017      	b.n	37a16 <bt_conn_disconnect+0x5e>
		conn->err = reason;
   379e6:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   379e8:	2100      	movs	r1, #0
   379ea:	4620      	mov	r0, r4
   379ec:	f7ef faa0 	bl	26f30 <bt_conn_set_state>
			bt_le_scan_update(false);
   379f0:	2000      	movs	r0, #0
   379f2:	f7ee fc53 	bl	2629c <bt_le_scan_update>
		return 0;
   379f6:	2000      	movs	r0, #0
   379f8:	e00d      	b.n	37a16 <bt_conn_disconnect+0x5e>
			k_work_cancel_delayable(&conn->deferred_work);
   379fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
   379fe:	f004 fdf1 	bl	3c5e4 <k_work_cancel_delayable>
			return bt_le_create_conn_cancel();
   37a02:	f7ed f8ad 	bl	24b60 <bt_le_create_conn_cancel>
   37a06:	e006      	b.n	37a16 <bt_conn_disconnect+0x5e>
		return conn_disconnect(conn, reason);
   37a08:	4629      	mov	r1, r5
   37a0a:	4620      	mov	r0, r4
   37a0c:	f7ff ff01 	bl	37812 <conn_disconnect>
   37a10:	e001      	b.n	37a16 <bt_conn_disconnect+0x5e>
		return -ENOTCONN;
   37a12:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   37a16:	bd38      	pop	{r3, r4, r5, pc}

00037a18 <bt_conn_le_conn_update>:
{
   37a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37a1a:	4606      	mov	r6, r0
   37a1c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   37a1e:	210e      	movs	r1, #14
   37a20:	f242 0013 	movw	r0, #8211	; 0x2013
   37a24:	f7ec fc54 	bl	242d0 <bt_hci_cmd_create>
	if (!buf) {
   37a28:	b1d0      	cbz	r0, 37a60 <bt_conn_le_conn_update+0x48>
   37a2a:	4607      	mov	r7, r0
   37a2c:	210e      	movs	r1, #14
   37a2e:	3008      	adds	r0, #8
   37a30:	f003 f83f 	bl	3aab2 <net_buf_simple_add>
   37a34:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   37a36:	220e      	movs	r2, #14
   37a38:	2100      	movs	r1, #0
   37a3a:	f7ff f9b7 	bl	36dac <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   37a3e:	8833      	ldrh	r3, [r6, #0]
   37a40:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   37a42:	882b      	ldrh	r3, [r5, #0]
   37a44:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   37a46:	886b      	ldrh	r3, [r5, #2]
   37a48:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   37a4a:	88ab      	ldrh	r3, [r5, #4]
   37a4c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   37a4e:	88eb      	ldrh	r3, [r5, #6]
   37a50:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   37a52:	2200      	movs	r2, #0
   37a54:	4639      	mov	r1, r7
   37a56:	f242 0013 	movw	r0, #8211	; 0x2013
   37a5a:	f7ec fc75 	bl	24348 <bt_hci_cmd_send_sync>
}
   37a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   37a60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   37a64:	e7fb      	b.n	37a5e <bt_conn_le_conn_update+0x46>

00037a66 <deferred_work>:
{
   37a66:	b530      	push	{r4, r5, lr}
   37a68:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   37a6a:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   37a6e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
   37a72:	b32b      	cbz	r3, 37ac0 <deferred_work+0x5a>
	if (conn->type != BT_CONN_TYPE_LE) {
   37a74:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   37a78:	2b01      	cmp	r3, #1
   37a7a:	d11f      	bne.n	37abc <deferred_work+0x56>
	    conn->role == BT_CONN_ROLE_CENTRAL) {
   37a7c:	f810 3c55 	ldrb.w	r3, [r0, #-85]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   37a80:	b343      	cbz	r3, 37ad4 <deferred_work+0x6e>
	if (atomic_test_and_clear_bit(conn->flags,
   37a82:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   37a86:	f3bf 8f5b 	dmb	ish
   37a8a:	e855 3f00 	ldrex	r3, [r5]
   37a8e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   37a92:	e845 2100 	strex	r1, r2, [r5]
   37a96:	2900      	cmp	r1, #0
   37a98:	d1f7      	bne.n	37a8a <deferred_work+0x24>
   37a9a:	f3bf 8f5b 	dmb	ish
   37a9e:	f413 7f00 	tst.w	r3, #512	; 0x200
   37aa2:	d11a      	bne.n	37ada <deferred_work+0x74>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   37aa4:	f3bf 8f5b 	dmb	ish
   37aa8:	e855 3f00 	ldrex	r3, [r5]
   37aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   37ab0:	e845 3200 	strex	r2, r3, [r5]
   37ab4:	2a00      	cmp	r2, #0
   37ab6:	d1f7      	bne.n	37aa8 <deferred_work+0x42>
   37ab8:	f3bf 8f5b 	dmb	ish
}
   37abc:	b003      	add	sp, #12
   37abe:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   37ac0:	4620      	mov	r0, r4
   37ac2:	f000 f879 	bl	37bb8 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   37ac6:	4620      	mov	r0, r4
   37ac8:	f7ee ff8a 	bl	269e0 <notify_disconnected>
		bt_conn_unref(conn);
   37acc:	4620      	mov	r0, r4
   37ace:	f7ff fe67 	bl	377a0 <bt_conn_unref>
		return;
   37ad2:	e7f3      	b.n	37abc <deferred_work+0x56>
		bt_le_create_conn_cancel();
   37ad4:	f7ed f844 	bl	24b60 <bt_le_create_conn_cancel>
		return;
   37ad8:	e7f0      	b.n	37abc <deferred_work+0x56>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   37ada:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   37ade:	f8ad 3000 	strh.w	r3, [sp]
   37ae2:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   37ae6:	f8ad 3002 	strh.w	r3, [sp, #2]
   37aea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   37aee:	f8ad 3004 	strh.w	r3, [sp, #4]
   37af2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   37af6:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   37afa:	4669      	mov	r1, sp
   37afc:	4620      	mov	r0, r4
   37afe:	f7ef fe59 	bl	277b4 <send_conn_le_param_update>
   37b02:	e7cf      	b.n	37aa4 <deferred_work+0x3e>

00037b04 <l2cap_connected>:
}
   37b04:	4770      	bx	lr

00037b06 <l2cap_chan_recv>:
{
   37b06:	b510      	push	{r4, lr}
   37b08:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   37b0a:	6843      	ldr	r3, [r0, #4]
   37b0c:	691b      	ldr	r3, [r3, #16]
   37b0e:	4798      	blx	r3
	net_buf_unref(buf);
   37b10:	4620      	mov	r0, r4
   37b12:	f002 ff84 	bl	3aa1e <net_buf_unref>
}
   37b16:	bd10      	pop	{r4, pc}

00037b18 <l2cap_disconnected>:
{
   37b18:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   37b1a:	3010      	adds	r0, #16
   37b1c:	f004 fd62 	bl	3c5e4 <k_work_cancel_delayable>
}
   37b20:	bd08      	pop	{r3, pc}

00037b22 <bt_l2cap_chan_remove>:
	return list->head;
   37b22:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37b24:	b103      	cbz	r3, 37b28 <bt_l2cap_chan_remove+0x6>
   37b26:	3b08      	subs	r3, #8
   37b28:	2200      	movs	r2, #0
   37b2a:	e016      	b.n	37b5a <bt_l2cap_chan_remove+0x38>
{
   37b2c:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   37b2e:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   37b32:	b142      	cbz	r2, 37b46 <bt_l2cap_chan_remove+0x24>
	return node->next;
   37b34:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   37b36:	6014      	str	r4, [r2, #0]
	return list->tail;
   37b38:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   37b3a:	42a1      	cmp	r1, r4
   37b3c:	d00a      	beq.n	37b54 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   37b3e:	2200      	movs	r2, #0
   37b40:	609a      	str	r2, [r3, #8]
}
   37b42:	bc10      	pop	{r4}
   37b44:	4770      	bx	lr
	return node->next;
   37b46:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   37b48:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   37b4a:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   37b4c:	42a1      	cmp	r1, r4
   37b4e:	d1f6      	bne.n	37b3e <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   37b50:	6542      	str	r2, [r0, #84]	; 0x54
}
   37b52:	e7f4      	b.n	37b3e <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   37b54:	6542      	str	r2, [r0, #84]	; 0x54
}
   37b56:	e7f2      	b.n	37b3e <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37b58:	4613      	mov	r3, r2
   37b5a:	b14b      	cbz	r3, 37b70 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   37b5c:	428b      	cmp	r3, r1
   37b5e:	d0e5      	beq.n	37b2c <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   37b60:	f113 0208 	adds.w	r2, r3, #8
   37b64:	d0f8      	beq.n	37b58 <bt_l2cap_chan_remove+0x36>
	return node->next;
   37b66:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37b68:	2b00      	cmp	r3, #0
   37b6a:	d0f6      	beq.n	37b5a <bt_l2cap_chan_remove+0x38>
   37b6c:	3b08      	subs	r3, #8
   37b6e:	e7f4      	b.n	37b5a <bt_l2cap_chan_remove+0x38>
   37b70:	4770      	bx	lr

00037b72 <bt_l2cap_chan_del>:
{
   37b72:	b538      	push	{r3, r4, r5, lr}
   37b74:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   37b76:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   37b78:	6803      	ldr	r3, [r0, #0]
   37b7a:	b123      	cbz	r3, 37b86 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   37b7c:	686b      	ldr	r3, [r5, #4]
   37b7e:	b103      	cbz	r3, 37b82 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   37b80:	4798      	blx	r3
	chan->conn = NULL;
   37b82:	2300      	movs	r3, #0
   37b84:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   37b86:	68e3      	ldr	r3, [r4, #12]
   37b88:	b10b      	cbz	r3, 37b8e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   37b8a:	4620      	mov	r0, r4
   37b8c:	4798      	blx	r3
	if (ops->released) {
   37b8e:	69eb      	ldr	r3, [r5, #28]
   37b90:	b10b      	cbz	r3, 37b96 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   37b92:	4620      	mov	r0, r4
   37b94:	4798      	blx	r3
}
   37b96:	bd38      	pop	{r3, r4, r5, pc}

00037b98 <bt_l2cap_chan_add>:
{
   37b98:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   37b9a:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   37b9e:	2400      	movs	r4, #0
   37ba0:	608c      	str	r4, [r1, #8]
	return list->tail;
   37ba2:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   37ba4:	b12c      	cbz	r4, 37bb2 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   37ba6:	6023      	str	r3, [r4, #0]
	list->tail = node;
   37ba8:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   37baa:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   37bac:	60ca      	str	r2, [r1, #12]
}
   37bae:	bc10      	pop	{r4}
   37bb0:	4770      	bx	lr
   37bb2:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   37bb4:	6503      	str	r3, [r0, #80]	; 0x50
}
   37bb6:	e7f8      	b.n	37baa <bt_l2cap_chan_add+0x12>

00037bb8 <bt_l2cap_disconnected>:
{
   37bb8:	b510      	push	{r4, lr}
	return list->head;
   37bba:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   37bbc:	b140      	cbz	r0, 37bd0 <bt_l2cap_disconnected+0x18>
   37bbe:	3808      	subs	r0, #8
   37bc0:	d008      	beq.n	37bd4 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   37bc2:	f110 0408 	adds.w	r4, r0, #8
   37bc6:	d00a      	beq.n	37bde <bt_l2cap_disconnected+0x26>
	return node->next;
   37bc8:	6884      	ldr	r4, [r0, #8]
   37bca:	b144      	cbz	r4, 37bde <bt_l2cap_disconnected+0x26>
   37bcc:	3c08      	subs	r4, #8
   37bce:	e006      	b.n	37bde <bt_l2cap_disconnected+0x26>
   37bd0:	4604      	mov	r4, r0
   37bd2:	e004      	b.n	37bde <bt_l2cap_disconnected+0x26>
   37bd4:	4604      	mov	r4, r0
   37bd6:	e002      	b.n	37bde <bt_l2cap_disconnected+0x26>
   37bd8:	4623      	mov	r3, r4
   37bda:	4620      	mov	r0, r4
   37bdc:	461c      	mov	r4, r3
   37bde:	b158      	cbz	r0, 37bf8 <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   37be0:	f7ff ffc7 	bl	37b72 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   37be4:	2c00      	cmp	r4, #0
   37be6:	d0f7      	beq.n	37bd8 <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   37be8:	f114 0308 	adds.w	r3, r4, #8
   37bec:	d0f5      	beq.n	37bda <bt_l2cap_disconnected+0x22>
	return node->next;
   37bee:	68a3      	ldr	r3, [r4, #8]
   37bf0:	2b00      	cmp	r3, #0
   37bf2:	d0f2      	beq.n	37bda <bt_l2cap_disconnected+0x22>
   37bf4:	3b08      	subs	r3, #8
   37bf6:	e7f0      	b.n	37bda <bt_l2cap_disconnected+0x22>
}
   37bf8:	bd10      	pop	{r4, pc}

00037bfa <bt_l2cap_security_changed>:
{
   37bfa:	b538      	push	{r3, r4, r5, lr}
   37bfc:	460d      	mov	r5, r1
	return list->head;
   37bfe:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   37c00:	b140      	cbz	r0, 37c14 <bt_l2cap_security_changed+0x1a>
   37c02:	3808      	subs	r0, #8
   37c04:	d008      	beq.n	37c18 <bt_l2cap_security_changed+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   37c06:	f110 0408 	adds.w	r4, r0, #8
   37c0a:	d00a      	beq.n	37c22 <bt_l2cap_security_changed+0x28>
	return node->next;
   37c0c:	6884      	ldr	r4, [r0, #8]
   37c0e:	b144      	cbz	r4, 37c22 <bt_l2cap_security_changed+0x28>
   37c10:	3c08      	subs	r4, #8
   37c12:	e006      	b.n	37c22 <bt_l2cap_security_changed+0x28>
   37c14:	4604      	mov	r4, r0
   37c16:	e004      	b.n	37c22 <bt_l2cap_security_changed+0x28>
   37c18:	4604      	mov	r4, r0
   37c1a:	e002      	b.n	37c22 <bt_l2cap_security_changed+0x28>
   37c1c:	4623      	mov	r3, r4
   37c1e:	4620      	mov	r0, r4
   37c20:	461c      	mov	r4, r3
   37c22:	b170      	cbz	r0, 37c42 <bt_l2cap_security_changed+0x48>
		if (chan->ops->encrypt_change) {
   37c24:	6843      	ldr	r3, [r0, #4]
   37c26:	689b      	ldr	r3, [r3, #8]
   37c28:	b10b      	cbz	r3, 37c2e <bt_l2cap_security_changed+0x34>
			chan->ops->encrypt_change(chan, hci_status);
   37c2a:	4629      	mov	r1, r5
   37c2c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   37c2e:	2c00      	cmp	r4, #0
   37c30:	d0f4      	beq.n	37c1c <bt_l2cap_security_changed+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   37c32:	f114 0308 	adds.w	r3, r4, #8
   37c36:	d0f2      	beq.n	37c1e <bt_l2cap_security_changed+0x24>
	return node->next;
   37c38:	68a3      	ldr	r3, [r4, #8]
   37c3a:	2b00      	cmp	r3, #0
   37c3c:	d0ef      	beq.n	37c1e <bt_l2cap_security_changed+0x24>
   37c3e:	3b08      	subs	r3, #8
   37c40:	e7ed      	b.n	37c1e <bt_l2cap_security_changed+0x24>
}
   37c42:	bd38      	pop	{r3, r4, r5, pc}

00037c44 <bt_l2cap_create_pdu_timeout>:
{
   37c44:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   37c46:	3104      	adds	r1, #4
   37c48:	f7ef faa4 	bl	27194 <bt_conn_create_pdu_timeout>
}
   37c4c:	bd08      	pop	{r3, pc}

00037c4e <bt_l2cap_send_cb>:
{
   37c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37c50:	4605      	mov	r5, r0
   37c52:	460f      	mov	r7, r1
   37c54:	4614      	mov	r4, r2
   37c56:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   37c58:	2104      	movs	r1, #4
   37c5a:	f102 0008 	add.w	r0, r2, #8
   37c5e:	f002 ff49 	bl	3aaf4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   37c62:	89a3      	ldrh	r3, [r4, #12]
   37c64:	3b04      	subs	r3, #4
   37c66:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   37c68:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   37c6a:	9b06      	ldr	r3, [sp, #24]
   37c6c:	4632      	mov	r2, r6
   37c6e:	4621      	mov	r1, r4
   37c70:	4628      	mov	r0, r5
   37c72:	f7ef f8c7 	bl	26e04 <bt_conn_send_cb>
}
   37c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00037c78 <l2cap_send_reject>:
{
   37c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37c7c:	b083      	sub	sp, #12
   37c7e:	4605      	mov	r5, r0
   37c80:	4690      	mov	r8, r2
   37c82:	461c      	mov	r4, r3
   37c84:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   37c88:	1cbb      	adds	r3, r7, #2
   37c8a:	460a      	mov	r2, r1
   37c8c:	2101      	movs	r1, #1
   37c8e:	2000      	movs	r0, #0
   37c90:	f7ef ffb2 	bl	27bf8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   37c94:	b1b0      	cbz	r0, 37cc4 <l2cap_send_reject+0x4c>
   37c96:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   37c98:	f100 0908 	add.w	r9, r0, #8
   37c9c:	2102      	movs	r1, #2
   37c9e:	4648      	mov	r0, r9
   37ca0:	f002 ff07 	bl	3aab2 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   37ca4:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   37ca8:	b124      	cbz	r4, 37cb4 <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   37caa:	463a      	mov	r2, r7
   37cac:	4621      	mov	r1, r4
   37cae:	4648      	mov	r0, r9
   37cb0:	f002 ff05 	bl	3aabe <net_buf_simple_add_mem>
   37cb4:	2300      	movs	r3, #0
   37cb6:	9300      	str	r3, [sp, #0]
   37cb8:	4632      	mov	r2, r6
   37cba:	2105      	movs	r1, #5
   37cbc:	4628      	mov	r0, r5
   37cbe:	f7ff ffc6 	bl	37c4e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   37cc2:	b910      	cbnz	r0, 37cca <l2cap_send_reject+0x52>
}
   37cc4:	b003      	add	sp, #12
   37cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   37cca:	4630      	mov	r0, r6
   37ccc:	f002 fea7 	bl	3aa1e <net_buf_unref>
}
   37cd0:	e7f8      	b.n	37cc4 <l2cap_send_reject+0x4c>

00037cd2 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   37cd2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37cd4:	b110      	cbz	r0, 37cdc <bt_l2cap_le_lookup_tx_cid+0xa>
   37cd6:	3808      	subs	r0, #8
   37cd8:	e000      	b.n	37cdc <bt_l2cap_le_lookup_tx_cid+0xa>
   37cda:	3808      	subs	r0, #8
   37cdc:	b148      	cbz	r0, 37cf2 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   37cde:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   37ce2:	428b      	cmp	r3, r1
   37ce4:	d005      	beq.n	37cf2 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   37ce6:	f110 0308 	adds.w	r3, r0, #8
   37cea:	d003      	beq.n	37cf4 <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   37cec:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37cee:	2800      	cmp	r0, #0
   37cf0:	d1f3      	bne.n	37cda <bt_l2cap_le_lookup_tx_cid+0x8>
}
   37cf2:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37cf4:	4618      	mov	r0, r3
   37cf6:	e7f1      	b.n	37cdc <bt_l2cap_le_lookup_tx_cid+0xa>

00037cf8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   37cf8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37cfa:	b110      	cbz	r0, 37d02 <bt_l2cap_le_lookup_rx_cid+0xa>
   37cfc:	3808      	subs	r0, #8
   37cfe:	e000      	b.n	37d02 <bt_l2cap_le_lookup_rx_cid+0xa>
   37d00:	3808      	subs	r0, #8
   37d02:	b148      	cbz	r0, 37d18 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   37d04:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   37d08:	428b      	cmp	r3, r1
   37d0a:	d005      	beq.n	37d18 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   37d0c:	f110 0308 	adds.w	r3, r0, #8
   37d10:	d003      	beq.n	37d1a <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   37d12:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37d14:	2800      	cmp	r0, #0
   37d16:	d1f3      	bne.n	37d00 <bt_l2cap_le_lookup_rx_cid+0x8>
}
   37d18:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   37d1a:	4618      	mov	r0, r3
   37d1c:	e7f1      	b.n	37d02 <bt_l2cap_le_lookup_rx_cid+0xa>

00037d1e <bt_l2cap_update_conn_param>:
{
   37d1e:	b570      	push	{r4, r5, r6, lr}
   37d20:	b082      	sub	sp, #8
   37d22:	4605      	mov	r5, r0
   37d24:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   37d26:	f7ef fe73 	bl	27a10 <get_ident>
   37d2a:	4602      	mov	r2, r0
   37d2c:	2308      	movs	r3, #8
   37d2e:	2112      	movs	r1, #18
   37d30:	2000      	movs	r0, #0
   37d32:	f7ef ff61 	bl	27bf8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   37d36:	b1e0      	cbz	r0, 37d72 <bt_l2cap_update_conn_param+0x54>
   37d38:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   37d3a:	2108      	movs	r1, #8
   37d3c:	4408      	add	r0, r1
   37d3e:	f002 feb8 	bl	3aab2 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   37d42:	8823      	ldrh	r3, [r4, #0]
   37d44:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   37d46:	8863      	ldrh	r3, [r4, #2]
   37d48:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   37d4a:	88a3      	ldrh	r3, [r4, #4]
   37d4c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   37d4e:	88e3      	ldrh	r3, [r4, #6]
   37d50:	80c3      	strh	r3, [r0, #6]
   37d52:	2300      	movs	r3, #0
   37d54:	9300      	str	r3, [sp, #0]
   37d56:	4632      	mov	r2, r6
   37d58:	2105      	movs	r1, #5
   37d5a:	4628      	mov	r0, r5
   37d5c:	f7ff ff77 	bl	37c4e <bt_l2cap_send_cb>
	if (err) {
   37d60:	4604      	mov	r4, r0
   37d62:	b910      	cbnz	r0, 37d6a <bt_l2cap_update_conn_param+0x4c>
}
   37d64:	4620      	mov	r0, r4
   37d66:	b002      	add	sp, #8
   37d68:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   37d6a:	4630      	mov	r0, r6
   37d6c:	f002 fe57 	bl	3aa1e <net_buf_unref>
		return err;
   37d70:	e7f8      	b.n	37d64 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   37d72:	f06f 040b 	mvn.w	r4, #11
   37d76:	e7f5      	b.n	37d64 <bt_l2cap_update_conn_param+0x46>

00037d78 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   37d78:	4770      	bx	lr

00037d7a <att_sent>:
{
   37d7a:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   37d7c:	684b      	ldr	r3, [r1, #4]
   37d7e:	695b      	ldr	r3, [r3, #20]
   37d80:	b10b      	cbz	r3, 37d86 <att_sent+0xc>
   37d82:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   37d84:	4798      	blx	r3
}
   37d86:	bd08      	pop	{r3, pc}

00037d88 <range_is_valid>:
	if (!start || !end) {
   37d88:	b120      	cbz	r0, 37d94 <range_is_valid+0xc>
   37d8a:	b119      	cbz	r1, 37d94 <range_is_valid+0xc>
	if (start > end) {
   37d8c:	4288      	cmp	r0, r1
   37d8e:	d806      	bhi.n	37d9e <range_is_valid+0x16>
	return true;
   37d90:	2001      	movs	r0, #1
}
   37d92:	4770      	bx	lr
		if (err) {
   37d94:	b10a      	cbz	r2, 37d9a <range_is_valid+0x12>
			*err = 0U;
   37d96:	2300      	movs	r3, #0
   37d98:	8013      	strh	r3, [r2, #0]
		return false;
   37d9a:	2000      	movs	r0, #0
   37d9c:	4770      	bx	lr
		if (err) {
   37d9e:	b102      	cbz	r2, 37da2 <range_is_valid+0x1a>
			*err = start;
   37da0:	8010      	strh	r0, [r2, #0]
		return false;
   37da2:	2000      	movs	r0, #0
   37da4:	4770      	bx	lr

00037da6 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   37da6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   37daa:	d201      	bcs.n	37db0 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   37dac:	200e      	movs	r0, #14
}
   37dae:	4770      	bx	lr
		return -err;
   37db0:	4240      	negs	r0, r0
   37db2:	b2c0      	uxtb	r0, r0
   37db4:	4770      	bx	lr

00037db6 <attr_read_type_cb>:
{
   37db6:	b410      	push	{r4}
	if (!data->rsp->len) {
   37db8:	68d4      	ldr	r4, [r2, #12]
   37dba:	7823      	ldrb	r3, [r4, #0]
   37dbc:	b923      	cbnz	r3, 37dc8 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   37dbe:	3102      	adds	r1, #2
   37dc0:	7021      	strb	r1, [r4, #0]
	return true;
   37dc2:	2001      	movs	r0, #1
}
   37dc4:	bc10      	pop	{r4}
   37dc6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   37dc8:	3102      	adds	r1, #2
   37dca:	428b      	cmp	r3, r1
   37dcc:	d005      	beq.n	37dda <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   37dce:	8983      	ldrh	r3, [r0, #12]
   37dd0:	3b02      	subs	r3, #2
   37dd2:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   37dd4:	2000      	movs	r0, #0
   37dd6:	6110      	str	r0, [r2, #16]
		return false;
   37dd8:	e7f4      	b.n	37dc4 <attr_read_type_cb+0xe>
	return true;
   37dda:	2001      	movs	r0, #1
   37ddc:	e7f2      	b.n	37dc4 <attr_read_type_cb+0xe>

00037dde <attr_read_group_cb>:
	if (!data->rsp->len) {
   37dde:	68d0      	ldr	r0, [r2, #12]
   37de0:	7803      	ldrb	r3, [r0, #0]
   37de2:	b91b      	cbnz	r3, 37dec <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   37de4:	3104      	adds	r1, #4
   37de6:	7001      	strb	r1, [r0, #0]
	return true;
   37de8:	2001      	movs	r0, #1
   37dea:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   37dec:	3104      	adds	r1, #4
   37dee:	428b      	cmp	r3, r1
   37df0:	d006      	beq.n	37e00 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   37df2:	6891      	ldr	r1, [r2, #8]
   37df4:	898b      	ldrh	r3, [r1, #12]
   37df6:	3b04      	subs	r3, #4
   37df8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   37dfa:	2000      	movs	r0, #0
   37dfc:	6110      	str	r0, [r2, #16]
		return false;
   37dfe:	4770      	bx	lr
	return true;
   37e00:	2001      	movs	r0, #1
}
   37e02:	4770      	bx	lr

00037e04 <att_prepare_write_req>:
}
   37e04:	2006      	movs	r0, #6
   37e06:	4770      	bx	lr

00037e08 <att_exec_write_req>:
}
   37e08:	2006      	movs	r0, #6
   37e0a:	4770      	bx	lr

00037e0c <att_op_get_type>:
	switch (op) {
   37e0c:	1e43      	subs	r3, r0, #1
   37e0e:	2bd1      	cmp	r3, #209	; 0xd1
   37e10:	d874      	bhi.n	37efc <att_op_get_type+0xf0>
   37e12:	e8df f003 	tbb	[pc, r3]
   37e16:	696d      	.short	0x696d
   37e18:	696d696d 	.word	0x696d696d
   37e1c:	696d696d 	.word	0x696d696d
   37e20:	696d696d 	.word	0x696d696d
   37e24:	696d696d 	.word	0x696d696d
   37e28:	6973736d 	.word	0x6973736d
   37e2c:	736d696d 	.word	0x736d696d
   37e30:	7871736f 	.word	0x7871736f
   37e34:	73737373 	.word	0x73737373
   37e38:	73737373 	.word	0x73737373
   37e3c:	73737373 	.word	0x73737373
   37e40:	73737373 	.word	0x73737373
   37e44:	73737373 	.word	0x73737373
   37e48:	73737373 	.word	0x73737373
   37e4c:	73737373 	.word	0x73737373
   37e50:	73737373 	.word	0x73737373
   37e54:	73737373 	.word	0x73737373
   37e58:	73737373 	.word	0x73737373
   37e5c:	73737373 	.word	0x73737373
   37e60:	73737373 	.word	0x73737373
   37e64:	6b737373 	.word	0x6b737373
   37e68:	73737373 	.word	0x73737373
   37e6c:	73737373 	.word	0x73737373
   37e70:	73737373 	.word	0x73737373
   37e74:	73737373 	.word	0x73737373
   37e78:	73737373 	.word	0x73737373
   37e7c:	73737373 	.word	0x73737373
   37e80:	73737373 	.word	0x73737373
   37e84:	73737373 	.word	0x73737373
   37e88:	73737373 	.word	0x73737373
   37e8c:	73737373 	.word	0x73737373
   37e90:	73737373 	.word	0x73737373
   37e94:	73737373 	.word	0x73737373
   37e98:	73737373 	.word	0x73737373
   37e9c:	73737373 	.word	0x73737373
   37ea0:	73737373 	.word	0x73737373
   37ea4:	73737373 	.word	0x73737373
   37ea8:	73737373 	.word	0x73737373
   37eac:	73737373 	.word	0x73737373
   37eb0:	73737373 	.word	0x73737373
   37eb4:	73737373 	.word	0x73737373
   37eb8:	73737373 	.word	0x73737373
   37ebc:	73737373 	.word	0x73737373
   37ec0:	73737373 	.word	0x73737373
   37ec4:	73737373 	.word	0x73737373
   37ec8:	73737373 	.word	0x73737373
   37ecc:	73737373 	.word	0x73737373
   37ed0:	73737373 	.word	0x73737373
   37ed4:	73737373 	.word	0x73737373
   37ed8:	73737373 	.word	0x73737373
   37edc:	73737373 	.word	0x73737373
   37ee0:	73737373 	.word	0x73737373
   37ee4:	6b737373 	.word	0x6b737373
{
   37ee8:	2001      	movs	r0, #1
   37eea:	4770      	bx	lr
		return ATT_COMMAND;
   37eec:	2000      	movs	r0, #0
   37eee:	4770      	bx	lr
		return ATT_RESPONSE;
   37ef0:	2002      	movs	r0, #2
   37ef2:	4770      	bx	lr
		return ATT_NOTIFICATION;
   37ef4:	2003      	movs	r0, #3
   37ef6:	4770      	bx	lr
		return ATT_INDICATION;
   37ef8:	2005      	movs	r0, #5
   37efa:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   37efc:	f010 0f40 	tst.w	r0, #64	; 0x40
   37f00:	d103      	bne.n	37f0a <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   37f02:	2006      	movs	r0, #6
   37f04:	4770      	bx	lr
		return ATT_CONFIRMATION;
   37f06:	2004      	movs	r0, #4
   37f08:	4770      	bx	lr
		return ATT_COMMAND;
   37f0a:	2000      	movs	r0, #0
}
   37f0c:	4770      	bx	lr

00037f0e <att_chan_attach>:
{
   37f0e:	b538      	push	{r3, r4, r5, lr}
   37f10:	4604      	mov	r4, r0
   37f12:	460d      	mov	r5, r1
	return list->head;
   37f14:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   37f16:	b143      	cbz	r3, 37f2a <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   37f18:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   37f1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   37f1e:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   37f22:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   37f24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   37f26:	b122      	cbz	r2, 37f32 <att_chan_attach+0x24>
}
   37f28:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   37f2a:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   37f2c:	f004 fa00 	bl	3c330 <z_impl_k_queue_init>
}
   37f30:	e7f2      	b.n	37f18 <att_chan_attach+0xa>
	list->tail = node;
   37f32:	62a3      	str	r3, [r4, #40]	; 0x28
}
   37f34:	e7f8      	b.n	37f28 <att_chan_attach+0x1a>

00037f36 <chan_req_send>:
{
   37f36:	b570      	push	{r4, r5, r6, lr}
   37f38:	4606      	mov	r6, r0
   37f3a:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   37f3c:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   37f40:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   37f42:	2200      	movs	r2, #0
	while (buf) {
   37f44:	b11b      	cbz	r3, 37f4e <chan_req_send+0x18>
		bytes += buf->len;
   37f46:	899c      	ldrh	r4, [r3, #12]
   37f48:	4422      	add	r2, r4
		buf = buf->frags;
   37f4a:	681b      	ldr	r3, [r3, #0]
   37f4c:	e7fa      	b.n	37f44 <chan_req_send+0xe>
   37f4e:	4291      	cmp	r1, r2
   37f50:	d30e      	bcc.n	37f70 <chan_req_send+0x3a>
	chan->req = req;
   37f52:	f8c6 50f4 	str.w	r5, [r6, #244]	; 0xf4
	buf = req->buf;
   37f56:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   37f58:	2200      	movs	r2, #0
   37f5a:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   37f5c:	4621      	mov	r1, r4
   37f5e:	4630      	mov	r0, r6
   37f60:	f7f0 f916 	bl	28190 <chan_send>
	if (err) {
   37f64:	b118      	cbz	r0, 37f6e <chan_req_send+0x38>
		req->buf = buf;
   37f66:	60ac      	str	r4, [r5, #8]
		chan->req = NULL;
   37f68:	2300      	movs	r3, #0
   37f6a:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
}
   37f6e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   37f70:	f06f 0079 	mvn.w	r0, #121	; 0x79
   37f74:	e7fb      	b.n	37f6e <chan_req_send+0x38>

00037f76 <bt_att_chan_req_send>:
{
   37f76:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   37f78:	f7ff ffdd 	bl	37f36 <chan_req_send>
}
   37f7c:	bd08      	pop	{r3, pc}

00037f7e <bt_att_status>:
{
   37f7e:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   37f80:	f3bf 8f5b 	dmb	ish
   37f84:	680b      	ldr	r3, [r1, #0]
   37f86:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   37f8a:	f013 0f01 	tst.w	r3, #1
   37f8e:	d007      	beq.n	37fa0 <bt_att_status+0x22>
   37f90:	4604      	mov	r4, r0
   37f92:	3808      	subs	r0, #8
	if (!chan->att) {
   37f94:	f854 3c08 	ldr.w	r3, [r4, #-8]
   37f98:	b113      	cbz	r3, 37fa0 <bt_att_status+0x22>
	if (chan->req) {
   37f9a:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   37f9e:	b102      	cbz	r2, 37fa2 <bt_att_status+0x24>
}
   37fa0:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   37fa2:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   37fa4:	2d00      	cmp	r5, #0
   37fa6:	d0fb      	beq.n	37fa0 <bt_att_status+0x22>
	return node->next;
   37fa8:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   37faa:	605a      	str	r2, [r3, #4]
	return list->tail;
   37fac:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   37fae:	42a9      	cmp	r1, r5
   37fb0:	d00e      	beq.n	37fd0 <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   37fb2:	4629      	mov	r1, r5
   37fb4:	f7ff ffdf 	bl	37f76 <bt_att_chan_req_send>
   37fb8:	2800      	cmp	r0, #0
   37fba:	daf1      	bge.n	37fa0 <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   37fbc:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   37fc0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   37fc2:	602a      	str	r2, [r5, #0]
	list->head = node;
   37fc4:	605d      	str	r5, [r3, #4]
	return list->tail;
   37fc6:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   37fc8:	2a00      	cmp	r2, #0
   37fca:	d1e9      	bne.n	37fa0 <bt_att_status+0x22>
	list->tail = node;
   37fcc:	609d      	str	r5, [r3, #8]
}
   37fce:	e7e7      	b.n	37fa0 <bt_att_status+0x22>
	list->tail = node;
   37fd0:	609a      	str	r2, [r3, #8]
}
   37fd2:	e7ee      	b.n	37fb2 <bt_att_status+0x34>

00037fd4 <att_req_send_process>:
{
   37fd4:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   37fd6:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   37fd8:	2e00      	cmp	r6, #0
   37fda:	d038      	beq.n	3804e <att_req_send_process+0x7a>
   37fdc:	4605      	mov	r5, r0
	return node->next;
   37fde:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   37fe0:	6043      	str	r3, [r0, #4]
	return list->tail;
   37fe2:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   37fe4:	4296      	cmp	r6, r2
   37fe6:	d00d      	beq.n	38004 <att_req_send_process+0x30>
	return list->head;
   37fe8:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   37fea:	b198      	cbz	r0, 38014 <att_req_send_process+0x40>
   37fec:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   37ff0:	d012      	beq.n	38018 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   37ff2:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   37ff6:	d014      	beq.n	38022 <att_req_send_process+0x4e>
	return node->next;
   37ff8:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   37ffc:	b18c      	cbz	r4, 38022 <att_req_send_process+0x4e>
   37ffe:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   38002:	e00e      	b.n	38022 <att_req_send_process+0x4e>
	list->tail = node;
   38004:	6083      	str	r3, [r0, #8]
}
   38006:	e7ef      	b.n	37fe8 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   38008:	4631      	mov	r1, r6
   3800a:	f7ff ffb4 	bl	37f76 <bt_att_chan_req_send>
   3800e:	2800      	cmp	r0, #0
   38010:	db0c      	blt.n	3802c <att_req_send_process+0x58>
   38012:	e01c      	b.n	3804e <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38014:	4604      	mov	r4, r0
   38016:	e004      	b.n	38022 <att_req_send_process+0x4e>
   38018:	4604      	mov	r4, r0
   3801a:	e002      	b.n	38022 <att_req_send_process+0x4e>
   3801c:	4623      	mov	r3, r4
   3801e:	4620      	mov	r0, r4
   38020:	461c      	mov	r4, r3
   38022:	b178      	cbz	r0, 38044 <att_req_send_process+0x70>
		if (!chan->req) {
   38024:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   38028:	2b00      	cmp	r3, #0
   3802a:	d0ed      	beq.n	38008 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3802c:	2c00      	cmp	r4, #0
   3802e:	d0f5      	beq.n	3801c <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38030:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   38034:	d0f3      	beq.n	3801e <att_req_send_process+0x4a>
	return node->next;
   38036:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   3803a:	2b00      	cmp	r3, #0
   3803c:	d0ef      	beq.n	3801e <att_req_send_process+0x4a>
   3803e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   38042:	e7ec      	b.n	3801e <att_req_send_process+0x4a>
	return list->head;
   38044:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   38046:	6033      	str	r3, [r6, #0]
	list->head = node;
   38048:	606e      	str	r6, [r5, #4]
	return list->tail;
   3804a:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   3804c:	b103      	cbz	r3, 38050 <att_req_send_process+0x7c>
}
   3804e:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   38050:	60ae      	str	r6, [r5, #8]
}
   38052:	e7fc      	b.n	3804e <att_req_send_process+0x7a>

00038054 <bt_att_chan_send>:
{
   38054:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   38056:	f7f0 f89b 	bl	28190 <chan_send>
}
   3805a:	bd08      	pop	{r3, pc}

0003805c <chan_req_sent>:
{
   3805c:	b508      	push	{r3, lr}
	if (chan->req) {
   3805e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   38062:	b133      	cbz	r3, 38072 <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   38064:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   38068:	2300      	movs	r3, #0
   3806a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   3806e:	f7f8 fb39 	bl	306e4 <k_work_reschedule>
}
   38072:	bd08      	pop	{r3, pc}

00038074 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   38074:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38076:	f3bf 8f5b 	dmb	ish
   3807a:	e850 3f00 	ldrex	r3, [r0]
   3807e:	f023 0302 	bic.w	r3, r3, #2
   38082:	e840 3200 	strex	r2, r3, [r0]
   38086:	2a00      	cmp	r2, #0
   38088:	d1f7      	bne.n	3807a <chan_cfm_sent+0x6>
   3808a:	f3bf 8f5b 	dmb	ish
}
   3808e:	4770      	bx	lr

00038090 <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   38090:	30f0      	adds	r0, #240	; 0xf0
   38092:	f3bf 8f5b 	dmb	ish
   38096:	e850 3f00 	ldrex	r3, [r0]
   3809a:	f023 0301 	bic.w	r3, r3, #1
   3809e:	e840 3200 	strex	r2, r3, [r0]
   380a2:	2a00      	cmp	r2, #0
   380a4:	d1f7      	bne.n	38096 <chan_rsp_sent+0x6>
   380a6:	f3bf 8f5b 	dmb	ish
}
   380aa:	4770      	bx	lr

000380ac <process_queue>:
{
   380ac:	b570      	push	{r4, r5, r6, lr}
   380ae:	4605      	mov	r5, r0
   380b0:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   380b2:	2200      	movs	r2, #0
   380b4:	2300      	movs	r3, #0
   380b6:	4608      	mov	r0, r1
   380b8:	f002 fc7f 	bl	3a9ba <net_buf_get>
	if (buf) {
   380bc:	b170      	cbz	r0, 380dc <process_queue+0x30>
   380be:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   380c0:	2200      	movs	r2, #0
   380c2:	4601      	mov	r1, r0
   380c4:	4628      	mov	r0, r5
   380c6:	f7f0 f863 	bl	28190 <chan_send>
		if (err) {
   380ca:	4605      	mov	r5, r0
   380cc:	b908      	cbnz	r0, 380d2 <process_queue+0x26>
}
   380ce:	4628      	mov	r0, r5
   380d0:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   380d2:	4631      	mov	r1, r6
   380d4:	4620      	mov	r0, r4
   380d6:	f004 f943 	bl	3c360 <k_queue_prepend>
			return err;
   380da:	e7f8      	b.n	380ce <process_queue+0x22>
	return -ENOENT;
   380dc:	f06f 0501 	mvn.w	r5, #1
   380e0:	e7f5      	b.n	380ce <process_queue+0x22>

000380e2 <bt_att_sent>:
{
   380e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   380e4:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   380e6:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   380ea:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   380ee:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   380f2:	b10b      	cbz	r3, 380f8 <bt_att_sent+0x16>
		chan->sent(chan);
   380f4:	4630      	mov	r0, r6
   380f6:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   380f8:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   380fc:	f3bf 8f5b 	dmb	ish
   38100:	e853 2f00 	ldrex	r2, [r3]
   38104:	f022 0210 	bic.w	r2, r2, #16
   38108:	e843 2100 	strex	r1, r2, [r3]
   3810c:	2900      	cmp	r1, #0
   3810e:	d1f7      	bne.n	38100 <bt_att_sent+0x1e>
   38110:	f3bf 8f5b 	dmb	ish
	if (!att) {
   38114:	b145      	cbz	r5, 38128 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   38116:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   3811a:	b133      	cbz	r3, 3812a <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   3811c:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   38120:	4630      	mov	r0, r6
   38122:	f7ff ffc3 	bl	380ac <process_queue>
	if (!err) {
   38126:	b9c0      	cbnz	r0, 3815a <bt_att_sent+0x78>
}
   38128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   3812a:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   3812c:	2f00      	cmp	r7, #0
   3812e:	d0f5      	beq.n	3811c <bt_att_sent+0x3a>
	return node->next;
   38130:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   38132:	606b      	str	r3, [r5, #4]
	return list->tail;
   38134:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   38136:	42ba      	cmp	r2, r7
   38138:	d00d      	beq.n	38156 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   3813a:	4639      	mov	r1, r7
   3813c:	4630      	mov	r0, r6
   3813e:	f7ff fefa 	bl	37f36 <chan_req_send>
   38142:	2800      	cmp	r0, #0
   38144:	daf0      	bge.n	38128 <bt_att_sent+0x46>
	return list->head;
   38146:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   38148:	603b      	str	r3, [r7, #0]
	list->head = node;
   3814a:	606f      	str	r7, [r5, #4]
	return list->tail;
   3814c:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   3814e:	2b00      	cmp	r3, #0
   38150:	d1e4      	bne.n	3811c <bt_att_sent+0x3a>
	list->tail = node;
   38152:	60af      	str	r7, [r5, #8]
}
   38154:	e7e2      	b.n	3811c <bt_att_sent+0x3a>
	list->tail = node;
   38156:	60ab      	str	r3, [r5, #8]
}
   38158:	e7ef      	b.n	3813a <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   3815a:	f105 010c 	add.w	r1, r5, #12
   3815e:	4630      	mov	r0, r6
   38160:	f7ff ffa4 	bl	380ac <process_queue>
   38164:	e7e0      	b.n	38128 <bt_att_sent+0x46>

00038166 <att_send_process>:
{
   38166:	b570      	push	{r4, r5, r6, lr}
   38168:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   3816a:	2200      	movs	r2, #0
   3816c:	2300      	movs	r3, #0
   3816e:	300c      	adds	r0, #12
   38170:	f002 fc23 	bl	3a9ba <net_buf_get>
	if (!buf) {
   38174:	b360      	cbz	r0, 381d0 <att_send_process+0x6a>
   38176:	4605      	mov	r5, r0
	return list->head;
   38178:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3817a:	b158      	cbz	r0, 38194 <att_send_process+0x2e>
   3817c:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   38180:	d00c      	beq.n	3819c <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38182:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   38186:	d006      	beq.n	38196 <att_send_process+0x30>
	return node->next;
   38188:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   3818c:	b11c      	cbz	r4, 38196 <att_send_process+0x30>
   3818e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   38192:	e000      	b.n	38196 <att_send_process+0x30>
   38194:	4604      	mov	r4, r0
   38196:	f06f 0301 	mvn.w	r3, #1
   3819a:	e004      	b.n	381a6 <att_send_process+0x40>
   3819c:	4604      	mov	r4, r0
   3819e:	e7fa      	b.n	38196 <att_send_process+0x30>
   381a0:	4622      	mov	r2, r4
   381a2:	4620      	mov	r0, r4
   381a4:	4614      	mov	r4, r2
   381a6:	b188      	cbz	r0, 381cc <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   381a8:	2200      	movs	r2, #0
   381aa:	4629      	mov	r1, r5
   381ac:	f7ff ff52 	bl	38054 <bt_att_chan_send>
		if (err >= 0) {
   381b0:	1e03      	subs	r3, r0, #0
   381b2:	da0b      	bge.n	381cc <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   381b4:	2c00      	cmp	r4, #0
   381b6:	d0f3      	beq.n	381a0 <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   381b8:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   381bc:	d0f1      	beq.n	381a2 <att_send_process+0x3c>
	return node->next;
   381be:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   381c2:	2a00      	cmp	r2, #0
   381c4:	d0ed      	beq.n	381a2 <att_send_process+0x3c>
   381c6:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   381ca:	e7ea      	b.n	381a2 <att_send_process+0x3c>
	if (err < 0) {
   381cc:	2b00      	cmp	r3, #0
   381ce:	db00      	blt.n	381d2 <att_send_process+0x6c>
}
   381d0:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   381d2:	4629      	mov	r1, r5
   381d4:	f106 000c 	add.w	r0, r6, #12
   381d8:	f004 f8c2 	bl	3c360 <k_queue_prepend>
   381dc:	e7f8      	b.n	381d0 <att_send_process+0x6a>

000381de <att_notify_mult>:
{
   381de:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   381e0:	6803      	ldr	r3, [r0, #0]
   381e2:	898a      	ldrh	r2, [r1, #12]
   381e4:	6889      	ldr	r1, [r1, #8]
   381e6:	6818      	ldr	r0, [r3, #0]
   381e8:	f7f2 faa8 	bl	2a73c <bt_gatt_mult_notification>
}
   381ec:	2000      	movs	r0, #0
   381ee:	bd08      	pop	{r3, pc}

000381f0 <att_notify>:
{
   381f0:	b538      	push	{r3, r4, r5, lr}
   381f2:	4605      	mov	r5, r0
   381f4:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   381f6:	f101 0008 	add.w	r0, r1, #8
   381fa:	f002 fc9b 	bl	3ab34 <net_buf_simple_pull_le16>
   381fe:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   38200:	682d      	ldr	r5, [r5, #0]
   38202:	89a3      	ldrh	r3, [r4, #12]
   38204:	68a2      	ldr	r2, [r4, #8]
   38206:	6828      	ldr	r0, [r5, #0]
   38208:	f001 fb74 	bl	398f4 <bt_gatt_notification>
}
   3820c:	2000      	movs	r0, #0
   3820e:	bd38      	pop	{r3, r4, r5, pc}

00038210 <bt_att_chan_send_rsp>:
{
   38210:	b538      	push	{r3, r4, r5, lr}
   38212:	4604      	mov	r4, r0
   38214:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   38216:	f7ff ff1d 	bl	38054 <bt_att_chan_send>
	if (err) {
   3821a:	b900      	cbnz	r0, 3821e <bt_att_chan_send_rsp+0xe>
}
   3821c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   3821e:	4629      	mov	r1, r5
   38220:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   38224:	f002 fbee 	bl	3aa04 <net_buf_put>
}
   38228:	e7f8      	b.n	3821c <bt_att_chan_send_rsp+0xc>

0003822a <att_chan_mtu_updated>:
{
   3822a:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   3822c:	6806      	ldr	r6, [r0, #0]
	return list->head;
   3822e:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38230:	b15c      	cbz	r4, 3824a <att_chan_mtu_updated+0x20>
   38232:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   38236:	d00c      	beq.n	38252 <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38238:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   3823c:	d006      	beq.n	3824c <att_chan_mtu_updated+0x22>
	return node->next;
   3823e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   38242:	b11b      	cbz	r3, 3824c <att_chan_mtu_updated+0x22>
   38244:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   38248:	e000      	b.n	3824c <att_chan_mtu_updated+0x22>
   3824a:	4623      	mov	r3, r4
   3824c:	2200      	movs	r2, #0
   3824e:	4611      	mov	r1, r2
   38250:	e004      	b.n	3825c <att_chan_mtu_updated+0x32>
   38252:	4623      	mov	r3, r4
   38254:	e7fa      	b.n	3824c <att_chan_mtu_updated+0x22>
   38256:	461d      	mov	r5, r3
   38258:	461c      	mov	r4, r3
   3825a:	462b      	mov	r3, r5
   3825c:	b1bc      	cbz	r4, 3828e <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   3825e:	4284      	cmp	r4, r0
   38260:	d009      	beq.n	38276 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   38262:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   38266:	42a9      	cmp	r1, r5
   38268:	bf38      	it	cc
   3826a:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   3826c:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   38270:	42a2      	cmp	r2, r4
   38272:	bf38      	it	cc
   38274:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38276:	2b00      	cmp	r3, #0
   38278:	d0ed      	beq.n	38256 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3827a:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   3827e:	d0eb      	beq.n	38258 <att_chan_mtu_updated+0x2e>
	return node->next;
   38280:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   38284:	2d00      	cmp	r5, #0
   38286:	d0e7      	beq.n	38258 <att_chan_mtu_updated+0x2e>
   38288:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   3828c:	e7e4      	b.n	38258 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   3828e:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   38292:	428b      	cmp	r3, r1
   38294:	d803      	bhi.n	3829e <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   38296:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   3829a:	4294      	cmp	r4, r2
   3829c:	d90a      	bls.n	382b4 <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   3829e:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   382a2:	4282      	cmp	r2, r0
   382a4:	bf38      	it	cc
   382a6:	4602      	movcc	r2, r0
   382a8:	4299      	cmp	r1, r3
   382aa:	bf38      	it	cc
   382ac:	4619      	movcc	r1, r3
   382ae:	6830      	ldr	r0, [r6, #0]
   382b0:	f7f2 faf8 	bl	2a8a4 <bt_gatt_att_max_mtu_changed>
}
   382b4:	bd70      	pop	{r4, r5, r6, pc}

000382b6 <att_change_security>:
{
   382b6:	b508      	push	{r3, lr}
	switch (err) {
   382b8:	2905      	cmp	r1, #5
   382ba:	d008      	beq.n	382ce <att_change_security+0x18>
   382bc:	290f      	cmp	r1, #15
   382be:	d113      	bne.n	382e8 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_L2)
   382c0:	7a43      	ldrb	r3, [r0, #9]
   382c2:	2b01      	cmp	r3, #1
   382c4:	d813      	bhi.n	382ee <att_change_security+0x38>
		sec = BT_SECURITY_L2;
   382c6:	2102      	movs	r1, #2
	return bt_conn_set_security(conn, sec);
   382c8:	f7ff fafa 	bl	378c0 <bt_conn_set_security>
}
   382cc:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_L2) {
   382ce:	7a43      	ldrb	r3, [r0, #9]
   382d0:	2b01      	cmp	r3, #1
   382d2:	d905      	bls.n	382e0 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   382d4:	2b02      	cmp	r3, #2
   382d6:	d905      	bls.n	382e4 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   382d8:	2b03      	cmp	r3, #3
   382da:	d80b      	bhi.n	382f4 <att_change_security+0x3e>
			sec = BT_SECURITY_L4;
   382dc:	2104      	movs	r1, #4
   382de:	e7f3      	b.n	382c8 <att_change_security+0x12>
			sec = BT_SECURITY_L2;
   382e0:	2102      	movs	r1, #2
   382e2:	e7f1      	b.n	382c8 <att_change_security+0x12>
			sec = BT_SECURITY_L3;
   382e4:	2103      	movs	r1, #3
   382e6:	e7ef      	b.n	382c8 <att_change_security+0x12>
	switch (err) {
   382e8:	f06f 0015 	mvn.w	r0, #21
   382ec:	e7ee      	b.n	382cc <att_change_security+0x16>
			return -EALREADY;
   382ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
   382f2:	e7eb      	b.n	382cc <att_change_security+0x16>
			return -EALREADY;
   382f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   382f8:	e7e8      	b.n	382cc <att_change_security+0x16>

000382fa <write_cb>:
{
   382fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   382fc:	b083      	sub	sp, #12
   382fe:	4606      	mov	r6, r0
   38300:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   38302:	222a      	movs	r2, #42	; 0x2a
   38304:	4601      	mov	r1, r0
   38306:	6820      	ldr	r0, [r4, #0]
   38308:	f001 f957 	bl	395ba <bt_gatt_check_perm>
   3830c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   3830e:	bb08      	cbnz	r0, 38354 <write_cb+0x5a>
   38310:	4605      	mov	r5, r0
	if (!data->req) {
   38312:	7a23      	ldrb	r3, [r4, #8]
   38314:	b11b      	cbz	r3, 3831e <write_cb+0x24>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   38316:	2b18      	cmp	r3, #24
   38318:	d016      	beq.n	38348 <write_cb+0x4e>
	uint8_t flags = 0U;
   3831a:	4603      	mov	r3, r0
   3831c:	e000      	b.n	38320 <write_cb+0x26>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   3831e:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   38320:	68b7      	ldr	r7, [r6, #8]
   38322:	9301      	str	r3, [sp, #4]
   38324:	8a63      	ldrh	r3, [r4, #18]
   38326:	9300      	str	r3, [sp, #0]
   38328:	8a23      	ldrh	r3, [r4, #16]
   3832a:	68e2      	ldr	r2, [r4, #12]
   3832c:	4631      	mov	r1, r6
   3832e:	6820      	ldr	r0, [r4, #0]
   38330:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   38332:	2800      	cmp	r0, #0
   38334:	db02      	blt.n	3833c <write_cb+0x42>
   38336:	8a23      	ldrh	r3, [r4, #16]
   38338:	4298      	cmp	r0, r3
   3833a:	d007      	beq.n	3834c <write_cb+0x52>
		data->err = err_to_att(write);
   3833c:	f7ff fd33 	bl	37da6 <err_to_att>
   38340:	7520      	strb	r0, [r4, #20]
}
   38342:	4628      	mov	r0, r5
   38344:	b003      	add	sp, #12
   38346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   38348:	2304      	movs	r3, #4
   3834a:	e7e9      	b.n	38320 <write_cb+0x26>
	data->err = 0U;
   3834c:	2300      	movs	r3, #0
   3834e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   38350:	2501      	movs	r5, #1
   38352:	e7f6      	b.n	38342 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
   38354:	2500      	movs	r5, #0
   38356:	e7f4      	b.n	38342 <write_cb+0x48>

00038358 <att_chan_read>:
{
   38358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3835c:	b085      	sub	sp, #20
   3835e:	4680      	mov	r8, r0
   38360:	4689      	mov	r9, r1
   38362:	9202      	str	r2, [sp, #8]
   38364:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   38366:	6881      	ldr	r1, [r0, #8]
   38368:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   3836a:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   3836e:	4613      	mov	r3, r2
	size_t bytes = 0;
   38370:	2200      	movs	r2, #0
	while (buf) {
   38372:	b11b      	cbz	r3, 3837c <att_chan_read+0x24>
		bytes += buf->len;
   38374:	8999      	ldrh	r1, [r3, #12]
   38376:	440a      	add	r2, r1
		buf = buf->frags;
   38378:	681b      	ldr	r3, [r3, #0]
   3837a:	e7fa      	b.n	38372 <att_chan_read+0x1a>
   3837c:	4290      	cmp	r0, r2
   3837e:	d804      	bhi.n	3838a <att_chan_read+0x32>
		return 0;
   38380:	2400      	movs	r4, #0
}
   38382:	4620      	mov	r0, r4
   38384:	b005      	add	sp, #20
   38386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   3838a:	9802      	ldr	r0, [sp, #8]
   3838c:	f002 fb71 	bl	3aa72 <net_buf_frag_last>
   38390:	4607      	mov	r7, r0
	size_t len, total = 0;
   38392:	f04f 0a00 	mov.w	sl, #0
   38396:	e083      	b.n	384a0 <att_chan_read+0x148>
		bytes += buf->len;
   38398:	8999      	ldrh	r1, [r3, #12]
   3839a:	440a      	add	r2, r1
		buf = buf->frags;
   3839c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   3839e:	2b00      	cmp	r3, #0
   383a0:	d1fa      	bne.n	38398 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   383a2:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   383a4:	f107 0608 	add.w	r6, r7, #8
   383a8:	4630      	mov	r0, r6
   383aa:	f002 fbcf 	bl	3ab4c <net_buf_simple_tailroom>
   383ae:	4284      	cmp	r4, r0
   383b0:	d32c      	bcc.n	3840c <att_chan_read+0xb4>
   383b2:	4630      	mov	r0, r6
   383b4:	f002 fbca 	bl	3ab4c <net_buf_simple_tailroom>
   383b8:	4606      	mov	r6, r0
		if (!len) {
   383ba:	2e00      	cmp	r6, #0
   383bc:	d032      	beq.n	38424 <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   383be:	f8d9 4004 	ldr.w	r4, [r9, #4]
   383c2:	68b9      	ldr	r1, [r7, #8]
   383c4:	89ba      	ldrh	r2, [r7, #12]
   383c6:	9500      	str	r5, [sp, #0]
   383c8:	b2b3      	uxth	r3, r6
   383ca:	440a      	add	r2, r1
   383cc:	4649      	mov	r1, r9
   383ce:	9803      	ldr	r0, [sp, #12]
   383d0:	47a0      	blx	r4
		if (read < 0) {
   383d2:	1e04      	subs	r4, r0, #0
   383d4:	db5a      	blt.n	3848c <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   383d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   383d8:	b12b      	cbz	r3, 383e6 <att_chan_read+0x8e>
   383da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   383dc:	4621      	mov	r1, r4
   383de:	4638      	mov	r0, r7
   383e0:	4798      	blx	r3
   383e2:	2800      	cmp	r0, #0
   383e4:	d061      	beq.n	384aa <att_chan_read+0x152>
		net_buf_add(frag, read);
   383e6:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   383e8:	4621      	mov	r1, r4
   383ea:	f107 0008 	add.w	r0, r7, #8
   383ee:	f002 fb60 	bl	3aab2 <net_buf_simple_add>
		total += read;
   383f2:	44a2      	add	sl, r4
		offset += read;
   383f4:	4425      	add	r5, r4
   383f6:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   383f8:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   383fc:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   383fe:	2200      	movs	r2, #0
	while (buf) {
   38400:	2b00      	cmp	r3, #0
   38402:	d049      	beq.n	38498 <att_chan_read+0x140>
		bytes += buf->len;
   38404:	8999      	ldrh	r1, [r3, #12]
   38406:	440a      	add	r2, r1
		buf = buf->frags;
   38408:	681b      	ldr	r3, [r3, #0]
   3840a:	e7f9      	b.n	38400 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   3840c:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   38410:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   38412:	2200      	movs	r2, #0
	while (buf) {
   38414:	e002      	b.n	3841c <att_chan_read+0xc4>
		bytes += buf->len;
   38416:	8999      	ldrh	r1, [r3, #12]
   38418:	440a      	add	r2, r1
		buf = buf->frags;
   3841a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   3841c:	2b00      	cmp	r3, #0
   3841e:	d1fa      	bne.n	38416 <att_chan_read+0xbe>
   38420:	1ab6      	subs	r6, r6, r2
   38422:	e7ca      	b.n	383ba <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   38424:	9b02      	ldr	r3, [sp, #8]
   38426:	7998      	ldrb	r0, [r3, #6]
   38428:	f7f4 fc6a 	bl	2cd00 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   3842c:	2200      	movs	r2, #0
   3842e:	2300      	movs	r3, #0
   38430:	f002 fabc 	bl	3a9ac <net_buf_alloc_fixed>
			if (!frag) {
   38434:	4607      	mov	r7, r0
   38436:	b150      	cbz	r0, 3844e <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   38438:	4601      	mov	r1, r0
   3843a:	f8dd b008 	ldr.w	fp, [sp, #8]
   3843e:	4658      	mov	r0, fp
   38440:	f002 fb28 	bl	3aa94 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   38444:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   38448:	4632      	mov	r2, r6
	while (buf) {
   3844a:	465b      	mov	r3, fp
   3844c:	e004      	b.n	38458 <att_chan_read+0x100>
				return total;
   3844e:	4654      	mov	r4, sl
   38450:	e797      	b.n	38382 <att_chan_read+0x2a>
		bytes += buf->len;
   38452:	8999      	ldrh	r1, [r3, #12]
   38454:	440a      	add	r2, r1
		buf = buf->frags;
   38456:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   38458:	2b00      	cmp	r3, #0
   3845a:	d1fa      	bne.n	38452 <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   3845c:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   3845e:	f107 0b08 	add.w	fp, r7, #8
   38462:	4658      	mov	r0, fp
   38464:	f002 fb72 	bl	3ab4c <net_buf_simple_tailroom>
   38468:	4284      	cmp	r4, r0
   3846a:	d304      	bcc.n	38476 <att_chan_read+0x11e>
   3846c:	4658      	mov	r0, fp
   3846e:	f002 fb6d 	bl	3ab4c <net_buf_simple_tailroom>
   38472:	4606      	mov	r6, r0
   38474:	e7a3      	b.n	383be <att_chan_read+0x66>
   38476:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   3847a:	9b02      	ldr	r3, [sp, #8]
   3847c:	e002      	b.n	38484 <att_chan_read+0x12c>
		bytes += buf->len;
   3847e:	899a      	ldrh	r2, [r3, #12]
   38480:	4416      	add	r6, r2
		buf = buf->frags;
   38482:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   38484:	2b00      	cmp	r3, #0
   38486:	d1fa      	bne.n	3847e <att_chan_read+0x126>
   38488:	1b8e      	subs	r6, r1, r6
   3848a:	e798      	b.n	383be <att_chan_read+0x66>
			if (total) {
   3848c:	f1ba 0f00 	cmp.w	sl, #0
   38490:	f43f af77 	beq.w	38382 <att_chan_read+0x2a>
				return total;
   38494:	4654      	mov	r4, sl
   38496:	e774      	b.n	38382 <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   38498:	4290      	cmp	r0, r2
   3849a:	d906      	bls.n	384aa <att_chan_read+0x152>
   3849c:	45b3      	cmp	fp, r6
   3849e:	d104      	bne.n	384aa <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   384a0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   384a4:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   384a6:	2200      	movs	r2, #0
	while (buf) {
   384a8:	e779      	b.n	3839e <att_chan_read+0x46>
	return total;
   384aa:	4654      	mov	r4, sl
   384ac:	e769      	b.n	38382 <att_chan_read+0x2a>

000384ae <read_cb>:
{
   384ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   384b0:	b083      	sub	sp, #12
   384b2:	4606      	mov	r6, r0
   384b4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   384b6:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   384b8:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   384ba:	2300      	movs	r3, #0
   384bc:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   384be:	2215      	movs	r2, #21
   384c0:	4631      	mov	r1, r6
   384c2:	f001 f87a 	bl	395ba <bt_gatt_check_perm>
   384c6:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   384c8:	b118      	cbz	r0, 384d2 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   384ca:	2500      	movs	r5, #0
}
   384cc:	4628      	mov	r0, r5
   384ce:	b003      	add	sp, #12
   384d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   384d2:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   384d4:	2300      	movs	r3, #0
   384d6:	9301      	str	r3, [sp, #4]
   384d8:	9300      	str	r3, [sp, #0]
   384da:	88a3      	ldrh	r3, [r4, #4]
   384dc:	68a2      	ldr	r2, [r4, #8]
   384de:	4631      	mov	r1, r6
   384e0:	4638      	mov	r0, r7
   384e2:	f7ff ff39 	bl	38358 <att_chan_read>
	if (ret < 0) {
   384e6:	2800      	cmp	r0, #0
   384e8:	db01      	blt.n	384ee <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   384ea:	2501      	movs	r5, #1
   384ec:	e7ee      	b.n	384cc <read_cb+0x1e>
		data->err = err_to_att(ret);
   384ee:	f7ff fc5a 	bl	37da6 <err_to_att>
   384f2:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   384f4:	e7ea      	b.n	384cc <read_cb+0x1e>

000384f6 <find_info_cb>:
{
   384f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   384fa:	4606      	mov	r6, r0
   384fc:	460f      	mov	r7, r1
   384fe:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   38500:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   38504:	6893      	ldr	r3, [r2, #8]
   38506:	b14b      	cbz	r3, 3851c <find_info_cb+0x26>
	switch (data->rsp->format) {
   38508:	68a3      	ldr	r3, [r4, #8]
   3850a:	781d      	ldrb	r5, [r3, #0]
   3850c:	2d01      	cmp	r5, #1
   3850e:	d013      	beq.n	38538 <find_info_cb+0x42>
   38510:	2d02      	cmp	r5, #2
   38512:	d02d      	beq.n	38570 <find_info_cb+0x7a>
   38514:	2500      	movs	r5, #0
}
   38516:	4628      	mov	r0, r5
   38518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   3851c:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   3851e:	2101      	movs	r1, #1
   38520:	3008      	adds	r0, #8
   38522:	f002 fac6 	bl	3aab2 <net_buf_simple_add>
   38526:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   38528:	6833      	ldr	r3, [r6, #0]
   3852a:	781b      	ldrb	r3, [r3, #0]
   3852c:	b913      	cbnz	r3, 38534 <find_info_cb+0x3e>
   3852e:	2301      	movs	r3, #1
   38530:	7003      	strb	r3, [r0, #0]
   38532:	e7e9      	b.n	38508 <find_info_cb+0x12>
   38534:	2302      	movs	r3, #2
   38536:	e7fb      	b.n	38530 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   38538:	6833      	ldr	r3, [r6, #0]
   3853a:	f893 9000 	ldrb.w	r9, [r3]
   3853e:	f1b9 0f00 	cmp.w	r9, #0
   38542:	d001      	beq.n	38548 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   38544:	2500      	movs	r5, #0
   38546:	e7e6      	b.n	38516 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   38548:	6860      	ldr	r0, [r4, #4]
   3854a:	2104      	movs	r1, #4
   3854c:	3008      	adds	r0, #8
   3854e:	f002 fab0 	bl	3aab2 <net_buf_simple_add>
   38552:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   38554:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   38556:	6832      	ldr	r2, [r6, #0]
   38558:	68e3      	ldr	r3, [r4, #12]
   3855a:	8852      	ldrh	r2, [r2, #2]
   3855c:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   3855e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   38562:	6862      	ldr	r2, [r4, #4]
   38564:	8992      	ldrh	r2, [r2, #12]
   38566:	1a9b      	subs	r3, r3, r2
   38568:	2b04      	cmp	r3, #4
   3856a:	d8d4      	bhi.n	38516 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   3856c:	464d      	mov	r5, r9
   3856e:	e7d2      	b.n	38516 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   38570:	6833      	ldr	r3, [r6, #0]
   38572:	781b      	ldrb	r3, [r3, #0]
   38574:	2b02      	cmp	r3, #2
   38576:	d001      	beq.n	3857c <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   38578:	2500      	movs	r5, #0
   3857a:	e7cc      	b.n	38516 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   3857c:	6860      	ldr	r0, [r4, #4]
   3857e:	2112      	movs	r1, #18
   38580:	3008      	adds	r0, #8
   38582:	f002 fa96 	bl	3aab2 <net_buf_simple_add>
   38586:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   38588:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   3858a:	68e0      	ldr	r0, [r4, #12]
   3858c:	6831      	ldr	r1, [r6, #0]
   3858e:	2210      	movs	r2, #16
   38590:	3101      	adds	r1, #1
   38592:	3002      	adds	r0, #2
   38594:	f7fe fbe6 	bl	36d64 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   38598:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   3859c:	6862      	ldr	r2, [r4, #4]
   3859e:	8992      	ldrh	r2, [r2, #12]
   385a0:	1a9b      	subs	r3, r3, r2
   385a2:	2b12      	cmp	r3, #18
   385a4:	d801      	bhi.n	385aa <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   385a6:	2500      	movs	r5, #0
   385a8:	e7b5      	b.n	38516 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   385aa:	2501      	movs	r5, #1
   385ac:	e7b3      	b.n	38516 <find_info_cb+0x20>

000385ae <att_get_fixed_chan>:
{
   385ae:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   385b0:	2104      	movs	r1, #4
   385b2:	f7ff fb8e 	bl	37cd2 <bt_l2cap_le_lookup_tx_cid>
}
   385b6:	3808      	subs	r0, #8
   385b8:	bd08      	pop	{r3, pc}

000385ba <att_write_cmd>:
{
   385ba:	b530      	push	{r4, r5, lr}
   385bc:	b085      	sub	sp, #20
   385be:	4605      	mov	r5, r0
   385c0:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   385c2:	f101 0008 	add.w	r0, r1, #8
   385c6:	f002 fab5 	bl	3ab34 <net_buf_simple_pull_le16>
   385ca:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   385cc:	68a2      	ldr	r2, [r4, #8]
   385ce:	89a1      	ldrh	r1, [r4, #12]
   385d0:	9102      	str	r1, [sp, #8]
   385d2:	9201      	str	r2, [sp, #4]
   385d4:	2100      	movs	r1, #0
   385d6:	9100      	str	r1, [sp, #0]
   385d8:	460a      	mov	r2, r1
   385da:	4628      	mov	r0, r5
   385dc:	f7f0 f93e 	bl	2885c <att_write_rsp>
}
   385e0:	b005      	add	sp, #20
   385e2:	bd30      	pop	{r4, r5, pc}

000385e4 <att_write_req>:
{
   385e4:	b530      	push	{r4, r5, lr}
   385e6:	b085      	sub	sp, #20
   385e8:	4605      	mov	r5, r0
   385ea:	460c      	mov	r4, r1
   385ec:	f101 0008 	add.w	r0, r1, #8
   385f0:	f002 faa0 	bl	3ab34 <net_buf_simple_pull_le16>
   385f4:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   385f6:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   385f8:	89a1      	ldrh	r1, [r4, #12]
   385fa:	9102      	str	r1, [sp, #8]
   385fc:	9201      	str	r2, [sp, #4]
   385fe:	2200      	movs	r2, #0
   38600:	9200      	str	r2, [sp, #0]
   38602:	2213      	movs	r2, #19
   38604:	2112      	movs	r1, #18
   38606:	4628      	mov	r0, r5
   38608:	f7f0 f928 	bl	2885c <att_write_rsp>
}
   3860c:	b005      	add	sp, #20
   3860e:	bd30      	pop	{r4, r5, pc}

00038610 <att_req_retry>:
{
   38610:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_req *req = att_chan->req;
   38612:	f8d0 40f4 	ldr.w	r4, [r0, #244]	; 0xf4
	if (!req->encode) {
   38616:	68e3      	ldr	r3, [r4, #12]
   38618:	b1eb      	cbz	r3, 38656 <att_req_retry+0x46>
   3861a:	4605      	mov	r5, r0
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   3861c:	6962      	ldr	r2, [r4, #20]
   3861e:	7c61      	ldrb	r1, [r4, #17]
   38620:	f7ef ffb2 	bl	28588 <bt_att_chan_create_pdu>
	if (!buf) {
   38624:	4606      	mov	r6, r0
   38626:	b1c0      	cbz	r0, 3865a <att_req_retry+0x4a>
	if (req->encode(buf, req->len, req->user_data)) {
   38628:	68e3      	ldr	r3, [r4, #12]
   3862a:	69a2      	ldr	r2, [r4, #24]
   3862c:	6961      	ldr	r1, [r4, #20]
   3862e:	4798      	blx	r3
   38630:	b938      	cbnz	r0, 38642 <att_req_retry+0x32>
	if (chan_send(att_chan, buf, NULL)) {
   38632:	2200      	movs	r2, #0
   38634:	4631      	mov	r1, r6
   38636:	4628      	mov	r0, r5
   38638:	f7ef fdaa 	bl	28190 <chan_send>
   3863c:	b930      	cbnz	r0, 3864c <att_req_retry+0x3c>
	return BT_ATT_ERR_SUCCESS;
   3863e:	2000      	movs	r0, #0
}
   38640:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   38642:	4630      	mov	r0, r6
   38644:	f002 f9eb 	bl	3aa1e <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   38648:	200e      	movs	r0, #14
   3864a:	e7f9      	b.n	38640 <att_req_retry+0x30>
		net_buf_unref(buf);
   3864c:	4630      	mov	r0, r6
   3864e:	f002 f9e6 	bl	3aa1e <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   38652:	200e      	movs	r0, #14
   38654:	e7f4      	b.n	38640 <att_req_retry+0x30>
		return BT_ATT_ERR_AUTHENTICATION;
   38656:	2005      	movs	r0, #5
   38658:	e7f2      	b.n	38640 <att_req_retry+0x30>
		return BT_ATT_ERR_UNLIKELY;
   3865a:	200e      	movs	r0, #14
   3865c:	e7f0      	b.n	38640 <att_req_retry+0x30>

0003865e <att_read_group_req>:
{
   3865e:	b5f0      	push	{r4, r5, r6, r7, lr}
   38660:	b089      	sub	sp, #36	; 0x24
   38662:	4605      	mov	r5, r0
   38664:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   38666:	7b0c      	ldrb	r4, [r1, #12]
   38668:	3c04      	subs	r4, #4
   3866a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   3866c:	2c02      	cmp	r4, #2
   3866e:	d001      	beq.n	38674 <att_read_group_req+0x16>
   38670:	2c10      	cmp	r4, #16
   38672:	d142      	bne.n	386fa <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   38674:	2104      	movs	r1, #4
   38676:	3008      	adds	r0, #8
   38678:	f002 fa4c 	bl	3ab14 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   3867c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3867e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   38680:	4622      	mov	r2, r4
   38682:	1d01      	adds	r1, r0, #4
   38684:	a801      	add	r0, sp, #4
   38686:	f7fe fcb7 	bl	36ff8 <bt_uuid_create>
   3868a:	b3c8      	cbz	r0, 38700 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   3868c:	f10d 0216 	add.w	r2, sp, #22
   38690:	4639      	mov	r1, r7
   38692:	4630      	mov	r0, r6
   38694:	f7ff fb78 	bl	37d88 <range_is_valid>
   38698:	b1f0      	cbz	r0, 386d8 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   3869a:	2300      	movs	r3, #0
   3869c:	f88d 3018 	strb.w	r3, [sp, #24]
   386a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   386a4:	f8ad 301a 	strh.w	r3, [sp, #26]
   386a8:	a906      	add	r1, sp, #24
   386aa:	a801      	add	r0, sp, #4
   386ac:	f7fe fc86 	bl	36fbc <bt_uuid_cmp>
   386b0:	b158      	cbz	r0, 386ca <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   386b2:	2300      	movs	r3, #0
   386b4:	f88d 301c 	strb.w	r3, [sp, #28]
   386b8:	f642 0301 	movw	r3, #10241	; 0x2801
   386bc:	f8ad 301e 	strh.w	r3, [sp, #30]
   386c0:	a907      	add	r1, sp, #28
   386c2:	a801      	add	r0, sp, #4
   386c4:	f7fe fc7a 	bl	36fbc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   386c8:	b978      	cbnz	r0, 386ea <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   386ca:	463b      	mov	r3, r7
   386cc:	4632      	mov	r2, r6
   386ce:	a901      	add	r1, sp, #4
   386d0:	4628      	mov	r0, r5
   386d2:	f7f0 f979 	bl	289c8 <att_read_group_rsp>
   386d6:	e011      	b.n	386fc <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   386d8:	2301      	movs	r3, #1
   386da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   386de:	2110      	movs	r1, #16
   386e0:	4628      	mov	r0, r5
   386e2:	f7ef ffc5 	bl	28670 <send_err_rsp>
		return 0;
   386e6:	2000      	movs	r0, #0
   386e8:	e008      	b.n	386fc <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   386ea:	2310      	movs	r3, #16
   386ec:	4632      	mov	r2, r6
   386ee:	4619      	mov	r1, r3
   386f0:	4628      	mov	r0, r5
   386f2:	f7ef ffbd 	bl	28670 <send_err_rsp>
		return 0;
   386f6:	2000      	movs	r0, #0
   386f8:	e000      	b.n	386fc <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   386fa:	2004      	movs	r0, #4
}
   386fc:	b009      	add	sp, #36	; 0x24
   386fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   38700:	200e      	movs	r0, #14
   38702:	e7fb      	b.n	386fc <att_read_group_req+0x9e>

00038704 <att_read_blob_req>:
{
   38704:	b500      	push	{lr}
   38706:	b083      	sub	sp, #12
	req = (void *)buf->data;
   38708:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   3870a:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   3870c:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   3870e:	9200      	str	r2, [sp, #0]
   38710:	220d      	movs	r2, #13
   38712:	210c      	movs	r1, #12
   38714:	f7f0 f9ee 	bl	28af4 <att_read_rsp>
}
   38718:	b003      	add	sp, #12
   3871a:	f85d fb04 	ldr.w	pc, [sp], #4

0003871e <att_read_req>:
{
   3871e:	b500      	push	{lr}
   38720:	b083      	sub	sp, #12
	req = (void *)buf->data;
   38722:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   38724:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   38726:	2200      	movs	r2, #0
   38728:	9200      	str	r2, [sp, #0]
   3872a:	220b      	movs	r2, #11
   3872c:	210a      	movs	r1, #10
   3872e:	f7f0 f9e1 	bl	28af4 <att_read_rsp>
}
   38732:	b003      	add	sp, #12
   38734:	f85d fb04 	ldr.w	pc, [sp], #4

00038738 <att_read_type_req>:
{
   38738:	b5f0      	push	{r4, r5, r6, r7, lr}
   3873a:	b087      	sub	sp, #28
   3873c:	4605      	mov	r5, r0
   3873e:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   38740:	7b0c      	ldrb	r4, [r1, #12]
   38742:	3c04      	subs	r4, #4
   38744:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   38746:	2c02      	cmp	r4, #2
   38748:	d001      	beq.n	3874e <att_read_type_req+0x16>
   3874a:	2c10      	cmp	r4, #16
   3874c:	d123      	bne.n	38796 <att_read_type_req+0x5e>
   3874e:	2104      	movs	r1, #4
   38750:	3008      	adds	r0, #8
   38752:	f002 f9df 	bl	3ab14 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   38756:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   38758:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   3875a:	4622      	mov	r2, r4
   3875c:	1d01      	adds	r1, r0, #4
   3875e:	a801      	add	r0, sp, #4
   38760:	f7fe fc4a 	bl	36ff8 <bt_uuid_create>
   38764:	b1c8      	cbz	r0, 3879a <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   38766:	f10d 0216 	add.w	r2, sp, #22
   3876a:	4639      	mov	r1, r7
   3876c:	4630      	mov	r0, r6
   3876e:	f7ff fb0b 	bl	37d88 <range_is_valid>
   38772:	b138      	cbz	r0, 38784 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   38774:	463b      	mov	r3, r7
   38776:	4632      	mov	r2, r6
   38778:	a901      	add	r1, sp, #4
   3877a:	4628      	mov	r0, r5
   3877c:	f7f0 fa0c 	bl	28b98 <att_read_type_rsp>
}
   38780:	b007      	add	sp, #28
   38782:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   38784:	2301      	movs	r3, #1
   38786:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   3878a:	2108      	movs	r1, #8
   3878c:	4628      	mov	r0, r5
   3878e:	f7ef ff6f 	bl	28670 <send_err_rsp>
		return 0;
   38792:	2000      	movs	r0, #0
   38794:	e7f4      	b.n	38780 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   38796:	2004      	movs	r0, #4
   38798:	e7f2      	b.n	38780 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   3879a:	200e      	movs	r0, #14
   3879c:	e7f0      	b.n	38780 <att_read_type_req+0x48>

0003879e <att_find_type_req>:
{
   3879e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   387a2:	b087      	sub	sp, #28
   387a4:	4607      	mov	r7, r0
   387a6:	460c      	mov	r4, r1
   387a8:	2106      	movs	r1, #6
   387aa:	f104 0008 	add.w	r0, r4, #8
   387ae:	f002 f9b1 	bl	3ab14 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   387b2:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   387b4:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   387b6:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   387ba:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   387be:	f10d 020e 	add.w	r2, sp, #14
   387c2:	4631      	mov	r1, r6
   387c4:	4628      	mov	r0, r5
   387c6:	f7ff fadf 	bl	37d88 <range_is_valid>
   387ca:	b1d0      	cbz	r0, 38802 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   387cc:	2300      	movs	r3, #0
   387ce:	f88d 3010 	strb.w	r3, [sp, #16]
   387d2:	f8ad 8012 	strh.w	r8, [sp, #18]
   387d6:	f88d 3014 	strb.w	r3, [sp, #20]
   387da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   387de:	f8ad 3016 	strh.w	r3, [sp, #22]
   387e2:	a905      	add	r1, sp, #20
   387e4:	a804      	add	r0, sp, #16
   387e6:	f7fe fbe9 	bl	36fbc <bt_uuid_cmp>
   387ea:	b998      	cbnz	r0, 38814 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   387ec:	7b23      	ldrb	r3, [r4, #12]
   387ee:	9300      	str	r3, [sp, #0]
   387f0:	464b      	mov	r3, r9
   387f2:	4632      	mov	r2, r6
   387f4:	4629      	mov	r1, r5
   387f6:	4638      	mov	r0, r7
   387f8:	f7f0 fa18 	bl	28c2c <att_find_type_rsp>
}
   387fc:	b007      	add	sp, #28
   387fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   38802:	2301      	movs	r3, #1
   38804:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   38808:	2106      	movs	r1, #6
   3880a:	4638      	mov	r0, r7
   3880c:	f7ef ff30 	bl	28670 <send_err_rsp>
		return 0;
   38810:	2000      	movs	r0, #0
   38812:	e7f3      	b.n	387fc <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   38814:	230a      	movs	r3, #10
   38816:	462a      	mov	r2, r5
   38818:	2106      	movs	r1, #6
   3881a:	4638      	mov	r0, r7
   3881c:	f7ef ff28 	bl	28670 <send_err_rsp>
		return 0;
   38820:	2000      	movs	r0, #0
   38822:	e7eb      	b.n	387fc <att_find_type_req+0x5e>

00038824 <att_find_info_req>:
{
   38824:	b570      	push	{r4, r5, r6, lr}
   38826:	b082      	sub	sp, #8
   38828:	4604      	mov	r4, r0
	req = (void *)buf->data;
   3882a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   3882c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3882e:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   38830:	f10d 0206 	add.w	r2, sp, #6
   38834:	4631      	mov	r1, r6
   38836:	4628      	mov	r0, r5
   38838:	f7ff faa6 	bl	37d88 <range_is_valid>
   3883c:	b130      	cbz	r0, 3884c <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   3883e:	4632      	mov	r2, r6
   38840:	4629      	mov	r1, r5
   38842:	4620      	mov	r0, r4
   38844:	f7f0 fa3c 	bl	28cc0 <att_find_info_rsp>
}
   38848:	b002      	add	sp, #8
   3884a:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   3884c:	2301      	movs	r3, #1
   3884e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   38852:	2104      	movs	r1, #4
   38854:	4620      	mov	r0, r4
   38856:	f7ef ff0b 	bl	28670 <send_err_rsp>
		return 0;
   3885a:	2000      	movs	r0, #0
   3885c:	e7f4      	b.n	38848 <att_find_info_req+0x24>

0003885e <bt_att_init>:
{
   3885e:	b508      	push	{r3, lr}
	bt_gatt_init();
   38860:	f7f1 f900 	bl	29a64 <bt_gatt_init>
}
   38864:	bd08      	pop	{r3, pc}

00038866 <bt_att_get_mtu>:
{
   38866:	b508      	push	{r3, lr}
	att = att_get(conn);
   38868:	f7ef fb78 	bl	27f5c <att_get>
	if (!att) {
   3886c:	b338      	cbz	r0, 388be <bt_att_get_mtu+0x58>
	return list->head;
   3886e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38870:	b159      	cbz	r1, 3888a <bt_att_get_mtu+0x24>
   38872:	f5b1 71a2 	subs.w	r1, r1, #324	; 0x144
   38876:	d00b      	beq.n	38890 <bt_att_get_mtu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38878:	f511 73a2 	adds.w	r3, r1, #324	; 0x144
   3887c:	d006      	beq.n	3888c <bt_att_get_mtu+0x26>
	return node->next;
   3887e:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   38882:	b11b      	cbz	r3, 3888c <bt_att_get_mtu+0x26>
   38884:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   38888:	e000      	b.n	3888c <bt_att_get_mtu+0x26>
   3888a:	460b      	mov	r3, r1
   3888c:	2000      	movs	r0, #0
   3888e:	e004      	b.n	3889a <bt_att_get_mtu+0x34>
   38890:	460b      	mov	r3, r1
   38892:	e7fb      	b.n	3888c <bt_att_get_mtu+0x26>
   38894:	461a      	mov	r2, r3
   38896:	4619      	mov	r1, r3
   38898:	4613      	mov	r3, r2
   3889a:	b189      	cbz	r1, 388c0 <bt_att_get_mtu+0x5a>
		if (chan->chan.tx.mtu > mtu) {
   3889c:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   388a0:	4282      	cmp	r2, r0
   388a2:	d900      	bls.n	388a6 <bt_att_get_mtu+0x40>
			mtu = chan->chan.tx.mtu;
   388a4:	4610      	mov	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   388a6:	2b00      	cmp	r3, #0
   388a8:	d0f4      	beq.n	38894 <bt_att_get_mtu+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   388aa:	f513 72a2 	adds.w	r2, r3, #324	; 0x144
   388ae:	d0f2      	beq.n	38896 <bt_att_get_mtu+0x30>
	return node->next;
   388b0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   388b4:	2a00      	cmp	r2, #0
   388b6:	d0ee      	beq.n	38896 <bt_att_get_mtu+0x30>
   388b8:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   388bc:	e7eb      	b.n	38896 <bt_att_get_mtu+0x30>
		return 0;
   388be:	2000      	movs	r0, #0
}
   388c0:	bd08      	pop	{r3, pc}

000388c2 <att_handle_exec_write_rsp>:
{
   388c2:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   388c4:	2300      	movs	r3, #0
   388c6:	898a      	ldrh	r2, [r1, #12]
   388c8:	6889      	ldr	r1, [r1, #8]
   388ca:	f7f0 fa97 	bl	28dfc <att_handle_rsp>
}
   388ce:	bd08      	pop	{r3, pc}

000388d0 <att_handle_prepare_write_rsp>:
{
   388d0:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   388d2:	2300      	movs	r3, #0
   388d4:	898a      	ldrh	r2, [r1, #12]
   388d6:	6889      	ldr	r1, [r1, #8]
   388d8:	f7f0 fa90 	bl	28dfc <att_handle_rsp>
}
   388dc:	bd08      	pop	{r3, pc}

000388de <att_handle_write_rsp>:
{
   388de:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   388e0:	2300      	movs	r3, #0
   388e2:	898a      	ldrh	r2, [r1, #12]
   388e4:	6889      	ldr	r1, [r1, #8]
   388e6:	f7f0 fa89 	bl	28dfc <att_handle_rsp>
}
   388ea:	bd08      	pop	{r3, pc}

000388ec <att_handle_read_group_rsp>:
{
   388ec:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   388ee:	2300      	movs	r3, #0
   388f0:	898a      	ldrh	r2, [r1, #12]
   388f2:	6889      	ldr	r1, [r1, #8]
   388f4:	f7f0 fa82 	bl	28dfc <att_handle_rsp>
}
   388f8:	bd08      	pop	{r3, pc}

000388fa <att_handle_read_mult_rsp>:
{
   388fa:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   388fc:	2300      	movs	r3, #0
   388fe:	898a      	ldrh	r2, [r1, #12]
   38900:	6889      	ldr	r1, [r1, #8]
   38902:	f7f0 fa7b 	bl	28dfc <att_handle_rsp>
}
   38906:	bd08      	pop	{r3, pc}

00038908 <att_handle_read_blob_rsp>:
{
   38908:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3890a:	2300      	movs	r3, #0
   3890c:	898a      	ldrh	r2, [r1, #12]
   3890e:	6889      	ldr	r1, [r1, #8]
   38910:	f7f0 fa74 	bl	28dfc <att_handle_rsp>
}
   38914:	bd08      	pop	{r3, pc}

00038916 <att_handle_read_rsp>:
{
   38916:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   38918:	2300      	movs	r3, #0
   3891a:	898a      	ldrh	r2, [r1, #12]
   3891c:	6889      	ldr	r1, [r1, #8]
   3891e:	f7f0 fa6d 	bl	28dfc <att_handle_rsp>
}
   38922:	bd08      	pop	{r3, pc}

00038924 <att_handle_read_type_rsp>:
{
   38924:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   38926:	2300      	movs	r3, #0
   38928:	898a      	ldrh	r2, [r1, #12]
   3892a:	6889      	ldr	r1, [r1, #8]
   3892c:	f7f0 fa66 	bl	28dfc <att_handle_rsp>
}
   38930:	bd08      	pop	{r3, pc}

00038932 <att_handle_find_type_rsp>:
{
   38932:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   38934:	2300      	movs	r3, #0
   38936:	898a      	ldrh	r2, [r1, #12]
   38938:	6889      	ldr	r1, [r1, #8]
   3893a:	f7f0 fa5f 	bl	28dfc <att_handle_rsp>
}
   3893e:	bd08      	pop	{r3, pc}

00038940 <att_handle_find_info_rsp>:
{
   38940:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   38942:	2300      	movs	r3, #0
   38944:	898a      	ldrh	r2, [r1, #12]
   38946:	6889      	ldr	r1, [r1, #8]
   38948:	f7f0 fa58 	bl	28dfc <att_handle_rsp>
}
   3894c:	bd08      	pop	{r3, pc}

0003894e <att_mtu_rsp>:
{
   3894e:	b570      	push	{r4, r5, r6, lr}
   38950:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   38952:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   38954:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   38956:	2b16      	cmp	r3, #22
   38958:	d910      	bls.n	3897c <att_mtu_rsp+0x2e>
   3895a:	460d      	mov	r5, r1
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   3895c:	2b41      	cmp	r3, #65	; 0x41
   3895e:	bf28      	it	cs
   38960:	2341      	movcs	r3, #65	; 0x41
   38962:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   38966:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   3896a:	f7ff fc5e 	bl	3822a <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   3896e:	2300      	movs	r3, #0
   38970:	89aa      	ldrh	r2, [r5, #12]
   38972:	4631      	mov	r1, r6
   38974:	4620      	mov	r0, r4
   38976:	f7f0 fa41 	bl	28dfc <att_handle_rsp>
}
   3897a:	bd70      	pop	{r4, r5, r6, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   3897c:	2304      	movs	r3, #4
   3897e:	2200      	movs	r2, #0
   38980:	4611      	mov	r1, r2
   38982:	f7f0 fa3b 	bl	28dfc <att_handle_rsp>
   38986:	e7f8      	b.n	3897a <att_mtu_rsp+0x2c>

00038988 <att_confirm>:
{
   38988:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3898a:	2300      	movs	r3, #0
   3898c:	898a      	ldrh	r2, [r1, #12]
   3898e:	6889      	ldr	r1, [r1, #8]
   38990:	f7f0 fa34 	bl	28dfc <att_handle_rsp>
}
   38994:	bd08      	pop	{r3, pc}

00038996 <bt_att_encrypt_change>:
{
   38996:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   38998:	4605      	mov	r5, r0
	struct bt_conn *conn = ch->chan.conn;
   3899a:	f855 6908 	ldr.w	r6, [r5], #-8
	if (!att_chan->att) {
   3899e:	f850 3c08 	ldr.w	r3, [r0, #-8]
   389a2:	b143      	cbz	r3, 389b6 <bt_att_encrypt_change+0x20>
   389a4:	4604      	mov	r4, r0
	if (hci_status) {
   389a6:	b171      	cbz	r1, 389c6 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   389a8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   389ac:	b11b      	cbz	r3, 389b6 <bt_att_encrypt_change+0x20>
   389ae:	7c1b      	ldrb	r3, [r3, #16]
   389b0:	f013 0f01 	tst.w	r3, #1
   389b4:	d100      	bne.n	389b8 <bt_att_encrypt_change+0x22>
}
   389b6:	bd70      	pop	{r4, r5, r6, pc}
			att_handle_rsp(att_chan, NULL, 0,
   389b8:	2305      	movs	r3, #5
   389ba:	2200      	movs	r2, #0
   389bc:	4611      	mov	r1, r2
   389be:	4628      	mov	r0, r5
   389c0:	f7f0 fa1c 	bl	28dfc <att_handle_rsp>
		return;
   389c4:	e7f7      	b.n	389b6 <bt_att_encrypt_change+0x20>
	bt_gatt_encrypt_change(conn);
   389c6:	4630      	mov	r0, r6
   389c8:	f7f1 ff88 	bl	2a8dc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   389cc:	7a73      	ldrb	r3, [r6, #9]
   389ce:	2b01      	cmp	r3, #1
   389d0:	d0f1      	beq.n	389b6 <bt_att_encrypt_change+0x20>
	if (!(att_chan->req && att_chan->req->retrying)) {
   389d2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   389d6:	2b00      	cmp	r3, #0
   389d8:	d0ed      	beq.n	389b6 <bt_att_encrypt_change+0x20>
   389da:	7c1b      	ldrb	r3, [r3, #16]
   389dc:	f013 0f01 	tst.w	r3, #1
   389e0:	d0e9      	beq.n	389b6 <bt_att_encrypt_change+0x20>
	err = att_req_retry(att_chan);
   389e2:	4628      	mov	r0, r5
   389e4:	f7ff fe14 	bl	38610 <att_req_retry>
	if (err) {
   389e8:	4603      	mov	r3, r0
   389ea:	2800      	cmp	r0, #0
   389ec:	d0e3      	beq.n	389b6 <bt_att_encrypt_change+0x20>
		att_handle_rsp(att_chan, NULL, 0, err);
   389ee:	2200      	movs	r2, #0
   389f0:	4611      	mov	r1, r2
   389f2:	4628      	mov	r0, r5
   389f4:	f7f0 fa02 	bl	28dfc <att_handle_rsp>
   389f8:	e7dd      	b.n	389b6 <bt_att_encrypt_change+0x20>

000389fa <att_chan_detach>:
{
   389fa:	b510      	push	{r4, lr}
   389fc:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   389fe:	6800      	ldr	r0, [r0, #0]
   38a00:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   38a04:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   38a06:	2100      	movs	r1, #0
   38a08:	b1e3      	cbz	r3, 38a44 <att_chan_detach+0x4a>
   38a0a:	4293      	cmp	r3, r2
   38a0c:	d002      	beq.n	38a14 <att_chan_detach+0x1a>
   38a0e:	4619      	mov	r1, r3
   38a10:	681b      	ldr	r3, [r3, #0]
   38a12:	e7f9      	b.n	38a08 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   38a14:	b149      	cbz	r1, 38a2a <att_chan_detach+0x30>
	return node->next;
   38a16:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   38a1a:	600b      	str	r3, [r1, #0]
	return list->tail;
   38a1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   38a1e:	4293      	cmp	r3, r2
   38a20:	d00b      	beq.n	38a3a <att_chan_detach+0x40>
	parent->next = child;
   38a22:	2300      	movs	r3, #0
   38a24:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   38a28:	e00c      	b.n	38a44 <att_chan_detach+0x4a>
	return node->next;
   38a2a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   38a2e:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   38a30:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   38a32:	4291      	cmp	r1, r2
   38a34:	d1f5      	bne.n	38a22 <att_chan_detach+0x28>
	list->tail = node;
   38a36:	6283      	str	r3, [r0, #40]	; 0x28
}
   38a38:	e7f3      	b.n	38a22 <att_chan_detach+0x28>
	list->tail = node;
   38a3a:	6281      	str	r1, [r0, #40]	; 0x28
}
   38a3c:	e7f1      	b.n	38a22 <att_chan_detach+0x28>
		net_buf_unref(buf);
   38a3e:	4618      	mov	r0, r3
   38a40:	f001 ffed 	bl	3aa1e <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   38a44:	2200      	movs	r2, #0
   38a46:	2300      	movs	r3, #0
   38a48:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   38a4c:	f001 ffb5 	bl	3a9ba <net_buf_get>
   38a50:	4603      	mov	r3, r0
   38a52:	2800      	cmp	r0, #0
   38a54:	d1f3      	bne.n	38a3e <att_chan_detach+0x44>
	if (chan->req) {
   38a56:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   38a5a:	b12b      	cbz	r3, 38a68 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   38a5c:	230e      	movs	r3, #14
   38a5e:	2200      	movs	r2, #0
   38a60:	4611      	mov	r1, r2
   38a62:	4620      	mov	r0, r4
   38a64:	f7f0 f9ca 	bl	28dfc <att_handle_rsp>
	chan->att = NULL;
   38a68:	2300      	movs	r3, #0
   38a6a:	6023      	str	r3, [r4, #0]
}
   38a6c:	bd10      	pop	{r4, pc}

00038a6e <bt_att_disconnected>:
{
   38a6e:	b538      	push	{r3, r4, r5, lr}
   38a70:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   38a72:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   38a76:	b125      	cbz	r5, 38a82 <bt_att_disconnected+0x14>
   38a78:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   38a7a:	f7ff ffbe 	bl	389fa <att_chan_detach>
	return list->head;
   38a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   38a80:	b103      	cbz	r3, 38a84 <bt_att_disconnected+0x16>
}
   38a82:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   38a84:	4628      	mov	r0, r5
   38a86:	f7f0 fa29 	bl	28edc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   38a8a:	6820      	ldr	r0, [r4, #0]
   38a8c:	f7f1 ff6c 	bl	2a968 <bt_gatt_disconnected>
   38a90:	e7f7      	b.n	38a82 <bt_att_disconnected+0x14>

00038a92 <bt_att_send>:
{
   38a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38a96:	b082      	sub	sp, #8
   38a98:	4607      	mov	r7, r0
   38a9a:	460d      	mov	r5, r1
   38a9c:	4614      	mov	r4, r2
   38a9e:	461e      	mov	r6, r3
	att = att_get(conn);
   38aa0:	f7ef fa5c 	bl	27f5c <att_get>
	if (!att) {
   38aa4:	b158      	cbz	r0, 38abe <bt_att_send+0x2c>
   38aa6:	4680      	mov	r8, r0
	if (cb) {
   38aa8:	b17c      	cbz	r4, 38aca <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   38aaa:	9600      	str	r6, [sp, #0]
   38aac:	4623      	mov	r3, r4
   38aae:	462a      	mov	r2, r5
   38ab0:	2104      	movs	r1, #4
   38ab2:	4638      	mov	r0, r7
   38ab4:	f7ff f8cb 	bl	37c4e <bt_l2cap_send_cb>
}
   38ab8:	b002      	add	sp, #8
   38aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   38abe:	4628      	mov	r0, r5
   38ac0:	f001 ffad 	bl	3aa1e <net_buf_unref>
		return -ENOTCONN;
   38ac4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   38ac8:	e7f6      	b.n	38ab8 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   38aca:	4629      	mov	r1, r5
   38acc:	300c      	adds	r0, #12
   38ace:	f001 ff99 	bl	3aa04 <net_buf_put>
	att_send_process(att);
   38ad2:	4640      	mov	r0, r8
   38ad4:	f7ff fb47 	bl	38166 <att_send_process>
	return 0;
   38ad8:	2000      	movs	r0, #0
   38ada:	e7ed      	b.n	38ab8 <bt_att_send+0x26>

00038adc <bt_att_req_send>:
{
   38adc:	b510      	push	{r4, lr}
   38ade:	460c      	mov	r4, r1
	att = att_get(conn);
   38ae0:	f7ef fa3c 	bl	27f5c <att_get>
	if (!att) {
   38ae4:	b170      	cbz	r0, 38b04 <bt_att_req_send+0x28>
   38ae6:	4603      	mov	r3, r0
	parent->next = child;
   38ae8:	2200      	movs	r2, #0
   38aea:	6022      	str	r2, [r4, #0]
	return list->tail;
   38aec:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   38aee:	b132      	cbz	r2, 38afe <bt_att_req_send+0x22>
	parent->next = child;
   38af0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   38af2:	6084      	str	r4, [r0, #8]
	att_req_send_process(att);
   38af4:	4618      	mov	r0, r3
   38af6:	f7ff fa6d 	bl	37fd4 <att_req_send_process>
	return 0;
   38afa:	2000      	movs	r0, #0
}
   38afc:	bd10      	pop	{r4, pc}
   38afe:	6084      	str	r4, [r0, #8]
	list->head = node;
   38b00:	6044      	str	r4, [r0, #4]
}
   38b02:	e7f7      	b.n	38af4 <bt_att_req_send+0x18>
		return -ENOTCONN;
   38b04:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   38b08:	e7f8      	b.n	38afc <bt_att_req_send+0x20>

00038b0a <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   38b0a:	2800      	cmp	r0, #0
   38b0c:	d04b      	beq.n	38ba6 <bt_att_req_cancel+0x9c>
{
   38b0e:	b570      	push	{r4, r5, r6, lr}
   38b10:	460d      	mov	r5, r1
	if (!conn || !req) {
   38b12:	2900      	cmp	r1, #0
   38b14:	d03d      	beq.n	38b92 <bt_att_req_cancel+0x88>
		return;
	}

	att = att_get(conn);
   38b16:	f7ef fa21 	bl	27f5c <att_get>
	if (!att) {
   38b1a:	4606      	mov	r6, r0
   38b1c:	2800      	cmp	r0, #0
   38b1e:	d038      	beq.n	38b92 <bt_att_req_cancel+0x88>
	return list->head;
   38b20:	6a40      	ldr	r0, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38b22:	b158      	cbz	r0, 38b3c <bt_att_req_cancel+0x32>
   38b24:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   38b28:	d00a      	beq.n	38b40 <bt_att_req_cancel+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38b2a:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   38b2e:	d00c      	beq.n	38b4a <bt_att_req_cancel+0x40>
	return node->next;
   38b30:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   38b34:	b14c      	cbz	r4, 38b4a <bt_att_req_cancel+0x40>
   38b36:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   38b3a:	e006      	b.n	38b4a <bt_att_req_cancel+0x40>
   38b3c:	4604      	mov	r4, r0
   38b3e:	e004      	b.n	38b4a <bt_att_req_cancel+0x40>
   38b40:	4604      	mov	r4, r0
   38b42:	e002      	b.n	38b4a <bt_att_req_cancel+0x40>
   38b44:	4623      	mov	r3, r4
   38b46:	4620      	mov	r0, r4
   38b48:	461c      	mov	r4, r3
   38b4a:	b178      	cbz	r0, 38b6c <bt_att_req_cancel+0x62>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
   38b4c:	4629      	mov	r1, r5
   38b4e:	f7f0 fa17 	bl	28f80 <bt_att_chan_req_cancel>
   38b52:	b9f0      	cbnz	r0, 38b92 <bt_att_req_cancel+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   38b54:	2c00      	cmp	r4, #0
   38b56:	d0f5      	beq.n	38b44 <bt_att_req_cancel+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38b58:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   38b5c:	d0f3      	beq.n	38b46 <bt_att_req_cancel+0x3c>
	return node->next;
   38b5e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   38b62:	2b00      	cmp	r3, #0
   38b64:	d0ef      	beq.n	38b46 <bt_att_req_cancel+0x3c>
   38b66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   38b6a:	e7ec      	b.n	38b46 <bt_att_req_cancel+0x3c>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   38b6c:	462a      	mov	r2, r5
	return list->head;
   38b6e:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   38b70:	b163      	cbz	r3, 38b8c <bt_att_req_cancel+0x82>
   38b72:	4293      	cmp	r3, r2
   38b74:	d002      	beq.n	38b7c <bt_att_req_cancel+0x72>
   38b76:	4618      	mov	r0, r3
   38b78:	681b      	ldr	r3, [r3, #0]
   38b7a:	e7f9      	b.n	38b70 <bt_att_req_cancel+0x66>
Z_GENLIST_REMOVE(slist, snode)
   38b7c:	b150      	cbz	r0, 38b94 <bt_att_req_cancel+0x8a>
	return node->next;
   38b7e:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
   38b80:	6003      	str	r3, [r0, #0]
	return list->tail;
   38b82:	68b3      	ldr	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   38b84:	42ab      	cmp	r3, r5
   38b86:	d00c      	beq.n	38ba2 <bt_att_req_cancel+0x98>
	parent->next = child;
   38b88:	2300      	movs	r3, #0
   38b8a:	602b      	str	r3, [r5, #0]

	bt_att_req_free(req);
   38b8c:	4628      	mov	r0, r5
   38b8e:	f7f0 f921 	bl	28dd4 <bt_att_req_free>
}
   38b92:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   38b94:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   38b96:	6073      	str	r3, [r6, #4]
	return list->tail;
   38b98:	68b2      	ldr	r2, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   38b9a:	42aa      	cmp	r2, r5
   38b9c:	d1f4      	bne.n	38b88 <bt_att_req_cancel+0x7e>
	list->tail = node;
   38b9e:	60b3      	str	r3, [r6, #8]
}
   38ba0:	e7f2      	b.n	38b88 <bt_att_req_cancel+0x7e>
	list->tail = node;
   38ba2:	60b0      	str	r0, [r6, #8]
}
   38ba4:	e7f0      	b.n	38b88 <bt_att_req_cancel+0x7e>
   38ba6:	4770      	bx	lr

00038ba8 <update_range>:
{
   38ba8:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   38baa:	8804      	ldrh	r4, [r0, #0]
   38bac:	42a2      	cmp	r2, r4
   38bae:	d302      	bcc.n	38bb6 <update_range+0xe>
   38bb0:	880d      	ldrh	r5, [r1, #0]
   38bb2:	42ab      	cmp	r3, r5
   38bb4:	d908      	bls.n	38bc8 <update_range+0x20>
	if (*start > new_start) {
   38bb6:	42a2      	cmp	r2, r4
   38bb8:	d200      	bcs.n	38bbc <update_range+0x14>
		*start = new_start;
   38bba:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   38bbc:	880a      	ldrh	r2, [r1, #0]
   38bbe:	4293      	cmp	r3, r2
   38bc0:	d904      	bls.n	38bcc <update_range+0x24>
		*end = new_end;
   38bc2:	800b      	strh	r3, [r1, #0]
	return true;
   38bc4:	2001      	movs	r0, #1
   38bc6:	e002      	b.n	38bce <update_range+0x26>
		return false;
   38bc8:	2000      	movs	r0, #0
   38bca:	e000      	b.n	38bce <update_range+0x26>
	return true;
   38bcc:	2001      	movs	r0, #1
}
   38bce:	bc30      	pop	{r4, r5}
   38bd0:	4770      	bx	lr

00038bd2 <cf_set_value>:
{
   38bd2:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   38bd4:	2300      	movs	r3, #0
   38bd6:	e001      	b.n	38bdc <cf_set_value+0xa>
   38bd8:	3301      	adds	r3, #1
   38bda:	b29b      	uxth	r3, r3
   38bdc:	2b02      	cmp	r3, #2
   38bde:	d824      	bhi.n	38c2a <cf_set_value+0x58>
   38be0:	08dd      	lsrs	r5, r3, #3
   38be2:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   38be6:	d90f      	bls.n	38c08 <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   38be8:	1944      	adds	r4, r0, r5
   38bea:	7a24      	ldrb	r4, [r4, #8]
   38bec:	f003 0607 	and.w	r6, r3, #7
   38bf0:	40f4      	lsrs	r4, r6
   38bf2:	f014 0f01 	tst.w	r4, #1
   38bf6:	d0ef      	beq.n	38bd8 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   38bf8:	5d4c      	ldrb	r4, [r1, r5]
   38bfa:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   38bfe:	f016 0f01 	tst.w	r6, #1
   38c02:	d1e9      	bne.n	38bd8 <cf_set_value+0x6>
			return false;
   38c04:	2000      	movs	r0, #0
   38c06:	e013      	b.n	38c30 <cf_set_value+0x5e>
   38c08:	2300      	movs	r3, #0
   38c0a:	e008      	b.n	38c1e <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   38c0c:	5ccc      	ldrb	r4, [r1, r3]
   38c0e:	f004 0407 	and.w	r4, r4, #7
   38c12:	18c5      	adds	r5, r0, r3
   38c14:	7a2e      	ldrb	r6, [r5, #8]
   38c16:	4334      	orrs	r4, r6
   38c18:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   38c1a:	3301      	adds	r3, #1
   38c1c:	b29b      	uxth	r3, r3
   38c1e:	4293      	cmp	r3, r2
   38c20:	d205      	bcs.n	38c2e <cf_set_value+0x5c>
   38c22:	2b00      	cmp	r3, #0
   38c24:	d0f2      	beq.n	38c0c <cf_set_value+0x3a>
	return true;
   38c26:	2001      	movs	r0, #1
   38c28:	e002      	b.n	38c30 <cf_set_value+0x5e>
   38c2a:	2300      	movs	r3, #0
   38c2c:	e7f7      	b.n	38c1e <cf_set_value+0x4c>
   38c2e:	2001      	movs	r0, #1
}
   38c30:	bc70      	pop	{r4, r5, r6}
   38c32:	4770      	bx	lr

00038c34 <gatt_ccc_changed>:
{
   38c34:	b510      	push	{r4, lr}
   38c36:	460c      	mov	r4, r1
	uint16_t value = 0x0000;
   38c38:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   38c3a:	460b      	mov	r3, r1
   38c3c:	e000      	b.n	38c40 <gatt_ccc_changed+0xc>
   38c3e:	3301      	adds	r3, #1
   38c40:	2b14      	cmp	r3, #20
   38c42:	dc08      	bgt.n	38c56 <gatt_ccc_changed+0x22>
		if (ccc->cfg[i].value > value) {
   38c44:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   38c48:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   38c4c:	8912      	ldrh	r2, [r2, #8]
   38c4e:	428a      	cmp	r2, r1
   38c50:	d9f5      	bls.n	38c3e <gatt_ccc_changed+0xa>
			value = ccc->cfg[i].value;
   38c52:	4611      	mov	r1, r2
   38c54:	e7f3      	b.n	38c3e <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
   38c56:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   38c5a:	4299      	cmp	r1, r3
   38c5c:	d005      	beq.n	38c6a <gatt_ccc_changed+0x36>
		ccc->value = value;
   38c5e:	f8a4 10d2 	strh.w	r1, [r4, #210]	; 0xd2
		if (ccc->cfg_changed) {
   38c62:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   38c66:	b103      	cbz	r3, 38c6a <gatt_ccc_changed+0x36>
			ccc->cfg_changed(attr, value);
   38c68:	4798      	blx	r3
}
   38c6a:	bd10      	pop	{r4, pc}

00038c6c <gatt_indicate_rsp>:
{
   38c6c:	b510      	push	{r4, lr}
   38c6e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   38c70:	68a3      	ldr	r3, [r4, #8]
   38c72:	b113      	cbz	r3, 38c7a <gatt_indicate_rsp+0xe>
   38c74:	460a      	mov	r2, r1
		params->func(conn, params, err);
   38c76:	4621      	mov	r1, r4
   38c78:	4798      	blx	r3
	params->_ref--;
   38c7a:	7da3      	ldrb	r3, [r4, #22]
   38c7c:	3b01      	subs	r3, #1
   38c7e:	b2db      	uxtb	r3, r3
   38c80:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   38c82:	68e2      	ldr	r2, [r4, #12]
   38c84:	b112      	cbz	r2, 38c8c <gatt_indicate_rsp+0x20>
   38c86:	b90b      	cbnz	r3, 38c8c <gatt_indicate_rsp+0x20>
		params->destroy(params);
   38c88:	4620      	mov	r0, r4
   38c8a:	4790      	blx	r2
}
   38c8c:	bd10      	pop	{r4, pc}

00038c8e <match_uuid>:
	data->attr = attr;
   38c8e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   38c90:	8091      	strh	r1, [r2, #4]
}
   38c92:	2000      	movs	r0, #0
   38c94:	4770      	bx	lr

00038c96 <gatt_sub_is_empty>:
	return list->head;
   38c96:	6880      	ldr	r0, [r0, #8]
}
   38c98:	fab0 f080 	clz	r0, r0
   38c9c:	0940      	lsrs	r0, r0, #5
   38c9e:	4770      	bx	lr

00038ca0 <gatt_read_mult_rsp>:
{
   38ca0:	b570      	push	{r4, r5, r6, lr}
   38ca2:	b082      	sub	sp, #8
   38ca4:	4604      	mov	r4, r0
   38ca6:	9d06      	ldr	r5, [sp, #24]
	if (err || !length) {
   38ca8:	4608      	mov	r0, r1
   38caa:	b979      	cbnz	r1, 38ccc <gatt_read_mult_rsp+0x2c>
   38cac:	b173      	cbz	r3, 38ccc <gatt_read_mult_rsp+0x2c>
	params->func(conn, 0, params, pdu, length);
   38cae:	682e      	ldr	r6, [r5, #0]
   38cb0:	9300      	str	r3, [sp, #0]
   38cb2:	4613      	mov	r3, r2
   38cb4:	462a      	mov	r2, r5
   38cb6:	2100      	movs	r1, #0
   38cb8:	4620      	mov	r0, r4
   38cba:	47b0      	blx	r6
	params->func(conn, 0, params, NULL, 0);
   38cbc:	682e      	ldr	r6, [r5, #0]
   38cbe:	2100      	movs	r1, #0
   38cc0:	9100      	str	r1, [sp, #0]
   38cc2:	460b      	mov	r3, r1
   38cc4:	462a      	mov	r2, r5
   38cc6:	4620      	mov	r0, r4
   38cc8:	47b0      	blx	r6
   38cca:	e006      	b.n	38cda <gatt_read_mult_rsp+0x3a>
		params->func(conn, err, params, NULL, 0);
   38ccc:	682e      	ldr	r6, [r5, #0]
   38cce:	2300      	movs	r3, #0
   38cd0:	9300      	str	r3, [sp, #0]
   38cd2:	462a      	mov	r2, r5
   38cd4:	4601      	mov	r1, r0
   38cd6:	4620      	mov	r0, r4
   38cd8:	47b0      	blx	r6
}
   38cda:	b002      	add	sp, #8
   38cdc:	bd70      	pop	{r4, r5, r6, pc}

00038cde <gatt_read_mult_vl>:
}
   38cde:	f06f 0085 	mvn.w	r0, #133	; 0x85
   38ce2:	4770      	bx	lr

00038ce4 <gen_hash_m>:
{
   38ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   38ce6:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   38ce8:	6806      	ldr	r6, [r0, #0]
   38cea:	7835      	ldrb	r5, [r6, #0]
   38cec:	2d00      	cmp	r5, #0
   38cee:	d161      	bne.n	38db4 <gen_hash_m+0xd0>
   38cf0:	4607      	mov	r7, r0
   38cf2:	4614      	mov	r4, r2
	switch (u16->val) {
   38cf4:	8873      	ldrh	r3, [r6, #2]
   38cf6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   38cfa:	d019      	beq.n	38d30 <gen_hash_m+0x4c>
   38cfc:	d913      	bls.n	38d26 <gen_hash_m+0x42>
   38cfe:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   38d02:	33ff      	adds	r3, #255	; 0xff
   38d04:	b29b      	uxth	r3, r3
   38d06:	2b04      	cmp	r3, #4
   38d08:	d85a      	bhi.n	38dc0 <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   38d0a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   38d0e:	2202      	movs	r2, #2
   38d10:	f10d 010e 	add.w	r1, sp, #14
   38d14:	4620      	mov	r0, r4
   38d16:	f7fd fe96 	bl	36a46 <tc_cmac_update>
   38d1a:	2800      	cmp	r0, #0
   38d1c:	d13a      	bne.n	38d94 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   38d1e:	f06f 0315 	mvn.w	r3, #21
   38d22:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   38d24:	e047      	b.n	38db6 <gen_hash_m+0xd2>
	switch (u16->val) {
   38d26:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   38d2a:	b29b      	uxth	r3, r3
   38d2c:	2b03      	cmp	r3, #3
   38d2e:	d845      	bhi.n	38dbc <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   38d30:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   38d34:	2202      	movs	r2, #2
   38d36:	f10d 010e 	add.w	r1, sp, #14
   38d3a:	4620      	mov	r0, r4
   38d3c:	f7fd fe83 	bl	36a46 <tc_cmac_update>
   38d40:	b918      	cbnz	r0, 38d4a <gen_hash_m+0x66>
			state->err = -EINVAL;
   38d42:	f06f 0315 	mvn.w	r3, #21
   38d46:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   38d48:	e035      	b.n	38db6 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   38d4a:	8873      	ldrh	r3, [r6, #2]
   38d4c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   38d50:	2202      	movs	r2, #2
   38d52:	f10d 010e 	add.w	r1, sp, #14
   38d56:	4620      	mov	r0, r4
   38d58:	f7fd fe75 	bl	36a46 <tc_cmac_update>
   38d5c:	b180      	cbz	r0, 38d80 <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   38d5e:	687e      	ldr	r6, [r7, #4]
   38d60:	2000      	movs	r0, #0
   38d62:	9000      	str	r0, [sp, #0]
   38d64:	2310      	movs	r3, #16
   38d66:	eb0d 0203 	add.w	r2, sp, r3
   38d6a:	4639      	mov	r1, r7
   38d6c:	47b0      	blx	r6
		if (len < 0) {
   38d6e:	1e02      	subs	r2, r0, #0
   38d70:	db0a      	blt.n	38d88 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   38d72:	a904      	add	r1, sp, #16
   38d74:	4620      	mov	r0, r4
   38d76:	f7fd fe66 	bl	36a46 <tc_cmac_update>
   38d7a:	b138      	cbz	r0, 38d8c <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   38d7c:	2501      	movs	r5, #1
   38d7e:	e01a      	b.n	38db6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   38d80:	f06f 0315 	mvn.w	r3, #21
   38d84:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   38d86:	e016      	b.n	38db6 <gen_hash_m+0xd2>
			state->err = len;
   38d88:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   38d8a:	e014      	b.n	38db6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   38d8c:	f06f 0315 	mvn.w	r3, #21
   38d90:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   38d92:	e010      	b.n	38db6 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   38d94:	8873      	ldrh	r3, [r6, #2]
   38d96:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   38d9a:	2202      	movs	r2, #2
   38d9c:	f10d 010e 	add.w	r1, sp, #14
   38da0:	4620      	mov	r0, r4
   38da2:	f7fd fe50 	bl	36a46 <tc_cmac_update>
   38da6:	b108      	cbz	r0, 38dac <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   38da8:	2501      	movs	r5, #1
   38daa:	e004      	b.n	38db6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   38dac:	f06f 0315 	mvn.w	r3, #21
   38db0:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   38db2:	e000      	b.n	38db6 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   38db4:	2501      	movs	r5, #1
}
   38db6:	4628      	mov	r0, r5
   38db8:	b009      	add	sp, #36	; 0x24
   38dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   38dbc:	2501      	movs	r5, #1
   38dbe:	e7fa      	b.n	38db6 <gen_hash_m+0xd2>
   38dc0:	2501      	movs	r5, #1
   38dc2:	e7f8      	b.n	38db6 <gen_hash_m+0xd2>

00038dc4 <find_ccc_cfg>:
{
   38dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   38dc6:	b083      	sub	sp, #12
   38dc8:	4607      	mov	r7, r0
   38dca:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   38dcc:	2400      	movs	r4, #0
   38dce:	e00e      	b.n	38dee <find_ccc_cfg+0x2a>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   38dd0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   38dd4:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   38dd8:	2300      	movs	r3, #0
   38dda:	9300      	str	r3, [sp, #0]
   38ddc:	f8cd 3003 	str.w	r3, [sp, #3]
   38de0:	2207      	movs	r2, #7
   38de2:	4669      	mov	r1, sp
   38de4:	3001      	adds	r0, #1
   38de6:	f7fd ff90 	bl	36d0a <memcmp>
   38dea:	b198      	cbz	r0, 38e14 <find_ccc_cfg+0x50>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   38dec:	3401      	adds	r4, #1
   38dee:	2c14      	cmp	r4, #20
   38df0:	d80f      	bhi.n	38e12 <find_ccc_cfg+0x4e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   38df2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   38df6:	eb06 0543 	add.w	r5, r6, r3, lsl #1
		if (conn) {
   38dfa:	2f00      	cmp	r7, #0
   38dfc:	d0e8      	beq.n	38dd0 <find_ccc_cfg+0xc>
						    &cfg->peer)) {
   38dfe:	462a      	mov	r2, r5
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   38e00:	3201      	adds	r2, #1
   38e02:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   38e06:	4638      	mov	r0, r7
   38e08:	f7fe fdad 	bl	37966 <bt_conn_is_peer_addr_le>
   38e0c:	2800      	cmp	r0, #0
   38e0e:	d0ed      	beq.n	38dec <find_ccc_cfg+0x28>
   38e10:	e000      	b.n	38e14 <find_ccc_cfg+0x50>
	return NULL;
   38e12:	2500      	movs	r5, #0
}
   38e14:	4628      	mov	r0, r5
   38e16:	b003      	add	sp, #12
   38e18:	bdf0      	pop	{r4, r5, r6, r7, pc}

00038e1a <clear_ccc_cfg>:
{
   38e1a:	b530      	push	{r4, r5, lr}
   38e1c:	b083      	sub	sp, #12
   38e1e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   38e20:	2500      	movs	r5, #0
   38e22:	9500      	str	r5, [sp, #0]
   38e24:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   38e28:	2207      	movs	r2, #7
   38e2a:	4669      	mov	r1, sp
   38e2c:	3001      	adds	r0, #1
   38e2e:	f7fd ff99 	bl	36d64 <memcpy>
	cfg->id = 0U;
   38e32:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   38e34:	8125      	strh	r5, [r4, #8]
}
   38e36:	b003      	add	sp, #12
   38e38:	bd30      	pop	{r4, r5, pc}

00038e3a <gatt_sub_free>:
{
   38e3a:	b500      	push	{lr}
   38e3c:	b083      	sub	sp, #12
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   38e3e:	2300      	movs	r3, #0
   38e40:	9300      	str	r3, [sp, #0]
   38e42:	f8cd 3003 	str.w	r3, [sp, #3]
   38e46:	2207      	movs	r2, #7
   38e48:	4669      	mov	r1, sp
   38e4a:	3001      	adds	r0, #1
   38e4c:	f7fd ff8a 	bl	36d64 <memcpy>
}
   38e50:	b003      	add	sp, #12
   38e52:	f85d fb04 	ldr.w	pc, [sp], #4

00038e56 <gatt_sub_remove>:
{
   38e56:	b538      	push	{r3, r4, r5, lr}
   38e58:	460c      	mov	r4, r1
	if (params) {
   38e5a:	b163      	cbz	r3, 38e76 <gatt_sub_remove+0x20>
   38e5c:	4619      	mov	r1, r3
		sys_slist_remove(&sub->list, prev, &params->node);
   38e5e:	3314      	adds	r3, #20
Z_GENLIST_REMOVE(slist, snode)
   38e60:	b172      	cbz	r2, 38e80 <gatt_sub_remove+0x2a>
	return node->next;
   38e62:	694d      	ldr	r5, [r1, #20]
	parent->next = child;
   38e64:	6015      	str	r5, [r2, #0]
	return list->tail;
   38e66:	68e5      	ldr	r5, [r4, #12]
Z_GENLIST_REMOVE(slist, snode)
   38e68:	42ab      	cmp	r3, r5
   38e6a:	d010      	beq.n	38e8e <gatt_sub_remove+0x38>
	parent->next = child;
   38e6c:	2200      	movs	r2, #0
   38e6e:	614a      	str	r2, [r1, #20]
		params->notify(conn, params, NULL, 0);
   38e70:	680d      	ldr	r5, [r1, #0]
   38e72:	4613      	mov	r3, r2
   38e74:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   38e76:	4620      	mov	r0, r4
   38e78:	f7ff ff0d 	bl	38c96 <gatt_sub_is_empty>
   38e7c:	b948      	cbnz	r0, 38e92 <gatt_sub_remove+0x3c>
}
   38e7e:	bd38      	pop	{r3, r4, r5, pc}
	return node->next;
   38e80:	694a      	ldr	r2, [r1, #20]
	list->head = node;
   38e82:	60a2      	str	r2, [r4, #8]
	return list->tail;
   38e84:	68e5      	ldr	r5, [r4, #12]
Z_GENLIST_REMOVE(slist, snode)
   38e86:	42ab      	cmp	r3, r5
   38e88:	d1f0      	bne.n	38e6c <gatt_sub_remove+0x16>
	list->tail = node;
   38e8a:	60e2      	str	r2, [r4, #12]
}
   38e8c:	e7ee      	b.n	38e6c <gatt_sub_remove+0x16>
	list->tail = node;
   38e8e:	60e2      	str	r2, [r4, #12]
}
   38e90:	e7ec      	b.n	38e6c <gatt_sub_remove+0x16>
		gatt_sub_free(sub);
   38e92:	4620      	mov	r0, r4
   38e94:	f7ff ffd1 	bl	38e3a <gatt_sub_free>
}
   38e98:	e7f1      	b.n	38e7e <gatt_sub_remove+0x28>

00038e9a <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   38e9a:	784a      	ldrb	r2, [r1, #1]
   38e9c:	b902      	cbnz	r2, 38ea0 <gatt_sub_update+0x6>
   38e9e:	4770      	bx	lr
{
   38ea0:	b508      	push	{r3, lr}
   38ea2:	460b      	mov	r3, r1
   38ea4:	2207      	movs	r2, #7
   38ea6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   38eaa:	1c58      	adds	r0, r3, #1
   38eac:	f7fd ff5a 	bl	36d64 <memcpy>
}
   38eb0:	bd08      	pop	{r3, pc}

00038eb2 <remove_subscriptions>:
{
   38eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38eb6:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
   38eb8:	f7f0 f960 	bl	2917c <gatt_sub_find>
	if (!sub) {
   38ebc:	2800      	cmp	r0, #0
   38ebe:	d03b      	beq.n	38f38 <remove_subscriptions+0x86>
   38ec0:	4607      	mov	r7, r0
	return list->head;
   38ec2:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   38ec4:	b385      	cbz	r5, 38f28 <remove_subscriptions+0x76>
   38ec6:	3d14      	subs	r5, #20
   38ec8:	d032      	beq.n	38f30 <remove_subscriptions+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38eca:	f115 0414 	adds.w	r4, r5, #20
   38ece:	d02c      	beq.n	38f2a <remove_subscriptions+0x78>
	return node->next;
   38ed0:	696c      	ldr	r4, [r5, #20]
   38ed2:	b354      	cbz	r4, 38f2a <remove_subscriptions+0x78>
   38ed4:	3c14      	subs	r4, #20
   38ed6:	e028      	b.n	38f2a <remove_subscriptions+0x78>
			params->value = 0U;
   38ed8:	2300      	movs	r3, #0
   38eda:	81ab      	strh	r3, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
   38edc:	462b      	mov	r3, r5
   38ede:	4642      	mov	r2, r8
   38ee0:	4639      	mov	r1, r7
   38ee2:	4630      	mov	r0, r6
   38ee4:	f7ff ffb7 	bl	38e56 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   38ee8:	b324      	cbz	r4, 38f34 <remove_subscriptions+0x82>
Z_GENLIST_PEEK_NEXT(slist, snode)
   38eea:	f114 0314 	adds.w	r3, r4, #20
   38eee:	d002      	beq.n	38ef6 <remove_subscriptions+0x44>
	return node->next;
   38ef0:	6963      	ldr	r3, [r4, #20]
   38ef2:	b103      	cbz	r3, 38ef6 <remove_subscriptions+0x44>
   38ef4:	3b14      	subs	r3, #20
   38ef6:	4625      	mov	r5, r4
   38ef8:	461c      	mov	r4, r3
   38efa:	b1ed      	cbz	r5, 38f38 <remove_subscriptions+0x86>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   38efc:	f106 0188 	add.w	r1, r6, #136	; 0x88
   38f00:	7a30      	ldrb	r0, [r6, #8]
   38f02:	f7fe fa12 	bl	3732a <bt_addr_le_is_bonded>
   38f06:	2800      	cmp	r0, #0
   38f08:	d0e6      	beq.n	38ed8 <remove_subscriptions+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   38f0a:	f3bf 8f5b 	dmb	ish
   38f0e:	692b      	ldr	r3, [r5, #16]
   38f10:	f3bf 8f5b 	dmb	ish
   38f14:	f013 0f01 	tst.w	r3, #1
   38f18:	d1de      	bne.n	38ed8 <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
   38f1a:	4639      	mov	r1, r7
   38f1c:	4630      	mov	r0, r6
   38f1e:	f7ff ffbc 	bl	38e9a <gatt_sub_update>
			prev = &params->node;
   38f22:	f105 0814 	add.w	r8, r5, #20
   38f26:	e7df      	b.n	38ee8 <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   38f28:	462c      	mov	r4, r5
   38f2a:	f04f 0800 	mov.w	r8, #0
   38f2e:	e7e4      	b.n	38efa <remove_subscriptions+0x48>
   38f30:	462c      	mov	r4, r5
   38f32:	e7fa      	b.n	38f2a <remove_subscriptions+0x78>
   38f34:	4623      	mov	r3, r4
   38f36:	e7de      	b.n	38ef6 <remove_subscriptions+0x44>
}
   38f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00038f3c <clear_sc_cfg>:
{
   38f3c:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   38f3e:	220c      	movs	r2, #12
   38f40:	2100      	movs	r1, #0
   38f42:	f7fd ff33 	bl	36dac <memset>
}
   38f46:	bd08      	pop	{r3, pc}

00038f48 <bt_gatt_clear_sc>:
{
   38f48:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   38f4a:	f7f0 f8f3 	bl	29134 <find_sc_cfg>
	if (!cfg) {
   38f4e:	b108      	cbz	r0, 38f54 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   38f50:	f7ff fff4 	bl	38f3c <clear_sc_cfg>
}
   38f54:	2000      	movs	r0, #0
   38f56:	bd08      	pop	{r3, pc}

00038f58 <sc_ccc_cfg_write>:
{
   38f58:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   38f5a:	2a02      	cmp	r2, #2
   38f5c:	d003      	beq.n	38f66 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   38f5e:	f7f0 fad3 	bl	29508 <sc_clear>
}
   38f62:	2002      	movs	r0, #2
   38f64:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   38f66:	2300      	movs	r3, #0
   38f68:	461a      	mov	r2, r3
   38f6a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   38f6e:	7a00      	ldrb	r0, [r0, #8]
   38f70:	f7f0 f984 	bl	2927c <sc_save>
   38f74:	e7f5      	b.n	38f62 <sc_ccc_cfg_write+0xa>

00038f76 <sc_reset>:
{
   38f76:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   38f78:	2204      	movs	r2, #4
   38f7a:	2100      	movs	r1, #0
   38f7c:	3008      	adds	r0, #8
   38f7e:	f7fd ff15 	bl	36dac <memset>
}
   38f82:	bd08      	pop	{r3, pc}

00038f84 <sc_restore_rsp>:
{
   38f84:	b538      	push	{r3, r4, r5, lr}
   38f86:	4605      	mov	r5, r0
   38f88:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   38f8a:	f7f0 f8a9 	bl	290e0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   38f8e:	b188      	cbz	r0, 38fb4 <sc_restore_rsp+0x30>
   38f90:	4603      	mov	r3, r0
   38f92:	7a02      	ldrb	r2, [r0, #8]
   38f94:	f012 0f01 	tst.w	r2, #1
   38f98:	d00c      	beq.n	38fb4 <sc_restore_rsp+0x30>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   38f9a:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38f9c:	f3bf 8f5b 	dmb	ish
   38fa0:	e853 2f00 	ldrex	r2, [r3]
   38fa4:	f042 0201 	orr.w	r2, r2, #1
   38fa8:	e843 2100 	strex	r1, r2, [r3]
   38fac:	2900      	cmp	r1, #0
   38fae:	d1f7      	bne.n	38fa0 <sc_restore_rsp+0x1c>
   38fb0:	f3bf 8f5b 	dmb	ish
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   38fb4:	b104      	cbz	r4, 38fb8 <sc_restore_rsp+0x34>
}
   38fb6:	bd38      	pop	{r3, r4, r5, pc}
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   38fb8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   38fbc:	7a28      	ldrb	r0, [r5, #8]
   38fbe:	f7f0 f8b9 	bl	29134 <find_sc_cfg>
		if (sc_cfg) {
   38fc2:	2800      	cmp	r0, #0
   38fc4:	d0f7      	beq.n	38fb6 <sc_restore_rsp+0x32>
			sc_reset(sc_cfg);
   38fc6:	f7ff ffd6 	bl	38f76 <sc_reset>
}
   38fca:	e7f4      	b.n	38fb6 <sc_restore_rsp+0x32>

00038fcc <gatt_write_ccc_rsp>:
{
   38fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38fce:	4607      	mov	r7, r0
   38fd0:	460e      	mov	r6, r1
   38fd2:	9c06      	ldr	r4, [sp, #24]
	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   38fd4:	f104 0310 	add.w	r3, r4, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38fd8:	f3bf 8f5b 	dmb	ish
   38fdc:	e853 2f00 	ldrex	r2, [r3]
   38fe0:	f022 0204 	bic.w	r2, r2, #4
   38fe4:	e843 2100 	strex	r1, r2, [r3]
   38fe8:	2900      	cmp	r1, #0
   38fea:	d1f7      	bne.n	38fdc <gatt_write_ccc_rsp+0x10>
   38fec:	f3bf 8f5b 	dmb	ish
	if (err) {
   38ff0:	b96e      	cbnz	r6, 3900e <gatt_write_ccc_rsp+0x42>
	} else if (!params->value) {
   38ff2:	89a3      	ldrh	r3, [r4, #12]
   38ff4:	b923      	cbnz	r3, 39000 <gatt_write_ccc_rsp+0x34>
		params->notify(conn, params, NULL, 0);
   38ff6:	6825      	ldr	r5, [r4, #0]
   38ff8:	461a      	mov	r2, r3
   38ffa:	4621      	mov	r1, r4
   38ffc:	4638      	mov	r0, r7
   38ffe:	47a8      	blx	r5
	if (params->write) {
   39000:	6863      	ldr	r3, [r4, #4]
   39002:	b11b      	cbz	r3, 3900c <gatt_write_ccc_rsp+0x40>
		params->write(conn, err, NULL);
   39004:	2200      	movs	r2, #0
   39006:	4631      	mov	r1, r6
   39008:	4638      	mov	r0, r7
   3900a:	4798      	blx	r3
}
   3900c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sub = gatt_sub_find(conn);
   3900e:	4638      	mov	r0, r7
   39010:	f7f0 f8b4 	bl	2917c <gatt_sub_find>
		if (!sub) {
   39014:	4601      	mov	r1, r0
   39016:	2800      	cmp	r0, #0
   39018:	d0f8      	beq.n	3900c <gatt_write_ccc_rsp+0x40>
	return list->head;
   3901a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   3901c:	b10b      	cbz	r3, 39022 <gatt_write_ccc_rsp+0x56>
	return node->next;
   3901e:	681a      	ldr	r2, [r3, #0]
   39020:	e009      	b.n	39036 <gatt_write_ccc_rsp+0x6a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   39022:	461a      	mov	r2, r3
   39024:	e007      	b.n	39036 <gatt_write_ccc_rsp+0x6a>
				gatt_sub_remove(conn, sub, tmp, params);
   39026:	4623      	mov	r3, r4
   39028:	4638      	mov	r0, r7
   3902a:	f7ff ff14 	bl	38e56 <gatt_sub_remove>
				break;
   3902e:	e7e7      	b.n	39000 <gatt_write_ccc_rsp+0x34>
   39030:	4615      	mov	r5, r2
   39032:	4613      	mov	r3, r2
   39034:	462a      	mov	r2, r5
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   39036:	2b00      	cmp	r3, #0
   39038:	d0e2      	beq.n	39000 <gatt_write_ccc_rsp+0x34>
			if (node == &params->node) {
   3903a:	f104 0514 	add.w	r5, r4, #20
   3903e:	42ab      	cmp	r3, r5
   39040:	d0f1      	beq.n	39026 <gatt_write_ccc_rsp+0x5a>
   39042:	2a00      	cmp	r2, #0
   39044:	d0f4      	beq.n	39030 <gatt_write_ccc_rsp+0x64>
	return node->next;
   39046:	6815      	ldr	r5, [r2, #0]
   39048:	e7f3      	b.n	39032 <gatt_write_ccc_rsp+0x66>

0003904a <gatt_foreach_iter>:
	if (handle > end_handle) {
   3904a:	4299      	cmp	r1, r3
   3904c:	d822      	bhi.n	39094 <gatt_foreach_iter+0x4a>
{
   3904e:	b538      	push	{r3, r4, r5, lr}
   39050:	4605      	mov	r5, r0
   39052:	460c      	mov	r4, r1
	if (handle < start_handle) {
   39054:	4291      	cmp	r1, r2
   39056:	d31f      	bcc.n	39098 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   39058:	9b04      	ldr	r3, [sp, #16]
   3905a:	b123      	cbz	r3, 39066 <gatt_foreach_iter+0x1c>
   3905c:	6801      	ldr	r1, [r0, #0]
   3905e:	4618      	mov	r0, r3
   39060:	f7fd ffac 	bl	36fbc <bt_uuid_cmp>
   39064:	b9d0      	cbnz	r0, 3909c <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   39066:	9b05      	ldr	r3, [sp, #20]
   39068:	b12b      	cbz	r3, 39076 <gatt_foreach_iter+0x2c>
   3906a:	68eb      	ldr	r3, [r5, #12]
   3906c:	9a05      	ldr	r2, [sp, #20]
   3906e:	4293      	cmp	r3, r2
   39070:	d001      	beq.n	39076 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   39072:	2001      	movs	r0, #1
   39074:	e011      	b.n	3909a <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   39076:	9b06      	ldr	r3, [sp, #24]
   39078:	881b      	ldrh	r3, [r3, #0]
   3907a:	3b01      	subs	r3, #1
   3907c:	9a06      	ldr	r2, [sp, #24]
   3907e:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   39080:	9a08      	ldr	r2, [sp, #32]
   39082:	4621      	mov	r1, r4
   39084:	4628      	mov	r0, r5
   39086:	9b07      	ldr	r3, [sp, #28]
   39088:	4798      	blx	r3
	if (!*num_matches) {
   3908a:	9b06      	ldr	r3, [sp, #24]
   3908c:	881b      	ldrh	r3, [r3, #0]
   3908e:	b923      	cbnz	r3, 3909a <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   39090:	2000      	movs	r0, #0
   39092:	e002      	b.n	3909a <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   39094:	2000      	movs	r0, #0
}
   39096:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   39098:	2001      	movs	r0, #1
}
   3909a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   3909c:	2001      	movs	r0, #1
   3909e:	e7fc      	b.n	3909a <gatt_foreach_iter+0x50>

000390a0 <gatt_req_alloc>:
{
   390a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   390a4:	4607      	mov	r7, r0
   390a6:	4688      	mov	r8, r1
   390a8:	4615      	mov	r5, r2
   390aa:	461e      	mov	r6, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   390ac:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   390b0:	2100      	movs	r1, #0
   390b2:	f7ef fe77 	bl	28da4 <bt_att_req_alloc>
	if (!req) {
   390b6:	4604      	mov	r4, r0
   390b8:	b130      	cbz	r0, 390c8 <gatt_req_alloc+0x28>
	req->att_op = op;
   390ba:	7446      	strb	r6, [r0, #17]
	req->len = len;
   390bc:	9b06      	ldr	r3, [sp, #24]
   390be:	6143      	str	r3, [r0, #20]
	req->encode = encode;
   390c0:	60c5      	str	r5, [r0, #12]
	req->func = func;
   390c2:	6047      	str	r7, [r0, #4]
	req->user_data = params;
   390c4:	f8c0 8018 	str.w	r8, [r0, #24]
}
   390c8:	4620      	mov	r0, r4
   390ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000390ce <gatt_req_send>:
{
   390ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   390d2:	b083      	sub	sp, #12
   390d4:	4606      	mov	r6, r0
   390d6:	4608      	mov	r0, r1
   390d8:	4615      	mov	r5, r2
   390da:	461c      	mov	r4, r3
   390dc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   390e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	req = gatt_req_alloc(func, params, encode, op, len);
   390e2:	9700      	str	r7, [sp, #0]
   390e4:	464b      	mov	r3, r9
   390e6:	4622      	mov	r2, r4
   390e8:	4629      	mov	r1, r5
   390ea:	f7ff ffd9 	bl	390a0 <gatt_req_alloc>
	if (!req) {
   390ee:	b328      	cbz	r0, 3913c <gatt_req_send+0x6e>
   390f0:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, op, len);
   390f2:	463a      	mov	r2, r7
   390f4:	4649      	mov	r1, r9
   390f6:	4630      	mov	r0, r6
   390f8:	f7ef fc18 	bl	2892c <bt_att_create_pdu>
	if (!buf) {
   390fc:	b180      	cbz	r0, 39120 <gatt_req_send+0x52>
	req->buf = buf;
   390fe:	f8c8 0008 	str.w	r0, [r8, #8]
	err = encode(buf, len, params);
   39102:	462a      	mov	r2, r5
   39104:	4639      	mov	r1, r7
   39106:	47a0      	blx	r4
	if (err) {
   39108:	4604      	mov	r4, r0
   3910a:	b978      	cbnz	r0, 3912c <gatt_req_send+0x5e>
	err = bt_att_req_send(conn, req);
   3910c:	4641      	mov	r1, r8
   3910e:	4630      	mov	r0, r6
   39110:	f7ff fce4 	bl	38adc <bt_att_req_send>
	if (err) {
   39114:	4604      	mov	r4, r0
   39116:	b968      	cbnz	r0, 39134 <gatt_req_send+0x66>
}
   39118:	4620      	mov	r0, r4
   3911a:	b003      	add	sp, #12
   3911c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_att_req_free(req);
   39120:	4640      	mov	r0, r8
   39122:	f7ef fe57 	bl	28dd4 <bt_att_req_free>
		return -ENOMEM;
   39126:	f06f 040b 	mvn.w	r4, #11
   3912a:	e7f5      	b.n	39118 <gatt_req_send+0x4a>
		bt_att_req_free(req);
   3912c:	4640      	mov	r0, r8
   3912e:	f7ef fe51 	bl	28dd4 <bt_att_req_free>
		return err;
   39132:	e7f1      	b.n	39118 <gatt_req_send+0x4a>
		bt_att_req_free(req);
   39134:	4640      	mov	r0, r8
   39136:	f7ef fe4d 	bl	28dd4 <bt_att_req_free>
   3913a:	e7ed      	b.n	39118 <gatt_req_send+0x4a>
		return -ENOMEM;
   3913c:	f06f 040b 	mvn.w	r4, #11
   39140:	e7ea      	b.n	39118 <gatt_req_send+0x4a>

00039142 <add_subscriptions>:
{
   39142:	b538      	push	{r3, r4, r5, lr}
   39144:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
   39146:	f7f0 f819 	bl	2917c <gatt_sub_find>
	if (!sub) {
   3914a:	b300      	cbz	r0, 3918e <add_subscriptions+0x4c>
	return list->head;
   3914c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   3914e:	b15c      	cbz	r4, 39168 <add_subscriptions+0x26>
   39150:	3c14      	subs	r4, #20
   39152:	e009      	b.n	39168 <add_subscriptions+0x26>
			gatt_write_ccc(conn, params);
   39154:	4621      	mov	r1, r4
   39156:	4628      	mov	r0, r5
   39158:	f7f0 fc72 	bl	29a40 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3915c:	f114 0314 	adds.w	r3, r4, #20
   39160:	d013      	beq.n	3918a <add_subscriptions+0x48>
	return node->next;
   39162:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   39164:	b19c      	cbz	r4, 3918e <add_subscriptions+0x4c>
   39166:	3c14      	subs	r4, #20
   39168:	b18c      	cbz	r4, 3918e <add_subscriptions+0x4c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   3916a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   3916e:	7a28      	ldrb	r0, [r5, #8]
   39170:	f7fe f8db 	bl	3732a <bt_addr_le_is_bonded>
   39174:	2800      	cmp	r0, #0
   39176:	d0f1      	beq.n	3915c <add_subscriptions+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39178:	f3bf 8f5b 	dmb	ish
   3917c:	6923      	ldr	r3, [r4, #16]
   3917e:	f3bf 8f5b 	dmb	ish
   39182:	f013 0f02 	tst.w	r3, #2
   39186:	d1e9      	bne.n	3915c <add_subscriptions+0x1a>
   39188:	e7e4      	b.n	39154 <add_subscriptions+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   3918a:	461c      	mov	r4, r3
   3918c:	e7ec      	b.n	39168 <add_subscriptions+0x26>
}
   3918e:	bd38      	pop	{r3, r4, r5, pc}

00039190 <read_included_uuid_encode>:
{
   39190:	b510      	push	{r4, lr}
   39192:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   39194:	2102      	movs	r1, #2
   39196:	3008      	adds	r0, #8
   39198:	f001 fc8b 	bl	3aab2 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   3919c:	8963      	ldrh	r3, [r4, #10]
   3919e:	8003      	strh	r3, [r0, #0]
}
   391a0:	2000      	movs	r0, #0
   391a2:	bd10      	pop	{r4, pc}

000391a4 <gatt_find_info_encode>:
{
   391a4:	b510      	push	{r4, lr}
   391a6:	4614      	mov	r4, r2
   391a8:	2104      	movs	r1, #4
   391aa:	3008      	adds	r0, #8
   391ac:	f001 fc81 	bl	3aab2 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   391b0:	8923      	ldrh	r3, [r4, #8]
   391b2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   391b4:	89e3      	ldrh	r3, [r4, #14]
   391b6:	8043      	strh	r3, [r0, #2]
}
   391b8:	2000      	movs	r0, #0
   391ba:	bd10      	pop	{r4, pc}

000391bc <gatt_read_encode>:
{
   391bc:	b510      	push	{r4, lr}
   391be:	4614      	mov	r4, r2
   391c0:	2102      	movs	r1, #2
   391c2:	3008      	adds	r0, #8
   391c4:	f001 fc75 	bl	3aab2 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   391c8:	8923      	ldrh	r3, [r4, #8]
   391ca:	8003      	strh	r3, [r0, #0]
}
   391cc:	2000      	movs	r0, #0
   391ce:	bd10      	pop	{r4, pc}

000391d0 <gatt_read_blob_encode>:
{
   391d0:	b510      	push	{r4, lr}
   391d2:	4614      	mov	r4, r2
   391d4:	2104      	movs	r1, #4
   391d6:	3008      	adds	r0, #8
   391d8:	f001 fc6b 	bl	3aab2 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   391dc:	8923      	ldrh	r3, [r4, #8]
   391de:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   391e0:	8963      	ldrh	r3, [r4, #10]
   391e2:	8043      	strh	r3, [r0, #2]
}
   391e4:	2000      	movs	r0, #0
   391e6:	bd10      	pop	{r4, pc}

000391e8 <gatt_read_group_encode>:
{
   391e8:	b538      	push	{r3, r4, r5, lr}
   391ea:	4614      	mov	r4, r2
   391ec:	f100 0508 	add.w	r5, r0, #8
   391f0:	2104      	movs	r1, #4
   391f2:	4628      	mov	r0, r5
   391f4:	f001 fc5d 	bl	3aab2 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   391f8:	8923      	ldrh	r3, [r4, #8]
   391fa:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   391fc:	89e3      	ldrh	r3, [r4, #14]
   391fe:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   39200:	7c23      	ldrb	r3, [r4, #16]
   39202:	b933      	cbnz	r3, 39212 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   39204:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   39208:	4628      	mov	r0, r5
   3920a:	f001 fc6a 	bl	3aae2 <net_buf_simple_add_le16>
}
   3920e:	2000      	movs	r0, #0
   39210:	bd38      	pop	{r3, r4, r5, pc}
   39212:	f642 0101 	movw	r1, #10241	; 0x2801
   39216:	4628      	mov	r0, r5
   39218:	f001 fc63 	bl	3aae2 <net_buf_simple_add_le16>
}
   3921c:	e7f7      	b.n	3920e <gatt_read_group_encode+0x26>

0003921e <gatt_read_type_encode>:
{
   3921e:	b538      	push	{r3, r4, r5, lr}
   39220:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   39222:	f100 0508 	add.w	r5, r0, #8
   39226:	2104      	movs	r1, #4
   39228:	4628      	mov	r0, r5
   3922a:	f001 fc42 	bl	3aab2 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   3922e:	8923      	ldrh	r3, [r4, #8]
   39230:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   39232:	89e3      	ldrh	r3, [r4, #14]
   39234:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   39236:	7c23      	ldrb	r3, [r4, #16]
   39238:	2b02      	cmp	r3, #2
   3923a:	d007      	beq.n	3924c <gatt_read_type_encode+0x2e>
   3923c:	2b03      	cmp	r3, #3
   3923e:	d00c      	beq.n	3925a <gatt_read_type_encode+0x3c>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   39240:	6823      	ldr	r3, [r4, #0]
	net_buf_simple_add_le16(&buf->b, val);
   39242:	8859      	ldrh	r1, [r3, #2]
   39244:	4628      	mov	r0, r5
   39246:	f001 fc4c 	bl	3aae2 <net_buf_simple_add_le16>
}
   3924a:	e004      	b.n	39256 <gatt_read_type_encode+0x38>
	net_buf_simple_add_le16(&buf->b, val);
   3924c:	f642 0102 	movw	r1, #10242	; 0x2802
   39250:	4628      	mov	r0, r5
   39252:	f001 fc46 	bl	3aae2 <net_buf_simple_add_le16>
}
   39256:	2000      	movs	r0, #0
   39258:	bd38      	pop	{r3, r4, r5, pc}
   3925a:	f642 0103 	movw	r1, #10243	; 0x2803
   3925e:	4628      	mov	r0, r5
   39260:	f001 fc3f 	bl	3aae2 <net_buf_simple_add_le16>
}
   39264:	e7f7      	b.n	39256 <gatt_read_type_encode+0x38>

00039266 <gatt_read_mult_encode>:
{
   39266:	b570      	push	{r4, r5, r6, lr}
   39268:	4606      	mov	r6, r0
   3926a:	4615      	mov	r5, r2
	for (i = 0U; i < params->handle_count; i++) {
   3926c:	2400      	movs	r4, #0
   3926e:	686b      	ldr	r3, [r5, #4]
   39270:	429c      	cmp	r4, r3
   39272:	d209      	bcs.n	39288 <gatt_read_mult_encode+0x22>
		net_buf_add_le16(buf, params->multiple.handles[i]);
   39274:	68ab      	ldr	r3, [r5, #8]
	net_buf_simple_add_le16(&buf->b, val);
   39276:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
   3927a:	f106 0008 	add.w	r0, r6, #8
   3927e:	f001 fc30 	bl	3aae2 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   39282:	3401      	adds	r4, #1
   39284:	b2e4      	uxtb	r4, r4
   39286:	e7f2      	b.n	3926e <gatt_read_mult_encode+0x8>
}
   39288:	2000      	movs	r0, #0
   3928a:	bd70      	pop	{r4, r5, r6, pc}

0003928c <gatt_write_ccc_buf>:
{
   3928c:	b538      	push	{r3, r4, r5, lr}
   3928e:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   39290:	f100 0508 	add.w	r5, r0, #8
   39294:	2102      	movs	r1, #2
   39296:	4628      	mov	r0, r5
   39298:	f001 fc0b 	bl	3aab2 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   3929c:	8963      	ldrh	r3, [r4, #10]
   3929e:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   392a0:	89a1      	ldrh	r1, [r4, #12]
   392a2:	4628      	mov	r0, r5
   392a4:	f001 fc1d 	bl	3aae2 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   392a8:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   392aa:	f3bf 8f5b 	dmb	ish
   392ae:	e854 3f00 	ldrex	r3, [r4]
   392b2:	f043 0304 	orr.w	r3, r3, #4
   392b6:	e844 3200 	strex	r2, r3, [r4]
   392ba:	2a00      	cmp	r2, #0
   392bc:	d1f7      	bne.n	392ae <gatt_write_ccc_buf+0x22>
   392be:	f3bf 8f5b 	dmb	ish
}
   392c2:	2000      	movs	r0, #0
   392c4:	bd38      	pop	{r3, r4, r5, pc}

000392c6 <gatt_find_type_encode>:
{
   392c6:	b538      	push	{r3, r4, r5, lr}
   392c8:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   392ca:	f100 0508 	add.w	r5, r0, #8
   392ce:	2106      	movs	r1, #6
   392d0:	4628      	mov	r0, r5
   392d2:	f001 fbee 	bl	3aab2 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   392d6:	8923      	ldrh	r3, [r4, #8]
   392d8:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   392da:	89e3      	ldrh	r3, [r4, #14]
   392dc:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   392de:	7c23      	ldrb	r3, [r4, #16]
   392e0:	b94b      	cbnz	r3, 392f6 <gatt_find_type_encode+0x30>
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   392e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   392e6:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   392e8:	6821      	ldr	r1, [r4, #0]
   392ea:	780b      	ldrb	r3, [r1, #0]
   392ec:	b133      	cbz	r3, 392fc <gatt_find_type_encode+0x36>
   392ee:	2b02      	cmp	r3, #2
   392f0:	d009      	beq.n	39306 <gatt_find_type_encode+0x40>
}
   392f2:	2000      	movs	r0, #0
   392f4:	bd38      	pop	{r3, r4, r5, pc}
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   392f6:	f642 0301 	movw	r3, #10241	; 0x2801
   392fa:	e7f4      	b.n	392e6 <gatt_find_type_encode+0x20>
	net_buf_simple_add_le16(&buf->b, val);
   392fc:	8849      	ldrh	r1, [r1, #2]
   392fe:	4628      	mov	r0, r5
   39300:	f001 fbef 	bl	3aae2 <net_buf_simple_add_le16>
}
   39304:	e7f5      	b.n	392f2 <gatt_find_type_encode+0x2c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   39306:	2210      	movs	r2, #16
   39308:	3101      	adds	r1, #1
   3930a:	4628      	mov	r0, r5
   3930c:	f001 fbd7 	bl	3aabe <net_buf_simple_add_mem>
   39310:	e7ef      	b.n	392f2 <gatt_find_type_encode+0x2c>

00039312 <gatt_read_uuid_encode>:
{
   39312:	b538      	push	{r3, r4, r5, lr}
   39314:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   39316:	f100 0508 	add.w	r5, r0, #8
   3931a:	2104      	movs	r1, #4
   3931c:	4628      	mov	r0, r5
   3931e:	f001 fbc8 	bl	3aab2 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   39322:	8923      	ldrh	r3, [r4, #8]
   39324:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   39326:	8963      	ldrh	r3, [r4, #10]
   39328:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   3932a:	68e1      	ldr	r1, [r4, #12]
   3932c:	780b      	ldrb	r3, [r1, #0]
   3932e:	b92b      	cbnz	r3, 3933c <gatt_read_uuid_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   39330:	8849      	ldrh	r1, [r1, #2]
   39332:	4628      	mov	r0, r5
   39334:	f001 fbd5 	bl	3aae2 <net_buf_simple_add_le16>
}
   39338:	2000      	movs	r0, #0
   3933a:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_add_mem(&buf->b, mem, len);
   3933c:	2210      	movs	r2, #16
   3933e:	3101      	adds	r1, #1
   39340:	4628      	mov	r0, r5
   39342:	f001 fbbc 	bl	3aabe <net_buf_simple_add_mem>
   39346:	e7f7      	b.n	39338 <gatt_read_uuid_encode+0x26>

00039348 <clear_cf_cfg>:
{
   39348:	b530      	push	{r4, r5, lr}
   3934a:	b083      	sub	sp, #12
   3934c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   3934e:	2500      	movs	r5, #0
   39350:	9500      	str	r5, [sp, #0]
   39352:	f8cd 5003 	str.w	r5, [sp, #3]
   39356:	2207      	movs	r2, #7
   39358:	4669      	mov	r1, sp
   3935a:	3001      	adds	r0, #1
   3935c:	f7fd fd02 	bl	36d64 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   39360:	2201      	movs	r2, #1
   39362:	4629      	mov	r1, r5
   39364:	f104 0008 	add.w	r0, r4, #8
   39368:	f7fd fd20 	bl	36dac <memset>
	atomic_set(cfg->flags, 0);
   3936c:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3936e:	f3bf 8f5b 	dmb	ish
   39372:	e854 3f00 	ldrex	r3, [r4]
   39376:	e844 5200 	strex	r2, r5, [r4]
   3937a:	2a00      	cmp	r2, #0
   3937c:	d1f9      	bne.n	39372 <clear_cf_cfg+0x2a>
   3937e:	f3bf 8f5b 	dmb	ish
}
   39382:	b003      	add	sp, #12
   39384:	bd30      	pop	{r4, r5, pc}

00039386 <remove_cf_cfg>:
{
   39386:	b570      	push	{r4, r5, r6, lr}
   39388:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   3938a:	f7ef fea9 	bl	290e0 <find_cf_cfg>
	if (!cfg) {
   3938e:	b1e8      	cbz	r0, 393cc <remove_cf_cfg+0x46>
   39390:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   39392:	f104 0688 	add.w	r6, r4, #136	; 0x88
   39396:	4631      	mov	r1, r6
   39398:	7a20      	ldrb	r0, [r4, #8]
   3939a:	f7fd ffc6 	bl	3732a <bt_addr_le_is_bonded>
   3939e:	b918      	cbnz	r0, 393a8 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   393a0:	4628      	mov	r0, r5
   393a2:	f7ff ffd1 	bl	39348 <clear_cf_cfg>
   393a6:	e011      	b.n	393cc <remove_cf_cfg+0x46>
   393a8:	2207      	movs	r2, #7
   393aa:	4631      	mov	r1, r6
   393ac:	1c68      	adds	r0, r5, #1
   393ae:	f7fd fcd9 	bl	36d64 <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   393b2:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   393b4:	f3bf 8f5b 	dmb	ish
   393b8:	e855 3f00 	ldrex	r3, [r5]
   393bc:	f023 0302 	bic.w	r3, r3, #2
   393c0:	e845 3200 	strex	r2, r3, [r5]
   393c4:	2a00      	cmp	r2, #0
   393c6:	d1f7      	bne.n	393b8 <remove_cf_cfg+0x32>
   393c8:	f3bf 8f5b 	dmb	ish
}
   393cc:	bd70      	pop	{r4, r5, r6, pc}

000393ce <bt_gatt_attr_read>:
{
   393ce:	b510      	push	{r4, lr}
   393d0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   393d4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   393d8:	42a1      	cmp	r1, r4
   393da:	d80c      	bhi.n	393f6 <bt_gatt_attr_read+0x28>
   393dc:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   393de:	1a64      	subs	r4, r4, r1
   393e0:	42a3      	cmp	r3, r4
   393e2:	bfa8      	it	ge
   393e4:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   393e6:	b29c      	uxth	r4, r3
   393e8:	4622      	mov	r2, r4
   393ea:	9b03      	ldr	r3, [sp, #12]
   393ec:	4419      	add	r1, r3
   393ee:	f7fd fcb9 	bl	36d64 <memcpy>
}
   393f2:	4620      	mov	r0, r4
   393f4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   393f6:	f06f 0406 	mvn.w	r4, #6
   393fa:	e7fa      	b.n	393f2 <bt_gatt_attr_read+0x24>

000393fc <read_appearance>:
{
   393fc:	b510      	push	{r4, lr}
   393fe:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   39400:	2400      	movs	r4, #0
   39402:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   39406:	2402      	movs	r4, #2
   39408:	9402      	str	r4, [sp, #8]
   3940a:	f10d 0416 	add.w	r4, sp, #22
   3940e:	9401      	str	r4, [sp, #4]
   39410:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   39414:	9400      	str	r4, [sp, #0]
   39416:	f7ff ffda 	bl	393ce <bt_gatt_attr_read>
}
   3941a:	b006      	add	sp, #24
   3941c:	bd10      	pop	{r4, pc}

0003941e <read_name>:
{
   3941e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39422:	b084      	sub	sp, #16
   39424:	4604      	mov	r4, r0
   39426:	460d      	mov	r5, r1
   39428:	4616      	mov	r6, r2
   3942a:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   3942c:	f7ec f9fe 	bl	2582c <bt_get_name>
   39430:	4680      	mov	r8, r0
				 strlen(name));
   39432:	f7fd fc4e 	bl	36cd2 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   39436:	b280      	uxth	r0, r0
   39438:	9002      	str	r0, [sp, #8]
   3943a:	f8cd 8004 	str.w	r8, [sp, #4]
   3943e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   39442:	9300      	str	r3, [sp, #0]
   39444:	463b      	mov	r3, r7
   39446:	4632      	mov	r2, r6
   39448:	4629      	mov	r1, r5
   3944a:	4620      	mov	r0, r4
   3944c:	f7ff ffbf 	bl	393ce <bt_gatt_attr_read>
}
   39450:	b004      	add	sp, #16
   39452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039456 <cf_read>:
{
   39456:	b5f0      	push	{r4, r5, r6, r7, lr}
   39458:	b087      	sub	sp, #28
   3945a:	4604      	mov	r4, r0
   3945c:	460d      	mov	r5, r1
   3945e:	4616      	mov	r6, r2
   39460:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   39462:	2300      	movs	r3, #0
   39464:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   39468:	f7ef fe3a 	bl	290e0 <find_cf_cfg>
	if (cfg) {
   3946c:	b128      	cbz	r0, 3947a <cf_read+0x24>
   3946e:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   39470:	2201      	movs	r2, #1
   39472:	3108      	adds	r1, #8
   39474:	a805      	add	r0, sp, #20
   39476:	f7fd fc75 	bl	36d64 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   3947a:	2301      	movs	r3, #1
   3947c:	9302      	str	r3, [sp, #8]
   3947e:	ab05      	add	r3, sp, #20
   39480:	9301      	str	r3, [sp, #4]
   39482:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   39486:	9300      	str	r3, [sp, #0]
   39488:	463b      	mov	r3, r7
   3948a:	4632      	mov	r2, r6
   3948c:	4629      	mov	r1, r5
   3948e:	4620      	mov	r0, r4
   39490:	f7ff ff9d 	bl	393ce <bt_gatt_attr_read>
}
   39494:	b007      	add	sp, #28
   39496:	bdf0      	pop	{r4, r5, r6, r7, pc}

00039498 <bt_gatt_attr_read_service>:
{
   39498:	b570      	push	{r4, r5, r6, lr}
   3949a:	b086      	sub	sp, #24
   3949c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   394a0:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   394a2:	7826      	ldrb	r6, [r4, #0]
   394a4:	b146      	cbz	r6, 394b8 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   394a6:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   394a8:	2610      	movs	r6, #16
   394aa:	9602      	str	r6, [sp, #8]
   394ac:	9401      	str	r4, [sp, #4]
   394ae:	9500      	str	r5, [sp, #0]
   394b0:	f7ff ff8d 	bl	393ce <bt_gatt_attr_read>
}
   394b4:	b006      	add	sp, #24
   394b6:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   394b8:	8864      	ldrh	r4, [r4, #2]
   394ba:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   394be:	2402      	movs	r4, #2
   394c0:	9402      	str	r4, [sp, #8]
   394c2:	f10d 0416 	add.w	r4, sp, #22
   394c6:	9401      	str	r4, [sp, #4]
   394c8:	9500      	str	r5, [sp, #0]
   394ca:	f7ff ff80 	bl	393ce <bt_gatt_attr_read>
   394ce:	e7f1      	b.n	394b4 <bt_gatt_attr_read_service+0x1c>

000394d0 <bt_gatt_attr_read_ccc>:
{
   394d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   394d2:	b087      	sub	sp, #28
   394d4:	4605      	mov	r5, r0
   394d6:	460c      	mov	r4, r1
   394d8:	4616      	mov	r6, r2
   394da:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   394dc:	68c9      	ldr	r1, [r1, #12]
   394de:	f7ff fc71 	bl	38dc4 <find_ccc_cfg>
	if (cfg) {
   394e2:	b190      	cbz	r0, 3950a <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   394e4:	8903      	ldrh	r3, [r0, #8]
   394e6:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   394ea:	2302      	movs	r3, #2
   394ec:	9302      	str	r3, [sp, #8]
   394ee:	f10d 0316 	add.w	r3, sp, #22
   394f2:	9301      	str	r3, [sp, #4]
   394f4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   394f8:	9300      	str	r3, [sp, #0]
   394fa:	463b      	mov	r3, r7
   394fc:	4632      	mov	r2, r6
   394fe:	4621      	mov	r1, r4
   39500:	4628      	mov	r0, r5
   39502:	f7ff ff64 	bl	393ce <bt_gatt_attr_read>
}
   39506:	b007      	add	sp, #28
   39508:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   3950a:	2300      	movs	r3, #0
   3950c:	f8ad 3016 	strh.w	r3, [sp, #22]
   39510:	e7eb      	b.n	394ea <bt_gatt_attr_read_ccc+0x1a>

00039512 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   39512:	b1b8      	cbz	r0, 39544 <bt_gatt_attr_value_handle+0x32>
{
   39514:	b510      	push	{r4, lr}
   39516:	b082      	sub	sp, #8
   39518:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   3951a:	2300      	movs	r3, #0
   3951c:	f88d 3004 	strb.w	r3, [sp, #4]
   39520:	f642 0303 	movw	r3, #10243	; 0x2803
   39524:	f8ad 3006 	strh.w	r3, [sp, #6]
   39528:	a901      	add	r1, sp, #4
   3952a:	6800      	ldr	r0, [r0, #0]
   3952c:	f7fd fd46 	bl	36fbc <bt_uuid_cmp>
   39530:	b950      	cbnz	r0, 39548 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   39532:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   39534:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   39536:	b940      	cbnz	r0, 3954a <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   39538:	4620      	mov	r0, r4
   3953a:	f7f0 fac7 	bl	29acc <bt_gatt_attr_get_handle>
   3953e:	3001      	adds	r0, #1
   39540:	b280      	uxth	r0, r0
   39542:	e002      	b.n	3954a <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   39544:	2000      	movs	r0, #0
}
   39546:	4770      	bx	lr
	uint16_t handle = 0;
   39548:	2000      	movs	r0, #0
}
   3954a:	b002      	add	sp, #8
   3954c:	bd10      	pop	{r4, pc}

0003954e <bt_gatt_attr_read_chrc>:
{
   3954e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39552:	b08a      	sub	sp, #40	; 0x28
   39554:	4605      	mov	r5, r0
   39556:	460c      	mov	r4, r1
   39558:	4616      	mov	r6, r2
   3955a:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   3955c:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   39560:	f898 3006 	ldrb.w	r3, [r8, #6]
   39564:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   39568:	4608      	mov	r0, r1
   3956a:	f7ff ffd2 	bl	39512 <bt_gatt_attr_value_handle>
   3956e:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   39572:	f8d8 1000 	ldr.w	r1, [r8]
   39576:	780b      	ldrb	r3, [r1, #0]
   39578:	b993      	cbnz	r3, 395a0 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   3957a:	884b      	ldrh	r3, [r1, #2]
   3957c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   39580:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   39582:	9302      	str	r3, [sp, #8]
   39584:	ab05      	add	r3, sp, #20
   39586:	9301      	str	r3, [sp, #4]
   39588:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   3958c:	9300      	str	r3, [sp, #0]
   3958e:	463b      	mov	r3, r7
   39590:	4632      	mov	r2, r6
   39592:	4621      	mov	r1, r4
   39594:	4628      	mov	r0, r5
   39596:	f7ff ff1a 	bl	393ce <bt_gatt_attr_read>
}
   3959a:	b00a      	add	sp, #40	; 0x28
   3959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   395a0:	2210      	movs	r2, #16
   395a2:	3101      	adds	r1, #1
   395a4:	f10d 0017 	add.w	r0, sp, #23
   395a8:	f7fd fbdc 	bl	36d64 <memcpy>
		value_len += 16U;
   395ac:	2313      	movs	r3, #19
   395ae:	e7e8      	b.n	39582 <bt_gatt_attr_read_chrc+0x34>

000395b0 <db_hash_process>:
{
   395b0:	b508      	push	{r3, lr}
	db_hash_gen(true);
   395b2:	2001      	movs	r0, #1
   395b4:	f7f0 fb04 	bl	29bc0 <db_hash_gen>
}
   395b8:	bd08      	pop	{r3, pc}

000395ba <bt_gatt_check_perm>:
{
   395ba:	b538      	push	{r3, r4, r5, lr}
   395bc:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   395be:	f012 0f01 	tst.w	r2, #1
   395c2:	d005      	beq.n	395d0 <bt_gatt_check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   395c4:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   395c6:	f013 0f15 	tst.w	r3, #21
   395ca:	d01d      	beq.n	39608 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   395cc:	684b      	ldr	r3, [r1, #4]
   395ce:	b1eb      	cbz	r3, 3960c <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_WRITE) &&
   395d0:	f012 0f02 	tst.w	r2, #2
   395d4:	d005      	beq.n	395e2 <bt_gatt_check_perm+0x28>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   395d6:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   395d8:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   395dc:	d018      	beq.n	39610 <bt_gatt_check_perm+0x56>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   395de:	688b      	ldr	r3, [r1, #8]
   395e0:	b1c3      	cbz	r3, 39614 <bt_gatt_check_perm+0x5a>
	mask &= attr->perm;
   395e2:	7c8c      	ldrb	r4, [r1, #18]
   395e4:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   395e6:	f014 0f30 	tst.w	r4, #48	; 0x30
   395ea:	d106      	bne.n	395fa <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   395ec:	f014 000c 	ands.w	r0, r4, #12
   395f0:	d002      	beq.n	395f8 <bt_gatt_check_perm+0x3e>
		if (!conn->encrypt) {
   395f2:	7aeb      	ldrb	r3, [r5, #11]
   395f4:	b183      	cbz	r3, 39618 <bt_gatt_check_perm+0x5e>
	return 0;
   395f6:	2000      	movs	r0, #0
}
   395f8:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   395fa:	4628      	mov	r0, r5
   395fc:	f7fe f998 	bl	37930 <bt_conn_get_security>
   39600:	2802      	cmp	r0, #2
   39602:	d8f3      	bhi.n	395ec <bt_gatt_check_perm+0x32>
			return BT_ATT_ERR_AUTHENTICATION;
   39604:	2005      	movs	r0, #5
   39606:	e7f7      	b.n	395f8 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   39608:	2002      	movs	r0, #2
   3960a:	e7f5      	b.n	395f8 <bt_gatt_check_perm+0x3e>
   3960c:	2002      	movs	r0, #2
   3960e:	e7f3      	b.n	395f8 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   39610:	2003      	movs	r0, #3
   39612:	e7f1      	b.n	395f8 <bt_gatt_check_perm+0x3e>
   39614:	2003      	movs	r0, #3
   39616:	e7ef      	b.n	395f8 <bt_gatt_check_perm+0x3e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   39618:	200f      	movs	r0, #15
   3961a:	e7ed      	b.n	395f8 <bt_gatt_check_perm+0x3e>

0003961c <gatt_discover_next>:
{
   3961c:	b538      	push	{r3, r4, r5, lr}
   3961e:	4605      	mov	r5, r0
   39620:	4614      	mov	r4, r2
	if (!last_handle)
   39622:	b159      	cbz	r1, 3963c <gatt_discover_next+0x20>
   39624:	460b      	mov	r3, r1
	params->start_handle = last_handle;
   39626:	8121      	strh	r1, [r4, #8]
	if (params->start_handle < UINT16_MAX) {
   39628:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3962c:	4291      	cmp	r1, r2
   3962e:	d00a      	beq.n	39646 <gatt_discover_next+0x2a>
		params->start_handle++;
   39630:	3301      	adds	r3, #1
   39632:	b29b      	uxth	r3, r3
   39634:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   39636:	89e2      	ldrh	r2, [r4, #14]
   39638:	4293      	cmp	r3, r2
   3963a:	d804      	bhi.n	39646 <gatt_discover_next+0x2a>
	if (!bt_gatt_discover(conn, params)) {
   3963c:	4621      	mov	r1, r4
   3963e:	4628      	mov	r0, r5
   39640:	f7f0 fe2a 	bl	2a298 <bt_gatt_discover>
   39644:	b120      	cbz	r0, 39650 <gatt_discover_next+0x34>
	params->func(conn, NULL, params);
   39646:	6863      	ldr	r3, [r4, #4]
   39648:	4622      	mov	r2, r4
   3964a:	2100      	movs	r1, #0
   3964c:	4628      	mov	r0, r5
   3964e:	4798      	blx	r3
}
   39650:	bd38      	pop	{r3, r4, r5, pc}

00039652 <gatt_find_type_rsp>:
{
   39652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39656:	b089      	sub	sp, #36	; 0x24
   39658:	4680      	mov	r8, r0
   3965a:	9d10      	ldr	r5, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   3965c:	b939      	cbnz	r1, 3966e <gatt_find_type_rsp+0x1c>
   3965e:	4616      	mov	r6, r2
   39660:	460c      	mov	r4, r1
   39662:	f013 0903 	ands.w	r9, r3, #3
   39666:	d102      	bne.n	3966e <gatt_find_type_rsp+0x1c>
	count = length / sizeof(struct bt_att_handle_group);
   39668:	f3c3 0787 	ubfx	r7, r3, #2, #8
	for (uint8_t i = 0U; i < count; i++) {
   3966c:	e023      	b.n	396b6 <gatt_find_type_rsp+0x64>
	params->func(conn, NULL, params);
   3966e:	686b      	ldr	r3, [r5, #4]
   39670:	462a      	mov	r2, r5
   39672:	2100      	movs	r1, #0
   39674:	4640      	mov	r0, r8
   39676:	4798      	blx	r3
}
   39678:	b009      	add	sp, #36	; 0x24
   3967a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   3967e:	f642 0101 	movw	r1, #10241	; 0x2801
   39682:	f8ad 1002 	strh.w	r1, [sp, #2]
		value.end_handle = end_handle;
   39686:	f8ad 3008 	strh.w	r3, [sp, #8]
		value.uuid = params->uuid;
   3968a:	682b      	ldr	r3, [r5, #0]
   3968c:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   3968e:	f8cd d00c 	str.w	sp, [sp, #12]
   39692:	2300      	movs	r3, #0
   39694:	9304      	str	r3, [sp, #16]
   39696:	9305      	str	r3, [sp, #20]
   39698:	a901      	add	r1, sp, #4
   3969a:	9106      	str	r1, [sp, #24]
   3969c:	f88d 301e 	strb.w	r3, [sp, #30]
		attr.handle = start_handle;
   396a0:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   396a4:	686b      	ldr	r3, [r5, #4]
   396a6:	462a      	mov	r2, r5
   396a8:	a903      	add	r1, sp, #12
   396aa:	4640      	mov	r0, r8
   396ac:	4798      	blx	r3
   396ae:	2800      	cmp	r0, #0
   396b0:	d0e2      	beq.n	39678 <gatt_find_type_rsp+0x26>
	for (uint8_t i = 0U; i < count; i++) {
   396b2:	3401      	adds	r4, #1
   396b4:	b2e4      	uxtb	r4, r4
   396b6:	42a7      	cmp	r7, r4
   396b8:	d911      	bls.n	396de <gatt_find_type_rsp+0x8c>
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   396ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   396be:	f836 2024 	ldrh.w	r2, [r6, r4, lsl #2]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   396c2:	885b      	ldrh	r3, [r3, #2]
   396c4:	fa1f f983 	uxth.w	r9, r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   396c8:	2100      	movs	r1, #0
   396ca:	f88d 1000 	strb.w	r1, [sp]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   396ce:	7c29      	ldrb	r1, [r5, #16]
   396d0:	2900      	cmp	r1, #0
   396d2:	d1d4      	bne.n	3967e <gatt_find_type_rsp+0x2c>
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   396d4:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   396d8:	f8ad 1002 	strh.w	r1, [sp, #2]
   396dc:	e7d3      	b.n	39686 <gatt_find_type_rsp+0x34>
	gatt_discover_next(conn, end_handle, params);
   396de:	462a      	mov	r2, r5
   396e0:	4649      	mov	r1, r9
   396e2:	4640      	mov	r0, r8
   396e4:	f7ff ff9a 	bl	3961c <gatt_discover_next>
	return;
   396e8:	e7c6      	b.n	39678 <gatt_find_type_rsp+0x26>

000396ea <gatt_read_group_rsp>:
{
   396ea:	b538      	push	{r3, r4, r5, lr}
   396ec:	4604      	mov	r4, r0
   396ee:	9d04      	ldr	r5, [sp, #16]
	if (err) {
   396f0:	b121      	cbz	r1, 396fc <gatt_read_group_rsp+0x12>
		params->func(conn, NULL, params);
   396f2:	686b      	ldr	r3, [r5, #4]
   396f4:	462a      	mov	r2, r5
   396f6:	2100      	movs	r1, #0
   396f8:	4798      	blx	r3
}
   396fa:	bd38      	pop	{r3, r4, r5, pc}
   396fc:	4610      	mov	r0, r2
	handle = parse_service(conn, pdu, params, length);
   396fe:	462a      	mov	r2, r5
   39700:	4601      	mov	r1, r0
   39702:	4620      	mov	r0, r4
   39704:	f7ef fe70 	bl	293e8 <parse_service>
	if (!handle) {
   39708:	4601      	mov	r1, r0
   3970a:	2800      	cmp	r0, #0
   3970c:	d0f5      	beq.n	396fa <gatt_read_group_rsp+0x10>
	gatt_discover_next(conn, handle, params);
   3970e:	462a      	mov	r2, r5
   39710:	4620      	mov	r0, r4
   39712:	f7ff ff83 	bl	3961c <gatt_discover_next>
   39716:	e7f0      	b.n	396fa <gatt_read_group_rsp+0x10>

00039718 <gatt_read_type_rsp>:
{
   39718:	b538      	push	{r3, r4, r5, lr}
   3971a:	4604      	mov	r4, r0
   3971c:	9d04      	ldr	r5, [sp, #16]
	if (err) {
   3971e:	b989      	cbnz	r1, 39744 <gatt_read_type_rsp+0x2c>
   39720:	4610      	mov	r0, r2
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   39722:	7c2a      	ldrb	r2, [r5, #16]
   39724:	2a02      	cmp	r2, #2
   39726:	d012      	beq.n	3974e <gatt_read_type_rsp+0x36>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   39728:	2a03      	cmp	r2, #3
   3972a:	d016      	beq.n	3975a <gatt_read_type_rsp+0x42>
		handle = parse_read_std_char_desc(conn, pdu, params, length);
   3972c:	462a      	mov	r2, r5
   3972e:	4601      	mov	r1, r0
   39730:	4620      	mov	r0, r4
   39732:	f7ef fc5b 	bl	28fec <parse_read_std_char_desc>
	if (!handle) {
   39736:	b148      	cbz	r0, 3974c <gatt_read_type_rsp+0x34>
	gatt_discover_next(conn, handle, params);
   39738:	462a      	mov	r2, r5
   3973a:	4601      	mov	r1, r0
   3973c:	4620      	mov	r0, r4
   3973e:	f7ff ff6d 	bl	3961c <gatt_discover_next>
   39742:	e003      	b.n	3974c <gatt_read_type_rsp+0x34>
		params->func(conn, NULL, params);
   39744:	686b      	ldr	r3, [r5, #4]
   39746:	462a      	mov	r2, r5
   39748:	2100      	movs	r1, #0
   3974a:	4798      	blx	r3
}
   3974c:	bd38      	pop	{r3, r4, r5, pc}
		handle = parse_include(conn, pdu, params, length);
   3974e:	462a      	mov	r2, r5
   39750:	4601      	mov	r1, r0
   39752:	4620      	mov	r0, r4
   39754:	f7f0 f89e 	bl	29894 <parse_include>
   39758:	e7ed      	b.n	39736 <gatt_read_type_rsp+0x1e>
		handle = parse_characteristic(conn, pdu, params, length);
   3975a:	462a      	mov	r2, r5
   3975c:	4601      	mov	r1, r0
   3975e:	4620      	mov	r0, r4
   39760:	f7ef ff3c 	bl	295dc <parse_characteristic>
   39764:	e7e7      	b.n	39736 <gatt_read_type_rsp+0x1e>

00039766 <gatt_read_rsp>:
{
   39766:	b5f0      	push	{r4, r5, r6, r7, lr}
   39768:	b083      	sub	sp, #12
   3976a:	4605      	mov	r5, r0
   3976c:	9f08      	ldr	r7, [sp, #32]
	if (err || !length) {
   3976e:	4608      	mov	r0, r1
   39770:	b9c9      	cbnz	r1, 397a6 <gatt_read_rsp+0x40>
   39772:	461c      	mov	r4, r3
   39774:	b1bb      	cbz	r3, 397a6 <gatt_read_rsp+0x40>
	if (!params->handle_count) {
   39776:	687b      	ldr	r3, [r7, #4]
   39778:	b1f3      	cbz	r3, 397b8 <gatt_read_rsp+0x52>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   3977a:	683e      	ldr	r6, [r7, #0]
   3977c:	9400      	str	r4, [sp, #0]
   3977e:	4613      	mov	r3, r2
   39780:	463a      	mov	r2, r7
   39782:	2100      	movs	r1, #0
   39784:	4628      	mov	r0, r5
   39786:	47b0      	blx	r6
   39788:	b1a0      	cbz	r0, 397b4 <gatt_read_rsp+0x4e>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   3978a:	4628      	mov	r0, r5
   3978c:	f7ff f86b 	bl	38866 <bt_att_get_mtu>
   39790:	3801      	subs	r0, #1
   39792:	4284      	cmp	r4, r0
   39794:	da16      	bge.n	397c4 <gatt_read_rsp+0x5e>
		params->func(conn, 0, params, NULL, 0);
   39796:	683c      	ldr	r4, [r7, #0]
   39798:	2100      	movs	r1, #0
   3979a:	9100      	str	r1, [sp, #0]
   3979c:	460b      	mov	r3, r1
   3979e:	463a      	mov	r2, r7
   397a0:	4628      	mov	r0, r5
   397a2:	47a0      	blx	r4
		return;
   397a4:	e006      	b.n	397b4 <gatt_read_rsp+0x4e>
		params->func(conn, err, params, NULL, 0);
   397a6:	683c      	ldr	r4, [r7, #0]
   397a8:	2300      	movs	r3, #0
   397aa:	9300      	str	r3, [sp, #0]
   397ac:	463a      	mov	r2, r7
   397ae:	4601      	mov	r1, r0
   397b0:	4628      	mov	r0, r5
   397b2:	47a0      	blx	r4
}
   397b4:	b003      	add	sp, #12
   397b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parse_read_by_uuid(conn, params, pdu, length);
   397b8:	4623      	mov	r3, r4
   397ba:	4639      	mov	r1, r7
   397bc:	4628      	mov	r0, r5
   397be:	f7f0 ff5b 	bl	2a678 <parse_read_by_uuid>
		return;
   397c2:	e7f7      	b.n	397b4 <gatt_read_rsp+0x4e>
	params->single.offset += length;
   397c4:	897b      	ldrh	r3, [r7, #10]
   397c6:	441c      	add	r4, r3
   397c8:	817c      	strh	r4, [r7, #10]
	if (bt_gatt_read(conn, params) < 0) {
   397ca:	4639      	mov	r1, r7
   397cc:	4628      	mov	r0, r5
   397ce:	f7f0 ff27 	bl	2a620 <bt_gatt_read>
   397d2:	2800      	cmp	r0, #0
   397d4:	daee      	bge.n	397b4 <gatt_read_rsp+0x4e>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   397d6:	683c      	ldr	r4, [r7, #0]
   397d8:	2300      	movs	r3, #0
   397da:	9300      	str	r3, [sp, #0]
   397dc:	463a      	mov	r2, r7
   397de:	210e      	movs	r1, #14
   397e0:	4628      	mov	r0, r5
   397e2:	47a0      	blx	r4
   397e4:	e7e6      	b.n	397b4 <gatt_read_rsp+0x4e>

000397e6 <bt_gatt_cancel>:
{
   397e6:	b508      	push	{r3, lr}
	bt_att_req_cancel(conn, params);
   397e8:	f7ff f98f 	bl	38b0a <bt_att_req_cancel>
}
   397ec:	bd08      	pop	{r3, pc}

000397ee <bt_gatt_unsubscribe>:
{
   397ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   397f2:	7b43      	ldrb	r3, [r0, #13]
   397f4:	2b07      	cmp	r3, #7
   397f6:	d174      	bne.n	398e2 <bt_gatt_unsubscribe+0xf4>
   397f8:	4607      	mov	r7, r0
   397fa:	460d      	mov	r5, r1
	sub = gatt_sub_find(conn);
   397fc:	f7ef fcbe 	bl	2917c <gatt_sub_find>
	if (!sub) {
   39800:	4680      	mov	r8, r0
   39802:	2800      	cmp	r0, #0
   39804:	d070      	beq.n	398e8 <bt_gatt_unsubscribe+0xfa>
	return list->head;
   39806:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   39808:	b393      	cbz	r3, 39870 <bt_gatt_unsubscribe+0x82>
   3980a:	3b14      	subs	r3, #20
   3980c:	d035      	beq.n	3987a <bt_gatt_unsubscribe+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3980e:	f113 0414 	adds.w	r4, r3, #20
   39812:	d02e      	beq.n	39872 <bt_gatt_unsubscribe+0x84>
	return node->next;
   39814:	695c      	ldr	r4, [r3, #20]
   39816:	b364      	cbz	r4, 39872 <bt_gatt_unsubscribe+0x84>
   39818:	3c14      	subs	r4, #20
   3981a:	e02a      	b.n	39872 <bt_gatt_unsubscribe+0x84>
			sys_slist_remove(&sub->list, prev, &tmp->node);
   3981c:	f103 0214 	add.w	r2, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   39820:	b18e      	cbz	r6, 39846 <bt_gatt_unsubscribe+0x58>
	return node->next;
   39822:	6959      	ldr	r1, [r3, #20]
	parent->next = child;
   39824:	6031      	str	r1, [r6, #0]
	return list->tail;
   39826:	f8d8 100c 	ldr.w	r1, [r8, #12]
Z_GENLIST_REMOVE(slist, snode)
   3982a:	428a      	cmp	r2, r1
   3982c:	d015      	beq.n	3985a <bt_gatt_unsubscribe+0x6c>
	parent->next = child;
   3982e:	2200      	movs	r2, #0
   39830:	615a      	str	r2, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39832:	f3bf 8f5b 	dmb	ish
   39836:	692b      	ldr	r3, [r5, #16]
   39838:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(params->flags,
   3983c:	f013 0f04 	tst.w	r3, #4
   39840:	d10e      	bne.n	39860 <bt_gatt_unsubscribe+0x72>
			found = true;
   39842:	2101      	movs	r1, #1
			continue;
   39844:	e027      	b.n	39896 <bt_gatt_unsubscribe+0xa8>
	return node->next;
   39846:	6959      	ldr	r1, [r3, #20]
	list->head = node;
   39848:	f8c8 1008 	str.w	r1, [r8, #8]
	return list->tail;
   3984c:	f8d8 000c 	ldr.w	r0, [r8, #12]
Z_GENLIST_REMOVE(slist, snode)
   39850:	4282      	cmp	r2, r0
   39852:	d1ec      	bne.n	3982e <bt_gatt_unsubscribe+0x40>
	list->tail = node;
   39854:	f8c8 100c 	str.w	r1, [r8, #12]
}
   39858:	e7e9      	b.n	3982e <bt_gatt_unsubscribe+0x40>
	list->tail = node;
   3985a:	f8c8 600c 	str.w	r6, [r8, #12]
}
   3985e:	e7e6      	b.n	3982e <bt_gatt_unsubscribe+0x40>
				bt_gatt_cancel(conn, params);
   39860:	4629      	mov	r1, r5
   39862:	4638      	mov	r0, r7
   39864:	f7ff ffbf 	bl	397e6 <bt_gatt_cancel>
   39868:	e7eb      	b.n	39842 <bt_gatt_unsubscribe+0x54>
			has_subscription = true;
   3986a:	f04f 0901 	mov.w	r9, #1
   3986e:	e012      	b.n	39896 <bt_gatt_unsubscribe+0xa8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   39870:	461c      	mov	r4, r3
   39872:	2600      	movs	r6, #0
   39874:	4631      	mov	r1, r6
   39876:	46b1      	mov	r9, r6
   39878:	e004      	b.n	39884 <bt_gatt_unsubscribe+0x96>
   3987a:	461c      	mov	r4, r3
   3987c:	e7f9      	b.n	39872 <bt_gatt_unsubscribe+0x84>
   3987e:	4622      	mov	r2, r4
   39880:	4623      	mov	r3, r4
   39882:	4614      	mov	r4, r2
   39884:	b18b      	cbz	r3, 398aa <bt_gatt_unsubscribe+0xbc>
		if (params == tmp) {
   39886:	42ab      	cmp	r3, r5
   39888:	d0c8      	beq.n	3981c <bt_gatt_unsubscribe+0x2e>
			prev = &tmp->node;
   3988a:	f103 0614 	add.w	r6, r3, #20
		if (tmp->value_handle == params->value_handle) {
   3988e:	891a      	ldrh	r2, [r3, #8]
   39890:	892b      	ldrh	r3, [r5, #8]
   39892:	429a      	cmp	r2, r3
   39894:	d0e9      	beq.n	3986a <bt_gatt_unsubscribe+0x7c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   39896:	2c00      	cmp	r4, #0
   39898:	d0f1      	beq.n	3987e <bt_gatt_unsubscribe+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3989a:	f114 0214 	adds.w	r2, r4, #20
   3989e:	d0ef      	beq.n	39880 <bt_gatt_unsubscribe+0x92>
	return node->next;
   398a0:	6962      	ldr	r2, [r4, #20]
   398a2:	2a00      	cmp	r2, #0
   398a4:	d0ec      	beq.n	39880 <bt_gatt_unsubscribe+0x92>
   398a6:	3a14      	subs	r2, #20
   398a8:	e7ea      	b.n	39880 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   398aa:	b301      	cbz	r1, 398ee <bt_gatt_unsubscribe+0x100>
	if (gatt_sub_is_empty(sub)) {
   398ac:	4640      	mov	r0, r8
   398ae:	f7ff f9f2 	bl	38c96 <gatt_sub_is_empty>
   398b2:	b958      	cbnz	r0, 398cc <bt_gatt_unsubscribe+0xde>
	if (has_subscription) {
   398b4:	f1b9 0f00 	cmp.w	r9, #0
   398b8:	d00c      	beq.n	398d4 <bt_gatt_unsubscribe+0xe6>
		params->notify(conn, params, NULL, 0);
   398ba:	682c      	ldr	r4, [r5, #0]
   398bc:	2300      	movs	r3, #0
   398be:	461a      	mov	r2, r3
   398c0:	4629      	mov	r1, r5
   398c2:	4638      	mov	r0, r7
   398c4:	47a0      	blx	r4
		return 0;
   398c6:	2000      	movs	r0, #0
}
   398c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		gatt_sub_free(sub);
   398cc:	4640      	mov	r0, r8
   398ce:	f7ff fab4 	bl	38e3a <gatt_sub_free>
   398d2:	e7ef      	b.n	398b4 <bt_gatt_unsubscribe+0xc6>
	params->value = 0x0000;
   398d4:	2300      	movs	r3, #0
   398d6:	81ab      	strh	r3, [r5, #12]
	return gatt_write_ccc(conn, params);
   398d8:	4629      	mov	r1, r5
   398da:	4638      	mov	r0, r7
   398dc:	f7f0 f8b0 	bl	29a40 <gatt_write_ccc>
   398e0:	e7f2      	b.n	398c8 <bt_gatt_unsubscribe+0xda>
		return -ENOTCONN;
   398e2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   398e6:	e7ef      	b.n	398c8 <bt_gatt_unsubscribe+0xda>
		return -EINVAL;
   398e8:	f06f 0015 	mvn.w	r0, #21
   398ec:	e7ec      	b.n	398c8 <bt_gatt_unsubscribe+0xda>
		return -EINVAL;
   398ee:	f06f 0015 	mvn.w	r0, #21
   398f2:	e7e9      	b.n	398c8 <bt_gatt_unsubscribe+0xda>

000398f4 <bt_gatt_notification>:
{
   398f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   398f8:	4680      	mov	r8, r0
   398fa:	460f      	mov	r7, r1
   398fc:	4691      	mov	r9, r2
   398fe:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   39900:	f7ef fc3c 	bl	2917c <gatt_sub_find>
	if (!sub) {
   39904:	b350      	cbz	r0, 3995c <bt_gatt_notification+0x68>
	return list->head;
   39906:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   39908:	b145      	cbz	r5, 3991c <bt_gatt_notification+0x28>
   3990a:	3d14      	subs	r5, #20
   3990c:	d008      	beq.n	39920 <bt_gatt_notification+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3990e:	f115 0414 	adds.w	r4, r5, #20
   39912:	d014      	beq.n	3993e <bt_gatt_notification+0x4a>
	return node->next;
   39914:	696c      	ldr	r4, [r5, #20]
   39916:	b194      	cbz	r4, 3993e <bt_gatt_notification+0x4a>
   39918:	3c14      	subs	r4, #20
   3991a:	e010      	b.n	3993e <bt_gatt_notification+0x4a>
   3991c:	462c      	mov	r4, r5
   3991e:	e00e      	b.n	3993e <bt_gatt_notification+0x4a>
   39920:	462c      	mov	r4, r5
   39922:	e00c      	b.n	3993e <bt_gatt_notification+0x4a>
			bt_gatt_unsubscribe(conn, params);
   39924:	4629      	mov	r1, r5
   39926:	4640      	mov	r0, r8
   39928:	f7ff ff61 	bl	397ee <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3992c:	b1a4      	cbz	r4, 39958 <bt_gatt_notification+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3992e:	f114 0614 	adds.w	r6, r4, #20
   39932:	d002      	beq.n	3993a <bt_gatt_notification+0x46>
	return node->next;
   39934:	6966      	ldr	r6, [r4, #20]
   39936:	b106      	cbz	r6, 3993a <bt_gatt_notification+0x46>
   39938:	3e14      	subs	r6, #20
   3993a:	4625      	mov	r5, r4
   3993c:	4634      	mov	r4, r6
   3993e:	b16d      	cbz	r5, 3995c <bt_gatt_notification+0x68>
		if (handle != params->value_handle) {
   39940:	892b      	ldrh	r3, [r5, #8]
   39942:	429f      	cmp	r7, r3
   39944:	d1f2      	bne.n	3992c <bt_gatt_notification+0x38>
		if (params->notify(conn, params, data, length) ==
   39946:	682e      	ldr	r6, [r5, #0]
   39948:	4653      	mov	r3, sl
   3994a:	464a      	mov	r2, r9
   3994c:	4629      	mov	r1, r5
   3994e:	4640      	mov	r0, r8
   39950:	47b0      	blx	r6
   39952:	2800      	cmp	r0, #0
   39954:	d1ea      	bne.n	3992c <bt_gatt_notification+0x38>
   39956:	e7e5      	b.n	39924 <bt_gatt_notification+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   39958:	4626      	mov	r6, r4
   3995a:	e7ee      	b.n	3993a <bt_gatt_notification+0x46>
}
   3995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00039960 <bt_gatt_change_aware>:
{
   39960:	b510      	push	{r4, lr}
   39962:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   39964:	f7ef fbbc 	bl	290e0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   39968:	2800      	cmp	r0, #0
   3996a:	d042      	beq.n	399f2 <bt_gatt_change_aware+0x92>
   3996c:	7a02      	ldrb	r2, [r0, #8]
   3996e:	f012 0f01 	tst.w	r2, #1
   39972:	d101      	bne.n	39978 <bt_gatt_change_aware+0x18>
		return true;
   39974:	2001      	movs	r0, #1
}
   39976:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   39978:	f100 010c 	add.w	r1, r0, #12
   3997c:	f3bf 8f5b 	dmb	ish
   39980:	68c2      	ldr	r2, [r0, #12]
   39982:	f3bf 8f5b 	dmb	ish
   39986:	f012 0f01 	tst.w	r2, #1
   3998a:	d134      	bne.n	399f6 <bt_gatt_change_aware+0x96>
	if (!req) {
   3998c:	b90c      	cbnz	r4, 39992 <bt_gatt_change_aware+0x32>
		return false;
   3998e:	4620      	mov	r0, r4
   39990:	e7f1      	b.n	39976 <bt_gatt_change_aware+0x16>
   39992:	f3bf 8f5b 	dmb	ish
   39996:	68c3      	ldr	r3, [r0, #12]
   39998:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   3999c:	f013 0f02 	tst.w	r3, #2
   399a0:	d10d      	bne.n	399be <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   399a2:	f3bf 8f5b 	dmb	ish
   399a6:	e851 3f00 	ldrex	r3, [r1]
   399aa:	f043 0302 	orr.w	r3, r3, #2
   399ae:	e841 3200 	strex	r2, r3, [r1]
   399b2:	2a00      	cmp	r2, #0
   399b4:	d1f7      	bne.n	399a6 <bt_gatt_change_aware+0x46>
   399b6:	f3bf 8f5b 	dmb	ish
	return false;
   399ba:	2000      	movs	r0, #0
   399bc:	e7db      	b.n	39976 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   399be:	f3bf 8f5b 	dmb	ish
   399c2:	e851 3f00 	ldrex	r3, [r1]
   399c6:	f023 0302 	bic.w	r3, r3, #2
   399ca:	e841 3200 	strex	r2, r3, [r1]
   399ce:	2a00      	cmp	r2, #0
   399d0:	d1f7      	bne.n	399c2 <bt_gatt_change_aware+0x62>
   399d2:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   399d6:	f3bf 8f5b 	dmb	ish
   399da:	e851 3f00 	ldrex	r3, [r1]
   399de:	f043 0301 	orr.w	r3, r3, #1
   399e2:	e841 3200 	strex	r2, r3, [r1]
   399e6:	2a00      	cmp	r2, #0
   399e8:	d1f7      	bne.n	399da <bt_gatt_change_aware+0x7a>
   399ea:	f3bf 8f5b 	dmb	ish
		return true;
   399ee:	4620      	mov	r0, r4
   399f0:	e7c1      	b.n	39976 <bt_gatt_change_aware+0x16>
		return true;
   399f2:	2001      	movs	r0, #1
   399f4:	e7bf      	b.n	39976 <bt_gatt_change_aware+0x16>
		return true;
   399f6:	2001      	movs	r0, #1
   399f8:	e7bd      	b.n	39976 <bt_gatt_change_aware+0x16>

000399fa <security_err_get>:
	switch (smp_err) {
   399fa:	3801      	subs	r0, #1
   399fc:	280e      	cmp	r0, #14
   399fe:	d815      	bhi.n	39a2c <security_err_get+0x32>
   39a00:	e8df f000 	tbb	[pc, r0]
   39a04:	080a1608 	.word	0x080a1608
   39a08:	140c0a0c 	.word	0x140c0a0c
   39a0c:	0808100e 	.word	0x0808100e
   39a10:	0e0e      	.short	0x0e0e
   39a12:	12          	.byte	0x12
   39a13:	00          	.byte	0x00
		return BT_SECURITY_ERR_KEY_REJECTED;
   39a14:	2001      	movs	r0, #1
   39a16:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_REQUIREMENT;
   39a18:	2004      	movs	r0, #4
   39a1a:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   39a1c:	2005      	movs	r0, #5
   39a1e:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   39a20:	2006      	movs	r0, #6
   39a22:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   39a24:	2007      	movs	r0, #7
   39a26:	4770      	bx	lr
		return BT_SECURITY_ERR_KEY_REJECTED;
   39a28:	2008      	movs	r0, #8
   39a2a:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   39a2c:	2009      	movs	r0, #9
   39a2e:	4770      	bx	lr
		return BT_SECURITY_ERR_OOB_NOT_AVAILABLE;
   39a30:	2003      	movs	r0, #3
}
   39a32:	4770      	bx	lr

00039a34 <smp_err_get>:
	switch (auth_err) {
   39a34:	1e43      	subs	r3, r0, #1
   39a36:	2b08      	cmp	r3, #8
   39a38:	d80c      	bhi.n	39a54 <smp_err_get+0x20>
   39a3a:	e8df f003 	tbb	[pc, r3]
   39a3e:	090d      	.short	0x090d
   39a40:	090e0d05 	.word	0x090e0d05
   39a44:	0b07      	.short	0x0b07
   39a46:	09          	.byte	0x09
   39a47:	00          	.byte	0x00
		return BT_SMP_ERR_UNSPECIFIED;
   39a48:	2002      	movs	r0, #2
   39a4a:	4770      	bx	lr
		return BT_SMP_ERR_INVALID_PARAMS;
   39a4c:	200a      	movs	r0, #10
   39a4e:	4770      	bx	lr
		return BT_SMP_ERR_UNSPECIFIED;
   39a50:	2008      	movs	r0, #8
   39a52:	4770      	bx	lr
		return 0;
   39a54:	2000      	movs	r0, #0
   39a56:	4770      	bx	lr
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   39a58:	2003      	movs	r0, #3
}
   39a5a:	4770      	bx	lr

00039a5c <get_encryption_key_size>:
{
   39a5c:	4603      	mov	r3, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   39a5e:	7d00      	ldrb	r0, [r0, #20]
   39a60:	7b5b      	ldrb	r3, [r3, #13]
}
   39a62:	4298      	cmp	r0, r3
   39a64:	bf28      	it	cs
   39a66:	4618      	movcs	r0, r3
   39a68:	4770      	bx	lr

00039a6a <hci_err_get>:
	switch (err) {
   39a6a:	2807      	cmp	r0, #7
   39a6c:	d80d      	bhi.n	39a8a <hci_err_get+0x20>
   39a6e:	e8df f000 	tbb	[pc, r0]
   39a72:	0e0f      	.short	0x0e0f
   39a74:	060c0c04 	.word	0x060c0c04
   39a78:	0a08      	.short	0x0a08
		return BT_HCI_ERR_PIN_OR_KEY_MISSING;
   39a7a:	2006      	movs	r0, #6
   39a7c:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_SUPPORTED;
   39a7e:	2029      	movs	r0, #41	; 0x29
   39a80:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_ALLOWED;
   39a82:	2018      	movs	r0, #24
   39a84:	4770      	bx	lr
		return BT_HCI_ERR_INVALID_PARAM;
   39a86:	2012      	movs	r0, #18
   39a88:	4770      	bx	lr
		return BT_HCI_ERR_UNSPECIFIED;
   39a8a:	201f      	movs	r0, #31
   39a8c:	4770      	bx	lr
		return BT_HCI_ERR_AUTH_FAIL;
   39a8e:	2005      	movs	r0, #5
}
   39a90:	4770      	bx	lr

00039a92 <xor_128>:
{
   39a92:	b430      	push	{r4, r5}
	size_t len = 16;
   39a94:	2310      	movs	r3, #16
	while (len--) {
   39a96:	1e5c      	subs	r4, r3, #1
   39a98:	b143      	cbz	r3, 39aac <xor_128+0x1a>
		*r++ = *p++ ^ *q++;
   39a9a:	f810 3b01 	ldrb.w	r3, [r0], #1
   39a9e:	f811 5b01 	ldrb.w	r5, [r1], #1
   39aa2:	406b      	eors	r3, r5
   39aa4:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   39aa8:	4623      	mov	r3, r4
   39aaa:	e7f4      	b.n	39a96 <xor_128+0x4>
}
   39aac:	bc30      	pop	{r4, r5}
   39aae:	4770      	bx	lr

00039ab0 <smp_pairing_req>:
}
   39ab0:	2007      	movs	r0, #7
   39ab2:	4770      	bx	lr

00039ab4 <le_sc_oob_data_req_check>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   39ab4:	7ac0      	ldrb	r0, [r0, #11]
}
   39ab6:	f000 0001 	and.w	r0, r0, #1
   39aba:	4770      	bx	lr

00039abc <le_sc_oob_data_rsp_check>:
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   39abc:	7c80      	ldrb	r0, [r0, #18]
}
   39abe:	f000 0001 	and.w	r0, r0, #1
   39ac2:	4770      	bx	lr

00039ac4 <le_sc_oob_config_set>:
{
   39ac4:	b570      	push	{r4, r5, r6, lr}
   39ac6:	4604      	mov	r4, r0
   39ac8:	460d      	mov	r5, r1
	bool req_oob_present = le_sc_oob_data_req_check(smp);
   39aca:	f7ff fff3 	bl	39ab4 <le_sc_oob_data_req_check>
   39ace:	4606      	mov	r6, r0
	bool rsp_oob_present = le_sc_oob_data_rsp_check(smp);
   39ad0:	4620      	mov	r0, r4
   39ad2:	f7ff fff3 	bl	39abc <le_sc_oob_data_rsp_check>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   39ad6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   39ada:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   39adc:	b953      	cbnz	r3, 39af4 <le_sc_oob_config_set+0x30>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   39ade:	b12e      	cbz	r6, 39aec <le_sc_oob_config_set+0x28>
   39ae0:	2301      	movs	r3, #1
		if (rsp_oob_present) {
   39ae2:	b140      	cbz	r0, 39af6 <le_sc_oob_config_set+0x32>
				     BT_CONN_OOB_BOTH_PEERS :
   39ae4:	2b01      	cmp	r3, #1
   39ae6:	d003      	beq.n	39af0 <le_sc_oob_config_set+0x2c>
   39ae8:	2300      	movs	r3, #0
   39aea:	e004      	b.n	39af6 <le_sc_oob_config_set+0x32>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   39aec:	2303      	movs	r3, #3
   39aee:	e7f8      	b.n	39ae2 <le_sc_oob_config_set+0x1e>
				     BT_CONN_OOB_BOTH_PEERS :
   39af0:	2302      	movs	r3, #2
   39af2:	e000      	b.n	39af6 <le_sc_oob_config_set+0x32>
	int oob_config = BT_CONN_OOB_NO_DATA;
   39af4:	2303      	movs	r3, #3
	info->lesc.oob_config = oob_config;
   39af6:	706b      	strb	r3, [r5, #1]
}
   39af8:	bd70      	pop	{r4, r5, r6, pc}

00039afa <smp_signing_info>:
}
   39afa:	2007      	movs	r0, #7
   39afc:	4770      	bx	lr

00039afe <smp_keypress_notif>:
   39afe:	f3bf 8f5b 	dmb	ish
   39b02:	e850 3f00 	ldrex	r3, [r0]
   39b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   39b0a:	e840 3200 	strex	r2, r3, [r0]
   39b0e:	2a00      	cmp	r2, #0
   39b10:	d1f7      	bne.n	39b02 <smp_keypress_notif+0x4>
   39b12:	f3bf 8f5b 	dmb	ish
}
   39b16:	2000      	movs	r0, #0
   39b18:	4770      	bx	lr

00039b1a <smp_keys_check>:
{
   39b1a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39b1c:	f3bf 8f5b 	dmb	ish
   39b20:	6843      	ldr	r3, [r0, #4]
   39b22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   39b26:	f413 6f00 	tst.w	r3, #2048	; 0x800
   39b2a:	d132      	bne.n	39b92 <smp_keys_check+0x78>
   39b2c:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   39b2e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   39b32:	b1db      	cbz	r3, 39b6c <smp_keys_check+0x52>
	if (!conn->le.keys ||
   39b34:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   39b38:	b36b      	cbz	r3, 39b96 <smp_keys_check+0x7c>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   39b3a:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   39b3c:	f012 0f24 	tst.w	r2, #36	; 0x24
   39b40:	d02b      	beq.n	39b9a <smp_keys_check+0x80>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   39b42:	7aa1      	ldrb	r1, [r4, #10]
   39b44:	2902      	cmp	r1, #2
   39b46:	d903      	bls.n	39b50 <smp_keys_check+0x36>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   39b48:	7b58      	ldrb	r0, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   39b4a:	f010 0f01 	tst.w	r0, #1
   39b4e:	d026      	beq.n	39b9e <smp_keys_check+0x84>
	if (conn->required_sec_level > BT_SECURITY_L3 &&
   39b50:	2903      	cmp	r1, #3
   39b52:	d926      	bls.n	39ba2 <smp_keys_check+0x88>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   39b54:	7b59      	ldrb	r1, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L3 &&
   39b56:	f011 0f01 	tst.w	r1, #1
   39b5a:	d124      	bne.n	39ba6 <smp_keys_check+0x8c>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   39b5c:	f012 0f20 	tst.w	r2, #32
   39b60:	d123      	bne.n	39baa <smp_keys_check+0x90>
	    !(conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE)) {
   39b62:	7b1b      	ldrb	r3, [r3, #12]
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   39b64:	2b10      	cmp	r3, #16
   39b66:	d122      	bne.n	39bae <smp_keys_check+0x94>
	return true;
   39b68:	2001      	movs	r0, #1
   39b6a:	e013      	b.n	39b94 <smp_keys_check+0x7a>
						     conn->id, &conn->le.dst);
   39b6c:	f100 0588 	add.w	r5, r0, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   39b70:	462a      	mov	r2, r5
   39b72:	7a01      	ldrb	r1, [r0, #8]
   39b74:	2020      	movs	r0, #32
   39b76:	f7f3 f803 	bl	2cb80 <bt_keys_find>
   39b7a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   39b7e:	2800      	cmp	r0, #0
   39b80:	d1d8      	bne.n	39b34 <smp_keys_check+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   39b82:	462a      	mov	r2, r5
   39b84:	7a21      	ldrb	r1, [r4, #8]
   39b86:	2004      	movs	r0, #4
   39b88:	f7f2 fffa 	bl	2cb80 <bt_keys_find>
   39b8c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
   39b90:	e7d0      	b.n	39b34 <smp_keys_check+0x1a>
		return false;
   39b92:	2000      	movs	r0, #0
}
   39b94:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   39b96:	2000      	movs	r0, #0
   39b98:	e7fc      	b.n	39b94 <smp_keys_check+0x7a>
   39b9a:	2000      	movs	r0, #0
   39b9c:	e7fa      	b.n	39b94 <smp_keys_check+0x7a>
		return false;
   39b9e:	2000      	movs	r0, #0
   39ba0:	e7f8      	b.n	39b94 <smp_keys_check+0x7a>
	return true;
   39ba2:	2001      	movs	r0, #1
   39ba4:	e7f6      	b.n	39b94 <smp_keys_check+0x7a>
   39ba6:	2001      	movs	r0, #1
   39ba8:	e7f4      	b.n	39b94 <smp_keys_check+0x7a>
   39baa:	2001      	movs	r0, #1
   39bac:	e7f2      	b.n	39b94 <smp_keys_check+0x7a>
		return false;
   39bae:	2000      	movs	r0, #0
   39bb0:	e7f0      	b.n	39b94 <smp_keys_check+0x7a>

00039bb2 <update_keys_check>:
	if (!keys ||
   39bb2:	b319      	cbz	r1, 39bfc <update_keys_check+0x4a>
{
   39bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39bb6:	4605      	mov	r5, r0
   39bb8:	460c      	mov	r4, r1
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   39bba:	89ce      	ldrh	r6, [r1, #14]
	if (!keys ||
   39bbc:	f016 0f24 	tst.w	r6, #36	; 0x24
   39bc0:	d01e      	beq.n	39c00 <update_keys_check+0x4e>
	if (keys->enc_size > get_encryption_key_size(smp)) {
   39bc2:	7b0f      	ldrb	r7, [r1, #12]
   39bc4:	f7ff ff4a 	bl	39a5c <get_encryption_key_size>
   39bc8:	4287      	cmp	r7, r0
   39bca:	d81b      	bhi.n	39c04 <update_keys_check+0x52>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   39bcc:	f016 0f20 	tst.w	r6, #32
   39bd0:	d10a      	bne.n	39be8 <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   39bd2:	7b63      	ldrb	r3, [r4, #13]
   39bd4:	f013 0301 	ands.w	r3, r3, #1
   39bd8:	d001      	beq.n	39bde <update_keys_check+0x2c>
	     smp->method == JUST_WORKS) {
   39bda:	7a2a      	ldrb	r2, [r5, #8]
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   39bdc:	b1a2      	cbz	r2, 39c08 <update_keys_check+0x56>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   39bde:	b9ab      	cbnz	r3, 39c0c <update_keys_check+0x5a>
	     && smp->method == JUST_WORKS)) {
   39be0:	7a2b      	ldrb	r3, [r5, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   39be2:	b1ab      	cbz	r3, 39c10 <update_keys_check+0x5e>
	return true;
   39be4:	2001      	movs	r0, #1
   39be6:	e00c      	b.n	39c02 <update_keys_check+0x50>
   39be8:	f3bf 8f5b 	dmb	ish
   39bec:	686b      	ldr	r3, [r5, #4]
   39bee:	f3bf 8f5b 	dmb	ish
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   39bf2:	f013 0f20 	tst.w	r3, #32
   39bf6:	d1ec      	bne.n	39bd2 <update_keys_check+0x20>
		return false;
   39bf8:	2000      	movs	r0, #0
   39bfa:	e002      	b.n	39c02 <update_keys_check+0x50>
		return true;
   39bfc:	2001      	movs	r0, #1
}
   39bfe:	4770      	bx	lr
		return true;
   39c00:	2001      	movs	r0, #1
}
   39c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   39c04:	2000      	movs	r0, #0
   39c06:	e7fc      	b.n	39c02 <update_keys_check+0x50>
		return false;
   39c08:	2000      	movs	r0, #0
   39c0a:	e7fa      	b.n	39c02 <update_keys_check+0x50>
	return true;
   39c0c:	2001      	movs	r0, #1
   39c0e:	e7f8      	b.n	39c02 <update_keys_check+0x50>
		return false;
   39c10:	2000      	movs	r0, #0
   39c12:	e7f6      	b.n	39c02 <update_keys_check+0x50>

00039c14 <remote_sec_level_reachable>:
{
   39c14:	b510      	push	{r4, lr}
   39c16:	4604      	mov	r4, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   39c18:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   39c1c:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   39c1e:	2b03      	cmp	r3, #3
   39c20:	d018      	beq.n	39c54 <remote_sec_level_reachable+0x40>
   39c22:	d807      	bhi.n	39c34 <remote_sec_level_reachable+0x20>
   39c24:	3b01      	subs	r3, #1
   39c26:	b2db      	uxtb	r3, r3
   39c28:	2b01      	cmp	r3, #1
   39c2a:	d801      	bhi.n	39c30 <remote_sec_level_reachable+0x1c>
   39c2c:	2000      	movs	r0, #0
}
   39c2e:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   39c30:	2008      	movs	r0, #8
   39c32:	e7fc      	b.n	39c2e <remote_sec_level_reachable+0x1a>
	switch (sec) {
   39c34:	2b04      	cmp	r3, #4
   39c36:	d111      	bne.n	39c5c <remote_sec_level_reachable+0x48>
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   39c38:	f7ff ff10 	bl	39a5c <get_encryption_key_size>
   39c3c:	2810      	cmp	r0, #16
   39c3e:	d001      	beq.n	39c44 <remote_sec_level_reachable+0x30>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   39c40:	2006      	movs	r0, #6
   39c42:	e7f4      	b.n	39c2e <remote_sec_level_reachable+0x1a>
   39c44:	f3bf 8f5b 	dmb	ish
   39c48:	6863      	ldr	r3, [r4, #4]
   39c4a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   39c4e:	f013 0f20 	tst.w	r3, #32
   39c52:	d005      	beq.n	39c60 <remote_sec_level_reachable+0x4c>
		if (smp->method == JUST_WORKS) {
   39c54:	7a23      	ldrb	r3, [r4, #8]
   39c56:	b12b      	cbz	r3, 39c64 <remote_sec_level_reachable+0x50>
		return 0;
   39c58:	2000      	movs	r0, #0
   39c5a:	e7e8      	b.n	39c2e <remote_sec_level_reachable+0x1a>
		return BT_SMP_ERR_UNSPECIFIED;
   39c5c:	2008      	movs	r0, #8
   39c5e:	e7e6      	b.n	39c2e <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   39c60:	2003      	movs	r0, #3
   39c62:	e7e4      	b.n	39c2e <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   39c64:	2003      	movs	r0, #3
   39c66:	e7e2      	b.n	39c2e <remote_sec_level_reachable+0x1a>

00039c68 <smp_reset>:
{
   39c68:	b570      	push	{r4, r5, r6, lr}
   39c6a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   39c6c:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	atomic_set(smp->flags, 0);
   39c70:	1d03      	adds	r3, r0, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   39c72:	2500      	movs	r5, #0
   39c74:	f3bf 8f5b 	dmb	ish
   39c78:	e853 2f00 	ldrex	r2, [r3]
   39c7c:	e843 5100 	strex	r1, r5, [r3]
   39c80:	2900      	cmp	r1, #0
   39c82:	d1f9      	bne.n	39c78 <smp_reset+0x10>
   39c84:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   39c88:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   39c8c:	f002 fcaa 	bl	3c5e4 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   39c90:	7225      	strb	r5, [r4, #8]
   39c92:	f3bf 8f5b 	dmb	ish
   39c96:	e854 3f00 	ldrex	r3, [r4]
   39c9a:	e844 5200 	strex	r2, r5, [r4]
   39c9e:	2a00      	cmp	r2, #0
   39ca0:	d1f9      	bne.n	39c96 <smp_reset+0x2e>
   39ca2:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   39ca6:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   39ca8:	b103      	cbz	r3, 39cac <smp_reset+0x44>
}
   39caa:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   39cac:	f3bf 8f5b 	dmb	ish
   39cb0:	e854 3f00 	ldrex	r3, [r4]
   39cb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   39cb8:	e844 3200 	strex	r2, r3, [r4]
   39cbc:	2a00      	cmp	r2, #0
   39cbe:	d1f7      	bne.n	39cb0 <smp_reset+0x48>
   39cc0:	f3bf 8f5b 	dmb	ish
		return;
   39cc4:	e7f1      	b.n	39caa <smp_reset+0x42>

00039cc6 <smp_c1>:
{
   39cc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39cca:	b089      	sub	sp, #36	; 0x24
   39ccc:	4605      	mov	r5, r0
   39cce:	460e      	mov	r6, r1
   39cd0:	4611      	mov	r1, r2
   39cd2:	461f      	mov	r7, r3
   39cd4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   39cd8:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   39cdc:	9c12      	ldr	r4, [sp, #72]	; 0x48
	p1[0] = ia->type;
   39cde:	f898 3000 	ldrb.w	r3, [r8]
   39ce2:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
   39ce6:	f899 3000 	ldrb.w	r3, [r9]
   39cea:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
   39cee:	2207      	movs	r2, #7
   39cf0:	f10d 0012 	add.w	r0, sp, #18
   39cf4:	f7fd f836 	bl	36d64 <memcpy>
	memcpy(p1 + 9, pres, 7);
   39cf8:	2207      	movs	r2, #7
   39cfa:	4639      	mov	r1, r7
   39cfc:	f10d 0019 	add.w	r0, sp, #25
   39d00:	f7fd f830 	bl	36d64 <memcpy>
	xor_128(r, p1, enc_data);
   39d04:	4622      	mov	r2, r4
   39d06:	a904      	add	r1, sp, #16
   39d08:	4630      	mov	r0, r6
   39d0a:	f7ff fec2 	bl	39a92 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
   39d0e:	4622      	mov	r2, r4
   39d10:	4621      	mov	r1, r4
   39d12:	4628      	mov	r0, r5
   39d14:	f002 f871 	bl	3bdfa <bt_encrypt_le>
	if (err) {
   39d18:	b110      	cbz	r0, 39d20 <smp_c1+0x5a>
}
   39d1a:	b009      	add	sp, #36	; 0x24
   39d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(p2, ra->a.val, 6);
   39d20:	2206      	movs	r2, #6
   39d22:	f109 0101 	add.w	r1, r9, #1
   39d26:	4668      	mov	r0, sp
   39d28:	f7fd f81c 	bl	36d64 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   39d2c:	2206      	movs	r2, #6
   39d2e:	f108 0101 	add.w	r1, r8, #1
   39d32:	eb0d 0002 	add.w	r0, sp, r2
   39d36:	f7fd f815 	bl	36d64 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   39d3a:	2204      	movs	r2, #4
   39d3c:	2100      	movs	r1, #0
   39d3e:	a803      	add	r0, sp, #12
   39d40:	f7fd f834 	bl	36dac <memset>
	xor_128(enc_data, p2, enc_data);
   39d44:	4622      	mov	r2, r4
   39d46:	4669      	mov	r1, sp
   39d48:	4620      	mov	r0, r4
   39d4a:	f7ff fea2 	bl	39a92 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
   39d4e:	4622      	mov	r2, r4
   39d50:	4621      	mov	r1, r4
   39d52:	4628      	mov	r0, r5
   39d54:	f002 f851 	bl	3bdfa <bt_encrypt_le>
   39d58:	e7df      	b.n	39d1a <smp_c1+0x54>

00039d5a <smp_s1>:
{
   39d5a:	b570      	push	{r4, r5, r6, lr}
   39d5c:	4605      	mov	r5, r0
   39d5e:	460e      	mov	r6, r1
   39d60:	4611      	mov	r1, r2
   39d62:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
   39d64:	2208      	movs	r2, #8
   39d66:	4618      	mov	r0, r3
   39d68:	f7fc fffc 	bl	36d64 <memcpy>
	memcpy(out + 8, r1, 8);
   39d6c:	2208      	movs	r2, #8
   39d6e:	4631      	mov	r1, r6
   39d70:	18a0      	adds	r0, r4, r2
   39d72:	f7fc fff7 	bl	36d64 <memcpy>
	return bt_encrypt_le(k, out, out);
   39d76:	4622      	mov	r2, r4
   39d78:	4621      	mov	r1, r4
   39d7a:	4628      	mov	r0, r5
   39d7c:	f002 f83d 	bl	3bdfa <bt_encrypt_le>
}
   39d80:	bd70      	pop	{r4, r5, r6, pc}

00039d82 <smp_create_pdu>:
{
   39d82:	b570      	push	{r4, r5, r6, lr}
   39d84:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   39d86:	1d06      	adds	r6, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39d88:	f3bf 8f5b 	dmb	ish
   39d8c:	6843      	ldr	r3, [r0, #4]
   39d8e:	f3bf 8f5b 	dmb	ish
   39d92:	f013 0f10 	tst.w	r3, #16
   39d96:	d00e      	beq.n	39db6 <smp_create_pdu+0x34>
		timeout = K_NO_WAIT;
   39d98:	2200      	movs	r2, #0
   39d9a:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   39d9c:	2100      	movs	r1, #0
   39d9e:	4608      	mov	r0, r1
   39da0:	f7fd ff50 	bl	37c44 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   39da4:	4604      	mov	r4, r0
   39da6:	b150      	cbz	r0, 39dbe <smp_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   39da8:	2101      	movs	r1, #1
   39daa:	3008      	adds	r0, #8
   39dac:	f000 fe81 	bl	3aab2 <net_buf_simple_add>
	hdr->code = op;
   39db0:	7005      	strb	r5, [r0, #0]
}
   39db2:	4620      	mov	r0, r4
   39db4:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   39db6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   39dba:	2300      	movs	r3, #0
   39dbc:	e7ee      	b.n	39d9c <smp_create_pdu+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   39dbe:	f3bf 8f5b 	dmb	ish
   39dc2:	e856 3f00 	ldrex	r3, [r6]
   39dc6:	f043 0310 	orr.w	r3, r3, #16
   39dca:	e846 3200 	strex	r2, r3, [r6]
   39dce:	2a00      	cmp	r2, #0
   39dd0:	d1f7      	bne.n	39dc2 <smp_create_pdu+0x40>
   39dd2:	f3bf 8f5b 	dmb	ish
		return NULL;
   39dd6:	e7ec      	b.n	39db2 <smp_create_pdu+0x30>

00039dd8 <smp_send>:
{
   39dd8:	b530      	push	{r4, r5, lr}
   39dda:	b083      	sub	sp, #12
   39ddc:	4604      	mov	r4, r0
   39dde:	460d      	mov	r5, r1
   39de0:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   39de2:	2200      	movs	r2, #0
   39de4:	9200      	str	r2, [sp, #0]
   39de6:	460a      	mov	r2, r1
   39de8:	2106      	movs	r1, #6
   39dea:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   39dee:	f7fd ff2e 	bl	37c4e <bt_l2cap_send_cb>
   39df2:	b940      	cbnz	r0, 39e06 <smp_send+0x2e>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   39df4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   39df8:	2300      	movs	r3, #0
   39dfa:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   39dfe:	f7f6 fc71 	bl	306e4 <k_work_reschedule>
}
   39e02:	b003      	add	sp, #12
   39e04:	bd30      	pop	{r4, r5, pc}
		net_buf_unref(buf);
   39e06:	4628      	mov	r0, r5
   39e08:	f000 fe09 	bl	3aa1e <net_buf_unref>
		return;
   39e0c:	e7f9      	b.n	39e02 <smp_send+0x2a>

00039e0e <legacy_send_pairing_confirm>:
{
   39e0e:	b570      	push	{r4, r5, r6, lr}
   39e10:	b084      	sub	sp, #16
   39e12:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   39e14:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   39e18:	2210      	movs	r2, #16
   39e1a:	2103      	movs	r1, #3
   39e1c:	f7ff ffb1 	bl	39d82 <smp_create_pdu>
	if (!buf) {
   39e20:	b380      	cbz	r0, 39e84 <legacy_send_pairing_confirm+0x76>
   39e22:	4606      	mov	r6, r0
   39e24:	2110      	movs	r1, #16
   39e26:	3008      	adds	r0, #8
   39e28:	f000 fe43 	bl	3aab2 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   39e2c:	f105 038f 	add.w	r3, r5, #143	; 0x8f
   39e30:	3596      	adds	r5, #150	; 0x96
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   39e32:	9002      	str	r0, [sp, #8]
   39e34:	9501      	str	r5, [sp, #4]
   39e36:	9300      	str	r3, [sp, #0]
   39e38:	f104 0310 	add.w	r3, r4, #16
   39e3c:	f104 0209 	add.w	r2, r4, #9
   39e40:	f104 0127 	add.w	r1, r4, #39	; 0x27
   39e44:	f104 0047 	add.w	r0, r4, #71	; 0x47
   39e48:	f7ff ff3d 	bl	39cc6 <smp_c1>
   39e4c:	b9a8      	cbnz	r0, 39e7a <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL, NULL);
   39e4e:	2300      	movs	r3, #0
   39e50:	461a      	mov	r2, r3
   39e52:	4631      	mov	r1, r6
   39e54:	4620      	mov	r0, r4
   39e56:	f7ff ffbf 	bl	39dd8 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   39e5a:	3404      	adds	r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   39e5c:	f3bf 8f5b 	dmb	ish
   39e60:	e854 3f00 	ldrex	r3, [r4]
   39e64:	f023 0301 	bic.w	r3, r3, #1
   39e68:	e844 3200 	strex	r2, r3, [r4]
   39e6c:	2a00      	cmp	r2, #0
   39e6e:	d1f7      	bne.n	39e60 <legacy_send_pairing_confirm+0x52>
   39e70:	f3bf 8f5b 	dmb	ish
	return 0;
   39e74:	2000      	movs	r0, #0
}
   39e76:	b004      	add	sp, #16
   39e78:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   39e7a:	4630      	mov	r0, r6
   39e7c:	f000 fdcf 	bl	3aa1e <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   39e80:	2008      	movs	r0, #8
   39e82:	e7f8      	b.n	39e76 <legacy_send_pairing_confirm+0x68>
		return BT_SMP_ERR_UNSPECIFIED;
   39e84:	2008      	movs	r0, #8
   39e86:	e7f6      	b.n	39e76 <legacy_send_pairing_confirm+0x68>

00039e88 <sc_smp_send_dhkey_check>:
{
   39e88:	b570      	push	{r4, r5, r6, lr}
   39e8a:	4604      	mov	r4, r0
   39e8c:	460d      	mov	r5, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   39e8e:	2210      	movs	r2, #16
   39e90:	210d      	movs	r1, #13
   39e92:	f7ff ff76 	bl	39d82 <smp_create_pdu>
	if (!buf) {
   39e96:	b180      	cbz	r0, 39eba <sc_smp_send_dhkey_check+0x32>
   39e98:	4606      	mov	r6, r0
   39e9a:	2110      	movs	r1, #16
   39e9c:	3008      	adds	r0, #8
   39e9e:	f000 fe08 	bl	3aab2 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   39ea2:	2210      	movs	r2, #16
   39ea4:	4629      	mov	r1, r5
   39ea6:	f7fc ff5d 	bl	36d64 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   39eaa:	2300      	movs	r3, #0
   39eac:	461a      	mov	r2, r3
   39eae:	4631      	mov	r1, r6
   39eb0:	4620      	mov	r0, r4
   39eb2:	f7ff ff91 	bl	39dd8 <smp_send>
	return 0;
   39eb6:	2000      	movs	r0, #0
}
   39eb8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   39eba:	2008      	movs	r0, #8
   39ebc:	e7fc      	b.n	39eb8 <sc_smp_send_dhkey_check+0x30>

00039ebe <smp_send_pairing_random>:
{
   39ebe:	b538      	push	{r3, r4, r5, lr}
   39ec0:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   39ec2:	2210      	movs	r2, #16
   39ec4:	2104      	movs	r1, #4
   39ec6:	f7ff ff5c 	bl	39d82 <smp_create_pdu>
	if (!rsp_buf) {
   39eca:	b188      	cbz	r0, 39ef0 <smp_send_pairing_random+0x32>
   39ecc:	4605      	mov	r5, r0
   39ece:	2110      	movs	r1, #16
   39ed0:	3008      	adds	r0, #8
   39ed2:	f000 fdee 	bl	3aab2 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   39ed6:	2210      	movs	r2, #16
   39ed8:	f104 0127 	add.w	r1, r4, #39	; 0x27
   39edc:	f7fc ff42 	bl	36d64 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   39ee0:	2300      	movs	r3, #0
   39ee2:	461a      	mov	r2, r3
   39ee4:	4629      	mov	r1, r5
   39ee6:	4620      	mov	r0, r4
   39ee8:	f7ff ff76 	bl	39dd8 <smp_send>
	return 0;
   39eec:	2000      	movs	r0, #0
}
   39eee:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   39ef0:	2008      	movs	r0, #8
   39ef2:	e7fc      	b.n	39eee <smp_send_pairing_random+0x30>

00039ef4 <smp_pairing_confirm>:
{
   39ef4:	b510      	push	{r4, lr}
   39ef6:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   39ef8:	6889      	ldr	r1, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   39efa:	1d03      	adds	r3, r0, #4
   39efc:	f3bf 8f5b 	dmb	ish
   39f00:	e853 2f00 	ldrex	r2, [r3]
   39f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   39f08:	e843 2000 	strex	r0, r2, [r3]
   39f0c:	2800      	cmp	r0, #0
   39f0e:	d1f7      	bne.n	39f00 <smp_pairing_confirm+0xc>
   39f10:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   39f14:	2210      	movs	r2, #16
   39f16:	f104 0017 	add.w	r0, r4, #23
   39f1a:	f7fc ff23 	bl	36d64 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   39f1e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   39f22:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   39f24:	b10b      	cbz	r3, 39f2a <smp_pairing_confirm+0x36>
		return 0;
   39f26:	2000      	movs	r0, #0
   39f28:	e00e      	b.n	39f48 <smp_pairing_confirm+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   39f2a:	f3bf 8f5b 	dmb	ish
   39f2e:	e854 3f00 	ldrex	r3, [r4]
   39f32:	f043 0310 	orr.w	r3, r3, #16
   39f36:	e844 3200 	strex	r2, r3, [r4]
   39f3a:	2a00      	cmp	r2, #0
   39f3c:	d1f7      	bne.n	39f2e <smp_pairing_confirm+0x3a>
   39f3e:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
   39f42:	4620      	mov	r0, r4
   39f44:	f7ff ffbb 	bl	39ebe <smp_send_pairing_random>
}
   39f48:	bd10      	pop	{r4, pc}

00039f4a <bt_smp_aes_cmac>:
{
   39f4a:	b570      	push	{r4, r5, r6, lr}
   39f4c:	b0c2      	sub	sp, #264	; 0x108
   39f4e:	460c      	mov	r4, r1
   39f50:	4615      	mov	r5, r2
   39f52:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   39f54:	aa16      	add	r2, sp, #88	; 0x58
   39f56:	4601      	mov	r1, r0
   39f58:	4668      	mov	r0, sp
   39f5a:	f7fc fd47 	bl	369ec <tc_cmac_setup>
   39f5e:	b168      	cbz	r0, 39f7c <bt_smp_aes_cmac+0x32>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   39f60:	462a      	mov	r2, r5
   39f62:	4621      	mov	r1, r4
   39f64:	4668      	mov	r0, sp
   39f66:	f7fc fd6e 	bl	36a46 <tc_cmac_update>
   39f6a:	b150      	cbz	r0, 39f82 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   39f6c:	4669      	mov	r1, sp
   39f6e:	4630      	mov	r0, r6
   39f70:	f7fc fdd7 	bl	36b22 <tc_cmac_final>
   39f74:	b140      	cbz	r0, 39f88 <bt_smp_aes_cmac+0x3e>
	return 0;
   39f76:	2000      	movs	r0, #0
}
   39f78:	b042      	add	sp, #264	; 0x108
   39f7a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   39f7c:	f06f 0004 	mvn.w	r0, #4
   39f80:	e7fa      	b.n	39f78 <bt_smp_aes_cmac+0x2e>
		return -EIO;
   39f82:	f06f 0004 	mvn.w	r0, #4
   39f86:	e7f7      	b.n	39f78 <bt_smp_aes_cmac+0x2e>
		return -EIO;
   39f88:	f06f 0004 	mvn.w	r0, #4
   39f8c:	e7f4      	b.n	39f78 <bt_smp_aes_cmac+0x2e>

00039f8e <smp_f4>:
{
   39f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   39f90:	b097      	sub	sp, #92	; 0x5c
   39f92:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	psrc += length - 1;
   39f94:	301f      	adds	r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   39f96:	ac01      	add	r4, sp, #4
	for (; length > 0; length--) {
   39f98:	2620      	movs	r6, #32
   39f9a:	b12e      	cbz	r6, 39fa8 <smp_f4+0x1a>
		*pdst++ = *psrc--;
   39f9c:	f810 7901 	ldrb.w	r7, [r0], #-1
   39fa0:	f804 7b01 	strb.w	r7, [r4], #1
	for (; length > 0; length--) {
   39fa4:	3e01      	subs	r6, #1
   39fa6:	e7f8      	b.n	39f9a <smp_f4+0xc>
	psrc += length - 1;
   39fa8:	311f      	adds	r1, #31
	uint8_t *pdst = (uint8_t *)dst;
   39faa:	a809      	add	r0, sp, #36	; 0x24
	for (; length > 0; length--) {
   39fac:	2420      	movs	r4, #32
   39fae:	b12c      	cbz	r4, 39fbc <smp_f4+0x2e>
		*pdst++ = *psrc--;
   39fb0:	f811 6901 	ldrb.w	r6, [r1], #-1
   39fb4:	f800 6b01 	strb.w	r6, [r0], #1
	for (; length > 0; length--) {
   39fb8:	3c01      	subs	r4, #1
   39fba:	e7f8      	b.n	39fae <smp_f4+0x20>
	m[64] = z;
   39fbc:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	psrc += length - 1;
   39fc0:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
   39fc2:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
   39fc4:	2410      	movs	r4, #16
   39fc6:	e004      	b.n	39fd2 <smp_f4+0x44>
		*pdst++ = *psrc--;
   39fc8:	f812 1901 	ldrb.w	r1, [r2], #-1
   39fcc:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   39fd0:	3c01      	subs	r4, #1
   39fd2:	2c00      	cmp	r4, #0
   39fd4:	d1f8      	bne.n	39fc8 <smp_f4+0x3a>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   39fd6:	462b      	mov	r3, r5
   39fd8:	2241      	movs	r2, #65	; 0x41
   39fda:	a901      	add	r1, sp, #4
   39fdc:	a812      	add	r0, sp, #72	; 0x48
   39fde:	f7ff ffb4 	bl	39f4a <bt_smp_aes_cmac>
	if (err) {
   39fe2:	b948      	cbnz	r0, 39ff8 <smp_f4+0x6a>
	for (i = 0; i < (length/2); i++) {
   39fe4:	2c07      	cmp	r4, #7
   39fe6:	d807      	bhi.n	39ff8 <smp_f4+0x6a>
		uint8_t tmp = ((uint8_t *)buf)[i];
   39fe8:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   39fea:	f1c4 030f 	rsb	r3, r4, #15
   39fee:	5ce9      	ldrb	r1, [r5, r3]
   39ff0:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   39ff2:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
   39ff4:	3401      	adds	r4, #1
   39ff6:	e7f5      	b.n	39fe4 <smp_f4+0x56>
}
   39ff8:	b017      	add	sp, #92	; 0x5c
   39ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00039ffc <smp_f6>:
{
   39ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   39ffe:	b097      	sub	sp, #92	; 0x5c
   3a000:	4606      	mov	r6, r0
   3a002:	9f1d      	ldr	r7, [sp, #116]	; 0x74
   3a004:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
	psrc += length - 1;
   3a006:	310f      	adds	r1, #15
	uint8_t *pdst = (uint8_t *)dst;
   3a008:	a801      	add	r0, sp, #4
	for (; length > 0; length--) {
   3a00a:	2410      	movs	r4, #16
   3a00c:	b12c      	cbz	r4, 3a01a <smp_f6+0x1e>
		*pdst++ = *psrc--;
   3a00e:	f811 e901 	ldrb.w	lr, [r1], #-1
   3a012:	f800 eb01 	strb.w	lr, [r0], #1
	for (; length > 0; length--) {
   3a016:	3c01      	subs	r4, #1
   3a018:	e7f8      	b.n	3a00c <smp_f6+0x10>
	psrc += length - 1;
   3a01a:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
   3a01c:	a905      	add	r1, sp, #20
	for (; length > 0; length--) {
   3a01e:	2010      	movs	r0, #16
   3a020:	b128      	cbz	r0, 3a02e <smp_f6+0x32>
		*pdst++ = *psrc--;
   3a022:	f812 c901 	ldrb.w	ip, [r2], #-1
   3a026:	f801 cb01 	strb.w	ip, [r1], #1
	for (; length > 0; length--) {
   3a02a:	3801      	subs	r0, #1
   3a02c:	e7f8      	b.n	3a020 <smp_f6+0x24>
	psrc += length - 1;
   3a02e:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
   3a030:	aa09      	add	r2, sp, #36	; 0x24
	for (; length > 0; length--) {
   3a032:	2110      	movs	r1, #16
   3a034:	e004      	b.n	3a040 <smp_f6+0x44>
		*pdst++ = *psrc--;
   3a036:	f813 0901 	ldrb.w	r0, [r3], #-1
   3a03a:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   3a03e:	3901      	subs	r1, #1
   3a040:	2900      	cmp	r1, #0
   3a042:	d1f8      	bne.n	3a036 <smp_f6+0x3a>
	psrc += length - 1;
   3a044:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   3a046:	3302      	adds	r3, #2
	uint8_t *pdst = (uint8_t *)dst;
   3a048:	aa0d      	add	r2, sp, #52	; 0x34
	for (; length > 0; length--) {
   3a04a:	2103      	movs	r1, #3
   3a04c:	e004      	b.n	3a058 <smp_f6+0x5c>
		*pdst++ = *psrc--;
   3a04e:	f813 0901 	ldrb.w	r0, [r3], #-1
   3a052:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   3a056:	3901      	subs	r1, #1
   3a058:	2900      	cmp	r1, #0
   3a05a:	d1f8      	bne.n	3a04e <smp_f6+0x52>
	m[51] = a1->type;
   3a05c:	4639      	mov	r1, r7
   3a05e:	f811 3b01 	ldrb.w	r3, [r1], #1
   3a062:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
   3a066:	2206      	movs	r2, #6
   3a068:	a80e      	add	r0, sp, #56	; 0x38
   3a06a:	f7fc fe7b 	bl	36d64 <memcpy>
	psrc += length - 1;
   3a06e:	1dbb      	adds	r3, r7, #6
	uint8_t *pdst = (uint8_t *)dst;
   3a070:	aa0e      	add	r2, sp, #56	; 0x38
	for (; length > 0; length--) {
   3a072:	2106      	movs	r1, #6
   3a074:	b129      	cbz	r1, 3a082 <smp_f6+0x86>
		*pdst++ = *psrc--;
   3a076:	f813 0901 	ldrb.w	r0, [r3], #-1
   3a07a:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   3a07e:	3901      	subs	r1, #1
   3a080:	e7f8      	b.n	3a074 <smp_f6+0x78>
	m[58] = a2->type;
   3a082:	991e      	ldr	r1, [sp, #120]	; 0x78
   3a084:	f811 3b01 	ldrb.w	r3, [r1], #1
   3a088:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
   3a08c:	2206      	movs	r2, #6
   3a08e:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   3a092:	f7fc fe67 	bl	36d64 <memcpy>
	psrc += length - 1;
   3a096:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3a098:	3306      	adds	r3, #6
	uint8_t *pdst = (uint8_t *)dst;
   3a09a:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
	for (; length > 0; length--) {
   3a09e:	2106      	movs	r1, #6
   3a0a0:	e004      	b.n	3a0ac <smp_f6+0xb0>
		*pdst++ = *psrc--;
   3a0a2:	f813 0901 	ldrb.w	r0, [r3], #-1
   3a0a6:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   3a0aa:	3901      	subs	r1, #1
   3a0ac:	2900      	cmp	r1, #0
   3a0ae:	d1f8      	bne.n	3a0a2 <smp_f6+0xa6>
	psrc += length - 1;
   3a0b0:	f106 000f 	add.w	r0, r6, #15
	uint8_t *pdst = (uint8_t *)dst;
   3a0b4:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
   3a0b6:	2410      	movs	r4, #16
   3a0b8:	e004      	b.n	3a0c4 <smp_f6+0xc8>
		*pdst++ = *psrc--;
   3a0ba:	f810 2901 	ldrb.w	r2, [r0], #-1
   3a0be:	f803 2b01 	strb.w	r2, [r3], #1
	for (; length > 0; length--) {
   3a0c2:	3c01      	subs	r4, #1
   3a0c4:	2c00      	cmp	r4, #0
   3a0c6:	d1f8      	bne.n	3a0ba <smp_f6+0xbe>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   3a0c8:	462b      	mov	r3, r5
   3a0ca:	2241      	movs	r2, #65	; 0x41
   3a0cc:	a901      	add	r1, sp, #4
   3a0ce:	a812      	add	r0, sp, #72	; 0x48
   3a0d0:	f7ff ff3b 	bl	39f4a <bt_smp_aes_cmac>
	if (err) {
   3a0d4:	b138      	cbz	r0, 3a0e6 <smp_f6+0xea>
   3a0d6:	e008      	b.n	3a0ea <smp_f6+0xee>
		uint8_t tmp = ((uint8_t *)buf)[i];
   3a0d8:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   3a0da:	f1c4 030f 	rsb	r3, r4, #15
   3a0de:	5ce9      	ldrb	r1, [r5, r3]
   3a0e0:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   3a0e2:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
   3a0e4:	3401      	adds	r4, #1
   3a0e6:	2c07      	cmp	r4, #7
   3a0e8:	d9f6      	bls.n	3a0d8 <smp_f6+0xdc>
}
   3a0ea:	b017      	add	sp, #92	; 0x5c
   3a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003a0ee <smp_dhkey_ready>:
	if (!dhkey) {
   3a0ee:	2900      	cmp	r1, #0
   3a0f0:	d053      	beq.n	3a19a <smp_dhkey_ready+0xac>
{
   3a0f2:	b538      	push	{r3, r4, r5, lr}
   3a0f4:	4604      	mov	r4, r0
   3a0f6:	460b      	mov	r3, r1
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   3a0f8:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3a0fa:	f3bf 8f5b 	dmb	ish
   3a0fe:	e855 2f00 	ldrex	r2, [r5]
   3a102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   3a106:	e845 2100 	strex	r1, r2, [r5]
   3a10a:	2900      	cmp	r1, #0
   3a10c:	d1f7      	bne.n	3a0fe <smp_dhkey_ready+0x10>
   3a10e:	f3bf 8f5b 	dmb	ish
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   3a112:	2220      	movs	r2, #32
   3a114:	4619      	mov	r1, r3
   3a116:	f104 0097 	add.w	r0, r4, #151	; 0x97
   3a11a:	f7fc fe23 	bl	36d64 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a11e:	f3bf 8f5b 	dmb	ish
   3a122:	6863      	ldr	r3, [r4, #4]
   3a124:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   3a128:	f413 6f80 	tst.w	r3, #1024	; 0x400
   3a12c:	d115      	bne.n	3a15a <smp_dhkey_ready+0x6c>
   3a12e:	f3bf 8f5b 	dmb	ish
   3a132:	6863      	ldr	r3, [r4, #4]
   3a134:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   3a138:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3a13c:	d11b      	bne.n	3a176 <smp_dhkey_ready+0x88>
   3a13e:	f3bf 8f5b 	dmb	ish
   3a142:	6863      	ldr	r3, [r4, #4]
   3a144:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   3a148:	f413 7f00 	tst.w	r3, #512	; 0x200
   3a14c:	d027      	beq.n	3a19e <smp_dhkey_ready+0xb0>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   3a14e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   3a152:	78db      	ldrb	r3, [r3, #3]
   3a154:	b1eb      	cbz	r3, 3a192 <smp_dhkey_ready+0xa4>
	return 0;
   3a156:	2000      	movs	r0, #0
   3a158:	e00c      	b.n	3a174 <smp_dhkey_ready+0x86>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3a15a:	f3bf 8f5b 	dmb	ish
   3a15e:	e855 3f00 	ldrex	r3, [r5]
   3a162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   3a166:	e845 3200 	strex	r2, r3, [r5]
   3a16a:	2a00      	cmp	r2, #0
   3a16c:	d1f7      	bne.n	3a15e <smp_dhkey_ready+0x70>
   3a16e:	f3bf 8f5b 	dmb	ish
		return 0;
   3a172:	2000      	movs	r0, #0
}
   3a174:	bd38      	pop	{r3, r4, r5, pc}
   3a176:	f3bf 8f5b 	dmb	ish
   3a17a:	e855 3f00 	ldrex	r3, [r5]
   3a17e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   3a182:	e845 3200 	strex	r2, r3, [r5]
   3a186:	2a00      	cmp	r2, #0
   3a188:	d1f7      	bne.n	3a17a <smp_dhkey_ready+0x8c>
   3a18a:	f3bf 8f5b 	dmb	ish
		return 0;
   3a18e:	2000      	movs	r0, #0
   3a190:	e7f0      	b.n	3a174 <smp_dhkey_ready+0x86>
			return compute_and_send_central_dhcheck(smp);
   3a192:	4620      	mov	r0, r4
   3a194:	f7f0 fef6 	bl	2af84 <compute_and_send_central_dhcheck>
   3a198:	e7ec      	b.n	3a174 <smp_dhkey_ready+0x86>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   3a19a:	200b      	movs	r0, #11
}
   3a19c:	4770      	bx	lr
	return 0;
   3a19e:	2000      	movs	r0, #0
   3a1a0:	e7e8      	b.n	3a174 <smp_dhkey_ready+0x86>

0003a1a2 <update_debug_keys_check>:
{
   3a1a2:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   3a1a4:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   3a1a8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   3a1ac:	b163      	cbz	r3, 3a1c8 <update_debug_keys_check+0x26>
	if (!conn->le.keys ||
   3a1ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   3a1b2:	b18b      	cbz	r3, 3a1d8 <update_debug_keys_check+0x36>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   3a1b4:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   3a1b6:	f012 0f24 	tst.w	r2, #36	; 0x24
   3a1ba:	d00f      	beq.n	3a1dc <update_debug_keys_check+0x3a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   3a1bc:	7b5b      	ldrb	r3, [r3, #13]
   3a1be:	f013 0f02 	tst.w	r3, #2
   3a1c2:	d10d      	bne.n	3a1e0 <update_debug_keys_check+0x3e>
	return false;
   3a1c4:	2000      	movs	r0, #0
}
   3a1c6:	bd10      	pop	{r4, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   3a1c8:	f104 0188 	add.w	r1, r4, #136	; 0x88
   3a1cc:	7a20      	ldrb	r0, [r4, #8]
   3a1ce:	f7f2 fc75 	bl	2cabc <bt_keys_get_addr>
   3a1d2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
   3a1d6:	e7ea      	b.n	3a1ae <update_debug_keys_check+0xc>
		return true;
   3a1d8:	2001      	movs	r0, #1
   3a1da:	e7f4      	b.n	3a1c6 <update_debug_keys_check+0x24>
   3a1dc:	2001      	movs	r0, #1
   3a1de:	e7f2      	b.n	3a1c6 <update_debug_keys_check+0x24>
		return true;
   3a1e0:	2001      	movs	r0, #1
   3a1e2:	e7f0      	b.n	3a1c6 <update_debug_keys_check+0x24>

0003a1e4 <generate_dhkey>:
{
   3a1e4:	b510      	push	{r4, lr}
   3a1e6:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   3a1e8:	1d03      	adds	r3, r0, #4
   3a1ea:	f3bf 8f5b 	dmb	ish
   3a1ee:	e853 2f00 	ldrex	r2, [r3]
   3a1f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   3a1f6:	e843 2100 	strex	r1, r2, [r3]
   3a1fa:	2900      	cmp	r1, #0
   3a1fc:	d1f7      	bne.n	3a1ee <generate_dhkey+0xa>
   3a1fe:	f3bf 8f5b 	dmb	ish
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   3a202:	2008      	movs	r0, #8
   3a204:	f7f0 fca4 	bl	2ab50 <smp_find>
   3a208:	b108      	cbz	r0, 3a20e <generate_dhkey+0x2a>
	return 0;
   3a20a:	2000      	movs	r0, #0
}
   3a20c:	bd10      	pop	{r4, pc}
		return smp_dhkey_generate(smp);
   3a20e:	4620      	mov	r0, r4
   3a210:	f7f1 fc4e 	bl	2bab0 <smp_dhkey_generate>
   3a214:	e7fa      	b.n	3a20c <generate_dhkey+0x28>

0003a216 <bt_smp_request_ltk>:
{
   3a216:	b570      	push	{r4, r5, r6, lr}
   3a218:	b082      	sub	sp, #8
   3a21a:	4604      	mov	r4, r0
   3a21c:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   3a220:	f7f0 fc74 	bl	2ab0c <smp_chan_get>
	if (!smp) {
   3a224:	2800      	cmp	r0, #0
   3a226:	f000 80cc 	beq.w	3a3c2 <bt_smp_request_ltk+0x1ac>
   3a22a:	4605      	mov	r5, r0
	if (ediv == 0U && rand == 0U &&
   3a22c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   3a230:	b91b      	cbnz	r3, 3a23a <bt_smp_request_ltk+0x24>
   3a232:	e9dd 2300 	ldrd	r2, r3, [sp]
   3a236:	4313      	orrs	r3, r2
   3a238:	d027      	beq.n	3a28a <bt_smp_request_ltk+0x74>
	if (!conn->le.keys) {
   3a23a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   3a23e:	2b00      	cmp	r3, #0
   3a240:	d055      	beq.n	3a2ee <bt_smp_request_ltk+0xd8>
	if (ediv == 0U && rand == 0U &&
   3a242:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   3a246:	b953      	cbnz	r3, 3a25e <bt_smp_request_ltk+0x48>
   3a248:	e9dd 2300 	ldrd	r2, r3, [sp]
   3a24c:	4313      	orrs	r3, r2
   3a24e:	d106      	bne.n	3a25e <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   3a250:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   3a254:	b119      	cbz	r1, 3a25e <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   3a256:	89cb      	ldrh	r3, [r1, #14]
   3a258:	f013 0f20 	tst.w	r3, #32
   3a25c:	d15a      	bne.n	3a314 <bt_smp_request_ltk+0xfe>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   3a25e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   3a262:	b118      	cbz	r0, 3a26c <bt_smp_request_ltk+0x56>
   3a264:	89c3      	ldrh	r3, [r0, #14]
   3a266:	f013 0f01 	tst.w	r3, #1
   3a26a:	d172      	bne.n	3a352 <bt_smp_request_ltk+0x13c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a26c:	f3bf 8f5b 	dmb	ish
   3a270:	686b      	ldr	r3, [r5, #4]
   3a272:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   3a276:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   3a27a:	f040 809c 	bne.w	3a3b6 <bt_smp_request_ltk+0x1a0>
	smp_reset(smp);
   3a27e:	4628      	mov	r0, r5
   3a280:	f7ff fcf2 	bl	39c68 <smp_reset>
	return false;
   3a284:	2000      	movs	r0, #0
}
   3a286:	b002      	add	sp, #8
   3a288:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   3a28a:	1d06      	adds	r6, r0, #4
   3a28c:	f3bf 8f5b 	dmb	ish
   3a290:	6843      	ldr	r3, [r0, #4]
   3a292:	f3bf 8f5b 	dmb	ish
	if (ediv == 0U && rand == 0U &&
   3a296:	f013 0f08 	tst.w	r3, #8
   3a29a:	d0ce      	beq.n	3a23a <bt_smp_request_ltk+0x24>
   3a29c:	f3bf 8f5b 	dmb	ish
   3a2a0:	6843      	ldr	r3, [r0, #4]
   3a2a2:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   3a2a6:	f013 0f02 	tst.w	r3, #2
   3a2aa:	d0c6      	beq.n	3a23a <bt_smp_request_ltk+0x24>
		enc_size = get_encryption_key_size(smp);
   3a2ac:	f7ff fbd6 	bl	39a5c <get_encryption_key_size>
   3a2b0:	4604      	mov	r4, r0
		memcpy(ltk, smp->tk, enc_size);
   3a2b2:	4602      	mov	r2, r0
   3a2b4:	f105 0147 	add.w	r1, r5, #71	; 0x47
   3a2b8:	9807      	ldr	r0, [sp, #28]
   3a2ba:	f7fc fd53 	bl	36d64 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   3a2be:	2c0f      	cmp	r4, #15
   3a2c0:	d90d      	bls.n	3a2de <bt_smp_request_ltk+0xc8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3a2c2:	f3bf 8f5b 	dmb	ish
   3a2c6:	e856 3f00 	ldrex	r3, [r6]
   3a2ca:	f043 0302 	orr.w	r3, r3, #2
   3a2ce:	e846 3200 	strex	r2, r3, [r6]
   3a2d2:	2a00      	cmp	r2, #0
   3a2d4:	d1f7      	bne.n	3a2c6 <bt_smp_request_ltk+0xb0>
   3a2d6:	f3bf 8f5b 	dmb	ish
		return true;
   3a2da:	2001      	movs	r0, #1
   3a2dc:	e7d3      	b.n	3a286 <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   3a2de:	f1c4 0210 	rsb	r2, r4, #16
   3a2e2:	2100      	movs	r1, #0
   3a2e4:	9b07      	ldr	r3, [sp, #28]
   3a2e6:	1918      	adds	r0, r3, r4
   3a2e8:	f7fc fd60 	bl	36dac <memset>
   3a2ec:	e7e9      	b.n	3a2c2 <bt_smp_request_ltk+0xac>
					     &conn->le.dst);
   3a2ee:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   3a2f2:	4632      	mov	r2, r6
   3a2f4:	7a21      	ldrb	r1, [r4, #8]
   3a2f6:	2020      	movs	r0, #32
   3a2f8:	f7f2 fc42 	bl	2cb80 <bt_keys_find>
   3a2fc:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   3a300:	2800      	cmp	r0, #0
   3a302:	d19e      	bne.n	3a242 <bt_smp_request_ltk+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   3a304:	4632      	mov	r2, r6
   3a306:	7a21      	ldrb	r1, [r4, #8]
   3a308:	2001      	movs	r0, #1
   3a30a:	f7f2 fc39 	bl	2cb80 <bt_keys_find>
   3a30e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
   3a312:	e796      	b.n	3a242 <bt_smp_request_ltk+0x2c>
		enc_size = conn->le.keys->enc_size;
   3a314:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   3a316:	4622      	mov	r2, r4
   3a318:	311a      	adds	r1, #26
   3a31a:	9807      	ldr	r0, [sp, #28]
   3a31c:	f7fc fd22 	bl	36d64 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   3a320:	2c0f      	cmp	r4, #15
   3a322:	d90e      	bls.n	3a342 <bt_smp_request_ltk+0x12c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   3a324:	3504      	adds	r5, #4
   3a326:	f3bf 8f5b 	dmb	ish
   3a32a:	e855 3f00 	ldrex	r3, [r5]
   3a32e:	f043 0302 	orr.w	r3, r3, #2
   3a332:	e845 3200 	strex	r2, r3, [r5]
   3a336:	2a00      	cmp	r2, #0
   3a338:	d1f7      	bne.n	3a32a <bt_smp_request_ltk+0x114>
   3a33a:	f3bf 8f5b 	dmb	ish
		return true;
   3a33e:	2001      	movs	r0, #1
   3a340:	e7a1      	b.n	3a286 <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   3a342:	f1c4 0210 	rsb	r2, r4, #16
   3a346:	2100      	movs	r1, #0
   3a348:	9b07      	ldr	r3, [sp, #28]
   3a34a:	1918      	adds	r0, r3, r4
   3a34c:	f7fc fd2e 	bl	36dac <memset>
   3a350:	e7e8      	b.n	3a324 <bt_smp_request_ltk+0x10e>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   3a352:	2208      	movs	r2, #8
   3a354:	4669      	mov	r1, sp
   3a356:	3040      	adds	r0, #64	; 0x40
   3a358:	f7fc fcd7 	bl	36d0a <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   3a35c:	2800      	cmp	r0, #0
   3a35e:	d185      	bne.n	3a26c <bt_smp_request_ltk+0x56>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   3a360:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   3a364:	2202      	movs	r2, #2
   3a366:	a906      	add	r1, sp, #24
   3a368:	3048      	adds	r0, #72	; 0x48
   3a36a:	f7fc fcce 	bl	36d0a <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   3a36e:	2800      	cmp	r0, #0
   3a370:	f47f af7c 	bne.w	3a26c <bt_smp_request_ltk+0x56>
		enc_size = conn->le.keys->enc_size;
   3a374:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   3a378:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   3a37a:	4622      	mov	r2, r4
   3a37c:	314a      	adds	r1, #74	; 0x4a
   3a37e:	9807      	ldr	r0, [sp, #28]
   3a380:	f7fc fcf0 	bl	36d64 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   3a384:	2c0f      	cmp	r4, #15
   3a386:	d90e      	bls.n	3a3a6 <bt_smp_request_ltk+0x190>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   3a388:	3504      	adds	r5, #4
   3a38a:	f3bf 8f5b 	dmb	ish
   3a38e:	e855 3f00 	ldrex	r3, [r5]
   3a392:	f043 0302 	orr.w	r3, r3, #2
   3a396:	e845 3200 	strex	r2, r3, [r5]
   3a39a:	2a00      	cmp	r2, #0
   3a39c:	d1f7      	bne.n	3a38e <bt_smp_request_ltk+0x178>
   3a39e:	f3bf 8f5b 	dmb	ish
		return true;
   3a3a2:	2001      	movs	r0, #1
   3a3a4:	e76f      	b.n	3a286 <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   3a3a6:	f1c4 0210 	rsb	r2, r4, #16
   3a3aa:	2100      	movs	r1, #0
   3a3ac:	9b07      	ldr	r3, [sp, #28]
   3a3ae:	1918      	adds	r0, r3, r4
   3a3b0:	f7fc fcfc 	bl	36dac <memset>
   3a3b4:	e7e8      	b.n	3a388 <bt_smp_request_ltk+0x172>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   3a3b6:	2202      	movs	r2, #2
   3a3b8:	2106      	movs	r1, #6
   3a3ba:	4620      	mov	r0, r4
   3a3bc:	f7ec fff2 	bl	273a4 <bt_conn_security_changed>
   3a3c0:	e75d      	b.n	3a27e <bt_smp_request_ltk+0x68>
		return false;
   3a3c2:	2000      	movs	r0, #0
   3a3c4:	e75f      	b.n	3a286 <bt_smp_request_ltk+0x70>

0003a3c6 <bt_smp_sign>:
}
   3a3c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a3ca:	4770      	bx	lr

0003a3cc <bt_smp_start_security>:
	switch (conn->role) {
   3a3cc:	78c3      	ldrb	r3, [r0, #3]
   3a3ce:	2b00      	cmp	r3, #0
   3a3d0:	d147      	bne.n	3a462 <bt_smp_start_security+0x96>
{
   3a3d2:	b570      	push	{r4, r5, r6, lr}
   3a3d4:	b082      	sub	sp, #8
   3a3d6:	4604      	mov	r4, r0
		smp = smp_chan_get(conn);
   3a3d8:	f7f0 fb98 	bl	2ab0c <smp_chan_get>
		if (!smp) {
   3a3dc:	4605      	mov	r5, r0
   3a3de:	2800      	cmp	r0, #0
   3a3e0:	d042      	beq.n	3a468 <bt_smp_start_security+0x9c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   3a3e2:	1d06      	adds	r6, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a3e4:	f3bf 8f5b 	dmb	ish
   3a3e8:	6843      	ldr	r3, [r0, #4]
   3a3ea:	f3bf 8f5b 	dmb	ish
   3a3ee:	f013 0f08 	tst.w	r3, #8
   3a3f2:	d13c      	bne.n	3a46e <bt_smp_start_security+0xa2>
   3a3f4:	f3bf 8f5b 	dmb	ish
   3a3f8:	6843      	ldr	r3, [r0, #4]
   3a3fa:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   3a3fe:	f013 0f02 	tst.w	r3, #2
   3a402:	d137      	bne.n	3a474 <bt_smp_start_security+0xa8>
		if (!smp_keys_check(conn)) {
   3a404:	4620      	mov	r0, r4
   3a406:	f7ff fb88 	bl	39b1a <smp_keys_check>
   3a40a:	b330      	cbz	r0, 3a45a <bt_smp_start_security+0x8e>
						  conn->le.keys->ltk.rand,
   3a40c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
						  conn->le.keys->enc_size);
   3a410:	7b0b      	ldrb	r3, [r1, #12]
		err = bt_conn_le_start_encryption(conn,
   3a412:	9300      	str	r3, [sp, #0]
   3a414:	f101 031a 	add.w	r3, r1, #26
   3a418:	f101 0218 	add.w	r2, r1, #24
   3a41c:	3110      	adds	r1, #16
   3a41e:	4620      	mov	r0, r4
   3a420:	f7fd fa10 	bl	37844 <bt_conn_le_start_encryption>
		if (err) {
   3a424:	b9b8      	cbnz	r0, 3a456 <bt_smp_start_security+0x8a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3a426:	f3bf 8f5b 	dmb	ish
   3a42a:	e855 3f00 	ldrex	r3, [r5]
   3a42e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   3a432:	e845 3200 	strex	r2, r3, [r5]
   3a436:	2a00      	cmp	r2, #0
   3a438:	d1f7      	bne.n	3a42a <bt_smp_start_security+0x5e>
   3a43a:	f3bf 8f5b 	dmb	ish
   3a43e:	f3bf 8f5b 	dmb	ish
   3a442:	e856 3f00 	ldrex	r3, [r6]
   3a446:	f043 0302 	orr.w	r3, r3, #2
   3a44a:	e846 3200 	strex	r2, r3, [r6]
   3a44e:	2a00      	cmp	r2, #0
   3a450:	d1f7      	bne.n	3a442 <bt_smp_start_security+0x76>
   3a452:	f3bf 8f5b 	dmb	ish
}
   3a456:	b002      	add	sp, #8
   3a458:	bd70      	pop	{r4, r5, r6, pc}
			return smp_send_pairing_req(conn);
   3a45a:	4620      	mov	r0, r4
   3a45c:	f7f1 f8aa 	bl	2b5b4 <smp_send_pairing_req>
   3a460:	e7f9      	b.n	3a456 <bt_smp_start_security+0x8a>
		return -EINVAL;
   3a462:	f06f 0015 	mvn.w	r0, #21
}
   3a466:	4770      	bx	lr
			return -ENOTCONN;
   3a468:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3a46c:	e7f3      	b.n	3a456 <bt_smp_start_security+0x8a>
			return -EBUSY;
   3a46e:	f06f 000f 	mvn.w	r0, #15
   3a472:	e7f0      	b.n	3a456 <bt_smp_start_security+0x8a>
			return -EBUSY;
   3a474:	f06f 000f 	mvn.w	r0, #15
   3a478:	e7ed      	b.n	3a456 <bt_smp_start_security+0x8a>

0003a47a <smp_error>:
{
   3a47a:	b570      	push	{r4, r5, r6, lr}
   3a47c:	b082      	sub	sp, #8
   3a47e:	4604      	mov	r4, r0
   3a480:	460d      	mov	r5, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a482:	f3bf 8f5b 	dmb	ish
   3a486:	6843      	ldr	r3, [r0, #4]
   3a488:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   3a48c:	f013 0f08 	tst.w	r3, #8
   3a490:	d107      	bne.n	3a4a2 <smp_error+0x28>
   3a492:	f3bf 8f5b 	dmb	ish
   3a496:	6843      	ldr	r3, [r0, #4]
   3a498:	f3bf 8f5b 	dmb	ish
   3a49c:	f013 0f02 	tst.w	r3, #2
   3a4a0:	d01a      	beq.n	3a4d8 <smp_error+0x5e>
		smp_pairing_complete(smp, reason);
   3a4a2:	4629      	mov	r1, r5
   3a4a4:	4620      	mov	r0, r4
   3a4a6:	f7f1 feed 	bl	2c284 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   3a4aa:	2201      	movs	r2, #1
   3a4ac:	2105      	movs	r1, #5
   3a4ae:	4620      	mov	r0, r4
   3a4b0:	f7ff fc67 	bl	39d82 <smp_create_pdu>
	if (!buf) {
   3a4b4:	4606      	mov	r6, r0
   3a4b6:	b1e8      	cbz	r0, 3a4f4 <smp_error+0x7a>
   3a4b8:	2101      	movs	r1, #1
   3a4ba:	3008      	adds	r0, #8
   3a4bc:	f000 faf9 	bl	3aab2 <net_buf_simple_add>
	rsp->reason = reason;
   3a4c0:	7005      	strb	r5, [r0, #0]
   3a4c2:	2300      	movs	r3, #0
   3a4c4:	9300      	str	r3, [sp, #0]
   3a4c6:	4632      	mov	r2, r6
   3a4c8:	2106      	movs	r1, #6
   3a4ca:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3a4ce:	f7fd fbbe 	bl	37c4e <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   3a4d2:	b950      	cbnz	r0, 3a4ea <smp_error+0x70>
}
   3a4d4:	b002      	add	sp, #8
   3a4d6:	bd70      	pop	{r4, r5, r6, pc}
   3a4d8:	f3bf 8f5b 	dmb	ish
   3a4dc:	6843      	ldr	r3, [r0, #4]
   3a4de:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   3a4e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   3a4e6:	d0e0      	beq.n	3a4aa <smp_error+0x30>
   3a4e8:	e7db      	b.n	3a4a2 <smp_error+0x28>
		net_buf_unref(buf);
   3a4ea:	4630      	mov	r0, r6
   3a4ec:	f000 fa97 	bl	3aa1e <net_buf_unref>
	return 0;
   3a4f0:	2000      	movs	r0, #0
   3a4f2:	e7ef      	b.n	3a4d4 <smp_error+0x5a>
		return -ENOBUFS;
   3a4f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3a4f8:	e7ec      	b.n	3a4d4 <smp_error+0x5a>

0003a4fa <bt_smp_dhkey_ready>:
{
   3a4fa:	b538      	push	{r3, r4, r5, lr}
   3a4fc:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   3a4fe:	2008      	movs	r0, #8
   3a500:	f7f0 fb26 	bl	2ab50 <smp_find>
	if (smp) {
   3a504:	b198      	cbz	r0, 3a52e <bt_smp_dhkey_ready+0x34>
   3a506:	4605      	mov	r5, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   3a508:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3a50a:	f3bf 8f5b 	dmb	ish
   3a50e:	e853 2f00 	ldrex	r2, [r3]
   3a512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   3a516:	e843 2100 	strex	r1, r2, [r3]
   3a51a:	2900      	cmp	r1, #0
   3a51c:	d1f7      	bne.n	3a50e <bt_smp_dhkey_ready+0x14>
   3a51e:	f3bf 8f5b 	dmb	ish
		err = smp_dhkey_ready(smp, dhkey);
   3a522:	4621      	mov	r1, r4
   3a524:	4628      	mov	r0, r5
   3a526:	f7ff fde2 	bl	3a0ee <smp_dhkey_ready>
		if (err) {
   3a52a:	4601      	mov	r1, r0
   3a52c:	b908      	cbnz	r0, 3a532 <bt_smp_dhkey_ready+0x38>
{
   3a52e:	2500      	movs	r5, #0
   3a530:	e009      	b.n	3a546 <bt_smp_dhkey_ready+0x4c>
			smp_error(smp, err);
   3a532:	4628      	mov	r0, r5
   3a534:	f7ff ffa1 	bl	3a47a <smp_error>
   3a538:	e7f9      	b.n	3a52e <bt_smp_dhkey_ready+0x34>
				smp_error(smp, err);
   3a53a:	4601      	mov	r1, r0
   3a53c:	4620      	mov	r0, r4
   3a53e:	f7ff ff9c 	bl	3a47a <smp_error>
	} while (smp && err);
   3a542:	b164      	cbz	r4, 3a55e <bt_smp_dhkey_ready+0x64>
   3a544:	b15d      	cbz	r5, 3a55e <bt_smp_dhkey_ready+0x64>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   3a546:	2007      	movs	r0, #7
   3a548:	f7f0 fb02 	bl	2ab50 <smp_find>
		if (smp) {
   3a54c:	4604      	mov	r4, r0
   3a54e:	2800      	cmp	r0, #0
   3a550:	d0f7      	beq.n	3a542 <bt_smp_dhkey_ready+0x48>
			err = smp_dhkey_generate(smp);
   3a552:	f7f1 faad 	bl	2bab0 <smp_dhkey_generate>
   3a556:	4605      	mov	r5, r0
			if (err) {
   3a558:	2800      	cmp	r0, #0
   3a55a:	d0f2      	beq.n	3a542 <bt_smp_dhkey_ready+0x48>
   3a55c:	e7ed      	b.n	3a53a <bt_smp_dhkey_ready+0x40>
}
   3a55e:	bd38      	pop	{r3, r4, r5, pc}

0003a560 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
   3a560:	7883      	ldrb	r3, [r0, #2]
   3a562:	2b01      	cmp	r3, #1
   3a564:	d000      	beq.n	3a568 <smp_check_complete+0x8>
   3a566:	4770      	bx	lr
{
   3a568:	b510      	push	{r4, lr}
   3a56a:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   3a56c:	2106      	movs	r1, #6
   3a56e:	f7fd fbb0 	bl	37cd2 <bt_l2cap_le_lookup_tx_cid>
   3a572:	4603      	mov	r3, r0
		smp = CONTAINER_OF(chan, struct bt_smp, chan);
   3a574:	38f0      	subs	r0, #240	; 0xf0
		smp->local_dist &= ~dist_complete;
   3a576:	f813 1c08 	ldrb.w	r1, [r3, #-8]
   3a57a:	ea21 0104 	bic.w	r1, r1, r4
   3a57e:	f803 1c08 	strb.w	r1, [r3, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   3a582:	f833 3c08 	ldrh.w	r3, [r3, #-8]
   3a586:	b103      	cbz	r3, 3a58a <smp_check_complete+0x2a>
}
   3a588:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
   3a58a:	2100      	movs	r1, #0
   3a58c:	f7f1 fe7a 	bl	2c284 <smp_pairing_complete>
		return;
   3a590:	e7fa      	b.n	3a588 <smp_check_complete+0x28>

0003a592 <smp_ident_sent>:
{
   3a592:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   3a594:	2101      	movs	r1, #1
   3a596:	f7ff ffe3 	bl	3a560 <smp_check_complete>
}
   3a59a:	bd08      	pop	{r3, pc}

0003a59c <bt_smp_encrypt_change>:
{
   3a59c:	b570      	push	{r4, r5, r6, lr}
   3a59e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   3a5a0:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_conn *conn = chan->conn;
   3a5a4:	4605      	mov	r5, r0
   3a5a6:	f855 29ec 	ldr.w	r2, [r5], #-236
   3a5aa:	f3bf 8f5b 	dmb	ish
   3a5ae:	e855 3f00 	ldrex	r3, [r5]
   3a5b2:	f023 0002 	bic.w	r0, r3, #2
   3a5b6:	e845 0c00 	strex	ip, r0, [r5]
   3a5ba:	f1bc 0f00 	cmp.w	ip, #0
   3a5be:	d1f6      	bne.n	3a5ae <bt_smp_encrypt_change+0x12>
   3a5c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   3a5c4:	f013 0f02 	tst.w	r3, #2
   3a5c8:	d002      	beq.n	3a5d0 <bt_smp_encrypt_change+0x34>
	if (hci_status) {
   3a5ca:	b911      	cbnz	r1, 3a5d2 <bt_smp_encrypt_change+0x36>
	if (!conn->encrypt) {
   3a5cc:	7ad3      	ldrb	r3, [r2, #11]
   3a5ce:	b9fb      	cbnz	r3, 3a610 <bt_smp_encrypt_change+0x74>
}
   3a5d0:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a5d2:	f3bf 8f5b 	dmb	ish
   3a5d6:	f854 3cec 	ldr.w	r3, [r4, #-236]
   3a5da:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   3a5de:	f013 0f08 	tst.w	r3, #8
   3a5e2:	d0f5      	beq.n	3a5d0 <bt_smp_encrypt_change+0x34>
			uint8_t smp_err = smp_err_get(
   3a5e4:	4608      	mov	r0, r1
   3a5e6:	f7fc fdcc 	bl	37182 <bt_security_err_get>
   3a5ea:	f7ff fa23 	bl	39a34 <smp_err_get>
   3a5ee:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3a5f0:	f3bf 8f5b 	dmb	ish
   3a5f4:	e855 3f00 	ldrex	r3, [r5]
   3a5f8:	f043 0304 	orr.w	r3, r3, #4
   3a5fc:	e845 3200 	strex	r2, r3, [r5]
   3a600:	2a00      	cmp	r2, #0
   3a602:	d1f7      	bne.n	3a5f4 <bt_smp_encrypt_change+0x58>
   3a604:	f3bf 8f5b 	dmb	ish
			smp_pairing_complete(smp, smp_err);
   3a608:	4630      	mov	r0, r6
   3a60a:	f7f1 fe3b 	bl	2c284 <smp_pairing_complete>
		return;
   3a60e:	e7df      	b.n	3a5d0 <bt_smp_encrypt_change+0x34>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a610:	f3bf 8f5b 	dmb	ish
   3a614:	f854 3cec 	ldr.w	r3, [r4, #-236]
   3a618:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   3a61c:	f013 0f08 	tst.w	r3, #8
   3a620:	d044      	beq.n	3a6ac <bt_smp_encrypt_change+0x110>
   3a622:	f3bf 8f5b 	dmb	ish
   3a626:	f854 3cec 	ldr.w	r3, [r4, #-236]
   3a62a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   3a62e:	f013 0f20 	tst.w	r3, #32
   3a632:	d021      	beq.n	3a678 <bt_smp_encrypt_change+0xdc>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   3a634:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   3a638:	f013 0f08 	tst.w	r3, #8
   3a63c:	d010      	beq.n	3a660 <bt_smp_encrypt_change+0xc4>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
   3a63e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   3a642:	f013 0f08 	tst.w	r3, #8
   3a646:	d00b      	beq.n	3a660 <bt_smp_encrypt_change+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3a648:	f3bf 8f5b 	dmb	ish
   3a64c:	e855 3f00 	ldrex	r3, [r5]
   3a650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3a654:	e845 3100 	strex	r1, r3, [r5]
   3a658:	2900      	cmp	r1, #0
   3a65a:	d1f7      	bne.n	3a64c <bt_smp_encrypt_change+0xb0>
   3a65c:	f3bf 8f5b 	dmb	ish
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   3a660:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   3a664:	f023 0308 	bic.w	r3, r3, #8
   3a668:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   3a66c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3a670:	f023 0308 	bic.w	r3, r3, #8
   3a674:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   3a678:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3a67c:	f013 0f01 	tst.w	r3, #1
   3a680:	d118      	bne.n	3a6b4 <bt_smp_encrypt_change+0x118>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   3a682:	f013 0f02 	tst.w	r3, #2
   3a686:	d146      	bne.n	3a716 <bt_smp_encrypt_change+0x17a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   3a688:	f013 0f04 	tst.w	r3, #4
   3a68c:	d020      	beq.n	3a6d0 <bt_smp_encrypt_change+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   3a68e:	f1a4 03f0 	sub.w	r3, r4, #240	; 0xf0
   3a692:	f3bf 8f5b 	dmb	ish
   3a696:	e853 1f00 	ldrex	r1, [r3]
   3a69a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   3a69e:	e843 1000 	strex	r0, r1, [r3]
   3a6a2:	2800      	cmp	r0, #0
   3a6a4:	d1f7      	bne.n	3a696 <bt_smp_encrypt_change+0xfa>
   3a6a6:	f3bf 8f5b 	dmb	ish
}
   3a6aa:	e011      	b.n	3a6d0 <bt_smp_encrypt_change+0x134>
		smp_reset(smp);
   3a6ac:	4630      	mov	r0, r6
   3a6ae:	f7ff fadb 	bl	39c68 <smp_reset>
		return;
   3a6b2:	e78d      	b.n	3a5d0 <bt_smp_encrypt_change+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   3a6b4:	f1a4 03f0 	sub.w	r3, r4, #240	; 0xf0
   3a6b8:	f3bf 8f5b 	dmb	ish
   3a6bc:	e853 1f00 	ldrex	r1, [r3]
   3a6c0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   3a6c4:	e843 1000 	strex	r0, r1, [r3]
   3a6c8:	2800      	cmp	r0, #0
   3a6ca:	d1f7      	bne.n	3a6bc <bt_smp_encrypt_change+0x120>
   3a6cc:	f3bf 8f5b 	dmb	ish
   3a6d0:	f3bf 8f5b 	dmb	ish
   3a6d4:	e855 3f00 	ldrex	r3, [r5]
   3a6d8:	f043 0304 	orr.w	r3, r3, #4
   3a6dc:	e845 3100 	strex	r1, r3, [r5]
   3a6e0:	2900      	cmp	r1, #0
   3a6e2:	d1f7      	bne.n	3a6d4 <bt_smp_encrypt_change+0x138>
   3a6e4:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   3a6e8:	78d3      	ldrb	r3, [r2, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   3a6ea:	b923      	cbnz	r3, 3a6f6 <bt_smp_encrypt_change+0x15a>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   3a6ec:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3a6f0:	2b00      	cmp	r3, #0
   3a6f2:	f47f af6d 	bne.w	3a5d0 <bt_smp_encrypt_change+0x34>
	if (bt_smp_distribute_keys(smp)) {
   3a6f6:	4630      	mov	r0, r6
   3a6f8:	f7f1 f9a6 	bl	2ba48 <bt_smp_distribute_keys>
   3a6fc:	2800      	cmp	r0, #0
   3a6fe:	f47f af67 	bne.w	3a5d0 <bt_smp_encrypt_change+0x34>
	if (!smp->local_dist && !smp->remote_dist) {
   3a702:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   3a706:	2b00      	cmp	r3, #0
   3a708:	f47f af62 	bne.w	3a5d0 <bt_smp_encrypt_change+0x34>
		smp_pairing_complete(smp, 0);
   3a70c:	2100      	movs	r1, #0
   3a70e:	4630      	mov	r0, r6
   3a710:	f7f1 fdb8 	bl	2c284 <smp_pairing_complete>
   3a714:	e75c      	b.n	3a5d0 <bt_smp_encrypt_change+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   3a716:	f1a4 03f0 	sub.w	r3, r4, #240	; 0xf0
   3a71a:	f3bf 8f5b 	dmb	ish
   3a71e:	e853 1f00 	ldrex	r1, [r3]
   3a722:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   3a726:	e843 1000 	strex	r0, r1, [r3]
   3a72a:	2800      	cmp	r0, #0
   3a72c:	d1f7      	bne.n	3a71e <bt_smp_encrypt_change+0x182>
   3a72e:	f3bf 8f5b 	dmb	ish
   3a732:	e7cd      	b.n	3a6d0 <bt_smp_encrypt_change+0x134>

0003a734 <bt_smp_disconnected>:
{
   3a734:	b570      	push	{r4, r5, r6, lr}
   3a736:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   3a738:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   3a73c:	f850 3be8 	ldr.w	r3, [r0], #232
   3a740:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   3a744:	f001 ff4e 	bl	3c5e4 <k_work_cancel_delayable>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a748:	f3bf 8f5b 	dmb	ish
   3a74c:	f854 3cec 	ldr.w	r3, [r4, #-236]
   3a750:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   3a754:	f013 0f08 	tst.w	r3, #8
   3a758:	d108      	bne.n	3a76c <bt_smp_disconnected+0x38>
   3a75a:	f3bf 8f5b 	dmb	ish
   3a75e:	f854 3cec 	ldr.w	r3, [r4, #-236]
   3a762:	f3bf 8f5b 	dmb	ish
   3a766:	f013 0f02 	tst.w	r3, #2
   3a76a:	d014      	beq.n	3a796 <bt_smp_disconnected+0x62>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   3a76c:	2108      	movs	r1, #8
   3a76e:	4630      	mov	r0, r6
   3a770:	f7f1 fd88 	bl	2c284 <smp_pairing_complete>
	if (keys) {
   3a774:	b145      	cbz	r5, 3a788 <bt_smp_disconnected+0x54>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   3a776:	89eb      	ldrh	r3, [r5, #14]
   3a778:	b11b      	cbz	r3, 3a782 <bt_smp_disconnected+0x4e>
		    (keys->flags & BT_KEYS_DEBUG))) {
   3a77a:	7b6b      	ldrb	r3, [r5, #13]
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   3a77c:	f013 0f02 	tst.w	r3, #2
   3a780:	d002      	beq.n	3a788 <bt_smp_disconnected+0x54>
			bt_keys_clear(keys);
   3a782:	4628      	mov	r0, r5
   3a784:	f000 f82a 	bl	3a7dc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   3a788:	f44f 7202 	mov.w	r2, #520	; 0x208
   3a78c:	2100      	movs	r1, #0
   3a78e:	4630      	mov	r0, r6
   3a790:	f7fc fb0c 	bl	36dac <memset>
}
   3a794:	bd70      	pop	{r4, r5, r6, pc}
   3a796:	f3bf 8f5b 	dmb	ish
   3a79a:	f854 3cec 	ldr.w	r3, [r4, #-236]
   3a79e:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   3a7a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   3a7a6:	d0e5      	beq.n	3a774 <bt_smp_disconnected+0x40>
   3a7a8:	e7e0      	b.n	3a76c <bt_smp_disconnected+0x38>

0003a7aa <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   3a7aa:	89c3      	ldrh	r3, [r0, #14]
   3a7ac:	4319      	orrs	r1, r3
   3a7ae:	81c1      	strh	r1, [r0, #14]
}
   3a7b0:	4770      	bx	lr

0003a7b2 <bt_keys_get_type>:
{
   3a7b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a7b4:	4606      	mov	r6, r0
   3a7b6:	460c      	mov	r4, r1
   3a7b8:	4615      	mov	r5, r2
	keys = bt_keys_find(type, id, addr);
   3a7ba:	f7f2 f9e1 	bl	2cb80 <bt_keys_find>
	if (keys) {
   3a7be:	4607      	mov	r7, r0
   3a7c0:	b108      	cbz	r0, 3a7c6 <bt_keys_get_type+0x14>
}
   3a7c2:	4638      	mov	r0, r7
   3a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	keys = bt_keys_get_addr(id, addr);
   3a7c6:	4629      	mov	r1, r5
   3a7c8:	4620      	mov	r0, r4
   3a7ca:	f7f2 f977 	bl	2cabc <bt_keys_get_addr>
	if (!keys) {
   3a7ce:	4607      	mov	r7, r0
   3a7d0:	2800      	cmp	r0, #0
   3a7d2:	d0f6      	beq.n	3a7c2 <bt_keys_get_type+0x10>
	bt_keys_add_type(keys, type);
   3a7d4:	4631      	mov	r1, r6
   3a7d6:	f7ff ffe8 	bl	3a7aa <bt_keys_add_type>
	return keys;
   3a7da:	e7f2      	b.n	3a7c2 <bt_keys_get_type+0x10>

0003a7dc <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   3a7dc:	b510      	push	{r4, lr}
   3a7de:	4604      	mov	r4, r0
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   3a7e0:	7a03      	ldrb	r3, [r0, #8]
   3a7e2:	f013 0f04 	tst.w	r3, #4
   3a7e6:	d105      	bne.n	3a7f4 <bt_keys_clear+0x18>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   3a7e8:	225c      	movs	r2, #92	; 0x5c
   3a7ea:	2100      	movs	r1, #0
   3a7ec:	4620      	mov	r0, r4
   3a7ee:	f7fc fadd 	bl	36dac <memset>
}
   3a7f2:	bd10      	pop	{r4, pc}
		bt_id_del(keys);
   3a7f4:	f7eb fa2e 	bl	25c54 <bt_id_del>
   3a7f8:	e7f6      	b.n	3a7e8 <bt_keys_clear+0xc>

0003a7fa <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   3a7fa:	4770      	bx	lr

0003a7fc <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   3a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a800:	4604      	mov	r4, r0
   3a802:	460d      	mov	r5, r1
   3a804:	4617      	mov	r7, r2
   3a806:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3a808:	7980      	ldrb	r0, [r0, #6]
   3a80a:	f7f2 fa79 	bl	2cd00 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   3a80e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3a810:	681b      	ldr	r3, [r3, #0]
   3a812:	f8d3 8000 	ldr.w	r8, [r3]
   3a816:	463a      	mov	r2, r7
   3a818:	4633      	mov	r3, r6
   3a81a:	4629      	mov	r1, r5
   3a81c:	4620      	mov	r0, r4
   3a81e:	47c0      	blx	r8
}
   3a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003a824 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   3a824:	b538      	push	{r3, r4, r5, lr}
   3a826:	4604      	mov	r4, r0
   3a828:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3a82a:	7980      	ldrb	r0, [r0, #6]
   3a82c:	f7f2 fa68 	bl	2cd00 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   3a830:	7963      	ldrb	r3, [r4, #5]
   3a832:	f013 0f02 	tst.w	r3, #2
   3a836:	d105      	bne.n	3a844 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   3a838:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3a83a:	681b      	ldr	r3, [r3, #0]
   3a83c:	689b      	ldr	r3, [r3, #8]
   3a83e:	4629      	mov	r1, r5
   3a840:	4620      	mov	r0, r4
   3a842:	4798      	blx	r3
}
   3a844:	bd38      	pop	{r3, r4, r5, pc}

0003a846 <net_buf_id>:
{
   3a846:	b510      	push	{r4, lr}
   3a848:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3a84a:	7980      	ldrb	r0, [r0, #6]
   3a84c:	f7f2 fa58 	bl	2cd00 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3a850:	7f03      	ldrb	r3, [r0, #28]
   3a852:	3317      	adds	r3, #23
   3a854:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3a858:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3a85a:	1a20      	subs	r0, r4, r0
}
   3a85c:	fbb0 f0f3 	udiv	r0, r0, r3
   3a860:	bd10      	pop	{r4, pc}

0003a862 <fixed_data_alloc>:
{
   3a862:	b570      	push	{r4, r5, r6, lr}
   3a864:	4604      	mov	r4, r0
   3a866:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3a868:	7980      	ldrb	r0, [r0, #6]
   3a86a:	f7f2 fa49 	bl	2cd00 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3a86e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3a870:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   3a872:	682a      	ldr	r2, [r5, #0]
   3a874:	6819      	ldr	r1, [r3, #0]
   3a876:	428a      	cmp	r2, r1
   3a878:	bf28      	it	cs
   3a87a:	460a      	movcs	r2, r1
   3a87c:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   3a87e:	685d      	ldr	r5, [r3, #4]
   3a880:	681e      	ldr	r6, [r3, #0]
   3a882:	4620      	mov	r0, r4
   3a884:	f7ff ffdf 	bl	3a846 <net_buf_id>
}
   3a888:	fb00 5006 	mla	r0, r0, r6, r5
   3a88c:	bd70      	pop	{r4, r5, r6, pc}

0003a88e <net_buf_reset>:
	buf->len  = 0U;
   3a88e:	2300      	movs	r3, #0
   3a890:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   3a892:	6903      	ldr	r3, [r0, #16]
   3a894:	6083      	str	r3, [r0, #8]
}
   3a896:	4770      	bx	lr

0003a898 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   3a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a89c:	b083      	sub	sp, #12
   3a89e:	4605      	mov	r5, r0
   3a8a0:	9101      	str	r1, [sp, #4]
   3a8a2:	4616      	mov	r6, r2
   3a8a4:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3a8a6:	4610      	mov	r0, r2
   3a8a8:	4619      	mov	r1, r3
   3a8aa:	f002 f903 	bl	3cab4 <sys_clock_timeout_end_calc>
   3a8ae:	4682      	mov	sl, r0
   3a8b0:	9100      	str	r1, [sp, #0]
   3a8b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   3a8b6:	f3ef 8211 	mrs	r2, BASEPRI
   3a8ba:	f383 8812 	msr	BASEPRI_MAX, r3
   3a8be:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   3a8c2:	8b6b      	ldrh	r3, [r5, #26]
   3a8c4:	2b00      	cmp	r3, #0
   3a8c6:	d042      	beq.n	3a94e <net_buf_alloc_len+0xb6>
   3a8c8:	4693      	mov	fp, r2

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   3a8ca:	8b2a      	ldrh	r2, [r5, #24]
   3a8cc:	4293      	cmp	r3, r2
   3a8ce:	d20b      	bcs.n	3a8e8 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   3a8d0:	2200      	movs	r2, #0
   3a8d2:	2300      	movs	r3, #0
   3a8d4:	4628      	mov	r0, r5
   3a8d6:	f7f5 fc8d 	bl	301f4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   3a8da:	4604      	mov	r4, r0
   3a8dc:	b120      	cbz	r0, 3a8e8 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   3a8de:	f38b 8811 	msr	BASEPRI, fp
   3a8e2:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   3a8e6:	e015      	b.n	3a914 <net_buf_alloc_len+0x7c>
			}
		}

		uninit_count = pool->uninit_count--;
   3a8e8:	8b6a      	ldrh	r2, [r5, #26]
   3a8ea:	1e53      	subs	r3, r2, #1
   3a8ec:	836b      	strh	r3, [r5, #26]
   3a8ee:	f38b 8811 	msr	BASEPRI, fp
   3a8f2:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3a8f6:	7f2c      	ldrb	r4, [r5, #28]
   3a8f8:	3417      	adds	r4, #23
   3a8fa:	f024 0403 	bic.w	r4, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3a8fe:	8b2b      	ldrh	r3, [r5, #24]
   3a900:	1a9b      	subs	r3, r3, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3a902:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   3a904:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   3a908:	4628      	mov	r0, r5
   3a90a:	f7f2 f9ed 	bl	2cce8 <pool_id>
   3a90e:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   3a910:	7f2b      	ldrb	r3, [r5, #28]
   3a912:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   3a914:	9b01      	ldr	r3, [sp, #4]
   3a916:	2b00      	cmp	r3, #0
   3a918:	d038      	beq.n	3a98c <net_buf_alloc_len+0xf4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   3a91a:	ea56 0307 	orrs.w	r3, r6, r7
   3a91e:	d005      	beq.n	3a92c <net_buf_alloc_len+0x94>
   3a920:	f1b7 3fff 	cmp.w	r7, #4294967295
   3a924:	bf08      	it	eq
   3a926:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   3a92a:	d11d      	bne.n	3a968 <net_buf_alloc_len+0xd0>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   3a92c:	4632      	mov	r2, r6
   3a92e:	463b      	mov	r3, r7
   3a930:	a901      	add	r1, sp, #4
   3a932:	4620      	mov	r0, r4
   3a934:	f7ff ff62 	bl	3a7fc <data_alloc>
   3a938:	4605      	mov	r5, r0
   3a93a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   3a93c:	bb40      	cbnz	r0, 3a990 <net_buf_alloc_len+0xf8>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3a93e:	79a0      	ldrb	r0, [r4, #6]
   3a940:	f7f2 f9de 	bl	2cd00 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   3a944:	4621      	mov	r1, r4
   3a946:	f001 fd0b 	bl	3c360 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   3a94a:	462c      	mov	r4, r5
}
   3a94c:	e02a      	b.n	3a9a4 <net_buf_alloc_len+0x10c>
   3a94e:	f382 8811 	msr	BASEPRI, r2
   3a952:	f3bf 8f6f 	isb	sy
   3a956:	4632      	mov	r2, r6
   3a958:	463b      	mov	r3, r7
   3a95a:	4628      	mov	r0, r5
   3a95c:	f7f5 fc4a 	bl	301f4 <z_impl_k_queue_get>
	if (!buf) {
   3a960:	4604      	mov	r4, r0
   3a962:	2800      	cmp	r0, #0
   3a964:	d1d6      	bne.n	3a914 <net_buf_alloc_len+0x7c>
   3a966:	e01d      	b.n	3a9a4 <net_buf_alloc_len+0x10c>
			int64_t remaining = end - sys_clock_tick_get();
   3a968:	f7f6 fc3e 	bl	311e8 <sys_clock_tick_get>
   3a96c:	ebba 0800 	subs.w	r8, sl, r0
   3a970:	9b00      	ldr	r3, [sp, #0]
   3a972:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   3a976:	f1b8 0f01 	cmp.w	r8, #1
   3a97a:	f179 0300 	sbcs.w	r3, r9, #0
   3a97e:	db02      	blt.n	3a986 <net_buf_alloc_len+0xee>
				timeout = Z_TIMEOUT_TICKS(remaining);
   3a980:	4646      	mov	r6, r8
   3a982:	464f      	mov	r7, r9
   3a984:	e7d2      	b.n	3a92c <net_buf_alloc_len+0x94>
				timeout = K_NO_WAIT;
   3a986:	2600      	movs	r6, #0
   3a988:	2700      	movs	r7, #0
   3a98a:	e7cf      	b.n	3a92c <net_buf_alloc_len+0x94>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   3a98c:	2300      	movs	r3, #0
   3a98e:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   3a990:	2301      	movs	r3, #1
   3a992:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   3a994:	2300      	movs	r3, #0
   3a996:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   3a998:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   3a99a:	9b01      	ldr	r3, [sp, #4]
   3a99c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   3a99e:	4620      	mov	r0, r4
   3a9a0:	f7ff ff75 	bl	3a88e <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   3a9a4:	4620      	mov	r0, r4
   3a9a6:	b003      	add	sp, #12
   3a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003a9ac <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   3a9ac:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3a9ae:	6a41      	ldr	r1, [r0, #36]	; 0x24
   3a9b0:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   3a9b2:	6809      	ldr	r1, [r1, #0]
   3a9b4:	f7ff ff70 	bl	3a898 <net_buf_alloc_len>
}
   3a9b8:	bd08      	pop	{r3, pc}

0003a9ba <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   3a9ba:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   3a9bc:	4605      	mov	r5, r0
   3a9be:	f7f5 fc19 	bl	301f4 <z_impl_k_queue_get>
	if (!buf) {
   3a9c2:	4606      	mov	r6, r0
   3a9c4:	b190      	cbz	r0, 3a9ec <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   3a9c6:	4604      	mov	r4, r0
   3a9c8:	e00a      	b.n	3a9e0 <net_buf_get+0x26>
   3a9ca:	2200      	movs	r2, #0
   3a9cc:	2300      	movs	r3, #0
   3a9ce:	4628      	mov	r0, r5
   3a9d0:	f7f5 fc10 	bl	301f4 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   3a9d4:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   3a9d6:	7963      	ldrb	r3, [r4, #5]
   3a9d8:	f023 0301 	bic.w	r3, r3, #1
   3a9dc:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   3a9de:	4604      	mov	r4, r0
   3a9e0:	7963      	ldrb	r3, [r4, #5]
   3a9e2:	f013 0f01 	tst.w	r3, #1
   3a9e6:	d1f0      	bne.n	3a9ca <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   3a9e8:	2300      	movs	r3, #0
   3a9ea:	6023      	str	r3, [r4, #0]

	return buf;
}
   3a9ec:	4630      	mov	r0, r6
   3a9ee:	bd70      	pop	{r4, r5, r6, pc}

0003a9f0 <net_buf_simple_init_with_data>:

void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
   3a9f0:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   3a9f2:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   3a9f4:	b292      	uxth	r2, r2
   3a9f6:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   3a9f8:	8082      	strh	r2, [r0, #4]
}
   3a9fa:	4770      	bx	lr

0003a9fc <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   3a9fc:	6883      	ldr	r3, [r0, #8]
   3a9fe:	440b      	add	r3, r1
   3aa00:	6003      	str	r3, [r0, #0]
}
   3aa02:	4770      	bx	lr

0003aa04 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   3aa04:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   3aa06:	460a      	mov	r2, r1
   3aa08:	6814      	ldr	r4, [r2, #0]
   3aa0a:	b12c      	cbz	r4, 3aa18 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   3aa0c:	7953      	ldrb	r3, [r2, #5]
   3aa0e:	f043 0301 	orr.w	r3, r3, #1
   3aa12:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   3aa14:	4622      	mov	r2, r4
   3aa16:	e7f7      	b.n	3aa08 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   3aa18:	f001 fcad 	bl	3c376 <k_queue_append_list>
}
   3aa1c:	bd10      	pop	{r4, pc}

0003aa1e <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   3aa1e:	b538      	push	{r3, r4, r5, lr}
   3aa20:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   3aa22:	e00f      	b.n	3aa44 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   3aa24:	4620      	mov	r0, r4
   3aa26:	f7ff fefd 	bl	3a824 <data_unref>
			buf->__buf = NULL;
   3aa2a:	2300      	movs	r3, #0
   3aa2c:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   3aa2e:	2300      	movs	r3, #0
   3aa30:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   3aa32:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   3aa34:	79a0      	ldrb	r0, [r4, #6]
   3aa36:	f7f2 f963 	bl	2cd00 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   3aa3a:	6a03      	ldr	r3, [r0, #32]
   3aa3c:	b16b      	cbz	r3, 3aa5a <net_buf_unref+0x3c>
			pool->destroy(buf);
   3aa3e:	4620      	mov	r0, r4
   3aa40:	4798      	blx	r3
{
   3aa42:	462c      	mov	r4, r5
	while (buf) {
   3aa44:	b184      	cbz	r4, 3aa68 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   3aa46:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   3aa48:	7923      	ldrb	r3, [r4, #4]
   3aa4a:	3b01      	subs	r3, #1
   3aa4c:	b2db      	uxtb	r3, r3
   3aa4e:	7123      	strb	r3, [r4, #4]
   3aa50:	b953      	cbnz	r3, 3aa68 <net_buf_unref+0x4a>
		if (buf->__buf) {
   3aa52:	6921      	ldr	r1, [r4, #16]
   3aa54:	2900      	cmp	r1, #0
   3aa56:	d1e5      	bne.n	3aa24 <net_buf_unref+0x6>
   3aa58:	e7e9      	b.n	3aa2e <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3aa5a:	79a0      	ldrb	r0, [r4, #6]
   3aa5c:	f7f2 f950 	bl	2cd00 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   3aa60:	4621      	mov	r1, r4
   3aa62:	f001 fc7d 	bl	3c360 <k_queue_prepend>
}
   3aa66:	e7ec      	b.n	3aa42 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   3aa68:	bd38      	pop	{r3, r4, r5, pc}

0003aa6a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   3aa6a:	7902      	ldrb	r2, [r0, #4]
   3aa6c:	3201      	adds	r2, #1
   3aa6e:	7102      	strb	r2, [r0, #4]
	return buf;
}
   3aa70:	4770      	bx	lr

0003aa72 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   3aa72:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   3aa74:	4618      	mov	r0, r3
   3aa76:	681b      	ldr	r3, [r3, #0]
   3aa78:	2b00      	cmp	r3, #0
   3aa7a:	d1fb      	bne.n	3aa74 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   3aa7c:	4770      	bx	lr

0003aa7e <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   3aa7e:	b570      	push	{r4, r5, r6, lr}
   3aa80:	4604      	mov	r4, r0
   3aa82:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   3aa84:	6806      	ldr	r6, [r0, #0]
   3aa86:	b11e      	cbz	r6, 3aa90 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   3aa88:	4608      	mov	r0, r1
   3aa8a:	f7ff fff2 	bl	3aa72 <net_buf_frag_last>
   3aa8e:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   3aa90:	6025      	str	r5, [r4, #0]
}
   3aa92:	bd70      	pop	{r4, r5, r6, pc}

0003aa94 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   3aa94:	b538      	push	{r3, r4, r5, lr}
   3aa96:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   3aa98:	b138      	cbz	r0, 3aaaa <net_buf_frag_add+0x16>
   3aa9a:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   3aa9c:	f7ff ffe9 	bl	3aa72 <net_buf_frag_last>
   3aaa0:	4629      	mov	r1, r5
   3aaa2:	f7ff ffec 	bl	3aa7e <net_buf_frag_insert>

	return head;
   3aaa6:	4620      	mov	r0, r4
}
   3aaa8:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   3aaaa:	4608      	mov	r0, r1
   3aaac:	f7ff ffdd 	bl	3aa6a <net_buf_ref>
   3aab0:	e7fa      	b.n	3aaa8 <net_buf_frag_add+0x14>

0003aab2 <net_buf_simple_add>:
	return buf->data + buf->len;
   3aab2:	6802      	ldr	r2, [r0, #0]
   3aab4:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   3aab6:	4419      	add	r1, r3
   3aab8:	8081      	strh	r1, [r0, #4]
	return tail;
}
   3aaba:	18d0      	adds	r0, r2, r3
   3aabc:	4770      	bx	lr

0003aabe <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   3aabe:	b538      	push	{r3, r4, r5, lr}
   3aac0:	460d      	mov	r5, r1
   3aac2:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   3aac4:	4611      	mov	r1, r2
   3aac6:	f7ff fff4 	bl	3aab2 <net_buf_simple_add>
   3aaca:	4622      	mov	r2, r4
   3aacc:	4629      	mov	r1, r5
   3aace:	f7fc f949 	bl	36d64 <memcpy>
}
   3aad2:	bd38      	pop	{r3, r4, r5, pc}

0003aad4 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   3aad4:	b510      	push	{r4, lr}
   3aad6:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   3aad8:	2101      	movs	r1, #1
   3aada:	f7ff ffea 	bl	3aab2 <net_buf_simple_add>
	*u8 = val;
   3aade:	7004      	strb	r4, [r0, #0]

	return u8;
}
   3aae0:	bd10      	pop	{r4, pc}

0003aae2 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   3aae2:	b510      	push	{r4, lr}
   3aae4:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   3aae6:	2102      	movs	r1, #2
   3aae8:	f7ff ffe3 	bl	3aab2 <net_buf_simple_add>
	dst[0] = val;
   3aaec:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   3aaee:	0a24      	lsrs	r4, r4, #8
   3aaf0:	7044      	strb	r4, [r0, #1]
}
   3aaf2:	bd10      	pop	{r4, pc}

0003aaf4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   3aaf4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   3aaf6:	6800      	ldr	r0, [r0, #0]
   3aaf8:	1a40      	subs	r0, r0, r1
   3aafa:	6018      	str	r0, [r3, #0]
	buf->len += len;
   3aafc:	889a      	ldrh	r2, [r3, #4]
   3aafe:	4411      	add	r1, r2
   3ab00:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   3ab02:	4770      	bx	lr

0003ab04 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   3ab04:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   3ab06:	8882      	ldrh	r2, [r0, #4]
   3ab08:	1a52      	subs	r2, r2, r1
   3ab0a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   3ab0c:	6800      	ldr	r0, [r0, #0]
   3ab0e:	4408      	add	r0, r1
   3ab10:	6018      	str	r0, [r3, #0]
}
   3ab12:	4770      	bx	lr

0003ab14 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   3ab14:	4603      	mov	r3, r0
	void *data = buf->data;
   3ab16:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   3ab18:	889a      	ldrh	r2, [r3, #4]
   3ab1a:	1a52      	subs	r2, r2, r1
   3ab1c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   3ab1e:	4401      	add	r1, r0
   3ab20:	6019      	str	r1, [r3, #0]

	return data;
}
   3ab22:	4770      	bx	lr

0003ab24 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   3ab24:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   3ab26:	6803      	ldr	r3, [r0, #0]
   3ab28:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   3ab2a:	2101      	movs	r1, #1
   3ab2c:	f7ff ffea 	bl	3ab04 <net_buf_simple_pull>

	return val;
}
   3ab30:	4620      	mov	r0, r4
   3ab32:	bd10      	pop	{r4, pc}

0003ab34 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   3ab34:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   3ab36:	6803      	ldr	r3, [r0, #0]
   3ab38:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   3ab3a:	2102      	movs	r1, #2
   3ab3c:	f7ff ffe2 	bl	3ab04 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   3ab40:	4620      	mov	r0, r4
   3ab42:	bd10      	pop	{r4, pc}

0003ab44 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   3ab44:	6802      	ldr	r2, [r0, #0]
   3ab46:	6880      	ldr	r0, [r0, #8]
}
   3ab48:	1a10      	subs	r0, r2, r0
   3ab4a:	4770      	bx	lr

0003ab4c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   3ab4c:	b538      	push	{r3, r4, r5, lr}
   3ab4e:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   3ab50:	88c5      	ldrh	r5, [r0, #6]
   3ab52:	f7ff fff7 	bl	3ab44 <net_buf_simple_headroom>
   3ab56:	1a2d      	subs	r5, r5, r0
   3ab58:	88a0      	ldrh	r0, [r4, #4]
}
   3ab5a:	1a28      	subs	r0, r5, r0
   3ab5c:	bd38      	pop	{r3, r4, r5, pc}

0003ab5e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   3ab5e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   3ab60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   3ab64:	0089      	lsls	r1, r1, #2
   3ab66:	3138      	adds	r1, #56	; 0x38
}
   3ab68:	4408      	add	r0, r1
   3ab6a:	4770      	bx	lr

0003ab6c <get_sub_config>:
	const struct nrf_clock_control_config *config =
   3ab6c:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   3ab6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   3ab72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3ab76:	4770      	bx	lr

0003ab78 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   3ab78:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   3ab7a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   3ab7e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3ab82:	4770      	bx	lr

0003ab84 <get_status>:
{
   3ab84:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   3ab86:	b2c9      	uxtb	r1, r1
   3ab88:	f7ff ffe9 	bl	3ab5e <get_sub_data>
   3ab8c:	6880      	ldr	r0, [r0, #8]
}
   3ab8e:	f000 0007 	and.w	r0, r0, #7
   3ab92:	bd08      	pop	{r3, pc}

0003ab94 <set_off_state>:
	__asm__ volatile(
   3ab94:	f04f 0340 	mov.w	r3, #64	; 0x40
   3ab98:	f3ef 8211 	mrs	r2, BASEPRI
   3ab9c:	f383 8812 	msr	BASEPRI_MAX, r3
   3aba0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3aba4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   3aba6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   3abaa:	d001      	beq.n	3abb0 <set_off_state+0x1c>
   3abac:	428b      	cmp	r3, r1
   3abae:	d107      	bne.n	3abc0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   3abb0:	2301      	movs	r3, #1
   3abb2:	6003      	str	r3, [r0, #0]
	int err = 0;
   3abb4:	2000      	movs	r0, #0
	__asm__ volatile(
   3abb6:	f382 8811 	msr	BASEPRI, r2
   3abba:	f3bf 8f6f 	isb	sy
}
   3abbe:	4770      	bx	lr
		err = -EPERM;
   3abc0:	f04f 30ff 	mov.w	r0, #4294967295
   3abc4:	e7f7      	b.n	3abb6 <set_off_state+0x22>

0003abc6 <set_starting_state>:
{
   3abc6:	b410      	push	{r4}
	__asm__ volatile(
   3abc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   3abcc:	f3ef 8211 	mrs	r2, BASEPRI
   3abd0:	f383 8812 	msr	BASEPRI_MAX, r3
   3abd4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3abd8:	6803      	ldr	r3, [r0, #0]
   3abda:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3abde:	f003 0307 	and.w	r3, r3, #7
   3abe2:	2b01      	cmp	r3, #1
   3abe4:	d009      	beq.n	3abfa <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   3abe6:	428c      	cmp	r4, r1
   3abe8:	d00a      	beq.n	3ac00 <set_starting_state+0x3a>
		err = -EPERM;
   3abea:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   3abee:	f382 8811 	msr	BASEPRI, r2
   3abf2:	f3bf 8f6f 	isb	sy
}
   3abf6:	bc10      	pop	{r4}
   3abf8:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3abfa:	6001      	str	r1, [r0, #0]
	int err = 0;
   3abfc:	2000      	movs	r0, #0
   3abfe:	e7f6      	b.n	3abee <set_starting_state+0x28>
		err = -EALREADY;
   3ac00:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3ac04:	e7f3      	b.n	3abee <set_starting_state+0x28>

0003ac06 <set_on_state>:
	__asm__ volatile(
   3ac06:	f04f 0340 	mov.w	r3, #64	; 0x40
   3ac0a:	f3ef 8211 	mrs	r2, BASEPRI
   3ac0e:	f383 8812 	msr	BASEPRI_MAX, r3
   3ac12:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3ac16:	6803      	ldr	r3, [r0, #0]
   3ac18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3ac1c:	f043 0302 	orr.w	r3, r3, #2
   3ac20:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3ac22:	f382 8811 	msr	BASEPRI, r2
   3ac26:	f3bf 8f6f 	isb	sy
}
   3ac2a:	4770      	bx	lr

0003ac2c <clkstarted_handle>:
{
   3ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ac2e:	4606      	mov	r6, r0
   3ac30:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   3ac32:	f7ff ff94 	bl	3ab5e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   3ac36:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   3ac38:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   3ac3a:	2300      	movs	r3, #0
   3ac3c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   3ac40:	f7ff ffe1 	bl	3ac06 <set_on_state>
	if (callback) {
   3ac44:	b11d      	cbz	r5, 3ac4e <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3ac46:	463a      	mov	r2, r7
   3ac48:	4621      	mov	r1, r4
   3ac4a:	4630      	mov	r0, r6
   3ac4c:	47a8      	blx	r5
}
   3ac4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003ac50 <stop>:
{
   3ac50:	b570      	push	{r4, r5, r6, lr}
   3ac52:	4606      	mov	r6, r0
   3ac54:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   3ac56:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   3ac58:	4621      	mov	r1, r4
   3ac5a:	f7ff ff80 	bl	3ab5e <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   3ac5e:	4629      	mov	r1, r5
   3ac60:	3008      	adds	r0, #8
   3ac62:	f7ff ff97 	bl	3ab94 <set_off_state>
	if (err < 0) {
   3ac66:	2800      	cmp	r0, #0
   3ac68:	db06      	blt.n	3ac78 <stop+0x28>
	get_sub_config(dev, type)->stop();
   3ac6a:	4621      	mov	r1, r4
   3ac6c:	4630      	mov	r0, r6
   3ac6e:	f7ff ff7d 	bl	3ab6c <get_sub_config>
   3ac72:	6843      	ldr	r3, [r0, #4]
   3ac74:	4798      	blx	r3
	return 0;
   3ac76:	2000      	movs	r0, #0
}
   3ac78:	bd70      	pop	{r4, r5, r6, pc}

0003ac7a <api_stop>:
{
   3ac7a:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   3ac7c:	2280      	movs	r2, #128	; 0x80
   3ac7e:	f7ff ffe7 	bl	3ac50 <stop>
}
   3ac82:	bd08      	pop	{r3, pc}

0003ac84 <async_start>:
{
   3ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ac88:	4606      	mov	r6, r0
   3ac8a:	4690      	mov	r8, r2
   3ac8c:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   3ac8e:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   3ac90:	4629      	mov	r1, r5
   3ac92:	f7ff ff64 	bl	3ab5e <get_sub_data>
   3ac96:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   3ac98:	9906      	ldr	r1, [sp, #24]
   3ac9a:	3008      	adds	r0, #8
   3ac9c:	f7ff ff93 	bl	3abc6 <set_starting_state>
	if (err < 0) {
   3aca0:	2800      	cmp	r0, #0
   3aca2:	db09      	blt.n	3acb8 <async_start+0x34>
	subdata->cb = cb;
   3aca4:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   3aca8:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   3acaa:	4629      	mov	r1, r5
   3acac:	4630      	mov	r0, r6
   3acae:	f7ff ff5d 	bl	3ab6c <get_sub_config>
   3acb2:	6803      	ldr	r3, [r0, #0]
   3acb4:	4798      	blx	r3
	return 0;
   3acb6:	2000      	movs	r0, #0
}
   3acb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003acbc <api_start>:
{
   3acbc:	b510      	push	{r4, lr}
   3acbe:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3acc0:	2480      	movs	r4, #128	; 0x80
   3acc2:	9400      	str	r4, [sp, #0]
   3acc4:	f7ff ffde 	bl	3ac84 <async_start>
}
   3acc8:	b002      	add	sp, #8
   3acca:	bd10      	pop	{r4, pc}

0003accc <onoff_started_callback>:
{
   3accc:	b510      	push	{r4, lr}
   3acce:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   3acd0:	b2c9      	uxtb	r1, r1
   3acd2:	f7ff ff51 	bl	3ab78 <get_onoff_manager>
	notify(mgr, 0);
   3acd6:	2100      	movs	r1, #0
   3acd8:	47a0      	blx	r4
}
   3acda:	bd10      	pop	{r4, pc}

0003acdc <hfclk_start>:
{
   3acdc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3acde:	2001      	movs	r0, #1
   3ace0:	f7f3 fe56 	bl	2e990 <nrfx_clock_start>
}
   3ace4:	bd08      	pop	{r3, pc}

0003ace6 <lfclk_start>:
{
   3ace6:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3ace8:	2000      	movs	r0, #0
   3acea:	f7f3 fe51 	bl	2e990 <nrfx_clock_start>
}
   3acee:	bd08      	pop	{r3, pc}

0003acf0 <hfclk_stop>:
{
   3acf0:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3acf2:	2001      	movs	r0, #1
   3acf4:	f001 f8e6 	bl	3bec4 <nrfx_clock_stop>
}
   3acf8:	bd08      	pop	{r3, pc}

0003acfa <lfclk_stop>:
{
   3acfa:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3acfc:	2000      	movs	r0, #0
   3acfe:	f001 f8e1 	bl	3bec4 <nrfx_clock_stop>
}
   3ad02:	bd08      	pop	{r3, pc}

0003ad04 <blocking_start_callback>:
{
   3ad04:	b508      	push	{r3, lr}
   3ad06:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3ad08:	f7f5 fab0 	bl	3026c <z_impl_k_sem_give>
}
   3ad0c:	bd08      	pop	{r3, pc}

0003ad0e <get_pull>:
	if (flags & GPIO_PULL_UP) {
   3ad0e:	f010 0f10 	tst.w	r0, #16
   3ad12:	d104      	bne.n	3ad1e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   3ad14:	f010 0f20 	tst.w	r0, #32
   3ad18:	d103      	bne.n	3ad22 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   3ad1a:	2000      	movs	r0, #0
   3ad1c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   3ad1e:	2003      	movs	r0, #3
   3ad20:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   3ad22:	2001      	movs	r0, #1
}
   3ad24:	4770      	bx	lr

0003ad26 <gpio_nrfx_port_get_raw>:
	return port->config;
   3ad26:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ad28:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3ad2a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   3ad2e:	600b      	str	r3, [r1, #0]
}
   3ad30:	2000      	movs	r0, #0
   3ad32:	4770      	bx	lr

0003ad34 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   3ad34:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ad36:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3ad38:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3ad3c:	4042      	eors	r2, r0
   3ad3e:	400a      	ands	r2, r1
   3ad40:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3ad42:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   3ad46:	2000      	movs	r0, #0
   3ad48:	4770      	bx	lr

0003ad4a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   3ad4a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ad4c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3ad4e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   3ad52:	2000      	movs	r0, #0
   3ad54:	4770      	bx	lr

0003ad56 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   3ad56:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ad58:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3ad5a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   3ad5e:	2000      	movs	r0, #0
   3ad60:	4770      	bx	lr

0003ad62 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   3ad62:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ad64:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3ad66:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   3ad6a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   3ad6c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   3ad70:	2000      	movs	r0, #0
   3ad72:	4770      	bx	lr

0003ad74 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   3ad74:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   3ad78:	d007      	beq.n	3ad8a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3ad7a:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   3ad7e:	d00d      	beq.n	3ad9c <get_trigger+0x28>
   3ad80:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   3ad84:	d008      	beq.n	3ad98 <get_trigger+0x24>
   3ad86:	2001      	movs	r0, #1
}
   3ad88:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   3ad8a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   3ad8e:	d001      	beq.n	3ad94 <get_trigger+0x20>
   3ad90:	2005      	movs	r0, #5
   3ad92:	4770      	bx	lr
   3ad94:	2004      	movs	r0, #4
   3ad96:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3ad98:	2002      	movs	r0, #2
   3ad9a:	4770      	bx	lr
   3ad9c:	2003      	movs	r0, #3
   3ad9e:	4770      	bx	lr

0003ada0 <gpio_nrfx_manage_callback>:
{
   3ada0:	b470      	push	{r4, r5, r6}
	return port->data;
   3ada2:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   3ada4:	1d05      	adds	r5, r0, #4
	return list->head;
   3ada6:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   3ada8:	b1db      	cbz	r3, 3ade2 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   3adaa:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3adac:	2400      	movs	r4, #0
   3adae:	e00a      	b.n	3adc6 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   3adb0:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   3adb2:	6043      	str	r3, [r0, #4]
	return list->tail;
   3adb4:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   3adb6:	42a1      	cmp	r1, r4
   3adb8:	d10f      	bne.n	3adda <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   3adba:	606b      	str	r3, [r5, #4]
}
   3adbc:	e00d      	b.n	3adda <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   3adbe:	606c      	str	r4, [r5, #4]
}
   3adc0:	e00b      	b.n	3adda <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3adc2:	461c      	mov	r4, r3
   3adc4:	681b      	ldr	r3, [r3, #0]
   3adc6:	b15b      	cbz	r3, 3ade0 <gpio_nrfx_manage_callback+0x40>
   3adc8:	429e      	cmp	r6, r3
   3adca:	d1fa      	bne.n	3adc2 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   3adcc:	2c00      	cmp	r4, #0
   3adce:	d0ef      	beq.n	3adb0 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   3add0:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   3add2:	6023      	str	r3, [r4, #0]
	return list->tail;
   3add4:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   3add6:	4299      	cmp	r1, r3
   3add8:	d0f1      	beq.n	3adbe <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   3adda:	2300      	movs	r3, #0
   3addc:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3adde:	e000      	b.n	3ade2 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   3ade0:	b152      	cbz	r2, 3adf8 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   3ade2:	b162      	cbz	r2, 3adfe <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   3ade4:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   3ade6:	600b      	str	r3, [r1, #0]
	list->head = node;
   3ade8:	6041      	str	r1, [r0, #4]
	return list->tail;
   3adea:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   3adec:	b10b      	cbz	r3, 3adf2 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   3adee:	2000      	movs	r0, #0
   3adf0:	e006      	b.n	3ae00 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   3adf2:	6069      	str	r1, [r5, #4]
   3adf4:	2000      	movs	r0, #0
}
   3adf6:	e003      	b.n	3ae00 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   3adf8:	f06f 0015 	mvn.w	r0, #21
   3adfc:	e000      	b.n	3ae00 <gpio_nrfx_manage_callback+0x60>
	return 0;
   3adfe:	2000      	movs	r0, #0
}
   3ae00:	bc70      	pop	{r4, r5, r6}
   3ae02:	4770      	bx	lr

0003ae04 <nrfx_gpio_handler>:
{
   3ae04:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   3ae06:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   3ae0a:	0940      	lsrs	r0, r0, #5
   3ae0c:	f7f2 f98a 	bl	2d124 <get_dev>
	if (port == NULL) {
   3ae10:	b1d8      	cbz	r0, 3ae4a <nrfx_gpio_handler+0x46>
   3ae12:	4606      	mov	r6, r0
	return port->data;
   3ae14:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   3ae16:	2501      	movs	r5, #1
   3ae18:	40a5      	lsls	r5, r4
	return list->head;
   3ae1a:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3ae1c:	b119      	cbz	r1, 3ae26 <nrfx_gpio_handler+0x22>
   3ae1e:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   3ae20:	b149      	cbz	r1, 3ae36 <nrfx_gpio_handler+0x32>
	return node->next;
   3ae22:	680c      	ldr	r4, [r1, #0]
   3ae24:	e007      	b.n	3ae36 <nrfx_gpio_handler+0x32>
   3ae26:	460c      	mov	r4, r1
   3ae28:	e005      	b.n	3ae36 <nrfx_gpio_handler+0x32>
   3ae2a:	b164      	cbz	r4, 3ae46 <nrfx_gpio_handler+0x42>
   3ae2c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   3ae2e:	b104      	cbz	r4, 3ae32 <nrfx_gpio_handler+0x2e>
	return node->next;
   3ae30:	6823      	ldr	r3, [r4, #0]
   3ae32:	4621      	mov	r1, r4
   3ae34:	461c      	mov	r4, r3
   3ae36:	b141      	cbz	r1, 3ae4a <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   3ae38:	688a      	ldr	r2, [r1, #8]
   3ae3a:	402a      	ands	r2, r5
   3ae3c:	d0f5      	beq.n	3ae2a <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   3ae3e:	684b      	ldr	r3, [r1, #4]
   3ae40:	4630      	mov	r0, r6
   3ae42:	4798      	blx	r3
   3ae44:	e7f1      	b.n	3ae2a <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3ae46:	4623      	mov	r3, r4
   3ae48:	e7f3      	b.n	3ae32 <nrfx_gpio_handler+0x2e>
}
   3ae4a:	bd70      	pop	{r4, r5, r6, pc}

0003ae4c <wdt_nrf_disable>:
}
   3ae4c:	f04f 30ff 	mov.w	r0, #4294967295
   3ae50:	4770      	bx	lr

0003ae52 <wdt_event_handler>:
{
   3ae52:	b538      	push	{r3, r4, r5, lr}
   3ae54:	4605      	mov	r5, r0
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   3ae56:	2400      	movs	r4, #0
   3ae58:	e000      	b.n	3ae5c <wdt_event_handler+0xa>
   3ae5a:	3401      	adds	r4, #1
	return dev->data;
   3ae5c:	692a      	ldr	r2, [r5, #16]
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   3ae5e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   3ae62:	42a3      	cmp	r3, r4
   3ae64:	dd10      	ble.n	3ae88 <wdt_event_handler+0x36>
	return dev->config;
   3ae66:	686b      	ldr	r3, [r5, #4]
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   3ae68:	681b      	ldr	r3, [r3, #0]
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   3ae6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
   3ae6e:	b2e1      	uxtb	r1, r4
   3ae70:	40cb      	lsrs	r3, r1
   3ae72:	f013 0f01 	tst.w	r3, #1
   3ae76:	d0f0      	beq.n	3ae5a <wdt_event_handler+0x8>
			if (get_dev_data(dev)->m_callbacks[i]) {
   3ae78:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   3ae7c:	2b00      	cmp	r3, #0
   3ae7e:	d0ec      	beq.n	3ae5a <wdt_event_handler+0x8>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   3ae80:	4621      	mov	r1, r4
   3ae82:	4628      	mov	r0, r5
   3ae84:	4798      	blx	r3
   3ae86:	e7e8      	b.n	3ae5a <wdt_event_handler+0x8>
}
   3ae88:	bd38      	pop	{r3, r4, r5, pc}

0003ae8a <wdt_nrf_feed>:
{
   3ae8a:	b508      	push	{r3, lr}
	return dev->data;
   3ae8c:	6903      	ldr	r3, [r0, #16]
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   3ae8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3ae92:	428b      	cmp	r3, r1
   3ae94:	db05      	blt.n	3aea2 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   3ae96:	b2c9      	uxtb	r1, r1
   3ae98:	6840      	ldr	r0, [r0, #4]
   3ae9a:	f7f4 fd55 	bl	2f948 <nrfx_wdt_channel_feed>
	return 0;
   3ae9e:	2000      	movs	r0, #0
}
   3aea0:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3aea2:	f06f 0015 	mvn.w	r0, #21
   3aea6:	e7fb      	b.n	3aea0 <wdt_nrf_feed+0x16>

0003aea8 <wdt_nrf_setup>:
{
   3aea8:	b538      	push	{r3, r4, r5, lr}
   3aeaa:	4604      	mov	r4, r0
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   3aeac:	f011 0f01 	tst.w	r1, #1
   3aeb0:	d11b      	bne.n	3aeea <wdt_nrf_setup+0x42>
	behaviour = NRF_WDT_BEHAVIOUR_RUN_SLEEP_HALT;
   3aeb2:	2309      	movs	r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   3aeb4:	f011 0f02 	tst.w	r1, #2
   3aeb8:	d001      	beq.n	3aebe <wdt_nrf_setup+0x16>
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   3aeba:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
	return dev->config;
   3aebe:	6862      	ldr	r2, [r4, #4]
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   3aec0:	6812      	ldr	r2, [r2, #0]
    p_reg->CONFIG = behaviour;
   3aec2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
	return dev->config;
   3aec6:	6863      	ldr	r3, [r4, #4]
	nrf_wdt_reload_value_set(
   3aec8:	681d      	ldr	r5, [r3, #0]
	return dev->data;
   3aeca:	6923      	ldr	r3, [r4, #16]
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   3aecc:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   3aece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3aed2:	2300      	movs	r3, #0
   3aed4:	03c8      	lsls	r0, r1, #15
   3aed6:	0c49      	lsrs	r1, r1, #17
   3aed8:	f7d1 fe68 	bl	cbac <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   3aedc:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   3aee0:	6860      	ldr	r0, [r4, #4]
   3aee2:	f7f4 fcf7 	bl	2f8d4 <nrfx_wdt_enable>
}
   3aee6:	2000      	movs	r0, #0
   3aee8:	bd38      	pop	{r3, r4, r5, pc}
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   3aeea:	2308      	movs	r3, #8
   3aeec:	e7e2      	b.n	3aeb4 <wdt_nrf_setup+0xc>

0003aeee <shift_write_context>:
	w_ctx->flash_addr += shift;
   3aeee:	684b      	ldr	r3, [r1, #4]
   3aef0:	4403      	add	r3, r0
   3aef2:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   3aef4:	680b      	ldr	r3, [r1, #0]
   3aef6:	4403      	add	r3, r0
   3aef8:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   3aefa:	688b      	ldr	r3, [r1, #8]
   3aefc:	1a18      	subs	r0, r3, r0
   3aefe:	6088      	str	r0, [r1, #8]
}
   3af00:	4770      	bx	lr

0003af02 <erase_op>:
{
   3af02:	b570      	push	{r4, r5, r6, lr}
   3af04:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3af06:	f001 f84d 	bl	3bfa4 <nrfx_nvmc_flash_page_size_get>
   3af0a:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   3af0c:	7b23      	ldrb	r3, [r4, #12]
   3af0e:	b90b      	cbnz	r3, 3af14 <erase_op+0x12>
{
   3af10:	2500      	movs	r5, #0
   3af12:	e010      	b.n	3af36 <erase_op+0x34>
		nrf_flash_sync_get_timestamp_begin();
   3af14:	f000 ffe6 	bl	3bee4 <nrf_flash_sync_get_timestamp_begin>
   3af18:	e7fa      	b.n	3af10 <erase_op+0xe>
			nrfx_nvmc_page_partial_erase_init(e_ctx->flash_addr,
   3af1a:	2103      	movs	r1, #3
   3af1c:	f7f4 fc5a 	bl	2f7d4 <nrfx_nvmc_page_partial_erase_init>
			e_ctx->flash_addr_next += pg_size;
   3af20:	6923      	ldr	r3, [r4, #16]
   3af22:	4433      	add	r3, r6
   3af24:	6123      	str	r3, [r4, #16]
   3af26:	e00d      	b.n	3af44 <erase_op+0x42>
		RESUME_POFWARN();
   3af28:	f7f2 faea 	bl	2d500 <restore_pofwarn>
		i++;
   3af2c:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   3af2e:	7b23      	ldrb	r3, [r4, #12]
   3af30:	b99b      	cbnz	r3, 3af5a <erase_op+0x58>
	} while (e_ctx->len > 0);
   3af32:	68a3      	ldr	r3, [r4, #8]
   3af34:	b1b3      	cbz	r3, 3af64 <erase_op+0x62>
		if (SUSPEND_POFWARN()) {
   3af36:	f7f2 fab1 	bl	2d49c <suspend_pofwarn>
   3af3a:	b9c0      	cbnz	r0, 3af6e <erase_op+0x6c>
		if (e_ctx->flash_addr == e_ctx->flash_addr_next) {
   3af3c:	6860      	ldr	r0, [r4, #4]
   3af3e:	6923      	ldr	r3, [r4, #16]
   3af40:	4298      	cmp	r0, r3
   3af42:	d0ea      	beq.n	3af1a <erase_op+0x18>
		if (nrfx_nvmc_page_partial_erase_continue()) {
   3af44:	f7f4 fc62 	bl	2f80c <nrfx_nvmc_page_partial_erase_continue>
   3af48:	2800      	cmp	r0, #0
   3af4a:	d0ed      	beq.n	3af28 <erase_op+0x26>
			e_ctx->len -= pg_size;
   3af4c:	68a3      	ldr	r3, [r4, #8]
   3af4e:	1b9b      	subs	r3, r3, r6
   3af50:	60a3      	str	r3, [r4, #8]
			e_ctx->flash_addr += pg_size;
   3af52:	6863      	ldr	r3, [r4, #4]
   3af54:	4433      	add	r3, r6
   3af56:	6063      	str	r3, [r4, #4]
   3af58:	e7e6      	b.n	3af28 <erase_op+0x26>
			if (nrf_flash_sync_check_time_limit(i)) {
   3af5a:	4628      	mov	r0, r5
   3af5c:	f7f3 fd94 	bl	2ea88 <nrf_flash_sync_check_time_limit>
   3af60:	2800      	cmp	r0, #0
   3af62:	d0e6      	beq.n	3af32 <erase_op+0x30>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   3af64:	68a0      	ldr	r0, [r4, #8]
   3af66:	3800      	subs	r0, #0
   3af68:	bf18      	it	ne
   3af6a:	2001      	movne	r0, #1
}
   3af6c:	bd70      	pop	{r4, r5, r6, pc}
			return -ECANCELED;
   3af6e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3af72:	e7fb      	b.n	3af6c <erase_op+0x6a>

0003af74 <erase>:
{
   3af74:	b500      	push	{lr}
   3af76:	b087      	sub	sp, #28
	struct flash_context context = {
   3af78:	2300      	movs	r3, #0
   3af7a:	9301      	str	r3, [sp, #4]
   3af7c:	9304      	str	r3, [sp, #16]
   3af7e:	9002      	str	r0, [sp, #8]
   3af80:	9103      	str	r1, [sp, #12]
   3af82:	9005      	str	r0, [sp, #20]
	return	erase_op(&context);
   3af84:	a801      	add	r0, sp, #4
   3af86:	f7ff ffbc 	bl	3af02 <erase_op>
}
   3af8a:	b007      	add	sp, #28
   3af8c:	f85d fb04 	ldr.w	pc, [sp], #4

0003af90 <write_op>:
{
   3af90:	b538      	push	{r3, r4, r5, lr}
   3af92:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   3af94:	7b03      	ldrb	r3, [r0, #12]
   3af96:	b9f3      	cbnz	r3, 3afd6 <write_op+0x46>
{
   3af98:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   3af9a:	68a3      	ldr	r3, [r4, #8]
   3af9c:	2b03      	cmp	r3, #3
   3af9e:	d91d      	bls.n	3afdc <write_op+0x4c>
		if (SUSPEND_POFWARN()) {
   3afa0:	f7f2 fa7c 	bl	2d49c <suspend_pofwarn>
   3afa4:	b9f0      	cbnz	r0, 3afe4 <write_op+0x54>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   3afa6:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   3afa8:	6819      	ldr	r1, [r3, #0]
   3afaa:	6860      	ldr	r0, [r4, #4]
   3afac:	f000 ffea 	bl	3bf84 <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   3afb0:	f7f2 faa6 	bl	2d500 <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   3afb4:	4621      	mov	r1, r4
   3afb6:	2004      	movs	r0, #4
   3afb8:	f7ff ff99 	bl	3aeee <shift_write_context>
		i++;
   3afbc:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   3afbe:	7b23      	ldrb	r3, [r4, #12]
   3afc0:	2b00      	cmp	r3, #0
   3afc2:	d0ea      	beq.n	3af9a <write_op+0xa>
			if (nrf_flash_sync_check_time_limit(i)) {
   3afc4:	4628      	mov	r0, r5
   3afc6:	f7f3 fd5f 	bl	2ea88 <nrf_flash_sync_check_time_limit>
   3afca:	2800      	cmp	r0, #0
   3afcc:	d0e5      	beq.n	3af9a <write_op+0xa>
				nvmc_wait_ready();
   3afce:	f7f2 fa4f 	bl	2d470 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
   3afd2:	2001      	movs	r0, #1
   3afd4:	e005      	b.n	3afe2 <write_op+0x52>
		nrf_flash_sync_get_timestamp_begin();
   3afd6:	f000 ff85 	bl	3bee4 <nrf_flash_sync_get_timestamp_begin>
   3afda:	e7dd      	b.n	3af98 <write_op+0x8>
	nvmc_wait_ready();
   3afdc:	f7f2 fa48 	bl	2d470 <nvmc_wait_ready>
	return FLASH_OP_DONE;
   3afe0:	2000      	movs	r0, #0
}
   3afe2:	bd38      	pop	{r3, r4, r5, pc}
			return -ECANCELED;
   3afe4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3afe8:	e7fb      	b.n	3afe2 <write_op+0x52>

0003afea <write>:
{
   3afea:	b500      	push	{lr}
   3afec:	b087      	sub	sp, #28
	struct flash_context context = {
   3afee:	2300      	movs	r3, #0
   3aff0:	9304      	str	r3, [sp, #16]
   3aff2:	9305      	str	r3, [sp, #20]
   3aff4:	9101      	str	r1, [sp, #4]
   3aff6:	9002      	str	r0, [sp, #8]
   3aff8:	9203      	str	r2, [sp, #12]
	return write_op(&context);
   3affa:	a801      	add	r0, sp, #4
   3affc:	f7ff ffc8 	bl	3af90 <write_op>
}
   3b000:	b007      	add	sp, #28
   3b002:	f85d fb04 	ldr.w	pc, [sp], #4

0003b006 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3b006:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b008:	b083      	sub	sp, #12
   3b00a:	460e      	mov	r6, r1
   3b00c:	4617      	mov	r7, r2
   3b00e:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   3b010:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3b012:	2300      	movs	r3, #0
   3b014:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   3b016:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   3b018:	6953      	ldr	r3, [r2, #20]
   3b01a:	466a      	mov	r2, sp
   3b01c:	a901      	add	r1, sp, #4
   3b01e:	4798      	blx	r3

	while (layout_size--) {
   3b020:	e014      	b.n	3b04c <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   3b022:	6823      	ldr	r3, [r4, #0]
   3b024:	1af3      	subs	r3, r6, r3
   3b026:	fbb3 f5f0 	udiv	r5, r3, r0
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   3b02a:	6813      	ldr	r3, [r2, #0]
   3b02c:	42ab      	cmp	r3, r5
   3b02e:	bf28      	it	cs
   3b030:	462b      	movcs	r3, r5
		info->start_offset += (index_jmp * info->size);
   3b032:	6822      	ldr	r2, [r4, #0]
   3b034:	fb03 2000 	mla	r0, r3, r0, r2
   3b038:	6020      	str	r0, [r4, #0]
		info->index += index_jmp;
   3b03a:	68a2      	ldr	r2, [r4, #8]
   3b03c:	441a      	add	r2, r3
   3b03e:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3b040:	9a01      	ldr	r2, [sp, #4]
   3b042:	6811      	ldr	r1, [r2, #0]
   3b044:	4299      	cmp	r1, r3
   3b046:	d811      	bhi.n	3b06c <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   3b048:	3208      	adds	r2, #8
   3b04a:	9201      	str	r2, [sp, #4]
	while (layout_size--) {
   3b04c:	9b00      	ldr	r3, [sp, #0]
   3b04e:	1e5a      	subs	r2, r3, #1
   3b050:	9200      	str	r2, [sp, #0]
   3b052:	b13b      	cbz	r3, 3b064 <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   3b054:	9a01      	ldr	r2, [sp, #4]
   3b056:	6850      	ldr	r0, [r2, #4]
   3b058:	6060      	str	r0, [r4, #4]
		if (offs == 0) {
   3b05a:	2e00      	cmp	r6, #0
   3b05c:	d1e1      	bne.n	3b022 <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   3b05e:	68a3      	ldr	r3, [r4, #8]
   3b060:	1afd      	subs	r5, r7, r3
   3b062:	e7e2      	b.n	3b02a <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   3b064:	f06f 0015 	mvn.w	r0, #21
}
   3b068:	b003      	add	sp, #12
   3b06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return 0;
   3b06c:	2000      	movs	r0, #0
   3b06e:	e7fb      	b.n	3b068 <flash_get_page_info+0x62>

0003b070 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3b070:	b508      	push	{r3, lr}
   3b072:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3b074:	2200      	movs	r2, #0
   3b076:	f7ff ffc6 	bl	3b006 <flash_get_page_info>
}
   3b07a:	bd08      	pop	{r3, pc}

0003b07c <endtx_isr>:
	return dev->config;
   3b07c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b07e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   3b080:	f04f 0140 	mov.w	r1, #64	; 0x40
   3b084:	f3ef 8211 	mrs	r2, BASEPRI
   3b088:	f381 8812 	msr	BASEPRI_MAX, r1
   3b08c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b090:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3b094:	b131      	cbz	r1, 3b0a4 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b096:	2100      	movs	r1, #0
   3b098:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   3b09c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b0a0:	2101      	movs	r1, #1
   3b0a2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   3b0a4:	f382 8811 	msr	BASEPRI, r2
   3b0a8:	f3bf 8f6f 	isb	sy
}
   3b0ac:	4770      	bx	lr

0003b0ae <uarte_nrfx_isr_int>:
{
   3b0ae:	b538      	push	{r3, r4, r5, lr}
   3b0b0:	4604      	mov	r4, r0
	return dev->config;
   3b0b2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b0b4:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   3b0b6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3b0ba:	f413 7f80 	tst.w	r3, #256	; 0x100
   3b0be:	d003      	beq.n	3b0c8 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b0c0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   3b0c4:	2b00      	cmp	r3, #0
   3b0c6:	d139      	bne.n	3b13c <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   3b0c8:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3b0ca:	685b      	ldr	r3, [r3, #4]
   3b0cc:	f013 0f10 	tst.w	r3, #16
   3b0d0:	d01a      	beq.n	3b108 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   3b0d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   3b0d6:	f3ef 8211 	mrs	r2, BASEPRI
   3b0da:	f383 8812 	msr	BASEPRI_MAX, r3
   3b0de:	f3bf 8f6f 	isb	sy
   3b0e2:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3b0e6:	b113      	cbz	r3, 3b0ee <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3b0e8:	2300      	movs	r3, #0
   3b0ea:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   3b0ee:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   3b0f0:	68db      	ldr	r3, [r3, #12]
   3b0f2:	b10b      	cbz	r3, 3b0f8 <uarte_nrfx_isr_int+0x4a>
   3b0f4:	691b      	ldr	r3, [r3, #16]
   3b0f6:	b91b      	cbnz	r3, 3b100 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   3b0f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3b0fc:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   3b100:	f382 8811 	msr	BASEPRI, r2
   3b104:	f3bf 8f6f 	isb	sy
	return dev->data;
   3b108:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   3b10a:	68da      	ldr	r2, [r3, #12]
   3b10c:	b1aa      	cbz	r2, 3b13a <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b10e:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3b112:	b121      	cbz	r1, 3b11e <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   3b114:	2100      	movs	r1, #0
   3b116:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   3b118:	68da      	ldr	r2, [r3, #12]
   3b11a:	7b92      	ldrb	r2, [r2, #14]
   3b11c:	b98a      	cbnz	r2, 3b142 <uarte_nrfx_isr_int+0x94>
   3b11e:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3b122:	b122      	cbz	r2, 3b12e <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b124:	2200      	movs	r2, #0
   3b126:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   3b12a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   3b12e:	68da      	ldr	r2, [r3, #12]
   3b130:	6813      	ldr	r3, [r2, #0]
   3b132:	b113      	cbz	r3, 3b13a <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3b134:	6851      	ldr	r1, [r2, #4]
   3b136:	4620      	mov	r0, r4
   3b138:	4798      	blx	r3
}
   3b13a:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   3b13c:	f7ff ff9e 	bl	3b07c <endtx_isr>
   3b140:	e7c2      	b.n	3b0c8 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   3b142:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   3b146:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3b14a:	68db      	ldr	r3, [r3, #12]
   3b14c:	7399      	strb	r1, [r3, #14]
			return;
   3b14e:	e7f4      	b.n	3b13a <uarte_nrfx_isr_int+0x8c>

0003b150 <uarte_nrfx_configure>:
{
   3b150:	b570      	push	{r4, r5, r6, lr}
   3b152:	b082      	sub	sp, #8
   3b154:	4605      	mov	r5, r0
   3b156:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   3b158:	794b      	ldrb	r3, [r1, #5]
   3b15a:	2b01      	cmp	r3, #1
   3b15c:	d006      	beq.n	3b16c <uarte_nrfx_configure+0x1c>
   3b15e:	2b03      	cmp	r3, #3
   3b160:	d011      	beq.n	3b186 <uarte_nrfx_configure+0x36>
   3b162:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   3b166:	4618      	mov	r0, r3
   3b168:	b002      	add	sp, #8
   3b16a:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   3b16c:	2300      	movs	r3, #0
   3b16e:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   3b172:	79a3      	ldrb	r3, [r4, #6]
   3b174:	2b03      	cmp	r3, #3
   3b176:	d138      	bne.n	3b1ea <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   3b178:	79e3      	ldrb	r3, [r4, #7]
   3b17a:	b143      	cbz	r3, 3b18e <uarte_nrfx_configure+0x3e>
   3b17c:	2b01      	cmp	r3, #1
   3b17e:	d010      	beq.n	3b1a2 <uarte_nrfx_configure+0x52>
   3b180:	f06f 0385 	mvn.w	r3, #133	; 0x85
   3b184:	e7ef      	b.n	3b166 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   3b186:	2310      	movs	r3, #16
   3b188:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   3b18c:	e7f1      	b.n	3b172 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   3b18e:	2300      	movs	r3, #0
   3b190:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   3b194:	7923      	ldrb	r3, [r4, #4]
   3b196:	b143      	cbz	r3, 3b1aa <uarte_nrfx_configure+0x5a>
   3b198:	2b02      	cmp	r3, #2
   3b19a:	d022      	beq.n	3b1e2 <uarte_nrfx_configure+0x92>
   3b19c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   3b1a0:	e7e1      	b.n	3b166 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   3b1a2:	2301      	movs	r3, #1
   3b1a4:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   3b1a8:	e7f4      	b.n	3b194 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   3b1aa:	2300      	movs	r3, #0
   3b1ac:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   3b1b0:	6821      	ldr	r1, [r4, #0]
   3b1b2:	4628      	mov	r0, r5
   3b1b4:	f7f2 fbe2 	bl	2d97c <baudrate_set>
   3b1b8:	4603      	mov	r3, r0
   3b1ba:	b9c8      	cbnz	r0, 3b1f0 <uarte_nrfx_configure+0xa0>
	return dev->config;
   3b1bc:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   3b1be:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   3b1c0:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   3b1c4:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   3b1c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
   3b1cc:	4331      	orrs	r1, r6
   3b1ce:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   3b1d0:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   3b1d4:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   3b1d6:	3204      	adds	r2, #4
   3b1d8:	e894 0003 	ldmia.w	r4, {r0, r1}
   3b1dc:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   3b1e0:	e7c1      	b.n	3b166 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   3b1e2:	230e      	movs	r3, #14
   3b1e4:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   3b1e8:	e7e2      	b.n	3b1b0 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   3b1ea:	f06f 0385 	mvn.w	r3, #133	; 0x85
   3b1ee:	e7ba      	b.n	3b166 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   3b1f0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   3b1f4:	e7b7      	b.n	3b166 <uarte_nrfx_configure+0x16>

0003b1f6 <uarte_nrfx_config_get>:
{
   3b1f6:	460b      	mov	r3, r1
	return dev->data;
   3b1f8:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   3b1fa:	6891      	ldr	r1, [r2, #8]
   3b1fc:	6850      	ldr	r0, [r2, #4]
   3b1fe:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3b202:	2000      	movs	r0, #0
   3b204:	4770      	bx	lr

0003b206 <uarte_nrfx_err_check>:
	return dev->config;
   3b206:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b208:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3b20a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3b20e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3b212:	4770      	bx	lr

0003b214 <is_tx_ready>:
	return dev->config;
   3b214:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b216:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3b218:	685b      	ldr	r3, [r3, #4]
   3b21a:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b21e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3b222:	b929      	cbnz	r1, 3b230 <is_tx_ready+0x1c>
   3b224:	b933      	cbnz	r3, 3b234 <is_tx_ready+0x20>
   3b226:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   3b22a:	b92b      	cbnz	r3, 3b238 <is_tx_ready+0x24>
   3b22c:	2000      	movs	r0, #0
   3b22e:	4770      	bx	lr
   3b230:	2001      	movs	r0, #1
   3b232:	4770      	bx	lr
   3b234:	2000      	movs	r0, #0
   3b236:	4770      	bx	lr
   3b238:	2001      	movs	r0, #1
}
   3b23a:	4770      	bx	lr

0003b23c <uarte_enable>:
	return dev->config;
   3b23c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b23e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3b240:	2208      	movs	r2, #8
   3b242:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   3b246:	4770      	bx	lr

0003b248 <tx_start>:
{
   3b248:	b510      	push	{r4, lr}
	return dev->config;
   3b24a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b24c:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3b24e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3b252:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b256:	2300      	movs	r3, #0
   3b258:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   3b25c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   3b260:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   3b264:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   3b268:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3b26a:	685b      	ldr	r3, [r3, #4]
   3b26c:	f013 0f10 	tst.w	r3, #16
   3b270:	d102      	bne.n	3b278 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b272:	2301      	movs	r3, #1
   3b274:	60a3      	str	r3, [r4, #8]
}
   3b276:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   3b278:	2101      	movs	r1, #1
   3b27a:	f7ff ffdf 	bl	3b23c <uarte_enable>
    p_reg->INTENSET = mask;
   3b27e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3b282:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   3b286:	e7f4      	b.n	3b272 <tx_start+0x2a>

0003b288 <uarte_nrfx_poll_in>:
{
   3b288:	b410      	push	{r4}
	return dev->data;
   3b28a:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   3b28c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b28e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b290:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3b294:	b152      	cbz	r2, 3b2ac <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   3b296:	7d62      	ldrb	r2, [r4, #21]
   3b298:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b29a:	2000      	movs	r0, #0
   3b29c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3b2a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b2a4:	2201      	movs	r2, #1
   3b2a6:	601a      	str	r2, [r3, #0]
}
   3b2a8:	bc10      	pop	{r4}
   3b2aa:	4770      	bx	lr
		return -1;
   3b2ac:	f04f 30ff 	mov.w	r0, #4294967295
   3b2b0:	e7fa      	b.n	3b2a8 <uarte_nrfx_poll_in+0x20>

0003b2b2 <uarte_nrfx_fifo_fill>:
{
   3b2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b2b6:	4680      	mov	r8, r0
	return dev->data;
   3b2b8:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   3b2ba:	68fb      	ldr	r3, [r7, #12]
   3b2bc:	899e      	ldrh	r6, [r3, #12]
   3b2be:	4296      	cmp	r6, r2
   3b2c0:	bfa8      	it	ge
   3b2c2:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   3b2c4:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3b2c6:	2201      	movs	r2, #1
   3b2c8:	f3bf 8f5b 	dmb	ish
   3b2cc:	e853 0f00 	ldrex	r0, [r3]
   3b2d0:	2800      	cmp	r0, #0
   3b2d2:	d103      	bne.n	3b2dc <uarte_nrfx_fifo_fill+0x2a>
   3b2d4:	e843 2400 	strex	r4, r2, [r3]
   3b2d8:	2c00      	cmp	r4, #0
   3b2da:	d1f7      	bne.n	3b2cc <uarte_nrfx_fifo_fill+0x1a>
   3b2dc:	f3bf 8f5b 	dmb	ish
   3b2e0:	d101      	bne.n	3b2e6 <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   3b2e2:	2300      	movs	r3, #0
   3b2e4:	e006      	b.n	3b2f4 <uarte_nrfx_fifo_fill+0x42>
		return 0;
   3b2e6:	2600      	movs	r6, #0
   3b2e8:	e019      	b.n	3b31e <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   3b2ea:	68fc      	ldr	r4, [r7, #12]
   3b2ec:	68a4      	ldr	r4, [r4, #8]
   3b2ee:	5ccd      	ldrb	r5, [r1, r3]
   3b2f0:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   3b2f2:	3301      	adds	r3, #1
   3b2f4:	42b3      	cmp	r3, r6
   3b2f6:	dbf8      	blt.n	3b2ea <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   3b2f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   3b2fc:	f3ef 8411 	mrs	r4, BASEPRI
   3b300:	f383 8812 	msr	BASEPRI_MAX, r3
   3b304:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3b308:	4640      	mov	r0, r8
   3b30a:	f7ff ff83 	bl	3b214 <is_tx_ready>
   3b30e:	b948      	cbnz	r0, 3b324 <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   3b310:	68fb      	ldr	r3, [r7, #12]
   3b312:	2600      	movs	r6, #0
   3b314:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   3b316:	f384 8811 	msr	BASEPRI, r4
   3b31a:	f3bf 8f6f 	isb	sy
}
   3b31e:	4630      	mov	r0, r6
   3b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   3b324:	68fb      	ldr	r3, [r7, #12]
   3b326:	4632      	mov	r2, r6
   3b328:	6899      	ldr	r1, [r3, #8]
   3b32a:	4640      	mov	r0, r8
   3b32c:	f7ff ff8c 	bl	3b248 <tx_start>
   3b330:	e7f1      	b.n	3b316 <uarte_nrfx_fifo_fill+0x64>

0003b332 <uarte_nrfx_fifo_read>:
	return dev->config;
   3b332:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b334:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   3b336:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3b338:	2a00      	cmp	r2, #0
   3b33a:	dd0c      	ble.n	3b356 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b33c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   3b340:	b15a      	cbz	r2, 3b35a <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b342:	2200      	movs	r2, #0
   3b344:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   3b348:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   3b34c:	7d42      	ldrb	r2, [r0, #21]
   3b34e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b350:	2001      	movs	r0, #1
   3b352:	6018      	str	r0, [r3, #0]
}
   3b354:	4770      	bx	lr
	int num_rx = 0;
   3b356:	2000      	movs	r0, #0
   3b358:	4770      	bx	lr
   3b35a:	2000      	movs	r0, #0
}
   3b35c:	4770      	bx	lr

0003b35e <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   3b35e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b360:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   3b362:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   3b364:	f04f 0040 	mov.w	r0, #64	; 0x40
   3b368:	f3ef 8311 	mrs	r3, BASEPRI
   3b36c:	f380 8812 	msr	BASEPRI_MAX, r0
   3b370:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3b374:	68c9      	ldr	r1, [r1, #12]
   3b376:	2000      	movs	r0, #0
   3b378:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3b37a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3b37e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   3b382:	f383 8811 	msr	BASEPRI, r3
   3b386:	f3bf 8f6f 	isb	sy
}
   3b38a:	4770      	bx	lr

0003b38c <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   3b38c:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   3b38e:	68db      	ldr	r3, [r3, #12]
   3b390:	2201      	movs	r2, #1
   3b392:	739a      	strb	r2, [r3, #14]
}
   3b394:	4770      	bx	lr

0003b396 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   3b396:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b398:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   3b39a:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   3b39c:	68db      	ldr	r3, [r3, #12]
   3b39e:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3b3a0:	b94a      	cbnz	r2, 3b3b6 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b3a2:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3b3a6:	b15a      	cbz	r2, 3b3c0 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   3b3a8:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3b3ac:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   3b3b0:	d008      	beq.n	3b3c4 <uarte_nrfx_irq_tx_ready_complete+0x2e>
   3b3b2:	2001      	movs	r0, #1
   3b3b4:	e000      	b.n	3b3b8 <uarte_nrfx_irq_tx_ready_complete+0x22>
   3b3b6:	2000      	movs	r0, #0
	if (ready) {
   3b3b8:	b108      	cbz	r0, 3b3be <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   3b3ba:	2200      	movs	r2, #0
   3b3bc:	611a      	str	r2, [r3, #16]
}
   3b3be:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3b3c0:	2000      	movs	r0, #0
   3b3c2:	e7f9      	b.n	3b3b8 <uarte_nrfx_irq_tx_ready_complete+0x22>
   3b3c4:	2000      	movs	r0, #0
   3b3c6:	e7f7      	b.n	3b3b8 <uarte_nrfx_irq_tx_ready_complete+0x22>

0003b3c8 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   3b3c8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b3ca:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b3cc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3b3d0:	3800      	subs	r0, #0
   3b3d2:	bf18      	it	ne
   3b3d4:	2001      	movne	r0, #1
   3b3d6:	4770      	bx	lr

0003b3d8 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   3b3d8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b3da:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   3b3dc:	2210      	movs	r2, #16
   3b3de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3b3e2:	4770      	bx	lr

0003b3e4 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   3b3e4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b3e6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   3b3e8:	2210      	movs	r2, #16
   3b3ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3b3ee:	4770      	bx	lr

0003b3f0 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   3b3f0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b3f2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   3b3f4:	f44f 7200 	mov.w	r2, #512	; 0x200
   3b3f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3b3fc:	4770      	bx	lr

0003b3fe <uarte_nrfx_irq_err_disable>:
	return dev->config;
   3b3fe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b400:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   3b402:	f44f 7200 	mov.w	r2, #512	; 0x200
   3b406:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3b40a:	4770      	bx	lr

0003b40c <uarte_nrfx_irq_is_pending>:
{
   3b40c:	b538      	push	{r3, r4, r5, lr}
   3b40e:	4604      	mov	r4, r0
	return dev->config;
   3b410:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3b412:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   3b414:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3b418:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   3b41c:	d106      	bne.n	3b42c <uarte_nrfx_irq_is_pending+0x20>
   3b41e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   3b422:	f013 0f10 	tst.w	r3, #16
   3b426:	d107      	bne.n	3b438 <uarte_nrfx_irq_is_pending+0x2c>
   3b428:	2000      	movs	r0, #0
}
   3b42a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3b42c:	f7ff ffb3 	bl	3b396 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3b430:	2800      	cmp	r0, #0
   3b432:	d0f4      	beq.n	3b41e <uarte_nrfx_irq_is_pending+0x12>
		||
   3b434:	2001      	movs	r0, #1
   3b436:	e7f8      	b.n	3b42a <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   3b438:	4620      	mov	r0, r4
   3b43a:	f7ff ffc5 	bl	3b3c8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3b43e:	2800      	cmp	r0, #0
   3b440:	d0f3      	beq.n	3b42a <uarte_nrfx_irq_is_pending+0x1e>
		||
   3b442:	2001      	movs	r0, #1
   3b444:	e7f1      	b.n	3b42a <uarte_nrfx_irq_is_pending+0x1e>

0003b446 <uarte_nrfx_irq_update>:
}
   3b446:	2001      	movs	r0, #1
   3b448:	4770      	bx	lr

0003b44a <uarte_nrfx_irq_callback_set>:
	return dev->data;
   3b44a:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   3b44c:	68d8      	ldr	r0, [r3, #12]
   3b44e:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   3b450:	68db      	ldr	r3, [r3, #12]
   3b452:	605a      	str	r2, [r3, #4]
}
   3b454:	4770      	bx	lr

0003b456 <wait_tx_ready>:
{
   3b456:	b570      	push	{r4, r5, r6, lr}
   3b458:	4606      	mov	r6, r0
   3b45a:	e014      	b.n	3b486 <wait_tx_ready+0x30>
		if (res) {
   3b45c:	b17d      	cbz	r5, 3b47e <wait_tx_ready+0x28>
	__asm__ volatile(
   3b45e:	f04f 0340 	mov.w	r3, #64	; 0x40
   3b462:	f3ef 8411 	mrs	r4, BASEPRI
   3b466:	f383 8812 	msr	BASEPRI_MAX, r3
   3b46a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   3b46e:	4630      	mov	r0, r6
   3b470:	f7ff fed0 	bl	3b214 <is_tx_ready>
   3b474:	b9a0      	cbnz	r0, 3b4a0 <wait_tx_ready+0x4a>
	__asm__ volatile(
   3b476:	f384 8811 	msr	BASEPRI, r4
   3b47a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   3b47e:	2021      	movs	r0, #33	; 0x21
   3b480:	2100      	movs	r1, #0
   3b482:	f7f5 fcc7 	bl	30e14 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   3b486:	2464      	movs	r4, #100	; 0x64
   3b488:	4630      	mov	r0, r6
   3b48a:	f7ff fec3 	bl	3b214 <is_tx_ready>
   3b48e:	4605      	mov	r5, r0
   3b490:	2800      	cmp	r0, #0
   3b492:	d1e3      	bne.n	3b45c <wait_tx_ready+0x6>
   3b494:	2001      	movs	r0, #1
   3b496:	f000 fd37 	bl	3bf08 <nrfx_busy_wait>
   3b49a:	3c01      	subs	r4, #1
   3b49c:	d1f4      	bne.n	3b488 <wait_tx_ready+0x32>
   3b49e:	e7dd      	b.n	3b45c <wait_tx_ready+0x6>
}
   3b4a0:	4620      	mov	r0, r4
   3b4a2:	bd70      	pop	{r4, r5, r6, pc}

0003b4a4 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   3b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b4a6:	4604      	mov	r4, r0
	return dev->config;
   3b4a8:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   3b4aa:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   3b4ac:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3b4ae:	2100      	movs	r1, #0
   3b4b0:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   3b4b4:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   3b4b6:	f7f2 f993 	bl	2d7e0 <uarte_nrfx_pins_configure>
	return dev->data;
   3b4ba:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   3b4bc:	3104      	adds	r1, #4
   3b4be:	4620      	mov	r0, r4
   3b4c0:	f7ff fe46 	bl	3b150 <uarte_nrfx_configure>
	if (err) {
   3b4c4:	4604      	mov	r4, r0
   3b4c6:	bb68      	cbnz	r0, 3b524 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   3b4c8:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   3b4ca:	f013 0f02 	tst.w	r3, #2
   3b4ce:	d12b      	bne.n	3b528 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3b4d0:	2308      	movs	r3, #8
   3b4d2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   3b4d6:	7a33      	ldrb	r3, [r6, #8]
   3b4d8:	b95b      	cbnz	r3, 3b4f2 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b4da:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   3b4de:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   3b4e2:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3b4e6:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3b4ea:	2301      	movs	r3, #1
   3b4ec:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b4f0:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   3b4f2:	6873      	ldr	r3, [r6, #4]
   3b4f4:	f013 0f02 	tst.w	r3, #2
   3b4f8:	d103      	bne.n	3b502 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   3b4fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   3b4fe:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3b502:	6873      	ldr	r3, [r6, #4]
   3b504:	f013 0f10 	tst.w	r3, #16
   3b508:	d003      	beq.n	3b512 <uarte_instance_init+0x6e>
   3b50a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3b50e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   3b512:	3714      	adds	r7, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3b514:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3b518:	2300      	movs	r3, #0
   3b51a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b51e:	2301      	movs	r3, #1
   3b520:	60ab      	str	r3, [r5, #8]
   3b522:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   3b524:	4620      	mov	r0, r4
   3b526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   3b528:	4639      	mov	r1, r7
   3b52a:	4628      	mov	r0, r5
   3b52c:	f7f2 fb06 	bl	2db3c <endtx_stoptx_ppi_init>
		if (err < 0) {
   3b530:	2800      	cmp	r0, #0
   3b532:	dacd      	bge.n	3b4d0 <uarte_instance_init+0x2c>
			return err;
   3b534:	4604      	mov	r4, r0
   3b536:	e7f5      	b.n	3b524 <uarte_instance_init+0x80>

0003b538 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   3b538:	b510      	push	{r4, lr}
   3b53a:	4604      	mov	r4, r0
   3b53c:	2200      	movs	r2, #0
   3b53e:	2101      	movs	r1, #1
   3b540:	2002      	movs	r0, #2
   3b542:	f7e6 fddd 	bl	22100 <z_arm_irq_priority_set>
   3b546:	2002      	movs	r0, #2
   3b548:	f7e6 fda8 	bl	2209c <arch_irq_enable>
   3b54c:	2101      	movs	r1, #1
   3b54e:	4620      	mov	r0, r4
   3b550:	f7ff ffa8 	bl	3b4a4 <uarte_instance_init>
   3b554:	bd10      	pop	{r4, pc}

0003b556 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   3b556:	b510      	push	{r4, lr}
   3b558:	4604      	mov	r4, r0
   3b55a:	2200      	movs	r2, #0
   3b55c:	2101      	movs	r1, #1
   3b55e:	2028      	movs	r0, #40	; 0x28
   3b560:	f7e6 fdce 	bl	22100 <z_arm_irq_priority_set>
   3b564:	2028      	movs	r0, #40	; 0x28
   3b566:	f7e6 fd99 	bl	2209c <arch_irq_enable>
   3b56a:	2101      	movs	r1, #1
   3b56c:	4620      	mov	r0, r4
   3b56e:	f7ff ff99 	bl	3b4a4 <uarte_instance_init>
   3b572:	bd10      	pop	{r4, pc}

0003b574 <rng_pool_put>:
{
   3b574:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   3b576:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   3b578:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   3b57a:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   3b57c:	1a9a      	subs	r2, r3, r2
   3b57e:	ea34 0202 	bics.w	r2, r4, r2
   3b582:	d008      	beq.n	3b596 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   3b584:	18c2      	adds	r2, r0, r3
   3b586:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   3b588:	3301      	adds	r3, #1
   3b58a:	b25b      	sxtb	r3, r3
   3b58c:	4023      	ands	r3, r4
   3b58e:	7083      	strb	r3, [r0, #2]
	return 0;
   3b590:	2000      	movs	r0, #0
}
   3b592:	bc10      	pop	{r4}
   3b594:	4770      	bx	lr
		return -ENOBUFS;
   3b596:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3b59a:	e7fa      	b.n	3b592 <rng_pool_put+0x1e>

0003b59c <rng_pool_init>:
	rngp->first_alloc = 0U;
   3b59c:	2300      	movs	r3, #0
   3b59e:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   3b5a0:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   3b5a2:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   3b5a4:	3901      	subs	r1, #1
   3b5a6:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   3b5a8:	7102      	strb	r2, [r0, #4]
}
   3b5aa:	4770      	bx	lr

0003b5ac <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   3b5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b5ae:	b083      	sub	sp, #12
   3b5b0:	460f      	mov	r7, r1
   3b5b2:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   3b5b4:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   3b5b8:	2400      	movs	r4, #0
	int res = -EINVAL;
   3b5ba:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   3b5be:	e00a      	b.n	3b5d6 <entropy_cc3xx_rng_get_entropy+0x2a>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   3b5c0:	ab01      	add	r3, sp, #4
   3b5c2:	462a      	mov	r2, r5
   3b5c4:	1939      	adds	r1, r7, r4
   3b5c6:	2000      	movs	r0, #0
   3b5c8:	f7f6 fa66 	bl	31a98 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   3b5cc:	9b01      	ldr	r3, [sp, #4]
   3b5ce:	42ab      	cmp	r3, r5
   3b5d0:	d109      	bne.n	3b5e6 <entropy_cc3xx_rng_get_entropy+0x3a>
			return -EINVAL;
		}

		if (res != 0) {
   3b5d2:	b950      	cbnz	r0, 3b5ea <entropy_cc3xx_rng_get_entropy+0x3e>
			break;
		}

		offset += chunk_size;
   3b5d4:	442c      	add	r4, r5
	while (offset < length) {
   3b5d6:	42a6      	cmp	r6, r4
   3b5d8:	d907      	bls.n	3b5ea <entropy_cc3xx_rng_get_entropy+0x3e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   3b5da:	1b33      	subs	r3, r6, r4
   3b5dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   3b5e0:	d2ee      	bcs.n	3b5c0 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   3b5e2:	461d      	mov	r5, r3
   3b5e4:	e7ec      	b.n	3b5c0 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   3b5e6:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   3b5ea:	b003      	add	sp, #12
   3b5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003b5ee <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   3b5ee:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   3b5f0:	2200      	movs	r2, #0
   3b5f2:	4611      	mov	r1, r2
   3b5f4:	4610      	mov	r0, r2
   3b5f6:	f7f6 fa1b 	bl	31a30 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   3b5fa:	b900      	cbnz	r0, 3b5fe <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   3b5fc:	bd08      	pop	{r3, pc}
			return -EINVAL;
   3b5fe:	f06f 0015 	mvn.w	r0, #21
   3b602:	e7fb      	b.n	3b5fc <entropy_cc3xx_rng_init+0xe>

0003b604 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3b604:	4770      	bx	lr

0003b606 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   3b606:	1a40      	subs	r0, r0, r1
}
   3b608:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3b60c:	4770      	bx	lr

0003b60e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3b60e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   3b612:	009b      	lsls	r3, r3, #2
   3b614:	b29b      	uxth	r3, r3
   3b616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3b61a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   3b61e:	2200      	movs	r2, #0
   3b620:	601a      	str	r2, [r3, #0]
   3b622:	681b      	ldr	r3, [r3, #0]
}
   3b624:	4770      	bx	lr

0003b626 <absolute_time_to_cc>:
}
   3b626:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3b62a:	4770      	bx	lr

0003b62c <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   3b62c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   3b630:	b672      	cpsid	i
}
   3b632:	4770      	bx	lr

0003b634 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   3b634:	f380 8810 	msr	PRIMASK, r0
}
   3b638:	4770      	bx	lr

0003b63a <set_absolute_alarm>:
{
   3b63a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b63c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   3b63e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   3b642:	f7f2 fc07 	bl	2de54 <get_comparator>
   3b646:	4607      	mov	r7, r0
   3b648:	e019      	b.n	3b67e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   3b64a:	2013      	movs	r0, #19
   3b64c:	f001 fa2c 	bl	3caa8 <z_impl_k_busy_wait>
}
   3b650:	e022      	b.n	3b698 <set_absolute_alarm+0x5e>
		event_clear(chan);
   3b652:	4630      	mov	r0, r6
   3b654:	f7ff ffdb 	bl	3b60e <event_clear>
		event_enable(chan);
   3b658:	4630      	mov	r0, r6
   3b65a:	f7f2 fc03 	bl	2de64 <event_enable>
		set_comparator(chan, cc_val);
   3b65e:	4629      	mov	r1, r5
   3b660:	4630      	mov	r0, r6
   3b662:	f7f2 fbed 	bl	2de40 <set_comparator>
		now2 = counter();
   3b666:	f7f2 fc11 	bl	2de8c <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   3b66a:	4284      	cmp	r4, r0
   3b66c:	d01e      	beq.n	3b6ac <set_absolute_alarm+0x72>
   3b66e:	1c81      	adds	r1, r0, #2
   3b670:	4628      	mov	r0, r5
   3b672:	f7ff ffc8 	bl	3b606 <counter_sub>
	} while ((now2 != now) &&
   3b676:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3b67a:	d917      	bls.n	3b6ac <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   3b67c:	462f      	mov	r7, r5
		now = counter();
   3b67e:	f7f2 fc05 	bl	2de8c <counter>
   3b682:	4604      	mov	r4, r0
		set_comparator(chan, now);
   3b684:	4601      	mov	r1, r0
   3b686:	4630      	mov	r0, r6
   3b688:	f7f2 fbda 	bl	2de40 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   3b68c:	4621      	mov	r1, r4
   3b68e:	4638      	mov	r0, r7
   3b690:	f7ff ffb9 	bl	3b606 <counter_sub>
   3b694:	2801      	cmp	r0, #1
   3b696:	d0d8      	beq.n	3b64a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   3b698:	1ca7      	adds	r7, r4, #2
   3b69a:	4639      	mov	r1, r7
   3b69c:	4628      	mov	r0, r5
   3b69e:	f7ff ffb2 	bl	3b606 <counter_sub>
   3b6a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3b6a6:	d9d4      	bls.n	3b652 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   3b6a8:	463d      	mov	r5, r7
   3b6aa:	e7d2      	b.n	3b652 <set_absolute_alarm+0x18>
}
   3b6ac:	4628      	mov	r0, r5
   3b6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003b6b0 <compare_set>:
{
   3b6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b6b2:	b083      	sub	sp, #12
   3b6b4:	4604      	mov	r4, r0
   3b6b6:	4617      	mov	r7, r2
   3b6b8:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   3b6ba:	f7f2 fbed 	bl	2de98 <compare_int_lock>
   3b6be:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   3b6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b6c2:	9301      	str	r3, [sp, #4]
   3b6c4:	9b08      	ldr	r3, [sp, #32]
   3b6c6:	9300      	str	r3, [sp, #0]
   3b6c8:	463a      	mov	r2, r7
   3b6ca:	462b      	mov	r3, r5
   3b6cc:	4620      	mov	r0, r4
   3b6ce:	f7f2 fcd1 	bl	2e074 <compare_set_nolocks>
   3b6d2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   3b6d4:	4631      	mov	r1, r6
   3b6d6:	4620      	mov	r0, r4
   3b6d8:	f7f2 fc42 	bl	2df60 <compare_int_unlock>
}
   3b6dc:	4628      	mov	r0, r5
   3b6de:	b003      	add	sp, #12
   3b6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003b6e2 <sys_clock_cycle_get_32>:
{
   3b6e2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   3b6e4:	f7f2 fca6 	bl	2e034 <z_nrf_rtc_timer_read>
}
   3b6e8:	bd08      	pop	{r3, pc}

0003b6ea <event_packet_is_discardable>:
	switch (hdr->evt) {
   3b6ea:	7803      	ldrb	r3, [r0, #0]
   3b6ec:	2b3e      	cmp	r3, #62	; 0x3e
   3b6ee:	d003      	beq.n	3b6f8 <event_packet_is_discardable+0xe>
   3b6f0:	2bff      	cmp	r3, #255	; 0xff
   3b6f2:	d008      	beq.n	3b706 <event_packet_is_discardable+0x1c>
   3b6f4:	2000      	movs	r0, #0
   3b6f6:	4770      	bx	lr
		switch (me->subevent) {
   3b6f8:	7883      	ldrb	r3, [r0, #2]
   3b6fa:	2b02      	cmp	r3, #2
   3b6fc:	d001      	beq.n	3b702 <event_packet_is_discardable+0x18>
			return false;
   3b6fe:	2000      	movs	r0, #0
   3b700:	4770      	bx	lr
			return true;
   3b702:	2001      	movs	r0, #1
   3b704:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   3b706:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   3b708:	2b80      	cmp	r3, #128	; 0x80
   3b70a:	d001      	beq.n	3b710 <event_packet_is_discardable+0x26>
			return false;
   3b70c:	2000      	movs	r0, #0
}
   3b70e:	4770      	bx	lr
			return true;
   3b710:	2001      	movs	r0, #1
   3b712:	4770      	bx	lr

0003b714 <hci_driver_send>:
{
   3b714:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   3b716:	8983      	ldrh	r3, [r0, #12]
   3b718:	b183      	cbz	r3, 3b73c <hci_driver_send+0x28>
   3b71a:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   3b71c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   3b71e:	b14b      	cbz	r3, 3b734 <hci_driver_send+0x20>
   3b720:	2b02      	cmp	r3, #2
   3b722:	d10e      	bne.n	3b742 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   3b724:	f7f2 fe52 	bl	2e3cc <acl_handle>
   3b728:	4605      	mov	r5, r0
	if (!err) {
   3b72a:	b965      	cbnz	r5, 3b746 <hci_driver_send+0x32>
		net_buf_unref(buf);
   3b72c:	4620      	mov	r0, r4
   3b72e:	f7ff f976 	bl	3aa1e <net_buf_unref>
   3b732:	e008      	b.n	3b746 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   3b734:	f7f2 fe64 	bl	2e400 <cmd_handle>
   3b738:	4605      	mov	r5, r0
		break;
   3b73a:	e7f6      	b.n	3b72a <hci_driver_send+0x16>
		return -EINVAL;
   3b73c:	f06f 0515 	mvn.w	r5, #21
   3b740:	e001      	b.n	3b746 <hci_driver_send+0x32>
	switch (type) {
   3b742:	f06f 0515 	mvn.w	r5, #21
}
   3b746:	4628      	mov	r0, r5
   3b748:	bd38      	pop	{r3, r4, r5, pc}

0003b74a <fetch_and_process_hci_evt>:
{
   3b74a:	b538      	push	{r3, r4, r5, lr}
   3b74c:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   3b74e:	f04f 30ff 	mov.w	r0, #4294967295
   3b752:	f04f 31ff 	mov.w	r1, #4294967295
   3b756:	f7f2 fdc7 	bl	2e2e8 <multithreading_lock_acquire>
	if (!errcode) {
   3b75a:	4605      	mov	r5, r0
   3b75c:	b110      	cbz	r0, 3b764 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   3b75e:	b145      	cbz	r5, 3b772 <fetch_and_process_hci_evt+0x28>
		return false;
   3b760:	2000      	movs	r0, #0
}
   3b762:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   3b764:	4620      	mov	r0, r4
   3b766:	f7f3 f83b 	bl	2e7e0 <hci_internal_evt_get>
   3b76a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   3b76c:	f7f2 fdc6 	bl	2e2fc <multithreading_lock_release>
   3b770:	e7f5      	b.n	3b75e <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   3b772:	4620      	mov	r0, r4
   3b774:	f7f2 fe86 	bl	2e484 <event_packet_process>
	return true;
   3b778:	2001      	movs	r0, #1
   3b77a:	e7f2      	b.n	3b762 <fetch_and_process_hci_evt+0x18>

0003b77c <fetch_and_process_acl_data>:
{
   3b77c:	b538      	push	{r3, r4, r5, lr}
   3b77e:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   3b780:	f04f 30ff 	mov.w	r0, #4294967295
   3b784:	f04f 31ff 	mov.w	r1, #4294967295
   3b788:	f7f2 fdae 	bl	2e2e8 <multithreading_lock_acquire>
	if (!errcode) {
   3b78c:	4605      	mov	r5, r0
   3b78e:	b110      	cbz	r0, 3b796 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   3b790:	b145      	cbz	r5, 3b7a4 <fetch_and_process_acl_data+0x28>
		return false;
   3b792:	2000      	movs	r0, #0
}
   3b794:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   3b796:	4620      	mov	r0, r4
   3b798:	f7de fb3c 	bl	19e14 <sdc_hci_data_get>
   3b79c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   3b79e:	f7f2 fdad 	bl	2e2fc <multithreading_lock_release>
   3b7a2:	e7f5      	b.n	3b790 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   3b7a4:	4620      	mov	r0, r4
   3b7a6:	f7f2 fea5 	bl	2e4f4 <data_packet_process>
	return true;
   3b7aa:	2001      	movs	r0, #1
   3b7ac:	e7f2      	b.n	3b794 <fetch_and_process_acl_data+0x18>

0003b7ae <configure_supported_features>:
{
   3b7ae:	b508      	push	{r3, lr}
			err = sdc_support_scan();
   3b7b0:	f7d5 f942 	bl	10a38 <sdc_support_scan>
			if (err) {
   3b7b4:	b948      	cbnz	r0, 3b7ca <configure_supported_features+0x1c>
		err = sdc_support_master();
   3b7b6:	f7d5 f92f 	bl	10a18 <sdc_support_master>
		if (err) {
   3b7ba:	b948      	cbnz	r0, 3b7d0 <configure_supported_features+0x22>
		err = sdc_support_dle();
   3b7bc:	f7d5 f90c 	bl	109d8 <sdc_support_dle>
		if (err) {
   3b7c0:	b948      	cbnz	r0, 3b7d6 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   3b7c2:	f7d5 f919 	bl	109f8 <sdc_support_le_2m_phy>
		if (err) {
   3b7c6:	b948      	cbnz	r0, 3b7dc <configure_supported_features+0x2e>
}
   3b7c8:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   3b7ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3b7ce:	e7fb      	b.n	3b7c8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   3b7d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3b7d4:	e7f8      	b.n	3b7c8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   3b7d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3b7da:	e7f5      	b.n	3b7c8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   3b7dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3b7e0:	e7f2      	b.n	3b7c8 <configure_supported_features+0x1a>

0003b7e2 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   3b7e2:	f242 0344 	movw	r3, #8260	; 0x2044
   3b7e6:	4298      	cmp	r0, r3
   3b7e8:	d834      	bhi.n	3b854 <command_generates_command_complete_event+0x72>
   3b7ea:	f242 030d 	movw	r3, #8205	; 0x200d
   3b7ee:	4298      	cmp	r0, r3
   3b7f0:	d20b      	bcs.n	3b80a <command_generates_command_complete_event+0x28>
   3b7f2:	f240 4306 	movw	r3, #1030	; 0x406
   3b7f6:	4298      	cmp	r0, r3
   3b7f8:	d02e      	beq.n	3b858 <command_generates_command_complete_event+0x76>
   3b7fa:	f240 431d 	movw	r3, #1053	; 0x41d
   3b7fe:	4298      	cmp	r0, r3
   3b800:	d001      	beq.n	3b806 <command_generates_command_complete_event+0x24>
		return true;
   3b802:	2001      	movs	r0, #1
   3b804:	4770      	bx	lr
	switch (hci_opcode) {
   3b806:	2000      	movs	r0, #0
   3b808:	4770      	bx	lr
   3b80a:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   3b80e:	380d      	subs	r0, #13
   3b810:	2837      	cmp	r0, #55	; 0x37
   3b812:	d823      	bhi.n	3b85c <command_generates_command_complete_event+0x7a>
   3b814:	e8df f000 	tbb	[pc, r0]
   3b818:	2222221c 	.word	0x2222221c
   3b81c:	221c2222 	.word	0x221c2222
   3b820:	22221c22 	.word	0x22221c22
   3b824:	2222221c 	.word	0x2222221c
   3b828:	22222222 	.word	0x22222222
   3b82c:	22222222 	.word	0x22222222
   3b830:	22222222 	.word	0x22222222
   3b834:	22222222 	.word	0x22222222
   3b838:	22222222 	.word	0x22222222
   3b83c:	22221c22 	.word	0x22221c22
   3b840:	22222222 	.word	0x22222222
   3b844:	22222222 	.word	0x22222222
   3b848:	22222222 	.word	0x22222222
   3b84c:	1c1c2222 	.word	0x1c1c2222
   3b850:	2000      	movs	r0, #0
   3b852:	4770      	bx	lr
		return true;
   3b854:	2001      	movs	r0, #1
   3b856:	4770      	bx	lr
	switch (hci_opcode) {
   3b858:	2000      	movs	r0, #0
   3b85a:	4770      	bx	lr
		return true;
   3b85c:	2001      	movs	r0, #1
}
   3b85e:	4770      	bx	lr

0003b860 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3b860:	230f      	movs	r3, #15
   3b862:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3b864:	2304      	movs	r3, #4
   3b866:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   3b868:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   3b86a:	2301      	movs	r3, #1
   3b86c:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   3b86e:	8081      	strh	r1, [r0, #4]
}
   3b870:	4770      	bx	lr

0003b872 <encode_command_complete_header>:
{
   3b872:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   3b874:	240e      	movs	r4, #14
   3b876:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   3b878:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   3b87a:	2201      	movs	r2, #1
   3b87c:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   3b87e:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   3b882:	7143      	strb	r3, [r0, #5]
}
   3b884:	bc10      	pop	{r4}
   3b886:	4770      	bx	lr

0003b888 <le_read_supported_states>:
	*buf = states1;
   3b888:	2370      	movs	r3, #112	; 0x70
   3b88a:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   3b88c:	2340      	movs	r3, #64	; 0x40
   3b88e:	7103      	strb	r3, [r0, #4]
}
   3b890:	4770      	bx	lr

0003b892 <status_param_cmd_put>:
}
   3b892:	2001      	movs	r0, #1
   3b894:	4770      	bx	lr

0003b896 <link_control_cmd_put>:
{
   3b896:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   3b898:	7842      	ldrb	r2, [r0, #1]
   3b89a:	f810 3b03 	ldrb.w	r3, [r0], #3
   3b89e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3b8a2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   3b8a4:	f240 4206 	movw	r2, #1030	; 0x406
   3b8a8:	4293      	cmp	r3, r2
   3b8aa:	d005      	beq.n	3b8b8 <link_control_cmd_put+0x22>
   3b8ac:	f240 421d 	movw	r2, #1053	; 0x41d
   3b8b0:	4293      	cmp	r3, r2
   3b8b2:	d004      	beq.n	3b8be <link_control_cmd_put+0x28>
   3b8b4:	2001      	movs	r0, #1
}
   3b8b6:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   3b8b8:	f7de fc03 	bl	1a0c2 <sdc_hci_cmd_lc_disconnect>
   3b8bc:	e7fb      	b.n	3b8b6 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   3b8be:	f7de fc02 	bl	1a0c6 <sdc_hci_cmd_lc_read_remote_version_information>
   3b8c2:	e7f8      	b.n	3b8b6 <link_control_cmd_put+0x20>

0003b8c4 <controller_and_baseband_cmd_put>:
{
   3b8c4:	b538      	push	{r3, r4, r5, lr}
   3b8c6:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   3b8c8:	3003      	adds	r0, #3
   3b8ca:	7865      	ldrb	r5, [r4, #1]
   3b8cc:	7823      	ldrb	r3, [r4, #0]
   3b8ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   3b8d2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   3b8d4:	f640 4463 	movw	r4, #3171	; 0xc63
   3b8d8:	42a3      	cmp	r3, r4
   3b8da:	d02c      	beq.n	3b936 <controller_and_baseband_cmd_put+0x72>
   3b8dc:	f101 0106 	add.w	r1, r1, #6
   3b8e0:	dc16      	bgt.n	3b910 <controller_and_baseband_cmd_put+0x4c>
   3b8e2:	f640 4403 	movw	r4, #3075	; 0xc03
   3b8e6:	42a3      	cmp	r3, r4
   3b8e8:	d022      	beq.n	3b930 <controller_and_baseband_cmd_put+0x6c>
   3b8ea:	f640 442d 	movw	r4, #3117	; 0xc2d
   3b8ee:	42a3      	cmp	r3, r4
   3b8f0:	d105      	bne.n	3b8fe <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   3b8f2:	7813      	ldrb	r3, [r2, #0]
   3b8f4:	3303      	adds	r3, #3
   3b8f6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   3b8f8:	f7de fab3 	bl	19e62 <sdc_hci_cmd_cb_read_transmit_power_level>
   3b8fc:	e007      	b.n	3b90e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   3b8fe:	f640 4201 	movw	r2, #3073	; 0xc01
   3b902:	4293      	cmp	r3, r2
   3b904:	d102      	bne.n	3b90c <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   3b906:	f7de faae 	bl	19e66 <sdc_hci_cmd_cb_set_event_mask>
   3b90a:	e000      	b.n	3b90e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   3b90c:	2001      	movs	r0, #1
}
   3b90e:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   3b910:	f640 447b 	movw	r4, #3195	; 0xc7b
   3b914:	42a3      	cmp	r3, r4
   3b916:	d011      	beq.n	3b93c <controller_and_baseband_cmd_put+0x78>
   3b918:	f640 447c 	movw	r4, #3196	; 0xc7c
   3b91c:	42a3      	cmp	r3, r4
   3b91e:	d105      	bne.n	3b92c <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   3b920:	7813      	ldrb	r3, [r2, #0]
   3b922:	3302      	adds	r3, #2
   3b924:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   3b926:	f7de faa8 	bl	19e7a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   3b92a:	e7f0      	b.n	3b90e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   3b92c:	2001      	movs	r0, #1
   3b92e:	e7ee      	b.n	3b90e <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   3b930:	f7d5 f9c2 	bl	10cb8 <sdc_hci_cmd_cb_reset>
   3b934:	e7eb      	b.n	3b90e <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   3b936:	f7de fa9b 	bl	19e70 <sdc_hci_cmd_cb_set_event_mask_page_2>
   3b93a:	e7e8      	b.n	3b90e <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   3b93c:	7813      	ldrb	r3, [r2, #0]
   3b93e:	3304      	adds	r3, #4
   3b940:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   3b942:	f7de fa8c 	bl	19e5e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   3b946:	e7e2      	b.n	3b90e <controller_and_baseband_cmd_put+0x4a>

0003b948 <supported_commands>:
{
   3b948:	b510      	push	{r4, lr}
   3b94a:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   3b94c:	222e      	movs	r2, #46	; 0x2e
   3b94e:	2100      	movs	r1, #0
   3b950:	f7fb fa2c 	bl	36dac <memset>
	cmds->hci_disconnect = 1;
   3b954:	7823      	ldrb	r3, [r4, #0]
   3b956:	f043 0320 	orr.w	r3, r3, #32
   3b95a:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   3b95c:	78a3      	ldrb	r3, [r4, #2]
   3b95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3b962:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   3b964:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   3b966:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   3b96a:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   3b96c:	7aa3      	ldrb	r3, [r4, #10]
   3b96e:	f043 0304 	orr.w	r3, r3, #4
   3b972:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   3b974:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   3b976:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   3b97a:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   3b97c:	7be3      	ldrb	r3, [r4, #15]
   3b97e:	f043 0302 	orr.w	r3, r3, #2
   3b982:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   3b984:	7da3      	ldrb	r3, [r4, #22]
   3b986:	f043 0304 	orr.w	r3, r3, #4
   3b98a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   3b98c:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   3b98e:	f043 0317 	orr.w	r3, r3, #23
   3b992:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   3b994:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   3b996:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
   3b99a:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_rand = 1;
   3b99c:	23ff      	movs	r3, #255	; 0xff
   3b99e:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   3b9a0:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   3b9a2:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   3b9a6:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   3b9a8:	f894 3020 	ldrb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   3b9ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   3b9b0:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   3b9b4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   3b9b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   3b9bc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   3b9c0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   3b9c4:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   3b9c8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   3b9cc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   3b9d0:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
   3b9d4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   3b9d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   3b9dc:	f043 0301 	orr.w	r3, r3, #1
   3b9e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   3b9e4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   3b9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3b9ec:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   3b9f0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   3b9f4:	f043 0304 	orr.w	r3, r3, #4
   3b9f8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   3b9fc:	bd10      	pop	{r4, pc}

0003b9fe <supported_features>:
{
   3b9fe:	b510      	push	{r4, lr}
   3ba00:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   3ba02:	2208      	movs	r2, #8
   3ba04:	2100      	movs	r1, #0
   3ba06:	f7fb f9d1 	bl	36dac <memset>
	features->bdedr_not_supported = 1;
   3ba0a:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   3ba0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   3ba10:	7123      	strb	r3, [r4, #4]
}
   3ba12:	bd10      	pop	{r4, pc}

0003ba14 <info_param_cmd_put>:
{
   3ba14:	b538      	push	{r3, r4, r5, lr}
   3ba16:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   3ba18:	1d88      	adds	r0, r1, #6
   3ba1a:	7865      	ldrb	r5, [r4, #1]
   3ba1c:	7823      	ldrb	r3, [r4, #0]
   3ba1e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   3ba22:	b21b      	sxth	r3, r3
	switch (opcode)	{
   3ba24:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   3ba28:	3b01      	subs	r3, #1
   3ba2a:	2b08      	cmp	r3, #8
   3ba2c:	d820      	bhi.n	3ba70 <info_param_cmd_put+0x5c>
   3ba2e:	e8df f003 	tbb	[pc, r3]
   3ba32:	0b05      	.short	0x0b05
   3ba34:	1f1f1f12 	.word	0x1f1f1f12
   3ba38:	1f1f      	.short	0x1f1f
   3ba3a:	19          	.byte	0x19
   3ba3b:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   3ba3c:	7813      	ldrb	r3, [r2, #0]
   3ba3e:	3308      	adds	r3, #8
   3ba40:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   3ba42:	f7de faf7 	bl	1a034 <sdc_hci_cmd_ip_read_local_version_information>
   3ba46:	e014      	b.n	3ba72 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   3ba48:	7813      	ldrb	r3, [r2, #0]
   3ba4a:	3340      	adds	r3, #64	; 0x40
   3ba4c:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   3ba4e:	f7ff ff7b 	bl	3b948 <supported_commands>
		return 0;
   3ba52:	2000      	movs	r0, #0
   3ba54:	e00d      	b.n	3ba72 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   3ba56:	7813      	ldrb	r3, [r2, #0]
   3ba58:	3308      	adds	r3, #8
   3ba5a:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   3ba5c:	f7ff ffcf 	bl	3b9fe <supported_features>
		return 0;
   3ba60:	2000      	movs	r0, #0
   3ba62:	e006      	b.n	3ba72 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   3ba64:	7813      	ldrb	r3, [r2, #0]
   3ba66:	3306      	adds	r3, #6
   3ba68:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   3ba6a:	f7de fae1 	bl	1a030 <sdc_hci_cmd_ip_read_bd_addr>
   3ba6e:	e000      	b.n	3ba72 <info_param_cmd_put+0x5e>
   3ba70:	2001      	movs	r0, #1
}
   3ba72:	bd38      	pop	{r3, r4, r5, pc}

0003ba74 <le_supported_features>:
{
   3ba74:	b510      	push	{r4, lr}
   3ba76:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   3ba78:	2205      	movs	r2, #5
   3ba7a:	2100      	movs	r1, #0
   3ba7c:	f7fb f996 	bl	36dac <memset>
	features->le_encryption = 1;
   3ba80:	7823      	ldrb	r3, [r4, #0]
	features->extended_scanner_filter_policies = 1;
   3ba82:	f043 03f5 	orr.w	r3, r3, #245	; 0xf5
   3ba86:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   3ba88:	7863      	ldrb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   3ba8a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   3ba8e:	7063      	strb	r3, [r4, #1]
}
   3ba90:	bd10      	pop	{r4, pc}

0003ba92 <vs_zephyr_supported_commands>:
{
   3ba92:	b510      	push	{r4, lr}
   3ba94:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   3ba96:	2202      	movs	r2, #2
   3ba98:	2100      	movs	r1, #0
   3ba9a:	f7fb f987 	bl	36dac <memset>
	cmds->read_version_info = 1;
   3ba9e:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   3baa0:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   3baa4:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   3baa6:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   3baa8:	f043 0307 	orr.w	r3, r3, #7
   3baac:	7063      	strb	r3, [r4, #1]
}
   3baae:	bd10      	pop	{r4, pc}

0003bab0 <vs_supported_commands>:
{
   3bab0:	b510      	push	{r4, lr}
   3bab2:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   3bab4:	2201      	movs	r2, #1
   3bab6:	2100      	movs	r1, #0
   3bab8:	f7fb f978 	bl	36dac <memset>
	cmds->read_supported_vs_commands = 1;
   3babc:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   3babe:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   3bac2:	7023      	strb	r3, [r4, #0]
}
   3bac4:	bd10      	pop	{r4, pc}

0003bac6 <le_controller_cmd_put>:
{
   3bac6:	b538      	push	{r3, r4, r5, lr}
   3bac8:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   3baca:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   3bacc:	3106      	adds	r1, #6
   3bace:	7865      	ldrb	r5, [r4, #1]
   3bad0:	7823      	ldrb	r3, [r4, #0]
   3bad2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   3bad6:	b21b      	sxth	r3, r3
	switch (opcode)	{
   3bad8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   3badc:	3b01      	subs	r3, #1
   3bade:	2b4d      	cmp	r3, #77	; 0x4d
   3bae0:	f200 80c4 	bhi.w	3bc6c <le_controller_cmd_put+0x1a6>
   3bae4:	e8df f003 	tbb	[pc, r3]
   3bae8:	c2312a27 	.word	0xc2312a27
   3baec:	c2c2c239 	.word	0xc2c2c239
   3baf0:	3f3cc2c2 	.word	0x3f3cc2c2
   3baf4:	4f484542 	.word	0x4f484542
   3baf8:	5b585552 	.word	0x5b585552
   3bafc:	6d67645e 	.word	0x6d67645e
   3bb00:	77c2c274 	.word	0x77c2c274
   3bb04:	c2c2c2c2 	.word	0xc2c2c2c2
   3bb08:	8c857fc2 	.word	0x8c857fc2
   3bb0c:	928fc2c2 	.word	0x928fc2c2
   3bb10:	c2c29895 	.word	0xc2c29895
   3bb14:	aca5a29f 	.word	0xaca5a29f
   3bb18:	c2c2b5b2 	.word	0xc2c2b5b2
   3bb1c:	c2c2c2c2 	.word	0xc2c2c2c2
   3bb20:	c2c2c2c2 	.word	0xc2c2c2c2
   3bb24:	c2c2c2c2 	.word	0xc2c2c2c2
   3bb28:	c2c2c2c2 	.word	0xc2c2c2c2
   3bb2c:	c2c2c2c2 	.word	0xc2c2c2c2
   3bb30:	c2b8c2c2 	.word	0xc2b8c2c2
   3bb34:	bfc2      	.short	0xbfc2
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   3bb36:	f7de faaf 	bl	1a098 <sdc_hci_cmd_le_set_event_mask>
   3bb3a:	e098      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   3bb3c:	7813      	ldrb	r3, [r2, #0]
   3bb3e:	3303      	adds	r3, #3
   3bb40:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   3bb42:	4608      	mov	r0, r1
   3bb44:	f7de fa8c 	bl	1a060 <sdc_hci_cmd_le_read_buffer_size>
   3bb48:	e091      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   3bb4a:	7813      	ldrb	r3, [r2, #0]
   3bb4c:	3308      	adds	r3, #8
   3bb4e:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   3bb50:	4608      	mov	r0, r1
   3bb52:	f7ff ff8f 	bl	3ba74 <le_supported_features>
		return 0;
   3bb56:	2000      	movs	r0, #0
   3bb58:	e089      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   3bb5a:	f7de faa8 	bl	1a0ae <sdc_hci_cmd_le_set_random_address>
   3bb5e:	e086      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   3bb60:	f7de faab 	bl	1a0ba <sdc_hci_cmd_le_set_scan_params>
   3bb64:	e083      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   3bb66:	f7de faa6 	bl	1a0b6 <sdc_hci_cmd_le_set_scan_enable>
   3bb6a:	e080      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   3bb6c:	f7de fa6e 	bl	1a04c <sdc_hci_cmd_le_create_conn>
   3bb70:	e07d      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn_cancel();
   3bb72:	f7de fa6d 	bl	1a050 <sdc_hci_cmd_le_create_conn_cancel>
   3bb76:	e07a      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   3bb78:	7813      	ldrb	r3, [r2, #0]
   3bb7a:	3301      	adds	r3, #1
   3bb7c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   3bb7e:	4608      	mov	r0, r1
   3bb80:	f7de fa7e 	bl	1a080 <sdc_hci_cmd_le_read_white_list_size>
   3bb84:	e073      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_white_list();
   3bb86:	f7de fa5d 	bl	1a044 <sdc_hci_cmd_le_clear_white_list>
   3bb8a:	e070      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   3bb8c:	f7de fa56 	bl	1a03c <sdc_hci_cmd_le_add_device_to_white_list>
   3bb90:	e06d      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   3bb92:	f7de fa79 	bl	1a088 <sdc_hci_cmd_le_remove_device_from_white_list>
   3bb96:	e06a      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   3bb98:	f7de fa56 	bl	1a048 <sdc_hci_cmd_le_conn_update>
   3bb9c:	e067      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   3bb9e:	f7de fa80 	bl	1a0a2 <sdc_hci_cmd_le_set_host_channel_classification>
   3bba2:	e064      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   3bba4:	7813      	ldrb	r3, [r2, #0]
   3bba6:	3307      	adds	r3, #7
   3bba8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   3bbaa:	f7de fa5b 	bl	1a064 <sdc_hci_cmd_le_read_channel_map>
   3bbae:	e05e      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   3bbb0:	f7de fa5e 	bl	1a070 <sdc_hci_cmd_le_read_remote_features>
   3bbb4:	e05b      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   3bbb6:	7813      	ldrb	r3, [r2, #0]
   3bbb8:	3310      	adds	r3, #16
   3bbba:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   3bbbc:	f7de fa4c 	bl	1a058 <sdc_hci_cmd_le_encrypt>
   3bbc0:	e055      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   3bbc2:	7813      	ldrb	r3, [r2, #0]
   3bbc4:	3308      	adds	r3, #8
   3bbc6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   3bbc8:	4608      	mov	r0, r1
   3bbca:	f7de fa47 	bl	1a05c <sdc_hci_cmd_le_rand>
   3bbce:	e04e      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   3bbd0:	f7de fa40 	bl	1a054 <sdc_hci_cmd_le_enable_encryption>
   3bbd4:	e04b      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   3bbd6:	7813      	ldrb	r3, [r2, #0]
   3bbd8:	3308      	adds	r3, #8
   3bbda:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   3bbdc:	4608      	mov	r0, r1
   3bbde:	f7ff fe53 	bl	3b888 <le_read_supported_states>
		return 0;
   3bbe2:	2000      	movs	r0, #0
   3bbe4:	e043      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   3bbe6:	7813      	ldrb	r3, [r2, #0]
   3bbe8:	3302      	adds	r3, #2
   3bbea:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   3bbec:	f7de fa50 	bl	1a090 <sdc_hci_cmd_le_set_data_length>
   3bbf0:	e03d      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out +=
   3bbf2:	7813      	ldrb	r3, [r2, #0]
   3bbf4:	3304      	adds	r3, #4
   3bbf6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   3bbf8:	4608      	mov	r0, r1
   3bbfa:	f7de fa3d 	bl	1a078 <sdc_hci_cmd_le_read_suggested_default_data_length>
   3bbfe:	e036      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   3bc00:	f7de fa5d 	bl	1a0be <sdc_hci_cmd_le_write_suggested_default_data_length>
   3bc04:	e033      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   3bc06:	f7de fa17 	bl	1a038 <sdc_hci_cmd_le_add_device_to_resolving_list>
   3bc0a:	e030      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   3bc0c:	f7de fa3a 	bl	1a084 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   3bc10:	e02d      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_resolving_list();
   3bc12:	f7de fa15 	bl	1a040 <sdc_hci_cmd_le_clear_resolving_list>
   3bc16:	e02a      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   3bc18:	7813      	ldrb	r3, [r2, #0]
   3bc1a:	3301      	adds	r3, #1
   3bc1c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   3bc1e:	4608      	mov	r0, r1
   3bc20:	f7de fa28 	bl	1a074 <sdc_hci_cmd_le_read_resolving_list_size>
   3bc24:	e023      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   3bc26:	f7de fa31 	bl	1a08c <sdc_hci_cmd_le_set_address_resolution_enable>
   3bc2a:	e020      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   3bc2c:	f7de fa41 	bl	1a0b2 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   3bc30:	e01d      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   3bc32:	7813      	ldrb	r3, [r2, #0]
   3bc34:	3308      	adds	r3, #8
   3bc36:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   3bc38:	4608      	mov	r0, r1
   3bc3a:	f7de fa15 	bl	1a068 <sdc_hci_cmd_le_read_max_data_length>
   3bc3e:	e016      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   3bc40:	7813      	ldrb	r3, [r2, #0]
   3bc42:	3304      	adds	r3, #4
   3bc44:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   3bc46:	f7de fa11 	bl	1a06c <sdc_hci_cmd_le_read_phy>
   3bc4a:	e010      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   3bc4c:	f7de fa22 	bl	1a094 <sdc_hci_cmd_le_set_default_phy>
   3bc50:	e00d      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   3bc52:	f7de fa28 	bl	1a0a6 <sdc_hci_cmd_le_set_phy>
   3bc56:	e00a      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   3bc58:	7813      	ldrb	r3, [r2, #0]
   3bc5a:	3302      	adds	r3, #2
   3bc5c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   3bc5e:	4608      	mov	r0, r1
   3bc60:	f7de fa0c 	bl	1a07c <sdc_hci_cmd_le_read_transmit_power>
   3bc64:	e003      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   3bc66:	f7de fa20 	bl	1a0aa <sdc_hci_cmd_le_set_privacy_mode>
   3bc6a:	e000      	b.n	3bc6e <le_controller_cmd_put+0x1a8>
   3bc6c:	2001      	movs	r0, #1
}
   3bc6e:	bd38      	pop	{r3, r4, r5, pc}

0003bc70 <vs_cmd_put>:
{
   3bc70:	b538      	push	{r3, r4, r5, lr}
   3bc72:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   3bc74:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   3bc76:	3106      	adds	r1, #6
   3bc78:	7865      	ldrb	r5, [r4, #1]
   3bc7a:	7823      	ldrb	r3, [r4, #0]
   3bc7c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   3bc80:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   3bc84:	42a3      	cmp	r3, r4
   3bc86:	d90f      	bls.n	3bca8 <vs_cmd_put+0x38>
   3bc88:	f64f 5405 	movw	r4, #64773	; 0xfd05
   3bc8c:	42a3      	cmp	r3, r4
   3bc8e:	d85b      	bhi.n	3bd48 <vs_cmd_put+0xd8>
   3bc90:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   3bc94:	d319      	bcc.n	3bcca <vs_cmd_put+0x5a>
   3bc96:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   3bc9a:	2b05      	cmp	r3, #5
   3bc9c:	d850      	bhi.n	3bd40 <vs_cmd_put+0xd0>
   3bc9e:	e8df f003 	tbb	[pc, r3]
   3bca2:	4038      	.short	0x4038
   3bca4:	4c494643 	.word	0x4c494643
   3bca8:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   3bcac:	d801      	bhi.n	3bcb2 <vs_cmd_put+0x42>
   3bcae:	2001      	movs	r0, #1
}
   3bcb0:	bd38      	pop	{r3, r4, r5, pc}
   3bcb2:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   3bcb6:	3b01      	subs	r3, #1
   3bcb8:	2b09      	cmp	r3, #9
   3bcba:	d843      	bhi.n	3bd44 <vs_cmd_put+0xd4>
   3bcbc:	e8df f003 	tbb	[pc, r3]
   3bcc0:	42420e07 	.word	0x42420e07
   3bcc4:	42422642 	.word	0x42422642
   3bcc8:	1f16      	.short	0x1f16
	switch (opcode)	{
   3bcca:	2001      	movs	r0, #1
   3bccc:	e7f0      	b.n	3bcb0 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   3bcce:	7813      	ldrb	r3, [r2, #0]
   3bcd0:	330c      	adds	r3, #12
   3bcd2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   3bcd4:	4608      	mov	r0, r1
   3bcd6:	f7d5 f803 	bl	10ce0 <sdc_hci_cmd_vs_zephyr_read_version_info>
   3bcda:	e7e9      	b.n	3bcb0 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   3bcdc:	7813      	ldrb	r3, [r2, #0]
   3bcde:	3340      	adds	r3, #64	; 0x40
   3bce0:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   3bce2:	4608      	mov	r0, r1
   3bce4:	f7ff fed5 	bl	3ba92 <vs_zephyr_supported_commands>
		return 0;
   3bce8:	2000      	movs	r0, #0
   3bcea:	e7e1      	b.n	3bcb0 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   3bcec:	7813      	ldrb	r3, [r2, #0]
   3bcee:	3301      	adds	r3, #1
   3bcf0:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   3bcf2:	3316      	adds	r3, #22
   3bcf4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   3bcf6:	4608      	mov	r0, r1
   3bcf8:	f7de f949 	bl	19f8e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   3bcfc:	e7d8      	b.n	3bcb0 <vs_cmd_put+0x40>
		*param_length_out +=
   3bcfe:	7813      	ldrb	r3, [r2, #0]
   3bd00:	3320      	adds	r3, #32
   3bd02:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   3bd04:	4608      	mov	r0, r1
   3bd06:	f7de f8f5 	bl	19ef4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   3bd0a:	e7d1      	b.n	3bcb0 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   3bd0c:	f7de f98e 	bl	1a02c <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   3bd10:	e7ce      	b.n	3bcb0 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   3bd12:	7813      	ldrb	r3, [r2, #0]
   3bd14:	3340      	adds	r3, #64	; 0x40
   3bd16:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   3bd18:	4608      	mov	r0, r1
   3bd1a:	f7ff fec9 	bl	3bab0 <vs_supported_commands>
		return 0;
   3bd1e:	2000      	movs	r0, #0
   3bd20:	e7c6      	b.n	3bcb0 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   3bd22:	f7de f8e0 	bl	19ee6 <sdc_hci_cmd_vs_llpm_mode_set>
   3bd26:	e7c3      	b.n	3bcb0 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   3bd28:	f7de f8b1 	bl	19e8e <sdc_hci_cmd_vs_conn_update>
   3bd2c:	e7c0      	b.n	3bcb0 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   3bd2e:	f7de f8a6 	bl	19e7e <sdc_hci_cmd_vs_conn_event_extend>
   3bd32:	e7bd      	b.n	3bcb0 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   3bd34:	f7de f8d9 	bl	19eea <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   3bd38:	e7ba      	b.n	3bcb0 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   3bd3a:	f7de f8d2 	bl	19ee2 <sdc_hci_cmd_vs_event_length_set>
   3bd3e:	e7b7      	b.n	3bcb0 <vs_cmd_put+0x40>
	switch (opcode)	{
   3bd40:	2001      	movs	r0, #1
   3bd42:	e7b5      	b.n	3bcb0 <vs_cmd_put+0x40>
   3bd44:	2001      	movs	r0, #1
   3bd46:	e7b3      	b.n	3bcb0 <vs_cmd_put+0x40>
   3bd48:	2001      	movs	r0, #1
   3bd4a:	e7b1      	b.n	3bcb0 <vs_cmd_put+0x40>

0003bd4c <cmd_put>:
{
   3bd4c:	b570      	push	{r4, r5, r6, lr}
   3bd4e:	b082      	sub	sp, #8
   3bd50:	460e      	mov	r6, r1
   3bd52:	7842      	ldrb	r2, [r0, #1]
   3bd54:	7805      	ldrb	r5, [r0, #0]
   3bd56:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   3bd5a:	2304      	movs	r3, #4
   3bd5c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   3bd60:	0893      	lsrs	r3, r2, #2
   3bd62:	2a23      	cmp	r2, #35	; 0x23
   3bd64:	d80b      	bhi.n	3bd7e <cmd_put+0x32>
   3bd66:	b21a      	sxth	r2, r3
   3bd68:	2a00      	cmp	r2, #0
   3bd6a:	d03a      	beq.n	3bde2 <cmd_put+0x96>
   3bd6c:	3b01      	subs	r3, #1
   3bd6e:	2b07      	cmp	r3, #7
   3bd70:	d839      	bhi.n	3bde6 <cmd_put+0x9a>
   3bd72:	e8df f003 	tbb	[pc, r3]
   3bd76:	381a      	.short	0x381a
   3bd78:	382a241e 	.word	0x382a241e
   3bd7c:	3038      	.short	0x3038
   3bd7e:	2b3f      	cmp	r3, #63	; 0x3f
   3bd80:	d105      	bne.n	3bd8e <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   3bd82:	f10d 0207 	add.w	r2, sp, #7
   3bd86:	f7ff ff73 	bl	3bc70 <vs_cmd_put>
   3bd8a:	4604      	mov	r4, r0
		break;
   3bd8c:	e000      	b.n	3bd90 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   3bd8e:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   3bd90:	4628      	mov	r0, r5
   3bd92:	f7ff fd26 	bl	3b7e2 <command_generates_command_complete_event>
   3bd96:	b108      	cbz	r0, 3bd9c <cmd_put+0x50>
   3bd98:	2c01      	cmp	r4, #1
   3bd9a:	d126      	bne.n	3bdea <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   3bd9c:	4622      	mov	r2, r4
   3bd9e:	4629      	mov	r1, r5
   3bda0:	4630      	mov	r0, r6
   3bda2:	f7ff fd5d 	bl	3b860 <encode_command_status>
}
   3bda6:	b002      	add	sp, #8
   3bda8:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   3bdaa:	f7ff fd74 	bl	3b896 <link_control_cmd_put>
   3bdae:	4604      	mov	r4, r0
		break;
   3bdb0:	e7ee      	b.n	3bd90 <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   3bdb2:	f10d 0207 	add.w	r2, sp, #7
   3bdb6:	f7ff fd85 	bl	3b8c4 <controller_and_baseband_cmd_put>
   3bdba:	4604      	mov	r4, r0
		break;
   3bdbc:	e7e8      	b.n	3bd90 <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   3bdbe:	f10d 0207 	add.w	r2, sp, #7
   3bdc2:	f7ff fe27 	bl	3ba14 <info_param_cmd_put>
   3bdc6:	4604      	mov	r4, r0
		break;
   3bdc8:	e7e2      	b.n	3bd90 <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   3bdca:	f10d 0207 	add.w	r2, sp, #7
   3bdce:	f7ff fd60 	bl	3b892 <status_param_cmd_put>
   3bdd2:	4604      	mov	r4, r0
		break;
   3bdd4:	e7dc      	b.n	3bd90 <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   3bdd6:	f10d 0207 	add.w	r2, sp, #7
   3bdda:	f7ff fe74 	bl	3bac6 <le_controller_cmd_put>
   3bdde:	4604      	mov	r4, r0
		break;
   3bde0:	e7d6      	b.n	3bd90 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   3bde2:	2401      	movs	r4, #1
   3bde4:	e7d4      	b.n	3bd90 <cmd_put+0x44>
   3bde6:	2401      	movs	r4, #1
   3bde8:	e7d2      	b.n	3bd90 <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   3bdea:	4623      	mov	r3, r4
   3bdec:	f89d 2007 	ldrb.w	r2, [sp, #7]
   3bdf0:	4629      	mov	r1, r5
   3bdf2:	4630      	mov	r0, r6
   3bdf4:	f7ff fd3d 	bl	3b872 <encode_command_complete_header>
}
   3bdf8:	e7d5      	b.n	3bda6 <cmd_put+0x5a>

0003bdfa <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   3bdfa:	b530      	push	{r4, r5, lr}
   3bdfc:	b08d      	sub	sp, #52	; 0x34
   3bdfe:	4614      	mov	r4, r2
	psrc += length - 1;
   3be00:	300f      	adds	r0, #15
	uint8_t *pdst = (uint8_t *)dst;
   3be02:	ab08      	add	r3, sp, #32
	for (; length > 0; length--) {
   3be04:	2210      	movs	r2, #16
   3be06:	b12a      	cbz	r2, 3be14 <bt_encrypt_le+0x1a>
		*pdst++ = *psrc--;
   3be08:	f810 5901 	ldrb.w	r5, [r0], #-1
   3be0c:	f803 5b01 	strb.w	r5, [r3], #1
	for (; length > 0; length--) {
   3be10:	3a01      	subs	r2, #1
   3be12:	e7f8      	b.n	3be06 <bt_encrypt_le+0xc>
	psrc += length - 1;
   3be14:	310f      	adds	r1, #15
	uint8_t *pdst = (uint8_t *)dst;
   3be16:	ab04      	add	r3, sp, #16
	for (; length > 0; length--) {
   3be18:	2210      	movs	r2, #16
   3be1a:	e004      	b.n	3be26 <bt_encrypt_le+0x2c>
		*pdst++ = *psrc--;
   3be1c:	f811 0901 	ldrb.w	r0, [r1], #-1
   3be20:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   3be24:	3a01      	subs	r2, #1
   3be26:	2a00      	cmp	r2, #0
   3be28:	d1f8      	bne.n	3be1c <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   3be2a:	f04f 30ff 	mov.w	r0, #4294967295
   3be2e:	f04f 31ff 	mov.w	r1, #4294967295
   3be32:	f7f2 fa59 	bl	2e2e8 <multithreading_lock_acquire>

	if (!errcode) {
   3be36:	4605      	mov	r5, r0
   3be38:	b118      	cbz	r0, 3be42 <bt_encrypt_le+0x48>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
		MULTITHREADING_LOCK_RELEASE();
	}

	if (!errcode) {
   3be3a:	b15d      	cbz	r5, 3be54 <bt_encrypt_le+0x5a>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   3be3c:	4628      	mov	r0, r5
   3be3e:	b00d      	add	sp, #52	; 0x34
   3be40:	bd30      	pop	{r4, r5, pc}
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   3be42:	466a      	mov	r2, sp
   3be44:	a904      	add	r1, sp, #16
   3be46:	a808      	add	r0, sp, #32
   3be48:	f7dd fcda 	bl	19800 <sdc_soc_ecb_block_encrypt>
   3be4c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   3be4e:	f7f2 fa55 	bl	2e2fc <multithreading_lock_release>
   3be52:	e7f2      	b.n	3be3a <bt_encrypt_le+0x40>
	psrc += length - 1;
   3be54:	f10d 030f 	add.w	r3, sp, #15
   3be58:	2210      	movs	r2, #16
	for (; length > 0; length--) {
   3be5a:	2a00      	cmp	r2, #0
   3be5c:	d0ee      	beq.n	3be3c <bt_encrypt_le+0x42>
		*pdst++ = *psrc--;
   3be5e:	f813 1901 	ldrb.w	r1, [r3], #-1
   3be62:	f804 1b01 	strb.w	r1, [r4], #1
	for (; length > 0; length--) {
   3be66:	3a01      	subs	r2, #1
   3be68:	e7f7      	b.n	3be5a <bt_encrypt_le+0x60>

0003be6a <m_config_clock_source_get>:
}
   3be6a:	2001      	movs	r0, #1
   3be6c:	4770      	bx	lr

0003be6e <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3be6e:	4668      	mov	r0, sp
   3be70:	f020 0107 	bic.w	r1, r0, #7
   3be74:	468d      	mov	sp, r1
   3be76:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   3be78:	f7d3 fae8 	bl	f44c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   3be7c:	f7e6 f95c 	bl	22138 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3be80:	f7e6 fa68 	bl	22354 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3be84:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3be88:	4685      	mov	sp, r0
   3be8a:	4770      	bx	lr

0003be8c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3be8c:	4668      	mov	r0, sp
   3be8e:	f020 0107 	bic.w	r1, r0, #7
   3be92:	468d      	mov	sp, r1
   3be94:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   3be96:	f7d3 fa5b 	bl	f350 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   3be9a:	f7e6 f94d 	bl	22138 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3be9e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3bea2:	4685      	mov	sp, r0
   3bea4:	4770      	bx	lr

0003bea6 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   3bea6:	4668      	mov	r0, sp
   3bea8:	f020 0107 	bic.w	r1, r0, #7
   3beac:	468d      	mov	sp, r1
   3beae:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   3beb0:	f7dd fa1c 	bl	192ec <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   3beb4:	f7e6 f940 	bl	22138 <_arch_isr_direct_pm>
   3beb8:	f7e6 fa4c 	bl	22354 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   3bebc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3bec0:	4685      	mov	sp, r0
   3bec2:	4770      	bx	lr

0003bec4 <nrfx_clock_stop>:
	switch (domain) {
   3bec4:	2801      	cmp	r0, #1
   3bec6:	d000      	beq.n	3beca <nrfx_clock_stop+0x6>
   3bec8:	4770      	bx	lr
{
   3beca:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   3becc:	f7d4 f8f0 	bl	100b0 <mpsl_clock_hfclk_release>
}
   3bed0:	bd08      	pop	{r3, pc}

0003bed2 <nrfx_clock_enable>:
}
   3bed2:	4770      	bx	lr

0003bed4 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   3bed4:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   3bed6:	f7d3 ff09 	bl	fcec <MPSL_IRQ_CLOCK_Handler>
}
   3beda:	bd08      	pop	{r3, pc}

0003bedc <nrf_flash_sync_is_required>:
{
   3bedc:	b508      	push	{r3, lr}
	return mpsl_is_initialized();
   3bede:	f7d4 fabf 	bl	10460 <mpsl_is_initialized>
}
   3bee2:	bd08      	pop	{r3, pc}

0003bee4 <nrf_flash_sync_get_timestamp_begin>:
}
   3bee4:	4770      	bx	lr

0003bee6 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   3bee6:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   3bee8:	f7f5 fd46 	bl	31978 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   3beec:	bd08      	pop	{r3, pc}

0003beee <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   3beee:	b510      	push	{r4, lr}
   3bef0:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   3bef2:	f7e5 ff95 	bl	21e20 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   3bef6:	f7e6 f851 	bl	21f9c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   3befa:	4620      	mov	r0, r4
   3befc:	f7ff fff3 	bl	3bee6 <hw_cc3xx_init_internal>
	return res;
}
   3bf00:	bd10      	pop	{r4, pc}

0003bf02 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   3bf02:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   3bf04:	4780      	blx	r0
}
   3bf06:	bd08      	pop	{r3, pc}

0003bf08 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   3bf08:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   3bf0a:	f000 fdcd 	bl	3caa8 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   3bf0e:	bd08      	pop	{r3, pc}

0003bf10 <pin_is_task_output>:
{
   3bf10:	b510      	push	{r4, lr}
   3bf12:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3bf14:	f7f2 ff9e 	bl	2ee54 <pin_is_output>
   3bf18:	b128      	cbz	r0, 3bf26 <pin_is_task_output+0x16>
   3bf1a:	4620      	mov	r0, r4
   3bf1c:	f7f2 ff84 	bl	2ee28 <pin_in_use_by_te>
   3bf20:	b118      	cbz	r0, 3bf2a <pin_is_task_output+0x1a>
   3bf22:	2001      	movs	r0, #1
   3bf24:	e000      	b.n	3bf28 <pin_is_task_output+0x18>
   3bf26:	2000      	movs	r0, #0
}
   3bf28:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3bf2a:	2000      	movs	r0, #0
   3bf2c:	e7fc      	b.n	3bf28 <pin_is_task_output+0x18>

0003bf2e <pin_is_input>:
{
   3bf2e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   3bf30:	f7f2 ff90 	bl	2ee54 <pin_is_output>
   3bf34:	f080 0001 	eor.w	r0, r0, #1
}
   3bf38:	b2c0      	uxtb	r0, r0
   3bf3a:	bd08      	pop	{r3, pc}

0003bf3c <gpiote_polarity_to_trigger>:
}
   3bf3c:	4770      	bx	lr

0003bf3e <gpiote_trigger_to_polarity>:
}
   3bf3e:	4770      	bx	lr

0003bf40 <is_level>:
}
   3bf40:	2803      	cmp	r0, #3
   3bf42:	bf94      	ite	ls
   3bf44:	2000      	movls	r0, #0
   3bf46:	2001      	movhi	r0, #1
   3bf48:	4770      	bx	lr

0003bf4a <flash_page_size_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   3bf4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3bf4e:	6918      	ldr	r0, [r3, #16]
}
   3bf50:	4770      	bx	lr

0003bf52 <flash_page_count_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   3bf52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3bf56:	6958      	ldr	r0, [r3, #20]
}
   3bf58:	4770      	bx	lr

0003bf5a <flash_total_size_get>:
{
   3bf5a:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   3bf5c:	f7ff fff5 	bl	3bf4a <flash_page_size_get>
   3bf60:	4604      	mov	r4, r0
   3bf62:	f7ff fff6 	bl	3bf52 <flash_page_count_get>
}
   3bf66:	fb00 f004 	mul.w	r0, r0, r4
   3bf6a:	bd10      	pop	{r4, pc}

0003bf6c <is_page_aligned_check>:
{
   3bf6c:	b510      	push	{r4, lr}
   3bf6e:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   3bf70:	f7ff ffeb 	bl	3bf4a <flash_page_size_get>
   3bf74:	fbb4 f3f0 	udiv	r3, r4, r0
   3bf78:	fb00 4013 	mls	r0, r0, r3, r4
}
   3bf7c:	fab0 f080 	clz	r0, r0
   3bf80:	0940      	lsrs	r0, r0, #5
   3bf82:	bd10      	pop	{r4, pc}

0003bf84 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   3bf84:	b538      	push	{r3, r4, r5, lr}
   3bf86:	4604      	mov	r4, r0
   3bf88:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   3bf8a:	f7f3 fc0f 	bl	2f7ac <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   3bf8e:	4629      	mov	r1, r5
   3bf90:	4620      	mov	r0, r4
   3bf92:	f7f3 fc13 	bl	2f7bc <nvmc_word_write>

    nvmc_readonly_mode_set();
   3bf96:	f7f3 fc01 	bl	2f79c <nvmc_readonly_mode_set>
}
   3bf9a:	bd38      	pop	{r3, r4, r5, pc}

0003bf9c <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   3bf9c:	b508      	push	{r3, lr}
    return flash_total_size_get();
   3bf9e:	f7ff ffdc 	bl	3bf5a <flash_total_size_get>
}
   3bfa2:	bd08      	pop	{r3, pc}

0003bfa4 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   3bfa4:	b508      	push	{r3, lr}
    return flash_page_size_get();
   3bfa6:	f7ff ffd0 	bl	3bf4a <flash_page_size_get>
}
   3bfaa:	bd08      	pop	{r3, pc}

0003bfac <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   3bfac:	b508      	push	{r3, lr}
    return flash_page_count_get();
   3bfae:	f7ff ffd0 	bl	3bf52 <flash_page_count_get>
}
   3bfb2:	bd08      	pop	{r3, pc}

0003bfb4 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3bfb4:	b148      	cbz	r0, 3bfca <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3bfb6:	68c3      	ldr	r3, [r0, #12]
   3bfb8:	8818      	ldrh	r0, [r3, #0]
   3bfba:	f3c0 0008 	ubfx	r0, r0, #0, #9
   3bfbe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   3bfc2:	bf14      	ite	ne
   3bfc4:	2000      	movne	r0, #0
   3bfc6:	2001      	moveq	r0, #1
   3bfc8:	4770      	bx	lr
		return false;
   3bfca:	2000      	movs	r0, #0
}
   3bfcc:	4770      	bx	lr

0003bfce <k_heap_init>:
{
   3bfce:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   3bfd0:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   3bfd4:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   3bfd6:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   3bfd8:	f7f8 fd6e 	bl	34ab8 <sys_heap_init>
}
   3bfdc:	bd10      	pop	{r4, pc}

0003bfde <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   3bfde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bfe2:	b087      	sub	sp, #28
   3bfe4:	4680      	mov	r8, r0
   3bfe6:	9103      	str	r1, [sp, #12]
   3bfe8:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   3bfea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   3bfee:	f000 fd61 	bl	3cab4 <sys_clock_timeout_end_calc>
   3bff2:	4681      	mov	r9, r0
   3bff4:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3bff6:	f108 0314 	add.w	r3, r8, #20
   3bffa:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   3bffc:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c000:	f3ef 8511 	mrs	r5, BASEPRI
   3c004:	f383 8812 	msr	BASEPRI_MAX, r3
   3c008:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   3c00c:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   3c010:	4654      	mov	r4, sl

	while (ret == NULL) {
   3c012:	e00f      	b.n	3c034 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3c014:	e9cd 6700 	strd	r6, r7, [sp]
   3c018:	f108 020c 	add.w	r2, r8, #12
   3c01c:	4629      	mov	r1, r5
   3c01e:	9805      	ldr	r0, [sp, #20]
   3c020:	f7f4 fd2e 	bl	30a80 <z_pend_curr>
   3c024:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c028:	f3ef 8511 	mrs	r5, BASEPRI
   3c02c:	f383 8812 	msr	BASEPRI_MAX, r3
   3c030:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   3c034:	b9b4      	cbnz	r4, 3c064 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   3c036:	9a04      	ldr	r2, [sp, #16]
   3c038:	9903      	ldr	r1, [sp, #12]
   3c03a:	4640      	mov	r0, r8
   3c03c:	f7f8 fccb 	bl	349d6 <sys_heap_aligned_alloc>
   3c040:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   3c042:	f7f5 f8d1 	bl	311e8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   3c046:	b96c      	cbnz	r4, 3c064 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   3c048:	ebb9 0600 	subs.w	r6, r9, r0
   3c04c:	eb6b 0701 	sbc.w	r7, fp, r1
   3c050:	2e01      	cmp	r6, #1
   3c052:	f177 0300 	sbcs.w	r3, r7, #0
   3c056:	db05      	blt.n	3c064 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   3c058:	f1ba 0f00 	cmp.w	sl, #0
   3c05c:	d1da      	bne.n	3c014 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   3c05e:	f04f 0a01 	mov.w	sl, #1
   3c062:	e7d7      	b.n	3c014 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   3c064:	f385 8811 	msr	BASEPRI, r5
   3c068:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3c06c:	4620      	mov	r0, r4
   3c06e:	b007      	add	sp, #28
   3c070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003c074 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   3c074:	b570      	push	{r4, r5, r6, lr}
   3c076:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3c078:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   3c07c:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c080:	f3ef 8511 	mrs	r5, BASEPRI
   3c084:	f383 8812 	msr	BASEPRI_MAX, r3
   3c088:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   3c08c:	f7f8 fc5f 	bl	3494e <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   3c090:	f104 000c 	add.w	r0, r4, #12
   3c094:	f000 fc42 	bl	3c91c <z_unpend_all>
   3c098:	b920      	cbnz	r0, 3c0a4 <k_heap_free+0x30>
	__asm__ volatile(
   3c09a:	f385 8811 	msr	BASEPRI, r5
   3c09e:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3c0a2:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   3c0a4:	4629      	mov	r1, r5
   3c0a6:	4630      	mov	r0, r6
   3c0a8:	f7f4 fb86 	bl	307b8 <z_reschedule>
   3c0ac:	e7f9      	b.n	3c0a2 <k_heap_free+0x2e>

0003c0ae <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3c0ae:	68c2      	ldr	r2, [r0, #12]
   3c0b0:	6903      	ldr	r3, [r0, #16]
   3c0b2:	431a      	orrs	r2, r3
   3c0b4:	f012 0203 	ands.w	r2, r2, #3
   3c0b8:	d10d      	bne.n	3c0d6 <create_free_list+0x28>
	slab->free_list = NULL;
   3c0ba:	2100      	movs	r1, #0
   3c0bc:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3c0be:	e005      	b.n	3c0cc <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   3c0c0:	6941      	ldr	r1, [r0, #20]
   3c0c2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   3c0c4:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   3c0c6:	68c1      	ldr	r1, [r0, #12]
   3c0c8:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   3c0ca:	3201      	adds	r2, #1
   3c0cc:	6881      	ldr	r1, [r0, #8]
   3c0ce:	4291      	cmp	r1, r2
   3c0d0:	d8f6      	bhi.n	3c0c0 <create_free_list+0x12>
	return 0;
   3c0d2:	2000      	movs	r0, #0
   3c0d4:	4770      	bx	lr
		return -EINVAL;
   3c0d6:	f06f 0015 	mvn.w	r0, #21
}
   3c0da:	4770      	bx	lr

0003c0dc <k_mem_slab_init>:
{
   3c0dc:	b510      	push	{r4, lr}
   3c0de:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   3c0e0:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   3c0e2:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   3c0e4:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   3c0e6:	2300      	movs	r3, #0
   3c0e8:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   3c0ea:	f7ff ffe0 	bl	3c0ae <create_free_list>
	if (rc < 0) {
   3c0ee:	2800      	cmp	r0, #0
   3c0f0:	db01      	blt.n	3c0f6 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   3c0f2:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   3c0f4:	6064      	str	r4, [r4, #4]
}
   3c0f6:	bd10      	pop	{r4, pc}

0003c0f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   3c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c0fa:	4604      	mov	r4, r0
   3c0fc:	460d      	mov	r5, r1
	__asm__ volatile(
   3c0fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c102:	f3ef 8611 	mrs	r6, BASEPRI
   3c106:	f383 8812 	msr	BASEPRI_MAX, r3
   3c10a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   3c10e:	6943      	ldr	r3, [r0, #20]
   3c110:	b163      	cbz	r3, 3c12c <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   3c112:	682b      	ldr	r3, [r5, #0]
   3c114:	6962      	ldr	r2, [r4, #20]
   3c116:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   3c118:	682b      	ldr	r3, [r5, #0]
   3c11a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   3c11c:	69a3      	ldr	r3, [r4, #24]
   3c11e:	3b01      	subs	r3, #1
   3c120:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   3c122:	f386 8811 	msr	BASEPRI, r6
   3c126:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   3c12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c12c:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3c130:	f000 fbc9 	bl	3c8c6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3c134:	2800      	cmp	r0, #0
   3c136:	d0ec      	beq.n	3c112 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   3c138:	682a      	ldr	r2, [r5, #0]
   3c13a:	2100      	movs	r1, #0
   3c13c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   3c140:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   3c142:	f000 fafe 	bl	3c742 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   3c146:	4631      	mov	r1, r6
   3c148:	4638      	mov	r0, r7
   3c14a:	f7f4 fb35 	bl	307b8 <z_reschedule>
			return;
   3c14e:	e7ec      	b.n	3c12a <k_mem_slab_free+0x32>

0003c150 <setup_thread_stack>:
{
   3c150:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3c152:	3207      	adds	r2, #7
   3c154:	f022 0207 	bic.w	r2, r2, #7
   3c158:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   3c15c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   3c160:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
	new_thread->stack_info.size = stack_buf_size;
   3c164:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
	new_thread->stack_info.delta = delta;
   3c168:	2200      	movs	r2, #0
   3c16a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
}
   3c16e:	18c8      	adds	r0, r1, r3
   3c170:	bc10      	pop	{r4}
   3c172:	4770      	bx	lr

0003c174 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3c174:	f3ef 8005 	mrs	r0, IPSR
}
   3c178:	3800      	subs	r0, #0
   3c17a:	bf18      	it	ne
   3c17c:	2001      	movne	r0, #1
   3c17e:	4770      	bx	lr

0003c180 <k_thread_name_get>:
}
   3c180:	3084      	adds	r0, #132	; 0x84
   3c182:	4770      	bx	lr

0003c184 <z_impl_k_thread_start>:
{
   3c184:	b508      	push	{r3, lr}
	z_sched_start(thread);
   3c186:	f7f4 fc41 	bl	30a0c <z_sched_start>
}
   3c18a:	bd08      	pop	{r3, pc}

0003c18c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   3c18c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   3c18e:	2400      	movs	r4, #0
   3c190:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   3c192:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   3c194:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   3c196:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   3c198:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   3c19a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   3c19c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   3c19e:	bc10      	pop	{r4}
   3c1a0:	4770      	bx	lr

0003c1a2 <z_impl_k_thread_create>:
{
   3c1a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   3c1a4:	b087      	sub	sp, #28
   3c1a6:	4604      	mov	r4, r0
   3c1a8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3c1ac:	2500      	movs	r5, #0
   3c1ae:	9505      	str	r5, [sp, #20]
   3c1b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   3c1b2:	9504      	str	r5, [sp, #16]
   3c1b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   3c1b6:	9503      	str	r5, [sp, #12]
   3c1b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   3c1ba:	9502      	str	r5, [sp, #8]
   3c1bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3c1be:	9501      	str	r5, [sp, #4]
   3c1c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3c1c2:	9500      	str	r5, [sp, #0]
   3c1c4:	f7f3 fe7e 	bl	2fec4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   3c1c8:	f1b7 3fff 	cmp.w	r7, #4294967295
   3c1cc:	bf08      	it	eq
   3c1ce:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   3c1d2:	d102      	bne.n	3c1da <z_impl_k_thread_create+0x38>
}
   3c1d4:	4620      	mov	r0, r4
   3c1d6:	b007      	add	sp, #28
   3c1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   3c1da:	4632      	mov	r2, r6
   3c1dc:	463b      	mov	r3, r7
   3c1de:	4620      	mov	r0, r4
   3c1e0:	f7f3 fe5e 	bl	2fea0 <schedule_new_thread>
   3c1e4:	e7f6      	b.n	3c1d4 <z_impl_k_thread_create+0x32>

0003c1e6 <z_pm_save_idle_exit>:
{
   3c1e6:	b508      	push	{r3, lr}
	pm_system_resume();
   3c1e8:	f7e5 f816 	bl	21218 <pm_system_resume>
	sys_clock_idle_exit();
   3c1ec:	f7ff fa0a 	bl	3b604 <sys_clock_idle_exit>
}
   3c1f0:	bd08      	pop	{r3, pc}

0003c1f2 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   3c1f2:	4288      	cmp	r0, r1
   3c1f4:	da00      	bge.n	3c1f8 <new_prio_for_inheritance+0x6>
   3c1f6:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   3c1f8:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   3c1fc:	db01      	blt.n	3c202 <new_prio_for_inheritance+0x10>
   3c1fe:	4608      	mov	r0, r1
   3c200:	4770      	bx	lr
   3c202:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   3c206:	4770      	bx	lr

0003c208 <adjust_owner_prio>:
{
   3c208:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   3c20a:	6880      	ldr	r0, [r0, #8]
   3c20c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3c210:	428b      	cmp	r3, r1
   3c212:	d101      	bne.n	3c218 <adjust_owner_prio+0x10>
	return false;
   3c214:	2000      	movs	r0, #0
}
   3c216:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   3c218:	f7f4 fc46 	bl	30aa8 <z_set_prio>
   3c21c:	e7fb      	b.n	3c216 <adjust_owner_prio+0xe>

0003c21e <z_impl_k_mutex_init>:
{
   3c21e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3c220:	2000      	movs	r0, #0
   3c222:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   3c224:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   3c226:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   3c228:	605b      	str	r3, [r3, #4]
}
   3c22a:	4770      	bx	lr

0003c22c <prepare_thread_to_run>:
{
   3c22c:	b508      	push	{r3, lr}
   3c22e:	2200      	movs	r2, #0
   3c230:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
   3c234:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   3c236:	f000 fa84 	bl	3c742 <z_ready_thread>
}
   3c23a:	bd08      	pop	{r3, pc}

0003c23c <queue_insert>:
{
   3c23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c240:	4605      	mov	r5, r0
   3c242:	460e      	mov	r6, r1
   3c244:	4614      	mov	r4, r2
   3c246:	461f      	mov	r7, r3
   3c248:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3c24c:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   3c250:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c254:	f3ef 8911 	mrs	r9, BASEPRI
   3c258:	f383 8812 	msr	BASEPRI_MAX, r3
   3c25c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   3c260:	b102      	cbz	r2, 3c264 <queue_insert+0x28>
	return list->tail;
   3c262:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   3c264:	4640      	mov	r0, r8
   3c266:	f000 fb2e 	bl	3c8c6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   3c26a:	b9a0      	cbnz	r0, 3c296 <queue_insert+0x5a>
	if (alloc) {
   3c26c:	b9e7      	cbnz	r7, 3c2a8 <queue_insert+0x6c>
	node->next_and_flags = flags;
   3c26e:	2300      	movs	r3, #0
   3c270:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3c272:	b356      	cbz	r6, 3c2ca <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c274:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3c276:	f033 0303 	bics.w	r3, r3, #3
   3c27a:	d134      	bne.n	3c2e6 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c27c:	6823      	ldr	r3, [r4, #0]
   3c27e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c282:	6023      	str	r3, [r4, #0]
	return list->tail;
   3c284:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   3c286:	b35a      	cbz	r2, 3c2e0 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c288:	6813      	ldr	r3, [r2, #0]
   3c28a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c28e:	4323      	orrs	r3, r4
   3c290:	6013      	str	r3, [r2, #0]
	list->tail = node;
   3c292:	606c      	str	r4, [r5, #4]
}
   3c294:	e031      	b.n	3c2fa <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   3c296:	4621      	mov	r1, r4
   3c298:	f7ff ffc8 	bl	3c22c <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   3c29c:	4649      	mov	r1, r9
   3c29e:	4640      	mov	r0, r8
   3c2a0:	f7f4 fa8a 	bl	307b8 <z_reschedule>
		return 0;
   3c2a4:	2000      	movs	r0, #0
   3c2a6:	e032      	b.n	3c30e <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   3c2a8:	2108      	movs	r1, #8
   3c2aa:	2000      	movs	r0, #0
   3c2ac:	f7f5 fb42 	bl	31934 <z_thread_aligned_alloc>
		if (anode == NULL) {
   3c2b0:	b120      	cbz	r0, 3c2bc <queue_insert+0x80>
		anode->data = data;
   3c2b2:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   3c2b4:	2201      	movs	r2, #1
   3c2b6:	6002      	str	r2, [r0, #0]
		data = anode;
   3c2b8:	4604      	mov	r4, r0
   3c2ba:	e7da      	b.n	3c272 <queue_insert+0x36>
	__asm__ volatile(
   3c2bc:	f389 8811 	msr	BASEPRI, r9
   3c2c0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   3c2c4:	f06f 000b 	mvn.w	r0, #11
   3c2c8:	e021      	b.n	3c30e <queue_insert+0xd2>
	return list->head;
   3c2ca:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c2cc:	6823      	ldr	r3, [r4, #0]
   3c2ce:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c2d2:	4313      	orrs	r3, r2
   3c2d4:	6023      	str	r3, [r4, #0]
	list->head = node;
   3c2d6:	602c      	str	r4, [r5, #0]
	return list->tail;
   3c2d8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   3c2da:	b973      	cbnz	r3, 3c2fa <queue_insert+0xbe>
	list->tail = node;
   3c2dc:	606c      	str	r4, [r5, #4]
}
   3c2de:	e00c      	b.n	3c2fa <queue_insert+0xbe>
	list->tail = node;
   3c2e0:	606c      	str	r4, [r5, #4]
	list->head = node;
   3c2e2:	602c      	str	r4, [r5, #0]
}
   3c2e4:	e009      	b.n	3c2fa <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c2e6:	6822      	ldr	r2, [r4, #0]
   3c2e8:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c2ec:	4313      	orrs	r3, r2
   3c2ee:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c2f0:	6833      	ldr	r3, [r6, #0]
   3c2f2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c2f6:	431c      	orrs	r4, r3
   3c2f8:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3c2fa:	2104      	movs	r1, #4
   3c2fc:	f105 0010 	add.w	r0, r5, #16
   3c300:	f000 fcb8 	bl	3cc74 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   3c304:	4649      	mov	r1, r9
   3c306:	4640      	mov	r0, r8
   3c308:	f7f4 fa56 	bl	307b8 <z_reschedule>
	return 0;
   3c30c:	2000      	movs	r0, #0
}
   3c30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003c312 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3c312:	b160      	cbz	r0, 3c32e <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c314:	6803      	ldr	r3, [r0, #0]
   3c316:	f013 0f03 	tst.w	r3, #3
   3c31a:	d008      	beq.n	3c32e <z_queue_node_peek+0x1c>
{
   3c31c:	b510      	push	{r4, lr}
		ret = anode->data;
   3c31e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3c320:	b909      	cbnz	r1, 3c326 <z_queue_node_peek+0x14>
		ret = anode->data;
   3c322:	4620      	mov	r0, r4
}
   3c324:	bd10      	pop	{r4, pc}
			k_free(anode);
   3c326:	f000 fd7f 	bl	3ce28 <k_free>
		ret = anode->data;
   3c32a:	4620      	mov	r0, r4
   3c32c:	e7fa      	b.n	3c324 <z_queue_node_peek+0x12>
}
   3c32e:	4770      	bx	lr

0003c330 <z_impl_k_queue_init>:
	list->head = NULL;
   3c330:	2300      	movs	r3, #0
   3c332:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   3c334:	6043      	str	r3, [r0, #4]
   3c336:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   3c33a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   3c33c:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   3c33e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   3c342:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   3c344:	6143      	str	r3, [r0, #20]
}
   3c346:	4770      	bx	lr

0003c348 <k_queue_append>:
{
   3c348:	b500      	push	{lr}
   3c34a:	b083      	sub	sp, #12
   3c34c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3c34e:	2301      	movs	r3, #1
   3c350:	9300      	str	r3, [sp, #0]
   3c352:	2300      	movs	r3, #0
   3c354:	4619      	mov	r1, r3
   3c356:	f7ff ff71 	bl	3c23c <queue_insert>
}
   3c35a:	b003      	add	sp, #12
   3c35c:	f85d fb04 	ldr.w	pc, [sp], #4

0003c360 <k_queue_prepend>:
{
   3c360:	b500      	push	{lr}
   3c362:	b083      	sub	sp, #12
   3c364:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   3c366:	2100      	movs	r1, #0
   3c368:	9100      	str	r1, [sp, #0]
   3c36a:	460b      	mov	r3, r1
   3c36c:	f7ff ff66 	bl	3c23c <queue_insert>
}
   3c370:	b003      	add	sp, #12
   3c372:	f85d fb04 	ldr.w	pc, [sp], #4

0003c376 <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   3c376:	b3a1      	cbz	r1, 3c3e2 <k_queue_append_list+0x6c>
{
   3c378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c37c:	4606      	mov	r6, r0
   3c37e:	4617      	mov	r7, r2
   3c380:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   3c382:	b38a      	cbz	r2, 3c3e8 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3c384:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3c388:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c38c:	f3ef 8811 	mrs	r8, BASEPRI
   3c390:	f383 8812 	msr	BASEPRI_MAX, r3
   3c394:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   3c398:	4628      	mov	r0, r5
   3c39a:	f000 fa94 	bl	3c8c6 <z_unpend_first_thread>
   3c39e:	e006      	b.n	3c3ae <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   3c3a0:	4621      	mov	r1, r4
   3c3a2:	f7ff ff43 	bl	3c22c <prepare_thread_to_run>
		head = *(void **)head;
   3c3a6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   3c3a8:	4628      	mov	r0, r5
   3c3aa:	f000 fa8c 	bl	3c8c6 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   3c3ae:	b10c      	cbz	r4, 3c3b4 <k_queue_append_list+0x3e>
   3c3b0:	2800      	cmp	r0, #0
   3c3b2:	d1f5      	bne.n	3c3a0 <k_queue_append_list+0x2a>
	if (head != NULL) {
   3c3b4:	b13c      	cbz	r4, 3c3c6 <k_queue_append_list+0x50>
	return list->tail;
   3c3b6:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   3c3b8:	b18a      	cbz	r2, 3c3de <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c3ba:	6813      	ldr	r3, [r2, #0]
   3c3bc:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c3c0:	431c      	orrs	r4, r3
   3c3c2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   3c3c4:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3c3c6:	2104      	movs	r1, #4
   3c3c8:	f106 0010 	add.w	r0, r6, #16
   3c3cc:	f000 fc52 	bl	3cc74 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   3c3d0:	4641      	mov	r1, r8
   3c3d2:	4628      	mov	r0, r5
   3c3d4:	f7f4 f9f0 	bl	307b8 <z_reschedule>
	return 0;
   3c3d8:	2000      	movs	r0, #0
}
   3c3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   3c3de:	6034      	str	r4, [r6, #0]
}
   3c3e0:	e7f0      	b.n	3c3c4 <k_queue_append_list+0x4e>
		return -EINVAL;
   3c3e2:	f06f 0015 	mvn.w	r0, #21
}
   3c3e6:	4770      	bx	lr
		return -EINVAL;
   3c3e8:	f06f 0015 	mvn.w	r0, #21
   3c3ec:	e7f5      	b.n	3c3da <k_queue_append_list+0x64>

0003c3ee <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3c3ee:	b15a      	cbz	r2, 3c408 <z_impl_k_sem_init+0x1a>
   3c3f0:	428a      	cmp	r2, r1
   3c3f2:	d30c      	bcc.n	3c40e <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   3c3f4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   3c3f6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   3c3f8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   3c3fa:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   3c3fc:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   3c400:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   3c402:	6143      	str	r3, [r0, #20]
	return 0;
   3c404:	2000      	movs	r0, #0
   3c406:	4770      	bx	lr
		return -EINVAL;
   3c408:	f06f 0015 	mvn.w	r0, #21
   3c40c:	4770      	bx	lr
   3c40e:	f06f 0015 	mvn.w	r0, #21
}
   3c412:	4770      	bx	lr

0003c414 <cancel_async_locked>:
{
   3c414:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   3c416:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3c418:	f012 0f02 	tst.w	r2, #2
   3c41c:	d009      	beq.n	3c432 <cancel_async_locked+0x1e>
	return *flagp;
   3c41e:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   3c420:	f012 000f 	ands.w	r0, r2, #15
   3c424:	d037      	beq.n	3c496 <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   3c426:	f042 0202 	orr.w	r2, r2, #2
   3c42a:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3c42c:	f002 000f 	and.w	r0, r2, #15
	return ret;
   3c430:	4770      	bx	lr
{
   3c432:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   3c434:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   3c436:	f022 0104 	bic.w	r1, r2, #4
   3c43a:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3c43c:	f012 0f04 	tst.w	r2, #4
   3c440:	d011      	beq.n	3c466 <cancel_async_locked+0x52>
	return list->head;
   3c442:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3c446:	2100      	movs	r1, #0
   3c448:	b16a      	cbz	r2, 3c466 <cancel_async_locked+0x52>
   3c44a:	4290      	cmp	r0, r2
   3c44c:	d002      	beq.n	3c454 <cancel_async_locked+0x40>
   3c44e:	4611      	mov	r1, r2
   3c450:	6812      	ldr	r2, [r2, #0]
   3c452:	e7f9      	b.n	3c448 <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   3c454:	b191      	cbz	r1, 3c47c <cancel_async_locked+0x68>
	return node->next;
   3c456:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   3c458:	600a      	str	r2, [r1, #0]
	return list->tail;
   3c45a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
Z_GENLIST_REMOVE(slist, snode)
   3c45e:	4293      	cmp	r3, r2
   3c460:	d016      	beq.n	3c490 <cancel_async_locked+0x7c>
	parent->next = child;
   3c462:	2200      	movs	r2, #0
   3c464:	601a      	str	r2, [r3, #0]
	return *flagp;
   3c466:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   3c468:	f012 000f 	ands.w	r0, r2, #15
   3c46c:	d004      	beq.n	3c478 <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   3c46e:	f042 0202 	orr.w	r2, r2, #2
   3c472:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3c474:	f002 000f 	and.w	r0, r2, #15
}
   3c478:	bc10      	pop	{r4}
   3c47a:	4770      	bx	lr
	return node->next;
   3c47c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   3c47e:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
	return list->tail;
   3c482:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
Z_GENLIST_REMOVE(slist, snode)
   3c486:	428b      	cmp	r3, r1
   3c488:	d1eb      	bne.n	3c462 <cancel_async_locked+0x4e>
	list->tail = node;
   3c48a:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
}
   3c48e:	e7e8      	b.n	3c462 <cancel_async_locked+0x4e>
	list->tail = node;
   3c490:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
}
   3c494:	e7e5      	b.n	3c462 <cancel_async_locked+0x4e>
   3c496:	4770      	bx	lr

0003c498 <work_timeout>:
{
   3c498:	b510      	push	{r4, lr}
   3c49a:	b082      	sub	sp, #8
   3c49c:	4603      	mov	r3, r0
   3c49e:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c4a2:	f3ef 8411 	mrs	r4, BASEPRI
   3c4a6:	f382 8812 	msr	BASEPRI_MAX, r2
   3c4aa:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   3c4ae:	2200      	movs	r2, #0
   3c4b0:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   3c4b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   3c4b6:	f022 0108 	bic.w	r1, r2, #8
   3c4ba:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3c4be:	f012 0f08 	tst.w	r2, #8
   3c4c2:	d105      	bne.n	3c4d0 <work_timeout+0x38>
	__asm__ volatile(
   3c4c4:	f384 8811 	msr	BASEPRI, r4
   3c4c8:	f3bf 8f6f 	isb	sy
}
   3c4cc:	b002      	add	sp, #8
   3c4ce:	bd10      	pop	{r4, pc}
   3c4d0:	3810      	subs	r0, #16
		queue = dw->queue;
   3c4d2:	699b      	ldr	r3, [r3, #24]
   3c4d4:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   3c4d6:	a901      	add	r1, sp, #4
   3c4d8:	f7f3 ff58 	bl	3038c <submit_to_queue_locked>
   3c4dc:	e7f2      	b.n	3c4c4 <work_timeout+0x2c>

0003c4de <cancel_delayable_async_locked>:
{
   3c4de:	b510      	push	{r4, lr}
   3c4e0:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   3c4e2:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   3c4e4:	f023 0208 	bic.w	r2, r3, #8
   3c4e8:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3c4ea:	f013 0f08 	tst.w	r3, #8
   3c4ee:	d103      	bne.n	3c4f8 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   3c4f0:	4620      	mov	r0, r4
   3c4f2:	f7ff ff8f 	bl	3c414 <cancel_async_locked>
}
   3c4f6:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   3c4f8:	3010      	adds	r0, #16
   3c4fa:	f000 fa72 	bl	3c9e2 <z_abort_timeout>
		ret = true;
   3c4fe:	e7f7      	b.n	3c4f0 <cancel_delayable_async_locked+0x12>

0003c500 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3c500:	2300      	movs	r3, #0
   3c502:	6003      	str	r3, [r0, #0]
   3c504:	6083      	str	r3, [r0, #8]
   3c506:	60c3      	str	r3, [r0, #12]
   3c508:	6041      	str	r1, [r0, #4]
}
   3c50a:	4770      	bx	lr

0003c50c <k_work_submit_to_queue>:
{
   3c50c:	b530      	push	{r4, r5, lr}
   3c50e:	b083      	sub	sp, #12
   3c510:	9001      	str	r0, [sp, #4]
   3c512:	4608      	mov	r0, r1
	__asm__ volatile(
   3c514:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c518:	f3ef 8511 	mrs	r5, BASEPRI
   3c51c:	f383 8812 	msr	BASEPRI_MAX, r3
   3c520:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   3c524:	a901      	add	r1, sp, #4
   3c526:	f7f3 ff31 	bl	3038c <submit_to_queue_locked>
   3c52a:	4604      	mov	r4, r0
	__asm__ volatile(
   3c52c:	f385 8811 	msr	BASEPRI, r5
   3c530:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   3c534:	2800      	cmp	r0, #0
   3c536:	dc02      	bgt.n	3c53e <k_work_submit_to_queue+0x32>
}
   3c538:	4620      	mov	r0, r4
   3c53a:	b003      	add	sp, #12
   3c53c:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   3c53e:	f7f4 fc9b 	bl	30e78 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   3c542:	2800      	cmp	r0, #0
   3c544:	d0f8      	beq.n	3c538 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   3c546:	f7f4 fbd1 	bl	30cec <z_impl_k_yield>
	return ret;
   3c54a:	e7f5      	b.n	3c538 <k_work_submit_to_queue+0x2c>

0003c54c <k_work_init_delayable>:
{
   3c54c:	b538      	push	{r3, r4, r5, lr}
   3c54e:	4604      	mov	r4, r0
   3c550:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   3c552:	2230      	movs	r2, #48	; 0x30
   3c554:	2100      	movs	r1, #0
   3c556:	f7fa fc29 	bl	36dac <memset>
   3c55a:	6065      	str	r5, [r4, #4]
   3c55c:	f44f 7380 	mov.w	r3, #256	; 0x100
   3c560:	60e3      	str	r3, [r4, #12]
}
   3c562:	bd38      	pop	{r3, r4, r5, pc}

0003c564 <k_work_schedule_for_queue>:
{
   3c564:	b510      	push	{r4, lr}
   3c566:	b082      	sub	sp, #8
   3c568:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   3c56a:	f04f 0040 	mov.w	r0, #64	; 0x40
   3c56e:	f3ef 8411 	mrs	r4, BASEPRI
   3c572:	f380 8812 	msr	BASEPRI_MAX, r0
   3c576:	f3bf 8f6f 	isb	sy
	return *flagp;
   3c57a:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   3c57c:	f010 0f0e 	tst.w	r0, #14
   3c580:	d006      	beq.n	3c590 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   3c582:	2000      	movs	r0, #0
	__asm__ volatile(
   3c584:	f384 8811 	msr	BASEPRI, r4
   3c588:	f3bf 8f6f 	isb	sy
}
   3c58c:	b002      	add	sp, #8
   3c58e:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   3c590:	a801      	add	r0, sp, #4
   3c592:	f7f4 f83d 	bl	30610 <schedule_for_queue_locked>
   3c596:	e7f5      	b.n	3c584 <k_work_schedule_for_queue+0x20>

0003c598 <k_work_reschedule_for_queue>:
{
   3c598:	b5f0      	push	{r4, r5, r6, r7, lr}
   3c59a:	b083      	sub	sp, #12
   3c59c:	9001      	str	r0, [sp, #4]
   3c59e:	460c      	mov	r4, r1
   3c5a0:	4616      	mov	r6, r2
   3c5a2:	461d      	mov	r5, r3
	__asm__ volatile(
   3c5a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c5a8:	f3ef 8711 	mrs	r7, BASEPRI
   3c5ac:	f383 8812 	msr	BASEPRI_MAX, r3
   3c5b0:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   3c5b4:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   3c5b6:	f023 0208 	bic.w	r2, r3, #8
   3c5ba:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3c5bc:	f013 0f08 	tst.w	r3, #8
   3c5c0:	d10b      	bne.n	3c5da <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   3c5c2:	4632      	mov	r2, r6
   3c5c4:	462b      	mov	r3, r5
   3c5c6:	4621      	mov	r1, r4
   3c5c8:	a801      	add	r0, sp, #4
   3c5ca:	f7f4 f821 	bl	30610 <schedule_for_queue_locked>
	__asm__ volatile(
   3c5ce:	f387 8811 	msr	BASEPRI, r7
   3c5d2:	f3bf 8f6f 	isb	sy
}
   3c5d6:	b003      	add	sp, #12
   3c5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   3c5da:	f101 0010 	add.w	r0, r1, #16
   3c5de:	f000 fa00 	bl	3c9e2 <z_abort_timeout>
		ret = true;
   3c5e2:	e7ee      	b.n	3c5c2 <k_work_reschedule_for_queue+0x2a>

0003c5e4 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   3c5e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   3c5e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c5ea:	f3ef 8411 	mrs	r4, BASEPRI
   3c5ee:	f383 8812 	msr	BASEPRI_MAX, r3
   3c5f2:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   3c5f6:	f7ff ff72 	bl	3c4de <cancel_delayable_async_locked>
	__asm__ volatile(
   3c5fa:	f384 8811 	msr	BASEPRI, r4
   3c5fe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   3c602:	bd10      	pop	{r4, pc}

0003c604 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   3c604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c606:	460f      	mov	r7, r1
	__asm__ volatile(
   3c608:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c60c:	f3ef 8611 	mrs	r6, BASEPRI
   3c610:	f383 8812 	msr	BASEPRI_MAX, r3
   3c614:	f3bf 8f6f 	isb	sy
	return *flagp;
   3c618:	68c3      	ldr	r3, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   3c61a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   3c61e:	2b00      	cmp	r3, #0
   3c620:	bf14      	ite	ne
   3c622:	2501      	movne	r5, #1
   3c624:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   3c626:	d107      	bne.n	3c638 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   3c628:	2000      	movs	r0, #0
	__asm__ volatile(
   3c62a:	f386 8811 	msr	BASEPRI, r6
   3c62e:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   3c632:	b948      	cbnz	r0, 3c648 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   3c634:	4628      	mov	r0, r5
   3c636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c638:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   3c63a:	f7ff ff50 	bl	3c4de <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   3c63e:	4639      	mov	r1, r7
   3c640:	4620      	mov	r0, r4
   3c642:	f7f3 ff4b 	bl	304dc <cancel_sync_locked>
   3c646:	e7f0      	b.n	3c62a <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   3c648:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   3c64c:	f04f 32ff 	mov.w	r2, #4294967295
   3c650:	f04f 33ff 	mov.w	r3, #4294967295
   3c654:	f7f3 fe32 	bl	302bc <z_impl_k_sem_take>
   3c658:	e7ec      	b.n	3c634 <k_work_cancel_delayable_sync+0x30>

0003c65a <thread_active_elsewhere>:
}
   3c65a:	2000      	movs	r0, #0
   3c65c:	4770      	bx	lr

0003c65e <pended_on_thread>:
}
   3c65e:	6880      	ldr	r0, [r0, #8]
   3c660:	4770      	bx	lr

0003c662 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3c662:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3c666:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3c66a:	4283      	cmp	r3, r0
   3c66c:	d001      	beq.n	3c672 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   3c66e:	1ac0      	subs	r0, r0, r3
   3c670:	4770      	bx	lr
	return 0;
   3c672:	2000      	movs	r0, #0
}
   3c674:	4770      	bx	lr

0003c676 <z_unpend_thread_no_timeout>:
{
   3c676:	b538      	push	{r3, r4, r5, lr}
   3c678:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   3c67a:	2300      	movs	r3, #0
	__asm__ volatile(
   3c67c:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c680:	f3ef 8511 	mrs	r5, BASEPRI
   3c684:	f382 8812 	msr	BASEPRI_MAX, r2
   3c688:	f3bf 8f6f 	isb	sy
   3c68c:	b98b      	cbnz	r3, 3c6b2 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3c68e:	4620      	mov	r0, r4
   3c690:	f7ff ffe5 	bl	3c65e <pended_on_thread>
   3c694:	4621      	mov	r1, r4
   3c696:	f000 f822 	bl	3c6de <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3c69a:	7b63      	ldrb	r3, [r4, #13]
   3c69c:	f023 0302 	bic.w	r3, r3, #2
   3c6a0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   3c6a2:	2300      	movs	r3, #0
   3c6a4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   3c6a6:	f385 8811 	msr	BASEPRI, r5
   3c6aa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3c6ae:	2301      	movs	r3, #1
   3c6b0:	e7ec      	b.n	3c68c <z_unpend_thread_no_timeout+0x16>
}
   3c6b2:	bd38      	pop	{r3, r4, r5, pc}

0003c6b4 <z_reschedule_irqlock>:
{
   3c6b4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3c6b6:	4603      	mov	r3, r0
   3c6b8:	b920      	cbnz	r0, 3c6c4 <z_reschedule_irqlock+0x10>
   3c6ba:	f3ef 8205 	mrs	r2, IPSR
   3c6be:	b942      	cbnz	r2, 3c6d2 <z_reschedule_irqlock+0x1e>
   3c6c0:	2201      	movs	r2, #1
   3c6c2:	e000      	b.n	3c6c6 <z_reschedule_irqlock+0x12>
   3c6c4:	2200      	movs	r2, #0
	if (resched(key)) {
   3c6c6:	b932      	cbnz	r2, 3c6d6 <z_reschedule_irqlock+0x22>
   3c6c8:	f383 8811 	msr	BASEPRI, r3
   3c6cc:	f3bf 8f6f 	isb	sy
}
   3c6d0:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3c6d2:	2200      	movs	r2, #0
   3c6d4:	e7f7      	b.n	3c6c6 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   3c6d6:	4618      	mov	r0, r3
   3c6d8:	f7e5 fd5e 	bl	22198 <arch_swap>
	return ret;
   3c6dc:	e7f8      	b.n	3c6d0 <z_reschedule_irqlock+0x1c>

0003c6de <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   3c6de:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   3c6e0:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   3c6e2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3c6e4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3c6e6:	2300      	movs	r3, #0
   3c6e8:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   3c6ea:	604b      	str	r3, [r1, #4]
}
   3c6ec:	4770      	bx	lr

0003c6ee <z_unpend_thread>:
{
   3c6ee:	b538      	push	{r3, r4, r5, lr}
   3c6f0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   3c6f2:	2300      	movs	r3, #0
	__asm__ volatile(
   3c6f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c6f8:	f3ef 8511 	mrs	r5, BASEPRI
   3c6fc:	f382 8812 	msr	BASEPRI_MAX, r2
   3c700:	f3bf 8f6f 	isb	sy
   3c704:	b98b      	cbnz	r3, 3c72a <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3c706:	4620      	mov	r0, r4
   3c708:	f7ff ffa9 	bl	3c65e <pended_on_thread>
   3c70c:	4621      	mov	r1, r4
   3c70e:	f7ff ffe6 	bl	3c6de <z_priq_dumb_remove>
   3c712:	7b63      	ldrb	r3, [r4, #13]
   3c714:	f023 0302 	bic.w	r3, r3, #2
   3c718:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   3c71a:	2300      	movs	r3, #0
   3c71c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   3c71e:	f385 8811 	msr	BASEPRI, r5
   3c722:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3c726:	2301      	movs	r3, #1
   3c728:	e7ec      	b.n	3c704 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   3c72a:	f104 0018 	add.w	r0, r4, #24
   3c72e:	f000 f958 	bl	3c9e2 <z_abort_timeout>
}
   3c732:	bd38      	pop	{r3, r4, r5, pc}

0003c734 <z_priq_dumb_best>:
{
   3c734:	4603      	mov	r3, r0
	return list->head == list;
   3c736:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3c738:	4283      	cmp	r3, r0
   3c73a:	d000      	beq.n	3c73e <z_priq_dumb_best+0xa>
}
   3c73c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   3c73e:	2000      	movs	r0, #0
	return thread;
   3c740:	e7fc      	b.n	3c73c <z_priq_dumb_best+0x8>

0003c742 <z_ready_thread>:
{
   3c742:	b538      	push	{r3, r4, r5, lr}
   3c744:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   3c746:	2300      	movs	r3, #0
	__asm__ volatile(
   3c748:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c74c:	f3ef 8511 	mrs	r5, BASEPRI
   3c750:	f382 8812 	msr	BASEPRI_MAX, r2
   3c754:	f3bf 8f6f 	isb	sy
   3c758:	e007      	b.n	3c76a <z_ready_thread+0x28>
			ready_thread(thread);
   3c75a:	4620      	mov	r0, r4
   3c75c:	f7f4 f916 	bl	3098c <ready_thread>
	__asm__ volatile(
   3c760:	f385 8811 	msr	BASEPRI, r5
   3c764:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3c768:	2301      	movs	r3, #1
   3c76a:	b92b      	cbnz	r3, 3c778 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   3c76c:	4620      	mov	r0, r4
   3c76e:	f7ff ff74 	bl	3c65a <thread_active_elsewhere>
   3c772:	2800      	cmp	r0, #0
   3c774:	d1f4      	bne.n	3c760 <z_ready_thread+0x1e>
   3c776:	e7f0      	b.n	3c75a <z_ready_thread+0x18>
}
   3c778:	bd38      	pop	{r3, r4, r5, pc}

0003c77a <z_thread_timeout>:
{
   3c77a:	b570      	push	{r4, r5, r6, lr}
   3c77c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   3c77e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   3c782:	2300      	movs	r3, #0
	__asm__ volatile(
   3c784:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c788:	f3ef 8611 	mrs	r6, BASEPRI
   3c78c:	f382 8812 	msr	BASEPRI_MAX, r2
   3c790:	f3bf 8f6f 	isb	sy
   3c794:	e019      	b.n	3c7ca <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3c796:	4628      	mov	r0, r5
   3c798:	f7ff ff61 	bl	3c65e <pended_on_thread>
   3c79c:	4629      	mov	r1, r5
   3c79e:	f7ff ff9e 	bl	3c6de <z_priq_dumb_remove>
   3c7a2:	7b6b      	ldrb	r3, [r5, #13]
   3c7a4:	f023 0302 	bic.w	r3, r3, #2
   3c7a8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   3c7aa:	2300      	movs	r3, #0
   3c7ac:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3c7ae:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3c7b2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   3c7b6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   3c7ba:	4628      	mov	r0, r5
   3c7bc:	f7f4 f8e6 	bl	3098c <ready_thread>
	__asm__ volatile(
   3c7c0:	f386 8811 	msr	BASEPRI, r6
   3c7c4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3c7c8:	2301      	movs	r3, #1
   3c7ca:	b94b      	cbnz	r3, 3c7e0 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   3c7cc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   3c7d0:	f013 0f28 	tst.w	r3, #40	; 0x28
   3c7d4:	d1f4      	bne.n	3c7c0 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   3c7d6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3c7da:	2b00      	cmp	r3, #0
   3c7dc:	d1db      	bne.n	3c796 <z_thread_timeout+0x1c>
   3c7de:	e7e6      	b.n	3c7ae <z_thread_timeout+0x34>
}
   3c7e0:	bd70      	pop	{r4, r5, r6, pc}

0003c7e2 <add_to_waitq_locked>:
{
   3c7e2:	b570      	push	{r4, r5, r6, lr}
   3c7e4:	4605      	mov	r5, r0
   3c7e6:	460e      	mov	r6, r1
	unready_thread(thread);
   3c7e8:	f7f4 f92e 	bl	30a48 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   3c7ec:	7b6b      	ldrb	r3, [r5, #13]
   3c7ee:	f043 0302 	orr.w	r3, r3, #2
   3c7f2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   3c7f4:	b1b6      	cbz	r6, 3c824 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   3c7f6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   3c7f8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3c7fa:	42a6      	cmp	r6, r4
   3c7fc:	d019      	beq.n	3c832 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3c7fe:	b164      	cbz	r4, 3c81a <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3c800:	4621      	mov	r1, r4
   3c802:	4628      	mov	r0, r5
   3c804:	f7ff ff2d 	bl	3c662 <z_sched_prio_cmp>
   3c808:	2800      	cmp	r0, #0
   3c80a:	dc0c      	bgt.n	3c826 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3c80c:	b12c      	cbz	r4, 3c81a <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   3c80e:	6873      	ldr	r3, [r6, #4]
   3c810:	429c      	cmp	r4, r3
   3c812:	d002      	beq.n	3c81a <add_to_waitq_locked+0x38>
   3c814:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3c816:	2c00      	cmp	r4, #0
   3c818:	d1f1      	bne.n	3c7fe <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   3c81a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   3c81c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   3c81e:	606b      	str	r3, [r5, #4]
	tail->next = node;
   3c820:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3c822:	6075      	str	r5, [r6, #4]
}
   3c824:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   3c826:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   3c828:	606b      	str	r3, [r5, #4]
	node->next = successor;
   3c82a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   3c82c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3c82e:	6065      	str	r5, [r4, #4]
}
   3c830:	e7f8      	b.n	3c824 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3c832:	2400      	movs	r4, #0
   3c834:	e7e3      	b.n	3c7fe <add_to_waitq_locked+0x1c>

0003c836 <pend>:
{
   3c836:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c83a:	4605      	mov	r5, r0
   3c83c:	460f      	mov	r7, r1
   3c83e:	4691      	mov	r9, r2
   3c840:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   3c842:	2400      	movs	r4, #0
	__asm__ volatile(
   3c844:	f04f 0340 	mov.w	r3, #64	; 0x40
   3c848:	f3ef 8611 	mrs	r6, BASEPRI
   3c84c:	f383 8812 	msr	BASEPRI_MAX, r3
   3c850:	f3bf 8f6f 	isb	sy
   3c854:	b94c      	cbnz	r4, 3c86a <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   3c856:	4639      	mov	r1, r7
   3c858:	4628      	mov	r0, r5
   3c85a:	f7ff ffc2 	bl	3c7e2 <add_to_waitq_locked>
	__asm__ volatile(
   3c85e:	f386 8811 	msr	BASEPRI, r6
   3c862:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3c866:	2401      	movs	r4, #1
   3c868:	e7f4      	b.n	3c854 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   3c86a:	464a      	mov	r2, r9
   3c86c:	4643      	mov	r3, r8
   3c86e:	4628      	mov	r0, r5
   3c870:	f7f3 ff40 	bl	306f4 <add_thread_timeout>
}
   3c874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003c878 <z_unpend1_no_timeout>:
{
   3c878:	b570      	push	{r4, r5, r6, lr}
   3c87a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   3c87c:	2300      	movs	r3, #0
	__asm__ volatile(
   3c87e:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c882:	f3ef 8511 	mrs	r5, BASEPRI
   3c886:	f382 8812 	msr	BASEPRI_MAX, r2
   3c88a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   3c88e:	461c      	mov	r4, r3
   3c890:	e00f      	b.n	3c8b2 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3c892:	f7ff fee4 	bl	3c65e <pended_on_thread>
   3c896:	4621      	mov	r1, r4
   3c898:	f7ff ff21 	bl	3c6de <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3c89c:	7b63      	ldrb	r3, [r4, #13]
   3c89e:	f023 0302 	bic.w	r3, r3, #2
   3c8a2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   3c8a4:	2300      	movs	r3, #0
   3c8a6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   3c8a8:	f385 8811 	msr	BASEPRI, r5
   3c8ac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3c8b0:	2301      	movs	r3, #1
   3c8b2:	b933      	cbnz	r3, 3c8c2 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   3c8b4:	4630      	mov	r0, r6
   3c8b6:	f7ff ff3d 	bl	3c734 <z_priq_dumb_best>
		if (thread != NULL) {
   3c8ba:	4604      	mov	r4, r0
   3c8bc:	2800      	cmp	r0, #0
   3c8be:	d1e8      	bne.n	3c892 <z_unpend1_no_timeout+0x1a>
   3c8c0:	e7f2      	b.n	3c8a8 <z_unpend1_no_timeout+0x30>
}
   3c8c2:	4620      	mov	r0, r4
   3c8c4:	bd70      	pop	{r4, r5, r6, pc}

0003c8c6 <z_unpend_first_thread>:
{
   3c8c6:	b570      	push	{r4, r5, r6, lr}
   3c8c8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   3c8ca:	2300      	movs	r3, #0
	__asm__ volatile(
   3c8cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c8d0:	f3ef 8511 	mrs	r5, BASEPRI
   3c8d4:	f382 8812 	msr	BASEPRI_MAX, r2
   3c8d8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   3c8dc:	461c      	mov	r4, r3
   3c8de:	e013      	b.n	3c908 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3c8e0:	f7ff febd 	bl	3c65e <pended_on_thread>
   3c8e4:	4621      	mov	r1, r4
   3c8e6:	f7ff fefa 	bl	3c6de <z_priq_dumb_remove>
   3c8ea:	7b63      	ldrb	r3, [r4, #13]
   3c8ec:	f023 0302 	bic.w	r3, r3, #2
   3c8f0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   3c8f2:	2300      	movs	r3, #0
   3c8f4:	60a3      	str	r3, [r4, #8]
   3c8f6:	f104 0018 	add.w	r0, r4, #24
   3c8fa:	f000 f872 	bl	3c9e2 <z_abort_timeout>
	__asm__ volatile(
   3c8fe:	f385 8811 	msr	BASEPRI, r5
   3c902:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3c906:	2301      	movs	r3, #1
   3c908:	b933      	cbnz	r3, 3c918 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   3c90a:	4630      	mov	r0, r6
   3c90c:	f7ff ff12 	bl	3c734 <z_priq_dumb_best>
		if (thread != NULL) {
   3c910:	4604      	mov	r4, r0
   3c912:	2800      	cmp	r0, #0
   3c914:	d1e4      	bne.n	3c8e0 <z_unpend_first_thread+0x1a>
   3c916:	e7f2      	b.n	3c8fe <z_unpend_first_thread+0x38>
}
   3c918:	4620      	mov	r0, r4
   3c91a:	bd70      	pop	{r4, r5, r6, pc}

0003c91c <z_unpend_all>:
{
   3c91c:	b538      	push	{r3, r4, r5, lr}
   3c91e:	4605      	mov	r5, r0
	int need_sched = 0;
   3c920:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3c922:	e006      	b.n	3c932 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   3c924:	4620      	mov	r0, r4
   3c926:	f7ff fee2 	bl	3c6ee <z_unpend_thread>
		z_ready_thread(thread);
   3c92a:	4620      	mov	r0, r4
   3c92c:	f7ff ff09 	bl	3c742 <z_ready_thread>
		need_sched = 1;
   3c930:	2001      	movs	r0, #1
	return list->head == list;
   3c932:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3c934:	42a5      	cmp	r5, r4
   3c936:	d001      	beq.n	3c93c <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3c938:	2c00      	cmp	r4, #0
   3c93a:	d1f3      	bne.n	3c924 <z_unpend_all+0x8>
}
   3c93c:	bd38      	pop	{r3, r4, r5, pc}

0003c93e <init_ready_q>:
	sys_dlist_init(&rq->runq);
   3c93e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   3c940:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   3c942:	6083      	str	r3, [r0, #8]
}
   3c944:	4770      	bx	lr

0003c946 <z_sched_wake>:
{
   3c946:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c94a:	4606      	mov	r6, r0
   3c94c:	4688      	mov	r8, r1
   3c94e:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   3c950:	2300      	movs	r3, #0
	__asm__ volatile(
   3c952:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c956:	f3ef 8511 	mrs	r5, BASEPRI
   3c95a:	f382 8812 	msr	BASEPRI_MAX, r2
   3c95e:	f3bf 8f6f 	isb	sy
	bool ret = false;
   3c962:	4699      	mov	r9, r3
   3c964:	e01b      	b.n	3c99e <z_sched_wake+0x58>
   3c966:	f8c0 80bc 	str.w	r8, [r0, #188]	; 0xbc
	thread->base.swap_data = data;
   3c96a:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3c96c:	f7ff fe77 	bl	3c65e <pended_on_thread>
   3c970:	4621      	mov	r1, r4
   3c972:	f7ff feb4 	bl	3c6de <z_priq_dumb_remove>
   3c976:	7b63      	ldrb	r3, [r4, #13]
   3c978:	f023 0302 	bic.w	r3, r3, #2
   3c97c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   3c97e:	2300      	movs	r3, #0
   3c980:	60a3      	str	r3, [r4, #8]
   3c982:	f104 0018 	add.w	r0, r4, #24
   3c986:	f000 f82c 	bl	3c9e2 <z_abort_timeout>
			ready_thread(thread);
   3c98a:	4620      	mov	r0, r4
   3c98c:	f7f3 fffe 	bl	3098c <ready_thread>
			ret = true;
   3c990:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   3c994:	f385 8811 	msr	BASEPRI, r5
   3c998:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3c99c:	2301      	movs	r3, #1
   3c99e:	b933      	cbnz	r3, 3c9ae <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   3c9a0:	4630      	mov	r0, r6
   3c9a2:	f7ff fec7 	bl	3c734 <z_priq_dumb_best>
		if (thread != NULL) {
   3c9a6:	4604      	mov	r4, r0
   3c9a8:	2800      	cmp	r0, #0
   3c9aa:	d1dc      	bne.n	3c966 <z_sched_wake+0x20>
   3c9ac:	e7f2      	b.n	3c994 <z_sched_wake+0x4e>
}
   3c9ae:	4648      	mov	r0, r9
   3c9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003c9b4 <remove_timeout>:
{
   3c9b4:	b538      	push	{r3, r4, r5, lr}
   3c9b6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   3c9b8:	f7f4 facc 	bl	30f54 <next>
   3c9bc:	b148      	cbz	r0, 3c9d2 <remove_timeout+0x1e>
   3c9be:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   3c9c0:	6920      	ldr	r0, [r4, #16]
   3c9c2:	6965      	ldr	r5, [r4, #20]
   3c9c4:	6913      	ldr	r3, [r2, #16]
   3c9c6:	6951      	ldr	r1, [r2, #20]
   3c9c8:	181b      	adds	r3, r3, r0
   3c9ca:	eb45 0101 	adc.w	r1, r5, r1
   3c9ce:	6113      	str	r3, [r2, #16]
   3c9d0:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   3c9d2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   3c9d4:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   3c9d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3c9d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3c9da:	2300      	movs	r3, #0
   3c9dc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   3c9de:	6063      	str	r3, [r4, #4]
}
   3c9e0:	bd38      	pop	{r3, r4, r5, pc}

0003c9e2 <z_abort_timeout>:
{
   3c9e2:	b570      	push	{r4, r5, r6, lr}
   3c9e4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   3c9e6:	2300      	movs	r3, #0
	__asm__ volatile(
   3c9e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   3c9ec:	f3ef 8611 	mrs	r6, BASEPRI
   3c9f0:	f382 8812 	msr	BASEPRI_MAX, r2
   3c9f4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   3c9f8:	f06f 0015 	mvn.w	r0, #21
   3c9fc:	e008      	b.n	3ca10 <z_abort_timeout+0x2e>
			remove_timeout(to);
   3c9fe:	4620      	mov	r0, r4
   3ca00:	f7ff ffd8 	bl	3c9b4 <remove_timeout>
			ret = 0;
   3ca04:	4628      	mov	r0, r5
	__asm__ volatile(
   3ca06:	f386 8811 	msr	BASEPRI, r6
   3ca0a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   3ca0e:	2301      	movs	r3, #1
   3ca10:	461d      	mov	r5, r3
   3ca12:	b91b      	cbnz	r3, 3ca1c <z_abort_timeout+0x3a>
	return node->next != NULL;
   3ca14:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   3ca16:	2b00      	cmp	r3, #0
   3ca18:	d1f1      	bne.n	3c9fe <z_abort_timeout+0x1c>
   3ca1a:	e7f4      	b.n	3ca06 <z_abort_timeout+0x24>
}
   3ca1c:	bd70      	pop	{r4, r5, r6, pc}

0003ca1e <z_get_next_timeout_expiry>:
{
   3ca1e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   3ca20:	2300      	movs	r3, #0
	__asm__ volatile(
   3ca22:	f04f 0240 	mov.w	r2, #64	; 0x40
   3ca26:	f3ef 8411 	mrs	r4, BASEPRI
   3ca2a:	f382 8812 	msr	BASEPRI_MAX, r2
   3ca2e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   3ca32:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   3ca36:	b93b      	cbnz	r3, 3ca48 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   3ca38:	f7f4 faa4 	bl	30f84 <next_timeout>
	__asm__ volatile(
   3ca3c:	f384 8811 	msr	BASEPRI, r4
   3ca40:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   3ca44:	2301      	movs	r3, #1
   3ca46:	e7f6      	b.n	3ca36 <z_get_next_timeout_expiry+0x18>
}
   3ca48:	bd10      	pop	{r4, pc}

0003ca4a <z_set_timeout_expiry>:
{
   3ca4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ca4c:	4606      	mov	r6, r0
   3ca4e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   3ca50:	2300      	movs	r3, #0
	__asm__ volatile(
   3ca52:	f04f 0240 	mov.w	r2, #64	; 0x40
   3ca56:	f3ef 8511 	mrs	r5, BASEPRI
   3ca5a:	f382 8812 	msr	BASEPRI_MAX, r2
   3ca5e:	f3bf 8f6f 	isb	sy
   3ca62:	e00a      	b.n	3ca7a <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   3ca64:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   3ca66:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3ca6a:	2801      	cmp	r0, #1
   3ca6c:	dd00      	ble.n	3ca70 <z_set_timeout_expiry+0x26>
   3ca6e:	b97c      	cbnz	r4, 3ca90 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   3ca70:	f385 8811 	msr	BASEPRI, r5
   3ca74:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   3ca78:	2301      	movs	r3, #1
   3ca7a:	461c      	mov	r4, r3
   3ca7c:	b97b      	cbnz	r3, 3ca9e <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   3ca7e:	f7f4 fa81 	bl	30f84 <next_timeout>
			      || (ticks <= next_to);
   3ca82:	f1b0 3fff 	cmp.w	r0, #4294967295
   3ca86:	d0ed      	beq.n	3ca64 <z_set_timeout_expiry+0x1a>
   3ca88:	42b0      	cmp	r0, r6
   3ca8a:	dbec      	blt.n	3ca66 <z_set_timeout_expiry+0x1c>
   3ca8c:	2401      	movs	r4, #1
   3ca8e:	e7ea      	b.n	3ca66 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   3ca90:	4639      	mov	r1, r7
   3ca92:	42b0      	cmp	r0, r6
   3ca94:	bfa8      	it	ge
   3ca96:	4630      	movge	r0, r6
   3ca98:	f7f1 fbe8 	bl	2e26c <sys_clock_set_timeout>
   3ca9c:	e7e8      	b.n	3ca70 <z_set_timeout_expiry+0x26>
}
   3ca9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003caa0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3caa0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3caa2:	f7f4 fba1 	bl	311e8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3caa6:	bd08      	pop	{r3, pc}

0003caa8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3caa8:	b900      	cbnz	r0, 3caac <z_impl_k_busy_wait+0x4>
   3caaa:	4770      	bx	lr
{
   3caac:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3caae:	f7e6 fa0d 	bl	22ecc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3cab2:	bd08      	pop	{r3, pc}

0003cab4 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   3cab4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3cab6:	f1b1 3fff 	cmp.w	r1, #4294967295
   3caba:	bf08      	it	eq
   3cabc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   3cac0:	d024      	beq.n	3cb0c <sys_clock_timeout_end_calc+0x58>
   3cac2:	4604      	mov	r4, r0
   3cac4:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3cac6:	ea54 0105 	orrs.w	r1, r4, r5
   3caca:	d00d      	beq.n	3cae8 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3cacc:	f06f 0101 	mvn.w	r1, #1
   3cad0:	1a0a      	subs	r2, r1, r0
   3cad2:	f04f 31ff 	mov.w	r1, #4294967295
   3cad6:	eb61 0305 	sbc.w	r3, r1, r5
   3cada:	2a00      	cmp	r2, #0
   3cadc:	f173 0100 	sbcs.w	r1, r3, #0
   3cae0:	db05      	blt.n	3caee <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   3cae2:	4610      	mov	r0, r2
   3cae4:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3cae6:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   3cae8:	f7f4 fb7e 	bl	311e8 <sys_clock_tick_get>
   3caec:	e7fb      	b.n	3cae6 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   3caee:	f7f4 fb7b 	bl	311e8 <sys_clock_tick_get>
   3caf2:	4623      	mov	r3, r4
   3caf4:	462a      	mov	r2, r5
   3caf6:	2c01      	cmp	r4, #1
   3caf8:	f175 0400 	sbcs.w	r4, r5, #0
   3cafc:	db03      	blt.n	3cb06 <sys_clock_timeout_end_calc+0x52>
   3cafe:	18c0      	adds	r0, r0, r3
   3cb00:	eb42 0101 	adc.w	r1, r2, r1
   3cb04:	e7ef      	b.n	3cae6 <sys_clock_timeout_end_calc+0x32>
   3cb06:	2301      	movs	r3, #1
   3cb08:	2200      	movs	r2, #0
   3cb0a:	e7f8      	b.n	3cafe <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   3cb0c:	f04f 30ff 	mov.w	r0, #4294967295
   3cb10:	4601      	mov	r1, r0
   3cb12:	e7e8      	b.n	3cae6 <sys_clock_timeout_end_calc+0x32>

0003cb14 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   3cb14:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   3cb16:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   3cb18:	2300      	movs	r3, #0
   3cb1a:	6303      	str	r3, [r0, #48]	; 0x30
   3cb1c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   3cb20:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   3cb22:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   3cb24:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3cb26:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   3cb28:	6343      	str	r3, [r0, #52]	; 0x34
}
   3cb2a:	4770      	bx	lr

0003cb2c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3cb2c:	b510      	push	{r4, lr}
   3cb2e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   3cb30:	f7ff ff57 	bl	3c9e2 <z_abort_timeout>

	if (inactive) {
   3cb34:	b9a0      	cbnz	r0, 3cb60 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   3cb36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3cb38:	b10b      	cbz	r3, 3cb3e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3cb3a:	4620      	mov	r0, r4
   3cb3c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3cb3e:	f104 0018 	add.w	r0, r4, #24
   3cb42:	f7ff fe99 	bl	3c878 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3cb46:	b158      	cbz	r0, 3cb60 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   3cb48:	f7ff fdfb 	bl	3c742 <z_ready_thread>
	__asm__ volatile(
   3cb4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   3cb50:	f3ef 8011 	mrs	r0, BASEPRI
   3cb54:	f383 8812 	msr	BASEPRI_MAX, r3
   3cb58:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3cb5c:	f7ff fdaa 	bl	3c6b4 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   3cb60:	bd10      	pop	{r4, pc}

0003cb62 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3cb62:	b108      	cbz	r0, 3cb68 <poller_thread+0x6>
   3cb64:	3860      	subs	r0, #96	; 0x60
   3cb66:	4770      	bx	lr
}
   3cb68:	4770      	bx	lr

0003cb6a <signal_poller>:
{
   3cb6a:	b538      	push	{r3, r4, r5, lr}
   3cb6c:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   3cb6e:	6880      	ldr	r0, [r0, #8]
   3cb70:	f7ff fff7 	bl	3cb62 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   3cb74:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   3cb76:	f013 0f02 	tst.w	r3, #2
   3cb7a:	d028      	beq.n	3cbce <signal_poller+0x64>
   3cb7c:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   3cb7e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   3cb82:	f06f 0001 	mvn.w	r0, #1
   3cb86:	f04f 31ff 	mov.w	r1, #4294967295
   3cb8a:	428b      	cmp	r3, r1
   3cb8c:	bf08      	it	eq
   3cb8e:	4282      	cmpeq	r2, r0
   3cb90:	d01f      	beq.n	3cbd2 <signal_poller+0x68>
	z_unpend_thread(thread);
   3cb92:	4620      	mov	r0, r4
   3cb94:	f7ff fdab 	bl	3c6ee <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3cb98:	2d08      	cmp	r5, #8
   3cb9a:	d00a      	beq.n	3cbb2 <signal_poller+0x48>
   3cb9c:	2300      	movs	r3, #0
   3cb9e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	uint8_t state = thread->base.thread_state;
   3cba2:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3cba4:	f013 0f1f 	tst.w	r3, #31
   3cba8:	d108      	bne.n	3cbbc <signal_poller+0x52>
	return node->next != NULL;
   3cbaa:	69a3      	ldr	r3, [r4, #24]
   3cbac:	b123      	cbz	r3, 3cbb8 <signal_poller+0x4e>
   3cbae:	2300      	movs	r3, #0
   3cbb0:	e005      	b.n	3cbbe <signal_poller+0x54>
   3cbb2:	f06f 0303 	mvn.w	r3, #3
   3cbb6:	e7f2      	b.n	3cb9e <signal_poller+0x34>
   3cbb8:	2301      	movs	r3, #1
   3cbba:	e000      	b.n	3cbbe <signal_poller+0x54>
   3cbbc:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   3cbbe:	b90b      	cbnz	r3, 3cbc4 <signal_poller+0x5a>
		return 0;
   3cbc0:	2000      	movs	r0, #0
   3cbc2:	e005      	b.n	3cbd0 <signal_poller+0x66>
	z_ready_thread(thread);
   3cbc4:	4620      	mov	r0, r4
   3cbc6:	f7ff fdbc 	bl	3c742 <z_ready_thread>
	return 0;
   3cbca:	2000      	movs	r0, #0
   3cbcc:	e000      	b.n	3cbd0 <signal_poller+0x66>
		return 0;
   3cbce:	2000      	movs	r0, #0
}
   3cbd0:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   3cbd2:	f06f 000a 	mvn.w	r0, #10
   3cbd6:	e7fb      	b.n	3cbd0 <signal_poller+0x66>

0003cbd8 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   3cbd8:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   3cbda:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   3cbdc:	7823      	ldrb	r3, [r4, #0]
   3cbde:	b173      	cbz	r3, 3cbfe <signal_triggered_work+0x26>
   3cbe0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   3cbe4:	b15d      	cbz	r5, 3cbfe <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   3cbe6:	f1a4 0614 	sub.w	r6, r4, #20
   3cbea:	f104 0014 	add.w	r0, r4, #20
   3cbee:	f7ff fef8 	bl	3c9e2 <z_abort_timeout>
		twork->poll_result = 0;
   3cbf2:	2300      	movs	r3, #0
   3cbf4:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   3cbf6:	4631      	mov	r1, r6
   3cbf8:	4628      	mov	r0, r5
   3cbfa:	f7ff fc87 	bl	3c50c <k_work_submit_to_queue>
	}

	return 0;
}
   3cbfe:	2000      	movs	r0, #0
   3cc00:	bd70      	pop	{r4, r5, r6, pc}

0003cc02 <signal_poll_event>:
{
   3cc02:	b570      	push	{r4, r5, r6, lr}
   3cc04:	4604      	mov	r4, r0
   3cc06:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   3cc08:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   3cc0a:	b1d6      	cbz	r6, 3cc42 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   3cc0c:	7873      	ldrb	r3, [r6, #1]
   3cc0e:	2b01      	cmp	r3, #1
   3cc10:	d00d      	beq.n	3cc2e <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   3cc12:	2b02      	cmp	r3, #2
   3cc14:	d012      	beq.n	3cc3c <signal_poll_event+0x3a>
		poller->is_polling = false;
   3cc16:	2000      	movs	r0, #0
   3cc18:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   3cc1a:	2300      	movs	r3, #0
   3cc1c:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   3cc1e:	68e3      	ldr	r3, [r4, #12]
   3cc20:	f3c3 3145 	ubfx	r1, r3, #13, #6
   3cc24:	430d      	orrs	r5, r1
   3cc26:	f365 3352 	bfi	r3, r5, #13, #6
   3cc2a:	60e3      	str	r3, [r4, #12]
}
   3cc2c:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   3cc2e:	f7ff ff9c 	bl	3cb6a <signal_poller>
		poller->is_polling = false;
   3cc32:	2300      	movs	r3, #0
   3cc34:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   3cc36:	4298      	cmp	r0, r3
   3cc38:	daef      	bge.n	3cc1a <signal_poll_event+0x18>
   3cc3a:	e7f7      	b.n	3cc2c <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   3cc3c:	f7ff ffcc 	bl	3cbd8 <signal_triggered_work>
   3cc40:	e7f7      	b.n	3cc32 <signal_poll_event+0x30>
	int retcode = 0;
   3cc42:	2000      	movs	r0, #0
   3cc44:	e7e9      	b.n	3cc1a <signal_poll_event+0x18>

0003cc46 <k_poll_event_init>:
{
   3cc46:	b430      	push	{r4, r5}
	event->poller = NULL;
   3cc48:	2400      	movs	r4, #0
   3cc4a:	6084      	str	r4, [r0, #8]
	event->type = type;
   3cc4c:	7b45      	ldrb	r5, [r0, #13]
   3cc4e:	f361 0504 	bfi	r5, r1, #0, #5
   3cc52:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   3cc54:	68c1      	ldr	r1, [r0, #12]
   3cc56:	f364 3152 	bfi	r1, r4, #13, #6
   3cc5a:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   3cc5c:	f3c1 4107 	ubfx	r1, r1, #16, #8
   3cc60:	f362 01c3 	bfi	r1, r2, #3, #1
   3cc64:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   3cc66:	89c2      	ldrh	r2, [r0, #14]
   3cc68:	f364 120f 	bfi	r2, r4, #4, #12
   3cc6c:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   3cc6e:	6103      	str	r3, [r0, #16]
}
   3cc70:	bc30      	pop	{r4, r5}
   3cc72:	4770      	bx	lr

0003cc74 <z_handle_obj_poll_events>:
{
   3cc74:	b508      	push	{r3, lr}
   3cc76:	4603      	mov	r3, r0
	return list->head == list;
   3cc78:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3cc7a:	4283      	cmp	r3, r0
   3cc7c:	d009      	beq.n	3cc92 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   3cc7e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   3cc80:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   3cc82:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3cc84:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3cc86:	2300      	movs	r3, #0
   3cc88:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3cc8a:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   3cc8c:	b108      	cbz	r0, 3cc92 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   3cc8e:	f7ff ffb8 	bl	3cc02 <signal_poll_event>
}
   3cc92:	bd08      	pop	{r3, pc}

0003cc94 <are_wait_conditions_met>:
 * current set of events are present in the desired set of events.
 */
static bool are_wait_conditions_met(uint32_t desired, uint32_t current,
				    unsigned int wait_condition)
{
	uint32_t  match = current & desired;
   3cc94:	4001      	ands	r1, r0

	if (wait_condition == K_EVENT_WAIT_ALL) {
   3cc96:	2a01      	cmp	r2, #1
   3cc98:	d003      	beq.n	3cca2 <are_wait_conditions_met+0xe>
		return match == desired;
	}

	/* wait_condition assumed to be K_EVENT_WAIT_ANY */

	return match != 0;
   3cc9a:	1e08      	subs	r0, r1, #0
   3cc9c:	bf18      	it	ne
   3cc9e:	2001      	movne	r0, #1
}
   3cca0:	4770      	bx	lr
		return match == desired;
   3cca2:	4288      	cmp	r0, r1
   3cca4:	bf14      	ite	ne
   3cca6:	2000      	movne	r0, #0
   3cca8:	2001      	moveq	r0, #1
   3ccaa:	4770      	bx	lr

0003ccac <k_event_post_internal>:

static void k_event_post_internal(struct k_event *event, uint32_t events,
				  bool accumulate)
{
   3ccac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ccb0:	4607      	mov	r7, r0
   3ccb2:	460e      	mov	r6, r1
	k_spinlock_key_t  key;
	struct k_thread  *thread;
	unsigned int      wait_condition;
	struct k_thread  *head = NULL;

	key = k_spin_lock(&event->lock);
   3ccb4:	f100 080c 	add.w	r8, r0, #12
   3ccb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   3ccbc:	f3ef 8911 	mrs	r9, BASEPRI
   3ccc0:	f383 8812 	msr	BASEPRI_MAX, r3
   3ccc4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, post, event, events,
					accumulate);

	if (accumulate) {
   3ccc8:	b10a      	cbz	r2, 3ccce <k_event_post_internal+0x22>
		events |= event->events;
   3ccca:	6883      	ldr	r3, [r0, #8]
   3cccc:	431e      	orrs	r6, r3
	}

	event->events = events;
   3ccce:	60be      	str	r6, [r7, #8]
	return list->head == list;
   3ccd0:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ccd2:	42a7      	cmp	r7, r4
   3ccd4:	d001      	beq.n	3ccda <k_event_post_internal+0x2e>
	 * 1. Create a linked list of threads to unpend.
	 * 2. Unpend each of the threads in the linked list
	 * 3. Ready each of the threads in the linked list
	 */

	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   3ccd6:	2500      	movs	r5, #0
   3ccd8:	e006      	b.n	3cce8 <k_event_post_internal+0x3c>
   3ccda:	2400      	movs	r4, #0
   3ccdc:	e7fb      	b.n	3ccd6 <k_event_post_internal+0x2a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3ccde:	b11c      	cbz	r4, 3cce8 <k_event_post_internal+0x3c>
	return (node == list->tail) ? NULL : node->next;
   3cce0:	687b      	ldr	r3, [r7, #4]
   3cce2:	429c      	cmp	r4, r3
   3cce4:	d00d      	beq.n	3cd02 <k_event_post_internal+0x56>
   3cce6:	6824      	ldr	r4, [r4, #0]
   3cce8:	b16c      	cbz	r4, 3cd06 <k_event_post_internal+0x5a>
		wait_condition = thread->event_options & K_EVENT_WAIT_MASK;
   3ccea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

		if (are_wait_conditions_met(thread->events, events,
   3ccec:	f002 0201 	and.w	r2, r2, #1
   3ccf0:	4631      	mov	r1, r6
   3ccf2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   3ccf4:	f7ff ffce 	bl	3cc94 <are_wait_conditions_met>
   3ccf8:	2800      	cmp	r0, #0
   3ccfa:	d0f0      	beq.n	3ccde <k_event_post_internal+0x32>
			/*
			 * The wait conditions have been satisfied. Add this
			 * thread to the list of threads to unpend.
			 */

			thread->next_event_link = head;
   3ccfc:	6665      	str	r5, [r4, #100]	; 0x64
			head = thread;
   3ccfe:	4625      	mov	r5, r4
   3cd00:	e7ed      	b.n	3ccde <k_event_post_internal+0x32>
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   3cd02:	2400      	movs	r4, #0
   3cd04:	e7f0      	b.n	3cce8 <k_event_post_internal+0x3c>
		}


	}

	if (head != NULL) {
   3cd06:	b165      	cbz	r5, 3cd22 <k_event_post_internal+0x76>
		thread = head;
		do {
			z_unpend_thread(thread);
   3cd08:	4628      	mov	r0, r5
   3cd0a:	f7ff fcf0 	bl	3c6ee <z_unpend_thread>
   3cd0e:	2300      	movs	r3, #0
   3cd10:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
			arch_thread_return_value_set(thread, 0);
			thread->events = events;
   3cd14:	66ae      	str	r6, [r5, #104]	; 0x68
			z_ready_thread(thread);
   3cd16:	4628      	mov	r0, r5
   3cd18:	f7ff fd13 	bl	3c742 <z_ready_thread>
			thread = thread->next_event_link;
   3cd1c:	6e6d      	ldr	r5, [r5, #100]	; 0x64
		} while (thread != NULL);
   3cd1e:	2d00      	cmp	r5, #0
   3cd20:	d1f2      	bne.n	3cd08 <k_event_post_internal+0x5c>
	}

	z_reschedule(&event->lock, key);
   3cd22:	4649      	mov	r1, r9
   3cd24:	4640      	mov	r0, r8
   3cd26:	f7f3 fd47 	bl	307b8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, post, event, events,
				       accumulate);
}
   3cd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003cd2e <k_event_wait_internal>:
#include <syscalls/k_event_set_mrsh.c>
#endif

static uint32_t k_event_wait_internal(struct k_event *event, uint32_t events,
				      unsigned int options, k_timeout_t timeout)
{
   3cd2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cd32:	b083      	sub	sp, #12
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, wait, event, events,
					options, timeout);

	if (events == 0) {
   3cd34:	460e      	mov	r6, r1
   3cd36:	b919      	cbnz	r1, 3cd40 <k_event_wait_internal+0x12>
out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event,
				       events, rv & events);

	return rv & events;
}
   3cd38:	4630      	mov	r0, r6
   3cd3a:	b003      	add	sp, #12
   3cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cd40:	4604      	mov	r4, r0
   3cd42:	4615      	mov	r5, r2
	wait_condition = options & K_EVENT_WAIT_MASK;
   3cd44:	f002 0b01 	and.w	fp, r2, #1
	return z_impl_z_current_get();
   3cd48:	f7f4 f890 	bl	30e6c <z_impl_z_current_get>
   3cd4c:	4607      	mov	r7, r0
	k_spinlock_key_t  key = k_spin_lock(&event->lock);
   3cd4e:	f104 0a0c 	add.w	sl, r4, #12
   3cd52:	f04f 0340 	mov.w	r3, #64	; 0x40
   3cd56:	f3ef 8911 	mrs	r9, BASEPRI
   3cd5a:	f383 8812 	msr	BASEPRI_MAX, r3
   3cd5e:	f3bf 8f6f 	isb	sy
	if (options & K_EVENT_WAIT_RESET) {
   3cd62:	f015 0f02 	tst.w	r5, #2
   3cd66:	d001      	beq.n	3cd6c <k_event_wait_internal+0x3e>
		event->events = 0;
   3cd68:	2300      	movs	r3, #0
   3cd6a:	60a3      	str	r3, [r4, #8]
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   3cd6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   3cd70:	465a      	mov	r2, fp
   3cd72:	4641      	mov	r1, r8
   3cd74:	4630      	mov	r0, r6
   3cd76:	f7ff ff8d 	bl	3cc94 <are_wait_conditions_met>
   3cd7a:	b950      	cbnz	r0, 3cd92 <k_event_wait_internal+0x64>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3cd7c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   3cd80:	4313      	orrs	r3, r2
   3cd82:	d10d      	bne.n	3cda0 <k_event_wait_internal+0x72>
	__asm__ volatile(
   3cd84:	f389 8811 	msr	BASEPRI, r9
   3cd88:	f3bf 8f6f 	isb	sy
	uint32_t  rv = 0;
   3cd8c:	f04f 0800 	mov.w	r8, #0
   3cd90:	e003      	b.n	3cd9a <k_event_wait_internal+0x6c>
   3cd92:	f389 8811 	msr	BASEPRI, r9
   3cd96:	f3bf 8f6f 	isb	sy
	return rv & events;
   3cd9a:	ea06 0608 	and.w	r6, r6, r8
   3cd9e:	e7cb      	b.n	3cd38 <k_event_wait_internal+0xa>
	thread->events = events;
   3cda0:	66be      	str	r6, [r7, #104]	; 0x68
	thread->event_options = options;
   3cda2:	66fd      	str	r5, [r7, #108]	; 0x6c
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   3cda4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   3cda8:	e9cd 2300 	strd	r2, r3, [sp]
   3cdac:	4622      	mov	r2, r4
   3cdae:	4649      	mov	r1, r9
   3cdb0:	4650      	mov	r0, sl
   3cdb2:	f7f3 fe65 	bl	30a80 <z_pend_curr>
   3cdb6:	b910      	cbnz	r0, 3cdbe <k_event_wait_internal+0x90>
		rv = thread->events;
   3cdb8:	f8d7 8068 	ldr.w	r8, [r7, #104]	; 0x68
   3cdbc:	e7ed      	b.n	3cd9a <k_event_wait_internal+0x6c>
	uint32_t  rv = 0;
   3cdbe:	f04f 0800 	mov.w	r8, #0
   3cdc2:	e7ea      	b.n	3cd9a <k_event_wait_internal+0x6c>

0003cdc4 <z_impl_k_event_init>:
	event->events = 0;
   3cdc4:	2300      	movs	r3, #0
   3cdc6:	6083      	str	r3, [r0, #8]
	list->head = (sys_dnode_t *)list;
   3cdc8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   3cdca:	6040      	str	r0, [r0, #4]
}
   3cdcc:	4770      	bx	lr

0003cdce <z_impl_k_event_post>:
{
   3cdce:	b508      	push	{r3, lr}
	k_event_post_internal(event, events, true);
   3cdd0:	2201      	movs	r2, #1
   3cdd2:	f7ff ff6b 	bl	3ccac <k_event_post_internal>
}
   3cdd6:	bd08      	pop	{r3, pc}

0003cdd8 <z_impl_k_event_wait>:
/**
 * Wait for any of the specified events
 */
uint32_t z_impl_k_event_wait(struct k_event *event, uint32_t events,
			     bool reset, k_timeout_t timeout)
{
   3cdd8:	b530      	push	{r4, r5, lr}
   3cdda:	b083      	sub	sp, #12
	uint32_t options = reset ? K_EVENT_WAIT_RESET : 0;
   3cddc:	b142      	cbz	r2, 3cdf0 <z_impl_k_event_wait+0x18>
   3cdde:	2202      	movs	r2, #2

	return k_event_wait_internal(event, events, options, timeout);
   3cde0:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   3cde4:	e9cd 4500 	strd	r4, r5, [sp]
   3cde8:	f7ff ffa1 	bl	3cd2e <k_event_wait_internal>
}
   3cdec:	b003      	add	sp, #12
   3cdee:	bd30      	pop	{r4, r5, pc}
	uint32_t options = reset ? K_EVENT_WAIT_RESET : 0;
   3cdf0:	2200      	movs	r2, #0
   3cdf2:	e7f5      	b.n	3cde0 <z_impl_k_event_wait+0x8>

0003cdf4 <z_heap_aligned_alloc>:
{
   3cdf4:	b5d0      	push	{r4, r6, r7, lr}
   3cdf6:	b082      	sub	sp, #8
   3cdf8:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   3cdfa:	2000      	movs	r0, #0
   3cdfc:	2304      	movs	r3, #4
   3cdfe:	18d2      	adds	r2, r2, r3
   3ce00:	d20e      	bcs.n	3ce20 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   3ce02:	b978      	cbnz	r0, 3ce24 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   3ce04:	2600      	movs	r6, #0
   3ce06:	2700      	movs	r7, #0
   3ce08:	e9cd 6700 	strd	r6, r7, [sp]
   3ce0c:	f041 0104 	orr.w	r1, r1, #4
   3ce10:	4620      	mov	r0, r4
   3ce12:	f7ff f8e4 	bl	3bfde <k_heap_aligned_alloc>
	if (mem == NULL) {
   3ce16:	b108      	cbz	r0, 3ce1c <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   3ce18:	f840 4b04 	str.w	r4, [r0], #4
}
   3ce1c:	b002      	add	sp, #8
   3ce1e:	bdd0      	pop	{r4, r6, r7, pc}
   3ce20:	2001      	movs	r0, #1
   3ce22:	e7ee      	b.n	3ce02 <z_heap_aligned_alloc+0xe>
		return NULL;
   3ce24:	2000      	movs	r0, #0
   3ce26:	e7f9      	b.n	3ce1c <z_heap_aligned_alloc+0x28>

0003ce28 <k_free>:
	if (ptr != NULL) {
   3ce28:	b130      	cbz	r0, 3ce38 <k_free+0x10>
{
   3ce2a:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   3ce2c:	1f01      	subs	r1, r0, #4
   3ce2e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3ce32:	f7ff f91f 	bl	3c074 <k_heap_free>
}
   3ce36:	bd08      	pop	{r3, pc}
   3ce38:	4770      	bx	lr

0003ce3a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3ce3a:	4770      	bx	lr

0003ce3c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   3ce3c:	f7f1 bece 	b.w	2ebdc <SystemInit>
