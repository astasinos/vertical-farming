
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20003800 	.word	0x20003800
   4:	000020c1 	.word	0x000020c1
   8:	0000679d 	.word	0x0000679d
   c:	00002095 	.word	0x00002095
  10:	00002095 	.word	0x00002095
  14:	00002095 	.word	0x00002095
  18:	00002095 	.word	0x00002095
	...
  2c:	00001c0d 	.word	0x00001c0d
  30:	00002095 	.word	0x00002095
  34:	00000000 	.word	0x00000000
  38:	00002095 	.word	0x00002095
  3c:	00002095 	.word	0x00002095

00000040 <_irq_vector_table>:
  40:	00001c95 00001c95 00001c95 00001c95     ................
  50:	00001c95 00001c95 00001c95 00001c95     ................
  60:	00001c95 00001c95 00001c95 00001c95     ................
  70:	00001c95 00001c95 00001c95 00001c95     ................
  80:	00001c95 00001c95 00001c95 00001c95     ................
  90:	00001c95 00001c95 00001c95 00001c95     ................
  a0:	00001c95 00001c95 00001c95 00001c95     ................
  b0:	00001c95 00001c95 00001c95 00001c95     ................
  c0:	00001c95 00001c95 00001c95 00001c95     ................
  d0:	00001c95 00001c95 00001c95 00001c95     ................
  e0:	00001c95 00001c95 00001c95 00001c95     ................
  f0:	00001c95 00001c95 00001c95 00001c95     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__data_size+0x4>
     102:	b94a      	cbnz	r2, 118 <__data_size+0x4>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	4604      	mov	r4, r0
     138:	468c      	mov	ip, r1
     13a:	2b00      	cmp	r3, #0
     13c:	f040 8083 	bne.w	246 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x46>
     140:	428a      	cmp	r2, r1
     142:	4617      	mov	r7, r2
     144:	d947      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     146:	fab2 f282 	clz	r2, r2
     14a:	b142      	cbz	r2, 15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     14c:	f1c2 0020 	rsb	r0, r2, #32
     150:	fa24 f000 	lsr.w	r0, r4, r0
     154:	4091      	lsls	r1, r2
     156:	4097      	lsls	r7, r2
     158:	ea40 0c01 	orr.w	ip, r0, r1
     15c:	4094      	lsls	r4, r2
     15e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     162:	0c23      	lsrs	r3, r4, #16
     164:	fbbc f6f8 	udiv	r6, ip, r8
     168:	fa1f fe87 	uxth.w	lr, r7
     16c:	fb08 c116 	mls	r1, r8, r6, ip
     170:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     174:	fb06 f10e 	mul.w	r1, r6, lr
     178:	4299      	cmp	r1, r3
     17a:	d909      	bls.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     17c:	18fb      	adds	r3, r7, r3
     17e:	f106 30ff 	add.w	r0, r6, #4294967295
     182:	f080 8119 	bcs.w	3b8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb8>
     186:	4299      	cmp	r1, r3
     188:	f240 8116 	bls.w	3b8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb8>
     18c:	3e02      	subs	r6, #2
     18e:	443b      	add	r3, r7
     190:	1a5b      	subs	r3, r3, r1
     192:	b2a4      	uxth	r4, r4
     194:	fbb3 f0f8 	udiv	r0, r3, r8
     198:	fb08 3310 	mls	r3, r8, r0, r3
     19c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a0:	fb00 fe0e 	mul.w	lr, r0, lr
     1a4:	45a6      	cmp	lr, r4
     1a6:	d909      	bls.n	1bc <CONFIG_IDLE_STACK_SIZE+0x7c>
     1a8:	193c      	adds	r4, r7, r4
     1aa:	f100 33ff 	add.w	r3, r0, #4294967295
     1ae:	f080 8105 	bcs.w	3bc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xbc>
     1b2:	45a6      	cmp	lr, r4
     1b4:	f240 8102 	bls.w	3bc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xbc>
     1b8:	3802      	subs	r0, #2
     1ba:	443c      	add	r4, r7
     1bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c0:	eba4 040e 	sub.w	r4, r4, lr
     1c4:	2600      	movs	r6, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	4631      	mov	r1, r6
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d150      	bne.n	284 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x84>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2601      	movs	r6, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c21      	lsrs	r1, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	428b      	cmp	r3, r1
     202:	d907      	bls.n	214 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x14>
     204:	1879      	adds	r1, r7, r1
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x12>
     20c:	428b      	cmp	r3, r1
     20e:	f200 80e9 	bhi.w	3e4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe4>
     212:	4684      	mov	ip, r0
     214:	1ac9      	subs	r1, r1, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb1 f0fe 	udiv	r0, r1, lr
     21c:	fb0e 1110 	mls	r1, lr, r0, r1
     220:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x3c>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x3a>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d9 	bhi.w	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7bf      	b.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     246:	428b      	cmp	r3, r1
     248:	d909      	bls.n	25e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5e>
     24a:	2d00      	cmp	r5, #0
     24c:	f000 80b1 	beq.w	3b2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb2>
     250:	2600      	movs	r6, #0
     252:	e9c5 0100 	strd	r0, r1, [r5]
     256:	4630      	mov	r0, r6
     258:	4631      	mov	r1, r6
     25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25e:	fab3 f683 	clz	r6, r3
     262:	2e00      	cmp	r6, #0
     264:	d14a      	bne.n	2fc <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xfc>
     266:	428b      	cmp	r3, r1
     268:	d302      	bcc.n	270 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x70>
     26a:	4282      	cmp	r2, r0
     26c:	f200 80b8 	bhi.w	3e0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe0>
     270:	1a84      	subs	r4, r0, r2
     272:	eb61 0103 	sbc.w	r1, r1, r3
     276:	2001      	movs	r0, #1
     278:	468c      	mov	ip, r1
     27a:	2d00      	cmp	r5, #0
     27c:	d0a8      	beq.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     27e:	e9c5 4c00 	strd	r4, ip, [r5]
     282:	e7a5      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     284:	f1c2 0320 	rsb	r3, r2, #32
     288:	fa20 f603 	lsr.w	r6, r0, r3
     28c:	4097      	lsls	r7, r2
     28e:	fa01 f002 	lsl.w	r0, r1, r2
     292:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     296:	40d9      	lsrs	r1, r3
     298:	4330      	orrs	r0, r6
     29a:	0c03      	lsrs	r3, r0, #16
     29c:	fbb1 f6fe 	udiv	r6, r1, lr
     2a0:	fa1f f887 	uxth.w	r8, r7
     2a4:	fb0e 1116 	mls	r1, lr, r6, r1
     2a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2ac:	fb06 f108 	mul.w	r1, r6, r8
     2b0:	4299      	cmp	r1, r3
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xcc>
     2b8:	18fb      	adds	r3, r7, r3
     2ba:	f106 3cff 	add.w	ip, r6, #4294967295
     2be:	f080 808d 	bcs.w	3dc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xdc>
     2c2:	4299      	cmp	r1, r3
     2c4:	f240 808a 	bls.w	3dc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xdc>
     2c8:	3e02      	subs	r6, #2
     2ca:	443b      	add	r3, r7
     2cc:	1a5b      	subs	r3, r3, r1
     2ce:	b281      	uxth	r1, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	428b      	cmp	r3, r1
     2e2:	d907      	bls.n	2f4 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xf4>
     2e4:	1879      	adds	r1, r7, r1
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d273      	bcs.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     2ec:	428b      	cmp	r3, r1
     2ee:	d971      	bls.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     2f0:	3802      	subs	r0, #2
     2f2:	4439      	add	r1, r7
     2f4:	1acb      	subs	r3, r1, r3
     2f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c6 0c20 	rsb	ip, r6, #32
     300:	fa03 f406 	lsl.w	r4, r3, r6
     304:	fa22 f30c 	lsr.w	r3, r2, ip
     308:	431c      	orrs	r4, r3
     30a:	fa20 f70c 	lsr.w	r7, r0, ip
     30e:	fa01 f306 	lsl.w	r3, r1, r6
     312:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     316:	fa21 f10c 	lsr.w	r1, r1, ip
     31a:	431f      	orrs	r7, r3
     31c:	0c3b      	lsrs	r3, r7, #16
     31e:	fbb1 f9fe 	udiv	r9, r1, lr
     322:	fa1f f884 	uxth.w	r8, r4
     326:	fb0e 1119 	mls	r1, lr, r9, r1
     32a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     32e:	fb09 fa08 	mul.w	sl, r9, r8
     332:	458a      	cmp	sl, r1
     334:	fa02 f206 	lsl.w	r2, r2, r6
     338:	fa00 f306 	lsl.w	r3, r0, r6
     33c:	d908      	bls.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     33e:	1861      	adds	r1, r4, r1
     340:	f109 30ff 	add.w	r0, r9, #4294967295
     344:	d248      	bcs.n	3d8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd8>
     346:	458a      	cmp	sl, r1
     348:	d946      	bls.n	3d8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd8>
     34a:	f1a9 0902 	sub.w	r9, r9, #2
     34e:	4421      	add	r1, r4
     350:	eba1 010a 	sub.w	r1, r1, sl
     354:	b2bf      	uxth	r7, r7
     356:	fbb1 f0fe 	udiv	r0, r1, lr
     35a:	fb0e 1110 	mls	r1, lr, r0, r1
     35e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
     362:	fb00 f808 	mul.w	r8, r0, r8
     366:	45b8      	cmp	r8, r7
     368:	d907      	bls.n	37a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x7a>
     36a:	19e7      	adds	r7, r4, r7
     36c:	f100 31ff 	add.w	r1, r0, #4294967295
     370:	d22e      	bcs.n	3d0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd0>
     372:	45b8      	cmp	r8, r7
     374:	d92c      	bls.n	3d0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd0>
     376:	3802      	subs	r0, #2
     378:	4427      	add	r7, r4
     37a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37e:	eba7 0708 	sub.w	r7, r7, r8
     382:	fba0 8902 	umull	r8, r9, r0, r2
     386:	454f      	cmp	r7, r9
     388:	46c6      	mov	lr, r8
     38a:	4649      	mov	r1, r9
     38c:	d31a      	bcc.n	3c4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc4>
     38e:	d017      	beq.n	3c0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc0>
     390:	b15d      	cbz	r5, 3aa <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xaa>
     392:	ebb3 020e 	subs.w	r2, r3, lr
     396:	eb67 0701 	sbc.w	r7, r7, r1
     39a:	fa07 fc0c 	lsl.w	ip, r7, ip
     39e:	40f2      	lsrs	r2, r6
     3a0:	ea4c 0202 	orr.w	r2, ip, r2
     3a4:	40f7      	lsrs	r7, r6
     3a6:	e9c5 2700 	strd	r2, r7, [r5]
     3aa:	2600      	movs	r6, #0
     3ac:	4631      	mov	r1, r6
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	462e      	mov	r6, r5
     3b4:	4628      	mov	r0, r5
     3b6:	e70b      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     3b8:	4606      	mov	r6, r0
     3ba:	e6e9      	b.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     3bc:	4618      	mov	r0, r3
     3be:	e6fd      	b.n	1bc <CONFIG_IDLE_STACK_SIZE+0x7c>
     3c0:	4543      	cmp	r3, r8
     3c2:	d2e5      	bcs.n	390 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x90>
     3c4:	ebb8 0e02 	subs.w	lr, r8, r2
     3c8:	eb69 0104 	sbc.w	r1, r9, r4
     3cc:	3801      	subs	r0, #1
     3ce:	e7df      	b.n	390 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x90>
     3d0:	4608      	mov	r0, r1
     3d2:	e7d2      	b.n	37a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x7a>
     3d4:	4660      	mov	r0, ip
     3d6:	e78d      	b.n	2f4 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xf4>
     3d8:	4681      	mov	r9, r0
     3da:	e7b9      	b.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     3dc:	4666      	mov	r6, ip
     3de:	e775      	b.n	2cc <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xcc>
     3e0:	4630      	mov	r0, r6
     3e2:	e74a      	b.n	27a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7a>
     3e4:	f1ac 0c02 	sub.w	ip, ip, #2
     3e8:	4439      	add	r1, r7
     3ea:	e713      	b.n	214 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x14>
     3ec:	3802      	subs	r0, #2
     3ee:	443c      	add	r4, r7
     3f0:	e724      	b.n	23c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x3c>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     3f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     3fa:	4b30      	ldr	r3, [pc, #192]	; (4bc <FIH_LABEL_FIH_CALL_END_262+0x78>)
     3fc:	4a30      	ldr	r2, [pc, #192]	; (4c0 <FIH_LABEL_FIH_CALL_END_262+0x7c>)
     3fe:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     402:	4830      	ldr	r0, [pc, #192]	; (4c4 <FIH_LABEL_FIH_CALL_END_262+0x80>)
     404:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     408:	2149      	movs	r1, #73	; 0x49
     40a:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     40e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     412:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     416:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     41a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     41e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     422:	f006 f8f7 	bl	6614 <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     426:	f005 fca8 	bl	5d7a <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     42a:	4827      	ldr	r0, [pc, #156]	; (4c8 <FIH_LABEL_FIH_CALL_END_262+0x84>)
     42c:	f000 f85c 	bl	4e8 <flash_device_get_binding>
     430:	b928      	cbnz	r0, 43e <FIH_LABEL_FIH_CALL_START_249>
        BOOT_LOG_ERR("Flash device %s not found",
     432:	4a25      	ldr	r2, [pc, #148]	; (4c8 <FIH_LABEL_FIH_CALL_END_262+0x84>)
     434:	4825      	ldr	r0, [pc, #148]	; (4cc <FIH_LABEL_FIH_CALL_END_262+0x88>)
     436:	2145      	movs	r1, #69	; 0x45
     438:	f006 f8ec 	bl	6614 <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     43c:	e7fe      	b.n	43c <CONFIG_FLASH_SIZE+0x3c>

0000043e <FIH_LABEL_FIH_CALL_START_249>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     43e:	a801      	add	r0, sp, #4
     440:	f000 fc6e 	bl	d20 <boot_go>

00000444 <FIH_LABEL_FIH_CALL_END_262>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     444:	4b22      	ldr	r3, [pc, #136]	; (4d0 <FIH_LABEL_FIH_CALL_END_262+0x8c>)
     446:	681b      	ldr	r3, [r3, #0]
     448:	4283      	cmp	r3, r0
     44a:	d004      	beq.n	456 <FIH_LABEL_FIH_CALL_END_262+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     44c:	4821      	ldr	r0, [pc, #132]	; (4d4 <FIH_LABEL_FIH_CALL_END_262+0x90>)
     44e:	2145      	movs	r1, #69	; 0x45
     450:	f006 f8e0 	bl	6614 <z_log_minimal_printk>
        FIH_PANIC;
     454:	e7fe      	b.n	454 <FIH_LABEL_FIH_CALL_END_262+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     456:	9a03      	ldr	r2, [sp, #12]
     458:	481f      	ldr	r0, [pc, #124]	; (4d8 <FIH_LABEL_FIH_CALL_END_262+0x94>)
     45a:	2149      	movs	r1, #73	; 0x49
     45c:	f006 f8da 	bl	6614 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     460:	481e      	ldr	r0, [pc, #120]	; (4dc <FIH_LABEL_FIH_CALL_END_262+0x98>)
     462:	2149      	movs	r1, #73	; 0x49
     464:	f006 f8d6 	bl	6614 <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     468:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     46c:	2000      	movs	r0, #0
     46e:	f006 fb67 	bl	6b40 <fprotect_area>

    if (rc != 0) {
     472:	b120      	cbz	r0, 47e <FIH_LABEL_FIH_CALL_END_262+0x3a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     474:	481a      	ldr	r0, [pc, #104]	; (4e0 <FIH_LABEL_FIH_CALL_END_262+0x9c>)
     476:	2145      	movs	r1, #69	; 0x45
     478:	f006 f8cc 	bl	6614 <z_log_minimal_printk>
        while (1)
     47c:	e7fe      	b.n	47c <FIH_LABEL_FIH_CALL_END_262+0x38>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     47e:	4669      	mov	r1, sp
     480:	f89d 0008 	ldrb.w	r0, [sp, #8]
     484:	f000 f83c 	bl	500 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     488:	9b00      	ldr	r3, [sp, #0]
     48a:	9c03      	ldr	r4, [sp, #12]
     48c:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     48e:	9b01      	ldr	r3, [sp, #4]
     490:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     492:	f000 ff29 	bl	12e8 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     496:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     498:	f04f 0220 	mov.w	r2, #32
     49c:	f3ef 8311 	mrs	r3, BASEPRI
     4a0:	f382 8812 	msr	BASEPRI_MAX, r2
     4a4:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4a8:	5963      	ldr	r3, [r4, r5]
     4aa:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     4ae:	6873      	ldr	r3, [r6, #4]
     4b0:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     4b2:	480c      	ldr	r0, [pc, #48]	; (4e4 <FIH_LABEL_FIH_CALL_END_262+0xa0>)
     4b4:	2145      	movs	r1, #69	; 0x45
     4b6:	f006 f8ad 	bl	6614 <z_log_minimal_printk>
    while (1)
     4ba:	e7fe      	b.n	4ba <FIH_LABEL_FIH_CALL_END_262+0x76>
     4bc:	40010000 	.word	0x40010000
     4c0:	6e524635 	.word	0x6e524635
     4c4:	0000751c 	.word	0x0000751c
     4c8:	00007535 	.word	0x00007535
     4cc:	00007548 	.word	0x00007548
     4d0:	200001d4 	.word	0x200001d4
     4d4:	00007567 	.word	0x00007567
     4d8:	0000758a 	.word	0x0000758a
     4dc:	000075b9 	.word	0x000075b9
     4e0:	000075de 	.word	0x000075de
     4e4:	00007611 	.word	0x00007611

000004e8 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     4e8:	b510      	push	{r4, lr}
    if (!flash_dev) {
     4ea:	4c04      	ldr	r4, [pc, #16]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     4ec:	6823      	ldr	r3, [r4, #0]
     4ee:	b913      	cbnz	r3, 4f6 <flash_device_get_binding+0xe>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     4f0:	f003 fede 	bl	42b0 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     4f4:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     4f6:	6820      	ldr	r0, [r4, #0]
     4f8:	bd10      	pop	{r4, pc}
     4fa:	bf00      	nop
     4fc:	200001d0 	.word	0x200001d0

00000500 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     500:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     502:	b140      	cbz	r0, 516 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     504:	4602      	mov	r2, r0
     506:	2300      	movs	r3, #0
     508:	4804      	ldr	r0, [pc, #16]	; (51c <flash_device_base+0x1c>)
     50a:	2145      	movs	r1, #69	; 0x45
     50c:	f006 f882 	bl	6614 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     510:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     514:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     516:	6008      	str	r0, [r1, #0]
    return 0;
     518:	e7fc      	b.n	514 <flash_device_base+0x14>
     51a:	bf00      	nop
     51c:	00007634 	.word	0x00007634

00000520 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     524:	f8df 921c 	ldr.w	r9, [pc, #540]	; 744 <FIH_LABEL_FIH_CALL_END_920+0x2e>
{
     528:	b0dd      	sub	sp, #372	; 0x174
     52a:	4615      	mov	r5, r2
     52c:	461e      	mov	r6, r3
     52e:	e9dd 4868 	ldrd	r4, r8, [sp, #416]	; 0x1a0
     532:	f8dd b198 	ldr.w	fp, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     536:	f8d9 7000 	ldr.w	r7, [r9]
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     53a:	f000 fea3 	bl	1284 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     53e:	4b7f      	ldr	r3, [pc, #508]	; (73c <FIH_LABEL_FIH_CALL_END_920+0x26>)
     540:	2201      	movs	r2, #1
     542:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     546:	a83c      	add	r0, sp, #240	; 0xf0
     548:	f004 fb4c 	bl	4be4 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     54c:	f8cd 9014 	str.w	r9, [sp, #20]
     550:	b13c      	cbz	r4, 562 <bootutil_img_validate+0x42>
     552:	f1b8 0f00 	cmp.w	r8, #0
     556:	dd04      	ble.n	562 <bootutil_img_validate+0x42>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     558:	4642      	mov	r2, r8
     55a:	4621      	mov	r1, r4
     55c:	a83c      	add	r0, sp, #240	; 0xf0
     55e:	f005 ff64 	bl	642a <cc310_sha256_update>
    size += hdr->ih_protect_tlv_size;
     562:	896b      	ldrh	r3, [r5, #10]
    size = hdr_size = hdr->ih_hdr_size;
     564:	f8b5 8008 	ldrh.w	r8, [r5, #8]
     568:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     56a:	68eb      	ldr	r3, [r5, #12]
    for (off = 0; off < size; off += blk_sz) {
     56c:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     570:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     572:	45c8      	cmp	r8, r9
     574:	d84e      	bhi.n	614 <FIH_LABEL_FIH_CALL_END_383+0xe>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     576:	a90f      	add	r1, sp, #60	; 0x3c
     578:	a83c      	add	r0, sp, #240	; 0xf0
     57a:	f004 fba5 	bl	4cc8 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     57e:	4b6f      	ldr	r3, [pc, #444]	; (73c <FIH_LABEL_FIH_CALL_END_920+0x26>)
     580:	2200      	movs	r2, #0
     582:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     586:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     58a:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
     58c:	b123      	cbz	r3, 598 <bootutil_img_validate+0x78>
        memcpy(out_hash, hash, 32);
     58e:	2220      	movs	r2, #32
     590:	a90f      	add	r1, sp, #60	; 0x3c
     592:	4618      	mov	r0, r3
     594:	f006 f92c 	bl	67f0 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     598:	2300      	movs	r3, #0
     59a:	9300      	str	r3, [sp, #0]
     59c:	4632      	mov	r2, r6
     59e:	f64f 73ff 	movw	r3, #65535	; 0xffff
     5a2:	4629      	mov	r1, r5
     5a4:	a809      	add	r0, sp, #36	; 0x24
     5a6:	f005 fbe9 	bl	5d7c <bootutil_tlv_iter_begin>
    if (rc) {
     5aa:	4604      	mov	r4, r0
     5ac:	2800      	cmp	r0, #0
     5ae:	d144      	bne.n	63a <FIH_LABEL_FIH_CALL_END_383+0x34>
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5b0:	f8df a194 	ldr.w	sl, [pc, #404]	; 748 <FIH_LABEL_FIH_CALL_END_920+0x32>
     5b4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 73c <FIH_LABEL_FIH_CALL_END_920+0x26>
    int sha256_valid = 0;
     5b8:	9003      	str	r0, [sp, #12]
    int key_id = -1;
     5ba:	f04f 35ff 	mov.w	r5, #4294967295
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5be:	f10d 031e 	add.w	r3, sp, #30
     5c2:	aa07      	add	r2, sp, #28
     5c4:	a908      	add	r1, sp, #32
     5c6:	a809      	add	r0, sp, #36	; 0x24
     5c8:	f005 fc24 	bl	5e14 <bootutil_tlv_iter_next>
        if (rc < 0) {
     5cc:	1e04      	subs	r4, r0, #0
     5ce:	db34      	blt.n	63a <FIH_LABEL_FIH_CALL_END_383+0x34>
        } else if (rc > 0) {
     5d0:	f040 80a4 	bne.w	71c <FIH_LABEL_FIH_CALL_END_920+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5d4:	f8bd 901e 	ldrh.w	r9, [sp, #30]
     5d8:	f1b9 0f10 	cmp.w	r9, #16
     5dc:	d138      	bne.n	650 <FIH_LABEL_FIH_CALL_END_383+0x4a>
            if (len != sizeof(hash)) {
     5de:	f8bd 901c 	ldrh.w	r9, [sp, #28]
     5e2:	f1b9 0f20 	cmp.w	r9, #32
     5e6:	f040 80a3 	bne.w	730 <FIH_LABEL_FIH_CALL_END_920+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5ea:	9908      	ldr	r1, [sp, #32]
     5ec:	464b      	mov	r3, r9
     5ee:	aa3c      	add	r2, sp, #240	; 0xf0
     5f0:	4630      	mov	r0, r6
     5f2:	f006 f81d 	bl	6630 <flash_area_read>
            if (rc) {
     5f6:	4604      	mov	r4, r0
     5f8:	b9f8      	cbnz	r0, 63a <FIH_LABEL_FIH_CALL_END_383+0x34>

000005fa <FIH_LABEL_FIH_CALL_START_364>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5fa:	464a      	mov	r2, r9
     5fc:	a93c      	add	r1, sp, #240	; 0xf0
     5fe:	a80f      	add	r0, sp, #60	; 0x3c
     600:	f005 fc7f 	bl	5f02 <boot_fih_memequal>
     604:	4604      	mov	r4, r0

00000606 <FIH_LABEL_FIH_CALL_END_383>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     606:	4b4e      	ldr	r3, [pc, #312]	; (740 <FIH_LABEL_FIH_CALL_END_920+0x2a>)
     608:	681b      	ldr	r3, [r3, #0]
     60a:	4283      	cmp	r3, r0
     60c:	d115      	bne.n	63a <FIH_LABEL_FIH_CALL_END_383+0x34>
            sha256_valid = 1;
     60e:	2301      	movs	r3, #1
     610:	9303      	str	r3, [sp, #12]
     612:	e7d4      	b.n	5be <bootutil_img_validate+0x9e>
        blk_sz = size - off;
     614:	9a67      	ldr	r2, [sp, #412]	; 0x19c
     616:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     61a:	429a      	cmp	r2, r3
     61c:	bf28      	it	cs
     61e:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     620:	4613      	mov	r3, r2
     622:	4692      	mov	sl, r2
     624:	4649      	mov	r1, r9
     626:	465a      	mov	r2, fp
     628:	4630      	mov	r0, r6
     62a:	f006 f801 	bl	6630 <flash_area_read>
        if (rc) {
     62e:	4604      	mov	r4, r0
     630:	b138      	cbz	r0, 642 <FIH_LABEL_FIH_CALL_END_383+0x3c>
     632:	4b42      	ldr	r3, [pc, #264]	; (73c <FIH_LABEL_FIH_CALL_END_920+0x26>)
     634:	2200      	movs	r2, #0
     636:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     63a:	4620      	mov	r0, r4
     63c:	b05d      	add	sp, #372	; 0x174
     63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     642:	4652      	mov	r2, sl
     644:	4659      	mov	r1, fp
     646:	a83c      	add	r0, sp, #240	; 0xf0
     648:	f005 feef 	bl	642a <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     64c:	44d1      	add	r9, sl
     64e:	e790      	b.n	572 <bootutil_img_validate+0x52>
        } else if (type == IMAGE_TLV_KEYHASH) {
     650:	f1b9 0f01 	cmp.w	r9, #1
     654:	d13f      	bne.n	6d6 <FIH_LABEL_FIH_CALL_END_383+0xd0>
            if (len > 32) {
     656:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     65a:	2b20      	cmp	r3, #32
     65c:	d868      	bhi.n	730 <FIH_LABEL_FIH_CALL_END_920+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     65e:	9908      	ldr	r1, [sp, #32]
     660:	aa3c      	add	r2, sp, #240	; 0xf0
     662:	4630      	mov	r0, r6
     664:	f005 ffe4 	bl	6630 <flash_area_read>
            if (rc) {
     668:	4604      	mov	r4, r0
     66a:	2800      	cmp	r0, #0
     66c:	d1e5      	bne.n	63a <FIH_LABEL_FIH_CALL_END_383+0x34>
            key_id = bootutil_find_key(buf, len);
     66e:	f89d 501c 	ldrb.w	r5, [sp, #28]
    if (keyhash_len > 32) {
     672:	2d20      	cmp	r5, #32
     674:	d80a      	bhi.n	68c <FIH_LABEL_FIH_CALL_END_383+0x86>
    for (i = 0; i < bootutil_key_cnt; i++) {
     676:	f8da 3000 	ldr.w	r3, [sl]
     67a:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 74c <FIH_LABEL_FIH_CALL_END_920+0x36>
     67e:	9304      	str	r3, [sp, #16]
     680:	9b04      	ldr	r3, [sp, #16]
     682:	429c      	cmp	r4, r3
     684:	db05      	blt.n	692 <FIH_LABEL_FIH_CALL_END_383+0x8c>
     686:	2300      	movs	r3, #0
     688:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
        return -1;
     68c:	f04f 34ff 	mov.w	r4, #4294967295
     690:	e01d      	b.n	6ce <FIH_LABEL_FIH_CALL_END_383+0xc8>
    cc310_init();
     692:	f000 fdf7 	bl	1284 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     696:	f8c8 9500 	str.w	r9, [r8, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     69a:	a81f      	add	r0, sp, #124	; 0x7c
     69c:	f004 faa2 	bl	4be4 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     6a0:	f8db 2004 	ldr.w	r2, [fp, #4]
     6a4:	f85b 1b08 	ldr.w	r1, [fp], #8
     6a8:	6812      	ldr	r2, [r2, #0]
     6aa:	a81f      	add	r0, sp, #124	; 0x7c
     6ac:	f005 febd 	bl	642a <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     6b0:	a917      	add	r1, sp, #92	; 0x5c
     6b2:	a81f      	add	r0, sp, #124	; 0x7c
     6b4:	f004 fb08 	bl	4cc8 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     6b8:	2200      	movs	r2, #0
     6ba:	f8c8 2500 	str.w	r2, [r8, #1280]	; 0x500
        if (!memcmp(hash, keyhash, keyhash_len)) {
     6be:	a93c      	add	r1, sp, #240	; 0xf0
     6c0:	462a      	mov	r2, r5
     6c2:	a817      	add	r0, sp, #92	; 0x5c
     6c4:	f006 f884 	bl	67d0 <memcmp>
     6c8:	b918      	cbnz	r0, 6d2 <FIH_LABEL_FIH_CALL_END_383+0xcc>
     6ca:	f8c8 0500 	str.w	r0, [r8, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     6ce:	4625      	mov	r5, r4
     6d0:	e775      	b.n	5be <bootutil_img_validate+0x9e>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6d2:	3401      	adds	r4, #1
     6d4:	e7d4      	b.n	680 <FIH_LABEL_FIH_CALL_END_383+0x7a>
        } else if (type == EXPECTED_SIG_TLV) {
     6d6:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
     6da:	f47f af70 	bne.w	5be <bootutil_img_validate+0x9e>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6de:	2d00      	cmp	r5, #0
     6e0:	db19      	blt.n	716 <FIH_LABEL_FIH_CALL_END_920>
     6e2:	f8da 3000 	ldr.w	r3, [sl]
     6e6:	42ab      	cmp	r3, r5
     6e8:	dd15      	ble.n	716 <FIH_LABEL_FIH_CALL_END_920>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     6ee:	2b80      	cmp	r3, #128	; 0x80
     6f0:	d81e      	bhi.n	730 <FIH_LABEL_FIH_CALL_END_920+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6f2:	9908      	ldr	r1, [sp, #32]
     6f4:	aa3c      	add	r2, sp, #240	; 0xf0
     6f6:	4630      	mov	r0, r6
     6f8:	f005 ff9a 	bl	6630 <flash_area_read>
            if (rc) {
     6fc:	4604      	mov	r4, r0
     6fe:	2800      	cmp	r0, #0
     700:	d19b      	bne.n	63a <FIH_LABEL_FIH_CALL_END_383+0x34>

00000702 <FIH_LABEL_FIH_CALL_START_898>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     702:	b2ed      	uxtb	r5, r5
     704:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     708:	9500      	str	r5, [sp, #0]
     70a:	aa3c      	add	r2, sp, #240	; 0xf0
     70c:	2120      	movs	r1, #32
     70e:	a80f      	add	r0, sp, #60	; 0x3c
     710:	f000 f81e 	bl	750 <bootutil_verify_sig>
     714:	4607      	mov	r7, r0

00000716 <FIH_LABEL_FIH_CALL_END_920>:
                key_id = -1;
     716:	f04f 35ff 	mov.w	r5, #4294967295
     71a:	e750      	b.n	5be <bootutil_img_validate+0x9e>
    if (rc) {
     71c:	9b03      	ldr	r3, [sp, #12]
     71e:	b153      	cbz	r3, 736 <FIH_LABEL_FIH_CALL_END_920+0x20>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     720:	4b07      	ldr	r3, [pc, #28]	; (740 <FIH_LABEL_FIH_CALL_END_920+0x2a>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     722:	681b      	ldr	r3, [r3, #0]
     724:	42bb      	cmp	r3, r7
     726:	d001      	beq.n	72c <FIH_LABEL_FIH_CALL_END_920+0x16>
        return FIH_FAILURE;
     728:	9b05      	ldr	r3, [sp, #20]
     72a:	681f      	ldr	r7, [r3, #0]
                rc = -1;
     72c:	463c      	mov	r4, r7
     72e:	e784      	b.n	63a <FIH_LABEL_FIH_CALL_END_383+0x34>
     730:	f04f 34ff 	mov.w	r4, #4294967295
     734:	e781      	b.n	63a <FIH_LABEL_FIH_CALL_END_383+0x34>
     736:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     738:	e77f      	b.n	63a <FIH_LABEL_FIH_CALL_END_383+0x34>
     73a:	bf00      	nop
     73c:	5002a000 	.word	0x5002a000
     740:	200001d4 	.word	0x200001d4
     744:	20000000 	.word	0x20000000
     748:	000070f8 	.word	0x000070f8
     74c:	000070fc 	.word	0x000070fc

00000750 <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     754:	b096      	sub	sp, #88	; 0x58
     756:	4617      	mov	r7, r2
     758:	461d      	mov	r5, r3
     75a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     75e:	4b35      	ldr	r3, [pc, #212]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
{
     760:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     762:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
     766:	9101      	str	r1, [sp, #4]
    end = pubkey + *bootutil_keys[key_id].len;
     768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
{
     76c:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     76e:	685b      	ldr	r3, [r3, #4]
     770:	6818      	ldr	r0, [r3, #0]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     772:	aa02      	add	r2, sp, #8
     774:	4401      	add	r1, r0
     776:	2330      	movs	r3, #48	; 0x30
     778:	a801      	add	r0, sp, #4
     77a:	f005 fde3 	bl	6344 <mbedtls_asn1_get_tag>
     77e:	b110      	cbz	r0, 786 <bootutil_verify_sig+0x36>
    }
    rc = mbedtls_ecdsa_read_signature(&ctx, hash, hlen, sig, slen);

#else /* CY_MBEDTLS_HW_ACCELERATION */
    if (hlen != NUM_ECC_BYTES) {
        return -1;
     780:	f04f 30ff 	mov.w	r0, #4294967295
     784:	e053      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
    end = *cp + len;
     786:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     78a:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     78c:	aa03      	add	r2, sp, #12
     78e:	ab06      	add	r3, sp, #24
     790:	4621      	mov	r1, r4
     792:	a801      	add	r0, sp, #4
     794:	f005 fdfe 	bl	6394 <mbedtls_asn1_get_alg>
     798:	2800      	cmp	r0, #0
     79a:	d1f1      	bne.n	780 <bootutil_verify_sig+0x30>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     79c:	9a04      	ldr	r2, [sp, #16]
     79e:	2a07      	cmp	r2, #7
     7a0:	d1ee      	bne.n	780 <bootutil_verify_sig+0x30>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     7a2:	4925      	ldr	r1, [pc, #148]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     7a4:	9805      	ldr	r0, [sp, #20]
     7a6:	f006 f813 	bl	67d0 <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     7aa:	2800      	cmp	r0, #0
     7ac:	d1e8      	bne.n	780 <bootutil_verify_sig+0x30>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7ae:	9a07      	ldr	r2, [sp, #28]
     7b0:	2a08      	cmp	r2, #8
     7b2:	d1e5      	bne.n	780 <bootutil_verify_sig+0x30>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     7b4:	4921      	ldr	r1, [pc, #132]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     7b6:	9808      	ldr	r0, [sp, #32]
     7b8:	f006 f80a 	bl	67d0 <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7bc:	2800      	cmp	r0, #0
     7be:	d1df      	bne.n	780 <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     7c0:	aa02      	add	r2, sp, #8
     7c2:	4621      	mov	r1, r4
     7c4:	a801      	add	r0, sp, #4
     7c6:	f005 fdd1 	bl	636c <mbedtls_asn1_get_bitstring_null>
     7ca:	2800      	cmp	r0, #0
     7cc:	d1d8      	bne.n	780 <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     7ce:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     7d2:	4413      	add	r3, r2
     7d4:	429c      	cmp	r4, r3
     7d6:	d1d3      	bne.n	780 <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     7d8:	2a41      	cmp	r2, #65	; 0x41
     7da:	d1d1      	bne.n	780 <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     7dc:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     7de:	2330      	movs	r3, #48	; 0x30
     7e0:	aa03      	add	r2, sp, #12
     7e2:	4629      	mov	r1, r5
     7e4:	a802      	add	r0, sp, #8
     7e6:	9702      	str	r7, [sp, #8]
     7e8:	f005 fdac 	bl	6344 <mbedtls_asn1_get_tag>
    if (rc) {
     7ec:	2800      	cmp	r0, #0
     7ee:	d1c7      	bne.n	780 <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     7f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     7f4:	4413      	add	r3, r2
     7f6:	429d      	cmp	r5, r3
     7f8:	d3c2      	bcc.n	780 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     7fa:	462a      	mov	r2, r5
     7fc:	a902      	add	r1, sp, #8
     7fe:	a806      	add	r0, sp, #24
     800:	f005 fb53 	bl	5eaa <bootutil_read_bigint>
    if (rc) {
     804:	2800      	cmp	r0, #0
     806:	d1bb      	bne.n	780 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     808:	462a      	mov	r2, r5
     80a:	a902      	add	r1, sp, #8
     80c:	a80e      	add	r0, sp, #56	; 0x38
     80e:	f005 fb4c 	bl	5eaa <bootutil_read_bigint>
    if (rc) {
     812:	2800      	cmp	r0, #0
     814:	d1b4      	bne.n	780 <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     816:	2e20      	cmp	r6, #32
     818:	d1b2      	bne.n	780 <bootutil_verify_sig+0x30>

    bootutil_ecdsa_p256_init(&ctx);
#ifdef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, sig, slen);
#else
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     81a:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     81c:	780b      	ldrb	r3, [r1, #0]
     81e:	2b04      	cmp	r3, #4
     820:	d1ae      	bne.n	780 <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     822:	4633      	mov	r3, r6
     824:	aa06      	add	r2, sp, #24
     826:	3101      	adds	r1, #1
     828:	4640      	mov	r0, r8
     82a:	f000 fd43 	bl	12b4 <cc310_ecdsa_verify_secp256r1>
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     82e:	b016      	add	sp, #88	; 0x58
     830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     834:	000070fc 	.word	0x000070fc
     838:	0000765a 	.word	0x0000765a
     83c:	00007662 	.word	0x00007662

00000840 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     844:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     846:	2302      	movs	r3, #2
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     848:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8b8 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     84c:	f8ad 3000 	strh.w	r3, [sp]
{
     850:	460d      	mov	r5, r1
     852:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     854:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     856:	f817 0b01 	ldrb.w	r0, [r7], #1
     85a:	a901      	add	r1, sp, #4
     85c:	f001 f8ca 	bl	19f4 <flash_area_open>
        if (rc != 0) {
     860:	4604      	mov	r4, r0
     862:	b9a0      	cbnz	r0, 88e <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     864:	9801      	ldr	r0, [sp, #4]
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     866:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     868:	2310      	movs	r3, #16
     86a:	aa02      	add	r2, sp, #8
     86c:	3910      	subs	r1, #16
     86e:	f005 fedf 	bl	6630 <flash_area_read>
     872:	4604      	mov	r4, r0
        flash_area_close(*fap);
     874:	9801      	ldr	r0, [sp, #4]
     876:	f005 feda 	bl	662e <flash_area_close>
        if (rc != 0) {
     87a:	b944      	cbnz	r4, 88e <boot_read_swap_size+0x4e>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     87c:	2210      	movs	r2, #16
     87e:	4641      	mov	r1, r8
     880:	a802      	add	r0, sp, #8
     882:	f005 ffa5 	bl	67d0 <memcmp>
     886:	b140      	cbz	r0, 89a <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     888:	b12e      	cbz	r6, 896 <boot_read_swap_size+0x56>
    return -1;
     88a:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     88e:	4620      	mov	r0, r4
     890:	b006      	add	sp, #24
     892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     896:	2601      	movs	r6, #1
     898:	e7dd      	b.n	856 <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     89a:	9801      	ldr	r0, [sp, #4]
     89c:	f006 f96f 	bl	6b7e <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     8a0:	2304      	movs	r3, #4
     8a2:	f1a0 0108 	sub.w	r1, r0, #8
     8a6:	462a      	mov	r2, r5
     8a8:	9801      	ldr	r0, [sp, #4]
     8aa:	f005 fec1 	bl	6630 <flash_area_read>
     8ae:	4604      	mov	r4, r0
        flash_area_close(fap);
     8b0:	9801      	ldr	r0, [sp, #4]
     8b2:	f005 febc 	bl	662e <flash_area_close>
     8b6:	e7ea      	b.n	88e <boot_read_swap_size+0x4e>
     8b8:	00007370 	.word	0x00007370

000008bc <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     8c0:	4b38      	ldr	r3, [pc, #224]	; (9a4 <FIH_LABEL_FIH_CALL_END_477+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     8c2:	b088      	sub	sp, #32
     8c4:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8c6:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     8c8:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     8ca:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8cc:	f005 fa4a 	bl	5d64 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     8d0:	a906      	add	r1, sp, #24
     8d2:	b2c0      	uxtb	r0, r0
     8d4:	f001 f88e 	bl	19f4 <flash_area_open>
    if (rc != 0) {
     8d8:	2800      	cmp	r0, #0
     8da:	d157      	bne.n	98c <FIH_LABEL_FIH_CALL_END_477+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8dc:	4629      	mov	r1, r5
     8de:	f005 fa41 	bl	5d64 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     8e2:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     8e4:	a907      	add	r1, sp, #28
     8e6:	b2c0      	uxtb	r0, r0
     8e8:	fb04 6405 	mla	r4, r4, r5, r6
     8ec:	f001 f882 	bl	19f4 <flash_area_open>
    if (rc != 0) {
     8f0:	2800      	cmp	r0, #0
     8f2:	d036      	beq.n	962 <FIH_LABEL_FIH_CALL_END_477+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     8f4:	f04f 082c 	mov.w	r8, #44	; 0x2c
     8f8:	fb08 f805 	mul.w	r8, r8, r5
     8fc:	eb06 0708 	add.w	r7, r6, r8
     900:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     902:	f011 0110 	ands.w	r1, r1, #16
     906:	d137      	bne.n	978 <FIH_LABEL_FIH_CALL_END_477+0x54>

00000908 <FIH_LABEL_FIH_CALL_START_421>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     908:	f44f 7380 	mov.w	r3, #256	; 0x100
     90c:	9301      	str	r3, [sp, #4]
     90e:	4b26      	ldr	r3, [pc, #152]	; (9a8 <FIH_LABEL_FIH_CALL_END_477+0x84>)
     910:	9300      	str	r3, [sp, #0]
     912:	4622      	mov	r2, r4
     914:	e9cd 1103 	strd	r1, r1, [sp, #12]
     918:	9b06      	ldr	r3, [sp, #24]
     91a:	9102      	str	r1, [sp, #8]
     91c:	4608      	mov	r0, r1
     91e:	f7ff fdff 	bl	520 <bootutil_img_validate>
     922:	4604      	mov	r4, r0

00000924 <FIH_LABEL_FIH_CALL_END_477>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     924:	4b21      	ldr	r3, [pc, #132]	; (9ac <FIH_LABEL_FIH_CALL_END_477+0x88>)
     926:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     92a:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     92c:	429a      	cmp	r2, r3
     92e:	d10c      	bne.n	94a <FIH_LABEL_FIH_CALL_END_477+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     930:	893a      	ldrh	r2, [r7, #8]
     932:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     934:	43d1      	mvns	r1, r2
     936:	428b      	cmp	r3, r1
     938:	d807      	bhi.n	94a <FIH_LABEL_FIH_CALL_END_477+0x26>
        *dest = a + b;
     93a:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     93c:	6882      	ldr	r2, [r0, #8]
     93e:	4293      	cmp	r3, r2
     940:	d203      	bcs.n	94a <FIH_LABEL_FIH_CALL_END_477+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     942:	4b1b      	ldr	r3, [pc, #108]	; (9b0 <FIH_LABEL_FIH_CALL_END_477+0x8c>)
     944:	681b      	ldr	r3, [r3, #0]
     946:	42a3      	cmp	r3, r4
     948:	d01d      	beq.n	986 <FIH_LABEL_FIH_CALL_END_477+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     94a:	b345      	cbz	r5, 99e <FIH_LABEL_FIH_CALL_END_477+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     94c:	6882      	ldr	r2, [r0, #8]
     94e:	2100      	movs	r1, #0
     950:	f005 feb8 	bl	66c4 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     954:	4a17      	ldr	r2, [pc, #92]	; (9b4 <FIH_LABEL_FIH_CALL_END_477+0x90>)
     956:	4818      	ldr	r0, [pc, #96]	; (9b8 <FIH_LABEL_FIH_CALL_END_477+0x94>)
     958:	2145      	movs	r1, #69	; 0x45
     95a:	f005 fe5b 	bl	6614 <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     95e:	2401      	movs	r4, #1
     960:	e011      	b.n	986 <FIH_LABEL_FIH_CALL_END_477+0x62>
    erased_val = flash_area_erased_val(fap);
     962:	9807      	ldr	r0, [sp, #28]
     964:	f005 fee6 	bl	6734 <flash_area_erased_val>
     968:	4607      	mov	r7, r0
    flash_area_close(fap);
     96a:	9807      	ldr	r0, [sp, #28]
     96c:	f005 fe5f 	bl	662e <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     970:	1e63      	subs	r3, r4, #1
     972:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     974:	4293      	cmp	r3, r2
     976:	d10d      	bne.n	994 <FIH_LABEL_FIH_CALL_END_477+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     978:	2d00      	cmp	r5, #0
     97a:	d0f0      	beq.n	95e <FIH_LABEL_FIH_CALL_END_477+0x3a>
            swap_erase_trailer_sectors(state, fap);
     97c:	9906      	ldr	r1, [sp, #24]
     97e:	4630      	mov	r0, r6
     980:	f005 fbbf 	bl	6102 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     984:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     986:	9806      	ldr	r0, [sp, #24]
     988:	f005 fe51 	bl	662e <flash_area_close>

    FIH_RET(fih_rc);
}
     98c:	4620      	mov	r0, r4
     98e:	b008      	add	sp, #32
     990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     994:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     998:	42b9      	cmp	r1, r7
     99a:	d0eb      	beq.n	974 <FIH_LABEL_FIH_CALL_END_477+0x50>
     99c:	e7aa      	b.n	8f4 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     99e:	4a07      	ldr	r2, [pc, #28]	; (9bc <FIH_LABEL_FIH_CALL_END_477+0x98>)
     9a0:	e7d9      	b.n	956 <FIH_LABEL_FIH_CALL_END_477+0x32>
     9a2:	bf00      	nop
     9a4:	20000000 	.word	0x20000000
     9a8:	20000efc 	.word	0x20000efc
     9ac:	96f3b83d 	.word	0x96f3b83d
     9b0:	200001d4 	.word	0x200001d4
     9b4:	0000766b 	.word	0x0000766b
     9b8:	0000767d 	.word	0x0000767d
     9bc:	00007675 	.word	0x00007675

000009c0 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     9c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
     9c2:	460d      	mov	r5, r1
     9c4:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     9c6:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     9c8:	4628      	mov	r0, r5
    size = copy_size = 0;
     9ca:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     9ce:	f005 fb57 	bl	6080 <boot_status_is_reset>
     9d2:	b330      	cbz	r0, a22 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9d4:	4e16      	ldr	r6, [pc, #88]	; (a30 <boot_swap_image+0x70>)
     9d6:	6822      	ldr	r2, [r4, #0]
     9d8:	42b2      	cmp	r2, r6
     9da:	d103      	bne.n	9e4 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     9dc:	aa01      	add	r2, sp, #4
     9de:	4620      	mov	r0, r4
     9e0:	f005 fac3 	bl	5f6a <boot_read_image_size>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     9e6:	42b3      	cmp	r3, r6
     9e8:	d104      	bne.n	9f4 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     9ea:	466a      	mov	r2, sp
     9ec:	2101      	movs	r1, #1
     9ee:	4620      	mov	r0, r4
     9f0:	f005 fabb 	bl	5f6a <boot_read_image_size>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     9f4:	e9dd 3200 	ldrd	r3, r2, [sp]
     9f8:	4293      	cmp	r3, r2
            copy_size = size;
     9fa:	bf88      	it	hi
     9fc:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     9fe:	9b01      	ldr	r3, [sp, #4]
     a00:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     a02:	9a01      	ldr	r2, [sp, #4]
     a04:	4629      	mov	r1, r5
     a06:	4620      	mov	r0, r4
     a08:	f000 fb34 	bl	1074 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     a0c:	4b09      	ldr	r3, [pc, #36]	; (a34 <boot_swap_image+0x74>)
     a0e:	681a      	ldr	r2, [r3, #0]
     a10:	2a00      	cmp	r2, #0
     a12:	dd03      	ble.n	a1c <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     a14:	4808      	ldr	r0, [pc, #32]	; (a38 <boot_swap_image+0x78>)
     a16:	2157      	movs	r1, #87	; 0x57
     a18:	f005 fdfc 	bl	6614 <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     a1c:	2000      	movs	r0, #0
     a1e:	b002      	add	sp, #8
     a20:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     a22:	f105 0108 	add.w	r1, r5, #8
     a26:	f7ff ff0b 	bl	840 <boot_read_swap_size>
        copy_size = bs->swap_size;
     a2a:	68ab      	ldr	r3, [r5, #8]
     a2c:	9301      	str	r3, [sp, #4]
     a2e:	e7e8      	b.n	a02 <boot_swap_image+0x42>
     a30:	96f3b83d 	.word	0x96f3b83d
     a34:	20000e38 	.word	0x20000e38
     a38:	000076a5 	.word	0x000076a5

00000a3c <boot_copy_region>:
{
     a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a40:	f8df b078 	ldr.w	fp, [pc, #120]	; abc <boot_copy_region+0x80>
     a44:	4c1b      	ldr	r4, [pc, #108]	; (ab4 <boot_copy_region+0x78>)
     a46:	4d1c      	ldr	r5, [pc, #112]	; (ab8 <boot_copy_region+0x7c>)
{
     a48:	468a      	mov	sl, r1
     a4a:	4690      	mov	r8, r2
     a4c:	4699      	mov	r9, r3
    bytes_copied = 0;
     a4e:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a52:	429e      	cmp	r6, r3
     a54:	d301      	bcc.n	a5a <boot_copy_region+0x1e>
    return 0;
     a56:	2000      	movs	r0, #0
     a58:	e00f      	b.n	a7a <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a5c:	4a17      	ldr	r2, [pc, #92]	; (abc <boot_copy_region+0x80>)
        if (sz - bytes_copied > sizeof buf) {
     a5e:	1b9f      	subs	r7, r3, r6
     a60:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     a64:	bf28      	it	cs
     a66:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a6a:	463b      	mov	r3, r7
     a6c:	eb06 0109 	add.w	r1, r6, r9
     a70:	4650      	mov	r0, sl
     a72:	f005 fddd 	bl	6630 <flash_area_read>
        if (rc != 0) {
     a76:	b110      	cbz	r0, a7e <boot_copy_region+0x42>
            return BOOT_EFLASH;
     a78:	2001      	movs	r0, #1
}
     a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     a7e:	990a      	ldr	r1, [sp, #40]	; 0x28
     a80:	463b      	mov	r3, r7
     a82:	465a      	mov	r2, fp
     a84:	1871      	adds	r1, r6, r1
     a86:	4640      	mov	r0, r8
     a88:	f005 fdee 	bl	6668 <flash_area_write>
        if (rc != 0) {
     a8c:	2800      	cmp	r0, #0
     a8e:	d1f3      	bne.n	a78 <boot_copy_region+0x3c>
     a90:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     a94:	443e      	add	r6, r7
     a96:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     a9a:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     a9e:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     aa2:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     aa6:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     aaa:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     aae:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     ab2:	e7cd      	b.n	a50 <boot_copy_region+0x14>
     ab4:	40010000 	.word	0x40010000
     ab8:	6e524635 	.word	0x6e524635
     abc:	20000238 	.word	0x20000238

00000ac0 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     ac4:	4b8e      	ldr	r3, [pc, #568]	; (d00 <FIH_LABEL_FIH_CALL_END_2436+0x46>)
     ac6:	681e      	ldr	r6, [r3, #0]
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     ac8:	4b8e      	ldr	r3, [pc, #568]	; (d04 <FIH_LABEL_FIH_CALL_END_2436+0x4a>)
     aca:	6243      	str	r3, [r0, #36]	; 0x24
{
     acc:	460f      	mov	r7, r1
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     ace:	4b8e      	ldr	r3, [pc, #568]	; (d08 <FIH_LABEL_FIH_CALL_END_2436+0x4e>)
     ad0:	6503      	str	r3, [r0, #80]	; 0x50

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ad2:	2100      	movs	r1, #0
{
     ad4:	b085      	sub	sp, #20
     ad6:	4604      	mov	r4, r0
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ad8:	4608      	mov	r0, r1
     ada:	f005 f943 	bl	5d64 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ade:	f104 0120 	add.w	r1, r4, #32
     ae2:	b2c0      	uxtb	r0, r0
     ae4:	f000 ff86 	bl	19f4 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ae8:	2101      	movs	r1, #1
     aea:	2000      	movs	r0, #0
     aec:	f005 f93a 	bl	5d64 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     af0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     af4:	b2c0      	uxtb	r0, r0
     af6:	f000 ff7d 	bl	19f4 <flash_area_open>
     afa:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     afc:	4620      	mov	r0, r4
     afe:	f005 fa95 	bl	602c <boot_read_sectors>
    if (rc != 0) {
     b02:	4680      	mov	r8, r0
     b04:	b968      	cbnz	r0, b22 <context_boot_go+0x62>
    rc = boot_read_image_headers(state, false, NULL);
     b06:	2200      	movs	r2, #0
     b08:	4611      	mov	r1, r2
     b0a:	4620      	mov	r0, r4
     b0c:	f005 fa75 	bl	5ffa <boot_read_image_headers>
    if (rc != 0) {
     b10:	4680      	mov	r8, r0
     b12:	b300      	cbz	r0, b56 <context_boot_go+0x96>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     b14:	487d      	ldr	r0, [pc, #500]	; (d0c <FIH_LABEL_FIH_CALL_END_2436+0x52>)
     b16:	2200      	movs	r2, #0
     b18:	2157      	movs	r1, #87	; 0x57
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b1a:	f005 fd7b 	bl	6614 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b1e:	2301      	movs	r3, #1
     b20:	e091      	b.n	c46 <FIH_LABEL_FIH_CALL_END_2223+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     b22:	487b      	ldr	r0, [pc, #492]	; (d10 <FIH_LABEL_FIH_CALL_END_2436+0x56>)
     b24:	2280      	movs	r2, #128	; 0x80
     b26:	2157      	movs	r1, #87	; 0x57
     b28:	f005 fd74 	bl	6614 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b2c:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     b2e:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b30:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     b34:	d1e7      	bne.n	b06 <context_boot_go+0x46>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     b36:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     b3a:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     b3e:	2b04      	cmp	r3, #4
     b40:	f200 8084 	bhi.w	c4c <FIH_LABEL_FIH_CALL_END_2223+0x14>
     b44:	2b01      	cmp	r3, #1
     b46:	f200 8088 	bhi.w	c5a <FIH_LABEL_FIH_CALL_END_2223+0x22>
     b4a:	f000 809f 	beq.w	c8c <FIH_LABEL_FIH_CALL_END_2223+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b4e:	23ff      	movs	r3, #255	; 0xff
     b50:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     b54:	e09a      	b.n	c8c <FIH_LABEL_FIH_CALL_END_2223+0x54>
    if (boot_slots_compatible(state)) {
     b56:	4620      	mov	r0, r4
     b58:	f000 f9a4 	bl	ea4 <boot_slots_compatible>
     b5c:	2800      	cmp	r0, #0
     b5e:	d0de      	beq.n	b1e <context_boot_go+0x5e>
        boot_status_reset(bs);
     b60:	4668      	mov	r0, sp
     b62:	f005 fa84 	bl	606e <boot_status_reset>
        rc = swap_read_status(state, bs);
     b66:	4669      	mov	r1, sp
     b68:	4620      	mov	r0, r4
     b6a:	f005 fb1f 	bl	61ac <swap_read_status>
        if (rc != 0) {
     b6e:	b118      	cbz	r0, b78 <context_boot_go+0xb8>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b70:	4868      	ldr	r0, [pc, #416]	; (d14 <FIH_LABEL_FIH_CALL_END_2436+0x5a>)
     b72:	4642      	mov	r2, r8
     b74:	2157      	movs	r1, #87	; 0x57
     b76:	e7d0      	b.n	b1a <context_boot_go+0x5a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     b78:	4668      	mov	r0, sp
     b7a:	f005 fa81 	bl	6080 <boot_status_is_reset>
     b7e:	f080 0001 	eor.w	r0, r0, #1
     b82:	466a      	mov	r2, sp
     b84:	b2c1      	uxtb	r1, r0
     b86:	4620      	mov	r0, r4
     b88:	f005 fa37 	bl	5ffa <boot_read_image_headers>
        if (rc != 0) {
     b8c:	4602      	mov	r2, r0
     b8e:	2800      	cmp	r0, #0
     b90:	d1c0      	bne.n	b14 <context_boot_go+0x54>
        if (!boot_status_is_reset(bs)) {
     b92:	4668      	mov	r0, sp
     b94:	f005 fa74 	bl	6080 <boot_status_is_reset>
     b98:	4680      	mov	r8, r0
     b9a:	bb60      	cbnz	r0, bf6 <context_boot_go+0x136>
    rc = boot_swap_image(state, bs);
     b9c:	4669      	mov	r1, sp
     b9e:	4620      	mov	r0, r4
     ba0:	f7ff ff0e 	bl	9c0 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ba4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ba8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     bac:	3b03      	subs	r3, #3
     bae:	2b01      	cmp	r3, #1
     bb0:	d806      	bhi.n	bc0 <context_boot_go+0x100>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     bb2:	4640      	mov	r0, r8
     bb4:	f005 fb48 	bl	6248 <swap_set_image_ok>
        if (rc != 0) {
     bb8:	b110      	cbz	r0, bc0 <context_boot_go+0x100>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bba:	23ff      	movs	r3, #255	; 0xff
     bbc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     bc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc4:	3b02      	subs	r3, #2
     bc6:	2b02      	cmp	r3, #2
     bc8:	d80b      	bhi.n	be2 <context_boot_go+0x122>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     bca:	2000      	movs	r0, #0
     bcc:	f005 fb2a 	bl	6224 <swap_set_copy_done>
        if (rc != 0) {
     bd0:	b138      	cbz	r0, be2 <context_boot_go+0x122>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bd2:	23ff      	movs	r3, #255	; 0xff
     bd4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     bd8:	484f      	ldr	r0, [pc, #316]	; (d18 <FIH_LABEL_FIH_CALL_END_2436+0x5e>)
     bda:	2145      	movs	r1, #69	; 0x45
     bdc:	f005 fd1a 	bl	6614 <z_log_minimal_printk>
        while (1) {}
     be0:	e7fe      	b.n	be0 <context_boot_go+0x120>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     be2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     be6:	2bff      	cmp	r3, #255	; 0xff
     be8:	d0f6      	beq.n	bd8 <context_boot_go+0x118>
            rc = boot_read_image_headers(state, false, bs);
     bea:	466a      	mov	r2, sp
     bec:	2100      	movs	r1, #0
     bee:	4620      	mov	r0, r4
     bf0:	f005 fa03 	bl	5ffa <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bf4:	e793      	b.n	b1e <context_boot_go+0x5e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     bf6:	f89d 9007 	ldrb.w	r9, [sp, #7]
     bfa:	f1b9 0f01 	cmp.w	r9, #1
     bfe:	d117      	bne.n	c30 <FIH_LABEL_FIH_CALL_START_2203>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c00:	4610      	mov	r0, r2
     c02:	f002 fd21 	bl	3648 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c06:	1e83      	subs	r3, r0, #2
     c08:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c0a:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c0c:	d80d      	bhi.n	c2a <FIH_LABEL_FIH_CALL_END_2138+0x14>

00000c0e <FIH_LABEL_FIH_CALL_START_2114>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c0e:	4649      	mov	r1, r9
     c10:	4620      	mov	r0, r4
     c12:	f7ff fe53 	bl	8bc <boot_validate_slot.isra.0>

00000c16 <FIH_LABEL_FIH_CALL_END_2138>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c16:	4b41      	ldr	r3, [pc, #260]	; (d1c <FIH_LABEL_FIH_CALL_END_2436+0x62>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	4298      	cmp	r0, r3
     c1c:	d005      	beq.n	c2a <FIH_LABEL_FIH_CALL_END_2138+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     c1e:	2801      	cmp	r0, #1
     c20:	bf0c      	ite	eq
     c22:	f04f 0801 	moveq.w	r8, #1
     c26:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c2a:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     c2e:	e782      	b.n	b36 <context_boot_go+0x76>

00000c30 <FIH_LABEL_FIH_CALL_START_2203>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c30:	2101      	movs	r1, #1
     c32:	4620      	mov	r0, r4
     c34:	f7ff fe42 	bl	8bc <boot_validate_slot.isra.0>

00000c38 <FIH_LABEL_FIH_CALL_END_2223>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c38:	4b38      	ldr	r3, [pc, #224]	; (d1c <FIH_LABEL_FIH_CALL_END_2436+0x62>)
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c3e:	bf0c      	ite	eq
     c40:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c44:	2305      	movne	r3, #5
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c46:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c4a:	e774      	b.n	b36 <context_boot_go+0x76>
        switch (BOOT_SWAP_TYPE(state)) {
     c4c:	2b05      	cmp	r3, #5
     c4e:	f47f af7e 	bne.w	b4e <context_boot_go+0x8e>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c52:	2000      	movs	r0, #0
     c54:	f005 faf8 	bl	6248 <swap_set_image_ok>
     c58:	e013      	b.n	c82 <FIH_LABEL_FIH_CALL_END_2223+0x4a>
        rc = boot_swap_image(state, bs);
     c5a:	4669      	mov	r1, sp
     c5c:	4620      	mov	r0, r4
     c5e:	f7ff feaf 	bl	9c0 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     c62:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c66:	1eda      	subs	r2, r3, #3
     c68:	2a01      	cmp	r2, #1
        rc = boot_swap_image(state, bs);
     c6a:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c6c:	d80c      	bhi.n	c88 <FIH_LABEL_FIH_CALL_END_2223+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c6e:	2000      	movs	r0, #0
     c70:	f005 faea 	bl	6248 <swap_set_image_ok>
        if (rc != 0) {
     c74:	4605      	mov	r5, r0
     c76:	2800      	cmp	r0, #0
     c78:	f47f af69 	bne.w	b4e <context_boot_go+0x8e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c7c:	2000      	movs	r0, #0
     c7e:	f005 fad1 	bl	6224 <swap_set_copy_done>
            if (rc != 0) {
     c82:	4605      	mov	r5, r0
     c84:	b110      	cbz	r0, c8c <FIH_LABEL_FIH_CALL_END_2223+0x54>
     c86:	e762      	b.n	b4e <context_boot_go+0x8e>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c88:	2b02      	cmp	r3, #2
     c8a:	d0f7      	beq.n	c7c <FIH_LABEL_FIH_CALL_END_2223+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c8c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c90:	2bff      	cmp	r3, #255	; 0xff
     c92:	d104      	bne.n	c9e <FIH_LABEL_FIH_CALL_END_2223+0x66>
            BOOT_LOG_ERR("panic!");
     c94:	4820      	ldr	r0, [pc, #128]	; (d18 <FIH_LABEL_FIH_CALL_END_2436+0x5e>)
     c96:	2145      	movs	r1, #69	; 0x45
     c98:	f005 fcbc 	bl	6614 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     c9c:	e7fe      	b.n	c9c <FIH_LABEL_FIH_CALL_END_2223+0x64>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     c9e:	2b01      	cmp	r3, #1
     ca0:	d006      	beq.n	cb0 <FIH_LABEL_FIH_CALL_START_2420>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     ca2:	466a      	mov	r2, sp
     ca4:	2100      	movs	r1, #0
     ca6:	4620      	mov	r0, r4
     ca8:	f005 f9a7 	bl	5ffa <boot_read_image_headers>
            if (rc != 0) {
     cac:	4605      	mov	r5, r0
     cae:	b9d0      	cbnz	r0, ce6 <FIH_LABEL_FIH_CALL_END_2436+0x2c>

00000cb0 <FIH_LABEL_FIH_CALL_START_2420>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     cb0:	2100      	movs	r1, #0
     cb2:	4620      	mov	r0, r4
     cb4:	f7ff fe02 	bl	8bc <boot_validate_slot.isra.0>
     cb8:	4606      	mov	r6, r0

00000cba <FIH_LABEL_FIH_CALL_END_2436>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cba:	f8df 8060 	ldr.w	r8, [pc, #96]	; d1c <FIH_LABEL_FIH_CALL_END_2436+0x62>
     cbe:	f8d8 3000 	ldr.w	r3, [r8]
     cc2:	4298      	cmp	r0, r3
     cc4:	d10f      	bne.n	ce6 <FIH_LABEL_FIH_CALL_END_2436+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     cc6:	2210      	movs	r2, #16
     cc8:	2100      	movs	r1, #0
     cca:	4668      	mov	r0, sp
     ccc:	f005 fd9b 	bl	6806 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     cd0:	6a20      	ldr	r0, [r4, #32]
     cd2:	f005 f850 	bl	5d76 <flash_area_get_device_id>
     cd6:	7138      	strb	r0, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return flash_area_get_off(BOOT_IMG(state, slot).area);
     cd8:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     cda:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     cde:	685b      	ldr	r3, [r3, #4]
     ce0:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     ce2:	603c      	str	r4, [r7, #0]
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     ce4:	2500      	movs	r5, #0
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     ce6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     ce8:	f005 fca1 	bl	662e <flash_area_close>
     cec:	6a20      	ldr	r0, [r4, #32]
     cee:	f005 fc9e 	bl	662e <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     cf2:	2d00      	cmp	r5, #0
     cf4:	bf14      	ite	ne
     cf6:	4628      	movne	r0, r5
     cf8:	4630      	moveq	r0, r6
     cfa:	b005      	add	sp, #20
     cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d00:	20000000 	.word	0x20000000
     d04:	20000638 	.word	0x20000638
     d08:	20000a38 	.word	0x20000a38
     d0c:	00007716 	.word	0x00007716
     d10:	000076d4 	.word	0x000076d4
     d14:	00007742 	.word	0x00007742
     d18:	0000776c 	.word	0x0000776c
     d1c:	200001d4 	.word	0x200001d4

00000d20 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d20:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d22:	4d06      	ldr	r5, [pc, #24]	; (d3c <FIH_LABEL_FIH_CALL_END_3112+0x4>)
{
     d24:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d26:	2260      	movs	r2, #96	; 0x60
     d28:	2100      	movs	r1, #0
     d2a:	4628      	mov	r0, r5
     d2c:	f005 fd6b 	bl	6806 <memset>

00000d30 <FIH_LABEL_FIH_CALL_START_3097>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d30:	4621      	mov	r1, r4
     d32:	4628      	mov	r0, r5
     d34:	f7ff fec4 	bl	ac0 <context_boot_go>

00000d38 <FIH_LABEL_FIH_CALL_END_3112>:
}
     d38:	bd38      	pop	{r3, r4, r5, pc}
     d3a:	bf00      	nop
     d3c:	200001d8 	.word	0x200001d8

00000d40 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d42:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     d44:	461c      	mov	r4, r3
     d46:	b333      	cbz	r3, d96 <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     d48:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d4a:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     d4c:	7963      	ldrb	r3, [r4, #5]
     d4e:	2b01      	cmp	r3, #1
     d50:	d115      	bne.n	d7e <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     d52:	bb01      	cbnz	r1, d96 <boot_read_image_header+0x56>
     d54:	4b1f      	ldr	r3, [pc, #124]	; (dd4 <boot_read_image_header+0x94>)
     d56:	6822      	ldr	r2, [r4, #0]
     d58:	681b      	ldr	r3, [r3, #0]
    off = 0;
     d5a:	429a      	cmp	r2, r3
     d5c:	bf98      	it	ls
     d5e:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     d60:	2000      	movs	r0, #0
     d62:	f004 ffff 	bl	5d64 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     d66:	a901      	add	r1, sp, #4
     d68:	b2c0      	uxtb	r0, r0
     d6a:	f000 fe43 	bl	19f4 <flash_area_open>
    if (rc != 0) {
     d6e:	b1f0      	cbz	r0, dae <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     d70:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     d72:	9801      	ldr	r0, [sp, #4]
     d74:	f005 fc5b 	bl	662e <flash_area_close>
    return rc;
}
     d78:	4628      	mov	r0, r5
     d7a:	b002      	add	sp, #8
     d7c:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     d7e:	2b02      	cmp	r3, #2
     d80:	d109      	bne.n	d96 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     d82:	6823      	ldr	r3, [r4, #0]
     d84:	2b01      	cmp	r3, #1
     d86:	d908      	bls.n	d9a <boot_read_image_header+0x5a>
     d88:	4a12      	ldr	r2, [pc, #72]	; (dd4 <boot_read_image_header+0x94>)
     d8a:	6812      	ldr	r2, [r2, #0]
     d8c:	4293      	cmp	r3, r2
     d8e:	d802      	bhi.n	d96 <boot_read_image_header+0x56>
                if (slot == 0) {
     d90:	fab1 f181 	clz	r1, r1
     d94:	0949      	lsrs	r1, r1, #5
    off = 0;
     d96:	2500      	movs	r5, #0
     d98:	e7e2      	b.n	d60 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     d9a:	d1fc      	bne.n	d96 <boot_read_image_header+0x56>
                if (slot == 0) {
     d9c:	2900      	cmp	r1, #0
     d9e:	d0df      	beq.n	d60 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     da0:	2901      	cmp	r1, #1
     da2:	d1f8      	bne.n	d96 <boot_read_image_header+0x56>
     da4:	7921      	ldrb	r1, [r4, #4]
     da6:	3902      	subs	r1, #2
     da8:	bf18      	it	ne
     daa:	2101      	movne	r1, #1
     dac:	e7f3      	b.n	d96 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     dae:	4629      	mov	r1, r5
     db0:	9801      	ldr	r0, [sp, #4]
     db2:	2320      	movs	r3, #32
     db4:	4632      	mov	r2, r6
     db6:	f005 fc3b 	bl	6630 <flash_area_read>
    if (rc != 0) {
     dba:	4605      	mov	r5, r0
     dbc:	2800      	cmp	r0, #0
     dbe:	d1d7      	bne.n	d70 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	d0d6      	beq.n	d72 <boot_read_image_header+0x32>
     dc4:	6835      	ldr	r5, [r6, #0]
     dc6:	4804      	ldr	r0, [pc, #16]	; (dd8 <boot_read_image_header+0x98>)
     dc8:	1a2d      	subs	r5, r5, r0
     dca:	bf18      	it	ne
     dcc:	f04f 35ff 	movne.w	r5, #4294967295
     dd0:	e7cf      	b.n	d72 <boot_read_image_header+0x32>
     dd2:	bf00      	nop
     dd4:	20000004 	.word	0x20000004
     dd8:	96f3b83d 	.word	0x96f3b83d

00000ddc <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de0:	4607      	mov	r7, r0
     de2:	b085      	sub	sp, #20
     de4:	460c      	mov	r4, r1
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     de6:	4601      	mov	r1, r0
     de8:	2000      	movs	r0, #0
{
     dea:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     dec:	f005 f890 	bl	5f10 <boot_status_entries>
    if (max_entries < 0) {
     df0:	1e05      	subs	r5, r0, #0
     df2:	db51      	blt.n	e98 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     df4:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     df6:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     df8:	f005 f897 	bl	5f2a <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     dfc:	fa5f f984 	uxtb.w	r9, r4
     e00:	f105 38ff 	add.w	r8, r5, #4294967295
     e04:	fb09 0808 	mla	r8, r9, r8, r0
    erased_sections = 0;
     e08:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     e0c:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     e10:	f04f 34ff 	mov.w	r4, #4294967295
    for (i = max_entries; i > 0; i--) {
     e14:	b99d      	cbnz	r5, e3e <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     e16:	f1ba 0f01 	cmp.w	sl, #1
     e1a:	dd03      	ble.n	e24 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     e1c:	4820      	ldr	r0, [pc, #128]	; (ea0 <swap_read_status_bytes+0xc4>)
     e1e:	2145      	movs	r1, #69	; 0x45
     e20:	f005 fbf8 	bl	6614 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     e24:	1c63      	adds	r3, r4, #1
     e26:	d006      	beq.n	e36 <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     e28:	2c7f      	cmp	r4, #127	; 0x7f
     e2a:	dc2a      	bgt.n	e82 <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e2c:	3401      	adds	r4, #1
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e2e:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e32:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e34:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     e36:	4628      	mov	r0, r5
     e38:	b005      	add	sp, #20
     e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     e3e:	1e6b      	subs	r3, r5, #1
     e40:	9300      	str	r3, [sp, #0]
     e42:	f10d 020f 	add.w	r2, sp, #15
     e46:	2301      	movs	r3, #1
     e48:	4641      	mov	r1, r8
     e4a:	4638      	mov	r0, r7
     e4c:	f005 fbf0 	bl	6630 <flash_area_read>
        if (rc < 0) {
     e50:	1e03      	subs	r3, r0, #0
     e52:	9301      	str	r3, [sp, #4]
     e54:	db22      	blt.n	e9c <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     e56:	2201      	movs	r2, #1
     e58:	f10d 010f 	add.w	r1, sp, #15
     e5c:	4638      	mov	r0, r7
     e5e:	f005 fe9f 	bl	6ba0 <bootutil_buffer_is_erased>
     e62:	9b01      	ldr	r3, [sp, #4]
     e64:	b140      	cbz	r0, e78 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     e66:	455b      	cmp	r3, fp
     e68:	d001      	beq.n	e6e <swap_read_status_bytes+0x92>
                erased_sections++;
     e6a:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     e6e:	9d00      	ldr	r5, [sp, #0]
     e70:	eba8 0809 	sub.w	r8, r8, r9
     e74:	469b      	mov	fp, r3
     e76:	e7cd      	b.n	e14 <swap_read_status_bytes+0x38>
     e78:	f1b4 3fff 	cmp.w	r4, #4294967295
     e7c:	bf08      	it	eq
     e7e:	462c      	moveq	r4, r5
     e80:	e7f5      	b.n	e6e <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     e82:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e84:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     e86:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e88:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e8a:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e8e:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e90:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e92:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e94:	7134      	strb	r4, [r6, #4]
     e96:	e7ce      	b.n	e36 <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     e98:	2507      	movs	r5, #7
     e9a:	e7cc      	b.n	e36 <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     e9c:	2501      	movs	r5, #1
     e9e:	e7ca      	b.n	e36 <swap_read_status_bytes+0x5a>
     ea0:	00007778 	.word	0x00007778

00000ea4 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
     ea4:	6a81      	ldr	r1, [r0, #40]	; 0x28
     ea6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     ea8:	428a      	cmp	r2, r1
{
     eaa:	b538      	push	{r3, r4, r5, lr}
    if ((num_sectors_pri != num_sectors_sec) &&
     eac:	d008      	beq.n	ec0 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     eae:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     eb0:	428b      	cmp	r3, r1
     eb2:	d005      	beq.n	ec0 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     eb4:	4813      	ldr	r0, [pc, #76]	; (f04 <boot_slots_compatible+0x60>)
     eb6:	2157      	movs	r1, #87	; 0x57

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     eb8:	f005 fbac 	bl	6614 <z_log_minimal_printk>
            return 0;
     ebc:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     ebe:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     ec0:	2980      	cmp	r1, #128	; 0x80
     ec2:	d91c      	bls.n	efe <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ec4:	4810      	ldr	r0, [pc, #64]	; (f08 <boot_slots_compatible+0x64>)
     ec6:	2157      	movs	r1, #87	; 0x57
     ec8:	e7f6      	b.n	eb8 <boot_slots_compatible+0x14>
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     eca:	6a44      	ldr	r4, [r0, #36]	; 0x24
     ecc:	6d05      	ldr	r5, [r0, #80]	; 0x50
     ece:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     ed2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     ed6:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     ed8:	686d      	ldr	r5, [r5, #4]
     eda:	42ac      	cmp	r4, r5
     edc:	d002      	beq.n	ee4 <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     ede:	480b      	ldr	r0, [pc, #44]	; (f0c <boot_slots_compatible+0x68>)
     ee0:	2157      	movs	r1, #87	; 0x57
     ee2:	e7e9      	b.n	eb8 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     ee4:	3301      	adds	r3, #1
     ee6:	429a      	cmp	r2, r3
     ee8:	d1ef      	bne.n	eca <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     eea:	4291      	cmp	r1, r2
     eec:	d905      	bls.n	efa <boot_slots_compatible+0x56>
     eee:	6a43      	ldr	r3, [r0, #36]	; 0x24
     ef0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     ef4:	6853      	ldr	r3, [r2, #4]
     ef6:	42a3      	cmp	r3, r4
     ef8:	d1f1      	bne.n	ede <boot_slots_compatible+0x3a>
    return 1;
     efa:	2001      	movs	r0, #1
     efc:	e7df      	b.n	ebe <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     efe:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     f00:	461c      	mov	r4, r3
     f02:	e7f0      	b.n	ee6 <boot_slots_compatible+0x42>
     f04:	0000779b 	.word	0x0000779b
     f08:	000077d3 	.word	0x000077d3
     f0c:	00007802 	.word	0x00007802

00000f10 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     f10:	b500      	push	{lr}
     f12:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     f14:	a904      	add	r1, sp, #16
     f16:	2002      	movs	r0, #2
     f18:	f005 fea7 	bl	6c6a <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f1c:	f89d 2010 	ldrb.w	r2, [sp, #16]
     f20:	2a01      	cmp	r2, #1
     f22:	d041      	beq.n	fa8 <swap_status_source+0x98>
     f24:	4b25      	ldr	r3, [pc, #148]	; (fbc <swap_status_source+0xac>)
     f26:	4926      	ldr	r1, [pc, #152]	; (fc0 <swap_status_source+0xb0>)
     f28:	2a03      	cmp	r2, #3
     f2a:	bf18      	it	ne
     f2c:	460b      	movne	r3, r1
     f2e:	f89d 2013 	ldrb.w	r2, [sp, #19]
     f32:	9202      	str	r2, [sp, #8]
     f34:	f89d 2012 	ldrb.w	r2, [sp, #18]
     f38:	9201      	str	r2, [sp, #4]
     f3a:	f89d 2011 	ldrb.w	r2, [sp, #17]
     f3e:	4821      	ldr	r0, [pc, #132]	; (fc4 <swap_status_source+0xb4>)
     f40:	9200      	str	r2, [sp, #0]
     f42:	2149      	movs	r1, #73	; 0x49
     f44:	4a20      	ldr	r2, [pc, #128]	; (fc8 <swap_status_source+0xb8>)
     f46:	f005 fb65 	bl	6614 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     f4a:	a906      	add	r1, sp, #24
     f4c:	2005      	movs	r0, #5
     f4e:	f005 fe8c 	bl	6c6a <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     f52:	f89d 2018 	ldrb.w	r2, [sp, #24]
     f56:	2a01      	cmp	r2, #1
     f58:	d028      	beq.n	fac <swap_status_source+0x9c>
     f5a:	4b18      	ldr	r3, [pc, #96]	; (fbc <swap_status_source+0xac>)
     f5c:	4918      	ldr	r1, [pc, #96]	; (fc0 <swap_status_source+0xb0>)
     f5e:	2a03      	cmp	r2, #3
     f60:	bf18      	it	ne
     f62:	460b      	movne	r3, r1
     f64:	f89d 201b 	ldrb.w	r2, [sp, #27]
     f68:	9202      	str	r2, [sp, #8]
     f6a:	f89d 201a 	ldrb.w	r2, [sp, #26]
     f6e:	9201      	str	r2, [sp, #4]
     f70:	f89d 2019 	ldrb.w	r2, [sp, #25]
     f74:	9200      	str	r2, [sp, #0]
     f76:	4813      	ldr	r0, [pc, #76]	; (fc4 <swap_status_source+0xb4>)
     f78:	4a14      	ldr	r2, [pc, #80]	; (fcc <swap_status_source+0xbc>)
     f7a:	2149      	movs	r1, #73	; 0x49
     f7c:	f005 fb4a 	bl	6614 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     f80:	f89d 3010 	ldrb.w	r3, [sp, #16]
     f84:	2b01      	cmp	r3, #1
     f86:	d113      	bne.n	fb0 <swap_status_source+0xa0>
     f88:	f89d 3012 	ldrb.w	r3, [sp, #18]
     f8c:	2b03      	cmp	r3, #3
     f8e:	d10f      	bne.n	fb0 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
     f90:	f89d 3018 	ldrb.w	r3, [sp, #24]
     f94:	2b01      	cmp	r3, #1
     f96:	d00b      	beq.n	fb0 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
     f98:	480d      	ldr	r0, [pc, #52]	; (fd0 <swap_status_source+0xc0>)
     f9a:	2149      	movs	r1, #73	; 0x49
     f9c:	f005 fb3a 	bl	6614 <z_log_minimal_printk>
        return source;
     fa0:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
     fa2:	b009      	add	sp, #36	; 0x24
     fa4:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     fa8:	4b0a      	ldr	r3, [pc, #40]	; (fd4 <swap_status_source+0xc4>)
     faa:	e7c0      	b.n	f2e <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     fac:	4b09      	ldr	r3, [pc, #36]	; (fd4 <swap_status_source+0xc4>)
     fae:	e7d9      	b.n	f64 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
     fb0:	4809      	ldr	r0, [pc, #36]	; (fd8 <swap_status_source+0xc8>)
     fb2:	2149      	movs	r1, #73	; 0x49
     fb4:	f005 fb2e 	bl	6614 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
     fb8:	2000      	movs	r0, #0
     fba:	e7f2      	b.n	fa2 <swap_status_source+0x92>
     fbc:	00007833 	.word	0x00007833
     fc0:	00007839 	.word	0x00007839
     fc4:	0000784b 	.word	0x0000784b
     fc8:	0000783d 	.word	0x0000783d
     fcc:	0000788c 	.word	0x0000788c
     fd0:	0000789c 	.word	0x0000789c
     fd4:	0000782e 	.word	0x0000782e
     fd8:	000078bb 	.word	0x000078bb

00000fdc <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
     fdc:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fde:	684b      	ldr	r3, [r1, #4]
{
     fe0:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fe2:	4a1e      	ldr	r2, [pc, #120]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
     fe4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
     fe8:	4293      	cmp	r3, r2
{
     fea:	b086      	sub	sp, #24
     fec:	4606      	mov	r6, r0
     fee:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     ff0:	d12f      	bne.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
        bs->op != BOOT_STATUS_OP_MOVE ||
     ff2:	680b      	ldr	r3, [r1, #0]
     ff4:	2b01      	cmp	r3, #1
     ff6:	d12c      	bne.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
     ff8:	a904      	add	r1, sp, #16
     ffa:	4620      	mov	r0, r4
     ffc:	f002 fad4 	bl	35a8 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1000:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1004:	2a01      	cmp	r2, #1
    1006:	d026      	beq.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    1008:	4b15      	ldr	r3, [pc, #84]	; (1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    100a:	4916      	ldr	r1, [pc, #88]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    100c:	2a03      	cmp	r2, #3
    100e:	bf18      	it	ne
    1010:	460b      	movne	r3, r1
    1012:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1016:	9202      	str	r2, [sp, #8]
    1018:	f89d 2012 	ldrb.w	r2, [sp, #18]
    101c:	9201      	str	r2, [sp, #4]
    101e:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1022:	9200      	str	r2, [sp, #0]
    1024:	4810      	ldr	r0, [pc, #64]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    1026:	4a11      	ldr	r2, [pc, #68]	; (106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
    1028:	2149      	movs	r1, #73	; 0x49
    102a:	f005 faf3 	bl	6614 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    102e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1032:	2b03      	cmp	r3, #3
    1034:	d10d      	bne.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1036:	4621      	mov	r1, r4
    1038:	4630      	mov	r0, r6
    103a:	f005 f862 	bl	6102 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    103e:	4620      	mov	r0, r4
    1040:	f005 fe0a 	bl	6c58 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1044:	68a9      	ldr	r1, [r5, #8]
    1046:	4620      	mov	r0, r4
    1048:	f004 ff80 	bl	5f4c <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    104c:	4620      	mov	r0, r4
    104e:	f002 fa9d 	bl	358c <boot_write_magic>
        assert(rc == 0);
    }
}
    1052:	b006      	add	sp, #24
    1054:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1056:	4b06      	ldr	r3, [pc, #24]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    1058:	e7db      	b.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
    105a:	bf00      	nop
    105c:	04000100 	.word	0x04000100
    1060:	00007833 	.word	0x00007833
    1064:	00007839 	.word	0x00007839
    1068:	0000784b 	.word	0x0000784b
    106c:	0000788c 	.word	0x0000788c
    1070:	0000782e 	.word	0x0000782e

00001074 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1078:	ed2d 8b02 	vpush	{d8}
    107c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    107e:	460c      	mov	r4, r1
    1080:	685e      	ldr	r6, [r3, #4]
    1082:	b08b      	sub	sp, #44	; 0x2c
    1084:	4605      	mov	r5, r0
    1086:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    1088:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    108a:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    108c:	429a      	cmp	r2, r3
    108e:	4608      	mov	r0, r1
    1090:	f101 0101 	add.w	r1, r1, #1
    1094:	d8f9      	bhi.n	108a <swap_run+0x16>
    1096:	4f78      	ldr	r7, [pc, #480]	; (1278 <swap_run+0x204>)
    1098:	6038      	str	r0, [r7, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    109a:	4620      	mov	r0, r4
    109c:	f004 fff0 	bl	6080 <boot_status_is_reset>
    10a0:	46bb      	mov	fp, r7
    10a2:	b1c8      	cbz	r0, 10d8 <swap_run+0x64>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    10a4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    10a6:	f004 ff2e 	bl	5f06 <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    10aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
        sz = 0;
    10ac:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    10ae:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    10b0:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    10b2:	4290      	cmp	r0, r2
    10b4:	d901      	bls.n	10ba <swap_run+0x46>
                break;
            }
            first_trailer_idx--;
    10b6:	3b01      	subs	r3, #1
            sz += sector_sz;
    10b8:	e7fa      	b.n	10b0 <swap_run+0x3c>
        }

        if (g_last_idx >= first_trailer_idx) {
    10ba:	f8db 2000 	ldr.w	r2, [fp]
    10be:	429a      	cmp	r2, r3
    10c0:	d30a      	bcc.n	10d8 <swap_run+0x64>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    10c2:	486e      	ldr	r0, [pc, #440]	; (127c <swap_run+0x208>)
    10c4:	2157      	movs	r1, #87	; 0x57
    10c6:	f005 faa5 	bl	6614 <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    10ca:	2301      	movs	r3, #1
    10cc:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    10ce:	b00b      	add	sp, #44	; 0x2c
    10d0:	ecbd 8b02 	vpop	{d8}
    10d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    10d8:	a908      	add	r1, sp, #32
    10da:	2002      	movs	r0, #2
    10dc:	f000 fc8a 	bl	19f4 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    10e0:	a909      	add	r1, sp, #36	; 0x24
    10e2:	2005      	movs	r0, #5
    10e4:	f000 fc86 	bl	19f4 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    10e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10ea:	4621      	mov	r1, r4
    10ec:	4628      	mov	r0, r5
    10ee:	f7ff ff75 	bl	fdc <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    10f2:	7963      	ldrb	r3, [r4, #5]
    10f4:	2b01      	cmp	r3, #1
    10f6:	d108      	bne.n	110a <swap_run+0x96>
        idx = g_last_idx;
    10f8:	f8db 7000 	ldr.w	r7, [fp]
    BOOT_STATUS_ASSERT(rc == 0);
    10fc:	f8df a180 	ldr.w	sl, [pc, #384]	; 1280 <swap_run+0x20c>
        while (idx > 0) {
    1100:	f8db 3000 	ldr.w	r3, [fp]
    1104:	b9a7      	cbnz	r7, 1130 <swap_run+0xbc>
        bs->idx = BOOT_STATUS_IDX_0;
    1106:	2301      	movs	r3, #1
    1108:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    110a:	2302      	movs	r3, #2
        BOOT_STATUS_ASSERT(rc == 0);
    110c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 1280 <swap_run+0x20c>
    bs->op = BOOT_STATUS_OP_SWAP;
    1110:	7163      	strb	r3, [r4, #5]
    idx = 1;
    1112:	2701      	movs	r7, #1
        bs->state = BOOT_STATUS_STATE_1;
    1114:	9305      	str	r3, [sp, #20]
    while (idx <= g_last_idx) {
    1116:	f8db 3000 	ldr.w	r3, [fp]
    111a:	f8dd 9020 	ldr.w	r9, [sp, #32]
    111e:	429f      	cmp	r7, r3
    1120:	d94d      	bls.n	11be <swap_run+0x14a>
    flash_area_close(fap_pri);
    1122:	4648      	mov	r0, r9
    1124:	f005 fa83 	bl	662e <flash_area_close>
    flash_area_close(fap_sec);
    1128:	9809      	ldr	r0, [sp, #36]	; 0x24
    112a:	f005 fa80 	bl	662e <flash_area_close>
    112e:	e7ce      	b.n	10ce <swap_run+0x5a>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1130:	6822      	ldr	r2, [r4, #0]
    1132:	3301      	adds	r3, #1
    1134:	1a9b      	subs	r3, r3, r2
    1136:	429f      	cmp	r7, r3
    1138:	d83f      	bhi.n	11ba <swap_run+0x146>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    113a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    113c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 */
uint8_t flash_area_erased_val(const struct flash_area *fap);

static inline uint32_t flash_sector_get_off(const struct flash_sector *fs)
{
	return fs->fs_off;
    1140:	6819      	ldr	r1, [r3, #0]
    1142:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1146:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    if (bs->idx == BOOT_STATUS_IDX_0) {
    114a:	2a01      	cmp	r2, #1
    114c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    1150:	eba3 0301 	sub.w	r3, r3, r1
    1154:	ee08 3a10 	vmov	s16, r3
    1158:	eba0 0901 	sub.w	r9, r0, r1
    115c:	d112      	bne.n	1184 <swap_run+0x110>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    115e:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1160:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    1162:	2a02      	cmp	r2, #2
    1164:	d00a      	beq.n	117c <swap_run+0x108>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    1166:	4641      	mov	r1, r8
    1168:	4628      	mov	r0, r5
    116a:	9303      	str	r3, [sp, #12]
    116c:	f004 ffc9 	bl	6102 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    1170:	4622      	mov	r2, r4
    1172:	4641      	mov	r1, r8
    1174:	4628      	mov	r0, r5
    1176:	f004 fffa 	bl	616e <swap_status_init>
    117a:	9b03      	ldr	r3, [sp, #12]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    117c:	4619      	mov	r1, r3
    117e:	4628      	mov	r0, r5
    1180:	f004 ffbf 	bl	6102 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    1184:	4632      	mov	r2, r6
    1186:	4649      	mov	r1, r9
    1188:	4640      	mov	r0, r8
    118a:	f004 ffb8 	bl	60fe <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    118e:	ee18 3a10 	vmov	r3, s16
    1192:	4642      	mov	r2, r8
    1194:	4641      	mov	r1, r8
    1196:	e9cd 9600 	strd	r9, r6, [sp]
    119a:	4628      	mov	r0, r5
    119c:	f7ff fc4e 	bl	a3c <boot_copy_region>
    rc = boot_write_status(state, bs);
    11a0:	4621      	mov	r1, r4
    11a2:	4628      	mov	r0, r5
    11a4:	f004 ff79 	bl	609a <boot_write_status>
    bs->idx++;
    11a8:	6823      	ldr	r3, [r4, #0]
    11aa:	3301      	adds	r3, #1
    11ac:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    11ae:	b120      	cbz	r0, 11ba <swap_run+0x146>
    11b0:	f8da 3000 	ldr.w	r3, [sl]
    11b4:	3301      	adds	r3, #1
    11b6:	f8ca 3000 	str.w	r3, [sl]
            idx--;
    11ba:	3f01      	subs	r7, #1
    11bc:	e7a0      	b.n	1100 <swap_run+0x8c>
        if (idx >= bs->idx) {
    11be:	6823      	ldr	r3, [r4, #0]
    11c0:	429f      	cmp	r7, r3
    11c2:	d356      	bcc.n	1272 <swap_run+0x1fe>
    11c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    11c6:	6d28      	ldr	r0, [r5, #80]	; 0x50
    11c8:	f851 3037 	ldr.w	r3, [r1, r7, lsl #3]
    11cc:	9304      	str	r3, [sp, #16]
    11ce:	00fa      	lsls	r2, r7, #3
    11d0:	3a08      	subs	r2, #8
    11d2:	680b      	ldr	r3, [r1, #0]
    11d4:	f850 c002 	ldr.w	ip, [r0, r2]
    11d8:	9303      	str	r3, [sp, #12]
    11da:	6803      	ldr	r3, [r0, #0]
    if (bs->state == BOOT_STATUS_STATE_0) {
    11dc:	7920      	ldrb	r0, [r4, #4]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11de:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    if (bs->state == BOOT_STATUS_STATE_0) {
    11e2:	2801      	cmp	r0, #1
    11e4:	ebac 0303 	sub.w	r3, ip, r3
    11e8:	d141      	bne.n	126e <swap_run+0x1fa>
    11ea:	5889      	ldr	r1, [r1, r2]
    11ec:	9307      	str	r3, [sp, #28]
    11ee:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    11f0:	4632      	mov	r2, r6
    11f2:	1ac9      	subs	r1, r1, r3
    11f4:	4648      	mov	r0, r9
    11f6:	9106      	str	r1, [sp, #24]
    11f8:	f004 ff81 	bl	60fe <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    11fc:	9906      	ldr	r1, [sp, #24]
    11fe:	9b07      	ldr	r3, [sp, #28]
    1200:	9100      	str	r1, [sp, #0]
    1202:	464a      	mov	r2, r9
    1204:	4651      	mov	r1, sl
    1206:	9601      	str	r6, [sp, #4]
    1208:	4628      	mov	r0, r5
    120a:	9306      	str	r3, [sp, #24]
    120c:	f7ff fc16 	bl	a3c <boot_copy_region>
        rc = boot_write_status(state, bs);
    1210:	4621      	mov	r1, r4
    1212:	4628      	mov	r0, r5
    1214:	f004 ff41 	bl	609a <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1218:	9b05      	ldr	r3, [sp, #20]
    121a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    121c:	9b06      	ldr	r3, [sp, #24]
    121e:	b120      	cbz	r0, 122a <swap_run+0x1b6>
    1220:	f8d8 2000 	ldr.w	r2, [r8]
    1224:	3201      	adds	r2, #1
    1226:	f8c8 2000 	str.w	r2, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    122a:	4619      	mov	r1, r3
    122c:	4632      	mov	r2, r6
    122e:	4650      	mov	r0, sl
    1230:	9306      	str	r3, [sp, #24]
    1232:	f004 ff64 	bl	60fe <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1236:	9b06      	ldr	r3, [sp, #24]
    1238:	9300      	str	r3, [sp, #0]
    123a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    123e:	4649      	mov	r1, r9
    1240:	1a9b      	subs	r3, r3, r2
    1242:	9601      	str	r6, [sp, #4]
    1244:	4652      	mov	r2, sl
    1246:	4628      	mov	r0, r5
    1248:	f7ff fbf8 	bl	a3c <boot_copy_region>
        rc = boot_write_status(state, bs);
    124c:	4621      	mov	r1, r4
    124e:	4628      	mov	r0, r5
    1250:	f004 ff23 	bl	609a <boot_write_status>
        bs->idx++;
    1254:	6823      	ldr	r3, [r4, #0]
    1256:	3301      	adds	r3, #1
    1258:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    125a:	f04f 0301 	mov.w	r3, #1
    125e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1260:	b138      	cbz	r0, 1272 <swap_run+0x1fe>
    1262:	f8d8 3000 	ldr.w	r3, [r8]
    1266:	3301      	adds	r3, #1
    1268:	f8c8 3000 	str.w	r3, [r8]
    126c:	e001      	b.n	1272 <swap_run+0x1fe>
    if (bs->state == BOOT_STATUS_STATE_1) {
    126e:	2802      	cmp	r0, #2
    1270:	d0db      	beq.n	122a <swap_run+0x1b6>
        idx++;
    1272:	3701      	adds	r7, #1
    1274:	e74f      	b.n	1116 <swap_run+0xa2>
    1276:	bf00      	nop
    1278:	20000004 	.word	0x20000004
    127c:	000078d2 	.word	0x000078d2
    1280:	20000e38 	.word	0x20000e38

00001284 <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    1284:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    1286:	4d09      	ldr	r5, [pc, #36]	; (12ac <cc310_init+0x28>)
    1288:	782b      	ldrb	r3, [r5, #0]
    128a:	b953      	cbnz	r3, 12a2 <cc310_init+0x1e>
    NRF_CRYPTOCELL->ENABLE=1;
    128c:	4c08      	ldr	r4, [pc, #32]	; (12b0 <cc310_init+0x2c>)
    128e:	2601      	movs	r6, #1
    1290:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        nrf_cc310_enable();
        if (nrf_cc310_bl_init() != 0) {
    1294:	f003 fd48 	bl	4d28 <nrf_cc310_bl_init>
    1298:	b928      	cbnz	r0, 12a6 <cc310_init+0x22>
            return -1;
        }
        initialized = true;
    129a:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    129c:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        nrf_cc310_disable();
    }

    return 0;
}
    12a0:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    12a2:	2000      	movs	r0, #0
    12a4:	e7fc      	b.n	12a0 <cc310_init+0x1c>
            return -1;
    12a6:	f04f 30ff 	mov.w	r0, #4294967295
    12aa:	e7f9      	b.n	12a0 <cc310_init+0x1c>
    12ac:	20000ffc 	.word	0x20000ffc
    12b0:	5002a000 	.word	0x5002a000

000012b4 <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    12b4:	b570      	push	{r4, r5, r6, lr}
    NRF_CRYPTOCELL->ENABLE=1;
    12b6:	4e0b      	ldr	r6, [pc, #44]	; (12e4 <cc310_ecdsa_verify_secp256r1+0x30>)
    12b8:	b0ae      	sub	sp, #184	; 0xb8
    12ba:	461d      	mov	r5, r3
    12bc:	e9cd 2102 	strd	r2, r1, [sp, #8]
    12c0:	4604      	mov	r4, r0
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    12c2:	f7ff ffdf 	bl	1284 <cc310_init>
    12c6:	2301      	movs	r3, #1
    12c8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    12cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    12d0:	4623      	mov	r3, r4
    12d2:	9500      	str	r5, [sp, #0]
    12d4:	a805      	add	r0, sp, #20
    12d6:	f005 fd72 	bl	6dbe <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    12da:	2300      	movs	r3, #0
    12dc:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    12e0:	b02e      	add	sp, #184	; 0xb8
    12e2:	bd70      	pop	{r4, r5, r6, pc}
    12e4:	5002a000 	.word	0x5002a000

000012e8 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12e8:	4b17      	ldr	r3, [pc, #92]	; (1348 <nrf_cleanup_peripheral+0x60>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    12ea:	4918      	ldr	r1, [pc, #96]	; (134c <nrf_cleanup_peripheral+0x64>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12ec:	2201      	movs	r2, #1
    12ee:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    12f0:	f04f 33ff 	mov.w	r3, #4294967295
    12f4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    12f8:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12fc:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    1300:	3104      	adds	r1, #4
    1302:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    1304:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    p_reg->INTENCLR = mask;
    1308:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    130c:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
    1310:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    1312:	4a0f      	ldr	r2, [pc, #60]	; (1350 <nrf_cleanup_peripheral+0x68>)
    1314:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1318:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    131c:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    1320:	2100      	movs	r1, #0
    1322:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1326:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    132a:	f502 3218 	add.w	r2, r2, #155648	; 0x26000
    132e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1332:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    }
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable_all(NRF_PPI_Type * p_reg)
{
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
    1336:	f5a2 4210 	sub.w	r2, r2, #36864	; 0x9000
    133a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    133e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1342:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1346:	4770      	bx	lr
    1348:	4000b004 	.word	0x4000b004
    134c:	4000b000 	.word	0x4000b000
    1350:	40024000 	.word	0x40024000

00001354 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1354:	680b      	ldr	r3, [r1, #0]
    1356:	3301      	adds	r3, #1
    1358:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    135a:	4b01      	ldr	r3, [pc, #4]	; (1360 <char_out+0xc>)
    135c:	681b      	ldr	r3, [r3, #0]
    135e:	4718      	bx	r3
    1360:	20000008 	.word	0x20000008

00001364 <__printk_hook_install>:
	_char_out = fn;
    1364:	4b01      	ldr	r3, [pc, #4]	; (136c <__printk_hook_install+0x8>)
    1366:	6018      	str	r0, [r3, #0]
}
    1368:	4770      	bx	lr
    136a:	bf00      	nop
    136c:	20000008 	.word	0x20000008

00001370 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1370:	b507      	push	{r0, r1, r2, lr}
    1372:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1374:	2100      	movs	r1, #0
{
    1376:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1378:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    137a:	4803      	ldr	r0, [pc, #12]	; (1388 <vprintk+0x18>)
    137c:	a901      	add	r1, sp, #4
    137e:	f000 f8ed 	bl	155c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1382:	b003      	add	sp, #12
    1384:	f85d fb04 	ldr.w	pc, [sp], #4
    1388:	00001355 	.word	0x00001355

0000138c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    138c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1390:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1394:	f019 0808 	ands.w	r8, r9, #8
{
    1398:	4604      	mov	r4, r0
    139a:	4693      	mov	fp, r2
	if (processing) {
    139c:	d00e      	beq.n	13bc <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    139e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13a0:	bf0c      	ite	eq
    13a2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13a6:	f049 0920 	orrne.w	r9, r9, #32
    13aa:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13ae:	f38b 8811 	msr	BASEPRI, fp
    13b2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    13b6:	b003      	add	sp, #12
    13b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    13bc:	f8df a198 	ldr.w	sl, [pc, #408]	; 1558 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13c0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    13c4:	2902      	cmp	r1, #2
    13c6:	d107      	bne.n	13d8 <process_event+0x4c>
			evt = process_recheck(mgr);
    13c8:	4620      	mov	r0, r4
    13ca:	f005 f876 	bl	64ba <process_recheck>
		if (evt == EVT_NOP) {
    13ce:	2800      	cmp	r0, #0
    13d0:	d0ed      	beq.n	13ae <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    13d2:	2801      	cmp	r0, #1
    13d4:	8b23      	ldrh	r3, [r4, #24]
    13d6:	d14d      	bne.n	1474 <process_event+0xe8>
			res = mgr->last_res;
    13d8:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13da:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    13dc:	2f00      	cmp	r7, #0
    13de:	da15      	bge.n	140c <process_event+0x80>
		*clients = mgr->clients;
    13e0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13e2:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    13e6:	e9c4 8800 	strd	r8, r8, [r4]
    13ea:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    13ee:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    13f0:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13f2:	8b21      	ldrh	r1, [r4, #24]
    13f4:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    13f8:	454a      	cmp	r2, r9
    13fa:	d002      	beq.n	1402 <process_event+0x76>
		if (do_monitors
    13fc:	68a3      	ldr	r3, [r4, #8]
    13fe:	2b00      	cmp	r3, #0
    1400:	d159      	bne.n	14b6 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1402:	b90d      	cbnz	r5, 1408 <process_event+0x7c>
		    || (transit != NULL)) {
    1404:	2e00      	cmp	r6, #0
    1406:	d071      	beq.n	14ec <process_event+0x160>
    1408:	2300      	movs	r3, #0
    140a:	e055      	b.n	14b8 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    140c:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1410:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1412:	2a01      	cmp	r2, #1
    1414:	d81f      	bhi.n	1456 <process_event+0xca>
		*clients = mgr->clients;
    1416:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    141a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    141c:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    141e:	b289      	uxth	r1, r1
	list->tail = NULL;
    1420:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1424:	d10c      	bne.n	1440 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1426:	2d00      	cmp	r5, #0
    1428:	462b      	mov	r3, r5
    142a:	bf38      	it	cc
    142c:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    142e:	b12b      	cbz	r3, 143c <process_event+0xb0>
				mgr->refs += 1U;
    1430:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1432:	681b      	ldr	r3, [r3, #0]
    1434:	3201      	adds	r2, #1
    1436:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1438:	2b00      	cmp	r3, #0
    143a:	d1f8      	bne.n	142e <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    143c:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1440:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1442:	4620      	mov	r0, r4
    1444:	f005 f839 	bl	64ba <process_recheck>
    1448:	2800      	cmp	r0, #0
    144a:	d0d1      	beq.n	13f0 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    144c:	8b23      	ldrh	r3, [r4, #24]
    144e:	f043 0320 	orr.w	r3, r3, #32
    1452:	8323      	strh	r3, [r4, #24]
    1454:	e7cc      	b.n	13f0 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1456:	2b04      	cmp	r3, #4
    1458:	d10a      	bne.n	1470 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    145a:	f021 0107 	bic.w	r1, r1, #7
    145e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1460:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1462:	4620      	mov	r0, r4
    1464:	f005 f829 	bl	64ba <process_recheck>
    1468:	b110      	cbz	r0, 1470 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    146a:	f041 0120 	orr.w	r1, r1, #32
    146e:	8321      	strh	r1, [r4, #24]
    1470:	2500      	movs	r5, #0
    1472:	e7bd      	b.n	13f0 <process_event+0x64>
		} else if (evt == EVT_START) {
    1474:	2803      	cmp	r0, #3
    1476:	d109      	bne.n	148c <process_event+0x100>
			transit = mgr->transitions->start;
    1478:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    147a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    147e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1480:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1484:	8323      	strh	r3, [r4, #24]
}
    1486:	2500      	movs	r5, #0
		res = 0;
    1488:	462f      	mov	r7, r5
    148a:	e7b2      	b.n	13f2 <process_event+0x66>
		} else if (evt == EVT_STOP) {
    148c:	2804      	cmp	r0, #4
    148e:	d106      	bne.n	149e <process_event+0x112>
			transit = mgr->transitions->stop;
    1490:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1492:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1496:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1498:	f043 0304 	orr.w	r3, r3, #4
    149c:	e7f2      	b.n	1484 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    149e:	2805      	cmp	r0, #5
    14a0:	d106      	bne.n	14b0 <process_event+0x124>
			transit = mgr->transitions->reset;
    14a2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    14a8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14aa:	f043 0305 	orr.w	r3, r3, #5
    14ae:	e7e9      	b.n	1484 <process_event+0xf8>
    14b0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    14b2:	462e      	mov	r6, r5
    14b4:	e7e8      	b.n	1488 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    14b6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14b8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14bc:	8321      	strh	r1, [r4, #24]
    14be:	f38b 8811 	msr	BASEPRI, fp
    14c2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    14c6:	bb03      	cbnz	r3, 150a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    14c8:	2d00      	cmp	r5, #0
    14ca:	d134      	bne.n	1536 <process_event+0x1aa>
			if (transit != NULL) {
    14cc:	b116      	cbz	r6, 14d4 <process_event+0x148>
				transit(mgr, transition_complete);
    14ce:	4651      	mov	r1, sl
    14d0:	4620      	mov	r0, r4
    14d2:	47b0      	blx	r6
	__asm__ volatile(
    14d4:	f04f 0320 	mov.w	r3, #32
    14d8:	f3ef 8b11 	mrs	fp, BASEPRI
    14dc:	f383 8812 	msr	BASEPRI_MAX, r3
    14e0:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    14e4:	8b23      	ldrh	r3, [r4, #24]
    14e6:	f023 0308 	bic.w	r3, r3, #8
    14ea:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    14ec:	8b23      	ldrh	r3, [r4, #24]
    14ee:	06da      	lsls	r2, r3, #27
    14f0:	d52a      	bpl.n	1548 <process_event+0x1bc>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    14f2:	f023 0310 	bic.w	r3, r3, #16
    14f6:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    14f8:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    14fa:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    14fe:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1502:	2900      	cmp	r1, #0
    1504:	f47f af5e 	bne.w	13c4 <process_event+0x38>
out:
    1508:	e751      	b.n	13ae <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    150a:	68a1      	ldr	r1, [r4, #8]
    150c:	2900      	cmp	r1, #0
    150e:	d0db      	beq.n	14c8 <process_event+0x13c>
	return node->next;
    1510:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1512:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1516:	9201      	str	r2, [sp, #4]
    1518:	2b00      	cmp	r3, #0
    151a:	bf38      	it	cc
    151c:	2300      	movcc	r3, #0
    151e:	4699      	mov	r9, r3
    1520:	4620      	mov	r0, r4
    1522:	463b      	mov	r3, r7
    1524:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1526:	9a01      	ldr	r2, [sp, #4]
    1528:	f1b9 0f00 	cmp.w	r9, #0
    152c:	d0cc      	beq.n	14c8 <process_event+0x13c>
    152e:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1532:	4649      	mov	r1, r9
    1534:	e7ed      	b.n	1512 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1536:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1538:	463b      	mov	r3, r7
    153a:	4620      	mov	r0, r4
    153c:	9201      	str	r2, [sp, #4]
    153e:	682d      	ldr	r5, [r5, #0]
    1540:	f004 ffd7 	bl	64f2 <notify_one>
	while (!sys_slist_is_empty(list)) {
    1544:	9a01      	ldr	r2, [sp, #4]
    1546:	e7bf      	b.n	14c8 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1548:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    154c:	bf1e      	ittt	ne
    154e:	f023 0320 	bicne.w	r3, r3, #32
    1552:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1554:	2102      	movne	r1, #2
    1556:	e7d0      	b.n	14fa <process_event+0x16e>
    1558:	0000651f 	.word	0x0000651f

0000155c <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1560:	b08f      	sub	sp, #60	; 0x3c
    1562:	461f      	mov	r7, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1564:	1e53      	subs	r3, r2, #1
{
    1566:	9000      	str	r0, [sp, #0]
    1568:	468b      	mov	fp, r1
	fmt--;
    156a:	9301      	str	r3, [sp, #4]
	size_t count = 0;
    156c:	f04f 0a00 	mov.w	sl, #0

start:
	while (*++fmt != '%') {
    1570:	9b01      	ldr	r3, [sp, #4]
    1572:	7858      	ldrb	r0, [r3, #1]
    1574:	2825      	cmp	r0, #37	; 0x25
    1576:	f103 0401 	add.w	r4, r3, #1
    157a:	d122      	bne.n	15c2 <cbvprintf+0x66>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    157c:	f04f 0c00 	mov.w	ip, #0

	for (fmt++ ; ; fmt++) {
    1580:	4618      	mov	r0, r3
	precision = -1;
    1582:	f04f 36ff 	mov.w	r6, #4294967295
	for (fmt++ ; ; fmt++) {
    1586:	3002      	adds	r0, #2
	length_mod = 0;
    1588:	4661      	mov	r1, ip
	padding_mode = 0;
    158a:	f8cd c008 	str.w	ip, [sp, #8]
	min_width = -1;
    158e:	4634      	mov	r4, r6
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    1590:	f04f 0e0a 	mov.w	lr, #10
		switch (*fmt) {
    1594:	7802      	ldrb	r2, [r0, #0]
    1596:	9001      	str	r0, [sp, #4]
    1598:	2a39      	cmp	r2, #57	; 0x39
    159a:	f100 0001 	add.w	r0, r0, #1
    159e:	d857      	bhi.n	1650 <cbvprintf+0xf4>
    15a0:	2a1f      	cmp	r2, #31
    15a2:	d818      	bhi.n	15d6 <cbvprintf+0x7a>
    15a4:	2a00      	cmp	r2, #0
    15a6:	f000 81fe 	beq.w	19a6 <cbvprintf+0x44a>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    15aa:	9b00      	ldr	r3, [sp, #0]
    15ac:	4659      	mov	r1, fp
    15ae:	2025      	movs	r0, #37	; 0x25
    15b0:	4798      	blx	r3
			OUTC(*fmt);
    15b2:	9b01      	ldr	r3, [sp, #4]
    15b4:	4659      	mov	r1, fp
    15b6:	7818      	ldrb	r0, [r3, #0]
    15b8:	9b00      	ldr	r3, [sp, #0]
    15ba:	4798      	blx	r3
    15bc:	f10a 0a02 	add.w	sl, sl, #2
			goto start;
    15c0:	e7d6      	b.n	1570 <cbvprintf+0x14>
		if (*fmt == '\0') {
    15c2:	2800      	cmp	r0, #0
    15c4:	f000 81ef 	beq.w	19a6 <cbvprintf+0x44a>
		OUTC(*fmt);
    15c8:	9b00      	ldr	r3, [sp, #0]
    15ca:	4659      	mov	r1, fp
    15cc:	4798      	blx	r3
    15ce:	f10a 0a01 	add.w	sl, sl, #1
	while (*++fmt != '%') {
    15d2:	9401      	str	r4, [sp, #4]
    15d4:	e7cc      	b.n	1570 <cbvprintf+0x14>
    15d6:	f1a2 0320 	sub.w	r3, r2, #32
    15da:	2b19      	cmp	r3, #25
    15dc:	d8e5      	bhi.n	15aa <cbvprintf+0x4e>
    15de:	a501      	add	r5, pc, #4	; (adr r5, 15e4 <cbvprintf+0x88>)
    15e0:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    15e4:	0000164d 	.word	0x0000164d
    15e8:	000015ab 	.word	0x000015ab
    15ec:	000015ab 	.word	0x000015ab
    15f0:	0000164d 	.word	0x0000164d
    15f4:	000015ab 	.word	0x000015ab
    15f8:	000016cd 	.word	0x000016cd
    15fc:	000015ab 	.word	0x000015ab
    1600:	000015ab 	.word	0x000015ab
    1604:	000015ab 	.word	0x000015ab
    1608:	000015ab 	.word	0x000015ab
    160c:	0000170f 	.word	0x0000170f
    1610:	0000164d 	.word	0x0000164d
    1614:	000015ab 	.word	0x000015ab
    1618:	00001723 	.word	0x00001723
    161c:	000016db 	.word	0x000016db
    1620:	000015ab 	.word	0x000015ab
    1624:	000016e7 	.word	0x000016e7
    1628:	00001703 	.word	0x00001703
    162c:	00001703 	.word	0x00001703
    1630:	00001703 	.word	0x00001703
    1634:	00001703 	.word	0x00001703
    1638:	00001703 	.word	0x00001703
    163c:	00001703 	.word	0x00001703
    1640:	00001703 	.word	0x00001703
    1644:	00001703 	.word	0x00001703
    1648:	00001703 	.word	0x00001703
		switch (*fmt) {
    164c:	4694      	mov	ip, r2
    164e:	e7a1      	b.n	1594 <cbvprintf+0x38>
    1650:	2a58      	cmp	r2, #88	; 0x58
    1652:	f000 8140 	beq.w	18d6 <cbvprintf+0x37a>
    1656:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    165a:	b2dd      	uxtb	r5, r3
    165c:	2d17      	cmp	r5, #23
    165e:	d8a4      	bhi.n	15aa <cbvprintf+0x4e>
    1660:	2b17      	cmp	r3, #23
    1662:	d8a2      	bhi.n	15aa <cbvprintf+0x4e>
    1664:	a501      	add	r5, pc, #4	; (adr r5, 166c <cbvprintf+0x110>)
    1666:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    166a:	bf00      	nop
    166c:	00001931 	.word	0x00001931
    1670:	00001749 	.word	0x00001749
    1674:	000015ab 	.word	0x000015ab
    1678:	000015ab 	.word	0x000015ab
    167c:	000015ab 	.word	0x000015ab
    1680:	00001729 	.word	0x00001729
    1684:	00001749 	.word	0x00001749
    1688:	000015ab 	.word	0x000015ab
    168c:	000015ab 	.word	0x000015ab
    1690:	00001729 	.word	0x00001729
    1694:	000015ab 	.word	0x000015ab
    1698:	000015ab 	.word	0x000015ab
    169c:	000015ab 	.word	0x000015ab
    16a0:	00001881 	.word	0x00001881
    16a4:	000015ab 	.word	0x000015ab
    16a8:	000015ab 	.word	0x000015ab
    16ac:	00001913 	.word	0x00001913
    16b0:	000015ab 	.word	0x000015ab
    16b4:	00001749 	.word	0x00001749
    16b8:	000015ab 	.word	0x000015ab
    16bc:	000015ab 	.word	0x000015ab
    16c0:	00001881 	.word	0x00001881
    16c4:	000015ab 	.word	0x000015ab
    16c8:	00001729 	.word	0x00001729
			OUTC('%');
    16cc:	9b00      	ldr	r3, [sp, #0]
    16ce:	4659      	mov	r1, fp
    16d0:	2025      	movs	r0, #37	; 0x25
    16d2:	4798      	blx	r3
    16d4:	f10a 0a01 	add.w	sl, sl, #1
			goto start;
    16d8:	e74a      	b.n	1570 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    16da:	9b02      	ldr	r3, [sp, #8]
    16dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    16e0:	9302      	str	r3, [sp, #8]
			precision = 0;
    16e2:	2600      	movs	r6, #0
			continue;
    16e4:	e756      	b.n	1594 <cbvprintf+0x38>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    16e6:	2c00      	cmp	r4, #0
    16e8:	da0b      	bge.n	1702 <cbvprintf+0x1a6>
    16ea:	2e00      	cmp	r6, #0
    16ec:	da0b      	bge.n	1706 <cbvprintf+0x1aa>
    16ee:	9b02      	ldr	r3, [sp, #8]
    16f0:	2b00      	cmp	r3, #0
    16f2:	f000 8154 	beq.w	199e <cbvprintf+0x442>
				min_width = 10 * min_width + *fmt - '0';
    16f6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    16fa:	fb0e 2404 	mla	r4, lr, r4, r2
    16fe:	3c30      	subs	r4, #48	; 0x30
    1700:	e748      	b.n	1594 <cbvprintf+0x38>
			if (precision >= 0) {
    1702:	2e00      	cmp	r6, #0
    1704:	dbf7      	blt.n	16f6 <cbvprintf+0x19a>
				precision = 10 * precision + *fmt - '0';
    1706:	fb0e 2606 	mla	r6, lr, r6, r2
    170a:	3e30      	subs	r6, #48	; 0x30
    170c:	e742      	b.n	1594 <cbvprintf+0x38>
			if (precision >= 0) {
    170e:	2e00      	cmp	r6, #0
    1710:	f857 3b04 	ldr.w	r3, [r7], #4
    1714:	db01      	blt.n	171a <cbvprintf+0x1be>
				precision = va_arg(ap, int);
    1716:	461e      	mov	r6, r3
    1718:	e73c      	b.n	1594 <cbvprintf+0x38>
				if (min_width < 0) {
    171a:	1e1c      	subs	r4, r3, #0
    171c:	f6bf af3a 	bge.w	1594 <cbvprintf+0x38>
					min_width = -min_width;
    1720:	4264      	negs	r4, r4
		switch (*fmt) {
    1722:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    1724:	9302      	str	r3, [sp, #8]
    1726:	e735      	b.n	1594 <cbvprintf+0x38>
			if (*fmt == 'h' && length_mod == 'h') {
    1728:	2a68      	cmp	r2, #104	; 0x68
    172a:	d103      	bne.n	1734 <cbvprintf+0x1d8>
    172c:	2968      	cmp	r1, #104	; 0x68
    172e:	d106      	bne.n	173e <cbvprintf+0x1e2>
				length_mod = 'H';
    1730:	2148      	movs	r1, #72	; 0x48
    1732:	e72f      	b.n	1594 <cbvprintf+0x38>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1734:	2a6c      	cmp	r2, #108	; 0x6c
    1736:	d102      	bne.n	173e <cbvprintf+0x1e2>
    1738:	296c      	cmp	r1, #108	; 0x6c
    173a:	f000 8132 	beq.w	19a2 <cbvprintf+0x446>
			} else if (length_mod == '\0') {
    173e:	2900      	cmp	r1, #0
    1740:	f47f af33 	bne.w	15aa <cbvprintf+0x4e>
    1744:	4611      	mov	r1, r2
		switch (*fmt) {
    1746:	e725      	b.n	1594 <cbvprintf+0x38>
			if (length_mod == 'z') {
    1748:	297a      	cmp	r1, #122	; 0x7a
    174a:	d10f      	bne.n	176c <cbvprintf+0x210>
				d = va_arg(ap, unsigned int);
    174c:	683b      	ldr	r3, [r7, #0]
			} else if (*fmt == 'u') {
    174e:	2a75      	cmp	r2, #117	; 0x75
    1750:	f107 0504 	add.w	r5, r7, #4
				d = va_arg(ap, unsigned int);
    1754:	4698      	mov	r8, r3
			} else if (*fmt == 'u') {
    1756:	f040 8088 	bne.w	186a <cbvprintf+0x30e>
				d = va_arg(ap, unsigned int);
    175a:	f04f 0900 	mov.w	r9, #0
			} else if (special == ' ') {
    175e:	f1bc 0f20 	cmp.w	ip, #32
    1762:	f040 8085 	bne.w	1870 <cbvprintf+0x314>
				prefix = " ";
    1766:	4f92      	ldr	r7, [pc, #584]	; (19b0 <cbvprintf+0x454>)
				min_width--;
    1768:	3c01      	subs	r4, #1
    176a:	e015      	b.n	1798 <cbvprintf+0x23c>
			} else if (length_mod == 'l') {
    176c:	296c      	cmp	r1, #108	; 0x6c
    176e:	d0ed      	beq.n	174c <cbvprintf+0x1f0>
			} else if (length_mod == 'L') {
    1770:	294c      	cmp	r1, #76	; 0x4c
    1772:	d1eb      	bne.n	174c <cbvprintf+0x1f0>
				if (*fmt == 'u') {
    1774:	1dfd      	adds	r5, r7, #7
    1776:	f025 0507 	bic.w	r5, r5, #7
    177a:	2a75      	cmp	r2, #117	; 0x75
    177c:	e8f5 8902 	ldrd	r8, r9, [r5], #8
    1780:	d0ed      	beq.n	175e <cbvprintf+0x202>
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1782:	f1b8 0f00 	cmp.w	r8, #0
    1786:	f179 0300 	sbcs.w	r3, r9, #0
    178a:	dae8      	bge.n	175e <cbvprintf+0x202>
				d = -d;
    178c:	f1d8 0800 	rsbs	r8, r8, #0
				prefix = "-";
    1790:	4f88      	ldr	r7, [pc, #544]	; (19b4 <cbvprintf+0x458>)
				d = -d;
    1792:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
				min_width--;
    1796:	3c01      	subs	r4, #1
	int i = 0;
    1798:	ab0d      	add	r3, sp, #52	; 0x34
    179a:	9305      	str	r3, [sp, #20]
    179c:	2300      	movs	r3, #0
    179e:	9303      	str	r3, [sp, #12]
		buftop[--i] = c + '0';
    17a0:	9b03      	ldr	r3, [sp, #12]
    17a2:	9304      	str	r3, [sp, #16]
    17a4:	3b01      	subs	r3, #1
    17a6:	9303      	str	r3, [sp, #12]
		unsigned int c = num % base;
    17a8:	4640      	mov	r0, r8
    17aa:	4649      	mov	r1, r9
    17ac:	220a      	movs	r2, #10
    17ae:	2300      	movs	r3, #0
    17b0:	f7fe fca6 	bl	100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    17b4:	9b05      	ldr	r3, [sp, #20]
    17b6:	3230      	adds	r2, #48	; 0x30
    17b8:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
    17bc:	4640      	mov	r0, r8
		buftop[--i] = c + '0';
    17be:	9305      	str	r3, [sp, #20]
		num /= base;
    17c0:	220a      	movs	r2, #10
    17c2:	2300      	movs	r3, #0
    17c4:	4649      	mov	r1, r9
    17c6:	e9cd 8906 	strd	r8, r9, [sp, #24]
    17ca:	f7fe fc99 	bl	100 <__aeabi_uldivmod>
	} while (num);
    17ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    17d2:	2b00      	cmp	r3, #0
    17d4:	bf08      	it	eq
    17d6:	2a0a      	cmpeq	r2, #10
		num /= base;
    17d8:	4680      	mov	r8, r0
    17da:	4689      	mov	r9, r1
	} while (num);
    17dc:	d2e0      	bcs.n	17a0 <cbvprintf+0x244>
	return -i;
    17de:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    17e0:	aa0e      	add	r2, sp, #56	; 0x38
	return -i;
    17e2:	f1c3 0901 	rsb	r9, r3, #1
			data = buf + sizeof(buf) - data_len;
    17e6:	eb02 0803 	add.w	r8, r2, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    17ea:	2e00      	cmp	r6, #0
			data = buf + sizeof(buf) - data_len;
    17ec:	f1a8 0804 	sub.w	r8, r8, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    17f0:	da04      	bge.n	17fc <cbvprintf+0x2a0>
    17f2:	9b02      	ldr	r3, [sp, #8]
    17f4:	f013 0f01 	tst.w	r3, #1
    17f8:	bf18      	it	ne
    17fa:	4626      	movne	r6, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    17fc:	eba6 0309 	sub.w	r3, r6, r9
		if (precision > 0) {
    1800:	2b00      	cmp	r3, #0
		precision -= data_len;
    1802:	9303      	str	r3, [sp, #12]
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1804:	9b02      	ldr	r3, [sp, #8]
		min_width -= data_len;
    1806:	bfd4      	ite	le
    1808:	eba4 0409 	suble.w	r4, r4, r9
			min_width -= precision;
    180c:	1ba4      	subgt	r4, r4, r6
		if (!(padding_mode & PAD_TAIL)) {
    180e:	079a      	lsls	r2, r3, #30
    1810:	f140 80af 	bpl.w	1972 <cbvprintf+0x416>
    1814:	ebaa 0607 	sub.w	r6, sl, r7
    1818:	eb06 0a07 	add.w	sl, r6, r7
			while (--min_width >= 0) {
				OUTC(' ');
			}
		}
		while (*prefix) {
    181c:	f817 0b01 	ldrb.w	r0, [r7], #1
    1820:	2800      	cmp	r0, #0
    1822:	f040 80a8 	bne.w	1976 <cbvprintf+0x41a>
		precision -= data_len;
    1826:	9e03      	ldr	r6, [sp, #12]
			OUTC(*prefix++);
		}
		while (--precision >= 0) {
    1828:	3e01      	subs	r6, #1
    182a:	f140 80a8 	bpl.w	197e <cbvprintf+0x422>
    182e:	9b03      	ldr	r3, [sp, #12]
    1830:	1e5a      	subs	r2, r3, #1
    1832:	3201      	adds	r2, #1
    1834:	bfac      	ite	ge
    1836:	461f      	movge	r7, r3
    1838:	2700      	movlt	r7, #0
    183a:	464e      	mov	r6, r9
			OUTC('0');
		}
		while (--data_len >= 0) {
    183c:	3e01      	subs	r6, #1
    183e:	f140 80a3 	bpl.w	1988 <cbvprintf+0x42c>
    1842:	f109 32ff 	add.w	r2, r9, #4294967295
    1846:	3201      	adds	r2, #1
    1848:	bfac      	ite	ge
    184a:	464b      	movge	r3, r9
    184c:	2300      	movlt	r3, #0
    184e:	eb03 0907 	add.w	r9, r3, r7
    1852:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1854:	3e01      	subs	r6, #1
    1856:	f140 809d 	bpl.w	1994 <cbvprintf+0x438>
    185a:	1e63      	subs	r3, r4, #1
    185c:	3301      	adds	r3, #1
    185e:	bfb8      	it	lt
    1860:	2400      	movlt	r4, #0
    1862:	44a1      	add	r9, r4
    1864:	44ca      	add	sl, r9
    1866:	462f      	mov	r7, r5
    1868:	e682      	b.n	1570 <cbvprintf+0x14>
				d = va_arg(ap, int);
    186a:	ea4f 79e3 	mov.w	r9, r3, asr #31
    186e:	e788      	b.n	1782 <cbvprintf+0x226>
			} else if (special == '+') {
    1870:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    1874:	bf0a      	itet	eq
    1876:	4f50      	ldreq	r7, [pc, #320]	; (19b8 <cbvprintf+0x45c>)
	prefix = "";
    1878:	4f50      	ldrne	r7, [pc, #320]	; (19bc <cbvprintf+0x460>)
				min_width--;
    187a:	f104 34ff 	addeq.w	r4, r4, #4294967295
    187e:	e78b      	b.n	1798 <cbvprintf+0x23c>
			if (*fmt == 'p') {
    1880:	2a70      	cmp	r2, #112	; 0x70
    1882:	d128      	bne.n	18d6 <cbvprintf+0x37a>
				x = (uintptr_t)va_arg(ap, void *);
    1884:	463d      	mov	r5, r7
    1886:	f855 0b04 	ldr.w	r0, [r5], #4
				if (x == (uint_value_type)0) {
    188a:	2800      	cmp	r0, #0
    188c:	d05a      	beq.n	1944 <cbvprintf+0x3e8>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    188e:	4f4c      	ldr	r7, [pc, #304]	; (19c0 <cbvprintf+0x464>)
				x = (uintptr_t)va_arg(ap, void *);
    1890:	2100      	movs	r1, #0
				min_width -= 2;
    1892:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1894:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1898:	f1a2 0939 	sub.w	r9, r2, #57	; 0x39
	int i = 0;
    189c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    18a0:	f04f 0800 	mov.w	r8, #0
		unsigned int c = num % base;
    18a4:	f000 030f 	and.w	r3, r0, #15
		if (c >= 10) {
    18a8:	2b09      	cmp	r3, #9
			c += alpha;
    18aa:	bf88      	it	hi
    18ac:	444b      	addhi	r3, r9
		buftop[--i] = c + '0';
    18ae:	3330      	adds	r3, #48	; 0x30
	} while (num);
    18b0:	2900      	cmp	r1, #0
		buftop[--i] = c + '0';
    18b2:	f80e 3901 	strb.w	r3, [lr], #-1
	} while (num);
    18b6:	bf08      	it	eq
    18b8:	2810      	cmpeq	r0, #16
		num /= base;
    18ba:	ea4f 1310 	mov.w	r3, r0, lsr #4
		buftop[--i] = c + '0';
    18be:	f108 3cff 	add.w	ip, r8, #4294967295
		num /= base;
    18c2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    18c6:	ea4f 1211 	mov.w	r2, r1, lsr #4
	} while (num);
    18ca:	d21e      	bcs.n	190a <cbvprintf+0x3ae>
			data = buf + sizeof(buf) - data_len;
    18cc:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    18ce:	f1c8 0901 	rsb	r9, r8, #1
			data = buf + sizeof(buf) - data_len;
    18d2:	4498      	add	r8, r3
    18d4:	e789      	b.n	17ea <cbvprintf+0x28e>
			} else if (length_mod == 'l') {
    18d6:	296c      	cmp	r1, #108	; 0x6c
    18d8:	d104      	bne.n	18e4 <cbvprintf+0x388>
				x = va_arg(ap, unsigned int);
    18da:	463d      	mov	r5, r7
    18dc:	2100      	movs	r1, #0
    18de:	f855 0b04 	ldr.w	r0, [r5], #4
    18e2:	e006      	b.n	18f2 <cbvprintf+0x396>
			} else if (length_mod == 'L') {
    18e4:	294c      	cmp	r1, #76	; 0x4c
    18e6:	d1f8      	bne.n	18da <cbvprintf+0x37e>
				unsigned long long llx =
    18e8:	1dfd      	adds	r5, r7, #7
    18ea:	f025 0507 	bic.w	r5, r5, #7
    18ee:	e8f5 0102 	ldrd	r0, r1, [r5], #8
			if (special == '#') {
    18f2:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    18f6:	d106      	bne.n	1906 <cbvprintf+0x3aa>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    18f8:	4b31      	ldr	r3, [pc, #196]	; (19c0 <cbvprintf+0x464>)
    18fa:	4f32      	ldr	r7, [pc, #200]	; (19c4 <cbvprintf+0x468>)
    18fc:	f012 0f20 	tst.w	r2, #32
    1900:	bf18      	it	ne
    1902:	461f      	movne	r7, r3
    1904:	e7c5      	b.n	1892 <cbvprintf+0x336>
	prefix = "";
    1906:	4f2d      	ldr	r7, [pc, #180]	; (19bc <cbvprintf+0x460>)
    1908:	e7c4      	b.n	1894 <cbvprintf+0x338>
		buftop[--i] = c + '0';
    190a:	46e0      	mov	r8, ip
		num /= base;
    190c:	4618      	mov	r0, r3
    190e:	4611      	mov	r1, r2
    1910:	e7c8      	b.n	18a4 <cbvprintf+0x348>
			data = va_arg(ap, char *);
    1912:	463d      	mov	r5, r7
    1914:	f855 8b04 	ldr.w	r8, [r5], #4
			data_len = strlen(data);
    1918:	4640      	mov	r0, r8
    191a:	f004 ff46 	bl	67aa <strlen>
			if (precision >= 0 && data_len > precision) {
    191e:	2e00      	cmp	r6, #0
			data_len = strlen(data);
    1920:	4681      	mov	r9, r0
			if (precision >= 0 && data_len > precision) {
    1922:	db02      	blt.n	192a <cbvprintf+0x3ce>
    1924:	42b0      	cmp	r0, r6
    1926:	bfa8      	it	ge
    1928:	46b1      	movge	r9, r6
    192a:	4f24      	ldr	r7, [pc, #144]	; (19bc <cbvprintf+0x460>)
    192c:	2600      	movs	r6, #0
    192e:	e765      	b.n	17fc <cbvprintf+0x2a0>
			int c = va_arg(ap, int);
    1930:	463d      	mov	r5, r7
			data_len = 1;
    1932:	f04f 0901 	mov.w	r9, #1
			buf[0] = c;
    1936:	f855 3b04 	ldr.w	r3, [r5], #4
    193a:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    193e:	f10d 0820 	add.w	r8, sp, #32
    1942:	e7f2      	b.n	192a <cbvprintf+0x3ce>
					data = "(nil)";
    1944:	f8df 8080 	ldr.w	r8, [pc, #128]	; 19c8 <cbvprintf+0x46c>
					data_len = 5;
    1948:	f04f 0905 	mov.w	r9, #5
    194c:	e7ed      	b.n	192a <cbvprintf+0x3ce>
				OUTC(' ');
    194e:	9b00      	ldr	r3, [sp, #0]
    1950:	4659      	mov	r1, fp
    1952:	2020      	movs	r0, #32
    1954:	4798      	blx	r3
			while (--min_width >= 0) {
    1956:	3e01      	subs	r6, #1
    1958:	d5f9      	bpl.n	194e <cbvprintf+0x3f2>
    195a:	1e62      	subs	r2, r4, #1
    195c:	1c53      	adds	r3, r2, #1
    195e:	bfac      	ite	ge
    1960:	4621      	movge	r1, r4
    1962:	2100      	movlt	r1, #0
    1964:	f1c4 0400 	rsb	r4, r4, #0
    1968:	bfb8      	it	lt
    196a:	2400      	movlt	r4, #0
    196c:	448a      	add	sl, r1
    196e:	4414      	add	r4, r2
    1970:	e750      	b.n	1814 <cbvprintf+0x2b8>
    1972:	4626      	mov	r6, r4
    1974:	e7ef      	b.n	1956 <cbvprintf+0x3fa>
			OUTC(*prefix++);
    1976:	9b00      	ldr	r3, [sp, #0]
    1978:	4659      	mov	r1, fp
    197a:	4798      	blx	r3
    197c:	e74c      	b.n	1818 <cbvprintf+0x2bc>
			OUTC('0');
    197e:	9b00      	ldr	r3, [sp, #0]
    1980:	4659      	mov	r1, fp
    1982:	2030      	movs	r0, #48	; 0x30
    1984:	4798      	blx	r3
    1986:	e74f      	b.n	1828 <cbvprintf+0x2cc>
			OUTC(*data++);
    1988:	f818 0b01 	ldrb.w	r0, [r8], #1
    198c:	9b00      	ldr	r3, [sp, #0]
    198e:	4659      	mov	r1, fp
    1990:	4798      	blx	r3
    1992:	e753      	b.n	183c <cbvprintf+0x2e0>
			OUTC(' ');
    1994:	9b00      	ldr	r3, [sp, #0]
    1996:	4659      	mov	r1, fp
    1998:	2020      	movs	r0, #32
    199a:	4798      	blx	r3
    199c:	e75a      	b.n	1854 <cbvprintf+0x2f8>
				padding_mode = PAD_ZERO;
    199e:	2301      	movs	r3, #1
    19a0:	e6c0      	b.n	1724 <cbvprintf+0x1c8>
				length_mod = 'L';
    19a2:	214c      	movs	r1, #76	; 0x4c
    19a4:	e5f6      	b.n	1594 <cbvprintf+0x38>
		}

		goto start;
	}
}
    19a6:	4650      	mov	r0, sl
    19a8:	b00f      	add	sp, #60	; 0x3c
    19aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19ae:	bf00      	nop
    19b0:	00007d01 	.word	0x00007d01
    19b4:	0000795c 	.word	0x0000795c
    19b8:	0000795e 	.word	0x0000795e
    19bc:	0000822c 	.word	0x0000822c
    19c0:	00007960 	.word	0x00007960
    19c4:	00007963 	.word	0x00007963
    19c8:	00007966 	.word	0x00007966

000019cc <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    19cc:	b508      	push	{r3, lr}
    19ce:	f04f 0220 	mov.w	r2, #32
    19d2:	f3ef 8311 	mrs	r3, BASEPRI
    19d6:	f382 8812 	msr	BASEPRI_MAX, r2
    19da:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    19de:	f000 fc9b 	bl	2318 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    19e2:	4803      	ldr	r0, [pc, #12]	; (19f0 <sys_reboot+0x24>)
    19e4:	f004 fd5c 	bl	64a0 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    19e8:	f000 f862 	bl	1ab0 <arch_cpu_idle>
    19ec:	e7fc      	b.n	19e8 <sys_reboot+0x1c>
    19ee:	bf00      	nop
    19f0:	0000796c 	.word	0x0000796c

000019f4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    19f4:	4b0c      	ldr	r3, [pc, #48]	; (1a28 <flash_area_open+0x34>)
    19f6:	681b      	ldr	r3, [r3, #0]
{
    19f8:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    19fa:	b173      	cbz	r3, 1a1a <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    19fc:	4a0b      	ldr	r2, [pc, #44]	; (1a2c <flash_area_open+0x38>)
    19fe:	6815      	ldr	r5, [r2, #0]
    1a00:	2200      	movs	r2, #0
    1a02:	42aa      	cmp	r2, r5
    1a04:	db02      	blt.n	1a0c <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1a06:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    1a0a:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1a0c:	461c      	mov	r4, r3
    1a0e:	f813 6b10 	ldrb.w	r6, [r3], #16
    1a12:	4286      	cmp	r6, r0
    1a14:	d004      	beq.n	1a20 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    1a16:	3201      	adds	r2, #1
    1a18:	e7f3      	b.n	1a02 <flash_area_open+0xe>
		return -EACCES;
    1a1a:	f06f 000c 	mvn.w	r0, #12
    1a1e:	e7f4      	b.n	1a0a <flash_area_open+0x16>
	*fap = area;
    1a20:	600c      	str	r4, [r1, #0]
	return 0;
    1a22:	2000      	movs	r0, #0
    1a24:	e7f1      	b.n	1a0a <flash_area_open+0x16>
    1a26:	bf00      	nop
    1a28:	2000000c 	.word	0x2000000c
    1a2c:	00007178 	.word	0x00007178

00001a30 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1a30:	b570      	push	{r4, r5, r6, lr}
    1a32:	b088      	sub	sp, #32
    1a34:	4605      	mov	r5, r0
    1a36:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1a38:	b2c0      	uxtb	r0, r0
    1a3a:	4669      	mov	r1, sp
{
    1a3c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1a3e:	f7ff ffd9 	bl	19f4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1a42:	2800      	cmp	r0, #0
    1a44:	db1f      	blt.n	1a86 <flash_area_get_sectors+0x56>
    1a46:	9b00      	ldr	r3, [sp, #0]
    1a48:	b1eb      	cbz	r3, 1a86 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    1a4a:	685a      	ldr	r2, [r3, #4]
    1a4c:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1a4e:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
    1a50:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1a52:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
    1a54:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1a56:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1a5a:	2200      	movs	r2, #0
	cb_data->status = 0;
    1a5c:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    1a60:	9205      	str	r2, [sp, #20]
    1a62:	f002 fc25 	bl	42b0 <z_impl_device_get_binding>
    1a66:	4605      	mov	r5, r0
	flash_area_close(fa);
    1a68:	9800      	ldr	r0, [sp, #0]
    1a6a:	f004 fde0 	bl	662e <flash_area_close>
	if (flash_dev == NULL) {
    1a6e:	b16d      	cbz	r5, 1a8c <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    1a70:	4628      	mov	r0, r5
    1a72:	4908      	ldr	r1, [pc, #32]	; (1a94 <flash_area_get_sectors+0x64>)
    1a74:	aa01      	add	r2, sp, #4
    1a76:	f004 ffcb 	bl	6a10 <flash_page_foreach>
	if (cb_data->status == 0) {
    1a7a:	9807      	ldr	r0, [sp, #28]
    1a7c:	b908      	cbnz	r0, 1a82 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    1a7e:	9b05      	ldr	r3, [sp, #20]
    1a80:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1a82:	b008      	add	sp, #32
    1a84:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1a86:	f06f 0015 	mvn.w	r0, #21
    1a8a:	e7fa      	b.n	1a82 <flash_area_get_sectors+0x52>
		return -ENODEV;
    1a8c:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1a90:	e7f7      	b.n	1a82 <flash_area_get_sectors+0x52>
    1a92:	bf00      	nop
    1a94:	00006747 	.word	0x00006747

00001a98 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1a98:	4801      	ldr	r0, [pc, #4]	; (1aa0 <nrf_cc3xx_platform_abort_init+0x8>)
    1a9a:	f002 bdf7 	b.w	468c <nrf_cc3xx_platform_set_abort>
    1a9e:	bf00      	nop
    1aa0:	0000717c 	.word	0x0000717c

00001aa4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1aa4:	4901      	ldr	r1, [pc, #4]	; (1aac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1aa6:	2210      	movs	r2, #16
	str	r2, [r1]
    1aa8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1aaa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1aac:	e000ed10 	.word	0xe000ed10

00001ab0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1ab0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1ab2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1ab4:	f380 8811 	msr	BASEPRI, r0
	isb
    1ab8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1abc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1ac0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1ac2:	b662      	cpsie	i
	isb
    1ac4:	f3bf 8f6f 	isb	sy

	bx	lr
    1ac8:	4770      	bx	lr
    1aca:	bf00      	nop

00001acc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1acc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1ace:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1ad0:	f381 8811 	msr	BASEPRI, r1

	wfe
    1ad4:	bf20      	wfe

	msr	BASEPRI, r0
    1ad6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1ada:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1adc:	4770      	bx	lr
    1ade:	bf00      	nop

00001ae0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1ae2:	4605      	mov	r5, r0

	if (esf != NULL) {
    1ae4:	460c      	mov	r4, r1
    1ae6:	b1c9      	cbz	r1, 1b1c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1ae8:	688b      	ldr	r3, [r1, #8]
    1aea:	9300      	str	r3, [sp, #0]
    1aec:	e9d1 2300 	ldrd	r2, r3, [r1]
    1af0:	480e      	ldr	r0, [pc, #56]	; (1b2c <z_arm_fatal_error+0x4c>)
    1af2:	2145      	movs	r1, #69	; 0x45
    1af4:	f004 fd8e 	bl	6614 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1af8:	6963      	ldr	r3, [r4, #20]
    1afa:	9300      	str	r3, [sp, #0]
    1afc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1b00:	480b      	ldr	r0, [pc, #44]	; (1b30 <z_arm_fatal_error+0x50>)
    1b02:	2145      	movs	r1, #69	; 0x45
    1b04:	f004 fd86 	bl	6614 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1b08:	69e2      	ldr	r2, [r4, #28]
    1b0a:	480a      	ldr	r0, [pc, #40]	; (1b34 <z_arm_fatal_error+0x54>)
    1b0c:	2145      	movs	r1, #69	; 0x45
    1b0e:	f004 fd81 	bl	6614 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1b12:	69a2      	ldr	r2, [r4, #24]
    1b14:	4808      	ldr	r0, [pc, #32]	; (1b38 <z_arm_fatal_error+0x58>)
    1b16:	2145      	movs	r1, #69	; 0x45
    1b18:	f004 fd7c 	bl	6614 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1b1c:	4621      	mov	r1, r4
    1b1e:	4628      	mov	r0, r5
}
    1b20:	b003      	add	sp, #12
    1b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1b26:	f002 bbef 	b.w	4308 <z_fatal_error>
    1b2a:	bf00      	nop
    1b2c:	00007995 	.word	0x00007995
    1b30:	000079c9 	.word	0x000079c9
    1b34:	000079fd 	.word	0x000079fd
    1b38:	00007a11 	.word	0x00007a11

00001b3c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1b3c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1b3e:	2b00      	cmp	r3, #0
    1b40:	db08      	blt.n	1b54 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b42:	2201      	movs	r2, #1
    1b44:	f000 001f 	and.w	r0, r0, #31
    1b48:	fa02 f000 	lsl.w	r0, r2, r0
    1b4c:	095b      	lsrs	r3, r3, #5
    1b4e:	4a02      	ldr	r2, [pc, #8]	; (1b58 <arch_irq_enable+0x1c>)
    1b50:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1b54:	4770      	bx	lr
    1b56:	bf00      	nop
    1b58:	e000e100 	.word	0xe000e100

00001b5c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1b5c:	4b05      	ldr	r3, [pc, #20]	; (1b74 <arch_irq_is_enabled+0x18>)
    1b5e:	0942      	lsrs	r2, r0, #5
    1b60:	f000 001f 	and.w	r0, r0, #31
    1b64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1b68:	2301      	movs	r3, #1
    1b6a:	fa03 f000 	lsl.w	r0, r3, r0
}
    1b6e:	4010      	ands	r0, r2
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop
    1b74:	e000e100 	.word	0xe000e100

00001b78 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b78:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1b7a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b7c:	bfa8      	it	ge
    1b7e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1b82:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b86:	bfb8      	it	lt
    1b88:	4b06      	ldrlt	r3, [pc, #24]	; (1ba4 <z_arm_irq_priority_set+0x2c>)
    1b8a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b8e:	bfac      	ite	ge
    1b90:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b94:	f000 000f 	andlt.w	r0, r0, #15
    1b98:	b2c9      	uxtb	r1, r1
    1b9a:	bfb4      	ite	lt
    1b9c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b9e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1ba2:	4770      	bx	lr
    1ba4:	e000ed14 	.word	0xe000ed14

00001ba8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1ba8:	bf30      	wfi
    b z_SysNmiOnReset
    1baa:	f7ff bffd 	b.w	1ba8 <z_SysNmiOnReset>
    1bae:	bf00      	nop

00001bb0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1bb0:	4a14      	ldr	r2, [pc, #80]	; (1c04 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1bb2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1bb4:	4b14      	ldr	r3, [pc, #80]	; (1c08 <z_arm_prep_c+0x58>)
    1bb6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1bba:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1bbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bc0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1bc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1bc8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1bd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1bd4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    1bdc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1be0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    1be4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1be8:	f3bf 8f6f 	isb	sy
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1bec:	2300      	movs	r3, #0
    1bee:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1bf2:	f002 fbdf 	bl	43b4 <z_bss_zero>
	z_data_copy();
    1bf6:	f002 fc21 	bl	443c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1bfa:	f000 fa55 	bl	20a8 <z_arm_interrupt_init>
	z_cstart();
    1bfe:	f002 fbe3 	bl	43c8 <z_cstart>
    1c02:	bf00      	nop
    1c04:	00000000 	.word	0x00000000
    1c08:	e000ed00 	.word	0xe000ed00

00001c0c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1c0c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1c10:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1c12:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1c16:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1c1a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1c1c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1c20:	2902      	cmp	r1, #2
    beq _oops
    1c22:	d0ff      	beq.n	1c24 <_oops>

00001c24 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1c24:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1c26:	f004 fdb1 	bl	678c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1c2a:	bd01      	pop	{r0, pc}

00001c2c <z_check_thread_stack_fail>:
			fault_addr, psp)) {
		/* Thread stack corruption */
		return thread->stack_info.start;
	}
#else
	if (IS_MPU_GUARD_VIOLATION((uint32_t)z_main_stack,
    1c2c:	f110 0f16 	cmn.w	r0, #22
    1c30:	4b09      	ldr	r3, [pc, #36]	; (1c58 <z_check_thread_stack_fail+0x2c>)
    1c32:	d00f      	beq.n	1c54 <z_check_thread_stack_fail+0x28>
    1c34:	4298      	cmp	r0, r3
    1c36:	d307      	bcc.n	1c48 <z_check_thread_stack_fail+0x1c>
    1c38:	3320      	adds	r3, #32
    1c3a:	4283      	cmp	r3, r0
    1c3c:	d904      	bls.n	1c48 <z_check_thread_stack_fail+0x1c>
    1c3e:	428b      	cmp	r3, r1
    1c40:	bf94      	ite	ls
    1c42:	2100      	movls	r1, #0
    1c44:	2101      	movhi	r1, #1
    1c46:	e000      	b.n	1c4a <z_check_thread_stack_fail+0x1e>
    1c48:	2100      	movs	r1, #0
    1c4a:	2900      	cmp	r1, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1c4c:	4803      	ldr	r0, [pc, #12]	; (1c5c <z_check_thread_stack_fail+0x30>)
    1c4e:	bf08      	it	eq
    1c50:	2000      	moveq	r0, #0
    1c52:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION((uint32_t)z_main_stack,
    1c54:	3320      	adds	r3, #32
    1c56:	e7f2      	b.n	1c3e <z_check_thread_stack_fail+0x12>
    1c58:	20001000 	.word	0x20001000
    1c5c:	20001020 	.word	0x20001020

00001c60 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    1c60:	4604      	mov	r4, r0
    1c62:	4608      	mov	r0, r1
    1c64:	4611      	mov	r1, r2
    1c66:	461a      	mov	r2, r3
    1c68:	2300      	movs	r3, #0
    1c6a:	eee1 3a10 	vmsr	fpscr, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    1c6e:	4b08      	ldr	r3, [pc, #32]	; (1c90 <loop+0x2>)
    1c70:	2520      	movs	r5, #32
    1c72:	f383 8809 	msr	PSP, r3
    1c76:	b663      	cpsie	if
    1c78:	f04f 0300 	mov.w	r3, #0
    1c7c:	f383 8811 	msr	BASEPRI, r3
    1c80:	f3bf 8f6f 	isb	sy
    1c84:	47a0      	blx	r4
    1c86:	f385 8811 	msr	BASEPRI, r5
    1c8a:	f3bf 8f6f 	isb	sy

00001c8e <loop>:
    1c8e:	e7fe      	b.n	1c8e <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1c90:	20003820 	.word	0x20003820

00001c94 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1c94:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1c96:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1c9a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1c9e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1ca2:	4904      	ldr	r1, [pc, #16]	; (1cb4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ca4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ca6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1ca8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1caa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1cae:	4902      	ldr	r1, [pc, #8]	; (1cb8 <_isr_wrapper+0x24>)
	bx r1
    1cb0:	4708      	bx	r1
    1cb2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1cb4:	00006ef4 	.word	0x00006ef4
	ldr r1, =z_arm_int_exit
    1cb8:	00001cbd 	.word	0x00001cbd

00001cbc <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1cbc:	4770      	bx	lr
    1cbe:	bf00      	nop

00001cc0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1cc4:	4c2e      	ldr	r4, [pc, #184]	; (1d80 <mem_manage_fault+0xc0>)
{
    1cc6:	4606      	mov	r6, r0
    1cc8:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1cca:	482e      	ldr	r0, [pc, #184]	; (1d84 <mem_manage_fault+0xc4>)
    1ccc:	2145      	movs	r1, #69	; 0x45
{
    1cce:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    1cd0:	f004 fca0 	bl	6614 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1cd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1cd6:	06d7      	lsls	r7, r2, #27
    1cd8:	d503      	bpl.n	1ce2 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1cda:	482b      	ldr	r0, [pc, #172]	; (1d88 <mem_manage_fault+0xc8>)
    1cdc:	2145      	movs	r1, #69	; 0x45
    1cde:	f004 fc99 	bl	6614 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1ce2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ce4:	0718      	lsls	r0, r3, #28
    1ce6:	d503      	bpl.n	1cf0 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    1ce8:	4828      	ldr	r0, [pc, #160]	; (1d8c <mem_manage_fault+0xcc>)
    1cea:	2145      	movs	r1, #69	; 0x45
    1cec:	f004 fc92 	bl	6614 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1cf0:	4c23      	ldr	r4, [pc, #140]	; (1d80 <mem_manage_fault+0xc0>)
    1cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1cf4:	0799      	lsls	r1, r3, #30
    1cf6:	d421      	bmi.n	1d3c <mem_manage_fault+0x7c>
	uint32_t mmfar = -EINVAL;
    1cf8:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1cfc:	4c20      	ldr	r4, [pc, #128]	; (1d80 <mem_manage_fault+0xc0>)
    1cfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1d00:	07d3      	lsls	r3, r2, #31
    1d02:	d503      	bpl.n	1d0c <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    1d04:	4822      	ldr	r0, [pc, #136]	; (1d90 <mem_manage_fault+0xd0>)
    1d06:	2145      	movs	r1, #69	; 0x45
    1d08:	f004 fc84 	bl	6614 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d0e:	0698      	lsls	r0, r3, #26
    1d10:	d503      	bpl.n	1d1a <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    1d12:	4820      	ldr	r0, [pc, #128]	; (1d94 <mem_manage_fault+0xd4>)
    1d14:	2145      	movs	r1, #69	; 0x45
    1d16:	f004 fc7d 	bl	6614 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d1a:	4b19      	ldr	r3, [pc, #100]	; (1d80 <mem_manage_fault+0xc0>)
    1d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d1e:	06d1      	lsls	r1, r2, #27
    1d20:	d421      	bmi.n	1d66 <mem_manage_fault+0xa6>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d24:	0792      	lsls	r2, r2, #30
    1d26:	d41e      	bmi.n	1d66 <mem_manage_fault+0xa6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1d28:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1d2a:	4a15      	ldr	r2, [pc, #84]	; (1d80 <mem_manage_fault+0xc0>)
    1d2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d2e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1d32:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1d34:	2300      	movs	r3, #0
    1d36:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    1d3c:	4816      	ldr	r0, [pc, #88]	; (1d98 <mem_manage_fault+0xd8>)
    1d3e:	2145      	movs	r1, #69	; 0x45
    1d40:	f004 fc68 	bl	6614 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1d44:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d48:	061a      	lsls	r2, r3, #24
    1d4a:	d5d5      	bpl.n	1cf8 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1d4c:	4813      	ldr	r0, [pc, #76]	; (1d9c <mem_manage_fault+0xdc>)
    1d4e:	463a      	mov	r2, r7
    1d50:	2145      	movs	r1, #69	; 0x45
    1d52:	f004 fc5f 	bl	6614 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1d56:	f1b8 0f00 	cmp.w	r8, #0
    1d5a:	d0cf      	beq.n	1cfc <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1d5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1d62:	62a3      	str	r3, [r4, #40]	; 0x28
    1d64:	e7ca      	b.n	1cfc <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1d66:	685b      	ldr	r3, [r3, #4]
    1d68:	051b      	lsls	r3, r3, #20
    1d6a:	d5dd      	bpl.n	1d28 <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1d6c:	4631      	mov	r1, r6
    1d6e:	4638      	mov	r0, r7
    1d70:	f7ff ff5c 	bl	1c2c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1d74:	2800      	cmp	r0, #0
    1d76:	d0d7      	beq.n	1d28 <mem_manage_fault+0x68>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1d78:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1d7c:	2002      	movs	r0, #2
    1d7e:	e7d4      	b.n	1d2a <mem_manage_fault+0x6a>
    1d80:	e000ed00 	.word	0xe000ed00
    1d84:	00007a44 	.word	0x00007a44
    1d88:	00007a5f 	.word	0x00007a5f
    1d8c:	00007a97 	.word	0x00007a97
    1d90:	00007ae7 	.word	0x00007ae7
    1d94:	00007b0b 	.word	0x00007b0b
    1d98:	00007aaf 	.word	0x00007aaf
    1d9c:	00007acc 	.word	0x00007acc

00001da0 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1da0:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1da2:	4c23      	ldr	r4, [pc, #140]	; (1e30 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1da4:	4606      	mov	r6, r0
    1da6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1da8:	4822      	ldr	r0, [pc, #136]	; (1e34 <bus_fault.isra.0+0x94>)
    1daa:	2145      	movs	r1, #69	; 0x45
    1dac:	f004 fc32 	bl	6614 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1db0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1db2:	04d1      	lsls	r1, r2, #19
    1db4:	d503      	bpl.n	1dbe <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1db6:	4820      	ldr	r0, [pc, #128]	; (1e38 <bus_fault.isra.0+0x98>)
    1db8:	2145      	movs	r1, #69	; 0x45
    1dba:	f004 fc2b 	bl	6614 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1dbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dc0:	051a      	lsls	r2, r3, #20
    1dc2:	d503      	bpl.n	1dcc <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1dc4:	481d      	ldr	r0, [pc, #116]	; (1e3c <bus_fault.isra.0+0x9c>)
    1dc6:	2145      	movs	r1, #69	; 0x45
    1dc8:	f004 fc24 	bl	6614 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1dcc:	4c18      	ldr	r4, [pc, #96]	; (1e30 <bus_fault.isra.0+0x90>)
    1dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dd0:	059b      	lsls	r3, r3, #22
    1dd2:	d510      	bpl.n	1df6 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1dd4:	481a      	ldr	r0, [pc, #104]	; (1e40 <bus_fault.isra.0+0xa0>)
    1dd6:	2145      	movs	r1, #69	; 0x45
    1dd8:	f004 fc1c 	bl	6614 <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1ddc:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1de0:	0418      	lsls	r0, r3, #16
    1de2:	d508      	bpl.n	1df6 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1de4:	4817      	ldr	r0, [pc, #92]	; (1e44 <bus_fault.isra.0+0xa4>)
    1de6:	2145      	movs	r1, #69	; 0x45
    1de8:	f004 fc14 	bl	6614 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1dec:	b11e      	cbz	r6, 1df6 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1df0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1df4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1df6:	4c0e      	ldr	r4, [pc, #56]	; (1e30 <bus_fault.isra.0+0x90>)
    1df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dfa:	0559      	lsls	r1, r3, #21
    1dfc:	d503      	bpl.n	1e06 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1dfe:	4812      	ldr	r0, [pc, #72]	; (1e48 <bus_fault.isra.0+0xa8>)
    1e00:	2145      	movs	r1, #69	; 0x45
    1e02:	f004 fc07 	bl	6614 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e08:	05da      	lsls	r2, r3, #23
    1e0a:	d50b      	bpl.n	1e24 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1e0c:	480f      	ldr	r0, [pc, #60]	; (1e4c <bus_fault.isra.0+0xac>)
    1e0e:	2145      	movs	r1, #69	; 0x45
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e10:	f004 fc00 	bl	6614 <z_log_minimal_printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e14:	4a06      	ldr	r2, [pc, #24]	; (1e30 <bus_fault.isra.0+0x90>)
    1e16:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1e18:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e1a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1e1e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e20:	7028      	strb	r0, [r5, #0]

	return reason;
}
    1e22:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1e24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e26:	049b      	lsls	r3, r3, #18
    1e28:	d5f4      	bpl.n	1e14 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e2a:	4809      	ldr	r0, [pc, #36]	; (1e50 <bus_fault.isra.0+0xb0>)
    1e2c:	2145      	movs	r1, #69	; 0x45
    1e2e:	e7ef      	b.n	1e10 <bus_fault.isra.0+0x70>
    1e30:	e000ed00 	.word	0xe000ed00
    1e34:	00007b3f 	.word	0x00007b3f
    1e38:	00007b5a 	.word	0x00007b5a
    1e3c:	00007a97 	.word	0x00007a97
    1e40:	00007b70 	.word	0x00007b70
    1e44:	00007b8e 	.word	0x00007b8e
    1e48:	00007ba8 	.word	0x00007ba8
    1e4c:	00007bc8 	.word	0x00007bc8
    1e50:	00007b0b 	.word	0x00007b0b

00001e54 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1e54:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e56:	4c1d      	ldr	r4, [pc, #116]	; (1ecc <usage_fault.isra.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1e58:	481d      	ldr	r0, [pc, #116]	; (1ed0 <usage_fault.isra.0+0x7c>)
    1e5a:	2145      	movs	r1, #69	; 0x45
    1e5c:	f004 fbda 	bl	6614 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1e62:	0193      	lsls	r3, r2, #6
    1e64:	d503      	bpl.n	1e6e <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1e66:	481b      	ldr	r0, [pc, #108]	; (1ed4 <usage_fault.isra.0+0x80>)
    1e68:	2145      	movs	r1, #69	; 0x45
    1e6a:	f004 fbd3 	bl	6614 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e70:	01dc      	lsls	r4, r3, #7
    1e72:	d503      	bpl.n	1e7c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1e74:	4818      	ldr	r0, [pc, #96]	; (1ed8 <usage_fault.isra.0+0x84>)
    1e76:	2145      	movs	r1, #69	; 0x45
    1e78:	f004 fbcc 	bl	6614 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e7c:	4c13      	ldr	r4, [pc, #76]	; (1ecc <usage_fault.isra.0+0x78>)
    1e7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1e80:	0310      	lsls	r0, r2, #12
    1e82:	d503      	bpl.n	1e8c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    1e84:	4815      	ldr	r0, [pc, #84]	; (1edc <usage_fault.isra.0+0x88>)
    1e86:	2145      	movs	r1, #69	; 0x45
    1e88:	f004 fbc4 	bl	6614 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e8e:	0359      	lsls	r1, r3, #13
    1e90:	d503      	bpl.n	1e9a <usage_fault.isra.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1e92:	4813      	ldr	r0, [pc, #76]	; (1ee0 <usage_fault.isra.0+0x8c>)
    1e94:	2145      	movs	r1, #69	; 0x45
    1e96:	f004 fbbd 	bl	6614 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e9a:	4c0c      	ldr	r4, [pc, #48]	; (1ecc <usage_fault.isra.0+0x78>)
    1e9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1e9e:	0392      	lsls	r2, r2, #14
    1ea0:	d503      	bpl.n	1eaa <usage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1ea2:	4810      	ldr	r0, [pc, #64]	; (1ee4 <usage_fault.isra.0+0x90>)
    1ea4:	2145      	movs	r1, #69	; 0x45
    1ea6:	f004 fbb5 	bl	6614 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1eaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eac:	03db      	lsls	r3, r3, #15
    1eae:	d503      	bpl.n	1eb8 <usage_fault.isra.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1eb0:	480d      	ldr	r0, [pc, #52]	; (1ee8 <usage_fault.isra.0+0x94>)
    1eb2:	2145      	movs	r1, #69	; 0x45
    1eb4:	f004 fbae 	bl	6614 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1eb8:	4a04      	ldr	r2, [pc, #16]	; (1ecc <usage_fault.isra.0+0x78>)
    1eba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1ebc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1ec0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1ec4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1ec6:	2000      	movs	r0, #0
    1ec8:	bd10      	pop	{r4, pc}
    1eca:	bf00      	nop
    1ecc:	e000ed00 	.word	0xe000ed00
    1ed0:	00007be5 	.word	0x00007be5
    1ed4:	00007c02 	.word	0x00007c02
    1ed8:	00007c1a 	.word	0x00007c1a
    1edc:	00007c39 	.word	0x00007c39
    1ee0:	00007c5c 	.word	0x00007c5c
    1ee4:	00007c86 	.word	0x00007c86
    1ee8:	00007ca5 	.word	0x00007ca5

00001eec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ef0:	4b57      	ldr	r3, [pc, #348]	; (2050 <z_arm_fault+0x164>)
    1ef2:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    1ef6:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ef8:	f3c8 0708 	ubfx	r7, r8, #0, #9
	__asm__ volatile(
    1efc:	2600      	movs	r6, #0
    1efe:	f386 8811 	msr	BASEPRI, r6
    1f02:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1f06:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1f0a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1f0e:	d107      	bne.n	1f20 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1f10:	f002 030c 	and.w	r3, r2, #12
    1f14:	2b08      	cmp	r3, #8
    1f16:	d105      	bne.n	1f24 <z_arm_fault+0x38>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1f18:	484e      	ldr	r0, [pc, #312]	; (2054 <z_arm_fault+0x168>)
    1f1a:	2145      	movs	r1, #69	; 0x45
    1f1c:	f004 fb7a 	bl	6614 <z_log_minimal_printk>
		return NULL;
    1f20:	4635      	mov	r5, r6
    1f22:	e004      	b.n	1f2e <z_arm_fault+0x42>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1f24:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1f26:	bf4e      	itee	mi
    1f28:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
    1f2a:	4605      	movpl	r5, r0
			*nested_exc = true;
    1f2c:	2601      	movpl	r6, #1
	*recoverable = false;
    1f2e:	2200      	movs	r2, #0
    1f30:	1ef9      	subs	r1, r7, #3
    1f32:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1f36:	4614      	mov	r4, r2
    1f38:	2909      	cmp	r1, #9
    1f3a:	d877      	bhi.n	202c <z_arm_fault+0x140>
    1f3c:	e8df f001 	tbb	[pc, r1]
    1f40:	686f6b05 	.word	0x686f6b05
    1f44:	76767676 	.word	0x76767676
    1f48:	7376      	.short	0x7376
	PR_FAULT_INFO("***** HARD FAULT *****");
    1f4a:	4843      	ldr	r0, [pc, #268]	; (2058 <z_arm_fault+0x16c>)
    1f4c:	2145      	movs	r1, #69	; 0x45
    1f4e:	f004 fb61 	bl	6614 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1f52:	4b3f      	ldr	r3, [pc, #252]	; (2050 <z_arm_fault+0x164>)
	*recoverable = false;
    1f54:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1f58:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1f5a:	f014 0402 	ands.w	r4, r4, #2
    1f5e:	d005      	beq.n	1f6c <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
    1f60:	483e      	ldr	r0, [pc, #248]	; (205c <z_arm_fault+0x170>)
    1f62:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    1f64:	f004 fb56 	bl	6614 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1f68:	2400      	movs	r4, #0
}
    1f6a:	e006      	b.n	1f7a <z_arm_fault+0x8e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f6e:	2a00      	cmp	r2, #0
    1f70:	da1d      	bge.n	1fae <z_arm_fault+0xc2>
		PR_EXC("  Debug event");
    1f72:	483b      	ldr	r0, [pc, #236]	; (2060 <z_arm_fault+0x174>)
    1f74:	2145      	movs	r1, #69	; 0x45
    1f76:	f004 fb4d 	bl	6614 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f7e:	b99b      	cbnz	r3, 1fa8 <z_arm_fault+0xbc>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1f80:	2220      	movs	r2, #32
    1f82:	4629      	mov	r1, r5
    1f84:	a802      	add	r0, sp, #8
    1f86:	f004 fc33 	bl	67f0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f8c:	2e00      	cmp	r6, #0
    1f8e:	d05a      	beq.n	2046 <z_arm_fault+0x15a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1f90:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1f94:	b922      	cbnz	r2, 1fa0 <z_arm_fault+0xb4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1f96:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1f9a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1f9e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1fa0:	a902      	add	r1, sp, #8
    1fa2:	4620      	mov	r0, r4
    1fa4:	f7ff fd9c 	bl	1ae0 <z_arm_fatal_error>
}
    1fa8:	b00a      	add	sp, #40	; 0x28
    1faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1fb0:	005b      	lsls	r3, r3, #1
    1fb2:	d5e2      	bpl.n	1f7a <z_arm_fault+0x8e>
		PR_EXC("  Fault escalation (see below)");
    1fb4:	482b      	ldr	r0, [pc, #172]	; (2064 <z_arm_fault+0x178>)
    1fb6:	2145      	movs	r1, #69	; 0x45
    1fb8:	f004 fb2c 	bl	6614 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    1fbc:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1fbe:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1fc2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1fc6:	429a      	cmp	r2, r3
    1fc8:	d00d      	beq.n	1fe6 <z_arm_fault+0xfa>
		} else if (SCB_MMFSR != 0) {
    1fca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1fce:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1fd2:	781b      	ldrb	r3, [r3, #0]
    1fd4:	b173      	cbz	r3, 1ff4 <z_arm_fault+0x108>
			reason = mem_manage_fault(esf, 1, recoverable);
    1fd6:	f10d 0207 	add.w	r2, sp, #7
    1fda:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1fdc:	4628      	mov	r0, r5
    1fde:	f7ff fe6f 	bl	1cc0 <mem_manage_fault>
    1fe2:	4604      	mov	r4, r0
		break;
    1fe4:	e7c9      	b.n	1f7a <z_arm_fault+0x8e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    1fe6:	682a      	ldr	r2, [r5, #0]
    1fe8:	481f      	ldr	r0, [pc, #124]	; (2068 <z_arm_fault+0x17c>)
    1fea:	2145      	movs	r1, #69	; 0x45
    1fec:	f004 fb12 	bl	6614 <z_log_minimal_printk>
			reason = esf->basic.r0;
    1ff0:	682c      	ldr	r4, [r5, #0]
    1ff2:	e7c2      	b.n	1f7a <z_arm_fault+0x8e>
		} else if (SCB_BFSR != 0) {
    1ff4:	4b1d      	ldr	r3, [pc, #116]	; (206c <z_arm_fault+0x180>)
    1ff6:	781b      	ldrb	r3, [r3, #0]
    1ff8:	b12b      	cbz	r3, 2006 <z_arm_fault+0x11a>
			reason = bus_fault(esf, 1, recoverable);
    1ffa:	f10d 0107 	add.w	r1, sp, #7
    1ffe:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2000:	f7ff fece 	bl	1da0 <bus_fault.isra.0>
    2004:	e7ed      	b.n	1fe2 <z_arm_fault+0xf6>
		} else if (SCB_UFSR != 0) {
    2006:	4b1a      	ldr	r3, [pc, #104]	; (2070 <z_arm_fault+0x184>)
    2008:	881b      	ldrh	r3, [r3, #0]
    200a:	b29b      	uxth	r3, r3
    200c:	2b00      	cmp	r3, #0
    200e:	d0b4      	beq.n	1f7a <z_arm_fault+0x8e>
		reason = usage_fault(esf);
    2010:	f7ff ff20 	bl	1e54 <usage_fault.isra.0>
    2014:	e7e5      	b.n	1fe2 <z_arm_fault+0xf6>
		reason = mem_manage_fault(esf, 0, recoverable);
    2016:	f10d 0207 	add.w	r2, sp, #7
    201a:	2100      	movs	r1, #0
    201c:	e7de      	b.n	1fdc <z_arm_fault+0xf0>
		reason = bus_fault(esf, 0, recoverable);
    201e:	f10d 0107 	add.w	r1, sp, #7
    2022:	2000      	movs	r0, #0
    2024:	e7ec      	b.n	2000 <z_arm_fault+0x114>
	PR_FAULT_INFO(
    2026:	4813      	ldr	r0, [pc, #76]	; (2074 <z_arm_fault+0x188>)
    2028:	2145      	movs	r1, #69	; 0x45
    202a:	e79b      	b.n	1f64 <z_arm_fault+0x78>
	PR_FAULT_INFO("***** %s %d) *****",
    202c:	4912      	ldr	r1, [pc, #72]	; (2078 <z_arm_fault+0x18c>)
    202e:	4a13      	ldr	r2, [pc, #76]	; (207c <z_arm_fault+0x190>)
    2030:	4813      	ldr	r0, [pc, #76]	; (2080 <z_arm_fault+0x194>)
    2032:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2036:	bf08      	it	eq
    2038:	460a      	moveq	r2, r1
    203a:	f1a7 0310 	sub.w	r3, r7, #16
    203e:	2145      	movs	r1, #69	; 0x45
    2040:	f004 fae8 	bl	6614 <z_log_minimal_printk>
    2044:	e790      	b.n	1f68 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2046:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    204a:	f023 0301 	bic.w	r3, r3, #1
    204e:	e7a6      	b.n	1f9e <z_arm_fault+0xb2>
    2050:	e000ed00 	.word	0xe000ed00
    2054:	00007d03 	.word	0x00007d03
    2058:	00007d33 	.word	0x00007d33
    205c:	00007d4f 	.word	0x00007d4f
    2060:	00007d75 	.word	0x00007d75
    2064:	00007d88 	.word	0x00007d88
    2068:	00007dac 	.word	0x00007dac
    206c:	e000ed29 	.word	0xe000ed29
    2070:	e000ed2a 	.word	0xe000ed2a
    2074:	00007dcd 	.word	0x00007dcd
    2078:	00007cd5 	.word	0x00007cd5
    207c:	00007cea 	.word	0x00007cea
    2080:	00007df6 	.word	0x00007df6

00002084 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2084:	4a02      	ldr	r2, [pc, #8]	; (2090 <z_arm_fault_init+0xc>)
    2086:	6953      	ldr	r3, [r2, #20]
    2088:	f043 0310 	orr.w	r3, r3, #16
    208c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    208e:	4770      	bx	lr
    2090:	e000ed00 	.word	0xe000ed00

00002094 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2094:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2098:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    209c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    209e:	4672      	mov	r2, lr
	bl z_arm_fault
    20a0:	f7ff ff24 	bl	1eec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    20a4:	bd01      	pop	{r0, pc}
    20a6:	bf00      	nop

000020a8 <z_arm_interrupt_init>:
    20a8:	4804      	ldr	r0, [pc, #16]	; (20bc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    20aa:	2300      	movs	r3, #0
    20ac:	2120      	movs	r1, #32
    20ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    20b0:	3301      	adds	r3, #1
    20b2:	2b30      	cmp	r3, #48	; 0x30
    20b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    20b8:	d1f9      	bne.n	20ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    20ba:	4770      	bx	lr
    20bc:	e000e100 	.word	0xe000e100

000020c0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    20c0:	2000      	movs	r0, #0
    msr CONTROL, r0
    20c2:	f380 8814 	msr	CONTROL, r0
    isb
    20c6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    20ca:	f004 fea5 	bl	6e18 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    20ce:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    20d0:	490d      	ldr	r1, [pc, #52]	; (2108 <__start+0x48>)
    str r0, [r1]
    20d2:	6008      	str	r0, [r1, #0]
    dsb
    20d4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    20d8:	480c      	ldr	r0, [pc, #48]	; (210c <__start+0x4c>)
    msr msp, r0
    20da:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    20de:	f000 f829 	bl	2134 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    20e2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    20e4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    20e8:	4809      	ldr	r0, [pc, #36]	; (2110 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    20ea:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    20ee:	1840      	adds	r0, r0, r1
    msr PSP, r0
    20f0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    20f4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    20f8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    20fa:	4308      	orrs	r0, r1
    msr CONTROL, r0
    20fc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2100:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2104:	f7ff fd54 	bl	1bb0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2108:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    210c:	20003800 	.word	0x20003800
    ldr r0, =z_interrupt_stacks
    2110:	20003820 	.word	0x20003820

00002114 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2114:	4a06      	ldr	r2, [pc, #24]	; (2130 <z_arm_clear_arm_mpu_config+0x1c>)
    2116:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2118:	2300      	movs	r3, #0
	int num_regions =
    211a:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    211e:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2120:	428b      	cmp	r3, r1
    2122:	d100      	bne.n	2126 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2124:	4770      	bx	lr
  MPU->RNR = rnr;
    2126:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2128:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    212a:	3301      	adds	r3, #1
    212c:	e7f8      	b.n	2120 <z_arm_clear_arm_mpu_config+0xc>
    212e:	bf00      	nop
    2130:	e000ed90 	.word	0xe000ed90

00002134 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2134:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2136:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2138:	2300      	movs	r3, #0
    213a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    213e:	f7ff ffe9 	bl	2114 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2142:	4b14      	ldr	r3, [pc, #80]	; (2194 <z_arm_init_arch_hw_at_boot+0x60>)
    2144:	f04f 32ff 	mov.w	r2, #4294967295
    2148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    214c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    215c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2160:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2164:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2168:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    216c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2170:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2174:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2178:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    217c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2180:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2184:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2188:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    218a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    218e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2192:	bd08      	pop	{r3, pc}
    2194:	e000e100 	.word	0xe000e100

00002198 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2198:	4b02      	ldr	r3, [pc, #8]	; (21a4 <z_arm_configure_static_mpu_regions+0xc>)
    219a:	4a03      	ldr	r2, [pc, #12]	; (21a8 <z_arm_configure_static_mpu_regions+0x10>)
    219c:	4803      	ldr	r0, [pc, #12]	; (21ac <z_arm_configure_static_mpu_regions+0x14>)
    219e:	2102      	movs	r1, #2
    21a0:	f000 b864 	b.w	226c <arm_core_mpu_configure_static_mpu_regions>
    21a4:	20040000 	.word	0x20040000
    21a8:	20000000 	.word	0x20000000
    21ac:	00007184 	.word	0x00007184

000021b0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    21b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    21b2:	4f22      	ldr	r7, [pc, #136]	; (223c <mpu_configure_regions+0x8c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    21b4:	2600      	movs	r6, #0
    21b6:	428e      	cmp	r6, r1
    21b8:	da0f      	bge.n	21da <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    21ba:	6844      	ldr	r4, [r0, #4]
    21bc:	2c00      	cmp	r4, #0
    21be:	d039      	beq.n	2234 <mpu_configure_regions+0x84>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    21c0:	b19b      	cbz	r3, 21ea <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    21c2:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    21c6:	ea14 0f0c 	tst.w	r4, ip
    21ca:	d008      	beq.n	21de <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    21cc:	481c      	ldr	r0, [pc, #112]	; (2240 <mpu_configure_regions+0x90>)
    21ce:	4632      	mov	r2, r6
    21d0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    21d2:	f004 fa1f 	bl	6614 <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    21d6:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    21da:	4610      	mov	r0, r2
    21dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    21de:	2c1f      	cmp	r4, #31
    21e0:	d9f4      	bls.n	21cc <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    21e2:	6805      	ldr	r5, [r0, #0]
		&&
    21e4:	ea1c 0f05 	tst.w	ip, r5
    21e8:	d1f0      	bne.n	21cc <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    21ea:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    21ec:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    21ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    21f2:	b2d2      	uxtb	r2, r2
    21f4:	d90f      	bls.n	2216 <mpu_configure_regions+0x66>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    21f6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    21fa:	d80e      	bhi.n	221a <mpu_configure_regions+0x6a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    21fc:	3c01      	subs	r4, #1
    21fe:	fab4 f484 	clz	r4, r4
    2202:	f1c4 041f 	rsb	r4, r4, #31
    2206:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2208:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    220a:	ea4c 0404 	orr.w	r4, ip, r4
    220e:	d906      	bls.n	221e <mpu_configure_regions+0x6e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2210:	480c      	ldr	r0, [pc, #48]	; (2244 <mpu_configure_regions+0x94>)
    2212:	2145      	movs	r1, #69	; 0x45
    2214:	e7dd      	b.n	21d2 <mpu_configure_regions+0x22>
		return REGION_32B;
    2216:	2408      	movs	r4, #8
    2218:	e7f6      	b.n	2208 <mpu_configure_regions+0x58>
		return REGION_4G;
    221a:	243e      	movs	r4, #62	; 0x3e
    221c:	e7f4      	b.n	2208 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    221e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2222:	4315      	orrs	r5, r2
    2224:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2228:	f044 0401 	orr.w	r4, r4, #1
    222c:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    222e:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2230:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2232:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2234:	3601      	adds	r6, #1
    2236:	300c      	adds	r0, #12
    2238:	e7bd      	b.n	21b6 <mpu_configure_regions+0x6>
    223a:	bf00      	nop
    223c:	e000ed90 	.word	0xe000ed90
    2240:	00007e12 	.word	0x00007e12
    2244:	00007e3a 	.word	0x00007e3a

00002248 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2248:	4b03      	ldr	r3, [pc, #12]	; (2258 <arm_core_mpu_enable+0x10>)
    224a:	2205      	movs	r2, #5
    224c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    224e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2252:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2256:	4770      	bx	lr
    2258:	e000ed90 	.word	0xe000ed90

0000225c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    225c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2260:	4b01      	ldr	r3, [pc, #4]	; (2268 <arm_core_mpu_disable+0xc>)
    2262:	2200      	movs	r2, #0
    2264:	605a      	str	r2, [r3, #4]
}
    2266:	4770      	bx	lr
    2268:	e000ed90 	.word	0xe000ed90

0000226c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    226c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    226e:	4c03      	ldr	r4, [pc, #12]	; (227c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2270:	2301      	movs	r3, #1
    2272:	7822      	ldrb	r2, [r4, #0]
    2274:	f7ff ff9c 	bl	21b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2278:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    227a:	bd10      	pop	{r4, pc}
    227c:	20000ffd 	.word	0x20000ffd

00002280 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2280:	4913      	ldr	r1, [pc, #76]	; (22d0 <z_arm_mpu_init+0x50>)
    2282:	6808      	ldr	r0, [r1, #0]
    2284:	2808      	cmp	r0, #8
{
    2286:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2288:	d81e      	bhi.n	22c8 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    228a:	f7ff ffe7 	bl	225c <arm_core_mpu_disable>
    228e:	4c11      	ldr	r4, [pc, #68]	; (22d4 <z_arm_mpu_init+0x54>)
    2290:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2292:	2200      	movs	r2, #0
    2294:	4290      	cmp	r0, r2
    2296:	f101 010c 	add.w	r1, r1, #12
    229a:	d105      	bne.n	22a8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    229c:	4b0e      	ldr	r3, [pc, #56]	; (22d8 <z_arm_mpu_init+0x58>)
    229e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    22a0:	f7ff ffd2 	bl	2248 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    22a4:	2000      	movs	r0, #0
}
    22a6:	bd10      	pop	{r4, pc}
    22a8:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22aa:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    22ae:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    22b2:	4313      	orrs	r3, r2
    22b4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22b8:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    22ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
    22be:	f043 0301 	orr.w	r3, r3, #1
    22c2:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    22c4:	3201      	adds	r2, #1
    22c6:	e7e5      	b.n	2294 <z_arm_mpu_init+0x14>
		return -1;
    22c8:	f04f 30ff 	mov.w	r0, #4294967295
    22cc:	e7eb      	b.n	22a6 <z_arm_mpu_init+0x26>
    22ce:	bf00      	nop
    22d0:	0000719c 	.word	0x0000719c
    22d4:	e000ed90 	.word	0xe000ed90
    22d8:	20000ffd 	.word	0x20000ffd

000022dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    22dc:	4b01      	ldr	r3, [pc, #4]	; (22e4 <__stdout_hook_install+0x8>)
    22de:	6018      	str	r0, [r3, #0]
}
    22e0:	4770      	bx	lr
    22e2:	bf00      	nop
    22e4:	20000010 	.word	0x20000010

000022e8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    22e8:	f04f 0320 	mov.w	r3, #32
    22ec:	f3ef 8211 	mrs	r2, BASEPRI
    22f0:	f383 8812 	msr	BASEPRI_MAX, r3
    22f4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    22f8:	4906      	ldr	r1, [pc, #24]	; (2314 <nordicsemi_nrf52_init+0x2c>)
    22fa:	2301      	movs	r3, #1
    22fc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2300:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2304:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2308:	f382 8811 	msr	BASEPRI, r2
    230c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2310:	2000      	movs	r0, #0
    2312:	4770      	bx	lr
    2314:	4001e000 	.word	0x4001e000

00002318 <sys_arch_reboot>:
    *p_gpregret = val;
    2318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    231c:	b2c0      	uxtb	r0, r0
    231e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2322:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2326:	4905      	ldr	r1, [pc, #20]	; (233c <sys_arch_reboot+0x24>)
    2328:	4b05      	ldr	r3, [pc, #20]	; (2340 <sys_arch_reboot+0x28>)
    232a:	68ca      	ldr	r2, [r1, #12]
    232c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2330:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2332:	60cb      	str	r3, [r1, #12]
    2334:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2338:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    233a:	e7fd      	b.n	2338 <sys_arch_reboot+0x20>
    233c:	e000ed00 	.word	0xe000ed00
    2340:	05fa0004 	.word	0x05fa0004

00002344 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2344:	b120      	cbz	r0, 2350 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2346:	4b03      	ldr	r3, [pc, #12]	; (2354 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2348:	0180      	lsls	r0, r0, #6
    234a:	f043 0301 	orr.w	r3, r3, #1
    234e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2350:	4770      	bx	lr
    2352:	bf00      	nop
    2354:	000070f0 	.word	0x000070f0

00002358 <init>:
	return 0;
}
#endif /* USE_RESET_GPIO */

static int init(const struct device *dev)
{
    2358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    235c:	4c31      	ldr	r4, [pc, #196]	; (2424 <init+0xcc>)
			cfg->port, cfg->pin, flags);
		if (rc) {
			LOG_ERR("Error %d while configuring pin P%d.%02d (%s)",
				rc, cfg->port, cfg->pin, cfg->name);
		} else if (cfg->info) {
			LOG_INF("%s is %s",
    235e:	4f32      	ldr	r7, [pc, #200]	; (2428 <init+0xd0>)
    2360:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 243c <init+0xe4>
	for (int i = 0; i < ARRAY_SIZE(routing_switches); ++i) {
    2364:	2500      	movs	r5, #0
    2366:	46a0      	mov	r8, r4
		gpio_flags_t flags = cfg->flags;
    2368:	f894 b005 	ldrb.w	fp, [r4, #5]
		if (!device_is_ready(cfg->gpio)) {
    236c:	6826      	ldr	r6, [r4, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    236e:	4630      	mov	r0, r6
    2370:	f004 fd10 	bl	6d94 <z_device_ready>
    2374:	b3a0      	cbz	r0, 23e0 <init+0x88>
		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
    2376:	f894 a006 	ldrb.w	sl, [r4, #6]
				  : GPIO_OUTPUT_INACTIVE);
    237a:	f1ba 0f00 	cmp.w	sl, #0
    237e:	bf14      	ite	ne
    2380:	f44f 50d0 	movne.w	r0, #6656	; 0x1a00
    2384:	f44f 50b0 	moveq.w	r0, #5632	; 0x1600
		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
    2388:	ea4b 0000 	orr.w	r0, fp, r0
		rc = gpio_pin_configure(cfg->gpio, cfg->pin, flags);
    238c:	f894 b004 	ldrb.w	fp, [r4, #4]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    2390:	07c3      	lsls	r3, r0, #31
	const struct gpio_driver_api *api =
    2392:	f8d6 e008 	ldr.w	lr, [r6, #8]
	struct gpio_driver_data *data =
    2396:	f8d6 c010 	ldr.w	ip, [r6, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    239a:	d501      	bpl.n	23a0 <init+0x48>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    239c:	f480 6040 	eor.w	r0, r0, #3072	; 0xc00
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    23a0:	f8dc 3000 	ldr.w	r3, [ip]
    23a4:	2101      	movs	r1, #1
    23a6:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    23aa:	fa01 f10b 	lsl.w	r1, r1, fp
    23ae:	07c0      	lsls	r0, r0, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    23b0:	bf4c      	ite	mi
    23b2:	430b      	orrmi	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    23b4:	438b      	bicpl	r3, r1
    23b6:	f8cc 3000 	str.w	r3, [ip]
	}

	return api->pin_configure(port, pin, flags);
    23ba:	4630      	mov	r0, r6
    23bc:	f8de 3000 	ldr.w	r3, [lr]
    23c0:	4659      	mov	r1, fp
    23c2:	4798      	blx	r3
		if (rc) {
    23c4:	4606      	mov	r6, r0
    23c6:	b1b0      	cbz	r0, 23f6 <init+0x9e>
			LOG_ERR("Error %d while configuring pin P%d.%02d (%s)",
    23c8:	eb08 1505 	add.w	r5, r8, r5, lsl #4
    23cc:	4602      	mov	r2, r0
    23ce:	68eb      	ldr	r3, [r5, #12]
    23d0:	4816      	ldr	r0, [pc, #88]	; (242c <init+0xd4>)
    23d2:	e9cd b300 	strd	fp, r3, [sp]
    23d6:	2145      	movs	r1, #69	; 0x45
    23d8:	79eb      	ldrb	r3, [r5, #7]
    23da:	f004 f91b 	bl	6614 <z_log_minimal_printk>
				cfg->name, cfg->on ? "ENABLED" : "disabled");
		}
#endif
		if (rc) {
    23de:	e006      	b.n	23ee <init+0x96>
			LOG_ERR("%s is not ready", cfg->gpio->name);
    23e0:	6832      	ldr	r2, [r6, #0]
    23e2:	4813      	ldr	r0, [pc, #76]	; (2430 <init+0xd8>)
    23e4:	2145      	movs	r1, #69	; 0x45
    23e6:	f004 f915 	bl	6614 <z_log_minimal_printk>
			return -ENODEV;
    23ea:	f06f 0612 	mvn.w	r6, #18
#endif

	LOG_INF("Board configured.");

	return 0;
}
    23ee:	4630      	mov	r0, r6
    23f0:	b003      	add	sp, #12
    23f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (cfg->info) {
    23f6:	7a23      	ldrb	r3, [r4, #8]
    23f8:	b14b      	cbz	r3, 240e <init+0xb6>
			LOG_INF("%s is %s",
    23fa:	4b0e      	ldr	r3, [pc, #56]	; (2434 <init+0xdc>)
    23fc:	68e2      	ldr	r2, [r4, #12]
    23fe:	f1ba 0f00 	cmp.w	sl, #0
    2402:	bf18      	it	ne
    2404:	463b      	movne	r3, r7
    2406:	2149      	movs	r1, #73	; 0x49
    2408:	4648      	mov	r0, r9
    240a:	f004 f903 	bl	6614 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(routing_switches); ++i) {
    240e:	3501      	adds	r5, #1
    2410:	2d0e      	cmp	r5, #14
    2412:	f104 0410 	add.w	r4, r4, #16
    2416:	d1a7      	bne.n	2368 <init+0x10>
	LOG_INF("Board configured.");
    2418:	4807      	ldr	r0, [pc, #28]	; (2438 <init+0xe0>)
    241a:	2149      	movs	r1, #73	; 0x49
    241c:	f004 f8fa 	bl	6614 <z_log_minimal_printk>
	return 0;
    2420:	e7e5      	b.n	23ee <init+0x96>
    2422:	bf00      	nop
    2424:	000071bc 	.word	0x000071bc
    2428:	00007e78 	.word	0x00007e78
    242c:	00007e9e 	.word	0x00007e9e
    2430:	00007e89 	.word	0x00007e89
    2434:	00007e80 	.word	0x00007e80
    2438:	00007ede 	.word	0x00007ede
    243c:	00007ed0 	.word	0x00007ed0

00002440 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2440:	b570      	push	{r4, r5, r6, lr}
    2442:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    2444:	480d      	ldr	r0, [pc, #52]	; (247c <onoff_stop+0x3c>)
    2446:	1a23      	subs	r3, r4, r0
    2448:	109a      	asrs	r2, r3, #2
    244a:	4b0d      	ldr	r3, [pc, #52]	; (2480 <onoff_stop+0x40>)
    244c:	4353      	muls	r3, r2
    244e:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    2450:	250c      	movs	r5, #12
    2452:	435d      	muls	r5, r3
    2454:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    2458:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    245a:	4418      	add	r0, r3
    245c:	2140      	movs	r1, #64	; 0x40
    245e:	f004 f9e7 	bl	6830 <set_off_state>
	if (err < 0) {
    2462:	1e01      	subs	r1, r0, #0
    2464:	db04      	blt.n	2470 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    2466:	4b07      	ldr	r3, [pc, #28]	; (2484 <onoff_stop+0x44>)
    2468:	442b      	add	r3, r5
    246a:	685b      	ldr	r3, [r3, #4]
    246c:	4798      	blx	r3
	return 0;
    246e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    2470:	4620      	mov	r0, r4
    2472:	4633      	mov	r3, r6
}
    2474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2478:	4718      	bx	r3
    247a:	bf00      	nop
    247c:	20000e4c 	.word	0x20000e4c
    2480:	b6db6db7 	.word	0xb6db6db7
    2484:	000072b4 	.word	0x000072b4

00002488 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    248c:	4c0f      	ldr	r4, [pc, #60]	; (24cc <onoff_start+0x44>)
    248e:	4d10      	ldr	r5, [pc, #64]	; (24d0 <onoff_start+0x48>)
    2490:	1b03      	subs	r3, r0, r4
    2492:	109b      	asrs	r3, r3, #2
    2494:	435d      	muls	r5, r3
    2496:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    2498:	250c      	movs	r5, #12
    249a:	435d      	muls	r5, r3
{
    249c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    249e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    24a2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    24a4:	4420      	add	r0, r4
    24a6:	2140      	movs	r1, #64	; 0x40
    24a8:	f004 f9db 	bl	6862 <set_starting_state>
	if (err < 0) {
    24ac:	1e01      	subs	r1, r0, #0
    24ae:	db08      	blt.n	24c2 <onoff_start+0x3a>
	subdata->cb = cb;
    24b0:	4b08      	ldr	r3, [pc, #32]	; (24d4 <onoff_start+0x4c>)
    24b2:	442c      	add	r4, r5
	subdata->user_data = user_data;
    24b4:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    24b8:	4b07      	ldr	r3, [pc, #28]	; (24d8 <onoff_start+0x50>)
    24ba:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    24bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    24c0:	4718      	bx	r3
		notify(mgr, err);
    24c2:	4638      	mov	r0, r7
    24c4:	4633      	mov	r3, r6
}
    24c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    24ca:	4718      	bx	r3
    24cc:	20000e4c 	.word	0x20000e4c
    24d0:	b6db6db7 	.word	0xb6db6db7
    24d4:	000068cb 	.word	0x000068cb
    24d8:	000072b4 	.word	0x000072b4

000024dc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    24dc:	2200      	movs	r2, #0
{
    24de:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    24e0:	2101      	movs	r1, #1
{
    24e2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    24e4:	4610      	mov	r0, r2
    24e6:	f7ff fb47 	bl	1b78 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    24ea:	2000      	movs	r0, #0
    24ec:	f7ff fb26 	bl	1b3c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    24f0:	480f      	ldr	r0, [pc, #60]	; (2530 <clk_init+0x54>)
    24f2:	f001 fa83 	bl	39fc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    24f6:	4b0f      	ldr	r3, [pc, #60]	; (2534 <clk_init+0x58>)
    24f8:	4298      	cmp	r0, r3
    24fa:	d115      	bne.n	2528 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    24fc:	f004 fbdb 	bl	6cb6 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2500:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2502:	490d      	ldr	r1, [pc, #52]	; (2538 <clk_init+0x5c>)
    2504:	4630      	mov	r0, r6
    2506:	f004 f828 	bl	655a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    250a:	2800      	cmp	r0, #0
    250c:	db0b      	blt.n	2526 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    250e:	2501      	movs	r5, #1
    2510:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    2512:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2514:	4908      	ldr	r1, [pc, #32]	; (2538 <clk_init+0x5c>)
    2516:	f104 001c 	add.w	r0, r4, #28
    251a:	f004 f81e 	bl	655a <onoff_manager_init>
		if (err < 0) {
    251e:	2800      	cmp	r0, #0
    2520:	db01      	blt.n	2526 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2522:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2524:	2000      	movs	r0, #0
}
    2526:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2528:	f06f 0004 	mvn.w	r0, #4
    252c:	e7fb      	b.n	2526 <clk_init+0x4a>
    252e:	bf00      	nop
    2530:	00002579 	.word	0x00002579
    2534:	0bad0000 	.word	0x0bad0000
    2538:	000072cc 	.word	0x000072cc

0000253c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    253c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    253e:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    2540:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2542:	480b      	ldr	r0, [pc, #44]	; (2570 <clkstarted_handle.constprop.0+0x34>)
    2544:	434b      	muls	r3, r1
    2546:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2548:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    254c:	2600      	movs	r6, #0
	set_on_state(&sub_data->flags);
    254e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2550:	63a6      	str	r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2552:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    2554:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    2556:	f004 f9a2 	bl	689e <set_on_state>
	if (callback) {
    255a:	b135      	cbz	r5, 256a <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    255c:	9a01      	ldr	r2, [sp, #4]
    255e:	4805      	ldr	r0, [pc, #20]	; (2574 <clkstarted_handle.constprop.0+0x38>)
    2560:	462b      	mov	r3, r5
}
    2562:	b002      	add	sp, #8
    2564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2568:	4718      	bx	r3
}
    256a:	b002      	add	sp, #8
    256c:	bd70      	pop	{r4, r5, r6, pc}
    256e:	bf00      	nop
    2570:	20000e4c 	.word	0x20000e4c
    2574:	00006e7c 	.word	0x00006e7c

00002578 <clock_event_handler>:
	switch (event) {
    2578:	b110      	cbz	r0, 2580 <clock_event_handler+0x8>
    257a:	2801      	cmp	r0, #1
    257c:	d004      	beq.n	2588 <clock_event_handler+0x10>
    257e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2580:	4b03      	ldr	r3, [pc, #12]	; (2590 <clock_event_handler+0x18>)
    2582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2584:	075b      	lsls	r3, r3, #29
    2586:	d101      	bne.n	258c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2588:	f7ff bfd8 	b.w	253c <clkstarted_handle.constprop.0>
}
    258c:	4770      	bx	lr
    258e:	bf00      	nop
    2590:	20000e4c 	.word	0x20000e4c

00002594 <generic_hfclk_start>:
{
    2594:	b508      	push	{r3, lr}
	__asm__ volatile(
    2596:	f04f 0320 	mov.w	r3, #32
    259a:	f3ef 8111 	mrs	r1, BASEPRI
    259e:	f383 8812 	msr	BASEPRI_MAX, r3
    25a2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    25a6:	4a12      	ldr	r2, [pc, #72]	; (25f0 <generic_hfclk_start+0x5c>)
    25a8:	6813      	ldr	r3, [r2, #0]
    25aa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    25ae:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    25b2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    25b4:	d00c      	beq.n	25d0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    25b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    25ba:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    25be:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    25c2:	f013 0301 	ands.w	r3, r3, #1
    25c6:	d003      	beq.n	25d0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    25c8:	480a      	ldr	r0, [pc, #40]	; (25f4 <generic_hfclk_start+0x60>)
    25ca:	f004 f968 	bl	689e <set_on_state>
			already_started = true;
    25ce:	2301      	movs	r3, #1
	__asm__ volatile(
    25d0:	f381 8811 	msr	BASEPRI, r1
    25d4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    25d8:	b123      	cbz	r3, 25e4 <generic_hfclk_start+0x50>
}
    25da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    25de:	2000      	movs	r0, #0
    25e0:	f7ff bfac 	b.w	253c <clkstarted_handle.constprop.0>
}
    25e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    25e8:	2001      	movs	r0, #1
    25ea:	f001 ba17 	b.w	3a1c <nrfx_clock_start>
    25ee:	bf00      	nop
    25f0:	20000e9c 	.word	0x20000e9c
    25f4:	20000e8c 	.word	0x20000e8c

000025f8 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25f8:	4b09      	ldr	r3, [pc, #36]	; (2620 <generic_hfclk_stop+0x28>)
    25fa:	f3bf 8f5b 	dmb	ish
    25fe:	e853 2f00 	ldrex	r2, [r3]
    2602:	f022 0102 	bic.w	r1, r2, #2
    2606:	e843 1000 	strex	r0, r1, [r3]
    260a:	2800      	cmp	r0, #0
    260c:	d1f7      	bne.n	25fe <generic_hfclk_stop+0x6>
    260e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2612:	07d3      	lsls	r3, r2, #31
    2614:	d402      	bmi.n	261c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2616:	2001      	movs	r0, #1
    2618:	f001 ba32 	b.w	3a80 <nrfx_clock_stop>
}
    261c:	4770      	bx	lr
    261e:	bf00      	nop
    2620:	20000e9c 	.word	0x20000e9c

00002624 <z_nrf_clock_control_lf_on>:
{
    2624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2628:	4937      	ldr	r1, [pc, #220]	; (2708 <z_nrf_clock_control_lf_on+0xe4>)
    262a:	f3bf 8f5b 	dmb	ish
    262e:	4606      	mov	r6, r0
    2630:	2201      	movs	r2, #1
    2632:	e851 3f00 	ldrex	r3, [r1]
    2636:	e841 2000 	strex	r0, r2, [r1]
    263a:	2800      	cmp	r0, #0
    263c:	d1f9      	bne.n	2632 <z_nrf_clock_control_lf_on+0xe>
    263e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2642:	b933      	cbnz	r3, 2652 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2644:	4931      	ldr	r1, [pc, #196]	; (270c <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    2646:	4832      	ldr	r0, [pc, #200]	; (2710 <z_nrf_clock_control_lf_on+0xec>)
    2648:	604b      	str	r3, [r1, #4]
    264a:	60cb      	str	r3, [r1, #12]
    264c:	608a      	str	r2, [r1, #8]
    264e:	f003 ff97 	bl	6580 <onoff_request>
	switch (start_mode) {
    2652:	1e73      	subs	r3, r6, #1
    2654:	2b01      	cmp	r3, #1
    2656:	d832      	bhi.n	26be <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2658:	2e01      	cmp	r6, #1
    265a:	d107      	bne.n	266c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    265c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2660:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2664:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2668:	2b01      	cmp	r3, #1
    266a:	d028      	beq.n	26be <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    266c:	f004 fb9c 	bl	6da8 <k_is_in_isr>
    2670:	4604      	mov	r4, r0
    2672:	b918      	cbnz	r0, 267c <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    2674:	4b27      	ldr	r3, [pc, #156]	; (2714 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	2b00      	cmp	r3, #0
    267a:	d13e      	bne.n	26fa <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    267c:	f04f 0320 	mov.w	r3, #32
    2680:	f3ef 8511 	mrs	r5, BASEPRI
    2684:	f383 8812 	msr	BASEPRI_MAX, r3
    2688:	f3bf 8f6f 	isb	sy
    268c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    268e:	4f22      	ldr	r7, [pc, #136]	; (2718 <z_nrf_clock_control_lf_on+0xf4>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2690:	f8df 8088 	ldr.w	r8, [pc, #136]	; 271c <z_nrf_clock_control_lf_on+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2694:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2720 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    269c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    26a0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    26a4:	03d2      	lsls	r2, r2, #15
    26a6:	d50c      	bpl.n	26c2 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    26a8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    26ac:	2b01      	cmp	r3, #1
    26ae:	d001      	beq.n	26b4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    26b0:	2e01      	cmp	r6, #1
    26b2:	d106      	bne.n	26c2 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    26b4:	b1dc      	cbz	r4, 26ee <z_nrf_clock_control_lf_on+0xca>
	__asm__ volatile(
    26b6:	f385 8811 	msr	BASEPRI, r5
    26ba:	f3bf 8f6f 	isb	sy
}
    26be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    26c2:	4628      	mov	r0, r5
    26c4:	f7ff fa02 	bl	1acc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    26c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    26cc:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    26d0:	2b00      	cmp	r3, #0
    26d2:	d1e1      	bne.n	2698 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26d4:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    26d6:	2900      	cmp	r1, #0
    26d8:	d0de      	beq.n	2698 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26da:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    26dc:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    26de:	2301      	movs	r3, #1
    26e0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    26e4:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26e8:	f8c9 3000 	str.w	r3, [r9]
}
    26ec:	e7d4      	b.n	2698 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENSET = mask;
    26ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26f2:	2202      	movs	r2, #2
    26f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    26f8:	e7e1      	b.n	26be <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    26fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26fe:	2202      	movs	r2, #2
    2700:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2704:	4605      	mov	r5, r0
}
    2706:	e7c2      	b.n	268e <z_nrf_clock_control_lf_on+0x6a>
    2708:	20000ea0 	.word	0x20000ea0
    270c:	20000e3c 	.word	0x20000e3c
    2710:	20000e68 	.word	0x20000e68
    2714:	20000fff 	.word	0x20000fff
    2718:	40000104 	.word	0x40000104
    271c:	e000e100 	.word	0xe000e100
    2720:	40000008 	.word	0x40000008

00002724 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2724:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2726:	4b08      	ldr	r3, [pc, #32]	; (2748 <uart_console_init+0x24>)
    2728:	4808      	ldr	r0, [pc, #32]	; (274c <uart_console_init+0x28>)
    272a:	6018      	str	r0, [r3, #0]
    272c:	f004 fb32 	bl	6d94 <z_device_ready>
    2730:	b138      	cbz	r0, 2742 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2732:	4807      	ldr	r0, [pc, #28]	; (2750 <uart_console_init+0x2c>)
    2734:	f7ff fdd2 	bl	22dc <__stdout_hook_install>
	__printk_hook_install(console_out);
    2738:	4805      	ldr	r0, [pc, #20]	; (2750 <uart_console_init+0x2c>)
    273a:	f7fe fe13 	bl	1364 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    273e:	2000      	movs	r0, #0
}
    2740:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2742:	f06f 0012 	mvn.w	r0, #18
    2746:	e7fb      	b.n	2740 <uart_console_init+0x1c>
    2748:	20000ea4 	.word	0x20000ea4
    274c:	00006ec4 	.word	0x00006ec4
    2750:	00002755 	.word	0x00002755

00002754 <console_out>:
	if ('\n' == c) {
    2754:	280a      	cmp	r0, #10
{
    2756:	b538      	push	{r3, r4, r5, lr}
    2758:	4d07      	ldr	r5, [pc, #28]	; (2778 <console_out+0x24>)
    275a:	4604      	mov	r4, r0
	if ('\n' == c) {
    275c:	d104      	bne.n	2768 <console_out+0x14>
    275e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2760:	6883      	ldr	r3, [r0, #8]
    2762:	210d      	movs	r1, #13
    2764:	685b      	ldr	r3, [r3, #4]
    2766:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2768:	6828      	ldr	r0, [r5, #0]
    276a:	6883      	ldr	r3, [r0, #8]
    276c:	b2e1      	uxtb	r1, r4
    276e:	685b      	ldr	r3, [r3, #4]
    2770:	4798      	blx	r3
}
    2772:	4620      	mov	r0, r4
    2774:	bd38      	pop	{r3, r4, r5, pc}
    2776:	bf00      	nop
    2778:	20000ea4 	.word	0x20000ea4

0000277c <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    277c:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    277e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2780:	d002      	beq.n	2788 <nrfx_gpio_handler+0xc>
    2782:	2b01      	cmp	r3, #1
    2784:	d01d      	beq.n	27c2 <nrfx_gpio_handler+0x46>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    2786:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2788:	4e0f      	ldr	r6, [pc, #60]	; (27c8 <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    278a:	6933      	ldr	r3, [r6, #16]
    278c:	6859      	ldr	r1, [r3, #4]
    278e:	2900      	cmp	r1, #0
    2790:	d0f9      	beq.n	2786 <nrfx_gpio_handler+0xa>
    2792:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2794:	f000 031f 	and.w	r3, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    2798:	2501      	movs	r5, #1
    279a:	2c00      	cmp	r4, #0
    279c:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
    27a0:	bf38      	it	cc
    27a2:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    27a4:	688a      	ldr	r2, [r1, #8]
    27a6:	402a      	ands	r2, r5
    27a8:	d002      	beq.n	27b0 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    27aa:	684b      	ldr	r3, [r1, #4]
    27ac:	4630      	mov	r0, r6
    27ae:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    27b0:	2c00      	cmp	r4, #0
    27b2:	d0e8      	beq.n	2786 <nrfx_gpio_handler+0xa>
    27b4:	6823      	ldr	r3, [r4, #0]
    27b6:	2b00      	cmp	r3, #0
    27b8:	bf38      	it	cc
    27ba:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    27bc:	4621      	mov	r1, r4
    27be:	461c      	mov	r4, r3
    27c0:	e7f0      	b.n	27a4 <nrfx_gpio_handler+0x28>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    27c2:	4e02      	ldr	r6, [pc, #8]	; (27cc <nrfx_gpio_handler+0x50>)
    27c4:	e7e1      	b.n	278a <nrfx_gpio_handler+0xe>
    27c6:	bf00      	nop
    27c8:	00006e94 	.word	0x00006e94
    27cc:	00006eac 	.word	0x00006eac

000027d0 <gpio_nrfx_pin_interrupt_configure>:
{
    27d0:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27d2:	6840      	ldr	r0, [r0, #4]
    27d4:	7b04      	ldrb	r4, [r0, #12]
    27d6:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    27da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27de:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    27e2:	b085      	sub	sp, #20
    27e4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    27e8:	d104      	bne.n	27f4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    27ea:	4628      	mov	r0, r5
    27ec:	f001 fbea 	bl	3fc4 <nrfx_gpiote_trigger_disable>
	return 0;
    27f0:	2000      	movs	r0, #0
    27f2:	e032      	b.n	285a <CONFIG_MAIN_STACK_SIZE+0x5a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    27f4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    27f8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    27fc:	d12f      	bne.n	285e <CONFIG_MAIN_STACK_SIZE+0x5e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    27fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2802:	bf0c      	ite	eq
    2804:	2304      	moveq	r3, #4
    2806:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2808:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    280c:	6883      	ldr	r3, [r0, #8]
    280e:	fa23 f101 	lsr.w	r1, r3, r1
    2812:	07c9      	lsls	r1, r1, #31
    2814:	d42f      	bmi.n	2876 <CONFIG_MAIN_STACK_SIZE+0x76>
    2816:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    281a:	d12c      	bne.n	2876 <CONFIG_MAIN_STACK_SIZE+0x76>

    return pin_number >> 5;
    281c:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    281e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2820:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    2824:	4a1c      	ldr	r2, [pc, #112]	; (2898 <CONFIG_MAIN_STACK_SIZE+0x98>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2826:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    282a:	bf18      	it	ne
    282c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2834:	07db      	lsls	r3, r3, #31
    2836:	d41e      	bmi.n	2876 <CONFIG_MAIN_STACK_SIZE+0x76>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2838:	f10d 0407 	add.w	r4, sp, #7
    283c:	4621      	mov	r1, r4
    283e:	4628      	mov	r0, r5
    2840:	f001 fb2c 	bl	3e9c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2844:	4b15      	ldr	r3, [pc, #84]	; (289c <CONFIG_MAIN_STACK_SIZE+0x9c>)
    2846:	4298      	cmp	r0, r3
    2848:	d114      	bne.n	2874 <CONFIG_MAIN_STACK_SIZE+0x74>
			err = nrfx_gpiote_channel_alloc(&ch);
    284a:	4620      	mov	r0, r4
    284c:	f001 fb70 	bl	3f30 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2850:	4b13      	ldr	r3, [pc, #76]	; (28a0 <CONFIG_MAIN_STACK_SIZE+0xa0>)
    2852:	4298      	cmp	r0, r3
    2854:	d00e      	beq.n	2874 <CONFIG_MAIN_STACK_SIZE+0x74>
				return -ENOMEM;
    2856:	f06f 000b 	mvn.w	r0, #11
}
    285a:	b005      	add	sp, #20
    285c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    285e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2862:	d005      	beq.n	2870 <CONFIG_MAIN_STACK_SIZE+0x70>
    2864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2868:	bf0c      	ite	eq
    286a:	2302      	moveq	r3, #2
    286c:	2301      	movne	r3, #1
    286e:	e7cb      	b.n	2808 <CONFIG_MAIN_STACK_SIZE+0x8>
    2870:	2303      	movs	r3, #3
    2872:	e7c9      	b.n	2808 <CONFIG_MAIN_STACK_SIZE+0x8>
		trigger_config.p_in_channel = &ch;
    2874:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2876:	2300      	movs	r3, #0
    2878:	4619      	mov	r1, r3
    287a:	aa02      	add	r2, sp, #8
    287c:	4628      	mov	r0, r5
    287e:	f001 f9eb 	bl	3c58 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2882:	4b07      	ldr	r3, [pc, #28]	; (28a0 <CONFIG_MAIN_STACK_SIZE+0xa0>)
    2884:	4298      	cmp	r0, r3
    2886:	d104      	bne.n	2892 <CONFIG_MAIN_STACK_SIZE+0x92>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2888:	2101      	movs	r1, #1
    288a:	4628      	mov	r0, r5
    288c:	f001 fb56 	bl	3f3c <nrfx_gpiote_trigger_enable>
    2890:	e7ae      	b.n	27f0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2892:	f06f 0004 	mvn.w	r0, #4
    2896:	e7e0      	b.n	285a <CONFIG_MAIN_STACK_SIZE+0x5a>
    2898:	50000300 	.word	0x50000300
    289c:	0bad0004 	.word	0x0bad0004
    28a0:	0bad0000 	.word	0x0bad0000

000028a4 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    28a4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    28a6:	f001 fb33 	bl	3f10 <nrfx_gpiote_is_init>
    28aa:	4604      	mov	r4, r0
    28ac:	b968      	cbnz	r0, 28ca <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    28ae:	f001 fb07 	bl	3ec0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    28b2:	4b08      	ldr	r3, [pc, #32]	; (28d4 <gpio_nrfx_init+0x30>)
    28b4:	4298      	cmp	r0, r3
    28b6:	d10a      	bne.n	28ce <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    28b8:	4807      	ldr	r0, [pc, #28]	; (28d8 <gpio_nrfx_init+0x34>)
    28ba:	4621      	mov	r1, r4
    28bc:	f001 fae8 	bl	3e90 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    28c0:	4622      	mov	r2, r4
    28c2:	2105      	movs	r1, #5
    28c4:	2006      	movs	r0, #6
    28c6:	f7ff f957 	bl	1b78 <z_arm_irq_priority_set>
		return 0;
    28ca:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    28cc:	bd10      	pop	{r4, pc}
		return -EIO;
    28ce:	f06f 0004 	mvn.w	r0, #4
    28d2:	e7fb      	b.n	28cc <gpio_nrfx_init+0x28>
    28d4:	0bad0000 	.word	0x0bad0000
    28d8:	0000277d 	.word	0x0000277d

000028dc <gpio_nrfx_pin_configure>:
{
    28dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    28e0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28e2:	7b3b      	ldrb	r3, [r7, #12]
    28e4:	f001 051f 	and.w	r5, r1, #31
{
    28e8:	b085      	sub	sp, #20
    28ea:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28ec:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    28f0:	4614      	mov	r4, r2
    28f2:	b9ca      	cbnz	r2, 2928 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    28f4:	a902      	add	r1, sp, #8
    28f6:	4628      	mov	r0, r5
    28f8:	f001 fad0 	bl	3e9c <nrfx_gpiote_channel_get>
    28fc:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    28fe:	4628      	mov	r0, r5
    2900:	f001 fb82 	bl	4008 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2904:	4b48      	ldr	r3, [pc, #288]	; (2a28 <gpio_nrfx_pin_configure+0x14c>)
    2906:	4298      	cmp	r0, r3
    2908:	d004      	beq.n	2914 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    290a:	f06f 0004 	mvn.w	r0, #4
}
    290e:	b005      	add	sp, #20
    2910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2914:	4284      	cmp	r4, r0
    2916:	d105      	bne.n	2924 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2918:	f89d 0008 	ldrb.w	r0, [sp, #8]
    291c:	f001 fb02 	bl	3f24 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2920:	42a0      	cmp	r0, r4
    2922:	d1f2      	bne.n	290a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2924:	2000      	movs	r0, #0
    2926:	e7f2      	b.n	290e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2928:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    292c:	f10d 0103 	add.w	r1, sp, #3
    2930:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2932:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2936:	f001 fab1 	bl	3e9c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    293a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    293c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    293e:	aa02      	add	r2, sp, #8
    2940:	4649      	mov	r1, r9
    2942:	4628      	mov	r0, r5
    2944:	f001 f988 	bl	3c58 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2948:	4b37      	ldr	r3, [pc, #220]	; (2a28 <gpio_nrfx_pin_configure+0x14c>)
    294a:	4298      	cmp	r0, r3
    294c:	d002      	beq.n	2954 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    294e:	f06f 0015 	mvn.w	r0, #21
    2952:	e7dc      	b.n	290e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2954:	4580      	cmp	r8, r0
    2956:	d103      	bne.n	2960 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2958:	f89d 0003 	ldrb.w	r0, [sp, #3]
    295c:	f001 fae2 	bl	3f24 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2960:	05a3      	lsls	r3, r4, #22
    2962:	d54e      	bpl.n	2a02 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2964:	4b31      	ldr	r3, [pc, #196]	; (2a2c <gpio_nrfx_pin_configure+0x150>)
    2966:	4a32      	ldr	r2, [pc, #200]	; (2a30 <gpio_nrfx_pin_configure+0x154>)
    2968:	4023      	ands	r3, r4
    296a:	4293      	cmp	r3, r2
    296c:	d03a      	beq.n	29e4 <gpio_nrfx_pin_configure+0x108>
    296e:	d80c      	bhi.n	298a <gpio_nrfx_pin_configure+0xae>
    2970:	2b06      	cmp	r3, #6
    2972:	d014      	beq.n	299e <gpio_nrfx_pin_configure+0xc2>
    2974:	d804      	bhi.n	2980 <gpio_nrfx_pin_configure+0xa4>
    2976:	b193      	cbz	r3, 299e <gpio_nrfx_pin_configure+0xc2>
    2978:	2b02      	cmp	r3, #2
    297a:	d1e8      	bne.n	294e <gpio_nrfx_pin_configure+0x72>
    297c:	2304      	movs	r3, #4
    297e:	e00e      	b.n	299e <gpio_nrfx_pin_configure+0xc2>
    2980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2984:	d1e3      	bne.n	294e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2986:	2301      	movs	r3, #1
    2988:	e009      	b.n	299e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    298a:	4a2a      	ldr	r2, [pc, #168]	; (2a34 <gpio_nrfx_pin_configure+0x158>)
    298c:	4293      	cmp	r3, r2
    298e:	d02b      	beq.n	29e8 <gpio_nrfx_pin_configure+0x10c>
    2990:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2994:	d02a      	beq.n	29ec <gpio_nrfx_pin_configure+0x110>
    2996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    299a:	d1d8      	bne.n	294e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    299c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    299e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    29a2:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    29a6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    29aa:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    29ac:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    29b0:	bf54      	ite	pl
    29b2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    29b6:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29b8:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    29ba:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29be:	d517      	bpl.n	29f0 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	2101      	movs	r1, #1
    29c4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    29c8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    29cc:	2200      	movs	r2, #0
    29ce:	a901      	add	r1, sp, #4
    29d0:	4628      	mov	r0, r5
    29d2:	f001 f9ed 	bl	3db0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    29d6:	4b14      	ldr	r3, [pc, #80]	; (2a28 <gpio_nrfx_pin_configure+0x14c>)
    29d8:	4298      	cmp	r0, r3
    29da:	bf14      	ite	ne
    29dc:	f06f 0015 	mvnne.w	r0, #21
    29e0:	2000      	moveq	r0, #0
    29e2:	e794      	b.n	290e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    29e4:	2307      	movs	r3, #7
    29e6:	e7da      	b.n	299e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    29e8:	2305      	movs	r3, #5
    29ea:	e7d8      	b.n	299e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    29ec:	2303      	movs	r3, #3
    29ee:	e7d6      	b.n	299e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    29f0:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    29f2:	bf41      	itttt	mi
    29f4:	687b      	ldrmi	r3, [r7, #4]
    29f6:	2101      	movmi	r1, #1
    29f8:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    29fc:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2a00:	e7e4      	b.n	29cc <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    2a02:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a04:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2a08:	bf54      	ite	pl
    2a0a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2a0e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a10:	461a      	mov	r2, r3
    2a12:	a901      	add	r1, sp, #4
    2a14:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2a16:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a1a:	f001 f91d 	bl	3c58 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a1e:	4b02      	ldr	r3, [pc, #8]	; (2a28 <gpio_nrfx_pin_configure+0x14c>)
    2a20:	4298      	cmp	r0, r3
    2a22:	f43f af7f 	beq.w	2924 <gpio_nrfx_pin_configure+0x48>
    2a26:	e792      	b.n	294e <gpio_nrfx_pin_configure+0x72>
    2a28:	0bad0000 	.word	0x0bad0000
    2a2c:	00f00006 	.word	0x00f00006
    2a30:	00100006 	.word	0x00100006
    2a34:	00400002 	.word	0x00400002

00002a38 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2a38:	4b02      	ldr	r3, [pc, #8]	; (2a44 <flash_nrf_pages_layout+0xc>)
    2a3a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2a3c:	2301      	movs	r3, #1
    2a3e:	6013      	str	r3, [r2, #0]
}
    2a40:	4770      	bx	lr
    2a42:	bf00      	nop
    2a44:	20000ec0 	.word	0x20000ec0

00002a48 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2a48:	4800      	ldr	r0, [pc, #0]	; (2a4c <flash_nrf_get_parameters+0x4>)
    2a4a:	4770      	bx	lr
    2a4c:	00007334 	.word	0x00007334

00002a50 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2a50:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2a52:	f004 f99a 	bl	6d8a <nrfx_nvmc_flash_page_count_get>
    2a56:	4c03      	ldr	r4, [pc, #12]	; (2a64 <nrf_flash_init+0x14>)
    2a58:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2a5a:	f004 f992 	bl	6d82 <nrfx_nvmc_flash_page_size_get>
    2a5e:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2a60:	2000      	movs	r0, #0
    2a62:	bd10      	pop	{r4, pc}
    2a64:	20000ec0 	.word	0x20000ec0

00002a68 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    2a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a6c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    2a70:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    2a74:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    2a78:	f023 031f 	bic.w	r3, r3, #31
    2a7c:	430b      	orrs	r3, r1
    pofcon |=
    2a7e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    2a82:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    2a86:	4b02      	ldr	r3, [pc, #8]	; (2a90 <restore_pofwarn.part.0+0x28>)
    2a88:	2200      	movs	r2, #0
    2a8a:	701a      	strb	r2, [r3, #0]
	}
}
    2a8c:	4770      	bx	lr
    2a8e:	bf00      	nop
    2a90:	20000ffe 	.word	0x20000ffe

00002a94 <suspend_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    2a94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2a98:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
	if (enabled) {
    2a9c:	f012 0001 	ands.w	r0, r2, #1
    2aa0:	d01a      	beq.n	2ad8 <suspend_pofwarn.part.0+0x44>
    uint32_t pofcon = p_reg->POFCON;
    2aa2:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2aa6:	4b0d      	ldr	r3, [pc, #52]	; (2adc <suspend_pofwarn.part.0+0x48>)
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    2aa8:	f020 001f 	bic.w	r0, r0, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    2aac:	f002 021e 	and.w	r2, r2, #30
    pofcon |=
    2ab0:	4310      	orrs	r0, r2
    p_reg->POFCON = pofcon;
    2ab2:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ab6:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    2ab8:	b158      	cbz	r0, 2ad2 <suspend_pofwarn.part.0+0x3e>
    uint32_t pofcon = p_reg->POFCON;
    2aba:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    2abe:	f023 031f 	bic.w	r3, r3, #31
    2ac2:	4313      	orrs	r3, r2
    pofcon |=
    2ac4:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    2ac8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			return -ECANCELED;
    2acc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2ad0:	4770      	bx	lr
		pofcon_enabled = enabled;
    2ad2:	4b03      	ldr	r3, [pc, #12]	; (2ae0 <suspend_pofwarn.part.0+0x4c>)
    2ad4:	2201      	movs	r2, #1
    2ad6:	701a      	strb	r2, [r3, #0]
}
    2ad8:	4770      	bx	lr
    2ada:	bf00      	nop
    2adc:	40000108 	.word	0x40000108
    2ae0:	20000ffe 	.word	0x20000ffe

00002ae4 <flash_nrf_erase>:
{
    2ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae8:	460e      	mov	r6, r1
    2aea:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2aec:	f004 f949 	bl	6d82 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    2af0:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2af2:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    2af4:	4630      	mov	r0, r6
    2af6:	f003 ff78 	bl	69ea <is_regular_addr_valid>
    2afa:	4637      	mov	r7, r6
    2afc:	b390      	cbz	r0, 2b64 <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2afe:	fbb6 f3f5 	udiv	r3, r6, r5
    2b02:	fb05 6313 	mls	r3, r5, r3, r6
    2b06:	b923      	cbnz	r3, 2b12 <flash_nrf_erase+0x2e>
    2b08:	fbb4 f3f5 	udiv	r3, r4, r5
    2b0c:	fb05 4013 	mls	r0, r5, r3, r4
    2b10:	b140      	cbz	r0, 2b24 <flash_nrf_erase+0x40>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    2b12:	4817      	ldr	r0, [pc, #92]	; (2b70 <flash_nrf_erase+0x8c>)
    2b14:	4623      	mov	r3, r4
    2b16:	4632      	mov	r2, r6
    2b18:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2b1a:	f003 fd7b 	bl	6614 <z_log_minimal_printk>
    2b1e:	f06f 0015 	mvn.w	r0, #21
    2b22:	e016      	b.n	2b52 <flash_nrf_erase+0x6e>
		if (!n_pages) {
    2b24:	42a5      	cmp	r5, r4
    2b26:	d814      	bhi.n	2b52 <flash_nrf_erase+0x6e>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2b28:	f004 f92b 	bl	6d82 <nrfx_nvmc_flash_page_size_get>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2b2c:	4e11      	ldr	r6, [pc, #68]	; (2b74 <flash_nrf_erase+0x90>)
	if (pofcon_enabled) {
    2b2e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2b7c <flash_nrf_erase+0x98>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2b32:	4605      	mov	r5, r0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2b34:	6833      	ldr	r3, [r6, #0]
    2b36:	2b08      	cmp	r3, #8
    2b38:	d00d      	beq.n	2b56 <flash_nrf_erase+0x72>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    2b3a:	4638      	mov	r0, r7
    2b3c:	f001 fb60 	bl	4200 <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
    2b40:	f898 3000 	ldrb.w	r3, [r8]
    2b44:	b10b      	cbz	r3, 2b4a <flash_nrf_erase+0x66>
    2b46:	f7ff ff8f 	bl	2a68 <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
    2b4a:	1b64      	subs	r4, r4, r5
    2b4c:	442f      	add	r7, r5
    2b4e:	d1f1      	bne.n	2b34 <flash_nrf_erase+0x50>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    2b50:	4620      	mov	r0, r4
}
    2b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
    2b56:	f7ff ff9d 	bl	2a94 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d0ed      	beq.n	2b3a <flash_nrf_erase+0x56>
			return -ECANCELED;
    2b5e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return ret;
    2b62:	e7f6      	b.n	2b52 <flash_nrf_erase+0x6e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2b64:	4804      	ldr	r0, [pc, #16]	; (2b78 <flash_nrf_erase+0x94>)
    2b66:	4623      	mov	r3, r4
    2b68:	4632      	mov	r2, r6
    2b6a:	2145      	movs	r1, #69	; 0x45
    2b6c:	e7d5      	b.n	2b1a <flash_nrf_erase+0x36>
    2b6e:	bf00      	nop
    2b70:	00008048 	.word	0x00008048
    2b74:	10000130 	.word	0x10000130
    2b78:	0000806c 	.word	0x0000806c
    2b7c:	20000ffe 	.word	0x20000ffe

00002b80 <flash_nrf_read>:
{
    2b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b82:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
    2b84:	4620      	mov	r0, r4
    2b86:	4619      	mov	r1, r3
    2b88:	9301      	str	r3, [sp, #4]
{
    2b8a:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
    2b8c:	f003 ff2d 	bl	69ea <is_regular_addr_valid>
    2b90:	9b01      	ldr	r3, [sp, #4]
    2b92:	b940      	cbnz	r0, 2ba6 <flash_nrf_read+0x26>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2b94:	4809      	ldr	r0, [pc, #36]	; (2bbc <flash_nrf_read+0x3c>)
    2b96:	4622      	mov	r2, r4
    2b98:	2145      	movs	r1, #69	; 0x45
    2b9a:	f003 fd3b 	bl	6614 <z_log_minimal_printk>
    2b9e:	f06f 0015 	mvn.w	r0, #21
}
    2ba2:	b003      	add	sp, #12
    2ba4:	bd30      	pop	{r4, r5, pc}
	if (!len) {
    2ba6:	b133      	cbz	r3, 2bb6 <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    2ba8:	461a      	mov	r2, r3
    2baa:	4621      	mov	r1, r4
    2bac:	4628      	mov	r0, r5
    2bae:	f003 fe1f 	bl	67f0 <memcpy>
	return 0;
    2bb2:	2000      	movs	r0, #0
    2bb4:	e7f5      	b.n	2ba2 <flash_nrf_read+0x22>
		return 0;
    2bb6:	4618      	mov	r0, r3
    2bb8:	e7f3      	b.n	2ba2 <flash_nrf_read+0x22>
    2bba:	bf00      	nop
    2bbc:	0000806c 	.word	0x0000806c

00002bc0 <flash_nrf_write>:
{
    2bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2bc4:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2bc6:	4630      	mov	r0, r6
    2bc8:	4619      	mov	r1, r3
{
    2bca:	4617      	mov	r7, r2
    2bcc:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2bce:	f003 ff0c 	bl	69ea <is_regular_addr_valid>
    2bd2:	b948      	cbnz	r0, 2be8 <flash_nrf_write+0x28>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2bd4:	481e      	ldr	r0, [pc, #120]	; (2c50 <flash_nrf_write+0x90>)
    2bd6:	4623      	mov	r3, r4
    2bd8:	4632      	mov	r2, r6
    2bda:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2bdc:	f003 fd1a 	bl	6614 <z_log_minimal_printk>
		return -EINVAL;
    2be0:	f06f 0015 	mvn.w	r0, #21
}
    2be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (data & 0x3) ? false : true;
    2be8:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2bec:	f015 0503 	ands.w	r5, r5, #3
    2bf0:	d004      	beq.n	2bfc <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2bf2:	4818      	ldr	r0, [pc, #96]	; (2c54 <flash_nrf_write+0x94>)
    2bf4:	4623      	mov	r3, r4
    2bf6:	4632      	mov	r2, r6
    2bf8:	2145      	movs	r1, #69	; 0x45
    2bfa:	e7ef      	b.n	2bdc <flash_nrf_write+0x1c>
	if (!len) {
    2bfc:	b334      	cbz	r4, 2c4c <flash_nrf_write+0x8c>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2bfe:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2c5c <flash_nrf_write+0x9c>
	if (pofcon_enabled) {
    2c02:	f8df a05c 	ldr.w	sl, [pc, #92]	; 2c60 <flash_nrf_write+0xa0>
    2c06:	f024 0403 	bic.w	r4, r4, #3
	while (w_ctx->len >= sizeof(uint32_t)) {
    2c0a:	42a5      	cmp	r5, r4
    2c0c:	eb05 0806 	add.w	r8, r5, r6
    2c10:	d106      	bne.n	2c20 <flash_nrf_write+0x60>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2c12:	4a11      	ldr	r2, [pc, #68]	; (2c58 <flash_nrf_write+0x98>)
    2c14:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    2c18:	07db      	lsls	r3, r3, #31
    2c1a:	d5fb      	bpl.n	2c14 <flash_nrf_write+0x54>
	return FLASH_OP_DONE;
    2c1c:	2000      	movs	r0, #0
    2c1e:	e7e1      	b.n	2be4 <flash_nrf_write+0x24>
            if (var1 == 0x08)
    2c20:	f8d9 3000 	ldr.w	r3, [r9]
    2c24:	2b08      	cmp	r3, #8
    2c26:	d00a      	beq.n	2c3e <flash_nrf_write+0x7e>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    2c28:	5979      	ldr	r1, [r7, r5]
    2c2a:	4640      	mov	r0, r8
    2c2c:	f001 fb08 	bl	4240 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
    2c30:	f89a 3000 	ldrb.w	r3, [sl]
    2c34:	b10b      	cbz	r3, 2c3a <flash_nrf_write+0x7a>
    2c36:	f7ff ff17 	bl	2a68 <restore_pofwarn.part.0>
	w_ctx->len -= shift;
    2c3a:	3504      	adds	r5, #4
}
    2c3c:	e7e5      	b.n	2c0a <flash_nrf_write+0x4a>
                switch(var2)
    2c3e:	f7ff ff29 	bl	2a94 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
    2c42:	2800      	cmp	r0, #0
    2c44:	d0f0      	beq.n	2c28 <flash_nrf_write+0x68>
			return -ECANCELED;
    2c46:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return ret;
    2c4a:	e7cb      	b.n	2be4 <flash_nrf_write+0x24>
		return 0;
    2c4c:	4620      	mov	r0, r4
    2c4e:	e7c9      	b.n	2be4 <flash_nrf_write+0x24>
    2c50:	0000806c 	.word	0x0000806c
    2c54:	0000808e 	.word	0x0000808e
    2c58:	4001e000 	.word	0x4001e000
    2c5c:	10000130 	.word	0x10000130
    2c60:	20000ffe 	.word	0x20000ffe

00002c64 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2c64:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2c66:	794b      	ldrb	r3, [r1, #5]
    2c68:	2b01      	cmp	r3, #1
    2c6a:	d026      	beq.n	2cba <uarte_nrfx_configure+0x56>
    2c6c:	2b03      	cmp	r3, #3
    2c6e:	d121      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2c70:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2c72:	798b      	ldrb	r3, [r1, #6]
    2c74:	2b03      	cmp	r3, #3
    2c76:	d11d      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2c78:	79cc      	ldrb	r4, [r1, #7]
    2c7a:	b10c      	cbz	r4, 2c80 <uarte_nrfx_configure+0x1c>
    2c7c:	2c01      	cmp	r4, #1
    2c7e:	d119      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2c80:	790a      	ldrb	r2, [r1, #4]
    2c82:	b112      	cbz	r2, 2c8a <uarte_nrfx_configure+0x26>
    2c84:	2a02      	cmp	r2, #2
    2c86:	d115      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2c88:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2c8a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2c8c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2c8e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2c92:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2c94:	d065      	beq.n	2d62 <uarte_nrfx_configure+0xfe>
    2c96:	d82d      	bhi.n	2cf4 <uarte_nrfx_configure+0x90>
    2c98:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2c9c:	d064      	beq.n	2d68 <uarte_nrfx_configure+0x104>
    2c9e:	d816      	bhi.n	2cce <uarte_nrfx_configure+0x6a>
    2ca0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2ca4:	d062      	beq.n	2d6c <uarte_nrfx_configure+0x108>
    2ca6:	d80a      	bhi.n	2cbe <uarte_nrfx_configure+0x5a>
    2ca8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2cac:	d061      	beq.n	2d72 <uarte_nrfx_configure+0x10e>
    2cae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2cb2:	d061      	beq.n	2d78 <uarte_nrfx_configure+0x114>
    2cb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2cb8:	e052      	b.n	2d60 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2cba:	2600      	movs	r6, #0
    2cbc:	e7d9      	b.n	2c72 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2cbe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2cc2:	d05c      	beq.n	2d7e <uarte_nrfx_configure+0x11a>
    2cc4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2cc8:	d1f4      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2cca:	4b37      	ldr	r3, [pc, #220]	; (2da8 <uarte_nrfx_configure+0x144>)
    2ccc:	e03c      	b.n	2d48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cce:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2cd2:	d057      	beq.n	2d84 <uarte_nrfx_configure+0x120>
    2cd4:	d807      	bhi.n	2ce6 <uarte_nrfx_configure+0x82>
    2cd6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2cda:	d055      	beq.n	2d88 <uarte_nrfx_configure+0x124>
    2cdc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2ce0:	d1e8      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2ce2:	4b32      	ldr	r3, [pc, #200]	; (2dac <uarte_nrfx_configure+0x148>)
    2ce4:	e030      	b.n	2d48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2ce6:	f647 2712 	movw	r7, #31250	; 0x7a12
    2cea:	42bb      	cmp	r3, r7
    2cec:	d1e2      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2cee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2cf2:	e029      	b.n	2d48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cf4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2cf8:	d048      	beq.n	2d8c <uarte_nrfx_configure+0x128>
    2cfa:	d813      	bhi.n	2d24 <uarte_nrfx_configure+0xc0>
    2cfc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2d00:	d047      	beq.n	2d92 <uarte_nrfx_configure+0x12e>
    2d02:	d809      	bhi.n	2d18 <uarte_nrfx_configure+0xb4>
    2d04:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2d08:	42bb      	cmp	r3, r7
    2d0a:	d044      	beq.n	2d96 <uarte_nrfx_configure+0x132>
    2d0c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2d10:	d1d0      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2d12:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2d16:	e017      	b.n	2d48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d18:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2d1c:	d1ca      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2d1e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2d22:	e011      	b.n	2d48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d24:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2d28:	d038      	beq.n	2d9c <uarte_nrfx_configure+0x138>
    2d2a:	d808      	bhi.n	2d3e <uarte_nrfx_configure+0xda>
    2d2c:	4f20      	ldr	r7, [pc, #128]	; (2db0 <uarte_nrfx_configure+0x14c>)
    2d2e:	42bb      	cmp	r3, r7
    2d30:	d037      	beq.n	2da2 <uarte_nrfx_configure+0x13e>
    2d32:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2d36:	d1bd      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2d38:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2d3c:	e004      	b.n	2d48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d3e:	4f1d      	ldr	r7, [pc, #116]	; (2db4 <uarte_nrfx_configure+0x150>)
    2d40:	42bb      	cmp	r3, r7
    2d42:	d1b7      	bne.n	2cb4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2d48:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2d4c:	6903      	ldr	r3, [r0, #16]
    2d4e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2d50:	4334      	orrs	r4, r6
    2d52:	4322      	orrs	r2, r4
    2d54:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2d56:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2d5a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2d5e:	2000      	movs	r0, #0
}
    2d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2d62:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2d66:	e7ef      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2d68:	4b13      	ldr	r3, [pc, #76]	; (2db8 <uarte_nrfx_configure+0x154>)
    2d6a:	e7ed      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2d6c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2d70:	e7ea      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2d72:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2d76:	e7e7      	b.n	2d48 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d78:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2d7c:	e7e4      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2d7e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2d82:	e7e1      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2d84:	4b0d      	ldr	r3, [pc, #52]	; (2dbc <uarte_nrfx_configure+0x158>)
    2d86:	e7df      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2d88:	4b0d      	ldr	r3, [pc, #52]	; (2dc0 <uarte_nrfx_configure+0x15c>)
    2d8a:	e7dd      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2d8c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2d90:	e7da      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2d92:	4b0c      	ldr	r3, [pc, #48]	; (2dc4 <uarte_nrfx_configure+0x160>)
    2d94:	e7d8      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2d96:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2d9a:	e7d5      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2d9c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2da0:	e7d2      	b.n	2d48 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2da2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2da6:	e7cf      	b.n	2d48 <uarte_nrfx_configure+0xe4>
    2da8:	0013b000 	.word	0x0013b000
    2dac:	004ea000 	.word	0x004ea000
    2db0:	0003d090 	.word	0x0003d090
    2db4:	000f4240 	.word	0x000f4240
    2db8:	00275000 	.word	0x00275000
    2dbc:	0075c000 	.word	0x0075c000
    2dc0:	003af000 	.word	0x003af000
    2dc4:	013a9000 	.word	0x013a9000

00002dc8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2dca:	6906      	ldr	r6, [r0, #16]
{
    2dcc:	4605      	mov	r5, r0
    2dce:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2dd0:	f003 ffea 	bl	6da8 <k_is_in_isr>
    2dd4:	b910      	cbnz	r0, 2ddc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2dd6:	4b29      	ldr	r3, [pc, #164]	; (2e7c <uarte_nrfx_poll_out+0xb4>)
	int key;

	if (isr_mode) {
    2dd8:	781b      	ldrb	r3, [r3, #0]
    2dda:	b9a3      	cbnz	r3, 2e06 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2ddc:	f04f 0320 	mov.w	r3, #32
    2de0:	f3ef 8411 	mrs	r4, BASEPRI
    2de4:	f383 8812 	msr	BASEPRI_MAX, r3
    2de8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2dec:	4628      	mov	r0, r5
    2dee:	f003 fe84 	bl	6afa <is_tx_ready>
    2df2:	bb00      	cbnz	r0, 2e36 <uarte_nrfx_poll_out+0x6e>
	__asm__ volatile(
    2df4:	f384 8811 	msr	BASEPRI, r4
    2df8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2dfc:	e7ee      	b.n	2ddc <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2dfe:	f384 8811 	msr	BASEPRI, r4
    2e02:	f3bf 8f6f 	isb	sy
{
    2e06:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2e08:	4628      	mov	r0, r5
    2e0a:	f003 fe76 	bl	6afa <is_tx_ready>
    2e0e:	b928      	cbnz	r0, 2e1c <uarte_nrfx_poll_out+0x54>
    2e10:	2001      	movs	r0, #1
    2e12:	f003 ff4e 	bl	6cb2 <nrfx_busy_wait>
    2e16:	3c01      	subs	r4, #1
    2e18:	d1f6      	bne.n	2e08 <uarte_nrfx_poll_out+0x40>
    2e1a:	e7f4      	b.n	2e06 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2e1c:	f04f 0320 	mov.w	r3, #32
    2e20:	f3ef 8411 	mrs	r4, BASEPRI
    2e24:	f383 8812 	msr	BASEPRI_MAX, r3
    2e28:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2e2c:	4628      	mov	r0, r5
    2e2e:	f003 fe64 	bl	6afa <is_tx_ready>
    2e32:	2800      	cmp	r0, #0
    2e34:	d0e3      	beq.n	2dfe <uarte_nrfx_poll_out+0x36>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2e36:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2e3a:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2e3c:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2e3e:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e40:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e44:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e48:	2200      	movs	r2, #0
    2e4a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2e4e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2e52:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2e56:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2e5a:	684a      	ldr	r2, [r1, #4]
    2e5c:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2e5e:	bf41      	itttt	mi
    2e60:	2208      	movmi	r2, #8
    2e62:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2e66:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2e6a:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e6e:	2201      	movs	r2, #1
    2e70:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2e72:	f384 8811 	msr	BASEPRI, r4
    2e76:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    2e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e7c:	20000fff 	.word	0x20000fff

00002e80 <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
    2e80:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2e84:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2e86:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    2e88:	4b04      	ldr	r3, [pc, #16]	; (2e9c <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    2e8a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    2e8e:	bf18      	it	ne
    2e90:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2e94:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    2e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    2e9a:	4770      	bx	lr
    2e9c:	50000300 	.word	0x50000300

00002ea0 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    2ea0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2ea4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ea6:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    2ea8:	4b04      	ldr	r3, [pc, #16]	; (2ebc <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2eaa:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    2eae:	bf18      	it	ne
    2eb0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2eb4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    2eb6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    2eba:	4770      	bx	lr
    2ebc:	50000300 	.word	0x50000300

00002ec0 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    2ec0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2ec4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ec6:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    2ec8:	4b04      	ldr	r3, [pc, #16]	; (2edc <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    2eca:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    2ece:	bf18      	it	ne
    2ed0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    2ed4:	2103      	movs	r1, #3
    2ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    2eda:	4770      	bx	lr
    2edc:	50000300 	.word	0x50000300

00002ee0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ee4:	2200      	movs	r2, #0
    2ee6:	4606      	mov	r6, r0
    2ee8:	2101      	movs	r1, #1
    2eea:	2002      	movs	r0, #2
    2eec:	f7fe fe44 	bl	1b78 <z_arm_irq_priority_set>
    2ef0:	2002      	movs	r0, #2
    2ef2:	f7fe fe23 	bl	1b3c <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2ef6:	f8d6 8004 	ldr.w	r8, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2efa:	6937      	ldr	r7, [r6, #16]
	return config->uarte_regs;
    2efc:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2f00:	2300      	movs	r3, #0
    2f02:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    2f06:	603e      	str	r6, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    2f08:	6875      	ldr	r5, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2f0a:	68e8      	ldr	r0, [r5, #12]
    2f0c:	1c42      	adds	r2, r0, #1
    2f0e:	d004      	beq.n	2f1a <uarte_0_init+0x3a>
        nrf_gpio_pin_set(pin_number);
    2f10:	f7ff ffc6 	bl	2ea0 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->tx_pin);
    2f14:	68e8      	ldr	r0, [r5, #12]
    2f16:	f7ff ffd3 	bl	2ec0 <nrf_gpio_cfg_output>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2f1a:	6928      	ldr	r0, [r5, #16]
    2f1c:	1c43      	adds	r3, r0, #1
    2f1e:	d006      	beq.n	2f2e <uarte_0_init+0x4e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    2f20:	7f2b      	ldrb	r3, [r5, #28]
    2f22:	2b00      	cmp	r3, #0
    2f24:	bf14      	ite	ne
    2f26:	2103      	movne	r1, #3
    2f28:	2100      	moveq	r1, #0
    2f2a:	f7ff ffa9 	bl	2e80 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2f2e:	6968      	ldr	r0, [r5, #20]
    2f30:	1c42      	adds	r2, r0, #1
    2f32:	d004      	beq.n	2f3e <uarte_0_init+0x5e>
    2f34:	f7ff ffb4 	bl	2ea0 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->rts_pin);
    2f38:	6968      	ldr	r0, [r5, #20]
    2f3a:	f7ff ffc1 	bl	2ec0 <nrf_gpio_cfg_output>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2f3e:	69a8      	ldr	r0, [r5, #24]
    2f40:	1c43      	adds	r3, r0, #1
    2f42:	d006      	beq.n	2f52 <uarte_0_init+0x72>
			nrf_gpio_cfg_input(cfg->cts_pin,
    2f44:	7f6b      	ldrb	r3, [r5, #29]
    2f46:	2b00      	cmp	r3, #0
    2f48:	bf14      	ite	ne
    2f4a:	2103      	movne	r1, #3
    2f4c:	2100      	moveq	r1, #0
    2f4e:	f7ff ff97 	bl	2e80 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    2f52:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    2f56:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    2f58:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2f5c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    2f60:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    2f64:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2f68:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    2f6a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    2f6e:	3104      	adds	r1, #4
    2f70:	4630      	mov	r0, r6
    2f72:	f7ff fe77 	bl	2c64 <uarte_nrfx_configure>
	if (err) {
    2f76:	4605      	mov	r5, r0
    2f78:	b980      	cbnz	r0, 2f9c <uarte_0_init+0xbc>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2f7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2f7e:	0799      	lsls	r1, r3, #30
    2f80:	d522      	bpl.n	2fc8 <uarte_0_init+0xe8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2f82:	f107 0012 	add.w	r0, r7, #18
    2f86:	f001 f96d 	bl	4264 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2f8a:	4b24      	ldr	r3, [pc, #144]	; (301c <uarte_0_init+0x13c>)
    2f8c:	4298      	cmp	r0, r3
    2f8e:	d008      	beq.n	2fa2 <uarte_0_init+0xc2>
		LOG_ERR("Failed to allocate PPI Channel");
    2f90:	4823      	ldr	r0, [pc, #140]	; (3020 <uarte_0_init+0x140>)
    2f92:	2145      	movs	r1, #69	; 0x45
    2f94:	f003 fb3e 	bl	6614 <z_log_minimal_printk>
		return -EIO;
    2f98:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    2f9c:	4628      	mov	r0, r5
    2f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2fa2:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2fa4:	00c3      	lsls	r3, r0, #3
    2fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2faa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2fae:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2fb2:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2fb6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2fba:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2fbe:	4a19      	ldr	r2, [pc, #100]	; (3024 <uarte_0_init+0x144>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2fc0:	2301      	movs	r3, #1
    2fc2:	4083      	lsls	r3, r0
    2fc4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2fc8:	2308      	movs	r3, #8
    2fca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2fce:	f898 3008 	ldrb.w	r3, [r8, #8]
    2fd2:	b95b      	cbnz	r3, 2fec <uarte_0_init+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fd4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2fd8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2fdc:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2fe0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2fe4:	2301      	movs	r3, #1
    2fe6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fea:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2fec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2ff0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2ff2:	bf5c      	itt	pl
    2ff4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2ff8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2ffc:	06db      	lsls	r3, r3, #27
    2ffe:	bf44      	itt	mi
    3000:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3004:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3008:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    300a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    300c:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3010:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3014:	2301      	movs	r3, #1
    3016:	60a3      	str	r3, [r4, #8]
    3018:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    301a:	e7bf      	b.n	2f9c <uarte_0_init+0xbc>
    301c:	0bad0000 	.word	0x0bad0000
    3020:	000080bb 	.word	0x000080bb
    3024:	4001f000 	.word	0x4001f000

00003028 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3028:	4919      	ldr	r1, [pc, #100]	; (3090 <sys_clock_timeout_handler+0x68>)
{
    302a:	b570      	push	{r4, r5, r6, lr}
    302c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    302e:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3032:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3034:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3038:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    303c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    303e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3042:	f04f 0500 	mov.w	r5, #0
    3046:	d20a      	bcs.n	305e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3048:	4b12      	ldr	r3, [pc, #72]	; (3094 <sys_clock_timeout_handler+0x6c>)
    304a:	6819      	ldr	r1, [r3, #0]
    304c:	060a      	lsls	r2, r1, #24
    304e:	0a0b      	lsrs	r3, r1, #8
    3050:	1992      	adds	r2, r2, r6
    3052:	4911      	ldr	r1, [pc, #68]	; (3098 <sys_clock_timeout_handler+0x70>)
    3054:	f143 0300 	adc.w	r3, r3, #0
    3058:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    305c:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    305e:	f001 fa51 	bl	4504 <sys_clock_announce>
    return p_reg->CC[ch];
    3062:	00a3      	lsls	r3, r4, #2
    3064:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3068:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    306c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3070:	42b2      	cmp	r2, r6
    3072:	d10b      	bne.n	308c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3074:	b91d      	cbnz	r5, 307e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3076:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    307a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
    307e:	4b07      	ldr	r3, [pc, #28]	; (309c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3080:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3084:	fa00 f404 	lsl.w	r4, r0, r4
    3088:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    308c:	bd70      	pop	{r4, r5, r6, pc}
    308e:	bf00      	nop
    3090:	20000140 	.word	0x20000140
    3094:	20000ed0 	.word	0x20000ed0
    3098:	20000128 	.word	0x20000128
    309c:	40011000 	.word	0x40011000

000030a0 <compare_int_lock>:
{
    30a0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    30a2:	2301      	movs	r3, #1
    30a4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    30a6:	4a11      	ldr	r2, [pc, #68]	; (30ec <compare_int_lock+0x4c>)
    30a8:	f3bf 8f5b 	dmb	ish
    30ac:	43dc      	mvns	r4, r3
    30ae:	e852 1f00 	ldrex	r1, [r2]
    30b2:	ea01 0c04 	and.w	ip, r1, r4
    30b6:	e842 ce00 	strex	lr, ip, [r2]
    30ba:	f1be 0f00 	cmp.w	lr, #0
    30be:	d1f6      	bne.n	30ae <compare_int_lock+0xe>
    30c0:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    30c8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    30cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    30d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    30d4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    30d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30dc:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    30e0:	420b      	tst	r3, r1
}
    30e2:	bf14      	ite	ne
    30e4:	2001      	movne	r0, #1
    30e6:	2000      	moveq	r0, #0
    30e8:	bd10      	pop	{r4, pc}
    30ea:	bf00      	nop
    30ec:	20000ecc 	.word	0x20000ecc

000030f0 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    30f0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    30f2:	4a12      	ldr	r2, [pc, #72]	; (313c <compare_int_unlock.part.0+0x4c>)
    30f4:	f3bf 8f5b 	dmb	ish
    30f8:	4083      	lsls	r3, r0
    30fa:	e852 1f00 	ldrex	r1, [r2]
    30fe:	4319      	orrs	r1, r3
    3100:	e842 1c00 	strex	ip, r1, [r2]
    3104:	f1bc 0f00 	cmp.w	ip, #0
    3108:	d1f7      	bne.n	30fa <compare_int_unlock.part.0+0xa>
    310a:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    310e:	4a0c      	ldr	r2, [pc, #48]	; (3140 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3114:	4083      	lsls	r3, r0
    3116:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    311a:	4b0a      	ldr	r3, [pc, #40]	; (3144 <compare_int_unlock.part.0+0x54>)
    311c:	f3bf 8f5b 	dmb	ish
    3120:	681b      	ldr	r3, [r3, #0]
    3122:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3126:	fa23 f000 	lsr.w	r0, r3, r0
    312a:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    312c:	bf42      	ittt	mi
    312e:	4b06      	ldrmi	r3, [pc, #24]	; (3148 <compare_int_unlock.part.0+0x58>)
    3130:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3134:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3138:	4770      	bx	lr
    313a:	bf00      	nop
    313c:	20000ecc 	.word	0x20000ecc
    3140:	40011000 	.word	0x40011000
    3144:	20000ec8 	.word	0x20000ec8
    3148:	e000e100 	.word	0xe000e100

0000314c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    314c:	4b0d      	ldr	r3, [pc, #52]	; (3184 <z_nrf_rtc_timer_read+0x38>)
    314e:	681b      	ldr	r3, [r3, #0]
    3150:	0a19      	lsrs	r1, r3, #8
    3152:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3154:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3158:	4b0b      	ldr	r3, [pc, #44]	; (3188 <z_nrf_rtc_timer_read+0x3c>)
    315a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    315e:	18c0      	adds	r0, r0, r3
    3160:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3168:	d20a      	bcs.n	3180 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    316a:	4b08      	ldr	r3, [pc, #32]	; (318c <z_nrf_rtc_timer_read+0x40>)
    316c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3170:	4299      	cmp	r1, r3
    3172:	bf08      	it	eq
    3174:	4290      	cmpeq	r0, r2
    3176:	d203      	bcs.n	3180 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3178:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    317c:	f141 0100 	adc.w	r1, r1, #0
}
    3180:	4770      	bx	lr
    3182:	bf00      	nop
    3184:	20000ed0 	.word	0x20000ed0
    3188:	40011000 	.word	0x40011000
    318c:	20000128 	.word	0x20000128

00003190 <compare_set>:
{
    3190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3194:	b085      	sub	sp, #20
    3196:	4616      	mov	r6, r2
    3198:	461f      	mov	r7, r3
    319a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    319c:	f7ff ff80 	bl	30a0 <compare_int_lock>
    31a0:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    31a2:	f7ff ffd3 	bl	314c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    31a6:	42b9      	cmp	r1, r7
    31a8:	bf08      	it	eq
    31aa:	42b0      	cmpeq	r0, r6
    31ac:	d27f      	bcs.n	32ae <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    31ae:	ebb6 0800 	subs.w	r8, r6, r0
    31b2:	eb67 0901 	sbc.w	r9, r7, r1
    31b6:	2300      	movs	r3, #0
    31b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    31bc:	454b      	cmp	r3, r9
    31be:	bf08      	it	eq
    31c0:	4542      	cmpeq	r2, r8
    31c2:	f0c0 8085 	bcc.w	32d0 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    31c6:	4b44      	ldr	r3, [pc, #272]	; (32d8 <compare_set+0x148>)
    31c8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    31cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    31d0:	429f      	cmp	r7, r3
    31d2:	bf08      	it	eq
    31d4:	4296      	cmpeq	r6, r2
    31d6:	d054      	beq.n	3282 <compare_set+0xf2>
    31d8:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    31dc:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    31e0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    31e4:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    31e8:	fa0b f205 	lsl.w	r2, fp, r5
    31ec:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    31f0:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    31f4:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    31f8:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    31fa:	4a38      	ldr	r2, [pc, #224]	; (32dc <compare_set+0x14c>)
    return p_reg->CC[ch];
    31fc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    3200:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3204:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3208:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    320c:	461c      	mov	r4, r3
    320e:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    3210:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3214:	eba0 000a 	sub.w	r0, r0, sl
    3218:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    321c:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3220:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3222:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3226:	d105      	bne.n	3234 <compare_set+0xa4>
    3228:	9303      	str	r3, [sp, #12]
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    322a:	2013      	movs	r0, #19
    322c:	f003 fdc2 	bl	6db4 <z_impl_k_busy_wait>
    3230:	4a2a      	ldr	r2, [pc, #168]	; (32dc <compare_set+0x14c>)
    3232:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3234:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3236:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    323a:	eba4 000c 	sub.w	r0, r4, ip
    323e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3242:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3246:	bf88      	it	hi
    3248:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    324a:	2000      	movs	r0, #0
    324c:	f8c8 0000 	str.w	r0, [r8]
    3250:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3254:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3258:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    325c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3260:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3264:	4582      	cmp	sl, r0
    3266:	d006      	beq.n	3276 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3268:	1a20      	subs	r0, r4, r0
    326a:	3802      	subs	r0, #2
    326c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3270:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3274:	d819      	bhi.n	32aa <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3276:	1ae4      	subs	r4, r4, r3
    3278:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    327c:	1932      	adds	r2, r6, r4
    327e:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3282:	4c15      	ldr	r4, [pc, #84]	; (32d8 <compare_set+0x148>)
    3284:	0129      	lsls	r1, r5, #4
    3286:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    328a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    328e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    3292:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3294:	6043      	str	r3, [r0, #4]
	return ret;
    3296:	2400      	movs	r4, #0
	if (key) {
    3298:	9b01      	ldr	r3, [sp, #4]
    329a:	b113      	cbz	r3, 32a2 <compare_set+0x112>
    329c:	4628      	mov	r0, r5
    329e:	f7ff ff27 	bl	30f0 <compare_int_unlock.part.0>
}
    32a2:	4620      	mov	r0, r4
    32a4:	b005      	add	sp, #20
    32a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32aa:	4620      	mov	r0, r4
    32ac:	e7b0      	b.n	3210 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    32ae:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    32b0:	4a0b      	ldr	r2, [pc, #44]	; (32e0 <compare_set+0x150>)
    32b2:	f3bf 8f5b 	dmb	ish
    32b6:	40ab      	lsls	r3, r5
    32b8:	e852 1f00 	ldrex	r1, [r2]
    32bc:	4319      	orrs	r1, r3
    32be:	e842 1000 	strex	r0, r1, [r2]
    32c2:	2800      	cmp	r0, #0
    32c4:	d1f8      	bne.n	32b8 <compare_set+0x128>
    32c6:	f3bf 8f5b 	dmb	ish
    32ca:	4632      	mov	r2, r6
    32cc:	463b      	mov	r3, r7
    32ce:	e7d8      	b.n	3282 <compare_set+0xf2>
			return -EINVAL;
    32d0:	f06f 0415 	mvn.w	r4, #21
    32d4:	e7e0      	b.n	3298 <compare_set+0x108>
    32d6:	bf00      	nop
    32d8:	20000130 	.word	0x20000130
    32dc:	40011000 	.word	0x40011000
    32e0:	20000ec8 	.word	0x20000ec8

000032e4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    32e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    32e6:	4b19      	ldr	r3, [pc, #100]	; (334c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    32e8:	4d19      	ldr	r5, [pc, #100]	; (3350 <sys_clock_driver_init+0x6c>)
    32ea:	2400      	movs	r4, #0
    32ec:	f04f 30ff 	mov.w	r0, #4294967295
    32f0:	f04f 31ff 	mov.w	r1, #4294967295
    32f4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    32f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    32fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3300:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3304:	4b13      	ldr	r3, [pc, #76]	; (3354 <sys_clock_driver_init+0x70>)
    3306:	2602      	movs	r6, #2
    3308:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    330c:	2101      	movs	r1, #1
    330e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3312:	2011      	movs	r0, #17
    3314:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3318:	4622      	mov	r2, r4
    331a:	f7fe fc2d 	bl	1b78 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    331e:	2011      	movs	r0, #17
    3320:	f7fe fc0c 	bl	1b3c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3324:	4a0c      	ldr	r2, [pc, #48]	; (3358 <sys_clock_driver_init+0x74>)
    3326:	2301      	movs	r3, #1
    3328:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    332a:	4a0c      	ldr	r2, [pc, #48]	; (335c <sys_clock_driver_init+0x78>)
    332c:	602b      	str	r3, [r5, #0]
    332e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3330:	4b0b      	ldr	r3, [pc, #44]	; (3360 <sys_clock_driver_init+0x7c>)
    3332:	4a0c      	ldr	r2, [pc, #48]	; (3364 <sys_clock_driver_init+0x80>)
    3334:	9300      	str	r3, [sp, #0]
    3336:	9401      	str	r4, [sp, #4]
    3338:	2300      	movs	r3, #0
    333a:	4620      	mov	r0, r4
    333c:	f7ff ff28 	bl	3190 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3340:	4630      	mov	r0, r6
    3342:	f7ff f96f 	bl	2624 <z_nrf_clock_control_lf_on>

	return 0;
}
    3346:	4620      	mov	r0, r4
    3348:	b002      	add	sp, #8
    334a:	bd70      	pop	{r4, r5, r6, pc}
    334c:	20000130 	.word	0x20000130
    3350:	40011000 	.word	0x40011000
    3354:	e000e100 	.word	0xe000e100
    3358:	40011008 	.word	0x40011008
    335c:	20000ecc 	.word	0x20000ecc
    3360:	00003029 	.word	0x00003029
    3364:	007fffff 	.word	0x007fffff

00003368 <rtc_nrf_isr>:
{
    3368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    336c:	4c34      	ldr	r4, [pc, #208]	; (3440 <rtc_nrf_isr+0xd8>)
    336e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3372:	079a      	lsls	r2, r3, #30
    3374:	d509      	bpl.n	338a <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3376:	4b33      	ldr	r3, [pc, #204]	; (3444 <rtc_nrf_isr+0xdc>)
    3378:	681a      	ldr	r2, [r3, #0]
    337a:	b132      	cbz	r2, 338a <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    337c:	2200      	movs	r2, #0
    337e:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3380:	4a31      	ldr	r2, [pc, #196]	; (3448 <rtc_nrf_isr+0xe0>)
    3382:	681b      	ldr	r3, [r3, #0]
    3384:	6813      	ldr	r3, [r2, #0]
    3386:	3301      	adds	r3, #1
    3388:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    338a:	f04f 0320 	mov.w	r3, #32
    338e:	f3ef 8211 	mrs	r2, BASEPRI
    3392:	f383 8812 	msr	BASEPRI_MAX, r3
    3396:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    339a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    339e:	03db      	lsls	r3, r3, #15
    33a0:	d512      	bpl.n	33c8 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    33a2:	f3bf 8f5b 	dmb	ish
    33a6:	4b29      	ldr	r3, [pc, #164]	; (344c <rtc_nrf_isr+0xe4>)
    33a8:	e853 1f00 	ldrex	r1, [r3]
    33ac:	f021 0001 	bic.w	r0, r1, #1
    33b0:	e843 0600 	strex	r6, r0, [r3]
    33b4:	2e00      	cmp	r6, #0
    33b6:	d1f7      	bne.n	33a8 <rtc_nrf_isr+0x40>
    33b8:	f3bf 8f5b 	dmb	ish
    33bc:	4b24      	ldr	r3, [pc, #144]	; (3450 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    33be:	2900      	cmp	r1, #0
    33c0:	d139      	bne.n	3436 <rtc_nrf_isr+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33c2:	6819      	ldr	r1, [r3, #0]
		if (result) {
    33c4:	2900      	cmp	r1, #0
    33c6:	d136      	bne.n	3436 <rtc_nrf_isr+0xce>
{
    33c8:	2300      	movs	r3, #0
	__asm__ volatile(
    33ca:	f382 8811 	msr	BASEPRI, r2
    33ce:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    33d2:	b36b      	cbz	r3, 3430 <rtc_nrf_isr+0xc8>
		curr_time = z_nrf_rtc_timer_read();
    33d4:	f7ff feba 	bl	314c <z_nrf_rtc_timer_read>
    33d8:	4606      	mov	r6, r0
    33da:	460f      	mov	r7, r1
	__asm__ volatile(
    33dc:	f04f 0320 	mov.w	r3, #32
    33e0:	f3ef 8011 	mrs	r0, BASEPRI
    33e4:	f383 8812 	msr	BASEPRI_MAX, r3
    33e8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    33ec:	4b19      	ldr	r3, [pc, #100]	; (3454 <rtc_nrf_isr+0xec>)
    33ee:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    33f2:	4549      	cmp	r1, r9
    33f4:	bf08      	it	eq
    33f6:	4546      	cmpeq	r6, r8
    33f8:	f04f 0200 	mov.w	r2, #0
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    33fc:	bf21      	itttt	cs
    33fe:	f04f 36ff 	movcs.w	r6, #4294967295
    3402:	f04f 37ff 	movcs.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    3406:	e9d3 1500 	ldrdcs	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    340a:	e9c3 6702 	strdcs	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    340e:	bf23      	ittte	cs
    3410:	601a      	strcs	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    3412:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
    3416:	f8c4 3348 	strcs.w	r3, [r4, #840]	; 0x348
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    341a:	4611      	movcc	r1, r2
	__asm__ volatile(
    341c:	f380 8811 	msr	BASEPRI, r0
    3420:	f3bf 8f6f 	isb	sy
		if (handler) {
    3424:	b121      	cbz	r1, 3430 <rtc_nrf_isr+0xc8>
			handler(chan, expire_time, user_context);
    3426:	9500      	str	r5, [sp, #0]
    3428:	4642      	mov	r2, r8
    342a:	464b      	mov	r3, r9
    342c:	2000      	movs	r0, #0
    342e:	4788      	blx	r1
}
    3430:	b003      	add	sp, #12
    3432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3436:	2100      	movs	r1, #0
    3438:	6019      	str	r1, [r3, #0]
    343a:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    343c:	2301      	movs	r3, #1
}
    343e:	e7c4      	b.n	33ca <rtc_nrf_isr+0x62>
    3440:	40011000 	.word	0x40011000
    3444:	40011104 	.word	0x40011104
    3448:	20000ed0 	.word	0x20000ed0
    344c:	20000ec8 	.word	0x20000ec8
    3450:	40011140 	.word	0x40011140
    3454:	20000130 	.word	0x20000130

00003458 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3458:	4b14      	ldr	r3, [pc, #80]	; (34ac <sys_clock_set_timeout+0x54>)
{
    345a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    345c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3460:	bf08      	it	eq
    3462:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3464:	1e44      	subs	r4, r0, #1
    3466:	2c00      	cmp	r4, #0
    3468:	dd1e      	ble.n	34a8 <sys_clock_set_timeout+0x50>
    346a:	429c      	cmp	r4, r3
    346c:	bfa8      	it	ge
    346e:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3470:	f7ff fe6c 	bl	314c <z_nrf_rtc_timer_read>
    3474:	4b0e      	ldr	r3, [pc, #56]	; (34b0 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3476:	490f      	ldr	r1, [pc, #60]	; (34b4 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3478:	e9d3 2300 	ldrd	r2, r3, [r3]
    347c:	1a80      	subs	r0, r0, r2
		ticks = 0;
    347e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3482:	bf28      	it	cs
    3484:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3486:	3001      	adds	r0, #1
    3488:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    348a:	4808      	ldr	r0, [pc, #32]	; (34ac <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    348c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    348e:	4284      	cmp	r4, r0
    3490:	bf28      	it	cs
    3492:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3494:	1912      	adds	r2, r2, r4
    3496:	f04f 0000 	mov.w	r0, #0
    349a:	9001      	str	r0, [sp, #4]
    349c:	f143 0300 	adc.w	r3, r3, #0
    34a0:	f7ff fe76 	bl	3190 <compare_set>
}
    34a4:	b002      	add	sp, #8
    34a6:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    34a8:	2400      	movs	r4, #0
    34aa:	e7e1      	b.n	3470 <sys_clock_set_timeout+0x18>
    34ac:	007fffff 	.word	0x007fffff
    34b0:	20000140 	.word	0x20000140
    34b4:	00003029 	.word	0x00003029

000034b8 <sys_clock_elapsed>:
{
    34b8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    34ba:	f7ff fe47 	bl	314c <z_nrf_rtc_timer_read>
    34be:	4b02      	ldr	r3, [pc, #8]	; (34c8 <sys_clock_elapsed+0x10>)
    34c0:	681b      	ldr	r3, [r3, #0]
}
    34c2:	1ac0      	subs	r0, r0, r3
    34c4:	bd08      	pop	{r3, pc}
    34c6:	bf00      	nop
    34c8:	20000140 	.word	0x20000140

000034cc <fprotect_set_permission>:
	return 0;
}

static int fprotect_set_permission(uint32_t start, size_t length,
				   size_t permission)
{
    34cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ce:	4c28      	ldr	r4, [pc, #160]	; (3570 <fprotect_set_permission+0xa4>)
}

NRF_STATIC_INLINE nrf_acl_perm_t nrf_acl_region_perm_get(NRF_ACL_Type const * p_reg,
                                                         uint32_t             region_id)
{
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    34d0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3574 <fprotect_set_permission+0xa8>
    34d4:	6823      	ldr	r3, [r4, #0]
	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
    34d6:	2600      	movs	r6, #0
    34d8:	eb0c 1703 	add.w	r7, ip, r3, lsl #4
    34dc:	011d      	lsls	r5, r3, #4
    34de:	f8d7 7808 	ldr.w	r7, [r7, #2056]	; 0x808
    34e2:	f017 0fff 	tst.w	r7, #255	; 0xff
    34e6:	d10c      	bne.n	3502 <fprotect_set_permission+0x36>
    34e8:	b106      	cbz	r6, 34ec <fprotect_set_permission+0x20>
    34ea:	6023      	str	r3, [r4, #0]
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    34ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    34f0:	691e      	ldr	r6, [r3, #16]

	if (result != 0) {
		return result;
	}

	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    34f2:	fbb0 f4f6 	udiv	r4, r0, r6
    34f6:	fb06 0414 	mls	r4, r6, r4, r0
    34fa:	b15c      	cbz	r4, 3514 <fprotect_set_permission+0x48>
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
		return -EINVAL;
    34fc:	f06f 0015 	mvn.w	r0, #21
    3500:	e007      	b.n	3512 <fprotect_set_permission+0x46>
		idx++;
    3502:	3301      	adds	r3, #1
		if (idx >= ACL_REGIONS_COUNT) {
    3504:	2b07      	cmp	r3, #7
    3506:	f04f 0601 	mov.w	r6, #1
    350a:	d9e5      	bls.n	34d8 <fprotect_set_permission+0xc>
    350c:	6023      	str	r3, [r4, #0]
			return -ENOSPC;
    350e:	f06f 001b 	mvn.w	r0, #27
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
		return -EFAULT;
	}

	return 0;
}
    3512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3514:	691e      	ldr	r6, [r3, #16]
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    3516:	fbb1 f4f6 	udiv	r4, r1, r6
    351a:	fb06 1414 	mls	r4, r6, r4, r1
	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    351e:	2c00      	cmp	r4, #0
    3520:	d1ec      	bne.n	34fc <fprotect_set_permission+0x30>
    3522:	691c      	ldr	r4, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    3524:	695b      	ldr	r3, [r3, #20]
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    3526:	4363      	muls	r3, r4
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    3528:	428b      	cmp	r3, r1
    352a:	d3e7      	bcc.n	34fc <fprotect_set_permission+0x30>
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    352c:	2900      	cmp	r1, #0
    352e:	d0e5      	beq.n	34fc <fprotect_set_permission+0x30>
    p_reg->ACL[region_id].ADDR = address;
    3530:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    3534:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    p_reg->ACL[region_id].PERM = perm;
    3538:	461c      	mov	r4, r3
    p_reg->ACL[region_id].ADDR = address;
    353a:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
    p_reg->ACL[region_id].SIZE = size;
    353e:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
    p_reg->ACL[region_id].PERM = perm;
    3542:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
    return (uint32_t)p_reg->ACL[region_id].ADDR;
    3546:	f8d3 5800 	ldr.w	r5, [r3, #2048]	; 0x800
	if ((nrf_acl_region_address_get(NRF_ACL, region_idx) != start)
    354a:	42a8      	cmp	r0, r5
    354c:	d10c      	bne.n	3568 <fprotect_set_permission+0x9c>
    return (size_t)p_reg->ACL[region_id].SIZE;
    354e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
		|| (nrf_acl_region_size_get(NRF_ACL, region_idx) != length)
    3552:	4299      	cmp	r1, r3
    3554:	d108      	bne.n	3568 <fprotect_set_permission+0x9c>
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    3556:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
    355a:	b2db      	uxtb	r3, r3
		return -EFAULT;
    355c:	4293      	cmp	r3, r2
    355e:	bf0c      	ite	eq
    3560:	2000      	moveq	r0, #0
    3562:	f06f 000d 	mvnne.w	r0, #13
    3566:	e7d4      	b.n	3512 <fprotect_set_permission+0x46>
    3568:	f06f 000d 	mvn.w	r0, #13
    356c:	e7d1      	b.n	3512 <fprotect_set_permission+0x46>
    356e:	bf00      	nop
    3570:	20000ed4 	.word	0x20000ed4
    3574:	4001e000 	.word	0x4001e000

00003578 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3578:	4803      	ldr	r0, [pc, #12]	; (3588 <k_sys_fatal_error_handler+0x10>)
{
    357a:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    357c:	2145      	movs	r1, #69	; 0x45
    357e:	f003 f849 	bl	6614 <z_log_minimal_printk>
		sys_arch_reboot(0);
    3582:	2000      	movs	r0, #0
    3584:	f7fe fec8 	bl	2318 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3588:	000080f6 	.word	0x000080f6

0000358c <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    358c:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    358e:	4a05      	ldr	r2, [pc, #20]	; (35a4 <boot_write_magic+0x18>)
{
    3590:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    3592:	3910      	subs	r1, #16
    3594:	2310      	movs	r3, #16
    3596:	f003 f867 	bl	6668 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    359a:	3800      	subs	r0, #0
    359c:	bf18      	it	ne
    359e:	2001      	movne	r0, #1
    35a0:	bd08      	pop	{r3, pc}
    35a2:	bf00      	nop
    35a4:	00007370 	.word	0x00007370

000035a8 <boot_read_swap_state>:
{
    35a8:	b530      	push	{r4, r5, lr}
    35aa:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    35ac:	6881      	ldr	r1, [r0, #8]
{
    35ae:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    35b0:	2310      	movs	r3, #16
    35b2:	aa02      	add	r2, sp, #8
    35b4:	3910      	subs	r1, #16
{
    35b6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    35b8:	f003 f83a 	bl	6630 <flash_area_read>
    if (rc < 0) {
    35bc:	2800      	cmp	r0, #0
    35be:	db11      	blt.n	35e4 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
    35c0:	2210      	movs	r2, #16
    35c2:	a902      	add	r1, sp, #8
    35c4:	4628      	mov	r0, r5
    35c6:	f003 fac9 	bl	6b5c <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    35ca:	b168      	cbz	r0, 35e8 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
    35cc:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    35ce:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    35d0:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    35d2:	2301      	movs	r3, #1
    35d4:	f10d 0207 	add.w	r2, sp, #7
    35d8:	3928      	subs	r1, #40	; 0x28
    35da:	4628      	mov	r0, r5
    35dc:	f003 f828 	bl	6630 <flash_area_read>
    if (rc < 0) {
    35e0:	2800      	cmp	r0, #0
    35e2:	da0b      	bge.n	35fc <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
    35e4:	2001      	movs	r0, #1
    35e6:	e02a      	b.n	363e <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    35e8:	4916      	ldr	r1, [pc, #88]	; (3644 <boot_read_swap_state+0x9c>)
    35ea:	2210      	movs	r2, #16
    35ec:	a802      	add	r0, sp, #8
    35ee:	f003 f8ef 	bl	67d0 <memcmp>
    35f2:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
    35f4:	bf14      	ite	ne
    35f6:	2302      	movne	r3, #2
    35f8:	2301      	moveq	r3, #1
    35fa:	e7e8      	b.n	35ce <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    35fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3600:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3604:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3606:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3608:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    360a:	2201      	movs	r2, #1
    360c:	f10d 0107 	add.w	r1, sp, #7
    3610:	4628      	mov	r0, r5
    3612:	f003 faa3 	bl	6b5c <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3616:	b910      	cbnz	r0, 361e <boot_read_swap_state+0x76>
    3618:	7863      	ldrb	r3, [r4, #1]
    361a:	2b04      	cmp	r3, #4
    361c:	d903      	bls.n	3626 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    361e:	2301      	movs	r3, #1
    3620:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    3622:	2300      	movs	r3, #0
    3624:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    3626:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3628:	1ca1      	adds	r1, r4, #2
    362a:	3a20      	subs	r2, #32
    362c:	4628      	mov	r0, r5
    362e:	f003 fabd 	bl	6bac <boot_read_flag>
    if (rc) {
    3632:	2800      	cmp	r0, #0
    3634:	d1d6      	bne.n	35e4 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
    3636:	1ce1      	adds	r1, r4, #3
    3638:	4628      	mov	r0, r5
    363a:	f003 fb12 	bl	6c62 <boot_read_image_ok>
}
    363e:	b007      	add	sp, #28
    3640:	bd30      	pop	{r4, r5, pc}
    3642:	bf00      	nop
    3644:	00007370 	.word	0x00007370

00003648 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    364c:	b085      	sub	sp, #20
    364e:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3650:	4669      	mov	r1, sp
    3652:	2002      	movs	r0, #2
    3654:	f003 fb09 	bl	6c6a <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    3658:	4604      	mov	r4, r0
    365a:	b118      	cbz	r0, 3664 <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    365c:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    365e:	b005      	add	sp, #20
    3660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3664:	a902      	add	r1, sp, #8
    3666:	2005      	movs	r0, #5
    3668:	f003 faff 	bl	6c6a <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    366c:	2801      	cmp	r0, #1
    366e:	d138      	bne.n	36e2 <boot_swap_type_multi+0x9a>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    3670:	4829      	ldr	r0, [pc, #164]	; (3718 <boot_swap_type_multi+0xd0>)
    3672:	462a      	mov	r2, r5
    3674:	2149      	movs	r1, #73	; 0x49
    3676:	f002 ffcd 	bl	6614 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    367a:	4b28      	ldr	r3, [pc, #160]	; (371c <boot_swap_type_multi+0xd4>)
    367c:	9302      	str	r3, [sp, #8]
        secondary_slot.image_num = 0;
    367e:	f88d 400c 	strb.w	r4, [sp, #12]
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3682:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3686:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    368a:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    368e:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    3692:	f89d 9002 	ldrb.w	r9, [sp, #2]
    3696:	4c22      	ldr	r4, [pc, #136]	; (3720 <boot_swap_type_multi+0xd8>)
    3698:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    369a:	7820      	ldrb	r0, [r4, #0]
    369c:	4629      	mov	r1, r5
    369e:	f003 fa71 	bl	6b84 <boot_magic_compatible_check>
    36a2:	b318      	cbz	r0, 36ec <boot_swap_type_multi+0xa4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    36a4:	7860      	ldrb	r0, [r4, #1]
    36a6:	4631      	mov	r1, r6
    36a8:	f003 fa6c 	bl	6b84 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    36ac:	b1f0      	cbz	r0, 36ec <boot_swap_type_multi+0xa4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    36ae:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    36b0:	2b04      	cmp	r3, #4
    36b2:	d001      	beq.n	36b8 <boot_swap_type_multi+0x70>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    36b4:	42bb      	cmp	r3, r7
    36b6:	d119      	bne.n	36ec <boot_swap_type_multi+0xa4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    36b8:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    36ba:	2b04      	cmp	r3, #4
    36bc:	d001      	beq.n	36c2 <boot_swap_type_multi+0x7a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    36be:	4543      	cmp	r3, r8
    36c0:	d114      	bne.n	36ec <boot_swap_type_multi+0xa4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    36c2:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    36c4:	2b04      	cmp	r3, #4
    36c6:	d10f      	bne.n	36e8 <boot_swap_type_multi+0xa0>
            BOOT_LOG_INF("Swap type: %s",
    36c8:	7963      	ldrb	r3, [r4, #5]
    36ca:	2b02      	cmp	r3, #2
    36cc:	d119      	bne.n	3702 <boot_swap_type_multi+0xba>
    36ce:	4a15      	ldr	r2, [pc, #84]	; (3724 <boot_swap_type_multi+0xdc>)
    36d0:	4815      	ldr	r0, [pc, #84]	; (3728 <boot_swap_type_multi+0xe0>)
    36d2:	2149      	movs	r1, #73	; 0x49
    36d4:	f002 ff9e 	bl	6614 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    36d8:	7960      	ldrb	r0, [r4, #5]
    36da:	1e83      	subs	r3, r0, #2
    36dc:	2b02      	cmp	r3, #2
    36de:	d9be      	bls.n	365e <boot_swap_type_multi+0x16>
    36e0:	e7bc      	b.n	365c <boot_swap_type_multi+0x14>
    } else if (rc) {
    36e2:	2800      	cmp	r0, #0
    36e4:	d0cd      	beq.n	3682 <boot_swap_type_multi+0x3a>
    36e6:	e7b9      	b.n	365c <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    36e8:	454b      	cmp	r3, r9
    36ea:	d0ed      	beq.n	36c8 <boot_swap_type_multi+0x80>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    36ec:	3201      	adds	r2, #1
    36ee:	2a03      	cmp	r2, #3
    36f0:	f104 0406 	add.w	r4, r4, #6
    36f4:	d1d1      	bne.n	369a <boot_swap_type_multi+0x52>
    BOOT_LOG_INF("Swap type: none");
    36f6:	480d      	ldr	r0, [pc, #52]	; (372c <boot_swap_type_multi+0xe4>)
    36f8:	2149      	movs	r1, #73	; 0x49
    36fa:	f002 ff8b 	bl	6614 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    36fe:	2001      	movs	r0, #1
    3700:	e7ad      	b.n	365e <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    3702:	2b03      	cmp	r3, #3
    3704:	d005      	beq.n	3712 <boot_swap_type_multi+0xca>
    3706:	4a0a      	ldr	r2, [pc, #40]	; (3730 <boot_swap_type_multi+0xe8>)
    3708:	490a      	ldr	r1, [pc, #40]	; (3734 <boot_swap_type_multi+0xec>)
    370a:	2b04      	cmp	r3, #4
    370c:	bf18      	it	ne
    370e:	460a      	movne	r2, r1
    3710:	e7de      	b.n	36d0 <boot_swap_type_multi+0x88>
    3712:	4a09      	ldr	r2, [pc, #36]	; (3738 <boot_swap_type_multi+0xf0>)
    3714:	e7dc      	b.n	36d0 <boot_swap_type_multi+0x88>
    3716:	bf00      	nop
    3718:	0000813b 	.word	0x0000813b
    371c:	03030103 	.word	0x03030103
    3720:	000081ae 	.word	0x000081ae
    3724:	0000811f 	.word	0x0000811f
    3728:	00008186 	.word	0x00008186
    372c:	00008199 	.word	0x00008199
    3730:	00008118 	.word	0x00008118
    3734:	00008129 	.word	0x00008129
    3738:	00008124 	.word	0x00008124

0000373c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    373c:	4b03      	ldr	r3, [pc, #12]	; (374c <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    373e:	6818      	ldr	r0, [r3, #0]
}
    3740:	f1a0 0308 	sub.w	r3, r0, #8
    3744:	4258      	negs	r0, r3
    3746:	4158      	adcs	r0, r3
    3748:	4770      	bx	lr
    374a:	bf00      	nop
    374c:	10000130 	.word	0x10000130

00003750 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3750:	4b06      	ldr	r3, [pc, #24]	; (376c <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    3752:	681b      	ldr	r3, [r3, #0]
    3754:	2b08      	cmp	r3, #8
    3756:	d106      	bne.n	3766 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3758:	4b05      	ldr	r3, [pc, #20]	; (3770 <nrf52_errata_103+0x20>)
    375a:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    375c:	2b05      	cmp	r3, #5
    375e:	d802      	bhi.n	3766 <nrf52_errata_103+0x16>
    3760:	4a04      	ldr	r2, [pc, #16]	; (3774 <nrf52_errata_103+0x24>)
    3762:	5cd0      	ldrb	r0, [r2, r3]
    3764:	4770      	bx	lr
        return false;
    3766:	2000      	movs	r0, #0
}
    3768:	4770      	bx	lr
    376a:	bf00      	nop
    376c:	10000130 	.word	0x10000130
    3770:	10000134 	.word	0x10000134
    3774:	000081c6 	.word	0x000081c6

00003778 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3778:	4a02      	ldr	r2, [pc, #8]	; (3784 <nvmc_wait+0xc>)
    377a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    377e:	2b00      	cmp	r3, #0
    3780:	d0fb      	beq.n	377a <nvmc_wait+0x2>
}
    3782:	4770      	bx	lr
    3784:	4001e000 	.word	0x4001e000

00003788 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3788:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    378a:	f7ff ffd7 	bl	373c <nrf52_errata_136>
    378e:	b140      	cbz	r0, 37a2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3794:	2200      	movs	r2, #0
    3796:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    379a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    379e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    37a2:	f7ff ffcb 	bl	373c <nrf52_errata_136>
    37a6:	2800      	cmp	r0, #0
    37a8:	d046      	beq.n	3838 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    37aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    37ae:	4b61      	ldr	r3, [pc, #388]	; (3934 <SystemInit+0x1ac>)
    37b0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    37b4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    37b8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    37bc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    37c0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    37c4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    37c8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    37cc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    37d0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    37d4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    37d8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    37dc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    37e0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    37e4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    37e8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    37ec:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    37f0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    37f4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    37f8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    37fc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3800:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3804:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3808:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    380c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3810:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3814:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3818:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    381c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3820:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3824:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3828:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    382c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3830:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3834:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3838:	f7ff ff8a 	bl	3750 <nrf52_errata_103>
    383c:	b110      	cbz	r0, 3844 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    383e:	4b3e      	ldr	r3, [pc, #248]	; (3938 <SystemInit+0x1b0>)
    3840:	4a3e      	ldr	r2, [pc, #248]	; (393c <SystemInit+0x1b4>)
    3842:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3844:	f7ff ff84 	bl	3750 <nrf52_errata_103>
    3848:	b118      	cbz	r0, 3852 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    384a:	4b3d      	ldr	r3, [pc, #244]	; (3940 <SystemInit+0x1b8>)
    384c:	22fb      	movs	r2, #251	; 0xfb
    384e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3852:	f7ff ff7d 	bl	3750 <nrf52_errata_103>
    3856:	b148      	cbz	r0, 386c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3858:	493a      	ldr	r1, [pc, #232]	; (3944 <SystemInit+0x1bc>)
    385a:	4b3b      	ldr	r3, [pc, #236]	; (3948 <SystemInit+0x1c0>)
    385c:	680a      	ldr	r2, [r1, #0]
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	f022 020f 	bic.w	r2, r2, #15
    3864:	f003 030f 	and.w	r3, r3, #15
    3868:	4313      	orrs	r3, r2
    386a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    386c:	f7ff ff70 	bl	3750 <nrf52_errata_103>
    3870:	b118      	cbz	r0, 387a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3872:	4b36      	ldr	r3, [pc, #216]	; (394c <SystemInit+0x1c4>)
    3874:	f44f 7200 	mov.w	r2, #512	; 0x200
    3878:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    387a:	f7ff ff5f 	bl	373c <nrf52_errata_136>
    387e:	b148      	cbz	r0, 3894 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3880:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3884:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3888:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    388a:	bf44      	itt	mi
    388c:	f06f 0201 	mvnmi.w	r2, #1
    3890:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    3894:	4a2e      	ldr	r2, [pc, #184]	; (3950 <SystemInit+0x1c8>)
    3896:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    389a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    389e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    38a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38a6:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    38aa:	4b2a      	ldr	r3, [pc, #168]	; (3954 <SystemInit+0x1cc>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    38ac:	681b      	ldr	r3, [r3, #0]
    38ae:	2b08      	cmp	r3, #8
    38b0:	d10e      	bne.n	38d0 <SystemInit+0x148>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    38b2:	4b29      	ldr	r3, [pc, #164]	; (3958 <SystemInit+0x1d0>)
    38b4:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    38b6:	2b05      	cmp	r3, #5
    38b8:	d802      	bhi.n	38c0 <SystemInit+0x138>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    38ba:	4a28      	ldr	r2, [pc, #160]	; (395c <SystemInit+0x1d4>)
    38bc:	5cd3      	ldrb	r3, [r2, r3]
    38be:	b13b      	cbz	r3, 38d0 <SystemInit+0x148>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    38c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    38c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    38c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38cc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    38d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    38d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    38d8:	2a00      	cmp	r2, #0
    38da:	db03      	blt.n	38e4 <SystemInit+0x15c>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    38dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    38e0:	2b00      	cmp	r3, #0
    38e2:	da22      	bge.n	392a <SystemInit+0x1a2>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    38e4:	491e      	ldr	r1, [pc, #120]	; (3960 <SystemInit+0x1d8>)
    38e6:	2301      	movs	r3, #1
    38e8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    38ec:	f7ff ff44 	bl	3778 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    38f0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    38f4:	2412      	movs	r4, #18
    38f6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    38fa:	f7ff ff3d 	bl	3778 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    38fe:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3902:	f7ff ff39 	bl	3778 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3906:	2300      	movs	r3, #0
    3908:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    390c:	f7ff ff34 	bl	3778 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3910:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3914:	490e      	ldr	r1, [pc, #56]	; (3950 <SystemInit+0x1c8>)
    3916:	4b13      	ldr	r3, [pc, #76]	; (3964 <SystemInit+0x1dc>)
    3918:	68ca      	ldr	r2, [r1, #12]
    391a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    391e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3920:	60cb      	str	r3, [r1, #12]
    3922:	f3bf 8f4f 	dsb	sy
    __NOP();
    3926:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3928:	e7fd      	b.n	3926 <SystemInit+0x19e>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    392a:	4b0f      	ldr	r3, [pc, #60]	; (3968 <SystemInit+0x1e0>)
    392c:	4a0f      	ldr	r2, [pc, #60]	; (396c <SystemInit+0x1e4>)
    392e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3930:	bd10      	pop	{r4, pc}
    3932:	bf00      	nop
    3934:	4000c000 	.word	0x4000c000
    3938:	4000568c 	.word	0x4000568c
    393c:	00038148 	.word	0x00038148
    3940:	4000f000 	.word	0x4000f000
    3944:	40000ee4 	.word	0x40000ee4
    3948:	10000258 	.word	0x10000258
    394c:	40029640 	.word	0x40029640
    3950:	e000ed00 	.word	0xe000ed00
    3954:	10000130 	.word	0x10000130
    3958:	10000134 	.word	0x10000134
    395c:	000081c0 	.word	0x000081c0
    3960:	4001e000 	.word	0x4001e000
    3964:	05fa0004 	.word	0x05fa0004
    3968:	20000028 	.word	0x20000028
    396c:	03d09000 	.word	0x03d09000

00003970 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3970:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3972:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3974:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3976:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    397a:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    397c:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3980:	d014      	beq.n	39ac <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3982:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3986:	fa05 f204 	lsl.w	r2, r5, r4
    398a:	ea23 0202 	bic.w	r2, r3, r2
    398e:	e850 6f00 	ldrex	r6, [r0]
    3992:	429e      	cmp	r6, r3
    3994:	d104      	bne.n	39a0 <nrfx_flag32_alloc+0x30>
    3996:	e840 2c00 	strex	ip, r2, [r0]
    399a:	f1bc 0f00 	cmp.w	ip, #0
    399e:	d1f6      	bne.n	398e <nrfx_flag32_alloc+0x1e>
    39a0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    39a4:	d1e6      	bne.n	3974 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    39a6:	4802      	ldr	r0, [pc, #8]	; (39b0 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    39a8:	700c      	strb	r4, [r1, #0]
}
    39aa:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    39ac:	4801      	ldr	r0, [pc, #4]	; (39b4 <nrfx_flag32_alloc+0x44>)
    39ae:	e7fc      	b.n	39aa <nrfx_flag32_alloc+0x3a>
    39b0:	0bad0000 	.word	0x0bad0000
    39b4:	0bad0002 	.word	0x0bad0002

000039b8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    39b8:	6803      	ldr	r3, [r0, #0]
    39ba:	40cb      	lsrs	r3, r1
    39bc:	07db      	lsls	r3, r3, #31
{
    39be:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    39c0:	d415      	bmi.n	39ee <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    39c2:	2301      	movs	r3, #1
    39c4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    39c8:	6803      	ldr	r3, [r0, #0]
    39ca:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    39ce:	ea41 0203 	orr.w	r2, r1, r3
    39d2:	e850 4f00 	ldrex	r4, [r0]
    39d6:	429c      	cmp	r4, r3
    39d8:	d104      	bne.n	39e4 <nrfx_flag32_free+0x2c>
    39da:	e840 2c00 	strex	ip, r2, [r0]
    39de:	f1bc 0f00 	cmp.w	ip, #0
    39e2:	d1f6      	bne.n	39d2 <nrfx_flag32_free+0x1a>
    39e4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    39e8:	d1ee      	bne.n	39c8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    39ea:	4802      	ldr	r0, [pc, #8]	; (39f4 <nrfx_flag32_free+0x3c>)
}
    39ec:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    39ee:	4802      	ldr	r0, [pc, #8]	; (39f8 <nrfx_flag32_free+0x40>)
    39f0:	e7fc      	b.n	39ec <nrfx_flag32_free+0x34>
    39f2:	bf00      	nop
    39f4:	0bad0000 	.word	0x0bad0000
    39f8:	0bad0004 	.word	0x0bad0004

000039fc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <nrfx_clock_init+0x14>)
    39fe:	791a      	ldrb	r2, [r3, #4]
    3a00:	b922      	cbnz	r2, 3a0c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3a02:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3a04:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3a06:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3a08:	4802      	ldr	r0, [pc, #8]	; (3a14 <nrfx_clock_init+0x18>)
    3a0a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3a0c:	4802      	ldr	r0, [pc, #8]	; (3a18 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3a0e:	4770      	bx	lr
    3a10:	20000ed8 	.word	0x20000ed8
    3a14:	0bad0000 	.word	0x0bad0000
    3a18:	0bad000c 	.word	0x0bad000c

00003a1c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3a1c:	b110      	cbz	r0, 3a24 <nrfx_clock_start+0x8>
    3a1e:	2801      	cmp	r0, #1
    3a20:	d020      	beq.n	3a64 <nrfx_clock_start+0x48>
    3a22:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a28:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3a2c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3a30:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    3a34:	4619      	mov	r1, r3
    3a36:	d011      	beq.n	3a5c <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3a38:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3a3c:	2a01      	cmp	r2, #1
    3a3e:	d10d      	bne.n	3a5c <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a40:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a44:	4b0c      	ldr	r3, [pc, #48]	; (3a78 <nrfx_clock_start+0x5c>)
    3a46:	2200      	movs	r2, #0
    3a48:	601a      	str	r2, [r3, #0]
    3a4a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a50:	2202      	movs	r2, #2
    3a52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a56:	2201      	movs	r2, #1
    3a58:	609a      	str	r2, [r3, #8]
}
    3a5a:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a5c:	2300      	movs	r3, #0
    3a5e:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    3a62:	e7ef      	b.n	3a44 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a64:	4b05      	ldr	r3, [pc, #20]	; (3a7c <nrfx_clock_start+0x60>)
    3a66:	2200      	movs	r2, #0
    3a68:	601a      	str	r2, [r3, #0]
    3a6a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a70:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a74:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3a76:	4770      	bx	lr
    3a78:	40000104 	.word	0x40000104
    3a7c:	40000100 	.word	0x40000100

00003a80 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3a80:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3a82:	b110      	cbz	r0, 3a8a <nrfx_clock_stop+0xa>
    3a84:	2801      	cmp	r0, #1
    3a86:	d018      	beq.n	3aba <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3a88:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    3a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a8e:	2202      	movs	r2, #2
    3a90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a94:	4a18      	ldr	r2, [pc, #96]	; (3af8 <nrfx_clock_stop+0x78>)
    3a96:	6010      	str	r0, [r2, #0]
    3a98:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a9a:	4a18      	ldr	r2, [pc, #96]	; (3afc <nrfx_clock_stop+0x7c>)
    3a9c:	2101      	movs	r1, #1
    3a9e:	6011      	str	r1, [r2, #0]
    3aa0:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3aa4:	461c      	mov	r4, r3
    3aa6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3aaa:	03db      	lsls	r3, r3, #15
    3aac:	d5ec      	bpl.n	3a88 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3aae:	2001      	movs	r0, #1
    3ab0:	f003 f8ff 	bl	6cb2 <nrfx_busy_wait>
    3ab4:	3d01      	subs	r5, #1
    3ab6:	d1f6      	bne.n	3aa6 <nrfx_clock_stop+0x26>
    3ab8:	e7e6      	b.n	3a88 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3aba:	4b11      	ldr	r3, [pc, #68]	; (3b00 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    3abc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ac0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3ac2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ac6:	601a      	str	r2, [r3, #0]
    3ac8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3aca:	4b0e      	ldr	r3, [pc, #56]	; (3b04 <nrfx_clock_stop+0x84>)
    3acc:	f242 7510 	movw	r5, #10000	; 0x2710
    3ad0:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3ad2:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3ad6:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    3ada:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3adc:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3ae0:	d505      	bpl.n	3aee <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3ae2:	b123      	cbz	r3, 3aee <nrfx_clock_stop+0x6e>
    3ae4:	2001      	movs	r0, #1
    3ae6:	f003 f8e4 	bl	6cb2 <nrfx_busy_wait>
    3aea:	3d01      	subs	r5, #1
    3aec:	d1f1      	bne.n	3ad2 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    3aee:	4b06      	ldr	r3, [pc, #24]	; (3b08 <nrfx_clock_stop+0x88>)
    3af0:	2200      	movs	r2, #0
    3af2:	715a      	strb	r2, [r3, #5]
    3af4:	e7c8      	b.n	3a88 <nrfx_clock_stop+0x8>
    3af6:	bf00      	nop
    3af8:	40000104 	.word	0x40000104
    3afc:	4000000c 	.word	0x4000000c
    3b00:	40000100 	.word	0x40000100
    3b04:	40000004 	.word	0x40000004
    3b08:	20000ed8 	.word	0x20000ed8

00003b0c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3b0c:	4b16      	ldr	r3, [pc, #88]	; (3b68 <nrfx_power_clock_irq_handler+0x5c>)
    3b0e:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3b10:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3b12:	b16a      	cbz	r2, 3b30 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b14:	2200      	movs	r2, #0
    3b16:	601a      	str	r2, [r3, #0]
    3b18:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b1e:	2201      	movs	r2, #1
    3b20:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3b24:	4b11      	ldr	r3, [pc, #68]	; (3b6c <nrfx_power_clock_irq_handler+0x60>)
    3b26:	7958      	ldrb	r0, [r3, #5]
    3b28:	b910      	cbnz	r0, 3b30 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3b2a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3b30:	4b0f      	ldr	r3, [pc, #60]	; (3b70 <nrfx_power_clock_irq_handler+0x64>)
    3b32:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3b34:	b172      	cbz	r2, 3b54 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b36:	2200      	movs	r2, #0
    3b38:	601a      	str	r2, [r3, #0]
    3b3a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b40:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3b44:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3b48:	0792      	lsls	r2, r2, #30
    3b4a:	d104      	bne.n	3b56 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3b4c:	2201      	movs	r2, #1
    3b4e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b52:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3b54:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3b56:	2202      	movs	r2, #2
    3b58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3b5c:	4b03      	ldr	r3, [pc, #12]	; (3b6c <nrfx_power_clock_irq_handler+0x60>)
}
    3b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3b62:	681b      	ldr	r3, [r3, #0]
    3b64:	2001      	movs	r0, #1
    3b66:	4718      	bx	r3
    3b68:	40000100 	.word	0x40000100
    3b6c:	20000ed8 	.word	0x20000ed8
    3b70:	40000104 	.word	0x40000104

00003b74 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3b74:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3b76:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3b7a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b7c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3b7e:	6002      	str	r2, [r0, #0]
}
    3b80:	4802      	ldr	r0, [pc, #8]	; (3b8c <nrf_gpio_pin_port_decode+0x18>)
    3b82:	bf18      	it	ne
    3b84:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3b88:	4770      	bx	lr
    3b8a:	bf00      	nop
    3b8c:	50000300 	.word	0x50000300

00003b90 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3b90:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b92:	f100 0308 	add.w	r3, r0, #8
    3b96:	4c0c      	ldr	r4, [pc, #48]	; (3bc8 <call_handler+0x38>)
    3b98:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3b9c:	05da      	lsls	r2, r3, #23
{
    3b9e:	4605      	mov	r5, r0
    3ba0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3ba2:	d507      	bpl.n	3bb4 <call_handler+0x24>
    3ba4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3ba8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3bac:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3bb0:	6852      	ldr	r2, [r2, #4]
    3bb2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3bb4:	68a3      	ldr	r3, [r4, #8]
    3bb6:	b12b      	cbz	r3, 3bc4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3bb8:	68e2      	ldr	r2, [r4, #12]
    3bba:	4631      	mov	r1, r6
    3bbc:	4628      	mov	r0, r5
    }
}
    3bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3bc2:	4718      	bx	r3
}
    3bc4:	bd70      	pop	{r4, r5, r6, pc}
    3bc6:	bf00      	nop
    3bc8:	2000002c 	.word	0x2000002c

00003bcc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3bcc:	4b13      	ldr	r3, [pc, #76]	; (3c1c <release_handler+0x50>)
    3bce:	3008      	adds	r0, #8
{
    3bd0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3bd2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3bd6:	05d1      	lsls	r1, r2, #23
    3bd8:	d51c      	bpl.n	3c14 <release_handler+0x48>
    3bda:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3bde:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3be2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3be6:	f103 0410 	add.w	r4, r3, #16
    3bea:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3bec:	f834 2b02 	ldrh.w	r2, [r4], #2
    3bf0:	f412 7f80 	tst.w	r2, #256	; 0x100
    3bf4:	d003      	beq.n	3bfe <release_handler+0x32>
    3bf6:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3bfa:	4291      	cmp	r1, r2
    3bfc:	d00a      	beq.n	3c14 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3bfe:	3001      	adds	r0, #1
    3c00:	2830      	cmp	r0, #48	; 0x30
    3c02:	d1f3      	bne.n	3bec <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3c04:	2200      	movs	r2, #0
    3c06:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3c0a:	4805      	ldr	r0, [pc, #20]	; (3c20 <release_handler+0x54>)
}
    3c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3c10:	f7ff bed2 	b.w	39b8 <nrfx_flag32_free>
}
    3c14:	f85d 4b04 	ldr.w	r4, [sp], #4
    3c18:	4770      	bx	lr
    3c1a:	bf00      	nop
    3c1c:	2000002c 	.word	0x2000002c
    3c20:	200000a0 	.word	0x200000a0

00003c24 <pin_handler_trigger_uninit>:
{
    3c24:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3c26:	4c0a      	ldr	r4, [pc, #40]	; (3c50 <pin_handler_trigger_uninit+0x2c>)
    3c28:	f100 0508 	add.w	r5, r0, #8
    3c2c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    3c30:	069a      	lsls	r2, r3, #26
    3c32:	d506      	bpl.n	3c42 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3c34:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3c36:	4a07      	ldr	r2, [pc, #28]	; (3c54 <pin_handler_trigger_uninit+0x30>)
    3c38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3c3c:	2100      	movs	r1, #0
    3c3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    3c42:	f7ff ffc3 	bl	3bcc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3c46:	2300      	movs	r3, #0
    3c48:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3c4c:	bd38      	pop	{r3, r4, r5, pc}
    3c4e:	bf00      	nop
    3c50:	2000002c 	.word	0x2000002c
    3c54:	40006000 	.word	0x40006000

00003c58 <nrfx_gpiote_input_configure>:
{
    3c58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3c5c:	4604      	mov	r4, r0
    3c5e:	4617      	mov	r7, r2
    3c60:	461d      	mov	r5, r3
    if (p_input_config)
    3c62:	b311      	cbz	r1, 3caa <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3c64:	4e4d      	ldr	r6, [pc, #308]	; (3d9c <nrfx_gpiote_input_configure+0x144>)
    3c66:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
    3c6a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    3c6e:	f003 0322 	and.w	r3, r3, #34	; 0x22
    3c72:	2b22      	cmp	r3, #34	; 0x22
    3c74:	d103      	bne.n	3c7e <nrfx_gpiote_input_configure+0x26>
                return NRFX_ERROR_INVALID_PARAM;
    3c76:	484a      	ldr	r0, [pc, #296]	; (3da0 <nrfx_gpiote_input_configure+0x148>)
}
    3c78:	b004      	add	sp, #16
    3c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3c7e:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3c80:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3c84:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3c88:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3c8c:	f10d 020f 	add.w	r2, sp, #15
    3c90:	460b      	mov	r3, r1
    3c92:	f10d 010e 	add.w	r1, sp, #14
    3c96:	f003 f818 	bl	6cca <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3c9a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    3c9e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3ca2:	f043 0301 	orr.w	r3, r3, #1
    3ca6:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    3caa:	b197      	cbz	r7, 3cd2 <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cac:	483b      	ldr	r0, [pc, #236]	; (3d9c <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3cae:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3cb0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cb2:	f104 0308 	add.w	r3, r4, #8
    3cb6:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
    3cba:	078f      	lsls	r7, r1, #30
    3cbc:	d50c      	bpl.n	3cd8 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    3cbe:	2a00      	cmp	r2, #0
    3cc0:	d1d9      	bne.n	3c76 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3cc2:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
    3cc6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3cca:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3cce:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
    3cd2:	bbcd      	cbnz	r5, 3d48 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
    3cd4:	4833      	ldr	r0, [pc, #204]	; (3da4 <nrfx_gpiote_input_configure+0x14c>)
    3cd6:	e7cf      	b.n	3c78 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3cd8:	f021 0120 	bic.w	r1, r1, #32
    3cdc:	04c9      	lsls	r1, r1, #19
    3cde:	0cc9      	lsrs	r1, r1, #19
    3ce0:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
    3ce4:	2a00      	cmp	r2, #0
    3ce6:	d0ec      	beq.n	3cc2 <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
    3ce8:	2e03      	cmp	r6, #3
    3cea:	d8c4      	bhi.n	3c76 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3cec:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3cee:	b92e      	cbnz	r6, 3cfc <nrfx_gpiote_input_configure+0xa4>
    3cf0:	4a2d      	ldr	r2, [pc, #180]	; (3da8 <nrfx_gpiote_input_configure+0x150>)
    3cf2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3cf6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3cfa:	e7e2      	b.n	3cc2 <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3cfc:	00ba      	lsls	r2, r7, #2
    3cfe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3d02:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d06:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3d0a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d0e:	f02c 0c03 	bic.w	ip, ip, #3
    3d12:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3d16:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d1a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3d1e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3d22:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d26:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d2a:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
    3d2e:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d32:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3d36:	ea4c 0c0e 	orr.w	ip, ip, lr
    3d3a:	f041 0120 	orr.w	r1, r1, #32
    3d3e:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    3d42:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3d46:	e7bc      	b.n	3cc2 <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3d48:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3d4c:	4620      	mov	r0, r4
    3d4e:	f7ff ff3d 	bl	3bcc <release_handler>
    if (!handler)
    3d52:	2e00      	cmp	r6, #0
    3d54:	d0be      	beq.n	3cd4 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3d56:	4d11      	ldr	r5, [pc, #68]	; (3d9c <nrfx_gpiote_input_configure+0x144>)
    3d58:	682b      	ldr	r3, [r5, #0]
    3d5a:	429e      	cmp	r6, r3
    3d5c:	d104      	bne.n	3d68 <nrfx_gpiote_input_configure+0x110>
    3d5e:	686b      	ldr	r3, [r5, #4]
    3d60:	429f      	cmp	r7, r3
    3d62:	d101      	bne.n	3d68 <nrfx_gpiote_input_configure+0x110>
    3d64:	2200      	movs	r2, #0
    3d66:	e00a      	b.n	3d7e <nrfx_gpiote_input_configure+0x126>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3d68:	4810      	ldr	r0, [pc, #64]	; (3dac <nrfx_gpiote_input_configure+0x154>)
    3d6a:	f10d 010f 	add.w	r1, sp, #15
    3d6e:	f7ff fdff 	bl	3970 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3d72:	4b0c      	ldr	r3, [pc, #48]	; (3da4 <nrfx_gpiote_input_configure+0x14c>)
    3d74:	4298      	cmp	r0, r3
    3d76:	f47f af7f 	bne.w	3c78 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    3d7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3d7e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3d82:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3d86:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3d88:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3d8a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3d8e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3d96:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3d9a:	e79b      	b.n	3cd4 <nrfx_gpiote_input_configure+0x7c>
    3d9c:	2000002c 	.word	0x2000002c
    3da0:	0bad0004 	.word	0x0bad0004
    3da4:	0bad0000 	.word	0x0bad0000
    3da8:	40006000 	.word	0x40006000
    3dac:	200000a0 	.word	0x200000a0

00003db0 <nrfx_gpiote_output_configure>:
{
    3db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3db2:	4604      	mov	r4, r0
    3db4:	b085      	sub	sp, #20
    3db6:	4615      	mov	r5, r2
    if (p_config)
    3db8:	b309      	cbz	r1, 3dfe <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3dba:	f100 0708 	add.w	r7, r0, #8
    3dbe:	4e31      	ldr	r6, [pc, #196]	; (3e84 <nrfx_gpiote_output_configure+0xd4>)
    3dc0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3dc4:	0798      	lsls	r0, r3, #30
    3dc6:	d401      	bmi.n	3dcc <nrfx_gpiote_output_configure+0x1c>
    3dc8:	069a      	lsls	r2, r3, #26
    3dca:	d458      	bmi.n	3e7e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3dcc:	f013 0f1c 	tst.w	r3, #28
    3dd0:	d002      	beq.n	3dd8 <nrfx_gpiote_output_configure+0x28>
    3dd2:	784b      	ldrb	r3, [r1, #1]
    3dd4:	2b01      	cmp	r3, #1
    3dd6:	d052      	beq.n	3e7e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3dd8:	2301      	movs	r3, #1
    3dda:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3dde:	2300      	movs	r3, #0
    3de0:	e9cd 1300 	strd	r1, r3, [sp]
    3de4:	1c4a      	adds	r2, r1, #1
    3de6:	1c8b      	adds	r3, r1, #2
    3de8:	4620      	mov	r0, r4
    3dea:	f10d 010f 	add.w	r1, sp, #15
    3dee:	f002 ff6c 	bl	6cca <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3df2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3df6:	f043 0303 	orr.w	r3, r3, #3
    3dfa:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3dfe:	b915      	cbnz	r5, 3e06 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    3e00:	4821      	ldr	r0, [pc, #132]	; (3e88 <nrfx_gpiote_output_configure+0xd8>)
}
    3e02:	b005      	add	sp, #20
    3e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3e06:	4e1f      	ldr	r6, [pc, #124]	; (3e84 <nrfx_gpiote_output_configure+0xd4>)
    3e08:	f104 0708 	add.w	r7, r4, #8
    3e0c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3e10:	0783      	lsls	r3, r0, #30
    3e12:	d534      	bpl.n	3e7e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    3e14:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3e18:	4661      	mov	r1, ip
    3e1a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3e1c:	f020 0020 	bic.w	r0, r0, #32
    3e20:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3e24:	04c0      	lsls	r0, r0, #19
    3e26:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3e2a:	0cc0      	lsrs	r0, r0, #19
    3e2c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3e30:	2300      	movs	r3, #0
    3e32:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3e36:	786a      	ldrb	r2, [r5, #1]
    3e38:	2a00      	cmp	r2, #0
    3e3a:	d0e1      	beq.n	3e00 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3e3c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3e40:	78ad      	ldrb	r5, [r5, #2]
    3e42:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3e46:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3e4a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e4e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3e52:	0223      	lsls	r3, r4, #8
    3e54:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3e58:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e5a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3e5e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3e62:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e64:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3e66:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3e6a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e6e:	432b      	orrs	r3, r5
    3e70:	f040 0020 	orr.w	r0, r0, #32
    3e74:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3e78:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3e7c:	e7c0      	b.n	3e00 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    3e7e:	4803      	ldr	r0, [pc, #12]	; (3e8c <nrfx_gpiote_output_configure+0xdc>)
    3e80:	e7bf      	b.n	3e02 <nrfx_gpiote_output_configure+0x52>
    3e82:	bf00      	nop
    3e84:	2000002c 	.word	0x2000002c
    3e88:	0bad0000 	.word	0x0bad0000
    3e8c:	0bad0004 	.word	0x0bad0004

00003e90 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3e90:	4b01      	ldr	r3, [pc, #4]	; (3e98 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3e92:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3e96:	4770      	bx	lr
    3e98:	2000002c 	.word	0x2000002c

00003e9c <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3e9c:	3008      	adds	r0, #8
    3e9e:	4b05      	ldr	r3, [pc, #20]	; (3eb4 <nrfx_gpiote_channel_get+0x18>)
    3ea0:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    3ea4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3ea6:	bf43      	ittte	mi
    3ea8:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    3eaa:	4803      	ldrmi	r0, [pc, #12]	; (3eb8 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3eac:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    3eae:	4803      	ldrpl	r0, [pc, #12]	; (3ebc <nrfx_gpiote_channel_get+0x20>)
}
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop
    3eb4:	2000002c 	.word	0x2000002c
    3eb8:	0bad0000 	.word	0x0bad0000
    3ebc:	0bad0004 	.word	0x0bad0004

00003ec0 <nrfx_gpiote_init>:
{
    3ec0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3ec2:	4c0e      	ldr	r4, [pc, #56]	; (3efc <nrfx_gpiote_init+0x3c>)
    3ec4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3ec8:	b9b5      	cbnz	r5, 3ef8 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3eca:	2260      	movs	r2, #96	; 0x60
    3ecc:	4629      	mov	r1, r5
    3ece:	f104 0010 	add.w	r0, r4, #16
    3ed2:	f002 fc98 	bl	6806 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3ed6:	2006      	movs	r0, #6
    3ed8:	f7fd fe30 	bl	1b3c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3edc:	4b08      	ldr	r3, [pc, #32]	; (3f00 <nrfx_gpiote_init+0x40>)
    return err_code;
    3ede:	4809      	ldr	r0, [pc, #36]	; (3f04 <nrfx_gpiote_init+0x44>)
    3ee0:	601d      	str	r5, [r3, #0]
    3ee2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3ee4:	4b08      	ldr	r3, [pc, #32]	; (3f08 <nrfx_gpiote_init+0x48>)
    3ee6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3eea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3eee:	2301      	movs	r3, #1
    3ef0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3ef4:	6763      	str	r3, [r4, #116]	; 0x74
}
    3ef6:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3ef8:	4804      	ldr	r0, [pc, #16]	; (3f0c <nrfx_gpiote_init+0x4c>)
    3efa:	e7fc      	b.n	3ef6 <nrfx_gpiote_init+0x36>
    3efc:	2000002c 	.word	0x2000002c
    3f00:	4000617c 	.word	0x4000617c
    3f04:	0bad0000 	.word	0x0bad0000
    3f08:	40006000 	.word	0x40006000
    3f0c:	0bad0005 	.word	0x0bad0005

00003f10 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3f10:	4b03      	ldr	r3, [pc, #12]	; (3f20 <nrfx_gpiote_is_init+0x10>)
    3f12:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3f16:	3800      	subs	r0, #0
    3f18:	bf18      	it	ne
    3f1a:	2001      	movne	r0, #1
    3f1c:	4770      	bx	lr
    3f1e:	bf00      	nop
    3f20:	2000002c 	.word	0x2000002c

00003f24 <nrfx_gpiote_channel_free>:
{
    3f24:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3f26:	4801      	ldr	r0, [pc, #4]	; (3f2c <nrfx_gpiote_channel_free+0x8>)
    3f28:	f7ff bd46 	b.w	39b8 <nrfx_flag32_free>
    3f2c:	2000009c 	.word	0x2000009c

00003f30 <nrfx_gpiote_channel_alloc>:
{
    3f30:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3f32:	4801      	ldr	r0, [pc, #4]	; (3f38 <nrfx_gpiote_channel_alloc+0x8>)
    3f34:	f7ff bd1c 	b.w	3970 <nrfx_flag32_alloc>
    3f38:	2000009c 	.word	0x2000009c

00003f3c <nrfx_gpiote_trigger_enable>:
{
    3f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3f3e:	4b1f      	ldr	r3, [pc, #124]	; (3fbc <nrfx_gpiote_trigger_enable+0x80>)
    3f40:	f100 0208 	add.w	r2, r0, #8
{
    3f44:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3f46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3f4a:	069a      	lsls	r2, r3, #26
    3f4c:	d51d      	bpl.n	3f8a <nrfx_gpiote_trigger_enable+0x4e>
    3f4e:	f013 0502 	ands.w	r5, r3, #2
    3f52:	d11a      	bne.n	3f8a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3f54:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3f56:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3f58:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3f5c:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3f60:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3f64:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f68:	6005      	str	r5, [r0, #0]
    3f6a:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3f6c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3f70:	f040 0001 	orr.w	r0, r0, #1
    3f74:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3f78:	b129      	cbz	r1, 3f86 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3f7a:	2201      	movs	r2, #1
    3f7c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3f80:	4a0f      	ldr	r2, [pc, #60]	; (3fc0 <nrfx_gpiote_trigger_enable+0x84>)
    3f82:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3f86:	b003      	add	sp, #12
    3f88:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3f8a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3f8e:	2b04      	cmp	r3, #4
    3f90:	d010      	beq.n	3fb4 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3f92:	2b05      	cmp	r3, #5
    3f94:	d010      	beq.n	3fb8 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f96:	a801      	add	r0, sp, #4
    3f98:	9401      	str	r4, [sp, #4]
    3f9a:	f7ff fdeb 	bl	3b74 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3f9e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3fa0:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3fa4:	40d9      	lsrs	r1, r3
    3fa6:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3faa:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3fac:	4620      	mov	r0, r4
    3fae:	f002 fed3 	bl	6d58 <nrf_gpio_cfg_sense_set>
}
    3fb2:	e7e8      	b.n	3f86 <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3fb4:	2103      	movs	r1, #3
    3fb6:	e7f9      	b.n	3fac <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3fb8:	2102      	movs	r1, #2
    3fba:	e7f7      	b.n	3fac <nrfx_gpiote_trigger_enable+0x70>
    3fbc:	2000002c 	.word	0x2000002c
    3fc0:	40006000 	.word	0x40006000

00003fc4 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3fc4:	4b0e      	ldr	r3, [pc, #56]	; (4000 <nrfx_gpiote_trigger_disable+0x3c>)
    3fc6:	f100 0208 	add.w	r2, r0, #8
    3fca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3fce:	0699      	lsls	r1, r3, #26
    3fd0:	d513      	bpl.n	3ffa <nrfx_gpiote_trigger_disable+0x36>
    3fd2:	079a      	lsls	r2, r3, #30
    3fd4:	d411      	bmi.n	3ffa <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3fd6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3fd8:	2201      	movs	r2, #1
    3fda:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3fdc:	009b      	lsls	r3, r3, #2
    3fde:	4909      	ldr	r1, [pc, #36]	; (4004 <nrfx_gpiote_trigger_disable+0x40>)
    3fe0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3fe4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3fe8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3fec:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3ff0:	f022 0203 	bic.w	r2, r2, #3
    3ff4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3ff8:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3ffa:	2100      	movs	r1, #0
    3ffc:	f002 beac 	b.w	6d58 <nrf_gpio_cfg_sense_set>
    4000:	2000002c 	.word	0x2000002c
    4004:	40006000 	.word	0x40006000

00004008 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4008:	4b0e      	ldr	r3, [pc, #56]	; (4044 <nrfx_gpiote_pin_uninit+0x3c>)
    400a:	f100 0208 	add.w	r2, r0, #8
{
    400e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4010:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4014:	07db      	lsls	r3, r3, #31
{
    4016:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4018:	d511      	bpl.n	403e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    401a:	f7ff ffd3 	bl	3fc4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    401e:	4620      	mov	r0, r4
    4020:	f7ff fe00 	bl	3c24 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4024:	a801      	add	r0, sp, #4
    4026:	9401      	str	r4, [sp, #4]
    4028:	f7ff fda4 	bl	3b74 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    402c:	9b01      	ldr	r3, [sp, #4]
    402e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4032:	2202      	movs	r2, #2
    4034:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4038:	4803      	ldr	r0, [pc, #12]	; (4048 <nrfx_gpiote_pin_uninit+0x40>)
}
    403a:	b002      	add	sp, #8
    403c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    403e:	4803      	ldr	r0, [pc, #12]	; (404c <nrfx_gpiote_pin_uninit+0x44>)
    4040:	e7fb      	b.n	403a <nrfx_gpiote_pin_uninit+0x32>
    4042:	bf00      	nop
    4044:	2000002c 	.word	0x2000002c
    4048:	0bad0000 	.word	0x0bad0000
    404c:	0bad0004 	.word	0x0bad0004

00004050 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4054:	4b64      	ldr	r3, [pc, #400]	; (41e8 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    4056:	4865      	ldr	r0, [pc, #404]	; (41ec <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4058:	4965      	ldr	r1, [pc, #404]	; (41f0 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    405a:	2500      	movs	r5, #0
{
    405c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    405e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4060:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4062:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4064:	b136      	cbz	r6, 4074 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4066:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    406a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    406c:	bf1e      	ittt	ne
    406e:	601c      	strne	r4, [r3, #0]
    4070:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4072:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4074:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4076:	428b      	cmp	r3, r1
        mask <<= 1;
    4078:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    407c:	d1f1      	bne.n	4062 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    407e:	4f5d      	ldr	r7, [pc, #372]	; (41f4 <nrfx_gpiote_irq_handler+0x1a4>)
    4080:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4082:	b37b      	cbz	r3, 40e4 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4084:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4088:	4e5b      	ldr	r6, [pc, #364]	; (41f8 <nrfx_gpiote_irq_handler+0x1a8>)
    408a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    408e:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4090:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4094:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4098:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    409a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    409e:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    40a0:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    40a4:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    40a8:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    40ac:	f8d9 3000 	ldr.w	r3, [r9]
    40b0:	b9f3      	cbnz	r3, 40f0 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    40b2:	f108 0820 	add.w	r8, r8, #32
    40b6:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    40ba:	f109 0904 	add.w	r9, r9, #4
    40be:	d1f5      	bne.n	40ac <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    40c0:	603b      	str	r3, [r7, #0]
    40c2:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    40c4:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
    40c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    40ca:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    40ce:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    40d0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    40d4:	9b00      	ldr	r3, [sp, #0]
    40d6:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    40da:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    40dc:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    40e0:	4313      	orrs	r3, r2
    40e2:	d1dd      	bne.n	40a0 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    40e4:	2401      	movs	r4, #1
    while (mask)
    40e6:	2d00      	cmp	r5, #0
    40e8:	d166      	bne.n	41b8 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    40ea:	b007      	add	sp, #28
    40ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    40f0:	fa93 f3a3 	rbit	r3, r3
    40f4:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    40f8:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    40fc:	f106 0208 	add.w	r2, r6, #8
    4100:	4b3e      	ldr	r3, [pc, #248]	; (41fc <nrfx_gpiote_irq_handler+0x1ac>)
    4102:	9603      	str	r6, [sp, #12]
    4104:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    4108:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    410c:	08f4      	lsrs	r4, r6, #3
    410e:	9301      	str	r3, [sp, #4]
    4110:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    4112:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
    4114:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4118:	fa0b fc00 	lsl.w	ip, fp, r0
    411c:	5d18      	ldrb	r0, [r3, r4]
    411e:	ea20 000c 	bic.w	r0, r0, ip
    4122:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4124:	a803      	add	r0, sp, #12
    4126:	0891      	lsrs	r1, r2, #2
    4128:	f7ff fd24 	bl	3b74 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    412c:	9c03      	ldr	r4, [sp, #12]
    412e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
    4132:	074b      	lsls	r3, r1, #29
    4134:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4138:	f3c4 4401 	ubfx	r4, r4, #16, #2
    413c:	d523      	bpl.n	4186 <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
    413e:	4651      	mov	r1, sl
    4140:	4630      	mov	r0, r6
    4142:	f7ff fd25 	bl	3b90 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4146:	a803      	add	r0, sp, #12
    4148:	9603      	str	r6, [sp, #12]
    414a:	f7ff fd13 	bl	3b74 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    414e:	9a03      	ldr	r2, [sp, #12]
    4150:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4154:	b2e4      	uxtb	r4, r4
    4156:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    415a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    415e:	4294      	cmp	r4, r2
    4160:	d107      	bne.n	4172 <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4162:	2100      	movs	r1, #0
    4164:	4630      	mov	r0, r6
    4166:	f002 fdf7 	bl	6d58 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    416a:	4621      	mov	r1, r4
    416c:	4630      	mov	r0, r6
    416e:	f002 fdf3 	bl	6d58 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4172:	a803      	add	r0, sp, #12
    4174:	9603      	str	r6, [sp, #12]
    4176:	f7ff fcfd 	bl	3b74 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    417a:	9b03      	ldr	r3, [sp, #12]
    417c:	fa0b f303 	lsl.w	r3, fp, r3
    4180:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4184:	e792      	b.n	40ac <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4186:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4188:	bf0c      	ite	eq
    418a:	2103      	moveq	r1, #3
    418c:	2102      	movne	r1, #2
    418e:	4630      	mov	r0, r6
    4190:	f002 fde2 	bl	6d58 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4194:	9b01      	ldr	r3, [sp, #4]
    4196:	2b03      	cmp	r3, #3
    4198:	d004      	beq.n	41a4 <nrfx_gpiote_irq_handler+0x154>
    419a:	2c02      	cmp	r4, #2
    419c:	d107      	bne.n	41ae <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    419e:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    41a2:	d1e6      	bne.n	4172 <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
    41a4:	4651      	mov	r1, sl
    41a6:	4630      	mov	r0, r6
    41a8:	f7ff fcf2 	bl	3b90 <call_handler>
    41ac:	e7e1      	b.n	4172 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    41ae:	2c03      	cmp	r4, #3
    41b0:	d1df      	bne.n	4172 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    41b2:	f1ba 0f02 	cmp.w	sl, #2
    41b6:	e7f4      	b.n	41a2 <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
    41b8:	fa95 f3a5 	rbit	r3, r5
    41bc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    41c0:	fa04 f203 	lsl.w	r2, r4, r3
    41c4:	009b      	lsls	r3, r3, #2
    41c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    41ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    41ce:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    41d2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    41d6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    41da:	f3c0 2005 	ubfx	r0, r0, #8, #6
    41de:	f3c1 4101 	ubfx	r1, r1, #16, #2
    41e2:	f7ff fcd5 	bl	3b90 <call_handler>
    41e6:	e77e      	b.n	40e6 <nrfx_gpiote_irq_handler+0x96>
    41e8:	40006100 	.word	0x40006100
    41ec:	40006000 	.word	0x40006000
    41f0:	40006120 	.word	0x40006120
    41f4:	4000617c 	.word	0x4000617c
    41f8:	50000300 	.word	0x50000300
    41fc:	2000002c 	.word	0x2000002c

00004200 <nrfx_nvmc_page_erase>:
    return p_reg->CODEPAGESIZE;
    4200:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4204:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
    4206:	fbb0 f3f2 	udiv	r3, r0, r2
    420a:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    420e:	b973      	cbnz	r3, 422e <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    4210:	4b08      	ldr	r3, [pc, #32]	; (4234 <nrfx_nvmc_page_erase+0x34>)
    4212:	2202      	movs	r2, #2
    4214:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    4218:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    421c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4220:	07d2      	lsls	r2, r2, #31
    4222:	d5fb      	bpl.n	421c <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    4224:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    4226:	4804      	ldr	r0, [pc, #16]	; (4238 <nrfx_nvmc_page_erase+0x38>)
    4228:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    422c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    422e:	4803      	ldr	r0, [pc, #12]	; (423c <nrfx_nvmc_page_erase+0x3c>)
}
    4230:	4770      	bx	lr
    4232:	bf00      	nop
    4234:	4001e000 	.word	0x4001e000
    4238:	0bad0000 	.word	0x0bad0000
    423c:	0bad000a 	.word	0x0bad000a

00004240 <nrfx_nvmc_word_write>:
    4240:	4b07      	ldr	r3, [pc, #28]	; (4260 <nrfx_nvmc_word_write+0x20>)
    4242:	2201      	movs	r2, #1
    4244:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    4248:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    424c:	07d2      	lsls	r2, r2, #31
    424e:	d5fb      	bpl.n	4248 <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
    4250:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4252:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
    4256:	2200      	movs	r2, #0
    4258:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
    425c:	4770      	bx	lr
    425e:	bf00      	nop
    4260:	4001e000 	.word	0x4001e000

00004264 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4264:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4266:	4801      	ldr	r0, [pc, #4]	; (426c <nrfx_ppi_channel_alloc+0x8>)
    4268:	f7ff bb82 	b.w	3970 <nrfx_flag32_alloc>
    426c:	200000a8 	.word	0x200000a8

00004270 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4270:	4b0e      	ldr	r3, [pc, #56]	; (42ac <z_sys_init_run_level+0x3c>)
{
    4272:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4274:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4278:	3001      	adds	r0, #1
    427a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    427e:	42a6      	cmp	r6, r4
    4280:	d800      	bhi.n	4284 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4282:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4284:	e9d4 3500 	ldrd	r3, r5, [r4]
    4288:	4628      	mov	r0, r5
    428a:	4798      	blx	r3
		if (dev != NULL) {
    428c:	b165      	cbz	r5, 42a8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    428e:	68eb      	ldr	r3, [r5, #12]
    4290:	b130      	cbz	r0, 42a0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4292:	2800      	cmp	r0, #0
    4294:	bfb8      	it	lt
    4296:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4298:	28ff      	cmp	r0, #255	; 0xff
    429a:	bfa8      	it	ge
    429c:	20ff      	movge	r0, #255	; 0xff
    429e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    42a0:	785a      	ldrb	r2, [r3, #1]
    42a2:	f042 0201 	orr.w	r2, r2, #1
    42a6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    42a8:	3408      	adds	r4, #8
    42aa:	e7e8      	b.n	427e <z_sys_init_run_level+0xe>
    42ac:	00007380 	.word	0x00007380

000042b0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    42b0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    42b2:	4605      	mov	r5, r0
    42b4:	b910      	cbnz	r0, 42bc <z_impl_device_get_binding+0xc>
		return NULL;
    42b6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    42b8:	4620      	mov	r0, r4
    42ba:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    42bc:	7803      	ldrb	r3, [r0, #0]
    42be:	2b00      	cmp	r3, #0
    42c0:	d0f9      	beq.n	42b6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    42c2:	4a0f      	ldr	r2, [pc, #60]	; (4300 <z_impl_device_get_binding+0x50>)
    42c4:	4c0f      	ldr	r4, [pc, #60]	; (4304 <z_impl_device_get_binding+0x54>)
    42c6:	4616      	mov	r6, r2
    42c8:	4294      	cmp	r4, r2
    42ca:	d108      	bne.n	42de <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    42cc:	4c0d      	ldr	r4, [pc, #52]	; (4304 <z_impl_device_get_binding+0x54>)
    42ce:	42b4      	cmp	r4, r6
    42d0:	d0f1      	beq.n	42b6 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    42d2:	4620      	mov	r0, r4
    42d4:	f002 fd5e 	bl	6d94 <z_device_ready>
    42d8:	b950      	cbnz	r0, 42f0 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    42da:	3418      	adds	r4, #24
    42dc:	e7f7      	b.n	42ce <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    42de:	4620      	mov	r0, r4
    42e0:	f002 fd58 	bl	6d94 <z_device_ready>
    42e4:	b110      	cbz	r0, 42ec <z_impl_device_get_binding+0x3c>
    42e6:	6823      	ldr	r3, [r4, #0]
    42e8:	42ab      	cmp	r3, r5
    42ea:	d0e5      	beq.n	42b8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    42ec:	3418      	adds	r4, #24
    42ee:	e7eb      	b.n	42c8 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    42f0:	6821      	ldr	r1, [r4, #0]
    42f2:	4628      	mov	r0, r5
    42f4:	f002 fa60 	bl	67b8 <strcmp>
    42f8:	2800      	cmp	r0, #0
    42fa:	d1ee      	bne.n	42da <z_impl_device_get_binding+0x2a>
    42fc:	e7dc      	b.n	42b8 <z_impl_device_get_binding+0x8>
    42fe:	bf00      	nop
    4300:	00006ef4 	.word	0x00006ef4
    4304:	00006e7c 	.word	0x00006e7c

00004308 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4308:	b573      	push	{r0, r1, r4, r5, r6, lr}
    430a:	4604      	mov	r4, r0
    430c:	460d      	mov	r5, r1
	__asm__ volatile(
    430e:	f04f 0320 	mov.w	r3, #32
    4312:	f3ef 8611 	mrs	r6, BASEPRI
    4316:	f383 8812 	msr	BASEPRI_MAX, r3
    431a:	f3bf 8f6f 	isb	sy
	switch (reason) {
    431e:	2804      	cmp	r0, #4
    4320:	bf96      	itet	ls
    4322:	4b12      	ldrls	r3, [pc, #72]	; (436c <z_fatal_error+0x64>)
    4324:	4b12      	ldrhi	r3, [pc, #72]	; (4370 <z_fatal_error+0x68>)
	return 0;
    4326:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    432a:	2200      	movs	r2, #0
    432c:	9200      	str	r2, [sp, #0]
    432e:	2145      	movs	r1, #69	; 0x45
    4330:	4602      	mov	r2, r0
    4332:	4810      	ldr	r0, [pc, #64]	; (4374 <z_fatal_error+0x6c>)
    4334:	f002 f96e 	bl	6614 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4338:	b13d      	cbz	r5, 434a <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    433a:	69eb      	ldr	r3, [r5, #28]
    433c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4340:	b11b      	cbz	r3, 434a <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    4342:	480d      	ldr	r0, [pc, #52]	; (4378 <z_fatal_error+0x70>)
    4344:	2145      	movs	r1, #69	; 0x45
    4346:	f002 f965 	bl	6614 <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    434a:	4b0c      	ldr	r3, [pc, #48]	; (437c <z_fatal_error+0x74>)
    434c:	480c      	ldr	r0, [pc, #48]	; (4380 <z_fatal_error+0x78>)
    434e:	2200      	movs	r2, #0
    4350:	2145      	movs	r1, #69	; 0x45
    4352:	f002 f95f 	bl	6614 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4356:	4629      	mov	r1, r5
    4358:	4620      	mov	r0, r4
    435a:	f7ff f90d 	bl	3578 <k_sys_fatal_error_handler>
	__asm__ volatile(
    435e:	f386 8811 	msr	BASEPRI, r6
    4362:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4366:	b002      	add	sp, #8
    4368:	bd70      	pop	{r4, r5, r6, pc}
    436a:	bf00      	nop
    436c:	00007394 	.word	0x00007394
    4370:	000081cc 	.word	0x000081cc
    4374:	000081da 	.word	0x000081da
    4378:	00008207 	.word	0x00008207
    437c:	0000822d 	.word	0x0000822d
    4380:	00008235 	.word	0x00008235

00004384 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4384:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4386:	4b09      	ldr	r3, [pc, #36]	; (43ac <bg_thread_main+0x28>)
    4388:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    438a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    438c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    438e:	f7ff ff6f 	bl	4270 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4392:	f000 f921 	bl	45d8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4396:	2003      	movs	r0, #3
    4398:	f7ff ff6a 	bl	4270 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    439c:	f7fc f82c 	bl	3f8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    43a0:	4a03      	ldr	r2, [pc, #12]	; (43b0 <bg_thread_main+0x2c>)
    43a2:	7b13      	ldrb	r3, [r2, #12]
    43a4:	f023 0301 	bic.w	r3, r3, #1
    43a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    43aa:	bd08      	pop	{r3, pc}
    43ac:	20000fff 	.word	0x20000fff
    43b0:	20000148 	.word	0x20000148

000043b4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    43b4:	4802      	ldr	r0, [pc, #8]	; (43c0 <z_bss_zero+0xc>)
    43b6:	4a03      	ldr	r2, [pc, #12]	; (43c4 <z_bss_zero+0x10>)
    43b8:	2100      	movs	r1, #0
    43ba:	1a12      	subs	r2, r2, r0
    43bc:	f002 ba23 	b.w	6806 <memset>
    43c0:	20000128 	.word	0x20000128
    43c4:	20001000 	.word	0x20001000

000043c8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    43c8:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    43ca:	4b19      	ldr	r3, [pc, #100]	; (4430 <z_cstart+0x68>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    43cc:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    43d0:	4c18      	ldr	r4, [pc, #96]	; (4434 <z_cstart+0x6c>)
    43d2:	6963      	ldr	r3, [r4, #20]
    43d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    43d8:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    43da:	2500      	movs	r5, #0
    43dc:	23e0      	movs	r3, #224	; 0xe0
    43de:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    43e2:	77e5      	strb	r5, [r4, #31]
    43e4:	7625      	strb	r5, [r4, #24]
    43e6:	7665      	strb	r5, [r4, #25]
    43e8:	76a5      	strb	r5, [r4, #26]
    43ea:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    43ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    43f0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    43f4:	6263      	str	r3, [r4, #36]	; 0x24
    43f6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    43fa:	f7fd fe43 	bl	2084 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    43fe:	f7fd fb51 	bl	1aa4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4402:	f04f 33ff 	mov.w	r3, #4294967295
    4406:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4408:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    440a:	f7fd ff39 	bl	2280 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    440e:	f7fd fec3 	bl	2198 <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4412:	f002 fcbe 	bl	6d92 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4416:	4628      	mov	r0, r5
    4418:	f7ff ff2a 	bl	4270 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    441c:	2001      	movs	r0, #1
    441e:	f7ff ff27 	bl	4270 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4422:	4805      	ldr	r0, [pc, #20]	; (4438 <z_cstart+0x70>)
    4424:	462b      	mov	r3, r5
    4426:	462a      	mov	r2, r5
    4428:	4629      	mov	r1, r5
    442a:	f7fd fc19 	bl	1c60 <z_arm_switch_to_main_no_multithreading>
    442e:	bf00      	nop
    4430:	20004040 	.word	0x20004040
    4434:	e000ed00 	.word	0xe000ed00
    4438:	00004385 	.word	0x00004385

0000443c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    443c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    443e:	4806      	ldr	r0, [pc, #24]	; (4458 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    4440:	4a06      	ldr	r2, [pc, #24]	; (445c <z_data_copy+0x20>)
    4442:	4907      	ldr	r1, [pc, #28]	; (4460 <z_data_copy+0x24>)
    4444:	1a12      	subs	r2, r2, r0
    4446:	f002 f9d3 	bl	67f0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    444a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    444e:	4a05      	ldr	r2, [pc, #20]	; (4464 <z_data_copy+0x28>)
    4450:	4905      	ldr	r1, [pc, #20]	; (4468 <z_data_copy+0x2c>)
    4452:	4806      	ldr	r0, [pc, #24]	; (446c <z_data_copy+0x30>)
    4454:	f002 b9cc 	b.w	67f0 <memcpy>
    4458:	20000000 	.word	0x20000000
    445c:	20000128 	.word	0x20000128
    4460:	000082d8 	.word	0x000082d8
    4464:	00000000 	.word	0x00000000
    4468:	000082d8 	.word	0x000082d8
    446c:	20000000 	.word	0x20000000

00004470 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4470:	4b03      	ldr	r3, [pc, #12]	; (4480 <elapsed+0x10>)
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	b90b      	cbnz	r3, 447a <elapsed+0xa>
    4476:	f7ff b81f 	b.w	34b8 <sys_clock_elapsed>
}
    447a:	2000      	movs	r0, #0
    447c:	4770      	bx	lr
    447e:	bf00      	nop
    4480:	20000ee0 	.word	0x20000ee0

00004484 <remove_timeout>:
{
    4484:	b530      	push	{r4, r5, lr}
    4486:	6803      	ldr	r3, [r0, #0]
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4488:	b168      	cbz	r0, 44a6 <remove_timeout+0x22>
    448a:	4a0a      	ldr	r2, [pc, #40]	; (44b4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    448c:	6852      	ldr	r2, [r2, #4]
    448e:	4290      	cmp	r0, r2
    4490:	d009      	beq.n	44a6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    4492:	b143      	cbz	r3, 44a6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4494:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4498:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    449c:	1912      	adds	r2, r2, r4
    449e:	eb45 0101 	adc.w	r1, r5, r1
    44a2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    44a6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    44a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    44aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    44ac:	2300      	movs	r3, #0
	node->prev = NULL;
    44ae:	e9c0 3300 	strd	r3, r3, [r0]
}
    44b2:	bd30      	pop	{r4, r5, pc}
    44b4:	200000ac 	.word	0x200000ac

000044b8 <next_timeout>:
	return list->head == list;
    44b8:	4b11      	ldr	r3, [pc, #68]	; (4500 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    44ba:	b510      	push	{r4, lr}
    44bc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44be:	429c      	cmp	r4, r3
    44c0:	bf08      	it	eq
    44c2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    44c4:	f7ff ffd4 	bl	4470 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    44c8:	b1a4      	cbz	r4, 44f4 <next_timeout+0x3c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    44ca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    44ce:	1a12      	subs	r2, r2, r0
    44d0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    44d4:	2a01      	cmp	r2, #1
    44d6:	f173 0100 	sbcs.w	r1, r3, #0
    44da:	db0e      	blt.n	44fa <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    44dc:	4610      	mov	r0, r2
    44de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    44e2:	4619      	mov	r1, r3
    44e4:	4282      	cmp	r2, r0
    44e6:	f04f 0300 	mov.w	r3, #0
    44ea:	eb73 0401 	sbcs.w	r4, r3, r1
    44ee:	da00      	bge.n	44f2 <next_timeout+0x3a>
    44f0:	4610      	mov	r0, r2
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    44f2:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    44f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    44f8:	e7fb      	b.n	44f2 <next_timeout+0x3a>
    44fa:	2000      	movs	r0, #0
	return ret;
    44fc:	e7f9      	b.n	44f2 <next_timeout+0x3a>
    44fe:	bf00      	nop
    4500:	200000ac 	.word	0x200000ac

00004504 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    4508:	f04f 0320 	mov.w	r3, #32
    450c:	f3ef 8411 	mrs	r4, BASEPRI
    4510:	f383 8812 	msr	BASEPRI_MAX, r3
    4514:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4518:	4d2c      	ldr	r5, [pc, #176]	; (45cc <sys_clock_announce+0xc8>)
    451a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 45d0 <sys_clock_announce+0xcc>
	return list->head == list;
    451e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 45d4 <sys_clock_announce+0xd0>
    4522:	6028      	str	r0, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4524:	4651      	mov	r1, sl
    4526:	f8d5 c000 	ldr.w	ip, [r5]
    452a:	f8db 0000 	ldr.w	r0, [fp]
    452e:	4662      	mov	r2, ip
    4530:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4532:	4558      	cmp	r0, fp
    4534:	e9da 8900 	ldrd	r8, r9, [sl]
    4538:	e9cd 2300 	strd	r2, r3, [sp]
    453c:	d00d      	beq.n	455a <sys_clock_announce+0x56>
    453e:	b160      	cbz	r0, 455a <sys_clock_announce+0x56>
    4540:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    4544:	45b4      	cmp	ip, r6
    4546:	41bb      	sbcs	r3, r7
    4548:	da1e      	bge.n	4588 <sys_clock_announce+0x84>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    454a:	9b00      	ldr	r3, [sp, #0]
    454c:	ebb6 0c03 	subs.w	ip, r6, r3
    4550:	9b01      	ldr	r3, [sp, #4]
    4552:	eb67 0603 	sbc.w	r6, r7, r3
    4556:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    455a:	9b00      	ldr	r3, [sp, #0]
    455c:	eb13 0208 	adds.w	r2, r3, r8
    4560:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    4562:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    4566:	eb43 0309 	adc.w	r3, r3, r9
    456a:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    456e:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4570:	f7ff ffa2 	bl	44b8 <next_timeout>
    4574:	4631      	mov	r1, r6
    4576:	f7fe ff6f 	bl	3458 <sys_clock_set_timeout>
	__asm__ volatile(
    457a:	f384 8811 	msr	BASEPRI, r4
    457e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4582:	b003      	add	sp, #12
    4584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    4588:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    458c:	f04f 0200 	mov.w	r2, #0
    4590:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    4594:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    4598:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    459c:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    45a0:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    45a4:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    45a6:	f7ff ff6d 	bl	4484 <remove_timeout>
    45aa:	f384 8811 	msr	BASEPRI, r4
    45ae:	f3bf 8f6f 	isb	sy
		t->fn(t);
    45b2:	6883      	ldr	r3, [r0, #8]
    45b4:	4798      	blx	r3
	__asm__ volatile(
    45b6:	f04f 0320 	mov.w	r3, #32
    45ba:	f3ef 8411 	mrs	r4, BASEPRI
    45be:	f383 8812 	msr	BASEPRI_MAX, r3
    45c2:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    45c6:	4902      	ldr	r1, [pc, #8]	; (45d0 <sys_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    45c8:	e7ad      	b.n	4526 <sys_clock_announce+0x22>
    45ca:	bf00      	nop
    45cc:	20000ee0 	.word	0x20000ee0
    45d0:	200001c8 	.word	0x200001c8
    45d4:	200000ac 	.word	0x200000ac

000045d8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    45d8:	4a02      	ldr	r2, [pc, #8]	; (45e4 <boot_banner+0xc>)
    45da:	4903      	ldr	r1, [pc, #12]	; (45e8 <boot_banner+0x10>)
    45dc:	4803      	ldr	r0, [pc, #12]	; (45ec <boot_banner+0x14>)
    45de:	f001 bf5f 	b.w	64a0 <printk>
    45e2:	bf00      	nop
    45e4:	0000822c 	.word	0x0000822c
    45e8:	0000829f 	.word	0x0000829f
    45ec:	000082ae 	.word	0x000082ae

000045f0 <nrf_cc3xx_platform_init_no_rng>:
    45f0:	b510      	push	{r4, lr}
    45f2:	4c0a      	ldr	r4, [pc, #40]	; (461c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    45f4:	6823      	ldr	r3, [r4, #0]
    45f6:	b11b      	cbz	r3, 4600 <nrf_cc3xx_platform_init_no_rng+0x10>
    45f8:	2301      	movs	r3, #1
    45fa:	6023      	str	r3, [r4, #0]
    45fc:	2000      	movs	r0, #0
    45fe:	bd10      	pop	{r4, pc}
    4600:	f000 f856 	bl	46b0 <CC_LibInitNoRng>
    4604:	2800      	cmp	r0, #0
    4606:	d0f7      	beq.n	45f8 <nrf_cc3xx_platform_init_no_rng+0x8>
    4608:	3801      	subs	r0, #1
    460a:	2806      	cmp	r0, #6
    460c:	d803      	bhi.n	4616 <nrf_cc3xx_platform_init_no_rng+0x26>
    460e:	4b04      	ldr	r3, [pc, #16]	; (4620 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4610:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4614:	bd10      	pop	{r4, pc}
    4616:	4803      	ldr	r0, [pc, #12]	; (4624 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4618:	bd10      	pop	{r4, pc}
    461a:	bf00      	nop
    461c:	20000ee4 	.word	0x20000ee4
    4620:	000073a8 	.word	0x000073a8
    4624:	ffff8ffe 	.word	0xffff8ffe

00004628 <nrf_cc3xx_platform_abort>:
    4628:	f3bf 8f4f 	dsb	sy
    462c:	4905      	ldr	r1, [pc, #20]	; (4644 <nrf_cc3xx_platform_abort+0x1c>)
    462e:	4b06      	ldr	r3, [pc, #24]	; (4648 <nrf_cc3xx_platform_abort+0x20>)
    4630:	68ca      	ldr	r2, [r1, #12]
    4632:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4636:	4313      	orrs	r3, r2
    4638:	60cb      	str	r3, [r1, #12]
    463a:	f3bf 8f4f 	dsb	sy
    463e:	bf00      	nop
    4640:	e7fd      	b.n	463e <nrf_cc3xx_platform_abort+0x16>
    4642:	bf00      	nop
    4644:	e000ed00 	.word	0xe000ed00
    4648:	05fa0004 	.word	0x05fa0004

0000464c <CC_PalAbort>:
    464c:	b4f0      	push	{r4, r5, r6, r7}
    464e:	4f09      	ldr	r7, [pc, #36]	; (4674 <CC_PalAbort+0x28>)
    4650:	4e09      	ldr	r6, [pc, #36]	; (4678 <CC_PalAbort+0x2c>)
    4652:	4c0a      	ldr	r4, [pc, #40]	; (467c <CC_PalAbort+0x30>)
    4654:	4a0a      	ldr	r2, [pc, #40]	; (4680 <CC_PalAbort+0x34>)
    4656:	4d0b      	ldr	r5, [pc, #44]	; (4684 <CC_PalAbort+0x38>)
    4658:	490b      	ldr	r1, [pc, #44]	; (4688 <CC_PalAbort+0x3c>)
    465a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    465e:	603b      	str	r3, [r7, #0]
    4660:	6852      	ldr	r2, [r2, #4]
    4662:	6033      	str	r3, [r6, #0]
    4664:	6023      	str	r3, [r4, #0]
    4666:	2400      	movs	r4, #0
    4668:	602b      	str	r3, [r5, #0]
    466a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    466e:	bcf0      	pop	{r4, r5, r6, r7}
    4670:	4710      	bx	r2
    4672:	bf00      	nop
    4674:	5002b400 	.word	0x5002b400
    4678:	5002b404 	.word	0x5002b404
    467c:	5002b408 	.word	0x5002b408
    4680:	200000b4 	.word	0x200000b4
    4684:	5002b40c 	.word	0x5002b40c
    4688:	5002a000 	.word	0x5002a000

0000468c <nrf_cc3xx_platform_set_abort>:
    468c:	e9d0 1200 	ldrd	r1, r2, [r0]
    4690:	4b01      	ldr	r3, [pc, #4]	; (4698 <nrf_cc3xx_platform_set_abort+0xc>)
    4692:	e9c3 1200 	strd	r1, r2, [r3]
    4696:	4770      	bx	lr
    4698:	200000b4 	.word	0x200000b4

0000469c <mbedtls_platform_zeroize>:
    469c:	b138      	cbz	r0, 46ae <mbedtls_platform_zeroize+0x12>
    469e:	b131      	cbz	r1, 46ae <mbedtls_platform_zeroize+0x12>
    46a0:	4401      	add	r1, r0
    46a2:	2200      	movs	r2, #0
    46a4:	4603      	mov	r3, r0
    46a6:	3001      	adds	r0, #1
    46a8:	4288      	cmp	r0, r1
    46aa:	701a      	strb	r2, [r3, #0]
    46ac:	d1fa      	bne.n	46a4 <mbedtls_platform_zeroize+0x8>
    46ae:	4770      	bx	lr

000046b0 <CC_LibInitNoRng>:
    46b0:	b510      	push	{r4, lr}
    46b2:	f000 f833 	bl	471c <CC_HalInit>
    46b6:	b120      	cbz	r0, 46c2 <CC_LibInitNoRng+0x12>
    46b8:	2403      	movs	r4, #3
    46ba:	f000 f867 	bl	478c <CC_PalTerminate>
    46be:	4620      	mov	r0, r4
    46c0:	bd10      	pop	{r4, pc}
    46c2:	f000 f835 	bl	4730 <CC_PalInit>
    46c6:	b990      	cbnz	r0, 46ee <CC_LibInitNoRng+0x3e>
    46c8:	f000 f8b0 	bl	482c <CC_PalPowerSaveModeSelect>
    46cc:	b990      	cbnz	r0, 46f4 <CC_LibInitNoRng+0x44>
    46ce:	4b0f      	ldr	r3, [pc, #60]	; (470c <CC_LibInitNoRng+0x5c>)
    46d0:	681b      	ldr	r3, [r3, #0]
    46d2:	0e1b      	lsrs	r3, r3, #24
    46d4:	2bf0      	cmp	r3, #240	; 0xf0
    46d6:	d108      	bne.n	46ea <CC_LibInitNoRng+0x3a>
    46d8:	4a0d      	ldr	r2, [pc, #52]	; (4710 <CC_LibInitNoRng+0x60>)
    46da:	4b0e      	ldr	r3, [pc, #56]	; (4714 <CC_LibInitNoRng+0x64>)
    46dc:	6812      	ldr	r2, [r2, #0]
    46de:	429a      	cmp	r2, r3
    46e0:	d00a      	beq.n	46f8 <CC_LibInitNoRng+0x48>
    46e2:	2407      	movs	r4, #7
    46e4:	f000 f81c 	bl	4720 <CC_HalTerminate>
    46e8:	e7e7      	b.n	46ba <CC_LibInitNoRng+0xa>
    46ea:	2406      	movs	r4, #6
    46ec:	e7fa      	b.n	46e4 <CC_LibInitNoRng+0x34>
    46ee:	2404      	movs	r4, #4
    46f0:	4620      	mov	r0, r4
    46f2:	bd10      	pop	{r4, pc}
    46f4:	2400      	movs	r4, #0
    46f6:	e7f5      	b.n	46e4 <CC_LibInitNoRng+0x34>
    46f8:	2001      	movs	r0, #1
    46fa:	f000 f897 	bl	482c <CC_PalPowerSaveModeSelect>
    46fe:	4604      	mov	r4, r0
    4700:	2800      	cmp	r0, #0
    4702:	d1f7      	bne.n	46f4 <CC_LibInitNoRng+0x44>
    4704:	4b04      	ldr	r3, [pc, #16]	; (4718 <CC_LibInitNoRng+0x68>)
    4706:	6018      	str	r0, [r3, #0]
    4708:	e7d9      	b.n	46be <CC_LibInitNoRng+0xe>
    470a:	bf00      	nop
    470c:	5002b928 	.word	0x5002b928
    4710:	5002ba24 	.word	0x5002ba24
    4714:	20e00000 	.word	0x20e00000
    4718:	5002ba0c 	.word	0x5002ba0c

0000471c <CC_HalInit>:
    471c:	2000      	movs	r0, #0
    471e:	4770      	bx	lr

00004720 <CC_HalTerminate>:
    4720:	2000      	movs	r0, #0
    4722:	4770      	bx	lr

00004724 <CC_HalMaskInterrupt>:
    4724:	4b01      	ldr	r3, [pc, #4]	; (472c <CC_HalMaskInterrupt+0x8>)
    4726:	6018      	str	r0, [r3, #0]
    4728:	4770      	bx	lr
    472a:	bf00      	nop
    472c:	5002ba04 	.word	0x5002ba04

00004730 <CC_PalInit>:
    4730:	b510      	push	{r4, lr}
    4732:	4811      	ldr	r0, [pc, #68]	; (4778 <CC_PalInit+0x48>)
    4734:	f000 f848 	bl	47c8 <CC_PalMutexCreate>
    4738:	b100      	cbz	r0, 473c <CC_PalInit+0xc>
    473a:	bd10      	pop	{r4, pc}
    473c:	480f      	ldr	r0, [pc, #60]	; (477c <CC_PalInit+0x4c>)
    473e:	f000 f843 	bl	47c8 <CC_PalMutexCreate>
    4742:	2800      	cmp	r0, #0
    4744:	d1f9      	bne.n	473a <CC_PalInit+0xa>
    4746:	4c0e      	ldr	r4, [pc, #56]	; (4780 <CC_PalInit+0x50>)
    4748:	4620      	mov	r0, r4
    474a:	f000 f83d 	bl	47c8 <CC_PalMutexCreate>
    474e:	2800      	cmp	r0, #0
    4750:	d1f3      	bne.n	473a <CC_PalInit+0xa>
    4752:	4b0c      	ldr	r3, [pc, #48]	; (4784 <CC_PalInit+0x54>)
    4754:	480c      	ldr	r0, [pc, #48]	; (4788 <CC_PalInit+0x58>)
    4756:	601c      	str	r4, [r3, #0]
    4758:	f000 f836 	bl	47c8 <CC_PalMutexCreate>
    475c:	4601      	mov	r1, r0
    475e:	2800      	cmp	r0, #0
    4760:	d1eb      	bne.n	473a <CC_PalInit+0xa>
    4762:	f000 f82d 	bl	47c0 <CC_PalDmaInit>
    4766:	4604      	mov	r4, r0
    4768:	b108      	cbz	r0, 476e <CC_PalInit+0x3e>
    476a:	4620      	mov	r0, r4
    476c:	bd10      	pop	{r4, pc}
    476e:	f000 f83f 	bl	47f0 <CC_PalPowerSaveModeInit>
    4772:	4620      	mov	r0, r4
    4774:	e7fa      	b.n	476c <CC_PalInit+0x3c>
    4776:	bf00      	nop
    4778:	200000c8 	.word	0x200000c8
    477c:	200000bc 	.word	0x200000bc
    4780:	200000c4 	.word	0x200000c4
    4784:	200000cc 	.word	0x200000cc
    4788:	200000c0 	.word	0x200000c0

0000478c <CC_PalTerminate>:
    478c:	b508      	push	{r3, lr}
    478e:	4808      	ldr	r0, [pc, #32]	; (47b0 <CC_PalTerminate+0x24>)
    4790:	f000 f824 	bl	47dc <CC_PalMutexDestroy>
    4794:	4807      	ldr	r0, [pc, #28]	; (47b4 <CC_PalTerminate+0x28>)
    4796:	f000 f821 	bl	47dc <CC_PalMutexDestroy>
    479a:	4807      	ldr	r0, [pc, #28]	; (47b8 <CC_PalTerminate+0x2c>)
    479c:	f000 f81e 	bl	47dc <CC_PalMutexDestroy>
    47a0:	4806      	ldr	r0, [pc, #24]	; (47bc <CC_PalTerminate+0x30>)
    47a2:	f000 f81b 	bl	47dc <CC_PalMutexDestroy>
    47a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    47aa:	f000 b80b 	b.w	47c4 <CC_PalDmaTerminate>
    47ae:	bf00      	nop
    47b0:	200000c8 	.word	0x200000c8
    47b4:	200000bc 	.word	0x200000bc
    47b8:	200000c4 	.word	0x200000c4
    47bc:	200000c0 	.word	0x200000c0

000047c0 <CC_PalDmaInit>:
    47c0:	2000      	movs	r0, #0
    47c2:	4770      	bx	lr

000047c4 <CC_PalDmaTerminate>:
    47c4:	4770      	bx	lr
    47c6:	bf00      	nop

000047c8 <CC_PalMutexCreate>:
    47c8:	b508      	push	{r3, lr}
    47ca:	4b03      	ldr	r3, [pc, #12]	; (47d8 <CC_PalMutexCreate+0x10>)
    47cc:	6802      	ldr	r2, [r0, #0]
    47ce:	681b      	ldr	r3, [r3, #0]
    47d0:	6810      	ldr	r0, [r2, #0]
    47d2:	4798      	blx	r3
    47d4:	2000      	movs	r0, #0
    47d6:	bd08      	pop	{r3, pc}
    47d8:	200000d8 	.word	0x200000d8

000047dc <CC_PalMutexDestroy>:
    47dc:	b508      	push	{r3, lr}
    47de:	4b03      	ldr	r3, [pc, #12]	; (47ec <CC_PalMutexDestroy+0x10>)
    47e0:	6802      	ldr	r2, [r0, #0]
    47e2:	685b      	ldr	r3, [r3, #4]
    47e4:	6810      	ldr	r0, [r2, #0]
    47e6:	4798      	blx	r3
    47e8:	2000      	movs	r0, #0
    47ea:	bd08      	pop	{r3, pc}
    47ec:	200000d8 	.word	0x200000d8

000047f0 <CC_PalPowerSaveModeInit>:
    47f0:	b570      	push	{r4, r5, r6, lr}
    47f2:	4c09      	ldr	r4, [pc, #36]	; (4818 <CC_PalPowerSaveModeInit+0x28>)
    47f4:	4d09      	ldr	r5, [pc, #36]	; (481c <CC_PalPowerSaveModeInit+0x2c>)
    47f6:	6920      	ldr	r0, [r4, #16]
    47f8:	68ab      	ldr	r3, [r5, #8]
    47fa:	4798      	blx	r3
    47fc:	b118      	cbz	r0, 4806 <CC_PalPowerSaveModeInit+0x16>
    47fe:	4b08      	ldr	r3, [pc, #32]	; (4820 <CC_PalPowerSaveModeInit+0x30>)
    4800:	4808      	ldr	r0, [pc, #32]	; (4824 <CC_PalPowerSaveModeInit+0x34>)
    4802:	685b      	ldr	r3, [r3, #4]
    4804:	4798      	blx	r3
    4806:	4a08      	ldr	r2, [pc, #32]	; (4828 <CC_PalPowerSaveModeInit+0x38>)
    4808:	68eb      	ldr	r3, [r5, #12]
    480a:	6920      	ldr	r0, [r4, #16]
    480c:	2100      	movs	r1, #0
    480e:	6011      	str	r1, [r2, #0]
    4810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4814:	4718      	bx	r3
    4816:	bf00      	nop
    4818:	200000e8 	.word	0x200000e8
    481c:	200000d8 	.word	0x200000d8
    4820:	200000b4 	.word	0x200000b4
    4824:	000073c4 	.word	0x000073c4
    4828:	20000ee8 	.word	0x20000ee8

0000482c <CC_PalPowerSaveModeSelect>:
    482c:	b570      	push	{r4, r5, r6, lr}
    482e:	4d1a      	ldr	r5, [pc, #104]	; (4898 <CC_PalPowerSaveModeSelect+0x6c>)
    4830:	4e1a      	ldr	r6, [pc, #104]	; (489c <CC_PalPowerSaveModeSelect+0x70>)
    4832:	4604      	mov	r4, r0
    4834:	68b2      	ldr	r2, [r6, #8]
    4836:	6928      	ldr	r0, [r5, #16]
    4838:	4790      	blx	r2
    483a:	b9f0      	cbnz	r0, 487a <CC_PalPowerSaveModeSelect+0x4e>
    483c:	b15c      	cbz	r4, 4856 <CC_PalPowerSaveModeSelect+0x2a>
    483e:	4c18      	ldr	r4, [pc, #96]	; (48a0 <CC_PalPowerSaveModeSelect+0x74>)
    4840:	6823      	ldr	r3, [r4, #0]
    4842:	b1ab      	cbz	r3, 4870 <CC_PalPowerSaveModeSelect+0x44>
    4844:	2b01      	cmp	r3, #1
    4846:	d01a      	beq.n	487e <CC_PalPowerSaveModeSelect+0x52>
    4848:	3b01      	subs	r3, #1
    484a:	6023      	str	r3, [r4, #0]
    484c:	6928      	ldr	r0, [r5, #16]
    484e:	68f3      	ldr	r3, [r6, #12]
    4850:	4798      	blx	r3
    4852:	2000      	movs	r0, #0
    4854:	bd70      	pop	{r4, r5, r6, pc}
    4856:	4c12      	ldr	r4, [pc, #72]	; (48a0 <CC_PalPowerSaveModeSelect+0x74>)
    4858:	6821      	ldr	r1, [r4, #0]
    485a:	b939      	cbnz	r1, 486c <CC_PalPowerSaveModeSelect+0x40>
    485c:	4b11      	ldr	r3, [pc, #68]	; (48a4 <CC_PalPowerSaveModeSelect+0x78>)
    485e:	4a12      	ldr	r2, [pc, #72]	; (48a8 <CC_PalPowerSaveModeSelect+0x7c>)
    4860:	2001      	movs	r0, #1
    4862:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    4866:	6813      	ldr	r3, [r2, #0]
    4868:	2b00      	cmp	r3, #0
    486a:	d1fc      	bne.n	4866 <CC_PalPowerSaveModeSelect+0x3a>
    486c:	3101      	adds	r1, #1
    486e:	6021      	str	r1, [r4, #0]
    4870:	68f3      	ldr	r3, [r6, #12]
    4872:	6928      	ldr	r0, [r5, #16]
    4874:	4798      	blx	r3
    4876:	2000      	movs	r0, #0
    4878:	bd70      	pop	{r4, r5, r6, pc}
    487a:	480c      	ldr	r0, [pc, #48]	; (48ac <CC_PalPowerSaveModeSelect+0x80>)
    487c:	bd70      	pop	{r4, r5, r6, pc}
    487e:	4a0a      	ldr	r2, [pc, #40]	; (48a8 <CC_PalPowerSaveModeSelect+0x7c>)
    4880:	6813      	ldr	r3, [r2, #0]
    4882:	2b00      	cmp	r3, #0
    4884:	d1fc      	bne.n	4880 <CC_PalPowerSaveModeSelect+0x54>
    4886:	4a07      	ldr	r2, [pc, #28]	; (48a4 <CC_PalPowerSaveModeSelect+0x78>)
    4888:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    488c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4890:	f7ff ff48 	bl	4724 <CC_HalMaskInterrupt>
    4894:	6823      	ldr	r3, [r4, #0]
    4896:	e7d7      	b.n	4848 <CC_PalPowerSaveModeSelect+0x1c>
    4898:	200000e8 	.word	0x200000e8
    489c:	200000d8 	.word	0x200000d8
    48a0:	20000ee8 	.word	0x20000ee8
    48a4:	5002a000 	.word	0x5002a000
    48a8:	5002b910 	.word	0x5002b910
    48ac:	ffff8fe9 	.word	0xffff8fe9

000048b0 <mutex_free>:
    48b0:	b510      	push	{r4, lr}
    48b2:	4604      	mov	r4, r0
    48b4:	b130      	cbz	r0, 48c4 <mutex_free+0x14>
    48b6:	6863      	ldr	r3, [r4, #4]
    48b8:	06db      	lsls	r3, r3, #27
    48ba:	d502      	bpl.n	48c2 <mutex_free+0x12>
    48bc:	2300      	movs	r3, #0
    48be:	6023      	str	r3, [r4, #0]
    48c0:	6063      	str	r3, [r4, #4]
    48c2:	bd10      	pop	{r4, pc}
    48c4:	4b02      	ldr	r3, [pc, #8]	; (48d0 <mutex_free+0x20>)
    48c6:	4803      	ldr	r0, [pc, #12]	; (48d4 <mutex_free+0x24>)
    48c8:	685b      	ldr	r3, [r3, #4]
    48ca:	4798      	blx	r3
    48cc:	e7f3      	b.n	48b6 <mutex_free+0x6>
    48ce:	bf00      	nop
    48d0:	200000b4 	.word	0x200000b4
    48d4:	000073e4 	.word	0x000073e4

000048d8 <mutex_unlock>:
    48d8:	b168      	cbz	r0, 48f6 <mutex_unlock+0x1e>
    48da:	6843      	ldr	r3, [r0, #4]
    48dc:	b13b      	cbz	r3, 48ee <mutex_unlock+0x16>
    48de:	06db      	lsls	r3, r3, #27
    48e0:	d507      	bpl.n	48f2 <mutex_unlock+0x1a>
    48e2:	f3bf 8f5f 	dmb	sy
    48e6:	2300      	movs	r3, #0
    48e8:	6003      	str	r3, [r0, #0]
    48ea:	4618      	mov	r0, r3
    48ec:	4770      	bx	lr
    48ee:	4803      	ldr	r0, [pc, #12]	; (48fc <mutex_unlock+0x24>)
    48f0:	4770      	bx	lr
    48f2:	4803      	ldr	r0, [pc, #12]	; (4900 <mutex_unlock+0x28>)
    48f4:	4770      	bx	lr
    48f6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    48fa:	4770      	bx	lr
    48fc:	ffff8fea 	.word	0xffff8fea
    4900:	ffff8fe9 	.word	0xffff8fe9

00004904 <mutex_init>:
    4904:	b510      	push	{r4, lr}
    4906:	4604      	mov	r4, r0
    4908:	b120      	cbz	r0, 4914 <mutex_init+0x10>
    490a:	2200      	movs	r2, #0
    490c:	2311      	movs	r3, #17
    490e:	6022      	str	r2, [r4, #0]
    4910:	6063      	str	r3, [r4, #4]
    4912:	bd10      	pop	{r4, pc}
    4914:	4801      	ldr	r0, [pc, #4]	; (491c <mutex_init+0x18>)
    4916:	f7ff fe99 	bl	464c <CC_PalAbort>
    491a:	e7f6      	b.n	490a <mutex_init+0x6>
    491c:	0000740c 	.word	0x0000740c

00004920 <mutex_lock>:
    4920:	b1c0      	cbz	r0, 4954 <mutex_lock+0x34>
    4922:	6843      	ldr	r3, [r0, #4]
    4924:	b1a3      	cbz	r3, 4950 <mutex_lock+0x30>
    4926:	06db      	lsls	r3, r3, #27
    4928:	d510      	bpl.n	494c <mutex_lock+0x2c>
    492a:	2201      	movs	r2, #1
    492c:	f3bf 8f5b 	dmb	ish
    4930:	e850 3f00 	ldrex	r3, [r0]
    4934:	e840 2100 	strex	r1, r2, [r0]
    4938:	2900      	cmp	r1, #0
    493a:	d1f9      	bne.n	4930 <mutex_lock+0x10>
    493c:	f3bf 8f5b 	dmb	ish
    4940:	2b01      	cmp	r3, #1
    4942:	d0f3      	beq.n	492c <mutex_lock+0xc>
    4944:	f3bf 8f5f 	dmb	sy
    4948:	2000      	movs	r0, #0
    494a:	4770      	bx	lr
    494c:	4803      	ldr	r0, [pc, #12]	; (495c <mutex_lock+0x3c>)
    494e:	4770      	bx	lr
    4950:	4803      	ldr	r0, [pc, #12]	; (4960 <mutex_lock+0x40>)
    4952:	4770      	bx	lr
    4954:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4958:	4770      	bx	lr
    495a:	bf00      	nop
    495c:	ffff8fe9 	.word	0xffff8fe9
    4960:	ffff8fea 	.word	0xffff8fea

00004964 <verify_context_ecdsa_verify_secp256r1>:
    4964:	b130      	cbz	r0, 4974 <verify_context_ecdsa_verify_secp256r1+0x10>
    4966:	6802      	ldr	r2, [r0, #0]
    4968:	4b03      	ldr	r3, [pc, #12]	; (4978 <verify_context_ecdsa_verify_secp256r1+0x14>)
    496a:	4804      	ldr	r0, [pc, #16]	; (497c <verify_context_ecdsa_verify_secp256r1+0x18>)
    496c:	429a      	cmp	r2, r3
    496e:	bf08      	it	eq
    4970:	2000      	moveq	r0, #0
    4972:	4770      	bx	lr
    4974:	4802      	ldr	r0, [pc, #8]	; (4980 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    4976:	4770      	bx	lr
    4978:	bbaa55dd 	.word	0xbbaa55dd
    497c:	00f00882 	.word	0x00f00882
    4980:	00f00871 	.word	0x00f00871

00004984 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    4984:	b538      	push	{r3, r4, r5, lr}
    4986:	460d      	mov	r5, r1
    4988:	4604      	mov	r4, r0
    498a:	b1b0      	cbz	r0, 49ba <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    498c:	22a0      	movs	r2, #160	; 0xa0
    498e:	2100      	movs	r1, #0
    4990:	3004      	adds	r0, #4
    4992:	f002 fa2d 	bl	6df0 <SaSi_PalMemSet>
    4996:	b195      	cbz	r5, 49be <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    4998:	2208      	movs	r2, #8
    499a:	4629      	mov	r1, r5
    499c:	f104 0064 	add.w	r0, r4, #100	; 0x64
    49a0:	f002 fa2c 	bl	6dfc <CRYS_COMMON_ReverseMemcpy32>
    49a4:	2208      	movs	r2, #8
    49a6:	f105 0120 	add.w	r1, r5, #32
    49aa:	f104 0084 	add.w	r0, r4, #132	; 0x84
    49ae:	f002 fa25 	bl	6dfc <CRYS_COMMON_ReverseMemcpy32>
    49b2:	4b04      	ldr	r3, [pc, #16]	; (49c4 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    49b4:	6023      	str	r3, [r4, #0]
    49b6:	2000      	movs	r0, #0
    49b8:	bd38      	pop	{r3, r4, r5, pc}
    49ba:	4803      	ldr	r0, [pc, #12]	; (49c8 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    49bc:	e7fc      	b.n	49b8 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    49be:	4803      	ldr	r0, [pc, #12]	; (49cc <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    49c0:	e7fa      	b.n	49b8 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    49c2:	bf00      	nop
    49c4:	bbaa55dd 	.word	0xbbaa55dd
    49c8:	00f00871 	.word	0x00f00871
    49cc:	00f00883 	.word	0x00f00883

000049d0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    49d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    49d4:	4605      	mov	r5, r0
    49d6:	460e      	mov	r6, r1
    49d8:	4699      	mov	r9, r3
    49da:	4611      	mov	r1, r2
    49dc:	f7ff ffc2 	bl	4964 <verify_context_ecdsa_verify_secp256r1>
    49e0:	4604      	mov	r4, r0
    49e2:	2800      	cmp	r0, #0
    49e4:	f040 8084 	bne.w	4af0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    49e8:	2e00      	cmp	r6, #0
    49ea:	f000 8085 	beq.w	4af8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    49ee:	2900      	cmp	r1, #0
    49f0:	f000 8084 	beq.w	4afc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    49f4:	f1b9 0f20 	cmp.w	r9, #32
    49f8:	f040 8082 	bne.w	4b00 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    49fc:	f105 0444 	add.w	r4, r5, #68	; 0x44
    4a00:	2208      	movs	r2, #8
    4a02:	f105 0804 	add.w	r8, r5, #4
    4a06:	4620      	mov	r0, r4
    4a08:	f002 f9f8 	bl	6dfc <CRYS_COMMON_ReverseMemcpy32>
    4a0c:	f105 0724 	add.w	r7, r5, #36	; 0x24
    4a10:	2208      	movs	r2, #8
    4a12:	4631      	mov	r1, r6
    4a14:	4640      	mov	r0, r8
    4a16:	f002 f9f1 	bl	6dfc <CRYS_COMMON_ReverseMemcpy32>
    4a1a:	f106 0120 	add.w	r1, r6, #32
    4a1e:	2208      	movs	r2, #8
    4a20:	4638      	mov	r0, r7
    4a22:	f002 f9eb 	bl	6dfc <CRYS_COMMON_ReverseMemcpy32>
    4a26:	a902      	add	r1, sp, #8
    4a28:	f44f 7080 	mov.w	r0, #256	; 0x100
    4a2c:	f841 9d04 	str.w	r9, [r1, #-4]!
    4a30:	f002 f9d8 	bl	6de4 <PkaInitAndMutexLock>
    4a34:	2800      	cmp	r0, #0
    4a36:	d165      	bne.n	4b04 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    4a38:	4a33      	ldr	r2, [pc, #204]	; (4b08 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    4a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
    4a3e:	6013      	str	r3, [r2, #0]
    4a40:	2101      	movs	r1, #1
    4a42:	6093      	str	r3, [r2, #8]
    4a44:	2308      	movs	r3, #8
    4a46:	4a31      	ldr	r2, [pc, #196]	; (4b0c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    4a48:	f000 fb2e 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4a4c:	2101      	movs	r1, #1
    4a4e:	4608      	mov	r0, r1
    4a50:	2305      	movs	r3, #5
    4a52:	4a2f      	ldr	r2, [pc, #188]	; (4b10 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    4a54:	f000 fb28 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4a58:	2308      	movs	r3, #8
    4a5a:	4642      	mov	r2, r8
    4a5c:	2101      	movs	r1, #1
    4a5e:	201c      	movs	r0, #28
    4a60:	f000 fb22 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4a64:	2308      	movs	r3, #8
    4a66:	463a      	mov	r2, r7
    4a68:	2101      	movs	r1, #1
    4a6a:	2003      	movs	r0, #3
    4a6c:	f000 fb1c 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4a70:	4622      	mov	r2, r4
    4a72:	2308      	movs	r3, #8
    4a74:	2101      	movs	r1, #1
    4a76:	2002      	movs	r0, #2
    4a78:	f000 fb16 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4a7c:	2308      	movs	r3, #8
    4a7e:	4a25      	ldr	r2, [pc, #148]	; (4b14 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    4a80:	2101      	movs	r1, #1
    4a82:	201a      	movs	r0, #26
    4a84:	f000 fb10 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4a88:	2305      	movs	r3, #5
    4a8a:	4a23      	ldr	r2, [pc, #140]	; (4b18 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    4a8c:	2101      	movs	r1, #1
    4a8e:	201b      	movs	r0, #27
    4a90:	f000 fb0a 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4a94:	2308      	movs	r3, #8
    4a96:	4a21      	ldr	r2, [pc, #132]	; (4b1c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    4a98:	2101      	movs	r1, #1
    4a9a:	2014      	movs	r0, #20
    4a9c:	f000 fb04 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4aa0:	2308      	movs	r3, #8
    4aa2:	4a1f      	ldr	r2, [pc, #124]	; (4b20 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    4aa4:	2101      	movs	r1, #1
    4aa6:	2015      	movs	r0, #21
    4aa8:	f000 fafe 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4aac:	2308      	movs	r3, #8
    4aae:	f105 0264 	add.w	r2, r5, #100	; 0x64
    4ab2:	2101      	movs	r1, #1
    4ab4:	2016      	movs	r0, #22
    4ab6:	f000 faf7 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4aba:	2308      	movs	r3, #8
    4abc:	f105 0284 	add.w	r2, r5, #132	; 0x84
    4ac0:	2101      	movs	r1, #1
    4ac2:	2017      	movs	r0, #23
    4ac4:	f000 faf0 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4ac8:	2308      	movs	r3, #8
    4aca:	4a16      	ldr	r2, [pc, #88]	; (4b24 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    4acc:	2101      	movs	r1, #1
    4ace:	200b      	movs	r0, #11
    4ad0:	f000 faea 	bl	50a8 <PkaCopyDataIntoPkaReg>
    4ad4:	f000 fb44 	bl	5160 <PkaEcdsaVerify>
    4ad8:	4604      	mov	r4, r0
    4ada:	9801      	ldr	r0, [sp, #4]
    4adc:	f000 fad2 	bl	5084 <PkaFinishAndMutexUnlock>
    4ae0:	4b11      	ldr	r3, [pc, #68]	; (4b28 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    4ae2:	2c00      	cmp	r4, #0
    4ae4:	bf18      	it	ne
    4ae6:	461c      	movne	r4, r3
    4ae8:	21a4      	movs	r1, #164	; 0xa4
    4aea:	4628      	mov	r0, r5
    4aec:	f002 f982 	bl	6df4 <SaSi_PalMemSetZero>
    4af0:	4620      	mov	r0, r4
    4af2:	b003      	add	sp, #12
    4af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4af8:	4c0c      	ldr	r4, [pc, #48]	; (4b2c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    4afa:	e7f9      	b.n	4af0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4afc:	4c0c      	ldr	r4, [pc, #48]	; (4b30 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    4afe:	e7f7      	b.n	4af0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4b00:	4c0c      	ldr	r4, [pc, #48]	; (4b34 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    4b02:	e7f5      	b.n	4af0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4b04:	4c08      	ldr	r4, [pc, #32]	; (4b28 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    4b06:	e7ef      	b.n	4ae8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    4b08:	5002b090 	.word	0x5002b090
    4b0c:	00007470 	.word	0x00007470
    4b10:	000074e8 	.word	0x000074e8
    4b14:	00007430 	.word	0x00007430
    4b18:	000074d4 	.word	0x000074d4
    4b1c:	00007494 	.word	0x00007494
    4b20:	000074b4 	.word	0x000074b4
    4b24:	00007450 	.word	0x00007450
    4b28:	00f00884 	.word	0x00f00884
    4b2c:	00f00876 	.word	0x00f00876
    4b30:	00f00880 	.word	0x00f00880
    4b34:	00f00881 	.word	0x00f00881

00004b38 <set_digest_in_hw_sha256>:
    4b38:	4b0c      	ldr	r3, [pc, #48]	; (4b6c <set_digest_in_hw_sha256+0x34>)
    4b3a:	69c2      	ldr	r2, [r0, #28]
    4b3c:	601a      	str	r2, [r3, #0]
    4b3e:	6982      	ldr	r2, [r0, #24]
    4b40:	f843 2c04 	str.w	r2, [r3, #-4]
    4b44:	6942      	ldr	r2, [r0, #20]
    4b46:	f843 2c08 	str.w	r2, [r3, #-8]
    4b4a:	6902      	ldr	r2, [r0, #16]
    4b4c:	f843 2c0c 	str.w	r2, [r3, #-12]
    4b50:	68c2      	ldr	r2, [r0, #12]
    4b52:	f843 2c10 	str.w	r2, [r3, #-16]
    4b56:	6882      	ldr	r2, [r0, #8]
    4b58:	f843 2c14 	str.w	r2, [r3, #-20]
    4b5c:	6842      	ldr	r2, [r0, #4]
    4b5e:	f843 2c18 	str.w	r2, [r3, #-24]
    4b62:	6802      	ldr	r2, [r0, #0]
    4b64:	f843 2c1c 	str.w	r2, [r3, #-28]
    4b68:	4770      	bx	lr
    4b6a:	bf00      	nop
    4b6c:	5002b65c 	.word	0x5002b65c

00004b70 <read_digest_in_hw_sha256>:
    4b70:	4b0c      	ldr	r3, [pc, #48]	; (4ba4 <read_digest_in_hw_sha256+0x34>)
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	61c3      	str	r3, [r0, #28]
    4b76:	4b0c      	ldr	r3, [pc, #48]	; (4ba8 <read_digest_in_hw_sha256+0x38>)
    4b78:	681b      	ldr	r3, [r3, #0]
    4b7a:	6183      	str	r3, [r0, #24]
    4b7c:	4b0b      	ldr	r3, [pc, #44]	; (4bac <read_digest_in_hw_sha256+0x3c>)
    4b7e:	681b      	ldr	r3, [r3, #0]
    4b80:	6143      	str	r3, [r0, #20]
    4b82:	4b0b      	ldr	r3, [pc, #44]	; (4bb0 <read_digest_in_hw_sha256+0x40>)
    4b84:	681b      	ldr	r3, [r3, #0]
    4b86:	6103      	str	r3, [r0, #16]
    4b88:	4b0a      	ldr	r3, [pc, #40]	; (4bb4 <read_digest_in_hw_sha256+0x44>)
    4b8a:	681b      	ldr	r3, [r3, #0]
    4b8c:	60c3      	str	r3, [r0, #12]
    4b8e:	4b0a      	ldr	r3, [pc, #40]	; (4bb8 <read_digest_in_hw_sha256+0x48>)
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	6083      	str	r3, [r0, #8]
    4b94:	4b09      	ldr	r3, [pc, #36]	; (4bbc <read_digest_in_hw_sha256+0x4c>)
    4b96:	681b      	ldr	r3, [r3, #0]
    4b98:	6043      	str	r3, [r0, #4]
    4b9a:	4b09      	ldr	r3, [pc, #36]	; (4bc0 <read_digest_in_hw_sha256+0x50>)
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	6003      	str	r3, [r0, #0]
    4ba0:	4770      	bx	lr
    4ba2:	bf00      	nop
    4ba4:	5002b65c 	.word	0x5002b65c
    4ba8:	5002b658 	.word	0x5002b658
    4bac:	5002b654 	.word	0x5002b654
    4bb0:	5002b650 	.word	0x5002b650
    4bb4:	5002b64c 	.word	0x5002b64c
    4bb8:	5002b648 	.word	0x5002b648
    4bbc:	5002b644 	.word	0x5002b644
    4bc0:	5002b640 	.word	0x5002b640

00004bc4 <verify_context_hash_sha256>:
    4bc4:	b130      	cbz	r0, 4bd4 <verify_context_hash_sha256+0x10>
    4bc6:	6802      	ldr	r2, [r0, #0]
    4bc8:	4b03      	ldr	r3, [pc, #12]	; (4bd8 <verify_context_hash_sha256+0x14>)
    4bca:	4804      	ldr	r0, [pc, #16]	; (4bdc <verify_context_hash_sha256+0x18>)
    4bcc:	429a      	cmp	r2, r3
    4bce:	bf08      	it	eq
    4bd0:	2000      	moveq	r0, #0
    4bd2:	4770      	bx	lr
    4bd4:	4802      	ldr	r0, [pc, #8]	; (4be0 <verify_context_hash_sha256+0x1c>)
    4bd6:	4770      	bx	lr
    4bd8:	bbaa55dd 	.word	0xbbaa55dd
    4bdc:	00f00202 	.word	0x00f00202
    4be0:	00f00200 	.word	0x00f00200

00004be4 <nrf_cc310_bl_hash_sha256_init>:
    4be4:	b538      	push	{r3, r4, r5, lr}
    4be6:	4604      	mov	r4, r0
    4be8:	b168      	cbz	r0, 4c06 <nrf_cc310_bl_hash_sha256_init+0x22>
    4bea:	1d05      	adds	r5, r0, #4
    4bec:	2170      	movs	r1, #112	; 0x70
    4bee:	4628      	mov	r0, r5
    4bf0:	f002 f900 	bl	6df4 <SaSi_PalMemSetZero>
    4bf4:	4628      	mov	r0, r5
    4bf6:	2220      	movs	r2, #32
    4bf8:	4904      	ldr	r1, [pc, #16]	; (4c0c <nrf_cc310_bl_hash_sha256_init+0x28>)
    4bfa:	f002 f8f7 	bl	6dec <SaSi_PalMemCopy>
    4bfe:	4b04      	ldr	r3, [pc, #16]	; (4c10 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    4c00:	6023      	str	r3, [r4, #0]
    4c02:	2000      	movs	r0, #0
    4c04:	bd38      	pop	{r3, r4, r5, pc}
    4c06:	4803      	ldr	r0, [pc, #12]	; (4c14 <nrf_cc310_bl_hash_sha256_init+0x30>)
    4c08:	e7fc      	b.n	4c04 <nrf_cc310_bl_hash_sha256_init+0x20>
    4c0a:	bf00      	nop
    4c0c:	000074fc 	.word	0x000074fc
    4c10:	bbaa55dd 	.word	0xbbaa55dd
    4c14:	00f00200 	.word	0x00f00200

00004c18 <nrf_cc310_bl_hash_sha256_update>:
    4c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c1c:	4b28      	ldr	r3, [pc, #160]	; (4cc0 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    4c1e:	4604      	mov	r4, r0
    4c20:	460e      	mov	r6, r1
    4c22:	4615      	mov	r5, r2
    4c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4c26:	b085      	sub	sp, #20
    4c28:	466f      	mov	r7, sp
    4c2a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    4c2e:	b92d      	cbnz	r5, 4c3c <nrf_cc310_bl_hash_sha256_update+0x24>
    4c30:	f04f 0900 	mov.w	r9, #0
    4c34:	4648      	mov	r0, r9
    4c36:	b005      	add	sp, #20
    4c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c3c:	4620      	mov	r0, r4
    4c3e:	f7ff ffc1 	bl	4bc4 <verify_context_hash_sha256>
    4c42:	4681      	mov	r9, r0
    4c44:	2800      	cmp	r0, #0
    4c46:	d1f5      	bne.n	4c34 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4c48:	1d23      	adds	r3, r4, #4
    4c4a:	9301      	str	r3, [sp, #4]
    4c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c4e:	bba3      	cbnz	r3, 4cba <nrf_cc310_bl_hash_sha256_update+0xa2>
    4c50:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4c52:	b18b      	cbz	r3, 4c78 <nrf_cc310_bl_hash_sha256_update+0x60>
    4c54:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    4c58:	45a8      	cmp	r8, r5
    4c5a:	bf28      	it	cs
    4c5c:	46a8      	movcs	r8, r5
    4c5e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4c62:	4631      	mov	r1, r6
    4c64:	4418      	add	r0, r3
    4c66:	4642      	mov	r2, r8
    4c68:	f002 f8c0 	bl	6dec <SaSi_PalMemCopy>
    4c6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4c6e:	4443      	add	r3, r8
    4c70:	4446      	add	r6, r8
    4c72:	6723      	str	r3, [r4, #112]	; 0x70
    4c74:	eba5 0508 	sub.w	r5, r5, r8
    4c78:	6f22      	ldr	r2, [r4, #112]	; 0x70
    4c7a:	2a40      	cmp	r2, #64	; 0x40
    4c7c:	d106      	bne.n	4c8c <nrf_cc310_bl_hash_sha256_update+0x74>
    4c7e:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4c82:	4638      	mov	r0, r7
    4c84:	f000 fbae 	bl	53e4 <nrf_cc310_bl_hash_update_internal>
    4c88:	2300      	movs	r3, #0
    4c8a:	6723      	str	r3, [r4, #112]	; 0x70
    4c8c:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    4c90:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    4c94:	d005      	beq.n	4ca2 <nrf_cc310_bl_hash_sha256_update+0x8a>
    4c96:	4631      	mov	r1, r6
    4c98:	462a      	mov	r2, r5
    4c9a:	4638      	mov	r0, r7
    4c9c:	f000 fba2 	bl	53e4 <nrf_cc310_bl_hash_update_internal>
    4ca0:	442e      	add	r6, r5
    4ca2:	f1b8 0f00 	cmp.w	r8, #0
    4ca6:	d0c3      	beq.n	4c30 <nrf_cc310_bl_hash_sha256_update+0x18>
    4ca8:	4642      	mov	r2, r8
    4caa:	4631      	mov	r1, r6
    4cac:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4cb0:	f002 f89c 	bl	6dec <SaSi_PalMemCopy>
    4cb4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    4cb8:	e7bc      	b.n	4c34 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4cba:	f8df 9008 	ldr.w	r9, [pc, #8]	; 4cc4 <nrf_cc310_bl_hash_sha256_update+0xac>
    4cbe:	e7b9      	b.n	4c34 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4cc0:	000070e0 	.word	0x000070e0
    4cc4:	00f0020c 	.word	0x00f0020c

00004cc8 <nrf_cc310_bl_hash_sha256_finalize>:
    4cc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4ccc:	4b14      	ldr	r3, [pc, #80]	; (4d20 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    4cce:	4604      	mov	r4, r0
    4cd0:	460e      	mov	r6, r1
    4cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4cd4:	466f      	mov	r7, sp
    4cd6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    4cda:	4620      	mov	r0, r4
    4cdc:	f7ff ff72 	bl	4bc4 <verify_context_hash_sha256>
    4ce0:	4680      	mov	r8, r0
    4ce2:	b9b0      	cbnz	r0, 4d12 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4ce4:	b1ce      	cbz	r6, 4d1a <nrf_cc310_bl_hash_sha256_finalize+0x52>
    4ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4ce8:	1d25      	adds	r5, r4, #4
    4cea:	9501      	str	r5, [sp, #4]
    4cec:	b93b      	cbnz	r3, 4cfe <nrf_cc310_bl_hash_sha256_finalize+0x36>
    4cee:	2301      	movs	r3, #1
    4cf0:	6263      	str	r3, [r4, #36]	; 0x24
    4cf2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    4cf4:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4cf8:	4638      	mov	r0, r7
    4cfa:	f000 fb73 	bl	53e4 <nrf_cc310_bl_hash_update_internal>
    4cfe:	462b      	mov	r3, r5
    4d00:	3e04      	subs	r6, #4
    4d02:	3424      	adds	r4, #36	; 0x24
    4d04:	f853 2b04 	ldr.w	r2, [r3], #4
    4d08:	ba12      	rev	r2, r2
    4d0a:	42a3      	cmp	r3, r4
    4d0c:	f846 2f04 	str.w	r2, [r6, #4]!
    4d10:	d1f8      	bne.n	4d04 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    4d12:	4640      	mov	r0, r8
    4d14:	b004      	add	sp, #16
    4d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d1a:	f8df 8008 	ldr.w	r8, [pc, #8]	; 4d24 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    4d1e:	e7f8      	b.n	4d12 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4d20:	000070e0 	.word	0x000070e0
    4d24:	00f00205 	.word	0x00f00205

00004d28 <nrf_cc310_bl_init>:
    4d28:	4b08      	ldr	r3, [pc, #32]	; (4d4c <nrf_cc310_bl_init+0x24>)
    4d2a:	681b      	ldr	r3, [r3, #0]
    4d2c:	0e1b      	lsrs	r3, r3, #24
    4d2e:	2bf0      	cmp	r3, #240	; 0xf0
    4d30:	d108      	bne.n	4d44 <nrf_cc310_bl_init+0x1c>
    4d32:	4b07      	ldr	r3, [pc, #28]	; (4d50 <nrf_cc310_bl_init+0x28>)
    4d34:	681a      	ldr	r2, [r3, #0]
    4d36:	4b07      	ldr	r3, [pc, #28]	; (4d54 <nrf_cc310_bl_init+0x2c>)
    4d38:	429a      	cmp	r2, r3
    4d3a:	d105      	bne.n	4d48 <nrf_cc310_bl_init+0x20>
    4d3c:	4b06      	ldr	r3, [pc, #24]	; (4d58 <nrf_cc310_bl_init+0x30>)
    4d3e:	2000      	movs	r0, #0
    4d40:	6018      	str	r0, [r3, #0]
    4d42:	4770      	bx	lr
    4d44:	2005      	movs	r0, #5
    4d46:	4770      	bx	lr
    4d48:	2006      	movs	r0, #6
    4d4a:	4770      	bx	lr
    4d4c:	5002b928 	.word	0x5002b928
    4d50:	5002ba24 	.word	0x5002ba24
    4d54:	20e00000 	.word	0x20e00000
    4d58:	5002ba0c 	.word	0x5002ba0c

00004d5c <PkaSetRegsMapTab>:
    4d5c:	2200      	movs	r2, #0
    4d5e:	b530      	push	{r4, r5, lr}
    4d60:	0049      	lsls	r1, r1, #1
    4d62:	4613      	mov	r3, r2
    4d64:	3802      	subs	r0, #2
    4d66:	f640 75fc 	movw	r5, #4092	; 0xffc
    4d6a:	f102 54a0 	add.w	r4, r2, #335544320	; 0x14000000
    4d6e:	f504 442c 	add.w	r4, r4, #44032	; 0xac00
    4d72:	00a4      	lsls	r4, r4, #2
    4d74:	4290      	cmp	r0, r2
    4d76:	f102 0201 	add.w	r2, r2, #1
    4d7a:	bfca      	itet	gt
    4d7c:	6023      	strgt	r3, [r4, #0]
    4d7e:	6025      	strle	r5, [r4, #0]
    4d80:	185b      	addgt	r3, r3, r1
    4d82:	2a1e      	cmp	r2, #30
    4d84:	d1f1      	bne.n	4d6a <PkaSetRegsMapTab+0xe>
    4d86:	4a04      	ldr	r2, [pc, #16]	; (4d98 <PkaSetRegsMapTab+0x3c>)
    4d88:	6013      	str	r3, [r2, #0]
    4d8a:	440b      	add	r3, r1
    4d8c:	6053      	str	r3, [r2, #4]
    4d8e:	4b03      	ldr	r3, [pc, #12]	; (4d9c <PkaSetRegsMapTab+0x40>)
    4d90:	4a03      	ldr	r2, [pc, #12]	; (4da0 <PkaSetRegsMapTab+0x44>)
    4d92:	601a      	str	r2, [r3, #0]
    4d94:	bd30      	pop	{r4, r5, pc}
    4d96:	bf00      	nop
    4d98:	5002b078 	.word	0x5002b078
    4d9c:	5002b084 	.word	0x5002b084
    4da0:	000ff820 	.word	0x000ff820

00004da4 <PkaGetRegEffectiveSizeInBits>:
    4da4:	b530      	push	{r4, r5, lr}
    4da6:	4b1e      	ldr	r3, [pc, #120]	; (4e20 <PkaGetRegEffectiveSizeInBits+0x7c>)
    4da8:	b085      	sub	sp, #20
    4daa:	461a      	mov	r2, r3
    4dac:	6819      	ldr	r1, [r3, #0]
    4dae:	9100      	str	r1, [sp, #0]
    4db0:	9900      	ldr	r1, [sp, #0]
    4db2:	07cc      	lsls	r4, r1, #31
    4db4:	d5fa      	bpl.n	4dac <PkaGetRegEffectiveSizeInBits+0x8>
    4db6:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    4dba:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    4dbe:	0080      	lsls	r0, r0, #2
    4dc0:	6801      	ldr	r1, [r0, #0]
    4dc2:	6813      	ldr	r3, [r2, #0]
    4dc4:	9301      	str	r3, [sp, #4]
    4dc6:	9b01      	ldr	r3, [sp, #4]
    4dc8:	07d8      	lsls	r0, r3, #31
    4dca:	d5fa      	bpl.n	4dc2 <PkaGetRegEffectiveSizeInBits+0x1e>
    4dcc:	4b15      	ldr	r3, [pc, #84]	; (4e24 <PkaGetRegEffectiveSizeInBits+0x80>)
    4dce:	4c16      	ldr	r4, [pc, #88]	; (4e28 <PkaGetRegEffectiveSizeInBits+0x84>)
    4dd0:	6818      	ldr	r0, [r3, #0]
    4dd2:	4d16      	ldr	r5, [pc, #88]	; (4e2c <PkaGetRegEffectiveSizeInBits+0x88>)
    4dd4:	301f      	adds	r0, #31
    4dd6:	2320      	movs	r3, #32
    4dd8:	fb90 f0f3 	sdiv	r0, r0, r3
    4ddc:	3801      	subs	r0, #1
    4dde:	2800      	cmp	r0, #0
    4de0:	da10      	bge.n	4e04 <PkaGetRegEffectiveSizeInBits+0x60>
    4de2:	2300      	movs	r3, #0
    4de4:	3001      	adds	r0, #1
    4de6:	0140      	lsls	r0, r0, #5
    4de8:	b153      	cbz	r3, 4e00 <PkaGetRegEffectiveSizeInBits+0x5c>
    4dea:	f1a0 0120 	sub.w	r1, r0, #32
    4dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4df2:	4213      	tst	r3, r2
    4df4:	d104      	bne.n	4e00 <PkaGetRegEffectiveSizeInBits+0x5c>
    4df6:	3801      	subs	r0, #1
    4df8:	4288      	cmp	r0, r1
    4dfa:	ea4f 0252 	mov.w	r2, r2, lsr #1
    4dfe:	d1f8      	bne.n	4df2 <PkaGetRegEffectiveSizeInBits+0x4e>
    4e00:	b005      	add	sp, #20
    4e02:	bd30      	pop	{r4, r5, pc}
    4e04:	6813      	ldr	r3, [r2, #0]
    4e06:	9303      	str	r3, [sp, #12]
    4e08:	9b03      	ldr	r3, [sp, #12]
    4e0a:	07db      	lsls	r3, r3, #31
    4e0c:	d5fa      	bpl.n	4e04 <PkaGetRegEffectiveSizeInBits+0x60>
    4e0e:	1843      	adds	r3, r0, r1
    4e10:	6023      	str	r3, [r4, #0]
    4e12:	682b      	ldr	r3, [r5, #0]
    4e14:	9302      	str	r3, [sp, #8]
    4e16:	9b02      	ldr	r3, [sp, #8]
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d1e3      	bne.n	4de4 <PkaGetRegEffectiveSizeInBits+0x40>
    4e1c:	3801      	subs	r0, #1
    4e1e:	e7de      	b.n	4dde <PkaGetRegEffectiveSizeInBits+0x3a>
    4e20:	5002b0b4 	.word	0x5002b0b4
    4e24:	5002b0ac 	.word	0x5002b0ac
    4e28:	5002b0e4 	.word	0x5002b0e4
    4e2c:	5002b0dc 	.word	0x5002b0dc

00004e30 <PkaGetNextMsBit>:
    4e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e32:	681d      	ldr	r5, [r3, #0]
    4e34:	b085      	sub	sp, #20
    4e36:	f001 041f 	and.w	r4, r1, #31
    4e3a:	b90d      	cbnz	r5, 4e40 <PkaGetNextMsBit+0x10>
    4e3c:	2c1f      	cmp	r4, #31
    4e3e:	d125      	bne.n	4e8c <PkaGetNextMsBit+0x5c>
    4e40:	4d15      	ldr	r5, [pc, #84]	; (4e98 <PkaGetNextMsBit+0x68>)
    4e42:	462e      	mov	r6, r5
    4e44:	682f      	ldr	r7, [r5, #0]
    4e46:	9701      	str	r7, [sp, #4]
    4e48:	9f01      	ldr	r7, [sp, #4]
    4e4a:	07ff      	lsls	r7, r7, #31
    4e4c:	d5fa      	bpl.n	4e44 <PkaGetNextMsBit+0x14>
    4e4e:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    4e52:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    4e56:	0080      	lsls	r0, r0, #2
    4e58:	6800      	ldr	r0, [r0, #0]
    4e5a:	6835      	ldr	r5, [r6, #0]
    4e5c:	9503      	str	r5, [sp, #12]
    4e5e:	9d03      	ldr	r5, [sp, #12]
    4e60:	07ed      	lsls	r5, r5, #31
    4e62:	d5fa      	bpl.n	4e5a <PkaGetNextMsBit+0x2a>
    4e64:	4d0d      	ldr	r5, [pc, #52]	; (4e9c <PkaGetNextMsBit+0x6c>)
    4e66:	eb00 1061 	add.w	r0, r0, r1, asr #5
    4e6a:	6028      	str	r0, [r5, #0]
    4e6c:	480c      	ldr	r0, [pc, #48]	; (4ea0 <PkaGetNextMsBit+0x70>)
    4e6e:	6800      	ldr	r0, [r0, #0]
    4e70:	9002      	str	r0, [sp, #8]
    4e72:	2c1f      	cmp	r4, #31
    4e74:	bf18      	it	ne
    4e76:	43c9      	mvnne	r1, r1
    4e78:	9802      	ldr	r0, [sp, #8]
    4e7a:	bf0f      	iteee	eq
    4e7c:	6010      	streq	r0, [r2, #0]
    4e7e:	f001 011f 	andne.w	r1, r1, #31
    4e82:	fa00 f101 	lslne.w	r1, r0, r1
    4e86:	6011      	strne	r1, [r2, #0]
    4e88:	2100      	movs	r1, #0
    4e8a:	6019      	str	r1, [r3, #0]
    4e8c:	6810      	ldr	r0, [r2, #0]
    4e8e:	0043      	lsls	r3, r0, #1
    4e90:	0fc0      	lsrs	r0, r0, #31
    4e92:	6013      	str	r3, [r2, #0]
    4e94:	b005      	add	sp, #20
    4e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e98:	5002b0b4 	.word	0x5002b0b4
    4e9c:	5002b0e4 	.word	0x5002b0e4
    4ea0:	5002b0dc 	.word	0x5002b0dc

00004ea4 <PkaSetRegsSizesTab>:
    4ea4:	4b0c      	ldr	r3, [pc, #48]	; (4ed8 <PkaSetRegsSizesTab+0x34>)
    4ea6:	6018      	str	r0, [r3, #0]
    4ea8:	303f      	adds	r0, #63	; 0x3f
    4eaa:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    4eae:	0189      	lsls	r1, r1, #6
    4eb0:	3040      	adds	r0, #64	; 0x40
    4eb2:	6058      	str	r0, [r3, #4]
    4eb4:	6099      	str	r1, [r3, #8]
    4eb6:	60d9      	str	r1, [r3, #12]
    4eb8:	6119      	str	r1, [r3, #16]
    4eba:	6159      	str	r1, [r3, #20]
    4ebc:	6199      	str	r1, [r3, #24]
    4ebe:	331c      	adds	r3, #28
    4ec0:	4806      	ldr	r0, [pc, #24]	; (4edc <PkaSetRegsSizesTab+0x38>)
    4ec2:	6019      	str	r1, [r3, #0]
    4ec4:	b082      	sub	sp, #8
    4ec6:	6802      	ldr	r2, [r0, #0]
    4ec8:	9201      	str	r2, [sp, #4]
    4eca:	9a01      	ldr	r2, [sp, #4]
    4ecc:	07d2      	lsls	r2, r2, #31
    4ece:	d5fa      	bpl.n	4ec6 <PkaSetRegsSizesTab+0x22>
    4ed0:	6019      	str	r1, [r3, #0]
    4ed2:	b002      	add	sp, #8
    4ed4:	4770      	bx	lr
    4ed6:	bf00      	nop
    4ed8:	5002b090 	.word	0x5002b090
    4edc:	5002b0b4 	.word	0x5002b0b4

00004ee0 <PkaInitPka>:
    4ee0:	b538      	push	{r3, r4, r5, lr}
    4ee2:	f1a0 0320 	sub.w	r3, r0, #32
    4ee6:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    4eea:	4605      	mov	r5, r0
    4eec:	d82c      	bhi.n	4f48 <PkaInitPka+0x68>
    4eee:	288f      	cmp	r0, #143	; 0x8f
    4ef0:	d826      	bhi.n	4f40 <PkaInitPka+0x60>
    4ef2:	f100 0347 	add.w	r3, r0, #71	; 0x47
    4ef6:	f100 0466 	add.w	r4, r0, #102	; 0x66
    4efa:	06db      	lsls	r3, r3, #27
    4efc:	ea4f 1454 	mov.w	r4, r4, lsr #5
    4f00:	d000      	beq.n	4f04 <PkaInitPka+0x24>
    4f02:	3401      	adds	r4, #1
    4f04:	0164      	lsls	r4, r4, #5
    4f06:	343f      	adds	r4, #63	; 0x3f
    4f08:	09a4      	lsrs	r4, r4, #6
    4f0a:	3401      	adds	r4, #1
    4f0c:	b111      	cbz	r1, 4f14 <PkaInitPka+0x34>
    4f0e:	42a1      	cmp	r1, r4
    4f10:	d31a      	bcc.n	4f48 <PkaInitPka+0x68>
    4f12:	460c      	mov	r4, r1
    4f14:	00e3      	lsls	r3, r4, #3
    4f16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4f1a:	fbb0 f0f3 	udiv	r0, r0, r3
    4f1e:	2820      	cmp	r0, #32
    4f20:	bf28      	it	cs
    4f22:	2020      	movcs	r0, #32
    4f24:	b102      	cbz	r2, 4f28 <PkaInitPka+0x48>
    4f26:	6010      	str	r0, [r2, #0]
    4f28:	4b08      	ldr	r3, [pc, #32]	; (4f4c <PkaInitPka+0x6c>)
    4f2a:	2201      	movs	r2, #1
    4f2c:	601a      	str	r2, [r3, #0]
    4f2e:	4621      	mov	r1, r4
    4f30:	f7ff ff14 	bl	4d5c <PkaSetRegsMapTab>
    4f34:	4628      	mov	r0, r5
    4f36:	4621      	mov	r1, r4
    4f38:	f7ff ffb4 	bl	4ea4 <PkaSetRegsSizesTab>
    4f3c:	2000      	movs	r0, #0
    4f3e:	bd38      	pop	{r3, r4, r5, pc}
    4f40:	f100 041f 	add.w	r4, r0, #31
    4f44:	0964      	lsrs	r4, r4, #5
    4f46:	e7dd      	b.n	4f04 <PkaInitPka+0x24>
    4f48:	4801      	ldr	r0, [pc, #4]	; (4f50 <PkaInitPka+0x70>)
    4f4a:	e7f8      	b.n	4f3e <PkaInitPka+0x5e>
    4f4c:	5002b81c 	.word	0x5002b81c
    4f50:	00f02122 	.word	0x00f02122

00004f54 <PkaClearBlockOfRegs>:
    4f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f56:	4b45      	ldr	r3, [pc, #276]	; (506c <PkaClearBlockOfRegs+0x118>)
    4f58:	b089      	sub	sp, #36	; 0x24
    4f5a:	461d      	mov	r5, r3
    4f5c:	681c      	ldr	r4, [r3, #0]
    4f5e:	9401      	str	r4, [sp, #4]
    4f60:	9c01      	ldr	r4, [sp, #4]
    4f62:	07e4      	lsls	r4, r4, #31
    4f64:	d5fa      	bpl.n	4f5c <PkaClearBlockOfRegs+0x8>
    4f66:	4b42      	ldr	r3, [pc, #264]	; (5070 <PkaClearBlockOfRegs+0x11c>)
    4f68:	f8df e10c 	ldr.w	lr, [pc, #268]	; 5078 <PkaClearBlockOfRegs+0x124>
    4f6c:	f8df c10c 	ldr.w	ip, [pc, #268]	; 507c <PkaClearBlockOfRegs+0x128>
    4f70:	4413      	add	r3, r2
    4f72:	009b      	lsls	r3, r3, #2
    4f74:	2400      	movs	r4, #0
    4f76:	681a      	ldr	r2, [r3, #0]
    4f78:	180b      	adds	r3, r1, r0
    4f7a:	2b1e      	cmp	r3, #30
    4f7c:	bf88      	it	hi
    4f7e:	f1c0 011e 	rsbhi	r1, r0, #30
    4f82:	321f      	adds	r2, #31
    4f84:	180b      	adds	r3, r1, r0
    4f86:	0952      	lsrs	r2, r2, #5
    4f88:	4353      	muls	r3, r2
    4f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4f8e:	bf82      	ittt	hi
    4f90:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    4f94:	fbb1 f1f2 	udivhi	r1, r1, r2
    4f98:	1a09      	subhi	r1, r1, r0
    4f9a:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    4f9e:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    4fa2:	4627      	mov	r7, r4
    4fa4:	42a1      	cmp	r1, r4
    4fa6:	dc33      	bgt.n	5010 <PkaClearBlockOfRegs+0xbc>
    4fa8:	682b      	ldr	r3, [r5, #0]
    4faa:	9304      	str	r3, [sp, #16]
    4fac:	9b04      	ldr	r3, [sp, #16]
    4fae:	07db      	lsls	r3, r3, #31
    4fb0:	d5fa      	bpl.n	4fa8 <PkaClearBlockOfRegs+0x54>
    4fb2:	4b30      	ldr	r3, [pc, #192]	; (5074 <PkaClearBlockOfRegs+0x120>)
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	6829      	ldr	r1, [r5, #0]
    4fb8:	9105      	str	r1, [sp, #20]
    4fba:	9905      	ldr	r1, [sp, #20]
    4fbc:	07cf      	lsls	r7, r1, #31
    4fbe:	d5fa      	bpl.n	4fb6 <PkaClearBlockOfRegs+0x62>
    4fc0:	4c2d      	ldr	r4, [pc, #180]	; (5078 <PkaClearBlockOfRegs+0x124>)
    4fc2:	492e      	ldr	r1, [pc, #184]	; (507c <PkaClearBlockOfRegs+0x128>)
    4fc4:	6023      	str	r3, [r4, #0]
    4fc6:	2300      	movs	r3, #0
    4fc8:	461e      	mov	r6, r3
    4fca:	4293      	cmp	r3, r2
    4fcc:	f103 0001 	add.w	r0, r3, #1
    4fd0:	d140      	bne.n	5054 <PkaClearBlockOfRegs+0x100>
    4fd2:	f020 0201 	bic.w	r2, r0, #1
    4fd6:	4829      	ldr	r0, [pc, #164]	; (507c <PkaClearBlockOfRegs+0x128>)
    4fd8:	4619      	mov	r1, r3
    4fda:	2600      	movs	r6, #0
    4fdc:	428a      	cmp	r2, r1
    4fde:	d83c      	bhi.n	505a <PkaClearBlockOfRegs+0x106>
    4fe0:	6829      	ldr	r1, [r5, #0]
    4fe2:	9106      	str	r1, [sp, #24]
    4fe4:	9906      	ldr	r1, [sp, #24]
    4fe6:	07ce      	lsls	r6, r1, #31
    4fe8:	d5fa      	bpl.n	4fe0 <PkaClearBlockOfRegs+0x8c>
    4fea:	4925      	ldr	r1, [pc, #148]	; (5080 <PkaClearBlockOfRegs+0x12c>)
    4fec:	6809      	ldr	r1, [r1, #0]
    4fee:	6828      	ldr	r0, [r5, #0]
    4ff0:	9007      	str	r0, [sp, #28]
    4ff2:	9807      	ldr	r0, [sp, #28]
    4ff4:	07c0      	lsls	r0, r0, #31
    4ff6:	d5fa      	bpl.n	4fee <PkaClearBlockOfRegs+0x9a>
    4ff8:	6021      	str	r1, [r4, #0]
    4ffa:	4820      	ldr	r0, [pc, #128]	; (507c <PkaClearBlockOfRegs+0x128>)
    4ffc:	2100      	movs	r1, #0
    4ffe:	460c      	mov	r4, r1
    5000:	428b      	cmp	r3, r1
    5002:	d12d      	bne.n	5060 <PkaClearBlockOfRegs+0x10c>
    5004:	491d      	ldr	r1, [pc, #116]	; (507c <PkaClearBlockOfRegs+0x128>)
    5006:	2000      	movs	r0, #0
    5008:	429a      	cmp	r2, r3
    500a:	d82c      	bhi.n	5066 <PkaClearBlockOfRegs+0x112>
    500c:	b009      	add	sp, #36	; 0x24
    500e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5010:	682b      	ldr	r3, [r5, #0]
    5012:	9302      	str	r3, [sp, #8]
    5014:	9b02      	ldr	r3, [sp, #8]
    5016:	07db      	lsls	r3, r3, #31
    5018:	d5fa      	bpl.n	5010 <PkaClearBlockOfRegs+0xbc>
    501a:	1903      	adds	r3, r0, r4
    501c:	009b      	lsls	r3, r3, #2
    501e:	681b      	ldr	r3, [r3, #0]
    5020:	682e      	ldr	r6, [r5, #0]
    5022:	9603      	str	r6, [sp, #12]
    5024:	9e03      	ldr	r6, [sp, #12]
    5026:	07f6      	lsls	r6, r6, #31
    5028:	d5fa      	bpl.n	5020 <PkaClearBlockOfRegs+0xcc>
    502a:	f8ce 3000 	str.w	r3, [lr]
    502e:	2300      	movs	r3, #0
    5030:	4293      	cmp	r3, r2
    5032:	f103 0301 	add.w	r3, r3, #1
    5036:	d106      	bne.n	5046 <PkaClearBlockOfRegs+0xf2>
    5038:	4616      	mov	r6, r2
    503a:	f023 0301 	bic.w	r3, r3, #1
    503e:	42b3      	cmp	r3, r6
    5040:	d804      	bhi.n	504c <PkaClearBlockOfRegs+0xf8>
    5042:	3401      	adds	r4, #1
    5044:	e7ae      	b.n	4fa4 <PkaClearBlockOfRegs+0x50>
    5046:	f8cc 7000 	str.w	r7, [ip]
    504a:	e7f1      	b.n	5030 <PkaClearBlockOfRegs+0xdc>
    504c:	f8cc 7000 	str.w	r7, [ip]
    5050:	3601      	adds	r6, #1
    5052:	e7f4      	b.n	503e <PkaClearBlockOfRegs+0xea>
    5054:	600e      	str	r6, [r1, #0]
    5056:	4603      	mov	r3, r0
    5058:	e7b7      	b.n	4fca <PkaClearBlockOfRegs+0x76>
    505a:	6006      	str	r6, [r0, #0]
    505c:	3101      	adds	r1, #1
    505e:	e7bd      	b.n	4fdc <PkaClearBlockOfRegs+0x88>
    5060:	6004      	str	r4, [r0, #0]
    5062:	3101      	adds	r1, #1
    5064:	e7cc      	b.n	5000 <PkaClearBlockOfRegs+0xac>
    5066:	6008      	str	r0, [r1, #0]
    5068:	3301      	adds	r3, #1
    506a:	e7cd      	b.n	5008 <PkaClearBlockOfRegs+0xb4>
    506c:	5002b0b4 	.word	0x5002b0b4
    5070:	1400ac24 	.word	0x1400ac24
    5074:	5002b07c 	.word	0x5002b07c
    5078:	5002b0d4 	.word	0x5002b0d4
    507c:	5002b0d8 	.word	0x5002b0d8
    5080:	5002b078 	.word	0x5002b078

00005084 <PkaFinishAndMutexUnlock>:
    5084:	b508      	push	{r3, lr}
    5086:	b140      	cbz	r0, 509a <PkaFinishAndMutexUnlock+0x16>
    5088:	2820      	cmp	r0, #32
    508a:	4601      	mov	r1, r0
    508c:	f04f 0207 	mov.w	r2, #7
    5090:	bf28      	it	cs
    5092:	2120      	movcs	r1, #32
    5094:	2000      	movs	r0, #0
    5096:	f7ff ff5d 	bl	4f54 <PkaClearBlockOfRegs>
    509a:	4b02      	ldr	r3, [pc, #8]	; (50a4 <PkaFinishAndMutexUnlock+0x20>)
    509c:	2200      	movs	r2, #0
    509e:	601a      	str	r2, [r3, #0]
    50a0:	bd08      	pop	{r3, pc}
    50a2:	bf00      	nop
    50a4:	5002b81c 	.word	0x5002b81c

000050a8 <PkaCopyDataIntoPkaReg>:
    50a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50aa:	4d29      	ldr	r5, [pc, #164]	; (5150 <PkaCopyDataIntoPkaReg+0xa8>)
    50ac:	b085      	sub	sp, #20
    50ae:	462c      	mov	r4, r5
    50b0:	682e      	ldr	r6, [r5, #0]
    50b2:	9600      	str	r6, [sp, #0]
    50b4:	9e00      	ldr	r6, [sp, #0]
    50b6:	07f6      	lsls	r6, r6, #31
    50b8:	d5fa      	bpl.n	50b0 <PkaCopyDataIntoPkaReg+0x8>
    50ba:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    50be:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    50c2:	0080      	lsls	r0, r0, #2
    50c4:	6805      	ldr	r5, [r0, #0]
    50c6:	6820      	ldr	r0, [r4, #0]
    50c8:	9001      	str	r0, [sp, #4]
    50ca:	9801      	ldr	r0, [sp, #4]
    50cc:	07c7      	lsls	r7, r0, #31
    50ce:	d5fa      	bpl.n	50c6 <PkaCopyDataIntoPkaReg+0x1e>
    50d0:	4820      	ldr	r0, [pc, #128]	; (5154 <PkaCopyDataIntoPkaReg+0xac>)
    50d2:	4f21      	ldr	r7, [pc, #132]	; (5158 <PkaCopyDataIntoPkaReg+0xb0>)
    50d4:	6005      	str	r5, [r0, #0]
    50d6:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    50da:	42b2      	cmp	r2, r6
    50dc:	d129      	bne.n	5132 <PkaCopyDataIntoPkaReg+0x8a>
    50de:	1c5a      	adds	r2, r3, #1
    50e0:	4e1d      	ldr	r6, [pc, #116]	; (5158 <PkaCopyDataIntoPkaReg+0xb0>)
    50e2:	f022 0201 	bic.w	r2, r2, #1
    50e6:	2700      	movs	r7, #0
    50e8:	429a      	cmp	r2, r3
    50ea:	d827      	bhi.n	513c <PkaCopyDataIntoPkaReg+0x94>
    50ec:	6823      	ldr	r3, [r4, #0]
    50ee:	9302      	str	r3, [sp, #8]
    50f0:	9b02      	ldr	r3, [sp, #8]
    50f2:	07de      	lsls	r6, r3, #31
    50f4:	d5fa      	bpl.n	50ec <PkaCopyDataIntoPkaReg+0x44>
    50f6:	4b19      	ldr	r3, [pc, #100]	; (515c <PkaCopyDataIntoPkaReg+0xb4>)
    50f8:	440b      	add	r3, r1
    50fa:	009b      	lsls	r3, r3, #2
    50fc:	681b      	ldr	r3, [r3, #0]
    50fe:	331f      	adds	r3, #31
    5100:	095b      	lsrs	r3, r3, #5
    5102:	429a      	cmp	r2, r3
    5104:	d213      	bcs.n	512e <PkaCopyDataIntoPkaReg+0x86>
    5106:	6821      	ldr	r1, [r4, #0]
    5108:	9103      	str	r1, [sp, #12]
    510a:	9903      	ldr	r1, [sp, #12]
    510c:	07c9      	lsls	r1, r1, #31
    510e:	d5fa      	bpl.n	5106 <PkaCopyDataIntoPkaReg+0x5e>
    5110:	4415      	add	r5, r2
    5112:	2100      	movs	r1, #0
    5114:	1a9b      	subs	r3, r3, r2
    5116:	4a10      	ldr	r2, [pc, #64]	; (5158 <PkaCopyDataIntoPkaReg+0xb0>)
    5118:	6005      	str	r5, [r0, #0]
    511a:	4608      	mov	r0, r1
    511c:	428b      	cmp	r3, r1
    511e:	d810      	bhi.n	5142 <PkaCopyDataIntoPkaReg+0x9a>
    5120:	1c5a      	adds	r2, r3, #1
    5122:	490d      	ldr	r1, [pc, #52]	; (5158 <PkaCopyDataIntoPkaReg+0xb0>)
    5124:	f022 0201 	bic.w	r2, r2, #1
    5128:	2000      	movs	r0, #0
    512a:	429a      	cmp	r2, r3
    512c:	d80c      	bhi.n	5148 <PkaCopyDataIntoPkaReg+0xa0>
    512e:	b005      	add	sp, #20
    5130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5132:	f852 cb04 	ldr.w	ip, [r2], #4
    5136:	f8c7 c000 	str.w	ip, [r7]
    513a:	e7ce      	b.n	50da <PkaCopyDataIntoPkaReg+0x32>
    513c:	6037      	str	r7, [r6, #0]
    513e:	3301      	adds	r3, #1
    5140:	e7d2      	b.n	50e8 <PkaCopyDataIntoPkaReg+0x40>
    5142:	6010      	str	r0, [r2, #0]
    5144:	3101      	adds	r1, #1
    5146:	e7e9      	b.n	511c <PkaCopyDataIntoPkaReg+0x74>
    5148:	6008      	str	r0, [r1, #0]
    514a:	3301      	adds	r3, #1
    514c:	e7ed      	b.n	512a <PkaCopyDataIntoPkaReg+0x82>
    514e:	bf00      	nop
    5150:	5002b0b4 	.word	0x5002b0b4
    5154:	5002b0d4 	.word	0x5002b0d4
    5158:	5002b0d8 	.word	0x5002b0d8
    515c:	1400ac24 	.word	0x1400ac24

00005160 <PkaEcdsaVerify>:
    5160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5164:	4b81      	ldr	r3, [pc, #516]	; (536c <PkaEcdsaVerify+0x20c>)
    5166:	681d      	ldr	r5, [r3, #0]
    5168:	6898      	ldr	r0, [r3, #8]
    516a:	3320      	adds	r3, #32
    516c:	b0a0      	sub	sp, #128	; 0x80
    516e:	461e      	mov	r6, r3
    5170:	681a      	ldr	r2, [r3, #0]
    5172:	9201      	str	r2, [sp, #4]
    5174:	9a01      	ldr	r2, [sp, #4]
    5176:	07d7      	lsls	r7, r2, #31
    5178:	d5fa      	bpl.n	5170 <PkaEcdsaVerify+0x10>
    517a:	4b7d      	ldr	r3, [pc, #500]	; (5370 <PkaEcdsaVerify+0x210>)
    517c:	4a7d      	ldr	r2, [pc, #500]	; (5374 <PkaEcdsaVerify+0x214>)
    517e:	601a      	str	r2, [r3, #0]
    5180:	6832      	ldr	r2, [r6, #0]
    5182:	9202      	str	r2, [sp, #8]
    5184:	9a02      	ldr	r2, [sp, #8]
    5186:	07d4      	lsls	r4, r2, #31
    5188:	d5fa      	bpl.n	5180 <PkaEcdsaVerify+0x20>
    518a:	4a7b      	ldr	r2, [pc, #492]	; (5378 <PkaEcdsaVerify+0x218>)
    518c:	601a      	str	r2, [r3, #0]
    518e:	4a7b      	ldr	r2, [pc, #492]	; (537c <PkaEcdsaVerify+0x21c>)
    5190:	4614      	mov	r4, r2
    5192:	6811      	ldr	r1, [r2, #0]
    5194:	9103      	str	r1, [sp, #12]
    5196:	9903      	ldr	r1, [sp, #12]
    5198:	07c9      	lsls	r1, r1, #31
    519a:	d5fa      	bpl.n	5192 <PkaEcdsaVerify+0x32>
    519c:	4a78      	ldr	r2, [pc, #480]	; (5380 <PkaEcdsaVerify+0x220>)
    519e:	6811      	ldr	r1, [r2, #0]
    51a0:	f3c1 2140 	ubfx	r1, r1, #9, #1
    51a4:	6837      	ldr	r7, [r6, #0]
    51a6:	9704      	str	r7, [sp, #16]
    51a8:	9f04      	ldr	r7, [sp, #16]
    51aa:	07ff      	lsls	r7, r7, #31
    51ac:	d5fa      	bpl.n	51a4 <PkaEcdsaVerify+0x44>
    51ae:	4f75      	ldr	r7, [pc, #468]	; (5384 <PkaEcdsaVerify+0x224>)
    51b0:	601f      	str	r7, [r3, #0]
    51b2:	6827      	ldr	r7, [r4, #0]
    51b4:	9705      	str	r7, [sp, #20]
    51b6:	9f05      	ldr	r7, [sp, #20]
    51b8:	07ff      	lsls	r7, r7, #31
    51ba:	d5fa      	bpl.n	51b2 <PkaEcdsaVerify+0x52>
    51bc:	6817      	ldr	r7, [r2, #0]
    51be:	2900      	cmp	r1, #0
    51c0:	f000 80cf 	beq.w	5362 <PkaEcdsaVerify+0x202>
    51c4:	05b9      	lsls	r1, r7, #22
    51c6:	f140 80cc 	bpl.w	5362 <PkaEcdsaVerify+0x202>
    51ca:	6831      	ldr	r1, [r6, #0]
    51cc:	9106      	str	r1, [sp, #24]
    51ce:	9906      	ldr	r1, [sp, #24]
    51d0:	07cf      	lsls	r7, r1, #31
    51d2:	d5fa      	bpl.n	51ca <PkaEcdsaVerify+0x6a>
    51d4:	496c      	ldr	r1, [pc, #432]	; (5388 <PkaEcdsaVerify+0x228>)
    51d6:	6019      	str	r1, [r3, #0]
    51d8:	6821      	ldr	r1, [r4, #0]
    51da:	9107      	str	r1, [sp, #28]
    51dc:	9907      	ldr	r1, [sp, #28]
    51de:	07c9      	lsls	r1, r1, #31
    51e0:	d5fa      	bpl.n	51d8 <PkaEcdsaVerify+0x78>
    51e2:	6811      	ldr	r1, [r2, #0]
    51e4:	f3c1 2140 	ubfx	r1, r1, #9, #1
    51e8:	6837      	ldr	r7, [r6, #0]
    51ea:	9708      	str	r7, [sp, #32]
    51ec:	9f08      	ldr	r7, [sp, #32]
    51ee:	07ff      	lsls	r7, r7, #31
    51f0:	d5fa      	bpl.n	51e8 <PkaEcdsaVerify+0x88>
    51f2:	4f66      	ldr	r7, [pc, #408]	; (538c <PkaEcdsaVerify+0x22c>)
    51f4:	601f      	str	r7, [r3, #0]
    51f6:	6827      	ldr	r7, [r4, #0]
    51f8:	9709      	str	r7, [sp, #36]	; 0x24
    51fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
    51fc:	07ff      	lsls	r7, r7, #31
    51fe:	d5fa      	bpl.n	51f6 <PkaEcdsaVerify+0x96>
    5200:	6812      	ldr	r2, [r2, #0]
    5202:	2900      	cmp	r1, #0
    5204:	f000 80af 	beq.w	5366 <PkaEcdsaVerify+0x206>
    5208:	0591      	lsls	r1, r2, #22
    520a:	f140 80ac 	bpl.w	5366 <PkaEcdsaVerify+0x206>
    520e:	6832      	ldr	r2, [r6, #0]
    5210:	920a      	str	r2, [sp, #40]	; 0x28
    5212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5214:	07d2      	lsls	r2, r2, #31
    5216:	d5fa      	bpl.n	520e <PkaEcdsaVerify+0xae>
    5218:	4a56      	ldr	r2, [pc, #344]	; (5374 <PkaEcdsaVerify+0x214>)
    521a:	601a      	str	r2, [r3, #0]
    521c:	6832      	ldr	r2, [r6, #0]
    521e:	920b      	str	r2, [sp, #44]	; 0x2c
    5220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5222:	07d7      	lsls	r7, r2, #31
    5224:	d5fa      	bpl.n	521c <PkaEcdsaVerify+0xbc>
    5226:	4a5a      	ldr	r2, [pc, #360]	; (5390 <PkaEcdsaVerify+0x230>)
    5228:	601a      	str	r2, [r3, #0]
    522a:	6831      	ldr	r1, [r6, #0]
    522c:	910c      	str	r1, [sp, #48]	; 0x30
    522e:	990c      	ldr	r1, [sp, #48]	; 0x30
    5230:	07cc      	lsls	r4, r1, #31
    5232:	d5fa      	bpl.n	522a <PkaEcdsaVerify+0xca>
    5234:	4957      	ldr	r1, [pc, #348]	; (5394 <PkaEcdsaVerify+0x234>)
    5236:	6019      	str	r1, [r3, #0]
    5238:	6831      	ldr	r1, [r6, #0]
    523a:	910d      	str	r1, [sp, #52]	; 0x34
    523c:	990d      	ldr	r1, [sp, #52]	; 0x34
    523e:	07c9      	lsls	r1, r1, #31
    5240:	d5fa      	bpl.n	5238 <PkaEcdsaVerify+0xd8>
    5242:	4955      	ldr	r1, [pc, #340]	; (5398 <PkaEcdsaVerify+0x238>)
    5244:	6019      	str	r1, [r3, #0]
    5246:	6831      	ldr	r1, [r6, #0]
    5248:	910e      	str	r1, [sp, #56]	; 0x38
    524a:	990e      	ldr	r1, [sp, #56]	; 0x38
    524c:	07cf      	lsls	r7, r1, #31
    524e:	d5fa      	bpl.n	5246 <PkaEcdsaVerify+0xe6>
    5250:	4952      	ldr	r1, [pc, #328]	; (539c <PkaEcdsaVerify+0x23c>)
    5252:	6019      	str	r1, [r3, #0]
    5254:	6831      	ldr	r1, [r6, #0]
    5256:	910f      	str	r1, [sp, #60]	; 0x3c
    5258:	990f      	ldr	r1, [sp, #60]	; 0x3c
    525a:	07cc      	lsls	r4, r1, #31
    525c:	d5fa      	bpl.n	5254 <PkaEcdsaVerify+0xf4>
    525e:	4950      	ldr	r1, [pc, #320]	; (53a0 <PkaEcdsaVerify+0x240>)
    5260:	6019      	str	r1, [r3, #0]
    5262:	4b50      	ldr	r3, [pc, #320]	; (53a4 <PkaEcdsaVerify+0x244>)
    5264:	461e      	mov	r6, r3
    5266:	6819      	ldr	r1, [r3, #0]
    5268:	9110      	str	r1, [sp, #64]	; 0x40
    526a:	9910      	ldr	r1, [sp, #64]	; 0x40
    526c:	07c9      	lsls	r1, r1, #31
    526e:	d5fa      	bpl.n	5266 <PkaEcdsaVerify+0x106>
    5270:	4c3f      	ldr	r4, [pc, #252]	; (5370 <PkaEcdsaVerify+0x210>)
    5272:	4b4d      	ldr	r3, [pc, #308]	; (53a8 <PkaEcdsaVerify+0x248>)
    5274:	6023      	str	r3, [r4, #0]
    5276:	6833      	ldr	r3, [r6, #0]
    5278:	9311      	str	r3, [sp, #68]	; 0x44
    527a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    527c:	07db      	lsls	r3, r3, #31
    527e:	d5fa      	bpl.n	5276 <PkaEcdsaVerify+0x116>
    5280:	4b4a      	ldr	r3, [pc, #296]	; (53ac <PkaEcdsaVerify+0x24c>)
    5282:	6023      	str	r3, [r4, #0]
    5284:	6833      	ldr	r3, [r6, #0]
    5286:	9312      	str	r3, [sp, #72]	; 0x48
    5288:	9b12      	ldr	r3, [sp, #72]	; 0x48
    528a:	07df      	lsls	r7, r3, #31
    528c:	d5fa      	bpl.n	5284 <PkaEcdsaVerify+0x124>
    528e:	4b48      	ldr	r3, [pc, #288]	; (53b0 <PkaEcdsaVerify+0x250>)
    5290:	6023      	str	r3, [r4, #0]
    5292:	4b3a      	ldr	r3, [pc, #232]	; (537c <PkaEcdsaVerify+0x21c>)
    5294:	4698      	mov	r8, r3
    5296:	6819      	ldr	r1, [r3, #0]
    5298:	9113      	str	r1, [sp, #76]	; 0x4c
    529a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    529c:	07c9      	lsls	r1, r1, #31
    529e:	d5fa      	bpl.n	5296 <PkaEcdsaVerify+0x136>
    52a0:	4f32      	ldr	r7, [pc, #200]	; (536c <PkaEcdsaVerify+0x20c>)
    52a2:	6038      	str	r0, [r7, #0]
    52a4:	6833      	ldr	r3, [r6, #0]
    52a6:	9314      	str	r3, [sp, #80]	; 0x50
    52a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    52aa:	07db      	lsls	r3, r3, #31
    52ac:	d5fa      	bpl.n	52a4 <PkaEcdsaVerify+0x144>
    52ae:	6022      	str	r2, [r4, #0]
    52b0:	6833      	ldr	r3, [r6, #0]
    52b2:	9315      	str	r3, [sp, #84]	; 0x54
    52b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    52b6:	07d8      	lsls	r0, r3, #31
    52b8:	d5fa      	bpl.n	52b0 <PkaEcdsaVerify+0x150>
    52ba:	4b3e      	ldr	r3, [pc, #248]	; (53b4 <PkaEcdsaVerify+0x254>)
    52bc:	6023      	str	r3, [r4, #0]
    52be:	6833      	ldr	r3, [r6, #0]
    52c0:	9316      	str	r3, [sp, #88]	; 0x58
    52c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    52c4:	07d9      	lsls	r1, r3, #31
    52c6:	d5fa      	bpl.n	52be <PkaEcdsaVerify+0x15e>
    52c8:	4b3b      	ldr	r3, [pc, #236]	; (53b8 <PkaEcdsaVerify+0x258>)
    52ca:	6023      	str	r3, [r4, #0]
    52cc:	6833      	ldr	r3, [r6, #0]
    52ce:	9317      	str	r3, [sp, #92]	; 0x5c
    52d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    52d2:	07da      	lsls	r2, r3, #31
    52d4:	d5fa      	bpl.n	52cc <PkaEcdsaVerify+0x16c>
    52d6:	4b39      	ldr	r3, [pc, #228]	; (53bc <PkaEcdsaVerify+0x25c>)
    52d8:	6023      	str	r3, [r4, #0]
    52da:	6833      	ldr	r3, [r6, #0]
    52dc:	9318      	str	r3, [sp, #96]	; 0x60
    52de:	9b18      	ldr	r3, [sp, #96]	; 0x60
    52e0:	07db      	lsls	r3, r3, #31
    52e2:	d5fa      	bpl.n	52da <PkaEcdsaVerify+0x17a>
    52e4:	4b36      	ldr	r3, [pc, #216]	; (53c0 <PkaEcdsaVerify+0x260>)
    52e6:	6023      	str	r3, [r4, #0]
    52e8:	6833      	ldr	r3, [r6, #0]
    52ea:	9319      	str	r3, [sp, #100]	; 0x64
    52ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    52ee:	07d8      	lsls	r0, r3, #31
    52f0:	d5fa      	bpl.n	52e8 <PkaEcdsaVerify+0x188>
    52f2:	4b34      	ldr	r3, [pc, #208]	; (53c4 <PkaEcdsaVerify+0x264>)
    52f4:	6023      	str	r3, [r4, #0]
    52f6:	6833      	ldr	r3, [r6, #0]
    52f8:	931a      	str	r3, [sp, #104]	; 0x68
    52fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    52fc:	07d9      	lsls	r1, r3, #31
    52fe:	d5fa      	bpl.n	52f6 <PkaEcdsaVerify+0x196>
    5300:	4b31      	ldr	r3, [pc, #196]	; (53c8 <PkaEcdsaVerify+0x268>)
    5302:	6023      	str	r3, [r4, #0]
    5304:	6833      	ldr	r3, [r6, #0]
    5306:	931b      	str	r3, [sp, #108]	; 0x6c
    5308:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    530a:	07da      	lsls	r2, r3, #31
    530c:	d5fa      	bpl.n	5304 <PkaEcdsaVerify+0x1a4>
    530e:	4b2f      	ldr	r3, [pc, #188]	; (53cc <PkaEcdsaVerify+0x26c>)
    5310:	6023      	str	r3, [r4, #0]
    5312:	f000 fc1d 	bl	5b50 <PkaSum2ScalarMullt>
    5316:	bb08      	cbnz	r0, 535c <PkaEcdsaVerify+0x1fc>
    5318:	f8d8 3000 	ldr.w	r3, [r8]
    531c:	931c      	str	r3, [sp, #112]	; 0x70
    531e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    5320:	07db      	lsls	r3, r3, #31
    5322:	d5f9      	bpl.n	5318 <PkaEcdsaVerify+0x1b8>
    5324:	603d      	str	r5, [r7, #0]
    5326:	6833      	ldr	r3, [r6, #0]
    5328:	931d      	str	r3, [sp, #116]	; 0x74
    532a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    532c:	07d9      	lsls	r1, r3, #31
    532e:	d5fa      	bpl.n	5326 <PkaEcdsaVerify+0x1c6>
    5330:	4b27      	ldr	r3, [pc, #156]	; (53d0 <PkaEcdsaVerify+0x270>)
    5332:	6023      	str	r3, [r4, #0]
    5334:	6833      	ldr	r3, [r6, #0]
    5336:	931e      	str	r3, [sp, #120]	; 0x78
    5338:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    533a:	07da      	lsls	r2, r3, #31
    533c:	d5fa      	bpl.n	5334 <PkaEcdsaVerify+0x1d4>
    533e:	4b25      	ldr	r3, [pc, #148]	; (53d4 <PkaEcdsaVerify+0x274>)
    5340:	6023      	str	r3, [r4, #0]
    5342:	f8d8 3000 	ldr.w	r3, [r8]
    5346:	931f      	str	r3, [sp, #124]	; 0x7c
    5348:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    534a:	07db      	lsls	r3, r3, #31
    534c:	d5f9      	bpl.n	5342 <PkaEcdsaVerify+0x1e2>
    534e:	4b0c      	ldr	r3, [pc, #48]	; (5380 <PkaEcdsaVerify+0x220>)
    5350:	681b      	ldr	r3, [r3, #0]
    5352:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5356:	4b20      	ldr	r3, [pc, #128]	; (53d8 <PkaEcdsaVerify+0x278>)
    5358:	bf08      	it	eq
    535a:	4618      	moveq	r0, r3
    535c:	b020      	add	sp, #128	; 0x80
    535e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5362:	481e      	ldr	r0, [pc, #120]	; (53dc <PkaEcdsaVerify+0x27c>)
    5364:	e7fa      	b.n	535c <PkaEcdsaVerify+0x1fc>
    5366:	481e      	ldr	r0, [pc, #120]	; (53e0 <PkaEcdsaVerify+0x280>)
    5368:	e7f8      	b.n	535c <PkaEcdsaVerify+0x1fc>
    536a:	bf00      	nop
    536c:	5002b090 	.word	0x5002b090
    5370:	5002b080 	.word	0x5002b080
    5374:	51021000 	.word	0x51021000
    5378:	29721fc0 	.word	0x29721fc0
    537c:	5002b0b4 	.word	0x5002b0b4
    5380:	5002b088 	.word	0x5002b088
    5384:	2901cfc0 	.word	0x2901cfc0
    5388:	290e1fc0 	.word	0x290e1fc0
    538c:	29003fc0 	.word	0x29003fc0
    5390:	49020140 	.word	0x49020140
    5394:	a8843100 	.word	0xa8843100
    5398:	49160000 	.word	0x49160000
    539c:	a1080140 	.word	0xa1080140
    53a0:	88084480 	.word	0x88084480
    53a4:	5002b0b0 	.word	0x5002b0b0
    53a8:	887044c0 	.word	0x887044c0
    53ac:	417a0780 	.word	0x417a0780
    53b0:	417e07c0 	.word	0x417e07c0
    53b4:	496a0000 	.word	0x496a0000
    53b8:	49160680 	.word	0x49160680
    53bc:	496e0040 	.word	0x496e0040
    53c0:	21000200 	.word	0x21000200
    53c4:	21208200 	.word	0x21208200
    53c8:	21208240 	.word	0x21208240
    53cc:	21248280 	.word	0x21248280
    53d0:	a161a140 	.word	0xa161a140
    53d4:	5161c800 	.word	0x5161c800
    53d8:	00f10803 	.word	0x00f10803
    53dc:	00f10801 	.word	0x00f10801
    53e0:	00f10802 	.word	0x00f10802

000053e4 <nrf_cc310_bl_hash_update_internal>:
    53e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53e8:	4b31      	ldr	r3, [pc, #196]	; (54b0 <nrf_cc310_bl_hash_update_internal+0xcc>)
    53ea:	6844      	ldr	r4, [r0, #4]
    53ec:	4680      	mov	r8, r0
    53ee:	4692      	mov	sl, r2
    53f0:	4699      	mov	r9, r3
    53f2:	681a      	ldr	r2, [r3, #0]
    53f4:	2a00      	cmp	r2, #0
    53f6:	d1fc      	bne.n	53f2 <nrf_cc310_bl_hash_update_internal+0xe>
    53f8:	4b2e      	ldr	r3, [pc, #184]	; (54b4 <nrf_cc310_bl_hash_update_internal+0xd0>)
    53fa:	469b      	mov	fp, r3
    53fc:	681a      	ldr	r2, [r3, #0]
    53fe:	2a00      	cmp	r2, #0
    5400:	d1fc      	bne.n	53fc <nrf_cc310_bl_hash_update_internal+0x18>
    5402:	f04f 30ff 	mov.w	r0, #4294967295
    5406:	9101      	str	r1, [sp, #4]
    5408:	f000 fc94 	bl	5d34 <SaSi_HalClearInterruptBit>
    540c:	2080      	movs	r0, #128	; 0x80
    540e:	f000 fc97 	bl	5d40 <SaSi_HalMaskInterrupt>
    5412:	4d29      	ldr	r5, [pc, #164]	; (54b8 <nrf_cc310_bl_hash_update_internal+0xd4>)
    5414:	4a29      	ldr	r2, [pc, #164]	; (54bc <nrf_cc310_bl_hash_update_internal+0xd8>)
    5416:	4f2a      	ldr	r7, [pc, #168]	; (54c0 <nrf_cc310_bl_hash_update_internal+0xdc>)
    5418:	4e2a      	ldr	r6, [pc, #168]	; (54c4 <nrf_cc310_bl_hash_update_internal+0xe0>)
    541a:	2301      	movs	r3, #1
    541c:	2007      	movs	r0, #7
    541e:	602b      	str	r3, [r5, #0]
    5420:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    5424:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    5428:	6013      	str	r3, [r2, #0]
    542a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    542c:	603b      	str	r3, [r7, #0]
    542e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5430:	6033      	str	r3, [r6, #0]
    5432:	f8d8 3000 	ldr.w	r3, [r8]
    5436:	f842 3c04 	str.w	r3, [r2, #-4]
    543a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    543e:	4620      	mov	r0, r4
    5440:	4798      	blx	r3
    5442:	9901      	ldr	r1, [sp, #4]
    5444:	f8d9 3000 	ldr.w	r3, [r9]
    5448:	2b00      	cmp	r3, #0
    544a:	d1fb      	bne.n	5444 <nrf_cc310_bl_hash_update_internal+0x60>
    544c:	f1ba 0f00 	cmp.w	sl, #0
    5450:	d120      	bne.n	5494 <nrf_cc310_bl_hash_update_internal+0xb0>
    5452:	4b1d      	ldr	r3, [pc, #116]	; (54c8 <nrf_cc310_bl_hash_update_internal+0xe4>)
    5454:	2204      	movs	r2, #4
    5456:	601a      	str	r2, [r3, #0]
    5458:	f8d9 3000 	ldr.w	r3, [r9]
    545c:	2b00      	cmp	r3, #0
    545e:	d1fb      	bne.n	5458 <nrf_cc310_bl_hash_update_internal+0x74>
    5460:	f8db a000 	ldr.w	sl, [fp]
    5464:	f1ba 0f00 	cmp.w	sl, #0
    5468:	d1fa      	bne.n	5460 <nrf_cc310_bl_hash_update_internal+0x7c>
    546a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    546e:	4620      	mov	r0, r4
    5470:	4798      	blx	r3
    5472:	683b      	ldr	r3, [r7, #0]
    5474:	6263      	str	r3, [r4, #36]	; 0x24
    5476:	6833      	ldr	r3, [r6, #0]
    5478:	62a3      	str	r3, [r4, #40]	; 0x28
    547a:	4b14      	ldr	r3, [pc, #80]	; (54cc <nrf_cc310_bl_hash_update_internal+0xe8>)
    547c:	f8c3 a000 	str.w	sl, [r3]
    5480:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    5484:	f8d9 3000 	ldr.w	r3, [r9]
    5488:	2b00      	cmp	r3, #0
    548a:	d1fb      	bne.n	5484 <nrf_cc310_bl_hash_update_internal+0xa0>
    548c:	602b      	str	r3, [r5, #0]
    548e:	b003      	add	sp, #12
    5490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5494:	6a23      	ldr	r3, [r4, #32]
    5496:	2b01      	cmp	r3, #1
    5498:	bf04      	itt	eq
    549a:	4a0c      	ldreq	r2, [pc, #48]	; (54cc <nrf_cc310_bl_hash_update_internal+0xe8>)
    549c:	6013      	streq	r3, [r2, #0]
    549e:	4b0c      	ldr	r3, [pc, #48]	; (54d0 <nrf_cc310_bl_hash_update_internal+0xec>)
    54a0:	2040      	movs	r0, #64	; 0x40
    54a2:	6019      	str	r1, [r3, #0]
    54a4:	f8c3 a004 	str.w	sl, [r3, #4]
    54a8:	f000 fc50 	bl	5d4c <SaSi_HalWaitInterrupt>
    54ac:	e7d4      	b.n	5458 <nrf_cc310_bl_hash_update_internal+0x74>
    54ae:	bf00      	nop
    54b0:	5002b910 	.word	0x5002b910
    54b4:	5002bc20 	.word	0x5002bc20
    54b8:	5002b818 	.word	0x5002b818
    54bc:	5002b900 	.word	0x5002b900
    54c0:	5002b7cc 	.word	0x5002b7cc
    54c4:	5002b7d0 	.word	0x5002b7d0
    54c8:	5002b7c8 	.word	0x5002b7c8
    54cc:	5002b684 	.word	0x5002b684
    54d0:	5002bc28 	.word	0x5002bc28

000054d4 <PkaDoubleMdf2Mdf>:
    54d4:	b510      	push	{r4, lr}
    54d6:	4b54      	ldr	r3, [pc, #336]	; (5628 <PkaDoubleMdf2Mdf+0x154>)
    54d8:	b098      	sub	sp, #96	; 0x60
    54da:	4619      	mov	r1, r3
    54dc:	681a      	ldr	r2, [r3, #0]
    54de:	9201      	str	r2, [sp, #4]
    54e0:	9a01      	ldr	r2, [sp, #4]
    54e2:	07d2      	lsls	r2, r2, #31
    54e4:	d5fa      	bpl.n	54dc <PkaDoubleMdf2Mdf+0x8>
    54e6:	4b51      	ldr	r3, [pc, #324]	; (562c <PkaDoubleMdf2Mdf+0x158>)
    54e8:	4a51      	ldr	r2, [pc, #324]	; (5630 <PkaDoubleMdf2Mdf+0x15c>)
    54ea:	601a      	str	r2, [r3, #0]
    54ec:	680a      	ldr	r2, [r1, #0]
    54ee:	9202      	str	r2, [sp, #8]
    54f0:	9a02      	ldr	r2, [sp, #8]
    54f2:	07d4      	lsls	r4, r2, #31
    54f4:	d5fa      	bpl.n	54ec <PkaDoubleMdf2Mdf+0x18>
    54f6:	4a4f      	ldr	r2, [pc, #316]	; (5634 <PkaDoubleMdf2Mdf+0x160>)
    54f8:	601a      	str	r2, [r3, #0]
    54fa:	680a      	ldr	r2, [r1, #0]
    54fc:	9203      	str	r2, [sp, #12]
    54fe:	9a03      	ldr	r2, [sp, #12]
    5500:	07d0      	lsls	r0, r2, #31
    5502:	d5fa      	bpl.n	54fa <PkaDoubleMdf2Mdf+0x26>
    5504:	484c      	ldr	r0, [pc, #304]	; (5638 <PkaDoubleMdf2Mdf+0x164>)
    5506:	6018      	str	r0, [r3, #0]
    5508:	680a      	ldr	r2, [r1, #0]
    550a:	9204      	str	r2, [sp, #16]
    550c:	9a04      	ldr	r2, [sp, #16]
    550e:	07d2      	lsls	r2, r2, #31
    5510:	d5fa      	bpl.n	5508 <PkaDoubleMdf2Mdf+0x34>
    5512:	4a4a      	ldr	r2, [pc, #296]	; (563c <PkaDoubleMdf2Mdf+0x168>)
    5514:	601a      	str	r2, [r3, #0]
    5516:	680a      	ldr	r2, [r1, #0]
    5518:	9205      	str	r2, [sp, #20]
    551a:	9a05      	ldr	r2, [sp, #20]
    551c:	07d4      	lsls	r4, r2, #31
    551e:	d5fa      	bpl.n	5516 <PkaDoubleMdf2Mdf+0x42>
    5520:	4a47      	ldr	r2, [pc, #284]	; (5640 <PkaDoubleMdf2Mdf+0x16c>)
    5522:	601a      	str	r2, [r3, #0]
    5524:	680a      	ldr	r2, [r1, #0]
    5526:	9206      	str	r2, [sp, #24]
    5528:	9a06      	ldr	r2, [sp, #24]
    552a:	07d2      	lsls	r2, r2, #31
    552c:	d5fa      	bpl.n	5524 <PkaDoubleMdf2Mdf+0x50>
    552e:	4a45      	ldr	r2, [pc, #276]	; (5644 <PkaDoubleMdf2Mdf+0x170>)
    5530:	601a      	str	r2, [r3, #0]
    5532:	680a      	ldr	r2, [r1, #0]
    5534:	9207      	str	r2, [sp, #28]
    5536:	9a07      	ldr	r2, [sp, #28]
    5538:	07d4      	lsls	r4, r2, #31
    553a:	d5fa      	bpl.n	5532 <PkaDoubleMdf2Mdf+0x5e>
    553c:	4a42      	ldr	r2, [pc, #264]	; (5648 <PkaDoubleMdf2Mdf+0x174>)
    553e:	601a      	str	r2, [r3, #0]
    5540:	680a      	ldr	r2, [r1, #0]
    5542:	9208      	str	r2, [sp, #32]
    5544:	9a08      	ldr	r2, [sp, #32]
    5546:	07d2      	lsls	r2, r2, #31
    5548:	d5fa      	bpl.n	5540 <PkaDoubleMdf2Mdf+0x6c>
    554a:	4a40      	ldr	r2, [pc, #256]	; (564c <PkaDoubleMdf2Mdf+0x178>)
    554c:	601a      	str	r2, [r3, #0]
    554e:	680a      	ldr	r2, [r1, #0]
    5550:	9209      	str	r2, [sp, #36]	; 0x24
    5552:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5554:	07d4      	lsls	r4, r2, #31
    5556:	d5fa      	bpl.n	554e <PkaDoubleMdf2Mdf+0x7a>
    5558:	4a3d      	ldr	r2, [pc, #244]	; (5650 <PkaDoubleMdf2Mdf+0x17c>)
    555a:	601a      	str	r2, [r3, #0]
    555c:	680a      	ldr	r2, [r1, #0]
    555e:	920a      	str	r2, [sp, #40]	; 0x28
    5560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5562:	07d2      	lsls	r2, r2, #31
    5564:	d5fa      	bpl.n	555c <PkaDoubleMdf2Mdf+0x88>
    5566:	4a3b      	ldr	r2, [pc, #236]	; (5654 <PkaDoubleMdf2Mdf+0x180>)
    5568:	601a      	str	r2, [r3, #0]
    556a:	680a      	ldr	r2, [r1, #0]
    556c:	920b      	str	r2, [sp, #44]	; 0x2c
    556e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5570:	07d4      	lsls	r4, r2, #31
    5572:	d5fa      	bpl.n	556a <PkaDoubleMdf2Mdf+0x96>
    5574:	4a38      	ldr	r2, [pc, #224]	; (5658 <PkaDoubleMdf2Mdf+0x184>)
    5576:	601a      	str	r2, [r3, #0]
    5578:	680a      	ldr	r2, [r1, #0]
    557a:	920c      	str	r2, [sp, #48]	; 0x30
    557c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    557e:	07d2      	lsls	r2, r2, #31
    5580:	d5fa      	bpl.n	5578 <PkaDoubleMdf2Mdf+0xa4>
    5582:	4a36      	ldr	r2, [pc, #216]	; (565c <PkaDoubleMdf2Mdf+0x188>)
    5584:	601a      	str	r2, [r3, #0]
    5586:	680a      	ldr	r2, [r1, #0]
    5588:	920d      	str	r2, [sp, #52]	; 0x34
    558a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    558c:	07d4      	lsls	r4, r2, #31
    558e:	d5fa      	bpl.n	5586 <PkaDoubleMdf2Mdf+0xb2>
    5590:	4a33      	ldr	r2, [pc, #204]	; (5660 <PkaDoubleMdf2Mdf+0x18c>)
    5592:	601a      	str	r2, [r3, #0]
    5594:	680a      	ldr	r2, [r1, #0]
    5596:	920e      	str	r2, [sp, #56]	; 0x38
    5598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    559a:	07d2      	lsls	r2, r2, #31
    559c:	d5fa      	bpl.n	5594 <PkaDoubleMdf2Mdf+0xc0>
    559e:	4a31      	ldr	r2, [pc, #196]	; (5664 <PkaDoubleMdf2Mdf+0x190>)
    55a0:	601a      	str	r2, [r3, #0]
    55a2:	680a      	ldr	r2, [r1, #0]
    55a4:	920f      	str	r2, [sp, #60]	; 0x3c
    55a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    55a8:	07d4      	lsls	r4, r2, #31
    55aa:	d5fa      	bpl.n	55a2 <PkaDoubleMdf2Mdf+0xce>
    55ac:	4a2e      	ldr	r2, [pc, #184]	; (5668 <PkaDoubleMdf2Mdf+0x194>)
    55ae:	601a      	str	r2, [r3, #0]
    55b0:	680a      	ldr	r2, [r1, #0]
    55b2:	9210      	str	r2, [sp, #64]	; 0x40
    55b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    55b6:	07d2      	lsls	r2, r2, #31
    55b8:	d5fa      	bpl.n	55b0 <PkaDoubleMdf2Mdf+0xdc>
    55ba:	4a2c      	ldr	r2, [pc, #176]	; (566c <PkaDoubleMdf2Mdf+0x198>)
    55bc:	601a      	str	r2, [r3, #0]
    55be:	4b1a      	ldr	r3, [pc, #104]	; (5628 <PkaDoubleMdf2Mdf+0x154>)
    55c0:	4619      	mov	r1, r3
    55c2:	681c      	ldr	r4, [r3, #0]
    55c4:	9411      	str	r4, [sp, #68]	; 0x44
    55c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
    55c8:	07e4      	lsls	r4, r4, #31
    55ca:	d5fa      	bpl.n	55c2 <PkaDoubleMdf2Mdf+0xee>
    55cc:	4b17      	ldr	r3, [pc, #92]	; (562c <PkaDoubleMdf2Mdf+0x158>)
    55ce:	6018      	str	r0, [r3, #0]
    55d0:	6808      	ldr	r0, [r1, #0]
    55d2:	9012      	str	r0, [sp, #72]	; 0x48
    55d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    55d6:	07c4      	lsls	r4, r0, #31
    55d8:	d5fa      	bpl.n	55d0 <PkaDoubleMdf2Mdf+0xfc>
    55da:	601a      	str	r2, [r3, #0]
    55dc:	680a      	ldr	r2, [r1, #0]
    55de:	9213      	str	r2, [sp, #76]	; 0x4c
    55e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    55e2:	07d0      	lsls	r0, r2, #31
    55e4:	d5fa      	bpl.n	55dc <PkaDoubleMdf2Mdf+0x108>
    55e6:	4a12      	ldr	r2, [pc, #72]	; (5630 <PkaDoubleMdf2Mdf+0x15c>)
    55e8:	601a      	str	r2, [r3, #0]
    55ea:	680a      	ldr	r2, [r1, #0]
    55ec:	9214      	str	r2, [sp, #80]	; 0x50
    55ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
    55f0:	07d2      	lsls	r2, r2, #31
    55f2:	d5fa      	bpl.n	55ea <PkaDoubleMdf2Mdf+0x116>
    55f4:	4a1e      	ldr	r2, [pc, #120]	; (5670 <PkaDoubleMdf2Mdf+0x19c>)
    55f6:	601a      	str	r2, [r3, #0]
    55f8:	680a      	ldr	r2, [r1, #0]
    55fa:	9215      	str	r2, [sp, #84]	; 0x54
    55fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
    55fe:	07d4      	lsls	r4, r2, #31
    5600:	d5fa      	bpl.n	55f8 <PkaDoubleMdf2Mdf+0x124>
    5602:	4a1c      	ldr	r2, [pc, #112]	; (5674 <PkaDoubleMdf2Mdf+0x1a0>)
    5604:	601a      	str	r2, [r3, #0]
    5606:	680a      	ldr	r2, [r1, #0]
    5608:	9216      	str	r2, [sp, #88]	; 0x58
    560a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    560c:	07d0      	lsls	r0, r2, #31
    560e:	d5fa      	bpl.n	5606 <PkaDoubleMdf2Mdf+0x132>
    5610:	4a19      	ldr	r2, [pc, #100]	; (5678 <PkaDoubleMdf2Mdf+0x1a4>)
    5612:	601a      	str	r2, [r3, #0]
    5614:	680a      	ldr	r2, [r1, #0]
    5616:	9217      	str	r2, [sp, #92]	; 0x5c
    5618:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    561a:	07d2      	lsls	r2, r2, #31
    561c:	d5fa      	bpl.n	5614 <PkaDoubleMdf2Mdf+0x140>
    561e:	4a17      	ldr	r2, [pc, #92]	; (567c <PkaDoubleMdf2Mdf+0x1a8>)
    5620:	601a      	str	r2, [r3, #0]
    5622:	b018      	add	sp, #96	; 0x60
    5624:	bd10      	pop	{r4, pc}
    5626:	bf00      	nop
    5628:	5002b0b0 	.word	0x5002b0b0
    562c:	5002b080 	.word	0x5002b080
    5630:	21659300 	.word	0x21659300
    5634:	90310400 	.word	0x90310400
    5638:	90659640 	.word	0x90659640
    563c:	21618300 	.word	0x21618300
    5640:	2130c300 	.word	0x2130c300
    5644:	9064c300 	.word	0x9064c300
    5648:	90618100 	.word	0x90618100
    564c:	21104600 	.word	0x21104600
    5650:	21118100 	.word	0x21118100
    5654:	21444100 	.word	0x21444100
    5658:	2920c300 	.word	0x2920c300
    565c:	c810460c 	.word	0xc810460c
    5660:	21318600 	.word	0x21318600
    5664:	2160c300 	.word	0x2160c300
    5668:	2928c140 	.word	0x2928c140
    566c:	21659640 	.word	0x21659640
    5670:	90311300 	.word	0x90311300
    5674:	29259640 	.word	0x29259640
    5678:	c8144659 	.word	0xc8144659
    567c:	49320440 	.word	0x49320440

00005680 <PkaDoubleMdf2Jcb>:
    5680:	b510      	push	{r4, lr}
    5682:	4b49      	ldr	r3, [pc, #292]	; (57a8 <PkaDoubleMdf2Jcb+0x128>)
    5684:	b094      	sub	sp, #80	; 0x50
    5686:	4619      	mov	r1, r3
    5688:	681a      	ldr	r2, [r3, #0]
    568a:	9200      	str	r2, [sp, #0]
    568c:	9a00      	ldr	r2, [sp, #0]
    568e:	07d2      	lsls	r2, r2, #31
    5690:	d5fa      	bpl.n	5688 <PkaDoubleMdf2Jcb+0x8>
    5692:	4b46      	ldr	r3, [pc, #280]	; (57ac <PkaDoubleMdf2Jcb+0x12c>)
    5694:	4a46      	ldr	r2, [pc, #280]	; (57b0 <PkaDoubleMdf2Jcb+0x130>)
    5696:	601a      	str	r2, [r3, #0]
    5698:	680a      	ldr	r2, [r1, #0]
    569a:	9201      	str	r2, [sp, #4]
    569c:	9a01      	ldr	r2, [sp, #4]
    569e:	07d4      	lsls	r4, r2, #31
    56a0:	d5fa      	bpl.n	5698 <PkaDoubleMdf2Jcb+0x18>
    56a2:	4a44      	ldr	r2, [pc, #272]	; (57b4 <PkaDoubleMdf2Jcb+0x134>)
    56a4:	601a      	str	r2, [r3, #0]
    56a6:	680a      	ldr	r2, [r1, #0]
    56a8:	9202      	str	r2, [sp, #8]
    56aa:	9a02      	ldr	r2, [sp, #8]
    56ac:	07d0      	lsls	r0, r2, #31
    56ae:	d5fa      	bpl.n	56a6 <PkaDoubleMdf2Jcb+0x26>
    56b0:	4841      	ldr	r0, [pc, #260]	; (57b8 <PkaDoubleMdf2Jcb+0x138>)
    56b2:	6018      	str	r0, [r3, #0]
    56b4:	680a      	ldr	r2, [r1, #0]
    56b6:	9203      	str	r2, [sp, #12]
    56b8:	9a03      	ldr	r2, [sp, #12]
    56ba:	07d2      	lsls	r2, r2, #31
    56bc:	d5fa      	bpl.n	56b4 <PkaDoubleMdf2Jcb+0x34>
    56be:	4a3f      	ldr	r2, [pc, #252]	; (57bc <PkaDoubleMdf2Jcb+0x13c>)
    56c0:	601a      	str	r2, [r3, #0]
    56c2:	680a      	ldr	r2, [r1, #0]
    56c4:	9204      	str	r2, [sp, #16]
    56c6:	9a04      	ldr	r2, [sp, #16]
    56c8:	07d4      	lsls	r4, r2, #31
    56ca:	d5fa      	bpl.n	56c2 <PkaDoubleMdf2Jcb+0x42>
    56cc:	4a3c      	ldr	r2, [pc, #240]	; (57c0 <PkaDoubleMdf2Jcb+0x140>)
    56ce:	601a      	str	r2, [r3, #0]
    56d0:	680a      	ldr	r2, [r1, #0]
    56d2:	9205      	str	r2, [sp, #20]
    56d4:	9a05      	ldr	r2, [sp, #20]
    56d6:	07d2      	lsls	r2, r2, #31
    56d8:	d5fa      	bpl.n	56d0 <PkaDoubleMdf2Jcb+0x50>
    56da:	4a3a      	ldr	r2, [pc, #232]	; (57c4 <PkaDoubleMdf2Jcb+0x144>)
    56dc:	601a      	str	r2, [r3, #0]
    56de:	680a      	ldr	r2, [r1, #0]
    56e0:	9206      	str	r2, [sp, #24]
    56e2:	9a06      	ldr	r2, [sp, #24]
    56e4:	07d4      	lsls	r4, r2, #31
    56e6:	d5fa      	bpl.n	56de <PkaDoubleMdf2Jcb+0x5e>
    56e8:	4a37      	ldr	r2, [pc, #220]	; (57c8 <PkaDoubleMdf2Jcb+0x148>)
    56ea:	601a      	str	r2, [r3, #0]
    56ec:	680a      	ldr	r2, [r1, #0]
    56ee:	9207      	str	r2, [sp, #28]
    56f0:	9a07      	ldr	r2, [sp, #28]
    56f2:	07d2      	lsls	r2, r2, #31
    56f4:	d5fa      	bpl.n	56ec <PkaDoubleMdf2Jcb+0x6c>
    56f6:	4a35      	ldr	r2, [pc, #212]	; (57cc <PkaDoubleMdf2Jcb+0x14c>)
    56f8:	601a      	str	r2, [r3, #0]
    56fa:	680a      	ldr	r2, [r1, #0]
    56fc:	9208      	str	r2, [sp, #32]
    56fe:	9a08      	ldr	r2, [sp, #32]
    5700:	07d4      	lsls	r4, r2, #31
    5702:	d5fa      	bpl.n	56fa <PkaDoubleMdf2Jcb+0x7a>
    5704:	4a32      	ldr	r2, [pc, #200]	; (57d0 <PkaDoubleMdf2Jcb+0x150>)
    5706:	601a      	str	r2, [r3, #0]
    5708:	680a      	ldr	r2, [r1, #0]
    570a:	9209      	str	r2, [sp, #36]	; 0x24
    570c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    570e:	07d2      	lsls	r2, r2, #31
    5710:	d5fa      	bpl.n	5708 <PkaDoubleMdf2Jcb+0x88>
    5712:	4a30      	ldr	r2, [pc, #192]	; (57d4 <PkaDoubleMdf2Jcb+0x154>)
    5714:	601a      	str	r2, [r3, #0]
    5716:	680a      	ldr	r2, [r1, #0]
    5718:	920a      	str	r2, [sp, #40]	; 0x28
    571a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    571c:	07d4      	lsls	r4, r2, #31
    571e:	d5fa      	bpl.n	5716 <PkaDoubleMdf2Jcb+0x96>
    5720:	4a2d      	ldr	r2, [pc, #180]	; (57d8 <PkaDoubleMdf2Jcb+0x158>)
    5722:	601a      	str	r2, [r3, #0]
    5724:	680a      	ldr	r2, [r1, #0]
    5726:	920b      	str	r2, [sp, #44]	; 0x2c
    5728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    572a:	07d2      	lsls	r2, r2, #31
    572c:	d5fa      	bpl.n	5724 <PkaDoubleMdf2Jcb+0xa4>
    572e:	4a2b      	ldr	r2, [pc, #172]	; (57dc <PkaDoubleMdf2Jcb+0x15c>)
    5730:	601a      	str	r2, [r3, #0]
    5732:	680a      	ldr	r2, [r1, #0]
    5734:	920c      	str	r2, [sp, #48]	; 0x30
    5736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5738:	07d4      	lsls	r4, r2, #31
    573a:	d5fa      	bpl.n	5732 <PkaDoubleMdf2Jcb+0xb2>
    573c:	4a28      	ldr	r2, [pc, #160]	; (57e0 <PkaDoubleMdf2Jcb+0x160>)
    573e:	601a      	str	r2, [r3, #0]
    5740:	680a      	ldr	r2, [r1, #0]
    5742:	920d      	str	r2, [sp, #52]	; 0x34
    5744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5746:	07d2      	lsls	r2, r2, #31
    5748:	d5fa      	bpl.n	5740 <PkaDoubleMdf2Jcb+0xc0>
    574a:	4a26      	ldr	r2, [pc, #152]	; (57e4 <PkaDoubleMdf2Jcb+0x164>)
    574c:	601a      	str	r2, [r3, #0]
    574e:	680a      	ldr	r2, [r1, #0]
    5750:	920e      	str	r2, [sp, #56]	; 0x38
    5752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5754:	07d4      	lsls	r4, r2, #31
    5756:	d5fa      	bpl.n	574e <PkaDoubleMdf2Jcb+0xce>
    5758:	4a23      	ldr	r2, [pc, #140]	; (57e8 <PkaDoubleMdf2Jcb+0x168>)
    575a:	601a      	str	r2, [r3, #0]
    575c:	680a      	ldr	r2, [r1, #0]
    575e:	920f      	str	r2, [sp, #60]	; 0x3c
    5760:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5762:	07d2      	lsls	r2, r2, #31
    5764:	d5fa      	bpl.n	575c <PkaDoubleMdf2Jcb+0xdc>
    5766:	4a21      	ldr	r2, [pc, #132]	; (57ec <PkaDoubleMdf2Jcb+0x16c>)
    5768:	601a      	str	r2, [r3, #0]
    576a:	4b0f      	ldr	r3, [pc, #60]	; (57a8 <PkaDoubleMdf2Jcb+0x128>)
    576c:	4619      	mov	r1, r3
    576e:	681c      	ldr	r4, [r3, #0]
    5770:	9410      	str	r4, [sp, #64]	; 0x40
    5772:	9c10      	ldr	r4, [sp, #64]	; 0x40
    5774:	07e4      	lsls	r4, r4, #31
    5776:	d5fa      	bpl.n	576e <PkaDoubleMdf2Jcb+0xee>
    5778:	4b0c      	ldr	r3, [pc, #48]	; (57ac <PkaDoubleMdf2Jcb+0x12c>)
    577a:	6018      	str	r0, [r3, #0]
    577c:	6808      	ldr	r0, [r1, #0]
    577e:	9011      	str	r0, [sp, #68]	; 0x44
    5780:	9811      	ldr	r0, [sp, #68]	; 0x44
    5782:	07c4      	lsls	r4, r0, #31
    5784:	d5fa      	bpl.n	577c <PkaDoubleMdf2Jcb+0xfc>
    5786:	601a      	str	r2, [r3, #0]
    5788:	680a      	ldr	r2, [r1, #0]
    578a:	9212      	str	r2, [sp, #72]	; 0x48
    578c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    578e:	07d0      	lsls	r0, r2, #31
    5790:	d5fa      	bpl.n	5788 <PkaDoubleMdf2Jcb+0x108>
    5792:	4a17      	ldr	r2, [pc, #92]	; (57f0 <PkaDoubleMdf2Jcb+0x170>)
    5794:	601a      	str	r2, [r3, #0]
    5796:	680a      	ldr	r2, [r1, #0]
    5798:	9213      	str	r2, [sp, #76]	; 0x4c
    579a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    579c:	07d2      	lsls	r2, r2, #31
    579e:	d5fa      	bpl.n	5796 <PkaDoubleMdf2Jcb+0x116>
    57a0:	4a14      	ldr	r2, [pc, #80]	; (57f4 <PkaDoubleMdf2Jcb+0x174>)
    57a2:	601a      	str	r2, [r3, #0]
    57a4:	b014      	add	sp, #80	; 0x50
    57a6:	bd10      	pop	{r4, pc}
    57a8:	5002b0b0 	.word	0x5002b0b0
    57ac:	5002b080 	.word	0x5002b080
    57b0:	21659080 	.word	0x21659080
    57b4:	90090400 	.word	0x90090400
    57b8:	90659640 	.word	0x90659640
    57bc:	21618080 	.word	0x21618080
    57c0:	21082080 	.word	0x21082080
    57c4:	90642080 	.word	0x90642080
    57c8:	90618100 	.word	0x90618100
    57cc:	21104600 	.word	0x21104600
    57d0:	21118100 	.word	0x21118100
    57d4:	21444100 	.word	0x21444100
    57d8:	29202080 	.word	0x29202080
    57dc:	c8104602 	.word	0xc8104602
    57e0:	21098600 	.word	0x21098600
    57e4:	21602080 	.word	0x21602080
    57e8:	29282140 	.word	0x29282140
    57ec:	21659640 	.word	0x21659640
    57f0:	29259640 	.word	0x29259640
    57f4:	c8144659 	.word	0xc8144659

000057f8 <PkaAddJcbAfn2Mdf>:
    57f8:	b510      	push	{r4, lr}
    57fa:	4b50      	ldr	r3, [pc, #320]	; (593c <PkaAddJcbAfn2Mdf+0x144>)
    57fc:	b096      	sub	sp, #88	; 0x58
    57fe:	461c      	mov	r4, r3
    5800:	681a      	ldr	r2, [r3, #0]
    5802:	9201      	str	r2, [sp, #4]
    5804:	9a01      	ldr	r2, [sp, #4]
    5806:	07d2      	lsls	r2, r2, #31
    5808:	d5fa      	bpl.n	5800 <PkaAddJcbAfn2Mdf+0x8>
    580a:	4b4d      	ldr	r3, [pc, #308]	; (5940 <PkaAddJcbAfn2Mdf+0x148>)
    580c:	4a4d      	ldr	r2, [pc, #308]	; (5944 <PkaAddJcbAfn2Mdf+0x14c>)
    580e:	601a      	str	r2, [r3, #0]
    5810:	6822      	ldr	r2, [r4, #0]
    5812:	9202      	str	r2, [sp, #8]
    5814:	9a02      	ldr	r2, [sp, #8]
    5816:	07d2      	lsls	r2, r2, #31
    5818:	d5fa      	bpl.n	5810 <PkaAddJcbAfn2Mdf+0x18>
    581a:	4a4b      	ldr	r2, [pc, #300]	; (5948 <PkaAddJcbAfn2Mdf+0x150>)
    581c:	601a      	str	r2, [r3, #0]
    581e:	4a4b      	ldr	r2, [pc, #300]	; (594c <PkaAddJcbAfn2Mdf+0x154>)
    5820:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    5824:	6822      	ldr	r2, [r4, #0]
    5826:	9203      	str	r2, [sp, #12]
    5828:	9a03      	ldr	r2, [sp, #12]
    582a:	07d2      	lsls	r2, r2, #31
    582c:	d5fa      	bpl.n	5824 <PkaAddJcbAfn2Mdf+0x2c>
    582e:	6018      	str	r0, [r3, #0]
    5830:	6822      	ldr	r2, [r4, #0]
    5832:	9204      	str	r2, [sp, #16]
    5834:	9a04      	ldr	r2, [sp, #16]
    5836:	07d0      	lsls	r0, r2, #31
    5838:	d5fa      	bpl.n	5830 <PkaAddJcbAfn2Mdf+0x38>
    583a:	4a45      	ldr	r2, [pc, #276]	; (5950 <PkaAddJcbAfn2Mdf+0x158>)
    583c:	601a      	str	r2, [r3, #0]
    583e:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    5842:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    5846:	6822      	ldr	r2, [r4, #0]
    5848:	9205      	str	r2, [sp, #20]
    584a:	9a05      	ldr	r2, [sp, #20]
    584c:	07d2      	lsls	r2, r2, #31
    584e:	d5fa      	bpl.n	5846 <PkaAddJcbAfn2Mdf+0x4e>
    5850:	6019      	str	r1, [r3, #0]
    5852:	6822      	ldr	r2, [r4, #0]
    5854:	9206      	str	r2, [sp, #24]
    5856:	9a06      	ldr	r2, [sp, #24]
    5858:	07d0      	lsls	r0, r2, #31
    585a:	d5fa      	bpl.n	5852 <PkaAddJcbAfn2Mdf+0x5a>
    585c:	4a3d      	ldr	r2, [pc, #244]	; (5954 <PkaAddJcbAfn2Mdf+0x15c>)
    585e:	601a      	str	r2, [r3, #0]
    5860:	6822      	ldr	r2, [r4, #0]
    5862:	9207      	str	r2, [sp, #28]
    5864:	9a07      	ldr	r2, [sp, #28]
    5866:	07d1      	lsls	r1, r2, #31
    5868:	d5fa      	bpl.n	5860 <PkaAddJcbAfn2Mdf+0x68>
    586a:	4a3b      	ldr	r2, [pc, #236]	; (5958 <PkaAddJcbAfn2Mdf+0x160>)
    586c:	601a      	str	r2, [r3, #0]
    586e:	6822      	ldr	r2, [r4, #0]
    5870:	9208      	str	r2, [sp, #32]
    5872:	9a08      	ldr	r2, [sp, #32]
    5874:	07d2      	lsls	r2, r2, #31
    5876:	d5fa      	bpl.n	586e <PkaAddJcbAfn2Mdf+0x76>
    5878:	4a38      	ldr	r2, [pc, #224]	; (595c <PkaAddJcbAfn2Mdf+0x164>)
    587a:	601a      	str	r2, [r3, #0]
    587c:	6822      	ldr	r2, [r4, #0]
    587e:	9209      	str	r2, [sp, #36]	; 0x24
    5880:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5882:	07d0      	lsls	r0, r2, #31
    5884:	d5fa      	bpl.n	587c <PkaAddJcbAfn2Mdf+0x84>
    5886:	4a36      	ldr	r2, [pc, #216]	; (5960 <PkaAddJcbAfn2Mdf+0x168>)
    5888:	601a      	str	r2, [r3, #0]
    588a:	6822      	ldr	r2, [r4, #0]
    588c:	920a      	str	r2, [sp, #40]	; 0x28
    588e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5890:	07d1      	lsls	r1, r2, #31
    5892:	d5fa      	bpl.n	588a <PkaAddJcbAfn2Mdf+0x92>
    5894:	4a33      	ldr	r2, [pc, #204]	; (5964 <PkaAddJcbAfn2Mdf+0x16c>)
    5896:	601a      	str	r2, [r3, #0]
    5898:	6822      	ldr	r2, [r4, #0]
    589a:	920b      	str	r2, [sp, #44]	; 0x2c
    589c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    589e:	07d2      	lsls	r2, r2, #31
    58a0:	d5fa      	bpl.n	5898 <PkaAddJcbAfn2Mdf+0xa0>
    58a2:	4a31      	ldr	r2, [pc, #196]	; (5968 <PkaAddJcbAfn2Mdf+0x170>)
    58a4:	601a      	str	r2, [r3, #0]
    58a6:	6822      	ldr	r2, [r4, #0]
    58a8:	920c      	str	r2, [sp, #48]	; 0x30
    58aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    58ac:	07d0      	lsls	r0, r2, #31
    58ae:	d5fa      	bpl.n	58a6 <PkaAddJcbAfn2Mdf+0xae>
    58b0:	4a2e      	ldr	r2, [pc, #184]	; (596c <PkaAddJcbAfn2Mdf+0x174>)
    58b2:	601a      	str	r2, [r3, #0]
    58b4:	6822      	ldr	r2, [r4, #0]
    58b6:	920d      	str	r2, [sp, #52]	; 0x34
    58b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    58ba:	07d1      	lsls	r1, r2, #31
    58bc:	d5fa      	bpl.n	58b4 <PkaAddJcbAfn2Mdf+0xbc>
    58be:	4a2c      	ldr	r2, [pc, #176]	; (5970 <PkaAddJcbAfn2Mdf+0x178>)
    58c0:	601a      	str	r2, [r3, #0]
    58c2:	6822      	ldr	r2, [r4, #0]
    58c4:	920e      	str	r2, [sp, #56]	; 0x38
    58c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    58c8:	07d2      	lsls	r2, r2, #31
    58ca:	d5fa      	bpl.n	58c2 <PkaAddJcbAfn2Mdf+0xca>
    58cc:	4a29      	ldr	r2, [pc, #164]	; (5974 <PkaAddJcbAfn2Mdf+0x17c>)
    58ce:	601a      	str	r2, [r3, #0]
    58d0:	6822      	ldr	r2, [r4, #0]
    58d2:	920f      	str	r2, [sp, #60]	; 0x3c
    58d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    58d6:	07d0      	lsls	r0, r2, #31
    58d8:	d5fa      	bpl.n	58d0 <PkaAddJcbAfn2Mdf+0xd8>
    58da:	4a27      	ldr	r2, [pc, #156]	; (5978 <PkaAddJcbAfn2Mdf+0x180>)
    58dc:	601a      	str	r2, [r3, #0]
    58de:	6821      	ldr	r1, [r4, #0]
    58e0:	9110      	str	r1, [sp, #64]	; 0x40
    58e2:	9910      	ldr	r1, [sp, #64]	; 0x40
    58e4:	07c9      	lsls	r1, r1, #31
    58e6:	d5fa      	bpl.n	58de <PkaAddJcbAfn2Mdf+0xe6>
    58e8:	601a      	str	r2, [r3, #0]
    58ea:	4b14      	ldr	r3, [pc, #80]	; (593c <PkaAddJcbAfn2Mdf+0x144>)
    58ec:	461a      	mov	r2, r3
    58ee:	6819      	ldr	r1, [r3, #0]
    58f0:	9111      	str	r1, [sp, #68]	; 0x44
    58f2:	9911      	ldr	r1, [sp, #68]	; 0x44
    58f4:	07c8      	lsls	r0, r1, #31
    58f6:	d5fa      	bpl.n	58ee <PkaAddJcbAfn2Mdf+0xf6>
    58f8:	4b11      	ldr	r3, [pc, #68]	; (5940 <PkaAddJcbAfn2Mdf+0x148>)
    58fa:	4920      	ldr	r1, [pc, #128]	; (597c <PkaAddJcbAfn2Mdf+0x184>)
    58fc:	6019      	str	r1, [r3, #0]
    58fe:	6811      	ldr	r1, [r2, #0]
    5900:	9112      	str	r1, [sp, #72]	; 0x48
    5902:	9912      	ldr	r1, [sp, #72]	; 0x48
    5904:	07c9      	lsls	r1, r1, #31
    5906:	d5fa      	bpl.n	58fe <PkaAddJcbAfn2Mdf+0x106>
    5908:	491d      	ldr	r1, [pc, #116]	; (5980 <PkaAddJcbAfn2Mdf+0x188>)
    590a:	6019      	str	r1, [r3, #0]
    590c:	6811      	ldr	r1, [r2, #0]
    590e:	9113      	str	r1, [sp, #76]	; 0x4c
    5910:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5912:	07cc      	lsls	r4, r1, #31
    5914:	d5fa      	bpl.n	590c <PkaAddJcbAfn2Mdf+0x114>
    5916:	490b      	ldr	r1, [pc, #44]	; (5944 <PkaAddJcbAfn2Mdf+0x14c>)
    5918:	6019      	str	r1, [r3, #0]
    591a:	6811      	ldr	r1, [r2, #0]
    591c:	9114      	str	r1, [sp, #80]	; 0x50
    591e:	9914      	ldr	r1, [sp, #80]	; 0x50
    5920:	07c8      	lsls	r0, r1, #31
    5922:	d5fa      	bpl.n	591a <PkaAddJcbAfn2Mdf+0x122>
    5924:	4917      	ldr	r1, [pc, #92]	; (5984 <PkaAddJcbAfn2Mdf+0x18c>)
    5926:	6019      	str	r1, [r3, #0]
    5928:	6811      	ldr	r1, [r2, #0]
    592a:	9115      	str	r1, [sp, #84]	; 0x54
    592c:	9915      	ldr	r1, [sp, #84]	; 0x54
    592e:	07c9      	lsls	r1, r1, #31
    5930:	d5fa      	bpl.n	5928 <PkaAddJcbAfn2Mdf+0x130>
    5932:	4a15      	ldr	r2, [pc, #84]	; (5988 <PkaAddJcbAfn2Mdf+0x190>)
    5934:	601a      	str	r2, [r3, #0]
    5936:	b016      	add	sp, #88	; 0x58
    5938:	bd10      	pop	{r4, pc}
    593a:	bf00      	nop
    593c:	5002b0b0 	.word	0x5002b0b0
    5940:	5002b080 	.word	0x5002b080
    5944:	90410440 	.word	0x90410440
    5948:	29298600 	.word	0x29298600
    594c:	c80110d8 	.word	0xc80110d8
    5950:	90411440 	.word	0x90411440
    5954:	29211440 	.word	0x29211440
    5958:	21651440 	.word	0x21651440
    595c:	90403400 	.word	0x90403400
    5960:	900c3100 	.word	0x900c3100
    5964:	900c40c0 	.word	0x900c40c0
    5968:	292030c0 	.word	0x292030c0
    596c:	900d9640 	.word	0x900d9640
    5970:	90604100 	.word	0x90604100
    5974:	c8451603 	.word	0xc8451603
    5978:	21118600 	.word	0x21118600
    597c:	21604100 	.word	0x21604100
    5980:	c8444659 	.word	0xc8444659
    5984:	90451440 	.word	0x90451440
    5988:	902d1440 	.word	0x902d1440

0000598c <PkaJcb2Afn>:
    598c:	b570      	push	{r4, r5, r6, lr}
    598e:	4826      	ldr	r0, [pc, #152]	; (5a28 <PkaJcb2Afn+0x9c>)
    5990:	b088      	sub	sp, #32
    5992:	4605      	mov	r5, r0
    5994:	6804      	ldr	r4, [r0, #0]
    5996:	9400      	str	r4, [sp, #0]
    5998:	9c00      	ldr	r4, [sp, #0]
    599a:	07e6      	lsls	r6, r4, #31
    599c:	d5fa      	bpl.n	5994 <PkaJcb2Afn+0x8>
    599e:	4823      	ldr	r0, [pc, #140]	; (5a2c <PkaJcb2Afn+0xa0>)
    59a0:	4c23      	ldr	r4, [pc, #140]	; (5a30 <PkaJcb2Afn+0xa4>)
    59a2:	6004      	str	r4, [r0, #0]
    59a4:	4c23      	ldr	r4, [pc, #140]	; (5a34 <PkaJcb2Afn+0xa8>)
    59a6:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    59aa:	682c      	ldr	r4, [r5, #0]
    59ac:	9401      	str	r4, [sp, #4]
    59ae:	9c01      	ldr	r4, [sp, #4]
    59b0:	07e4      	lsls	r4, r4, #31
    59b2:	d5fa      	bpl.n	59aa <PkaJcb2Afn+0x1e>
    59b4:	6003      	str	r3, [r0, #0]
    59b6:	0193      	lsls	r3, r2, #6
    59b8:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    59bc:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    59c0:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    59c4:	682b      	ldr	r3, [r5, #0]
    59c6:	9302      	str	r3, [sp, #8]
    59c8:	9b02      	ldr	r3, [sp, #8]
    59ca:	07de      	lsls	r6, r3, #31
    59cc:	d5fa      	bpl.n	59c4 <PkaJcb2Afn+0x38>
    59ce:	6004      	str	r4, [r0, #0]
    59d0:	682b      	ldr	r3, [r5, #0]
    59d2:	9303      	str	r3, [sp, #12]
    59d4:	9b03      	ldr	r3, [sp, #12]
    59d6:	07db      	lsls	r3, r3, #31
    59d8:	d5fa      	bpl.n	59d0 <PkaJcb2Afn+0x44>
    59da:	4b17      	ldr	r3, [pc, #92]	; (5a38 <PkaJcb2Afn+0xac>)
    59dc:	6003      	str	r3, [r0, #0]
    59de:	018b      	lsls	r3, r1, #6
    59e0:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    59e4:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    59e8:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    59ec:	682e      	ldr	r6, [r5, #0]
    59ee:	9604      	str	r6, [sp, #16]
    59f0:	9e04      	ldr	r6, [sp, #16]
    59f2:	07f6      	lsls	r6, r6, #31
    59f4:	d5fa      	bpl.n	59ec <PkaJcb2Afn+0x60>
    59f6:	6003      	str	r3, [r0, #0]
    59f8:	682b      	ldr	r3, [r5, #0]
    59fa:	9305      	str	r3, [sp, #20]
    59fc:	9b05      	ldr	r3, [sp, #20]
    59fe:	07de      	lsls	r6, r3, #31
    5a00:	d5fa      	bpl.n	59f8 <PkaJcb2Afn+0x6c>
    5a02:	6004      	str	r4, [r0, #0]
    5a04:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    5a08:	682b      	ldr	r3, [r5, #0]
    5a0a:	9306      	str	r3, [sp, #24]
    5a0c:	9b06      	ldr	r3, [sp, #24]
    5a0e:	07dc      	lsls	r4, r3, #31
    5a10:	d5fa      	bpl.n	5a08 <PkaJcb2Afn+0x7c>
    5a12:	6001      	str	r1, [r0, #0]
    5a14:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    5a18:	682b      	ldr	r3, [r5, #0]
    5a1a:	9307      	str	r3, [sp, #28]
    5a1c:	9b07      	ldr	r3, [sp, #28]
    5a1e:	07db      	lsls	r3, r3, #31
    5a20:	d5fa      	bpl.n	5a18 <PkaJcb2Afn+0x8c>
    5a22:	6002      	str	r2, [r0, #0]
    5a24:	b008      	add	sp, #32
    5a26:	bd70      	pop	{r4, r5, r6, pc}
    5a28:	5002b0b0 	.word	0x5002b0b0
    5a2c:	5002b080 	.word	0x5002b080
    5a30:	290221c0 	.word	0x290221c0
    5a34:	98007180 	.word	0x98007180
    5a38:	90186180 	.word	0x90186180

00005a3c <PkaAddAff>:
    5a3c:	4b35      	ldr	r3, [pc, #212]	; (5b14 <PkaAddAff+0xd8>)
    5a3e:	b08e      	sub	sp, #56	; 0x38
    5a40:	4619      	mov	r1, r3
    5a42:	681a      	ldr	r2, [r3, #0]
    5a44:	9200      	str	r2, [sp, #0]
    5a46:	9a00      	ldr	r2, [sp, #0]
    5a48:	07d2      	lsls	r2, r2, #31
    5a4a:	d5fa      	bpl.n	5a42 <PkaAddAff+0x6>
    5a4c:	4b32      	ldr	r3, [pc, #200]	; (5b18 <PkaAddAff+0xdc>)
    5a4e:	4a33      	ldr	r2, [pc, #204]	; (5b1c <PkaAddAff+0xe0>)
    5a50:	601a      	str	r2, [r3, #0]
    5a52:	680a      	ldr	r2, [r1, #0]
    5a54:	9201      	str	r2, [sp, #4]
    5a56:	9a01      	ldr	r2, [sp, #4]
    5a58:	07d0      	lsls	r0, r2, #31
    5a5a:	d5fa      	bpl.n	5a52 <PkaAddAff+0x16>
    5a5c:	4a30      	ldr	r2, [pc, #192]	; (5b20 <PkaAddAff+0xe4>)
    5a5e:	601a      	str	r2, [r3, #0]
    5a60:	680a      	ldr	r2, [r1, #0]
    5a62:	9202      	str	r2, [sp, #8]
    5a64:	9a02      	ldr	r2, [sp, #8]
    5a66:	07d2      	lsls	r2, r2, #31
    5a68:	d5fa      	bpl.n	5a60 <PkaAddAff+0x24>
    5a6a:	4a2e      	ldr	r2, [pc, #184]	; (5b24 <PkaAddAff+0xe8>)
    5a6c:	601a      	str	r2, [r3, #0]
    5a6e:	680a      	ldr	r2, [r1, #0]
    5a70:	9203      	str	r2, [sp, #12]
    5a72:	9a03      	ldr	r2, [sp, #12]
    5a74:	07d0      	lsls	r0, r2, #31
    5a76:	d5fa      	bpl.n	5a6e <PkaAddAff+0x32>
    5a78:	4a2b      	ldr	r2, [pc, #172]	; (5b28 <PkaAddAff+0xec>)
    5a7a:	601a      	str	r2, [r3, #0]
    5a7c:	680a      	ldr	r2, [r1, #0]
    5a7e:	9204      	str	r2, [sp, #16]
    5a80:	9a04      	ldr	r2, [sp, #16]
    5a82:	07d2      	lsls	r2, r2, #31
    5a84:	d5fa      	bpl.n	5a7c <PkaAddAff+0x40>
    5a86:	4a29      	ldr	r2, [pc, #164]	; (5b2c <PkaAddAff+0xf0>)
    5a88:	601a      	str	r2, [r3, #0]
    5a8a:	680a      	ldr	r2, [r1, #0]
    5a8c:	9205      	str	r2, [sp, #20]
    5a8e:	9a05      	ldr	r2, [sp, #20]
    5a90:	07d0      	lsls	r0, r2, #31
    5a92:	d5fa      	bpl.n	5a8a <PkaAddAff+0x4e>
    5a94:	4a26      	ldr	r2, [pc, #152]	; (5b30 <PkaAddAff+0xf4>)
    5a96:	601a      	str	r2, [r3, #0]
    5a98:	680a      	ldr	r2, [r1, #0]
    5a9a:	9206      	str	r2, [sp, #24]
    5a9c:	9a06      	ldr	r2, [sp, #24]
    5a9e:	07d2      	lsls	r2, r2, #31
    5aa0:	d5fa      	bpl.n	5a98 <PkaAddAff+0x5c>
    5aa2:	4a24      	ldr	r2, [pc, #144]	; (5b34 <PkaAddAff+0xf8>)
    5aa4:	601a      	str	r2, [r3, #0]
    5aa6:	680a      	ldr	r2, [r1, #0]
    5aa8:	9207      	str	r2, [sp, #28]
    5aaa:	9a07      	ldr	r2, [sp, #28]
    5aac:	07d0      	lsls	r0, r2, #31
    5aae:	d5fa      	bpl.n	5aa6 <PkaAddAff+0x6a>
    5ab0:	4a21      	ldr	r2, [pc, #132]	; (5b38 <PkaAddAff+0xfc>)
    5ab2:	601a      	str	r2, [r3, #0]
    5ab4:	680a      	ldr	r2, [r1, #0]
    5ab6:	9208      	str	r2, [sp, #32]
    5ab8:	9a08      	ldr	r2, [sp, #32]
    5aba:	07d2      	lsls	r2, r2, #31
    5abc:	d5fa      	bpl.n	5ab4 <PkaAddAff+0x78>
    5abe:	4a1f      	ldr	r2, [pc, #124]	; (5b3c <PkaAddAff+0x100>)
    5ac0:	601a      	str	r2, [r3, #0]
    5ac2:	680a      	ldr	r2, [r1, #0]
    5ac4:	9209      	str	r2, [sp, #36]	; 0x24
    5ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ac8:	07d0      	lsls	r0, r2, #31
    5aca:	d5fa      	bpl.n	5ac2 <PkaAddAff+0x86>
    5acc:	4a1c      	ldr	r2, [pc, #112]	; (5b40 <PkaAddAff+0x104>)
    5ace:	601a      	str	r2, [r3, #0]
    5ad0:	680a      	ldr	r2, [r1, #0]
    5ad2:	920a      	str	r2, [sp, #40]	; 0x28
    5ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5ad6:	07d2      	lsls	r2, r2, #31
    5ad8:	d5fa      	bpl.n	5ad0 <PkaAddAff+0x94>
    5ada:	4a1a      	ldr	r2, [pc, #104]	; (5b44 <PkaAddAff+0x108>)
    5adc:	601a      	str	r2, [r3, #0]
    5ade:	6808      	ldr	r0, [r1, #0]
    5ae0:	900b      	str	r0, [sp, #44]	; 0x2c
    5ae2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5ae4:	07c0      	lsls	r0, r0, #31
    5ae6:	d5fa      	bpl.n	5ade <PkaAddAff+0xa2>
    5ae8:	601a      	str	r2, [r3, #0]
    5aea:	680a      	ldr	r2, [r1, #0]
    5aec:	920c      	str	r2, [sp, #48]	; 0x30
    5aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5af0:	07d0      	lsls	r0, r2, #31
    5af2:	d5fa      	bpl.n	5aea <PkaAddAff+0xae>
    5af4:	4a14      	ldr	r2, [pc, #80]	; (5b48 <PkaAddAff+0x10c>)
    5af6:	601a      	str	r2, [r3, #0]
    5af8:	680a      	ldr	r2, [r1, #0]
    5afa:	920d      	str	r2, [sp, #52]	; 0x34
    5afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5afe:	07d2      	lsls	r2, r2, #31
    5b00:	d5fa      	bpl.n	5af8 <PkaAddAff+0xbc>
    5b02:	4a12      	ldr	r2, [pc, #72]	; (5b4c <PkaAddAff+0x110>)
    5b04:	601a      	str	r2, [r3, #0]
    5b06:	210e      	movs	r1, #14
    5b08:	230d      	movs	r3, #13
    5b0a:	220f      	movs	r2, #15
    5b0c:	2000      	movs	r0, #0
    5b0e:	b00e      	add	sp, #56	; 0x38
    5b10:	f7ff bf3c 	b.w	598c <PkaJcb2Afn>
    5b14:	5002b0b0 	.word	0x5002b0b0
    5b18:	5002b080 	.word	0x5002b080
    5b1c:	29014380 	.word	0x29014380
    5b20:	21396340 	.word	0x21396340
    5b24:	29017080 	.word	0x29017080
    5b28:	21542080 	.word	0x21542080
    5b2c:	9034d100 	.word	0x9034d100
    5b30:	903440c0 	.word	0x903440c0
    5b34:	292030c0 	.word	0x292030c0
    5b38:	900d53c0 	.word	0x900d53c0
    5b3c:	90384100 	.word	0x90384100
    5b40:	c8082383 	.word	0xc8082383
    5b44:	2110e380 	.word	0x2110e380
    5b48:	21384100 	.word	0x21384100
    5b4c:	c80843cf 	.word	0xc80843cf

00005b50 <PkaSum2ScalarMullt>:
    5b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b54:	2301      	movs	r3, #1
    5b56:	b092      	sub	sp, #72	; 0x48
    5b58:	e9cd 3303 	strd	r3, r3, [sp, #12]
    5b5c:	4b62      	ldr	r3, [pc, #392]	; (5ce8 <PkaSum2ScalarMullt+0x198>)
    5b5e:	461d      	mov	r5, r3
    5b60:	681a      	ldr	r2, [r3, #0]
    5b62:	9205      	str	r2, [sp, #20]
    5b64:	9a05      	ldr	r2, [sp, #20]
    5b66:	07d2      	lsls	r2, r2, #31
    5b68:	d5fa      	bpl.n	5b60 <PkaSum2ScalarMullt+0x10>
    5b6a:	4c60      	ldr	r4, [pc, #384]	; (5cec <PkaSum2ScalarMullt+0x19c>)
    5b6c:	4b60      	ldr	r3, [pc, #384]	; (5cf0 <PkaSum2ScalarMullt+0x1a0>)
    5b6e:	6023      	str	r3, [r4, #0]
    5b70:	4b60      	ldr	r3, [pc, #384]	; (5cf4 <PkaSum2ScalarMullt+0x1a4>)
    5b72:	4619      	mov	r1, r3
    5b74:	681a      	ldr	r2, [r3, #0]
    5b76:	9206      	str	r2, [sp, #24]
    5b78:	9a06      	ldr	r2, [sp, #24]
    5b7a:	07d7      	lsls	r7, r2, #31
    5b7c:	d5fa      	bpl.n	5b74 <PkaSum2ScalarMullt+0x24>
    5b7e:	4b5e      	ldr	r3, [pc, #376]	; (5cf8 <PkaSum2ScalarMullt+0x1a8>)
    5b80:	681a      	ldr	r2, [r3, #0]
    5b82:	04d6      	lsls	r6, r2, #19
    5b84:	f100 80a8 	bmi.w	5cd8 <PkaSum2ScalarMullt+0x188>
    5b88:	682a      	ldr	r2, [r5, #0]
    5b8a:	9207      	str	r2, [sp, #28]
    5b8c:	9a07      	ldr	r2, [sp, #28]
    5b8e:	07d0      	lsls	r0, r2, #31
    5b90:	d5fa      	bpl.n	5b88 <PkaSum2ScalarMullt+0x38>
    5b92:	4a5a      	ldr	r2, [pc, #360]	; (5cfc <PkaSum2ScalarMullt+0x1ac>)
    5b94:	6022      	str	r2, [r4, #0]
    5b96:	680a      	ldr	r2, [r1, #0]
    5b98:	9208      	str	r2, [sp, #32]
    5b9a:	9a08      	ldr	r2, [sp, #32]
    5b9c:	07d2      	lsls	r2, r2, #31
    5b9e:	d5fa      	bpl.n	5b96 <PkaSum2ScalarMullt+0x46>
    5ba0:	681e      	ldr	r6, [r3, #0]
    5ba2:	f3c6 3600 	ubfx	r6, r6, #12, #1
    5ba6:	2e00      	cmp	r6, #0
    5ba8:	f040 8098 	bne.w	5cdc <PkaSum2ScalarMullt+0x18c>
    5bac:	2012      	movs	r0, #18
    5bae:	f7ff f8f9 	bl	4da4 <PkaGetRegEffectiveSizeInBits>
    5bb2:	4607      	mov	r7, r0
    5bb4:	2013      	movs	r0, #19
    5bb6:	f7ff f8f5 	bl	4da4 <PkaGetRegEffectiveSizeInBits>
    5bba:	4287      	cmp	r7, r0
    5bbc:	bf8c      	ite	hi
    5bbe:	2012      	movhi	r0, #18
    5bc0:	2013      	movls	r0, #19
    5bc2:	f7ff f8ef 	bl	4da4 <PkaGetRegEffectiveSizeInBits>
    5bc6:	1e47      	subs	r7, r0, #1
    5bc8:	f7ff ff38 	bl	5a3c <PkaAddAff>
    5bcc:	ab03      	add	r3, sp, #12
    5bce:	aa01      	add	r2, sp, #4
    5bd0:	4639      	mov	r1, r7
    5bd2:	2012      	movs	r0, #18
    5bd4:	f7ff f92c 	bl	4e30 <PkaGetNextMsBit>
    5bd8:	ab04      	add	r3, sp, #16
    5bda:	4680      	mov	r8, r0
    5bdc:	aa02      	add	r2, sp, #8
    5bde:	4639      	mov	r1, r7
    5be0:	2013      	movs	r0, #19
    5be2:	f7ff f925 	bl	4e30 <PkaGetNextMsBit>
    5be6:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    5bea:	2802      	cmp	r0, #2
    5bec:	d032      	beq.n	5c54 <PkaSum2ScalarMullt+0x104>
    5bee:	2803      	cmp	r0, #3
    5bf0:	d03e      	beq.n	5c70 <PkaSum2ScalarMullt+0x120>
    5bf2:	2801      	cmp	r0, #1
    5bf4:	d174      	bne.n	5ce0 <PkaSum2ScalarMullt+0x190>
    5bf6:	682b      	ldr	r3, [r5, #0]
    5bf8:	9309      	str	r3, [sp, #36]	; 0x24
    5bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5bfc:	07db      	lsls	r3, r3, #31
    5bfe:	d5fa      	bpl.n	5bf6 <PkaSum2ScalarMullt+0xa6>
    5c00:	4b3f      	ldr	r3, [pc, #252]	; (5d00 <PkaSum2ScalarMullt+0x1b0>)
    5c02:	6023      	str	r3, [r4, #0]
    5c04:	682b      	ldr	r3, [r5, #0]
    5c06:	930a      	str	r3, [sp, #40]	; 0x28
    5c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c0a:	07d8      	lsls	r0, r3, #31
    5c0c:	d5fa      	bpl.n	5c04 <PkaSum2ScalarMullt+0xb4>
    5c0e:	4b3d      	ldr	r3, [pc, #244]	; (5d04 <PkaSum2ScalarMullt+0x1b4>)
    5c10:	6023      	str	r3, [r4, #0]
    5c12:	682b      	ldr	r3, [r5, #0]
    5c14:	930f      	str	r3, [sp, #60]	; 0x3c
    5c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5c18:	07d9      	lsls	r1, r3, #31
    5c1a:	d5fa      	bpl.n	5c12 <PkaSum2ScalarMullt+0xc2>
    5c1c:	4b3a      	ldr	r3, [pc, #232]	; (5d08 <PkaSum2ScalarMullt+0x1b8>)
    5c1e:	6023      	str	r3, [r4, #0]
    5c20:	682b      	ldr	r3, [r5, #0]
    5c22:	9310      	str	r3, [sp, #64]	; 0x40
    5c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c26:	07da      	lsls	r2, r3, #31
    5c28:	d5fa      	bpl.n	5c20 <PkaSum2ScalarMullt+0xd0>
    5c2a:	4b38      	ldr	r3, [pc, #224]	; (5d0c <PkaSum2ScalarMullt+0x1bc>)
    5c2c:	6023      	str	r3, [r4, #0]
    5c2e:	682b      	ldr	r3, [r5, #0]
    5c30:	9311      	str	r3, [sp, #68]	; 0x44
    5c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5c34:	07db      	lsls	r3, r3, #31
    5c36:	d5fa      	bpl.n	5c2e <PkaSum2ScalarMullt+0xde>
    5c38:	4b35      	ldr	r3, [pc, #212]	; (5d10 <PkaSum2ScalarMullt+0x1c0>)
    5c3a:	6023      	str	r3, [r4, #0]
    5c3c:	3f01      	subs	r7, #1
    5c3e:	d525      	bpl.n	5c8c <PkaSum2ScalarMullt+0x13c>
    5c40:	2310      	movs	r3, #16
    5c42:	2219      	movs	r2, #25
    5c44:	2118      	movs	r1, #24
    5c46:	2000      	movs	r0, #0
    5c48:	f7ff fea0 	bl	598c <PkaJcb2Afn>
    5c4c:	4630      	mov	r0, r6
    5c4e:	b012      	add	sp, #72	; 0x48
    5c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c54:	682b      	ldr	r3, [r5, #0]
    5c56:	930b      	str	r3, [sp, #44]	; 0x2c
    5c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5c5a:	07d9      	lsls	r1, r3, #31
    5c5c:	d5fa      	bpl.n	5c54 <PkaSum2ScalarMullt+0x104>
    5c5e:	4b2d      	ldr	r3, [pc, #180]	; (5d14 <PkaSum2ScalarMullt+0x1c4>)
    5c60:	6023      	str	r3, [r4, #0]
    5c62:	682b      	ldr	r3, [r5, #0]
    5c64:	930c      	str	r3, [sp, #48]	; 0x30
    5c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c68:	07da      	lsls	r2, r3, #31
    5c6a:	d5fa      	bpl.n	5c62 <PkaSum2ScalarMullt+0x112>
    5c6c:	4b2a      	ldr	r3, [pc, #168]	; (5d18 <PkaSum2ScalarMullt+0x1c8>)
    5c6e:	e7cf      	b.n	5c10 <PkaSum2ScalarMullt+0xc0>
    5c70:	682b      	ldr	r3, [r5, #0]
    5c72:	930d      	str	r3, [sp, #52]	; 0x34
    5c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c76:	07db      	lsls	r3, r3, #31
    5c78:	d5fa      	bpl.n	5c70 <PkaSum2ScalarMullt+0x120>
    5c7a:	4b28      	ldr	r3, [pc, #160]	; (5d1c <PkaSum2ScalarMullt+0x1cc>)
    5c7c:	6023      	str	r3, [r4, #0]
    5c7e:	682b      	ldr	r3, [r5, #0]
    5c80:	930e      	str	r3, [sp, #56]	; 0x38
    5c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5c84:	07d8      	lsls	r0, r3, #31
    5c86:	d5fa      	bpl.n	5c7e <PkaSum2ScalarMullt+0x12e>
    5c88:	4b25      	ldr	r3, [pc, #148]	; (5d20 <PkaSum2ScalarMullt+0x1d0>)
    5c8a:	e7c1      	b.n	5c10 <PkaSum2ScalarMullt+0xc0>
    5c8c:	ab03      	add	r3, sp, #12
    5c8e:	aa01      	add	r2, sp, #4
    5c90:	4639      	mov	r1, r7
    5c92:	2012      	movs	r0, #18
    5c94:	f7ff f8cc 	bl	4e30 <PkaGetNextMsBit>
    5c98:	ab04      	add	r3, sp, #16
    5c9a:	4604      	mov	r4, r0
    5c9c:	aa02      	add	r2, sp, #8
    5c9e:	4639      	mov	r1, r7
    5ca0:	2013      	movs	r0, #19
    5ca2:	f7ff f8c5 	bl	4e30 <PkaGetNextMsBit>
    5ca6:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    5caa:	d102      	bne.n	5cb2 <PkaSum2ScalarMullt+0x162>
    5cac:	f7ff fc12 	bl	54d4 <PkaDoubleMdf2Mdf>
    5cb0:	e7c4      	b.n	5c3c <PkaSum2ScalarMullt+0xec>
    5cb2:	f7ff fce5 	bl	5680 <PkaDoubleMdf2Jcb>
    5cb6:	2c02      	cmp	r4, #2
    5cb8:	d008      	beq.n	5ccc <PkaSum2ScalarMullt+0x17c>
    5cba:	2c03      	cmp	r4, #3
    5cbc:	d009      	beq.n	5cd2 <PkaSum2ScalarMullt+0x182>
    5cbe:	2c01      	cmp	r4, #1
    5cc0:	d110      	bne.n	5ce4 <PkaSum2ScalarMullt+0x194>
    5cc2:	2117      	movs	r1, #23
    5cc4:	2016      	movs	r0, #22
    5cc6:	f7ff fd97 	bl	57f8 <PkaAddJcbAfn2Mdf>
    5cca:	e7b7      	b.n	5c3c <PkaSum2ScalarMullt+0xec>
    5ccc:	2115      	movs	r1, #21
    5cce:	2014      	movs	r0, #20
    5cd0:	e7f9      	b.n	5cc6 <PkaSum2ScalarMullt+0x176>
    5cd2:	210f      	movs	r1, #15
    5cd4:	200e      	movs	r0, #14
    5cd6:	e7f6      	b.n	5cc6 <PkaSum2ScalarMullt+0x176>
    5cd8:	4e12      	ldr	r6, [pc, #72]	; (5d24 <PkaSum2ScalarMullt+0x1d4>)
    5cda:	e7b7      	b.n	5c4c <PkaSum2ScalarMullt+0xfc>
    5cdc:	4e12      	ldr	r6, [pc, #72]	; (5d28 <PkaSum2ScalarMullt+0x1d8>)
    5cde:	e7b5      	b.n	5c4c <PkaSum2ScalarMullt+0xfc>
    5ce0:	4e12      	ldr	r6, [pc, #72]	; (5d2c <PkaSum2ScalarMullt+0x1dc>)
    5ce2:	e7b3      	b.n	5c4c <PkaSum2ScalarMullt+0xfc>
    5ce4:	4e12      	ldr	r6, [pc, #72]	; (5d30 <PkaSum2ScalarMullt+0x1e0>)
    5ce6:	e7b1      	b.n	5c4c <PkaSum2ScalarMullt+0xfc>
    5ce8:	5002b0b0 	.word	0x5002b0b0
    5cec:	5002b080 	.word	0x5002b080
    5cf0:	514a0800 	.word	0x514a0800
    5cf4:	5002b0b4 	.word	0x5002b0b4
    5cf8:	5002b088 	.word	0x5002b088
    5cfc:	514e0800 	.word	0x514e0800
    5d00:	495a0600 	.word	0x495a0600
    5d04:	495e0640 	.word	0x495e0640
    5d08:	41420400 	.word	0x41420400
    5d0c:	49421400 	.word	0x49421400
    5d10:	492e0440 	.word	0x492e0440
    5d14:	49520600 	.word	0x49520600
    5d18:	49560640 	.word	0x49560640
    5d1c:	493a0600 	.word	0x493a0600
    5d20:	493e0640 	.word	0x493e0640
    5d24:	00f10806 	.word	0x00f10806
    5d28:	00f10807 	.word	0x00f10807
    5d2c:	00f10804 	.word	0x00f10804
    5d30:	00f10805 	.word	0x00f10805

00005d34 <SaSi_HalClearInterruptBit>:
    5d34:	4b01      	ldr	r3, [pc, #4]	; (5d3c <SaSi_HalClearInterruptBit+0x8>)
    5d36:	6018      	str	r0, [r3, #0]
    5d38:	4770      	bx	lr
    5d3a:	bf00      	nop
    5d3c:	5002ba08 	.word	0x5002ba08

00005d40 <SaSi_HalMaskInterrupt>:
    5d40:	4b01      	ldr	r3, [pc, #4]	; (5d48 <SaSi_HalMaskInterrupt+0x8>)
    5d42:	6018      	str	r0, [r3, #0]
    5d44:	4770      	bx	lr
    5d46:	bf00      	nop
    5d48:	5002ba04 	.word	0x5002ba04

00005d4c <SaSi_HalWaitInterrupt>:
    5d4c:	4a03      	ldr	r2, [pc, #12]	; (5d5c <SaSi_HalWaitInterrupt+0x10>)
    5d4e:	6813      	ldr	r3, [r2, #0]
    5d50:	4218      	tst	r0, r3
    5d52:	d0fc      	beq.n	5d4e <SaSi_HalWaitInterrupt+0x2>
    5d54:	4a02      	ldr	r2, [pc, #8]	; (5d60 <SaSi_HalWaitInterrupt+0x14>)
    5d56:	6010      	str	r0, [r2, #0]
    5d58:	4618      	mov	r0, r3
    5d5a:	4770      	bx	lr
    5d5c:	5002ba00 	.word	0x5002ba00
    5d60:	5002ba08 	.word	0x5002ba08

00005d64 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    5d64:	b129      	cbz	r1, 5d72 <flash_area_id_from_multi_image_slot+0xe>
    5d66:	2901      	cmp	r1, #1
    5d68:	bf14      	ite	ne
    5d6a:	f06f 0015 	mvnne.w	r0, #21
    5d6e:	2005      	moveq	r0, #5
    5d70:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5d72:	2002      	movs	r0, #2
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    5d74:	4770      	bx	lr

00005d76 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    5d76:	2000      	movs	r0, #0
    5d78:	4770      	bx	lr

00005d7a <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    5d7a:	4770      	bx	lr

00005d7c <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5d80:	460e      	mov	r6, r1
    5d82:	4617      	mov	r7, r2
    5d84:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5d86:	4604      	mov	r4, r0
    5d88:	b928      	cbnz	r0, 5d96 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    5d8a:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5d8e:	4640      	mov	r0, r8
    5d90:	b003      	add	sp, #12
    5d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5d96:	2900      	cmp	r1, #0
    5d98:	d0f7      	beq.n	5d8a <bootutil_tlv_iter_begin+0xe>
    5d9a:	2a00      	cmp	r2, #0
    5d9c:	d0f5      	beq.n	5d8a <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5d9e:	68cb      	ldr	r3, [r1, #12]
    5da0:	890d      	ldrh	r5, [r1, #8]
    5da2:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5da4:	2304      	movs	r3, #4
    5da6:	eb0d 0203 	add.w	r2, sp, r3
    5daa:	4629      	mov	r1, r5
    5dac:	4638      	mov	r0, r7
    5dae:	f000 fc3f 	bl	6630 <flash_area_read>
    5db2:	4680      	mov	r8, r0
    5db4:	2800      	cmp	r0, #0
    5db6:	d1e8      	bne.n	5d8a <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5db8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5dbc:	8973      	ldrh	r3, [r6, #10]
    5dbe:	f646 1208 	movw	r2, #26888	; 0x6908
    5dc2:	4291      	cmp	r1, r2
    5dc4:	d123      	bne.n	5e0e <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5dc6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5dca:	4299      	cmp	r1, r3
    5dcc:	d1dd      	bne.n	5d8a <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5dce:	2304      	movs	r3, #4
    5dd0:	eb0d 0203 	add.w	r2, sp, r3
    5dd4:	4429      	add	r1, r5
    5dd6:	4638      	mov	r0, r7
    5dd8:	f000 fc2a 	bl	6630 <flash_area_read>
    5ddc:	2800      	cmp	r0, #0
    5dde:	d1d4      	bne.n	5d8a <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5de0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5de4:	f646 1307 	movw	r3, #26887	; 0x6907
    5de8:	429a      	cmp	r2, r3
    5dea:	d1ce      	bne.n	5d8a <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    5dec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    5df0:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5df2:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5df4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    5df8:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5dfc:	442b      	add	r3, r5
    5dfe:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    5e00:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5e02:	4413      	add	r3, r2
    it->fap = fap;
    5e04:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5e08:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    5e0a:	6125      	str	r5, [r4, #16]
    return 0;
    5e0c:	e7bf      	b.n	5d8e <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d0e6      	beq.n	5de0 <bootutil_tlv_iter_begin+0x64>
    5e12:	e7ba      	b.n	5d8a <bootutil_tlv_iter_begin+0xe>

00005e14 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    5e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5e18:	460f      	mov	r7, r1
    5e1a:	4690      	mov	r8, r2
    5e1c:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5e1e:	4604      	mov	r4, r0
    5e20:	b920      	cbnz	r0, 5e2c <bootutil_tlv_iter_next+0x18>
        return -1;
    5e22:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    5e26:	b003      	add	sp, #12
    5e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5e2c:	6803      	ldr	r3, [r0, #0]
    5e2e:	2b00      	cmp	r3, #0
    5e30:	d0f7      	beq.n	5e22 <bootutil_tlv_iter_next+0xe>
    5e32:	6843      	ldr	r3, [r0, #4]
    5e34:	2b00      	cmp	r3, #0
    5e36:	d0f4      	beq.n	5e22 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5e38:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5e3c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5e40:	429a      	cmp	r2, r3
    5e42:	d216      	bcs.n	5e72 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5e44:	6823      	ldr	r3, [r4, #0]
    5e46:	895b      	ldrh	r3, [r3, #10]
    5e48:	b123      	cbz	r3, 5e54 <bootutil_tlv_iter_next+0x40>
    5e4a:	68e3      	ldr	r3, [r4, #12]
    5e4c:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    5e4e:	bf04      	itt	eq
    5e50:	3304      	addeq	r3, #4
    5e52:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5e54:	2304      	movs	r3, #4
    5e56:	6921      	ldr	r1, [r4, #16]
    5e58:	6860      	ldr	r0, [r4, #4]
    5e5a:	eb0d 0203 	add.w	r2, sp, r3
    5e5e:	f000 fbe7 	bl	6630 <flash_area_read>
        if (rc) {
    5e62:	2800      	cmp	r0, #0
    5e64:	d1dd      	bne.n	5e22 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5e66:	7aa3      	ldrb	r3, [r4, #10]
    5e68:	6925      	ldr	r5, [r4, #16]
    5e6a:	b123      	cbz	r3, 5e76 <bootutil_tlv_iter_next+0x62>
    5e6c:	68e3      	ldr	r3, [r4, #12]
    5e6e:	42ab      	cmp	r3, r5
    5e70:	d801      	bhi.n	5e76 <bootutil_tlv_iter_next+0x62>
            return 1;
    5e72:	2001      	movs	r0, #1
    5e74:	e7d7      	b.n	5e26 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5e76:	8921      	ldrh	r1, [r4, #8]
    5e78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e7c:	4549      	cmp	r1, r9
    5e7e:	f103 0204 	add.w	r2, r3, #4
    5e82:	d003      	beq.n	5e8c <bootutil_tlv_iter_next+0x78>
    5e84:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5e88:	458c      	cmp	ip, r1
    5e8a:	d10b      	bne.n	5ea4 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5e8c:	b116      	cbz	r6, 5e94 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5e8e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5e92:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5e94:	3504      	adds	r5, #4
    5e96:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    5e98:	f8a8 3000 	strh.w	r3, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5e9c:	6923      	ldr	r3, [r4, #16]
    5e9e:	4413      	add	r3, r2
    5ea0:	6123      	str	r3, [r4, #16]
            return 0;
    5ea2:	e7c0      	b.n	5e26 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5ea4:	4415      	add	r5, r2
    5ea6:	6125      	str	r5, [r4, #16]
    5ea8:	e7c8      	b.n	5e3c <bootutil_tlv_iter_next+0x28>

00005eaa <bootutil_read_bigint>:
{
    5eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5eac:	460c      	mov	r4, r1
    5eae:	4606      	mov	r6, r0
    5eb0:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    5eb2:	2302      	movs	r3, #2
    5eb4:	aa01      	add	r2, sp, #4
    5eb6:	4620      	mov	r0, r4
    5eb8:	f000 fa44 	bl	6344 <mbedtls_asn1_get_tag>
    5ebc:	4605      	mov	r5, r0
    5ebe:	b9e8      	cbnz	r0, 5efc <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    5ec0:	9a01      	ldr	r2, [sp, #4]
    5ec2:	2a1f      	cmp	r2, #31
    5ec4:	d90e      	bls.n	5ee4 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    5ec6:	6823      	ldr	r3, [r4, #0]
    5ec8:	f1a2 0120 	sub.w	r1, r2, #32
    5ecc:	4419      	add	r1, r3
    5ece:	2220      	movs	r2, #32
    5ed0:	4630      	mov	r0, r6
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5ed2:	f000 fc8d 	bl	67f0 <memcpy>
    *cp += len;
    5ed6:	6823      	ldr	r3, [r4, #0]
    5ed8:	9a01      	ldr	r2, [sp, #4]
    5eda:	4413      	add	r3, r2
    5edc:	6023      	str	r3, [r4, #0]
}
    5ede:	4628      	mov	r0, r5
    5ee0:	b002      	add	sp, #8
    5ee2:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    5ee4:	4601      	mov	r1, r0
    5ee6:	f1c2 0220 	rsb	r2, r2, #32
    5eea:	4630      	mov	r0, r6
    5eec:	f000 fc8b 	bl	6806 <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5ef0:	9a01      	ldr	r2, [sp, #4]
    5ef2:	6821      	ldr	r1, [r4, #0]
    5ef4:	f1c2 0020 	rsb	r0, r2, #32
    5ef8:	4430      	add	r0, r6
    5efa:	e7ea      	b.n	5ed2 <bootutil_read_bigint+0x28>
        return -3;
    5efc:	f06f 0502 	mvn.w	r5, #2
    5f00:	e7ed      	b.n	5ede <bootutil_read_bigint+0x34>

00005f02 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    5f02:	f000 bc65 	b.w	67d0 <memcmp>

00005f06 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5f06:	f44f 73c0 	mov.w	r3, #384	; 0x180
    5f0a:	4358      	muls	r0, r3
}
    5f0c:	3030      	adds	r0, #48	; 0x30
    5f0e:	4770      	bx	lr

00005f10 <boot_status_entries>:
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    5f10:	780b      	ldrb	r3, [r1, #0]
    5f12:	2b02      	cmp	r3, #2
    5f14:	d006      	beq.n	5f24 <boot_status_entries+0x14>
    5f16:	2b05      	cmp	r3, #5
    return -1;
    5f18:	bf0c      	ite	eq
    5f1a:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    5f1e:	f04f 30ff 	movne.w	r0, #4294967295
    5f22:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    5f24:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    5f28:	4770      	bx	lr

00005f2a <boot_status_off>:
{
    5f2a:	b510      	push	{r4, lr}
    5f2c:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5f2e:	f000 fbf8 	bl	6722 <flash_area_align>
    return flash_area_get_size(fap) - off_from_end;
    5f32:	68a2      	ldr	r2, [r4, #8]
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5f34:	b2c3      	uxtb	r3, r0
    return flash_area_get_size(fap) - off_from_end;
    5f36:	3a30      	subs	r2, #48	; 0x30
}
    5f38:	f44f 70c0 	mov.w	r0, #384	; 0x180
    5f3c:	fb00 2013 	mls	r0, r0, r3, r2
    5f40:	bd10      	pop	{r4, pc}

00005f42 <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    5f42:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5f44:	2201      	movs	r2, #1
    5f46:	3920      	subs	r1, #32
    5f48:	f000 be7c 	b.w	6c44 <boot_write_trailer_flag>

00005f4c <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    5f4c:	b513      	push	{r0, r1, r4, lr}
    5f4e:	4604      	mov	r4, r0
    5f50:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5f52:	f000 fe14 	bl	6b7e <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    5f56:	2304      	movs	r3, #4
    5f58:	f1a0 0108 	sub.w	r1, r0, #8
    5f5c:	eb0d 0203 	add.w	r2, sp, r3
    5f60:	4620      	mov	r0, r4
    5f62:	f000 fe40 	bl	6be6 <boot_write_trailer>
}
    5f66:	b002      	add	sp, #8
    5f68:	bd10      	pop	{r4, pc}

00005f6a <boot_read_image_size>:
{
    5f6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f6c:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5f6e:	2000      	movs	r0, #0
{
    5f70:	460c      	mov	r4, r1
    5f72:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5f74:	f7ff fef6 	bl	5d64 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5f78:	4669      	mov	r1, sp
    5f7a:	b2c0      	uxtb	r0, r0
    5f7c:	f7fb fd3a 	bl	19f4 <flash_area_open>
    if (rc != 0) {
    5f80:	b130      	cbz	r0, 5f90 <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    5f82:	2501      	movs	r5, #1
    flash_area_close(fap);
    5f84:	9800      	ldr	r0, [sp, #0]
    5f86:	f000 fb52 	bl	662e <flash_area_close>
}
    5f8a:	4628      	mov	r0, r5
    5f8c:	b003      	add	sp, #12
    5f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5f90:	212c      	movs	r1, #44	; 0x2c
    5f92:	fb01 5404 	mla	r4, r1, r4, r5
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5f96:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5f98:	8921      	ldrh	r1, [r4, #8]
    5f9a:	68e3      	ldr	r3, [r4, #12]
    5f9c:	18ce      	adds	r6, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5f9e:	2304      	movs	r3, #4
    5fa0:	eb0d 0203 	add.w	r2, sp, r3
    5fa4:	4631      	mov	r1, r6
    5fa6:	f000 fb43 	bl	6630 <flash_area_read>
    5faa:	4605      	mov	r5, r0
    5fac:	2800      	cmp	r0, #0
    5fae:	d1e8      	bne.n	5f82 <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5fb0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5fb4:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5fb6:	f646 1308 	movw	r3, #26888	; 0x6908
    5fba:	429a      	cmp	r2, r3
    5fbc:	d11a      	bne.n	5ff4 <boot_read_image_size+0x8a>
        if (protect_tlv_size != info.it_tlv_tot) {
    5fbe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fc2:	429c      	cmp	r4, r3
    5fc4:	d001      	beq.n	5fca <boot_read_image_size+0x60>
            rc = BOOT_EBADIMAGE;
    5fc6:	2503      	movs	r5, #3
    5fc8:	e7dc      	b.n	5f84 <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5fca:	2304      	movs	r3, #4
    5fcc:	9800      	ldr	r0, [sp, #0]
    5fce:	eb0d 0203 	add.w	r2, sp, r3
    5fd2:	19a1      	adds	r1, r4, r6
    5fd4:	f000 fb2c 	bl	6630 <flash_area_read>
    5fd8:	2800      	cmp	r0, #0
    5fda:	d1d2      	bne.n	5f82 <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5fdc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5fe0:	f646 1307 	movw	r3, #26887	; 0x6907
    5fe4:	429a      	cmp	r2, r3
    5fe6:	d1ee      	bne.n	5fc6 <boot_read_image_size+0x5c>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5fe8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5fec:	4421      	add	r1, r4
    5fee:	4431      	add	r1, r6
    5ff0:	6039      	str	r1, [r7, #0]
    rc = 0;
    5ff2:	e7c7      	b.n	5f84 <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    5ff4:	2c00      	cmp	r4, #0
    5ff6:	d0f1      	beq.n	5fdc <boot_read_image_size+0x72>
    5ff8:	e7e5      	b.n	5fc6 <boot_read_image_size+0x5c>

00005ffa <boot_read_image_headers>:
{
    5ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5ffc:	4613      	mov	r3, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5ffe:	9201      	str	r2, [sp, #4]
{
    6000:	460e      	mov	r6, r1
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6002:	4602      	mov	r2, r0
    6004:	2100      	movs	r1, #0
{
    6006:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6008:	f7fa fe9a 	bl	d40 <boot_read_image_header>
        if (rc != 0) {
    600c:	4604      	mov	r4, r0
    600e:	b950      	cbnz	r0, 6026 <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6010:	9b01      	ldr	r3, [sp, #4]
    6012:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    6016:	2101      	movs	r1, #1
    6018:	4628      	mov	r0, r5
    601a:	f7fa fe91 	bl	d40 <boot_read_image_header>
        if (rc != 0) {
    601e:	b110      	cbz	r0, 6026 <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    6020:	2e00      	cmp	r6, #0
    6022:	bf18      	it	ne
    6024:	4604      	movne	r4, r0
}
    6026:	4620      	mov	r0, r4
    6028:	b002      	add	sp, #8
    602a:	bd70      	pop	{r4, r5, r6, pc}

0000602c <boot_read_sectors>:
{
    602c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    602e:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
    6030:	4604      	mov	r4, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    6032:	2580      	movs	r5, #128	; 0x80
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6034:	a901      	add	r1, sp, #4
    6036:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    6038:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    603a:	f7fb fcf9 	bl	1a30 <flash_area_get_sectors>
    if (rc != 0) {
    603e:	b958      	cbnz	r0, 6058 <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    6040:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6042:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    6044:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6046:	a901      	add	r1, sp, #4
    6048:	2005      	movs	r0, #5
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    604a:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    604c:	f7fb fcf0 	bl	1a30 <flash_area_get_sectors>
    if (rc != 0) {
    6050:	4605      	mov	r5, r0
    6052:	b128      	cbz	r0, 6060 <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    6054:	2509      	movs	r5, #9
    6056:	e000      	b.n	605a <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    6058:	2501      	movs	r5, #1
}
    605a:	4628      	mov	r0, r5
    605c:	b003      	add	sp, #12
    605e:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    6060:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    6062:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    6064:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    6066:	f000 fb5c 	bl	6722 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    606a:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    606c:	e7f5      	b.n	605a <boot_read_sectors+0x2e>

0000606e <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    606e:	2301      	movs	r3, #1
    6070:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    6072:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    6076:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    6078:	2300      	movs	r3, #0
    bs->source = 0;
    607a:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    607e:	4770      	bx	lr

00006080 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    6080:	7943      	ldrb	r3, [r0, #5]
    6082:	2b01      	cmp	r3, #1
    6084:	d107      	bne.n	6096 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    6086:	6803      	ldr	r3, [r0, #0]
    6088:	2b01      	cmp	r3, #1
    608a:	d104      	bne.n	6096 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    608c:	7900      	ldrb	r0, [r0, #4]
    608e:	1e43      	subs	r3, r0, #1
    6090:	4258      	negs	r0, r3
    6092:	4158      	adcs	r0, r3
    6094:	4770      	bx	lr
    6096:	2000      	movs	r0, #0
}
    6098:	4770      	bx	lr

0000609a <boot_write_status>:
{
    609a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    609c:	4606      	mov	r6, r0
    609e:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    60a0:	2002      	movs	r0, #2
    60a2:	a901      	add	r1, sp, #4
    60a4:	f7fb fca6 	bl	19f4 <flash_area_open>
    if (rc != 0) {
    60a8:	bb38      	cbnz	r0, 60fa <boot_write_status+0x60>
    off = boot_status_off(fap) +
    60aa:	9801      	ldr	r0, [sp, #4]
    60ac:	f7ff ff3d 	bl	5f2a <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    60b0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    60b2:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    60b4:	4628      	mov	r0, r5
    60b6:	f000 f8e5 	bl	6284 <boot_status_internal_off>
    off = boot_status_off(fap) +
    60ba:	4404      	add	r4, r0
    align = flash_area_align(fap);
    60bc:	9801      	ldr	r0, [sp, #4]
    60be:	f000 fb30 	bl	6722 <flash_area_align>
    60c2:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    60c4:	9801      	ldr	r0, [sp, #4]
    60c6:	f000 fb35 	bl	6734 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    60ca:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    60cc:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    60ce:	eb0d 0002 	add.w	r0, sp, r2
    60d2:	f000 fb98 	bl	6806 <memset>
    buf[0] = bs->state;
    60d6:	792b      	ldrb	r3, [r5, #4]
    60d8:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    60dc:	4621      	mov	r1, r4
    60de:	9801      	ldr	r0, [sp, #4]
    60e0:	b2f3      	uxtb	r3, r6
    60e2:	aa02      	add	r2, sp, #8
    60e4:	f000 fac0 	bl	6668 <flash_area_write>
    if (rc != 0) {
    60e8:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    60ea:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    60ec:	bf18      	it	ne
    60ee:	2401      	movne	r4, #1
    flash_area_close(fap);
    60f0:	f000 fa9d 	bl	662e <flash_area_close>
}
    60f4:	4620      	mov	r0, r4
    60f6:	b004      	add	sp, #16
    60f8:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    60fa:	2401      	movs	r4, #1
    60fc:	e7fa      	b.n	60f4 <boot_write_status+0x5a>

000060fe <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    60fe:	f000 bae1 	b.w	66c4 <flash_area_erase>

00006102 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    6102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6106:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6108:	2100      	movs	r1, #0
{
    610a:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    610c:	4608      	mov	r0, r1
    610e:	f7ff fe29 	bl	5d64 <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    6112:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6114:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    6116:	2000      	movs	r0, #0
    6118:	f7ff fe24 	bl	5d64 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    611c:	7833      	ldrb	r3, [r6, #0]
    611e:	429c      	cmp	r4, r3
    6120:	d021      	beq.n	6166 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    6122:	4298      	cmp	r0, r3
    6124:	d121      	bne.n	616a <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    6126:	2401      	movs	r4, #1
    return BOOT_IMG(state, slot).num_sectors;
    6128:	232c      	movs	r3, #44	; 0x2c
    612a:	fb03 7404 	mla	r4, r3, r4, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    612e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    6130:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6132:	f7ff fee8 	bl	5f06 <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    6136:	3d01      	subs	r5, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6138:	4607      	mov	r7, r0
    total_sz = 0;
    613a:	f04f 0800 	mov.w	r8, #0
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    613e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6140:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    6144:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    6148:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    614c:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    614e:	464a      	mov	r2, r9
    6150:	1ac9      	subs	r1, r1, r3
    6152:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    6154:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    6156:	f7ff ffd2 	bl	60fe <boot_erase_region>
    } while (total_sz < trailer_sz);
    615a:	45b8      	cmp	r8, r7
        sector--;
    615c:	f105 35ff 	add.w	r5, r5, #4294967295
    } while (total_sz < trailer_sz);
    6160:	d3ed      	bcc.n	613e <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    6162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    6166:	2400      	movs	r4, #0
    6168:	e7de      	b.n	6128 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    616a:	2001      	movs	r0, #1
    616c:	e7f9      	b.n	6162 <swap_erase_trailer_sectors+0x60>

0000616e <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    616e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6170:	4615      	mov	r5, r2
    6172:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6174:	2005      	movs	r0, #5
    6176:	4669      	mov	r1, sp
    6178:	f000 fd77 	bl	6c6a <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    617c:	79e9      	ldrb	r1, [r5, #7]
    617e:	2901      	cmp	r1, #1
    6180:	d003      	beq.n	618a <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    6182:	2200      	movs	r2, #0
    6184:	4620      	mov	r0, r4
    6186:	f000 fd84 	bl	6c92 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    618a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    618e:	2b01      	cmp	r3, #1
    6190:	d102      	bne.n	6198 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    6192:	4620      	mov	r0, r4
    6194:	f000 fd60 	bl	6c58 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    6198:	68a9      	ldr	r1, [r5, #8]
    619a:	4620      	mov	r0, r4
    619c:	f7ff fed6 	bl	5f4c <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    61a0:	4620      	mov	r0, r4
    61a2:	f7fd f9f3 	bl	358c <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    61a6:	2000      	movs	r0, #0
    61a8:	b003      	add	sp, #12
    61aa:	bd30      	pop	{r4, r5, pc}

000061ac <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    61ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    61ae:	460d      	mov	r5, r1
    61b0:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    61b2:	f7fa fead 	bl	f10 <swap_status_source>
    61b6:	4604      	mov	r4, r0
    61b8:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    61ba:	b350      	cbz	r0, 6212 <swap_read_status+0x66>
    61bc:	2802      	cmp	r0, #2
    61be:	d12d      	bne.n	621c <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    61c0:	a901      	add	r1, sp, #4
    61c2:	f7fb fc17 	bl	19f4 <flash_area_open>
    if (rc != 0) {
    61c6:	bb58      	cbnz	r0, 6220 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    61c8:	9801      	ldr	r0, [sp, #4]
    61ca:	462a      	mov	r2, r5
    61cc:	4631      	mov	r1, r6
    61ce:	f7fa fe05 	bl	ddc <swap_read_status_bytes>
    if (rc == 0) {
    61d2:	4604      	mov	r4, r0
    61d4:	b9d0      	cbnz	r0, 620c <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    61d6:	9801      	ldr	r0, [sp, #4]
    61d8:	f000 fcd1 	bl	6b7e <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    61dc:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    61de:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    61e0:	f10d 0203 	add.w	r2, sp, #3
    61e4:	9801      	ldr	r0, [sp, #4]
    61e6:	f000 fa23 	bl	6630 <flash_area_read>
        if (rc != 0) {
    61ea:	4604      	mov	r4, r0
    61ec:	b9a0      	cbnz	r0, 6218 <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    61ee:	9801      	ldr	r0, [sp, #4]
    61f0:	2201      	movs	r2, #1
    61f2:	f10d 0103 	add.w	r1, sp, #3
    61f6:	f000 fcd3 	bl	6ba0 <bootutil_buffer_is_erased>
    61fa:	b110      	cbz	r0, 6202 <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    61fc:	2301      	movs	r3, #1
    61fe:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    6202:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6206:	f003 030f 	and.w	r3, r3, #15
    620a:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    620c:	9801      	ldr	r0, [sp, #4]
    620e:	f000 fa0e 	bl	662e <flash_area_close>

    return rc;
}
    6212:	4620      	mov	r0, r4
    6214:	b002      	add	sp, #8
    6216:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    6218:	2401      	movs	r4, #1
    621a:	e7f7      	b.n	620c <swap_read_status+0x60>
    switch (bs->source) {
    621c:	2407      	movs	r4, #7
    621e:	e7f8      	b.n	6212 <swap_read_status+0x66>
        return BOOT_EFLASH;
    6220:	2401      	movs	r4, #1
    6222:	e7f6      	b.n	6212 <swap_read_status+0x66>

00006224 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    6224:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6226:	2002      	movs	r0, #2
    6228:	a901      	add	r1, sp, #4
    622a:	f7fb fbe3 	bl	19f4 <flash_area_open>
            &fap);
    if (rc != 0) {
    622e:	b948      	cbnz	r0, 6244 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    6230:	9801      	ldr	r0, [sp, #4]
    6232:	f7ff fe86 	bl	5f42 <boot_write_copy_done>
    6236:	4604      	mov	r4, r0
    flash_area_close(fap);
    6238:	9801      	ldr	r0, [sp, #4]
    623a:	f000 f9f8 	bl	662e <flash_area_close>
    return rc;
}
    623e:	4620      	mov	r0, r4
    6240:	b002      	add	sp, #8
    6242:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6244:	2401      	movs	r4, #1
    6246:	e7fa      	b.n	623e <swap_set_copy_done+0x1a>

00006248 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    6248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    624a:	2002      	movs	r0, #2
    624c:	a901      	add	r1, sp, #4
    624e:	f7fb fbd1 	bl	19f4 <flash_area_open>
            &fap);
    if (rc != 0) {
    6252:	b9a8      	cbnz	r0, 6280 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    6254:	9801      	ldr	r0, [sp, #4]
    6256:	a902      	add	r1, sp, #8
    6258:	f7fd f9a6 	bl	35a8 <boot_read_swap_state>
    if (rc != 0) {
    625c:	4604      	mov	r4, r0
    625e:	b968      	cbnz	r0, 627c <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    6260:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6264:	2b03      	cmp	r3, #3
    6266:	d103      	bne.n	6270 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    6268:	9801      	ldr	r0, [sp, #4]
    626a:	f000 fcf5 	bl	6c58 <boot_write_image_ok>
    626e:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    6270:	9801      	ldr	r0, [sp, #4]
    6272:	f000 f9dc 	bl	662e <flash_area_close>
    return rc;
}
    6276:	4620      	mov	r0, r4
    6278:	b004      	add	sp, #16
    627a:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    627c:	2401      	movs	r4, #1
    627e:	e7f7      	b.n	6270 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    6280:	2401      	movs	r4, #1
    6282:	e7f8      	b.n	6276 <swap_set_image_ok+0x2e>

00006284 <boot_status_internal_off>:
{
    6284:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6286:	7943      	ldrb	r3, [r0, #5]
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6288:	6804      	ldr	r4, [r0, #0]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    628a:	2b01      	cmp	r3, #1
    628c:	bf08      	it	eq
    628e:	2201      	moveq	r2, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6290:	7903      	ldrb	r3, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    6292:	bf18      	it	ne
    6294:	2202      	movne	r2, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6296:	fb01 f202 	mul.w	r2, r1, r2
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    629a:	f104 34ff 	add.w	r4, r4, #4294967295
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    629e:	f103 33ff 	add.w	r3, r3, #4294967295
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    62a2:	fb02 f204 	mul.w	r2, r2, r4
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    62a6:	bf14      	ite	ne
    62a8:	01cd      	lslne	r5, r1, #7
    62aa:	2500      	moveq	r5, #0
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    62ac:	fb01 2103 	mla	r1, r1, r3, r2
}
    62b0:	1948      	adds	r0, r1, r5
    62b2:	bd30      	pop	{r4, r5, pc}

000062b4 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    62b4:	6803      	ldr	r3, [r0, #0]
{
    62b6:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    62b8:	1acd      	subs	r5, r1, r3
    62ba:	2d00      	cmp	r5, #0
    62bc:	dd0d      	ble.n	62da <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    62be:	f993 6000 	ldrsb.w	r6, [r3]
    62c2:	781c      	ldrb	r4, [r3, #0]
    62c4:	2e00      	cmp	r6, #0
    62c6:	db0b      	blt.n	62e0 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    62c8:	1c5c      	adds	r4, r3, #1
    62ca:	6004      	str	r4, [r0, #0]
    62cc:	781b      	ldrb	r3, [r3, #0]
    62ce:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    62d0:	6803      	ldr	r3, [r0, #0]
    62d2:	1ac9      	subs	r1, r1, r3
    62d4:	6813      	ldr	r3, [r2, #0]
    62d6:	428b      	cmp	r3, r1
    62d8:	d932      	bls.n	6340 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    62da:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    62de:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    62e0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    62e4:	3c01      	subs	r4, #1
    62e6:	2c03      	cmp	r4, #3
    62e8:	d827      	bhi.n	633a <mbedtls_asn1_get_len+0x86>
    62ea:	e8df f004 	tbb	[pc, r4]
    62ee:	0902      	.short	0x0902
    62f0:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    62f2:	2d01      	cmp	r5, #1
    62f4:	d0f1      	beq.n	62da <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    62f6:	785c      	ldrb	r4, [r3, #1]
    62f8:	6014      	str	r4, [r2, #0]
            (*p) += 2;
    62fa:	3302      	adds	r3, #2
            (*p) += 5;
    62fc:	6003      	str	r3, [r0, #0]
            break;
    62fe:	e7e7      	b.n	62d0 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    6300:	2d02      	cmp	r5, #2
    6302:	ddea      	ble.n	62da <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6304:	f8b3 4001 	ldrh.w	r4, [r3, #1]
    6308:	ba64      	rev16	r4, r4
    630a:	b2a4      	uxth	r4, r4
    630c:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    630e:	3303      	adds	r3, #3
    6310:	e7f4      	b.n	62fc <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    6312:	2d03      	cmp	r5, #3
    6314:	dde1      	ble.n	62da <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6316:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6318:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    631a:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    631c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6320:	78dd      	ldrb	r5, [r3, #3]
    6322:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    6324:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    6326:	3304      	adds	r3, #4
    6328:	e7e8      	b.n	62fc <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    632a:	2d04      	cmp	r5, #4
    632c:	ddd5      	ble.n	62da <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    632e:	f8d3 4001 	ldr.w	r4, [r3, #1]
    6332:	ba24      	rev	r4, r4
    6334:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6336:	3305      	adds	r3, #5
    6338:	e7e0      	b.n	62fc <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
    633a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    633e:	e7ce      	b.n	62de <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    6340:	2000      	movs	r0, #0
    6342:	e7cc      	b.n	62de <mbedtls_asn1_get_len+0x2a>

00006344 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6344:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    6346:	6804      	ldr	r4, [r0, #0]
    6348:	1b0e      	subs	r6, r1, r4
    634a:	2e00      	cmp	r6, #0
    634c:	dd07      	ble.n	635e <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    634e:	7826      	ldrb	r6, [r4, #0]
    6350:	429e      	cmp	r6, r3
    6352:	d108      	bne.n	6366 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6354:	3401      	adds	r4, #1
    6356:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6358:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    635a:	f7ff bfab 	b.w	62b4 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    635e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    6362:	bc70      	pop	{r4, r5, r6}
    6364:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6366:	f06f 0061 	mvn.w	r0, #97	; 0x61
    636a:	e7fa      	b.n	6362 <mbedtls_asn1_get_tag+0x1e>

0000636c <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    636c:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    636e:	2303      	movs	r3, #3
{
    6370:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    6372:	f7ff ffe7 	bl	6344 <mbedtls_asn1_get_tag>
    6376:	b918      	cbnz	r0, 6380 <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    6378:	6813      	ldr	r3, [r2, #0]
    637a:	b913      	cbnz	r3, 6382 <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    637c:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    6380:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    6382:	3b01      	subs	r3, #1
    6384:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    6386:	6823      	ldr	r3, [r4, #0]
    6388:	781a      	ldrb	r2, [r3, #0]
    638a:	2a00      	cmp	r2, #0
    638c:	d1f6      	bne.n	637c <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    638e:	3301      	adds	r3, #1
    6390:	6023      	str	r3, [r4, #0]
    return( 0 );
    6392:	e7f5      	b.n	6380 <mbedtls_asn1_get_bitstring_null+0x14>

00006394 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    6394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6398:	4690      	mov	r8, r2
    639a:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    639c:	aa01      	add	r2, sp, #4
    639e:	2330      	movs	r3, #48	; 0x30
{
    63a0:	4605      	mov	r5, r0
    63a2:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    63a4:	f7ff ffce 	bl	6344 <mbedtls_asn1_get_tag>
    63a8:	4604      	mov	r4, r0
    63aa:	b9f8      	cbnz	r0, 63ec <mbedtls_asn1_get_alg+0x58>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    63ac:	682e      	ldr	r6, [r5, #0]
    63ae:	eba9 0906 	sub.w	r9, r9, r6
    63b2:	f1b9 0f00 	cmp.w	r9, #0
    63b6:	dd35      	ble.n	6424 <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    end = *p + len;
    63b8:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
    63ba:	7833      	ldrb	r3, [r6, #0]
    63bc:	4642      	mov	r2, r8
    end = *p + len;
    63be:	440e      	add	r6, r1
    alg->tag = **p;
    63c0:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    63c4:	4631      	mov	r1, r6
    63c6:	2306      	movs	r3, #6
    63c8:	4628      	mov	r0, r5
    63ca:	f7ff ffbb 	bl	6344 <mbedtls_asn1_get_tag>
    63ce:	4604      	mov	r4, r0
    63d0:	b960      	cbnz	r0, 63ec <mbedtls_asn1_get_alg+0x58>
        return( ret );

    alg->p = *p;
    63d2:	682a      	ldr	r2, [r5, #0]
    *p += alg->len;
    63d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
    63d8:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
    63dc:	1853      	adds	r3, r2, r1

    if( *p == end )
    63de:	42b3      	cmp	r3, r6
    *p += alg->len;
    63e0:	602b      	str	r3, [r5, #0]
    if( *p == end )
    63e2:	d107      	bne.n	63f4 <mbedtls_asn1_get_alg+0x60>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    63e4:	210c      	movs	r1, #12
    63e6:	4638      	mov	r0, r7
    63e8:	f7fe f958 	bl	469c <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    63ec:	4620      	mov	r0, r4
    63ee:	b003      	add	sp, #12
    63f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
    63f4:	5c51      	ldrb	r1, [r2, r1]
    63f6:	463a      	mov	r2, r7
    (*p)++;
    63f8:	3301      	adds	r3, #1
    params->tag = **p;
    63fa:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    63fe:	4628      	mov	r0, r5
    (*p)++;
    6400:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    6402:	4631      	mov	r1, r6
    6404:	f7ff ff56 	bl	62b4 <mbedtls_asn1_get_len>
    6408:	4604      	mov	r4, r0
    640a:	2800      	cmp	r0, #0
    640c:	d1ee      	bne.n	63ec <mbedtls_asn1_get_alg+0x58>
    params->p = *p;
    640e:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    6410:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    6412:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    6414:	4413      	add	r3, r2
    if( *p != end )
    6416:	42b3      	cmp	r3, r6
    *p += params->len;
    6418:	602b      	str	r3, [r5, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    641a:	bf0c      	ite	eq
    641c:	4604      	moveq	r4, r0
    641e:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    6422:	e7e3      	b.n	63ec <mbedtls_asn1_get_alg+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6424:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    6428:	e7e0      	b.n	63ec <mbedtls_asn1_get_alg+0x58>

0000642a <cc310_sha256_update>:
{
    642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    642c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    6430:	af00      	add	r7, sp, #0
    6432:	4605      	mov	r5, r0
    6434:	4614      	mov	r4, r2
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    6436:	d210      	bcs.n	645a <cc310_sha256_update+0x30>
        uint8_t stack_buffer[data_len];
    6438:	1dd3      	adds	r3, r2, #7
    643a:	f023 0307 	bic.w	r3, r3, #7
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    643e:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    6440:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    6444:	4668      	mov	r0, sp
    6446:	f000 f9d3 	bl	67f0 <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    644a:	4669      	mov	r1, sp
    644c:	4622      	mov	r2, r4
    644e:	4628      	mov	r0, r5
    6450:	f7fe fbe2 	bl	4c18 <nrf_cc310_bl_hash_sha256_update>
    6454:	46b5      	mov	sp, r6
};
    6456:	46bd      	mov	sp, r7
    6458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    645a:	f7fe fbdd 	bl	4c18 <nrf_cc310_bl_hash_sha256_update>
};
    645e:	e7fa      	b.n	6456 <cc310_sha256_update+0x2c>

00006460 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6460:	b160      	cbz	r0, 647c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6462:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6464:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6468:	2b01      	cmp	r3, #1
    646a:	d003      	beq.n	6474 <sys_notify_validate+0x14>
    646c:	2b03      	cmp	r3, #3
    646e:	d105      	bne.n	647c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6470:	6803      	ldr	r3, [r0, #0]
    6472:	b11b      	cbz	r3, 647c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6474:	2300      	movs	r3, #0
    6476:	6083      	str	r3, [r0, #8]
    6478:	4618      	mov	r0, r3
    647a:	4770      	bx	lr
		return -EINVAL;
    647c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6480:	4770      	bx	lr

00006482 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6482:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6484:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6486:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    648a:	2b03      	cmp	r3, #3
    648c:	f04f 0200 	mov.w	r2, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6490:	bf0c      	ite	eq
    6492:	6803      	ldreq	r3, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6494:	4613      	movne	r3, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6496:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6498:	4618      	mov	r0, r3
    649a:	4770      	bx	lr

0000649c <arch_printk_char_out>:
}
    649c:	2000      	movs	r0, #0
    649e:	4770      	bx	lr

000064a0 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    64a0:	b40f      	push	{r0, r1, r2, r3}
    64a2:	b507      	push	{r0, r1, r2, lr}
    64a4:	a904      	add	r1, sp, #16
    64a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    64aa:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    64ac:	f7fa ff60 	bl	1370 <vprintk>
	}
	va_end(ap);
}
    64b0:	b003      	add	sp, #12
    64b2:	f85d eb04 	ldr.w	lr, [sp], #4
    64b6:	b004      	add	sp, #16
    64b8:	4770      	bx	lr

000064ba <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    64ba:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    64bc:	f013 0307 	ands.w	r3, r3, #7
    64c0:	d105      	bne.n	64ce <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    64c2:	6803      	ldr	r3, [r0, #0]
    64c4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    64c6:	bf0c      	ite	eq
    64c8:	2000      	moveq	r0, #0
    64ca:	2003      	movne	r0, #3
    64cc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    64ce:	2b02      	cmp	r3, #2
    64d0:	d105      	bne.n	64de <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    64d2:	8b43      	ldrh	r3, [r0, #26]
    64d4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    64d6:	bf14      	ite	ne
    64d8:	2000      	movne	r0, #0
    64da:	2004      	moveq	r0, #4
    64dc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    64de:	2b01      	cmp	r3, #1
    64e0:	d105      	bne.n	64ee <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    64e2:	6803      	ldr	r3, [r0, #0]
    64e4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    64e6:	bf0c      	ite	eq
    64e8:	2000      	moveq	r0, #0
    64ea:	2005      	movne	r0, #5
    64ec:	4770      	bx	lr
	int evt = EVT_NOP;
    64ee:	2000      	movs	r0, #0
}
    64f0:	4770      	bx	lr

000064f2 <notify_one>:
{
    64f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    64f4:	460d      	mov	r5, r1
    64f6:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    64f8:	4619      	mov	r1, r3
    64fa:	1d28      	adds	r0, r5, #4
{
    64fc:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    64fe:	9300      	str	r3, [sp, #0]
    6500:	f7ff ffbf 	bl	6482 <sys_notify_finalize>
	if (cb) {
    6504:	4604      	mov	r4, r0
    6506:	b140      	cbz	r0, 651a <notify_one+0x28>
		cb(mgr, cli, state, res);
    6508:	e9dd 3200 	ldrd	r3, r2, [sp]
    650c:	4629      	mov	r1, r5
    650e:	4630      	mov	r0, r6
    6510:	46a4      	mov	ip, r4
}
    6512:	b002      	add	sp, #8
    6514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    6518:	4760      	bx	ip
}
    651a:	b002      	add	sp, #8
    651c:	bd70      	pop	{r4, r5, r6, pc}

0000651e <transition_complete>:
{
    651e:	b410      	push	{r4}
    6520:	f04f 0420 	mov.w	r4, #32
    6524:	f3ef 8211 	mrs	r2, BASEPRI
    6528:	f384 8812 	msr	BASEPRI_MAX, r4
    652c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6530:	6141      	str	r1, [r0, #20]
}
    6532:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    6536:	2101      	movs	r1, #1
    6538:	f7fa bf28 	b.w	138c <process_event>

0000653c <validate_args>:
{
    653c:	b510      	push	{r4, lr}
    653e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6540:	b140      	cbz	r0, 6554 <validate_args+0x18>
    6542:	b139      	cbz	r1, 6554 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6544:	1d08      	adds	r0, r1, #4
    6546:	f7ff ff8b 	bl	6460 <sys_notify_validate>
	if ((rv == 0)
    654a:	b928      	cbnz	r0, 6558 <validate_args+0x1c>
	    && ((cli->notify.flags
    654c:	68a3      	ldr	r3, [r4, #8]
    654e:	f033 0303 	bics.w	r3, r3, #3
    6552:	d001      	beq.n	6558 <validate_args+0x1c>
		rv = -EINVAL;
    6554:	f06f 0015 	mvn.w	r0, #21
}
    6558:	bd10      	pop	{r4, pc}

0000655a <onoff_manager_init>:
{
    655a:	b538      	push	{r3, r4, r5, lr}
    655c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    655e:	4605      	mov	r5, r0
    6560:	b158      	cbz	r0, 657a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6562:	b151      	cbz	r1, 657a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6564:	680b      	ldr	r3, [r1, #0]
    6566:	b143      	cbz	r3, 657a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6568:	684b      	ldr	r3, [r1, #4]
    656a:	b133      	cbz	r3, 657a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    656c:	221c      	movs	r2, #28
    656e:	2100      	movs	r1, #0
    6570:	f000 f949 	bl	6806 <memset>
    6574:	612c      	str	r4, [r5, #16]
	return 0;
    6576:	2000      	movs	r0, #0
}
    6578:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    657a:	f06f 0015 	mvn.w	r0, #21
    657e:	e7fb      	b.n	6578 <onoff_manager_init+0x1e>

00006580 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6580:	b570      	push	{r4, r5, r6, lr}
    6582:	4604      	mov	r4, r0
    6584:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6586:	f7ff ffd9 	bl	653c <validate_args>

	if (rv < 0) {
    658a:	1e05      	subs	r5, r0, #0
    658c:	db31      	blt.n	65f2 <onoff_request+0x72>
    658e:	f04f 0320 	mov.w	r3, #32
    6592:	f3ef 8111 	mrs	r1, BASEPRI
    6596:	f383 8812 	msr	BASEPRI_MAX, r3
    659a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    659e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    65a0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    65a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    65a6:	42ab      	cmp	r3, r5
    65a8:	f000 0207 	and.w	r2, r0, #7
    65ac:	d02e      	beq.n	660c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    65ae:	2a02      	cmp	r2, #2
    65b0:	d10e      	bne.n	65d0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    65b2:	3301      	adds	r3, #1
    65b4:	8363      	strh	r3, [r4, #26]
	rv = state;
    65b6:	4615      	mov	r5, r2
		notify = true;
    65b8:	2301      	movs	r3, #1
	__asm__ volatile(
    65ba:	f381 8811 	msr	BASEPRI, r1
    65be:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    65c2:	b1b3      	cbz	r3, 65f2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    65c4:	2300      	movs	r3, #0
    65c6:	4631      	mov	r1, r6
    65c8:	4620      	mov	r0, r4
    65ca:	f7ff ff92 	bl	64f2 <notify_one>
    65ce:	e010      	b.n	65f2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    65d0:	0783      	lsls	r3, r0, #30
    65d2:	d001      	beq.n	65d8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    65d4:	2a06      	cmp	r2, #6
    65d6:	d10e      	bne.n	65f6 <onoff_request+0x76>
	parent->next = child;
    65d8:	2300      	movs	r3, #0
    65da:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    65dc:	6863      	ldr	r3, [r4, #4]
    65de:	b993      	cbnz	r3, 6606 <onoff_request+0x86>
	list->head = node;
    65e0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    65e4:	4615      	mov	r5, r2
    65e6:	b962      	cbnz	r2, 6602 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    65e8:	460a      	mov	r2, r1
    65ea:	4620      	mov	r0, r4
    65ec:	2102      	movs	r1, #2
    65ee:	f7fa fecd 	bl	138c <process_event>
		}
	}

	return rv;
}
    65f2:	4628      	mov	r0, r5
    65f4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    65f6:	2a05      	cmp	r2, #5
    65f8:	bf0c      	ite	eq
    65fa:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    65fe:	f06f 0504 	mvnne.w	r5, #4
    6602:	2300      	movs	r3, #0
    6604:	e7d9      	b.n	65ba <onoff_request+0x3a>
	parent->next = child;
    6606:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6608:	6066      	str	r6, [r4, #4]
}
    660a:	e7eb      	b.n	65e4 <onoff_request+0x64>
		rv = -EAGAIN;
    660c:	f06f 050a 	mvn.w	r5, #10
    6610:	e7f7      	b.n	6602 <onoff_request+0x82>

00006612 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6612:	4770      	bx	lr

00006614 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    6614:	b40f      	push	{r0, r1, r2, r3}
    6616:	b507      	push	{r0, r1, r2, lr}
    6618:	a904      	add	r1, sp, #16
    661a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    661e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    6620:	f7fa fea6 	bl	1370 <vprintk>
	va_end(ap);
}
    6624:	b003      	add	sp, #12
    6626:	f85d eb04 	ldr.w	lr, [sp], #4
    662a:	b004      	add	sp, #16
    662c:	4770      	bx	lr

0000662e <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    662e:	4770      	bx	lr

00006630 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    6630:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    6632:	1e0c      	subs	r4, r1, #0
    6634:	4605      	mov	r5, r0
    6636:	9201      	str	r2, [sp, #4]
    6638:	461e      	mov	r6, r3
    663a:	db11      	blt.n	6660 <flash_area_read+0x30>
    663c:	6881      	ldr	r1, [r0, #8]
    663e:	18e3      	adds	r3, r4, r3
    6640:	428b      	cmp	r3, r1
    6642:	d80d      	bhi.n	6660 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    6644:	68c0      	ldr	r0, [r0, #12]
    6646:	f7fd fe33 	bl	42b0 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    664a:	6869      	ldr	r1, [r5, #4]
    664c:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    664e:	6883      	ldr	r3, [r0, #8]
    6650:	9a01      	ldr	r2, [sp, #4]
    6652:	681c      	ldr	r4, [r3, #0]
    6654:	4633      	mov	r3, r6
    6656:	46a4      	mov	ip, r4
}
    6658:	b002      	add	sp, #8
    665a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    665e:	4760      	bx	ip
    6660:	f06f 0015 	mvn.w	r0, #21
    6664:	b002      	add	sp, #8
    6666:	bd70      	pop	{r4, r5, r6, pc}

00006668 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    6668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    666c:	f1b1 0900 	subs.w	r9, r1, #0
    6670:	4607      	mov	r7, r0
    6672:	4690      	mov	r8, r2
    6674:	461e      	mov	r6, r3
    6676:	db22      	blt.n	66be <flash_area_write+0x56>
    6678:	6882      	ldr	r2, [r0, #8]
    667a:	444b      	add	r3, r9
    667c:	4293      	cmp	r3, r2
    667e:	d81e      	bhi.n	66be <flash_area_write+0x56>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6680:	68c0      	ldr	r0, [r0, #12]
    6682:	f7fd fe15 	bl	42b0 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    6686:	6879      	ldr	r1, [r7, #4]
    6688:	4605      	mov	r5, r0
    668a:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    668c:	6887      	ldr	r7, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    668e:	68fb      	ldr	r3, [r7, #12]
    6690:	b95b      	cbnz	r3, 66aa <flash_area_write+0x42>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    6692:	687c      	ldr	r4, [r7, #4]
    6694:	4633      	mov	r3, r6
    6696:	4642      	mov	r2, r8
    6698:	4649      	mov	r1, r9
    669a:	4628      	mov	r0, r5
    669c:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    669e:	68fb      	ldr	r3, [r7, #12]
	rc = api->write(dev, offset, data, len);
    66a0:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    66a2:	b943      	cbnz	r3, 66b6 <flash_area_write+0x4e>

	return rc;
}
    66a4:	4620      	mov	r0, r4
    66a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    66aa:	2100      	movs	r1, #0
    66ac:	4798      	blx	r3
		if (rc) {
    66ae:	4604      	mov	r4, r0
    66b0:	2800      	cmp	r0, #0
    66b2:	d0ee      	beq.n	6692 <flash_area_write+0x2a>
    66b4:	e7f6      	b.n	66a4 <flash_area_write+0x3c>
		(void) api->write_protection(dev, true);
    66b6:	2101      	movs	r1, #1
    66b8:	4628      	mov	r0, r5
    66ba:	4798      	blx	r3
    66bc:	e7f2      	b.n	66a4 <flash_area_write+0x3c>
		return -EINVAL;
    66be:	f06f 0415 	mvn.w	r4, #21
    66c2:	e7ef      	b.n	66a4 <flash_area_write+0x3c>

000066c4 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    66c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66c8:	1e0c      	subs	r4, r1, #0
    66ca:	4605      	mov	r5, r0
    66cc:	4617      	mov	r7, r2
    66ce:	db25      	blt.n	671c <flash_area_erase+0x58>
    66d0:	18a3      	adds	r3, r4, r2
    66d2:	6882      	ldr	r2, [r0, #8]
    66d4:	4293      	cmp	r3, r2
    66d6:	d821      	bhi.n	671c <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    66d8:	68c0      	ldr	r0, [r0, #12]
    66da:	f7fd fde9 	bl	42b0 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    66de:	686d      	ldr	r5, [r5, #4]
    66e0:	4606      	mov	r6, r0
    66e2:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    66e4:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    66e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
    66ec:	b963      	cbnz	r3, 6708 <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    66ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
    66f2:	463a      	mov	r2, r7
    66f4:	4629      	mov	r1, r5
    66f6:	4630      	mov	r0, r6
    66f8:	4798      	blx	r3

	if (api->write_protection != NULL) {
    66fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    66fe:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    6700:	b943      	cbnz	r3, 6714 <flash_area_erase+0x50>

	return rc;
}
    6702:	4620      	mov	r0, r4
    6704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    6708:	2100      	movs	r1, #0
    670a:	4798      	blx	r3
		if (rc) {
    670c:	4604      	mov	r4, r0
    670e:	2800      	cmp	r0, #0
    6710:	d0ed      	beq.n	66ee <flash_area_erase+0x2a>
    6712:	e7f6      	b.n	6702 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    6714:	2101      	movs	r1, #1
    6716:	4630      	mov	r0, r6
    6718:	4798      	blx	r3
    671a:	e7f2      	b.n	6702 <flash_area_erase+0x3e>
		return -EINVAL;
    671c:	f06f 0415 	mvn.w	r4, #21
    6720:	e7ef      	b.n	6702 <flash_area_erase+0x3e>

00006722 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    6722:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    6724:	68c0      	ldr	r0, [r0, #12]
    6726:	f7fd fdc3 	bl	42b0 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    672a:	6883      	ldr	r3, [r0, #8]
    672c:	691b      	ldr	r3, [r3, #16]
    672e:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    6730:	6800      	ldr	r0, [r0, #0]
    6732:	bd08      	pop	{r3, pc}

00006734 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    6734:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    6736:	68c0      	ldr	r0, [r0, #12]
    6738:	f7fd fdba 	bl	42b0 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    673c:	6883      	ldr	r3, [r0, #8]
    673e:	691b      	ldr	r3, [r3, #16]
    6740:	4798      	blx	r3

	return param->erase_value;
}
    6742:	7900      	ldrb	r0, [r0, #4]
    6744:	bd08      	pop	{r3, pc}

00006746 <get_sectors_cb>:
{
    6746:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    6748:	6802      	ldr	r2, [r0, #0]
    674a:	684c      	ldr	r4, [r1, #4]
    674c:	42a2      	cmp	r2, r4
    674e:	d316      	bcc.n	677e <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    6750:	688b      	ldr	r3, [r1, #8]
    6752:	4423      	add	r3, r4
    6754:	429a      	cmp	r2, r3
    6756:	d206      	bcs.n	6766 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    6758:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    675c:	42ab      	cmp	r3, r5
    675e:	d304      	bcc.n	676a <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    6760:	f06f 030b 	mvn.w	r3, #11
    6764:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    6766:	2000      	movs	r0, #0
    6768:	e00a      	b.n	6780 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    676a:	68cd      	ldr	r5, [r1, #12]
    676c:	1b12      	subs	r2, r2, r4
    676e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    6772:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    6776:	6842      	ldr	r2, [r0, #4]
    6778:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    677a:	3301      	adds	r3, #1
    677c:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    677e:	2001      	movs	r0, #1
}
    6780:	bd70      	pop	{r4, r5, r6, pc}

00006782 <abort_function>:
{
    6782:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6784:	2000      	movs	r0, #0
    6786:	f7fb f921 	bl	19cc <sys_reboot>

0000678a <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    678a:	4770      	bx	lr

0000678c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    678c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    678e:	6800      	ldr	r0, [r0, #0]
    6790:	f7fb b9a6 	b.w	1ae0 <z_arm_fatal_error>

00006794 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6794:	2100      	movs	r1, #0
    6796:	2001      	movs	r0, #1
    6798:	f7fb b9a2 	b.w	1ae0 <z_arm_fatal_error>

0000679c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    679c:	b508      	push	{r3, lr}
	handler();
    679e:	f7fb fa03 	bl	1ba8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    67a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    67a6:	f7fb ba89 	b.w	1cbc <z_arm_exc_exit>

000067aa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    67aa:	4603      	mov	r3, r0
	size_t n = 0;
    67ac:	2000      	movs	r0, #0

	while (*s != '\0') {
    67ae:	5c1a      	ldrb	r2, [r3, r0]
    67b0:	b902      	cbnz	r2, 67b4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    67b2:	4770      	bx	lr
		n++;
    67b4:	3001      	adds	r0, #1
    67b6:	e7fa      	b.n	67ae <strlen+0x4>

000067b8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    67b8:	3801      	subs	r0, #1
    67ba:	3901      	subs	r1, #1
    67bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    67c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    67c4:	4293      	cmp	r3, r2
    67c6:	d101      	bne.n	67cc <strcmp+0x14>
    67c8:	2b00      	cmp	r3, #0
    67ca:	d1f7      	bne.n	67bc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    67cc:	1a98      	subs	r0, r3, r2
    67ce:	4770      	bx	lr

000067d0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    67d0:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    67d2:	b15a      	cbz	r2, 67ec <memcmp+0x1c>
    67d4:	3901      	subs	r1, #1
    67d6:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    67d8:	f810 2b01 	ldrb.w	r2, [r0], #1
    67dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    67e0:	42a0      	cmp	r0, r4
    67e2:	d001      	beq.n	67e8 <memcmp+0x18>
    67e4:	429a      	cmp	r2, r3
    67e6:	d0f7      	beq.n	67d8 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    67e8:	1ad0      	subs	r0, r2, r3
}
    67ea:	bd10      	pop	{r4, pc}
		return 0;
    67ec:	4610      	mov	r0, r2
    67ee:	e7fc      	b.n	67ea <memcmp+0x1a>

000067f0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    67f0:	b510      	push	{r4, lr}
    67f2:	1e43      	subs	r3, r0, #1
    67f4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    67f6:	4291      	cmp	r1, r2
    67f8:	d100      	bne.n	67fc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    67fa:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    67fc:	f811 4b01 	ldrb.w	r4, [r1], #1
    6800:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6804:	e7f7      	b.n	67f6 <memcpy+0x6>

00006806 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6806:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6808:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    680a:	4603      	mov	r3, r0
	while (n > 0) {
    680c:	4293      	cmp	r3, r2
    680e:	d100      	bne.n	6812 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6810:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6812:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6816:	e7f9      	b.n	680c <memset+0x6>

00006818 <_stdout_hook_default>:
}
    6818:	f04f 30ff 	mov.w	r0, #4294967295
    681c:	4770      	bx	lr

0000681e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    681e:	6902      	ldr	r2, [r0, #16]
    6820:	b2cb      	uxtb	r3, r1
    6822:	210c      	movs	r1, #12
    6824:	fb03 2101 	mla	r1, r3, r1, r2
    6828:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    682a:	f000 0007 	and.w	r0, r0, #7
    682e:	4770      	bx	lr

00006830 <set_off_state>:
	__asm__ volatile(
    6830:	f04f 0320 	mov.w	r3, #32
    6834:	f3ef 8211 	mrs	r2, BASEPRI
    6838:	f383 8812 	msr	BASEPRI_MAX, r3
    683c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6840:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6842:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6846:	d001      	beq.n	684c <set_off_state+0x1c>
    6848:	428b      	cmp	r3, r1
    684a:	d107      	bne.n	685c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    684c:	2301      	movs	r3, #1
    684e:	6003      	str	r3, [r0, #0]
	int err = 0;
    6850:	2000      	movs	r0, #0
	__asm__ volatile(
    6852:	f382 8811 	msr	BASEPRI, r2
    6856:	f3bf 8f6f 	isb	sy
}
    685a:	4770      	bx	lr
		err = -EPERM;
    685c:	f04f 30ff 	mov.w	r0, #4294967295
    6860:	e7f7      	b.n	6852 <set_off_state+0x22>

00006862 <set_starting_state>:
{
    6862:	b510      	push	{r4, lr}
	__asm__ volatile(
    6864:	f04f 0320 	mov.w	r3, #32
    6868:	f3ef 8211 	mrs	r2, BASEPRI
    686c:	f383 8812 	msr	BASEPRI_MAX, r3
    6870:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6874:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6876:	f003 0407 	and.w	r4, r3, #7
    687a:	2c01      	cmp	r4, #1
    687c:	d106      	bne.n	688c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    687e:	6001      	str	r1, [r0, #0]
	int err = 0;
    6880:	2000      	movs	r0, #0
	__asm__ volatile(
    6882:	f382 8811 	msr	BASEPRI, r2
    6886:	f3bf 8f6f 	isb	sy
}
    688a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    688c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    6890:	428b      	cmp	r3, r1
		err = -EALREADY;
    6892:	bf14      	ite	ne
    6894:	f04f 30ff 	movne.w	r0, #4294967295
    6898:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    689c:	e7f1      	b.n	6882 <set_starting_state+0x20>

0000689e <set_on_state>:
	__asm__ volatile(
    689e:	f04f 0320 	mov.w	r3, #32
    68a2:	f3ef 8211 	mrs	r2, BASEPRI
    68a6:	f383 8812 	msr	BASEPRI_MAX, r3
    68aa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    68ae:	6803      	ldr	r3, [r0, #0]
    68b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    68b4:	f043 0302 	orr.w	r3, r3, #2
    68b8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    68ba:	f382 8811 	msr	BASEPRI, r2
    68be:	f3bf 8f6f 	isb	sy
}
    68c2:	4770      	bx	lr

000068c4 <api_blocking_start>:
}
    68c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    68c8:	4770      	bx	lr

000068ca <onoff_started_callback>:
	return &data->mgr[type];
    68ca:	6900      	ldr	r0, [r0, #16]
{
    68cc:	b410      	push	{r4}
	return &data->mgr[type];
    68ce:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    68d0:	241c      	movs	r4, #28
    68d2:	fb03 0004 	mla	r0, r3, r4, r0
    68d6:	2100      	movs	r1, #0
}
    68d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    68dc:	4710      	bx	r2

000068de <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    68de:	2000      	movs	r0, #0
    68e0:	f7fd b89c 	b.w	3a1c <nrfx_clock_start>

000068e4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    68e4:	2000      	movs	r0, #0
    68e6:	f7fd b8cb 	b.w	3a80 <nrfx_clock_stop>

000068ea <api_stop>:
{
    68ea:	b538      	push	{r3, r4, r5, lr}
    68ec:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
    68ee:	240c      	movs	r4, #12
    68f0:	434c      	muls	r4, r1
{
    68f2:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    68f4:	6900      	ldr	r0, [r0, #16]
    68f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    68fa:	2180      	movs	r1, #128	; 0x80
    68fc:	4418      	add	r0, r3
    68fe:	f7ff ff97 	bl	6830 <set_off_state>
	if (err < 0) {
    6902:	2800      	cmp	r0, #0
    6904:	db04      	blt.n	6910 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    6906:	6869      	ldr	r1, [r5, #4]
    6908:	440c      	add	r4, r1
    690a:	6863      	ldr	r3, [r4, #4]
    690c:	4798      	blx	r3
	return 0;
    690e:	2000      	movs	r0, #0
}
    6910:	bd38      	pop	{r3, r4, r5, pc}

00006912 <api_start>:
{
    6912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6916:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
    6918:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    691a:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    691c:	434c      	muls	r4, r1
{
    691e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    6920:	f104 0040 	add.w	r0, r4, #64	; 0x40
    6924:	2180      	movs	r1, #128	; 0x80
    6926:	4428      	add	r0, r5
{
    6928:	4690      	mov	r8, r2
    692a:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    692c:	f7ff ff99 	bl	6862 <set_starting_state>
	if (err < 0) {
    6930:	2800      	cmp	r0, #0
    6932:	db06      	blt.n	6942 <api_start+0x30>
	subdata->cb = cb;
    6934:	4425      	add	r5, r4
	subdata->user_data = user_data;
    6936:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    693a:	6873      	ldr	r3, [r6, #4]
    693c:	591b      	ldr	r3, [r3, r4]
    693e:	4798      	blx	r3
	return 0;
    6940:	2000      	movs	r0, #0
}
    6942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006946 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6946:	6843      	ldr	r3, [r0, #4]
    6948:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    694a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    694e:	600b      	str	r3, [r1, #0]
}
    6950:	2000      	movs	r0, #0
    6952:	4770      	bx	lr

00006954 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6954:	6843      	ldr	r3, [r0, #4]
    6956:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6958:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    695c:	4042      	eors	r2, r0
    695e:	400a      	ands	r2, r1
    6960:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6962:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6966:	2000      	movs	r0, #0
    6968:	4770      	bx	lr

0000696a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    696a:	6843      	ldr	r3, [r0, #4]
    696c:	685b      	ldr	r3, [r3, #4]
}
    696e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6970:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6974:	4770      	bx	lr

00006976 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6976:	6843      	ldr	r3, [r0, #4]
    6978:	685b      	ldr	r3, [r3, #4]
}
    697a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    697c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6980:	4770      	bx	lr

00006982 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6982:	6843      	ldr	r3, [r0, #4]
    6984:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6986:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    698a:	4059      	eors	r1, r3
    p_reg->OUT = value;
    698c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
    6990:	2000      	movs	r0, #0
    6992:	4770      	bx	lr

00006994 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6994:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    6996:	6858      	ldr	r0, [r3, #4]
{
    6998:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    699a:	b158      	cbz	r0, 69b4 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    699c:	2400      	movs	r4, #0
    699e:	4281      	cmp	r1, r0
    69a0:	d113      	bne.n	69ca <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    69a2:	6808      	ldr	r0, [r1, #0]
    69a4:	b95c      	cbnz	r4, 69be <gpio_nrfx_manage_callback+0x2a>
    69a6:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    69a8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    69aa:	42a1      	cmp	r1, r4
    69ac:	d100      	bne.n	69b0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    69ae:	6098      	str	r0, [r3, #8]
	parent->next = child;
    69b0:	2000      	movs	r0, #0
    69b2:	6008      	str	r0, [r1, #0]
	if (set) {
    69b4:	b972      	cbnz	r2, 69d4 <gpio_nrfx_manage_callback+0x40>
	return 0;
    69b6:	2000      	movs	r0, #0
}
    69b8:	bd30      	pop	{r4, r5, pc}
    69ba:	4628      	mov	r0, r5
    69bc:	e7ef      	b.n	699e <gpio_nrfx_manage_callback+0xa>
    69be:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    69c0:	6898      	ldr	r0, [r3, #8]
    69c2:	4281      	cmp	r1, r0
	list->tail = node;
    69c4:	bf08      	it	eq
    69c6:	609c      	streq	r4, [r3, #8]
}
    69c8:	e7f2      	b.n	69b0 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    69ca:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    69cc:	4604      	mov	r4, r0
    69ce:	2d00      	cmp	r5, #0
    69d0:	d1f3      	bne.n	69ba <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    69d2:	b13a      	cbz	r2, 69e4 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    69d4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    69d6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    69d8:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    69da:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    69dc:	2800      	cmp	r0, #0
    69de:	d1ea      	bne.n	69b6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    69e0:	6099      	str	r1, [r3, #8]
}
    69e2:	e7e9      	b.n	69b8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    69e4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    69e8:	e7e6      	b.n	69b8 <gpio_nrfx_manage_callback+0x24>

000069ea <is_regular_addr_valid>:
{
    69ea:	b538      	push	{r3, r4, r5, lr}
    69ec:	4604      	mov	r4, r0
    69ee:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    69f0:	f000 f9c1 	bl	6d76 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    69f4:	4284      	cmp	r4, r0
    69f6:	d209      	bcs.n	6a0c <is_regular_addr_valid+0x22>
    69f8:	2c00      	cmp	r4, #0
    69fa:	db07      	blt.n	6a0c <is_regular_addr_valid+0x22>
	    addr < 0 ||
    69fc:	42a8      	cmp	r0, r5
    69fe:	d305      	bcc.n	6a0c <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    6a00:	1961      	adds	r1, r4, r5
	    len > flash_size ||
    6a02:	4281      	cmp	r1, r0
    6a04:	bf8c      	ite	hi
    6a06:	2000      	movhi	r0, #0
    6a08:	2001      	movls	r0, #1
}
    6a0a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    6a0c:	2000      	movs	r0, #0
    6a0e:	e7fc      	b.n	6a0a <is_regular_addr_valid+0x20>

00006a10 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    6a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    6a14:	6883      	ldr	r3, [r0, #8]
{
    6a16:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    6a18:	695b      	ldr	r3, [r3, #20]
{
    6a1a:	4688      	mov	r8, r1
    6a1c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    6a1e:	a901      	add	r1, sp, #4
    6a20:	aa02      	add	r2, sp, #8
    6a22:	4798      	blx	r3
	off_t off = 0;
    6a24:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    6a26:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    6a28:	4625      	mov	r5, r4
    6a2a:	9b02      	ldr	r3, [sp, #8]
    6a2c:	42ab      	cmp	r3, r5
    6a2e:	d802      	bhi.n	6a36 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    6a30:	b006      	add	sp, #24
    6a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    6a36:	9f01      	ldr	r7, [sp, #4]
    6a38:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    6a3c:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    6a3e:	687b      	ldr	r3, [r7, #4]
    6a40:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6a42:	683a      	ldr	r2, [r7, #0]
    6a44:	42b2      	cmp	r2, r6
    6a46:	eb0a 0306 	add.w	r3, sl, r6
    6a4a:	d802      	bhi.n	6a52 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6a4c:	3501      	adds	r5, #1
    6a4e:	469a      	mov	sl, r3
    6a50:	e7eb      	b.n	6a2a <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    6a52:	4649      	mov	r1, r9
    6a54:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    6a56:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6a58:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6a5a:	47c0      	blx	r8
    6a5c:	2800      	cmp	r0, #0
    6a5e:	d0e7      	beq.n	6a30 <flash_page_foreach+0x20>
			off += page_info.size;
    6a60:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6a62:	3601      	adds	r6, #1
			off += page_info.size;
    6a64:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6a66:	e7ec      	b.n	6a42 <flash_page_foreach+0x32>

00006a68 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6a68:	6843      	ldr	r3, [r0, #4]
    6a6a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6a6c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6a70:	05d1      	lsls	r1, r2, #23
    6a72:	d518      	bpl.n	6aa6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a74:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6a78:	b1aa      	cbz	r2, 6aa6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6a7a:	f04f 0120 	mov.w	r1, #32
    6a7e:	f3ef 8211 	mrs	r2, BASEPRI
    6a82:	f381 8812 	msr	BASEPRI_MAX, r1
    6a86:	f3bf 8f6f 	isb	sy
    6a8a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6a8e:	b131      	cbz	r1, 6a9e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a90:	2100      	movs	r1, #0
    6a92:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6a96:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a9a:	2101      	movs	r1, #1
    6a9c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6a9e:	f382 8811 	msr	BASEPRI, r2
    6aa2:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6aa6:	6842      	ldr	r2, [r0, #4]
    6aa8:	6852      	ldr	r2, [r2, #4]
    6aaa:	06d2      	lsls	r2, r2, #27
    6aac:	d515      	bpl.n	6ada <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    6aae:	f04f 0120 	mov.w	r1, #32
    6ab2:	f3ef 8211 	mrs	r2, BASEPRI
    6ab6:	f381 8812 	msr	BASEPRI_MAX, r1
    6aba:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6abe:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6ac2:	b111      	cbz	r1, 6aca <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6ac4:	2100      	movs	r1, #0
    6ac6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6ace:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    6ad2:	f382 8811 	msr	BASEPRI, r2
    6ad6:	f3bf 8f6f 	isb	sy
}
    6ada:	4770      	bx	lr

00006adc <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    6adc:	6902      	ldr	r2, [r0, #16]
{
    6ade:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6ae0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6ae4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6ae8:	2000      	movs	r0, #0
    6aea:	4770      	bx	lr

00006aec <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6aec:	6843      	ldr	r3, [r0, #4]
    6aee:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6af0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6af4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6af8:	4770      	bx	lr

00006afa <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    6afa:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6afc:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6afe:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6b02:	b940      	cbnz	r0, 6b16 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6b04:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6b06:	0792      	lsls	r2, r2, #30
    6b08:	d406      	bmi.n	6b18 <is_tx_ready+0x1e>
    6b0a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    6b0e:	3800      	subs	r0, #0
    6b10:	bf18      	it	ne
    6b12:	2001      	movne	r0, #1
    6b14:	4770      	bx	lr
    6b16:	2001      	movs	r0, #1
}
    6b18:	4770      	bx	lr

00006b1a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6b1a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6b1c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6b1e:	681b      	ldr	r3, [r3, #0]
    6b20:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6b24:	b148      	cbz	r0, 6b3a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    6b26:	7c52      	ldrb	r2, [r2, #17]
    6b28:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b2a:	2000      	movs	r0, #0
    6b2c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6b30:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b34:	2201      	movs	r2, #1
    6b36:	601a      	str	r2, [r3, #0]
	return 0;
    6b38:	4770      	bx	lr
		return -1;
    6b3a:	f04f 30ff 	mov.w	r0, #4294967295
}
    6b3e:	4770      	bx	lr

00006b40 <fprotect_area>:
}
#endif

int fprotect_area(uint32_t start, size_t length)
{
	return fprotect_set_permission(start, length,
    6b40:	2202      	movs	r2, #2
    6b42:	f7fc bcc3 	b.w	34cc <fprotect_set_permission>

00006b46 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6b46:	f7fd bd53 	b.w	45f0 <nrf_cc3xx_platform_init_no_rng>

00006b4a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6b4a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6b4c:	f7fa ffa4 	bl	1a98 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6b50:	f7ff fe1b 	bl	678a <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6b58:	f7fd bd4a 	b.w	45f0 <nrf_cc3xx_platform_init_no_rng>

00006b5c <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    6b5c:	b538      	push	{r3, r4, r5, lr}
    6b5e:	460c      	mov	r4, r1
    6b60:	4615      	mov	r5, r2
    6b62:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
    6b64:	f7ff fde6 	bl	6734 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6b68:	4621      	mov	r1, r4
    6b6a:	42a9      	cmp	r1, r5
    6b6c:	d101      	bne.n	6b72 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    6b6e:	2001      	movs	r0, #1
}
    6b70:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    6b72:	f811 3b01 	ldrb.w	r3, [r1], #1
    6b76:	4298      	cmp	r0, r3
    6b78:	d0f7      	beq.n	6b6a <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    6b7a:	2000      	movs	r0, #0
    6b7c:	e7f8      	b.n	6b70 <bootutil_buffer_is_erased.part.0+0x14>

00006b7e <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6b7e:	6880      	ldr	r0, [r0, #8]
}
    6b80:	3828      	subs	r0, #40	; 0x28
    6b82:	4770      	bx	lr

00006b84 <boot_magic_compatible_check>:
    switch (tbl_val) {
    6b84:	2804      	cmp	r0, #4
    6b86:	d009      	beq.n	6b9c <boot_magic_compatible_check+0x18>
    6b88:	2805      	cmp	r0, #5
    6b8a:	d103      	bne.n	6b94 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    6b8c:	1e48      	subs	r0, r1, #1
    6b8e:	bf18      	it	ne
    6b90:	2001      	movne	r0, #1
    6b92:	4770      	bx	lr
        return tbl_val == val;
    6b94:	1a43      	subs	r3, r0, r1
    6b96:	4258      	negs	r0, r3
    6b98:	4158      	adcs	r0, r3
    6b9a:	4770      	bx	lr
    switch (tbl_val) {
    6b9c:	2001      	movs	r0, #1
}
    6b9e:	4770      	bx	lr

00006ba0 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    6ba0:	b111      	cbz	r1, 6ba8 <bootutil_buffer_is_erased+0x8>
    6ba2:	b10a      	cbz	r2, 6ba8 <bootutil_buffer_is_erased+0x8>
    6ba4:	f7ff bfda 	b.w	6b5c <bootutil_buffer_is_erased.part.0>
}
    6ba8:	2000      	movs	r0, #0
    6baa:	4770      	bx	lr

00006bac <boot_read_flag>:
{
    6bac:	b538      	push	{r3, r4, r5, lr}
    6bae:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6bb0:	2301      	movs	r3, #1
{
    6bb2:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6bb4:	4622      	mov	r2, r4
{
    6bb6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6bb8:	f7ff fd3a 	bl	6630 <flash_area_read>
    if (rc < 0) {
    6bbc:	2800      	cmp	r0, #0
    6bbe:	db10      	blt.n	6be2 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    6bc0:	2201      	movs	r2, #1
    6bc2:	4621      	mov	r1, r4
    6bc4:	4628      	mov	r0, r5
    6bc6:	f7ff ffeb 	bl	6ba0 <bootutil_buffer_is_erased>
    6bca:	b118      	cbz	r0, 6bd4 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    6bcc:	2303      	movs	r3, #3
    6bce:	7023      	strb	r3, [r4, #0]
    return 0;
    6bd0:	2000      	movs	r0, #0
}
    6bd2:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    6bd4:	7823      	ldrb	r3, [r4, #0]
    6bd6:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
    6bd8:	bf0c      	ite	eq
    6bda:	2301      	moveq	r3, #1
    6bdc:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    6bde:	7023      	strb	r3, [r4, #0]
    6be0:	e7f7      	b.n	6bd2 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    6be2:	2001      	movs	r0, #1
    6be4:	e7f5      	b.n	6bd2 <boot_read_flag+0x26>

00006be6 <boot_write_trailer>:
{
    6be6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6bea:	461d      	mov	r5, r3
    6bec:	4606      	mov	r6, r0
    6bee:	460f      	mov	r7, r1
    6bf0:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    6bf2:	f7ff fd96 	bl	6722 <flash_area_align>
    6bf6:	b2c3      	uxtb	r3, r0
    align = (inlen + align - 1) & ~(align - 1);
    6bf8:	fa55 f480 	uxtab	r4, r5, r0
    6bfc:	3c01      	subs	r4, #1
    6bfe:	425b      	negs	r3, r3
    6c00:	401c      	ands	r4, r3
    6c02:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    6c04:	2c08      	cmp	r4, #8
    6c06:	d81a      	bhi.n	6c3e <boot_write_trailer+0x58>
    erased_val = flash_area_erased_val(fap);
    6c08:	4630      	mov	r0, r6
    6c0a:	f7ff fd93 	bl	6734 <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    6c0e:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    6c10:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    6c12:	4641      	mov	r1, r8
    6c14:	4668      	mov	r0, sp
    6c16:	f7ff fdeb 	bl	67f0 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    6c1a:	1b62      	subs	r2, r4, r5
    6c1c:	4649      	mov	r1, r9
    6c1e:	eb0d 0005 	add.w	r0, sp, r5
    6c22:	f7ff fdf0 	bl	6806 <memset>
    rc = flash_area_write(fap, off, buf, align);
    6c26:	4623      	mov	r3, r4
    6c28:	466a      	mov	r2, sp
    6c2a:	4639      	mov	r1, r7
    6c2c:	4630      	mov	r0, r6
    6c2e:	f7ff fd1b 	bl	6668 <flash_area_write>
    if (rc != 0) {
    6c32:	3800      	subs	r0, #0
    6c34:	bf18      	it	ne
    6c36:	2001      	movne	r0, #1
}
    6c38:	b003      	add	sp, #12
    6c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6c3e:	f04f 30ff 	mov.w	r0, #4294967295
    6c42:	e7f9      	b.n	6c38 <boot_write_trailer+0x52>

00006c44 <boot_write_trailer_flag>:
{
    6c44:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    6c46:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    6c48:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6c4c:	aa01      	add	r2, sp, #4
    6c4e:	f7ff ffca 	bl	6be6 <boot_write_trailer>
}
    6c52:	b003      	add	sp, #12
    6c54:	f85d fb04 	ldr.w	pc, [sp], #4

00006c58 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6c58:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6c5a:	2201      	movs	r2, #1
    6c5c:	3918      	subs	r1, #24
    6c5e:	f7ff bff1 	b.w	6c44 <boot_write_trailer_flag>

00006c62 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6c62:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    6c64:	3a18      	subs	r2, #24
    6c66:	f7ff bfa1 	b.w	6bac <boot_read_flag>

00006c6a <boot_read_swap_state_by_id>:
{
    6c6a:	b513      	push	{r0, r1, r4, lr}
    6c6c:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    6c6e:	b2c0      	uxtb	r0, r0
    6c70:	a901      	add	r1, sp, #4
    6c72:	f7fa febf 	bl	19f4 <flash_area_open>
    if (rc != 0) {
    6c76:	b950      	cbnz	r0, 6c8e <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    6c78:	4621      	mov	r1, r4
    6c7a:	9801      	ldr	r0, [sp, #4]
    6c7c:	f7fc fc94 	bl	35a8 <boot_read_swap_state>
    6c80:	4604      	mov	r4, r0
    flash_area_close(fap);
    6c82:	9801      	ldr	r0, [sp, #4]
    6c84:	f7ff fcd3 	bl	662e <flash_area_close>
}
    6c88:	4620      	mov	r0, r4
    6c8a:	b002      	add	sp, #8
    6c8c:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6c8e:	2401      	movs	r4, #1
    6c90:	e7fa      	b.n	6c88 <boot_read_swap_state_by_id+0x1e>

00006c92 <boot_write_swap_info>:
{
    6c92:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6c94:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6c98:	6881      	ldr	r1, [r0, #8]
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6c9a:	f88d 2007 	strb.w	r2, [sp, #7]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6c9e:	2301      	movs	r3, #1
    6ca0:	f10d 0207 	add.w	r2, sp, #7
    6ca4:	3928      	subs	r1, #40	; 0x28
    6ca6:	f7ff ff9e 	bl	6be6 <boot_write_trailer>
}
    6caa:	b003      	add	sp, #12
    6cac:	f85d fb04 	ldr.w	pc, [sp], #4

00006cb0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6cb0:	4700      	bx	r0

00006cb2 <nrfx_busy_wait>:
    6cb2:	f000 b87f 	b.w	6db4 <z_impl_k_busy_wait>

00006cb6 <nrfx_clock_enable>:
{
    6cb6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6cb8:	2000      	movs	r0, #0
    6cba:	f7fa ff4f 	bl	1b5c <arch_irq_is_enabled>
    6cbe:	b918      	cbnz	r0, 6cc8 <nrfx_clock_enable+0x12>
}
    6cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6cc4:	f7fa bf3a 	b.w	1b3c <arch_irq_enable>
    6cc8:	bd08      	pop	{r3, pc}

00006cca <nrf_gpio_reconfigure>:
{
    6cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ccc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6cce:	a801      	add	r0, sp, #4
{
    6cd0:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    6cd4:	4617      	mov	r7, r2
    6cd6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6cd8:	f7fc ff4c 	bl	3b74 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6cdc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6cde:	2f00      	cmp	r7, #0
    6ce0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6ce4:	bf14      	ite	ne
    6ce6:	2302      	movne	r3, #2
    6ce8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6cea:	2900      	cmp	r1, #0
    6cec:	bf18      	it	ne
    6cee:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6cf2:	2d00      	cmp	r5, #0
    6cf4:	bf14      	ite	ne
    6cf6:	f04f 0c0c 	movne.w	ip, #12
    6cfa:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6cfe:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6d00:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6d04:	bf14      	ite	ne
    6d06:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    6d0a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6d0e:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6d10:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6d14:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6d18:	bf14      	ite	ne
    6d1a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    6d1e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6d22:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    6d26:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6d2a:	b101      	cbz	r1, 6d2e <nrf_gpio_reconfigure+0x64>
    6d2c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6d2e:	b10f      	cbz	r7, 6d34 <nrf_gpio_reconfigure+0x6a>
    6d30:	783f      	ldrb	r7, [r7, #0]
    6d32:	007f      	lsls	r7, r7, #1
    6d34:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6d36:	b10d      	cbz	r5, 6d3c <nrf_gpio_reconfigure+0x72>
    6d38:	782d      	ldrb	r5, [r5, #0]
    6d3a:	00ad      	lsls	r5, r5, #2
    6d3c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6d3e:	b10c      	cbz	r4, 6d44 <nrf_gpio_reconfigure+0x7a>
    6d40:	7822      	ldrb	r2, [r4, #0]
    6d42:	0214      	lsls	r4, r2, #8
    6d44:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    6d46:	b10e      	cbz	r6, 6d4c <nrf_gpio_reconfigure+0x82>
    6d48:	7836      	ldrb	r6, [r6, #0]
    6d4a:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6d4c:	432c      	orrs	r4, r5
    6d4e:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    6d50:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    6d54:	b003      	add	sp, #12
    6d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d58 <nrf_gpio_cfg_sense_set>:
{
    6d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6d5a:	f10d 030f 	add.w	r3, sp, #15
    6d5e:	9301      	str	r3, [sp, #4]
    6d60:	2300      	movs	r3, #0
{
    6d62:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6d66:	9300      	str	r3, [sp, #0]
    6d68:	461a      	mov	r2, r3
    6d6a:	4619      	mov	r1, r3
    6d6c:	f7ff ffad 	bl	6cca <nrf_gpio_reconfigure>
}
    6d70:	b005      	add	sp, #20
    6d72:	f85d fb04 	ldr.w	pc, [sp], #4

00006d76 <nrfx_nvmc_flash_size_get>:
    6d76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6d7a:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
    6d7c:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    6d7e:	4350      	muls	r0, r2
    6d80:	4770      	bx	lr

00006d82 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    6d82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6d86:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    6d88:	4770      	bx	lr

00006d8a <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    6d8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6d8e:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    6d90:	4770      	bx	lr

00006d92 <z_device_state_init>:
}
    6d92:	4770      	bx	lr

00006d94 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6d94:	b138      	cbz	r0, 6da6 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6d96:	68c3      	ldr	r3, [r0, #12]
    6d98:	8818      	ldrh	r0, [r3, #0]
    6d9a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6d9e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6da2:	4258      	negs	r0, r3
    6da4:	4158      	adcs	r0, r3
}
    6da6:	4770      	bx	lr

00006da8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6da8:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    6dac:	3800      	subs	r0, #0
    6dae:	bf18      	it	ne
    6db0:	2001      	movne	r0, #1
    6db2:	4770      	bx	lr

00006db4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6db4:	b108      	cbz	r0, 6dba <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6db6:	f7fb bac5 	b.w	2344 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6dba:	4770      	bx	lr

00006dbc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6dbc:	4770      	bx	lr

00006dbe <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    6dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dc2:	9f06      	ldr	r7, [sp, #24]
    6dc4:	4604      	mov	r4, r0
    6dc6:	4615      	mov	r5, r2
    6dc8:	461e      	mov	r6, r3
    6dca:	f7fd fddb 	bl	4984 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    6dce:	b938      	cbnz	r0, 6de0 <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    6dd0:	463b      	mov	r3, r7
    6dd2:	4632      	mov	r2, r6
    6dd4:	4629      	mov	r1, r5
    6dd6:	4620      	mov	r0, r4
    6dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ddc:	f7fd bdf8 	b.w	49d0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    6de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006de4 <PkaInitAndMutexLock>:
    6de4:	460a      	mov	r2, r1
    6de6:	2100      	movs	r1, #0
    6de8:	f7fe b87a 	b.w	4ee0 <PkaInitPka>

00006dec <SaSi_PalMemCopy>:
    6dec:	f7ff bd00 	b.w	67f0 <memcpy>

00006df0 <SaSi_PalMemSet>:
    6df0:	f7ff bd09 	b.w	6806 <memset>

00006df4 <SaSi_PalMemSetZero>:
    6df4:	460a      	mov	r2, r1
    6df6:	2100      	movs	r1, #0
    6df8:	f7ff bd05 	b.w	6806 <memset>

00006dfc <CRYS_COMMON_ReverseMemcpy32>:
    6dfc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6e00:	3804      	subs	r0, #4
    6e02:	428a      	cmp	r2, r1
    6e04:	d101      	bne.n	6e0a <CRYS_COMMON_ReverseMemcpy32+0xe>
    6e06:	2000      	movs	r0, #0
    6e08:	4770      	bx	lr
    6e0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    6e0e:	ba1b      	rev	r3, r3
    6e10:	f840 3f04 	str.w	r3, [r0, #4]!
    6e14:	e7f5      	b.n	6e02 <CRYS_COMMON_ReverseMemcpy32+0x6>
	...

00006e18 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6e18:	f7fc bcb6 	b.w	3788 <SystemInit>
