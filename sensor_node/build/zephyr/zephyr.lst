
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_start>:
    c200:	20006360 	.word	0x20006360
    c204:	0001ebad 	.word	0x0001ebad
    c208:	0002cc13 	.word	0x0002cc13
    c20c:	0001eb81 	.word	0x0001eb81
    c210:	0001eb81 	.word	0x0001eb81
    c214:	0001eb81 	.word	0x0001eb81
    c218:	0001eb81 	.word	0x0001eb81
	...
    c22c:	0001e889 	.word	0x0001e889
    c230:	0001eb81 	.word	0x0001eb81
    c234:	00000000 	.word	0x00000000
    c238:	0001e835 	.word	0x0001e835
    c23c:	0001eb81 	.word	0x0001eb81

0000c240 <_irq_vector_table>:
    c240:	0001e941 000308a7 0001e941 0001e941     A.......A...A...
    c250:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c260:	0003086f 0001e941 0001e941 0003088d     o...A...A.......
    c270:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c280:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c290:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c2a0:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c2b0:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c2c0:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c2d0:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c2e0:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...
    c2f0:	0001e941 0001e941 0001e941 0001e941     A...A...A...A...

Disassembly of section text:

0000c300 <__aeabi_drsub>:
    c300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c304:	e002      	b.n	c30c <__adddf3>
    c306:	bf00      	nop

0000c308 <__aeabi_dsub>:
    c308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c30c <__adddf3>:
    c30c:	b530      	push	{r4, r5, lr}
    c30e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c312:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c316:	ea94 0f05 	teq	r4, r5
    c31a:	bf08      	it	eq
    c31c:	ea90 0f02 	teqeq	r0, r2
    c320:	bf1f      	itttt	ne
    c322:	ea54 0c00 	orrsne.w	ip, r4, r0
    c326:	ea55 0c02 	orrsne.w	ip, r5, r2
    c32a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c32e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c332:	f000 80e2 	beq.w	c4fa <__adddf3+0x1ee>
    c336:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c33a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c33e:	bfb8      	it	lt
    c340:	426d      	neglt	r5, r5
    c342:	dd0c      	ble.n	c35e <__adddf3+0x52>
    c344:	442c      	add	r4, r5
    c346:	ea80 0202 	eor.w	r2, r0, r2
    c34a:	ea81 0303 	eor.w	r3, r1, r3
    c34e:	ea82 0000 	eor.w	r0, r2, r0
    c352:	ea83 0101 	eor.w	r1, r3, r1
    c356:	ea80 0202 	eor.w	r2, r0, r2
    c35a:	ea81 0303 	eor.w	r3, r1, r3
    c35e:	2d36      	cmp	r5, #54	; 0x36
    c360:	bf88      	it	hi
    c362:	bd30      	pophi	{r4, r5, pc}
    c364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c368:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c36c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c374:	d002      	beq.n	c37c <__adddf3+0x70>
    c376:	4240      	negs	r0, r0
    c378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c37c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c380:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c388:	d002      	beq.n	c390 <__adddf3+0x84>
    c38a:	4252      	negs	r2, r2
    c38c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c390:	ea94 0f05 	teq	r4, r5
    c394:	f000 80a7 	beq.w	c4e6 <__adddf3+0x1da>
    c398:	f1a4 0401 	sub.w	r4, r4, #1
    c39c:	f1d5 0e20 	rsbs	lr, r5, #32
    c3a0:	db0d      	blt.n	c3be <__adddf3+0xb2>
    c3a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c3a6:	fa22 f205 	lsr.w	r2, r2, r5
    c3aa:	1880      	adds	r0, r0, r2
    c3ac:	f141 0100 	adc.w	r1, r1, #0
    c3b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c3b4:	1880      	adds	r0, r0, r2
    c3b6:	fa43 f305 	asr.w	r3, r3, r5
    c3ba:	4159      	adcs	r1, r3
    c3bc:	e00e      	b.n	c3dc <__adddf3+0xd0>
    c3be:	f1a5 0520 	sub.w	r5, r5, #32
    c3c2:	f10e 0e20 	add.w	lr, lr, #32
    c3c6:	2a01      	cmp	r2, #1
    c3c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c3cc:	bf28      	it	cs
    c3ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c3d2:	fa43 f305 	asr.w	r3, r3, r5
    c3d6:	18c0      	adds	r0, r0, r3
    c3d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c3dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3e0:	d507      	bpl.n	c3f2 <__adddf3+0xe6>
    c3e2:	f04f 0e00 	mov.w	lr, #0
    c3e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c3ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c3ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c3f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c3f6:	d31b      	bcc.n	c430 <__adddf3+0x124>
    c3f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c3fc:	d30c      	bcc.n	c418 <__adddf3+0x10c>
    c3fe:	0849      	lsrs	r1, r1, #1
    c400:	ea5f 0030 	movs.w	r0, r0, rrx
    c404:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c408:	f104 0401 	add.w	r4, r4, #1
    c40c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c414:	f080 809a 	bcs.w	c54c <__adddf3+0x240>
    c418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c41c:	bf08      	it	eq
    c41e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c422:	f150 0000 	adcs.w	r0, r0, #0
    c426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c42a:	ea41 0105 	orr.w	r1, r1, r5
    c42e:	bd30      	pop	{r4, r5, pc}
    c430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c434:	4140      	adcs	r0, r0
    c436:	eb41 0101 	adc.w	r1, r1, r1
    c43a:	3c01      	subs	r4, #1
    c43c:	bf28      	it	cs
    c43e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c442:	d2e9      	bcs.n	c418 <__adddf3+0x10c>
    c444:	f091 0f00 	teq	r1, #0
    c448:	bf04      	itt	eq
    c44a:	4601      	moveq	r1, r0
    c44c:	2000      	moveq	r0, #0
    c44e:	fab1 f381 	clz	r3, r1
    c452:	bf08      	it	eq
    c454:	3320      	addeq	r3, #32
    c456:	f1a3 030b 	sub.w	r3, r3, #11
    c45a:	f1b3 0220 	subs.w	r2, r3, #32
    c45e:	da0c      	bge.n	c47a <__adddf3+0x16e>
    c460:	320c      	adds	r2, #12
    c462:	dd08      	ble.n	c476 <__adddf3+0x16a>
    c464:	f102 0c14 	add.w	ip, r2, #20
    c468:	f1c2 020c 	rsb	r2, r2, #12
    c46c:	fa01 f00c 	lsl.w	r0, r1, ip
    c470:	fa21 f102 	lsr.w	r1, r1, r2
    c474:	e00c      	b.n	c490 <__adddf3+0x184>
    c476:	f102 0214 	add.w	r2, r2, #20
    c47a:	bfd8      	it	le
    c47c:	f1c2 0c20 	rsble	ip, r2, #32
    c480:	fa01 f102 	lsl.w	r1, r1, r2
    c484:	fa20 fc0c 	lsr.w	ip, r0, ip
    c488:	bfdc      	itt	le
    c48a:	ea41 010c 	orrle.w	r1, r1, ip
    c48e:	4090      	lslle	r0, r2
    c490:	1ae4      	subs	r4, r4, r3
    c492:	bfa2      	ittt	ge
    c494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c498:	4329      	orrge	r1, r5
    c49a:	bd30      	popge	{r4, r5, pc}
    c49c:	ea6f 0404 	mvn.w	r4, r4
    c4a0:	3c1f      	subs	r4, #31
    c4a2:	da1c      	bge.n	c4de <__adddf3+0x1d2>
    c4a4:	340c      	adds	r4, #12
    c4a6:	dc0e      	bgt.n	c4c6 <__adddf3+0x1ba>
    c4a8:	f104 0414 	add.w	r4, r4, #20
    c4ac:	f1c4 0220 	rsb	r2, r4, #32
    c4b0:	fa20 f004 	lsr.w	r0, r0, r4
    c4b4:	fa01 f302 	lsl.w	r3, r1, r2
    c4b8:	ea40 0003 	orr.w	r0, r0, r3
    c4bc:	fa21 f304 	lsr.w	r3, r1, r4
    c4c0:	ea45 0103 	orr.w	r1, r5, r3
    c4c4:	bd30      	pop	{r4, r5, pc}
    c4c6:	f1c4 040c 	rsb	r4, r4, #12
    c4ca:	f1c4 0220 	rsb	r2, r4, #32
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	fa01 f304 	lsl.w	r3, r1, r4
    c4d6:	ea40 0003 	orr.w	r0, r0, r3
    c4da:	4629      	mov	r1, r5
    c4dc:	bd30      	pop	{r4, r5, pc}
    c4de:	fa21 f004 	lsr.w	r0, r1, r4
    c4e2:	4629      	mov	r1, r5
    c4e4:	bd30      	pop	{r4, r5, pc}
    c4e6:	f094 0f00 	teq	r4, #0
    c4ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c4ee:	bf06      	itte	eq
    c4f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c4f4:	3401      	addeq	r4, #1
    c4f6:	3d01      	subne	r5, #1
    c4f8:	e74e      	b.n	c398 <__adddf3+0x8c>
    c4fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c4fe:	bf18      	it	ne
    c500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c504:	d029      	beq.n	c55a <__adddf3+0x24e>
    c506:	ea94 0f05 	teq	r4, r5
    c50a:	bf08      	it	eq
    c50c:	ea90 0f02 	teqeq	r0, r2
    c510:	d005      	beq.n	c51e <__adddf3+0x212>
    c512:	ea54 0c00 	orrs.w	ip, r4, r0
    c516:	bf04      	itt	eq
    c518:	4619      	moveq	r1, r3
    c51a:	4610      	moveq	r0, r2
    c51c:	bd30      	pop	{r4, r5, pc}
    c51e:	ea91 0f03 	teq	r1, r3
    c522:	bf1e      	ittt	ne
    c524:	2100      	movne	r1, #0
    c526:	2000      	movne	r0, #0
    c528:	bd30      	popne	{r4, r5, pc}
    c52a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c52e:	d105      	bne.n	c53c <__adddf3+0x230>
    c530:	0040      	lsls	r0, r0, #1
    c532:	4149      	adcs	r1, r1
    c534:	bf28      	it	cs
    c536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c53a:	bd30      	pop	{r4, r5, pc}
    c53c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c540:	bf3c      	itt	cc
    c542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c546:	bd30      	popcc	{r4, r5, pc}
    c548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c54c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c554:	f04f 0000 	mov.w	r0, #0
    c558:	bd30      	pop	{r4, r5, pc}
    c55a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c55e:	bf1a      	itte	ne
    c560:	4619      	movne	r1, r3
    c562:	4610      	movne	r0, r2
    c564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c568:	bf1c      	itt	ne
    c56a:	460b      	movne	r3, r1
    c56c:	4602      	movne	r2, r0
    c56e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c572:	bf06      	itte	eq
    c574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c578:	ea91 0f03 	teqeq	r1, r3
    c57c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c580:	bd30      	pop	{r4, r5, pc}
    c582:	bf00      	nop

0000c584 <__aeabi_ui2d>:
    c584:	f090 0f00 	teq	r0, #0
    c588:	bf04      	itt	eq
    c58a:	2100      	moveq	r1, #0
    c58c:	4770      	bxeq	lr
    c58e:	b530      	push	{r4, r5, lr}
    c590:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c594:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c598:	f04f 0500 	mov.w	r5, #0
    c59c:	f04f 0100 	mov.w	r1, #0
    c5a0:	e750      	b.n	c444 <__adddf3+0x138>
    c5a2:	bf00      	nop

0000c5a4 <__aeabi_i2d>:
    c5a4:	f090 0f00 	teq	r0, #0
    c5a8:	bf04      	itt	eq
    c5aa:	2100      	moveq	r1, #0
    c5ac:	4770      	bxeq	lr
    c5ae:	b530      	push	{r4, r5, lr}
    c5b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c5b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c5b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c5bc:	bf48      	it	mi
    c5be:	4240      	negmi	r0, r0
    c5c0:	f04f 0100 	mov.w	r1, #0
    c5c4:	e73e      	b.n	c444 <__adddf3+0x138>
    c5c6:	bf00      	nop

0000c5c8 <__aeabi_f2d>:
    c5c8:	0042      	lsls	r2, r0, #1
    c5ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c5ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c5d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c5d6:	bf1f      	itttt	ne
    c5d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c5dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c5e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c5e4:	4770      	bxne	lr
    c5e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c5ea:	bf08      	it	eq
    c5ec:	4770      	bxeq	lr
    c5ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c5f2:	bf04      	itt	eq
    c5f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c5f8:	4770      	bxeq	lr
    c5fa:	b530      	push	{r4, r5, lr}
    c5fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c608:	e71c      	b.n	c444 <__adddf3+0x138>
    c60a:	bf00      	nop

0000c60c <__aeabi_ul2d>:
    c60c:	ea50 0201 	orrs.w	r2, r0, r1
    c610:	bf08      	it	eq
    c612:	4770      	bxeq	lr
    c614:	b530      	push	{r4, r5, lr}
    c616:	f04f 0500 	mov.w	r5, #0
    c61a:	e00a      	b.n	c632 <__aeabi_l2d+0x16>

0000c61c <__aeabi_l2d>:
    c61c:	ea50 0201 	orrs.w	r2, r0, r1
    c620:	bf08      	it	eq
    c622:	4770      	bxeq	lr
    c624:	b530      	push	{r4, r5, lr}
    c626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c62a:	d502      	bpl.n	c632 <__aeabi_l2d+0x16>
    c62c:	4240      	negs	r0, r0
    c62e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c632:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c636:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c63a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c63e:	f43f aed8 	beq.w	c3f2 <__adddf3+0xe6>
    c642:	f04f 0203 	mov.w	r2, #3
    c646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c64a:	bf18      	it	ne
    c64c:	3203      	addne	r2, #3
    c64e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c652:	bf18      	it	ne
    c654:	3203      	addne	r2, #3
    c656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c65a:	f1c2 0320 	rsb	r3, r2, #32
    c65e:	fa00 fc03 	lsl.w	ip, r0, r3
    c662:	fa20 f002 	lsr.w	r0, r0, r2
    c666:	fa01 fe03 	lsl.w	lr, r1, r3
    c66a:	ea40 000e 	orr.w	r0, r0, lr
    c66e:	fa21 f102 	lsr.w	r1, r1, r2
    c672:	4414      	add	r4, r2
    c674:	e6bd      	b.n	c3f2 <__adddf3+0xe6>
    c676:	bf00      	nop

0000c678 <__aeabi_dmul>:
    c678:	b570      	push	{r4, r5, r6, lr}
    c67a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c67e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c686:	bf1d      	ittte	ne
    c688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c68c:	ea94 0f0c 	teqne	r4, ip
    c690:	ea95 0f0c 	teqne	r5, ip
    c694:	f000 f8de 	bleq	c854 <__aeabi_dmul+0x1dc>
    c698:	442c      	add	r4, r5
    c69a:	ea81 0603 	eor.w	r6, r1, r3
    c69e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c6a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c6a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c6aa:	bf18      	it	ne
    c6ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c6b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c6b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c6b8:	d038      	beq.n	c72c <__aeabi_dmul+0xb4>
    c6ba:	fba0 ce02 	umull	ip, lr, r0, r2
    c6be:	f04f 0500 	mov.w	r5, #0
    c6c2:	fbe1 e502 	umlal	lr, r5, r1, r2
    c6c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c6ca:	fbe0 e503 	umlal	lr, r5, r0, r3
    c6ce:	f04f 0600 	mov.w	r6, #0
    c6d2:	fbe1 5603 	umlal	r5, r6, r1, r3
    c6d6:	f09c 0f00 	teq	ip, #0
    c6da:	bf18      	it	ne
    c6dc:	f04e 0e01 	orrne.w	lr, lr, #1
    c6e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c6e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c6e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c6ec:	d204      	bcs.n	c6f8 <__aeabi_dmul+0x80>
    c6ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c6f2:	416d      	adcs	r5, r5
    c6f4:	eb46 0606 	adc.w	r6, r6, r6
    c6f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c6fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c70c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c710:	bf88      	it	hi
    c712:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c716:	d81e      	bhi.n	c756 <__aeabi_dmul+0xde>
    c718:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c71c:	bf08      	it	eq
    c71e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c722:	f150 0000 	adcs.w	r0, r0, #0
    c726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c72a:	bd70      	pop	{r4, r5, r6, pc}
    c72c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c730:	ea46 0101 	orr.w	r1, r6, r1
    c734:	ea40 0002 	orr.w	r0, r0, r2
    c738:	ea81 0103 	eor.w	r1, r1, r3
    c73c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c740:	bfc2      	ittt	gt
    c742:	ebd4 050c 	rsbsgt	r5, r4, ip
    c746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c74a:	bd70      	popgt	{r4, r5, r6, pc}
    c74c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c750:	f04f 0e00 	mov.w	lr, #0
    c754:	3c01      	subs	r4, #1
    c756:	f300 80ab 	bgt.w	c8b0 <__aeabi_dmul+0x238>
    c75a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c75e:	bfde      	ittt	le
    c760:	2000      	movle	r0, #0
    c762:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c766:	bd70      	pople	{r4, r5, r6, pc}
    c768:	f1c4 0400 	rsb	r4, r4, #0
    c76c:	3c20      	subs	r4, #32
    c76e:	da35      	bge.n	c7dc <__aeabi_dmul+0x164>
    c770:	340c      	adds	r4, #12
    c772:	dc1b      	bgt.n	c7ac <__aeabi_dmul+0x134>
    c774:	f104 0414 	add.w	r4, r4, #20
    c778:	f1c4 0520 	rsb	r5, r4, #32
    c77c:	fa00 f305 	lsl.w	r3, r0, r5
    c780:	fa20 f004 	lsr.w	r0, r0, r4
    c784:	fa01 f205 	lsl.w	r2, r1, r5
    c788:	ea40 0002 	orr.w	r0, r0, r2
    c78c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c798:	fa21 f604 	lsr.w	r6, r1, r4
    c79c:	eb42 0106 	adc.w	r1, r2, r6
    c7a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c7a4:	bf08      	it	eq
    c7a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c7aa:	bd70      	pop	{r4, r5, r6, pc}
    c7ac:	f1c4 040c 	rsb	r4, r4, #12
    c7b0:	f1c4 0520 	rsb	r5, r4, #32
    c7b4:	fa00 f304 	lsl.w	r3, r0, r4
    c7b8:	fa20 f005 	lsr.w	r0, r0, r5
    c7bc:	fa01 f204 	lsl.w	r2, r1, r4
    c7c0:	ea40 0002 	orr.w	r0, r0, r2
    c7c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c7cc:	f141 0100 	adc.w	r1, r1, #0
    c7d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c7d4:	bf08      	it	eq
    c7d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c7da:	bd70      	pop	{r4, r5, r6, pc}
    c7dc:	f1c4 0520 	rsb	r5, r4, #32
    c7e0:	fa00 f205 	lsl.w	r2, r0, r5
    c7e4:	ea4e 0e02 	orr.w	lr, lr, r2
    c7e8:	fa20 f304 	lsr.w	r3, r0, r4
    c7ec:	fa01 f205 	lsl.w	r2, r1, r5
    c7f0:	ea43 0302 	orr.w	r3, r3, r2
    c7f4:	fa21 f004 	lsr.w	r0, r1, r4
    c7f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7fc:	fa21 f204 	lsr.w	r2, r1, r4
    c800:	ea20 0002 	bic.w	r0, r0, r2
    c804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c80c:	bf08      	it	eq
    c80e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c812:	bd70      	pop	{r4, r5, r6, pc}
    c814:	f094 0f00 	teq	r4, #0
    c818:	d10f      	bne.n	c83a <__aeabi_dmul+0x1c2>
    c81a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c81e:	0040      	lsls	r0, r0, #1
    c820:	eb41 0101 	adc.w	r1, r1, r1
    c824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c828:	bf08      	it	eq
    c82a:	3c01      	subeq	r4, #1
    c82c:	d0f7      	beq.n	c81e <__aeabi_dmul+0x1a6>
    c82e:	ea41 0106 	orr.w	r1, r1, r6
    c832:	f095 0f00 	teq	r5, #0
    c836:	bf18      	it	ne
    c838:	4770      	bxne	lr
    c83a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c83e:	0052      	lsls	r2, r2, #1
    c840:	eb43 0303 	adc.w	r3, r3, r3
    c844:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c848:	bf08      	it	eq
    c84a:	3d01      	subeq	r5, #1
    c84c:	d0f7      	beq.n	c83e <__aeabi_dmul+0x1c6>
    c84e:	ea43 0306 	orr.w	r3, r3, r6
    c852:	4770      	bx	lr
    c854:	ea94 0f0c 	teq	r4, ip
    c858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c85c:	bf18      	it	ne
    c85e:	ea95 0f0c 	teqne	r5, ip
    c862:	d00c      	beq.n	c87e <__aeabi_dmul+0x206>
    c864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c868:	bf18      	it	ne
    c86a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c86e:	d1d1      	bne.n	c814 <__aeabi_dmul+0x19c>
    c870:	ea81 0103 	eor.w	r1, r1, r3
    c874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c878:	f04f 0000 	mov.w	r0, #0
    c87c:	bd70      	pop	{r4, r5, r6, pc}
    c87e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c882:	bf06      	itte	eq
    c884:	4610      	moveq	r0, r2
    c886:	4619      	moveq	r1, r3
    c888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c88c:	d019      	beq.n	c8c2 <__aeabi_dmul+0x24a>
    c88e:	ea94 0f0c 	teq	r4, ip
    c892:	d102      	bne.n	c89a <__aeabi_dmul+0x222>
    c894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c898:	d113      	bne.n	c8c2 <__aeabi_dmul+0x24a>
    c89a:	ea95 0f0c 	teq	r5, ip
    c89e:	d105      	bne.n	c8ac <__aeabi_dmul+0x234>
    c8a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c8a4:	bf1c      	itt	ne
    c8a6:	4610      	movne	r0, r2
    c8a8:	4619      	movne	r1, r3
    c8aa:	d10a      	bne.n	c8c2 <__aeabi_dmul+0x24a>
    c8ac:	ea81 0103 	eor.w	r1, r1, r3
    c8b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c8b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c8b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c8bc:	f04f 0000 	mov.w	r0, #0
    c8c0:	bd70      	pop	{r4, r5, r6, pc}
    c8c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c8c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c8ca:	bd70      	pop	{r4, r5, r6, pc}

0000c8cc <__aeabi_ddiv>:
    c8cc:	b570      	push	{r4, r5, r6, lr}
    c8ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c8d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c8d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c8da:	bf1d      	ittte	ne
    c8dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c8e0:	ea94 0f0c 	teqne	r4, ip
    c8e4:	ea95 0f0c 	teqne	r5, ip
    c8e8:	f000 f8a7 	bleq	ca3a <__aeabi_ddiv+0x16e>
    c8ec:	eba4 0405 	sub.w	r4, r4, r5
    c8f0:	ea81 0e03 	eor.w	lr, r1, r3
    c8f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c8f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c8fc:	f000 8088 	beq.w	ca10 <__aeabi_ddiv+0x144>
    c900:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c904:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c90c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c910:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c91c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c920:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c924:	429d      	cmp	r5, r3
    c926:	bf08      	it	eq
    c928:	4296      	cmpeq	r6, r2
    c92a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c92e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c932:	d202      	bcs.n	c93a <__aeabi_ddiv+0x6e>
    c934:	085b      	lsrs	r3, r3, #1
    c936:	ea4f 0232 	mov.w	r2, r2, rrx
    c93a:	1ab6      	subs	r6, r6, r2
    c93c:	eb65 0503 	sbc.w	r5, r5, r3
    c940:	085b      	lsrs	r3, r3, #1
    c942:	ea4f 0232 	mov.w	r2, r2, rrx
    c946:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c94a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c94e:	ebb6 0e02 	subs.w	lr, r6, r2
    c952:	eb75 0e03 	sbcs.w	lr, r5, r3
    c956:	bf22      	ittt	cs
    c958:	1ab6      	subcs	r6, r6, r2
    c95a:	4675      	movcs	r5, lr
    c95c:	ea40 000c 	orrcs.w	r0, r0, ip
    c960:	085b      	lsrs	r3, r3, #1
    c962:	ea4f 0232 	mov.w	r2, r2, rrx
    c966:	ebb6 0e02 	subs.w	lr, r6, r2
    c96a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c96e:	bf22      	ittt	cs
    c970:	1ab6      	subcs	r6, r6, r2
    c972:	4675      	movcs	r5, lr
    c974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c978:	085b      	lsrs	r3, r3, #1
    c97a:	ea4f 0232 	mov.w	r2, r2, rrx
    c97e:	ebb6 0e02 	subs.w	lr, r6, r2
    c982:	eb75 0e03 	sbcs.w	lr, r5, r3
    c986:	bf22      	ittt	cs
    c988:	1ab6      	subcs	r6, r6, r2
    c98a:	4675      	movcs	r5, lr
    c98c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c990:	085b      	lsrs	r3, r3, #1
    c992:	ea4f 0232 	mov.w	r2, r2, rrx
    c996:	ebb6 0e02 	subs.w	lr, r6, r2
    c99a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c99e:	bf22      	ittt	cs
    c9a0:	1ab6      	subcs	r6, r6, r2
    c9a2:	4675      	movcs	r5, lr
    c9a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c9a8:	ea55 0e06 	orrs.w	lr, r5, r6
    c9ac:	d018      	beq.n	c9e0 <__aeabi_ddiv+0x114>
    c9ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c9b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c9b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c9ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c9be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c9c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c9c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c9ca:	d1c0      	bne.n	c94e <__aeabi_ddiv+0x82>
    c9cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c9d0:	d10b      	bne.n	c9ea <__aeabi_ddiv+0x11e>
    c9d2:	ea41 0100 	orr.w	r1, r1, r0
    c9d6:	f04f 0000 	mov.w	r0, #0
    c9da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c9de:	e7b6      	b.n	c94e <__aeabi_ddiv+0x82>
    c9e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c9e4:	bf04      	itt	eq
    c9e6:	4301      	orreq	r1, r0
    c9e8:	2000      	moveq	r0, #0
    c9ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c9ee:	bf88      	it	hi
    c9f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c9f4:	f63f aeaf 	bhi.w	c756 <__aeabi_dmul+0xde>
    c9f8:	ebb5 0c03 	subs.w	ip, r5, r3
    c9fc:	bf04      	itt	eq
    c9fe:	ebb6 0c02 	subseq.w	ip, r6, r2
    ca02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ca06:	f150 0000 	adcs.w	r0, r0, #0
    ca0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ca0e:	bd70      	pop	{r4, r5, r6, pc}
    ca10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ca14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ca18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    ca1c:	bfc2      	ittt	gt
    ca1e:	ebd4 050c 	rsbsgt	r5, r4, ip
    ca22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ca26:	bd70      	popgt	{r4, r5, r6, pc}
    ca28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ca2c:	f04f 0e00 	mov.w	lr, #0
    ca30:	3c01      	subs	r4, #1
    ca32:	e690      	b.n	c756 <__aeabi_dmul+0xde>
    ca34:	ea45 0e06 	orr.w	lr, r5, r6
    ca38:	e68d      	b.n	c756 <__aeabi_dmul+0xde>
    ca3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ca3e:	ea94 0f0c 	teq	r4, ip
    ca42:	bf08      	it	eq
    ca44:	ea95 0f0c 	teqeq	r5, ip
    ca48:	f43f af3b 	beq.w	c8c2 <__aeabi_dmul+0x24a>
    ca4c:	ea94 0f0c 	teq	r4, ip
    ca50:	d10a      	bne.n	ca68 <__aeabi_ddiv+0x19c>
    ca52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ca56:	f47f af34 	bne.w	c8c2 <__aeabi_dmul+0x24a>
    ca5a:	ea95 0f0c 	teq	r5, ip
    ca5e:	f47f af25 	bne.w	c8ac <__aeabi_dmul+0x234>
    ca62:	4610      	mov	r0, r2
    ca64:	4619      	mov	r1, r3
    ca66:	e72c      	b.n	c8c2 <__aeabi_dmul+0x24a>
    ca68:	ea95 0f0c 	teq	r5, ip
    ca6c:	d106      	bne.n	ca7c <__aeabi_ddiv+0x1b0>
    ca6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ca72:	f43f aefd 	beq.w	c870 <__aeabi_dmul+0x1f8>
    ca76:	4610      	mov	r0, r2
    ca78:	4619      	mov	r1, r3
    ca7a:	e722      	b.n	c8c2 <__aeabi_dmul+0x24a>
    ca7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ca80:	bf18      	it	ne
    ca82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ca86:	f47f aec5 	bne.w	c814 <__aeabi_dmul+0x19c>
    ca8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ca8e:	f47f af0d 	bne.w	c8ac <__aeabi_dmul+0x234>
    ca92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ca96:	f47f aeeb 	bne.w	c870 <__aeabi_dmul+0x1f8>
    ca9a:	e712      	b.n	c8c2 <__aeabi_dmul+0x24a>

0000ca9c <__aeabi_d2uiz>:
    ca9c:	004a      	lsls	r2, r1, #1
    ca9e:	d211      	bcs.n	cac4 <__aeabi_d2uiz+0x28>
    caa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    caa4:	d211      	bcs.n	caca <__aeabi_d2uiz+0x2e>
    caa6:	d50d      	bpl.n	cac4 <__aeabi_d2uiz+0x28>
    caa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    caac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cab0:	d40e      	bmi.n	cad0 <__aeabi_d2uiz+0x34>
    cab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    caba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cabe:	fa23 f002 	lsr.w	r0, r3, r2
    cac2:	4770      	bx	lr
    cac4:	f04f 0000 	mov.w	r0, #0
    cac8:	4770      	bx	lr
    caca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cace:	d102      	bne.n	cad6 <__aeabi_d2uiz+0x3a>
    cad0:	f04f 30ff 	mov.w	r0, #4294967295
    cad4:	4770      	bx	lr
    cad6:	f04f 0000 	mov.w	r0, #0
    cada:	4770      	bx	lr

0000cadc <__aeabi_ldivmod>:
    cadc:	b97b      	cbnz	r3, cafe <__aeabi_ldivmod+0x22>
    cade:	b972      	cbnz	r2, cafe <__aeabi_ldivmod+0x22>
    cae0:	2900      	cmp	r1, #0
    cae2:	bfbe      	ittt	lt
    cae4:	2000      	movlt	r0, #0
    cae6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    caea:	e006      	blt.n	cafa <__aeabi_ldivmod+0x1e>
    caec:	bf08      	it	eq
    caee:	2800      	cmpeq	r0, #0
    caf0:	bf1c      	itt	ne
    caf2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    caf6:	f04f 30ff 	movne.w	r0, #4294967295
    cafa:	f000 b9b7 	b.w	ce6c <__aeabi_idiv0>
    cafe:	f1ad 0c08 	sub.w	ip, sp, #8
    cb02:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cb06:	2900      	cmp	r1, #0
    cb08:	db09      	blt.n	cb1e <__aeabi_ldivmod+0x42>
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	db1a      	blt.n	cb44 <__aeabi_ldivmod+0x68>
    cb0e:	f000 f84d 	bl	cbac <__udivmoddi4>
    cb12:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb1a:	b004      	add	sp, #16
    cb1c:	4770      	bx	lr
    cb1e:	4240      	negs	r0, r0
    cb20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cb24:	2b00      	cmp	r3, #0
    cb26:	db1b      	blt.n	cb60 <__aeabi_ldivmod+0x84>
    cb28:	f000 f840 	bl	cbac <__udivmoddi4>
    cb2c:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb34:	b004      	add	sp, #16
    cb36:	4240      	negs	r0, r0
    cb38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cb3c:	4252      	negs	r2, r2
    cb3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cb42:	4770      	bx	lr
    cb44:	4252      	negs	r2, r2
    cb46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cb4a:	f000 f82f 	bl	cbac <__udivmoddi4>
    cb4e:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb56:	b004      	add	sp, #16
    cb58:	4240      	negs	r0, r0
    cb5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cb5e:	4770      	bx	lr
    cb60:	4252      	negs	r2, r2
    cb62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cb66:	f000 f821 	bl	cbac <__udivmoddi4>
    cb6a:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb72:	b004      	add	sp, #16
    cb74:	4252      	negs	r2, r2
    cb76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cb7a:	4770      	bx	lr

0000cb7c <__aeabi_uldivmod>:
    cb7c:	b953      	cbnz	r3, cb94 <__aeabi_uldivmod+0x18>
    cb7e:	b94a      	cbnz	r2, cb94 <__aeabi_uldivmod+0x18>
    cb80:	2900      	cmp	r1, #0
    cb82:	bf08      	it	eq
    cb84:	2800      	cmpeq	r0, #0
    cb86:	bf1c      	itt	ne
    cb88:	f04f 31ff 	movne.w	r1, #4294967295
    cb8c:	f04f 30ff 	movne.w	r0, #4294967295
    cb90:	f000 b96c 	b.w	ce6c <__aeabi_idiv0>
    cb94:	f1ad 0c08 	sub.w	ip, sp, #8
    cb98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cb9c:	f000 f806 	bl	cbac <__udivmoddi4>
    cba0:	f8dd e004 	ldr.w	lr, [sp, #4]
    cba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cba8:	b004      	add	sp, #16
    cbaa:	4770      	bx	lr

0000cbac <__udivmoddi4>:
    cbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbb0:	9e08      	ldr	r6, [sp, #32]
    cbb2:	460d      	mov	r5, r1
    cbb4:	4604      	mov	r4, r0
    cbb6:	468e      	mov	lr, r1
    cbb8:	2b00      	cmp	r3, #0
    cbba:	f040 8082 	bne.w	ccc2 <__udivmoddi4+0x116>
    cbbe:	428a      	cmp	r2, r1
    cbc0:	4617      	mov	r7, r2
    cbc2:	d946      	bls.n	cc52 <__udivmoddi4+0xa6>
    cbc4:	fab2 f282 	clz	r2, r2
    cbc8:	b14a      	cbz	r2, cbde <__udivmoddi4+0x32>
    cbca:	f1c2 0120 	rsb	r1, r2, #32
    cbce:	fa05 f302 	lsl.w	r3, r5, r2
    cbd2:	fa20 f101 	lsr.w	r1, r0, r1
    cbd6:	4097      	lsls	r7, r2
    cbd8:	ea41 0e03 	orr.w	lr, r1, r3
    cbdc:	4094      	lsls	r4, r2
    cbde:	ea4f 4817 	mov.w	r8, r7, lsr #16
    cbe2:	0c23      	lsrs	r3, r4, #16
    cbe4:	fbbe fcf8 	udiv	ip, lr, r8
    cbe8:	b2b9      	uxth	r1, r7
    cbea:	fb08 ee1c 	mls	lr, r8, ip, lr
    cbee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    cbf2:	fb0c f001 	mul.w	r0, ip, r1
    cbf6:	4298      	cmp	r0, r3
    cbf8:	d90a      	bls.n	cc10 <__udivmoddi4+0x64>
    cbfa:	18fb      	adds	r3, r7, r3
    cbfc:	f10c 35ff 	add.w	r5, ip, #4294967295
    cc00:	f080 8116 	bcs.w	ce30 <__udivmoddi4+0x284>
    cc04:	4298      	cmp	r0, r3
    cc06:	f240 8113 	bls.w	ce30 <__udivmoddi4+0x284>
    cc0a:	f1ac 0c02 	sub.w	ip, ip, #2
    cc0e:	443b      	add	r3, r7
    cc10:	1a1b      	subs	r3, r3, r0
    cc12:	b2a4      	uxth	r4, r4
    cc14:	fbb3 f0f8 	udiv	r0, r3, r8
    cc18:	fb08 3310 	mls	r3, r8, r0, r3
    cc1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cc20:	fb00 f101 	mul.w	r1, r0, r1
    cc24:	42a1      	cmp	r1, r4
    cc26:	d909      	bls.n	cc3c <__udivmoddi4+0x90>
    cc28:	193c      	adds	r4, r7, r4
    cc2a:	f100 33ff 	add.w	r3, r0, #4294967295
    cc2e:	f080 8101 	bcs.w	ce34 <__udivmoddi4+0x288>
    cc32:	42a1      	cmp	r1, r4
    cc34:	f240 80fe 	bls.w	ce34 <__udivmoddi4+0x288>
    cc38:	3802      	subs	r0, #2
    cc3a:	443c      	add	r4, r7
    cc3c:	1a64      	subs	r4, r4, r1
    cc3e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cc42:	2100      	movs	r1, #0
    cc44:	b11e      	cbz	r6, cc4e <__udivmoddi4+0xa2>
    cc46:	40d4      	lsrs	r4, r2
    cc48:	2300      	movs	r3, #0
    cc4a:	e9c6 4300 	strd	r4, r3, [r6]
    cc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc52:	b902      	cbnz	r2, cc56 <__udivmoddi4+0xaa>
    cc54:	deff      	udf	#255	; 0xff
    cc56:	fab2 f282 	clz	r2, r2
    cc5a:	2a00      	cmp	r2, #0
    cc5c:	d14f      	bne.n	ccfe <__udivmoddi4+0x152>
    cc5e:	1bcb      	subs	r3, r1, r7
    cc60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cc64:	fa1f f887 	uxth.w	r8, r7
    cc68:	2101      	movs	r1, #1
    cc6a:	fbb3 fcfe 	udiv	ip, r3, lr
    cc6e:	0c25      	lsrs	r5, r4, #16
    cc70:	fb0e 331c 	mls	r3, lr, ip, r3
    cc74:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cc78:	fb08 f30c 	mul.w	r3, r8, ip
    cc7c:	42ab      	cmp	r3, r5
    cc7e:	d907      	bls.n	cc90 <__udivmoddi4+0xe4>
    cc80:	197d      	adds	r5, r7, r5
    cc82:	f10c 30ff 	add.w	r0, ip, #4294967295
    cc86:	d202      	bcs.n	cc8e <__udivmoddi4+0xe2>
    cc88:	42ab      	cmp	r3, r5
    cc8a:	f200 80e7 	bhi.w	ce5c <__udivmoddi4+0x2b0>
    cc8e:	4684      	mov	ip, r0
    cc90:	1aed      	subs	r5, r5, r3
    cc92:	b2a3      	uxth	r3, r4
    cc94:	fbb5 f0fe 	udiv	r0, r5, lr
    cc98:	fb0e 5510 	mls	r5, lr, r0, r5
    cc9c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    cca0:	fb08 f800 	mul.w	r8, r8, r0
    cca4:	45a0      	cmp	r8, r4
    cca6:	d907      	bls.n	ccb8 <__udivmoddi4+0x10c>
    cca8:	193c      	adds	r4, r7, r4
    ccaa:	f100 33ff 	add.w	r3, r0, #4294967295
    ccae:	d202      	bcs.n	ccb6 <__udivmoddi4+0x10a>
    ccb0:	45a0      	cmp	r8, r4
    ccb2:	f200 80d7 	bhi.w	ce64 <__udivmoddi4+0x2b8>
    ccb6:	4618      	mov	r0, r3
    ccb8:	eba4 0408 	sub.w	r4, r4, r8
    ccbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    ccc0:	e7c0      	b.n	cc44 <__udivmoddi4+0x98>
    ccc2:	428b      	cmp	r3, r1
    ccc4:	d908      	bls.n	ccd8 <__udivmoddi4+0x12c>
    ccc6:	2e00      	cmp	r6, #0
    ccc8:	f000 80af 	beq.w	ce2a <__udivmoddi4+0x27e>
    cccc:	2100      	movs	r1, #0
    ccce:	e9c6 0500 	strd	r0, r5, [r6]
    ccd2:	4608      	mov	r0, r1
    ccd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ccd8:	fab3 f183 	clz	r1, r3
    ccdc:	2900      	cmp	r1, #0
    ccde:	d14b      	bne.n	cd78 <__udivmoddi4+0x1cc>
    cce0:	42ab      	cmp	r3, r5
    cce2:	d302      	bcc.n	ccea <__udivmoddi4+0x13e>
    cce4:	4282      	cmp	r2, r0
    cce6:	f200 80b7 	bhi.w	ce58 <__udivmoddi4+0x2ac>
    ccea:	1a84      	subs	r4, r0, r2
    ccec:	eb65 0303 	sbc.w	r3, r5, r3
    ccf0:	2001      	movs	r0, #1
    ccf2:	469e      	mov	lr, r3
    ccf4:	2e00      	cmp	r6, #0
    ccf6:	d0aa      	beq.n	cc4e <__udivmoddi4+0xa2>
    ccf8:	e9c6 4e00 	strd	r4, lr, [r6]
    ccfc:	e7a7      	b.n	cc4e <__udivmoddi4+0xa2>
    ccfe:	f1c2 0c20 	rsb	ip, r2, #32
    cd02:	fa01 f302 	lsl.w	r3, r1, r2
    cd06:	4097      	lsls	r7, r2
    cd08:	fa20 f00c 	lsr.w	r0, r0, ip
    cd0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cd10:	fa21 fc0c 	lsr.w	ip, r1, ip
    cd14:	4318      	orrs	r0, r3
    cd16:	fbbc f1fe 	udiv	r1, ip, lr
    cd1a:	0c05      	lsrs	r5, r0, #16
    cd1c:	fb0e cc11 	mls	ip, lr, r1, ip
    cd20:	fa1f f887 	uxth.w	r8, r7
    cd24:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    cd28:	fb01 f308 	mul.w	r3, r1, r8
    cd2c:	42ab      	cmp	r3, r5
    cd2e:	fa04 f402 	lsl.w	r4, r4, r2
    cd32:	d909      	bls.n	cd48 <__udivmoddi4+0x19c>
    cd34:	197d      	adds	r5, r7, r5
    cd36:	f101 3cff 	add.w	ip, r1, #4294967295
    cd3a:	f080 808b 	bcs.w	ce54 <__udivmoddi4+0x2a8>
    cd3e:	42ab      	cmp	r3, r5
    cd40:	f240 8088 	bls.w	ce54 <__udivmoddi4+0x2a8>
    cd44:	3902      	subs	r1, #2
    cd46:	443d      	add	r5, r7
    cd48:	1aeb      	subs	r3, r5, r3
    cd4a:	b285      	uxth	r5, r0
    cd4c:	fbb3 f0fe 	udiv	r0, r3, lr
    cd50:	fb0e 3310 	mls	r3, lr, r0, r3
    cd54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cd58:	fb00 f308 	mul.w	r3, r0, r8
    cd5c:	42ab      	cmp	r3, r5
    cd5e:	d907      	bls.n	cd70 <__udivmoddi4+0x1c4>
    cd60:	197d      	adds	r5, r7, r5
    cd62:	f100 3cff 	add.w	ip, r0, #4294967295
    cd66:	d271      	bcs.n	ce4c <__udivmoddi4+0x2a0>
    cd68:	42ab      	cmp	r3, r5
    cd6a:	d96f      	bls.n	ce4c <__udivmoddi4+0x2a0>
    cd6c:	3802      	subs	r0, #2
    cd6e:	443d      	add	r5, r7
    cd70:	1aeb      	subs	r3, r5, r3
    cd72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    cd76:	e778      	b.n	cc6a <__udivmoddi4+0xbe>
    cd78:	f1c1 0c20 	rsb	ip, r1, #32
    cd7c:	408b      	lsls	r3, r1
    cd7e:	fa22 f70c 	lsr.w	r7, r2, ip
    cd82:	431f      	orrs	r7, r3
    cd84:	fa20 f40c 	lsr.w	r4, r0, ip
    cd88:	fa05 f301 	lsl.w	r3, r5, r1
    cd8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cd90:	fa25 f50c 	lsr.w	r5, r5, ip
    cd94:	431c      	orrs	r4, r3
    cd96:	0c23      	lsrs	r3, r4, #16
    cd98:	fbb5 f9fe 	udiv	r9, r5, lr
    cd9c:	fa1f f887 	uxth.w	r8, r7
    cda0:	fb0e 5519 	mls	r5, lr, r9, r5
    cda4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    cda8:	fb09 fa08 	mul.w	sl, r9, r8
    cdac:	45aa      	cmp	sl, r5
    cdae:	fa02 f201 	lsl.w	r2, r2, r1
    cdb2:	fa00 f301 	lsl.w	r3, r0, r1
    cdb6:	d908      	bls.n	cdca <__udivmoddi4+0x21e>
    cdb8:	197d      	adds	r5, r7, r5
    cdba:	f109 30ff 	add.w	r0, r9, #4294967295
    cdbe:	d247      	bcs.n	ce50 <__udivmoddi4+0x2a4>
    cdc0:	45aa      	cmp	sl, r5
    cdc2:	d945      	bls.n	ce50 <__udivmoddi4+0x2a4>
    cdc4:	f1a9 0902 	sub.w	r9, r9, #2
    cdc8:	443d      	add	r5, r7
    cdca:	eba5 050a 	sub.w	r5, r5, sl
    cdce:	b2a4      	uxth	r4, r4
    cdd0:	fbb5 f0fe 	udiv	r0, r5, lr
    cdd4:	fb0e 5510 	mls	r5, lr, r0, r5
    cdd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    cddc:	fb00 f808 	mul.w	r8, r0, r8
    cde0:	45a0      	cmp	r8, r4
    cde2:	d907      	bls.n	cdf4 <__udivmoddi4+0x248>
    cde4:	193c      	adds	r4, r7, r4
    cde6:	f100 35ff 	add.w	r5, r0, #4294967295
    cdea:	d22d      	bcs.n	ce48 <__udivmoddi4+0x29c>
    cdec:	45a0      	cmp	r8, r4
    cdee:	d92b      	bls.n	ce48 <__udivmoddi4+0x29c>
    cdf0:	3802      	subs	r0, #2
    cdf2:	443c      	add	r4, r7
    cdf4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    cdf8:	eba4 0408 	sub.w	r4, r4, r8
    cdfc:	fba0 8902 	umull	r8, r9, r0, r2
    ce00:	454c      	cmp	r4, r9
    ce02:	46c6      	mov	lr, r8
    ce04:	464d      	mov	r5, r9
    ce06:	d319      	bcc.n	ce3c <__udivmoddi4+0x290>
    ce08:	d016      	beq.n	ce38 <__udivmoddi4+0x28c>
    ce0a:	b15e      	cbz	r6, ce24 <__udivmoddi4+0x278>
    ce0c:	ebb3 020e 	subs.w	r2, r3, lr
    ce10:	eb64 0405 	sbc.w	r4, r4, r5
    ce14:	fa04 fc0c 	lsl.w	ip, r4, ip
    ce18:	40ca      	lsrs	r2, r1
    ce1a:	ea4c 0202 	orr.w	r2, ip, r2
    ce1e:	40cc      	lsrs	r4, r1
    ce20:	e9c6 2400 	strd	r2, r4, [r6]
    ce24:	2100      	movs	r1, #0
    ce26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce2a:	4631      	mov	r1, r6
    ce2c:	4630      	mov	r0, r6
    ce2e:	e70e      	b.n	cc4e <__udivmoddi4+0xa2>
    ce30:	46ac      	mov	ip, r5
    ce32:	e6ed      	b.n	cc10 <__udivmoddi4+0x64>
    ce34:	4618      	mov	r0, r3
    ce36:	e701      	b.n	cc3c <__udivmoddi4+0x90>
    ce38:	4543      	cmp	r3, r8
    ce3a:	d2e6      	bcs.n	ce0a <__udivmoddi4+0x25e>
    ce3c:	ebb8 0e02 	subs.w	lr, r8, r2
    ce40:	eb69 0507 	sbc.w	r5, r9, r7
    ce44:	3801      	subs	r0, #1
    ce46:	e7e0      	b.n	ce0a <__udivmoddi4+0x25e>
    ce48:	4628      	mov	r0, r5
    ce4a:	e7d3      	b.n	cdf4 <__udivmoddi4+0x248>
    ce4c:	4660      	mov	r0, ip
    ce4e:	e78f      	b.n	cd70 <__udivmoddi4+0x1c4>
    ce50:	4681      	mov	r9, r0
    ce52:	e7ba      	b.n	cdca <__udivmoddi4+0x21e>
    ce54:	4661      	mov	r1, ip
    ce56:	e777      	b.n	cd48 <__udivmoddi4+0x19c>
    ce58:	4608      	mov	r0, r1
    ce5a:	e74b      	b.n	ccf4 <__udivmoddi4+0x148>
    ce5c:	f1ac 0c02 	sub.w	ip, ip, #2
    ce60:	443d      	add	r5, r7
    ce62:	e715      	b.n	cc90 <__udivmoddi4+0xe4>
    ce64:	3802      	subs	r0, #2
    ce66:	443c      	add	r4, r7
    ce68:	e726      	b.n	ccb8 <__udivmoddi4+0x10c>
    ce6a:	bf00      	nop

0000ce6c <__aeabi_idiv0>:
    ce6c:	4770      	bx	lr
    ce6e:	bf00      	nop

0000ce70 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    ce70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce72:	4615      	mov	r5, r2
    ce74:	4a0a      	ldr	r2, [pc, #40]	; (cea0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    ce76:	461c      	mov	r4, r3
    ce78:	6856      	ldr	r6, [r2, #4]
    ce7a:	b12e      	cbz	r6, ce88 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    ce7c:	b001      	add	sp, #4
    ce7e:	462a      	mov	r2, r5
    ce80:	46b4      	mov	ip, r6
    ce82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ce86:	4760      	bx	ip
    ce88:	2000      	movs	r0, #0
    ce8a:	f88d 0000 	strb.w	r0, [sp]
    ce8e:	4668      	mov	r0, sp
    ce90:	f00b f9da 	bl	18248 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    ce94:	f89d 0000 	ldrb.w	r0, [sp]
    ce98:	1a28      	subs	r0, r5, r0
    ce9a:	7020      	strb	r0, [r4, #0]
    ce9c:	2000      	movs	r0, #0
    ce9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cea0:	20000000 	.word	0x20000000
    cea4:	2800      	cmp	r0, #0
    cea6:	d019      	beq.n	cedc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6c>
    cea8:	7803      	ldrb	r3, [r0, #0]
    ceaa:	4913      	ldr	r1, [pc, #76]	; (cef8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x88>)
    ceac:	4a13      	ldr	r2, [pc, #76]	; (cefc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x8c>)
    ceae:	b113      	cbz	r3, ceb6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x46>
    ceb0:	2b01      	cmp	r3, #1
    ceb2:	d00e      	beq.n	ced2 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x62>
    ceb4:	e011      	b.n	ceda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    ceb6:	7903      	ldrb	r3, [r0, #4]
    ceb8:	2b01      	cmp	r3, #1
    ceba:	d000      	beq.n	cebe <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x4e>
    cebc:	b96b      	cbnz	r3, ceda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cebe:	7943      	ldrb	r3, [r0, #5]
    cec0:	b10b      	cbz	r3, cec6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x56>
    cec2:	2b01      	cmp	r3, #1
    cec4:	d109      	bne.n	ceda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cec6:	6883      	ldr	r3, [r0, #8]
    cec8:	3b64      	subs	r3, #100	; 0x64
    ceca:	428b      	cmp	r3, r1
    cecc:	d205      	bcs.n	ceda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cece:	68c0      	ldr	r0, [r0, #12]
    ced0:	e00e      	b.n	cef0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x80>
    ced2:	7903      	ldrb	r3, [r0, #4]
    ced4:	2b01      	cmp	r3, #1
    ced6:	d002      	beq.n	cede <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    ced8:	b10b      	cbz	r3, cede <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    ceda:	2000      	movs	r0, #0
    cedc:	4770      	bx	lr
    cede:	7943      	ldrb	r3, [r0, #5]
    cee0:	b10b      	cbz	r3, cee6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x76>
    cee2:	2b01      	cmp	r3, #1
    cee4:	d1f9      	bne.n	ceda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cee6:	68c3      	ldr	r3, [r0, #12]
    cee8:	3b64      	subs	r3, #100	; 0x64
    ceea:	428b      	cmp	r3, r1
    ceec:	d2f5      	bcs.n	ceda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    ceee:	6880      	ldr	r0, [r0, #8]
    cef0:	4290      	cmp	r0, r2
    cef2:	d8f2      	bhi.n	ceda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    cef4:	2001      	movs	r0, #1
    cef6:	4770      	bx	lr
    cef8:	0001863d 	.word	0x0001863d
    cefc:	07a11fff 	.word	0x07a11fff
    cf00:	b510      	push	{r4, lr}
    cf02:	4c05      	ldr	r4, [pc, #20]	; (cf18 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0xa8>)
    cf04:	6820      	ldr	r0, [r4, #0]
    cf06:	b110      	cbz	r0, cf0e <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x9e>
    cf08:	4780      	blx	r0
    cf0a:	2000      	movs	r0, #0
    cf0c:	6020      	str	r0, [r4, #0]
    cf0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf12:	f001 bfd5 	b.w	eec0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    cf16:	0000      	.short	0x0000
    cf18:	20000008 	.word	0x20000008

0000cf1c <mpsl_timeslot_session_open>:
    cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf20:	460e      	mov	r6, r1
    cf22:	0005      	movs	r5, r0
    cf24:	d004      	beq.n	cf30 <mpsl_timeslot_session_open+0x14>
    cf26:	f000 f845 	bl	cfb4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cf2a:	4607      	mov	r7, r0
    cf2c:	2400      	movs	r4, #0
    cf2e:	e00a      	b.n	cf46 <mpsl_timeslot_session_open+0x2a>
    cf30:	f06f 0015 	mvn.w	r0, #21
    cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf38:	4620      	mov	r0, r4
    cf3a:	f000 f841 	bl	cfc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cf3e:	7880      	ldrb	r0, [r0, #2]
    cf40:	b138      	cbz	r0, cf52 <mpsl_timeslot_session_open+0x36>
    cf42:	1c64      	adds	r4, r4, #1
    cf44:	b2e4      	uxtb	r4, r4
    cf46:	42bc      	cmp	r4, r7
    cf48:	d3f6      	bcc.n	cf38 <mpsl_timeslot_session_open+0x1c>
    cf4a:	bf00      	nop
    cf4c:	f06f 000b 	mvn.w	r0, #11
    cf50:	e7f0      	b.n	cf34 <mpsl_timeslot_session_open+0x18>
    cf52:	4627      	mov	r7, r4
    cf54:	2cff      	cmp	r4, #255	; 0xff
    cf56:	d0f9      	beq.n	cf4c <mpsl_timeslot_session_open+0x30>
    cf58:	4620      	mov	r0, r4
    cf5a:	f000 f831 	bl	cfc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cf5e:	4604      	mov	r4, r0
    cf60:	f00b fb15 	bl	1858e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    cf64:	7127      	strb	r7, [r4, #4]
    cf66:	4621      	mov	r1, r4
    cf68:	4807      	ldr	r0, [pc, #28]	; (cf88 <mpsl_timeslot_session_open+0x6c>)
    cf6a:	f001 ff81 	bl	ee70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    cf6e:	70e0      	strb	r0, [r4, #3]
    cf70:	2820      	cmp	r0, #32
    cf72:	d005      	beq.n	cf80 <mpsl_timeslot_session_open+0x64>
    cf74:	2001      	movs	r0, #1
    cf76:	60a5      	str	r5, [r4, #8]
    cf78:	70a0      	strb	r0, [r4, #2]
    cf7a:	7037      	strb	r7, [r6, #0]
    cf7c:	2000      	movs	r0, #0
    cf7e:	e7d9      	b.n	cf34 <mpsl_timeslot_session_open+0x18>
    cf80:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cf84:	e7d6      	b.n	cf34 <mpsl_timeslot_session_open+0x18>
    cf86:	0000      	.short	0x0000
    cf88:	000182ef 	.word	0x000182ef

0000cf8c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    cf8c:	b510      	push	{r4, lr}
    cf8e:	0782      	lsls	r2, r0, #30
    cf90:	d002      	beq.n	cf98 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    cf92:	f06f 000d 	mvn.w	r0, #13
    cf96:	bd10      	pop	{r4, pc}
    cf98:	4a05      	ldr	r2, [pc, #20]	; (cfb0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    cf9a:	7011      	strb	r1, [r2, #0]
    cf9c:	6050      	str	r0, [r2, #4]
    cf9e:	b128      	cbz	r0, cfac <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    cfa0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    cfa4:	008a      	lsls	r2, r1, #2
    cfa6:	2100      	movs	r1, #0
    cfa8:	f00b fd77 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cfac:	2000      	movs	r0, #0
    cfae:	bd10      	pop	{r4, pc}
    cfb0:	2000000c 	.word	0x2000000c

0000cfb4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    cfb4:	4801      	ldr	r0, [pc, #4]	; (cfbc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    cfb6:	7800      	ldrb	r0, [r0, #0]
    cfb8:	4770      	bx	lr
    cfba:	0000      	.short	0x0000
    cfbc:	2000000c 	.word	0x2000000c

0000cfc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    cfc0:	4905      	ldr	r1, [pc, #20]	; (cfd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    cfc2:	780a      	ldrb	r2, [r1, #0]
    cfc4:	4290      	cmp	r0, r2
    cfc6:	d301      	bcc.n	cfcc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    cfc8:	2000      	movs	r0, #0
    cfca:	4770      	bx	lr
    cfcc:	6849      	ldr	r1, [r1, #4]
    cfce:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    cfd2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    cfd6:	4770      	bx	lr
    cfd8:	2000000c 	.word	0x2000000c
    cfdc:	b570      	push	{r4, r5, r6, lr}
    cfde:	4605      	mov	r5, r0
    cfe0:	2a20      	cmp	r2, #32
    cfe2:	d027      	beq.n	d034 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    cfe4:	4819      	ldr	r0, [pc, #100]	; (d04c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    cfe6:	4c1a      	ldr	r4, [pc, #104]	; (d050 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    cfe8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    cfec:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    cff0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    cff4:	2920      	cmp	r1, #32
    cff6:	d022      	beq.n	d03e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    cff8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    cffc:	7840      	ldrb	r0, [r0, #1]
    cffe:	784c      	ldrb	r4, [r1, #1]
    d000:	7048      	strb	r0, [r1, #1]
    d002:	4620      	mov	r0, r4
    d004:	4601      	mov	r1, r0
    d006:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    d00a:	4291      	cmp	r1, r2
    d00c:	7005      	strb	r5, [r0, #0]
    d00e:	7840      	ldrb	r0, [r0, #1]
    d010:	d1f8      	bne.n	d004 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    d012:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    d016:	2a20      	cmp	r2, #32
    d018:	bf1a      	itte	ne
    d01a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    d01e:	7054      	strbne	r4, [r2, #1]
    d020:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    d024:	2220      	movs	r2, #32
    d026:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    d02a:	f88c 2001 	strb.w	r2, [ip, #1]
    d02e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    d032:	bd70      	pop	{r4, r5, r6, pc}
    d034:	f240 217e 	movw	r1, #638	; 0x27e
    d038:	2070      	movs	r0, #112	; 0x70
    d03a:	f003 f999 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d03e:	f893 4020 	ldrb.w	r4, [r3, #32]
    d042:	7840      	ldrb	r0, [r0, #1]
    d044:	f883 0020 	strb.w	r0, [r3, #32]
    d048:	e7db      	b.n	d002 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    d04a:	0000      	.short	0x0000
    d04c:	20001264 	.word	0x20001264
    d050:	200012e4 	.word	0x200012e4
    d054:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d058:	b085      	sub	sp, #20
    d05a:	4615      	mov	r5, r2
    d05c:	460c      	mov	r4, r1
    d05e:	f002 f8ef 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d062:	4428      	add	r0, r5
    d064:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d068:	9002      	str	r0, [sp, #8]
    d06a:	6821      	ldr	r1, [r4, #0]
    d06c:	1a08      	subs	r0, r1, r0
    d06e:	0200      	lsls	r0, r0, #8
    d070:	17c1      	asrs	r1, r0, #31
    d072:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d076:	1200      	asrs	r0, r0, #8
    d078:	2800      	cmp	r0, #0
    d07a:	f300 80d5 	bgt.w	d228 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    d07e:	48ac      	ldr	r0, [pc, #688]	; (d330 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    d080:	9f08      	ldr	r7, [sp, #32]
    d082:	4eac      	ldr	r6, [pc, #688]	; (d334 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    d084:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    d088:	9003      	str	r0, [sp, #12]
    d08a:	f890 5020 	ldrb.w	r5, [r0, #32]
    d08e:	2020      	movs	r0, #32
    d090:	46e9      	mov	r9, sp
    d092:	f10d 0804 	add.w	r8, sp, #4
    d096:	f88d 0000 	strb.w	r0, [sp]
    d09a:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    d09e:	2d20      	cmp	r5, #32
    d0a0:	bf18      	it	ne
    d0a2:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    d0a6:	d025      	beq.n	d0f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d0a8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d0ac:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    d0b0:	6822      	ldr	r2, [r4, #0]
    d0b2:	68c1      	ldr	r1, [r0, #12]
    d0b4:	1a51      	subs	r1, r2, r1
    d0b6:	0209      	lsls	r1, r1, #8
    d0b8:	17ca      	asrs	r2, r1, #31
    d0ba:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d0be:	3008      	adds	r0, #8
    d0c0:	1209      	asrs	r1, r1, #8
    d0c2:	d417      	bmi.n	d0f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d0c4:	8961      	ldrh	r1, [r4, #10]
    d0c6:	b171      	cbz	r1, d0e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    d0c8:	8941      	ldrh	r1, [r0, #10]
    d0ca:	b961      	cbnz	r1, d0e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    d0cc:	f000 fdb4 	bl	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d0d0:	f002 f8b6 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d0d4:	6821      	ldr	r1, [r4, #0]
    d0d6:	1a08      	subs	r0, r1, r0
    d0d8:	0200      	lsls	r0, r0, #8
    d0da:	17c1      	asrs	r1, r0, #31
    d0dc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d0e0:	1200      	asrs	r0, r0, #8
    d0e2:	2833      	cmp	r0, #51	; 0x33
    d0e4:	db06      	blt.n	d0f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    d0e6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d0ea:	f889 5000 	strb.w	r5, [r9]
    d0ee:	7845      	ldrb	r5, [r0, #1]
    d0f0:	2d20      	cmp	r5, #32
    d0f2:	d1d9      	bne.n	d0a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    d0f4:	f899 0000 	ldrb.w	r0, [r9]
    d0f8:	f888 0000 	strb.w	r0, [r8]
    d0fc:	46a1      	mov	r9, r4
    d0fe:	2d20      	cmp	r5, #32
    d100:	bf1c      	itt	ne
    d102:	488d      	ldrne	r0, [pc, #564]	; (d338 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d104:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    d108:	f000 810e 	beq.w	d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d10c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d110:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    d114:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d118:	f8da 1008 	ldr.w	r1, [sl, #8]
    d11c:	4648      	mov	r0, r9
    d11e:	1a89      	subs	r1, r1, r2
    d120:	0209      	lsls	r1, r1, #8
    d122:	17ca      	asrs	r2, r1, #31
    d124:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d128:	f10a 0708 	add.w	r7, sl, #8
    d12c:	1209      	asrs	r1, r1, #8
    d12e:	d415      	bmi.n	d15c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    d130:	8979      	ldrh	r1, [r7, #10]
    d132:	2900      	cmp	r1, #0
    d134:	f000 80f8 	beq.w	d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d138:	8941      	ldrh	r1, [r0, #10]
    d13a:	2900      	cmp	r1, #0
    d13c:	f040 80f4 	bne.w	d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d140:	f000 fd7a 	bl	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d144:	f002 f87c 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d148:	6839      	ldr	r1, [r7, #0]
    d14a:	1a08      	subs	r0, r1, r0
    d14c:	0200      	lsls	r0, r0, #8
    d14e:	17c1      	asrs	r1, r0, #31
    d150:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d154:	1200      	asrs	r0, r0, #8
    d156:	2833      	cmp	r0, #51	; 0x33
    d158:	f280 80e6 	bge.w	d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d15c:	f888 5000 	strb.w	r5, [r8]
    d160:	f89a 1014 	ldrb.w	r1, [sl, #20]
    d164:	f899 000c 	ldrb.w	r0, [r9, #12]
    d168:	4281      	cmp	r1, r0
    d16a:	d906      	bls.n	d17a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    d16c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d170:	7845      	ldrb	r5, [r0, #1]
    d172:	2d20      	cmp	r5, #32
    d174:	d1ca      	bne.n	d10c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    d176:	f000 b8d7 	b.w	d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d17a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    d17e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d182:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    d186:	8a68      	ldrh	r0, [r5, #18]
    d188:	68ef      	ldr	r7, [r5, #12]
    d18a:	2800      	cmp	r0, #0
    d18c:	d143      	bne.n	d216 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    d18e:	8960      	ldrh	r0, [r4, #10]
    d190:	b3e8      	cbz	r0, d20e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    d192:	68a8      	ldr	r0, [r5, #8]
    d194:	f00b fa99 	bl	186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d198:	8a69      	ldrh	r1, [r5, #18]
    d19a:	7c2a      	ldrb	r2, [r5, #16]
    d19c:	4b67      	ldr	r3, [pc, #412]	; (d33c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    d19e:	4411      	add	r1, r2
    d1a0:	1c49      	adds	r1, r1, #1
    d1a2:	1842      	adds	r2, r0, r1
    d1a4:	4298      	cmp	r0, r3
    d1a6:	d904      	bls.n	d1b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    d1a8:	f240 6109 	movw	r1, #1545	; 0x609
    d1ac:	2070      	movs	r0, #112	; 0x70
    d1ae:	f003 f8df 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d1b2:	4863      	ldr	r0, [pc, #396]	; (d340 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    d1b4:	4281      	cmp	r1, r0
    d1b6:	dd04      	ble.n	d1c2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    d1b8:	f240 610a 	movw	r1, #1546	; 0x60a
    d1bc:	2070      	movs	r0, #112	; 0x70
    d1be:	f003 f8d7 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d1c2:	4860      	ldr	r0, [pc, #384]	; (d344 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    d1c4:	4281      	cmp	r1, r0
    d1c6:	da04      	bge.n	d1d2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    d1c8:	f240 610b 	movw	r1, #1547	; 0x60b
    d1cc:	2070      	movs	r0, #112	; 0x70
    d1ce:	f003 f8cf 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d1d2:	485d      	ldr	r0, [pc, #372]	; (d348 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    d1d4:	4290      	cmp	r0, r2
    d1d6:	bfdc      	itt	le
    d1d8:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    d1dc:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    d1e0:	dd05      	ble.n	d1ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    d1e2:	2a00      	cmp	r2, #0
    d1e4:	bfbc      	itt	lt
    d1e6:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    d1ea:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    d1ee:	4610      	mov	r0, r2
    d1f0:	f002 f826 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d1f4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    d1f8:	1a78      	subs	r0, r7, r1
    d1fa:	0200      	lsls	r0, r0, #8
    d1fc:	17c2      	asrs	r2, r0, #31
    d1fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    d202:	1200      	asrs	r0, r0, #8
    d204:	2833      	cmp	r0, #51	; 0x33
    d206:	bfb8      	it	lt
    d208:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    d20c:	e000      	b.n	d210 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    d20e:	e002      	b.n	d216 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    d210:	bfb8      	it	lt
    d212:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    d216:	9802      	ldr	r0, [sp, #8]
    d218:	1a38      	subs	r0, r7, r0
    d21a:	0200      	lsls	r0, r0, #8
    d21c:	17c1      	asrs	r1, r0, #31
    d21e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d222:	1200      	asrs	r0, r0, #8
    d224:	2800      	cmp	r0, #0
    d226:	dd03      	ble.n	d230 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    d228:	b009      	add	sp, #36	; 0x24
    d22a:	2000      	movs	r0, #0
    d22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d230:	e9d4 1000 	ldrd	r1, r0, [r4]
    d234:	1a40      	subs	r0, r0, r1
    d236:	4438      	add	r0, r7
    d238:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    d23c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d240:	e9c4 1000 	strd	r1, r0, [r4]
    d244:	9803      	ldr	r0, [sp, #12]
    d246:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d24a:	466f      	mov	r7, sp
    d24c:	f890 5020 	ldrb.w	r5, [r0, #32]
    d250:	2020      	movs	r0, #32
    d252:	f10d 0a04 	add.w	sl, sp, #4
    d256:	f88d 0000 	strb.w	r0, [sp]
    d25a:	2d20      	cmp	r5, #32
    d25c:	bf1c      	itt	ne
    d25e:	4836      	ldrne	r0, [pc, #216]	; (d338 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d260:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    d264:	d025      	beq.n	d2b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d266:	bf00      	nop
    d268:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d26c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    d270:	6822      	ldr	r2, [r4, #0]
    d272:	68c1      	ldr	r1, [r0, #12]
    d274:	1a51      	subs	r1, r2, r1
    d276:	0209      	lsls	r1, r1, #8
    d278:	17ca      	asrs	r2, r1, #31
    d27a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d27e:	3008      	adds	r0, #8
    d280:	1209      	asrs	r1, r1, #8
    d282:	d416      	bmi.n	d2b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d284:	8961      	ldrh	r1, [r4, #10]
    d286:	b171      	cbz	r1, d2a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    d288:	8941      	ldrh	r1, [r0, #10]
    d28a:	b961      	cbnz	r1, d2a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    d28c:	f000 fcd4 	bl	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d290:	f001 ffd6 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d294:	6821      	ldr	r1, [r4, #0]
    d296:	1a08      	subs	r0, r1, r0
    d298:	0200      	lsls	r0, r0, #8
    d29a:	17c1      	asrs	r1, r0, #31
    d29c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d2a0:	1200      	asrs	r0, r0, #8
    d2a2:	2833      	cmp	r0, #51	; 0x33
    d2a4:	db05      	blt.n	d2b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    d2a6:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    d2aa:	703d      	strb	r5, [r7, #0]
    d2ac:	7845      	ldrb	r5, [r0, #1]
    d2ae:	2d20      	cmp	r5, #32
    d2b0:	d1da      	bne.n	d268 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    d2b2:	7838      	ldrb	r0, [r7, #0]
    d2b4:	f88a 0000 	strb.w	r0, [sl]
    d2b8:	4627      	mov	r7, r4
    d2ba:	2d20      	cmp	r5, #32
    d2bc:	bf1c      	itt	ne
    d2be:	481e      	ldrne	r0, [pc, #120]	; (d338 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    d2c0:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    d2c4:	d030      	beq.n	d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d2c6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d2ca:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    d2ce:	6879      	ldr	r1, [r7, #4]
    d2d0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    d2d4:	4638      	mov	r0, r7
    d2d6:	1a51      	subs	r1, r2, r1
    d2d8:	0209      	lsls	r1, r1, #8
    d2da:	17ca      	asrs	r2, r1, #31
    d2dc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d2e0:	f109 0808 	add.w	r8, r9, #8
    d2e4:	1209      	asrs	r1, r1, #8
    d2e6:	d412      	bmi.n	d30e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    d2e8:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    d2ec:	b1e1      	cbz	r1, d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d2ee:	8941      	ldrh	r1, [r0, #10]
    d2f0:	b9d1      	cbnz	r1, d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d2f2:	f000 fca1 	bl	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d2f6:	f001 ffa3 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d2fa:	f8d8 1000 	ldr.w	r1, [r8]
    d2fe:	1a08      	subs	r0, r1, r0
    d300:	0200      	lsls	r0, r0, #8
    d302:	17c1      	asrs	r1, r0, #31
    d304:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d308:	1200      	asrs	r0, r0, #8
    d30a:	2833      	cmp	r0, #51	; 0x33
    d30c:	da0c      	bge.n	d328 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    d30e:	f88a 5000 	strb.w	r5, [sl]
    d312:	f899 0014 	ldrb.w	r0, [r9, #20]
    d316:	7b39      	ldrb	r1, [r7, #12]
    d318:	4288      	cmp	r0, r1
    d31a:	f67f af2e 	bls.w	d17a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    d31e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d322:	7845      	ldrb	r5, [r0, #1]
    d324:	2d20      	cmp	r5, #32
    d326:	d1ce      	bne.n	d2c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    d328:	b009      	add	sp, #36	; 0x24
    d32a:	2001      	movs	r0, #1
    d32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d330:	200012e4 	.word	0x200012e4
    d334:	20000f64 	.word	0x20000f64
    d338:	20001264 	.word	0x20001264
    d33c:	1e847fff 	.word	0x1e847fff
    d340:	07a12000 	.word	0x07a12000
    d344:	f85ee000 	.word	0xf85ee000
    d348:	1e848000 	.word	0x1e848000
    d34c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d350:	4604      	mov	r4, r0
    d352:	483c      	ldr	r0, [pc, #240]	; (d444 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    d354:	460e      	mov	r6, r1
    d356:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    d35a:	4f3b      	ldr	r7, [pc, #236]	; (d448 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    d35c:	f890 5020 	ldrb.w	r5, [r0, #32]
    d360:	2020      	movs	r0, #32
    d362:	4698      	mov	r8, r3
    d364:	4692      	mov	sl, r2
    d366:	7010      	strb	r0, [r2, #0]
    d368:	f507 7940 	add.w	r9, r7, #768	; 0x300
    d36c:	2d20      	cmp	r5, #32
    d36e:	bf18      	it	ne
    d370:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    d374:	d028      	beq.n	d3c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d376:	bf00      	nop
    d378:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    d37c:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    d380:	f100 0108 	add.w	r1, r0, #8
    d384:	68c0      	ldr	r0, [r0, #12]
    d386:	6822      	ldr	r2, [r4, #0]
    d388:	1a10      	subs	r0, r2, r0
    d38a:	0200      	lsls	r0, r0, #8
    d38c:	17c2      	asrs	r2, r0, #31
    d38e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    d392:	1200      	asrs	r0, r0, #8
    d394:	d418      	bmi.n	d3c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d396:	8960      	ldrh	r0, [r4, #10]
    d398:	b178      	cbz	r0, d3ba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    d39a:	8948      	ldrh	r0, [r1, #10]
    d39c:	b968      	cbnz	r0, d3ba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    d39e:	4608      	mov	r0, r1
    d3a0:	f000 fc4a 	bl	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d3a4:	f001 ff4c 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d3a8:	6821      	ldr	r1, [r4, #0]
    d3aa:	1a08      	subs	r0, r1, r0
    d3ac:	0200      	lsls	r0, r0, #8
    d3ae:	17c1      	asrs	r1, r0, #31
    d3b0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d3b4:	1200      	asrs	r0, r0, #8
    d3b6:	2833      	cmp	r0, #51	; 0x33
    d3b8:	db06      	blt.n	d3c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    d3ba:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    d3be:	f88a 5000 	strb.w	r5, [sl]
    d3c2:	7845      	ldrb	r5, [r0, #1]
    d3c4:	2d20      	cmp	r5, #32
    d3c6:	d1d7      	bne.n	d378 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    d3c8:	f89a 0000 	ldrb.w	r0, [sl]
    d3cc:	f888 0000 	strb.w	r0, [r8]
    d3d0:	2d20      	cmp	r5, #32
    d3d2:	bf18      	it	ne
    d3d4:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    d3d8:	d030      	beq.n	d43c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d3da:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    d3de:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    d3e2:	6861      	ldr	r1, [r4, #4]
    d3e4:	f8d9 2008 	ldr.w	r2, [r9, #8]
    d3e8:	4620      	mov	r0, r4
    d3ea:	1a51      	subs	r1, r2, r1
    d3ec:	0209      	lsls	r1, r1, #8
    d3ee:	17ca      	asrs	r2, r1, #31
    d3f0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d3f4:	f109 0608 	add.w	r6, r9, #8
    d3f8:	1209      	asrs	r1, r1, #8
    d3fa:	d410      	bmi.n	d41e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    d3fc:	8971      	ldrh	r1, [r6, #10]
    d3fe:	b1e9      	cbz	r1, d43c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d400:	8941      	ldrh	r1, [r0, #10]
    d402:	b9d9      	cbnz	r1, d43c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d404:	f000 fc18 	bl	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d408:	f001 ff1a 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d40c:	6831      	ldr	r1, [r6, #0]
    d40e:	1a08      	subs	r0, r1, r0
    d410:	0200      	lsls	r0, r0, #8
    d412:	17c1      	asrs	r1, r0, #31
    d414:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d418:	1200      	asrs	r0, r0, #8
    d41a:	2833      	cmp	r0, #51	; 0x33
    d41c:	da0e      	bge.n	d43c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    d41e:	f888 5000 	strb.w	r5, [r8]
    d422:	f899 0014 	ldrb.w	r0, [r9, #20]
    d426:	7b21      	ldrb	r1, [r4, #12]
    d428:	4288      	cmp	r0, r1
    d42a:	d802      	bhi.n	d432 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    d42c:	2000      	movs	r0, #0
    d42e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    d432:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    d436:	7845      	ldrb	r5, [r0, #1]
    d438:	2d20      	cmp	r5, #32
    d43a:	d1ce      	bne.n	d3da <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    d43c:	2001      	movs	r0, #1
    d43e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    d442:	0000      	.short	0x0000
    d444:	200012e4 	.word	0x200012e4
    d448:	20000f64 	.word	0x20000f64
    d44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d450:	b098      	sub	sp, #96	; 0x60
    d452:	4616      	mov	r6, r2
    d454:	460d      	mov	r5, r1
    d456:	f04f 0800 	mov.w	r8, #0
    d45a:	f04f 0b01 	mov.w	fp, #1
    d45e:	f002 f971 	bl	f744 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    d462:	4604      	mov	r4, r0
    d464:	2d01      	cmp	r5, #1
    d466:	bf18      	it	ne
    d468:	2d02      	cmpne	r5, #2
    d46a:	d005      	beq.n	d478 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b8>
    d46c:	f640 1194 	movw	r1, #2452	; 0x994
    d470:	f04f 0070 	mov.w	r0, #112	; 0x70
    d474:	f002 ff7c 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d478:	49f9      	ldr	r1, [pc, #996]	; (d860 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a0>)
    d47a:	2001      	movs	r0, #1
    d47c:	6008      	str	r0, [r1, #0]
    d47e:	49f9      	ldr	r1, [pc, #996]	; (d864 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a4>)
    d480:	6889      	ldr	r1, [r1, #8]
    d482:	6008      	str	r0, [r1, #0]
    d484:	2000      	movs	r0, #0
    d486:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    d48a:	900c      	str	r0, [sp, #48]	; 0x30
    d48c:	1e40      	subs	r0, r0, #1
    d48e:	900e      	str	r0, [sp, #56]	; 0x38
    d490:	49f5      	ldr	r1, [pc, #980]	; (d868 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    d492:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    d496:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    d49a:	3308      	adds	r3, #8
    d49c:	af0f      	add	r7, sp, #60	; 0x3c
    d49e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d4a0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    d4a4:	a80f      	add	r0, sp, #60	; 0x3c
    d4a6:	f000 fbc7 	bl	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    d4aa:	900d      	str	r0, [sp, #52]	; 0x34
    d4ac:	48ee      	ldr	r0, [pc, #952]	; (d868 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    d4ae:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    d4b2:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    d4b6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    d4ba:	f1b9 0f00 	cmp.w	r9, #0
    d4be:	bf14      	ite	ne
    d4c0:	f04f 0a01 	movne.w	sl, #1
    d4c4:	f04f 0a00 	moveq.w	sl, #0
    d4c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d4ca:	9014      	str	r0, [sp, #80]	; 0x50
    d4cc:	f1ba 0f00 	cmp.w	sl, #0
    d4d0:	d009      	beq.n	d4e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    d4d2:	48e6      	ldr	r0, [pc, #920]	; (d86c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d4d4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    d4d8:	b928      	cbnz	r0, d4e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    d4da:	f002 fed1 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    d4de:	2800      	cmp	r0, #0
    d4e0:	bf08      	it	eq
    d4e2:	2701      	moveq	r7, #1
    d4e4:	d000      	beq.n	d4e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    d4e6:	2700      	movs	r7, #0
    d4e8:	48e1      	ldr	r0, [pc, #900]	; (d870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d4ea:	2200      	movs	r2, #0
    d4ec:	9215      	str	r2, [sp, #84]	; 0x54
    d4ee:	7800      	ldrb	r0, [r0, #0]
    d4f0:	4616      	mov	r6, r2
    d4f2:	2801      	cmp	r0, #1
    d4f4:	bf18      	it	ne
    d4f6:	2803      	cmpne	r0, #3
    d4f8:	d140      	bne.n	d57c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    d4fa:	48dd      	ldr	r0, [pc, #884]	; (d870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d4fc:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    d500:	eba8 0009 	sub.w	r0, r8, r9
    d504:	9015      	str	r0, [sp, #84]	; 0x54
    d506:	45c8      	cmp	r8, r9
    d508:	d938      	bls.n	d57c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    d50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d50c:	ea6f 0108 	mvn.w	r1, r8
    d510:	f8df e360 	ldr.w	lr, [pc, #864]	; d874 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>
    d514:	1858      	adds	r0, r3, r1
    d516:	f10d 0c0c 	add.w	ip, sp, #12
    d51a:	aa17      	add	r2, sp, #92	; 0x5c
    d51c:	4573      	cmp	r3, lr
    d51e:	d904      	bls.n	d52a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56a>
    d520:	f240 6109 	movw	r1, #1545	; 0x609
    d524:	2070      	movs	r0, #112	; 0x70
    d526:	f002 ff23 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d52a:	4bd3      	ldr	r3, [pc, #844]	; (d878 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    d52c:	4299      	cmp	r1, r3
    d52e:	dd04      	ble.n	d53a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x57a>
    d530:	f240 610a 	movw	r1, #1546	; 0x60a
    d534:	2070      	movs	r0, #112	; 0x70
    d536:	f002 ff1b 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d53a:	4bd0      	ldr	r3, [pc, #832]	; (d87c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    d53c:	4299      	cmp	r1, r3
    d53e:	da04      	bge.n	d54a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x58a>
    d540:	f240 610b 	movw	r1, #1547	; 0x60b
    d544:	2070      	movs	r0, #112	; 0x70
    d546:	f002 ff13 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d54a:	49cd      	ldr	r1, [pc, #820]	; (d880 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    d54c:	4281      	cmp	r1, r0
    d54e:	bfdc      	itt	le
    d550:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    d554:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    d558:	dd05      	ble.n	d566 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a6>
    d55a:	2800      	cmp	r0, #0
    d55c:	bfbc      	itt	lt
    d55e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    d562:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    d566:	4661      	mov	r1, ip
    d568:	f001 fe86 	bl	f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    d56c:	9803      	ldr	r0, [sp, #12]
    d56e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d570:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d574:	9003      	str	r0, [sp, #12]
    d576:	1a08      	subs	r0, r1, r0
    d578:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    d57c:	2f00      	cmp	r7, #0
    d57e:	bf18      	it	ne
    d580:	2632      	movne	r6, #50	; 0x32
    d582:	d104      	bne.n	d58e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ce>
    d584:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d588:	2800      	cmp	r0, #0
    d58a:	bf18      	it	ne
    d58c:	2602      	movne	r6, #2
    d58e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d592:	d008      	beq.n	d5a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    d594:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d596:	1b00      	subs	r0, r0, r4
    d598:	0200      	lsls	r0, r0, #8
    d59a:	17c1      	asrs	r1, r0, #31
    d59c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d5a0:	1200      	asrs	r0, r0, #8
    d5a2:	2801      	cmp	r0, #1
    d5a4:	da02      	bge.n	d5ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ec>
    d5a6:	2004      	movs	r0, #4
    d5a8:	9918      	ldr	r1, [sp, #96]	; 0x60
    d5aa:	e00b      	b.n	d5c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x604>
    d5ac:	b147      	cbz	r7, d5c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    d5ae:	48af      	ldr	r0, [pc, #700]	; (d86c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d5b0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    d5b4:	b120      	cbz	r0, d5c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    d5b6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d5ba:	1c06      	adds	r6, r0, #0
    d5bc:	bf18      	it	ne
    d5be:	2602      	movne	r6, #2
    d5c0:	4621      	mov	r1, r4
    d5c2:	2001      	movs	r0, #1
    d5c4:	f1b9 0f00 	cmp.w	r9, #0
    d5c8:	d002      	beq.n	d5d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    d5ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d5cc:	2b1e      	cmp	r3, #30
    d5ce:	da02      	bge.n	d5d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    d5d0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    d5d4:	b113      	cbz	r3, d5dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x61c>
    d5d6:	f04f 0b00 	mov.w	fp, #0
    d5da:	1e40      	subs	r0, r0, #1
    d5dc:	1983      	adds	r3, r0, r6
    d5de:	48a4      	ldr	r0, [pc, #656]	; (d870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    d5e0:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    d5e4:	7800      	ldrb	r0, [r0, #0]
    d5e6:	9015      	str	r0, [sp, #84]	; 0x54
    d5e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d5ea:	1a80      	subs	r0, r0, r2
    d5ec:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    d5f0:	ebac 0001 	sub.w	r0, ip, r1
    d5f4:	0200      	lsls	r0, r0, #8
    d5f6:	17c6      	asrs	r6, r0, #31
    d5f8:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    d5fc:	1200      	asrs	r0, r0, #8
    d5fe:	4298      	cmp	r0, r3
    d600:	db18      	blt.n	d634 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x674>
    d602:	2a00      	cmp	r2, #0
    d604:	bf18      	it	ne
    d606:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    d60a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    d60c:	9705      	str	r7, [sp, #20]
    d60e:	2700      	movs	r7, #0
    d610:	f001 ff90 	bl	f534 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d614:	1a30      	subs	r0, r6, r0
    d616:	0200      	lsls	r0, r0, #8
    d618:	17c1      	asrs	r1, r0, #31
    d61a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    d61e:	1200      	asrs	r0, r0, #8
    d620:	283e      	cmp	r0, #62	; 0x3e
    d622:	da3f      	bge.n	d6a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6e4>
    d624:	2d01      	cmp	r5, #1
    d626:	d020      	beq.n	d66a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6aa>
    d628:	1e70      	subs	r0, r6, #1
    d62a:	9905      	ldr	r1, [sp, #20]
    d62c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d630:	b319      	cbz	r1, d67a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ba>
    d632:	e02d      	b.n	d690 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    d634:	b182      	cbz	r2, d658 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    d636:	f1be 0f00 	cmp.w	lr, #0
    d63a:	bf04      	itt	eq
    d63c:	9815      	ldreq	r0, [sp, #84]	; 0x54
    d63e:	2803      	cmpeq	r0, #3
    d640:	d00a      	beq.n	d658 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    d642:	b927      	cbnz	r7, d64e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x68e>
    d644:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d648:	2800      	cmp	r0, #0
    d64a:	bf18      	it	ne
    d64c:	1e9b      	subne	r3, r3, #2
    d64e:	2200      	movs	r2, #0
    d650:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    d654:	4690      	mov	r8, r2
    d656:	e7c7      	b.n	d5e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    d658:	bb07      	cbnz	r7, d69c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d65a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    d65e:	b1e8      	cbz	r0, d69c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d660:	2000      	movs	r0, #0
    d662:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    d666:	1e9b      	subs	r3, r3, #2
    d668:	e7be      	b.n	d5e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    d66a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d66e:	d120      	bne.n	d6b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d670:	f640 110d 	movw	r1, #2317	; 0x90d
    d674:	2070      	movs	r0, #112	; 0x70
    d676:	f002 fe7b 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d67a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d67e:	d007      	beq.n	d690 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    d680:	1a21      	subs	r1, r4, r0
    d682:	0209      	lsls	r1, r1, #8
    d684:	17ca      	asrs	r2, r1, #31
    d686:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    d68a:	1209      	asrs	r1, r1, #8
    d68c:	2904      	cmp	r1, #4
    d68e:	dd03      	ble.n	d698 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d8>
    d690:	4604      	mov	r4, r0
    d692:	f001 ff55 	bl	f540 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    d696:	e00c      	b.n	d6b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d698:	2900      	cmp	r1, #0
    d69a:	dd0a      	ble.n	d6b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    d69c:	b01b      	add	sp, #108	; 0x6c
    d69e:	2000      	movs	r0, #0
    d6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6a4:	1e70      	subs	r0, r6, #1
    d6a6:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    d6aa:	4620      	mov	r0, r4
    d6ac:	f001 ff48 	bl	f540 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    d6b0:	4657      	mov	r7, sl
    d6b2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    d6b6:	d024      	beq.n	d702 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x742>
    d6b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d6ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6bc:	1b00      	subs	r0, r0, r4
    d6be:	1b1b      	subs	r3, r3, r4
    d6c0:	4a70      	ldr	r2, [pc, #448]	; (d884 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    d6c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d6c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d6ca:	4583      	cmp	fp, r0
    d6cc:	bf98      	it	ls
    d6ce:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    d6d2:	d2e3      	bcs.n	d69c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d6d4:	429a      	cmp	r2, r3
    d6d6:	d3e1      	bcc.n	d69c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    d6d8:	4620      	mov	r0, r4
    d6da:	f00a fff6 	bl	186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d6de:	4965      	ldr	r1, [pc, #404]	; (d874 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    d6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d6e2:	1c4b      	adds	r3, r1, #1
    d6e4:	1a16      	subs	r6, r2, r0
    d6e6:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    d6ea:	bf24      	itt	cs
    d6ec:	eba0 0c02 	subcs.w	ip, r0, r2
    d6f0:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    d6f4:	d310      	bcc.n	d718 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    d6f6:	42b1      	cmp	r1, r6
    d6f8:	d208      	bcs.n	d70c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    d6fa:	1a08      	subs	r0, r1, r0
    d6fc:	4410      	add	r0, r2
    d6fe:	1c46      	adds	r6, r0, #1
    d700:	e00a      	b.n	d718 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    d702:	f640 212d 	movw	r1, #2605	; 0xa2d
    d706:	2070      	movs	r0, #112	; 0x70
    d708:	f002 fe32 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d70c:	4561      	cmp	r1, ip
    d70e:	d22c      	bcs.n	d76a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7aa>
    d710:	1a89      	subs	r1, r1, r2
    d712:	4408      	add	r0, r1
    d714:	1c40      	adds	r0, r0, #1
    d716:	4246      	negs	r6, r0
    d718:	4854      	ldr	r0, [pc, #336]	; (d86c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d71a:	7f80      	ldrb	r0, [r0, #30]
    d71c:	b350      	cbz	r0, d774 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b4>
    d71e:	4628      	mov	r0, r5
    d720:	4645      	mov	r5, r8
    d722:	f04f 0b00 	mov.w	fp, #0
    d726:	46d8      	mov	r8, fp
    d728:	2801      	cmp	r0, #1
    d72a:	d005      	beq.n	d738 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x778>
    d72c:	2002      	movs	r0, #2
    d72e:	f002 f95f 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d732:	2001      	movs	r0, #1
    d734:	f002 f95c 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d738:	45a9      	cmp	r9, r5
    d73a:	d227      	bcs.n	d78c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7cc>
    d73c:	eba6 0105 	sub.w	r1, r6, r5
    d740:	f04f 0301 	mov.w	r3, #1
    d744:	f04f 0203 	mov.w	r2, #3
    d748:	f04f 0002 	mov.w	r0, #2
    d74c:	f002 f87c 	bl	f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d750:	2800      	cmp	r0, #0
    d752:	bf08      	it	eq
    d754:	f04f 0801 	moveq.w	r8, #1
    d758:	f1b9 0f00 	cmp.w	r9, #0
    d75c:	d030      	beq.n	d7c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d75e:	2301      	movs	r3, #1
    d760:	eba6 0109 	sub.w	r1, r6, r9
    d764:	2203      	movs	r2, #3
    d766:	4618      	mov	r0, r3
    d768:	e01e      	b.n	d7a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e8>
    d76a:	f640 310c 	movw	r1, #2828	; 0xb0c
    d76e:	2070      	movs	r0, #112	; 0x70
    d770:	f002 fdfe 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d774:	45c1      	cmp	r9, r8
    d776:	bf34      	ite	cc
    d778:	4640      	movcc	r0, r8
    d77a:	4648      	movcs	r0, r9
    d77c:	4458      	add	r0, fp
    d77e:	42b0      	cmp	r0, r6
    d780:	dbcd      	blt.n	d71e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75e>
    d782:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    d786:	2070      	movs	r0, #112	; 0x70
    d788:	f002 fdf2 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d78c:	d910      	bls.n	d7b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f0>
    d78e:	2301      	movs	r3, #1
    d790:	eba6 0109 	sub.w	r1, r6, r9
    d794:	2203      	movs	r2, #3
    d796:	4618      	mov	r0, r3
    d798:	f002 f856 	bl	f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d79c:	b328      	cbz	r0, d7ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d79e:	b17d      	cbz	r5, d7c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d7a0:	1b71      	subs	r1, r6, r5
    d7a2:	2301      	movs	r3, #1
    d7a4:	2203      	movs	r2, #3
    d7a6:	2002      	movs	r0, #2
    d7a8:	f002 f84e 	bl	f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d7ac:	b1e8      	cbz	r0, d7ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d7ae:	e007      	b.n	d7c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d7b0:	ea55 0009 	orrs.w	r0, r5, r9
    d7b4:	d004      	beq.n	d7c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    d7b6:	f640 1177 	movw	r1, #2423	; 0x977
    d7ba:	2070      	movs	r0, #112	; 0x70
    d7bc:	f002 fdd8 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d7c0:	2301      	movs	r3, #1
    d7c2:	2203      	movs	r2, #3
    d7c4:	4631      	mov	r1, r6
    d7c6:	2000      	movs	r0, #0
    d7c8:	f002 f83e 	bl	f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d7cc:	b168      	cbz	r0, d7ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    d7ce:	2501      	movs	r5, #1
    d7d0:	f1b8 0f00 	cmp.w	r8, #0
    d7d4:	d003      	beq.n	d7de <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x81e>
    d7d6:	9814      	ldr	r0, [sp, #80]	; 0x50
    d7d8:	900f      	str	r0, [sp, #60]	; 0x3c
    d7da:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    d7de:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d888 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>
    d7e2:	f1ba 0f00 	cmp.w	sl, #0
    d7e6:	d10e      	bne.n	d806 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x846>
    d7e8:	e009      	b.n	d7fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x83e>
    d7ea:	2002      	movs	r0, #2
    d7ec:	f002 f900 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d7f0:	2001      	movs	r0, #1
    d7f2:	f002 f8fd 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d7f6:	b01b      	add	sp, #108	; 0x6c
    d7f8:	2000      	movs	r0, #0
    d7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7fe:	481b      	ldr	r0, [pc, #108]	; (d86c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d800:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    d804:	b100      	cbz	r0, d808 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x848>
    d806:	b34f      	cbz	r7, d85c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    d808:	f8df a060 	ldr.w	sl, [pc, #96]	; d86c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>
    d80c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    d810:	b118      	cbz	r0, d81a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    d812:	f002 fbdf 	bl	ffd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    d816:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    d81a:	b307      	cbz	r7, d85e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89e>
    d81c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    d820:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    d824:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    d828:	f8c8 0000 	str.w	r0, [r8]
    d82c:	2300      	movs	r3, #0
    d82e:	2203      	movs	r2, #3
    d830:	2005      	movs	r0, #5
    d832:	f002 f809 	bl	f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d836:	b368      	cbz	r0, d894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    d838:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    d83c:	2005      	movs	r0, #5
    d83e:	f002 f9bd 	bl	fbbc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    d842:	4912      	ldr	r1, [pc, #72]	; (d88c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    d844:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    d848:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    d84c:	4910      	ldr	r1, [pc, #64]	; (d890 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    d84e:	12e0      	asrs	r0, r4, #11
    d850:	6008      	str	r0, [r1, #0]
    d852:	4c06      	ldr	r4, [pc, #24]	; (d86c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    d854:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    d858:	b3e8      	cbz	r0, d8d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x916>
    d85a:	e030      	b.n	d8be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    d85c:	e01b      	b.n	d896 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d6>
    d85e:	e01f      	b.n	d8a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    d860:	40000508 	.word	0x40000508
    d864:	20000014 	.word	0x20000014
    d868:	20000f64 	.word	0x20000f64
    d86c:	200012e4 	.word	0x200012e4
    d870:	20000016 	.word	0x20000016
    d874:	1e847fff 	.word	0x1e847fff
    d878:	07a12000 	.word	0x07a12000
    d87c:	f85ee000 	.word	0xf85ee000
    d880:	1e848000 	.word	0x1e848000
    d884:	003fffff 	.word	0x003fffff
    d888:	4001f508 	.word	0x4001f508
    d88c:	4001f098 	.word	0x4001f098
    d890:	4001f504 	.word	0x4001f504
    d894:	e025      	b.n	d8e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x922>
    d896:	f8df a0b8 	ldr.w	sl, [pc, #184]	; d950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x990>
    d89a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    d89e:	b1c8      	cbz	r0, d8d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x914>
    d8a0:	4c2b      	ldr	r4, [pc, #172]	; (d950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x990>)
    d8a2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    d8a6:	b150      	cbz	r0, d8be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    d8a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    d8ac:	f8c8 0000 	str.w	r0, [r8]
    d8b0:	2005      	movs	r0, #5
    d8b2:	f002 f89d 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    d8b6:	f002 fbf5 	bl	100a4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    d8ba:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    d8be:	eba6 0009 	sub.w	r0, r6, r9
    d8c2:	f1a0 0119 	sub.w	r1, r0, #25
    d8c6:	2900      	cmp	r1, #0
    d8c8:	dc15      	bgt.n	d8f6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x936>
    d8ca:	f640 2171 	movw	r1, #2673	; 0xa71
    d8ce:	2070      	movs	r0, #112	; 0x70
    d8d0:	f002 fd4e 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d8d4:	e000      	b.n	d8d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x918>
    d8d6:	e009      	b.n	d8ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x92c>
    d8d8:	f002 fb98 	bl	1000c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    d8dc:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    d8e0:	e79b      	b.n	d81a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    d8e2:	f240 313e 	movw	r1, #830	; 0x33e
    d8e6:	2070      	movs	r0, #112	; 0x70
    d8e8:	f002 fd42 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d8ec:	f002 fbcc 	bl	10088 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    d8f0:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    d8f4:	e7e3      	b.n	d8be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    d8f6:	2203      	movs	r2, #3
    d8f8:	2301      	movs	r3, #1
    d8fa:	4610      	mov	r0, r2
    d8fc:	f001 ffa4 	bl	f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    d900:	b308      	cbz	r0, d946 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x986>
    d902:	4814      	ldr	r0, [pc, #80]	; (d954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x994>)
    d904:	6880      	ldr	r0, [r0, #8]
    d906:	f8c0 b000 	str.w	fp, [r0]
    d90a:	4813      	ldr	r0, [pc, #76]	; (d958 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x998>)
    d90c:	f8c0 b000 	str.w	fp, [r0]
    d910:	ac0c      	add	r4, sp, #48	; 0x30
    d912:	4812      	ldr	r0, [pc, #72]	; (d95c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x99c>)
    d914:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    d918:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    d91c:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    d920:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    d924:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    d928:	ac10      	add	r4, sp, #64	; 0x40
    d92a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    d92e:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    d932:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    d936:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    d93a:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    d93e:	b01b      	add	sp, #108	; 0x6c
    d940:	2001      	movs	r0, #1
    d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d946:	f640 2179 	movw	r1, #2681	; 0xa79
    d94a:	2070      	movs	r0, #112	; 0x70
    d94c:	f002 fd10 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d950:	200012e4 	.word	0x200012e4
    d954:	20000014 	.word	0x20000014
    d958:	40000508 	.word	0x40000508
    d95c:	20000f64 	.word	0x20000f64
    d960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d964:	4606      	mov	r6, r0
    d966:	b083      	sub	sp, #12
    d968:	7808      	ldrb	r0, [r1, #0]
    d96a:	7390      	strb	r0, [r2, #14]
    d96c:	7acf      	ldrb	r7, [r1, #11]
    d96e:	7357      	strb	r7, [r2, #13]
    d970:	7a88      	ldrb	r0, [r1, #10]
    d972:	7310      	strb	r0, [r2, #12]
    d974:	8908      	ldrh	r0, [r1, #8]
    d976:	4614      	mov	r4, r2
    d978:	8150      	strh	r0, [r2, #10]
    d97a:	460d      	mov	r5, r1
    d97c:	780a      	ldrb	r2, [r1, #0]
    d97e:	495f      	ldr	r1, [pc, #380]	; (dafc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb3c>)
    d980:	4699      	mov	r9, r3
    d982:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    d986:	424b      	negs	r3, r1
    d988:	f1ac 0801 	sub.w	r8, ip, #1
    d98c:	b15a      	cbz	r2, d9a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9e6>
    d98e:	43c0      	mvns	r0, r0
    d990:	f8d5 8004 	ldr.w	r8, [r5, #4]
    d994:	f104 0208 	add.w	r2, r4, #8
    d998:	4288      	cmp	r0, r1
    d99a:	dd3d      	ble.n	da18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa58>
    d99c:	f240 610a 	movw	r1, #1546	; 0x60a
    d9a0:	2070      	movs	r0, #112	; 0x70
    d9a2:	f002 fce5 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d9a6:	68ee      	ldr	r6, [r5, #12]
    d9a8:	686d      	ldr	r5, [r5, #4]
    d9aa:	ea6f 0900 	mvn.w	r9, r0
    d9ae:	f104 0208 	add.w	r2, r4, #8
    d9b2:	eb06 0009 	add.w	r0, r6, r9
    d9b6:	4546      	cmp	r6, r8
    d9b8:	d904      	bls.n	d9c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa04>
    d9ba:	f240 6109 	movw	r1, #1545	; 0x609
    d9be:	2070      	movs	r0, #112	; 0x70
    d9c0:	f002 fcd6 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d9c4:	4589      	cmp	r9, r1
    d9c6:	dce9      	bgt.n	d99c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9dc>
    d9c8:	4599      	cmp	r9, r3
    d9ca:	db28      	blt.n	da1e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa5e>
    d9cc:	4584      	cmp	ip, r0
    d9ce:	bfdc      	itt	le
    d9d0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    d9d4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    d9d8:	dd05      	ble.n	d9e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa26>
    d9da:	2800      	cmp	r0, #0
    d9dc:	bfbc      	itt	lt
    d9de:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    d9e2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    d9e6:	4621      	mov	r1, r4
    d9e8:	f001 fc46 	bl	f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    d9ec:	6820      	ldr	r0, [r4, #0]
    d9ee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    d9f2:	1970      	adds	r0, r6, r5
    d9f4:	1c40      	adds	r0, r0, #1
    d9f6:	6021      	str	r1, [r4, #0]
    d9f8:	2f00      	cmp	r7, #0
    d9fa:	bf08      	it	eq
    d9fc:	307a      	addeq	r0, #122	; 0x7a
    d9fe:	d003      	beq.n	da08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa48>
    da00:	2f01      	cmp	r7, #1
    da02:	bf08      	it	eq
    da04:	3048      	addeq	r0, #72	; 0x48
    da06:	d12d      	bne.n	da64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaa4>
    da08:	f001 fc1a 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    da0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    da10:	6060      	str	r0, [r4, #4]
    da12:	b003      	add	sp, #12
    da14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da18:	4601      	mov	r1, r0
    da1a:	4298      	cmp	r0, r3
    da1c:	da04      	bge.n	da28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa68>
    da1e:	f240 610b 	movw	r1, #1547	; 0x60b
    da22:	2070      	movs	r0, #112	; 0x70
    da24:	f002 fca4 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    da28:	4584      	cmp	ip, r0
    da2a:	bfdc      	itt	le
    da2c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    da30:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    da34:	dd05      	ble.n	da42 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa82>
    da36:	2800      	cmp	r0, #0
    da38:	bfbc      	itt	lt
    da3a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    da3e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    da42:	4621      	mov	r1, r4
    da44:	f001 fc18 	bl	f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    da48:	6820      	ldr	r0, [r4, #0]
    da4a:	2f00      	cmp	r7, #0
    da4c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    da50:	f108 0001 	add.w	r0, r8, #1
    da54:	6021      	str	r1, [r4, #0]
    da56:	bf08      	it	eq
    da58:	307a      	addeq	r0, #122	; 0x7a
    da5a:	d008      	beq.n	da6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaae>
    da5c:	2f01      	cmp	r7, #1
    da5e:	bf08      	it	eq
    da60:	3048      	addeq	r0, #72	; 0x48
    da62:	d004      	beq.n	da6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaae>
    da64:	f240 61b1 	movw	r1, #1713	; 0x6b1
    da68:	2070      	movs	r0, #112	; 0x70
    da6a:	f002 fc81 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    da6e:	f001 fbe7 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    da72:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    da76:	6061      	str	r1, [r4, #4]
    da78:	8960      	ldrh	r0, [r4, #10]
    da7a:	aa01      	add	r2, sp, #4
    da7c:	4669      	mov	r1, sp
    da7e:	f001 fbfb 	bl	f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    da82:	481f      	ldr	r0, [pc, #124]	; (db00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb40>)
    da84:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    da88:	2920      	cmp	r1, #32
    da8a:	d023      	beq.n	dad4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb14>
    da8c:	6900      	ldr	r0, [r0, #16]
    da8e:	1d40      	adds	r0, r0, #5
    da90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    da94:	e9d4 2100 	ldrd	r2, r1, [r4]
    da98:	1a89      	subs	r1, r1, r2
    da9a:	6020      	str	r0, [r4, #0]
    da9c:	4408      	add	r0, r1
    da9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    daa2:	6060      	str	r0, [r4, #4]
    daa4:	464b      	mov	r3, r9
    daa6:	4632      	mov	r2, r6
    daa8:	4621      	mov	r1, r4
    daaa:	68e8      	ldr	r0, [r5, #12]
    daac:	f7ff fad2 	bl	d054 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    dab0:	2800      	cmp	r0, #0
    dab2:	bf1c      	itt	ne
    dab4:	b003      	addne	sp, #12
    dab6:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    daba:	e9d4 1000 	ldrd	r1, r0, [r4]
    dabe:	1a40      	subs	r0, r0, r1
    dac0:	4430      	add	r0, r6
    dac2:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    dac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    daca:	e9c4 1000 	strd	r1, r0, [r4]
    dace:	b003      	add	sp, #12
    dad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dad4:	8960      	ldrh	r0, [r4, #10]
    dad6:	f106 0709 	add.w	r7, r6, #9
    dada:	b120      	cbz	r0, dae6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb26>
    dadc:	f002 fbd0 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    dae0:	2800      	cmp	r0, #0
    dae2:	bf08      	it	eq
    dae4:	3732      	addeq	r7, #50	; 0x32
    dae6:	4807      	ldr	r0, [pc, #28]	; (db04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb44>)
    dae8:	7841      	ldrb	r1, [r0, #1]
    daea:	9800      	ldr	r0, [sp, #0]
    daec:	4281      	cmp	r1, r0
    daee:	bf84      	itt	hi
    daf0:	1a08      	subhi	r0, r1, r0
    daf2:	4407      	addhi	r7, r0
    daf4:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    daf8:	e7cc      	b.n	da94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xad4>
    dafa:	0000      	.short	0x0000
    dafc:	07a12000 	.word	0x07a12000
    db00:	200012e4 	.word	0x200012e4
    db04:	20000016 	.word	0x20000016
    db08:	b510      	push	{r4, lr}
    db0a:	4c15      	ldr	r4, [pc, #84]	; (db60 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xba0>)
    db0c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    db10:	2820      	cmp	r0, #32
    db12:	bf18      	it	ne
    db14:	bd10      	popne	{r4, pc}
    db16:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    db1a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    db1e:	f890 1020 	ldrb.w	r1, [r0, #32]
    db22:	2920      	cmp	r1, #32
    db24:	d017      	beq.n	db56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb96>
    db26:	f8df c03c 	ldr.w	ip, [pc, #60]	; db64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xba4>
    db2a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    db2e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    db32:	785b      	ldrb	r3, [r3, #1]
    db34:	f880 3020 	strb.w	r3, [r0, #32]
    db38:	2301      	movs	r3, #1
    db3a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    db3e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    db42:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    db46:	2002      	movs	r0, #2
    db48:	f000 f8b0 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    db4c:	2000      	movs	r0, #0
    db4e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    db52:	77a0      	strb	r0, [r4, #30]
    db54:	bd10      	pop	{r4, pc}
    db56:	f240 318b 	movw	r1, #907	; 0x38b
    db5a:	2070      	movs	r0, #112	; 0x70
    db5c:	f002 fc08 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    db60:	200012e4 	.word	0x200012e4
    db64:	20001264 	.word	0x20001264
    db68:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dc28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc68>
    db70:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    db74:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    db78:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    db7c:	2c20      	cmp	r4, #32
    db7e:	bf08      	it	eq
    db80:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    db84:	f8df b0a4 	ldr.w	fp, [pc, #164]	; dc2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc6c>
    db88:	f8df a0a4 	ldr.w	sl, [pc, #164]	; dc30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc70>
    db8c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    db90:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    db94:	2607      	movs	r6, #7
    db96:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    db9a:	2801      	cmp	r0, #1
    db9c:	d00e      	beq.n	dbbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    db9e:	2804      	cmp	r0, #4
    dba0:	bf08      	it	eq
    dba2:	2602      	moveq	r6, #2
    dba4:	d00a      	beq.n	dbbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    dba6:	2805      	cmp	r0, #5
    dba8:	bf0c      	ite	eq
    dbaa:	2603      	moveq	r6, #3
    dbac:	2806      	cmpne	r0, #6
    dbae:	d005      	beq.n	dbbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    dbb0:	f640 01d9 	movw	r1, #2265	; 0x8d9
    dbb4:	f04f 0070 	mov.w	r0, #112	; 0x70
    dbb8:	f002 fbda 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dbbc:	f1bb 0f00 	cmp.w	fp, #0
    dbc0:	bf18      	it	ne
    dbc2:	f3af 8000 	nopne.w
    dbc6:	f3ef 8010 	mrs	r0, PRIMASK
    dbca:	b672      	cpsid	i
    dbcc:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    dbd0:	784a      	ldrb	r2, [r1, #1]
    dbd2:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    dbd6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    dbda:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    dbde:	42a2      	cmp	r2, r4
    dbe0:	bf04      	itt	eq
    dbe2:	2220      	moveq	r2, #32
    dbe4:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    dbe8:	b1b8      	cbz	r0, dc1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc5a>
    dbea:	462a      	mov	r2, r5
    dbec:	4621      	mov	r1, r4
    dbee:	2001      	movs	r0, #1
    dbf0:	f000 f85c 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    dbf4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dbf8:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    dbfc:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    dc00:	6840      	ldr	r0, [r0, #4]
    dc02:	4631      	mov	r1, r6
    dc04:	4790      	blx	r2
    dc06:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    dc0a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    dc0e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    dc12:	2c20      	cmp	r4, #32
    dc14:	d1bc      	bne.n	db90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbd0>
    dc16:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    dc1a:	4806      	ldr	r0, [pc, #24]	; (dc34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc74>)
    dc1c:	2800      	cmp	r0, #0
    dc1e:	bf18      	it	ne
    dc20:	f3af 8000 	nopne.w
    dc24:	b662      	cpsie	i
    dc26:	e7e0      	b.n	dbea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc2a>
    dc28:	200012e4 	.word	0x200012e4
    dc2c:	00000000 	.word	0x00000000
    dc30:	20001264 	.word	0x20001264
    dc34:	00000000 	.word	0x00000000
    dc38:	b510      	push	{r4, lr}
    dc3a:	4604      	mov	r4, r0
    dc3c:	6800      	ldr	r0, [r0, #0]
    dc3e:	f00a fd44 	bl	186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    dc42:	4602      	mov	r2, r0
    dc44:	8960      	ldrh	r0, [r4, #10]
    dc46:	7a21      	ldrb	r1, [r4, #8]
    dc48:	4b14      	ldr	r3, [pc, #80]	; (dc9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcdc>)
    dc4a:	4408      	add	r0, r1
    dc4c:	1c41      	adds	r1, r0, #1
    dc4e:	1850      	adds	r0, r2, r1
    dc50:	429a      	cmp	r2, r3
    dc52:	d904      	bls.n	dc5e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc9e>
    dc54:	f240 6109 	movw	r1, #1545	; 0x609
    dc58:	2070      	movs	r0, #112	; 0x70
    dc5a:	f002 fb89 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dc5e:	4a10      	ldr	r2, [pc, #64]	; (dca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce0>)
    dc60:	4291      	cmp	r1, r2
    dc62:	dd04      	ble.n	dc6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcae>
    dc64:	f240 610a 	movw	r1, #1546	; 0x60a
    dc68:	2070      	movs	r0, #112	; 0x70
    dc6a:	f002 fb81 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dc6e:	4a0d      	ldr	r2, [pc, #52]	; (dca4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce4>)
    dc70:	4291      	cmp	r1, r2
    dc72:	da04      	bge.n	dc7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcbe>
    dc74:	f240 610b 	movw	r1, #1547	; 0x60b
    dc78:	2070      	movs	r0, #112	; 0x70
    dc7a:	f002 fb79 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dc7e:	490a      	ldr	r1, [pc, #40]	; (dca8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce8>)
    dc80:	4281      	cmp	r1, r0
    dc82:	bfde      	ittt	le
    dc84:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    dc88:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    dc8c:	bd10      	pople	{r4, pc}
    dc8e:	2800      	cmp	r0, #0
    dc90:	bfbc      	itt	lt
    dc92:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    dc96:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    dc9a:	bd10      	pop	{r4, pc}
    dc9c:	1e847fff 	.word	0x1e847fff
    dca0:	07a12000 	.word	0x07a12000
    dca4:	f85ee000 	.word	0xf85ee000
    dca8:	1e848000 	.word	0x1e848000
    dcac:	f8df c054 	ldr.w	ip, [pc, #84]	; dd04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd44>
    dcb0:	b510      	push	{r4, lr}
    dcb2:	2300      	movs	r3, #0
    dcb4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    dcb8:	2807      	cmp	r0, #7
    dcba:	d21e      	bcs.n	dcfa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd3a>
    dcbc:	e8df f000 	tbb	[pc, r0]
    dcc0:	05050505 	.word	0x05050505
    dcc4:	00040404 	.word	0x00040404
    dcc8:	2301      	movs	r3, #1
    dcca:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    dcce:	2b00      	cmp	r3, #0
    dcd0:	bf08      	it	eq
    dcd2:	bd10      	popeq	{r4, pc}
    dcd4:	480c      	ldr	r0, [pc, #48]	; (dd08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd48>)
    dcd6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    dcda:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    dcde:	2820      	cmp	r0, #32
    dce0:	bf0e      	itee	eq
    dce2:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    dce6:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    dcea:	7041      	strbne	r1, [r0, #1]
    dcec:	2020      	movs	r0, #32
    dcee:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    dcf2:	7058      	strb	r0, [r3, #1]
    dcf4:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    dcf8:	bd10      	pop	{r4, pc}
    dcfa:	f44f 7115 	mov.w	r1, #596	; 0x254
    dcfe:	2070      	movs	r0, #112	; 0x70
    dd00:	f002 fb36 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dd04:	20001264 	.word	0x20001264
    dd08:	200012e4 	.word	0x200012e4
    dd0c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd10:	b083      	sub	sp, #12
    dd12:	485c      	ldr	r0, [pc, #368]	; (de84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    dd14:	9904      	ldr	r1, [sp, #16]
    dd16:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    dd1a:	9001      	str	r0, [sp, #4]
    dd1c:	f890 4020 	ldrb.w	r4, [r0, #32]
    dd20:	9803      	ldr	r0, [sp, #12]
    dd22:	4625      	mov	r5, r4
    dd24:	2801      	cmp	r0, #1
    dd26:	bf18      	it	ne
    dd28:	2802      	cmpne	r0, #2
    dd2a:	d005      	beq.n	dd38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd78>
    dd2c:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    dd30:	f04f 0070 	mov.w	r0, #112	; 0x70
    dd34:	f002 fb1c 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    dd38:	2700      	movs	r7, #0
    dd3a:	2d20      	cmp	r5, #32
    dd3c:	d04a      	beq.n	ddd4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe14>
    dd3e:	4851      	ldr	r0, [pc, #324]	; (de84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    dd40:	9100      	str	r1, [sp, #0]
    dd42:	2600      	movs	r6, #0
    dd44:	7f80      	ldrb	r0, [r0, #30]
    dd46:	2800      	cmp	r0, #0
    dd48:	bf08      	it	eq
    dd4a:	2602      	moveq	r6, #2
    dd4c:	f001 fbf2 	bl	f534 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    dd50:	f8df a138 	ldr.w	sl, [pc, #312]	; de8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xecc>
    dd54:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dd58:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    dd5c:	f8df 9128 	ldr.w	r9, [pc, #296]	; de88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec8>
    dd60:	688a      	ldr	r2, [r1, #8]
    dd62:	68c9      	ldr	r1, [r1, #12]
    dd64:	1a12      	subs	r2, r2, r0
    dd66:	1a09      	subs	r1, r1, r0
    dd68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    dd6c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    dd70:	4296      	cmp	r6, r2
    dd72:	bf98      	it	ls
    dd74:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    dd78:	d201      	bcs.n	dd7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdbe>
    dd7a:	4589      	cmp	r9, r1
    dd7c:	d228      	bcs.n	ddd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe10>
    dd7e:	4a44      	ldr	r2, [pc, #272]	; (de90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed0>)
    dd80:	9900      	ldr	r1, [sp, #0]
    dd82:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    dd86:	4622      	mov	r2, r4
    dd88:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    dd8c:	784c      	ldrb	r4, [r1, #1]
    dd8e:	2c20      	cmp	r4, #32
    dd90:	d016      	beq.n	ddc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe00>
    dd92:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dd96:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    dd9a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    dd9e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    dda2:	eba8 0800 	sub.w	r8, r8, r0
    dda6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    ddaa:	ebac 0100 	sub.w	r1, ip, r0
    ddae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ddb2:	4546      	cmp	r6, r8
    ddb4:	bf98      	it	ls
    ddb6:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    ddba:	d2e4      	bcs.n	dd86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc6>
    ddbc:	4589      	cmp	r9, r1
    ddbe:	d3e2      	bcc.n	dd86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc6>
    ddc0:	2a20      	cmp	r2, #32
    ddc2:	d005      	beq.n	ddd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe10>
    ddc4:	2120      	movs	r1, #32
    ddc6:	2004      	movs	r0, #4
    ddc8:	9b00      	ldr	r3, [sp, #0]
    ddca:	f7ff f907 	bl	cfdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    ddce:	4604      	mov	r4, r0
    ddd0:	42ac      	cmp	r4, r5
    ddd2:	d115      	bne.n	de00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe40>
    ddd4:	482f      	ldr	r0, [pc, #188]	; (de94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed4>)
    ddd6:	2800      	cmp	r0, #0
    ddd8:	bf18      	it	ne
    ddda:	f3af 8000 	nopne.w
    ddde:	f001 fba9 	bl	f534 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    dde2:	4c28      	ldr	r4, [pc, #160]	; (de84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    dde4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    dde8:	2920      	cmp	r1, #32
    ddea:	d00d      	beq.n	de08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe48>
    ddec:	68e1      	ldr	r1, [r4, #12]
    ddee:	1c82      	adds	r2, r0, #2
    ddf0:	1a51      	subs	r1, r2, r1
    ddf2:	0209      	lsls	r1, r1, #8
    ddf4:	17ca      	asrs	r2, r1, #31
    ddf6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    ddfa:	1209      	asrs	r1, r1, #8
    ddfc:	2900      	cmp	r1, #0
    ddfe:	dd03      	ble.n	de08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe48>
    de00:	b005      	add	sp, #20
    de02:	2000      	movs	r0, #0
    de04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de08:	2d20      	cmp	r5, #32
    de0a:	d00d      	beq.n	de28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe68>
    de0c:	462a      	mov	r2, r5
    de0e:	9903      	ldr	r1, [sp, #12]
    de10:	f7ff fb1c 	bl	d44c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    de14:	b358      	cbz	r0, de6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xeae>
    de16:	9801      	ldr	r0, [sp, #4]
    de18:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    de1c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    de20:	b005      	add	sp, #20
    de22:	2001      	movs	r0, #1
    de24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de28:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    de2c:	b118      	cbz	r0, de36 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe76>
    de2e:	f002 f8d1 	bl	ffd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    de32:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    de36:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    de3a:	b150      	cbz	r0, de52 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe92>
    de3c:	4916      	ldr	r1, [pc, #88]	; (de98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed8>)
    de3e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    de42:	6008      	str	r0, [r1, #0]
    de44:	2005      	movs	r0, #5
    de46:	f001 fdd3 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    de4a:	f002 f92b 	bl	100a4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    de4e:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    de52:	2004      	movs	r0, #4
    de54:	f001 fdcc 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    de58:	f001 fe38 	bl	facc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    de5c:	2020      	movs	r0, #32
    de5e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    de62:	480e      	ldr	r0, [pc, #56]	; (de9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xedc>)
    de64:	6880      	ldr	r0, [r0, #8]
    de66:	6007      	str	r7, [r0, #0]
    de68:	480d      	ldr	r0, [pc, #52]	; (dea0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xee0>)
    de6a:	6007      	str	r7, [r0, #0]
    de6c:	e7d8      	b.n	de20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe60>
    de6e:	462a      	mov	r2, r5
    de70:	2120      	movs	r1, #32
    de72:	2004      	movs	r0, #4
    de74:	9b04      	ldr	r3, [sp, #16]
    de76:	f7ff f8b1 	bl	cfdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    de7a:	b005      	add	sp, #20
    de7c:	2000      	movs	r0, #0
    de7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de82:	0000      	.short	0x0000
    de84:	200012e4 	.word	0x200012e4
    de88:	003fffff 	.word	0x003fffff
    de8c:	20000f64 	.word	0x20000f64
    de90:	20001264 	.word	0x20001264
    de94:	00000000 	.word	0x00000000
    de98:	4001f508 	.word	0x4001f508
    de9c:	20000014 	.word	0x20000014
    dea0:	40000508 	.word	0x40000508

0000dea4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    dea4:	4906      	ldr	r1, [pc, #24]	; (dec0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    dea6:	b510      	push	{r4, lr}
    dea8:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    deac:	2a20      	cmp	r2, #32
    deae:	bf1c      	itt	ne
    deb0:	7788      	strbne	r0, [r1, #30]
    deb2:	bd10      	popne	{r4, pc}
    deb4:	f240 31ea 	movw	r1, #1002	; 0x3ea
    deb8:	2070      	movs	r0, #112	; 0x70
    deba:	f002 fa59 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    debe:	0000      	.short	0x0000
    dec0:	200012e4 	.word	0x200012e4

0000dec4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    dec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dec8:	4e5b      	ldr	r6, [pc, #364]	; (e038 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    deca:	4681      	mov	r9, r0
    decc:	b085      	sub	sp, #20
    dece:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    ded2:	468a      	mov	sl, r1
    ded4:	2820      	cmp	r0, #32
    ded6:	d04d      	beq.n	df74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    ded8:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    dedc:	f106 040c 	add.w	r4, r6, #12
    dee0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    dee4:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    dee8:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    deec:	2020      	movs	r0, #32
    deee:	f88d 0000 	strb.w	r0, [sp]
    def2:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    def6:	aa03      	add	r2, sp, #12
    def8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    defc:	a901      	add	r1, sp, #4
    defe:	f890 5020 	ldrb.w	r5, [r0, #32]
    df02:	6930      	ldr	r0, [r6, #16]
    df04:	9002      	str	r0, [sp, #8]
    df06:	6830      	ldr	r0, [r6, #0]
    df08:	4448      	add	r0, r9
    df0a:	f001 f9b5 	bl	f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    df0e:	68f8      	ldr	r0, [r7, #12]
    df10:	9901      	ldr	r1, [sp, #4]
    df12:	4a4a      	ldr	r2, [pc, #296]	; (e03c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    df14:	4408      	add	r0, r1
    df16:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    df1a:	4291      	cmp	r1, r2
    df1c:	d82f      	bhi.n	df7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    df1e:	68b9      	ldr	r1, [r7, #8]
    df20:	1a41      	subs	r1, r0, r1
    df22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    df26:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    df2a:	d228      	bcs.n	df7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    df2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    df30:	6060      	str	r0, [r4, #4]
    df32:	4630      	mov	r0, r6
    df34:	f884 a00c 	strb.w	sl, [r4, #12]
    df38:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    df3c:	46ea      	mov	sl, sp
    df3e:	2d20      	cmp	r5, #32
    df40:	bf1c      	itt	ne
    df42:	493f      	ldrne	r1, [pc, #252]	; (e040 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    df44:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    df48:	d03c      	beq.n	dfc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    df4a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    df4e:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    df52:	6860      	ldr	r0, [r4, #4]
    df54:	68ba      	ldr	r2, [r7, #8]
    df56:	4621      	mov	r1, r4
    df58:	1a10      	subs	r0, r2, r0
    df5a:	0200      	lsls	r0, r0, #8
    df5c:	17c2      	asrs	r2, r0, #31
    df5e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    df62:	f107 0608 	add.w	r6, r7, #8
    df66:	1200      	asrs	r0, r0, #8
    df68:	d41b      	bmi.n	dfa2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    df6a:	8970      	ldrh	r0, [r6, #10]
    df6c:	b350      	cbz	r0, dfc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    df6e:	8948      	ldrh	r0, [r1, #10]
    df70:	b148      	cbz	r0, df86 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    df72:	e027      	b.n	dfc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    df74:	f640 317b 	movw	r1, #2939	; 0xb7b
    df78:	2070      	movs	r0, #112	; 0x70
    df7a:	f002 f9f9 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    df7e:	b005      	add	sp, #20
    df80:	2001      	movs	r0, #1
    df82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df86:	4620      	mov	r0, r4
    df88:	f7ff fe56 	bl	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    df8c:	f001 f958 	bl	f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    df90:	6831      	ldr	r1, [r6, #0]
    df92:	1a08      	subs	r0, r1, r0
    df94:	0200      	lsls	r0, r0, #8
    df96:	17c1      	asrs	r1, r0, #31
    df98:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    df9c:	1200      	asrs	r0, r0, #8
    df9e:	2833      	cmp	r0, #51	; 0x33
    dfa0:	da10      	bge.n	dfc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    dfa2:	f88a 5000 	strb.w	r5, [sl]
    dfa6:	7d39      	ldrb	r1, [r7, #20]
    dfa8:	7b20      	ldrb	r0, [r4, #12]
    dfaa:	4281      	cmp	r1, r0
    dfac:	d805      	bhi.n	dfba <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    dfae:	9802      	ldr	r0, [sp, #8]
    dfb0:	6060      	str	r0, [r4, #4]
    dfb2:	b005      	add	sp, #20
    dfb4:	2002      	movs	r0, #2
    dfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfba:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    dfbe:	7845      	ldrb	r5, [r0, #1]
    dfc0:	2d20      	cmp	r5, #32
    dfc2:	d1c2      	bne.n	df4a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    dfc4:	2005      	movs	r0, #5
    dfc6:	f001 fd13 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    dfca:	4c1b      	ldr	r4, [pc, #108]	; (e038 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    dfcc:	f04f 30ff 	mov.w	r0, #4294967295
    dfd0:	60a0      	str	r0, [r4, #8]
    dfd2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    dfd6:	f89d 2000 	ldrb.w	r2, [sp]
    dfda:	2120      	movs	r1, #32
    dfdc:	2a20      	cmp	r2, #32
    dfde:	bf13      	iteet	ne
    dfe0:	2005      	movne	r0, #5
    dfe2:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    dfe6:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    dfea:	f7fe fff7 	blne	cfdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    dfee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    dff2:	4913      	ldr	r1, [pc, #76]	; (e040 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    dff4:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    dff8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    dffc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    e000:	7048      	strb	r0, [r1, #1]
    e002:	6820      	ldr	r0, [r4, #0]
    e004:	4448      	add	r0, r9
    e006:	6020      	str	r0, [r4, #0]
    e008:	2001      	movs	r0, #1
    e00a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    e00e:	7e60      	ldrb	r0, [r4, #25]
    e010:	2801      	cmp	r0, #1
    e012:	d105      	bne.n	e020 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    e014:	6920      	ldr	r0, [r4, #16]
    e016:	1e40      	subs	r0, r0, #1
    e018:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e01c:	f001 fb2e 	bl	f67c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    e020:	f89d 0000 	ldrb.w	r0, [sp]
    e024:	2820      	cmp	r0, #32
    e026:	d003      	beq.n	e030 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    e028:	4806      	ldr	r0, [pc, #24]	; (e044 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    e02a:	7840      	ldrb	r0, [r0, #1]
    e02c:	f002 fa70 	bl	10510 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e030:	b005      	add	sp, #20
    e032:	2000      	movs	r0, #0
    e034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e038:	200012e4 	.word	0x200012e4
    e03c:	07a11f9b 	.word	0x07a11f9b
    e040:	20001264 	.word	0x20001264
    e044:	20000014 	.word	0x20000014

0000e048 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    e048:	4806      	ldr	r0, [pc, #24]	; (e064 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    e04a:	b510      	push	{r4, lr}
    e04c:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    e050:	2920      	cmp	r1, #32
    e052:	bf1c      	itt	ne
    e054:	7e00      	ldrbne	r0, [r0, #24]
    e056:	bd10      	popne	{r4, pc}
    e058:	f640 3174 	movw	r1, #2932	; 0xb74
    e05c:	2070      	movs	r0, #112	; 0x70
    e05e:	f002 f987 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e062:	0000      	.short	0x0000
    e064:	200012e4 	.word	0x200012e4

0000e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    e068:	4602      	mov	r2, r0
    e06a:	4b14      	ldr	r3, [pc, #80]	; (e0bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    e06c:	b510      	push	{r4, lr}
    e06e:	4408      	add	r0, r1
    e070:	429a      	cmp	r2, r3
    e072:	d904      	bls.n	e07e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    e074:	f240 6109 	movw	r1, #1545	; 0x609
    e078:	2070      	movs	r0, #112	; 0x70
    e07a:	f002 f979 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e07e:	4a10      	ldr	r2, [pc, #64]	; (e0c0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    e080:	4291      	cmp	r1, r2
    e082:	dd04      	ble.n	e08e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    e084:	f240 610a 	movw	r1, #1546	; 0x60a
    e088:	2070      	movs	r0, #112	; 0x70
    e08a:	f002 f971 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e08e:	4a0d      	ldr	r2, [pc, #52]	; (e0c4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    e090:	4291      	cmp	r1, r2
    e092:	da04      	bge.n	e09e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    e094:	f240 610b 	movw	r1, #1547	; 0x60b
    e098:	2070      	movs	r0, #112	; 0x70
    e09a:	f002 f969 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e09e:	490a      	ldr	r1, [pc, #40]	; (e0c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    e0a0:	4281      	cmp	r1, r0
    e0a2:	bfde      	ittt	le
    e0a4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    e0a8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    e0ac:	bd10      	pople	{r4, pc}
    e0ae:	2800      	cmp	r0, #0
    e0b0:	bfbc      	itt	lt
    e0b2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    e0b6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    e0ba:	bd10      	pop	{r4, pc}
    e0bc:	1e847fff 	.word	0x1e847fff
    e0c0:	07a12000 	.word	0x07a12000
    e0c4:	f85ee000 	.word	0xf85ee000
    e0c8:	1e848000 	.word	0x1e848000

0000e0cc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    e0cc:	4a10      	ldr	r2, [pc, #64]	; (e110 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    e0ce:	1a0b      	subs	r3, r1, r0
    e0d0:	f102 0c01 	add.w	ip, r2, #1
    e0d4:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    e0d8:	bf3c      	itt	cc
    e0da:	4618      	movcc	r0, r3
    e0dc:	4770      	bxcc	lr
    e0de:	b510      	push	{r4, lr}
    e0e0:	1a44      	subs	r4, r0, r1
    e0e2:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    e0e6:	bf3c      	itt	cc
    e0e8:	4618      	movcc	r0, r3
    e0ea:	bd10      	popcc	{r4, pc}
    e0ec:	429a      	cmp	r2, r3
    e0ee:	d203      	bcs.n	e0f8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    e0f0:	1a10      	subs	r0, r2, r0
    e0f2:	4408      	add	r0, r1
    e0f4:	1c40      	adds	r0, r0, #1
    e0f6:	bd10      	pop	{r4, pc}
    e0f8:	42a2      	cmp	r2, r4
    e0fa:	d204      	bcs.n	e106 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    e0fc:	1a51      	subs	r1, r2, r1
    e0fe:	4408      	add	r0, r1
    e100:	1c40      	adds	r0, r0, #1
    e102:	4240      	negs	r0, r0
    e104:	bd10      	pop	{r4, pc}
    e106:	f640 310c 	movw	r1, #2828	; 0xb0c
    e10a:	2070      	movs	r0, #112	; 0x70
    e10c:	f002 f930 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e110:	1e847fff 	.word	0x1e847fff

0000e114 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    e114:	4907      	ldr	r1, [pc, #28]	; (e134 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    e116:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    e11a:	4282      	cmp	r2, r0
    e11c:	bf04      	itt	eq
    e11e:	6848      	ldreq	r0, [r1, #4]
    e120:	4770      	bxeq	lr
    e122:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e126:	4904      	ldr	r1, [pc, #16]	; (e138 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    e128:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    e12c:	3008      	adds	r0, #8
    e12e:	f7ff bd83 	b.w	dc38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    e132:	0000      	.short	0x0000
    e134:	200012e4 	.word	0x200012e4
    e138:	20000f64 	.word	0x20000f64

0000e13c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    e13c:	490e      	ldr	r1, [pc, #56]	; (e178 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    e13e:	b510      	push	{r4, lr}
    e140:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    e144:	2820      	cmp	r0, #32
    e146:	d012      	beq.n	e16e <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    e148:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    e14c:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    e150:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e154:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    e158:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    e15c:	6840      	ldr	r0, [r0, #4]
    e15e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e162:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    e166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e16a:	2104      	movs	r1, #4
    e16c:	4710      	bx	r2
    e16e:	f640 01bc 	movw	r1, #2236	; 0x8bc
    e172:	2070      	movs	r0, #112	; 0x70
    e174:	f002 f8fc 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e178:	200012e4 	.word	0x200012e4

0000e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e17e:	4d6d      	ldr	r5, [pc, #436]	; (e334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    e180:	496d      	ldr	r1, [pc, #436]	; (e338 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    e182:	2601      	movs	r6, #1
    e184:	f505 7460 	add.w	r4, r5, #896	; 0x380
    e188:	2808      	cmp	r0, #8
    e18a:	d273      	bcs.n	e274 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    e18c:	e8df f000 	tbb	[pc, r0]
    e190:	af9d6704 	.word	0xaf9d6704
    e194:	b9b444cd 	.word	0xb9b444cd
    e198:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e19c:	b918      	cbnz	r0, e1a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    e19e:	f001 ff35 	bl	1000c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    e1a2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    e1a6:	8ae0      	ldrh	r0, [r4, #22]
    e1a8:	b110      	cbz	r0, e1b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    e1aa:	f002 f869 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e1ae:	b188      	cbz	r0, e1d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    e1b0:	f7ff fcaa 	bl	db08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e1b4:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    e1b8:	68a1      	ldr	r1, [r4, #8]
    e1ba:	f1b1 3fff 	cmp.w	r1, #4294967295
    e1be:	d005      	beq.n	e1cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    e1c0:	2301      	movs	r3, #1
    e1c2:	2203      	movs	r2, #3
    e1c4:	2005      	movs	r0, #5
    e1c6:	f001 fb3f 	bl	f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e1ca:	b140      	cbz	r0, e1de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    e1cc:	7e60      	ldrb	r0, [r4, #25]
    e1ce:	2801      	cmp	r0, #1
    e1d0:	d110      	bne.n	e1f4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    e1d2:	e009      	b.n	e1e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    e1d4:	f44f 6107 	mov.w	r1, #2160	; 0x870
    e1d8:	2070      	movs	r0, #112	; 0x70
    e1da:	f002 f8c9 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e1de:	f640 0175 	movw	r1, #2165	; 0x875
    e1e2:	2070      	movs	r0, #112	; 0x70
    e1e4:	f002 f8c4 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e1e8:	6920      	ldr	r0, [r4, #16]
    e1ea:	1e40      	subs	r0, r0, #1
    e1ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e1f0:	f001 fa44 	bl	f67c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    e1f4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e1f8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e1fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e200:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e204:	6840      	ldr	r0, [r0, #4]
    e206:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e20a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e20e:	b001      	add	sp, #4
    e210:	2101      	movs	r1, #1
    e212:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e216:	4710      	bx	r2
    e218:	f7ff fc76 	bl	db08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e21c:	f04f 30ff 	mov.w	r0, #4294967295
    e220:	60a0      	str	r0, [r4, #8]
    e222:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    e226:	f88d 0000 	strb.w	r0, [sp]
    e22a:	f89d 0000 	ldrb.w	r0, [sp]
    e22e:	b188      	cbz	r0, e254 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    e230:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e234:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e238:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e23c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e240:	6840      	ldr	r0, [r0, #4]
    e242:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e246:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e24a:	b001      	add	sp, #4
    e24c:	2106      	movs	r1, #6
    e24e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e252:	4710      	bx	r2
    e254:	f640 0186 	movw	r1, #2182	; 0x886
    e258:	2070      	movs	r0, #112	; 0x70
    e25a:	f002 f889 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e25e:	f7ff fc53 	bl	db08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e262:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    e266:	f002 f80b 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e26a:	b120      	cbz	r0, e276 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    e26c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e270:	b130      	cbz	r0, e280 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    e272:	e009      	b.n	e288 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    e274:	e059      	b.n	e32a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    e276:	f640 0196 	movw	r1, #2198	; 0x896
    e27a:	2070      	movs	r0, #112	; 0x70
    e27c:	f002 f878 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e280:	f001 fec4 	bl	1000c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    e284:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    e288:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    e28c:	b158      	cbz	r0, e2a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    e28e:	492b      	ldr	r1, [pc, #172]	; (e33c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    e290:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    e294:	6008      	str	r0, [r1, #0]
    e296:	2005      	movs	r0, #5
    e298:	f001 fbaa 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e29c:	f001 ff02 	bl	100a4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    e2a0:	2000      	movs	r0, #0
    e2a2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    e2a6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e2aa:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e2ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e2b2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e2b6:	6840      	ldr	r0, [r0, #4]
    e2b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e2bc:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e2c0:	b001      	add	sp, #4
    e2c2:	2100      	movs	r1, #0
    e2c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e2c8:	4710      	bx	r2
    e2ca:	f001 fc49 	bl	fb60 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    e2ce:	8ae0      	ldrh	r0, [r4, #22]
    e2d0:	b110      	cbz	r0, e2d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    e2d2:	f001 ffd5 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e2d6:	b128      	cbz	r0, e2e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    e2d8:	4819      	ldr	r0, [pc, #100]	; (e340 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    e2da:	7800      	ldrb	r0, [r0, #0]
    e2dc:	2803      	cmp	r0, #3
    e2de:	bf08      	it	eq
    e2e0:	7766      	strbeq	r6, [r4, #29]
    e2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2e4:	f640 01a1 	movw	r1, #2209	; 0x8a1
    e2e8:	2070      	movs	r0, #112	; 0x70
    e2ea:	f002 f841 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e2ee:	4815      	ldr	r0, [pc, #84]	; (e344 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    e2f0:	6006      	str	r6, [r0, #0]
    e2f2:	6888      	ldr	r0, [r1, #8]
    e2f4:	6006      	str	r6, [r0, #0]
    e2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2f8:	7808      	ldrb	r0, [r1, #0]
    e2fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e2fe:	f002 b907 	b.w	10510 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e302:	f7ff fc01 	bl	db08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    e306:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e30a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e30e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e312:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    e316:	6840      	ldr	r0, [r0, #4]
    e318:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e31c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    e320:	b001      	add	sp, #4
    e322:	2105      	movs	r1, #5
    e324:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e328:	4710      	bx	r2
    e32a:	f640 01b4 	movw	r1, #2228	; 0x8b4
    e32e:	2070      	movs	r0, #112	; 0x70
    e330:	f002 f81e 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e334:	20000f64 	.word	0x20000f64
    e338:	20000014 	.word	0x20000014
    e33c:	4001f508 	.word	0x4001f508
    e340:	20000016 	.word	0x20000016
    e344:	40000508 	.word	0x40000508

0000e348 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    e348:	4803      	ldr	r0, [pc, #12]	; (e358 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    e34a:	b510      	push	{r4, lr}
    e34c:	7840      	ldrb	r0, [r0, #1]
    e34e:	f00a f9bc 	bl	186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e352:	b280      	uxth	r0, r0
    e354:	bd10      	pop	{r4, pc}
    e356:	0000      	.short	0x0000
    e358:	20000016 	.word	0x20000016

0000e35c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    e35c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e360:	4682      	mov	sl, r0
    e362:	48dc      	ldr	r0, [pc, #880]	; (e6d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    e364:	b08b      	sub	sp, #44	; 0x2c
    e366:	6800      	ldr	r0, [r0, #0]
    e368:	4ddb      	ldr	r5, [pc, #876]	; (e6d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    e36a:	05c0      	lsls	r0, r0, #23
    e36c:	0dc0      	lsrs	r0, r0, #23
    e36e:	d00e      	beq.n	e38e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    e370:	3810      	subs	r0, #16
    e372:	b240      	sxtb	r0, r0
    e374:	2800      	cmp	r0, #0
    e376:	bfb8      	it	lt
    e378:	f000 000f 	andlt.w	r0, r0, #15
    e37c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e380:	bfac      	ite	ge
    e382:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    e386:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    e38a:	0940      	lsrs	r0, r0, #5
    e38c:	d00d      	beq.n	e3aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    e38e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e390:	f04f 0b00 	mov.w	fp, #0
    e394:	7800      	ldrb	r0, [r0, #0]
    e396:	2800      	cmp	r0, #0
    e398:	bf18      	it	ne
    e39a:	2801      	cmpne	r0, #1
    e39c:	d018      	beq.n	e3d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    e39e:	f240 714f 	movw	r1, #1871	; 0x74f
    e3a2:	f04f 0070 	mov.w	r0, #112	; 0x70
    e3a6:	f001 ffe3 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3aa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    e3ae:	f04f 0b01 	mov.w	fp, #1
    e3b2:	2820      	cmp	r0, #32
    e3b4:	d007      	beq.n	e3c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    e3b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    e3b8:	7800      	ldrb	r0, [r0, #0]
    e3ba:	b148      	cbz	r0, e3d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    e3bc:	f240 714b 	movw	r1, #1867	; 0x74b
    e3c0:	2070      	movs	r0, #112	; 0x70
    e3c2:	f001 ffd5 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3c6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    e3ca:	2070      	movs	r0, #112	; 0x70
    e3cc:	f001 ffd0 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3d0:	4cc2      	ldr	r4, [pc, #776]	; (e6dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    e3d2:	b124      	cbz	r4, e3de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    e3d4:	2100      	movs	r1, #0
    e3d6:	f240 7052 	movw	r0, #1874	; 0x752
    e3da:	f3af 8000 	nop.w
    e3de:	49c0      	ldr	r1, [pc, #768]	; (e6e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    e3e0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e3e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    e3e8:	f04f 0801 	mov.w	r8, #1
    e3ec:	9000      	str	r0, [sp, #0]
    e3ee:	b124      	cbz	r4, e3fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    e3f0:	2100      	movs	r1, #0
    e3f2:	f240 705a 	movw	r0, #1882	; 0x75a
    e3f6:	f3af 8000 	nop.w
    e3fa:	f1b8 0f00 	cmp.w	r8, #0
    e3fe:	d009      	beq.n	e414 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    e400:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    e404:	f04f 0900 	mov.w	r9, #0
    e408:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    e40c:	f1bb 0f00 	cmp.w	fp, #0
    e410:	d007      	beq.n	e422 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    e412:	e032      	b.n	e47a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    e414:	48b3      	ldr	r0, [pc, #716]	; (e6e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    e416:	2800      	cmp	r0, #0
    e418:	bf18      	it	ne
    e41a:	f3af 8000 	nopne.w
    e41e:	b662      	cpsie	i
    e420:	e7ee      	b.n	e400 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    e422:	4637      	mov	r7, r6
    e424:	2001      	movs	r0, #1
    e426:	ea20 0607 	bic.w	r6, r0, r7
    e42a:	48af      	ldr	r0, [pc, #700]	; (e6e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    e42c:	2240      	movs	r2, #64	; 0x40
    e42e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    e432:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    e436:	f00a fab6 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e43a:	b124      	cbz	r4, e446 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    e43c:	2100      	movs	r1, #0
    e43e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    e442:	f3af 8000 	nop.w
    e446:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    e44a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    e44e:	6a09      	ldr	r1, [r1, #32]
    e450:	6201      	str	r1, [r0, #32]
    e452:	b124      	cbz	r4, e45e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    e454:	2100      	movs	r1, #0
    e456:	f240 50d1 	movw	r0, #1489	; 0x5d1
    e45a:	f3af 8000 	nop.w
    e45e:	b124      	cbz	r4, e46a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    e460:	2100      	movs	r1, #0
    e462:	f240 7064 	movw	r0, #1892	; 0x764
    e466:	f3af 8000 	nop.w
    e46a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    e46e:	f88d 0004 	strb.w	r0, [sp, #4]
    e472:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e476:	2800      	cmp	r0, #0
    e478:	d1b9      	bne.n	e3ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e47a:	b124      	cbz	r4, e486 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    e47c:	2100      	movs	r1, #0
    e47e:	f240 706e 	movw	r0, #1902	; 0x76e
    e482:	f3af 8000 	nop.w
    e486:	f001 f855 	bl	f534 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e48a:	4680      	mov	r8, r0
    e48c:	4633      	mov	r3, r6
    e48e:	aa06      	add	r2, sp, #24
    e490:	990c      	ldr	r1, [sp, #48]	; 0x30
    e492:	f7ff fa65 	bl	d960 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9a0>
    e496:	b124      	cbz	r4, e4a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    e498:	2100      	movs	r1, #0
    e49a:	f240 7075 	movw	r0, #1909	; 0x775
    e49e:	f3af 8000 	nop.w
    e4a2:	4991      	ldr	r1, [pc, #580]	; (e6e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    e4a4:	a806      	add	r0, sp, #24
    e4a6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    e4aa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    e4ae:	2901      	cmp	r1, #1
    e4b0:	bf18      	it	ne
    e4b2:	2902      	cmpne	r1, #2
    e4b4:	d13c      	bne.n	e530 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    e4b6:	9906      	ldr	r1, [sp, #24]
    e4b8:	9b07      	ldr	r3, [sp, #28]
    e4ba:	eba1 0108 	sub.w	r1, r1, r8
    e4be:	4a8b      	ldr	r2, [pc, #556]	; (e6ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    e4c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e4c4:	eba3 0308 	sub.w	r3, r3, r8
    e4c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    e4cc:	2902      	cmp	r1, #2
    e4ce:	d371      	bcc.n	e5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e4d0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    e4d4:	d26e      	bcs.n	e5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e4d6:	429a      	cmp	r2, r3
    e4d8:	d36c      	bcc.n	e5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e4da:	f04f 0901 	mov.w	r9, #1
    e4de:	ab01      	add	r3, sp, #4
    e4e0:	aa05      	add	r2, sp, #20
    e4e2:	4631      	mov	r1, r6
    e4e4:	f7fe ff32 	bl	d34c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    e4e8:	2800      	cmp	r0, #0
    e4ea:	d06b      	beq.n	e5c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    e4ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
    e4f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    e4f4:	4633      	mov	r3, r6
    e4f6:	428a      	cmp	r2, r1
    e4f8:	d068      	beq.n	e5cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    e4fa:	2005      	movs	r0, #5
    e4fc:	f7fe fd6e 	bl	cfdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    e500:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    e504:	7048      	strb	r0, [r1, #1]
    e506:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e50a:	2820      	cmp	r0, #32
    e50c:	bf03      	ittte	eq
    e50e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    e512:	f880 a020 	strbeq.w	sl, [r0, #32]
    e516:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    e51a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    e51e:	bf18      	it	ne
    e520:	f880 a001 	strbne.w	sl, [r0, #1]
    e524:	4632      	mov	r2, r6
    e526:	4651      	mov	r1, sl
    e528:	f05f 0003 	movs.w	r0, #3
    e52c:	f7ff fbbe 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e530:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    e534:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    e538:	f88d 0004 	strb.w	r0, [sp, #4]
    e53c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    e540:	b124      	cbz	r4, e54c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    e542:	2100      	movs	r1, #0
    e544:	f240 707c 	movw	r0, #1916	; 0x77c
    e548:	f3af 8000 	nop.w
    e54c:	4868      	ldr	r0, [pc, #416]	; (e6f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    e54e:	2800      	cmp	r0, #0
    e550:	bf18      	it	ne
    e552:	f3af 8000 	nopne.w
    e556:	f3ef 8810 	mrs	r8, PRIMASK
    e55a:	b672      	cpsid	i
    e55c:	b124      	cbz	r4, e568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    e55e:	2100      	movs	r1, #0
    e560:	f240 7082 	movw	r0, #1922	; 0x782
    e564:	f3af 8000 	nop.w
    e568:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    e56c:	f88d 0004 	strb.w	r0, [sp, #4]
    e570:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e574:	2800      	cmp	r0, #0
    e576:	f47f af3a 	bne.w	e3ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e57a:	b124      	cbz	r4, e586 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    e57c:	2100      	movs	r1, #0
    e57e:	f240 708a 	movw	r0, #1930	; 0x78a
    e582:	f3af 8000 	nop.w
    e586:	f10d 0e18 	add.w	lr, sp, #24
    e58a:	9800      	ldr	r0, [sp, #0]
    e58c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    e590:	f100 0008 	add.w	r0, r0, #8
    e594:	f1b9 0f00 	cmp.w	r9, #0
    e598:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    e59c:	d044      	beq.n	e628 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    e59e:	b124      	cbz	r4, e5aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    e5a0:	2100      	movs	r1, #0
    e5a2:	f240 7097 	movw	r0, #1943	; 0x797
    e5a6:	f3af 8000 	nop.w
    e5aa:	f1bb 0f00 	cmp.w	fp, #0
    e5ae:	d12c      	bne.n	e60a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e5b0:	e016      	b.n	e5e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    e5b2:	e7ff      	b.n	e5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    e5b4:	4632      	mov	r2, r6
    e5b6:	4651      	mov	r1, sl
    e5b8:	2004      	movs	r0, #4
    e5ba:	f7ff fb77 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e5be:	f04f 0901 	mov.w	r9, #1
    e5c2:	e7b5      	b.n	e530 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    e5c4:	4632      	mov	r2, r6
    e5c6:	4651      	mov	r1, sl
    e5c8:	2004      	movs	r0, #4
    e5ca:	e7af      	b.n	e52c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    e5cc:	2920      	cmp	r1, #32
    e5ce:	bf19      	ittee	ne
    e5d0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    e5d4:	7840      	ldrbne	r0, [r0, #1]
    e5d6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    e5da:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    e5de:	e78f      	b.n	e500 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    e5e0:	b19f      	cbz	r7, e60a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e5e2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    e5e6:	2820      	cmp	r0, #32
    e5e8:	d10f      	bne.n	e60a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e5ea:	b124      	cbz	r4, e5f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    e5ec:	2100      	movs	r1, #0
    e5ee:	f240 709c 	movw	r0, #1948	; 0x79c
    e5f2:	f3af 8000 	nop.w
    e5f6:	4631      	mov	r1, r6
    e5f8:	2002      	movs	r0, #2
    e5fa:	f7ff fb87 	bl	dd0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    e5fe:	b920      	cbnz	r0, e60a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    e600:	980c      	ldr	r0, [sp, #48]	; 0x30
    e602:	7800      	ldrb	r0, [r0, #0]
    e604:	b3f0      	cbz	r0, e684 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    e606:	2801      	cmp	r0, #1
    e608:	d04c      	beq.n	e6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    e60a:	b124      	cbz	r4, e616 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    e60c:	2100      	movs	r1, #0
    e60e:	f240 70b9 	movw	r0, #1977	; 0x7b9
    e612:	f3af 8000 	nop.w
    e616:	f1bb 0f00 	cmp.w	fp, #0
    e61a:	bf18      	it	ne
    e61c:	2001      	movne	r0, #1
    e61e:	d04a      	beq.n	e6b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    e620:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    e624:	f04f 0901 	mov.w	r9, #1
    e628:	b124      	cbz	r4, e634 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    e62a:	2100      	movs	r1, #0
    e62c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    e630:	f3af 8000 	nop.w
    e634:	f1b8 0f00 	cmp.w	r8, #0
    e638:	d045      	beq.n	e6c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    e63a:	b124      	cbz	r4, e646 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    e63c:	2100      	movs	r1, #0
    e63e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    e642:	f3af 8000 	nop.w
    e646:	f1b9 0f00 	cmp.w	r9, #0
    e64a:	d011      	beq.n	e670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    e64c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    e650:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    e654:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    e658:	2820      	cmp	r0, #32
    e65a:	d009      	beq.n	e670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    e65c:	b124      	cbz	r4, e668 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    e65e:	2100      	movs	r1, #0
    e660:	f240 70d5 	movw	r0, #2005	; 0x7d5
    e664:	f3af 8000 	nop.w
    e668:	4822      	ldr	r0, [pc, #136]	; (e6f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    e66a:	7840      	ldrb	r0, [r0, #1]
    e66c:	f001 ff50 	bl	10510 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    e670:	b124      	cbz	r4, e67c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    e672:	2100      	movs	r1, #0
    e674:	f240 70da 	movw	r0, #2010	; 0x7da
    e678:	f3af 8000 	nop.w
    e67c:	b00d      	add	sp, #52	; 0x34
    e67e:	4648      	mov	r0, r9
    e680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e684:	e7ff      	b.n	e686 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    e686:	b124      	cbz	r4, e692 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    e688:	2100      	movs	r1, #0
    e68a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    e68e:	f3af 8000 	nop.w
    e692:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    e696:	4651      	mov	r1, sl
    e698:	2004      	movs	r0, #4
    e69a:	f7ff fb07 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    e69e:	f04f 0901 	mov.w	r9, #1
    e6a2:	e7c1      	b.n	e628 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    e6a4:	2c00      	cmp	r4, #0
    e6a6:	f43f aea2 	beq.w	e3ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e6aa:	2100      	movs	r1, #0
    e6ac:	f240 70af 	movw	r0, #1967	; 0x7af
    e6b0:	f3af 8000 	nop.w
    e6b4:	e69b      	b.n	e3ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    e6b6:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    e6ba:	2001      	movs	r0, #1
    e6bc:	ea20 0101 	bic.w	r1, r0, r1
    e6c0:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    e6c4:	e7ac      	b.n	e620 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    e6c6:	4807      	ldr	r0, [pc, #28]	; (e6e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    e6c8:	2800      	cmp	r0, #0
    e6ca:	bf18      	it	ne
    e6cc:	f3af 8000 	nopne.w
    e6d0:	b662      	cpsie	i
    e6d2:	e7b2      	b.n	e63a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    e6d4:	e000ed04 	.word	0xe000ed04
    e6d8:	200012e4 	.word	0x200012e4
    e6dc:	00000000 	.word	0x00000000
    e6e0:	20000f64 	.word	0x20000f64
    e6e4:	00000000 	.word	0x00000000
    e6e8:	20001264 	.word	0x20001264
    e6ec:	003fffff 	.word	0x003fffff
    e6f0:	00000000 	.word	0x00000000
    e6f4:	20000014 	.word	0x20000014

0000e6f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    e6f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6fc:	48a5      	ldr	r0, [pc, #660]	; (e994 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    e6fe:	b08c      	sub	sp, #48	; 0x30
    e700:	6800      	ldr	r0, [r0, #0]
    e702:	05c0      	lsls	r0, r0, #23
    e704:	0dc0      	lsrs	r0, r0, #23
    e706:	d011      	beq.n	e72c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    e708:	3810      	subs	r0, #16
    e70a:	b240      	sxtb	r0, r0
    e70c:	2800      	cmp	r0, #0
    e70e:	bfb8      	it	lt
    e710:	f000 000f 	andlt.w	r0, r0, #15
    e714:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e718:	bfac      	ite	ge
    e71a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    e71e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    e722:	0940      	lsrs	r0, r0, #5
    e724:	bf08      	it	eq
    e726:	f04f 0901 	moveq.w	r9, #1
    e72a:	d001      	beq.n	e730 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    e72c:	f04f 0900 	mov.w	r9, #0
    e730:	980c      	ldr	r0, [sp, #48]	; 0x30
    e732:	7800      	ldrb	r0, [r0, #0]
    e734:	2800      	cmp	r0, #0
    e736:	f04f 0000 	mov.w	r0, #0
    e73a:	bf1c      	itt	ne
    e73c:	b00d      	addne	sp, #52	; 0x34
    e73e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e742:	f8df a254 	ldr.w	sl, [pc, #596]	; e998 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    e746:	4d95      	ldr	r5, [pc, #596]	; (e99c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    e748:	4c95      	ldr	r4, [pc, #596]	; (e9a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    e74a:	f04f 0b00 	mov.w	fp, #0
    e74e:	900b      	str	r0, [sp, #44]	; 0x2c
    e750:	b125      	cbz	r5, e75c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    e752:	2100      	movs	r1, #0
    e754:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    e758:	f3af 8000 	nop.w
    e75c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    e760:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    e764:	f04f 0800 	mov.w	r8, #0
    e768:	b125      	cbz	r5, e774 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    e76a:	2100      	movs	r1, #0
    e76c:	f240 605d 	movw	r0, #1629	; 0x65d
    e770:	f3af 8000 	nop.w
    e774:	f1b9 0f00 	cmp.w	r9, #0
    e778:	d11d      	bne.n	e7b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    e77a:	4637      	mov	r7, r6
    e77c:	2001      	movs	r0, #1
    e77e:	ea20 0607 	bic.w	r6, r0, r7
    e782:	4888      	ldr	r0, [pc, #544]	; (e9a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    e784:	2240      	movs	r2, #64	; 0x40
    e786:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    e78a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    e78e:	f00a f90a 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e792:	b125      	cbz	r5, e79e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    e794:	2100      	movs	r1, #0
    e796:	f240 50cd 	movw	r0, #1485	; 0x5cd
    e79a:	f3af 8000 	nop.w
    e79e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    e7a2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    e7a6:	6a09      	ldr	r1, [r1, #32]
    e7a8:	6201      	str	r1, [r0, #32]
    e7aa:	b125      	cbz	r5, e7b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    e7ac:	2100      	movs	r1, #0
    e7ae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    e7b2:	f3af 8000 	nop.w
    e7b6:	b125      	cbz	r5, e7c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    e7b8:	2100      	movs	r1, #0
    e7ba:	f240 6065 	movw	r0, #1637	; 0x665
    e7be:	f3af 8000 	nop.w
    e7c2:	f000 feb7 	bl	f534 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e7c6:	4607      	mov	r7, r0
    e7c8:	4633      	mov	r3, r6
    e7ca:	466a      	mov	r2, sp
    e7cc:	990c      	ldr	r1, [sp, #48]	; 0x30
    e7ce:	f7ff f8c7 	bl	d960 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9a0>
    e7d2:	b125      	cbz	r5, e7de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    e7d4:	2100      	movs	r1, #0
    e7d6:	f240 606b 	movw	r0, #1643	; 0x66b
    e7da:	f3af 8000 	nop.w
    e7de:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e7e2:	2820      	cmp	r0, #32
    e7e4:	d014      	beq.n	e810 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    e7e6:	6920      	ldr	r0, [r4, #16]
    e7e8:	9900      	ldr	r1, [sp, #0]
    e7ea:	1a09      	subs	r1, r1, r0
    e7ec:	0209      	lsls	r1, r1, #8
    e7ee:	17ca      	asrs	r2, r1, #31
    e7f0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    e7f4:	1209      	asrs	r1, r1, #8
    e7f6:	d50b      	bpl.n	e810 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    e7f8:	e9dd 2100 	ldrd	r2, r1, [sp]
    e7fc:	1a89      	subs	r1, r1, r2
    e7fe:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    e802:	4408      	add	r0, r1
    e804:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e808:	e9cd 2000 	strd	r2, r0, [sp]
    e80c:	f04f 0801 	mov.w	r8, #1
    e810:	b14d      	cbz	r5, e826 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    e812:	2100      	movs	r1, #0
    e814:	f240 6075 	movw	r0, #1653	; 0x675
    e818:	f3af 8000 	nop.w
    e81c:	2100      	movs	r1, #0
    e81e:	f240 607b 	movw	r0, #1659	; 0x67b
    e822:	f3af 8000 	nop.w
    e826:	9800      	ldr	r0, [sp, #0]
    e828:	9901      	ldr	r1, [sp, #4]
    e82a:	1bc0      	subs	r0, r0, r7
    e82c:	1bc9      	subs	r1, r1, r7
    e82e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e832:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e836:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    e83a:	d205      	bcs.n	e848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    e83c:	458a      	cmp	sl, r1
    e83e:	d303      	bcc.n	e848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    e840:	f1b9 0f00 	cmp.w	r9, #0
    e844:	d10c      	bne.n	e860 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    e846:	e003      	b.n	e850 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    e848:	f1b9 0f00 	cmp.w	r9, #0
    e84c:	d038      	beq.n	e8c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    e84e:	e094      	b.n	e97a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    e850:	4633      	mov	r3, r6
    e852:	463a      	mov	r2, r7
    e854:	4669      	mov	r1, sp
    e856:	4854      	ldr	r0, [pc, #336]	; (e9a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    e858:	f7fe fbfc 	bl	d054 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    e85c:	ea48 0800 	orr.w	r8, r8, r0
    e860:	f1b8 0f00 	cmp.w	r8, #0
    e864:	d022      	beq.n	e8ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    e866:	9800      	ldr	r0, [sp, #0]
    e868:	f009 ff2f 	bl	186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e86c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    e870:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e874:	4b4d      	ldr	r3, [pc, #308]	; (e9ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    e876:	4411      	add	r1, r2
    e878:	1c49      	adds	r1, r1, #1
    e87a:	1842      	adds	r2, r0, r1
    e87c:	4298      	cmp	r0, r3
    e87e:	d841      	bhi.n	e904 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    e880:	4849      	ldr	r0, [pc, #292]	; (e9a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    e882:	4281      	cmp	r1, r0
    e884:	dc5a      	bgt.n	e93c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    e886:	4240      	negs	r0, r0
    e888:	4281      	cmp	r1, r0
    e88a:	db5f      	blt.n	e94c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    e88c:	1c58      	adds	r0, r3, #1
    e88e:	4290      	cmp	r0, r2
    e890:	bfdc      	itt	le
    e892:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    e896:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    e89a:	dd05      	ble.n	e8a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    e89c:	2a00      	cmp	r2, #0
    e89e:	bfbc      	itt	lt
    e8a0:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    e8a4:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    e8a8:	980c      	ldr	r0, [sp, #48]	; 0x30
    e8aa:	60c2      	str	r2, [r0, #12]
    e8ac:	2001      	movs	r0, #1
    e8ae:	900b      	str	r0, [sp, #44]	; 0x2c
    e8b0:	2d00      	cmp	r5, #0
    e8b2:	d062      	beq.n	e97a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    e8b4:	2100      	movs	r1, #0
    e8b6:	f240 608e 	movw	r0, #1678	; 0x68e
    e8ba:	f3af 8000 	nop.w
    e8be:	e05c      	b.n	e97a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    e8c0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e8c4:	aa08      	add	r2, sp, #32
    e8c6:	a907      	add	r1, sp, #28
    e8c8:	f000 fcd6 	bl	f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    e8cc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    e8d0:	2820      	cmp	r0, #32
    e8d2:	d01c      	beq.n	e90e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    e8d4:	6920      	ldr	r0, [r4, #16]
    e8d6:	1d40      	adds	r0, r0, #5
    e8d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e8dc:	e9dd 2100 	ldrd	r2, r1, [sp]
    e8e0:	1a89      	subs	r1, r1, r2
    e8e2:	4401      	add	r1, r0
    e8e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e8e8:	e9cd 0100 	strd	r0, r1, [sp]
    e8ec:	f009 feed 	bl	186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e8f0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    e8f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e8f8:	4b2c      	ldr	r3, [pc, #176]	; (e9ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    e8fa:	4411      	add	r1, r2
    e8fc:	1c4a      	adds	r2, r1, #1
    e8fe:	1881      	adds	r1, r0, r2
    e900:	4298      	cmp	r0, r3
    e902:	d918      	bls.n	e936 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    e904:	f240 6109 	movw	r1, #1545	; 0x609
    e908:	2070      	movs	r0, #112	; 0x70
    e90a:	f001 fd31 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e90e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e912:	f107 0609 	add.w	r6, r7, #9
    e916:	b120      	cbz	r0, e922 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    e918:	f001 fcb2 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e91c:	2800      	cmp	r0, #0
    e91e:	bf08      	it	eq
    e920:	3632      	addeq	r6, #50	; 0x32
    e922:	4823      	ldr	r0, [pc, #140]	; (e9b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    e924:	7841      	ldrb	r1, [r0, #1]
    e926:	9807      	ldr	r0, [sp, #28]
    e928:	4281      	cmp	r1, r0
    e92a:	bf84      	itt	hi
    e92c:	1a08      	subhi	r0, r1, r0
    e92e:	4406      	addhi	r6, r0
    e930:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    e934:	e7d2      	b.n	e8dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    e936:	481c      	ldr	r0, [pc, #112]	; (e9a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    e938:	4282      	cmp	r2, r0
    e93a:	dd04      	ble.n	e946 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    e93c:	f240 610a 	movw	r1, #1546	; 0x60a
    e940:	2070      	movs	r0, #112	; 0x70
    e942:	f001 fd15 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e946:	481b      	ldr	r0, [pc, #108]	; (e9b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    e948:	4282      	cmp	r2, r0
    e94a:	da04      	bge.n	e956 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    e94c:	f240 610b 	movw	r1, #1547	; 0x60b
    e950:	2070      	movs	r0, #112	; 0x70
    e952:	f001 fd0d 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e956:	4818      	ldr	r0, [pc, #96]	; (e9b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    e958:	4288      	cmp	r0, r1
    e95a:	bfdc      	itt	le
    e95c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    e960:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    e964:	dd05      	ble.n	e972 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    e966:	2900      	cmp	r1, #0
    e968:	bfbc      	itt	lt
    e96a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    e96e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    e972:	980c      	ldr	r0, [sp, #48]	; 0x30
    e974:	60c1      	str	r1, [r0, #12]
    e976:	2001      	movs	r0, #1
    e978:	900b      	str	r0, [sp, #44]	; 0x2c
    e97a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    e97e:	f88d 0010 	strb.w	r0, [sp, #16]
    e982:	f89d 0010 	ldrb.w	r0, [sp, #16]
    e986:	2800      	cmp	r0, #0
    e988:	f47f aee2 	bne.w	e750 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    e98c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e98e:	b00d      	add	sp, #52	; 0x34
    e990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e994:	e000ed04 	.word	0xe000ed04
    e998:	003fffff 	.word	0x003fffff
    e99c:	00000000 	.word	0x00000000
    e9a0:	200012e4 	.word	0x200012e4
    e9a4:	20001264 	.word	0x20001264
    e9a8:	07a12000 	.word	0x07a12000
    e9ac:	1e847fff 	.word	0x1e847fff
    e9b0:	20000016 	.word	0x20000016
    e9b4:	f85ee000 	.word	0xf85ee000
    e9b8:	1e848000 	.word	0x1e848000

0000e9bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    e9bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9c0:	4d88      	ldr	r5, [pc, #544]	; (ebe4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    e9c2:	b08c      	sub	sp, #48	; 0x30
    e9c4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    e9c8:	2000      	movs	r0, #0
    e9ca:	9009      	str	r0, [sp, #36]	; 0x24
    e9cc:	2001      	movs	r0, #1
    e9ce:	4c86      	ldr	r4, [pc, #536]	; (ebe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    e9d0:	f04f 0900 	mov.w	r9, #0
    e9d4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    e9d8:	4680      	mov	r8, r0
    e9da:	9008      	str	r0, [sp, #32]
    e9dc:	b124      	cbz	r4, e9e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    e9de:	2100      	movs	r1, #0
    e9e0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    e9e4:	f3af 8000 	nop.w
    e9e8:	9808      	ldr	r0, [sp, #32]
    e9ea:	2800      	cmp	r0, #0
    e9ec:	d037      	beq.n	ea5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    e9ee:	bf00      	nop
    e9f0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    e9f4:	b124      	cbz	r4, ea00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    e9f6:	2100      	movs	r1, #0
    e9f8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    e9fc:	f3af 8000 	nop.w
    ea00:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    ea04:	2240      	movs	r2, #64	; 0x40
    ea06:	ea28 060a 	bic.w	r6, r8, sl
    ea0a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    ea0e:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    ea12:	4683      	mov	fp, r0
    ea14:	f009 ffc7 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea18:	b124      	cbz	r4, ea24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    ea1a:	2100      	movs	r1, #0
    ea1c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    ea20:	f3af 8000 	nop.w
    ea24:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    ea28:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    ea2c:	9000      	str	r0, [sp, #0]
    ea2e:	6a09      	ldr	r1, [r1, #32]
    ea30:	6201      	str	r1, [r0, #32]
    ea32:	b124      	cbz	r4, ea3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    ea34:	2100      	movs	r1, #0
    ea36:	f240 50d1 	movw	r0, #1489	; 0x5d1
    ea3a:	f3af 8000 	nop.w
    ea3e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    ea42:	f88d 0008 	strb.w	r0, [sp, #8]
    ea46:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ea4a:	b178      	cbz	r0, ea6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    ea4c:	2c00      	cmp	r4, #0
    ea4e:	bf1c      	itt	ne
    ea50:	2100      	movne	r1, #0
    ea52:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    ea56:	d0c1      	beq.n	e9dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    ea58:	f3af 8000 	nop.w
    ea5c:	e7be      	b.n	e9dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    ea5e:	4863      	ldr	r0, [pc, #396]	; (ebec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    ea60:	2800      	cmp	r0, #0
    ea62:	bf18      	it	ne
    ea64:	f3af 8000 	nopne.w
    ea68:	b662      	cpsie	i
    ea6a:	e7c1      	b.n	e9f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    ea6c:	b124      	cbz	r4, ea78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    ea6e:	2100      	movs	r1, #0
    ea70:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    ea74:	f3af 8000 	nop.w
    ea78:	980c      	ldr	r0, [sp, #48]	; 0x30
    ea7a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    ea7e:	2803      	cmp	r0, #3
    ea80:	d172      	bne.n	eb68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    ea82:	f8dd a000 	ldr.w	sl, [sp]
    ea86:	f8cd a018 	str.w	sl, [sp, #24]
    ea8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea8c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    ea90:	4288      	cmp	r0, r1
    ea92:	bf14      	ite	ne
    ea94:	f04f 0b00 	movne.w	fp, #0
    ea98:	f04f 0b01 	moveq.w	fp, #1
    ea9c:	f10a 0c20 	add.w	ip, sl, #32
    eaa0:	4686      	mov	lr, r0
    eaa2:	2220      	movs	r2, #32
    eaa4:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    eaa8:	e003      	b.n	eab2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    eaaa:	4602      	mov	r2, r0
    eaac:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    eab0:	7840      	ldrb	r0, [r0, #1]
    eab2:	4288      	cmp	r0, r1
    eab4:	d002      	beq.n	eabc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    eab6:	2820      	cmp	r0, #32
    eab8:	d00a      	beq.n	ead0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    eaba:	e7f6      	b.n	eaaa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    eabc:	2820      	cmp	r0, #32
    eabe:	d007      	beq.n	ead0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    eac0:	4586      	cmp	lr, r0
    eac2:	d107      	bne.n	ead4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    eac4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    eac8:	7840      	ldrb	r0, [r0, #1]
    eaca:	f88c 0000 	strb.w	r0, [ip]
    eace:	e007      	b.n	eae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    ead0:	4648      	mov	r0, r9
    ead2:	e00c      	b.n	eaee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    ead4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ead8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    eadc:	7840      	ldrb	r0, [r0, #1]
    eade:	7048      	strb	r0, [r1, #1]
    eae0:	b124      	cbz	r4, eaec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    eae2:	2100      	movs	r1, #0
    eae4:	f240 5037 	movw	r0, #1335	; 0x537
    eae8:	f3af 8000 	nop.w
    eaec:	4640      	mov	r0, r8
    eaee:	ea10 0f0b 	tst.w	r0, fp
    eaf2:	bf18      	it	ne
    eaf4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    eaf8:	2800      	cmp	r0, #0
    eafa:	d052      	beq.n	eba2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    eafc:	b124      	cbz	r4, eb08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    eafe:	2100      	movs	r1, #0
    eb00:	f240 70fd 	movw	r0, #2045	; 0x7fd
    eb04:	f3af 8000 	nop.w
    eb08:	4632      	mov	r2, r6
    eb0a:	2001      	movs	r0, #1
    eb0c:	990c      	ldr	r1, [sp, #48]	; 0x30
    eb0e:	f7ff f8cd 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    eb12:	9806      	ldr	r0, [sp, #24]
    eb14:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    eb18:	f88d 0008 	strb.w	r0, [sp, #8]
    eb1c:	f89d a008 	ldrb.w	sl, [sp, #8]
    eb20:	b124      	cbz	r4, eb2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    eb22:	2100      	movs	r1, #0
    eb24:	f640 0008 	movw	r0, #2056	; 0x808
    eb28:	f3af 8000 	nop.w
    eb2c:	4830      	ldr	r0, [pc, #192]	; (ebf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    eb2e:	2800      	cmp	r0, #0
    eb30:	bf18      	it	ne
    eb32:	f3af 8000 	nopne.w
    eb36:	f3ef 8010 	mrs	r0, PRIMASK
    eb3a:	b672      	cpsid	i
    eb3c:	9008      	str	r0, [sp, #32]
    eb3e:	b124      	cbz	r4, eb4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    eb40:	2100      	movs	r1, #0
    eb42:	f640 000d 	movw	r0, #2061	; 0x80d
    eb46:	f3af 8000 	nop.w
    eb4a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    eb4e:	f88d 0008 	strb.w	r0, [sp, #8]
    eb52:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eb56:	b140      	cbz	r0, eb6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    eb58:	2c00      	cmp	r4, #0
    eb5a:	bf1c      	itt	ne
    eb5c:	2100      	movne	r1, #0
    eb5e:	f640 0011 	movwne	r0, #2065	; 0x811
    eb62:	f43f af3b 	beq.w	e9dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    eb66:	e777      	b.n	ea58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    eb68:	e01b      	b.n	eba2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    eb6a:	f1ba 0f00 	cmp.w	sl, #0
    eb6e:	d008      	beq.n	eb82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    eb70:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    eb74:	2820      	cmp	r0, #32
    eb76:	d104      	bne.n	eb82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    eb78:	4631      	mov	r1, r6
    eb7a:	2002      	movs	r0, #2
    eb7c:	f7ff f8c6 	bl	dd0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    eb80:	b308      	cbz	r0, ebc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    eb82:	b124      	cbz	r4, eb8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    eb84:	2100      	movs	r1, #0
    eb86:	f640 0025 	movw	r0, #2085	; 0x825
    eb8a:	f3af 8000 	nop.w
    eb8e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    eb92:	ea28 0000 	bic.w	r0, r8, r0
    eb96:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    eb9a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    eb9e:	2001      	movs	r0, #1
    eba0:	9009      	str	r0, [sp, #36]	; 0x24
    eba2:	b124      	cbz	r4, ebae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    eba4:	2100      	movs	r1, #0
    eba6:	f640 002e 	movw	r0, #2094	; 0x82e
    ebaa:	f3af 8000 	nop.w
    ebae:	9808      	ldr	r0, [sp, #32]
    ebb0:	b188      	cbz	r0, ebd6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    ebb2:	b124      	cbz	r4, ebbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    ebb4:	2100      	movs	r1, #0
    ebb6:	f640 0032 	movw	r0, #2098	; 0x832
    ebba:	f3af 8000 	nop.w
    ebbe:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebc0:	b00d      	add	sp, #52	; 0x34
    ebc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebc6:	2c00      	cmp	r4, #0
    ebc8:	d0f1      	beq.n	ebae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    ebca:	2100      	movs	r1, #0
    ebcc:	f44f 6002 	mov.w	r0, #2080	; 0x820
    ebd0:	f3af 8000 	nop.w
    ebd4:	e7e6      	b.n	eba4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    ebd6:	4805      	ldr	r0, [pc, #20]	; (ebec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    ebd8:	2800      	cmp	r0, #0
    ebda:	bf18      	it	ne
    ebdc:	f3af 8000 	nopne.w
    ebe0:	b662      	cpsie	i
    ebe2:	e7e6      	b.n	ebb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    ebe4:	200012e4 	.word	0x200012e4
	...

0000ebf4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    ebf4:	2820      	cmp	r0, #32
    ebf6:	bf24      	itt	cs
    ebf8:	2000      	movcs	r0, #0
    ebfa:	4770      	bxcs	lr
    ebfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ec00:	4b03      	ldr	r3, [pc, #12]	; (ec10 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    ec02:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    ec06:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ec0a:	6042      	str	r2, [r0, #4]
    ec0c:	2001      	movs	r0, #1
    ec0e:	4770      	bx	lr
    ec10:	20000f64 	.word	0x20000f64

0000ec14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ec14:	b510      	push	{r4, lr}
    ec16:	2820      	cmp	r0, #32
    ec18:	d211      	bcs.n	ec3e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ec1a:	490e      	ldr	r1, [pc, #56]	; (ec54 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ec1c:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    ec20:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    ec24:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    ec28:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    ec2c:	b13b      	cbz	r3, ec3e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ec2e:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    ec32:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    ec36:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ec3a:	2a01      	cmp	r2, #1
    ec3c:	d001      	beq.n	ec42 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ec3e:	2000      	movs	r0, #0
    ec40:	bd10      	pop	{r4, pc}
    ec42:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    ec46:	4601      	mov	r1, r0
    ec48:	2000      	movs	r0, #0
    ec4a:	f7ff f82f 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    ec4e:	2001      	movs	r0, #1
    ec50:	bd10      	pop	{r4, pc}
    ec52:	0000      	.short	0x0000
    ec54:	200012e4 	.word	0x200012e4

0000ec58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ec58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec5c:	4e80      	ldr	r6, [pc, #512]	; (ee60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    ec5e:	4680      	mov	r8, r0
    ec60:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    ec64:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ec68:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ec6c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ec70:	2800      	cmp	r0, #0
    ec72:	d068      	beq.n	ed46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    ec74:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    ec78:	4d7a      	ldr	r5, [pc, #488]	; (ee64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    ec7a:	b125      	cbz	r5, ec86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ec7c:	2100      	movs	r1, #0
    ec7e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    ec82:	f3af 8000 	nop.w
    ec86:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ec8a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ec8e:	2801      	cmp	r0, #1
    ec90:	d018      	beq.n	ecc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ec92:	b2c0      	uxtb	r0, r0
    ec94:	2804      	cmp	r0, #4
    ec96:	bf1c      	itt	ne
    ec98:	2805      	cmpne	r0, #5
    ec9a:	2806      	cmpne	r0, #6
    ec9c:	d058      	beq.n	ed50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    ec9e:	b12d      	cbz	r5, ecac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    eca0:	f04f 0100 	mov.w	r1, #0
    eca4:	f640 30cd 	movw	r0, #3021	; 0xbcd
    eca8:	f3af 8000 	nop.w
    ecac:	f001 fc86 	bl	105bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ecb0:	b125      	cbz	r5, ecbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ecb2:	2100      	movs	r1, #0
    ecb4:	f640 30d1 	movw	r0, #3025	; 0xbd1
    ecb8:	f3af 8000 	nop.w
    ecbc:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ecc0:	2801      	cmp	r0, #1
    ecc2:	d1e6      	bne.n	ec92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ecc4:	2401      	movs	r4, #1
    ecc6:	b125      	cbz	r5, ecd2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ecc8:	2100      	movs	r1, #0
    ecca:	f640 30d8 	movw	r0, #3032	; 0xbd8
    ecce:	f3af 8000 	nop.w
    ecd2:	2c00      	cmp	r4, #0
    ecd4:	d042      	beq.n	ed5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    ecd6:	2000      	movs	r0, #0
    ecd8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    ecdc:	b125      	cbz	r5, ece8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ecde:	2100      	movs	r1, #0
    ece0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    ece4:	f3af 8000 	nop.w
    ece8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    ecec:	2001      	movs	r0, #1
    ecee:	ea20 090b 	bic.w	r9, r0, fp
    ecf2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ecf6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ecfa:	2240      	movs	r2, #64	; 0x40
    ecfc:	f009 fe53 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed00:	b125      	cbz	r5, ed0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    ed02:	2100      	movs	r1, #0
    ed04:	f240 50cd 	movw	r0, #1485	; 0x5cd
    ed08:	f3af 8000 	nop.w
    ed0c:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    ed10:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    ed14:	6a00      	ldr	r0, [r0, #32]
    ed16:	f8ca 0020 	str.w	r0, [sl, #32]
    ed1a:	b125      	cbz	r5, ed26 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    ed1c:	2100      	movs	r1, #0
    ed1e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    ed22:	f3af 8000 	nop.w
    ed26:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    ed2a:	f88d 0000 	strb.w	r0, [sp]
    ed2e:	f89d 0000 	ldrb.w	r0, [sp]
    ed32:	b1d0      	cbz	r0, ed6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    ed34:	2d00      	cmp	r5, #0
    ed36:	bf1c      	itt	ne
    ed38:	2100      	movne	r1, #0
    ed3a:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    ed3e:	d0c2      	beq.n	ecc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ed40:	f3af 8000 	nop.w
    ed44:	e7bf      	b.n	ecc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ed46:	f640 31b8 	movw	r1, #3000	; 0xbb8
    ed4a:	2070      	movs	r0, #112	; 0x70
    ed4c:	f001 fb10 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ed50:	464a      	mov	r2, r9
    ed52:	4641      	mov	r1, r8
    ed54:	2001      	movs	r0, #1
    ed56:	f7fe ffa9 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    ed5a:	e7a9      	b.n	ecb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ed5c:	4842      	ldr	r0, [pc, #264]	; (ee68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    ed5e:	2800      	cmp	r0, #0
    ed60:	bf18      	it	ne
    ed62:	f3af 8000 	nopne.w
    ed66:	b662      	cpsie	i
    ed68:	e7b5      	b.n	ecd6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ed6a:	b125      	cbz	r5, ed76 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    ed6c:	2100      	movs	r1, #0
    ed6e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    ed72:	f3af 8000 	nop.w
    ed76:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    ed7a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ed7e:	4614      	mov	r4, r2
    ed80:	f04f 0b20 	mov.w	fp, #32
    ed84:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ed88:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ed8c:	e003      	b.n	ed96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    ed8e:	46a3      	mov	fp, r4
    ed90:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    ed94:	785c      	ldrb	r4, [r3, #1]
    ed96:	4544      	cmp	r4, r8
    ed98:	d002      	beq.n	eda0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    ed9a:	2c20      	cmp	r4, #32
    ed9c:	d02b      	beq.n	edf6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    ed9e:	e7f6      	b.n	ed8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    eda0:	2c20      	cmp	r4, #32
    eda2:	d028      	beq.n	edf6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    eda4:	42a2      	cmp	r2, r4
    eda6:	d104      	bne.n	edb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    eda8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    edac:	7840      	ldrb	r0, [r0, #1]
    edae:	7008      	strb	r0, [r1, #0]
    edb0:	e005      	b.n	edbe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    edb2:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    edb6:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    edba:	7849      	ldrb	r1, [r1, #1]
    edbc:	7041      	strb	r1, [r0, #1]
    edbe:	f1ba 0f00 	cmp.w	sl, #0
    edc2:	d011      	beq.n	ede8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    edc4:	b125      	cbz	r5, edd0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    edc6:	2100      	movs	r1, #0
    edc8:	f240 502f 	movw	r0, #1327	; 0x52f
    edcc:	f3af 8000 	nop.w
    edd0:	f89a 0000 	ldrb.w	r0, [sl]
    edd4:	42a0      	cmp	r0, r4
    edd6:	d107      	bne.n	ede8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    edd8:	b125      	cbz	r5, ede4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    edda:	2100      	movs	r1, #0
    eddc:	f240 5032 	movw	r0, #1330	; 0x532
    ede0:	f3af 8000 	nop.w
    ede4:	f88a b000 	strb.w	fp, [sl]
    ede8:	b15d      	cbz	r5, ee02 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    edea:	2100      	movs	r1, #0
    edec:	f240 5037 	movw	r0, #1335	; 0x537
    edf0:	f3af 8000 	nop.w
    edf4:	e000      	b.n	edf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    edf6:	b125      	cbz	r5, ee02 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    edf8:	2100      	movs	r1, #0
    edfa:	f640 30eb 	movw	r0, #3051	; 0xbeb
    edfe:	f3af 8000 	nop.w
    ee02:	481a      	ldr	r0, [pc, #104]	; (ee6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    ee04:	2800      	cmp	r0, #0
    ee06:	bf18      	it	ne
    ee08:	f3af 8000 	nopne.w
    ee0c:	f3ef 8410 	mrs	r4, PRIMASK
    ee10:	b672      	cpsid	i
    ee12:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    ee16:	f88d 0000 	strb.w	r0, [sp]
    ee1a:	f89d 0000 	ldrb.w	r0, [sp]
    ee1e:	b138      	cbz	r0, ee30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    ee20:	2d00      	cmp	r5, #0
    ee22:	bf1c      	itt	ne
    ee24:	2100      	movne	r1, #0
    ee26:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    ee2a:	f43f af4c 	beq.w	ecc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ee2e:	e787      	b.n	ed40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    ee30:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    ee34:	2001      	movs	r0, #1
    ee36:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    ee3a:	b154      	cbz	r4, ee52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ee3c:	2d00      	cmp	r5, #0
    ee3e:	bf08      	it	eq
    ee40:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee44:	2100      	movs	r1, #0
    ee46:	f640 30fe 	movw	r0, #3070	; 0xbfe
    ee4a:	f3af 8000 	nop.w
    ee4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee52:	4805      	ldr	r0, [pc, #20]	; (ee68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    ee54:	2800      	cmp	r0, #0
    ee56:	bf18      	it	ne
    ee58:	f3af 8000 	nopne.w
    ee5c:	b662      	cpsie	i
    ee5e:	e7ed      	b.n	ee3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    ee60:	200012e4 	.word	0x200012e4
	...

0000ee70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ee70:	b570      	push	{r4, r5, r6, lr}
    ee72:	460d      	mov	r5, r1
    ee74:	4606      	mov	r6, r0
    ee76:	f001 f9f1 	bl	1025c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ee7a:	480f      	ldr	r0, [pc, #60]	; (eeb8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ee7c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    ee80:	2400      	movs	r4, #0
    ee82:	3880      	subs	r0, #128	; 0x80
    ee84:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ee88:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ee8c:	b129      	cbz	r1, ee9a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ee8e:	1c61      	adds	r1, r4, #1
    ee90:	b2cc      	uxtb	r4, r1
    ee92:	2c20      	cmp	r4, #32
    ee94:	d3f8      	bcc.n	ee88 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ee96:	2020      	movs	r0, #32
    ee98:	bd70      	pop	{r4, r5, r6, pc}
    ee9a:	4808      	ldr	r0, [pc, #32]	; (eebc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ee9c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    eea0:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    eea4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    eea8:	4621      	mov	r1, r4
    eeaa:	6045      	str	r5, [r0, #4]
    eeac:	2001      	movs	r0, #1
    eeae:	f7fe fefd 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    eeb2:	4620      	mov	r0, r4
    eeb4:	bd70      	pop	{r4, r5, r6, pc}
    eeb6:	0000      	.short	0x0000
    eeb8:	200012e4 	.word	0x200012e4
    eebc:	20000f64 	.word	0x20000f64

0000eec0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    eec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eec4:	b083      	sub	sp, #12
    eec6:	f000 fb35 	bl	f534 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    eeca:	4605      	mov	r5, r0
    eecc:	f000 fdfe 	bl	facc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    eed0:	4c67      	ldr	r4, [pc, #412]	; (f070 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    eed2:	68a0      	ldr	r0, [r4, #8]
    eed4:	f1b0 3fff 	cmp.w	r0, #4294967295
    eed8:	bf1c      	itt	ne
    eeda:	f04f 30ff 	movne.w	r0, #4294967295
    eede:	60a0      	strne	r0, [r4, #8]
    eee0:	7fa0      	ldrb	r0, [r4, #30]
    eee2:	f8df b190 	ldr.w	fp, [pc, #400]	; f074 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    eee6:	b9a8      	cbnz	r0, ef14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    eee8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    eeec:	1a08      	subs	r0, r1, r0
    eeee:	0200      	lsls	r0, r0, #8
    eef0:	17c1      	asrs	r1, r0, #31
    eef2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    eef6:	1200      	asrs	r0, r0, #8
    eef8:	f44f 710c 	mov.w	r1, #560	; 0x230
    eefc:	f009 fc12 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ef00:	6921      	ldr	r1, [r4, #16]
    ef02:	4408      	add	r0, r1
    ef04:	1a28      	subs	r0, r5, r0
    ef06:	0200      	lsls	r0, r0, #8
    ef08:	17c1      	asrs	r1, r0, #31
    ef0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    ef0e:	1200      	asrs	r0, r0, #8
    ef10:	0fc0      	lsrs	r0, r0, #31
    ef12:	d013      	beq.n	ef3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    ef14:	7e60      	ldrb	r0, [r4, #25]
    ef16:	b328      	cbz	r0, ef64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    ef18:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    ef1c:	f88d 0000 	strb.w	r0, [sp]
    ef20:	f89d 0000 	ldrb.w	r0, [sp]
    ef24:	b1f0      	cbz	r0, ef64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    ef26:	f000 fc13 	bl	f750 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    ef2a:	bf00      	nop
    ef2c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    ef30:	b1f0      	cbz	r0, ef70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    ef32:	f240 4147 	movw	r1, #1095	; 0x447
    ef36:	2070      	movs	r0, #112	; 0x70
    ef38:	f001 fa1a 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ef3c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    ef40:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    ef44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ef48:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    ef4c:	6840      	ldr	r0, [r0, #4]
    ef4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ef52:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    ef56:	2108      	movs	r1, #8
    ef58:	4790      	blx	r2
    ef5a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    ef5e:	2070      	movs	r0, #112	; 0x70
    ef60:	f001 fa06 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ef64:	1ce8      	adds	r0, r5, #3
    ef66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ef6a:	f000 fae9 	bl	f540 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    ef6e:	e7dd      	b.n	ef2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    ef70:	f04f 0a01 	mov.w	sl, #1
    ef74:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    ef78:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    ef7c:	2820      	cmp	r0, #32
    ef7e:	d024      	beq.n	efca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    ef80:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    ef84:	2020      	movs	r0, #32
    ef86:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    ef8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    ef8e:	2600      	movs	r6, #0
    ef90:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    ef94:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    ef98:	4837      	ldr	r0, [pc, #220]	; (f078 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    ef9a:	6026      	str	r6, [r4, #0]
    ef9c:	7800      	ldrb	r0, [r0, #0]
    ef9e:	2802      	cmp	r0, #2
    efa0:	bf16      	itet	ne
    efa2:	2803      	cmpne	r0, #3
    efa4:	2001      	moveq	r0, #1
    efa6:	2000      	movne	r0, #0
    efa8:	7720      	strb	r0, [r4, #28]
    efaa:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    efae:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    efb2:	f899 0020 	ldrb.w	r0, [r9, #32]
    efb6:	2820      	cmp	r0, #32
    efb8:	d031      	beq.n	f01e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    efba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    efbe:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    efc2:	7d81      	ldrb	r1, [r0, #22]
    efc4:	2901      	cmp	r1, #1
    efc6:	d005      	beq.n	efd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    efc8:	e029      	b.n	f01e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    efca:	f240 414a 	movw	r1, #1098	; 0x44a
    efce:	2070      	movs	r0, #112	; 0x70
    efd0:	f001 f9ce 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    efd4:	46ab      	mov	fp, r5
    efd6:	f100 0508 	add.w	r5, r0, #8
    efda:	8a40      	ldrh	r0, [r0, #18]
    efdc:	aa01      	add	r2, sp, #4
    efde:	4669      	mov	r1, sp
    efe0:	f000 f94a 	bl	f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    efe4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    efe8:	2820      	cmp	r0, #32
    efea:	d004      	beq.n	eff6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    efec:	6920      	ldr	r0, [r4, #16]
    efee:	1d40      	adds	r0, r0, #5
    eff0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eff4:	e00b      	b.n	f00e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    eff6:	8968      	ldrh	r0, [r5, #10]
    eff8:	f10b 0b09 	add.w	fp, fp, #9
    effc:	b128      	cbz	r0, f00a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    effe:	f001 f93f 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    f002:	2800      	cmp	r0, #0
    f004:	bf08      	it	eq
    f006:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    f00a:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    f00e:	e9d5 2100 	ldrd	r2, r1, [r5]
    f012:	1a89      	subs	r1, r1, r2
    f014:	6028      	str	r0, [r5, #0]
    f016:	4408      	add	r0, r1
    f018:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f01c:	6068      	str	r0, [r5, #4]
    f01e:	4639      	mov	r1, r7
    f020:	2001      	movs	r0, #1
    f022:	f7fe fe73 	bl	dd0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    f026:	2800      	cmp	r0, #0
    f028:	d0f9      	beq.n	f01e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    f02a:	4814      	ldr	r0, [pc, #80]	; (f07c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    f02c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    f030:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    f034:	2802      	cmp	r0, #2
    f036:	d104      	bne.n	f042 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    f038:	463a      	mov	r2, r7
    f03a:	4641      	mov	r1, r8
    f03c:	2006      	movs	r0, #6
    f03e:	f7fe fe35 	bl	dcac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    f042:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    f046:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    f04a:	2820      	cmp	r0, #32
    f04c:	d003      	beq.n	f056 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    f04e:	480c      	ldr	r0, [pc, #48]	; (f080 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    f050:	7840      	ldrb	r0, [r0, #1]
    f052:	f001 fa5d 	bl	10510 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    f056:	7f20      	ldrb	r0, [r4, #28]
    f058:	2800      	cmp	r0, #0
    f05a:	bf04      	itt	eq
    f05c:	b003      	addeq	sp, #12
    f05e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f062:	f000 fd7d 	bl	fb60 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    f066:	7726      	strb	r6, [r4, #28]
    f068:	7766      	strb	r6, [r4, #29]
    f06a:	b003      	add	sp, #12
    f06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f070:	200012e4 	.word	0x200012e4
    f074:	20000f64 	.word	0x20000f64
    f078:	20000016 	.word	0x20000016
    f07c:	20001264 	.word	0x20001264
    f080:	20000014 	.word	0x20000014

0000f084 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    f084:	b510      	push	{r4, lr}
    f086:	4c32      	ldr	r4, [pc, #200]	; (f150 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    f088:	b082      	sub	sp, #8
    f08a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    f08e:	2920      	cmp	r1, #32
    f090:	d008      	beq.n	f0a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    f092:	68a1      	ldr	r1, [r4, #8]
    f094:	f1b1 3fff 	cmp.w	r1, #4294967295
    f098:	d009      	beq.n	f0ae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    f09a:	f640 21e9 	movw	r1, #2793	; 0xae9
    f09e:	2070      	movs	r0, #112	; 0x70
    f0a0:	f001 f966 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f0a4:	f640 21e8 	movw	r1, #2792	; 0xae8
    f0a8:	2070      	movs	r0, #112	; 0x70
    f0aa:	f001 f961 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f0ae:	6862      	ldr	r2, [r4, #4]
    f0b0:	4601      	mov	r1, r0
    f0b2:	4b28      	ldr	r3, [pc, #160]	; (f154 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    f0b4:	1850      	adds	r0, r2, r1
    f0b6:	429a      	cmp	r2, r3
    f0b8:	d904      	bls.n	f0c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    f0ba:	f240 6109 	movw	r1, #1545	; 0x609
    f0be:	2070      	movs	r0, #112	; 0x70
    f0c0:	f001 f956 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f0c4:	4a24      	ldr	r2, [pc, #144]	; (f158 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    f0c6:	4291      	cmp	r1, r2
    f0c8:	dd04      	ble.n	f0d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    f0ca:	f240 610a 	movw	r1, #1546	; 0x60a
    f0ce:	2070      	movs	r0, #112	; 0x70
    f0d0:	f001 f94e 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f0d4:	4a21      	ldr	r2, [pc, #132]	; (f15c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    f0d6:	4291      	cmp	r1, r2
    f0d8:	da04      	bge.n	f0e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    f0da:	f240 610b 	movw	r1, #1547	; 0x60b
    f0de:	2070      	movs	r0, #112	; 0x70
    f0e0:	f001 f946 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f0e4:	491e      	ldr	r1, [pc, #120]	; (f160 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    f0e6:	4281      	cmp	r1, r0
    f0e8:	bfdc      	itt	le
    f0ea:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    f0ee:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    f0f2:	dd05      	ble.n	f100 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    f0f4:	2800      	cmp	r0, #0
    f0f6:	bfbc      	itt	lt
    f0f8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    f0fc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    f100:	aa01      	add	r2, sp, #4
    f102:	4669      	mov	r1, sp
    f104:	f000 f8b8 	bl	f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    f108:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f10c:	280f      	cmp	r0, #15
    f10e:	bf8c      	ite	hi
    f110:	2001      	movhi	r0, #1
    f112:	2000      	movls	r0, #0
    f114:	9900      	ldr	r1, [sp, #0]
    f116:	4408      	add	r0, r1
    f118:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    f11c:	60a1      	str	r1, [r4, #8]
    f11e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    f122:	f88d 0000 	strb.w	r0, [sp]
    f126:	f89d 0000 	ldrb.w	r0, [sp]
    f12a:	2800      	cmp	r0, #0
    f12c:	bf04      	itt	eq
    f12e:	b002      	addeq	sp, #8
    f130:	bd10      	popeq	{r4, pc}
    f132:	2301      	movs	r3, #1
    f134:	2203      	movs	r2, #3
    f136:	2005      	movs	r0, #5
    f138:	f000 fb86 	bl	f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    f13c:	2800      	cmp	r0, #0
    f13e:	bf1c      	itt	ne
    f140:	b002      	addne	sp, #8
    f142:	bd10      	popne	{r4, pc}
    f144:	f640 21f1 	movw	r1, #2801	; 0xaf1
    f148:	2070      	movs	r0, #112	; 0x70
    f14a:	f001 f911 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f14e:	0000      	.short	0x0000
    f150:	200012e4 	.word	0x200012e4
    f154:	1e847fff 	.word	0x1e847fff
    f158:	07a12000 	.word	0x07a12000
    f15c:	f85ee000 	.word	0xf85ee000
    f160:	1e848000 	.word	0x1e848000

0000f164 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    f164:	b570      	push	{r4, r5, r6, lr}
    f166:	4c1e      	ldr	r4, [pc, #120]	; (f1e0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    f168:	2120      	movs	r1, #32
    f16a:	f884 1020 	strb.w	r1, [r4, #32]
    f16e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    f172:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    f176:	2000      	movs	r0, #0
    f178:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    f17c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    f180:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    f184:	1e42      	subs	r2, r0, #1
    f186:	60a2      	str	r2, [r4, #8]
    f188:	6020      	str	r0, [r4, #0]
    f18a:	77a0      	strb	r0, [r4, #30]
    f18c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    f190:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    f194:	7720      	strb	r0, [r4, #28]
    f196:	7760      	strb	r0, [r4, #29]
    f198:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    f19c:	4911      	ldr	r1, [pc, #68]	; (f1e4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    f19e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    f1a2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    f1a6:	7008      	strb	r0, [r1, #0]
    f1a8:	7048      	strb	r0, [r1, #1]
    f1aa:	8048      	strh	r0, [r1, #2]
    f1ac:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    f1b0:	2210      	movs	r2, #16
    f1b2:	7088      	strb	r0, [r1, #2]
    f1b4:	f801 0f04 	strb.w	r0, [r1, #4]!
    f1b8:	1e52      	subs	r2, r2, #1
    f1ba:	d1fa      	bne.n	f1b2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    f1bc:	4d0a      	ldr	r5, [pc, #40]	; (f1e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    f1be:	2601      	movs	r6, #1
    f1c0:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    f1c4:	20ff      	movs	r0, #255	; 0xff
    f1c6:	7028      	strb	r0, [r5, #0]
    f1c8:	4808      	ldr	r0, [pc, #32]	; (f1ec <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    f1ca:	f001 f983 	bl	104d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    f1ce:	7068      	strb	r0, [r5, #1]
    f1d0:	f001 f9de 	bl	10590 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    f1d4:	60a8      	str	r0, [r5, #8]
    f1d6:	f000 fd0b 	bl	fbf0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    f1da:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    f1de:	bd70      	pop	{r4, r5, r6, pc}
    f1e0:	200012e4 	.word	0x200012e4
    f1e4:	20000016 	.word	0x20000016
    f1e8:	20000014 	.word	0x20000014
    f1ec:	0000db69 	.word	0x0000db69

0000f1f0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    f1f0:	b570      	push	{r4, r5, r6, lr}
    f1f2:	4604      	mov	r4, r0
    f1f4:	4615      	mov	r5, r2
    f1f6:	4608      	mov	r0, r1
    f1f8:	f009 fa67 	bl	186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    f1fc:	4a0f      	ldr	r2, [pc, #60]	; (f23c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    f1fe:	1b01      	subs	r1, r0, r4
    f200:	1c53      	adds	r3, r2, #1
    f202:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    f206:	bf24      	itt	cs
    f208:	eba4 0c00 	subcs.w	ip, r4, r0
    f20c:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    f210:	d30b      	bcc.n	f22a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    f212:	428a      	cmp	r2, r1
    f214:	d203      	bcs.n	f21e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    f216:	1b11      	subs	r1, r2, r4
    f218:	4408      	add	r0, r1
    f21a:	1c41      	adds	r1, r0, #1
    f21c:	e005      	b.n	f22a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    f21e:	4562      	cmp	r2, ip
    f220:	d207      	bcs.n	f232 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    f222:	1a10      	subs	r0, r2, r0
    f224:	4420      	add	r0, r4
    f226:	1c40      	adds	r0, r0, #1
    f228:	4241      	negs	r1, r0
    f22a:	f101 000f 	add.w	r0, r1, #15
    f22e:	1a28      	subs	r0, r5, r0
    f230:	bd70      	pop	{r4, r5, r6, pc}
    f232:	f640 310c 	movw	r1, #2828	; 0xb0c
    f236:	2070      	movs	r0, #112	; 0x70
    f238:	f001 f89a 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f23c:	1e847fff 	.word	0x1e847fff

0000f240 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    f240:	0b41      	lsrs	r1, r0, #13
    f242:	f248 6237 	movw	r2, #34359	; 0x8637
    f246:	4351      	muls	r1, r2
    f248:	0c0a      	lsrs	r2, r1, #16
    f24a:	4b09      	ldr	r3, [pc, #36]	; (f270 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    f24c:	0251      	lsls	r1, r2, #9
    f24e:	fb02 0203 	mla	r2, r2, r3, r0
    f252:	4808      	ldr	r0, [pc, #32]	; (f274 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    f254:	4350      	muls	r0, r2
    f256:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    f25a:	306e      	adds	r0, #110	; 0x6e
    f25c:	0d40      	lsrs	r0, r0, #21
    f25e:	425b      	negs	r3, r3
    f260:	fb10 f303 	smulbb	r3, r0, r3
    f264:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    f268:	bf88      	it	hi
    f26a:	1c49      	addhi	r1, r1, #1
    f26c:	4408      	add	r0, r1
    f26e:	4770      	bx	lr
    f270:	ffffc2f7 	.word	0xffffc2f7
    f274:	00010c6f 	.word	0x00010c6f

0000f278 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    f278:	0b43      	lsrs	r3, r0, #13
    f27a:	f248 6c37 	movw	ip, #34359	; 0x8637
    f27e:	fb03 f30c 	mul.w	r3, r3, ip
    f282:	b430      	push	{r4, r5}
    f284:	0c1b      	lsrs	r3, r3, #16
    f286:	f8df c044 	ldr.w	ip, [pc, #68]	; f2cc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    f28a:	025c      	lsls	r4, r3, #9
    f28c:	fb03 030c 	mla	r3, r3, ip, r0
    f290:	480f      	ldr	r0, [pc, #60]	; (f2d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    f292:	4358      	muls	r0, r3
    f294:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    f298:	eb04 000c 	add.w	r0, r4, ip
    f29c:	f643 5409 	movw	r4, #15625	; 0x3d09
    f2a0:	fb1c f404 	smulbb	r4, ip, r4
    f2a4:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    f2a8:	f643 5508 	movw	r5, #15624	; 0x3d08
    f2ac:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    f2b0:	442c      	add	r4, r5
    f2b2:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    f2b6:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    f2ba:	bf84      	itt	hi
    f2bc:	f04f 0c00 	movhi.w	ip, #0
    f2c0:	1c40      	addhi	r0, r0, #1
    f2c2:	6008      	str	r0, [r1, #0]
    f2c4:	f882 c000 	strb.w	ip, [r2]
    f2c8:	bc30      	pop	{r4, r5}
    f2ca:	4770      	bx	lr
    f2cc:	ffffc2f7 	.word	0xffffc2f7
    f2d0:	00010c6f 	.word	0x00010c6f

0000f2d4 <MPSL_IRQ_RTC0_Handler>:
    f2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2d8:	4c36      	ldr	r4, [pc, #216]	; (f3b4 <MPSL_IRQ_RTC0_Handler+0xe0>)
    f2da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f2de:	f44f 6600 	mov.w	r6, #2048	; 0x800
    f2e2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    f2e6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    f2ea:	f04f 0500 	mov.w	r5, #0
    f2ee:	d019      	beq.n	f324 <MPSL_IRQ_RTC0_Handler+0x50>
    f2f0:	4831      	ldr	r0, [pc, #196]	; (f3b8 <MPSL_IRQ_RTC0_Handler+0xe4>)
    f2f2:	6800      	ldr	r0, [r0, #0]
    f2f4:	b1b0      	cbz	r0, f324 <MPSL_IRQ_RTC0_Handler+0x50>
    f2f6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    f2fa:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f2fe:	482f      	ldr	r0, [pc, #188]	; (f3bc <MPSL_IRQ_RTC0_Handler+0xe8>)
    f300:	6800      	ldr	r0, [r0, #0]
    f302:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f306:	1a40      	subs	r0, r0, r1
    f308:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f30c:	2802      	cmp	r0, #2
    f30e:	d302      	bcc.n	f316 <MPSL_IRQ_RTC0_Handler+0x42>
    f310:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f314:	d306      	bcc.n	f324 <MPSL_IRQ_RTC0_Handler+0x50>
    f316:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    f31a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f31e:	2004      	movs	r0, #4
    f320:	f7fe ff2c 	bl	e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f324:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f328:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    f32c:	d019      	beq.n	f362 <MPSL_IRQ_RTC0_Handler+0x8e>
    f32e:	4824      	ldr	r0, [pc, #144]	; (f3c0 <MPSL_IRQ_RTC0_Handler+0xec>)
    f330:	6800      	ldr	r0, [r0, #0]
    f332:	b1b0      	cbz	r0, f362 <MPSL_IRQ_RTC0_Handler+0x8e>
    f334:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    f338:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f33c:	4821      	ldr	r0, [pc, #132]	; (f3c4 <MPSL_IRQ_RTC0_Handler+0xf0>)
    f33e:	6800      	ldr	r0, [r0, #0]
    f340:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f344:	1a40      	subs	r0, r0, r1
    f346:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f34a:	2802      	cmp	r0, #2
    f34c:	d302      	bcc.n	f354 <MPSL_IRQ_RTC0_Handler+0x80>
    f34e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f352:	d306      	bcc.n	f362 <MPSL_IRQ_RTC0_Handler+0x8e>
    f354:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    f358:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f35c:	2005      	movs	r0, #5
    f35e:	f7fe ff0d 	bl	e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f362:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f366:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    f36a:	bf08      	it	eq
    f36c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f370:	4815      	ldr	r0, [pc, #84]	; (f3c8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    f372:	6800      	ldr	r0, [r0, #0]
    f374:	2800      	cmp	r0, #0
    f376:	bf08      	it	eq
    f378:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f37c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    f380:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    f384:	4811      	ldr	r0, [pc, #68]	; (f3cc <MPSL_IRQ_RTC0_Handler+0xf8>)
    f386:	6800      	ldr	r0, [r0, #0]
    f388:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    f38c:	1a40      	subs	r0, r0, r1
    f38e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f392:	2802      	cmp	r0, #2
    f394:	d304      	bcc.n	f3a0 <MPSL_IRQ_RTC0_Handler+0xcc>
    f396:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f39a:	bf38      	it	cc
    f39c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    f3a4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    f3a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f3ac:	2006      	movs	r0, #6
    f3ae:	f7fe bee5 	b.w	e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f3b2:	0000      	.short	0x0000
    f3b4:	4000b000 	.word	0x4000b000
    f3b8:	4000b140 	.word	0x4000b140
    f3bc:	4000b540 	.word	0x4000b540
    f3c0:	4000b144 	.word	0x4000b144
    f3c4:	4000b544 	.word	0x4000b544
    f3c8:	4000b148 	.word	0x4000b148
    f3cc:	4000b548 	.word	0x4000b548

0000f3d0 <MPSL_IRQ_TIMER0_Handler>:
    f3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3d4:	4d38      	ldr	r5, [pc, #224]	; (f4b8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    f3d6:	7828      	ldrb	r0, [r5, #0]
    f3d8:	2804      	cmp	r0, #4
    f3da:	d068      	beq.n	f4ae <MPSL_IRQ_TIMER0_Handler+0xde>
    f3dc:	1ce8      	adds	r0, r5, #3
    f3de:	2201      	movs	r2, #1
    f3e0:	7801      	ldrb	r1, [r0, #0]
    f3e2:	b159      	cbz	r1, f3fc <MPSL_IRQ_TIMER0_Handler+0x2c>
    f3e4:	2901      	cmp	r1, #1
    f3e6:	bf08      	it	eq
    f3e8:	706a      	strbeq	r2, [r5, #1]
    f3ea:	d002      	beq.n	f3f2 <MPSL_IRQ_TIMER0_Handler+0x22>
    f3ec:	7869      	ldrb	r1, [r5, #1]
    f3ee:	2900      	cmp	r1, #0
    f3f0:	d058      	beq.n	f4a4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    f3f2:	2102      	movs	r1, #2
    f3f4:	7001      	strb	r1, [r0, #0]
    f3f6:	7840      	ldrb	r0, [r0, #1]
    f3f8:	f000 fafa 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f3fc:	4c2f      	ldr	r4, [pc, #188]	; (f4bc <MPSL_IRQ_TIMER0_Handler+0xec>)
    f3fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f402:	f04f 0800 	mov.w	r8, #0
    f406:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    f40a:	f44f 7780 	mov.w	r7, #256	; 0x100
    f40e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    f412:	d00a      	beq.n	f42a <MPSL_IRQ_TIMER0_Handler+0x5a>
    f414:	482a      	ldr	r0, [pc, #168]	; (f4c0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    f416:	6800      	ldr	r0, [r0, #0]
    f418:	b138      	cbz	r0, f42a <MPSL_IRQ_TIMER0_Handler+0x5a>
    f41a:	2003      	movs	r0, #3
    f41c:	f000 fae8 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f420:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f424:	2003      	movs	r0, #3
    f426:	f7fe fea9 	bl	e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f42a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f42e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    f432:	d00a      	beq.n	f44a <MPSL_IRQ_TIMER0_Handler+0x7a>
    f434:	4823      	ldr	r0, [pc, #140]	; (f4c4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    f436:	6800      	ldr	r0, [r0, #0]
    f438:	b138      	cbz	r0, f44a <MPSL_IRQ_TIMER0_Handler+0x7a>
    f43a:	2002      	movs	r0, #2
    f43c:	f000 fad8 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f440:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f444:	2002      	movs	r0, #2
    f446:	f7fe fe99 	bl	e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f44a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f44e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    f452:	d00a      	beq.n	f46a <MPSL_IRQ_TIMER0_Handler+0x9a>
    f454:	481c      	ldr	r0, [pc, #112]	; (f4c8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    f456:	6800      	ldr	r0, [r0, #0]
    f458:	b138      	cbz	r0, f46a <MPSL_IRQ_TIMER0_Handler+0x9a>
    f45a:	2001      	movs	r0, #1
    f45c:	f000 fac8 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f460:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f464:	2001      	movs	r0, #1
    f466:	f7fe fe89 	bl	e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f46a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    f46e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    f472:	bf08      	it	eq
    f474:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f478:	4814      	ldr	r0, [pc, #80]	; (f4cc <MPSL_IRQ_TIMER0_Handler+0xfc>)
    f47a:	6800      	ldr	r0, [r0, #0]
    f47c:	2800      	cmp	r0, #0
    f47e:	bf08      	it	eq
    f480:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f484:	2000      	movs	r0, #0
    f486:	f000 fab3 	bl	f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    f48a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    f48e:	2004      	movs	r0, #4
    f490:	7028      	strb	r0, [r5, #0]
    f492:	f8c5 8008 	str.w	r8, [r5, #8]
    f496:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    f49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f49e:	2000      	movs	r0, #0
    f4a0:	f7fe be6c 	b.w	e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f4a4:	f240 316a 	movw	r1, #874	; 0x36a
    f4a8:	206c      	movs	r0, #108	; 0x6c
    f4aa:	f000 ff61 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f4b2:	2007      	movs	r0, #7
    f4b4:	f7fe be62 	b.w	e17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    f4b8:	20000020 	.word	0x20000020
    f4bc:	40008000 	.word	0x40008000
    f4c0:	4000814c 	.word	0x4000814c
    f4c4:	40008148 	.word	0x40008148
    f4c8:	40008144 	.word	0x40008144
    f4cc:	40008140 	.word	0x40008140
    f4d0:	2201      	movs	r2, #1
    f4d2:	0211      	lsls	r1, r2, #8
    f4d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f4d8:	2000      	movs	r0, #0
    f4da:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    f4de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    f4e2:	f3bf 8f4f 	dsb	sy
    f4e6:	f3bf 8f6f 	isb	sy
    f4ea:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    f4ee:	490e      	ldr	r1, [pc, #56]	; (f528 <MPSL_IRQ_TIMER0_Handler+0x158>)
    f4f0:	f841 2f04 	str.w	r2, [r1, #4]!
    f4f4:	1e43      	subs	r3, r0, #1
    f4f6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    f4fa:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    f4fe:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    f502:	4b0a      	ldr	r3, [pc, #40]	; (f52c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    f504:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f508:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    f50c:	1d1b      	adds	r3, r3, #4
    f50e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f512:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    f516:	1d1b      	adds	r3, r3, #4
    f518:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    f51c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    f520:	60ca      	str	r2, [r1, #12]
    f522:	4903      	ldr	r1, [pc, #12]	; (f530 <MPSL_IRQ_TIMER0_Handler+0x160>)
    f524:	7048      	strb	r0, [r1, #1]
    f526:	4770      	bx	lr
    f528:	40008000 	.word	0x40008000
    f52c:	40008004 	.word	0x40008004
    f530:	20000020 	.word	0x20000020

0000f534 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    f534:	4801      	ldr	r0, [pc, #4]	; (f53c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    f536:	6800      	ldr	r0, [r0, #0]
    f538:	4770      	bx	lr
    f53a:	0000      	.short	0x0000
    f53c:	4000b504 	.word	0x4000b504

0000f540 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    f540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f544:	4e47      	ldr	r6, [pc, #284]	; (f664 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    f546:	4605      	mov	r5, r0
    f548:	1ef7      	subs	r7, r6, #3
    f54a:	7832      	ldrb	r2, [r6, #0]
    f54c:	68f9      	ldr	r1, [r7, #12]
    f54e:	2a01      	cmp	r2, #1
    f550:	bf04      	itt	eq
    f552:	42a9      	cmpeq	r1, r5
    f554:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f558:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    f55c:	4b42      	ldr	r3, [pc, #264]	; (f668 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    f55e:	6018      	str	r0, [r3, #0]
    f560:	4842      	ldr	r0, [pc, #264]	; (f66c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    f562:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    f566:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    f56a:	f100 0304 	add.w	r3, r0, #4
    f56e:	f04f 0400 	mov.w	r4, #0
    f572:	2a00      	cmp	r2, #0
    f574:	d061      	beq.n	f63a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    f576:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    f57a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    f57e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    f582:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    f586:	4b3a      	ldr	r3, [pc, #232]	; (f670 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    f588:	681b      	ldr	r3, [r3, #0]
    f58a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    f58e:	f04f 0801 	mov.w	r8, #1
    f592:	2b00      	cmp	r3, #0
    f594:	bf04      	itt	eq
    f596:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    f59a:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    f59e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f5a2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    f5a6:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    f5aa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    f5ae:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    f5b2:	1aeb      	subs	r3, r5, r3
    f5b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f5b8:	2b02      	cmp	r3, #2
    f5ba:	d34b      	bcc.n	f654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    f5bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    f5c0:	d248      	bcs.n	f654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    f5c2:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    f5c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f5ca:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    f5ce:	b132      	cbz	r2, f5de <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    f5d0:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    f5d4:	1a8a      	subs	r2, r1, r2
    f5d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f5da:	2a02      	cmp	r2, #2
    f5dc:	d3f8      	bcc.n	f5d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    f5de:	f8c7 8008 	str.w	r8, [r7, #8]
    f5e2:	703c      	strb	r4, [r7, #0]
    f5e4:	f7ff ff74 	bl	f4d0 <MPSL_IRQ_TIMER0_Handler+0x100>
    f5e8:	4822      	ldr	r0, [pc, #136]	; (f674 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    f5ea:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    f5ee:	f364 0101 	bfi	r1, r4, #0, #2
    f5f2:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    f5f6:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    f5fa:	2102      	movs	r1, #2
    f5fc:	f361 0201 	bfi	r2, r1, #0, #2
    f600:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    f604:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    f608:	2104      	movs	r1, #4
    f60a:	f361 0203 	bfi	r2, r1, #0, #4
    f60e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    f612:	f8c0 800c 	str.w	r8, [r0, #12]
    f616:	68b9      	ldr	r1, [r7, #8]
    f618:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    f61c:	1580      	asrs	r0, r0, #22
    f61e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    f622:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    f626:	4914      	ldr	r1, [pc, #80]	; (f678 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    f628:	05c0      	lsls	r0, r0, #23
    f62a:	6008      	str	r0, [r1, #0]
    f62c:	2004      	movs	r0, #4
    f62e:	60fd      	str	r5, [r7, #12]
    f630:	7070      	strb	r0, [r6, #1]
    f632:	f886 8000 	strb.w	r8, [r6]
    f636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f63a:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    f63e:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    f642:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    f646:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    f64a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    f64e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    f652:	e798      	b.n	f586 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    f654:	2100      	movs	r1, #0
    f656:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    f65a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    f65e:	206c      	movs	r0, #108	; 0x6c
    f660:	f000 fe86 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f664:	20000023 	.word	0x20000023
    f668:	4001f508 	.word	0x4001f508
    f66c:	4000b000 	.word	0x4000b000
    f670:	4000b148 	.word	0x4000b148
    f674:	40008000 	.word	0x40008000
    f678:	4001f504 	.word	0x4001f504

0000f67c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    f67c:	b570      	push	{r4, r5, r6, lr}
    f67e:	4c2c      	ldr	r4, [pc, #176]	; (f730 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    f680:	68e2      	ldr	r2, [r4, #12]
    f682:	4282      	cmp	r2, r0
    f684:	bf14      	ite	ne
    f686:	2101      	movne	r1, #1
    f688:	2100      	moveq	r1, #0
    f68a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; f734 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    f68e:	f89c 5000 	ldrb.w	r5, [ip]
    f692:	2d02      	cmp	r5, #2
    f694:	d002      	beq.n	f69c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    f696:	2900      	cmp	r1, #0
    f698:	d037      	beq.n	f70a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    f69a:	e002      	b.n	f6a2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    f69c:	2900      	cmp	r1, #0
    f69e:	bf08      	it	eq
    f6a0:	bd70      	popeq	{r4, r5, r6, pc}
    f6a2:	7861      	ldrb	r1, [r4, #1]
    f6a4:	b381      	cbz	r1, f708 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    f6a6:	4b24      	ldr	r3, [pc, #144]	; (f738 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    f6a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f6ac:	6019      	str	r1, [r3, #0]
    f6ae:	138b      	asrs	r3, r1, #14
    f6b0:	4922      	ldr	r1, [pc, #136]	; (f73c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    f6b2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    f6b6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    f6ba:	2300      	movs	r3, #0
    f6bc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    f6c0:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    f6c4:	1ac3      	subs	r3, r0, r3
    f6c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f6ca:	2b02      	cmp	r3, #2
    f6cc:	d327      	bcc.n	f71e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    f6ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    f6d2:	d224      	bcs.n	f71e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    f6d4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    f6d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f6dc:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    f6e0:	b13d      	cbz	r5, f6f2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    f6e2:	bf00      	nop
    f6e4:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    f6e8:	1ad3      	subs	r3, r2, r3
    f6ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f6ee:	2b02      	cmp	r3, #2
    f6f0:	d3f8      	bcc.n	f6e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    f6f2:	4b13      	ldr	r3, [pc, #76]	; (f740 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    f6f4:	2102      	movs	r1, #2
    f6f6:	074a      	lsls	r2, r1, #29
    f6f8:	601a      	str	r2, [r3, #0]
    f6fa:	60e0      	str	r0, [r4, #12]
    f6fc:	2004      	movs	r0, #4
    f6fe:	f88c 0001 	strb.w	r0, [ip, #1]
    f702:	f88c 1000 	strb.w	r1, [ip]
    f706:	bd70      	pop	{r4, r5, r6, pc}
    f708:	e004      	b.n	f714 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    f70a:	f240 2102 	movw	r1, #514	; 0x202
    f70e:	206c      	movs	r0, #108	; 0x6c
    f710:	f000 fe2e 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f714:	f240 2106 	movw	r1, #518	; 0x206
    f718:	206c      	movs	r0, #108	; 0x6c
    f71a:	f000 fe29 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f71e:	2000      	movs	r0, #0
    f720:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    f724:	f240 2112 	movw	r1, #530	; 0x212
    f728:	206c      	movs	r0, #108	; 0x6c
    f72a:	f000 fe21 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f72e:	0000      	.short	0x0000
    f730:	20000020 	.word	0x20000020
    f734:	20000023 	.word	0x20000023
    f738:	4001f508 	.word	0x4001f508
    f73c:	4000b000 	.word	0x4000b000
    f740:	4001f504 	.word	0x4001f504

0000f744 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    f744:	4801      	ldr	r0, [pc, #4]	; (f74c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    f746:	68c0      	ldr	r0, [r0, #12]
    f748:	4770      	bx	lr
    f74a:	0000      	.short	0x0000
    f74c:	20000020 	.word	0x20000020

0000f750 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    f750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f754:	4936      	ldr	r1, [pc, #216]	; (f830 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    f756:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    f75a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    f75e:	4d35      	ldr	r5, [pc, #212]	; (f834 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    f760:	1d0b      	adds	r3, r1, #4
    f762:	2200      	movs	r2, #0
    f764:	7828      	ldrb	r0, [r5, #0]
    f766:	b168      	cbz	r0, f784 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    f768:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    f76c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    f770:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    f774:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    f778:	4b2f      	ldr	r3, [pc, #188]	; (f838 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    f77a:	681b      	ldr	r3, [r3, #0]
    f77c:	f04f 0c01 	mov.w	ip, #1
    f780:	b99b      	cbnz	r3, f7aa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    f782:	e00c      	b.n	f79e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    f784:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    f788:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    f78c:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    f790:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    f794:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    f798:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    f79c:	e7ec      	b.n	f778 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    f79e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    f7a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    f7a6:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    f7aa:	2802      	cmp	r0, #2
    f7ac:	d004      	beq.n	f7b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    f7ae:	f240 211e 	movw	r1, #542	; 0x21e
    f7b2:	206c      	movs	r0, #108	; 0x6c
    f7b4:	f000 fddc 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f7b8:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    f7bc:	4c1f      	ldr	r4, [pc, #124]	; (f83c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    f7be:	1cc0      	adds	r0, r0, #3
    f7c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f7c4:	68e3      	ldr	r3, [r4, #12]
    f7c6:	4e1e      	ldr	r6, [pc, #120]	; (f840 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    f7c8:	4298      	cmp	r0, r3
    f7ca:	d00c      	beq.n	f7e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f7cc:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    f7d0:	1bdf      	subs	r7, r3, r7
    f7d2:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    f7d6:	2f04      	cmp	r7, #4
    f7d8:	d305      	bcc.n	f7e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f7da:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    f7de:	d202      	bcs.n	f7e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    f7e0:	f7ff feae 	bl	f540 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    f7e4:	e01f      	b.n	f826 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    f7e6:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    f7ea:	1a18      	subs	r0, r3, r0
    f7ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f7f0:	2802      	cmp	r0, #2
    f7f2:	d315      	bcc.n	f820 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    f7f4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f7f8:	d212      	bcs.n	f820 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    f7fa:	4912      	ldr	r1, [pc, #72]	; (f844 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    f7fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f800:	6008      	str	r0, [r1, #0]
    f802:	f8c4 c008 	str.w	ip, [r4, #8]
    f806:	7022      	strb	r2, [r4, #0]
    f808:	f8c6 c004 	str.w	ip, [r6, #4]
    f80c:	f8c6 c00c 	str.w	ip, [r6, #12]
    f810:	0040      	lsls	r0, r0, #1
    f812:	1f09      	subs	r1, r1, #4
    f814:	6008      	str	r0, [r1, #0]
    f816:	2004      	movs	r0, #4
    f818:	7068      	strb	r0, [r5, #1]
    f81a:	f885 c000 	strb.w	ip, [r5]
    f81e:	e002      	b.n	f826 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    f820:	f8c4 c008 	str.w	ip, [r4, #8]
    f824:	7022      	strb	r2, [r4, #0]
    f826:	68a0      	ldr	r0, [r4, #8]
    f828:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f830:	4000b000 	.word	0x4000b000
    f834:	20000023 	.word	0x20000023
    f838:	4000b148 	.word	0x4000b148
    f83c:	20000020 	.word	0x20000020
    f840:	40008000 	.word	0x40008000
    f844:	4001f508 	.word	0x4001f508

0000f848 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    f848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f84c:	f8df c190 	ldr.w	ip, [pc, #400]	; f9e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    f850:	2600      	movs	r6, #0
    f852:	2701      	movs	r7, #1
    f854:	f89c 4000 	ldrb.w	r4, [ip]
    f858:	f89c c001 	ldrb.w	ip, [ip, #1]
    f85c:	f44f 75a0 	mov.w	r5, #320	; 0x140
    f860:	2807      	cmp	r0, #7
    f862:	d27b      	bcs.n	f95c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    f864:	e8df f000 	tbb	[pc, r0]
    f868:	04040404 	.word	0x04040404
    f86c:	006c6c6c 	.word	0x006c6c6c
    f870:	f8df 8170 	ldr.w	r8, [pc, #368]	; f9e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    f874:	f8d8 900c 	ldr.w	r9, [r8, #12]
    f878:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    f87c:	bf04      	itt	eq
    f87e:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    f882:	f1b8 0f00 	cmpeq.w	r8, #0
    f886:	d002      	beq.n	f88e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    f888:	2c02      	cmp	r4, #2
    f88a:	d005      	beq.n	f898 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    f88c:	e02c      	b.n	f8e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    f88e:	f240 2151 	movw	r1, #593	; 0x251
    f892:	206c      	movs	r0, #108	; 0x6c
    f894:	f000 fd6c 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f898:	f1ac 0804 	sub.w	r8, ip, #4
    f89c:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    f8a0:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    f8a4:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    f8a8:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    f8ac:	2500      	movs	r5, #0
    f8ae:	2c01      	cmp	r4, #1
    f8b0:	d002      	beq.n	f8b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    f8b2:	2c02      	cmp	r4, #2
    f8b4:	d00b      	beq.n	f8ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    f8b6:	e014      	b.n	f8e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    f8b8:	f1bc 0f04 	cmp.w	ip, #4
    f8bc:	bf24      	itt	cs
    f8be:	f8d8 9000 	ldrcs.w	r9, [r8]
    f8c2:	f1b9 0f00 	cmpcs.w	r9, #0
    f8c6:	bf08      	it	eq
    f8c8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    f8cc:	e009      	b.n	f8e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    f8ce:	f1bc 0f04 	cmp.w	ip, #4
    f8d2:	bf24      	itt	cs
    f8d4:	f8d8 9000 	ldrcs.w	r9, [r8]
    f8d8:	f1b9 0f00 	cmpcs.w	r9, #0
    f8dc:	bf08      	it	eq
    f8de:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    f8e2:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    f8e6:	d1e1      	bne.n	f8ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    f8e8:	4c3f      	ldr	r4, [pc, #252]	; (f9e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    f8ea:	f100 0c10 	add.w	ip, r0, #16
    f8ee:	fa07 fc0c 	lsl.w	ip, r7, ip
    f8f2:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    f8f6:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    f8fa:	b1c2      	cbz	r2, f92e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    f8fc:	f04f 0840 	mov.w	r8, #64	; 0x40
    f900:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    f904:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    f908:	44a0      	add	r8, r4
    f90a:	f8c8 7000 	str.w	r7, [r8]
    f90e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    f912:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    f916:	eba1 0000 	sub.w	r0, r1, r0
    f91a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f91e:	4282      	cmp	r2, r0
    f920:	bf98      	it	ls
    f922:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    f926:	bf28      	it	cs
    f928:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    f92c:	d250      	bcs.n	f9d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    f92e:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    f932:	2b01      	cmp	r3, #1
    f934:	bf08      	it	eq
    f936:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    f93a:	2001      	movs	r0, #1
    f93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f940:	b134      	cbz	r4, f950 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    f942:	4584      	cmp	ip, r0
    f944:	d104      	bne.n	f950 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    f946:	f44f 711d 	mov.w	r1, #628	; 0x274
    f94a:	206c      	movs	r0, #108	; 0x6c
    f94c:	f000 fd10 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f950:	f1a0 0c04 	sub.w	ip, r0, #4
    f954:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    f958:	2b01      	cmp	r3, #1
    f95a:	e000      	b.n	f95e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    f95c:	e03b      	b.n	f9d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    f95e:	bf0c      	ite	eq
    f960:	f04f 0801 	moveq.w	r8, #1
    f964:	f04f 0800 	movne.w	r8, #0
    f968:	2c03      	cmp	r4, #3
    f96a:	d304      	bcc.n	f976 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    f96c:	f240 114d 	movw	r1, #333	; 0x14d
    f970:	206c      	movs	r0, #108	; 0x6c
    f972:	f000 fcfd 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f976:	f8df c074 	ldr.w	ip, [pc, #116]	; f9ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    f97a:	f104 0310 	add.w	r3, r4, #16
    f97e:	fa07 f303 	lsl.w	r3, r7, r3
    f982:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    f986:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    f98a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    f98e:	f84c 6004 	str.w	r6, [ip, r4]
    f992:	1f00      	subs	r0, r0, #4
    f994:	b2c0      	uxtb	r0, r0
    f996:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    f99a:	b16a      	cbz	r2, f9b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    f99c:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    f9a0:	1b0c      	subs	r4, r1, r4
    f9a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    f9a6:	42a2      	cmp	r2, r4
    f9a8:	bf98      	it	ls
    f9aa:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    f9ae:	bf24      	itt	cs
    f9b0:	2100      	movcs	r1, #0
    f9b2:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    f9b6:	d20b      	bcs.n	f9d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    f9b8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    f9bc:	f1b8 0f00 	cmp.w	r8, #0
    f9c0:	bf18      	it	ne
    f9c2:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    f9c6:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    f9ca:	2001      	movs	r0, #1
    f9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f9d0:	2000      	movs	r0, #0
    f9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f9d6:	f240 2179 	movw	r1, #633	; 0x279
    f9da:	206c      	movs	r0, #108	; 0x6c
    f9dc:	f000 fcc8 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f9e0:	20000023 	.word	0x20000023
    f9e4:	20000020 	.word	0x20000020
    f9e8:	40008000 	.word	0x40008000
    f9ec:	4000b000 	.word	0x4000b000

0000f9f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    f9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f9f4:	2600      	movs	r6, #0
    f9f6:	f44f 77a0 	mov.w	r7, #320	; 0x140
    f9fa:	f04f 0801 	mov.w	r8, #1
    f9fe:	2807      	cmp	r0, #7
    fa00:	d251      	bcs.n	faa6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    fa02:	e8df f000 	tbb	[pc, r0]
    fa06:	0404      	.short	0x0404
    fa08:	19190404 	.word	0x19190404
    fa0c:	0019      	.short	0x0019
    fa0e:	f100 0110 	add.w	r1, r0, #16
    fa12:	fa08 f201 	lsl.w	r2, r8, r1
    fa16:	4926      	ldr	r1, [pc, #152]	; (fab0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    fa18:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    fa1c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    fa20:	2200      	movs	r2, #0
    fa22:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    fa26:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    fa2a:	508e      	str	r6, [r1, r2]
    fa2c:	4921      	ldr	r1, [pc, #132]	; (fab4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    fa2e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    fa32:	9000      	str	r0, [sp, #0]
    fa34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fa38:	4d1f      	ldr	r5, [pc, #124]	; (fab8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    fa3a:	1f01      	subs	r1, r0, #4
    fa3c:	b2cc      	uxtb	r4, r1
    fa3e:	7829      	ldrb	r1, [r5, #0]
    fa40:	b179      	cbz	r1, fa62 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    fa42:	786a      	ldrb	r2, [r5, #1]
    fa44:	4282      	cmp	r2, r0
    fa46:	d10c      	bne.n	fa62 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    fa48:	4a1c      	ldr	r2, [pc, #112]	; (fabc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    fa4a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    fa4e:	6010      	str	r0, [r2, #0]
    fa50:	2901      	cmp	r1, #1
    fa52:	bf08      	it	eq
    fa54:	f7ff fd3c 	bleq	f4d0 <MPSL_IRQ_TIMER0_Handler+0x100>
    fa58:	702e      	strb	r6, [r5, #0]
    fa5a:	4919      	ldr	r1, [pc, #100]	; (fac0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    fa5c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    fa60:	60c8      	str	r0, [r1, #12]
    fa62:	f104 0010 	add.w	r0, r4, #16
    fa66:	fa08 f100 	lsl.w	r1, r8, r0
    fa6a:	4816      	ldr	r0, [pc, #88]	; (fac4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    fa6c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    fa70:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    fa74:	00a1      	lsls	r1, r4, #2
    fa76:	4401      	add	r1, r0
    fa78:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    fa7c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    fa80:	1a89      	subs	r1, r1, r2
    fa82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    fa86:	2902      	cmp	r1, #2
    fa88:	d307      	bcc.n	fa9a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    fa8a:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    fa8e:	2100      	movs	r1, #0
    fa90:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    fa94:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    fa98:	5046      	str	r6, [r0, r1]
    fa9a:	480b      	ldr	r0, [pc, #44]	; (fac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    fa9c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    faa0:	9000      	str	r0, [sp, #0]
    faa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    faa6:	f240 21f1 	movw	r1, #753	; 0x2f1
    faaa:	206c      	movs	r0, #108	; 0x6c
    faac:	f000 fc60 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fab0:	40008000 	.word	0x40008000
    fab4:	40008140 	.word	0x40008140
    fab8:	20000023 	.word	0x20000023
    fabc:	4001f508 	.word	0x4001f508
    fac0:	20000020 	.word	0x20000020
    fac4:	4000b000 	.word	0x4000b000
    fac8:	4000b140 	.word	0x4000b140

0000facc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    facc:	4920      	ldr	r1, [pc, #128]	; (fb50 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    face:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    fad2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    fad6:	481f      	ldr	r0, [pc, #124]	; (fb54 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    fad8:	1d0a      	adds	r2, r1, #4
    fada:	7803      	ldrb	r3, [r0, #0]
    fadc:	2000      	movs	r0, #0
    fade:	b15b      	cbz	r3, faf8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    fae0:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    fae4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    fae8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    faec:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    faf0:	4919      	ldr	r1, [pc, #100]	; (fb58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    faf2:	6809      	ldr	r1, [r1, #0]
    faf4:	b999      	cbnz	r1, fb1e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    faf6:	e00c      	b.n	fb12 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    faf8:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    fafc:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    fb00:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    fb04:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    fb08:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fb0c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    fb10:	e7ee      	b.n	faf0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    fb12:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fb16:	f44f 6100 	mov.w	r1, #2048	; 0x800
    fb1a:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    fb1e:	490f      	ldr	r1, [pc, #60]	; (fb5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    fb20:	f04f 32ff 	mov.w	r2, #4294967295
    fb24:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    fb28:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    fb2c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    fb30:	1d0a      	adds	r2, r1, #4
    fb32:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fb36:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    fb3a:	1d12      	adds	r2, r2, #4
    fb3c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fb40:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    fb44:	1d12      	adds	r2, r2, #4
    fb46:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    fb4a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    fb4e:	4770      	bx	lr
    fb50:	4000b000 	.word	0x4000b000
    fb54:	20000023 	.word	0x20000023
    fb58:	4000b148 	.word	0x4000b148
    fb5c:	40008000 	.word	0x40008000

0000fb60 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    fb60:	4808      	ldr	r0, [pc, #32]	; (fb84 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    fb62:	f990 0002 	ldrsb.w	r0, [r0, #2]
    fb66:	2800      	cmp	r0, #0
    fb68:	bfb8      	it	lt
    fb6a:	4770      	bxlt	lr
    fb6c:	f000 011f 	and.w	r1, r0, #31
    fb70:	2201      	movs	r2, #1
    fb72:	fa02 f101 	lsl.w	r1, r2, r1
    fb76:	0940      	lsrs	r0, r0, #5
    fb78:	0080      	lsls	r0, r0, #2
    fb7a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fb7e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    fb82:	4770      	bx	lr
    fb84:	20000020 	.word	0x20000020

0000fb88 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    fb88:	b510      	push	{r4, lr}
    fb8a:	2807      	cmp	r0, #7
    fb8c:	d20d      	bcs.n	fbaa <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    fb8e:	e8df f000 	tbb	[pc, r0]
    fb92:	0404      	.short	0x0404
    fb94:	06060404 	.word	0x06060404
    fb98:	0006      	.short	0x0006
    fb9a:	4906      	ldr	r1, [pc, #24]	; (fbb4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    fb9c:	e002      	b.n	fba4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    fb9e:	1f00      	subs	r0, r0, #4
    fba0:	4905      	ldr	r1, [pc, #20]	; (fbb8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    fba2:	b2c0      	uxtb	r0, r0
    fba4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    fba8:	bd10      	pop	{r4, pc}
    fbaa:	f240 219d 	movw	r1, #669	; 0x29d
    fbae:	206c      	movs	r0, #108	; 0x6c
    fbb0:	f000 fbde 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fbb4:	40008140 	.word	0x40008140
    fbb8:	4000b140 	.word	0x4000b140

0000fbbc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    fbbc:	b510      	push	{r4, lr}
    fbbe:	2807      	cmp	r0, #7
    fbc0:	d20d      	bcs.n	fbde <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    fbc2:	e8df f000 	tbb	[pc, r0]
    fbc6:	0404      	.short	0x0404
    fbc8:	06060404 	.word	0x06060404
    fbcc:	0006      	.short	0x0006
    fbce:	4906      	ldr	r1, [pc, #24]	; (fbe8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    fbd0:	e002      	b.n	fbd8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    fbd2:	1f00      	subs	r0, r0, #4
    fbd4:	4905      	ldr	r1, [pc, #20]	; (fbec <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    fbd6:	b2c0      	uxtb	r0, r0
    fbd8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    fbdc:	bd10      	pop	{r4, pc}
    fbde:	f240 219d 	movw	r1, #669	; 0x29d
    fbe2:	206c      	movs	r0, #108	; 0x6c
    fbe4:	f000 fbc4 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fbe8:	40008140 	.word	0x40008140
    fbec:	4000b140 	.word	0x4000b140

0000fbf0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    fbf0:	b510      	push	{r4, lr}
    fbf2:	481c      	ldr	r0, [pc, #112]	; (fc64 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    fbf4:	2400      	movs	r4, #0
    fbf6:	2104      	movs	r1, #4
    fbf8:	7004      	strb	r4, [r0, #0]
    fbfa:	1ec0      	subs	r0, r0, #3
    fbfc:	7001      	strb	r1, [r0, #0]
    fbfe:	0589      	lsls	r1, r1, #22
    fc00:	60c1      	str	r1, [r0, #12]
    fc02:	f7ff fc65 	bl	f4d0 <MPSL_IRQ_TIMER0_Handler+0x100>
    fc06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fc0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fc0e:	f04f 0c01 	mov.w	ip, #1
    fc12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    fc16:	f3bf 8f4f 	dsb	sy
    fc1a:	f3bf 8f6f 	isb	sy
    fc1e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    fc22:	4811      	ldr	r0, [pc, #68]	; (fc68 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    fc24:	f8c0 c004 	str.w	ip, [r0, #4]
    fc28:	f8c0 c008 	str.w	ip, [r0, #8]
    fc2c:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    fc30:	2900      	cmp	r1, #0
    fc32:	d1fb      	bne.n	fc2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    fc34:	1e49      	subs	r1, r1, #1
    fc36:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    fc3a:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    fc3e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    fc42:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    fc46:	4909      	ldr	r1, [pc, #36]	; (fc6c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    fc48:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    fc4c:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    fc50:	1d09      	adds	r1, r1, #4
    fc52:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    fc56:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    fc5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fc5e:	f8c0 c000 	str.w	ip, [r0]
    fc62:	bd10      	pop	{r4, pc}
    fc64:	20000023 	.word	0x20000023
    fc68:	4000b000 	.word	0x4000b000
    fc6c:	4000b004 	.word	0x4000b004

0000fc70 <MPSL_IRQ_CLOCK_Handler>:
    fc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc74:	4c16      	ldr	r4, [pc, #88]	; (fcd0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    fc76:	7a60      	ldrb	r0, [r4, #9]
    fc78:	2800      	cmp	r0, #0
    fc7a:	d027      	beq.n	fccc <MPSL_IRQ_CLOCK_Handler+0x5c>
    fc7c:	f44f 7180 	mov.w	r1, #256	; 0x100
    fc80:	058d      	lsls	r5, r1, #22
    fc82:	4628      	mov	r0, r5
    fc84:	f008 fd72 	bl	1876c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fc88:	4680      	mov	r8, r0
    fc8a:	f44f 7182 	mov.w	r1, #260	; 0x104
    fc8e:	4628      	mov	r0, r5
    fc90:	f008 fd6c 	bl	1876c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fc94:	2600      	movs	r6, #0
    fc96:	4607      	mov	r7, r0
    fc98:	f1b8 0f00 	cmp.w	r8, #0
    fc9c:	d009      	beq.n	fcb2 <MPSL_IRQ_CLOCK_Handler+0x42>
    fc9e:	2001      	movs	r0, #1
    fca0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    fca4:	7920      	ldrb	r0, [r4, #4]
    fca6:	b120      	cbz	r0, fcb2 <MPSL_IRQ_CLOCK_Handler+0x42>
    fca8:	7126      	strb	r6, [r4, #4]
    fcaa:	69e0      	ldr	r0, [r4, #28]
    fcac:	b108      	cbz	r0, fcb2 <MPSL_IRQ_CLOCK_Handler+0x42>
    fcae:	4780      	blx	r0
    fcb0:	61e6      	str	r6, [r4, #28]
    fcb2:	b137      	cbz	r7, fcc2 <MPSL_IRQ_CLOCK_Handler+0x52>
    fcb4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    fcb8:	2002      	movs	r0, #2
    fcba:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    fcbe:	f000 fa8b 	bl	101d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    fcc2:	4640      	mov	r0, r8
    fcc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fcc8:	f000 b85a 	b.w	fd80 <MPSL_IRQ_CLOCK_Handler+0x110>
    fccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcd0:	20000030 	.word	0x20000030
    fcd4:	b510      	push	{r4, lr}
    fcd6:	f008 fdf3 	bl	188c0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    fcda:	b930      	cbnz	r0, fcea <MPSL_IRQ_CLOCK_Handler+0x7a>
    fcdc:	f008 fe11 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fce0:	b918      	cbnz	r0, fcea <MPSL_IRQ_CLOCK_Handler+0x7a>
    fce2:	f008 fe44 	bl	1896e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fce6:	2800      	cmp	r0, #0
    fce8:	d002      	beq.n	fcf0 <MPSL_IRQ_CLOCK_Handler+0x80>
    fcea:	4902      	ldr	r1, [pc, #8]	; (fcf4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    fcec:	2002      	movs	r0, #2
    fcee:	6008      	str	r0, [r1, #0]
    fcf0:	bd10      	pop	{r4, pc}
    fcf2:	0000      	.short	0x0000
    fcf4:	40000c34 	.word	0x40000c34
    fcf8:	b570      	push	{r4, r5, r6, lr}
    fcfa:	f000 f987 	bl	1000c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    fcfe:	f000 fabf 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    fd02:	4c09      	ldr	r4, [pc, #36]	; (fd28 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    fd04:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    fd08:	b130      	cbz	r0, fd18 <MPSL_IRQ_CLOCK_Handler+0xa8>
    fd0a:	f7ff ffe3 	bl	fcd4 <MPSL_IRQ_CLOCK_Handler+0x64>
    fd0e:	2001      	movs	r0, #1
    fd10:	6128      	str	r0, [r5, #16]
    fd12:	2004      	movs	r0, #4
    fd14:	72a0      	strb	r0, [r4, #10]
    fd16:	e004      	b.n	fd22 <MPSL_IRQ_CLOCK_Handler+0xb2>
    fd18:	2003      	movs	r0, #3
    fd1a:	72a0      	strb	r0, [r4, #10]
    fd1c:	2001      	movs	r0, #1
    fd1e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    fd22:	2000      	movs	r0, #0
    fd24:	71e0      	strb	r0, [r4, #7]
    fd26:	bd70      	pop	{r4, r5, r6, pc}
    fd28:	20000030 	.word	0x20000030
    fd2c:	b570      	push	{r4, r5, r6, lr}
    fd2e:	4c13      	ldr	r4, [pc, #76]	; (fd7c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    fd30:	79a0      	ldrb	r0, [r4, #6]
    fd32:	b1f0      	cbz	r0, fd72 <MPSL_IRQ_CLOCK_Handler+0x102>
    fd34:	2801      	cmp	r0, #1
    fd36:	d003      	beq.n	fd40 <MPSL_IRQ_CLOCK_Handler+0xd0>
    fd38:	79e1      	ldrb	r1, [r4, #7]
    fd3a:	1e40      	subs	r0, r0, #1
    fd3c:	4281      	cmp	r1, r0
    fd3e:	da18      	bge.n	fd72 <MPSL_IRQ_CLOCK_Handler+0x102>
    fd40:	f000 fa9e 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    fd44:	4605      	mov	r5, r0
    fd46:	f000 fb83 	bl	10450 <mpsl_temperature_get>
    fd4a:	79a1      	ldrb	r1, [r4, #6]
    fd4c:	2901      	cmp	r1, #1
    fd4e:	d902      	bls.n	fd56 <MPSL_IRQ_CLOCK_Handler+0xe6>
    fd50:	79e1      	ldrb	r1, [r4, #7]
    fd52:	1c49      	adds	r1, r1, #1
    fd54:	71e1      	strb	r1, [r4, #7]
    fd56:	b10d      	cbz	r5, fd5c <MPSL_IRQ_CLOCK_Handler+0xec>
    fd58:	6961      	ldr	r1, [r4, #20]
    fd5a:	e000      	b.n	fd5e <MPSL_IRQ_CLOCK_Handler+0xee>
    fd5c:	6921      	ldr	r1, [r4, #16]
    fd5e:	1a41      	subs	r1, r0, r1
    fd60:	2902      	cmp	r1, #2
    fd62:	da02      	bge.n	fd6a <MPSL_IRQ_CLOCK_Handler+0xfa>
    fd64:	f111 0f02 	cmn.w	r1, #2
    fd68:	dc07      	bgt.n	fd7a <MPSL_IRQ_CLOCK_Handler+0x10a>
    fd6a:	b10d      	cbz	r5, fd70 <MPSL_IRQ_CLOCK_Handler+0x100>
    fd6c:	6160      	str	r0, [r4, #20]
    fd6e:	e000      	b.n	fd72 <MPSL_IRQ_CLOCK_Handler+0x102>
    fd70:	6120      	str	r0, [r4, #16]
    fd72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd76:	f7ff bfbf 	b.w	fcf8 <MPSL_IRQ_CLOCK_Handler+0x88>
    fd7a:	bd70      	pop	{r4, r5, r6, pc}
    fd7c:	20000030 	.word	0x20000030
    fd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd84:	4606      	mov	r6, r0
    fd86:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    fd8a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    fd8e:	4628      	mov	r0, r5
    fd90:	f008 fcec 	bl	1876c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fd94:	4680      	mov	r8, r0
    fd96:	f44f 7188 	mov.w	r1, #272	; 0x110
    fd9a:	4628      	mov	r0, r5
    fd9c:	f008 fce6 	bl	1876c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    fda0:	4c27      	ldr	r4, [pc, #156]	; (fe40 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    fda2:	4682      	mov	sl, r0
    fda4:	7827      	ldrb	r7, [r4, #0]
    fda6:	f104 0008 	add.w	r0, r4, #8
    fdaa:	f008 fd53 	bl	18854 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    fdae:	b110      	cbz	r0, fdb6 <MPSL_IRQ_CLOCK_Handler+0x146>
    fdb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    fdb4:	e016      	b.n	fde4 <MPSL_IRQ_CLOCK_Handler+0x174>
    fdb6:	f04f 0901 	mov.w	r9, #1
    fdba:	b146      	cbz	r6, fdce <MPSL_IRQ_CLOCK_Handler+0x15e>
    fdbc:	7aa0      	ldrb	r0, [r4, #10]
    fdbe:	2803      	cmp	r0, #3
    fdc0:	d105      	bne.n	fdce <MPSL_IRQ_CLOCK_Handler+0x15e>
    fdc2:	2004      	movs	r0, #4
    fdc4:	72a0      	strb	r0, [r4, #10]
    fdc6:	f7ff ff85 	bl	fcd4 <MPSL_IRQ_CLOCK_Handler+0x64>
    fdca:	f8c5 9010 	str.w	r9, [r5, #16]
    fdce:	2600      	movs	r6, #0
    fdd0:	f1b8 0f00 	cmp.w	r8, #0
    fdd4:	d018      	beq.n	fe08 <MPSL_IRQ_CLOCK_Handler+0x198>
    fdd6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    fdda:	7aa0      	ldrb	r0, [r4, #10]
    fddc:	2804      	cmp	r0, #4
    fdde:	d004      	beq.n	fdea <MPSL_IRQ_CLOCK_Handler+0x17a>
    fde0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    fde4:	206d      	movs	r0, #109	; 0x6d
    fde6:	f000 fac3 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fdea:	f008 fd69 	bl	188c0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    fdee:	b928      	cbnz	r0, fdfc <MPSL_IRQ_CLOCK_Handler+0x18c>
    fdf0:	f008 fd87 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fdf4:	b910      	cbnz	r0, fdfc <MPSL_IRQ_CLOCK_Handler+0x18c>
    fdf6:	f008 fdba 	bl	1896e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fdfa:	b108      	cbz	r0, fe00 <MPSL_IRQ_CLOCK_Handler+0x190>
    fdfc:	4811      	ldr	r0, [pc, #68]	; (fe44 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    fdfe:	6006      	str	r6, [r0, #0]
    fe00:	2002      	movs	r0, #2
    fe02:	72a0      	strb	r0, [r4, #10]
    fe04:	f000 f8e6 	bl	ffd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    fe08:	f1ba 0f00 	cmp.w	sl, #0
    fe0c:	d008      	beq.n	fe20 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    fe0e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    fe12:	7aa0      	ldrb	r0, [r4, #10]
    fe14:	2802      	cmp	r0, #2
    fe16:	d101      	bne.n	fe1c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    fe18:	f7ff ff88 	bl	fd2c <MPSL_IRQ_CLOCK_Handler+0xbc>
    fe1c:	f8c5 9014 	str.w	r9, [r5, #20]
    fe20:	b13f      	cbz	r7, fe32 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    fe22:	7026      	strb	r6, [r4, #0]
    fe24:	7aa0      	ldrb	r0, [r4, #10]
    fe26:	2802      	cmp	r0, #2
    fe28:	d101      	bne.n	fe2e <MPSL_IRQ_CLOCK_Handler+0x1be>
    fe2a:	f7ff ff65 	bl	fcf8 <MPSL_IRQ_CLOCK_Handler+0x88>
    fe2e:	f000 f8d1 	bl	ffd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    fe32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe36:	4802      	ldr	r0, [pc, #8]	; (fe40 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    fe38:	3008      	adds	r0, #8
    fe3a:	f008 bd22 	b.w	18882 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    fe3e:	0000      	.short	0x0000
    fe40:	20000030 	.word	0x20000030
    fe44:	40000c34 	.word	0x40000c34
    fe48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe4c:	4c5c      	ldr	r4, [pc, #368]	; (ffc0 <MPSL_IRQ_CLOCK_Handler+0x350>)
    fe4e:	f04f 0800 	mov.w	r8, #0
    fe52:	4606      	mov	r6, r0
    fe54:	f8c4 8018 	str.w	r8, [r4, #24]
    fe58:	7843      	ldrb	r3, [r0, #1]
    fe5a:	7882      	ldrb	r2, [r0, #2]
    fe5c:	7800      	ldrb	r0, [r0, #0]
    fe5e:	72e0      	strb	r0, [r4, #11]
    fe60:	7163      	strb	r3, [r4, #5]
    fe62:	2701      	movs	r7, #1
    fe64:	71a2      	strb	r2, [r4, #6]
    fe66:	07bd      	lsls	r5, r7, #30
    fe68:	f884 8007 	strb.w	r8, [r4, #7]
    fe6c:	2805      	cmp	r0, #5
    fe6e:	d224      	bcs.n	feba <MPSL_IRQ_CLOCK_Handler+0x24a>
    fe70:	e8df f000 	tbb	[pc, r0]
    fe74:	1f05030f 	.word	0x1f05030f
    fe78:	0021      	.short	0x0021
    fe7a:	61a7      	str	r7, [r4, #24]
    fe7c:	e009      	b.n	fe92 <MPSL_IRQ_CLOCK_Handler+0x222>
    fe7e:	f000 f8c5 	bl	1000c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    fe82:	2101      	movs	r1, #1
    fe84:	4628      	mov	r0, r5
    fe86:	f008 fc76 	bl	18776 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    fe8a:	2800      	cmp	r0, #0
    fe8c:	d0f9      	beq.n	fe82 <MPSL_IRQ_CLOCK_Handler+0x212>
    fe8e:	2002      	movs	r0, #2
    fe90:	61a0      	str	r0, [r4, #24]
    fe92:	f008 fc9c 	bl	187ce <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    fe96:	b1b0      	cbz	r0, fec6 <MPSL_IRQ_CLOCK_Handler+0x256>
    fe98:	f000 fa0c 	bl	102b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    fe9c:	7e21      	ldrb	r1, [r4, #24]
    fe9e:	f001 0103 	and.w	r1, r1, #3
    fea2:	4288      	cmp	r0, r1
    fea4:	d10f      	bne.n	fec6 <MPSL_IRQ_CLOCK_Handler+0x256>
    fea6:	79b0      	ldrb	r0, [r6, #6]
    fea8:	b150      	cbz	r0, fec0 <MPSL_IRQ_CLOCK_Handler+0x250>
    feaa:	2002      	movs	r0, #2
    feac:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    feb0:	e06a      	b.n	ff88 <MPSL_IRQ_CLOCK_Handler+0x318>
    feb2:	4844      	ldr	r0, [pc, #272]	; (ffc4 <MPSL_IRQ_CLOCK_Handler+0x354>)
    feb4:	e7ec      	b.n	fe90 <MPSL_IRQ_CLOCK_Handler+0x220>
    feb6:	4844      	ldr	r0, [pc, #272]	; (ffc8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    feb8:	e7ea      	b.n	fe90 <MPSL_IRQ_CLOCK_Handler+0x220>
    feba:	f240 312d 	movw	r1, #813	; 0x32d
    febe:	e049      	b.n	ff54 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    fec0:	f000 f9cc 	bl	1025c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    fec4:	e060      	b.n	ff88 <MPSL_IRQ_CLOCK_Handler+0x318>
    fec6:	60ef      	str	r7, [r5, #12]
    fec8:	f44f 7a82 	mov.w	sl, #260	; 0x104
    fecc:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    fed0:	69a0      	ldr	r0, [r4, #24]
    fed2:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    fed6:	f008 fcdf 	bl	18898 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    feda:	b940      	cbnz	r0, feee <MPSL_IRQ_CLOCK_Handler+0x27e>
    fedc:	f008 fce6 	bl	188ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    fee0:	b928      	cbnz	r0, feee <MPSL_IRQ_CLOCK_Handler+0x27e>
    fee2:	f008 fcfa 	bl	188da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    fee6:	b910      	cbnz	r0, feee <MPSL_IRQ_CLOCK_Handler+0x27e>
    fee8:	f008 fd0b 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    feec:	b138      	cbz	r0, fefe <MPSL_IRQ_CLOCK_Handler+0x28e>
    feee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    fef2:	4836      	ldr	r0, [pc, #216]	; (ffcc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    fef4:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    fef8:	f3c1 3142 	ubfx	r1, r1, #13, #3
    fefc:	6001      	str	r1, [r0, #0]
    fefe:	f008 fccb 	bl	18898 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ff02:	b940      	cbnz	r0, ff16 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    ff04:	f008 fcd2 	bl	188ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ff08:	b928      	cbnz	r0, ff16 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    ff0a:	f008 fce6 	bl	188da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ff0e:	b910      	cbnz	r0, ff16 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    ff10:	f008 fcf7 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ff14:	b110      	cbz	r0, ff1c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    ff16:	482d      	ldr	r0, [pc, #180]	; (ffcc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    ff18:	3010      	adds	r0, #16
    ff1a:	6007      	str	r7, [r0, #0]
    ff1c:	60af      	str	r7, [r5, #8]
    ff1e:	2002      	movs	r0, #2
    ff20:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    ff24:	79b0      	ldrb	r0, [r6, #6]
    ff26:	bb78      	cbnz	r0, ff88 <MPSL_IRQ_CLOCK_Handler+0x318>
    ff28:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    ff2c:	f010 0f02 	tst.w	r0, #2
    ff30:	d00e      	beq.n	ff50 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    ff32:	f8df 909c 	ldr.w	r9, [pc, #156]	; ffd0 <MPSL_IRQ_CLOCK_Handler+0x360>
    ff36:	f8d9 1000 	ldr.w	r1, [r9]
    ff3a:	43c9      	mvns	r1, r1
    ff3c:	f341 1700 	sbfx	r7, r1, #4, #1
    ff40:	f8d9 1000 	ldr.w	r1, [r9]
    ff44:	f041 0110 	orr.w	r1, r1, #16
    ff48:	f8c9 1000 	str.w	r1, [r9]
    ff4c:	1c7f      	adds	r7, r7, #1
    ff4e:	e007      	b.n	ff60 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    ff50:	f240 21ee 	movw	r1, #750	; 0x2ee
    ff54:	206d      	movs	r0, #109	; 0x6d
    ff56:	f000 fa0b 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ff5a:	bf00      	nop
    ff5c:	f000 fb2e 	bl	105bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ff60:	4651      	mov	r1, sl
    ff62:	4628      	mov	r0, r5
    ff64:	f008 fc02 	bl	1876c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    ff68:	2800      	cmp	r0, #0
    ff6a:	d0f7      	beq.n	ff5c <MPSL_IRQ_CLOCK_Handler+0x2ec>
    ff6c:	f000 f976 	bl	1025c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ff70:	b92f      	cbnz	r7, ff7e <MPSL_IRQ_CLOCK_Handler+0x30e>
    ff72:	f8d9 1000 	ldr.w	r1, [r9]
    ff76:	f021 0110 	bic.w	r1, r1, #16
    ff7a:	f8c9 1000 	str.w	r1, [r9]
    ff7e:	2002      	movs	r0, #2
    ff80:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    ff84:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    ff88:	79a0      	ldrb	r0, [r4, #6]
    ff8a:	b170      	cbz	r0, ffaa <MPSL_IRQ_CLOCK_Handler+0x33a>
    ff8c:	7830      	ldrb	r0, [r6, #0]
    ff8e:	b960      	cbnz	r0, ffaa <MPSL_IRQ_CLOCK_Handler+0x33a>
    ff90:	f000 f976 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    ff94:	4606      	mov	r6, r0
    ff96:	f000 fa5b 	bl	10450 <mpsl_temperature_get>
    ff9a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ff9e:	b116      	cbz	r6, ffa6 <MPSL_IRQ_CLOCK_Handler+0x336>
    ffa0:	e9c4 2004 	strd	r2, r0, [r4, #16]
    ffa4:	e001      	b.n	ffaa <MPSL_IRQ_CLOCK_Handler+0x33a>
    ffa6:	e9c4 0204 	strd	r0, r2, [r4, #16]
    ffaa:	2101      	movs	r1, #1
    ffac:	4628      	mov	r0, r5
    ffae:	f008 fbe2 	bl	18776 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    ffb2:	b108      	cbz	r0, ffb8 <MPSL_IRQ_CLOCK_Handler+0x348>
    ffb4:	f000 f95e 	bl	10274 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    ffb8:	f884 800a 	strb.w	r8, [r4, #10]
    ffbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ffc0:	20000030 	.word	0x20000030
    ffc4:	00020001 	.word	0x00020001
    ffc8:	00030001 	.word	0x00030001
    ffcc:	4000053c 	.word	0x4000053c
    ffd0:	e000ed10 	.word	0xe000ed10

0000ffd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    ffd4:	b510      	push	{r4, lr}
    ffd6:	f3ef 8410 	mrs	r4, PRIMASK
    ffda:	b672      	cpsid	i
    ffdc:	480a      	ldr	r0, [pc, #40]	; (10008 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    ffde:	7841      	ldrb	r1, [r0, #1]
    ffe0:	b129      	cbz	r1, ffee <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    ffe2:	7841      	ldrb	r1, [r0, #1]
    ffe4:	1e49      	subs	r1, r1, #1
    ffe6:	7041      	strb	r1, [r0, #1]
    ffe8:	7841      	ldrb	r1, [r0, #1]
    ffea:	b129      	cbz	r1, fff8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    ffec:	e008      	b.n	10000 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    ffee:	f240 110d 	movw	r1, #269	; 0x10d
    fff2:	206d      	movs	r0, #109	; 0x6d
    fff4:	f000 f9bc 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fff8:	7880      	ldrb	r0, [r0, #2]
    fffa:	b908      	cbnz	r0, 10000 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    fffc:	f000 f94e 	bl	1029c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   10000:	2c00      	cmp	r4, #0
   10002:	d100      	bne.n	10006 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
   10004:	b662      	cpsie	i
   10006:	bd10      	pop	{r4, pc}
   10008:	20000030 	.word	0x20000030

0001000c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
   1000c:	b510      	push	{r4, lr}
   1000e:	f3ef 8410 	mrs	r4, PRIMASK
   10012:	b672      	cpsid	i
   10014:	4806      	ldr	r0, [pc, #24]	; (10030 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
   10016:	7841      	ldrb	r1, [r0, #1]
   10018:	1c49      	adds	r1, r1, #1
   1001a:	7041      	strb	r1, [r0, #1]
   1001c:	7840      	ldrb	r0, [r0, #1]
   1001e:	2801      	cmp	r0, #1
   10020:	d101      	bne.n	10026 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
   10022:	f008 fbbf 	bl	187a4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
   10026:	2c00      	cmp	r4, #0
   10028:	d100      	bne.n	1002c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
   1002a:	b662      	cpsie	i
   1002c:	bd10      	pop	{r4, pc}
   1002e:	0000      	.short	0x0000
   10030:	20000030 	.word	0x20000030

00010034 <mpsl_clock_hfclk_release>:
   10034:	4805      	ldr	r0, [pc, #20]	; (1004c <mpsl_clock_hfclk_release+0x18>)
   10036:	b510      	push	{r4, lr}
   10038:	78c1      	ldrb	r1, [r0, #3]
   1003a:	b121      	cbz	r1, 10046 <mpsl_clock_hfclk_release+0x12>
   1003c:	2100      	movs	r1, #0
   1003e:	7101      	strb	r1, [r0, #4]
   10040:	70c1      	strb	r1, [r0, #3]
   10042:	f7ff ffc7 	bl	ffd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   10046:	2000      	movs	r0, #0
   10048:	bd10      	pop	{r4, pc}
   1004a:	0000      	.short	0x0000
   1004c:	20000030 	.word	0x20000030

00010050 <mpsl_clock_hfclk_request>:
   10050:	b570      	push	{r4, r5, r6, lr}
   10052:	4c0c      	ldr	r4, [pc, #48]	; (10084 <mpsl_clock_hfclk_request+0x34>)
   10054:	78e1      	ldrb	r1, [r4, #3]
   10056:	b961      	cbnz	r1, 10072 <mpsl_clock_hfclk_request+0x22>
   10058:	2501      	movs	r5, #1
   1005a:	70e5      	strb	r5, [r4, #3]
   1005c:	61e0      	str	r0, [r4, #28]
   1005e:	f7ff ffd5 	bl	1000c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   10062:	f000 f90d 	bl	10280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   10066:	b130      	cbz	r0, 10076 <mpsl_clock_hfclk_request+0x26>
   10068:	69e0      	ldr	r0, [r4, #28]
   1006a:	b110      	cbz	r0, 10072 <mpsl_clock_hfclk_request+0x22>
   1006c:	4780      	blx	r0
   1006e:	2000      	movs	r0, #0
   10070:	61e0      	str	r0, [r4, #28]
   10072:	2000      	movs	r0, #0
   10074:	bd70      	pop	{r4, r5, r6, pc}
   10076:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1007a:	7125      	strb	r5, [r4, #4]
   1007c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
   10080:	e7f7      	b.n	10072 <mpsl_clock_hfclk_request+0x22>
   10082:	0000      	.short	0x0000
   10084:	20000030 	.word	0x20000030

00010088 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
   10088:	f3ef 8010 	mrs	r0, PRIMASK
   1008c:	b672      	cpsid	i
   1008e:	4904      	ldr	r1, [pc, #16]	; (100a0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
   10090:	788a      	ldrb	r2, [r1, #2]
   10092:	1c52      	adds	r2, r2, #1
   10094:	708a      	strb	r2, [r1, #2]
   10096:	2800      	cmp	r0, #0
   10098:	d100      	bne.n	1009c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
   1009a:	b662      	cpsie	i
   1009c:	4770      	bx	lr
   1009e:	0000      	.short	0x0000
   100a0:	20000030 	.word	0x20000030

000100a4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
   100a4:	b510      	push	{r4, lr}
   100a6:	f3ef 8410 	mrs	r4, PRIMASK
   100aa:	b672      	cpsid	i
   100ac:	480a      	ldr	r0, [pc, #40]	; (100d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
   100ae:	7881      	ldrb	r1, [r0, #2]
   100b0:	b129      	cbz	r1, 100be <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
   100b2:	7881      	ldrb	r1, [r0, #2]
   100b4:	1e49      	subs	r1, r1, #1
   100b6:	7081      	strb	r1, [r0, #2]
   100b8:	7841      	ldrb	r1, [r0, #1]
   100ba:	b129      	cbz	r1, 100c8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
   100bc:	e008      	b.n	100d0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
   100be:	f240 1125 	movw	r1, #293	; 0x125
   100c2:	206d      	movs	r0, #109	; 0x6d
   100c4:	f000 f954 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   100c8:	7880      	ldrb	r0, [r0, #2]
   100ca:	b908      	cbnz	r0, 100d0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
   100cc:	f000 f8e6 	bl	1029c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   100d0:	2c00      	cmp	r4, #0
   100d2:	d100      	bne.n	100d6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
   100d4:	b662      	cpsie	i
   100d6:	bd10      	pop	{r4, pc}
   100d8:	20000030 	.word	0x20000030

000100dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
   100dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100e0:	0004      	movs	r4, r0
   100e2:	f06f 0015 	mvn.w	r0, #21
   100e6:	d03c      	beq.n	10162 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   100e8:	7821      	ldrb	r1, [r4, #0]
   100ea:	2904      	cmp	r1, #4
   100ec:	d839      	bhi.n	10162 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   100ee:	2900      	cmp	r1, #0
   100f0:	7861      	ldrb	r1, [r4, #1]
   100f2:	d038      	beq.n	10166 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
   100f4:	2900      	cmp	r1, #0
   100f6:	d134      	bne.n	10162 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   100f8:	78a1      	ldrb	r1, [r4, #2]
   100fa:	2900      	cmp	r1, #0
   100fc:	d131      	bne.n	10162 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   100fe:	2000      	movs	r0, #0
   10100:	f008 faff 	bl	18702 <MPSL_IRQ_RADIO_Handler+0x1e>
   10104:	2000      	movs	r0, #0
   10106:	f008 faef 	bl	186e8 <MPSL_IRQ_RADIO_Handler+0x4>
   1010a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   1010e:	f04f 31ff 	mov.w	r1, #4294967295
   10112:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
   10116:	2600      	movs	r6, #0
   10118:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
   1011c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
   10120:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
   10124:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
   10128:	4f14      	ldr	r7, [pc, #80]	; (1017c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
   1012a:	707e      	strb	r6, [r7, #1]
   1012c:	88a0      	ldrh	r0, [r4, #4]
   1012e:	81b8      	strh	r0, [r7, #12]
   10130:	f008 fb2f 	bl	18792 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
   10134:	2501      	movs	r5, #1
   10136:	b108      	cbz	r0, 1013c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
   10138:	70fd      	strb	r5, [r7, #3]
   1013a:	707d      	strb	r5, [r7, #1]
   1013c:	2101      	movs	r1, #1
   1013e:	4640      	mov	r0, r8
   10140:	f008 fb19 	bl	18776 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
   10144:	b108      	cbz	r0, 1014a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
   10146:	f000 f895 	bl	10274 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   1014a:	4620      	mov	r0, r4
   1014c:	f7ff fe7c 	bl	fe48 <MPSL_IRQ_CLOCK_Handler+0x1d8>
   10150:	727d      	strb	r5, [r7, #9]
   10152:	2000      	movs	r0, #0
   10154:	f008 fac8 	bl	186e8 <MPSL_IRQ_RADIO_Handler+0x4>
   10158:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1015c:	4630      	mov	r0, r6
   1015e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
   10162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10166:	2900      	cmp	r1, #0
   10168:	d0fb      	beq.n	10162 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   1016a:	2920      	cmp	r1, #32
   1016c:	d8f9      	bhi.n	10162 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   1016e:	78a1      	ldrb	r1, [r4, #2]
   10170:	2921      	cmp	r1, #33	; 0x21
   10172:	d8f6      	bhi.n	10162 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   10174:	2901      	cmp	r1, #1
   10176:	d1c2      	bne.n	100fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
   10178:	e7f3      	b.n	10162 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
   1017a:	0000      	.short	0x0000
   1017c:	20000030 	.word	0x20000030

00010180 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
   10180:	4801      	ldr	r0, [pc, #4]	; (10188 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
   10182:	8980      	ldrh	r0, [r0, #12]
   10184:	4770      	bx	lr
   10186:	0000      	.short	0x0000
   10188:	20000030 	.word	0x20000030

0001018c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
   1018c:	b510      	push	{r4, lr}
   1018e:	480d      	ldr	r0, [pc, #52]	; (101c4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   10190:	f008 fb60 	bl	18854 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   10194:	490b      	ldr	r1, [pc, #44]	; (101c4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   10196:	3908      	subs	r1, #8
   10198:	b148      	cbz	r0, 101ae <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
   1019a:	2001      	movs	r0, #1
   1019c:	7008      	strb	r0, [r1, #0]
   1019e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   101a2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   101a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101aa:	f7ff bf2f 	b.w	1000c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   101ae:	7a88      	ldrb	r0, [r1, #10]
   101b0:	2802      	cmp	r0, #2
   101b2:	d101      	bne.n	101b8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
   101b4:	f7ff fda0 	bl	fcf8 <MPSL_IRQ_CLOCK_Handler+0x88>
   101b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101bc:	4801      	ldr	r0, [pc, #4]	; (101c4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   101be:	f008 bb60 	b.w	18882 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   101c2:	0000      	.short	0x0000
   101c4:	20000038 	.word	0x20000038

000101c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
   101c8:	4802      	ldr	r0, [pc, #8]	; (101d4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
   101ca:	7a80      	ldrb	r0, [r0, #10]
   101cc:	2800      	cmp	r0, #0
   101ce:	d000      	beq.n	101d2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
   101d0:	2001      	movs	r0, #1
   101d2:	4770      	bx	lr
   101d4:	20000030 	.word	0x20000030

000101d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
   101d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101da:	4d1f      	ldr	r5, [pc, #124]	; (10258 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   101dc:	7ae8      	ldrb	r0, [r5, #11]
   101de:	2800      	cmp	r0, #0
   101e0:	d10f      	bne.n	10202 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   101e2:	7e28      	ldrb	r0, [r5, #24]
   101e4:	f000 0003 	and.w	r0, r0, #3
   101e8:	f008 fae1 	bl	187ae <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   101ec:	2800      	cmp	r0, #0
   101ee:	d008      	beq.n	10202 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   101f0:	f3ef 8110 	mrs	r1, PRIMASK
   101f4:	b672      	cpsid	i
   101f6:	f7ff ffe7 	bl	101c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   101fa:	b118      	cbz	r0, 10204 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
   101fc:	2900      	cmp	r1, #0
   101fe:	d100      	bne.n	10202 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   10200:	b662      	cpsie	i
   10202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10204:	2601      	movs	r6, #1
   10206:	72ae      	strb	r6, [r5, #10]
   10208:	b901      	cbnz	r1, 1020c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
   1020a:	b662      	cpsie	i
   1020c:	2018      	movs	r0, #24
   1020e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   10212:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   10216:	61a6      	str	r6, [r4, #24]
   10218:	f44f 7020 	mov.w	r0, #640	; 0x280
   1021c:	f8ad 0000 	strh.w	r0, [sp]
   10220:	f8bd 0000 	ldrh.w	r0, [sp]
   10224:	1e41      	subs	r1, r0, #1
   10226:	f8ad 1000 	strh.w	r1, [sp]
   1022a:	d2f9      	bcs.n	10220 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
   1022c:	2700      	movs	r7, #0
   1022e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
   10232:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   10236:	4808      	ldr	r0, [pc, #32]	; (10258 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   10238:	3008      	adds	r0, #8
   1023a:	f008 fb1e 	bl	1887a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   1023e:	702f      	strb	r7, [r5, #0]
   10240:	f7ff fd5a 	bl	fcf8 <MPSL_IRQ_CLOCK_Handler+0x88>
   10244:	6166      	str	r6, [r4, #20]
   10246:	7968      	ldrb	r0, [r5, #5]
   10248:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1024c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   10250:	2018      	movs	r0, #24
   10252:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   10256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10258:	20000030 	.word	0x20000030

0001025c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
   1025c:	b510      	push	{r4, lr}
   1025e:	4c04      	ldr	r4, [pc, #16]	; (10270 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
   10260:	7e20      	ldrb	r0, [r4, #24]
   10262:	f000 0003 	and.w	r0, r0, #3
   10266:	f008 faa2 	bl	187ae <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   1026a:	2800      	cmp	r0, #0
   1026c:	d0f8      	beq.n	10260 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
   1026e:	bd10      	pop	{r4, pc}
   10270:	20000030 	.word	0x20000030

00010274 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
   10274:	4901      	ldr	r1, [pc, #4]	; (1027c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
   10276:	2001      	movs	r0, #1
   10278:	7008      	strb	r0, [r1, #0]
   1027a:	4770      	bx	lr
   1027c:	20000294 	.word	0x20000294

00010280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
   10280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10284:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   10288:	b918      	cbnz	r0, 10292 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
   1028a:	4803      	ldr	r0, [pc, #12]	; (10298 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
   1028c:	7800      	ldrb	r0, [r0, #0]
   1028e:	2800      	cmp	r0, #0
   10290:	d000      	beq.n	10294 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
   10292:	2001      	movs	r0, #1
   10294:	4770      	bx	lr
   10296:	0000      	.short	0x0000
   10298:	20000294 	.word	0x20000294

0001029c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
   1029c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   102a0:	2101      	movs	r1, #1
   102a2:	6041      	str	r1, [r0, #4]
   102a4:	2100      	movs	r1, #0
   102a6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   102aa:	4801      	ldr	r0, [pc, #4]	; (102b0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
   102ac:	7001      	strb	r1, [r0, #0]
   102ae:	4770      	bx	lr
   102b0:	20000294 	.word	0x20000294

000102b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
   102b4:	4802      	ldr	r0, [pc, #8]	; (102c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
   102b6:	6800      	ldr	r0, [r0, #0]
   102b8:	f000 0003 	and.w	r0, r0, #3
   102bc:	4770      	bx	lr
   102be:	0000      	.short	0x0000
   102c0:	4000041c 	.word	0x4000041c
   102c4:	b510      	push	{r4, lr}
   102c6:	b131      	cbz	r1, 102d6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
   102c8:	2901      	cmp	r1, #1
   102ca:	d007      	beq.n	102dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
   102cc:	f240 3102 	movw	r1, #770	; 0x302
   102d0:	a005      	add	r0, pc, #20	; (adr r0, 102e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
   102d2:	f000 f821 	bl	10318 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
   102d6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
   102da:	e001      	b.n	102e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
   102dc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
   102e0:	f000 0001 	and.w	r0, r0, #1
   102e4:	bd10      	pop	{r4, pc}
   102e6:	0000      	.short	0x0000
   102e8:	5f66726e 	.word	0x5f66726e
   102ec:	636f6c63 	.word	0x636f6c63
   102f0:	00682e6b 	.word	0x00682e6b
   102f4:	f3bf 8f4f 	dsb	sy
   102f8:	4805      	ldr	r0, [pc, #20]	; (10310 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
   102fa:	6801      	ldr	r1, [r0, #0]
   102fc:	4a05      	ldr	r2, [pc, #20]	; (10314 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
   102fe:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   10302:	4311      	orrs	r1, r2
   10304:	6001      	str	r1, [r0, #0]
   10306:	f3bf 8f4f 	dsb	sy
   1030a:	bf00      	nop
   1030c:	e7fd      	b.n	1030a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
   1030e:	0000      	.short	0x0000
   10310:	e000ed0c 	.word	0xe000ed0c
   10314:	05fa0004 	.word	0x05fa0004

00010318 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
   10318:	b672      	cpsid	i
   1031a:	4a03      	ldr	r2, [pc, #12]	; (10328 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
   1031c:	6852      	ldr	r2, [r2, #4]
   1031e:	b102      	cbz	r2, 10322 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
   10320:	4790      	blx	r2
   10322:	f7ff ffe7 	bl	102f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   10326:	0000      	.short	0x0000
   10328:	20000050 	.word	0x20000050
   1032c:	4806      	ldr	r0, [pc, #24]	; (10348 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
   1032e:	b510      	push	{r4, lr}
   10330:	2100      	movs	r1, #0
   10332:	6001      	str	r1, [r0, #0]
   10334:	2101      	movs	r1, #1
   10336:	6001      	str	r1, [r0, #0]
   10338:	4608      	mov	r0, r1
   1033a:	f008 fa5f 	bl	187fc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   1033e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10342:	2001      	movs	r0, #1
   10344:	f008 ba4d 	b.w	187e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   10348:	40001ffc 	.word	0x40001ffc
   1034c:	4807      	ldr	r0, [pc, #28]	; (1036c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
   1034e:	b510      	push	{r4, lr}
   10350:	2101      	movs	r1, #1
   10352:	6041      	str	r1, [r0, #4]
   10354:	1e89      	subs	r1, r1, #2
   10356:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   1035a:	200c      	movs	r0, #12
   1035c:	f008 fa4e 	bl	187fc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   10360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10364:	200c      	movs	r0, #12
   10366:	f008 ba3c 	b.w	187e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   1036a:	0000      	.short	0x0000
   1036c:	4000c000 	.word	0x4000c000

00010370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
   10370:	b50e      	push	{r1, r2, r3, lr}
   10372:	b672      	cpsid	i
   10374:	4a0f      	ldr	r2, [pc, #60]	; (103b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
   10376:	6855      	ldr	r5, [r2, #4]
   10378:	b1d5      	cbz	r5, 103b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
   1037a:	2200      	movs	r2, #0
   1037c:	4603      	mov	r3, r0
   1037e:	466e      	mov	r6, sp
   10380:	240a      	movs	r4, #10
   10382:	e003      	b.n	1038c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
   10384:	fbb0 f0f4 	udiv	r0, r0, r4
   10388:	1c52      	adds	r2, r2, #1
   1038a:	b2d2      	uxtb	r2, r2
   1038c:	2800      	cmp	r0, #0
   1038e:	d1f9      	bne.n	10384 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
   10390:	54b0      	strb	r0, [r6, r2]
   10392:	e009      	b.n	103a8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
   10394:	fbb3 f0f4 	udiv	r0, r3, r4
   10398:	fb04 3010 	mls	r0, r4, r0, r3
   1039c:	fbb3 f3f4 	udiv	r3, r3, r4
   103a0:	1e52      	subs	r2, r2, #1
   103a2:	b2d2      	uxtb	r2, r2
   103a4:	3030      	adds	r0, #48	; 0x30
   103a6:	54b0      	strb	r0, [r6, r2]
   103a8:	2a00      	cmp	r2, #0
   103aa:	d1f3      	bne.n	10394 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
   103ac:	4630      	mov	r0, r6
   103ae:	47a8      	blx	r5
   103b0:	f7ff ffa0 	bl	102f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   103b4:	20000050 	.word	0x20000050

000103b8 <mpsl_init>:
   103b8:	b570      	push	{r4, r5, r6, lr}
   103ba:	4c17      	ldr	r4, [pc, #92]	; (10418 <mpsl_init+0x60>)
   103bc:	4606      	mov	r6, r0
   103be:	460d      	mov	r5, r1
   103c0:	7860      	ldrb	r0, [r4, #1]
   103c2:	b110      	cbz	r0, 103ca <mpsl_init+0x12>
   103c4:	f04f 30ff 	mov.w	r0, #4294967295
   103c8:	bd70      	pop	{r4, r5, r6, pc}
   103ca:	b906      	cbnz	r6, 103ce <mpsl_init+0x16>
   103cc:	4e13      	ldr	r6, [pc, #76]	; (1041c <mpsl_init+0x64>)
   103ce:	6062      	str	r2, [r4, #4]
   103d0:	7025      	strb	r5, [r4, #0]
   103d2:	f7ff ffab 	bl	1032c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
   103d6:	f7ff ffb9 	bl	1034c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
   103da:	4630      	mov	r0, r6
   103dc:	f7ff fe7e 	bl	100dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
   103e0:	0006      	movs	r6, r0
   103e2:	d1f1      	bne.n	103c8 <mpsl_init+0x10>
   103e4:	f7fe febe 	bl	f164 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
   103e8:	f7ff fef6 	bl	101d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   103ec:	f008 f8d4 	bl	18598 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
   103f0:	4628      	mov	r0, r5
   103f2:	f008 f9f6 	bl	187e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   103f6:	2001      	movs	r0, #1
   103f8:	2d00      	cmp	r5, #0
   103fa:	db09      	blt.n	10410 <mpsl_init+0x58>
   103fc:	f005 011f 	and.w	r1, r5, #31
   10400:	fa00 f101 	lsl.w	r1, r0, r1
   10404:	096a      	lsrs	r2, r5, #5
   10406:	0092      	lsls	r2, r2, #2
   10408:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   1040c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   10410:	7060      	strb	r0, [r4, #1]
   10412:	4630      	mov	r0, r6
   10414:	bd70      	pop	{r4, r5, r6, pc}
   10416:	0000      	.short	0x0000
   10418:	20000050 	.word	0x20000050
   1041c:	0001881e 	.word	0x0001881e

00010420 <mpsl_is_initialized>:
   10420:	4801      	ldr	r0, [pc, #4]	; (10428 <mpsl_is_initialized+0x8>)
   10422:	7840      	ldrb	r0, [r0, #1]
   10424:	4770      	bx	lr
   10426:	0000      	.short	0x0000
   10428:	20000050 	.word	0x20000050

0001042c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
   1042c:	4807      	ldr	r0, [pc, #28]	; (1044c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
   1042e:	f990 0000 	ldrsb.w	r0, [r0]
   10432:	2800      	cmp	r0, #0
   10434:	db09      	blt.n	1044a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
   10436:	f000 021f 	and.w	r2, r0, #31
   1043a:	2101      	movs	r1, #1
   1043c:	4091      	lsls	r1, r2
   1043e:	0940      	lsrs	r0, r0, #5
   10440:	0080      	lsls	r0, r0, #2
   10442:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10446:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1044a:	4770      	bx	lr
   1044c:	20000050 	.word	0x20000050

00010450 <mpsl_temperature_get>:
   10450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10454:	2601      	movs	r6, #1
   10456:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1045a:	0331      	lsls	r1, r6, #12
   1045c:	f04f 0800 	mov.w	r8, #0
   10460:	4640      	mov	r0, r8
   10462:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
   10466:	f3bf 8f4f 	dsb	sy
   1046a:	f3bf 8f6f 	isb	sy
   1046e:	4c16      	ldr	r4, [pc, #88]	; (104c8 <mpsl_temperature_get+0x78>)
   10470:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   10474:	200c      	movs	r0, #12
   10476:	f008 f9e0 	bl	1883a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   1047a:	4d14      	ldr	r5, [pc, #80]	; (104cc <mpsl_temperature_get+0x7c>)
   1047c:	6828      	ldr	r0, [r5, #0]
   1047e:	43c0      	mvns	r0, r0
   10480:	f340 1700 	sbfx	r7, r0, #4, #1
   10484:	6828      	ldr	r0, [r5, #0]
   10486:	f040 0010 	orr.w	r0, r0, #16
   1048a:	6028      	str	r0, [r5, #0]
   1048c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   10490:	6026      	str	r6, [r4, #0]
   10492:	1c7f      	adds	r7, r7, #1
   10494:	e002      	b.n	1049c <mpsl_temperature_get+0x4c>
   10496:	bf00      	nop
   10498:	f000 f890 	bl	105bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   1049c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   104a0:	2800      	cmp	r0, #0
   104a2:	d0f9      	beq.n	10498 <mpsl_temperature_get+0x48>
   104a4:	b91f      	cbnz	r7, 104ae <mpsl_temperature_get+0x5e>
   104a6:	6828      	ldr	r0, [r5, #0]
   104a8:	f020 0010 	bic.w	r0, r0, #16
   104ac:	6028      	str	r0, [r5, #0]
   104ae:	4808      	ldr	r0, [pc, #32]	; (104d0 <mpsl_temperature_get+0x80>)
   104b0:	6805      	ldr	r5, [r0, #0]
   104b2:	6066      	str	r6, [r4, #4]
   104b4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
   104b8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   104bc:	200c      	movs	r0, #12
   104be:	f008 f9bc 	bl	1883a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   104c2:	4628      	mov	r0, r5
   104c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104c8:	4000c000 	.word	0x4000c000
   104cc:	e000ed10 	.word	0xe000ed10
   104d0:	4000c508 	.word	0x4000c508

000104d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
   104d4:	b510      	push	{r4, lr}
   104d6:	4602      	mov	r2, r0
   104d8:	2005      	movs	r0, #5
   104da:	490c      	ldr	r1, [pc, #48]	; (1050c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
   104dc:	e004      	b.n	104e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
   104de:	bf00      	nop
   104e0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   104e4:	791b      	ldrb	r3, [r3, #4]
   104e6:	b133      	cbz	r3, 104f6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
   104e8:	1e40      	subs	r0, r0, #1
   104ea:	b2c0      	uxtb	r0, r0
   104ec:	d2f8      	bcs.n	104e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
   104ee:	2148      	movs	r1, #72	; 0x48
   104f0:	2069      	movs	r0, #105	; 0x69
   104f2:	f7ff ff3d 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   104f6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
   104fa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   104fe:	2200      	movs	r2, #0
   10500:	714a      	strb	r2, [r1, #5]
   10502:	718a      	strb	r2, [r1, #6]
   10504:	2201      	movs	r2, #1
   10506:	710a      	strb	r2, [r1, #4]
   10508:	bd10      	pop	{r4, pc}
   1050a:	0000      	.short	0x0000
   1050c:	20001318 	.word	0x20001318

00010510 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
   10510:	b510      	push	{r4, lr}
   10512:	2805      	cmp	r0, #5
   10514:	d301      	bcc.n	1051a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
   10516:	2158      	movs	r1, #88	; 0x58
   10518:	e006      	b.n	10528 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
   1051a:	490a      	ldr	r1, [pc, #40]	; (10544 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
   1051c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   10520:	7901      	ldrb	r1, [r0, #4]
   10522:	2901      	cmp	r1, #1
   10524:	d003      	beq.n	1052e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
   10526:	2159      	movs	r1, #89	; 0x59
   10528:	2069      	movs	r0, #105	; 0x69
   1052a:	f7ff ff21 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1052e:	7941      	ldrb	r1, [r0, #5]
   10530:	7982      	ldrb	r2, [r0, #6]
   10532:	1c49      	adds	r1, r1, #1
   10534:	b2c9      	uxtb	r1, r1
   10536:	428a      	cmp	r2, r1
   10538:	d000      	beq.n	1053c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
   1053a:	7141      	strb	r1, [r0, #5]
   1053c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10540:	f7ff bf74 	b.w	1042c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
   10544:	20001318 	.word	0x20001318

00010548 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
   10548:	b570      	push	{r4, r5, r6, lr}
   1054a:	2505      	movs	r5, #5
   1054c:	4e0e      	ldr	r6, [pc, #56]	; (10588 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
   1054e:	4c0f      	ldr	r4, [pc, #60]	; (1058c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
   10550:	e016      	b.n	10580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   10552:	7821      	ldrb	r1, [r4, #0]
   10554:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   10558:	7902      	ldrb	r2, [r0, #4]
   1055a:	2a01      	cmp	r2, #1
   1055c:	d108      	bne.n	10570 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   1055e:	7942      	ldrb	r2, [r0, #5]
   10560:	7983      	ldrb	r3, [r0, #6]
   10562:	429a      	cmp	r2, r3
   10564:	d004      	beq.n	10570 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   10566:	7942      	ldrb	r2, [r0, #5]
   10568:	7182      	strb	r2, [r0, #6]
   1056a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1056e:	4780      	blx	r0
   10570:	7820      	ldrb	r0, [r4, #0]
   10572:	1c40      	adds	r0, r0, #1
   10574:	b2c0      	uxtb	r0, r0
   10576:	7020      	strb	r0, [r4, #0]
   10578:	2805      	cmp	r0, #5
   1057a:	d301      	bcc.n	10580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   1057c:	2000      	movs	r0, #0
   1057e:	7020      	strb	r0, [r4, #0]
   10580:	1e6d      	subs	r5, r5, #1
   10582:	b2ed      	uxtb	r5, r5
   10584:	d2e5      	bcs.n	10552 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
   10586:	bd70      	pop	{r4, r5, r6, pc}
   10588:	20001318 	.word	0x20001318
   1058c:	20000295 	.word	0x20000295

00010590 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
   10590:	b500      	push	{lr}
   10592:	f008 f981 	bl	18898 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10596:	b940      	cbnz	r0, 105aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   10598:	f008 f988 	bl	188ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1059c:	b928      	cbnz	r0, 105aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   1059e:	f008 f99c 	bl	188da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   105a2:	b910      	cbnz	r0, 105aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   105a4:	f008 f9ad 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   105a8:	b108      	cbz	r0, 105ae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
   105aa:	4802      	ldr	r0, [pc, #8]	; (105b4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
   105ac:	bd00      	pop	{pc}
   105ae:	4802      	ldr	r0, [pc, #8]	; (105b8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
   105b0:	bd00      	pop	{pc}
   105b2:	0000      	.short	0x0000
   105b4:	4000050c 	.word	0x4000050c
   105b8:	4001e700 	.word	0x4001e700

000105bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   105bc:	b510      	push	{r4, lr}
   105be:	f008 f9a0 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   105c2:	b330      	cbz	r0, 10612 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
   105c4:	f3ef 8010 	mrs	r0, PRIMASK
   105c8:	b1c8      	cbz	r0, 105fe <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
   105ca:	2100      	movs	r1, #0
   105cc:	b672      	cpsid	i
   105ce:	4812      	ldr	r0, [pc, #72]	; (10618 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
   105d0:	6802      	ldr	r2, [r0, #0]
   105d2:	6803      	ldr	r3, [r0, #0]
   105d4:	f3c2 1200 	ubfx	r2, r2, #4, #1
   105d8:	f043 0310 	orr.w	r3, r3, #16
   105dc:	6003      	str	r3, [r0, #0]
   105de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   105e2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   105e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   105ea:	431c      	orrs	r4, r3
   105ec:	d000      	beq.n	105f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
   105ee:	bf40      	sev
   105f0:	bf20      	wfe
   105f2:	bf00      	nop
   105f4:	bf00      	nop
   105f6:	bf00      	nop
   105f8:	bf00      	nop
   105fa:	b112      	cbz	r2, 10602 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
   105fc:	e005      	b.n	1060a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
   105fe:	2101      	movs	r1, #1
   10600:	e7e4      	b.n	105cc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
   10602:	6802      	ldr	r2, [r0, #0]
   10604:	f022 0210 	bic.w	r2, r2, #16
   10608:	6002      	str	r2, [r0, #0]
   1060a:	2900      	cmp	r1, #0
   1060c:	d000      	beq.n	10610 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
   1060e:	b662      	cpsie	i
   10610:	bd10      	pop	{r4, pc}
   10612:	bf20      	wfe
   10614:	bd10      	pop	{r4, pc}
   10616:	0000      	.short	0x0000
   10618:	e000ed10 	.word	0xe000ed10

0001061c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
   1061c:	00018b73 00018b8f 00018b7d 00018b89     s.......}.......
   1062c:	00018b77 00018b71 00018b6f 00018b95     w...q...o.......
   1063c:	00018b83 00018b69 00018b61 00018b65     ....i...a...e...
   1064c:	00018b5b                                [...

00010650 <mpsl_fem_disable>:
   10650:	4801      	ldr	r0, [pc, #4]	; (10658 <mpsl_fem_disable+0x8>)
   10652:	6800      	ldr	r0, [r0, #0]
   10654:	6800      	ldr	r0, [r0, #0]
   10656:	4700      	bx	r0
   10658:	20000058 	.word	0x20000058

0001065c <mpsl_fem_lna_configuration_clear>:
   1065c:	4801      	ldr	r0, [pc, #4]	; (10664 <mpsl_fem_lna_configuration_clear+0x8>)
   1065e:	6800      	ldr	r0, [r0, #0]
   10660:	6900      	ldr	r0, [r0, #16]
   10662:	4700      	bx	r0
   10664:	20000058 	.word	0x20000058

00010668 <mpsl_fem_lna_configuration_set>:
   10668:	4a01      	ldr	r2, [pc, #4]	; (10670 <mpsl_fem_lna_configuration_set+0x8>)
   1066a:	6812      	ldr	r2, [r2, #0]
   1066c:	6892      	ldr	r2, [r2, #8]
   1066e:	4710      	bx	r2
   10670:	20000058 	.word	0x20000058

00010674 <mpsl_fem_pa_configuration_clear>:
   10674:	4801      	ldr	r0, [pc, #4]	; (1067c <mpsl_fem_pa_configuration_clear+0x8>)
   10676:	6800      	ldr	r0, [r0, #0]
   10678:	68c0      	ldr	r0, [r0, #12]
   1067a:	4700      	bx	r0
   1067c:	20000058 	.word	0x20000058

00010680 <mpsl_fem_pa_configuration_set>:
   10680:	4a01      	ldr	r2, [pc, #4]	; (10688 <mpsl_fem_pa_configuration_set+0x8>)
   10682:	6812      	ldr	r2, [r2, #0]
   10684:	6852      	ldr	r2, [r2, #4]
   10686:	4710      	bx	r2
   10688:	20000058 	.word	0x20000058

0001068c <mpsl_fem_pa_is_configured>:
   1068c:	4901      	ldr	r1, [pc, #4]	; (10694 <mpsl_fem_pa_is_configured+0x8>)
   1068e:	6809      	ldr	r1, [r1, #0]
   10690:	6a09      	ldr	r1, [r1, #32]
   10692:	4708      	bx	r1
   10694:	20000058 	.word	0x20000058

00010698 <mpsl_fem_device_config_254_apply_get>:
   10698:	4801      	ldr	r0, [pc, #4]	; (106a0 <mpsl_fem_device_config_254_apply_get+0x8>)
   1069a:	7800      	ldrb	r0, [r0, #0]
   1069c:	4770      	bx	lr
   1069e:	0000      	.short	0x0000
   106a0:	20000296 	.word	0x20000296
   106a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   106a6:	4c17      	ldr	r4, [pc, #92]	; (10704 <mpsl_fem_device_config_254_apply_get+0x6c>)
   106a8:	7a20      	ldrb	r0, [r4, #8]
   106aa:	2802      	cmp	r0, #2
   106ac:	d200      	bcs.n	106b0 <mpsl_fem_device_config_254_apply_get+0x18>
   106ae:	2002      	movs	r0, #2
   106b0:	f88d 0001 	strb.w	r0, [sp, #1]
   106b4:	79e0      	ldrb	r0, [r4, #7]
   106b6:	2803      	cmp	r0, #3
   106b8:	d200      	bcs.n	106bc <mpsl_fem_device_config_254_apply_get+0x24>
   106ba:	2003      	movs	r0, #3
   106bc:	f88d 0000 	strb.w	r0, [sp]
   106c0:	79a0      	ldrb	r0, [r4, #6]
   106c2:	f8ad 0004 	strh.w	r0, [sp, #4]
   106c6:	7960      	ldrb	r0, [r4, #5]
   106c8:	f8ad 0002 	strh.w	r0, [sp, #2]
   106cc:	4668      	mov	r0, sp
   106ce:	f006 f95b 	bl	16988 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
   106d2:	b108      	cbz	r0, 106d8 <mpsl_fem_device_config_254_apply_get+0x40>
   106d4:	2184      	movs	r1, #132	; 0x84
   106d6:	e010      	b.n	106fa <mpsl_fem_device_config_254_apply_get+0x62>
   106d8:	68e0      	ldr	r0, [r4, #12]
   106da:	9002      	str	r0, [sp, #8]
   106dc:	a802      	add	r0, sp, #8
   106de:	f006 f969 	bl	169b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
   106e2:	b108      	cbz	r0, 106e8 <mpsl_fem_device_config_254_apply_get+0x50>
   106e4:	2188      	movs	r1, #136	; 0x88
   106e6:	e008      	b.n	106fa <mpsl_fem_device_config_254_apply_get+0x62>
   106e8:	4807      	ldr	r0, [pc, #28]	; (10708 <mpsl_fem_device_config_254_apply_get+0x70>)
   106ea:	6800      	ldr	r0, [r0, #0]
   106ec:	9003      	str	r0, [sp, #12]
   106ee:	a803      	add	r0, sp, #12
   106f0:	f00b fb24 	bl	1bd3c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   106f4:	2800      	cmp	r0, #0
   106f6:	d003      	beq.n	10700 <mpsl_fem_device_config_254_apply_get+0x68>
   106f8:	218c      	movs	r1, #140	; 0x8c
   106fa:	2003      	movs	r0, #3
   106fc:	f000 f8e4 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10700:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   10702:	0000      	.short	0x0000
   10704:	20001340 	.word	0x20001340
   10708:	000109b0 	.word	0x000109b0

0001070c <sdc_build_revision_get>:
   1070c:	b510      	push	{r4, lr}
   1070e:	b128      	cbz	r0, 1071c <sdc_build_revision_get+0x10>
   10710:	2214      	movs	r2, #20
   10712:	4904      	ldr	r1, [pc, #16]	; (10724 <sdc_build_revision_get+0x18>)
   10714:	f008 f947 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10718:	2000      	movs	r0, #0
   1071a:	bd10      	pop	{r4, pc}
   1071c:	f06f 0015 	mvn.w	r0, #21
   10720:	bd10      	pop	{r4, pc}
   10722:	0000      	.short	0x0000
   10724:	000109cc 	.word	0x000109cc

00010728 <sdc_cfg_set>:
   10728:	b570      	push	{r4, r5, r6, lr}
   1072a:	0003      	movs	r3, r0
   1072c:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   10730:	d103      	bne.n	1073a <sdc_cfg_set+0x12>
   10732:	4c29      	ldr	r4, [pc, #164]	; (107d8 <sdc_cfg_set+0xb0>)
   10734:	7863      	ldrb	r3, [r4, #1]
   10736:	b10b      	cbz	r3, 1073c <sdc_cfg_set+0x14>
   10738:	1180      	asrs	r0, r0, #6
   1073a:	bd70      	pop	{r4, r5, r6, pc}
   1073c:	b309      	cbz	r1, 10782 <sdc_cfg_set+0x5a>
   1073e:	f06f 0515 	mvn.w	r5, #21
   10742:	b37a      	cbz	r2, 107a4 <sdc_cfg_set+0x7c>
   10744:	4b25      	ldr	r3, [pc, #148]	; (107dc <sdc_cfg_set+0xb4>)
   10746:	290c      	cmp	r1, #12
   10748:	d241      	bcs.n	107ce <sdc_cfg_set+0xa6>
   1074a:	e8df f001 	tbb	[pc, r1]
   1074e:	0640      	.short	0x0640
   10750:	13100c09 	.word	0x13100c09
   10754:	2616231b 	.word	0x2616231b
   10758:	312c      	.short	0x312c
   1075a:	7810      	ldrb	r0, [r2, #0]
   1075c:	7018      	strb	r0, [r3, #0]
   1075e:	e02b      	b.n	107b8 <sdc_cfg_set+0x90>
   10760:	7810      	ldrb	r0, [r2, #0]
   10762:	7058      	strb	r0, [r3, #1]
   10764:	e028      	b.n	107b8 <sdc_cfg_set+0x90>
   10766:	6810      	ldr	r0, [r2, #0]
   10768:	f8c3 0005 	str.w	r0, [r3, #5]
   1076c:	e024      	b.n	107b8 <sdc_cfg_set+0x90>
   1076e:	6810      	ldr	r0, [r2, #0]
   10770:	60d8      	str	r0, [r3, #12]
   10772:	e021      	b.n	107b8 <sdc_cfg_set+0x90>
   10774:	7810      	ldrb	r0, [r2, #0]
   10776:	7098      	strb	r0, [r3, #2]
   10778:	e01e      	b.n	107b8 <sdc_cfg_set+0x90>
   1077a:	7811      	ldrb	r1, [r2, #0]
   1077c:	2900      	cmp	r1, #0
   1077e:	d1dc      	bne.n	1073a <sdc_cfg_set+0x12>
   10780:	70d9      	strb	r1, [r3, #3]
   10782:	e019      	b.n	107b8 <sdc_cfg_set+0x90>
   10784:	78e0      	ldrb	r0, [r4, #3]
   10786:	b110      	cbz	r0, 1078e <sdc_cfg_set+0x66>
   10788:	7810      	ldrb	r0, [r2, #0]
   1078a:	2802      	cmp	r0, #2
   1078c:	d31f      	bcc.n	107ce <sdc_cfg_set+0xa6>
   1078e:	7810      	ldrb	r0, [r2, #0]
   10790:	7418      	strb	r0, [r3, #16]
   10792:	e011      	b.n	107b8 <sdc_cfg_set+0x90>
   10794:	8810      	ldrh	r0, [r2, #0]
   10796:	8258      	strh	r0, [r3, #18]
   10798:	e00e      	b.n	107b8 <sdc_cfg_set+0x90>
   1079a:	7811      	ldrb	r1, [r2, #0]
   1079c:	2900      	cmp	r1, #0
   1079e:	d1cc      	bne.n	1073a <sdc_cfg_set+0x12>
   107a0:	7119      	strb	r1, [r3, #4]
   107a2:	e009      	b.n	107b8 <sdc_cfg_set+0x90>
   107a4:	e013      	b.n	107ce <sdc_cfg_set+0xa6>
   107a6:	7810      	ldrb	r0, [r2, #0]
   107a8:	2802      	cmp	r0, #2
   107aa:	d310      	bcc.n	107ce <sdc_cfg_set+0xa6>
   107ac:	7518      	strb	r0, [r3, #20]
   107ae:	e003      	b.n	107b8 <sdc_cfg_set+0x90>
   107b0:	7811      	ldrb	r1, [r2, #0]
   107b2:	2900      	cmp	r1, #0
   107b4:	d1c1      	bne.n	1073a <sdc_cfg_set+0x12>
   107b6:	7559      	strb	r1, [r3, #21]
   107b8:	2201      	movs	r2, #1
   107ba:	4908      	ldr	r1, [pc, #32]	; (107dc <sdc_cfg_set+0xb4>)
   107bc:	2000      	movs	r0, #0
   107be:	f008 f9eb 	bl	18b98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
   107c2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   107c6:	db04      	blt.n	107d2 <sdc_cfg_set+0xaa>
   107c8:	f06f 000b 	mvn.w	r0, #11
   107cc:	bd70      	pop	{r4, r5, r6, pc}
   107ce:	4628      	mov	r0, r5
   107d0:	bd70      	pop	{r4, r5, r6, pc}
   107d2:	2101      	movs	r1, #1
   107d4:	70a1      	strb	r1, [r4, #2]
   107d6:	bd70      	pop	{r4, r5, r6, pc}
   107d8:	2000005c 	.word	0x2000005c
   107dc:	20001340 	.word	0x20001340

000107e0 <sdc_enable>:
   107e0:	b570      	push	{r4, r5, r6, lr}
   107e2:	460c      	mov	r4, r1
   107e4:	0005      	movs	r5, r0
   107e6:	d019      	beq.n	1081c <sdc_enable+0x3c>
   107e8:	b1c4      	cbz	r4, 1081c <sdc_enable+0x3c>
   107ea:	f000 f915 	bl	10a18 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
   107ee:	b1c0      	cbz	r0, 10822 <sdc_enable+0x42>
   107f0:	4628      	mov	r0, r5
   107f2:	f7ff fe6f 	bl	104d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   107f6:	4d0c      	ldr	r5, [pc, #48]	; (10828 <sdc_enable+0x48>)
   107f8:	2200      	movs	r2, #0
   107fa:	490c      	ldr	r1, [pc, #48]	; (1082c <sdc_enable+0x4c>)
   107fc:	7028      	strb	r0, [r5, #0]
   107fe:	4620      	mov	r0, r4
   10800:	f008 f9ca 	bl	18b98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
   10804:	f00b ff03 	bl	1c60e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
   10808:	2100      	movs	r1, #0
   1080a:	7828      	ldrb	r0, [r5, #0]
   1080c:	f006 fb12 	bl	16e34 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
   10810:	f7ff ff48 	bl	106a4 <mpsl_fem_device_config_254_apply_get+0xc>
   10814:	2001      	movs	r0, #1
   10816:	7068      	strb	r0, [r5, #1]
   10818:	2000      	movs	r0, #0
   1081a:	bd70      	pop	{r4, r5, r6, pc}
   1081c:	f06f 0015 	mvn.w	r0, #21
   10820:	bd70      	pop	{r4, r5, r6, pc}
   10822:	f04f 30ff 	mov.w	r0, #4294967295
   10826:	bd70      	pop	{r4, r5, r6, pc}
   10828:	2000005c 	.word	0x2000005c
   1082c:	20001340 	.word	0x20001340

00010830 <sdc_init>:
   10830:	b530      	push	{r4, r5, lr}
   10832:	b087      	sub	sp, #28
   10834:	0005      	movs	r5, r0
   10836:	d00c      	beq.n	10852 <sdc_init+0x22>
   10838:	f7ff fdf2 	bl	10420 <mpsl_is_initialized>
   1083c:	f04f 34ff 	mov.w	r4, #4294967295
   10840:	b120      	cbz	r0, 1084c <sdc_init+0x1c>
   10842:	f7ff fc9d 	bl	10180 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10846:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1084a:	d905      	bls.n	10858 <sdc_init+0x28>
   1084c:	4620      	mov	r0, r4
   1084e:	b007      	add	sp, #28
   10850:	bd30      	pop	{r4, r5, pc}
   10852:	f06f 0015 	mvn.w	r0, #21
   10856:	e7fa      	b.n	1084e <sdc_init+0x1e>
   10858:	4c15      	ldr	r4, [pc, #84]	; (108b0 <sdc_init+0x80>)
   1085a:	4816      	ldr	r0, [pc, #88]	; (108b4 <sdc_init+0x84>)
   1085c:	6065      	str	r5, [r4, #4]
   1085e:	f000 f9eb 	bl	10c38 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
   10862:	2000      	movs	r0, #0
   10864:	7060      	strb	r0, [r4, #1]
   10866:	70a0      	strb	r0, [r4, #2]
   10868:	70e0      	strb	r0, [r4, #3]
   1086a:	4601      	mov	r1, r0
   1086c:	2218      	movs	r2, #24
   1086e:	4668      	mov	r0, sp
   10870:	f008 f913 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   10874:	2218      	movs	r2, #24
   10876:	4910      	ldr	r1, [pc, #64]	; (108b8 <sdc_init+0x88>)
   10878:	4668      	mov	r0, sp
   1087a:	f008 f894 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1087e:	2218      	movs	r2, #24
   10880:	4669      	mov	r1, sp
   10882:	480e      	ldr	r0, [pc, #56]	; (108bc <sdc_init+0x8c>)
   10884:	f008 f88f 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10888:	f3ef 8410 	mrs	r4, PRIMASK
   1088c:	b672      	cpsid	i
   1088e:	480c      	ldr	r0, [pc, #48]	; (108c0 <sdc_init+0x90>)
   10890:	f06f 010c 	mvn.w	r1, #12
   10894:	f000 fd9e 	bl	113d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
   10898:	480a      	ldr	r0, [pc, #40]	; (108c4 <sdc_init+0x94>)
   1089a:	f000 fe6b 	bl	11574 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
   1089e:	b118      	cbz	r0, 108a8 <sdc_init+0x78>
   108a0:	219a      	movs	r1, #154	; 0x9a
   108a2:	2003      	movs	r0, #3
   108a4:	f000 f810 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108a8:	b904      	cbnz	r4, 108ac <sdc_init+0x7c>
   108aa:	b662      	cpsie	i
   108ac:	2000      	movs	r0, #0
   108ae:	e7ce      	b.n	1084e <sdc_init+0x1e>
   108b0:	2000005c 	.word	0x2000005c
   108b4:	000106a5 	.word	0x000106a5
   108b8:	000109b4 	.word	0x000109b4
   108bc:	20001340 	.word	0x20001340
   108c0:	4000c000 	.word	0x4000c000
   108c4:	00010a45 	.word	0x00010a45

000108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
   108c8:	b50e      	push	{r1, r2, r3, lr}
   108ca:	b672      	cpsid	i
   108cc:	4a15      	ldr	r2, [pc, #84]	; (10924 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
   108ce:	6855      	ldr	r5, [r2, #4]
   108d0:	b1d5      	cbz	r5, 10908 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
   108d2:	2200      	movs	r2, #0
   108d4:	4603      	mov	r3, r0
   108d6:	466e      	mov	r6, sp
   108d8:	240a      	movs	r4, #10
   108da:	e003      	b.n	108e4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
   108dc:	fbb0 f0f4 	udiv	r0, r0, r4
   108e0:	1c52      	adds	r2, r2, #1
   108e2:	b2d2      	uxtb	r2, r2
   108e4:	2800      	cmp	r0, #0
   108e6:	d1f9      	bne.n	108dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
   108e8:	54b0      	strb	r0, [r6, r2]
   108ea:	e009      	b.n	10900 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
   108ec:	fbb3 f0f4 	udiv	r0, r3, r4
   108f0:	fb04 3010 	mls	r0, r4, r0, r3
   108f4:	fbb3 f3f4 	udiv	r3, r3, r4
   108f8:	1e52      	subs	r2, r2, #1
   108fa:	b2d2      	uxtb	r2, r2
   108fc:	3030      	adds	r0, #48	; 0x30
   108fe:	54b0      	strb	r0, [r6, r2]
   10900:	2a00      	cmp	r2, #0
   10902:	d1f3      	bne.n	108ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
   10904:	4630      	mov	r0, r6
   10906:	47a8      	blx	r5
   10908:	f3bf 8f4f 	dsb	sy
   1090c:	4806      	ldr	r0, [pc, #24]	; (10928 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
   1090e:	6801      	ldr	r1, [r0, #0]
   10910:	4a06      	ldr	r2, [pc, #24]	; (1092c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
   10912:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   10916:	4311      	orrs	r1, r2
   10918:	6001      	str	r1, [r0, #0]
   1091a:	f3bf 8f4f 	dsb	sy
   1091e:	bf00      	nop
   10920:	e7fd      	b.n	1091e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
   10922:	0000      	.short	0x0000
   10924:	2000005c 	.word	0x2000005c
   10928:	e000ed0c 	.word	0xe000ed0c
   1092c:	05fa0004 	.word	0x05fa0004

00010930 <sdc_support_adv>:
   10930:	4806      	ldr	r0, [pc, #24]	; (1094c <sdc_support_adv+0x1c>)
   10932:	b510      	push	{r4, lr}
   10934:	7881      	ldrb	r1, [r0, #2]
   10936:	7840      	ldrb	r0, [r0, #1]
   10938:	4301      	orrs	r1, r0
   1093a:	d002      	beq.n	10942 <sdc_support_adv+0x12>
   1093c:	f04f 30ff 	mov.w	r0, #4294967295
   10940:	bd10      	pop	{r4, pc}
   10942:	f006 fa97 	bl	16e74 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
   10946:	2000      	movs	r0, #0
   10948:	bd10      	pop	{r4, pc}
   1094a:	0000      	.short	0x0000
   1094c:	2000005c 	.word	0x2000005c

00010950 <sdc_support_dle>:
   10950:	4806      	ldr	r0, [pc, #24]	; (1096c <sdc_support_dle+0x1c>)
   10952:	b510      	push	{r4, lr}
   10954:	7881      	ldrb	r1, [r0, #2]
   10956:	7840      	ldrb	r0, [r0, #1]
   10958:	4301      	orrs	r1, r0
   1095a:	d002      	beq.n	10962 <sdc_support_dle+0x12>
   1095c:	f04f 30ff 	mov.w	r0, #4294967295
   10960:	bd10      	pop	{r4, pc}
   10962:	f006 f83f 	bl	169e4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
   10966:	2000      	movs	r0, #0
   10968:	bd10      	pop	{r4, pc}
   1096a:	0000      	.short	0x0000
   1096c:	2000005c 	.word	0x2000005c

00010970 <sdc_support_le_2m_phy>:
   10970:	4806      	ldr	r0, [pc, #24]	; (1098c <sdc_support_le_2m_phy+0x1c>)
   10972:	b510      	push	{r4, lr}
   10974:	7881      	ldrb	r1, [r0, #2]
   10976:	7840      	ldrb	r0, [r0, #1]
   10978:	4301      	orrs	r1, r0
   1097a:	d002      	beq.n	10982 <sdc_support_le_2m_phy+0x12>
   1097c:	f04f 30ff 	mov.w	r0, #4294967295
   10980:	bd10      	pop	{r4, pc}
   10982:	f00b fbab 	bl	1c0dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
   10986:	2000      	movs	r0, #0
   10988:	bd10      	pop	{r4, pc}
   1098a:	0000      	.short	0x0000
   1098c:	2000005c 	.word	0x2000005c

00010990 <sdc_support_slave>:
   10990:	4806      	ldr	r0, [pc, #24]	; (109ac <sdc_support_slave+0x1c>)
   10992:	b510      	push	{r4, lr}
   10994:	7881      	ldrb	r1, [r0, #2]
   10996:	7840      	ldrb	r0, [r0, #1]
   10998:	4301      	orrs	r1, r0
   1099a:	d002      	beq.n	109a2 <sdc_support_slave+0x12>
   1099c:	f04f 30ff 	mov.w	r0, #4294967295
   109a0:	bd10      	pop	{r4, pc}
   109a2:	f006 fa79 	bl	16e98 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
   109a6:	2000      	movs	r0, #0
   109a8:	bd10      	pop	{r4, pc}
   109aa:	0000      	.short	0x0000
   109ac:	2000005c 	.word	0x2000005c
   109b0:	00000001 	.word	0x00000001
   109b4:	00010101 	.word	0x00010101
   109b8:	031b1b00 	.word	0x031b1b00
   109bc:	00000002 	.word	0x00000002
   109c0:	00001d4c 	.word	0x00001d4c
   109c4:	001f0003 	.word	0x001f0003
   109c8:	00000000 	.word	0x00000000
   109cc:	66c5e70e 	.word	0x66c5e70e
   109d0:	ac3c1867 	.word	0xac3c1867
   109d4:	81ccd2b3 	.word	0x81ccd2b3
   109d8:	c0f1dca3 	.word	0xc0f1dca3
   109dc:	220236c0 	.word	0x220236c0

000109e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
   109e0:	4a05      	ldr	r2, [pc, #20]	; (109f8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
   109e2:	b510      	push	{r4, lr}
   109e4:	6852      	ldr	r2, [r2, #4]
   109e6:	b112      	cbz	r2, 109ee <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
   109e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   109ec:	4710      	bx	r2
   109ee:	2183      	movs	r1, #131	; 0x83
   109f0:	2004      	movs	r0, #4
   109f2:	f7ff ff69 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109f6:	0000      	.short	0x0000
   109f8:	20001358 	.word	0x20001358

000109fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
   109fc:	4a05      	ldr	r2, [pc, #20]	; (10a14 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
   109fe:	b510      	push	{r4, lr}
   10a00:	6892      	ldr	r2, [r2, #8]
   10a02:	b112      	cbz	r2, 10a0a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
   10a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a08:	4710      	bx	r2
   10a0a:	2189      	movs	r1, #137	; 0x89
   10a0c:	2004      	movs	r0, #4
   10a0e:	f7ff ff5b 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a12:	0000      	.short	0x0000
   10a14:	20001358 	.word	0x20001358

00010a18 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
   10a18:	4805      	ldr	r0, [pc, #20]	; (10a30 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
   10a1a:	6801      	ldr	r1, [r0, #0]
   10a1c:	b129      	cbz	r1, 10a2a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10a1e:	6841      	ldr	r1, [r0, #4]
   10a20:	b119      	cbz	r1, 10a2a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10a22:	6880      	ldr	r0, [r0, #8]
   10a24:	b108      	cbz	r0, 10a2a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   10a26:	2001      	movs	r0, #1
   10a28:	4770      	bx	lr
   10a2a:	2000      	movs	r0, #0
   10a2c:	4770      	bx	lr
   10a2e:	0000      	.short	0x0000
   10a30:	20001358 	.word	0x20001358

00010a34 <sdc_rand_source_register>:
   10a34:	4902      	ldr	r1, [pc, #8]	; (10a40 <sdc_rand_source_register+0xc>)
   10a36:	c80d      	ldmia	r0, {r0, r2, r3}
   10a38:	e881 000d 	stmia.w	r1, {r0, r2, r3}
   10a3c:	2000      	movs	r0, #0
   10a3e:	4770      	bx	lr
   10a40:	20001358 	.word	0x20001358

00010a44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
   10a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a46:	4c12      	ldr	r4, [pc, #72]	; (10a90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
   10a48:	2600      	movs	r6, #0
   10a4a:	6825      	ldr	r5, [r4, #0]
   10a4c:	e011      	b.n	10a72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   10a4e:	9800      	ldr	r0, [sp, #0]
   10a50:	2802      	cmp	r0, #2
   10a52:	d002      	beq.n	10a5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
   10a54:	2803      	cmp	r0, #3
   10a56:	d10c      	bne.n	10a72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   10a58:	e006      	b.n	10a68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
   10a5a:	6820      	ldr	r0, [r4, #0]
   10a5c:	b110      	cbz	r0, 10a64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
   10a5e:	2000      	movs	r0, #0
   10a60:	6026      	str	r6, [r4, #0]
   10a62:	e005      	b.n	10a70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
   10a64:	2128      	movs	r1, #40	; 0x28
   10a66:	e00c      	b.n	10a82 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   10a68:	6820      	ldr	r0, [r4, #0]
   10a6a:	b168      	cbz	r0, 10a88 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
   10a6c:	2001      	movs	r0, #1
   10a6e:	6026      	str	r6, [r4, #0]
   10a70:	47a8      	blx	r5
   10a72:	4668      	mov	r0, sp
   10a74:	f000 fd50 	bl	11518 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
   10a78:	2800      	cmp	r0, #0
   10a7a:	d0e8      	beq.n	10a4e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
   10a7c:	2805      	cmp	r0, #5
   10a7e:	d005      	beq.n	10a8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
   10a80:	2135      	movs	r1, #53	; 0x35
   10a82:	2004      	movs	r0, #4
   10a84:	f7ff ff20 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a88:	212d      	movs	r1, #45	; 0x2d
   10a8a:	e7fa      	b.n	10a82 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   10a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a8e:	0000      	.short	0x0000
   10a90:	20000064 	.word	0x20000064
   10a94:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10a96:	4c1f      	ldr	r4, [pc, #124]	; (10b14 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
   10a98:	4605      	mov	r5, r0
   10a9a:	7820      	ldrb	r0, [r4, #0]
   10a9c:	b140      	cbz	r0, 10ab0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
   10a9e:	78a2      	ldrb	r2, [r4, #2]
   10aa0:	1c61      	adds	r1, r4, #1
   10aa2:	4628      	mov	r0, r5
   10aa4:	1c92      	adds	r2, r2, #2
   10aa6:	f007 ff7e 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10aaa:	2000      	movs	r0, #0
   10aac:	7020      	strb	r0, [r4, #0]
   10aae:	e021      	b.n	10af4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
   10ab0:	4819      	ldr	r0, [pc, #100]	; (10b18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
   10ab2:	f002 f837 	bl	12b24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
   10ab6:	2800      	cmp	r0, #0
   10ab8:	d01d      	beq.n	10af6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
   10aba:	4c17      	ldr	r4, [pc, #92]	; (10b18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
   10abc:	7820      	ldrb	r0, [r4, #0]
   10abe:	2811      	cmp	r0, #17
   10ac0:	d104      	bne.n	10acc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
   10ac2:	210a      	movs	r1, #10
   10ac4:	203e      	movs	r0, #62	; 0x3e
   10ac6:	f008 f8ef 	bl	18ca8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
   10aca:	b118      	cbz	r0, 10ad4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
   10acc:	7820      	ldrb	r0, [r4, #0]
   10ace:	2808      	cmp	r0, #8
   10ad0:	d005      	beq.n	10ade <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
   10ad2:	e009      	b.n	10ae8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
   10ad4:	4910      	ldr	r1, [pc, #64]	; (10b18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
   10ad6:	4628      	mov	r0, r5
   10ad8:	f008 faee 	bl	190b8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
   10adc:	e00a      	b.n	10af4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
   10ade:	2105      	movs	r1, #5
   10ae0:	203e      	movs	r0, #62	; 0x3e
   10ae2:	f008 f8e1 	bl	18ca8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
   10ae6:	b138      	cbz	r0, 10af8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
   10ae8:	490b      	ldr	r1, [pc, #44]	; (10b18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
   10aea:	4628      	mov	r0, r5
   10aec:	f008 f93a 	bl	18d64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
   10af0:	2800      	cmp	r0, #0
   10af2:	d000      	beq.n	10af6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
   10af4:	2001      	movs	r0, #1
   10af6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10af8:	88a0      	ldrh	r0, [r4, #4]
   10afa:	f8ad 0000 	strh.w	r0, [sp]
   10afe:	a901      	add	r1, sp, #4
   10b00:	4668      	mov	r0, sp
   10b02:	f008 fbf7 	bl	192f4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   10b06:	2800      	cmp	r0, #0
   10b08:	d0f5      	beq.n	10af6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
   10b0a:	219b      	movs	r1, #155	; 0x9b
   10b0c:	2008      	movs	r0, #8
   10b0e:	f7ff fedb 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b12:	0000      	.short	0x0000
   10b14:	200014f6 	.word	0x200014f6
   10b18:	200013f4 	.word	0x200013f4
   10b1c:	b570      	push	{r4, r5, r6, lr}
   10b1e:	780a      	ldrb	r2, [r1, #0]
   10b20:	7082      	strb	r2, [r0, #2]
   10b22:	b33a      	cbz	r2, 10b74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
   10b24:	2a01      	cmp	r2, #1
   10b26:	d825      	bhi.n	10b74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
   10b28:	2313      	movs	r3, #19
   10b2a:	7003      	strb	r3, [r0, #0]
   10b2c:	2300      	movs	r3, #0
   10b2e:	e00a      	b.n	10b46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
   10b30:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   10b34:	eb00 0543 	add.w	r5, r0, r3, lsl #1
   10b38:	78a6      	ldrb	r6, [r4, #2]
   10b3a:	70ee      	strb	r6, [r5, #3]
   10b3c:	8864      	ldrh	r4, [r4, #2]
   10b3e:	0a24      	lsrs	r4, r4, #8
   10b40:	1c5b      	adds	r3, r3, #1
   10b42:	712c      	strb	r4, [r5, #4]
   10b44:	b2db      	uxtb	r3, r3
   10b46:	4293      	cmp	r3, r2
   10b48:	d3f2      	bcc.n	10b30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
   10b4a:	2300      	movs	r3, #0
   10b4c:	e00b      	b.n	10b66 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
   10b4e:	bf00      	nop
   10b50:	eb01 0543 	add.w	r5, r1, r3, lsl #1
   10b54:	eb00 0443 	add.w	r4, r0, r3, lsl #1
   10b58:	792e      	ldrb	r6, [r5, #4]
   10b5a:	7166      	strb	r6, [r4, #5]
   10b5c:	88ad      	ldrh	r5, [r5, #4]
   10b5e:	0a2d      	lsrs	r5, r5, #8
   10b60:	1c5b      	adds	r3, r3, #1
   10b62:	71a5      	strb	r5, [r4, #6]
   10b64:	b2db      	uxtb	r3, r3
   10b66:	4293      	cmp	r3, r2
   10b68:	d3f2      	bcc.n	10b50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
   10b6a:	2101      	movs	r1, #1
   10b6c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   10b70:	b2c0      	uxtb	r0, r0
   10b72:	bd70      	pop	{r4, r5, r6, pc}
   10b74:	2000      	movs	r0, #0
   10b76:	bd70      	pop	{r4, r5, r6, pc}

00010b78 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
   10b78:	2101      	movs	r1, #1
   10b7a:	4a0c      	ldr	r2, [pc, #48]	; (10bac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
   10b7c:	2840      	cmp	r0, #64	; 0x40
   10b7e:	d20c      	bcs.n	10b9a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
   10b80:	2820      	cmp	r0, #32
   10b82:	d803      	bhi.n	10b8c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
   10b84:	1e40      	subs	r0, r0, #1
   10b86:	4081      	lsls	r1, r0
   10b88:	6810      	ldr	r0, [r2, #0]
   10b8a:	e002      	b.n	10b92 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
   10b8c:	3821      	subs	r0, #33	; 0x21
   10b8e:	4081      	lsls	r1, r0
   10b90:	6850      	ldr	r0, [r2, #4]
   10b92:	4201      	tst	r1, r0
   10b94:	d107      	bne.n	10ba6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
   10b96:	2000      	movs	r0, #0
   10b98:	4770      	bx	lr
   10b9a:	28ff      	cmp	r0, #255	; 0xff
   10b9c:	d003      	beq.n	10ba6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
   10b9e:	3840      	subs	r0, #64	; 0x40
   10ba0:	4081      	lsls	r1, r0
   10ba2:	6890      	ldr	r0, [r2, #8]
   10ba4:	e7f5      	b.n	10b92 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
   10ba6:	2001      	movs	r0, #1
   10ba8:	4770      	bx	lr
   10baa:	0000      	.short	0x0000
   10bac:	20000068 	.word	0x20000068

00010bb0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
   10bb0:	2101      	movs	r1, #1
   10bb2:	1e40      	subs	r0, r0, #1
   10bb4:	4081      	lsls	r1, r0
   10bb6:	4804      	ldr	r0, [pc, #16]	; (10bc8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
   10bb8:	68c0      	ldr	r0, [r0, #12]
   10bba:	4201      	tst	r1, r0
   10bbc:	d001      	beq.n	10bc2 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
   10bbe:	2001      	movs	r0, #1
   10bc0:	4770      	bx	lr
   10bc2:	2000      	movs	r0, #0
   10bc4:	4770      	bx	lr
   10bc6:	0000      	.short	0x0000
   10bc8:	20000068 	.word	0x20000068

00010bcc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
   10bcc:	4901      	ldr	r1, [pc, #4]	; (10bd4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
   10bce:	6800      	ldr	r0, [r0, #0]
   10bd0:	60c8      	str	r0, [r1, #12]
   10bd2:	4770      	bx	lr
   10bd4:	20000068 	.word	0x20000068

00010bd8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
   10bd8:	4904      	ldr	r1, [pc, #16]	; (10bec <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
   10bda:	6802      	ldr	r2, [r0, #0]
   10bdc:	6840      	ldr	r0, [r0, #4]
   10bde:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
   10be2:	600a      	str	r2, [r1, #0]
   10be4:	4a02      	ldr	r2, [pc, #8]	; (10bf0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
   10be6:	4310      	orrs	r0, r2
   10be8:	6048      	str	r0, [r1, #4]
   10bea:	4770      	bx	lr
   10bec:	20000068 	.word	0x20000068
   10bf0:	024007f8 	.word	0x024007f8

00010bf4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
   10bf4:	4901      	ldr	r1, [pc, #4]	; (10bfc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
   10bf6:	6800      	ldr	r0, [r0, #0]
   10bf8:	6088      	str	r0, [r1, #8]
   10bfa:	4770      	bx	lr
   10bfc:	20000068 	.word	0x20000068

00010c00 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
   10c00:	4805      	ldr	r0, [pc, #20]	; (10c18 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
   10c02:	f04f 31ff 	mov.w	r1, #4294967295
   10c06:	6001      	str	r1, [r0, #0]
   10c08:	0cc9      	lsrs	r1, r1, #19
   10c0a:	6041      	str	r1, [r0, #4]
   10c0c:	2100      	movs	r1, #0
   10c0e:	6081      	str	r1, [r0, #8]
   10c10:	211f      	movs	r1, #31
   10c12:	60c1      	str	r1, [r0, #12]
   10c14:	4770      	bx	lr
   10c16:	0000      	.short	0x0000
   10c18:	20000068 	.word	0x20000068

00010c1c <sdc_hci_cmd_cb_reset>:
   10c1c:	b510      	push	{r4, lr}
   10c1e:	f7ff ffef 	bl	10c00 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
   10c22:	f00b f9cf 	bl	1bfc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
   10c26:	4604      	mov	r4, r0
   10c28:	4802      	ldr	r0, [pc, #8]	; (10c34 <sdc_hci_cmd_cb_reset+0x18>)
   10c2a:	6800      	ldr	r0, [r0, #0]
   10c2c:	b100      	cbz	r0, 10c30 <sdc_hci_cmd_cb_reset+0x14>
   10c2e:	4780      	blx	r0
   10c30:	4620      	mov	r0, r4
   10c32:	bd10      	pop	{r4, pc}
   10c34:	20000078 	.word	0x20000078

00010c38 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
   10c38:	4901      	ldr	r1, [pc, #4]	; (10c40 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
   10c3a:	6008      	str	r0, [r1, #0]
   10c3c:	4770      	bx	lr
   10c3e:	0000      	.short	0x0000
   10c40:	20000078 	.word	0x20000078

00010c44 <sdc_hci_cmd_vs_zephyr_read_version_info>:
   10c44:	2102      	movs	r1, #2
   10c46:	8001      	strh	r1, [r0, #0]
   10c48:	8041      	strh	r1, [r0, #2]
   10c4a:	2100      	movs	r1, #0
   10c4c:	7101      	strb	r1, [r0, #4]
   10c4e:	210e      	movs	r1, #14
   10c50:	7141      	strb	r1, [r0, #5]
   10c52:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
   10c56:	80c1      	strh	r1, [r0, #6]
   10c58:	4901      	ldr	r1, [pc, #4]	; (10c60 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
   10c5a:	6081      	str	r1, [r0, #8]
   10c5c:	2000      	movs	r0, #0
   10c5e:	4770      	bx	lr
   10c60:	3c186766 	.word	0x3c186766

00010c64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
   10c64:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10c66:	4604      	mov	r4, r0
   10c68:	4669      	mov	r1, sp
   10c6a:	f008 fea1 	bl	199b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10c6e:	b170      	cbz	r0, 10c8e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
   10c70:	f240 215a 	movw	r1, #602	; 0x25a
   10c74:	e008      	b.n	10c88 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
   10c76:	bf00      	nop
   10c78:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   10c7c:	4621      	mov	r1, r4
   10c7e:	f000 f8ab 	bl	10dd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10c82:	b120      	cbz	r0, 10c8e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
   10c84:	f240 215f 	movw	r1, #607	; 0x25f
   10c88:	2017      	movs	r0, #23
   10c8a:	f7ff fe1d 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10c8e:	4668      	mov	r0, sp
   10c90:	f000 f852 	bl	10d38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10c94:	2800      	cmp	r0, #0
   10c96:	d0ef      	beq.n	10c78 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
   10c98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00010c9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
   10c9c:	b510      	push	{r4, lr}
   10c9e:	2802      	cmp	r0, #2
   10ca0:	d304      	bcc.n	10cac <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
   10ca2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   10ca6:	2017      	movs	r0, #23
   10ca8:	f7ff fe0e 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10cac:	4901      	ldr	r1, [pc, #4]	; (10cb4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
   10cae:	5c08      	ldrb	r0, [r1, r0]
   10cb0:	bd10      	pop	{r4, pc}
   10cb2:	0000      	.short	0x0000
   10cb4:	20001364 	.word	0x20001364

00010cb8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
   10cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cba:	0005      	movs	r5, r0
   10cbc:	9500      	str	r5, [sp, #0]
   10cbe:	d010      	beq.n	10ce2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
   10cc0:	2600      	movs	r6, #0
   10cc2:	7808      	ldrb	r0, [r1, #0]
   10cc4:	7849      	ldrb	r1, [r1, #1]
   10cc6:	4604      	mov	r4, r0
   10cc8:	42a1      	cmp	r1, r4
   10cca:	d900      	bls.n	10cce <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
   10ccc:	460c      	mov	r4, r1
   10cce:	1cea      	adds	r2, r5, #3
   10cd0:	f022 0203 	bic.w	r2, r2, #3
   10cd4:	42aa      	cmp	r2, r5
   10cd6:	d006      	beq.n	10ce6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
   10cd8:	f240 1179 	movw	r1, #377	; 0x179
   10cdc:	2017      	movs	r0, #23
   10cde:	f7ff fdf3 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ce2:	2601      	movs	r6, #1
   10ce4:	e7ed      	b.n	10cc2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
   10ce6:	4f13      	ldr	r7, [pc, #76]	; (10d34 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
   10ce8:	7038      	strb	r0, [r7, #0]
   10cea:	7079      	strb	r1, [r7, #1]
   10cec:	4631      	mov	r1, r6
   10cee:	4668      	mov	r0, sp
   10cf0:	f000 f8ee 	bl	10ed0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
   10cf4:	2100      	movs	r1, #0
   10cf6:	460b      	mov	r3, r1
   10cf8:	9800      	ldr	r0, [sp, #0]
   10cfa:	1cc0      	adds	r0, r0, #3
   10cfc:	f020 0003 	bic.w	r0, r0, #3
   10d00:	9000      	str	r0, [sp, #0]
   10d02:	b96e      	cbnz	r6, 10d20 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
   10d04:	eb07 0281 	add.w	r2, r7, r1, lsl #2
   10d08:	60d0      	str	r0, [r2, #12]
   10d0a:	2000      	movs	r0, #0
   10d0c:	e006      	b.n	10d1c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
   10d0e:	bf00      	nop
   10d10:	f8d2 c00c 	ldr.w	ip, [r2, #12]
   10d14:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
   10d18:	1c40      	adds	r0, r0, #1
   10d1a:	b2c0      	uxtb	r0, r0
   10d1c:	42a0      	cmp	r0, r4
   10d1e:	d3f7      	bcc.n	10d10 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
   10d20:	9800      	ldr	r0, [sp, #0]
   10d22:	1c49      	adds	r1, r1, #1
   10d24:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   10d28:	b2c9      	uxtb	r1, r1
   10d2a:	9000      	str	r0, [sp, #0]
   10d2c:	2902      	cmp	r1, #2
   10d2e:	d3e3      	bcc.n	10cf8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
   10d30:	1b40      	subs	r0, r0, r5
   10d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d34:	20001364 	.word	0x20001364

00010d38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
   10d38:	b570      	push	{r4, r5, r6, lr}
   10d3a:	4604      	mov	r4, r0
   10d3c:	f008 ffb1 	bl	19ca2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   10d40:	b108      	cbz	r0, 10d46 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
   10d42:	2010      	movs	r0, #16
   10d44:	bd70      	pop	{r4, r5, r6, pc}
   10d46:	7825      	ldrb	r5, [r4, #0]
   10d48:	f000 f8fe 	bl	10f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
   10d4c:	4602      	mov	r2, r0
   10d4e:	480c      	ldr	r0, [pc, #48]	; (10d80 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
   10d50:	8861      	ldrh	r1, [r4, #2]
   10d52:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   10d56:	e00e      	b.n	10d76 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
   10d58:	68c3      	ldr	r3, [r0, #12]
   10d5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10d5e:	b143      	cbz	r3, 10d72 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
   10d60:	1c4a      	adds	r2, r1, #1
   10d62:	8062      	strh	r2, [r4, #2]
   10d64:	80a1      	strh	r1, [r4, #4]
   10d66:	68c0      	ldr	r0, [r0, #12]
   10d68:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   10d6c:	60a0      	str	r0, [r4, #8]
   10d6e:	2000      	movs	r0, #0
   10d70:	bd70      	pop	{r4, r5, r6, pc}
   10d72:	1c49      	adds	r1, r1, #1
   10d74:	b289      	uxth	r1, r1
   10d76:	4291      	cmp	r1, r2
   10d78:	d3ee      	bcc.n	10d58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
   10d7a:	8061      	strh	r1, [r4, #2]
   10d7c:	2005      	movs	r0, #5
   10d7e:	bd70      	pop	{r4, r5, r6, pc}
   10d80:	20001364 	.word	0x20001364

00010d84 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
   10d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d88:	b121      	cbz	r1, 10d94 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
   10d8a:	2901      	cmp	r1, #1
   10d8c:	d002      	beq.n	10d94 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
   10d8e:	2000      	movs	r0, #0
   10d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d94:	4c0f      	ldr	r4, [pc, #60]	; (10dd4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
   10d96:	2700      	movs	r7, #0
   10d98:	463b      	mov	r3, r7
   10d9a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   10d9e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
   10da2:	f814 c001 	ldrb.w	ip, [r4, r1]
   10da6:	e00a      	b.n	10dbe <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
   10da8:	19dc      	adds	r4, r3, r7
   10daa:	f8d5 e00c 	ldr.w	lr, [r5, #12]
   10dae:	b2a4      	uxth	r4, r4
   10db0:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
   10db4:	f1be 0f00 	cmp.w	lr, #0
   10db8:	d004      	beq.n	10dc4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
   10dba:	1c5b      	adds	r3, r3, #1
   10dbc:	b29b      	uxth	r3, r3
   10dbe:	459c      	cmp	ip, r3
   10dc0:	d8f2      	bhi.n	10da8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
   10dc2:	4634      	mov	r4, r6
   10dc4:	8004      	strh	r4, [r0, #0]
   10dc6:	4620      	mov	r0, r4
   10dc8:	42b4      	cmp	r4, r6
   10dca:	d0e0      	beq.n	10d8e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
   10dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10dd0:	f000 b834 	b.w	10e3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
   10dd4:	20001364 	.word	0x20001364

00010dd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
   10dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ddc:	4606      	mov	r6, r0
   10dde:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   10de2:	460c      	mov	r4, r1
   10de4:	f243 0702 	movw	r7, #12290	; 0x3002
   10de8:	38ff      	subs	r0, #255	; 0xff
   10dea:	d020      	beq.n	10e2e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
   10dec:	2c02      	cmp	r4, #2
   10dee:	d302      	bcc.n	10df6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
   10df0:	2007      	movs	r0, #7
   10df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10df6:	4630      	mov	r0, r6
   10df8:	f000 f85a 	bl	10eb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
   10dfc:	0005      	movs	r5, r0
   10dfe:	d016      	beq.n	10e2e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
   10e00:	480c      	ldr	r0, [pc, #48]	; (10e34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
   10e02:	4629      	mov	r1, r5
   10e04:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
   10e08:	4630      	mov	r0, r6
   10e0a:	4790      	blx	r2
   10e0c:	480a      	ldr	r0, [pc, #40]	; (10e38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
   10e0e:	2100      	movs	r1, #0
   10e10:	eb00 0784 	add.w	r7, r0, r4, lsl #2
   10e14:	68f8      	ldr	r0, [r7, #12]
   10e16:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
   10e1a:	4620      	mov	r0, r4
   10e1c:	f000 f88a 	bl	10f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
   10e20:	4602      	mov	r2, r0
   10e22:	4629      	mov	r1, r5
   10e24:	6878      	ldr	r0, [r7, #4]
   10e26:	f008 fda2 	bl	1996e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   10e2a:	2000      	movs	r0, #0
   10e2c:	e7e1      	b.n	10df2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
   10e2e:	4638      	mov	r0, r7
   10e30:	e7df      	b.n	10df2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
   10e32:	0000      	.short	0x0000
   10e34:	00010f68 	.word	0x00010f68
   10e38:	20001364 	.word	0x20001364
   10e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e40:	4690      	mov	r8, r2
   10e42:	460d      	mov	r5, r1
   10e44:	4607      	mov	r7, r0
   10e46:	f008 fdc4 	bl	199d2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
   10e4a:	b148      	cbz	r0, 10e60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
   10e4c:	4816      	ldr	r0, [pc, #88]	; (10ea8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
   10e4e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
   10e52:	68f0      	ldr	r0, [r6, #12]
   10e54:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
   10e58:	b128      	cbz	r0, 10e66 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
   10e5a:	f44f 719d 	mov.w	r1, #314	; 0x13a
   10e5e:	e015      	b.n	10e8c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
   10e60:	f240 1139 	movw	r1, #313	; 0x139
   10e64:	e012      	b.n	10e8c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
   10e66:	6870      	ldr	r0, [r6, #4]
   10e68:	2800      	cmp	r0, #0
   10e6a:	d01a      	beq.n	10ea2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
   10e6c:	4628      	mov	r0, r5
   10e6e:	f000 f861 	bl	10f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
   10e72:	4601      	mov	r1, r0
   10e74:	6870      	ldr	r0, [r6, #4]
   10e76:	f008 fd2c 	bl	198d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   10e7a:	0004      	movs	r4, r0
   10e7c:	d010      	beq.n	10ea0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
   10e7e:	68f0      	ldr	r0, [r6, #12]
   10e80:	2d02      	cmp	r5, #2
   10e82:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
   10e86:	d304      	bcc.n	10e92 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
   10e88:	f240 1145 	movw	r1, #325	; 0x145
   10e8c:	2017      	movs	r0, #23
   10e8e:	f7ff fd1b 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10e92:	4806      	ldr	r0, [pc, #24]	; (10eac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
   10e94:	4642      	mov	r2, r8
   10e96:	4621      	mov	r1, r4
   10e98:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
   10e9c:	4638      	mov	r0, r7
   10e9e:	4798      	blx	r3
   10ea0:	4620      	mov	r0, r4
   10ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ea6:	0000      	.short	0x0000
   10ea8:	20001364 	.word	0x20001364
   10eac:	00010f60 	.word	0x00010f60
   10eb0:	b570      	push	{r4, r5, r6, lr}
   10eb2:	460c      	mov	r4, r1
   10eb4:	4605      	mov	r5, r0
   10eb6:	f008 fd8c 	bl	199d2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
   10eba:	2800      	cmp	r0, #0
   10ebc:	d005      	beq.n	10eca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
   10ebe:	4803      	ldr	r0, [pc, #12]	; (10ecc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
   10ec0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   10ec4:	68c0      	ldr	r0, [r0, #12]
   10ec6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   10eca:	bd70      	pop	{r4, r5, r6, pc}
   10ecc:	20001364 	.word	0x20001364
   10ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ed4:	4e16      	ldr	r6, [pc, #88]	; (10f30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
   10ed6:	4688      	mov	r8, r1
   10ed8:	4605      	mov	r5, r0
   10eda:	2400      	movs	r4, #0
   10edc:	6828      	ldr	r0, [r5, #0]
   10ede:	1cc0      	adds	r0, r0, #3
   10ee0:	f020 0003 	bic.w	r0, r0, #3
   10ee4:	6028      	str	r0, [r5, #0]
   10ee6:	4620      	mov	r0, r4
   10ee8:	f000 f824 	bl	10f34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
   10eec:	5d31      	ldrb	r1, [r6, r4]
   10eee:	4348      	muls	r0, r1
   10ef0:	f1b8 0f00 	cmp.w	r8, #0
   10ef4:	d001      	beq.n	10efa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
   10ef6:	2200      	movs	r2, #0
   10ef8:	e000      	b.n	10efc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
   10efa:	682a      	ldr	r2, [r5, #0]
   10efc:	4601      	mov	r1, r0
   10efe:	9200      	str	r2, [sp, #0]
   10f00:	b132      	cbz	r2, 10f10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
   10f02:	2700      	movs	r7, #0
   10f04:	ea4f 000d 	mov.w	r0, sp
   10f08:	f008 fd10 	bl	1992c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   10f0c:	b11f      	cbz	r7, 10f16 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
   10f0e:	e006      	b.n	10f1e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
   10f10:	2701      	movs	r7, #1
   10f12:	2000      	movs	r0, #0
   10f14:	e7f8      	b.n	10f08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
   10f16:	eb06 0184 	add.w	r1, r6, r4, lsl #2
   10f1a:	9a00      	ldr	r2, [sp, #0]
   10f1c:	604a      	str	r2, [r1, #4]
   10f1e:	6829      	ldr	r1, [r5, #0]
   10f20:	1c64      	adds	r4, r4, #1
   10f22:	4408      	add	r0, r1
   10f24:	b2e4      	uxtb	r4, r4
   10f26:	6028      	str	r0, [r5, #0]
   10f28:	2c02      	cmp	r4, #2
   10f2a:	d3d7      	bcc.n	10edc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
   10f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10f30:	20001364 	.word	0x20001364
   10f34:	4903      	ldr	r1, [pc, #12]	; (10f44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
   10f36:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   10f3a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   10f3e:	1cc0      	adds	r0, r0, #3
   10f40:	4008      	ands	r0, r1
   10f42:	4770      	bx	lr
   10f44:	00010f5c 	.word	0x00010f5c
   10f48:	4903      	ldr	r1, [pc, #12]	; (10f58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
   10f4a:	7808      	ldrb	r0, [r1, #0]
   10f4c:	7849      	ldrb	r1, [r1, #1]
   10f4e:	4288      	cmp	r0, r1
   10f50:	d200      	bcs.n	10f54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
   10f52:	4608      	mov	r0, r1
   10f54:	4770      	bx	lr
   10f56:	0000      	.short	0x0000
   10f58:	20001364 	.word	0x20001364
   10f5c:	00d40218 	.word	0x00d40218
   10f60:	000199e7 	.word	0x000199e7
   10f64:	000199e7 	.word	0x000199e7
   10f68:	0001b5a7 	.word	0x0001b5a7
   10f6c:	0001a995 	.word	0x0001a995

00010f70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
   10f70:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f74:	4c26      	ldr	r4, [pc, #152]	; (11010 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
   10f76:	4680      	mov	r8, r0
   10f78:	b081      	sub	sp, #4
   10f7a:	6820      	ldr	r0, [r4, #0]
   10f7c:	469a      	mov	sl, r3
   10f7e:	4693      	mov	fp, r2
   10f80:	b158      	cbz	r0, 10f9a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
   10f82:	7a02      	ldrb	r2, [r0, #8]
   10f84:	4542      	cmp	r2, r8
   10f86:	d903      	bls.n	10f90 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
   10f88:	6841      	ldr	r1, [r0, #4]
   10f8a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
   10f8e:	b140      	cbz	r0, 10fa2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
   10f90:	f243 0002 	movw	r0, #12290	; 0x3002
   10f94:	b005      	add	sp, #20
   10f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f9a:	21a5      	movs	r1, #165	; 0xa5
   10f9c:	2018      	movs	r0, #24
   10f9e:	f7ff fc93 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10fa2:	4619      	mov	r1, r3
   10fa4:	9802      	ldr	r0, [sp, #8]
   10fa6:	f008 fd36 	bl	19a16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   10faa:	b286      	uxth	r6, r0
   10fac:	4658      	mov	r0, fp
   10fae:	990e      	ldr	r1, [sp, #56]	; 0x38
   10fb0:	f008 fd28 	bl	19a04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   10fb4:	b285      	uxth	r5, r0
   10fb6:	1970      	adds	r0, r6, r5
   10fb8:	1d00      	adds	r0, r0, #4
   10fba:	b287      	uxth	r7, r0
   10fbc:	6820      	ldr	r0, [r4, #0]
   10fbe:	46a1      	mov	r9, r4
   10fc0:	4639      	mov	r1, r7
   10fc2:	6800      	ldr	r0, [r0, #0]
   10fc4:	f008 fc85 	bl	198d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   10fc8:	0004      	movs	r4, r0
   10fca:	d01f      	beq.n	1100c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
   10fcc:	8067      	strh	r7, [r4, #2]
   10fce:	8025      	strh	r5, [r4, #0]
   10fd0:	4629      	mov	r1, r5
   10fd2:	1d20      	adds	r0, r4, #4
   10fd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   10fd6:	4607      	mov	r7, r0
   10fd8:	465a      	mov	r2, fp
   10fda:	2301      	movs	r3, #1
   10fdc:	9500      	str	r5, [sp, #0]
   10fde:	f008 fbd8 	bl	19792 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   10fe2:	8820      	ldrh	r0, [r4, #0]
   10fe4:	4631      	mov	r1, r6
   10fe6:	4438      	add	r0, r7
   10fe8:	2301      	movs	r3, #1
   10fea:	9a02      	ldr	r2, [sp, #8]
   10fec:	f8cd a000 	str.w	sl, [sp]
   10ff0:	f008 fbcf 	bl	19792 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   10ff4:	8820      	ldrh	r0, [r4, #0]
   10ff6:	19c1      	adds	r1, r0, r7
   10ff8:	4638      	mov	r0, r7
   10ffa:	f008 fbfb 	bl	197f4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
   10ffe:	f8d9 0000 	ldr.w	r0, [r9]
   11002:	6841      	ldr	r1, [r0, #4]
   11004:	2000      	movs	r0, #0
   11006:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
   1100a:	e7c3      	b.n	10f94 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   1100c:	2004      	movs	r0, #4
   1100e:	e7c1      	b.n	10f94 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   11010:	2000007c 	.word	0x2000007c

00011014 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
   11014:	b570      	push	{r4, r5, r6, lr}
   11016:	4c14      	ldr	r4, [pc, #80]	; (11068 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
   11018:	6823      	ldr	r3, [r4, #0]
   1101a:	b18b      	cbz	r3, 11040 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
   1101c:	7a19      	ldrb	r1, [r3, #8]
   1101e:	4281      	cmp	r1, r0
   11020:	d912      	bls.n	11048 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   11022:	685a      	ldr	r2, [r3, #4]
   11024:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   11028:	b171      	cbz	r1, 11048 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   1102a:	2500      	movs	r5, #0
   1102c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   11030:	884a      	ldrh	r2, [r1, #2]
   11032:	6818      	ldr	r0, [r3, #0]
   11034:	f008 fc9b 	bl	1996e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   11038:	6821      	ldr	r1, [r4, #0]
   1103a:	2000      	movs	r0, #0
   1103c:	7a0a      	ldrb	r2, [r1, #8]
   1103e:	e00c      	b.n	1105a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
   11040:	21c8      	movs	r1, #200	; 0xc8
   11042:	2018      	movs	r0, #24
   11044:	f7ff fc40 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11048:	f243 0002 	movw	r0, #12290	; 0x3002
   1104c:	bd70      	pop	{r4, r5, r6, pc}
   1104e:	684b      	ldr	r3, [r1, #4]
   11050:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11054:	b933      	cbnz	r3, 11064 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
   11056:	1c40      	adds	r0, r0, #1
   11058:	b2c0      	uxtb	r0, r0
   1105a:	4282      	cmp	r2, r0
   1105c:	d8f7      	bhi.n	1104e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
   1105e:	6808      	ldr	r0, [r1, #0]
   11060:	f008 fc7a 	bl	19958 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
   11064:	2000      	movs	r0, #0
   11066:	bd70      	pop	{r4, r5, r6, pc}
   11068:	2000007c 	.word	0x2000007c

0001106c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
   1106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11070:	460d      	mov	r5, r1
   11072:	0004      	movs	r4, r0
   11074:	4690      	mov	r8, r2
   11076:	f04f 0600 	mov.w	r6, #0
   1107a:	d009      	beq.n	11090 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
   1107c:	2700      	movs	r7, #0
   1107e:	1ce0      	adds	r0, r4, #3
   11080:	f020 0003 	bic.w	r0, r0, #3
   11084:	42a0      	cmp	r0, r4
   11086:	d005      	beq.n	11094 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
   11088:	2186      	movs	r1, #134	; 0x86
   1108a:	2018      	movs	r0, #24
   1108c:	f7ff fc1c 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11090:	2701      	movs	r7, #1
   11092:	e7f4      	b.n	1107e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
   11094:	b1cd      	cbz	r5, 110ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
   11096:	4611      	mov	r1, r2
   11098:	2000      	movs	r0, #0
   1109a:	f008 fc47 	bl	1992c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   1109e:	300c      	adds	r0, #12
   110a0:	eb00 0685 	add.w	r6, r0, r5, lsl #2
   110a4:	b98f      	cbnz	r7, 110ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
   110a6:	4f0a      	ldr	r7, [pc, #40]	; (110d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
   110a8:	f104 000c 	add.w	r0, r4, #12
   110ac:	00aa      	lsls	r2, r5, #2
   110ae:	603c      	str	r4, [r7, #0]
   110b0:	7225      	strb	r5, [r4, #8]
   110b2:	6060      	str	r0, [r4, #4]
   110b4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   110b8:	6020      	str	r0, [r4, #0]
   110ba:	2100      	movs	r1, #0
   110bc:	6860      	ldr	r0, [r4, #4]
   110be:	f007 fcec 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   110c2:	4641      	mov	r1, r8
   110c4:	6838      	ldr	r0, [r7, #0]
   110c6:	f008 fc31 	bl	1992c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   110ca:	4630      	mov	r0, r6
   110cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   110d0:	2000007c 	.word	0x2000007c

000110d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
   110d4:	b570      	push	{r4, r5, r6, lr}
   110d6:	4d08      	ldr	r5, [pc, #32]	; (110f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
   110d8:	6828      	ldr	r0, [r5, #0]
   110da:	2800      	cmp	r0, #0
   110dc:	d00a      	beq.n	110f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
   110de:	2400      	movs	r4, #0
   110e0:	e004      	b.n	110ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
   110e2:	4620      	mov	r0, r4
   110e4:	f7ff ff96 	bl	11014 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   110e8:	1c64      	adds	r4, r4, #1
   110ea:	b2e4      	uxtb	r4, r4
   110ec:	6828      	ldr	r0, [r5, #0]
   110ee:	7a00      	ldrb	r0, [r0, #8]
   110f0:	42a0      	cmp	r0, r4
   110f2:	d8f6      	bhi.n	110e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
   110f4:	bd70      	pop	{r4, r5, r6, pc}
   110f6:	0000      	.short	0x0000
   110f8:	2000007c 	.word	0x2000007c

000110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
   110fc:	4909      	ldr	r1, [pc, #36]	; (11124 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
   110fe:	b510      	push	{r4, lr}
   11100:	4602      	mov	r2, r0
   11102:	6809      	ldr	r1, [r1, #0]
   11104:	2000      	movs	r0, #0
   11106:	b149      	cbz	r1, 1111c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
   11108:	7a0b      	ldrb	r3, [r1, #8]
   1110a:	4293      	cmp	r3, r2
   1110c:	d905      	bls.n	1111a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   1110e:	6849      	ldr	r1, [r1, #4]
   11110:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   11114:	2900      	cmp	r1, #0
   11116:	d000      	beq.n	1111a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   11118:	1d08      	adds	r0, r1, #4
   1111a:	bd10      	pop	{r4, pc}
   1111c:	21ee      	movs	r1, #238	; 0xee
   1111e:	2018      	movs	r0, #24
   11120:	f7ff fbd2 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11124:	2000007c 	.word	0x2000007c

00011128 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
   11128:	490a      	ldr	r1, [pc, #40]	; (11154 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
   1112a:	b510      	push	{r4, lr}
   1112c:	4602      	mov	r2, r0
   1112e:	6809      	ldr	r1, [r1, #0]
   11130:	2000      	movs	r0, #0
   11132:	b159      	cbz	r1, 1114c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
   11134:	7a0b      	ldrb	r3, [r1, #8]
   11136:	4293      	cmp	r3, r2
   11138:	d907      	bls.n	1114a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   1113a:	6849      	ldr	r1, [r1, #4]
   1113c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   11140:	2900      	cmp	r1, #0
   11142:	d002      	beq.n	1114a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   11144:	f831 0b04 	ldrh.w	r0, [r1], #4
   11148:	4408      	add	r0, r1
   1114a:	bd10      	pop	{r4, pc}
   1114c:	21fc      	movs	r1, #252	; 0xfc
   1114e:	2018      	movs	r0, #24
   11150:	f7ff fbba 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11154:	2000007c 	.word	0x2000007c
   11158:	b570      	push	{r4, r5, r6, lr}
   1115a:	4b1e      	ldr	r3, [pc, #120]	; (111d4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
   1115c:	6845      	ldr	r5, [r0, #4]
   1115e:	4604      	mov	r4, r0
   11160:	2200      	movs	r2, #0
   11162:	b1a1      	cbz	r1, 1118e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
   11164:	2001      	movs	r0, #1
   11166:	7060      	strb	r0, [r4, #1]
   11168:	8858      	ldrh	r0, [r3, #2]
   1116a:	0881      	lsrs	r1, r0, #2
   1116c:	f05f 0000 	movs.w	r0, #0
   11170:	eb04 0340 	add.w	r3, r4, r0, lsl #1
   11174:	eb04 0680 	add.w	r6, r4, r0, lsl #2
   11178:	831a      	strh	r2, [r3, #24]
   1117a:	8419      	strh	r1, [r3, #32]
   1117c:	fb00 5301 	mla	r3, r0, r1, r5
   11180:	6073      	str	r3, [r6, #4]
   11182:	1823      	adds	r3, r4, r0
   11184:	1c40      	adds	r0, r0, #1
   11186:	751a      	strb	r2, [r3, #20]
   11188:	2804      	cmp	r0, #4
   1118a:	d3f1      	bcc.n	11170 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
   1118c:	bd70      	pop	{r4, r5, r6, pc}
   1118e:	7062      	strb	r2, [r4, #1]
   11190:	f05f 0000 	movs.w	r0, #0
   11194:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   11198:	830a      	strh	r2, [r1, #24]
   1119a:	840a      	strh	r2, [r1, #32]
   1119c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   111a0:	604a      	str	r2, [r1, #4]
   111a2:	1821      	adds	r1, r4, r0
   111a4:	1c40      	adds	r0, r0, #1
   111a6:	750a      	strb	r2, [r1, #20]
   111a8:	2804      	cmp	r0, #4
   111aa:	d3f3      	bcc.n	11194 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
   111ac:	8858      	ldrh	r0, [r3, #2]
   111ae:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   111b2:	d201      	bcs.n	111b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
   111b4:	0846      	lsrs	r6, r0, #1
   111b6:	e000      	b.n	111ba <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
   111b8:	26ff      	movs	r6, #255	; 0xff
   111ba:	f008 fc9f 	bl	19afc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
   111be:	6065      	str	r5, [r4, #4]
   111c0:	8420      	strh	r0, [r4, #32]
   111c2:	1829      	adds	r1, r5, r0
   111c4:	60a1      	str	r1, [r4, #8]
   111c6:	8466      	strh	r6, [r4, #34]	; 0x22
   111c8:	60e5      	str	r5, [r4, #12]
   111ca:	84a0      	strh	r0, [r4, #36]	; 0x24
   111cc:	6121      	str	r1, [r4, #16]
   111ce:	84e6      	strh	r6, [r4, #38]	; 0x26
   111d0:	bd70      	pop	{r4, r5, r6, pc}
   111d2:	0000      	.short	0x0000
   111d4:	20000080 	.word	0x20000080

000111d8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
   111d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111dc:	b170      	cbz	r0, 111fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
   111de:	2500      	movs	r5, #0
   111e0:	4411      	add	r1, r2
   111e2:	b2cc      	uxtb	r4, r1
   111e4:	4e24      	ldr	r6, [pc, #144]	; (11278 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
   111e6:	1cc1      	adds	r1, r0, #3
   111e8:	2700      	movs	r7, #0
   111ea:	f021 0103 	bic.w	r1, r1, #3
   111ee:	7034      	strb	r4, [r6, #0]
   111f0:	4281      	cmp	r1, r0
   111f2:	d005      	beq.n	11200 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
   111f4:	214e      	movs	r1, #78	; 0x4e
   111f6:	2009      	movs	r0, #9
   111f8:	f7ff fb66 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   111fc:	2501      	movs	r5, #1
   111fe:	e7ef      	b.n	111e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
   11200:	2b1f      	cmp	r3, #31
   11202:	d804      	bhi.n	1120e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
   11204:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11208:	ea01 0183 	and.w	r1, r1, r3, lsl #2
   1120c:	e009      	b.n	11222 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
   1120e:	0059      	lsls	r1, r3, #1
   11210:	2bff      	cmp	r3, #255	; 0xff
   11212:	d90b      	bls.n	1122c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
   11214:	f103 02ff 	add.w	r2, r3, #255	; 0xff
   11218:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   1121c:	d200      	bcs.n	11220 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
   1121e:	4611      	mov	r1, r2
   11220:	b289      	uxth	r1, r1
   11222:	1cc9      	adds	r1, r1, #3
   11224:	f021 0303 	bic.w	r3, r1, #3
   11228:	b135      	cbz	r5, 11238 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
   1122a:	e007      	b.n	1123c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
   1122c:	227c      	movs	r2, #124	; 0x7c
   1122e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   11232:	d3f5      	bcc.n	11220 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
   11234:	217c      	movs	r1, #124	; 0x7c
   11236:	e7f3      	b.n	11220 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
   11238:	6070      	str	r0, [r6, #4]
   1123a:	8073      	strh	r3, [r6, #2]
   1123c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   11240:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
   11244:	2100      	movs	r1, #0
   11246:	6876      	ldr	r6, [r6, #4]
   11248:	f04f 0c01 	mov.w	ip, #1
   1124c:	e00d      	b.n	1126a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
   1124e:	b94d      	cbnz	r5, 11264 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
   11250:	eb01 0781 	add.w	r7, r1, r1, lsl #2
   11254:	eb00 0e02 	add.w	lr, r0, r2
   11258:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
   1125c:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
   11260:	f8c7 e004 	str.w	lr, [r7, #4]
   11264:	1c49      	adds	r1, r1, #1
   11266:	441a      	add	r2, r3
   11268:	b2c9      	uxtb	r1, r1
   1126a:	42a1      	cmp	r1, r4
   1126c:	d3ef      	bcc.n	1124e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
   1126e:	1dd2      	adds	r2, r2, #7
   11270:	f022 0007 	bic.w	r0, r2, #7
   11274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11278:	20000080 	.word	0x20000080

0001127c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
   1127c:	b570      	push	{r4, r5, r6, lr}
   1127e:	4a10      	ldr	r2, [pc, #64]	; (112c0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
   11280:	2000      	movs	r0, #0
   11282:	6851      	ldr	r1, [r2, #4]
   11284:	7812      	ldrb	r2, [r2, #0]
   11286:	e014      	b.n	112b2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
   11288:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1128c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
   11290:	b16b      	cbz	r3, 112ae <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
   11292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11296:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
   1129a:	d00c      	beq.n	112b6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
   1129c:	2500      	movs	r5, #0
   1129e:	70a5      	strb	r5, [r4, #2]
   112a0:	2101      	movs	r1, #1
   112a2:	4620      	mov	r0, r4
   112a4:	f7ff ff58 	bl	11158 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   112a8:	7025      	strb	r5, [r4, #0]
   112aa:	4620      	mov	r0, r4
   112ac:	bd70      	pop	{r4, r5, r6, pc}
   112ae:	1c40      	adds	r0, r0, #1
   112b0:	b2c0      	uxtb	r0, r0
   112b2:	4290      	cmp	r0, r2
   112b4:	d3e8      	bcc.n	11288 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
   112b6:	21a9      	movs	r1, #169	; 0xa9
   112b8:	2009      	movs	r0, #9
   112ba:	f7ff fb05 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   112be:	0000      	.short	0x0000
   112c0:	20000080 	.word	0x20000080

000112c4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
   112c4:	4804      	ldr	r0, [pc, #16]	; (112d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
   112c6:	b510      	push	{r4, lr}
   112c8:	8840      	ldrh	r0, [r0, #2]
   112ca:	0884      	lsrs	r4, r0, #2
   112cc:	f008 fc16 	bl	19afc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
   112d0:	4284      	cmp	r4, r0
   112d2:	d300      	bcc.n	112d6 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
   112d4:	4620      	mov	r0, r4
   112d6:	bd10      	pop	{r4, pc}
   112d8:	20000080 	.word	0x20000080
   112dc:	4909      	ldr	r1, [pc, #36]	; (11304 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
   112de:	b510      	push	{r4, lr}
   112e0:	4807      	ldr	r0, [pc, #28]	; (11300 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
   112e2:	6008      	str	r0, [r1, #0]
   112e4:	4b08      	ldr	r3, [pc, #32]	; (11308 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
   112e6:	2011      	movs	r0, #17
   112e8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   112ec:	2200      	movs	r2, #0
   112ee:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
   112f2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   112f6:	1c40      	adds	r0, r0, #1
   112f8:	b2c0      	uxtb	r0, r0
   112fa:	2814      	cmp	r0, #20
   112fc:	d3f4      	bcc.n	112e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
   112fe:	bd10      	pop	{r4, pc}
   11300:	fffe0000 	.word	0xfffe0000
   11304:	4001f508 	.word	0x4001f508
   11308:	4001f000 	.word	0x4001f000
   1130c:	b570      	push	{r4, r5, r6, lr}
   1130e:	2420      	movs	r4, #32
   11310:	2100      	movs	r1, #0
   11312:	2301      	movs	r3, #1
   11314:	fa20 f201 	lsr.w	r2, r0, r1
   11318:	07d2      	lsls	r2, r2, #31
   1131a:	d020      	beq.n	1135e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
   1131c:	b24a      	sxtb	r2, r1
   1131e:	2a00      	cmp	r2, #0
   11320:	db10      	blt.n	11344 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
   11322:	bf00      	nop
   11324:	ea4f 1652 	mov.w	r6, r2, lsr #5
   11328:	ea4f 0686 	mov.w	r6, r6, lsl #2
   1132c:	f002 051f 	and.w	r5, r2, #31
   11330:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
   11334:	fa03 f505 	lsl.w	r5, r3, r5
   11338:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
   1133c:	f3bf 8f4f 	dsb	sy
   11340:	f3bf 8f6f 	isb	sy
   11344:	db0b      	blt.n	1135e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
   11346:	f002 051f 	and.w	r5, r2, #31
   1134a:	ea4f 1252 	mov.w	r2, r2, lsr #5
   1134e:	ea4f 0282 	mov.w	r2, r2, lsl #2
   11352:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   11356:	fa03 f505 	lsl.w	r5, r3, r5
   1135a:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
   1135e:	f101 0101 	add.w	r1, r1, #1
   11362:	42a1      	cmp	r1, r4
   11364:	d3d6      	bcc.n	11314 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
   11366:	bd70      	pop	{r4, r5, r6, pc}
   11368:	b570      	push	{r4, r5, r6, lr}
   1136a:	0042      	lsls	r2, r0, #1
   1136c:	f04f 0100 	mov.w	r1, #0
   11370:	d501      	bpl.n	11376 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
   11372:	4a14      	ldr	r2, [pc, #80]	; (113c4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
   11374:	6011      	str	r1, [r2, #0]
   11376:	f3c0 3280 	ubfx	r2, r0, #14, #1
   1137a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
   1137e:	429a      	cmp	r2, r3
   11380:	d003      	beq.n	1138a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
   11382:	2169      	movs	r1, #105	; 0x69
   11384:	201b      	movs	r0, #27
   11386:	f7ff fa9f 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1138a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
   1138e:	d014      	beq.n	113ba <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
   11390:	4a0d      	ldr	r2, [pc, #52]	; (113c8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
   11392:	2001      	movs	r0, #1
   11394:	6050      	str	r0, [r2, #4]
   11396:	1e83      	subs	r3, r0, #2
   11398:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   1139c:	4a0b      	ldr	r2, [pc, #44]	; (113cc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
   1139e:	6090      	str	r0, [r2, #8]
   113a0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   113a4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   113a8:	4c09      	ldr	r4, [pc, #36]	; (113d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
   113aa:	6021      	str	r1, [r4, #0]
   113ac:	1d25      	adds	r5, r4, #4
   113ae:	6028      	str	r0, [r5, #0]
   113b0:	6090      	str	r0, [r2, #8]
   113b2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   113b6:	6021      	str	r1, [r4, #0]
   113b8:	6028      	str	r0, [r5, #0]
   113ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   113be:	f7ff bf8d 	b.w	112dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
   113c2:	0000      	.short	0x0000
   113c4:	4001e504 	.word	0x4001e504
   113c8:	4000e000 	.word	0x4000e000
   113cc:	4000f000 	.word	0x4000f000
   113d0:	4000f500 	.word	0x4000f500

000113d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
   113d4:	b570      	push	{r4, r5, r6, lr}
   113d6:	4c0a      	ldr	r4, [pc, #40]	; (11400 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
   113d8:	460d      	mov	r5, r1
   113da:	6020      	str	r0, [r4, #0]
   113dc:	f7ff ffc4 	bl	11368 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
   113e0:	6820      	ldr	r0, [r4, #0]
   113e2:	f7ff ff93 	bl	1130c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
   113e6:	f000 f883 	bl	114f0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
   113ea:	f7ff ff77 	bl	112dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
   113ee:	f008 fc4d 	bl	19c8c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
   113f2:	4628      	mov	r0, r5
   113f4:	f000 f8b6 	bl	11564 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
   113f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   113fc:	f000 b8ce 	b.w	1159c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
   11400:	20000088 	.word	0x20000088

00011404 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
   11404:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11408:	4c36      	ldr	r4, [pc, #216]	; (114e4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
   1140a:	b082      	sub	sp, #8
   1140c:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
   11410:	2601      	movs	r6, #1
   11412:	4835      	ldr	r0, [pc, #212]	; (114e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
   11414:	f007 fa1e 	bl	18854 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   11418:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 114e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
   1141c:	b920      	cbnz	r0, 11428 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
   1141e:	2600      	movs	r6, #0
   11420:	f109 0001 	add.w	r0, r9, #1
   11424:	f007 fa2d 	bl	18882 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   11428:	f44f 7580 	mov.w	r5, #256	; 0x100
   1142c:	f04f 0800 	mov.w	r8, #0
   11430:	1d2f      	adds	r7, r5, #4
   11432:	2101      	movs	r1, #1
   11434:	6061      	str	r1, [r4, #4]
   11436:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1143a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   1143e:	9802      	ldr	r0, [sp, #8]
   11440:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
   11444:	6021      	str	r1, [r4, #0]
   11446:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 114ec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
   1144a:	e01c      	b.n	11486 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   1144c:	f8da 0000 	ldr.w	r0, [sl]
   11450:	06c0      	lsls	r0, r0, #27
   11452:	d518      	bpl.n	11486 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   11454:	200e      	movs	r0, #14
   11456:	f008 fc05 	bl	19c64 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   1145a:	f3ef 8010 	mrs	r0, PRIMASK
   1145e:	9000      	str	r0, [sp, #0]
   11460:	b672      	cpsid	i
   11462:	2103      	movs	r1, #3
   11464:	4620      	mov	r0, r4
   11466:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
   1146a:	4629      	mov	r1, r5
   1146c:	f008 fc07 	bl	19c7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   11470:	b930      	cbnz	r0, 11480 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
   11472:	4639      	mov	r1, r7
   11474:	4620      	mov	r0, r4
   11476:	f008 fc02 	bl	19c7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   1147a:	b908      	cbnz	r0, 11480 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
   1147c:	f7ff f89e 	bl	105bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   11480:	9800      	ldr	r0, [sp, #0]
   11482:	b900      	cbnz	r0, 11486 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
   11484:	b662      	cpsie	i
   11486:	4629      	mov	r1, r5
   11488:	4620      	mov	r0, r4
   1148a:	f008 fbf8 	bl	19c7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   1148e:	b928      	cbnz	r0, 1149c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
   11490:	4639      	mov	r1, r7
   11492:	4620      	mov	r0, r4
   11494:	f008 fbf3 	bl	19c7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   11498:	2800      	cmp	r0, #0
   1149a:	d0d7      	beq.n	1144c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
   1149c:	4639      	mov	r1, r7
   1149e:	4620      	mov	r0, r4
   114a0:	f008 fbed 	bl	19c7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   114a4:	2800      	cmp	r0, #0
   114a6:	d1c4      	bne.n	11432 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
   114a8:	b136      	cbz	r6, 114b8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
   114aa:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
   114ae:	f109 0001 	add.w	r0, r9, #1
   114b2:	f007 f9cf 	bl	18854 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   114b6:	e012      	b.n	114de <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
   114b8:	f109 0001 	add.w	r0, r9, #1
   114bc:	f007 f9ca 	bl	18854 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   114c0:	2800      	cmp	r0, #0
   114c2:	d1ad      	bne.n	11420 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
   114c4:	2003      	movs	r0, #3
   114c6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   114ca:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   114ce:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   114d2:	200e      	movs	r0, #14
   114d4:	f008 fbc6 	bl	19c64 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   114d8:	4803      	ldr	r0, [pc, #12]	; (114e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
   114da:	f007 f9d2 	bl	18882 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   114de:	2000      	movs	r0, #0
   114e0:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114e4:	4000e000 	.word	0x4000e000
   114e8:	20000297 	.word	0x20000297
   114ec:	e000ed10 	.word	0xe000ed10

000114f0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
   114f0:	b510      	push	{r4, lr}
   114f2:	4808      	ldr	r0, [pc, #32]	; (11514 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
   114f4:	f007 f9c1 	bl	1887a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   114f8:	b108      	cbz	r0, 114fe <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
   114fa:	2125      	movs	r1, #37	; 0x25
   114fc:	e006      	b.n	1150c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
   114fe:	4805      	ldr	r0, [pc, #20]	; (11514 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
   11500:	1c40      	adds	r0, r0, #1
   11502:	f007 f9ba 	bl	1887a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   11506:	2800      	cmp	r0, #0
   11508:	d003      	beq.n	11512 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
   1150a:	2129      	movs	r1, #41	; 0x29
   1150c:	201d      	movs	r0, #29
   1150e:	f7ff f9db 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11512:	bd10      	pop	{r4, pc}
   11514:	20000297 	.word	0x20000297

00011518 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
   11518:	b570      	push	{r4, r5, r6, lr}
   1151a:	4911      	ldr	r1, [pc, #68]	; (11560 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
   1151c:	680a      	ldr	r2, [r1, #0]
   1151e:	b1ea      	cbz	r2, 1155c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
   11520:	2300      	movs	r3, #0
   11522:	461d      	mov	r5, r3
   11524:	2401      	movs	r4, #1
   11526:	684a      	ldr	r2, [r1, #4]
   11528:	1c52      	adds	r2, r2, #1
   1152a:	604a      	str	r2, [r1, #4]
   1152c:	2a09      	cmp	r2, #9
   1152e:	d300      	bcc.n	11532 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
   11530:	604d      	str	r5, [r1, #4]
   11532:	790e      	ldrb	r6, [r1, #4]
   11534:	fa04 f206 	lsl.w	r2, r4, r6
   11538:	680e      	ldr	r6, [r1, #0]
   1153a:	4216      	tst	r6, r2
   1153c:	d00b      	beq.n	11556 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
   1153e:	f3ef 8310 	mrs	r3, PRIMASK
   11542:	b672      	cpsid	i
   11544:	680c      	ldr	r4, [r1, #0]
   11546:	4394      	bics	r4, r2
   11548:	600c      	str	r4, [r1, #0]
   1154a:	b903      	cbnz	r3, 1154e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
   1154c:	b662      	cpsie	i
   1154e:	6849      	ldr	r1, [r1, #4]
   11550:	6001      	str	r1, [r0, #0]
   11552:	2000      	movs	r0, #0
   11554:	bd70      	pop	{r4, r5, r6, pc}
   11556:	1c5b      	adds	r3, r3, #1
   11558:	2b09      	cmp	r3, #9
   1155a:	d3e4      	bcc.n	11526 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
   1155c:	2005      	movs	r0, #5
   1155e:	bd70      	pop	{r4, r5, r6, pc}
   11560:	2000008c 	.word	0x2000008c

00011564 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
   11564:	4802      	ldr	r0, [pc, #8]	; (11570 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
   11566:	2100      	movs	r1, #0
   11568:	6001      	str	r1, [r0, #0]
   1156a:	6041      	str	r1, [r0, #4]
   1156c:	4770      	bx	lr
   1156e:	0000      	.short	0x0000
   11570:	2000008c 	.word	0x2000008c

00011574 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
   11574:	b510      	push	{r4, lr}
   11576:	4c08      	ldr	r4, [pc, #32]	; (11598 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
   11578:	7861      	ldrb	r1, [r4, #1]
   1157a:	b109      	cbz	r1, 11580 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
   1157c:	200f      	movs	r0, #15
   1157e:	bd10      	pop	{r4, pc}
   11580:	f7fe ffa8 	bl	104d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   11584:	7020      	strb	r0, [r4, #0]
   11586:	28ff      	cmp	r0, #255	; 0xff
   11588:	d001      	beq.n	1158e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
   1158a:	2000      	movs	r0, #0
   1158c:	bd10      	pop	{r4, pc}
   1158e:	2176      	movs	r1, #118	; 0x76
   11590:	201f      	movs	r0, #31
   11592:	f7ff f999 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11596:	0000      	.short	0x0000
   11598:	20000094 	.word	0x20000094

0001159c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
   1159c:	4901      	ldr	r1, [pc, #4]	; (115a4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
   1159e:	2000      	movs	r0, #0
   115a0:	7048      	strb	r0, [r1, #1]
   115a2:	4770      	bx	lr
   115a4:	20000094 	.word	0x20000094

000115a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
   115a8:	4806      	ldr	r0, [pc, #24]	; (115c4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
   115aa:	4a07      	ldr	r2, [pc, #28]	; (115c8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
   115ac:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   115ae:	8852      	ldrh	r2, [r2, #2]
   115b0:	4291      	cmp	r1, r2
   115b2:	d104      	bne.n	115be <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
   115b4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   115b8:	b108      	cbz	r0, 115be <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
   115ba:	2000      	movs	r0, #0
   115bc:	4770      	bx	lr
   115be:	2001      	movs	r0, #1
   115c0:	4770      	bx	lr
   115c2:	0000      	.short	0x0000
   115c4:	200015f8 	.word	0x200015f8
   115c8:	2000027c 	.word	0x2000027c

000115cc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
   115cc:	4901      	ldr	r1, [pc, #4]	; (115d4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
   115ce:	8048      	strh	r0, [r1, #2]
   115d0:	4770      	bx	lr
   115d2:	0000      	.short	0x0000
   115d4:	2000027c 	.word	0x2000027c

000115d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
   115d8:	4808      	ldr	r0, [pc, #32]	; (115fc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
   115da:	4a09      	ldr	r2, [pc, #36]	; (11600 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
   115dc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   115de:	8852      	ldrh	r2, [r2, #2]
   115e0:	4291      	cmp	r1, r2
   115e2:	d109      	bne.n	115f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   115e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   115e8:	8481      	strh	r1, [r0, #36]	; 0x24
   115ea:	f810 1f22 	ldrb.w	r1, [r0, #34]!
   115ee:	b119      	cbz	r1, 115f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   115f0:	2100      	movs	r1, #0
   115f2:	7001      	strb	r1, [r0, #0]
   115f4:	2001      	movs	r0, #1
   115f6:	4770      	bx	lr
   115f8:	2000      	movs	r0, #0
   115fa:	4770      	bx	lr
   115fc:	200015f8 	.word	0x200015f8
   11600:	2000027c 	.word	0x2000027c

00011604 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
   11604:	4807      	ldr	r0, [pc, #28]	; (11624 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   11606:	f810 1f22 	ldrb.w	r1, [r0, #34]!
   1160a:	2901      	cmp	r1, #1
   1160c:	d007      	beq.n	1161e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
   1160e:	2101      	movs	r1, #1
   11610:	7001      	strb	r1, [r0, #0]
   11612:	4805      	ldr	r0, [pc, #20]	; (11628 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
   11614:	4903      	ldr	r1, [pc, #12]	; (11624 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   11616:	8800      	ldrh	r0, [r0, #0]
   11618:	8488      	strh	r0, [r1, #36]	; 0x24
   1161a:	2001      	movs	r0, #1
   1161c:	4770      	bx	lr
   1161e:	2000      	movs	r0, #0
   11620:	4770      	bx	lr
   11622:	0000      	.short	0x0000
   11624:	200015f8 	.word	0x200015f8
   11628:	2000027c 	.word	0x2000027c

0001162c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
   1162c:	4906      	ldr	r1, [pc, #24]	; (11648 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
   1162e:	4b07      	ldr	r3, [pc, #28]	; (1164c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
   11630:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   11632:	885b      	ldrh	r3, [r3, #2]
   11634:	429a      	cmp	r2, r3
   11636:	d105      	bne.n	11644 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
   11638:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   1163c:	b112      	cbz	r2, 11644 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
   1163e:	6001      	str	r1, [r0, #0]
   11640:	2001      	movs	r0, #1
   11642:	4770      	bx	lr
   11644:	2000      	movs	r0, #0
   11646:	4770      	bx	lr
   11648:	200015f8 	.word	0x200015f8
   1164c:	2000027c 	.word	0x2000027c

00011650 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
   11650:	4909      	ldr	r1, [pc, #36]	; (11678 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   11652:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   11654:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
   11658:	3bff      	subs	r3, #255	; 0xff
   1165a:	d002      	beq.n	11662 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
   1165c:	2100      	movs	r1, #0
   1165e:	6001      	str	r1, [r0, #0]
   11660:	e007      	b.n	11672 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
   11662:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   11666:	4904      	ldr	r1, [pc, #16]	; (11678 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   11668:	2a01      	cmp	r2, #1
   1166a:	d002      	beq.n	11672 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
   1166c:	6001      	str	r1, [r0, #0]
   1166e:	2001      	movs	r0, #1
   11670:	4770      	bx	lr
   11672:	2000      	movs	r0, #0
   11674:	4770      	bx	lr
   11676:	0000      	.short	0x0000
   11678:	200015f8 	.word	0x200015f8

0001167c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
   1167c:	4901      	ldr	r1, [pc, #4]	; (11684 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
   1167e:	8008      	strh	r0, [r1, #0]
   11680:	4770      	bx	lr
   11682:	0000      	.short	0x0000
   11684:	2000027c 	.word	0x2000027c

00011688 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
   11688:	4905      	ldr	r1, [pc, #20]	; (116a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
   1168a:	2000      	movs	r0, #0
   1168c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
   11690:	f64f 70ff 	movw	r0, #65535	; 0xffff
   11694:	8488      	strh	r0, [r1, #36]	; 0x24
   11696:	4903      	ldr	r1, [pc, #12]	; (116a4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
   11698:	8008      	strh	r0, [r1, #0]
   1169a:	8048      	strh	r0, [r1, #2]
   1169c:	4770      	bx	lr
   1169e:	0000      	.short	0x0000
   116a0:	200015f8 	.word	0x200015f8
   116a4:	2000027c 	.word	0x2000027c
   116a8:	4905      	ldr	r1, [pc, #20]	; (116c0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
   116aa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   116ac:	4282      	cmp	r2, r0
   116ae:	d105      	bne.n	116bc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
   116b0:	2000      	movs	r0, #0
   116b2:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
   116b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   116ba:	8488      	strh	r0, [r1, #36]	; 0x24
   116bc:	4770      	bx	lr
   116be:	0000      	.short	0x0000
   116c0:	200015f8 	.word	0x200015f8

000116c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
   116c4:	4a0a      	ldr	r2, [pc, #40]	; (116f0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
   116c6:	b110      	cbz	r0, 116ce <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
   116c8:	2801      	cmp	r0, #1
   116ca:	d007      	beq.n	116dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
   116cc:	e00e      	b.n	116ec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   116ce:	7850      	ldrb	r0, [r2, #1]
   116d0:	b160      	cbz	r0, 116ec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   116d2:	f8d2 0002 	ldr.w	r0, [r2, #2]
   116d6:	6008      	str	r0, [r1, #0]
   116d8:	88d0      	ldrh	r0, [r2, #6]
   116da:	e004      	b.n	116e6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
   116dc:	7810      	ldrb	r0, [r2, #0]
   116de:	b128      	cbz	r0, 116ec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   116e0:	6890      	ldr	r0, [r2, #8]
   116e2:	6008      	str	r0, [r1, #0]
   116e4:	8990      	ldrh	r0, [r2, #12]
   116e6:	8088      	strh	r0, [r1, #4]
   116e8:	2001      	movs	r0, #1
   116ea:	4770      	bx	lr
   116ec:	2000      	movs	r0, #0
   116ee:	4770      	bx	lr
   116f0:	20000299 	.word	0x20000299

000116f4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
   116f4:	4a08      	ldr	r2, [pc, #32]	; (11718 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
   116f6:	2301      	movs	r3, #1
   116f8:	b138      	cbz	r0, 1170a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
   116fa:	2801      	cmp	r0, #1
   116fc:	d104      	bne.n	11708 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
   116fe:	7013      	strb	r3, [r2, #0]
   11700:	6808      	ldr	r0, [r1, #0]
   11702:	6090      	str	r0, [r2, #8]
   11704:	8888      	ldrh	r0, [r1, #4]
   11706:	8190      	strh	r0, [r2, #12]
   11708:	4770      	bx	lr
   1170a:	7053      	strb	r3, [r2, #1]
   1170c:	6808      	ldr	r0, [r1, #0]
   1170e:	f8c2 0002 	str.w	r0, [r2, #2]
   11712:	8888      	ldrh	r0, [r1, #4]
   11714:	80d0      	strh	r0, [r2, #6]
   11716:	4770      	bx	lr
   11718:	20000299 	.word	0x20000299

0001171c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
   1171c:	4906      	ldr	r1, [pc, #24]	; (11738 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
   1171e:	b110      	cbz	r0, 11726 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
   11720:	2801      	cmp	r0, #1
   11722:	d002      	beq.n	1172a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
   11724:	e005      	b.n	11732 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
   11726:	7848      	ldrb	r0, [r1, #1]
   11728:	e000      	b.n	1172c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
   1172a:	7808      	ldrb	r0, [r1, #0]
   1172c:	b108      	cbz	r0, 11732 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
   1172e:	2001      	movs	r0, #1
   11730:	4770      	bx	lr
   11732:	2000      	movs	r0, #0
   11734:	4770      	bx	lr
   11736:	0000      	.short	0x0000
   11738:	20000299 	.word	0x20000299

0001173c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
   1173c:	4901      	ldr	r1, [pc, #4]	; (11744 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
   1173e:	7448      	strb	r0, [r1, #17]
   11740:	4770      	bx	lr
   11742:	0000      	.short	0x0000
   11744:	20000f52 	.word	0x20000f52

00011748 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
   11748:	4801      	ldr	r0, [pc, #4]	; (11750 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
   1174a:	78c0      	ldrb	r0, [r0, #3]
   1174c:	4770      	bx	lr
   1174e:	0000      	.short	0x0000
   11750:	200000b0 	.word	0x200000b0

00011754 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
   11754:	4801      	ldr	r0, [pc, #4]	; (1175c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
   11756:	7900      	ldrb	r0, [r0, #4]
   11758:	4770      	bx	lr
   1175a:	0000      	.short	0x0000
   1175c:	200000b0 	.word	0x200000b0

00011760 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
   11760:	b578      	push	{r3, r4, r5, r6, lr}
   11762:	4913      	ldr	r1, [pc, #76]	; (117b0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
   11764:	7c4a      	ldrb	r2, [r1, #17]
   11766:	b30a      	cbz	r2, 117ac <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
   11768:	7c0a      	ldrb	r2, [r1, #16]
   1176a:	f88d 2000 	strb.w	r2, [sp]
   1176e:	9a00      	ldr	r2, [sp, #0]
   11770:	9200      	str	r2, [sp, #0]
   11772:	f89d 2000 	ldrb.w	r2, [sp]
   11776:	b1ca      	cbz	r2, 117ac <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
   11778:	2300      	movs	r3, #0
   1177a:	f101 0210 	add.w	r2, r1, #16
   1177e:	241a      	movs	r4, #26
   11780:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
   11784:	7c0e      	ldrb	r6, [r1, #16]
   11786:	f88d 6000 	strb.w	r6, [sp]
   1178a:	9e00      	ldr	r6, [sp, #0]
   1178c:	9600      	str	r6, [sp, #0]
   1178e:	f89d 6000 	ldrb.w	r6, [sp]
   11792:	b14e      	cbz	r6, 117a8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
   11794:	7013      	strb	r3, [r2, #0]
   11796:	7043      	strb	r3, [r0, #1]
   11798:	7004      	strb	r4, [r0, #0]
   1179a:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
   1179e:	6046      	str	r6, [r0, #4]
   117a0:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
   117a4:	6086      	str	r6, [r0, #8]
   117a6:	e7ed      	b.n	11784 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
   117a8:	2001      	movs	r0, #1
   117aa:	bd78      	pop	{r3, r4, r5, r6, pc}
   117ac:	2000      	movs	r0, #0
   117ae:	bd78      	pop	{r3, r4, r5, r6, pc}
   117b0:	20000f52 	.word	0x20000f52

000117b4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
   117b4:	b510      	push	{r4, lr}
   117b6:	4604      	mov	r4, r0
   117b8:	f000 f956 	bl	11a68 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   117bc:	b118      	cbz	r0, 117c6 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
   117be:	21bd      	movs	r1, #189	; 0xbd
   117c0:	2027      	movs	r0, #39	; 0x27
   117c2:	f7ff f881 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   117c6:	4803      	ldr	r0, [pc, #12]	; (117d4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
   117c8:	2101      	movs	r1, #1
   117ca:	f008 fe27 	bl	1a41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   117ce:	4802      	ldr	r0, [pc, #8]	; (117d8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
   117d0:	62c4      	str	r4, [r0, #44]	; 0x2c
   117d2:	bd10      	pop	{r4, pc}
   117d4:	20000f30 	.word	0x20000f30
   117d8:	200000b0 	.word	0x200000b0

000117dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
   117dc:	4901      	ldr	r1, [pc, #4]	; (117e4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
   117de:	2001      	movs	r0, #1
   117e0:	7188      	strb	r0, [r1, #6]
   117e2:	4770      	bx	lr
   117e4:	200000b0 	.word	0x200000b0

000117e8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
   117e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   117ec:	4d5f      	ldr	r5, [pc, #380]	; (1196c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
   117ee:	9c08      	ldr	r4, [sp, #32]
   117f0:	782e      	ldrb	r6, [r5, #0]
   117f2:	2e00      	cmp	r6, #0
   117f4:	d16b      	bne.n	118ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   117f6:	2a00      	cmp	r2, #0
   117f8:	d069      	beq.n	118ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   117fa:	2b00      	cmp	r3, #0
   117fc:	d067      	beq.n	118ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   117fe:	2c00      	cmp	r4, #0
   11800:	d065      	beq.n	118ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   11802:	f105 0614 	add.w	r6, r5, #20
   11806:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
   1180a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
   1180e:	2700      	movs	r7, #0
   11810:	71af      	strb	r7, [r5, #6]
   11812:	716f      	strb	r7, [r5, #5]
   11814:	70ef      	strb	r7, [r5, #3]
   11816:	70af      	strb	r7, [r5, #2]
   11818:	712f      	strb	r7, [r5, #4]
   1181a:	81af      	strh	r7, [r5, #12]
   1181c:	81ef      	strh	r7, [r5, #14]
   1181e:	f000 f95b 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11822:	4606      	mov	r6, r0
   11824:	f000 f952 	bl	11acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11828:	4604      	mov	r4, r0
   1182a:	f006 f825 	bl	17878 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   1182e:	f005 fcb9 	bl	171a4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   11832:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
   11836:	f006 f8a5 	bl	17984 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   1183a:	f104 0018 	add.w	r0, r4, #24
   1183e:	f006 f97f 	bl	17b40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   11842:	6920      	ldr	r0, [r4, #16]
   11844:	f006 f972 	bl	17b2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   11848:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
   1184c:	f006 f996 	bl	17b7c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   11850:	f105 0038 	add.w	r0, r5, #56	; 0x38
   11854:	6840      	ldr	r0, [r0, #4]
   11856:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
   1185a:	b108      	cbz	r0, 11860 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
   1185c:	f005 ff56 	bl	1770c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
   11860:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   11864:	2001      	movs	r0, #1
   11866:	f005 fe81 	bl	1756c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   1186a:	2800      	cmp	r0, #0
   1186c:	d076      	beq.n	1195c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
   1186e:	4840      	ldr	r0, [pc, #256]	; (11970 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
   11870:	f005 fef8 	bl	17664 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   11874:	8820      	ldrh	r0, [r4, #0]
   11876:	f7ff fc57 	bl	11128 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   1187a:	6328      	str	r0, [r5, #48]	; 0x30
   1187c:	8820      	ldrh	r0, [r4, #0]
   1187e:	f7ff fc3d 	bl	110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   11882:	f106 0160 	add.w	r1, r6, #96	; 0x60
   11886:	6368      	str	r0, [r5, #52]	; 0x34
   11888:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 11974 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
   1188c:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
   11890:	f109 0808 	add.w	r8, r9, #8
   11894:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
   11898:	6f31      	ldr	r1, [r6, #112]	; 0x70
   1189a:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
   1189e:	6f71      	ldr	r1, [r6, #116]	; 0x74
   118a0:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
   118a4:	f000 f98a 	bl	11bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
   118a8:	4601      	mov	r1, r0
   118aa:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   118ac:	46ba      	mov	sl, r7
   118ae:	f008 fb4d 	bl	19f4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   118b2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   118b4:	4281      	cmp	r1, r0
   118b6:	d200      	bcs.n	118ba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
   118b8:	4608      	mov	r0, r1
   118ba:	7228      	strb	r0, [r5, #8]
   118bc:	46a8      	mov	r8, r5
   118be:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   118c2:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
   118c4:	7cf7      	ldrb	r7, [r6, #19]
   118c6:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
   118c8:	2908      	cmp	r1, #8
   118ca:	d104      	bne.n	118d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
   118cc:	e002      	b.n	118d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
   118ce:	f44f 718a 	mov.w	r1, #276	; 0x114
   118d2:	e047      	b.n	11964 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
   118d4:	2104      	movs	r1, #4
   118d6:	f008 fb39 	bl	19f4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   118da:	b90f      	cbnz	r7, 118e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
   118dc:	1d00      	adds	r0, r0, #4
   118de:	b280      	uxth	r0, r0
   118e0:	4285      	cmp	r5, r0
   118e2:	d200      	bcs.n	118e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
   118e4:	4628      	mov	r0, r5
   118e6:	b2c5      	uxtb	r5, r0
   118e8:	f888 5009 	strb.w	r5, [r8, #9]
   118ec:	7cf1      	ldrb	r1, [r6, #19]
   118ee:	2900      	cmp	r1, #0
   118f0:	d002      	beq.n	118f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
   118f2:	bf00      	nop
   118f4:	f04f 0104 	mov.w	r1, #4
   118f8:	4429      	add	r1, r5
   118fa:	f888 1007 	strb.w	r1, [r8, #7]
   118fe:	4657      	mov	r7, sl
   11900:	d016      	beq.n	11930 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
   11902:	481c      	ldr	r0, [pc, #112]	; (11974 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
   11904:	f04f 0101 	mov.w	r1, #1
   11908:	f100 0008 	add.w	r0, r0, #8
   1190c:	7601      	strb	r1, [r0, #24]
   1190e:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
   11912:	e9c0 1204 	strd	r1, r2, [r0, #16]
   11916:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   1191a:	f008 fa1d 	bl	19d58 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
   1191e:	4915      	ldr	r1, [pc, #84]	; (11974 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
   11920:	4603      	mov	r3, r0
   11922:	462a      	mov	r2, r5
   11924:	3108      	adds	r1, #8
   11926:	2001      	movs	r0, #1
   11928:	f005 fc86 	bl	17238 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   1192c:	f005 fcba 	bl	172a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11930:	2001      	movs	r0, #1
   11932:	f000 fb73 	bl	1201c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
   11936:	4810      	ldr	r0, [pc, #64]	; (11978 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
   11938:	6800      	ldr	r0, [r0, #0]
   1193a:	2803      	cmp	r0, #3
   1193c:	d010      	beq.n	11960 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
   1193e:	280b      	cmp	r0, #11
   11940:	d00e      	beq.n	11960 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
   11942:	4648      	mov	r0, r9
   11944:	f840 7f52 	str.w	r7, [r0, #82]!
   11948:	6047      	str	r7, [r0, #4]
   1194a:	480a      	ldr	r0, [pc, #40]	; (11974 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
   1194c:	88b1      	ldrh	r1, [r6, #4]
   1194e:	3052      	adds	r0, #82	; 0x52
   11950:	8041      	strh	r1, [r0, #2]
   11952:	8821      	ldrh	r1, [r4, #0]
   11954:	8001      	strh	r1, [r0, #0]
   11956:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
   1195a:	7101      	strb	r1, [r0, #4]
   1195c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11960:	f240 11c1 	movw	r1, #449	; 0x1c1
   11964:	2027      	movs	r0, #39	; 0x27
   11966:	f7fe ffaf 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1196a:	0000      	.short	0x0000
   1196c:	200000b0 	.word	0x200000b0
   11970:	00012220 	.word	0x00012220
   11974:	20000f00 	.word	0x20000f00
   11978:	40001550 	.word	0x40001550

0001197c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
   1197c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11980:	4605      	mov	r5, r0
   11982:	f000 f8a9 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11986:	4e33      	ldr	r6, [pc, #204]	; (11a54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
   11988:	4604      	mov	r4, r0
   1198a:	6a70      	ldr	r0, [r6, #36]	; 0x24
   1198c:	7847      	ldrb	r7, [r0, #1]
   1198e:	b10d      	cbz	r5, 11994 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
   11990:	2d01      	cmp	r5, #1
   11992:	d103      	bne.n	1199c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
   11994:	6b71      	ldr	r1, [r6, #52]	; 0x34
   11996:	f007 f95f 	bl	18c58 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
   1199a:	7070      	strb	r0, [r6, #1]
   1199c:	7870      	ldrb	r0, [r6, #1]
   1199e:	f04f 0800 	mov.w	r8, #0
   119a2:	f04f 0901 	mov.w	r9, #1
   119a6:	b150      	cbz	r0, 119be <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
   119a8:	2801      	cmp	r0, #1
   119aa:	d01a      	beq.n	119e2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
   119ac:	2802      	cmp	r0, #2
   119ae:	d034      	beq.n	11a1a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
   119b0:	2803      	cmp	r0, #3
   119b2:	d048      	beq.n	11a46 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
   119b4:	f240 4115 	movw	r1, #1045	; 0x415
   119b8:	2027      	movs	r0, #39	; 0x27
   119ba:	f7fe ff85 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   119be:	2d01      	cmp	r5, #1
   119c0:	d032      	beq.n	11a28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
   119c2:	f000 f8e7 	bl	11b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
   119c6:	4639      	mov	r1, r7
   119c8:	2201      	movs	r2, #1
   119ca:	6b70      	ldr	r0, [r6, #52]	; 0x34
   119cc:	f007 fd6b 	bl	194a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   119d0:	e028      	b.n	11a24 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
   119d2:	bf00      	nop
   119d4:	f884 8008 	strb.w	r8, [r4, #8]
   119d8:	e031      	b.n	11a3e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   119da:	bf00      	nop
   119dc:	f884 9008 	strb.w	r9, [r4, #8]
   119e0:	e02d      	b.n	11a3e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   119e2:	2d01      	cmp	r5, #1
   119e4:	d008      	beq.n	119f8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
   119e6:	f000 f8d5 	bl	11b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
   119ea:	4639      	mov	r1, r7
   119ec:	2200      	movs	r2, #0
   119ee:	6b70      	ldr	r0, [r6, #52]	; 0x34
   119f0:	f007 fd59 	bl	194a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   119f4:	2d02      	cmp	r5, #2
   119f6:	d00b      	beq.n	11a10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   119f8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   119fc:	1c40      	adds	r0, r0, #1
   119fe:	f141 0100 	adc.w	r1, r1, #0
   11a02:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
   11a06:	7a20      	ldrb	r0, [r4, #8]
   11a08:	2801      	cmp	r0, #1
   11a0a:	d003      	beq.n	11a14 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
   11a0c:	f884 9008 	strb.w	r9, [r4, #8]
   11a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11a14:	f884 8008 	strb.w	r8, [r4, #8]
   11a18:	e7fa      	b.n	11a10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   11a1a:	2d01      	cmp	r5, #1
   11a1c:	d004      	beq.n	11a28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
   11a1e:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11a20:	f007 ff52 	bl	198c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
   11a24:	2d02      	cmp	r5, #2
   11a26:	d0f3      	beq.n	11a10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   11a28:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   11a2c:	1c40      	adds	r0, r0, #1
   11a2e:	f141 0100 	adc.w	r1, r1, #0
   11a32:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
   11a36:	7a20      	ldrb	r0, [r4, #8]
   11a38:	2801      	cmp	r0, #1
   11a3a:	d1cf      	bne.n	119dc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
   11a3c:	e7ca      	b.n	119d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
   11a3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11a42:	f001 b8cd 	b.w	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11a46:	2d01      	cmp	r5, #1
   11a48:	d0e2      	beq.n	11a10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   11a4a:	6b70      	ldr	r0, [r6, #52]	; 0x34
   11a4c:	f007 ff3c 	bl	198c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
   11a50:	e7f5      	b.n	11a3e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
   11a52:	0000      	.short	0x0000
   11a54:	200000b0 	.word	0x200000b0

00011a58 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
   11a58:	4802      	ldr	r0, [pc, #8]	; (11a64 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
   11a5a:	89c0      	ldrh	r0, [r0, #14]
   11a5c:	f3c0 2080 	ubfx	r0, r0, #10, #1
   11a60:	4770      	bx	lr
   11a62:	0000      	.short	0x0000
   11a64:	200000b0 	.word	0x200000b0

00011a68 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
   11a68:	4804      	ldr	r0, [pc, #16]	; (11a7c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
   11a6a:	7800      	ldrb	r0, [r0, #0]
   11a6c:	b108      	cbz	r0, 11a72 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
   11a6e:	200c      	movs	r0, #12
   11a70:	4770      	bx	lr
   11a72:	4903      	ldr	r1, [pc, #12]	; (11a80 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
   11a74:	2000      	movs	r0, #0
   11a76:	7448      	strb	r0, [r1, #17]
   11a78:	4770      	bx	lr
   11a7a:	0000      	.short	0x0000
   11a7c:	200000b0 	.word	0x200000b0
   11a80:	20000f52 	.word	0x20000f52

00011a84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
   11a84:	480c      	ldr	r0, [pc, #48]	; (11ab8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
   11a86:	b510      	push	{r4, lr}
   11a88:	7801      	ldrb	r1, [r0, #0]
   11a8a:	b149      	cbz	r1, 11aa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
   11a8c:	f100 0138 	add.w	r1, r0, #56	; 0x38
   11a90:	7800      	ldrb	r0, [r0, #0]
   11a92:	2802      	cmp	r0, #2
   11a94:	d008      	beq.n	11aa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
   11a96:	f240 11dd 	movw	r1, #477	; 0x1dd
   11a9a:	2027      	movs	r0, #39	; 0x27
   11a9c:	f7fe ff14 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11aa4:	f000 b9d8 	b.w	11e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   11aa8:	6848      	ldr	r0, [r1, #4]
   11aaa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   11aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ab2:	f005 bddf 	b.w	17674 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
   11ab6:	0000      	.short	0x0000
   11ab8:	200000b0 	.word	0x200000b0
   11abc:	4a02      	ldr	r2, [pc, #8]	; (11ac8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
   11abe:	8993      	ldrh	r3, [r2, #12]
   11ac0:	4303      	orrs	r3, r0
   11ac2:	8193      	strh	r3, [r2, #12]
   11ac4:	6952      	ldr	r2, [r2, #20]
   11ac6:	4710      	bx	r2
   11ac8:	200000b0 	.word	0x200000b0
   11acc:	4801      	ldr	r0, [pc, #4]	; (11ad4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
   11ace:	6840      	ldr	r0, [r0, #4]
   11ad0:	4770      	bx	lr
   11ad2:	0000      	.short	0x0000
   11ad4:	200000e8 	.word	0x200000e8
   11ad8:	4801      	ldr	r0, [pc, #4]	; (11ae0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
   11ada:	6840      	ldr	r0, [r0, #4]
   11adc:	3070      	adds	r0, #112	; 0x70
   11ade:	4770      	bx	lr
   11ae0:	200000e8 	.word	0x200000e8
   11ae4:	4a01      	ldr	r2, [pc, #4]	; (11aec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
   11ae6:	2100      	movs	r1, #0
   11ae8:	6952      	ldr	r2, [r2, #20]
   11aea:	4710      	bx	r2
   11aec:	200000b0 	.word	0x200000b0
   11af0:	b570      	push	{r4, r5, r6, lr}
   11af2:	f7ff fff1 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11af6:	4604      	mov	r4, r0
   11af8:	f7ff ffe8 	bl	11acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11afc:	4605      	mov	r5, r0
   11afe:	4621      	mov	r1, r4
   11b00:	f008 faa7 	bl	1a052 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
   11b04:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   11b08:	2901      	cmp	r1, #1
   11b0a:	d114      	bne.n	11b36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
   11b0c:	2800      	cmp	r0, #0
   11b0e:	d012      	beq.n	11b36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
   11b10:	4809      	ldr	r0, [pc, #36]	; (11b38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
   11b12:	6842      	ldr	r2, [r0, #4]
   11b14:	8828      	ldrh	r0, [r5, #0]
   11b16:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
   11b1a:	7a60      	ldrb	r0, [r4, #9]
   11b1c:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
   11b20:	7aa0      	ldrb	r0, [r4, #10]
   11b22:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
   11b26:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
   11b2a:	2001      	movs	r0, #1
   11b2c:	7010      	strb	r0, [r2, #0]
   11b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11b32:	f001 b855 	b.w	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11b36:	bd70      	pop	{r4, r5, r6, pc}
   11b38:	200000e8 	.word	0x200000e8
   11b3c:	b570      	push	{r4, r5, r6, lr}
   11b3e:	4605      	mov	r5, r0
   11b40:	2901      	cmp	r1, #1
   11b42:	d818      	bhi.n	11b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
   11b44:	4c12      	ldr	r4, [pc, #72]	; (11b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
   11b46:	69a1      	ldr	r1, [r4, #24]
   11b48:	4788      	blx	r1
   11b4a:	b1a0      	cbz	r0, 11b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
   11b4c:	7960      	ldrb	r0, [r4, #5]
   11b4e:	b990      	cbnz	r0, 11b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
   11b50:	b9e5      	cbnz	r5, 11b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
   11b52:	f104 0010 	add.w	r0, r4, #16
   11b56:	7801      	ldrb	r1, [r0, #0]
   11b58:	06c8      	lsls	r0, r1, #27
   11b5a:	d405      	bmi.n	11b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
   11b5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11b5e:	7800      	ldrb	r0, [r0, #0]
   11b60:	06c0      	lsls	r0, r0, #27
   11b62:	d401      	bmi.n	11b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
   11b64:	2001      	movs	r0, #1
   11b66:	e000      	b.n	11b6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
   11b68:	2000      	movs	r0, #0
   11b6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   11b6c:	b92a      	cbnz	r2, 11b7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
   11b6e:	8962      	ldrh	r2, [r4, #10]
   11b70:	b11a      	cbz	r2, 11b7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
   11b72:	06c9      	lsls	r1, r1, #27
   11b74:	d401      	bmi.n	11b7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
   11b76:	2001      	movs	r0, #1
   11b78:	bd70      	pop	{r4, r5, r6, pc}
   11b7a:	89a1      	ldrh	r1, [r4, #12]
   11b7c:	078a      	lsls	r2, r1, #30
   11b7e:	d503      	bpl.n	11b88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
   11b80:	6a22      	ldr	r2, [r4, #32]
   11b82:	78d2      	ldrb	r2, [r2, #3]
   11b84:	2a02      	cmp	r2, #2
   11b86:	d001      	beq.n	11b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
   11b88:	4308      	orrs	r0, r1
   11b8a:	d1f4      	bne.n	11b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
   11b8c:	2000      	movs	r0, #0
   11b8e:	bd70      	pop	{r4, r5, r6, pc}
   11b90:	200000b0 	.word	0x200000b0
   11b94:	b510      	push	{r4, lr}
   11b96:	4c08      	ldr	r4, [pc, #32]	; (11bb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
   11b98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11b9a:	b138      	cbz	r0, 11bac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
   11b9c:	8962      	ldrh	r2, [r4, #10]
   11b9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11ba0:	1cd2      	adds	r2, r2, #3
   11ba2:	f006 ff00 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11ba6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11ba8:	6260      	str	r0, [r4, #36]	; 0x24
   11baa:	bd10      	pop	{r4, pc}
   11bac:	f240 415b 	movw	r1, #1115	; 0x45b
   11bb0:	2027      	movs	r0, #39	; 0x27
   11bb2:	f7fe fe89 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11bb6:	0000      	.short	0x0000
   11bb8:	200000b0 	.word	0x200000b0
   11bbc:	b510      	push	{r4, lr}
   11bbe:	f7ff ff85 	bl	11acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11bc2:	4604      	mov	r4, r0
   11bc4:	f7ff ff88 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11bc8:	4601      	mov	r1, r0
   11bca:	7b42      	ldrb	r2, [r0, #13]
   11bcc:	4815      	ldr	r0, [pc, #84]	; (11c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
   11bce:	2a24      	cmp	r2, #36	; 0x24
   11bd0:	d00e      	beq.n	11bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
   11bd2:	7b89      	ldrb	r1, [r1, #14]
   11bd4:	2924      	cmp	r1, #36	; 0x24
   11bd6:	d00b      	beq.n	11bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
   11bd8:	2a1f      	cmp	r2, #31
   11bda:	d00d      	beq.n	11bf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
   11bdc:	2a20      	cmp	r2, #32
   11bde:	d00b      	beq.n	11bf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
   11be0:	2922      	cmp	r1, #34	; 0x22
   11be2:	d00f      	beq.n	11c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
   11be4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   11be8:	2804      	cmp	r0, #4
   11bea:	d100      	bne.n	11bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
   11bec:	2008      	movs	r0, #8
   11bee:	bd10      	pop	{r4, pc}
   11bf0:	6840      	ldr	r0, [r0, #4]
   11bf2:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
   11bf6:	e00e      	b.n	11c16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
   11bf8:	2922      	cmp	r1, #34	; 0x22
   11bfa:	d003      	beq.n	11c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
   11bfc:	6840      	ldr	r0, [r0, #4]
   11bfe:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
   11c02:	e005      	b.n	11c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
   11c04:	6841      	ldr	r1, [r0, #4]
   11c06:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
   11c0a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
   11c0e:	4008      	ands	r0, r1
   11c10:	f008 f898 	bl	19d44 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
   11c14:	4601      	mov	r1, r0
   11c16:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   11c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11c1e:	f008 b8a9 	b.w	19d74 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
   11c22:	0000      	.short	0x0000
   11c24:	200000e8 	.word	0x200000e8
   11c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11c2c:	4688      	mov	r8, r1
   11c2e:	4607      	mov	r7, r0
   11c30:	f7ff ff52 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11c34:	4c57      	ldr	r4, [pc, #348]	; (11d94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
   11c36:	2600      	movs	r6, #0
   11c38:	4605      	mov	r5, r0
   11c3a:	f88d 6000 	strb.w	r6, [sp]
   11c3e:	7820      	ldrb	r0, [r4, #0]
   11c40:	2802      	cmp	r0, #2
   11c42:	d004      	beq.n	11c4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
   11c44:	f240 41ba 	movw	r1, #1210	; 0x4ba
   11c48:	2027      	movs	r0, #39	; 0x27
   11c4a:	f7fe fe3d 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11c4e:	7ba0      	ldrb	r0, [r4, #14]
   11c50:	0640      	lsls	r0, r0, #25
   11c52:	d406      	bmi.n	11c62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
   11c54:	2040      	movs	r0, #64	; 0x40
   11c56:	f7ff ff45 	bl	11ae4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11c5a:	89e0      	ldrh	r0, [r4, #14]
   11c5c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   11c60:	81e0      	strh	r0, [r4, #14]
   11c62:	7ce8      	ldrb	r0, [r5, #19]
   11c64:	b3c7      	cbz	r7, 11cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
   11c66:	f005 fb4d 	bl	17304 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
   11c6a:	f005 fb31 	bl	172d0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
   11c6e:	b968      	cbnz	r0, 11c8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
   11c70:	7ce8      	ldrb	r0, [r5, #19]
   11c72:	b158      	cbz	r0, 11c8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
   11c74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11c76:	7841      	ldrb	r1, [r0, #1]
   11c78:	b141      	cbz	r1, 11c8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
   11c7a:	7800      	ldrb	r0, [r0, #0]
   11c7c:	7a29      	ldrb	r1, [r5, #8]
   11c7e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11c82:	4288      	cmp	r0, r1
   11c84:	d102      	bne.n	11c8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
   11c86:	2001      	movs	r0, #1
   11c88:	70a0      	strb	r0, [r4, #2]
   11c8a:	e063      	b.n	11d54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
   11c8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11c8e:	7841      	ldrb	r1, [r0, #1]
   11c90:	8161      	strh	r1, [r4, #10]
   11c92:	b121      	cbz	r1, 11c9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
   11c94:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11c96:	f007 fde4 	bl	19862 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
   11c9a:	62a0      	str	r0, [r4, #40]	; 0x28
   11c9c:	e000      	b.n	11ca0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
   11c9e:	62a6      	str	r6, [r4, #40]	; 0x28
   11ca0:	89e0      	ldrh	r0, [r4, #14]
   11ca2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   11ca6:	81e0      	strh	r0, [r4, #14]
   11ca8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11caa:	79e9      	ldrb	r1, [r5, #7]
   11cac:	7800      	ldrb	r0, [r0, #0]
   11cae:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11cb2:	4288      	cmp	r0, r1
   11cb4:	d005      	beq.n	11cc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
   11cb6:	f000 f963 	bl	11f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
   11cba:	89e0      	ldrh	r0, [r4, #14]
   11cbc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   11cc0:	81e0      	strh	r0, [r4, #14]
   11cc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11cc4:	7a29      	ldrb	r1, [r5, #8]
   11cc6:	7800      	ldrb	r0, [r0, #0]
   11cc8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11ccc:	4288      	cmp	r0, r1
   11cce:	d10e      	bne.n	11cee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
   11cd0:	4668      	mov	r0, sp
   11cd2:	f000 f917 	bl	11f04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
   11cd6:	e00a      	b.n	11cee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
   11cd8:	e7ff      	b.n	11cda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
   11cda:	b108      	cbz	r0, 11ce0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
   11cdc:	f005 fb0c 	bl	172f8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
   11ce0:	78e0      	ldrb	r0, [r4, #3]
   11ce2:	1c40      	adds	r0, r0, #1
   11ce4:	70e0      	strb	r0, [r4, #3]
   11ce6:	89e0      	ldrh	r0, [r4, #14]
   11ce8:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   11cec:	81e0      	strh	r0, [r4, #14]
   11cee:	7ca8      	ldrb	r0, [r5, #18]
   11cf0:	b198      	cbz	r0, 11d1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
   11cf2:	f7ff feeb 	bl	11acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11cf6:	4928      	ldr	r1, [pc, #160]	; (11d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
   11cf8:	760e      	strb	r6, [r1, #24]
   11cfa:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
   11cfe:	e9c1 2304 	strd	r2, r3, [r1, #16]
   11d02:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11d06:	f008 f827 	bl	19d58 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
   11d0a:	4603      	mov	r3, r0
   11d0c:	22fb      	movs	r2, #251	; 0xfb
   11d0e:	4922      	ldr	r1, [pc, #136]	; (11d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
   11d10:	2000      	movs	r0, #0
   11d12:	f005 fa91 	bl	17238 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   11d16:	f005 fac5 	bl	172a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11d1a:	4d1f      	ldr	r5, [pc, #124]	; (11d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
   11d1c:	354a      	adds	r5, #74	; 0x4a
   11d1e:	f1b8 0f00 	cmp.w	r8, #0
   11d22:	d104      	bne.n	11d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
   11d24:	78e1      	ldrb	r1, [r4, #3]
   11d26:	2001      	movs	r0, #1
   11d28:	f7ff ff08 	bl	11b3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
   11d2c:	b1b0      	cbz	r0, 11d5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
   11d2e:	f005 fed9 	bl	17ae4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
   11d32:	f89d 0000 	ldrb.w	r0, [sp]
   11d36:	b110      	cbz	r0, 11d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
   11d38:	2000      	movs	r0, #0
   11d3a:	f7ff fe1f 	bl	1197c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11d3e:	b137      	cbz	r7, 11d4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
   11d40:	70e6      	strb	r6, [r4, #3]
   11d42:	7968      	ldrb	r0, [r5, #5]
   11d44:	1c40      	adds	r0, r0, #1
   11d46:	7168      	strb	r0, [r5, #5]
   11d48:	f7ff fed2 	bl	11af0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11d4c:	e002      	b.n	11d54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
   11d4e:	79a8      	ldrb	r0, [r5, #6]
   11d50:	1c40      	adds	r0, r0, #1
   11d52:	71a8      	strb	r0, [r5, #6]
   11d54:	f000 f880 	bl	11e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   11d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d5c:	f89d 0000 	ldrb.w	r0, [sp]
   11d60:	b110      	cbz	r0, 11d68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
   11d62:	2001      	movs	r0, #1
   11d64:	f7ff fe0a 	bl	1197c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11d68:	2000      	movs	r0, #0
   11d6a:	f000 f995 	bl	12098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
   11d6e:	f89d 0000 	ldrb.w	r0, [sp]
   11d72:	b110      	cbz	r0, 11d7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
   11d74:	2002      	movs	r0, #2
   11d76:	f7ff fe01 	bl	1197c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   11d7a:	b137      	cbz	r7, 11d8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
   11d7c:	70e6      	strb	r6, [r4, #3]
   11d7e:	7968      	ldrb	r0, [r5, #5]
   11d80:	1c40      	adds	r0, r0, #1
   11d82:	7168      	strb	r0, [r5, #5]
   11d84:	f7ff feb4 	bl	11af0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
   11d88:	e7e6      	b.n	11d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
   11d8a:	79a8      	ldrb	r0, [r5, #6]
   11d8c:	1c40      	adds	r0, r0, #1
   11d8e:	71a8      	strb	r0, [r5, #6]
   11d90:	e7e2      	b.n	11d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
   11d92:	0000      	.short	0x0000
   11d94:	200000b0 	.word	0x200000b0
   11d98:	20000f08 	.word	0x20000f08
   11d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11da0:	460f      	mov	r7, r1
   11da2:	4680      	mov	r8, r0
   11da4:	f7ff fe98 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11da8:	4d29      	ldr	r5, [pc, #164]	; (11e50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
   11daa:	4604      	mov	r4, r0
   11dac:	7828      	ldrb	r0, [r5, #0]
   11dae:	2801      	cmp	r0, #1
   11db0:	d004      	beq.n	11dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
   11db2:	f240 416a 	movw	r1, #1130	; 0x46a
   11db6:	2027      	movs	r0, #39	; 0x27
   11db8:	f7fe fd86 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11dbc:	7861      	ldrb	r1, [r4, #1]
   11dbe:	2000      	movs	r0, #0
   11dc0:	2601      	movs	r6, #1
   11dc2:	b129      	cbz	r1, 11dd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
   11dc4:	7060      	strb	r0, [r4, #1]
   11dc6:	2100      	movs	r1, #0
   11dc8:	2004      	movs	r0, #4
   11dca:	f7ff fe77 	bl	11abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   11dce:	70e6      	strb	r6, [r4, #3]
   11dd0:	6a29      	ldr	r1, [r5, #32]
   11dd2:	7808      	ldrb	r0, [r1, #0]
   11dd4:	43c0      	mvns	r0, r0
   11dd6:	0780      	lsls	r0, r0, #30
   11dd8:	d109      	bne.n	11dee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
   11dda:	79a0      	ldrb	r0, [r4, #6]
   11ddc:	bb88      	cbnz	r0, 11e42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
   11dde:	2002      	movs	r0, #2
   11de0:	f7ff fe6c 	bl	11abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   11de4:	6a28      	ldr	r0, [r5, #32]
   11de6:	7800      	ldrb	r0, [r0, #0]
   11de8:	43c0      	mvns	r0, r0
   11dea:	0780      	lsls	r0, r0, #30
   11dec:	d029      	beq.n	11e42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
   11dee:	6a28      	ldr	r0, [r5, #32]
   11df0:	7840      	ldrb	r0, [r0, #1]
   11df2:	b110      	cbz	r0, 11dfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
   11df4:	2002      	movs	r0, #2
   11df6:	71a0      	strb	r0, [r4, #6]
   11df8:	e000      	b.n	11dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
   11dfa:	71a6      	strb	r6, [r4, #6]
   11dfc:	7ce0      	ldrb	r0, [r4, #19]
   11dfe:	b1a0      	cbz	r0, 11e2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
   11e00:	f7ff fe64 	bl	11acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   11e04:	4913      	ldr	r1, [pc, #76]	; (11e54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
   11e06:	7a6d      	ldrb	r5, [r5, #9]
   11e08:	760e      	strb	r6, [r1, #24]
   11e0a:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   11e0e:	e9c1 2304 	strd	r2, r3, [r1, #16]
   11e12:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   11e16:	f007 ff9f 	bl	19d58 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
   11e1a:	4603      	mov	r3, r0
   11e1c:	462a      	mov	r2, r5
   11e1e:	490d      	ldr	r1, [pc, #52]	; (11e54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
   11e20:	2001      	movs	r0, #1
   11e22:	f005 fa09 	bl	17238 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
   11e26:	f005 fa3d 	bl	172a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
   11e2a:	ea37 0708 	bics.w	r7, r7, r8
   11e2e:	d004      	beq.n	11e3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
   11e30:	2100      	movs	r1, #0
   11e32:	4608      	mov	r0, r1
   11e34:	f7ff fe82 	bl	11b3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
   11e38:	b128      	cbz	r0, 11e46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
   11e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11e3e:	f000 b80b 	b.w	11e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   11e42:	2003      	movs	r0, #3
   11e44:	e7d7      	b.n	11df6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
   11e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11e4a:	2000      	movs	r0, #0
   11e4c:	f000 b8e6 	b.w	1201c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
   11e50:	200000b0 	.word	0x200000b0
   11e54:	20000f08 	.word	0x20000f08
   11e58:	b510      	push	{r4, lr}
   11e5a:	f005 faeb 	bl	17434 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   11e5e:	f005 f9a1 	bl	171a4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   11e62:	4c0d      	ldr	r4, [pc, #52]	; (11e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
   11e64:	89e0      	ldrh	r0, [r4, #14]
   11e66:	f7ff fe3d 	bl	11ae4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11e6a:	69e2      	ldr	r2, [r4, #28]
   11e6c:	7961      	ldrb	r1, [r4, #5]
   11e6e:	78a0      	ldrb	r0, [r4, #2]
   11e70:	4790      	blx	r2
   11e72:	480a      	ldr	r0, [pc, #40]	; (11e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
   11e74:	7c40      	ldrb	r0, [r0, #17]
   11e76:	b158      	cbz	r0, 11e90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
   11e78:	4808      	ldr	r0, [pc, #32]	; (11e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
   11e7a:	3852      	subs	r0, #82	; 0x52
   11e7c:	f850 1f52 	ldr.w	r1, [r0, #82]!
   11e80:	6081      	str	r1, [r0, #8]
   11e82:	6841      	ldr	r1, [r0, #4]
   11e84:	60c1      	str	r1, [r0, #12]
   11e86:	4805      	ldr	r0, [pc, #20]	; (11e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
   11e88:	2101      	movs	r1, #1
   11e8a:	7401      	strb	r1, [r0, #16]
   11e8c:	f000 fea8 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11e90:	2000      	movs	r0, #0
   11e92:	7020      	strb	r0, [r4, #0]
   11e94:	bd10      	pop	{r4, pc}
   11e96:	0000      	.short	0x0000
   11e98:	200000b0 	.word	0x200000b0
   11e9c:	20000f52 	.word	0x20000f52
   11ea0:	4808      	ldr	r0, [pc, #32]	; (11ec4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
   11ea2:	b510      	push	{r4, lr}
   11ea4:	7800      	ldrb	r0, [r0, #0]
   11ea6:	2802      	cmp	r0, #2
   11ea8:	d004      	beq.n	11eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
   11eaa:	f240 2111 	movw	r1, #529	; 0x211
   11eae:	2027      	movs	r0, #39	; 0x27
   11eb0:	f7fe fd0a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11eb4:	4904      	ldr	r1, [pc, #16]	; (11ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
   11eb6:	2001      	movs	r0, #1
   11eb8:	71c8      	strb	r0, [r1, #7]
   11eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ebe:	f7ff bfcb 	b.w	11e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   11ec2:	0000      	.short	0x0000
   11ec4:	200000b0 	.word	0x200000b0
   11ec8:	20000f52 	.word	0x20000f52
   11ecc:	b430      	push	{r4, r5}
   11ece:	4b0c      	ldr	r3, [pc, #48]	; (11f00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
   11ed0:	b942      	cbnz	r2, 11ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
   11ed2:	79da      	ldrb	r2, [r3, #7]
   11ed4:	2aff      	cmp	r2, #255	; 0xff
   11ed6:	d105      	bne.n	11ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
   11ed8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
   11edc:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
   11ee0:	42a2      	cmp	r2, r4
   11ee2:	d00b      	beq.n	11efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
   11ee4:	b131      	cbz	r1, 11ef4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
   11ee6:	79da      	ldrb	r2, [r3, #7]
   11ee8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
   11eec:	bc30      	pop	{r4, r5}
   11eee:	4610      	mov	r0, r2
   11ef0:	f005 be30 	b.w	17b54 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
   11ef4:	22ff      	movs	r2, #255	; 0xff
   11ef6:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
   11efa:	e7f7      	b.n	11eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
   11efc:	bc30      	pop	{r4, r5}
   11efe:	4770      	bx	lr
   11f00:	200000b0 	.word	0x200000b0
   11f04:	b570      	push	{r4, r5, r6, lr}
   11f06:	4606      	mov	r6, r0
   11f08:	f7ff fde6 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11f0c:	4a1b      	ldr	r2, [pc, #108]	; (11f7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
   11f0e:	4604      	mov	r4, r0
   11f10:	2501      	movs	r5, #1
   11f12:	6a51      	ldr	r1, [r2, #36]	; 0x24
   11f14:	7808      	ldrb	r0, [r1, #0]
   11f16:	f000 0003 	and.w	r0, r0, #3
   11f1a:	2801      	cmp	r0, #1
   11f1c:	d00c      	beq.n	11f38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
   11f1e:	2802      	cmp	r0, #2
   11f20:	d00a      	beq.n	11f38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
   11f22:	2803      	cmp	r0, #3
   11f24:	d121      	bne.n	11f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
   11f26:	7065      	strb	r5, [r4, #1]
   11f28:	89d0      	ldrh	r0, [r2, #14]
   11f2a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   11f2e:	81d0      	strh	r0, [r2, #14]
   11f30:	2001      	movs	r0, #1
   11f32:	f7ff fdc3 	bl	11abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   11f36:	e018      	b.n	11f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
   11f38:	7848      	ldrb	r0, [r1, #1]
   11f3a:	b1b0      	cbz	r0, 11f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
   11f3c:	89d1      	ldrh	r1, [r2, #14]
   11f3e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   11f42:	81d1      	strh	r1, [r2, #14]
   11f44:	6a91      	ldr	r1, [r2, #40]	; 0x28
   11f46:	2900      	cmp	r1, #0
   11f48:	d009      	beq.n	11f5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
   11f4a:	28fb      	cmp	r0, #251	; 0xfb
   11f4c:	d808      	bhi.n	11f60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
   11f4e:	7990      	ldrb	r0, [r2, #6]
   11f50:	b120      	cbz	r0, 11f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
   11f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11f56:	2020      	movs	r0, #32
   11f58:	f7ff bdc4 	b.w	11ae4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
   11f5c:	7035      	strb	r5, [r6, #0]
   11f5e:	bd70      	pop	{r4, r5, r6, pc}
   11f60:	7950      	ldrb	r0, [r2, #5]
   11f62:	f040 0010 	orr.w	r0, r0, #16
   11f66:	7150      	strb	r0, [r2, #5]
   11f68:	bd70      	pop	{r4, r5, r6, pc}
   11f6a:	7a20      	ldrb	r0, [r4, #8]
   11f6c:	2801      	cmp	r0, #1
   11f6e:	d001      	beq.n	11f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
   11f70:	7225      	strb	r5, [r4, #8]
   11f72:	bd70      	pop	{r4, r5, r6, pc}
   11f74:	2000      	movs	r0, #0
   11f76:	7220      	strb	r0, [r4, #8]
   11f78:	bd70      	pop	{r4, r5, r6, pc}
   11f7a:	0000      	.short	0x0000
   11f7c:	200000b0 	.word	0x200000b0
   11f80:	b570      	push	{r4, r5, r6, lr}
   11f82:	f7ff fda9 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   11f86:	4604      	mov	r4, r0
   11f88:	7980      	ldrb	r0, [r0, #6]
   11f8a:	2800      	cmp	r0, #0
   11f8c:	d02e      	beq.n	11fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
   11f8e:	2802      	cmp	r0, #2
   11f90:	d10d      	bne.n	11fae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
   11f92:	481c      	ldr	r0, [pc, #112]	; (12004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
   11f94:	6b00      	ldr	r0, [r0, #48]	; 0x30
   11f96:	f007 fa5f 	bl	19458 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
   11f9a:	b340      	cbz	r0, 11fee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
   11f9c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
   11fa0:	1c40      	adds	r0, r0, #1
   11fa2:	f141 0100 	adc.w	r1, r1, #0
   11fa6:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
   11faa:	f000 fe19 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   11fae:	2500      	movs	r5, #0
   11fb0:	71a5      	strb	r5, [r4, #6]
   11fb2:	78e0      	ldrb	r0, [r4, #3]
   11fb4:	b120      	cbz	r0, 11fc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
   11fb6:	70e5      	strb	r5, [r4, #3]
   11fb8:	2100      	movs	r1, #0
   11fba:	2010      	movs	r0, #16
   11fbc:	f7ff fd7e 	bl	11abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   11fc0:	78a0      	ldrb	r0, [r4, #2]
   11fc2:	b170      	cbz	r0, 11fe2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
   11fc4:	70a5      	strb	r5, [r4, #2]
   11fc6:	f7ff fb07 	bl	115d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   11fca:	b198      	cbz	r0, 11ff4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
   11fcc:	2100      	movs	r1, #0
   11fce:	2008      	movs	r0, #8
   11fd0:	f7ff fd74 	bl	11abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   11fd4:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
   11fd8:	1c40      	adds	r0, r0, #1
   11fda:	f141 0100 	adc.w	r1, r1, #0
   11fde:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
   11fe2:	79e0      	ldrb	r0, [r4, #7]
   11fe4:	2801      	cmp	r0, #1
   11fe6:	d00a      	beq.n	11ffe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
   11fe8:	2001      	movs	r0, #1
   11fea:	71e0      	strb	r0, [r4, #7]
   11fec:	bd70      	pop	{r4, r5, r6, pc}
   11fee:	f44f 716c 	mov.w	r1, #944	; 0x3b0
   11ff2:	e001      	b.n	11ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
   11ff4:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   11ff8:	2027      	movs	r0, #39	; 0x27
   11ffa:	f7fe fc65 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11ffe:	71e5      	strb	r5, [r4, #7]
   12000:	bd70      	pop	{r4, r5, r6, pc}
   12002:	0000      	.short	0x0000
   12004:	200000b0 	.word	0x200000b0
   12008:	4803      	ldr	r0, [pc, #12]	; (12018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
   1200a:	7800      	ldrb	r0, [r0, #0]
   1200c:	2800      	cmp	r0, #0
   1200e:	d001      	beq.n	12014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
   12010:	f7ff bf22 	b.w	11e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   12014:	4770      	bx	lr
   12016:	0000      	.short	0x0000
   12018:	200000b0 	.word	0x200000b0
   1201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12020:	4606      	mov	r6, r0
   12022:	f7ff fd53 	bl	11acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   12026:	4680      	mov	r8, r0
   12028:	f7ff fd56 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   1202c:	4c17      	ldr	r4, [pc, #92]	; (1208c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
   1202e:	4605      	mov	r5, r0
   12030:	4632      	mov	r2, r6
   12032:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12034:	6260      	str	r0, [r4, #36]	; 0x24
   12036:	2101      	movs	r1, #1
   12038:	4640      	mov	r0, r8
   1203a:	f7ff ff47 	bl	11ecc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
   1203e:	7ce8      	ldrb	r0, [r5, #19]
   12040:	2700      	movs	r7, #0
   12042:	b180      	cbz	r0, 12066 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
   12044:	4812      	ldr	r0, [pc, #72]	; (12090 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
   12046:	f005 fca3 	bl	17990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   1204a:	4812      	ldr	r0, [pc, #72]	; (12094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
   1204c:	2101      	movs	r1, #1
   1204e:	7601      	strb	r1, [r0, #24]
   12050:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
   12054:	e9c0 1204 	strd	r1, r2, [r0, #16]
   12058:	490d      	ldr	r1, [pc, #52]	; (12090 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
   1205a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1205c:	f005 f874 	bl	17148 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
   12060:	f005 f886 	bl	17170 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
   12064:	e004      	b.n	12070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
   12066:	6a60      	ldr	r0, [r4, #36]	; 0x24
   12068:	f005 fc92 	bl	17990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   1206c:	f005 f89a 	bl	171a4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   12070:	b916      	cbnz	r6, 12078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
   12072:	4638      	mov	r0, r7
   12074:	f005 fb22 	bl	176bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   12078:	2100      	movs	r1, #0
   1207a:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
   1207e:	4608      	mov	r0, r1
   12080:	f005 fd12 	bl	17aa8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   12084:	2002      	movs	r0, #2
   12086:	7020      	strb	r0, [r4, #0]
   12088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1208c:	200000b0 	.word	0x200000b0
   12090:	20000e00 	.word	0x20000e00
   12094:	20000f08 	.word	0x20000f08
   12098:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1209c:	4604      	mov	r4, r0
   1209e:	f7ff fd1b 	bl	11ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
   120a2:	4605      	mov	r5, r0
   120a4:	f7ff fd12 	bl	11acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
   120a8:	4606      	mov	r6, r0
   120aa:	f8df 9168 	ldr.w	r9, [pc, #360]	; 12214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
   120ae:	4622      	mov	r2, r4
   120b0:	2100      	movs	r1, #0
   120b2:	f7ff ff0b 	bl	11ecc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
   120b6:	79a8      	ldrb	r0, [r5, #6]
   120b8:	2701      	movs	r7, #1
   120ba:	f04f 0800 	mov.w	r8, #0
   120be:	f1a9 0420 	sub.w	r4, r9, #32
   120c2:	b140      	cbz	r0, 120d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
   120c4:	2801      	cmp	r0, #1
   120c6:	d01f      	beq.n	12108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
   120c8:	2802      	cmp	r0, #2
   120ca:	d030      	beq.n	1212e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
   120cc:	2803      	cmp	r0, #3
   120ce:	d03c      	beq.n	1214a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
   120d0:	f240 21ae 	movw	r1, #686	; 0x2ae
   120d4:	e058      	b.n	12188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
   120d6:	7a20      	ldrb	r0, [r4, #8]
   120d8:	2150      	movs	r1, #80	; 0x50
   120da:	f8ad 0004 	strh.w	r0, [sp, #4]
   120de:	5388      	strh	r0, [r1, r6]
   120e0:	4648      	mov	r0, r9
   120e2:	f7ff faa3 	bl	1162c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   120e6:	b128      	cbz	r0, 120f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
   120e8:	2080      	movs	r0, #128	; 0x80
   120ea:	6a21      	ldr	r1, [r4, #32]
   120ec:	f7ff fce6 	bl	11abc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
   120f0:	70af      	strb	r7, [r5, #2]
   120f2:	e02e      	b.n	12152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
   120f4:	466a      	mov	r2, sp
   120f6:	a901      	add	r1, sp, #4
   120f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   120fa:	f007 fe45 	bl	19d88 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
   120fe:	6220      	str	r0, [r4, #32]
   12100:	b110      	cbz	r0, 12108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
   12102:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
   12106:	b111      	cbz	r1, 1210e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
   12108:	4843      	ldr	r0, [pc, #268]	; (12218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
   1210a:	6220      	str	r0, [r4, #32]
   1210c:	e021      	b.n	12152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
   1210e:	f89d 1000 	ldrb.w	r1, [sp]
   12112:	b931      	cbnz	r1, 12122 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
   12114:	f8a0 8000 	strh.w	r8, [r0]
   12118:	f880 8002 	strb.w	r8, [r0, #2]
   1211c:	2101      	movs	r1, #1
   1211e:	f008 f97d 	bl	1a41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   12122:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   12126:	6a20      	ldr	r0, [r4, #32]
   12128:	f008 f93c 	bl	1a3a4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
   1212c:	e011      	b.n	12152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
   1212e:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
   12132:	f8ad 0004 	strh.w	r0, [sp, #4]
   12136:	466a      	mov	r2, sp
   12138:	a901      	add	r1, sp, #4
   1213a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1213c:	f007 fe24 	bl	19d88 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
   12140:	6220      	str	r0, [r4, #32]
   12142:	b930      	cbnz	r0, 12152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
   12144:	f240 219f 	movw	r1, #671	; 0x29f
   12148:	e01e      	b.n	12188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
   1214a:	4648      	mov	r0, r9
   1214c:	f7ff fa6e 	bl	1162c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   12150:	b1c0      	cbz	r0, 12184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
   12152:	6a20      	ldr	r0, [r4, #32]
   12154:	2308      	movs	r3, #8
   12156:	7801      	ldrb	r1, [r0, #0]
   12158:	f021 0108 	bic.w	r1, r1, #8
   1215c:	7001      	strb	r1, [r0, #0]
   1215e:	79ea      	ldrb	r2, [r5, #7]
   12160:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
   12164:	4311      	orrs	r1, r2
   12166:	f021 0104 	bic.w	r1, r1, #4
   1216a:	7001      	strb	r1, [r0, #0]
   1216c:	7a2a      	ldrb	r2, [r5, #8]
   1216e:	2304      	movs	r3, #4
   12170:	ea03 0282 	and.w	r2, r3, r2, lsl #2
   12174:	4311      	orrs	r1, r2
   12176:	f021 0110 	bic.w	r1, r1, #16
   1217a:	7001      	strb	r1, [r0, #0]
   1217c:	43c9      	mvns	r1, r1
   1217e:	0789      	lsls	r1, r1, #30
   12180:	d005      	beq.n	1218e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
   12182:	e007      	b.n	12194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
   12184:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   12188:	2027      	movs	r0, #39	; 0x27
   1218a:	f7fe fb9d 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1218e:	78c0      	ldrb	r0, [r0, #3]
   12190:	2802      	cmp	r0, #2
   12192:	d00f      	beq.n	121b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
   12194:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12196:	f007 fa87 	bl	196a8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
   1219a:	b108      	cbz	r0, 121a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
   1219c:	2101      	movs	r1, #1
   1219e:	e00a      	b.n	121b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
   121a0:	6a20      	ldr	r0, [r4, #32]
   121a2:	7800      	ldrb	r0, [r0, #0]
   121a4:	43c0      	mvns	r0, r0
   121a6:	0780      	lsls	r0, r0, #30
   121a8:	d004      	beq.n	121b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
   121aa:	f7ff f9fd 	bl	115a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
   121ae:	f080 0101 	eor.w	r1, r0, #1
   121b2:	e000      	b.n	121b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
   121b4:	2100      	movs	r1, #0
   121b6:	6a20      	ldr	r0, [r4, #32]
   121b8:	7802      	ldrb	r2, [r0, #0]
   121ba:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   121be:	7001      	strb	r1, [r0, #0]
   121c0:	7ca9      	ldrb	r1, [r5, #18]
   121c2:	b199      	cbz	r1, 121ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
   121c4:	7841      	ldrb	r1, [r0, #1]
   121c6:	b189      	cbz	r1, 121ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
   121c8:	4814      	ldr	r0, [pc, #80]	; (1221c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
   121ca:	f005 fbe1 	bl	17990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   121ce:	4812      	ldr	r0, [pc, #72]	; (12218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
   121d0:	3828      	subs	r0, #40	; 0x28
   121d2:	f880 8018 	strb.w	r8, [r0, #24]
   121d6:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
   121da:	e9c0 1204 	strd	r1, r2, [r0, #16]
   121de:	480f      	ldr	r0, [pc, #60]	; (1221c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
   121e0:	6a21      	ldr	r1, [r4, #32]
   121e2:	f004 ffb1 	bl	17148 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
   121e6:	f004 fffb 	bl	171e0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
   121ea:	e003      	b.n	121f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
   121ec:	f005 fbd0 	bl	17990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   121f0:	f004 ffd8 	bl	171a4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   121f4:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
   121f8:	2101      	movs	r1, #1
   121fa:	2000      	movs	r0, #0
   121fc:	f005 fc54 	bl	17aa8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   12200:	7127      	strb	r7, [r4, #4]
   12202:	6a20      	ldr	r0, [r4, #32]
   12204:	8801      	ldrh	r1, [r0, #0]
   12206:	8221      	strh	r1, [r4, #16]
   12208:	7880      	ldrb	r0, [r0, #2]
   1220a:	74a0      	strb	r0, [r4, #18]
   1220c:	7027      	strb	r7, [r4, #0]
   1220e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   12212:	0000      	.short	0x0000
   12214:	200000d0 	.word	0x200000d0
   12218:	20000f30 	.word	0x20000f30
   1221c:	20000e00 	.word	0x20000e00
   12220:	00011ea1 	.word	0x00011ea1
   12224:	00011c29 	.word	0x00011c29
   12228:	00011d9d 	.word	0x00011d9d
   1222c:	00012009 	.word	0x00012009

00012230 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
   12230:	4800      	ldr	r0, [pc, #0]	; (12234 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
   12232:	4770      	bx	lr
   12234:	200017f1 	.word	0x200017f1

00012238 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
   12238:	4904      	ldr	r1, [pc, #16]	; (1224c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
   1223a:	788a      	ldrb	r2, [r1, #2]
   1223c:	4282      	cmp	r2, r0
   1223e:	d903      	bls.n	12248 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
   12240:	4408      	add	r0, r1
   12242:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
   12246:	4770      	bx	lr
   12248:	2000      	movs	r0, #0
   1224a:	4770      	bx	lr
   1224c:	2000161e 	.word	0x2000161e

00012250 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
   12250:	4904      	ldr	r1, [pc, #16]	; (12264 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
   12252:	788a      	ldrb	r2, [r1, #2]
   12254:	4282      	cmp	r2, r0
   12256:	d903      	bls.n	12260 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
   12258:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   1225c:	3083      	adds	r0, #131	; 0x83
   1225e:	4770      	bx	lr
   12260:	2000      	movs	r0, #0
   12262:	4770      	bx	lr
   12264:	2000161e 	.word	0x2000161e

00012268 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
   12268:	4a05      	ldr	r2, [pc, #20]	; (12280 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
   1226a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1226e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   12272:	6802      	ldr	r2, [r0, #0]
   12274:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
   12278:	8880      	ldrh	r0, [r0, #4]
   1227a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
   1227e:	4770      	bx	lr
   12280:	2000161e 	.word	0x2000161e

00012284 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
   12284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12288:	460e      	mov	r6, r1
   1228a:	4607      	mov	r7, r0
   1228c:	4615      	mov	r5, r2
   1228e:	2106      	movs	r1, #6
   12290:	4630      	mov	r0, r6
   12292:	f007 ff68 	bl	1a166 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   12296:	4c0d      	ldr	r4, [pc, #52]	; (122cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
   12298:	b160      	cbz	r0, 122b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
   1229a:	2000      	movs	r0, #0
   1229c:	e004      	b.n	122a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
   1229e:	1821      	adds	r1, r4, r0
   122a0:	1c40      	adds	r0, r0, #1
   122a2:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
   122a6:	b2c0      	uxtb	r0, r0
   122a8:	78a1      	ldrb	r1, [r4, #2]
   122aa:	4281      	cmp	r1, r0
   122ac:	d8f7      	bhi.n	1229e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
   122ae:	2001      	movs	r0, #1
   122b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122b4:	4631      	mov	r1, r6
   122b6:	4638      	mov	r0, r7
   122b8:	f007 fd75 	bl	19da6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   122bc:	2808      	cmp	r0, #8
   122be:	d003      	beq.n	122c8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
   122c0:	4420      	add	r0, r4
   122c2:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
   122c6:	e7f2      	b.n	122ae <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
   122c8:	2000      	movs	r0, #0
   122ca:	e7f1      	b.n	122b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
   122cc:	2000161e 	.word	0x2000161e

000122d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
   122d0:	4904      	ldr	r1, [pc, #16]	; (122e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
   122d2:	788a      	ldrb	r2, [r1, #2]
   122d4:	4282      	cmp	r2, r0
   122d6:	d903      	bls.n	122e0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
   122d8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   122dc:	1cc0      	adds	r0, r0, #3
   122de:	4770      	bx	lr
   122e0:	2000      	movs	r0, #0
   122e2:	4770      	bx	lr
   122e4:	2000161e 	.word	0x2000161e

000122e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
   122e8:	b510      	push	{r4, lr}
   122ea:	f240 12d3 	movw	r2, #467	; 0x1d3
   122ee:	2100      	movs	r1, #0
   122f0:	4808      	ldr	r0, [pc, #32]	; (12314 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
   122f2:	f006 fbd2 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   122f6:	2208      	movs	r2, #8
   122f8:	21ff      	movs	r1, #255	; 0xff
   122fa:	4807      	ldr	r0, [pc, #28]	; (12318 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
   122fc:	f006 fbcd 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   12300:	4805      	ldr	r0, [pc, #20]	; (12318 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
   12302:	2100      	movs	r1, #0
   12304:	1f00      	subs	r0, r0, #4
   12306:	7001      	strb	r1, [r0, #0]
   12308:	7041      	strb	r1, [r0, #1]
   1230a:	f44f 7161 	mov.w	r1, #900	; 0x384
   1230e:	8041      	strh	r1, [r0, #2]
   12310:	bd10      	pop	{r4, pc}
   12312:	0000      	.short	0x0000
   12314:	2000161e 	.word	0x2000161e
   12318:	20000284 	.word	0x20000284

0001231c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
   1231c:	4901      	ldr	r1, [pc, #4]	; (12324 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
   1231e:	7008      	strb	r0, [r1, #0]
   12320:	4770      	bx	lr
   12322:	0000      	.short	0x0000
   12324:	20000280 	.word	0x20000280

00012328 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
   12328:	4801      	ldr	r0, [pc, #4]	; (12330 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
   1232a:	7800      	ldrb	r0, [r0, #0]
   1232c:	4770      	bx	lr
   1232e:	0000      	.short	0x0000
   12330:	20000280 	.word	0x20000280

00012334 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
   12334:	4b0b      	ldr	r3, [pc, #44]	; (12364 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
   12336:	b510      	push	{r4, lr}
   12338:	789c      	ldrb	r4, [r3, #2]
   1233a:	4284      	cmp	r4, r0
   1233c:	d90f      	bls.n	1235e <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
   1233e:	4418      	add	r0, r3
   12340:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   12344:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   12348:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
   1234c:	700b      	strb	r3, [r1, #0]
   1234e:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
   12352:	6011      	str	r1, [r2, #0]
   12354:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
   12358:	8090      	strh	r0, [r2, #4]
   1235a:	2001      	movs	r0, #1
   1235c:	bd10      	pop	{r4, pc}
   1235e:	2000      	movs	r0, #0
   12360:	bd10      	pop	{r4, pc}
   12362:	0000      	.short	0x0000
   12364:	2000161e 	.word	0x2000161e

00012368 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
   12368:	4907      	ldr	r1, [pc, #28]	; (12388 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
   1236a:	788a      	ldrb	r2, [r1, #2]
   1236c:	4282      	cmp	r2, r0
   1236e:	d909      	bls.n	12384 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
   12370:	4408      	add	r0, r1
   12372:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   12376:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   1237a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   1237e:	f000 0001 	and.w	r0, r0, #1
   12382:	4770      	bx	lr
   12384:	2000      	movs	r0, #0
   12386:	4770      	bx	lr
   12388:	2000161e 	.word	0x2000161e

0001238c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
   1238c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12390:	4698      	mov	r8, r3
   12392:	4691      	mov	r9, r2
   12394:	460c      	mov	r4, r1
   12396:	4605      	mov	r5, r0
   12398:	f000 f936 	bl	12608 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   1239c:	4606      	mov	r6, r0
   1239e:	2810      	cmp	r0, #16
   123a0:	d006      	beq.n	123b0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
   123a2:	f000 f901 	bl	125a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   123a6:	2810      	cmp	r0, #16
   123a8:	d002      	beq.n	123b0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
   123aa:	2012      	movs	r0, #18
   123ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   123b0:	4f18      	ldr	r7, [pc, #96]	; (12414 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
   123b2:	78b8      	ldrb	r0, [r7, #2]
   123b4:	2808      	cmp	r0, #8
   123b6:	d22a      	bcs.n	1240e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
   123b8:	2e10      	cmp	r6, #16
   123ba:	d105      	bne.n	123c8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
   123bc:	2200      	movs	r2, #0
   123be:	4621      	mov	r1, r4
   123c0:	4628      	mov	r0, r5
   123c2:	f000 f905 	bl	125d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
   123c6:	4606      	mov	r6, r0
   123c8:	78bc      	ldrb	r4, [r7, #2]
   123ca:	2210      	movs	r2, #16
   123cc:	1c60      	adds	r0, r4, #1
   123ce:	70b8      	strb	r0, [r7, #2]
   123d0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   123d4:	1ce8      	adds	r0, r5, #3
   123d6:	4649      	mov	r1, r9
   123d8:	f007 fe2e 	bl	1a038 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   123dc:	f105 0083 	add.w	r0, r5, #131	; 0x83
   123e0:	2210      	movs	r2, #16
   123e2:	4641      	mov	r1, r8
   123e4:	f007 fe28 	bl	1a038 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   123e8:	2110      	movs	r1, #16
   123ea:	4640      	mov	r0, r8
   123ec:	f007 febb 	bl	1a166 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   123f0:	443c      	add	r4, r7
   123f2:	2110      	movs	r1, #16
   123f4:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
   123f8:	4648      	mov	r0, r9
   123fa:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   123fe:	f007 feb2 	bl	1a166 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   12402:	77e0      	strb	r0, [r4, #31]
   12404:	f804 6c29 	strb.w	r6, [r4, #-41]
   12408:	2000      	movs	r0, #0
   1240a:	73e0      	strb	r0, [r4, #15]
   1240c:	e7ce      	b.n	123ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
   1240e:	2007      	movs	r0, #7
   12410:	e7cc      	b.n	123ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
   12412:	0000      	.short	0x0000
   12414:	2000161e 	.word	0x2000161e

00012418 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
   12418:	4806      	ldr	r0, [pc, #24]	; (12434 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
   1241a:	b510      	push	{r4, lr}
   1241c:	7880      	ldrb	r0, [r0, #2]
   1241e:	1e40      	subs	r0, r0, #1
   12420:	b244      	sxtb	r4, r0
   12422:	e004      	b.n	1242e <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
   12424:	b2e0      	uxtb	r0, r4
   12426:	f000 f937 	bl	12698 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
   1242a:	1e64      	subs	r4, r4, #1
   1242c:	b264      	sxtb	r4, r4
   1242e:	2c00      	cmp	r4, #0
   12430:	daf8      	bge.n	12424 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
   12432:	bd10      	pop	{r4, pc}
   12434:	2000161e 	.word	0x2000161e

00012438 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
   12438:	4801      	ldr	r0, [pc, #4]	; (12440 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
   1243a:	8840      	ldrh	r0, [r0, #2]
   1243c:	4770      	bx	lr
   1243e:	0000      	.short	0x0000
   12440:	20000280 	.word	0x20000280

00012444 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
   12444:	b138      	cbz	r0, 12456 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
   12446:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
   1244a:	4288      	cmp	r0, r1
   1244c:	d803      	bhi.n	12456 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
   1244e:	4903      	ldr	r1, [pc, #12]	; (1245c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
   12450:	8048      	strh	r0, [r1, #2]
   12452:	2001      	movs	r0, #1
   12454:	4770      	bx	lr
   12456:	2000      	movs	r0, #0
   12458:	4770      	bx	lr
   1245a:	0000      	.short	0x0000
   1245c:	20000280 	.word	0x20000280

00012460 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
   12460:	4905      	ldr	r1, [pc, #20]	; (12478 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
   12462:	788a      	ldrb	r2, [r1, #2]
   12464:	4282      	cmp	r2, r0
   12466:	d903      	bls.n	12470 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
   12468:	4408      	add	r0, r1
   1246a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
   1246e:	b108      	cbz	r0, 12474 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
   12470:	2000      	movs	r0, #0
   12472:	4770      	bx	lr
   12474:	2001      	movs	r0, #1
   12476:	4770      	bx	lr
   12478:	2000161e 	.word	0x2000161e

0001247c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
   1247c:	b570      	push	{r4, r5, r6, lr}
   1247e:	460d      	mov	r5, r1
   12480:	4606      	mov	r6, r0
   12482:	f000 f8c1 	bl	12608 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   12486:	4c10      	ldr	r4, [pc, #64]	; (124c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
   12488:	2810      	cmp	r0, #16
   1248a:	d007      	beq.n	1249c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
   1248c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
   12490:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
   12494:	07c9      	lsls	r1, r1, #31
   12496:	d001      	beq.n	1249c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
   12498:	2001      	movs	r0, #1
   1249a:	bd70      	pop	{r4, r5, r6, pc}
   1249c:	7861      	ldrb	r1, [r4, #1]
   1249e:	2908      	cmp	r1, #8
   124a0:	d210      	bcs.n	124c4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
   124a2:	2810      	cmp	r0, #16
   124a4:	d008      	beq.n	124b8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
   124a6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   124aa:	2101      	movs	r1, #1
   124ac:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
   124b0:	7860      	ldrb	r0, [r4, #1]
   124b2:	1c40      	adds	r0, r0, #1
   124b4:	7060      	strb	r0, [r4, #1]
   124b6:	e7ef      	b.n	12498 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
   124b8:	2201      	movs	r2, #1
   124ba:	4629      	mov	r1, r5
   124bc:	4630      	mov	r0, r6
   124be:	f000 f887 	bl	125d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
   124c2:	e7f5      	b.n	124b0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
   124c4:	2000      	movs	r0, #0
   124c6:	bd70      	pop	{r4, r5, r6, pc}
   124c8:	2000161e 	.word	0x2000161e

000124cc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
   124cc:	b570      	push	{r4, r5, r6, lr}
   124ce:	4d0b      	ldr	r5, [pc, #44]	; (124fc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
   124d0:	7828      	ldrb	r0, [r5, #0]
   124d2:	1e40      	subs	r0, r0, #1
   124d4:	b244      	sxtb	r4, r0
   124d6:	e00a      	b.n	124ee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
   124d8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   124dc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   124e0:	07c0      	lsls	r0, r0, #31
   124e2:	d002      	beq.n	124ea <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
   124e4:	b2e0      	uxtb	r0, r4
   124e6:	f000 f91f 	bl	12728 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
   124ea:	1e64      	subs	r4, r4, #1
   124ec:	b264      	sxtb	r4, r4
   124ee:	2c00      	cmp	r4, #0
   124f0:	daf2      	bge.n	124d8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
   124f2:	4903      	ldr	r1, [pc, #12]	; (12500 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
   124f4:	2000      	movs	r0, #0
   124f6:	7048      	strb	r0, [r1, #1]
   124f8:	bd70      	pop	{r4, r5, r6, pc}
   124fa:	0000      	.short	0x0000
   124fc:	2000161e 	.word	0x2000161e
   12500:	20000280 	.word	0x20000280

00012504 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
   12504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12508:	2400      	movs	r4, #0
   1250a:	4625      	mov	r5, r4
   1250c:	4e18      	ldr	r6, [pc, #96]	; (12570 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
   1250e:	e029      	b.n	12564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
   12510:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
   12514:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
   12518:	07c0      	lsls	r0, r0, #31
   1251a:	d021      	beq.n	12560 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
   1251c:	4628      	mov	r0, r5
   1251e:	f000 f843 	bl	125a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   12522:	4603      	mov	r3, r0
   12524:	f7ff fed4 	bl	122d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   12528:	4601      	mov	r1, r0
   1252a:	2000      	movs	r0, #0
   1252c:	2b10      	cmp	r3, #16
   1252e:	d009      	beq.n	12544 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
   12530:	18f2      	adds	r2, r6, r3
   12532:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
   12536:	f1bc 0f01 	cmp.w	ip, #1
   1253a:	d002      	beq.n	12542 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
   1253c:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
   12540:	b102      	cbz	r2, 12544 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
   12542:	2001      	movs	r0, #1
   12544:	1e40      	subs	r0, r0, #1
   12546:	4201      	tst	r1, r0
   12548:	d10a      	bne.n	12560 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
   1254a:	480a      	ldr	r0, [pc, #40]	; (12574 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
   1254c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
   12550:	5503      	strb	r3, [r0, r4]
   12552:	4620      	mov	r0, r4
   12554:	1c64      	adds	r4, r4, #1
   12556:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
   1255a:	b2e4      	uxtb	r4, r4
   1255c:	f005 fbcc 	bl	17cf8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
   12560:	1c6d      	adds	r5, r5, #1
   12562:	b2ed      	uxtb	r5, r5
   12564:	7830      	ldrb	r0, [r6, #0]
   12566:	42a8      	cmp	r0, r5
   12568:	d8d2      	bhi.n	12510 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
   1256a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1256e:	0000      	.short	0x0000
   12570:	2000161e 	.word	0x2000161e
   12574:	20000284 	.word	0x20000284
   12578:	4602      	mov	r2, r0
   1257a:	4809      	ldr	r0, [pc, #36]	; (125a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
   1257c:	b510      	push	{r4, lr}
   1257e:	7800      	ldrb	r0, [r0, #0]
   12580:	460b      	mov	r3, r1
   12582:	b158      	cbz	r0, 1259c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
   12584:	4807      	ldr	r0, [pc, #28]	; (125a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
   12586:	7881      	ldrb	r1, [r0, #2]
   12588:	b141      	cbz	r1, 1259c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
   1258a:	b10b      	cbz	r3, 12590 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
   1258c:	1cc0      	adds	r0, r0, #3
   1258e:	e001      	b.n	12594 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
   12590:	4804      	ldr	r0, [pc, #16]	; (125a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
   12592:	3083      	adds	r0, #131	; 0x83
   12594:	f004 fcfa 	bl	16f8c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
   12598:	2001      	movs	r0, #1
   1259a:	bd10      	pop	{r4, pc}
   1259c:	2000      	movs	r0, #0
   1259e:	bd10      	pop	{r4, pc}
   125a0:	20000280 	.word	0x20000280
   125a4:	2000161e 	.word	0x2000161e
   125a8:	4908      	ldr	r1, [pc, #32]	; (125cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
   125aa:	b510      	push	{r4, lr}
   125ac:	4603      	mov	r3, r0
   125ae:	2000      	movs	r0, #0
   125b0:	788a      	ldrb	r2, [r1, #2]
   125b2:	e006      	b.n	125c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
   125b4:	180c      	adds	r4, r1, r0
   125b6:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
   125ba:	429c      	cmp	r4, r3
   125bc:	d004      	beq.n	125c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
   125be:	1c40      	adds	r0, r0, #1
   125c0:	b2c0      	uxtb	r0, r0
   125c2:	4282      	cmp	r2, r0
   125c4:	d8f6      	bhi.n	125b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
   125c6:	2010      	movs	r0, #16
   125c8:	bd10      	pop	{r4, pc}
   125ca:	0000      	.short	0x0000
   125cc:	2000161e 	.word	0x2000161e
   125d0:	b570      	push	{r4, r5, r6, lr}
   125d2:	4b0c      	ldr	r3, [pc, #48]	; (12604 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
   125d4:	4604      	mov	r4, r0
   125d6:	7818      	ldrb	r0, [r3, #0]
   125d8:	1c45      	adds	r5, r0, #1
   125da:	701d      	strb	r5, [r3, #0]
   125dc:	2810      	cmp	r0, #16
   125de:	d303      	bcc.n	125e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
   125e0:	2146      	movs	r1, #70	; 0x46
   125e2:	2028      	movs	r0, #40	; 0x28
   125e4:	f7fe f970 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   125e8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   125ec:	680d      	ldr	r5, [r1, #0]
   125ee:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
   125f2:	8889      	ldrh	r1, [r1, #4]
   125f4:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
   125f8:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
   125fc:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
   12600:	bd70      	pop	{r4, r5, r6, pc}
   12602:	0000      	.short	0x0000
   12604:	2000161e 	.word	0x2000161e
   12608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1260c:	460f      	mov	r7, r1
   1260e:	4606      	mov	r6, r0
   12610:	2400      	movs	r4, #0
   12612:	4d0d      	ldr	r5, [pc, #52]	; (12648 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
   12614:	e00f      	b.n	12636 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
   12616:	bf00      	nop
   12618:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   1261c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
   12620:	42b1      	cmp	r1, r6
   12622:	d106      	bne.n	12632 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
   12624:	2206      	movs	r2, #6
   12626:	4639      	mov	r1, r7
   12628:	f500 70aa 	add.w	r0, r0, #340	; 0x154
   1262c:	f006 f9a9 	bl	18982 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   12630:	b138      	cbz	r0, 12642 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
   12632:	1c64      	adds	r4, r4, #1
   12634:	b2e4      	uxtb	r4, r4
   12636:	7828      	ldrb	r0, [r5, #0]
   12638:	42a0      	cmp	r0, r4
   1263a:	d8ed      	bhi.n	12618 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
   1263c:	2010      	movs	r0, #16
   1263e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12642:	4620      	mov	r0, r4
   12644:	e7fb      	b.n	1263e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
   12646:	0000      	.short	0x0000
   12648:	2000161e 	.word	0x2000161e
   1264c:	b570      	push	{r4, r5, r6, lr}
   1264e:	4605      	mov	r5, r0
   12650:	f7ff ffaa 	bl	125a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   12654:	2810      	cmp	r0, #16
   12656:	d11c      	bne.n	12692 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   12658:	4c0e      	ldr	r4, [pc, #56]	; (12694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
   1265a:	7820      	ldrb	r0, [r4, #0]
   1265c:	1e40      	subs	r0, r0, #1
   1265e:	b2c0      	uxtb	r0, r0
   12660:	7020      	strb	r0, [r4, #0]
   12662:	42a8      	cmp	r0, r5
   12664:	d015      	beq.n	12692 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   12666:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
   1266a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1266e:	f502 7080 	add.w	r0, r2, #256	; 0x100
   12672:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
   12676:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
   1267a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
   1267e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
   12682:	7820      	ldrb	r0, [r4, #0]
   12684:	f7ff ff90 	bl	125a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   12688:	2810      	cmp	r0, #16
   1268a:	d002      	beq.n	12692 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
   1268c:	4420      	add	r0, r4
   1268e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   12692:	bd70      	pop	{r4, r5, r6, pc}
   12694:	2000161e 	.word	0x2000161e
   12698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1269c:	4c21      	ldr	r4, [pc, #132]	; (12724 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
   1269e:	4606      	mov	r6, r0
   126a0:	19a7      	adds	r7, r4, r6
   126a2:	78a0      	ldrb	r0, [r4, #2]
   126a4:	1e40      	subs	r0, r0, #1
   126a6:	b2c5      	uxtb	r5, r0
   126a8:	70a5      	strb	r5, [r4, #2]
   126aa:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
   126ae:	42ae      	cmp	r6, r5
   126b0:	d02a      	beq.n	12708 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
   126b2:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
   126b6:	eb04 1906 	add.w	r9, r4, r6, lsl #4
   126ba:	f10a 0103 	add.w	r1, sl, #3
   126be:	f109 0003 	add.w	r0, r9, #3
   126c2:	2210      	movs	r2, #16
   126c4:	f006 f96f 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   126c8:	f10a 0183 	add.w	r1, sl, #131	; 0x83
   126cc:	f109 0083 	add.w	r0, r9, #131	; 0x83
   126d0:	2210      	movs	r2, #16
   126d2:	f006 f968 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   126d6:	1960      	adds	r0, r4, r5
   126d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   126dc:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
   126e0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
   126e4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   126e8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   126ec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   126f0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
   126f4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
   126f8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
   126fc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
   12700:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
   12704:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
   12708:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
   1270c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   12710:	07c0      	lsls	r0, r0, #31
   12712:	d104      	bne.n	1271e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
   12714:	4640      	mov	r0, r8
   12716:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1271a:	f7ff bf97 	b.w	1264c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
   1271e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12722:	0000      	.short	0x0000
   12724:	2000161e 	.word	0x2000161e
   12728:	4905      	ldr	r1, [pc, #20]	; (12740 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
   1272a:	784a      	ldrb	r2, [r1, #1]
   1272c:	1e52      	subs	r2, r2, #1
   1272e:	704a      	strb	r2, [r1, #1]
   12730:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   12734:	2200      	movs	r2, #0
   12736:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
   1273a:	f7ff bf87 	b.w	1264c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
   1273e:	0000      	.short	0x0000
   12740:	2000161e 	.word	0x2000161e

00012744 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
   12744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12748:	4604      	mov	r4, r0
   1274a:	f100 0570 	add.w	r5, r0, #112	; 0x70
   1274e:	f04f 0901 	mov.w	r9, #1
   12752:	b171      	cbz	r1, 12772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
   12754:	f104 0786 	add.w	r7, r4, #134	; 0x86
   12758:	1e7e      	subs	r6, r7, #1
   1275a:	2901      	cmp	r1, #1
   1275c:	d021      	beq.n	127a2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
   1275e:	2902      	cmp	r1, #2
   12760:	d046      	beq.n	127f0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
   12762:	2903      	cmp	r1, #3
   12764:	d11b      	bne.n	1279e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
   12766:	4639      	mov	r1, r7
   12768:	4630      	mov	r0, r6
   1276a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1276e:	f007 bd2a 	b.w	1a1c6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   12772:	f44f 7206 	mov.w	r2, #536	; 0x218
   12776:	2100      	movs	r1, #0
   12778:	f006 f98f 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1277c:	f004 fbdc 	bl	16f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   12780:	f644 112b 	movw	r1, #18731	; 0x492b
   12784:	4008      	ands	r0, r1
   12786:	f885 9015 	strb.w	r9, [r5, #21]
   1278a:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
   1278e:	0a00      	lsrs	r0, r0, #8
   12790:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
   12794:	20fe      	movs	r0, #254	; 0xfe
   12796:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
   1279a:	207f      	movs	r0, #127	; 0x7f
   1279c:	7268      	strb	r0, [r5, #9]
   1279e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   127a2:	f04f 0800 	mov.w	r8, #0
   127a6:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
   127aa:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   127ae:	68e1      	ldr	r1, [r4, #12]
   127b0:	4814      	ldr	r0, [pc, #80]	; (12804 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
   127b2:	460a      	mov	r2, r1
   127b4:	4408      	add	r0, r1
   127b6:	fbb0 f0f1 	udiv	r0, r0, r1
   127ba:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   127be:	f640 30b8 	movw	r0, #3000	; 0xbb8
   127c2:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
   127c6:	8ae3      	ldrh	r3, [r4, #22]
   127c8:	4628      	mov	r0, r5
   127ca:	f000 f81d 	bl	12808 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
   127ce:	4639      	mov	r1, r7
   127d0:	4630      	mov	r0, r6
   127d2:	f007 fcf8 	bl	1a1c6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   127d6:	f006 f8b0 	bl	1893a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   127da:	b118      	cbz	r0, 127e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
   127dc:	6920      	ldr	r0, [r4, #16]
   127de:	f000 fb65 	bl	12eac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
   127e2:	b110      	cbz	r0, 127ea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
   127e4:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
   127e8:	e7d9      	b.n	1279e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
   127ea:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
   127ee:	e7d6      	b.n	1279e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
   127f0:	68c1      	ldr	r1, [r0, #12]
   127f2:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
   127f6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
   127fa:	4628      	mov	r0, r5
   127fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12800:	f000 b802 	b.w	12808 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
   12804:	01c9c37f 	.word	0x01c9c37f
   12808:	b530      	push	{r4, r5, lr}
   1280a:	2400      	movs	r4, #0
   1280c:	8684      	strh	r4, [r0, #52]	; 0x34
   1280e:	8f04      	ldrh	r4, [r0, #56]	; 0x38
   12810:	4d13      	ldr	r5, [pc, #76]	; (12860 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
   12812:	434c      	muls	r4, r1
   12814:	fbb4 f4f2 	udiv	r4, r4, r2
   12818:	8704      	strh	r4, [r0, #56]	; 0x38
   1281a:	f242 7410 	movw	r4, #10000	; 0x2710
   1281e:	4363      	muls	r3, r4
   12820:	fbb3 f3f2 	udiv	r3, r3, r2
   12824:	1c5b      	adds	r3, r3, #1
   12826:	b29b      	uxth	r3, r3
   12828:	fb03 f402 	mul.w	r4, r3, r2
   1282c:	86c3      	strh	r3, [r0, #54]	; 0x36
   1282e:	42ac      	cmp	r4, r5
   12830:	d901      	bls.n	12836 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
   12832:	1e5b      	subs	r3, r3, #1
   12834:	86c3      	strh	r3, [r0, #54]	; 0x36
   12836:	4b0b      	ldr	r3, [pc, #44]	; (12864 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
   12838:	f240 2471 	movw	r4, #625	; 0x271
   1283c:	fbb3 f3f2 	udiv	r3, r3, r2
   12840:	1c5b      	adds	r3, r3, #1
   12842:	8783      	strh	r3, [r0, #60]	; 0x3c
   12844:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   12846:	4363      	muls	r3, r4
   12848:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1284c:	1e5b      	subs	r3, r3, #1
   1284e:	fbb3 f3f2 	udiv	r3, r3, r2
   12852:	62c3      	str	r3, [r0, #44]	; 0x2c
   12854:	6a83      	ldr	r3, [r0, #40]	; 0x28
   12856:	434b      	muls	r3, r1
   12858:	fbb3 f1f2 	udiv	r1, r3, r2
   1285c:	6281      	str	r1, [r0, #40]	; 0x28
   1285e:	bd30      	pop	{r4, r5, pc}
   12860:	01e84800 	.word	0x01e84800
   12864:	02625a00 	.word	0x02625a00

00012868 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
   12868:	b570      	push	{r4, r5, r6, lr}
   1286a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
   1286e:	b28b      	uxth	r3, r1
   12870:	7ac5      	ldrb	r5, [r0, #11]
   12872:	ea83 0102 	eor.w	r1, r3, r2
   12876:	2200      	movs	r2, #0
   12878:	b2cc      	uxtb	r4, r1
   1287a:	0a09      	lsrs	r1, r1, #8
   1287c:	fa94 f4a4 	rbit	r4, r4
   12880:	fa91 f1a1 	rbit	r1, r1
   12884:	0e24      	lsrs	r4, r4, #24
   12886:	0e09      	lsrs	r1, r1, #24
   12888:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   1288c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
   12890:	1c52      	adds	r2, r2, #1
   12892:	4419      	add	r1, r3
   12894:	b2d2      	uxtb	r2, r2
   12896:	b289      	uxth	r1, r1
   12898:	2a03      	cmp	r2, #3
   1289a:	d3ed      	bcc.n	12878 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
   1289c:	4059      	eors	r1, r3
   1289e:	2225      	movs	r2, #37	; 0x25
   128a0:	fbb1 f3f2 	udiv	r3, r1, r2
   128a4:	fb02 1213 	mls	r2, r2, r3, r1
   128a8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
   128ac:	f002 0607 	and.w	r6, r2, #7
   128b0:	785b      	ldrb	r3, [r3, #1]
   128b2:	2401      	movs	r4, #1
   128b4:	fa04 f606 	lsl.w	r6, r4, r6
   128b8:	4233      	tst	r3, r6
   128ba:	d001      	beq.n	128c0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
   128bc:	4610      	mov	r0, r2
   128be:	bd70      	pop	{r4, r5, r6, pc}
   128c0:	434d      	muls	r5, r1
   128c2:	0c29      	lsrs	r1, r5, #16
   128c4:	1c49      	adds	r1, r1, #1
   128c6:	b2c9      	uxtb	r1, r1
   128c8:	2200      	movs	r2, #0
   128ca:	1885      	adds	r5, r0, r2
   128cc:	79ab      	ldrb	r3, [r5, #6]
   128ce:	428b      	cmp	r3, r1
   128d0:	d312      	bcc.n	128f8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
   128d2:	f895 5001 	ldrb.w	r5, [r5, #1]
   128d6:	2300      	movs	r3, #0
   128d8:	fa04 f603 	lsl.w	r6, r4, r3
   128dc:	4235      	tst	r5, r6
   128de:	d001      	beq.n	128e4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
   128e0:	1e49      	subs	r1, r1, #1
   128e2:	b2c9      	uxtb	r1, r1
   128e4:	b121      	cbz	r1, 128f0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
   128e6:	1c5b      	adds	r3, r3, #1
   128e8:	b2db      	uxtb	r3, r3
   128ea:	2b08      	cmp	r3, #8
   128ec:	d3f4      	bcc.n	128d8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
   128ee:	e005      	b.n	128fc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
   128f0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   128f4:	b2c0      	uxtb	r0, r0
   128f6:	bd70      	pop	{r4, r5, r6, pc}
   128f8:	1ac9      	subs	r1, r1, r3
   128fa:	b2c9      	uxtb	r1, r1
   128fc:	1c52      	adds	r2, r2, #1
   128fe:	b2d2      	uxtb	r2, r2
   12900:	2a05      	cmp	r2, #5
   12902:	d3e2      	bcc.n	128ca <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
   12904:	f240 110d 	movw	r1, #269	; 0x10d
   12908:	2046      	movs	r0, #70	; 0x46
   1290a:	f7fd ffdd 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1290e:	0000      	movs	r0, r0
   12910:	b570      	push	{r4, r5, r6, lr}
   12912:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
   12916:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   1291a:	2401      	movs	r4, #1
   1291c:	fb03 2101 	mla	r1, r3, r1, r2
   12920:	2225      	movs	r2, #37	; 0x25
   12922:	fbb1 f3f2 	udiv	r3, r1, r2
   12926:	fb02 1113 	mls	r1, r2, r3, r1
   1292a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
   1292e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
   12932:	f001 0307 	and.w	r3, r1, #7
   12936:	7d92      	ldrb	r2, [r2, #22]
   12938:	fa04 f303 	lsl.w	r3, r4, r3
   1293c:	421a      	tst	r2, r3
   1293e:	d003      	beq.n	12948 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
   12940:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
   12944:	2000      	movs	r0, #0
   12946:	bd70      	pop	{r4, r5, r6, pc}
   12948:	f890 2020 	ldrb.w	r2, [r0, #32]
   1294c:	fbb1 f3f2 	udiv	r3, r1, r2
   12950:	fb02 1113 	mls	r1, r2, r3, r1
   12954:	1c49      	adds	r1, r1, #1
   12956:	b2c9      	uxtb	r1, r1
   12958:	2300      	movs	r3, #0
   1295a:	18c5      	adds	r5, r0, r3
   1295c:	7eea      	ldrb	r2, [r5, #27]
   1295e:	428a      	cmp	r2, r1
   12960:	d311      	bcc.n	12986 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
   12962:	f895 5016 	ldrb.w	r5, [r5, #22]
   12966:	2200      	movs	r2, #0
   12968:	fa04 f602 	lsl.w	r6, r4, r2
   1296c:	4235      	tst	r5, r6
   1296e:	d001      	beq.n	12974 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
   12970:	1e49      	subs	r1, r1, #1
   12972:	b2c9      	uxtb	r1, r1
   12974:	b121      	cbz	r1, 12980 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
   12976:	1c52      	adds	r2, r2, #1
   12978:	b2d2      	uxtb	r2, r2
   1297a:	2a08      	cmp	r2, #8
   1297c:	d3f4      	bcc.n	12968 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
   1297e:	e004      	b.n	1298a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
   12980:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   12984:	e7dc      	b.n	12940 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
   12986:	1a89      	subs	r1, r1, r2
   12988:	b2c9      	uxtb	r1, r1
   1298a:	1c5b      	adds	r3, r3, #1
   1298c:	b2db      	uxtb	r3, r3
   1298e:	2b05      	cmp	r3, #5
   12990:	d3e3      	bcc.n	1295a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
   12992:	201f      	movs	r0, #31
   12994:	bd70      	pop	{r4, r5, r6, pc}
	...

00012998 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
   12998:	7841      	ldrb	r1, [r0, #1]
   1299a:	b141      	cbz	r1, 129ae <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
   1299c:	78c0      	ldrb	r0, [r0, #3]
   1299e:	2819      	cmp	r0, #25
   129a0:	d203      	bcs.n	129aa <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
   129a2:	4a04      	ldr	r2, [pc, #16]	; (129b4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
   129a4:	5c10      	ldrb	r0, [r2, r0]
   129a6:	4288      	cmp	r0, r1
   129a8:	d101      	bne.n	129ae <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
   129aa:	2001      	movs	r0, #1
   129ac:	4770      	bx	lr
   129ae:	2000      	movs	r0, #0
   129b0:	4770      	bx	lr
   129b2:	0000      	.short	0x0000
   129b4:	0001c87c 	.word	0x0001c87c

000129b8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
   129b8:	b50c      	push	{r2, r3, lr}
   129ba:	a20b      	add	r2, pc, #44	; (adr r2, 129e8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
   129bc:	e9d2 1200 	ldrd	r1, r2, [r2]
   129c0:	e9cd 1200 	strd	r1, r2, [sp]
   129c4:	7901      	ldrb	r1, [r0, #4]
   129c6:	7940      	ldrb	r0, [r0, #5]
   129c8:	f001 0207 	and.w	r2, r1, #7
   129cc:	4669      	mov	r1, sp
   129ce:	f81d 2002 	ldrb.w	r2, [sp, r2]
   129d2:	2a01      	cmp	r2, #1
   129d4:	d804      	bhi.n	129e0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
   129d6:	f000 0007 	and.w	r0, r0, #7
   129da:	5c08      	ldrb	r0, [r1, r0]
   129dc:	2801      	cmp	r0, #1
   129de:	d901      	bls.n	129e4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
   129e0:	2000      	movs	r0, #0
   129e2:	bd0c      	pop	{r2, r3, pc}
   129e4:	2001      	movs	r0, #1
   129e6:	bd0c      	pop	{r2, r3, pc}
   129e8:	02010100 	.word	0x02010100
   129ec:	03020201 	.word	0x03020201

000129f0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
   129f0:	b510      	push	{r4, lr}
   129f2:	2201      	movs	r2, #1
   129f4:	70c1      	strb	r1, [r0, #3]
   129f6:	2919      	cmp	r1, #25
   129f8:	d202      	bcs.n	12a00 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
   129fa:	4a06      	ldr	r2, [pc, #24]	; (12a14 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
   129fc:	5c52      	ldrb	r2, [r2, r1]
   129fe:	e006      	b.n	12a0e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
   12a00:	29ff      	cmp	r1, #255	; 0xff
   12a02:	d004      	beq.n	12a0e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
   12a04:	f240 31d5 	movw	r1, #981	; 0x3d5
   12a08:	202a      	movs	r0, #42	; 0x2a
   12a0a:	f7fd ff5d 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12a0e:	7042      	strb	r2, [r0, #1]
   12a10:	bd10      	pop	{r4, pc}
   12a12:	0000      	.short	0x0000
   12a14:	0001c87c 	.word	0x0001c87c

00012a18 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
   12a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a1c:	4c12      	ldr	r4, [pc, #72]	; (12a68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
   12a1e:	4607      	mov	r7, r0
   12a20:	460e      	mov	r6, r1
   12a22:	7da0      	ldrb	r0, [r4, #22]
   12a24:	b110      	cbz	r0, 12a2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
   12a26:	8b20      	ldrh	r0, [r4, #24]
   12a28:	2800      	cmp	r0, #0
   12a2a:	d012      	beq.n	12a52 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
   12a2c:	480e      	ldr	r0, [pc, #56]	; (12a68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
   12a2e:	3014      	adds	r0, #20
   12a30:	4680      	mov	r8, r0
   12a32:	f007 fd72 	bl	1a51a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
   12a36:	b9a8      	cbnz	r0, 12a64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
   12a38:	8aa5      	ldrh	r5, [r4, #20]
   12a3a:	8aa0      	ldrh	r0, [r4, #20]
   12a3c:	4632      	mov	r2, r6
   12a3e:	4639      	mov	r1, r7
   12a40:	f007 fdaf 	bl	1a5a2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
   12a44:	b138      	cbz	r0, 12a56 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
   12a46:	7da0      	ldrb	r0, [r4, #22]
   12a48:	b110      	cbz	r0, 12a50 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
   12a4a:	8b20      	ldrh	r0, [r4, #24]
   12a4c:	1e40      	subs	r0, r0, #1
   12a4e:	8320      	strh	r0, [r4, #24]
   12a50:	2001      	movs	r0, #1
   12a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a56:	4640      	mov	r0, r8
   12a58:	f007 fd5f 	bl	1a51a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
   12a5c:	b910      	cbnz	r0, 12a64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
   12a5e:	8aa0      	ldrh	r0, [r4, #20]
   12a60:	42a8      	cmp	r0, r5
   12a62:	d1ea      	bne.n	12a3a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
   12a64:	2000      	movs	r0, #0
   12a66:	e7f4      	b.n	12a52 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
   12a68:	20001378 	.word	0x20001378
   12a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12a70:	468a      	mov	sl, r1
   12a72:	4699      	mov	r9, r3
   12a74:	4615      	mov	r5, r2
   12a76:	4604      	mov	r4, r0
   12a78:	a901      	add	r1, sp, #4
   12a7a:	f007 f9d7 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12a7e:	bbe0      	cbnz	r0, 12afa <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
   12a80:	9f02      	ldr	r7, [sp, #8]
   12a82:	f04f 0800 	mov.w	r8, #0
   12a86:	3770      	adds	r7, #112	; 0x70
   12a88:	b18d      	cbz	r5, 12aae <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
   12a8a:	4620      	mov	r0, r4
   12a8c:	f7fe fb4c 	bl	11128 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   12a90:	0004      	movs	r4, r0
   12a92:	d00f      	beq.n	12ab4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
   12a94:	4629      	mov	r1, r5
   12a96:	f006 fdd9 	bl	1964c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
   12a9a:	0006      	movs	r6, r0
   12a9c:	d003      	beq.n	12aa6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
   12a9e:	481d      	ldr	r0, [pc, #116]	; (12b14 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
   12aa0:	8840      	ldrh	r0, [r0, #2]
   12aa2:	42a8      	cmp	r0, r5
   12aa4:	d208      	bcs.n	12ab8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
   12aa6:	2000      	movs	r0, #0
   12aa8:	b004      	add	sp, #16
   12aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12aae:	2001      	movs	r0, #1
   12ab0:	7538      	strb	r0, [r7, #20]
   12ab2:	e029      	b.n	12b08 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
   12ab4:	216e      	movs	r1, #110	; 0x6e
   12ab6:	e02a      	b.n	12b0e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
   12ab8:	4620      	mov	r0, r4
   12aba:	4631      	mov	r1, r6
   12abc:	aa03      	add	r2, sp, #12
   12abe:	f006 fdbe 	bl	1963e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   12ac2:	9803      	ldr	r0, [sp, #12]
   12ac4:	f8a0 8000 	strh.w	r8, [r0]
   12ac8:	f880 8002 	strb.w	r8, [r0, #2]
   12acc:	7d39      	ldrb	r1, [r7, #20]
   12ace:	b109      	cbz	r1, 12ad4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
   12ad0:	f04f 0a02 	mov.w	sl, #2
   12ad4:	4651      	mov	r1, sl
   12ad6:	f007 fca1 	bl	1a41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   12ada:	4631      	mov	r1, r6
   12adc:	2603      	movs	r6, #3
   12ade:	4620      	mov	r0, r4
   12ae0:	464a      	mov	r2, r9
   12ae2:	462b      	mov	r3, r5
   12ae4:	9600      	str	r6, [sp, #0]
   12ae6:	f006 fc90 	bl	1940a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
   12aea:	4620      	mov	r0, r4
   12aec:	4629      	mov	r1, r5
   12aee:	f006 fd4a 	bl	19586 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
   12af2:	b158      	cbz	r0, 12b0c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
   12af4:	4644      	mov	r4, r8
   12af6:	a801      	add	r0, sp, #4
   12af8:	e000      	b.n	12afc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
   12afa:	e005      	b.n	12b08 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
   12afc:	f007 fd2e 	bl	1a55c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   12b00:	9802      	ldr	r0, [sp, #8]
   12b02:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
   12b06:	753c      	strb	r4, [r7, #20]
   12b08:	2001      	movs	r0, #1
   12b0a:	e7cd      	b.n	12aa8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
   12b0c:	2184      	movs	r1, #132	; 0x84
   12b0e:	202b      	movs	r0, #43	; 0x2b
   12b10:	f7fd feda 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12b14:	20001378 	.word	0x20001378

00012b18 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
   12b18:	4901      	ldr	r1, [pc, #4]	; (12b20 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
   12b1a:	2001      	movs	r0, #1
   12b1c:	7008      	strb	r0, [r1, #0]
   12b1e:	4770      	bx	lr
   12b20:	2000028d 	.word	0x2000028d

00012b24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
   12b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b28:	0006      	movs	r6, r0
   12b2a:	d00a      	beq.n	12b42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
   12b2c:	4825      	ldr	r0, [pc, #148]	; (12bc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
   12b2e:	7801      	ldrb	r1, [r0, #0]
   12b30:	b151      	cbz	r1, 12b48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
   12b32:	2100      	movs	r1, #0
   12b34:	7071      	strb	r1, [r6, #1]
   12b36:	2203      	movs	r2, #3
   12b38:	7032      	strb	r2, [r6, #0]
   12b3a:	2201      	movs	r2, #1
   12b3c:	7132      	strb	r2, [r6, #4]
   12b3e:	7001      	strb	r1, [r0, #0]
   12b40:	e03a      	b.n	12bb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
   12b42:	f240 21da 	movw	r1, #730	; 0x2da
   12b46:	e009      	b.n	12b5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
   12b48:	4c1e      	ldr	r4, [pc, #120]	; (12bc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
   12b4a:	1ce4      	adds	r4, r4, #3
   12b4c:	7820      	ldrb	r0, [r4, #0]
   12b4e:	b940      	cbnz	r0, 12b62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
   12b50:	1ca0      	adds	r0, r4, #2
   12b52:	f007 fd6f 	bl	1a634 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
   12b56:	b120      	cbz	r0, 12b62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
   12b58:	f240 21e9 	movw	r1, #745	; 0x2e9
   12b5c:	2010      	movs	r0, #16
   12b5e:	f7fd feb3 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12b62:	f8b4 8002 	ldrh.w	r8, [r4, #2]
   12b66:	2000      	movs	r0, #0
   12b68:	f7fe f898 	bl	10c9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   12b6c:	4f16      	ldr	r7, [pc, #88]	; (12bc8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
   12b6e:	4605      	mov	r5, r0
   12b70:	6838      	ldr	r0, [r7, #0]
   12b72:	b160      	cbz	r0, 12b8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
   12b74:	8860      	ldrh	r0, [r4, #2]
   12b76:	42a8      	cmp	r0, r5
   12b78:	d309      	bcc.n	12b8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
   12b7a:	1b40      	subs	r0, r0, r5
   12b7c:	b2c0      	uxtb	r0, r0
   12b7e:	2101      	movs	r1, #1
   12b80:	f006 ff0c 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12b84:	b158      	cbz	r0, 12b9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
   12b86:	4631      	mov	r1, r6
   12b88:	f000 f84e 	bl	12c28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
   12b8c:	e006      	b.n	12b9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
   12b8e:	480f      	ldr	r0, [pc, #60]	; (12bcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
   12b90:	6800      	ldr	r0, [r0, #0]
   12b92:	b120      	cbz	r0, 12b9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
   12b94:	8860      	ldrh	r0, [r4, #2]
   12b96:	4631      	mov	r1, r6
   12b98:	f000 f8de 	bl	12d58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
   12b9c:	b960      	cbnz	r0, 12bb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
   12b9e:	1ca0      	adds	r0, r4, #2
   12ba0:	f007 fd48 	bl	1a634 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
   12ba4:	b910      	cbnz	r0, 12bac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
   12ba6:	8861      	ldrh	r1, [r4, #2]
   12ba8:	4541      	cmp	r1, r8
   12baa:	d1e1      	bne.n	12b70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
   12bac:	4808      	ldr	r0, [pc, #32]	; (12bd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
   12bae:	6801      	ldr	r1, [r0, #0]
   12bb0:	b129      	cbz	r1, 12bbe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
   12bb2:	4630      	mov	r0, r6
   12bb4:	4788      	blx	r1
   12bb6:	b110      	cbz	r0, 12bbe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
   12bb8:	2001      	movs	r0, #1
   12bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bbe:	2000      	movs	r0, #0
   12bc0:	e7fb      	b.n	12bba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
   12bc2:	0000      	.short	0x0000
   12bc4:	2000028d 	.word	0x2000028d
   12bc8:	200000f0 	.word	0x200000f0
   12bcc:	200000f4 	.word	0x200000f4
   12bd0:	200000f8 	.word	0x200000f8

00012bd4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
   12bd4:	4901      	ldr	r1, [pc, #4]	; (12bdc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
   12bd6:	7008      	strb	r0, [r1, #0]
   12bd8:	f000 b95c 	b.w	12e94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
   12bdc:	2000028c 	.word	0x2000028c

00012be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
   12be0:	4801      	ldr	r0, [pc, #4]	; (12be8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
   12be2:	7800      	ldrb	r0, [r0, #0]
   12be4:	f7fd bc94 	b.w	10510 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   12be8:	2000028c 	.word	0x2000028c

00012bec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
   12bec:	4902      	ldr	r1, [pc, #8]	; (12bf8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
   12bee:	4801      	ldr	r0, [pc, #4]	; (12bf4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
   12bf0:	6008      	str	r0, [r1, #0]
   12bf2:	4770      	bx	lr
   12bf4:	00013001 	.word	0x00013001
   12bf8:	200000f0 	.word	0x200000f0

00012bfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
   12bfc:	4905      	ldr	r1, [pc, #20]	; (12c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
   12bfe:	4804      	ldr	r0, [pc, #16]	; (12c10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
   12c00:	6008      	str	r0, [r1, #0]
   12c02:	4906      	ldr	r1, [pc, #24]	; (12c1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
   12c04:	4804      	ldr	r0, [pc, #16]	; (12c18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
   12c06:	6008      	str	r0, [r1, #0]
   12c08:	4906      	ldr	r1, [pc, #24]	; (12c24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
   12c0a:	4805      	ldr	r0, [pc, #20]	; (12c20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
   12c0c:	6008      	str	r0, [r1, #0]
   12c0e:	4770      	bx	lr
   12c10:	00013001 	.word	0x00013001
   12c14:	200000f0 	.word	0x200000f0
   12c18:	000146c5 	.word	0x000146c5
   12c1c:	200000f4 	.word	0x200000f4
   12c20:	00011761 	.word	0x00011761
   12c24:	200000f8 	.word	0x200000f8
   12c28:	b570      	push	{r4, r5, r6, lr}
   12c2a:	0005      	movs	r5, r0
   12c2c:	460c      	mov	r4, r1
   12c2e:	d02e      	beq.n	12c8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
   12c30:	4818      	ldr	r0, [pc, #96]	; (12c94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
   12c32:	6802      	ldr	r2, [r0, #0]
   12c34:	b35a      	cbz	r2, 12c8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
   12c36:	4628      	mov	r0, r5
   12c38:	4790      	blx	r2
   12c3a:	b340      	cbz	r0, 12c8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
   12c3c:	7820      	ldrb	r0, [r4, #0]
   12c3e:	2811      	cmp	r0, #17
   12c40:	d002      	beq.n	12c48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
   12c42:	2814      	cmp	r0, #20
   12c44:	d003      	beq.n	12c4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
   12c46:	e020      	b.n	12c8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12c48:	7920      	ldrb	r0, [r4, #4]
   12c4a:	b1f0      	cbz	r0, 12c8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12c4c:	e00a      	b.n	12c64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
   12c4e:	7920      	ldrb	r0, [r4, #4]
   12c50:	b120      	cbz	r0, 12c5c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
   12c52:	4628      	mov	r0, r5
   12c54:	f007 ff02 	bl	1aa5c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   12c58:	b120      	cbz	r0, 12c64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
   12c5a:	e016      	b.n	12c8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12c5c:	490e      	ldr	r1, [pc, #56]	; (12c98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
   12c5e:	2000      	movs	r0, #0
   12c60:	7008      	strb	r0, [r1, #0]
   12c62:	e012      	b.n	12c8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12c64:	88e4      	ldrh	r4, [r4, #6]
   12c66:	2100      	movs	r1, #0
   12c68:	4620      	mov	r0, r4
   12c6a:	f006 fe97 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   12c6e:	b160      	cbz	r0, 12c8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12c70:	8800      	ldrh	r0, [r0, #0]
   12c72:	f007 f81b 	bl	19cac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   12c76:	2100      	movs	r1, #0
   12c78:	4620      	mov	r0, r4
   12c7a:	f7fe f8ad 	bl	10dd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12c7e:	b120      	cbz	r0, 12c8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
   12c80:	f240 1171 	movw	r1, #369	; 0x171
   12c84:	2010      	movs	r0, #16
   12c86:	f7fd fe1f 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12c8a:	2001      	movs	r0, #1
   12c8c:	bd70      	pop	{r4, r5, r6, pc}
   12c8e:	2000      	movs	r0, #0
   12c90:	bd70      	pop	{r4, r5, r6, pc}
   12c92:	0000      	.short	0x0000
   12c94:	200000f0 	.word	0x200000f0
   12c98:	20000290 	.word	0x20000290
   12c9c:	b510      	push	{r4, lr}
   12c9e:	492d      	ldr	r1, [pc, #180]	; (12d54 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
   12ca0:	b086      	sub	sp, #24
   12ca2:	7c8a      	ldrb	r2, [r1, #18]
   12ca4:	7801      	ldrb	r1, [r0, #0]
   12ca6:	07d3      	lsls	r3, r2, #31
   12ca8:	d101      	bne.n	12cae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
   12caa:	2919      	cmp	r1, #25
   12cac:	d004      	beq.n	12cb8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
   12cae:	2918      	cmp	r1, #24
   12cb0:	d01f      	beq.n	12cf2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
   12cb2:	2912      	cmp	r1, #18
   12cb4:	d046      	beq.n	12d44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
   12cb6:	e04a      	b.n	12d4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
   12cb8:	8880      	ldrh	r0, [r0, #4]
   12cba:	f8ad 0000 	strh.w	r0, [sp]
   12cbe:	a902      	add	r1, sp, #8
   12cc0:	f007 f8b4 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12cc4:	b110      	cbz	r0, 12ccc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
   12cc6:	f44f 71c4 	mov.w	r1, #392	; 0x188
   12cca:	e035      	b.n	12d38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
   12ccc:	9803      	ldr	r0, [sp, #12]
   12cce:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   12cd2:	f88d 1002 	strb.w	r1, [sp, #2]
   12cd6:	7841      	ldrb	r1, [r0, #1]
   12cd8:	f88d 1003 	strb.w	r1, [sp, #3]
   12cdc:	8840      	ldrh	r0, [r0, #2]
   12cde:	f8ad 0004 	strh.w	r0, [sp, #4]
   12ce2:	2102      	movs	r1, #2
   12ce4:	4668      	mov	r0, sp
   12ce6:	f009 f994 	bl	1c012 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   12cea:	b340      	cbz	r0, 12d3e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
   12cec:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   12cf0:	e022      	b.n	12d38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
   12cf2:	0791      	lsls	r1, r2, #30
   12cf4:	d42b      	bmi.n	12d4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
   12cf6:	8884      	ldrh	r4, [r0, #4]
   12cf8:	a903      	add	r1, sp, #12
   12cfa:	4620      	mov	r0, r4
   12cfc:	f008 ffa8 	bl	1bc50 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
   12d00:	b110      	cbz	r0, 12d08 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
   12d02:	f240 11a5 	movw	r1, #421	; 0x1a5
   12d06:	e017      	b.n	12d38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
   12d08:	f8ad 4000 	strh.w	r4, [sp]
   12d0c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   12d10:	f8ad 0002 	strh.w	r0, [sp, #2]
   12d14:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   12d18:	f8ad 0004 	strh.w	r0, [sp, #4]
   12d1c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   12d20:	f8ad 0006 	strh.w	r0, [sp, #6]
   12d24:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   12d28:	f8ad 0008 	strh.w	r0, [sp, #8]
   12d2c:	4668      	mov	r0, sp
   12d2e:	f009 f80d 	bl	1bd4c <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
   12d32:	b120      	cbz	r0, 12d3e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
   12d34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   12d38:	2010      	movs	r0, #16
   12d3a:	f7fd fdc5 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12d3e:	2001      	movs	r0, #1
   12d40:	b006      	add	sp, #24
   12d42:	bd10      	pop	{r4, pc}
   12d44:	0751      	lsls	r1, r2, #29
   12d46:	d402      	bmi.n	12d4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
   12d48:	7b80      	ldrb	r0, [r0, #14]
   12d4a:	07c0      	lsls	r0, r0, #31
   12d4c:	d0f7      	beq.n	12d3e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
   12d4e:	2000      	movs	r0, #0
   12d50:	e7f6      	b.n	12d40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
   12d52:	0000      	.short	0x0000
   12d54:	20001378 	.word	0x20001378
   12d58:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d5c:	b087      	sub	sp, #28
   12d5e:	460c      	mov	r4, r1
   12d60:	a902      	add	r1, sp, #8
   12d62:	9807      	ldr	r0, [sp, #28]
   12d64:	f007 f862 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12d68:	2800      	cmp	r0, #0
   12d6a:	d17d      	bne.n	12e68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
   12d6c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 12e90 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x294>
   12d70:	f04f 0a01 	mov.w	sl, #1
   12d74:	4680      	mov	r8, r0
   12d76:	9803      	ldr	r0, [sp, #12]
   12d78:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
   12d7c:	2800      	cmp	r0, #0
   12d7e:	d00c      	beq.n	12d9a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
   12d80:	f8d9 2000 	ldr.w	r2, [r9]
   12d84:	b162      	cbz	r2, 12da0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
   12d86:	4621      	mov	r1, r4
   12d88:	9807      	ldr	r0, [sp, #28]
   12d8a:	4790      	blx	r2
   12d8c:	b140      	cbz	r0, 12da0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
   12d8e:	4620      	mov	r0, r4
   12d90:	f7ff ff84 	bl	12c9c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
   12d94:	2800      	cmp	r0, #0
   12d96:	d1ee      	bne.n	12d76 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x17a>
   12d98:	2001      	movs	r0, #1
   12d9a:	b009      	add	sp, #36	; 0x24
   12d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12da0:	9d03      	ldr	r5, [sp, #12]
   12da2:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
   12da6:	3570      	adds	r5, #112	; 0x70
   12da8:	b950      	cbnz	r0, 12dc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
   12daa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
   12dae:	f88d 0004 	strb.w	r0, [sp, #4]
   12db2:	9801      	ldr	r0, [sp, #4]
   12db4:	9001      	str	r0, [sp, #4]
   12db6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12dba:	b108      	cbz	r0, 12dc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
   12dbc:	2001      	movs	r0, #1
   12dbe:	e000      	b.n	12dc2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c6>
   12dc0:	2000      	movs	r0, #0
   12dc2:	4683      	mov	fp, r0
   12dc4:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
   12dc8:	b1c0      	cbz	r0, 12dfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
   12dca:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
   12dce:	0780      	lsls	r0, r0, #30
   12dd0:	d514      	bpl.n	12dfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
   12dd2:	f884 8001 	strb.w	r8, [r4, #1]
   12dd6:	f884 a000 	strb.w	sl, [r4]
   12dda:	f884 8004 	strb.w	r8, [r4, #4]
   12dde:	9907      	ldr	r1, [sp, #28]
   12de0:	f8a4 1005 	strh.w	r1, [r4, #5]
   12de4:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
   12de8:	71e1      	strb	r1, [r4, #7]
   12dea:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
   12dee:	8121      	strh	r1, [r4, #8]
   12df0:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   12df4:	8161      	strh	r1, [r4, #10]
   12df6:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
   12dfa:	e7c8      	b.n	12d8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
   12dfc:	9807      	ldr	r0, [sp, #28]
   12dfe:	f7fe f993 	bl	11128 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   12e02:	0007      	movs	r7, r0
   12e04:	d00d      	beq.n	12e22 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x226>
   12e06:	f006 fbe2 	bl	195ce <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
   12e0a:	0006      	movs	r6, r0
   12e0c:	d015      	beq.n	12e3a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23e>
   12e0e:	f884 8001 	strb.w	r8, [r4, #1]
   12e12:	200d      	movs	r0, #13
   12e14:	7020      	strb	r0, [r4, #0]
   12e16:	9807      	ldr	r0, [sp, #28]
   12e18:	80e0      	strh	r0, [r4, #6]
   12e1a:	8126      	strh	r6, [r4, #8]
   12e1c:	f884 a004 	strb.w	sl, [r4, #4]
   12e20:	e007      	b.n	12e32 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
   12e22:	f240 2133 	movw	r1, #563	; 0x233
   12e26:	e02d      	b.n	12e84 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>
   12e28:	2100      	movs	r1, #0
   12e2a:	4638      	mov	r0, r7
   12e2c:	460a      	mov	r2, r1
   12e2e:	f006 fce4 	bl	197fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   12e32:	1e76      	subs	r6, r6, #1
   12e34:	b2b6      	uxth	r6, r6
   12e36:	d2f7      	bcs.n	12e28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>
   12e38:	e7a9      	b.n	12d8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
   12e3a:	9807      	ldr	r0, [sp, #28]
   12e3c:	f7fe f95e 	bl	110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   12e40:	b1f0      	cbz	r0, 12e80 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x284>
   12e42:	f1bb 0f00 	cmp.w	fp, #0
   12e46:	d020      	beq.n	12e8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
   12e48:	f006 faf6 	bl	19438 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   12e4c:	b160      	cbz	r0, 12e68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
   12e4e:	9807      	ldr	r0, [sp, #28]
   12e50:	f006 ff2c 	bl	19cac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   12e54:	2100      	movs	r1, #0
   12e56:	9807      	ldr	r0, [sp, #28]
   12e58:	f7fd ffbe 	bl	10dd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12e5c:	f884 8001 	strb.w	r8, [r4, #1]
   12e60:	210a      	movs	r1, #10
   12e62:	4640      	mov	r0, r8
   12e64:	7021      	strb	r1, [r4, #0]
   12e66:	e000      	b.n	12e6a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26e>
   12e68:	e00f      	b.n	12e8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
   12e6a:	f884 8004 	strb.w	r8, [r4, #4]
   12e6e:	9907      	ldr	r1, [sp, #28]
   12e70:	f8a4 1005 	strh.w	r1, [r4, #5]
   12e74:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
   12e78:	71e1      	strb	r1, [r4, #7]
   12e7a:	3524      	adds	r5, #36	; 0x24
   12e7c:	7028      	strb	r0, [r5, #0]
   12e7e:	e786      	b.n	12d8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
   12e80:	f240 2151 	movw	r1, #593	; 0x251
   12e84:	2010      	movs	r0, #16
   12e86:	f7fd fd1f 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12e8a:	2000      	movs	r0, #0
   12e8c:	e785      	b.n	12d9a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
   12e8e:	0000      	.short	0x0000
   12e90:	200000f4 	.word	0x200000f4
   12e94:	4804      	ldr	r0, [pc, #16]	; (12ea8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2ac>)
   12e96:	2100      	movs	r1, #0
   12e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12e9c:	7001      	strb	r1, [r0, #0]
   12e9e:	8042      	strh	r2, [r0, #2]
   12ea0:	1f00      	subs	r0, r0, #4
   12ea2:	f8a0 1001 	strh.w	r1, [r0, #1]
   12ea6:	4770      	bx	lr
   12ea8:	20000290 	.word	0x20000290

00012eac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
   12eac:	b5f0      	push	{r4, r5, r6, r7, lr}
   12eae:	f06f 021f 	mvn.w	r2, #31
   12eb2:	0c01      	lsrs	r1, r0, #16
   12eb4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
   12eb8:	251f      	movs	r5, #31
   12eba:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   12ebe:	3854      	subs	r0, #84	; 0x54
   12ec0:	d00d      	beq.n	12ede <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   12ec2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   12ec6:	3855      	subs	r0, #85	; 0x55
   12ec8:	d009      	beq.n	12ede <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   12eca:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
   12ece:	38aa      	subs	r0, #170	; 0xaa
   12ed0:	d005      	beq.n	12ede <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   12ed2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
   12ed6:	38aa      	subs	r0, #170	; 0xaa
   12ed8:	d001      	beq.n	12ede <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   12eda:	2001      	movs	r0, #1
   12edc:	e000      	b.n	12ee0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
   12ede:	2000      	movs	r0, #0
   12ee0:	2200      	movs	r2, #0
   12ee2:	4613      	mov	r3, r2
   12ee4:	ea4f 0402 	mov.w	r4, r2
   12ee8:	ea82 0701 	eor.w	r7, r2, r1
   12eec:	43ff      	mvns	r7, r7
   12eee:	431f      	orrs	r7, r3
   12ef0:	1c7f      	adds	r7, r7, #1
   12ef2:	d00f      	beq.n	12f14 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
   12ef4:	f006 0701 	and.w	r7, r6, #1
   12ef8:	0852      	lsrs	r2, r2, #1
   12efa:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
   12efe:	f005 0701 	and.w	r7, r5, #1
   12f02:	085b      	lsrs	r3, r3, #1
   12f04:	0876      	lsrs	r6, r6, #1
   12f06:	086d      	lsrs	r5, r5, #1
   12f08:	1c64      	adds	r4, r4, #1
   12f0a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
   12f0e:	2c16      	cmp	r4, #22
   12f10:	d3ea      	bcc.n	12ee8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
   12f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f14:	2000      	movs	r0, #0
   12f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012f18 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
   12f18:	b510      	push	{r4, lr}
   12f1a:	e9d0 2100 	ldrd	r2, r1, [r0]
   12f1e:	4b09      	ldr	r3, [pc, #36]	; (12f44 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
   12f20:	4c09      	ldr	r4, [pc, #36]	; (12f48 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
   12f22:	4353      	muls	r3, r2
   12f24:	4354      	muls	r4, r2
   12f26:	4051      	eors	r1, r2
   12f28:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
   12f2c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
   12f30:	ea4f 41f1 	mov.w	r1, r1, ror #19
   12f34:	e9c0 2100 	strd	r2, r1, [r0]
   12f38:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
   12f3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12f40:	4618      	mov	r0, r3
   12f42:	bd10      	pop	{r4, pc}
   12f44:	c6ef3760 	.word	0xc6ef3760
   12f48:	9e3779bb 	.word	0x9e3779bb

00012f4c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
   12f4c:	b570      	push	{r4, r5, r6, lr}
   12f4e:	4604      	mov	r4, r0
   12f50:	7c00      	ldrb	r0, [r0, #16]
   12f52:	b300      	cbz	r0, 12f96 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
   12f54:	2802      	cmp	r0, #2
   12f56:	d01e      	beq.n	12f96 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
   12f58:	f05f 0001 	movs.w	r0, #1
   12f5c:	f104 0149 	add.w	r1, r4, #73	; 0x49
   12f60:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
   12f64:	460d      	mov	r5, r1
   12f66:	b1c0      	cbz	r0, 12f9a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
   12f68:	7de0      	ldrb	r0, [r4, #23]
   12f6a:	b1f0      	cbz	r0, 12faa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
   12f6c:	f8d4 0011 	ldr.w	r0, [r4, #17]
   12f70:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
   12f74:	f8b4 0015 	ldrh.w	r0, [r4, #21]
   12f78:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
   12f7c:	7c20      	ldrb	r0, [r4, #16]
   12f7e:	f007 fcd0 	bl	1a922 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   12f82:	7620      	strb	r0, [r4, #24]
   12f84:	2008      	movs	r0, #8
   12f86:	7660      	strb	r0, [r4, #25]
   12f88:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   12f8c:	4629      	mov	r1, r5
   12f8e:	f007 fcb4 	bl	1a8fa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
   12f92:	b9a8      	cbnz	r0, 12fc0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
   12f94:	e00e      	b.n	12fb4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
   12f96:	2000      	movs	r0, #0
   12f98:	e7e0      	b.n	12f5c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
   12f9a:	2000      	movs	r0, #0
   12f9c:	f7fe fb92 	bl	116c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   12fa0:	2800      	cmp	r0, #0
   12fa2:	d1eb      	bne.n	12f7c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
   12fa4:	f240 41aa 	movw	r1, #1194	; 0x4aa
   12fa8:	e001      	b.n	12fae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
   12faa:	f240 41ae 	movw	r1, #1198	; 0x4ae
   12fae:	202d      	movs	r0, #45	; 0x2d
   12fb0:	f7fd fc8a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12fb4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   12fb8:	4629      	mov	r1, r5
   12fba:	f007 fca7 	bl	1a90c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   12fbe:	b100      	cbz	r0, 12fc2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
   12fc0:	2001      	movs	r0, #1
   12fc2:	76a0      	strb	r0, [r4, #26]
   12fc4:	7e20      	ldrb	r0, [r4, #24]
   12fc6:	b130      	cbz	r0, 12fd6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
   12fc8:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
   12fcc:	f104 0150 	add.w	r1, r4, #80	; 0x50
   12fd0:	f006 fee9 	bl	19da6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   12fd4:	7660      	strb	r0, [r4, #25]
   12fd6:	2500      	movs	r5, #0
   12fd8:	6425      	str	r5, [r4, #64]	; 0x40
   12fda:	f005 fb6f 	bl	186bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   12fde:	6460      	str	r0, [r4, #68]	; 0x44
   12fe0:	2100      	movs	r1, #0
   12fe2:	4620      	mov	r0, r4
   12fe4:	f007 fdbc 	bl	1ab60 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
   12fe8:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
   12fec:	78a0      	ldrb	r0, [r4, #2]
   12fee:	0740      	lsls	r0, r0, #29
   12ff0:	d505      	bpl.n	12ffe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
   12ff2:	4620      	mov	r0, r4
   12ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12ff8:	2100      	movs	r1, #0
   12ffa:	f000 bdff 	b.w	13bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
   12ffe:	bd70      	pop	{r4, r5, r6, pc}

00013000 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
   13000:	b508      	push	{r3, lr}
   13002:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
   13006:	f88d 2000 	strb.w	r2, [sp]
   1300a:	9a00      	ldr	r2, [sp, #0]
   1300c:	9200      	str	r2, [sp, #0]
   1300e:	f89d 3000 	ldrb.w	r3, [sp]
   13012:	2200      	movs	r2, #0
   13014:	b163      	cbz	r3, 13030 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
   13016:	704a      	strb	r2, [r1, #1]
   13018:	2317      	movs	r3, #23
   1301a:	700b      	strb	r3, [r1, #0]
   1301c:	f850 3f95 	ldr.w	r3, [r0, #149]!
   13020:	604b      	str	r3, [r1, #4]
   13022:	6843      	ldr	r3, [r0, #4]
   13024:	608b      	str	r3, [r1, #8]
   13026:	7a03      	ldrb	r3, [r0, #8]
   13028:	730b      	strb	r3, [r1, #12]
   1302a:	f800 2c01 	strb.w	r2, [r0, #-1]
   1302e:	e03b      	b.n	130a8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
   13030:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
   13034:	f88d 3000 	strb.w	r3, [sp]
   13038:	9b00      	ldr	r3, [sp, #0]
   1303a:	9300      	str	r3, [sp, #0]
   1303c:	f89d 3000 	ldrb.w	r3, [sp]
   13040:	b143      	cbz	r3, 13054 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
   13042:	704a      	strb	r2, [r1, #1]
   13044:	2305      	movs	r3, #5
   13046:	700b      	strb	r3, [r1, #0]
   13048:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   1304c:	604b      	str	r3, [r1, #4]
   1304e:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
   13052:	e029      	b.n	130a8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
   13054:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   13058:	f88d 3000 	strb.w	r3, [sp]
   1305c:	9b00      	ldr	r3, [sp, #0]
   1305e:	9300      	str	r3, [sp, #0]
   13060:	f89d 3000 	ldrb.w	r3, [sp]
   13064:	b11b      	cbz	r3, 1306e <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
   13066:	bf00      	nop
   13068:	f007 fd51 	bl	1ab0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
   1306c:	e01c      	b.n	130a8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
   1306e:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
   13072:	f88d 3000 	strb.w	r3, [sp]
   13076:	9b00      	ldr	r3, [sp, #0]
   13078:	9300      	str	r3, [sp, #0]
   1307a:	f89d 3000 	ldrb.w	r3, [sp]
   1307e:	b1ab      	cbz	r3, 130ac <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
   13080:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   13084:	f88d 3000 	strb.w	r3, [sp]
   13088:	9b00      	ldr	r3, [sp, #0]
   1308a:	9300      	str	r3, [sp, #0]
   1308c:	f89d 3000 	ldrb.w	r3, [sp]
   13090:	2b00      	cmp	r3, #0
   13092:	d1e9      	bne.n	13068 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
   13094:	704a      	strb	r2, [r1, #1]
   13096:	2314      	movs	r3, #20
   13098:	700b      	strb	r3, [r1, #0]
   1309a:	f850 3f88 	ldr.w	r3, [r0, #136]!
   1309e:	604b      	str	r3, [r1, #4]
   130a0:	8883      	ldrh	r3, [r0, #4]
   130a2:	810b      	strh	r3, [r1, #8]
   130a4:	f800 2c02 	strb.w	r2, [r0, #-2]
   130a8:	2001      	movs	r0, #1
   130aa:	bd08      	pop	{r3, pc}
   130ac:	2000      	movs	r0, #0
   130ae:	bd08      	pop	{r3, pc}

000130b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
   130b0:	b530      	push	{r4, r5, lr}
   130b2:	460c      	mov	r4, r1
   130b4:	b08d      	sub	sp, #52	; 0x34
   130b6:	4605      	mov	r5, r0
   130b8:	4601      	mov	r1, r0
   130ba:	2220      	movs	r2, #32
   130bc:	a802      	add	r0, sp, #8
   130be:	f005 fc72 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   130c2:	a80a      	add	r0, sp, #40	; 0x28
   130c4:	f007 fdf9 	bl	1acba <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   130c8:	7aa0      	ldrb	r0, [r4, #10]
   130ca:	f88d 0018 	strb.w	r0, [sp, #24]
   130ce:	7820      	ldrb	r0, [r4, #0]
   130d0:	f88d 0008 	strb.w	r0, [sp, #8]
   130d4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   130d8:	f8ad 0000 	strh.w	r0, [sp]
   130dc:	f89d 0000 	ldrb.w	r0, [sp]
   130e0:	f000 0101 	and.w	r1, r0, #1
   130e4:	f3c0 0240 	ubfx	r2, r0, #1, #1
   130e8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
   130ec:	f3c0 0280 	ubfx	r2, r0, #2, #1
   130f0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
   130f4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
   130f8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
   130fc:	f3c0 1200 	ubfx	r2, r0, #4, #1
   13100:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   13104:	f3c0 1240 	ubfx	r2, r0, #5, #1
   13108:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
   1310c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13110:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
   13114:	f8ad 000a 	strh.w	r0, [sp, #10]
   13118:	7d20      	ldrb	r0, [r4, #20]
   1311a:	2801      	cmp	r0, #1
   1311c:	d006      	beq.n	1312c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
   1311e:	2802      	cmp	r0, #2
   13120:	d004      	beq.n	1312c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
   13122:	f240 2175 	movw	r1, #629	; 0x275
   13126:	2006      	movs	r0, #6
   13128:	f7fd fbce 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1312c:	f88d 000c 	strb.w	r0, [sp, #12]
   13130:	7a61      	ldrb	r1, [r4, #9]
   13132:	a80a      	add	r0, sp, #40	; 0x28
   13134:	f007 fda8 	bl	1ac88 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
   13138:	7d20      	ldrb	r0, [r4, #20]
   1313a:	2101      	movs	r1, #1
   1313c:	2802      	cmp	r0, #2
   1313e:	d102      	bne.n	13146 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
   13140:	7d60      	ldrb	r0, [r4, #21]
   13142:	1c40      	adds	r0, r0, #1
   13144:	b2c1      	uxtb	r1, r0
   13146:	7ea0      	ldrb	r0, [r4, #26]
   13148:	1c40      	adds	r0, r0, #1
   1314a:	b2c2      	uxtb	r2, r0
   1314c:	a80a      	add	r0, sp, #40	; 0x28
   1314e:	f007 fd62 	bl	1ac16 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
   13152:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13156:	0700      	lsls	r0, r0, #28
   13158:	d501      	bpl.n	1315e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
   1315a:	2000      	movs	r0, #0
   1315c:	e020      	b.n	131a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
   1315e:	a80a      	add	r0, sp, #40	; 0x28
   13160:	f007 fd6b 	bl	1ac3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   13164:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   13168:	2228      	movs	r2, #40	; 0x28
   1316a:	f000 fded 	bl	13d48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
   1316e:	f240 2171 	movw	r1, #625	; 0x271
   13172:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
   13176:	fbb0 f0f1 	udiv	r0, r0, r1
   1317a:	4348      	muls	r0, r1
   1317c:	f8d4 1002 	ldr.w	r1, [r4, #2]
   13180:	f240 2371 	movw	r3, #625	; 0x271
   13184:	0a0a      	lsrs	r2, r1, #8
   13186:	f240 2171 	movw	r1, #625	; 0x271
   1318a:	434a      	muls	r2, r1
   1318c:	f8d4 1005 	ldr.w	r1, [r4, #5]
   13190:	0a09      	lsrs	r1, r1, #8
   13192:	4359      	muls	r1, r3
   13194:	4290      	cmp	r0, r2
   13196:	d801      	bhi.n	1319c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
   13198:	9204      	str	r2, [sp, #16]
   1319a:	e004      	b.n	131a6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
   1319c:	4288      	cmp	r0, r1
   1319e:	d801      	bhi.n	131a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
   131a0:	9004      	str	r0, [sp, #16]
   131a2:	e000      	b.n	131a6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
   131a4:	9104      	str	r1, [sp, #16]
   131a6:	7ca0      	ldrb	r0, [r4, #18]
   131a8:	f88d 0017 	strb.w	r0, [sp, #23]
   131ac:	7e20      	ldrb	r0, [r4, #24]
   131ae:	2801      	cmp	r0, #1
   131b0:	d000      	beq.n	131b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
   131b2:	2000      	movs	r0, #0
   131b4:	f88d 0014 	strb.w	r0, [sp, #20]
   131b8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   131ba:	f006 fcad 	bl	19b18 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
   131be:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   131c0:	f006 fd4d 	bl	19c5e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
   131c4:	2220      	movs	r2, #32
   131c6:	a902      	add	r1, sp, #8
   131c8:	4628      	mov	r0, r5
   131ca:	f005 fbec 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   131ce:	980a      	ldr	r0, [sp, #40]	; 0x28
   131d0:	6228      	str	r0, [r5, #32]
   131d2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   131d6:	84a8      	strh	r0, [r5, #36]	; 0x24
   131d8:	7ae0      	ldrb	r0, [r4, #11]
   131da:	b168      	cbz	r0, 131f8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
   131dc:	2802      	cmp	r0, #2
   131de:	d00b      	beq.n	131f8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
   131e0:	f05f 0001 	movs.w	r0, #1
   131e4:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
   131e8:	68e0      	ldr	r0, [r4, #12]
   131ea:	6528      	str	r0, [r5, #80]	; 0x50
   131ec:	8a20      	ldrh	r0, [r4, #16]
   131ee:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
   131f2:	b00d      	add	sp, #52	; 0x34
   131f4:	2000      	movs	r0, #0
   131f6:	bd30      	pop	{r4, r5, pc}
   131f8:	2000      	movs	r0, #0
   131fa:	e7f3      	b.n	131e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

000131fc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
   131fc:	4a0a      	ldr	r2, [pc, #40]	; (13228 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
   131fe:	b510      	push	{r4, lr}
   13200:	2100      	movs	r1, #0
   13202:	7011      	strb	r1, [r2, #0]
   13204:	4c09      	ldr	r4, [pc, #36]	; (1322c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
   13206:	6060      	str	r0, [r4, #4]
   13208:	f000 f822 	bl	13250 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1320c:	b110      	cbz	r0, 13214 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
   1320e:	f240 312a 	movw	r1, #810	; 0x32a
   13212:	e004      	b.n	1321e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
   13214:	68a0      	ldr	r0, [r4, #8]
   13216:	2800      	cmp	r0, #0
   13218:	d104      	bne.n	13224 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
   1321a:	f240 312d 	movw	r1, #813	; 0x32d
   1321e:	202d      	movs	r0, #45	; 0x2d
   13220:	f7fd fb52 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13224:	bd10      	pop	{r4, pc}
   13226:	0000      	.short	0x0000
   13228:	20001394 	.word	0x20001394
   1322c:	200000fc 	.word	0x200000fc

00013230 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
   13230:	4902      	ldr	r1, [pc, #8]	; (1323c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
   13232:	4801      	ldr	r0, [pc, #4]	; (13238 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
   13234:	6088      	str	r0, [r1, #8]
   13236:	4770      	bx	lr
   13238:	00013d30 	.word	0x00013d30
   1323c:	200000fc 	.word	0x200000fc

00013240 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
   13240:	4902      	ldr	r1, [pc, #8]	; (1324c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
   13242:	6008      	str	r0, [r1, #0]
   13244:	6889      	ldr	r1, [r1, #8]
   13246:	6809      	ldr	r1, [r1, #0]
   13248:	4708      	bx	r1
   1324a:	0000      	.short	0x0000
   1324c:	200000fc 	.word	0x200000fc

00013250 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
   13250:	4808      	ldr	r0, [pc, #32]	; (13274 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
   13252:	b510      	push	{r4, lr}
   13254:	7800      	ldrb	r0, [r0, #0]
   13256:	b110      	cbz	r0, 1325e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
   13258:	240c      	movs	r4, #12
   1325a:	4620      	mov	r0, r4
   1325c:	bd10      	pop	{r4, pc}
   1325e:	2400      	movs	r4, #0
   13260:	2218      	movs	r2, #24
   13262:	4621      	mov	r1, r4
   13264:	4803      	ldr	r0, [pc, #12]	; (13274 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
   13266:	f005 fc18 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1326a:	f004 f8c3 	bl	173f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   1326e:	f003 fea5 	bl	16fbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   13272:	e7f2      	b.n	1325a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
   13274:	20001394 	.word	0x20001394

00013278 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
   13278:	4904      	ldr	r1, [pc, #16]	; (1328c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
   1327a:	b510      	push	{r4, lr}
   1327c:	7809      	ldrb	r1, [r1, #0]
   1327e:	2901      	cmp	r1, #1
   13280:	d101      	bne.n	13286 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
   13282:	f000 fb81 	bl	13988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   13286:	2000      	movs	r0, #0
   13288:	bd10      	pop	{r4, pc}
   1328a:	0000      	.short	0x0000
   1328c:	20001394 	.word	0x20001394

00013290 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
   13290:	4902      	ldr	r1, [pc, #8]	; (1329c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
   13292:	4801      	ldr	r0, [pc, #4]	; (13298 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
   13294:	6008      	str	r0, [r1, #0]
   13296:	4770      	bx	lr
   13298:	00013ad5 	.word	0x00013ad5
   1329c:	20000108 	.word	0x20000108
   132a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132a4:	000f      	movs	r7, r1
   132a6:	4604      	mov	r4, r0
   132a8:	d023      	beq.n	132f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
   132aa:	f104 0020 	add.w	r0, r4, #32
   132ae:	4605      	mov	r5, r0
   132b0:	f007 fcec 	bl	1ac8c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   132b4:	b9b0      	cbnz	r0, 132e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
   132b6:	78a0      	ldrb	r0, [r4, #2]
   132b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   132bc:	b350      	cbz	r0, 13314 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
   132be:	4628      	mov	r0, r5
   132c0:	f007 fcbb 	bl	1ac3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   132c4:	4606      	mov	r6, r0
   132c6:	4628      	mov	r0, r5
   132c8:	f007 fce0 	bl	1ac8c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   132cc:	1a30      	subs	r0, r6, r0
   132ce:	b2c0      	uxtb	r0, r0
   132d0:	f007 fd31 	bl	1ad36 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   132d4:	4601      	mov	r1, r0
   132d6:	4835      	ldr	r0, [pc, #212]	; (133ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
   132d8:	6842      	ldr	r2, [r0, #4]
   132da:	4411      	add	r1, r2
   132dc:	6041      	str	r1, [r0, #4]
   132de:	4628      	mov	r0, r5
   132e0:	f007 fcf2 	bl	1acc8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   132e4:	4628      	mov	r0, r5
   132e6:	f007 fcb4 	bl	1ac52 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   132ea:	4601      	mov	r1, r0
   132ec:	4620      	mov	r0, r4
   132ee:	f007 fc73 	bl	1abd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
   132f2:	4d2f      	ldr	r5, [pc, #188]	; (133b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
   132f4:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
   132f8:	2100      	movs	r1, #0
   132fa:	6868      	ldr	r0, [r5, #4]
   132fc:	8001      	strh	r1, [r0, #0]
   132fe:	f007 fc81 	bl	1ac04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
   13302:	8860      	ldrh	r0, [r4, #2]
   13304:	2813      	cmp	r0, #19
   13306:	d013      	beq.n	13330 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
   13308:	dc09      	bgt.n	1331e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
   1330a:	2810      	cmp	r0, #16
   1330c:	d036      	beq.n	1337c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
   1330e:	2812      	cmp	r0, #18
   13310:	d109      	bne.n	13326 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
   13312:	e031      	b.n	13378 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
   13314:	4620      	mov	r0, r4
   13316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1331a:	f000 bb35 	b.w	13988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   1331e:	2815      	cmp	r0, #21
   13320:	d00f      	beq.n	13342 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
   13322:	281d      	cmp	r0, #29
   13324:	d00d      	beq.n	13342 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
   13326:	f240 616c 	movw	r1, #1644	; 0x66c
   1332a:	202d      	movs	r0, #45	; 0x2d
   1332c:	f7fd facc 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13330:	2100      	movs	r1, #0
   13332:	6868      	ldr	r0, [r5, #4]
   13334:	f007 f8aa 	bl	1a48c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   13338:	2101      	movs	r1, #1
   1333a:	6868      	ldr	r0, [r5, #4]
   1333c:	f007 fc62 	bl	1ac04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
   13340:	e020      	b.n	13384 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
   13342:	2101      	movs	r1, #1
   13344:	6868      	ldr	r0, [r5, #4]
   13346:	f007 f8a1 	bl	1a48c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   1334a:	2101      	movs	r1, #1
   1334c:	6868      	ldr	r0, [r5, #4]
   1334e:	f007 fc59 	bl	1ac04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
   13352:	b136      	cbz	r6, 13362 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
   13354:	f104 0157 	add.w	r1, r4, #87	; 0x57
   13358:	6868      	ldr	r0, [r5, #4]
   1335a:	f007 f8b2 	bl	1a4c2 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
   1335e:	2101      	movs	r1, #1
   13360:	e006      	b.n	13370 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
   13362:	f104 0150 	add.w	r1, r4, #80	; 0x50
   13366:	6868      	ldr	r0, [r5, #4]
   13368:	f007 f8ab 	bl	1a4c2 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
   1336c:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
   13370:	6868      	ldr	r0, [r5, #4]
   13372:	f007 f8ac 	bl	1a4ce <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
   13376:	e005      	b.n	13384 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
   13378:	2106      	movs	r1, #6
   1337a:	e000      	b.n	1337e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
   1337c:	2102      	movs	r1, #2
   1337e:	6868      	ldr	r0, [r5, #4]
   13380:	f007 f884 	bl	1a48c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   13384:	4620      	mov	r0, r4
   13386:	f000 fcaf 	bl	13ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
   1338a:	8860      	ldrh	r0, [r4, #2]
   1338c:	281d      	cmp	r0, #29
   1338e:	d006      	beq.n	1339e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
   13390:	2815      	cmp	r0, #21
   13392:	d004      	beq.n	1339e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
   13394:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   13396:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13398:	6868      	ldr	r0, [r5, #4]
   1339a:	f007 f867 	bl	1a46c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
   1339e:	4639      	mov	r1, r7
   133a0:	4620      	mov	r0, r4
   133a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   133a6:	f000 b9e5 	b.w	13774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
   133aa:	0000      	.short	0x0000
   133ac:	20001394 	.word	0x20001394
   133b0:	200000fc 	.word	0x200000fc
   133b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133b8:	4d2e      	ldr	r5, [pc, #184]	; (13474 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
   133ba:	4607      	mov	r7, r0
   133bc:	7828      	ldrb	r0, [r5, #0]
   133be:	2802      	cmp	r0, #2
   133c0:	d005      	beq.n	133ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
   133c2:	7828      	ldrb	r0, [r5, #0]
   133c4:	2803      	cmp	r0, #3
   133c6:	d002      	beq.n	133ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
   133c8:	f640 41f7 	movw	r1, #3319	; 0xcf7
   133cc:	e029      	b.n	13422 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
   133ce:	4c2a      	ldr	r4, [pc, #168]	; (13478 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
   133d0:	6820      	ldr	r0, [r4, #0]
   133d2:	7b01      	ldrb	r1, [r0, #12]
   133d4:	b109      	cbz	r1, 133da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
   133d6:	f007 fc0a 	bl	1abee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
   133da:	6860      	ldr	r0, [r4, #4]
   133dc:	f04f 0800 	mov.w	r8, #0
   133e0:	7802      	ldrb	r2, [r0, #0]
   133e2:	f002 060f 	and.w	r6, r2, #15
   133e6:	b357      	cbz	r7, 1343e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
   133e8:	6821      	ldr	r1, [r4, #0]
   133ea:	f101 0349 	add.w	r3, r1, #73	; 0x49
   133ee:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
   133f2:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
   133f6:	d122      	bne.n	1343e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
   133f8:	2206      	movs	r2, #6
   133fa:	4619      	mov	r1, r3
   133fc:	3009      	adds	r0, #9
   133fe:	f005 fac0 	bl	18982 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   13402:	b9e0      	cbnz	r0, 1343e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
   13404:	4641      	mov	r1, r8
   13406:	6860      	ldr	r0, [r4, #4]
   13408:	f007 f820 	bl	1a44c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
   1340c:	b1b8      	cbz	r0, 1343e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
   1340e:	782a      	ldrb	r2, [r5, #0]
   13410:	6820      	ldr	r0, [r4, #0]
   13412:	4631      	mov	r1, r6
   13414:	2a02      	cmp	r2, #2
   13416:	d007      	beq.n	13428 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
   13418:	782a      	ldrb	r2, [r5, #0]
   1341a:	2a03      	cmp	r2, #3
   1341c:	d004      	beq.n	13428 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
   1341e:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
   13422:	202d      	movs	r0, #45	; 0x2d
   13424:	f7fd fa50 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13428:	68a2      	ldr	r2, [r4, #8]
   1342a:	782b      	ldrb	r3, [r5, #0]
   1342c:	6952      	ldr	r2, [r2, #20]
   1342e:	f06f 0607 	mvn.w	r6, #7
   13432:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   13436:	58d2      	ldr	r2, [r2, r3]
   13438:	4790      	blx	r2
   1343a:	4606      	mov	r6, r0
   1343c:	e000      	b.n	13440 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
   1343e:	2601      	movs	r6, #1
   13440:	7ba8      	ldrb	r0, [r5, #14]
   13442:	b118      	cbz	r0, 1344c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
   13444:	f003 ffd6 	bl	173f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   13448:	f003 fdb8 	bl	16fbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   1344c:	2e00      	cmp	r6, #0
   1344e:	d00f      	beq.n	13470 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
   13450:	6820      	ldr	r0, [r4, #0]
   13452:	f007 fc86 	bl	1ad62 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   13456:	b130      	cbz	r0, 13466 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
   13458:	f003 ffec 	bl	17434 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1345c:	68a0      	ldr	r0, [r4, #8]
   1345e:	6880      	ldr	r0, [r0, #8]
   13460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13464:	4700      	bx	r0
   13466:	6820      	ldr	r0, [r4, #0]
   13468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1346c:	f000 ba8c 	b.w	13988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   13470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13474:	20001394 	.word	0x20001394
   13478:	200000fc 	.word	0x200000fc
   1347c:	b510      	push	{r4, lr}
   1347e:	2903      	cmp	r1, #3
   13480:	d002      	beq.n	13488 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
   13482:	2905      	cmp	r1, #5
   13484:	d10a      	bne.n	1349c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
   13486:	e002      	b.n	1348e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
   13488:	f000 fb7e 	bl	13b88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
   1348c:	e003      	b.n	13496 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
   1348e:	4904      	ldr	r1, [pc, #16]	; (134a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
   13490:	6809      	ldr	r1, [r1, #0]
   13492:	b109      	cbz	r1, 13498 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
   13494:	4788      	blx	r1
   13496:	b108      	cbz	r0, 1349c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
   13498:	2000      	movs	r0, #0
   1349a:	bd10      	pop	{r4, pc}
   1349c:	2001      	movs	r0, #1
   1349e:	bd10      	pop	{r4, pc}
   134a0:	20000108 	.word	0x20000108
   134a4:	4a09      	ldr	r2, [pc, #36]	; (134cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
   134a6:	0003      	movs	r3, r0
   134a8:	6810      	ldr	r0, [r2, #0]
   134aa:	d001      	beq.n	134b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
   134ac:	f000 ba6c 	b.w	13988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   134b0:	2900      	cmp	r1, #0
   134b2:	d009      	beq.n	134c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
   134b4:	6891      	ldr	r1, [r2, #8]
   134b6:	4a06      	ldr	r2, [pc, #24]	; (134d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
   134b8:	6909      	ldr	r1, [r1, #16]
   134ba:	7812      	ldrb	r2, [r2, #0]
   134bc:	f06f 030f 	mvn.w	r3, #15
   134c0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   134c4:	5889      	ldr	r1, [r1, r2]
   134c6:	4708      	bx	r1
   134c8:	4770      	bx	lr
   134ca:	0000      	.short	0x0000
   134cc:	200000fc 	.word	0x200000fc
   134d0:	20001394 	.word	0x20001394
   134d4:	b570      	push	{r4, r5, r6, lr}
   134d6:	4604      	mov	r4, r0
   134d8:	8840      	ldrh	r0, [r0, #2]
   134da:	2810      	cmp	r0, #16
   134dc:	d019      	beq.n	13512 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
   134de:	4d10      	ldr	r5, [pc, #64]	; (13520 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
   134e0:	7ba8      	ldrb	r0, [r5, #14]
   134e2:	b120      	cbz	r0, 134ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
   134e4:	f003 fd8a 	bl	16ffc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
   134e8:	2040      	movs	r0, #64	; 0x40
   134ea:	f003 ff91 	bl	17410 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
   134ee:	480d      	ldr	r0, [pc, #52]	; (13524 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
   134f0:	6840      	ldr	r0, [r0, #4]
   134f2:	f004 fa4d 	bl	17990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   134f6:	78a0      	ldrb	r0, [r4, #2]
   134f8:	0740      	lsls	r0, r0, #29
   134fa:	d404      	bmi.n	13506 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
   134fc:	2100      	movs	r1, #0
   134fe:	7922      	ldrb	r2, [r4, #4]
   13500:	4608      	mov	r0, r1
   13502:	f004 fad1 	bl	17aa8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   13506:	2000      	movs	r0, #0
   13508:	f004 f8d8 	bl	176bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   1350c:	2002      	movs	r0, #2
   1350e:	7028      	strb	r0, [r5, #0]
   13510:	bd70      	pop	{r4, r5, r6, pc}
   13512:	4620      	mov	r0, r4
   13514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13518:	2101      	movs	r1, #1
   1351a:	f7ff bec1 	b.w	132a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   1351e:	0000      	.short	0x0000
   13520:	20001394 	.word	0x20001394
   13524:	200000fc 	.word	0x200000fc
   13528:	b510      	push	{r4, lr}
   1352a:	4c12      	ldr	r4, [pc, #72]	; (13574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
   1352c:	6820      	ldr	r0, [r4, #0]
   1352e:	f000 f825 	bl	1357c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
   13532:	6820      	ldr	r0, [r4, #0]
   13534:	f007 fc15 	bl	1ad62 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   13538:	2800      	cmp	r0, #0
   1353a:	6820      	ldr	r0, [r4, #0]
   1353c:	d00b      	beq.n	13556 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
   1353e:	490e      	ldr	r1, [pc, #56]	; (13578 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
   13540:	780a      	ldrb	r2, [r1, #0]
   13542:	2a02      	cmp	r2, #2
   13544:	d00b      	beq.n	1355e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
   13546:	780a      	ldrb	r2, [r1, #0]
   13548:	2a03      	cmp	r2, #3
   1354a:	d008      	beq.n	1355e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
   1354c:	f640 31fe 	movw	r1, #3070	; 0xbfe
   13550:	202d      	movs	r0, #45	; 0x2d
   13552:	f7fd f9b9 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1355a:	f000 ba15 	b.w	13988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   1355e:	68a2      	ldr	r2, [r4, #8]
   13560:	7809      	ldrb	r1, [r1, #0]
   13562:	68d2      	ldr	r2, [r2, #12]
   13564:	f06f 0307 	mvn.w	r3, #7
   13568:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1356c:	5851      	ldr	r1, [r2, r1]
   1356e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13572:	4708      	bx	r1
   13574:	200000fc 	.word	0x200000fc
   13578:	20001394 	.word	0x20001394
   1357c:	b510      	push	{r4, lr}
   1357e:	7b01      	ldrb	r1, [r0, #12]
   13580:	b109      	cbz	r1, 13586 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
   13582:	f007 fb34 	bl	1abee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
   13586:	4805      	ldr	r0, [pc, #20]	; (1359c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
   13588:	7b80      	ldrb	r0, [r0, #14]
   1358a:	2800      	cmp	r0, #0
   1358c:	d005      	beq.n	1359a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
   1358e:	f003 ff31 	bl	173f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   13592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13596:	f003 bd11 	b.w	16fbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   1359a:	bd10      	pop	{r4, pc}
   1359c:	20001394 	.word	0x20001394

000135a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
   135a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   135a4:	4d58      	ldr	r5, [pc, #352]	; (13708 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
   135a6:	4604      	mov	r4, r0
   135a8:	b088      	sub	sp, #32
   135aa:	7828      	ldrb	r0, [r5, #0]
   135ac:	bbf0      	cbnz	r0, 1362c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
   135ae:	7820      	ldrb	r0, [r4, #0]
   135b0:	28ff      	cmp	r0, #255	; 0xff
   135b2:	d03c      	beq.n	1362e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
   135b4:	2600      	movs	r6, #0
   135b6:	81ae      	strh	r6, [r5, #12]
   135b8:	606e      	str	r6, [r5, #4]
   135ba:	706e      	strb	r6, [r5, #1]
   135bc:	70ae      	strb	r6, [r5, #2]
   135be:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
   135c2:	4b52      	ldr	r3, [pc, #328]	; (1370c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
   135c4:	f8df 8148 	ldr.w	r8, [pc, #328]	; 13710 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
   135c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   135ca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   135ce:	f8d8 0008 	ldr.w	r0, [r8, #8]
   135d2:	6840      	ldr	r0, [r0, #4]
   135d4:	9003      	str	r0, [sp, #12]
   135d6:	4668      	mov	r0, sp
   135d8:	f004 f844 	bl	17664 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   135dc:	f004 f94c 	bl	17878 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   135e0:	f004 fbb8 	bl	17d54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
   135e4:	f003 ff06 	bl	173f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   135e8:	f003 fce8 	bl	16fbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   135ec:	4849      	ldr	r0, [pc, #292]	; (13714 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
   135ee:	f004 fa9d 	bl	17b2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   135f2:	4846      	ldr	r0, [pc, #280]	; (1370c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
   135f4:	1f00      	subs	r0, r0, #4
   135f6:	f004 faa3 	bl	17b40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   135fa:	f104 0020 	add.w	r0, r4, #32
   135fe:	4607      	mov	r7, r0
   13600:	f007 fb62 	bl	1acc8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   13604:	4638      	mov	r0, r7
   13606:	f007 fb24 	bl	1ac52 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   1360a:	4601      	mov	r1, r0
   1360c:	4620      	mov	r0, r4
   1360e:	f007 fae3 	bl	1abd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
   13612:	f994 000e 	ldrsb.w	r0, [r4, #14]
   13616:	f004 f9b5 	bl	17984 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   1361a:	7921      	ldrb	r1, [r4, #4]
   1361c:	2000      	movs	r0, #0
   1361e:	f003 ffa5 	bl	1756c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   13622:	60a8      	str	r0, [r5, #8]
   13624:	b138      	cbz	r0, 13636 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
   13626:	7ea0      	ldrb	r0, [r4, #26]
   13628:	b968      	cbnz	r0, 13646 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
   1362a:	e007      	b.n	1363c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
   1362c:	e7ff      	b.n	1362e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
   1362e:	200c      	movs	r0, #12
   13630:	b008      	add	sp, #32
   13632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13636:	2001      	movs	r0, #1
   13638:	7028      	strb	r0, [r5, #0]
   1363a:	e062      	b.n	13702 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
   1363c:	7e20      	ldrb	r0, [r4, #24]
   1363e:	b910      	cbnz	r0, 13646 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
   13640:	78a0      	ldrb	r0, [r4, #2]
   13642:	0740      	lsls	r0, r0, #29
   13644:	d529      	bpl.n	1369a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
   13646:	f005 f839 	bl	186bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1364a:	4682      	mov	sl, r0
   1364c:	4651      	mov	r1, sl
   1364e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   13650:	f7fa fd3c 	bl	e0cc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   13654:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 13718 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
   13658:	4607      	mov	r7, r0
   1365a:	fb90 f1f9 	sdiv	r1, r0, r9
   1365e:	fb09 7011 	mls	r0, r9, r1, r7
   13662:	4241      	negs	r1, r0
   13664:	4650      	mov	r0, sl
   13666:	f7fa fcff 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1366a:	6460      	str	r0, [r4, #68]	; 0x44
   1366c:	fb97 f0f9 	sdiv	r0, r7, r9
   13670:	6c21      	ldr	r1, [r4, #64]	; 0x40
   13672:	4408      	add	r0, r1
   13674:	6420      	str	r0, [r4, #64]	; 0x40
   13676:	f7fe fedf 	bl	12438 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   1367a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1367c:	4288      	cmp	r0, r1
   1367e:	d80c      	bhi.n	1369a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
   13680:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
   13684:	2101      	movs	r1, #1
   13686:	4620      	mov	r0, r4
   13688:	f007 fa6a 	bl	1ab60 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
   1368c:	78a0      	ldrb	r0, [r4, #2]
   1368e:	0740      	lsls	r0, r0, #29
   13690:	d503      	bpl.n	1369a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
   13692:	2101      	movs	r1, #1
   13694:	4620      	mov	r0, r4
   13696:	f000 fab1 	bl	13bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
   1369a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1369e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   136a0:	f006 faac 	bl	19bfc <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
   136a4:	f104 0138 	add.w	r1, r4, #56	; 0x38
   136a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   136aa:	f006 faaa 	bl	19c02 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
   136ae:	f7fe ff29 	bl	12504 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
   136b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   136b6:	1cc0      	adds	r0, r0, #3
   136b8:	f006 fb68 	bl	19d8c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
   136bc:	73a8      	strb	r0, [r5, #14]
   136be:	78a0      	ldrb	r0, [r4, #2]
   136c0:	07c0      	lsls	r0, r0, #31
   136c2:	d01e      	beq.n	13702 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
   136c4:	a904      	add	r1, sp, #16
   136c6:	2000      	movs	r0, #0
   136c8:	f006 f972 	bl	199b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   136cc:	b120      	cbz	r0, 136d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
   136ce:	f640 11c9 	movw	r1, #2505	; 0x9c9
   136d2:	202d      	movs	r0, #45	; 0x2d
   136d4:	f7fd f8f8 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   136d8:	20ff      	movs	r0, #255	; 0xff
   136da:	73e8      	strb	r0, [r5, #15]
   136dc:	e00c      	b.n	136f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
   136de:	9806      	ldr	r0, [sp, #24]
   136e0:	69e1      	ldr	r1, [r4, #28]
   136e2:	4281      	cmp	r1, r0
   136e4:	d008      	beq.n	136f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
   136e6:	7881      	ldrb	r1, [r0, #2]
   136e8:	73e9      	strb	r1, [r5, #15]
   136ea:	f8d0 1003 	ldr.w	r1, [r0, #3]
   136ee:	6129      	str	r1, [r5, #16]
   136f0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   136f4:	82a8      	strh	r0, [r5, #20]
   136f6:	e004      	b.n	13702 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
   136f8:	a804      	add	r0, sp, #16
   136fa:	f7fd fb1d 	bl	10d38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   136fe:	2800      	cmp	r0, #0
   13700:	d0ed      	beq.n	136de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
   13702:	2000      	movs	r0, #0
   13704:	e794      	b.n	13630 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
   13706:	0000      	.short	0x0000
   13708:	20001394 	.word	0x20001394
   1370c:	00013d10 	.word	0x00013d10
   13710:	200000fc 	.word	0x200000fc
   13714:	8e89bed6 	.word	0x8e89bed6
   13718:	000f4240 	.word	0x000f4240
   1371c:	b510      	push	{r4, lr}
   1371e:	4604      	mov	r4, r0
   13720:	f7ff ff3e 	bl	135a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   13724:	2800      	cmp	r0, #0
   13726:	d108      	bne.n	1373a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
   13728:	4804      	ldr	r0, [pc, #16]	; (1373c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
   1372a:	7800      	ldrb	r0, [r0, #0]
   1372c:	2801      	cmp	r0, #1
   1372e:	d003      	beq.n	13738 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
   13730:	2100      	movs	r1, #0
   13732:	4620      	mov	r0, r4
   13734:	f7ff fdb4 	bl	132a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   13738:	2000      	movs	r0, #0
   1373a:	bd10      	pop	{r4, pc}
   1373c:	20001394 	.word	0x20001394
   13740:	480a      	ldr	r0, [pc, #40]	; (1376c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
   13742:	b510      	push	{r4, lr}
   13744:	490a      	ldr	r1, [pc, #40]	; (13770 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
   13746:	6804      	ldr	r4, [r0, #0]
   13748:	7808      	ldrb	r0, [r1, #0]
   1374a:	2800      	cmp	r0, #0
   1374c:	d00d      	beq.n	1376a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
   1374e:	7808      	ldrb	r0, [r1, #0]
   13750:	2802      	cmp	r0, #2
   13752:	d002      	beq.n	1375a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
   13754:	7808      	ldrb	r0, [r1, #0]
   13756:	2803      	cmp	r0, #3
   13758:	d102      	bne.n	13760 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
   1375a:	4620      	mov	r0, r4
   1375c:	f7ff ff0e 	bl	1357c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
   13760:	4620      	mov	r0, r4
   13762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13766:	f000 b90f 	b.w	13988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
   1376a:	bd10      	pop	{r4, pc}
   1376c:	200000fc 	.word	0x200000fc
   13770:	20001394 	.word	0x20001394
   13774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13778:	4604      	mov	r4, r0
   1377a:	4827      	ldr	r0, [pc, #156]	; (13818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
   1377c:	460d      	mov	r5, r1
   1377e:	6840      	ldr	r0, [r0, #4]
   13780:	f004 f906 	bl	17990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13784:	4e25      	ldr	r6, [pc, #148]	; (1381c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
   13786:	2004      	movs	r0, #4
   13788:	7030      	strb	r0, [r6, #0]
   1378a:	b325      	cbz	r5, 137d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
   1378c:	8860      	ldrh	r0, [r4, #2]
   1378e:	2810      	cmp	r0, #16
   13790:	d02a      	beq.n	137e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
   13792:	f104 0020 	add.w	r0, r4, #32
   13796:	4680      	mov	r8, r0
   13798:	68b5      	ldr	r5, [r6, #8]
   1379a:	f007 fa4e 	bl	1ac3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   1379e:	4607      	mov	r7, r0
   137a0:	4640      	mov	r0, r8
   137a2:	f007 fa73 	bl	1ac8c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   137a6:	1a38      	subs	r0, r7, r0
   137a8:	1e40      	subs	r0, r0, #1
   137aa:	b2c0      	uxtb	r0, r0
   137ac:	8861      	ldrh	r1, [r4, #2]
   137ae:	2228      	movs	r2, #40	; 0x28
   137b0:	f000 faea 	bl	13d88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
   137b4:	4405      	add	r5, r0
   137b6:	78a0      	ldrb	r0, [r4, #2]
   137b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   137bc:	b130      	cbz	r0, 137cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
   137be:	6870      	ldr	r0, [r6, #4]
   137c0:	4405      	add	r5, r0
   137c2:	f007 fabc 	bl	1ad3e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
   137c6:	4428      	add	r0, r5
   137c8:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
   137cc:	7922      	ldrb	r2, [r4, #4]
   137ce:	4629      	mov	r1, r5
   137d0:	2000      	movs	r0, #0
   137d2:	f004 f8ed 	bl	179b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   137d6:	8860      	ldrh	r0, [r4, #2]
   137d8:	2813      	cmp	r0, #19
   137da:	d013      	beq.n	13804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
   137dc:	dc09      	bgt.n	137f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
   137de:	2810      	cmp	r0, #16
   137e0:	d017      	beq.n	13812 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
   137e2:	2812      	cmp	r0, #18
   137e4:	d109      	bne.n	137fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
   137e6:	e00d      	b.n	13804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
   137e8:	7921      	ldrb	r1, [r4, #4]
   137ea:	2000      	movs	r0, #0
   137ec:	f003 fe72 	bl	174d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
   137f0:	e7f1      	b.n	137d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
   137f2:	2815      	cmp	r0, #21
   137f4:	d006      	beq.n	13804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
   137f6:	281d      	cmp	r0, #29
   137f8:	d004      	beq.n	13804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
   137fa:	f640 5185 	movw	r1, #3461	; 0xd85
   137fe:	202d      	movs	r0, #45	; 0x2d
   13800:	f7fd f862 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13804:	7922      	ldrb	r2, [r4, #4]
   13806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1380a:	2101      	movs	r1, #1
   1380c:	2000      	movs	r0, #0
   1380e:	f004 b94b 	b.w	17aa8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   13812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13816:	0000      	.short	0x0000
   13818:	200000fc 	.word	0x200000fc
   1381c:	20001394 	.word	0x20001394
   13820:	b510      	push	{r4, lr}
   13822:	4604      	mov	r4, r0
   13824:	7800      	ldrb	r0, [r0, #0]
   13826:	460b      	mov	r3, r1
   13828:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
   1382c:	29ff      	cmp	r1, #255	; 0xff
   1382e:	d010      	beq.n	13852 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
   13830:	f104 0297 	add.w	r2, r4, #151	; 0x97
   13834:	1e51      	subs	r1, r2, #1
   13836:	4618      	mov	r0, r3
   13838:	f7fe fd7c 	bl	12334 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   1383c:	b130      	cbz	r0, 1384c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
   1383e:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
   13842:	f040 0002 	orr.w	r0, r0, #2
   13846:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
   1384a:	e011      	b.n	13870 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
   1384c:	f640 71bc 	movw	r1, #4028	; 0xfbc
   13850:	e020      	b.n	13894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
   13852:	4812      	ldr	r0, [pc, #72]	; (1389c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
   13854:	6840      	ldr	r0, [r0, #4]
   13856:	7801      	ldrb	r1, [r0, #0]
   13858:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1385c:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
   13860:	f8d0 1003 	ldr.w	r1, [r0, #3]
   13864:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
   13868:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   1386c:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
   13870:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   13874:	287f      	cmp	r0, #127	; 0x7f
   13876:	d00b      	beq.n	13890 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
   13878:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
   1387c:	207f      	movs	r0, #127	; 0x7f
   1387e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   13882:	347e      	adds	r4, #126	; 0x7e
   13884:	2001      	movs	r0, #1
   13886:	75a0      	strb	r0, [r4, #22]
   13888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1388c:	f7ff b9a8 	b.w	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   13890:	f640 6137 	movw	r1, #3639	; 0xe37
   13894:	202d      	movs	r0, #45	; 0x2d
   13896:	f7fd f817 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1389a:	0000      	.short	0x0000
   1389c:	200000fc 	.word	0x200000fc
   138a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   138a4:	4690      	mov	r8, r2
   138a6:	460e      	mov	r6, r1
   138a8:	4604      	mov	r4, r0
   138aa:	2903      	cmp	r1, #3
   138ac:	d004      	beq.n	138b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
   138ae:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
   138b2:	b108      	cbz	r0, 138b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
   138b4:	2001      	movs	r0, #1
   138b6:	e000      	b.n	138ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
   138b8:	2000      	movs	r0, #0
   138ba:	4681      	mov	r9, r0
   138bc:	f003 fdb4 	bl	17428 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
   138c0:	4605      	mov	r5, r0
   138c2:	2e03      	cmp	r6, #3
   138c4:	d003      	beq.n	138ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
   138c6:	2701      	movs	r7, #1
   138c8:	2e05      	cmp	r6, #5
   138ca:	d005      	beq.n	138d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
   138cc:	e008      	b.n	138e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
   138ce:	78a0      	ldrb	r0, [r4, #2]
   138d0:	2702      	movs	r7, #2
   138d2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   138d6:	e001      	b.n	138dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
   138d8:	78a0      	ldrb	r0, [r4, #2]
   138da:	07c0      	lsls	r0, r0, #31
   138dc:	2800      	cmp	r0, #0
   138de:	d04a      	beq.n	13976 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
   138e0:	f1b9 0f00 	cmp.w	r9, #0
   138e4:	d146      	bne.n	13974 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
   138e6:	4826      	ldr	r0, [pc, #152]	; (13980 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
   138e8:	7b80      	ldrb	r0, [r0, #14]
   138ea:	b140      	cbz	r0, 138fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
   138ec:	f006 fa51 	bl	19d92 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
   138f0:	f888 0000 	strb.w	r0, [r8]
   138f4:	28ff      	cmp	r0, #255	; 0xff
   138f6:	d002      	beq.n	138fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
   138f8:	f7fe fd36 	bl	12368 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
   138fc:	4305      	orrs	r5, r0
   138fe:	4e21      	ldr	r6, [pc, #132]	; (13984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
   13900:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
   13904:	6870      	ldr	r0, [r6, #4]
   13906:	7801      	ldrb	r1, [r0, #0]
   13908:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1390c:	4291      	cmp	r1, r2
   1390e:	d106      	bne.n	1391e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
   13910:	2206      	movs	r2, #6
   13912:	f104 0150 	add.w	r1, r4, #80	; 0x50
   13916:	1cc0      	adds	r0, r0, #3
   13918:	f005 f833 	bl	18982 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   1391c:	b130      	cbz	r0, 1392c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
   1391e:	2000      	movs	r0, #0
   13920:	f898 1000 	ldrb.w	r1, [r8]
   13924:	29ff      	cmp	r1, #255	; 0xff
   13926:	d007      	beq.n	13938 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
   13928:	b9a8      	cbnz	r0, 13956 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
   1392a:	e001      	b.n	13930 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
   1392c:	2001      	movs	r0, #1
   1392e:	e7f7      	b.n	13920 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
   13930:	7e60      	ldrb	r0, [r4, #25]
   13932:	4288      	cmp	r0, r1
   13934:	d00f      	beq.n	13956 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
   13936:	e008      	b.n	1394a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
   13938:	b138      	cbz	r0, 1394a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
   1393a:	6871      	ldr	r1, [r6, #4]
   1393c:	f811 0b03 	ldrb.w	r0, [r1], #3
   13940:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13944:	f007 f8ca 	bl	1aadc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
   13948:	b128      	cbz	r0, 13956 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
   1394a:	2000      	movs	r0, #0
   1394c:	78a1      	ldrb	r1, [r4, #2]
   1394e:	0749      	lsls	r1, r1, #29
   13950:	d503      	bpl.n	1395a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
   13952:	b990      	cbnz	r0, 1397a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
   13954:	e00e      	b.n	13974 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
   13956:	2001      	movs	r0, #1
   13958:	e7f8      	b.n	1394c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
   1395a:	b975      	cbnz	r5, 1397a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
   1395c:	7be0      	ldrb	r0, [r4, #15]
   1395e:	b108      	cbz	r0, 13964 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
   13960:	42b8      	cmp	r0, r7
   13962:	d107      	bne.n	13974 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
   13964:	6871      	ldr	r1, [r6, #4]
   13966:	f811 0b03 	ldrb.w	r0, [r1], #3
   1396a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1396e:	f007 f8b5 	bl	1aadc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
   13972:	b110      	cbz	r0, 1397a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
   13974:	2000      	movs	r0, #0
   13976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1397a:	2001      	movs	r0, #1
   1397c:	e7fb      	b.n	13976 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
   1397e:	0000      	.short	0x0000
   13980:	20001394 	.word	0x20001394
   13984:	200000fc 	.word	0x200000fc
   13988:	b570      	push	{r4, r5, r6, lr}
   1398a:	4604      	mov	r4, r0
   1398c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1398e:	4d13      	ldr	r5, [pc, #76]	; (139dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
   13990:	1c40      	adds	r0, r0, #1
   13992:	62a0      	str	r0, [r4, #40]	; 0x28
   13994:	7ba8      	ldrb	r0, [r5, #14]
   13996:	2600      	movs	r6, #0
   13998:	b120      	cbz	r0, 139a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
   1399a:	f003 fd2b 	bl	173f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   1399e:	f003 fb0d 	bl	16fbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   139a2:	73ae      	strb	r6, [r5, #14]
   139a4:	702e      	strb	r6, [r5, #0]
   139a6:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
   139aa:	b108      	cbz	r0, 139b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
   139ac:	2101      	movs	r1, #1
   139ae:	e00f      	b.n	139d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
   139b0:	7b60      	ldrb	r0, [r4, #13]
   139b2:	b160      	cbz	r0, 139ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
   139b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   139b6:	4288      	cmp	r0, r1
   139b8:	d809      	bhi.n	139ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
   139ba:	2101      	movs	r1, #1
   139bc:	4620      	mov	r0, r4
   139be:	f007 f9e5 	bl	1ad8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   139c2:	78a0      	ldrb	r0, [r4, #2]
   139c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   139c8:	07c0      	lsls	r0, r0, #31
   139ca:	f7ff b909 	b.w	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   139ce:	2100      	movs	r1, #0
   139d0:	4620      	mov	r0, r4
   139d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   139d6:	f007 b9d9 	b.w	1ad8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   139da:	0000      	.short	0x0000
   139dc:	20001394 	.word	0x20001394
   139e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   139e4:	4604      	mov	r4, r0
   139e6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
   139ea:	4617      	mov	r7, r2
   139ec:	460d      	mov	r5, r1
   139ee:	f88d 0000 	strb.w	r0, [sp]
   139f2:	9800      	ldr	r0, [sp, #0]
   139f4:	9000      	str	r0, [sp, #0]
   139f6:	f89d 0000 	ldrb.w	r0, [sp]
   139fa:	b110      	cbz	r0, 13a02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
   139fc:	f640 4132 	movw	r1, #3122	; 0xc32
   13a00:	e054      	b.n	13aac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
   13a02:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   13a06:	8828      	ldrh	r0, [r5, #0]
   13a08:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
   13a0c:	2b00      	cmp	r3, #0
   13a0e:	d15d      	bne.n	13acc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
   13a10:	68e8      	ldr	r0, [r5, #12]
   13a12:	f006 fa1c 	bl	19e4e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   13a16:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
   13a1a:	8aa8      	ldrh	r0, [r5, #20]
   13a1c:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
   13a20:	8ae8      	ldrh	r0, [r5, #22]
   13a22:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
   13a26:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
   13a2a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
   13a2e:	7e21      	ldrb	r1, [r4, #24]
   13a30:	f104 0849 	add.w	r8, r4, #73	; 0x49
   13a34:	2600      	movs	r6, #0
   13a36:	b129      	cbz	r1, 13a44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
   13a38:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   13a3c:	4641      	mov	r1, r8
   13a3e:	f006 ff65 	bl	1a90c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   13a42:	b940      	cbnz	r0, 13a56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
   13a44:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
   13a48:	b170      	cbz	r0, 13a68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
   13a4a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   13a4e:	4641      	mov	r1, r8
   13a50:	f006 ff53 	bl	1a8fa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
   13a54:	b140      	cbz	r0, 13a68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
   13a56:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
   13a5a:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
   13a5e:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
   13a62:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
   13a66:	e003      	b.n	13a70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
   13a68:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
   13a6c:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
   13a70:	4817      	ldr	r0, [pc, #92]	; (13ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>)
   13a72:	2fff      	cmp	r7, #255	; 0xff
   13a74:	6840      	ldr	r0, [r0, #4]
   13a76:	7801      	ldrb	r1, [r0, #0]
   13a78:	f3c1 1180 	ubfx	r1, r1, #6, #1
   13a7c:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
   13a80:	f850 1f03 	ldr.w	r1, [r0, #3]!
   13a84:	d015      	beq.n	13ab2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
   13a86:	67a1      	str	r1, [r4, #120]	; 0x78
   13a88:	8880      	ldrh	r0, [r0, #4]
   13a8a:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
   13a8e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   13a92:	1e51      	subs	r1, r2, #1
   13a94:	4638      	mov	r0, r7
   13a96:	f7fe fc4d 	bl	12334 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   13a9a:	b128      	cbz	r0, 13aa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
   13a9c:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
   13aa0:	f040 0002 	orr.w	r0, r0, #2
   13aa4:	7020      	strb	r0, [r4, #0]
   13aa6:	e00a      	b.n	13abe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
   13aa8:	f640 4153 	movw	r1, #3155	; 0xc53
   13aac:	202d      	movs	r0, #45	; 0x2d
   13aae:	f7fc ff0b 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13ab2:	f844 1f6c 	str.w	r1, [r4, #108]!
   13ab6:	8880      	ldrh	r0, [r0, #4]
   13ab8:	80a0      	strh	r0, [r4, #4]
   13aba:	60e6      	str	r6, [r4, #12]
   13abc:	8226      	strh	r6, [r4, #16]
   13abe:	8828      	ldrh	r0, [r5, #0]
   13ac0:	f7fd fb1c 	bl	110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   13ac4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ac8:	f005 be4f 	b.w	1976a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
   13acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13ad0:	200000fc 	.word	0x200000fc
   13ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ad8:	4604      	mov	r4, r0
   13ada:	20ff      	movs	r0, #255	; 0xff
   13adc:	f88d 0000 	strb.w	r0, [sp]
   13ae0:	2601      	movs	r6, #1
   13ae2:	466a      	mov	r2, sp
   13ae4:	2105      	movs	r1, #5
   13ae6:	4620      	mov	r0, r4
   13ae8:	f7ff feda 	bl	138a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
   13aec:	b3e8      	cbz	r0, 13b6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
   13aee:	4d24      	ldr	r5, [pc, #144]	; (13b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
   13af0:	4f24      	ldr	r7, [pc, #144]	; (13b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
   13af2:	46b0      	mov	r8, r6
   13af4:	6868      	ldr	r0, [r5, #4]
   13af6:	7bfa      	ldrb	r2, [r7, #15]
   13af8:	f04f 0900 	mov.w	r9, #0
   13afc:	7801      	ldrb	r1, [r0, #0]
   13afe:	f3c1 1180 	ubfx	r1, r1, #6, #1
   13b02:	4291      	cmp	r1, r2
   13b04:	d106      	bne.n	13b14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
   13b06:	2206      	movs	r2, #6
   13b08:	f107 0110 	add.w	r1, r7, #16
   13b0c:	1cc0      	adds	r0, r0, #3
   13b0e:	f004 ff38 	bl	18982 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
   13b12:	b350      	cbz	r0, 13b6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
   13b14:	686a      	ldr	r2, [r5, #4]
   13b16:	69e0      	ldr	r0, [r4, #28]
   13b18:	7812      	ldrb	r2, [r2, #0]
   13b1a:	f810 1f85 	ldrb.w	r1, [r0, #133]!
   13b1e:	f3c2 1240 	ubfx	r2, r2, #5, #1
   13b22:	4011      	ands	r1, r2
   13b24:	7001      	strb	r1, [r0, #0]
   13b26:	2201      	movs	r2, #1
   13b28:	4620      	mov	r0, r4
   13b2a:	69e1      	ldr	r1, [r4, #28]
   13b2c:	f000 f894 	bl	13c58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
   13b30:	2300      	movs	r3, #0
   13b32:	f89d 2000 	ldrb.w	r2, [sp]
   13b36:	4620      	mov	r0, r4
   13b38:	69e1      	ldr	r1, [r4, #28]
   13b3a:	f7ff ff51 	bl	139e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
   13b3e:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
   13b42:	f7ff f84d 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   13b46:	f887 9000 	strb.w	r9, [r7]
   13b4a:	2200      	movs	r2, #0
   13b4c:	4621      	mov	r1, r4
   13b4e:	69e0      	ldr	r0, [r4, #28]
   13b50:	f000 fa58 	bl	14004 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   13b54:	6868      	ldr	r0, [r5, #4]
   13b56:	69e1      	ldr	r1, [r4, #28]
   13b58:	f8d0 2003 	ldr.w	r2, [r0, #3]
   13b5c:	f841 2f03 	str.w	r2, [r1, #3]!
   13b60:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   13b64:	808a      	strh	r2, [r1, #4]
   13b66:	7800      	ldrb	r0, [r0, #0]
   13b68:	e000      	b.n	13b6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
   13b6a:	e004      	b.n	13b76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
   13b6c:	69e1      	ldr	r1, [r4, #28]
   13b6e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13b72:	7088      	strb	r0, [r1, #2]
   13b74:	e000      	b.n	13b78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
   13b76:	2600      	movs	r6, #0
   13b78:	4630      	mov	r0, r6
   13b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13b7e:	0000      	.short	0x0000
   13b80:	200000fc 	.word	0x200000fc
   13b84:	20001394 	.word	0x20001394
   13b88:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   13b8a:	4604      	mov	r4, r0
   13b8c:	20ff      	movs	r0, #255	; 0xff
   13b8e:	f88d 0000 	strb.w	r0, [sp]
   13b92:	2501      	movs	r5, #1
   13b94:	466a      	mov	r2, sp
   13b96:	2103      	movs	r1, #3
   13b98:	4620      	mov	r0, r4
   13b9a:	f7ff fe81 	bl	138a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
   13b9e:	b328      	cbz	r0, 13bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
   13ba0:	7b20      	ldrb	r0, [r4, #12]
   13ba2:	b168      	cbz	r0, 13bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
   13ba4:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
   13ba8:	f88d 0004 	strb.w	r0, [sp, #4]
   13bac:	9801      	ldr	r0, [sp, #4]
   13bae:	9001      	str	r0, [sp, #4]
   13bb0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13bb4:	b920      	cbnz	r0, 13bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
   13bb6:	f89d 1000 	ldrb.w	r1, [sp]
   13bba:	4620      	mov	r0, r4
   13bbc:	f7ff fe30 	bl	13820 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
   13bc0:	4e0c      	ldr	r6, [pc, #48]	; (13bf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
   13bc2:	2100      	movs	r1, #0
   13bc4:	6870      	ldr	r0, [r6, #4]
   13bc6:	8001      	strh	r1, [r0, #0]
   13bc8:	2104      	movs	r1, #4
   13bca:	f006 fc5f 	bl	1a48c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
   13bce:	4620      	mov	r0, r4
   13bd0:	f000 f88a 	bl	13ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
   13bd4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   13bd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   13bd8:	6870      	ldr	r0, [r6, #4]
   13bda:	f006 fc8e 	bl	1a4fa <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
   13bde:	4906      	ldr	r1, [pc, #24]	; (13bf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
   13be0:	2005      	movs	r0, #5
   13be2:	7008      	strb	r0, [r1, #0]
   13be4:	6870      	ldr	r0, [r6, #4]
   13be6:	f003 fed3 	bl	17990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13bea:	e000      	b.n	13bee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
   13bec:	2500      	movs	r5, #0
   13bee:	4628      	mov	r0, r5
   13bf0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   13bf2:	0000      	.short	0x0000
   13bf4:	200000fc 	.word	0x200000fc
   13bf8:	20001394 	.word	0x20001394
   13bfc:	b570      	push	{r4, r5, r6, lr}
   13bfe:	4604      	mov	r4, r0
   13c00:	460e      	mov	r6, r1
   13c02:	7e40      	ldrb	r0, [r0, #25]
   13c04:	f7fe fb64 	bl	122d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   13c08:	0005      	movs	r5, r0
   13c0a:	d019      	beq.n	13c40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
   13c0c:	2110      	movs	r1, #16
   13c0e:	f006 faaa 	bl	1a166 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   13c12:	2800      	cmp	r0, #0
   13c14:	d114      	bne.n	13c40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
   13c16:	2001      	movs	r0, #1
   13c18:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
   13c1c:	f104 0157 	add.w	r1, r4, #87	; 0x57
   13c20:	4632      	mov	r2, r6
   13c22:	460c      	mov	r4, r1
   13c24:	4628      	mov	r0, r5
   13c26:	f006 f856 	bl	19cd6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   13c2a:	4621      	mov	r1, r4
   13c2c:	4c05      	ldr	r4, [pc, #20]	; (13c44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
   13c2e:	6860      	ldr	r0, [r4, #4]
   13c30:	f006 fc47 	bl	1a4c2 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
   13c34:	6860      	ldr	r0, [r4, #4]
   13c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13c3a:	2101      	movs	r1, #1
   13c3c:	f006 bc47 	b.w	1a4ce <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
   13c40:	bd70      	pop	{r4, r5, r6, pc}
   13c42:	0000      	.short	0x0000
   13c44:	200000fc 	.word	0x200000fc
   13c48:	4802      	ldr	r0, [pc, #8]	; (13c54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
   13c4a:	2101      	movs	r1, #1
   13c4c:	6800      	ldr	r0, [r0, #0]
   13c4e:	f7ff bb27 	b.w	132a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   13c52:	0000      	.short	0x0000
   13c54:	200000fc 	.word	0x200000fc
   13c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c5c:	4e21      	ldr	r6, [pc, #132]	; (13ce4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>)
   13c5e:	4680      	mov	r8, r0
   13c60:	460c      	mov	r4, r1
   13c62:	6870      	ldr	r0, [r6, #4]
   13c64:	4615      	mov	r5, r2
   13c66:	f850 1f0f 	ldr.w	r1, [r0, #15]!
   13c6a:	6121      	str	r1, [r4, #16]
   13c6c:	8881      	ldrh	r1, [r0, #4]
   13c6e:	8321      	strh	r1, [r4, #24]
   13c70:	7981      	ldrb	r1, [r0, #6]
   13c72:	76a1      	strb	r1, [r4, #26]
   13c74:	8940      	ldrh	r0, [r0, #10]
   13c76:	f006 f8e6 	bl	19e46 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   13c7a:	4607      	mov	r7, r0
   13c7c:	60e0      	str	r0, [r4, #12]
   13c7e:	6870      	ldr	r0, [r6, #4]
   13c80:	4639      	mov	r1, r7
   13c82:	7d80      	ldrb	r0, [r0, #22]
   13c84:	f006 fa6a 	bl	1a15c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   13c88:	83a0      	strh	r0, [r4, #28]
   13c8a:	6870      	ldr	r0, [r6, #4]
   13c8c:	4639      	mov	r1, r7
   13c8e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
   13c92:	f006 fa5f 	bl	1a154 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   13c96:	6220      	str	r0, [r4, #32]
   13c98:	6870      	ldr	r0, [r6, #4]
   13c9a:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
   13c9e:	82a1      	strh	r1, [r4, #20]
   13ca0:	8841      	ldrh	r1, [r0, #2]
   13ca2:	82e1      	strh	r1, [r4, #22]
   13ca4:	6841      	ldr	r1, [r0, #4]
   13ca6:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
   13caa:	7a01      	ldrb	r1, [r0, #8]
   13cac:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
   13cb0:	7a41      	ldrb	r1, [r0, #9]
   13cb2:	f001 011f 	and.w	r1, r1, #31
   13cb6:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
   13cba:	7a40      	ldrb	r0, [r0, #9]
   13cbc:	0940      	lsrs	r0, r0, #5
   13cbe:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
   13cc2:	f104 0062 	add.w	r0, r4, #98	; 0x62
   13cc6:	7205      	strb	r5, [r0, #8]
   13cc8:	7245      	strb	r5, [r0, #9]
   13cca:	2101      	movs	r1, #1
   13ccc:	7281      	strb	r1, [r0, #10]
   13cce:	2100      	movs	r1, #0
   13cd0:	3836      	subs	r0, #54	; 0x36
   13cd2:	f006 fd86 	bl	1a7e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
   13cd6:	f898 000e 	ldrb.w	r0, [r8, #14]
   13cda:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
   13cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ce2:	0000      	.short	0x0000
   13ce4:	200000fc 	.word	0x200000fc
   13ce8:	b570      	push	{r4, r5, r6, lr}
   13cea:	4d07      	ldr	r5, [pc, #28]	; (13d08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
   13cec:	4604      	mov	r4, r0
   13cee:	f100 0149 	add.w	r1, r0, #73	; 0x49
   13cf2:	6868      	ldr	r0, [r5, #4]
   13cf4:	f006 fbf2 	bl	1a4dc <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
   13cf8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   13cfc:	6868      	ldr	r0, [r5, #4]
   13cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13d02:	f006 bbf1 	b.w	1a4e8 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
   13d06:	0000      	.short	0x0000
   13d08:	200000fc 	.word	0x200000fc
   13d0c:	00555555 	.word	0x00555555
   13d10:	00013529 	.word	0x00013529
   13d14:	000133b5 	.word	0x000133b5
   13d18:	000134a5 	.word	0x000134a5
   13d1c:	00000000 	.word	0x00000000
   13d20:	0001347d 	.word	0x0001347d
   13d24:	000134d5 	.word	0x000134d5
   13d28:	0001ab03 	.word	0x0001ab03
   13d2c:	0001ab09 	.word	0x0001ab09
   13d30:	0001371d 	.word	0x0001371d
   13d34:	00013741 	.word	0x00013741
   13d38:	00013c49 	.word	0x00013c49
   13d3c:	00013d2c 	.word	0x00013d2c
   13d40:	00013d24 	.word	0x00013d24
   13d44:	00013d20 	.word	0x00013d20

00013d48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
   13d48:	b510      	push	{r4, lr}
   13d4a:	1e42      	subs	r2, r0, #1
   13d4c:	2a02      	cmp	r2, #2
   13d4e:	d901      	bls.n	13d54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
   13d50:	21ca      	movs	r1, #202	; 0xca
   13d52:	e009      	b.n	13d68 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
   13d54:	1e40      	subs	r0, r0, #1
   13d56:	2910      	cmp	r1, #16
   13d58:	d009      	beq.n	13d6e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
   13d5a:	2912      	cmp	r1, #18
   13d5c:	d00c      	beq.n	13d78 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
   13d5e:	2913      	cmp	r1, #19
   13d60:	d00a      	beq.n	13d78 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
   13d62:	2915      	cmp	r1, #21
   13d64:	d005      	beq.n	13d72 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
   13d66:	21d8      	movs	r1, #216	; 0xd8
   13d68:	202f      	movs	r0, #47	; 0x2f
   13d6a:	f7fc fdad 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13d6e:	4905      	ldr	r1, [pc, #20]	; (13d84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   13d70:	e004      	b.n	13d7c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
   13d72:	4904      	ldr	r1, [pc, #16]	; (13d84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   13d74:	1d89      	adds	r1, r1, #6
   13d76:	e001      	b.n	13d7c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
   13d78:	4902      	ldr	r1, [pc, #8]	; (13d84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   13d7a:	1f89      	subs	r1, r1, #6
   13d7c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   13d80:	bd10      	pop	{r4, pc}
   13d82:	0000      	.short	0x0000
   13d84:	0001ad56 	.word	0x0001ad56

00013d88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
   13d88:	1e42      	subs	r2, r0, #1
   13d8a:	b510      	push	{r4, lr}
   13d8c:	b2d2      	uxtb	r2, r2
   13d8e:	2a01      	cmp	r2, #1
   13d90:	d903      	bls.n	13d9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
   13d92:	291d      	cmp	r1, #29
   13d94:	d001      	beq.n	13d9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
   13d96:	21ee      	movs	r1, #238	; 0xee
   13d98:	e00d      	b.n	13db6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
   13d9a:	2913      	cmp	r1, #19
   13d9c:	d013      	beq.n	13dc6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
   13d9e:	dc04      	bgt.n	13daa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
   13da0:	2910      	cmp	r1, #16
   13da2:	d00b      	beq.n	13dbc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
   13da4:	2912      	cmp	r1, #18
   13da6:	d104      	bne.n	13db2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
   13da8:	e00d      	b.n	13dc6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
   13daa:	2915      	cmp	r1, #21
   13dac:	d008      	beq.n	13dc0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
   13dae:	291d      	cmp	r1, #29
   13db0:	d00e      	beq.n	13dd0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
   13db2:	f44f 7181 	mov.w	r1, #258	; 0x102
   13db6:	202f      	movs	r0, #47	; 0x2f
   13db8:	f7fc fd86 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13dbc:	4807      	ldr	r0, [pc, #28]	; (13ddc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   13dbe:	e004      	b.n	13dca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
   13dc0:	4806      	ldr	r0, [pc, #24]	; (13ddc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   13dc2:	3008      	adds	r0, #8
   13dc4:	e001      	b.n	13dca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
   13dc6:	4805      	ldr	r0, [pc, #20]	; (13ddc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   13dc8:	1d00      	adds	r0, r0, #4
   13dca:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   13dce:	bd10      	pop	{r4, pc}
   13dd0:	f240 315a 	movw	r1, #858	; 0x35a
   13dd4:	fb10 f001 	smulbb	r0, r0, r1
   13dd8:	bd10      	pop	{r4, pc}
   13dda:	0000      	.short	0x0000
   13ddc:	0001ad44 	.word	0x0001ad44

00013de0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
   13de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13de4:	4604      	mov	r4, r0
   13de6:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   13dea:	4615      	mov	r5, r2
   13dec:	460f      	mov	r7, r1
   13dee:	2800      	cmp	r0, #0
   13df0:	d157      	bne.n	13ea2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
   13df2:	4621      	mov	r1, r4
   13df4:	4841      	ldr	r0, [pc, #260]	; (13efc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
   13df6:	f7fb f83b 	bl	ee70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   13dfa:	4606      	mov	r6, r0
   13dfc:	2820      	cmp	r0, #32
   13dfe:	d050      	beq.n	13ea2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
   13e00:	2234      	movs	r2, #52	; 0x34
   13e02:	2100      	movs	r1, #0
   13e04:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   13e08:	f004 fe47 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   13e0c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
   13e10:	2601      	movs	r6, #1
   13e12:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
   13e16:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
   13e1a:	b13f      	cbz	r7, 13e2c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
   13e1c:	2000      	movs	r0, #0
   13e1e:	f000 fbf9 	bl	14614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
   13e22:	f000 0007 	and.w	r0, r0, #7
   13e26:	1c40      	adds	r0, r0, #1
   13e28:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
   13e2c:	4620      	mov	r0, r4
   13e2e:	f007 f972 	bl	1b116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
   13e32:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
   13e36:	2003      	movs	r0, #3
   13e38:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
   13e3c:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
   13e40:	2700      	movs	r7, #0
   13e42:	f804 7fb8 	strb.w	r7, [r4, #184]!
   13e46:	f7fa fa7f 	bl	e348 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   13e4a:	8921      	ldrh	r1, [r4, #8]
   13e4c:	3cb8      	subs	r4, #184	; 0xb8
   13e4e:	4288      	cmp	r0, r1
   13e50:	d800      	bhi.n	13e54 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
   13e52:	4608      	mov	r0, r1
   13e54:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
   13e58:	fa1f f880 	uxth.w	r8, r0
   13e5c:	4620      	mov	r0, r4
   13e5e:	f006 fdfd 	bl	1aa5c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   13e62:	b308      	cbz	r0, 13ea8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
   13e64:	f008 fbb9 	bl	1c5da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   13e68:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
   13e6c:	b281      	uxth	r1, r0
   13e6e:	4628      	mov	r0, r5
   13e70:	f004 fc58 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13e74:	4428      	add	r0, r5
   13e76:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   13e7a:	34a4      	adds	r4, #164	; 0xa4
   13e7c:	f004 fc1e 	bl	186bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   13e80:	4641      	mov	r1, r8
   13e82:	f7fa f8f1 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   13e86:	6220      	str	r0, [r4, #32]
   13e88:	f804 7c03 	strb.w	r7, [r4, #-3]
   13e8c:	7126      	strb	r6, [r4, #4]
   13e8e:	2001      	movs	r0, #1
   13e90:	f006 ff51 	bl	1ad36 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   13e94:	f200 1009 	addw	r0, r0, #265	; 0x109
   13e98:	1a28      	subs	r0, r5, r0
   13e9a:	62a7      	str	r7, [r4, #40]	; 0x28
   13e9c:	60a0      	str	r0, [r4, #8]
   13e9e:	3ca4      	subs	r4, #164	; 0xa4
   13ea0:	e017      	b.n	13ed2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
   13ea2:	200c      	movs	r0, #12
   13ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ea8:	4620      	mov	r0, r4
   13eaa:	f007 f887 	bl	1afbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   13eae:	f844 0fbc 	str.w	r0, [r4, #188]!
   13eb2:	f804 6c1b 	strb.w	r6, [r4, #-27]
   13eb6:	f004 fc01 	bl	186bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   13eba:	4606      	mov	r6, r0
   13ebc:	2000      	movs	r0, #0
   13ebe:	f007 f9d6 	bl	1b26e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
   13ec2:	eb00 0108 	add.w	r1, r0, r8
   13ec6:	4630      	mov	r0, r6
   13ec8:	f7fa f8ce 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   13ecc:	6125      	str	r5, [r4, #16]
   13ece:	60a0      	str	r0, [r4, #8]
   13ed0:	3cbc      	subs	r4, #188	; 0xbc
   13ed2:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
   13ed6:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
   13eda:	f007 f91a 	bl	1b112 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
   13ede:	b138      	cbz	r0, 13ef0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
   13ee0:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
   13ee4:	2100      	movs	r1, #0
   13ee6:	4620      	mov	r0, r4
   13ee8:	f006 fdda 	bl	1aaa0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   13eec:	2000      	movs	r0, #0
   13eee:	e7d9      	b.n	13ea4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
   13ef0:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
   13ef4:	2030      	movs	r0, #48	; 0x30
   13ef6:	f7fc fce7 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13efa:	0000      	.short	0x0000
   13efc:	0001b283 	.word	0x0001b283

00013f00 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
   13f00:	4808      	ldr	r0, [pc, #32]	; (13f24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
   13f02:	b510      	push	{r4, lr}
   13f04:	2100      	movs	r1, #0
   13f06:	7001      	strb	r1, [r0, #0]
   13f08:	2201      	movs	r2, #1
   13f0a:	7082      	strb	r2, [r0, #2]
   13f0c:	7041      	strb	r1, [r0, #1]
   13f0e:	3018      	adds	r0, #24
   13f10:	f006 fce6 	bl	1a8e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
   13f14:	4803      	ldr	r0, [pc, #12]	; (13f24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
   13f16:	3020      	adds	r0, #32
   13f18:	f006 fce2 	bl	1a8e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
   13f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13f20:	f006 bf74 	b.w	1ae0c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   13f24:	2000010c 	.word	0x2000010c

00013f28 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
   13f28:	4901      	ldr	r1, [pc, #4]	; (13f30 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
   13f2a:	7008      	strb	r0, [r1, #0]
   13f2c:	4770      	bx	lr
   13f2e:	0000      	.short	0x0000
   13f30:	2000010c 	.word	0x2000010c

00013f34 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
   13f34:	4905      	ldr	r1, [pc, #20]	; (13f4c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
   13f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13f3a:	fbb1 f1f2 	udiv	r1, r1, r2
   13f3e:	b510      	push	{r4, lr}
   13f40:	f201 2191 	addw	r1, r1, #657	; 0x291
   13f44:	f006 fc66 	bl	1a814 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
   13f48:	b280      	uxth	r0, r0
   13f4a:	bd10      	pop	{r4, pc}
   13f4c:	0001527d 	.word	0x0001527d

00013f50 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
   13f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f54:	4c10      	ldr	r4, [pc, #64]	; (13f98 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
   13f56:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
   13f5a:	f003 fc17 	bl	1778c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   13f5e:	4606      	mov	r6, r0
   13f60:	7820      	ldrb	r0, [r4, #0]
   13f62:	b128      	cbz	r0, 13f70 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
   13f64:	4632      	mov	r2, r6
   13f66:	4639      	mov	r1, r7
   13f68:	4628      	mov	r0, r5
   13f6a:	f005 ff76 	bl	19e5a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
   13f6e:	4605      	mov	r5, r0
   13f70:	6860      	ldr	r0, [r4, #4]
   13f72:	4285      	cmp	r5, r0
   13f74:	d005      	beq.n	13f82 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
   13f76:	68e1      	ldr	r1, [r4, #12]
   13f78:	1a28      	subs	r0, r5, r0
   13f7a:	4408      	add	r0, r1
   13f7c:	60e0      	str	r0, [r4, #12]
   13f7e:	f7fb f881 	bl	f084 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   13f82:	6065      	str	r5, [r4, #4]
   13f84:	42ae      	cmp	r6, r5
   13f86:	d801      	bhi.n	13f8c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
   13f88:	7860      	ldrb	r0, [r4, #1]
   13f8a:	b110      	cbz	r0, 13f92 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
   13f8c:	2000      	movs	r0, #0
   13f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f92:	2001      	movs	r0, #1
   13f94:	e7fb      	b.n	13f8e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
   13f96:	0000      	.short	0x0000
   13f98:	2000010c 	.word	0x2000010c

00013f9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
   13f9c:	b510      	push	{r4, lr}
   13f9e:	4604      	mov	r4, r0
   13fa0:	2905      	cmp	r1, #5
   13fa2:	d227      	bcs.n	13ff4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
   13fa4:	e8df f001 	tbb	[pc, r1]
   13fa8:	0e030b05 	.word	0x0e030b05
   13fac:	000f      	.short	0x000f
   13fae:	2100      	movs	r1, #0
   13fb0:	e000      	b.n	13fb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
   13fb2:	2101      	movs	r1, #1
   13fb4:	4620      	mov	r0, r4
   13fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13fba:	f000 b8f5 	b.w	141a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
   13fbe:	2003      	movs	r0, #3
   13fc0:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   13fc4:	bd10      	pop	{r4, pc}
   13fc6:	f003 fc1d 	bl	17804 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
   13fca:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
   13fce:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   13fd2:	f008 fb9b 	bl	1c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13fd6:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   13fda:	1a09      	subs	r1, r1, r0
   13fdc:	4808      	ldr	r0, [pc, #32]	; (14000 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
   13fde:	6842      	ldr	r2, [r0, #4]
   13fe0:	440a      	add	r2, r1
   13fe2:	6042      	str	r2, [r0, #4]
   13fe4:	6882      	ldr	r2, [r0, #8]
   13fe6:	4411      	add	r1, r2
   13fe8:	6081      	str	r1, [r0, #8]
   13fea:	4620      	mov	r0, r4
   13fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ff0:	f007 b822 	b.w	1b038 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
   13ff4:	f240 7151 	movw	r1, #1873	; 0x751
   13ff8:	2030      	movs	r0, #48	; 0x30
   13ffa:	f7fc fc65 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13ffe:	0000      	.short	0x0000
   14000:	2000010c 	.word	0x2000010c

00014004 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
   14004:	b570      	push	{r4, r5, r6, lr}
   14006:	460c      	mov	r4, r1
   14008:	4605      	mov	r5, r0
   1400a:	b112      	cbz	r2, 14012 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
   1400c:	f240 717b 	movw	r1, #1915	; 0x77b
   14010:	e010      	b.n	14034 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
   14012:	f003 fbbb 	bl	1778c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   14016:	4601      	mov	r1, r0
   14018:	2200      	movs	r2, #0
   1401a:	4620      	mov	r0, r4
   1401c:	f007 f8dd 	bl	1b1da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
   14020:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
   14024:	462a      	mov	r2, r5
   14026:	4905      	ldr	r1, [pc, #20]	; (1403c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
   14028:	f7fa fde4 	bl	ebf4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
   1402c:	2800      	cmp	r0, #0
   1402e:	d104      	bne.n	1403a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
   14030:	f240 7164 	movw	r1, #1892	; 0x764
   14034:	2030      	movs	r0, #48	; 0x30
   14036:	f7fc fc47 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1403a:	bd70      	pop	{r4, r5, r6, pc}
   1403c:	0001b323 	.word	0x0001b323
   14040:	b510      	push	{r4, lr}
   14042:	280c      	cmp	r0, #12
   14044:	d304      	bcc.n	14050 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
   14046:	f240 3116 	movw	r1, #790	; 0x316
   1404a:	2006      	movs	r0, #6
   1404c:	f7fc fc3c 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14050:	4901      	ldr	r1, [pc, #4]	; (14058 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
   14052:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   14056:	bd10      	pop	{r4, pc}
   14058:	0001b51c 	.word	0x0001b51c
   1405c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1405e:	4c18      	ldr	r4, [pc, #96]	; (140c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
   14060:	2001      	movs	r0, #1
   14062:	7060      	strb	r0, [r4, #1]
   14064:	f64f 75ff 	movw	r5, #65535	; 0xffff
   14068:	e00b      	b.n	14082 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
   1406a:	2100      	movs	r1, #0
   1406c:	f005 fc96 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   14070:	0006      	movs	r6, r0
   14072:	d010      	beq.n	14096 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
   14074:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
   14078:	f7fa fdee 	bl	ec58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   1407c:	4630      	mov	r0, r6
   1407e:	f007 f89f 	bl	1b1c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
   14082:	4669      	mov	r1, sp
   14084:	2000      	movs	r0, #0
   14086:	f005 fc93 	bl	199b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1408a:	b180      	cbz	r0, 140ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
   1408c:	f44f 7187 	mov.w	r1, #270	; 0x10e
   14090:	2030      	movs	r0, #48	; 0x30
   14092:	f7fc fc19 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14096:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1409a:	e7f9      	b.n	14090 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
   1409c:	9802      	ldr	r0, [sp, #8]
   1409e:	b130      	cbz	r0, 140ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
   140a0:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
   140a4:	b119      	cbz	r1, 140ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
   140a6:	8800      	ldrh	r0, [r0, #0]
   140a8:	42a8      	cmp	r0, r5
   140aa:	d1de      	bne.n	1406a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
   140ac:	e004      	b.n	140b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
   140ae:	4668      	mov	r0, sp
   140b0:	f7fc fe42 	bl	10d38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   140b4:	2800      	cmp	r0, #0
   140b6:	d0f1      	beq.n	1409c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
   140b8:	2000      	movs	r0, #0
   140ba:	7060      	strb	r0, [r4, #1]
   140bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   140be:	0000      	.short	0x0000
   140c0:	2000010c 	.word	0x2000010c
   140c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   140c8:	4604      	mov	r4, r0
   140ca:	4836      	ldr	r0, [pc, #216]	; (141a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
   140cc:	461e      	mov	r6, r3
   140ce:	4690      	mov	r8, r2
   140d0:	7880      	ldrb	r0, [r0, #2]
   140d2:	4689      	mov	r9, r1
   140d4:	2500      	movs	r5, #0
   140d6:	b368      	cbz	r0, 14134 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   140d8:	f7fc f876 	bl	101c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   140dc:	b350      	cbz	r0, 14134 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   140de:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
   140e2:	2802      	cmp	r0, #2
   140e4:	d326      	bcc.n	14134 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   140e6:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   140ea:	2802      	cmp	r0, #2
   140ec:	d022      	beq.n	14134 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   140ee:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
   140f2:	b9f8      	cbnz	r0, 14134 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
   140f4:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   140f8:	f7ff ffa2 	bl	14040 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   140fc:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   14100:	b281      	uxth	r1, r0
   14102:	8031      	strh	r1, [r6, #0]
   14104:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   14108:	2700      	movs	r7, #0
   1410a:	2801      	cmp	r0, #1
   1410c:	d015      	beq.n	1413a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
   1410e:	68e0      	ldr	r0, [r4, #12]
   14110:	f004 fb08 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   14114:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
   14118:	b280      	uxth	r0, r0
   1411a:	4442      	add	r2, r8
   1411c:	eba2 0109 	sub.w	r1, r2, r9
   14120:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
   14124:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
   14128:	1a82      	subs	r2, r0, r2
   1412a:	fb01 7502 	mla	r5, r1, r2, r7
   1412e:	2001      	movs	r0, #1
   14130:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
   14134:	4628      	mov	r0, r5
   14136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1413a:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
   1413e:	2803      	cmp	r0, #3
   14140:	d02c      	beq.n	1419c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
   14142:	2101      	movs	r1, #1
   14144:	2000      	movs	r0, #0
   14146:	f005 ff42 	bl	19fce <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   1414a:	6a21      	ldr	r1, [r4, #32]
   1414c:	1847      	adds	r7, r0, r1
   1414e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   14152:	8831      	ldrh	r1, [r6, #0]
   14154:	34d0      	adds	r4, #208	; 0xd0
   14156:	f004 fae5 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1415a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1415c:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1415e:	1a82      	subs	r2, r0, r2
   14160:	fb01 5502 	mla	r5, r1, r2, r5
   14164:	65a0      	str	r0, [r4, #88]	; 0x58
   14166:	8831      	ldrh	r1, [r6, #0]
   14168:	4638      	mov	r0, r7
   1416a:	f004 fadb 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1416e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   14170:	66a0      	str	r0, [r4, #104]	; 0x68
   14172:	1a41      	subs	r1, r0, r1
   14174:	440d      	add	r5, r1
   14176:	8831      	ldrh	r1, [r6, #0]
   14178:	f854 0cc4 	ldr.w	r0, [r4, #-196]
   1417c:	f004 fad2 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   14180:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   14182:	4442      	add	r2, r8
   14184:	eba2 0109 	sub.w	r1, r2, r9
   14188:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1418a:	1a89      	subs	r1, r1, r2
   1418c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   1418e:	1e49      	subs	r1, r1, #1
   14190:	1a82      	subs	r2, r0, r2
   14192:	fb01 5502 	mla	r5, r1, r2, r5
   14196:	66e0      	str	r0, [r4, #108]	; 0x6c
   14198:	3cd0      	subs	r4, #208	; 0xd0
   1419a:	e7c8      	b.n	1412e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
   1419c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   141a0:	e7d3      	b.n	1414a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
   141a2:	0000      	.short	0x0000
   141a4:	2000010c 	.word	0x2000010c
   141a8:	b538      	push	{r3, r4, r5, lr}
   141aa:	2500      	movs	r5, #0
   141ac:	4604      	mov	r4, r0
   141ae:	2901      	cmp	r1, #1
   141b0:	d102      	bne.n	141b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
   141b2:	4811      	ldr	r0, [pc, #68]	; (141f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
   141b4:	7840      	ldrb	r0, [r0, #1]
   141b6:	b178      	cbz	r0, 141d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
   141b8:	2004      	movs	r0, #4
   141ba:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   141be:	bf00      	nop
   141c0:	f006 ff33 	bl	1b02a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
   141c4:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
   141c8:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
   141cc:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   141d0:	f504 7495 	add.w	r4, r4, #298	; 0x12a
   141d4:	77e5      	strb	r5, [r4, #31]
   141d6:	bd38      	pop	{r3, r4, r5, pc}
   141d8:	9500      	str	r5, [sp, #0]
   141da:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
   141de:	2301      	movs	r3, #1
   141e0:	2200      	movs	r2, #0
   141e2:	4620      	mov	r0, r4
   141e4:	f000 f80a 	bl	141fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   141e8:	2800      	cmp	r0, #0
   141ea:	d0e9      	beq.n	141c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
   141ec:	f240 61c9 	movw	r1, #1737	; 0x6c9
   141f0:	2030      	movs	r0, #48	; 0x30
   141f2:	f7fc fb69 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   141f6:	0000      	.short	0x0000
   141f8:	2000010c 	.word	0x2000010c
   141fc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14200:	4604      	mov	r4, r0
   14202:	b085      	sub	sp, #20
   14204:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   14208:	469a      	mov	sl, r3
   1420a:	e9cd 3000 	strd	r3, r0, [sp]
   1420e:	460f      	mov	r7, r1
   14210:	f008 f9e3 	bl	1c5da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   14214:	4605      	mov	r5, r0
   14216:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   1421a:	f7ff ff11 	bl	14040 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   1421e:	4428      	add	r0, r5
   14220:	f8ad 0008 	strh.w	r0, [sp, #8]
   14224:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
   14228:	280d      	cmp	r0, #13
   1422a:	d004      	beq.n	14236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
   1422c:	2000      	movs	r0, #0
   1422e:	9003      	str	r0, [sp, #12]
   14230:	9807      	ldr	r0, [sp, #28]
   14232:	b110      	cbz	r0, 1423a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
   14234:	e02e      	b.n	14294 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
   14236:	2001      	movs	r0, #1
   14238:	e7f9      	b.n	1422e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
   1423a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1423e:	2803      	cmp	r0, #3
   14240:	d128      	bne.n	14294 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
   14242:	9803      	ldr	r0, [sp, #12]
   14244:	b330      	cbz	r0, 14294 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
   14246:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
   1424a:	42b8      	cmp	r0, r7
   1424c:	d122      	bne.n	14294 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
   1424e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   14252:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   14256:	68e0      	ldr	r0, [r4, #12]
   14258:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1425c:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
   14260:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
   14264:	4408      	add	r0, r1
   14266:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   1426a:	4620      	mov	r0, r4
   1426c:	f007 f96c 	bl	1b548 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
   14270:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
   14274:	6220      	str	r0, [r4, #32]
   14276:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
   1427a:	83a0      	strh	r0, [r4, #28]
   1427c:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
   14280:	60e0      	str	r0, [r4, #12]
   14282:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
   14286:	82a0      	strh	r0, [r4, #20]
   14288:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
   1428c:	82e0      	strh	r0, [r4, #22]
   1428e:	2002      	movs	r0, #2
   14290:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   14294:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
   14298:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
   1429c:	1a38      	subs	r0, r7, r0
   1429e:	fa0f f980 	sxth.w	r9, r0
   142a2:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
   142a6:	1a38      	subs	r0, r7, r0
   142a8:	fa0f f880 	sxth.w	r8, r0
   142ac:	f1b8 0f00 	cmp.w	r8, #0
   142b0:	da06      	bge.n	142c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
   142b2:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
   142b6:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
   142ba:	2001      	movs	r0, #1
   142bc:	46c8      	mov	r8, r9
   142be:	9000      	str	r0, [sp, #0]
   142c0:	ab02      	add	r3, sp, #8
   142c2:	464a      	mov	r2, r9
   142c4:	4641      	mov	r1, r8
   142c6:	4620      	mov	r0, r4
   142c8:	f7ff fefc 	bl	140c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
   142cc:	9004      	str	r0, [sp, #16]
   142ce:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   142d2:	f8df b33c 	ldr.w	fp, [pc, #828]	; 14610 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
   142d6:	b140      	cbz	r0, 142ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
   142d8:	2801      	cmp	r0, #1
   142da:	d07d      	beq.n	143d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
   142dc:	2802      	cmp	r0, #2
   142de:	d052      	beq.n	14386 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
   142e0:	2803      	cmp	r0, #3
   142e2:	d07a      	beq.n	143da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
   142e4:	f240 514d 	movw	r1, #1357	; 0x54d
   142e8:	e18e      	b.n	14608 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
   142ea:	2101      	movs	r1, #1
   142ec:	2000      	movs	r0, #0
   142ee:	f005 fe6e 	bl	19fce <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   142f2:	4606      	mov	r6, r0
   142f4:	6a20      	ldr	r0, [r4, #32]
   142f6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   142fa:	4430      	add	r0, r6
   142fc:	f004 fa12 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   14300:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
   14304:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   14308:	68e0      	ldr	r0, [r4, #12]
   1430a:	f004 fa0b 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1430e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
   14312:	a901      	add	r1, sp, #4
   14314:	4668      	mov	r0, sp
   14316:	f003 f99d 	bl	17654 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
   1431a:	e9dd 1200 	ldrd	r1, r2, [sp]
   1431e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
   14322:	f7fa ff65 	bl	f1f0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
   14326:	4681      	mov	r9, r0
   14328:	4620      	mov	r0, r4
   1432a:	f006 fe70 	bl	1b00e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
   1432e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   14332:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
   14336:	f008 f9f7 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1433a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1433e:	4401      	add	r1, r0
   14340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   14344:	fbb1 f0f0 	udiv	r0, r1, r0
   14348:	6a21      	ldr	r1, [r4, #32]
   1434a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   1434e:	4431      	add	r1, r6
   14350:	1a08      	subs	r0, r1, r0
   14352:	1a81      	subs	r1, r0, r2
   14354:	4441      	add	r1, r8
   14356:	3920      	subs	r1, #32
   14358:	eba1 0609 	sub.w	r6, r1, r9
   1435c:	0050      	lsls	r0, r2, #1
   1435e:	8ba1      	ldrh	r1, [r4, #28]
   14360:	3060      	adds	r0, #96	; 0x60
   14362:	4401      	add	r1, r0
   14364:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   14368:	f006 fec1 	bl	1b0ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   1436c:	3022      	adds	r0, #34	; 0x22
   1436e:	f8cb 0010 	str.w	r0, [fp, #16]
   14372:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
   14376:	4659      	mov	r1, fp
   14378:	1a30      	subs	r0, r6, r0
   1437a:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
   1437e:	d859      	bhi.n	14434 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
   14380:	f240 41e6 	movw	r1, #1254	; 0x4e6
   14384:	e140      	b.n	14608 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
   14386:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   1438a:	6a20      	ldr	r0, [r4, #32]
   1438c:	4408      	add	r0, r1
   1438e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   14392:	f004 f9c7 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   14396:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
   1439a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1439e:	68e0      	ldr	r0, [r4, #12]
   143a0:	f004 f9c0 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   143a4:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
   143a8:	4620      	mov	r0, r4
   143aa:	f006 fe30 	bl	1b00e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
   143ae:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
   143b2:	bb10      	cbnz	r0, 143fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
   143b4:	f1ba 0f00 	cmp.w	sl, #0
   143b8:	d01f      	beq.n	143fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
   143ba:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
   143be:	4640      	mov	r0, r8
   143c0:	f008 f9b2 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   143c4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   143c8:	4401      	add	r1, r0
   143ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   143ce:	fbb1 f0f0 	udiv	r0, r1, r0
   143d2:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   143d6:	e001      	b.n	143dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
   143d8:	e02d      	b.n	14436 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
   143da:	e049      	b.n	14470 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
   143dc:	4408      	add	r0, r1
   143de:	6a22      	ldr	r2, [r4, #32]
   143e0:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   143e4:	4411      	add	r1, r2
   143e6:	1a0e      	subs	r6, r1, r0
   143e8:	4640      	mov	r0, r8
   143ea:	f008 f98f 	bl	1c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   143ee:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   143f2:	1a08      	subs	r0, r1, r0
   143f4:	4406      	add	r6, r0
   143f6:	3e20      	subs	r6, #32
   143f8:	e006      	b.n	14408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
   143fa:	6a21      	ldr	r1, [r4, #32]
   143fc:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   14400:	4408      	add	r0, r1
   14402:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   14406:	1a46      	subs	r6, r0, r1
   14408:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1440c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   14410:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
   14414:	fb01 0002 	mla	r0, r1, r2, r0
   14418:	0040      	lsls	r0, r0, #1
   1441a:	8ba1      	ldrh	r1, [r4, #28]
   1441c:	3060      	adds	r0, #96	; 0x60
   1441e:	4401      	add	r1, r0
   14420:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   14424:	f006 fe63 	bl	1b0ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   14428:	f8cb 0010 	str.w	r0, [fp, #16]
   1442c:	2001      	movs	r0, #1
   1442e:	4659      	mov	r1, fp
   14430:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   14434:	e062      	b.n	144fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
   14436:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
   1443a:	68e0      	ldr	r0, [r4, #12]
   1443c:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
   14440:	1a86      	subs	r6, r0, r2
   14442:	eb01 0009 	add.w	r0, r1, r9
   14446:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
   1444a:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
   1444e:	1a40      	subs	r0, r0, r1
   14450:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   14454:	1e40      	subs	r0, r0, #1
   14456:	fb0c 3101 	mla	r1, ip, r1, r3
   1445a:	fb00 1002 	mla	r0, r0, r2, r1
   1445e:	0040      	lsls	r0, r0, #1
   14460:	8ba1      	ldrh	r1, [r4, #28]
   14462:	3060      	adds	r0, #96	; 0x60
   14464:	4401      	add	r1, r0
   14466:	fb06 f608 	mul.w	r6, r6, r8
   1446a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   1446e:	e040      	b.n	144f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
   14470:	68e0      	ldr	r0, [r4, #12]
   14472:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   14476:	fb00 f008 	mul.w	r0, r0, r8
   1447a:	fb08 0611 	mls	r6, r8, r1, r0
   1447e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
   14482:	2824      	cmp	r0, #36	; 0x24
   14484:	d003      	beq.n	1448e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
   14486:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
   1448a:	2824      	cmp	r0, #36	; 0x24
   1448c:	d109      	bne.n	144a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
   1448e:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
   14492:	1a38      	subs	r0, r7, r0
   14494:	b200      	sxth	r0, r0
   14496:	2800      	cmp	r0, #0
   14498:	db03      	blt.n	144a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
   1449a:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
   1449e:	b100      	cbz	r0, 144a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
   144a0:	9001      	str	r0, [sp, #4]
   144a2:	9800      	ldr	r0, [sp, #0]
   144a4:	b1d8      	cbz	r0, 144de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
   144a6:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
   144aa:	b9c0      	cbnz	r0, 144de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
   144ac:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
   144b0:	2800      	cmp	r0, #0
   144b2:	d07d      	beq.n	145b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
   144b4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   144b8:	f008 f936 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   144bc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   144c0:	4401      	add	r1, r0
   144c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   144c6:	fbb1 f0f0 	udiv	r0, r1, r0
   144ca:	1a36      	subs	r6, r6, r0
   144cc:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   144d0:	f008 f91c 	bl	1c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   144d4:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   144d8:	1a08      	subs	r0, r1, r0
   144da:	4406      	add	r6, r0
   144dc:	3e20      	subs	r6, #32
   144de:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
   144e2:	eb01 0009 	add.w	r0, r1, r9
   144e6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   144ea:	4348      	muls	r0, r1
   144ec:	0041      	lsls	r1, r0, #1
   144ee:	3160      	adds	r1, #96	; 0x60
   144f0:	9801      	ldr	r0, [sp, #4]
   144f2:	f006 fdfc 	bl	1b0ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   144f6:	4659      	mov	r1, fp
   144f8:	f8cb 0010 	str.w	r0, [fp, #16]
   144fc:	9804      	ldr	r0, [sp, #16]
   144fe:	6909      	ldr	r1, [r1, #16]
   14500:	1a33      	subs	r3, r6, r0
   14502:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
   14506:	68e0      	ldr	r0, [r4, #12]
   14508:	1b80      	subs	r0, r0, r6
   1450a:	f2a0 2043 	subw	r0, r0, #579	; 0x243
   1450e:	f8cb 0014 	str.w	r0, [fp, #20]
   14512:	4281      	cmp	r1, r0
   14514:	d800      	bhi.n	14518 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
   14516:	4608      	mov	r0, r1
   14518:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   1451c:	2000      	movs	r0, #0
   1451e:	7028      	strb	r0, [r5, #0]
   14520:	2064      	movs	r0, #100	; 0x64
   14522:	8128      	strh	r0, [r5, #8]
   14524:	4619      	mov	r1, r3
   14526:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
   1452a:	f7f9 fd9d 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1452e:	60e8      	str	r0, [r5, #12]
   14530:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14534:	f006 f93f 	bl	1a7b6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   14538:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   1453c:	4408      	add	r0, r1
   1453e:	6068      	str	r0, [r5, #4]
   14540:	68e8      	ldr	r0, [r5, #12]
   14542:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
   14546:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
   1454a:	2001      	movs	r0, #1
   1454c:	72a8      	strb	r0, [r5, #10]
   1454e:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
   14552:	1bc9      	subs	r1, r1, r7
   14554:	b209      	sxth	r1, r1
   14556:	2900      	cmp	r1, #0
   14558:	dd01      	ble.n	1455e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
   1455a:	2103      	movs	r1, #3
   1455c:	72a9      	strb	r1, [r5, #10]
   1455e:	9903      	ldr	r1, [sp, #12]
   14560:	b339      	cbz	r1, 145b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
   14562:	f1ba 0f00 	cmp.w	sl, #0
   14566:	d01f      	beq.n	145a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   14568:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   1456c:	b38a      	cbz	r2, 145d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ce>
   1456e:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
   14572:	bf00      	nop
   14574:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
   14578:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   1457c:	1c49      	adds	r1, r1, #1
   1457e:	434b      	muls	r3, r1
   14580:	4293      	cmp	r3, r2
   14582:	d211      	bcs.n	145a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   14584:	7aa9      	ldrb	r1, [r5, #10]
   14586:	1e49      	subs	r1, r1, #1
   14588:	2900      	cmp	r1, #0
   1458a:	dd0d      	ble.n	145a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   1458c:	72a8      	strb	r0, [r5, #10]
   1458e:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
   14592:	1c40      	adds	r0, r0, #1
   14594:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
   14598:	2001      	movs	r0, #1
   1459a:	f000 f83b 	bl	14614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
   1459e:	f000 0007 	and.w	r0, r0, #7
   145a2:	1c40      	adds	r0, r0, #1
   145a4:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
   145a8:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
   145ac:	4629      	mov	r1, r5
   145ae:	e001      	b.n	145b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
   145b0:	e00c      	b.n	145cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
   145b2:	e00f      	b.n	145d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
   145b4:	f006 fdad 	bl	1b112 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
   145b8:	b320      	cbz	r0, 14604 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
   145ba:	9807      	ldr	r0, [sp, #28]
   145bc:	f080 0001 	eor.w	r0, r0, #1
   145c0:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
   145c4:	2000      	movs	r0, #0
   145c6:	b009      	add	sp, #36	; 0x24
   145c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145cc:	f44f 61a7 	mov.w	r1, #1336	; 0x538
   145d0:	e01a      	b.n	14608 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
   145d2:	e015      	b.n	14600 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
   145d4:	f1ba 0f00 	cmp.w	sl, #0
   145d8:	d1c6      	bne.n	14568 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
   145da:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   145de:	2800      	cmp	r0, #0
   145e0:	d0e2      	beq.n	145a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   145e2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   145e6:	68e0      	ldr	r0, [r4, #12]
   145e8:	1a41      	subs	r1, r0, r1
   145ea:	4628      	mov	r0, r5
   145ec:	f005 fd01 	bl	19ff2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   145f0:	0400      	lsls	r0, r0, #16
   145f2:	0c00      	lsrs	r0, r0, #16
   145f4:	d0d8      	beq.n	145a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
   145f6:	9912      	ldr	r1, [sp, #72]	; 0x48
   145f8:	b101      	cbz	r1, 145fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
   145fa:	8008      	strh	r0, [r1, #0]
   145fc:	2001      	movs	r0, #1
   145fe:	e7e2      	b.n	145c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
   14600:	2100      	movs	r1, #0
   14602:	e7b7      	b.n	14574 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
   14604:	f240 5197 	movw	r1, #1431	; 0x597
   14608:	2030      	movs	r0, #48	; 0x30
   1460a:	f7fc f95d 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1460e:	0000      	.short	0x0000
   14610:	2000010c 	.word	0x2000010c
   14614:	b108      	cbz	r0, 1461a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
   14616:	4803      	ldr	r0, [pc, #12]	; (14624 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
   14618:	e001      	b.n	1461e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61a>
   1461a:	4802      	ldr	r0, [pc, #8]	; (14624 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
   1461c:	3008      	adds	r0, #8
   1461e:	f7fe bc7b 	b.w	12f18 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
   14622:	0000      	.short	0x0000
   14624:	20000124 	.word	0x20000124
   14628:	b570      	push	{r4, r5, r6, lr}
   1462a:	4604      	mov	r4, r0
   1462c:	f7f9 fe8c 	bl	e348 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   14630:	2864      	cmp	r0, #100	; 0x64
   14632:	d901      	bls.n	14638 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x634>
   14634:	4605      	mov	r5, r0
   14636:	e000      	b.n	1463a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x636>
   14638:	2564      	movs	r5, #100	; 0x64
   1463a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   1463e:	2128      	movs	r1, #40	; 0x28
   14640:	f006 fc56 	bl	1aef0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
   14644:	4428      	add	r0, r5
   14646:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   1464a:	f200 203d 	addw	r0, r0, #573	; 0x23d
   1464e:	180e      	adds	r6, r1, r0
   14650:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   14654:	2128      	movs	r1, #40	; 0x28
   14656:	f006 fc4b 	bl	1aef0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
   1465a:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
   1465e:	4620      	mov	r0, r4
   14660:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   14662:	f006 f847 	bl	1a6f4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   14666:	4605      	mov	r5, r0
   14668:	4632      	mov	r2, r6
   1466a:	4620      	mov	r0, r4
   1466c:	68e1      	ldr	r1, [r4, #12]
   1466e:	f006 f841 	bl	1a6f4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   14672:	4907      	ldr	r1, [pc, #28]	; (14690 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>)
   14674:	4285      	cmp	r5, r0
   14676:	6088      	str	r0, [r1, #8]
   14678:	d200      	bcs.n	1467c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x678>
   1467a:	4628      	mov	r0, r5
   1467c:	6048      	str	r0, [r1, #4]
   1467e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   14682:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
   14686:	60c8      	str	r0, [r1, #12]
   14688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1468c:	f7fa bcfa 	b.w	f084 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   14690:	2000010c 	.word	0x2000010c

00014694 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
   14694:	4806      	ldr	r0, [pc, #24]	; (146b0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
   14696:	4905      	ldr	r1, [pc, #20]	; (146ac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
   14698:	6501      	str	r1, [r0, #80]	; 0x50
   1469a:	4906      	ldr	r1, [pc, #24]	; (146b4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
   1469c:	6541      	str	r1, [r0, #84]	; 0x54
   1469e:	4807      	ldr	r0, [pc, #28]	; (146bc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
   146a0:	4905      	ldr	r1, [pc, #20]	; (146b8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
   146a2:	6501      	str	r1, [r0, #80]	; 0x50
   146a4:	4906      	ldr	r1, [pc, #24]	; (146c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
   146a6:	6541      	str	r1, [r0, #84]	; 0x54
   146a8:	4770      	bx	lr
   146aa:	0000      	.short	0x0000
   146ac:	00015bf5 	.word	0x00015bf5
   146b0:	20000148 	.word	0x20000148
   146b4:	00015cd1 	.word	0x00015cd1
   146b8:	0001634d 	.word	0x0001634d
   146bc:	200001ac 	.word	0x200001ac
   146c0:	0001637d 	.word	0x0001637d

000146c4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
   146c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146c6:	460d      	mov	r5, r1
   146c8:	4607      	mov	r7, r0
   146ca:	2100      	movs	r1, #0
   146cc:	f005 f966 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   146d0:	1e04      	subs	r4, r0, #0
   146d2:	d04f      	beq.n	14774 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
   146d4:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
   146d8:	2800      	cmp	r0, #0
   146da:	d04b      	beq.n	14774 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
   146dc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
   146e0:	f88d 0000 	strb.w	r0, [sp]
   146e4:	9800      	ldr	r0, [sp, #0]
   146e6:	9000      	str	r0, [sp, #0]
   146e8:	f89d 0000 	ldrb.w	r0, [sp]
   146ec:	2600      	movs	r6, #0
   146ee:	b1d8      	cbz	r0, 14728 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
   146f0:	706e      	strb	r6, [r5, #1]
   146f2:	2007      	movs	r0, #7
   146f4:	7028      	strb	r0, [r5, #0]
   146f6:	e00b      	b.n	14710 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
   146f8:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
   146fc:	84a6      	strh	r6, [r4, #36]	; 0x24
   146fe:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
   14702:	6068      	str	r0, [r5, #4]
   14704:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
   14708:	60a8      	str	r0, [r5, #8]
   1470a:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
   1470e:	81a8      	strh	r0, [r5, #12]
   14710:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
   14714:	f88d 0000 	strb.w	r0, [sp]
   14718:	9800      	ldr	r0, [sp, #0]
   1471a:	9000      	str	r0, [sp, #0]
   1471c:	f89d 0000 	ldrb.w	r0, [sp]
   14720:	2800      	cmp	r0, #0
   14722:	d1e9      	bne.n	146f8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
   14724:	712e      	strb	r6, [r5, #4]
   14726:	e10b      	b.n	14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   14728:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   1472c:	b3a0      	cbz	r0, 14798 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
   1472e:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   14732:	280b      	cmp	r0, #11
   14734:	d016      	beq.n	14764 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
   14736:	280c      	cmp	r0, #12
   14738:	d004      	beq.n	14744 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
   1473a:	f640 21ee 	movw	r1, #2798	; 0xaee
   1473e:	2031      	movs	r0, #49	; 0x31
   14740:	f7fc f8c2 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14744:	8820      	ldrh	r0, [r4, #0]
   14746:	f7fc fcd9 	bl	110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1474a:	4607      	mov	r7, r0
   1474c:	f004 ffec 	bl	19728 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   14750:	b978      	cbnz	r0, 14772 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
   14752:	706e      	strb	r6, [r5, #1]
   14754:	200c      	movs	r0, #12
   14756:	7028      	strb	r0, [r5, #0]
   14758:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
   1475c:	7128      	strb	r0, [r5, #4]
   1475e:	8820      	ldrh	r0, [r4, #0]
   14760:	80e8      	strh	r0, [r5, #6]
   14762:	e013      	b.n	1478c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
   14764:	8820      	ldrh	r0, [r4, #0]
   14766:	f7fc fcc9 	bl	110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1476a:	4607      	mov	r7, r0
   1476c:	f004 ffdc 	bl	19728 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   14770:	b108      	cbz	r0, 14776 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
   14772:	2000      	movs	r0, #0
   14774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14776:	706e      	strb	r6, [r5, #1]
   14778:	200b      	movs	r0, #11
   1477a:	7028      	strb	r0, [r5, #0]
   1477c:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
   14780:	7128      	strb	r0, [r5, #4]
   14782:	8820      	ldrh	r0, [r4, #0]
   14784:	80e8      	strh	r0, [r5, #6]
   14786:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
   1478a:	7228      	strb	r0, [r5, #8]
   1478c:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
   14790:	4638      	mov	r0, r7
   14792:	f004 ffe4 	bl	1975e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   14796:	e0d3      	b.n	14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   14798:	e7ff      	b.n	1479a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
   1479a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
   1479e:	f88d 0000 	strb.w	r0, [sp]
   147a2:	9800      	ldr	r0, [sp, #0]
   147a4:	9000      	str	r0, [sp, #0]
   147a6:	f89d 0000 	ldrb.w	r0, [sp]
   147aa:	b130      	cbz	r0, 147ba <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
   147ac:	706e      	strb	r6, [r5, #1]
   147ae:	200e      	movs	r0, #14
   147b0:	7028      	strb	r0, [r5, #0]
   147b2:	80af      	strh	r7, [r5, #4]
   147b4:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
   147b8:	e0c2      	b.n	14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   147ba:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   147be:	f88d 0000 	strb.w	r0, [sp]
   147c2:	9800      	ldr	r0, [sp, #0]
   147c4:	9000      	str	r0, [sp, #0]
   147c6:	f89d 0000 	ldrb.w	r0, [sp]
   147ca:	b198      	cbz	r0, 147f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
   147cc:	706e      	strb	r6, [r5, #1]
   147ce:	2008      	movs	r0, #8
   147d0:	7028      	strb	r0, [r5, #0]
   147d2:	8820      	ldrh	r0, [r4, #0]
   147d4:	80a8      	strh	r0, [r5, #4]
   147d6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   147da:	f8c5 1006 	str.w	r1, [r5, #6]
   147de:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
   147e2:	f8c5 100a 	str.w	r1, [r5, #10]
   147e6:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
   147ea:	81e8      	strh	r0, [r5, #14]
   147ec:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
   147f0:	7026      	strb	r6, [r4, #0]
   147f2:	e0a5      	b.n	14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   147f4:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
   147f8:	f88d 0000 	strb.w	r0, [sp]
   147fc:	9800      	ldr	r0, [sp, #0]
   147fe:	9000      	str	r0, [sp, #0]
   14800:	f89d 0000 	ldrb.w	r0, [sp]
   14804:	b1a0      	cbz	r0, 14830 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
   14806:	706e      	strb	r6, [r5, #1]
   14808:	2016      	movs	r0, #22
   1480a:	7028      	strb	r0, [r5, #0]
   1480c:	e005      	b.n	1481a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
   1480e:	bf00      	nop
   14810:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
   14814:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
   14818:	6068      	str	r0, [r5, #4]
   1481a:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
   1481e:	f88d 0000 	strb.w	r0, [sp]
   14822:	9800      	ldr	r0, [sp, #0]
   14824:	9000      	str	r0, [sp, #0]
   14826:	f89d 0000 	ldrb.w	r0, [sp]
   1482a:	2800      	cmp	r0, #0
   1482c:	d1f0      	bne.n	14810 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
   1482e:	e087      	b.n	14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   14830:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
   14834:	f88d 0000 	strb.w	r0, [sp]
   14838:	9800      	ldr	r0, [sp, #0]
   1483a:	9000      	str	r0, [sp, #0]
   1483c:	f89d 0000 	ldrb.w	r0, [sp]
   14840:	b170      	cbz	r0, 14860 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
   14842:	706e      	strb	r6, [r5, #1]
   14844:	2006      	movs	r0, #6
   14846:	7028      	strb	r0, [r5, #0]
   14848:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
   1484c:	6068      	str	r0, [r5, #4]
   1484e:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
   14852:	60a8      	str	r0, [r5, #8]
   14854:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
   14858:	60e8      	str	r0, [r5, #12]
   1485a:	f504 7403 	add.w	r4, r4, #524	; 0x20c
   1485e:	e03a      	b.n	148d6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
   14860:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   14864:	f88d 0000 	strb.w	r0, [sp]
   14868:	9800      	ldr	r0, [sp, #0]
   1486a:	9000      	str	r0, [sp, #0]
   1486c:	f89d 0000 	ldrb.w	r0, [sp]
   14870:	b1d0      	cbz	r0, 148a8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
   14872:	706e      	strb	r6, [r5, #1]
   14874:	2012      	movs	r0, #18
   14876:	7028      	strb	r0, [r5, #0]
   14878:	e00b      	b.n	14892 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
   1487a:	bf00      	nop
   1487c:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
   14880:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
   14884:	6068      	str	r0, [r5, #4]
   14886:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   1488a:	60a8      	str	r0, [r5, #8]
   1488c:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
   14890:	60e8      	str	r0, [r5, #12]
   14892:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   14896:	f88d 0000 	strb.w	r0, [sp]
   1489a:	9800      	ldr	r0, [sp, #0]
   1489c:	9000      	str	r0, [sp, #0]
   1489e:	f89d 0000 	ldrb.w	r0, [sp]
   148a2:	2800      	cmp	r0, #0
   148a4:	d1ea      	bne.n	1487c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
   148a6:	e04b      	b.n	14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   148a8:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
   148ac:	f88d 0000 	strb.w	r0, [sp]
   148b0:	9800      	ldr	r0, [sp, #0]
   148b2:	9000      	str	r0, [sp, #0]
   148b4:	f89d 0000 	ldrb.w	r0, [sp]
   148b8:	b180      	cbz	r0, 148dc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
   148ba:	706e      	strb	r6, [r5, #1]
   148bc:	2018      	movs	r0, #24
   148be:	7028      	strb	r0, [r5, #0]
   148c0:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
   148c4:	6068      	str	r0, [r5, #4]
   148c6:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
   148ca:	60a8      	str	r0, [r5, #8]
   148cc:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
   148d0:	81a8      	strh	r0, [r5, #12]
   148d2:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
   148d6:	f804 6c02 	strb.w	r6, [r4, #-2]
   148da:	e031      	b.n	14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   148dc:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
   148e0:	f88d 0000 	strb.w	r0, [sp]
   148e4:	9800      	ldr	r0, [sp, #0]
   148e6:	9000      	str	r0, [sp, #0]
   148e8:	f89d 0000 	ldrb.w	r0, [sp]
   148ec:	b138      	cbz	r0, 148fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
   148ee:	2019      	movs	r0, #25
   148f0:	7028      	strb	r0, [r5, #0]
   148f2:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
   148f6:	6068      	str	r0, [r5, #4]
   148f8:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
   148fc:	e020      	b.n	14940 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
   148fe:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
   14902:	f88d 0000 	strb.w	r0, [sp]
   14906:	9800      	ldr	r0, [sp, #0]
   14908:	9000      	str	r0, [sp, #0]
   1490a:	f89d 0000 	ldrb.w	r0, [sp]
   1490e:	2800      	cmp	r0, #0
   14910:	f43f af30 	beq.w	14774 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
   14914:	706e      	strb	r6, [r5, #1]
   14916:	2013      	movs	r0, #19
   14918:	7028      	strb	r0, [r5, #0]
   1491a:	e007      	b.n	1492c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
   1491c:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
   14920:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
   14924:	6068      	str	r0, [r5, #4]
   14926:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
   1492a:	8128      	strh	r0, [r5, #8]
   1492c:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
   14930:	f88d 0000 	strb.w	r0, [sp]
   14934:	9800      	ldr	r0, [sp, #0]
   14936:	9000      	str	r0, [sp, #0]
   14938:	f89d 0000 	ldrb.w	r0, [sp]
   1493c:	2800      	cmp	r0, #0
   1493e:	d1ed      	bne.n	1491c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
   14940:	2001      	movs	r0, #1
   14942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014944 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
   14944:	481b      	ldr	r0, [pc, #108]	; (149b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
   14946:	491a      	ldr	r1, [pc, #104]	; (149b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
   14948:	6081      	str	r1, [r0, #8]
   1494a:	491b      	ldr	r1, [pc, #108]	; (149b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
   1494c:	6041      	str	r1, [r0, #4]
   1494e:	491b      	ldr	r1, [pc, #108]	; (149bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
   14950:	6001      	str	r1, [r0, #0]
   14952:	491b      	ldr	r1, [pc, #108]	; (149c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
   14954:	6281      	str	r1, [r0, #40]	; 0x28
   14956:	491b      	ldr	r1, [pc, #108]	; (149c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
   14958:	62c1      	str	r1, [r0, #44]	; 0x2c
   1495a:	491b      	ldr	r1, [pc, #108]	; (149c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
   1495c:	60c1      	str	r1, [r0, #12]
   1495e:	491b      	ldr	r1, [pc, #108]	; (149cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
   14960:	6181      	str	r1, [r0, #24]
   14962:	491b      	ldr	r1, [pc, #108]	; (149d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
   14964:	6301      	str	r1, [r0, #48]	; 0x30
   14966:	491b      	ldr	r1, [pc, #108]	; (149d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
   14968:	6201      	str	r1, [r0, #32]
   1496a:	491b      	ldr	r1, [pc, #108]	; (149d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
   1496c:	64c1      	str	r1, [r0, #76]	; 0x4c
   1496e:	491b      	ldr	r1, [pc, #108]	; (149dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
   14970:	6481      	str	r1, [r0, #72]	; 0x48
   14972:	491b      	ldr	r1, [pc, #108]	; (149e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
   14974:	6441      	str	r1, [r0, #68]	; 0x44
   14976:	491b      	ldr	r1, [pc, #108]	; (149e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
   14978:	6341      	str	r1, [r0, #52]	; 0x34
   1497a:	491b      	ldr	r1, [pc, #108]	; (149e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
   1497c:	61c1      	str	r1, [r0, #28]
   1497e:	481c      	ldr	r0, [pc, #112]	; (149f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
   14980:	491a      	ldr	r1, [pc, #104]	; (149ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
   14982:	6081      	str	r1, [r0, #8]
   14984:	491b      	ldr	r1, [pc, #108]	; (149f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
   14986:	61c1      	str	r1, [r0, #28]
   14988:	491b      	ldr	r1, [pc, #108]	; (149f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
   1498a:	6241      	str	r1, [r0, #36]	; 0x24
   1498c:	491b      	ldr	r1, [pc, #108]	; (149fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
   1498e:	62c1      	str	r1, [r0, #44]	; 0x2c
   14990:	491b      	ldr	r1, [pc, #108]	; (14a00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
   14992:	6101      	str	r1, [r0, #16]
   14994:	491b      	ldr	r1, [pc, #108]	; (14a04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
   14996:	6141      	str	r1, [r0, #20]
   14998:	491b      	ldr	r1, [pc, #108]	; (14a08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
   1499a:	6441      	str	r1, [r0, #68]	; 0x44
   1499c:	6341      	str	r1, [r0, #52]	; 0x34
   1499e:	491b      	ldr	r1, [pc, #108]	; (14a0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
   149a0:	6181      	str	r1, [r0, #24]
   149a2:	491b      	ldr	r1, [pc, #108]	; (14a10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
   149a4:	6301      	str	r1, [r0, #48]	; 0x30
   149a6:	491b      	ldr	r1, [pc, #108]	; (14a14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
   149a8:	6481      	str	r1, [r0, #72]	; 0x48
   149aa:	491b      	ldr	r1, [pc, #108]	; (14a18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
   149ac:	64c1      	str	r1, [r0, #76]	; 0x4c
   149ae:	4770      	bx	lr
   149b0:	00016081 	.word	0x00016081
   149b4:	20000148 	.word	0x20000148
   149b8:	000159bd 	.word	0x000159bd
   149bc:	00015a19 	.word	0x00015a19
   149c0:	00015d99 	.word	0x00015d99
   149c4:	00015ddd 	.word	0x00015ddd
   149c8:	00015ac5 	.word	0x00015ac5
   149cc:	00016059 	.word	0x00016059
   149d0:	0001619d 	.word	0x0001619d
   149d4:	00015b71 	.word	0x00015b71
   149d8:	00015d6d 	.word	0x00015d6d
   149dc:	00015d41 	.word	0x00015d41
   149e0:	00016019 	.word	0x00016019
   149e4:	00016049 	.word	0x00016049
   149e8:	000160b5 	.word	0x000160b5
   149ec:	00016535 	.word	0x00016535
   149f0:	200001ac 	.word	0x200001ac
   149f4:	0001655d 	.word	0x0001655d
   149f8:	0001631d 	.word	0x0001631d
   149fc:	000163f5 	.word	0x000163f5
   14a00:	000162f1 	.word	0x000162f1
   14a04:	0001649d 	.word	0x0001649d
   14a08:	00016479 	.word	0x00016479
   14a0c:	000164c1 	.word	0x000164c1
   14a10:	000165b5 	.word	0x000165b5
   14a14:	000163ad 	.word	0x000163ad
   14a18:	000163dd 	.word	0x000163dd

00014a1c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
   14a1c:	4806      	ldr	r0, [pc, #24]	; (14a38 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
   14a1e:	4905      	ldr	r1, [pc, #20]	; (14a34 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
   14a20:	6581      	str	r1, [r0, #88]	; 0x58
   14a22:	4906      	ldr	r1, [pc, #24]	; (14a3c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
   14a24:	6601      	str	r1, [r0, #96]	; 0x60
   14a26:	4807      	ldr	r0, [pc, #28]	; (14a44 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
   14a28:	4905      	ldr	r1, [pc, #20]	; (14a40 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
   14a2a:	6581      	str	r1, [r0, #88]	; 0x58
   14a2c:	4906      	ldr	r1, [pc, #24]	; (14a48 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
   14a2e:	65c1      	str	r1, [r0, #92]	; 0x5c
   14a30:	4770      	bx	lr
   14a32:	0000      	.short	0x0000
   14a34:	00015dfd 	.word	0x00015dfd
   14a38:	20000148 	.word	0x20000148
   14a3c:	00015ed5 	.word	0x00015ed5
   14a40:	00016421 	.word	0x00016421
   14a44:	200001ac 	.word	0x200001ac
   14a48:	00016451 	.word	0x00016451

00014a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
   14a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14a50:	2601      	movs	r6, #1
   14a52:	4c7c      	ldr	r4, [pc, #496]	; (14c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
   14a54:	2500      	movs	r5, #0
   14a56:	f366 0107 	bfi	r1, r6, #0, #8
   14a5a:	8065      	strh	r5, [r4, #2]
   14a5c:	7065      	strb	r5, [r4, #1]
   14a5e:	7025      	strb	r5, [r4, #0]
   14a60:	60a0      	str	r0, [r4, #8]
   14a62:	4689      	mov	r9, r1
   14a64:	4680      	mov	r8, r0
   14a66:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   14a6a:	8800      	ldrh	r0, [r0, #0]
   14a6c:	f7fc fb5c 	bl	11128 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   14a70:	b180      	cbz	r0, 14a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
   14a72:	68a0      	ldr	r0, [r4, #8]
   14a74:	8800      	ldrh	r0, [r0, #0]
   14a76:	f7fc fe01 	bl	1167c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
   14a7a:	68a0      	ldr	r0, [r4, #8]
   14a7c:	8800      	ldrh	r0, [r0, #0]
   14a7e:	f7fc fda5 	bl	115cc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
   14a82:	68a0      	ldr	r0, [r4, #8]
   14a84:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
   14a88:	b1c9      	cbz	r1, 14abe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
   14a8a:	3070      	adds	r0, #112	; 0x70
   14a8c:	f006 fda0 	bl	1b5d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   14a90:	b118      	cbz	r0, 14a9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
   14a92:	e014      	b.n	14abe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
   14a94:	f640 31c9 	movw	r1, #3017	; 0xbc9
   14a98:	e06b      	b.n	14b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
   14a9a:	68a0      	ldr	r0, [r4, #8]
   14a9c:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
   14aa0:	f88d 1000 	strb.w	r1, [sp]
   14aa4:	9900      	ldr	r1, [sp, #0]
   14aa6:	9100      	str	r1, [sp, #0]
   14aa8:	f89d 1000 	ldrb.w	r1, [sp]
   14aac:	b139      	cbz	r1, 14abe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
   14aae:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   14ab2:	2301      	movs	r3, #1
   14ab4:	4619      	mov	r1, r3
   14ab6:	3070      	adds	r0, #112	; 0x70
   14ab8:	f005 f9e2 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14abc:	b180      	cbz	r0, 14ae0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
   14abe:	68a0      	ldr	r0, [r4, #8]
   14ac0:	3070      	adds	r0, #112	; 0x70
   14ac2:	f006 fd85 	bl	1b5d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   14ac6:	b128      	cbz	r0, 14ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
   14ac8:	68a0      	ldr	r0, [r4, #8]
   14aca:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
   14ace:	bf00      	nop
   14ad0:	f000 fbb0 	bl	15234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
   14ad4:	68a0      	ldr	r0, [r4, #8]
   14ad6:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
   14ada:	b189      	cbz	r1, 14b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
   14adc:	80a5      	strh	r5, [r4, #4]
   14ade:	e01e      	b.n	14b1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
   14ae0:	68a0      	ldr	r0, [r4, #8]
   14ae2:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
   14ae6:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
   14aea:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
   14aee:	2100      	movs	r1, #0
   14af0:	2002      	movs	r0, #2
   14af2:	f000 fe41 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   14af6:	68a0      	ldr	r0, [r4, #8]
   14af8:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
   14afc:	2002      	movs	r0, #2
   14afe:	e7e7      	b.n	14ad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
   14b00:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
   14b04:	f88d 1000 	strb.w	r1, [sp]
   14b08:	9900      	ldr	r1, [sp, #0]
   14b0a:	9100      	str	r1, [sp, #0]
   14b0c:	f89d 1000 	ldrb.w	r1, [sp]
   14b10:	b919      	cbnz	r1, 14b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
   14b12:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   14b14:	8a82      	ldrh	r2, [r0, #20]
   14b16:	4291      	cmp	r1, r2
   14b18:	d800      	bhi.n	14b1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
   14b1a:	8a81      	ldrh	r1, [r0, #20]
   14b1c:	80a1      	strh	r1, [r4, #4]
   14b1e:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
   14b22:	1e49      	subs	r1, r1, #1
   14b24:	b28f      	uxth	r7, r1
   14b26:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   14b2a:	4439      	add	r1, r7
   14b2c:	f820 195c 	strh.w	r1, [r0], #-92
   14b30:	8801      	ldrh	r1, [r0, #0]
   14b32:	4439      	add	r1, r7
   14b34:	8001      	strh	r1, [r0, #0]
   14b36:	f001 fd6b 	bl	16610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
   14b3a:	b120      	cbz	r0, 14b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
   14b3c:	68a0      	ldr	r0, [r4, #8]
   14b3e:	f850 1f98 	ldr.w	r1, [r0, #152]!
   14b42:	4439      	add	r1, r7
   14b44:	6001      	str	r1, [r0, #0]
   14b46:	68a1      	ldr	r1, [r4, #8]
   14b48:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
   14b4c:	2801      	cmp	r0, #1
   14b4e:	d802      	bhi.n	14b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
   14b50:	1c40      	adds	r0, r0, #1
   14b52:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
   14b56:	b10f      	cbz	r7, 14b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
   14b58:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
   14b5c:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
   14b60:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
   14b64:	f101 0070 	add.w	r0, r1, #112	; 0x70
   14b68:	f005 fb0c 	bl	1a184 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
   14b6c:	b120      	cbz	r0, 14b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
   14b6e:	f640 410d 	movw	r1, #3085	; 0xc0d
   14b72:	2031      	movs	r0, #49	; 0x31
   14b74:	f7fb fea8 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14b78:	68a0      	ldr	r0, [r4, #8]
   14b7a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   14b7e:	290b      	cmp	r1, #11
   14b80:	d001      	beq.n	14b86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
   14b82:	290c      	cmp	r1, #12
   14b84:	d118      	bne.n	14bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
   14b86:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
   14b8a:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
   14b8e:	1ad2      	subs	r2, r2, r3
   14b90:	b212      	sxth	r2, r2
   14b92:	2a00      	cmp	r2, #0
   14b94:	db10      	blt.n	14bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
   14b96:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
   14b9a:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
   14b9e:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
   14ba2:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   14ba6:	2103      	movs	r1, #3
   14ba8:	f7fd fdcc 	bl	12744 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   14bac:	68a0      	ldr	r0, [r4, #8]
   14bae:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
   14bb2:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
   14bb6:	e026      	b.n	14c06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   14bb8:	2924      	cmp	r1, #36	; 0x24
   14bba:	d111      	bne.n	14be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
   14bbc:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
   14bc0:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
   14bc4:	1a89      	subs	r1, r1, r2
   14bc6:	b209      	sxth	r1, r1
   14bc8:	2900      	cmp	r1, #0
   14bca:	db09      	blt.n	14be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
   14bcc:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
   14bd0:	f000 fe82 	bl	158d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
   14bd4:	2800      	cmp	r0, #0
   14bd6:	68a0      	ldr	r0, [r4, #8]
   14bd8:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
   14bdc:	d029      	beq.n	14c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
   14bde:	e012      	b.n	14c06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   14be0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   14be4:	2924      	cmp	r1, #36	; 0x24
   14be6:	d001      	beq.n	14bec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
   14be8:	2925      	cmp	r1, #37	; 0x25
   14bea:	d10c      	bne.n	14c06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   14bec:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
   14bf0:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
   14bf4:	1a89      	subs	r1, r1, r2
   14bf6:	b209      	sxth	r1, r1
   14bf8:	2900      	cmp	r1, #0
   14bfa:	db04      	blt.n	14c06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   14bfc:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
   14c00:	f000 fe6a 	bl	158d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
   14c04:	b1a8      	cbz	r0, 14c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
   14c06:	4810      	ldr	r0, [pc, #64]	; (14c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
   14c08:	9000      	str	r0, [sp, #0]
   14c0a:	4b10      	ldr	r3, [pc, #64]	; (14c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
   14c0c:	4a10      	ldr	r2, [pc, #64]	; (14c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
   14c0e:	4641      	mov	r1, r8
   14c10:	4648      	mov	r0, r9
   14c12:	f7fc fde9 	bl	117e8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
   14c16:	68a0      	ldr	r0, [r4, #8]
   14c18:	2301      	movs	r3, #1
   14c1a:	2105      	movs	r1, #5
   14c1c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   14c20:	3070      	adds	r0, #112	; 0x70
   14c22:	f005 f92d 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14c26:	2800      	cmp	r0, #0
   14c28:	d009      	beq.n	14c3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
   14c2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14c2e:	f7fc bdd5 	b.w	117dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
   14c32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14c36:	2100      	movs	r1, #0
   14c38:	4608      	mov	r0, r1
   14c3a:	f000 bbd5 	b.w	153e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
   14c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14c42:	0000      	.short	0x0000
   14c44:	20000134 	.word	0x20000134
   14c48:	000153e9 	.word	0x000153e9
   14c4c:	00014eed 	.word	0x00014eed
   14c50:	00015825 	.word	0x00015825
   14c54:	b570      	push	{r4, r5, r6, lr}
   14c56:	4c0f      	ldr	r4, [pc, #60]	; (14c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
   14c58:	68a5      	ldr	r5, [r4, #8]
   14c5a:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
   14c5e:	2920      	cmp	r1, #32
   14c60:	d002      	beq.n	14c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
   14c62:	2926      	cmp	r1, #38	; 0x26
   14c64:	d003      	beq.n	14c6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
   14c66:	e011      	b.n	14c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
   14c68:	f000 fe84 	bl	15974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   14c6c:	e008      	b.n	14c80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x234>
   14c6e:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
   14c72:	2301      	movs	r3, #1
   14c74:	210b      	movs	r1, #11
   14c76:	f105 0070 	add.w	r0, r5, #112	; 0x70
   14c7a:	f005 f901 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14c7e:	b138      	cbz	r0, 14c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
   14c80:	68a1      	ldr	r1, [r4, #8]
   14c82:	2000      	movs	r0, #0
   14c84:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   14c88:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
   14c8c:	2000      	movs	r0, #0
   14c8e:	bd70      	pop	{r4, r5, r6, pc}
   14c90:	202a      	movs	r0, #42	; 0x2a
   14c92:	e7e9      	b.n	14c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
   14c94:	20000134 	.word	0x20000134
   14c98:	4804      	ldr	r0, [pc, #16]	; (14cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
   14c9a:	2100      	movs	r1, #0
   14c9c:	6880      	ldr	r0, [r0, #8]
   14c9e:	f820 1fb0 	strh.w	r1, [r0, #176]!
   14ca2:	7881      	ldrb	r1, [r0, #2]
   14ca4:	1c49      	adds	r1, r1, #1
   14ca6:	7081      	strb	r1, [r0, #2]
   14ca8:	4770      	bx	lr
   14caa:	0000      	.short	0x0000
   14cac:	20000134 	.word	0x20000134
   14cb0:	4807      	ldr	r0, [pc, #28]	; (14cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>)
   14cb2:	b510      	push	{r4, lr}
   14cb4:	6881      	ldr	r1, [r0, #8]
   14cb6:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
   14cba:	1e40      	subs	r0, r0, #1
   14cbc:	b240      	sxtb	r0, r0
   14cbe:	7008      	strb	r0, [r1, #0]
   14cc0:	2800      	cmp	r0, #0
   14cc2:	da04      	bge.n	14cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
   14cc4:	f44f 71c9 	mov.w	r1, #402	; 0x192
   14cc8:	2031      	movs	r0, #49	; 0x31
   14cca:	f7fb fdfd 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14cce:	bd10      	pop	{r4, pc}
   14cd0:	20000134 	.word	0x20000134
   14cd4:	491a      	ldr	r1, [pc, #104]	; (14d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>)
   14cd6:	b508      	push	{r3, lr}
   14cd8:	6889      	ldr	r1, [r1, #8]
   14cda:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
   14cde:	b1b8      	cbz	r0, 14d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
   14ce0:	2a10      	cmp	r2, #16
   14ce2:	d006      	beq.n	14cf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a6>
   14ce4:	2a14      	cmp	r2, #20
   14ce6:	d007      	beq.n	14cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
   14ce8:	2a15      	cmp	r2, #21
   14cea:	d008      	beq.n	14cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
   14cec:	2a1b      	cmp	r2, #27
   14cee:	d122      	bne.n	14d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
   14cf0:	e008      	b.n	14d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>
   14cf2:	2101      	movs	r1, #1
   14cf4:	200b      	movs	r0, #11
   14cf6:	e007      	b.n	14d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
   14cf8:	f001 faac 	bl	16254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1808>
   14cfc:	e006      	b.n	14d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
   14cfe:	f000 fd59 	bl	157b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
   14d02:	e003      	b.n	14d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
   14d04:	2101      	movs	r1, #1
   14d06:	2006      	movs	r0, #6
   14d08:	f000 fd36 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   14d0c:	2001      	movs	r0, #1
   14d0e:	bd08      	pop	{r3, pc}
   14d10:	2a21      	cmp	r2, #33	; 0x21
   14d12:	d110      	bne.n	14d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
   14d14:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
   14d18:	2802      	cmp	r0, #2
   14d1a:	d00e      	beq.n	14d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
   14d1c:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
   14d20:	2801      	cmp	r0, #1
   14d22:	d108      	bne.n	14d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
   14d24:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
   14d28:	f88d 0000 	strb.w	r0, [sp]
   14d2c:	9800      	ldr	r0, [sp, #0]
   14d2e:	9000      	str	r0, [sp, #0]
   14d30:	f89d 0000 	ldrb.w	r0, [sp]
   14d34:	b108      	cbz	r0, 14d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
   14d36:	2000      	movs	r0, #0
   14d38:	bd08      	pop	{r3, pc}
   14d3a:	2101      	movs	r1, #1
   14d3c:	2017      	movs	r0, #23
   14d3e:	e7e3      	b.n	14d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
   14d40:	20000134 	.word	0x20000134
   14d44:	b538      	push	{r3, r4, r5, lr}
   14d46:	2800      	cmp	r0, #0
   14d48:	d16b      	bne.n	14e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
   14d4a:	4c37      	ldr	r4, [pc, #220]	; (14e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>)
   14d4c:	68a0      	ldr	r0, [r4, #8]
   14d4e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   14d52:	07ca      	lsls	r2, r1, #31
   14d54:	d002      	beq.n	14d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x310>
   14d56:	2101      	movs	r1, #1
   14d58:	2009      	movs	r0, #9
   14d5a:	e05b      	b.n	14e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
   14d5c:	078a      	lsls	r2, r1, #30
   14d5e:	d50a      	bpl.n	14d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32a>
   14d60:	2101      	movs	r1, #1
   14d62:	200c      	movs	r0, #12
   14d64:	f000 fd08 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   14d68:	68a0      	ldr	r0, [r4, #8]
   14d6a:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
   14d6e:	f041 0101 	orr.w	r1, r1, #1
   14d72:	7001      	strb	r1, [r0, #0]
   14d74:	e050      	b.n	14e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
   14d76:	074a      	lsls	r2, r1, #29
   14d78:	d502      	bpl.n	14d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
   14d7a:	2101      	movs	r1, #1
   14d7c:	2013      	movs	r0, #19
   14d7e:	e049      	b.n	14e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
   14d80:	070a      	lsls	r2, r1, #28
   14d82:	d505      	bpl.n	14d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
   14d84:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
   14d88:	7141      	strb	r1, [r0, #5]
   14d8a:	2101      	movs	r1, #1
   14d8c:	2007      	movs	r0, #7
   14d8e:	e041      	b.n	14e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
   14d90:	f011 0f30 	tst.w	r1, #48	; 0x30
   14d94:	d045      	beq.n	14e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
   14d96:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
   14d9a:	f88d 1000 	strb.w	r1, [sp]
   14d9e:	9900      	ldr	r1, [sp, #0]
   14da0:	9100      	str	r1, [sp, #0]
   14da2:	f89d 1000 	ldrb.w	r1, [sp]
   14da6:	bbc9      	cbnz	r1, 14e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
   14da8:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   14dac:	f88d 1000 	strb.w	r1, [sp]
   14db0:	9900      	ldr	r1, [sp, #0]
   14db2:	9100      	str	r1, [sp, #0]
   14db4:	f89d 1000 	ldrb.w	r1, [sp]
   14db8:	b1c9      	cbz	r1, 14dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a2>
   14dba:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   14dbe:	2924      	cmp	r1, #36	; 0x24
   14dc0:	d02d      	beq.n	14e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
   14dc2:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   14dc6:	2924      	cmp	r1, #36	; 0x24
   14dc8:	d029      	beq.n	14e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
   14dca:	2300      	movs	r3, #0
   14dcc:	f500 72cb 	add.w	r2, r0, #406	; 0x196
   14dd0:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
   14dd4:	f005 fc80 	bl	1a6d8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   14dd8:	68a0      	ldr	r0, [r4, #8]
   14dda:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   14dde:	f021 0120 	bic.w	r1, r1, #32
   14de2:	f041 0110 	orr.w	r1, r1, #16
   14de6:	7001      	strb	r1, [r0, #0]
   14de8:	2100      	movs	r1, #0
   14dea:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
   14dee:	68a0      	ldr	r0, [r4, #8]
   14df0:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   14df4:	06c9      	lsls	r1, r1, #27
   14df6:	d514      	bpl.n	14e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
   14df8:	f005 fc89 	bl	1a70e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   14dfc:	f000 f910 	bl	15020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
   14e00:	68a1      	ldr	r1, [r4, #8]
   14e02:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   14e06:	8bc2      	ldrh	r2, [r0, #30]
   14e08:	f821 2fee 	strh.w	r2, [r1, #238]!
   14e0c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   14e0e:	8048      	strh	r0, [r1, #2]
   14e10:	2101      	movs	r1, #1
   14e12:	2015      	movs	r0, #21
   14e14:	f000 fcb0 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   14e18:	2001      	movs	r0, #1
   14e1a:	bd38      	pop	{r3, r4, r5, pc}
   14e1c:	e001      	b.n	14e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
   14e1e:	2301      	movs	r3, #1
   14e20:	e7d4      	b.n	14dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
   14e22:	2000      	movs	r0, #0
   14e24:	e7f9      	b.n	14e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ce>
   14e26:	0000      	.short	0x0000
   14e28:	20000134 	.word	0x20000134
   14e2c:	b570      	push	{r4, r5, r6, lr}
   14e2e:	460d      	mov	r5, r1
   14e30:	4606      	mov	r6, r0
   14e32:	f005 fa93 	bl	1a35c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
   14e36:	4604      	mov	r4, r0
   14e38:	4630      	mov	r0, r6
   14e3a:	f005 fa9b 	bl	1a374 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
   14e3e:	4629      	mov	r1, r5
   14e40:	f000 f81e 	bl	14e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>
   14e44:	b1b8      	cbz	r0, 14e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
   14e46:	4620      	mov	r0, r4
   14e48:	f005 f8b3 	bl	19fb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   14e4c:	0001      	movs	r1, r0
   14e4e:	d00d      	beq.n	14e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
   14e50:	480a      	ldr	r0, [pc, #40]	; (14e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>)
   14e52:	6880      	ldr	r0, [r0, #8]
   14e54:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
   14e58:	428a      	cmp	r2, r1
   14e5a:	d007      	beq.n	14e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
   14e5c:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
   14e60:	2901      	cmp	r1, #1
   14e62:	d005      	beq.n	14e70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
   14e64:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   14e68:	4220      	tst	r0, r4
   14e6a:	d004      	beq.n	14e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
   14e6c:	2001      	movs	r0, #1
   14e6e:	bd70      	pop	{r4, r5, r6, pc}
   14e70:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
   14e74:	e7f8      	b.n	14e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
   14e76:	2000      	movs	r0, #0
   14e78:	bd70      	pop	{r4, r5, r6, pc}
   14e7a:	0000      	.short	0x0000
   14e7c:	20000134 	.word	0x20000134
   14e80:	b570      	push	{r4, r5, r6, lr}
   14e82:	460d      	mov	r5, r1
   14e84:	4604      	mov	r4, r0
   14e86:	f005 f894 	bl	19fb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   14e8a:	b350      	cbz	r0, 14ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   14e8c:	4916      	ldr	r1, [pc, #88]	; (14ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>)
   14e8e:	6889      	ldr	r1, [r1, #8]
   14e90:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
   14e94:	4282      	cmp	r2, r0
   14e96:	d024      	beq.n	14ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   14e98:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
   14e9c:	2b01      	cmp	r3, #1
   14e9e:	d005      	beq.n	14eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
   14ea0:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
   14ea4:	4223      	tst	r3, r4
   14ea6:	d013      	beq.n	14ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
   14ea8:	b11d      	cbz	r5, 14eb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
   14eaa:	e01a      	b.n	14ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   14eac:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
   14eb0:	e7f8      	b.n	14ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
   14eb2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
   14eb6:	4221      	tst	r1, r4
   14eb8:	d113      	bne.n	14ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   14eba:	b15a      	cbz	r2, 14ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
   14ebc:	2a04      	cmp	r2, #4
   14ebe:	d00e      	beq.n	14ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
   14ec0:	2804      	cmp	r0, #4
   14ec2:	d00c      	beq.n	14ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
   14ec4:	2a08      	cmp	r2, #8
   14ec6:	d00a      	beq.n	14ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
   14ec8:	2808      	cmp	r0, #8
   14eca:	d008      	beq.n	14ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
   14ecc:	4282      	cmp	r2, r0
   14ece:	d908      	bls.n	14ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
   14ed0:	2000      	movs	r0, #0
   14ed2:	bd70      	pop	{r4, r5, r6, pc}
   14ed4:	f240 1155 	movw	r1, #341	; 0x155
   14ed8:	2006      	movs	r0, #6
   14eda:	f7fb fcf5 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14ede:	4282      	cmp	r2, r0
   14ee0:	d3f6      	bcc.n	14ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
   14ee2:	2001      	movs	r0, #1
   14ee4:	bd70      	pop	{r4, r5, r6, pc}
   14ee6:	0000      	.short	0x0000
   14ee8:	20000134 	.word	0x20000134
   14eec:	490c      	ldr	r1, [pc, #48]	; (14f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d4>)
   14eee:	4602      	mov	r2, r0
   14ef0:	7848      	ldrb	r0, [r1, #1]
   14ef2:	b998      	cbnz	r0, 14f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
   14ef4:	4608      	mov	r0, r1
   14ef6:	6880      	ldr	r0, [r0, #8]
   14ef8:	b142      	cbz	r2, 14f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>
   14efa:	7889      	ldrb	r1, [r1, #2]
   14efc:	0709      	lsls	r1, r1, #28
   14efe:	d503      	bpl.n	14f08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
   14f00:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
   14f04:	2808      	cmp	r0, #8
   14f06:	d009      	beq.n	14f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
   14f08:	2001      	movs	r0, #1
   14f0a:	4770      	bx	lr
   14f0c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   14f10:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   14f12:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   14f14:	428a      	cmp	r2, r1
   14f16:	d801      	bhi.n	14f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
   14f18:	f7ff b81a 	b.w	13f50 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
   14f1c:	2000      	movs	r0, #0
   14f1e:	4770      	bx	lr
   14f20:	20000134 	.word	0x20000134
   14f24:	b538      	push	{r3, r4, r5, lr}
   14f26:	4c3d      	ldr	r4, [pc, #244]	; (1501c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>)
   14f28:	4605      	mov	r5, r0
   14f2a:	68a0      	ldr	r0, [r4, #8]
   14f2c:	3070      	adds	r0, #112	; 0x70
   14f2e:	f006 fb4f 	bl	1b5d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   14f32:	2800      	cmp	r0, #0
   14f34:	d170      	bne.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14f36:	2d00      	cmp	r5, #0
   14f38:	d16e      	bne.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14f3a:	68a0      	ldr	r0, [r4, #8]
   14f3c:	2301      	movs	r3, #1
   14f3e:	4619      	mov	r1, r3
   14f40:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   14f44:	3070      	adds	r0, #112	; 0x70
   14f46:	f004 ff9b 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14f4a:	2800      	cmp	r0, #0
   14f4c:	d164      	bne.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14f4e:	68a0      	ldr	r0, [r4, #8]
   14f50:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
   14f54:	f88d 1000 	strb.w	r1, [sp]
   14f58:	9900      	ldr	r1, [sp, #0]
   14f5a:	9100      	str	r1, [sp, #0]
   14f5c:	f89d 1000 	ldrb.w	r1, [sp]
   14f60:	b149      	cbz	r1, 14f76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
   14f62:	2100      	movs	r1, #0
   14f64:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
   14f68:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
   14f6c:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
   14f70:	2100      	movs	r1, #0
   14f72:	2002      	movs	r0, #2
   14f74:	e045      	b.n	15002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
   14f76:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   14f7a:	2301      	movs	r3, #1
   14f7c:	2104      	movs	r1, #4
   14f7e:	3070      	adds	r0, #112	; 0x70
   14f80:	f004 ff7e 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14f84:	4605      	mov	r5, r0
   14f86:	f7ff fedd 	bl	14d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
   14f8a:	2800      	cmp	r0, #0
   14f8c:	d144      	bne.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14f8e:	4628      	mov	r0, r5
   14f90:	f7ff fea0 	bl	14cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
   14f94:	2800      	cmp	r0, #0
   14f96:	d13f      	bne.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14f98:	68a0      	ldr	r0, [r4, #8]
   14f9a:	2301      	movs	r3, #1
   14f9c:	2100      	movs	r1, #0
   14f9e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   14fa2:	3070      	adds	r0, #112	; 0x70
   14fa4:	f004 ff6c 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14fa8:	b178      	cbz	r0, 14fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
   14faa:	68a0      	ldr	r0, [r4, #8]
   14fac:	2301      	movs	r3, #1
   14fae:	2104      	movs	r1, #4
   14fb0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   14fb4:	3070      	adds	r0, #112	; 0x70
   14fb6:	f004 ff63 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14fba:	b930      	cbnz	r0, 14fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
   14fbc:	68a0      	ldr	r0, [r4, #8]
   14fbe:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
   14fc2:	b110      	cbz	r0, 14fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
   14fc4:	2100      	movs	r1, #0
   14fc6:	2012      	movs	r0, #18
   14fc8:	e01b      	b.n	15002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
   14fca:	68a0      	ldr	r0, [r4, #8]
   14fcc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   14fd0:	290a      	cmp	r1, #10
   14fd2:	d01a      	beq.n	1500a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
   14fd4:	2d00      	cmp	r5, #0
   14fd6:	d11f      	bne.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14fd8:	f000 fb1a 	bl	15610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
   14fdc:	2800      	cmp	r0, #0
   14fde:	d11b      	bne.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14fe0:	68a0      	ldr	r0, [r4, #8]
   14fe2:	2301      	movs	r3, #1
   14fe4:	2100      	movs	r1, #0
   14fe6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   14fea:	3070      	adds	r0, #112	; 0x70
   14fec:	f004 ff48 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14ff0:	2800      	cmp	r0, #0
   14ff2:	d011      	beq.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14ff4:	68a0      	ldr	r0, [r4, #8]
   14ff6:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
   14ffa:	2800      	cmp	r0, #0
   14ffc:	d00c      	beq.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   14ffe:	2100      	movs	r1, #0
   15000:	20ff      	movs	r0, #255	; 0xff
   15002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15006:	f000 bbb7 	b.w	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   1500a:	f810 1fea 	ldrb.w	r1, [r0, #234]!
   1500e:	7101      	strb	r1, [r0, #4]
   15010:	2100      	movs	r1, #0
   15012:	2007      	movs	r0, #7
   15014:	e7f5      	b.n	15002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
   15016:	e7ff      	b.n	15018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
   15018:	bd38      	pop	{r3, r4, r5, pc}
   1501a:	0000      	.short	0x0000
   1501c:	20000134 	.word	0x20000134
   15020:	480a      	ldr	r0, [pc, #40]	; (1504c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>)
   15022:	b510      	push	{r4, lr}
   15024:	6881      	ldr	r1, [r0, #8]
   15026:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
   1502a:	2801      	cmp	r0, #1
   1502c:	d009      	beq.n	15042 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
   1502e:	8808      	ldrh	r0, [r1, #0]
   15030:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
   15034:	312c      	adds	r1, #44	; 0x2c
   15036:	f005 fb2b 	bl	1a690 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   1503a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1503e:	f7fd bdcf 	b.w	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   15042:	2002      	movs	r0, #2
   15044:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
   15048:	bd10      	pop	{r4, pc}
   1504a:	0000      	.short	0x0000
   1504c:	20000134 	.word	0x20000134
   15050:	b570      	push	{r4, r5, r6, lr}
   15052:	4c25      	ldr	r4, [pc, #148]	; (150e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
   15054:	0005      	movs	r5, r0
   15056:	d12f      	bne.n	150b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
   15058:	f000 f8a4 	bl	151a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
   1505c:	f000 f848 	bl	150f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
   15060:	0005      	movs	r5, r0
   15062:	d129      	bne.n	150b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
   15064:	8860      	ldrh	r0, [r4, #2]
   15066:	0741      	lsls	r1, r0, #29
   15068:	d506      	bpl.n	15078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
   1506a:	68a1      	ldr	r1, [r4, #8]
   1506c:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
   15070:	2907      	cmp	r1, #7
   15072:	d101      	bne.n	15078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
   15074:	2101      	movs	r1, #1
   15076:	7021      	strb	r1, [r4, #0]
   15078:	0780      	lsls	r0, r0, #30
   1507a:	d512      	bpl.n	150a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
   1507c:	68e0      	ldr	r0, [r4, #12]
   1507e:	78c0      	ldrb	r0, [r0, #3]
   15080:	2819      	cmp	r0, #25
   15082:	d205      	bcs.n	15090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
   15084:	4919      	ldr	r1, [pc, #100]	; (150ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
   15086:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1508a:	b109      	cbz	r1, 15090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
   1508c:	4788      	blx	r1
   1508e:	e008      	b.n	150a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
   15090:	28ff      	cmp	r0, #255	; 0xff
   15092:	d004      	beq.n	1509e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
   15094:	f240 714d 	movw	r1, #1869	; 0x74d
   15098:	2031      	movs	r0, #49	; 0x31
   1509a:	f7fb fc15 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1509e:	f001 f91b 	bl	162d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
   150a2:	78a0      	ldrb	r0, [r4, #2]
   150a4:	06c0      	lsls	r0, r0, #27
   150a6:	d507      	bpl.n	150b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
   150a8:	68a0      	ldr	r0, [r4, #8]
   150aa:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   150ae:	290b      	cmp	r1, #11
   150b0:	d102      	bne.n	150b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
   150b2:	210c      	movs	r1, #12
   150b4:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   150b8:	7860      	ldrb	r0, [r4, #1]
   150ba:	0700      	lsls	r0, r0, #28
   150bc:	d511      	bpl.n	150e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
   150be:	68a0      	ldr	r0, [r4, #8]
   150c0:	2301      	movs	r3, #1
   150c2:	2105      	movs	r1, #5
   150c4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   150c8:	3070      	adds	r0, #112	; 0x70
   150ca:	f004 fed9 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   150ce:	b128      	cbz	r0, 150dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x690>
   150d0:	68a1      	ldr	r1, [r4, #8]
   150d2:	2508      	movs	r5, #8
   150d4:	2000      	movs	r0, #0
   150d6:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
   150da:	e002      	b.n	150e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
   150dc:	2000      	movs	r0, #0
   150de:	f7fc fc4d 	bl	1197c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   150e2:	4628      	mov	r0, r5
   150e4:	bd70      	pop	{r4, r5, r6, pc}
   150e6:	0000      	.short	0x0000
   150e8:	20000134 	.word	0x20000134
   150ec:	200001ac 	.word	0x200001ac
   150f0:	b570      	push	{r4, r5, r6, lr}
   150f2:	4c2a      	ldr	r4, [pc, #168]	; (1519c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
   150f4:	2000      	movs	r0, #0
   150f6:	78a1      	ldrb	r1, [r4, #2]
   150f8:	07c9      	lsls	r1, r1, #31
   150fa:	d015      	beq.n	15128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6dc>
   150fc:	6920      	ldr	r0, [r4, #16]
   150fe:	2301      	movs	r3, #1
   15100:	2105      	movs	r1, #5
   15102:	78c5      	ldrb	r5, [r0, #3]
   15104:	68a0      	ldr	r0, [r4, #8]
   15106:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   1510a:	3070      	adds	r0, #112	; 0x70
   1510c:	f004 feb8 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15110:	b158      	cbz	r0, 1512a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
   15112:	1ead      	subs	r5, r5, #2
   15114:	2d0a      	cmp	r5, #10
   15116:	d206      	bcs.n	15126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
   15118:	e8df f005 	tbb	[pc, r5]
   1511c:	05050707 	.word	0x05050707
   15120:	05050707 	.word	0x05050707
   15124:	0707      	.short	0x0707
   15126:	2008      	movs	r0, #8
   15128:	bd70      	pop	{r4, r5, r6, pc}
   1512a:	6920      	ldr	r0, [r4, #16]
   1512c:	f7fd fc34 	bl	12998 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
   15130:	b138      	cbz	r0, 15142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f6>
   15132:	6920      	ldr	r0, [r4, #16]
   15134:	78c5      	ldrb	r5, [r0, #3]
   15136:	b145      	cbz	r5, 1514a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
   15138:	2d01      	cmp	r5, #1
   1513a:	d006      	beq.n	1514a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
   1513c:	2d16      	cmp	r5, #22
   1513e:	d118      	bne.n	15172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
   15140:	e003      	b.n	1514a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
   15142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15146:	f000 bd3d 	b.w	15bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   1514a:	68a0      	ldr	r0, [r4, #8]
   1514c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
   15150:	f004 fee4 	bl	19f1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   15154:	b168      	cbz	r0, 15172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
   15156:	68a1      	ldr	r1, [r4, #8]
   15158:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
   1515c:	281f      	cmp	r0, #31
   1515e:	d008      	beq.n	15172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
   15160:	2820      	cmp	r0, #32
   15162:	d003      	beq.n	1516c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x720>
   15164:	2d16      	cmp	r5, #22
   15166:	d00c      	beq.n	15182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
   15168:	2002      	movs	r0, #2
   1516a:	bd70      	pop	{r4, r5, r6, pc}
   1516c:	2026      	movs	r0, #38	; 0x26
   1516e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   15172:	2d19      	cmp	r5, #25
   15174:	d207      	bcs.n	15186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
   15176:	480a      	ldr	r0, [pc, #40]	; (151a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
   15178:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   1517c:	b118      	cbz	r0, 15186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
   1517e:	4780      	blx	r0
   15180:	e003      	b.n	1518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
   15182:	2020      	movs	r0, #32
   15184:	bd70      	pop	{r4, r5, r6, pc}
   15186:	f000 fd1d 	bl	15bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   1518a:	68a2      	ldr	r2, [r4, #8]
   1518c:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
   15190:	1c49      	adds	r1, r1, #1
   15192:	f143 0300 	adc.w	r3, r3, #0
   15196:	e9c2 1300 	strd	r1, r3, [r2]
   1519a:	bd70      	pop	{r4, r5, r6, pc}
   1519c:	20000134 	.word	0x20000134
   151a0:	20000148 	.word	0x20000148
   151a4:	b570      	push	{r4, r5, r6, lr}
   151a6:	4c22      	ldr	r4, [pc, #136]	; (15230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
   151a8:	78a0      	ldrb	r0, [r4, #2]
   151aa:	0700      	lsls	r0, r0, #28
   151ac:	d53e      	bpl.n	1522c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
   151ae:	68a0      	ldr	r0, [r4, #8]
   151b0:	3070      	adds	r0, #112	; 0x70
   151b2:	f006 fa0d 	bl	1b5d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   151b6:	b148      	cbz	r0, 151cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
   151b8:	68a0      	ldr	r0, [r4, #8]
   151ba:	21fe      	movs	r1, #254	; 0xfe
   151bc:	2500      	movs	r5, #0
   151be:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
   151c2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   151c6:	2919      	cmp	r1, #25
   151c8:	d10c      	bne.n	151e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
   151ca:	e004      	b.n	151d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
   151cc:	f240 7157 	movw	r1, #1879	; 0x757
   151d0:	2031      	movs	r0, #49	; 0x31
   151d2:	f7fb fb79 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   151d6:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
   151da:	f7ff fd69 	bl	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   151de:	68a0      	ldr	r0, [r4, #8]
   151e0:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
   151e4:	68a0      	ldr	r0, [r4, #8]
   151e6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   151ea:	291f      	cmp	r1, #31
   151ec:	d002      	beq.n	151f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
   151ee:	2927      	cmp	r1, #39	; 0x27
   151f0:	d113      	bne.n	1521a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
   151f2:	e00b      	b.n	1520c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
   151f4:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   151f8:	f004 fe90 	bl	19f1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   151fc:	b108      	cbz	r0, 15202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
   151fe:	2026      	movs	r0, #38	; 0x26
   15200:	e000      	b.n	15204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
   15202:	2020      	movs	r0, #32
   15204:	68a1      	ldr	r1, [r4, #8]
   15206:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   1520a:	e006      	b.n	1521a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
   1520c:	2101      	movs	r1, #1
   1520e:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
   15212:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
   15216:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
   1521a:	68a0      	ldr	r0, [r4, #8]
   1521c:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
   15220:	2908      	cmp	r1, #8
   15222:	d103      	bne.n	1522c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
   15224:	2102      	movs	r1, #2
   15226:	7021      	strb	r1, [r4, #0]
   15228:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
   1522c:	bd70      	pop	{r4, r5, r6, pc}
   1522e:	0000      	.short	0x0000
   15230:	20000134 	.word	0x20000134
   15234:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   15236:	4605      	mov	r5, r0
   15238:	4668      	mov	r0, sp
   1523a:	f7fc fa09 	bl	11650 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
   1523e:	b318      	cbz	r0, 15288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
   15240:	2222      	movs	r2, #34	; 0x22
   15242:	2100      	movs	r1, #0
   15244:	9800      	ldr	r0, [sp, #0]
   15246:	f003 fc28 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1524a:	2103      	movs	r1, #3
   1524c:	9800      	ldr	r0, [sp, #0]
   1524e:	f005 f8e5 	bl	1a41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
   15252:	9800      	ldr	r0, [sp, #0]
   15254:	7801      	ldrb	r1, [r0, #0]
   15256:	f021 0110 	bic.w	r1, r1, #16
   1525a:	7001      	strb	r1, [r0, #0]
   1525c:	4629      	mov	r1, r5
   1525e:	f7fd fbc7 	bl	129f0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
   15262:	2100      	movs	r1, #0
   15264:	4c5f      	ldr	r4, [pc, #380]	; (153e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
   15266:	f644 162f 	movw	r6, #18735	; 0x492f
   1526a:	2d0e      	cmp	r5, #14
   1526c:	d07e      	beq.n	1536c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
   1526e:	dc0e      	bgt.n	1528e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
   15270:	f1a5 0502 	sub.w	r5, r5, #2
   15274:	2d0c      	cmp	r5, #12
   15276:	d21c      	bcs.n	152b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
   15278:	e8df f005 	tbb	[pc, r5]
   1527c:	aa491b1e 	.word	0xaa491b1e
   15280:	551b1eaa 	.word	0x551b1eaa
   15284:	3034aa1b 	.word	0x3034aa1b
   15288:	f640 1187 	movw	r1, #2439	; 0x987
   1528c:	e0a6      	b.n	153dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
   1528e:	2d15      	cmp	r5, #21
   15290:	d05c      	beq.n	1534c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
   15292:	dc08      	bgt.n	152a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
   15294:	2d11      	cmp	r5, #17
   15296:	d014      	beq.n	152c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x876>
   15298:	2d12      	cmp	r5, #18
   1529a:	d01e      	beq.n	152da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
   1529c:	2d13      	cmp	r5, #19
   1529e:	d01c      	beq.n	152da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
   152a0:	2d14      	cmp	r5, #20
   152a2:	d106      	bne.n	152b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
   152a4:	e052      	b.n	1534c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
   152a6:	2d16      	cmp	r5, #22
   152a8:	d027      	beq.n	152fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ae>
   152aa:	2d17      	cmp	r5, #23
   152ac:	d069      	beq.n	15382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x936>
   152ae:	2dff      	cmp	r5, #255	; 0xff
   152b0:	d072      	beq.n	15398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
   152b2:	f640 11fd 	movw	r1, #2557	; 0x9fd
   152b6:	e091      	b.n	153dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
   152b8:	68a1      	ldr	r1, [r4, #8]
   152ba:	9800      	ldr	r0, [sp, #0]
   152bc:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
   152c0:	e00e      	b.n	152e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
   152c2:	68a0      	ldr	r0, [r4, #8]
   152c4:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
   152c8:	9800      	ldr	r0, [sp, #0]
   152ca:	f005 f883 	bl	1a3d4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
   152ce:	68a0      	ldr	r0, [r4, #8]
   152d0:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
   152d4:	9800      	ldr	r0, [sp, #0]
   152d6:	f005 f87f 	bl	1a3d8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
   152da:	e079      	b.n	153d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   152dc:	9800      	ldr	r0, [sp, #0]
   152de:	2106      	movs	r1, #6
   152e0:	7101      	strb	r1, [r0, #4]
   152e2:	e075      	b.n	153d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   152e4:	9800      	ldr	r0, [sp, #0]
   152e6:	220b      	movs	r2, #11
   152e8:	7102      	strb	r2, [r0, #4]
   152ea:	2259      	movs	r2, #89	; 0x59
   152ec:	7142      	strb	r2, [r0, #5]
   152ee:	7181      	strb	r1, [r0, #6]
   152f0:	21fe      	movs	r1, #254	; 0xfe
   152f2:	71c1      	strb	r1, [r0, #7]
   152f4:	2112      	movs	r1, #18
   152f6:	7201      	strb	r1, [r0, #8]
   152f8:	e06a      	b.n	153d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   152fa:	9800      	ldr	r0, [sp, #0]
   152fc:	f8d4 1008 	ldr.w	r1, [r4, #8]
   15300:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
   15304:	7102      	strb	r2, [r0, #4]
   15306:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
   1530a:	7141      	strb	r1, [r0, #5]
   1530c:	e060      	b.n	153d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   1530e:	68a1      	ldr	r1, [r4, #8]
   15310:	9800      	ldr	r0, [sp, #0]
   15312:	f501 718c 	add.w	r1, r1, #280	; 0x118
   15316:	f005 f872 	bl	1a3fe <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
   1531a:	68a1      	ldr	r1, [r4, #8]
   1531c:	9800      	ldr	r0, [sp, #0]
   1531e:	31e4      	adds	r1, #228	; 0xe4
   15320:	f005 f86a 	bl	1a3f8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
   15324:	e054      	b.n	153d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   15326:	9101      	str	r1, [sp, #4]
   15328:	9102      	str	r1, [sp, #8]
   1532a:	f001 fe05 	bl	16f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1532e:	68a1      	ldr	r1, [r4, #8]
   15330:	4030      	ands	r0, r6
   15332:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
   15336:	4001      	ands	r1, r0
   15338:	f88d 1004 	strb.w	r1, [sp, #4]
   1533c:	0a00      	lsrs	r0, r0, #8
   1533e:	f88d 0005 	strb.w	r0, [sp, #5]
   15342:	a901      	add	r1, sp, #4
   15344:	9800      	ldr	r0, [sp, #0]
   15346:	f005 f864 	bl	1a412 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
   1534a:	e041      	b.n	153d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   1534c:	68a0      	ldr	r0, [r4, #8]
   1534e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
   15352:	9800      	ldr	r0, [sp, #0]
   15354:	f005 f86a 	bl	1a42c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
   15358:	68a0      	ldr	r0, [r4, #8]
   1535a:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
   1535e:	9800      	ldr	r0, [sp, #0]
   15360:	f005 f868 	bl	1a434 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
   15364:	68a0      	ldr	r0, [r4, #8]
   15366:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
   1536a:	e000      	b.n	1536e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
   1536c:	e015      	b.n	1539a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
   1536e:	9800      	ldr	r0, [sp, #0]
   15370:	f005 f864 	bl	1a43c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
   15374:	68a0      	ldr	r0, [r4, #8]
   15376:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
   1537a:	9800      	ldr	r0, [sp, #0]
   1537c:	f005 f862 	bl	1a444 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
   15380:	e026      	b.n	153d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   15382:	68a1      	ldr	r1, [r4, #8]
   15384:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
   15388:	2801      	cmp	r0, #1
   1538a:	9800      	ldr	r0, [sp, #0]
   1538c:	d0b8      	beq.n	15300 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b4>
   1538e:	f811 2f66 	ldrb.w	r2, [r1, #102]!
   15392:	7102      	strb	r2, [r0, #4]
   15394:	7849      	ldrb	r1, [r1, #1]
   15396:	e7b8      	b.n	1530a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
   15398:	e012      	b.n	153c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x974>
   1539a:	9101      	str	r1, [sp, #4]
   1539c:	9102      	str	r1, [sp, #8]
   1539e:	f001 fdcb 	bl	16f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   153a2:	68a1      	ldr	r1, [r4, #8]
   153a4:	4030      	ands	r0, r6
   153a6:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
   153aa:	4001      	ands	r1, r0
   153ac:	f88d 1004 	strb.w	r1, [sp, #4]
   153b0:	0a00      	lsrs	r0, r0, #8
   153b2:	f88d 0005 	strb.w	r0, [sp, #5]
   153b6:	a901      	add	r1, sp, #4
   153b8:	9800      	ldr	r0, [sp, #0]
   153ba:	f005 f825 	bl	1a408 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
   153be:	e007      	b.n	153d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
   153c0:	68a0      	ldr	r0, [r4, #8]
   153c2:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
   153c6:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
   153ca:	9800      	ldr	r0, [sp, #0]
   153cc:	f005 f806 	bl	1a3dc <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
   153d0:	f7fc f918 	bl	11604 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
   153d4:	2800      	cmp	r0, #0
   153d6:	d104      	bne.n	153e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
   153d8:	f640 2101 	movw	r1, #2561	; 0xa01
   153dc:	2031      	movs	r0, #49	; 0x31
   153de:	f7fb fa73 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   153e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   153e4:	20000134 	.word	0x20000134
   153e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   153ec:	4c87      	ldr	r4, [pc, #540]	; (1560c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
   153ee:	4682      	mov	sl, r0
   153f0:	4689      	mov	r9, r1
   153f2:	68a0      	ldr	r0, [r4, #8]
   153f4:	8800      	ldrh	r0, [r0, #0]
   153f6:	f7fb fe97 	bl	11128 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   153fa:	0006      	movs	r6, r0
   153fc:	d00a      	beq.n	15414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
   153fe:	8860      	ldrh	r0, [r4, #2]
   15400:	f04f 0500 	mov.w	r5, #0
   15404:	05c0      	lsls	r0, r0, #23
   15406:	68a0      	ldr	r0, [r4, #8]
   15408:	d509      	bpl.n	1541e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
   1540a:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
   1540e:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
   15412:	e008      	b.n	15426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
   15414:	f640 51a7 	movw	r1, #3495	; 0xda7
   15418:	2031      	movs	r0, #49	; 0x31
   1541a:	f7fb fa55 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1541e:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
   15422:	1c49      	adds	r1, r1, #1
   15424:	8001      	strh	r1, [r0, #0]
   15426:	f001 f8f3 	bl	16610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
   1542a:	f04f 0801 	mov.w	r8, #1
   1542e:	b320      	cbz	r0, 1547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
   15430:	8860      	ldrh	r0, [r4, #2]
   15432:	0500      	lsls	r0, r0, #20
   15434:	d506      	bpl.n	15444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
   15436:	68a0      	ldr	r0, [r4, #8]
   15438:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
   1543c:	b111      	cbz	r1, 15444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
   1543e:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
   15442:	e01a      	b.n	1547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
   15444:	68a0      	ldr	r0, [r4, #8]
   15446:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   1544a:	1c49      	adds	r1, r1, #1
   1544c:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
   15450:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15454:	428b      	cmp	r3, r1
   15456:	d301      	bcc.n	1545c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
   15458:	1a5a      	subs	r2, r3, r1
   1545a:	e000      	b.n	1545e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
   1545c:	2200      	movs	r2, #0
   1545e:	88a7      	ldrh	r7, [r4, #4]
   15460:	1d7f      	adds	r7, r7, #5
   15462:	42ba      	cmp	r2, r7
   15464:	d801      	bhi.n	1546a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
   15466:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
   1546a:	4299      	cmp	r1, r3
   1546c:	d305      	bcc.n	1547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
   1546e:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
   15472:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
   15476:	f7fd fbb3 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1547a:	8860      	ldrh	r0, [r4, #2]
   1547c:	f04f 0702 	mov.w	r7, #2
   15480:	f410 7f40 	tst.w	r0, #768	; 0x300
   15484:	d00e      	beq.n	154a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
   15486:	68a0      	ldr	r0, [r4, #8]
   15488:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
   1548c:	b111      	cbz	r1, 15494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa48>
   1548e:	2903      	cmp	r1, #3
   15490:	d108      	bne.n	154a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
   15492:	e002      	b.n	1549a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4e>
   15494:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
   15498:	e001      	b.n	1549e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa52>
   1549a:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
   1549e:	2101      	movs	r1, #1
   154a0:	f7fe fd7c 	bl	13f9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   154a4:	68a0      	ldr	r0, [r4, #8]
   154a6:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
   154aa:	2901      	cmp	r1, #1
   154ac:	d104      	bne.n	154b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
   154ae:	8861      	ldrh	r1, [r4, #2]
   154b0:	0549      	lsls	r1, r1, #21
   154b2:	d501      	bpl.n	154b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
   154b4:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
   154b8:	f1ba 0f00 	cmp.w	sl, #0
   154bc:	d176      	bne.n	155ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
   154be:	78a1      	ldrb	r1, [r4, #2]
   154c0:	0649      	lsls	r1, r1, #25
   154c2:	d502      	bpl.n	154ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
   154c4:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
   154c8:	e004      	b.n	154d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa88>
   154ca:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
   154ce:	1c49      	adds	r1, r1, #1
   154d0:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
   154d4:	4648      	mov	r0, r9
   154d6:	f7ff fdbb 	bl	15050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x604>
   154da:	ea40 0009 	orr.w	r0, r0, r9
   154de:	4681      	mov	r9, r0
   154e0:	f7ff fd20 	bl	14f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
   154e4:	68a7      	ldr	r7, [r4, #8]
   154e6:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
   154ea:	1c40      	adds	r0, r0, #1
   154ec:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
   154f0:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
   154f4:	b128      	cbz	r0, 15502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab6>
   154f6:	f7fc faaf 	bl	11a58 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
   154fa:	b1b0      	cbz	r0, 1552a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
   154fc:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
   15500:	e013      	b.n	1552a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
   15502:	f7fc f927 	bl	11754 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
   15506:	b108      	cbz	r0, 1550c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac0>
   15508:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
   1550c:	f7fc f91c 	bl	11748 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
   15510:	b158      	cbz	r0, 1552a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
   15512:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
   15516:	1c40      	adds	r0, r0, #1
   15518:	b2c0      	uxtb	r0, r0
   1551a:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
   1551e:	2802      	cmp	r0, #2
   15520:	d903      	bls.n	1552a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
   15522:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
   15526:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
   1552a:	68a0      	ldr	r0, [r4, #8]
   1552c:	2301      	movs	r3, #1
   1552e:	2100      	movs	r1, #0
   15530:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15534:	3070      	adds	r0, #112	; 0x70
   15536:	f004 fca3 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1553a:	b920      	cbnz	r0, 15546 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafa>
   1553c:	68a0      	ldr	r0, [r4, #8]
   1553e:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   15542:	280c      	cmp	r0, #12
   15544:	d15e      	bne.n	15604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
   15546:	68a0      	ldr	r0, [r4, #8]
   15548:	2301      	movs	r3, #1
   1554a:	2100      	movs	r1, #0
   1554c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   15550:	3070      	adds	r0, #112	; 0x70
   15552:	f004 fc95 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15556:	b350      	cbz	r0, 155ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   15558:	68a0      	ldr	r0, [r4, #8]
   1555a:	2301      	movs	r3, #1
   1555c:	2100      	movs	r1, #0
   1555e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   15562:	3070      	adds	r0, #112	; 0x70
   15564:	f004 fc8c 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15568:	b308      	cbz	r0, 155ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   1556a:	68a0      	ldr	r0, [r4, #8]
   1556c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
   15570:	2902      	cmp	r1, #2
   15572:	d147      	bne.n	15604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
   15574:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
   15578:	b9c8      	cbnz	r0, 155ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   1557a:	4630      	mov	r0, r6
   1557c:	f003 ff5c 	bl	19438 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   15580:	b1a8      	cbz	r0, 155ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   15582:	68a0      	ldr	r0, [r4, #8]
   15584:	3070      	adds	r0, #112	; 0x70
   15586:	f006 f823 	bl	1b5d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   1558a:	b980      	cbnz	r0, 155ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   1558c:	68a1      	ldr	r1, [r4, #8]
   1558e:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
   15592:	2801      	cmp	r0, #1
   15594:	d936      	bls.n	15604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
   15596:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
   1559a:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
   1559e:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
   155a2:	1e93      	subs	r3, r2, #2
   155a4:	4298      	cmp	r0, r3
   155a6:	db03      	blt.n	155b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
   155a8:	2001      	movs	r0, #1
   155aa:	e004      	b.n	155b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
   155ac:	e01c      	b.n	155e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
   155ae:	e029      	b.n	15604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
   155b0:	1a10      	subs	r0, r2, r0
   155b2:	1e40      	subs	r0, r0, #1
   155b4:	b280      	uxth	r0, r0
   155b6:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
   155ba:	88a3      	ldrh	r3, [r4, #4]
   155bc:	429a      	cmp	r2, r3
   155be:	d301      	bcc.n	155c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb78>
   155c0:	2201      	movs	r2, #1
   155c2:	e002      	b.n	155ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
   155c4:	1a9a      	subs	r2, r3, r2
   155c6:	1c52      	adds	r2, r2, #1
   155c8:	b292      	uxth	r2, r2
   155ca:	4290      	cmp	r0, r2
   155cc:	d900      	bls.n	155d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
   155ce:	4610      	mov	r0, r2
   155d0:	2801      	cmp	r0, #1
   155d2:	d101      	bne.n	155d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
   155d4:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
   155d8:	68a1      	ldr	r1, [r4, #8]
   155da:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
   155de:	4410      	add	r0, r2
   155e0:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
   155e4:	f001 f8de 	bl	167a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
   155e8:	78a0      	ldrb	r0, [r4, #2]
   155ea:	464a      	mov	r2, r9
   155ec:	f3c0 1180 	ubfx	r1, r0, #6, #1
   155f0:	4650      	mov	r0, sl
   155f2:	f001 f821 	bl	16638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
   155f6:	68a0      	ldr	r0, [r4, #8]
   155f8:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   155fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15600:	f7fb bfea 	b.w	115d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   15604:	2001      	movs	r0, #1
   15606:	68a1      	ldr	r1, [r4, #8]
   15608:	e7e4      	b.n	155d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
   1560a:	0000      	.short	0x0000
   1560c:	20000134 	.word	0x20000134
   15610:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   15612:	4c58      	ldr	r4, [pc, #352]	; (15774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd28>)
   15614:	2301      	movs	r3, #1
   15616:	2100      	movs	r1, #0
   15618:	68a0      	ldr	r0, [r4, #8]
   1561a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   1561e:	3070      	adds	r0, #112	; 0x70
   15620:	f004 fc2e 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15624:	2800      	cmp	r0, #0
   15626:	d07d      	beq.n	15724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
   15628:	68a0      	ldr	r0, [r4, #8]
   1562a:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
   1562e:	2500      	movs	r5, #0
   15630:	b139      	cbz	r1, 15642 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
   15632:	2100      	movs	r1, #0
   15634:	200e      	movs	r0, #14
   15636:	f000 f89f 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   1563a:	68a0      	ldr	r0, [r4, #8]
   1563c:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
   15640:	e095      	b.n	1576e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
   15642:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
   15646:	b119      	cbz	r1, 15650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
   15648:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1564c:	0789      	lsls	r1, r1, #30
   1564e:	d016      	beq.n	1567e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
   15650:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   15654:	f88d 1004 	strb.w	r1, [sp, #4]
   15658:	9901      	ldr	r1, [sp, #4]
   1565a:	9101      	str	r1, [sp, #4]
   1565c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   15660:	b141      	cbz	r1, 15674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
   15662:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
   15666:	f88d 1000 	strb.w	r1, [sp]
   1566a:	9900      	ldr	r1, [sp, #0]
   1566c:	9100      	str	r1, [sp, #0]
   1566e:	f89d 1000 	ldrb.w	r1, [sp]
   15672:	b189      	cbz	r1, 15698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
   15674:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
   15678:	2901      	cmp	r1, #1
   1567a:	d02f      	beq.n	156dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
   1567c:	e071      	b.n	15762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
   1567e:	2100      	movs	r1, #0
   15680:	200c      	movs	r0, #12
   15682:	f000 f879 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   15686:	68a0      	ldr	r0, [r4, #8]
   15688:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
   1568c:	f041 0101 	orr.w	r1, r1, #1
   15690:	7001      	strb	r1, [r0, #0]
   15692:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
   15696:	e06a      	b.n	1576e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
   15698:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   1569c:	2924      	cmp	r1, #36	; 0x24
   1569e:	d01b      	beq.n	156d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
   156a0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   156a4:	2924      	cmp	r1, #36	; 0x24
   156a6:	d017      	beq.n	156d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
   156a8:	f05f 0300 	movs.w	r3, #0
   156ac:	f500 72cb 	add.w	r2, r0, #406	; 0x196
   156b0:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
   156b4:	f005 f810 	bl	1a6d8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   156b8:	68a0      	ldr	r0, [r4, #8]
   156ba:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
   156be:	2100      	movs	r1, #0
   156c0:	2014      	movs	r0, #20
   156c2:	f000 f859 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   156c6:	68a1      	ldr	r1, [r4, #8]
   156c8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   156cc:	8bc2      	ldrh	r2, [r0, #30]
   156ce:	f821 2fee 	strh.w	r2, [r1, #238]!
   156d2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   156d4:	8048      	strh	r0, [r1, #2]
   156d6:	e04a      	b.n	1576e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
   156d8:	2301      	movs	r3, #1
   156da:	e7e7      	b.n	156ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
   156dc:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
   156e0:	f88d 1000 	strb.w	r1, [sp]
   156e4:	9900      	ldr	r1, [sp, #0]
   156e6:	9100      	str	r1, [sp, #0]
   156e8:	f89d 1000 	ldrb.w	r1, [sp]
   156ec:	bb31      	cbnz	r1, 1573c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
   156ee:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   156f2:	2301      	movs	r3, #1
   156f4:	210b      	movs	r1, #11
   156f6:	3070      	adds	r0, #112	; 0x70
   156f8:	f004 fbc2 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   156fc:	b9f0      	cbnz	r0, 1573c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
   156fe:	68a0      	ldr	r0, [r4, #8]
   15700:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   15704:	f005 ff6c 	bl	1b5e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   15708:	4605      	mov	r5, r0
   1570a:	68a0      	ldr	r0, [r4, #8]
   1570c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   15710:	f005 ff66 	bl	1b5e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   15714:	4606      	mov	r6, r0
   15716:	68a0      	ldr	r0, [r4, #8]
   15718:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
   1571c:	4628      	mov	r0, r5
   1571e:	f005 ff6a 	bl	1b5f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
   15722:	e000      	b.n	15726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcda>
   15724:	e01e      	b.n	15764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   15726:	b150      	cbz	r0, 1573e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
   15728:	68a0      	ldr	r0, [r4, #8]
   1572a:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
   1572e:	4630      	mov	r0, r6
   15730:	f005 ff61 	bl	1b5f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
   15734:	b118      	cbz	r0, 1573e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
   15736:	2000      	movs	r0, #0
   15738:	f000 f91c 	bl	15974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   1573c:	e011      	b.n	15762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
   1573e:	68a0      	ldr	r0, [r4, #8]
   15740:	2301      	movs	r3, #1
   15742:	2103      	movs	r1, #3
   15744:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15748:	3070      	adds	r0, #112	; 0x70
   1574a:	f004 fb99 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1574e:	b940      	cbnz	r0, 15762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
   15750:	68a0      	ldr	r0, [r4, #8]
   15752:	2301      	movs	r3, #1
   15754:	2102      	movs	r1, #2
   15756:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   1575a:	3070      	adds	r0, #112	; 0x70
   1575c:	f004 fb90 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15760:	b108      	cbz	r0, 15766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
   15762:	2000      	movs	r0, #0
   15764:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   15766:	2100      	movs	r1, #0
   15768:	2016      	movs	r0, #22
   1576a:	f000 f805 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   1576e:	2001      	movs	r0, #1
   15770:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   15772:	0000      	.short	0x0000
   15774:	20000134 	.word	0x20000134
   15778:	b570      	push	{r4, r5, r6, lr}
   1577a:	4c0d      	ldr	r4, [pc, #52]	; (157b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd64>)
   1577c:	4606      	mov	r6, r0
   1577e:	460d      	mov	r5, r1
   15780:	68a0      	ldr	r0, [r4, #8]
   15782:	3070      	adds	r0, #112	; 0x70
   15784:	f005 ff24 	bl	1b5d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   15788:	b120      	cbz	r0, 15794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>
   1578a:	f640 2114 	movw	r1, #2580	; 0xa14
   1578e:	2031      	movs	r0, #49	; 0x31
   15790:	f7fb f89a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15794:	68a2      	ldr	r2, [r4, #8]
   15796:	2000      	movs	r0, #0
   15798:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
   1579c:	b115      	cbz	r5, 157a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd58>
   1579e:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
   157a2:	bd70      	pop	{r4, r5, r6, pc}
   157a4:	f822 0faa 	strh.w	r0, [r2, #170]!
   157a8:	2001      	movs	r0, #1
   157aa:	7110      	strb	r0, [r2, #4]
   157ac:	bd70      	pop	{r4, r5, r6, pc}
   157ae:	0000      	.short	0x0000
   157b0:	20000134 	.word	0x20000134
   157b4:	b570      	push	{r4, r5, r6, lr}
   157b6:	4d1a      	ldr	r5, [pc, #104]	; (15820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
   157b8:	2600      	movs	r6, #0
   157ba:	68ac      	ldr	r4, [r5, #8]
   157bc:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
   157c0:	2801      	cmp	r0, #1
   157c2:	d00a      	beq.n	157da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8e>
   157c4:	2802      	cmp	r0, #2
   157c6:	d129      	bne.n	1581c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
   157c8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
   157cc:	2106      	movs	r1, #6
   157ce:	b1a0      	cbz	r0, 157fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
   157d0:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
   157d4:	2101      	movs	r1, #1
   157d6:	2002      	movs	r0, #2
   157d8:	e01b      	b.n	15812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
   157da:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   157de:	2800      	cmp	r0, #0
   157e0:	d11c      	bne.n	1581c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
   157e2:	2200      	movs	r2, #0
   157e4:	f504 70be 	add.w	r0, r4, #380	; 0x17c
   157e8:	f504 7188 	add.w	r1, r4, #272	; 0x110
   157ec:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   157f0:	f004 fafe 	bl	19df0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   157f4:	2101      	movs	r1, #1
   157f6:	2005      	movs	r0, #5
   157f8:	e00b      	b.n	15812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
   157fa:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
   157fe:	0740      	lsls	r0, r0, #29
   15800:	d505      	bpl.n	1580e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
   15802:	2011      	movs	r0, #17
   15804:	2203      	movs	r2, #3
   15806:	f804 2fee 	strb.w	r2, [r4, #238]!
   1580a:	7061      	strb	r1, [r4, #1]
   1580c:	e000      	b.n	15810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
   1580e:	200d      	movs	r0, #13
   15810:	2101      	movs	r1, #1
   15812:	f7ff ffb1 	bl	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   15816:	68a8      	ldr	r0, [r5, #8]
   15818:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
   1581c:	bd70      	pop	{r4, r5, r6, pc}
   1581e:	0000      	.short	0x0000
   15820:	20000134 	.word	0x20000134
   15824:	b570      	push	{r4, r5, r6, lr}
   15826:	4a2b      	ldr	r2, [pc, #172]	; (158d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
   15828:	4603      	mov	r3, r0
   1582a:	8850      	ldrh	r0, [r2, #2]
   1582c:	4318      	orrs	r0, r3
   1582e:	8050      	strh	r0, [r2, #2]
   15830:	4610      	mov	r0, r2
   15832:	2b40      	cmp	r3, #64	; 0x40
   15834:	6880      	ldr	r0, [r0, #8]
   15836:	d00d      	beq.n	15854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>
   15838:	079e      	lsls	r6, r3, #30
   1583a:	f04f 0500 	mov.w	r5, #0
   1583e:	f04f 0401 	mov.w	r4, #1
   15842:	ea4f 76c3 	mov.w	r6, r3, lsl #31
   15846:	d50c      	bpl.n	15862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
   15848:	b14e      	cbz	r6, 1585e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
   1584a:	f640 5114 	movw	r1, #3348	; 0xd14
   1584e:	2031      	movs	r0, #49	; 0x31
   15850:	f7fb f83a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15858:	2104      	movs	r1, #4
   1585a:	f7fe bb9f 	b.w	13f9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   1585e:	60d1      	str	r1, [r2, #12]
   15860:	e01c      	b.n	1589c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe50>
   15862:	b1c6      	cbz	r6, 15896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   15864:	6111      	str	r1, [r2, #16]
   15866:	78c9      	ldrb	r1, [r1, #3]
   15868:	2906      	cmp	r1, #6
   1586a:	d002      	beq.n	15872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
   1586c:	290b      	cmp	r1, #11
   1586e:	d112      	bne.n	15896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   15870:	e009      	b.n	15886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3a>
   15872:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   15876:	2917      	cmp	r1, #23
   15878:	d10d      	bne.n	15896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   1587a:	2100      	movs	r1, #0
   1587c:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
   15880:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
   15884:	e007      	b.n	15896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   15886:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   1588a:	2911      	cmp	r1, #17
   1588c:	d103      	bne.n	15896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
   1588e:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
   15892:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
   15896:	0799      	lsls	r1, r3, #30
   15898:	d516      	bpl.n	158c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   1589a:	68d1      	ldr	r1, [r2, #12]
   1589c:	78c9      	ldrb	r1, [r1, #3]
   1589e:	2905      	cmp	r1, #5
   158a0:	d002      	beq.n	158a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
   158a2:	290b      	cmp	r1, #11
   158a4:	d110      	bne.n	158c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   158a6:	e009      	b.n	158bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
   158a8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   158ac:	2915      	cmp	r1, #21
   158ae:	d10b      	bne.n	158c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   158b0:	2100      	movs	r1, #0
   158b2:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
   158b6:	f800 4c45 	strb.w	r4, [r0, #-69]
   158ba:	e005      	b.n	158c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   158bc:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   158c0:	2910      	cmp	r1, #16
   158c2:	d101      	bne.n	158c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
   158c4:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
   158c8:	0698      	lsls	r0, r3, #26
   158ca:	d501      	bpl.n	158d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
   158cc:	2008      	movs	r0, #8
   158ce:	7050      	strb	r0, [r2, #1]
   158d0:	bd70      	pop	{r4, r5, r6, pc}
   158d2:	0000      	.short	0x0000
   158d4:	20000134 	.word	0x20000134
   158d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158dc:	4c24      	ldr	r4, [pc, #144]	; (15970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf24>)
   158de:	2501      	movs	r5, #1
   158e0:	68a2      	ldr	r2, [r4, #8]
   158e2:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
   158e6:	b108      	cbz	r0, 158ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
   158e8:	2701      	movs	r7, #1
   158ea:	e000      	b.n	158ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
   158ec:	2700      	movs	r7, #0
   158ee:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
   158f2:	b109      	cbz	r1, 158f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
   158f4:	2601      	movs	r6, #1
   158f6:	e000      	b.n	158fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
   158f8:	2600      	movs	r6, #0
   158fa:	b90f      	cbnz	r7, 15900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
   158fc:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
   15900:	b90e      	cbnz	r6, 15906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
   15902:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
   15906:	f102 0362 	add.w	r3, r2, #98	; 0x62
   1590a:	7218      	strb	r0, [r3, #8]
   1590c:	7259      	strb	r1, [r3, #9]
   1590e:	2001      	movs	r0, #1
   15910:	7298      	strb	r0, [r3, #10]
   15912:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
   15916:	2801      	cmp	r0, #1
   15918:	d001      	beq.n	1591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
   1591a:	b907      	cbnz	r7, 1591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
   1591c:	b116      	cbz	r6, 15924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed8>
   1591e:	2000      	movs	r0, #0
   15920:	f000 f828 	bl	15974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   15924:	68a0      	ldr	r0, [r4, #8]
   15926:	302c      	adds	r0, #44	; 0x2c
   15928:	f004 ff45 	bl	1a7b6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   1592c:	4606      	mov	r6, r0
   1592e:	68a0      	ldr	r0, [r4, #8]
   15930:	f004 feed 	bl	1a70e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   15934:	b1c0      	cbz	r0, 15968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
   15936:	68a0      	ldr	r0, [r4, #8]
   15938:	302c      	adds	r0, #44	; 0x2c
   1593a:	f004 ff3c 	bl	1a7b6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   1593e:	68a1      	ldr	r1, [r4, #8]
   15940:	4607      	mov	r7, r0
   15942:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
   15946:	8808      	ldrh	r0, [r1, #0]
   15948:	312c      	adds	r1, #44	; 0x2c
   1594a:	f004 fea1 	bl	1a690 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   1594e:	42be      	cmp	r6, r7
   15950:	d20a      	bcs.n	15968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
   15952:	f7f8 fb79 	bl	e048 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
   15956:	4601      	mov	r1, r0
   15958:	1bb8      	subs	r0, r7, r6
   1595a:	2865      	cmp	r0, #101	; 0x65
   1595c:	d200      	bcs.n	15960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
   1595e:	2065      	movs	r0, #101	; 0x65
   15960:	f7f8 fab0 	bl	dec4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   15964:	b100      	cbz	r0, 15968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
   15966:	2500      	movs	r5, #0
   15968:	4628      	mov	r0, r5
   1596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1596e:	0000      	.short	0x0000
   15970:	20000134 	.word	0x20000134
   15974:	b510      	push	{r4, lr}
   15976:	4c10      	ldr	r4, [pc, #64]	; (159b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>)
   15978:	68a1      	ldr	r1, [r4, #8]
   1597a:	880a      	ldrh	r2, [r1, #0]
   1597c:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
   15980:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
   15984:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
   15988:	f005 fe2a 	bl	1b5e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   1598c:	68a1      	ldr	r1, [r4, #8]
   1598e:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
   15992:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
   15996:	f005 fe23 	bl	1b5e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   1599a:	68a2      	ldr	r2, [r4, #8]
   1599c:	f202 2102 	addw	r1, r2, #514	; 0x202
   159a0:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
   159a4:	2001      	movs	r0, #1
   159a6:	7008      	strb	r0, [r1, #0]
   159a8:	2000      	movs	r0, #0
   159aa:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
   159ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   159b2:	f7fd b915 	b.w	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   159b6:	0000      	.short	0x0000
   159b8:	20000134 	.word	0x20000134
   159bc:	b510      	push	{r4, lr}
   159be:	4c15      	ldr	r4, [pc, #84]	; (15a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc8>)
   159c0:	2301      	movs	r3, #1
   159c2:	2100      	movs	r1, #0
   159c4:	68a0      	ldr	r0, [r4, #8]
   159c6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   159ca:	3070      	adds	r0, #112	; 0x70
   159cc:	f004 fa58 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   159d0:	b190      	cbz	r0, 159f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>
   159d2:	6920      	ldr	r0, [r4, #16]
   159d4:	f004 fc9b 	bl	1a30e <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
   159d8:	68a1      	ldr	r1, [r4, #8]
   159da:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
   159de:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
   159e2:	f005 fe16 	bl	1b612 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   159e6:	b148      	cbz	r0, 159fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
   159e8:	68a0      	ldr	r0, [r4, #8]
   159ea:	2128      	movs	r1, #40	; 0x28
   159ec:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
   159f0:	3076      	adds	r0, #118	; 0x76
   159f2:	2101      	movs	r1, #1
   159f4:	7781      	strb	r1, [r0, #30]
   159f6:	e00b      	b.n	15a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
   159f8:	2001      	movs	r0, #1
   159fa:	bd10      	pop	{r4, pc}
   159fc:	68a1      	ldr	r1, [r4, #8]
   159fe:	6920      	ldr	r0, [r4, #16]
   15a00:	f501 71cb 	add.w	r1, r1, #406	; 0x196
   15a04:	f004 fc7e 	bl	1a304 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
   15a08:	68a1      	ldr	r1, [r4, #8]
   15a0a:	200b      	movs	r0, #11
   15a0c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15a10:	2000      	movs	r0, #0
   15a12:	bd10      	pop	{r4, pc}
   15a14:	20000134 	.word	0x20000134
   15a18:	b570      	push	{r4, r5, r6, lr}
   15a1a:	4c29      	ldr	r4, [pc, #164]	; (15ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1074>)
   15a1c:	2301      	movs	r3, #1
   15a1e:	2100      	movs	r1, #0
   15a20:	68a0      	ldr	r0, [r4, #8]
   15a22:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15a26:	3070      	adds	r0, #112	; 0x70
   15a28:	f004 fa2a 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15a2c:	b1b8      	cbz	r0, 15a5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1012>
   15a2e:	2100      	movs	r1, #0
   15a30:	6920      	ldr	r0, [r4, #16]
   15a32:	f004 fc3f 	bl	1a2b4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
   15a36:	b1a0      	cbz	r0, 15a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1016>
   15a38:	6920      	ldr	r0, [r4, #16]
   15a3a:	68a1      	ldr	r1, [r4, #8]
   15a3c:	f8b0 000d 	ldrh.w	r0, [r0, #13]
   15a40:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
   15a44:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
   15a48:	f005 fde3 	bl	1b612 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   15a4c:	b168      	cbz	r0, 15a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101e>
   15a4e:	68a0      	ldr	r0, [r4, #8]
   15a50:	2128      	movs	r1, #40	; 0x28
   15a52:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
   15a56:	3076      	adds	r0, #118	; 0x76
   15a58:	2101      	movs	r1, #1
   15a5a:	7781      	strb	r1, [r0, #30]
   15a5c:	e02e      	b.n	15abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1070>
   15a5e:	2001      	movs	r0, #1
   15a60:	bd70      	pop	{r4, r5, r6, pc}
   15a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15a66:	f000 b8ad 	b.w	15bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   15a6a:	6920      	ldr	r0, [r4, #16]
   15a6c:	f004 fc52 	bl	1a314 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
   15a70:	f004 f9e9 	bl	19e46 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   15a74:	4605      	mov	r5, r0
   15a76:	68a0      	ldr	r0, [r4, #8]
   15a78:	4629      	mov	r1, r5
   15a7a:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
   15a7e:	6920      	ldr	r0, [r4, #16]
   15a80:	7900      	ldrb	r0, [r0, #4]
   15a82:	f004 fb6b 	bl	1a15c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   15a86:	68a1      	ldr	r1, [r4, #8]
   15a88:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
   15a8c:	6920      	ldr	r0, [r4, #16]
   15a8e:	4629      	mov	r1, r5
   15a90:	f8b0 0005 	ldrh.w	r0, [r0, #5]
   15a94:	f004 fb5e 	bl	1a154 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   15a98:	68a1      	ldr	r1, [r4, #8]
   15a9a:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
   15a9e:	6920      	ldr	r0, [r4, #16]
   15aa0:	f004 fc3b 	bl	1a31a <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
   15aa4:	68a1      	ldr	r1, [r4, #8]
   15aa6:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
   15aaa:	6920      	ldr	r0, [r4, #16]
   15aac:	f004 fc38 	bl	1a320 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
   15ab0:	68a1      	ldr	r1, [r4, #8]
   15ab2:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
   15ab6:	200d      	movs	r0, #13
   15ab8:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15abc:	2000      	movs	r0, #0
   15abe:	bd70      	pop	{r4, r5, r6, pc}
   15ac0:	20000134 	.word	0x20000134
   15ac4:	b538      	push	{r3, r4, r5, lr}
   15ac6:	4c29      	ldr	r4, [pc, #164]	; (15b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1120>)
   15ac8:	2301      	movs	r3, #1
   15aca:	2100      	movs	r1, #0
   15acc:	68a0      	ldr	r0, [r4, #8]
   15ace:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15ad2:	3070      	adds	r0, #112	; 0x70
   15ad4:	f004 f9d4 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15ad8:	b970      	cbnz	r0, 15af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
   15ada:	68a0      	ldr	r0, [r4, #8]
   15adc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15ae0:	2a12      	cmp	r2, #18
   15ae2:	d009      	beq.n	15af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
   15ae4:	2301      	movs	r3, #1
   15ae6:	2105      	movs	r1, #5
   15ae8:	3070      	adds	r0, #112	; 0x70
   15aea:	f004 f9c9 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15aee:	b108      	cbz	r0, 15af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a8>
   15af0:	2008      	movs	r0, #8
   15af2:	bd38      	pop	{r3, r4, r5, pc}
   15af4:	2001      	movs	r0, #1
   15af6:	bd38      	pop	{r3, r4, r5, pc}
   15af8:	68a0      	ldr	r0, [r4, #8]
   15afa:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   15afe:	b908      	cbnz	r0, 15b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
   15b00:	f7ff f8ca 	bl	14c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15b04:	68a1      	ldr	r1, [r4, #8]
   15b06:	6920      	ldr	r0, [r4, #16]
   15b08:	f501 7188 	add.w	r1, r1, #272	; 0x110
   15b0c:	f004 fc17 	bl	1a33e <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
   15b10:	68a1      	ldr	r1, [r4, #8]
   15b12:	6920      	ldr	r0, [r4, #16]
   15b14:	31e0      	adds	r1, #224	; 0xe0
   15b16:	f004 fc09 	bl	1a32c <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
   15b1a:	68a1      	ldr	r1, [r4, #8]
   15b1c:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
   15b20:	f88d 0000 	strb.w	r0, [sp]
   15b24:	9800      	ldr	r0, [sp, #0]
   15b26:	9000      	str	r0, [sp, #0]
   15b28:	f89d 0000 	ldrb.w	r0, [sp]
   15b2c:	b120      	cbz	r0, 15b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
   15b2e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   15b32:	2031      	movs	r0, #49	; 0x31
   15b34:	f7fa fec8 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15b38:	8808      	ldrh	r0, [r1, #0]
   15b3a:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
   15b3e:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
   15b42:	6920      	ldr	r0, [r4, #16]
   15b44:	f004 fbf6 	bl	1a334 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
   15b48:	68a1      	ldr	r1, [r4, #8]
   15b4a:	6920      	ldr	r0, [r4, #16]
   15b4c:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
   15b50:	f004 fbe9 	bl	1a326 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
   15b54:	68a0      	ldr	r0, [r4, #8]
   15b56:	4601      	mov	r1, r0
   15b58:	2201      	movs	r2, #1
   15b5a:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
   15b5e:	2014      	movs	r0, #20
   15b60:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15b64:	f7fd f83c 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   15b68:	2000      	movs	r0, #0
   15b6a:	bd38      	pop	{r3, r4, r5, pc}
   15b6c:	20000134 	.word	0x20000134
   15b70:	b51c      	push	{r2, r3, r4, lr}
   15b72:	4c13      	ldr	r4, [pc, #76]	; (15bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>)
   15b74:	68a0      	ldr	r0, [r4, #8]
   15b76:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   15b7a:	07c0      	lsls	r0, r0, #31
   15b7c:	d001      	beq.n	15b82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1136>
   15b7e:	2001      	movs	r0, #1
   15b80:	bd1c      	pop	{r2, r3, r4, pc}
   15b82:	4669      	mov	r1, sp
   15b84:	6920      	ldr	r0, [r4, #16]
   15b86:	f004 fbe0 	bl	1a34a <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
   15b8a:	f001 f9d5 	bl	16f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   15b8e:	f644 112f 	movw	r1, #18735	; 0x492f
   15b92:	4008      	ands	r0, r1
   15b94:	f89d 2000 	ldrb.w	r2, [sp]
   15b98:	68a1      	ldr	r1, [r4, #8]
   15b9a:	4002      	ands	r2, r0
   15b9c:	f801 2fbc 	strb.w	r2, [r1, #188]!
   15ba0:	f89d 2001 	ldrb.w	r2, [sp, #1]
   15ba4:	ea02 2010 	and.w	r0, r2, r0, lsr #8
   15ba8:	7048      	strb	r0, [r1, #1]
   15baa:	f7ff f875 	bl	14c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15bae:	68a0      	ldr	r0, [r4, #8]
   15bb0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   15bb4:	f041 0101 	orr.w	r1, r1, #1
   15bb8:	7001      	strb	r1, [r0, #0]
   15bba:	2000      	movs	r0, #0
   15bbc:	bd1c      	pop	{r2, r3, r4, pc}
   15bbe:	0000      	.short	0x0000
   15bc0:	20000134 	.word	0x20000134
   15bc4:	4a0a      	ldr	r2, [pc, #40]	; (15bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
   15bc6:	b510      	push	{r4, lr}
   15bc8:	6890      	ldr	r0, [r2, #8]
   15bca:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   15bce:	070b      	lsls	r3, r1, #28
   15bd0:	d501      	bpl.n	15bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118a>
   15bd2:	2001      	movs	r0, #1
   15bd4:	bd10      	pop	{r4, pc}
   15bd6:	f041 0108 	orr.w	r1, r1, #8
   15bda:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
   15bde:	6911      	ldr	r1, [r2, #16]
   15be0:	78c9      	ldrb	r1, [r1, #3]
   15be2:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
   15be6:	f7ff f857 	bl	14c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15bea:	2000      	movs	r0, #0
   15bec:	bd10      	pop	{r4, pc}
   15bee:	0000      	.short	0x0000
   15bf0:	20000134 	.word	0x20000134
   15bf4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   15bf8:	4c34      	ldr	r4, [pc, #208]	; (15ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1280>)
   15bfa:	68a0      	ldr	r0, [r4, #8]
   15bfc:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   15c00:	f010 0f30 	tst.w	r0, #48	; 0x30
   15c04:	d002      	beq.n	15c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
   15c06:	2001      	movs	r0, #1
   15c08:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   15c0c:	6920      	ldr	r0, [r4, #16]
   15c0e:	f004 fbb7 	bl	1a380 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
   15c12:	b318      	cbz	r0, 15c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
   15c14:	6920      	ldr	r0, [r4, #16]
   15c16:	f004 fba5 	bl	1a364 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
   15c1a:	4607      	mov	r7, r0
   15c1c:	6920      	ldr	r0, [r4, #16]
   15c1e:	f004 fba5 	bl	1a36c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
   15c22:	4606      	mov	r6, r0
   15c24:	6920      	ldr	r0, [r4, #16]
   15c26:	f004 fb9b 	bl	1a360 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
   15c2a:	4605      	mov	r5, r0
   15c2c:	6920      	ldr	r0, [r4, #16]
   15c2e:	f004 fb9b 	bl	1a368 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
   15c32:	4601      	mov	r1, r0
   15c34:	9700      	str	r7, [sp, #0]
   15c36:	68a0      	ldr	r0, [r4, #8]
   15c38:	4633      	mov	r3, r6
   15c3a:	462a      	mov	r2, r5
   15c3c:	302c      	adds	r0, #44	; 0x2c
   15c3e:	f004 fdf4 	bl	1a82a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   15c42:	78a0      	ldrb	r0, [r4, #2]
   15c44:	0780      	lsls	r0, r0, #30
   15c46:	d503      	bpl.n	15c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>
   15c48:	68e0      	ldr	r0, [r4, #12]
   15c4a:	78c0      	ldrb	r0, [r0, #3]
   15c4c:	2814      	cmp	r0, #20
   15c4e:	d009      	beq.n	15c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
   15c50:	68a0      	ldr	r0, [r4, #8]
   15c52:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
   15c56:	281c      	cmp	r0, #28
   15c58:	d004      	beq.n	15c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
   15c5a:	e007      	b.n	15c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>
   15c5c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   15c60:	f7ff bfb0 	b.w	15bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   15c64:	68a1      	ldr	r1, [r4, #8]
   15c66:	2001      	movs	r0, #1
   15c68:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
   15c6c:	68a1      	ldr	r1, [r4, #8]
   15c6e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
   15c72:	2801      	cmp	r0, #1
   15c74:	d011      	beq.n	15c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
   15c76:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
   15c7a:	f88d 0004 	strb.w	r0, [sp, #4]
   15c7e:	9801      	ldr	r0, [sp, #4]
   15c80:	9001      	str	r0, [sp, #4]
   15c82:	f89d 0004 	ldrb.w	r0, [sp, #4]
   15c86:	b940      	cbnz	r0, 15c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
   15c88:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
   15c8c:	f88d 0000 	strb.w	r0, [sp]
   15c90:	9800      	ldr	r0, [sp, #0]
   15c92:	9000      	str	r0, [sp, #0]
   15c94:	f89d 0000 	ldrb.w	r0, [sp]
   15c98:	b128      	cbz	r0, 15ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125a>
   15c9a:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
   15c9e:	f040 0010 	orr.w	r0, r0, #16
   15ca2:	7008      	strb	r0, [r1, #0]
   15ca4:	e00d      	b.n	15cc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
   15ca6:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
   15caa:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
   15cae:	f040 0020 	orr.w	r0, r0, #32
   15cb2:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
   15cb6:	f831 0b2c 	ldrh.w	r0, [r1], #44
   15cba:	f004 fdbd 	bl	1a838 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
   15cbe:	f7fc ff8f 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   15cc2:	f7fe ffe9 	bl	14c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15cc6:	2000      	movs	r0, #0
   15cc8:	e79e      	b.n	15c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
   15cca:	0000      	.short	0x0000
   15ccc:	20000134 	.word	0x20000134
   15cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15cd2:	4c1a      	ldr	r4, [pc, #104]	; (15d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>)
   15cd4:	2301      	movs	r3, #1
   15cd6:	210a      	movs	r1, #10
   15cd8:	68a0      	ldr	r0, [r4, #8]
   15cda:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   15cde:	3070      	adds	r0, #112	; 0x70
   15ce0:	f004 f8ce 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15ce4:	b338      	cbz	r0, 15d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ea>
   15ce6:	6920      	ldr	r0, [r4, #16]
   15ce8:	f004 fb4a 	bl	1a380 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
   15cec:	b1c8      	cbz	r0, 15d22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d6>
   15cee:	6920      	ldr	r0, [r4, #16]
   15cf0:	f004 fb38 	bl	1a364 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
   15cf4:	4607      	mov	r7, r0
   15cf6:	6920      	ldr	r0, [r4, #16]
   15cf8:	f004 fb38 	bl	1a36c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
   15cfc:	4606      	mov	r6, r0
   15cfe:	6920      	ldr	r0, [r4, #16]
   15d00:	f004 fb2e 	bl	1a360 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
   15d04:	4605      	mov	r5, r0
   15d06:	6920      	ldr	r0, [r4, #16]
   15d08:	f004 fb2e 	bl	1a368 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
   15d0c:	4601      	mov	r1, r0
   15d0e:	9700      	str	r7, [sp, #0]
   15d10:	68a0      	ldr	r0, [r4, #8]
   15d12:	4633      	mov	r3, r6
   15d14:	462a      	mov	r2, r5
   15d16:	302c      	adds	r0, #44	; 0x2c
   15d18:	f004 fd87 	bl	1a82a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   15d1c:	68a0      	ldr	r0, [r4, #8]
   15d1e:	f004 fcf6 	bl	1a70e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   15d22:	68a1      	ldr	r1, [r4, #8]
   15d24:	2000      	movs	r0, #0
   15d26:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
   15d2a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   15d2e:	f7ff f977 	bl	15020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
   15d32:	2000      	movs	r0, #0
   15d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d36:	2001      	movs	r0, #1
   15d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d3a:	0000      	.short	0x0000
   15d3c:	20000134 	.word	0x20000134
   15d40:	b510      	push	{r4, lr}
   15d42:	4c09      	ldr	r4, [pc, #36]	; (15d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x131c>)
   15d44:	68a0      	ldr	r0, [r4, #8]
   15d46:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   15d4a:	0740      	lsls	r0, r0, #29
   15d4c:	d501      	bpl.n	15d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1306>
   15d4e:	2001      	movs	r0, #1
   15d50:	bd10      	pop	{r4, pc}
   15d52:	f7fe ffa1 	bl	14c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15d56:	68a0      	ldr	r0, [r4, #8]
   15d58:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   15d5c:	f041 0104 	orr.w	r1, r1, #4
   15d60:	7001      	strb	r1, [r0, #0]
   15d62:	2000      	movs	r0, #0
   15d64:	bd10      	pop	{r4, pc}
   15d66:	0000      	.short	0x0000
   15d68:	20000134 	.word	0x20000134
   15d6c:	b510      	push	{r4, lr}
   15d6e:	4c09      	ldr	r4, [pc, #36]	; (15d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>)
   15d70:	2301      	movs	r3, #1
   15d72:	2109      	movs	r1, #9
   15d74:	68a0      	ldr	r0, [r4, #8]
   15d76:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   15d7a:	3070      	adds	r0, #112	; 0x70
   15d7c:	f004 f880 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15d80:	2800      	cmp	r0, #0
   15d82:	d006      	beq.n	15d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
   15d84:	68a1      	ldr	r1, [r4, #8]
   15d86:	2000      	movs	r0, #0
   15d88:	f801 0fa2 	strb.w	r0, [r1, #162]!
   15d8c:	7308      	strb	r0, [r1, #12]
   15d8e:	f801 0c25 	strb.w	r0, [r1, #-37]
   15d92:	bd10      	pop	{r4, pc}
   15d94:	20000134 	.word	0x20000134
   15d98:	b510      	push	{r4, lr}
   15d9a:	4c0f      	ldr	r4, [pc, #60]	; (15dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>)
   15d9c:	2301      	movs	r3, #1
   15d9e:	2100      	movs	r1, #0
   15da0:	68a0      	ldr	r0, [r4, #8]
   15da2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15da6:	3070      	adds	r0, #112	; 0x70
   15da8:	f004 f86a 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15dac:	b138      	cbz	r0, 15dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
   15dae:	f7fe ff73 	bl	14c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15db2:	68a1      	ldr	r1, [r4, #8]
   15db4:	2010      	movs	r0, #16
   15db6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15dba:	2000      	movs	r0, #0
   15dbc:	bd10      	pop	{r4, pc}
   15dbe:	68a0      	ldr	r0, [r4, #8]
   15dc0:	2301      	movs	r3, #1
   15dc2:	2105      	movs	r1, #5
   15dc4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15dc8:	3070      	adds	r0, #112	; 0x70
   15dca:	f004 f859 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15dce:	b108      	cbz	r0, 15dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
   15dd0:	2008      	movs	r0, #8
   15dd2:	bd10      	pop	{r4, pc}
   15dd4:	2001      	movs	r0, #1
   15dd6:	bd10      	pop	{r4, pc}
   15dd8:	20000134 	.word	0x20000134
   15ddc:	4806      	ldr	r0, [pc, #24]	; (15df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ac>)
   15dde:	6880      	ldr	r0, [r0, #8]
   15de0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   15de4:	2911      	cmp	r1, #17
   15de6:	d001      	beq.n	15dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a0>
   15de8:	2002      	movs	r0, #2
   15dea:	4770      	bx	lr
   15dec:	2112      	movs	r1, #18
   15dee:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   15df2:	2000      	movs	r0, #0
   15df4:	4770      	bx	lr
   15df6:	0000      	.short	0x0000
   15df8:	20000134 	.word	0x20000134
   15dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15dfe:	4c34      	ldr	r4, [pc, #208]	; (15ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
   15e00:	2301      	movs	r3, #1
   15e02:	210b      	movs	r1, #11
   15e04:	68a0      	ldr	r0, [r4, #8]
   15e06:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15e0a:	3070      	adds	r0, #112	; 0x70
   15e0c:	f004 f838 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15e10:	bb78      	cbnz	r0, 15e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1426>
   15e12:	68a0      	ldr	r0, [r4, #8]
   15e14:	2301      	movs	r3, #1
   15e16:	2100      	movs	r1, #0
   15e18:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   15e1c:	3070      	adds	r0, #112	; 0x70
   15e1e:	f004 f82f 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15e22:	b320      	cbz	r0, 15e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
   15e24:	68a0      	ldr	r0, [r4, #8]
   15e26:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
   15e2a:	2824      	cmp	r0, #36	; 0x24
   15e2c:	d022      	beq.n	15e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
   15e2e:	6920      	ldr	r0, [r4, #16]
   15e30:	f004 fac2 	bl	1a3b8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
   15e34:	b300      	cbz	r0, 15e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
   15e36:	68a0      	ldr	r0, [r4, #8]
   15e38:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
   15e3c:	f041 0104 	orr.w	r1, r1, #4
   15e40:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
   15e44:	6921      	ldr	r1, [r4, #16]
   15e46:	794a      	ldrb	r2, [r1, #5]
   15e48:	f002 0207 	and.w	r2, r2, #7
   15e4c:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
   15e50:	7909      	ldrb	r1, [r1, #4]
   15e52:	f001 0107 	and.w	r1, r1, #7
   15e56:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
   15e5a:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
   15e5e:	f88d 3000 	strb.w	r3, [sp]
   15e62:	9b00      	ldr	r3, [sp, #0]
   15e64:	9300      	str	r3, [sp, #0]
   15e66:	f89d 3000 	ldrb.w	r3, [sp]
   15e6a:	bb43      	cbnz	r3, 15ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
   15e6c:	e008      	b.n	15e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
   15e6e:	2001      	movs	r0, #1
   15e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e72:	e7ff      	b.n	15e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
   15e74:	2020      	movs	r0, #32
   15e76:	e7fb      	b.n	15e70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
   15e78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15e7c:	f7ff bea2 	b.w	15bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   15e80:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   15e84:	2b01      	cmp	r3, #1
   15e86:	d01a      	beq.n	15ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
   15e88:	f100 036a 	add.w	r3, r0, #106	; 0x6a
   15e8c:	2501      	movs	r5, #1
   15e8e:	785e      	ldrb	r6, [r3, #1]
   15e90:	428e      	cmp	r6, r1
   15e92:	d106      	bne.n	15ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
   15e94:	7819      	ldrb	r1, [r3, #0]
   15e96:	4291      	cmp	r1, r2
   15e98:	d103      	bne.n	15ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
   15e9a:	2102      	movs	r1, #2
   15e9c:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
   15ea0:	e00d      	b.n	15ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
   15ea2:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
   15ea6:	8802      	ldrh	r2, [r0, #0]
   15ea8:	f821 2902 	strh.w	r2, [r1], #-2
   15eac:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
   15eb0:	710a      	strb	r2, [r1, #4]
   15eb2:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
   15eb6:	7148      	strb	r0, [r1, #5]
   15eb8:	700d      	strb	r5, [r1, #0]
   15eba:	f7fc fe91 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   15ebe:	68a1      	ldr	r1, [r4, #8]
   15ec0:	2021      	movs	r0, #33	; 0x21
   15ec2:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   15ec6:	f7fe fee7 	bl	14c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   15eca:	2000      	movs	r0, #0
   15ecc:	e7d0      	b.n	15e70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
   15ece:	0000      	.short	0x0000
   15ed0:	20000134 	.word	0x20000134
   15ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15ed8:	4c4e      	ldr	r4, [pc, #312]	; (16014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
   15eda:	68a0      	ldr	r0, [r4, #8]
   15edc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   15ee0:	2920      	cmp	r1, #32
   15ee2:	d009      	beq.n	15ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ac>
   15ee4:	f05f 0700 	movs.w	r7, #0
   15ee8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   15eec:	2922      	cmp	r1, #34	; 0x22
   15eee:	d005      	beq.n	15efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b0>
   15ef0:	b387      	cbz	r7, 15f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1508>
   15ef2:	f100 057d 	add.w	r5, r0, #125	; 0x7d
   15ef6:	e003      	b.n	15f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
   15ef8:	2701      	movs	r7, #1
   15efa:	e7f5      	b.n	15ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
   15efc:	f100 057e 	add.w	r5, r0, #126	; 0x7e
   15f00:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
   15f04:	f041 0104 	orr.w	r1, r1, #4
   15f08:	7001      	strb	r1, [r0, #0]
   15f0a:	6920      	ldr	r0, [r4, #16]
   15f0c:	f7fc fd54 	bl	129b8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
   15f10:	f04f 0801 	mov.w	r8, #1
   15f14:	2600      	movs	r6, #0
   15f16:	b308      	cbz	r0, 15f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
   15f18:	4639      	mov	r1, r7
   15f1a:	6920      	ldr	r0, [r4, #16]
   15f1c:	f7fe ff86 	bl	14e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e0>
   15f20:	b1e0      	cbz	r0, 15f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
   15f22:	466a      	mov	r2, sp
   15f24:	6921      	ldr	r1, [r4, #16]
   15f26:	68a0      	ldr	r0, [r4, #8]
   15f28:	f004 f8ce 	bl	1a0c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
   15f2c:	b388      	cbz	r0, 15f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
   15f2e:	6920      	ldr	r0, [r4, #16]
   15f30:	f004 fa1e 	bl	1a370 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
   15f34:	68a1      	ldr	r1, [r4, #8]
   15f36:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
   15f3a:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
   15f3e:	f005 fb68 	bl	1b612 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   15f42:	b338      	cbz	r0, 15f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>
   15f44:	68a0      	ldr	r0, [r4, #8]
   15f46:	2128      	movs	r1, #40	; 0x28
   15f48:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
   15f4c:	3076      	adds	r0, #118	; 0x76
   15f4e:	f880 801e 	strb.w	r8, [r0, #30]
   15f52:	e053      	b.n	15ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
   15f54:	e7ff      	b.n	15f56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
   15f56:	2002      	movs	r0, #2
   15f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15f5c:	68a0      	ldr	r0, [r4, #8]
   15f5e:	f04f 0900 	mov.w	r9, #0
   15f62:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
   15f66:	2901      	cmp	r1, #1
   15f68:	d015      	beq.n	15f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
   15f6a:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
   15f6e:	b1f7      	cbz	r7, 15fae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
   15f70:	6920      	ldr	r0, [r4, #16]
   15f72:	68a1      	ldr	r1, [r4, #8]
   15f74:	78c0      	ldrb	r0, [r0, #3]
   15f76:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
   15f7a:	fa08 f200 	lsl.w	r2, r8, r0
   15f7e:	f3c2 6000 	ubfx	r0, r2, #24, #1
   15f82:	b160      	cbz	r0, 15f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1552>
   15f84:	200a      	movs	r0, #10
   15f86:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   15f8a:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
   15f8e:	b9a0      	cbnz	r0, 15fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
   15f90:	e008      	b.n	15fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
   15f92:	e014      	b.n	15fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
   15f94:	e027      	b.n	15fe6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159a>
   15f96:	201e      	movs	r0, #30
   15f98:	f7ff fcec 	bl	15974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   15f9c:	e7e7      	b.n	15f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1522>
   15f9e:	f240 31cb 	movw	r1, #971	; 0x3cb
   15fa2:	e001      	b.n	15fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155c>
   15fa4:	f240 31d3 	movw	r1, #979	; 0x3d3
   15fa8:	2031      	movs	r0, #49	; 0x31
   15faa:	f7fa fc8d 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15fae:	702e      	strb	r6, [r5, #0]
   15fb0:	f7fe fe7e 	bl	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   15fb4:	f7ff fe06 	bl	15bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
   15fb8:	4681      	mov	r9, r0
   15fba:	4648      	mov	r0, r9
   15fbc:	e7cc      	b.n	15f58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
   15fbe:	68a0      	ldr	r0, [r4, #8]
   15fc0:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
   15fc4:	2901      	cmp	r1, #1
   15fc6:	d009      	beq.n	15fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1590>
   15fc8:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
   15fcc:	68a0      	ldr	r0, [r4, #8]
   15fce:	f100 017e 	add.w	r1, r0, #126	; 0x7e
   15fd2:	428d      	cmp	r5, r1
   15fd4:	d112      	bne.n	15ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
   15fd6:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
   15fda:	e00f      	b.n	15ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
   15fdc:	2000      	movs	r0, #0
   15fde:	f7ff fcc9 	bl	15974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   15fe2:	702e      	strb	r6, [r5, #0]
   15fe4:	e7f2      	b.n	15fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1580>
   15fe6:	68a0      	ldr	r0, [r4, #8]
   15fe8:	f89d 1000 	ldrb.w	r1, [sp]
   15fec:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
   15ff0:	f89d 1001 	ldrb.w	r1, [sp, #1]
   15ff4:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
   15ff8:	2024      	movs	r0, #36	; 0x24
   15ffa:	7028      	strb	r0, [r5, #0]
   15ffc:	68a0      	ldr	r0, [r4, #8]
   15ffe:	f100 017e 	add.w	r1, r0, #126	; 0x7e
   16002:	428d      	cmp	r5, r1
   16004:	d102      	bne.n	1600c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
   16006:	f7fe fe53 	bl	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1600a:	e001      	b.n	16010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
   1600c:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
   16010:	2000      	movs	r0, #0
   16012:	e7a1      	b.n	15f58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
   16014:	20000134 	.word	0x20000134
   16018:	b510      	push	{r4, lr}
   1601a:	4c0a      	ldr	r4, [pc, #40]	; (16044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
   1601c:	68a0      	ldr	r0, [r4, #8]
   1601e:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
   16022:	f041 0104 	orr.w	r1, r1, #4
   16026:	7001      	strb	r1, [r0, #0]
   16028:	6920      	ldr	r0, [r4, #16]
   1602a:	f004 f9cf 	bl	1a3cc <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
   1602e:	2816      	cmp	r0, #22
   16030:	d001      	beq.n	16036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
   16032:	2000      	movs	r0, #0
   16034:	bd10      	pop	{r4, pc}
   16036:	6920      	ldr	r0, [r4, #16]
   16038:	f004 f9ca 	bl	1a3d0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
   1603c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16040:	f7fe be08 	b.w	14c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
   16044:	20000134 	.word	0x20000134
   16048:	4802      	ldr	r0, [pc, #8]	; (16054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>)
   1604a:	6900      	ldr	r0, [r0, #16]
   1604c:	7900      	ldrb	r0, [r0, #4]
   1604e:	f7fe be01 	b.w	14c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
   16052:	0000      	.short	0x0000
   16054:	20000134 	.word	0x20000134
   16058:	b510      	push	{r4, lr}
   1605a:	4c08      	ldr	r4, [pc, #32]	; (1607c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>)
   1605c:	68a0      	ldr	r0, [r4, #8]
   1605e:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   16062:	2817      	cmp	r0, #23
   16064:	d001      	beq.n	1606a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161e>
   16066:	2002      	movs	r0, #2
   16068:	bd10      	pop	{r4, pc}
   1606a:	f7fe fe21 	bl	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1606e:	68a1      	ldr	r1, [r4, #8]
   16070:	201b      	movs	r0, #27
   16072:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
   16076:	2000      	movs	r0, #0
   16078:	bd10      	pop	{r4, pc}
   1607a:	0000      	.short	0x0000
   1607c:	20000134 	.word	0x20000134
   16080:	b510      	push	{r4, lr}
   16082:	4c0b      	ldr	r4, [pc, #44]	; (160b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
   16084:	2301      	movs	r3, #1
   16086:	4619      	mov	r1, r3
   16088:	68a0      	ldr	r0, [r4, #8]
   1608a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   1608e:	3070      	adds	r0, #112	; 0x70
   16090:	f003 fef6 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16094:	b108      	cbz	r0, 1609a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164e>
   16096:	2000      	movs	r0, #0
   16098:	bd10      	pop	{r4, pc}
   1609a:	6920      	ldr	r0, [r4, #16]
   1609c:	f004 f96c 	bl	1a378 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
   160a0:	68a1      	ldr	r1, [r4, #8]
   160a2:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
   160a6:	2007      	movs	r0, #7
   160a8:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
   160ac:	e7f3      	b.n	16096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164a>
   160ae:	0000      	.short	0x0000
   160b0:	20000134 	.word	0x20000134
   160b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160b8:	4d37      	ldr	r5, [pc, #220]	; (16198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
   160ba:	2600      	movs	r6, #0
   160bc:	4628      	mov	r0, r5
   160be:	68a9      	ldr	r1, [r5, #8]
   160c0:	6900      	ldr	r0, [r0, #16]
   160c2:	2701      	movs	r7, #1
   160c4:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
   160c8:	7900      	ldrb	r0, [r0, #4]
   160ca:	2b0e      	cmp	r3, #14
   160cc:	d101      	bne.n	160d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
   160ce:	2812      	cmp	r0, #18
   160d0:	d006      	beq.n	160e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
   160d2:	4a31      	ldr	r2, [pc, #196]	; (16198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
   160d4:	2400      	movs	r4, #0
   160d6:	6892      	ldr	r2, [r2, #8]
   160d8:	32bc      	adds	r2, #188	; 0xbc
   160da:	2b1c      	cmp	r3, #28
   160dc:	d004      	beq.n	160e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>
   160de:	e005      	b.n	160ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a0>
   160e0:	f7ff fe44 	bl	15d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1320>
   160e4:	4606      	mov	r6, r0
   160e6:	e053      	b.n	16190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   160e8:	2814      	cmp	r0, #20
   160ea:	d002      	beq.n	160f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a6>
   160ec:	2b04      	cmp	r3, #4
   160ee:	d00b      	beq.n	16108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
   160f0:	e00c      	b.n	1610c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c0>
   160f2:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
   160f6:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
   160fa:	2105      	movs	r1, #5
   160fc:	4610      	mov	r0, r2
   160fe:	f005 fa19 	bl	1b534 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
   16102:	f7fe ff8d 	bl	15020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
   16106:	e043      	b.n	16190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   16108:	280e      	cmp	r0, #14
   1610a:	d002      	beq.n	16112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
   1610c:	2b20      	cmp	r3, #32
   1610e:	d00f      	beq.n	16130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
   16110:	e010      	b.n	16134 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e8>
   16112:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
   16116:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
   1611a:	8808      	ldrh	r0, [r1, #0]
   1611c:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
   16120:	201a      	movs	r0, #26
   16122:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
   16126:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
   1612a:	f7fc fd59 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1612e:	e02f      	b.n	16190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   16130:	2816      	cmp	r0, #22
   16132:	d006      	beq.n	16142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
   16134:	2b26      	cmp	r3, #38	; 0x26
   16136:	d101      	bne.n	1613c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
   16138:	2816      	cmp	r0, #22
   1613a:	d002      	beq.n	16142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
   1613c:	2817      	cmp	r0, #23
   1613e:	d014      	beq.n	1616a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171e>
   16140:	e026      	b.n	16190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   16142:	f801 4f7d 	strb.w	r4, [r1, #125]!
   16146:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
   1614a:	7848      	ldrb	r0, [r1, #1]
   1614c:	2821      	cmp	r0, #33	; 0x21
   1614e:	d01f      	beq.n	16190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   16150:	2108      	movs	r1, #8
   16152:	4610      	mov	r0, r2
   16154:	f005 f9ee 	bl	1b534 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
   16158:	68a8      	ldr	r0, [r5, #8]
   1615a:	210b      	movs	r1, #11
   1615c:	30bc      	adds	r0, #188	; 0xbc
   1615e:	f005 f9e9 	bl	1b534 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
   16162:	201a      	movs	r0, #26
   16164:	f7ff fc06 	bl	15974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   16168:	e012      	b.n	16190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   1616a:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
   1616e:	2822      	cmp	r0, #34	; 0x22
   16170:	d10e      	bne.n	16190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
   16172:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
   16176:	f7fe fd9b 	bl	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1617a:	68a8      	ldr	r0, [r5, #8]
   1617c:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
   16180:	2801      	cmp	r0, #1
   16182:	d102      	bne.n	1618a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173e>
   16184:	2000      	movs	r0, #0
   16186:	f7ff fbf5 	bl	15974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   1618a:	68a8      	ldr	r0, [r5, #8]
   1618c:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
   16190:	4630      	mov	r0, r6
   16192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16196:	0000      	.short	0x0000
   16198:	20000134 	.word	0x20000134
   1619c:	b570      	push	{r4, r5, r6, lr}
   1619e:	4c2c      	ldr	r4, [pc, #176]	; (16250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
   161a0:	68a0      	ldr	r0, [r4, #8]
   161a2:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   161a6:	0789      	lsls	r1, r1, #30
   161a8:	d507      	bpl.n	161ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176e>
   161aa:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   161ae:	2301      	movs	r3, #1
   161b0:	2108      	movs	r1, #8
   161b2:	3070      	adds	r0, #112	; 0x70
   161b4:	f003 fe64 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   161b8:	b1e8      	cbz	r0, 161f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17aa>
   161ba:	68a0      	ldr	r0, [r4, #8]
   161bc:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
   161c0:	0780      	lsls	r0, r0, #30
   161c2:	d412      	bmi.n	161ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x179e>
   161c4:	6920      	ldr	r0, [r4, #16]
   161c6:	f004 f8d9 	bl	1a37c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
   161ca:	68a1      	ldr	r1, [r4, #8]
   161cc:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
   161d0:	6920      	ldr	r0, [r4, #16]
   161d2:	f830 2f05 	ldrh.w	r2, [r0, #5]!
   161d6:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
   161da:	8840      	ldrh	r0, [r0, #2]
   161dc:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
   161e0:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
   161e4:	f040 0002 	orr.w	r0, r0, #2
   161e8:	7008      	strb	r0, [r1, #0]
   161ea:	68a0      	ldr	r0, [r4, #8]
   161ec:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   161f0:	07c9      	lsls	r1, r1, #31
   161f2:	d002      	beq.n	161fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
   161f4:	e010      	b.n	16218 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17cc>
   161f6:	2001      	movs	r0, #1
   161f8:	bd70      	pop	{r4, r5, r6, pc}
   161fa:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   161fe:	078a      	lsls	r2, r1, #30
   16200:	d504      	bpl.n	1620c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
   16202:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   16206:	2031      	movs	r0, #49	; 0x31
   16208:	f7fa fb5e 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1620c:	f041 0102 	orr.w	r1, r1, #2
   16210:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
   16214:	f7fe fd40 	bl	14c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
   16218:	68a0      	ldr	r0, [r4, #8]
   1621a:	2500      	movs	r5, #0
   1621c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   16220:	2906      	cmp	r1, #6
   16222:	d105      	bne.n	16230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e4>
   16224:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
   16228:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
   1622c:	f7fc fcd8 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16230:	68a0      	ldr	r0, [r4, #8]
   16232:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
   16236:	b149      	cbz	r1, 1624c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
   16238:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
   1623c:	f7fc fcd0 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16240:	68a0      	ldr	r0, [r4, #8]
   16242:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
   16246:	b909      	cbnz	r1, 1624c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
   16248:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
   1624c:	2000      	movs	r0, #0
   1624e:	bd70      	pop	{r4, r5, r6, pc}
   16250:	20000134 	.word	0x20000134
   16254:	b510      	push	{r4, lr}
   16256:	4c1f      	ldr	r4, [pc, #124]	; (162d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>)
   16258:	68a3      	ldr	r3, [r4, #8]
   1625a:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
   1625e:	2808      	cmp	r0, #8
   16260:	d20e      	bcs.n	16280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
   16262:	f100 0208 	add.w	r2, r0, #8
   16266:	f1c0 0008 	rsb	r0, r0, #8
   1626a:	b2c1      	uxtb	r1, r0
   1626c:	1898      	adds	r0, r3, r2
   1626e:	f500 7088 	add.w	r0, r0, #272	; 0x110
   16272:	f7fa fbb5 	bl	109e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   16276:	68a1      	ldr	r1, [r4, #8]
   16278:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
   1627c:	4410      	add	r0, r2
   1627e:	7008      	strb	r0, [r1, #0]
   16280:	68a3      	ldr	r3, [r4, #8]
   16282:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
   16286:	3808      	subs	r0, #8
   16288:	2804      	cmp	r0, #4
   1628a:	d20c      	bcs.n	162a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x185a>
   1628c:	1d02      	adds	r2, r0, #4
   1628e:	f1c0 0004 	rsb	r0, r0, #4
   16292:	b2c1      	uxtb	r1, r0
   16294:	1898      	adds	r0, r3, r2
   16296:	30e0      	adds	r0, #224	; 0xe0
   16298:	f7fa fba2 	bl	109e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1629c:	68a1      	ldr	r1, [r4, #8]
   1629e:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
   162a2:	4410      	add	r0, r2
   162a4:	7008      	strb	r0, [r1, #0]
   162a6:	68a0      	ldr	r0, [r4, #8]
   162a8:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
   162ac:	290c      	cmp	r1, #12
   162ae:	d30f      	bcc.n	162d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1884>
   162b0:	d005      	beq.n	162be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1872>
   162b2:	f240 71bf 	movw	r1, #1983	; 0x7bf
   162b6:	f04f 0031 	mov.w	r0, #49	; 0x31
   162ba:	f7fa fb05 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   162be:	2100      	movs	r1, #0
   162c0:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
   162c4:	2101      	movs	r1, #1
   162c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   162ca:	2004      	movs	r0, #4
   162cc:	f7ff ba54 	b.w	15778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
   162d0:	bd10      	pop	{r4, pc}
   162d2:	0000      	.short	0x0000
   162d4:	20000134 	.word	0x20000134
   162d8:	4804      	ldr	r0, [pc, #16]	; (162ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a0>)
   162da:	2127      	movs	r1, #39	; 0x27
   162dc:	6880      	ldr	r0, [r0, #8]
   162de:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
   162e2:	2100      	movs	r1, #0
   162e4:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
   162e8:	4770      	bx	lr
   162ea:	0000      	.short	0x0000
   162ec:	20000134 	.word	0x20000134
   162f0:	4809      	ldr	r0, [pc, #36]	; (16318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18cc>)
   162f2:	b510      	push	{r4, lr}
   162f4:	6880      	ldr	r0, [r0, #8]
   162f6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   162fa:	2914      	cmp	r1, #20
   162fc:	d004      	beq.n	16308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
   162fe:	f240 619a 	movw	r1, #1690	; 0x69a
   16302:	2031      	movs	r0, #49	; 0x31
   16304:	f7fa fae0 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16308:	2101      	movs	r1, #1
   1630a:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
   1630e:	2115      	movs	r1, #21
   16310:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   16314:	bd10      	pop	{r4, pc}
   16316:	0000      	.short	0x0000
   16318:	20000134 	.word	0x20000134
   1631c:	b510      	push	{r4, lr}
   1631e:	4c0a      	ldr	r4, [pc, #40]	; (16348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>)
   16320:	68a0      	ldr	r0, [r4, #8]
   16322:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   16326:	07c0      	lsls	r0, r0, #31
   16328:	d008      	beq.n	1633c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
   1632a:	f7fe fcc1 	bl	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1632e:	68a0      	ldr	r0, [r4, #8]
   16330:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   16334:	f021 0101 	bic.w	r1, r1, #1
   16338:	7001      	strb	r1, [r0, #0]
   1633a:	bd10      	pop	{r4, pc}
   1633c:	f240 6183 	movw	r1, #1667	; 0x683
   16340:	2031      	movs	r0, #49	; 0x31
   16342:	f7fa fac1 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16346:	0000      	.short	0x0000
   16348:	20000134 	.word	0x20000134
   1634c:	b510      	push	{r4, lr}
   1634e:	4c0a      	ldr	r4, [pc, #40]	; (16378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192c>)
   16350:	2301      	movs	r3, #1
   16352:	2100      	movs	r1, #0
   16354:	68a0      	ldr	r0, [r4, #8]
   16356:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   1635a:	3070      	adds	r0, #112	; 0x70
   1635c:	f003 fd90 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16360:	b120      	cbz	r0, 1636c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
   16362:	68a1      	ldr	r1, [r4, #8]
   16364:	201c      	movs	r0, #28
   16366:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   1636a:	bd10      	pop	{r4, pc}
   1636c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
   16370:	2031      	movs	r0, #49	; 0x31
   16372:	f7fa faa9 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16376:	0000      	.short	0x0000
   16378:	20000134 	.word	0x20000134
   1637c:	480a      	ldr	r0, [pc, #40]	; (163a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>)
   1637e:	b510      	push	{r4, lr}
   16380:	6880      	ldr	r0, [r0, #8]
   16382:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   16386:	f3c1 1201 	ubfx	r2, r1, #4, #2
   1638a:	2a01      	cmp	r2, #1
   1638c:	d004      	beq.n	16398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
   1638e:	f240 710f 	movw	r1, #1807	; 0x70f
   16392:	2031      	movs	r0, #49	; 0x31
   16394:	f7fa fa98 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16398:	f021 0110 	bic.w	r1, r1, #16
   1639c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
   163a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   163a4:	f7fe bc84 	b.w	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   163a8:	20000134 	.word	0x20000134
   163ac:	b510      	push	{r4, lr}
   163ae:	4c0a      	ldr	r4, [pc, #40]	; (163d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>)
   163b0:	2301      	movs	r3, #1
   163b2:	2100      	movs	r1, #0
   163b4:	68a0      	ldr	r0, [r4, #8]
   163b6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   163ba:	3070      	adds	r0, #112	; 0x70
   163bc:	f003 fd60 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   163c0:	b120      	cbz	r0, 163cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1980>
   163c2:	68a1      	ldr	r1, [r4, #8]
   163c4:	200e      	movs	r0, #14
   163c6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   163ca:	bd10      	pop	{r4, pc}
   163cc:	f240 61fb 	movw	r1, #1787	; 0x6fb
   163d0:	2031      	movs	r0, #49	; 0x31
   163d2:	f7fa fa79 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   163d6:	0000      	.short	0x0000
   163d8:	20000134 	.word	0x20000134
   163dc:	4804      	ldr	r0, [pc, #16]	; (163f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a4>)
   163de:	6880      	ldr	r0, [r0, #8]
   163e0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   163e4:	f021 0104 	bic.w	r1, r1, #4
   163e8:	7001      	strb	r1, [r0, #0]
   163ea:	f7fe bc61 	b.w	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   163ee:	0000      	.short	0x0000
   163f0:	20000134 	.word	0x20000134
   163f4:	4809      	ldr	r0, [pc, #36]	; (1641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>)
   163f6:	b510      	push	{r4, lr}
   163f8:	6880      	ldr	r0, [r0, #8]
   163fa:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   163fe:	2910      	cmp	r1, #16
   16400:	d004      	beq.n	1640c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>
   16402:	f240 6192 	movw	r1, #1682	; 0x692
   16406:	2031      	movs	r0, #49	; 0x31
   16408:	f7fa fa5e 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1640c:	2101      	movs	r1, #1
   1640e:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
   16412:	2111      	movs	r1, #17
   16414:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   16418:	bd10      	pop	{r4, pc}
   1641a:	0000      	.short	0x0000
   1641c:	20000134 	.word	0x20000134
   16420:	b510      	push	{r4, lr}
   16422:	4c0a      	ldr	r4, [pc, #40]	; (1644c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>)
   16424:	2301      	movs	r3, #1
   16426:	2100      	movs	r1, #0
   16428:	68a0      	ldr	r0, [r4, #8]
   1642a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   1642e:	3070      	adds	r0, #112	; 0x70
   16430:	f003 fd26 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16434:	b120      	cbz	r0, 16440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
   16436:	68a1      	ldr	r1, [r4, #8]
   16438:	201f      	movs	r0, #31
   1643a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   1643e:	bd10      	pop	{r4, pc}
   16440:	f240 711b 	movw	r1, #1819	; 0x71b
   16444:	2031      	movs	r0, #49	; 0x31
   16446:	f7fa fa3f 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1644a:	0000      	.short	0x0000
   1644c:	20000134 	.word	0x20000134
   16450:	4808      	ldr	r0, [pc, #32]	; (16474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a28>)
   16452:	b510      	push	{r4, lr}
   16454:	6880      	ldr	r0, [r0, #8]
   16456:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   1645a:	2921      	cmp	r1, #33	; 0x21
   1645c:	d005      	beq.n	1646a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
   1645e:	b121      	cbz	r1, 1646a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
   16460:	f240 7122 	movw	r1, #1826	; 0x722
   16464:	2031      	movs	r0, #49	; 0x31
   16466:	f7fa fa2f 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1646a:	2122      	movs	r1, #34	; 0x22
   1646c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   16470:	bd10      	pop	{r4, pc}
   16472:	0000      	.short	0x0000
   16474:	20000134 	.word	0x20000134
   16478:	4807      	ldr	r0, [pc, #28]	; (16498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>)
   1647a:	b510      	push	{r4, lr}
   1647c:	6880      	ldr	r0, [r0, #8]
   1647e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   16482:	2915      	cmp	r1, #21
   16484:	d004      	beq.n	16490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a44>
   16486:	f240 61a7 	movw	r1, #1703	; 0x6a7
   1648a:	2031      	movs	r0, #49	; 0x31
   1648c:	f7fa fa1c 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16490:	2119      	movs	r1, #25
   16492:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   16496:	bd10      	pop	{r4, pc}
   16498:	20000134 	.word	0x20000134
   1649c:	4807      	ldr	r0, [pc, #28]	; (164bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>)
   1649e:	b510      	push	{r4, lr}
   164a0:	6880      	ldr	r0, [r0, #8]
   164a2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   164a6:	2915      	cmp	r1, #21
   164a8:	d004      	beq.n	164b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a68>
   164aa:	f240 61a1 	movw	r1, #1697	; 0x6a1
   164ae:	2031      	movs	r0, #49	; 0x31
   164b0:	f7fa fa0a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   164b4:	2117      	movs	r1, #23
   164b6:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   164ba:	bd10      	pop	{r4, pc}
   164bc:	20000134 	.word	0x20000134
   164c0:	b570      	push	{r4, r5, r6, lr}
   164c2:	4d1b      	ldr	r5, [pc, #108]	; (16530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>)
   164c4:	68a8      	ldr	r0, [r5, #8]
   164c6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   164ca:	291b      	cmp	r1, #27
   164cc:	d002      	beq.n	164d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
   164ce:	f240 61c1 	movw	r1, #1729	; 0x6c1
   164d2:	e007      	b.n	164e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
   164d4:	2400      	movs	r4, #0
   164d6:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
   164da:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
   164de:	b121      	cbz	r1, 164ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
   164e0:	f240 61c5 	movw	r1, #1733	; 0x6c5
   164e4:	2031      	movs	r0, #49	; 0x31
   164e6:	f7fa f9ef 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   164ea:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
   164ee:	b141      	cbz	r1, 16502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab6>
   164f0:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
   164f4:	8801      	ldrh	r1, [r0, #0]
   164f6:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
   164fa:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
   164fe:	210c      	movs	r1, #12
   16500:	e008      	b.n	16514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>
   16502:	8801      	ldrh	r1, [r0, #0]
   16504:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
   16508:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
   1650c:	2101      	movs	r1, #1
   1650e:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
   16512:	210b      	movs	r1, #11
   16514:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
   16518:	8800      	ldrh	r0, [r0, #0]
   1651a:	f7fa fdef 	bl	110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1651e:	f003 f924 	bl	1976a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
   16522:	f7fc fb5d 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   16526:	68a8      	ldr	r0, [r5, #8]
   16528:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
   1652c:	bd70      	pop	{r4, r5, r6, pc}
   1652e:	0000      	.short	0x0000
   16530:	20000134 	.word	0x20000134
   16534:	b510      	push	{r4, lr}
   16536:	4c08      	ldr	r4, [pc, #32]	; (16558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
   16538:	2301      	movs	r3, #1
   1653a:	4619      	mov	r1, r3
   1653c:	68a0      	ldr	r0, [r4, #8]
   1653e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   16542:	3070      	adds	r0, #112	; 0x70
   16544:	f003 fc9c 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16548:	2800      	cmp	r0, #0
   1654a:	d103      	bne.n	16554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
   1654c:	68a1      	ldr	r1, [r4, #8]
   1654e:	2008      	movs	r0, #8
   16550:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
   16554:	bd10      	pop	{r4, pc}
   16556:	0000      	.short	0x0000
   16558:	20000134 	.word	0x20000134
   1655c:	4814      	ldr	r0, [pc, #80]	; (165b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>)
   1655e:	b510      	push	{r4, lr}
   16560:	68c1      	ldr	r1, [r0, #12]
   16562:	6880      	ldr	r0, [r0, #8]
   16564:	7909      	ldrb	r1, [r1, #4]
   16566:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   1656a:	2a0a      	cmp	r2, #10
   1656c:	d109      	bne.n	16582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
   1656e:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
   16572:	428a      	cmp	r2, r1
   16574:	d105      	bne.n	16582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
   16576:	2100      	movs	r1, #0
   16578:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
   1657c:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
   16580:	bd10      	pop	{r4, pc}
   16582:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
   16586:	0713      	lsls	r3, r2, #28
   16588:	d507      	bpl.n	1659a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4e>
   1658a:	f022 0108 	bic.w	r1, r2, #8
   1658e:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
   16592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16596:	f7fe bb8b 	b.w	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   1659a:	29ff      	cmp	r1, #255	; 0xff
   1659c:	d004      	beq.n	165a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b5c>
   1659e:	f240 617d 	movw	r1, #1661	; 0x67d
   165a2:	2031      	movs	r0, #49	; 0x31
   165a4:	f7fa f990 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   165a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   165ac:	f7ff be94 	b.w	162d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
   165b0:	20000134 	.word	0x20000134
   165b4:	b510      	push	{r4, lr}
   165b6:	4c15      	ldr	r4, [pc, #84]	; (1660c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc0>)
   165b8:	68a0      	ldr	r0, [r4, #8]
   165ba:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   165be:	0789      	lsls	r1, r1, #30
   165c0:	d411      	bmi.n	165e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9a>
   165c2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   165c6:	2301      	movs	r3, #1
   165c8:	2100      	movs	r1, #0
   165ca:	3070      	adds	r0, #112	; 0x70
   165cc:	f003 fc58 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   165d0:	b120      	cbz	r0, 165dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b90>
   165d2:	68a1      	ldr	r1, [r4, #8]
   165d4:	2006      	movs	r0, #6
   165d6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
   165da:	e009      	b.n	165f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
   165dc:	f240 61e7 	movw	r1, #1767	; 0x6e7
   165e0:	2031      	movs	r0, #49	; 0x31
   165e2:	f7fa f971 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   165e6:	2100      	movs	r1, #0
   165e8:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
   165ec:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
   165f0:	68a0      	ldr	r0, [r4, #8]
   165f2:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
   165f6:	0780      	lsls	r0, r0, #30
   165f8:	d507      	bpl.n	1660a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
   165fa:	f7fe fb59 	bl	14cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
   165fe:	68a0      	ldr	r0, [r4, #8]
   16600:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
   16604:	f021 0102 	bic.w	r1, r1, #2
   16608:	7001      	strb	r1, [r0, #0]
   1660a:	bd10      	pop	{r4, pc}
   1660c:	20000134 	.word	0x20000134
   16610:	4808      	ldr	r0, [pc, #32]	; (16634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
   16612:	b510      	push	{r4, lr}
   16614:	6880      	ldr	r0, [r0, #8]
   16616:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
   1661a:	b941      	cbnz	r1, 1662e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be2>
   1661c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   16620:	2301      	movs	r3, #1
   16622:	2106      	movs	r1, #6
   16624:	3070      	adds	r0, #112	; 0x70
   16626:	f003 fc2b 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1662a:	2800      	cmp	r0, #0
   1662c:	d000      	beq.n	16630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be4>
   1662e:	2001      	movs	r0, #1
   16630:	bd10      	pop	{r4, pc}
   16632:	0000      	.short	0x0000
   16634:	20000134 	.word	0x20000134
   16638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1663a:	4c59      	ldr	r4, [pc, #356]	; (167a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d54>)
   1663c:	4606      	mov	r6, r0
   1663e:	4615      	mov	r5, r2
   16640:	68a0      	ldr	r0, [r4, #8]
   16642:	b109      	cbz	r1, 16648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
   16644:	2100      	movs	r1, #0
   16646:	e004      	b.n	16652 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c06>
   16648:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
   1664c:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
   16650:	4411      	add	r1, r2
   16652:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
   16656:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
   1665a:	f88d 1000 	strb.w	r1, [sp]
   1665e:	9900      	ldr	r1, [sp, #0]
   16660:	9100      	str	r1, [sp, #0]
   16662:	f89d 1000 	ldrb.w	r1, [sp]
   16666:	b939      	cbnz	r1, 16678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
   16668:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
   1666c:	2301      	movs	r3, #1
   1666e:	4619      	mov	r1, r3
   16670:	3070      	adds	r0, #112	; 0x70
   16672:	f003 fc05 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16676:	b130      	cbz	r0, 16686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
   16678:	68a0      	ldr	r0, [r4, #8]
   1667a:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
   1667e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   16682:	4411      	add	r1, r2
   16684:	8001      	strh	r1, [r0, #0]
   16686:	68a0      	ldr	r0, [r4, #8]
   16688:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
   1668c:	b132      	cbz	r2, 1669c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c50>
   1668e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   16692:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
   16696:	4419      	add	r1, r3
   16698:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
   1669c:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
   166a0:	2b00      	cmp	r3, #0
   166a2:	dd06      	ble.n	166b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c66>
   166a4:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
   166a8:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
   166ac:	4439      	add	r1, r7
   166ae:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
   166b2:	2101      	movs	r1, #1
   166b4:	273d      	movs	r7, #61	; 0x3d
   166b6:	b116      	cbz	r6, 166be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
   166b8:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
   166bc:	e012      	b.n	166e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
   166be:	7824      	ldrb	r4, [r4, #0]
   166c0:	2c02      	cmp	r4, #2
   166c2:	d009      	beq.n	166d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8c>
   166c4:	2c01      	cmp	r4, #1
   166c6:	d011      	beq.n	166ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca0>
   166c8:	b33d      	cbz	r5, 1671a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cce>
   166ca:	f100 0294 	add.w	r2, r0, #148	; 0x94
   166ce:	7011      	strb	r1, [r2, #0]
   166d0:	06e9      	lsls	r1, r5, #27
   166d2:	d50e      	bpl.n	166f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca6>
   166d4:	211e      	movs	r1, #30
   166d6:	e018      	b.n	1670a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
   166d8:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
   166dc:	2a06      	cmp	r2, #6
   166de:	d044      	beq.n	1676a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   166e0:	2216      	movs	r2, #22
   166e2:	e042      	b.n	1676a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   166e4:	f100 0294 	add.w	r2, r0, #148	; 0x94
   166e8:	7011      	strb	r1, [r2, #0]
   166ea:	e047      	b.n	1677c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   166ec:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
   166f0:	e03b      	b.n	1676a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   166f2:	0729      	lsls	r1, r5, #28
   166f4:	d502      	bpl.n	166fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
   166f6:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
   166fa:	e03f      	b.n	1677c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   166fc:	06a9      	lsls	r1, r5, #26
   166fe:	d501      	bpl.n	16704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb8>
   16700:	2123      	movs	r1, #35	; 0x23
   16702:	e002      	b.n	1670a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
   16704:	07a9      	lsls	r1, r5, #30
   16706:	d003      	beq.n	16710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>
   16708:	212a      	movs	r1, #42	; 0x2a
   1670a:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
   1670e:	e035      	b.n	1677c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   16710:	f640 41c1 	movw	r1, #3265	; 0xcc1
   16714:	2031      	movs	r0, #49	; 0x31
   16716:	f7fa f8d7 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1671a:	b12a      	cbz	r2, 16728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cdc>
   1671c:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
   16720:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
   16724:	42a2      	cmp	r2, r4
   16726:	d216      	bcs.n	16756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
   16728:	2b00      	cmp	r3, #0
   1672a:	dd05      	ble.n	16738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>
   1672c:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
   16730:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   16734:	429a      	cmp	r2, r3
   16736:	d20e      	bcs.n	16756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
   16738:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
   1673c:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
   16740:	4293      	cmp	r3, r2
   16742:	d30a      	bcc.n	1675a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
   16744:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
   16748:	f88d 3000 	strb.w	r3, [sp]
   1674c:	9b00      	ldr	r3, [sp, #0]
   1674e:	9300      	str	r3, [sp, #0]
   16750:	f89d 3000 	ldrb.w	r3, [sp]
   16754:	b10b      	cbz	r3, 1675a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
   16756:	2222      	movs	r2, #34	; 0x22
   16758:	e007      	b.n	1676a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   1675a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
   1675e:	b13b      	cbz	r3, 16770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d24>
   16760:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   16764:	4293      	cmp	r3, r2
   16766:	d309      	bcc.n	1677c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   16768:	2208      	movs	r2, #8
   1676a:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
   1676e:	e7b9      	b.n	166e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
   16770:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
   16774:	2a06      	cmp	r2, #6
   16776:	d301      	bcc.n	1677c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
   16778:	223e      	movs	r2, #62	; 0x3e
   1677a:	e7f6      	b.n	1676a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
   1677c:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
   16780:	f88d 1000 	strb.w	r1, [sp]
   16784:	9900      	ldr	r1, [sp, #0]
   16786:	9100      	str	r1, [sp, #0]
   16788:	f89d 1000 	ldrb.w	r1, [sp]
   1678c:	b119      	cbz	r1, 16796 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4a>
   1678e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16792:	f004 bf0e 	b.w	1b5b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   16796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1679a:	2100      	movs	r1, #0
   1679c:	f7fd bbfe 	b.w	13f9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   167a0:	20000134 	.word	0x20000134
   167a4:	b570      	push	{r4, r5, r6, lr}
   167a6:	4d2d      	ldr	r5, [pc, #180]	; (1685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e10>)
   167a8:	68a8      	ldr	r0, [r5, #8]
   167aa:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
   167ae:	b151      	cbz	r1, 167c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
   167b0:	2901      	cmp	r1, #1
   167b2:	d008      	beq.n	167c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
   167b4:	2902      	cmp	r1, #2
   167b6:	d009      	beq.n	167cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
   167b8:	2903      	cmp	r1, #3
   167ba:	d007      	beq.n	167cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
   167bc:	f640 217f 	movw	r1, #2687	; 0xa7f
   167c0:	2031      	movs	r0, #49	; 0x31
   167c2:	f7fa f881 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   167c6:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
   167ca:	e035      	b.n	16838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dec>
   167cc:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
   167d0:	2908      	cmp	r1, #8
   167d2:	d034      	beq.n	1683e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
   167d4:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
   167d8:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
   167dc:	2400      	movs	r4, #0
   167de:	1c8b      	adds	r3, r1, #2
   167e0:	429a      	cmp	r2, r3
   167e2:	d306      	bcc.n	167f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
   167e4:	1a51      	subs	r1, r2, r1
   167e6:	1e89      	subs	r1, r1, #2
   167e8:	040c      	lsls	r4, r1, #16
   167ea:	0c24      	lsrs	r4, r4, #16
   167ec:	d001      	beq.n	167f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
   167ee:	1e64      	subs	r4, r4, #1
   167f0:	b2a4      	uxth	r4, r4
   167f2:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
   167f6:	b139      	cbz	r1, 16808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbc>
   167f8:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
   167fc:	2301      	movs	r3, #1
   167fe:	2109      	movs	r1, #9
   16800:	3070      	adds	r0, #112	; 0x70
   16802:	f003 fb3d 	bl	19e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16806:	b330      	cbz	r0, 16856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0a>
   16808:	f7ff ff02 	bl	16610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
   1680c:	b168      	cbz	r0, 1682a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
   1680e:	68a9      	ldr	r1, [r5, #8]
   16810:	2000      	movs	r0, #0
   16812:	3198      	adds	r1, #152	; 0x98
   16814:	c906      	ldmia	r1, {r1, r2}
   16816:	1c8b      	adds	r3, r1, #2
   16818:	429a      	cmp	r2, r3
   1681a:	d303      	bcc.n	16824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
   1681c:	1a50      	subs	r0, r2, r1
   1681e:	1e80      	subs	r0, r0, #2
   16820:	d000      	beq.n	16824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
   16822:	1e40      	subs	r0, r0, #1
   16824:	42a0      	cmp	r0, r4
   16826:	d200      	bcs.n	1682a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
   16828:	b284      	uxth	r4, r0
   1682a:	b10c      	cbz	r4, 16830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
   1682c:	1e64      	subs	r4, r4, #1
   1682e:	b2a4      	uxth	r4, r4
   16830:	68a8      	ldr	r0, [r5, #8]
   16832:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
   16836:	4421      	add	r1, r4
   16838:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
   1683c:	bd70      	pop	{r4, r5, r6, pc}
   1683e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
   16842:	2903      	cmp	r1, #3
   16844:	d3bf      	bcc.n	167c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
   16846:	f830 1f74 	ldrh.w	r1, [r0, #116]!
   1684a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   1684c:	4411      	add	r1, r2
   1684e:	1c49      	adds	r1, r1, #1
   16850:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
   16854:	bd70      	pop	{r4, r5, r6, pc}
   16856:	2400      	movs	r4, #0
   16858:	e7ea      	b.n	16830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
   1685a:	0000      	.short	0x0000
   1685c:	20000134 	.word	0x20000134

00016860 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
   16860:	4903      	ldr	r1, [pc, #12]	; (16870 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
   16862:	884a      	ldrh	r2, [r1, #2]
   16864:	8002      	strh	r2, [r0, #0]
   16866:	7809      	ldrb	r1, [r1, #0]
   16868:	7081      	strb	r1, [r0, #2]
   1686a:	2000      	movs	r0, #0
   1686c:	4770      	bx	lr
   1686e:	0000      	.short	0x0000
   16870:	20001378 	.word	0x20001378

00016874 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   16874:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   16876:	460c      	mov	r4, r1
   16878:	4605      	mov	r5, r0
   1687a:	8800      	ldrh	r0, [r0, #0]
   1687c:	4669      	mov	r1, sp
   1687e:	f003 fad5 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   16882:	0001      	movs	r1, r0
   16884:	f04f 0000 	mov.w	r0, #0
   16888:	d005      	beq.n	16896 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
   1688a:	f8c4 0002 	str.w	r0, [r4, #2]
   1688e:	71a0      	strb	r0, [r4, #6]
   16890:	8020      	strh	r0, [r4, #0]
   16892:	2002      	movs	r0, #2
   16894:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16896:	9901      	ldr	r1, [sp, #4]
   16898:	f111 0170 	adds.w	r1, r1, #112	; 0x70
   1689c:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
   168a0:	f8d1 2016 	ldr.w	r2, [r1, #22]
   168a4:	f8c4 2002 	str.w	r2, [r4, #2]
   168a8:	7e8a      	ldrb	r2, [r1, #26]
   168aa:	71a2      	strb	r2, [r4, #6]
   168ac:	882a      	ldrh	r2, [r5, #0]
   168ae:	8022      	strh	r2, [r4, #0]
   168b0:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
   168b4:	f88d 2008 	strb.w	r2, [sp, #8]
   168b8:	9a02      	ldr	r2, [sp, #8]
   168ba:	9202      	str	r2, [sp, #8]
   168bc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   168c0:	2a00      	cmp	r2, #0
   168c2:	d1eb      	bne.n	1689c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
   168c4:	2000      	movs	r0, #0
   168c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000168c8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   168c8:	b51c      	push	{r2, r3, r4, lr}
   168ca:	8800      	ldrh	r0, [r0, #0]
   168cc:	4669      	mov	r1, sp
   168ce:	f003 faad 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   168d2:	2800      	cmp	r0, #0
   168d4:	d10b      	bne.n	168ee <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
   168d6:	480b      	ldr	r0, [pc, #44]	; (16904 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
   168d8:	7800      	ldrb	r0, [r0, #0]
   168da:	b188      	cbz	r0, 16900 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
   168dc:	9801      	ldr	r0, [sp, #4]
   168de:	f005 fd86 	bl	1c3ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   168e2:	b128      	cbz	r0, 168f0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
   168e4:	9801      	ldr	r0, [sp, #4]
   168e6:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
   168ea:	b118      	cbz	r0, 168f4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   168ec:	203a      	movs	r0, #58	; 0x3a
   168ee:	bd1c      	pop	{r2, r3, r4, pc}
   168f0:	2002      	movs	r0, #2
   168f2:	bd1c      	pop	{r2, r3, r4, pc}
   168f4:	9901      	ldr	r1, [sp, #4]
   168f6:	2001      	movs	r0, #1
   168f8:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
   168fc:	2000      	movs	r0, #0
   168fe:	bd1c      	pop	{r2, r3, r4, pc}
   16900:	2011      	movs	r0, #17
   16902:	bd1c      	pop	{r2, r3, r4, pc}
   16904:	20000210 	.word	0x20000210

00016908 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
   16908:	b510      	push	{r4, lr}
   1690a:	4604      	mov	r4, r0
   1690c:	f005 fd66 	bl	1c3dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   16910:	b130      	cbz	r0, 16920 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
   16912:	4804      	ldr	r0, [pc, #16]	; (16924 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
   16914:	8881      	ldrh	r1, [r0, #4]
   16916:	8021      	strh	r1, [r4, #0]
   16918:	88c0      	ldrh	r0, [r0, #6]
   1691a:	8060      	strh	r0, [r4, #2]
   1691c:	2000      	movs	r0, #0
   1691e:	bd10      	pop	{r4, pc}
   16920:	2001      	movs	r0, #1
   16922:	bd10      	pop	{r4, pc}
   16924:	20000218 	.word	0x20000218

00016928 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
   16928:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1692a:	4605      	mov	r5, r0
   1692c:	f000 fb04 	bl	16f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   16930:	f3c0 2000 	ubfx	r0, r0, #8, #1
   16934:	b310      	cbz	r0, 1697c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
   16936:	2400      	movs	r4, #0
   16938:	a802      	add	r0, sp, #8
   1693a:	f88d 4004 	strb.w	r4, [sp, #4]
   1693e:	f88d 4008 	strb.w	r4, [sp, #8]
   16942:	9000      	str	r0, [sp, #0]
   16944:	78aa      	ldrb	r2, [r5, #2]
   16946:	7869      	ldrb	r1, [r5, #1]
   16948:	7828      	ldrb	r0, [r5, #0]
   1694a:	ab01      	add	r3, sp, #4
   1694c:	f005 fda7 	bl	1c49e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
   16950:	2800      	cmp	r0, #0
   16952:	d112      	bne.n	1697a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
   16954:	f89d 0004 	ldrb.w	r0, [sp, #4]
   16958:	f005 fca8 	bl	1c2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   1695c:	b180      	cbz	r0, 16980 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
   1695e:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16962:	f005 fca3 	bl	1c2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   16966:	b158      	cbz	r0, 16980 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
   16968:	4806      	ldr	r0, [pc, #24]	; (16984 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
   1696a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1696e:	7381      	strb	r1, [r0, #14]
   16970:	f89d 1008 	ldrb.w	r1, [sp, #8]
   16974:	73c1      	strb	r1, [r0, #15]
   16976:	8204      	strh	r4, [r0, #16]
   16978:	2000      	movs	r0, #0
   1697a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1697c:	2001      	movs	r0, #1
   1697e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16980:	2011      	movs	r0, #17
   16982:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16984:	20001378 	.word	0x20001378

00016988 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
   16988:	7801      	ldrb	r1, [r0, #0]
   1698a:	b171      	cbz	r1, 169aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   1698c:	7841      	ldrb	r1, [r0, #1]
   1698e:	b161      	cbz	r1, 169aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16990:	8841      	ldrh	r1, [r0, #2]
   16992:	291b      	cmp	r1, #27
   16994:	d309      	bcc.n	169aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16996:	8881      	ldrh	r1, [r0, #4]
   16998:	291b      	cmp	r1, #27
   1699a:	d306      	bcc.n	169aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   1699c:	4904      	ldr	r1, [pc, #16]	; (169b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
   1699e:	6802      	ldr	r2, [r0, #0]
   169a0:	600a      	str	r2, [r1, #0]
   169a2:	8880      	ldrh	r0, [r0, #4]
   169a4:	8088      	strh	r0, [r1, #4]
   169a6:	2000      	movs	r0, #0
   169a8:	4770      	bx	lr
   169aa:	2012      	movs	r0, #18
   169ac:	4770      	bx	lr
   169ae:	0000      	.short	0x0000
   169b0:	20001378 	.word	0x20001378

000169b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
   169b4:	6800      	ldr	r0, [r0, #0]
   169b6:	f240 41e2 	movw	r1, #1250	; 0x4e2
   169ba:	4288      	cmp	r0, r1
   169bc:	d303      	bcc.n	169c6 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
   169be:	4903      	ldr	r1, [pc, #12]	; (169cc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
   169c0:	6088      	str	r0, [r1, #8]
   169c2:	2000      	movs	r0, #0
   169c4:	4770      	bx	lr
   169c6:	2012      	movs	r0, #18
   169c8:	4770      	bx	lr
   169ca:	0000      	.short	0x0000
   169cc:	20001378 	.word	0x20001378

000169d0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
   169d0:	4a03      	ldr	r2, [pc, #12]	; (169e0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
   169d2:	e9d2 1200 	ldrd	r1, r2, [r2]
   169d6:	6001      	str	r1, [r0, #0]
   169d8:	6042      	str	r2, [r0, #4]
   169da:	2000      	movs	r0, #0
   169dc:	4770      	bx	lr
   169de:	0000      	.short	0x0000
   169e0:	00016e14 	.word	0x00016e14

000169e4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
   169e4:	b510      	push	{r4, lr}
   169e6:	2005      	movs	r0, #5
   169e8:	f000 fa9c 	bl	16f24 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   169ec:	f7fd fe52 	bl	14694 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
   169f0:	4902      	ldr	r1, [pc, #8]	; (169fc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
   169f2:	4801      	ldr	r0, [pc, #4]	; (169f8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
   169f4:	6048      	str	r0, [r1, #4]
   169f6:	bd10      	pop	{r4, pc}
   169f8:	00016a55 	.word	0x00016a55
   169fc:	20000210 	.word	0x20000210

00016a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   16a00:	b510      	push	{r4, lr}
   16a02:	f003 f967 	bl	19cd4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   16a06:	f7fb fc6f 	bl	122e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   16a0a:	f000 faa5 	bl	16f58 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   16a0e:	f003 fe0f 	bl	1a630 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   16a12:	480e      	ldr	r0, [pc, #56]	; (16a4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
   16a14:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16a18:	4b0d      	ldr	r3, [pc, #52]	; (16a50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
   16a1a:	8281      	strh	r1, [r0, #20]
   16a1c:	2100      	movs	r1, #0
   16a1e:	7581      	strb	r1, [r0, #22]
   16a20:	8301      	strh	r1, [r0, #24]
   16a22:	221b      	movs	r2, #27
   16a24:	801a      	strh	r2, [r3, #0]
   16a26:	f44f 74a4 	mov.w	r4, #328	; 0x148
   16a2a:	805c      	strh	r4, [r3, #2]
   16a2c:	809a      	strh	r2, [r3, #4]
   16a2e:	80dc      	strh	r4, [r3, #6]
   16a30:	7381      	strb	r1, [r0, #14]
   16a32:	73c1      	strb	r1, [r0, #15]
   16a34:	2303      	movs	r3, #3
   16a36:	7003      	strb	r3, [r0, #0]
   16a38:	2302      	movs	r3, #2
   16a3a:	7043      	strb	r3, [r0, #1]
   16a3c:	8042      	strh	r2, [r0, #2]
   16a3e:	8082      	strh	r2, [r0, #4]
   16a40:	f640 62a6 	movw	r2, #3750	; 0xea6
   16a44:	6082      	str	r2, [r0, #8]
   16a46:	7481      	strb	r1, [r0, #18]
   16a48:	7301      	strb	r1, [r0, #12]
   16a4a:	bd10      	pop	{r4, pc}
   16a4c:	20001378 	.word	0x20001378
   16a50:	20000218 	.word	0x20000218
   16a54:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a58:	4692      	mov	sl, r2
   16a5a:	460f      	mov	r7, r1
   16a5c:	4681      	mov	r9, r0
   16a5e:	f005 fcbd 	bl	1c3dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   16a62:	2800      	cmp	r0, #0
   16a64:	d063      	beq.n	16b2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
   16a66:	4933      	ldr	r1, [pc, #204]	; (16b34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
   16a68:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
   16a6c:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
   16a70:	8808      	ldrh	r0, [r1, #0]
   16a72:	4290      	cmp	r0, r2
   16a74:	d300      	bcc.n	16a78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
   16a76:	4610      	mov	r0, r2
   16a78:	4680      	mov	r8, r0
   16a7a:	8888      	ldrh	r0, [r1, #4]
   16a7c:	42b0      	cmp	r0, r6
   16a7e:	d200      	bcs.n	16a82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
   16a80:	4606      	mov	r6, r0
   16a82:	884c      	ldrh	r4, [r1, #2]
   16a84:	f640 0048 	movw	r0, #2120	; 0x848
   16a88:	4284      	cmp	r4, r0
   16a8a:	d300      	bcc.n	16a8e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
   16a8c:	4604      	mov	r4, r0
   16a8e:	88cd      	ldrh	r5, [r1, #6]
   16a90:	4285      	cmp	r5, r0
   16a92:	d300      	bcc.n	16a96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
   16a94:	4605      	mov	r5, r0
   16a96:	4284      	cmp	r4, r0
   16a98:	d300      	bcc.n	16a9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
   16a9a:	4604      	mov	r4, r0
   16a9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   16aa0:	2e1b      	cmp	r6, #27
   16aa2:	d001      	beq.n	16aa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
   16aa4:	428d      	cmp	r5, r1
   16aa6:	d104      	bne.n	16ab2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
   16aa8:	f1b8 0f1b 	cmp.w	r8, #27
   16aac:	d03f      	beq.n	16b2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
   16aae:	428c      	cmp	r4, r1
   16ab0:	d03d      	beq.n	16b2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
   16ab2:	466a      	mov	r2, sp
   16ab4:	4651      	mov	r1, sl
   16ab6:	4648      	mov	r0, r9
   16ab8:	f005 fc1b 	bl	1c2f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   16abc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   16ac0:	4641      	mov	r1, r8
   16ac2:	4540      	cmp	r0, r8
   16ac4:	d900      	bls.n	16ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
   16ac6:	4608      	mov	r0, r1
   16ac8:	80f8      	strh	r0, [r7, #6]
   16aca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   16ace:	42a1      	cmp	r1, r4
   16ad0:	d800      	bhi.n	16ad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
   16ad2:	460c      	mov	r4, r1
   16ad4:	813c      	strh	r4, [r7, #8]
   16ad6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16ada:	42b1      	cmp	r1, r6
   16adc:	d800      	bhi.n	16ae0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
   16ade:	460e      	mov	r6, r1
   16ae0:	807e      	strh	r6, [r7, #2]
   16ae2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   16ae6:	42a9      	cmp	r1, r5
   16ae8:	d900      	bls.n	16aec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
   16aea:	4629      	mov	r1, r5
   16aec:	80b9      	strh	r1, [r7, #4]
   16aee:	2201      	movs	r2, #1
   16af0:	703a      	strb	r2, [r7, #0]
   16af2:	381b      	subs	r0, #27
   16af4:	28e0      	cmp	r0, #224	; 0xe0
   16af6:	d902      	bls.n	16afe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
   16af8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
   16afc:	e014      	b.n	16b28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   16afe:	3e1b      	subs	r6, #27
   16b00:	2ee0      	cmp	r6, #224	; 0xe0
   16b02:	d902      	bls.n	16b0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
   16b04:	f640 4182 	movw	r1, #3202	; 0xc82
   16b08:	e00e      	b.n	16b28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   16b0a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
   16b0e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
   16b12:	4284      	cmp	r4, r0
   16b14:	d902      	bls.n	16b1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
   16b16:	f640 4184 	movw	r1, #3204	; 0xc84
   16b1a:	e005      	b.n	16b28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   16b1c:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
   16b20:	4281      	cmp	r1, r0
   16b22:	d904      	bls.n	16b2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
   16b24:	f640 4186 	movw	r1, #3206	; 0xc86
   16b28:	2039      	movs	r0, #57	; 0x39
   16b2a:	f7f9 fecd 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16b2e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b32:	0000      	.short	0x0000
   16b34:	20000218 	.word	0x20000218

00016b38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
   16b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b3c:	b088      	sub	sp, #32
   16b3e:	460c      	mov	r4, r1
   16b40:	4606      	mov	r6, r0
   16b42:	f003 ff98 	bl	1aa76 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   16b46:	b198      	cbz	r0, 16b70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
   16b48:	4630      	mov	r0, r6
   16b4a:	f003 ff87 	bl	1aa5c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   16b4e:	b130      	cbz	r0, 16b5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
   16b50:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   16b54:	2012      	movs	r0, #18
   16b56:	2900      	cmp	r1, #0
   16b58:	d00b      	beq.n	16b72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16b5a:	2980      	cmp	r1, #128	; 0x80
   16b5c:	d809      	bhi.n	16b72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16b5e:	4630      	mov	r0, r6
   16b60:	f003 ff6b 	bl	1aa3a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
   16b64:	b140      	cbz	r0, 16b78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   16b66:	4630      	mov	r0, r6
   16b68:	f003 fee3 	bl	1a932 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
   16b6c:	b130      	cbz	r0, 16b7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
   16b6e:	e009      	b.n	16b84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
   16b70:	2042      	movs	r0, #66	; 0x42
   16b72:	b008      	add	sp, #32
   16b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b78:	200c      	movs	r0, #12
   16b7a:	e7fa      	b.n	16b72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16b7c:	4630      	mov	r0, r6
   16b7e:	f003 ff67 	bl	1aa50 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
   16b82:	b3a8      	cbz	r0, 16bf0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
   16b84:	4630      	mov	r0, r6
   16b86:	f004 f93e 	bl	1ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   16b8a:	2800      	cmp	r0, #0
   16b8c:	d1f4      	bne.n	16b78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   16b8e:	4630      	mov	r0, r6
   16b90:	f003 feea 	bl	1a968 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
   16b94:	2800      	cmp	r0, #0
   16b96:	d1ef      	bne.n	16b78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   16b98:	4630      	mov	r0, r6
   16b9a:	f7fc f9d7 	bl	12f4c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
   16b9e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   16ba2:	f242 7110 	movw	r1, #10000	; 0x2710
   16ba6:	fb00 f801 	mul.w	r8, r0, r1
   16baa:	78e1      	ldrb	r1, [r4, #3]
   16bac:	4630      	mov	r0, r6
   16bae:	f003 ff3b 	bl	1aa28 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
   16bb2:	4630      	mov	r0, r6
   16bb4:	f003 ff4e 	bl	1aa54 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   16bb8:	b1e8      	cbz	r0, 16bf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
   16bba:	2200      	movs	r2, #0
   16bbc:	4611      	mov	r1, r2
   16bbe:	a801      	add	r0, sp, #4
   16bc0:	f7fa f8e0 	bl	10d84 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
   16bc4:	0004      	movs	r4, r0
   16bc6:	d06a      	beq.n	16c9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
   16bc8:	2100      	movs	r1, #0
   16bca:	f7fb fdbb 	bl	12744 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   16bce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   16bd2:	8020      	strh	r0, [r4, #0]
   16bd4:	4621      	mov	r1, r4
   16bd6:	4630      	mov	r0, r6
   16bd8:	f003 ff60 	bl	1aa9c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
   16bdc:	f005 fbfe 	bl	1c3dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   16be0:	4d3a      	ldr	r5, [pc, #232]	; (16ccc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
   16be2:	2800      	cmp	r0, #0
   16be4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   16be8:	d00f      	beq.n	16c0a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
   16bea:	886a      	ldrh	r2, [r5, #2]
   16bec:	88a9      	ldrh	r1, [r5, #4]
   16bee:	e00e      	b.n	16c0e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
   16bf0:	e7ff      	b.n	16bf2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
   16bf2:	2012      	movs	r0, #18
   16bf4:	e7bd      	b.n	16b72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16bf6:	4642      	mov	r2, r8
   16bf8:	2100      	movs	r1, #0
   16bfa:	4630      	mov	r0, r6
   16bfc:	f7fd f8f0 	bl	13de0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   16c00:	2800      	cmp	r0, #0
   16c02:	d0b6      	beq.n	16b72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16c04:	f241 414c 	movw	r1, #5196	; 0x144c
   16c08:	e053      	b.n	16cb2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
   16c0a:	221b      	movs	r2, #27
   16c0c:	4611      	mov	r1, r2
   16c0e:	84c2      	strh	r2, [r0, #38]	; 0x26
   16c10:	8501      	strh	r1, [r0, #40]	; 0x28
   16c12:	68a8      	ldr	r0, [r5, #8]
   16c14:	62e0      	str	r0, [r4, #44]	; 0x2c
   16c16:	f641 574c 	movw	r7, #7500	; 0x1d4c
   16c1a:	4630      	mov	r0, r6
   16c1c:	f003 ff22 	bl	1aa64 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   16c20:	b910      	cbnz	r0, 16c28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
   16c22:	4630      	mov	r0, r6
   16c24:	f003 ff38 	bl	1aa98 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
   16c28:	60e7      	str	r7, [r4, #12]
   16c2a:	8821      	ldrh	r1, [r4, #0]
   16c2c:	f8ad 1008 	strh.w	r1, [sp, #8]
   16c30:	7ba9      	ldrb	r1, [r5, #14]
   16c32:	f88d 100a 	strb.w	r1, [sp, #10]
   16c36:	7be9      	ldrb	r1, [r5, #15]
   16c38:	f88d 100b 	strb.w	r1, [sp, #11]
   16c3c:	8a29      	ldrh	r1, [r5, #16]
   16c3e:	f8ad 100c 	strh.w	r1, [sp, #12]
   16c42:	a905      	add	r1, sp, #20
   16c44:	9100      	str	r1, [sp, #0]
   16c46:	2001      	movs	r0, #1
   16c48:	ab04      	add	r3, sp, #16
   16c4a:	aa02      	add	r2, sp, #8
   16c4c:	4621      	mov	r1, r4
   16c4e:	f005 fb86 	bl	1c35e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   16c52:	b140      	cbz	r0, 16c66 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
   16c54:	2100      	movs	r1, #0
   16c56:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   16c5a:	f7fa f8bd 	bl	10dd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   16c5e:	b1f0      	cbz	r0, 16c9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
   16c60:	f241 4198 	movw	r1, #5272	; 0x1498
   16c64:	e025      	b.n	16cb2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
   16c66:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16c6a:	f88d 0018 	strb.w	r0, [sp, #24]
   16c6e:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16c72:	f88d 0019 	strb.w	r0, [sp, #25]
   16c76:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   16c7a:	f8ad 001a 	strh.w	r0, [sp, #26]
   16c7e:	a906      	add	r1, sp, #24
   16c80:	4620      	mov	r0, r4
   16c82:	f003 f992 	bl	19faa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   16c86:	7868      	ldrb	r0, [r5, #1]
   16c88:	9000      	str	r0, [sp, #0]
   16c8a:	782b      	ldrb	r3, [r5, #0]
   16c8c:	88aa      	ldrh	r2, [r5, #4]
   16c8e:	8869      	ldrh	r1, [r5, #2]
   16c90:	8820      	ldrh	r0, [r4, #0]
   16c92:	f7fa f96d 	bl	10f70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
   16c96:	b120      	cbz	r0, 16ca2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
   16c98:	f241 41a3 	movw	r1, #5283	; 0x14a3
   16c9c:	e009      	b.n	16cb2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
   16c9e:	2009      	movs	r0, #9
   16ca0:	e767      	b.n	16b72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16ca2:	4642      	mov	r2, r8
   16ca4:	4621      	mov	r1, r4
   16ca6:	4630      	mov	r0, r6
   16ca8:	f7fd f89a 	bl	13de0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   16cac:	b120      	cbz	r0, 16cb8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
   16cae:	f241 41a5 	movw	r1, #5285	; 0x14a5
   16cb2:	2039      	movs	r0, #57	; 0x39
   16cb4:	f7f9 fe08 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16cb8:	4805      	ldr	r0, [pc, #20]	; (16cd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
   16cba:	6843      	ldr	r3, [r0, #4]
   16cbc:	b123      	cbz	r3, 16cc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
   16cbe:	2200      	movs	r2, #0
   16cc0:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
   16cc4:	4620      	mov	r0, r4
   16cc6:	4798      	blx	r3
   16cc8:	2000      	movs	r0, #0
   16cca:	e752      	b.n	16b72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   16ccc:	20001378 	.word	0x20001378
   16cd0:	20000210 	.word	0x20000210
   16cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cd8:	b088      	sub	sp, #32
   16cda:	4604      	mov	r4, r0
   16cdc:	8800      	ldrh	r0, [r0, #0]
   16cde:	a906      	add	r1, sp, #24
   16ce0:	f003 f8a4 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   16ce4:	2800      	cmp	r0, #0
   16ce6:	d147      	bne.n	16d78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16ce8:	9807      	ldr	r0, [sp, #28]
   16cea:	2700      	movs	r7, #0
   16cec:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
   16cf0:	f88d 1008 	strb.w	r1, [sp, #8]
   16cf4:	9902      	ldr	r1, [sp, #8]
   16cf6:	9102      	str	r1, [sp, #8]
   16cf8:	f89d 1008 	ldrb.w	r1, [sp, #8]
   16cfc:	f88d 100c 	strb.w	r1, [sp, #12]
   16d00:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
   16d04:	3070      	adds	r0, #112	; 0x70
   16d06:	0689      	lsls	r1, r1, #26
   16d08:	d502      	bpl.n	16d10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
   16d0a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   16d0e:	b149      	cbz	r1, 16d24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
   16d10:	f05f 0100 	movs.w	r1, #0
   16d14:	f88d 1004 	strb.w	r1, [sp, #4]
   16d18:	2105      	movs	r1, #5
   16d1a:	304c      	adds	r0, #76	; 0x4c
   16d1c:	f004 fc85 	bl	1b62a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   16d20:	b110      	cbz	r0, 16d28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
   16d22:	e004      	b.n	16d2e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
   16d24:	2101      	movs	r1, #1
   16d26:	e7f5      	b.n	16d14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
   16d28:	f89d 0004 	ldrb.w	r0, [sp, #4]
   16d2c:	b318      	cbz	r0, 16d76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
   16d2e:	8921      	ldrh	r1, [r4, #8]
   16d30:	88e0      	ldrh	r0, [r4, #6]
   16d32:	f005 fad0 	bl	1c2d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   16d36:	2800      	cmp	r0, #0
   16d38:	d11e      	bne.n	16d78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16d3a:	88a1      	ldrh	r1, [r4, #4]
   16d3c:	8860      	ldrh	r0, [r4, #2]
   16d3e:	f005 faca 	bl	1c2d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   16d42:	2800      	cmp	r0, #0
   16d44:	d118      	bne.n	16d78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16d46:	8921      	ldrh	r1, [r4, #8]
   16d48:	88e0      	ldrh	r0, [r4, #6]
   16d4a:	f005 faba 	bl	1c2c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   16d4e:	2800      	cmp	r0, #0
   16d50:	d112      	bne.n	16d78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16d52:	88a1      	ldrh	r1, [r4, #4]
   16d54:	8860      	ldrh	r0, [r4, #2]
   16d56:	f005 fab4 	bl	1c2c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   16d5a:	0006      	movs	r6, r0
   16d5c:	d10c      	bne.n	16d78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16d5e:	9807      	ldr	r0, [sp, #28]
   16d60:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
   16d64:	f04f 0801 	mov.w	r8, #1
   16d68:	f885 8001 	strb.w	r8, [r5, #1]
   16d6c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   16d70:	b129      	cbz	r1, 16d7e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
   16d72:	263a      	movs	r6, #58	; 0x3a
   16d74:	e02f      	b.n	16dd6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
   16d76:	201a      	movs	r0, #26
   16d78:	b008      	add	sp, #32
   16d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d7e:	4639      	mov	r1, r7
   16d80:	aa03      	add	r2, sp, #12
   16d82:	f005 fab6 	bl	1c2f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   16d86:	8861      	ldrh	r1, [r4, #2]
   16d88:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   16d8c:	4281      	cmp	r1, r0
   16d8e:	d200      	bcs.n	16d92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
   16d90:	4608      	mov	r0, r1
   16d92:	80e8      	strh	r0, [r5, #6]
   16d94:	88a1      	ldrh	r1, [r4, #4]
   16d96:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   16d9a:	4281      	cmp	r1, r0
   16d9c:	d200      	bcs.n	16da0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
   16d9e:	4608      	mov	r0, r1
   16da0:	8128      	strh	r0, [r5, #8]
   16da2:	88e2      	ldrh	r2, [r4, #6]
   16da4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   16da8:	428a      	cmp	r2, r1
   16daa:	d200      	bcs.n	16dae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
   16dac:	4611      	mov	r1, r2
   16dae:	8069      	strh	r1, [r5, #2]
   16db0:	8922      	ldrh	r2, [r4, #8]
   16db2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   16db6:	428a      	cmp	r2, r1
   16db8:	d200      	bcs.n	16dbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
   16dba:	4611      	mov	r1, r2
   16dbc:	f640 0248 	movw	r2, #2120	; 0x848
   16dc0:	80a9      	strh	r1, [r5, #4]
   16dc2:	4291      	cmp	r1, r2
   16dc4:	d300      	bcc.n	16dc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
   16dc6:	4611      	mov	r1, r2
   16dc8:	80a9      	strh	r1, [r5, #4]
   16dca:	4290      	cmp	r0, r2
   16dcc:	d200      	bcs.n	16dd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
   16dce:	4602      	mov	r2, r0
   16dd0:	812a      	strh	r2, [r5, #8]
   16dd2:	f885 8000 	strb.w	r8, [r5]
   16dd6:	706f      	strb	r7, [r5, #1]
   16dd8:	4630      	mov	r0, r6
   16dda:	e7cd      	b.n	16d78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
   16ddc:	b510      	push	{r4, lr}
   16dde:	4604      	mov	r4, r0
   16de0:	88c1      	ldrh	r1, [r0, #6]
   16de2:	8880      	ldrh	r0, [r0, #4]
   16de4:	f005 fa77 	bl	1c2d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   16de8:	2800      	cmp	r0, #0
   16dea:	d10f      	bne.n	16e0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
   16dec:	8861      	ldrh	r1, [r4, #2]
   16dee:	8820      	ldrh	r0, [r4, #0]
   16df0:	f005 fa71 	bl	1c2d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   16df4:	2800      	cmp	r0, #0
   16df6:	d109      	bne.n	16e0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
   16df8:	4805      	ldr	r0, [pc, #20]	; (16e10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
   16dfa:	88a1      	ldrh	r1, [r4, #4]
   16dfc:	8081      	strh	r1, [r0, #4]
   16dfe:	8821      	ldrh	r1, [r4, #0]
   16e00:	8001      	strh	r1, [r0, #0]
   16e02:	88e1      	ldrh	r1, [r4, #6]
   16e04:	80c1      	strh	r1, [r0, #6]
   16e06:	8861      	ldrh	r1, [r4, #2]
   16e08:	8041      	strh	r1, [r0, #2]
   16e0a:	2000      	movs	r0, #0
   16e0c:	bd10      	pop	{r4, pc}
   16e0e:	0000      	.short	0x0000
   16e10:	20000218 	.word	0x20000218
   16e14:	0b12fe0b 	.word	0x0b12fe0b
   16e18:	12fe0059 	.word	0x12fe0059
   16e1c:	05060708 	.word	0x05060708
   16e20:	00020304 	.word	0x00020304
   16e24:	f0f4f8fc 	.word	0xf0f4f8fc
   16e28:	0304d8ec 	.word	0x0304d8ec
   16e2c:	f4f8fc00 	.word	0xf4f8fc00
   16e30:	00d8ecf0 	.word	0x00d8ecf0

00016e34 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
   16e34:	b510      	push	{r4, lr}
   16e36:	f7fb fecd 	bl	12bd4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
   16e3a:	4804      	ldr	r0, [pc, #16]	; (16e4c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
   16e3c:	6840      	ldr	r0, [r0, #4]
   16e3e:	f005 fba6 	bl	1c58e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   16e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16e46:	f005 b8e2 	b.w	1c00e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
   16e4a:	0000      	.short	0x0000
   16e4c:	20000220 	.word	0x20000220

00016e50 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
   16e50:	b510      	push	{r4, lr}
   16e52:	4c07      	ldr	r4, [pc, #28]	; (16e70 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
   16e54:	68a0      	ldr	r0, [r4, #8]
   16e56:	f005 fb9a 	bl	1c58e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   16e5a:	68e0      	ldr	r0, [r4, #12]
   16e5c:	f005 fb97 	bl	1c58e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   16e60:	f002 ff38 	bl	19cd4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   16e64:	f7fb fa40 	bl	122e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   16e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16e6c:	f7ff bdc8 	b.w	16a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
   16e70:	20000220 	.word	0x20000220

00016e74 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
   16e74:	b500      	push	{lr}
   16e76:	4905      	ldr	r1, [pc, #20]	; (16e8c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
   16e78:	4805      	ldr	r0, [pc, #20]	; (16e90 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
   16e7a:	f005 fb69 	bl	1c550 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16e7e:	4804      	ldr	r0, [pc, #16]	; (16e90 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
   16e80:	4904      	ldr	r1, [pc, #16]	; (16e94 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
   16e82:	1d00      	adds	r0, r0, #4
   16e84:	f85d eb04 	ldr.w	lr, [sp], #4
   16e88:	f005 bb62 	b.w	1c550 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16e8c:	20000230 	.word	0x20000230
   16e90:	20000224 	.word	0x20000224
   16e94:	20000238 	.word	0x20000238

00016e98 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
   16e98:	b500      	push	{lr}
   16e9a:	4908      	ldr	r1, [pc, #32]	; (16ebc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
   16e9c:	4808      	ldr	r0, [pc, #32]	; (16ec0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   16e9e:	f005 fb57 	bl	1c550 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16ea2:	4807      	ldr	r0, [pc, #28]	; (16ec0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   16ea4:	4907      	ldr	r1, [pc, #28]	; (16ec4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
   16ea6:	1d00      	adds	r0, r0, #4
   16ea8:	f005 fb52 	bl	1c550 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16eac:	4804      	ldr	r0, [pc, #16]	; (16ec0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   16eae:	4906      	ldr	r1, [pc, #24]	; (16ec8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
   16eb0:	3008      	adds	r0, #8
   16eb2:	f85d eb04 	ldr.w	lr, [sp], #4
   16eb6:	f005 bb4b 	b.w	1c550 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
   16eba:	0000      	.short	0x0000
   16ebc:	20000248 	.word	0x20000248
   16ec0:	20000224 	.word	0x20000224
   16ec4:	20000250 	.word	0x20000250
   16ec8:	20000240 	.word	0x20000240

00016ecc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
   16ecc:	4801      	ldr	r0, [pc, #4]	; (16ed4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
   16ece:	7800      	ldrb	r0, [r0, #0]
   16ed0:	4770      	bx	lr
   16ed2:	0000      	.short	0x0000
   16ed4:	20000220 	.word	0x20000220
   16ed8:	b510      	push	{r4, lr}
   16eda:	f7fc f9a9 	bl	13230 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   16ede:	f7fd f80f 	bl	13f00 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
   16ee2:	4803      	ldr	r0, [pc, #12]	; (16ef0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
   16ee4:	f7fc f98a 	bl	131fc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
   16ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16eec:	f7fb be7e 	b.w	12bec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
   16ef0:	20001801 	.word	0x20001801
   16ef4:	4909      	ldr	r1, [pc, #36]	; (16f1c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
   16ef6:	b510      	push	{r4, lr}
   16ef8:	2001      	movs	r0, #1
   16efa:	7008      	strb	r0, [r1, #0]
   16efc:	f7fc f9c8 	bl	13290 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
   16f00:	f7fd fd20 	bl	14944 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
   16f04:	f002 fed4 	bl	19cb0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
   16f08:	4805      	ldr	r0, [pc, #20]	; (16f20 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
   16f0a:	f7fa fc53 	bl	117b4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
   16f0e:	2000      	movs	r0, #0
   16f10:	f7f9 fea8 	bl	10c64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   16f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16f18:	f7fb be70 	b.w	12bfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
   16f1c:	20000220 	.word	0x20000220
   16f20:	20001801 	.word	0x20001801

00016f24 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
   16f24:	2101      	movs	r1, #1
   16f26:	4081      	lsls	r1, r0
   16f28:	4802      	ldr	r0, [pc, #8]	; (16f34 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
   16f2a:	6802      	ldr	r2, [r0, #0]
   16f2c:	4311      	orrs	r1, r2
   16f2e:	6001      	str	r1, [r0, #0]
   16f30:	4770      	bx	lr
   16f32:	0000      	.short	0x0000
   16f34:	20000258 	.word	0x20000258

00016f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
   16f38:	4801      	ldr	r0, [pc, #4]	; (16f40 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
   16f3a:	6800      	ldr	r0, [r0, #0]
   16f3c:	4770      	bx	lr
   16f3e:	0000      	.short	0x0000
   16f40:	20000258 	.word	0x20000258

00016f44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
   16f44:	4803      	ldr	r0, [pc, #12]	; (16f54 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
   16f46:	8800      	ldrh	r0, [r0, #0]
   16f48:	f3c0 2000 	ubfx	r0, r0, #8, #1
   16f4c:	0040      	lsls	r0, r0, #1
   16f4e:	1c40      	adds	r0, r0, #1
   16f50:	4770      	bx	lr
   16f52:	0000      	.short	0x0000
   16f54:	20000258 	.word	0x20000258

00016f58 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
   16f58:	b510      	push	{r4, lr}
   16f5a:	f7f9 f911 	bl	10180 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   16f5e:	2200      	movs	r2, #0
   16f60:	4b08      	ldr	r3, [pc, #32]	; (16f84 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
   16f62:	4611      	mov	r1, r2
   16f64:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
   16f68:	4284      	cmp	r4, r0
   16f6a:	d303      	bcc.n	16f74 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
   16f6c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   16f70:	7882      	ldrb	r2, [r0, #2]
   16f72:	e003      	b.n	16f7c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
   16f74:	1c49      	adds	r1, r1, #1
   16f76:	b2c9      	uxtb	r1, r1
   16f78:	290c      	cmp	r1, #12
   16f7a:	d3f3      	bcc.n	16f64 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
   16f7c:	4802      	ldr	r0, [pc, #8]	; (16f88 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
   16f7e:	7002      	strb	r2, [r0, #0]
   16f80:	bd10      	pop	{r4, pc}
   16f82:	0000      	.short	0x0000
   16f84:	0001c5de 	.word	0x0001c5de
   16f88:	200002a7 	.word	0x200002a7

00016f8c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
   16f8c:	b570      	push	{r4, r5, r6, lr}
   16f8e:	4605      	mov	r5, r0
   16f90:	4616      	mov	r6, r2
   16f92:	460c      	mov	r4, r1
   16f94:	2002      	movs	r0, #2
   16f96:	f000 f9f9 	bl	1738c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   16f9a:	4906      	ldr	r1, [pc, #24]	; (16fb4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
   16f9c:	2001      	movs	r0, #1
   16f9e:	1ef6      	subs	r6, r6, #3
   16fa0:	7008      	strb	r0, [r1, #0]
   16fa2:	4805      	ldr	r0, [pc, #20]	; (16fb8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   16fa4:	6006      	str	r6, [r0, #0]
   16fa6:	4804      	ldr	r0, [pc, #16]	; (16fb8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   16fa8:	3808      	subs	r0, #8
   16faa:	6005      	str	r5, [r0, #0]
   16fac:	1f00      	subs	r0, r0, #4
   16fae:	6004      	str	r4, [r0, #0]
   16fb0:	bd70      	pop	{r4, r5, r6, pc}
   16fb2:	0000      	.short	0x0000
   16fb4:	200002a8 	.word	0x200002a8
   16fb8:	4000f510 	.word	0x4000f510

00016fbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
   16fbc:	b510      	push	{r4, lr}
   16fbe:	4c0c      	ldr	r4, [pc, #48]	; (16ff0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
   16fc0:	7820      	ldrb	r0, [r4, #0]
   16fc2:	b180      	cbz	r0, 16fe6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
   16fc4:	490b      	ldr	r1, [pc, #44]	; (16ff4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
   16fc6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   16fca:	6008      	str	r0, [r1, #0]
   16fcc:	f000 f86a 	bl	170a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
   16fd0:	2100      	movs	r1, #0
   16fd2:	b120      	cbz	r0, 16fde <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
   16fd4:	2001      	movs	r0, #1
   16fd6:	7060      	strb	r0, [r4, #1]
   16fd8:	4807      	ldr	r0, [pc, #28]	; (16ff8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
   16fda:	6800      	ldr	r0, [r0, #0]
   16fdc:	e001      	b.n	16fe2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
   16fde:	7061      	strb	r1, [r4, #1]
   16fe0:	2010      	movs	r0, #16
   16fe2:	70a0      	strb	r0, [r4, #2]
   16fe4:	7021      	strb	r1, [r4, #0]
   16fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16fea:	2000      	movs	r0, #0
   16fec:	f000 b9ce 	b.w	1738c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   16ff0:	200002a8 	.word	0x200002a8
   16ff4:	4001f508 	.word	0x4001f508
   16ff8:	4000f400 	.word	0x4000f400

00016ffc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
   16ffc:	b510      	push	{r4, lr}
   16ffe:	2002      	movs	r0, #2
   17000:	f000 f9c4 	bl	1738c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17004:	4904      	ldr	r1, [pc, #16]	; (17018 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
   17006:	2001      	movs	r0, #1
   17008:	7008      	strb	r0, [r1, #0]
   1700a:	f000 f859 	bl	170c0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
   1700e:	4903      	ldr	r1, [pc, #12]	; (1701c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
   17010:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17014:	6008      	str	r0, [r1, #0]
   17016:	bd10      	pop	{r4, pc}
   17018:	200002a8 	.word	0x200002a8
   1701c:	4001f504 	.word	0x4001f504

00017020 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
   17020:	4803      	ldr	r0, [pc, #12]	; (17030 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
   17022:	2100      	movs	r1, #0
   17024:	7001      	strb	r1, [r0, #0]
   17026:	7041      	strb	r1, [r0, #1]
   17028:	2110      	movs	r1, #16
   1702a:	7081      	strb	r1, [r0, #2]
   1702c:	4770      	bx	lr
   1702e:	0000      	.short	0x0000
   17030:	200002a8 	.word	0x200002a8

00017034 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
   17034:	4807      	ldr	r0, [pc, #28]	; (17054 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
   17036:	b510      	push	{r4, lr}
   17038:	7801      	ldrb	r1, [r0, #0]
   1703a:	b141      	cbz	r1, 1704e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
   1703c:	f000 f832 	bl	170a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
   17040:	b118      	cbz	r0, 1704a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
   17042:	4805      	ldr	r0, [pc, #20]	; (17058 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
   17044:	6800      	ldr	r0, [r0, #0]
   17046:	b2c0      	uxtb	r0, r0
   17048:	bd10      	pop	{r4, pc}
   1704a:	2010      	movs	r0, #16
   1704c:	bd10      	pop	{r4, pc}
   1704e:	7880      	ldrb	r0, [r0, #2]
   17050:	bd10      	pop	{r4, pc}
   17052:	0000      	.short	0x0000
   17054:	200002a8 	.word	0x200002a8
   17058:	4000f400 	.word	0x4000f400

0001705c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
   1705c:	4808      	ldr	r0, [pc, #32]	; (17080 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
   1705e:	b510      	push	{r4, lr}
   17060:	7801      	ldrb	r1, [r0, #0]
   17062:	b159      	cbz	r1, 1707c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
   17064:	4807      	ldr	r0, [pc, #28]	; (17084 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
   17066:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1706a:	b128      	cbz	r0, 17078 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
   1706c:	f000 f80c 	bl	17088 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
   17070:	2800      	cmp	r0, #0
   17072:	d000      	beq.n	17076 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
   17074:	2001      	movs	r0, #1
   17076:	bd10      	pop	{r4, pc}
   17078:	2002      	movs	r0, #2
   1707a:	bd10      	pop	{r4, pc}
   1707c:	7840      	ldrb	r0, [r0, #1]
   1707e:	bd10      	pop	{r4, pc}
   17080:	200002a8 	.word	0x200002a8
   17084:	4000f000 	.word	0x4000f000
   17088:	4805      	ldr	r0, [pc, #20]	; (170a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
   1708a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1708e:	b111      	cbz	r1, 17096 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
   17090:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   17094:	b108      	cbz	r0, 1709a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
   17096:	2000      	movs	r0, #0
   17098:	4770      	bx	lr
   1709a:	2001      	movs	r0, #1
   1709c:	4770      	bx	lr
   1709e:	0000      	.short	0x0000
   170a0:	4000f000 	.word	0x4000f000
   170a4:	4805      	ldr	r0, [pc, #20]	; (170bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
   170a6:	b510      	push	{r4, lr}
   170a8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   170ac:	b120      	cbz	r0, 170b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
   170ae:	f7ff ffeb 	bl	17088 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
   170b2:	b108      	cbz	r0, 170b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
   170b4:	2001      	movs	r0, #1
   170b6:	bd10      	pop	{r4, pc}
   170b8:	2000      	movs	r0, #0
   170ba:	bd10      	pop	{r4, pc}
   170bc:	4000f000 	.word	0x4000f000
   170c0:	4804      	ldr	r0, [pc, #16]	; (170d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
   170c2:	2100      	movs	r1, #0
   170c4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   170c8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   170cc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   170d0:	4770      	bx	lr
   170d2:	0000      	.short	0x0000
   170d4:	4000f000 	.word	0x4000f000

000170d8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
   170d8:	4a08      	ldr	r2, [pc, #32]	; (170fc <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
   170da:	b510      	push	{r4, lr}
   170dc:	e9c2 0102 	strd	r0, r1, [r2, #8]
   170e0:	4907      	ldr	r1, [pc, #28]	; (17100 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
   170e2:	4610      	mov	r0, r2
   170e4:	f7f9 fac0 	bl	10668 <mpsl_fem_lna_configuration_set>
   170e8:	2800      	cmp	r0, #0
   170ea:	d005      	beq.n	170f8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
   170ec:	1c40      	adds	r0, r0, #1
   170ee:	d003      	beq.n	170f8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
   170f0:	217d      	movs	r1, #125	; 0x7d
   170f2:	2040      	movs	r0, #64	; 0x40
   170f4:	f7f9 fbe8 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   170f8:	bd10      	pop	{r4, pc}
   170fa:	0000      	.short	0x0000
   170fc:	2000025c 	.word	0x2000025c
   17100:	00017130 	.word	0x00017130

00017104 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
   17104:	4a08      	ldr	r2, [pc, #32]	; (17128 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
   17106:	b510      	push	{r4, lr}
   17108:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1710c:	4907      	ldr	r1, [pc, #28]	; (1712c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
   1710e:	4610      	mov	r0, r2
   17110:	f7f9 fab6 	bl	10680 <mpsl_fem_pa_configuration_set>
   17114:	2800      	cmp	r0, #0
   17116:	d005      	beq.n	17124 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
   17118:	1c40      	adds	r0, r0, #1
   1711a:	d003      	beq.n	17124 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
   1711c:	2172      	movs	r1, #114	; 0x72
   1711e:	2040      	movs	r0, #64	; 0x40
   17120:	f7f9 fbd2 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17124:	bd10      	pop	{r4, pc}
   17126:	0000      	.short	0x0000
   17128:	2000025c 	.word	0x2000025c
   1712c:	00017130 	.word	0x00017130
   17130:	00000001 	.word	0x00000001
   17134:	40001110 	.word	0x40001110
	...

00017148 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
   17148:	4a07      	ldr	r2, [pc, #28]	; (17168 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
   1714a:	b510      	push	{r4, lr}
   1714c:	7853      	ldrb	r3, [r2, #1]
   1714e:	b133      	cbz	r3, 1715e <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
   17150:	4b06      	ldr	r3, [pc, #24]	; (1716c <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
   17152:	6019      	str	r1, [r3, #0]
   17154:	1d19      	adds	r1, r3, #4
   17156:	6008      	str	r0, [r1, #0]
   17158:	2001      	movs	r0, #1
   1715a:	7090      	strb	r0, [r2, #2]
   1715c:	bd10      	pop	{r4, pc}
   1715e:	21ba      	movs	r1, #186	; 0xba
   17160:	203c      	movs	r0, #60	; 0x3c
   17162:	f7f9 fbb1 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17166:	0000      	.short	0x0000
   17168:	200002ab 	.word	0x200002ab
   1716c:	4000f50c 	.word	0x4000f50c

00017170 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
   17170:	4809      	ldr	r0, [pc, #36]	; (17198 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
   17172:	b510      	push	{r4, lr}
   17174:	7801      	ldrb	r1, [r0, #0]
   17176:	b151      	cbz	r1, 1718e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
   17178:	7880      	ldrb	r0, [r0, #2]
   1717a:	b140      	cbz	r0, 1718e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
   1717c:	4907      	ldr	r1, [pc, #28]	; (1719c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
   1717e:	2000      	movs	r0, #0
   17180:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   17184:	4906      	ldr	r1, [pc, #24]	; (171a0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
   17186:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   1718a:	6008      	str	r0, [r1, #0]
   1718c:	bd10      	pop	{r4, pc}
   1718e:	21e1      	movs	r1, #225	; 0xe1
   17190:	203c      	movs	r0, #60	; 0x3c
   17192:	f7f9 fb99 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17196:	0000      	.short	0x0000
   17198:	200002ab 	.word	0x200002ab
   1719c:	4000f000 	.word	0x4000f000
   171a0:	4001f504 	.word	0x4001f504

000171a4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
   171a4:	b570      	push	{r4, r5, r6, lr}
   171a6:	4c0b      	ldr	r4, [pc, #44]	; (171d4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
   171a8:	2500      	movs	r5, #0
   171aa:	7820      	ldrb	r0, [r4, #0]
   171ac:	b158      	cbz	r0, 171c6 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
   171ae:	f000 f8e5 	bl	1737c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
   171b2:	4809      	ldr	r0, [pc, #36]	; (171d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
   171b4:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
   171b8:	b118      	cbz	r0, 171c2 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
   171ba:	4808      	ldr	r0, [pc, #32]	; (171dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
   171bc:	6800      	ldr	r0, [r0, #0]
   171be:	70e0      	strb	r0, [r4, #3]
   171c0:	e000      	b.n	171c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
   171c2:	70e5      	strb	r5, [r4, #3]
   171c4:	7025      	strb	r5, [r4, #0]
   171c6:	2000      	movs	r0, #0
   171c8:	f000 f8e0 	bl	1738c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   171cc:	7065      	strb	r5, [r4, #1]
   171ce:	70a5      	strb	r5, [r4, #2]
   171d0:	bd70      	pop	{r4, r5, r6, pc}
   171d2:	0000      	.short	0x0000
   171d4:	200002ab 	.word	0x200002ab
   171d8:	4000f000 	.word	0x4000f000
   171dc:	4000f400 	.word	0x4000f400

000171e0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
   171e0:	480d      	ldr	r0, [pc, #52]	; (17218 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
   171e2:	b510      	push	{r4, lr}
   171e4:	7801      	ldrb	r1, [r0, #0]
   171e6:	b191      	cbz	r1, 1720e <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
   171e8:	7880      	ldrb	r0, [r0, #2]
   171ea:	b180      	cbz	r0, 1720e <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
   171ec:	490b      	ldr	r1, [pc, #44]	; (1721c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
   171ee:	2000      	movs	r0, #0
   171f0:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   171f4:	4a0a      	ldr	r2, [pc, #40]	; (17220 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
   171f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   171fa:	6010      	str	r0, [r2, #0]
   171fc:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   17200:	2a01      	cmp	r2, #1
   17202:	d103      	bne.n	1720c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
   17204:	604a      	str	r2, [r1, #4]
   17206:	4906      	ldr	r1, [pc, #24]	; (17220 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
   17208:	1d09      	adds	r1, r1, #4
   1720a:	6008      	str	r0, [r1, #0]
   1720c:	bd10      	pop	{r4, pc}
   1720e:	21d1      	movs	r1, #209	; 0xd1
   17210:	203c      	movs	r0, #60	; 0x3c
   17212:	f7f9 fb59 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17216:	0000      	.short	0x0000
   17218:	200002ab 	.word	0x200002ab
   1721c:	4000f000 	.word	0x4000f000
   17220:	4001f504 	.word	0x4001f504

00017224 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
   17224:	4803      	ldr	r0, [pc, #12]	; (17234 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
   17226:	2100      	movs	r1, #0
   17228:	7001      	strb	r1, [r0, #0]
   1722a:	7041      	strb	r1, [r0, #1]
   1722c:	7081      	strb	r1, [r0, #2]
   1722e:	70c1      	strb	r1, [r0, #3]
   17230:	4770      	bx	lr
   17232:	0000      	.short	0x0000
   17234:	200002ab 	.word	0x200002ab

00017238 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
   17238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1723c:	4605      	mov	r5, r0
   1723e:	461c      	mov	r4, r3
   17240:	4690      	mov	r8, r2
   17242:	460f      	mov	r7, r1
   17244:	2001      	movs	r0, #1
   17246:	f000 f8a1 	bl	1738c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   1724a:	4e12      	ldr	r6, [pc, #72]	; (17294 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
   1724c:	4812      	ldr	r0, [pc, #72]	; (17298 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   1724e:	7134      	strb	r4, [r6, #4]
   17250:	6007      	str	r7, [r0, #0]
   17252:	4911      	ldr	r1, [pc, #68]	; (17298 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   17254:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   17258:	1f09      	subs	r1, r1, #4
   1725a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1725e:	6008      	str	r0, [r1, #0]
   17260:	f001 fb4f 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   17264:	b938      	cbnz	r0, 17276 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
   17266:	480c      	ldr	r0, [pc, #48]	; (17298 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
   17268:	3010      	adds	r0, #16
   1726a:	6801      	ldr	r1, [r0, #0]
   1726c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   17270:	ea41 0108 	orr.w	r1, r1, r8
   17274:	6001      	str	r1, [r0, #0]
   17276:	f000 f881 	bl	1737c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
   1727a:	b93d      	cbnz	r5, 1728c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
   1727c:	4808      	ldr	r0, [pc, #32]	; (172a0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
   1727e:	4a07      	ldr	r2, [pc, #28]	; (1729c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
   17280:	4906      	ldr	r1, [pc, #24]	; (1729c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
   17282:	3afc      	subs	r2, #252	; 0xfc
   17284:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   17288:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
   1728c:	2001      	movs	r0, #1
   1728e:	7070      	strb	r0, [r6, #1]
   17290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17294:	200002ab 	.word	0x200002ab
   17298:	4000f508 	.word	0x4000f508
   1729c:	4000f100 	.word	0x4000f100
   172a0:	4001f088 	.word	0x4001f088

000172a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
   172a4:	4808      	ldr	r0, [pc, #32]	; (172c8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
   172a6:	b510      	push	{r4, lr}
   172a8:	7841      	ldrb	r1, [r0, #1]
   172aa:	b149      	cbz	r1, 172c0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
   172ac:	2101      	movs	r1, #1
   172ae:	7001      	strb	r1, [r0, #0]
   172b0:	4806      	ldr	r0, [pc, #24]	; (172cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
   172b2:	2200      	movs	r2, #0
   172b4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
   172b8:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   172bc:	6001      	str	r1, [r0, #0]
   172be:	bd10      	pop	{r4, pc}
   172c0:	21c5      	movs	r1, #197	; 0xc5
   172c2:	203c      	movs	r0, #60	; 0x3c
   172c4:	f7f9 fb00 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   172c8:	200002ab 	.word	0x200002ab
   172cc:	4000f000 	.word	0x4000f000

000172d0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
   172d0:	4806      	ldr	r0, [pc, #24]	; (172ec <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
   172d2:	7801      	ldrb	r1, [r0, #0]
   172d4:	b141      	cbz	r1, 172e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
   172d6:	4806      	ldr	r0, [pc, #24]	; (172f0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
   172d8:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
   172dc:	2800      	cmp	r0, #0
   172de:	d002      	beq.n	172e6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
   172e0:	4804      	ldr	r0, [pc, #16]	; (172f4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
   172e2:	6800      	ldr	r0, [r0, #0]
   172e4:	b2c0      	uxtb	r0, r0
   172e6:	4770      	bx	lr
   172e8:	78c0      	ldrb	r0, [r0, #3]
   172ea:	4770      	bx	lr
   172ec:	200002ab 	.word	0x200002ab
   172f0:	4000f000 	.word	0x4000f000
   172f4:	4000f400 	.word	0x4000f400

000172f8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
   172f8:	4901      	ldr	r1, [pc, #4]	; (17300 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
   172fa:	2001      	movs	r0, #1
   172fc:	6088      	str	r0, [r1, #8]
   172fe:	4770      	bx	lr
   17300:	4000f000 	.word	0x4000f000

00017304 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
   17304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17308:	2800      	cmp	r0, #0
   1730a:	d02e      	beq.n	1736a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
   1730c:	4818      	ldr	r0, [pc, #96]	; (17370 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
   1730e:	7800      	ldrb	r0, [r0, #0]
   17310:	b1b0      	cbz	r0, 17340 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
   17312:	4d18      	ldr	r5, [pc, #96]	; (17374 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
   17314:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   17318:	2800      	cmp	r0, #0
   1731a:	d126      	bne.n	1736a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
   1731c:	2702      	movs	r7, #2
   1731e:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
   17322:	4c15      	ldr	r4, [pc, #84]	; (17378 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
   17324:	6820      	ldr	r0, [r4, #0]
   17326:	43c0      	mvns	r0, r0
   17328:	f340 1600 	sbfx	r6, r0, #4, #1
   1732c:	6820      	ldr	r0, [r4, #0]
   1732e:	f040 0010 	orr.w	r0, r0, #16
   17332:	6020      	str	r0, [r4, #0]
   17334:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   17338:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
   1733c:	1c76      	adds	r6, r6, #1
   1733e:	e009      	b.n	17354 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
   17340:	f240 1153 	movw	r1, #339	; 0x153
   17344:	203c      	movs	r0, #60	; 0x3c
   17346:	f7f9 fabf 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1734a:	bf00      	nop
   1734c:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
   17350:	f7f9 f934 	bl	105bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   17354:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   17358:	2800      	cmp	r0, #0
   1735a:	d0f7      	beq.n	1734c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
   1735c:	b91e      	cbnz	r6, 17366 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
   1735e:	6820      	ldr	r0, [r4, #0]
   17360:	f020 0010 	bic.w	r0, r0, #16
   17364:	6020      	str	r0, [r4, #0]
   17366:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
   1736a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1736e:	0000      	.short	0x0000
   17370:	200002ab 	.word	0x200002ab
   17374:	4000f000 	.word	0x4000f000
   17378:	e000ed10 	.word	0xe000ed10
   1737c:	4902      	ldr	r1, [pc, #8]	; (17388 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
   1737e:	4801      	ldr	r0, [pc, #4]	; (17384 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
   17380:	6008      	str	r0, [r1, #0]
   17382:	4770      	bx	lr
   17384:	02020000 	.word	0x02020000
   17388:	4001f508 	.word	0x4001f508

0001738c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
   1738c:	b510      	push	{r4, lr}
   1738e:	4604      	mov	r4, r0
   17390:	f000 f822 	bl	173d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   17394:	2c00      	cmp	r4, #0
   17396:	d017      	beq.n	173c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
   17398:	4a0c      	ldr	r2, [pc, #48]	; (173cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
   1739a:	480c      	ldr	r0, [pc, #48]	; (173cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
   1739c:	490c      	ldr	r1, [pc, #48]	; (173d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
   1739e:	3214      	adds	r2, #20
   173a0:	4b0c      	ldr	r3, [pc, #48]	; (173d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
   173a2:	2c01      	cmp	r4, #1
   173a4:	d005      	beq.n	173b2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
   173a6:	2c02      	cmp	r4, #2
   173a8:	d008      	beq.n	173bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
   173aa:	2183      	movs	r1, #131	; 0x83
   173ac:	203d      	movs	r0, #61	; 0x3d
   173ae:	f7f9 fa8b 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   173b2:	2402      	movs	r4, #2
   173b4:	6004      	str	r4, [r0, #0]
   173b6:	6011      	str	r1, [r2, #0]
   173b8:	0620      	lsls	r0, r4, #24
   173ba:	e004      	b.n	173c6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
   173bc:	2403      	movs	r4, #3
   173be:	6004      	str	r4, [r0, #0]
   173c0:	6011      	str	r1, [r2, #0]
   173c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   173c6:	6018      	str	r0, [r3, #0]
   173c8:	bd10      	pop	{r4, pc}
   173ca:	0000      	.short	0x0000
   173cc:	4000f500 	.word	0x4000f500
   173d0:	20001903 	.word	0x20001903
   173d4:	4001f504 	.word	0x4001f504
   173d8:	4804      	ldr	r0, [pc, #16]	; (173ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
   173da:	2100      	movs	r1, #0
   173dc:	6001      	str	r1, [r0, #0]
   173de:	6001      	str	r1, [r0, #0]
   173e0:	4903      	ldr	r1, [pc, #12]	; (173f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
   173e2:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
   173e6:	6008      	str	r0, [r1, #0]
   173e8:	4770      	bx	lr
   173ea:	0000      	.short	0x0000
   173ec:	4000f500 	.word	0x4000f500
   173f0:	4001f508 	.word	0x4001f508

000173f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
   173f4:	4805      	ldr	r0, [pc, #20]	; (1740c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
   173f6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   173fa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   173fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   17402:	2100      	movs	r1, #0
   17404:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
   17408:	4770      	bx	lr
   1740a:	0000      	.short	0x0000
   1740c:	40001000 	.word	0x40001000

00017410 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
   17410:	4904      	ldr	r1, [pc, #16]	; (17424 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
   17412:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
   17416:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
   1741a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1741e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   17422:	4770      	bx	lr
   17424:	40001000 	.word	0x40001000

00017428 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
   17428:	4801      	ldr	r0, [pc, #4]	; (17430 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
   1742a:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   1742e:	4770      	bx	lr
   17430:	200013bc 	.word	0x200013bc

00017434 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
   17434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17436:	4c23      	ldr	r4, [pc, #140]	; (174c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
   17438:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   1743c:	f010 0f10 	tst.w	r0, #16
   17440:	d001      	beq.n	17446 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
   17442:	2701      	movs	r7, #1
   17444:	e000      	b.n	17448 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
   17446:	2700      	movs	r7, #0
   17448:	2010      	movs	r0, #16
   1744a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1744e:	2002      	movs	r0, #2
   17450:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   17454:	481c      	ldr	r0, [pc, #112]	; (174c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
   17456:	2500      	movs	r5, #0
   17458:	491d      	ldr	r1, [pc, #116]	; (174d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
   1745a:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
   1745e:	481b      	ldr	r0, [pc, #108]	; (174cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
   17460:	6008      	str	r0, [r1, #0]
   17462:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   17466:	f44f 7688 	mov.w	r6, #272	; 0x110
   1746a:	f010 0fff 	tst.w	r0, #255	; 0xff
   1746e:	d018      	beq.n	174a2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
   17470:	20ff      	movs	r0, #255	; 0xff
   17472:	f88d 0000 	strb.w	r0, [sp]
   17476:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   1747a:	2001      	movs	r0, #1
   1747c:	6120      	str	r0, [r4, #16]
   1747e:	e004      	b.n	1748a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
   17480:	f89d 0000 	ldrb.w	r0, [sp]
   17484:	1e40      	subs	r0, r0, #1
   17486:	f88d 0000 	strb.w	r0, [sp]
   1748a:	f89d 0000 	ldrb.w	r0, [sp]
   1748e:	b128      	cbz	r0, 1749c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
   17490:	4631      	mov	r1, r6
   17492:	4620      	mov	r0, r4
   17494:	f005 f972 	bl	1c77c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   17498:	2800      	cmp	r0, #0
   1749a:	d0f1      	beq.n	17480 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
   1749c:	f89d 0000 	ldrb.w	r0, [sp]
   174a0:	b158      	cbz	r0, 174ba <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
   174a2:	f000 fcdb 	bl	17e5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
   174a6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   174aa:	f000 fe57 	bl	1815c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   174ae:	2f00      	cmp	r7, #0
   174b0:	d002      	beq.n	174b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
   174b2:	2010      	movs	r0, #16
   174b4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   174b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   174ba:	f240 718f 	movw	r1, #1935	; 0x78f
   174be:	203e      	movs	r0, #62	; 0x3e
   174c0:	f7f9 fa02 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   174c4:	40001000 	.word	0x40001000
   174c8:	200013bc 	.word	0x200013bc
   174cc:	0c0e0000 	.word	0x0c0e0000
   174d0:	4001f508 	.word	0x4001f508

000174d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
   174d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174d8:	4d20      	ldr	r5, [pc, #128]	; (1755c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
   174da:	4607      	mov	r7, r0
   174dc:	4688      	mov	r8, r1
   174de:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
   174e2:	07c1      	lsls	r1, r0, #31
   174e4:	d018      	beq.n	17518 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
   174e6:	4a1e      	ldr	r2, [pc, #120]	; (17560 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
   174e8:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
   174ec:	6011      	str	r1, [r2, #0]
   174ee:	4c1d      	ldr	r4, [pc, #116]	; (17564 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
   174f0:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
   174f4:	f041 0101 	orr.w	r1, r1, #1
   174f8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   174fc:	f040 0002 	orr.w	r0, r0, #2
   17500:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
   17504:	4640      	mov	r0, r8
   17506:	f000 fe8d 	bl	18224 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   1750a:	f000 fc45 	bl	17d98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   1750e:	2601      	movs	r6, #1
   17510:	b13f      	cbz	r7, 17522 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
   17512:	2f01      	cmp	r7, #1
   17514:	d00e      	beq.n	17534 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
   17516:	e016      	b.n	17546 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
   17518:	f240 611a 	movw	r1, #1562	; 0x61a
   1751c:	203e      	movs	r0, #62	; 0x3e
   1751e:	f7f9 f9d3 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17522:	4640      	mov	r0, r8
   17524:	f000 fc68 	bl	17df8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   17528:	4640      	mov	r0, r8
   1752a:	f000 fc19 	bl	17d60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1752e:	726e      	strb	r6, [r5, #9]
   17530:	6026      	str	r6, [r4, #0]
   17532:	e008      	b.n	17546 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
   17534:	f000 fc88 	bl	17e48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   17538:	f000 fdd6 	bl	180e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   1753c:	2002      	movs	r0, #2
   1753e:	7268      	strb	r0, [r5, #9]
   17540:	f000 fcfa 	bl	17f38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   17544:	6066      	str	r6, [r4, #4]
   17546:	4808      	ldr	r0, [pc, #32]	; (17568 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
   17548:	64c6      	str	r6, [r0, #76]	; 0x4c
   1754a:	4807      	ldr	r0, [pc, #28]	; (17568 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
   1754c:	300c      	adds	r0, #12
   1754e:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
   17552:	4638      	mov	r0, r7
   17554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17558:	f005 b8f8 	b.w	1c74c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   1755c:	200013bc 	.word	0x200013bc
   17560:	4001f504 	.word	0x4001f504
   17564:	40001000 	.word	0x40001000
   17568:	40008000 	.word	0x40008000

0001756c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
   1756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17570:	4d35      	ldr	r5, [pc, #212]	; (17648 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
   17572:	4606      	mov	r6, r0
   17574:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   17578:	4689      	mov	r9, r1
   1757a:	6028      	str	r0, [r5, #0]
   1757c:	4c33      	ldr	r4, [pc, #204]	; (1764c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
   1757e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   17582:	f040 0002 	orr.w	r0, r0, #2
   17586:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
   1758a:	4608      	mov	r0, r1
   1758c:	f000 fe4a 	bl	18224 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   17590:	f000 fc02 	bl	17d98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   17594:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 17650 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
   17598:	2700      	movs	r7, #0
   1759a:	b116      	cbz	r6, 175a2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
   1759c:	2e01      	cmp	r6, #1
   1759e:	d027      	beq.n	175f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
   175a0:	e03f      	b.n	17622 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
   175a2:	4648      	mov	r0, r9
   175a4:	f000 fc28 	bl	17df8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   175a8:	79e0      	ldrb	r0, [r4, #7]
   175aa:	2801      	cmp	r0, #1
   175ac:	d105      	bne.n	175ba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
   175ae:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
   175b2:	f041 0108 	orr.w	r1, r1, #8
   175b6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
   175ba:	4648      	mov	r0, r9
   175bc:	f000 fbd0 	bl	17d60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   175c0:	2001      	movs	r0, #1
   175c2:	7260      	strb	r0, [r4, #9]
   175c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   175c6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   175ca:	62a0      	str	r0, [r4, #40]	; 0x28
   175cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   175d0:	6028      	str	r0, [r5, #0]
   175d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   175d6:	f1b9 0f02 	cmp.w	r9, #2
   175da:	d007      	beq.n	175ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
   175dc:	f640 0034 	movw	r0, #2100	; 0x834
   175e0:	f649 72ec 	movw	r2, #40940	; 0x9fec
   175e4:	4410      	add	r0, r2
   175e6:	fbb0 f7f1 	udiv	r7, r0, r1
   175ea:	e01a      	b.n	17622 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
   175ec:	4608      	mov	r0, r1
   175ee:	e7f7      	b.n	175e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
   175f0:	f000 fc2a 	bl	17e48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   175f4:	f000 fd78 	bl	180e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   175f8:	79e0      	ldrb	r0, [r4, #7]
   175fa:	2801      	cmp	r0, #1
   175fc:	d105      	bne.n	1760a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
   175fe:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
   17602:	f041 0104 	orr.w	r1, r1, #4
   17606:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
   1760a:	2002      	movs	r0, #2
   1760c:	7260      	strb	r0, [r4, #9]
   1760e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   17610:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
   17614:	62a0      	str	r0, [r4, #40]	; 0x28
   17616:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   1761a:	6028      	str	r0, [r5, #0]
   1761c:	2729      	movs	r7, #41	; 0x29
   1761e:	f000 fc8b 	bl	17f38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   17622:	f000 fc75 	bl	17f10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   17626:	f001 f843 	bl	186b0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
   1762a:	6800      	ldr	r0, [r0, #0]
   1762c:	2801      	cmp	r0, #1
   1762e:	d006      	beq.n	1763e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
   17630:	2100      	movs	r1, #0
   17632:	4630      	mov	r0, r6
   17634:	f005 f88a 	bl	1c74c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   17638:	4638      	mov	r0, r7
   1763a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1763e:	f7ff fef9 	bl	17434 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   17642:	2000      	movs	r0, #0
   17644:	e7f9      	b.n	1763a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
   17646:	0000      	.short	0x0000
   17648:	4001f504 	.word	0x4001f504
   1764c:	200013bc 	.word	0x200013bc
   17650:	40001000 	.word	0x40001000

00017654 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
   17654:	4a02      	ldr	r2, [pc, #8]	; (17660 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
   17656:	6b13      	ldr	r3, [r2, #48]	; 0x30
   17658:	6003      	str	r3, [r0, #0]
   1765a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   1765c:	6008      	str	r0, [r1, #0]
   1765e:	4770      	bx	lr
   17660:	200013bc 	.word	0x200013bc

00017664 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
   17664:	b510      	push	{r4, lr}
   17666:	c81d      	ldmia	r0, {r0, r2, r3, r4}
   17668:	4901      	ldr	r1, [pc, #4]	; (17670 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
   1766a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
   1766e:	bd10      	pop	{r4, pc}
   17670:	200013ac 	.word	0x200013ac

00017674 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
   17674:	490f      	ldr	r1, [pc, #60]	; (176b4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
   17676:	b510      	push	{r4, lr}
   17678:	69ca      	ldr	r2, [r1, #28]
   1767a:	4282      	cmp	r2, r0
   1767c:	d302      	bcc.n	17684 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
   1767e:	f640 010a 	movw	r1, #2058	; 0x80a
   17682:	e00b      	b.n	1769c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
   17684:	2201      	movs	r2, #1
   17686:	730a      	strb	r2, [r1, #12]
   17688:	6108      	str	r0, [r1, #16]
   1768a:	490b      	ldr	r1, [pc, #44]	; (176b8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
   1768c:	644a      	str	r2, [r1, #68]	; 0x44
   1768e:	1d0a      	adds	r2, r1, #4
   17690:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   17694:	4283      	cmp	r3, r0
   17696:	d304      	bcc.n	176a2 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
   17698:	f640 0113 	movw	r1, #2067	; 0x813
   1769c:	203e      	movs	r0, #62	; 0x3e
   1769e:	f7f9 f913 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   176a2:	2300      	movs	r3, #0
   176a4:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
   176a8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   176ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   176b0:	f000 bd28 	b.w	18104 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
   176b4:	200013bc 	.word	0x200013bc
   176b8:	40008000 	.word	0x40008000

000176bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
   176bc:	b570      	push	{r4, r5, r6, lr}
   176be:	4c11      	ldr	r4, [pc, #68]	; (17704 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
   176c0:	4606      	mov	r6, r0
   176c2:	2002      	movs	r0, #2
   176c4:	7320      	strb	r0, [r4, #12]
   176c6:	2596      	movs	r5, #150	; 0x96
   176c8:	f000 f86e 	bl	177a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
   176cc:	4602      	mov	r2, r0
   176ce:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   176d2:	f894 1020 	ldrb.w	r1, [r4, #32]
   176d6:	2801      	cmp	r0, #1
   176d8:	d00f      	beq.n	176fa <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
   176da:	4628      	mov	r0, r5
   176dc:	f005 f858 	bl	1c790 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
   176e0:	6120      	str	r0, [r4, #16]
   176e2:	4809      	ldr	r0, [pc, #36]	; (17708 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
   176e4:	2100      	movs	r1, #0
   176e6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   176ea:	6921      	ldr	r1, [r4, #16]
   176ec:	69e0      	ldr	r0, [r4, #28]
   176ee:	4408      	add	r0, r1
   176f0:	4905      	ldr	r1, [pc, #20]	; (17708 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
   176f2:	1d09      	adds	r1, r1, #4
   176f4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   176f8:	bd70      	pop	{r4, r5, r6, pc}
   176fa:	4633      	mov	r3, r6
   176fc:	4628      	mov	r0, r5
   176fe:	f005 f863 	bl	1c7c8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
   17702:	e7ed      	b.n	176e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
   17704:	200013bc 	.word	0x200013bc
   17708:	40008000 	.word	0x40008000

0001770c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
   1770c:	b510      	push	{r4, lr}
   1770e:	f001 f914 	bl	1893a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   17712:	2800      	cmp	r0, #0
   17714:	d006      	beq.n	17724 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
   17716:	4804      	ldr	r0, [pc, #16]	; (17728 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
   17718:	6801      	ldr	r1, [r0, #0]
   1771a:	f021 0101 	bic.w	r1, r1, #1
   1771e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   17722:	6001      	str	r1, [r0, #0]
   17724:	bd10      	pop	{r4, pc}
   17726:	0000      	.short	0x0000
   17728:	40001774 	.word	0x40001774

0001772c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
   1772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17730:	2238      	movs	r2, #56	; 0x38
   17732:	2100      	movs	r1, #0
   17734:	4813      	ldr	r0, [pc, #76]	; (17784 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
   17736:	f001 f9b0 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1773a:	f000 fd0f 	bl	1815c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   1773e:	f001 f8b5 	bl	188ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   17742:	4d11      	ldr	r5, [pc, #68]	; (17788 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   17744:	4e10      	ldr	r6, [pc, #64]	; (17788 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   17746:	2400      	movs	r4, #0
   17748:	4f0f      	ldr	r7, [pc, #60]	; (17788 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   1774a:	3508      	adds	r5, #8
   1774c:	3610      	adds	r6, #16
   1774e:	b928      	cbnz	r0, 1775c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
   17750:	f001 f8c3 	bl	188da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   17754:	b910      	cbnz	r0, 1775c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
   17756:	f001 f8ca 	bl	188ee <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1775a:	b108      	cbz	r0, 17760 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
   1775c:	2224      	movs	r2, #36	; 0x24
   1775e:	e006      	b.n	1776e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
   17760:	f001 f905 	bl	1896e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   17764:	b910      	cbnz	r0, 1776c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
   17766:	f001 f8f8 	bl	1895a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   1776a:	b140      	cbz	r0, 1777e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
   1776c:	2240      	movs	r2, #64	; 0x40
   1776e:	21ff      	movs	r1, #255	; 0xff
   17770:	4638      	mov	r0, r7
   17772:	f001 f992 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   17776:	602c      	str	r4, [r5, #0]
   17778:	6034      	str	r4, [r6, #0]
   1777a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1777e:	2238      	movs	r2, #56	; 0x38
   17780:	e7f5      	b.n	1776e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
   17782:	0000      	.short	0x0000
   17784:	200013bc 	.word	0x200013bc
   17788:	40000e00 	.word	0x40000e00

0001778c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
   1778c:	4805      	ldr	r0, [pc, #20]	; (177a4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
   1778e:	b510      	push	{r4, lr}
   17790:	69c0      	ldr	r0, [r0, #28]
   17792:	2800      	cmp	r0, #0
   17794:	d104      	bne.n	177a0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
   17796:	f240 11fb 	movw	r1, #507	; 0x1fb
   1779a:	203e      	movs	r0, #62	; 0x3e
   1779c:	f7f9 f894 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   177a0:	bd10      	pop	{r4, pc}
   177a2:	0000      	.short	0x0000
   177a4:	200013bc 	.word	0x200013bc

000177a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
   177a8:	4814      	ldr	r0, [pc, #80]	; (177fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
   177aa:	b510      	push	{r4, lr}
   177ac:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   177b0:	7a40      	ldrb	r0, [r0, #9]
   177b2:	b141      	cbz	r1, 177c6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
   177b4:	2902      	cmp	r1, #2
   177b6:	d00b      	beq.n	177d0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
   177b8:	2802      	cmp	r0, #2
   177ba:	d009      	beq.n	177d0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
   177bc:	2901      	cmp	r1, #1
   177be:	d00b      	beq.n	177d8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
   177c0:	2801      	cmp	r0, #1
   177c2:	d009      	beq.n	177d8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
   177c4:	e016      	b.n	177f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
   177c6:	2800      	cmp	r0, #0
   177c8:	d1f6      	bne.n	177b8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
   177ca:	f240 117d 	movw	r1, #381	; 0x17d
   177ce:	e00e      	b.n	177ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
   177d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   177d4:	f000 bc38 	b.w	18048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
   177d8:	4809      	ldr	r0, [pc, #36]	; (17800 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
   177da:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   177de:	f000 000f 	and.w	r0, r0, #15
   177e2:	2803      	cmp	r0, #3
   177e4:	d006      	beq.n	177f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
   177e6:	2804      	cmp	r0, #4
   177e8:	d006      	beq.n	177f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
   177ea:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   177ee:	203e      	movs	r0, #62	; 0x3e
   177f0:	f7f9 f86a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   177f4:	2001      	movs	r0, #1
   177f6:	bd10      	pop	{r4, pc}
   177f8:	2002      	movs	r0, #2
   177fa:	bd10      	pop	{r4, pc}
   177fc:	200013bc 	.word	0x200013bc
   17800:	40001000 	.word	0x40001000

00017804 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
   17804:	4805      	ldr	r0, [pc, #20]	; (1781c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
   17806:	b510      	push	{r4, lr}
   17808:	6980      	ldr	r0, [r0, #24]
   1780a:	2800      	cmp	r0, #0
   1780c:	d104      	bne.n	17818 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
   1780e:	f240 11f5 	movw	r1, #501	; 0x1f5
   17812:	203e      	movs	r0, #62	; 0x3e
   17814:	f7f9 f858 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17818:	bd10      	pop	{r4, pc}
   1781a:	0000      	.short	0x0000
   1781c:	200013bc 	.word	0x200013bc

00017820 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
   17820:	b510      	push	{r4, lr}
   17822:	f000 fc7d 	bl	18120 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
   17826:	f7ff fe05 	bl	17434 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1782a:	f004 ff25 	bl	1c678 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
   1782e:	480f      	ldr	r0, [pc, #60]	; (1786c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
   17830:	4a0f      	ldr	r2, [pc, #60]	; (17870 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
   17832:	6a81      	ldr	r1, [r0, #40]	; 0x28
   17834:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   17838:	6011      	str	r1, [r2, #0]
   1783a:	2400      	movs	r4, #0
   1783c:	6284      	str	r4, [r0, #40]	; 0x28
   1783e:	7304      	strb	r4, [r0, #12]
   17840:	61c4      	str	r4, [r0, #28]
   17842:	6184      	str	r4, [r0, #24]
   17844:	f000 fc6c 	bl	18120 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
   17848:	480a      	ldr	r0, [pc, #40]	; (17874 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
   1784a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
   1784e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
   17852:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
   17856:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
   1785a:	2001      	movs	r0, #1
   1785c:	f004 ff45 	bl	1c6ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
   17860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17864:	2001      	movs	r0, #1
   17866:	f004 bf33 	b.w	1c6d0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
   1786a:	0000      	.short	0x0000
   1786c:	200013bc 	.word	0x200013bc
   17870:	4001f508 	.word	0x4001f508
   17874:	40008000 	.word	0x40008000

00017878 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
   17878:	b570      	push	{r4, r5, r6, lr}
   1787a:	2001      	movs	r0, #1
   1787c:	f004 ff35 	bl	1c6ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
   17880:	4c37      	ldr	r4, [pc, #220]	; (17960 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
   17882:	2000      	movs	r0, #0
   17884:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
   17888:	2001      	movs	r0, #1
   1788a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
   1788e:	f001 f844 	bl	1891a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   17892:	4d34      	ldr	r5, [pc, #208]	; (17964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   17894:	b118      	cbz	r0, 1789e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
   17896:	6828      	ldr	r0, [r5, #0]
   17898:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1789c:	6028      	str	r0, [r5, #0]
   1789e:	f001 f830 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   178a2:	b128      	cbz	r0, 178b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
   178a4:	6828      	ldr	r0, [r5, #0]
   178a6:	4930      	ldr	r1, [pc, #192]	; (17968 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
   178a8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
   178ac:	4308      	orrs	r0, r1
   178ae:	6028      	str	r0, [r5, #0]
   178b0:	f001 f843 	bl	1893a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   178b4:	b138      	cbz	r0, 178c6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
   178b6:	482b      	ldr	r0, [pc, #172]	; (17964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   178b8:	1d00      	adds	r0, r0, #4
   178ba:	6801      	ldr	r1, [r0, #0]
   178bc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
   178c0:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
   178c4:	6001      	str	r1, [r0, #0]
   178c6:	4927      	ldr	r1, [pc, #156]	; (17964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   178c8:	4828      	ldr	r0, [pc, #160]	; (1796c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
   178ca:	313c      	adds	r1, #60	; 0x3c
   178cc:	6008      	str	r0, [r1, #0]
   178ce:	f7f8 fee3 	bl	10698 <mpsl_fem_device_config_254_apply_get>
   178d2:	b140      	cbz	r0, 178e6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
   178d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   178d8:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
   178dc:	1c41      	adds	r1, r0, #1
   178de:	d002      	beq.n	178e6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
   178e0:	4920      	ldr	r1, [pc, #128]	; (17964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   178e2:	3110      	adds	r1, #16
   178e4:	6008      	str	r0, [r1, #0]
   178e6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   178ea:	6e00      	ldr	r0, [r0, #96]	; 0x60
   178ec:	1c41      	adds	r1, r0, #1
   178ee:	d004      	beq.n	178fa <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
   178f0:	491f      	ldr	r1, [pc, #124]	; (17970 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
   178f2:	680a      	ldr	r2, [r1, #0]
   178f4:	f360 4217 	bfi	r2, r0, #16, #8
   178f8:	600a      	str	r2, [r1, #0]
   178fa:	f240 1103 	movw	r1, #259	; 0x103
   178fe:	f240 605b 	movw	r0, #1627	; 0x65b
   17902:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
   17906:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   1790a:	2001      	movs	r0, #1
   1790c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
   17910:	f000 fc88 	bl	18224 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   17914:	f240 1001 	movw	r0, #257	; 0x101
   17918:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
   1791c:	2002      	movs	r0, #2
   1791e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   17922:	4915      	ldr	r1, [pc, #84]	; (17978 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
   17924:	4813      	ldr	r0, [pc, #76]	; (17974 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
   17926:	6008      	str	r0, [r1, #0]
   17928:	4914      	ldr	r1, [pc, #80]	; (1797c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
   1792a:	2000      	movs	r0, #0
   1792c:	4d14      	ldr	r5, [pc, #80]	; (17980 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
   1792e:	8608      	strh	r0, [r1, #48]	; 0x30
   17930:	3110      	adds	r1, #16
   17932:	61c8      	str	r0, [r1, #28]
   17934:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
   17938:	7028      	strb	r0, [r5, #0]
   1793a:	2001      	movs	r0, #1
   1793c:	f004 fec8 	bl	1c6d0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
   17940:	2010      	movs	r0, #16
   17942:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   17946:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1794a:	2002      	movs	r0, #2
   1794c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   17950:	6868      	ldr	r0, [r5, #4]
   17952:	2800      	cmp	r0, #0
   17954:	d002      	beq.n	1795c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
   17956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1795a:	4700      	bx	r0
   1795c:	bd70      	pop	{r4, r5, r6, pc}
   1795e:	0000      	.short	0x0000
   17960:	40001000 	.word	0x40001000
   17964:	4000173c 	.word	0x4000173c
   17968:	80000096 	.word	0x80000096
   1796c:	8900002c 	.word	0x8900002c
   17970:	4000158c 	.word	0x4000158c
   17974:	0c0e0000 	.word	0x0c0e0000
   17978:	4001f508 	.word	0x4001f508
   1797c:	200013ac 	.word	0x200013ac
   17980:	20000274 	.word	0x20000274

00017984 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
   17984:	4901      	ldr	r1, [pc, #4]	; (1798c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
   17986:	7508      	strb	r0, [r1, #20]
   17988:	4770      	bx	lr
   1798a:	0000      	.short	0x0000
   1798c:	200013bc 	.word	0x200013bc

00017990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
   17990:	4905      	ldr	r1, [pc, #20]	; (179a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
   17992:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   17996:	4805      	ldr	r0, [pc, #20]	; (179ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
   17998:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
   1799c:	f041 0101 	orr.w	r1, r1, #1
   179a0:	7001      	strb	r1, [r0, #0]
   179a2:	f000 ba7b 	b.w	17e9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   179a6:	0000      	.short	0x0000
   179a8:	40001000 	.word	0x40001000
   179ac:	200013bc 	.word	0x200013bc

000179b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
   179b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179b4:	4e36      	ldr	r6, [pc, #216]	; (17a90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
   179b6:	4607      	mov	r7, r0
   179b8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   179bc:	4689      	mov	r9, r1
   179be:	4614      	mov	r4, r2
   179c0:	6030      	str	r0, [r6, #0]
   179c2:	4610      	mov	r0, r2
   179c4:	f000 fc2e 	bl	18224 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
   179c8:	f000 f9e6 	bl	17d98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
   179cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 17a94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
   179d0:	4d31      	ldr	r5, [pc, #196]	; (17a98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
   179d2:	f04f 0801 	mov.w	r8, #1
   179d6:	b127      	cbz	r7, 179e2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
   179d8:	2f01      	cmp	r7, #1
   179da:	d01d      	beq.n	17a18 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
   179dc:	f240 710f 	movw	r1, #1807	; 0x70f
   179e0:	e04c      	b.n	17a7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
   179e2:	4620      	mov	r0, r4
   179e4:	f000 fa08 	bl	17df8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   179e8:	4620      	mov	r0, r4
   179ea:	f000 f9b9 	bl	17d60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   179ee:	2c02      	cmp	r4, #2
   179f0:	d00f      	beq.n	17a12 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
   179f2:	f640 0034 	movw	r0, #2100	; 0x834
   179f6:	bf00      	nop
   179f8:	f649 51f8 	movw	r1, #40440	; 0x9df8
   179fc:	4401      	add	r1, r0
   179fe:	4648      	mov	r0, r9
   17a00:	f000 fbb4 	bl	1816c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
   17a04:	4604      	mov	r4, r0
   17a06:	4650      	mov	r0, sl
   17a08:	f000 fb9c 	bl	18144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
   17a0c:	f885 8009 	strb.w	r8, [r5, #9]
   17a10:	e014      	b.n	17a3c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
   17a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   17a16:	e7ef      	b.n	179f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
   17a18:	f000 fa16 	bl	17e48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   17a1c:	f000 fb64 	bl	180e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   17a20:	f000 fa8a 	bl	17f38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
   17a24:	f649 71ba 	movw	r1, #40890	; 0x9fba
   17a28:	4648      	mov	r0, r9
   17a2a:	f000 fb9f 	bl	1816c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
   17a2e:	4604      	mov	r4, r0
   17a30:	4818      	ldr	r0, [pc, #96]	; (17a94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
   17a32:	1d00      	adds	r0, r0, #4
   17a34:	f000 fb86 	bl	18144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
   17a38:	2002      	movs	r0, #2
   17a3a:	7268      	strb	r0, [r5, #9]
   17a3c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17a9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
   17a40:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
   17a44:	4917      	ldr	r1, [pc, #92]	; (17aa4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
   17a46:	4816      	ldr	r0, [pc, #88]	; (17aa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
   17a48:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
   17a4c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   17a4e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   17a52:	62a8      	str	r0, [r5, #40]	; 0x28
   17a54:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   17a58:	6030      	str	r0, [r6, #0]
   17a5a:	2010      	movs	r0, #16
   17a5c:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
   17a60:	03c0      	lsls	r0, r0, #15
   17a62:	6030      	str	r0, [r6, #0]
   17a64:	f000 fa54 	bl	17f10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   17a68:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
   17a6c:	480b      	ldr	r0, [pc, #44]	; (17a9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
   17a6e:	300c      	adds	r0, #12
   17a70:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   17a74:	42a0      	cmp	r0, r4
   17a76:	d304      	bcc.n	17a82 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
   17a78:	f240 7136 	movw	r1, #1846	; 0x736
   17a7c:	203e      	movs	r0, #62	; 0x3e
   17a7e:	f7f8 ff23 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17a82:	4621      	mov	r1, r4
   17a84:	4638      	mov	r0, r7
   17a86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17a8a:	f004 be5f 	b.w	1c74c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
   17a8e:	0000      	.short	0x0000
   17a90:	4001f504 	.word	0x4001f504
   17a94:	40001000 	.word	0x40001000
   17a98:	200013bc 	.word	0x200013bc
   17a9c:	40008000 	.word	0x40008000
   17aa0:	40008140 	.word	0x40008140
   17aa4:	4001f098 	.word	0x4001f098

00017aa8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
   17aa8:	4b0d      	ldr	r3, [pc, #52]	; (17ae0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
   17aaa:	b510      	push	{r4, lr}
   17aac:	71d8      	strb	r0, [r3, #7]
   17aae:	729a      	strb	r2, [r3, #10]
   17ab0:	b151      	cbz	r1, 17ac8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
   17ab2:	2002      	movs	r0, #2
   17ab4:	7218      	strb	r0, [r3, #8]
   17ab6:	2801      	cmp	r0, #1
   17ab8:	d008      	beq.n	17acc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
   17aba:	2802      	cmp	r0, #2
   17abc:	d00f      	beq.n	17ade <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
   17abe:	f640 1112 	movw	r1, #2322	; 0x912
   17ac2:	203e      	movs	r0, #62	; 0x3e
   17ac4:	f7f8 ff00 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17ac8:	2001      	movs	r0, #1
   17aca:	e7f3      	b.n	17ab4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
   17acc:	7a58      	ldrb	r0, [r3, #9]
   17ace:	2802      	cmp	r0, #2
   17ad0:	d105      	bne.n	17ade <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
   17ad2:	f000 f9b9 	bl	17e48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
   17ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17ada:	f000 bb05 	b.w	180e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
   17ade:	bd10      	pop	{r4, pc}
   17ae0:	200013bc 	.word	0x200013bc

00017ae4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
   17ae4:	4902      	ldr	r1, [pc, #8]	; (17af0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
   17ae6:	2000      	movs	r0, #0
   17ae8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   17aec:	4770      	bx	lr
   17aee:	0000      	.short	0x0000
   17af0:	40008000 	.word	0x40008000

00017af4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
   17af4:	b538      	push	{r3, r4, r5, lr}
   17af6:	4c0b      	ldr	r4, [pc, #44]	; (17b24 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
   17af8:	4605      	mov	r5, r0
   17afa:	f44f 718e 	mov.w	r1, #284	; 0x11c
   17afe:	4620      	mov	r0, r4
   17b00:	f004 fe3c 	bl	1c77c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   17b04:	2800      	cmp	r0, #0
   17b06:	d00c      	beq.n	17b22 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
   17b08:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   17b0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   17b10:	4240      	negs	r0, r0
   17b12:	7028      	strb	r0, [r5, #0]
   17b14:	2000      	movs	r0, #0
   17b16:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   17b1a:	4803      	ldr	r0, [pc, #12]	; (17b28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
   17b1c:	6800      	ldr	r0, [r0, #0]
   17b1e:	9000      	str	r0, [sp, #0]
   17b20:	2001      	movs	r0, #1
   17b22:	bd38      	pop	{r3, r4, r5, pc}
   17b24:	40001000 	.word	0x40001000
   17b28:	4000111c 	.word	0x4000111c

00017b2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
   17b2c:	4903      	ldr	r1, [pc, #12]	; (17b3c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
   17b2e:	0e02      	lsrs	r2, r0, #24
   17b30:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
   17b34:	0200      	lsls	r0, r0, #8
   17b36:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
   17b3a:	4770      	bx	lr
   17b3c:	40001000 	.word	0x40001000

00017b40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
   17b40:	6800      	ldr	r0, [r0, #0]
   17b42:	4903      	ldr	r1, [pc, #12]	; (17b50 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
   17b44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17b48:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   17b4c:	4770      	bx	lr
   17b4e:	0000      	.short	0x0000
   17b50:	40001000 	.word	0x40001000

00017b54 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
   17b54:	b510      	push	{r4, lr}
   17b56:	f000 fb41 	bl	181dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   17b5a:	4807      	ldr	r0, [pc, #28]	; (17b78 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
   17b5c:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   17b60:	b2c0      	uxtb	r0, r0
   17b62:	2803      	cmp	r0, #3
   17b64:	d001      	beq.n	17b6a <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
   17b66:	280b      	cmp	r0, #11
   17b68:	d104      	bne.n	17b74 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
   17b6a:	f44f 7121 	mov.w	r1, #644	; 0x284
   17b6e:	203e      	movs	r0, #62	; 0x3e
   17b70:	f7f8 feaa 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17b74:	bd10      	pop	{r4, pc}
   17b76:	0000      	.short	0x0000
   17b78:	40001000 	.word	0x40001000

00017b7c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
   17b7c:	4901      	ldr	r1, [pc, #4]	; (17b84 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
   17b7e:	7548      	strb	r0, [r1, #21]
   17b80:	4770      	bx	lr
   17b82:	0000      	.short	0x0000
   17b84:	200013bc 	.word	0x200013bc

00017b88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
   17b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17b8c:	4853      	ldr	r0, [pc, #332]	; (17cdc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   17b8e:	f04f 0a01 	mov.w	sl, #1
   17b92:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
   17b96:	4851      	ldr	r0, [pc, #324]	; (17cdc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   17b98:	300c      	adds	r0, #12
   17b9a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
   17b9e:	4850      	ldr	r0, [pc, #320]	; (17ce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
   17ba0:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
   17ba4:	4c4f      	ldr	r4, [pc, #316]	; (17ce4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
   17ba6:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
   17baa:	f000 f957 	bl	17e5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
   17bae:	494e      	ldr	r1, [pc, #312]	; (17ce8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
   17bb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   17bb2:	6008      	str	r0, [r1, #0]
   17bb4:	f8df 9134 	ldr.w	r9, [pc, #308]	; 17cec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
   17bb8:	2600      	movs	r6, #0
   17bba:	62a6      	str	r6, [r4, #40]	; 0x28
   17bbc:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
   17bc0:	f240 121d 	movw	r2, #285	; 0x11d
   17bc4:	4391      	bics	r1, r2
   17bc6:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
   17bca:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   17bce:	f000 f9c5 	bl	17f5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
   17bd2:	4605      	mov	r5, r0
   17bd4:	4841      	ldr	r0, [pc, #260]	; (17cdc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   17bd6:	3008      	adds	r0, #8
   17bd8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   17bdc:	61e0      	str	r0, [r4, #28]
   17bde:	f7ff fde3 	bl	177a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
   17be2:	f884 0020 	strb.w	r0, [r4, #32]
   17be6:	7a60      	ldrb	r0, [r4, #9]
   17be8:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   17bec:	61a6      	str	r6, [r4, #24]
   17bee:	4e40      	ldr	r6, [pc, #256]	; (17cf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
   17bf0:	07a8      	lsls	r0, r5, #30
   17bf2:	d502      	bpl.n	17bfa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
   17bf4:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
   17bf8:	61a0      	str	r0, [r4, #24]
   17bfa:	0728      	lsls	r0, r5, #28
   17bfc:	d502      	bpl.n	17c04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
   17bfe:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
   17c02:	61a0      	str	r0, [r4, #24]
   17c04:	f04f 0800 	mov.w	r8, #0
   17c08:	4639      	mov	r1, r7
   17c0a:	4628      	mov	r0, r5
   17c0c:	f000 fa32 	bl	18074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
   17c10:	b918      	cbnz	r0, 17c1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
   17c12:	f8c9 a010 	str.w	sl, [r9, #16]
   17c16:	f04f 0801 	mov.w	r8, #1
   17c1a:	4f32      	ldr	r7, [pc, #200]	; (17ce4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
   17c1c:	07e8      	lsls	r0, r5, #31
   17c1e:	f1a7 0710 	sub.w	r7, r7, #16
   17c22:	d002      	beq.n	17c2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
   17c24:	6838      	ldr	r0, [r7, #0]
   17c26:	4780      	blx	r0
   17c28:	e031      	b.n	17c8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
   17c2a:	07a8      	lsls	r0, r5, #30
   17c2c:	d526      	bpl.n	17c7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
   17c2e:	0768      	lsls	r0, r5, #29
   17c30:	d41e      	bmi.n	17c70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17c32:	f000 fe82 	bl	1893a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   17c36:	b9d8      	cbnz	r0, 17c70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17c38:	f000 fe6f 	bl	1891a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   17c3c:	b9c0      	cbnz	r0, 17c70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17c3e:	482d      	ldr	r0, [pc, #180]	; (17cf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
   17c40:	6800      	ldr	r0, [r0, #0]
   17c42:	f3c0 5c42 	ubfx	ip, r0, #21, #3
   17c46:	f3c0 6100 	ubfx	r1, r0, #24, #1
   17c4a:	f000 030f 	and.w	r3, r0, #15
   17c4e:	f3c0 1203 	ubfx	r2, r0, #4, #4
   17c52:	f3c0 2003 	ubfx	r0, r0, #8, #4
   17c56:	b159      	cbz	r1, 17c70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17c58:	b10b      	cbz	r3, 17c5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
   17c5a:	b102      	cbz	r2, 17c5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
   17c5c:	b940      	cbnz	r0, 17c70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17c5e:	4825      	ldr	r0, [pc, #148]	; (17cf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
   17c60:	1d00      	adds	r0, r0, #4
   17c62:	6800      	ldr	r0, [r0, #0]
   17c64:	b120      	cbz	r0, 17c70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17c66:	f1bc 0f03 	cmp.w	ip, #3
   17c6a:	d201      	bcs.n	17c70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
   17c6c:	f045 0504 	orr.w	r5, r5, #4
   17c70:	f345 0080 	sbfx	r0, r5, #2, #1
   17c74:	4641      	mov	r1, r8
   17c76:	1c40      	adds	r0, r0, #1
   17c78:	687a      	ldr	r2, [r7, #4]
   17c7a:	e007      	b.n	17c8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
   17c7c:	f015 0f28 	tst.w	r5, #40	; 0x28
   17c80:	d005      	beq.n	17c8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
   17c82:	f345 1140 	sbfx	r1, r5, #5, #1
   17c86:	68ba      	ldr	r2, [r7, #8]
   17c88:	4640      	mov	r0, r8
   17c8a:	1c49      	adds	r1, r1, #1
   17c8c:	4790      	blx	r2
   17c8e:	06e8      	lsls	r0, r5, #27
   17c90:	d501      	bpl.n	17c96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
   17c92:	68f8      	ldr	r0, [r7, #12]
   17c94:	4780      	blx	r0
   17c96:	7a60      	ldrb	r0, [r4, #9]
   17c98:	2802      	cmp	r0, #2
   17c9a:	d11c      	bne.n	17cd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
   17c9c:	7b20      	ldrb	r0, [r4, #12]
   17c9e:	2800      	cmp	r0, #0
   17ca0:	d019      	beq.n	17cd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
   17ca2:	2802      	cmp	r0, #2
   17ca4:	d004      	beq.n	17cb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
   17ca6:	2801      	cmp	r0, #1
   17ca8:	d006      	beq.n	17cb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
   17caa:	f640 21e1 	movw	r1, #2785	; 0xae1
   17cae:	e009      	b.n	17cc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
   17cb0:	6921      	ldr	r1, [r4, #16]
   17cb2:	69e0      	ldr	r0, [r4, #28]
   17cb4:	4408      	add	r0, r1
   17cb6:	e008      	b.n	17cca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
   17cb8:	69e1      	ldr	r1, [r4, #28]
   17cba:	6920      	ldr	r0, [r4, #16]
   17cbc:	4288      	cmp	r0, r1
   17cbe:	d804      	bhi.n	17cca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
   17cc0:	f640 21e2 	movw	r1, #2786	; 0xae2
   17cc4:	203e      	movs	r0, #62	; 0x3e
   17cc6:	f7f8 fdff 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17cca:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
   17cce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17cd2:	f000 ba17 	b.w	18104 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
   17cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17cda:	0000      	.short	0x0000
   17cdc:	40008000 	.word	0x40008000
   17ce0:	4000b000 	.word	0x4000b000
   17ce4:	200013bc 	.word	0x200013bc
   17ce8:	4001f508 	.word	0x4001f508
   17cec:	40001000 	.word	0x40001000
   17cf0:	40008004 	.word	0x40008004
   17cf4:	40001450 	.word	0x40001450

00017cf8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
   17cf8:	b570      	push	{r4, r5, r6, lr}
   17cfa:	4b15      	ldr	r3, [pc, #84]	; (17d50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
   17cfc:	888c      	ldrh	r4, [r1, #4]
   17cfe:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   17d02:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
   17d06:	780c      	ldrb	r4, [r1, #0]
   17d08:	f8d1 1001 	ldr.w	r1, [r1, #1]
   17d0c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   17d10:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
   17d14:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
   17d18:	2101      	movs	r1, #1
   17d1a:	4081      	lsls	r1, r0
   17d1c:	430c      	orrs	r4, r1
   17d1e:	b2e4      	uxtb	r4, r4
   17d20:	b132      	cbz	r2, 17d30 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
   17d22:	2a01      	cmp	r2, #1
   17d24:	d00a      	beq.n	17d3c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
   17d26:	f240 41ac 	movw	r1, #1196	; 0x4ac
   17d2a:	203e      	movs	r0, #62	; 0x3e
   17d2c:	f7f8 fdcc 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17d30:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
   17d34:	f3c0 2007 	ubfx	r0, r0, #8, #8
   17d38:	4388      	bics	r0, r1
   17d3a:	e004      	b.n	17d46 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
   17d3c:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
   17d40:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
   17d44:	b2c0      	uxtb	r0, r0
   17d46:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   17d4a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   17d4e:	bd70      	pop	{r4, r5, r6, pc}
   17d50:	40001000 	.word	0x40001000

00017d54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
   17d54:	4901      	ldr	r1, [pc, #4]	; (17d5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
   17d56:	2001      	movs	r0, #1
   17d58:	7008      	strb	r0, [r1, #0]
   17d5a:	4770      	bx	lr
   17d5c:	20000274 	.word	0x20000274
   17d60:	b510      	push	{r4, lr}
   17d62:	4604      	mov	r4, r0
   17d64:	f000 fde9 	bl	1893a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   17d68:	2800      	cmp	r0, #0
   17d6a:	d00e      	beq.n	17d8a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
   17d6c:	4a09      	ldr	r2, [pc, #36]	; (17d94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
   17d6e:	6811      	ldr	r1, [r2, #0]
   17d70:	0650      	lsls	r0, r2, #25
   17d72:	2c02      	cmp	r4, #2
   17d74:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
   17d78:	d008      	beq.n	17d8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
   17d7a:	f3c0 2006 	ubfx	r0, r0, #8, #7
   17d7e:	bf00      	nop
   17d80:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
   17d84:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   17d88:	6010      	str	r0, [r2, #0]
   17d8a:	bd10      	pop	{r4, pc}
   17d8c:	f3c0 6006 	ubfx	r0, r0, #24, #7
   17d90:	e7f6      	b.n	17d80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
   17d92:	0000      	.short	0x0000
   17d94:	40001588 	.word	0x40001588
   17d98:	4815      	ldr	r0, [pc, #84]	; (17df0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
   17d9a:	7d41      	ldrb	r1, [r0, #21]
   17d9c:	2925      	cmp	r1, #37	; 0x25
   17d9e:	d00a      	beq.n	17db6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
   17da0:	2926      	cmp	r1, #38	; 0x26
   17da2:	d00b      	beq.n	17dbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
   17da4:	2927      	cmp	r1, #39	; 0x27
   17da6:	d00c      	beq.n	17dc2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
   17da8:	7d40      	ldrb	r0, [r0, #21]
   17daa:	0040      	lsls	r0, r0, #1
   17dac:	290a      	cmp	r1, #10
   17dae:	d80b      	bhi.n	17dc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
   17db0:	f600 1064 	addw	r0, r0, #2404	; 0x964
   17db4:	e00a      	b.n	17dcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
   17db6:	f640 1062 	movw	r0, #2402	; 0x962
   17dba:	e00f      	b.n	17ddc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   17dbc:	f640 107a 	movw	r0, #2426	; 0x97a
   17dc0:	e00c      	b.n	17ddc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   17dc2:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
   17dc6:	e009      	b.n	17ddc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   17dc8:	f600 1066 	addw	r0, r0, #2406	; 0x966
   17dcc:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   17dd0:	d204      	bcs.n	17ddc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
   17dd2:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
   17dd6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   17dda:	e001      	b.n	17de0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
   17ddc:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
   17de0:	4a04      	ldr	r2, [pc, #16]	; (17df4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
   17de2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
   17de6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   17dea:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
   17dee:	4770      	bx	lr
   17df0:	200013bc 	.word	0x200013bc
   17df4:	40001000 	.word	0x40001000
   17df8:	4912      	ldr	r1, [pc, #72]	; (17e44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
   17dfa:	b508      	push	{r3, lr}
   17dfc:	f991 2014 	ldrsb.w	r2, [r1, #20]
   17e00:	7d49      	ldrb	r1, [r1, #21]
   17e02:	2801      	cmp	r0, #1
   17e04:	d00a      	beq.n	17e1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
   17e06:	2802      	cmp	r0, #2
   17e08:	d00a      	beq.n	17e20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
   17e0a:	2804      	cmp	r0, #4
   17e0c:	d00a      	beq.n	17e24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
   17e0e:	2808      	cmp	r0, #8
   17e10:	d00a      	beq.n	17e28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
   17e12:	f240 31ed 	movw	r1, #1005	; 0x3ed
   17e16:	2006      	movs	r0, #6
   17e18:	f7f8 fd56 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17e1c:	2000      	movs	r0, #0
   17e1e:	e004      	b.n	17e2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   17e20:	2001      	movs	r0, #1
   17e22:	e002      	b.n	17e2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   17e24:	2003      	movs	r0, #3
   17e26:	e000      	b.n	17e2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
   17e28:	2002      	movs	r0, #2
   17e2a:	466b      	mov	r3, sp
   17e2c:	f7f5 f820 	bl	ce70 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
   17e30:	b118      	cbz	r0, 17e3a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
   17e32:	f240 41de 	movw	r1, #1246	; 0x4de
   17e36:	203e      	movs	r0, #62	; 0x3e
   17e38:	e7ee      	b.n	17e18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
   17e3a:	f99d 0000 	ldrsb.w	r0, [sp]
   17e3e:	f000 f9eb 	bl	18218 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   17e42:	bd08      	pop	{r3, pc}
   17e44:	200013bc 	.word	0x200013bc
   17e48:	4803      	ldr	r0, [pc, #12]	; (17e58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
   17e4a:	7a01      	ldrb	r1, [r0, #8]
   17e4c:	2901      	cmp	r1, #1
   17e4e:	d102      	bne.n	17e56 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
   17e50:	7a80      	ldrb	r0, [r0, #10]
   17e52:	f7ff bfd1 	b.w	17df8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
   17e56:	4770      	bx	lr
   17e58:	200013bc 	.word	0x200013bc
   17e5c:	4805      	ldr	r0, [pc, #20]	; (17e74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
   17e5e:	7a40      	ldrb	r0, [r0, #9]
   17e60:	2801      	cmp	r0, #1
   17e62:	d003      	beq.n	17e6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
   17e64:	2802      	cmp	r0, #2
   17e66:	d103      	bne.n	17e70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
   17e68:	f004 bbee 	b.w	1c648 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
   17e6c:	f004 bbf8 	b.w	1c660 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
   17e70:	4770      	bx	lr
   17e72:	0000      	.short	0x0000
   17e74:	200013bc 	.word	0x200013bc
   17e78:	4807      	ldr	r0, [pc, #28]	; (17e98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
   17e7a:	2100      	movs	r1, #0
   17e7c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   17e80:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
   17e84:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
   17e88:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   17e8c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   17e90:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
   17e94:	4770      	bx	lr
   17e96:	0000      	.short	0x0000
   17e98:	40001000 	.word	0x40001000
   17e9c:	4818      	ldr	r0, [pc, #96]	; (17f00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
   17e9e:	b510      	push	{r4, lr}
   17ea0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
   17ea4:	07c1      	lsls	r1, r0, #31
   17ea6:	d029      	beq.n	17efc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   17ea8:	0781      	lsls	r1, r0, #30
   17eaa:	d514      	bpl.n	17ed6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
   17eac:	4815      	ldr	r0, [pc, #84]	; (17f04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
   17eae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   17eb2:	f041 0101 	orr.w	r1, r1, #1
   17eb6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   17eba:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   17ebe:	b2c0      	uxtb	r0, r0
   17ec0:	280b      	cmp	r0, #11
   17ec2:	d005      	beq.n	17ed0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   17ec4:	280a      	cmp	r0, #10
   17ec6:	d003      	beq.n	17ed0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   17ec8:	2803      	cmp	r0, #3
   17eca:	d001      	beq.n	17ed0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
   17ecc:	2802      	cmp	r0, #2
   17ece:	d115      	bne.n	17efc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   17ed0:	f240 510f 	movw	r1, #1295	; 0x50f
   17ed4:	e00f      	b.n	17ef6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
   17ed6:	0740      	lsls	r0, r0, #29
   17ed8:	d510      	bpl.n	17efc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   17eda:	480a      	ldr	r0, [pc, #40]	; (17f04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
   17edc:	490a      	ldr	r1, [pc, #40]	; (17f08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
   17ede:	3008      	adds	r0, #8
   17ee0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   17ee4:	f44f 71a0 	mov.w	r1, #320	; 0x140
   17ee8:	4808      	ldr	r0, [pc, #32]	; (17f0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
   17eea:	f004 fc4c 	bl	1c786 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
   17eee:	2800      	cmp	r0, #0
   17ef0:	d004      	beq.n	17efc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
   17ef2:	f240 5117 	movw	r1, #1303	; 0x517
   17ef6:	203e      	movs	r0, #62	; 0x3e
   17ef8:	f7f8 fce6 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17efc:	bd10      	pop	{r4, pc}
   17efe:	0000      	.short	0x0000
   17f00:	200013bc 	.word	0x200013bc
   17f04:	40001000 	.word	0x40001000
   17f08:	4001f098 	.word	0x4001f098
   17f0c:	40008000 	.word	0x40008000
   17f10:	4808      	ldr	r0, [pc, #32]	; (17f34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
   17f12:	4601      	mov	r1, r0
   17f14:	79c2      	ldrb	r2, [r0, #7]
   17f16:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
   17f1a:	b112      	cbz	r2, 17f22 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
   17f1c:	2a01      	cmp	r2, #1
   17f1e:	d003      	beq.n	17f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
   17f20:	e006      	b.n	17f30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
   17f22:	f041 0102 	orr.w	r1, r1, #2
   17f26:	e001      	b.n	17f2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
   17f28:	f041 0104 	orr.w	r1, r1, #4
   17f2c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
   17f30:	f7ff bfb4 	b.w	17e9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   17f34:	200013bc 	.word	0x200013bc
   17f38:	b510      	push	{r4, lr}
   17f3a:	f000 fcfe 	bl	1893a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   17f3e:	2800      	cmp	r0, #0
   17f40:	d108      	bne.n	17f54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
   17f42:	f000 fcea 	bl	1891a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   17f46:	2800      	cmp	r0, #0
   17f48:	d104      	bne.n	17f54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
   17f4a:	4803      	ldr	r0, [pc, #12]	; (17f58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
   17f4c:	6801      	ldr	r1, [r0, #0]
   17f4e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
   17f52:	6001      	str	r1, [r0, #0]
   17f54:	bd10      	pop	{r4, pc}
   17f56:	0000      	.short	0x0000
   17f58:	40001568 	.word	0x40001568
   17f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f60:	4d35      	ldr	r5, [pc, #212]	; (18038 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
   17f62:	2400      	movs	r4, #0
   17f64:	7b28      	ldrb	r0, [r5, #12]
   17f66:	b138      	cbz	r0, 17f78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
   17f68:	f44f 71a2 	mov.w	r1, #324	; 0x144
   17f6c:	4833      	ldr	r0, [pc, #204]	; (1803c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
   17f6e:	f004 fc0a 	bl	1c786 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
   17f72:	b108      	cbz	r0, 17f78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
   17f74:	2601      	movs	r6, #1
   17f76:	e000      	b.n	17f7a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
   17f78:	2600      	movs	r6, #0
   17f7a:	7a68      	ldrb	r0, [r5, #9]
   17f7c:	4f30      	ldr	r7, [pc, #192]	; (18040 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
   17f7e:	f44f 7186 	mov.w	r1, #268	; 0x10c
   17f82:	2801      	cmp	r0, #1
   17f84:	d002      	beq.n	17f8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
   17f86:	2802      	cmp	r0, #2
   17f88:	d008      	beq.n	17f9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
   17f8a:	e018      	b.n	17fbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   17f8c:	4638      	mov	r0, r7
   17f8e:	f004 fbf5 	bl	1c77c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   17f92:	b108      	cbz	r0, 17f98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
   17f94:	2408      	movs	r4, #8
   17f96:	e012      	b.n	17fbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   17f98:	2400      	movs	r4, #0
   17f9a:	e010      	b.n	17fbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
   17f9c:	4638      	mov	r0, r7
   17f9e:	f004 fbed 	bl	1c77c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   17fa2:	b100      	cbz	r0, 17fa6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
   17fa4:	2002      	movs	r0, #2
   17fa6:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
   17faa:	43c9      	mvns	r1, r1
   17fac:	f341 0100 	sbfx	r1, r1, #0, #1
   17fb0:	1c49      	adds	r1, r1, #1
   17fb2:	d001      	beq.n	17fb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
   17fb4:	2400      	movs	r4, #0
   17fb6:	e000      	b.n	17fba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
   17fb8:	2404      	movs	r4, #4
   17fba:	4304      	orrs	r4, r0
   17fbc:	4334      	orrs	r4, r6
   17fbe:	f014 0f0b 	tst.w	r4, #11
   17fc2:	d107      	bne.n	17fd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
   17fc4:	f44f 7188 	mov.w	r1, #272	; 0x110
   17fc8:	4638      	mov	r0, r7
   17fca:	f004 fbd7 	bl	1c77c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   17fce:	b100      	cbz	r0, 17fd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
   17fd0:	2010      	movs	r0, #16
   17fd2:	4304      	orrs	r4, r0
   17fd4:	481b      	ldr	r0, [pc, #108]	; (18044 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
   17fd6:	7800      	ldrb	r0, [r0, #0]
   17fd8:	b1f8      	cbz	r0, 1801a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
   17fda:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
   17fde:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   17fe2:	d007      	beq.n	17ff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
   17fe4:	f44f 718a 	mov.w	r1, #276	; 0x114
   17fe8:	4638      	mov	r0, r7
   17fea:	f004 fbc7 	bl	1c77c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   17fee:	b108      	cbz	r0, 17ff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
   17ff0:	2001      	movs	r0, #1
   17ff2:	e000      	b.n	17ff6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
   17ff4:	2000      	movs	r0, #0
   17ff6:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
   17ffa:	b13e      	cbz	r6, 1800c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
   17ffc:	f44f 718c 	mov.w	r1, #280	; 0x118
   18000:	4638      	mov	r0, r7
   18002:	f004 fbbb 	bl	1c77c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
   18006:	b108      	cbz	r0, 1800c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
   18008:	2001      	movs	r0, #1
   1800a:	e000      	b.n	1800e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
   1800c:	2000      	movs	r0, #0
   1800e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
   18012:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
   18016:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
   1801a:	f7ff ff2d 	bl	17e78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
   1801e:	06e0      	lsls	r0, r4, #27
   18020:	d506      	bpl.n	18030 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   18022:	0720      	lsls	r0, r4, #28
   18024:	d404      	bmi.n	18030 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   18026:	7a68      	ldrb	r0, [r5, #9]
   18028:	2801      	cmp	r0, #1
   1802a:	d101      	bne.n	18030 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
   1802c:	f044 0420 	orr.w	r4, r4, #32
   18030:	4620      	mov	r0, r4
   18032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18036:	0000      	.short	0x0000
   18038:	200013bc 	.word	0x200013bc
   1803c:	40008000 	.word	0x40008000
   18040:	40001000 	.word	0x40001000
   18044:	20000274 	.word	0x20000274
   18048:	4809      	ldr	r0, [pc, #36]	; (18070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
   1804a:	b510      	push	{r4, lr}
   1804c:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   18050:	f000 000f 	and.w	r0, r0, #15
   18054:	2803      	cmp	r0, #3
   18056:	d006      	beq.n	18066 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
   18058:	2804      	cmp	r0, #4
   1805a:	d006      	beq.n	1806a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
   1805c:	f240 11dd 	movw	r1, #477	; 0x1dd
   18060:	203e      	movs	r0, #62	; 0x3e
   18062:	f7f8 fc31 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18066:	2001      	movs	r0, #1
   18068:	bd10      	pop	{r4, pc}
   1806a:	2002      	movs	r0, #2
   1806c:	bd10      	pop	{r4, pc}
   1806e:	0000      	.short	0x0000
   18070:	40001000 	.word	0x40001000
   18074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18078:	4c19      	ldr	r4, [pc, #100]	; (180e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
   1807a:	460d      	mov	r5, r1
   1807c:	7a21      	ldrb	r1, [r4, #8]
   1807e:	b129      	cbz	r1, 1808c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
   18080:	f010 0f11 	tst.w	r0, #17
   18084:	d00b      	beq.n	1809e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
   18086:	f7ff f9d5 	bl	17434 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1808a:	e027      	b.n	180dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
   1808c:	4915      	ldr	r1, [pc, #84]	; (180e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
   1808e:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   18092:	6008      	str	r0, [r1, #0]
   18094:	f000 f862 	bl	1815c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   18098:	2000      	movs	r0, #0
   1809a:	7320      	strb	r0, [r4, #12]
   1809c:	e01e      	b.n	180dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
   1809e:	2901      	cmp	r1, #1
   180a0:	d001      	beq.n	180a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
   180a2:	2601      	movs	r6, #1
   180a4:	e000      	b.n	180a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
   180a6:	2600      	movs	r6, #0
   180a8:	79e0      	ldrb	r0, [r4, #7]
   180aa:	2801      	cmp	r0, #1
   180ac:	d00e      	beq.n	180cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
   180ae:	2700      	movs	r7, #0
   180b0:	f000 f854 	bl	1815c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
   180b4:	2196      	movs	r1, #150	; 0x96
   180b6:	4630      	mov	r0, r6
   180b8:	f000 f866 	bl	18188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
   180bc:	4601      	mov	r1, r0
   180be:	b14f      	cbz	r7, 180d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
   180c0:	353b      	adds	r5, #59	; 0x3b
   180c2:	428d      	cmp	r5, r1
   180c4:	d904      	bls.n	180d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
   180c6:	2000      	movs	r0, #0
   180c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180cc:	2701      	movs	r7, #1
   180ce:	e7ef      	b.n	180b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
   180d0:	2001      	movs	r0, #1
   180d2:	71e0      	strb	r0, [r4, #7]
   180d4:	7aa2      	ldrb	r2, [r4, #10]
   180d6:	4630      	mov	r0, r6
   180d8:	f7ff fc6a 	bl	179b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   180dc:	2001      	movs	r0, #1
   180de:	e7f3      	b.n	180c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
   180e0:	200013bc 	.word	0x200013bc
   180e4:	4001f508 	.word	0x4001f508
   180e8:	4805      	ldr	r0, [pc, #20]	; (18100 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
   180ea:	2100      	movs	r1, #0
   180ec:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
   180f0:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   180f4:	f441 7188 	orr.w	r1, r1, #272	; 0x110
   180f8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   180fc:	4770      	bx	lr
   180fe:	0000      	.short	0x0000
   18100:	40001000 	.word	0x40001000
   18104:	4804      	ldr	r0, [pc, #16]	; (18118 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
   18106:	6a81      	ldr	r1, [r0, #40]	; 0x28
   18108:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   1810c:	6281      	str	r1, [r0, #40]	; 0x28
   1810e:	4903      	ldr	r1, [pc, #12]	; (1811c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
   18110:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   18114:	6008      	str	r0, [r1, #0]
   18116:	4770      	bx	lr
   18118:	200013bc 	.word	0x200013bc
   1811c:	4001f504 	.word	0x4001f504
   18120:	4a07      	ldr	r2, [pc, #28]	; (18140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   18122:	2000      	movs	r0, #0
   18124:	3208      	adds	r2, #8
   18126:	4906      	ldr	r1, [pc, #24]	; (18140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   18128:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   1812c:	1d0a      	adds	r2, r1, #4
   1812e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   18132:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   18136:	4902      	ldr	r1, [pc, #8]	; (18140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
   18138:	310c      	adds	r1, #12
   1813a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   1813e:	4770      	bx	lr
   18140:	40008000 	.word	0x40008000
   18144:	4903      	ldr	r1, [pc, #12]	; (18154 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
   18146:	79c9      	ldrb	r1, [r1, #7]
   18148:	2900      	cmp	r1, #0
   1814a:	d102      	bne.n	18152 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
   1814c:	4902      	ldr	r1, [pc, #8]	; (18158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
   1814e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   18152:	4770      	bx	lr
   18154:	200013bc 	.word	0x200013bc
   18158:	4001f098 	.word	0x4001f098
   1815c:	4802      	ldr	r0, [pc, #8]	; (18168 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
   1815e:	2100      	movs	r1, #0
   18160:	71c1      	strb	r1, [r0, #7]
   18162:	7201      	strb	r1, [r0, #8]
   18164:	7241      	strb	r1, [r0, #9]
   18166:	4770      	bx	lr
   18168:	200013bc 	.word	0x200013bc
   1816c:	4a05      	ldr	r2, [pc, #20]	; (18184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
   1816e:	79d2      	ldrb	r2, [r2, #7]
   18170:	2a01      	cmp	r2, #1
   18172:	d006      	beq.n	18182 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
   18174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18178:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
   1817c:	fbb1 f1f2 	udiv	r1, r1, r2
   18180:	1a40      	subs	r0, r0, r1
   18182:	4770      	bx	lr
   18184:	200013bc 	.word	0x200013bc
   18188:	b570      	push	{r4, r5, r6, lr}
   1818a:	4c13      	ldr	r4, [pc, #76]	; (181d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
   1818c:	4603      	mov	r3, r0
   1818e:	460d      	mov	r5, r1
   18190:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   18194:	2000      	movs	r0, #0
   18196:	b15a      	cbz	r2, 181b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
   18198:	4621      	mov	r1, r4
   1819a:	f891 1020 	ldrb.w	r1, [r1, #32]
   1819e:	b163      	cbz	r3, 181ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
   181a0:	2b01      	cmp	r3, #1
   181a2:	d111      	bne.n	181c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
   181a4:	2a01      	cmp	r2, #1
   181a6:	4628      	mov	r0, r5
   181a8:	d012      	beq.n	181d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
   181aa:	f004 fb31 	bl	1c810 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   181ae:	e009      	b.n	181c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   181b0:	f240 7152 	movw	r1, #1874	; 0x752
   181b4:	203e      	movs	r0, #62	; 0x3e
   181b6:	f7f8 fb87 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   181ba:	2a01      	cmp	r2, #1
   181bc:	4628      	mov	r0, r5
   181be:	d004      	beq.n	181ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
   181c0:	f004 fb34 	bl	1c82c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   181c4:	69e1      	ldr	r1, [r4, #28]
   181c6:	4408      	add	r0, r1
   181c8:	bd70      	pop	{r4, r5, r6, pc}
   181ca:	f004 fb49 	bl	1c860 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   181ce:	e7f9      	b.n	181c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   181d0:	f004 fb37 	bl	1c842 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   181d4:	e7f6      	b.n	181c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
   181d6:	0000      	.short	0x0000
   181d8:	200013bc 	.word	0x200013bc
   181dc:	b510      	push	{r4, lr}
   181de:	2200      	movs	r2, #0
   181e0:	2901      	cmp	r1, #1
   181e2:	d008      	beq.n	181f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
   181e4:	2902      	cmp	r1, #2
   181e6:	d004      	beq.n	181f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
   181e8:	f240 2163 	movw	r1, #611	; 0x263
   181ec:	203e      	movs	r0, #62	; 0x3e
   181ee:	f7f8 fb6b 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   181f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   181f6:	4905      	ldr	r1, [pc, #20]	; (1820c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
   181f8:	430a      	orrs	r2, r1
   181fa:	4905      	ldr	r1, [pc, #20]	; (18210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
   181fc:	600a      	str	r2, [r1, #0]
   181fe:	4905      	ldr	r1, [pc, #20]	; (18214 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
   18200:	4308      	orrs	r0, r1
   18202:	4903      	ldr	r1, [pc, #12]	; (18210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
   18204:	1d09      	adds	r1, r1, #4
   18206:	6008      	str	r0, [r1, #0]
   18208:	bd10      	pop	{r4, pc}
   1820a:	0000      	.short	0x0000
   1820c:	00100108 	.word	0x00100108
   18210:	40001514 	.word	0x40001514
   18214:	02030000 	.word	0x02030000

00018218 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
   18218:	4901      	ldr	r1, [pc, #4]	; (18220 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
   1821a:	b2c0      	uxtb	r0, r0
   1821c:	6008      	str	r0, [r1, #0]
   1821e:	4770      	bx	lr
   18220:	4000150c 	.word	0x4000150c

00018224 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
   18224:	b510      	push	{r4, lr}
   18226:	4907      	ldr	r1, [pc, #28]	; (18244 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
   18228:	2801      	cmp	r0, #1
   1822a:	d005      	beq.n	18238 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
   1822c:	2802      	cmp	r0, #2
   1822e:	d005      	beq.n	1823c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
   18230:	218b      	movs	r1, #139	; 0x8b
   18232:	203f      	movs	r0, #63	; 0x3f
   18234:	f7f8 fb48 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18238:	2003      	movs	r0, #3
   1823a:	e000      	b.n	1823e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
   1823c:	2004      	movs	r0, #4
   1823e:	6008      	str	r0, [r1, #0]
   18240:	bd10      	pop	{r4, pc}
   18242:	0000      	.short	0x0000
   18244:	40001510 	.word	0x40001510

00018248 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
   18248:	4770      	bx	lr
   1824a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1824e:	000d      	movs	r5, r1
   18250:	4604      	mov	r4, r0
   18252:	f04f 0602 	mov.w	r6, #2
   18256:	f04f 0701 	mov.w	r7, #1
   1825a:	d008      	beq.n	1826e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
   1825c:	7828      	ldrb	r0, [r5, #0]
   1825e:	b1d0      	cbz	r0, 18296 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   18260:	2801      	cmp	r0, #1
   18262:	d007      	beq.n	18274 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
   18264:	2802      	cmp	r0, #2
   18266:	d014      	beq.n	18292 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18268:	2803      	cmp	r0, #3
   1826a:	d13b      	bne.n	182e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
   1826c:	e016      	b.n	1829c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
   1826e:	f880 7020 	strb.w	r7, [r0, #32]
   18272:	e00e      	b.n	18292 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   18274:	6868      	ldr	r0, [r5, #4]
   18276:	28c8      	cmp	r0, #200	; 0xc8
   18278:	d303      	bcc.n	18282 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
   1827a:	2104      	movs	r1, #4
   1827c:	f7f5 fe22 	bl	dec4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   18280:	b108      	cbz	r0, 18286 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
   18282:	2600      	movs	r6, #0
   18284:	e007      	b.n	18296 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   18286:	4620      	mov	r0, r4
   18288:	6869      	ldr	r1, [r5, #4]
   1828a:	f000 f92a 	bl	184e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
   1828e:	2601      	movs	r6, #1
   18290:	e001      	b.n	18296 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
   18292:	f7f4 fe35 	bl	cf00 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
   18296:	4630      	mov	r0, r6
   18298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1829c:	7820      	ldrb	r0, [r4, #0]
   1829e:	2800      	cmp	r0, #0
   182a0:	d1f7      	bne.n	18292 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   182a2:	6868      	ldr	r0, [r5, #4]
   182a4:	f7f4 fdfe 	bl	cea4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
   182a8:	b1e0      	cbz	r0, 182e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
   182aa:	6869      	ldr	r1, [r5, #4]
   182ac:	7808      	ldrb	r0, [r1, #0]
   182ae:	b128      	cbz	r0, 182bc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
   182b0:	78a0      	ldrb	r0, [r4, #2]
   182b2:	2805      	cmp	r0, #5
   182b4:	d007      	beq.n	182c6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
   182b6:	f240 1179 	movw	r1, #377	; 0x179
   182ba:	e010      	b.n	182de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
   182bc:	4620      	mov	r0, r4
   182be:	f000 f918 	bl	184f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
   182c2:	7067      	strb	r7, [r4, #1]
   182c4:	e7e5      	b.n	18292 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   182c6:	4620      	mov	r0, r4
   182c8:	f000 f92b 	bl	18522 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
   182cc:	78e0      	ldrb	r0, [r4, #3]
   182ce:	f104 010c 	add.w	r1, r4, #12
   182d2:	f000 f80a 	bl	182ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   182d6:	2800      	cmp	r0, #0
   182d8:	d1db      	bne.n	18292 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   182da:	f240 117b 	movw	r1, #379	; 0x17b
   182de:	206a      	movs	r0, #106	; 0x6a
   182e0:	f7f8 f846 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   182e4:	f884 7020 	strb.w	r7, [r4, #32]
   182e8:	e7d3      	b.n	18292 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
   182ea:	f7f6 b837 	b.w	e35c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   182ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182f2:	460d      	mov	r5, r1
   182f4:	0004      	movs	r4, r0
   182f6:	d00b      	beq.n	18310 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
   182f8:	7926      	ldrb	r6, [r4, #4]
   182fa:	2700      	movs	r7, #0
   182fc:	2002      	movs	r0, #2
   182fe:	2d09      	cmp	r5, #9
   18300:	d27b      	bcs.n	183fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
   18302:	e8df f005 	tbb	[pc, r5]
   18306:	1008      	.short	0x1008
   18308:	645b2e2e 	.word	0x645b2e2e
   1830c:	0086977c 	.word	0x0086977c
   18310:	f240 1193 	movw	r1, #403	; 0x193
   18314:	e0e2      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18316:	78a0      	ldrb	r0, [r4, #2]
   18318:	2804      	cmp	r0, #4
   1831a:	d06f      	beq.n	183fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
   1831c:	2803      	cmp	r0, #3
   1831e:	d0fc      	beq.n	1831a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
   18320:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   18324:	e0da      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18326:	78a0      	ldrb	r0, [r4, #2]
   18328:	2804      	cmp	r0, #4
   1832a:	d004      	beq.n	18336 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
   1832c:	2803      	cmp	r0, #3
   1832e:	d002      	beq.n	18336 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
   18330:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
   18334:	e0d2      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18336:	2005      	movs	r0, #5
   18338:	70a0      	strb	r0, [r4, #2]
   1833a:	f884 7020 	strb.w	r7, [r4, #32]
   1833e:	7820      	ldrb	r0, [r4, #0]
   18340:	bb80      	cbnz	r0, 183a4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
   18342:	2100      	movs	r1, #0
   18344:	4620      	mov	r0, r4
   18346:	f000 f8cc 	bl	184e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
   1834a:	7b20      	ldrb	r0, [r4, #12]
   1834c:	2801      	cmp	r0, #1
   1834e:	d004      	beq.n	1835a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
   18350:	69a0      	ldr	r0, [r4, #24]
   18352:	61e0      	str	r0, [r4, #28]
   18354:	2100      	movs	r1, #0
   18356:	68a2      	ldr	r2, [r4, #8]
   18358:	e041      	b.n	183de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   1835a:	78e0      	ldrb	r0, [r4, #3]
   1835c:	f7f5 feda 	bl	e114 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
   18360:	e7f7      	b.n	18352 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
   18362:	78a1      	ldrb	r1, [r4, #2]
   18364:	2904      	cmp	r1, #4
   18366:	d004      	beq.n	18372 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
   18368:	2903      	cmp	r1, #3
   1836a:	d002      	beq.n	18372 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
   1836c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   18370:	e0b4      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18372:	7822      	ldrb	r2, [r4, #0]
   18374:	b122      	cbz	r2, 18380 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
   18376:	4621      	mov	r1, r4
   18378:	4630      	mov	r0, r6
   1837a:	f000 f8ee 	bl	1855a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   1837e:	e0a4      	b.n	184ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   18380:	2904      	cmp	r1, #4
   18382:	d000      	beq.n	18386 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
   18384:	2001      	movs	r0, #1
   18386:	70a0      	strb	r0, [r4, #2]
   18388:	68a2      	ldr	r2, [r4, #8]
   1838a:	2d02      	cmp	r5, #2
   1838c:	d00b      	beq.n	183a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
   1838e:	2106      	movs	r1, #6
   18390:	4630      	mov	r0, r6
   18392:	4790      	blx	r2
   18394:	2800      	cmp	r0, #0
   18396:	d06b      	beq.n	18470 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
   18398:	7800      	ldrb	r0, [r0, #0]
   1839a:	2800      	cmp	r0, #0
   1839c:	d068      	beq.n	18470 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
   1839e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
   183a2:	e09b      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   183a4:	e031      	b.n	1840a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
   183a6:	2105      	movs	r1, #5
   183a8:	4630      	mov	r0, r6
   183aa:	4790      	blx	r2
   183ac:	2800      	cmp	r0, #0
   183ae:	d071      	beq.n	18494 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   183b0:	7800      	ldrb	r0, [r0, #0]
   183b2:	2800      	cmp	r0, #0
   183b4:	d06e      	beq.n	18494 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   183b6:	f240 11d5 	movw	r1, #469	; 0x1d5
   183ba:	e08f      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   183bc:	78a0      	ldrb	r0, [r4, #2]
   183be:	2805      	cmp	r0, #5
   183c0:	d002      	beq.n	183c8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
   183c2:	f240 11e1 	movw	r1, #481	; 0x1e1
   183c6:	e089      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   183c8:	2102      	movs	r1, #2
   183ca:	68a2      	ldr	r2, [r4, #8]
   183cc:	e007      	b.n	183de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   183ce:	78a0      	ldrb	r0, [r4, #2]
   183d0:	2805      	cmp	r0, #5
   183d2:	d002      	beq.n	183da <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
   183d4:	f240 11e7 	movw	r1, #487	; 0x1e7
   183d8:	e080      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   183da:	68a2      	ldr	r2, [r4, #8]
   183dc:	2101      	movs	r1, #1
   183de:	4630      	mov	r0, r6
   183e0:	4790      	blx	r2
   183e2:	4601      	mov	r1, r0
   183e4:	4620      	mov	r0, r4
   183e6:	f7ff ff30 	bl	1824a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
   183ea:	2802      	cmp	r0, #2
   183ec:	d06d      	beq.n	184ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   183ee:	b3f0      	cbz	r0, 1846e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
   183f0:	2801      	cmp	r0, #1
   183f2:	d064      	beq.n	184be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
   183f4:	f240 2127 	movw	r1, #551	; 0x227
   183f8:	e070      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   183fa:	e05d      	b.n	184b8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
   183fc:	e067      	b.n	184ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
   183fe:	78a0      	ldrb	r0, [r4, #2]
   18400:	2805      	cmp	r0, #5
   18402:	d002      	beq.n	1840a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
   18404:	f240 11ed 	movw	r1, #493	; 0x1ed
   18408:	e068      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1840a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1840e:	f7f4 bd77 	b.w	cf00 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
   18412:	78a0      	ldrb	r0, [r4, #2]
   18414:	2805      	cmp	r0, #5
   18416:	d002      	beq.n	1841e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
   18418:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1841c:	e05e      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1841e:	68a2      	ldr	r2, [r4, #8]
   18420:	210a      	movs	r1, #10
   18422:	4630      	mov	r0, r6
   18424:	4790      	blx	r2
   18426:	4601      	mov	r1, r0
   18428:	4620      	mov	r0, r4
   1842a:	f7ff ff0e 	bl	1824a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
   1842e:	f240 11f5 	movw	r1, #501	; 0x1f5
   18432:	e053      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18434:	78a1      	ldrb	r1, [r4, #2]
   18436:	2905      	cmp	r1, #5
   18438:	d006      	beq.n	18448 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
   1843a:	7862      	ldrb	r2, [r4, #1]
   1843c:	b10a      	cbz	r2, 18442 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
   1843e:	2903      	cmp	r1, #3
   18440:	d002      	beq.n	18448 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
   18442:	f240 11f9 	movw	r1, #505	; 0x1f9
   18446:	e049      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18448:	7821      	ldrb	r1, [r4, #0]
   1844a:	b129      	cbz	r1, 18458 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
   1844c:	4621      	mov	r1, r4
   1844e:	4630      	mov	r0, r6
   18450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18454:	f000 b881 	b.w	1855a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   18458:	f894 1020 	ldrb.w	r1, [r4, #32]
   1845c:	b189      	cbz	r1, 18482 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
   1845e:	f884 7020 	strb.w	r7, [r4, #32]
   18462:	70a0      	strb	r0, [r4, #2]
   18464:	68a2      	ldr	r2, [r4, #8]
   18466:	2108      	movs	r1, #8
   18468:	4630      	mov	r0, r6
   1846a:	4790      	blx	r2
   1846c:	e001      	b.n	18472 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
   1846e:	e029      	b.n	184c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
   18470:	e02b      	b.n	184ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
   18472:	2800      	cmp	r0, #0
   18474:	d00e      	beq.n	18494 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   18476:	7800      	ldrb	r0, [r0, #0]
   18478:	2800      	cmp	r0, #0
   1847a:	d00b      	beq.n	18494 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   1847c:	f240 2105 	movw	r1, #517	; 0x205
   18480:	e02c      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   18482:	7861      	ldrb	r1, [r4, #1]
   18484:	b159      	cbz	r1, 1849e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
   18486:	78e0      	ldrb	r0, [r4, #3]
   18488:	f104 010c 	add.w	r1, r4, #12
   1848c:	f7ff ff2d 	bl	182ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   18490:	b110      	cbz	r0, 18498 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
   18492:	7067      	strb	r7, [r4, #1]
   18494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18498:	f240 2109 	movw	r1, #521	; 0x209
   1849c:	e01e      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   1849e:	70a0      	strb	r0, [r4, #2]
   184a0:	68a2      	ldr	r2, [r4, #8]
   184a2:	2107      	movs	r1, #7
   184a4:	4630      	mov	r0, r6
   184a6:	4790      	blx	r2
   184a8:	2800      	cmp	r0, #0
   184aa:	d0f3      	beq.n	18494 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   184ac:	7800      	ldrb	r0, [r0, #0]
   184ae:	2800      	cmp	r0, #0
   184b0:	d0f0      	beq.n	18494 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   184b2:	f240 2111 	movw	r1, #529	; 0x211
   184b6:	e011      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   184b8:	f240 2116 	movw	r1, #534	; 0x216
   184bc:	e00e      	b.n	184dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
   184be:	2104      	movs	r1, #4
   184c0:	68a2      	ldr	r2, [r4, #8]
   184c2:	e78c      	b.n	183de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   184c4:	2103      	movs	r1, #3
   184c6:	68a2      	ldr	r2, [r4, #8]
   184c8:	e789      	b.n	183de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
   184ca:	2d00      	cmp	r5, #0
   184cc:	d1e2      	bne.n	18494 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   184ce:	f000 f8f2 	bl	186b6 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
   184d2:	6800      	ldr	r0, [r0, #0]
   184d4:	2800      	cmp	r0, #0
   184d6:	d0dd      	beq.n	18494 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
   184d8:	f240 2131 	movw	r1, #561	; 0x231
   184dc:	206a      	movs	r0, #106	; 0x6a
   184de:	f7f7 ff47 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   184e2:	4602      	mov	r2, r0
   184e4:	7b03      	ldrb	r3, [r0, #12]
   184e6:	6900      	ldr	r0, [r0, #16]
   184e8:	4408      	add	r0, r1
   184ea:	6110      	str	r0, [r2, #16]
   184ec:	3859      	subs	r0, #89	; 0x59
   184ee:	f7f6 bdc9 	b.w	f084 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   184f2:	2201      	movs	r2, #1
   184f4:	7302      	strb	r2, [r0, #12]
   184f6:	2200      	movs	r2, #0
   184f8:	75c2      	strb	r2, [r0, #23]
   184fa:	790a      	ldrb	r2, [r1, #4]
   184fc:	b16a      	cbz	r2, 1851a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
   184fe:	2200      	movs	r2, #0
   18500:	8282      	strh	r2, [r0, #20]
   18502:	794a      	ldrb	r2, [r1, #5]
   18504:	b15a      	cbz	r2, 1851e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
   18506:	2204      	movs	r2, #4
   18508:	7582      	strb	r2, [r0, #22]
   1850a:	688a      	ldr	r2, [r1, #8]
   1850c:	326a      	adds	r2, #106	; 0x6a
   1850e:	6102      	str	r2, [r0, #16]
   18510:	68c9      	ldr	r1, [r1, #12]
   18512:	6181      	str	r1, [r0, #24]
   18514:	2103      	movs	r1, #3
   18516:	7081      	strb	r1, [r0, #2]
   18518:	4770      	bx	lr
   1851a:	222b      	movs	r2, #43	; 0x2b
   1851c:	e7f0      	b.n	18500 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
   1851e:	2203      	movs	r2, #3
   18520:	e7f2      	b.n	18508 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
   18522:	b510      	push	{r4, lr}
   18524:	4604      	mov	r4, r0
   18526:	2000      	movs	r0, #0
   18528:	7320      	strb	r0, [r4, #12]
   1852a:	75e0      	strb	r0, [r4, #23]
   1852c:	7908      	ldrb	r0, [r1, #4]
   1852e:	b180      	cbz	r0, 18552 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
   18530:	2000      	movs	r0, #0
   18532:	82a0      	strh	r0, [r4, #20]
   18534:	7948      	ldrb	r0, [r1, #5]
   18536:	b170      	cbz	r0, 18556 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
   18538:	2004      	movs	r0, #4
   1853a:	75a0      	strb	r0, [r4, #22]
   1853c:	68c8      	ldr	r0, [r1, #12]
   1853e:	306a      	adds	r0, #106	; 0x6a
   18540:	6120      	str	r0, [r4, #16]
   18542:	6889      	ldr	r1, [r1, #8]
   18544:	69e0      	ldr	r0, [r4, #28]
   18546:	f7f5 fd8f 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1854a:	61a0      	str	r0, [r4, #24]
   1854c:	2004      	movs	r0, #4
   1854e:	70a0      	strb	r0, [r4, #2]
   18550:	bd10      	pop	{r4, pc}
   18552:	202b      	movs	r0, #43	; 0x2b
   18554:	e7ed      	b.n	18532 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
   18556:	2003      	movs	r0, #3
   18558:	e7ef      	b.n	1853a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
   1855a:	b570      	push	{r4, r5, r6, lr}
   1855c:	4605      	mov	r5, r0
   1855e:	460c      	mov	r4, r1
   18560:	78c8      	ldrb	r0, [r1, #3]
   18562:	f7f6 fb57 	bl	ec14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   18566:	b178      	cbz	r0, 18588 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
   18568:	4620      	mov	r0, r4
   1856a:	f000 f810 	bl	1858e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
   1856e:	68a2      	ldr	r2, [r4, #8]
   18570:	2109      	movs	r1, #9
   18572:	4628      	mov	r0, r5
   18574:	4790      	blx	r2
   18576:	2800      	cmp	r0, #0
   18578:	d008      	beq.n	1858c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
   1857a:	7800      	ldrb	r0, [r0, #0]
   1857c:	2800      	cmp	r0, #0
   1857e:	d005      	beq.n	1858c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
   18580:	21db      	movs	r1, #219	; 0xdb
   18582:	206a      	movs	r0, #106	; 0x6a
   18584:	f7f7 fef4 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   18588:	21d7      	movs	r1, #215	; 0xd7
   1858a:	e7fa      	b.n	18582 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
   1858c:	bd70      	pop	{r4, r5, r6, pc}
   1858e:	2100      	movs	r1, #0
   18590:	7081      	strb	r1, [r0, #2]
   18592:	7001      	strb	r1, [r0, #0]
   18594:	7041      	strb	r1, [r0, #1]
   18596:	4770      	bx	lr

00018598 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   18598:	b570      	push	{r4, r5, r6, lr}
   1859a:	f7f4 fd0b 	bl	cfb4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   1859e:	4605      	mov	r5, r0
   185a0:	2400      	movs	r4, #0
   185a2:	e006      	b.n	185b2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   185a4:	4620      	mov	r0, r4
   185a6:	f7f4 fd0b 	bl	cfc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   185aa:	f7ff fff0 	bl	1858e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
   185ae:	1c64      	adds	r4, r4, #1
   185b0:	b2e4      	uxtb	r4, r4
   185b2:	42ac      	cmp	r4, r5
   185b4:	d3f6      	bcc.n	185a4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   185b6:	bd70      	pop	{r4, r5, r6, pc}

000185b8 <mpsl_timeslot_request>:
   185b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185bc:	460d      	mov	r5, r1
   185be:	f7f4 fcff 	bl	cfc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   185c2:	0004      	movs	r4, r0
   185c4:	d007      	beq.n	185d6 <mpsl_timeslot_request+0x1e>
   185c6:	78a0      	ldrb	r0, [r4, #2]
   185c8:	f06f 0622 	mvn.w	r6, #34	; 0x22
   185cc:	2801      	cmp	r0, #1
   185ce:	d006      	beq.n	185de <mpsl_timeslot_request+0x26>
   185d0:	2802      	cmp	r0, #2
   185d2:	d110      	bne.n	185f6 <mpsl_timeslot_request+0x3e>
   185d4:	e003      	b.n	185de <mpsl_timeslot_request+0x26>
   185d6:	f06f 0001 	mvn.w	r0, #1
   185da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   185de:	f06f 0715 	mvn.w	r7, #21
   185e2:	b155      	cbz	r5, 185fa <mpsl_timeslot_request+0x42>
   185e4:	4628      	mov	r0, r5
   185e6:	f7f4 fc5d 	bl	cea4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
   185ea:	b130      	cbz	r0, 185fa <mpsl_timeslot_request+0x42>
   185ec:	7828      	ldrb	r0, [r5, #0]
   185ee:	b130      	cbz	r0, 185fe <mpsl_timeslot_request+0x46>
   185f0:	78a0      	ldrb	r0, [r4, #2]
   185f2:	2802      	cmp	r0, #2
   185f4:	d008      	beq.n	18608 <mpsl_timeslot_request+0x50>
   185f6:	4630      	mov	r0, r6
   185f8:	e7ef      	b.n	185da <mpsl_timeslot_request+0x22>
   185fa:	4638      	mov	r0, r7
   185fc:	e7ed      	b.n	185da <mpsl_timeslot_request+0x22>
   185fe:	4629      	mov	r1, r5
   18600:	4620      	mov	r0, r4
   18602:	f7ff ff76 	bl	184f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
   18606:	e003      	b.n	18610 <mpsl_timeslot_request+0x58>
   18608:	4629      	mov	r1, r5
   1860a:	4620      	mov	r0, r4
   1860c:	f7ff ff89 	bl	18522 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
   18610:	78e0      	ldrb	r0, [r4, #3]
   18612:	f104 010c 	add.w	r1, r4, #12
   18616:	f7ff fe68 	bl	182ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
   1861a:	b108      	cbz	r0, 18620 <mpsl_timeslot_request+0x68>
   1861c:	2000      	movs	r0, #0
   1861e:	e7dc      	b.n	185da <mpsl_timeslot_request+0x22>
   18620:	f44f 712b 	mov.w	r1, #684	; 0x2ac
   18624:	206a      	movs	r0, #106	; 0x6a
   18626:	f7f7 fea3 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0001862a <mpsl_timeslot_session_close>:
   1862a:	b510      	push	{r4, lr}
   1862c:	4604      	mov	r4, r0
   1862e:	f7f4 fcc7 	bl	cfc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   18632:	0001      	movs	r1, r0
   18634:	d004      	beq.n	18640 <mpsl_timeslot_session_close+0x16>
   18636:	7808      	ldrb	r0, [r1, #0]
   18638:	f06f 0222 	mvn.w	r2, #34	; 0x22
   1863c:	b968      	cbnz	r0, 1865a <mpsl_timeslot_session_close+0x30>
   1863e:	e002      	b.n	18646 <mpsl_timeslot_session_close+0x1c>
   18640:	f06f 0001 	mvn.w	r0, #1
   18644:	bd10      	pop	{r4, pc}
   18646:	7888      	ldrb	r0, [r1, #2]
   18648:	b138      	cbz	r0, 1865a <mpsl_timeslot_session_close+0x30>
   1864a:	2802      	cmp	r0, #2
   1864c:	d007      	beq.n	1865e <mpsl_timeslot_session_close+0x34>
   1864e:	2801      	cmp	r0, #1
   18650:	d005      	beq.n	1865e <mpsl_timeslot_session_close+0x34>
   18652:	2001      	movs	r0, #1
   18654:	7008      	strb	r0, [r1, #0]
   18656:	2000      	movs	r0, #0
   18658:	bd10      	pop	{r4, pc}
   1865a:	4610      	mov	r0, r2
   1865c:	bd10      	pop	{r4, pc}
   1865e:	4620      	mov	r0, r4
   18660:	f7ff ff7b 	bl	1855a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
   18664:	e7f7      	b.n	18656 <mpsl_timeslot_session_close+0x2c>

00018666 <mpsl_timeslot_session_count_set>:
   18666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1866a:	460e      	mov	r6, r1
   1866c:	4607      	mov	r7, r0
   1866e:	f7f4 fca1 	bl	cfb4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   18672:	4605      	mov	r5, r0
   18674:	2400      	movs	r4, #0
   18676:	e00a      	b.n	1868e <mpsl_timeslot_session_count_set+0x28>
   18678:	4620      	mov	r0, r4
   1867a:	f7f4 fca1 	bl	cfc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1867e:	7880      	ldrb	r0, [r0, #2]
   18680:	b118      	cbz	r0, 1868a <mpsl_timeslot_session_count_set+0x24>
   18682:	f04f 30ff 	mov.w	r0, #4294967295
   18686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1868a:	1c64      	adds	r4, r4, #1
   1868c:	b2e4      	uxtb	r4, r4
   1868e:	42ac      	cmp	r4, r5
   18690:	d3f2      	bcc.n	18678 <mpsl_timeslot_session_count_set+0x12>
   18692:	2e08      	cmp	r6, #8
   18694:	d902      	bls.n	1869c <mpsl_timeslot_session_count_set+0x36>
   18696:	f06f 0015 	mvn.w	r0, #21
   1869a:	e7f4      	b.n	18686 <mpsl_timeslot_session_count_set+0x20>
   1869c:	b117      	cbz	r7, 186a4 <mpsl_timeslot_session_count_set+0x3e>
   1869e:	4631      	mov	r1, r6
   186a0:	4638      	mov	r0, r7
   186a2:	e001      	b.n	186a8 <mpsl_timeslot_session_count_set+0x42>
   186a4:	2100      	movs	r1, #0
   186a6:	4608      	mov	r0, r1
   186a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   186ac:	f7f4 bc6e 	b.w	cf8c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

000186b0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
   186b0:	2000      	movs	r0, #0
   186b2:	f7f7 ba83 	b.w	fbbc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

000186b6 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
   186b6:	2000      	movs	r0, #0
   186b8:	f7f7 ba66 	b.w	fb88 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

000186bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
   186bc:	b510      	push	{r4, lr}
   186be:	f7f6 ff39 	bl	f534 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   186c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   186c6:	f000 b800 	b.w	186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

000186ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   186ca:	0a41      	lsrs	r1, r0, #9
   186cc:	f643 5209 	movw	r2, #15625	; 0x3d09
   186d0:	4351      	muls	r1, r2
   186d2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   186d6:	fb10 f002 	smulbb	r0, r0, r2
   186da:	f500 7080 	add.w	r0, r0, #256	; 0x100
   186de:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   186e2:	4770      	bx	lr

000186e4 <MPSL_IRQ_RADIO_Handler>:
   186e4:	f7f5 bd2a 	b.w	e13c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
   186e8:	2800      	cmp	r0, #0
   186ea:	db09      	blt.n	18700 <MPSL_IRQ_RADIO_Handler+0x1c>
   186ec:	f000 021f 	and.w	r2, r0, #31
   186f0:	2101      	movs	r1, #1
   186f2:	4091      	lsls	r1, r2
   186f4:	0940      	lsrs	r0, r0, #5
   186f6:	0080      	lsls	r0, r0, #2
   186f8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   186fc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   18700:	4770      	bx	lr
   18702:	2800      	cmp	r0, #0
   18704:	db0d      	blt.n	18722 <MPSL_IRQ_RADIO_Handler+0x3e>
   18706:	f000 021f 	and.w	r2, r0, #31
   1870a:	2101      	movs	r1, #1
   1870c:	4091      	lsls	r1, r2
   1870e:	0940      	lsrs	r0, r0, #5
   18710:	0080      	lsls	r0, r0, #2
   18712:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   18716:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1871a:	f3bf 8f4f 	dsb	sy
   1871e:	f3bf 8f6f 	isb	sy
   18722:	4770      	bx	lr

00018724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
   18724:	b570      	push	{r4, r5, r6, lr}
   18726:	4602      	mov	r2, r0
   18728:	2000      	movs	r0, #0
   1872a:	2900      	cmp	r1, #0
   1872c:	d01d      	beq.n	1876a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
   1872e:	fba2 0101 	umull	r0, r1, r2, r1
   18732:	0a40      	lsrs	r0, r0, #9
   18734:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
   18738:	0a49      	lsrs	r1, r1, #9
   1873a:	1c40      	adds	r0, r0, #1
   1873c:	f141 0100 	adc.w	r1, r1, #0
   18740:	f240 72a1 	movw	r2, #1953	; 0x7a1
   18744:	1883      	adds	r3, r0, r2
   18746:	f141 0100 	adc.w	r1, r1, #0
   1874a:	1c5b      	adds	r3, r3, #1
   1874c:	f141 0400 	adc.w	r4, r1, #0
   18750:	2100      	movs	r1, #0
   18752:	f1d3 33ff 	rsbs	r3, r3, #4294967295
   18756:	41a1      	sbcs	r1, r4
   18758:	d203      	bcs.n	18762 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
   1875a:	2171      	movs	r1, #113	; 0x71
   1875c:	206d      	movs	r0, #109	; 0x6d
   1875e:	f7f7 fe07 	bl	10370 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   18762:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
   18766:	fbb0 f0f2 	udiv	r0, r0, r2
   1876a:	bd70      	pop	{r4, r5, r6, pc}
   1876c:	5840      	ldr	r0, [r0, r1]
   1876e:	2800      	cmp	r0, #0
   18770:	d000      	beq.n	18774 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
   18772:	2001      	movs	r0, #1
   18774:	4770      	bx	lr
   18776:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   1877a:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   1877e:	f002 0201 	and.w	r2, r2, #1
   18782:	03c0      	lsls	r0, r0, #15
   18784:	d503      	bpl.n	1878e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   18786:	428a      	cmp	r2, r1
   18788:	d101      	bne.n	1878e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   1878a:	2001      	movs	r0, #1
   1878c:	4770      	bx	lr
   1878e:	2000      	movs	r0, #0
   18790:	4770      	bx	lr

00018792 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   18792:	b510      	push	{r4, lr}
   18794:	2101      	movs	r1, #1
   18796:	0788      	lsls	r0, r1, #30
   18798:	f7f7 fd94 	bl	102c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1879c:	2800      	cmp	r0, #0
   1879e:	d000      	beq.n	187a2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   187a0:	2001      	movs	r0, #1
   187a2:	bd10      	pop	{r4, pc}

000187a4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   187a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   187a8:	2101      	movs	r1, #1
   187aa:	6001      	str	r1, [r0, #0]
   187ac:	4770      	bx	lr

000187ae <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   187ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   187b2:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   187b6:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   187ba:	f002 0203 	and.w	r2, r2, #3
   187be:	03c9      	lsls	r1, r1, #15
   187c0:	d503      	bpl.n	187ca <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   187c2:	4282      	cmp	r2, r0
   187c4:	d101      	bne.n	187ca <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   187c6:	2001      	movs	r0, #1
   187c8:	4770      	bx	lr
   187ca:	2000      	movs	r0, #0
   187cc:	4770      	bx	lr

000187ce <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   187ce:	b510      	push	{r4, lr}
   187d0:	2100      	movs	r1, #0
   187d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   187d6:	f7f7 fd75 	bl	102c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   187da:	2800      	cmp	r0, #0
   187dc:	d000      	beq.n	187e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   187de:	2001      	movs	r0, #1
   187e0:	bd10      	pop	{r4, pc}
   187e2:	2800      	cmp	r0, #0
   187e4:	db09      	blt.n	187fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   187e6:	f000 021f 	and.w	r2, r0, #31
   187ea:	2101      	movs	r1, #1
   187ec:	4091      	lsls	r1, r2
   187ee:	0940      	lsrs	r0, r0, #5
   187f0:	0080      	lsls	r0, r0, #2
   187f2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   187f6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   187fa:	4770      	bx	lr
   187fc:	2800      	cmp	r0, #0
   187fe:	db0d      	blt.n	1881c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   18800:	f000 021f 	and.w	r2, r0, #31
   18804:	2101      	movs	r1, #1
   18806:	4091      	lsls	r1, r2
   18808:	0940      	lsrs	r0, r0, #5
   1880a:	0080      	lsls	r0, r0, #2
   1880c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   18810:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   18814:	f3bf 8f4f 	dsb	sy
   18818:	f3bf 8f6f 	isb	sy
   1881c:	4770      	bx	lr
   1881e:	1000      	.short	0x1000
   18820:	00fa0002 	.word	0x00fa0002
   18824:	57230000 	.word	0x57230000
   18828:	31232462 	.word	0x31232462
   1882c:	ee74578f 	.word	0xee74578f
   18830:	c0882fd1 	.word	0xc0882fd1
   18834:	a2f74594 	.word	0xa2f74594
   18838:	36f9      	.short	0x36f9
   1883a:	2800      	cmp	r0, #0
   1883c:	db09      	blt.n	18852 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   1883e:	f000 021f 	and.w	r2, r0, #31
   18842:	2101      	movs	r1, #1
   18844:	4091      	lsls	r1, r2
   18846:	0940      	lsrs	r0, r0, #5
   18848:	0080      	lsls	r0, r0, #2
   1884a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1884e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   18852:	4770      	bx	lr

00018854 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   18854:	f3ef 8110 	mrs	r1, PRIMASK
   18858:	b672      	cpsid	i
   1885a:	7802      	ldrb	r2, [r0, #0]
   1885c:	2a01      	cmp	r2, #1
   1885e:	d001      	beq.n	18864 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   18860:	2201      	movs	r2, #1
   18862:	e000      	b.n	18866 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   18864:	2200      	movs	r2, #0
   18866:	2301      	movs	r3, #1
   18868:	7003      	strb	r3, [r0, #0]
   1886a:	b901      	cbnz	r1, 1886e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   1886c:	b662      	cpsie	i
   1886e:	b10a      	cbz	r2, 18874 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   18870:	2000      	movs	r0, #0
   18872:	4770      	bx	lr
   18874:	f06f 0022 	mvn.w	r0, #34	; 0x22
   18878:	4770      	bx	lr

0001887a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   1887a:	2100      	movs	r1, #0
   1887c:	7001      	strb	r1, [r0, #0]
   1887e:	4608      	mov	r0, r1
   18880:	4770      	bx	lr

00018882 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   18882:	f3ef 8110 	mrs	r1, PRIMASK
   18886:	b672      	cpsid	i
   18888:	2200      	movs	r2, #0
   1888a:	7002      	strb	r2, [r0, #0]
   1888c:	b901      	cbnz	r1, 18890 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   1888e:	b662      	cpsie	i
   18890:	2000      	movs	r0, #0
   18892:	4770      	bx	lr

00018894 <mpsl_low_priority_process>:
   18894:	f7f7 be58 	b.w	10548 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00018898 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   18898:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1889c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   188a0:	280f      	cmp	r0, #15
   188a2:	d001      	beq.n	188a8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   188a4:	2000      	movs	r0, #0
   188a6:	4770      	bx	lr
   188a8:	2001      	movs	r0, #1
   188aa:	4770      	bx	lr

000188ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   188ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   188b0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   188b4:	280a      	cmp	r0, #10
   188b6:	d001      	beq.n	188bc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   188b8:	2000      	movs	r0, #0
   188ba:	4770      	bx	lr
   188bc:	2001      	movs	r0, #1
   188be:	4770      	bx	lr

000188c0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   188c0:	b500      	push	{lr}
   188c2:	f7ff fff3 	bl	188ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   188c6:	b120      	cbz	r0, 188d2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   188c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   188cc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   188d0:	b108      	cbz	r0, 188d6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   188d2:	2000      	movs	r0, #0
   188d4:	bd00      	pop	{pc}
   188d6:	2001      	movs	r0, #1
   188d8:	bd00      	pop	{pc}

000188da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   188da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   188de:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   188e2:	280e      	cmp	r0, #14
   188e4:	d001      	beq.n	188ea <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   188e6:	2000      	movs	r0, #0
   188e8:	4770      	bx	lr
   188ea:	2001      	movs	r0, #1
   188ec:	4770      	bx	lr

000188ee <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   188ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   188f2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   188f6:	2810      	cmp	r0, #16
   188f8:	d001      	beq.n	188fe <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   188fa:	2000      	movs	r0, #0
   188fc:	4770      	bx	lr
   188fe:	2001      	movs	r0, #1
   18900:	4770      	bx	lr

00018902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   18902:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18906:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1890a:	2806      	cmp	r0, #6
   1890c:	d003      	beq.n	18916 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   1890e:	1c40      	adds	r0, r0, #1
   18910:	d001      	beq.n	18916 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   18912:	2000      	movs	r0, #0
   18914:	4770      	bx	lr
   18916:	2001      	movs	r0, #1
   18918:	4770      	bx	lr

0001891a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   1891a:	b500      	push	{lr}
   1891c:	f7ff fff1 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   18920:	b148      	cbz	r0, 18936 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   18922:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18926:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1892a:	2806      	cmp	r0, #6
   1892c:	d303      	bcc.n	18936 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1892e:	1c40      	adds	r0, r0, #1
   18930:	d001      	beq.n	18936 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   18932:	2001      	movs	r0, #1
   18934:	bd00      	pop	{pc}
   18936:	2000      	movs	r0, #0
   18938:	bd00      	pop	{pc}

0001893a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   1893a:	b500      	push	{lr}
   1893c:	f7ff ffe1 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   18940:	b138      	cbz	r0, 18952 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   18942:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18946:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1894a:	2806      	cmp	r0, #6
   1894c:	d303      	bcc.n	18956 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   1894e:	1c40      	adds	r0, r0, #1
   18950:	d001      	beq.n	18956 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   18952:	2000      	movs	r0, #0
   18954:	bd00      	pop	{pc}
   18956:	2001      	movs	r0, #1
   18958:	bd00      	pop	{pc}

0001895a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   1895a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1895e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18962:	280d      	cmp	r0, #13
   18964:	d001      	beq.n	1896a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   18966:	2000      	movs	r0, #0
   18968:	4770      	bx	lr
   1896a:	2001      	movs	r0, #1
   1896c:	4770      	bx	lr

0001896e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   1896e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18972:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   18976:	2808      	cmp	r0, #8
   18978:	d001      	beq.n	1897e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   1897a:	2000      	movs	r0, #0
   1897c:	4770      	bx	lr
   1897e:	2001      	movs	r0, #1
   18980:	4770      	bx	lr

00018982 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   18982:	2a00      	cmp	r2, #0
   18984:	bf04      	itt	eq
   18986:	2000      	moveq	r0, #0
   18988:	4770      	bxeq	lr
   1898a:	1e52      	subs	r2, r2, #1
   1898c:	d007      	beq.n	1899e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   1898e:	7803      	ldrb	r3, [r0, #0]
   18990:	f891 c000 	ldrb.w	ip, [r1]
   18994:	4563      	cmp	r3, ip
   18996:	bf04      	itt	eq
   18998:	1c40      	addeq	r0, r0, #1
   1899a:	1c49      	addeq	r1, r1, #1
   1899c:	d0f5      	beq.n	1898a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   1899e:	7800      	ldrb	r0, [r0, #0]
   189a0:	7809      	ldrb	r1, [r1, #0]
   189a2:	1a40      	subs	r0, r0, r1
   189a4:	4770      	bx	lr

000189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   189a6:	b4f0      	push	{r4, r5, r6, r7}
   189a8:	ea80 0c01 	eor.w	ip, r0, r1
   189ac:	4603      	mov	r3, r0
   189ae:	f01c 0f03 	tst.w	ip, #3
   189b2:	d13c      	bne.n	18a2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   189b4:	f013 0f03 	tst.w	r3, #3
   189b8:	d00b      	beq.n	189d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   189ba:	2a00      	cmp	r2, #0
   189bc:	bf04      	itt	eq
   189be:	bcf0      	popeq	{r4, r5, r6, r7}
   189c0:	4770      	bxeq	lr
   189c2:	f811 cb01 	ldrb.w	ip, [r1], #1
   189c6:	f803 cb01 	strb.w	ip, [r3], #1
   189ca:	1e52      	subs	r2, r2, #1
   189cc:	f013 0f03 	tst.w	r3, #3
   189d0:	d1f3      	bne.n	189ba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   189d2:	2a03      	cmp	r2, #3
   189d4:	d94f      	bls.n	18a76 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   189d6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   189da:	d24c      	bcs.n	18a76 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   189dc:	f1c2 0c00 	rsb	ip, r2, #0
   189e0:	ea4f 74ec 	mov.w	r4, ip, asr #31
   189e4:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   189e8:	ea4f 0cac 	mov.w	ip, ip, asr #2
   189ec:	f1cc 0c00 	rsb	ip, ip, #0
   189f0:	f1bc 0f00 	cmp.w	ip, #0
   189f4:	dd1b      	ble.n	18a2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   189f6:	1f0d      	subs	r5, r1, #4
   189f8:	1f1c      	subs	r4, r3, #4
   189fa:	f01c 0f01 	tst.w	ip, #1
   189fe:	d003      	beq.n	18a08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   18a00:	f855 6f04 	ldr.w	r6, [r5, #4]!
   18a04:	f844 6f04 	str.w	r6, [r4, #4]!
   18a08:	ea5f 066c 	movs.w	r6, ip, asr #1
   18a0c:	d007      	beq.n	18a1e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   18a0e:	686f      	ldr	r7, [r5, #4]
   18a10:	6067      	str	r7, [r4, #4]
   18a12:	f855 7f08 	ldr.w	r7, [r5, #8]!
   18a16:	f844 7f08 	str.w	r7, [r4, #8]!
   18a1a:	1e76      	subs	r6, r6, #1
   18a1c:	d1f7      	bne.n	18a0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   18a1e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   18a22:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   18a26:	f1cc 0c00 	rsb	ip, ip, #0
   18a2a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   18a2e:	2a00      	cmp	r2, #0
   18a30:	bf04      	itt	eq
   18a32:	bcf0      	popeq	{r4, r5, r6, r7}
   18a34:	4770      	bxeq	lr
   18a36:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18a3a:	d226      	bcs.n	18a8a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   18a3c:	2a00      	cmp	r2, #0
   18a3e:	bfdc      	itt	le
   18a40:	bcf0      	pople	{r4, r5, r6, r7}
   18a42:	4770      	bxle	lr
   18a44:	1e49      	subs	r1, r1, #1
   18a46:	1e5b      	subs	r3, r3, #1
   18a48:	f012 0f01 	tst.w	r2, #1
   18a4c:	d003      	beq.n	18a56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   18a4e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   18a52:	f803 cf01 	strb.w	ip, [r3, #1]!
   18a56:	1052      	asrs	r2, r2, #1
   18a58:	bf04      	itt	eq
   18a5a:	bcf0      	popeq	{r4, r5, r6, r7}
   18a5c:	4770      	bxeq	lr
   18a5e:	f891 c001 	ldrb.w	ip, [r1, #1]
   18a62:	f883 c001 	strb.w	ip, [r3, #1]
   18a66:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   18a6a:	f803 cf02 	strb.w	ip, [r3, #2]!
   18a6e:	1e52      	subs	r2, r2, #1
   18a70:	d1f5      	bne.n	18a5e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   18a72:	bcf0      	pop	{r4, r5, r6, r7}
   18a74:	4770      	bx	lr
   18a76:	2a04      	cmp	r2, #4
   18a78:	d3d9      	bcc.n	18a2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   18a7a:	f851 cb04 	ldr.w	ip, [r1], #4
   18a7e:	1f12      	subs	r2, r2, #4
   18a80:	f843 cb04 	str.w	ip, [r3], #4
   18a84:	2a04      	cmp	r2, #4
   18a86:	d2f8      	bcs.n	18a7a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   18a88:	e7d1      	b.n	18a2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   18a8a:	f811 cb01 	ldrb.w	ip, [r1], #1
   18a8e:	f803 cb01 	strb.w	ip, [r3], #1
   18a92:	1e52      	subs	r2, r2, #1
   18a94:	d1f9      	bne.n	18a8a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   18a96:	bcf0      	pop	{r4, r5, r6, r7}
   18a98:	4770      	bx	lr

00018a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   18a9a:	b470      	push	{r4, r5, r6}
   18a9c:	4603      	mov	r3, r0
   18a9e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   18aa2:	f010 0f03 	tst.w	r0, #3
   18aa6:	d009      	beq.n	18abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   18aa8:	2a00      	cmp	r2, #0
   18aaa:	bf04      	itt	eq
   18aac:	bc70      	popeq	{r4, r5, r6}
   18aae:	4770      	bxeq	lr
   18ab0:	f803 cb01 	strb.w	ip, [r3], #1
   18ab4:	1e52      	subs	r2, r2, #1
   18ab6:	f013 0f03 	tst.w	r3, #3
   18aba:	d1f5      	bne.n	18aa8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   18abc:	b2c9      	uxtb	r1, r1
   18abe:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   18ac2:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   18ac6:	2a03      	cmp	r2, #3
   18ac8:	d939      	bls.n	18b3e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   18aca:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18ace:	d236      	bcs.n	18b3e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   18ad0:	4251      	negs	r1, r2
   18ad2:	17cc      	asrs	r4, r1, #31
   18ad4:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   18ad8:	1089      	asrs	r1, r1, #2
   18ada:	424e      	negs	r6, r1
   18adc:	2e00      	cmp	r6, #0
   18ade:	dd11      	ble.n	18b04 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   18ae0:	1f19      	subs	r1, r3, #4
   18ae2:	f016 0f01 	tst.w	r6, #1
   18ae6:	bf18      	it	ne
   18ae8:	f841 5f04 	strne.w	r5, [r1, #4]!
   18aec:	1074      	asrs	r4, r6, #1
   18aee:	d004      	beq.n	18afa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   18af0:	604d      	str	r5, [r1, #4]
   18af2:	f841 5f08 	str.w	r5, [r1, #8]!
   18af6:	1e64      	subs	r4, r4, #1
   18af8:	d1fa      	bne.n	18af0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   18afa:	4271      	negs	r1, r6
   18afc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   18b00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   18b04:	2a00      	cmp	r2, #0
   18b06:	bf04      	itt	eq
   18b08:	bc70      	popeq	{r4, r5, r6}
   18b0a:	4770      	bxeq	lr
   18b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18b10:	d21d      	bcs.n	18b4e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   18b12:	2a00      	cmp	r2, #0
   18b14:	bfdc      	itt	le
   18b16:	bc70      	pople	{r4, r5, r6}
   18b18:	4770      	bxle	lr
   18b1a:	1e59      	subs	r1, r3, #1
   18b1c:	f012 0f01 	tst.w	r2, #1
   18b20:	bf18      	it	ne
   18b22:	f801 cf01 	strbne.w	ip, [r1, #1]!
   18b26:	1052      	asrs	r2, r2, #1
   18b28:	bf04      	itt	eq
   18b2a:	bc70      	popeq	{r4, r5, r6}
   18b2c:	4770      	bxeq	lr
   18b2e:	f881 c001 	strb.w	ip, [r1, #1]
   18b32:	f801 cf02 	strb.w	ip, [r1, #2]!
   18b36:	1e52      	subs	r2, r2, #1
   18b38:	d1f9      	bne.n	18b2e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   18b3a:	bc70      	pop	{r4, r5, r6}
   18b3c:	4770      	bx	lr
   18b3e:	2a04      	cmp	r2, #4
   18b40:	d3e0      	bcc.n	18b04 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   18b42:	1f12      	subs	r2, r2, #4
   18b44:	f843 5b04 	str.w	r5, [r3], #4
   18b48:	2a04      	cmp	r2, #4
   18b4a:	d2fa      	bcs.n	18b42 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   18b4c:	e7da      	b.n	18b04 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   18b4e:	f803 cb01 	strb.w	ip, [r3], #1
   18b52:	1e52      	subs	r2, r2, #1
   18b54:	d1fb      	bne.n	18b4e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   18b56:	bc70      	pop	{r4, r5, r6}
   18b58:	4770      	bx	lr
   18b5a:	f04f 30ff 	mov.w	r0, #4294967295
   18b5e:	4770      	bx	lr
   18b60:	2000      	movs	r0, #0
   18b62:	4770      	bx	lr
   18b64:	2000      	movs	r0, #0
   18b66:	4770      	bx	lr
   18b68:	f04f 30ff 	mov.w	r0, #4294967295
   18b6c:	4770      	bx	lr
   18b6e:	4770      	bx	lr
   18b70:	4770      	bx	lr
   18b72:	2000      	movs	r0, #0
   18b74:	4770      	bx	lr
   18b76:	f04f 30ff 	mov.w	r0, #4294967295
   18b7a:	4770      	bx	lr
   18b7c:	f04f 30ff 	mov.w	r0, #4294967295
   18b80:	4770      	bx	lr
   18b82:	2100      	movs	r1, #0
   18b84:	7001      	strb	r1, [r0, #0]
   18b86:	4770      	bx	lr
   18b88:	f04f 30ff 	mov.w	r0, #4294967295
   18b8c:	4770      	bx	lr
   18b8e:	f04f 30ff 	mov.w	r0, #4294967295
   18b92:	4770      	bx	lr
   18b94:	2000      	movs	r0, #0
   18b96:	4770      	bx	lr
   18b98:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   18b9c:	4605      	mov	r5, r0
   18b9e:	f100 0003 	add.w	r0, r0, #3
   18ba2:	f020 0003 	bic.w	r0, r0, #3
   18ba6:	460c      	mov	r4, r1
   18ba8:	9000      	str	r0, [sp, #0]
   18baa:	7849      	ldrb	r1, [r1, #1]
   18bac:	f88d 1004 	strb.w	r1, [sp, #4]
   18bb0:	78a1      	ldrb	r1, [r4, #2]
   18bb2:	0016      	movs	r6, r2
   18bb4:	f88d 1005 	strb.w	r1, [sp, #5]
   18bb8:	d000      	beq.n	18bbc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
   18bba:	2000      	movs	r0, #0
   18bbc:	a901      	add	r1, sp, #4
   18bbe:	f7f8 f87b 	bl	10cb8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
   18bc2:	9900      	ldr	r1, [sp, #0]
   18bc4:	4408      	add	r0, r1
   18bc6:	9000      	str	r0, [sp, #0]
   18bc8:	78a1      	ldrb	r1, [r4, #2]
   18bca:	b141      	cbz	r1, 18bde <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
   18bcc:	8a63      	ldrh	r3, [r4, #18]
   18bce:	78e2      	ldrb	r2, [r4, #3]
   18bd0:	b106      	cbz	r6, 18bd4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
   18bd2:	2000      	movs	r0, #0
   18bd4:	f7f8 fb00 	bl	111d8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
   18bd8:	9900      	ldr	r1, [sp, #0]
   18bda:	4408      	add	r0, r1
   18bdc:	9000      	str	r0, [sp, #0]
   18bde:	4632      	mov	r2, r6
   18be0:	4621      	mov	r1, r4
   18be2:	4668      	mov	r0, sp
   18be4:	f000 f808 	bl	18bf8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
   18be8:	9800      	ldr	r0, [sp, #0]
   18bea:	1dc0      	adds	r0, r0, #7
   18bec:	f020 0007 	bic.w	r0, r0, #7
   18bf0:	9000      	str	r0, [sp, #0]
   18bf2:	1b40      	subs	r0, r0, r5
   18bf4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   18bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18bfc:	4606      	mov	r6, r0
   18bfe:	460c      	mov	r4, r1
   18c00:	7808      	ldrb	r0, [r1, #0]
   18c02:	7849      	ldrb	r1, [r1, #1]
   18c04:	2700      	movs	r7, #0
   18c06:	4408      	add	r0, r1
   18c08:	4691      	mov	r9, r2
   18c0a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   18c0e:	463d      	mov	r5, r7
   18c10:	e00e      	b.n	18c30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
   18c12:	7a23      	ldrb	r3, [r4, #8]
   18c14:	2b02      	cmp	r3, #2
   18c16:	d200      	bcs.n	18c1a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
   18c18:	2302      	movs	r3, #2
   18c1a:	79e2      	ldrb	r2, [r4, #7]
   18c1c:	2a03      	cmp	r2, #3
   18c1e:	d200      	bcs.n	18c22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
   18c20:	2203      	movs	r2, #3
   18c22:	79a1      	ldrb	r1, [r4, #6]
   18c24:	7960      	ldrb	r0, [r4, #5]
   18c26:	f000 fedf 	bl	199e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
   18c2a:	1c6d      	adds	r5, r5, #1
   18c2c:	4407      	add	r7, r0
   18c2e:	b2ed      	uxtb	r5, r5
   18c30:	4545      	cmp	r5, r8
   18c32:	d3ee      	bcc.n	18c12 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
   18c34:	6830      	ldr	r0, [r6, #0]
   18c36:	1cc0      	adds	r0, r0, #3
   18c38:	f020 0003 	bic.w	r0, r0, #3
   18c3c:	6030      	str	r0, [r6, #0]
   18c3e:	f1b9 0f00 	cmp.w	r9, #0
   18c42:	d000      	beq.n	18c46 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
   18c44:	2000      	movs	r0, #0
   18c46:	463a      	mov	r2, r7
   18c48:	4641      	mov	r1, r8
   18c4a:	f7f8 fa0f 	bl	1106c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
   18c4e:	6831      	ldr	r1, [r6, #0]
   18c50:	4408      	add	r0, r1
   18c52:	6030      	str	r0, [r6, #0]
   18c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00018c58 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
   18c58:	2000      	movs	r0, #0
   18c5a:	4770      	bx	lr

00018c5c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
   18c5c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   18c5e:	4604      	mov	r4, r0
   18c60:	1d01      	adds	r1, r0, #4
   18c62:	4668      	mov	r0, sp
   18c64:	f7f9 fed8 	bl	12a18 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
   18c68:	2800      	cmp	r0, #0
   18c6a:	d004      	beq.n	18c76 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
   18c6c:	4669      	mov	r1, sp
   18c6e:	4620      	mov	r0, r4
   18c70:	f000 f848 	bl	18d04 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
   18c74:	2001      	movs	r0, #1
   18c76:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00018c78 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
   18c78:	b50e      	push	{r1, r2, r3, lr}
   18c7a:	4601      	mov	r1, r0
   18c7c:	4668      	mov	r0, sp
   18c7e:	f000 f827 	bl	18cd0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
   18c82:	4668      	mov	r0, sp
   18c84:	f001 fc76 	bl	1a574 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
   18c88:	bd0e      	pop	{r1, r2, r3, pc}

00018c8a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
   18c8a:	b510      	push	{r4, lr}
   18c8c:	4604      	mov	r4, r0
   18c8e:	4620      	mov	r0, r4
   18c90:	f7f7 ff00 	bl	10a94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
   18c94:	2800      	cmp	r0, #0
   18c96:	d006      	beq.n	18ca6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
   18c98:	78a1      	ldrb	r1, [r4, #2]
   18c9a:	7820      	ldrb	r0, [r4, #0]
   18c9c:	f000 f804 	bl	18ca8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
   18ca0:	2800      	cmp	r0, #0
   18ca2:	d0f4      	beq.n	18c8e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
   18ca4:	2001      	movs	r0, #1
   18ca6:	bd10      	pop	{r4, pc}
   18ca8:	b570      	push	{r4, r5, r6, lr}
   18caa:	460c      	mov	r4, r1
   18cac:	4605      	mov	r5, r0
   18cae:	f7f7 ff63 	bl	10b78 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
   18cb2:	2800      	cmp	r0, #0
   18cb4:	d002      	beq.n	18cbc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
   18cb6:	2d3e      	cmp	r5, #62	; 0x3e
   18cb8:	d001      	beq.n	18cbe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
   18cba:	2001      	movs	r0, #1
   18cbc:	bd70      	pop	{r4, r5, r6, pc}
   18cbe:	2c12      	cmp	r4, #18
   18cc0:	d004      	beq.n	18ccc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
   18cc2:	4620      	mov	r0, r4
   18cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18cc8:	f7f7 bf72 	b.w	10bb0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   18ccc:	2000      	movs	r0, #0
   18cce:	bd70      	pop	{r4, r5, r6, pc}

00018cd0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
   18cd0:	880a      	ldrh	r2, [r1, #0]
   18cd2:	f3c2 020b 	ubfx	r2, r2, #0, #12
   18cd6:	8002      	strh	r2, [r0, #0]
   18cd8:	884a      	ldrh	r2, [r1, #2]
   18cda:	8042      	strh	r2, [r0, #2]
   18cdc:	784a      	ldrb	r2, [r1, #1]
   18cde:	0993      	lsrs	r3, r2, #6
   18ce0:	2200      	movs	r2, #0
   18ce2:	7142      	strb	r2, [r0, #5]
   18ce4:	784b      	ldrb	r3, [r1, #1]
   18ce6:	f3c3 1301 	ubfx	r3, r3, #4, #2
   18cea:	b11b      	cbz	r3, 18cf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   18cec:	2b01      	cmp	r3, #1
   18cee:	d005      	beq.n	18cfc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
   18cf0:	2b02      	cmp	r3, #2
   18cf2:	d005      	beq.n	18d00 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
   18cf4:	7102      	strb	r2, [r0, #4]
   18cf6:	1d09      	adds	r1, r1, #4
   18cf8:	6081      	str	r1, [r0, #8]
   18cfa:	4770      	bx	lr
   18cfc:	2201      	movs	r2, #1
   18cfe:	e7f9      	b.n	18cf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   18d00:	2202      	movs	r2, #2
   18d02:	e7f7      	b.n	18cf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

00018d04 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
   18d04:	b510      	push	{r4, lr}
   18d06:	460c      	mov	r4, r1
   18d08:	7809      	ldrb	r1, [r1, #0]
   18d0a:	7001      	strb	r1, [r0, #0]
   18d0c:	7841      	ldrb	r1, [r0, #1]
   18d0e:	f021 010f 	bic.w	r1, r1, #15
   18d12:	7041      	strb	r1, [r0, #1]
   18d14:	8822      	ldrh	r2, [r4, #0]
   18d16:	f3c2 2203 	ubfx	r2, r2, #8, #4
   18d1a:	4311      	orrs	r1, r2
   18d1c:	7041      	strb	r1, [r0, #1]
   18d1e:	78a2      	ldrb	r2, [r4, #2]
   18d20:	7082      	strb	r2, [r0, #2]
   18d22:	8862      	ldrh	r2, [r4, #2]
   18d24:	f021 0130 	bic.w	r1, r1, #48	; 0x30
   18d28:	0a12      	lsrs	r2, r2, #8
   18d2a:	70c2      	strb	r2, [r0, #3]
   18d2c:	7041      	strb	r1, [r0, #1]
   18d2e:	7922      	ldrb	r2, [r4, #4]
   18d30:	f002 0203 	and.w	r2, r2, #3
   18d34:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   18d38:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   18d3c:	7041      	strb	r1, [r0, #1]
   18d3e:	7962      	ldrb	r2, [r4, #5]
   18d40:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
   18d44:	7041      	strb	r1, [r0, #1]
   18d46:	68a1      	ldr	r1, [r4, #8]
   18d48:	1d02      	adds	r2, r0, #4
   18d4a:	4291      	cmp	r1, r2
   18d4c:	d006      	beq.n	18d5c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
   18d4e:	8862      	ldrh	r2, [r4, #2]
   18d50:	2afb      	cmp	r2, #251	; 0xfb
   18d52:	d300      	bcc.n	18d56 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
   18d54:	22fb      	movs	r2, #251	; 0xfb
   18d56:	1d00      	adds	r0, r0, #4
   18d58:	f7ff fe25 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   18d5c:	78a0      	ldrb	r0, [r4, #2]
   18d5e:	1d00      	adds	r0, r0, #4
   18d60:	b2c0      	uxtb	r0, r0
   18d62:	bd10      	pop	{r4, pc}

00018d64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   18d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d68:	4604      	mov	r4, r0
   18d6a:	780f      	ldrb	r7, [r1, #0]
   18d6c:	2000      	movs	r0, #0
   18d6e:	250c      	movs	r5, #12
   18d70:	2605      	movs	r6, #5
   18d72:	223e      	movs	r2, #62	; 0x3e
   18d74:	23ff      	movs	r3, #255	; 0xff
   18d76:	2f1b      	cmp	r7, #27
   18d78:	d27d      	bcs.n	18e76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
   18d7a:	e8df f007 	tbb	[pc, r7]
   18d7e:	0eea      	.short	0x0eea
   18d80:	632d2725 	.word	0x632d2725
   18d84:	af9b816d 	.word	0xaf9b816d
   18d88:	e2c7bcb1 	.word	0xe2c7bcb1
   18d8c:	31eaeaf4 	.word	0x31eaeaf4
   18d90:	f1fdd5d2 	.word	0xf1fdd5d2
   18d94:	edeeeff0 	.word	0xedeeeff0
   18d98:	00ec      	.short	0x00ec
   18d9a:	7025      	strb	r5, [r4, #0]
   18d9c:	7908      	ldrb	r0, [r1, #4]
   18d9e:	70a0      	strb	r0, [r4, #2]
   18da0:	7948      	ldrb	r0, [r1, #5]
   18da2:	70e0      	strb	r0, [r4, #3]
   18da4:	f8b1 0005 	ldrh.w	r0, [r1, #5]
   18da8:	0a00      	lsrs	r0, r0, #8
   18daa:	7120      	strb	r0, [r4, #4]
   18dac:	79c8      	ldrb	r0, [r1, #7]
   18dae:	7160      	strb	r0, [r4, #5]
   18db0:	7a08      	ldrb	r0, [r1, #8]
   18db2:	71a0      	strb	r0, [r4, #6]
   18db4:	8908      	ldrh	r0, [r1, #8]
   18db6:	0a00      	lsrs	r0, r0, #8
   18db8:	71e0      	strb	r0, [r4, #7]
   18dba:	7a88      	ldrb	r0, [r1, #10]
   18dbc:	7220      	strb	r0, [r4, #8]
   18dbe:	8948      	ldrh	r0, [r1, #10]
   18dc0:	0a00      	lsrs	r0, r0, #8
   18dc2:	7260      	strb	r0, [r4, #9]
   18dc4:	2008      	movs	r0, #8
   18dc6:	e0c2      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18dc8:	2010      	movs	r0, #16
   18dca:	e000      	b.n	18dce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
   18dcc:	201a      	movs	r0, #26
   18dce:	7020      	strb	r0, [r4, #0]
   18dd0:	7908      	ldrb	r0, [r1, #4]
   18dd2:	70a0      	strb	r0, [r4, #2]
   18dd4:	2001      	movs	r0, #1
   18dd6:	e0ba      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18dd8:	4620      	mov	r0, r4
   18dda:	f000 f946 	bl	1906a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
   18dde:	e0b4      	b.n	18f4a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
   18de0:	7022      	strb	r2, [r4, #0]
   18de2:	200a      	movs	r0, #10
   18de4:	70a0      	strb	r0, [r4, #2]
   18de6:	f811 0f04 	ldrb.w	r0, [r1, #4]!
   18dea:	70e0      	strb	r0, [r4, #3]
   18dec:	7888      	ldrb	r0, [r1, #2]
   18dee:	7120      	strb	r0, [r4, #4]
   18df0:	8848      	ldrh	r0, [r1, #2]
   18df2:	0a00      	lsrs	r0, r0, #8
   18df4:	7160      	strb	r0, [r4, #5]
   18df6:	7908      	ldrb	r0, [r1, #4]
   18df8:	71a0      	strb	r0, [r4, #6]
   18dfa:	7948      	ldrb	r0, [r1, #5]
   18dfc:	71e0      	strb	r0, [r4, #7]
   18dfe:	f8d1 0006 	ldr.w	r0, [r1, #6]
   18e02:	60a0      	str	r0, [r4, #8]
   18e04:	8948      	ldrh	r0, [r1, #10]
   18e06:	81a0      	strh	r0, [r4, #12]
   18e08:	68c8      	ldr	r0, [r1, #12]
   18e0a:	f8c4 000e 	str.w	r0, [r4, #14]
   18e0e:	8a08      	ldrh	r0, [r1, #16]
   18e10:	8260      	strh	r0, [r4, #18]
   18e12:	f8d1 0012 	ldr.w	r0, [r1, #18]
   18e16:	6160      	str	r0, [r4, #20]
   18e18:	8ac8      	ldrh	r0, [r1, #22]
   18e1a:	8320      	strh	r0, [r4, #24]
   18e1c:	7e08      	ldrb	r0, [r1, #24]
   18e1e:	76a0      	strb	r0, [r4, #26]
   18e20:	8b08      	ldrh	r0, [r1, #24]
   18e22:	0a00      	lsrs	r0, r0, #8
   18e24:	76e0      	strb	r0, [r4, #27]
   18e26:	7e88      	ldrb	r0, [r1, #26]
   18e28:	7720      	strb	r0, [r4, #28]
   18e2a:	8b48      	ldrh	r0, [r1, #26]
   18e2c:	0a00      	lsrs	r0, r0, #8
   18e2e:	7760      	strb	r0, [r4, #29]
   18e30:	7f08      	ldrb	r0, [r1, #28]
   18e32:	77a0      	strb	r0, [r4, #30]
   18e34:	8b88      	ldrh	r0, [r1, #28]
   18e36:	0a00      	lsrs	r0, r0, #8
   18e38:	77e0      	strb	r0, [r4, #31]
   18e3a:	7f88      	ldrb	r0, [r1, #30]
   18e3c:	f884 0020 	strb.w	r0, [r4, #32]
   18e40:	201f      	movs	r0, #31
   18e42:	e084      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18e44:	7022      	strb	r2, [r4, #0]
   18e46:	2014      	movs	r0, #20
   18e48:	70a0      	strb	r0, [r4, #2]
   18e4a:	7908      	ldrb	r0, [r1, #4]
   18e4c:	70e0      	strb	r0, [r4, #3]
   18e4e:	8888      	ldrh	r0, [r1, #4]
   18e50:	0a00      	lsrs	r0, r0, #8
   18e52:	7120      	strb	r0, [r4, #4]
   18e54:	7988      	ldrb	r0, [r1, #6]
   18e56:	e0a7      	b.n	18fa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
   18e58:	7022      	strb	r2, [r4, #0]
   18e5a:	2004      	movs	r0, #4
   18e5c:	70a0      	strb	r0, [r4, #2]
   18e5e:	7908      	ldrb	r0, [r1, #4]
   18e60:	70e0      	strb	r0, [r4, #3]
   18e62:	7988      	ldrb	r0, [r1, #6]
   18e64:	7120      	strb	r0, [r4, #4]
   18e66:	88c8      	ldrh	r0, [r1, #6]
   18e68:	0a00      	lsrs	r0, r0, #8
   18e6a:	7160      	strb	r0, [r4, #5]
   18e6c:	6888      	ldr	r0, [r1, #8]
   18e6e:	f8c4 0006 	str.w	r0, [r4, #6]
   18e72:	68c8      	ldr	r0, [r1, #12]
   18e74:	e000      	b.n	18e78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
   18e76:	e06c      	b.n	18f52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
   18e78:	f8c4 000a 	str.w	r0, [r4, #10]
   18e7c:	200c      	movs	r0, #12
   18e7e:	e066      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18e80:	7022      	strb	r2, [r4, #0]
   18e82:	2003      	movs	r0, #3
   18e84:	70a0      	strb	r0, [r4, #2]
   18e86:	7908      	ldrb	r0, [r1, #4]
   18e88:	70e0      	strb	r0, [r4, #3]
   18e8a:	7988      	ldrb	r0, [r1, #6]
   18e8c:	7120      	strb	r0, [r4, #4]
   18e8e:	88c8      	ldrh	r0, [r1, #6]
   18e90:	0a00      	lsrs	r0, r0, #8
   18e92:	7160      	strb	r0, [r4, #5]
   18e94:	7a08      	ldrb	r0, [r1, #8]
   18e96:	71a0      	strb	r0, [r4, #6]
   18e98:	8908      	ldrh	r0, [r1, #8]
   18e9a:	0a00      	lsrs	r0, r0, #8
   18e9c:	71e0      	strb	r0, [r4, #7]
   18e9e:	7a88      	ldrb	r0, [r1, #10]
   18ea0:	7220      	strb	r0, [r4, #8]
   18ea2:	8948      	ldrh	r0, [r1, #10]
   18ea4:	0a00      	lsrs	r0, r0, #8
   18ea6:	7260      	strb	r0, [r4, #9]
   18ea8:	7b08      	ldrb	r0, [r1, #12]
   18eaa:	72a0      	strb	r0, [r4, #10]
   18eac:	8988      	ldrh	r0, [r1, #12]
   18eae:	0a00      	lsrs	r0, r0, #8
   18eb0:	72e0      	strb	r0, [r4, #11]
   18eb2:	e0d8      	b.n	19066 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
   18eb4:	7022      	strb	r2, [r4, #0]
   18eb6:	70a6      	strb	r6, [r4, #2]
   18eb8:	7908      	ldrb	r0, [r1, #4]
   18eba:	70e0      	strb	r0, [r4, #3]
   18ebc:	8888      	ldrh	r0, [r1, #4]
   18ebe:	0a00      	lsrs	r0, r0, #8
   18ec0:	7120      	strb	r0, [r4, #4]
   18ec2:	f8d1 0006 	ldr.w	r0, [r1, #6]
   18ec6:	f8c4 0005 	str.w	r0, [r4, #5]
   18eca:	f8d1 000a 	ldr.w	r0, [r1, #10]
   18ece:	f8c4 0009 	str.w	r0, [r4, #9]
   18ed2:	89c8      	ldrh	r0, [r1, #14]
   18ed4:	f8a4 000d 	strh.w	r0, [r4, #13]
   18ed8:	200d      	movs	r0, #13
   18eda:	e038      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18edc:	2011      	movs	r0, #17
   18ede:	e043      	b.n	18f68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
   18ee0:	7026      	strb	r6, [r4, #0]
   18ee2:	7908      	ldrb	r0, [r1, #4]
   18ee4:	70a0      	strb	r0, [r4, #2]
   18ee6:	7948      	ldrb	r0, [r1, #5]
   18ee8:	70e0      	strb	r0, [r4, #3]
   18eea:	f8b1 0005 	ldrh.w	r0, [r1, #5]
   18eee:	0a00      	lsrs	r0, r0, #8
   18ef0:	7120      	strb	r0, [r4, #4]
   18ef2:	79c8      	ldrb	r0, [r1, #7]
   18ef4:	e058      	b.n	18fa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
   18ef6:	2008      	movs	r0, #8
   18ef8:	7020      	strb	r0, [r4, #0]
   18efa:	7908      	ldrb	r0, [r1, #4]
   18efc:	70a0      	strb	r0, [r4, #2]
   18efe:	7988      	ldrb	r0, [r1, #6]
   18f00:	70e0      	strb	r0, [r4, #3]
   18f02:	88c8      	ldrh	r0, [r1, #6]
   18f04:	0a00      	lsrs	r0, r0, #8
   18f06:	7120      	strb	r0, [r4, #4]
   18f08:	7a08      	ldrb	r0, [r1, #8]
   18f0a:	e04d      	b.n	18fa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
   18f0c:	2030      	movs	r0, #48	; 0x30
   18f0e:	7020      	strb	r0, [r4, #0]
   18f10:	7908      	ldrb	r0, [r1, #4]
   18f12:	70a0      	strb	r0, [r4, #2]
   18f14:	7988      	ldrb	r0, [r1, #6]
   18f16:	70e0      	strb	r0, [r4, #3]
   18f18:	88c8      	ldrh	r0, [r1, #6]
   18f1a:	0a00      	lsrs	r0, r0, #8
   18f1c:	7120      	strb	r0, [r4, #4]
   18f1e:	2003      	movs	r0, #3
   18f20:	e015      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18f22:	7022      	strb	r2, [r4, #0]
   18f24:	2007      	movs	r0, #7
   18f26:	e044      	b.n	18fb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
   18f28:	7022      	strb	r2, [r4, #0]
   18f2a:	70a5      	strb	r5, [r4, #2]
   18f2c:	7908      	ldrb	r0, [r1, #4]
   18f2e:	70e0      	strb	r0, [r4, #3]
   18f30:	7988      	ldrb	r0, [r1, #6]
   18f32:	7120      	strb	r0, [r4, #4]
   18f34:	88c8      	ldrh	r0, [r1, #6]
   18f36:	0a00      	lsrs	r0, r0, #8
   18f38:	7160      	strb	r0, [r4, #5]
   18f3a:	7a08      	ldrb	r0, [r1, #8]
   18f3c:	71a0      	strb	r0, [r4, #6]
   18f3e:	7a48      	ldrb	r0, [r1, #9]
   18f40:	e027      	b.n	18f92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
   18f42:	4620      	mov	r0, r4
   18f44:	1d09      	adds	r1, r1, #4
   18f46:	f7f7 fde9 	bl	10b1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
   18f4a:	2800      	cmp	r0, #0
   18f4c:	d001      	beq.n	18f52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
   18f4e:	7060      	strb	r0, [r4, #1]
   18f50:	1c80      	adds	r0, r0, #2
   18f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f56:	e073      	b.n	19040 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
   18f58:	e047      	b.n	18fea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
   18f5a:	e028      	b.n	18fae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
   18f5c:	e053      	b.n	19006 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
   18f5e:	e061      	b.n	19024 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
   18f60:	e01a      	b.n	18f98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
   18f62:	e009      	b.n	18f78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
   18f64:	e7ff      	b.n	18f66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
   18f66:	2057      	movs	r0, #87	; 0x57
   18f68:	7020      	strb	r0, [r4, #0]
   18f6a:	7908      	ldrb	r0, [r1, #4]
   18f6c:	70a0      	strb	r0, [r4, #2]
   18f6e:	8888      	ldrh	r0, [r1, #4]
   18f70:	0a00      	lsrs	r0, r0, #8
   18f72:	70e0      	strb	r0, [r4, #3]
   18f74:	2002      	movs	r0, #2
   18f76:	e7ea      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18f78:	7022      	strb	r2, [r4, #0]
   18f7a:	2012      	movs	r0, #18
   18f7c:	70a0      	strb	r0, [r4, #2]
   18f7e:	7908      	ldrb	r0, [r1, #4]
   18f80:	70e0      	strb	r0, [r4, #3]
   18f82:	7948      	ldrb	r0, [r1, #5]
   18f84:	7120      	strb	r0, [r4, #4]
   18f86:	7988      	ldrb	r0, [r1, #6]
   18f88:	7160      	strb	r0, [r4, #5]
   18f8a:	88c8      	ldrh	r0, [r1, #6]
   18f8c:	0a00      	lsrs	r0, r0, #8
   18f8e:	71a0      	strb	r0, [r4, #6]
   18f90:	7a08      	ldrb	r0, [r1, #8]
   18f92:	71e0      	strb	r0, [r4, #7]
   18f94:	2006      	movs	r0, #6
   18f96:	e7da      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18f98:	7023      	strb	r3, [r4, #0]
   18f9a:	20a1      	movs	r0, #161	; 0xa1
   18f9c:	70a0      	strb	r0, [r4, #2]
   18f9e:	7908      	ldrb	r0, [r1, #4]
   18fa0:	70e0      	strb	r0, [r4, #3]
   18fa2:	7948      	ldrb	r0, [r1, #5]
   18fa4:	7120      	strb	r0, [r4, #4]
   18fa6:	2000      	movs	r0, #0
   18fa8:	7160      	strb	r0, [r4, #5]
   18faa:	2004      	movs	r0, #4
   18fac:	e7cf      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18fae:	7023      	strb	r3, [r4, #0]
   18fb0:	20a2      	movs	r0, #162	; 0xa2
   18fb2:	70a0      	strb	r0, [r4, #2]
   18fb4:	7908      	ldrb	r0, [r1, #4]
   18fb6:	70e0      	strb	r0, [r4, #3]
   18fb8:	8888      	ldrh	r0, [r1, #4]
   18fba:	0a00      	lsrs	r0, r0, #8
   18fbc:	7120      	strb	r0, [r4, #4]
   18fbe:	7988      	ldrb	r0, [r1, #6]
   18fc0:	7160      	strb	r0, [r4, #5]
   18fc2:	88c8      	ldrh	r0, [r1, #6]
   18fc4:	0a00      	lsrs	r0, r0, #8
   18fc6:	71a0      	strb	r0, [r4, #6]
   18fc8:	7a08      	ldrb	r0, [r1, #8]
   18fca:	71e0      	strb	r0, [r4, #7]
   18fcc:	8908      	ldrh	r0, [r1, #8]
   18fce:	0a00      	lsrs	r0, r0, #8
   18fd0:	7220      	strb	r0, [r4, #8]
   18fd2:	7a88      	ldrb	r0, [r1, #10]
   18fd4:	7260      	strb	r0, [r4, #9]
   18fd6:	8948      	ldrh	r0, [r1, #10]
   18fd8:	0a00      	lsrs	r0, r0, #8
   18fda:	72a0      	strb	r0, [r4, #10]
   18fdc:	7b08      	ldrb	r0, [r1, #12]
   18fde:	72e0      	strb	r0, [r4, #11]
   18fe0:	8988      	ldrh	r0, [r1, #12]
   18fe2:	0a00      	lsrs	r0, r0, #8
   18fe4:	7320      	strb	r0, [r4, #12]
   18fe6:	200b      	movs	r0, #11
   18fe8:	e7b1      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   18fea:	7023      	strb	r3, [r4, #0]
   18fec:	20a3      	movs	r0, #163	; 0xa3
   18fee:	70a0      	strb	r0, [r4, #2]
   18ff0:	7908      	ldrb	r0, [r1, #4]
   18ff2:	70e0      	strb	r0, [r4, #3]
   18ff4:	8888      	ldrh	r0, [r1, #4]
   18ff6:	0a00      	lsrs	r0, r0, #8
   18ff8:	7120      	strb	r0, [r4, #4]
   18ffa:	7988      	ldrb	r0, [r1, #6]
   18ffc:	7160      	strb	r0, [r4, #5]
   18ffe:	79c8      	ldrb	r0, [r1, #7]
   19000:	71a0      	strb	r0, [r4, #6]
   19002:	2005      	movs	r0, #5
   19004:	e7a3      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   19006:	7022      	strb	r2, [r4, #0]
   19008:	2013      	movs	r0, #19
   1900a:	70a0      	strb	r0, [r4, #2]
   1900c:	7908      	ldrb	r0, [r1, #4]
   1900e:	70e0      	strb	r0, [r4, #3]
   19010:	7948      	ldrb	r0, [r1, #5]
   19012:	7120      	strb	r0, [r4, #4]
   19014:	f8d1 0006 	ldr.w	r0, [r1, #6]
   19018:	f8c4 0005 	str.w	r0, [r4, #5]
   1901c:	8948      	ldrh	r0, [r1, #10]
   1901e:	f8a4 0009 	strh.w	r0, [r4, #9]
   19022:	e020      	b.n	19066 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
   19024:	7023      	strb	r3, [r4, #0]
   19026:	20a4      	movs	r0, #164	; 0xa4
   19028:	70a0      	strb	r0, [r4, #2]
   1902a:	7908      	ldrb	r0, [r1, #4]
   1902c:	70e0      	strb	r0, [r4, #3]
   1902e:	8888      	ldrh	r0, [r1, #4]
   19030:	0a00      	lsrs	r0, r0, #8
   19032:	7120      	strb	r0, [r4, #4]
   19034:	7988      	ldrb	r0, [r1, #6]
   19036:	7160      	strb	r0, [r4, #5]
   19038:	79c8      	ldrb	r0, [r1, #7]
   1903a:	71a0      	strb	r0, [r4, #6]
   1903c:	2007      	movs	r0, #7
   1903e:	e786      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
   19040:	7023      	strb	r3, [r4, #0]
   19042:	2080      	movs	r0, #128	; 0x80
   19044:	70a0      	strb	r0, [r4, #2]
   19046:	888a      	ldrh	r2, [r1, #4]
   19048:	f8a4 2003 	strh.w	r2, [r4, #3]
   1904c:	88ca      	ldrh	r2, [r1, #6]
   1904e:	f8a4 2005 	strh.w	r2, [r4, #5]
   19052:	7a0a      	ldrb	r2, [r1, #8]
   19054:	71e2      	strb	r2, [r4, #7]
   19056:	7a4a      	ldrb	r2, [r1, #9]
   19058:	8122      	strh	r2, [r4, #8]
   1905a:	7a8a      	ldrb	r2, [r1, #10]
   1905c:	72a2      	strb	r2, [r4, #10]
   1905e:	7ac9      	ldrb	r1, [r1, #11]
   19060:	f001 0101 	and.w	r1, r1, #1
   19064:	72e1      	strb	r1, [r4, #11]
   19066:	200a      	movs	r0, #10
   19068:	e771      	b.n	18f4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0001906a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
   1906a:	223e      	movs	r2, #62	; 0x3e
   1906c:	7002      	strb	r2, [r0, #0]
   1906e:	2201      	movs	r2, #1
   19070:	7082      	strb	r2, [r0, #2]
   19072:	790a      	ldrb	r2, [r1, #4]
   19074:	70c2      	strb	r2, [r0, #3]
   19076:	798a      	ldrb	r2, [r1, #6]
   19078:	7102      	strb	r2, [r0, #4]
   1907a:	88ca      	ldrh	r2, [r1, #6]
   1907c:	0a12      	lsrs	r2, r2, #8
   1907e:	7142      	strb	r2, [r0, #5]
   19080:	7a0a      	ldrb	r2, [r1, #8]
   19082:	7182      	strb	r2, [r0, #6]
   19084:	7a4a      	ldrb	r2, [r1, #9]
   19086:	71c2      	strb	r2, [r0, #7]
   19088:	f8d1 200a 	ldr.w	r2, [r1, #10]
   1908c:	6082      	str	r2, [r0, #8]
   1908e:	89ca      	ldrh	r2, [r1, #14]
   19090:	8182      	strh	r2, [r0, #12]
   19092:	7c0a      	ldrb	r2, [r1, #16]
   19094:	7382      	strb	r2, [r0, #14]
   19096:	8a0a      	ldrh	r2, [r1, #16]
   19098:	0a12      	lsrs	r2, r2, #8
   1909a:	73c2      	strb	r2, [r0, #15]
   1909c:	7c8a      	ldrb	r2, [r1, #18]
   1909e:	7402      	strb	r2, [r0, #16]
   190a0:	8a4a      	ldrh	r2, [r1, #18]
   190a2:	0a12      	lsrs	r2, r2, #8
   190a4:	7442      	strb	r2, [r0, #17]
   190a6:	7d0a      	ldrb	r2, [r1, #20]
   190a8:	7482      	strb	r2, [r0, #18]
   190aa:	8a8a      	ldrh	r2, [r1, #20]
   190ac:	0a12      	lsrs	r2, r2, #8
   190ae:	74c2      	strb	r2, [r0, #19]
   190b0:	7d89      	ldrb	r1, [r1, #22]
   190b2:	7501      	strb	r1, [r0, #20]
   190b4:	2013      	movs	r0, #19
   190b6:	4770      	bx	lr

000190b8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
   190b8:	223e      	movs	r2, #62	; 0x3e
   190ba:	7002      	strb	r2, [r0, #0]
   190bc:	2201      	movs	r2, #1
   190be:	7082      	strb	r2, [r0, #2]
   190c0:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   190c4:	70c2      	strb	r2, [r0, #3]
   190c6:	788a      	ldrb	r2, [r1, #2]
   190c8:	7102      	strb	r2, [r0, #4]
   190ca:	884a      	ldrh	r2, [r1, #2]
   190cc:	0a12      	lsrs	r2, r2, #8
   190ce:	7142      	strb	r2, [r0, #5]
   190d0:	790a      	ldrb	r2, [r1, #4]
   190d2:	7182      	strb	r2, [r0, #6]
   190d4:	794a      	ldrb	r2, [r1, #5]
   190d6:	71c2      	strb	r2, [r0, #7]
   190d8:	f8d1 2006 	ldr.w	r2, [r1, #6]
   190dc:	6082      	str	r2, [r0, #8]
   190de:	894a      	ldrh	r2, [r1, #10]
   190e0:	8182      	strh	r2, [r0, #12]
   190e2:	7e0a      	ldrb	r2, [r1, #24]
   190e4:	7382      	strb	r2, [r0, #14]
   190e6:	8b0a      	ldrh	r2, [r1, #24]
   190e8:	0a12      	lsrs	r2, r2, #8
   190ea:	73c2      	strb	r2, [r0, #15]
   190ec:	7e8a      	ldrb	r2, [r1, #26]
   190ee:	7402      	strb	r2, [r0, #16]
   190f0:	8b4a      	ldrh	r2, [r1, #26]
   190f2:	0a12      	lsrs	r2, r2, #8
   190f4:	7442      	strb	r2, [r0, #17]
   190f6:	7f0a      	ldrb	r2, [r1, #28]
   190f8:	7482      	strb	r2, [r0, #18]
   190fa:	8b8a      	ldrh	r2, [r1, #28]
   190fc:	0a12      	lsrs	r2, r2, #8
   190fe:	74c2      	strb	r2, [r0, #19]
   19100:	7f89      	ldrb	r1, [r1, #30]
   19102:	7501      	strb	r1, [r0, #20]
   19104:	2113      	movs	r1, #19
   19106:	7041      	strb	r1, [r0, #1]
   19108:	4608      	mov	r0, r1
   1910a:	4770      	bx	lr

0001910c <sdc_hci_data_get>:
   1910c:	b510      	push	{r4, lr}
   1910e:	b120      	cbz	r0, 1911a <sdc_hci_data_get+0xe>
   19110:	f7ff fda4 	bl	18c5c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
   19114:	b120      	cbz	r0, 19120 <sdc_hci_data_get+0x14>
   19116:	2000      	movs	r0, #0
   19118:	bd10      	pop	{r4, pc}
   1911a:	f06f 0015 	mvn.w	r0, #21
   1911e:	bd10      	pop	{r4, pc}
   19120:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19124:	bd10      	pop	{r4, pc}

00019126 <sdc_hci_data_put>:
   19126:	b510      	push	{r4, lr}
   19128:	f06f 0415 	mvn.w	r4, #21
   1912c:	b120      	cbz	r0, 19138 <sdc_hci_data_put+0x12>
   1912e:	f7ff fda3 	bl	18c78 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
   19132:	b108      	cbz	r0, 19138 <sdc_hci_data_put+0x12>
   19134:	2000      	movs	r0, #0
   19136:	bd10      	pop	{r4, pc}
   19138:	4620      	mov	r0, r4
   1913a:	bd10      	pop	{r4, pc}

0001913c <sdc_hci_evt_get>:
   1913c:	b510      	push	{r4, lr}
   1913e:	b120      	cbz	r0, 1914a <sdc_hci_evt_get+0xe>
   19140:	f7ff fda3 	bl	18c8a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
   19144:	b120      	cbz	r0, 19150 <sdc_hci_evt_get+0x14>
   19146:	2000      	movs	r0, #0
   19148:	bd10      	pop	{r4, pc}
   1914a:	f06f 0015 	mvn.w	r0, #21
   1914e:	bd10      	pop	{r4, pc}
   19150:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19154:	bd10      	pop	{r4, pc}

00019156 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
   19156:	f002 beda 	b.w	1bf0e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0001915a <sdc_hci_cmd_cb_read_transmit_power_level>:
   1915a:	f002 bf1c 	b.w	1bf96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0001915e <sdc_hci_cmd_cb_set_event_mask>:
   1915e:	b510      	push	{r4, lr}
   19160:	f7f7 fd3a 	bl	10bd8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   19164:	2000      	movs	r0, #0
   19166:	bd10      	pop	{r4, pc}

00019168 <sdc_hci_cmd_cb_set_event_mask_page_2>:
   19168:	b510      	push	{r4, lr}
   1916a:	f7f7 fd43 	bl	10bf4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
   1916e:	2000      	movs	r0, #0
   19170:	bd10      	pop	{r4, pc}

00019172 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
   19172:	f002 bf2c 	b.w	1bfce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

00019176 <sdc_hci_cmd_vs_conn_event_extend>:
   19176:	b508      	push	{r3, lr}
   19178:	7800      	ldrb	r0, [r0, #0]
   1917a:	f88d 0000 	strb.w	r0, [sp]
   1917e:	4668      	mov	r0, sp
   19180:	f002 fddc 	bl	1bd3c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   19184:	bd08      	pop	{r3, pc}

00019186 <sdc_hci_cmd_vs_conn_update>:
   19186:	2001      	movs	r0, #1
   19188:	4770      	bx	lr

0001918a <sdc_hci_cmd_vs_event_length_set>:
   1918a:	f7fd bc13 	b.w	169b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0001918e <sdc_hci_cmd_vs_llpm_mode_set>:
   1918e:	2001      	movs	r0, #1
   19190:	4770      	bx	lr

00019192 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   19192:	7800      	ldrb	r0, [r0, #0]
   19194:	b100      	cbz	r0, 19198 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   19196:	2001      	movs	r0, #1
   19198:	f002 bd55 	b.w	1bc46 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0001919c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
   1919c:	b570      	push	{r4, r5, r6, lr}
   1919e:	4605      	mov	r5, r0
   191a0:	2210      	movs	r2, #16
   191a2:	2100      	movs	r1, #0
   191a4:	f7ff fc79 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   191a8:	2210      	movs	r2, #16
   191aa:	2100      	movs	r1, #0
   191ac:	f105 0010 	add.w	r0, r5, #16
   191b0:	f7ff fc73 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   191b4:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   191b8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   191bc:	1c40      	adds	r0, r0, #1
   191be:	d10b      	bne.n	191d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   191c0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   191c4:	1c40      	adds	r0, r0, #1
   191c6:	d107      	bne.n	191d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   191c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   191cc:	1c40      	adds	r0, r0, #1
   191ce:	d103      	bne.n	191d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   191d0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   191d4:	1c40      	adds	r0, r0, #1
   191d6:	d00b      	beq.n	191f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
   191d8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   191dc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   191e0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   191e4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   191e8:	612a      	str	r2, [r5, #16]
   191ea:	6168      	str	r0, [r5, #20]
   191ec:	61a9      	str	r1, [r5, #24]
   191ee:	61eb      	str	r3, [r5, #28]
   191f0:	2000      	movs	r0, #0
   191f2:	f7f8 fa93 	bl	1171c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   191f6:	b918      	cbnz	r0, 19200 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
   191f8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   191fc:	07c0      	lsls	r0, r0, #31
   191fe:	d118      	bne.n	19232 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   19200:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   19204:	1c40      	adds	r0, r0, #1
   19206:	d10b      	bne.n	19220 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19208:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1920c:	1c40      	adds	r0, r0, #1
   1920e:	d107      	bne.n	19220 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19210:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   19214:	1c40      	adds	r0, r0, #1
   19216:	d103      	bne.n	19220 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   19218:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1921c:	1c40      	adds	r0, r0, #1
   1921e:	d008      	beq.n	19232 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   19220:	f854 0f90 	ldr.w	r0, [r4, #144]!
   19224:	6861      	ldr	r1, [r4, #4]
   19226:	68a2      	ldr	r2, [r4, #8]
   19228:	68e3      	ldr	r3, [r4, #12]
   1922a:	6028      	str	r0, [r5, #0]
   1922c:	6069      	str	r1, [r5, #4]
   1922e:	60aa      	str	r2, [r5, #8]
   19230:	60eb      	str	r3, [r5, #12]
   19232:	2000      	movs	r0, #0
   19234:	bd70      	pop	{r4, r5, r6, pc}

00019236 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   19236:	b538      	push	{r3, r4, r5, lr}
   19238:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1923c:	4604      	mov	r4, r0
   1923e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   19242:	1c40      	adds	r0, r0, #1
   19244:	d105      	bne.n	19252 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
   19246:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1924a:	43c0      	mvns	r0, r0
   1924c:	0400      	lsls	r0, r0, #16
   1924e:	0c00      	lsrs	r0, r0, #16
   19250:	d03e      	beq.n	192d0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   19252:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   19256:	07c0      	lsls	r0, r0, #31
   19258:	d03a      	beq.n	192d0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   1925a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1925e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
   19262:	f8ad 1000 	strh.w	r1, [sp]
   19266:	f8c4 0001 	str.w	r0, [r4, #1]
   1926a:	f8bd 0000 	ldrh.w	r0, [sp]
   1926e:	f8a4 0005 	strh.w	r0, [r4, #5]
   19272:	79a0      	ldrb	r0, [r4, #6]
   19274:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   19278:	71a0      	strb	r0, [r4, #6]
   1927a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   1927e:	1c40      	adds	r0, r0, #1
   19280:	d00f      	beq.n	192a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   19282:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   19286:	1c40      	adds	r0, r0, #1
   19288:	d00b      	beq.n	192a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1928a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   1928e:	1c40      	adds	r0, r0, #1
   19290:	d007      	beq.n	192a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   19292:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   19296:	1c40      	adds	r0, r0, #1
   19298:	d003      	beq.n	192a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1929a:	2000      	movs	r0, #0
   1929c:	f7f8 fa3e 	bl	1171c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   192a0:	b140      	cbz	r0, 192b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
   192a2:	2210      	movs	r2, #16
   192a4:	2100      	movs	r1, #0
   192a6:	1de0      	adds	r0, r4, #7
   192a8:	f7ff fbf7 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   192ac:	2001      	movs	r0, #1
   192ae:	7020      	strb	r0, [r4, #0]
   192b0:	2000      	movs	r0, #0
   192b2:	bd38      	pop	{r3, r4, r5, pc}
   192b4:	f855 2f90 	ldr.w	r2, [r5, #144]!
   192b8:	6869      	ldr	r1, [r5, #4]
   192ba:	68a8      	ldr	r0, [r5, #8]
   192bc:	68eb      	ldr	r3, [r5, #12]
   192be:	f8c4 2007 	str.w	r2, [r4, #7]
   192c2:	f8c4 100b 	str.w	r1, [r4, #11]
   192c6:	f8c4 000f 	str.w	r0, [r4, #15]
   192ca:	f8c4 3013 	str.w	r3, [r4, #19]
   192ce:	e7ed      	b.n	192ac <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
   192d0:	2000      	movs	r0, #0
   192d2:	e7ec      	b.n	192ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

000192d4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   192d4:	f002 bd24 	b.w	1bd20 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

000192d8 <sdc_hci_cmd_ip_read_bd_addr>:
   192d8:	f002 be2a 	b.w	1bf30 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

000192dc <sdc_hci_cmd_ip_read_local_version_information>:
   192dc:	f7fd bb78 	b.w	169d0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

000192e0 <sdc_hci_cmd_le_add_device_to_resolving_list>:
   192e0:	f002 ba08 	b.w	1b6f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

000192e4 <sdc_hci_cmd_le_add_device_to_white_list>:
   192e4:	f002 ba21 	b.w	1b72a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

000192e8 <sdc_hci_cmd_le_clear_resolving_list>:
   192e8:	f002 ba36 	b.w	1b758 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

000192ec <sdc_hci_cmd_le_clear_white_list>:
   192ec:	f002 ba41 	b.w	1b772 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

000192f0 <sdc_hci_cmd_le_encrypt>:
   192f0:	f002 ba49 	b.w	1b786 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

000192f4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
   192f4:	8802      	ldrh	r2, [r0, #0]
   192f6:	800a      	strh	r2, [r1, #0]
   192f8:	f002 ba4e 	b.w	1b798 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

000192fc <sdc_hci_cmd_le_long_term_key_request_reply>:
   192fc:	8802      	ldrh	r2, [r0, #0]
   192fe:	800a      	strh	r2, [r1, #0]
   19300:	f002 ba63 	b.w	1b7ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

00019304 <sdc_hci_cmd_le_rand>:
   19304:	f002 ba8b 	b.w	1b81e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00019308 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
   19308:	f002 ba8f 	b.w	1b82a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0001930c <sdc_hci_cmd_le_read_buffer_size>:
   1930c:	f7fd baa8 	b.w	16860 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00019310 <sdc_hci_cmd_le_read_channel_map>:
   19310:	f7fd bab0 	b.w	16874 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

00019314 <sdc_hci_cmd_le_read_max_data_length>:
   19314:	f002 ba92 	b.w	1b83c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

00019318 <sdc_hci_cmd_le_read_phy>:
   19318:	f002 baa0 	b.w	1b85c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0001931c <sdc_hci_cmd_le_read_remote_features>:
   1931c:	f7fd bad4 	b.w	168c8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

00019320 <sdc_hci_cmd_le_read_resolving_list_size>:
   19320:	f002 bac7 	b.w	1b8b2 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

00019324 <sdc_hci_cmd_le_read_suggested_default_data_length>:
   19324:	f7fd baf0 	b.w	16908 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

00019328 <sdc_hci_cmd_le_read_transmit_power>:
   19328:	f002 bac7 	b.w	1b8ba <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0001932c <sdc_hci_cmd_le_read_white_list_size>:
   1932c:	f002 bace 	b.w	1b8cc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00019330 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
   19330:	f002 bad0 	b.w	1b8d4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

00019334 <sdc_hci_cmd_le_remove_device_from_white_list>:
   19334:	f002 bae7 	b.w	1b906 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00019338 <sdc_hci_cmd_le_set_address_resolution_enable>:
   19338:	f002 bafa 	b.w	1b930 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0001933c <sdc_hci_cmd_le_set_adv_data>:
   1933c:	f002 bb06 	b.w	1b94c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00019340 <sdc_hci_cmd_le_set_adv_enable>:
   19340:	f002 bb19 	b.w	1b976 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

00019344 <sdc_hci_cmd_le_set_adv_params>:
   19344:	f002 bb4a 	b.w	1b9dc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00019348 <sdc_hci_cmd_le_set_data_length>:
   19348:	f002 bbdd 	b.w	1bb06 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0001934c <sdc_hci_cmd_le_set_default_phy>:
   1934c:	f7fd baec 	b.w	16928 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

00019350 <sdc_hci_cmd_le_set_event_mask>:
   19350:	b510      	push	{r4, lr}
   19352:	f7f7 fc3b 	bl	10bcc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   19356:	2000      	movs	r0, #0
   19358:	bd10      	pop	{r4, pc}

0001935a <sdc_hci_cmd_le_set_phy>:
   1935a:	f002 bbfb 	b.w	1bb54 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0001935e <sdc_hci_cmd_le_set_privacy_mode>:
   1935e:	f002 bc19 	b.w	1bb94 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

00019362 <sdc_hci_cmd_le_set_random_address>:
   19362:	f002 bc2d 	b.w	1bbc0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00019366 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
   19366:	f002 bc39 	b.w	1bbdc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0001936a <sdc_hci_cmd_le_set_scan_response_data>:
   1936a:	f002 bc40 	b.w	1bbee <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0001936e <sdc_hci_cmd_le_write_suggested_default_data_length>:
   1936e:	f002 bc53 	b.w	1bc18 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

00019372 <sdc_hci_cmd_lc_disconnect>:
   19372:	f002 b96b 	b.w	1b64c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

00019376 <sdc_hci_cmd_lc_read_remote_version_information>:
   19376:	f002 bde7 	b.w	1bf48 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
   1937a:	b570      	push	{r4, r5, r6, lr}
   1937c:	880b      	ldrh	r3, [r1, #0]
   1937e:	7f04      	ldrb	r4, [r0, #28]
   19380:	f100 0524 	add.w	r5, r0, #36	; 0x24
   19384:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
   19388:	8802      	ldrh	r2, [r0, #0]
   1938a:	4435      	add	r5, r6
   1938c:	1da4      	adds	r4, r4, #6
   1938e:	882d      	ldrh	r5, [r5, #0]
   19390:	4422      	add	r2, r4
   19392:	b292      	uxth	r2, r2
   19394:	4425      	add	r5, r4
   19396:	1e54      	subs	r4, r2, #1
   19398:	442c      	add	r4, r5
   1939a:	fb94 f4f2 	sdiv	r4, r4, r2
   1939e:	fb02 6204 	mla	r2, r2, r4, r6
   193a2:	8840      	ldrh	r0, [r0, #2]
   193a4:	b292      	uxth	r2, r2
   193a6:	4290      	cmp	r0, r2
   193a8:	d903      	bls.n	193b2 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
   193aa:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
   193ae:	4310      	orrs	r0, r2
   193b0:	e002      	b.n	193b8 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
   193b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   193b6:	4398      	bics	r0, r3
   193b8:	8008      	strh	r0, [r1, #0]
   193ba:	bd70      	pop	{r4, r5, r6, pc}
   193bc:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   193c0:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   193c4:	429a      	cmp	r2, r3
   193c6:	d107      	bne.n	193d8 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
   193c8:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   193cc:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   193d0:	4288      	cmp	r0, r1
   193d2:	d001      	beq.n	193d8 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
   193d4:	2001      	movs	r0, #1
   193d6:	4770      	bx	lr
   193d8:	2000      	movs	r0, #0
   193da:	4770      	bx	lr

000193dc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
   193dc:	b570      	push	{r4, r5, r6, lr}
   193de:	7f00      	ldrb	r0, [r0, #28]
   193e0:	461c      	mov	r4, r3
   193e2:	1d80      	adds	r0, r0, #6
   193e4:	4408      	add	r0, r1
   193e6:	4613      	mov	r3, r2
   193e8:	8809      	ldrh	r1, [r1, #0]
   193ea:	9a04      	ldr	r2, [sp, #16]
   193ec:	1cc9      	adds	r1, r1, #3
   193ee:	b289      	uxth	r1, r1
   193f0:	1915      	adds	r5, r2, r4
   193f2:	1ec0      	subs	r0, r0, #3
   193f4:	428d      	cmp	r5, r1
   193f6:	d805      	bhi.n	19404 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
   193f8:	1881      	adds	r1, r0, r2
   193fa:	4622      	mov	r2, r4
   193fc:	4618      	mov	r0, r3
   193fe:	f7ff fad2 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19402:	e000      	b.n	19406 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
   19404:	2400      	movs	r4, #0
   19406:	4620      	mov	r0, r4
   19408:	bd70      	pop	{r4, r5, r6, pc}

0001940a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
   1940a:	b570      	push	{r4, r5, r6, lr}
   1940c:	7f00      	ldrb	r0, [r0, #28]
   1940e:	461c      	mov	r4, r3
   19410:	1d80      	adds	r0, r0, #6
   19412:	4408      	add	r0, r1
   19414:	4613      	mov	r3, r2
   19416:	8809      	ldrh	r1, [r1, #0]
   19418:	9a04      	ldr	r2, [sp, #16]
   1941a:	1cc9      	adds	r1, r1, #3
   1941c:	b289      	uxth	r1, r1
   1941e:	1915      	adds	r5, r2, r4
   19420:	1ec0      	subs	r0, r0, #3
   19422:	428d      	cmp	r5, r1
   19424:	d805      	bhi.n	19432 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
   19426:	4410      	add	r0, r2
   19428:	4622      	mov	r2, r4
   1942a:	4619      	mov	r1, r3
   1942c:	f7ff fabb 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19430:	e000      	b.n	19434 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
   19432:	2400      	movs	r4, #0
   19434:	4620      	mov	r0, r4
   19436:	bd70      	pop	{r4, r5, r6, pc}

00019438 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   19438:	8881      	ldrh	r1, [r0, #4]
   1943a:	88c0      	ldrh	r0, [r0, #6]
   1943c:	4288      	cmp	r0, r1
   1943e:	d101      	bne.n	19444 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
   19440:	2001      	movs	r0, #1
   19442:	4770      	bx	lr
   19444:	2000      	movs	r0, #0
   19446:	4770      	bx	lr

00019448 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
   19448:	8881      	ldrh	r1, [r0, #4]
   1944a:	8900      	ldrh	r0, [r0, #8]
   1944c:	4288      	cmp	r0, r1
   1944e:	d101      	bne.n	19454 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
   19450:	2001      	movs	r0, #1
   19452:	4770      	bx	lr
   19454:	2000      	movs	r0, #0
   19456:	4770      	bx	lr

00019458 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   19458:	b570      	push	{r4, r5, r6, lr}
   1945a:	4604      	mov	r4, r0
   1945c:	f100 0124 	add.w	r1, r0, #36	; 0x24
   19460:	8880      	ldrh	r0, [r0, #4]
   19462:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   19466:	4401      	add	r1, r0
   19468:	8a20      	ldrh	r0, [r4, #16]
   1946a:	2800      	cmp	r0, #0
   1946c:	d01a      	beq.n	194a4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
   1946e:	89a2      	ldrh	r2, [r4, #12]
   19470:	2500      	movs	r5, #0
   19472:	4410      	add	r0, r2
   19474:	b280      	uxth	r0, r0
   19476:	81a0      	strh	r0, [r4, #12]
   19478:	880a      	ldrh	r2, [r1, #0]
   1947a:	4290      	cmp	r0, r2
   1947c:	d905      	bls.n	1948a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
   1947e:	f240 1163 	movw	r1, #355	; 0x163
   19482:	f04f 0014 	mov.w	r0, #20
   19486:	f7f7 fa1f 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1948a:	d109      	bne.n	194a0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
   1948c:	69a0      	ldr	r0, [r4, #24]
   1948e:	b108      	cbz	r0, 19494 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
   19490:	7f40      	ldrb	r0, [r0, #29]
   19492:	7088      	strb	r0, [r1, #2]
   19494:	f104 0104 	add.w	r1, r4, #4
   19498:	4620      	mov	r0, r4
   1949a:	f7ff ff6e 	bl	1937a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1949e:	81a5      	strh	r5, [r4, #12]
   194a0:	8225      	strh	r5, [r4, #16]
   194a2:	2001      	movs	r0, #1
   194a4:	bd70      	pop	{r4, r5, r6, pc}

000194a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   194a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194a8:	4604      	mov	r4, r0
   194aa:	f100 0324 	add.w	r3, r0, #36	; 0x24
   194ae:	88c0      	ldrh	r0, [r0, #6]
   194b0:	460e      	mov	r6, r1
   194b2:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   194b6:	8a60      	ldrh	r0, [r4, #18]
   194b8:	19d9      	adds	r1, r3, r7
   194ba:	b108      	cbz	r0, 194c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
   194bc:	42b0      	cmp	r0, r6
   194be:	d201      	bcs.n	194c4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
   194c0:	2000      	movs	r0, #0
   194c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   194c4:	89e0      	ldrh	r0, [r4, #14]
   194c6:	2500      	movs	r5, #0
   194c8:	b140      	cbz	r0, 194dc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
   194ca:	f8b1 c000 	ldrh.w	ip, [r1]
   194ce:	4560      	cmp	r0, ip
   194d0:	d008      	beq.n	194e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
   194d2:	f240 214b 	movw	r1, #587	; 0x24b
   194d6:	2014      	movs	r0, #20
   194d8:	f7f7 f9f6 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   194dc:	7f60      	ldrb	r0, [r4, #29]
   194de:	7088      	strb	r0, [r1, #2]
   194e0:	800d      	strh	r5, [r1, #0]
   194e2:	e00e      	b.n	19502 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   194e4:	f894 c01c 	ldrb.w	ip, [r4, #28]
   194e8:	4418      	add	r0, r3
   194ea:	f10c 0c06 	add.w	ip, ip, #6
   194ee:	44bc      	add	ip, r7
   194f0:	4460      	add	r0, ip
   194f2:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   194f6:	f820 cc03 	strh.w	ip, [r0, #-3]
   194fa:	f894 c020 	ldrb.w	ip, [r4, #32]
   194fe:	f800 cc01 	strb.w	ip, [r0, #-1]
   19502:	89e0      	ldrh	r0, [r4, #14]
   19504:	4430      	add	r0, r6
   19506:	81e0      	strh	r0, [r4, #14]
   19508:	8808      	ldrh	r0, [r1, #0]
   1950a:	4430      	add	r0, r6
   1950c:	8008      	strh	r0, [r1, #0]
   1950e:	b19a      	cbz	r2, 19538 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
   19510:	1da1      	adds	r1, r4, #6
   19512:	4620      	mov	r0, r4
   19514:	f7ff ff31 	bl	1937a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   19518:	81e5      	strh	r5, [r4, #14]
   1951a:	7f60      	ldrb	r0, [r4, #29]
   1951c:	1c40      	adds	r0, r0, #1
   1951e:	7760      	strb	r0, [r4, #29]
   19520:	7da0      	ldrb	r0, [r4, #22]
   19522:	f88d 0000 	strb.w	r0, [sp]
   19526:	9800      	ldr	r0, [sp, #0]
   19528:	9000      	str	r0, [sp, #0]
   1952a:	f89d 0000 	ldrb.w	r0, [sp]
   1952e:	b178      	cbz	r0, 19550 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   19530:	88e0      	ldrh	r0, [r4, #6]
   19532:	82a0      	strh	r0, [r4, #20]
   19534:	75a5      	strb	r5, [r4, #22]
   19536:	e00b      	b.n	19550 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
   19538:	7f20      	ldrb	r0, [r4, #28]
   1953a:	89e1      	ldrh	r1, [r4, #14]
   1953c:	1d80      	adds	r0, r0, #6
   1953e:	4438      	add	r0, r7
   19540:	4419      	add	r1, r3
   19542:	4408      	add	r0, r1
   19544:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   19548:	83e1      	strh	r1, [r4, #30]
   1954a:	7880      	ldrb	r0, [r0, #2]
   1954c:	f884 0020 	strb.w	r0, [r4, #32]
   19550:	8265      	strh	r5, [r4, #18]
   19552:	2001      	movs	r0, #1
   19554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019556 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   19556:	b510      	push	{r4, lr}
   19558:	4604      	mov	r4, r0
   1955a:	88c0      	ldrh	r0, [r0, #6]
   1955c:	88a1      	ldrh	r1, [r4, #4]
   1955e:	4281      	cmp	r1, r0
   19560:	d007      	beq.n	19572 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   19562:	89a0      	ldrh	r0, [r4, #12]
   19564:	b928      	cbnz	r0, 19572 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   19566:	8a20      	ldrh	r0, [r4, #16]
   19568:	b918      	cbnz	r0, 19572 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
   1956a:	88a0      	ldrh	r0, [r4, #4]
   1956c:	8aa1      	ldrh	r1, [r4, #20]
   1956e:	4288      	cmp	r0, r1
   19570:	d101      	bne.n	19576 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
   19572:	2000      	movs	r0, #0
   19574:	bd10      	pop	{r4, pc}
   19576:	1d21      	adds	r1, r4, #4
   19578:	4620      	mov	r0, r4
   1957a:	f7ff fefe 	bl	1937a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1957e:	2000      	movs	r0, #0
   19580:	8220      	strh	r0, [r4, #16]
   19582:	2001      	movs	r0, #1
   19584:	bd10      	pop	{r4, pc}

00019586 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
   19586:	b510      	push	{r4, lr}
   19588:	4604      	mov	r4, r0
   1958a:	f100 0224 	add.w	r2, r0, #36	; 0x24
   1958e:	88c0      	ldrh	r0, [r0, #6]
   19590:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   19594:	4402      	add	r2, r0
   19596:	8820      	ldrh	r0, [r4, #0]
   19598:	2845      	cmp	r0, #69	; 0x45
   1959a:	d200      	bcs.n	1959e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
   1959c:	2045      	movs	r0, #69	; 0x45
   1959e:	4288      	cmp	r0, r1
   195a0:	d204      	bcs.n	195ac <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
   195a2:	f240 1119 	movw	r1, #281	; 0x119
   195a6:	2014      	movs	r0, #20
   195a8:	f7f7 f98e 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   195ac:	7de0      	ldrb	r0, [r4, #23]
   195ae:	2800      	cmp	r0, #0
   195b0:	d003      	beq.n	195ba <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
   195b2:	8810      	ldrh	r0, [r2, #0]
   195b4:	4288      	cmp	r0, r1
   195b6:	d201      	bcs.n	195bc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
   195b8:	2000      	movs	r0, #0
   195ba:	bd10      	pop	{r4, pc}
   195bc:	8011      	strh	r1, [r2, #0]
   195be:	1da1      	adds	r1, r4, #6
   195c0:	4620      	mov	r0, r4
   195c2:	f7ff feda 	bl	1937a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   195c6:	2000      	movs	r0, #0
   195c8:	75e0      	strb	r0, [r4, #23]
   195ca:	2001      	movs	r0, #1
   195cc:	bd10      	pop	{r4, pc}

000195ce <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
   195ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195d2:	8941      	ldrh	r1, [r0, #10]
   195d4:	8886      	ldrh	r6, [r0, #4]
   195d6:	4604      	mov	r4, r0
   195d8:	2500      	movs	r5, #0
   195da:	f100 070a 	add.w	r7, r0, #10
   195de:	e006      	b.n	195ee <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
   195e0:	4639      	mov	r1, r7
   195e2:	4620      	mov	r0, r4
   195e4:	f7ff fec9 	bl	1937a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   195e8:	1c6d      	adds	r5, r5, #1
   195ea:	8961      	ldrh	r1, [r4, #10]
   195ec:	b2ad      	uxth	r5, r5
   195ee:	42b1      	cmp	r1, r6
   195f0:	d1f6      	bne.n	195e0 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
   195f2:	4628      	mov	r0, r5
   195f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000195f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   195f8:	b530      	push	{r4, r5, lr}
   195fa:	88c4      	ldrh	r4, [r0, #6]
   195fc:	8881      	ldrh	r1, [r0, #4]
   195fe:	f100 0224 	add.w	r2, r0, #36	; 0x24
   19602:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   19606:	4413      	add	r3, r2
   19608:	8882      	ldrh	r2, [r0, #4]
   1960a:	8a85      	ldrh	r5, [r0, #20]
   1960c:	42aa      	cmp	r2, r5
   1960e:	d012      	beq.n	19636 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   19610:	42a1      	cmp	r1, r4
   19612:	d010      	beq.n	19636 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   19614:	8981      	ldrh	r1, [r0, #12]
   19616:	b971      	cbnz	r1, 19636 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
   19618:	6982      	ldr	r2, [r0, #24]
   1961a:	b172      	cbz	r2, 1963a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   1961c:	4610      	mov	r0, r2
   1961e:	f7ff ff13 	bl	19448 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
   19622:	b950      	cbnz	r0, 1963a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   19624:	8910      	ldrh	r0, [r2, #8]
   19626:	3224      	adds	r2, #36	; 0x24
   19628:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
   1962c:	4410      	add	r0, r2
   1962e:	7899      	ldrb	r1, [r3, #2]
   19630:	7880      	ldrb	r0, [r0, #2]
   19632:	4288      	cmp	r0, r1
   19634:	d101      	bne.n	1963a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
   19636:	2000      	movs	r0, #0
   19638:	bd30      	pop	{r4, r5, pc}
   1963a:	4618      	mov	r0, r3
   1963c:	bd30      	pop	{r4, r5, pc}

0001963e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   1963e:	7f00      	ldrb	r0, [r0, #28]
   19640:	1d80      	adds	r0, r0, #6
   19642:	4408      	add	r0, r1
   19644:	1ec0      	subs	r0, r0, #3
   19646:	6010      	str	r0, [r2, #0]
   19648:	8808      	ldrh	r0, [r1, #0]
   1964a:	4770      	bx	lr

0001964c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
   1964c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19650:	460e      	mov	r6, r1
   19652:	88c1      	ldrh	r1, [r0, #6]
   19654:	8902      	ldrh	r2, [r0, #8]
   19656:	4604      	mov	r4, r0
   19658:	f100 0824 	add.w	r8, r0, #36	; 0x24
   1965c:	8800      	ldrh	r0, [r0, #0]
   1965e:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
   19662:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
   19666:	2845      	cmp	r0, #69	; 0x45
   19668:	d200      	bcs.n	1966c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
   1966a:	2045      	movs	r0, #69	; 0x45
   1966c:	42b0      	cmp	r0, r6
   1966e:	d203      	bcs.n	19678 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
   19670:	21db      	movs	r1, #219	; 0xdb
   19672:	2014      	movs	r0, #20
   19674:	f7f7 f928 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19678:	4610      	mov	r0, r2
   1967a:	f7ff fe9f 	bl	193bc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   1967e:	b110      	cbz	r0, 19686 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
   19680:	2000      	movs	r0, #0
   19682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19686:	42af      	cmp	r7, r5
   19688:	d908      	bls.n	1969c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
   1968a:	7f21      	ldrb	r1, [r4, #28]
   1968c:	1b78      	subs	r0, r7, r5
   1968e:	1a40      	subs	r0, r0, r1
   19690:	1f80      	subs	r0, r0, #6
   19692:	4286      	cmp	r6, r0
   19694:	dd02      	ble.n	1969c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
   19696:	2000      	movs	r0, #0
   19698:	75e0      	strb	r0, [r4, #23]
   1969a:	e7f1      	b.n	19680 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
   1969c:	eb08 0005 	add.w	r0, r8, r5
   196a0:	2101      	movs	r1, #1
   196a2:	8006      	strh	r6, [r0, #0]
   196a4:	75e1      	strb	r1, [r4, #23]
   196a6:	e7ec      	b.n	19682 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

000196a8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   196a8:	b538      	push	{r3, r4, r5, lr}
   196aa:	88c4      	ldrh	r4, [r0, #6]
   196ac:	8881      	ldrh	r1, [r0, #4]
   196ae:	f100 0224 	add.w	r2, r0, #36	; 0x24
   196b2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   196b6:	441a      	add	r2, r3
   196b8:	42a1      	cmp	r1, r4
   196ba:	d010      	beq.n	196de <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   196bc:	8983      	ldrh	r3, [r0, #12]
   196be:	8a05      	ldrh	r5, [r0, #16]
   196c0:	8812      	ldrh	r2, [r2, #0]
   196c2:	442b      	add	r3, r5
   196c4:	4293      	cmp	r3, r2
   196c6:	d308      	bcc.n	196da <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
   196c8:	f8ad 1000 	strh.w	r1, [sp]
   196cc:	4669      	mov	r1, sp
   196ce:	f7ff fe54 	bl	1937a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   196d2:	f8bd 0000 	ldrh.w	r0, [sp]
   196d6:	42a0      	cmp	r0, r4
   196d8:	d001      	beq.n	196de <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   196da:	2001      	movs	r0, #1
   196dc:	bd38      	pop	{r3, r4, r5, pc}
   196de:	2000      	movs	r0, #0
   196e0:	bd38      	pop	{r3, r4, r5, pc}

000196e2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   196e2:	b570      	push	{r4, r5, r6, lr}
   196e4:	88c6      	ldrh	r6, [r0, #6]
   196e6:	8885      	ldrh	r5, [r0, #4]
   196e8:	4603      	mov	r3, r0
   196ea:	f100 0424 	add.w	r4, r0, #36	; 0x24
   196ee:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
   196f2:	4420      	add	r0, r4
   196f4:	42b5      	cmp	r5, r6
   196f6:	d102      	bne.n	196fe <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
   196f8:	2000      	movs	r0, #0
   196fa:	8218      	strh	r0, [r3, #16]
   196fc:	bd70      	pop	{r4, r5, r6, pc}
   196fe:	8804      	ldrh	r4, [r0, #0]
   19700:	899d      	ldrh	r5, [r3, #12]
   19702:	7f1e      	ldrb	r6, [r3, #28]
   19704:	1b64      	subs	r4, r4, r5
   19706:	4435      	add	r5, r6
   19708:	4428      	add	r0, r5
   1970a:	880d      	ldrh	r5, [r1, #0]
   1970c:	b2a4      	uxth	r4, r4
   1970e:	1cc0      	adds	r0, r0, #3
   19710:	42a5      	cmp	r5, r4
   19712:	d900      	bls.n	19716 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
   19714:	800c      	strh	r4, [r1, #0]
   19716:	899c      	ldrh	r4, [r3, #12]
   19718:	b124      	cbz	r4, 19724 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
   1971a:	2400      	movs	r4, #0
   1971c:	7014      	strb	r4, [r2, #0]
   1971e:	8809      	ldrh	r1, [r1, #0]
   19720:	8219      	strh	r1, [r3, #16]
   19722:	bd70      	pop	{r4, r5, r6, pc}
   19724:	2401      	movs	r4, #1
   19726:	e7f9      	b.n	1971c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

00019728 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
   19728:	b508      	push	{r3, lr}
   1972a:	8a81      	ldrh	r1, [r0, #20]
   1972c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   19730:	3aff      	subs	r2, #255	; 0xff
   19732:	d008      	beq.n	19746 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
   19734:	7d82      	ldrb	r2, [r0, #22]
   19736:	f88d 2000 	strb.w	r2, [sp]
   1973a:	9a00      	ldr	r2, [sp, #0]
   1973c:	9200      	str	r2, [sp, #0]
   1973e:	f89d 2000 	ldrb.w	r2, [sp]
   19742:	b952      	cbnz	r2, 1975a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
   19744:	e004      	b.n	19750 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
   19746:	f44f 7162 	mov.w	r1, #904	; 0x388
   1974a:	2014      	movs	r0, #20
   1974c:	f7f7 f8bc 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19750:	8880      	ldrh	r0, [r0, #4]
   19752:	4281      	cmp	r1, r0
   19754:	d101      	bne.n	1975a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
   19756:	2000      	movs	r0, #0
   19758:	bd08      	pop	{r3, pc}
   1975a:	2001      	movs	r0, #1
   1975c:	bd08      	pop	{r3, pc}

0001975e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
   1975e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19762:	8281      	strh	r1, [r0, #20]
   19764:	2100      	movs	r1, #0
   19766:	7581      	strb	r1, [r0, #22]
   19768:	4770      	bx	lr

0001976a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
   1976a:	b510      	push	{r4, lr}
   1976c:	8a81      	ldrh	r1, [r0, #20]
   1976e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
   19772:	3aff      	subs	r2, #255	; 0xff
   19774:	d004      	beq.n	19780 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
   19776:	f44f 7159 	mov.w	r1, #868	; 0x364
   1977a:	2014      	movs	r0, #20
   1977c:	f7f7 f8a4 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19780:	88c1      	ldrh	r1, [r0, #6]
   19782:	8281      	strh	r1, [r0, #20]
   19784:	89c1      	ldrh	r1, [r0, #14]
   19786:	b109      	cbz	r1, 1978c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
   19788:	2101      	movs	r1, #1
   1978a:	e000      	b.n	1978e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
   1978c:	2100      	movs	r1, #0
   1978e:	7581      	strb	r1, [r0, #22]
   19790:	bd10      	pop	{r4, pc}

00019792 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   19792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19796:	461d      	mov	r5, r3
   19798:	4616      	mov	r6, r2
   1979a:	9f06      	ldr	r7, [sp, #24]
   1979c:	460b      	mov	r3, r1
   1979e:	4604      	mov	r4, r0
   197a0:	463a      	mov	r2, r7
   197a2:	4629      	mov	r1, r5
   197a4:	4630      	mov	r0, r6
   197a6:	f000 f84f 	bl	19848 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   197aa:	4283      	cmp	r3, r0
   197ac:	d201      	bcs.n	197b2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
   197ae:	21a8      	movs	r1, #168	; 0xa8
   197b0:	e018      	b.n	197e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
   197b2:	1ce0      	adds	r0, r4, #3
   197b4:	f020 0103 	bic.w	r1, r0, #3
   197b8:	4620      	mov	r0, r4
   197ba:	42a1      	cmp	r1, r4
   197bc:	d001      	beq.n	197c2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
   197be:	21a9      	movs	r1, #169	; 0xa9
   197c0:	e010      	b.n	197e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
   197c2:	2224      	movs	r2, #36	; 0x24
   197c4:	2100      	movs	r1, #0
   197c6:	f7ff f968 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   197ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
   197ce:	82a0      	strh	r0, [r4, #20]
   197d0:	19a8      	adds	r0, r5, r6
   197d2:	1d80      	adds	r0, r0, #6
   197d4:	4378      	muls	r0, r7
   197d6:	b280      	uxth	r0, r0
   197d8:	7725      	strb	r5, [r4, #28]
   197da:	8060      	strh	r0, [r4, #2]
   197dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   197e0:	d903      	bls.n	197ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
   197e2:	21af      	movs	r1, #175	; 0xaf
   197e4:	2014      	movs	r0, #20
   197e6:	f7f7 f86f 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   197ea:	8026      	strh	r6, [r4, #0]
   197ec:	2000      	movs	r0, #0
   197ee:	7760      	strb	r0, [r4, #29]
   197f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000197f4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
   197f4:	6181      	str	r1, [r0, #24]
   197f6:	6188      	str	r0, [r1, #24]
   197f8:	4770      	bx	lr

000197fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   197fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197fe:	460b      	mov	r3, r1
   19800:	4604      	mov	r4, r0
   19802:	f100 0124 	add.w	r1, r0, #36	; 0x24
   19806:	8905      	ldrh	r5, [r0, #8]
   19808:	8946      	ldrh	r6, [r0, #10]
   1980a:	8880      	ldrh	r0, [r0, #4]
   1980c:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
   19810:	4439      	add	r1, r7
   19812:	460f      	mov	r7, r1
   19814:	4285      	cmp	r5, r0
   19816:	d102      	bne.n	1981e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
   19818:	2000      	movs	r0, #0
   1981a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1981e:	b10a      	cbz	r2, 19824 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
   19820:	1cc8      	adds	r0, r1, #3
   19822:	6010      	str	r0, [r2, #0]
   19824:	b123      	cbz	r3, 19830 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
   19826:	7f22      	ldrb	r2, [r4, #28]
   19828:	1cf9      	adds	r1, r7, #3
   1982a:	4618      	mov	r0, r3
   1982c:	f7ff f8bb 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19830:	883f      	ldrh	r7, [r7, #0]
   19832:	f104 0108 	add.w	r1, r4, #8
   19836:	4620      	mov	r0, r4
   19838:	f7ff fd9f 	bl	1937a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1983c:	42b5      	cmp	r5, r6
   1983e:	d101      	bne.n	19844 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
   19840:	8920      	ldrh	r0, [r4, #8]
   19842:	8160      	strh	r0, [r4, #10]
   19844:	4638      	mov	r0, r7
   19846:	e7e8      	b.n	1981a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

00019848 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   19848:	4401      	add	r1, r0
   1984a:	1d89      	adds	r1, r1, #6
   1984c:	4351      	muls	r1, r2
   1984e:	b28a      	uxth	r2, r1
   19850:	2100      	movs	r1, #0
   19852:	2845      	cmp	r0, #69	; 0x45
   19854:	d201      	bcs.n	1985a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
   19856:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
   1985a:	3224      	adds	r2, #36	; 0x24
   1985c:	1850      	adds	r0, r2, r1
   1985e:	b280      	uxth	r0, r0
   19860:	4770      	bx	lr

00019862 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   19862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19866:	4688      	mov	r8, r1
   19868:	88c1      	ldrh	r1, [r0, #6]
   1986a:	4604      	mov	r4, r0
   1986c:	8900      	ldrh	r0, [r0, #8]
   1986e:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
   19872:	f104 0524 	add.w	r5, r4, #36	; 0x24
   19876:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   1987a:	eb05 0906 	add.w	r9, r5, r6
   1987e:	f7ff fd9d 	bl	193bc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   19882:	2200      	movs	r2, #0
   19884:	b998      	cbnz	r0, 198ae <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
   19886:	8820      	ldrh	r0, [r4, #0]
   19888:	2845      	cmp	r0, #69	; 0x45
   1988a:	d200      	bcs.n	1988e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
   1988c:	2045      	movs	r0, #69	; 0x45
   1988e:	42b7      	cmp	r7, r6
   19890:	d906      	bls.n	198a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   19892:	7f23      	ldrb	r3, [r4, #28]
   19894:	1bb9      	subs	r1, r7, r6
   19896:	1ac9      	subs	r1, r1, r3
   19898:	1f89      	subs	r1, r1, #6
   1989a:	4281      	cmp	r1, r0
   1989c:	da00      	bge.n	198a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   1989e:	4608      	mov	r0, r1
   198a0:	89e1      	ldrh	r1, [r4, #14]
   198a2:	b111      	cbz	r1, 198aa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
   198a4:	f8b9 3000 	ldrh.w	r3, [r9]
   198a8:	1ac0      	subs	r0, r0, r3
   198aa:	4540      	cmp	r0, r8
   198ac:	da03      	bge.n	198b6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
   198ae:	8262      	strh	r2, [r4, #18]
   198b0:	2000      	movs	r0, #0
   198b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   198b6:	7f20      	ldrb	r0, [r4, #28]
   198b8:	4429      	add	r1, r5
   198ba:	1d80      	adds	r0, r0, #6
   198bc:	4430      	add	r0, r6
   198be:	4408      	add	r0, r1
   198c0:	f8a4 8012 	strh.w	r8, [r4, #18]
   198c4:	1ec0      	subs	r0, r0, #3
   198c6:	e7f4      	b.n	198b2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

000198c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   198c8:	2100      	movs	r1, #0
   198ca:	81c1      	strh	r1, [r0, #14]
   198cc:	8241      	strh	r1, [r0, #18]
   198ce:	7581      	strb	r1, [r0, #22]
   198d0:	4770      	bx	lr

000198d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   198d2:	b570      	push	{r4, r5, r6, lr}
   198d4:	2300      	movs	r3, #0
   198d6:	2908      	cmp	r1, #8
   198d8:	d204      	bcs.n	198e4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
   198da:	f240 11cb 	movw	r1, #459	; 0x1cb
   198de:	2015      	movs	r0, #21
   198e0:	f7f6 fff2 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   198e4:	6802      	ldr	r2, [r0, #0]
   198e6:	b90a      	cbnz	r2, 198ec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   198e8:	e01e      	b.n	19928 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   198ea:	4610      	mov	r0, r2
   198ec:	6802      	ldr	r2, [r0, #0]
   198ee:	8893      	ldrh	r3, [r2, #4]
   198f0:	428b      	cmp	r3, r1
   198f2:	d002      	beq.n	198fa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
   198f4:	6813      	ldr	r3, [r2, #0]
   198f6:	2b00      	cmp	r3, #0
   198f8:	d1f7      	bne.n	198ea <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
   198fa:	8894      	ldrh	r4, [r2, #4]
   198fc:	4613      	mov	r3, r2
   198fe:	428c      	cmp	r4, r1
   19900:	d101      	bne.n	19906 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
   19902:	6811      	ldr	r1, [r2, #0]
   19904:	e00d      	b.n	19922 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
   19906:	f101 0508 	add.w	r5, r1, #8
   1990a:	b2ae      	uxth	r6, r5
   1990c:	2500      	movs	r5, #0
   1990e:	42b4      	cmp	r4, r6
   19910:	d309      	bcc.n	19926 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
   19912:	1a64      	subs	r4, r4, r1
   19914:	4411      	add	r1, r2
   19916:	600d      	str	r5, [r1, #0]
   19918:	808c      	strh	r4, [r1, #4]
   1991a:	6802      	ldr	r2, [r0, #0]
   1991c:	6812      	ldr	r2, [r2, #0]
   1991e:	6002      	str	r2, [r0, #0]
   19920:	600a      	str	r2, [r1, #0]
   19922:	6001      	str	r1, [r0, #0]
   19924:	e000      	b.n	19928 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   19926:	2300      	movs	r3, #0
   19928:	4618      	mov	r0, r3
   1992a:	bd70      	pop	{r4, r5, r6, pc}

0001992c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   1992c:	b510      	push	{r4, lr}
   1992e:	000c      	movs	r4, r1
   19930:	d006      	beq.n	19940 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
   19932:	2c08      	cmp	r4, #8
   19934:	d209      	bcs.n	1994a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
   19936:	f240 1195 	movw	r1, #405	; 0x195
   1993a:	2015      	movs	r0, #21
   1993c:	f7f6 ffc4 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19940:	b108      	cbz	r0, 19946 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   19942:	2100      	movs	r1, #0
   19944:	6001      	str	r1, [r0, #0]
   19946:	2000      	movs	r0, #0
   19948:	bd10      	pop	{r4, pc}
   1994a:	b118      	cbz	r0, 19954 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
   1994c:	b2a1      	uxth	r1, r4
   1994e:	6800      	ldr	r0, [r0, #0]
   19950:	f000 f814 	bl	1997c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   19954:	1d20      	adds	r0, r4, #4
   19956:	bd10      	pop	{r4, pc}

00019958 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   19958:	2100      	movs	r1, #0
   1995a:	6802      	ldr	r2, [r0, #0]
   1995c:	e003      	b.n	19966 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   1995e:	8893      	ldrh	r3, [r2, #4]
   19960:	6812      	ldr	r2, [r2, #0]
   19962:	4419      	add	r1, r3
   19964:	b289      	uxth	r1, r1
   19966:	2a00      	cmp	r2, #0
   19968:	d1f9      	bne.n	1995e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   1996a:	f000 b807 	b.w	1997c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0001996e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   1996e:	2300      	movs	r3, #0
   19970:	600b      	str	r3, [r1, #0]
   19972:	808a      	strh	r2, [r1, #4]
   19974:	6802      	ldr	r2, [r0, #0]
   19976:	600a      	str	r2, [r1, #0]
   19978:	6001      	str	r1, [r0, #0]
   1997a:	4770      	bx	lr
   1997c:	2300      	movs	r3, #0
   1997e:	6043      	str	r3, [r0, #4]
   19980:	1d02      	adds	r2, r0, #4
   19982:	8101      	strh	r1, [r0, #8]
   19984:	6002      	str	r2, [r0, #0]
   19986:	4770      	bx	lr

00019988 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
   19988:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
   1998c:	3bff      	subs	r3, #255	; 0xff
   1998e:	d001      	beq.n	19994 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
   19990:	2902      	cmp	r1, #2
   19992:	d301      	bcc.n	19998 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
   19994:	2000      	movs	r0, #0
   19996:	4770      	bx	lr
   19998:	f7f7 ba50 	b.w	10e3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0001999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   1999c:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   199a0:	3aff      	subs	r2, #255	; 0xff
   199a2:	d001      	beq.n	199a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   199a4:	2902      	cmp	r1, #2
   199a6:	d301      	bcc.n	199ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   199a8:	2000      	movs	r0, #0
   199aa:	4770      	bx	lr
   199ac:	f7f7 ba80 	b.w	10eb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

000199b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   199b0:	b570      	push	{r4, r5, r6, lr}
   199b2:	4605      	mov	r5, r0
   199b4:	460c      	mov	r4, r1
   199b6:	4608      	mov	r0, r1
   199b8:	f000 f973 	bl	19ca2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   199bc:	b108      	cbz	r0, 199c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   199be:	2010      	movs	r0, #16
   199c0:	bd70      	pop	{r4, r5, r6, pc}
   199c2:	2d02      	cmp	r5, #2
   199c4:	d301      	bcc.n	199ca <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
   199c6:	2007      	movs	r0, #7
   199c8:	bd70      	pop	{r4, r5, r6, pc}
   199ca:	7025      	strb	r5, [r4, #0]
   199cc:	2000      	movs	r0, #0
   199ce:	8060      	strh	r0, [r4, #2]
   199d0:	bd70      	pop	{r4, r5, r6, pc}
   199d2:	b510      	push	{r4, lr}
   199d4:	4604      	mov	r4, r0
   199d6:	f7f7 fab7 	bl	10f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
   199da:	42a0      	cmp	r0, r4
   199dc:	d901      	bls.n	199e2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
   199de:	2001      	movs	r0, #1
   199e0:	bd10      	pop	{r4, pc}
   199e2:	2000      	movs	r0, #0
   199e4:	bd10      	pop	{r4, pc}
   199e6:	4770      	bx	lr

000199e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   199e8:	b570      	push	{r4, r5, r6, lr}
   199ea:	460e      	mov	r6, r1
   199ec:	461d      	mov	r5, r3
   199ee:	4611      	mov	r1, r2
   199f0:	f000 f811 	bl	19a16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   199f4:	4604      	mov	r4, r0
   199f6:	4629      	mov	r1, r5
   199f8:	4630      	mov	r0, r6
   199fa:	f000 f803 	bl	19a04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   199fe:	4420      	add	r0, r4
   19a00:	1d00      	adds	r0, r0, #4
   19a02:	bd70      	pop	{r4, r5, r6, pc}
   19a04:	b510      	push	{r4, lr}
   19a06:	460a      	mov	r2, r1
   19a08:	2101      	movs	r1, #1
   19a0a:	f7ff ff1d 	bl	19848 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   19a0e:	1cc0      	adds	r0, r0, #3
   19a10:	f020 0003 	bic.w	r0, r0, #3
   19a14:	bd10      	pop	{r4, pc}
   19a16:	b510      	push	{r4, lr}
   19a18:	460a      	mov	r2, r1
   19a1a:	2101      	movs	r1, #1
   19a1c:	f7ff ff14 	bl	19848 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   19a20:	1cc0      	adds	r0, r0, #3
   19a22:	f020 0003 	bic.w	r0, r0, #3
   19a26:	bd10      	pop	{r4, pc}
   19a28:	b109      	cbz	r1, 19a2e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
   19a2a:	2100      	movs	r1, #0
   19a2c:	e000      	b.n	19a30 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
   19a2e:	2102      	movs	r1, #2
   19a30:	1843      	adds	r3, r0, r1
   19a32:	7d1a      	ldrb	r2, [r3, #20]
   19a34:	2a02      	cmp	r2, #2
   19a36:	d008      	beq.n	19a4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
   19a38:	7d5b      	ldrb	r3, [r3, #21]
   19a3a:	2b02      	cmp	r3, #2
   19a3c:	d009      	beq.n	19a52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
   19a3e:	2a03      	cmp	r2, #3
   19a40:	d003      	beq.n	19a4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
   19a42:	2b03      	cmp	r3, #3
   19a44:	d005      	beq.n	19a52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
   19a46:	2000      	movs	r0, #0
   19a48:	4770      	bx	lr
   19a4a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19a4e:	8b00      	ldrh	r0, [r0, #24]
   19a50:	4770      	bx	lr
   19a52:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19a56:	8b40      	ldrh	r0, [r0, #26]
   19a58:	4770      	bx	lr
   19a5a:	b109      	cbz	r1, 19a60 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
   19a5c:	2100      	movs	r1, #0
   19a5e:	e000      	b.n	19a62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   19a60:	2102      	movs	r1, #2
   19a62:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19a66:	8b01      	ldrh	r1, [r0, #24]
   19a68:	b911      	cbnz	r1, 19a70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
   19a6a:	8b40      	ldrh	r0, [r0, #26]
   19a6c:	2800      	cmp	r0, #0
   19a6e:	d000      	beq.n	19a72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
   19a70:	2001      	movs	r0, #1
   19a72:	4770      	bx	lr
   19a74:	b538      	push	{r3, r4, r5, lr}
   19a76:	7883      	ldrb	r3, [r0, #2]
   19a78:	f88d 3000 	strb.w	r3, [sp]
   19a7c:	9b00      	ldr	r3, [sp, #0]
   19a7e:	9300      	str	r3, [sp, #0]
   19a80:	f89d 3000 	ldrb.w	r3, [sp]
   19a84:	b953      	cbnz	r3, 19a9c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
   19a86:	b10a      	cbz	r2, 19a8c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
   19a88:	2300      	movs	r3, #0
   19a8a:	e000      	b.n	19a8e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
   19a8c:	2302      	movs	r3, #2
   19a8e:	18c2      	adds	r2, r0, r3
   19a90:	7d14      	ldrb	r4, [r2, #20]
   19a92:	2c02      	cmp	r4, #2
   19a94:	d004      	beq.n	19aa0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
   19a96:	7d52      	ldrb	r2, [r2, #21]
   19a98:	2a02      	cmp	r2, #2
   19a9a:	d004      	beq.n	19aa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
   19a9c:	2000      	movs	r0, #0
   19a9e:	bd38      	pop	{r3, r4, r5, pc}
   19aa0:	461a      	mov	r2, r3
   19aa2:	1c5b      	adds	r3, r3, #1
   19aa4:	e000      	b.n	19aa8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
   19aa6:	1c5a      	adds	r2, r3, #1
   19aa8:	b181      	cbz	r1, 19acc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
   19aaa:	18c5      	adds	r5, r0, r3
   19aac:	2400      	movs	r4, #0
   19aae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   19ab2:	752c      	strb	r4, [r5, #20]
   19ab4:	831c      	strh	r4, [r3, #24]
   19ab6:	2303      	movs	r3, #3
   19ab8:	1884      	adds	r4, r0, r2
   19aba:	7523      	strb	r3, [r4, #20]
   19abc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   19ac0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
   19ac4:	685b      	ldr	r3, [r3, #4]
   19ac6:	600b      	str	r3, [r1, #0]
   19ac8:	8b00      	ldrh	r0, [r0, #24]
   19aca:	8088      	strh	r0, [r1, #4]
   19acc:	2001      	movs	r0, #1
   19ace:	bd38      	pop	{r3, r4, r5, pc}
   19ad0:	b510      	push	{r4, lr}
   19ad2:	b109      	cbz	r1, 19ad8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
   19ad4:	2100      	movs	r1, #0
   19ad6:	e000      	b.n	19ada <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
   19ad8:	2102      	movs	r1, #2
   19ada:	1843      	adds	r3, r0, r1
   19adc:	7d1c      	ldrb	r4, [r3, #20]
   19ade:	4294      	cmp	r4, r2
   19ae0:	d103      	bne.n	19aea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
   19ae2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19ae6:	8b00      	ldrh	r0, [r0, #24]
   19ae8:	bd10      	pop	{r4, pc}
   19aea:	7d5b      	ldrb	r3, [r3, #21]
   19aec:	4293      	cmp	r3, r2
   19aee:	d103      	bne.n	19af8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
   19af0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   19af4:	8b40      	ldrh	r0, [r0, #26]
   19af6:	bd10      	pop	{r4, pc}
   19af8:	2000      	movs	r0, #0
   19afa:	bd10      	pop	{r4, pc}
   19afc:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   19b00:	d201      	bcs.n	19b06 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
   19b02:	0841      	lsrs	r1, r0, #1
   19b04:	e000      	b.n	19b08 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
   19b06:	21ff      	movs	r1, #255	; 0xff
   19b08:	1a40      	subs	r0, r0, r1
   19b0a:	f240 6172 	movw	r1, #1650	; 0x672
   19b0e:	4288      	cmp	r0, r1
   19b10:	db00      	blt.n	19b14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
   19b12:	4608      	mov	r0, r1
   19b14:	b280      	uxth	r0, r0
   19b16:	4770      	bx	lr

00019b18 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
   19b18:	2101      	movs	r1, #1
   19b1a:	f7ff bf85 	b.w	19a28 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

00019b1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
   19b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b22:	4606      	mov	r6, r0
   19b24:	f342 0780 	sbfx	r7, r2, #2, #1
   19b28:	7848      	ldrb	r0, [r1, #1]
   19b2a:	460c      	mov	r4, r1
   19b2c:	f022 0504 	bic.w	r5, r2, #4
   19b30:	1c7f      	adds	r7, r7, #1
   19b32:	b100      	cbz	r0, 19b36 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
   19b34:	b90d      	cbnz	r5, 19b3a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
   19b36:	4328      	orrs	r0, r5
   19b38:	d104      	bne.n	19b44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
   19b3a:	b145      	cbz	r5, 19b4e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
   19b3c:	2100      	movs	r1, #0
   19b3e:	4620      	mov	r0, r4
   19b40:	f7f7 fb0a 	bl	11158 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   19b44:	2101      	movs	r1, #1
   19b46:	70a1      	strb	r1, [r4, #2]
   19b48:	b11f      	cbz	r7, 19b52 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
   19b4a:	2000      	movs	r0, #0
   19b4c:	e002      	b.n	19b54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
   19b4e:	2101      	movs	r1, #1
   19b50:	e7f5      	b.n	19b3e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
   19b52:	2002      	movs	r0, #2
   19b54:	1822      	adds	r2, r4, r0
   19b56:	7d12      	ldrb	r2, [r2, #20]
   19b58:	2a03      	cmp	r2, #3
   19b5a:	d102      	bne.n	19b62 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
   19b5c:	2d02      	cmp	r5, #2
   19b5e:	d000      	beq.n	19b62 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
   19b60:	1c40      	adds	r0, r0, #1
   19b62:	1822      	adds	r2, r4, r0
   19b64:	7511      	strb	r1, [r2, #20]
   19b66:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   19b6a:	2200      	movs	r2, #0
   19b6c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   19b70:	830a      	strh	r2, [r1, #24]
   19b72:	6840      	ldr	r0, [r0, #4]
   19b74:	70a2      	strb	r2, [r4, #2]
   19b76:	4631      	mov	r1, r6
   19b78:	f362 010f 	bfi	r1, r2, #0, #16
   19b7c:	e9c6 0100 	strd	r0, r1, [r6]
   19b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019b84 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
   19b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b88:	461e      	mov	r6, r3
   19b8a:	4613      	mov	r3, r2
   19b8c:	4604      	mov	r4, r0
   19b8e:	b109      	cbz	r1, 19b94 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
   19b90:	2000      	movs	r0, #0
   19b92:	e000      	b.n	19b96 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
   19b94:	2002      	movs	r0, #2
   19b96:	2101      	movs	r1, #1
   19b98:	70a1      	strb	r1, [r4, #2]
   19b9a:	1821      	adds	r1, r4, r0
   19b9c:	7d0a      	ldrb	r2, [r1, #20]
   19b9e:	2a01      	cmp	r2, #1
   19ba0:	d003      	beq.n	19baa <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
   19ba2:	7d49      	ldrb	r1, [r1, #21]
   19ba4:	2901      	cmp	r1, #1
   19ba6:	d10c      	bne.n	19bc2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
   19ba8:	1c40      	adds	r0, r0, #1
   19baa:	eb04 0540 	add.w	r5, r4, r0, lsl #1
   19bae:	2700      	movs	r7, #0
   19bb0:	8b29      	ldrh	r1, [r5, #24]
   19bb2:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   19bb6:	198a      	adds	r2, r1, r6
   19bb8:	4562      	cmp	r2, ip
   19bba:	d905      	bls.n	19bc8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
   19bbc:	4420      	add	r0, r4
   19bbe:	832f      	strh	r7, [r5, #24]
   19bc0:	7507      	strb	r7, [r0, #20]
   19bc2:	2000      	movs	r0, #0
   19bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19bc8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   19bcc:	4632      	mov	r2, r6
   19bce:	6840      	ldr	r0, [r0, #4]
   19bd0:	4408      	add	r0, r1
   19bd2:	4619      	mov	r1, r3
   19bd4:	f7fe fee7 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19bd8:	8b28      	ldrh	r0, [r5, #24]
   19bda:	4430      	add	r0, r6
   19bdc:	8328      	strh	r0, [r5, #24]
   19bde:	70a7      	strb	r7, [r4, #2]
   19be0:	2001      	movs	r0, #1
   19be2:	e7ef      	b.n	19bc4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

00019be4 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
   19be4:	2202      	movs	r2, #2
   19be6:	2100      	movs	r1, #0
   19be8:	f7ff bf72 	b.w	19ad0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

00019bec <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
   19bec:	b510      	push	{r4, lr}
   19bee:	2101      	movs	r1, #1
   19bf0:	f7ff ff33 	bl	19a5a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
   19bf4:	2800      	cmp	r0, #0
   19bf6:	d000      	beq.n	19bfa <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
   19bf8:	2001      	movs	r0, #1
   19bfa:	bd10      	pop	{r4, pc}

00019bfc <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
   19bfc:	2201      	movs	r2, #1
   19bfe:	f7ff bf39 	b.w	19a74 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

00019c02 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
   19c02:	2200      	movs	r2, #0
   19c04:	f7ff bf36 	b.w	19a74 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

00019c08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
   19c08:	b570      	push	{r4, r5, r6, lr}
   19c0a:	b109      	cbz	r1, 19c10 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
   19c0c:	2300      	movs	r3, #0
   19c0e:	e000      	b.n	19c12 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
   19c10:	2302      	movs	r3, #2
   19c12:	2101      	movs	r1, #1
   19c14:	7081      	strb	r1, [r0, #2]
   19c16:	18c1      	adds	r1, r0, r3
   19c18:	2402      	movs	r4, #2
   19c1a:	7d0d      	ldrb	r5, [r1, #20]
   19c1c:	2d01      	cmp	r5, #1
   19c1e:	d007      	beq.n	19c30 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
   19c20:	7d4d      	ldrb	r5, [r1, #21]
   19c22:	2d01      	cmp	r5, #1
   19c24:	d009      	beq.n	19c3a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
   19c26:	f44f 718b 	mov.w	r1, #278	; 0x116
   19c2a:	2009      	movs	r0, #9
   19c2c:	f7f6 fe4c 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19c30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   19c34:	831a      	strh	r2, [r3, #24]
   19c36:	750c      	strb	r4, [r1, #20]
   19c38:	e003      	b.n	19c42 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
   19c3a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   19c3e:	835a      	strh	r2, [r3, #26]
   19c40:	754c      	strb	r4, [r1, #21]
   19c42:	2100      	movs	r1, #0
   19c44:	7081      	strb	r1, [r0, #2]
   19c46:	bd70      	pop	{r4, r5, r6, pc}

00019c48 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
   19c48:	2101      	movs	r1, #1
   19c4a:	7001      	strb	r1, [r0, #0]
   19c4c:	4770      	bx	lr

00019c4e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
   19c4e:	2201      	movs	r2, #1
   19c50:	4611      	mov	r1, r2
   19c52:	f7ff bf3d 	b.w	19ad0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

00019c56 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
   19c56:	2201      	movs	r2, #1
   19c58:	2100      	movs	r1, #0
   19c5a:	f7ff bf39 	b.w	19ad0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

00019c5e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
   19c5e:	2100      	movs	r1, #0
   19c60:	f7ff bee2 	b.w	19a28 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
   19c64:	2800      	cmp	r0, #0
   19c66:	db09      	blt.n	19c7c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
   19c68:	f000 021f 	and.w	r2, r0, #31
   19c6c:	2101      	movs	r1, #1
   19c6e:	4091      	lsls	r1, r2
   19c70:	0940      	lsrs	r0, r0, #5
   19c72:	0080      	lsls	r0, r0, #2
   19c74:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   19c78:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   19c7c:	4770      	bx	lr
   19c7e:	5840      	ldr	r0, [r0, r1]
   19c80:	2800      	cmp	r0, #0
   19c82:	d000      	beq.n	19c86 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
   19c84:	2001      	movs	r0, #1
   19c86:	4770      	bx	lr

00019c88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   19c88:	f7f7 bbbc 	b.w	11404 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

00019c8c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
   19c8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   19c90:	2000      	movs	r0, #0
   19c92:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   19c96:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19c9a:	2001      	movs	r0, #1
   19c9c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   19ca0:	4770      	bx	lr

00019ca2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   19ca2:	b108      	cbz	r0, 19ca8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   19ca4:	2000      	movs	r0, #0
   19ca6:	4770      	bx	lr
   19ca8:	2001      	movs	r0, #1
   19caa:	4770      	bx	lr

00019cac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
   19cac:	f7f7 bcfc 	b.w	116a8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

00019cb0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
   19cb0:	f7f7 bcea 	b.w	11688 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

00019cb4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   19cb4:	b510      	push	{r4, lr}
   19cb6:	2900      	cmp	r1, #0
   19cb8:	4604      	mov	r4, r0
   19cba:	f04f 0106 	mov.w	r1, #6
   19cbe:	d002      	beq.n	19cc6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   19cc0:	f7f6 fe8e 	bl	109e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   19cc4:	e001      	b.n	19cca <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   19cc6:	f7f6 fe99 	bl	109fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   19cca:	7960      	ldrb	r0, [r4, #5]
   19ccc:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   19cd0:	7160      	strb	r0, [r4, #5]
   19cd2:	bd10      	pop	{r4, pc}

00019cd4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
   19cd4:	4770      	bx	lr

00019cd6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   19cd6:	b530      	push	{r4, r5, lr}
   19cd8:	460c      	mov	r4, r1
   19cda:	4605      	mov	r5, r0
   19cdc:	b08d      	sub	sp, #52	; 0x34
   19cde:	f04f 0103 	mov.w	r1, #3
   19ce2:	f104 0003 	add.w	r0, r4, #3
   19ce6:	b112      	cbz	r2, 19cee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   19ce8:	f7f6 fe7a 	bl	109e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   19cec:	e001      	b.n	19cf2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   19cee:	f7f6 fe85 	bl	109fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   19cf2:	7960      	ldrb	r0, [r4, #5]
   19cf4:	220d      	movs	r2, #13
   19cf6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   19cfa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   19cfe:	7160      	strb	r0, [r4, #5]
   19d00:	2100      	movs	r1, #0
   19d02:	a804      	add	r0, sp, #16
   19d04:	f7fe fec9 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   19d08:	78e0      	ldrb	r0, [r4, #3]
   19d0a:	f88d 001f 	strb.w	r0, [sp, #31]
   19d0e:	7920      	ldrb	r0, [r4, #4]
   19d10:	f88d 001e 	strb.w	r0, [sp, #30]
   19d14:	7960      	ldrb	r0, [r4, #5]
   19d16:	f88d 001d 	strb.w	r0, [sp, #29]
   19d1a:	2210      	movs	r2, #16
   19d1c:	4629      	mov	r1, r5
   19d1e:	4668      	mov	r0, sp
   19d20:	f7fe fe41 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19d24:	4668      	mov	r0, sp
   19d26:	f7ff ffaf 	bl	19c88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   19d2a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   19d2e:	7020      	strb	r0, [r4, #0]
   19d30:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   19d34:	7060      	strb	r0, [r4, #1]
   19d36:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   19d3a:	70a0      	strb	r0, [r4, #2]
   19d3c:	b00d      	add	sp, #52	; 0x34
   19d3e:	bd30      	pop	{r4, r5, pc}

00019d40 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
   19d40:	f7f8 b88a 	b.w	11e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
   19d44:	07c1      	lsls	r1, r0, #31
   19d46:	d001      	beq.n	19d4c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
   19d48:	2001      	movs	r0, #1
   19d4a:	4770      	bx	lr
   19d4c:	0780      	lsls	r0, r0, #30
   19d4e:	d501      	bpl.n	19d54 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
   19d50:	2002      	movs	r0, #2
   19d52:	4770      	bx	lr
   19d54:	2000      	movs	r0, #0
   19d56:	4770      	bx	lr
   19d58:	b510      	push	{r4, lr}
   19d5a:	2801      	cmp	r0, #1
   19d5c:	d008      	beq.n	19d70 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
   19d5e:	2802      	cmp	r0, #2
   19d60:	d004      	beq.n	19d6c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
   19d62:	f240 31ad 	movw	r1, #941	; 0x3ad
   19d66:	2006      	movs	r0, #6
   19d68:	f7f6 fdae 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19d6c:	2001      	movs	r0, #1
   19d6e:	bd10      	pop	{r4, pc}
   19d70:	2000      	movs	r0, #0
   19d72:	bd10      	pop	{r4, pc}
   19d74:	2900      	cmp	r1, #0
   19d76:	d004      	beq.n	19d82 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
   19d78:	2801      	cmp	r0, #1
   19d7a:	d003      	beq.n	19d84 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
   19d7c:	2901      	cmp	r1, #1
   19d7e:	d001      	beq.n	19d84 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
   19d80:	2002      	movs	r0, #2
   19d82:	4770      	bx	lr
   19d84:	2001      	movs	r0, #1
   19d86:	4770      	bx	lr
   19d88:	f7ff bcab 	b.w	196e2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

00019d8c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
   19d8c:	2101      	movs	r1, #1
   19d8e:	f7f8 bbf3 	b.w	12578 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

00019d92 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   19d92:	b510      	push	{r4, lr}
   19d94:	f002 fc46 	bl	1c624 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   19d98:	b118      	cbz	r0, 19da2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
   19d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19d9e:	f7fd b949 	b.w	17034 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
   19da2:	20ff      	movs	r0, #255	; 0xff
   19da4:	bd10      	pop	{r4, pc}

00019da6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
   19da6:	b510      	push	{r4, lr}
   19da8:	f7f8 fc2e 	bl	12608 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   19dac:	2810      	cmp	r0, #16
   19dae:	d003      	beq.n	19db8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
   19db0:	f7f8 fbfa 	bl	125a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   19db4:	2810      	cmp	r0, #16
   19db6:	d100      	bne.n	19dba <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
   19db8:	2008      	movs	r0, #8
   19dba:	bd10      	pop	{r4, pc}

00019dbc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
   19dbc:	b510      	push	{r4, lr}
   19dbe:	f7f8 fc23 	bl	12608 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   19dc2:	2810      	cmp	r0, #16
   19dc4:	d007      	beq.n	19dd6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
   19dc6:	f7f8 fbef 	bl	125a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   19dca:	2810      	cmp	r0, #16
   19dcc:	d003      	beq.n	19dd6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
   19dce:	f7f8 fc63 	bl	12698 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
   19dd2:	2001      	movs	r0, #1
   19dd4:	bd10      	pop	{r4, pc}
   19dd6:	2000      	movs	r0, #0
   19dd8:	bd10      	pop	{r4, pc}

00019dda <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   19dda:	b510      	push	{r4, lr}
   19ddc:	f7f8 fc14 	bl	12608 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
   19de0:	2810      	cmp	r0, #16
   19de2:	d003      	beq.n	19dec <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
   19de4:	f7f8 fca0 	bl	12728 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
   19de8:	2001      	movs	r0, #1
   19dea:	bd10      	pop	{r4, pc}
   19dec:	2000      	movs	r0, #0
   19dee:	bd10      	pop	{r4, pc}

00019df0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
   19df0:	b570      	push	{r4, r5, r6, lr}
   19df2:	460e      	mov	r6, r1
   19df4:	b08c      	sub	sp, #48	; 0x30
   19df6:	4614      	mov	r4, r2
   19df8:	4601      	mov	r1, r0
   19dfa:	461d      	mov	r5, r3
   19dfc:	2210      	movs	r2, #16
   19dfe:	4668      	mov	r0, sp
   19e00:	f000 f91a 	bl	1a038 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   19e04:	2210      	movs	r2, #16
   19e06:	4631      	mov	r1, r6
   19e08:	a804      	add	r0, sp, #16
   19e0a:	f000 f915 	bl	1a038 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   19e0e:	4668      	mov	r0, sp
   19e10:	f7ff ff3a 	bl	19c88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   19e14:	a908      	add	r1, sp, #32
   19e16:	f04f 0210 	mov.w	r2, #16
   19e1a:	4628      	mov	r0, r5
   19e1c:	b11c      	cbz	r4, 19e26 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
   19e1e:	f000 f90b 	bl	1a038 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   19e22:	b00c      	add	sp, #48	; 0x30
   19e24:	bd70      	pop	{r4, r5, r6, pc}
   19e26:	f7fe fdbe 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   19e2a:	e7fa      	b.n	19e22 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

00019e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   19e2c:	b510      	push	{r4, lr}
   19e2e:	460c      	mov	r4, r1
   19e30:	2100      	movs	r1, #0
   19e32:	f7ff fdb3 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   19e36:	6060      	str	r0, [r4, #4]
   19e38:	b118      	cbz	r0, 19e42 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   19e3a:	2001      	movs	r0, #1
   19e3c:	7020      	strb	r0, [r4, #0]
   19e3e:	2000      	movs	r0, #0
   19e40:	bd10      	pop	{r4, pc}
   19e42:	2002      	movs	r0, #2
   19e44:	bd10      	pop	{r4, pc}

00019e46 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   19e46:	f240 41e2 	movw	r1, #1250	; 0x4e2
   19e4a:	4348      	muls	r0, r1
   19e4c:	4770      	bx	lr

00019e4e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   19e4e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   19e52:	fbb0 f0f1 	udiv	r0, r0, r1
   19e56:	b280      	uxth	r0, r0
   19e58:	4770      	bx	lr

00019e5a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   19e5a:	b570      	push	{r4, r5, r6, lr}
   19e5c:	4604      	mov	r4, r0
   19e5e:	4290      	cmp	r0, r2
   19e60:	d20b      	bcs.n	19e7a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
   19e62:	1b10      	subs	r0, r2, r4
   19e64:	2865      	cmp	r0, #101	; 0x65
   19e66:	d200      	bcs.n	19e6a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
   19e68:	2065      	movs	r0, #101	; 0x65
   19e6a:	1825      	adds	r5, r4, r0
   19e6c:	428d      	cmp	r5, r1
   19e6e:	d803      	bhi.n	19e78 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
   19e70:	2104      	movs	r1, #4
   19e72:	f7f4 f827 	bl	dec4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   19e76:	b108      	cbz	r0, 19e7c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
   19e78:	4620      	mov	r0, r4
   19e7a:	bd70      	pop	{r4, r5, r6, pc}
   19e7c:	4628      	mov	r0, r5
   19e7e:	bd70      	pop	{r4, r5, r6, pc}

00019e80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   19e80:	b510      	push	{r4, lr}
   19e82:	f1a2 030f 	sub.w	r3, r2, #15
   19e86:	290c      	cmp	r1, #12
   19e88:	d244      	bcs.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19e8a:	e8df f001 	tbb	[pc, r1]
   19e8e:	0806      	.short	0x0806
   19e90:	1815120d 	.word	0x1815120d
   19e94:	4127241c 	.word	0x4127241c
   19e98:	312a      	.short	0x312a
   19e9a:	b3c2      	cbz	r2, 19f0e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
   19e9c:	e03a      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19e9e:	2a07      	cmp	r2, #7
   19ea0:	d03a      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ea2:	2a08      	cmp	r2, #8
   19ea4:	d038      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ea6:	e035      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19ea8:	2a0c      	cmp	r2, #12
   19eaa:	d035      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19eac:	2a0b      	cmp	r2, #11
   19eae:	d033      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19eb0:	e030      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19eb2:	2a0d      	cmp	r2, #13
   19eb4:	d030      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19eb6:	e02d      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19eb8:	2b0c      	cmp	r3, #12
   19eba:	d92d      	bls.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ebc:	e02a      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19ebe:	3a10      	subs	r2, #16
   19ec0:	2a0b      	cmp	r2, #11
   19ec2:	d929      	bls.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ec4:	e026      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19ec6:	2b03      	cmp	r3, #3
   19ec8:	d926      	bls.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19eca:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   19ece:	b308      	cbz	r0, 19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19ed0:	2a1b      	cmp	r2, #27
   19ed2:	d921      	bls.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ed4:	e01e      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19ed6:	2a04      	cmp	r2, #4
   19ed8:	d01e      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19eda:	e01b      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19edc:	2a06      	cmp	r2, #6
   19ede:	d01b      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ee0:	e018      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19ee2:	2a1c      	cmp	r2, #28
   19ee4:	d018      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ee6:	2a1d      	cmp	r2, #29
   19ee8:	d016      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19eea:	2a1e      	cmp	r2, #30
   19eec:	d014      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19eee:	e011      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19ef0:	2a1f      	cmp	r2, #31
   19ef2:	d011      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ef4:	2a20      	cmp	r2, #32
   19ef6:	d00f      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19ef8:	2a21      	cmp	r2, #33	; 0x21
   19efa:	d00d      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19efc:	2a22      	cmp	r2, #34	; 0x22
   19efe:	d00b      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19f00:	2a23      	cmp	r2, #35	; 0x23
   19f02:	d009      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19f04:	2a24      	cmp	r2, #36	; 0x24
   19f06:	d007      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19f08:	2a26      	cmp	r2, #38	; 0x26
   19f0a:	d005      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19f0c:	e002      	b.n	19f14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
   19f0e:	e003      	b.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19f10:	2a0e      	cmp	r2, #14
   19f12:	d001      	beq.n	19f18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
   19f14:	2000      	movs	r0, #0
   19f16:	bd10      	pop	{r4, pc}
   19f18:	2001      	movs	r0, #1
   19f1a:	bd10      	pop	{r4, pc}

00019f1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   19f1c:	280c      	cmp	r0, #12
   19f1e:	d013      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f20:	280b      	cmp	r0, #11
   19f22:	d011      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f24:	280d      	cmp	r0, #13
   19f26:	d00f      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f28:	281f      	cmp	r0, #31
   19f2a:	d00d      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f2c:	2820      	cmp	r0, #32
   19f2e:	d00b      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f30:	2821      	cmp	r0, #33	; 0x21
   19f32:	d009      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f34:	2822      	cmp	r0, #34	; 0x22
   19f36:	d007      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f38:	2823      	cmp	r0, #35	; 0x23
   19f3a:	d005      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f3c:	2824      	cmp	r0, #36	; 0x24
   19f3e:	d003      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f40:	2826      	cmp	r0, #38	; 0x26
   19f42:	d001      	beq.n	19f48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
   19f44:	2000      	movs	r0, #0
   19f46:	4770      	bx	lr
   19f48:	2001      	movs	r0, #1
   19f4a:	4770      	bx	lr

00019f4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   19f4c:	f011 0f0c 	tst.w	r1, #12
   19f50:	d016      	beq.n	19f80 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
   19f52:	074a      	lsls	r2, r1, #29
   19f54:	f44f 7116 	mov.w	r1, #600	; 0x258
   19f58:	2a00      	cmp	r2, #0
   19f5a:	da02      	bge.n	19f62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
   19f5c:	f04f 0210 	mov.w	r2, #16
   19f60:	e001      	b.n	19f66 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
   19f62:	f04f 0240 	mov.w	r2, #64	; 0x40
   19f66:	da01      	bge.n	19f6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
   19f68:	f04f 0196 	mov.w	r1, #150	; 0x96
   19f6c:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   19f70:	eba0 0301 	sub.w	r3, r0, r1
   19f74:	4288      	cmp	r0, r1
   19f76:	d910      	bls.n	19f9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   19f78:	fb93 f0f2 	sdiv	r0, r3, r2
   19f7c:	b280      	uxth	r0, r0
   19f7e:	4770      	bx	lr
   19f80:	2902      	cmp	r1, #2
   19f82:	d002      	beq.n	19f8a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
   19f84:	2870      	cmp	r0, #112	; 0x70
   19f86:	d80a      	bhi.n	19f9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
   19f88:	e007      	b.n	19f9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   19f8a:	283c      	cmp	r0, #60	; 0x3c
   19f8c:	d905      	bls.n	19f9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   19f8e:	383c      	subs	r0, #60	; 0x3c
   19f90:	17c1      	asrs	r1, r0, #31
   19f92:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   19f96:	1080      	asrs	r0, r0, #2
   19f98:	e7f0      	b.n	19f7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   19f9a:	2000      	movs	r0, #0
   19f9c:	e7ee      	b.n	19f7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   19f9e:	3870      	subs	r0, #112	; 0x70
   19fa0:	17c1      	asrs	r1, r0, #31
   19fa2:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   19fa6:	10c0      	asrs	r0, r0, #3
   19fa8:	e7e8      	b.n	19f7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

00019faa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   19faa:	6809      	ldr	r1, [r1, #0]
   19fac:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
   19fb0:	4770      	bx	lr

00019fb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   19fb2:	07c1      	lsls	r1, r0, #31
   19fb4:	d001      	beq.n	19fba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
   19fb6:	2001      	movs	r0, #1
   19fb8:	4770      	bx	lr
   19fba:	0781      	lsls	r1, r0, #30
   19fbc:	d501      	bpl.n	19fc2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
   19fbe:	2002      	movs	r0, #2
   19fc0:	4770      	bx	lr
   19fc2:	0740      	lsls	r0, r0, #29
   19fc4:	d501      	bpl.n	19fca <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
   19fc6:	2008      	movs	r0, #8
   19fc8:	4770      	bx	lr
   19fca:	2000      	movs	r0, #0
   19fcc:	4770      	bx	lr

00019fce <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   19fce:	b510      	push	{r4, lr}
   19fd0:	f640 12c4 	movw	r2, #2500	; 0x9c4
   19fd4:	2901      	cmp	r1, #1
   19fd6:	d006      	beq.n	19fe6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
   19fd8:	2902      	cmp	r1, #2
   19fda:	d005      	beq.n	19fe8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
   19fdc:	f240 31b1 	movw	r1, #945	; 0x3b1
   19fe0:	2029      	movs	r0, #41	; 0x29
   19fe2:	f7f6 fc71 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19fe6:	b108      	cbz	r0, 19fec <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
   19fe8:	4610      	mov	r0, r2
   19fea:	bd10      	pop	{r4, pc}
   19fec:	f240 40e2 	movw	r0, #1250	; 0x4e2
   19ff0:	bd10      	pop	{r4, pc}

00019ff2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   19ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ff6:	460c      	mov	r4, r1
   19ff8:	4605      	mov	r5, r0
   19ffa:	68c6      	ldr	r6, [r0, #12]
   19ffc:	f7f4 fb7c 	bl	e6f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   1a000:	b198      	cbz	r0, 1a02a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   1a002:	b1bc      	cbz	r4, 1a034 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1a004:	4630      	mov	r0, r6
   1a006:	68e9      	ldr	r1, [r5, #12]
   1a008:	f7f4 f860 	bl	e0cc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1a00c:	2800      	cmp	r0, #0
   1a00e:	dd11      	ble.n	1a034 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1a010:	4420      	add	r0, r4
   1a012:	1e40      	subs	r0, r0, #1
   1a014:	fbb0 f7f4 	udiv	r7, r0, r4
   1a018:	fb07 f104 	mul.w	r1, r7, r4
   1a01c:	4630      	mov	r0, r6
   1a01e:	f7f4 f823 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1a022:	60e8      	str	r0, [r5, #12]
   1a024:	4638      	mov	r0, r7
   1a026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a02a:	f240 2136 	movw	r1, #566	; 0x236
   1a02e:	2029      	movs	r0, #41	; 0x29
   1a030:	f7f6 fc4a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a034:	2000      	movs	r0, #0
   1a036:	e7f6      	b.n	1a026 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0001a038 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
   1a038:	b530      	push	{r4, r5, lr}
   1a03a:	4613      	mov	r3, r2
   1a03c:	e006      	b.n	1a04c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
   1a03e:	18cc      	adds	r4, r1, r3
   1a040:	1ad5      	subs	r5, r2, r3
   1a042:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   1a046:	1e5b      	subs	r3, r3, #1
   1a048:	5544      	strb	r4, [r0, r5]
   1a04a:	b2db      	uxtb	r3, r3
   1a04c:	2b00      	cmp	r3, #0
   1a04e:	d1f6      	bne.n	1a03e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
   1a050:	bd30      	pop	{r4, r5, pc}

0001a052 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   1a052:	b538      	push	{r3, r4, r5, lr}
   1a054:	4605      	mov	r5, r0
   1a056:	460c      	mov	r4, r1
   1a058:	4668      	mov	r0, sp
   1a05a:	f7fd fd4b 	bl	17af4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   1a05e:	b310      	cbz	r0, 1a0a6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
   1a060:	f99d 0000 	ldrsb.w	r0, [sp]
   1a064:	7260      	strb	r0, [r4, #9]
   1a066:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   1a06a:	72a1      	strb	r1, [r4, #10]
   1a06c:	f994 100b 	ldrsb.w	r1, [r4, #11]
   1a070:	2200      	movs	r2, #0
   1a072:	1a41      	subs	r1, r0, r1
   1a074:	d500      	bpl.n	1a078 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
   1a076:	4249      	negs	r1, r1
   1a078:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1a07c:	428b      	cmp	r3, r1
   1a07e:	dc10      	bgt.n	1a0a2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1a080:	2bff      	cmp	r3, #255	; 0xff
   1a082:	d00e      	beq.n	1a0a2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1a084:	7b21      	ldrb	r1, [r4, #12]
   1a086:	1c49      	adds	r1, r1, #1
   1a088:	b2c9      	uxtb	r1, r1
   1a08a:	7321      	strb	r1, [r4, #12]
   1a08c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1a090:	4299      	cmp	r1, r3
   1a092:	d802      	bhi.n	1a09a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
   1a094:	7ae1      	ldrb	r1, [r4, #11]
   1a096:	297f      	cmp	r1, #127	; 0x7f
   1a098:	d103      	bne.n	1a0a2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   1a09a:	72e0      	strb	r0, [r4, #11]
   1a09c:	2000      	movs	r0, #0
   1a09e:	7320      	strb	r0, [r4, #12]
   1a0a0:	2201      	movs	r2, #1
   1a0a2:	4610      	mov	r0, r2
   1a0a4:	bd38      	pop	{r3, r4, r5, pc}
   1a0a6:	207f      	movs	r0, #127	; 0x7f
   1a0a8:	7260      	strb	r0, [r4, #9]
   1a0aa:	2000      	movs	r0, #0
   1a0ac:	bd38      	pop	{r3, r4, r5, pc}

0001a0ae <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   1a0ae:	2300      	movs	r3, #0
   1a0b0:	6283      	str	r3, [r0, #40]	; 0x28
   1a0b2:	8602      	strh	r2, [r0, #48]	; 0x30
   1a0b4:	f240 2371 	movw	r3, #625	; 0x271
   1a0b8:	435a      	muls	r2, r3
   1a0ba:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1a0be:	1e52      	subs	r2, r2, #1
   1a0c0:	fbb2 f1f1 	udiv	r1, r2, r1
   1a0c4:	62c1      	str	r1, [r0, #44]	; 0x2c
   1a0c6:	4770      	bx	lr

0001a0c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
   1a0c8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   1a0cc:	4607      	mov	r7, r0
   1a0ce:	4690      	mov	r8, r2
   1a0d0:	468b      	mov	fp, r1
   1a0d2:	2601      	movs	r6, #1
   1a0d4:	4608      	mov	r0, r1
   1a0d6:	f000 f941 	bl	1a35c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
   1a0da:	4682      	mov	sl, r0
   1a0dc:	4658      	mov	r0, fp
   1a0de:	f000 f949 	bl	1a374 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
   1a0e2:	4681      	mov	r9, r0
   1a0e4:	f7ff ff65 	bl	19fb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   1a0e8:	4604      	mov	r4, r0
   1a0ea:	4650      	mov	r0, sl
   1a0ec:	f7ff ff61 	bl	19fb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   1a0f0:	4605      	mov	r5, r0
   1a0f2:	ea54 0005 	orrs.w	r0, r4, r5
   1a0f6:	d100      	bne.n	1a0fa <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
   1a0f8:	2600      	movs	r6, #0
   1a0fa:	f7fc ff23 	bl	16f44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1a0fe:	ea10 0f09 	tst.w	r0, r9
   1a102:	d100      	bne.n	1a106 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
   1a104:	2400      	movs	r4, #0
   1a106:	f7fc ff1d 	bl	16f44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1a10a:	ea10 0f0a 	tst.w	r0, sl
   1a10e:	d100      	bne.n	1a112 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
   1a110:	2500      	movs	r5, #0
   1a112:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
   1a116:	42a0      	cmp	r0, r4
   1a118:	d100      	bne.n	1a11c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
   1a11a:	2400      	movs	r4, #0
   1a11c:	f888 4000 	strb.w	r4, [r8]
   1a120:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
   1a124:	42a8      	cmp	r0, r5
   1a126:	d100      	bne.n	1a12a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
   1a128:	2500      	movs	r5, #0
   1a12a:	f888 5001 	strb.w	r5, [r8, #1]
   1a12e:	b974      	cbnz	r4, 1a14e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   1a130:	b96d      	cbnz	r5, 1a14e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   1a132:	4658      	mov	r0, fp
   1a134:	f000 f91c 	bl	1a370 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
   1a138:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
   1a13c:	1a40      	subs	r0, r0, r1
   1a13e:	b200      	sxth	r0, r0
   1a140:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1a144:	4288      	cmp	r0, r1
   1a146:	dc01      	bgt.n	1a14c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
   1a148:	2800      	cmp	r0, #0
   1a14a:	dc00      	bgt.n	1a14e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   1a14c:	2600      	movs	r6, #0
   1a14e:	4630      	mov	r0, r6
   1a150:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0001a154 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   1a154:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1a158:	4348      	muls	r0, r1
   1a15a:	4770      	bx	lr

0001a15c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   1a15c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1a160:	fb10 f001 	smulbb	r0, r0, r1
   1a164:	4770      	bx	lr

0001a166 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
   1a166:	b510      	push	{r4, lr}
   1a168:	2300      	movs	r3, #0
   1a16a:	461a      	mov	r2, r3
   1a16c:	e003      	b.n	1a176 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
   1a16e:	5c84      	ldrb	r4, [r0, r2]
   1a170:	4323      	orrs	r3, r4
   1a172:	1c52      	adds	r2, r2, #1
   1a174:	b2d2      	uxtb	r2, r2
   1a176:	428a      	cmp	r2, r1
   1a178:	d3f9      	bcc.n	1a16e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
   1a17a:	b10b      	cbz	r3, 1a180 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
   1a17c:	2000      	movs	r0, #0
   1a17e:	bd10      	pop	{r4, pc}
   1a180:	2001      	movs	r0, #1
   1a182:	bd10      	pop	{r4, pc}

0001a184 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
   1a184:	b510      	push	{r4, lr}
   1a186:	4604      	mov	r4, r0
   1a188:	f890 0020 	ldrb.w	r0, [r0, #32]
   1a18c:	b108      	cbz	r0, 1a192 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
   1a18e:	2825      	cmp	r0, #37	; 0x25
   1a190:	d901      	bls.n	1a196 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
   1a192:	2012      	movs	r0, #18
   1a194:	bd10      	pop	{r4, pc}
   1a196:	b12a      	cbz	r2, 1a1a4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
   1a198:	7d60      	ldrb	r0, [r4, #21]
   1a19a:	b128      	cbz	r0, 1a1a8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
   1a19c:	2801      	cmp	r0, #1
   1a19e:	d009      	beq.n	1a1b4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
   1a1a0:	201f      	movs	r0, #31
   1a1a2:	bd10      	pop	{r4, pc}
   1a1a4:	2000      	movs	r0, #0
   1a1a6:	bd10      	pop	{r4, pc}
   1a1a8:	4620      	mov	r0, r4
   1a1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a1ae:	4611      	mov	r1, r2
   1a1b0:	f7f8 bbae 	b.w	12910 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
   1a1b4:	88a2      	ldrh	r2, [r4, #4]
   1a1b6:	6909      	ldr	r1, [r1, #16]
   1a1b8:	f104 0015 	add.w	r0, r4, #21
   1a1bc:	f7f8 fb54 	bl	12868 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   1a1c0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
   1a1c4:	e7ee      	b.n	1a1a4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0001a1c6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
   1a1c6:	b530      	push	{r4, r5, lr}
   1a1c8:	1c42      	adds	r2, r0, #1
   1a1ca:	428a      	cmp	r2, r1
   1a1cc:	d004      	beq.n	1a1d8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
   1a1ce:	680a      	ldr	r2, [r1, #0]
   1a1d0:	f8c0 2001 	str.w	r2, [r0, #1]
   1a1d4:	7909      	ldrb	r1, [r1, #4]
   1a1d6:	7141      	strb	r1, [r0, #5]
   1a1d8:	7941      	ldrb	r1, [r0, #5]
   1a1da:	f001 011f 	and.w	r1, r1, #31
   1a1de:	7141      	strb	r1, [r0, #5]
   1a1e0:	2100      	movs	r1, #0
   1a1e2:	72c1      	strb	r1, [r0, #11]
   1a1e4:	1843      	adds	r3, r0, r1
   1a1e6:	1c49      	adds	r1, r1, #1
   1a1e8:	785c      	ldrb	r4, [r3, #1]
   1a1ea:	b2c9      	uxtb	r1, r1
   1a1ec:	f004 0201 	and.w	r2, r4, #1
   1a1f0:	0864      	lsrs	r4, r4, #1
   1a1f2:	f004 0501 	and.w	r5, r4, #1
   1a1f6:	4415      	add	r5, r2
   1a1f8:	0862      	lsrs	r2, r4, #1
   1a1fa:	f002 0401 	and.w	r4, r2, #1
   1a1fe:	442c      	add	r4, r5
   1a200:	0852      	lsrs	r2, r2, #1
   1a202:	f002 0501 	and.w	r5, r2, #1
   1a206:	442c      	add	r4, r5
   1a208:	0852      	lsrs	r2, r2, #1
   1a20a:	f002 0501 	and.w	r5, r2, #1
   1a20e:	442c      	add	r4, r5
   1a210:	0852      	lsrs	r2, r2, #1
   1a212:	f002 0501 	and.w	r5, r2, #1
   1a216:	442c      	add	r4, r5
   1a218:	0852      	lsrs	r2, r2, #1
   1a21a:	f002 0501 	and.w	r5, r2, #1
   1a21e:	442c      	add	r4, r5
   1a220:	eb04 0252 	add.w	r2, r4, r2, lsr #1
   1a224:	719a      	strb	r2, [r3, #6]
   1a226:	7ac3      	ldrb	r3, [r0, #11]
   1a228:	2905      	cmp	r1, #5
   1a22a:	441a      	add	r2, r3
   1a22c:	72c2      	strb	r2, [r0, #11]
   1a22e:	d3d9      	bcc.n	1a1e4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
   1a230:	bd30      	pop	{r4, r5, pc}
   1a232:	b570      	push	{r4, r5, r6, lr}
   1a234:	f8d0 201f 	ldr.w	r2, [r0, #31]
   1a238:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   1a23c:	f012 0fff 	tst.w	r2, #255	; 0xff
   1a240:	f023 031f 	bic.w	r3, r3, #31
   1a244:	d108      	bne.n	1a258 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
   1a246:	f3c2 2407 	ubfx	r4, r2, #8, #8
   1a24a:	b92c      	cbnz	r4, 1a258 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
   1a24c:	f3c2 4407 	ubfx	r4, r2, #16, #8
   1a250:	b914      	cbnz	r4, 1a258 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
   1a252:	0e12      	lsrs	r2, r2, #24
   1a254:	d100      	bne.n	1a258 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
   1a256:	b35b      	cbz	r3, 1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a258:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   1a25c:	f8b0 501b 	ldrh.w	r5, [r0, #27]
   1a260:	f8b0 4017 	ldrh.w	r4, [r0, #23]
   1a264:	7d83      	ldrb	r3, [r0, #22]
   1a266:	b141      	cbz	r1, 1a27a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
   1a268:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
   1a26c:	d905      	bls.n	1a27a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
   1a26e:	f640 5107 	movw	r1, #3335	; 0xd07
   1a272:	428a      	cmp	r2, r1
   1a274:	d801      	bhi.n	1a27a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
   1a276:	2101      	movs	r1, #1
   1a278:	e000      	b.n	1a27c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
   1a27a:	2100      	movs	r1, #0
   1a27c:	7846      	ldrb	r6, [r0, #1]
   1a27e:	2e22      	cmp	r6, #34	; 0x22
   1a280:	d116      	bne.n	1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a282:	b959      	cbnz	r1, 1a29c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
   1a284:	1f91      	subs	r1, r2, #6
   1a286:	f640 467a 	movw	r6, #3194	; 0xc7a
   1a28a:	42b1      	cmp	r1, r6
   1a28c:	d810      	bhi.n	1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a28e:	b17b      	cbz	r3, 1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a290:	2b08      	cmp	r3, #8
   1a292:	d80d      	bhi.n	1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a294:	4293      	cmp	r3, r2
   1a296:	d20b      	bcs.n	1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a298:	4294      	cmp	r4, r2
   1a29a:	d809      	bhi.n	1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a29c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1a2a0:	d206      	bcs.n	1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a2a2:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   1a2a6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1a2aa:	d801      	bhi.n	1a2b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
   1a2ac:	2001      	movs	r0, #1
   1a2ae:	bd70      	pop	{r4, r5, r6, pc}
   1a2b0:	2000      	movs	r0, #0
   1a2b2:	bd70      	pop	{r4, r5, r6, pc}

0001a2b4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   1a2b4:	b570      	push	{r4, r5, r6, lr}
   1a2b6:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   1a2ba:	f8b0 5009 	ldrh.w	r5, [r0, #9]
   1a2be:	f830 4f05 	ldrh.w	r4, [r0, #5]!
   1a2c2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   1a2c6:	88c0      	ldrh	r0, [r0, #6]
   1a2c8:	b131      	cbz	r1, 1a2d8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
   1a2ca:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
   1a2ce:	d903      	bls.n	1a2d8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
   1a2d0:	f640 5107 	movw	r1, #3335	; 0xd07
   1a2d4:	428a      	cmp	r2, r1
   1a2d6:	d90b      	bls.n	1a2f0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
   1a2d8:	1f91      	subs	r1, r2, #6
   1a2da:	f640 467a 	movw	r6, #3194	; 0xc7a
   1a2de:	42b1      	cmp	r1, r6
   1a2e0:	d80e      	bhi.n	1a300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a2e2:	b16b      	cbz	r3, 1a300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a2e4:	2b08      	cmp	r3, #8
   1a2e6:	d80b      	bhi.n	1a300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a2e8:	4293      	cmp	r3, r2
   1a2ea:	d209      	bcs.n	1a300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a2ec:	4294      	cmp	r4, r2
   1a2ee:	d807      	bhi.n	1a300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a2f0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1a2f4:	d204      	bcs.n	1a300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a2f6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1a2fa:	d801      	bhi.n	1a300 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
   1a2fc:	2001      	movs	r0, #1
   1a2fe:	bd70      	pop	{r4, r5, r6, pc}
   1a300:	2000      	movs	r0, #0
   1a302:	bd70      	pop	{r4, r5, r6, pc}

0001a304 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   1a304:	6842      	ldr	r2, [r0, #4]
   1a306:	600a      	str	r2, [r1, #0]
   1a308:	7a00      	ldrb	r0, [r0, #8]
   1a30a:	7108      	strb	r0, [r1, #4]
   1a30c:	4770      	bx	lr

0001a30e <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   1a30e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   1a312:	4770      	bx	lr

0001a314 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   1a314:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   1a318:	4770      	bx	lr

0001a31a <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   1a31a:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   1a31e:	4770      	bx	lr

0001a320 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   1a320:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   1a324:	4770      	bx	lr

0001a326 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   1a326:	8980      	ldrh	r0, [r0, #12]
   1a328:	8008      	strh	r0, [r1, #0]
   1a32a:	4770      	bx	lr

0001a32c <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   1a32c:	f8d0 0016 	ldr.w	r0, [r0, #22]
   1a330:	6008      	str	r0, [r1, #0]
   1a332:	4770      	bx	lr

0001a334 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   1a334:	6842      	ldr	r2, [r0, #4]
   1a336:	600a      	str	r2, [r1, #0]
   1a338:	6880      	ldr	r0, [r0, #8]
   1a33a:	6048      	str	r0, [r1, #4]
   1a33c:	4770      	bx	lr

0001a33e <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   1a33e:	f850 2f0e 	ldr.w	r2, [r0, #14]!
   1a342:	600a      	str	r2, [r1, #0]
   1a344:	6840      	ldr	r0, [r0, #4]
   1a346:	6048      	str	r0, [r1, #4]
   1a348:	4770      	bx	lr

0001a34a <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   1a34a:	6842      	ldr	r2, [r0, #4]
   1a34c:	600a      	str	r2, [r1, #0]
   1a34e:	6880      	ldr	r0, [r0, #8]
   1a350:	6048      	str	r0, [r1, #4]
   1a352:	4770      	bx	lr

0001a354 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   1a354:	7800      	ldrb	r0, [r0, #0]
   1a356:	f000 0003 	and.w	r0, r0, #3
   1a35a:	4770      	bx	lr

0001a35c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   1a35c:	7900      	ldrb	r0, [r0, #4]
   1a35e:	4770      	bx	lr

0001a360 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   1a360:	8880      	ldrh	r0, [r0, #4]
   1a362:	4770      	bx	lr

0001a364 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   1a364:	88c0      	ldrh	r0, [r0, #6]
   1a366:	4770      	bx	lr

0001a368 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   1a368:	8900      	ldrh	r0, [r0, #8]
   1a36a:	4770      	bx	lr

0001a36c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   1a36c:	8940      	ldrh	r0, [r0, #10]
   1a36e:	4770      	bx	lr

0001a370 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   1a370:	88c0      	ldrh	r0, [r0, #6]
   1a372:	4770      	bx	lr

0001a374 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   1a374:	7940      	ldrb	r0, [r0, #5]
   1a376:	4770      	bx	lr

0001a378 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   1a378:	7900      	ldrb	r0, [r0, #4]
   1a37a:	4770      	bx	lr

0001a37c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   1a37c:	7900      	ldrb	r0, [r0, #4]
   1a37e:	4770      	bx	lr

0001a380 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   1a380:	8901      	ldrh	r1, [r0, #8]
   1a382:	291b      	cmp	r1, #27
   1a384:	d30c      	bcc.n	1a3a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1a386:	8941      	ldrh	r1, [r0, #10]
   1a388:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a38c:	4291      	cmp	r1, r2
   1a38e:	d307      	bcc.n	1a3a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1a390:	8881      	ldrh	r1, [r0, #4]
   1a392:	291b      	cmp	r1, #27
   1a394:	d304      	bcc.n	1a3a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1a396:	88c0      	ldrh	r0, [r0, #6]
   1a398:	4290      	cmp	r0, r2
   1a39a:	d301      	bcc.n	1a3a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
   1a39c:	2001      	movs	r0, #1
   1a39e:	4770      	bx	lr
   1a3a0:	2000      	movs	r0, #0
   1a3a2:	4770      	bx	lr

0001a3a4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   1a3a4:	b510      	push	{r4, lr}
   1a3a6:	29fb      	cmp	r1, #251	; 0xfb
   1a3a8:	d904      	bls.n	1a3b4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
   1a3aa:	f44f 61af 	mov.w	r1, #1400	; 0x578
   1a3ae:	202a      	movs	r0, #42	; 0x2a
   1a3b0:	f7f6 fa8a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a3b4:	7041      	strb	r1, [r0, #1]
   1a3b6:	bd10      	pop	{r4, pc}

0001a3b8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   1a3b8:	7901      	ldrb	r1, [r0, #4]
   1a3ba:	0749      	lsls	r1, r1, #29
   1a3bc:	d004      	beq.n	1a3c8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
   1a3be:	7940      	ldrb	r0, [r0, #5]
   1a3c0:	0740      	lsls	r0, r0, #29
   1a3c2:	d001      	beq.n	1a3c8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
   1a3c4:	2001      	movs	r0, #1
   1a3c6:	4770      	bx	lr
   1a3c8:	2000      	movs	r0, #0
   1a3ca:	4770      	bx	lr

0001a3cc <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   1a3cc:	7900      	ldrb	r0, [r0, #4]
   1a3ce:	4770      	bx	lr

0001a3d0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   1a3d0:	7940      	ldrb	r0, [r0, #5]
   1a3d2:	4770      	bx	lr

0001a3d4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   1a3d4:	7101      	strb	r1, [r0, #4]
   1a3d6:	4770      	bx	lr

0001a3d8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   1a3d8:	7141      	strb	r1, [r0, #5]
   1a3da:	4770      	bx	lr

0001a3dc <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   1a3dc:	b510      	push	{r4, lr}
   1a3de:	2a1b      	cmp	r2, #27
   1a3e0:	d904      	bls.n	1a3ec <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   1a3e2:	f240 31df 	movw	r1, #991	; 0x3df
   1a3e6:	202a      	movs	r0, #42	; 0x2a
   1a3e8:	f7f6 fa6e 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a3ec:	7042      	strb	r2, [r0, #1]
   1a3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a3f2:	1cc0      	adds	r0, r0, #3
   1a3f4:	f7fe bad7 	b.w	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0001a3f8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   1a3f8:	6809      	ldr	r1, [r1, #0]
   1a3fa:	60c1      	str	r1, [r0, #12]
   1a3fc:	4770      	bx	lr

0001a3fe <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   1a3fe:	680a      	ldr	r2, [r1, #0]
   1a400:	6042      	str	r2, [r0, #4]
   1a402:	6849      	ldr	r1, [r1, #4]
   1a404:	6081      	str	r1, [r0, #8]
   1a406:	4770      	bx	lr

0001a408 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   1a408:	680a      	ldr	r2, [r1, #0]
   1a40a:	6042      	str	r2, [r0, #4]
   1a40c:	6849      	ldr	r1, [r1, #4]
   1a40e:	6081      	str	r1, [r0, #8]
   1a410:	4770      	bx	lr

0001a412 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   1a412:	680a      	ldr	r2, [r1, #0]
   1a414:	6042      	str	r2, [r0, #4]
   1a416:	6849      	ldr	r1, [r1, #4]
   1a418:	6081      	str	r1, [r0, #8]
   1a41a:	4770      	bx	lr

0001a41c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   1a41c:	7802      	ldrb	r2, [r0, #0]
   1a41e:	f001 0103 	and.w	r1, r1, #3
   1a422:	f022 0203 	bic.w	r2, r2, #3
   1a426:	430a      	orrs	r2, r1
   1a428:	7002      	strb	r2, [r0, #0]
   1a42a:	4770      	bx	lr

0001a42c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   1a42c:	7101      	strb	r1, [r0, #4]
   1a42e:	0a09      	lsrs	r1, r1, #8
   1a430:	7141      	strb	r1, [r0, #5]
   1a432:	4770      	bx	lr

0001a434 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   1a434:	7181      	strb	r1, [r0, #6]
   1a436:	0a09      	lsrs	r1, r1, #8
   1a438:	71c1      	strb	r1, [r0, #7]
   1a43a:	4770      	bx	lr

0001a43c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   1a43c:	7201      	strb	r1, [r0, #8]
   1a43e:	0a09      	lsrs	r1, r1, #8
   1a440:	7241      	strb	r1, [r0, #9]
   1a442:	4770      	bx	lr

0001a444 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   1a444:	7281      	strb	r1, [r0, #10]
   1a446:	0a09      	lsrs	r1, r1, #8
   1a448:	72c1      	strb	r1, [r0, #11]
   1a44a:	4770      	bx	lr

0001a44c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   1a44c:	7802      	ldrb	r2, [r0, #0]
   1a44e:	f002 020f 	and.w	r2, r2, #15
   1a452:	2a03      	cmp	r2, #3
   1a454:	d003      	beq.n	1a45e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
   1a456:	2a05      	cmp	r2, #5
   1a458:	d104      	bne.n	1a464 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
   1a45a:	f7ff beea 	b.w	1a232 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
   1a45e:	7840      	ldrb	r0, [r0, #1]
   1a460:	280c      	cmp	r0, #12
   1a462:	d001      	beq.n	1a468 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
   1a464:	2000      	movs	r0, #0
   1a466:	4770      	bx	lr
   1a468:	2001      	movs	r0, #1
   1a46a:	4770      	bx	lr

0001a46c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   1a46c:	b570      	push	{r4, r5, r6, lr}
   1a46e:	4614      	mov	r4, r2
   1a470:	4605      	mov	r5, r0
   1a472:	2a1f      	cmp	r2, #31
   1a474:	d903      	bls.n	1a47e <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   1a476:	21b2      	movs	r1, #178	; 0xb2
   1a478:	202a      	movs	r0, #42	; 0x2a
   1a47a:	f7f6 fa25 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a47e:	f105 0009 	add.w	r0, r5, #9
   1a482:	f7fe fa90 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a486:	1da4      	adds	r4, r4, #6
   1a488:	706c      	strb	r4, [r5, #1]
   1a48a:	bd70      	pop	{r4, r5, r6, pc}

0001a48c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   1a48c:	b510      	push	{r4, lr}
   1a48e:	7802      	ldrb	r2, [r0, #0]
   1a490:	f001 030f 	and.w	r3, r1, #15
   1a494:	f022 020f 	bic.w	r2, r2, #15
   1a498:	431a      	orrs	r2, r3
   1a49a:	7002      	strb	r2, [r0, #0]
   1a49c:	2907      	cmp	r1, #7
   1a49e:	d20c      	bcs.n	1a4ba <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
   1a4a0:	e8df f001 	tbb	[pc, r1]
   1a4a4:	06040604 	.word	0x06040604
   1a4a8:	00040804 	.word	0x00040804
   1a4ac:	2106      	movs	r1, #6
   1a4ae:	e002      	b.n	1a4b6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
   1a4b0:	210c      	movs	r1, #12
   1a4b2:	e000      	b.n	1a4b6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
   1a4b4:	2122      	movs	r1, #34	; 0x22
   1a4b6:	7041      	strb	r1, [r0, #1]
   1a4b8:	bd10      	pop	{r4, pc}
   1a4ba:	216e      	movs	r1, #110	; 0x6e
   1a4bc:	202a      	movs	r0, #42	; 0x2a
   1a4be:	f7f6 fa03 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001a4c2 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   1a4c2:	680a      	ldr	r2, [r1, #0]
   1a4c4:	f840 2f09 	str.w	r2, [r0, #9]!
   1a4c8:	8889      	ldrh	r1, [r1, #4]
   1a4ca:	8081      	strh	r1, [r0, #4]
   1a4cc:	4770      	bx	lr

0001a4ce <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   1a4ce:	7802      	ldrb	r2, [r0, #0]
   1a4d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1a4d4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   1a4d8:	7002      	strb	r2, [r0, #0]
   1a4da:	4770      	bx	lr

0001a4dc <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   1a4dc:	680a      	ldr	r2, [r1, #0]
   1a4de:	f840 2f03 	str.w	r2, [r0, #3]!
   1a4e2:	8889      	ldrh	r1, [r1, #4]
   1a4e4:	8081      	strh	r1, [r0, #4]
   1a4e6:	4770      	bx	lr

0001a4e8 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   1a4e8:	7802      	ldrb	r2, [r0, #0]
   1a4ea:	2340      	movs	r3, #64	; 0x40
   1a4ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1a4f0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   1a4f4:	430a      	orrs	r2, r1
   1a4f6:	7002      	strb	r2, [r0, #0]
   1a4f8:	4770      	bx	lr

0001a4fa <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   1a4fa:	b570      	push	{r4, r5, r6, lr}
   1a4fc:	4614      	mov	r4, r2
   1a4fe:	4605      	mov	r5, r0
   1a500:	2a1f      	cmp	r2, #31
   1a502:	d903      	bls.n	1a50c <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   1a504:	21d4      	movs	r1, #212	; 0xd4
   1a506:	202a      	movs	r0, #42	; 0x2a
   1a508:	f7f6 f9de 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a50c:	f105 0009 	add.w	r0, r5, #9
   1a510:	f7fe fa49 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1a514:	1da4      	adds	r4, r4, #6
   1a516:	706c      	strb	r4, [r5, #1]
   1a518:	bd70      	pop	{r4, r5, r6, pc}

0001a51a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   1a51a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1a51e:	4604      	mov	r4, r0
   1a520:	2000      	movs	r0, #0
   1a522:	f7f6 fbbb 	bl	10c9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1a526:	2600      	movs	r6, #0
   1a528:	4605      	mov	r5, r0
   1a52a:	4637      	mov	r7, r6
   1a52c:	e00e      	b.n	1a54c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
   1a52e:	8820      	ldrh	r0, [r4, #0]
   1a530:	1c40      	adds	r0, r0, #1
   1a532:	b280      	uxth	r0, r0
   1a534:	8020      	strh	r0, [r4, #0]
   1a536:	42a8      	cmp	r0, r5
   1a538:	d300      	bcc.n	1a53c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
   1a53a:	8027      	strh	r7, [r4, #0]
   1a53c:	8820      	ldrh	r0, [r4, #0]
   1a53e:	4669      	mov	r1, sp
   1a540:	f7ff fc74 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1a544:	2800      	cmp	r0, #0
   1a546:	d007      	beq.n	1a558 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
   1a548:	1c76      	adds	r6, r6, #1
   1a54a:	b2f6      	uxtb	r6, r6
   1a54c:	42ae      	cmp	r6, r5
   1a54e:	d3ee      	bcc.n	1a52e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
   1a550:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a554:	8020      	strh	r0, [r4, #0]
   1a556:	2012      	movs	r0, #18
   1a558:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0001a55c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   1a55c:	6841      	ldr	r1, [r0, #4]
   1a55e:	2200      	movs	r2, #0
   1a560:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
   1a564:	2b00      	cmp	r3, #0
   1a566:	d004      	beq.n	1a572 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
   1a568:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
   1a56c:	6840      	ldr	r0, [r0, #4]
   1a56e:	f000 bc64 	b.w	1ae3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   1a572:	4770      	bx	lr

0001a574 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
   1a574:	b510      	push	{r4, lr}
   1a576:	7901      	ldrb	r1, [r0, #4]
   1a578:	b119      	cbz	r1, 1a582 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
   1a57a:	2901      	cmp	r1, #1
   1a57c:	d006      	beq.n	1a58c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
   1a57e:	2000      	movs	r0, #0
   1a580:	bd10      	pop	{r4, pc}
   1a582:	8842      	ldrh	r2, [r0, #2]
   1a584:	6883      	ldr	r3, [r0, #8]
   1a586:	8800      	ldrh	r0, [r0, #0]
   1a588:	2102      	movs	r1, #2
   1a58a:	e003      	b.n	1a594 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
   1a58c:	8842      	ldrh	r2, [r0, #2]
   1a58e:	6883      	ldr	r3, [r0, #8]
   1a590:	8800      	ldrh	r0, [r0, #0]
   1a592:	2101      	movs	r1, #1
   1a594:	f7f8 fa6a 	bl	12a6c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
   1a598:	b908      	cbnz	r0, 1a59e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
   1a59a:	f7f8 fabd 	bl	12b18 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
   1a59e:	2001      	movs	r0, #1
   1a5a0:	bd10      	pop	{r4, pc}
   1a5a2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1a5a6:	460e      	mov	r6, r1
   1a5a8:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
   1a5ac:	4617      	mov	r7, r2
   1a5ae:	39ff      	subs	r1, #255	; 0xff
   1a5b0:	d014      	beq.n	1a5dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
   1a5b2:	8030      	strh	r0, [r6, #0]
   1a5b4:	2100      	movs	r1, #0
   1a5b6:	7171      	strb	r1, [r6, #5]
   1a5b8:	f7f6 fda0 	bl	110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1a5bc:	4604      	mov	r4, r0
   1a5be:	f7ff f81b 	bl	195f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
   1a5c2:	0005      	movs	r5, r0
   1a5c4:	d00a      	beq.n	1a5dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
   1a5c6:	4620      	mov	r0, r4
   1a5c8:	4629      	mov	r1, r5
   1a5ca:	aa01      	add	r2, sp, #4
   1a5cc:	f7ff f837 	bl	1963e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   1a5d0:	8070      	strh	r0, [r6, #2]
   1a5d2:	b130      	cbz	r0, 1a5e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
   1a5d4:	28fb      	cmp	r0, #251	; 0xfb
   1a5d6:	d906      	bls.n	1a5e6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
   1a5d8:	21ae      	movs	r1, #174	; 0xae
   1a5da:	e026      	b.n	1a62a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1a5dc:	2000      	movs	r0, #0
   1a5de:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1a5e2:	21ad      	movs	r1, #173	; 0xad
   1a5e4:	e021      	b.n	1a62a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1a5e6:	9801      	ldr	r0, [sp, #4]
   1a5e8:	f7ff feb4 	bl	1a354 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
   1a5ec:	2801      	cmp	r0, #1
   1a5ee:	d003      	beq.n	1a5f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
   1a5f0:	2802      	cmp	r0, #2
   1a5f2:	d001      	beq.n	1a5f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
   1a5f4:	21bd      	movs	r1, #189	; 0xbd
   1a5f6:	e018      	b.n	1a62a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1a5f8:	7130      	strb	r0, [r6, #4]
   1a5fa:	4629      	mov	r1, r5
   1a5fc:	8873      	ldrh	r3, [r6, #2]
   1a5fe:	2503      	movs	r5, #3
   1a600:	4620      	mov	r0, r4
   1a602:	463a      	mov	r2, r7
   1a604:	9500      	str	r5, [sp, #0]
   1a606:	f7fe fee9 	bl	193dc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
   1a60a:	4620      	mov	r0, r4
   1a60c:	60b7      	str	r7, [r6, #8]
   1a60e:	f7fe ffa2 	bl	19556 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
   1a612:	b138      	cbz	r0, 1a624 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
   1a614:	2100      	movs	r1, #0
   1a616:	4620      	mov	r0, r4
   1a618:	460a      	mov	r2, r1
   1a61a:	f7ff f8ee 	bl	197fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   1a61e:	b118      	cbz	r0, 1a628 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
   1a620:	2001      	movs	r0, #1
   1a622:	e7dc      	b.n	1a5de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
   1a624:	21cd      	movs	r1, #205	; 0xcd
   1a626:	e000      	b.n	1a62a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
   1a628:	21d2      	movs	r1, #210	; 0xd2
   1a62a:	202b      	movs	r0, #43	; 0x2b
   1a62c:	f7f6 f94c 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001a630 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
   1a630:	f7f8 bc30 	b.w	12e94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
   1a634:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1a638:	4604      	mov	r4, r0
   1a63a:	2000      	movs	r0, #0
   1a63c:	f7f6 fb2e 	bl	10c9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1a640:	4605      	mov	r5, r0
   1a642:	2001      	movs	r0, #1
   1a644:	f7f6 fb2a 	bl	10c9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1a648:	4428      	add	r0, r5
   1a64a:	2600      	movs	r6, #0
   1a64c:	b2c7      	uxtb	r7, r0
   1a64e:	46b0      	mov	r8, r6
   1a650:	e017      	b.n	1a682 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
   1a652:	8820      	ldrh	r0, [r4, #0]
   1a654:	1c40      	adds	r0, r0, #1
   1a656:	b280      	uxth	r0, r0
   1a658:	8020      	strh	r0, [r4, #0]
   1a65a:	42b8      	cmp	r0, r7
   1a65c:	d302      	bcc.n	1a664 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
   1a65e:	4640      	mov	r0, r8
   1a660:	f8a4 8000 	strh.w	r8, [r4]
   1a664:	b280      	uxth	r0, r0
   1a666:	42a8      	cmp	r0, r5
   1a668:	d304      	bcc.n	1a674 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
   1a66a:	42b8      	cmp	r0, r7
   1a66c:	d202      	bcs.n	1a674 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
   1a66e:	2000      	movs	r0, #0
   1a670:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1a674:	4669      	mov	r1, sp
   1a676:	f7ff fbd9 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1a67a:	2800      	cmp	r0, #0
   1a67c:	d0f8      	beq.n	1a670 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
   1a67e:	1c76      	adds	r6, r6, #1
   1a680:	b2f6      	uxtb	r6, r6
   1a682:	42be      	cmp	r6, r7
   1a684:	d3e5      	bcc.n	1a652 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
   1a686:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a68a:	8020      	strh	r0, [r4, #0]
   1a68c:	2012      	movs	r0, #18
   1a68e:	e7ef      	b.n	1a670 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0001a690 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   1a690:	b570      	push	{r4, r5, r6, lr}
   1a692:	8050      	strh	r0, [r2, #2]
   1a694:	890c      	ldrh	r4, [r1, #8]
   1a696:	8094      	strh	r4, [r2, #4]
   1a698:	898b      	ldrh	r3, [r1, #12]
   1a69a:	80d3      	strh	r3, [r2, #6]
   1a69c:	8948      	ldrh	r0, [r1, #10]
   1a69e:	8110      	strh	r0, [r2, #8]
   1a6a0:	89cd      	ldrh	r5, [r1, #14]
   1a6a2:	8155      	strh	r5, [r2, #10]
   1a6a4:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
   1a6a6:	42ae      	cmp	r6, r5
   1a6a8:	d108      	bne.n	1a6bc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1a6aa:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
   1a6ac:	4285      	cmp	r5, r0
   1a6ae:	d105      	bne.n	1a6bc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1a6b0:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
   1a6b2:	429d      	cmp	r5, r3
   1a6b4:	d102      	bne.n	1a6bc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   1a6b6:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
   1a6b8:	42a3      	cmp	r3, r4
   1a6ba:	d001      	beq.n	1a6c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
   1a6bc:	2301      	movs	r3, #1
   1a6be:	e000      	b.n	1a6c2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   1a6c0:	2300      	movs	r3, #0
   1a6c2:	7313      	strb	r3, [r2, #12]
   1a6c4:	8548      	strh	r0, [r1, #42]	; 0x2a
   1a6c6:	8950      	ldrh	r0, [r2, #10]
   1a6c8:	85c8      	strh	r0, [r1, #46]	; 0x2e
   1a6ca:	8890      	ldrh	r0, [r2, #4]
   1a6cc:	8588      	strh	r0, [r1, #44]	; 0x2c
   1a6ce:	88d0      	ldrh	r0, [r2, #6]
   1a6d0:	8608      	strh	r0, [r1, #48]	; 0x30
   1a6d2:	2001      	movs	r0, #1
   1a6d4:	7010      	strb	r0, [r2, #0]
   1a6d6:	bd70      	pop	{r4, r5, r6, pc}

0001a6d8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   1a6d8:	b510      	push	{r4, lr}
   1a6da:	888c      	ldrh	r4, [r1, #4]
   1a6dc:	890a      	ldrh	r2, [r1, #8]
   1a6de:	884b      	ldrh	r3, [r1, #2]
   1a6e0:	88c9      	ldrh	r1, [r1, #6]
   1a6e2:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
   1a6e6:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
   1a6ea:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
   1a6ee:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
   1a6f2:	bd10      	pop	{r4, pc}

0001a6f4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   1a6f4:	b570      	push	{r4, r5, r6, lr}
   1a6f6:	4615      	mov	r5, r2
   1a6f8:	460c      	mov	r4, r1
   1a6fa:	f000 f8c7 	bl	1a88c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
   1a6fe:	3096      	adds	r0, #150	; 0x96
   1a700:	4428      	add	r0, r5
   1a702:	42a0      	cmp	r0, r4
   1a704:	d801      	bhi.n	1a70a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
   1a706:	1a20      	subs	r0, r4, r0
   1a708:	bd70      	pop	{r4, r5, r6, pc}
   1a70a:	2000      	movs	r0, #0
   1a70c:	bd70      	pop	{r4, r5, r6, pc}

0001a70e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   1a70e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a712:	4604      	mov	r4, r0
   1a714:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
   1a716:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
   1a718:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
   1a71c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   1a720:	4285      	cmp	r5, r0
   1a722:	d300      	bcc.n	1a726 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
   1a724:	4605      	mov	r5, r0
   1a726:	4620      	mov	r0, r4
   1a728:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   1a72c:	f000 f89e 	bl	1a86c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
   1a730:	4601      	mov	r1, r0
   1a732:	86e5      	strh	r5, [r4, #54]	; 0x36
   1a734:	8761      	strh	r1, [r4, #58]	; 0x3a
   1a736:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   1a738:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a73c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   1a73e:	4680      	mov	r8, r0
   1a740:	42aa      	cmp	r2, r5
   1a742:	d200      	bcs.n	1a746 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
   1a744:	462a      	mov	r2, r5
   1a746:	428b      	cmp	r3, r1
   1a748:	d200      	bcs.n	1a74c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
   1a74a:	460b      	mov	r3, r1
   1a74c:	8202      	strh	r2, [r0, #16]
   1a74e:	f8a8 3012 	strh.w	r3, [r8, #18]
   1a752:	42bd      	cmp	r5, r7
   1a754:	d101      	bne.n	1a75a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
   1a756:	42b1      	cmp	r1, r6
   1a758:	d001      	beq.n	1a75e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
   1a75a:	2001      	movs	r0, #1
   1a75c:	e000      	b.n	1a760 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
   1a75e:	2000      	movs	r0, #0
   1a760:	4681      	mov	r9, r0
   1a762:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
   1a766:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
   1a76a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
   1a76c:	8f26      	ldrh	r6, [r4, #56]	; 0x38
   1a76e:	4285      	cmp	r5, r0
   1a770:	d300      	bcc.n	1a774 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
   1a772:	4605      	mov	r5, r0
   1a774:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
   1a778:	4620      	mov	r0, r4
   1a77a:	f000 f87f 	bl	1a87c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
   1a77e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   1a782:	2902      	cmp	r1, #2
   1a784:	d108      	bne.n	1a798 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
   1a786:	42af      	cmp	r7, r5
   1a788:	d200      	bcs.n	1a78c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
   1a78a:	463d      	mov	r5, r7
   1a78c:	4286      	cmp	r6, r0
   1a78e:	d200      	bcs.n	1a792 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   1a790:	4630      	mov	r0, r6
   1a792:	2100      	movs	r1, #0
   1a794:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   1a798:	f8a8 5008 	strh.w	r5, [r8, #8]
   1a79c:	f8a8 000c 	strh.w	r0, [r8, #12]
   1a7a0:	42bd      	cmp	r5, r7
   1a7a2:	d101      	bne.n	1a7a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
   1a7a4:	42b0      	cmp	r0, r6
   1a7a6:	d001      	beq.n	1a7ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
   1a7a8:	2001      	movs	r0, #1
   1a7aa:	e000      	b.n	1a7ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
   1a7ac:	2000      	movs	r0, #0
   1a7ae:	ea40 0009 	orr.w	r0, r0, r9
   1a7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a7b6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
   1a7b6:	6840      	ldr	r0, [r0, #4]
   1a7b8:	4770      	bx	lr

0001a7ba <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   1a7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7be:	4616      	mov	r6, r2
   1a7c0:	460f      	mov	r7, r1
   1a7c2:	4604      	mov	r4, r0
   1a7c4:	f000 f862 	bl	1a88c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
   1a7c8:	4605      	mov	r5, r0
   1a7ca:	463a      	mov	r2, r7
   1a7cc:	68e1      	ldr	r1, [r4, #12]
   1a7ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a7d0:	f000 f847 	bl	1a862 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
   1a7d4:	19a9      	adds	r1, r5, r6
   1a7d6:	4281      	cmp	r1, r0
   1a7d8:	d300      	bcc.n	1a7dc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
   1a7da:	4608      	mov	r0, r1
   1a7dc:	6320      	str	r0, [r4, #48]	; 0x30
   1a7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a7e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   1a7e2:	221b      	movs	r2, #27
   1a7e4:	8402      	strh	r2, [r0, #32]
   1a7e6:	8382      	strh	r2, [r0, #28]
   1a7e8:	82c2      	strh	r2, [r0, #22]
   1a7ea:	8282      	strh	r2, [r0, #20]
   1a7ec:	8142      	strh	r2, [r0, #10]
   1a7ee:	8202      	strh	r2, [r0, #16]
   1a7f0:	8102      	strh	r2, [r0, #8]
   1a7f2:	8542      	strh	r2, [r0, #42]	; 0x2a
   1a7f4:	8582      	strh	r2, [r0, #44]	; 0x2c
   1a7f6:	8482      	strh	r2, [r0, #36]	; 0x24
   1a7f8:	2900      	cmp	r1, #0
   1a7fa:	d10a      	bne.n	1a812 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   1a7fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1a800:	8441      	strh	r1, [r0, #34]	; 0x22
   1a802:	83c1      	strh	r1, [r0, #30]
   1a804:	8341      	strh	r1, [r0, #26]
   1a806:	8301      	strh	r1, [r0, #24]
   1a808:	81c1      	strh	r1, [r0, #14]
   1a80a:	8241      	strh	r1, [r0, #18]
   1a80c:	8181      	strh	r1, [r0, #12]
   1a80e:	85c1      	strh	r1, [r0, #46]	; 0x2e
   1a810:	8601      	strh	r1, [r0, #48]	; 0x30
   1a812:	4770      	bx	lr

0001a814 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   1a814:	6800      	ldr	r0, [r0, #0]
   1a816:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   1a81a:	4290      	cmp	r0, r2
   1a81c:	d903      	bls.n	1a826 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
   1a81e:	1a40      	subs	r0, r0, r1
   1a820:	389c      	subs	r0, #156	; 0x9c
   1a822:	0840      	lsrs	r0, r0, #1
   1a824:	4770      	bx	lr
   1a826:	2000      	movs	r0, #0
   1a828:	4770      	bx	lr

0001a82a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   1a82a:	b510      	push	{r4, lr}
   1a82c:	9c02      	ldr	r4, [sp, #8]
   1a82e:	8281      	strh	r1, [r0, #20]
   1a830:	82c2      	strh	r2, [r0, #22]
   1a832:	8303      	strh	r3, [r0, #24]
   1a834:	8344      	strh	r4, [r0, #26]
   1a836:	bd10      	pop	{r4, pc}

0001a838 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   1a838:	8050      	strh	r0, [r2, #2]
   1a83a:	8a88      	ldrh	r0, [r1, #20]
   1a83c:	8090      	strh	r0, [r2, #4]
   1a83e:	8ac8      	ldrh	r0, [r1, #22]
   1a840:	80d0      	strh	r0, [r2, #6]
   1a842:	8b08      	ldrh	r0, [r1, #24]
   1a844:	8110      	strh	r0, [r2, #8]
   1a846:	8b48      	ldrh	r0, [r1, #26]
   1a848:	8150      	strh	r0, [r2, #10]
   1a84a:	2001      	movs	r0, #1
   1a84c:	7010      	strb	r0, [r2, #0]
   1a84e:	4770      	bx	lr
   1a850:	2902      	cmp	r1, #2
   1a852:	d003      	beq.n	1a85c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
   1a854:	00c0      	lsls	r0, r0, #3
   1a856:	3070      	adds	r0, #112	; 0x70
   1a858:	b280      	uxth	r0, r0
   1a85a:	4770      	bx	lr
   1a85c:	0080      	lsls	r0, r0, #2
   1a85e:	303c      	adds	r0, #60	; 0x3c
   1a860:	e7fa      	b.n	1a858 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
   1a862:	4288      	cmp	r0, r1
   1a864:	d300      	bcc.n	1a868 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
   1a866:	4608      	mov	r0, r1
   1a868:	1a80      	subs	r0, r0, r2
   1a86a:	4770      	bx	lr
   1a86c:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
   1a870:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
   1a874:	4281      	cmp	r1, r0
   1a876:	d200      	bcs.n	1a87a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
   1a878:	4608      	mov	r0, r1
   1a87a:	4770      	bx	lr
   1a87c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   1a880:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
   1a884:	4281      	cmp	r1, r0
   1a886:	d200      	bcs.n	1a88a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
   1a888:	4608      	mov	r0, r1
   1a88a:	4770      	bx	lr
   1a88c:	2196      	movs	r1, #150	; 0x96
   1a88e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
   1a892:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
   1a896:	f000 b800 	b.w	1a89a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
   1a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a89e:	460d      	mov	r5, r1
   1a8a0:	4606      	mov	r6, r0
   1a8a2:	4698      	mov	r8, r3
   1a8a4:	4617      	mov	r7, r2
   1a8a6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   1a8a8:	4611      	mov	r1, r2
   1a8aa:	f7ff ffd1 	bl	1a850 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
   1a8ae:	4604      	mov	r4, r0
   1a8b0:	4639      	mov	r1, r7
   1a8b2:	4630      	mov	r0, r6
   1a8b4:	f7ff ffe2 	bl	1a87c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
   1a8b8:	42a0      	cmp	r0, r4
   1a8ba:	d200      	bcs.n	1a8be <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
   1a8bc:	4604      	mov	r4, r0
   1a8be:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
   1a8c0:	4641      	mov	r1, r8
   1a8c2:	f7ff ffc5 	bl	1a850 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
   1a8c6:	4607      	mov	r7, r0
   1a8c8:	4641      	mov	r1, r8
   1a8ca:	4630      	mov	r0, r6
   1a8cc:	f7ff ffce 	bl	1a86c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
   1a8d0:	42b8      	cmp	r0, r7
   1a8d2:	d300      	bcc.n	1a8d6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
   1a8d4:	4638      	mov	r0, r7
   1a8d6:	4420      	add	r0, r4
   1a8d8:	4428      	add	r0, r5
   1a8da:	1d80      	adds	r0, r0, #6
   1a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a8e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
   1a8e0:	b510      	push	{r4, lr}
   1a8e2:	4604      	mov	r4, r0
   1a8e4:	2108      	movs	r1, #8
   1a8e6:	4620      	mov	r0, r4
   1a8e8:	f7f6 f888 	bl	109fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1a8ec:	6820      	ldr	r0, [r4, #0]
   1a8ee:	2800      	cmp	r0, #0
   1a8f0:	d102      	bne.n	1a8f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
   1a8f2:	6860      	ldr	r0, [r4, #4]
   1a8f4:	2800      	cmp	r0, #0
   1a8f6:	d0f5      	beq.n	1a8e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
   1a8f8:	bd10      	pop	{r4, pc}
   1a8fa:	2801      	cmp	r0, #1
   1a8fc:	d102      	bne.n	1a904 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
   1a8fe:	7948      	ldrb	r0, [r1, #5]
   1a900:	0980      	lsrs	r0, r0, #6
   1a902:	d001      	beq.n	1a908 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
   1a904:	2000      	movs	r0, #0
   1a906:	4770      	bx	lr
   1a908:	2001      	movs	r0, #1
   1a90a:	4770      	bx	lr
   1a90c:	2801      	cmp	r0, #1
   1a90e:	d106      	bne.n	1a91e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
   1a910:	7948      	ldrb	r0, [r1, #5]
   1a912:	2101      	movs	r1, #1
   1a914:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
   1a918:	d101      	bne.n	1a91e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
   1a91a:	2001      	movs	r0, #1
   1a91c:	4770      	bx	lr
   1a91e:	2000      	movs	r0, #0
   1a920:	4770      	bx	lr
   1a922:	2802      	cmp	r0, #2
   1a924:	d003      	beq.n	1a92e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
   1a926:	2803      	cmp	r0, #3
   1a928:	d001      	beq.n	1a92e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
   1a92a:	2000      	movs	r0, #0
   1a92c:	4770      	bx	lr
   1a92e:	2001      	movs	r0, #1
   1a930:	4770      	bx	lr

0001a932 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
   1a932:	b510      	push	{r4, lr}
   1a934:	4604      	mov	r4, r0
   1a936:	7c00      	ldrb	r0, [r0, #16]
   1a938:	f7ff fff3 	bl	1a922 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
   1a93c:	b148      	cbz	r0, 1a952 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
   1a93e:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
   1a942:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1a946:	f7ff fa2e 	bl	19da6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   1a94a:	2808      	cmp	r0, #8
   1a94c:	d001      	beq.n	1a952 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
   1a94e:	2001      	movs	r0, #1
   1a950:	bd10      	pop	{r4, pc}
   1a952:	7c20      	ldrb	r0, [r4, #16]
   1a954:	b118      	cbz	r0, 1a95e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
   1a956:	2802      	cmp	r0, #2
   1a958:	d001      	beq.n	1a95e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
   1a95a:	7de0      	ldrb	r0, [r4, #23]
   1a95c:	bd10      	pop	{r4, pc}
   1a95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a962:	2000      	movs	r0, #0
   1a964:	f7f6 beda 	b.w	1171c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0001a968 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
   1a968:	b508      	push	{r3, lr}
   1a96a:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
   1a96e:	f88d 1000 	strb.w	r1, [sp]
   1a972:	9900      	ldr	r1, [sp, #0]
   1a974:	9100      	str	r1, [sp, #0]
   1a976:	f89d 1000 	ldrb.w	r1, [sp]
   1a97a:	b109      	cbz	r1, 1a980 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
   1a97c:	2001      	movs	r0, #1
   1a97e:	bd08      	pop	{r3, pc}
   1a980:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   1a984:	f88d 0000 	strb.w	r0, [sp]
   1a988:	9800      	ldr	r0, [sp, #0]
   1a98a:	9000      	str	r0, [sp, #0]
   1a98c:	f89d 0000 	ldrb.w	r0, [sp]
   1a990:	2000      	movs	r0, #0
   1a992:	bd08      	pop	{r3, pc}

0001a994 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
   1a994:	20ff      	movs	r0, #255	; 0xff
   1a996:	7008      	strb	r0, [r1, #0]
   1a998:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   1a99a:	f7ff b955 	b.w	19c48 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0001a99e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
   1a99e:	b51c      	push	{r2, r3, r4, lr}
   1a9a0:	4604      	mov	r4, r0
   1a9a2:	22d4      	movs	r2, #212	; 0xd4
   1a9a4:	2100      	movs	r1, #0
   1a9a6:	f7fe f878 	bl	18a9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1a9aa:	20ff      	movs	r0, #255	; 0xff
   1a9ac:	7020      	strb	r0, [r4, #0]
   1a9ae:	207f      	movs	r0, #127	; 0x7f
   1a9b0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1a9b4:	2013      	movs	r0, #19
   1a9b6:	8060      	strh	r0, [r4, #2]
   1a9b8:	f7f6 fc60 	bl	1127c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
   1a9bc:	4601      	mov	r1, r0
   1a9be:	62e0      	str	r0, [r4, #44]	; 0x2c
   1a9c0:	2200      	movs	r2, #0
   1a9c2:	4668      	mov	r0, sp
   1a9c4:	f7ff f8ab 	bl	19b1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1a9c8:	2200      	movs	r2, #0
   1a9ca:	2101      	movs	r1, #1
   1a9cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a9ce:	f7ff f91b 	bl	19c08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1a9d2:	2204      	movs	r2, #4
   1a9d4:	4668      	mov	r0, sp
   1a9d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1a9d8:	f7ff f8a1 	bl	19b1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1a9dc:	2200      	movs	r2, #0
   1a9de:	4611      	mov	r1, r2
   1a9e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a9e2:	f7ff f911 	bl	19c08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1a9e6:	2000      	movs	r0, #0
   1a9e8:	73a0      	strb	r0, [r4, #14]
   1a9ea:	f104 0020 	add.w	r0, r4, #32
   1a9ee:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
   1a9f2:	f000 b962 	b.w	1acba <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0001a9f6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
   1a9f6:	7880      	ldrb	r0, [r0, #2]
   1a9f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1a9fc:	b108      	cbz	r0, 1aa02 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
   1a9fe:	2000      	movs	r0, #0
   1aa00:	4770      	bx	lr
   1aa02:	201f      	movs	r0, #31
   1aa04:	4770      	bx	lr

0001aa06 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
   1aa06:	f7f8 bfbf 	b.w	13988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0001aa0a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
   1aa0a:	6880      	ldr	r0, [r0, #8]
   1aa0c:	4770      	bx	lr

0001aa0e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
   1aa0e:	2001      	movs	r0, #1
   1aa10:	4770      	bx	lr

0001aa12 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
   1aa12:	b510      	push	{r4, lr}
   1aa14:	4604      	mov	r4, r0
   1aa16:	3020      	adds	r0, #32
   1aa18:	f000 f90f 	bl	1ac3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   1aa1c:	8861      	ldrh	r1, [r4, #2]
   1aa1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aa22:	2228      	movs	r2, #40	; 0x28
   1aa24:	f7f9 b990 	b.w	13d48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0001aa28 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
   1aa28:	2200      	movs	r2, #0
   1aa2a:	6282      	str	r2, [r0, #40]	; 0x28
   1aa2c:	8843      	ldrh	r3, [r0, #2]
   1aa2e:	2b1d      	cmp	r3, #29
   1aa30:	d001      	beq.n	1aa36 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
   1aa32:	7341      	strb	r1, [r0, #13]
   1aa34:	4770      	bx	lr
   1aa36:	7342      	strb	r2, [r0, #13]
   1aa38:	4770      	bx	lr

0001aa3a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
   1aa3a:	b510      	push	{r4, lr}
   1aa3c:	2400      	movs	r4, #0
   1aa3e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1aa40:	f7ff f8d0 	bl	19be4 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
   1aa44:	b100      	cbz	r0, 1aa48 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
   1aa46:	2001      	movs	r0, #1
   1aa48:	4384      	bics	r4, r0
   1aa4a:	f084 0001 	eor.w	r0, r4, #1
   1aa4e:	bd10      	pop	{r4, pc}

0001aa50 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
   1aa50:	2000      	movs	r0, #0
   1aa52:	4770      	bx	lr

0001aa54 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
   1aa54:	7880      	ldrb	r0, [r0, #2]
   1aa56:	f000 0001 	and.w	r0, r0, #1
   1aa5a:	4770      	bx	lr

0001aa5c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
   1aa5c:	7880      	ldrb	r0, [r0, #2]
   1aa5e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1aa62:	4770      	bx	lr

0001aa64 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
   1aa64:	2001      	movs	r0, #1
   1aa66:	4770      	bx	lr

0001aa68 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
   1aa68:	7880      	ldrb	r0, [r0, #2]
   1aa6a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1aa6e:	4770      	bx	lr

0001aa70 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
   1aa70:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1aa74:	4770      	bx	lr

0001aa76 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
   1aa76:	7800      	ldrb	r0, [r0, #0]
   1aa78:	28ff      	cmp	r0, #255	; 0xff
   1aa7a:	d001      	beq.n	1aa80 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
   1aa7c:	2001      	movs	r0, #1
   1aa7e:	4770      	bx	lr
   1aa80:	2000      	movs	r0, #0
   1aa82:	4770      	bx	lr

0001aa84 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
   1aa84:	680a      	ldr	r2, [r1, #0]
   1aa86:	f840 2f11 	str.w	r2, [r0, #17]!
   1aa8a:	8889      	ldrh	r1, [r1, #4]
   1aa8c:	8081      	strh	r1, [r0, #4]
   1aa8e:	2101      	movs	r1, #1
   1aa90:	7181      	strb	r1, [r0, #6]
   1aa92:	4770      	bx	lr

0001aa94 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
   1aa94:	7b00      	ldrb	r0, [r0, #12]
   1aa96:	4770      	bx	lr

0001aa98 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
   1aa98:	2001      	movs	r0, #1
   1aa9a:	4770      	bx	lr

0001aa9c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
   1aa9c:	61c1      	str	r1, [r0, #28]
   1aa9e:	4770      	bx	lr

0001aaa0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
   1aaa0:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
   1aaa4:	4770      	bx	lr

0001aaa6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
   1aaa6:	b570      	push	{r4, r5, r6, lr}
   1aaa8:	4604      	mov	r4, r0
   1aaaa:	7880      	ldrb	r0, [r0, #2]
   1aaac:	2501      	movs	r5, #1
   1aaae:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1aab2:	b138      	cbz	r0, 1aac4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
   1aab4:	233c      	movs	r3, #60	; 0x3c
   1aab6:	22ff      	movs	r2, #255	; 0xff
   1aab8:	4620      	mov	r0, r4
   1aaba:	69e1      	ldr	r1, [r4, #28]
   1aabc:	f7f8 ff90 	bl	139e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
   1aac0:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
   1aac4:	78a0      	ldrb	r0, [r4, #2]
   1aac6:	07c0      	lsls	r0, r0, #31
   1aac8:	f7f8 f88a 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1aacc:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
   1aad0:	bd70      	pop	{r4, r5, r6, pc}

0001aad2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
   1aad2:	7bc0      	ldrb	r0, [r0, #15]
   1aad4:	2800      	cmp	r0, #0
   1aad6:	d000      	beq.n	1aada <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
   1aad8:	2001      	movs	r0, #1
   1aada:	4770      	bx	lr
   1aadc:	b510      	push	{r4, lr}
   1aade:	f7ff f962 	bl	19da6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   1aae2:	4604      	mov	r4, r0
   1aae4:	f7f7 fcbc 	bl	12460 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
   1aae8:	b138      	cbz	r0, 1aafa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
   1aaea:	4620      	mov	r0, r4
   1aaec:	f7f7 fbf0 	bl	122d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   1aaf0:	b118      	cbz	r0, 1aafa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
   1aaf2:	2110      	movs	r1, #16
   1aaf4:	f7ff fb37 	bl	1a166 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   1aaf8:	b108      	cbz	r0, 1aafe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
   1aafa:	2000      	movs	r0, #0
   1aafc:	bd10      	pop	{r4, pc}
   1aafe:	2001      	movs	r0, #1
   1ab00:	bd10      	pop	{r4, pc}
   1ab02:	2101      	movs	r1, #1
   1ab04:	f7f8 bbcc 	b.w	132a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   1ab08:	2101      	movs	r1, #1
   1ab0a:	f7f8 bbc9 	b.w	132a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
   1ab0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab12:	4604      	mov	r4, r0
   1ab14:	2700      	movs	r7, #0
   1ab16:	704f      	strb	r7, [r1, #1]
   1ab18:	2011      	movs	r0, #17
   1ab1a:	460d      	mov	r5, r1
   1ab1c:	7008      	strb	r0, [r1, #0]
   1ab1e:	2220      	movs	r2, #32
   1ab20:	f104 0166 	add.w	r1, r4, #102	; 0x66
   1ab24:	1d28      	adds	r0, r5, #4
   1ab26:	f7fd ff3e 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1ab2a:	2601      	movs	r6, #1
   1ab2c:	722e      	strb	r6, [r5, #8]
   1ab2e:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
   1ab32:	7928      	ldrb	r0, [r5, #4]
   1ab34:	2800      	cmp	r0, #0
   1ab36:	d111      	bne.n	1ab5c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
   1ab38:	88e8      	ldrh	r0, [r5, #6]
   1ab3a:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
   1ab3e:	69e0      	ldr	r0, [r4, #28]
   1ab40:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   1ab44:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
   1ab48:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
   1ab4c:	8800      	ldrh	r0, [r0, #0]
   1ab4e:	f7f6 fad5 	bl	110fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1ab52:	f7fe fe04 	bl	1975e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   1ab56:	69e0      	ldr	r0, [r4, #28]
   1ab58:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
   1ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab64:	4604      	mov	r4, r0
   1ab66:	460f      	mov	r7, r1
   1ab68:	7e40      	ldrb	r0, [r0, #25]
   1ab6a:	f7f7 fb71 	bl	12250 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   1ab6e:	4606      	mov	r6, r0
   1ab70:	7e20      	ldrb	r0, [r4, #24]
   1ab72:	f104 0549 	add.w	r5, r4, #73	; 0x49
   1ab76:	b120      	cbz	r0, 1ab82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
   1ab78:	b11e      	cbz	r6, 1ab82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
   1ab7a:	7e60      	ldrb	r0, [r4, #25]
   1ab7c:	f7f7 fb5c 	bl	12238 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
   1ab80:	b1a0      	cbz	r0, 1abac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
   1ab82:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
   1ab86:	2800      	cmp	r0, #0
   1ab88:	d024      	beq.n	1abd4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
   1ab8a:	7ea0      	ldrb	r0, [r4, #26]
   1ab8c:	2800      	cmp	r0, #0
   1ab8e:	d021      	beq.n	1abd4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
   1ab90:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1ab94:	4629      	mov	r1, r5
   1ab96:	f7ff feb9 	bl	1a90c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
   1ab9a:	b1a8      	cbz	r0, 1abc8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
   1ab9c:	f7f7 fb48 	bl	12230 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
   1aba0:	463a      	mov	r2, r7
   1aba2:	4629      	mov	r1, r5
   1aba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1aba8:	f7ff b895 	b.w	19cd6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   1abac:	2001      	movs	r0, #1
   1abae:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
   1abb2:	463a      	mov	r2, r7
   1abb4:	4629      	mov	r1, r5
   1abb6:	4630      	mov	r0, r6
   1abb8:	f7ff f88d 	bl	19cd6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   1abbc:	7e61      	ldrb	r1, [r4, #25]
   1abbe:	4628      	mov	r0, r5
   1abc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1abc4:	f7f7 bb50 	b.w	12268 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
   1abc8:	4639      	mov	r1, r7
   1abca:	4628      	mov	r0, r5
   1abcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1abd0:	f7ff b870 	b.w	19cb4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
   1abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abd8:	b510      	push	{r4, lr}
   1abda:	4604      	mov	r4, r0
   1abdc:	4608      	mov	r0, r1
   1abde:	f7fc ffcd 	bl	17b7c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   1abe2:	7921      	ldrb	r1, [r4, #4]
   1abe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1abe8:	2025      	movs	r0, #37	; 0x25
   1abea:	f001 bdad 	b.w	1c748 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
   1abee:	b510      	push	{r4, lr}
   1abf0:	4604      	mov	r4, r0
   1abf2:	3026      	adds	r0, #38	; 0x26
   1abf4:	f7fc ff7e 	bl	17af4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   1abf8:	2800      	cmp	r0, #0
   1abfa:	d102      	bne.n	1ac02 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
   1abfc:	207f      	movs	r0, #127	; 0x7f
   1abfe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1ac02:	bd10      	pop	{r4, pc}
   1ac04:	7802      	ldrb	r2, [r0, #0]
   1ac06:	2320      	movs	r3, #32
   1ac08:	f022 0220 	bic.w	r2, r2, #32
   1ac0c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
   1ac10:	430a      	orrs	r2, r1
   1ac12:	7002      	strb	r2, [r0, #0]
   1ac14:	4770      	bx	lr

0001ac16 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   1ac16:	b570      	push	{r4, r5, r6, lr}
   1ac18:	7001      	strb	r1, [r0, #0]
   1ac1a:	7042      	strb	r2, [r0, #1]
   1ac1c:	4614      	mov	r4, r2
   1ac1e:	460d      	mov	r5, r1
   1ac20:	7880      	ldrb	r0, [r0, #2]
   1ac22:	f000 f87f 	bl	1ad24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   1ac26:	fb10 f005 	smulbb	r0, r0, r5
   1ac2a:	4360      	muls	r0, r4
   1ac2c:	28ff      	cmp	r0, #255	; 0xff
   1ac2e:	d303      	bcc.n	1ac38 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
   1ac30:	215c      	movs	r1, #92	; 0x5c
   1ac32:	202e      	movs	r0, #46	; 0x2e
   1ac34:	f7f5 fe48 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ac38:	bd70      	pop	{r4, r5, r6, pc}

0001ac3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   1ac3a:	b510      	push	{r4, lr}
   1ac3c:	4604      	mov	r4, r0
   1ac3e:	7880      	ldrb	r0, [r0, #2]
   1ac40:	f000 f870 	bl	1ad24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   1ac44:	7861      	ldrb	r1, [r4, #1]
   1ac46:	7822      	ldrb	r2, [r4, #0]
   1ac48:	fb11 f102 	smulbb	r1, r1, r2
   1ac4c:	4348      	muls	r0, r1
   1ac4e:	b2c0      	uxtb	r0, r0
   1ac50:	bd10      	pop	{r4, pc}

0001ac52 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   1ac52:	b510      	push	{r4, lr}
   1ac54:	4604      	mov	r4, r0
   1ac56:	f000 f84d 	bl	1acf4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
   1ac5a:	7961      	ldrb	r1, [r4, #5]
   1ac5c:	1c49      	adds	r1, r1, #1
   1ac5e:	b2c9      	uxtb	r1, r1
   1ac60:	7161      	strb	r1, [r4, #5]
   1ac62:	7862      	ldrb	r2, [r4, #1]
   1ac64:	4291      	cmp	r1, r2
   1ac66:	d10b      	bne.n	1ac80 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
   1ac68:	2200      	movs	r2, #0
   1ac6a:	7162      	strb	r2, [r4, #5]
   1ac6c:	78e1      	ldrb	r1, [r4, #3]
   1ac6e:	4301      	orrs	r1, r0
   1ac70:	70e1      	strb	r1, [r4, #3]
   1ac72:	78a3      	ldrb	r3, [r4, #2]
   1ac74:	4299      	cmp	r1, r3
   1ac76:	d103      	bne.n	1ac80 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
   1ac78:	70e2      	strb	r2, [r4, #3]
   1ac7a:	7921      	ldrb	r1, [r4, #4]
   1ac7c:	1c49      	adds	r1, r1, #1
   1ac7e:	7121      	strb	r1, [r4, #4]
   1ac80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ac84:	f000 b825 	b.w	1acd2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0001ac88 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   1ac88:	7081      	strb	r1, [r0, #2]
   1ac8a:	4770      	bx	lr

0001ac8c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   1ac8c:	b570      	push	{r4, r5, r6, lr}
   1ac8e:	4604      	mov	r4, r0
   1ac90:	7880      	ldrb	r0, [r0, #2]
   1ac92:	f000 f847 	bl	1ad24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   1ac96:	7861      	ldrb	r1, [r4, #1]
   1ac98:	fb11 f500 	smulbb	r5, r1, r0
   1ac9c:	78e0      	ldrb	r0, [r4, #3]
   1ac9e:	f000 f841 	bl	1ad24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   1aca2:	7861      	ldrb	r1, [r4, #1]
   1aca4:	7962      	ldrb	r2, [r4, #5]
   1aca6:	fb10 2001 	smlabb	r0, r0, r1, r2
   1acaa:	7821      	ldrb	r1, [r4, #0]
   1acac:	7922      	ldrb	r2, [r4, #4]
   1acae:	1a89      	subs	r1, r1, r2
   1acb0:	fb11 f105 	smulbb	r1, r1, r5
   1acb4:	1a08      	subs	r0, r1, r0
   1acb6:	b2c0      	uxtb	r0, r0
   1acb8:	bd70      	pop	{r4, r5, r6, pc}

0001acba <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   1acba:	2100      	movs	r1, #0
   1acbc:	6001      	str	r1, [r0, #0]
   1acbe:	8081      	strh	r1, [r0, #4]
   1acc0:	2101      	movs	r1, #1
   1acc2:	7041      	strb	r1, [r0, #1]
   1acc4:	7001      	strb	r1, [r0, #0]
   1acc6:	4770      	bx	lr

0001acc8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   1acc8:	2100      	movs	r1, #0
   1acca:	70c1      	strb	r1, [r0, #3]
   1accc:	7141      	strb	r1, [r0, #5]
   1acce:	7101      	strb	r1, [r0, #4]
   1acd0:	4770      	bx	lr
   1acd2:	b510      	push	{r4, lr}
   1acd4:	2801      	cmp	r0, #1
   1acd6:	d007      	beq.n	1ace8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
   1acd8:	2802      	cmp	r0, #2
   1acda:	d007      	beq.n	1acec <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
   1acdc:	2804      	cmp	r0, #4
   1acde:	d007      	beq.n	1acf0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
   1ace0:	2139      	movs	r1, #57	; 0x39
   1ace2:	202e      	movs	r0, #46	; 0x2e
   1ace4:	f7f5 fdf0 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ace8:	2025      	movs	r0, #37	; 0x25
   1acea:	bd10      	pop	{r4, pc}
   1acec:	2026      	movs	r0, #38	; 0x26
   1acee:	bd10      	pop	{r4, pc}
   1acf0:	2027      	movs	r0, #39	; 0x27
   1acf2:	bd10      	pop	{r4, pc}
   1acf4:	4601      	mov	r1, r0
   1acf6:	2000      	movs	r0, #0
   1acf8:	788a      	ldrb	r2, [r1, #2]
   1acfa:	07d3      	lsls	r3, r2, #31
   1acfc:	d002      	beq.n	1ad04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
   1acfe:	78cb      	ldrb	r3, [r1, #3]
   1ad00:	07db      	lsls	r3, r3, #31
   1ad02:	d006      	beq.n	1ad12 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
   1ad04:	0793      	lsls	r3, r2, #30
   1ad06:	d506      	bpl.n	1ad16 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
   1ad08:	78cb      	ldrb	r3, [r1, #3]
   1ad0a:	079b      	lsls	r3, r3, #30
   1ad0c:	d403      	bmi.n	1ad16 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
   1ad0e:	2002      	movs	r0, #2
   1ad10:	4770      	bx	lr
   1ad12:	2001      	movs	r0, #1
   1ad14:	4770      	bx	lr
   1ad16:	0752      	lsls	r2, r2, #29
   1ad18:	d5fc      	bpl.n	1ad14 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
   1ad1a:	78c9      	ldrb	r1, [r1, #3]
   1ad1c:	0749      	lsls	r1, r1, #29
   1ad1e:	d4f9      	bmi.n	1ad14 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
   1ad20:	2004      	movs	r0, #4
   1ad22:	4770      	bx	lr
   1ad24:	f3c0 0180 	ubfx	r1, r0, #2, #1
   1ad28:	f3c0 0240 	ubfx	r2, r0, #1, #1
   1ad2c:	4411      	add	r1, r2
   1ad2e:	f000 0001 	and.w	r0, r0, #1
   1ad32:	4408      	add	r0, r1
   1ad34:	4770      	bx	lr

0001ad36 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   1ad36:	f240 315a 	movw	r1, #858	; 0x35a
   1ad3a:	4348      	muls	r0, r1
   1ad3c:	4770      	bx	lr

0001ad3e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   1ad3e:	f240 20ef 	movw	r0, #751	; 0x2ef
   1ad42:	4770      	bx	lr
   1ad44:	041c020e 	.word	0x041c020e
   1ad48:	0c600630 	.word	0x0c600630
   1ad4c:	06b4035a 	.word	0x06b4035a
   1ad50:	0bf505c5 	.word	0x0bf505c5
   1ad54:	01a31225 	.word	0x01a31225
   1ad58:	05bf03b1 	.word	0x05bf03b1
   1ad5c:	064902ef 	.word	0x064902ef
   1ad60:	09a3      	.short	0x09a3

0001ad62 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
   1ad62:	b510      	push	{r4, lr}
   1ad64:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
   1ad68:	b109      	cbz	r1, 1ad6e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
   1ad6a:	2000      	movs	r0, #0
   1ad6c:	bd10      	pop	{r4, pc}
   1ad6e:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   1ad72:	b949      	cbnz	r1, 1ad88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
   1ad74:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
   1ad78:	b131      	cbz	r1, 1ad88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
   1ad7a:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   1ad7e:	428a      	cmp	r2, r1
   1ad80:	d902      	bls.n	1ad88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
   1ad82:	f7ff fe90 	bl	1aaa6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   1ad86:	e7f0      	b.n	1ad6a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
   1ad88:	2001      	movs	r0, #1
   1ad8a:	bd10      	pop	{r4, pc}

0001ad8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
   1ad8c:	b510      	push	{r4, lr}
   1ad8e:	b131      	cbz	r1, 1ad9e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
   1ad90:	2901      	cmp	r1, #1
   1ad92:	d008      	beq.n	1ada6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
   1ad94:	f240 718b 	movw	r1, #1931	; 0x78b
   1ad98:	2030      	movs	r0, #48	; 0x30
   1ad9a:	f7f5 fd95 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ad9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ada2:	f000 b9d4 	b.w	1b14e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
   1ada6:	2100      	movs	r1, #0
   1ada8:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
   1adac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1adb0:	f000 b93b 	b.w	1b02a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0001adb4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
   1adb4:	b510      	push	{r4, lr}
   1adb6:	4604      	mov	r4, r0
   1adb8:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   1adbc:	2800      	cmp	r0, #0
   1adbe:	d019      	beq.n	1adf4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
   1adc0:	2001      	movs	r0, #1
   1adc2:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
   1adc6:	4601      	mov	r1, r0
   1adc8:	4620      	mov	r0, r4
   1adca:	f7ff fe69 	bl	1aaa0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   1adce:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
   1add2:	b170      	cbz	r0, 1adf2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
   1add4:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
   1add8:	f7f3 fdf0 	bl	e9bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   1addc:	7820      	ldrb	r0, [r4, #0]
   1adde:	f7f3 ff3b 	bl	ec58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   1ade2:	f814 09a0 	ldrb.w	r0, [r4], #-160
   1ade6:	f7f3 ff15 	bl	ec14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1adea:	b120      	cbz	r0, 1adf6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
   1adec:	2000      	movs	r0, #0
   1adee:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
   1adf2:	2000      	movs	r0, #0
   1adf4:	bd10      	pop	{r4, pc}
   1adf6:	f240 2103 	movw	r1, #515	; 0x203
   1adfa:	2030      	movs	r0, #48	; 0x30
   1adfc:	f7f5 fd64 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001ae00 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
   1ae00:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1ae04:	4770      	bx	lr

0001ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
   1ae06:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   1ae0a:	4770      	bx	lr

0001ae0c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
   1ae0c:	b50e      	push	{r1, r2, r3, lr}
   1ae0e:	4669      	mov	r1, sp
   1ae10:	2001      	movs	r0, #1
   1ae12:	f7fe fdcd 	bl	199b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1ae16:	b138      	cbz	r0, 1ae28 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
   1ae18:	f44f 71a1 	mov.w	r1, #322	; 0x142
   1ae1c:	2030      	movs	r0, #48	; 0x30
   1ae1e:	f7f5 fd53 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ae22:	9802      	ldr	r0, [sp, #8]
   1ae24:	f7ff ffc6 	bl	1adb4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1ae28:	4668      	mov	r0, sp
   1ae2a:	f7f5 ff85 	bl	10d38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1ae2e:	2800      	cmp	r0, #0
   1ae30:	d0f7      	beq.n	1ae22 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
   1ae32:	f7f9 f913 	bl	1405c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
   1ae36:	2000      	movs	r0, #0
   1ae38:	bd0e      	pop	{r1, r2, r3, pc}

0001ae3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
   1ae3a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1ae3c:	4604      	mov	r4, r0
   1ae3e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   1ae42:	2800      	cmp	r0, #0
   1ae44:	d153      	bne.n	1aeee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1ae46:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1ae4a:	2803      	cmp	r0, #3
   1ae4c:	d14f      	bne.n	1aeee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1ae4e:	f7fd fc35 	bl	186bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1ae52:	4601      	mov	r1, r0
   1ae54:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
   1ae58:	f7f3 f938 	bl	e0cc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1ae5c:	2800      	cmp	r0, #0
   1ae5e:	dd46      	ble.n	1aeee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1ae60:	68e1      	ldr	r1, [r4, #12]
   1ae62:	b111      	cbz	r1, 1ae6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
   1ae64:	fbb0 f0f1 	udiv	r0, r0, r1
   1ae68:	e000      	b.n	1ae6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
   1ae6a:	2000      	movs	r0, #0
   1ae6c:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   1ae70:	1c40      	adds	r0, r0, #1
   1ae72:	4408      	add	r0, r1
   1ae74:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
   1ae78:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
   1ae7c:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
   1ae80:	1a08      	subs	r0, r1, r0
   1ae82:	b200      	sxth	r0, r0
   1ae84:	2800      	cmp	r0, #0
   1ae86:	dd32      	ble.n	1aeee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1ae88:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
   1ae8c:	f7f3 fd96 	bl	e9bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   1ae90:	2800      	cmp	r0, #0
   1ae92:	d02c      	beq.n	1aeee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1ae94:	2001      	movs	r0, #1
   1ae96:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
   1ae9a:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
   1ae9e:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
   1aea2:	ae01      	add	r6, sp, #4
   1aea4:	1a40      	subs	r0, r0, r1
   1aea6:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   1aeaa:	1e40      	subs	r0, r0, #1
   1aeac:	4408      	add	r0, r1
   1aeae:	b285      	uxth	r5, r0
   1aeb0:	e017      	b.n	1aee2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
   1aeb2:	9600      	str	r6, [sp, #0]
   1aeb4:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
   1aeb8:	2300      	movs	r3, #0
   1aeba:	2201      	movs	r2, #1
   1aebc:	4620      	mov	r0, r4
   1aebe:	f7f9 f99d 	bl	141fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   1aec2:	2800      	cmp	r0, #0
   1aec4:	d013      	beq.n	1aeee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
   1aec6:	2801      	cmp	r0, #1
   1aec8:	d004      	beq.n	1aed4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
   1aeca:	f240 6101 	movw	r1, #1537	; 0x601
   1aece:	2030      	movs	r0, #48	; 0x30
   1aed0:	f7f5 fcfa 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1aed4:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
   1aed8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1aedc:	4408      	add	r0, r1
   1aede:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
   1aee2:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
   1aee6:	1a28      	subs	r0, r5, r0
   1aee8:	b200      	sxth	r0, r0
   1aeea:	2800      	cmp	r0, #0
   1aeec:	dae1      	bge.n	1aeb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
   1aeee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1aef0:	2000      	movs	r0, #0
   1aef2:	4770      	bx	lr
   1aef4:	b570      	push	{r4, r5, r6, lr}
   1aef6:	4604      	mov	r4, r0
   1aef8:	2601      	movs	r6, #1
   1aefa:	f000 f90c 	bl	1b116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
   1aefe:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
   1af02:	2000      	movs	r0, #0
   1af04:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
   1af08:	2001      	movs	r0, #1
   1af0a:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
   1af0e:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
   1af12:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
   1af16:	b160      	cbz	r0, 1af32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
   1af18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1af1c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1af20:	f7f3 f8a2 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1af24:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1af28:	2100      	movs	r1, #0
   1af2a:	4628      	mov	r0, r5
   1af2c:	f7ff f861 	bl	19ff2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   1af30:	e00f      	b.n	1af52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
   1af32:	4620      	mov	r0, r4
   1af34:	f7ff fd69 	bl	1aa0a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1af38:	4606      	mov	r6, r0
   1af3a:	4631      	mov	r1, r6
   1af3c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1af40:	f7f3 f892 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1af44:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1af48:	4631      	mov	r1, r6
   1af4a:	4628      	mov	r0, r5
   1af4c:	f7ff f851 	bl	19ff2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   1af50:	1c46      	adds	r6, r0, #1
   1af52:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   1af56:	1c41      	adds	r1, r0, #1
   1af58:	290a      	cmp	r1, #10
   1af5a:	d202      	bcs.n	1af62 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
   1af5c:	4430      	add	r0, r6
   1af5e:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
   1af62:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1af66:	b130      	cbz	r0, 1af76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
   1af68:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   1af6c:	1c40      	adds	r0, r0, #1
   1af6e:	280a      	cmp	r0, #10
   1af70:	d301      	bcc.n	1af76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
   1af72:	2002      	movs	r0, #2
   1af74:	e000      	b.n	1af78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
   1af76:	2003      	movs	r0, #3
   1af78:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
   1af7c:	2100      	movs	r1, #0
   1af7e:	4620      	mov	r0, r4
   1af80:	f000 f822 	bl	1afc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
   1af84:	b120      	cbz	r0, 1af90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
   1af86:	4620      	mov	r0, r4
   1af88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1af8c:	f000 b80d 	b.w	1afaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   1af90:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
   1af94:	4629      	mov	r1, r5
   1af96:	f000 f8bc 	bl	1b112 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
   1af9a:	2800      	cmp	r0, #0
   1af9c:	d104      	bne.n	1afa8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
   1af9e:	f240 61a2 	movw	r1, #1698	; 0x6a2
   1afa2:	2030      	movs	r0, #48	; 0x30
   1afa4:	f7f5 fc90 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1afa8:	bd70      	pop	{r4, r5, r6, pc}
   1afaa:	b510      	push	{r4, lr}
   1afac:	4604      	mov	r4, r0
   1afae:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
   1afb2:	f7f3 fe2f 	bl	ec14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1afb6:	2000      	movs	r0, #0
   1afb8:	7520      	strb	r0, [r4, #20]
   1afba:	bd10      	pop	{r4, pc}
   1afbc:	b510      	push	{r4, lr}
   1afbe:	f7ff fd28 	bl	1aa12 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   1afc2:	f200 1009 	addw	r0, r0, #265	; 0x109
   1afc6:	bd10      	pop	{r4, pc}
   1afc8:	b570      	push	{r4, r5, r6, lr}
   1afca:	4604      	mov	r4, r0
   1afcc:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
   1afd0:	460d      	mov	r5, r1
   1afd2:	b108      	cbz	r0, 1afd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
   1afd4:	2001      	movs	r0, #1
   1afd6:	bd70      	pop	{r4, r5, r6, pc}
   1afd8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1afdc:	b1a8      	cbz	r0, 1b00a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
   1afde:	4620      	mov	r0, r4
   1afe0:	f7ff fd13 	bl	1aa0a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1afe4:	4405      	add	r5, r0
   1afe6:	4620      	mov	r0, r4
   1afe8:	f7ff ffe8 	bl	1afbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   1afec:	1941      	adds	r1, r0, r5
   1afee:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1aff2:	4288      	cmp	r0, r1
   1aff4:	d206      	bcs.n	1b004 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
   1aff6:	2001      	movs	r0, #1
   1aff8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
   1affc:	4620      	mov	r0, r4
   1affe:	f7ff fd52 	bl	1aaa6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   1b002:	e7e7      	b.n	1afd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
   1b004:	1b40      	subs	r0, r0, r5
   1b006:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
   1b00a:	2000      	movs	r0, #0
   1b00c:	bd70      	pop	{r4, r5, r6, pc}
   1b00e:	b510      	push	{r4, lr}
   1b010:	4604      	mov	r4, r0
   1b012:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   1b016:	f000 f9e8 	bl	1b3ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
   1b01a:	4602      	mov	r2, r0
   1b01c:	4620      	mov	r0, r4
   1b01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b022:	f240 111b 	movw	r1, #283	; 0x11b
   1b026:	f7ff bbc8 	b.w	1a7ba <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   1b02a:	b510      	push	{r4, lr}
   1b02c:	f7fc fbf8 	bl	17820 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   1b030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b034:	f7f3 bf44 	b.w	eec0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   1b038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b03c:	4604      	mov	r4, r0
   1b03e:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   1b042:	2800      	cmp	r0, #0
   1b044:	d051      	beq.n	1b0ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
   1b046:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1b04a:	2803      	cmp	r0, #3
   1b04c:	d14d      	bne.n	1b0ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
   1b04e:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
   1b052:	f001 fac2 	bl	1c5da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   1b056:	4605      	mov	r5, r0
   1b058:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   1b05c:	f7f8 fff0 	bl	14040 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   1b060:	4428      	add	r0, r5
   1b062:	b286      	uxth	r6, r0
   1b064:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   1b068:	f7f8 ffea 	bl	14040 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   1b06c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   1b070:	fa1f f880 	uxth.w	r8, r0
   1b074:	4648      	mov	r0, r9
   1b076:	f001 fb49 	bl	1c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1b07a:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
   1b07e:	1a0d      	subs	r5, r1, r0
   1b080:	4648      	mov	r0, r9
   1b082:	f001 fb51 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b086:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1b08a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1b08e:	fbb0 f0fa 	udiv	r0, r0, sl
   1b092:	1a2d      	subs	r5, r5, r0
   1b094:	4648      	mov	r0, r9
   1b096:	f001 fb39 	bl	1c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1b09a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   1b09e:	1a0f      	subs	r7, r1, r0
   1b0a0:	4648      	mov	r0, r9
   1b0a2:	f001 fb41 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b0a6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1b0aa:	4401      	add	r1, r0
   1b0ac:	fbb1 f0fa 	udiv	r0, r1, sl
   1b0b0:	1a39      	subs	r1, r7, r0
   1b0b2:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
   1b0b6:	4370      	muls	r0, r6
   1b0b8:	fbb0 f2f8 	udiv	r2, r0, r8
   1b0bc:	2029      	movs	r0, #41	; 0x29
   1b0be:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   1b0c2:	3260      	adds	r2, #96	; 0x60
   1b0c4:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
   1b0c8:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   1b0cc:	42a9      	cmp	r1, r5
   1b0ce:	d801      	bhi.n	1b0d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
   1b0d0:	4285      	cmp	r5, r0
   1b0d2:	d901      	bls.n	1b0d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
   1b0d4:	f7f5 f85a 	bl	1018c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   1b0d8:	4631      	mov	r1, r6
   1b0da:	68e0      	ldr	r0, [r4, #12]
   1b0dc:	f7fd fb22 	bl	18724 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1b0e0:	2100      	movs	r1, #0
   1b0e2:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
   1b0e6:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
   1b0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b0ee:	b570      	push	{r4, r5, r6, lr}
   1b0f0:	460c      	mov	r4, r1
   1b0f2:	4605      	mov	r5, r0
   1b0f4:	f001 fb18 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b0f8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1b0fc:	4408      	add	r0, r1
   1b0fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b102:	fbb0 f6f1 	udiv	r6, r0, r1
   1b106:	4628      	mov	r0, r5
   1b108:	f001 fb00 	bl	1c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1b10c:	4430      	add	r0, r6
   1b10e:	4420      	add	r0, r4
   1b110:	bd70      	pop	{r4, r5, r6, pc}
   1b112:	f7f3 b923 	b.w	e35c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   1b116:	b510      	push	{r4, lr}
   1b118:	4604      	mov	r4, r0
   1b11a:	f7ff fca3 	bl	1aa64 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1b11e:	b1a0      	cbz	r0, 1b14a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
   1b120:	4620      	mov	r0, r4
   1b122:	f7ff fc97 	bl	1aa54 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1b126:	b918      	cbnz	r0, 1b130 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
   1b128:	4620      	mov	r0, r4
   1b12a:	f7ff fc9d 	bl	1aa68 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1b12e:	b120      	cbz	r0, 1b13a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
   1b130:	2449      	movs	r4, #73	; 0x49
   1b132:	f001 fab7 	bl	1c6a4 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
   1b136:	b928      	cbnz	r0, 1b144 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
   1b138:	e001      	b.n	1b13e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
   1b13a:	2442      	movs	r4, #66	; 0x42
   1b13c:	e7f9      	b.n	1b132 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
   1b13e:	f001 faa7 	bl	1c690 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
   1b142:	b100      	cbz	r0, 1b146 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
   1b144:	1de4      	adds	r4, r4, #7
   1b146:	4620      	mov	r0, r4
   1b148:	bd10      	pop	{r4, pc}
   1b14a:	206b      	movs	r0, #107	; 0x6b
   1b14c:	bd10      	pop	{r4, pc}
   1b14e:	b570      	push	{r4, r5, r6, lr}
   1b150:	4604      	mov	r4, r0
   1b152:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
   1b156:	2500      	movs	r5, #0
   1b158:	b118      	cbz	r0, 1b162 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
   1b15a:	2001      	movs	r0, #1
   1b15c:	f000 f887 	bl	1b26e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
   1b160:	4605      	mov	r5, r0
   1b162:	4620      	mov	r0, r4
   1b164:	f7ff fc51 	bl	1aa0a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1b168:	1941      	adds	r1, r0, r5
   1b16a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1b16e:	34b8      	adds	r4, #184	; 0xb8
   1b170:	f7f2 ff7a 	bl	e068 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1b174:	2600      	movs	r6, #0
   1b176:	60e0      	str	r0, [r4, #12]
   1b178:	f804 6b0b 	strb.w	r6, [r4], #11
   1b17c:	2001      	movs	r0, #1
   1b17e:	f804 0901 	strb.w	r0, [r4], #-1
   1b182:	2003      	movs	r0, #3
   1b184:	f804 09c2 	strb.w	r0, [r4], #-194
   1b188:	4620      	mov	r0, r4
   1b18a:	f7ff ffc4 	bl	1b116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
   1b18e:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
   1b192:	4629      	mov	r1, r5
   1b194:	4620      	mov	r0, r4
   1b196:	f7ff ff17 	bl	1afc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
   1b19a:	b930      	cbnz	r0, 1b1aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
   1b19c:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
   1b1a0:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
   1b1a4:	f7ff ffb5 	bl	1b112 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
   1b1a8:	b128      	cbz	r0, 1b1b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
   1b1aa:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
   1b1ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b1b2:	f7ff bf3a 	b.w	1b02a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
   1b1b6:	f240 61eb 	movw	r1, #1771	; 0x6eb
   1b1ba:	2030      	movs	r0, #48	; 0x30
   1b1bc:	f7f5 fb84 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b1c0:	b510      	push	{r4, lr}
   1b1c2:	4604      	mov	r4, r0
   1b1c4:	2000      	movs	r0, #0
   1b1c6:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
   1b1ca:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
   1b1ce:	f7f3 fd21 	bl	ec14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1b1d2:	2020      	movs	r0, #32
   1b1d4:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
   1b1d8:	bd10      	pop	{r4, pc}
   1b1da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b1de:	2500      	movs	r5, #0
   1b1e0:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
   1b1e4:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
   1b1e8:	4688      	mov	r8, r1
   1b1ea:	4604      	mov	r4, r0
   1b1ec:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
   1b1f0:	2701      	movs	r7, #1
   1b1f2:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
   1b1f6:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1b1fa:	4639      	mov	r1, r7
   1b1fc:	34a0      	adds	r4, #160	; 0xa0
   1b1fe:	f7f7 faa1 	bl	12744 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   1b202:	6860      	ldr	r0, [r4, #4]
   1b204:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
   1b208:	6861      	ldr	r1, [r4, #4]
   1b20a:	7820      	ldrb	r0, [r4, #0]
   1b20c:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   1b210:	6861      	ldr	r1, [r4, #4]
   1b212:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
   1b216:	6860      	ldr	r0, [r4, #4]
   1b218:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
   1b21c:	6864      	ldr	r4, [r4, #4]
   1b21e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
   1b222:	2300      	movs	r3, #0
   1b224:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
   1b228:	461a      	mov	r2, r3
   1b22a:	4619      	mov	r1, r3
   1b22c:	4620      	mov	r0, r4
   1b22e:	9500      	str	r5, [sp, #0]
   1b230:	f7f8 ffe4 	bl	141fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   1b234:	b120      	cbz	r0, 1b240 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
   1b236:	f240 2117 	movw	r1, #535	; 0x217
   1b23a:	2030      	movs	r0, #48	; 0x30
   1b23c:	f7f5 fb44 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b240:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
   1b244:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
   1b248:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
   1b24c:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
   1b250:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
   1b254:	f504 7498 	add.w	r4, r4, #304	; 0x130
   1b258:	7665      	strb	r5, [r4, #25]
   1b25a:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
   1b25e:	1e40      	subs	r0, r0, #1
   1b260:	f824 0cbc 	strh.w	r0, [r4, #-188]
   1b264:	86e5      	strh	r5, [r4, #54]	; 0x36
   1b266:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b26a:	f7ff bede 	b.w	1b02a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
   1b26e:	b510      	push	{r4, lr}
   1b270:	f7f9 f9d0 	bl	14614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
   1b274:	f242 7110 	movw	r1, #10000	; 0x2710
   1b278:	fbb0 f2f1 	udiv	r2, r0, r1
   1b27c:	fb01 0012 	mls	r0, r1, r2, r0
   1b280:	bd10      	pop	{r4, pc}
   1b282:	b570      	push	{r4, r5, r6, lr}
   1b284:	b140      	cbz	r0, 1b298 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
   1b286:	2909      	cmp	r1, #9
   1b288:	d248      	bcs.n	1b31c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
   1b28a:	e8df f001 	tbb	[pc, r1]
   1b28e:	1507      	.short	0x1507
   1b290:	47373b3b 	.word	0x47373b3b
   1b294:	00433f29 	.word	0x00433f29
   1b298:	21cd      	movs	r1, #205	; 0xcd
   1b29a:	e03c      	b.n	1b316 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1b29c:	4604      	mov	r4, r0
   1b29e:	f7f7 ffcf 	bl	13240 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   1b2a2:	b110      	cbz	r0, 1b2aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
   1b2a4:	f240 2175 	movw	r1, #629	; 0x275
   1b2a8:	e035      	b.n	1b316 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1b2aa:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b2ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b2b2:	38f8      	subs	r0, #248	; 0xf8
   1b2b4:	f7f3 bee6 	b.w	f084 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   1b2b8:	4605      	mov	r5, r0
   1b2ba:	f7ff fbcf 	bl	1aa5c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1b2be:	b9a8      	cbnz	r0, 1b2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
   1b2c0:	4628      	mov	r0, r5
   1b2c2:	f7ff fe7b 	bl	1afbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   1b2c6:	4604      	mov	r4, r0
   1b2c8:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1b2cc:	42a0      	cmp	r0, r4
   1b2ce:	d20b      	bcs.n	1b2e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
   1b2d0:	1a20      	subs	r0, r4, r0
   1b2d2:	2104      	movs	r1, #4
   1b2d4:	f7f2 fdf6 	bl	dec4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1b2d8:	b130      	cbz	r0, 1b2e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
   1b2da:	4628      	mov	r0, r5
   1b2dc:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
   1b2e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b2e4:	f7ff bb8f 	b.w	1aa06 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   1b2e8:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
   1b2ec:	4628      	mov	r0, r5
   1b2ee:	f7f7 ffc3 	bl	13278 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   1b2f2:	2800      	cmp	r0, #0
   1b2f4:	d014      	beq.n	1b320 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
   1b2f6:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   1b2fa:	e00c      	b.n	1b316 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1b2fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b300:	f7fc bc42 	b.w	17b88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   1b304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b308:	f7ff bdf4 	b.w	1aef4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
   1b30c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b310:	f7ff be4b 	b.w	1afaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   1b314:	21ed      	movs	r1, #237	; 0xed
   1b316:	2030      	movs	r0, #48	; 0x30
   1b318:	f7f5 fad6 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b31c:	21f1      	movs	r1, #241	; 0xf1
   1b31e:	e7fa      	b.n	1b316 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1b320:	bd70      	pop	{r4, r5, r6, pc}
   1b322:	b510      	push	{r4, lr}
   1b324:	0004      	movs	r4, r0
   1b326:	d008      	beq.n	1b33a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
   1b328:	2909      	cmp	r1, #9
   1b32a:	d25c      	bcs.n	1b3e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
   1b32c:	e8df f001 	tbb	[pc, r1]
   1b330:	3e3e3607 	.word	0x3e3e3607
   1b334:	4a435b3a 	.word	0x4a435b3a
   1b338:	0057      	.short	0x0057
   1b33a:	2196      	movs	r1, #150	; 0x96
   1b33c:	e050      	b.n	1b3e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   1b33e:	2100      	movs	r1, #0
   1b340:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
   1b344:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   1b348:	4620      	mov	r0, r4
   1b34a:	b189      	cbz	r1, 1b370 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
   1b34c:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
   1b350:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
   1b354:	428a      	cmp	r2, r1
   1b356:	d106      	bne.n	1b366 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
   1b358:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
   1b35c:	1a51      	subs	r1, r2, r1
   1b35e:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   1b362:	4611      	mov	r1, r2
   1b364:	e00d      	b.n	1b382 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
   1b366:	1a51      	subs	r1, r2, r1
   1b368:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   1b36c:	b291      	uxth	r1, r2
   1b36e:	e008      	b.n	1b382 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
   1b370:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
   1b374:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
   1b378:	1a89      	subs	r1, r1, r2
   1b37a:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   1b37e:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
   1b382:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
   1b386:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
   1b38a:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
   1b38e:	f7f9 fb5d 	bl	14a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   1b392:	4620      	mov	r0, r4
   1b394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b398:	f7f9 b946 	b.w	14628 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
   1b39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b3a0:	f000 b905 	b.w	1b5ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   1b3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b3a8:	f7fc bbee 	b.w	17b88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   1b3ac:	4620      	mov	r0, r4
   1b3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b3b2:	f000 b827 	b.w	1b404 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
   1b3b6:	2001      	movs	r0, #1
   1b3b8:	f7f2 fd74 	bl	dea4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   1b3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b3c0:	f7fe bcbe 	b.w	19d40 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   1b3c4:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   1b3c8:	2804      	cmp	r0, #4
   1b3ca:	d001      	beq.n	1b3d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
   1b3cc:	21b8      	movs	r1, #184	; 0xb8
   1b3ce:	e007      	b.n	1b3e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   1b3d0:	4620      	mov	r0, r4
   1b3d2:	f7ff fef5 	bl	1b1c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
   1b3d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b3da:	f7f7 bc01 	b.w	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1b3de:	21c1      	movs	r1, #193	; 0xc1
   1b3e0:	2030      	movs	r0, #48	; 0x30
   1b3e2:	f7f5 fa71 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b3e6:	21c5      	movs	r1, #197	; 0xc5
   1b3e8:	e7fa      	b.n	1b3e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   1b3ea:	b510      	push	{r4, lr}
   1b3ec:	f001 f99c 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1b3f0:	f64d 7141 	movw	r1, #57153	; 0xdf41
   1b3f4:	4408      	add	r0, r1
   1b3f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b3fa:	fbb0 f0f1 	udiv	r0, r0, r1
   1b3fe:	f500 70bb 	add.w	r0, r0, #374	; 0x176
   1b402:	bd10      	pop	{r4, pc}
   1b404:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1b406:	4604      	mov	r4, r0
   1b408:	f7fd f958 	bl	186bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1b40c:	4601      	mov	r1, r0
   1b40e:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
   1b412:	f7f2 fe5b 	bl	e0cc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1b416:	68e1      	ldr	r1, [r4, #12]
   1b418:	b111      	cbz	r1, 1b420 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
   1b41a:	fbb0 f0f1 	udiv	r0, r0, r1
   1b41e:	e000      	b.n	1b422 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
   1b420:	2000      	movs	r0, #0
   1b422:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
   1b426:	290d      	cmp	r1, #13
   1b428:	d00c      	beq.n	1b444 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
   1b42a:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
   1b42e:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
   1b432:	1813      	adds	r3, r2, r0
   1b434:	1acb      	subs	r3, r1, r3
   1b436:	b21b      	sxth	r3, r3
   1b438:	2b00      	cmp	r3, #0
   1b43a:	db06      	blt.n	1b44a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
   1b43c:	1c49      	adds	r1, r1, #1
   1b43e:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
   1b442:	e006      	b.n	1b452 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
   1b444:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   1b448:	e012      	b.n	1b470 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
   1b44a:	1c40      	adds	r0, r0, #1
   1b44c:	4410      	add	r0, r2
   1b44e:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   1b452:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   1b456:	f88d 0000 	strb.w	r0, [sp]
   1b45a:	9800      	ldr	r0, [sp, #0]
   1b45c:	9000      	str	r0, [sp, #0]
   1b45e:	f89d 0000 	ldrb.w	r0, [sp]
   1b462:	b940      	cbnz	r0, 1b476 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
   1b464:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   1b468:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
   1b46c:	4288      	cmp	r0, r1
   1b46e:	d102      	bne.n	1b476 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
   1b470:	1c40      	adds	r0, r0, #1
   1b472:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   1b476:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
   1b47a:	1c40      	adds	r0, r0, #1
   1b47c:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
   1b480:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
   1b484:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
   1b488:	1a40      	subs	r0, r0, r1
   1b48a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   1b48e:	1e40      	subs	r0, r0, #1
   1b490:	4408      	add	r0, r1
   1b492:	b285      	uxth	r5, r0
   1b494:	e026      	b.n	1b4e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   1b496:	a801      	add	r0, sp, #4
   1b498:	2300      	movs	r3, #0
   1b49a:	9000      	str	r0, [sp, #0]
   1b49c:	461a      	mov	r2, r3
   1b49e:	4620      	mov	r0, r4
   1b4a0:	f7f8 feac 	bl	141fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   1b4a4:	2800      	cmp	r0, #0
   1b4a6:	d038      	beq.n	1b51a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
   1b4a8:	2801      	cmp	r0, #1
   1b4aa:	d004      	beq.n	1b4b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
   1b4ac:	f240 614e 	movw	r1, #1614	; 0x64e
   1b4b0:	2030      	movs	r0, #48	; 0x30
   1b4b2:	f7f5 fa09 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b4b6:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   1b4ba:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
   1b4be:	1a42      	subs	r2, r0, r1
   1b4c0:	b212      	sxth	r2, r2
   1b4c2:	2a00      	cmp	r2, #0
   1b4c4:	da09      	bge.n	1b4da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
   1b4c6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b4ca:	4402      	add	r2, r0
   1b4cc:	1aaa      	subs	r2, r5, r2
   1b4ce:	b212      	sxth	r2, r2
   1b4d0:	2a00      	cmp	r2, #0
   1b4d2:	da02      	bge.n	1b4da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
   1b4d4:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
   1b4d8:	e004      	b.n	1b4e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   1b4da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1b4de:	4408      	add	r0, r1
   1b4e0:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   1b4e4:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
   1b4e8:	1a68      	subs	r0, r5, r1
   1b4ea:	b200      	sxth	r0, r0
   1b4ec:	2800      	cmp	r0, #0
   1b4ee:	dad2      	bge.n	1b496 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
   1b4f0:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
   1b4f4:	b178      	cbz	r0, 1b516 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
   1b4f6:	2008      	movs	r0, #8
   1b4f8:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
   1b4fc:	2001      	movs	r0, #1
   1b4fe:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
   1b502:	4620      	mov	r0, r4
   1b504:	f000 f855 	bl	1b5b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   1b508:	4620      	mov	r0, r4
   1b50a:	f7ff fe59 	bl	1b1c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
   1b50e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   1b512:	f7f7 bb65 	b.w	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1b516:	203e      	movs	r0, #62	; 0x3e
   1b518:	e7ee      	b.n	1b4f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
   1b51a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b51c:	00fa01f4 	.word	0x00fa01f4
   1b520:	00640096 	.word	0x00640096
   1b524:	0032004b 	.word	0x0032004b
   1b528:	0014001e 	.word	0x0014001e
   1b52c:	0005000a 	.word	0x0005000a
   1b530:	00010002 	.word	0x00010002
   1b534:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1b538:	f001 0307 	and.w	r3, r1, #7
   1b53c:	7802      	ldrb	r2, [r0, #0]
   1b53e:	2101      	movs	r1, #1
   1b540:	4099      	lsls	r1, r3
   1b542:	438a      	bics	r2, r1
   1b544:	7002      	strb	r2, [r0, #0]
   1b546:	4770      	bx	lr

0001b548 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   1b548:	b510      	push	{r4, lr}
   1b54a:	4604      	mov	r4, r0
   1b54c:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
   1b550:	68e1      	ldr	r1, [r4, #12]
   1b552:	4288      	cmp	r0, r1
   1b554:	d109      	bne.n	1b56a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   1b556:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   1b55a:	8aa2      	ldrh	r2, [r4, #20]
   1b55c:	4291      	cmp	r1, r2
   1b55e:	d104      	bne.n	1b56a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   1b560:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
   1b564:	8ae2      	ldrh	r2, [r4, #22]
   1b566:	4291      	cmp	r1, r2
   1b568:	d013      	beq.n	1b592 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
   1b56a:	8821      	ldrh	r1, [r4, #0]
   1b56c:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
   1b570:	f7fe fc6d 	bl	19e4e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   1b574:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
   1b578:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
   1b57c:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
   1b580:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
   1b584:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
   1b588:	2001      	movs	r0, #1
   1b58a:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
   1b58e:	f7f7 fb27 	bl	12be0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1b592:	2102      	movs	r1, #2
   1b594:	4620      	mov	r0, r4
   1b596:	f7f7 f8d5 	bl	12744 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   1b59a:	2000      	movs	r0, #0
   1b59c:	f804 0f7e 	strb.w	r0, [r4, #126]!
   1b5a0:	2003      	movs	r0, #3
   1b5a2:	70e0      	strb	r0, [r4, #3]
   1b5a4:	bd10      	pop	{r4, pc}

0001b5a6 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   1b5a6:	f7f5 bd35 	b.w	11014 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0001b5aa <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   1b5aa:	2000      	movs	r0, #0
   1b5ac:	4770      	bx	lr

0001b5ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   1b5ae:	f7f6 ba69 	b.w	11a84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0001b5b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   1b5b2:	2100      	movs	r1, #0
   1b5b4:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
   1b5b8:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   1b5bc:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
   1b5c0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
   1b5c4:	b109      	cbz	r1, 1b5ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   1b5c6:	2102      	movs	r1, #2
   1b5c8:	e000      	b.n	1b5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   1b5ca:	2103      	movs	r1, #3
   1b5cc:	f7f8 bce6 	b.w	13f9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   1b5d0:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
   1b5d4:	28fe      	cmp	r0, #254	; 0xfe
   1b5d6:	d001      	beq.n	1b5dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   1b5d8:	2001      	movs	r0, #1
   1b5da:	4770      	bx	lr
   1b5dc:	2000      	movs	r0, #0
   1b5de:	4770      	bx	lr
   1b5e0:	b510      	push	{r4, lr}
   1b5e2:	2801      	cmp	r0, #1
   1b5e4:	d006      	beq.n	1b5f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1b5e6:	2802      	cmp	r0, #2
   1b5e8:	d004      	beq.n	1b5f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1b5ea:	f240 2163 	movw	r1, #611	; 0x263
   1b5ee:	2006      	movs	r0, #6
   1b5f0:	f7f5 f96a 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b5f4:	bd10      	pop	{r4, pc}
   1b5f6:	2801      	cmp	r0, #1
   1b5f8:	d002      	beq.n	1b600 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   1b5fa:	2802      	cmp	r0, #2
   1b5fc:	d105      	bne.n	1b60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   1b5fe:	e002      	b.n	1b606 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   1b600:	2901      	cmp	r1, #1
   1b602:	d004      	beq.n	1b60e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   1b604:	e001      	b.n	1b60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   1b606:	2902      	cmp	r1, #2
   1b608:	d001      	beq.n	1b60e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   1b60a:	2000      	movs	r0, #0
   1b60c:	4770      	bx	lr
   1b60e:	2001      	movs	r0, #1
   1b610:	4770      	bx	lr
   1b612:	1a40      	subs	r0, r0, r1
   1b614:	b200      	sxth	r0, r0
   1b616:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1b61a:	4288      	cmp	r0, r1
   1b61c:	dc01      	bgt.n	1b622 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   1b61e:	2800      	cmp	r0, #0
   1b620:	dc01      	bgt.n	1b626 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   1b622:	2001      	movs	r0, #1
   1b624:	4770      	bx	lr
   1b626:	2000      	movs	r0, #0
   1b628:	4770      	bx	lr
   1b62a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1b62e:	f001 0107 	and.w	r1, r1, #7
   1b632:	7800      	ldrb	r0, [r0, #0]
   1b634:	2201      	movs	r2, #1
   1b636:	408a      	lsls	r2, r1
   1b638:	4010      	ands	r0, r2
   1b63a:	40c8      	lsrs	r0, r1
   1b63c:	4770      	bx	lr
   1b63e:	b118      	cbz	r0, 1b648 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
   1b640:	2802      	cmp	r0, #2
   1b642:	d001      	beq.n	1b648 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
   1b644:	2001      	movs	r0, #1
   1b646:	4770      	bx	lr
   1b648:	2000      	movs	r0, #0
   1b64a:	4770      	bx	lr

0001b64c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   1b64c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1b64e:	7881      	ldrb	r1, [r0, #2]
   1b650:	4604      	mov	r4, r0
   1b652:	291a      	cmp	r1, #26
   1b654:	d025      	beq.n	1b6a2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   1b656:	dc0e      	bgt.n	1b676 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   1b658:	2916      	cmp	r1, #22
   1b65a:	d22d      	bcs.n	1b6b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b65c:	e8df f001 	tbb	[pc, r1]
   1b660:	2c2c2c2c 	.word	0x2c2c2c2c
   1b664:	2c2c212c 	.word	0x2c2c212c
   1b668:	2c2c2c2c 	.word	0x2c2c2c2c
   1b66c:	2c2c2c2c 	.word	0x2c2c2c2c
   1b670:	212c2c2c 	.word	0x212c2c2c
   1b674:	2121      	.short	0x2121
   1b676:	292a      	cmp	r1, #42	; 0x2a
   1b678:	d01e      	beq.n	1b6b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b67a:	dc0b      	bgt.n	1b694 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   1b67c:	f1a1 011e 	sub.w	r1, r1, #30
   1b680:	290c      	cmp	r1, #12
   1b682:	d219      	bcs.n	1b6b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b684:	e8df f001 	tbb	[pc, r1]
   1b688:	18181818 	.word	0x18181818
   1b68c:	18181818 	.word	0x18181818
   1b690:	0d181818 	.word	0x0d181818
   1b694:	393a      	subs	r1, #58	; 0x3a
   1b696:	2904      	cmp	r1, #4
   1b698:	d20e      	bcs.n	1b6b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b69a:	e8df f001 	tbb	[pc, r1]
   1b69e:	020d      	.short	0x020d
   1b6a0:	020d      	.short	0x020d
   1b6a2:	8820      	ldrh	r0, [r4, #0]
   1b6a4:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   1b6a8:	d206      	bcs.n	1b6b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1b6aa:	2701      	movs	r7, #1
   1b6ac:	4669      	mov	r1, sp
   1b6ae:	f7fe fbbd 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1b6b2:	b118      	cbz	r0, 1b6bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   1b6b4:	2002      	movs	r0, #2
   1b6b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b6b8:	2012      	movs	r0, #18
   1b6ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b6bc:	9d01      	ldr	r5, [sp, #4]
   1b6be:	4668      	mov	r0, sp
   1b6c0:	462e      	mov	r6, r5
   1b6c2:	f505 75bc 	add.w	r5, r5, #376	; 0x178
   1b6c6:	f206 1679 	addw	r6, r6, #377	; 0x179
   1b6ca:	f000 fe8d 	bl	1c3e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
   1b6ce:	b138      	cbz	r0, 1b6e0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
   1b6d0:	7828      	ldrb	r0, [r5, #0]
   1b6d2:	f88d 0008 	strb.w	r0, [sp, #8]
   1b6d6:	9802      	ldr	r0, [sp, #8]
   1b6d8:	9002      	str	r0, [sp, #8]
   1b6da:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b6de:	b108      	cbz	r0, 1b6e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
   1b6e0:	200c      	movs	r0, #12
   1b6e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b6e4:	702f      	strb	r7, [r5, #0]
   1b6e6:	78a0      	ldrb	r0, [r4, #2]
   1b6e8:	7030      	strb	r0, [r6, #0]
   1b6ea:	4668      	mov	r0, sp
   1b6ec:	f7fe ff36 	bl	1a55c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1b6f0:	2000      	movs	r0, #0
   1b6f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001b6f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   1b6f4:	b510      	push	{r4, lr}
   1b6f6:	4604      	mov	r4, r0
   1b6f8:	7800      	ldrb	r0, [r0, #0]
   1b6fa:	b118      	cbz	r0, 1b704 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1b6fc:	2801      	cmp	r0, #1
   1b6fe:	d001      	beq.n	1b704 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1b700:	2012      	movs	r0, #18
   1b702:	bd10      	pop	{r4, pc}
   1b704:	f000 fe9e 	bl	1c444 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1b708:	b120      	cbz	r0, 1b714 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1b70a:	f7f6 fe0d 	bl	12328 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1b70e:	b108      	cbz	r0, 1b714 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1b710:	200c      	movs	r0, #12
   1b712:	bd10      	pop	{r4, pc}
   1b714:	7820      	ldrb	r0, [r4, #0]
   1b716:	f7ff ff92 	bl	1b63e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1b71a:	1de2      	adds	r2, r4, #7
   1b71c:	f104 0317 	add.w	r3, r4, #23
   1b720:	1c61      	adds	r1, r4, #1
   1b722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b726:	f7f6 be31 	b.w	1238c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0001b72a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1b72a:	b510      	push	{r4, lr}
   1b72c:	4604      	mov	r4, r0
   1b72e:	f000 fef2 	bl	1c516 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   1b732:	b108      	cbz	r0, 1b738 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   1b734:	200c      	movs	r0, #12
   1b736:	bd10      	pop	{r4, pc}
   1b738:	7820      	ldrb	r0, [r4, #0]
   1b73a:	b118      	cbz	r0, 1b744 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1b73c:	2801      	cmp	r0, #1
   1b73e:	d001      	beq.n	1b744 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1b740:	2012      	movs	r0, #18
   1b742:	bd10      	pop	{r4, pc}
   1b744:	f7ff ff7b 	bl	1b63e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1b748:	1c61      	adds	r1, r4, #1
   1b74a:	f7f6 fe97 	bl	1247c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   1b74e:	b108      	cbz	r0, 1b754 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   1b750:	2000      	movs	r0, #0
   1b752:	bd10      	pop	{r4, pc}
   1b754:	2007      	movs	r0, #7
   1b756:	bd10      	pop	{r4, pc}

0001b758 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   1b758:	b510      	push	{r4, lr}
   1b75a:	f000 fe73 	bl	1c444 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1b75e:	b120      	cbz	r0, 1b76a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1b760:	f7f6 fde2 	bl	12328 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1b764:	b108      	cbz	r0, 1b76a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1b766:	200c      	movs	r0, #12
   1b768:	bd10      	pop	{r4, pc}
   1b76a:	f7f6 fe55 	bl	12418 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   1b76e:	2000      	movs	r0, #0
   1b770:	bd10      	pop	{r4, pc}

0001b772 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   1b772:	b510      	push	{r4, lr}
   1b774:	f000 fecf 	bl	1c516 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   1b778:	b108      	cbz	r0, 1b77e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   1b77a:	200c      	movs	r0, #12
   1b77c:	bd10      	pop	{r4, pc}
   1b77e:	f7f6 fea5 	bl	124cc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   1b782:	2000      	movs	r0, #0
   1b784:	bd10      	pop	{r4, pc}

0001b786 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   1b786:	b510      	push	{r4, lr}
   1b788:	460b      	mov	r3, r1
   1b78a:	2201      	movs	r2, #1
   1b78c:	f100 0110 	add.w	r1, r0, #16
   1b790:	f7fe fb2e 	bl	19df0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   1b794:	2000      	movs	r0, #0
   1b796:	bd10      	pop	{r4, pc}

0001b798 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   1b798:	b510      	push	{r4, lr}
   1b79a:	8800      	ldrh	r0, [r0, #0]
   1b79c:	2100      	movs	r1, #0
   1b79e:	f7fe f8fd 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b7a2:	b118      	cbz	r0, 1b7ac <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   1b7a4:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
   1b7a8:	b111      	cbz	r1, 1b7b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   1b7aa:	e007      	b.n	1b7bc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   1b7ac:	2002      	movs	r0, #2
   1b7ae:	bd10      	pop	{r4, pc}
   1b7b0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   1b7b4:	2914      	cmp	r1, #20
   1b7b6:	d003      	beq.n	1b7c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1b7b8:	2915      	cmp	r1, #21
   1b7ba:	d001      	beq.n	1b7c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1b7bc:	200c      	movs	r0, #12
   1b7be:	bd10      	pop	{r4, pc}
   1b7c0:	2102      	movs	r1, #2
   1b7c2:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
   1b7c6:	2000      	movs	r0, #0
   1b7c8:	bd10      	pop	{r4, pc}

0001b7ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   1b7ca:	b538      	push	{r3, r4, r5, lr}
   1b7cc:	4605      	mov	r5, r0
   1b7ce:	8800      	ldrh	r0, [r0, #0]
   1b7d0:	2100      	movs	r1, #0
   1b7d2:	f7fe f8e3 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b7d6:	0004      	movs	r4, r0
   1b7d8:	d003      	beq.n	1b7e2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   1b7da:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
   1b7de:	b110      	cbz	r0, 1b7e6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   1b7e0:	e010      	b.n	1b804 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
   1b7e2:	2002      	movs	r0, #2
   1b7e4:	bd38      	pop	{r3, r4, r5, pc}
   1b7e6:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
   1b7ea:	2814      	cmp	r0, #20
   1b7ec:	d001      	beq.n	1b7f2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   1b7ee:	2815      	cmp	r0, #21
   1b7f0:	d108      	bne.n	1b804 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
   1b7f2:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   1b7f6:	f88d 0000 	strb.w	r0, [sp]
   1b7fa:	9800      	ldr	r0, [sp, #0]
   1b7fc:	9000      	str	r0, [sp, #0]
   1b7fe:	f89d 0000 	ldrb.w	r0, [sp]
   1b802:	b108      	cbz	r0, 1b808 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
   1b804:	200c      	movs	r0, #12
   1b806:	bd38      	pop	{r3, r4, r5, pc}
   1b808:	2210      	movs	r2, #16
   1b80a:	1ca9      	adds	r1, r5, #2
   1b80c:	f504 70be 	add.w	r0, r4, #380	; 0x17c
   1b810:	f7fd f8c9 	bl	189a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1b814:	2001      	movs	r0, #1
   1b816:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
   1b81a:	2000      	movs	r0, #0
   1b81c:	bd38      	pop	{r3, r4, r5, pc}

0001b81e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   1b81e:	b510      	push	{r4, lr}
   1b820:	2108      	movs	r1, #8
   1b822:	f7f5 f8eb 	bl	109fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1b826:	2000      	movs	r0, #0
   1b828:	bd10      	pop	{r4, pc}

0001b82a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   1b82a:	b510      	push	{r4, lr}
   1b82c:	4604      	mov	r4, r0
   1b82e:	f000 fdf2 	bl	1c416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1b832:	f7ff f91d 	bl	1aa70 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1b836:	7020      	strb	r0, [r4, #0]
   1b838:	2000      	movs	r0, #0
   1b83a:	bd10      	pop	{r4, pc}

0001b83c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   1b83c:	b510      	push	{r4, lr}
   1b83e:	4604      	mov	r4, r0
   1b840:	f000 fdcc 	bl	1c3dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1b844:	b140      	cbz	r0, 1b858 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   1b846:	20fb      	movs	r0, #251	; 0xfb
   1b848:	8020      	strh	r0, [r4, #0]
   1b84a:	f640 0148 	movw	r1, #2120	; 0x848
   1b84e:	8061      	strh	r1, [r4, #2]
   1b850:	80a0      	strh	r0, [r4, #4]
   1b852:	80e1      	strh	r1, [r4, #6]
   1b854:	2000      	movs	r0, #0
   1b856:	bd10      	pop	{r4, pc}
   1b858:	2001      	movs	r0, #1
   1b85a:	bd10      	pop	{r4, pc}

0001b85c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
   1b85c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1b85e:	460d      	mov	r5, r1
   1b860:	4606      	mov	r6, r0
   1b862:	f7fb fb69 	bl	16f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1b866:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1b86a:	b300      	cbz	r0, 1b8ae <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
   1b86c:	8830      	ldrh	r0, [r6, #0]
   1b86e:	4669      	mov	r1, sp
   1b870:	f7fe fadc 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1b874:	2800      	cmp	r0, #0
   1b876:	d119      	bne.n	1b8ac <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
   1b878:	9c01      	ldr	r4, [sp, #4]
   1b87a:	2700      	movs	r7, #0
   1b87c:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
   1b880:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
   1b884:	f000 fc46 	bl	1c114 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
   1b888:	70a8      	strb	r0, [r5, #2]
   1b88a:	7860      	ldrb	r0, [r4, #1]
   1b88c:	f000 fc42 	bl	1c114 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
   1b890:	70e8      	strb	r0, [r5, #3]
   1b892:	78a0      	ldrb	r0, [r4, #2]
   1b894:	f88d 0008 	strb.w	r0, [sp, #8]
   1b898:	9802      	ldr	r0, [sp, #8]
   1b89a:	9002      	str	r0, [sp, #8]
   1b89c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b8a0:	3c6a      	subs	r4, #106	; 0x6a
   1b8a2:	2800      	cmp	r0, #0
   1b8a4:	d1ea      	bne.n	1b87c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
   1b8a6:	8830      	ldrh	r0, [r6, #0]
   1b8a8:	8028      	strh	r0, [r5, #0]
   1b8aa:	2000      	movs	r0, #0
   1b8ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b8ae:	2001      	movs	r0, #1
   1b8b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001b8b2 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   1b8b2:	2108      	movs	r1, #8
   1b8b4:	7001      	strb	r1, [r0, #0]
   1b8b6:	2000      	movs	r0, #0
   1b8b8:	4770      	bx	lr

0001b8ba <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   1b8ba:	b510      	push	{r4, lr}
   1b8bc:	4604      	mov	r4, r0
   1b8be:	20d8      	movs	r0, #216	; 0xd8
   1b8c0:	7020      	strb	r0, [r4, #0]
   1b8c2:	f000 fd6c 	bl	1c39e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   1b8c6:	7060      	strb	r0, [r4, #1]
   1b8c8:	2000      	movs	r0, #0
   1b8ca:	bd10      	pop	{r4, pc}

0001b8cc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1b8cc:	2108      	movs	r1, #8
   1b8ce:	7001      	strb	r1, [r0, #0]
   1b8d0:	2000      	movs	r0, #0
   1b8d2:	4770      	bx	lr

0001b8d4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   1b8d4:	b510      	push	{r4, lr}
   1b8d6:	4604      	mov	r4, r0
   1b8d8:	7800      	ldrb	r0, [r0, #0]
   1b8da:	b108      	cbz	r0, 1b8e0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   1b8dc:	2801      	cmp	r0, #1
   1b8de:	d110      	bne.n	1b902 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1b8e0:	f000 fdb0 	bl	1c444 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1b8e4:	b120      	cbz	r0, 1b8f0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1b8e6:	f7f6 fd1f 	bl	12328 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1b8ea:	b108      	cbz	r0, 1b8f0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1b8ec:	200c      	movs	r0, #12
   1b8ee:	bd10      	pop	{r4, pc}
   1b8f0:	7820      	ldrb	r0, [r4, #0]
   1b8f2:	f7ff fea4 	bl	1b63e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1b8f6:	1c61      	adds	r1, r4, #1
   1b8f8:	f7fe fa60 	bl	19dbc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   1b8fc:	b108      	cbz	r0, 1b902 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1b8fe:	2000      	movs	r0, #0
   1b900:	bd10      	pop	{r4, pc}
   1b902:	2012      	movs	r0, #18
   1b904:	bd10      	pop	{r4, pc}

0001b906 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   1b906:	b510      	push	{r4, lr}
   1b908:	4604      	mov	r4, r0
   1b90a:	f000 fe04 	bl	1c516 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   1b90e:	b108      	cbz	r0, 1b914 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   1b910:	200c      	movs	r0, #12
   1b912:	bd10      	pop	{r4, pc}
   1b914:	7820      	ldrb	r0, [r4, #0]
   1b916:	b108      	cbz	r0, 1b91c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   1b918:	2801      	cmp	r0, #1
   1b91a:	d107      	bne.n	1b92c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1b91c:	f7ff fe8f 	bl	1b63e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1b920:	1c61      	adds	r1, r4, #1
   1b922:	f7fe fa5a 	bl	19dda <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   1b926:	b108      	cbz	r0, 1b92c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1b928:	2000      	movs	r0, #0
   1b92a:	bd10      	pop	{r4, pc}
   1b92c:	2012      	movs	r0, #18
   1b92e:	bd10      	pop	{r4, pc}

0001b930 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   1b930:	b510      	push	{r4, lr}
   1b932:	4604      	mov	r4, r0
   1b934:	f000 fd86 	bl	1c444 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1b938:	b108      	cbz	r0, 1b93e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   1b93a:	200c      	movs	r0, #12
   1b93c:	bd10      	pop	{r4, pc}
   1b93e:	7820      	ldrb	r0, [r4, #0]
   1b940:	f000 0001 	and.w	r0, r0, #1
   1b944:	f7f6 fcea 	bl	1231c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   1b948:	2000      	movs	r0, #0
   1b94a:	bd10      	pop	{r4, pc}

0001b94c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   1b94c:	b51c      	push	{r2, r3, r4, lr}
   1b94e:	4604      	mov	r4, r0
   1b950:	f000 fd61 	bl	1c416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1b954:	2000      	movs	r0, #0
   1b956:	f88d 0002 	strb.w	r0, [sp, #2]
   1b95a:	2103      	movs	r1, #3
   1b95c:	f88d 1001 	strb.w	r1, [sp, #1]
   1b960:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b964:	f88d 1003 	strb.w	r1, [sp, #3]
   1b968:	f88d 0000 	strb.w	r0, [sp]
   1b96c:	4668      	mov	r0, sp
   1b96e:	9401      	str	r4, [sp, #4]
   1b970:	f000 f9f8 	bl	1bd64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   1b974:	bd1c      	pop	{r2, r3, r4, pc}

0001b976 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   1b976:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1b978:	4605      	mov	r5, r0
   1b97a:	f000 fd4c 	bl	1c416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1b97e:	4606      	mov	r6, r0
   1b980:	7828      	ldrb	r0, [r5, #0]
   1b982:	2400      	movs	r4, #0
   1b984:	b160      	cbz	r0, 1b9a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   1b986:	f88d 4000 	strb.w	r4, [sp]
   1b98a:	2001      	movs	r0, #1
   1b98c:	f10d 0101 	add.w	r1, sp, #1
   1b990:	f7f5 fe98 	bl	116c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1b994:	b120      	cbz	r0, 1b9a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   1b996:	4668      	mov	r0, sp
   1b998:	f000 f897 	bl	1baca <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   1b99c:	2800      	cmp	r0, #0
   1b99e:	d112      	bne.n	1b9c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   1b9a0:	f88d 400c 	strb.w	r4, [sp, #12]
   1b9a4:	4630      	mov	r0, r6
   1b9a6:	f7ff f859 	bl	1aa5c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1b9aa:	b118      	cbz	r0, 1b9b4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   1b9ac:	2080      	movs	r0, #128	; 0x80
   1b9ae:	f8ad 000d 	strh.w	r0, [sp, #13]
   1b9b2:	e001      	b.n	1b9b8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   1b9b4:	f8ad 400d 	strh.w	r4, [sp, #13]
   1b9b8:	f88d 400f 	strb.w	r4, [sp, #15]
   1b9bc:	7828      	ldrb	r0, [r5, #0]
   1b9be:	2801      	cmp	r0, #1
   1b9c0:	d003      	beq.n	1b9ca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   1b9c2:	b138      	cbz	r0, 1b9d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   1b9c4:	2012      	movs	r0, #18
   1b9c6:	b004      	add	sp, #16
   1b9c8:	bd70      	pop	{r4, r5, r6, pc}
   1b9ca:	a903      	add	r1, sp, #12
   1b9cc:	4630      	mov	r0, r6
   1b9ce:	f7fb f8b3 	bl	16b38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   1b9d2:	e7f8      	b.n	1b9c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   1b9d4:	4630      	mov	r0, r6
   1b9d6:	f000 fd3c 	bl	1c452 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
   1b9da:	e7f4      	b.n	1b9c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0001b9dc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   1b9dc:	b530      	push	{r4, r5, lr}
   1b9de:	b08b      	sub	sp, #44	; 0x2c
   1b9e0:	4604      	mov	r4, r0
   1b9e2:	f000 fd18 	bl	1c416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1b9e6:	4602      	mov	r2, r0
   1b9e8:	7920      	ldrb	r0, [r4, #4]
   1b9ea:	2804      	cmp	r0, #4
   1b9ec:	d803      	bhi.n	1b9f6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   1b9ee:	8860      	ldrh	r0, [r4, #2]
   1b9f0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   1b9f4:	d902      	bls.n	1b9fc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   1b9f6:	2012      	movs	r0, #18
   1b9f8:	b00b      	add	sp, #44	; 0x2c
   1b9fa:	bd30      	pop	{r4, r5, pc}
   1b9fc:	2500      	movs	r5, #0
   1b9fe:	f88d 5004 	strb.w	r5, [sp, #4]
   1ba02:	7921      	ldrb	r1, [r4, #4]
   1ba04:	9500      	str	r5, [sp, #0]
   1ba06:	f89d 0000 	ldrb.w	r0, [sp]
   1ba0a:	2905      	cmp	r1, #5
   1ba0c:	f040 0010 	orr.w	r0, r0, #16
   1ba10:	f88d 0000 	strb.w	r0, [sp]
   1ba14:	d254      	bcs.n	1bac0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   1ba16:	e8df f001 	tbb	[pc, r1]
   1ba1a:	0803      	.short	0x0803
   1ba1c:	000b1105 	.word	0x000b1105
   1ba20:	f040 0001 	orr.w	r0, r0, #1
   1ba24:	f040 0002 	orr.w	r0, r0, #2
   1ba28:	e006      	b.n	1ba38 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   1ba2a:	f040 0009 	orr.w	r0, r0, #9
   1ba2e:	e001      	b.n	1ba34 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   1ba30:	f040 0001 	orr.w	r0, r0, #1
   1ba34:	f040 0004 	orr.w	r0, r0, #4
   1ba38:	f88d 0000 	strb.w	r0, [sp]
   1ba3c:	f8bd 0000 	ldrh.w	r0, [sp]
   1ba40:	9000      	str	r0, [sp, #0]
   1ba42:	f8bd 0000 	ldrh.w	r0, [sp]
   1ba46:	f8ad 0005 	strh.w	r0, [sp, #5]
   1ba4a:	8821      	ldrh	r1, [r4, #0]
   1ba4c:	f8dd 0006 	ldr.w	r0, [sp, #6]
   1ba50:	f361 201f 	bfi	r0, r1, #8, #24
   1ba54:	f8cd 0006 	str.w	r0, [sp, #6]
   1ba58:	8861      	ldrh	r1, [r4, #2]
   1ba5a:	f8dd 0009 	ldr.w	r0, [sp, #9]
   1ba5e:	f361 201f 	bfi	r0, r1, #8, #24
   1ba62:	f8cd 0009 	str.w	r0, [sp, #9]
   1ba66:	7b60      	ldrb	r0, [r4, #13]
   1ba68:	f88d 000d 	strb.w	r0, [sp, #13]
   1ba6c:	7960      	ldrb	r0, [r4, #5]
   1ba6e:	f88d 000e 	strb.w	r0, [sp, #14]
   1ba72:	79a0      	ldrb	r0, [r4, #6]
   1ba74:	f88d 000f 	strb.w	r0, [sp, #15]
   1ba78:	f8d4 0007 	ldr.w	r0, [r4, #7]
   1ba7c:	9004      	str	r0, [sp, #16]
   1ba7e:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   1ba82:	f8ad 0014 	strh.w	r0, [sp, #20]
   1ba86:	7ba0      	ldrb	r0, [r4, #14]
   1ba88:	f88d 0016 	strb.w	r0, [sp, #22]
   1ba8c:	207f      	movs	r0, #127	; 0x7f
   1ba8e:	f88d 0017 	strb.w	r0, [sp, #23]
   1ba92:	2001      	movs	r0, #1
   1ba94:	f88d 0018 	strb.w	r0, [sp, #24]
   1ba98:	f88d 5019 	strb.w	r5, [sp, #25]
   1ba9c:	f88d 001a 	strb.w	r0, [sp, #26]
   1baa0:	f88d 501b 	strb.w	r5, [sp, #27]
   1baa4:	4610      	mov	r0, r2
   1baa6:	f7fe fff5 	bl	1aa94 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   1baaa:	f88d 001c 	strb.w	r0, [sp, #28]
   1baae:	f88d 501d 	strb.w	r5, [sp, #29]
   1bab2:	f88d 501e 	strb.w	r5, [sp, #30]
   1bab6:	a909      	add	r1, sp, #36	; 0x24
   1bab8:	a801      	add	r0, sp, #4
   1baba:	f000 f8de 	bl	1bc7a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   1babe:	e79b      	b.n	1b9f8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   1bac0:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
   1bac4:	2039      	movs	r0, #57	; 0x39
   1bac6:	f7f4 feff 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001baca <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   1baca:	b570      	push	{r4, r5, r6, lr}
   1bacc:	4604      	mov	r4, r0
   1bace:	7800      	ldrb	r0, [r0, #0]
   1bad0:	2101      	movs	r1, #1
   1bad2:	f7fd ff63 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1bad6:	0005      	movs	r5, r0
   1bad8:	d007      	beq.n	1baea <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   1bada:	f7ff f994 	bl	1ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1bade:	b160      	cbz	r0, 1bafa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   1bae0:	4628      	mov	r0, r5
   1bae2:	f7fe ffc1 	bl	1aa68 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1bae6:	b110      	cbz	r0, 1baee <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   1bae8:	e005      	b.n	1baf6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   1baea:	2042      	movs	r0, #66	; 0x42
   1baec:	bd70      	pop	{r4, r5, r6, pc}
   1baee:	4628      	mov	r0, r5
   1baf0:	f7fe ffb0 	bl	1aa54 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1baf4:	b108      	cbz	r0, 1bafa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   1baf6:	200c      	movs	r0, #12
   1baf8:	bd70      	pop	{r4, r5, r6, pc}
   1bafa:	1c61      	adds	r1, r4, #1
   1bafc:	4628      	mov	r0, r5
   1bafe:	f7fe ffc1 	bl	1aa84 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   1bb02:	2000      	movs	r0, #0
   1bb04:	bd70      	pop	{r4, r5, r6, pc}

0001bb06 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   1bb06:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1bb08:	460d      	mov	r5, r1
   1bb0a:	4604      	mov	r4, r0
   1bb0c:	f000 fc66 	bl	1c3dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1bb10:	b130      	cbz	r0, 1bb20 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   1bb12:	88a2      	ldrh	r2, [r4, #4]
   1bb14:	f244 2090 	movw	r0, #17040	; 0x4290
   1bb18:	4282      	cmp	r2, r0
   1bb1a:	d903      	bls.n	1bb24 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   1bb1c:	2012      	movs	r0, #18
   1bb1e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bb20:	2001      	movs	r0, #1
   1bb22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bb24:	f640 0048 	movw	r0, #2120	; 0x848
   1bb28:	4282      	cmp	r2, r0
   1bb2a:	d300      	bcc.n	1bb2e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   1bb2c:	4602      	mov	r2, r0
   1bb2e:	8820      	ldrh	r0, [r4, #0]
   1bb30:	f8ad 0000 	strh.w	r0, [sp]
   1bb34:	8860      	ldrh	r0, [r4, #2]
   1bb36:	f8ad 0002 	strh.w	r0, [sp, #2]
   1bb3a:	f8ad 2004 	strh.w	r2, [sp, #4]
   1bb3e:	8860      	ldrh	r0, [r4, #2]
   1bb40:	f8ad 0006 	strh.w	r0, [sp, #6]
   1bb44:	f8ad 2008 	strh.w	r2, [sp, #8]
   1bb48:	8820      	ldrh	r0, [r4, #0]
   1bb4a:	8028      	strh	r0, [r5, #0]
   1bb4c:	4668      	mov	r0, sp
   1bb4e:	f7fb f8c1 	bl	16cd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   1bb52:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001bb54 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1bb54:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1bb56:	4604      	mov	r4, r0
   1bb58:	f7fb f9ee 	bl	16f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1bb5c:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1bb60:	b1b0      	cbz	r0, 1bb90 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   1bb62:	f10d 0007 	add.w	r0, sp, #7
   1bb66:	9000      	str	r0, [sp, #0]
   1bb68:	7922      	ldrb	r2, [r4, #4]
   1bb6a:	78e1      	ldrb	r1, [r4, #3]
   1bb6c:	78a0      	ldrb	r0, [r4, #2]
   1bb6e:	f10d 0306 	add.w	r3, sp, #6
   1bb72:	f000 fc94 	bl	1c49e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
   1bb76:	2800      	cmp	r0, #0
   1bb78:	d109      	bne.n	1bb8e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   1bb7a:	8820      	ldrh	r0, [r4, #0]
   1bb7c:	f8ad 0004 	strh.w	r0, [sp, #4]
   1bb80:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   1bb84:	f8ad 0008 	strh.w	r0, [sp, #8]
   1bb88:	a801      	add	r0, sp, #4
   1bb8a:	f000 f9a6 	bl	1beda <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   1bb8e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bb90:	2001      	movs	r0, #1
   1bb92:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001bb94 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   1bb94:	b510      	push	{r4, lr}
   1bb96:	4604      	mov	r4, r0
   1bb98:	f000 fc54 	bl	1c444 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1bb9c:	b120      	cbz	r0, 1bba8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1bb9e:	f7f6 fbc3 	bl	12328 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1bba2:	b108      	cbz	r0, 1bba8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1bba4:	200c      	movs	r0, #12
   1bba6:	bd10      	pop	{r4, pc}
   1bba8:	7820      	ldrb	r0, [r4, #0]
   1bbaa:	f7ff fd48 	bl	1b63e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1bbae:	79e2      	ldrb	r2, [r4, #7]
   1bbb0:	1c61      	adds	r1, r4, #1
   1bbb2:	f7f6 fb67 	bl	12284 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   1bbb6:	b108      	cbz	r0, 1bbbc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   1bbb8:	2000      	movs	r0, #0
   1bbba:	bd10      	pop	{r4, pc}
   1bbbc:	2002      	movs	r0, #2
   1bbbe:	bd10      	pop	{r4, pc}

0001bbc0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   1bbc0:	b510      	push	{r4, lr}
   1bbc2:	4604      	mov	r4, r0
   1bbc4:	2001      	movs	r0, #1
   1bbc6:	f000 fac8 	bl	1c15a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   1bbca:	b128      	cbz	r0, 1bbd8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   1bbcc:	4621      	mov	r1, r4
   1bbce:	2001      	movs	r0, #1
   1bbd0:	f7f5 fd90 	bl	116f4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1bbd4:	2000      	movs	r0, #0
   1bbd6:	bd10      	pop	{r4, pc}
   1bbd8:	200c      	movs	r0, #12
   1bbda:	bd10      	pop	{r4, pc}

0001bbdc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   1bbdc:	b510      	push	{r4, lr}
   1bbde:	8800      	ldrh	r0, [r0, #0]
   1bbe0:	f7f6 fc30 	bl	12444 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   1bbe4:	b108      	cbz	r0, 1bbea <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   1bbe6:	2000      	movs	r0, #0
   1bbe8:	bd10      	pop	{r4, pc}
   1bbea:	2030      	movs	r0, #48	; 0x30
   1bbec:	bd10      	pop	{r4, pc}

0001bbee <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   1bbee:	b51c      	push	{r2, r3, r4, lr}
   1bbf0:	4604      	mov	r4, r0
   1bbf2:	f000 fc10 	bl	1c416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1bbf6:	2000      	movs	r0, #0
   1bbf8:	f88d 0000 	strb.w	r0, [sp]
   1bbfc:	f88d 0002 	strb.w	r0, [sp, #2]
   1bc00:	2003      	movs	r0, #3
   1bc02:	f88d 0001 	strb.w	r0, [sp, #1]
   1bc06:	f814 0b01 	ldrb.w	r0, [r4], #1
   1bc0a:	f88d 0003 	strb.w	r0, [sp, #3]
   1bc0e:	4668      	mov	r0, sp
   1bc10:	9401      	str	r4, [sp, #4]
   1bc12:	f000 f910 	bl	1be36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   1bc16:	bd1c      	pop	{r2, r3, r4, pc}

0001bc18 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   1bc18:	b51c      	push	{r2, r3, r4, lr}
   1bc1a:	4604      	mov	r4, r0
   1bc1c:	f000 fbde 	bl	1c3dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1bc20:	b178      	cbz	r0, 1bc42 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   1bc22:	8820      	ldrh	r0, [r4, #0]
   1bc24:	f8ad 0000 	strh.w	r0, [sp]
   1bc28:	8860      	ldrh	r0, [r4, #2]
   1bc2a:	f8ad 0002 	strh.w	r0, [sp, #2]
   1bc2e:	8820      	ldrh	r0, [r4, #0]
   1bc30:	f8ad 0004 	strh.w	r0, [sp, #4]
   1bc34:	8860      	ldrh	r0, [r4, #2]
   1bc36:	f8ad 0006 	strh.w	r0, [sp, #6]
   1bc3a:	4668      	mov	r0, sp
   1bc3c:	f7fb f8ce 	bl	16ddc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
   1bc40:	bd1c      	pop	{r2, r3, r4, pc}
   1bc42:	2001      	movs	r0, #1
   1bc44:	bd1c      	pop	{r2, r3, r4, pc}

0001bc46 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   1bc46:	b510      	push	{r4, lr}
   1bc48:	f7f5 fd78 	bl	1173c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1bc4c:	2000      	movs	r0, #0
   1bc4e:	bd10      	pop	{r4, pc}

0001bc50 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   1bc50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1bc52:	460c      	mov	r4, r1
   1bc54:	4605      	mov	r5, r0
   1bc56:	f000 fbc1 	bl	1c3dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1bc5a:	b160      	cbz	r0, 1bc76 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   1bc5c:	4669      	mov	r1, sp
   1bc5e:	4628      	mov	r0, r5
   1bc60:	f7fe f8e4 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1bc64:	2800      	cmp	r0, #0
   1bc66:	d105      	bne.n	1bc74 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   1bc68:	2100      	movs	r1, #0
   1bc6a:	4622      	mov	r2, r4
   1bc6c:	9801      	ldr	r0, [sp, #4]
   1bc6e:	f000 fb40 	bl	1c2f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   1bc72:	2000      	movs	r0, #0
   1bc74:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1bc76:	2001      	movs	r0, #1
   1bc78:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001bc7a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   1bc7a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1bc7e:	460f      	mov	r7, r1
   1bc80:	4605      	mov	r5, r0
   1bc82:	7806      	ldrb	r6, [r0, #0]
   1bc84:	f000 fac5 	bl	1c212 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
   1bc88:	2800      	cmp	r0, #0
   1bc8a:	d10a      	bne.n	1bca2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1bc8c:	4628      	mov	r0, r5
   1bc8e:	f000 fa9a 	bl	1c1c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
   1bc92:	2800      	cmp	r0, #0
   1bc94:	d105      	bne.n	1bca2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1bc96:	2001      	movs	r0, #1
   1bc98:	f7f5 f800 	bl	10c9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1bc9c:	4286      	cmp	r6, r0
   1bc9e:	d302      	bcc.n	1bca6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   1bca0:	2007      	movs	r0, #7
   1bca2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1bca6:	2101      	movs	r1, #1
   1bca8:	4630      	mov	r0, r6
   1bcaa:	f7fd fe77 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1bcae:	0004      	movs	r4, r0
   1bcb0:	d004      	beq.n	1bcbc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
   1bcb2:	f7ff f8a8 	bl	1ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1bcb6:	b150      	cbz	r0, 1bcce <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
   1bcb8:	200c      	movs	r0, #12
   1bcba:	e7f2      	b.n	1bca2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1bcbc:	2200      	movs	r2, #0
   1bcbe:	2101      	movs	r1, #1
   1bcc0:	4630      	mov	r0, r6
   1bcc2:	f7fd fe61 	bl	19988 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1bcc6:	0004      	movs	r4, r0
   1bcc8:	d00f      	beq.n	1bcea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   1bcca:	f7fe fe68 	bl	1a99e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   1bcce:	4620      	mov	r0, r4
   1bcd0:	f7fe fece 	bl	1aa70 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1bcd4:	7038      	strb	r0, [r7, #0]
   1bcd6:	74e8      	strb	r0, [r5, #19]
   1bcd8:	4629      	mov	r1, r5
   1bcda:	4620      	mov	r0, r4
   1bcdc:	f7f7 f9e8 	bl	130b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   1bce0:	4606      	mov	r6, r0
   1bce2:	7e68      	ldrb	r0, [r5, #25]
   1bce4:	b1d0      	cbz	r0, 1bd1c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   1bce6:	b12e      	cbz	r6, 1bcf4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   1bce8:	e018      	b.n	1bd1c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   1bcea:	f241 212d 	movw	r1, #4653	; 0x122d
   1bcee:	2039      	movs	r0, #57	; 0x39
   1bcf0:	f7f4 fdea 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1bcf4:	2200      	movs	r2, #0
   1bcf6:	4668      	mov	r0, sp
   1bcf8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1bcfa:	f7fd ff10 	bl	19b1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1bcfe:	2200      	movs	r2, #0
   1bd00:	2101      	movs	r1, #1
   1bd02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bd04:	f7fd ff80 	bl	19c08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1bd08:	2204      	movs	r2, #4
   1bd0a:	4668      	mov	r0, sp
   1bd0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1bd0e:	f7fd ff06 	bl	19b1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1bd12:	2200      	movs	r2, #0
   1bd14:	4611      	mov	r1, r2
   1bd16:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bd18:	f7fd ff76 	bl	19c08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1bd1c:	4630      	mov	r0, r6
   1bd1e:	e7c0      	b.n	1bca2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0001bd20 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1bd20:	b510      	push	{r4, lr}
   1bd22:	4604      	mov	r4, r0
   1bd24:	2000      	movs	r0, #0
   1bd26:	f000 fa18 	bl	1c15a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   1bd2a:	b128      	cbz	r0, 1bd38 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   1bd2c:	4621      	mov	r1, r4
   1bd2e:	2000      	movs	r0, #0
   1bd30:	f7f5 fce0 	bl	116f4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1bd34:	2000      	movs	r0, #0
   1bd36:	bd10      	pop	{r4, pc}
   1bd38:	200c      	movs	r0, #12
   1bd3a:	bd10      	pop	{r4, pc}

0001bd3c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1bd3c:	b510      	push	{r4, lr}
   1bd3e:	7800      	ldrb	r0, [r0, #0]
   1bd40:	f000 0001 	and.w	r0, r0, #1
   1bd44:	f7f8 f8f0 	bl	13f28 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1bd48:	2000      	movs	r0, #0
   1bd4a:	bd10      	pop	{r4, pc}

0001bd4c <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1bd4c:	b510      	push	{r4, lr}
   1bd4e:	4604      	mov	r4, r0
   1bd50:	f000 fb44 	bl	1c3dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1bd54:	b120      	cbz	r0, 1bd60 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   1bd56:	4620      	mov	r0, r4
   1bd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bd5c:	f7fa bfba 	b.w	16cd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   1bd60:	2001      	movs	r0, #1
   1bd62:	bd10      	pop	{r4, pc}

0001bd64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   1bd64:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1bd68:	4606      	mov	r6, r0
   1bd6a:	7845      	ldrb	r5, [r0, #1]
   1bd6c:	7800      	ldrb	r0, [r0, #0]
   1bd6e:	2101      	movs	r1, #1
   1bd70:	f7fd fe14 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1bd74:	0004      	movs	r4, r0
   1bd76:	d01e      	beq.n	1bdb6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   1bd78:	f7fe fe3d 	bl	1a9f6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   1bd7c:	78f1      	ldrb	r1, [r6, #3]
   1bd7e:	4281      	cmp	r1, r0
   1bd80:	d800      	bhi.n	1bd84 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   1bd82:	4608      	mov	r0, r1
   1bd84:	4607      	mov	r7, r0
   1bd86:	2d04      	cmp	r5, #4
   1bd88:	d018      	beq.n	1bdbc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   1bd8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bd8c:	f7fd ff5f 	bl	19c4e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1bd90:	4438      	add	r0, r7
   1bd92:	b281      	uxth	r1, r0
   1bd94:	4620      	mov	r0, r4
   1bd96:	2201      	movs	r2, #1
   1bd98:	f000 f9f1 	bl	1c17e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   1bd9c:	2800      	cmp	r0, #0
   1bd9e:	d10b      	bne.n	1bdb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1bda0:	2d03      	cmp	r5, #3
   1bda2:	d000      	beq.n	1bda6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1bda4:	b1df      	cbz	r7, 1bdde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bda6:	4620      	mov	r0, r4
   1bda8:	f7fe fe5c 	bl	1aa64 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1bdac:	7871      	ldrb	r1, [r6, #1]
   1bdae:	2903      	cmp	r1, #3
   1bdb0:	d010      	beq.n	1bdd4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   1bdb2:	b9a0      	cbnz	r0, 1bdde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bdb4:	e004      	b.n	1bdc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   1bdb6:	2042      	movs	r0, #66	; 0x42
   1bdb8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1bdbc:	b97f      	cbnz	r7, 1bdde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bdbe:	e7f2      	b.n	1bda6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1bdc0:	2904      	cmp	r1, #4
   1bdc2:	d107      	bne.n	1bdd4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   1bdc4:	4620      	mov	r0, r4
   1bdc6:	f7ff f81e 	bl	1ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1bdca:	b140      	cbz	r0, 1bdde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bdcc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bdce:	f7fd ff0d 	bl	19bec <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   1bdd2:	b120      	cbz	r0, 1bdde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1bdd4:	2d01      	cmp	r5, #1
   1bdd6:	d004      	beq.n	1bde2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1bdd8:	2d03      	cmp	r5, #3
   1bdda:	d002      	beq.n	1bde2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1bddc:	e00e      	b.n	1bdfc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   1bdde:	2012      	movs	r0, #18
   1bde0:	e7ea      	b.n	1bdb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1bde2:	4620      	mov	r0, r4
   1bde4:	f7fe fe3e 	bl	1aa64 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1bde8:	b108      	cbz	r0, 1bdee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   1bdea:	2200      	movs	r2, #0
   1bdec:	e002      	b.n	1bdf4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1bdee:	2d01      	cmp	r5, #1
   1bdf0:	d013      	beq.n	1be1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   1bdf2:	2201      	movs	r2, #1
   1bdf4:	4668      	mov	r0, sp
   1bdf6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1bdf8:	f7fd fe91 	bl	19b1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1bdfc:	2d04      	cmp	r5, #4
   1bdfe:	d018      	beq.n	1be32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1be00:	6872      	ldr	r2, [r6, #4]
   1be02:	463b      	mov	r3, r7
   1be04:	2101      	movs	r1, #1
   1be06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1be08:	f7fd febc 	bl	19b84 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1be0c:	b138      	cbz	r0, 1be1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   1be0e:	7870      	ldrb	r0, [r6, #1]
   1be10:	2802      	cmp	r0, #2
   1be12:	d006      	beq.n	1be22 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1be14:	2803      	cmp	r0, #3
   1be16:	d004      	beq.n	1be22 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1be18:	e00b      	b.n	1be32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1be1a:	2202      	movs	r2, #2
   1be1c:	e7ea      	b.n	1bdf4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1be1e:	2007      	movs	r0, #7
   1be20:	e7ca      	b.n	1bdb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1be22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1be24:	f7fd ff13 	bl	19c4e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1be28:	4602      	mov	r2, r0
   1be2a:	2101      	movs	r1, #1
   1be2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1be2e:	f7fd feeb 	bl	19c08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1be32:	2000      	movs	r0, #0
   1be34:	e7c0      	b.n	1bdb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0001be36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1be36:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1be3a:	4607      	mov	r7, r0
   1be3c:	7845      	ldrb	r5, [r0, #1]
   1be3e:	78c6      	ldrb	r6, [r0, #3]
   1be40:	7800      	ldrb	r0, [r0, #0]
   1be42:	2101      	movs	r1, #1
   1be44:	f7fd fdaa 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1be48:	0004      	movs	r4, r0
   1be4a:	d003      	beq.n	1be54 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   1be4c:	f7fe fe0c 	bl	1aa68 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1be50:	b118      	cbz	r0, 1be5a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   1be52:	e003      	b.n	1be5c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   1be54:	2042      	movs	r0, #66	; 0x42
   1be56:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1be5a:	2600      	movs	r6, #0
   1be5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1be5e:	f7fd fefa 	bl	19c56 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   1be62:	4430      	add	r0, r6
   1be64:	b281      	uxth	r1, r0
   1be66:	4688      	mov	r8, r1
   1be68:	4620      	mov	r0, r4
   1be6a:	2201      	movs	r2, #1
   1be6c:	f000 f987 	bl	1c17e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   1be70:	2800      	cmp	r0, #0
   1be72:	d1f0      	bne.n	1be56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1be74:	2d04      	cmp	r5, #4
   1be76:	d008      	beq.n	1be8a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1be78:	2d03      	cmp	r5, #3
   1be7a:	d00a      	beq.n	1be92 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   1be7c:	b12e      	cbz	r6, 1be8a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1be7e:	4620      	mov	r0, r4
   1be80:	f7fe ffc1 	bl	1ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1be84:	b118      	cbz	r0, 1be8e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   1be86:	200c      	movs	r0, #12
   1be88:	e7e5      	b.n	1be56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1be8a:	2012      	movs	r0, #18
   1be8c:	e7e3      	b.n	1be56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1be8e:	2d01      	cmp	r5, #1
   1be90:	d10c      	bne.n	1beac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   1be92:	4620      	mov	r0, r4
   1be94:	f7fe fde6 	bl	1aa64 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1be98:	b108      	cbz	r0, 1be9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   1be9a:	2204      	movs	r2, #4
   1be9c:	e002      	b.n	1bea4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1be9e:	2d01      	cmp	r5, #1
   1bea0:	d010      	beq.n	1bec4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   1bea2:	2205      	movs	r2, #5
   1bea4:	4668      	mov	r0, sp
   1bea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1bea8:	f7fd fe39 	bl	19b1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1beac:	687a      	ldr	r2, [r7, #4]
   1beae:	4633      	mov	r3, r6
   1beb0:	2100      	movs	r1, #0
   1beb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1beb4:	f7fd fe66 	bl	19b84 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1beb8:	b130      	cbz	r0, 1bec8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   1beba:	2d02      	cmp	r5, #2
   1bebc:	d006      	beq.n	1becc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1bebe:	2d03      	cmp	r5, #3
   1bec0:	d004      	beq.n	1becc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1bec2:	e008      	b.n	1bed6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   1bec4:	2206      	movs	r2, #6
   1bec6:	e7ed      	b.n	1bea4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1bec8:	2007      	movs	r0, #7
   1beca:	e7c4      	b.n	1be56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1becc:	4642      	mov	r2, r8
   1bece:	2100      	movs	r1, #0
   1bed0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bed2:	f7fd fe99 	bl	19c08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1bed6:	2000      	movs	r0, #0
   1bed8:	e7bd      	b.n	1be56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0001beda <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1beda:	b510      	push	{r4, lr}
   1bedc:	4604      	mov	r4, r0
   1bede:	8880      	ldrh	r0, [r0, #4]
   1bee0:	b128      	cbz	r0, 1beee <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1bee2:	2801      	cmp	r0, #1
   1bee4:	d003      	beq.n	1beee <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1bee6:	2802      	cmp	r0, #2
   1bee8:	d001      	beq.n	1beee <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1beea:	2012      	movs	r0, #18
   1beec:	bd10      	pop	{r4, pc}
   1beee:	78e0      	ldrb	r0, [r4, #3]
   1bef0:	f000 f9dc 	bl	1c2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   1bef4:	b148      	cbz	r0, 1bf0a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1bef6:	78a0      	ldrb	r0, [r4, #2]
   1bef8:	f000 f9d8 	bl	1c2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   1befc:	b128      	cbz	r0, 1bf0a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1befe:	4620      	mov	r0, r4
   1bf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bf04:	2101      	movs	r1, #1
   1bf06:	f000 b884 	b.w	1c012 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1bf0a:	2011      	movs	r0, #17
   1bf0c:	bd10      	pop	{r4, pc}

0001bf0e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   1bf0e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1bf10:	460c      	mov	r4, r1
   1bf12:	4605      	mov	r5, r0
   1bf14:	8800      	ldrh	r0, [r0, #0]
   1bf16:	4669      	mov	r1, sp
   1bf18:	f7fd ff88 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1bf1c:	2800      	cmp	r0, #0
   1bf1e:	d106      	bne.n	1bf2e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   1bf20:	9801      	ldr	r0, [sp, #4]
   1bf22:	8829      	ldrh	r1, [r5, #0]
   1bf24:	8021      	strh	r1, [r4, #0]
   1bf26:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   1bf2a:	8060      	strh	r0, [r4, #2]
   1bf2c:	2000      	movs	r0, #0
   1bf2e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001bf30 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   1bf30:	b510      	push	{r4, lr}
   1bf32:	4604      	mov	r4, r0
   1bf34:	4601      	mov	r1, r0
   1bf36:	2000      	movs	r0, #0
   1bf38:	f7f5 fbc4 	bl	116c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1bf3c:	b910      	cbnz	r0, 1bf44 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   1bf3e:	2000      	movs	r0, #0
   1bf40:	6020      	str	r0, [r4, #0]
   1bf42:	80a0      	strh	r0, [r4, #4]
   1bf44:	2000      	movs	r0, #0
   1bf46:	bd10      	pop	{r4, pc}

0001bf48 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1bf48:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1bf4a:	8800      	ldrh	r0, [r0, #0]
   1bf4c:	4669      	mov	r1, sp
   1bf4e:	f7fd ff6d 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1bf52:	b958      	cbnz	r0, 1bf6c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   1bf54:	4668      	mov	r0, sp
   1bf56:	f000 fa47 	bl	1c3e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
   1bf5a:	b138      	cbz	r0, 1bf6c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   1bf5c:	9c01      	ldr	r4, [sp, #4]
   1bf5e:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   1bf62:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
   1bf66:	3470      	adds	r4, #112	; 0x70
   1bf68:	b929      	cbnz	r1, 1bf76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   1bf6a:	e001      	b.n	1bf70 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   1bf6c:	2002      	movs	r0, #2
   1bf6e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1bf70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1bf74:	b109      	cbz	r1, 1bf7a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   1bf76:	203a      	movs	r0, #58	; 0x3a
   1bf78:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1bf7a:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   1bf7e:	f04f 0501 	mov.w	r5, #1
   1bf82:	0789      	lsls	r1, r1, #30
   1bf84:	d103      	bne.n	1bf8e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
   1bf86:	7005      	strb	r5, [r0, #0]
   1bf88:	4668      	mov	r0, sp
   1bf8a:	f7fe fae7 	bl	1a55c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1bf8e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
   1bf92:	2000      	movs	r0, #0
   1bf94:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001bf96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1bf96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1bf98:	460c      	mov	r4, r1
   1bf9a:	4605      	mov	r5, r0
   1bf9c:	8800      	ldrh	r0, [r0, #0]
   1bf9e:	4669      	mov	r1, sp
   1bfa0:	f7fd ff44 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1bfa4:	b108      	cbz	r0, 1bfaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1bfa6:	2002      	movs	r0, #2
   1bfa8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1bfaa:	78a8      	ldrb	r0, [r5, #2]
   1bfac:	b130      	cbz	r0, 1bfbc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   1bfae:	f000 f9f6 	bl	1c39e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   1bfb2:	70a0      	strb	r0, [r4, #2]
   1bfb4:	8828      	ldrh	r0, [r5, #0]
   1bfb6:	8020      	strh	r0, [r4, #0]
   1bfb8:	2000      	movs	r0, #0
   1bfba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1bfbc:	9801      	ldr	r0, [sp, #4]
   1bfbe:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1bfc2:	e7f6      	b.n	1bfb2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001bfc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1bfc4:	b510      	push	{r4, lr}
   1bfc6:	f7fa ff43 	bl	16e50 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1bfca:	2000      	movs	r0, #0
   1bfcc:	bd10      	pop	{r4, pc}

0001bfce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   1bfce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1bfd2:	4604      	mov	r4, r0
   1bfd4:	8840      	ldrh	r0, [r0, #2]
   1bfd6:	460d      	mov	r5, r1
   1bfd8:	b1b8      	cbz	r0, 1c00a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1bfda:	8820      	ldrh	r0, [r4, #0]
   1bfdc:	4669      	mov	r1, sp
   1bfde:	f7fd ff25 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1bfe2:	2800      	cmp	r0, #0
   1bfe4:	d10f      	bne.n	1c006 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1bfe6:	8820      	ldrh	r0, [r4, #0]
   1bfe8:	8028      	strh	r0, [r5, #0]
   1bfea:	9e01      	ldr	r6, [sp, #4]
   1bfec:	f106 050c 	add.w	r5, r6, #12
   1bff0:	3670      	adds	r6, #112	; 0x70
   1bff2:	682f      	ldr	r7, [r5, #0]
   1bff4:	8862      	ldrh	r2, [r4, #2]
   1bff6:	4639      	mov	r1, r7
   1bff8:	4630      	mov	r0, r6
   1bffa:	f7fe f858 	bl	1a0ae <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   1bffe:	6828      	ldr	r0, [r5, #0]
   1c000:	42b8      	cmp	r0, r7
   1c002:	d1f6      	bne.n	1bff2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1c004:	2000      	movs	r0, #0
   1c006:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1c00a:	2012      	movs	r0, #18
   1c00c:	e7fb      	b.n	1c006 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001c00e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1c00e:	f7fa bcf7 	b.w	16a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0001c012 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   1c012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c016:	b086      	sub	sp, #24
   1c018:	468a      	mov	sl, r1
   1c01a:	4606      	mov	r6, r0
   1c01c:	8800      	ldrh	r0, [r0, #0]
   1c01e:	a901      	add	r1, sp, #4
   1c020:	f7fd ff04 	bl	19e2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1c024:	2800      	cmp	r0, #0
   1c026:	d138      	bne.n	1c09a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
   1c028:	9802      	ldr	r0, [sp, #8]
   1c02a:	f04f 0800 	mov.w	r8, #0
   1c02e:	4601      	mov	r1, r0
   1c030:	4689      	mov	r9, r1
   1c032:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
   1c036:	f88d 1000 	strb.w	r1, [sp]
   1c03a:	9900      	ldr	r1, [sp, #0]
   1c03c:	9100      	str	r1, [sp, #0]
   1c03e:	f89d 5000 	ldrb.w	r5, [sp]
   1c042:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   1c046:	3070      	adds	r0, #112	; 0x70
   1c048:	2921      	cmp	r1, #33	; 0x21
   1c04a:	d100      	bne.n	1c04e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   1c04c:	b13d      	cbz	r5, 1c05e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   1c04e:	2400      	movs	r4, #0
   1c050:	304c      	adds	r0, #76	; 0x4c
   1c052:	2108      	movs	r1, #8
   1c054:	4607      	mov	r7, r0
   1c056:	f7ff fae8 	bl	1b62a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   1c05a:	b110      	cbz	r0, 1c062 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
   1c05c:	e007      	b.n	1c06e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   1c05e:	2401      	movs	r4, #1
   1c060:	e7f6      	b.n	1c050 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
   1c062:	210b      	movs	r1, #11
   1c064:	4638      	mov	r0, r7
   1c066:	f7ff fae0 	bl	1b62a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   1c06a:	b900      	cbnz	r0, 1c06e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   1c06c:	b1a4      	cbz	r4, 1c098 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
   1c06e:	a804      	add	r0, sp, #16
   1c070:	9000      	str	r0, [sp, #0]
   1c072:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1c076:	ab03      	add	r3, sp, #12
   1c078:	4632      	mov	r2, r6
   1c07a:	4649      	mov	r1, r9
   1c07c:	f000 f96f 	bl	1c35e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   1c080:	0007      	movs	r7, r0
   1c082:	d10a      	bne.n	1c09a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
   1c084:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1c088:	9c02      	ldr	r4, [sp, #8]
   1c08a:	b148      	cbz	r0, 1c0a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1c08c:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
   1c090:	2001      	movs	r0, #1
   1c092:	7060      	strb	r0, [r4, #1]
   1c094:	b94d      	cbnz	r5, 1c0aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   1c096:	e006      	b.n	1c0a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   1c098:	201a      	movs	r0, #26
   1c09a:	b006      	add	sp, #24
   1c09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c0a0:	f504 7497 	add.w	r4, r4, #302	; 0x12e
   1c0a4:	e7f4      	b.n	1c090 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
   1c0a6:	7820      	ldrb	r0, [r4, #0]
   1c0a8:	b108      	cbz	r0, 1c0ae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   1c0aa:	273a      	movs	r7, #58	; 0x3a
   1c0ac:	e012      	b.n	1c0d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   1c0ae:	f884 a000 	strb.w	sl, [r4]
   1c0b2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1c0b6:	70a0      	strb	r0, [r4, #2]
   1c0b8:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1c0bc:	70e1      	strb	r1, [r4, #3]
   1c0be:	f88d 0000 	strb.w	r0, [sp]
   1c0c2:	f88d 1001 	strb.w	r1, [sp, #1]
   1c0c6:	88b0      	ldrh	r0, [r6, #4]
   1c0c8:	f8ad 0002 	strh.w	r0, [sp, #2]
   1c0cc:	4669      	mov	r1, sp
   1c0ce:	4648      	mov	r0, r9
   1c0d0:	f7fd ff6b 	bl	19faa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1c0d4:	f884 8001 	strb.w	r8, [r4, #1]
   1c0d8:	4638      	mov	r0, r7
   1c0da:	e7de      	b.n	1c09a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0001c0dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   1c0dc:	b510      	push	{r4, lr}
   1c0de:	2008      	movs	r0, #8
   1c0e0:	f7fa ff20 	bl	16f24 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1c0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c0e8:	f7f8 bc98 	b.w	14a1c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   1c0ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1c0f0:	4288      	cmp	r0, r1
   1c0f2:	d303      	bcc.n	1c0fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
   1c0f4:	f640 0148 	movw	r1, #2120	; 0x848
   1c0f8:	4288      	cmp	r0, r1
   1c0fa:	d300      	bcc.n	1c0fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
   1c0fc:	4608      	mov	r0, r1
   1c0fe:	4770      	bx	lr
   1c100:	07c1      	lsls	r1, r0, #31
   1c102:	d001      	beq.n	1c108 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
   1c104:	2001      	movs	r0, #1
   1c106:	4770      	bx	lr
   1c108:	0780      	lsls	r0, r0, #30
   1c10a:	d501      	bpl.n	1c110 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
   1c10c:	2002      	movs	r0, #2
   1c10e:	4770      	bx	lr
   1c110:	2000      	movs	r0, #0
   1c112:	4770      	bx	lr
   1c114:	b510      	push	{r4, lr}
   1c116:	2801      	cmp	r0, #1
   1c118:	d006      	beq.n	1c128 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   1c11a:	2802      	cmp	r0, #2
   1c11c:	d004      	beq.n	1c128 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   1c11e:	f240 2163 	movw	r1, #611	; 0x263
   1c122:	2006      	movs	r0, #6
   1c124:	f7f4 fbd0 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c128:	bd10      	pop	{r4, pc}
   1c12a:	b50e      	push	{r1, r2, r3, lr}
   1c12c:	4669      	mov	r1, sp
   1c12e:	2001      	movs	r0, #1
   1c130:	f7fd fc3e 	bl	199b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1c134:	b150      	cbz	r0, 1c14c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   1c136:	f240 114f 	movw	r1, #335	; 0x14f
   1c13a:	2039      	movs	r0, #57	; 0x39
   1c13c:	f7f4 fbc4 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c140:	9802      	ldr	r0, [sp, #8]
   1c142:	f7fe fe60 	bl	1ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1c146:	b108      	cbz	r0, 1c14c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   1c148:	2001      	movs	r0, #1
   1c14a:	bd0e      	pop	{r1, r2, r3, pc}
   1c14c:	4668      	mov	r0, sp
   1c14e:	f7f4 fdf3 	bl	10d38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1c152:	2800      	cmp	r0, #0
   1c154:	d0f4      	beq.n	1c140 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
   1c156:	2000      	movs	r0, #0
   1c158:	bd0e      	pop	{r1, r2, r3, pc}
   1c15a:	b510      	push	{r4, lr}
   1c15c:	f7ff ffe5 	bl	1c12a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1c160:	b158      	cbz	r0, 1c17a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1c162:	f000 f958 	bl	1c416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1c166:	4604      	mov	r4, r0
   1c168:	f7fe fc7e 	bl	1aa68 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1c16c:	b918      	cbnz	r0, 1c176 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   1c16e:	4620      	mov	r0, r4
   1c170:	f7fe fc70 	bl	1aa54 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1c174:	b108      	cbz	r0, 1c17a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1c176:	2000      	movs	r0, #0
   1c178:	bd10      	pop	{r4, pc}
   1c17a:	2001      	movs	r0, #1
   1c17c:	bd10      	pop	{r4, pc}
   1c17e:	b570      	push	{r4, r5, r6, lr}
   1c180:	460c      	mov	r4, r1
   1c182:	4605      	mov	r5, r0
   1c184:	b112      	cbz	r2, 1c18c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   1c186:	291f      	cmp	r1, #31
   1c188:	d80c      	bhi.n	1c1a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   1c18a:	e016      	b.n	1c1ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   1c18c:	f7f5 f89a 	bl	112c4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1c190:	42a0      	cmp	r0, r4
   1c192:	d201      	bcs.n	1c198 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   1c194:	2007      	movs	r0, #7
   1c196:	bd70      	pop	{r4, r5, r6, pc}
   1c198:	4628      	mov	r0, r5
   1c19a:	f7fe fc63 	bl	1aa64 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1c19e:	b118      	cbz	r0, 1c1a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1c1a0:	2c1f      	cmp	r4, #31
   1c1a2:	d901      	bls.n	1c1a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1c1a4:	2012      	movs	r0, #18
   1c1a6:	bd70      	pop	{r4, r5, r6, pc}
   1c1a8:	4628      	mov	r0, r5
   1c1aa:	f7fe fc64 	bl	1aa76 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1c1ae:	b130      	cbz	r0, 1c1be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   1c1b0:	4621      	mov	r1, r4
   1c1b2:	4628      	mov	r0, r5
   1c1b4:	f7fe fc2b 	bl	1aa0e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1c1b8:	b118      	cbz	r0, 1c1c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   1c1ba:	2000      	movs	r0, #0
   1c1bc:	bd70      	pop	{r4, r5, r6, pc}
   1c1be:	2042      	movs	r0, #66	; 0x42
   1c1c0:	bd70      	pop	{r4, r5, r6, pc}
   1c1c2:	2045      	movs	r0, #69	; 0x45
   1c1c4:	bd70      	pop	{r4, r5, r6, pc}
   1c1c6:	b510      	push	{r4, lr}
   1c1c8:	4604      	mov	r4, r0
   1c1ca:	7840      	ldrb	r0, [r0, #1]
   1c1cc:	06c1      	lsls	r1, r0, #27
   1c1ce:	d51c      	bpl.n	1c20a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1c1d0:	07c0      	lsls	r0, r0, #31
   1c1d2:	d00b      	beq.n	1c1ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1c1d4:	f7fa fe7a 	bl	16ecc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1c1d8:	b1b8      	cbz	r0, 1c20a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1c1da:	7860      	ldrb	r0, [r4, #1]
   1c1dc:	06c1      	lsls	r1, r0, #27
   1c1de:	d405      	bmi.n	1c1ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1c1e0:	0700      	lsls	r0, r0, #28
   1c1e2:	d503      	bpl.n	1c1ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1c1e4:	7d20      	ldrb	r0, [r4, #20]
   1c1e6:	2802      	cmp	r0, #2
   1c1e8:	d10f      	bne.n	1c20a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1c1ea:	e010      	b.n	1c20e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   1c1ec:	7d20      	ldrb	r0, [r4, #20]
   1c1ee:	2802      	cmp	r0, #2
   1c1f0:	d001      	beq.n	1c1f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   1c1f2:	7ea0      	ldrb	r0, [r4, #26]
   1c1f4:	b948      	cbnz	r0, 1c20a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1c1f6:	7860      	ldrb	r0, [r4, #1]
   1c1f8:	0700      	lsls	r0, r0, #28
   1c1fa:	d408      	bmi.n	1c20e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   1c1fc:	f8d4 0005 	ldr.w	r0, [r4, #5]
   1c200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1c204:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1c208:	d201      	bcs.n	1c20e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   1c20a:	2011      	movs	r0, #17
   1c20c:	bd10      	pop	{r4, pc}
   1c20e:	2000      	movs	r0, #0
   1c210:	bd10      	pop	{r4, pc}
   1c212:	b538      	push	{r3, r4, r5, lr}
   1c214:	4604      	mov	r4, r0
   1c216:	7800      	ldrb	r0, [r0, #0]
   1c218:	28ef      	cmp	r0, #239	; 0xef
   1c21a:	d843      	bhi.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c21c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1c220:	f8ad 0000 	strh.w	r0, [sp]
   1c224:	9800      	ldr	r0, [sp, #0]
   1c226:	f000 f951 	bl	1c4cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
   1c22a:	b3a0      	cbz	r0, 1c296 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   1c22c:	7861      	ldrb	r1, [r4, #1]
   1c22e:	0708      	lsls	r0, r1, #28
   1c230:	d40b      	bmi.n	1c24a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   1c232:	f8d4 0002 	ldr.w	r0, [r4, #2]
   1c236:	f8d4 3005 	ldr.w	r3, [r4, #5]
   1c23a:	0a02      	lsrs	r2, r0, #8
   1c23c:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1c240:	d830      	bhi.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c242:	2220      	movs	r2, #32
   1c244:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1c248:	d82c      	bhi.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c24a:	7a60      	ldrb	r0, [r4, #9]
   1c24c:	b318      	cbz	r0, 1c296 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   1c24e:	2807      	cmp	r0, #7
   1c250:	d828      	bhi.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c252:	7aa0      	ldrb	r0, [r4, #10]
   1c254:	b128      	cbz	r0, 1c262 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1c256:	2801      	cmp	r0, #1
   1c258:	d003      	beq.n	1c262 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1c25a:	2802      	cmp	r0, #2
   1c25c:	d001      	beq.n	1c262 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1c25e:	2803      	cmp	r0, #3
   1c260:	d120      	bne.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c262:	074a      	lsls	r2, r1, #29
   1c264:	d403      	bmi.n	1c26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   1c266:	2802      	cmp	r0, #2
   1c268:	d001      	beq.n	1c26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   1c26a:	2803      	cmp	r0, #3
   1c26c:	d105      	bne.n	1c27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   1c26e:	7ae0      	ldrb	r0, [r4, #11]
   1c270:	b108      	cbz	r0, 1c276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   1c272:	2801      	cmp	r0, #1
   1c274:	d116      	bne.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c276:	0748      	lsls	r0, r1, #29
   1c278:	d407      	bmi.n	1c28a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1c27a:	7ca0      	ldrb	r0, [r4, #18]
   1c27c:	b128      	cbz	r0, 1c28a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1c27e:	2801      	cmp	r0, #1
   1c280:	d003      	beq.n	1c28a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1c282:	2802      	cmp	r0, #2
   1c284:	d001      	beq.n	1c28a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1c286:	2803      	cmp	r0, #3
   1c288:	d10c      	bne.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c28a:	06c8      	lsls	r0, r1, #27
   1c28c:	7d20      	ldrb	r0, [r4, #20]
   1c28e:	d503      	bpl.n	1c298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   1c290:	2801      	cmp	r0, #1
   1c292:	d107      	bne.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c294:	e002      	b.n	1c29c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   1c296:	e005      	b.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c298:	2802      	cmp	r0, #2
   1c29a:	d003      	beq.n	1c2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1c29c:	7e20      	ldrb	r0, [r4, #24]
   1c29e:	b118      	cbz	r0, 1c2a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1c2a0:	2801      	cmp	r0, #1
   1c2a2:	d001      	beq.n	1c2a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1c2a4:	2012      	movs	r0, #18
   1c2a6:	bd38      	pop	{r3, r4, r5, pc}
   1c2a8:	2000      	movs	r0, #0
   1c2aa:	bd38      	pop	{r3, r4, r5, pc}
   1c2ac:	b510      	push	{r4, lr}
   1c2ae:	0004      	movs	r4, r0
   1c2b0:	d005      	beq.n	1c2be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   1c2b2:	f7fa fe47 	bl	16f44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c2b6:	4384      	bics	r4, r0
   1c2b8:	d001      	beq.n	1c2be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   1c2ba:	2000      	movs	r0, #0
   1c2bc:	bd10      	pop	{r4, pc}
   1c2be:	2001      	movs	r0, #1
   1c2c0:	bd10      	pop	{r4, pc}
   1c2c2:	28fb      	cmp	r0, #251	; 0xfb
   1c2c4:	d803      	bhi.n	1c2ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   1c2c6:	f640 0048 	movw	r0, #2120	; 0x848
   1c2ca:	4281      	cmp	r1, r0
   1c2cc:	d901      	bls.n	1c2d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   1c2ce:	2011      	movs	r0, #17
   1c2d0:	4770      	bx	lr
   1c2d2:	2000      	movs	r0, #0
   1c2d4:	4770      	bx	lr
   1c2d6:	381b      	subs	r0, #27
   1c2d8:	28e1      	cmp	r0, #225	; 0xe1
   1c2da:	d206      	bcs.n	1c2ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   1c2dc:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1c2e0:	d303      	bcc.n	1c2ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   1c2e2:	f244 2090 	movw	r0, #17040	; 0x4290
   1c2e6:	4281      	cmp	r1, r0
   1c2e8:	d901      	bls.n	1c2ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   1c2ea:	2012      	movs	r0, #18
   1c2ec:	4770      	bx	lr
   1c2ee:	2000      	movs	r0, #0
   1c2f0:	4770      	bx	lr
   1c2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2f6:	4606      	mov	r6, r0
   1c2f8:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   1c2fc:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   1c300:	4615      	mov	r5, r2
   1c302:	302c      	adds	r0, #44	; 0x2c
   1c304:	f7f7 fe16 	bl	13f34 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   1c308:	4680      	mov	r8, r0
   1c30a:	2102      	movs	r1, #2
   1c30c:	f7fd fe1e 	bl	19f4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1c310:	4287      	cmp	r7, r0
   1c312:	d200      	bcs.n	1c316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   1c314:	4638      	mov	r0, r7
   1c316:	4607      	mov	r7, r0
   1c318:	2102      	movs	r1, #2
   1c31a:	4640      	mov	r0, r8
   1c31c:	f7fd fe16 	bl	19f4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1c320:	4284      	cmp	r4, r0
   1c322:	d200      	bcs.n	1c326 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   1c324:	4620      	mov	r0, r4
   1c326:	8831      	ldrh	r1, [r6, #0]
   1c328:	8029      	strh	r1, [r5, #0]
   1c32a:	2f1b      	cmp	r7, #27
   1c32c:	d913      	bls.n	1c356 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   1c32e:	2ffb      	cmp	r7, #251	; 0xfb
   1c330:	d300      	bcc.n	1c334 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   1c332:	27fb      	movs	r7, #251	; 0xfb
   1c334:	806f      	strh	r7, [r5, #2]
   1c336:	281b      	cmp	r0, #27
   1c338:	d90f      	bls.n	1c35a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   1c33a:	28fb      	cmp	r0, #251	; 0xfb
   1c33c:	d300      	bcc.n	1c340 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1c33e:	20fb      	movs	r0, #251	; 0xfb
   1c340:	80e8      	strh	r0, [r5, #6]
   1c342:	4640      	mov	r0, r8
   1c344:	f7ff fed2 	bl	1c0ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   1c348:	80a8      	strh	r0, [r5, #4]
   1c34a:	4640      	mov	r0, r8
   1c34c:	f7ff fece 	bl	1c0ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   1c350:	8128      	strh	r0, [r5, #8]
   1c352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c356:	271b      	movs	r7, #27
   1c358:	e7ec      	b.n	1c334 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   1c35a:	201b      	movs	r0, #27
   1c35c:	e7f0      	b.n	1c340 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1c35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c362:	7890      	ldrb	r0, [r2, #2]
   1c364:	9e06      	ldr	r6, [sp, #24]
   1c366:	461d      	mov	r5, r3
   1c368:	4614      	mov	r4, r2
   1c36a:	b908      	cbnz	r0, 1c370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   1c36c:	f7fa fdea 	bl	16f44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c370:	78e4      	ldrb	r4, [r4, #3]
   1c372:	4607      	mov	r7, r0
   1c374:	b914      	cbnz	r4, 1c37c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   1c376:	f7fa fde5 	bl	16f44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1c37a:	4604      	mov	r4, r0
   1c37c:	b16f      	cbz	r7, 1c39a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1c37e:	b164      	cbz	r4, 1c39a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1c380:	4638      	mov	r0, r7
   1c382:	f7ff febd 	bl	1c100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   1c386:	4620      	mov	r0, r4
   1c388:	f7ff feba 	bl	1c100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   1c38c:	b12f      	cbz	r7, 1c39a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1c38e:	b124      	cbz	r4, 1c39a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1c390:	702f      	strb	r7, [r5, #0]
   1c392:	7034      	strb	r4, [r6, #0]
   1c394:	2000      	movs	r0, #0
   1c396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c39a:	2009      	movs	r0, #9
   1c39c:	e7fb      	b.n	1c396 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   1c39e:	b510      	push	{r4, lr}
   1c3a0:	f7fc faa5 	bl	188ee <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1c3a4:	b928      	cbnz	r0, 1c3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   1c3a6:	f7fc fad8 	bl	1895a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   1c3aa:	b910      	cbnz	r0, 1c3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   1c3ac:	f7fc fadf 	bl	1896e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1c3b0:	b108      	cbz	r0, 1c3b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   1c3b2:	2008      	movs	r0, #8
   1c3b4:	bd10      	pop	{r4, pc}
   1c3b6:	f7fc fa6f 	bl	18898 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1c3ba:	b940      	cbnz	r0, 1c3ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1c3bc:	f7fc fa76 	bl	188ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1c3c0:	b928      	cbnz	r0, 1c3ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1c3c2:	f7fc fa8a 	bl	188da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1c3c6:	b910      	cbnz	r0, 1c3ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1c3c8:	f7fc fa9b 	bl	18902 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1c3cc:	b108      	cbz	r0, 1c3d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   1c3ce:	2004      	movs	r0, #4
   1c3d0:	bd10      	pop	{r4, pc}
   1c3d2:	f240 519c 	movw	r1, #1436	; 0x59c
   1c3d6:	2039      	movs	r0, #57	; 0x39
   1c3d8:	f7f4 fa76 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c3dc:	b510      	push	{r4, lr}
   1c3de:	f7fa fdab 	bl	16f38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1c3e2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c3e6:	bd10      	pop	{r4, pc}
   1c3e8:	6840      	ldr	r0, [r0, #4]
   1c3ea:	f000 b800 	b.w	1c3ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   1c3ee:	b508      	push	{r3, lr}
   1c3f0:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
   1c3f4:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   1c3f8:	f88d 0000 	strb.w	r0, [sp]
   1c3fc:	9800      	ldr	r0, [sp, #0]
   1c3fe:	9000      	str	r0, [sp, #0]
   1c400:	f89d 0000 	ldrb.w	r0, [sp]
   1c404:	1e40      	subs	r0, r0, #1
   1c406:	4208      	tst	r0, r1
   1c408:	d003      	beq.n	1c412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   1c40a:	2904      	cmp	r1, #4
   1c40c:	d001      	beq.n	1c412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   1c40e:	2001      	movs	r0, #1
   1c410:	bd08      	pop	{r3, pc}
   1c412:	2000      	movs	r0, #0
   1c414:	bd08      	pop	{r3, pc}
   1c416:	b510      	push	{r4, lr}
   1c418:	2101      	movs	r1, #1
   1c41a:	2000      	movs	r0, #0
   1c41c:	f7fd fabe 	bl	1999c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1c420:	0004      	movs	r4, r0
   1c422:	d108      	bne.n	1c436 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
   1c424:	2200      	movs	r2, #0
   1c426:	2101      	movs	r1, #1
   1c428:	4610      	mov	r0, r2
   1c42a:	f7fd faad 	bl	19988 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1c42e:	0004      	movs	r4, r0
   1c430:	d003      	beq.n	1c43a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
   1c432:	f7fe fab4 	bl	1a99e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   1c436:	4620      	mov	r0, r4
   1c438:	bd10      	pop	{r4, pc}
   1c43a:	f240 2135 	movw	r1, #565	; 0x235
   1c43e:	2039      	movs	r0, #57	; 0x39
   1c440:	f7f4 fa42 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c444:	b510      	push	{r4, lr}
   1c446:	f7ff fe70 	bl	1c12a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1c44a:	2800      	cmp	r0, #0
   1c44c:	d000      	beq.n	1c450 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
   1c44e:	2001      	movs	r0, #1
   1c450:	bd10      	pop	{r4, pc}
   1c452:	b570      	push	{r4, r5, r6, lr}
   1c454:	4605      	mov	r5, r0
   1c456:	f7fe fb0e 	bl	1aa76 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1c45a:	b170      	cbz	r0, 1c47a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
   1c45c:	4628      	mov	r0, r5
   1c45e:	f7fe fcd2 	bl	1ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1c462:	2800      	cmp	r0, #0
   1c464:	d008      	beq.n	1c478 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
   1c466:	4628      	mov	r0, r5
   1c468:	f7fe fcca 	bl	1ae00 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   1c46c:	4604      	mov	r4, r0
   1c46e:	4628      	mov	r0, r5
   1c470:	f7fe fca0 	bl	1adb4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1c474:	b118      	cbz	r0, 1c47e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
   1c476:	200c      	movs	r0, #12
   1c478:	bd70      	pop	{r4, r5, r6, pc}
   1c47a:	2042      	movs	r0, #66	; 0x42
   1c47c:	bd70      	pop	{r4, r5, r6, pc}
   1c47e:	b164      	cbz	r4, 1c49a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   1c480:	8820      	ldrh	r0, [r4, #0]
   1c482:	f7fd fc13 	bl	19cac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1c486:	8820      	ldrh	r0, [r4, #0]
   1c488:	2100      	movs	r1, #0
   1c48a:	f7f4 fca5 	bl	10dd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1c48e:	b120      	cbz	r0, 1c49a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   1c490:	f241 41ca 	movw	r1, #5322	; 0x14ca
   1c494:	2039      	movs	r0, #57	; 0x39
   1c496:	f7f4 fa17 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c49a:	2000      	movs	r0, #0
   1c49c:	bd70      	pop	{r4, r5, r6, pc}
   1c49e:	b530      	push	{r4, r5, lr}
   1c4a0:	f340 0400 	sbfx	r4, r0, #0, #1
   1c4a4:	f340 0040 	sbfx	r0, r0, #1, #1
   1c4a8:	1c40      	adds	r0, r0, #1
   1c4aa:	9d03      	ldr	r5, [sp, #12]
   1c4ac:	1c64      	adds	r4, r4, #1
   1c4ae:	d000      	beq.n	1c4b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
   1c4b0:	b119      	cbz	r1, 1c4ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1c4b2:	b100      	cbz	r0, 1c4b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   1c4b4:	b10a      	cbz	r2, 1c4ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1c4b6:	b91c      	cbnz	r4, 1c4c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
   1c4b8:	e001      	b.n	1c4be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
   1c4ba:	2011      	movs	r0, #17
   1c4bc:	bd30      	pop	{r4, r5, pc}
   1c4be:	2100      	movs	r1, #0
   1c4c0:	7019      	strb	r1, [r3, #0]
   1c4c2:	b900      	cbnz	r0, 1c4c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
   1c4c4:	2200      	movs	r2, #0
   1c4c6:	702a      	strb	r2, [r5, #0]
   1c4c8:	2000      	movs	r0, #0
   1c4ca:	bd30      	pop	{r4, r5, pc}
   1c4cc:	b2c0      	uxtb	r0, r0
   1c4ce:	06c1      	lsls	r1, r0, #27
   1c4d0:	d40c      	bmi.n	1c4ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
   1c4d2:	0681      	lsls	r1, r0, #26
   1c4d4:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   1c4d8:	d503      	bpl.n	1c4e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
   1c4da:	b9d1      	cbnz	r1, 1c512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c4dc:	0781      	lsls	r1, r0, #30
   1c4de:	d418      	bmi.n	1c512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c4e0:	e001      	b.n	1c4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
   1c4e2:	2900      	cmp	r1, #0
   1c4e4:	d1fa      	bne.n	1c4dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
   1c4e6:	0700      	lsls	r0, r0, #28
   1c4e8:	d413      	bmi.n	1c512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c4ea:	e010      	b.n	1c50e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   1c4ec:	0641      	lsls	r1, r0, #25
   1c4ee:	d410      	bmi.n	1c512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c4f0:	0681      	lsls	r1, r0, #26
   1c4f2:	d40e      	bmi.n	1c512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c4f4:	07c1      	lsls	r1, r0, #31
   1c4f6:	ea4f 7180 	mov.w	r1, r0, lsl #30
   1c4fa:	d004      	beq.n	1c506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   1c4fc:	2900      	cmp	r1, #0
   1c4fe:	db02      	blt.n	1c506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   1c500:	0740      	lsls	r0, r0, #29
   1c502:	d404      	bmi.n	1c50e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   1c504:	e005      	b.n	1c512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c506:	0701      	lsls	r1, r0, #28
   1c508:	d403      	bmi.n	1c512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c50a:	0740      	lsls	r0, r0, #29
   1c50c:	d401      	bmi.n	1c512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1c50e:	2001      	movs	r0, #1
   1c510:	4770      	bx	lr
   1c512:	2000      	movs	r0, #0
   1c514:	4770      	bx	lr
   1c516:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1c518:	4669      	mov	r1, sp
   1c51a:	2001      	movs	r0, #1
   1c51c:	f7fd fa48 	bl	199b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1c520:	b178      	cbz	r0, 1c542 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   1c522:	f240 116d 	movw	r1, #365	; 0x16d
   1c526:	2039      	movs	r0, #57	; 0x39
   1c528:	f7f4 f9ce 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c52c:	9c02      	ldr	r4, [sp, #8]
   1c52e:	4620      	mov	r0, r4
   1c530:	f7fe fc69 	bl	1ae06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1c534:	b128      	cbz	r0, 1c542 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   1c536:	4620      	mov	r0, r4
   1c538:	f7fe facb 	bl	1aad2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   1c53c:	b108      	cbz	r0, 1c542 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   1c53e:	2001      	movs	r0, #1
   1c540:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1c542:	4668      	mov	r0, sp
   1c544:	f7f4 fbf8 	bl	10d38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1c548:	2800      	cmp	r0, #0
   1c54a:	d0ef      	beq.n	1c52c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
   1c54c:	2000      	movs	r0, #0
   1c54e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001c550 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   1c550:	6802      	ldr	r2, [r0, #0]
   1c552:	b912      	cbnz	r2, 1c55a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   1c554:	6001      	str	r1, [r0, #0]
   1c556:	4770      	bx	lr
   1c558:	4602      	mov	r2, r0
   1c55a:	6850      	ldr	r0, [r2, #4]
   1c55c:	b108      	cbz	r0, 1c562 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   1c55e:	428a      	cmp	r2, r1
   1c560:	d1fa      	bne.n	1c558 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   1c562:	428a      	cmp	r2, r1
   1c564:	d0f7      	beq.n	1c556 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   1c566:	6051      	str	r1, [r2, #4]
   1c568:	4770      	bx	lr
   1c56a:	b510      	push	{r4, lr}
   1c56c:	f7fe fc4e 	bl	1ae0c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1c570:	b108      	cbz	r0, 1c576 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   1c572:	21d9      	movs	r1, #217	; 0xd9
   1c574:	e003      	b.n	1c57e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   1c576:	f7f6 fe6b 	bl	13250 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1c57a:	b118      	cbz	r0, 1c584 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   1c57c:	21de      	movs	r1, #222	; 0xde
   1c57e:	2001      	movs	r0, #1
   1c580:	f7f4 f9a2 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c588:	2001      	movs	r0, #1
   1c58a:	f7f4 bb6b 	b.w	10c64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1c58e:	b510      	push	{r4, lr}
   1c590:	4604      	mov	r4, r0
   1c592:	e002      	b.n	1c59a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
   1c594:	6820      	ldr	r0, [r4, #0]
   1c596:	4780      	blx	r0
   1c598:	6864      	ldr	r4, [r4, #4]
   1c59a:	2c00      	cmp	r4, #0
   1c59c:	d1fa      	bne.n	1c594 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   1c59e:	bd10      	pop	{r4, pc}
   1c5a0:	b510      	push	{r4, lr}
   1c5a2:	2000      	movs	r0, #0
   1c5a4:	f7f4 fb5e 	bl	10c64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1c5a8:	f7f4 fd94 	bl	110d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1c5ac:	f7f5 f86c 	bl	11688 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1c5b0:	f7f5 fa5a 	bl	11a68 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1c5b4:	2800      	cmp	r0, #0
   1c5b6:	d003      	beq.n	1c5c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
   1c5b8:	21b8      	movs	r1, #184	; 0xb8
   1c5ba:	2001      	movs	r0, #1
   1c5bc:	f7f4 f984 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c5c0:	bd10      	pop	{r4, pc}
   1c5c2:	b510      	push	{r4, lr}
   1c5c4:	f7ff ffd1 	bl	1c56a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   1c5c8:	f7fe ffef 	bl	1b5aa <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1c5cc:	2800      	cmp	r0, #0
   1c5ce:	d003      	beq.n	1c5d8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
   1c5d0:	21f5      	movs	r1, #245	; 0xf5
   1c5d2:	2001      	movs	r0, #1
   1c5d4:	f7f4 f978 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c5d8:	bd10      	pop	{r4, pc}

0001c5da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   1c5da:	f7f3 bdd1 	b.w	10180 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1c5de:	0001      	.short	0x0001
   1c5e0:	0002000b 	.word	0x0002000b
   1c5e4:	0005000a 	.word	0x0005000a
   1c5e8:	000a0009 	.word	0x000a0009
   1c5ec:	00140008 	.word	0x00140008
   1c5f0:	001e0007 	.word	0x001e0007
   1c5f4:	00320006 	.word	0x00320006
   1c5f8:	004b0005 	.word	0x004b0005
   1c5fc:	00640004 	.word	0x00640004
   1c600:	00960003 	.word	0x00960003
   1c604:	00fa0002 	.word	0x00fa0002
   1c608:	01f40001 	.word	0x01f40001
	...

0001c60e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1c60e:	b510      	push	{r4, lr}
   1c610:	f7fb f88c 	bl	1772c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1c614:	f000 f850 	bl	1c6b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1c618:	f7fa fd02 	bl	17020 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1c61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c620:	f7fa be00 	b.w	17224 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001c624 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1c624:	b510      	push	{r4, lr}
   1c626:	24c8      	movs	r4, #200	; 0xc8
   1c628:	1e64      	subs	r4, r4, #1
   1c62a:	b2e4      	uxtb	r4, r4
   1c62c:	f7fa fd16 	bl	1705c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   1c630:	2802      	cmp	r0, #2
   1c632:	d003      	beq.n	1c63c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1c634:	2801      	cmp	r0, #1
   1c636:	d000      	beq.n	1c63a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   1c638:	2000      	movs	r0, #0
   1c63a:	bd10      	pop	{r4, pc}
   1c63c:	2c00      	cmp	r4, #0
   1c63e:	d1f3      	bne.n	1c628 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   1c640:	2193      	movs	r1, #147	; 0x93
   1c642:	203b      	movs	r0, #59	; 0x3b
   1c644:	f7f4 f940 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001c648 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   1c648:	b510      	push	{r4, lr}
   1c64a:	f7f4 f807 	bl	1065c <mpsl_fem_lna_configuration_clear>
   1c64e:	2800      	cmp	r0, #0
   1c650:	d005      	beq.n	1c65e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   1c652:	1c40      	adds	r0, r0, #1
   1c654:	d003      	beq.n	1c65e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   1c656:	2150      	movs	r1, #80	; 0x50
   1c658:	2040      	movs	r0, #64	; 0x40
   1c65a:	f7f4 f935 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c65e:	bd10      	pop	{r4, pc}

0001c660 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   1c660:	b510      	push	{r4, lr}
   1c662:	f7f4 f807 	bl	10674 <mpsl_fem_pa_configuration_clear>
   1c666:	2800      	cmp	r0, #0
   1c668:	d005      	beq.n	1c676 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1c66a:	1c40      	adds	r0, r0, #1
   1c66c:	d003      	beq.n	1c676 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1c66e:	2149      	movs	r1, #73	; 0x49
   1c670:	2040      	movs	r0, #64	; 0x40
   1c672:	f7f4 f929 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c676:	bd10      	pop	{r4, pc}

0001c678 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   1c678:	b510      	push	{r4, lr}
   1c67a:	f7f3 ffe9 	bl	10650 <mpsl_fem_disable>
   1c67e:	2800      	cmp	r0, #0
   1c680:	d005      	beq.n	1c68e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1c682:	1c40      	adds	r0, r0, #1
   1c684:	d003      	beq.n	1c68e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1c686:	2157      	movs	r1, #87	; 0x57
   1c688:	2040      	movs	r0, #64	; 0x40
   1c68a:	f7f4 f91d 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c68e:	bd10      	pop	{r4, pc}

0001c690 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   1c690:	b510      	push	{r4, lr}
   1c692:	2100      	movs	r1, #0
   1c694:	4608      	mov	r0, r1
   1c696:	f7f3 ffe7 	bl	10668 <mpsl_fem_lna_configuration_set>
   1c69a:	b108      	cbz	r0, 1c6a0 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   1c69c:	2000      	movs	r0, #0
   1c69e:	bd10      	pop	{r4, pc}
   1c6a0:	2001      	movs	r0, #1
   1c6a2:	bd10      	pop	{r4, pc}

0001c6a4 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   1c6a4:	b508      	push	{r3, lr}
   1c6a6:	4668      	mov	r0, sp
   1c6a8:	f7f3 fff0 	bl	1068c <mpsl_fem_pa_is_configured>
   1c6ac:	f89d 0000 	ldrb.w	r0, [sp]
   1c6b0:	2800      	cmp	r0, #0
   1c6b2:	d000      	beq.n	1c6b6 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   1c6b4:	2001      	movs	r0, #1
   1c6b6:	bd08      	pop	{r3, pc}

0001c6b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1c6b8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1c6bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c6c0:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1c6c4:	f3bf 8f4f 	dsb	sy
   1c6c8:	f3bf 8f6f 	isb	sy
   1c6cc:	f7fa be84 	b.w	173d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1c6d0:	2800      	cmp	r0, #0
   1c6d2:	db09      	blt.n	1c6e8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1c6d4:	f000 021f 	and.w	r2, r0, #31
   1c6d8:	2101      	movs	r1, #1
   1c6da:	4091      	lsls	r1, r2
   1c6dc:	0940      	lsrs	r0, r0, #5
   1c6de:	0080      	lsls	r0, r0, #2
   1c6e0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1c6e4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1c6e8:	4770      	bx	lr
   1c6ea:	2800      	cmp	r0, #0
   1c6ec:	db0d      	blt.n	1c70a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   1c6ee:	f000 021f 	and.w	r2, r0, #31
   1c6f2:	2101      	movs	r1, #1
   1c6f4:	4091      	lsls	r1, r2
   1c6f6:	0940      	lsrs	r0, r0, #5
   1c6f8:	0080      	lsls	r0, r0, #2
   1c6fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1c6fe:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1c702:	f3bf 8f4f 	dsb	sy
   1c706:	f3bf 8f6f 	isb	sy
   1c70a:	4770      	bx	lr

0001c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   1c70c:	b510      	push	{r4, lr}
   1c70e:	2801      	cmp	r0, #1
   1c710:	d006      	beq.n	1c720 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   1c712:	2802      	cmp	r0, #2
   1c714:	d006      	beq.n	1c724 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   1c716:	f640 3141 	movw	r1, #2881	; 0xb41
   1c71a:	203e      	movs	r0, #62	; 0x3e
   1c71c:	f7f4 f8d4 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c720:	2028      	movs	r0, #40	; 0x28
   1c722:	bd10      	pop	{r4, pc}
   1c724:	2018      	movs	r0, #24
   1c726:	bd10      	pop	{r4, pc}

0001c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   1c728:	b510      	push	{r4, lr}
   1c72a:	2801      	cmp	r0, #1
   1c72c:	d006      	beq.n	1c73c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   1c72e:	2802      	cmp	r0, #2
   1c730:	d007      	beq.n	1c742 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   1c732:	f640 3155 	movw	r1, #2901	; 0xb55
   1c736:	203e      	movs	r0, #62	; 0x3e
   1c738:	f7f4 f8c6 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c73c:	f641 6014 	movw	r0, #7700	; 0x1e14
   1c740:	bd10      	pop	{r4, pc}
   1c742:	f241 1030 	movw	r0, #4400	; 0x1130
   1c746:	bd10      	pop	{r4, pc}

0001c748 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   1c748:	f7fb bd48 	b.w	181dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   1c74c:	b510      	push	{r4, lr}
   1c74e:	460a      	mov	r2, r1
   1c750:	b130      	cbz	r0, 1c760 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   1c752:	2801      	cmp	r0, #1
   1c754:	d00b      	beq.n	1c76e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   1c756:	f240 6114 	movw	r1, #1556	; 0x614
   1c75a:	203e      	movs	r0, #62	; 0x3e
   1c75c:	f7f4 f8b4 	bl	108c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c764:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1c768:	4610      	mov	r0, r2
   1c76a:	f7fa bccb 	b.w	17104 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   1c76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c772:	f102 0129 	add.w	r1, r2, #41	; 0x29
   1c776:	4610      	mov	r0, r2
   1c778:	f7fa bcae 	b.w	170d8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   1c77c:	5840      	ldr	r0, [r0, r1]
   1c77e:	2800      	cmp	r0, #0
   1c780:	d000      	beq.n	1c784 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   1c782:	2001      	movs	r0, #1
   1c784:	4770      	bx	lr
   1c786:	5840      	ldr	r0, [r0, r1]
   1c788:	2800      	cmp	r0, #0
   1c78a:	d000      	beq.n	1c78e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   1c78c:	2001      	movs	r0, #1
   1c78e:	4770      	bx	lr

0001c790 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   1c790:	b570      	push	{r4, r5, r6, lr}
   1c792:	4605      	mov	r5, r0
   1c794:	4614      	mov	r4, r2
   1c796:	4608      	mov	r0, r1
   1c798:	f7ff ffc6 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c79c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   1c7a0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1c7a4:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   1c7a8:	4620      	mov	r0, r4
   1c7aa:	f7ff ffbd 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c7ae:	4428      	add	r0, r5
   1c7b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1c7b4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1c7b8:	fbb0 f5f1 	udiv	r5, r0, r1
   1c7bc:	4620      	mov	r0, r4
   1c7be:	f7ff ffa5 	bl	1c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1c7c2:	4428      	add	r0, r5
   1c7c4:	1d40      	adds	r0, r0, #5
   1c7c6:	bd70      	pop	{r4, r5, r6, pc}

0001c7c8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   1c7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7cc:	4607      	mov	r7, r0
   1c7ce:	461d      	mov	r5, r3
   1c7d0:	460e      	mov	r6, r1
   1c7d2:	4614      	mov	r4, r2
   1c7d4:	4610      	mov	r0, r2
   1c7d6:	f7ff ffa7 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c7da:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   1c7de:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1c7e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1c7e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1c7ea:	2e02      	cmp	r6, #2
   1c7ec:	d00e      	beq.n	1c80c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   1c7ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1c7f2:	4411      	add	r1, r2
   1c7f4:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   1c7f8:	fbb1 f6f0 	udiv	r6, r1, r0
   1c7fc:	4620      	mov	r0, r4
   1c7fe:	f7ff ff85 	bl	1c70c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1c802:	4430      	add	r0, r6
   1c804:	4428      	add	r0, r5
   1c806:	1d40      	adds	r0, r0, #5
   1c808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c80c:	4602      	mov	r2, r0
   1c80e:	e7f0      	b.n	1c7f2 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0001c810 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1c810:	b510      	push	{r4, lr}
   1c812:	4604      	mov	r4, r0
   1c814:	4608      	mov	r0, r1
   1c816:	f7ff ff87 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c81a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1c81e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1c822:	fbb0 f0f1 	udiv	r0, r0, r1
   1c826:	1a20      	subs	r0, r4, r0
   1c828:	1e80      	subs	r0, r0, #2
   1c82a:	bd10      	pop	{r4, pc}

0001c82c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1c82c:	b510      	push	{r4, lr}
   1c82e:	4604      	mov	r4, r0
   1c830:	4608      	mov	r0, r1
   1c832:	f7ff ff79 	bl	1c728 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1c836:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1c83a:	fbb0 f0f1 	udiv	r0, r0, r1
   1c83e:	1a20      	subs	r0, r4, r0
   1c840:	bd10      	pop	{r4, pc}

0001c842 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   1c842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c846:	2902      	cmp	r1, #2
   1c848:	d008      	beq.n	1c85c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   1c84a:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1c84e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1c852:	fbb1 f1f2 	udiv	r1, r1, r2
   1c856:	4408      	add	r0, r1
   1c858:	1e80      	subs	r0, r0, #2
   1c85a:	4770      	bx	lr
   1c85c:	4611      	mov	r1, r2
   1c85e:	e7f6      	b.n	1c84e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0001c860 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   1c860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c864:	2902      	cmp	r1, #2
   1c866:	d007      	beq.n	1c878 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   1c868:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1c86c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1c870:	fbb1 f1f2 	udiv	r1, r1, r2
   1c874:	4408      	add	r0, r1
   1c876:	4770      	bx	lr
   1c878:	4611      	mov	r1, r2
   1c87a:	e7f7      	b.n	1c86c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   1c87c:	1702080c 	.word	0x1702080c
   1c880:	0201010d 	.word	0x0201010d
   1c884:	01010909 	.word	0x01010909
   1c888:	18090206 	.word	0x18090206
   1c88c:	01010318 	.word	0x01010318
   1c890:	03030909 	.word	0x03030909
   1c894:	00000005 	.word	0x00000005

0001c898 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1c898:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1c89a:	4c35      	ldr	r4, [pc, #212]	; (1c970 <nrf_flash_sync_exe+0xd8>)
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c89c:	f04f 31ff 	mov.w	r1, #4294967295
{
   1c8a0:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c8a2:	f04f 30ff 	mov.w	r0, #4294967295
   1c8a6:	f008 fcd3 	bl	25250 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1c8aa:	f104 0118 	add.w	r1, r4, #24
   1c8ae:	4831      	ldr	r0, [pc, #196]	; (1c974 <nrf_flash_sync_exe+0xdc>)
   1c8b0:	f7f0 fb34 	bl	cf1c <mpsl_timeslot_session_open>
   1c8b4:	4606      	mov	r6, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1c8b6:	f008 fcd3 	bl	25260 <multithreading_lock_release>

	if (ret < 0) {
   1c8ba:	2e00      	cmp	r6, #0
   1c8bc:	db51      	blt.n	1c962 <nrf_flash_sync_exe+0xca>
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1c8be:	f240 1301 	movw	r3, #257	; 0x101
   1c8c2:	8523      	strh	r3, [r4, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1c8c4:	69e3      	ldr	r3, [r4, #28]
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;

	_context.op_desc = op_desc;
   1c8c6:	6225      	str	r5, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1c8c8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
	req->params.earliest.length_us =
   1c8cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   1c8ce:	4b2a      	ldr	r3, [pc, #168]	; (1c978 <nrf_flash_sync_exe+0xe0>)
   1c8d0:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1c8d2:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   1c8d4:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1c8d8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   1c8dc:	63e3      	str	r3, [r4, #60]	; 0x3c
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c8de:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1c8e2:	f3bf 8f5b 	dmb	ish
   1c8e6:	e855 3f00 	ldrex	r3, [r5]
   1c8ea:	e845 2100 	strex	r1, r2, [r5]
   1c8ee:	2900      	cmp	r1, #0
   1c8f0:	d1f9      	bne.n	1c8e6 <nrf_flash_sync_exe+0x4e>
   1c8f2:	f3bf 8f5b 	dmb	ish
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c8f6:	f04f 31ff 	mov.w	r1, #4294967295
   1c8fa:	f04f 30ff 	mov.w	r0, #4294967295
   1c8fe:	f008 fca7 	bl	25250 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	ret = mpsl_timeslot_request(_context.session_id, req);
   1c902:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1c906:	7e20      	ldrb	r0, [r4, #24]
   1c908:	f7fb fe56 	bl	185b8 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   1c90c:	f008 fca8 	bl	25260 <multithreading_lock_release>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1c910:	a315      	add	r3, pc, #84	; (adr r3, 1c968 <nrf_flash_sync_exe+0xd0>)
   1c912:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c916:	4620      	mov	r0, r4
   1c918:	f00b fad8 	bl	27ecc <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1c91c:	2800      	cmp	r0, #0
   1c91e:	da0a      	bge.n	1c936 <nrf_flash_sync_exe+0x9e>
   1c920:	f3bf 8f5b 	dmb	ish
   1c924:	2301      	movs	r3, #1
   1c926:	e855 2f00 	ldrex	r2, [r5]
   1c92a:	e845 3100 	strex	r1, r3, [r5]
   1c92e:	2900      	cmp	r1, #0
   1c930:	d1f9      	bne.n	1c926 <nrf_flash_sync_exe+0x8e>
   1c932:	f3bf 8f5b 	dmb	ish
		LOG_ERR("timeout");
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c936:	f04f 31ff 	mov.w	r1, #4294967295
   1c93a:	f04f 30ff 	mov.w	r0, #4294967295
   1c93e:	f008 fc87 	bl	25250 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	mpsl_timeslot_session_close(_context.session_id);
   1c942:	7e20      	ldrb	r0, [r4, #24]
   1c944:	f7fb fe71 	bl	1862a <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1c948:	f008 fc8a 	bl	25260 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c94c:	f3bf 8f5b 	dmb	ish
   1c950:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c952:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   1c956:	b113      	cbz	r3, 1c95e <nrf_flash_sync_exe+0xc6>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
   1c958:	4805      	ldr	r0, [pc, #20]	; (1c970 <nrf_flash_sync_exe+0xd8>)
   1c95a:	f00b fae1 	bl	27f20 <z_impl_k_sem_reset>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   1c95e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   1c960:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1c962:	f06f 000b 	mvn.w	r0, #11
   1c966:	e7fb      	b.n	1c960 <nrf_flash_sync_exe+0xc8>
   1c968:	001138d5 	.word	0x001138d5
   1c96c:	00000000 	.word	0x00000000
   1c970:	20002b50 	.word	0x20002b50
   1c974:	00025d35 	.word	0x00025d35
   1c978:	07a11fff 	.word	0x07a11fff

0001c97c <sensor_node_fsm>:
        [CONFIGURE_STATE] = SMF_CREATE_STATE(configure_state_entry, configure_state_run, NULL),
        [OPERATING_STATE] = SMF_CREATE_STATE(NULL, operating_state_run, NULL),
};

static void sensor_node_fsm(void)
{
   1c97c:	b510      	push	{r4, lr}
    int32_t ret;
    // Set initial state
    smf_set_initial(SMF_CTX(&user_object), &fsm_states[CONFIGURE_STATE]);
   1c97e:	4905      	ldr	r1, [pc, #20]	; (1c994 <sensor_node_fsm+0x18>)
   1c980:	4805      	ldr	r0, [pc, #20]	; (1c998 <sensor_node_fsm+0x1c>)

    // Run the state machine
    while (1)
    {
        // State machine terminates if a non-zero value is returned
        ret = smf_run_state(SMF_CTX(&user_object));
   1c982:	4c05      	ldr	r4, [pc, #20]	; (1c998 <sensor_node_fsm+0x1c>)
    smf_set_initial(SMF_CTX(&user_object), &fsm_states[CONFIGURE_STATE]);
   1c984:	f010 f9ad 	bl	2cce2 <smf_set_initial>
        ret = smf_run_state(SMF_CTX(&user_object));
   1c988:	4620      	mov	r0, r4
   1c98a:	f010 f9d5 	bl	2cd38 <smf_run_state>
        if (ret)
   1c98e:	2800      	cmp	r0, #0
   1c990:	d0fa      	beq.n	1c988 <sensor_node_fsm+0xc>
        {
            // handle return code and terminate state machine
            break;
        }
    }
}
   1c992:	bd10      	pop	{r4, pc}
   1c994:	00032558 	.word	0x00032558
   1c998:	20002284 	.word	0x20002284

0001c99c <clear_id_cb>:
    k_work_submit(&work_clear_id);
   1c99c:	4801      	ldr	r0, [pc, #4]	; (1c9a4 <clear_id_cb+0x8>)
   1c99e:	f00b bc07 	b.w	281b0 <k_work_submit>
   1c9a2:	bf00      	nop
   1c9a4:	20002294 	.word	0x20002294

0001c9a8 <configure_state_run>:
{
   1c9a8:	b507      	push	{r0, r1, r2, lr}
    if (nvs_read(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY, &dev_id_buffer, sizeof(dev_id_buffer)) != sizeof(dev_id_buffer))
   1c9aa:	f000 fa6d 	bl	1ce88 <get_file_system_handle>
   1c9ae:	2301      	movs	r3, #1
   1c9b0:	f10d 0207 	add.w	r2, sp, #7
   1c9b4:	2100      	movs	r1, #0
   1c9b6:	f00f fd65 	bl	2c484 <nvs_read>
   1c9ba:	2801      	cmp	r0, #1
   1c9bc:	d008      	beq.n	1c9d0 <configure_state_run+0x28>
        start_configure_state_adv();
   1c9be:	f000 f919 	bl	1cbf4 <start_configure_state_adv>
	return z_impl_k_sem_take(sem, timeout);
   1c9c2:	4807      	ldr	r0, [pc, #28]	; (1c9e0 <configure_state_run+0x38>)
   1c9c4:	f04f 32ff 	mov.w	r2, #4294967295
   1c9c8:	f04f 33ff 	mov.w	r3, #4294967295
   1c9cc:	f00b fa7e 	bl	27ecc <z_impl_k_sem_take>
    smf_set_state(SMF_CTX(&user_object), &fsm_states[OPERATING_STATE]);
   1c9d0:	4904      	ldr	r1, [pc, #16]	; (1c9e4 <configure_state_run+0x3c>)
   1c9d2:	4805      	ldr	r0, [pc, #20]	; (1c9e8 <configure_state_run+0x40>)
   1c9d4:	f010 f991 	bl	2ccfa <smf_set_state>
}
   1c9d8:	b003      	add	sp, #12
   1c9da:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9de:	bf00      	nop
   1c9e0:	2000226c 	.word	0x2000226c
   1c9e4:	00032568 	.word	0x00032568
   1c9e8:	20002284 	.word	0x20002284

0001c9ec <configure_state_entry>:
{
   1c9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_mgmt_register_group();
   1c9ee:	f006 fc8b 	bl	23308 <os_mgmt_register_group>
    img_mgmt_register_group();
   1c9f2:	f006 fb11 	bl	23018 <img_mgmt_register_group>
    smp_bt_register();
   1c9f6:	f005 ffc7 	bl	22988 <smp_bt_register>
    if (!device_is_ready(clean_row_id_button.port))
   1c9fa:	4d31      	ldr	r5, [pc, #196]	; (1cac0 <configure_state_entry+0xd4>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c9fc:	4831      	ldr	r0, [pc, #196]	; (1cac4 <configure_state_entry+0xd8>)
   1c9fe:	2201      	movs	r2, #1
   1ca00:	2100      	movs	r1, #0
   1ca02:	f014 ff26 	bl	31852 <z_impl_k_sem_init>
    init_watchdog();
   1ca06:	f000 fa6d 	bl	1cee4 <init_watchdog>
    ble_init();
   1ca0a:	f000 f8e3 	bl	1cbd4 <ble_init>
    if (!device_is_ready(clean_row_id_button.port))
   1ca0e:	6828      	ldr	r0, [r5, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1ca10:	f014 fd64 	bl	314dc <z_device_ready>
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
   1ca14:	796b      	ldrb	r3, [r5, #5]
	return gpio_pin_configure(spec->port,
   1ca16:	6828      	ldr	r0, [r5, #0]
   1ca18:	7929      	ldrb	r1, [r5, #4]
   1ca1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
	struct gpio_driver_data *data =
   1ca1e:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   1ca20:	6887      	ldr	r7, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1ca22:	6834      	ldr	r4, [r6, #0]
   1ca24:	f013 0f01 	tst.w	r3, #1
   1ca28:	f04f 0301 	mov.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ca2c:	fa03 f301 	lsl.w	r3, r3, r1
   1ca30:	bf14      	ite	ne
   1ca32:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ca34:	ea24 0303 	biceq.w	r3, r4, r3
   1ca38:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1ca3a:	683b      	ldr	r3, [r7, #0]
   1ca3c:	4798      	blx	r3
    gpio_init_callback(&clear_id_button_cb, clear_id_cb, BIT(clean_row_id_button.pin));
   1ca3e:	792b      	ldrb	r3, [r5, #4]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1ca40:	4821      	ldr	r0, [pc, #132]	; (1cac8 <configure_state_entry+0xdc>)
   1ca42:	4922      	ldr	r1, [pc, #136]	; (1cacc <configure_state_entry+0xe0>)
   1ca44:	2201      	movs	r2, #1
   1ca46:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
   1ca4a:	e9c1 0301 	strd	r0, r3, [r1, #4]
    gpio_add_callback(clean_row_id_button.port, &clear_id_button_cb);
   1ca4e:	6828      	ldr	r0, [r5, #0]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1ca50:	6883      	ldr	r3, [r0, #8]
   1ca52:	69db      	ldr	r3, [r3, #28]
   1ca54:	b103      	cbz	r3, 1ca58 <configure_state_entry+0x6c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1ca56:	4798      	blx	r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1ca58:	6828      	ldr	r0, [r5, #0]
   1ca5a:	7929      	ldrb	r1, [r5, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1ca5c:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   1ca5e:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1ca60:	6824      	ldr	r4, [r4, #0]
   1ca62:	2301      	movs	r3, #1
   1ca64:	408b      	lsls	r3, r1
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1ca66:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ca68:	bf14      	ite	ne
   1ca6a:	f44f 3300 	movne.w	r3, #131072	; 0x20000
   1ca6e:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
   1ca72:	6994      	ldr	r4, [r2, #24]
   1ca74:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   1ca78:	47a0      	blx	r4
    k_work_init(&work_clear_id, clear_id_work_function);
   1ca7a:	4915      	ldr	r1, [pc, #84]	; (1cad0 <configure_state_entry+0xe4>)
   1ca7c:	4815      	ldr	r0, [pc, #84]	; (1cad4 <configure_state_entry+0xe8>)
   1ca7e:	f014 ff5f 	bl	31940 <k_work_init>
    flash_system_init();
   1ca82:	f000 f9dd 	bl	1ce40 <flash_system_init>
    gpio_interface_init();
   1ca86:	f000 fa43 	bl	1cf10 <gpio_interface_init>
    if (!init_bme280())
   1ca8a:	f000 f831 	bl	1caf0 <init_bme280>
   1ca8e:	b908      	cbnz	r0, 1ca94 <configure_state_entry+0xa8>
        sys_reboot(SYS_REBOOT_WARM);
   1ca90:	f000 ff52 	bl	1d938 <sys_reboot>
    init_battery_adc_channel();
   1ca94:	f000 f8f8 	bl	1cc88 <init_battery_adc_channel>
    init_soil_adc_channel();
   1ca98:	f000 f97c 	bl	1cd94 <init_soil_adc_channel>
    init_adc_calibration_channel();
   1ca9c:	f000 f9b6 	bl	1ce0c <init_adc_calibration_channel>
    init_adc_calibration_timer();
   1caa0:	f000 f9f6 	bl	1ce90 <init_adc_calibration_timer>
    start_adc_calibration_timer(K_SECONDS(1), K_SECONDS(30));
   1caa4:	2300      	movs	r3, #0
   1caa6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1caaa:	2100      	movs	r1, #0
   1caac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1cab0:	f000 f9f8 	bl	1cea4 <start_adc_calibration_timer>
}
   1cab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_SUSPEND);
   1cab8:	4807      	ldr	r0, [pc, #28]	; (1cad8 <configure_state_entry+0xec>)
   1caba:	2100      	movs	r1, #0
   1cabc:	f00f be91 	b.w	2c7e2 <pm_device_action_run>
   1cac0:	200004c0 	.word	0x200004c0
   1cac4:	2000226c 	.word	0x2000226c
   1cac8:	0001c99d 	.word	0x0001c99d
   1cacc:	20002260 	.word	0x20002260
   1cad0:	0002b861 	.word	0x0002b861
   1cad4:	20002294 	.word	0x20002294
   1cad8:	0003225c 	.word	0x0003225c

0001cadc <operating_state_run>:
{
   1cadc:	b508      	push	{r3, lr}
    start_operating_state_adv();
   1cade:	f000 f8a1 	bl	1cc24 <start_operating_state_adv>
	z_impl_k_thread_abort(thread);
   1cae2:	4802      	ldr	r0, [pc, #8]	; (1caec <operating_state_run+0x10>)
}
   1cae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1cae8:	f002 b8cc 	b.w	1ec84 <z_impl_k_thread_abort>
   1caec:	20001a10 	.word	0x20001a10

0001caf0 <init_bme280>:
 * @return false if not ready
 */
bool init_bme280(void)
{
    const static struct device *bme_280_device = DEVICE_DT_GET_ANY(bosch_bme280);
    if(!device_is_ready(bme_280_device))
   1caf0:	4801      	ldr	r0, [pc, #4]	; (1caf8 <init_bme280+0x8>)
   1caf2:	f00e bebe 	b.w	2b872 <device_is_ready>
   1caf6:	bf00      	nop
   1caf8:	00032294 	.word	0x00032294

0001cafc <measure_temperature>:
}

// Update temp_hum_measurements struct with latest measurements
// TODO: maybe add error code?
void measure_temperature(void)
{
   1cafc:	b538      	push	{r3, r4, r5, lr}
    const static struct device *bme_spi_device = DEVICE_DT_GET_ANY(nordic_nrf_spim);
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_RESUME);

    const static struct device *bme_280_device = DEVICE_DT_GET_ANY(bosch_bme280);

    if ((bme_280_device == NULL) || !device_is_ready(bme_280_device))
   1cafe:	4c0d      	ldr	r4, [pc, #52]	; (1cb34 <measure_temperature+0x38>)
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_RESUME);
   1cb00:	480d      	ldr	r0, [pc, #52]	; (1cb38 <measure_temperature+0x3c>)
   1cb02:	2101      	movs	r1, #1
   1cb04:	f00f fe6d 	bl	2c7e2 <pm_device_action_run>
    if ((bme_280_device == NULL) || !device_is_ready(bme_280_device))
   1cb08:	4620      	mov	r0, r4
   1cb0a:	f00e feb2 	bl	2b872 <device_is_ready>
   1cb0e:	b178      	cbz	r0, 1cb30 <measure_temperature+0x34>
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   1cb10:	68a5      	ldr	r5, [r4, #8]
   1cb12:	210d      	movs	r1, #13
   1cb14:	68eb      	ldr	r3, [r5, #12]
   1cb16:	4620      	mov	r0, r4
   1cb18:	4798      	blx	r3
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   1cb1a:	210d      	movs	r1, #13
   1cb1c:	692b      	ldr	r3, [r5, #16]
   1cb1e:	4a07      	ldr	r2, [pc, #28]	; (1cb3c <measure_temperature+0x40>)
   1cb20:	4620      	mov	r0, r4
   1cb22:	4798      	blx	r3
    {
        LOG_INF("Error in fetching sample %d", err);
    }
    // Disable spi to save power
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_SUSPEND);
}
   1cb24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_SUSPEND);
   1cb28:	4803      	ldr	r0, [pc, #12]	; (1cb38 <measure_temperature+0x3c>)
   1cb2a:	2100      	movs	r1, #0
   1cb2c:	f00f be59 	b.w	2c7e2 <pm_device_action_run>
}
   1cb30:	bd38      	pop	{r3, r4, r5, pc}
   1cb32:	bf00      	nop
   1cb34:	00032294 	.word	0x00032294
   1cb38:	0003225c 	.word	0x0003225c
   1cb3c:	200022a4 	.word	0x200022a4

0001cb40 <measure_humidity>:

// Update temp_hum_measurements struct with latest measurements
// TODO: maybe add error code?
void measure_humidity(void)
{
   1cb40:	b570      	push	{r4, r5, r6, lr}
    int err;
    // Resume spi
    const static struct device *bme_spi_device = DEVICE_DT_GET_ANY(nordic_nrf_spim);
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_RESUME);
   1cb42:	4d0c      	ldr	r5, [pc, #48]	; (1cb74 <measure_humidity+0x34>)

    const static struct device *bme_280_device = DEVICE_DT_GET_ANY(bosch_bme280);

    if ((bme_280_device == NULL) || (!device_is_ready(bme_280_device)))
   1cb44:	4c0c      	ldr	r4, [pc, #48]	; (1cb78 <measure_humidity+0x38>)
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_RESUME);
   1cb46:	2101      	movs	r1, #1
   1cb48:	4628      	mov	r0, r5
   1cb4a:	f00f fe4a 	bl	2c7e2 <pm_device_action_run>
    if ((bme_280_device == NULL) || (!device_is_ready(bme_280_device)))
   1cb4e:	4620      	mov	r0, r4
   1cb50:	f00e fe8f 	bl	2b872 <device_is_ready>
	return api->sample_fetch(dev, type);
   1cb54:	68a6      	ldr	r6, [r4, #8]
   1cb56:	2110      	movs	r1, #16
   1cb58:	68f3      	ldr	r3, [r6, #12]
   1cb5a:	4620      	mov	r0, r4
   1cb5c:	4798      	blx	r3
	return api->channel_get(dev, chan, val);
   1cb5e:	2110      	movs	r1, #16
   1cb60:	6933      	ldr	r3, [r6, #16]
   1cb62:	4a06      	ldr	r2, [pc, #24]	; (1cb7c <measure_humidity+0x3c>)
   1cb64:	4620      	mov	r0, r4
   1cb66:	4798      	blx	r3
    if (err != 0)
    {
        LOG_INF("Error in retreiving sample %d", err);
    }
    // Disable spi to save power
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_SUSPEND);
   1cb68:	4628      	mov	r0, r5
   1cb6a:	2100      	movs	r1, #0
}
   1cb6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_SUSPEND);
   1cb70:	f00f be37 	b.w	2c7e2 <pm_device_action_run>
   1cb74:	0003225c 	.word	0x0003225c
   1cb78:	00032294 	.word	0x00032294
   1cb7c:	200022ac 	.word	0x200022ac

0001cb80 <get_temperature_measurement>:

// --- getters -----------------------------------------------------------------
// Getter for temperature value
struct sensor_value get_temperature_measurement(void)
{
    return temp_hum_measurements.temperature;
   1cb80:	4a03      	ldr	r2, [pc, #12]	; (1cb90 <get_temperature_measurement+0x10>)
{
   1cb82:	4603      	mov	r3, r0
    return temp_hum_measurements.temperature;
   1cb84:	e892 0003 	ldmia.w	r2, {r0, r1}
   1cb88:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1cb8c:	4618      	mov	r0, r3
   1cb8e:	4770      	bx	lr
   1cb90:	200022a4 	.word	0x200022a4

0001cb94 <get_humidity_measurement>:

// Getter for humidity value
struct sensor_value get_humidity_measurement(void)
{
    return temp_hum_measurements.humidity;
   1cb94:	4a03      	ldr	r2, [pc, #12]	; (1cba4 <get_humidity_measurement+0x10>)
{
   1cb96:	4603      	mov	r3, r0
    return temp_hum_measurements.humidity;
   1cb98:	e892 0003 	ldmia.w	r2, {r0, r1}
   1cb9c:	e883 0003 	stmia.w	r3, {r0, r1}
   1cba0:	4618      	mov	r0, r3
   1cba2:	4770      	bx	lr
   1cba4:	200022ac 	.word	0x200022ac

0001cba8 <connected>:
};

// -- static functions definitions ---------------------------------------------
static void connected(struct bt_conn *conn, uint8_t err)
{
    ble_connection = conn;
   1cba8:	4b01      	ldr	r3, [pc, #4]	; (1cbb0 <connected+0x8>)
   1cbaa:	6018      	str	r0, [r3, #0]
    {
        LOG_INF("Connection failed (err %u)\n", err);
        return;
    }
    LOG_INF("Connection succeed (err %u)\n", err);
}
   1cbac:	4770      	bx	lr
   1cbae:	bf00      	nop
   1cbb0:	200022b4 	.word	0x200022b4

0001cbb4 <bt_ready>:
{
    LOG_INF("Disconnected (reason %u)\n", reason);
}

static void bt_ready(int err)
{
   1cbb4:	b508      	push	{r3, lr}
    if (err)
   1cbb6:	b938      	cbnz	r0, 1cbc8 <bt_ready+0x14>
        LOG_INF("BLE init failed with error code %d\n", err);
        return;
    }

    // Configure connection callbacks
    bt_conn_cb_register(&conn_callbacks);
   1cbb8:	4804      	ldr	r0, [pc, #16]	; (1cbcc <bt_ready+0x18>)
   1cbba:	f004 f82d 	bl	20c18 <bt_conn_cb_register>
	z_impl_k_sem_give(sem);
   1cbbe:	4804      	ldr	r0, [pc, #16]	; (1cbd0 <bt_ready+0x1c>)

    k_sem_give(&ble_init_ok);
}
   1cbc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1cbc4:	f00b b95c 	b.w	27e80 <z_impl_k_sem_give>
   1cbc8:	bd08      	pop	{r3, pc}
   1cbca:	bf00      	nop
   1cbcc:	20000548 	.word	0x20000548
   1cbd0:	20000c6c 	.word	0x20000c6c

0001cbd4 <ble_init>:
}

// --- functions definitions ---------------------------------------------------
// TODO: should return error code
void ble_init(void)
{
   1cbd4:	b510      	push	{r4, lr}
    int error = 0;

    error = bt_enable(bt_ready);
   1cbd6:	4805      	ldr	r0, [pc, #20]	; (1cbec <ble_init+0x18>)
   1cbd8:	f003 f89a 	bl	1fd10 <bt_enable>
	return z_impl_k_sem_take(sem, timeout);
   1cbdc:	4804      	ldr	r0, [pc, #16]	; (1cbf0 <ble_init+0x1c>)
    }
    else
    {
        LOG_INF("BLE initialization did not complete in time: (err: %d)\n", error);
    }
}
   1cbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cbe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1cbe6:	2300      	movs	r3, #0
   1cbe8:	f00b b970 	b.w	27ecc <z_impl_k_sem_take>
   1cbec:	0001cbb5 	.word	0x0001cbb5
   1cbf0:	20000c6c 	.word	0x20000c6c

0001cbf4 <start_configure_state_adv>:
}

// Function to start advertising configuration data
// This function is called when an unconfigured device boots
void start_configure_state_adv(void)
{
   1cbf4:	b530      	push	{r4, r5, lr}
    int err;
    // Start advertising both advertising data and scan response data
    err = bt_le_adv_start(BT_LE_ADV_CONN, configuration_adv_data, ARRAY_SIZE(configuration_adv_data),
   1cbf6:	4d08      	ldr	r5, [pc, #32]	; (1cc18 <start_configure_state_adv+0x24>)
   1cbf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1cbfa:	b089      	sub	sp, #36	; 0x24
    err = bt_le_adv_start(BT_LE_ADV_CONN, configuration_adv_data, ARRAY_SIZE(configuration_adv_data),
   1cbfc:	ac03      	add	r4, sp, #12
   1cbfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cc00:	682b      	ldr	r3, [r5, #0]
   1cc02:	6023      	str	r3, [r4, #0]
   1cc04:	2302      	movs	r3, #2
   1cc06:	9300      	str	r3, [sp, #0]
   1cc08:	4904      	ldr	r1, [pc, #16]	; (1cc1c <start_configure_state_adv+0x28>)
   1cc0a:	4b05      	ldr	r3, [pc, #20]	; (1cc20 <start_configure_state_adv+0x2c>)
   1cc0c:	2201      	movs	r2, #1
   1cc0e:	a803      	add	r0, sp, #12
   1cc10:	f003 fc86 	bl	20520 <bt_le_adv_start>
        LOG_INF("Advertising failed to start (err %d)\n", err);
        return;
    }

    LOG_INF("Advertising successfully started\n");
}
   1cc14:	b009      	add	sp, #36	; 0x24
   1cc16:	bd30      	pop	{r4, r5, pc}
   1cc18:	000324f0 	.word	0x000324f0
   1cc1c:	0003267c 	.word	0x0003267c
   1cc20:	0003268c 	.word	0x0003268c

0001cc24 <start_operating_state_adv>:

// Function to start advertising operating data
// This function will be called when device reboots but is already configured
void start_operating_state_adv(void)
{
   1cc24:	b530      	push	{r4, r5, lr}
    int err;
    // Start advertising both advertising data and scan response data
    err = bt_le_adv_start(BT_LE_ADV_CONN, operating_adv_data, ARRAY_SIZE(operating_adv_data),
   1cc26:	4d08      	ldr	r5, [pc, #32]	; (1cc48 <start_operating_state_adv+0x24>)
   1cc28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1cc2a:	b089      	sub	sp, #36	; 0x24
    err = bt_le_adv_start(BT_LE_ADV_CONN, operating_adv_data, ARRAY_SIZE(operating_adv_data),
   1cc2c:	ac03      	add	r4, sp, #12
   1cc2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cc30:	682b      	ldr	r3, [r5, #0]
   1cc32:	6023      	str	r3, [r4, #0]
   1cc34:	2302      	movs	r3, #2
   1cc36:	9300      	str	r3, [sp, #0]
   1cc38:	4904      	ldr	r1, [pc, #16]	; (1cc4c <start_operating_state_adv+0x28>)
   1cc3a:	4b05      	ldr	r3, [pc, #20]	; (1cc50 <start_operating_state_adv+0x2c>)
   1cc3c:	2201      	movs	r2, #1
   1cc3e:	a803      	add	r0, sp, #12
   1cc40:	f003 fc6e 	bl	20520 <bt_le_adv_start>
        LOG_INF("Advertising failed to start (err %d)\n", err);
        return;
    }

    LOG_INF("Advertising successfully started\n");
}
   1cc44:	b009      	add	sp, #36	; 0x24
   1cc46:	bd30      	pop	{r4, r5, pc}
   1cc48:	000324f0 	.word	0x000324f0
   1cc4c:	00032684 	.word	0x00032684
   1cc50:	0003268c 	.word	0x0003268c

0001cc54 <configuration_write_id>:
                          const struct bt_gatt_attr *attr,
                          const void *buf,
                          uint16_t len,
                          uint16_t offset,
                          uint8_t flags)
{
   1cc54:	b538      	push	{r3, r4, r5, lr}
   1cc56:	461c      	mov	r4, r3
    int err;
    const uint8_t *configuration_id = buf;

    if(*configuration_id > MAX_CONFIGURATION_ID || *configuration_id == 0)
   1cc58:	7813      	ldrb	r3, [r2, #0]
   1cc5a:	3b01      	subs	r3, #1
   1cc5c:	2b04      	cmp	r3, #4
{
   1cc5e:	4615      	mov	r5, r2
    if(*configuration_id > MAX_CONFIGURATION_ID || *configuration_id == 0)
   1cc60:	d80d      	bhi.n	1cc7e <configuration_write_id+0x2a>
        LOG_INF("Invalid configuration ID: %d", *configuration_id);
        return 0;
    }

    // Write Configuration ID to flash
    err = nvs_write(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY, configuration_id, sizeof(*configuration_id));
   1cc62:	f000 f911 	bl	1ce88 <get_file_system_handle>
   1cc66:	2301      	movs	r3, #1
   1cc68:	462a      	mov	r2, r5
   1cc6a:	2100      	movs	r1, #0
   1cc6c:	f001 f8d8 	bl	1de20 <nvs_write>
    if(err<0)
   1cc70:	2800      	cmp	r0, #0
   1cc72:	db02      	blt.n	1cc7a <configuration_write_id+0x26>
	z_impl_k_sem_give(sem);
   1cc74:	4803      	ldr	r0, [pc, #12]	; (1cc84 <configuration_write_id+0x30>)
   1cc76:	f00b f903 	bl	27e80 <z_impl_k_sem_give>
    {
        // After configuration is done, give configuration semaphore
        // TODO: this semaphore is given every time we write on the configuration characteristic
        k_sem_give(&configure_done_sem);
    }
    return len;
   1cc7a:	4620      	mov	r0, r4
}
   1cc7c:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   1cc7e:	2000      	movs	r0, #0
   1cc80:	e7fc      	b.n	1cc7c <configuration_write_id+0x28>
   1cc82:	bf00      	nop
   1cc84:	2000226c 	.word	0x2000226c

0001cc88 <init_battery_adc_channel>:
 * Initialize the battery measurement ADC Channel
 * 
 * @return int16_t 
 */
int16_t init_battery_adc_channel(void)
{
   1cc88:	b508      	push	{r3, lr}
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   1cc8a:	4803      	ldr	r0, [pc, #12]	; (1cc98 <init_battery_adc_channel+0x10>)
   1cc8c:	4903      	ldr	r1, [pc, #12]	; (1cc9c <init_battery_adc_channel+0x14>)
   1cc8e:	6883      	ldr	r3, [r0, #8]
   1cc90:	681b      	ldr	r3, [r3, #0]
   1cc92:	4798      	blx	r3
    {
        LOG_INF("Error setting up battery measurement channel.");
    }

    return err;
}
   1cc94:	b200      	sxth	r0, r0
   1cc96:	bd08      	pop	{r3, pc}
   1cc98:	000321ec 	.word	0x000321ec
   1cc9c:	00032f04 	.word	0x00032f04

0001cca0 <bh1750_sample_fetch>:
 * @param chan
 * @return int
 */
static int bh1750_sample_fetch(const struct device *dev,
                               enum sensor_channel chan)
{
   1cca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cca2:	b087      	sub	sp, #28
    struct bh1750_device_t *bh1750_data = dev->data;
   1cca4:	6904      	ldr	r4, [r0, #16]

    /* I2C Request Low Resolution Measurement */

    uint8_t tx_data = BH1750_MEASUREMENT_MODE | BH1750_MEASUREMENT_RES;
   1cca6:	2322      	movs	r3, #34	; 0x22
   1cca8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t rx_data[2];

    pm_device_action_run(bh1750_data->i2c, PM_DEVICE_ACTION_RESUME);
   1ccac:	6820      	ldr	r0, [r4, #0]
   1ccae:	2101      	movs	r1, #1
   1ccb0:	f00f fd97 	bl	2c7e2 <pm_device_action_run>
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
   1ccb4:	2601      	movs	r6, #1
	msg.buf = (uint8_t *)buf;
   1ccb6:	f10d 0307 	add.w	r3, sp, #7
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1ccba:	2702      	movs	r7, #2

    int err;
    err = i2c_write(bh1750_data->i2c, &tx_data, 1, BH1750_I2C_ADDRESS);
   1ccbc:	6820      	ldr	r0, [r4, #0]
	msg.buf = (uint8_t *)buf;
   1ccbe:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1ccc0:	9604      	str	r6, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1ccc2:	f88d 7014 	strb.w	r7, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1ccc6:	6883      	ldr	r3, [r0, #8]
   1ccc8:	4632      	mov	r2, r6
   1ccca:	689d      	ldr	r5, [r3, #8]
   1cccc:	a903      	add	r1, sp, #12
   1ccce:	2323      	movs	r3, #35	; 0x23
   1ccd0:	47a8      	blx	r5
   1ccd2:	4605      	mov	r5, r0
	return z_impl_k_sleep(timeout);
   1ccd4:	2100      	movs	r1, #0
   1ccd6:	f240 3013 	movw	r0, #787	; 0x313
   1ccda:	f00b fdf7 	bl	288cc <z_impl_k_sleep>
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
   1ccde:	ab02      	add	r3, sp, #8

    k_sleep(K_MSEC(BH1750_MEASUREMENT_TIME));

    /* Read the result */
    i2c_read(bh1750_data->i2c, &rx_data, 2, BH1750_I2C_ADDRESS);
   1cce0:	6820      	ldr	r0, [r4, #0]
	msg.len = num_bytes;
   1cce2:	e9cd 3703 	strd	r3, r7, [sp, #12]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1cce6:	2303      	movs	r3, #3
   1cce8:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1ccec:	6883      	ldr	r3, [r0, #8]
   1ccee:	4632      	mov	r2, r6
   1ccf0:	689f      	ldr	r7, [r3, #8]
   1ccf2:	a903      	add	r1, sp, #12
   1ccf4:	2323      	movs	r3, #35	; 0x23
   1ccf6:	47b8      	blx	r7
    if (err < 0)
   1ccf8:	2d00      	cmp	r5, #0
   1ccfa:	db15      	blt.n	1cd28 <bh1750_sample_fetch+0x88>
    {
        LOG_INF("Read from BH1750 failed");
        return err;
    }

    pm_device_action_run(bh1750_data->i2c, PM_DEVICE_ACTION_SUSPEND);
   1ccfc:	2100      	movs	r1, #0
   1ccfe:	6820      	ldr	r0, [r4, #0]
   1cd00:	f00f fd6f 	bl	2c7e2 <pm_device_action_run>

    bh1750_data->data_h_byte = rx_data[0];
    bh1750_data->data_l_byte = rx_data[1];
   1cd04:	f89d 3009 	ldrb.w	r3, [sp, #9]
    bh1750_data->data_h_byte = rx_data[0];
   1cd08:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1cd0c:	71a0      	strb	r0, [r4, #6]
    bh1750_data->data_l_byte = rx_data[1];
   1cd0e:	71e3      	strb	r3, [r4, #7]

    /* LUX Calculation */

    uint16_t tmp = (rx_data[0] << 8) | rx_data[1];
    uint16_t lux = tmp / 1.2;
   1cd10:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1cd14:	f7ef fc46 	bl	c5a4 <__aeabi_i2d>
   1cd18:	4b05      	ldr	r3, [pc, #20]	; (1cd30 <bh1750_sample_fetch+0x90>)
   1cd1a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   1cd1e:	f7ef fdd5 	bl	c8cc <__aeabi_ddiv>
   1cd22:	f7ef febb 	bl	ca9c <__aeabi_d2uiz>
   1cd26:	80a0      	strh	r0, [r4, #4]

    bh1750_data->lux = lux;
}
   1cd28:	4628      	mov	r0, r5
   1cd2a:	b007      	add	sp, #28
   1cd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cd2e:	bf00      	nop
   1cd30:	3ff33333 	.word	0x3ff33333

0001cd34 <bh1750_init>:
 *
 * @param dev
 * @return int
 */
int bh1750_init(const struct device *dev)
{
   1cd34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct bh1750_device_t *drv_data = dev->data;
   1cd36:	6904      	ldr	r4, [r0, #16]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1cd38:	480e      	ldr	r0, [pc, #56]	; (1cd74 <bh1750_init+0x40>)
   1cd3a:	f00a fd83 	bl	27844 <z_impl_device_get_binding>
    int16_t err;

    drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
   1cd3e:	6020      	str	r0, [r4, #0]

    if (drv_data->i2c == NULL)
   1cd40:	b1a0      	cbz	r0, 1cd6c <bh1750_init+0x38>
        return -EINVAL;
    }

    /* Set to powerdown */

    uint8_t data = 0x0;
   1cd42:	2200      	movs	r2, #0
   1cd44:	f88d 2003 	strb.w	r2, [sp, #3]
	msg.buf = (uint8_t *)buf;
   1cd48:	f10d 0203 	add.w	r2, sp, #3
   1cd4c:	9201      	str	r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cd4e:	2102      	movs	r1, #2
	msg.len = num_bytes;
   1cd50:	2201      	movs	r2, #1
   1cd52:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1cd54:	f88d 100c 	strb.w	r1, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1cd58:	6883      	ldr	r3, [r0, #8]
   1cd5a:	a901      	add	r1, sp, #4
   1cd5c:	689c      	ldr	r4, [r3, #8]
   1cd5e:	2323      	movs	r3, #35	; 0x23
   1cd60:	47a0      	blx	r4
    err = i2c_write(drv_data->i2c, &data, 1, BH1750_I2C_ADDRESS);
   1cd62:	b200      	sxth	r0, r0

    if (err < 0)
    {
        LOG_INF("Set device power down failed");
        return err;
   1cd64:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    }

    return 0;
}
   1cd68:	b004      	add	sp, #16
   1cd6a:	bd10      	pop	{r4, pc}
        return -EINVAL;
   1cd6c:	f06f 0015 	mvn.w	r0, #21
   1cd70:	e7fa      	b.n	1cd68 <bh1750_init+0x34>
   1cd72:	bf00      	nop
   1cd74:	00032f40 	.word	0x00032f40

0001cd78 <get_bh1750_device>:
}
   1cd78:	4800      	ldr	r0, [pc, #0]	; (1cd7c <get_bh1750_device+0x4>)
   1cd7a:	4770      	bx	lr
   1cd7c:	00032278 	.word	0x00032278

0001cd80 <adc_soil_sampling_done_callback>:
static enum adc_action
adc_soil_sampling_done_callback(const struct device *dev, const struct adc_sequence *sequence, uint16_t sampling_index)
{

    // Zero out negative results due to ground bounce.
    soil_moisture_sample = (soil_moisture_sample > 0) ? soil_moisture_sample : 0;
   1cd80:	4a03      	ldr	r2, [pc, #12]	; (1cd90 <adc_soil_sampling_done_callback+0x10>)
   1cd82:	f9b2 3000 	ldrsh.w	r3, [r2]
   1cd86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1cd8a:	8013      	strh	r3, [r2, #0]

    return ADC_ACTION_FINISH;
}
   1cd8c:	2002      	movs	r0, #2
   1cd8e:	4770      	bx	lr
   1cd90:	200036e4 	.word	0x200036e4

0001cd94 <init_soil_adc_channel>:
 *
 * @return int16_t
 */
int16_t
init_soil_adc_channel(void)
{
   1cd94:	b508      	push	{r3, lr}
   1cd96:	4803      	ldr	r0, [pc, #12]	; (1cda4 <init_soil_adc_channel+0x10>)
   1cd98:	4903      	ldr	r1, [pc, #12]	; (1cda8 <init_soil_adc_channel+0x14>)
   1cd9a:	6883      	ldr	r3, [r0, #8]
   1cd9c:	681b      	ldr	r3, [r3, #0]
   1cd9e:	4798      	blx	r3
    {
        LOG_INF("Error setting up soil measurement channel.");
    }

    return err;
}
   1cda0:	b200      	sxth	r0, r0
   1cda2:	bd08      	pop	{r3, pc}
   1cda4:	000321ec 	.word	0x000321ec
   1cda8:	00032f0c 	.word	0x00032f0c

0001cdac <adc_measure_soil_moisture>:
 * Triggers an ADC read sequence for soil humidity measurement
 *
 * @return int16_t
 */
int16_t adc_measure_soil_moisture()
{
   1cdac:	b508      	push	{r3, lr}
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   1cdae:	4803      	ldr	r0, [pc, #12]	; (1cdbc <adc_measure_soil_moisture+0x10>)
   1cdb0:	4903      	ldr	r1, [pc, #12]	; (1cdc0 <adc_measure_soil_moisture+0x14>)
   1cdb2:	6883      	ldr	r3, [r0, #8]
   1cdb4:	685b      	ldr	r3, [r3, #4]
   1cdb6:	4798      	blx	r3
    int err;
    err = adc_read(adc_dev, &soil_sequence);
    return err;
}
   1cdb8:	b200      	sxth	r0, r0
   1cdba:	bd08      	pop	{r3, pc}
   1cdbc:	000321ec 	.word	0x000321ec
   1cdc0:	0003274c 	.word	0x0003274c

0001cdc4 <adc_get_soil_moisture>:
 */
int16_t adc_get_soil_moisture(void)
{
    int16_t soil_moisture_offset_corrected;
    int16_t result = 0;
    if (soil_moisture_sample <= MAX_SOIL_MOISTURE_VAL)
   1cdc4:	4b0b      	ldr	r3, [pc, #44]	; (1cdf4 <adc_get_soil_moisture+0x30>)
   1cdc6:	f9b3 3000 	ldrsh.w	r3, [r3]
   1cdca:	f640 228c 	movw	r2, #2700	; 0xa8c
   1cdce:	4293      	cmp	r3, r2
   1cdd0:	dc0d      	bgt.n	1cdee <adc_get_soil_moisture+0x2a>
    {
        soil_moisture_offset_corrected = ((soil_moisture_sample - MIN_SOIL_MOISTURE_VAL) >= 0) ? (soil_moisture_sample - MIN_SOIL_MOISTURE_VAL) : 0;
   1cdd2:	f2a3 43e2 	subw	r3, r3, #1250	; 0x4e2
        result = (soil_moisture_offset_corrected * ADC_SOIL_MOISTURE_SCALING) / (MAX_SOIL_MOISTURE_VAL - MIN_SOIL_MOISTURE_VAL);
   1cdd6:	f242 7010 	movw	r0, #10000	; 0x2710
        soil_moisture_offset_corrected = ((soil_moisture_sample - MIN_SOIL_MOISTURE_VAL) >= 0) ? (soil_moisture_sample - MIN_SOIL_MOISTURE_VAL) : 0;
   1cdda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        result = (soil_moisture_offset_corrected * ADC_SOIL_MOISTURE_SCALING) / (MAX_SOIL_MOISTURE_VAL - MIN_SOIL_MOISTURE_VAL);
   1cdde:	4343      	muls	r3, r0
   1cde0:	f240 52aa 	movw	r2, #1450	; 0x5aa
   1cde4:	fbb3 f3f2 	udiv	r3, r3, r2
        result = (1 * ADC_SOIL_MOISTURE_SCALING) - result;
   1cde8:	1ac0      	subs	r0, r0, r3
   1cdea:	b200      	sxth	r0, r0
   1cdec:	4770      	bx	lr
    int16_t result = 0;
   1cdee:	2000      	movs	r0, #0
    }

    return result;
}
   1cdf0:	4770      	bx	lr
   1cdf2:	bf00      	nop
   1cdf4:	200036e4 	.word	0x200036e4

0001cdf8 <adc_calibrate_work_handler>:
   1cdf8:	4802      	ldr	r0, [pc, #8]	; (1ce04 <adc_calibrate_work_handler+0xc>)
   1cdfa:	4903      	ldr	r1, [pc, #12]	; (1ce08 <adc_calibrate_work_handler+0x10>)
   1cdfc:	6883      	ldr	r3, [r0, #8]
   1cdfe:	685b      	ldr	r3, [r3, #4]
   1ce00:	4718      	bx	r3
   1ce02:	bf00      	nop
   1ce04:	000321ec 	.word	0x000321ec
   1ce08:	00032770 	.word	0x00032770

0001ce0c <init_adc_calibration_channel>:
 * 
 * @return int16_t error
 * 
 */
int16_t init_adc_calibration_channel(void)
{
   1ce0c:	b510      	push	{r4, lr}
	return api->channel_setup(dev, channel_cfg);
   1ce0e:	4806      	ldr	r0, [pc, #24]	; (1ce28 <init_adc_calibration_channel+0x1c>)
   1ce10:	4906      	ldr	r1, [pc, #24]	; (1ce2c <init_adc_calibration_channel+0x20>)
   1ce12:	6883      	ldr	r3, [r0, #8]
   1ce14:	681b      	ldr	r3, [r3, #0]
   1ce16:	4798      	blx	r3
    if (err)
    {
        LOG_INF("Error setting up calibration channel.");
    }

    k_work_init(&adc_calibrate_work_item, adc_calibrate_work_handler);
   1ce18:	4905      	ldr	r1, [pc, #20]	; (1ce30 <init_adc_calibration_channel+0x24>)
   1ce1a:	4604      	mov	r4, r0
   1ce1c:	4805      	ldr	r0, [pc, #20]	; (1ce34 <init_adc_calibration_channel+0x28>)
   1ce1e:	f014 fd8f 	bl	31940 <k_work_init>

    return err;
}
   1ce22:	b220      	sxth	r0, r4
   1ce24:	bd10      	pop	{r4, pc}
   1ce26:	bf00      	nop
   1ce28:	000321ec 	.word	0x000321ec
   1ce2c:	00032f14 	.word	0x00032f14
   1ce30:	0001cdf9 	.word	0x0001cdf9
   1ce34:	200022f0 	.word	0x200022f0

0001ce38 <get_adc_calibrate_work_item>:
 * @return struct k_work* 
 */
struct k_work *get_adc_calibrate_work_item(void)
{
    return &adc_calibrate_work_item;
   1ce38:	4800      	ldr	r0, [pc, #0]	; (1ce3c <get_adc_calibrate_work_item+0x4>)
   1ce3a:	4770      	bx	lr
   1ce3c:	200022f0 	.word	0x200022f0

0001ce40 <flash_system_init>:
static struct nvs_fs fs;
static const struct device *flash_dev;

// --- functions definitions ---------------------------------------------------
void flash_system_init(void)
{
   1ce40:	b530      	push	{r4, r5, lr}
   1ce42:	b085      	sub	sp, #20
   1ce44:	480d      	ldr	r0, [pc, #52]	; (1ce7c <flash_system_init+0x3c>)
    int err = 0;
    struct flash_pages_info info;

    flash_dev = FLASH_AREA_DEVICE(STORAGE_NODE_LABEL);
   1ce46:	4d0e      	ldr	r5, [pc, #56]	; (1ce80 <flash_system_init+0x40>)
   1ce48:	f00a fcfc 	bl	27844 <z_impl_device_get_binding>
   1ce4c:	6028      	str	r0, [r5, #0]
   1ce4e:	f014 fb45 	bl	314dc <z_device_ready>
   1ce52:	b188      	cbz	r0, 1ce78 <flash_system_init+0x38>
    {
        LOG_INF("Flash device %s is not ready\n", flash_dev->name);
        return;
    }

	fs.offset = FLASH_AREA_OFFSET(storage);
   1ce54:	4c0b      	ldr	r4, [pc, #44]	; (1ce84 <flash_system_init+0x44>)
	err = flash_get_page_info_by_offs(flash_dev, fs.offset, &info);
   1ce56:	6828      	ldr	r0, [r5, #0]
	fs.offset = FLASH_AREA_OFFSET(storage);
   1ce58:	f44f 217a 	mov.w	r1, #1024000	; 0xfa000
   1ce5c:	6021      	str	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   1ce5e:	aa01      	add	r2, sp, #4
   1ce60:	f013 fc94 	bl	3078c <z_impl_flash_get_page_info_by_offs>
	if (err) {
   1ce64:	b940      	cbnz	r0, 1ce78 <flash_system_init+0x38>
		LOG_INF("Unable to get page info\n");
		return;
	}
    fs.sector_size = info.size;
   1ce66:	9b02      	ldr	r3, [sp, #8]
   1ce68:	81a3      	strh	r3, [r4, #12]
    fs.sector_count = 3U;
   1ce6a:	2303      	movs	r3, #3
   1ce6c:	81e3      	strh	r3, [r4, #14]

    err = nvs_init(&fs, flash_dev->name);
   1ce6e:	682b      	ldr	r3, [r5, #0]
   1ce70:	4620      	mov	r0, r4
   1ce72:	6819      	ldr	r1, [r3, #0]
   1ce74:	f000 fe76 	bl	1db64 <nvs_init>
    if (err) {
        LOG_INF("Flash Init failed\n");
        return;
    }
}
   1ce78:	b005      	add	sp, #20
   1ce7a:	bd30      	pop	{r4, r5, pc}
   1ce7c:	00032f53 	.word	0x00032f53
   1ce80:	20002300 	.word	0x20002300
   1ce84:	20002304 	.word	0x20002304

0001ce88 <get_file_system_handle>:

// File system handle getter
struct nvs_fs* get_file_system_handle(void)
{
    return &fs;
   1ce88:	4800      	ldr	r0, [pc, #0]	; (1ce8c <get_file_system_handle+0x4>)
   1ce8a:	4770      	bx	lr
   1ce8c:	20002304 	.word	0x20002304

0001ce90 <init_adc_calibration_timer>:
}

// --- functions declarations -------------------------------------------
void init_adc_calibration_timer(void)
{
    k_timer_init(&adc_calibration_timer, adc_calibration_timer_handler, NULL);
   1ce90:	4902      	ldr	r1, [pc, #8]	; (1ce9c <init_adc_calibration_timer+0xc>)
   1ce92:	4803      	ldr	r0, [pc, #12]	; (1cea0 <init_adc_calibration_timer+0x10>)
   1ce94:	2200      	movs	r2, #0
   1ce96:	f014 bf4e 	b.w	31d36 <k_timer_init>
   1ce9a:	bf00      	nop
   1ce9c:	0002ba31 	.word	0x0002ba31
   1cea0:	20001a90 	.word	0x20001a90

0001cea4 <start_adc_calibration_timer>:
}

void start_adc_calibration_timer(k_timeout_t duration, k_timeout_t period)
{
   1cea4:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
   1cea6:	e9cd 2300 	strd	r2, r3, [sp]
   1ceaa:	4602      	mov	r2, r0
   1ceac:	460b      	mov	r3, r1
   1ceae:	4803      	ldr	r0, [pc, #12]	; (1cebc <start_adc_calibration_timer+0x18>)
   1ceb0:	f00b ff5c 	bl	28d6c <z_impl_k_timer_start>
    k_timer_start(&adc_calibration_timer, duration, period);
}
   1ceb4:	b003      	add	sp, #12
   1ceb6:	f85d fb04 	ldr.w	pc, [sp], #4
   1ceba:	bf00      	nop
   1cebc:	20001a90 	.word	0x20001a90

0001cec0 <watchdog_thread>:
static inline int z_impl_wdt_feed(const struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->api;

	return api->feed(dev, channel_id);
   1cec0:	4b06      	ldr	r3, [pc, #24]	; (1cedc <watchdog_thread+0x1c>)
 *        some other thread has stuck. Watchdog won't be fed and
 *        thus a reset will be triggered.
 *
 */
static void watchdog_thread(void)
{
   1cec2:	b570      	push	{r4, r5, r6, lr}
   1cec4:	689e      	ldr	r6, [r3, #8]
	return z_impl_k_sleep(timeout);
   1cec6:	4c06      	ldr	r4, [pc, #24]	; (1cee0 <watchdog_thread+0x20>)
   1cec8:	2500      	movs	r5, #0
   1ceca:	2100      	movs	r1, #0
   1cecc:	68f3      	ldr	r3, [r6, #12]
   1cece:	4803      	ldr	r0, [pc, #12]	; (1cedc <watchdog_thread+0x1c>)
   1ced0:	4798      	blx	r3
   1ced2:	4620      	mov	r0, r4
   1ced4:	4629      	mov	r1, r5
   1ced6:	f00b fcf9 	bl	288cc <z_impl_k_sleep>

    if (hw_wdt_dev)
    {
        while (1)
   1ceda:	e7f6      	b.n	1ceca <watchdog_thread+0xa>
   1cedc:	00032198 	.word	0x00032198
   1cee0:	0004f334 	.word	0x0004f334

0001cee4 <init_watchdog>:
/**
 * @brief Watchdog initialization function
 *
 */
void init_watchdog(void)
{
   1cee4:	b570      	push	{r4, r5, r6, lr}
	return api->install_timeout(dev, cfg);
   1cee6:	4c08      	ldr	r4, [pc, #32]	; (1cf08 <init_watchdog+0x24>)
   1cee8:	4908      	ldr	r1, [pc, #32]	; (1cf0c <init_watchdog+0x28>)
   1ceea:	68a5      	ldr	r5, [r4, #8]
   1ceec:	4620      	mov	r0, r4
   1ceee:	68ab      	ldr	r3, [r5, #8]
   1cef0:	4798      	blx	r3
	return api->setup(dev, options);
   1cef2:	2102      	movs	r1, #2
   1cef4:	682b      	ldr	r3, [r5, #0]
   1cef6:	4620      	mov	r0, r4
   1cef8:	4798      	blx	r3
	return api->feed(dev, channel_id);
   1cefa:	2100      	movs	r1, #0
   1cefc:	68eb      	ldr	r3, [r5, #12]
   1cefe:	4620      	mov	r0, r4
    }
    else
    {
        LOG_ERR("Watchdog initialization failed!");
    }
}
   1cf00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cf04:	4718      	bx	r3
   1cf06:	bf00      	nop
   1cf08:	00032198 	.word	0x00032198
   1cf0c:	00032784 	.word	0x00032784

0001cf10 <gpio_interface_init>:
 * This function contains the configuration
 * for all gpio needed.
 * 
 */
void gpio_interface_init(void)
{
   1cf10:	b508      	push	{r3, lr}
   1cf12:	480b      	ldr	r0, [pc, #44]	; (1cf40 <gpio_interface_init+0x30>)
   1cf14:	f00a fc96 	bl	27844 <z_impl_device_get_binding>
	struct gpio_driver_data *data =
   1cf18:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   1cf1a:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1cf1c:	6813      	ldr	r3, [r2, #0]
   1cf1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1cf22:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1cf24:	680b      	ldr	r3, [r1, #0]
   1cf26:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cf2a:	2108      	movs	r1, #8
   1cf2c:	4798      	blx	r3
    const struct device *gpio_dev = get_gpio_dev();

    /* Soil Moisture GPIO Enable --> Pin P01.8 */
    gpio_pin_configure(gpio_dev, SOIL_MOISTURE_GPIO_ENABLE_PIN, GPIO_OUTPUT);
    /* GPIO High drive mode */
    NRF_P1->PIN_CNF[8] |= (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos);
   1cf2e:	4a05      	ldr	r2, [pc, #20]	; (1cf44 <gpio_interface_init+0x34>)
   1cf30:	f8d2 3720 	ldr.w	r3, [r2, #1824]	; 0x720
   1cf34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1cf38:	f8c2 3720 	str.w	r3, [r2, #1824]	; 0x720

}
   1cf3c:	bd08      	pop	{r3, pc}
   1cf3e:	bf00      	nop
   1cf40:	00032f73 	.word	0x00032f73
   1cf44:	50000300 	.word	0x50000300

0001cf48 <gpio_enable_soil_moisture>:
 * @brief 
 * Enable soil moisture sensor
 * 
 */
void gpio_enable_soil_moisture(void)
{
   1cf48:	b510      	push	{r4, lr}
   1cf4a:	4807      	ldr	r0, [pc, #28]	; (1cf68 <gpio_enable_soil_moisture+0x20>)
   1cf4c:	f00a fc7a 	bl	27844 <z_impl_device_get_binding>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1cf50:	6902      	ldr	r2, [r0, #16]
   1cf52:	6812      	ldr	r2, [r2, #0]
   1cf54:	05d2      	lsls	r2, r2, #23
	return api->port_set_bits_raw(port, pins);
   1cf56:	6883      	ldr	r3, [r0, #8]
    const struct device *gpio_dev = get_gpio_dev();

    gpio_pin_set(gpio_dev, SOIL_MOISTURE_GPIO_ENABLE_PIN, GPIO_OUT_PIN8_High);
}
   1cf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf5c:	bf54      	ite	pl
   1cf5e:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1cf60:	691b      	ldrmi	r3, [r3, #16]
   1cf62:	f44f 7180 	mov.w	r1, #256	; 0x100
   1cf66:	4718      	bx	r3
   1cf68:	00032f73 	.word	0x00032f73

0001cf6c <gpio_disable_soil_moisture>:
 * @brief 
 * Disable soil moisture sensor
 * 
 */
void gpio_disable_soil_moisture(void)
{
   1cf6c:	b510      	push	{r4, lr}
   1cf6e:	4807      	ldr	r0, [pc, #28]	; (1cf8c <gpio_disable_soil_moisture+0x20>)
   1cf70:	f00a fc68 	bl	27844 <z_impl_device_get_binding>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1cf74:	6902      	ldr	r2, [r0, #16]
   1cf76:	6812      	ldr	r2, [r2, #0]
   1cf78:	05d2      	lsls	r2, r2, #23
	return api->port_clear_bits_raw(port, pins);
   1cf7a:	6883      	ldr	r3, [r0, #8]
    const struct device *gpio_dev = get_gpio_dev();

    gpio_pin_set(gpio_dev, SOIL_MOISTURE_GPIO_ENABLE_PIN, GPIO_OUT_PIN8_Low);
}
   1cf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf80:	bf54      	ite	pl
   1cf82:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
   1cf84:	68db      	ldrmi	r3, [r3, #12]
   1cf86:	f44f 7180 	mov.w	r1, #256	; 0x100
   1cf8a:	4718      	bx	r3
   1cf8c:	00032f73 	.word	0x00032f73

0001cf90 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1cf90:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1cf92:	4c0a      	ldr	r4, [pc, #40]	; (1cfbc <crc8_ccitt+0x2c>)
   1cf94:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   1cf96:	4291      	cmp	r1, r2
   1cf98:	d100      	bne.n	1cf9c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   1cf9a:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   1cf9c:	f811 3b01 	ldrb.w	r3, [r1], #1
   1cfa0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1cfa2:	0903      	lsrs	r3, r0, #4
   1cfa4:	5ce3      	ldrb	r3, [r4, r3]
   1cfa6:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   1cfaa:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1cfac:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1cfb0:	5ce0      	ldrb	r0, [r4, r3]
   1cfb2:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   1cfb6:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   1cfb8:	e7ed      	b.n	1cf96 <crc8_ccitt+0x6>
   1cfba:	bf00      	nop
   1cfbc:	00032f7a 	.word	0x00032f7a

0001cfc0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1cfc0:	680b      	ldr	r3, [r1, #0]
   1cfc2:	3301      	adds	r3, #1
   1cfc4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1cfc6:	4b01      	ldr	r3, [pc, #4]	; (1cfcc <char_out+0xc>)
   1cfc8:	681b      	ldr	r3, [r3, #0]
   1cfca:	4718      	bx	r3
   1cfcc:	2000056c 	.word	0x2000056c

0001cfd0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1cfd0:	b507      	push	{r0, r1, r2, lr}
   1cfd2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   1cfd4:	2100      	movs	r1, #0
{
   1cfd6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1cfd8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1cfda:	4803      	ldr	r0, [pc, #12]	; (1cfe8 <vprintk+0x18>)
   1cfdc:	a901      	add	r1, sp, #4
   1cfde:	f000 f8eb 	bl	1d1b8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1cfe2:	b003      	add	sp, #12
   1cfe4:	f85d fb04 	ldr.w	pc, [sp], #4
   1cfe8:	0001cfc1 	.word	0x0001cfc1

0001cfec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1cfec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1cff0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1cff4:	f019 0808 	ands.w	r8, r9, #8
{
   1cff8:	4604      	mov	r4, r0
   1cffa:	4693      	mov	fp, r2
	if (processing) {
   1cffc:	d00d      	beq.n	1d01a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   1cffe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1d000:	bf0c      	ite	eq
   1d002:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1d006:	f049 0920 	orrne.w	r9, r9, #32
   1d00a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1d00e:	f38b 8811 	msr	BASEPRI, fp
   1d012:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1d016:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d01a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1d01e:	2902      	cmp	r1, #2
   1d020:	d107      	bne.n	1d032 <process_event+0x46>
			evt = process_recheck(mgr);
   1d022:	4620      	mov	r0, r4
   1d024:	f00e fd47 	bl	2bab6 <process_recheck>
		if (evt == EVT_NOP) {
   1d028:	2800      	cmp	r0, #0
   1d02a:	d0f0      	beq.n	1d00e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1d02c:	2801      	cmp	r0, #1
   1d02e:	8b23      	ldrh	r3, [r4, #24]
   1d030:	d150      	bne.n	1d0d4 <process_event+0xe8>
			res = mgr->last_res;
   1d032:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d034:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1d036:	2f00      	cmp	r7, #0
   1d038:	da15      	bge.n	1d066 <process_event+0x7a>
		*clients = mgr->clients;
   1d03a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d03c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   1d040:	e9c4 8800 	strd	r8, r8, [r4]
   1d044:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1d048:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1d04a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1d04c:	8b21      	ldrh	r1, [r4, #24]
   1d04e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1d052:	45ca      	cmp	sl, r9
   1d054:	d002      	beq.n	1d05c <process_event+0x70>
		if (do_monitors
   1d056:	68a3      	ldr	r3, [r4, #8]
   1d058:	2b00      	cmp	r3, #0
   1d05a:	d15c      	bne.n	1d116 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   1d05c:	b90d      	cbnz	r5, 1d062 <process_event+0x76>
		    || (transit != NULL)) {
   1d05e:	2e00      	cmp	r6, #0
   1d060:	d074      	beq.n	1d14c <process_event+0x160>
   1d062:	2300      	movs	r3, #0
   1d064:	e058      	b.n	1d118 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d066:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1d06a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1d06c:	2a01      	cmp	r2, #1
   1d06e:	d820      	bhi.n	1d0b2 <process_event+0xc6>
		*clients = mgr->clients;
   1d070:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   1d074:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1d076:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   1d078:	b289      	uxth	r1, r1
	list->tail = NULL;
   1d07a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1d07e:	d10c      	bne.n	1d09a <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1d080:	2d00      	cmp	r5, #0
   1d082:	462b      	mov	r3, r5
   1d084:	bf38      	it	cc
   1d086:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1d088:	b12b      	cbz	r3, 1d096 <process_event+0xaa>
				mgr->refs += 1U;
   1d08a:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d08c:	681b      	ldr	r3, [r3, #0]
   1d08e:	3201      	adds	r2, #1
   1d090:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1d092:	2b00      	cmp	r3, #0
   1d094:	d1f8      	bne.n	1d088 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d096:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1d09a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1d09c:	4620      	mov	r0, r4
   1d09e:	f00e fd0a 	bl	2bab6 <process_recheck>
   1d0a2:	4606      	mov	r6, r0
   1d0a4:	2800      	cmp	r0, #0
   1d0a6:	d0d1      	beq.n	1d04c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1d0a8:	8b23      	ldrh	r3, [r4, #24]
   1d0aa:	f043 0320 	orr.w	r3, r3, #32
   1d0ae:	8323      	strh	r3, [r4, #24]
   1d0b0:	e7cb      	b.n	1d04a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1d0b2:	2b04      	cmp	r3, #4
   1d0b4:	d10c      	bne.n	1d0d0 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d0b6:	f021 0107 	bic.w	r1, r1, #7
   1d0ba:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1d0bc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1d0be:	4620      	mov	r0, r4
   1d0c0:	f00e fcf9 	bl	2bab6 <process_recheck>
   1d0c4:	4605      	mov	r5, r0
   1d0c6:	2800      	cmp	r0, #0
   1d0c8:	d0bf      	beq.n	1d04a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1d0ca:	f041 0120 	orr.w	r1, r1, #32
   1d0ce:	8321      	strh	r1, [r4, #24]
   1d0d0:	2500      	movs	r5, #0
   1d0d2:	e7ba      	b.n	1d04a <process_event+0x5e>
		} else if (evt == EVT_START) {
   1d0d4:	2803      	cmp	r0, #3
   1d0d6:	d109      	bne.n	1d0ec <process_event+0x100>
			transit = mgr->transitions->start;
   1d0d8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d0da:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1d0de:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d0e0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   1d0e4:	8323      	strh	r3, [r4, #24]
}
   1d0e6:	2500      	movs	r5, #0
		res = 0;
   1d0e8:	462f      	mov	r7, r5
   1d0ea:	e7af      	b.n	1d04c <process_event+0x60>
		} else if (evt == EVT_STOP) {
   1d0ec:	2804      	cmp	r0, #4
   1d0ee:	d106      	bne.n	1d0fe <process_event+0x112>
			transit = mgr->transitions->stop;
   1d0f0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d0f2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1d0f6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d0f8:	f043 0304 	orr.w	r3, r3, #4
   1d0fc:	e7f2      	b.n	1d0e4 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   1d0fe:	2805      	cmp	r0, #5
   1d100:	d106      	bne.n	1d110 <process_event+0x124>
			transit = mgr->transitions->reset;
   1d102:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d104:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   1d108:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1d10a:	f043 0305 	orr.w	r3, r3, #5
   1d10e:	e7e9      	b.n	1d0e4 <process_event+0xf8>
   1d110:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1d112:	462e      	mov	r6, r5
   1d114:	e7e8      	b.n	1d0e8 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   1d116:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1d118:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1d11c:	8321      	strh	r1, [r4, #24]
   1d11e:	f38b 8811 	msr	BASEPRI, fp
   1d122:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1d126:	bb03      	cbnz	r3, 1d16a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   1d128:	2d00      	cmp	r5, #0
   1d12a:	d133      	bne.n	1d194 <process_event+0x1a8>
			if (transit != NULL) {
   1d12c:	b116      	cbz	r6, 1d134 <process_event+0x148>
				transit(mgr, transition_complete);
   1d12e:	4921      	ldr	r1, [pc, #132]	; (1d1b4 <process_event+0x1c8>)
   1d130:	4620      	mov	r0, r4
   1d132:	47b0      	blx	r6
	__asm__ volatile(
   1d134:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d138:	f3ef 8b11 	mrs	fp, BASEPRI
   1d13c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d140:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1d144:	8b23      	ldrh	r3, [r4, #24]
   1d146:	f023 0308 	bic.w	r3, r3, #8
   1d14a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1d14c:	8b23      	ldrh	r3, [r4, #24]
   1d14e:	06da      	lsls	r2, r3, #27
   1d150:	d528      	bpl.n	1d1a4 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1d152:	f023 0310 	bic.w	r3, r3, #16
   1d156:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1d158:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1d15a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   1d15e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1d162:	2900      	cmp	r1, #0
   1d164:	f47f af5b 	bne.w	1d01e <process_event+0x32>
out:
   1d168:	e751      	b.n	1d00e <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1d16a:	68a1      	ldr	r1, [r4, #8]
   1d16c:	2900      	cmp	r1, #0
   1d16e:	d0db      	beq.n	1d128 <process_event+0x13c>
	return node->next;
   1d170:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   1d172:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1d176:	2b00      	cmp	r3, #0
   1d178:	bf38      	it	cc
   1d17a:	2300      	movcc	r3, #0
   1d17c:	4699      	mov	r9, r3
   1d17e:	4652      	mov	r2, sl
   1d180:	463b      	mov	r3, r7
   1d182:	4620      	mov	r0, r4
   1d184:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1d186:	f1b9 0f00 	cmp.w	r9, #0
   1d18a:	d0cd      	beq.n	1d128 <process_event+0x13c>
   1d18c:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d190:	4649      	mov	r1, r9
   1d192:	e7ee      	b.n	1d172 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d194:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1d196:	463b      	mov	r3, r7
   1d198:	4652      	mov	r2, sl
   1d19a:	4620      	mov	r0, r4
   1d19c:	682d      	ldr	r5, [r5, #0]
   1d19e:	f00e fca6 	bl	2baee <notify_one>
   1d1a2:	e7c1      	b.n	1d128 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1d1a4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1d1a8:	bf1e      	ittt	ne
   1d1aa:	f023 0320 	bicne.w	r3, r3, #32
   1d1ae:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   1d1b0:	2102      	movne	r1, #2
   1d1b2:	e7d2      	b.n	1d15a <process_event+0x16e>
   1d1b4:	0002bb1b 	.word	0x0002bb1b

0001d1b8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1bc:	b091      	sub	sp, #68	; 0x44
   1d1be:	468b      	mov	fp, r1
   1d1c0:	9002      	str	r0, [sp, #8]
   1d1c2:	4692      	mov	sl, r2
   1d1c4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1d1c6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1d1c8:	f89a 0000 	ldrb.w	r0, [sl]
   1d1cc:	b908      	cbnz	r0, 1d1d2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1d1ce:	4628      	mov	r0, r5
   1d1d0:	e35e      	b.n	1d890 <cbvprintf+0x6d8>
		if (*fp != '%') {
   1d1d2:	2825      	cmp	r0, #37	; 0x25
   1d1d4:	f10a 0701 	add.w	r7, sl, #1
   1d1d8:	d007      	beq.n	1d1ea <cbvprintf+0x32>
			OUTC('%');
   1d1da:	9b02      	ldr	r3, [sp, #8]
   1d1dc:	4659      	mov	r1, fp
   1d1de:	4798      	blx	r3
   1d1e0:	2800      	cmp	r0, #0
   1d1e2:	f2c0 8355 	blt.w	1d890 <cbvprintf+0x6d8>
   1d1e6:	3501      	adds	r5, #1
			break;
   1d1e8:	e210      	b.n	1d60c <cbvprintf+0x454>
		} state = {
   1d1ea:	2218      	movs	r2, #24
   1d1ec:	2100      	movs	r1, #0
   1d1ee:	a80a      	add	r0, sp, #40	; 0x28
   1d1f0:	f00f fd6e 	bl	2ccd0 <memset>
	if (*sp == '%') {
   1d1f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1d1f8:	2b25      	cmp	r3, #37	; 0x25
   1d1fa:	d078      	beq.n	1d2ee <cbvprintf+0x136>
   1d1fc:	2200      	movs	r2, #0
   1d1fe:	4694      	mov	ip, r2
   1d200:	4616      	mov	r6, r2
   1d202:	4696      	mov	lr, r2
   1d204:	4610      	mov	r0, r2
   1d206:	4639      	mov	r1, r7
		switch (*sp) {
   1d208:	f817 3b01 	ldrb.w	r3, [r7], #1
   1d20c:	2b2b      	cmp	r3, #43	; 0x2b
   1d20e:	f000 809d 	beq.w	1d34c <cbvprintf+0x194>
   1d212:	f200 8094 	bhi.w	1d33e <cbvprintf+0x186>
   1d216:	2b20      	cmp	r3, #32
   1d218:	f000 809b 	beq.w	1d352 <cbvprintf+0x19a>
   1d21c:	2b23      	cmp	r3, #35	; 0x23
   1d21e:	f000 809a 	beq.w	1d356 <cbvprintf+0x19e>
   1d222:	b128      	cbz	r0, 1d230 <cbvprintf+0x78>
   1d224:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1d228:	f040 0004 	orr.w	r0, r0, #4
   1d22c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1d230:	f1be 0f00 	cmp.w	lr, #0
   1d234:	d005      	beq.n	1d242 <cbvprintf+0x8a>
   1d236:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1d23a:	f040 0008 	orr.w	r0, r0, #8
   1d23e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1d242:	b12e      	cbz	r6, 1d250 <cbvprintf+0x98>
   1d244:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1d248:	f040 0010 	orr.w	r0, r0, #16
   1d24c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1d250:	f1bc 0f00 	cmp.w	ip, #0
   1d254:	d005      	beq.n	1d262 <cbvprintf+0xaa>
   1d256:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1d25a:	f040 0020 	orr.w	r0, r0, #32
   1d25e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1d262:	b12a      	cbz	r2, 1d270 <cbvprintf+0xb8>
   1d264:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1d268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1d26c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   1d270:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1d274:	f002 0044 	and.w	r0, r2, #68	; 0x44
   1d278:	2844      	cmp	r0, #68	; 0x44
   1d27a:	d103      	bne.n	1d284 <cbvprintf+0xcc>
		conv->flag_zero = false;
   1d27c:	f36f 1286 	bfc	r2, #6, #1
   1d280:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   1d284:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1d288:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1d28a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1d28e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1d292:	d17b      	bne.n	1d38c <cbvprintf+0x1d4>
		conv->width_star = true;
   1d294:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1d298:	f042 0201 	orr.w	r2, r2, #1
   1d29c:	1c4b      	adds	r3, r1, #1
   1d29e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   1d2a2:	781a      	ldrb	r2, [r3, #0]
   1d2a4:	2a2e      	cmp	r2, #46	; 0x2e
   1d2a6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1d2aa:	bf0c      	ite	eq
   1d2ac:	2101      	moveq	r1, #1
   1d2ae:	2100      	movne	r1, #0
   1d2b0:	f361 0241 	bfi	r2, r1, #1, #1
   1d2b4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   1d2b8:	d174      	bne.n	1d3a4 <cbvprintf+0x1ec>
	if (*sp == '*') {
   1d2ba:	785a      	ldrb	r2, [r3, #1]
   1d2bc:	2a2a      	cmp	r2, #42	; 0x2a
   1d2be:	d06a      	beq.n	1d396 <cbvprintf+0x1de>
   1d2c0:	3301      	adds	r3, #1
	size_t val = 0;
   1d2c2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   1d2c4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d2c6:	4618      	mov	r0, r3
   1d2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d2cc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1d2d0:	2f09      	cmp	r7, #9
   1d2d2:	f240 808e 	bls.w	1d3f2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   1d2d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1d2da:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   1d2dc:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1d2e0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   1d2e4:	f361 0241 	bfi	r2, r1, #1, #1
   1d2e8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   1d2ec:	e05a      	b.n	1d3a4 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   1d2ee:	f10a 0702 	add.w	r7, sl, #2
   1d2f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   1d2f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1d2fa:	07d9      	lsls	r1, r3, #31
   1d2fc:	f140 8149 	bpl.w	1d592 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   1d300:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   1d304:	f1b9 0f00 	cmp.w	r9, #0
   1d308:	da07      	bge.n	1d31a <cbvprintf+0x162>
				conv->flag_dash = true;
   1d30a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1d30e:	f042 0204 	orr.w	r2, r2, #4
   1d312:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   1d316:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   1d31a:	075a      	lsls	r2, r3, #29
   1d31c:	f140 8142 	bpl.w	1d5a4 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   1d320:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   1d324:	f1b8 0f00 	cmp.w	r8, #0
   1d328:	f280 8141 	bge.w	1d5ae <cbvprintf+0x3f6>
				conv->prec_present = false;
   1d32c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1d330:	f36f 0341 	bfc	r3, #1, #1
   1d334:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   1d338:	f04f 38ff 	mov.w	r8, #4294967295
   1d33c:	e137      	b.n	1d5ae <cbvprintf+0x3f6>
		switch (*sp) {
   1d33e:	2b2d      	cmp	r3, #45	; 0x2d
   1d340:	d00c      	beq.n	1d35c <cbvprintf+0x1a4>
   1d342:	2b30      	cmp	r3, #48	; 0x30
   1d344:	f47f af6d 	bne.w	1d222 <cbvprintf+0x6a>
			conv->flag_zero = true;
   1d348:	2201      	movs	r2, #1
	} while (loop);
   1d34a:	e75c      	b.n	1d206 <cbvprintf+0x4e>
			conv->flag_plus = true;
   1d34c:	f04f 0e01 	mov.w	lr, #1
   1d350:	e759      	b.n	1d206 <cbvprintf+0x4e>
			conv->flag_space = true;
   1d352:	2601      	movs	r6, #1
   1d354:	e757      	b.n	1d206 <cbvprintf+0x4e>
			conv->flag_hash = true;
   1d356:	f04f 0c01 	mov.w	ip, #1
   1d35a:	e754      	b.n	1d206 <cbvprintf+0x4e>
		switch (*sp) {
   1d35c:	2001      	movs	r0, #1
   1d35e:	e752      	b.n	1d206 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   1d360:	fb0c 0202 	mla	r2, ip, r2, r0
   1d364:	3a30      	subs	r2, #48	; 0x30
   1d366:	4633      	mov	r3, r6
   1d368:	461e      	mov	r6, r3
   1d36a:	f816 0b01 	ldrb.w	r0, [r6], #1
   1d36e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1d372:	2f09      	cmp	r7, #9
   1d374:	d9f4      	bls.n	1d360 <cbvprintf+0x1a8>
	if (sp != wp) {
   1d376:	4299      	cmp	r1, r3
   1d378:	d093      	beq.n	1d2a2 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1d37a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1d37e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   1d380:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1d382:	f362 0141 	bfi	r1, r2, #1, #1
   1d386:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1d38a:	e78a      	b.n	1d2a2 <cbvprintf+0xea>
   1d38c:	460b      	mov	r3, r1
	size_t val = 0;
   1d38e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1d390:	f04f 0c0a 	mov.w	ip, #10
   1d394:	e7e8      	b.n	1d368 <cbvprintf+0x1b0>
		conv->prec_star = true;
   1d396:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1d39a:	f042 0204 	orr.w	r2, r2, #4
   1d39e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   1d3a2:	3302      	adds	r3, #2
	switch (*sp) {
   1d3a4:	461f      	mov	r7, r3
   1d3a6:	f817 2b01 	ldrb.w	r2, [r7], #1
   1d3aa:	2a6c      	cmp	r2, #108	; 0x6c
   1d3ac:	d041      	beq.n	1d432 <cbvprintf+0x27a>
   1d3ae:	d825      	bhi.n	1d3fc <cbvprintf+0x244>
   1d3b0:	2a68      	cmp	r2, #104	; 0x68
   1d3b2:	d02b      	beq.n	1d40c <cbvprintf+0x254>
   1d3b4:	2a6a      	cmp	r2, #106	; 0x6a
   1d3b6:	d046      	beq.n	1d446 <cbvprintf+0x28e>
   1d3b8:	2a4c      	cmp	r2, #76	; 0x4c
   1d3ba:	d04c      	beq.n	1d456 <cbvprintf+0x29e>
   1d3bc:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1d3be:	f817 2b01 	ldrb.w	r2, [r7], #1
   1d3c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1d3c6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1d3ca:	2a78      	cmp	r2, #120	; 0x78
   1d3cc:	f200 80d9 	bhi.w	1d582 <cbvprintf+0x3ca>
   1d3d0:	2a57      	cmp	r2, #87	; 0x57
   1d3d2:	d84d      	bhi.n	1d470 <cbvprintf+0x2b8>
   1d3d4:	2a41      	cmp	r2, #65	; 0x41
   1d3d6:	d003      	beq.n	1d3e0 <cbvprintf+0x228>
   1d3d8:	3a45      	subs	r2, #69	; 0x45
   1d3da:	2a02      	cmp	r2, #2
   1d3dc:	f200 80d1 	bhi.w	1d582 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   1d3e0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1d3e4:	2204      	movs	r2, #4
   1d3e6:	f362 0302 	bfi	r3, r2, #0, #3
   1d3ea:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   1d3ee:	2301      	movs	r3, #1
			break;
   1d3f0:	e09e      	b.n	1d530 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   1d3f2:	fb06 2101 	mla	r1, r6, r1, r2
   1d3f6:	3930      	subs	r1, #48	; 0x30
   1d3f8:	4603      	mov	r3, r0
   1d3fa:	e764      	b.n	1d2c6 <cbvprintf+0x10e>
	switch (*sp) {
   1d3fc:	2a74      	cmp	r2, #116	; 0x74
   1d3fe:	d026      	beq.n	1d44e <cbvprintf+0x296>
   1d400:	2a7a      	cmp	r2, #122	; 0x7a
   1d402:	d1db      	bne.n	1d3bc <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   1d404:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1d408:	2206      	movs	r2, #6
   1d40a:	e00d      	b.n	1d428 <cbvprintf+0x270>
		if (*++sp == 'h') {
   1d40c:	785a      	ldrb	r2, [r3, #1]
   1d40e:	2a68      	cmp	r2, #104	; 0x68
   1d410:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1d414:	d106      	bne.n	1d424 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   1d416:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1d418:	f361 02c6 	bfi	r2, r1, #3, #4
   1d41c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   1d420:	1c9f      	adds	r7, r3, #2
   1d422:	e7cc      	b.n	1d3be <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   1d424:	4613      	mov	r3, r2
   1d426:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   1d428:	f362 03c6 	bfi	r3, r2, #3, #4
   1d42c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   1d430:	e7c5      	b.n	1d3be <cbvprintf+0x206>
		if (*++sp == 'l') {
   1d432:	785a      	ldrb	r2, [r3, #1]
   1d434:	2a6c      	cmp	r2, #108	; 0x6c
   1d436:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1d43a:	d101      	bne.n	1d440 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   1d43c:	2104      	movs	r1, #4
   1d43e:	e7eb      	b.n	1d418 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   1d440:	4613      	mov	r3, r2
   1d442:	2203      	movs	r2, #3
   1d444:	e7f0      	b.n	1d428 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1d446:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1d44a:	2205      	movs	r2, #5
   1d44c:	e7ec      	b.n	1d428 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   1d44e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1d452:	2207      	movs	r2, #7
   1d454:	e7e8      	b.n	1d428 <cbvprintf+0x270>
		conv->unsupported = true;
   1d456:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1d45a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1d45e:	f023 0302 	bic.w	r3, r3, #2
   1d462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1d466:	f043 0302 	orr.w	r3, r3, #2
   1d46a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   1d46e:	e7a6      	b.n	1d3be <cbvprintf+0x206>
   1d470:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1d474:	2920      	cmp	r1, #32
   1d476:	f200 8084 	bhi.w	1d582 <cbvprintf+0x3ca>
   1d47a:	a001      	add	r0, pc, #4	; (adr r0, 1d480 <cbvprintf+0x2c8>)
   1d47c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1d480:	0001d545 	.word	0x0001d545
   1d484:	0001d583 	.word	0x0001d583
   1d488:	0001d583 	.word	0x0001d583
   1d48c:	0001d583 	.word	0x0001d583
   1d490:	0001d583 	.word	0x0001d583
   1d494:	0001d583 	.word	0x0001d583
   1d498:	0001d583 	.word	0x0001d583
   1d49c:	0001d583 	.word	0x0001d583
   1d4a0:	0001d583 	.word	0x0001d583
   1d4a4:	0001d3e1 	.word	0x0001d3e1
   1d4a8:	0001d583 	.word	0x0001d583
   1d4ac:	0001d545 	.word	0x0001d545
   1d4b0:	0001d505 	.word	0x0001d505
   1d4b4:	0001d3e1 	.word	0x0001d3e1
   1d4b8:	0001d3e1 	.word	0x0001d3e1
   1d4bc:	0001d3e1 	.word	0x0001d3e1
   1d4c0:	0001d583 	.word	0x0001d583
   1d4c4:	0001d505 	.word	0x0001d505
   1d4c8:	0001d583 	.word	0x0001d583
   1d4cc:	0001d583 	.word	0x0001d583
   1d4d0:	0001d583 	.word	0x0001d583
   1d4d4:	0001d583 	.word	0x0001d583
   1d4d8:	0001d54d 	.word	0x0001d54d
   1d4dc:	0001d545 	.word	0x0001d545
   1d4e0:	0001d569 	.word	0x0001d569
   1d4e4:	0001d583 	.word	0x0001d583
   1d4e8:	0001d583 	.word	0x0001d583
   1d4ec:	0001d569 	.word	0x0001d569
   1d4f0:	0001d583 	.word	0x0001d583
   1d4f4:	0001d545 	.word	0x0001d545
   1d4f8:	0001d583 	.word	0x0001d583
   1d4fc:	0001d583 	.word	0x0001d583
   1d500:	0001d545 	.word	0x0001d545
		conv->specifier_cat = SPECIFIER_SINT;
   1d504:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1d508:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d50a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1d50e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d512:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1d514:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1d518:	bf02      	ittt	eq
   1d51a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   1d51e:	f041 0101 	orreq.w	r1, r1, #1
   1d522:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1d526:	2a63      	cmp	r2, #99	; 0x63
   1d528:	d131      	bne.n	1d58e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1d52a:	3b00      	subs	r3, #0
   1d52c:	bf18      	it	ne
   1d52e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1d530:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1d534:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1d538:	430b      	orrs	r3, r1
   1d53a:	f363 0241 	bfi	r2, r3, #1, #1
   1d53e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   1d542:	e6d8      	b.n	1d2f6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   1d544:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1d548:	2002      	movs	r0, #2
   1d54a:	e7de      	b.n	1d50a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   1d54c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d550:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d554:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1d558:	2103      	movs	r1, #3
   1d55a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d55e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   1d560:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d564:	4143      	adcs	r3, r0
   1d566:	e7e3      	b.n	1d530 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   1d568:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1d56c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1d56e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1d572:	f361 0202 	bfi	r2, r1, #0, #3
   1d576:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1d57a:	bf14      	ite	ne
   1d57c:	2301      	movne	r3, #1
   1d57e:	2300      	moveq	r3, #0
   1d580:	e7d6      	b.n	1d530 <cbvprintf+0x378>
		conv->invalid = true;
   1d582:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1d586:	f043 0301 	orr.w	r3, r3, #1
   1d58a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1d58e:	2300      	movs	r3, #0
   1d590:	e7ce      	b.n	1d530 <cbvprintf+0x378>
		} else if (conv->width_present) {
   1d592:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   1d596:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1d598:	bfb4      	ite	lt
   1d59a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   1d59e:	f04f 39ff 	movge.w	r9, #4294967295
   1d5a2:	e6ba      	b.n	1d31a <cbvprintf+0x162>
		} else if (conv->prec_present) {
   1d5a4:	079b      	lsls	r3, r3, #30
   1d5a6:	f57f aec7 	bpl.w	1d338 <cbvprintf+0x180>
			precision = conv->prec_value;
   1d5aa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   1d5ae:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   1d5b2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1d5b4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   1d5b8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   1d5bc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1d5c0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1d5c2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1d5c6:	d136      	bne.n	1d636 <cbvprintf+0x47e>
			switch (length_mod) {
   1d5c8:	1ed3      	subs	r3, r2, #3
   1d5ca:	2b04      	cmp	r3, #4
   1d5cc:	d820      	bhi.n	1d610 <cbvprintf+0x458>
   1d5ce:	e8df f003 	tbb	[pc, r3]
   1d5d2:	0703      	.short	0x0703
   1d5d4:	1f07      	.short	0x1f07
   1d5d6:	1f          	.byte	0x1f
   1d5d7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1d5d8:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   1d5dc:	17c1      	asrs	r1, r0, #31
   1d5de:	e004      	b.n	1d5ea <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   1d5e0:	3407      	adds	r4, #7
   1d5e2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1d5e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   1d5ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   1d5ee:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1d5f2:	f013 0603 	ands.w	r6, r3, #3
   1d5f6:	d054      	beq.n	1d6a2 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   1d5f8:	9802      	ldr	r0, [sp, #8]
   1d5fa:	463b      	mov	r3, r7
   1d5fc:	4652      	mov	r2, sl
   1d5fe:	4659      	mov	r1, fp
   1d600:	f00e fd1e 	bl	2c040 <outs>
   1d604:	2800      	cmp	r0, #0
   1d606:	f2c0 8143 	blt.w	1d890 <cbvprintf+0x6d8>
   1d60a:	4405      	add	r5, r0
			continue;
   1d60c:	46ba      	mov	sl, r7
   1d60e:	e5db      	b.n	1d1c8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d610:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d614:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d616:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1d61a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1d61e:	d105      	bne.n	1d62c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   1d620:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   1d624:	930a      	str	r3, [sp, #40]	; 0x28
   1d626:	2300      	movs	r3, #0
   1d628:	930b      	str	r3, [sp, #44]	; 0x2c
   1d62a:	e7e0      	b.n	1d5ee <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   1d62c:	2a02      	cmp	r2, #2
   1d62e:	d1de      	bne.n	1d5ee <cbvprintf+0x436>
				value->sint = (short)value->sint;
   1d630:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   1d634:	e7d2      	b.n	1d5dc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1d636:	2b02      	cmp	r3, #2
   1d638:	d123      	bne.n	1d682 <cbvprintf+0x4ca>
			switch (length_mod) {
   1d63a:	1ed3      	subs	r3, r2, #3
   1d63c:	2b04      	cmp	r3, #4
   1d63e:	d813      	bhi.n	1d668 <cbvprintf+0x4b0>
   1d640:	e8df f003 	tbb	[pc, r3]
   1d644:	120a0a03 	.word	0x120a0a03
   1d648:	12          	.byte	0x12
   1d649:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1d64a:	6820      	ldr	r0, [r4, #0]
   1d64c:	900a      	str	r0, [sp, #40]	; 0x28
   1d64e:	2100      	movs	r1, #0
   1d650:	1d23      	adds	r3, r4, #4
   1d652:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   1d654:	461c      	mov	r4, r3
   1d656:	e7ca      	b.n	1d5ee <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   1d658:	3407      	adds	r4, #7
   1d65a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   1d65e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   1d662:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   1d666:	e7f5      	b.n	1d654 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   1d668:	f854 3b04 	ldr.w	r3, [r4], #4
   1d66c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1d66e:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   1d670:	f04f 0300 	mov.w	r3, #0
   1d674:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   1d676:	d0d3      	beq.n	1d620 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   1d678:	2a02      	cmp	r2, #2
   1d67a:	d1b8      	bne.n	1d5ee <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   1d67c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d680:	e7d0      	b.n	1d624 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   1d682:	2b04      	cmp	r3, #4
   1d684:	d107      	bne.n	1d696 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   1d686:	3407      	adds	r4, #7
   1d688:	f024 0407 	bic.w	r4, r4, #7
   1d68c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   1d690:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1d694:	e7ab      	b.n	1d5ee <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1d696:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1d698:	bf04      	itt	eq
   1d69a:	f854 3b04 	ldreq.w	r3, [r4], #4
   1d69e:	930a      	streq	r3, [sp, #40]	; 0x28
   1d6a0:	e7a5      	b.n	1d5ee <cbvprintf+0x436>
		switch (conv->specifier) {
   1d6a2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1d6a6:	2878      	cmp	r0, #120	; 0x78
   1d6a8:	d8b0      	bhi.n	1d60c <cbvprintf+0x454>
   1d6aa:	2862      	cmp	r0, #98	; 0x62
   1d6ac:	d822      	bhi.n	1d6f4 <cbvprintf+0x53c>
   1d6ae:	2825      	cmp	r0, #37	; 0x25
   1d6b0:	f43f ad93 	beq.w	1d1da <cbvprintf+0x22>
   1d6b4:	2858      	cmp	r0, #88	; 0x58
   1d6b6:	d1a9      	bne.n	1d60c <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1d6b8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1d6bc:	9300      	str	r3, [sp, #0]
   1d6be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d6c2:	ab04      	add	r3, sp, #16
   1d6c4:	aa0c      	add	r2, sp, #48	; 0x30
   1d6c6:	f00e fc70 	bl	2bfaa <encode_uint>
   1d6ca:	4682      	mov	sl, r0
			if (precision >= 0) {
   1d6cc:	f1b8 0f00 	cmp.w	r8, #0
   1d6d0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1d6d4:	db0c      	blt.n	1d6f0 <cbvprintf+0x538>
				conv->flag_zero = false;
   1d6d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1d6da:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   1d6de:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1d6e2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   1d6e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   1d6e8:	d902      	bls.n	1d6f0 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   1d6ea:	eba8 0303 	sub.w	r3, r8, r3
   1d6ee:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   1d6f0:	4680      	mov	r8, r0
   1d6f2:	e03d      	b.n	1d770 <cbvprintf+0x5b8>
   1d6f4:	3863      	subs	r0, #99	; 0x63
   1d6f6:	2815      	cmp	r0, #21
   1d6f8:	d888      	bhi.n	1d60c <cbvprintf+0x454>
   1d6fa:	a101      	add	r1, pc, #4	; (adr r1, 1d700 <cbvprintf+0x548>)
   1d6fc:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   1d700:	0001d781 	.word	0x0001d781
   1d704:	0001d7e5 	.word	0x0001d7e5
   1d708:	0001d60d 	.word	0x0001d60d
   1d70c:	0001d60d 	.word	0x0001d60d
   1d710:	0001d60d 	.word	0x0001d60d
   1d714:	0001d60d 	.word	0x0001d60d
   1d718:	0001d7e5 	.word	0x0001d7e5
   1d71c:	0001d60d 	.word	0x0001d60d
   1d720:	0001d60d 	.word	0x0001d60d
   1d724:	0001d60d 	.word	0x0001d60d
   1d728:	0001d60d 	.word	0x0001d60d
   1d72c:	0001d843 	.word	0x0001d843
   1d730:	0001d811 	.word	0x0001d811
   1d734:	0001d815 	.word	0x0001d815
   1d738:	0001d60d 	.word	0x0001d60d
   1d73c:	0001d60d 	.word	0x0001d60d
   1d740:	0001d759 	.word	0x0001d759
   1d744:	0001d60d 	.word	0x0001d60d
   1d748:	0001d811 	.word	0x0001d811
   1d74c:	0001d60d 	.word	0x0001d60d
   1d750:	0001d60d 	.word	0x0001d60d
   1d754:	0001d811 	.word	0x0001d811
			if (precision >= 0) {
   1d758:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1d75c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   1d760:	db0a      	blt.n	1d778 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   1d762:	4641      	mov	r1, r8
   1d764:	4650      	mov	r0, sl
   1d766:	f00f fa6c 	bl	2cc42 <strnlen>
			bpe = bps + len;
   1d76a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   1d76e:	2600      	movs	r6, #0
		if (bps == NULL) {
   1d770:	f1ba 0f00 	cmp.w	sl, #0
   1d774:	d10c      	bne.n	1d790 <cbvprintf+0x5d8>
   1d776:	e749      	b.n	1d60c <cbvprintf+0x454>
				len = strlen(bps);
   1d778:	4650      	mov	r0, sl
   1d77a:	f00f fa5b 	bl	2cc34 <strlen>
   1d77e:	e7f4      	b.n	1d76a <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d782:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   1d786:	2600      	movs	r6, #0
			bpe = buf + 1;
   1d788:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   1d78c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   1d790:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   1d794:	b106      	cbz	r6, 1d798 <cbvprintf+0x5e0>
			nj_len += 1U;
   1d796:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1d798:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1d79c:	06d0      	lsls	r0, r2, #27
   1d79e:	d56b      	bpl.n	1d878 <cbvprintf+0x6c0>
			nj_len += 2U;
   1d7a0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   1d7a2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1d7a4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   1d7a6:	bf48      	it	mi
   1d7a8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1d7aa:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1d7ac:	bf48      	it	mi
   1d7ae:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1d7b0:	f1b9 0f00 	cmp.w	r9, #0
   1d7b4:	dd79      	ble.n	1d8aa <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   1d7b6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1d7ba:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1d7be:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1d7c2:	9303      	str	r3, [sp, #12]
   1d7c4:	0753      	lsls	r3, r2, #29
   1d7c6:	d470      	bmi.n	1d8aa <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   1d7c8:	0650      	lsls	r0, r2, #25
   1d7ca:	d564      	bpl.n	1d896 <cbvprintf+0x6de>
					if (sign != 0) {
   1d7cc:	b146      	cbz	r6, 1d7e0 <cbvprintf+0x628>
						OUTC(sign);
   1d7ce:	9b02      	ldr	r3, [sp, #8]
   1d7d0:	4659      	mov	r1, fp
   1d7d2:	4630      	mov	r0, r6
   1d7d4:	4798      	blx	r3
   1d7d6:	2800      	cmp	r0, #0
   1d7d8:	db5a      	blt.n	1d890 <cbvprintf+0x6d8>
						sign = 0;
   1d7da:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1d7dc:	3501      	adds	r5, #1
						sign = 0;
   1d7de:	461e      	mov	r6, r3
					pad = '0';
   1d7e0:	2330      	movs	r3, #48	; 0x30
   1d7e2:	e059      	b.n	1d898 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   1d7e4:	071e      	lsls	r6, r3, #28
   1d7e6:	d411      	bmi.n	1d80c <cbvprintf+0x654>
				sign = ' ';
   1d7e8:	f013 0610 	ands.w	r6, r3, #16
   1d7ec:	bf18      	it	ne
   1d7ee:	2620      	movne	r6, #32
			sint = value->sint;
   1d7f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   1d7f4:	2a00      	cmp	r2, #0
   1d7f6:	f173 0100 	sbcs.w	r1, r3, #0
   1d7fa:	f6bf af5d 	bge.w	1d6b8 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   1d7fe:	4252      	negs	r2, r2
   1d800:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1d804:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   1d808:	262d      	movs	r6, #45	; 0x2d
   1d80a:	e755      	b.n	1d6b8 <cbvprintf+0x500>
				sign = '+';
   1d80c:	262b      	movs	r6, #43	; 0x2b
   1d80e:	e7ef      	b.n	1d7f0 <cbvprintf+0x638>
		switch (conv->specifier) {
   1d810:	2600      	movs	r6, #0
   1d812:	e751      	b.n	1d6b8 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   1d814:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d816:	b348      	cbz	r0, 1d86c <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1d818:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1d81c:	9300      	str	r3, [sp, #0]
   1d81e:	aa0c      	add	r2, sp, #48	; 0x30
   1d820:	ab04      	add	r3, sp, #16
   1d822:	2100      	movs	r1, #0
   1d824:	f00e fbc1 	bl	2bfaa <encode_uint>
				conv->altform_0c = true;
   1d828:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1d82c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1d830:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1d834:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1d838:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1d83a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   1d83e:	2600      	movs	r6, #0
				goto prec_int_pad0;
   1d840:	e744      	b.n	1d6cc <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   1d842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   1d844:	2a07      	cmp	r2, #7
   1d846:	f63f aee1 	bhi.w	1d60c <cbvprintf+0x454>
   1d84a:	e8df f002 	tbb	[pc, r2]
   1d84e:	040d      	.short	0x040d
   1d850:	08080d06 	.word	0x08080d06
   1d854:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1d856:	701d      	strb	r5, [r3, #0]
		break;
   1d858:	e6d8      	b.n	1d60c <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1d85a:	801d      	strh	r5, [r3, #0]
		break;
   1d85c:	e6d6      	b.n	1d60c <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   1d85e:	4628      	mov	r0, r5
   1d860:	17e9      	asrs	r1, r5, #31
   1d862:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1d866:	e6d1      	b.n	1d60c <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1d868:	601d      	str	r5, [r3, #0]
		break;
   1d86a:	e6cf      	b.n	1d60c <cbvprintf+0x454>
			bpe = bps + 5;
   1d86c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1d934 <cbvprintf+0x77c>
   1d870:	4606      	mov	r6, r0
			bps = "(nil)";
   1d872:	f1a8 0a05 	sub.w	sl, r8, #5
   1d876:	e78b      	b.n	1d790 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   1d878:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1d87a:	bf48      	it	mi
   1d87c:	3301      	addmi	r3, #1
   1d87e:	e790      	b.n	1d7a2 <cbvprintf+0x5ea>
					OUTC(pad);
   1d880:	4618      	mov	r0, r3
   1d882:	9303      	str	r3, [sp, #12]
   1d884:	4659      	mov	r1, fp
   1d886:	9b02      	ldr	r3, [sp, #8]
   1d888:	4798      	blx	r3
   1d88a:	2800      	cmp	r0, #0
   1d88c:	9b03      	ldr	r3, [sp, #12]
   1d88e:	da04      	bge.n	1d89a <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   1d890:	b011      	add	sp, #68	; 0x44
   1d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1d896:	2320      	movs	r3, #32
   1d898:	444d      	add	r5, r9
   1d89a:	464a      	mov	r2, r9
				while (width-- > 0) {
   1d89c:	2a00      	cmp	r2, #0
   1d89e:	eba5 0109 	sub.w	r1, r5, r9
   1d8a2:	f109 39ff 	add.w	r9, r9, #4294967295
   1d8a6:	dceb      	bgt.n	1d880 <cbvprintf+0x6c8>
   1d8a8:	460d      	mov	r5, r1
		if (sign != 0) {
   1d8aa:	b136      	cbz	r6, 1d8ba <cbvprintf+0x702>
			OUTC(sign);
   1d8ac:	9b02      	ldr	r3, [sp, #8]
   1d8ae:	4659      	mov	r1, fp
   1d8b0:	4630      	mov	r0, r6
   1d8b2:	4798      	blx	r3
   1d8b4:	2800      	cmp	r0, #0
   1d8b6:	dbeb      	blt.n	1d890 <cbvprintf+0x6d8>
   1d8b8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1d8ba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1d8be:	06d9      	lsls	r1, r3, #27
   1d8c0:	d401      	bmi.n	1d8c6 <cbvprintf+0x70e>
   1d8c2:	071a      	lsls	r2, r3, #28
   1d8c4:	d506      	bpl.n	1d8d4 <cbvprintf+0x71c>
				OUTC('0');
   1d8c6:	9b02      	ldr	r3, [sp, #8]
   1d8c8:	4659      	mov	r1, fp
   1d8ca:	2030      	movs	r0, #48	; 0x30
   1d8cc:	4798      	blx	r3
   1d8ce:	2800      	cmp	r0, #0
   1d8d0:	dbde      	blt.n	1d890 <cbvprintf+0x6d8>
   1d8d2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1d8d4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1d8d8:	06db      	lsls	r3, r3, #27
   1d8da:	d507      	bpl.n	1d8ec <cbvprintf+0x734>
				OUTC(conv->specifier);
   1d8dc:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1d8e0:	9b02      	ldr	r3, [sp, #8]
   1d8e2:	4659      	mov	r1, fp
   1d8e4:	4798      	blx	r3
   1d8e6:	2800      	cmp	r0, #0
   1d8e8:	dbd2      	blt.n	1d890 <cbvprintf+0x6d8>
   1d8ea:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1d8ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1d8ee:	442e      	add	r6, r5
   1d8f0:	1b73      	subs	r3, r6, r5
   1d8f2:	2b00      	cmp	r3, #0
   1d8f4:	dc16      	bgt.n	1d924 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   1d8f6:	9802      	ldr	r0, [sp, #8]
   1d8f8:	4643      	mov	r3, r8
   1d8fa:	4652      	mov	r2, sl
   1d8fc:	4659      	mov	r1, fp
   1d8fe:	f00e fb9f 	bl	2c040 <outs>
   1d902:	2800      	cmp	r0, #0
   1d904:	dbc4      	blt.n	1d890 <cbvprintf+0x6d8>
   1d906:	4405      	add	r5, r0
		while (width > 0) {
   1d908:	44a9      	add	r9, r5
   1d90a:	eba9 0305 	sub.w	r3, r9, r5
   1d90e:	2b00      	cmp	r3, #0
   1d910:	f77f ae7c 	ble.w	1d60c <cbvprintf+0x454>
			OUTC(' ');
   1d914:	9b02      	ldr	r3, [sp, #8]
   1d916:	4659      	mov	r1, fp
   1d918:	2020      	movs	r0, #32
   1d91a:	4798      	blx	r3
   1d91c:	2800      	cmp	r0, #0
   1d91e:	dbb7      	blt.n	1d890 <cbvprintf+0x6d8>
   1d920:	3501      	adds	r5, #1
			--width;
   1d922:	e7f2      	b.n	1d90a <cbvprintf+0x752>
				OUTC('0');
   1d924:	9b02      	ldr	r3, [sp, #8]
   1d926:	4659      	mov	r1, fp
   1d928:	2030      	movs	r0, #48	; 0x30
   1d92a:	4798      	blx	r3
   1d92c:	2800      	cmp	r0, #0
   1d92e:	dbaf      	blt.n	1d890 <cbvprintf+0x6d8>
   1d930:	3501      	adds	r5, #1
   1d932:	e7dd      	b.n	1d8f0 <cbvprintf+0x738>
   1d934:	00032f8f 	.word	0x00032f8f

0001d938 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   1d938:	b508      	push	{r3, lr}
   1d93a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d93e:	f3ef 8311 	mrs	r3, BASEPRI
   1d942:	f382 8812 	msr	BASEPRI_MAX, r2
   1d946:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1d94a:	f001 fa9b 	bl	1ee84 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1d94e:	4803      	ldr	r0, [pc, #12]	; (1d95c <sys_reboot+0x24>)
   1d950:	f00e f8a4 	bl	2ba9c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1d954:	f000 fec2 	bl	1e6dc <arch_cpu_idle>
   1d958:	e7fc      	b.n	1d954 <sys_reboot+0x1c>
   1d95a:	bf00      	nop
   1d95c:	00032f90 	.word	0x00032f90

0001d960 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   1d960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d964:	460f      	mov	r7, r1
   1d966:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d968:	2108      	movs	r1, #8
   1d96a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1d96c:	f00e fc3b 	bl	2c1e6 <nvs_al_size.isra.0>

	*addr -= ate_size;
   1d970:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   1d972:	4b13      	ldr	r3, [pc, #76]	; (1d9c0 <nvs_recover_last_ate+0x60>)
	*addr -= ate_size;
   1d974:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d976:	4680      	mov	r8, r0
	*addr -= ate_size;
   1d978:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   1d97a:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   1d97e:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   1d980:	42ac      	cmp	r4, r5
   1d982:	d803      	bhi.n	1d98c <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   1d984:	2000      	movs	r0, #0
}
   1d986:	b003      	add	sp, #12
   1d988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d98c:	2308      	movs	r3, #8
   1d98e:	466a      	mov	r2, sp
   1d990:	4621      	mov	r1, r4
   1d992:	4630      	mov	r0, r6
   1d994:	f00e fb8a 	bl	2c0ac <nvs_flash_rd>
		if (rc) {
   1d998:	2800      	cmp	r0, #0
   1d99a:	d1f4      	bne.n	1d986 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   1d99c:	4669      	mov	r1, sp
   1d99e:	4630      	mov	r0, r6
   1d9a0:	f00e fc2b 	bl	2c1fa <nvs_ate_valid>
   1d9a4:	b140      	cbz	r0, 1d9b8 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   1d9a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1d9aa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   1d9ae:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   1d9b0:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   1d9b4:	4413      	add	r3, r2
   1d9b6:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   1d9b8:	eba4 0408 	sub.w	r4, r4, r8
   1d9bc:	e7e0      	b.n	1d980 <nvs_recover_last_ate+0x20>
   1d9be:	bf00      	nop
   1d9c0:	ffff0000 	.word	0xffff0000

0001d9c4 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   1d9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9c8:	4604      	mov	r4, r0
   1d9ca:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d9cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1d9ce:	2108      	movs	r1, #8
   1d9d0:	f00e fc09 	bl	2c1e6 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1d9d4:	6863      	ldr	r3, [r4, #4]
   1d9d6:	0c1b      	lsrs	r3, r3, #16
   1d9d8:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d9da:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   1d9dc:	a903      	add	r1, sp, #12
   1d9de:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1d9e0:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   1d9e2:	f00e fc24 	bl	2c22e <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1d9e6:	9b03      	ldr	r3, [sp, #12]
   1d9e8:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d9ea:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1d9ec:	4419      	add	r1, r3
   1d9ee:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d9f0:	4632      	mov	r2, r6
   1d9f2:	2308      	movs	r3, #8
   1d9f4:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1d9f6:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d9f8:	f00e fb58 	bl	2c0ac <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   1d9fc:	1e02      	subs	r2, r0, #0
   1d9fe:	f2c0 80ab 	blt.w	1db58 <nvs_gc+0x194>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1da02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1da04:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1da06:	2300      	movs	r3, #0
		if (data8[i] != value) {
   1da08:	5cf1      	ldrb	r1, [r6, r3]
   1da0a:	4291      	cmp	r1, r2
   1da0c:	f040 8092 	bne.w	1db34 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1da10:	3301      	adds	r3, #1
   1da12:	2b08      	cmp	r3, #8
   1da14:	d1f8      	bne.n	1da08 <nvs_gc+0x44>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   1da16:	68a0      	ldr	r0, [r4, #8]
   1da18:	6863      	ldr	r3, [r4, #4]
   1da1a:	4428      	add	r0, r5
   1da1c:	4283      	cmp	r3, r0
   1da1e:	f080 8081 	bcs.w	1db24 <nvs_gc+0x160>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
   1da22:	9903      	ldr	r1, [sp, #12]
   1da24:	4620      	mov	r0, r4
   1da26:	f00e fb9e 	bl	2c166 <nvs_flash_erase_sector>
   1da2a:	4602      	mov	r2, r0
	if (rc) {
   1da2c:	e094      	b.n	1db58 <nvs_gc+0x194>
		gc_addr &= ADDR_SECT_MASK;
   1da2e:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   1da30:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   1da34:	0c1b      	lsrs	r3, r3, #16
   1da36:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   1da38:	4413      	add	r3, r2
   1da3a:	9304      	str	r3, [sp, #16]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1da3c:	f8df b120 	ldr.w	fp, [pc, #288]	; 1db60 <nvs_gc+0x19c>
		gc_prev_addr = gc_addr;
   1da40:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   1da44:	aa08      	add	r2, sp, #32
   1da46:	a904      	add	r1, sp, #16
   1da48:	4620      	mov	r0, r4
   1da4a:	f00e fc74 	bl	2c336 <nvs_prev_ate>
		if (rc) {
   1da4e:	4602      	mov	r2, r0
   1da50:	2800      	cmp	r0, #0
   1da52:	f040 8081 	bne.w	1db58 <nvs_gc+0x194>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   1da56:	a908      	add	r1, sp, #32
   1da58:	4620      	mov	r0, r4
   1da5a:	f00e fbce 	bl	2c1fa <nvs_ate_valid>
   1da5e:	2800      	cmp	r0, #0
   1da60:	d036      	beq.n	1dad0 <nvs_gc+0x10c>
		wlk_addr = fs->ate_wra;
   1da62:	6863      	ldr	r3, [r4, #4]
   1da64:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1da66:	aa0a      	add	r2, sp, #40	; 0x28
   1da68:	a905      	add	r1, sp, #20
   1da6a:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   1da6c:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1da6e:	f00e fc62 	bl	2c336 <nvs_prev_ate>
			if (rc) {
   1da72:	4602      	mov	r2, r0
   1da74:	2800      	cmp	r0, #0
   1da76:	d16f      	bne.n	1db58 <nvs_gc+0x194>
			if ((wlk_ate.id == gc_ate.id) &&
   1da78:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1da7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1da80:	429a      	cmp	r2, r3
   1da82:	d028      	beq.n	1dad6 <nvs_gc+0x112>
		} while (wlk_addr != fs->ate_wra);
   1da84:	6862      	ldr	r2, [r4, #4]
   1da86:	9b05      	ldr	r3, [sp, #20]
   1da88:	429a      	cmp	r2, r3
   1da8a:	d1ec      	bne.n	1da66 <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   1da8c:	4556      	cmp	r6, sl
   1da8e:	d11f      	bne.n	1dad0 <nvs_gc+0x10c>
   1da90:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1da94:	b1e3      	cbz	r3, 1dad0 <nvs_gc+0x10c>
			data_addr += gc_ate.offset;
   1da96:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1da9a:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   1da9e:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   1daa0:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1daa2:	68a3      	ldr	r3, [r4, #8]
   1daa4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   1daa8:	f00e fb94 	bl	2c1d4 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1daac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   1daae:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1dab2:	681e      	ldr	r6, [r3, #0]
   1dab4:	4276      	negs	r6, r6
	block_size =
   1dab6:	f006 0320 	and.w	r3, r6, #32
   1daba:	9301      	str	r3, [sp, #4]
	while (len) {
   1dabc:	f1b8 0f00 	cmp.w	r8, #0
   1dac0:	d110      	bne.n	1dae4 <nvs_gc+0x120>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   1dac2:	a908      	add	r1, sp, #32
   1dac4:	4620      	mov	r0, r4
   1dac6:	f00e fc10 	bl	2c2ea <nvs_flash_ate_wrt>
			if (rc) {
   1daca:	4602      	mov	r2, r0
   1dacc:	2800      	cmp	r0, #0
   1dace:	d143      	bne.n	1db58 <nvs_gc+0x194>
	} while (gc_prev_addr != stop_addr);
   1dad0:	45ca      	cmp	sl, r9
   1dad2:	d1b5      	bne.n	1da40 <nvs_gc+0x7c>
gc_done:
   1dad4:	e79f      	b.n	1da16 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   1dad6:	a90a      	add	r1, sp, #40	; 0x28
   1dad8:	4620      	mov	r0, r4
   1dada:	f00e fb8e 	bl	2c1fa <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   1dade:	2800      	cmp	r0, #0
   1dae0:	d0d0      	beq.n	1da84 <nvs_gc+0xc0>
   1dae2:	e7d3      	b.n	1da8c <nvs_gc+0xc8>
		bytes_to_copy = MIN(block_size, len);
   1dae4:	9b01      	ldr	r3, [sp, #4]
   1dae6:	4543      	cmp	r3, r8
   1dae8:	bf28      	it	cs
   1daea:	4643      	movcs	r3, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1daec:	aa0c      	add	r2, sp, #48	; 0x30
   1daee:	4639      	mov	r1, r7
   1daf0:	4620      	mov	r0, r4
		bytes_to_copy = MIN(block_size, len);
   1daf2:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1daf4:	f00e fada 	bl	2c0ac <nvs_flash_rd>
		if (rc) {
   1daf8:	4602      	mov	r2, r0
   1dafa:	bb68      	cbnz	r0, 1db58 <nvs_gc+0x194>
	if (!len) {
   1dafc:	b136      	cbz	r6, 1db0c <nvs_gc+0x148>
   1dafe:	aa0c      	add	r2, sp, #48	; 0x30
   1db00:	68a1      	ldr	r1, [r4, #8]
   1db02:	4633      	mov	r3, r6
   1db04:	4620      	mov	r0, r4
   1db06:	f00e fbbb 	bl	2c280 <nvs_flash_al_wrt.part.0>
   1db0a:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   1db0c:	4631      	mov	r1, r6
   1db0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1db10:	f00e fb69 	bl	2c1e6 <nvs_al_size.isra.0>
   1db14:	68a1      	ldr	r1, [r4, #8]
   1db16:	4401      	add	r1, r0
   1db18:	60a1      	str	r1, [r4, #8]
		if (rc) {
   1db1a:	b9ea      	cbnz	r2, 1db58 <nvs_gc+0x194>
		len -= bytes_to_copy;
   1db1c:	eba8 0806 	sub.w	r8, r8, r6
		addr += bytes_to_copy;
   1db20:	4437      	add	r7, r6
   1db22:	e7cb      	b.n	1dabc <nvs_gc+0xf8>
		rc = nvs_add_gc_done_ate(fs);
   1db24:	4620      	mov	r0, r4
   1db26:	f00e fbf1 	bl	2c30c <nvs_add_gc_done_ate>
		if (rc) {
   1db2a:	4602      	mov	r2, r0
   1db2c:	2800      	cmp	r0, #0
   1db2e:	f43f af78 	beq.w	1da22 <nvs_gc+0x5e>
   1db32:	e011      	b.n	1db58 <nvs_gc+0x194>
	stop_addr = gc_addr - ate_size;
   1db34:	9b04      	ldr	r3, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1db36:	4631      	mov	r1, r6
   1db38:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   1db3a:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1db3e:	f00e fb81 	bl	2c244 <nvs_close_ate_valid>
   1db42:	2800      	cmp	r0, #0
   1db44:	f47f af73 	bne.w	1da2e <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   1db48:	a904      	add	r1, sp, #16
   1db4a:	4620      	mov	r0, r4
   1db4c:	f7ff ff08 	bl	1d960 <nvs_recover_last_ate>
		if (rc) {
   1db50:	4602      	mov	r2, r0
   1db52:	2800      	cmp	r0, #0
   1db54:	f43f af72 	beq.w	1da3c <nvs_gc+0x78>
		return rc;
	}
	return 0;
}
   1db58:	4610      	mov	r0, r2
   1db5a:	b015      	add	sp, #84	; 0x54
   1db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db60:	ffff0000 	.word	0xffff0000

0001db64 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   1db64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1db68:	4604      	mov	r4, r0
   1db6a:	b088      	sub	sp, #32
   1db6c:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   1db6e:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   1db72:	4638      	mov	r0, r7
   1db74:	f013 fd99 	bl	316aa <z_impl_k_mutex_init>
   1db78:	4628      	mov	r0, r5
   1db7a:	f009 fe63 	bl	27844 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   1db7e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   1db80:	2800      	cmp	r0, #0
   1db82:	f000 811e 	beq.w	1ddc2 <nvs_init+0x25e>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1db86:	6883      	ldr	r3, [r0, #8]
   1db88:	691b      	ldr	r3, [r3, #16]
   1db8a:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1db8c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1db8e:	b928      	cbnz	r0, 1db9c <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   1db90:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1db94:	4628      	mov	r0, r5
   1db96:	b008      	add	sp, #32
   1db98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   1db9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   1db9e:	6883      	ldr	r3, [r0, #8]
   1dba0:	691b      	ldr	r3, [r3, #16]
   1dba2:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   1dba4:	6803      	ldr	r3, [r0, #0]
   1dba6:	3b01      	subs	r3, #1
   1dba8:	2b1f      	cmp	r3, #31
   1dbaa:	d8f1      	bhi.n	1db90 <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   1dbac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1dbae:	6821      	ldr	r1, [r4, #0]
   1dbb0:	aa05      	add	r2, sp, #20
   1dbb2:	f012 fdeb 	bl	3078c <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1dbb6:	2800      	cmp	r0, #0
   1dbb8:	d1ea      	bne.n	1db90 <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   1dbba:	89a3      	ldrh	r3, [r4, #12]
   1dbbc:	2b00      	cmp	r3, #0
   1dbbe:	d0e7      	beq.n	1db90 <nvs_init+0x2c>
   1dbc0:	9a06      	ldr	r2, [sp, #24]
   1dbc2:	fbb3 f5f2 	udiv	r5, r3, r2
   1dbc6:	fb02 3515 	mls	r5, r2, r5, r3
   1dbca:	2d00      	cmp	r5, #0
   1dbcc:	d1e0      	bne.n	1db90 <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   1dbce:	89e3      	ldrh	r3, [r4, #14]
   1dbd0:	2b01      	cmp	r3, #1
   1dbd2:	d9dd      	bls.n	1db90 <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   1dbd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   1dbd6:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   1dbd8:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1dbdc:	f04f 32ff 	mov.w	r2, #4294967295
   1dbe0:	f04f 33ff 	mov.w	r3, #4294967295
   1dbe4:	4638      	mov	r0, r7
   1dbe6:	f00a f853 	bl	27c90 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1dbea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1dbec:	2108      	movs	r1, #8
   1dbee:	f00e fafa 	bl	2c1e6 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   1dbf2:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1dbf4:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   1dbf6:	89e3      	ldrh	r3, [r4, #14]
   1dbf8:	fa1f fa85 	uxth.w	sl, r5
   1dbfc:	4553      	cmp	r3, sl
   1dbfe:	d844      	bhi.n	1dc8a <nvs_init+0x126>
	if (closed_sectors == fs->sector_count) {
   1dc00:	89e3      	ldrh	r3, [r4, #14]
   1dc02:	454b      	cmp	r3, r9
   1dc04:	f000 80d2 	beq.w	1ddac <nvs_init+0x248>
	if (i == fs->sector_count) {
   1dc08:	4553      	cmp	r3, sl
   1dc0a:	d10b      	bne.n	1dc24 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1dc0c:	9900      	ldr	r1, [sp, #0]
   1dc0e:	2308      	movs	r3, #8
   1dc10:	4642      	mov	r2, r8
   1dc12:	1b89      	subs	r1, r1, r6
   1dc14:	4620      	mov	r0, r4
   1dc16:	f00e fa81 	bl	2c11c <nvs_flash_cmp_const>
		if (!rc) {
   1dc1a:	b918      	cbnz	r0, 1dc24 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
   1dc1c:	89e0      	ldrh	r0, [r4, #14]
   1dc1e:	4669      	mov	r1, sp
   1dc20:	f00e fb05 	bl	2c22e <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   1dc24:	4669      	mov	r1, sp
   1dc26:	4620      	mov	r0, r4
   1dc28:	f7ff fe9a 	bl	1d960 <nvs_recover_last_ate>
	if (rc) {
   1dc2c:	4605      	mov	r5, r0
   1dc2e:	2800      	cmp	r0, #0
   1dc30:	f040 80be 	bne.w	1ddb0 <nvs_init+0x24c>
	fs->ate_wra = addr;
   1dc34:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1dc36:	4a79      	ldr	r2, [pc, #484]	; (1de1c <nvs_init+0x2b8>)
	fs->ate_wra = addr;
   1dc38:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1dc3a:	4013      	ands	r3, r2
   1dc3c:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   1dc3e:	4691      	mov	r9, r2
	while (fs->ate_wra >= fs->data_wra) {
   1dc40:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   1dc44:	4299      	cmp	r1, r3
   1dc46:	d30e      	bcc.n	1dc66 <nvs_init+0x102>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1dc48:	2308      	movs	r3, #8
   1dc4a:	aa01      	add	r2, sp, #4
   1dc4c:	4620      	mov	r0, r4
   1dc4e:	f00e fa2d 	bl	2c0ac <nvs_flash_rd>
		if (rc) {
   1dc52:	b9c0      	cbnz	r0, 1dc86 <nvs_init+0x122>
   1dc54:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   1dc56:	f813 2b01 	ldrb.w	r2, [r3], #1
   1dc5a:	4590      	cmp	r8, r2
   1dc5c:	f040 80c1 	bne.w	1dde2 <nvs_init+0x27e>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1dc60:	3001      	adds	r0, #1
   1dc62:	2808      	cmp	r0, #8
   1dc64:	d1f7      	bne.n	1dc56 <nvs_init+0xf2>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1dc66:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   1dc68:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1dc6a:	0c1b      	lsrs	r3, r3, #16
   1dc6c:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   1dc6e:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1dc70:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   1dc72:	f00e fadc 	bl	2c22e <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   1dc76:	89a3      	ldrh	r3, [r4, #12]
   1dc78:	9900      	ldr	r1, [sp, #0]
   1dc7a:	4642      	mov	r2, r8
   1dc7c:	4620      	mov	r0, r4
   1dc7e:	f00e fa4d 	bl	2c11c <nvs_flash_cmp_const>
	if (rc < 0) {
   1dc82:	2800      	cmp	r0, #0
   1dc84:	da25      	bge.n	1dcd2 <nvs_init+0x16e>
   1dc86:	4605      	mov	r5, r0
   1dc88:	e092      	b.n	1ddb0 <nvs_init+0x24c>
		       (uint16_t)(fs->sector_size - ate_size);
   1dc8a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1dc8c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   1dc8e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   1dc90:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1dc94:	4642      	mov	r2, r8
   1dc96:	2308      	movs	r3, #8
   1dc98:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1dc9a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1dc9c:	f00e fa3e 	bl	2c11c <nvs_flash_cmp_const>
		if (rc) {
   1dca0:	b178      	cbz	r0, 1dcc2 <nvs_init+0x15e>
			nvs_sector_advance(fs, &addr);
   1dca2:	89e0      	ldrh	r0, [r4, #14]
   1dca4:	4669      	mov	r1, sp
   1dca6:	f00e fac2 	bl	2c22e <nvs_sector_advance.isra.0>
			closed_sectors++;
   1dcaa:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1dcae:	9900      	ldr	r1, [sp, #0]
   1dcb0:	2308      	movs	r3, #8
   1dcb2:	4642      	mov	r2, r8
   1dcb4:	4620      	mov	r0, r4
			closed_sectors++;
   1dcb6:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1dcba:	f00e fa2f 	bl	2c11c <nvs_flash_cmp_const>
			if (!rc) {
   1dcbe:	2800      	cmp	r0, #0
   1dcc0:	d09e      	beq.n	1dc00 <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   1dcc2:	3501      	adds	r5, #1
   1dcc4:	e797      	b.n	1dbf6 <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1dcc6:	2a00      	cmp	r2, #0
   1dcc8:	f000 80a3 	beq.w	1de12 <nvs_init+0x2ae>
				rc = -ESPIPE;
   1dccc:	f06f 051c 	mvn.w	r5, #28
   1dcd0:	e06e      	b.n	1ddb0 <nvs_init+0x24c>
	if (rc) {
   1dcd2:	d046      	beq.n	1dd62 <nvs_init+0x1fe>
		addr = fs->ate_wra + ate_size;
   1dcd4:	6863      	ldr	r3, [r4, #4]
   1dcd6:	4433      	add	r3, r6
   1dcd8:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1dcda:	f64f 78ff 	movw	r8, #65535	; 0xffff
   1dcde:	9900      	ldr	r1, [sp, #0]
   1dce0:	89a3      	ldrh	r3, [r4, #12]
   1dce2:	b28a      	uxth	r2, r1
   1dce4:	1b9b      	subs	r3, r3, r6
   1dce6:	429a      	cmp	r2, r3
   1dce8:	d316      	bcc.n	1dd18 <nvs_init+0x1b4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1dcea:	6861      	ldr	r1, [r4, #4]
   1dcec:	4620      	mov	r0, r4
   1dcee:	f00e fa3a 	bl	2c166 <nvs_flash_erase_sector>
		if (rc) {
   1dcf2:	2800      	cmp	r0, #0
   1dcf4:	d1c7      	bne.n	1dc86 <nvs_init+0x122>
		fs->ate_wra &= ADDR_SECT_MASK;
   1dcf6:	6862      	ldr	r2, [r4, #4]
   1dcf8:	4948      	ldr	r1, [pc, #288]	; (1de1c <nvs_init+0x2b8>)
   1dcfa:	ea02 0301 	and.w	r3, r2, r1
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   1dcfe:	89a2      	ldrh	r2, [r4, #12]
   1dd00:	4413      	add	r3, r2
   1dd02:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1dd06:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   1dd08:	400b      	ands	r3, r1
   1dd0a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1dd0c:	4620      	mov	r0, r4
   1dd0e:	f7ff fe59 	bl	1d9c4 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1dd12:	2800      	cmp	r0, #0
   1dd14:	d040      	beq.n	1dd98 <nvs_init+0x234>
   1dd16:	e7b6      	b.n	1dc86 <nvs_init+0x122>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1dd18:	2308      	movs	r3, #8
   1dd1a:	aa03      	add	r2, sp, #12
   1dd1c:	4620      	mov	r0, r4
   1dd1e:	f00e f9c5 	bl	2c0ac <nvs_flash_rd>
			if (rc) {
   1dd22:	2800      	cmp	r0, #0
   1dd24:	d1af      	bne.n	1dc86 <nvs_init+0x122>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   1dd26:	a903      	add	r1, sp, #12
   1dd28:	4620      	mov	r0, r4
   1dd2a:	f00e fa66 	bl	2c1fa <nvs_ate_valid>
   1dd2e:	b138      	cbz	r0, 1dd40 <nvs_init+0x1dc>
   1dd30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1dd34:	4543      	cmp	r3, r8
   1dd36:	d103      	bne.n	1dd40 <nvs_init+0x1dc>
			    (gc_done_ate.id == 0xffff) &&
   1dd38:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1dd3c:	2b00      	cmp	r3, #0
   1dd3e:	d043      	beq.n	1ddc8 <nvs_init+0x264>
			addr += ate_size;
   1dd40:	9b00      	ldr	r3, [sp, #0]
   1dd42:	4433      	add	r3, r6
   1dd44:	9300      	str	r3, [sp, #0]
   1dd46:	e7ca      	b.n	1dcde <nvs_init+0x17a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   1dd48:	1a5b      	subs	r3, r3, r1
   1dd4a:	4642      	mov	r2, r8
   1dd4c:	4620      	mov	r0, r4
   1dd4e:	f00e f9e5 	bl	2c11c <nvs_flash_cmp_const>
		if (rc < 0) {
   1dd52:	2800      	cmp	r0, #0
   1dd54:	db97      	blt.n	1dc86 <nvs_init+0x122>
		if (!rc) {
   1dd56:	d008      	beq.n	1dd6a <nvs_init+0x206>
		fs->data_wra += fs->flash_parameters->write_block_size;
   1dd58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1dd5a:	68a3      	ldr	r3, [r4, #8]
   1dd5c:	6812      	ldr	r2, [r2, #0]
   1dd5e:	4413      	add	r3, r2
   1dd60:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   1dd62:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1dd66:	428b      	cmp	r3, r1
   1dd68:	d8ee      	bhi.n	1dd48 <nvs_init+0x1e4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1dd6a:	6861      	ldr	r1, [r4, #4]
   1dd6c:	89a3      	ldrh	r3, [r4, #12]
   1dd6e:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   1dd72:	429a      	cmp	r2, r3
   1dd74:	d1cd      	bne.n	1dd12 <nvs_init+0x1ae>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1dd76:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1de1c <nvs_init+0x2b8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1dd7a:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1dd7c:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1dd80:	4293      	cmp	r3, r2
   1dd82:	d0c6      	beq.n	1dd12 <nvs_init+0x1ae>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1dd84:	4620      	mov	r0, r4
   1dd86:	f00e f9ee 	bl	2c166 <nvs_flash_erase_sector>
		if (rc) {
   1dd8a:	2800      	cmp	r0, #0
   1dd8c:	f47f af7b 	bne.w	1dc86 <nvs_init+0x122>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1dd90:	6863      	ldr	r3, [r4, #4]
   1dd92:	ea03 0308 	and.w	r3, r3, r8
   1dd96:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   1dd98:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1dd9a:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   1dd9c:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1dda0:	42b3      	cmp	r3, r6
   1dda2:	d105      	bne.n	1ddb0 <nvs_init+0x24c>
		rc = nvs_add_gc_done_ate(fs);
   1dda4:	4620      	mov	r0, r4
   1dda6:	f00e fab1 	bl	2c30c <nvs_add_gc_done_ate>
   1ddaa:	e76c      	b.n	1dc86 <nvs_init+0x122>
		rc = -EDEADLK;
   1ddac:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   1ddb0:	4638      	mov	r0, r7
   1ddb2:	f009 ffeb 	bl	27d8c <z_impl_k_mutex_unlock>
	if (rc) {
   1ddb6:	2d00      	cmp	r5, #0
   1ddb8:	f47f aeec 	bne.w	1db94 <nvs_init+0x30>
	fs->ready = true;
   1ddbc:	2301      	movs	r3, #1
   1ddbe:	7423      	strb	r3, [r4, #16]
	return 0;
   1ddc0:	e6e8      	b.n	1db94 <nvs_init+0x30>
		return -ENXIO;
   1ddc2:	f06f 0505 	mvn.w	r5, #5
   1ddc6:	e6e5      	b.n	1db94 <nvs_init+0x30>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1ddc8:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   1ddca:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1ddcc:	0c1b      	lsrs	r3, r3, #16
   1ddce:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   1ddd0:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1ddd2:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   1ddd4:	f00e fa2b 	bl	2c22e <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   1ddd8:	9900      	ldr	r1, [sp, #0]
   1ddda:	4620      	mov	r0, r4
   1dddc:	f00e f9c3 	bl	2c166 <nvs_flash_erase_sector>
			goto end;
   1dde0:	e797      	b.n	1dd12 <nvs_init+0x1ae>
		if (nvs_ate_valid(fs, &last_ate)) {
   1dde2:	a901      	add	r1, sp, #4
   1dde4:	4620      	mov	r0, r4
   1dde6:	f00e fa08 	bl	2c1fa <nvs_ate_valid>
   1ddea:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1ddee:	b180      	cbz	r0, 1de12 <nvs_init+0x2ae>
			fs->data_wra = addr & ADDR_SECT_MASK;
   1ddf0:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1ddf2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1ddf6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1ddfa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1ddfc:	ea03 0309 	and.w	r3, r3, r9
   1de00:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1de02:	4411      	add	r1, r2
   1de04:	f00e f9ef 	bl	2c1e6 <nvs_al_size.isra.0>
   1de08:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1de0a:	4553      	cmp	r3, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1de0c:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1de0e:	f43f af5a 	beq.w	1dcc6 <nvs_init+0x162>
		fs->ate_wra -= ate_size;
   1de12:	ebaa 0306 	sub.w	r3, sl, r6
   1de16:	6063      	str	r3, [r4, #4]
   1de18:	e712      	b.n	1dc40 <nvs_init+0xdc>
   1de1a:	bf00      	nop
   1de1c:	ffff0000 	.word	0xffff0000

0001de20 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   1de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de24:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1de26:	7c03      	ldrb	r3, [r0, #16]
{
   1de28:	b089      	sub	sp, #36	; 0x24
   1de2a:	4604      	mov	r4, r0
   1de2c:	4689      	mov	r9, r1
   1de2e:	4690      	mov	r8, r2
	if (!fs->ready) {
   1de30:	2b00      	cmp	r3, #0
   1de32:	f000 80bf 	beq.w	1dfb4 <nvs_write+0x194>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1de36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1de38:	2108      	movs	r1, #8
   1de3a:	4618      	mov	r0, r3
   1de3c:	f00e f9d3 	bl	2c1e6 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   1de40:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1de42:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   1de44:	4618      	mov	r0, r3
   1de46:	f00e f9ce 	bl	2c1e6 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1de4a:	89a3      	ldrh	r3, [r4, #12]
   1de4c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   1de50:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   1de52:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1de54:	f200 80b1 	bhi.w	1dfba <nvs_write+0x19a>
   1de58:	b116      	cbz	r6, 1de60 <nvs_write+0x40>
	    ((len > 0) && (data == NULL))) {
   1de5a:	2a00      	cmp	r2, #0
   1de5c:	f000 80ad 	beq.w	1dfba <nvs_write+0x19a>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   1de60:	6863      	ldr	r3, [r4, #4]
   1de62:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1de64:	aa04      	add	r2, sp, #16
   1de66:	a903      	add	r1, sp, #12
   1de68:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1de6a:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1de6e:	f00e fa62 	bl	2c336 <nvs_prev_ate>
		if (rc) {
   1de72:	4605      	mov	r5, r0
   1de74:	2800      	cmp	r0, #0
   1de76:	d166      	bne.n	1df46 <nvs_write+0x126>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1de78:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1de7c:	454b      	cmp	r3, r9
   1de7e:	d005      	beq.n	1de8c <nvs_write+0x6c>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   1de80:	6862      	ldr	r2, [r4, #4]
   1de82:	9b03      	ldr	r3, [sp, #12]
   1de84:	429a      	cmp	r2, r3
   1de86:	d1ed      	bne.n	1de64 <nvs_write+0x44>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   1de88:	b9e6      	cbnz	r6, 1dec4 <nvs_write+0xa4>
   1de8a:	e05c      	b.n	1df46 <nvs_write+0x126>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1de8c:	a904      	add	r1, sp, #16
   1de8e:	4620      	mov	r0, r4
   1de90:	f00e f9b3 	bl	2c1fa <nvs_ate_valid>
   1de94:	2800      	cmp	r0, #0
   1de96:	d0f3      	beq.n	1de80 <nvs_write+0x60>
		if (len == 0) {
   1de98:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1de9c:	b186      	cbz	r6, 1dec0 <nvs_write+0xa0>
		} else if (len == wlk_ate.len) {
   1de9e:	429e      	cmp	r6, r3
   1dea0:	d110      	bne.n	1dec4 <nvs_write+0xa4>
		rd_addr += wlk_ate.offset;
   1dea2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   1dea6:	ea4f 411b 	mov.w	r1, fp, lsr #16
   1deaa:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   1deac:	4401      	add	r1, r0
   1deae:	4633      	mov	r3, r6
   1deb0:	4642      	mov	r2, r8
   1deb2:	4620      	mov	r0, r4
   1deb4:	f00e f908 	bl	2c0c8 <nvs_flash_block_cmp>
			if (rc <= 0) {
   1deb8:	2800      	cmp	r0, #0
   1deba:	dc03      	bgt.n	1dec4 <nvs_write+0xa4>
   1debc:	4605      	mov	r5, r0
   1debe:	e042      	b.n	1df46 <nvs_write+0x126>
			if (wlk_ate.len == 0U) {
   1dec0:	2b00      	cmp	r3, #0
   1dec2:	d040      	beq.n	1df46 <nvs_write+0x126>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   1dec4:	2f00      	cmp	r7, #0
   1dec6:	d142      	bne.n	1df4e <nvs_write+0x12e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1dec8:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1decc:	f04f 32ff 	mov.w	r2, #4294967295
   1ded0:	f04f 33ff 	mov.w	r3, #4294967295
   1ded4:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   1ded6:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 1dfc4 <nvs_write+0x1a4>
   1deda:	f009 fed9 	bl	27c90 <z_impl_k_mutex_lock>

	gc_count = 0;
   1dede:	2200      	movs	r2, #0
	while (1) {
		if (gc_count == fs->sector_count) {
   1dee0:	89e3      	ldrh	r3, [r4, #14]
   1dee2:	429a      	cmp	r2, r3
   1dee4:	d063      	beq.n	1dfae <nvs_write+0x18e>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1dee6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1deea:	1878      	adds	r0, r7, r1
   1deec:	4283      	cmp	r3, r0
   1deee:	d331      	bcc.n	1df54 <nvs_write+0x134>
	entry.part = 0xff;
   1def0:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   1def2:	a806      	add	r0, sp, #24
	entry.id = id;
   1def4:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1def8:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   1defc:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   1df00:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   1df04:	f00e f966 	bl	2c1d4 <nvs_ate_crc8_update>
	if (!len) {
   1df08:	b136      	cbz	r6, 1df18 <nvs_write+0xf8>
   1df0a:	68a1      	ldr	r1, [r4, #8]
   1df0c:	4633      	mov	r3, r6
   1df0e:	4642      	mov	r2, r8
   1df10:	4620      	mov	r0, r4
   1df12:	f00e f9b5 	bl	2c280 <nvs_flash_al_wrt.part.0>
   1df16:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   1df18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1df1a:	4631      	mov	r1, r6
   1df1c:	f00e f963 	bl	2c1e6 <nvs_al_size.isra.0>
   1df20:	68a3      	ldr	r3, [r4, #8]
   1df22:	4403      	add	r3, r0
   1df24:	60a3      	str	r3, [r4, #8]
	if (rc) {
   1df26:	2d00      	cmp	r5, #0
   1df28:	d14a      	bne.n	1dfc0 <nvs_write+0x1a0>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1df2a:	a906      	add	r1, sp, #24
   1df2c:	4620      	mov	r0, r4
   1df2e:	f00e f9dc 	bl	2c2ea <nvs_flash_ate_wrt>
	if (rc) {
   1df32:	4605      	mov	r5, r0
   1df34:	2800      	cmp	r0, #0
   1df36:	d143      	bne.n	1dfc0 <nvs_write+0x1a0>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   1df38:	4633      	mov	r3, r6
   1df3a:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   1df3c:	4650      	mov	r0, sl
   1df3e:	f009 ff25 	bl	27d8c <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   1df42:	9b01      	ldr	r3, [sp, #4]
   1df44:	461d      	mov	r5, r3
}
   1df46:	4628      	mov	r0, r5
   1df48:	b009      	add	sp, #36	; 0x24
   1df4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   1df4e:	4457      	add	r7, sl
   1df50:	b2bf      	uxth	r7, r7
   1df52:	e7b9      	b.n	1dec8 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1df54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1df56:	9201      	str	r2, [sp, #4]
   1df58:	2108      	movs	r1, #8
   1df5a:	f00e f944 	bl	2c1e6 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   1df5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1df62:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   1df66:	2100      	movs	r1, #0
   1df68:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1df6c:	1819      	adds	r1, r3, r0
   1df6e:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   1df72:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   1df74:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   1df78:	440b      	add	r3, r1
   1df7a:	1a18      	subs	r0, r3, r0
   1df7c:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   1df7e:	a806      	add	r0, sp, #24
   1df80:	f00e f928 	bl	2c1d4 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   1df84:	a906      	add	r1, sp, #24
   1df86:	4620      	mov	r0, r4
   1df88:	f00e f9af 	bl	2c2ea <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1df8c:	89e0      	ldrh	r0, [r4, #14]
   1df8e:	1d21      	adds	r1, r4, #4
   1df90:	f00e f94d 	bl	2c22e <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1df94:	6863      	ldr	r3, [r4, #4]
   1df96:	ea03 030b 	and.w	r3, r3, fp
   1df9a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1df9c:	4620      	mov	r0, r4
   1df9e:	f7ff fd11 	bl	1d9c4 <nvs_gc>
		if (rc) {
   1dfa2:	4603      	mov	r3, r0
   1dfa4:	2800      	cmp	r0, #0
   1dfa6:	d1c8      	bne.n	1df3a <nvs_write+0x11a>
		gc_count++;
   1dfa8:	9a01      	ldr	r2, [sp, #4]
   1dfaa:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   1dfac:	e798      	b.n	1dee0 <nvs_write+0xc0>
			rc = -ENOSPC;
   1dfae:	f06f 031b 	mvn.w	r3, #27
   1dfb2:	e7c2      	b.n	1df3a <nvs_write+0x11a>
		return -EACCES;
   1dfb4:	f06f 050c 	mvn.w	r5, #12
   1dfb8:	e7c5      	b.n	1df46 <nvs_write+0x126>
		return -EINVAL;
   1dfba:	f06f 0515 	mvn.w	r5, #21
   1dfbe:	e7c2      	b.n	1df46 <nvs_write+0x126>
			if (rc) {
   1dfc0:	462b      	mov	r3, r5
   1dfc2:	e7ba      	b.n	1df3a <nvs_write+0x11a>
   1dfc4:	ffff0000 	.word	0xffff0000

0001dfc8 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   1dfc8:	4b0c      	ldr	r3, [pc, #48]	; (1dffc <flash_area_open+0x34>)
   1dfca:	681b      	ldr	r3, [r3, #0]
{
   1dfcc:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   1dfce:	b173      	cbz	r3, 1dfee <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   1dfd0:	4a0b      	ldr	r2, [pc, #44]	; (1e000 <flash_area_open+0x38>)
   1dfd2:	6815      	ldr	r5, [r2, #0]
   1dfd4:	2200      	movs	r2, #0
   1dfd6:	42aa      	cmp	r2, r5
   1dfd8:	db02      	blt.n	1dfe0 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   1dfda:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   1dfde:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   1dfe0:	461c      	mov	r4, r3
   1dfe2:	f813 6b10 	ldrb.w	r6, [r3], #16
   1dfe6:	4286      	cmp	r6, r0
   1dfe8:	d004      	beq.n	1dff4 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   1dfea:	3201      	adds	r2, #1
   1dfec:	e7f3      	b.n	1dfd6 <flash_area_open+0xe>
		return -EACCES;
   1dfee:	f06f 000c 	mvn.w	r0, #12
   1dff2:	e7f4      	b.n	1dfde <flash_area_open+0x16>
	*fap = area;
   1dff4:	600c      	str	r4, [r1, #0]
	return 0;
   1dff6:	2000      	movs	r0, #0
   1dff8:	e7f1      	b.n	1dfde <flash_area_open+0x16>
   1dffa:	bf00      	nop
   1dffc:	20000574 	.word	0x20000574
   1e000:	00032804 	.word	0x00032804

0001e004 <stream_flash_init>:
}

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   1e004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e008:	460d      	mov	r5, r1
   1e00a:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   1e00e:	4691      	mov	r9, r2
   1e010:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   1e012:	4604      	mov	r4, r0
   1e014:	b920      	cbnz	r0, 1e020 <stream_flash_init+0x1c>
		return -EFAULT;
   1e016:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   1e01a:	b003      	add	sp, #12
   1e01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   1e020:	2900      	cmp	r1, #0
   1e022:	d0f8      	beq.n	1e016 <stream_flash_init+0x12>
   1e024:	2a00      	cmp	r2, #0
   1e026:	d0f6      	beq.n	1e016 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   1e028:	9300      	str	r3, [sp, #0]
   1e02a:	2300      	movs	r3, #0
   1e02c:	9301      	str	r3, [sp, #4]
		/* coverity[OVERRUN] */
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
   1e02e:	4608      	mov	r0, r1
   1e030:	f00e faf6 	bl	2c620 <z_impl_flash_get_write_block_size>
	if (buf_len % flash_get_write_block_size(fdev)) {
   1e034:	fbb7 f3f0 	udiv	r3, r7, r0
   1e038:	fb03 7010 	mls	r0, r3, r0, r7
   1e03c:	2800      	cmp	r0, #0
   1e03e:	d1ea      	bne.n	1e016 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   1e040:	4912      	ldr	r1, [pc, #72]	; (1e08c <stream_flash_init+0x88>)
   1e042:	466a      	mov	r2, sp
   1e044:	4628      	mov	r0, r5
   1e046:	f012 fba5 	bl	30794 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   1e04a:	9b01      	ldr	r3, [sp, #4]
   1e04c:	2b00      	cmp	r3, #0
   1e04e:	d0e2      	beq.n	1e016 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   1e050:	eb06 0208 	add.w	r2, r6, r8
   1e054:	4293      	cmp	r3, r2
   1e056:	d3de      	bcc.n	1e016 <stream_flash_init+0x12>
   1e058:	4628      	mov	r0, r5
   1e05a:	f00e fae1 	bl	2c620 <z_impl_flash_get_write_block_size>
	    offset % flash_get_write_block_size(fdev)) {
   1e05e:	fbb8 f3f0 	udiv	r3, r8, r0
   1e062:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   1e066:	2800      	cmp	r0, #0
   1e068:	d1d5      	bne.n	1e016 <stream_flash_init+0x12>
	ctx->buf_len = buf_len;
   1e06a:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   1e06e:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   1e070:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   1e072:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   1e074:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   1e078:	b916      	cbnz	r6, 1e080 <stream_flash_init+0x7c>
   1e07a:	9e01      	ldr	r6, [sp, #4]
   1e07c:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   1e080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   1e082:	61a6      	str	r6, [r4, #24]
	ctx->callback = cb;
   1e084:	61e3      	str	r3, [r4, #28]
	return 0;
   1e086:	2000      	movs	r0, #0
   1e088:	e7c7      	b.n	1e01a <stream_flash_init+0x16>
   1e08a:	bf00      	nop
   1e08c:	0002c62d 	.word	0x0002c62d

0001e090 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1e090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e094:	4605      	mov	r5, r0
   1e096:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e09a:	f3ef 8611 	mrs	r6, BASEPRI
   1e09e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e0a2:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1e0a6:	4b10      	ldr	r3, [pc, #64]	; (1e0e8 <pm_state_notify+0x58>)
   1e0a8:	681c      	ldr	r4, [r3, #0]
   1e0aa:	2c00      	cmp	r4, #0
   1e0ac:	bf38      	it	cc
   1e0ae:	2400      	movcc	r4, #0
   1e0b0:	b19c      	cbz	r4, 1e0da <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   1e0b2:	4f0e      	ldr	r7, [pc, #56]	; (1e0ec <pm_state_notify+0x5c>)
   1e0b4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1e0f0 <pm_state_notify+0x60>
   1e0b8:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   1e0bc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1e0c0:	2d00      	cmp	r5, #0
   1e0c2:	bf08      	it	eq
   1e0c4:	4613      	moveq	r3, r2
		if (callback) {
   1e0c6:	b12b      	cbz	r3, 1e0d4 <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
   1e0c8:	f898 2014 	ldrb.w	r2, [r8, #20]
   1e0cc:	fb09 f202 	mul.w	r2, r9, r2
   1e0d0:	5cb8      	ldrb	r0, [r7, r2]
   1e0d2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e0d4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1e0d6:	2c00      	cmp	r4, #0
   1e0d8:	d1f0      	bne.n	1e0bc <pm_state_notify+0x2c>
	__asm__ volatile(
   1e0da:	f386 8811 	msr	BASEPRI, r6
   1e0de:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1e0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e0e6:	bf00      	nop
   1e0e8:	20002338 	.word	0x20002338
   1e0ec:	20002344 	.word	0x20002344
   1e0f0:	20002ccc 	.word	0x20002ccc

0001e0f4 <pm_resume_devices>:
{
   1e0f4:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
   1e0f6:	4d08      	ldr	r5, [pc, #32]	; (1e118 <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
   1e0f8:	4e08      	ldr	r6, [pc, #32]	; (1e11c <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
   1e0fa:	682c      	ldr	r4, [r5, #0]
   1e0fc:	3c01      	subs	r4, #1
   1e0fe:	2c00      	cmp	r4, #0
   1e100:	da02      	bge.n	1e108 <pm_resume_devices+0x14>
	num_susp = 0;
   1e102:	2300      	movs	r3, #0
   1e104:	602b      	str	r3, [r5, #0]
}
   1e106:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
   1e108:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1e10c:	2101      	movs	r1, #1
   1e10e:	f00e fb68 	bl	2c7e2 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
   1e112:	3c01      	subs	r4, #1
   1e114:	e7f3      	b.n	1e0fe <pm_resume_devices+0xa>
   1e116:	bf00      	nop
   1e118:	20002334 	.word	0x20002334
   1e11c:	20000af8 	.word	0x20000af8

0001e120 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e120:	f000 031f 	and.w	r3, r0, #31
   1e124:	2201      	movs	r2, #1
   1e126:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e128:	4b0a      	ldr	r3, [pc, #40]	; (1e154 <atomic_test_and_set_bit.constprop.0+0x34>)
   1e12a:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e12e:	0940      	lsrs	r0, r0, #5
   1e130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1e134:	e850 3f00 	ldrex	r3, [r0]
   1e138:	ea43 0102 	orr.w	r1, r3, r2
   1e13c:	e840 1c00 	strex	ip, r1, [r0]
   1e140:	f1bc 0f00 	cmp.w	ip, #0
   1e144:	d1f6      	bne.n	1e134 <atomic_test_and_set_bit.constprop.0+0x14>
   1e146:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   1e14a:	421a      	tst	r2, r3
}
   1e14c:	bf14      	ite	ne
   1e14e:	2001      	movne	r0, #1
   1e150:	2000      	moveq	r0, #0
   1e152:	4770      	bx	lr
   1e154:	20002350 	.word	0x20002350

0001e158 <pm_system_resume>:

void pm_system_resume(void)
{
   1e158:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   1e15a:	4b1d      	ldr	r3, [pc, #116]	; (1e1d0 <pm_system_resume+0x78>)
   1e15c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e15e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e162:	f005 031f 	and.w	r3, r5, #31
   1e166:	2201      	movs	r2, #1
   1e168:	409a      	lsls	r2, r3
   1e16a:	4b1a      	ldr	r3, [pc, #104]	; (1e1d4 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e16c:	0969      	lsrs	r1, r5, #5
{
   1e16e:	b085      	sub	sp, #20
   1e170:	43d0      	mvns	r0, r2
   1e172:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1e176:	e853 1f00 	ldrex	r1, [r3]
   1e17a:	ea01 0400 	and.w	r4, r1, r0
   1e17e:	e843 4c00 	strex	ip, r4, [r3]
   1e182:	f1bc 0f00 	cmp.w	ip, #0
   1e186:	d1f6      	bne.n	1e176 <pm_system_resume+0x1e>
   1e188:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1e18c:	4211      	tst	r1, r2
   1e18e:	d017      	beq.n	1e1c0 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   1e190:	4c11      	ldr	r4, [pc, #68]	; (1e1d8 <pm_system_resume+0x80>)
   1e192:	220c      	movs	r2, #12
   1e194:	fb02 4205 	mla	r2, r2, r5, r4
   1e198:	ca07      	ldmia	r2, {r0, r1, r2}
   1e19a:	ab01      	add	r3, sp, #4
   1e19c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1e1a0:	4a0e      	ldr	r2, [pc, #56]	; (1e1dc <pm_system_resume+0x84>)
   1e1a2:	b17a      	cbz	r2, 1e1c4 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   1e1a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1e1a8:	f00e fde8 	bl	2cd7c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   1e1ac:	2000      	movs	r0, #0
   1e1ae:	f7ff ff6f 	bl	1e090 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1e1b2:	230c      	movs	r3, #12
   1e1b4:	436b      	muls	r3, r5
   1e1b6:	2200      	movs	r2, #0
   1e1b8:	18e1      	adds	r1, r4, r3
   1e1ba:	50e2      	str	r2, [r4, r3]
   1e1bc:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   1e1c0:	b005      	add	sp, #20
   1e1c2:	bd30      	pop	{r4, r5, pc}
   1e1c4:	f382 8811 	msr	BASEPRI, r2
   1e1c8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1e1cc:	e7ee      	b.n	1e1ac <pm_system_resume+0x54>
   1e1ce:	bf00      	nop
   1e1d0:	20002ccc 	.word	0x20002ccc
   1e1d4:	20002340 	.word	0x20002340
   1e1d8:	20002344 	.word	0x20002344
   1e1dc:	0002cd7d 	.word	0x0002cd7d

0001e1e0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   1e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   1e1e4:	4b6d      	ldr	r3, [pc, #436]	; (1e39c <pm_system_suspend+0x1bc>)
   1e1e6:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 1e3bc <pm_system_suspend+0x1dc>
   1e1ea:	7d1c      	ldrb	r4, [r3, #20]
{
   1e1ec:	b089      	sub	sp, #36	; 0x24
   1e1ee:	4606      	mov	r6, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   1e1f0:	4620      	mov	r0, r4
   1e1f2:	f7ff ff95 	bl	1e120 <atomic_test_and_set_bit.constprop.0>
   1e1f6:	b960      	cbnz	r0, 1e212 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   1e1f8:	466f      	mov	r7, sp
   1e1fa:	4632      	mov	r2, r6
   1e1fc:	4621      	mov	r1, r4
   1e1fe:	4638      	mov	r0, r7
   1e200:	f00e fb1f 	bl	2c842 <pm_policy_next_state>
   1e204:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1e208:	250c      	movs	r5, #12
   1e20a:	fb05 9504 	mla	r5, r5, r4, r9
   1e20e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   1e212:	230c      	movs	r3, #12
   1e214:	4363      	muls	r3, r4
   1e216:	eb09 0203 	add.w	r2, r9, r3
   1e21a:	f819 5003 	ldrb.w	r5, [r9, r3]
   1e21e:	2d00      	cmp	r5, #0
   1e220:	f000 80a3 	beq.w	1e36a <pm_system_suspend+0x18a>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   1e224:	1c73      	adds	r3, r6, #1
   1e226:	d00e      	beq.n	1e246 <pm_system_suspend+0x66>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1e228:	6897      	ldr	r7, [r2, #8]
   1e22a:	485d      	ldr	r0, [pc, #372]	; (1e3a0 <pm_system_suspend+0x1c0>)
   1e22c:	4a5d      	ldr	r2, [pc, #372]	; (1e3a4 <pm_system_suspend+0x1c4>)
   1e22e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1e232:	2100      	movs	r1, #0
   1e234:	2300      	movs	r3, #0
   1e236:	fbe5 0107 	umlal	r0, r1, r5, r7
   1e23a:	f7ee fc9f 	bl	cb7c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1e23e:	2101      	movs	r1, #1
   1e240:	1a30      	subs	r0, r6, r0
   1e242:	f013 fd2d 	bl	31ca0 <z_set_timeout_expiry>
			     z_power_states[id].exit_latency_us),
				     true);
	}

#if CONFIG_PM_DEVICE
	if ((z_power_states[id].state != PM_STATE_RUNTIME_IDLE) &&
   1e246:	230c      	movs	r3, #12
   1e248:	4363      	muls	r3, r4
   1e24a:	4f57      	ldr	r7, [pc, #348]	; (1e3a8 <pm_system_suspend+0x1c8>)
   1e24c:	f819 3003 	ldrb.w	r3, [r9, r3]
   1e250:	2b01      	cmp	r3, #1
   1e252:	f10d 0814 	add.w	r8, sp, #20
   1e256:	d01d      	beq.n	1e294 <pm_system_suspend+0xb4>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e258:	f3bf 8f5b 	dmb	ish
   1e25c:	e857 3f00 	ldrex	r3, [r7]
   1e260:	1e5a      	subs	r2, r3, #1
   1e262:	e847 2100 	strex	r1, r2, [r7]
   1e266:	2900      	cmp	r1, #0
   1e268:	d1f8      	bne.n	1e25c <pm_system_suspend+0x7c>
   1e26a:	f3bf 8f5b 	dmb	ish
   1e26e:	2b01      	cmp	r3, #1
   1e270:	d110      	bne.n	1e294 <pm_system_suspend+0xb4>
	devc = z_device_get_all_static(&devs);
   1e272:	4640      	mov	r0, r8
   1e274:	f009 fad8 	bl	27828 <z_device_get_all_static>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   1e278:	261c      	movs	r6, #28
	num_susp = 0;
   1e27a:	4b4c      	ldr	r3, [pc, #304]	; (1e3ac <pm_system_suspend+0x1cc>)
		__pm_device_slots_start[num_susp] = dev;
   1e27c:	f8df b140 	ldr.w	fp, [pc, #320]	; 1e3c0 <pm_system_suspend+0x1e0>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   1e280:	4346      	muls	r6, r0
   1e282:	9805      	ldr	r0, [sp, #20]
	num_susp = 0;
   1e284:	2200      	movs	r2, #0
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   1e286:	3e1c      	subs	r6, #28
	num_susp = 0;
   1e288:	601a      	str	r2, [r3, #0]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   1e28a:	4406      	add	r6, r0
   1e28c:	469a      	mov	sl, r3
   1e28e:	9b05      	ldr	r3, [sp, #20]
   1e290:	429e      	cmp	r6, r3
   1e292:	d236      	bcs.n	1e302 <pm_system_suspend+0x122>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1e294:	f00a f88a 	bl	283ac <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1e298:	2001      	movs	r0, #1
   1e29a:	f7ff fef9 	bl	1e090 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e29e:	f3bf 8f5b 	dmb	ish
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e2a2:	f004 021f 	and.w	r2, r4, #31
   1e2a6:	2101      	movs	r1, #1
   1e2a8:	4091      	lsls	r1, r2
   1e2aa:	4a41      	ldr	r2, [pc, #260]	; (1e3b0 <pm_system_suspend+0x1d0>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e2ac:	0963      	lsrs	r3, r4, #5
   1e2ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1e2b2:	e853 2f00 	ldrex	r2, [r3]
   1e2b6:	430a      	orrs	r2, r1
   1e2b8:	e843 2000 	strex	r0, r2, [r3]
   1e2bc:	2800      	cmp	r0, #0
   1e2be:	d1f8      	bne.n	1e2b2 <pm_system_suspend+0xd2>
   1e2c0:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   1e2c4:	230c      	movs	r3, #12
   1e2c6:	fb03 9904 	mla	r9, r3, r4, r9
   1e2ca:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   1e2ce:	4b39      	ldr	r3, [pc, #228]	; (1e3b4 <pm_system_suspend+0x1d4>)
   1e2d0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
   1e2d4:	b10b      	cbz	r3, 1e2da <pm_system_suspend+0xfa>
		pm_power_state_set(info);
   1e2d6:	f00e fd3e 	bl	2cd56 <pm_power_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e2da:	f3bf 8f5b 	dmb	ish
   1e2de:	e857 3f00 	ldrex	r3, [r7]
   1e2e2:	1c5a      	adds	r2, r3, #1
   1e2e4:	e847 2100 	strex	r1, r2, [r7]
   1e2e8:	2900      	cmp	r1, #0
   1e2ea:	d1f8      	bne.n	1e2de <pm_system_suspend+0xfe>
   1e2ec:	f3bf 8f5b 	dmb	ish
	pm_stats_stop();

	/* Wake up sequence starts here */
#if CONFIG_PM_DEVICE
	if (atomic_add(&z_cpus_active, 1) == 0) {
   1e2f0:	b90b      	cbnz	r3, 1e2f6 <pm_system_suspend+0x116>
		pm_resume_devices();
   1e2f2:	f7ff feff 	bl	1e0f4 <pm_resume_devices>
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   1e2f6:	f7ff ff2f 	bl	1e158 <pm_system_resume>
	bool ret = true;
   1e2fa:	2501      	movs	r5, #1
	k_sched_unlock();
   1e2fc:	f00a fa30 	bl	28760 <k_sched_unlock>
   1e300:	e033      	b.n	1e36a <pm_system_suspend+0x18a>
		if (pm_device_is_busy(dev) || pm_device_state_is_locked(dev)
   1e302:	4630      	mov	r0, r6
   1e304:	f00e fa4f 	bl	2c7a6 <pm_device_is_busy>
   1e308:	b9e0      	cbnz	r0, 1e344 <pm_system_suspend+0x164>
   1e30a:	4630      	mov	r0, r6
   1e30c:	f00e fa5f 	bl	2c7ce <pm_device_state_is_locked>
   1e310:	b9c0      	cbnz	r0, 1e344 <pm_system_suspend+0x164>
		    || pm_device_wakeup_is_enabled(dev) ||
   1e312:	4630      	mov	r0, r6
   1e314:	f00e fa51 	bl	2c7ba <pm_device_wakeup_is_enabled>
   1e318:	4605      	mov	r5, r0
   1e31a:	b998      	cbnz	r0, 1e344 <pm_system_suspend+0x164>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   1e31c:	4601      	mov	r1, r0
   1e31e:	4630      	mov	r0, r6
   1e320:	f00e fa5f 	bl	2c7e2 <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   1e324:	f110 0f86 	cmn.w	r0, #134	; 0x86
   1e328:	d00c      	beq.n	1e344 <pm_system_suspend+0x164>
   1e32a:	f020 0320 	bic.w	r3, r0, #32
   1e32e:	3378      	adds	r3, #120	; 0x78
   1e330:	d008      	beq.n	1e344 <pm_system_suspend+0x164>
		} else if (ret < 0) {
   1e332:	2800      	cmp	r0, #0
   1e334:	db08      	blt.n	1e348 <pm_system_suspend+0x168>
		__pm_device_slots_start[num_susp] = dev;
   1e336:	f8da 3000 	ldr.w	r3, [sl]
   1e33a:	f84b 6023 	str.w	r6, [fp, r3, lsl #2]
		num_susp++;
   1e33e:	3301      	adds	r3, #1
   1e340:	f8ca 3000 	str.w	r3, [sl]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   1e344:	3e1c      	subs	r6, #28
   1e346:	e7a2      	b.n	1e28e <pm_system_suspend+0xae>
			pm_resume_devices();
   1e348:	f7ff fed4 	bl	1e0f4 <pm_resume_devices>
			z_power_states[id].state = PM_STATE_ACTIVE;
   1e34c:	230c      	movs	r3, #12
   1e34e:	4363      	muls	r3, r4
   1e350:	f809 5003 	strb.w	r5, [r9, r3]
   1e354:	f3bf 8f5b 	dmb	ish
   1e358:	e857 3f00 	ldrex	r3, [r7]
   1e35c:	3301      	adds	r3, #1
   1e35e:	e847 3200 	strex	r2, r3, [r7]
   1e362:	2a00      	cmp	r2, #0
   1e364:	d1f8      	bne.n	1e358 <pm_system_suspend+0x178>
   1e366:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e36a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e36e:	0962      	lsrs	r2, r4, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e370:	2301      	movs	r3, #1
   1e372:	f004 041f 	and.w	r4, r4, #31
   1e376:	fa03 f404 	lsl.w	r4, r3, r4
   1e37a:	4b0f      	ldr	r3, [pc, #60]	; (1e3b8 <pm_system_suspend+0x1d8>)
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e37c:	43e4      	mvns	r4, r4
   1e37e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1e382:	e853 2f00 	ldrex	r2, [r3]
   1e386:	4022      	ands	r2, r4
   1e388:	e843 2100 	strex	r1, r2, [r3]
   1e38c:	2900      	cmp	r1, #0
   1e38e:	d1f8      	bne.n	1e382 <pm_system_suspend+0x1a2>
   1e390:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   1e394:	4628      	mov	r0, r5
   1e396:	b009      	add	sp, #36	; 0x24
   1e398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e39c:	20002ccc 	.word	0x20002ccc
   1e3a0:	000f423f 	.word	0x000f423f
   1e3a4:	000f4240 	.word	0x000f4240
   1e3a8:	20000570 	.word	0x20000570
   1e3ac:	20002334 	.word	0x20002334
   1e3b0:	20002340 	.word	0x20002340
   1e3b4:	0002cd57 	.word	0x0002cd57
   1e3b8:	20002350 	.word	0x20002350
   1e3bc:	20002344 	.word	0x20002344
   1e3c0:	20000af8 	.word	0x20000af8

0001e3c4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1e3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1e3c6:	4e26      	ldr	r6, [pc, #152]	; (1e460 <tc_aes128_set_encrypt_key+0x9c>)
{
   1e3c8:	4607      	mov	r7, r0
   1e3ca:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1e3cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1e3ce:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   1e3d0:	ad01      	add	r5, sp, #4
   1e3d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e3d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e3d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e3d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1e3dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   1e3e0:	4638      	mov	r0, r7
   1e3e2:	2f00      	cmp	r7, #0
   1e3e4:	d038      	beq.n	1e458 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1e3e6:	2c00      	cmp	r4, #0
   1e3e8:	d038      	beq.n	1e45c <tc_aes128_set_encrypt_key+0x98>
   1e3ea:	1f38      	subs	r0, r7, #4
   1e3ec:	4621      	mov	r1, r4
   1e3ee:	4602      	mov	r2, r0
   1e3f0:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1e3f2:	784b      	ldrb	r3, [r1, #1]
   1e3f4:	780d      	ldrb	r5, [r1, #0]
   1e3f6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1e3f8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1e3fc:	78cd      	ldrb	r5, [r1, #3]
   1e3fe:	432b      	orrs	r3, r5
   1e400:	788d      	ldrb	r5, [r1, #2]
   1e402:	3104      	adds	r1, #4
   1e404:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1e408:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1e40a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1e40e:	d1f0      	bne.n	1e3f2 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1e410:	4c14      	ldr	r4, [pc, #80]	; (1e464 <tc_aes128_set_encrypt_key+0xa0>)
   1e412:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   1e414:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1e416:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1e418:	d116      	bne.n	1e448 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1e41a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1e41e:	5ca5      	ldrb	r5, [r4, r2]
   1e420:	0e1a      	lsrs	r2, r3, #24
   1e422:	5ca2      	ldrb	r2, [r4, r2]
   1e424:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1e428:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1e42c:	b2db      	uxtb	r3, r3
   1e42e:	5d65      	ldrb	r5, [r4, r5]
   1e430:	5ce3      	ldrb	r3, [r4, r3]
   1e432:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1e436:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1e43a:	ad0c      	add	r5, sp, #48	; 0x30
   1e43c:	f021 0303 	bic.w	r3, r1, #3
   1e440:	442b      	add	r3, r5
   1e442:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1e446:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1e448:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1e44c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1e44e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   1e450:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1e452:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1e454:	d1de      	bne.n	1e414 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1e456:	2001      	movs	r0, #1
}
   1e458:	b00d      	add	sp, #52	; 0x34
   1e45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1e45c:	4620      	mov	r0, r4
   1e45e:	e7fb      	b.n	1e458 <tc_aes128_set_encrypt_key+0x94>
   1e460:	00032504 	.word	0x00032504
   1e464:	00032fb9 	.word	0x00032fb9

0001e468 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1e468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e46c:	4615      	mov	r5, r2
   1e46e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1e470:	4606      	mov	r6, r0
   1e472:	2800      	cmp	r0, #0
   1e474:	d058      	beq.n	1e528 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1e476:	2900      	cmp	r1, #0
   1e478:	d059      	beq.n	1e52e <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1e47a:	2a00      	cmp	r2, #0
   1e47c:	d059      	beq.n	1e532 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1e47e:	2310      	movs	r3, #16
   1e480:	460a      	mov	r2, r1
   1e482:	4668      	mov	r0, sp
   1e484:	4619      	mov	r1, r3
   1e486:	f00e f9e1 	bl	2c84c <_copy>
	add_round_key(state, s->words);
   1e48a:	4629      	mov	r1, r5
   1e48c:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   1e48e:	4c2a      	ldr	r4, [pc, #168]	; (1e538 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   1e490:	f00e f9f4 	bl	2c87c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1e494:	f105 0710 	add.w	r7, r5, #16
   1e498:	46a1      	mov	r9, r4
   1e49a:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   1e49c:	46e8      	mov	r8, sp
{
   1e49e:	466a      	mov	r2, sp
   1e4a0:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   1e4a2:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1e4a4:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1e4a6:	5c61      	ldrb	r1, [r4, r1]
   1e4a8:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   1e4ac:	d1f9      	bne.n	1e4a2 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   1e4ae:	4668      	mov	r0, sp
   1e4b0:	f00e fa29 	bl	2c906 <shift_rows>
	mult_row_column(t, s);
   1e4b4:	4669      	mov	r1, sp
   1e4b6:	a804      	add	r0, sp, #16
   1e4b8:	f00e fa5e 	bl	2c978 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1e4bc:	a901      	add	r1, sp, #4
   1e4be:	a805      	add	r0, sp, #20
   1e4c0:	f00e fa5a 	bl	2c978 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1e4c4:	a902      	add	r1, sp, #8
   1e4c6:	a806      	add	r0, sp, #24
   1e4c8:	f00e fa56 	bl	2c978 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1e4cc:	a903      	add	r1, sp, #12
   1e4ce:	a807      	add	r0, sp, #28
   1e4d0:	f00e fa52 	bl	2c978 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1e4d4:	2310      	movs	r3, #16
   1e4d6:	4619      	mov	r1, r3
   1e4d8:	eb0d 0203 	add.w	r2, sp, r3
   1e4dc:	4668      	mov	r0, sp
   1e4de:	f00e f9b5 	bl	2c84c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1e4e2:	4639      	mov	r1, r7
   1e4e4:	4668      	mov	r0, sp
   1e4e6:	3710      	adds	r7, #16
   1e4e8:	f00e f9c8 	bl	2c87c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1e4ec:	42af      	cmp	r7, r5
   1e4ee:	d1d5      	bne.n	1e49c <tc_aes_encrypt+0x34>
   1e4f0:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1e4f2:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   1e4f6:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   1e4f8:	f819 3003 	ldrb.w	r3, [r9, r3]
   1e4fc:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   1e500:	d1f7      	bne.n	1e4f2 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1e502:	4668      	mov	r0, sp
   1e504:	f00e f9ff 	bl	2c906 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1e508:	4629      	mov	r1, r5
   1e50a:	4668      	mov	r0, sp
   1e50c:	f00e f9b6 	bl	2c87c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1e510:	2310      	movs	r3, #16
   1e512:	4619      	mov	r1, r3
   1e514:	466a      	mov	r2, sp
   1e516:	4630      	mov	r0, r6
   1e518:	f00e f998 	bl	2c84c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1e51c:	4668      	mov	r0, sp
   1e51e:	2210      	movs	r2, #16
   1e520:	4621      	mov	r1, r4
   1e522:	f00e f9a0 	bl	2c866 <_set>

	return TC_CRYPTO_SUCCESS;
   1e526:	2001      	movs	r0, #1
}
   1e528:	b009      	add	sp, #36	; 0x24
   1e52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1e52e:	4608      	mov	r0, r1
   1e530:	e7fa      	b.n	1e528 <tc_aes_encrypt+0xc0>
   1e532:	4610      	mov	r0, r2
   1e534:	e7f8      	b.n	1e528 <tc_aes_encrypt+0xc0>
   1e536:	bf00      	nop
   1e538:	00032fb9 	.word	0x00032fb9

0001e53c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   1e53c:	4801      	ldr	r0, [pc, #4]	; (1e544 <nrf_cc3xx_platform_abort_init+0x8>)
   1e53e:	f00a bd6d 	b.w	2901c <nrf_cc3xx_platform_set_abort>
   1e542:	bf00      	nop
   1e544:	00032808 	.word	0x00032808

0001e548 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1e548:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1e54a:	b1d0      	cbz	r0, 1e582 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   1e54c:	6843      	ldr	r3, [r0, #4]
   1e54e:	2b04      	cmp	r3, #4
   1e550:	d111      	bne.n	1e576 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e552:	2200      	movs	r2, #0
   1e554:	6803      	ldr	r3, [r0, #0]
   1e556:	f3bf 8f5b 	dmb	ish
   1e55a:	e853 1f00 	ldrex	r1, [r3]
   1e55e:	2901      	cmp	r1, #1
   1e560:	d103      	bne.n	1e56a <mutex_unlock_platform+0x22>
   1e562:	e843 2000 	strex	r0, r2, [r3]
   1e566:	2800      	cmp	r0, #0
   1e568:	d1f7      	bne.n	1e55a <mutex_unlock_platform+0x12>
   1e56a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1e56e:	4807      	ldr	r0, [pc, #28]	; (1e58c <mutex_unlock_platform+0x44>)
   1e570:	bf08      	it	eq
   1e572:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   1e574:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1e576:	b13b      	cbz	r3, 1e588 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1e578:	6800      	ldr	r0, [r0, #0]
   1e57a:	f009 fc07 	bl	27d8c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1e57e:	2000      	movs	r0, #0
   1e580:	e7f8      	b.n	1e574 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1e582:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1e586:	e7f5      	b.n	1e574 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1e588:	4801      	ldr	r0, [pc, #4]	; (1e590 <mutex_unlock_platform+0x48>)
   1e58a:	e7f3      	b.n	1e574 <mutex_unlock_platform+0x2c>
   1e58c:	ffff8fe9 	.word	0xffff8fe9
   1e590:	ffff8fea 	.word	0xffff8fea

0001e594 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1e594:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1e596:	4604      	mov	r4, r0
   1e598:	b918      	cbnz	r0, 1e5a2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   1e59a:	4b0d      	ldr	r3, [pc, #52]	; (1e5d0 <mutex_free_platform+0x3c>)
   1e59c:	480d      	ldr	r0, [pc, #52]	; (1e5d4 <mutex_free_platform+0x40>)
   1e59e:	685b      	ldr	r3, [r3, #4]
   1e5a0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1e5a2:	6861      	ldr	r1, [r4, #4]
   1e5a4:	2908      	cmp	r1, #8
   1e5a6:	d00d      	beq.n	1e5c4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1e5a8:	f031 0304 	bics.w	r3, r1, #4
   1e5ac:	d00a      	beq.n	1e5c4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1e5ae:	f011 0102 	ands.w	r1, r1, #2
   1e5b2:	d008      	beq.n	1e5c6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   1e5b4:	4808      	ldr	r0, [pc, #32]	; (1e5d8 <mutex_free_platform+0x44>)
   1e5b6:	4621      	mov	r1, r4
   1e5b8:	f013 f83c 	bl	31634 <k_mem_slab_free>
        mutex->mutex = NULL;
   1e5bc:	2300      	movs	r3, #0
   1e5be:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   1e5c0:	2300      	movs	r3, #0
   1e5c2:	6063      	str	r3, [r4, #4]
}
   1e5c4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1e5c6:	6820      	ldr	r0, [r4, #0]
   1e5c8:	2214      	movs	r2, #20
   1e5ca:	f00e fb81 	bl	2ccd0 <memset>
   1e5ce:	e7f7      	b.n	1e5c0 <mutex_free_platform+0x2c>
   1e5d0:	200008dc 	.word	0x200008dc
   1e5d4:	000330b9 	.word	0x000330b9
   1e5d8:	20002354 	.word	0x20002354

0001e5dc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1e5dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1e5de:	4604      	mov	r4, r0
   1e5e0:	b918      	cbnz	r0, 1e5ea <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1e5e2:	4b16      	ldr	r3, [pc, #88]	; (1e63c <mutex_init_platform+0x60>)
   1e5e4:	4816      	ldr	r0, [pc, #88]	; (1e640 <mutex_init_platform+0x64>)
   1e5e6:	685b      	ldr	r3, [r3, #4]
   1e5e8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1e5ea:	6863      	ldr	r3, [r4, #4]
   1e5ec:	2b04      	cmp	r3, #4
   1e5ee:	d023      	beq.n	1e638 <mutex_init_platform+0x5c>
   1e5f0:	2b08      	cmp	r3, #8
   1e5f2:	d021      	beq.n	1e638 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1e5f4:	b9cb      	cbnz	r3, 1e62a <mutex_init_platform+0x4e>
   1e5f6:	6823      	ldr	r3, [r4, #0]
   1e5f8:	b9bb      	cbnz	r3, 1e62a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   1e5fa:	4812      	ldr	r0, [pc, #72]	; (1e644 <mutex_init_platform+0x68>)
   1e5fc:	f04f 32ff 	mov.w	r2, #4294967295
   1e600:	f04f 33ff 	mov.w	r3, #4294967295
   1e604:	4621      	mov	r1, r4
   1e606:	f009 fa41 	bl	27a8c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1e60a:	b908      	cbnz	r0, 1e610 <mutex_init_platform+0x34>
   1e60c:	6823      	ldr	r3, [r4, #0]
   1e60e:	b91b      	cbnz	r3, 1e618 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   1e610:	4b0a      	ldr	r3, [pc, #40]	; (1e63c <mutex_init_platform+0x60>)
   1e612:	480d      	ldr	r0, [pc, #52]	; (1e648 <mutex_init_platform+0x6c>)
   1e614:	685b      	ldr	r3, [r3, #4]
   1e616:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1e618:	6820      	ldr	r0, [r4, #0]
   1e61a:	2214      	movs	r2, #20
   1e61c:	2100      	movs	r1, #0
   1e61e:	f00e fb57 	bl	2ccd0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1e622:	6863      	ldr	r3, [r4, #4]
   1e624:	f043 0302 	orr.w	r3, r3, #2
   1e628:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   1e62a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1e62c:	f013 f83d 	bl	316aa <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   1e630:	6863      	ldr	r3, [r4, #4]
   1e632:	f043 0301 	orr.w	r3, r3, #1
   1e636:	6063      	str	r3, [r4, #4]
}
   1e638:	bd10      	pop	{r4, pc}
   1e63a:	bf00      	nop
   1e63c:	200008dc 	.word	0x200008dc
   1e640:	000330b9 	.word	0x000330b9
   1e644:	20002354 	.word	0x20002354
   1e648:	000330df 	.word	0x000330df

0001e64c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1e64c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   1e64e:	b308      	cbz	r0, 1e694 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   1e650:	6843      	ldr	r3, [r0, #4]
   1e652:	2b04      	cmp	r3, #4
   1e654:	d110      	bne.n	1e678 <mutex_lock_platform+0x2c>
   1e656:	2201      	movs	r2, #1
   1e658:	6803      	ldr	r3, [r0, #0]
   1e65a:	f3bf 8f5b 	dmb	ish
   1e65e:	e853 1f00 	ldrex	r1, [r3]
   1e662:	2900      	cmp	r1, #0
   1e664:	d103      	bne.n	1e66e <mutex_lock_platform+0x22>
   1e666:	e843 2000 	strex	r0, r2, [r3]
   1e66a:	2800      	cmp	r0, #0
   1e66c:	d1f7      	bne.n	1e65e <mutex_lock_platform+0x12>
   1e66e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1e672:	d10b      	bne.n	1e68c <mutex_lock_platform+0x40>
   1e674:	2000      	movs	r0, #0
}
   1e676:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1e678:	b153      	cbz	r3, 1e690 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1e67a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1e67c:	f04f 32ff 	mov.w	r2, #4294967295
   1e680:	f04f 33ff 	mov.w	r3, #4294967295
   1e684:	f009 fb04 	bl	27c90 <z_impl_k_mutex_lock>
        if (ret == 0) {
   1e688:	2800      	cmp	r0, #0
   1e68a:	d0f3      	beq.n	1e674 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1e68c:	4803      	ldr	r0, [pc, #12]	; (1e69c <mutex_lock_platform+0x50>)
   1e68e:	e7f2      	b.n	1e676 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1e690:	4803      	ldr	r0, [pc, #12]	; (1e6a0 <mutex_lock_platform+0x54>)
   1e692:	e7f0      	b.n	1e676 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1e694:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1e698:	e7ed      	b.n	1e676 <mutex_lock_platform+0x2a>
   1e69a:	bf00      	nop
   1e69c:	ffff8fe9 	.word	0xffff8fe9
   1e6a0:	ffff8fea 	.word	0xffff8fea

0001e6a4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1e6a4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1e6a6:	4906      	ldr	r1, [pc, #24]	; (1e6c0 <nrf_cc3xx_platform_mutex_init+0x1c>)
   1e6a8:	4806      	ldr	r0, [pc, #24]	; (1e6c4 <nrf_cc3xx_platform_mutex_init+0x20>)
   1e6aa:	2340      	movs	r3, #64	; 0x40
   1e6ac:	2214      	movs	r2, #20
   1e6ae:	f012 ffa6 	bl	315fe <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1e6b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1e6b6:	4904      	ldr	r1, [pc, #16]	; (1e6c8 <nrf_cc3xx_platform_mutex_init+0x24>)
   1e6b8:	4804      	ldr	r0, [pc, #16]	; (1e6cc <nrf_cc3xx_platform_mutex_init+0x28>)
   1e6ba:	f00a bd67 	b.w	2918c <nrf_cc3xx_platform_set_mutexes>
   1e6be:	bf00      	nop
   1e6c0:	20002370 	.word	0x20002370
   1e6c4:	20002354 	.word	0x20002354
   1e6c8:	00032820 	.word	0x00032820
   1e6cc:	00032810 	.word	0x00032810

0001e6d0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1e6d0:	4901      	ldr	r1, [pc, #4]	; (1e6d8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1e6d2:	2210      	movs	r2, #16
	str	r2, [r1]
   1e6d4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1e6d6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1e6d8:	e000ed10 	.word	0xe000ed10

0001e6dc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1e6dc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1e6de:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1e6e0:	f380 8811 	msr	BASEPRI, r0
	isb
   1e6e4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1e6e8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1e6ec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1e6ee:	b662      	cpsie	i
	isb
   1e6f0:	f3bf 8f6f 	isb	sy

	bx	lr
   1e6f4:	4770      	bx	lr
   1e6f6:	bf00      	nop

0001e6f8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1e6f8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1e6fa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1e6fc:	f381 8811 	msr	BASEPRI, r1

	wfe
   1e700:	bf20      	wfe

	msr	BASEPRI, r0
   1e702:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1e706:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1e708:	4770      	bx	lr
   1e70a:	bf00      	nop

0001e70c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1e70c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1e70e:	2b00      	cmp	r3, #0
   1e710:	db08      	blt.n	1e724 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e712:	2201      	movs	r2, #1
   1e714:	f000 001f 	and.w	r0, r0, #31
   1e718:	fa02 f000 	lsl.w	r0, r2, r0
   1e71c:	095b      	lsrs	r3, r3, #5
   1e71e:	4a02      	ldr	r2, [pc, #8]	; (1e728 <arch_irq_enable+0x1c>)
   1e720:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1e724:	4770      	bx	lr
   1e726:	bf00      	nop
   1e728:	e000e100 	.word	0xe000e100

0001e72c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1e72c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1e72e:	2b00      	cmp	r3, #0
   1e730:	db0d      	blt.n	1e74e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e732:	2201      	movs	r2, #1
   1e734:	095b      	lsrs	r3, r3, #5
   1e736:	f000 001f 	and.w	r0, r0, #31
   1e73a:	fa02 f000 	lsl.w	r0, r2, r0
   1e73e:	3320      	adds	r3, #32
   1e740:	4a03      	ldr	r2, [pc, #12]	; (1e750 <arch_irq_disable+0x24>)
   1e742:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1e746:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e74a:	f3bf 8f6f 	isb	sy
}
   1e74e:	4770      	bx	lr
   1e750:	e000e100 	.word	0xe000e100

0001e754 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1e754:	4b05      	ldr	r3, [pc, #20]	; (1e76c <arch_irq_is_enabled+0x18>)
   1e756:	0942      	lsrs	r2, r0, #5
   1e758:	f000 001f 	and.w	r0, r0, #31
   1e75c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1e760:	2301      	movs	r3, #1
   1e762:	fa03 f000 	lsl.w	r0, r3, r0
}
   1e766:	4010      	ands	r0, r2
   1e768:	4770      	bx	lr
   1e76a:	bf00      	nop
   1e76c:	e000e100 	.word	0xe000e100

0001e770 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1e770:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1e772:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   1e774:	bf54      	ite	pl
   1e776:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1e778:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1e77a:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e77c:	bfac      	ite	ge
   1e77e:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e782:	4a07      	ldrlt	r2, [pc, #28]	; (1e7a0 <z_arm_irq_priority_set+0x30>)
   1e784:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e788:	bfac      	ite	ge
   1e78a:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e78e:	f000 000f 	andlt.w	r0, r0, #15
   1e792:	b2db      	uxtb	r3, r3
   1e794:	bfb4      	ite	lt
   1e796:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e798:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   1e79c:	4770      	bx	lr
   1e79e:	bf00      	nop
   1e7a0:	e000ed14 	.word	0xe000ed14

0001e7a4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1e7a4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1e7a6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1e7a8:	4b04      	ldr	r3, [pc, #16]	; (1e7bc <_arch_isr_direct_pm+0x18>)
   1e7aa:	699a      	ldr	r2, [r3, #24]
   1e7ac:	b11a      	cbz	r2, 1e7b6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1e7ae:	2200      	movs	r2, #0
   1e7b0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1e7b2:	f012 ff73 	bl	3169c <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1e7b6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1e7b8:	bd08      	pop	{r3, pc}
   1e7ba:	bf00      	nop
   1e7bc:	20002ccc 	.word	0x20002ccc

0001e7c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1e7c0:	bf30      	wfi
    b z_SysNmiOnReset
   1e7c2:	f7ff bffd 	b.w	1e7c0 <z_SysNmiOnReset>
   1e7c6:	bf00      	nop

0001e7c8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1e7c8:	4a0b      	ldr	r2, [pc, #44]	; (1e7f8 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1e7ca:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1e7cc:	4b0b      	ldr	r3, [pc, #44]	; (1e7fc <z_arm_prep_c+0x34>)
   1e7ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1e7d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1e7d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e7d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1e7dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1e7e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1e7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1e7e8:	f009 f89e 	bl	27928 <z_bss_zero>
	z_data_copy();
   1e7ec:	f00a f902 	bl	289f4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1e7f0:	f000 f9d0 	bl	1eb94 <z_arm_interrupt_init>
	z_cstart();
   1e7f4:	f009 f8a2 	bl	2793c <z_cstart>
   1e7f8:	0000c200 	.word	0x0000c200
   1e7fc:	e000ed00 	.word	0xe000ed00

0001e800 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1e800:	4a09      	ldr	r2, [pc, #36]	; (1e828 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1e802:	490a      	ldr	r1, [pc, #40]	; (1e82c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1e804:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1e806:	6809      	ldr	r1, [r1, #0]
   1e808:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1e80a:	4909      	ldr	r1, [pc, #36]	; (1e830 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1e80c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1e80e:	684b      	ldr	r3, [r1, #4]
   1e810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1e814:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   1e816:	2300      	movs	r3, #0
   1e818:	f383 8811 	msr	BASEPRI, r3
   1e81c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1e820:	6893      	ldr	r3, [r2, #8]
}
   1e822:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1e824:	4770      	bx	lr
   1e826:	bf00      	nop
   1e828:	20002ccc 	.word	0x20002ccc
   1e82c:	00032d78 	.word	0x00032d78
   1e830:	e000ed00 	.word	0xe000ed00

0001e834 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1e834:	4912      	ldr	r1, [pc, #72]	; (1e880 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1e836:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1e838:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1e83c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1e83e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1e842:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1e846:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1e848:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1e84c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1e850:	4f0c      	ldr	r7, [pc, #48]	; (1e884 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1e852:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1e856:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1e858:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1e85a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1e85c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1e85e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1e860:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1e862:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1e866:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1e868:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1e86a:	f000 fa29 	bl	1ecc0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1e86e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1e872:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1e876:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1e87a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1e87e:	4770      	bx	lr
    ldr r1, =_kernel
   1e880:	20002ccc 	.word	0x20002ccc
    ldr v4, =_SCS_ICSR
   1e884:	e000ed04 	.word	0xe000ed04

0001e888 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1e888:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1e88c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1e88e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1e892:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1e896:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1e898:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1e89c:	2902      	cmp	r1, #2
    beq _oops
   1e89e:	d0ff      	beq.n	1e8a0 <_oops>

0001e8a0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1e8a0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1e8a2:	f00e f9ae 	bl	2cc02 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1e8a6:	bd01      	pop	{r0, pc}

0001e8a8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1e8a8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1e8ac:	9b00      	ldr	r3, [sp, #0]
   1e8ae:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1e8b2:	490a      	ldr	r1, [pc, #40]	; (1e8dc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   1e8b4:	9b01      	ldr	r3, [sp, #4]
   1e8b6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1e8ba:	9b02      	ldr	r3, [sp, #8]
   1e8bc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   1e8c0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1e8c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1e8c8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1e8cc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1e8d0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1e8d2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1e8d4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1e8d6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1e8d8:	4770      	bx	lr
   1e8da:	bf00      	nop
   1e8dc:	0002bc0d 	.word	0x0002bc0d

0001e8e0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1e8e0:	4a0b      	ldr	r2, [pc, #44]	; (1e910 <z_check_thread_stack_fail+0x30>)
{
   1e8e2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   1e8e4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1e8e6:	b190      	cbz	r0, 1e90e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1e8e8:	f113 0f16 	cmn.w	r3, #22
   1e8ec:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1e8ee:	d005      	beq.n	1e8fc <z_check_thread_stack_fail+0x1c>
   1e8f0:	f1a0 0220 	sub.w	r2, r0, #32
   1e8f4:	429a      	cmp	r2, r3
   1e8f6:	d806      	bhi.n	1e906 <z_check_thread_stack_fail+0x26>
   1e8f8:	4283      	cmp	r3, r0
   1e8fa:	d204      	bcs.n	1e906 <z_check_thread_stack_fail+0x26>
   1e8fc:	4281      	cmp	r1, r0
   1e8fe:	bf2c      	ite	cs
   1e900:	2100      	movcs	r1, #0
   1e902:	2101      	movcc	r1, #1
   1e904:	e000      	b.n	1e908 <z_check_thread_stack_fail+0x28>
   1e906:	2100      	movs	r1, #0
   1e908:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1e90a:	bf08      	it	eq
   1e90c:	2000      	moveq	r0, #0
}
   1e90e:	4770      	bx	lr
   1e910:	20002ccc 	.word	0x20002ccc

0001e914 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1e914:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1e916:	4b09      	ldr	r3, [pc, #36]	; (1e93c <arch_switch_to_main_thread+0x28>)
   1e918:	6098      	str	r0, [r3, #8]
{
   1e91a:	460d      	mov	r5, r1
   1e91c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1e91e:	f000 f9cf 	bl	1ecc0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1e922:	4620      	mov	r0, r4
   1e924:	f385 8809 	msr	PSP, r5
   1e928:	2100      	movs	r1, #0
   1e92a:	b663      	cpsie	if
   1e92c:	f381 8811 	msr	BASEPRI, r1
   1e930:	f3bf 8f6f 	isb	sy
   1e934:	2200      	movs	r2, #0
   1e936:	2300      	movs	r3, #0
   1e938:	f00d f968 	bl	2bc0c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1e93c:	20002ccc 	.word	0x20002ccc

0001e940 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1e940:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1e942:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1e944:	4a0b      	ldr	r2, [pc, #44]	; (1e974 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1e946:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1e948:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1e94a:	bf1e      	ittt	ne
	movne	r1, #0
   1e94c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1e94e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1e950:	f012 fea4 	blne	3169c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1e954:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1e956:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1e95a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1e95e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1e962:	4905      	ldr	r1, [pc, #20]	; (1e978 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1e964:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1e966:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1e968:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1e96a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1e96e:	4903      	ldr	r1, [pc, #12]	; (1e97c <_isr_wrapper+0x3c>)
	bx r1
   1e970:	4708      	bx	r1
   1e972:	0000      	.short	0x0000
	ldr r2, =_kernel
   1e974:	20002ccc 	.word	0x20002ccc
	ldr r1, =_sw_isr_table
   1e978:	000322b0 	.word	0x000322b0
	ldr r1, =z_arm_int_exit
   1e97c:	0001e981 	.word	0x0001e981

0001e980 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1e980:	4b04      	ldr	r3, [pc, #16]	; (1e994 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1e982:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1e984:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1e986:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1e988:	d003      	beq.n	1e992 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1e98a:	4903      	ldr	r1, [pc, #12]	; (1e998 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1e98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1e990:	600a      	str	r2, [r1, #0]

0001e992 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1e992:	4770      	bx	lr
	ldr r3, =_kernel
   1e994:	20002ccc 	.word	0x20002ccc
	ldr r1, =_SCS_ICSR
   1e998:	e000ed04 	.word	0xe000ed04

0001e99c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   1e99c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1e99e:	4b19      	ldr	r3, [pc, #100]	; (1ea04 <mem_manage_fault+0x68>)
{
   1e9a0:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1e9a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1e9a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1e9a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   1e9a8:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1e9aa:	0790      	lsls	r0, r2, #30
   1e9ac:	d519      	bpl.n	1e9e2 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1e9ae:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1e9b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e9b2:	0612      	lsls	r2, r2, #24
   1e9b4:	d515      	bpl.n	1e9e2 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   1e9b6:	b119      	cbz	r1, 1e9c0 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1e9b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e9ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1e9be:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1e9c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1e9c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1e9c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e9c6:	06d1      	lsls	r1, r2, #27
   1e9c8:	d40e      	bmi.n	1e9e8 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1e9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1e9cc:	079a      	lsls	r2, r3, #30
   1e9ce:	d40b      	bmi.n	1e9e8 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1e9d0:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1e9d2:	4a0c      	ldr	r2, [pc, #48]	; (1ea04 <mem_manage_fault+0x68>)
   1e9d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e9d6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1e9da:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1e9dc:	2300      	movs	r3, #0
   1e9de:	7023      	strb	r3, [r4, #0]

	return reason;
}
   1e9e0:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   1e9e2:	f06f 0015 	mvn.w	r0, #21
   1e9e6:	e7eb      	b.n	1e9c0 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1e9e8:	4b06      	ldr	r3, [pc, #24]	; (1ea04 <mem_manage_fault+0x68>)
   1e9ea:	685b      	ldr	r3, [r3, #4]
   1e9ec:	051b      	lsls	r3, r3, #20
   1e9ee:	d5ef      	bpl.n	1e9d0 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1e9f0:	4629      	mov	r1, r5
   1e9f2:	f7ff ff75 	bl	1e8e0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1e9f6:	2800      	cmp	r0, #0
   1e9f8:	d0ea      	beq.n	1e9d0 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1e9fa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1e9fe:	2002      	movs	r0, #2
   1ea00:	e7e7      	b.n	1e9d2 <mem_manage_fault+0x36>
   1ea02:	bf00      	nop
   1ea04:	e000ed00 	.word	0xe000ed00

0001ea08 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1ea08:	4b0d      	ldr	r3, [pc, #52]	; (1ea40 <bus_fault.isra.0+0x38>)
   1ea0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1ea0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1ea0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ea10:	0592      	lsls	r2, r2, #22
   1ea12:	d508      	bpl.n	1ea26 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1ea14:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1ea16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ea18:	0412      	lsls	r2, r2, #16
   1ea1a:	d504      	bpl.n	1ea26 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   1ea1c:	b118      	cbz	r0, 1ea26 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1ea1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ea20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1ea24:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1ea26:	4b06      	ldr	r3, [pc, #24]	; (1ea40 <bus_fault.isra.0+0x38>)
   1ea28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1ea2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ea2c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1ea2e:	bf58      	it	pl
   1ea30:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1ea32:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   1ea34:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1ea36:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   1ea3a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1ea3c:	7008      	strb	r0, [r1, #0]

	return reason;
}
   1ea3e:	4770      	bx	lr
   1ea40:	e000ed00 	.word	0xe000ed00

0001ea44 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1ea44:	4b07      	ldr	r3, [pc, #28]	; (1ea64 <usage_fault.isra.0+0x20>)
   1ea46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1ea48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1ea4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1ea4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1ea4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1ea50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1ea52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ea54:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   1ea58:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   1ea5c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   1ea5e:	2000      	movs	r0, #0
   1ea60:	4770      	bx	lr
   1ea62:	bf00      	nop
   1ea64:	e000ed00 	.word	0xe000ed00

0001ea68 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1ea68:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1ea6a:	4b3e      	ldr	r3, [pc, #248]	; (1eb64 <z_arm_fault+0xfc>)
   1ea6c:	685b      	ldr	r3, [r3, #4]
{
   1ea6e:	b08a      	sub	sp, #40	; 0x28
   1ea70:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1ea72:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1ea76:	2600      	movs	r6, #0
   1ea78:	f386 8811 	msr	BASEPRI, r6
   1ea7c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1ea80:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   1ea84:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   1ea88:	d111      	bne.n	1eaae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1ea8a:	f002 010c 	and.w	r1, r2, #12
   1ea8e:	2908      	cmp	r1, #8
   1ea90:	d00d      	beq.n	1eaae <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1ea92:	0712      	lsls	r2, r2, #28
   1ea94:	d401      	bmi.n	1ea9a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   1ea96:	4605      	mov	r5, r0
			*nested_exc = true;
   1ea98:	2601      	movs	r6, #1
	*recoverable = false;
   1ea9a:	2200      	movs	r2, #0
   1ea9c:	3b03      	subs	r3, #3
   1ea9e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   1eaa2:	2b03      	cmp	r3, #3
   1eaa4:	d857      	bhi.n	1eb56 <z_arm_fault+0xee>
   1eaa6:	e8df f003 	tbb	[pc, r3]
   1eaaa:	4e04      	.short	0x4e04
   1eaac:	4b52      	.short	0x4b52
		return NULL;
   1eaae:	4635      	mov	r5, r6
   1eab0:	e7f3      	b.n	1ea9a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1eab2:	4b2c      	ldr	r3, [pc, #176]	; (1eb64 <z_arm_fault+0xfc>)
   1eab4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1eab6:	f014 0402 	ands.w	r4, r4, #2
   1eaba:	d14c      	bne.n	1eb56 <z_arm_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1eabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eabe:	2a00      	cmp	r2, #0
   1eac0:	db18      	blt.n	1eaf4 <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1eac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eac4:	005b      	lsls	r3, r3, #1
   1eac6:	d515      	bpl.n	1eaf4 <z_arm_fault+0x8c>
	uint16_t fault_insn = *(ret_addr - 1);
   1eac8:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1eaca:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   1eace:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1ead2:	429a      	cmp	r2, r3
   1ead4:	d00d      	beq.n	1eaf2 <z_arm_fault+0x8a>
		} else if (SCB_MMFSR != 0) {
   1ead6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1eada:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   1eade:	781b      	ldrb	r3, [r3, #0]
   1eae0:	b303      	cbz	r3, 1eb24 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
   1eae2:	f10d 0207 	add.w	r2, sp, #7
   1eae6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1eae8:	4628      	mov	r0, r5
   1eaea:	f7ff ff57 	bl	1e99c <mem_manage_fault>
   1eaee:	4604      	mov	r4, r0
		break;
   1eaf0:	e000      	b.n	1eaf4 <z_arm_fault+0x8c>
			reason = esf->basic.r0;
   1eaf2:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1eaf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1eaf8:	b993      	cbnz	r3, 1eb20 <z_arm_fault+0xb8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1eafa:	2220      	movs	r2, #32
   1eafc:	4629      	mov	r1, r5
   1eafe:	a802      	add	r0, sp, #8
   1eb00:	f00e f8db 	bl	2ccba <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1eb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1eb06:	b346      	cbz	r6, 1eb5a <z_arm_fault+0xf2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1eb08:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1eb0c:	b922      	cbnz	r2, 1eb18 <z_arm_fault+0xb0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1eb0e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1eb12:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1eb16:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1eb18:	a902      	add	r1, sp, #8
   1eb1a:	4620      	mov	r0, r4
   1eb1c:	f00e f86f 	bl	2cbfe <z_arm_fatal_error>
}
   1eb20:	b00a      	add	sp, #40	; 0x28
   1eb22:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   1eb24:	4b10      	ldr	r3, [pc, #64]	; (1eb68 <z_arm_fault+0x100>)
   1eb26:	781b      	ldrb	r3, [r3, #0]
   1eb28:	b12b      	cbz	r3, 1eb36 <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
   1eb2a:	f10d 0107 	add.w	r1, sp, #7
   1eb2e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1eb30:	f7ff ff6a 	bl	1ea08 <bus_fault.isra.0>
   1eb34:	e7db      	b.n	1eaee <z_arm_fault+0x86>
		} else if (SCB_UFSR != 0) {
   1eb36:	4b0d      	ldr	r3, [pc, #52]	; (1eb6c <z_arm_fault+0x104>)
   1eb38:	881b      	ldrh	r3, [r3, #0]
   1eb3a:	b29b      	uxth	r3, r3
   1eb3c:	2b00      	cmp	r3, #0
   1eb3e:	d0d9      	beq.n	1eaf4 <z_arm_fault+0x8c>
		reason = usage_fault(esf);
   1eb40:	f7ff ff80 	bl	1ea44 <usage_fault.isra.0>
   1eb44:	e7d3      	b.n	1eaee <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
   1eb46:	f10d 0207 	add.w	r2, sp, #7
   1eb4a:	2100      	movs	r1, #0
   1eb4c:	e7cc      	b.n	1eae8 <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
   1eb4e:	f10d 0107 	add.w	r1, sp, #7
   1eb52:	2000      	movs	r0, #0
   1eb54:	e7ec      	b.n	1eb30 <z_arm_fault+0xc8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1eb56:	2400      	movs	r4, #0
   1eb58:	e7cc      	b.n	1eaf4 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1eb5a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1eb5e:	f023 0301 	bic.w	r3, r3, #1
   1eb62:	e7d8      	b.n	1eb16 <z_arm_fault+0xae>
   1eb64:	e000ed00 	.word	0xe000ed00
   1eb68:	e000ed29 	.word	0xe000ed29
   1eb6c:	e000ed2a 	.word	0xe000ed2a

0001eb70 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1eb70:	4a02      	ldr	r2, [pc, #8]	; (1eb7c <z_arm_fault_init+0xc>)
   1eb72:	6953      	ldr	r3, [r2, #20]
   1eb74:	f043 0310 	orr.w	r3, r3, #16
   1eb78:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1eb7a:	4770      	bx	lr
   1eb7c:	e000ed00 	.word	0xe000ed00

0001eb80 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1eb80:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1eb84:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1eb88:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1eb8a:	4672      	mov	r2, lr
	bl z_arm_fault
   1eb8c:	f7ff ff6c 	bl	1ea68 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1eb90:	bd01      	pop	{r0, pc}
   1eb92:	bf00      	nop

0001eb94 <z_arm_interrupt_init>:
   1eb94:	4804      	ldr	r0, [pc, #16]	; (1eba8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1eb96:	2300      	movs	r3, #0
   1eb98:	2140      	movs	r1, #64	; 0x40
   1eb9a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1eb9c:	3301      	adds	r3, #1
   1eb9e:	2b30      	cmp	r3, #48	; 0x30
   1eba0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1eba4:	d1f9      	bne.n	1eb9a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1eba6:	4770      	bx	lr
   1eba8:	e000e100 	.word	0xe000e100

0001ebac <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1ebac:	2000      	movs	r0, #0
    msr CONTROL, r0
   1ebae:	f380 8814 	msr	CONTROL, r0
    isb
   1ebb2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1ebb6:	f013 fa5b 	bl	32070 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1ebba:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1ebbc:	490d      	ldr	r1, [pc, #52]	; (1ebf4 <__start+0x48>)
    str r0, [r1]
   1ebbe:	6008      	str	r0, [r1, #0]
    dsb
   1ebc0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1ebc4:	480c      	ldr	r0, [pc, #48]	; (1ebf8 <__start+0x4c>)
    msr msp, r0
   1ebc6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1ebca:	f000 f829 	bl	1ec20 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1ebce:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1ebd0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1ebd4:	4809      	ldr	r0, [pc, #36]	; (1ebfc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1ebd6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   1ebda:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1ebdc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1ebe0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1ebe4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1ebe6:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1ebe8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1ebec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1ebf0:	f7ff fdea 	bl	1e7c8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1ebf4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1ebf8:	20006360 	.word	0x20006360
    ldr r0, =z_interrupt_stacks
   1ebfc:	200064e0 	.word	0x200064e0

0001ec00 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1ec00:	4a06      	ldr	r2, [pc, #24]	; (1ec1c <z_arm_clear_arm_mpu_config+0x1c>)
   1ec02:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   1ec04:	2300      	movs	r3, #0
	int num_regions =
   1ec06:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   1ec0a:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1ec0c:	428b      	cmp	r3, r1
   1ec0e:	d100      	bne.n	1ec12 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   1ec10:	4770      	bx	lr
  MPU->RNR = rnr;
   1ec12:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   1ec14:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   1ec16:	3301      	adds	r3, #1
   1ec18:	e7f8      	b.n	1ec0c <z_arm_clear_arm_mpu_config+0xc>
   1ec1a:	bf00      	nop
   1ec1c:	e000ed90 	.word	0xe000ed90

0001ec20 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1ec20:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1ec22:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1ec24:	2300      	movs	r3, #0
   1ec26:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1ec2a:	f7ff ffe9 	bl	1ec00 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1ec2e:	4b14      	ldr	r3, [pc, #80]	; (1ec80 <z_arm_init_arch_hw_at_boot+0x60>)
   1ec30:	f04f 32ff 	mov.w	r2, #4294967295
   1ec34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   1ec38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1ec3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1ec40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   1ec44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1ec48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   1ec4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   1ec50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1ec54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1ec58:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1ec5c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   1ec60:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   1ec64:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   1ec68:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   1ec6c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   1ec70:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   1ec74:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1ec76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ec7a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1ec7e:	bd08      	pop	{r3, pc}
   1ec80:	e000e100 	.word	0xe000e100

0001ec84 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1ec84:	4b06      	ldr	r3, [pc, #24]	; (1eca0 <z_impl_k_thread_abort+0x1c>)
   1ec86:	689b      	ldr	r3, [r3, #8]
   1ec88:	4283      	cmp	r3, r0
   1ec8a:	d107      	bne.n	1ec9c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ec8c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1ec90:	b123      	cbz	r3, 1ec9c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1ec92:	4a04      	ldr	r2, [pc, #16]	; (1eca4 <z_impl_k_thread_abort+0x20>)
   1ec94:	6853      	ldr	r3, [r2, #4]
   1ec96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1ec9a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   1ec9c:	f009 be46 	b.w	2892c <z_thread_abort>
   1eca0:	20002ccc 	.word	0x20002ccc
   1eca4:	e000ed00 	.word	0xe000ed00

0001eca8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1eca8:	4b02      	ldr	r3, [pc, #8]	; (1ecb4 <z_arm_configure_static_mpu_regions+0xc>)
   1ecaa:	4a03      	ldr	r2, [pc, #12]	; (1ecb8 <z_arm_configure_static_mpu_regions+0x10>)
   1ecac:	4803      	ldr	r0, [pc, #12]	; (1ecbc <z_arm_configure_static_mpu_regions+0x14>)
   1ecae:	2101      	movs	r1, #1
   1ecb0:	f000 b868 	b.w	1ed84 <arm_core_mpu_configure_static_mpu_regions>
   1ecb4:	20040000 	.word	0x20040000
   1ecb8:	20000000 	.word	0x20000000
   1ecbc:	00032834 	.word	0x00032834

0001ecc0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1ecc0:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1ecc2:	4b05      	ldr	r3, [pc, #20]	; (1ecd8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1ecc4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   1ecc6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1ecc8:	4a04      	ldr	r2, [pc, #16]	; (1ecdc <z_arm_configure_dynamic_mpu_regions+0x1c>)
   1ecca:	2120      	movs	r1, #32
   1eccc:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1ecd0:	4618      	mov	r0, r3
   1ecd2:	2101      	movs	r1, #1
   1ecd4:	f000 b860 	b.w	1ed98 <arm_core_mpu_configure_dynamic_mpu_regions>
   1ecd8:	20002870 	.word	0x20002870
   1ecdc:	150b0000 	.word	0x150b0000

0001ece0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   1ece0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1ece2:	4f1e      	ldr	r7, [pc, #120]	; (1ed5c <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1ece4:	2600      	movs	r6, #0
   1ece6:	428e      	cmp	r6, r1
   1ece8:	db01      	blt.n	1ecee <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1ecea:	4610      	mov	r0, r2
   1ecec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   1ecee:	6844      	ldr	r4, [r0, #4]
   1ecf0:	b384      	cbz	r4, 1ed54 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   1ecf2:	b153      	cbz	r3, 1ed0a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1ecf4:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1ecf8:	ea14 0f0c 	tst.w	r4, ip
   1ecfc:	d118      	bne.n	1ed30 <mpu_configure_regions+0x50>
		&&
   1ecfe:	2c1f      	cmp	r4, #31
   1ed00:	d916      	bls.n	1ed30 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   1ed02:	6805      	ldr	r5, [r0, #0]
		&&
   1ed04:	ea1c 0f05 	tst.w	ip, r5
   1ed08:	d112      	bne.n	1ed30 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   1ed0a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   1ed0c:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1ed0e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1ed12:	b2d2      	uxtb	r2, r2
   1ed14:	d90f      	bls.n	1ed36 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   1ed16:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   1ed1a:	d80e      	bhi.n	1ed3a <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1ed1c:	3c01      	subs	r4, #1
   1ed1e:	fab4 f484 	clz	r4, r4
   1ed22:	f1c4 041f 	rsb	r4, r4, #31
   1ed26:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   1ed28:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1ed2a:	ea4c 0404 	orr.w	r4, ip, r4
   1ed2e:	d906      	bls.n	1ed3e <mpu_configure_regions+0x5e>
			return -EINVAL;
   1ed30:	f06f 0215 	mvn.w	r2, #21
   1ed34:	e7d9      	b.n	1ecea <mpu_configure_regions+0xa>
		return REGION_32B;
   1ed36:	2408      	movs	r4, #8
   1ed38:	e7f6      	b.n	1ed28 <mpu_configure_regions+0x48>
		return REGION_4G;
   1ed3a:	243e      	movs	r4, #62	; 0x3e
   1ed3c:	e7f4      	b.n	1ed28 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1ed3e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   1ed42:	4315      	orrs	r5, r2
   1ed44:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1ed48:	f044 0401 	orr.w	r4, r4, #1
   1ed4c:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1ed4e:	60fd      	str	r5, [r7, #12]
		reg_index++;
   1ed50:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1ed52:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   1ed54:	3601      	adds	r6, #1
   1ed56:	300c      	adds	r0, #12
   1ed58:	e7c5      	b.n	1ece6 <mpu_configure_regions+0x6>
   1ed5a:	bf00      	nop
   1ed5c:	e000ed90 	.word	0xe000ed90

0001ed60 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1ed60:	4b03      	ldr	r3, [pc, #12]	; (1ed70 <arm_core_mpu_enable+0x10>)
   1ed62:	2205      	movs	r2, #5
   1ed64:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1ed66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ed6a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1ed6e:	4770      	bx	lr
   1ed70:	e000ed90 	.word	0xe000ed90

0001ed74 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1ed74:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1ed78:	4b01      	ldr	r3, [pc, #4]	; (1ed80 <arm_core_mpu_disable+0xc>)
   1ed7a:	2200      	movs	r2, #0
   1ed7c:	605a      	str	r2, [r3, #4]
}
   1ed7e:	4770      	bx	lr
   1ed80:	e000ed90 	.word	0xe000ed90

0001ed84 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1ed84:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1ed86:	4c03      	ldr	r4, [pc, #12]	; (1ed94 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1ed88:	2301      	movs	r3, #1
   1ed8a:	7822      	ldrb	r2, [r4, #0]
   1ed8c:	f7ff ffa8 	bl	1ece0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1ed90:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1ed92:	bd10      	pop	{r4, pc}
   1ed94:	200036f8 	.word	0x200036f8

0001ed98 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   1ed98:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1ed9a:	4a08      	ldr	r2, [pc, #32]	; (1edbc <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   1ed9c:	2300      	movs	r3, #0
   1ed9e:	7812      	ldrb	r2, [r2, #0]
   1eda0:	f7ff ff9e 	bl	1ece0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1eda4:	f110 0f16 	cmn.w	r0, #22
   1eda8:	d003      	beq.n	1edb2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   1edaa:	4b05      	ldr	r3, [pc, #20]	; (1edc0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   1edac:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1edae:	2807      	cmp	r0, #7
   1edb0:	dd00      	ble.n	1edb4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   1edb2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   1edb4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   1edb6:	611a      	str	r2, [r3, #16]
   1edb8:	3001      	adds	r0, #1
   1edba:	e7f8      	b.n	1edae <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   1edbc:	200036f8 	.word	0x200036f8
   1edc0:	e000ed90 	.word	0xe000ed90

0001edc4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1edc4:	4913      	ldr	r1, [pc, #76]	; (1ee14 <z_arm_mpu_init+0x50>)
   1edc6:	6808      	ldr	r0, [r1, #0]
   1edc8:	2808      	cmp	r0, #8
{
   1edca:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   1edcc:	d81e      	bhi.n	1ee0c <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1edce:	f7ff ffd1 	bl	1ed74 <arm_core_mpu_disable>
   1edd2:	4c11      	ldr	r4, [pc, #68]	; (1ee18 <z_arm_mpu_init+0x54>)
   1edd4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1edd6:	2200      	movs	r2, #0
   1edd8:	4290      	cmp	r0, r2
   1edda:	f101 010c 	add.w	r1, r1, #12
   1edde:	d105      	bne.n	1edec <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1ede0:	4b0e      	ldr	r3, [pc, #56]	; (1ee1c <z_arm_mpu_init+0x58>)
   1ede2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   1ede4:	f7ff ffbc 	bl	1ed60 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1ede8:	2000      	movs	r0, #0
}
   1edea:	bd10      	pop	{r4, pc}
   1edec:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1edee:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   1edf2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1edf6:	4313      	orrs	r3, r2
   1edf8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1edfc:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1edfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1ee02:	f043 0301 	orr.w	r3, r3, #1
   1ee06:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1ee08:	3201      	adds	r2, #1
   1ee0a:	e7e5      	b.n	1edd8 <z_arm_mpu_init+0x14>
		return -1;
   1ee0c:	f04f 30ff 	mov.w	r0, #4294967295
   1ee10:	e7eb      	b.n	1edea <z_arm_mpu_init+0x26>
   1ee12:	bf00      	nop
   1ee14:	00032840 	.word	0x00032840
   1ee18:	e000ed90 	.word	0xe000ed90
   1ee1c:	200036f8 	.word	0x200036f8

0001ee20 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1ee20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ee24:	f3ef 8111 	mrs	r1, BASEPRI
   1ee28:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee2c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1ee30:	4a0f      	ldr	r2, [pc, #60]	; (1ee70 <nordicsemi_nrf52_init+0x50>)
   1ee32:	2301      	movs	r3, #1
   1ee34:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1ee38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ee3c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ee40:	4a0c      	ldr	r2, [pc, #48]	; (1ee74 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ee42:	6812      	ldr	r2, [r2, #0]
   1ee44:	2a08      	cmp	r2, #8
   1ee46:	d108      	bne.n	1ee5a <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ee48:	4a0b      	ldr	r2, [pc, #44]	; (1ee78 <nordicsemi_nrf52_init+0x58>)
   1ee4a:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
   1ee4c:	2a05      	cmp	r2, #5
   1ee4e:	d804      	bhi.n	1ee5a <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   1ee50:	480a      	ldr	r0, [pc, #40]	; (1ee7c <nordicsemi_nrf52_init+0x5c>)
   1ee52:	5c82      	ldrb	r2, [r0, r2]
   1ee54:	b10a      	cbz	r2, 1ee5a <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1ee56:	4a0a      	ldr	r2, [pc, #40]	; (1ee80 <nordicsemi_nrf52_init+0x60>)
   1ee58:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1ee5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ee5e:	2201      	movs	r2, #1
   1ee60:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   1ee64:	f381 8811 	msr	BASEPRI, r1
   1ee68:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1ee6c:	2000      	movs	r0, #0
   1ee6e:	4770      	bx	lr
   1ee70:	4001e000 	.word	0x4001e000
   1ee74:	10000130 	.word	0x10000130
   1ee78:	10000134 	.word	0x10000134
   1ee7c:	0003311b 	.word	0x0003311b
   1ee80:	40000638 	.word	0x40000638

0001ee84 <sys_arch_reboot>:
    *p_gpregret = val;
   1ee84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ee88:	b2c0      	uxtb	r0, r0
   1ee8a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1ee8e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1ee92:	4905      	ldr	r1, [pc, #20]	; (1eea8 <sys_arch_reboot+0x24>)
   1ee94:	4b05      	ldr	r3, [pc, #20]	; (1eeac <sys_arch_reboot+0x28>)
   1ee96:	68ca      	ldr	r2, [r1, #12]
   1ee98:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ee9c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ee9e:	60cb      	str	r3, [r1, #12]
   1eea0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1eea4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1eea6:	e7fd      	b.n	1eea4 <sys_arch_reboot+0x20>
   1eea8:	e000ed00 	.word	0xe000ed00
   1eeac:	05fa0004 	.word	0x05fa0004

0001eeb0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1eeb0:	b120      	cbz	r0, 1eebc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1eeb2:	4b03      	ldr	r3, [pc, #12]	; (1eec0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1eeb4:	0180      	lsls	r0, r0, #6
   1eeb6:	f043 0301 	orr.w	r3, r3, #1
   1eeba:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1eebc:	4770      	bx	lr
   1eebe:	bf00      	nop
   1eec0:	00032550 	.word	0x00032550

0001eec4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1eec4:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   1eec6:	7802      	ldrb	r2, [r0, #0]
   1eec8:	2a01      	cmp	r2, #1
{
   1eeca:	4604      	mov	r4, r0
   1eecc:	460b      	mov	r3, r1
	switch (src->type) {
   1eece:	d016      	beq.n	1eefe <uuid_to_uuid128+0x3a>
   1eed0:	2a02      	cmp	r2, #2
   1eed2:	d02c      	beq.n	1ef2e <uuid_to_uuid128+0x6a>
   1eed4:	b98a      	cbnz	r2, 1eefa <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1eed6:	4a19      	ldr	r2, [pc, #100]	; (1ef3c <uuid_to_uuid128+0x78>)
   1eed8:	460d      	mov	r5, r1
   1eeda:	f102 0710 	add.w	r7, r2, #16
   1eede:	6810      	ldr	r0, [r2, #0]
   1eee0:	6851      	ldr	r1, [r2, #4]
   1eee2:	462e      	mov	r6, r5
   1eee4:	c603      	stmia	r6!, {r0, r1}
   1eee6:	3208      	adds	r2, #8
   1eee8:	42ba      	cmp	r2, r7
   1eeea:	4635      	mov	r5, r6
   1eeec:	d1f7      	bne.n	1eede <uuid_to_uuid128+0x1a>
   1eeee:	7812      	ldrb	r2, [r2, #0]
   1eef0:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1eef2:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1eef4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1eef6:	0a12      	lsrs	r2, r2, #8
   1eef8:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1eefa:	bcf0      	pop	{r4, r5, r6, r7}
   1eefc:	4770      	bx	lr
		*dst = uuid128_base;
   1eefe:	4a0f      	ldr	r2, [pc, #60]	; (1ef3c <uuid_to_uuid128+0x78>)
   1ef00:	460d      	mov	r5, r1
   1ef02:	f102 0710 	add.w	r7, r2, #16
   1ef06:	6810      	ldr	r0, [r2, #0]
   1ef08:	6851      	ldr	r1, [r2, #4]
   1ef0a:	462e      	mov	r6, r5
   1ef0c:	c603      	stmia	r6!, {r0, r1}
   1ef0e:	3208      	adds	r2, #8
   1ef10:	42ba      	cmp	r2, r7
   1ef12:	4635      	mov	r5, r6
   1ef14:	d1f7      	bne.n	1ef06 <uuid_to_uuid128+0x42>
   1ef16:	7812      	ldrb	r2, [r2, #0]
   1ef18:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1ef1a:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   1ef1c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1ef1e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   1ef22:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   1ef24:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   1ef26:	0a12      	lsrs	r2, r2, #8
   1ef28:	7399      	strb	r1, [r3, #14]
   1ef2a:	741a      	strb	r2, [r3, #16]
}
   1ef2c:	e7e5      	b.n	1eefa <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1ef2e:	4601      	mov	r1, r0
}
   1ef30:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1ef32:	2211      	movs	r2, #17
   1ef34:	4618      	mov	r0, r3
   1ef36:	f00d bec0 	b.w	2ccba <memcpy>
   1ef3a:	bf00      	nop
   1ef3c:	00033121 	.word	0x00033121

0001ef40 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1ef40:	b538      	push	{r3, r4, r5, lr}
   1ef42:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   1ef44:	4805      	ldr	r0, [pc, #20]	; (1ef5c <bt_buf_get_rx+0x1c>)
   1ef46:	f010 fd36 	bl	2f9b6 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1ef4a:	4604      	mov	r4, r0
   1ef4c:	b120      	cbz	r0, 1ef58 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   1ef4e:	2100      	movs	r1, #0
   1ef50:	3008      	adds	r0, #8
   1ef52:	f010 fd4f 	bl	2f9f4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1ef56:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1ef58:	4620      	mov	r0, r4
   1ef5a:	bd38      	pop	{r3, r4, r5, pc}
   1ef5c:	20000d7c 	.word	0x20000d7c

0001ef60 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1ef60:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   1ef62:	490b      	ldr	r1, [pc, #44]	; (1ef90 <bt_buf_get_cmd_complete+0x30>)
{
   1ef64:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   1ef66:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   1ef6a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   1ef6c:	b920      	cbnz	r0, 1ef78 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1ef6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1ef72:	2001      	movs	r0, #1
   1ef74:	f7ff bfe4 	b.w	1ef40 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   1ef78:	f010 fd4d 	bl	2fa16 <net_buf_ref>
   1ef7c:	2301      	movs	r3, #1
		buf->len = 0U;
   1ef7e:	2100      	movs	r1, #0
   1ef80:	7503      	strb	r3, [r0, #20]
   1ef82:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   1ef84:	4604      	mov	r4, r0
   1ef86:	3008      	adds	r0, #8
   1ef88:	f010 fd34 	bl	2f9f4 <net_buf_simple_reserve>
}
   1ef8c:	4620      	mov	r0, r4
   1ef8e:	bd10      	pop	{r4, pc}
   1ef90:	200002b0 	.word	0x200002b0

0001ef94 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1ef94:	b570      	push	{r4, r5, r6, lr}
   1ef96:	4604      	mov	r4, r0
	switch (evt) {
   1ef98:	2c0f      	cmp	r4, #15
{
   1ef9a:	460d      	mov	r5, r1
   1ef9c:	4610      	mov	r0, r2
   1ef9e:	4619      	mov	r1, r3
	switch (evt) {
   1efa0:	d805      	bhi.n	1efae <bt_buf_get_evt+0x1a>
   1efa2:	2c0d      	cmp	r4, #13
   1efa4:	d912      	bls.n	1efcc <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1efa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1efaa:	f7ff bfd9 	b.w	1ef60 <bt_buf_get_cmd_complete>
	switch (evt) {
   1efae:	2c13      	cmp	r4, #19
   1efb0:	d10c      	bne.n	1efcc <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   1efb2:	480b      	ldr	r0, [pc, #44]	; (1efe0 <bt_buf_get_evt+0x4c>)
   1efb4:	f010 fcff 	bl	2f9b6 <net_buf_alloc_fixed>
			if (buf) {
   1efb8:	4604      	mov	r4, r0
   1efba:	b128      	cbz	r0, 1efc8 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   1efbc:	2100      	movs	r1, #0
   1efbe:	3008      	adds	r0, #8
   1efc0:	f010 fd18 	bl	2f9f4 <net_buf_simple_reserve>
   1efc4:	2301      	movs	r3, #1
   1efc6:	7523      	strb	r3, [r4, #20]
}
   1efc8:	4620      	mov	r0, r4
   1efca:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1efcc:	4602      	mov	r2, r0
   1efce:	460b      	mov	r3, r1
		if (discardable) {
   1efd0:	b10d      	cbz	r5, 1efd6 <bt_buf_get_evt+0x42>
   1efd2:	4804      	ldr	r0, [pc, #16]	; (1efe4 <bt_buf_get_evt+0x50>)
   1efd4:	e7ee      	b.n	1efb4 <bt_buf_get_evt+0x20>
}
   1efd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1efda:	2001      	movs	r0, #1
   1efdc:	f7ff bfb0 	b.w	1ef40 <bt_buf_get_rx>
   1efe0:	20000da8 	.word	0x20000da8
   1efe4:	20000cf8 	.word	0x20000cf8

0001efe8 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   1efe8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1efea:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   1efec:	781a      	ldrb	r2, [r3, #0]
   1efee:	b972      	cbnz	r2, 1f00e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1eff0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   1eff4:	4620      	mov	r0, r4
   1eff6:	f001 fcb7 	bl	20968 <bt_conn_lookup_handle>
	if (!conn) {
   1effa:	4605      	mov	r5, r0
   1effc:	b940      	cbnz	r0, 1f010 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1effe:	4b08      	ldr	r3, [pc, #32]	; (1f020 <hci_disconn_complete_prio+0x38>)
   1f000:	881a      	ldrh	r2, [r3, #0]
   1f002:	b922      	cbnz	r2, 1f00e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1f004:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   1f008:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1f00c:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   1f00e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1f010:	2101      	movs	r1, #1
   1f012:	f001 fcb5 	bl	20980 <bt_conn_set_state>
	bt_conn_unref(conn);
   1f016:	4628      	mov	r0, r5
}
   1f018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1f01c:	f00e bbb3 	b.w	2d786 <bt_conn_unref>
   1f020:	200036e8 	.word	0x200036e8

0001f024 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
   1f024:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1f026:	2101      	movs	r1, #1
   1f028:	4604      	mov	r4, r0
   1f02a:	3008      	adds	r0, #8
   1f02c:	f010 fd40 	bl	2fab0 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1f030:	4621      	mov	r1, r4
   1f032:	4a03      	ldr	r2, [pc, #12]	; (1f040 <hci_le_meta_event+0x1c>)
   1f034:	7800      	ldrb	r0, [r0, #0]
}
   1f036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1f03a:	2307      	movs	r3, #7
   1f03c:	f00d bf1b 	b.w	2ce76 <handle_event>
   1f040:	00032890 	.word	0x00032890

0001f044 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1f044:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1f046:	4c0c      	ldr	r4, [pc, #48]	; (1f078 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1f048:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1f04a:	2205      	movs	r2, #5
   1f04c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1f050:	f001 fe22 	bl	20c98 <bt_conn_lookup_state_le>
		if (!conn) {
   1f054:	b970      	cbnz	r0, 1f074 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   1f056:	4b09      	ldr	r3, [pc, #36]	; (1f07c <find_pending_connect.part.0+0x38>)
   1f058:	6818      	ldr	r0, [r3, #0]
   1f05a:	889a      	ldrh	r2, [r3, #4]
   1f05c:	9000      	str	r0, [sp, #0]
   1f05e:	799b      	ldrb	r3, [r3, #6]
   1f060:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1f064:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   1f068:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1f06c:	2204      	movs	r2, #4
   1f06e:	4669      	mov	r1, sp
   1f070:	f001 fe12 	bl	20c98 <bt_conn_lookup_state_le>
}
   1f074:	b002      	add	sp, #8
   1f076:	bd10      	pop	{r4, pc}
   1f078:	200002b0 	.word	0x200002b0
   1f07c:	0003253c 	.word	0x0003253c

0001f080 <hci_cmd_done>:
{
   1f080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f082:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1f084:	7990      	ldrb	r0, [r2, #6]
{
   1f086:	460e      	mov	r6, r1
   1f088:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1f08a:	f004 f98b 	bl	233a4 <net_buf_pool_get>
   1f08e:	4b30      	ldr	r3, [pc, #192]	; (1f150 <hci_cmd_done+0xd0>)
   1f090:	4283      	cmp	r3, r0
   1f092:	d15b      	bne.n	1f14c <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
   1f094:	4620      	mov	r0, r4
   1f096:	f004 f98d 	bl	233b4 <net_buf_id>
   1f09a:	4d2e      	ldr	r5, [pc, #184]	; (1f154 <hci_cmd_done+0xd4>)
   1f09c:	230c      	movs	r3, #12
   1f09e:	fb03 5300 	mla	r3, r3, r0, r5
   1f0a2:	885b      	ldrh	r3, [r3, #2]
   1f0a4:	42bb      	cmp	r3, r7
   1f0a6:	d151      	bne.n	1f14c <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
   1f0a8:	4f2b      	ldr	r7, [pc, #172]	; (1f158 <hci_cmd_done+0xd8>)
   1f0aa:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   1f0ae:	b120      	cbz	r0, 1f0ba <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   1f0b0:	f004 fa38 	bl	23524 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1f0b4:	2300      	movs	r3, #0
   1f0b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   1f0ba:	4620      	mov	r0, r4
   1f0bc:	f004 f97a 	bl	233b4 <net_buf_id>
   1f0c0:	270c      	movs	r7, #12
   1f0c2:	fb07 5000 	mla	r0, r7, r0, r5
   1f0c6:	6843      	ldr	r3, [r0, #4]
   1f0c8:	b1e3      	cbz	r3, 1f104 <hci_cmd_done+0x84>
   1f0ca:	b9de      	cbnz	r6, 1f104 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1f0cc:	4620      	mov	r0, r4
   1f0ce:	f004 f971 	bl	233b4 <net_buf_id>
   1f0d2:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f0d6:	2201      	movs	r2, #1
   1f0d8:	6840      	ldr	r0, [r0, #4]
   1f0da:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   1f0de:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f0e0:	f001 071f 	and.w	r7, r1, #31
   1f0e4:	40ba      	lsls	r2, r7
	if (val) {
   1f0e6:	0949      	lsrs	r1, r1, #5
   1f0e8:	b318      	cbz	r0, 1f132 <hci_cmd_done+0xb2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f0ea:	f3bf 8f5b 	dmb	ish
   1f0ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1f0f2:	e853 1f00 	ldrex	r1, [r3]
   1f0f6:	4311      	orrs	r1, r2
   1f0f8:	e843 1000 	strex	r0, r1, [r3]
   1f0fc:	2800      	cmp	r0, #0
   1f0fe:	d1f8      	bne.n	1f0f2 <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f100:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   1f104:	4620      	mov	r0, r4
   1f106:	f004 f955 	bl	233b4 <net_buf_id>
   1f10a:	270c      	movs	r7, #12
   1f10c:	fb07 5000 	mla	r0, r7, r0, r5
   1f110:	6883      	ldr	r3, [r0, #8]
   1f112:	b1db      	cbz	r3, 1f14c <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
   1f114:	4620      	mov	r0, r4
   1f116:	f004 f94d 	bl	233b4 <net_buf_id>
   1f11a:	4378      	muls	r0, r7
   1f11c:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1f11e:	4620      	mov	r0, r4
   1f120:	f004 f948 	bl	233b4 <net_buf_id>
   1f124:	fb07 5500 	mla	r5, r7, r0, r5
   1f128:	68a8      	ldr	r0, [r5, #8]
}
   1f12a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1f12e:	f008 bea7 	b.w	27e80 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f132:	43d2      	mvns	r2, r2
   1f134:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1f138:	f3bf 8f5b 	dmb	ish
   1f13c:	e853 1f00 	ldrex	r1, [r3]
   1f140:	4011      	ands	r1, r2
   1f142:	e843 1000 	strex	r0, r1, [r3]
   1f146:	2800      	cmp	r0, #0
   1f148:	d0da      	beq.n	1f100 <hci_cmd_done+0x80>
   1f14a:	e7f7      	b.n	1f13c <hci_cmd_done+0xbc>
   1f14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f14e:	bf00      	nop
   1f150:	20000d50 	.word	0x20000d50
   1f154:	2000287c 	.word	0x2000287c
   1f158:	200002b0 	.word	0x200002b0

0001f15c <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   1f15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1f160:	4f3b      	ldr	r7, [pc, #236]	; (1f250 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1f162:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1f264 <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1f166:	4e3b      	ldr	r6, [pc, #236]	; (1f254 <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1f168:	f04f 33ff 	mov.w	r3, #4294967295
   1f16c:	f04f 32ff 	mov.w	r2, #4294967295
   1f170:	4638      	mov	r0, r7
   1f172:	f010 fc25 	bl	2f9c0 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1f176:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   1f178:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1f17a:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   1f17c:	d039      	beq.n	1f1f2 <hci_rx_thread+0x96>
   1f17e:	2b03      	cmp	r3, #3
   1f180:	d120      	bne.n	1f1c4 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1f182:	8983      	ldrh	r3, [r0, #12]
   1f184:	2b03      	cmp	r3, #3
   1f186:	d80c      	bhi.n	1f1a2 <hci_rx_thread+0x46>
   1f188:	4933      	ldr	r1, [pc, #204]	; (1f258 <hci_rx_thread+0xfc>)
   1f18a:	4834      	ldr	r0, [pc, #208]	; (1f25c <hci_rx_thread+0x100>)
   1f18c:	f240 13b5 	movw	r3, #437	; 0x1b5
   1f190:	4632      	mov	r2, r6
   1f192:	f00c fc83 	bl	2ba9c <printk>
   1f196:	4040      	eors	r0, r0
   1f198:	f380 8811 	msr	BASEPRI, r0
   1f19c:	f04f 0003 	mov.w	r0, #3
   1f1a0:	df02      	svc	2
   1f1a2:	2104      	movs	r1, #4
   1f1a4:	f104 0008 	add.w	r0, r4, #8
   1f1a8:	f010 fc82 	bl	2fab0 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1f1ac:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   1f1ae:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1f1b0:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1f1b4:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   1f1b6:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   1f1b8:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   1f1bc:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   1f1be:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   1f1c0:	d003      	beq.n	1f1ca <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   1f1c2:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   1f1c4:	f004 f9ae 	bl	23524 <net_buf_unref>
			break;
   1f1c8:	e010      	b.n	1f1ec <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1f1ca:	f001 fbcd 	bl	20968 <bt_conn_lookup_handle>
	if (!conn) {
   1f1ce:	4605      	mov	r5, r0
   1f1d0:	2800      	cmp	r0, #0
   1f1d2:	d0f6      	beq.n	1f1c2 <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   1f1d4:	f001 fc7c 	bl	20ad0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1f1d8:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   1f1dc:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1f1de:	4621      	mov	r1, r4
   1f1e0:	4628      	mov	r0, r5
   1f1e2:	f00e fa65 	bl	2d6b0 <bt_conn_recv>
	bt_conn_unref(conn);
   1f1e6:	4628      	mov	r0, r5
   1f1e8:	f00e facd 	bl	2d786 <bt_conn_unref>
	z_impl_k_yield();
   1f1ec:	f009 fae0 	bl	287b0 <z_impl_k_yield>
	while (1) {
   1f1f0:	e7ba      	b.n	1f168 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1f1f2:	8983      	ldrh	r3, [r0, #12]
   1f1f4:	2b01      	cmp	r3, #1
   1f1f6:	d80c      	bhi.n	1f212 <hci_rx_thread+0xb6>
   1f1f8:	4917      	ldr	r1, [pc, #92]	; (1f258 <hci_rx_thread+0xfc>)
   1f1fa:	4818      	ldr	r0, [pc, #96]	; (1f25c <hci_rx_thread+0x100>)
   1f1fc:	f640 1317 	movw	r3, #2327	; 0x917
   1f200:	4632      	mov	r2, r6
   1f202:	f00c fc4b 	bl	2ba9c <printk>
   1f206:	4040      	eors	r0, r0
   1f208:	f380 8811 	msr	BASEPRI, r0
   1f20c:	f04f 0003 	mov.w	r0, #3
   1f210:	df02      	svc	2
   1f212:	2102      	movs	r1, #2
   1f214:	f104 0008 	add.w	r0, r4, #8
   1f218:	f010 fc4a 	bl	2fab0 <net_buf_simple_pull_mem>
   1f21c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1f21e:	7800      	ldrb	r0, [r0, #0]
   1f220:	f00d fe17 	bl	2ce52 <bt_hci_evt_get_flags>
   1f224:	0783      	lsls	r3, r0, #30
   1f226:	d40c      	bmi.n	1f242 <hci_rx_thread+0xe6>
   1f228:	490d      	ldr	r1, [pc, #52]	; (1f260 <hci_rx_thread+0x104>)
   1f22a:	480c      	ldr	r0, [pc, #48]	; (1f25c <hci_rx_thread+0x100>)
   1f22c:	f640 131b 	movw	r3, #2331	; 0x91b
   1f230:	4632      	mov	r2, r6
   1f232:	f00c fc33 	bl	2ba9c <printk>
   1f236:	4040      	eors	r0, r0
   1f238:	f380 8811 	msr	BASEPRI, r0
   1f23c:	f04f 0003 	mov.w	r0, #3
   1f240:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1f242:	7828      	ldrb	r0, [r5, #0]
   1f244:	2304      	movs	r3, #4
   1f246:	4642      	mov	r2, r8
   1f248:	4621      	mov	r1, r4
   1f24a:	f00d fe14 	bl	2ce76 <handle_event>
   1f24e:	e7b8      	b.n	1f1c2 <hci_rx_thread+0x66>
   1f250:	200003e4 	.word	0x200003e4
   1f254:	00033132 	.word	0x00033132
   1f258:	00033166 	.word	0x00033166
   1f25c:	0003317f 	.word	0x0003317f
   1f260:	0003319c 	.word	0x0003319c
   1f264:	000328d8 	.word	0x000328d8

0001f268 <hci_cmd_status>:
{
   1f268:	b538      	push	{r3, r4, r5, lr}
   1f26a:	2104      	movs	r1, #4
   1f26c:	4604      	mov	r4, r0
   1f26e:	3008      	adds	r0, #8
   1f270:	f010 fc1e 	bl	2fab0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1f274:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1f276:	7801      	ldrb	r1, [r0, #0]
   1f278:	8840      	ldrh	r0, [r0, #2]
   1f27a:	4622      	mov	r2, r4
   1f27c:	f7ff ff00 	bl	1f080 <hci_cmd_done>
	if (ncmd) {
   1f280:	b125      	cbz	r5, 1f28c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   1f282:	4803      	ldr	r0, [pc, #12]	; (1f290 <hci_cmd_status+0x28>)
}
   1f284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f288:	f008 bdfa 	b.w	27e80 <z_impl_k_sem_give>
   1f28c:	bd38      	pop	{r3, r4, r5, pc}
   1f28e:	bf00      	nop
   1f290:	200003c8 	.word	0x200003c8

0001f294 <hci_cmd_complete>:
{
   1f294:	b538      	push	{r3, r4, r5, lr}
   1f296:	2103      	movs	r1, #3
   1f298:	4604      	mov	r4, r0
   1f29a:	3008      	adds	r0, #8
   1f29c:	f010 fc08 	bl	2fab0 <net_buf_simple_pull_mem>
	status = buf->data[0];
   1f2a0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   1f2a2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1f2a4:	7819      	ldrb	r1, [r3, #0]
   1f2a6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1f2aa:	4622      	mov	r2, r4
   1f2ac:	f7ff fee8 	bl	1f080 <hci_cmd_done>
	if (ncmd) {
   1f2b0:	b125      	cbz	r5, 1f2bc <hci_cmd_complete+0x28>
   1f2b2:	4803      	ldr	r0, [pc, #12]	; (1f2c0 <hci_cmd_complete+0x2c>)
}
   1f2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f2b8:	f008 bde2 	b.w	27e80 <z_impl_k_sem_give>
   1f2bc:	bd38      	pop	{r3, r4, r5, pc}
   1f2be:	bf00      	nop
   1f2c0:	200003c8 	.word	0x200003c8

0001f2c4 <bt_hci_cmd_state_set_init>:
{
   1f2c4:	b510      	push	{r4, lr}
	state->bit = bit;
   1f2c6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1f2ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1f2ce:	720b      	strb	r3, [r1, #8]
{
   1f2d0:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1f2d2:	f004 f86f 	bl	233b4 <net_buf_id>
   1f2d6:	4b03      	ldr	r3, [pc, #12]	; (1f2e4 <bt_hci_cmd_state_set_init+0x20>)
   1f2d8:	220c      	movs	r2, #12
   1f2da:	fb02 3000 	mla	r0, r2, r0, r3
   1f2de:	6044      	str	r4, [r0, #4]
}
   1f2e0:	bd10      	pop	{r4, pc}
   1f2e2:	bf00      	nop
   1f2e4:	2000287c 	.word	0x2000287c

0001f2e8 <bt_hci_cmd_create>:
{
   1f2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   1f2ec:	f04f 32ff 	mov.w	r2, #4294967295
   1f2f0:	f04f 33ff 	mov.w	r3, #4294967295
   1f2f4:	4605      	mov	r5, r0
   1f2f6:	4816      	ldr	r0, [pc, #88]	; (1f350 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   1f2f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1f354 <bt_hci_cmd_create+0x6c>
{
   1f2fc:	460e      	mov	r6, r1
   1f2fe:	f010 fb5a 	bl	2f9b6 <net_buf_alloc_fixed>
   1f302:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1f304:	f100 0b08 	add.w	fp, r0, #8
   1f308:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1f30a:	2700      	movs	r7, #0
   1f30c:	4658      	mov	r0, fp
   1f30e:	f010 fb71 	bl	2f9f4 <net_buf_simple_reserve>
   1f312:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   1f314:	4620      	mov	r0, r4
   1f316:	f004 f84d 	bl	233b4 <net_buf_id>
   1f31a:	f04f 0a0c 	mov.w	sl, #12
   1f31e:	fb0a 8000 	mla	r0, sl, r0, r8
   1f322:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   1f324:	4620      	mov	r0, r4
   1f326:	f004 f845 	bl	233b4 <net_buf_id>
   1f32a:	fb0a 8000 	mla	r0, sl, r0, r8
   1f32e:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1f330:	4620      	mov	r0, r4
   1f332:	f004 f83f 	bl	233b4 <net_buf_id>
   1f336:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   1f33a:	2103      	movs	r1, #3
   1f33c:	6047      	str	r7, [r0, #4]
   1f33e:	4658      	mov	r0, fp
   1f340:	f010 fb8f 	bl	2fa62 <net_buf_simple_add>
	hdr->param_len = param_len;
   1f344:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   1f346:	8005      	strh	r5, [r0, #0]
}
   1f348:	4620      	mov	r0, r4
   1f34a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f34e:	bf00      	nop
   1f350:	20000d50 	.word	0x20000d50
   1f354:	2000287c 	.word	0x2000287c

0001f358 <bt_hci_cmd_send_sync>:
{
   1f358:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f35a:	4615      	mov	r5, r2
   1f35c:	b087      	sub	sp, #28
	if (!buf) {
   1f35e:	460c      	mov	r4, r1
   1f360:	b921      	cbnz	r1, 1f36c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   1f362:	f7ff ffc1 	bl	1f2e8 <bt_hci_cmd_create>
		if (!buf) {
   1f366:	4604      	mov	r4, r0
   1f368:	2800      	cmp	r0, #0
   1f36a:	d048      	beq.n	1f3fe <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f36c:	2201      	movs	r2, #1
   1f36e:	2100      	movs	r1, #0
   1f370:	4668      	mov	r0, sp
   1f372:	f012 fa6e 	bl	31852 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1f376:	4620      	mov	r0, r4
   1f378:	f004 f81c 	bl	233b4 <net_buf_id>
   1f37c:	4e21      	ldr	r6, [pc, #132]	; (1f404 <bt_hci_cmd_send_sync+0xac>)
   1f37e:	230c      	movs	r3, #12
   1f380:	fb03 6000 	mla	r0, r3, r0, r6
   1f384:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1f388:	4620      	mov	r0, r4
   1f38a:	f010 fb44 	bl	2fa16 <net_buf_ref>
   1f38e:	4601      	mov	r1, r0
   1f390:	481d      	ldr	r0, [pc, #116]	; (1f408 <bt_hci_cmd_send_sync+0xb0>)
   1f392:	f010 fb33 	bl	2f9fc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1f396:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1f39a:	2300      	movs	r3, #0
   1f39c:	4668      	mov	r0, sp
   1f39e:	f008 fd95 	bl	27ecc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1f3a2:	4607      	mov	r7, r0
   1f3a4:	b180      	cbz	r0, 1f3c8 <bt_hci_cmd_send_sync+0x70>
   1f3a6:	4a19      	ldr	r2, [pc, #100]	; (1f40c <bt_hci_cmd_send_sync+0xb4>)
   1f3a8:	4919      	ldr	r1, [pc, #100]	; (1f410 <bt_hci_cmd_send_sync+0xb8>)
   1f3aa:	481a      	ldr	r0, [pc, #104]	; (1f414 <bt_hci_cmd_send_sync+0xbc>)
   1f3ac:	f240 1331 	movw	r3, #305	; 0x131
   1f3b0:	f00c fb74 	bl	2ba9c <printk>
   1f3b4:	4818      	ldr	r0, [pc, #96]	; (1f418 <bt_hci_cmd_send_sync+0xc0>)
   1f3b6:	4639      	mov	r1, r7
   1f3b8:	f00c fb70 	bl	2ba9c <printk>
   1f3bc:	4040      	eors	r0, r0
   1f3be:	f380 8811 	msr	BASEPRI, r0
   1f3c2:	f04f 0003 	mov.w	r0, #3
   1f3c6:	df02      	svc	2
	status = cmd(buf)->status;
   1f3c8:	4620      	mov	r0, r4
   1f3ca:	f003 fff3 	bl	233b4 <net_buf_id>
   1f3ce:	230c      	movs	r3, #12
   1f3d0:	4343      	muls	r3, r0
   1f3d2:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   1f3d4:	b156      	cbz	r6, 1f3ec <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   1f3d6:	4620      	mov	r0, r4
   1f3d8:	f004 f8a4 	bl	23524 <net_buf_unref>
			return -EIO;
   1f3dc:	2e09      	cmp	r6, #9
   1f3de:	bf0c      	ite	eq
   1f3e0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   1f3e4:	f06f 0004 	mvnne.w	r0, #4
}
   1f3e8:	b007      	add	sp, #28
   1f3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   1f3ec:	b115      	cbz	r5, 1f3f4 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   1f3ee:	602c      	str	r4, [r5, #0]
	return 0;
   1f3f0:	4630      	mov	r0, r6
   1f3f2:	e7f9      	b.n	1f3e8 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   1f3f4:	4620      	mov	r0, r4
   1f3f6:	f004 f895 	bl	23524 <net_buf_unref>
	return 0;
   1f3fa:	4628      	mov	r0, r5
   1f3fc:	e7f4      	b.n	1f3e8 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   1f3fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f402:	e7f1      	b.n	1f3e8 <bt_hci_cmd_send_sync+0x90>
   1f404:	2000287c 	.word	0x2000287c
   1f408:	200003fc 	.word	0x200003fc
   1f40c:	00033132 	.word	0x00033132
   1f410:	000331ca 	.word	0x000331ca
   1f414:	0003317f 	.word	0x0003317f
   1f418:	000331d3 	.word	0x000331d3

0001f41c <hci_init>:
{
   1f41c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1f41e:	4d3e      	ldr	r5, [pc, #248]	; (1f518 <hci_init+0xfc>)
   1f420:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1f424:	6899      	ldr	r1, [r3, #8]
   1f426:	f011 0101 	ands.w	r1, r1, #1
   1f42a:	d121      	bne.n	1f470 <hci_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1f42c:	aa01      	add	r2, sp, #4
   1f42e:	f640 4003 	movw	r0, #3075	; 0xc03
   1f432:	f7ff ff91 	bl	1f358 <bt_hci_cmd_send_sync>
		if (err) {
   1f436:	4604      	mov	r4, r0
   1f438:	2800      	cmp	r0, #0
   1f43a:	d169      	bne.n	1f510 <hci_init+0xf4>
	uint8_t status = buf->data[0];
   1f43c:	9b01      	ldr	r3, [sp, #4]
   1f43e:	689b      	ldr	r3, [r3, #8]
	if (status) {
   1f440:	781b      	ldrb	r3, [r3, #0]
   1f442:	b993      	cbnz	r3, 1f46a <hci_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f444:	f3bf 8f5b 	dmb	ish
   1f448:	462b      	mov	r3, r5
   1f44a:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1f44e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1f452:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f456:	f3bf 8f5b 	dmb	ish
   1f45a:	e853 1f00 	ldrex	r1, [r3]
   1f45e:	e843 2000 	strex	r0, r2, [r3]
   1f462:	2800      	cmp	r0, #0
   1f464:	d1f9      	bne.n	1f45a <hci_init+0x3e>
   1f466:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1f46a:	9801      	ldr	r0, [sp, #4]
   1f46c:	f004 f85a 	bl	23524 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1f470:	aa01      	add	r2, sp, #4
   1f472:	2100      	movs	r1, #0
   1f474:	f241 0003 	movw	r0, #4099	; 0x1003
   1f478:	f7ff ff6e 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f47c:	4604      	mov	r4, r0
   1f47e:	2800      	cmp	r0, #0
   1f480:	d146      	bne.n	1f510 <hci_init+0xf4>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1f482:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1f484:	4825      	ldr	r0, [pc, #148]	; (1f51c <hci_init+0x100>)
   1f486:	6899      	ldr	r1, [r3, #8]
   1f488:	2208      	movs	r2, #8
   1f48a:	3101      	adds	r1, #1
   1f48c:	f00d fc15 	bl	2ccba <memcpy>
	net_buf_unref(rsp);
   1f490:	9801      	ldr	r0, [sp, #4]
   1f492:	f004 f847 	bl	23524 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1f496:	4621      	mov	r1, r4
   1f498:	aa01      	add	r2, sp, #4
   1f49a:	f241 0001 	movw	r0, #4097	; 0x1001
   1f49e:	f7ff ff5b 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f4a2:	4604      	mov	r4, r0
   1f4a4:	2800      	cmp	r0, #0
   1f4a6:	d133      	bne.n	1f510 <hci_init+0xf4>
	read_local_ver_complete(rsp);
   1f4a8:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1f4aa:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1f4ac:	785a      	ldrb	r2, [r3, #1]
   1f4ae:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1f4b2:	78d9      	ldrb	r1, [r3, #3]
   1f4b4:	789a      	ldrb	r2, [r3, #2]
   1f4b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1f4ba:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   1f4be:	791a      	ldrb	r2, [r3, #4]
   1f4c0:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1f4c4:	7a19      	ldrb	r1, [r3, #8]
   1f4c6:	79da      	ldrb	r2, [r3, #7]
   1f4c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1f4cc:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1f4d0:	795a      	ldrb	r2, [r3, #5]
   1f4d2:	799b      	ldrb	r3, [r3, #6]
   1f4d4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1f4d8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1f4dc:	f004 f822 	bl	23524 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1f4e0:	4621      	mov	r1, r4
   1f4e2:	aa01      	add	r2, sp, #4
   1f4e4:	f241 0002 	movw	r0, #4098	; 0x1002
   1f4e8:	f7ff ff36 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f4ec:	4604      	mov	r4, r0
   1f4ee:	b978      	cbnz	r0, 1f510 <hci_init+0xf4>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   1f4f0:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   1f4f2:	480b      	ldr	r0, [pc, #44]	; (1f520 <hci_init+0x104>)
   1f4f4:	6899      	ldr	r1, [r3, #8]
   1f4f6:	2240      	movs	r2, #64	; 0x40
   1f4f8:	3101      	adds	r1, #1
   1f4fa:	f00d fbde 	bl	2ccba <memcpy>
	net_buf_unref(rsp);
   1f4fe:	9801      	ldr	r0, [sp, #4]
   1f500:	f004 f810 	bl	23524 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1f504:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1f508:	065e      	lsls	r6, r3, #25
   1f50a:	d40b      	bmi.n	1f524 <hci_init+0x108>
		return -ENODEV;
   1f50c:	f06f 0412 	mvn.w	r4, #18
}
   1f510:	4620      	mov	r0, r4
   1f512:	b002      	add	sp, #8
   1f514:	bd70      	pop	{r4, r5, r6, pc}
   1f516:	bf00      	nop
   1f518:	200002b0 	.word	0x200002b0
   1f51c:	20000320 	.word	0x20000320
   1f520:	20000328 	.word	0x20000328
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1f524:	4621      	mov	r1, r4
   1f526:	aa01      	add	r2, sp, #4
   1f528:	f242 0003 	movw	r0, #8195	; 0x2003
   1f52c:	f7ff ff14 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f530:	4604      	mov	r4, r0
   1f532:	2800      	cmp	r0, #0
   1f534:	d1ec      	bne.n	1f510 <hci_init+0xf4>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   1f536:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1f538:	489a      	ldr	r0, [pc, #616]	; (1f7a4 <hci_init+0x388>)
   1f53a:	6899      	ldr	r1, [r3, #8]
   1f53c:	2208      	movs	r2, #8
   1f53e:	3101      	adds	r1, #1
   1f540:	f00d fbbb 	bl	2ccba <memcpy>
	net_buf_unref(rsp);
   1f544:	9801      	ldr	r0, [sp, #4]
   1f546:	f003 ffed 	bl	23524 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1f54a:	4621      	mov	r1, r4
   1f54c:	aa01      	add	r2, sp, #4
   1f54e:	f242 0002 	movw	r0, #8194	; 0x2002
   1f552:	f7ff ff01 	bl	1f358 <bt_hci_cmd_send_sync>
		if (err) {
   1f556:	4604      	mov	r4, r0
   1f558:	2800      	cmp	r0, #0
   1f55a:	d1d9      	bne.n	1f510 <hci_init+0xf4>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1f55c:	9b01      	ldr	r3, [sp, #4]
   1f55e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1f560:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1f564:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   1f568:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1f56a:	b121      	cbz	r1, 1f576 <hci_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1f56c:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f56e:	488e      	ldr	r0, [pc, #568]	; (1f7a8 <hci_init+0x38c>)
   1f570:	4611      	mov	r1, r2
   1f572:	f012 f96e 	bl	31852 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1f576:	9801      	ldr	r0, [sp, #4]
   1f578:	f003 ffd4 	bl	23524 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1f57c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1f580:	f016 0620 	ands.w	r6, r6, #32
   1f584:	f000 80ed 	beq.w	1f762 <hci_init+0x346>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1f588:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   1f58c:	071c      	lsls	r4, r3, #28
   1f58e:	d511      	bpl.n	1f5b4 <hci_init+0x198>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1f590:	aa01      	add	r2, sp, #4
   1f592:	2100      	movs	r1, #0
   1f594:	f242 001c 	movw	r0, #8220	; 0x201c
   1f598:	f7ff fede 	bl	1f358 <bt_hci_cmd_send_sync>
		if (err) {
   1f59c:	4604      	mov	r4, r0
   1f59e:	2800      	cmp	r0, #0
   1f5a0:	d1b6      	bne.n	1f510 <hci_init+0xf4>
		le_read_supp_states_complete(rsp);
   1f5a2:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1f5a4:	6883      	ldr	r3, [r0, #8]
   1f5a6:	f853 2f01 	ldr.w	r2, [r3, #1]!
   1f5aa:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1f5ac:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1f5b0:	f003 ffb8 	bl	23524 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1f5b4:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1f5b8:	0698      	lsls	r0, r3, #26
   1f5ba:	d523      	bpl.n	1f604 <hci_init+0x1e8>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1f5bc:	f10d 0102 	add.w	r1, sp, #2
   1f5c0:	4668      	mov	r0, sp
   1f5c2:	f00d fd31 	bl	2d028 <hci_le_read_max_data_len>
		if (err) {
   1f5c6:	4604      	mov	r4, r0
   1f5c8:	2800      	cmp	r0, #0
   1f5ca:	d1a1      	bne.n	1f510 <hci_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1f5cc:	2104      	movs	r1, #4
   1f5ce:	f242 0024 	movw	r0, #8228	; 0x2024
   1f5d2:	f7ff fe89 	bl	1f2e8 <bt_hci_cmd_create>
		if (!buf) {
   1f5d6:	4606      	mov	r6, r0
   1f5d8:	2800      	cmp	r0, #0
   1f5da:	f000 80c9 	beq.w	1f770 <hci_init+0x354>
   1f5de:	2104      	movs	r1, #4
   1f5e0:	3008      	adds	r0, #8
   1f5e2:	f010 fa3e 	bl	2fa62 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1f5e6:	f8bd 3000 	ldrh.w	r3, [sp]
   1f5ea:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1f5ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1f5f0:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1f5f2:	4622      	mov	r2, r4
   1f5f4:	4631      	mov	r1, r6
   1f5f6:	f242 0024 	movw	r0, #8228	; 0x2024
   1f5fa:	f7ff fead 	bl	1f358 <bt_hci_cmd_send_sync>
		if (err) {
   1f5fe:	4604      	mov	r4, r0
   1f600:	2800      	cmp	r0, #0
   1f602:	d185      	bne.n	1f510 <hci_init+0xf4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1f604:	2108      	movs	r1, #8
   1f606:	f242 0001 	movw	r0, #8193	; 0x2001
   1f60a:	f7ff fe6d 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   1f60e:	4604      	mov	r4, r0
   1f610:	2800      	cmp	r0, #0
   1f612:	f000 80ad 	beq.w	1f770 <hci_init+0x354>
   1f616:	2108      	movs	r1, #8
   1f618:	4408      	add	r0, r1
   1f61a:	f010 fa22 	bl	2fa62 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1f61e:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1f622:	f012 0f02 	tst.w	r2, #2
   1f626:	bf14      	ite	ne
   1f628:	232f      	movne	r3, #47	; 0x2f
   1f62a:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1f62c:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1f62e:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1f632:	bf48      	it	mi
   1f634:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1f638:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1f63c:	bf18      	it	ne
   1f63e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   1f642:	2200      	movs	r2, #0
   1f644:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1f646:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1f64a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1f64c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1f64e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1f650:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1f652:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1f654:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1f656:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1f658:	4621      	mov	r1, r4
   1f65a:	f242 0001 	movw	r0, #8193	; 0x2001
   1f65e:	f7ff fe7b 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f662:	4604      	mov	r4, r0
   1f664:	2800      	cmp	r0, #0
   1f666:	f47f af53 	bne.w	1f510 <hci_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1f66a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1f66e:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   1f672:	069a      	lsls	r2, r3, #26
   1f674:	f100 8091 	bmi.w	1f79a <hci_init+0x37e>
	if (bt_dev.le.acl_mtu) {
   1f678:	b9d9      	cbnz	r1, 1f6b2 <hci_init+0x296>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1f67a:	aa01      	add	r2, sp, #4
   1f67c:	f241 0005 	movw	r0, #4101	; 0x1005
   1f680:	f7ff fe6a 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f684:	4604      	mov	r4, r0
   1f686:	2800      	cmp	r0, #0
   1f688:	f47f af42 	bne.w	1f510 <hci_init+0xf4>
	if (bt_dev.le.acl_mtu) {
   1f68c:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   1f690:	b963      	cbnz	r3, 1f6ac <hci_init+0x290>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1f692:	9b01      	ldr	r3, [sp, #4]
   1f694:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1f696:	785a      	ldrb	r2, [r3, #1]
   1f698:	7899      	ldrb	r1, [r3, #2]
   1f69a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1f69e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1f6a2:	889a      	ldrh	r2, [r3, #4]
   1f6a4:	4840      	ldr	r0, [pc, #256]	; (1f7a8 <hci_init+0x38c>)
   1f6a6:	4611      	mov	r1, r2
   1f6a8:	f012 f8d3 	bl	31852 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1f6ac:	9801      	ldr	r0, [sp, #4]
   1f6ae:	f003 ff39 	bl	23524 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1f6b2:	2108      	movs	r1, #8
   1f6b4:	f640 4001 	movw	r0, #3073	; 0xc01
   1f6b8:	f7ff fe16 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   1f6bc:	4604      	mov	r4, r0
   1f6be:	2800      	cmp	r0, #0
   1f6c0:	d056      	beq.n	1f770 <hci_init+0x354>
   1f6c2:	2108      	movs	r1, #8
   1f6c4:	4408      	add	r0, r1
   1f6c6:	f010 f9cc 	bl	2fa62 <net_buf_simple_add>
	dst[0] = val;
   1f6ca:	2310      	movs	r3, #16
   1f6cc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1f6ce:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   1f6d0:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   1f6d2:	7043      	strb	r3, [r0, #1]
   1f6d4:	2602      	movs	r6, #2
   1f6d6:	2320      	movs	r3, #32
	dst[0] = val;
   1f6d8:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1f6da:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   1f6dc:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1f6de:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1f6e0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1f6e2:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1f6e4:	4621      	mov	r1, r4
   1f6e6:	f640 4001 	movw	r0, #3073	; 0xc01
   1f6ea:	f7ff fe35 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f6ee:	4604      	mov	r4, r0
   1f6f0:	2800      	cmp	r0, #0
   1f6f2:	f47f af0d 	bne.w	1f510 <hci_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1f6f6:	4601      	mov	r1, r0
   1f6f8:	aa01      	add	r2, sp, #4
   1f6fa:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1f6fe:	f7ff fe2b 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f702:	4604      	mov	r4, r0
   1f704:	bb48      	cbnz	r0, 1f75a <hci_init+0x33e>
	net_buf_unref(rsp);
   1f706:	9801      	ldr	r0, [sp, #4]
   1f708:	f003 ff0c 	bl	23524 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1f70c:	4621      	mov	r1, r4
   1f70e:	aa01      	add	r2, sp, #4
   1f710:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1f714:	f7ff fe20 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1f718:	4604      	mov	r4, r0
   1f71a:	b9f0      	cbnz	r0, 1f75a <hci_init+0x33e>
	rp.cmds = (void *)rsp->data;
   1f71c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1f71e:	4823      	ldr	r0, [pc, #140]	; (1f7ac <hci_init+0x390>)
   1f720:	6899      	ldr	r1, [r3, #8]
   1f722:	4632      	mov	r2, r6
   1f724:	3101      	adds	r1, #1
   1f726:	f00d fac8 	bl	2ccba <memcpy>
	net_buf_unref(rsp);
   1f72a:	9801      	ldr	r0, [sp, #4]
   1f72c:	f003 fefa 	bl	23524 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1f730:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   1f734:	075b      	lsls	r3, r3, #29
   1f736:	d510      	bpl.n	1f75a <hci_init+0x33e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1f738:	aa01      	add	r2, sp, #4
   1f73a:	4621      	mov	r1, r4
   1f73c:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1f740:	f7ff fe0a 	bl	1f358 <bt_hci_cmd_send_sync>
		if (err) {
   1f744:	b948      	cbnz	r0, 1f75a <hci_init+0x33e>
		rp.feat = (void *)rsp->data;
   1f746:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1f748:	4819      	ldr	r0, [pc, #100]	; (1f7b0 <hci_init+0x394>)
   1f74a:	6899      	ldr	r1, [r3, #8]
   1f74c:	2201      	movs	r2, #1
   1f74e:	4411      	add	r1, r2
   1f750:	f00d fab3 	bl	2ccba <memcpy>
		net_buf_unref(rsp);
   1f754:	9801      	ldr	r0, [sp, #4]
   1f756:	f003 fee5 	bl	23524 <net_buf_unref>
	err = bt_id_init();
   1f75a:	f000 fd17 	bl	2018c <bt_id_init>
   1f75e:	4604      	mov	r4, r0
	if (err) {
   1f760:	e6d6      	b.n	1f510 <hci_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1f762:	2102      	movs	r1, #2
   1f764:	f640 406d 	movw	r0, #3181	; 0xc6d
   1f768:	f7ff fdbe 	bl	1f2e8 <bt_hci_cmd_create>
		if (!buf) {
   1f76c:	4604      	mov	r4, r0
   1f76e:	b910      	cbnz	r0, 1f776 <hci_init+0x35a>
		return -ENOBUFS;
   1f770:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1f774:	e6cc      	b.n	1f510 <hci_init+0xf4>
   1f776:	2102      	movs	r1, #2
   1f778:	3008      	adds	r0, #8
   1f77a:	f010 f972 	bl	2fa62 <net_buf_simple_add>
		cp_le->le = 0x01;
   1f77e:	2301      	movs	r3, #1
   1f780:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1f782:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1f784:	4621      	mov	r1, r4
   1f786:	4632      	mov	r2, r6
   1f788:	f640 406d 	movw	r0, #3181	; 0xc6d
   1f78c:	f7ff fde4 	bl	1f358 <bt_hci_cmd_send_sync>
		if (err) {
   1f790:	4604      	mov	r4, r0
   1f792:	2800      	cmp	r0, #0
   1f794:	f43f aef8 	beq.w	1f588 <hci_init+0x16c>
   1f798:	e6ba      	b.n	1f510 <hci_init+0xf4>
	else if (!bt_dev.le.acl_mtu) {
   1f79a:	2900      	cmp	r1, #0
   1f79c:	d189      	bne.n	1f6b2 <hci_init+0x296>
		return -EIO;
   1f79e:	f06f 0404 	mvn.w	r4, #4
   1f7a2:	e6b5      	b.n	1f510 <hci_init+0xf4>
   1f7a4:	20000380 	.word	0x20000380
   1f7a8:	200003b0 	.word	0x200003b0
   1f7ac:	20000369 	.word	0x20000369
   1f7b0:	20000368 	.word	0x20000368

0001f7b4 <bt_send>:
	return bt_dev.drv->send(buf);
   1f7b4:	4b02      	ldr	r3, [pc, #8]	; (1f7c0 <bt_send+0xc>)
   1f7b6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1f7ba:	691b      	ldr	r3, [r3, #16]
   1f7bc:	4718      	bx	r3
   1f7be:	bf00      	nop
   1f7c0:	200002b0 	.word	0x200002b0

0001f7c4 <bt_hci_cmd_send>:
{
   1f7c4:	b538      	push	{r3, r4, r5, lr}
   1f7c6:	4605      	mov	r5, r0
	if (!buf) {
   1f7c8:	460c      	mov	r4, r1
   1f7ca:	b919      	cbnz	r1, 1f7d4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   1f7cc:	f7ff fd8c 	bl	1f2e8 <bt_hci_cmd_create>
		if (!buf) {
   1f7d0:	4604      	mov	r4, r0
   1f7d2:	b198      	cbz	r0, 1f7fc <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1f7d4:	f640 4335 	movw	r3, #3125	; 0xc35
   1f7d8:	429d      	cmp	r5, r3
   1f7da:	d109      	bne.n	1f7f0 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   1f7dc:	4620      	mov	r0, r4
   1f7de:	f7ff ffe9 	bl	1f7b4 <bt_send>
		if (err) {
   1f7e2:	4605      	mov	r5, r0
   1f7e4:	b110      	cbz	r0, 1f7ec <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   1f7e6:	4620      	mov	r0, r4
   1f7e8:	f003 fe9c 	bl	23524 <net_buf_unref>
}
   1f7ec:	4628      	mov	r0, r5
   1f7ee:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1f7f0:	4804      	ldr	r0, [pc, #16]	; (1f804 <bt_hci_cmd_send+0x40>)
   1f7f2:	4621      	mov	r1, r4
   1f7f4:	f010 f902 	bl	2f9fc <net_buf_put>
	return 0;
   1f7f8:	2500      	movs	r5, #0
   1f7fa:	e7f7      	b.n	1f7ec <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   1f7fc:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1f800:	e7f4      	b.n	1f7ec <bt_hci_cmd_send+0x28>
   1f802:	bf00      	nop
   1f804:	200003fc 	.word	0x200003fc

0001f808 <conn_auto_initiate>:
{
   1f808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1f80a:	7a83      	ldrb	r3, [r0, #10]
   1f80c:	2b07      	cmp	r3, #7
{
   1f80e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1f810:	d121      	bne.n	1f856 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f812:	f3bf 8f5b 	dmb	ish
   1f816:	6843      	ldr	r3, [r0, #4]
   1f818:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1f81c:	049b      	lsls	r3, r3, #18
   1f81e:	f100 0604 	add.w	r6, r0, #4
   1f822:	d41a      	bmi.n	1f85a <conn_auto_initiate+0x52>
   1f824:	78c3      	ldrb	r3, [r0, #3]
   1f826:	b123      	cbz	r3, 1f832 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   1f828:	4b29      	ldr	r3, [pc, #164]	; (1f8d0 <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1f82a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1f82e:	071d      	lsls	r5, r3, #28
   1f830:	d513      	bpl.n	1f85a <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1f832:	2102      	movs	r1, #2
   1f834:	f242 0016 	movw	r0, #8214	; 0x2016
   1f838:	f7ff fd56 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   1f83c:	4605      	mov	r5, r0
   1f83e:	b160      	cbz	r0, 1f85a <conn_auto_initiate+0x52>
   1f840:	2102      	movs	r1, #2
   1f842:	3008      	adds	r0, #8
   1f844:	f010 f90d 	bl	2fa62 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f848:	8823      	ldrh	r3, [r4, #0]
   1f84a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   1f84c:	4629      	mov	r1, r5
   1f84e:	f242 0016 	movw	r0, #8214	; 0x2016
   1f852:	f7ff ffb7 	bl	1f7c4 <bt_hci_cmd_send>
}
   1f856:	b004      	add	sp, #16
   1f858:	bd70      	pop	{r4, r5, r6, pc}
   1f85a:	f3bf 8f5b 	dmb	ish
   1f85e:	6863      	ldr	r3, [r4, #4]
   1f860:	4d1b      	ldr	r5, [pc, #108]	; (1f8d0 <conn_auto_initiate+0xc8>)
   1f862:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1f866:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1f86a:	f3c3 3100 	ubfx	r1, r3, #12, #1
   1f86e:	d117      	bne.n	1f8a0 <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1f870:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   1f874:	07d8      	lsls	r0, r3, #31
   1f876:	d513      	bpl.n	1f8a0 <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1f878:	2302      	movs	r3, #2
   1f87a:	9100      	str	r1, [sp, #0]
   1f87c:	461a      	mov	r2, r3
   1f87e:	4620      	mov	r0, r4
   1f880:	f00d fc42 	bl	2d108 <bt_le_set_phy>
		if (!err) {
   1f884:	b960      	cbnz	r0, 1f8a0 <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f886:	f3bf 8f5b 	dmb	ish
   1f88a:	e856 3f00 	ldrex	r3, [r6]
   1f88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f892:	e846 3200 	strex	r2, r3, [r6]
   1f896:	2a00      	cmp	r2, #0
   1f898:	d1f7      	bne.n	1f88a <conn_auto_initiate+0x82>
   1f89a:	f3bf 8f5b 	dmb	ish
			return;
   1f89e:	e7da      	b.n	1f856 <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1f8a0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1f8a4:	069a      	lsls	r2, r3, #26
   1f8a6:	d5d6      	bpl.n	1f856 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1f8a8:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1f8ac:	689b      	ldr	r3, [r3, #8]
   1f8ae:	079b      	lsls	r3, r3, #30
   1f8b0:	d5d1      	bpl.n	1f856 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1f8b2:	f10d 010e 	add.w	r1, sp, #14
   1f8b6:	a803      	add	r0, sp, #12
   1f8b8:	f00d fbb6 	bl	2d028 <hci_le_read_max_data_len>
			if (!err) {
   1f8bc:	2800      	cmp	r0, #0
   1f8be:	d1ca      	bne.n	1f856 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   1f8c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1f8c4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1f8c8:	4620      	mov	r0, r4
   1f8ca:	f00d fc00 	bl	2d0ce <bt_le_set_data_len>
		}
   1f8ce:	e7c2      	b.n	1f856 <conn_auto_initiate+0x4e>
   1f8d0:	200002b0 	.word	0x200002b0

0001f8d4 <bt_hci_le_enh_conn_complete>:
{
   1f8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1f8d8:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   1f8dc:	4a68      	ldr	r2, [pc, #416]	; (1fa80 <bt_hci_le_enh_conn_complete+0x1ac>)
	if (evt->status) {
   1f8de:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   1f8e0:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   1f8e2:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   1f8e6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   1f8ea:	b29b      	uxth	r3, r3
   1f8ec:	4299      	cmp	r1, r3
   1f8ee:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   1f8f2:	bf08      	it	eq
   1f8f4:	8016      	strheq	r6, [r2, #0]
{
   1f8f6:	b085      	sub	sp, #20
   1f8f8:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1f8fa:	fa1f f887 	uxth.w	r8, r7
			return true;
   1f8fe:	bf08      	it	eq
   1f900:	2601      	moveq	r6, #1
	if (evt->status) {
   1f902:	b1f4      	cbz	r4, 1f942 <bt_hci_le_enh_conn_complete+0x6e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1f904:	2c3c      	cmp	r4, #60	; 0x3c
   1f906:	d157      	bne.n	1f9b8 <bt_hci_le_enh_conn_complete+0xe4>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1f908:	f000 fce0 	bl	202cc <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f90c:	f3bf 8f5b 	dmb	ish
   1f910:	3010      	adds	r0, #16
   1f912:	e850 3f00 	ldrex	r3, [r0]
   1f916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1f91a:	e840 3200 	strex	r2, r3, [r0]
   1f91e:	2a00      	cmp	r2, #0
   1f920:	d1f7      	bne.n	1f912 <bt_hci_le_enh_conn_complete+0x3e>
   1f922:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1f926:	2000      	movs	r0, #0
   1f928:	f7ff fb8c 	bl	1f044 <find_pending_connect.part.0>
		if (!conn) {
   1f92c:	4605      	mov	r5, r0
   1f92e:	2800      	cmp	r0, #0
   1f930:	d042      	beq.n	1f9b8 <bt_hci_le_enh_conn_complete+0xe4>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1f932:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1f934:	2100      	movs	r1, #0
   1f936:	f001 f823 	bl	20980 <bt_conn_set_state>
		bt_conn_unref(conn);
   1f93a:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   1f93c:	f00d ff23 	bl	2d786 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1f940:	e03a      	b.n	1f9b8 <bt_hci_le_enh_conn_complete+0xe4>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1f942:	7903      	ldrb	r3, [r0, #4]
   1f944:	3b02      	subs	r3, #2
   1f946:	2b01      	cmp	r3, #1
   1f948:	f100 0904 	add.w	r9, r0, #4
   1f94c:	d837      	bhi.n	1f9be <bt_hci_le_enh_conn_complete+0xea>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   1f94e:	2207      	movs	r2, #7
   1f950:	4649      	mov	r1, r9
   1f952:	a802      	add	r0, sp, #8
   1f954:	f00d f9b1 	bl	2ccba <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1f958:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   1f95c:	2206      	movs	r2, #6
   1f95e:	3b02      	subs	r3, #2
   1f960:	f105 0111 	add.w	r1, r5, #17
   1f964:	f10d 0001 	add.w	r0, sp, #1
   1f968:	f88d 3008 	strb.w	r3, [sp, #8]
   1f96c:	f00d f9a5 	bl	2ccba <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1f970:	2301      	movs	r3, #1
   1f972:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1f976:	78eb      	ldrb	r3, [r5, #3]
   1f978:	2b01      	cmp	r3, #1
   1f97a:	d119      	bne.n	1f9b0 <bt_hci_le_enh_conn_complete+0xdc>
   1f97c:	a802      	add	r0, sp, #8
   1f97e:	f7ff fb61 	bl	1f044 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1f982:	78eb      	ldrb	r3, [r5, #3]
   1f984:	2b01      	cmp	r3, #1
   1f986:	4604      	mov	r4, r0
   1f988:	d111      	bne.n	1f9ae <bt_hci_le_enh_conn_complete+0xda>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1f98a:	f000 fc9f 	bl	202cc <bt_le_adv_lookup_legacy>
   1f98e:	f3bf 8f5b 	dmb	ish
   1f992:	f100 0310 	add.w	r3, r0, #16
   1f996:	e853 2f00 	ldrex	r2, [r3]
   1f99a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1f99e:	e843 2100 	strex	r1, r2, [r3]
   1f9a2:	2900      	cmp	r1, #0
   1f9a4:	d1f7      	bne.n	1f996 <bt_hci_le_enh_conn_complete+0xc2>
   1f9a6:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   1f9aa:	f00d fe2f 	bl	2d60c <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   1f9ae:	b9dc      	cbnz	r4, 1f9e8 <bt_hci_le_enh_conn_complete+0x114>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1f9b0:	211f      	movs	r1, #31
   1f9b2:	4640      	mov	r0, r8
   1f9b4:	f00d fb50 	bl	2d058 <bt_hci_disconnect>
}
   1f9b8:	b005      	add	sp, #20
   1f9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1f9be:	78c3      	ldrb	r3, [r0, #3]
   1f9c0:	2b01      	cmp	r3, #1
   1f9c2:	bf04      	itt	eq
   1f9c4:	4b2f      	ldreq	r3, [pc, #188]	; (1fa84 <bt_hci_le_enh_conn_complete+0x1b0>)
   1f9c6:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   1f9ca:	4649      	mov	r1, r9
   1f9cc:	4620      	mov	r0, r4
   1f9ce:	f00d fcbf 	bl	2d350 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   1f9d2:	2207      	movs	r2, #7
   1f9d4:	4601      	mov	r1, r0
   1f9d6:	a802      	add	r0, sp, #8
   1f9d8:	f00d f96f 	bl	2ccba <memcpy>
   1f9dc:	2207      	movs	r2, #7
   1f9de:	4649      	mov	r1, r9
   1f9e0:	4668      	mov	r0, sp
   1f9e2:	f00d f96a 	bl	2ccba <memcpy>
}
   1f9e6:	e7c6      	b.n	1f976 <bt_hci_le_enh_conn_complete+0xa2>
	conn->handle = handle;
   1f9e8:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1f9ea:	2207      	movs	r2, #7
   1f9ec:	f820 7b88 	strh.w	r7, [r0], #136
   1f9f0:	a902      	add	r1, sp, #8
   1f9f2:	f00d f962 	bl	2ccba <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1f9f6:	7e2a      	ldrb	r2, [r5, #24]
   1f9f8:	7deb      	ldrb	r3, [r5, #23]
   1f9fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f9fe:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1fa02:	7eaa      	ldrb	r2, [r5, #26]
   1fa04:	7e6b      	ldrb	r3, [r5, #25]
   1fa06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1fa0a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1fa0e:	7eeb      	ldrb	r3, [r5, #27]
   1fa10:	7f2a      	ldrb	r2, [r5, #28]
   1fa12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1fa16:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1fa1a:	78eb      	ldrb	r3, [r5, #3]
   1fa1c:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   1fa1e:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1fa20:	2b01      	cmp	r3, #1
	conn->err = 0U;
   1fa22:	7265      	strb	r5, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1fa24:	d11a      	bne.n	1fa5c <bt_hci_le_enh_conn_complete+0x188>
   1fa26:	2207      	movs	r2, #7
   1fa28:	4669      	mov	r1, sp
   1fa2a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1fa2e:	f00d f944 	bl	2ccba <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1fa32:	f000 fc4b 	bl	202cc <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1fa36:	7a21      	ldrb	r1, [r4, #8]
   1fa38:	4f12      	ldr	r7, [pc, #72]	; (1fa84 <bt_hci_le_enh_conn_complete+0x1b0>)
   1fa3a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1fa3e:	2207      	movs	r2, #7
   1fa40:	4439      	add	r1, r7
   1fa42:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1fa46:	f00d f938 	bl	2ccba <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1fa4a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
   1fa4e:	462a      	mov	r2, r5
   1fa50:	f001 0340 	and.w	r3, r1, #64	; 0x40
   1fa54:	4313      	orrs	r3, r2
   1fa56:	d001      	beq.n	1fa5c <bt_hci_le_enh_conn_complete+0x188>
			bt_le_adv_resume();
   1fa58:	f000 fde2 	bl	20620 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1fa5c:	2107      	movs	r1, #7
   1fa5e:	4620      	mov	r0, r4
   1fa60:	f000 ff8e 	bl	20980 <bt_conn_set_state>
	if (is_disconnected) {
   1fa64:	b11e      	cbz	r6, 1fa6e <bt_hci_le_enh_conn_complete+0x19a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1fa66:	2101      	movs	r1, #1
   1fa68:	4620      	mov	r0, r4
   1fa6a:	f000 ff89 	bl	20980 <bt_conn_set_state>
	bt_conn_connected(conn);
   1fa6e:	4620      	mov	r0, r4
   1fa70:	f00d fec5 	bl	2d7fe <bt_conn_connected>
	conn_auto_initiate(conn);
   1fa74:	4620      	mov	r0, r4
   1fa76:	f7ff fec7 	bl	1f808 <conn_auto_initiate>
	bt_conn_unref(conn);
   1fa7a:	4620      	mov	r0, r4
   1fa7c:	e75e      	b.n	1f93c <bt_hci_le_enh_conn_complete+0x68>
   1fa7e:	bf00      	nop
   1fa80:	200036e8 	.word	0x200036e8
   1fa84:	200002b0 	.word	0x200002b0

0001fa88 <hci_tx_thread>:
{
   1fa88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1fa8c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1fb9c <hci_tx_thread+0x114>
		BT_ASSERT(err == 0);
   1fa90:	f8df a120 	ldr.w	sl, [pc, #288]	; 1fbb4 <hci_tx_thread+0x12c>
		events[0].state = K_POLL_STATE_NOT_READY;
   1fa94:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1fa98:	483f      	ldr	r0, [pc, #252]	; (1fb98 <hci_tx_thread+0x110>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1fa9a:	f36f 3352 	bfc	r3, #13, #6
   1fa9e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1faa2:	f000 ff23 	bl	208ec <bt_conn_prepare_events>
   1faa6:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1faa8:	483c      	ldr	r0, [pc, #240]	; (1fb9c <hci_tx_thread+0x114>)
   1faaa:	f04f 32ff 	mov.w	r2, #4294967295
   1faae:	f04f 33ff 	mov.w	r3, #4294967295
   1fab2:	4629      	mov	r1, r5
   1fab4:	f009 f9ba 	bl	28e2c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1fab8:	b160      	cbz	r0, 1fad4 <hci_tx_thread+0x4c>
   1faba:	4939      	ldr	r1, [pc, #228]	; (1fba0 <hci_tx_thread+0x118>)
   1fabc:	4839      	ldr	r0, [pc, #228]	; (1fba4 <hci_tx_thread+0x11c>)
   1fabe:	f640 1393 	movw	r3, #2451	; 0x993
   1fac2:	4652      	mov	r2, sl
   1fac4:	f00b ffea 	bl	2ba9c <printk>
   1fac8:	4040      	eors	r0, r0
   1faca:	f380 8811 	msr	BASEPRI, r0
   1face:	f04f 0003 	mov.w	r0, #3
   1fad2:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1fad4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 1fbb8 <hci_tx_thread+0x130>
{
   1fad8:	4e30      	ldr	r6, [pc, #192]	; (1fb9c <hci_tx_thread+0x114>)
	return z_impl_k_sem_take(sem, timeout);
   1fada:	f5a9 77a6 	sub.w	r7, r9, #332	; 0x14c
   1fade:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   1fae2:	b915      	cbnz	r5, 1faea <hci_tx_thread+0x62>
	z_impl_k_yield();
   1fae4:	f008 fe64 	bl	287b0 <z_impl_k_yield>
	while (1) {
   1fae8:	e7d4      	b.n	1fa94 <hci_tx_thread+0xc>
		switch (ev->state) {
   1faea:	68f3      	ldr	r3, [r6, #12]
   1faec:	f3c3 3345 	ubfx	r3, r3, #13, #6
   1faf0:	2b04      	cmp	r3, #4
   1faf2:	d147      	bne.n	1fb84 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1faf4:	7b33      	ldrb	r3, [r6, #12]
   1faf6:	2b00      	cmp	r3, #0
   1faf8:	d147      	bne.n	1fb8a <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1fafa:	2200      	movs	r2, #0
   1fafc:	2300      	movs	r3, #0
   1fafe:	4648      	mov	r0, r9
   1fb00:	f00f ff5e 	bl	2f9c0 <net_buf_get>
	BT_ASSERT(buf);
   1fb04:	4604      	mov	r4, r0
   1fb06:	b960      	cbnz	r0, 1fb22 <hci_tx_thread+0x9a>
   1fb08:	4927      	ldr	r1, [pc, #156]	; (1fba8 <hci_tx_thread+0x120>)
   1fb0a:	4826      	ldr	r0, [pc, #152]	; (1fba4 <hci_tx_thread+0x11c>)
   1fb0c:	f640 132a 	movw	r3, #2346	; 0x92a
   1fb10:	4652      	mov	r2, sl
   1fb12:	f00b ffc3 	bl	2ba9c <printk>
   1fb16:	4040      	eors	r0, r0
   1fb18:	f380 8811 	msr	BASEPRI, r0
   1fb1c:	f04f 0003 	mov.w	r0, #3
   1fb20:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1fb22:	f04f 32ff 	mov.w	r2, #4294967295
   1fb26:	f04f 33ff 	mov.w	r3, #4294967295
   1fb2a:	4658      	mov	r0, fp
   1fb2c:	f008 f9ce 	bl	27ecc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1fb30:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   1fb34:	b120      	cbz	r0, 1fb40 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   1fb36:	f003 fcf5 	bl	23524 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1fb3a:	2300      	movs	r3, #0
   1fb3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   1fb40:	4620      	mov	r0, r4
   1fb42:	f00f ff68 	bl	2fa16 <net_buf_ref>
   1fb46:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   1fb4a:	4620      	mov	r0, r4
   1fb4c:	f7ff fe32 	bl	1f7b4 <bt_send>
	if (err) {
   1fb50:	b1c0      	cbz	r0, 1fb84 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   1fb52:	4816      	ldr	r0, [pc, #88]	; (1fbac <hci_tx_thread+0x124>)
   1fb54:	f008 f994 	bl	27e80 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1fb58:	4620      	mov	r0, r4
   1fb5a:	f003 fc2b 	bl	233b4 <net_buf_id>
   1fb5e:	4b14      	ldr	r3, [pc, #80]	; (1fbb0 <hci_tx_thread+0x128>)
   1fb60:	220c      	movs	r2, #12
   1fb62:	fb02 3000 	mla	r0, r2, r0, r3
   1fb66:	211f      	movs	r1, #31
   1fb68:	8840      	ldrh	r0, [r0, #2]
   1fb6a:	4622      	mov	r2, r4
   1fb6c:	f7ff fa88 	bl	1f080 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   1fb70:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   1fb74:	f003 fcd6 	bl	23524 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1fb78:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1fb7a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   1fb7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   1fb80:	f003 fcd0 	bl	23524 <net_buf_unref>
	for (; count; ev++, count--) {
   1fb84:	3614      	adds	r6, #20
   1fb86:	3d01      	subs	r5, #1
   1fb88:	e7ab      	b.n	1fae2 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1fb8a:	2b01      	cmp	r3, #1
   1fb8c:	d1fa      	bne.n	1fb84 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   1fb8e:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1fb90:	3838      	subs	r0, #56	; 0x38
   1fb92:	f001 f997 	bl	20ec4 <bt_conn_process_tx>
   1fb96:	e7f5      	b.n	1fb84 <hci_tx_thread+0xfc>
   1fb98:	200005ac 	.word	0x200005ac
   1fb9c:	20000598 	.word	0x20000598
   1fba0:	000331ca 	.word	0x000331ca
   1fba4:	0003317f 	.word	0x0003317f
   1fba8:	000331f3 	.word	0x000331f3
   1fbac:	200003c8 	.word	0x200003c8
   1fbb0:	2000287c 	.word	0x2000287c
   1fbb4:	00033132 	.word	0x00033132
   1fbb8:	200003fc 	.word	0x200003fc

0001fbbc <hci_event_prio>:
{
   1fbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fbc0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1fbc2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1fbc6:	4630      	mov	r0, r6
   1fbc8:	f00f ff82 	bl	2fad0 <net_buf_simple_headroom>
	state->len = buf->len;
   1fbcc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1fbd0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   1fbd4:	4605      	mov	r5, r0
   1fbd6:	d80c      	bhi.n	1fbf2 <hci_event_prio+0x36>
   1fbd8:	4a1c      	ldr	r2, [pc, #112]	; (1fc4c <hci_event_prio+0x90>)
   1fbda:	491d      	ldr	r1, [pc, #116]	; (1fc50 <hci_event_prio+0x94>)
   1fbdc:	481d      	ldr	r0, [pc, #116]	; (1fc54 <hci_event_prio+0x98>)
   1fbde:	f640 5327 	movw	r3, #3367	; 0xd27
   1fbe2:	f00b ff5b 	bl	2ba9c <printk>
   1fbe6:	4040      	eors	r0, r0
   1fbe8:	f380 8811 	msr	BASEPRI, r0
   1fbec:	f04f 0003 	mov.w	r0, #3
   1fbf0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1fbf2:	2102      	movs	r1, #2
   1fbf4:	4630      	mov	r0, r6
   1fbf6:	f00f ff5b 	bl	2fab0 <net_buf_simple_pull_mem>
   1fbfa:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1fbfc:	7800      	ldrb	r0, [r0, #0]
   1fbfe:	f00d f928 	bl	2ce52 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1fc02:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1fc04:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1fc06:	d40c      	bmi.n	1fc22 <hci_event_prio+0x66>
   1fc08:	4a10      	ldr	r2, [pc, #64]	; (1fc4c <hci_event_prio+0x90>)
   1fc0a:	4913      	ldr	r1, [pc, #76]	; (1fc58 <hci_event_prio+0x9c>)
   1fc0c:	4811      	ldr	r0, [pc, #68]	; (1fc54 <hci_event_prio+0x98>)
   1fc0e:	f640 532b 	movw	r3, #3371	; 0xd2b
   1fc12:	f00b ff43 	bl	2ba9c <printk>
   1fc16:	4040      	eors	r0, r0
   1fc18:	f380 8811 	msr	BASEPRI, r0
   1fc1c:	f04f 0003 	mov.w	r0, #3
   1fc20:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1fc22:	2305      	movs	r3, #5
   1fc24:	4a0d      	ldr	r2, [pc, #52]	; (1fc5c <hci_event_prio+0xa0>)
   1fc26:	7838      	ldrb	r0, [r7, #0]
   1fc28:	4621      	mov	r1, r4
   1fc2a:	f00d f924 	bl	2ce76 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1fc2e:	07b3      	lsls	r3, r6, #30
   1fc30:	d507      	bpl.n	1fc42 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1fc32:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1fc34:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1fc38:	fa10 f585 	uxtah	r5, r0, r5
   1fc3c:	60a5      	str	r5, [r4, #8]
}
   1fc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1fc42:	4620      	mov	r0, r4
}
   1fc44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1fc48:	f003 bc6c 	b.w	23524 <net_buf_unref>
   1fc4c:	00033132 	.word	0x00033132
   1fc50:	00033166 	.word	0x00033166
   1fc54:	0003317f 	.word	0x0003317f
   1fc58:	000331f7 	.word	0x000331f7
   1fc5c:	000328f8 	.word	0x000328f8

0001fc60 <bt_recv>:
{
   1fc60:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1fc62:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   1fc64:	2b01      	cmp	r3, #1
{
   1fc66:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1fc68:	d007      	beq.n	1fc7a <bt_recv+0x1a>
   1fc6a:	2b03      	cmp	r3, #3
   1fc6c:	d113      	bne.n	1fc96 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1fc6e:	480c      	ldr	r0, [pc, #48]	; (1fca0 <bt_recv+0x40>)
   1fc70:	4629      	mov	r1, r5
   1fc72:	f00f fec3 	bl	2f9fc <net_buf_put>
		return 0;
   1fc76:	2000      	movs	r0, #0
   1fc78:	e00c      	b.n	1fc94 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1fc7a:	6883      	ldr	r3, [r0, #8]
   1fc7c:	7818      	ldrb	r0, [r3, #0]
   1fc7e:	f00d f8e8 	bl	2ce52 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1fc82:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1fc84:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1fc86:	d502      	bpl.n	1fc8e <bt_recv+0x2e>
			hci_event_prio(buf);
   1fc88:	4628      	mov	r0, r5
   1fc8a:	f7ff ff97 	bl	1fbbc <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1fc8e:	f014 0002 	ands.w	r0, r4, #2
   1fc92:	d1ec      	bne.n	1fc6e <bt_recv+0xe>
}
   1fc94:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1fc96:	f003 fc45 	bl	23524 <net_buf_unref>
		return -EINVAL;
   1fc9a:	f06f 0015 	mvn.w	r0, #21
   1fc9e:	e7f9      	b.n	1fc94 <bt_recv+0x34>
   1fca0:	200003e4 	.word	0x200003e4

0001fca4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1fca4:	4a08      	ldr	r2, [pc, #32]	; (1fcc8 <bt_hci_driver_register+0x24>)
{
   1fca6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1fca8:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   1fcac:	b930      	cbnz	r0, 1fcbc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1fcae:	68d9      	ldr	r1, [r3, #12]
   1fcb0:	b139      	cbz	r1, 1fcc2 <bt_hci_driver_register+0x1e>
   1fcb2:	6919      	ldr	r1, [r3, #16]
   1fcb4:	b129      	cbz	r1, 1fcc2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1fcb6:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   1fcba:	4770      	bx	lr
		return -EALREADY;
   1fcbc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1fcc0:	4770      	bx	lr
		return -EINVAL;
   1fcc2:	f06f 0015 	mvn.w	r0, #21
}
   1fcc6:	4770      	bx	lr
   1fcc8:	200002b0 	.word	0x200002b0

0001fccc <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fccc:	4b06      	ldr	r3, [pc, #24]	; (1fce8 <bt_finalize_init+0x1c>)
   1fcce:	f3bf 8f5b 	dmb	ish
   1fcd2:	e853 2f00 	ldrex	r2, [r3]
   1fcd6:	f042 0202 	orr.w	r2, r2, #2
   1fcda:	e843 2100 	strex	r1, r2, [r3]
   1fcde:	2900      	cmp	r1, #0
   1fce0:	d1f7      	bne.n	1fcd2 <bt_finalize_init+0x6>
   1fce2:	f3bf 8f5b 	dmb	ish
}
   1fce6:	4770      	bx	lr
   1fce8:	2000037c 	.word	0x2000037c

0001fcec <init_work>:
{
   1fcec:	b510      	push	{r4, lr}
	err = hci_init();
   1fcee:	f7ff fb95 	bl	1f41c <hci_init>
	if (err) {
   1fcf2:	b920      	cbnz	r0, 1fcfe <init_work+0x12>
		err = bt_conn_init();
   1fcf4:	f001 f94e 	bl	20f94 <bt_conn_init>
		if (err) {
   1fcf8:	b908      	cbnz	r0, 1fcfe <init_work+0x12>
	bt_finalize_init();
   1fcfa:	f7ff ffe7 	bl	1fccc <bt_finalize_init>
	if (ready_cb) {
   1fcfe:	4b03      	ldr	r3, [pc, #12]	; (1fd0c <init_work+0x20>)
   1fd00:	681b      	ldr	r3, [r3, #0]
   1fd02:	b113      	cbz	r3, 1fd0a <init_work+0x1e>
}
   1fd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1fd08:	4718      	bx	r3
}
   1fd0a:	bd10      	pop	{r4, pc}
   1fd0c:	20002894 	.word	0x20002894

0001fd10 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   1fd10:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   1fd14:	4d32      	ldr	r5, [pc, #200]	; (1fde0 <bt_enable+0xd0>)
   1fd16:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   1fd1a:	b088      	sub	sp, #32
   1fd1c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1fd1e:	2b00      	cmp	r3, #0
   1fd20:	d058      	beq.n	1fdd4 <bt_enable+0xc4>
   1fd22:	f3bf 8f5b 	dmb	ish
   1fd26:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   1fd2a:	e853 4f00 	ldrex	r4, [r3]
   1fd2e:	f044 0201 	orr.w	r2, r4, #1
   1fd32:	e843 2100 	strex	r1, r2, [r3]
   1fd36:	2900      	cmp	r1, #0
   1fd38:	d1f7      	bne.n	1fd2a <bt_enable+0x1a>
   1fd3a:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1fd3e:	f014 0401 	ands.w	r4, r4, #1
   1fd42:	d14a      	bne.n	1fdda <bt_enable+0xca>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   1fd44:	4b27      	ldr	r3, [pc, #156]	; (1fde4 <bt_enable+0xd4>)
   1fd46:	f04f 0800 	mov.w	r8, #0
   1fd4a:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   1fd4c:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fd50:	f06f 0308 	mvn.w	r3, #8
   1fd54:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1fd58:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1fd5c:	e9cd 4400 	strd	r4, r4, [sp]
   1fd60:	4b21      	ldr	r3, [pc, #132]	; (1fde8 <bt_enable+0xd8>)
   1fd62:	4922      	ldr	r1, [pc, #136]	; (1fdec <bt_enable+0xdc>)
   1fd64:	9404      	str	r4, [sp, #16]
   1fd66:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1fd6a:	4821      	ldr	r0, [pc, #132]	; (1fdf0 <bt_enable+0xe0>)
   1fd6c:	f007 fef0 	bl	27b50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1fd70:	4920      	ldr	r1, [pc, #128]	; (1fdf4 <bt_enable+0xe4>)
   1fd72:	481f      	ldr	r0, [pc, #124]	; (1fdf0 <bt_enable+0xe0>)
   1fd74:	f011 fc8d 	bl	31692 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fd78:	f06f 0307 	mvn.w	r3, #7
   1fd7c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1fd80:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1fd84:	e9cd 4400 	strd	r4, r4, [sp]
   1fd88:	4b1b      	ldr	r3, [pc, #108]	; (1fdf8 <bt_enable+0xe8>)
   1fd8a:	491c      	ldr	r1, [pc, #112]	; (1fdfc <bt_enable+0xec>)
   1fd8c:	9404      	str	r4, [sp, #16]
   1fd8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fd92:	481b      	ldr	r0, [pc, #108]	; (1fe00 <bt_enable+0xf0>)
   1fd94:	f007 fedc 	bl	27b50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1fd98:	491a      	ldr	r1, [pc, #104]	; (1fe04 <bt_enable+0xf4>)
   1fd9a:	4819      	ldr	r0, [pc, #100]	; (1fe00 <bt_enable+0xf0>)
   1fd9c:	f011 fc79 	bl	31692 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   1fda0:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1fda4:	68db      	ldr	r3, [r3, #12]
   1fda6:	4798      	blx	r3
	if (err) {
   1fda8:	4604      	mov	r4, r0
   1fdaa:	b950      	cbnz	r0, 1fdc2 <bt_enable+0xb2>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   1fdac:	b96e      	cbnz	r6, 1fdca <bt_enable+0xba>
	err = hci_init();
   1fdae:	f7ff fb35 	bl	1f41c <hci_init>
	if (err) {
   1fdb2:	4604      	mov	r4, r0
   1fdb4:	b928      	cbnz	r0, 1fdc2 <bt_enable+0xb2>
		err = bt_conn_init();
   1fdb6:	f001 f8ed 	bl	20f94 <bt_conn_init>
		if (err) {
   1fdba:	4604      	mov	r4, r0
   1fdbc:	b908      	cbnz	r0, 1fdc2 <bt_enable+0xb2>
	bt_finalize_init();
   1fdbe:	f7ff ff85 	bl	1fccc <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1fdc2:	4620      	mov	r0, r4
   1fdc4:	b008      	add	sp, #32
   1fdc6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	k_work_submit(&bt_dev.init);
   1fdca:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1fdce:	f008 f9ef 	bl	281b0 <k_work_submit>
	return 0;
   1fdd2:	e7f6      	b.n	1fdc2 <bt_enable+0xb2>
		return -ENODEV;
   1fdd4:	f06f 0412 	mvn.w	r4, #18
   1fdd8:	e7f3      	b.n	1fdc2 <bt_enable+0xb2>
		return -EALREADY;
   1fdda:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1fdde:	e7f0      	b.n	1fdc2 <bt_enable+0xb2>
   1fde0:	200002b0 	.word	0x200002b0
   1fde4:	20002894 	.word	0x20002894
   1fde8:	0001fa89 	.word	0x0001fa89
   1fdec:	20004d00 	.word	0x20004d00
   1fdf0:	20001bc8 	.word	0x20001bc8
   1fdf4:	00033210 	.word	0x00033210
   1fdf8:	0001f15d 	.word	0x0001f15d
   1fdfc:	200048e0 	.word	0x200048e0
   1fe00:	20001b48 	.word	0x20001b48
   1fe04:	00033216 	.word	0x00033216

0001fe08 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1fe08:	4800      	ldr	r0, [pc, #0]	; (1fe0c <bt_get_name+0x4>)
   1fe0a:	4770      	bx	lr
   1fe0c:	00032f2a 	.word	0x00032f2a

0001fe10 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1fe12:	4f0b      	ldr	r7, [pc, #44]	; (1fe40 <id_find+0x30>)
{
   1fe14:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1fe16:	2500      	movs	r5, #0
   1fe18:	79fb      	ldrb	r3, [r7, #7]
   1fe1a:	b2ec      	uxtb	r4, r5
   1fe1c:	42a3      	cmp	r3, r4
   1fe1e:	d802      	bhi.n	1fe26 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1fe20:	f06f 0401 	mvn.w	r4, #1
   1fe24:	e009      	b.n	1fe3a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1fe26:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1fe2a:	2207      	movs	r2, #7
   1fe2c:	4439      	add	r1, r7
   1fe2e:	4630      	mov	r0, r6
   1fe30:	f00c ff1c 	bl	2cc6c <memcmp>
   1fe34:	3501      	adds	r5, #1
   1fe36:	2800      	cmp	r0, #0
   1fe38:	d1ee      	bne.n	1fe18 <id_find+0x8>
}
   1fe3a:	4620      	mov	r0, r4
   1fe3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fe3e:	bf00      	nop
   1fe40:	200002b0 	.word	0x200002b0

0001fe44 <set_random_address>:
{
   1fe44:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1fe46:	4914      	ldr	r1, [pc, #80]	; (1fe98 <set_random_address+0x54>)
   1fe48:	2206      	movs	r2, #6
   1fe4a:	4605      	mov	r5, r0
   1fe4c:	f00c ff0e 	bl	2cc6c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1fe50:	4604      	mov	r4, r0
   1fe52:	b1e0      	cbz	r0, 1fe8e <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1fe54:	2106      	movs	r1, #6
   1fe56:	f242 0005 	movw	r0, #8197	; 0x2005
   1fe5a:	f7ff fa45 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   1fe5e:	4604      	mov	r4, r0
   1fe60:	b1b8      	cbz	r0, 1fe92 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1fe62:	2206      	movs	r2, #6
   1fe64:	4629      	mov	r1, r5
   1fe66:	3008      	adds	r0, #8
   1fe68:	f00f fe01 	bl	2fa6e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1fe6c:	4621      	mov	r1, r4
   1fe6e:	2200      	movs	r2, #0
   1fe70:	f242 0005 	movw	r0, #8197	; 0x2005
   1fe74:	f7ff fa70 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1fe78:	4604      	mov	r4, r0
   1fe7a:	b940      	cbnz	r0, 1fe8e <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   1fe7c:	2206      	movs	r2, #6
   1fe7e:	4806      	ldr	r0, [pc, #24]	; (1fe98 <set_random_address+0x54>)
   1fe80:	4629      	mov	r1, r5
   1fe82:	f00c ff1a 	bl	2ccba <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1fe86:	4b05      	ldr	r3, [pc, #20]	; (1fe9c <set_random_address+0x58>)
   1fe88:	2201      	movs	r2, #1
   1fe8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   1fe8e:	4620      	mov	r0, r4
   1fe90:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1fe92:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1fe96:	e7fa      	b.n	1fe8e <set_random_address+0x4a>
   1fe98:	20000311 	.word	0x20000311
   1fe9c:	200002b0 	.word	0x200002b0

0001fea0 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1fea0:	b530      	push	{r4, r5, lr}
   1fea2:	4604      	mov	r4, r0
   1fea4:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1fea6:	460d      	mov	r5, r1
   1fea8:	b1a1      	cbz	r1, 1fed4 <id_create.isra.0+0x34>
   1feaa:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1feac:	2207      	movs	r2, #7
   1feae:	a902      	add	r1, sp, #8
   1feb0:	4628      	mov	r0, r5
   1feb2:	9302      	str	r3, [sp, #8]
   1feb4:	f8cd 300b 	str.w	r3, [sp, #11]
   1feb8:	f00c fed8 	bl	2cc6c <memcmp>
   1febc:	b150      	cbz	r0, 1fed4 <id_create.isra.0+0x34>
	memcpy(dst, src, sizeof(*dst));
   1febe:	4812      	ldr	r0, [pc, #72]	; (1ff08 <id_create.isra.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1fec0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1fec4:	2207      	movs	r2, #7
   1fec6:	4629      	mov	r1, r5
   1fec8:	4420      	add	r0, r4
   1feca:	f00c fef6 	bl	2ccba <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1fece:	2000      	movs	r0, #0
}
   1fed0:	b005      	add	sp, #20
   1fed2:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1fed4:	4668      	mov	r0, sp
   1fed6:	f00c ffae 	bl	2ce36 <bt_addr_le_create_static>
			if (err) {
   1feda:	2800      	cmp	r0, #0
   1fedc:	d1f8      	bne.n	1fed0 <id_create.isra.0+0x30>
		} while (id_find(&new_addr) >= 0);
   1fede:	4668      	mov	r0, sp
   1fee0:	f7ff ff96 	bl	1fe10 <id_find>
   1fee4:	2800      	cmp	r0, #0
   1fee6:	daf5      	bge.n	1fed4 <id_create.isra.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1fee8:	4807      	ldr	r0, [pc, #28]	; (1ff08 <id_create.isra.0+0x68>)
   1feea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1feee:	4404      	add	r4, r0
   1fef0:	2207      	movs	r2, #7
   1fef2:	4669      	mov	r1, sp
   1fef4:	4620      	mov	r0, r4
   1fef6:	f00c fee0 	bl	2ccba <memcpy>
		if (addr) {
   1fefa:	2d00      	cmp	r5, #0
   1fefc:	d0e7      	beq.n	1fece <id_create.isra.0+0x2e>
   1fefe:	2207      	movs	r2, #7
   1ff00:	4621      	mov	r1, r4
   1ff02:	4628      	mov	r0, r5
   1ff04:	e7e1      	b.n	1feca <id_create.isra.0+0x2a>
   1ff06:	bf00      	nop
   1ff08:	200002b0 	.word	0x200002b0

0001ff0c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1ff0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ff0e:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1ff10:	4604      	mov	r4, r0
   1ff12:	b918      	cbnz	r0, 1ff1c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1ff14:	b1ee      	cbz	r6, 1ff52 <bt_id_create+0x46>
		return -EINVAL;
   1ff16:	f06f 0015 	mvn.w	r0, #21
   1ff1a:	e018      	b.n	1ff4e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1ff1c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1ff1e:	2207      	movs	r2, #7
   1ff20:	4669      	mov	r1, sp
   1ff22:	9300      	str	r3, [sp, #0]
   1ff24:	f8cd 3003 	str.w	r3, [sp, #3]
   1ff28:	f00c fea0 	bl	2cc6c <memcmp>
   1ff2c:	2800      	cmp	r0, #0
   1ff2e:	d0f1      	beq.n	1ff14 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1ff30:	7823      	ldrb	r3, [r4, #0]
   1ff32:	2b01      	cmp	r3, #1
   1ff34:	d1ef      	bne.n	1ff16 <bt_id_create+0xa>
   1ff36:	79a3      	ldrb	r3, [r4, #6]
   1ff38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ff3c:	2bc0      	cmp	r3, #192	; 0xc0
   1ff3e:	d1ea      	bne.n	1ff16 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1ff40:	4620      	mov	r0, r4
   1ff42:	f7ff ff65 	bl	1fe10 <id_find>
   1ff46:	2800      	cmp	r0, #0
   1ff48:	dbe4      	blt.n	1ff14 <bt_id_create+0x8>
			return -EALREADY;
   1ff4a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   1ff4e:	b002      	add	sp, #8
   1ff50:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1ff52:	4d13      	ldr	r5, [pc, #76]	; (1ffa0 <bt_id_create+0x94>)
   1ff54:	79eb      	ldrb	r3, [r5, #7]
   1ff56:	2b01      	cmp	r3, #1
   1ff58:	d01e      	beq.n	1ff98 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ff5a:	f3bf 8f5b 	dmb	ish
   1ff5e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1ff62:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1ff66:	07db      	lsls	r3, r3, #31
   1ff68:	d40b      	bmi.n	1ff82 <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1ff6a:	2c00      	cmp	r4, #0
   1ff6c:	d0d3      	beq.n	1ff16 <bt_id_create+0xa>
   1ff6e:	2207      	movs	r2, #7
   1ff70:	4669      	mov	r1, sp
   1ff72:	4620      	mov	r0, r4
   1ff74:	9600      	str	r6, [sp, #0]
   1ff76:	f8cd 6003 	str.w	r6, [sp, #3]
   1ff7a:	f00c fe77 	bl	2cc6c <memcmp>
   1ff7e:	2800      	cmp	r0, #0
   1ff80:	d0c9      	beq.n	1ff16 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   1ff82:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   1ff84:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   1ff86:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   1ff88:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   1ff8a:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   1ff8c:	f7ff ff88 	bl	1fea0 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   1ff90:	2800      	cmp	r0, #0
   1ff92:	bf08      	it	eq
   1ff94:	4630      	moveq	r0, r6
   1ff96:	e7da      	b.n	1ff4e <bt_id_create+0x42>
		return -ENOMEM;
   1ff98:	f06f 000b 	mvn.w	r0, #11
   1ff9c:	e7d7      	b.n	1ff4e <bt_id_create+0x42>
   1ff9e:	bf00      	nop
   1ffa0:	200002b0 	.word	0x200002b0

0001ffa4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1ffa4:	b570      	push	{r4, r5, r6, lr}
   1ffa6:	b086      	sub	sp, #24
   1ffa8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1ffaa:	aa01      	add	r2, sp, #4
   1ffac:	2100      	movs	r1, #0
   1ffae:	f241 0009 	movw	r0, #4105	; 0x1009
   1ffb2:	f7ff f9d1 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   1ffb6:	4604      	mov	r4, r0
   1ffb8:	b970      	cbnz	r0, 1ffd8 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   1ffba:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1ffbc:	9002      	str	r0, [sp, #8]
   1ffbe:	689d      	ldr	r5, [r3, #8]
   1ffc0:	f8ad 000c 	strh.w	r0, [sp, #12]
   1ffc4:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   1ffc6:	2206      	movs	r2, #6
   1ffc8:	a902      	add	r1, sp, #8
   1ffca:	4628      	mov	r0, r5
   1ffcc:	f00c fe4e 	bl	2cc6c <memcmp>
   1ffd0:	b920      	cbnz	r0, 1ffdc <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1ffd2:	9801      	ldr	r0, [sp, #4]
   1ffd4:	f003 faa6 	bl	23524 <net_buf_unref>
		return 0U;
   1ffd8:	2000      	movs	r0, #0
   1ffda:	e016      	b.n	2000a <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1ffdc:	4b0c      	ldr	r3, [pc, #48]	; (20010 <bt_id_read_public_addr+0x6c>)
   1ffde:	6818      	ldr	r0, [r3, #0]
   1ffe0:	9004      	str	r0, [sp, #16]
   1ffe2:	889b      	ldrh	r3, [r3, #4]
   1ffe4:	f8ad 3014 	strh.w	r3, [sp, #20]
   1ffe8:	2206      	movs	r2, #6
   1ffea:	a904      	add	r1, sp, #16
   1ffec:	4628      	mov	r0, r5
   1ffee:	f00c fe3d 	bl	2cc6c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1fff2:	2800      	cmp	r0, #0
   1fff4:	d0ed      	beq.n	1ffd2 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   1fff6:	2206      	movs	r2, #6
   1fff8:	4629      	mov	r1, r5
   1fffa:	1c70      	adds	r0, r6, #1
   1fffc:	f00c fe5d 	bl	2ccba <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   20000:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   20002:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   20004:	f003 fa8e 	bl	23524 <net_buf_unref>
	return 1U;
   20008:	2001      	movs	r0, #1
}
   2000a:	b006      	add	sp, #24
   2000c:	bd70      	pop	{r4, r5, r6, pc}
   2000e:	bf00      	nop
   20010:	00032543 	.word	0x00032543

00020014 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   20014:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   20016:	4668      	mov	r0, sp
   20018:	f7ff ffc4 	bl	1ffa4 <bt_id_read_public_addr>
   2001c:	4b04      	ldr	r3, [pc, #16]	; (20030 <bt_setup_public_id_addr+0x1c>)
   2001e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   20020:	b118      	cbz	r0, 2002a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   20022:	4669      	mov	r1, sp
   20024:	2000      	movs	r0, #0
   20026:	f7ff ff3b 	bl	1fea0 <id_create.isra.0>
}
   2002a:	b003      	add	sp, #12
   2002c:	f85d fb04 	ldr.w	pc, [sp], #4
   20030:	200002b0 	.word	0x200002b0

00020034 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   20034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   20038:	4b15      	ldr	r3, [pc, #84]	; (20090 <bt_read_static_addr+0x5c>)
   2003a:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   2003e:	f014 0401 	ands.w	r4, r4, #1
{
   20042:	4607      	mov	r7, r0
   20044:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   20046:	d015      	beq.n	20074 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   20048:	aa01      	add	r2, sp, #4
   2004a:	2100      	movs	r1, #0
   2004c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   20050:	f7ff f982 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   20054:	4605      	mov	r5, r0
   20056:	b9c8      	cbnz	r0, 2008c <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   20058:	9b01      	ldr	r3, [sp, #4]
   2005a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2005c:	785c      	ldrb	r4, [r3, #1]
   2005e:	42b4      	cmp	r4, r6
   20060:	bf28      	it	cs
   20062:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   20064:	f04f 0816 	mov.w	r8, #22
   20068:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2006a:	42a5      	cmp	r5, r4
   2006c:	db06      	blt.n	2007c <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   2006e:	9801      	ldr	r0, [sp, #4]
   20070:	f003 fa58 	bl	23524 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   20074:	4620      	mov	r0, r4
   20076:	b002      	add	sp, #8
   20078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2007c:	fb08 7005 	mla	r0, r8, r5, r7
   20080:	2216      	movs	r2, #22
   20082:	4631      	mov	r1, r6
   20084:	f00c fe19 	bl	2ccba <memcpy>
	for (i = 0; i < cnt; i++) {
   20088:	3501      	adds	r5, #1
   2008a:	e7ee      	b.n	2006a <bt_read_static_addr+0x36>
		return 0;
   2008c:	2400      	movs	r4, #0
   2008e:	e7f1      	b.n	20074 <bt_read_static_addr+0x40>
   20090:	200002b0 	.word	0x200002b0

00020094 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   20094:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   20096:	4d14      	ldr	r5, [pc, #80]	; (200e8 <bt_setup_random_id_addr+0x54>)
   20098:	79ec      	ldrb	r4, [r5, #7]
{
   2009a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2009c:	b92c      	cbnz	r4, 200aa <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2009e:	2101      	movs	r1, #1
   200a0:	a802      	add	r0, sp, #8
   200a2:	f7ff ffc7 	bl	20034 <bt_read_static_addr>
   200a6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   200a8:	b9b8      	cbnz	r0, 200da <bt_setup_random_id_addr+0x46>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   200aa:	2100      	movs	r1, #0
   200ac:	4608      	mov	r0, r1
   200ae:	f7ff ff2d 	bl	1ff0c <bt_id_create>
   200b2:	e010      	b.n	200d6 <bt_setup_random_id_addr+0x42>
   200b4:	ab02      	add	r3, sp, #8
   200b6:	fb07 3106 	mla	r1, r7, r6, r3
   200ba:	2206      	movs	r2, #6
   200bc:	f10d 0001 	add.w	r0, sp, #1
   200c0:	f00c fdfb 	bl	2ccba <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   200c4:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   200c6:	4669      	mov	r1, sp
   200c8:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   200ca:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   200ce:	f7ff fee7 	bl	1fea0 <id_create.isra.0>
				if (err) {
   200d2:	3401      	adds	r4, #1
   200d4:	b110      	cbz	r0, 200dc <bt_setup_random_id_addr+0x48>
}
   200d6:	b009      	add	sp, #36	; 0x24
   200d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   200da:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   200dc:	79eb      	ldrb	r3, [r5, #7]
   200de:	b2e6      	uxtb	r6, r4
   200e0:	42b3      	cmp	r3, r6
   200e2:	d8e7      	bhi.n	200b4 <bt_setup_random_id_addr+0x20>
			return 0;
   200e4:	2000      	movs	r0, #0
   200e6:	e7f6      	b.n	200d6 <bt_setup_random_id_addr+0x42>
   200e8:	200002b0 	.word	0x200002b0

000200ec <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   200ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   200f0:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   200f4:	7805      	ldrb	r5, [r0, #0]
{
   200f6:	460e      	mov	r6, r1
   200f8:	4690      	mov	r8, r2
   200fa:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   200fc:	d026      	beq.n	2014c <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   200fe:	4c22      	ldr	r4, [pc, #136]	; (20188 <bt_id_set_adv_own_addr+0x9c>)
   20100:	b12a      	cbz	r2, 2010e <bt_id_set_adv_own_addr+0x22>
   20102:	0688      	lsls	r0, r1, #26
   20104:	d503      	bpl.n	2010e <bt_id_set_adv_own_addr+0x22>
   20106:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   2010a:	0659      	lsls	r1, r3, #25
   2010c:	d539      	bpl.n	20182 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2010e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   20112:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   20116:	5ce3      	ldrb	r3, [r4, r3]
   20118:	2b01      	cmp	r3, #1
   2011a:	d008      	beq.n	2012e <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2011c:	eba9 0505 	sub.w	r5, r9, r5
   20120:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   20122:	f1b8 0f00 	cmp.w	r8, #0
   20126:	d10c      	bne.n	20142 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   20128:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   2012a:	2000      	movs	r0, #0
   2012c:	e007      	b.n	2013e <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2012e:	2007      	movs	r0, #7
   20130:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   20134:	4420      	add	r0, r4
   20136:	f7ff fe85 	bl	1fe44 <set_random_address>
				if (err) {
   2013a:	2800      	cmp	r0, #0
   2013c:	d0ee      	beq.n	2011c <bt_id_set_adv_own_addr+0x30>
}
   2013e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   20142:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   20144:	bf48      	it	mi
   20146:	f043 0302 	orrmi.w	r3, r3, #2
   2014a:	e7ed      	b.n	20128 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2014c:	074b      	lsls	r3, r1, #29
   2014e:	d514      	bpl.n	2017a <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   20150:	4e0d      	ldr	r6, [pc, #52]	; (20188 <bt_id_set_adv_own_addr+0x9c>)
   20152:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   20156:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   2015a:	5cf3      	ldrb	r3, [r6, r3]
   2015c:	2b01      	cmp	r3, #1
   2015e:	d10a      	bne.n	20176 <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   20160:	2007      	movs	r0, #7
   20162:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   20166:	4430      	add	r0, r6
   20168:	f7ff fe6c 	bl	1fe44 <set_random_address>
			*own_addr_type = id_addr->type;
   2016c:	eba8 0505 	sub.w	r5, r8, r5
   20170:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   20172:	703b      	strb	r3, [r7, #0]
		if (err) {
   20174:	e7e3      	b.n	2013e <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   20176:	4620      	mov	r0, r4
   20178:	e7f8      	b.n	2016c <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   2017a:	f00d f8eb 	bl	2d354 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2017e:	2301      	movs	r3, #1
   20180:	e7f7      	b.n	20172 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   20182:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20186:	e7da      	b.n	2013e <bt_id_set_adv_own_addr+0x52>
   20188:	200002b0 	.word	0x200002b0

0002018c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   2018c:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   2018e:	4c0a      	ldr	r4, [pc, #40]	; (201b8 <bt_id_init+0x2c>)
   20190:	79e3      	ldrb	r3, [r4, #7]
   20192:	b10b      	cbz	r3, 20198 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   20194:	2000      	movs	r0, #0
}
   20196:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   20198:	f7ff ff3c 	bl	20014 <bt_setup_public_id_addr>
		if (err) {
   2019c:	2800      	cmp	r0, #0
   2019e:	d1fa      	bne.n	20196 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   201a0:	79e3      	ldrb	r3, [r4, #7]
   201a2:	2b00      	cmp	r3, #0
   201a4:	d1f6      	bne.n	20194 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   201a6:	f7ff ff75 	bl	20094 <bt_setup_random_id_addr>
		if (err) {
   201aa:	2800      	cmp	r0, #0
   201ac:	d1f3      	bne.n	20196 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   201ae:	1c60      	adds	r0, r4, #1
}
   201b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   201b4:	f7ff be46 	b.w	1fe44 <set_random_address>
   201b8:	200002b0 	.word	0x200002b0

000201bc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   201bc:	6843      	ldr	r3, [r0, #4]
{
   201be:	b537      	push	{r0, r1, r2, r4, r5, lr}
   201c0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   201c2:	0558      	lsls	r0, r3, #21
   201c4:	d502      	bpl.n	201cc <valid_adv_param+0x10>
		return false;
   201c6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   201c8:	b003      	add	sp, #12
   201ca:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   201cc:	6922      	ldr	r2, [r4, #16]
   201ce:	b10a      	cbz	r2, 201d4 <valid_adv_param+0x18>
   201d0:	07d9      	lsls	r1, r3, #31
   201d2:	d5f8      	bpl.n	201c6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   201d4:	4d1a      	ldr	r5, [pc, #104]	; (20240 <valid_adv_param+0x84>)
   201d6:	7820      	ldrb	r0, [r4, #0]
   201d8:	79eb      	ldrb	r3, [r5, #7]
   201da:	4283      	cmp	r3, r0
   201dc:	d9f3      	bls.n	201c6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   201de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   201e2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   201e4:	2207      	movs	r2, #7
   201e6:	4669      	mov	r1, sp
   201e8:	4428      	add	r0, r5
   201ea:	9300      	str	r3, [sp, #0]
   201ec:	f8cd 3003 	str.w	r3, [sp, #3]
   201f0:	f00c fd3c 	bl	2cc6c <memcmp>
	if (param->id >= bt_dev.id_count ||
   201f4:	2800      	cmp	r0, #0
   201f6:	d0e6      	beq.n	201c6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   201f8:	6860      	ldr	r0, [r4, #4]
   201fa:	07c2      	lsls	r2, r0, #31
   201fc:	d406      	bmi.n	2020c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   201fe:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   20202:	2b08      	cmp	r3, #8
   20204:	d802      	bhi.n	2020c <valid_adv_param+0x50>
   20206:	68a3      	ldr	r3, [r4, #8]
   20208:	2b9f      	cmp	r3, #159	; 0x9f
   2020a:	d9dc      	bls.n	201c6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2020c:	f010 0f30 	tst.w	r0, #48	; 0x30
   20210:	d002      	beq.n	20218 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   20212:	6923      	ldr	r3, [r4, #16]
   20214:	2b00      	cmp	r3, #0
   20216:	d0d6      	beq.n	201c6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   20218:	06c3      	lsls	r3, r0, #27
   2021a:	d401      	bmi.n	20220 <valid_adv_param+0x64>
   2021c:	6923      	ldr	r3, [r4, #16]
   2021e:	b943      	cbnz	r3, 20232 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   20220:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   20224:	429a      	cmp	r2, r3
   20226:	d8ce      	bhi.n	201c6 <valid_adv_param+0xa>
   20228:	2a1f      	cmp	r2, #31
   2022a:	d9cc      	bls.n	201c6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   2022c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   20230:	d8c9      	bhi.n	201c6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   20232:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   20236:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2023a:	bf18      	it	ne
   2023c:	2001      	movne	r0, #1
   2023e:	e7c3      	b.n	201c8 <valid_adv_param+0xc>
   20240:	200002b0 	.word	0x200002b0

00020244 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   20244:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   20246:	4606      	mov	r6, r0
   20248:	4b1e      	ldr	r3, [pc, #120]	; (202c4 <le_adv_start_add_conn+0x80>)
   2024a:	f816 2b09 	ldrb.w	r2, [r6], #9
   2024e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   20252:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   20254:	2300      	movs	r3, #0
{
   20256:	4605      	mov	r5, r0
   20258:	2207      	movs	r2, #7
   2025a:	460f      	mov	r7, r1
   2025c:	4630      	mov	r0, r6
   2025e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   20260:	9300      	str	r3, [sp, #0]
   20262:	f8cd 3003 	str.w	r3, [sp, #3]
   20266:	f00c fd01 	bl	2cc6c <memcmp>
   2026a:	782a      	ldrb	r2, [r5, #0]
   2026c:	4604      	mov	r4, r0
   2026e:	b9a8      	cbnz	r0, 2029c <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   20270:	4b15      	ldr	r3, [pc, #84]	; (202c8 <le_adv_start_add_conn+0x84>)
   20272:	6818      	ldr	r0, [r3, #0]
   20274:	8899      	ldrh	r1, [r3, #4]
   20276:	9002      	str	r0, [sp, #8]
   20278:	799b      	ldrb	r3, [r3, #6]
   2027a:	f8ad 100c 	strh.w	r1, [sp, #12]
   2027e:	4610      	mov	r0, r2
   20280:	a902      	add	r1, sp, #8
   20282:	f88d 300e 	strb.w	r3, [sp, #14]
   20286:	f000 fccf 	bl	20c28 <bt_conn_add_le>
		if (!conn) {
   2028a:	4605      	mov	r5, r0
   2028c:	b1b8      	cbz	r0, 202be <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2028e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   20290:	f000 fb76 	bl	20980 <bt_conn_set_state>
	*out_conn = conn;
   20294:	603d      	str	r5, [r7, #0]
	return 0;
}
   20296:	4620      	mov	r0, r4
   20298:	b005      	add	sp, #20
   2029a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2029c:	4631      	mov	r1, r6
   2029e:	4610      	mov	r0, r2
   202a0:	f00d fad8 	bl	2d854 <bt_conn_exists_le>
   202a4:	4604      	mov	r4, r0
   202a6:	b938      	cbnz	r0, 202b8 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   202a8:	7828      	ldrb	r0, [r5, #0]
   202aa:	4631      	mov	r1, r6
   202ac:	f000 fcbc 	bl	20c28 <bt_conn_add_le>
	if (!conn) {
   202b0:	4605      	mov	r5, r0
   202b2:	b120      	cbz	r0, 202be <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   202b4:	2105      	movs	r1, #5
   202b6:	e7eb      	b.n	20290 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   202b8:	f06f 0415 	mvn.w	r4, #21
   202bc:	e7eb      	b.n	20296 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   202be:	f06f 040b 	mvn.w	r4, #11
   202c2:	e7e8      	b.n	20296 <le_adv_start_add_conn+0x52>
   202c4:	200002b0 	.word	0x200002b0
   202c8:	00032549 	.word	0x00032549

000202cc <bt_le_adv_lookup_legacy>:
}
   202cc:	4800      	ldr	r0, [pc, #0]	; (202d0 <bt_le_adv_lookup_legacy+0x4>)
   202ce:	4770      	bx	lr
   202d0:	200002c8 	.word	0x200002c8

000202d4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   202d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   202d8:	690e      	ldr	r6, [r1, #16]
{
   202da:	b08f      	sub	sp, #60	; 0x3c
   202dc:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   202de:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   202e0:	ebb6 0903 	subs.w	r9, r6, r3
{
   202e4:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   202e6:	488c      	ldr	r0, [pc, #560]	; (20518 <bt_le_adv_start_legacy+0x244>)
   202e8:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   202ea:	bf18      	it	ne
   202ec:	f04f 0901 	movne.w	r9, #1
{
   202f0:	460c      	mov	r4, r1
	struct bt_conn *conn = NULL;
   202f2:	9307      	str	r3, [sp, #28]
   202f4:	f00d f851 	bl	2d39a <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   202f8:	0787      	lsls	r7, r0, #30
   202fa:	f140 8102 	bpl.w	20502 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   202fe:	4608      	mov	r0, r1
   20300:	f7ff ff5c 	bl	201bc <valid_adv_param>
   20304:	b928      	cbnz	r0, 20312 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   20306:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2030a:	4658      	mov	r0, fp
   2030c:	b00f      	add	sp, #60	; 0x3c
   2030e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   20312:	4620      	mov	r0, r4
   20314:	f00d f830 	bl	2d378 <bt_id_adv_random_addr_check>
   20318:	4680      	mov	r8, r0
   2031a:	2800      	cmp	r0, #0
   2031c:	d0f3      	beq.n	20306 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2031e:	f105 0710 	add.w	r7, r5, #16
   20322:	4638      	mov	r0, r7
   20324:	f00d f839 	bl	2d39a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20328:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2032c:	0640      	lsls	r0, r0, #25
   2032e:	f100 80eb 	bmi.w	20508 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   20332:	220f      	movs	r2, #15
   20334:	4659      	mov	r1, fp
   20336:	a80a      	add	r0, sp, #40	; 0x28
   20338:	f00c fcca 	bl	2ccd0 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2033c:	68a3      	ldr	r3, [r4, #8]
   2033e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   20342:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   20344:	68e3      	ldr	r3, [r4, #12]
   20346:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2034a:	f00d f817 	bl	2d37c <get_adv_channel_map>
	if (adv->id != param->id) {
   2034e:	782a      	ldrb	r2, [r5, #0]
   20350:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   20352:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   20356:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   20358:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2035c:	d004      	beq.n	20368 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2035e:	486e      	ldr	r0, [pc, #440]	; (20518 <bt_le_adv_start_legacy+0x244>)
   20360:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   20364:	f00d f81f 	bl	2d3a6 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   20368:	4a6c      	ldr	r2, [pc, #432]	; (2051c <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   2036a:	7823      	ldrb	r3, [r4, #0]
   2036c:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2036e:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   20372:	6861      	ldr	r1, [r4, #4]
   20374:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   20378:	464a      	mov	r2, r9
   2037a:	4628      	mov	r0, r5
   2037c:	f7ff feb6 	bl	200ec <bt_id_set_adv_own_addr>
	if (err) {
   20380:	4683      	mov	fp, r0
   20382:	2800      	cmp	r0, #0
   20384:	d1c1      	bne.n	2030a <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   20386:	f105 0009 	add.w	r0, r5, #9
   2038a:	2e00      	cmp	r6, #0
   2038c:	d049      	beq.n	20422 <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
   2038e:	6921      	ldr	r1, [r4, #16]
   20390:	2207      	movs	r2, #7
   20392:	f00c fc92 	bl	2ccba <memcpy>
	name_type = get_adv_name_type_param(param);
   20396:	4620      	mov	r0, r4
   20398:	f00d f903 	bl	2d5a2 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2039c:	6863      	ldr	r3, [r4, #4]
   2039e:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   203a0:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   203a2:	d547      	bpl.n	20434 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
   203a4:	2e00      	cmp	r6, #0
   203a6:	d042      	beq.n	2042e <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   203a8:	f013 0f10 	tst.w	r3, #16
   203ac:	bf14      	ite	ne
   203ae:	2304      	movne	r3, #4
   203b0:	2301      	moveq	r3, #1
   203b2:	6921      	ldr	r1, [r4, #16]
   203b4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   203b8:	2207      	movs	r2, #7
   203ba:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   203be:	f00c fc7c 	bl	2ccba <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   203c2:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   203c6:	210f      	movs	r1, #15
   203c8:	f242 0006 	movw	r0, #8198	; 0x2006
   203cc:	f7fe ff8c 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   203d0:	4683      	mov	fp, r0
   203d2:	2800      	cmp	r0, #0
   203d4:	f000 809b 	beq.w	2050e <bt_le_adv_start_legacy+0x23a>
   203d8:	220f      	movs	r2, #15
   203da:	a90a      	add	r1, sp, #40	; 0x28
   203dc:	3008      	adds	r0, #8
   203de:	f00f fb46 	bl	2fa6e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   203e2:	2200      	movs	r2, #0
   203e4:	4659      	mov	r1, fp
   203e6:	f242 0006 	movw	r0, #8198	; 0x2006
   203ea:	f7fe ffb5 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   203ee:	2800      	cmp	r0, #0
   203f0:	f040 8090 	bne.w	20514 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   203f4:	b376      	cbz	r6, 20454 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   203f6:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   203f8:	07db      	lsls	r3, r3, #31
   203fa:	d439      	bmi.n	20470 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   203fc:	2101      	movs	r1, #1
   203fe:	4628      	mov	r0, r5
   20400:	f00d f8df 	bl	2d5c2 <bt_le_adv_set_enable_legacy>
	if (err) {
   20404:	4683      	mov	fp, r0
   20406:	9807      	ldr	r0, [sp, #28]
   20408:	f1bb 0f00 	cmp.w	fp, #0
   2040c:	d073      	beq.n	204f6 <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2040e:	2800      	cmp	r0, #0
   20410:	f43f af7b 	beq.w	2030a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20414:	2100      	movs	r1, #0
   20416:	f000 fab3 	bl	20980 <bt_conn_set_state>
			bt_conn_unref(conn);
   2041a:	9807      	ldr	r0, [sp, #28]
   2041c:	f00d f9b3 	bl	2d786 <bt_conn_unref>
   20420:	e773      	b.n	2030a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   20422:	9608      	str	r6, [sp, #32]
   20424:	2207      	movs	r2, #7
   20426:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   2042a:	a908      	add	r1, sp, #32
   2042c:	e7b1      	b.n	20392 <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   2042e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   20432:	e7c8      	b.n	203c6 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   20434:	059a      	lsls	r2, r3, #22
   20436:	d403      	bmi.n	20440 <bt_le_adv_start_legacy+0x16c>
   20438:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2043a:	b90b      	cbnz	r3, 20440 <bt_le_adv_start_legacy+0x16c>
   2043c:	2802      	cmp	r0, #2
   2043e:	d103      	bne.n	20448 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   20440:	2302      	movs	r3, #2
   20442:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   20446:	e7be      	b.n	203c6 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   20448:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2044a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2044e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   20452:	e7b8      	b.n	203c6 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   20454:	9b19      	ldr	r3, [sp, #100]	; 0x64
   20456:	9300      	str	r3, [sp, #0]
   20458:	e9cd 8901 	strd	r8, r9, [sp, #4]
   2045c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2045e:	9905      	ldr	r1, [sp, #20]
   20460:	4652      	mov	r2, sl
   20462:	4628      	mov	r0, r5
   20464:	f00d f826 	bl	2d4b4 <le_adv_update.constprop.0>
		if (err) {
   20468:	4683      	mov	fp, r0
   2046a:	2800      	cmp	r0, #0
   2046c:	d0c3      	beq.n	203f6 <bt_le_adv_start_legacy+0x122>
   2046e:	e74c      	b.n	2030a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   20470:	a907      	add	r1, sp, #28
   20472:	4628      	mov	r0, r5
   20474:	f7ff fee6 	bl	20244 <le_adv_start_add_conn>
		if (err) {
   20478:	4683      	mov	fp, r0
   2047a:	2800      	cmp	r0, #0
   2047c:	d0be      	beq.n	203fc <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   2047e:	f110 0f0c 	cmn.w	r0, #12
   20482:	f47f af42 	bne.w	2030a <bt_le_adv_start_legacy+0x36>
   20486:	2e00      	cmp	r6, #0
   20488:	f47f af3f 	bne.w	2030a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2048c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2048e:	0798      	lsls	r0, r3, #30
   20490:	f53f af3b 	bmi.w	2030a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   20494:	6862      	ldr	r2, [r4, #4]
   20496:	f082 0202 	eor.w	r2, r2, #2
   2049a:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   2049e:	f00b 0201 	and.w	r2, fp, #1
   204a2:	210d      	movs	r1, #13
   204a4:	4638      	mov	r0, r7
   204a6:	f00c ffee 	bl	2d486 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   204aa:	f109 33ff 	add.w	r3, r9, #4294967295
   204ae:	425a      	negs	r2, r3
   204b0:	415a      	adcs	r2, r3
   204b2:	2107      	movs	r1, #7
   204b4:	4638      	mov	r0, r7
   204b6:	f00c ffe6 	bl	2d486 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   204ba:	f1a9 0102 	sub.w	r1, r9, #2
   204be:	424a      	negs	r2, r1
   204c0:	414a      	adcs	r2, r1
   204c2:	4638      	mov	r0, r7
   204c4:	2108      	movs	r1, #8
   204c6:	f00c ffde 	bl	2d486 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   204ca:	6862      	ldr	r2, [r4, #4]
   204cc:	2109      	movs	r1, #9
   204ce:	f002 0201 	and.w	r2, r2, #1
   204d2:	4638      	mov	r0, r7
   204d4:	f00c ffd7 	bl	2d486 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   204d8:	4642      	mov	r2, r8
   204da:	210a      	movs	r1, #10
   204dc:	4638      	mov	r0, r7
   204de:	f00c ffd2 	bl	2d486 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   204e2:	6862      	ldr	r2, [r4, #4]
   204e4:	210c      	movs	r1, #12
   204e6:	f3c2 0280 	ubfx	r2, r2, #2, #1
   204ea:	4638      	mov	r0, r7
   204ec:	f00c ffcb 	bl	2d486 <atomic_set_bit_to>
	return 0;
   204f0:	f04f 0b00 	mov.w	fp, #0
   204f4:	e709      	b.n	2030a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   204f6:	b108      	cbz	r0, 204fc <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   204f8:	f00d f945 	bl	2d786 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   204fc:	2e00      	cmp	r6, #0
   204fe:	d1ce      	bne.n	2049e <bt_le_adv_start_legacy+0x1ca>
   20500:	e7c8      	b.n	20494 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
   20502:	f06f 0b0a 	mvn.w	fp, #10
   20506:	e700      	b.n	2030a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   20508:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2050c:	e6fd      	b.n	2030a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   2050e:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   20512:	e6fa      	b.n	2030a <bt_le_adv_start_legacy+0x36>
   20514:	4683      	mov	fp, r0
   20516:	e6f8      	b.n	2030a <bt_le_adv_start_legacy+0x36>
   20518:	2000037c 	.word	0x2000037c
   2051c:	200002b0 	.word	0x200002b0

00020520 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   20520:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20522:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   20524:	9a06      	ldr	r2, [sp, #24]
{
   20526:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   20528:	e9cd 3200 	strd	r3, r2, [sp]
   2052c:	462b      	mov	r3, r5
   2052e:	460a      	mov	r2, r1
   20530:	4601      	mov	r1, r0
   20532:	4811      	ldr	r0, [pc, #68]	; (20578 <bt_le_adv_start+0x58>)
   20534:	f7ff fece 	bl	202d4 <bt_le_adv_start_legacy>
   20538:	4621      	mov	r1, r4
   2053a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2053c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2053e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   20542:	429d      	cmp	r5, r3
   20544:	d102      	bne.n	2054c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   20546:	4630      	mov	r0, r6
   20548:	b002      	add	sp, #8
   2054a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2054c:	880a      	ldrh	r2, [r1, #0]
   2054e:	4282      	cmp	r2, r0
   20550:	d104      	bne.n	2055c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   20552:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   20554:	b112      	cbz	r2, 2055c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   20556:	7812      	ldrb	r2, [r2, #0]
   20558:	07d2      	lsls	r2, r2, #31
   2055a:	d402      	bmi.n	20562 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2055c:	3301      	adds	r3, #1
   2055e:	3108      	adds	r1, #8
   20560:	e7ef      	b.n	20542 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   20562:	4906      	ldr	r1, [pc, #24]	; (2057c <bt_le_adv_start+0x5c>)
   20564:	4806      	ldr	r0, [pc, #24]	; (20580 <bt_le_adv_start+0x60>)
   20566:	f011 fa11 	bl	3198c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2056a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2056e:	2300      	movs	r3, #0
   20570:	4803      	ldr	r0, [pc, #12]	; (20580 <bt_le_adv_start+0x60>)
   20572:	f007 febb 	bl	282ec <k_work_reschedule>
   20576:	e7e6      	b.n	20546 <bt_le_adv_start+0x26>
   20578:	200002c8 	.word	0x200002c8
   2057c:	0002d613 	.word	0x0002d613
   20580:	200002e0 	.word	0x200002e0

00020584 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   20584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   20586:	4821      	ldr	r0, [pc, #132]	; (2060c <bt_le_adv_stop+0x88>)
   20588:	f00d f840 	bl	2d60c <bt_le_lim_adv_cancel_timeout>
   2058c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   20590:	481f      	ldr	r0, [pc, #124]	; (20610 <bt_le_adv_stop+0x8c>)
   20592:	f00c ff08 	bl	2d3a6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   20596:	481e      	ldr	r0, [pc, #120]	; (20610 <bt_le_adv_stop+0x8c>)
   20598:	f00c feff 	bl	2d39a <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2059c:	0642      	lsls	r2, r0, #25
   2059e:	f3c0 1380 	ubfx	r3, r0, #6, #1
   205a2:	d530      	bpl.n	20606 <bt_le_adv_stop+0x82>
   205a4:	481a      	ldr	r0, [pc, #104]	; (20610 <bt_le_adv_stop+0x8c>)
   205a6:	f00c fef8 	bl	2d39a <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   205aa:	0583      	lsls	r3, r0, #22
   205ac:	d521      	bpl.n	205f2 <bt_le_adv_stop+0x6e>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   205ae:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   205b0:	4818      	ldr	r0, [pc, #96]	; (20614 <bt_le_adv_stop+0x90>)
   205b2:	9300      	str	r3, [sp, #0]
   205b4:	2207      	movs	r2, #7
   205b6:	4669      	mov	r1, sp
   205b8:	f8cd 3003 	str.w	r3, [sp, #3]
   205bc:	f00c fb56 	bl	2cc6c <memcmp>
   205c0:	4b15      	ldr	r3, [pc, #84]	; (20618 <bt_le_adv_stop+0x94>)
   205c2:	b9e0      	cbnz	r0, 205fe <bt_le_adv_stop+0x7a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   205c4:	4a15      	ldr	r2, [pc, #84]	; (2061c <bt_le_adv_stop+0x98>)
   205c6:	8891      	ldrh	r1, [r2, #4]
   205c8:	6810      	ldr	r0, [r2, #0]
   205ca:	7992      	ldrb	r2, [r2, #6]
   205cc:	f8ad 100c 	strh.w	r1, [sp, #12]
   205d0:	f88d 200e 	strb.w	r2, [sp, #14]
   205d4:	9002      	str	r0, [sp, #8]
   205d6:	2204      	movs	r2, #4
   205d8:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   205da:	7e18      	ldrb	r0, [r3, #24]
   205dc:	f000 fb5c 	bl	20c98 <bt_conn_lookup_state_le>
   205e0:	4604      	mov	r4, r0
	if (conn) {
   205e2:	b130      	cbz	r0, 205f2 <bt_le_adv_stop+0x6e>
		conn->err = status;
   205e4:	2100      	movs	r1, #0
   205e6:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   205e8:	f000 f9ca 	bl	20980 <bt_conn_set_state>
		bt_conn_unref(conn);
   205ec:	4620      	mov	r0, r4
   205ee:	f00d f8ca 	bl	2d786 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   205f2:	4806      	ldr	r0, [pc, #24]	; (2060c <bt_le_adv_stop+0x88>)
   205f4:	2100      	movs	r1, #0
   205f6:	f00c ffe4 	bl	2d5c2 <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   205fa:	b004      	add	sp, #16
   205fc:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   205fe:	2205      	movs	r2, #5
   20600:	f103 0121 	add.w	r1, r3, #33	; 0x21
   20604:	e7e9      	b.n	205da <bt_le_adv_stop+0x56>
		return 0;
   20606:	4618      	mov	r0, r3
   20608:	e7f7      	b.n	205fa <bt_le_adv_stop+0x76>
   2060a:	bf00      	nop
   2060c:	200002c8 	.word	0x200002c8
   20610:	200002d8 	.word	0x200002d8
   20614:	200002d1 	.word	0x200002d1
   20618:	200002b0 	.word	0x200002b0
   2061c:	00032549 	.word	0x00032549

00020620 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   20620:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20622:	481e      	ldr	r0, [pc, #120]	; (2069c <bt_le_adv_resume+0x7c>)
   20624:	4c1d      	ldr	r4, [pc, #116]	; (2069c <bt_le_adv_resume+0x7c>)
   20626:	f00c feb8 	bl	2d39a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2062a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   2062e:	d032      	beq.n	20696 <bt_le_adv_resume+0x76>
   20630:	4620      	mov	r0, r4
   20632:	f00c feb2 	bl	2d39a <atomic_get>
   20636:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20638:	f3c0 1580 	ubfx	r5, r0, #6, #1
   2063c:	d42b      	bmi.n	20696 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2063e:	4620      	mov	r0, r4
   20640:	f00c feab 	bl	2d39a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   20644:	0583      	lsls	r3, r0, #22
   20646:	d526      	bpl.n	20696 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   20648:	a901      	add	r1, sp, #4
   2064a:	f1a4 0010 	sub.w	r0, r4, #16
   2064e:	f7ff fdf9 	bl	20244 <le_adv_start_add_conn>
	if (err) {
   20652:	bb00      	cbnz	r0, 20696 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   20654:	2101      	movs	r1, #1
   20656:	f1a4 0010 	sub.w	r0, r4, #16
   2065a:	f00c ffb2 	bl	2d5c2 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   2065e:	b150      	cbz	r0, 20676 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20660:	4629      	mov	r1, r5
   20662:	9801      	ldr	r0, [sp, #4]
   20664:	f000 f98c 	bl	20980 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20668:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2066c:	4620      	mov	r0, r4
   2066e:	f00c fe9a 	bl	2d3a6 <atomic_and>
	return (old & mask) != 0;
   20672:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   20676:	9801      	ldr	r0, [sp, #4]
   20678:	f00d f885 	bl	2d786 <bt_conn_unref>
	if (persist_paused) {
   2067c:	b15d      	cbz	r5, 20696 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2067e:	f3bf 8f5b 	dmb	ish
   20682:	e854 3f00 	ldrex	r3, [r4]
   20686:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2068a:	e844 3200 	strex	r2, r3, [r4]
   2068e:	2a00      	cmp	r2, #0
   20690:	d1f7      	bne.n	20682 <bt_le_adv_resume+0x62>
   20692:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   20696:	b003      	add	sp, #12
   20698:	bd30      	pop	{r4, r5, pc}
   2069a:	bf00      	nop
   2069c:	200002d8 	.word	0x200002d8

000206a0 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   206a0:	2300      	movs	r3, #0
	tx->user_data = NULL;
   206a2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   206a6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   206a8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   206aa:	4801      	ldr	r0, [pc, #4]	; (206b0 <tx_free+0x10>)
   206ac:	f011 b880 	b.w	317b0 <k_queue_append>
   206b0:	20000cb4 	.word	0x20000cb4

000206b4 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   206b4:	4b0e      	ldr	r3, [pc, #56]	; (206f0 <notify_connected+0x3c>)
{
   206b6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   206b8:	681d      	ldr	r5, [r3, #0]
{
   206ba:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   206bc:	b955      	cbnz	r5, 206d4 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   206be:	4d0d      	ldr	r5, [pc, #52]	; (206f4 <notify_connected+0x40>)
   206c0:	4e0d      	ldr	r6, [pc, #52]	; (206f8 <notify_connected+0x44>)
   206c2:	7a61      	ldrb	r1, [r4, #9]
   206c4:	42b5      	cmp	r5, r6
   206c6:	d30c      	bcc.n	206e2 <notify_connected+0x2e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   206c8:	b989      	cbnz	r1, 206ee <notify_connected+0x3a>
		bt_gatt_connected(conn);
   206ca:	4620      	mov	r0, r4
	}
}
   206cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   206d0:	f002 b81a 	b.w	22708 <bt_gatt_connected>
		if (cb->connected) {
   206d4:	682b      	ldr	r3, [r5, #0]
   206d6:	b113      	cbz	r3, 206de <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   206d8:	7a61      	ldrb	r1, [r4, #9]
   206da:	4620      	mov	r0, r4
   206dc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   206de:	692d      	ldr	r5, [r5, #16]
   206e0:	e7ec      	b.n	206bc <notify_connected+0x8>
		if (cb->connected) {
   206e2:	682b      	ldr	r3, [r5, #0]
   206e4:	b10b      	cbz	r3, 206ea <notify_connected+0x36>
			cb->connected(conn, conn->err);
   206e6:	4620      	mov	r0, r4
   206e8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   206ea:	3514      	adds	r5, #20
   206ec:	e7e9      	b.n	206c2 <notify_connected+0xe>
}
   206ee:	bd70      	pop	{r4, r5, r6, pc}
   206f0:	20002898 	.word	0x20002898
   206f4:	00032454 	.word	0x00032454
   206f8:	00032454 	.word	0x00032454

000206fc <send_frag>:
{
   206fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   20700:	694d      	ldr	r5, [r1, #20]
{
   20702:	4604      	mov	r4, r0
   20704:	460e      	mov	r6, r1
   20706:	4690      	mov	r8, r2
   20708:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   2070a:	f04f 33ff 	mov.w	r3, #4294967295
   2070e:	483f      	ldr	r0, [pc, #252]	; (2080c <send_frag+0x110>)
   20710:	f04f 32ff 	mov.w	r2, #4294967295
   20714:	f007 fbda 	bl	27ecc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   20718:	7aa3      	ldrb	r3, [r4, #10]
   2071a:	2b07      	cmp	r3, #7
   2071c:	d146      	bne.n	207ac <send_frag+0xb0>
	__asm__ volatile(
   2071e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20722:	f3ef 8211 	mrs	r2, BASEPRI
   20726:	f383 8812 	msr	BASEPRI_MAX, r3
   2072a:	f3bf 8f6f 	isb	sy
	if (tx) {
   2072e:	2d00      	cmp	r5, #0
   20730:	d04e      	beq.n	207d0 <send_frag+0xd4>
	parent->next = child;
   20732:	2300      	movs	r3, #0
   20734:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   20736:	69a3      	ldr	r3, [r4, #24]
   20738:	2b00      	cmp	r3, #0
   2073a:	d146      	bne.n	207ca <send_frag+0xce>
	list->head = node;
   2073c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   20740:	f382 8811 	msr	BASEPRI, r2
   20744:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   20748:	2104      	movs	r1, #4
   2074a:	f106 0008 	add.w	r0, r6, #8
   2074e:	f00f f99f 	bl	2fa90 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   20752:	8823      	ldrh	r3, [r4, #0]
   20754:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   20758:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2075c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2075e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20762:	3b04      	subs	r3, #4
   20764:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   20766:	2302      	movs	r3, #2
   20768:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2076a:	4630      	mov	r0, r6
   2076c:	f7ff f822 	bl	1f7b4 <bt_send>
	if (err) {
   20770:	2800      	cmp	r0, #0
   20772:	d049      	beq.n	20808 <send_frag+0x10c>
	__asm__ volatile(
   20774:	f04f 0340 	mov.w	r3, #64	; 0x40
   20778:	f3ef 8111 	mrs	r1, BASEPRI
   2077c:	f383 8812 	msr	BASEPRI_MAX, r3
   20780:	f3bf 8f6f 	isb	sy
		if (tx) {
   20784:	2d00      	cmp	r5, #0
   20786:	d039      	beq.n	207fc <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20788:	6963      	ldr	r3, [r4, #20]
   2078a:	2200      	movs	r2, #0
   2078c:	b153      	cbz	r3, 207a4 <send_frag+0xa8>
   2078e:	429d      	cmp	r5, r3
   20790:	d131      	bne.n	207f6 <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   20792:	682b      	ldr	r3, [r5, #0]
   20794:	bb4a      	cbnz	r2, 207ea <send_frag+0xee>
   20796:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   20798:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2079a:	4295      	cmp	r5, r2
   2079c:	d100      	bne.n	207a0 <send_frag+0xa4>
	list->tail = node;
   2079e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   207a0:	2300      	movs	r3, #0
   207a2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   207a4:	f381 8811 	msr	BASEPRI, r1
   207a8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   207ac:	4817      	ldr	r0, [pc, #92]	; (2080c <send_frag+0x110>)
   207ae:	f007 fb67 	bl	27e80 <z_impl_k_sem_give>
	if (tx) {
   207b2:	b115      	cbz	r5, 207ba <send_frag+0xbe>
		tx_free(tx);
   207b4:	4628      	mov	r0, r5
   207b6:	f7ff ff73 	bl	206a0 <tx_free>
	if (always_consume) {
   207ba:	b11f      	cbz	r7, 207c4 <send_frag+0xc8>
		net_buf_unref(buf);
   207bc:	4630      	mov	r0, r6
   207be:	f002 feb1 	bl	23524 <net_buf_unref>
	return false;
   207c2:	2700      	movs	r7, #0
}
   207c4:	4638      	mov	r0, r7
   207c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   207ca:	601d      	str	r5, [r3, #0]
	list->tail = node;
   207cc:	61a5      	str	r5, [r4, #24]
}
   207ce:	e7b7      	b.n	20740 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   207d0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   207d2:	b133      	cbz	r3, 207e2 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   207d4:	f103 090c 	add.w	r9, r3, #12
   207d8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   207da:	3301      	adds	r3, #1
   207dc:	f8c9 3000 	str.w	r3, [r9]
   207e0:	e7ae      	b.n	20740 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   207e2:	69e3      	ldr	r3, [r4, #28]
   207e4:	f104 091c 	add.w	r9, r4, #28
   207e8:	e7f7      	b.n	207da <send_frag+0xde>
	parent->next = child;
   207ea:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   207ec:	69a3      	ldr	r3, [r4, #24]
   207ee:	429d      	cmp	r5, r3
	list->tail = node;
   207f0:	bf08      	it	eq
   207f2:	61a2      	streq	r2, [r4, #24]
}
   207f4:	e7d4      	b.n	207a0 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   207f6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   207f8:	681b      	ldr	r3, [r3, #0]
   207fa:	e7c7      	b.n	2078c <send_frag+0x90>
			(*pending_no_cb)--;
   207fc:	f8d9 3000 	ldr.w	r3, [r9]
   20800:	3b01      	subs	r3, #1
   20802:	f8c9 3000 	str.w	r3, [r9]
   20806:	e7cd      	b.n	207a4 <send_frag+0xa8>
	return true;
   20808:	2701      	movs	r7, #1
   2080a:	e7db      	b.n	207c4 <send_frag+0xc8>
   2080c:	200003b0 	.word	0x200003b0

00020810 <bt_conn_get_pkts>:
}
   20810:	4800      	ldr	r0, [pc, #0]	; (20814 <bt_conn_get_pkts+0x4>)
   20812:	4770      	bx	lr
   20814:	200003b0 	.word	0x200003b0

00020818 <bt_conn_new>:
{
   20818:	b538      	push	{r3, r4, r5, lr}
   2081a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   2081c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2081e:	2501      	movs	r5, #1
   20820:	428b      	cmp	r3, r1
   20822:	d102      	bne.n	2082a <bt_conn_new+0x12>
		return NULL;
   20824:	2400      	movs	r4, #0
}
   20826:	4620      	mov	r0, r4
   20828:	bd38      	pop	{r3, r4, r5, pc}
   2082a:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   2082e:	f3bf 8f5b 	dmb	ish
   20832:	e852 0f00 	ldrex	r0, [r2]
   20836:	2800      	cmp	r0, #0
   20838:	d104      	bne.n	20844 <bt_conn_new+0x2c>
   2083a:	e842 5c00 	strex	ip, r5, [r2]
   2083e:	f1bc 0f00 	cmp.w	ip, #0
   20842:	d1f6      	bne.n	20832 <bt_conn_new+0x1a>
   20844:	f3bf 8f5b 	dmb	ish
   20848:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2084c:	d002      	beq.n	20854 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   2084e:	3301      	adds	r3, #1
   20850:	4604      	mov	r4, r0
   20852:	e7e5      	b.n	20820 <bt_conn_new+0x8>
	if (!conn) {
   20854:	2c00      	cmp	r4, #0
   20856:	d0e6      	beq.n	20826 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   20858:	22b8      	movs	r2, #184	; 0xb8
   2085a:	2100      	movs	r1, #0
   2085c:	4620      	mov	r0, r4
   2085e:	f00c fa37 	bl	2ccd0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   20862:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20866:	4904      	ldr	r1, [pc, #16]	; (20878 <bt_conn_new+0x60>)
   20868:	f011 f890 	bl	3198c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2086c:	4903      	ldr	r1, [pc, #12]	; (2087c <bt_conn_new+0x64>)
   2086e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   20872:	f011 f865 	bl	31940 <k_work_init>
	return conn;
   20876:	e7d6      	b.n	20826 <bt_conn_new+0xe>
   20878:	00020da1 	.word	0x00020da1
   2087c:	0002d65d 	.word	0x0002d65d

00020880 <bt_conn_send_cb>:
{
   20880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20882:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   20884:	7a83      	ldrb	r3, [r0, #10]
   20886:	2b07      	cmp	r3, #7
{
   20888:	4604      	mov	r4, r0
   2088a:	460d      	mov	r5, r1
   2088c:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2088e:	d114      	bne.n	208ba <bt_conn_send_cb+0x3a>
	if (cb) {
   20890:	b312      	cbz	r2, 208d8 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   20892:	f008 f835 	bl	28900 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   20896:	4b13      	ldr	r3, [pc, #76]	; (208e4 <bt_conn_send_cb+0x64>)
   20898:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2089a:	4813      	ldr	r0, [pc, #76]	; (208e8 <bt_conn_send_cb+0x68>)
   2089c:	bf07      	ittee	eq
   2089e:	2200      	moveq	r2, #0
   208a0:	2300      	moveq	r3, #0
   208a2:	f04f 32ff 	movne.w	r2, #4294967295
   208a6:	f04f 33ff 	movne.w	r3, #4294967295
   208aa:	f007 fab5 	bl	27e18 <z_impl_k_queue_get>
		if (!tx) {
   208ae:	b1a8      	cbz	r0, 208dc <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   208b0:	7aa3      	ldrb	r3, [r4, #10]
   208b2:	2b07      	cmp	r3, #7
   208b4:	d004      	beq.n	208c0 <bt_conn_send_cb+0x40>
			tx_free(tx);
   208b6:	f7ff fef3 	bl	206a0 <tx_free>
		return -ENOTCONN;
   208ba:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   208be:	e00a      	b.n	208d6 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   208c0:	2300      	movs	r3, #0
		tx->user_data = user_data;
   208c2:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   208c6:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   208c8:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   208ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   208ce:	4629      	mov	r1, r5
   208d0:	f00f f894 	bl	2f9fc <net_buf_put>
	return 0;
   208d4:	2000      	movs	r0, #0
}
   208d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   208d8:	614a      	str	r2, [r1, #20]
   208da:	e7f6      	b.n	208ca <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   208dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   208e0:	e7f9      	b.n	208d6 <bt_conn_send_cb+0x56>
   208e2:	bf00      	nop
   208e4:	200021b8 	.word	0x200021b8
   208e8:	20000cb4 	.word	0x20000cb4

000208ec <bt_conn_prepare_events>:
{
   208ec:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   208ee:	4b1b      	ldr	r3, [pc, #108]	; (2095c <bt_conn_prepare_events+0x70>)
   208f0:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   208f2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   208f4:	609a      	str	r2, [r3, #8]
{
   208f6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   208f8:	f011 fb7b 	bl	31ff2 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   208fc:	f3bf 8f5b 	dmb	ish
   20900:	4b17      	ldr	r3, [pc, #92]	; (20960 <bt_conn_prepare_events+0x74>)
   20902:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   20906:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2090a:	f104 0014 	add.w	r0, r4, #20
   2090e:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   20910:	b90a      	cbnz	r2, 20916 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   20912:	2001      	movs	r0, #1
}
   20914:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   20916:	7a9a      	ldrb	r2, [r3, #10]
   20918:	b99a      	cbnz	r2, 20942 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2091a:	f3bf 8f5b 	dmb	ish
   2091e:	1d1a      	adds	r2, r3, #4
   20920:	e852 5f00 	ldrex	r5, [r2]
   20924:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   20928:	e842 ce00 	strex	lr, ip, [r2]
   2092c:	f1be 0f00 	cmp.w	lr, #0
   20930:	d1f6      	bne.n	20920 <bt_conn_prepare_events+0x34>
   20932:	f3bf 8f5b 	dmb	ish
   20936:	066a      	lsls	r2, r5, #25
   20938:	d503      	bpl.n	20942 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   2093a:	4618      	mov	r0, r3
   2093c:	f00c fe9a 	bl	2d674 <conn_cleanup>
   20940:	e7e7      	b.n	20912 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   20942:	7a8b      	ldrb	r3, [r1, #10]
   20944:	2b07      	cmp	r3, #7
   20946:	d1e4      	bne.n	20912 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   20948:	4b06      	ldr	r3, [pc, #24]	; (20964 <bt_conn_prepare_events+0x78>)
   2094a:	2200      	movs	r2, #0
   2094c:	2104      	movs	r1, #4
   2094e:	f011 fb50 	bl	31ff2 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   20952:	2301      	movs	r3, #1
   20954:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   20958:	2002      	movs	r0, #2
	return ev_count;
   2095a:	e7db      	b.n	20914 <bt_conn_prepare_events+0x28>
   2095c:	200005d4 	.word	0x200005d4
   20960:	20001c48 	.word	0x20001c48
   20964:	20001c80 	.word	0x20001c80

00020968 <bt_conn_lookup_handle>:
{
   20968:	4602      	mov	r2, r0
   2096a:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2096c:	2101      	movs	r1, #1
   2096e:	4803      	ldr	r0, [pc, #12]	; (2097c <bt_conn_lookup_handle+0x14>)
   20970:	f00c ff23 	bl	2d7ba <conn_lookup_handle>
}
   20974:	2800      	cmp	r0, #0
   20976:	bf38      	it	cc
   20978:	2000      	movcc	r0, #0
   2097a:	bd08      	pop	{r3, pc}
   2097c:	20001c48 	.word	0x20001c48

00020980 <bt_conn_set_state>:
{
   20980:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   20982:	7a85      	ldrb	r5, [r0, #10]
   20984:	428d      	cmp	r5, r1
{
   20986:	4604      	mov	r4, r0
	if (conn->state == state) {
   20988:	f000 809d 	beq.w	20ac6 <bt_conn_set_state+0x146>
	conn->state = state;
   2098c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   2098e:	b925      	cbnz	r5, 2099a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   20990:	7883      	ldrb	r3, [r0, #2]
   20992:	2b08      	cmp	r3, #8
   20994:	d001      	beq.n	2099a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   20996:	f00c fedb 	bl	2d750 <bt_conn_ref>
	switch (conn->state) {
   2099a:	7aa3      	ldrb	r3, [r4, #10]
   2099c:	2b01      	cmp	r3, #1
   2099e:	d116      	bne.n	209ce <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   209a0:	4d49      	ldr	r5, [pc, #292]	; (20ac8 <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
   209a2:	2600      	movs	r6, #0
	__asm__ volatile(
   209a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   209a8:	f3ef 8211 	mrs	r2, BASEPRI
   209ac:	f383 8812 	msr	BASEPRI_MAX, r3
   209b0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   209b4:	69e3      	ldr	r3, [r4, #28]
   209b6:	2b00      	cmp	r3, #0
   209b8:	d066      	beq.n	20a88 <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
   209ba:	3b01      	subs	r3, #1
   209bc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   209be:	f382 8811 	msr	BASEPRI, r2
   209c2:	f3bf 8f6f 	isb	sy
   209c6:	4628      	mov	r0, r5
   209c8:	f007 fa5a 	bl	27e80 <z_impl_k_sem_give>
}
   209cc:	e7ea      	b.n	209a4 <bt_conn_set_state+0x24>
	switch (conn->state) {
   209ce:	2b07      	cmp	r3, #7
   209d0:	d009      	beq.n	209e6 <bt_conn_set_state+0x66>
   209d2:	2b00      	cmp	r3, #0
   209d4:	d177      	bne.n	20ac6 <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
   209d6:	78a3      	ldrb	r3, [r4, #2]
   209d8:	2b04      	cmp	r3, #4
   209da:	d11e      	bne.n	20a1a <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   209dc:	4620      	mov	r0, r4
}
   209de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   209e2:	f00c bed0 	b.w	2d786 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   209e6:	78a3      	ldrb	r3, [r4, #2]
   209e8:	2b04      	cmp	r3, #4
   209ea:	d06c      	beq.n	20ac6 <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
   209ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   209f0:	f010 fed2 	bl	31798 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   209f4:	4835      	ldr	r0, [pc, #212]	; (20acc <bt_conn_set_state+0x14c>)
   209f6:	2100      	movs	r1, #0
   209f8:	f008 fa74 	bl	28ee4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   209fc:	2300      	movs	r3, #0
	list->tail = NULL;
   209fe:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   20a02:	78e3      	ldrb	r3, [r4, #3]
   20a04:	2b01      	cmp	r3, #1
   20a06:	d15e      	bne.n	20ac6 <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
   20a08:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20a0c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   20a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   20a14:	2300      	movs	r3, #0
   20a16:	f007 bc35 	b.w	28284 <k_work_schedule>
		switch (old_state) {
   20a1a:	3d01      	subs	r5, #1
   20a1c:	2d05      	cmp	r5, #5
   20a1e:	d852      	bhi.n	20ac6 <bt_conn_set_state+0x146>
   20a20:	a301      	add	r3, pc, #4	; (adr r3, 20a28 <bt_conn_set_state+0xa8>)
   20a22:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   20a26:	bf00      	nop
   20a28:	00020a41 	.word	0x00020a41
   20a2c:	00020a7b 	.word	0x00020a7b
   20a30:	000209dd 	.word	0x000209dd
   20a34:	000209dd 	.word	0x000209dd
   20a38:	00020a7b 	.word	0x00020a7b
   20a3c:	00020a7b 	.word	0x00020a7b
			tx_notify(conn);
   20a40:	4620      	mov	r0, r4
   20a42:	f00c fde8 	bl	2d616 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   20a46:	78a3      	ldrb	r3, [r4, #2]
   20a48:	2b01      	cmp	r3, #1
   20a4a:	d103      	bne.n	20a54 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
   20a4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20a50:	f010 ffa8 	bl	319a4 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20a54:	f3bf 8f5b 	dmb	ish
   20a58:	3404      	adds	r4, #4
   20a5a:	e854 3f00 	ldrex	r3, [r4]
   20a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20a62:	e844 3200 	strex	r2, r3, [r4]
   20a66:	2a00      	cmp	r2, #0
   20a68:	d1f7      	bne.n	20a5a <bt_conn_set_state+0xda>
   20a6a:	f3bf 8f5b 	dmb	ish
   20a6e:	4817      	ldr	r0, [pc, #92]	; (20acc <bt_conn_set_state+0x14c>)
}
   20a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20a74:	2100      	movs	r1, #0
   20a76:	f008 ba35 	b.w	28ee4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   20a7a:	7a63      	ldrb	r3, [r4, #9]
   20a7c:	2b00      	cmp	r3, #0
   20a7e:	d0ad      	beq.n	209dc <bt_conn_set_state+0x5c>
				notify_connected(conn);
   20a80:	4620      	mov	r0, r4
   20a82:	f7ff fe17 	bl	206b4 <notify_connected>
   20a86:	e7a9      	b.n	209dc <bt_conn_set_state+0x5c>
Z_GENLIST_IS_EMPTY(slist)
   20a88:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   20a8a:	b128      	cbz	r0, 20a98 <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a8c:	69a1      	ldr	r1, [r4, #24]
   20a8e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   20a90:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a92:	4288      	cmp	r0, r1
	list->tail = node;
   20a94:	bf08      	it	eq
   20a96:	61a3      	streq	r3, [r4, #24]
   20a98:	f382 8811 	msr	BASEPRI, r2
   20a9c:	f3bf 8f6f 	isb	sy
		if (!node) {
   20aa0:	b188      	cbz	r0, 20ac6 <bt_conn_set_state+0x146>
	__asm__ volatile(
   20aa2:	f04f 0240 	mov.w	r2, #64	; 0x40
   20aa6:	f3ef 8311 	mrs	r3, BASEPRI
   20aaa:	f382 8812 	msr	BASEPRI_MAX, r2
   20aae:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   20ab2:	68c2      	ldr	r2, [r0, #12]
   20ab4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   20ab6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   20ab8:	f383 8811 	msr	BASEPRI, r3
   20abc:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   20ac0:	f7ff fdee 	bl	206a0 <tx_free>
   20ac4:	e77f      	b.n	209c6 <bt_conn_set_state+0x46>
}
   20ac6:	bd70      	pop	{r4, r5, r6, pc}
   20ac8:	200003b0 	.word	0x200003b0
   20acc:	200005d4 	.word	0x200005d4

00020ad0 <bt_conn_index>:
		index = conn - acl_conns;
   20ad0:	4b03      	ldr	r3, [pc, #12]	; (20ae0 <bt_conn_index+0x10>)
   20ad2:	1ac0      	subs	r0, r0, r3
   20ad4:	4b03      	ldr	r3, [pc, #12]	; (20ae4 <bt_conn_index+0x14>)
   20ad6:	1180      	asrs	r0, r0, #6
   20ad8:	4358      	muls	r0, r3
}
   20ada:	b2c0      	uxtb	r0, r0
   20adc:	4770      	bx	lr
   20ade:	bf00      	nop
   20ae0:	20001c48 	.word	0x20001c48
   20ae4:	aaaaaaab 	.word	0xaaaaaaab

00020ae8 <bt_conn_create_pdu_timeout>:
{
   20ae8:	b538      	push	{r3, r4, r5, lr}
   20aea:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   20aec:	4906      	ldr	r1, [pc, #24]	; (20b08 <bt_conn_create_pdu_timeout+0x20>)
   20aee:	2800      	cmp	r0, #0
   20af0:	bf08      	it	eq
   20af2:	4608      	moveq	r0, r1
   20af4:	f00e ff5f 	bl	2f9b6 <net_buf_alloc_fixed>
	if (!buf) {
   20af8:	4604      	mov	r4, r0
   20afa:	b118      	cbz	r0, 20b04 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   20afc:	1d29      	adds	r1, r5, #4
   20afe:	3008      	adds	r0, #8
   20b00:	f00e ff78 	bl	2f9f4 <net_buf_simple_reserve>
}
   20b04:	4620      	mov	r0, r4
   20b06:	bd38      	pop	{r3, r4, r5, pc}
   20b08:	20000ccc 	.word	0x20000ccc

00020b0c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   20b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20b0e:	f3bf 8f5b 	dmb	ish
   20b12:	6842      	ldr	r2, [r0, #4]
   20b14:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   20b18:	0592      	lsls	r2, r2, #22
{
   20b1a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   20b1c:	f100 0304 	add.w	r3, r0, #4
   20b20:	d519      	bpl.n	20b56 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   20b22:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   20b26:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   20b2a:	4291      	cmp	r1, r2
   20b2c:	d813      	bhi.n	20b56 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   20b2e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   20b32:	4291      	cmp	r1, r2
   20b34:	d30f      	bcc.n	20b56 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   20b36:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   20b3a:	4291      	cmp	r1, r2
   20b3c:	d10b      	bne.n	20b56 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20b3e:	f3bf 8f5b 	dmb	ish
   20b42:	e853 2f00 	ldrex	r2, [r3]
   20b46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   20b4a:	e843 2100 	strex	r1, r2, [r3]
   20b4e:	2900      	cmp	r1, #0
   20b50:	d1f7      	bne.n	20b42 <notify_le_param_updated+0x36>
   20b52:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   20b56:	4b10      	ldr	r3, [pc, #64]	; (20b98 <notify_le_param_updated+0x8c>)
   20b58:	681d      	ldr	r5, [r3, #0]
   20b5a:	b925      	cbnz	r5, 20b66 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20b5c:	4d0f      	ldr	r5, [pc, #60]	; (20b9c <notify_le_param_updated+0x90>)
   20b5e:	4f10      	ldr	r7, [pc, #64]	; (20ba0 <notify_le_param_updated+0x94>)
   20b60:	42bd      	cmp	r5, r7
   20b62:	d30c      	bcc.n	20b7e <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   20b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   20b66:	68ee      	ldr	r6, [r5, #12]
   20b68:	b13e      	cbz	r6, 20b7a <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   20b6a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   20b6e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   20b72:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   20b76:	4620      	mov	r0, r4
   20b78:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   20b7a:	692d      	ldr	r5, [r5, #16]
   20b7c:	e7ed      	b.n	20b5a <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   20b7e:	68ee      	ldr	r6, [r5, #12]
   20b80:	b13e      	cbz	r6, 20b92 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   20b82:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   20b86:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   20b8a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   20b8e:	4620      	mov	r0, r4
   20b90:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20b92:	3514      	adds	r5, #20
   20b94:	e7e4      	b.n	20b60 <notify_le_param_updated+0x54>
   20b96:	bf00      	nop
   20b98:	20002898 	.word	0x20002898
   20b9c:	00032454 	.word	0x00032454
   20ba0:	00032454 	.word	0x00032454

00020ba4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   20ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ba8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   20baa:	4608      	mov	r0, r1
{
   20bac:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   20bae:	f00c fa6e 	bl	2d08e <bt_le_conn_params_valid>
   20bb2:	4605      	mov	r5, r0
   20bb4:	b918      	cbnz	r0, 20bbe <le_param_req+0x1a>
		return false;
   20bb6:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   20bb8:	4628      	mov	r0, r5
   20bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   20bbe:	4b13      	ldr	r3, [pc, #76]	; (20c0c <le_param_req+0x68>)
   20bc0:	681e      	ldr	r6, [r3, #0]
   20bc2:	b946      	cbnz	r6, 20bd6 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20bc4:	4e12      	ldr	r6, [pc, #72]	; (20c10 <le_param_req+0x6c>)
   20bc6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 20c14 <le_param_req+0x70>
   20bca:	4546      	cmp	r6, r8
   20bcc:	d2f4      	bcs.n	20bb8 <le_param_req+0x14>
		if (!cb->le_param_req) {
   20bce:	68b3      	ldr	r3, [r6, #8]
   20bd0:	b983      	cbnz	r3, 20bf4 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20bd2:	3614      	adds	r6, #20
   20bd4:	e7f9      	b.n	20bca <le_param_req+0x26>
		if (!cb->le_param_req) {
   20bd6:	68b3      	ldr	r3, [r6, #8]
   20bd8:	b90b      	cbnz	r3, 20bde <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   20bda:	6936      	ldr	r6, [r6, #16]
   20bdc:	e7f1      	b.n	20bc2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   20bde:	4621      	mov	r1, r4
   20be0:	4638      	mov	r0, r7
   20be2:	4798      	blx	r3
   20be4:	2800      	cmp	r0, #0
   20be6:	d0e6      	beq.n	20bb6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   20be8:	4620      	mov	r0, r4
   20bea:	f00c fa50 	bl	2d08e <bt_le_conn_params_valid>
   20bee:	2800      	cmp	r0, #0
   20bf0:	d1f3      	bne.n	20bda <le_param_req+0x36>
   20bf2:	e7e0      	b.n	20bb6 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   20bf4:	4621      	mov	r1, r4
   20bf6:	4638      	mov	r0, r7
   20bf8:	4798      	blx	r3
   20bfa:	2800      	cmp	r0, #0
   20bfc:	d0db      	beq.n	20bb6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   20bfe:	4620      	mov	r0, r4
   20c00:	f00c fa45 	bl	2d08e <bt_le_conn_params_valid>
   20c04:	2800      	cmp	r0, #0
   20c06:	d1e4      	bne.n	20bd2 <le_param_req+0x2e>
   20c08:	e7d5      	b.n	20bb6 <le_param_req+0x12>
   20c0a:	bf00      	nop
   20c0c:	20002898 	.word	0x20002898
   20c10:	00032454 	.word	0x00032454
   20c14:	00032454 	.word	0x00032454

00020c18 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   20c18:	4b02      	ldr	r3, [pc, #8]	; (20c24 <bt_conn_cb_register+0xc>)
   20c1a:	681a      	ldr	r2, [r3, #0]
   20c1c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   20c1e:	6018      	str	r0, [r3, #0]
}
   20c20:	4770      	bx	lr
   20c22:	bf00      	nop
   20c24:	20002898 	.word	0x20002898

00020c28 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   20c28:	b570      	push	{r4, r5, r6, lr}
   20c2a:	4606      	mov	r6, r0
   20c2c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   20c2e:	4809      	ldr	r0, [pc, #36]	; (20c54 <bt_conn_add_le+0x2c>)
   20c30:	2101      	movs	r1, #1
   20c32:	f7ff fdf1 	bl	20818 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   20c36:	4604      	mov	r4, r0
   20c38:	b150      	cbz	r0, 20c50 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   20c3a:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   20c3c:	2207      	movs	r2, #7
   20c3e:	4629      	mov	r1, r5
   20c40:	3088      	adds	r0, #136	; 0x88
   20c42:	f00c f83a 	bl	2ccba <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   20c46:	2301      	movs	r3, #1
   20c48:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   20c4a:	4b03      	ldr	r3, [pc, #12]	; (20c58 <bt_conn_add_le+0x30>)
   20c4c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   20c50:	4620      	mov	r0, r4
   20c52:	bd70      	pop	{r4, r5, r6, pc}
   20c54:	20001c48 	.word	0x20001c48
   20c58:	00280018 	.word	0x00280018

00020c5c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   20c5c:	b570      	push	{r4, r5, r6, lr}
   20c5e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   20c60:	480c      	ldr	r0, [pc, #48]	; (20c94 <bt_conn_lookup_addr_le+0x38>)
{
   20c62:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   20c64:	f00c fd74 	bl	2d750 <bt_conn_ref>

		if (!conn) {
   20c68:	4604      	mov	r4, r0
   20c6a:	b128      	cbz	r0, 20c78 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   20c6c:	7883      	ldrb	r3, [r0, #2]
   20c6e:	2b01      	cmp	r3, #1
   20c70:	d004      	beq.n	20c7c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   20c72:	f00c fd88 	bl	2d786 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   20c76:	2400      	movs	r4, #0
}
   20c78:	4620      	mov	r0, r4
   20c7a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   20c7c:	4629      	mov	r1, r5
   20c7e:	4632      	mov	r2, r6
   20c80:	f00c fdc8 	bl	2d814 <bt_conn_is_peer_addr_le>
   20c84:	4605      	mov	r5, r0
   20c86:	2800      	cmp	r0, #0
   20c88:	d1f6      	bne.n	20c78 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   20c8a:	4620      	mov	r0, r4
   20c8c:	f00c fd7b 	bl	2d786 <bt_conn_unref>
	return NULL;
   20c90:	462c      	mov	r4, r5
			continue;
   20c92:	e7f1      	b.n	20c78 <bt_conn_lookup_addr_le+0x1c>
   20c94:	20001c48 	.word	0x20001c48

00020c98 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   20c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c9a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   20c9c:	480e      	ldr	r0, [pc, #56]	; (20cd8 <bt_conn_lookup_state_le+0x40>)
{
   20c9e:	460e      	mov	r6, r1
   20ca0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   20ca2:	f00c fd55 	bl	2d750 <bt_conn_ref>

		if (!conn) {
   20ca6:	4604      	mov	r4, r0
   20ca8:	b1a0      	cbz	r0, 20cd4 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   20caa:	7883      	ldrb	r3, [r0, #2]
   20cac:	2b01      	cmp	r3, #1
   20cae:	d003      	beq.n	20cb8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   20cb0:	f00c fd69 	bl	2d786 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   20cb4:	2400      	movs	r4, #0
			continue;
   20cb6:	e00d      	b.n	20cd4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   20cb8:	b136      	cbz	r6, 20cc8 <bt_conn_lookup_state_le+0x30>
   20cba:	4632      	mov	r2, r6
   20cbc:	4629      	mov	r1, r5
   20cbe:	f00c fda9 	bl	2d814 <bt_conn_is_peer_addr_le>
   20cc2:	b908      	cbnz	r0, 20cc8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   20cc4:	4620      	mov	r0, r4
   20cc6:	e7f3      	b.n	20cb0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   20cc8:	7aa3      	ldrb	r3, [r4, #10]
   20cca:	42bb      	cmp	r3, r7
   20ccc:	d1fa      	bne.n	20cc4 <bt_conn_lookup_state_le+0x2c>
   20cce:	7a23      	ldrb	r3, [r4, #8]
   20cd0:	42ab      	cmp	r3, r5
   20cd2:	d1f7      	bne.n	20cc4 <bt_conn_lookup_state_le+0x2c>
}
   20cd4:	4620      	mov	r0, r4
   20cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20cd8:	20001c48 	.word	0x20001c48

00020cdc <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   20cdc:	b510      	push	{r4, lr}
	info->type = conn->type;
   20cde:	7882      	ldrb	r2, [r0, #2]
   20ce0:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   20ce2:	78c4      	ldrb	r4, [r0, #3]
   20ce4:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   20ce6:	7a03      	ldrb	r3, [r0, #8]
   20ce8:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   20cea:	2a01      	cmp	r2, #1
   20cec:	d11c      	bne.n	20d28 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   20cee:	f100 0288 	add.w	r2, r0, #136	; 0x88
   20cf2:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   20cf4:	4a0e      	ldr	r2, [pc, #56]	; (20d30 <bt_conn_get_info+0x54>)
   20cf6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   20cfa:	4413      	add	r3, r2
   20cfc:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   20cfe:	f100 0296 	add.w	r2, r0, #150	; 0x96
   20d02:	f100 038f 	add.w	r3, r0, #143	; 0x8f
   20d06:	b964      	cbnz	r4, 20d22 <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   20d08:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   20d0c:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   20d10:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   20d12:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   20d16:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   20d18:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   20d1c:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   20d1e:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   20d20:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   20d22:	e9c1 2303 	strd	r2, r3, [r1, #12]
   20d26:	e7f1      	b.n	20d0c <bt_conn_get_info+0x30>
	return -EINVAL;
   20d28:	f06f 0015 	mvn.w	r0, #21
   20d2c:	e7f8      	b.n	20d20 <bt_conn_get_info+0x44>
   20d2e:	bf00      	nop
   20d30:	200002b0 	.word	0x200002b0

00020d34 <send_conn_le_param_update>:
{
   20d34:	b538      	push	{r3, r4, r5, lr}
   20d36:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   20d38:	4608      	mov	r0, r1
{
   20d3a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   20d3c:	f00c f9a7 	bl	2d08e <bt_le_conn_params_valid>
   20d40:	b348      	cbz	r0, 20d96 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   20d42:	4b16      	ldr	r3, [pc, #88]	; (20d9c <send_conn_le_param_update+0x68>)
   20d44:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   20d48:	0799      	lsls	r1, r3, #30
   20d4a:	d407      	bmi.n	20d5c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   20d4c:	78e3      	ldrb	r3, [r4, #3]
   20d4e:	b183      	cbz	r3, 20d72 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   20d50:	4629      	mov	r1, r5
   20d52:	4620      	mov	r0, r4
}
   20d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   20d58:	f000 b9b2 	b.w	210c0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   20d5c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   20d60:	079a      	lsls	r2, r3, #30
   20d62:	d5f3      	bpl.n	20d4c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20d64:	f3bf 8f5b 	dmb	ish
   20d68:	6863      	ldr	r3, [r4, #4]
   20d6a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   20d6e:	055b      	lsls	r3, r3, #21
   20d70:	d4ec      	bmi.n	20d4c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   20d72:	4629      	mov	r1, r5
   20d74:	4620      	mov	r0, r4
   20d76:	f00c fd75 	bl	2d864 <bt_conn_le_conn_update>
		if (rc == 0) {
   20d7a:	b958      	cbnz	r0, 20d94 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   20d7c:	882b      	ldrh	r3, [r5, #0]
   20d7e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   20d82:	886b      	ldrh	r3, [r5, #2]
   20d84:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   20d88:	88ab      	ldrh	r3, [r5, #4]
   20d8a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   20d8e:	88eb      	ldrh	r3, [r5, #6]
   20d90:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   20d94:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20d96:	f06f 0015 	mvn.w	r0, #21
   20d9a:	e7fb      	b.n	20d94 <send_conn_le_param_update+0x60>
   20d9c:	200002b0 	.word	0x200002b0

00020da0 <deferred_work>:
{
   20da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   20da2:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   20da6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   20da8:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   20dac:	b9f3      	cbnz	r3, 20dec <deferred_work+0x4c>
		bt_l2cap_disconnected(conn);
   20dae:	4630      	mov	r0, r6
   20db0:	f00c fddd 	bl	2d96e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   20db4:	4b22      	ldr	r3, [pc, #136]	; (20e40 <deferred_work+0xa0>)
   20db6:	681d      	ldr	r5, [r3, #0]
   20db8:	b945      	cbnz	r5, 20dcc <deferred_work+0x2c>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20dba:	4d22      	ldr	r5, [pc, #136]	; (20e44 <deferred_work+0xa4>)
   20dbc:	4f22      	ldr	r7, [pc, #136]	; (20e48 <deferred_work+0xa8>)
   20dbe:	42bd      	cmp	r5, r7
   20dc0:	d30c      	bcc.n	20ddc <deferred_work+0x3c>
		bt_conn_unref(conn);
   20dc2:	4630      	mov	r0, r6
   20dc4:	f00c fcdf 	bl	2d786 <bt_conn_unref>
}
   20dc8:	b003      	add	sp, #12
   20dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (cb->disconnected) {
   20dcc:	686b      	ldr	r3, [r5, #4]
   20dce:	b11b      	cbz	r3, 20dd8 <deferred_work+0x38>
			cb->disconnected(conn, conn->err);
   20dd0:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   20dd4:	4630      	mov	r0, r6
   20dd6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   20dd8:	692d      	ldr	r5, [r5, #16]
   20dda:	e7ed      	b.n	20db8 <deferred_work+0x18>
		if (cb->disconnected) {
   20ddc:	686b      	ldr	r3, [r5, #4]
   20dde:	b11b      	cbz	r3, 20de8 <deferred_work+0x48>
			cb->disconnected(conn, conn->err);
   20de0:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   20de4:	4630      	mov	r0, r6
   20de6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20de8:	3514      	adds	r5, #20
   20dea:	e7e8      	b.n	20dbe <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   20dec:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   20df0:	2b01      	cmp	r3, #1
   20df2:	d1e9      	bne.n	20dc8 <deferred_work+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20df4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   20df8:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   20dfc:	e855 3f00 	ldrex	r3, [r5]
   20e00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   20e04:	e845 2100 	strex	r1, r2, [r5]
   20e08:	2900      	cmp	r1, #0
   20e0a:	d1f7      	bne.n	20dfc <deferred_work+0x5c>
   20e0c:	f3bf 8f5b 	dmb	ish
   20e10:	059b      	lsls	r3, r3, #22
   20e12:	d507      	bpl.n	20e24 <deferred_work+0x84>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   20e14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   20e16:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   20e18:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   20e1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   20e1c:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   20e1e:	4630      	mov	r0, r6
   20e20:	f7ff ff88 	bl	20d34 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20e24:	f3bf 8f5b 	dmb	ish
   20e28:	e855 3f00 	ldrex	r3, [r5]
   20e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20e30:	e845 3200 	strex	r2, r3, [r5]
   20e34:	2a00      	cmp	r2, #0
   20e36:	d1f7      	bne.n	20e28 <deferred_work+0x88>
   20e38:	f3bf 8f5b 	dmb	ish
   20e3c:	e7c4      	b.n	20dc8 <deferred_work+0x28>
   20e3e:	bf00      	nop
   20e40:	20002898 	.word	0x20002898
   20e44:	00032454 	.word	0x00032454
   20e48:	00032454 	.word	0x00032454

00020e4c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   20e4c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   20e4e:	4801      	ldr	r0, [pc, #4]	; (20e54 <bt_conn_create_frag_timeout+0x8>)
   20e50:	f7ff be4a 	b.w	20ae8 <bt_conn_create_pdu_timeout>
   20e54:	20000d24 	.word	0x20000d24

00020e58 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   20e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e5c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   20e5e:	f04f 33ff 	mov.w	r3, #4294967295
   20e62:	f04f 32ff 	mov.w	r2, #4294967295
   20e66:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   20e68:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   20e6a:	f7ff ffef 	bl	20e4c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   20e6e:	7833      	ldrb	r3, [r6, #0]
   20e70:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   20e72:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   20e74:	f04f 0600 	mov.w	r6, #0
   20e78:	d005      	beq.n	20e86 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   20e7a:	f002 fb53 	bl	23524 <net_buf_unref>
		return NULL;
   20e7e:	4635      	mov	r5, r6
}
   20e80:	4628      	mov	r0, r5
   20e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   20e86:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   20e88:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   20e8c:	4e0c      	ldr	r6, [pc, #48]	; (20ec0 <create_frag.isra.0+0x68>)
   20e8e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   20e90:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   20e94:	f00e fe20 	bl	2fad8 <net_buf_simple_tailroom>
   20e98:	4580      	cmp	r8, r0
   20e9a:	d20c      	bcs.n	20eb6 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   20e9c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20ea0:	f854 1f08 	ldr.w	r1, [r4, #8]!
   20ea4:	4632      	mov	r2, r6
   20ea6:	4638      	mov	r0, r7
   20ea8:	f00e fde1 	bl	2fa6e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   20eac:	4631      	mov	r1, r6
   20eae:	4620      	mov	r0, r4
   20eb0:	f00e fdf6 	bl	2faa0 <net_buf_simple_pull>
   20eb4:	e7e4      	b.n	20e80 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   20eb6:	4638      	mov	r0, r7
   20eb8:	f00e fe0e 	bl	2fad8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   20ebc:	b286      	uxth	r6, r0
   20ebe:	e7ef      	b.n	20ea0 <create_frag.isra.0+0x48>
   20ec0:	200002b0 	.word	0x200002b0

00020ec4 <bt_conn_process_tx>:
{
   20ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   20ec6:	7a83      	ldrb	r3, [r0, #10]
{
   20ec8:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   20eca:	b993      	cbnz	r3, 20ef2 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20ecc:	f3bf 8f5b 	dmb	ish
   20ed0:	1d03      	adds	r3, r0, #4
   20ed2:	e853 2f00 	ldrex	r2, [r3]
   20ed6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   20eda:	e843 1400 	strex	r4, r1, [r3]
   20ede:	2c00      	cmp	r4, #0
   20ee0:	d1f7      	bne.n	20ed2 <bt_conn_process_tx+0xe>
   20ee2:	f3bf 8f5b 	dmb	ish
   20ee6:	0653      	lsls	r3, r2, #25
   20ee8:	d503      	bpl.n	20ef2 <bt_conn_process_tx+0x2e>
}
   20eea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   20eee:	f00c bbc1 	b.w	2d674 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   20ef2:	2200      	movs	r2, #0
   20ef4:	2300      	movs	r3, #0
   20ef6:	f105 0038 	add.w	r0, r5, #56	; 0x38
   20efa:	f00e fd61 	bl	2f9c0 <net_buf_get>
	BT_ASSERT(buf);
   20efe:	4604      	mov	r4, r0
   20f00:	b960      	cbnz	r0, 20f1c <bt_conn_process_tx+0x58>
   20f02:	4a20      	ldr	r2, [pc, #128]	; (20f84 <bt_conn_process_tx+0xc0>)
   20f04:	4920      	ldr	r1, [pc, #128]	; (20f88 <bt_conn_process_tx+0xc4>)
   20f06:	4821      	ldr	r0, [pc, #132]	; (20f8c <bt_conn_process_tx+0xc8>)
   20f08:	f240 23e7 	movw	r3, #743	; 0x2e7
   20f0c:	f00a fdc6 	bl	2ba9c <printk>
   20f10:	4040      	eors	r0, r0
   20f12:	f380 8811 	msr	BASEPRI, r0
   20f16:	f04f 0003 	mov.w	r0, #3
   20f1a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   20f1c:	4f1c      	ldr	r7, [pc, #112]	; (20f90 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   20f1e:	89a1      	ldrh	r1, [r4, #12]
   20f20:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   20f24:	4291      	cmp	r1, r2
   20f26:	d807      	bhi.n	20f38 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   20f28:	2300      	movs	r3, #0
   20f2a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   20f2c:	4621      	mov	r1, r4
   20f2e:	4628      	mov	r0, r5
   20f30:	f7ff fbe4 	bl	206fc <send_frag>
	if (!send_buf(conn, buf)) {
   20f34:	b140      	cbz	r0, 20f48 <bt_conn_process_tx+0x84>
}
   20f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   20f38:	f105 060a 	add.w	r6, r5, #10
   20f3c:	4621      	mov	r1, r4
   20f3e:	4630      	mov	r0, r6
   20f40:	f7ff ff8a 	bl	20e58 <create_frag.isra.0>
	if (!frag) {
   20f44:	4601      	mov	r1, r0
   20f46:	b920      	cbnz	r0, 20f52 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   20f48:	4620      	mov	r0, r4
}
   20f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   20f4e:	f002 bae9 	b.w	23524 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   20f52:	2301      	movs	r3, #1
   20f54:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   20f56:	4628      	mov	r0, r5
   20f58:	f7ff fbd0 	bl	206fc <send_frag>
   20f5c:	2800      	cmp	r0, #0
   20f5e:	d0f3      	beq.n	20f48 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   20f60:	89a2      	ldrh	r2, [r4, #12]
   20f62:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   20f66:	429a      	cmp	r2, r3
   20f68:	d802      	bhi.n	20f70 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   20f6a:	2300      	movs	r3, #0
   20f6c:	2203      	movs	r2, #3
   20f6e:	e7dd      	b.n	20f2c <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   20f70:	4621      	mov	r1, r4
   20f72:	4630      	mov	r0, r6
   20f74:	f7ff ff70 	bl	20e58 <create_frag.isra.0>
		if (!frag) {
   20f78:	4601      	mov	r1, r0
   20f7a:	2800      	cmp	r0, #0
   20f7c:	d0e4      	beq.n	20f48 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   20f7e:	2301      	movs	r3, #1
   20f80:	461a      	mov	r2, r3
   20f82:	e7e8      	b.n	20f56 <bt_conn_process_tx+0x92>
   20f84:	0003321c 	.word	0x0003321c
   20f88:	000331f3 	.word	0x000331f3
   20f8c:	0003317f 	.word	0x0003317f
   20f90:	200002b0 	.word	0x200002b0

00020f94 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   20f94:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   20f96:	490f      	ldr	r1, [pc, #60]	; (20fd4 <bt_conn_init+0x40>)
   20f98:	480f      	ldr	r0, [pc, #60]	; (20fd8 <bt_conn_init+0x44>)
   20f9a:	f010 fc09 	bl	317b0 <k_queue_append>
   20f9e:	490f      	ldr	r1, [pc, #60]	; (20fdc <bt_conn_init+0x48>)
   20fa0:	480d      	ldr	r0, [pc, #52]	; (20fd8 <bt_conn_init+0x44>)
   20fa2:	f010 fc05 	bl	317b0 <k_queue_append>
   20fa6:	490e      	ldr	r1, [pc, #56]	; (20fe0 <bt_conn_init+0x4c>)
   20fa8:	480b      	ldr	r0, [pc, #44]	; (20fd8 <bt_conn_init+0x44>)
   20faa:	f010 fc01 	bl	317b0 <k_queue_append>
   20fae:	490d      	ldr	r1, [pc, #52]	; (20fe4 <bt_conn_init+0x50>)
   20fb0:	4809      	ldr	r0, [pc, #36]	; (20fd8 <bt_conn_init+0x44>)
   20fb2:	f010 fbfd 	bl	317b0 <k_queue_append>
   20fb6:	490c      	ldr	r1, [pc, #48]	; (20fe8 <bt_conn_init+0x54>)
   20fb8:	4807      	ldr	r0, [pc, #28]	; (20fd8 <bt_conn_init+0x44>)
   20fba:	f010 fbf9 	bl	317b0 <k_queue_append>
	}

	bt_att_init();
   20fbe:	f00d f9be 	bl	2e33e <bt_att_init>

	err = bt_smp_init();
   20fc2:	f00d fdf1 	bl	2eba8 <bt_smp_init>
	if (err) {
   20fc6:	4604      	mov	r4, r0
   20fc8:	b908      	cbnz	r0, 20fce <bt_conn_init+0x3a>
		return err;
	}

	bt_l2cap_init();
   20fca:	f00c fd6e 	bl	2daaa <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   20fce:	4620      	mov	r0, r4
   20fd0:	bd10      	pop	{r4, pc}
   20fd2:	bf00      	nop
   20fd4:	2000289c 	.word	0x2000289c
   20fd8:	20000cb4 	.word	0x20000cb4
   20fdc:	200028ac 	.word	0x200028ac
   20fe0:	200028bc 	.word	0x200028bc
   20fe4:	200028cc 	.word	0x200028cc
   20fe8:	200028dc 	.word	0x200028dc

00020fec <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   20fec:	4b04      	ldr	r3, [pc, #16]	; (21000 <l2cap_accept+0x14>)
   20fee:	6818      	ldr	r0, [r3, #0]
   20ff0:	b918      	cbnz	r0, 20ffa <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   20ff2:	4a04      	ldr	r2, [pc, #16]	; (21004 <l2cap_accept+0x18>)
   20ff4:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   20ff6:	600b      	str	r3, [r1, #0]

		return 0;
   20ff8:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   20ffa:	f06f 000b 	mvn.w	r0, #11
}
   20ffe:	4770      	bx	lr
   21000:	20001d08 	.word	0x20001d08
   21004:	00032940 	.word	0x00032940

00021008 <bt_l2cap_connected>:
{
   21008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2100c:	4e29      	ldr	r6, [pc, #164]	; (210b4 <bt_l2cap_connected+0xac>)
   2100e:	4f2a      	ldr	r7, [pc, #168]	; (210b8 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   21010:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 210bc <bt_l2cap_connected+0xb4>
{
   21014:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   21016:	42be      	cmp	r6, r7
   21018:	d302      	bcc.n	21020 <bt_l2cap_connected+0x18>
}
   2101a:	b003      	add	sp, #12
   2101c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   21020:	6873      	ldr	r3, [r6, #4]
   21022:	a901      	add	r1, sp, #4
   21024:	4620      	mov	r0, r4
   21026:	4798      	blx	r3
   21028:	2800      	cmp	r0, #0
   2102a:	db3d      	blt.n	210a8 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   2102c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   2102e:	8833      	ldrh	r3, [r6, #0]
   21030:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   21034:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   21038:	4641      	mov	r1, r8
   2103a:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   2103e:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   21042:	f010 fca3 	bl	3198c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21046:	f3bf 8f5b 	dmb	ish
   2104a:	f105 0368 	add.w	r3, r5, #104	; 0x68
   2104e:	2200      	movs	r2, #0
   21050:	e853 1f00 	ldrex	r1, [r3]
   21054:	e843 2000 	strex	r0, r2, [r3]
   21058:	2800      	cmp	r0, #0
   2105a:	d1f9      	bne.n	21050 <bt_l2cap_connected+0x48>
   2105c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   21060:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   21062:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   21064:	f105 0308 	add.w	r3, r5, #8
   21068:	bb02      	cbnz	r2, 210ac <bt_l2cap_connected+0xa4>
	list->head = node;
   2106a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   2106e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   21070:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   21072:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   21074:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   21078:	681b      	ldr	r3, [r3, #0]
   2107a:	b103      	cbz	r3, 2107e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   2107c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2107e:	9b01      	ldr	r3, [sp, #4]
   21080:	f3bf 8f5b 	dmb	ish
   21084:	3368      	adds	r3, #104	; 0x68
   21086:	e853 2f00 	ldrex	r2, [r3]
   2108a:	f042 0201 	orr.w	r2, r2, #1
   2108e:	e843 2100 	strex	r1, r2, [r3]
   21092:	2900      	cmp	r1, #0
   21094:	d1f7      	bne.n	21086 <bt_l2cap_connected+0x7e>
   21096:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   2109a:	9801      	ldr	r0, [sp, #4]
   2109c:	6843      	ldr	r3, [r0, #4]
   2109e:	699b      	ldr	r3, [r3, #24]
   210a0:	b113      	cbz	r3, 210a8 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   210a2:	f100 0168 	add.w	r1, r0, #104	; 0x68
   210a6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   210a8:	360c      	adds	r6, #12
   210aa:	e7b4      	b.n	21016 <bt_l2cap_connected+0xe>
	parent->next = child;
   210ac:	6013      	str	r3, [r2, #0]
	list->tail = node;
   210ae:	6563      	str	r3, [r4, #84]	; 0x54
}
   210b0:	e7dd      	b.n	2106e <bt_l2cap_connected+0x66>
   210b2:	bf00      	nop
   210b4:	00032430 	.word	0x00032430
   210b8:	00032454 	.word	0x00032454
   210bc:	0002d957 	.word	0x0002d957

000210c0 <bt_l2cap_update_conn_param>:
{
   210c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   210c2:	4b17      	ldr	r3, [pc, #92]	; (21120 <bt_l2cap_update_conn_param+0x60>)
   210c4:	781a      	ldrb	r2, [r3, #0]
   210c6:	3201      	adds	r2, #1
	if (!ident) {
   210c8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   210cc:	bf08      	it	eq
   210ce:	2201      	moveq	r2, #1
   210d0:	701a      	strb	r2, [r3, #0]
{
   210d2:	4606      	mov	r6, r0
   210d4:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   210d6:	2208      	movs	r2, #8
   210d8:	7819      	ldrb	r1, [r3, #0]
   210da:	2012      	movs	r0, #18
   210dc:	f00c fbee 	bl	2d8bc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   210e0:	4604      	mov	r4, r0
   210e2:	b1d0      	cbz	r0, 2111a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   210e4:	2108      	movs	r1, #8
   210e6:	4408      	add	r0, r1
   210e8:	f00e fcbb 	bl	2fa62 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   210ec:	882b      	ldrh	r3, [r5, #0]
   210ee:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   210f0:	886b      	ldrh	r3, [r5, #2]
   210f2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   210f4:	88ab      	ldrh	r3, [r5, #4]
   210f6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   210f8:	88eb      	ldrh	r3, [r5, #6]
   210fa:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   210fc:	2300      	movs	r3, #0
   210fe:	9300      	str	r3, [sp, #0]
   21100:	4622      	mov	r2, r4
   21102:	2105      	movs	r1, #5
   21104:	4630      	mov	r0, r6
   21106:	f00c fc4b 	bl	2d9a0 <bt_l2cap_send_cb>
	if (err) {
   2110a:	4605      	mov	r5, r0
   2110c:	b110      	cbz	r0, 21114 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   2110e:	4620      	mov	r0, r4
   21110:	f002 fa08 	bl	23524 <net_buf_unref>
}
   21114:	4628      	mov	r0, r5
   21116:	b002      	add	sp, #8
   21118:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   2111a:	f06f 050b 	mvn.w	r5, #11
   2111e:	e7f9      	b.n	21114 <bt_l2cap_update_conn_param+0x54>
   21120:	200036f9 	.word	0x200036f9

00021124 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   21124:	4b02      	ldr	r3, [pc, #8]	; (21130 <att_cfm_sent+0xc>)
   21126:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2112a:	f00c bcec 	b.w	2db06 <att_sent>
   2112e:	bf00      	nop
   21130:	0002dfb5 	.word	0x0002dfb5

00021134 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   21134:	4b02      	ldr	r3, [pc, #8]	; (21140 <att_rsp_sent+0xc>)
   21136:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2113a:	f00c bce4 	b.w	2db06 <att_sent>
   2113e:	bf00      	nop
   21140:	0002df99 	.word	0x0002df99

00021144 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   21144:	4b02      	ldr	r3, [pc, #8]	; (21150 <att_req_sent+0xc>)
   21146:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2114a:	f00c bcdc 	b.w	2db06 <att_sent>
   2114e:	bf00      	nop
   21150:	0002df7f 	.word	0x0002df7f

00021154 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   21154:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21156:	3808      	subs	r0, #8
   21158:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   2115a:	a901      	add	r1, sp, #4
   2115c:	4802      	ldr	r0, [pc, #8]	; (21168 <bt_att_released+0x14>)
   2115e:	f010 fa69 	bl	31634 <k_mem_slab_free>
}
   21162:	b003      	add	sp, #12
   21164:	f85d fb04 	ldr.w	pc, [sp], #4
   21168:	20000bbc 	.word	0x20000bbc

0002116c <chan_send>:
{
   2116c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   21170:	688b      	ldr	r3, [r1, #8]
   21172:	781b      	ldrb	r3, [r3, #0]
   21174:	2bd2      	cmp	r3, #210	; 0xd2
{
   21176:	4606      	mov	r6, r0
   21178:	460c      	mov	r4, r1
   2117a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2117c:	d10c      	bne.n	21198 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   2117e:	6803      	ldr	r3, [r0, #0]
   21180:	6818      	ldr	r0, [r3, #0]
   21182:	f00d fd0e 	bl	2eba2 <bt_smp_sign>
		if (err) {
   21186:	4605      	mov	r5, r0
   21188:	b130      	cbz	r0, 21198 <chan_send+0x2c>
			net_buf_unref(buf);
   2118a:	4620      	mov	r0, r4
   2118c:	f002 f9ca 	bl	23524 <net_buf_unref>
}
   21190:	4628      	mov	r0, r5
   21192:	b003      	add	sp, #12
   21194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   21198:	f104 0008 	add.w	r0, r4, #8
   2119c:	f00e fc98 	bl	2fad0 <net_buf_simple_headroom>
	state->len = buf->len;
   211a0:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   211a4:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   211a6:	b957      	cbnz	r7, 211be <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   211a8:	68a3      	ldr	r3, [r4, #8]
   211aa:	7818      	ldrb	r0, [r3, #0]
   211ac:	f00c fcc3 	bl	2db36 <att_op_get_type>
   211b0:	3801      	subs	r0, #1
   211b2:	b2c0      	uxtb	r0, r0
   211b4:	2804      	cmp	r0, #4
   211b6:	bf9c      	itt	ls
   211b8:	4b13      	ldrls	r3, [pc, #76]	; (21208 <chan_send+0x9c>)
   211ba:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   211be:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   211c0:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   211c4:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   211c6:	4b11      	ldr	r3, [pc, #68]	; (2120c <chan_send+0xa0>)
   211c8:	429f      	cmp	r7, r3
   211ca:	d018      	beq.n	211fe <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   211cc:	4b10      	ldr	r3, [pc, #64]	; (21210 <chan_send+0xa4>)
   211ce:	429f      	cmp	r7, r3
   211d0:	d017      	beq.n	21202 <chan_send+0x96>
		return att_sent;
   211d2:	4910      	ldr	r1, [pc, #64]	; (21214 <chan_send+0xa8>)
   211d4:	4b10      	ldr	r3, [pc, #64]	; (21218 <chan_send+0xac>)
   211d6:	4a11      	ldr	r2, [pc, #68]	; (2121c <chan_send+0xb0>)
   211d8:	428f      	cmp	r7, r1
   211da:	bf18      	it	ne
   211dc:	4613      	movne	r3, r2
			       &chan->chan.chan);
   211de:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   211e0:	9600      	str	r6, [sp, #0]
   211e2:	4622      	mov	r2, r4
   211e4:	2104      	movs	r1, #4
   211e6:	f00c fbdb 	bl	2d9a0 <bt_l2cap_send_cb>
	if (err) {
   211ea:	4605      	mov	r5, r0
   211ec:	2800      	cmp	r0, #0
   211ee:	d0cf      	beq.n	21190 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   211f0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   211f2:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   211f6:	fa10 f088 	uxtah	r0, r0, r8
   211fa:	60a0      	str	r0, [r4, #8]
}
   211fc:	e7c8      	b.n	21190 <chan_send+0x24>
		return att_rsp_sent;
   211fe:	4b08      	ldr	r3, [pc, #32]	; (21220 <chan_send+0xb4>)
   21200:	e7ed      	b.n	211de <chan_send+0x72>
		return att_cfm_sent;
   21202:	4b08      	ldr	r3, [pc, #32]	; (21224 <chan_send+0xb8>)
   21204:	e7eb      	b.n	211de <chan_send+0x72>
   21206:	bf00      	nop
   21208:	00032964 	.word	0x00032964
   2120c:	0002df99 	.word	0x0002df99
   21210:	0002dfb5 	.word	0x0002dfb5
   21214:	0002df7f 	.word	0x0002df7f
   21218:	00021145 	.word	0x00021145
   2121c:	0002db07 	.word	0x0002db07
   21220:	00021135 	.word	0x00021135
   21224:	00021125 	.word	0x00021125

00021228 <read_group_cb>:
{
   21228:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2122c:	4606      	mov	r6, r0
   2122e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   21230:	f04f 0800 	mov.w	r8, #0
   21234:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   21238:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   2123a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2123c:	f88d 8008 	strb.w	r8, [sp, #8]
   21240:	a902      	add	r1, sp, #8
{
   21242:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   21244:	f8ad 300a 	strh.w	r3, [sp, #10]
   21248:	f00b fda3 	bl	2cd92 <bt_uuid_cmp>
   2124c:	b1a0      	cbz	r0, 21278 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2124e:	f642 0301 	movw	r3, #10241	; 0x2801
   21252:	6830      	ldr	r0, [r6, #0]
   21254:	f88d 800c 	strb.w	r8, [sp, #12]
   21258:	a903      	add	r1, sp, #12
   2125a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2125e:	f00b fd98 	bl	2cd92 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   21262:	b148      	cbz	r0, 21278 <read_group_cb+0x50>
		if (data->group &&
   21264:	6923      	ldr	r3, [r4, #16]
   21266:	b11b      	cbz	r3, 21270 <read_group_cb+0x48>
   21268:	885a      	ldrh	r2, [r3, #2]
   2126a:	42aa      	cmp	r2, r5
   2126c:	d200      	bcs.n	21270 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2126e:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   21270:	2001      	movs	r0, #1
}
   21272:	b004      	add	sp, #16
   21274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   21278:	6861      	ldr	r1, [r4, #4]
   2127a:	6830      	ldr	r0, [r6, #0]
   2127c:	f00b fd89 	bl	2cd92 <bt_uuid_cmp>
   21280:	b110      	cbz	r0, 21288 <read_group_cb+0x60>
		data->group = NULL;
   21282:	2300      	movs	r3, #0
   21284:	6123      	str	r3, [r4, #16]
   21286:	e7f3      	b.n	21270 <read_group_cb+0x48>
	if (data->rsp->len &&
   21288:	68e3      	ldr	r3, [r4, #12]
   2128a:	68a0      	ldr	r0, [r4, #8]
   2128c:	781a      	ldrb	r2, [r3, #0]
   2128e:	b13a      	cbz	r2, 212a0 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   21290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   21294:	8981      	ldrh	r1, [r0, #12]
   21296:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   21298:	4293      	cmp	r3, r2
   2129a:	da01      	bge.n	212a0 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   2129c:	2000      	movs	r0, #0
   2129e:	e7e8      	b.n	21272 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   212a0:	2104      	movs	r1, #4
   212a2:	3008      	adds	r0, #8
   212a4:	f00e fbdd 	bl	2fa62 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   212a8:	4b09      	ldr	r3, [pc, #36]	; (212d0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   212aa:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   212ac:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   212ae:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   212b0:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   212b2:	4631      	mov	r1, r6
   212b4:	9300      	str	r3, [sp, #0]
   212b6:	9401      	str	r4, [sp, #4]
   212b8:	2300      	movs	r3, #0
   212ba:	4638      	mov	r0, r7
   212bc:	f00c fca9 	bl	2dc12 <att_chan_read>
	if (read < 0) {
   212c0:	2800      	cmp	r0, #0
   212c2:	dbeb      	blt.n	2129c <read_group_cb+0x74>
	if (!data->group) {
   212c4:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   212c6:	3800      	subs	r0, #0
   212c8:	bf18      	it	ne
   212ca:	2001      	movne	r0, #1
   212cc:	e7d1      	b.n	21272 <read_group_cb+0x4a>
   212ce:	bf00      	nop
   212d0:	0002df5f 	.word	0x0002df5f

000212d4 <read_type_cb>:
{
   212d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   212d8:	f8d2 8000 	ldr.w	r8, [r2]
{
   212dc:	4606      	mov	r6, r0
   212de:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   212e0:	6800      	ldr	r0, [r0, #0]
   212e2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   212e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   212e8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   212ea:	f00b fd52 	bl	2cd92 <bt_uuid_cmp>
   212ee:	4607      	mov	r7, r0
   212f0:	2800      	cmp	r0, #0
   212f2:	d13e      	bne.n	21372 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   212f4:	4628      	mov	r0, r5
   212f6:	2215      	movs	r2, #21
   212f8:	4631      	mov	r1, r6
   212fa:	f00d fbae 	bl	2ea5a <bt_gatt_check_perm>
   212fe:	4605      	mov	r5, r0
   21300:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   21302:	b148      	cbz	r0, 21318 <read_type_cb+0x44>
		if (data->rsp->len) {
   21304:	68e3      	ldr	r3, [r4, #12]
   21306:	781b      	ldrb	r3, [r3, #0]
   21308:	b923      	cbnz	r3, 21314 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   2130a:	2500      	movs	r5, #0
}
   2130c:	4628      	mov	r0, r5
   2130e:	b003      	add	sp, #12
   21310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   21314:	7527      	strb	r7, [r4, #20]
   21316:	e7f8      	b.n	2130a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   21318:	68a0      	ldr	r0, [r4, #8]
   2131a:	f00e fb80 	bl	2fa1e <net_buf_frag_last>
   2131e:	2102      	movs	r1, #2
   21320:	3008      	adds	r0, #8
   21322:	f00e fb9e 	bl	2fa62 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   21326:	4b14      	ldr	r3, [pc, #80]	; (21378 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   21328:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2132a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   2132c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   21330:	4631      	mov	r1, r6
   21332:	9300      	str	r3, [sp, #0]
   21334:	9401      	str	r4, [sp, #4]
   21336:	462b      	mov	r3, r5
   21338:	4640      	mov	r0, r8
   2133a:	f00c fc6a 	bl	2dc12 <att_chan_read>
	if (read < 0) {
   2133e:	2800      	cmp	r0, #0
   21340:	da07      	bge.n	21352 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   21342:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   21346:	bf26      	itte	cs
   21348:	4240      	negcs	r0, r0
   2134a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2134c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   2134e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   21350:	e7dc      	b.n	2130c <read_type_cb+0x38>
	if (!data->item) {
   21352:	6923      	ldr	r3, [r4, #16]
   21354:	2b00      	cmp	r3, #0
   21356:	d0d8      	beq.n	2130a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   21358:	68a0      	ldr	r0, [r4, #8]
   2135a:	f00c fbcc 	bl	2daf6 <net_buf_frags_len>
   2135e:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   21362:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   21364:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   21366:	7818      	ldrb	r0, [r3, #0]
   21368:	4285      	cmp	r5, r0
   2136a:	bf94      	ite	ls
   2136c:	2500      	movls	r5, #0
   2136e:	2501      	movhi	r5, #1
   21370:	e7cc      	b.n	2130c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   21372:	2501      	movs	r5, #1
   21374:	e7ca      	b.n	2130c <read_type_cb+0x38>
   21376:	bf00      	nop
   21378:	0002db13 	.word	0x0002db13

0002137c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   2137c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   2137e:	4a07      	ldr	r2, [pc, #28]	; (2139c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   21380:	4604      	mov	r4, r0
   21382:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   21384:	f7ff fef2 	bl	2116c <chan_send>
	if (err) {
   21388:	b130      	cbz	r0, 21398 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   2138a:	4629      	mov	r1, r5
   2138c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   21390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   21394:	f00e bb32 	b.w	2f9fc <net_buf_put>
}
   21398:	bd38      	pop	{r3, r4, r5, pc}
   2139a:	bf00      	nop
   2139c:	0002df99 	.word	0x0002df99

000213a0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   213a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   213a2:	2300      	movs	r3, #0
{
   213a4:	4607      	mov	r7, r0
   213a6:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   213a8:	481e      	ldr	r0, [pc, #120]	; (21424 <bt_att_accept+0x84>)
   213aa:	2200      	movs	r2, #0
   213ac:	4669      	mov	r1, sp
   213ae:	f006 fb6d 	bl	27a8c <k_mem_slab_alloc>
   213b2:	4604      	mov	r4, r0
   213b4:	b120      	cbz	r0, 213c0 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   213b6:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   213ba:	4620      	mov	r0, r4
   213bc:	b003      	add	sp, #12
   213be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   213c0:	4601      	mov	r1, r0
   213c2:	222c      	movs	r2, #44	; 0x2c
   213c4:	9800      	ldr	r0, [sp, #0]
   213c6:	f00b fc83 	bl	2ccd0 <memset>
	att->conn = conn;
   213ca:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   213cc:	4816      	ldr	r0, [pc, #88]	; (21428 <bt_att_accept+0x88>)
	list->tail = NULL;
   213ce:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   213d0:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   213d4:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   213d8:	2200      	movs	r2, #0
   213da:	2300      	movs	r3, #0
   213dc:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   213de:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   213e0:	f006 fb54 	bl	27a8c <k_mem_slab_alloc>
   213e4:	4604      	mov	r4, r0
   213e6:	2800      	cmp	r0, #0
   213e8:	d1e5      	bne.n	213b6 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   213ea:	4601      	mov	r1, r0
   213ec:	f44f 72a4 	mov.w	r2, #328	; 0x148
   213f0:	9801      	ldr	r0, [sp, #4]
   213f2:	f00b fc6d 	bl	2ccd0 <memset>
	chan->chan.chan.ops = &ops;
   213f6:	9801      	ldr	r0, [sp, #4]
   213f8:	4b0c      	ldr	r3, [pc, #48]	; (2142c <bt_att_accept+0x8c>)
   213fa:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   213fc:	30f8      	adds	r0, #248	; 0xf8
   213fe:	f010 f9cb 	bl	31798 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21402:	9b01      	ldr	r3, [sp, #4]
   21404:	f3bf 8f5b 	dmb	ish
   21408:	33f0      	adds	r3, #240	; 0xf0
   2140a:	e853 2f00 	ldrex	r2, [r3]
   2140e:	e843 4100 	strex	r1, r4, [r3]
   21412:	2900      	cmp	r1, #0
   21414:	d1f9      	bne.n	2140a <bt_att_accept+0x6a>
   21416:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   2141a:	9b01      	ldr	r3, [sp, #4]
   2141c:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   21420:	6033      	str	r3, [r6, #0]
	return 0;
   21422:	e7ca      	b.n	213ba <bt_att_accept+0x1a>
   21424:	20000ba0 	.word	0x20000ba0
   21428:	20000bbc 	.word	0x20000bbc
   2142c:	200005e4 	.word	0x200005e4

00021430 <bt_att_connected>:
{
   21430:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   21432:	4606      	mov	r6, r0
{
   21434:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   21436:	2104      	movs	r1, #4
   21438:	f856 0908 	ldr.w	r0, [r6], #-8
   2143c:	f00c fafa 	bl	2da34 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   21440:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   21444:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21446:	b91b      	cbnz	r3, 21450 <bt_att_connected+0x20>
   21448:	f105 000c 	add.w	r0, r5, #12
   2144c:	f010 f9a4 	bl	31798 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   21450:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   21452:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   21456:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   21458:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   2145c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   2145e:	b902      	cbnz	r2, 21462 <bt_att_connected+0x32>
	list->tail = node;
   21460:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21462:	f3bf 8f5b 	dmb	ish
   21466:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   2146a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   2146e:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   21470:	bf58      	it	pl
   21472:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   21474:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   21476:	bf5c      	itt	pl
   21478:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2147c:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   21480:	f00c fd32 	bl	2dee8 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   21484:	f504 7084 	add.w	r0, r4, #264	; 0x108
   21488:	4902      	ldr	r1, [pc, #8]	; (21494 <bt_att_connected+0x64>)
}
   2148a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2148e:	f010 ba7d 	b.w	3198c <k_work_init_delayable>
   21492:	bf00      	nop
   21494:	0002e38f 	.word	0x0002e38f

00021498 <att_write_cmd>:
{
   21498:	b5f0      	push	{r4, r5, r6, r7, lr}
   2149a:	4604      	mov	r4, r0
   2149c:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   2149e:	f101 0008 	add.w	r0, r1, #8
   214a2:	460d      	mov	r5, r1
   214a4:	f00e fb0c 	bl	2fac0 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   214a8:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   214aa:	68af      	ldr	r7, [r5, #8]
   214ac:	89ad      	ldrh	r5, [r5, #12]
   214ae:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   214b0:	2100      	movs	r1, #0
   214b2:	6818      	ldr	r0, [r3, #0]
   214b4:	f00d fb27 	bl	2eb06 <bt_gatt_change_aware>
   214b8:	b320      	cbz	r0, 21504 <att_write_cmd+0x6c>
	if (!handle) {
   214ba:	b32e      	cbz	r6, 21508 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   214bc:	2218      	movs	r2, #24
   214be:	2100      	movs	r1, #0
   214c0:	4668      	mov	r0, sp
   214c2:	f00b fc05 	bl	2ccd0 <memset>
	data.conn = chan->att->conn;
   214c6:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   214c8:	4a10      	ldr	r2, [pc, #64]	; (2150c <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   214ca:	681b      	ldr	r3, [r3, #0]
   214cc:	9300      	str	r3, [sp, #0]
	data.req = req;
   214ce:	2300      	movs	r3, #0
   214d0:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   214d4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   214d8:	2301      	movs	r3, #1
   214da:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   214de:	4631      	mov	r1, r6
   214e0:	466b      	mov	r3, sp
   214e2:	4630      	mov	r0, r6
	data.value = value;
   214e4:	9703      	str	r7, [sp, #12]
	data.len = len;
   214e6:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   214ea:	f00c fb87 	bl	2dbfc <bt_gatt_foreach_attr>
	if (data.err) {
   214ee:	f89d 3014 	ldrb.w	r3, [sp, #20]
   214f2:	b923      	cbnz	r3, 214fe <att_write_cmd+0x66>
	if (data.buf) {
   214f4:	9901      	ldr	r1, [sp, #4]
   214f6:	b111      	cbz	r1, 214fe <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   214f8:	4620      	mov	r0, r4
   214fa:	f7ff ff3f 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
   214fe:	2000      	movs	r0, #0
}
   21500:	b007      	add	sp, #28
   21502:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   21504:	2012      	movs	r0, #18
   21506:	e7fb      	b.n	21500 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   21508:	2001      	movs	r0, #1
   2150a:	e7f9      	b.n	21500 <att_write_cmd+0x68>
   2150c:	0002e09d 	.word	0x0002e09d

00021510 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   21510:	898b      	ldrh	r3, [r1, #12]
{
   21512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21516:	4604      	mov	r4, r0
   21518:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2151a:	2b00      	cmp	r3, #0
   2151c:	d060      	beq.n	215e0 <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
   2151e:	2101      	movs	r1, #1
   21520:	f105 0008 	add.w	r0, r5, #8
   21524:	f00e fac4 	bl	2fab0 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   21528:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2152c:	4607      	mov	r7, r0
   2152e:	2b00      	cmp	r3, #0
   21530:	d056      	beq.n	215e0 <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
   21532:	4a2f      	ldr	r2, [pc, #188]	; (215f0 <bt_att_recv+0xe0>)
   21534:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   21536:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2153a:	2300      	movs	r3, #0
   2153c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   2153e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   21542:	4288      	cmp	r0, r1
   21544:	d11a      	bne.n	2157c <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   21546:	00d9      	lsls	r1, r3, #3
   21548:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2154c:	f893 8002 	ldrb.w	r8, [r3, #2]
   21550:	f1b8 0f01 	cmp.w	r8, #1
   21554:	d022      	beq.n	2159c <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
   21556:	f1b8 0f05 	cmp.w	r8, #5
   2155a:	d12f      	bne.n	215bc <bt_att_recv+0xac>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2155c:	f3bf 8f5b 	dmb	ish
   21560:	34e8      	adds	r4, #232	; 0xe8
   21562:	e854 2f00 	ldrex	r2, [r4]
   21566:	f042 0302 	orr.w	r3, r2, #2
   2156a:	e844 3000 	strex	r0, r3, [r4]
   2156e:	2800      	cmp	r0, #0
   21570:	d1f7      	bne.n	21562 <bt_att_recv+0x52>
   21572:	f3bf 8f5b 	dmb	ish
   21576:	f012 0f02 	tst.w	r2, #2
   2157a:	e01e      	b.n	215ba <bt_att_recv+0xaa>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2157c:	3301      	adds	r3, #1
   2157e:	2b0d      	cmp	r3, #13
   21580:	d1dd      	bne.n	2153e <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   21582:	4608      	mov	r0, r1
   21584:	f00c fad7 	bl	2db36 <att_op_get_type>
   21588:	b350      	cbz	r0, 215e0 <bt_att_recv+0xd0>
   2158a:	2805      	cmp	r0, #5
   2158c:	d028      	beq.n	215e0 <bt_att_recv+0xd0>
	if (!req) {
   2158e:	b339      	cbz	r1, 215e0 <bt_att_recv+0xd0>
   21590:	2306      	movs	r3, #6
   21592:	2200      	movs	r2, #0
   21594:	4630      	mov	r0, r6
   21596:	f00c fe3f 	bl	2e218 <send_err_rsp.part.0>
   2159a:	e021      	b.n	215e0 <bt_att_recv+0xd0>
   2159c:	34e8      	adds	r4, #232	; 0xe8
   2159e:	f3bf 8f5b 	dmb	ish
   215a2:	e854 3f00 	ldrex	r3, [r4]
   215a6:	f043 0201 	orr.w	r2, r3, #1
   215aa:	e844 2000 	strex	r0, r2, [r4]
   215ae:	2800      	cmp	r0, #0
   215b0:	d1f7      	bne.n	215a2 <bt_att_recv+0x92>
   215b2:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   215b6:	f013 0f01 	tst.w	r3, #1
   215ba:	d111      	bne.n	215e0 <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
   215bc:	eb0c 0301 	add.w	r3, ip, r1
   215c0:	89a9      	ldrh	r1, [r5, #12]
   215c2:	785a      	ldrb	r2, [r3, #1]
   215c4:	4291      	cmp	r1, r2
   215c6:	d30e      	bcc.n	215e6 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
   215c8:	685b      	ldr	r3, [r3, #4]
   215ca:	4629      	mov	r1, r5
   215cc:	4630      	mov	r0, r6
   215ce:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   215d0:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   215d4:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   215d6:	d103      	bne.n	215e0 <bt_att_recv+0xd0>
   215d8:	b110      	cbz	r0, 215e0 <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
   215da:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   215dc:	2900      	cmp	r1, #0
   215de:	d1d8      	bne.n	21592 <bt_att_recv+0x82>
}
   215e0:	2000      	movs	r0, #0
   215e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   215e6:	f1b8 0f01 	cmp.w	r8, #1
   215ea:	d1f9      	bne.n	215e0 <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
   215ec:	2304      	movs	r3, #4
   215ee:	e7f4      	b.n	215da <bt_att_recv+0xca>
   215f0:	00032978 	.word	0x00032978

000215f4 <att_write_req>:
{
   215f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   215f8:	4604      	mov	r4, r0
   215fa:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   215fc:	f101 0008 	add.w	r0, r1, #8
   21600:	460d      	mov	r5, r1
   21602:	f00e fa5d 	bl	2fac0 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   21606:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   21608:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2160c:	89ad      	ldrh	r5, [r5, #12]
   2160e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   21610:	2101      	movs	r1, #1
   21612:	6818      	ldr	r0, [r3, #0]
   21614:	f00d fa77 	bl	2eb06 <bt_gatt_change_aware>
   21618:	2800      	cmp	r0, #0
   2161a:	d03f      	beq.n	2169c <att_write_req+0xa8>
	if (!handle) {
   2161c:	2e00      	cmp	r6, #0
   2161e:	d03f      	beq.n	216a0 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   21620:	2218      	movs	r2, #24
   21622:	2100      	movs	r1, #0
   21624:	4668      	mov	r0, sp
   21626:	f00b fb53 	bl	2ccd0 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   2162a:	2200      	movs	r2, #0
   2162c:	2113      	movs	r1, #19
   2162e:	4620      	mov	r0, r4
   21630:	f00c fdcd 	bl	2e1ce <bt_att_chan_create_pdu>
   21634:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   21636:	b378      	cbz	r0, 21698 <att_write_req+0xa4>
	data.conn = chan->att->conn;
   21638:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2163a:	4a1a      	ldr	r2, [pc, #104]	; (216a4 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   2163c:	681b      	ldr	r3, [r3, #0]
   2163e:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   21640:	2301      	movs	r3, #1
   21642:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   21646:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   2164a:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2164c:	466b      	mov	r3, sp
   2164e:	4631      	mov	r1, r6
   21650:	4630      	mov	r0, r6
	data.len = len;
   21652:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   21656:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   2165a:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   2165e:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   21662:	f00c facb 	bl	2dbfc <bt_gatt_foreach_attr>
	if (data.err) {
   21666:	f89d 5014 	ldrb.w	r5, [sp, #20]
   2166a:	b175      	cbz	r5, 2168a <att_write_req+0x96>
			net_buf_unref(data.buf);
   2166c:	9801      	ldr	r0, [sp, #4]
   2166e:	f001 ff59 	bl	23524 <net_buf_unref>
	if (!req) {
   21672:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21676:	4632      	mov	r2, r6
   21678:	4641      	mov	r1, r8
   2167a:	4620      	mov	r0, r4
   2167c:	f00c fdcc 	bl	2e218 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   21680:	463d      	mov	r5, r7
}
   21682:	4628      	mov	r0, r5
   21684:	b007      	add	sp, #28
   21686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   2168a:	9901      	ldr	r1, [sp, #4]
   2168c:	2900      	cmp	r1, #0
   2168e:	d0f8      	beq.n	21682 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   21690:	4620      	mov	r0, r4
   21692:	f7ff fe73 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
   21696:	e7f4      	b.n	21682 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   21698:	250e      	movs	r5, #14
   2169a:	e7f2      	b.n	21682 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2169c:	2512      	movs	r5, #18
   2169e:	e7f0      	b.n	21682 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   216a0:	2501      	movs	r5, #1
   216a2:	e7ee      	b.n	21682 <att_write_req+0x8e>
   216a4:	0002e09d 	.word	0x0002e09d

000216a8 <att_read_group_req>:
{
   216a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   216ac:	7b0c      	ldrb	r4, [r1, #12]
   216ae:	3c04      	subs	r4, #4
   216b0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   216b2:	2c02      	cmp	r4, #2
{
   216b4:	4605      	mov	r5, r0
   216b6:	b08c      	sub	sp, #48	; 0x30
   216b8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   216ba:	d001      	beq.n	216c0 <att_read_group_req+0x18>
   216bc:	2c10      	cmp	r4, #16
   216be:	d16e      	bne.n	2179e <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   216c0:	2104      	movs	r1, #4
   216c2:	3008      	adds	r0, #8
   216c4:	f00e f9f4 	bl	2fab0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   216c8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   216cc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   216ce:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   216d0:	1d01      	adds	r1, r0, #4
   216d2:	4622      	mov	r2, r4
   216d4:	4640      	mov	r0, r8
   216d6:	f00b fb86 	bl	2cde6 <bt_uuid_create>
   216da:	2800      	cmp	r0, #0
   216dc:	d061      	beq.n	217a2 <att_read_group_req+0xfa>
	if (!start || !end) {
   216de:	2e00      	cmp	r6, #0
   216e0:	d03a      	beq.n	21758 <att_read_group_req+0xb0>
   216e2:	2400      	movs	r4, #0
   216e4:	2f00      	cmp	r7, #0
   216e6:	d036      	beq.n	21756 <att_read_group_req+0xae>
	if (start > end) {
   216e8:	42be      	cmp	r6, r7
   216ea:	d835      	bhi.n	21758 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   216ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   216f0:	a901      	add	r1, sp, #4
   216f2:	4640      	mov	r0, r8
   216f4:	f88d 4004 	strb.w	r4, [sp, #4]
   216f8:	f8ad 3006 	strh.w	r3, [sp, #6]
   216fc:	f00b fb49 	bl	2cd92 <bt_uuid_cmp>
   21700:	2800      	cmp	r0, #0
   21702:	d134      	bne.n	2176e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   21704:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   21706:	2214      	movs	r2, #20
   21708:	2100      	movs	r1, #0
   2170a:	a807      	add	r0, sp, #28
   2170c:	f00b fae0 	bl	2ccd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   21710:	2201      	movs	r2, #1
   21712:	2111      	movs	r1, #17
   21714:	4620      	mov	r0, r4
   21716:	f00c fd9c 	bl	2e252 <bt_att_create_pdu>
   2171a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   2171c:	2800      	cmp	r0, #0
   2171e:	d040      	beq.n	217a2 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   21720:	2101      	movs	r1, #1
   21722:	3008      	adds	r0, #8
	data.uuid = uuid;
   21724:	e9cd 5807 	strd	r5, r8, [sp, #28]
   21728:	f00e f99b 	bl	2fa62 <net_buf_simple_add>
	data.rsp->len = 0U;
   2172c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   21730:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   21732:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   21734:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   21738:	4a1b      	ldr	r2, [pc, #108]	; (217a8 <att_read_group_req+0x100>)
	data.group = NULL;
   2173a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2173e:	4639      	mov	r1, r7
   21740:	4630      	mov	r0, r6
   21742:	f00c fa5b 	bl	2dbfc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   21746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21748:	781c      	ldrb	r4, [r3, #0]
   2174a:	bb1c      	cbnz	r4, 21794 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   2174c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2174e:	f001 fee9 	bl	23524 <net_buf_unref>
	if (!req) {
   21752:	230a      	movs	r3, #10
   21754:	e018      	b.n	21788 <att_read_group_req+0xe0>
			*err = 0U;
   21756:	463e      	mov	r6, r7
	if (!req) {
   21758:	2301      	movs	r3, #1
   2175a:	4632      	mov	r2, r6
   2175c:	2110      	movs	r1, #16
   2175e:	4628      	mov	r0, r5
   21760:	f00c fd5a 	bl	2e218 <send_err_rsp.part.0>
		return 0;
   21764:	2400      	movs	r4, #0
}
   21766:	4620      	mov	r0, r4
   21768:	b00c      	add	sp, #48	; 0x30
   2176a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2176e:	f642 0301 	movw	r3, #10241	; 0x2801
   21772:	a907      	add	r1, sp, #28
   21774:	4640      	mov	r0, r8
   21776:	f88d 401c 	strb.w	r4, [sp, #28]
   2177a:	f8ad 301e 	strh.w	r3, [sp, #30]
   2177e:	f00b fb08 	bl	2cd92 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   21782:	2800      	cmp	r0, #0
   21784:	d0be      	beq.n	21704 <att_read_group_req+0x5c>
	if (!req) {
   21786:	2310      	movs	r3, #16
   21788:	4632      	mov	r2, r6
   2178a:	2110      	movs	r1, #16
   2178c:	4628      	mov	r0, r5
   2178e:	f00c fd43 	bl	2e218 <send_err_rsp.part.0>
		return 0;
   21792:	e7e8      	b.n	21766 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   21794:	9909      	ldr	r1, [sp, #36]	; 0x24
   21796:	4628      	mov	r0, r5
   21798:	f7ff fdf0 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2179c:	e7e2      	b.n	21764 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   2179e:	2404      	movs	r4, #4
   217a0:	e7e1      	b.n	21766 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   217a2:	240e      	movs	r4, #14
   217a4:	e7df      	b.n	21766 <att_read_group_req+0xbe>
   217a6:	bf00      	nop
   217a8:	00021229 	.word	0x00021229

000217ac <att_read_mult_req>:
{
   217ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   217b0:	6886      	ldr	r6, [r0, #8]
{
   217b2:	b085      	sub	sp, #20
   217b4:	4604      	mov	r4, r0
   217b6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   217b8:	4630      	mov	r0, r6
   217ba:	2101      	movs	r1, #1
   217bc:	f00d f9a3 	bl	2eb06 <bt_gatt_change_aware>
   217c0:	b3b8      	cbz	r0, 21832 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   217c2:	2210      	movs	r2, #16
   217c4:	2100      	movs	r1, #0
   217c6:	4668      	mov	r0, sp
   217c8:	f00b fa82 	bl	2ccd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   217cc:	2200      	movs	r2, #0
   217ce:	210f      	movs	r1, #15
   217d0:	4630      	mov	r0, r6
   217d2:	f00c fd3e 	bl	2e252 <bt_att_create_pdu>
   217d6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   217d8:	b368      	cbz	r0, 21836 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   217da:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2183c <att_read_mult_req+0x90>
	data.chan = chan;
   217de:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   217e0:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   217e4:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   217e8:	89ab      	ldrh	r3, [r5, #12]
   217ea:	2b01      	cmp	r3, #1
   217ec:	d804      	bhi.n	217f8 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   217ee:	9902      	ldr	r1, [sp, #8]
   217f0:	4620      	mov	r0, r4
   217f2:	f7ff fdc3 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
   217f6:	e018      	b.n	2182a <att_read_mult_req+0x7e>
   217f8:	4638      	mov	r0, r7
   217fa:	f00e f961 	bl	2fac0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   217fe:	466b      	mov	r3, sp
   21800:	464a      	mov	r2, r9
   21802:	4601      	mov	r1, r0
   21804:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   21806:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2180a:	f00c f9f7 	bl	2dbfc <bt_gatt_foreach_attr>
		if (data.err) {
   2180e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   21812:	2b00      	cmp	r3, #0
   21814:	d0e8      	beq.n	217e8 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   21816:	9802      	ldr	r0, [sp, #8]
   21818:	f001 fe84 	bl	23524 <net_buf_unref>
	if (!req) {
   2181c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   21820:	4632      	mov	r2, r6
   21822:	210e      	movs	r1, #14
   21824:	4620      	mov	r0, r4
   21826:	f00c fcf7 	bl	2e218 <send_err_rsp.part.0>
	return 0;
   2182a:	2000      	movs	r0, #0
}
   2182c:	b005      	add	sp, #20
   2182e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   21832:	2012      	movs	r0, #18
   21834:	e7fa      	b.n	2182c <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   21836:	200e      	movs	r0, #14
   21838:	e7f8      	b.n	2182c <att_read_mult_req+0x80>
   2183a:	bf00      	nop
   2183c:	0002e17b 	.word	0x0002e17b

00021840 <att_read_rsp>:
{
   21840:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   21844:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   21848:	4605      	mov	r5, r0
   2184a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2184c:	4640      	mov	r0, r8
   2184e:	2101      	movs	r1, #1
{
   21850:	4614      	mov	r4, r2
   21852:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   21854:	f00d f957 	bl	2eb06 <bt_gatt_change_aware>
   21858:	b388      	cbz	r0, 218be <att_read_rsp+0x7e>
	if (!handle) {
   2185a:	b396      	cbz	r6, 218c2 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   2185c:	2210      	movs	r2, #16
   2185e:	2100      	movs	r1, #0
   21860:	4668      	mov	r0, sp
   21862:	f00b fa35 	bl	2ccd0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   21866:	2200      	movs	r2, #0
   21868:	4621      	mov	r1, r4
   2186a:	4640      	mov	r0, r8
   2186c:	f00c fcf1 	bl	2e252 <bt_att_create_pdu>
   21870:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   21872:	b340      	cbz	r0, 218c6 <att_read_rsp+0x86>
	data.offset = offset;
   21874:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   21878:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2187c:	2301      	movs	r3, #1
   2187e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   21882:	4a12      	ldr	r2, [pc, #72]	; (218cc <att_read_rsp+0x8c>)
	data.chan = chan;
   21884:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   21886:	466b      	mov	r3, sp
   21888:	4631      	mov	r1, r6
   2188a:	4630      	mov	r0, r6
   2188c:	f00c f9b6 	bl	2dbfc <bt_gatt_foreach_attr>
	if (data.err) {
   21890:	f89d 400c 	ldrb.w	r4, [sp, #12]
   21894:	b174      	cbz	r4, 218b4 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   21896:	9802      	ldr	r0, [sp, #8]
   21898:	f001 fe44 	bl	23524 <net_buf_unref>
	if (!req) {
   2189c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   218a0:	4632      	mov	r2, r6
   218a2:	4639      	mov	r1, r7
   218a4:	4628      	mov	r0, r5
   218a6:	f00c fcb7 	bl	2e218 <send_err_rsp.part.0>
		return 0;
   218aa:	2400      	movs	r4, #0
}
   218ac:	4620      	mov	r0, r4
   218ae:	b004      	add	sp, #16
   218b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   218b4:	9902      	ldr	r1, [sp, #8]
   218b6:	4628      	mov	r0, r5
   218b8:	f7ff fd60 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   218bc:	e7f6      	b.n	218ac <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   218be:	2412      	movs	r4, #18
   218c0:	e7f4      	b.n	218ac <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   218c2:	2401      	movs	r4, #1
   218c4:	e7f2      	b.n	218ac <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   218c6:	240e      	movs	r4, #14
   218c8:	e7f0      	b.n	218ac <att_read_rsp+0x6c>
   218ca:	bf00      	nop
   218cc:	0002e17b 	.word	0x0002e17b

000218d0 <att_read_type_req>:
{
   218d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   218d4:	7b0c      	ldrb	r4, [r1, #12]
   218d6:	3c04      	subs	r4, #4
   218d8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   218da:	2c02      	cmp	r4, #2
{
   218dc:	4605      	mov	r5, r0
   218de:	b08c      	sub	sp, #48	; 0x30
   218e0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   218e2:	d001      	beq.n	218e8 <att_read_type_req+0x18>
   218e4:	2c10      	cmp	r4, #16
   218e6:	d14f      	bne.n	21988 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   218e8:	2104      	movs	r1, #4
   218ea:	3008      	adds	r0, #8
   218ec:	f00e f8e0 	bl	2fab0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   218f0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   218f4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   218f6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   218f8:	1d01      	adds	r1, r0, #4
   218fa:	4622      	mov	r2, r4
   218fc:	4640      	mov	r0, r8
   218fe:	f00b fa72 	bl	2cde6 <bt_uuid_create>
   21902:	b188      	cbz	r0, 21928 <att_read_type_req+0x58>
	if (!start || !end) {
   21904:	b19e      	cbz	r6, 2192e <att_read_type_req+0x5e>
   21906:	b18f      	cbz	r7, 2192c <att_read_type_req+0x5c>
	if (start > end) {
   21908:	42b7      	cmp	r7, r6
   2190a:	d310      	bcc.n	2192e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   2190c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   2190e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   21910:	2100      	movs	r1, #0
   21912:	eb0d 0002 	add.w	r0, sp, r2
   21916:	f00b f9db 	bl	2ccd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   2191a:	2201      	movs	r2, #1
   2191c:	2109      	movs	r1, #9
   2191e:	4620      	mov	r0, r4
   21920:	f00c fc97 	bl	2e252 <bt_att_create_pdu>
   21924:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   21926:	b968      	cbnz	r0, 21944 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   21928:	240e      	movs	r4, #14
   2192a:	e007      	b.n	2193c <att_read_type_req+0x6c>
			*err = 0U;
   2192c:	463e      	mov	r6, r7
	if (!req) {
   2192e:	2301      	movs	r3, #1
   21930:	4632      	mov	r2, r6
   21932:	2108      	movs	r1, #8
   21934:	4628      	mov	r0, r5
   21936:	f00c fc6f 	bl	2e218 <send_err_rsp.part.0>
		return 0;
   2193a:	2400      	movs	r4, #0
}
   2193c:	4620      	mov	r0, r4
   2193e:	b00c      	add	sp, #48	; 0x30
   21940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   21944:	2101      	movs	r1, #1
   21946:	3008      	adds	r0, #8
	data.uuid = uuid;
   21948:	e9cd 5806 	strd	r5, r8, [sp, #24]
   2194c:	f00e f889 	bl	2fa62 <net_buf_simple_add>
	data.rsp->len = 0U;
   21950:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   21954:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   21956:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   21958:	4a0c      	ldr	r2, [pc, #48]	; (2198c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   2195a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2195e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   21960:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   21964:	4630      	mov	r0, r6
   21966:	ab06      	add	r3, sp, #24
   21968:	f00c f948 	bl	2dbfc <bt_gatt_foreach_attr>
	if (data.err) {
   2196c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   21970:	b12c      	cbz	r4, 2197e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   21972:	9808      	ldr	r0, [sp, #32]
   21974:	f001 fdd6 	bl	23524 <net_buf_unref>
	if (!req) {
   21978:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2197c:	e7d8      	b.n	21930 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2197e:	9908      	ldr	r1, [sp, #32]
   21980:	4628      	mov	r0, r5
   21982:	f7ff fcfb 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   21986:	e7d9      	b.n	2193c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   21988:	2404      	movs	r4, #4
   2198a:	e7d7      	b.n	2193c <att_read_type_req+0x6c>
   2198c:	000212d5 	.word	0x000212d5

00021990 <att_find_type_req>:
{
   21990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21994:	4688      	mov	r8, r1
   21996:	b086      	sub	sp, #24
   21998:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   2199a:	2106      	movs	r1, #6
   2199c:	f108 0008 	add.w	r0, r8, #8
   219a0:	f00e f886 	bl	2fab0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   219a4:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   219a6:	b317      	cbz	r7, 219ee <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   219a8:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   219ac:	f1b9 0f00 	cmp.w	r9, #0
   219b0:	d01c      	beq.n	219ec <att_find_type_req+0x5c>
	if (start > end) {
   219b2:	454f      	cmp	r7, r9
   219b4:	d81b      	bhi.n	219ee <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   219b6:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   219b8:	f8ad 3002 	strh.w	r3, [sp, #2]
   219bc:	2400      	movs	r4, #0
   219be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   219c2:	a901      	add	r1, sp, #4
   219c4:	4668      	mov	r0, sp
	value = buf->data;
   219c6:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   219ca:	f88d 4000 	strb.w	r4, [sp]
   219ce:	f88d 4004 	strb.w	r4, [sp, #4]
   219d2:	f8ad 3006 	strh.w	r3, [sp, #6]
   219d6:	f00b f9dc 	bl	2cd92 <bt_uuid_cmp>
   219da:	4606      	mov	r6, r0
   219dc:	b190      	cbz	r0, 21a04 <att_find_type_req+0x74>
	if (!req) {
   219de:	230a      	movs	r3, #10
   219e0:	463a      	mov	r2, r7
   219e2:	2106      	movs	r1, #6
   219e4:	4628      	mov	r0, r5
   219e6:	f00c fc17 	bl	2e218 <send_err_rsp.part.0>
		return 0;
   219ea:	e007      	b.n	219fc <att_find_type_req+0x6c>
			*err = 0U;
   219ec:	464f      	mov	r7, r9
	if (!req) {
   219ee:	2301      	movs	r3, #1
   219f0:	463a      	mov	r2, r7
   219f2:	2106      	movs	r1, #6
   219f4:	4628      	mov	r0, r5
   219f6:	f00c fc0f 	bl	2e218 <send_err_rsp.part.0>
		return 0;
   219fa:	2400      	movs	r4, #0
}
   219fc:	4620      	mov	r0, r4
   219fe:	b006      	add	sp, #24
   21a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   21a04:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   21a08:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   21a0c:	4601      	mov	r1, r0
   21a0e:	2214      	movs	r2, #20
   21a10:	a801      	add	r0, sp, #4
   21a12:	f00b f95d 	bl	2ccd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   21a16:	4632      	mov	r2, r6
   21a18:	2107      	movs	r1, #7
   21a1a:	4640      	mov	r0, r8
   21a1c:	f00c fc19 	bl	2e252 <bt_att_create_pdu>
   21a20:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   21a22:	b1d8      	cbz	r0, 21a5c <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   21a24:	230a      	movs	r3, #10
   21a26:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   21a2a:	4a0d      	ldr	r2, [pc, #52]	; (21a60 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   21a2c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   21a30:	ab01      	add	r3, sp, #4
   21a32:	4649      	mov	r1, r9
   21a34:	4638      	mov	r0, r7
	data.value = value;
   21a36:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   21a3a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   21a3c:	f00c f8de 	bl	2dbfc <bt_gatt_foreach_attr>
	if (data.err) {
   21a40:	f89d 4015 	ldrb.w	r4, [sp, #21]
   21a44:	b12c      	cbz	r4, 21a52 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   21a46:	9802      	ldr	r0, [sp, #8]
   21a48:	f001 fd6c 	bl	23524 <net_buf_unref>
	if (!req) {
   21a4c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   21a50:	e7ce      	b.n	219f0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   21a52:	9902      	ldr	r1, [sp, #8]
   21a54:	4628      	mov	r0, r5
   21a56:	f7ff fc91 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   21a5a:	e7cf      	b.n	219fc <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   21a5c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   21a5e:	e7cd      	b.n	219fc <att_find_type_req+0x6c>
   21a60:	0002dd29 	.word	0x0002dd29

00021a64 <att_find_info_req>:
{
   21a64:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   21a66:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   21a68:	881e      	ldrh	r6, [r3, #0]
{
   21a6a:	b085      	sub	sp, #20
   21a6c:	4605      	mov	r5, r0
	if (!start || !end) {
   21a6e:	b19e      	cbz	r6, 21a98 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   21a70:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   21a72:	b184      	cbz	r4, 21a96 <att_find_info_req+0x32>
	if (start > end) {
   21a74:	42b4      	cmp	r4, r6
   21a76:	d30f      	bcc.n	21a98 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   21a78:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   21a7a:	2210      	movs	r2, #16
   21a7c:	2100      	movs	r1, #0
   21a7e:	4668      	mov	r0, sp
   21a80:	f00b f926 	bl	2ccd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   21a84:	2200      	movs	r2, #0
   21a86:	2105      	movs	r1, #5
   21a88:	4638      	mov	r0, r7
   21a8a:	f00c fbe2 	bl	2e252 <bt_att_create_pdu>
   21a8e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   21a90:	b958      	cbnz	r0, 21aaa <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   21a92:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   21a94:	e007      	b.n	21aa6 <att_find_info_req+0x42>
			*err = 0U;
   21a96:	4626      	mov	r6, r4
	if (!req) {
   21a98:	2301      	movs	r3, #1
   21a9a:	4632      	mov	r2, r6
   21a9c:	2104      	movs	r1, #4
   21a9e:	4628      	mov	r0, r5
   21aa0:	f00c fbba 	bl	2e218 <send_err_rsp.part.0>
	return 0;
   21aa4:	2000      	movs	r0, #0
}
   21aa6:	b005      	add	sp, #20
   21aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   21aaa:	4621      	mov	r1, r4
   21aac:	4a08      	ldr	r2, [pc, #32]	; (21ad0 <att_find_info_req+0x6c>)
	data.chan = chan;
   21aae:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   21ab0:	466b      	mov	r3, sp
   21ab2:	4630      	mov	r0, r6
   21ab4:	f00c f8a2 	bl	2dbfc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   21ab8:	9c02      	ldr	r4, [sp, #8]
   21aba:	b924      	cbnz	r4, 21ac6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   21abc:	9801      	ldr	r0, [sp, #4]
   21abe:	f001 fd31 	bl	23524 <net_buf_unref>
	if (!req) {
   21ac2:	230a      	movs	r3, #10
   21ac4:	e7e9      	b.n	21a9a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   21ac6:	9901      	ldr	r1, [sp, #4]
   21ac8:	4628      	mov	r0, r5
   21aca:	f7ff fc57 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
   21ace:	e7e9      	b.n	21aa4 <att_find_info_req+0x40>
   21ad0:	0002de51 	.word	0x0002de51

00021ad4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   21ad4:	b513      	push	{r0, r1, r4, lr}
   21ad6:	4602      	mov	r2, r0
   21ad8:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   21ada:	4808      	ldr	r0, [pc, #32]	; (21afc <bt_att_req_alloc+0x28>)
   21adc:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   21ade:	2400      	movs	r4, #0
   21ae0:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   21ae2:	f005 ffd3 	bl	27a8c <k_mem_slab_alloc>
   21ae6:	4601      	mov	r1, r0
   21ae8:	b930      	cbnz	r0, 21af8 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   21aea:	9801      	ldr	r0, [sp, #4]
   21aec:	2210      	movs	r2, #16
   21aee:	f00b f8ef 	bl	2ccd0 <memset>

	return req;
   21af2:	9801      	ldr	r0, [sp, #4]
}
   21af4:	b002      	add	sp, #8
   21af6:	bd10      	pop	{r4, pc}
		return NULL;
   21af8:	4620      	mov	r0, r4
   21afa:	e7fb      	b.n	21af4 <bt_att_req_alloc+0x20>
   21afc:	20000bd8 	.word	0x20000bd8

00021b00 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   21b00:	b507      	push	{r0, r1, r2, lr}
   21b02:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   21b04:	6880      	ldr	r0, [r0, #8]
   21b06:	b120      	cbz	r0, 21b12 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   21b08:	f001 fd0c 	bl	23524 <net_buf_unref>
		req->buf = NULL;
   21b0c:	9b01      	ldr	r3, [sp, #4]
   21b0e:	2200      	movs	r2, #0
   21b10:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   21b12:	4803      	ldr	r0, [pc, #12]	; (21b20 <bt_att_req_free+0x20>)
   21b14:	a901      	add	r1, sp, #4
   21b16:	f00f fd8d 	bl	31634 <k_mem_slab_free>
}
   21b1a:	b003      	add	sp, #12
   21b1c:	f85d fb04 	ldr.w	pc, [sp], #4
   21b20:	20000bd8 	.word	0x20000bd8

00021b24 <att_handle_rsp>:
{
   21b24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21b28:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   21b2a:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   21b2e:	4688      	mov	r8, r1
   21b30:	4691      	mov	r9, r2
   21b32:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   21b34:	f00f ff36 	bl	319a4 <k_work_cancel_delayable>
	if (!chan->req) {
   21b38:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   21b3c:	2600      	movs	r6, #0
   21b3e:	b1f0      	cbz	r0, 21b7e <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   21b40:	4b10      	ldr	r3, [pc, #64]	; (21b84 <att_handle_rsp+0x60>)
   21b42:	4298      	cmp	r0, r3
   21b44:	d112      	bne.n	21b6c <att_handle_rsp+0x48>
		chan->req = NULL;
   21b46:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   21b4a:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   21b4c:	6820      	ldr	r0, [r4, #0]
   21b4e:	f00c fa79 	bl	2e044 <att_req_send_process>
	if (func) {
   21b52:	b13d      	cbz	r5, 21b64 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   21b54:	6820      	ldr	r0, [r4, #0]
   21b56:	f8cd a000 	str.w	sl, [sp]
   21b5a:	6800      	ldr	r0, [r0, #0]
   21b5c:	464b      	mov	r3, r9
   21b5e:	4642      	mov	r2, r8
   21b60:	4639      	mov	r1, r7
   21b62:	47a8      	blx	r5
}
   21b64:	2000      	movs	r0, #0
   21b66:	b002      	add	sp, #8
   21b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   21b6c:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   21b6e:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   21b70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   21b74:	f7ff ffc4 	bl	21b00 <bt_att_req_free>
	chan->req = NULL;
   21b78:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   21b7c:	e7e6      	b.n	21b4c <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   21b7e:	4605      	mov	r5, r0
   21b80:	e7e4      	b.n	21b4c <att_handle_rsp+0x28>
   21b82:	bf00      	nop
   21b84:	200028ec 	.word	0x200028ec

00021b88 <bt_att_disconnected>:
{
   21b88:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   21b8a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   21b8e:	b085      	sub	sp, #20
   21b90:	4604      	mov	r4, r0
	if (!att_chan->att) {
   21b92:	b38d      	cbz	r5, 21bf8 <bt_att_disconnected+0x70>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   21b94:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   21b98:	f105 0024 	add.w	r0, r5, #36	; 0x24
   21b9c:	f00b ff90 	bl	2dac0 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   21ba0:	f1a4 0608 	sub.w	r6, r4, #8
   21ba4:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   21ba8:	2200      	movs	r2, #0
   21baa:	2300      	movs	r3, #0
   21bac:	4638      	mov	r0, r7
   21bae:	f00d ff07 	bl	2f9c0 <net_buf_get>
   21bb2:	4602      	mov	r2, r0
   21bb4:	bb10      	cbnz	r0, 21bfc <bt_att_disconnected+0x74>
	if (chan->req) {
   21bb6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   21bba:	b123      	cbz	r3, 21bc6 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   21bbc:	4601      	mov	r1, r0
   21bbe:	230e      	movs	r3, #14
   21bc0:	4630      	mov	r0, r6
   21bc2:	f7ff ffaf 	bl	21b24 <att_handle_rsp>
	chan->att = NULL;
   21bc6:	2300      	movs	r3, #0
   21bc8:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   21bcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21bce:	b99b      	cbnz	r3, 21bf8 <bt_att_disconnected+0x70>
	att_reset(att);
   21bd0:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   21bd2:	9803      	ldr	r0, [sp, #12]
   21bd4:	2200      	movs	r2, #0
   21bd6:	2300      	movs	r3, #0
   21bd8:	300c      	adds	r0, #12
   21bda:	f00d fef1 	bl	2f9c0 <net_buf_get>
   21bde:	b980      	cbnz	r0, 21c02 <bt_att_disconnected+0x7a>
	att->conn = NULL;
   21be0:	9a03      	ldr	r2, [sp, #12]
   21be2:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   21be4:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   21be6:	685d      	ldr	r5, [r3, #4]
   21be8:	b975      	cbnz	r5, 21c08 <bt_att_disconnected+0x80>
	k_mem_slab_free(&att_slab, (void **)&att);
   21bea:	4811      	ldr	r0, [pc, #68]	; (21c30 <bt_att_disconnected+0xa8>)
   21bec:	a903      	add	r1, sp, #12
   21bee:	f00f fd21 	bl	31634 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   21bf2:	6820      	ldr	r0, [r4, #0]
   21bf4:	f000 fddc 	bl	227b0 <bt_gatt_disconnected>
}
   21bf8:	b005      	add	sp, #20
   21bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   21bfc:	f001 fc92 	bl	23524 <net_buf_unref>
   21c00:	e7d2      	b.n	21ba8 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   21c02:	f001 fc8f 	bl	23524 <net_buf_unref>
   21c06:	e7e4      	b.n	21bd2 <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21c08:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   21c0a:	686e      	ldr	r6, [r5, #4]
   21c0c:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   21c0e:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21c10:	428d      	cmp	r5, r1
	list->tail = node;
   21c12:	bf08      	it	eq
   21c14:	609a      	streq	r2, [r3, #8]
   21c16:	b136      	cbz	r6, 21c26 <bt_att_disconnected+0x9e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   21c18:	68eb      	ldr	r3, [r5, #12]
   21c1a:	9300      	str	r3, [sp, #0]
   21c1c:	2300      	movs	r3, #0
   21c1e:	461a      	mov	r2, r3
   21c20:	210e      	movs	r1, #14
   21c22:	4618      	mov	r0, r3
   21c24:	47b0      	blx	r6
		bt_att_req_free(req);
   21c26:	4628      	mov	r0, r5
   21c28:	f7ff ff6a 	bl	21b00 <bt_att_req_free>
   21c2c:	e7da      	b.n	21be4 <bt_att_disconnected+0x5c>
   21c2e:	bf00      	nop
   21c30:	20000ba0 	.word	0x20000ba0

00021c34 <bt_gatt_service_init.part.0>:
		}
	}
}
#endif

static void bt_gatt_service_init(void)
   21c34:	4a08      	ldr	r2, [pc, #32]	; (21c58 <bt_gatt_service_init.part.0+0x24>)
{
	if (!atomic_cas(&service_init, 0, 1)) {
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   21c36:	4909      	ldr	r1, [pc, #36]	; (21c5c <bt_gatt_service_init.part.0+0x28>)
   21c38:	8813      	ldrh	r3, [r2, #0]
static void bt_gatt_service_init(void)
   21c3a:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   21c3c:	4c08      	ldr	r4, [pc, #32]	; (21c60 <bt_gatt_service_init.part.0+0x2c>)
   21c3e:	2000      	movs	r0, #0
   21c40:	42a1      	cmp	r1, r4
   21c42:	d302      	bcc.n	21c4a <bt_gatt_service_init.part.0+0x16>
   21c44:	b100      	cbz	r0, 21c48 <bt_gatt_service_init.part.0+0x14>
   21c46:	8013      	strh	r3, [r2, #0]
		last_static_handle += svc->attr_count;
	}
}
   21c48:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
   21c4a:	6848      	ldr	r0, [r1, #4]
   21c4c:	4403      	add	r3, r0
   21c4e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   21c50:	3108      	adds	r1, #8
   21c52:	2001      	movs	r0, #1
   21c54:	e7f4      	b.n	21c40 <bt_gatt_service_init.part.0+0xc>
   21c56:	bf00      	nop
   21c58:	200036ea 	.word	0x200036ea
   21c5c:	00032454 	.word	0x00032454
   21c60:	00032474 	.word	0x00032474

00021c64 <find_sc_cfg>:
{
   21c64:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   21c66:	4c06      	ldr	r4, [pc, #24]	; (21c80 <find_sc_cfg+0x1c>)
   21c68:	7823      	ldrb	r3, [r4, #0]
   21c6a:	4283      	cmp	r3, r0
   21c6c:	d104      	bne.n	21c78 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
   21c6e:	2207      	movs	r2, #7
   21c70:	1c60      	adds	r0, r4, #1
   21c72:	f00a fffb 	bl	2cc6c <memcmp>
   21c76:	b108      	cbz	r0, 21c7c <find_sc_cfg+0x18>
	return NULL;
   21c78:	2000      	movs	r0, #0
}
   21c7a:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   21c7c:	4620      	mov	r0, r4
   21c7e:	e7fc      	b.n	21c7a <find_sc_cfg+0x16>
   21c80:	200036ec 	.word	0x200036ec

00021c84 <find_cf_cfg>:
{
   21c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21c86:	4d0d      	ldr	r5, [pc, #52]	; (21cbc <find_cf_cfg+0x38>)
		if (!conn) {
   21c88:	4604      	mov	r4, r0
   21c8a:	b968      	cbnz	r0, 21ca8 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21c8c:	9000      	str	r0, [sp, #0]
   21c8e:	2207      	movs	r2, #7
   21c90:	f8cd 0003 	str.w	r0, [sp, #3]
   21c94:	4669      	mov	r1, sp
   21c96:	1c68      	adds	r0, r5, #1
   21c98:	f00a ffe8 	bl	2cc6c <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   21c9c:	2800      	cmp	r0, #0
   21c9e:	bf08      	it	eq
   21ca0:	462c      	moveq	r4, r5
}
   21ca2:	4620      	mov	r0, r4
   21ca4:	b003      	add	sp, #12
   21ca6:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   21ca8:	462a      	mov	r2, r5
   21caa:	f812 1b01 	ldrb.w	r1, [r2], #1
   21cae:	f00b fdb1 	bl	2d814 <bt_conn_is_peer_addr_le>
   21cb2:	2800      	cmp	r0, #0
	return NULL;
   21cb4:	bf14      	ite	ne
   21cb6:	462c      	movne	r4, r5
   21cb8:	2400      	moveq	r4, #0
   21cba:	e7f2      	b.n	21ca2 <find_cf_cfg+0x1e>
   21cbc:	20002904 	.word	0x20002904

00021cc0 <sc_indicate_rsp>:
{
   21cc0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21cc2:	f06f 0102 	mvn.w	r1, #2
   21cc6:	4604      	mov	r4, r0
   21cc8:	480d      	ldr	r0, [pc, #52]	; (21d00 <sc_indicate_rsp+0x40>)
   21cca:	f00c fc54 	bl	2e576 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   21cce:	480c      	ldr	r0, [pc, #48]	; (21d00 <sc_indicate_rsp+0x40>)
   21cd0:	f00c fbe7 	bl	2e4a2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   21cd4:	07c2      	lsls	r2, r0, #31
   21cd6:	d504      	bpl.n	21ce2 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   21cd8:	480a      	ldr	r0, [pc, #40]	; (21d04 <sc_indicate_rsp+0x44>)
   21cda:	2200      	movs	r2, #0
   21cdc:	2300      	movs	r3, #0
   21cde:	f006 fb05 	bl	282ec <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   21ce2:	4620      	mov	r0, r4
   21ce4:	f7ff ffce 	bl	21c84 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   21ce8:	b140      	cbz	r0, 21cfc <sc_indicate_rsp+0x3c>
   21cea:	7a03      	ldrb	r3, [r0, #8]
   21cec:	07db      	lsls	r3, r3, #31
   21cee:	d505      	bpl.n	21cfc <sc_indicate_rsp+0x3c>
}
   21cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21cf4:	2100      	movs	r1, #0
   21cf6:	300c      	adds	r0, #12
   21cf8:	f00c bc2f 	b.w	2e55a <atomic_set_bit>
}
   21cfc:	bd10      	pop	{r4, pc}
   21cfe:	bf00      	nop
   21d00:	20001ea8 	.word	0x20001ea8
   21d04:	20001e78 	.word	0x20001e78

00021d08 <db_changed>:
	sys_slist_append(&callback_list, &cb->node);
}

#if defined(CONFIG_BT_GATT_DYNAMIC_DB)
static void db_changed(void)
{
   21d08:	b513      	push	{r0, r1, r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21d0a:	f06f 0104 	mvn.w	r1, #4
   21d0e:	4812      	ldr	r0, [pc, #72]	; (21d58 <db_changed+0x50>)
   21d10:	4c12      	ldr	r4, [pc, #72]	; (21d5c <db_changed+0x54>)
   21d12:	f00c fc30 	bl	2e576 <atomic_and>
#if defined(CONFIG_BT_GATT_CACHING)
	int i;

	atomic_clear_bit(gatt_sc.flags, DB_HASH_VALID);
	k_work_reschedule(&db_hash.work, DB_HASH_TIMEOUT);
   21d16:	f44f 72a4 	mov.w	r2, #328	; 0x148
   21d1a:	2300      	movs	r3, #0
   21d1c:	4810      	ldr	r0, [pc, #64]	; (21d60 <db_changed+0x58>)
   21d1e:	f006 fae5 	bl	282ec <k_work_reschedule>

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21d22:	2300      	movs	r3, #0
   21d24:	2207      	movs	r2, #7
   21d26:	4669      	mov	r1, sp
   21d28:	1c60      	adds	r0, r4, #1
   21d2a:	9300      	str	r3, [sp, #0]
   21d2c:	f8cd 3003 	str.w	r3, [sp, #3]
   21d30:	f00a ff9c 	bl	2cc6c <memcmp>
   21d34:	b170      	cbz	r0, 21d54 <db_changed+0x4c>
			continue;
		}

		if (CF_ROBUST_CACHING(cfg)) {
   21d36:	7a23      	ldrb	r3, [r4, #8]
   21d38:	07db      	lsls	r3, r3, #31
   21d3a:	d50b      	bpl.n	21d54 <db_changed+0x4c>
   21d3c:	f06f 0102 	mvn.w	r1, #2
   21d40:	f104 000c 	add.w	r0, r4, #12
   21d44:	f00c fc17 	bl	2e576 <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21d48:	f06f 0101 	mvn.w	r1, #1
   21d4c:	f104 000c 	add.w	r0, r4, #12
   21d50:	f00c fc11 	bl	2e576 <atomic_and>
				       bt_addr_le_str(&cfg->peer));
			}
		}
	}
#endif
}
   21d54:	b002      	add	sp, #8
   21d56:	bd10      	pop	{r4, pc}
   21d58:	20001ea8 	.word	0x20001ea8
   21d5c:	20002904 	.word	0x20002904
   21d60:	20001e00 	.word	0x20001e00

00021d64 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   21d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   21d68:	4b1f      	ldr	r3, [pc, #124]	; (21de8 <disconnected_cb+0x84>)
{
   21d6a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   21d6c:	6882      	ldr	r2, [r0, #8]
   21d6e:	429a      	cmp	r2, r3
{
   21d70:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   21d72:	d102      	bne.n	21d7a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   21d74:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   21d76:	8963      	ldrh	r3, [r4, #10]
   21d78:	b9cb      	cbnz	r3, 21dae <disconnected_cb+0x4a>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   21d7a:	2001      	movs	r0, #1
   21d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21d80:	f105 0888 	add.w	r8, r5, #136	; 0x88
   21d84:	7a28      	ldrb	r0, [r5, #8]
   21d86:	4641      	mov	r1, r8
   21d88:	f00b fae0 	bl	2d34c <bt_addr_le_is_bonded>
   21d8c:	b948      	cbnz	r0, 21da2 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   21d8e:	4b17      	ldr	r3, [pc, #92]	; (21dec <disconnected_cb+0x88>)
   21d90:	429c      	cmp	r4, r3
   21d92:	d102      	bne.n	21d9a <disconnected_cb+0x36>
					sc_clear(conn);
   21d94:	4628      	mov	r0, r5
   21d96:	f00c fdc9 	bl	2e92c <sc_clear>
				clear_ccc_cfg(cfg);
   21d9a:	4620      	mov	r0, r4
   21d9c:	f00c fc30 	bl	2e600 <clear_ccc_cfg>
	if (!value_used) {
   21da0:	e01a      	b.n	21dd8 <disconnected_cb+0x74>
	memcpy(dst, src, sizeof(*dst));
   21da2:	2207      	movs	r2, #7
   21da4:	4641      	mov	r1, r8
   21da6:	4638      	mov	r0, r7
   21da8:	f00a ff87 	bl	2ccba <memcpy>
   21dac:	e014      	b.n	21dd8 <disconnected_cb+0x74>
		if (!cfg->value) {
   21dae:	8923      	ldrh	r3, [r4, #8]
   21db0:	b193      	cbz	r3, 21dd8 <disconnected_cb+0x74>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   21db2:	4627      	mov	r7, r4
   21db4:	4628      	mov	r0, r5
   21db6:	f817 1b01 	ldrb.w	r1, [r7], #1
   21dba:	463a      	mov	r2, r7
   21dbc:	f00b fd2a 	bl	2d814 <bt_conn_is_peer_addr_le>
   21dc0:	2800      	cmp	r0, #0
   21dc2:	d1dd      	bne.n	21d80 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   21dc4:	7820      	ldrb	r0, [r4, #0]
   21dc6:	4639      	mov	r1, r7
   21dc8:	f7fe ff48 	bl	20c5c <bt_conn_lookup_addr_le>
			if (tmp) {
   21dcc:	b120      	cbz	r0, 21dd8 <disconnected_cb+0x74>
				if (tmp->state == BT_CONN_CONNECTED) {
   21dce:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   21dd0:	f00b fcd9 	bl	2d786 <bt_conn_unref>
	if (!value_used) {
   21dd4:	2d07      	cmp	r5, #7
   21dd6:	d0d0      	beq.n	21d7a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   21dd8:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   21dda:	2100      	movs	r1, #0
   21ddc:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   21dde:	2b00      	cmp	r3, #0
   21de0:	d0cb      	beq.n	21d7a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   21de2:	4630      	mov	r0, r6
   21de4:	4798      	blx	r3
   21de6:	e7c8      	b.n	21d7a <disconnected_cb+0x16>
   21de8:	0002e61f 	.word	0x0002e61f
   21dec:	20000630 	.word	0x20000630

00021df0 <sc_indicate>:
{
   21df0:	b510      	push	{r4, lr}
   21df2:	4a18      	ldr	r2, [pc, #96]	; (21e54 <sc_indicate+0x64>)
   21df4:	f3bf 8f5b 	dmb	ish
   21df8:	f102 0350 	add.w	r3, r2, #80	; 0x50
   21dfc:	e853 4f00 	ldrex	r4, [r3]
   21e00:	f044 0c01 	orr.w	ip, r4, #1
   21e04:	e843 ce00 	strex	lr, ip, [r3]
   21e08:	f1be 0f00 	cmp.w	lr, #0
   21e0c:	d1f6      	bne.n	21dfc <sc_indicate+0xc>
   21e0e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   21e12:	f014 0f01 	tst.w	r4, #1
   21e16:	4613      	mov	r3, r2
   21e18:	d10e      	bne.n	21e38 <sc_indicate+0x48>
		gatt_sc.start = start;
   21e1a:	8310      	strh	r0, [r2, #24]
		gatt_sc.end = end;
   21e1c:	8351      	strh	r1, [r2, #26]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   21e1e:	480e      	ldr	r0, [pc, #56]	; (21e58 <sc_indicate+0x68>)
   21e20:	f00c fb3f 	bl	2e4a2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   21e24:	0783      	lsls	r3, r0, #30
   21e26:	d413      	bmi.n	21e50 <sc_indicate+0x60>
}
   21e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&gatt_sc.work, timeout);
   21e2c:	480b      	ldr	r0, [pc, #44]	; (21e5c <sc_indicate+0x6c>)
   21e2e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   21e32:	2300      	movs	r3, #0
   21e34:	f006 ba5a 	b.w	282ec <k_work_reschedule>
	if (new_start >= *start && new_end <= *end) {
   21e38:	8b1c      	ldrh	r4, [r3, #24]
   21e3a:	8b52      	ldrh	r2, [r2, #26]
   21e3c:	4284      	cmp	r4, r0
   21e3e:	d803      	bhi.n	21e48 <sc_indicate+0x58>
   21e40:	4291      	cmp	r1, r2
   21e42:	d905      	bls.n	21e50 <sc_indicate+0x60>
		*end = new_end;
   21e44:	8359      	strh	r1, [r3, #26]
   21e46:	e7ea      	b.n	21e1e <sc_indicate+0x2e>
	if (*end < new_end) {
   21e48:	4291      	cmp	r1, r2
		*start = new_start;
   21e4a:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
   21e4c:	d9e7      	bls.n	21e1e <sc_indicate+0x2e>
   21e4e:	e7f9      	b.n	21e44 <sc_indicate+0x54>
}
   21e50:	bd10      	pop	{r4, pc}
   21e52:	bf00      	nop
   21e54:	20001e58 	.word	0x20001e58
   21e58:	20001ea8 	.word	0x20001ea8
   21e5c:	20001e78 	.word	0x20001e78

00021e60 <bt_gatt_init>:
{
   21e60:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21e62:	4b1a      	ldr	r3, [pc, #104]	; (21ecc <bt_gatt_init+0x6c>)
   21e64:	f3bf 8f5b 	dmb	ish
   21e68:	2201      	movs	r2, #1
   21e6a:	e853 1f00 	ldrex	r1, [r3]
   21e6e:	2900      	cmp	r1, #0
   21e70:	d103      	bne.n	21e7a <bt_gatt_init+0x1a>
   21e72:	e843 2000 	strex	r0, r2, [r3]
   21e76:	2800      	cmp	r0, #0
   21e78:	d1f7      	bne.n	21e6a <bt_gatt_init+0xa>
   21e7a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   21e7e:	d123      	bne.n	21ec8 <bt_gatt_init+0x68>
   21e80:	f3bf 8f5b 	dmb	ish
   21e84:	4b12      	ldr	r3, [pc, #72]	; (21ed0 <bt_gatt_init+0x70>)
   21e86:	e853 1f00 	ldrex	r1, [r3]
   21e8a:	2900      	cmp	r1, #0
   21e8c:	d103      	bne.n	21e96 <bt_gatt_init+0x36>
   21e8e:	e843 2000 	strex	r0, r2, [r3]
   21e92:	2800      	cmp	r0, #0
   21e94:	d1f7      	bne.n	21e86 <bt_gatt_init+0x26>
   21e96:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   21e9a:	d101      	bne.n	21ea0 <bt_gatt_init+0x40>
   21e9c:	f7ff feca 	bl	21c34 <bt_gatt_service_init.part.0>
	list->head = NULL;
   21ea0:	4b0c      	ldr	r3, [pc, #48]	; (21ed4 <bt_gatt_init+0x74>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   21ea2:	490d      	ldr	r1, [pc, #52]	; (21ed8 <bt_gatt_init+0x78>)
   21ea4:	480d      	ldr	r0, [pc, #52]	; (21edc <bt_gatt_init+0x7c>)
   21ea6:	2200      	movs	r2, #0
	list->tail = NULL;
   21ea8:	e9c3 2200 	strd	r2, r2, [r3]
   21eac:	f00f fd6e 	bl	3198c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   21eb0:	2300      	movs	r3, #0
   21eb2:	480a      	ldr	r0, [pc, #40]	; (21edc <bt_gatt_init+0x7c>)
   21eb4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   21eb8:	f006 f9e4 	bl	28284 <k_work_schedule>
}
   21ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   21ec0:	4907      	ldr	r1, [pc, #28]	; (21ee0 <bt_gatt_init+0x80>)
   21ec2:	4808      	ldr	r0, [pc, #32]	; (21ee4 <bt_gatt_init+0x84>)
   21ec4:	f00f bd62 	b.w	3198c <k_work_init_delayable>
}
   21ec8:	bd08      	pop	{r3, pc}
   21eca:	bf00      	nop
   21ecc:	2000291c 	.word	0x2000291c
   21ed0:	20002938 	.word	0x20002938
   21ed4:	200028fc 	.word	0x200028fc
   21ed8:	0002ea53 	.word	0x0002ea53
   21edc:	20001e00 	.word	0x20001e00
   21ee0:	00022445 	.word	0x00022445
   21ee4:	20001e78 	.word	0x20001e78

00021ee8 <bt_gatt_attr_get_handle>:
{
   21ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   21eec:	4603      	mov	r3, r0
   21eee:	b148      	cbz	r0, 21f04 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   21ef0:	8a00      	ldrh	r0, [r0, #16]
   21ef2:	b938      	cbnz	r0, 21f04 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   21ef4:	4912      	ldr	r1, [pc, #72]	; (21f40 <bt_gatt_attr_get_handle+0x58>)
   21ef6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 21f44 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   21efa:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   21efc:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   21f00:	4571      	cmp	r1, lr
   21f02:	d301      	bcc.n	21f08 <bt_gatt_attr_get_handle+0x20>
}
   21f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   21f08:	e9d1 7600 	ldrd	r7, r6, [r1]
   21f0c:	42bb      	cmp	r3, r7
   21f0e:	d304      	bcc.n	21f1a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   21f10:	fb0c 7206 	mla	r2, ip, r6, r7
   21f14:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   21f16:	4293      	cmp	r3, r2
   21f18:	d90e      	bls.n	21f38 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   21f1a:	19a2      	adds	r2, r4, r6
   21f1c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   21f1e:	3108      	adds	r1, #8
   21f20:	4614      	mov	r4, r2
   21f22:	e7ed      	b.n	21f00 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   21f24:	fb0c 7805 	mla	r8, ip, r5, r7
   21f28:	4543      	cmp	r3, r8
   21f2a:	d007      	beq.n	21f3c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   21f2c:	3501      	adds	r5, #1
   21f2e:	1962      	adds	r2, r4, r5
   21f30:	42b5      	cmp	r5, r6
   21f32:	b292      	uxth	r2, r2
   21f34:	d1f6      	bne.n	21f24 <bt_gatt_attr_get_handle+0x3c>
   21f36:	e7f2      	b.n	21f1e <bt_gatt_attr_get_handle+0x36>
   21f38:	2500      	movs	r5, #0
   21f3a:	e7f8      	b.n	21f2e <bt_gatt_attr_get_handle+0x46>
   21f3c:	4610      	mov	r0, r2
   21f3e:	e7e1      	b.n	21f04 <bt_gatt_attr_get_handle+0x1c>
   21f40:	00032454 	.word	0x00032454
   21f44:	00032474 	.word	0x00032474

00021f48 <bt_gatt_foreach_attr_type>:
{
   21f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f4c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
   21f50:	9100      	str	r1, [sp, #0]
   21f52:	4698      	mov	r8, r3
		num_matches = UINT16_MAX;
   21f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21f58:	2c00      	cmp	r4, #0
   21f5a:	bf08      	it	eq
   21f5c:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
   21f5e:	4b4c      	ldr	r3, [pc, #304]	; (22090 <bt_gatt_foreach_attr_type+0x148>)
   21f60:	881b      	ldrh	r3, [r3, #0]
   21f62:	4283      	cmp	r3, r0
{
   21f64:	4606      	mov	r6, r0
   21f66:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
   21f68:	d25d      	bcs.n	22026 <bt_gatt_foreach_attr_type+0xde>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   21f6a:	4b4a      	ldr	r3, [pc, #296]	; (22094 <bt_gatt_foreach_attr_type+0x14c>)
   21f6c:	681d      	ldr	r5, [r3, #0]
   21f6e:	2d00      	cmp	r5, #0
   21f70:	d04f      	beq.n	22012 <bt_gatt_foreach_attr_type+0xca>
   21f72:	3d08      	subs	r5, #8
   21f74:	2d00      	cmp	r5, #0
   21f76:	d04c      	beq.n	22012 <bt_gatt_foreach_attr_type+0xca>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21f78:	f115 0b08 	adds.w	fp, r5, #8
   21f7c:	d00b      	beq.n	21f96 <bt_gatt_foreach_attr_type+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21f7e:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
   21f80:	2b00      	cmp	r3, #0
   21f82:	f000 8082 	beq.w	2208a <bt_gatt_foreach_attr_type+0x142>
		if (next) {
   21f86:	f1b3 0908 	subs.w	r9, r3, #8
   21f8a:	d006      	beq.n	21f9a <bt_gatt_foreach_attr_type+0x52>
			if (next->attrs[0].handle <= start_handle) {
   21f8c:	f853 3c08 	ldr.w	r3, [r3, #-8]
   21f90:	8a1b      	ldrh	r3, [r3, #16]
   21f92:	42b3      	cmp	r3, r6
   21f94:	d907      	bls.n	21fa6 <bt_gatt_foreach_attr_type+0x5e>
   21f96:	f04f 0900 	mov.w	r9, #0
		for (i = 0; i < svc->attr_count; i++) {
   21f9a:	686b      	ldr	r3, [r5, #4]
   21f9c:	4599      	cmp	r9, r3
   21f9e:	d348      	bcc.n	22032 <bt_gatt_foreach_attr_type+0xea>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21fa0:	f1bb 0f00 	cmp.w	fp, #0
   21fa4:	d035      	beq.n	22012 <bt_gatt_foreach_attr_type+0xca>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21fa6:	68ad      	ldr	r5, [r5, #8]
   21fa8:	e7e1      	b.n	21f6e <bt_gatt_foreach_attr_type+0x26>
			if (handle + static_svc->attr_count < start_handle) {
   21faa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   21fae:	442b      	add	r3, r5
   21fb0:	42b3      	cmp	r3, r6
   21fb2:	d235      	bcs.n	22020 <bt_gatt_foreach_attr_type+0xd8>
				handle += static_svc->attr_count;
   21fb4:	b29d      	uxth	r5, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   21fb6:	f109 0908 	add.w	r9, r9, #8
   21fba:	4b37      	ldr	r3, [pc, #220]	; (22098 <bt_gatt_foreach_attr_type+0x150>)
   21fbc:	4599      	cmp	r9, r3
   21fbe:	d3f4      	bcc.n	21faa <bt_gatt_foreach_attr_type+0x62>
   21fc0:	e7d3      	b.n	21f6a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   21fc2:	5889      	ldr	r1, [r1, r2]
   21fc4:	9301      	str	r3, [sp, #4]
   21fc6:	4638      	mov	r0, r7
   21fc8:	f00a fee3 	bl	2cd92 <bt_uuid_cmp>
   21fcc:	9b01      	ldr	r3, [sp, #4]
   21fce:	b198      	cbz	r0, 21ff8 <bt_gatt_foreach_attr_type+0xb0>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   21fd0:	3501      	adds	r5, #1
   21fd2:	f10a 0a01 	add.w	sl, sl, #1
   21fd6:	b2ad      	uxth	r5, r5
   21fd8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   21fdc:	4553      	cmp	r3, sl
   21fde:	d9ea      	bls.n	21fb6 <bt_gatt_foreach_attr_type+0x6e>
	if (handle > end_handle) {
   21fe0:	9b00      	ldr	r3, [sp, #0]
   21fe2:	429d      	cmp	r5, r3
   21fe4:	d815      	bhi.n	22012 <bt_gatt_foreach_attr_type+0xca>
	if (handle < start_handle) {
   21fe6:	42b5      	cmp	r5, r6
   21fe8:	d3f2      	bcc.n	21fd0 <bt_gatt_foreach_attr_type+0x88>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   21fea:	f8d9 1000 	ldr.w	r1, [r9]
   21fee:	fb0b f20a 	mul.w	r2, fp, sl
   21ff2:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   21ff4:	2f00      	cmp	r7, #0
   21ff6:	d1e4      	bne.n	21fc2 <bt_gatt_foreach_attr_type+0x7a>
	if (attr_data && attr_data != attr->user_data) {
   21ff8:	f1b8 0f00 	cmp.w	r8, #0
   21ffc:	d10c      	bne.n	22018 <bt_gatt_foreach_attr_type+0xd0>
	*num_matches -= 1;
   21ffe:	3c01      	subs	r4, #1
   22000:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
   22002:	4618      	mov	r0, r3
   22004:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22008:	4629      	mov	r1, r5
   2200a:	4798      	blx	r3
	if (!*num_matches) {
   2200c:	b10c      	cbz	r4, 22012 <bt_gatt_foreach_attr_type+0xca>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2200e:	2800      	cmp	r0, #0
   22010:	d1de      	bne.n	21fd0 <bt_gatt_foreach_attr_type+0x88>
}
   22012:	b003      	add	sp, #12
   22014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
   22018:	68da      	ldr	r2, [r3, #12]
   2201a:	4590      	cmp	r8, r2
   2201c:	d1d8      	bne.n	21fd0 <bt_gatt_foreach_attr_type+0x88>
   2201e:	e7ee      	b.n	21ffe <bt_gatt_foreach_attr_type+0xb6>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   22020:	f04f 0a00 	mov.w	sl, #0
   22024:	e7d8      	b.n	21fd8 <bt_gatt_foreach_attr_type+0x90>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   22026:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2209c <bt_gatt_foreach_attr_type+0x154>
		uint16_t handle = 1;
   2202a:	2501      	movs	r5, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2202c:	f04f 0b14 	mov.w	fp, #20
   22030:	e7c3      	b.n	21fba <bt_gatt_foreach_attr_type+0x72>
			struct bt_gatt_attr *attr = &svc->attrs[i];
   22032:	2314      	movs	r3, #20
   22034:	6829      	ldr	r1, [r5, #0]
	if (handle > end_handle) {
   22036:	9800      	ldr	r0, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
   22038:	fb03 f209 	mul.w	r2, r3, r9
   2203c:	eb01 0a02 	add.w	sl, r1, r2
			if (gatt_foreach_iter(attr, attr->handle,
   22040:	f8ba 3010 	ldrh.w	r3, [sl, #16]
	if (handle > end_handle) {
   22044:	4298      	cmp	r0, r3
   22046:	d3e4      	bcc.n	22012 <bt_gatt_foreach_attr_type+0xca>
	if (handle < start_handle) {
   22048:	429e      	cmp	r6, r3
   2204a:	d816      	bhi.n	2207a <bt_gatt_foreach_attr_type+0x132>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2204c:	b96f      	cbnz	r7, 2206a <bt_gatt_foreach_attr_type+0x122>
	if (attr_data && attr_data != attr->user_data) {
   2204e:	f1b8 0f00 	cmp.w	r8, #0
   22052:	d115      	bne.n	22080 <bt_gatt_foreach_attr_type+0x138>
	*num_matches -= 1;
   22054:	3c01      	subs	r4, #1
   22056:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
   22058:	4619      	mov	r1, r3
   2205a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2205c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2205e:	4650      	mov	r0, sl
   22060:	4798      	blx	r3
	if (!*num_matches) {
   22062:	2c00      	cmp	r4, #0
   22064:	d0d5      	beq.n	22012 <bt_gatt_foreach_attr_type+0xca>
			if (gatt_foreach_iter(attr, attr->handle,
   22066:	b940      	cbnz	r0, 2207a <bt_gatt_foreach_attr_type+0x132>
   22068:	e7d3      	b.n	22012 <bt_gatt_foreach_attr_type+0xca>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2206a:	5889      	ldr	r1, [r1, r2]
   2206c:	9301      	str	r3, [sp, #4]
   2206e:	4638      	mov	r0, r7
   22070:	f00a fe8f 	bl	2cd92 <bt_uuid_cmp>
   22074:	9b01      	ldr	r3, [sp, #4]
   22076:	2800      	cmp	r0, #0
   22078:	d0e9      	beq.n	2204e <bt_gatt_foreach_attr_type+0x106>
		for (i = 0; i < svc->attr_count; i++) {
   2207a:	f109 0901 	add.w	r9, r9, #1
   2207e:	e78c      	b.n	21f9a <bt_gatt_foreach_attr_type+0x52>
	if (attr_data && attr_data != attr->user_data) {
   22080:	f8da 200c 	ldr.w	r2, [sl, #12]
   22084:	4590      	cmp	r8, r2
   22086:	d1f8      	bne.n	2207a <bt_gatt_foreach_attr_type+0x132>
   22088:	e7e4      	b.n	22054 <bt_gatt_foreach_attr_type+0x10c>
   2208a:	4699      	mov	r9, r3
   2208c:	e785      	b.n	21f9a <bt_gatt_foreach_attr_type+0x52>
   2208e:	bf00      	nop
   22090:	200036ea 	.word	0x200036ea
   22094:	20002914 	.word	0x20002914
   22098:	00032474 	.word	0x00032474
   2209c:	00032454 	.word	0x00032454

000220a0 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   220a0:	b510      	push	{r4, lr}
   220a2:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   220a4:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   220a6:	aa1c      	add	r2, sp, #112	; 0x70
   220a8:	4669      	mov	r1, sp
   220aa:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   220ac:	e9cd 3300 	strd	r3, r3, [sp]
   220b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   220b4:	f00a fcd3 	bl	2ca5e <tc_cmac_setup>
   220b8:	b320      	cbz	r0, 22104 <db_hash_gen.isra.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   220ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   220be:	2001      	movs	r0, #1
   220c0:	4a11      	ldr	r2, [pc, #68]	; (22108 <db_hash_gen.isra.0+0x68>)
   220c2:	ab04      	add	r3, sp, #16
   220c4:	f00c fcba 	bl	2ea3c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   220c8:	4810      	ldr	r0, [pc, #64]	; (2210c <db_hash_gen.isra.0+0x6c>)
   220ca:	a904      	add	r1, sp, #16
   220cc:	f00a fd5e 	bl	2cb8c <tc_cmac_final>
   220d0:	b1c0      	cbz	r0, 22104 <db_hash_gen.isra.0+0x64>
   220d2:	4b0e      	ldr	r3, [pc, #56]	; (2210c <db_hash_gen.isra.0+0x6c>)
   220d4:	2208      	movs	r2, #8
   220d6:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   220da:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   220dc:	780c      	ldrb	r4, [r1, #0]
   220de:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   220e2:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   220e4:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   220e8:	d1f7      	bne.n	220da <db_hash_gen.isra.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   220ea:	f3bf 8f5b 	dmb	ish
   220ee:	4b08      	ldr	r3, [pc, #32]	; (22110 <db_hash_gen.isra.0+0x70>)
   220f0:	e853 2f00 	ldrex	r2, [r3]
   220f4:	f042 0204 	orr.w	r2, r2, #4
   220f8:	e843 2100 	strex	r1, r2, [r3]
   220fc:	2900      	cmp	r1, #0
   220fe:	d1f7      	bne.n	220f0 <db_hash_gen.isra.0+0x50>
   22100:	f3bf 8f5b 	dmb	ish
}
   22104:	b048      	add	sp, #288	; 0x120
   22106:	bd10      	pop	{r4, pc}
   22108:	0002e4af 	.word	0x0002e4af
   2210c:	20001df0 	.word	0x20001df0
   22110:	20001ea8 	.word	0x20001ea8

00022114 <bt_gatt_service_register>:
{
   22114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22118:	4b64      	ldr	r3, [pc, #400]	; (222ac <bt_gatt_service_register+0x198>)
   2211a:	f3bf 8f5b 	dmb	ish
   2211e:	4605      	mov	r5, r0
   22120:	2201      	movs	r2, #1
   22122:	e853 1f00 	ldrex	r1, [r3]
   22126:	2900      	cmp	r1, #0
   22128:	d103      	bne.n	22132 <bt_gatt_service_register+0x1e>
   2212a:	e843 2000 	strex	r0, r2, [r3]
   2212e:	2800      	cmp	r0, #0
   22130:	d1f7      	bne.n	22122 <bt_gatt_service_register+0xe>
   22132:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   22136:	d101      	bne.n	2213c <bt_gatt_service_register+0x28>
   22138:	f7ff fd7c 	bl	21c34 <bt_gatt_service_init.part.0>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   2213c:	682b      	ldr	r3, [r5, #0]
   2213e:	2400      	movs	r4, #0
   22140:	6818      	ldr	r0, [r3, #0]
   22142:	f88d 4000 	strb.w	r4, [sp]
   22146:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   2214a:	4669      	mov	r1, sp
   2214c:	f8ad 3002 	strh.w	r3, [sp, #2]
   22150:	f00a fe1f 	bl	2cd92 <bt_uuid_cmp>
   22154:	b928      	cbnz	r0, 22162 <bt_gatt_service_register+0x4e>
		return -EALREADY;
   22156:	f06f 0477 	mvn.w	r4, #119	; 0x77
}
   2215a:	4620      	mov	r0, r4
   2215c:	b003      	add	sp, #12
   2215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
   22162:	682b      	ldr	r3, [r5, #0]
   22164:	a901      	add	r1, sp, #4
   22166:	6818      	ldr	r0, [r3, #0]
   22168:	f88d 4004 	strb.w	r4, [sp, #4]
   2216c:	f641 0301 	movw	r3, #6145	; 0x1801
   22170:	f8ad 3006 	strh.w	r3, [sp, #6]
   22174:	f00a fe0d 	bl	2cd92 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   22178:	2800      	cmp	r0, #0
   2217a:	d0ec      	beq.n	22156 <bt_gatt_service_register+0x42>
Z_GENLIST_IS_EMPTY(slist)
   2217c:	4c4c      	ldr	r4, [pc, #304]	; (222b0 <bt_gatt_service_register+0x19c>)
	k_sched_lock();
   2217e:	f006 f915 	bl	283ac <k_sched_lock>
	if (sys_slist_is_empty(&db)) {
   22182:	6826      	ldr	r6, [r4, #0]
	struct bt_gatt_attr *attrs = svc->attrs;
   22184:	f8d5 9000 	ldr.w	r9, [r5]
	uint16_t count = svc->attr_count;
   22188:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	if (sys_slist_is_empty(&db)) {
   2218c:	b936      	cbnz	r6, 2219c <bt_gatt_service_register+0x88>
		handle = last_static_handle;
   2218e:	4b49      	ldr	r3, [pc, #292]	; (222b4 <bt_gatt_service_register+0x1a0>)
   22190:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   22192:	f8df b128 	ldr.w	fp, [pc, #296]	; 222bc <bt_gatt_service_register+0x1a8>
	const struct bt_gatt_attr *attr = NULL;
   22196:	f04f 0a00 	mov.w	sl, #0
   2219a:	e01a      	b.n	221d2 <bt_gatt_service_register+0xbe>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
   2219c:	6863      	ldr	r3, [r4, #4]
   2219e:	2b00      	cmp	r3, #0
   221a0:	f000 8082 	beq.w	222a8 <bt_gatt_service_register+0x194>
	handle = last->attrs[last->attr_count - 1].handle;
   221a4:	e953 3202 	ldrd	r3, r2, [r3, #-8]
   221a8:	2114      	movs	r1, #20
   221aa:	fb01 3302 	mla	r3, r1, r2, r3
   221ae:	f833 7c04 	ldrh.w	r7, [r3, #-4]
   221b2:	463e      	mov	r6, r7
   221b4:	e7ed      	b.n	22192 <bt_gatt_service_register+0x7e>
		if (!attrs->handle) {
   221b6:	f8b9 1010 	ldrh.w	r1, [r9, #16]
   221ba:	bb39      	cbnz	r1, 2220c <bt_gatt_service_register+0xf8>
			attrs->handle = ++handle;
   221bc:	1c79      	adds	r1, r7, #1
   221be:	b289      	uxth	r1, r1
   221c0:	f8a9 1010 	strh.w	r1, [r9, #16]
	for (; attrs && count; attrs++, count--) {
   221c4:	f108 38ff 	add.w	r8, r8, #4294967295
   221c8:	f109 0914 	add.w	r9, r9, #20
   221cc:	fa1f f888 	uxth.w	r8, r8
   221d0:	460f      	mov	r7, r1
   221d2:	f1b9 0f00 	cmp.w	r9, #0
   221d6:	d002      	beq.n	221de <bt_gatt_service_register+0xca>
   221d8:	f1b8 0f00 	cmp.w	r8, #0
   221dc:	d1eb      	bne.n	221b6 <bt_gatt_service_register+0xa2>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
   221de:	b11e      	cbz	r6, 221e8 <bt_gatt_service_register+0xd4>
   221e0:	682b      	ldr	r3, [r5, #0]
   221e2:	8a18      	ldrh	r0, [r3, #16]
   221e4:	4286      	cmp	r6, r0
   221e6:	d21f      	bcs.n	22228 <bt_gatt_service_register+0x114>
	parent->next = child;
   221e8:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
   221ea:	f105 0308 	add.w	r3, r5, #8
   221ee:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   221f0:	6862      	ldr	r2, [r4, #4]
   221f2:	2a00      	cmp	r2, #0
   221f4:	d136      	bne.n	22264 <bt_gatt_service_register+0x150>
	list->head = node;
   221f6:	e9c4 3300 	strd	r3, r3, [r4]
	if (!atomic_get(&init)) {
   221fa:	482f      	ldr	r0, [pc, #188]	; (222b8 <bt_gatt_service_register+0x1a4>)
   221fc:	f00c f951 	bl	2e4a2 <atomic_get>
   22200:	4604      	mov	r4, r0
   22202:	2800      	cmp	r0, #0
   22204:	d13b      	bne.n	2227e <bt_gatt_service_register+0x16a>
		k_sched_unlock();
   22206:	f006 faab 	bl	28760 <k_sched_unlock>
		return 0;
   2220a:	e7a6      	b.n	2215a <bt_gatt_service_register+0x46>
		} else if (attrs->handle > handle) {
   2220c:	42b9      	cmp	r1, r7
   2220e:	d8d9      	bhi.n	221c4 <bt_gatt_service_register+0xb0>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   22210:	ab01      	add	r3, sp, #4
   22212:	465a      	mov	r2, fp
   22214:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
   22216:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   2221a:	f00c fc0f 	bl	2ea3c <bt_gatt_foreach_attr>
	return attr;
   2221e:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
   22220:	2b00      	cmp	r3, #0
   22222:	d13c      	bne.n	2229e <bt_gatt_service_register+0x18a>
   22224:	4639      	mov	r1, r7
   22226:	e7cd      	b.n	221c4 <bt_gatt_service_register+0xb0>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
   22228:	6821      	ldr	r1, [r4, #0]
   2222a:	2900      	cmp	r1, #0
   2222c:	d0e5      	beq.n	221fa <bt_gatt_service_register+0xe6>
   2222e:	f1a1 0308 	sub.w	r3, r1, #8
   22232:	2200      	movs	r2, #0
   22234:	2b00      	cmp	r3, #0
   22236:	d0e0      	beq.n	221fa <bt_gatt_service_register+0xe6>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
   22238:	681e      	ldr	r6, [r3, #0]
   2223a:	8a36      	ldrh	r6, [r6, #16]
   2223c:	4286      	cmp	r6, r0
   2223e:	d914      	bls.n	2226a <bt_gatt_service_register+0x156>
			if (prev) {
   22240:	f105 0308 	add.w	r3, r5, #8
   22244:	b112      	cbz	r2, 2224c <bt_gatt_service_register+0x138>
Z_GENLIST_INSERT(slist, snode)
   22246:	f112 0f08 	cmn.w	r2, #8
   2224a:	d105      	bne.n	22258 <bt_gatt_service_register+0x144>
Z_GENLIST_PREPEND(slist, snode)
   2224c:	6862      	ldr	r2, [r4, #4]
	parent->next = child;
   2224e:	60a9      	str	r1, [r5, #8]
	list->head = node;
   22250:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   22252:	2a00      	cmp	r2, #0
   22254:	d1d1      	bne.n	221fa <bt_gatt_service_register+0xe6>
   22256:	e006      	b.n	22266 <bt_gatt_service_register+0x152>
Z_GENLIST_INSERT(slist, snode)
   22258:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
   2225a:	60a9      	str	r1, [r5, #8]
Z_GENLIST_INSERT(slist, snode)
   2225c:	2900      	cmp	r1, #0
   2225e:	d0c7      	beq.n	221f0 <bt_gatt_service_register+0xdc>
	parent->next = child;
   22260:	6093      	str	r3, [r2, #8]
	if (err < 0) {
   22262:	e7ca      	b.n	221fa <bt_gatt_service_register+0xe6>
   22264:	6013      	str	r3, [r2, #0]
	list->tail = node;
   22266:	6063      	str	r3, [r4, #4]
   22268:	e7c7      	b.n	221fa <bt_gatt_service_register+0xe6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2226a:	f113 0f08 	cmn.w	r3, #8
   2226e:	d0c4      	beq.n	221fa <bt_gatt_service_register+0xe6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22270:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
   22272:	2e00      	cmp	r6, #0
   22274:	d0c1      	beq.n	221fa <bt_gatt_service_register+0xe6>
   22276:	461a      	mov	r2, r3
   22278:	f1a6 0308 	sub.w	r3, r6, #8
   2227c:	e7da      	b.n	22234 <bt_gatt_service_register+0x120>
		    svc->attrs[svc->attr_count - 1].handle);
   2227e:	e9d5 2300 	ldrd	r2, r3, [r5]
	sc_indicate(svc->attrs[0].handle,
   22282:	2114      	movs	r1, #20
   22284:	fb01 2303 	mla	r3, r1, r3, r2
   22288:	8a10      	ldrh	r0, [r2, #16]
   2228a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
   2228e:	f7ff fdaf 	bl	21df0 <sc_indicate>
	return 0;
   22292:	2400      	movs	r4, #0
	db_changed();
   22294:	f7ff fd38 	bl	21d08 <db_changed>
	k_sched_unlock();
   22298:	f006 fa62 	bl	28760 <k_sched_unlock>
	return 0;
   2229c:	e75d      	b.n	2215a <bt_gatt_service_register+0x46>
		k_sched_unlock();
   2229e:	f006 fa5f 	bl	28760 <k_sched_unlock>
			return -EINVAL;
   222a2:	f06f 0415 	mvn.w	r4, #21
		return err;
   222a6:	e758      	b.n	2215a <bt_gatt_service_register+0x46>
	handle = last->attrs[last->attr_count - 1].handle;
   222a8:	681b      	ldr	r3, [r3, #0]
   222aa:	deff      	udf	#255	; 0xff
   222ac:	20002938 	.word	0x20002938
   222b0:	20002914 	.word	0x20002914
   222b4:	200036ea 	.word	0x200036ea
   222b8:	2000291c 	.word	0x2000291c
   222bc:	0002e457 	.word	0x0002e457

000222c0 <gatt_indicate>:
{
   222c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   222c4:	4615      	mov	r5, r2
   222c6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   222c8:	2214      	movs	r2, #20
   222ca:	6869      	ldr	r1, [r5, #4]
{
   222cc:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   222ce:	f00c fbc4 	bl	2ea5a <bt_gatt_check_perm>
   222d2:	2800      	cmp	r0, #0
   222d4:	d139      	bne.n	2234a <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   222d6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   222da:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   222dc:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   222de:	f7ff fbf9 	bl	21ad4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   222e2:	3602      	adds	r6, #2
	if (!req) {
   222e4:	4604      	mov	r4, r0
   222e6:	b920      	cbnz	r0, 222f2 <gatt_indicate+0x32>
		return -ENOMEM;
   222e8:	f06f 050b 	mvn.w	r5, #11
}
   222ec:	4628      	mov	r0, r5
   222ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   222f2:	4b17      	ldr	r3, [pc, #92]	; (22350 <gatt_indicate+0x90>)
   222f4:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   222f6:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   222f8:	4632      	mov	r2, r6
   222fa:	211d      	movs	r1, #29
   222fc:	4640      	mov	r0, r8
   222fe:	f00b ffa8 	bl	2e252 <bt_att_create_pdu>
	if (!buf) {
   22302:	4606      	mov	r6, r0
   22304:	b918      	cbnz	r0, 2230e <gatt_indicate+0x4e>
		bt_att_req_free(req);
   22306:	4620      	mov	r0, r4
   22308:	f7ff fbfa 	bl	21b00 <bt_att_req_free>
   2230c:	e7ec      	b.n	222e8 <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
   2230e:	f100 0a08 	add.w	sl, r0, #8
   22312:	2102      	movs	r1, #2
   22314:	4650      	mov	r0, sl
   22316:	f00d fba4 	bl	2fa62 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   2231a:	4607      	mov	r7, r0
   2231c:	8aa9      	ldrh	r1, [r5, #20]
   2231e:	f827 9b02 	strh.w	r9, [r7], #2
   22322:	4650      	mov	r0, sl
   22324:	f00d fb9d 	bl	2fa62 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   22328:	8aaa      	ldrh	r2, [r5, #20]
   2232a:	6929      	ldr	r1, [r5, #16]
   2232c:	4638      	mov	r0, r7
   2232e:	f00a fcc4 	bl	2ccba <memcpy>
	req->buf = buf;
   22332:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   22334:	4621      	mov	r1, r4
   22336:	4640      	mov	r0, r8
   22338:	f00c f878 	bl	2e42c <bt_att_req_send>
	if (err) {
   2233c:	4605      	mov	r5, r0
   2233e:	2800      	cmp	r0, #0
   22340:	d0d4      	beq.n	222ec <gatt_indicate+0x2c>
		bt_att_req_free(req);
   22342:	4620      	mov	r0, r4
   22344:	f7ff fbdc 	bl	21b00 <bt_att_req_free>
   22348:	e7d0      	b.n	222ec <gatt_indicate+0x2c>
		return -EPERM;
   2234a:	f04f 35ff 	mov.w	r5, #4294967295
   2234e:	e7cd      	b.n	222ec <gatt_indicate+0x2c>
   22350:	0002e471 	.word	0x0002e471

00022354 <bt_gatt_indicate>:
{
   22354:	b530      	push	{r4, r5, lr}
   22356:	4604      	mov	r4, r0
   22358:	b08b      	sub	sp, #44	; 0x2c
   2235a:	4837      	ldr	r0, [pc, #220]	; (22438 <bt_gatt_indicate+0xe4>)
   2235c:	460d      	mov	r5, r1
   2235e:	f00c f8a0 	bl	2e4a2 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   22362:	0782      	lsls	r2, r0, #30
   22364:	d561      	bpl.n	2242a <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   22366:	b114      	cbz	r4, 2236e <bt_gatt_indicate+0x1a>
   22368:	7aa3      	ldrb	r3, [r4, #10]
   2236a:	2b07      	cmp	r3, #7
   2236c:	d160      	bne.n	22430 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   2236e:	6868      	ldr	r0, [r5, #4]
   22370:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   22372:	f7ff fdb9 	bl	21ee8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   22376:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   22378:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2237c:	b33a      	cbz	r2, 223ce <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2237e:	a905      	add	r1, sp, #20
   22380:	9102      	str	r1, [sp, #8]
   22382:	492e      	ldr	r1, [pc, #184]	; (2243c <bt_gatt_indicate+0xe8>)
   22384:	9101      	str	r1, [sp, #4]
   22386:	2101      	movs	r1, #1
	found->attr = NULL;
   22388:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2238a:	9100      	str	r1, [sp, #0]
   2238c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   22390:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   22392:	f7ff fdd9 	bl	21f48 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   22396:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   22398:	b91b      	cbnz	r3, 223a2 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   2239a:	f06f 0001 	mvn.w	r0, #1
}
   2239e:	b00b      	add	sp, #44	; 0x2c
   223a0:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   223a2:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   223a4:	9b05      	ldr	r3, [sp, #20]
   223a6:	6818      	ldr	r0, [r3, #0]
   223a8:	2300      	movs	r3, #0
   223aa:	f88d 3010 	strb.w	r3, [sp, #16]
   223ae:	a904      	add	r1, sp, #16
   223b0:	f642 0303 	movw	r3, #10243	; 0x2803
   223b4:	f8ad 3012 	strh.w	r3, [sp, #18]
   223b8:	f00a fceb 	bl	2cd92 <bt_uuid_cmp>
   223bc:	b970      	cbnz	r0, 223dc <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   223be:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   223c0:	68c3      	ldr	r3, [r0, #12]
   223c2:	799b      	ldrb	r3, [r3, #6]
   223c4:	069b      	lsls	r3, r3, #26
   223c6:	d405      	bmi.n	223d4 <bt_gatt_indicate+0x80>
			return -EINVAL;
   223c8:	f06f 0015 	mvn.w	r0, #21
   223cc:	e7e7      	b.n	2239e <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   223ce:	2800      	cmp	r0, #0
   223d0:	d1e8      	bne.n	223a4 <bt_gatt_indicate+0x50>
   223d2:	e7e2      	b.n	2239a <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   223d4:	f00c fae4 	bl	2e9a0 <bt_gatt_attr_value_handle>
   223d8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   223dc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   223e0:	b13c      	cbz	r4, 223f2 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   223e2:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   223e4:	4601      	mov	r1, r0
		params->_ref = 1;
   223e6:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   223e8:	462a      	mov	r2, r5
   223ea:	4620      	mov	r0, r4
   223ec:	f7ff ff68 	bl	222c0 <gatt_indicate>
   223f0:	e7d5      	b.n	2239e <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   223f2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   223f6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   223f8:	2302      	movs	r3, #2
   223fa:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   223fe:	f642 1302 	movw	r3, #10498	; 0x2902
   22402:	f8ad 3012 	strh.w	r3, [sp, #18]
   22406:	ab05      	add	r3, sp, #20
   22408:	9302      	str	r3, [sp, #8]
   2240a:	4b0d      	ldr	r3, [pc, #52]	; (22440 <bt_gatt_indicate+0xec>)
   2240c:	9301      	str	r3, [sp, #4]
   2240e:	2301      	movs	r3, #1
   22410:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   22412:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   22414:	4623      	mov	r3, r4
   22416:	aa04      	add	r2, sp, #16
   22418:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   2241c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2241e:	f88d 4010 	strb.w	r4, [sp, #16]
   22422:	f7ff fd91 	bl	21f48 <bt_gatt_foreach_attr_type>
	return data.err;
   22426:	9807      	ldr	r0, [sp, #28]
   22428:	e7b9      	b.n	2239e <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   2242a:	f06f 000a 	mvn.w	r0, #10
   2242e:	e7b6      	b.n	2239e <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   22430:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22434:	e7b3      	b.n	2239e <bt_gatt_indicate+0x4a>
   22436:	bf00      	nop
   22438:	2000037c 	.word	0x2000037c
   2243c:	0002e497 	.word	0x0002e497
   22440:	00022589 	.word	0x00022589

00022444 <sc_process>:
{
   22444:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   22446:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   2244a:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   2244c:	f850 3c08 	ldr.w	r3, [r0, #-8]
   22450:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   22452:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22456:	f06f 0101 	mvn.w	r1, #1
   2245a:	4628      	mov	r0, r5
   2245c:	f00c f88b 	bl	2e576 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   22460:	4b0d      	ldr	r3, [pc, #52]	; (22498 <sc_process+0x54>)
   22462:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   22466:	4b0d      	ldr	r3, [pc, #52]	; (2249c <sc_process+0x58>)
   22468:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   2246c:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   2246e:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   22470:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   22474:	2304      	movs	r3, #4
	sc->start = 0U;
   22476:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   2247a:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   2247e:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   22482:	4631      	mov	r1, r6
   22484:	f7ff ff66 	bl	22354 <bt_gatt_indicate>
   22488:	b918      	cbnz	r0, 22492 <sc_process+0x4e>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   2248a:	2101      	movs	r1, #1
   2248c:	4628      	mov	r0, r5
   2248e:	f00c f864 	bl	2e55a <atomic_set_bit>
}
   22492:	b002      	add	sp, #8
   22494:	bd70      	pop	{r4, r5, r6, pc}
   22496:	bf00      	nop
   22498:	00032a08 	.word	0x00032a08
   2249c:	00021cc1 	.word	0x00021cc1

000224a0 <bt_gatt_notify_cb>:
{
   224a0:	b530      	push	{r4, r5, lr}
   224a2:	4604      	mov	r4, r0
   224a4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   224a6:	4835      	ldr	r0, [pc, #212]	; (2257c <bt_gatt_notify_cb+0xdc>)
   224a8:	460d      	mov	r5, r1
   224aa:	f00b fffa 	bl	2e4a2 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   224ae:	0782      	lsls	r2, r0, #30
   224b0:	d55d      	bpl.n	2256e <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   224b2:	b114      	cbz	r4, 224ba <bt_gatt_notify_cb+0x1a>
   224b4:	7aa3      	ldrb	r3, [r4, #10]
   224b6:	2b07      	cmp	r3, #7
   224b8:	d15c      	bne.n	22574 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   224ba:	6868      	ldr	r0, [r5, #4]
   224bc:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   224be:	f7ff fd13 	bl	21ee8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   224c2:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   224c4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   224c8:	b33a      	cbz	r2, 2251a <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   224ca:	a905      	add	r1, sp, #20
   224cc:	9102      	str	r1, [sp, #8]
   224ce:	492c      	ldr	r1, [pc, #176]	; (22580 <bt_gatt_notify_cb+0xe0>)
   224d0:	9101      	str	r1, [sp, #4]
   224d2:	2101      	movs	r1, #1
	found->attr = NULL;
   224d4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   224d6:	9100      	str	r1, [sp, #0]
   224d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   224dc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   224de:	f7ff fd33 	bl	21f48 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   224e2:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   224e4:	b91b      	cbnz	r3, 224ee <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   224e6:	f06f 0001 	mvn.w	r0, #1
}
   224ea:	b00b      	add	sp, #44	; 0x2c
   224ec:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   224ee:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   224f0:	9b05      	ldr	r3, [sp, #20]
   224f2:	6818      	ldr	r0, [r3, #0]
   224f4:	2300      	movs	r3, #0
   224f6:	f88d 3010 	strb.w	r3, [sp, #16]
   224fa:	a904      	add	r1, sp, #16
   224fc:	f642 0303 	movw	r3, #10243	; 0x2803
   22500:	f8ad 3012 	strh.w	r3, [sp, #18]
   22504:	f00a fc45 	bl	2cd92 <bt_uuid_cmp>
   22508:	b970      	cbnz	r0, 22528 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2250a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2250c:	68c3      	ldr	r3, [r0, #12]
   2250e:	799b      	ldrb	r3, [r3, #6]
   22510:	06db      	lsls	r3, r3, #27
   22512:	d405      	bmi.n	22520 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   22514:	f06f 0015 	mvn.w	r0, #21
   22518:	e7e7      	b.n	224ea <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   2251a:	2800      	cmp	r0, #0
   2251c:	d1e8      	bne.n	224f0 <bt_gatt_notify_cb+0x50>
   2251e:	e7e2      	b.n	224e6 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   22520:	f00c fa3e 	bl	2e9a0 <bt_gatt_attr_value_handle>
   22524:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   22528:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2252c:	b12c      	cbz	r4, 2253a <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   2252e:	4601      	mov	r1, r0
   22530:	462a      	mov	r2, r5
   22532:	4620      	mov	r0, r4
   22534:	f00c fab4 	bl	2eaa0 <gatt_notify>
   22538:	e7d7      	b.n	224ea <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2253a:	f642 1202 	movw	r2, #10498	; 0x2902
   2253e:	f8ad 2012 	strh.w	r2, [sp, #18]
   22542:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   22544:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   22548:	9202      	str	r2, [sp, #8]
   2254a:	4a0e      	ldr	r2, [pc, #56]	; (22584 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   2254c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   2254e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   22550:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   22554:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   22558:	aa04      	add	r2, sp, #16
   2255a:	4623      	mov	r3, r4
   2255c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   22560:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   22562:	f88d 4010 	strb.w	r4, [sp, #16]
   22566:	f7ff fcef 	bl	21f48 <bt_gatt_foreach_attr_type>
	return data.err;
   2256a:	9807      	ldr	r0, [sp, #28]
   2256c:	e7bd      	b.n	224ea <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   2256e:	f06f 000a 	mvn.w	r0, #10
   22572:	e7ba      	b.n	224ea <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   22574:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22578:	e7b7      	b.n	224ea <bt_gatt_notify_cb+0x4a>
   2257a:	bf00      	nop
   2257c:	2000037c 	.word	0x2000037c
   22580:	0002e497 	.word	0x0002e497
   22584:	00022589 	.word	0x00022589

00022588 <notify_cb>:
{
   22588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2258a:	4b32      	ldr	r3, [pc, #200]	; (22654 <notify_cb+0xcc>)
{
   2258c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2258e:	6882      	ldr	r2, [r0, #8]
   22590:	429a      	cmp	r2, r3
{
   22592:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   22594:	d12e      	bne.n	225f4 <notify_cb+0x6c>
	ccc = attr->user_data;
   22596:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   22598:	4b2f      	ldr	r3, [pc, #188]	; (22658 <notify_cb+0xd0>)
   2259a:	429f      	cmp	r7, r3
   2259c:	d11a      	bne.n	225d4 <notify_cb+0x4c>
	return memcmp(a, b, sizeof(*a));
   2259e:	4d2f      	ldr	r5, [pc, #188]	; (2265c <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   225a0:	2300      	movs	r3, #0
   225a2:	2207      	movs	r2, #7
   225a4:	4669      	mov	r1, sp
   225a6:	1c68      	adds	r0, r5, #1
   225a8:	9300      	str	r3, [sp, #0]
   225aa:	f8cd 3003 	str.w	r3, [sp, #3]
   225ae:	f00a fb5d 	bl	2cc6c <memcmp>
   225b2:	b178      	cbz	r0, 225d4 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   225b4:	4629      	mov	r1, r5
   225b6:	2207      	movs	r2, #7
   225b8:	f811 0b01 	ldrb.w	r0, [r1], #1
   225bc:	f7fe fb6c 	bl	20c98 <bt_conn_lookup_state_le>
			if (!conn) {
   225c0:	b9e0      	cbnz	r0, 225fc <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   225c2:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   225c4:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   225c6:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   225c8:	f811 0b01 	ldrb.w	r0, [r1], #1
   225cc:	8853      	ldrh	r3, [r2, #2]
   225ce:	8812      	ldrh	r2, [r2, #0]
   225d0:	f00c f984 	bl	2e8dc <sc_save>
		if (cfg->value != data->type) {
   225d4:	893a      	ldrh	r2, [r7, #8]
   225d6:	89a3      	ldrh	r3, [r4, #12]
   225d8:	429a      	cmp	r2, r3
   225da:	d10b      	bne.n	225f4 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   225dc:	4639      	mov	r1, r7
   225de:	f811 0b01 	ldrb.w	r0, [r1], #1
   225e2:	f7fe fb3b 	bl	20c5c <bt_conn_lookup_addr_le>
		if (!conn) {
   225e6:	4605      	mov	r5, r0
   225e8:	b120      	cbz	r0, 225f4 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   225ea:	7a83      	ldrb	r3, [r0, #10]
   225ec:	2b07      	cmp	r3, #7
   225ee:	d008      	beq.n	22602 <notify_cb+0x7a>
			bt_conn_unref(conn);
   225f0:	f00b f8c9 	bl	2d786 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   225f4:	2701      	movs	r7, #1
}
   225f6:	4638      	mov	r0, r7
   225f8:	b003      	add	sp, #12
   225fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   225fc:	f00b f8c3 	bl	2d786 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   22600:	e7e8      	b.n	225d4 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   22602:	697b      	ldr	r3, [r7, #20]
   22604:	b123      	cbz	r3, 22610 <notify_cb+0x88>
   22606:	4631      	mov	r1, r6
   22608:	4798      	blx	r3
   2260a:	b908      	cbnz	r0, 22610 <notify_cb+0x88>
			bt_conn_unref(conn);
   2260c:	4628      	mov	r0, r5
   2260e:	e7ef      	b.n	225f0 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   22610:	2214      	movs	r2, #20
   22612:	4631      	mov	r1, r6
   22614:	4628      	mov	r0, r5
   22616:	f00c fa20 	bl	2ea5a <bt_gatt_check_perm>
   2261a:	4607      	mov	r7, r0
   2261c:	2800      	cmp	r0, #0
   2261e:	d1e9      	bne.n	225f4 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   22620:	89a3      	ldrh	r3, [r4, #12]
   22622:	88a1      	ldrh	r1, [r4, #4]
   22624:	6922      	ldr	r2, [r4, #16]
   22626:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   22628:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   2262a:	d10f      	bne.n	2264c <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
   2262c:	f7ff fe48 	bl	222c0 <gatt_indicate>
			if (err == 0) {
   22630:	4606      	mov	r6, r0
   22632:	b918      	cbnz	r0, 2263c <notify_cb+0xb4>
				data->ind_params->_ref++;
   22634:	6922      	ldr	r2, [r4, #16]
   22636:	7d93      	ldrb	r3, [r2, #22]
   22638:	3301      	adds	r3, #1
   2263a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2263c:	4628      	mov	r0, r5
   2263e:	f00b f8a2 	bl	2d786 <bt_conn_unref>
		if (err < 0) {
   22642:	2e00      	cmp	r6, #0
   22644:	dbd7      	blt.n	225f6 <notify_cb+0x6e>
		data->err = 0;
   22646:	2300      	movs	r3, #0
   22648:	60a3      	str	r3, [r4, #8]
   2264a:	e7d3      	b.n	225f4 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2264c:	f00c fa28 	bl	2eaa0 <gatt_notify>
   22650:	4606      	mov	r6, r0
   22652:	e7f3      	b.n	2263c <notify_cb+0xb4>
   22654:	0002e61f 	.word	0x0002e61f
   22658:	20000630 	.word	0x20000630
   2265c:	200036ec 	.word	0x200036ec

00022660 <update_ccc>:
{
   22660:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   22662:	4b24      	ldr	r3, [pc, #144]	; (226f4 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
   22664:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   22666:	6882      	ldr	r2, [r0, #8]
   22668:	429a      	cmp	r2, r3
{
   2266a:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2266c:	d13f      	bne.n	226ee <update_ccc+0x8e>
	ccc = attr->user_data;
   2266e:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   22670:	8933      	ldrh	r3, [r6, #8]
   22672:	2b00      	cmp	r3, #0
   22674:	d03b      	beq.n	226ee <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   22676:	4632      	mov	r2, r6
   22678:	4620      	mov	r0, r4
   2267a:	f812 1b01 	ldrb.w	r1, [r2], #1
   2267e:	f00b f8c9 	bl	2d814 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   22682:	2800      	cmp	r0, #0
   22684:	d033      	beq.n	226ee <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   22686:	222a      	movs	r2, #42	; 0x2a
   22688:	4629      	mov	r1, r5
   2268a:	4620      	mov	r0, r4
   2268c:	f00c f9e5 	bl	2ea5a <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   22690:	2803      	cmp	r0, #3
   22692:	d02c      	beq.n	226ee <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
   22694:	4631      	mov	r1, r6
   22696:	4628      	mov	r0, r5
   22698:	f00b fee0 	bl	2e45c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2269c:	4b16      	ldr	r3, [pc, #88]	; (226f8 <update_ccc+0x98>)
   2269e:	429e      	cmp	r6, r3
   226a0:	d125      	bne.n	226ee <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   226a2:	7a20      	ldrb	r0, [r4, #8]
   226a4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   226a8:	f7ff fadc 	bl	21c64 <find_sc_cfg>
	if (!cfg) {
   226ac:	b1f8      	cbz	r0, 226ee <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
   226ae:	8902      	ldrh	r2, [r0, #8]
   226b0:	8943      	ldrh	r3, [r0, #10]
   226b2:	ea53 0102 	orrs.w	r1, r3, r2
   226b6:	d01a      	beq.n	226ee <update_ccc+0x8e>
	index = bt_conn_index(conn);
   226b8:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   226ba:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   226be:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   226c2:	f7fe fa05 	bl	20ad0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   226c6:	490d      	ldr	r1, [pc, #52]	; (226fc <update_ccc+0x9c>)
   226c8:	4a0d      	ldr	r2, [pc, #52]	; (22700 <update_ccc+0xa0>)
   226ca:	2318      	movs	r3, #24
   226cc:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   226d0:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   226d2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   226d4:	4a0b      	ldr	r2, [pc, #44]	; (22704 <update_ccc+0xa4>)
   226d6:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   226d8:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   226da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   226de:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   226e0:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   226e2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   226e6:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   226e8:	4620      	mov	r0, r4
   226ea:	f7ff fe33 	bl	22354 <bt_gatt_indicate>
}
   226ee:	2001      	movs	r0, #1
   226f0:	b002      	add	sp, #8
   226f2:	bd70      	pop	{r4, r5, r6, pc}
   226f4:	0002e61f 	.word	0x0002e61f
   226f8:	20000630 	.word	0x20000630
   226fc:	20002920 	.word	0x20002920
   22700:	00032a08 	.word	0x00032a08
   22704:	0002e5c9 	.word	0x0002e5c9

00022708 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   22708:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2270a:	4a06      	ldr	r2, [pc, #24]	; (22724 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   2270c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2270e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   22710:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   22712:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   22716:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2271a:	f00c f98f 	bl	2ea3c <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   2271e:	b003      	add	sp, #12
   22720:	f85d fb04 	ldr.w	pc, [sp], #4
   22724:	00022661 	.word	0x00022661

00022728 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   22728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2272a:	4b09      	ldr	r3, [pc, #36]	; (22750 <bt_gatt_att_max_mtu_changed+0x28>)
   2272c:	681c      	ldr	r4, [r3, #0]
{
   2272e:	4605      	mov	r5, r0
   22730:	460e      	mov	r6, r1
   22732:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   22734:	b10c      	cbz	r4, 2273a <bt_gatt_att_max_mtu_changed+0x12>
   22736:	3c04      	subs	r4, #4
   22738:	b904      	cbnz	r4, 2273c <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   2273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   2273c:	6823      	ldr	r3, [r4, #0]
   2273e:	b11b      	cbz	r3, 22748 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   22740:	463a      	mov	r2, r7
   22742:	4631      	mov	r1, r6
   22744:	4628      	mov	r0, r5
   22746:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   22748:	1d23      	adds	r3, r4, #4
   2274a:	d0f6      	beq.n	2273a <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2274c:	6864      	ldr	r4, [r4, #4]
   2274e:	e7f1      	b.n	22734 <bt_gatt_att_max_mtu_changed+0xc>
   22750:	200028fc 	.word	0x200028fc

00022754 <db_hash_read>:
{
   22754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   22756:	4913      	ldr	r1, [pc, #76]	; (227a4 <db_hash_read+0x50>)
{
   22758:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2275c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2275e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   22762:	461f      	mov	r7, r3
   22764:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   22766:	f00f f931 	bl	319cc <k_work_cancel_delayable_sync>
   2276a:	480f      	ldr	r0, [pc, #60]	; (227a8 <db_hash_read+0x54>)
   2276c:	f00b fe99 	bl	2e4a2 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   22770:	0743      	lsls	r3, r0, #29
   22772:	d401      	bmi.n	22778 <db_hash_read+0x24>
		db_hash_gen(true);
   22774:	f7ff fc94 	bl	220a0 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   22778:	2101      	movs	r1, #1
   2277a:	4620      	mov	r0, r4
   2277c:	f00c f9c3 	bl	2eb06 <bt_gatt_change_aware>
	if (offset > value_len) {
   22780:	2e10      	cmp	r6, #16
   22782:	d80c      	bhi.n	2279e <db_hash_read+0x4a>
	len = MIN(buf_len, value_len - offset);
   22784:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   22788:	4908      	ldr	r1, [pc, #32]	; (227ac <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
   2278a:	42bc      	cmp	r4, r7
   2278c:	bfa8      	it	ge
   2278e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   22790:	4622      	mov	r2, r4
   22792:	4431      	add	r1, r6
   22794:	4628      	mov	r0, r5
   22796:	f00a fa90 	bl	2ccba <memcpy>
}
   2279a:	4620      	mov	r0, r4
   2279c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2279e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   227a2:	e7fa      	b.n	2279a <db_hash_read+0x46>
   227a4:	20001e30 	.word	0x20001e30
   227a8:	20001ea8 	.word	0x20001ea8
   227ac:	20001df0 	.word	0x20001df0

000227b0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   227b0:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   227b2:	4603      	mov	r3, r0
   227b4:	4a12      	ldr	r2, [pc, #72]	; (22800 <bt_gatt_disconnected+0x50>)
{
   227b6:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   227b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   227bc:	2001      	movs	r0, #1
   227be:	f00c f93d 	bl	2ea3c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   227c2:	4628      	mov	r0, r5
   227c4:	f7ff fa5e 	bl	21c84 <find_cf_cfg>
	if (!cfg) {
   227c8:	4604      	mov	r4, r0
   227ca:	b1c0      	cbz	r0, 227fe <bt_gatt_disconnected+0x4e>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   227cc:	f105 0688 	add.w	r6, r5, #136	; 0x88
   227d0:	7a28      	ldrb	r0, [r5, #8]
   227d2:	4631      	mov	r1, r6
   227d4:	f00a fdba 	bl	2d34c <bt_addr_le_is_bonded>
   227d8:	b920      	cbnz	r0, 227e4 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   227da:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   227dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   227e0:	f00b bf70 	b.w	2e6c4 <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   227e4:	4631      	mov	r1, r6
   227e6:	1c60      	adds	r0, r4, #1
   227e8:	2207      	movs	r2, #7
   227ea:	f00a fa66 	bl	2ccba <memcpy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   227ee:	f104 000c 	add.w	r0, r4, #12
   227f2:	f06f 0102 	mvn.w	r1, #2
}
   227f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   227fa:	f00b bebc 	b.w	2e576 <atomic_and>
   227fe:	bd70      	pop	{r4, r5, r6, pc}
   22800:	00021d65 	.word	0x00021d65

00022804 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   22804:	4b04      	ldr	r3, [pc, #16]	; (22818 <bt_smp_accept+0x14>)
   22806:	6818      	ldr	r0, [r3, #0]
   22808:	b918      	cbnz	r0, 22812 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   2280a:	4a04      	ldr	r2, [pc, #16]	; (2281c <bt_smp_accept+0x18>)
   2280c:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   2280e:	600b      	str	r3, [r1, #0]

		return 0;
   22810:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   22812:	f06f 000b 	mvn.w	r0, #11
}
   22816:	4770      	bx	lr
   22818:	20001eb0 	.word	0x20001eb0
   2281c:	00032ae4 	.word	0x00032ae4

00022820 <mcumgr_buf_alloc>:
	return net_buf_alloc_fixed(pool, timeout);
   22820:	4802      	ldr	r0, [pc, #8]	; (2282c <mcumgr_buf_alloc+0xc>)
   22822:	2200      	movs	r2, #0
   22824:	2300      	movs	r3, #0
   22826:	f00d b8c6 	b.w	2f9b6 <net_buf_alloc_fixed>
   2282a:	bf00      	nop
   2282c:	20000dd4 	.word	0x20000dd4

00022830 <cbor_nb_reader_init>:

void
cbor_nb_reader_init(struct cbor_nb_reader *cnr,
		    struct net_buf *nb)
{
	cnr->r.get8 = &cbor_nb_reader_get8;
   22830:	4b07      	ldr	r3, [pc, #28]	; (22850 <cbor_nb_reader_init+0x20>)
   22832:	6003      	str	r3, [r0, #0]
	cnr->r.get16 = &cbor_nb_reader_get16;
   22834:	4b07      	ldr	r3, [pc, #28]	; (22854 <cbor_nb_reader_init+0x24>)
   22836:	6043      	str	r3, [r0, #4]
	cnr->r.get32 = &cbor_nb_reader_get32;
   22838:	4b07      	ldr	r3, [pc, #28]	; (22858 <cbor_nb_reader_init+0x28>)
   2283a:	6083      	str	r3, [r0, #8]
	cnr->r.get64 = &cbor_nb_reader_get64;
   2283c:	4b07      	ldr	r3, [pc, #28]	; (2285c <cbor_nb_reader_init+0x2c>)
   2283e:	60c3      	str	r3, [r0, #12]
	cnr->r.cmp = &cbor_nb_reader_cmp;
   22840:	4b07      	ldr	r3, [pc, #28]	; (22860 <cbor_nb_reader_init+0x30>)
   22842:	6103      	str	r3, [r0, #16]
	cnr->r.cpy = &cbor_nb_reader_cpy;
   22844:	4b07      	ldr	r3, [pc, #28]	; (22864 <cbor_nb_reader_init+0x34>)
   22846:	6143      	str	r3, [r0, #20]

	cnr->nb = nb;
	cnr->r.message_size = nb->len;
   22848:	898b      	ldrh	r3, [r1, #12]
	cnr->nb = nb;
   2284a:	61c1      	str	r1, [r0, #28]
	cnr->r.message_size = nb->len;
   2284c:	6183      	str	r3, [r0, #24]
}
   2284e:	4770      	bx	lr
   22850:	0002ebad 	.word	0x0002ebad
   22854:	0002ec73 	.word	0x0002ec73
   22858:	0002ec45 	.word	0x0002ec45
   2285c:	0002ec13 	.word	0x0002ec13
   22860:	0002ebed 	.word	0x0002ebed
   22864:	0002ebc3 	.word	0x0002ebc3

00022868 <cbor_nb_writer_init>:

void
cbor_nb_writer_init(struct cbor_nb_writer *cnw, struct net_buf *nb)
{
	cnw->nb = nb;
	cnw->enc.bytes_written = 0;
   22868:	2300      	movs	r3, #0
   2286a:	6043      	str	r3, [r0, #4]
	cnw->enc.write = &cbor_nb_write;
   2286c:	4b01      	ldr	r3, [pc, #4]	; (22874 <cbor_nb_writer_init+0xc>)
	cnw->nb = nb;
   2286e:	6081      	str	r1, [r0, #8]
	cnw->enc.write = &cbor_nb_write;
   22870:	6003      	str	r3, [r0, #0]
}
   22872:	4770      	bx	lr
   22874:	0002eca5 	.word	0x0002eca5

00022878 <zephyr_smp_handle_reqs>:
/**
 * Processes all received SNP request packets.
 */
static void
zephyr_smp_handle_reqs(struct k_work *work)
{
   22878:	b5f0      	push	{r4, r5, r6, r7, lr}
	streamer = (struct smp_streamer) {
   2287a:	4e0d      	ldr	r6, [pc, #52]	; (228b0 <zephyr_smp_handle_reqs+0x38>)
   2287c:	4f0d      	ldr	r7, [pc, #52]	; (228b4 <zephyr_smp_handle_reqs+0x3c>)
{
   2287e:	b091      	sub	sp, #68	; 0x44
   22880:	4604      	mov	r4, r0
	struct zephyr_smp_transport *zst;
	struct net_buf *nb;

	zst = (void *)work;

	while ((nb = net_buf_get(&zst->zst_fifo, K_NO_WAIT)) != NULL) {
   22882:	f100 0510 	add.w	r5, r0, #16
   22886:	2200      	movs	r2, #0
   22888:	2300      	movs	r3, #0
   2288a:	4628      	mov	r0, r5
   2288c:	f00d f898 	bl	2f9c0 <net_buf_get>
   22890:	4601      	mov	r1, r0
   22892:	b908      	cbnz	r0, 22898 <zephyr_smp_handle_reqs+0x20>
		zephyr_smp_process_packet(zst, nb);
	}
}
   22894:	b011      	add	sp, #68	; 0x44
   22896:	bdf0      	pop	{r4, r5, r6, r7, pc}
	streamer = (struct smp_streamer) {
   22898:	ab08      	add	r3, sp, #32
	rc = smp_process_request_packet(&streamer, nb);
   2289a:	a803      	add	r0, sp, #12
	streamer = (struct smp_streamer) {
   2289c:	e9cd 6403 	strd	r6, r4, [sp, #12]
   228a0:	9305      	str	r3, [sp, #20]
   228a2:	f8cd d018 	str.w	sp, [sp, #24]
   228a6:	9707      	str	r7, [sp, #28]
	rc = smp_process_request_packet(&streamer, nb);
   228a8:	f00c ff08 	bl	2f6bc <smp_process_request_packet>
	return rc;
   228ac:	e7eb      	b.n	22886 <zephyr_smp_handle_reqs+0xe>
   228ae:	bf00      	nop
   228b0:	00032b18 	.word	0x00032b18
   228b4:	0002ed31 	.word	0x0002ed31

000228b8 <zephyr_smp_transport_init>:
zephyr_smp_transport_init(struct zephyr_smp_transport *zst,
			  zephyr_smp_transport_out_fn *output_func,
			  zephyr_smp_transport_get_mtu_fn *get_mtu_func,
			  zephyr_smp_transport_ud_copy_fn *ud_copy_func,
			  zephyr_smp_transport_ud_free_fn *ud_free_func)
{
   228b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   228bc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   228c0:	4604      	mov	r4, r0
   228c2:	461d      	mov	r5, r3
   228c4:	460f      	mov	r7, r1
   228c6:	4616      	mov	r6, r2
	*zst = (struct zephyr_smp_transport) {
   228c8:	2100      	movs	r1, #0
   228ca:	2238      	movs	r2, #56	; 0x38
   228cc:	f00a fa00 	bl	2ccd0 <memset>
   228d0:	e9c4 760a 	strd	r7, r6, [r4, #40]	; 0x28
   228d4:	e9c4 580c 	strd	r5, r8, [r4, #48]	; 0x30
		.zst_get_mtu = get_mtu_func,
		.zst_ud_copy = ud_copy_func,
		.zst_ud_free = ud_free_func,
	};

	k_work_init(&zst->zst_work, zephyr_smp_handle_reqs);
   228d8:	4904      	ldr	r1, [pc, #16]	; (228ec <zephyr_smp_transport_init+0x34>)
   228da:	4620      	mov	r0, r4
   228dc:	f00f f830 	bl	31940 <k_work_init>
   228e0:	f104 0010 	add.w	r0, r4, #16
	k_fifo_init(&zst->zst_fifo);
}
   228e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   228e8:	f00e bf56 	b.w	31798 <z_impl_k_queue_init>
   228ec:	00022879 	.word	0x00022879

000228f0 <smp_bt_chr_write>:
 */
static ssize_t smp_bt_chr_write(struct bt_conn *conn,
				const struct bt_gatt_attr *attr,
				const void *buf, uint16_t len, uint16_t offset,
				uint8_t flags)
{
   228f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228f2:	4606      	mov	r6, r0
   228f4:	4617      	mov	r7, r2
   228f6:	461c      	mov	r4, r3
	struct smp_bt_user_data *ud;
	struct net_buf *nb;

	nb = mcumgr_buf_alloc();
   228f8:	f7ff ff92 	bl	22820 <mcumgr_buf_alloc>
	if (!nb) {
   228fc:	4605      	mov	r5, r0
   228fe:	b170      	cbz	r0, 2291e <smp_bt_chr_write+0x2e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22900:	4622      	mov	r2, r4
   22902:	4639      	mov	r1, r7
   22904:	3008      	adds	r0, #8
   22906:	f00d f8b2 	bl	2fa6e <net_buf_simple_add_mem>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
	}
	net_buf_add_mem(nb, buf, len);

	ud = net_buf_user_data(nb);
	ud->conn = bt_conn_ref(conn);
   2290a:	4630      	mov	r0, r6
   2290c:	f00a ff20 	bl	2d750 <bt_conn_ref>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_BT_CONN_PARAM_CONTROL)) {
		conn_param_smp_enable(conn);
	}

	zephyr_smp_rx_req(&smp_bt_transport, nb);
   22910:	4629      	mov	r1, r5
	ud->conn = bt_conn_ref(conn);
   22912:	6168      	str	r0, [r5, #20]
	zephyr_smp_rx_req(&smp_bt_transport, nb);
   22914:	4803      	ldr	r0, [pc, #12]	; (22924 <smp_bt_chr_write+0x34>)
   22916:	f00c fa70 	bl	2edfa <zephyr_smp_rx_req>

	return len;
   2291a:	4620      	mov	r0, r4
}
   2291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2291e:	f06f 0010 	mvn.w	r0, #16
   22922:	e7fb      	b.n	2291c <smp_bt_chr_write+0x2c>
   22924:	2000293c 	.word	0x2000293c

00022928 <smp_bt_init>:
		k_work_init_delayable(&conn_data[i].ework, conn_param_on_error_retry);
	}
}

static int smp_bt_init(const struct device *dev)
{
   22928:	b507      	push	{r0, r1, r2, lr}

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_BT_CONN_PARAM_CONTROL)) {
		conn_param_control_init();
	}

	zephyr_smp_transport_init(&smp_bt_transport, smp_bt_tx_pkt,
   2292a:	4b06      	ldr	r3, [pc, #24]	; (22944 <smp_bt_init+0x1c>)
   2292c:	9300      	str	r3, [sp, #0]
   2292e:	4a06      	ldr	r2, [pc, #24]	; (22948 <smp_bt_init+0x20>)
   22930:	4b06      	ldr	r3, [pc, #24]	; (2294c <smp_bt_init+0x24>)
   22932:	4907      	ldr	r1, [pc, #28]	; (22950 <smp_bt_init+0x28>)
   22934:	4807      	ldr	r0, [pc, #28]	; (22954 <smp_bt_init+0x2c>)
   22936:	f7ff ffbf 	bl	228b8 <zephyr_smp_transport_init>
				  smp_bt_get_mtu, smp_bt_ud_copy,
				  smp_bt_ud_free);
	return 0;
}
   2293a:	2000      	movs	r0, #0
   2293c:	b003      	add	sp, #12
   2293e:	f85d fb04 	ldr.w	pc, [sp], #4
   22942:	bf00      	nop
   22944:	0002ee23 	.word	0x0002ee23
   22948:	0002ee35 	.word	0x0002ee35
   2294c:	0002ee11 	.word	0x0002ee11
   22950:	0002ee5b 	.word	0x0002ee5b
   22954:	2000293c 	.word	0x2000293c

00022958 <smp_bt_notify>:
{
   22958:	b570      	push	{r4, r5, r6, lr}
   2295a:	b086      	sub	sp, #24
   2295c:	4604      	mov	r4, r0
   2295e:	460e      	mov	r6, r1
   22960:	4615      	mov	r5, r2
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   22962:	2100      	movs	r1, #0
   22964:	2218      	movs	r2, #24
   22966:	4668      	mov	r0, sp
   22968:	f00a f9b2 	bl	2ccd0 <memset>

	params.attr = attr;
   2296c:	4b05      	ldr	r3, [pc, #20]	; (22984 <smp_bt_notify+0x2c>)
	params.data = data;
	params.len = len;
   2296e:	f8ad 500c 	strh.w	r5, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
   22972:	4669      	mov	r1, sp
   22974:	4620      	mov	r0, r4
	params.data = data;
   22976:	e9cd 3601 	strd	r3, r6, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
   2297a:	f7ff fd91 	bl	224a0 <bt_gatt_notify_cb>
}
   2297e:	b006      	add	sp, #24
   22980:	bd70      	pop	{r4, r5, r6, pc}
   22982:	bf00      	nop
   22984:	20000690 	.word	0x20000690

00022988 <smp_bt_register>:
	return bt_gatt_service_register(&smp_bt_svc);
   22988:	4801      	ldr	r0, [pc, #4]	; (22990 <smp_bt_register+0x8>)
   2298a:	f7ff bbc3 	b.w	22114 <bt_gatt_service_register>
   2298e:	bf00      	nop
   22990:	200006b8 	.word	0x200006b8

00022994 <img_mgmt_impl_write_image_data>:
}

int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data, unsigned int num_bytes,
				   bool last)
{
   22994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22998:	4c1a      	ldr	r4, [pc, #104]	; (22a04 <img_mgmt_impl_write_image_data+0x70>)
   2299a:	461e      	mov	r6, r3
   2299c:	460f      	mov	r7, r1
   2299e:	6823      	ldr	r3, [r4, #0]
   229a0:	4690      	mov	r8, r2
	int rc = 0;
	static struct flash_img_context *ctx;

	if (CONFIG_HEAP_MEM_POOL_SIZE > 0 && offset != 0 && ctx == NULL) {
   229a2:	4605      	mov	r5, r0
   229a4:	b188      	cbz	r0, 229ca <img_mgmt_impl_write_image_data+0x36>
   229a6:	b353      	cbz	r3, 229fe <img_mgmt_impl_write_image_data+0x6a>
			rc = MGMT_ERR_EUNKNOWN;
			goto out;
		}
	}

	if (offset != ctx->stream.bytes_written + ctx->stream.buf_bytes) {
   229a8:	6820      	ldr	r0, [r4, #0]
   229aa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
   229ae:	f8d0 220c 	ldr.w	r2, [r0, #524]	; 0x20c
   229b2:	4413      	add	r3, r2
   229b4:	42ab      	cmp	r3, r5
   229b6:	d110      	bne.n	229da <img_mgmt_impl_write_image_data+0x46>
		rc = MGMT_ERR_EUNKNOWN;
		goto out;
	}

	/* Cast away const. */
	rc = flash_img_buffered_write(ctx, (void *)data, num_bytes, last);
   229b8:	4633      	mov	r3, r6
   229ba:	4642      	mov	r2, r8
   229bc:	4639      	mov	r1, r7
   229be:	f009 fd68 	bl	2c492 <flash_img_buffered_write>
	if (rc != 0) {
   229c2:	4605      	mov	r5, r0
   229c4:	b948      	cbnz	r0, 229da <img_mgmt_impl_write_image_data+0x46>
		rc = MGMT_ERR_EUNKNOWN;
		goto out;
	}

out:
	if (CONFIG_HEAP_MEM_POOL_SIZE > 0 && (last || rc != 0)) {
   229c6:	b176      	cbz	r6, 229e6 <img_mgmt_impl_write_image_data+0x52>
   229c8:	e008      	b.n	229dc <img_mgmt_impl_write_image_data+0x48>
		if (ctx == NULL) {
   229ca:	b17b      	cbz	r3, 229ec <img_mgmt_impl_write_image_data+0x58>
		rc = flash_img_init_id(ctx, g_img_mgmt_state.area_id);
   229cc:	4b0e      	ldr	r3, [pc, #56]	; (22a08 <img_mgmt_impl_write_image_data+0x74>)
   229ce:	6820      	ldr	r0, [r4, #0]
   229d0:	7819      	ldrb	r1, [r3, #0]
   229d2:	f009 fd70 	bl	2c4b6 <flash_img_init_id>
		if (rc != 0) {
   229d6:	2800      	cmp	r0, #0
   229d8:	d0e6      	beq.n	229a8 <img_mgmt_impl_write_image_data+0x14>
			rc = MGMT_ERR_EUNKNOWN;
   229da:	2501      	movs	r5, #1
		k_free(ctx);
   229dc:	6820      	ldr	r0, [r4, #0]
   229de:	f00f fb38 	bl	32052 <k_free>
		ctx = NULL;
   229e2:	2300      	movs	r3, #0
   229e4:	6023      	str	r3, [r4, #0]
	}

	return rc;
}
   229e6:	4628      	mov	r0, r5
   229e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ctx = k_malloc(sizeof(*ctx));
   229ec:	f44f 7009 	mov.w	r0, #548	; 0x224
   229f0:	f00f fb36 	bl	32060 <k_malloc>
			ctx = alloc_ctx();
   229f4:	6020      	str	r0, [r4, #0]
			if (ctx == NULL) {
   229f6:	2800      	cmp	r0, #0
   229f8:	d1e8      	bne.n	229cc <img_mgmt_impl_write_image_data+0x38>
				rc = MGMT_ERR_ENOMEM;
   229fa:	2502      	movs	r5, #2
   229fc:	e7ee      	b.n	229dc <img_mgmt_impl_write_image_data+0x48>
		return MGMT_ERR_EUNKNOWN;
   229fe:	2501      	movs	r5, #1
   22a00:	e7f1      	b.n	229e6 <img_mgmt_impl_write_image_data+0x52>
   22a02:	bf00      	nop
   22a04:	20002974 	.word	0x20002974
   22a08:	20002978 	.word	0x20002978

00022a0c <img_mgmt_impl_erase_image_data>:

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   22a0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   22a0e:	460c      	mov	r4, r1
	const struct flash_area *fa;
	int rc;

	if (off != 0) {
   22a10:	2800      	cmp	r0, #0
   22a12:	d13d      	bne.n	22a90 <img_mgmt_impl_erase_image_data+0x84>
		rc = MGMT_ERR_EINVAL;
		goto end;
	}

	rc = flash_area_open(g_img_mgmt_state.area_id, &fa);
   22a14:	4b20      	ldr	r3, [pc, #128]	; (22a98 <img_mgmt_impl_erase_image_data+0x8c>)
   22a16:	4669      	mov	r1, sp
   22a18:	7818      	ldrb	r0, [r3, #0]
   22a1a:	f7fb fad5 	bl	1dfc8 <flash_area_open>
	if (rc != 0) {
   22a1e:	2800      	cmp	r0, #0
   22a20:	d138      	bne.n	22a94 <img_mgmt_impl_erase_image_data+0x88>
		rc = MGMT_ERR_EUNKNOWN;
		goto end;
	}

	/* align requested erase size to the erase-block-size */
	const struct device *dev = flash_area_get_device(fa);
   22a22:	9800      	ldr	r0, [sp, #0]
   22a24:	f009 fdf0 	bl	2c608 <flash_area_get_device>
	struct flash_pages_info page;
	off_t page_offset = fa->fa_off + num_bytes - 1;
   22a28:	9b00      	ldr	r3, [sp, #0]
   22a2a:	685b      	ldr	r3, [r3, #4]
   22a2c:	3b01      	subs	r3, #1
	const struct device *dev = flash_area_get_device(fa);
   22a2e:	4606      	mov	r6, r0
	off_t page_offset = fa->fa_off + num_bytes - 1;
   22a30:	1919      	adds	r1, r3, r4
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   22a32:	aa01      	add	r2, sp, #4
   22a34:	f00d feaa 	bl	3078c <z_impl_flash_get_page_info_by_offs>

	rc = flash_get_page_info_by_offs(dev, page_offset, &page);
	if (rc != 0) {
   22a38:	4601      	mov	r1, r0
   22a3a:	b130      	cbz	r0, 22a4a <img_mgmt_impl_erase_image_data+0x3e>
		LOG_ERR("bad offset (0x%lx)", (long)page_offset);
		rc = MGMT_ERR_EUNKNOWN;
   22a3c:	2401      	movs	r4, #1
	}

	rc = 0;

end_fa:
	flash_area_close(fa);
   22a3e:	9800      	ldr	r0, [sp, #0]
   22a40:	f009 fd5a 	bl	2c4f8 <flash_area_close>
end:
	return rc;
}
   22a44:	4620      	mov	r0, r4
   22a46:	b004      	add	sp, #16
   22a48:	bd70      	pop	{r4, r5, r6, pc}
	size_t erase_size = page.start_offset + page.size - fa->fa_off;
   22a4a:	e9dd 0500 	ldrd	r0, r5, [sp]
   22a4e:	9a02      	ldr	r2, [sp, #8]
   22a50:	4415      	add	r5, r2
   22a52:	6842      	ldr	r2, [r0, #4]
   22a54:	1aad      	subs	r5, r5, r2
	rc = flash_area_erase(fa, 0, erase_size);
   22a56:	462a      	mov	r2, r5
   22a58:	f009 fd9e 	bl	2c598 <flash_area_erase>
	if (rc != 0) {
   22a5c:	4604      	mov	r4, r0
   22a5e:	2800      	cmp	r0, #0
   22a60:	d1ec      	bne.n	22a3c <img_mgmt_impl_erase_image_data+0x30>
	off = BOOT_TRAILER_IMG_STATUS_OFFS(fa);
   22a62:	9b00      	ldr	r3, [sp, #0]
   22a64:	6899      	ldr	r1, [r3, #8]
   22a66:	3920      	subs	r1, #32
	if (off >= erase_size) {
   22a68:	42a9      	cmp	r1, r5
   22a6a:	d3e8      	bcc.n	22a3e <img_mgmt_impl_erase_image_data+0x32>
		rc = flash_get_page_info_by_offs(dev, fa->fa_off + off, &page);
   22a6c:	685b      	ldr	r3, [r3, #4]
   22a6e:	4419      	add	r1, r3
   22a70:	aa01      	add	r2, sp, #4
   22a72:	4630      	mov	r0, r6
   22a74:	f00d fe8a 	bl	3078c <z_impl_flash_get_page_info_by_offs>
		off = page.start_offset - fa->fa_off;
   22a78:	9800      	ldr	r0, [sp, #0]
   22a7a:	9901      	ldr	r1, [sp, #4]
   22a7c:	6843      	ldr	r3, [r0, #4]
		erase_size = fa->fa_size - off;
   22a7e:	6882      	ldr	r2, [r0, #8]
		off = page.start_offset - fa->fa_off;
   22a80:	1ac9      	subs	r1, r1, r3
		rc = flash_area_erase(fa, off, erase_size);
   22a82:	1a52      	subs	r2, r2, r1
   22a84:	f009 fd88 	bl	2c598 <flash_area_erase>
		if (rc != 0) {
   22a88:	1e04      	subs	r4, r0, #0
   22a8a:	bf18      	it	ne
   22a8c:	2401      	movne	r4, #1
   22a8e:	e7d6      	b.n	22a3e <img_mgmt_impl_erase_image_data+0x32>
		rc = MGMT_ERR_EINVAL;
   22a90:	2403      	movs	r4, #3
   22a92:	e7d7      	b.n	22a44 <img_mgmt_impl_erase_image_data+0x38>
		rc = MGMT_ERR_EUNKNOWN;
   22a94:	2401      	movs	r4, #1
	return rc;
   22a96:	e7d5      	b.n	22a44 <img_mgmt_impl_erase_image_data+0x38>
   22a98:	20002978 	.word	0x20002978

00022a9c <img_mgmt_impl_upload_inspect>:
 *	   instead.
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
				 struct img_mgmt_upload_action *action, const char **errstr)
{
   22a9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   22a9e:	460c      	mov	r4, r1
   22aa0:	4605      	mov	r5, r0
	struct image_version cur_ver;
	uint8_t rem_bytes;
	bool empty;
	int rc;

	memset(action, 0, sizeof(*action));
   22aa2:	2100      	movs	r1, #0
{
   22aa4:	4616      	mov	r6, r2
	memset(action, 0, sizeof(*action));
   22aa6:	4620      	mov	r0, r4
   22aa8:	2218      	movs	r2, #24
   22aaa:	f00a f911 	bl	2ccd0 <memset>

	if (req->off == -1) {
   22aae:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   22ab2:	1c4b      	adds	r3, r1, #1
   22ab4:	bf08      	it	eq
   22ab6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   22aba:	d103      	bne.n	22ac4 <img_mgmt_impl_upload_inspect+0x28>
		/* Request did not include an `off` field. */
		*errstr = img_mgmt_err_str_hdr_malformed;
   22abc:	2300      	movs	r3, #0
   22abe:	6033      	str	r3, [r6, #0]
			*errstr = img_mgmt_err_str_magic_mismatch;
			return MGMT_ERR_EINVAL;
		}

		if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
			return MGMT_ERR_EINVAL;
   22ac0:	2003      	movs	r0, #3
   22ac2:	e01e      	b.n	22b02 <img_mgmt_impl_upload_inspect+0x66>
	if (req->off == 0) {
   22ac4:	ea50 0301 	orrs.w	r3, r0, r1
   22ac8:	d16e      	bne.n	22ba8 <img_mgmt_impl_upload_inspect+0x10c>
		if (req->data_len < sizeof(struct image_header)) {
   22aca:	69ab      	ldr	r3, [r5, #24]
   22acc:	2b1f      	cmp	r3, #31
   22ace:	d9f5      	bls.n	22abc <img_mgmt_impl_upload_inspect+0x20>
		if (req->size == -1) {
   22ad0:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   22ad4:	1c59      	adds	r1, r3, #1
   22ad6:	bf08      	it	eq
   22ad8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22adc:	d0ee      	beq.n	22abc <img_mgmt_impl_upload_inspect+0x20>
		action->size = req->size;
   22ade:	e9c4 2300 	strd	r2, r3, [r4]
		if (hdr->ih_magic != IMAGE_MAGIC) {
   22ae2:	6a2a      	ldr	r2, [r5, #32]
   22ae4:	4b41      	ldr	r3, [pc, #260]	; (22bec <img_mgmt_impl_upload_inspect+0x150>)
   22ae6:	429a      	cmp	r2, r3
   22ae8:	d1e8      	bne.n	22abc <img_mgmt_impl_upload_inspect+0x20>
		if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
   22aea:	69ea      	ldr	r2, [r5, #28]
   22aec:	2a20      	cmp	r2, #32
   22aee:	d8e7      	bhi.n	22ac0 <img_mgmt_impl_upload_inspect+0x24>
		 * If request includes proper data hash we can check whether there is
		 * upload in progress (interrupted due to e.g. link disconnection) with
		 * the same data hash so we can just resume it by simply including
		 * current upload offset in response.
		 */
		if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   22af0:	b94a      	cbnz	r2, 22b06 <img_mgmt_impl_upload_inspect+0x6a>
			    !memcmp(g_img_mgmt_state.data_sha, req->data_sha, req->data_sha_len)) {
				return 0;
			}
		}

		action->area_id = img_mgmt_get_unused_slot_area_id(req->image);
   22af2:	f00c fc0c 	bl	2f30e <img_mgmt_get_unused_slot_area_id.isra.0>
		if (action->area_id < 0) {
   22af6:	2800      	cmp	r0, #0
		action->area_id = img_mgmt_get_unused_slot_area_id(req->image);
   22af8:	60e0      	str	r0, [r4, #12]
		if (action->area_id < 0) {
   22afa:	da14      	bge.n	22b26 <img_mgmt_impl_upload_inspect+0x8a>
			/* No slot where to upload! */
			*errstr = img_mgmt_err_str_no_slot;
   22afc:	2300      	movs	r3, #0
   22afe:	6033      	str	r3, [r6, #0]
			return MGMT_ERR_ENOENT;
   22b00:	2005      	movs	r0, #5
		}
	}

	action->proceed = true;
	return 0;
}
   22b02:	b004      	add	sp, #16
   22b04:	bd70      	pop	{r4, r5, r6, pc}
		if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   22b06:	483a      	ldr	r0, [pc, #232]	; (22bf0 <img_mgmt_impl_upload_inspect+0x154>)
   22b08:	6803      	ldr	r3, [r0, #0]
   22b0a:	3301      	adds	r3, #1
   22b0c:	d0f1      	beq.n	22af2 <img_mgmt_impl_upload_inspect+0x56>
			if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   22b0e:	7b03      	ldrb	r3, [r0, #12]
   22b10:	429a      	cmp	r2, r3
   22b12:	d1ee      	bne.n	22af2 <img_mgmt_impl_upload_inspect+0x56>
			    !memcmp(g_img_mgmt_state.data_sha, req->data_sha, req->data_sha_len)) {
   22b14:	f505 7108 	add.w	r1, r5, #544	; 0x220
   22b18:	300d      	adds	r0, #13
   22b1a:	f00a f8a7 	bl	2cc6c <memcmp>
			if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   22b1e:	2800      	cmp	r0, #0
   22b20:	d1e7      	bne.n	22af2 <img_mgmt_impl_upload_inspect+0x56>
	return 0;
   22b22:	2000      	movs	r0, #0
   22b24:	e7ed      	b.n	22b02 <img_mgmt_impl_upload_inspect+0x66>
		if (req->upgrade) {
   22b26:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
   22b2a:	b1e3      	cbz	r3, 22b66 <img_mgmt_impl_upload_inspect+0xca>
			rc = img_mgmt_my_version(&cur_ver);
   22b2c:	a802      	add	r0, sp, #8
   22b2e:	f00c fca3 	bl	2f478 <img_mgmt_my_version>
			if (rc != 0) {
   22b32:	b108      	cbz	r0, 22b38 <img_mgmt_impl_upload_inspect+0x9c>
			return MGMT_ERR_EUNKNOWN;
   22b34:	2001      	movs	r0, #1
   22b36:	e7e4      	b.n	22b02 <img_mgmt_impl_upload_inspect+0x66>
	if (a->iv_major < b->iv_major) {
   22b38:	f89d 2008 	ldrb.w	r2, [sp, #8]
   22b3c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   22b40:	429a      	cmp	r2, r3
   22b42:	d310      	bcc.n	22b66 <img_mgmt_impl_upload_inspect+0xca>
	} else if (a->iv_major > b->iv_major) {
   22b44:	d80b      	bhi.n	22b5e <img_mgmt_impl_upload_inspect+0xc2>
	if (a->iv_minor < b->iv_minor) {
   22b46:	f89d 2009 	ldrb.w	r2, [sp, #9]
   22b4a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   22b4e:	429a      	cmp	r2, r3
   22b50:	d309      	bcc.n	22b66 <img_mgmt_impl_upload_inspect+0xca>
	} else if (a->iv_minor > b->iv_minor) {
   22b52:	d804      	bhi.n	22b5e <img_mgmt_impl_upload_inspect+0xc2>
	if (a->iv_revision < b->iv_revision) {
   22b54:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   22b58:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   22b5a:	429a      	cmp	r2, r3
   22b5c:	d303      	bcc.n	22b66 <img_mgmt_impl_upload_inspect+0xca>
				*errstr = img_mgmt_err_str_downgrade;
   22b5e:	2300      	movs	r3, #0
   22b60:	6033      	str	r3, [r6, #0]
				return MGMT_ERR_EBADSTATE;
   22b62:	2006      	movs	r0, #6
   22b64:	e7cd      	b.n	22b02 <img_mgmt_impl_upload_inspect+0x66>
		rc = zephyr_img_mgmt_flash_check_empty(action->area_id, &empty);
   22b66:	7b20      	ldrb	r0, [r4, #12]
   22b68:	f10d 0103 	add.w	r1, sp, #3
   22b6c:	f00c fb86 	bl	2f27c <zephyr_img_mgmt_flash_check_empty>
		if (rc) {
   22b70:	2800      	cmp	r0, #0
   22b72:	d1df      	bne.n	22b34 <img_mgmt_impl_upload_inspect+0x98>
		action->erase = !empty;
   22b74:	f89d 3003 	ldrb.w	r3, [sp, #3]
   22b78:	f083 0301 	eor.w	r3, r3, #1
   22b7c:	7463      	strb	r3, [r4, #17]
	if (req->off + req->data_len < action->size) {
   22b7e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	action->write_bytes = req->data_len;
   22b82:	69a9      	ldr	r1, [r5, #24]
   22b84:	60a1      	str	r1, [r4, #8]
	if (req->off + req->data_len < action->size) {
   22b86:	1852      	adds	r2, r2, r1
   22b88:	e9d4 0100 	ldrd	r0, r1, [r4]
   22b8c:	f143 0300 	adc.w	r3, r3, #0
   22b90:	428b      	cmp	r3, r1
   22b92:	bf08      	it	eq
   22b94:	4282      	cmpeq	r2, r0
   22b96:	d226      	bcs.n	22be6 <img_mgmt_impl_upload_inspect+0x14a>
		rc = flash_area_open(action->area_id, &fa);
   22b98:	7b20      	ldrb	r0, [r4, #12]
   22b9a:	a901      	add	r1, sp, #4
   22b9c:	f7fb fa14 	bl	1dfc8 <flash_area_open>
		if (rc) {
   22ba0:	b180      	cbz	r0, 22bc4 <img_mgmt_impl_upload_inspect+0x128>
			*errstr = img_mgmt_err_str_flash_open_failed;
   22ba2:	2300      	movs	r3, #0
   22ba4:	6033      	str	r3, [r6, #0]
   22ba6:	e7c5      	b.n	22b34 <img_mgmt_impl_upload_inspect+0x98>
		action->area_id = g_img_mgmt_state.area_id;
   22ba8:	4b11      	ldr	r3, [pc, #68]	; (22bf0 <img_mgmt_impl_upload_inspect+0x154>)
   22baa:	681a      	ldr	r2, [r3, #0]
   22bac:	60e2      	str	r2, [r4, #12]
		action->size = g_img_mgmt_state.size;
   22bae:	689a      	ldr	r2, [r3, #8]
   22bb0:	6022      	str	r2, [r4, #0]
   22bb2:	2200      	movs	r2, #0
   22bb4:	6062      	str	r2, [r4, #4]
		if (req->off != g_img_mgmt_state.off) {
   22bb6:	685a      	ldr	r2, [r3, #4]
   22bb8:	2300      	movs	r3, #0
   22bba:	4299      	cmp	r1, r3
   22bbc:	bf08      	it	eq
   22bbe:	4290      	cmpeq	r0, r2
   22bc0:	d1af      	bne.n	22b22 <img_mgmt_impl_upload_inspect+0x86>
   22bc2:	e7dc      	b.n	22b7e <img_mgmt_impl_upload_inspect+0xe2>
		rem_bytes = req->data_len % flash_area_align(fa);
   22bc4:	9801      	ldr	r0, [sp, #4]
   22bc6:	69ad      	ldr	r5, [r5, #24]
   22bc8:	f009 fd15 	bl	2c5f6 <flash_area_align>
   22bcc:	fbb5 f3f0 	udiv	r3, r5, r0
   22bd0:	fb03 5510 	mls	r5, r3, r0, r5
		flash_area_close(fa);
   22bd4:	9801      	ldr	r0, [sp, #4]
   22bd6:	f009 fc8f 	bl	2c4f8 <flash_area_close>
		if (rem_bytes) {
   22bda:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
			action->write_bytes -= rem_bytes;
   22bde:	bf1e      	ittt	ne
   22be0:	68a0      	ldrne	r0, [r4, #8]
   22be2:	1b45      	subne	r5, r0, r5
   22be4:	60a5      	strne	r5, [r4, #8]
	action->proceed = true;
   22be6:	2301      	movs	r3, #1
   22be8:	7423      	strb	r3, [r4, #16]
   22bea:	e79a      	b.n	22b22 <img_mgmt_impl_upload_inspect+0x86>
   22bec:	96f3b83d 	.word	0x96f3b83d
   22bf0:	20002978 	.word	0x20002978

00022bf4 <img_mgmt_upload_good_rsp>:
	return 0;
}

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
   22bf4:	b538      	push	{r3, r4, r5, lr}
	CborError err = CborNoError;

	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22bf6:	490e      	ldr	r1, [pc, #56]	; (22c30 <img_mgmt_upload_good_rsp+0x3c>)
{
   22bf8:	4605      	mov	r5, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22bfa:	f00c fc13 	bl	2f424 <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   22bfe:	2200      	movs	r2, #0
   22c00:	2300      	movs	r3, #0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22c02:	4604      	mov	r4, r0
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   22c04:	4628      	mov	r0, r5
   22c06:	f00e f983 	bl	30f10 <cbor_encode_int>
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   22c0a:	490a      	ldr	r1, [pc, #40]	; (22c34 <img_mgmt_upload_good_rsp+0x40>)
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   22c0c:	4304      	orrs	r4, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   22c0e:	4628      	mov	r0, r5
   22c10:	f00c fc08 	bl	2f424 <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   22c14:	4b08      	ldr	r3, [pc, #32]	; (22c38 <img_mgmt_upload_good_rsp+0x44>)
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   22c16:	4304      	orrs	r4, r0
	err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   22c18:	685a      	ldr	r2, [r3, #4]
   22c1a:	4628      	mov	r0, r5
   22c1c:	2300      	movs	r3, #0
   22c1e:	f00e f977 	bl	30f10 <cbor_encode_int>

	if (err != 0) {
   22c22:	ea54 0300 	orrs.w	r3, r4, r0
		return MGMT_ERR_ENOMEM;
	}

	return 0;
}
   22c26:	bf14      	ite	ne
   22c28:	2002      	movne	r0, #2
   22c2a:	2000      	moveq	r0, #0
   22c2c:	bd38      	pop	{r3, r4, r5, pc}
   22c2e:	bf00      	nop
   22c30:	00033253 	.word	0x00033253
   22c34:	00033256 	.word	0x00033256
   22c38:	20002978 	.word	0x20002978

00022c3c <img_mgmt_read_info>:
{
   22c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22c40:	b08b      	sub	sp, #44	; 0x2c
   22c42:	460c      	mov	r4, r1
	rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
   22c44:	f10d 0103 	add.w	r1, sp, #3
{
   22c48:	4606      	mov	r6, r0
   22c4a:	4617      	mov	r7, r2
   22c4c:	461d      	mov	r5, r3
	rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
   22c4e:	f00c fbc7 	bl	2f3e0 <img_mgmt_impl_erased_val>
	if (rc != 0) {
   22c52:	4601      	mov	r1, r0
   22c54:	b108      	cbz	r0, 22c5a <img_mgmt_read_info+0x1e>
		return MGMT_ERR_EUNKNOWN;
   22c56:	2001      	movs	r0, #1
   22c58:	e049      	b.n	22cee <img_mgmt_read_info+0xb2>
	rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof(hdr));
   22c5a:	2320      	movs	r3, #32
   22c5c:	aa02      	add	r2, sp, #8
   22c5e:	4630      	mov	r0, r6
   22c60:	f00c fb93 	bl	2f38a <img_mgmt_impl_read>
	if (rc != 0) {
   22c64:	2800      	cmp	r0, #0
   22c66:	d1f6      	bne.n	22c56 <img_mgmt_read_info+0x1a>
	if (ver != NULL) {
   22c68:	b12c      	cbz	r4, 22c76 <img_mgmt_read_info+0x3a>
		memset(ver, erased_val, sizeof(*ver));
   22c6a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   22c6e:	2208      	movs	r2, #8
   22c70:	4620      	mov	r0, r4
   22c72:	f00a f82d 	bl	2ccd0 <memset>
	if (hdr.ih_magic == IMAGE_MAGIC) {
   22c76:	9902      	ldr	r1, [sp, #8]
   22c78:	4b3a      	ldr	r3, [pc, #232]	; (22d64 <img_mgmt_read_info+0x128>)
   22c7a:	4299      	cmp	r1, r3
   22c7c:	d13a      	bne.n	22cf4 <img_mgmt_read_info+0xb8>
		if (ver != NULL) {
   22c7e:	b124      	cbz	r4, 22c8a <img_mgmt_read_info+0x4e>
			memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   22c80:	2208      	movs	r2, #8
   22c82:	a907      	add	r1, sp, #28
   22c84:	4620      	mov	r0, r4
   22c86:	f00a f818 	bl	2ccba <memcpy>
	if (flags != NULL) {
   22c8a:	b10d      	cbz	r5, 22c90 <img_mgmt_read_info+0x54>
		*flags = hdr.ih_flags;
   22c8c:	9b06      	ldr	r3, [sp, #24]
   22c8e:	602b      	str	r3, [r5, #0]
	data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   22c90:	9905      	ldr	r1, [sp, #20]
   22c92:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
   22c96:	2304      	movs	r3, #4
	data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   22c98:	440c      	add	r4, r1
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
   22c9a:	eb0d 0203 	add.w	r2, sp, r3
   22c9e:	4621      	mov	r1, r4
   22ca0:	4630      	mov	r0, r6
   22ca2:	f00c fb72 	bl	2f38a <img_mgmt_impl_read>
	if (rc != 0) {
   22ca6:	b940      	cbnz	r0, 22cba <img_mgmt_read_info+0x7e>
	if (tlv_info.it_magic != magic) {
   22ca8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   22cac:	f646 1308 	movw	r3, #26888	; 0x6908
   22cb0:	429a      	cmp	r2, r3
	*end_off = *start_off + tlv_info.it_tlv_tot;
   22cb2:	bf04      	itt	eq
   22cb4:	f8bd 3006 	ldrheq.w	r3, [sp, #6]
		data_off = data_end - sizeof(struct image_tlv_info);
   22cb8:	18e4      	addeq	r4, r4, r3
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
   22cba:	2304      	movs	r3, #4
   22cbc:	eb0d 0203 	add.w	r2, sp, r3
   22cc0:	4621      	mov	r1, r4
   22cc2:	4630      	mov	r0, r6
   22cc4:	f00c fb61 	bl	2f38a <img_mgmt_impl_read>
	if (rc != 0) {
   22cc8:	4605      	mov	r5, r0
   22cca:	2800      	cmp	r0, #0
   22ccc:	d1c3      	bne.n	22c56 <img_mgmt_read_info+0x1a>
	if (tlv_info.it_magic != magic) {
   22cce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   22cd2:	f646 1307 	movw	r3, #26887	; 0x6907
   22cd6:	429a      	cmp	r2, r3
   22cd8:	d1bd      	bne.n	22c56 <img_mgmt_read_info+0x1a>
	*end_off = *start_off + tlv_info.it_tlv_tot;
   22cda:	f8bd 8006 	ldrh.w	r8, [sp, #6]
	*start_off += sizeof(tlv_info);
   22cde:	3404      	adds	r4, #4
	*end_off = *start_off + tlv_info.it_tlv_tot;
   22ce0:	44a0      	add	r8, r4
	while (data_off + sizeof(tlv) <= data_end) {
   22ce2:	f104 0904 	add.w	r9, r4, #4
   22ce6:	45c1      	cmp	r9, r8
   22ce8:	d910      	bls.n	22d0c <img_mgmt_read_info+0xd0>
		return MGMT_ERR_EUNKNOWN;
   22cea:	f085 0001 	eor.w	r0, r5, #1
}
   22cee:	b00b      	add	sp, #44	; 0x2c
   22cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	erased_val_32 = ERASED_VAL_32(erased_val);
   22cf4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   22cf8:	0413      	lsls	r3, r2, #16
   22cfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   22cfe:	4313      	orrs	r3, r2
   22d00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	} else if (hdr.ih_magic == erased_val_32) {
   22d04:	4299      	cmp	r1, r3
   22d06:	d1a6      	bne.n	22c56 <img_mgmt_read_info+0x1a>
		return MGMT_ERR_ENOENT;
   22d08:	2005      	movs	r0, #5
   22d0a:	e7f0      	b.n	22cee <img_mgmt_read_info+0xb2>
		rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof(tlv));
   22d0c:	2304      	movs	r3, #4
   22d0e:	eb0d 0203 	add.w	r2, sp, r3
   22d12:	4621      	mov	r1, r4
   22d14:	4630      	mov	r0, r6
   22d16:	f00c fb38 	bl	2f38a <img_mgmt_impl_read>
		if (rc != 0) {
   22d1a:	2800      	cmp	r0, #0
   22d1c:	d19b      	bne.n	22c56 <img_mgmt_read_info+0x1a>
		if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   22d1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   22d22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22d26:	2aff      	cmp	r2, #255	; 0xff
   22d28:	d108      	bne.n	22d3c <img_mgmt_read_info+0x100>
   22d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22d2e:	4293      	cmp	r3, r2
   22d30:	d091      	beq.n	22c56 <img_mgmt_read_info+0x1a>
			data_off += sizeof(tlv) + tlv.it_len;
   22d32:	3304      	adds	r3, #4
   22d34:	eb03 0904 	add.w	r9, r3, r4
		hash_found = true;
   22d38:	464c      	mov	r4, r9
   22d3a:	e7d2      	b.n	22ce2 <img_mgmt_read_info+0xa6>
		if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   22d3c:	2a10      	cmp	r2, #16
   22d3e:	d1f8      	bne.n	22d32 <img_mgmt_read_info+0xf6>
   22d40:	2b20      	cmp	r3, #32
   22d42:	d1f6      	bne.n	22d32 <img_mgmt_read_info+0xf6>
		if (hash_found) {
   22d44:	2d00      	cmp	r5, #0
   22d46:	d186      	bne.n	22c56 <img_mgmt_read_info+0x1a>
		if (hash != NULL) {
   22d48:	b157      	cbz	r7, 22d60 <img_mgmt_read_info+0x124>
			if (data_off + IMAGE_HASH_LEN > data_end) {
   22d4a:	3424      	adds	r4, #36	; 0x24
   22d4c:	4544      	cmp	r4, r8
   22d4e:	d882      	bhi.n	22c56 <img_mgmt_read_info+0x1a>
			rc = img_mgmt_impl_read(image_slot, data_off, hash,
   22d50:	463a      	mov	r2, r7
   22d52:	4649      	mov	r1, r9
   22d54:	4630      	mov	r0, r6
   22d56:	f00c fb18 	bl	2f38a <img_mgmt_impl_read>
			if (rc != 0) {
   22d5a:	2800      	cmp	r0, #0
   22d5c:	f47f af7b 	bne.w	22c56 <img_mgmt_read_info+0x1a>
		hash_found = true;
   22d60:	2501      	movs	r5, #1
   22d62:	e7e9      	b.n	22d38 <img_mgmt_read_info+0xfc>
   22d64:	96f3b83d 	.word	0x96f3b83d

00022d68 <img_mgmt_dfu_stopped>:
}

void
img_mgmt_dfu_stopped(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
   22d68:	4b03      	ldr	r3, [pc, #12]	; (22d78 <img_mgmt_dfu_stopped+0x10>)
   22d6a:	681b      	ldr	r3, [r3, #0]
   22d6c:	b113      	cbz	r3, 22d74 <img_mgmt_dfu_stopped+0xc>
   22d6e:	685b      	ldr	r3, [r3, #4]
   22d70:	b103      	cbz	r3, 22d74 <img_mgmt_dfu_stopped+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
   22d72:	4718      	bx	r3
	}
}
   22d74:	4770      	bx	lr
   22d76:	bf00      	nop
   22d78:	200029a8 	.word	0x200029a8

00022d7c <img_mgmt_erase>:
{
   22d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = img_mgmt_read_info(1, &ver, NULL, NULL);
   22d7e:	2300      	movs	r3, #0
{
   22d80:	4604      	mov	r4, r0
	rc = img_mgmt_read_info(1, &ver, NULL, NULL);
   22d82:	461a      	mov	r2, r3
   22d84:	4669      	mov	r1, sp
   22d86:	2001      	movs	r0, #1
   22d88:	f7ff ff58 	bl	22c3c <img_mgmt_read_info>
	if (rc == 0) {
   22d8c:	b1b0      	cbz	r0, 22dbc <img_mgmt_erase+0x40>
	rc = img_mgmt_impl_erase_slot();
   22d8e:	f00c face 	bl	2f32e <img_mgmt_impl_erase_slot>
	if (!rc) {
   22d92:	4605      	mov	r5, r0
   22d94:	b908      	cbnz	r0, 22d9a <img_mgmt_erase+0x1e>
		img_mgmt_dfu_stopped();
   22d96:	f7ff ffe7 	bl	22d68 <img_mgmt_dfu_stopped>
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22d9a:	490c      	ldr	r1, [pc, #48]	; (22dcc <img_mgmt_erase+0x50>)
   22d9c:	4620      	mov	r0, r4
   22d9e:	f00c fb41 	bl	2f424 <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, rc);
   22da2:	17eb      	asrs	r3, r5, #31
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22da4:	4606      	mov	r6, r0
	err |= cbor_encode_int(&ctxt->encoder, rc);
   22da6:	462a      	mov	r2, r5
   22da8:	4620      	mov	r0, r4
   22daa:	f00e f8b1 	bl	30f10 <cbor_encode_int>
		return MGMT_ERR_ENOMEM;
   22dae:	ea56 0300 	orrs.w	r3, r6, r0
   22db2:	bf0c      	ite	eq
   22db4:	2000      	moveq	r0, #0
   22db6:	2002      	movne	r0, #2
}
   22db8:	b002      	add	sp, #8
   22dba:	bd70      	pop	{r4, r5, r6, pc}
		if (img_mgmt_slot_in_use(1)) {
   22dbc:	2001      	movs	r0, #1
   22dbe:	f00c fb9d 	bl	2f4fc <img_mgmt_slot_in_use>
   22dc2:	2800      	cmp	r0, #0
   22dc4:	d0e3      	beq.n	22d8e <img_mgmt_erase+0x12>
			return MGMT_ERR_EBADSTATE;
   22dc6:	2006      	movs	r0, #6
   22dc8:	e7f6      	b.n	22db8 <img_mgmt_erase+0x3c>
   22dca:	bf00      	nop
   22dcc:	00033253 	.word	0x00033253

00022dd0 <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
   22dd0:	4b03      	ldr	r3, [pc, #12]	; (22de0 <img_mgmt_dfu_started+0x10>)
   22dd2:	681b      	ldr	r3, [r3, #0]
   22dd4:	b113      	cbz	r3, 22ddc <img_mgmt_dfu_started+0xc>
   22dd6:	681b      	ldr	r3, [r3, #0]
   22dd8:	b103      	cbz	r3, 22ddc <img_mgmt_dfu_started+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_started_cb();
   22dda:	4718      	bx	r3
	}
}
   22ddc:	4770      	bx	lr
   22dde:	bf00      	nop
   22de0:	200029a8 	.word	0x200029a8

00022de4 <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
   22de4:	4b03      	ldr	r3, [pc, #12]	; (22df4 <img_mgmt_dfu_pending+0x10>)
   22de6:	681b      	ldr	r3, [r3, #0]
   22de8:	b113      	cbz	r3, 22df0 <img_mgmt_dfu_pending+0xc>
   22dea:	689b      	ldr	r3, [r3, #8]
   22dec:	b103      	cbz	r3, 22df0 <img_mgmt_dfu_pending+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
   22dee:	4718      	bx	r3
	}
}
   22df0:	4770      	bx	lr
   22df2:	bf00      	nop
   22df4:	200029a8 	.word	0x200029a8

00022df8 <img_mgmt_upload>:
{
   22df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22dfc:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
	struct img_mgmt_upload_req req = {
   22e00:	ae64      	add	r6, sp, #400	; 0x190
{
   22e02:	4607      	mov	r7, r0
	struct img_mgmt_upload_req req = {
   22e04:	f44f 7212 	mov.w	r2, #584	; 0x248
   22e08:	2100      	movs	r1, #0
   22e0a:	4630      	mov	r0, r6
   22e0c:	f009 ff60 	bl	2ccd0 <memset>
   22e10:	f04f 33ff 	mov.w	r3, #4294967295
   22e14:	f04f 32ff 	mov.w	r2, #4294967295
   22e18:	e9c6 2302 	strd	r2, r3, [r6, #8]
   22e1c:	e9c6 2304 	strd	r2, r3, [r6, #16]
	const struct cbor_attr_t off_attr[] = {
   22e20:	2100      	movs	r1, #0
   22e22:	f44f 72a8 	mov.w	r2, #336	; 0x150
   22e26:	a810      	add	r0, sp, #64	; 0x40
   22e28:	f009 ff52 	bl	2ccd0 <memset>
   22e2c:	4b6c      	ldr	r3, [pc, #432]	; (22fe0 <img_mgmt_upload+0x1e8>)
   22e2e:	9310      	str	r3, [sp, #64]	; 0x40
   22e30:	2301      	movs	r3, #1
   22e32:	496c      	ldr	r1, [pc, #432]	; (22fe4 <img_mgmt_upload+0x1ec>)
   22e34:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   22e38:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
   22e3c:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
   22e40:	4b69      	ldr	r3, [pc, #420]	; (22fe8 <img_mgmt_upload+0x1f0>)
   22e42:	911c      	str	r1, [sp, #112]	; 0x70
   22e44:	9340      	str	r3, [sp, #256]	; 0x100
   22e46:	a96a      	add	r1, sp, #424	; 0x1a8
   22e48:	ab6b      	add	r3, sp, #428	; 0x1ac
   22e4a:	911f      	str	r1, [sp, #124]	; 0x7c
   22e4c:	9343      	str	r3, [sp, #268]	; 0x10c
   22e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
   22e52:	2320      	movs	r3, #32
   22e54:	9126      	str	r1, [sp, #152]	; 0x98
   22e56:	934a      	str	r3, [sp, #296]	; 0x128
   22e58:	4964      	ldr	r1, [pc, #400]	; (22fec <img_mgmt_upload+0x1f4>)
   22e5a:	4b65      	ldr	r3, [pc, #404]	; (22ff0 <img_mgmt_upload+0x1f8>)
   22e5c:	9128      	str	r1, [sp, #160]	; 0xa0
   22e5e:	934c      	str	r3, [sp, #304]	; 0x130
   22e60:	a968      	add	r1, sp, #416	; 0x1a0
   22e62:	2305      	movs	r3, #5
   22e64:	2202      	movs	r2, #2
   22e66:	912a      	str	r1, [sp, #168]	; 0xa8
   22e68:	f88d 3134 	strb.w	r3, [sp, #308]	; 0x134
   22e6c:	4961      	ldr	r1, [pc, #388]	; (22ff4 <img_mgmt_upload+0x1fc>)
   22e6e:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
   22e72:	abf4      	add	r3, sp, #976	; 0x3d0
   22e74:	2403      	movs	r4, #3
   22e76:	f50d 78d8 	add.w	r8, sp, #432	; 0x1b0
   22e7a:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
   22e7e:	9134      	str	r1, [sp, #208]	; 0xd0
   22e80:	f88d 20d4 	strb.w	r2, [sp, #212]	; 0xd4
   22e84:	f50d 796c 	add.w	r9, sp, #944	; 0x3b0
   22e88:	aa66      	add	r2, sp, #408	; 0x198
   22e8a:	934e      	str	r3, [sp, #312]	; 0x138
	rc = cbor_read_object(&ctxt->it, off_attr);
   22e8c:	a910      	add	r1, sp, #64	; 0x40
	const char *errstr = NULL;
   22e8e:	2300      	movs	r3, #0
	rc = cbor_read_object(&ctxt->it, off_attr);
   22e90:	f107 001c 	add.w	r0, r7, #28
	const struct cbor_attr_t off_attr[] = {
   22e94:	9612      	str	r6, [sp, #72]	; 0x48
   22e96:	f88d 4074 	strb.w	r4, [sp, #116]	; 0x74
   22e9a:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
   22e9e:	9236      	str	r2, [sp, #216]	; 0xd8
   22ea0:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
   22ea4:	f8cd 9108 	str.w	r9, [sp, #264]	; 0x108
	const char *errstr = NULL;
   22ea8:	9301      	str	r3, [sp, #4]
	rc = cbor_read_object(&ctxt->it, off_attr);
   22eaa:	f00c f9e3 	bl	2f274 <cbor_read_object>
	if (rc != 0) {
   22eae:	b948      	cbnz	r0, 22ec4 <img_mgmt_upload+0xcc>
	rc = img_mgmt_impl_upload_inspect(&req, &action, &errstr);
   22eb0:	aa01      	add	r2, sp, #4
   22eb2:	a902      	add	r1, sp, #8
   22eb4:	4630      	mov	r0, r6
   22eb6:	f7ff fdf1 	bl	22a9c <img_mgmt_impl_upload_inspect>
	if (rc != 0) {
   22eba:	4605      	mov	r5, r0
   22ebc:	b138      	cbz	r0, 22ece <img_mgmt_upload+0xd6>
		img_mgmt_dfu_stopped();
   22ebe:	f7ff ff53 	bl	22d68 <img_mgmt_dfu_stopped>
		return rc;
   22ec2:	462c      	mov	r4, r5
}
   22ec4:	4620      	mov	r0, r4
   22ec6:	f50d 7d77 	add.w	sp, sp, #988	; 0x3dc
   22eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!action.proceed) {
   22ece:	f89d 3018 	ldrb.w	r3, [sp, #24]
   22ed2:	b923      	cbnz	r3, 22ede <img_mgmt_upload+0xe6>
	return img_mgmt_upload_good_rsp(ctxt);
   22ed4:	4638      	mov	r0, r7
   22ed6:	f7ff fe8d 	bl	22bf4 <img_mgmt_upload_good_rsp>
   22eda:	4604      	mov	r4, r0
   22edc:	e7f2      	b.n	22ec4 <img_mgmt_upload+0xcc>
	if (img_mgmt_upload_cb != NULL) {
   22ede:	4b46      	ldr	r3, [pc, #280]	; (22ff8 <img_mgmt_upload+0x200>)
   22ee0:	681b      	ldr	r3, [r3, #0]
   22ee2:	b1cb      	cbz	r3, 22f18 <img_mgmt_upload+0x120>
		rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
   22ee4:	4a45      	ldr	r2, [pc, #276]	; (22ffc <img_mgmt_upload+0x204>)
   22ee6:	9902      	ldr	r1, [sp, #8]
   22ee8:	6812      	ldr	r2, [r2, #0]
   22eea:	68b0      	ldr	r0, [r6, #8]
   22eec:	4798      	blx	r3
		if (rc != 0) {
   22eee:	4604      	mov	r4, r0
   22ef0:	b190      	cbz	r0, 22f18 <img_mgmt_upload+0x120>
			errstr = img_mgmt_err_str_app_reject;
   22ef2:	9501      	str	r5, [sp, #4]
	if (is_first) {
   22ef4:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   22ef8:	4313      	orrs	r3, r2
   22efa:	d15a      	bne.n	22fb2 <img_mgmt_upload+0x1ba>
		return img_mgmt_impl_log_upload_start(status);
   22efc:	4620      	mov	r0, r4
   22efe:	f00c fa89 	bl	2f414 <img_mgmt_impl_log_upload_start>
	mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
   22f02:	2201      	movs	r2, #1
   22f04:	466b      	mov	r3, sp
   22f06:	4611      	mov	r1, r2
   22f08:	2002      	movs	r0, #2
   22f0a:	f000 fa3f 	bl	2338c <mgmt_evt>
	if (rc != 0) {
   22f0e:	2c00      	cmp	r4, #0
   22f10:	d0e0      	beq.n	22ed4 <img_mgmt_upload+0xdc>
		img_mgmt_dfu_stopped();
   22f12:	f7ff ff29 	bl	22d68 <img_mgmt_dfu_stopped>
		return img_mgmt_error_rsp(ctxt, rc, errstr);
   22f16:	e7d5      	b.n	22ec4 <img_mgmt_upload+0xcc>
	g_img_mgmt_state.area_id = action.area_id;
   22f18:	4d39      	ldr	r5, [pc, #228]	; (23000 <img_mgmt_upload+0x208>)
   22f1a:	9b05      	ldr	r3, [sp, #20]
   22f1c:	602b      	str	r3, [r5, #0]
	g_img_mgmt_state.size = action.size;
   22f1e:	9b02      	ldr	r3, [sp, #8]
   22f20:	60ab      	str	r3, [r5, #8]
	if (req.off == 0) {
   22f22:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   22f26:	4313      	orrs	r3, r2
   22f28:	d120      	bne.n	22f6c <img_mgmt_upload+0x174>
		g_img_mgmt_state.off = 0;
   22f2a:	2400      	movs	r4, #0
   22f2c:	606c      	str	r4, [r5, #4]
		img_mgmt_dfu_started();
   22f2e:	f7ff ff4f 	bl	22dd0 <img_mgmt_dfu_started>
		g_img_mgmt_state.data_sha_len = req.data_sha_len;
   22f32:	69f2      	ldr	r2, [r6, #28]
   22f34:	732a      	strb	r2, [r5, #12]
		memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   22f36:	4649      	mov	r1, r9
   22f38:	f105 000d 	add.w	r0, r5, #13
		cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
   22f3c:	9400      	str	r4, [sp, #0]
		memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   22f3e:	f009 febc 	bl	2ccba <memcpy>
		memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
   22f42:	69f2      	ldr	r2, [r6, #28]
   22f44:	f102 000d 	add.w	r0, r2, #13
   22f48:	4621      	mov	r1, r4
   22f4a:	f1c2 0220 	rsb	r2, r2, #32
   22f4e:	4428      	add	r0, r5
   22f50:	f009 febe 	bl	2ccd0 <memset>
		if (action.erase) {
   22f54:	f89d 3019 	ldrb.w	r3, [sp, #25]
   22f58:	b153      	cbz	r3, 22f70 <img_mgmt_upload+0x178>
			rc = img_mgmt_impl_erase_image_data(0, req.size);
   22f5a:	6931      	ldr	r1, [r6, #16]
   22f5c:	4620      	mov	r0, r4
   22f5e:	f7ff fd55 	bl	22a0c <img_mgmt_impl_erase_image_data>
			if (rc != 0) {
   22f62:	b128      	cbz	r0, 22f70 <img_mgmt_upload+0x178>
				errstr = img_mgmt_err_str_flash_erase_failed;
   22f64:	2300      	movs	r3, #0
   22f66:	9301      	str	r3, [sp, #4]
				rc = MGMT_ERR_EUNKNOWN;
   22f68:	2401      	movs	r4, #1
				goto end;
   22f6a:	e7c3      	b.n	22ef4 <img_mgmt_upload+0xfc>
		cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
   22f6c:	2301      	movs	r3, #1
   22f6e:	9300      	str	r3, [sp, #0]
	if (req.data_len != 0) {
   22f70:	69b3      	ldr	r3, [r6, #24]
   22f72:	b90b      	cbnz	r3, 22f78 <img_mgmt_upload+0x180>
				rc = MGMT_ERR_EUNKNOWN;
   22f74:	2400      	movs	r4, #0
   22f76:	e7bd      	b.n	22ef4 <img_mgmt_upload+0xfc>
		if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   22f78:	686a      	ldr	r2, [r5, #4]
		rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes,
   22f7a:	68b0      	ldr	r0, [r6, #8]
		if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   22f7c:	4413      	add	r3, r2
   22f7e:	68aa      	ldr	r2, [r5, #8]
		rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes,
   22f80:	1a9a      	subs	r2, r3, r2
   22f82:	4253      	negs	r3, r2
   22f84:	4153      	adcs	r3, r2
   22f86:	4641      	mov	r1, r8
   22f88:	9a04      	ldr	r2, [sp, #16]
   22f8a:	f7ff fd03 	bl	22994 <img_mgmt_impl_write_image_data>
		if (rc != 0) {
   22f8e:	4604      	mov	r4, r0
   22f90:	2800      	cmp	r0, #0
   22f92:	d1e7      	bne.n	22f64 <img_mgmt_upload+0x16c>
			g_img_mgmt_state.off += action.write_bytes;
   22f94:	686b      	ldr	r3, [r5, #4]
   22f96:	9a04      	ldr	r2, [sp, #16]
   22f98:	4413      	add	r3, r2
			if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   22f9a:	68aa      	ldr	r2, [r5, #8]
			g_img_mgmt_state.off += action.write_bytes;
   22f9c:	606b      	str	r3, [r5, #4]
			if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   22f9e:	4293      	cmp	r3, r2
   22fa0:	d1e8      	bne.n	22f74 <img_mgmt_upload+0x17c>
				img_mgmt_dfu_pending();
   22fa2:	f7ff ff1f 	bl	22de4 <img_mgmt_dfu_pending>
				cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_COMPLETE;
   22fa6:	2302      	movs	r3, #2
   22fa8:	9300      	str	r3, [sp, #0]
				g_img_mgmt_state.area_id = -1;
   22faa:	f04f 33ff 	mov.w	r3, #4294967295
   22fae:	602b      	str	r3, [r5, #0]
   22fb0:	e7a0      	b.n	22ef4 <img_mgmt_upload+0xfc>
	img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   22fb2:	4b13      	ldr	r3, [pc, #76]	; (23000 <img_mgmt_upload+0x208>)
	if (is_last || status != 0) {
   22fb4:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
   22fb8:	429a      	cmp	r2, r3
   22fba:	d001      	beq.n	22fc0 <img_mgmt_upload+0x1c8>
   22fbc:	2c00      	cmp	r4, #0
   22fbe:	d0a0      	beq.n	22f02 <img_mgmt_upload+0x10a>
		rc = img_mgmt_read_info(1, NULL, hash, NULL);
   22fc0:	ad08      	add	r5, sp, #32
   22fc2:	2300      	movs	r3, #0
   22fc4:	4619      	mov	r1, r3
   22fc6:	462a      	mov	r2, r5
   22fc8:	2001      	movs	r0, #1
   22fca:	f7ff fe37 	bl	22c3c <img_mgmt_read_info>
			hashp = hash;
   22fce:	2800      	cmp	r0, #0
		return img_mgmt_impl_log_upload_done(status, hashp);
   22fd0:	bf0c      	ite	eq
   22fd2:	4629      	moveq	r1, r5
   22fd4:	2100      	movne	r1, #0
   22fd6:	4620      	mov	r0, r4
   22fd8:	f00c fa1e 	bl	2f418 <img_mgmt_impl_log_upload_done>
   22fdc:	e791      	b.n	22f02 <img_mgmt_upload+0x10a>
   22fde:	bf00      	nop
   22fe0:	0003325a 	.word	0x0003325a
   22fe4:	00033260 	.word	0x00033260
   22fe8:	00033269 	.word	0x00033269
   22fec:	00033265 	.word	0x00033265
   22ff0:	0003326d 	.word	0x0003326d
   22ff4:	00033256 	.word	0x00033256
   22ff8:	200029b0 	.word	0x200029b0
   22ffc:	200029ac 	.word	0x200029ac
   23000:	20002978 	.word	0x20002978

00023004 <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
   23004:	4b03      	ldr	r3, [pc, #12]	; (23014 <img_mgmt_dfu_confirmed+0x10>)
   23006:	681b      	ldr	r3, [r3, #0]
   23008:	b113      	cbz	r3, 23010 <img_mgmt_dfu_confirmed+0xc>
   2300a:	68db      	ldr	r3, [r3, #12]
   2300c:	b103      	cbz	r3, 23010 <img_mgmt_dfu_confirmed+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
   2300e:	4718      	bx	r3
	}
}
   23010:	4770      	bx	lr
   23012:	bf00      	nop
   23014:	200029a8 	.word	0x200029a8

00023018 <img_mgmt_register_group>:


void
img_mgmt_register_group(void)
{
	mgmt_register_group(&img_mgmt_group);
   23018:	4801      	ldr	r0, [pc, #4]	; (23020 <img_mgmt_register_group+0x8>)
   2301a:	f000 b97b 	b.w	23314 <mgmt_register_group>
   2301e:	bf00      	nop
   23020:	200006c4 	.word	0x200006c4

00023024 <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
   23024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t state_flags;
	int rc;
	int i;

	err = 0;
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
   23028:	495a      	ldr	r1, [pc, #360]	; (23194 <img_mgmt_state_read+0x170>)

#if IMG_MGMT_UPDATABLE_IMAGE_NUMBER > 1
		err |= cbor_encode_text_stringz(&image, "image");
		err |= cbor_encode_int(&image, i >> 1);
#endif
		err |= cbor_encode_text_stringz(&image, "slot");
   2302a:	4f5b      	ldr	r7, [pc, #364]	; (23198 <img_mgmt_state_read+0x174>)
		err |= cbor_encode_int(&image, i % 2);

		err |= cbor_encode_text_stringz(&image, "version");
   2302c:	f8df a184 	ldr.w	sl, [pc, #388]	; 231b4 <img_mgmt_state_read+0x190>
		img_mgmt_ver_str(&ver, vers_str);
		err |= cbor_encode_text_stringz(&image, vers_str);

		err |= cbor_encode_text_stringz(&image, "hash");
   23030:	f8df b184 	ldr.w	fp, [pc, #388]	; 231b8 <img_mgmt_state_read+0x194>
{
   23034:	b09d      	sub	sp, #116	; 0x74
   23036:	4606      	mov	r6, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
   23038:	f00c fa24 	bl	2f484 <cbor_encode_text_stringz>
	err |= cbor_encoder_create_array(&ctxt->encoder, &images, CborIndefiniteLength);
   2303c:	f04f 32ff 	mov.w	r2, #4294967295
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
   23040:	4604      	mov	r4, r0
	err |= cbor_encoder_create_array(&ctxt->encoder, &images, CborIndefiniteLength);
   23042:	a905      	add	r1, sp, #20
   23044:	4630      	mov	r0, r6
   23046:	f00d ffa4 	bl	30f92 <cbor_encoder_create_array>
   2304a:	f04f 0800 	mov.w	r8, #0
   2304e:	4304      	orrs	r4, r0
   23050:	f04f 0900 	mov.w	r9, #0
		rc = img_mgmt_read_info(i, &ver, hash, &flags);
   23054:	ab02      	add	r3, sp, #8
   23056:	aa14      	add	r2, sp, #80	; 0x50
   23058:	a903      	add	r1, sp, #12
   2305a:	4640      	mov	r0, r8
   2305c:	f7ff fdee 	bl	22c3c <img_mgmt_read_info>
		if (rc != 0) {
   23060:	2800      	cmp	r0, #0
   23062:	d174      	bne.n	2314e <img_mgmt_state_read+0x12a>
		state_flags = img_mgmt_state_flags(i);
   23064:	4640      	mov	r0, r8
   23066:	f00c fa1a 	bl	2f49e <img_mgmt_state_flags>
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
   2306a:	f04f 32ff 	mov.w	r2, #4294967295
		state_flags = img_mgmt_state_flags(i);
   2306e:	4605      	mov	r5, r0
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
   23070:	a909      	add	r1, sp, #36	; 0x24
   23072:	a805      	add	r0, sp, #20
   23074:	f00d ff90 	bl	30f98 <cbor_encoder_create_map>
		err |= cbor_encode_text_stringz(&image, "slot");
   23078:	4639      	mov	r1, r7
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
   2307a:	9001      	str	r0, [sp, #4]
		err |= cbor_encode_text_stringz(&image, "slot");
   2307c:	a809      	add	r0, sp, #36	; 0x24
   2307e:	f00c fa01 	bl	2f484 <cbor_encode_text_stringz>
   23082:	9b01      	ldr	r3, [sp, #4]
   23084:	4318      	orrs	r0, r3
		err |= cbor_encode_int(&image, i % 2);
   23086:	4642      	mov	r2, r8
   23088:	464b      	mov	r3, r9
		err |= cbor_encode_text_stringz(&image, "slot");
   2308a:	4304      	orrs	r4, r0
		err |= cbor_encode_int(&image, i % 2);
   2308c:	a809      	add	r0, sp, #36	; 0x24
   2308e:	f00d ff3f 	bl	30f10 <cbor_encode_int>
		err |= cbor_encode_text_stringz(&image, "version");
   23092:	4651      	mov	r1, sl
		err |= cbor_encode_int(&image, i % 2);
   23094:	4304      	orrs	r4, r0
		err |= cbor_encode_text_stringz(&image, "version");
   23096:	a809      	add	r0, sp, #36	; 0x24
   23098:	f00c f9f4 	bl	2f484 <cbor_encode_text_stringz>
		img_mgmt_ver_str(&ver, vers_str);
   2309c:	a90d      	add	r1, sp, #52	; 0x34
		err |= cbor_encode_text_stringz(&image, "version");
   2309e:	4304      	orrs	r4, r0
		img_mgmt_ver_str(&ver, vers_str);
   230a0:	a803      	add	r0, sp, #12
   230a2:	f00c fa71 	bl	2f588 <img_mgmt_ver_str>
		err |= cbor_encode_text_stringz(&image, vers_str);
   230a6:	a90d      	add	r1, sp, #52	; 0x34
   230a8:	a809      	add	r0, sp, #36	; 0x24
   230aa:	f00c f9eb 	bl	2f484 <cbor_encode_text_stringz>
		err |= cbor_encode_text_stringz(&image, "hash");
   230ae:	4659      	mov	r1, fp
		err |= cbor_encode_text_stringz(&image, vers_str);
   230b0:	4304      	orrs	r4, r0
		err |= cbor_encode_text_stringz(&image, "hash");
   230b2:	a809      	add	r0, sp, #36	; 0x24
   230b4:	f00c f9e6 	bl	2f484 <cbor_encode_text_stringz>
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   230b8:	2220      	movs	r2, #32
		err |= cbor_encode_text_stringz(&image, "hash");
   230ba:	4304      	orrs	r4, r0
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   230bc:	a914      	add	r1, sp, #80	; 0x50
   230be:	a809      	add	r0, sp, #36	; 0x24
   230c0:	f00d ff45 	bl	30f4e <cbor_encode_byte_string>

		if (!IMG_MGMT_FRUGAL_LIST || !(flags & IMAGE_F_NON_BOOTABLE)) {
			err |= cbor_encode_text_stringz(&image, "bootable");
   230c4:	4935      	ldr	r1, [pc, #212]	; (2319c <img_mgmt_state_read+0x178>)
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   230c6:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "bootable");
   230c8:	a809      	add	r0, sp, #36	; 0x24
   230ca:	f00c f9db 	bl	2f484 <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   230ce:	9902      	ldr	r1, [sp, #8]
   230d0:	f081 0110 	eor.w	r1, r1, #16
   230d4:	f3c1 1100 	ubfx	r1, r1, #4, #1
			err |= cbor_encode_text_stringz(&image, "bootable");
   230d8:	4304      	orrs	r4, r0
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API int cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   230da:	3114      	adds	r1, #20
   230dc:	a809      	add	r0, sp, #36	; 0x24
   230de:	f00d ff25 	bl	30f2c <cbor_encode_simple_value>
		}

		if (!IMG_MGMT_FRUGAL_LIST || (state_flags & IMG_MGMT_STATE_F_PENDING)) {
			err |= cbor_encode_text_stringz(&image, "pending");
   230e2:	492f      	ldr	r1, [pc, #188]	; (231a0 <img_mgmt_state_read+0x17c>)
			err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   230e4:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "pending");
   230e6:	a809      	add	r0, sp, #36	; 0x24
   230e8:	f00c f9cc 	bl	2f484 <cbor_encode_text_stringz>
   230ec:	f005 0101 	and.w	r1, r5, #1
   230f0:	4304      	orrs	r4, r0
   230f2:	3114      	adds	r1, #20
   230f4:	a809      	add	r0, sp, #36	; 0x24
   230f6:	f00d ff19 	bl	30f2c <cbor_encode_simple_value>
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_PENDING);
		}

		if (!IMG_MGMT_FRUGAL_LIST ||
			(state_flags & IMG_MGMT_STATE_F_CONFIRMED)) {
			err |= cbor_encode_text_stringz(&image, "confirmed");
   230fa:	492a      	ldr	r1, [pc, #168]	; (231a4 <img_mgmt_state_read+0x180>)
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_PENDING);
   230fc:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "confirmed");
   230fe:	a809      	add	r0, sp, #36	; 0x24
   23100:	f00c f9c0 	bl	2f484 <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image,
   23104:	f3c5 0140 	ubfx	r1, r5, #1, #1
			err |= cbor_encode_text_stringz(&image, "confirmed");
   23108:	4304      	orrs	r4, r0
   2310a:	3114      	adds	r1, #20
   2310c:	a809      	add	r0, sp, #36	; 0x24
   2310e:	f00d ff0d 	bl	30f2c <cbor_encode_simple_value>
						   state_flags & IMG_MGMT_STATE_F_CONFIRMED);
		}

		if (!IMG_MGMT_FRUGAL_LIST || (state_flags & IMG_MGMT_STATE_F_ACTIVE)) {
			err |= cbor_encode_text_stringz(&image, "active");
   23112:	4925      	ldr	r1, [pc, #148]	; (231a8 <img_mgmt_state_read+0x184>)
			err |= cbor_encode_boolean(&image,
   23114:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "active");
   23116:	a809      	add	r0, sp, #36	; 0x24
   23118:	f00c f9b4 	bl	2f484 <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_ACTIVE);
   2311c:	f3c5 0180 	ubfx	r1, r5, #2, #1
			err |= cbor_encode_text_stringz(&image, "active");
   23120:	4304      	orrs	r4, r0
   23122:	3114      	adds	r1, #20
   23124:	a809      	add	r0, sp, #36	; 0x24
   23126:	f00d ff01 	bl	30f2c <cbor_encode_simple_value>
		}

		if (!IMG_MGMT_FRUGAL_LIST ||
			(state_flags & IMG_MGMT_STATE_F_PERMANENT)) {
			err |= cbor_encode_text_stringz(&image, "permanent");
   2312a:	4920      	ldr	r1, [pc, #128]	; (231ac <img_mgmt_state_read+0x188>)
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_ACTIVE);
   2312c:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "permanent");
   2312e:	a809      	add	r0, sp, #36	; 0x24
   23130:	f00c f9a8 	bl	2f484 <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image,
   23134:	f3c5 01c0 	ubfx	r1, r5, #3, #1
			err |= cbor_encode_text_stringz(&image, "permanent");
   23138:	4304      	orrs	r4, r0
   2313a:	3114      	adds	r1, #20
   2313c:	a809      	add	r0, sp, #36	; 0x24
   2313e:	f00d fef5 	bl	30f2c <cbor_encode_simple_value>
						   state_flags & IMG_MGMT_STATE_F_PERMANENT);
		}

		err |= cbor_encoder_close_container(&images, &image);
   23142:	a909      	add	r1, sp, #36	; 0x24
			err |= cbor_encode_boolean(&image,
   23144:	4304      	orrs	r4, r0
		err |= cbor_encoder_close_container(&images, &image);
   23146:	a805      	add	r0, sp, #20
   23148:	f00d ff35 	bl	30fb6 <cbor_encoder_close_container>
   2314c:	4304      	orrs	r4, r0
	for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   2314e:	f1b9 0f00 	cmp.w	r9, #0
   23152:	bf08      	it	eq
   23154:	f1b8 0f01 	cmpeq.w	r8, #1
   23158:	d117      	bne.n	2318a <img_mgmt_state_read+0x166>
	}

	err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   2315a:	a905      	add	r1, sp, #20
   2315c:	4630      	mov	r0, r6
   2315e:	f00d ff2a 	bl	30fb6 <cbor_encoder_close_container>

	/* splitStatus is always 0 so in frugal list it is not present at all */
	if (!IMG_MGMT_FRUGAL_LIST) {
		err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   23162:	4913      	ldr	r1, [pc, #76]	; (231b0 <img_mgmt_state_read+0x18c>)
	err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   23164:	4605      	mov	r5, r0
		err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   23166:	4630      	mov	r0, r6
   23168:	f00c f98c 	bl	2f484 <cbor_encode_text_stringz>
   2316c:	432c      	orrs	r4, r5
   2316e:	4304      	orrs	r4, r0
		err |= cbor_encode_int(&ctxt->encoder, 0);
   23170:	2300      	movs	r3, #0
   23172:	2200      	movs	r2, #0
   23174:	4630      	mov	r0, r6
   23176:	f00d fecb 	bl	30f10 <cbor_encode_int>
	}

	if (err != 0) {
		return MGMT_ERR_ENOMEM;
   2317a:	ea54 0300 	orrs.w	r3, r4, r0
	}

	return 0;
}
   2317e:	bf14      	ite	ne
   23180:	2002      	movne	r0, #2
   23182:	2000      	moveq	r0, #0
   23184:	b01d      	add	sp, #116	; 0x74
   23186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2318a:	f04f 0801 	mov.w	r8, #1
   2318e:	f04f 0900 	mov.w	r9, #0
   23192:	e75f      	b.n	23054 <img_mgmt_state_read+0x30>
   23194:	00033275 	.word	0x00033275
   23198:	0003327c 	.word	0x0003327c
   2319c:	0003328e 	.word	0x0003328e
   231a0:	00033297 	.word	0x00033297
   231a4:	0003329f 	.word	0x0003329f
   231a8:	000332a9 	.word	0x000332a9
   231ac:	000332b0 	.word	0x000332b0
   231b0:	000332ba 	.word	0x000332ba
   231b4:	00033281 	.word	0x00033281
   231b8:	00033289 	.word	0x00033289

000231bc <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
   231bc:	b530      	push	{r4, r5, lr}
   231be:	b0b1      	sub	sp, #196	; 0xc4
   231c0:	4604      	mov	r4, r0
	size_t hash_len;
	bool confirm;
	int slot;
	int rc;

	const struct cbor_attr_t write_attr[] = {
   231c2:	228c      	movs	r2, #140	; 0x8c
   231c4:	2100      	movs	r1, #0
   231c6:	a80d      	add	r0, sp, #52	; 0x34
   231c8:	f009 fd82 	bl	2ccd0 <memset>
   231cc:	4b1c      	ldr	r3, [pc, #112]	; (23240 <img_mgmt_state_write+0x84>)
   231ce:	930c      	str	r3, [sp, #48]	; 0x30
   231d0:	2303      	movs	r3, #3
   231d2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   231d6:	ab02      	add	r3, sp, #8
   231d8:	930f      	str	r3, [sp, #60]	; 0x3c
   231da:	2321      	movs	r3, #33	; 0x21
   231dc:	9316      	str	r3, [sp, #88]	; 0x58
   231de:	4b19      	ldr	r3, [pc, #100]	; (23244 <img_mgmt_state_write+0x88>)
   231e0:	9318      	str	r3, [sp, #96]	; 0x60
   231e2:	2305      	movs	r3, #5
   231e4:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
   231e8:	f10d 0307 	add.w	r3, sp, #7
   231ec:	931a      	str	r3, [sp, #104]	; 0x68
		},
		[2] = { 0 },
	};

	hash_len = 0;
	rc = cbor_read_object(&ctxt->it, write_attr);
   231ee:	a90c      	add	r1, sp, #48	; 0x30
	hash_len = 0;
   231f0:	2300      	movs	r3, #0
	const struct cbor_attr_t write_attr[] = {
   231f2:	ad03      	add	r5, sp, #12
	rc = cbor_read_object(&ctxt->it, write_attr);
   231f4:	f104 001c 	add.w	r0, r4, #28
	const struct cbor_attr_t write_attr[] = {
   231f8:	950e      	str	r5, [sp, #56]	; 0x38
	hash_len = 0;
   231fa:	9302      	str	r3, [sp, #8]
	rc = cbor_read_object(&ctxt->it, write_attr);
   231fc:	f00c f83a 	bl	2f274 <cbor_read_object>
	if (rc != 0) {
   23200:	4601      	mov	r1, r0
   23202:	b110      	cbz	r0, 2320a <img_mgmt_state_write+0x4e>
		return MGMT_ERR_EINVAL;
   23204:	2003      	movs	r0, #3
	if (rc != 0) {
		return rc;
	}

	return 0;
}
   23206:	b031      	add	sp, #196	; 0xc4
   23208:	bd30      	pop	{r4, r5, pc}
	if (hash_len == 0) {
   2320a:	9b02      	ldr	r3, [sp, #8]
   2320c:	b95b      	cbnz	r3, 23226 <img_mgmt_state_write+0x6a>
		if (confirm) {
   2320e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23212:	2b00      	cmp	r3, #0
   23214:	d0f6      	beq.n	23204 <img_mgmt_state_write+0x48>
		rc = img_mgmt_state_confirm();
   23216:	f00c f9a4 	bl	2f562 <img_mgmt_state_confirm>
	if (rc != 0) {
   2321a:	2800      	cmp	r0, #0
   2321c:	d1f3      	bne.n	23206 <img_mgmt_state_write+0x4a>
	rc = img_mgmt_state_read(ctxt);
   2321e:	4620      	mov	r0, r4
   23220:	f7ff ff00 	bl	23024 <img_mgmt_state_read>
	if (rc != 0) {
   23224:	e7ef      	b.n	23206 <img_mgmt_state_write+0x4a>
		slot = img_mgmt_find_by_hash(hash, NULL);
   23226:	4628      	mov	r0, r5
   23228:	f00c f909 	bl	2f43e <img_mgmt_find_by_hash>
		if (slot < 0) {
   2322c:	2800      	cmp	r0, #0
   2322e:	dbe9      	blt.n	23204 <img_mgmt_state_write+0x48>
	if (slot == IMG_MGMT_BOOT_CURR_SLOT && confirm) {
   23230:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23234:	d101      	bne.n	2323a <img_mgmt_state_write+0x7e>
   23236:	2900      	cmp	r1, #0
   23238:	d1ed      	bne.n	23216 <img_mgmt_state_write+0x5a>
		rc = img_mgmt_state_set_pending(slot, confirm);
   2323a:	f00c f969 	bl	2f510 <img_mgmt_state_set_pending>
   2323e:	e7ec      	b.n	2321a <img_mgmt_state_write+0x5e>
   23240:	00033289 	.word	0x00033289
   23244:	000332c6 	.word	0x000332c6

00023248 <zephyr_os_mgmt_reset_cb>:

static void
zephyr_os_mgmt_reset_cb(struct k_timer *timer)
{
	/* Reboot the system from the system workqueue thread. */
	k_work_submit(&zephyr_os_mgmt_reset_work);
   23248:	4801      	ldr	r0, [pc, #4]	; (23250 <zephyr_os_mgmt_reset_cb+0x8>)
   2324a:	f004 bfb1 	b.w	281b0 <k_work_submit>
   2324e:	bf00      	nop
   23250:	200006d0 	.word	0x200006d0

00023254 <os_mgmt_impl_reset>:
}

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
   23254:	b537      	push	{r0, r1, r2, r4, r5, lr}
		} else {
			return (t * to_hz + off) / from_hz;
   23256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2325a:	f240 34e7 	movw	r4, #999	; 0x3e7
   2325e:	2500      	movs	r5, #0
   23260:	fbe1 4500 	umlal	r4, r5, r1, r0
   23264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23268:	2300      	movs	r3, #0
   2326a:	4620      	mov	r0, r4
   2326c:	4629      	mov	r1, r5
   2326e:	f7e9 fc85 	bl	cb7c <__aeabi_uldivmod>
   23272:	4602      	mov	r2, r0
   23274:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   23276:	2100      	movs	r1, #0
   23278:	2000      	movs	r0, #0
   2327a:	e9cd 0100 	strd	r0, r1, [sp]
   2327e:	4803      	ldr	r0, [pc, #12]	; (2328c <os_mgmt_impl_reset+0x38>)
   23280:	f005 fd74 	bl	28d6c <z_impl_k_timer_start>
	k_timer_start(&zephyr_os_mgmt_reset_timer, K_MSEC(delay_ms), K_NO_WAIT);
	return 0;
}
   23284:	2000      	movs	r0, #0
   23286:	b003      	add	sp, #12
   23288:	bd30      	pop	{r4, r5, pc}
   2328a:	bf00      	nop
   2328c:	20000b68 	.word	0x20000b68

00023290 <os_mgmt_echo>:
 * Command handler: os echo
 */
#if OS_MGMT_ECHO
static int
os_mgmt_echo(struct mgmt_ctxt *ctxt)
{
   23290:	b5f0      	push	{r4, r5, r6, r7, lr}
   23292:	b0b9      	sub	sp, #228	; 0xe4
   23294:	4605      	mov	r5, r0
	char echo_buf[128];
	CborError err;

	const struct cbor_attr_t attrs[2] = {
   23296:	225c      	movs	r2, #92	; 0x5c
   23298:	2100      	movs	r1, #0
   2329a:	a801      	add	r0, sp, #4
   2329c:	f009 fd18 	bl	2ccd0 <memset>
   232a0:	4b17      	ldr	r3, [pc, #92]	; (23300 <os_mgmt_echo+0x70>)
   232a2:	9300      	str	r3, [sp, #0]
   232a4:	2304      	movs	r3, #4
   232a6:	f88d 3004 	strb.w	r3, [sp, #4]
   232aa:	2380      	movs	r3, #128	; 0x80
   232ac:	930a      	str	r3, [sp, #40]	; 0x28
   232ae:	2301      	movs	r3, #1
   232b0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   232b4:	af18      	add	r7, sp, #96	; 0x60
		[1] = {
			.attribute = NULL
		}
	};

	echo_buf[0] = '\0';
   232b6:	2300      	movs	r3, #0

	err = cbor_read_object(&ctxt->it, attrs);
   232b8:	4669      	mov	r1, sp
   232ba:	f105 001c 	add.w	r0, r5, #28
	const struct cbor_attr_t attrs[2] = {
   232be:	9702      	str	r7, [sp, #8]
	echo_buf[0] = '\0';
   232c0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
	err = cbor_read_object(&ctxt->it, attrs);
   232c4:	f00b ffd6 	bl	2f274 <cbor_read_object>
	if (err != 0) {
   232c8:	4604      	mov	r4, r0
   232ca:	b9b8      	cbnz	r0, 232fc <os_mgmt_echo+0x6c>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   232cc:	480d      	ldr	r0, [pc, #52]	; (23304 <os_mgmt_echo+0x74>)
   232ce:	f009 fcb1 	bl	2cc34 <strlen>
   232d2:	490c      	ldr	r1, [pc, #48]	; (23304 <os_mgmt_echo+0x74>)
   232d4:	4602      	mov	r2, r0
   232d6:	4628      	mov	r0, r5
   232d8:	f00d fe4a 	bl	30f70 <cbor_encode_text_string>
   232dc:	4606      	mov	r6, r0
		return MGMT_ERR_EINVAL;
	}

	err |= cbor_encode_text_stringz(&ctxt->encoder, "r");
	err |= cbor_encode_text_string(&ctxt->encoder, echo_buf, strlen(echo_buf));
   232de:	4638      	mov	r0, r7
   232e0:	f009 fca8 	bl	2cc34 <strlen>
   232e4:	4639      	mov	r1, r7
   232e6:	4602      	mov	r2, r0
   232e8:	4628      	mov	r0, r5
   232ea:	f00d fe41 	bl	30f70 <cbor_encode_text_string>

	if (err != 0) {
   232ee:	ea50 0306 	orrs.w	r3, r0, r6
		return MGMT_ERR_ENOMEM;
   232f2:	bf18      	it	ne
   232f4:	2402      	movne	r4, #2
	}

	return 0;
}
   232f6:	4620      	mov	r0, r4
   232f8:	b039      	add	sp, #228	; 0xe4
   232fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return MGMT_ERR_EINVAL;
   232fc:	2403      	movs	r4, #3
   232fe:	e7fa      	b.n	232f6 <os_mgmt_echo+0x66>
   23300:	000332a7 	.word	0x000332a7
   23304:	00033326 	.word	0x00033326

00023308 <os_mgmt_register_group>:


void
os_mgmt_register_group(void)
{
	mgmt_register_group(&os_mgmt_group);
   23308:	4801      	ldr	r0, [pc, #4]	; (23310 <os_mgmt_register_group+0x8>)
   2330a:	f000 b803 	b.w	23314 <mgmt_register_group>
   2330e:	bf00      	nop
   23310:	200006e0 	.word	0x200006e0

00023314 <mgmt_register_group>:
}

void
mgmt_register_group(struct mgmt_group *group)
{
	if (mgmt_group_list_end == NULL) {
   23314:	4b03      	ldr	r3, [pc, #12]	; (23324 <mgmt_register_group+0x10>)
   23316:	681a      	ldr	r2, [r3, #0]
   23318:	b902      	cbnz	r2, 2331c <mgmt_register_group+0x8>
		mgmt_group_list = group;
   2331a:	4a03      	ldr	r2, [pc, #12]	; (23328 <mgmt_register_group+0x14>)
	} else {
		mgmt_group_list_end->mg_next = group;
   2331c:	6010      	str	r0, [r2, #0]
	}
	mgmt_group_list_end = group;
   2331e:	6018      	str	r0, [r3, #0]
}
   23320:	4770      	bx	lr
   23322:	bf00      	nop
   23324:	200029bc 	.word	0x200029bc
   23328:	200029b8 	.word	0x200029b8

0002332c <mgmt_find_handler>:
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   2332c:	4b0b      	ldr	r3, [pc, #44]	; (2335c <mgmt_find_handler+0x30>)
   2332e:	681b      	ldr	r3, [r3, #0]

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
   23330:	b530      	push	{r4, r5, lr}
   23332:	4602      	mov	r2, r0
			if (!group->mg_handlers[command_id].mh_read &&
   23334:	00cc      	lsls	r4, r1, #3
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   23336:	b90b      	cbnz	r3, 2333c <mgmt_find_handler+0x10>
	const struct mgmt_group *group;

	group = mgmt_find_group(group_id, command_id);
	if (!group) {
		return NULL;
   23338:	2000      	movs	r0, #0
	}

	return &group->mg_handlers[command_id];
}
   2333a:	bd30      	pop	{r4, r5, pc}
		if (group->mg_group_id == group_id) {
   2333c:	8958      	ldrh	r0, [r3, #10]
   2333e:	4290      	cmp	r0, r2
   23340:	d10a      	bne.n	23358 <mgmt_find_handler+0x2c>
			if (command_id >= group->mg_handlers_count) {
   23342:	8918      	ldrh	r0, [r3, #8]
   23344:	4288      	cmp	r0, r1
   23346:	d9f7      	bls.n	23338 <mgmt_find_handler+0xc>
			if (!group->mg_handlers[command_id].mh_read &&
   23348:	685d      	ldr	r5, [r3, #4]
   2334a:	1928      	adds	r0, r5, r4
   2334c:	592d      	ldr	r5, [r5, r4]
   2334e:	2d00      	cmp	r5, #0
   23350:	d1f3      	bne.n	2333a <mgmt_find_handler+0xe>
   23352:	6845      	ldr	r5, [r0, #4]
   23354:	2d00      	cmp	r5, #0
   23356:	d1f0      	bne.n	2333a <mgmt_find_handler+0xe>
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   23358:	681b      	ldr	r3, [r3, #0]
   2335a:	e7ec      	b.n	23336 <mgmt_find_handler+0xa>
   2335c:	200029b8 	.word	0x200029b8

00023360 <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
   23360:	b570      	push	{r4, r5, r6, lr}
   23362:	4604      	mov	r4, r0
   23364:	4808      	ldr	r0, [pc, #32]	; (23388 <mgmt_write_rsp_status+0x28>)
   23366:	460d      	mov	r5, r1
   23368:	f009 fc64 	bl	2cc34 <strlen>
   2336c:	4906      	ldr	r1, [pc, #24]	; (23388 <mgmt_write_rsp_status+0x28>)
   2336e:	4602      	mov	r2, r0
   23370:	4620      	mov	r0, r4
   23372:	f00d fdfd 	bl	30f70 <cbor_encode_text_string>
	int rc;

	rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
	if (rc != 0) {
   23376:	b930      	cbnz	r0, 23386 <mgmt_write_rsp_status+0x26>
		return rc;
	}

	rc = cbor_encode_int(&ctxt->encoder, errcode);
   23378:	462a      	mov	r2, r5
   2337a:	17eb      	asrs	r3, r5, #31
   2337c:	4620      	mov	r0, r4
	if (rc != 0) {
		return rc;
	}

	return 0;
}
   2337e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rc = cbor_encode_int(&ctxt->encoder, errcode);
   23382:	f00d bdc5 	b.w	30f10 <cbor_encode_int>
}
   23386:	bd70      	pop	{r4, r5, r6, pc}
   23388:	00033253 	.word	0x00033253

0002338c <mgmt_evt>:
	evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
   2338c:	b410      	push	{r4}
	if (evt_cb) {
   2338e:	4c04      	ldr	r4, [pc, #16]	; (233a0 <mgmt_evt+0x14>)
   23390:	6824      	ldr	r4, [r4, #0]
   23392:	b114      	cbz	r4, 2339a <mgmt_evt+0xe>
		evt_cb(opcode, group, id, arg);
   23394:	46a4      	mov	ip, r4
	}
}
   23396:	bc10      	pop	{r4}
		evt_cb(opcode, group, id, arg);
   23398:	4760      	bx	ip
}
   2339a:	bc10      	pop	{r4}
   2339c:	4770      	bx	lr
   2339e:	bf00      	nop
   233a0:	200029b4 	.word	0x200029b4

000233a4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   233a4:	4b02      	ldr	r3, [pc, #8]	; (233b0 <net_buf_pool_get+0xc>)
   233a6:	222c      	movs	r2, #44	; 0x2c
   233a8:	fb02 3000 	mla	r0, r2, r0, r3
   233ac:	4770      	bx	lr
   233ae:	bf00      	nop
   233b0:	20000ccc 	.word	0x20000ccc

000233b4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   233b4:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   233b6:	4a06      	ldr	r2, [pc, #24]	; (233d0 <net_buf_id+0x1c>)
   233b8:	212c      	movs	r1, #44	; 0x2c
   233ba:	fb01 2303 	mla	r3, r1, r3, r2
   233be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   233c0:	7f1b      	ldrb	r3, [r3, #28]
   233c2:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   233c4:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   233c6:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   233ca:	fbb0 f0f3 	udiv	r0, r0, r3
   233ce:	4770      	bx	lr
   233d0:	20000ccc 	.word	0x20000ccc

000233d4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   233d4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   233d6:	4a0a      	ldr	r2, [pc, #40]	; (23400 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   233d8:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   233da:	242c      	movs	r4, #44	; 0x2c
   233dc:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   233e0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   233e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   233e4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   233e6:	6823      	ldr	r3, [r4, #0]
   233e8:	429a      	cmp	r2, r3
   233ea:	bf94      	ite	ls
   233ec:	600a      	strls	r2, [r1, #0]
   233ee:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   233f0:	f7ff ffe0 	bl	233b4 <net_buf_id>
   233f4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   233f8:	fb02 3000 	mla	r0, r2, r0, r3
   233fc:	bd10      	pop	{r4, pc}
   233fe:	bf00      	nop
   23400:	20000ccc 	.word	0x20000ccc

00023404 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   23404:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   23408:	4605      	mov	r5, r0
   2340a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2340c:	4610      	mov	r0, r2
   2340e:	4619      	mov	r1, r3
{
   23410:	4616      	mov	r6, r2
   23412:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   23414:	f00e fc66 	bl	31ce4 <sys_clock_timeout_end_calc>
   23418:	4680      	mov	r8, r0
   2341a:	4689      	mov	r9, r1
	__asm__ volatile(
   2341c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23420:	f3ef 8a11 	mrs	sl, BASEPRI
   23424:	f383 8812 	msr	BASEPRI_MAX, r3
   23428:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2342c:	8b6b      	ldrh	r3, [r5, #26]
   2342e:	2b00      	cmp	r3, #0
   23430:	d059      	beq.n	234e6 <net_buf_alloc_len+0xe2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   23432:	8b2a      	ldrh	r2, [r5, #24]
   23434:	429a      	cmp	r2, r3
   23436:	d93d      	bls.n	234b4 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   23438:	2200      	movs	r2, #0
   2343a:	2300      	movs	r3, #0
   2343c:	4628      	mov	r0, r5
   2343e:	f004 fceb 	bl	27e18 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   23442:	4604      	mov	r4, r0
   23444:	2800      	cmp	r0, #0
   23446:	d035      	beq.n	234b4 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   23448:	f38a 8811 	msr	BASEPRI, sl
   2344c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   23450:	9b01      	ldr	r3, [sp, #4]
   23452:	2b00      	cmp	r3, #0
   23454:	d057      	beq.n	23506 <net_buf_alloc_len+0x102>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   23456:	ea56 0307 	orrs.w	r3, r6, r7
   2345a:	d010      	beq.n	2347e <net_buf_alloc_len+0x7a>
   2345c:	1c7b      	adds	r3, r7, #1
   2345e:	bf08      	it	eq
   23460:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23464:	d00b      	beq.n	2347e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   23466:	f005 fc23 	bl	28cb0 <sys_clock_tick_get>
   2346a:	ebb8 0600 	subs.w	r6, r8, r0
   2346e:	eb69 0701 	sbc.w	r7, r9, r1
   23472:	2e00      	cmp	r6, #0
   23474:	f177 0300 	sbcs.w	r3, r7, #0
   23478:	bfbc      	itt	lt
   2347a:	2600      	movlt	r6, #0
   2347c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2347e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   23480:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2351c <net_buf_alloc_len+0x118>
   23484:	f04f 092c 	mov.w	r9, #44	; 0x2c
   23488:	fb09 8303 	mla	r3, r9, r3, r8
   2348c:	4632      	mov	r2, r6
   2348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23490:	681b      	ldr	r3, [r3, #0]
   23492:	a901      	add	r1, sp, #4
   23494:	681d      	ldr	r5, [r3, #0]
   23496:	4620      	mov	r0, r4
   23498:	463b      	mov	r3, r7
   2349a:	47a8      	blx	r5
   2349c:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2349e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   234a0:	2800      	cmp	r0, #0
   234a2:	d131      	bne.n	23508 <net_buf_alloc_len+0x104>
	k_lifo_put(&pool->free, buf);
   234a4:	79a0      	ldrb	r0, [r4, #6]
   234a6:	4621      	mov	r1, r4
   234a8:	fb00 8009 	mla	r0, r0, r9, r8
   234ac:	f00e f98b 	bl	317c6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   234b0:	462c      	mov	r4, r5
}
   234b2:	e024      	b.n	234fe <net_buf_alloc_len+0xfa>
		uninit_count = pool->uninit_count--;
   234b4:	8b6b      	ldrh	r3, [r5, #26]
   234b6:	1e5a      	subs	r2, r3, #1
   234b8:	836a      	strh	r2, [r5, #26]
   234ba:	f38a 8811 	msr	BASEPRI, sl
   234be:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   234c2:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   234c4:	8b2c      	ldrh	r4, [r5, #24]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   234c6:	f102 0017 	add.w	r0, r2, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   234ca:	1ae4      	subs	r4, r4, r3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   234cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   234ce:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   234d2:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   234d6:	4811      	ldr	r0, [pc, #68]	; (2351c <net_buf_alloc_len+0x118>)
   234d8:	4b11      	ldr	r3, [pc, #68]	; (23520 <net_buf_alloc_len+0x11c>)
	buf->user_data_size = pool->user_data_size;
   234da:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   234dc:	1a2d      	subs	r5, r5, r0
   234de:	10ad      	asrs	r5, r5, #2
   234e0:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   234e2:	71a5      	strb	r5, [r4, #6]
		goto success;
   234e4:	e7b4      	b.n	23450 <net_buf_alloc_len+0x4c>
   234e6:	f38a 8811 	msr	BASEPRI, sl
   234ea:	f3bf 8f6f 	isb	sy
   234ee:	4632      	mov	r2, r6
   234f0:	463b      	mov	r3, r7
   234f2:	4628      	mov	r0, r5
   234f4:	f004 fc90 	bl	27e18 <z_impl_k_queue_get>
	if (!buf) {
   234f8:	4604      	mov	r4, r0
   234fa:	2800      	cmp	r0, #0
   234fc:	d1a8      	bne.n	23450 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   234fe:	4620      	mov	r0, r4
   23500:	b002      	add	sp, #8
   23502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   23506:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   23508:	2300      	movs	r3, #0
	buf->ref   = 1U;
   2350a:	2201      	movs	r2, #1
	buf->frags = NULL;
   2350c:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   2350e:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   23510:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   23512:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   23514:	6923      	ldr	r3, [r4, #16]
   23516:	81e2      	strh	r2, [r4, #14]
   23518:	60a3      	str	r3, [r4, #8]
	return buf;
   2351a:	e7f0      	b.n	234fe <net_buf_alloc_len+0xfa>
   2351c:	20000ccc 	.word	0x20000ccc
   23520:	ba2e8ba3 	.word	0xba2e8ba3

00023524 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   23524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23528:	4d16      	ldr	r5, [pc, #88]	; (23584 <net_buf_unref+0x60>)
   2352a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   2352c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   2352e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   23530:	b90c      	cbnz	r4, 23536 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   23532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   23536:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   23538:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   2353c:	3b01      	subs	r3, #1
   2353e:	b2db      	uxtb	r3, r3
   23540:	7123      	strb	r3, [r4, #4]
   23542:	2b00      	cmp	r3, #0
   23544:	d1f5      	bne.n	23532 <net_buf_unref+0xe>
		if (buf->__buf) {
   23546:	6921      	ldr	r1, [r4, #16]
   23548:	b159      	cbz	r1, 23562 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2354a:	7963      	ldrb	r3, [r4, #5]
   2354c:	079b      	lsls	r3, r3, #30
   2354e:	d407      	bmi.n	23560 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   23550:	79a3      	ldrb	r3, [r4, #6]
   23552:	fb07 5303 	mla	r3, r7, r3, r5
   23556:	4620      	mov	r0, r4
   23558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2355a:	681b      	ldr	r3, [r3, #0]
   2355c:	689b      	ldr	r3, [r3, #8]
   2355e:	4798      	blx	r3
			buf->__buf = NULL;
   23560:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   23562:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   23564:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   23566:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   2356a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   2356c:	6a1b      	ldr	r3, [r3, #32]
   2356e:	b11b      	cbz	r3, 23578 <net_buf_unref+0x54>
			pool->destroy(buf);
   23570:	4620      	mov	r0, r4
   23572:	4798      	blx	r3
{
   23574:	4644      	mov	r4, r8
   23576:	e7db      	b.n	23530 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   23578:	4621      	mov	r1, r4
   2357a:	fb00 5007 	mla	r0, r0, r7, r5
   2357e:	f00e f922 	bl	317c6 <k_queue_prepend>
}
   23582:	e7f7      	b.n	23574 <net_buf_unref+0x50>
   23584:	20000ccc 	.word	0x20000ccc

00023588 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   23588:	4a05      	ldr	r2, [pc, #20]	; (235a0 <adc_context_start_sampling.isra.0+0x18>)
   2358a:	2301      	movs	r3, #1
   2358c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   23590:	b108      	cbz	r0, 23596 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23592:	60d3      	str	r3, [r2, #12]
}
   23594:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23596:	6013      	str	r3, [r2, #0]
   23598:	4a02      	ldr	r2, [pc, #8]	; (235a4 <adc_context_start_sampling.isra.0+0x1c>)
   2359a:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   2359c:	4770      	bx	lr
   2359e:	bf00      	nop
   235a0:	40007000 	.word	0x40007000
   235a4:	40007004 	.word	0x40007004

000235a8 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   235a8:	7908      	ldrb	r0, [r1, #4]
{
   235aa:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   235ac:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   235b0:	2c07      	cmp	r4, #7
   235b2:	d81f      	bhi.n	235f4 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
   235b4:	780b      	ldrb	r3, [r1, #0]
   235b6:	2b09      	cmp	r3, #9
   235b8:	d81c      	bhi.n	235f4 <adc_nrfx_channel_setup+0x4c>
   235ba:	e8df f003 	tbb	[pc, r3]
   235be:	0606      	.short	0x0606
   235c0:	1b060606 	.word	0x1b060606
   235c4:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
   235c8:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
   235ca:	784a      	ldrb	r2, [r1, #1]
   235cc:	2a03      	cmp	r2, #3
   235ce:	d018      	beq.n	23602 <adc_nrfx_channel_setup+0x5a>
   235d0:	2a04      	cmp	r2, #4
   235d2:	d10f      	bne.n	235f4 <adc_nrfx_channel_setup+0x4c>
   235d4:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   235d6:	884a      	ldrh	r2, [r1, #2]
   235d8:	f244 060a 	movw	r6, #16394	; 0x400a
   235dc:	42b2      	cmp	r2, r6
   235de:	d044      	beq.n	2366a <adc_nrfx_channel_setup+0xc2>
   235e0:	d811      	bhi.n	23606 <adc_nrfx_channel_setup+0x5e>
   235e2:	f244 0603 	movw	r6, #16387	; 0x4003
   235e6:	42b2      	cmp	r2, r6
   235e8:	d03b      	beq.n	23662 <adc_nrfx_channel_setup+0xba>
   235ea:	f244 0605 	movw	r6, #16389	; 0x4005
   235ee:	42b2      	cmp	r2, r6
   235f0:	d039      	beq.n	23666 <adc_nrfx_channel_setup+0xbe>
   235f2:	b3d2      	cbz	r2, 2366a <adc_nrfx_channel_setup+0xc2>
   235f4:	f06f 0015 	mvn.w	r0, #21
   235f8:	e032      	b.n	23660 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   235fa:	2306      	movs	r3, #6
		break;
   235fc:	e7e5      	b.n	235ca <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   235fe:	2307      	movs	r3, #7
		break;
   23600:	e7e3      	b.n	235ca <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   23602:	2501      	movs	r5, #1
   23604:	e7e7      	b.n	235d6 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   23606:	f244 0614 	movw	r6, #16404	; 0x4014
   2360a:	42b2      	cmp	r2, r6
   2360c:	d02f      	beq.n	2366e <adc_nrfx_channel_setup+0xc6>
   2360e:	f244 0628 	movw	r6, #16424	; 0x4028
   23612:	42b2      	cmp	r2, r6
   23614:	d02d      	beq.n	23672 <adc_nrfx_channel_setup+0xca>
   23616:	f244 060f 	movw	r6, #16399	; 0x400f
   2361a:	42b2      	cmp	r2, r6
   2361c:	d1ea      	bne.n	235f4 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   2361e:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   23620:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   23624:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   23626:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   2362a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   2362e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   23632:	0122      	lsls	r2, r4, #4
   23634:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23638:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   2363c:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   2363e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   23642:	0123      	lsls	r3, r4, #4
   23644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23648:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   2364c:	798a      	ldrb	r2, [r1, #6]
   2364e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   23652:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   23656:	4b08      	ldr	r3, [pc, #32]	; (23678 <adc_nrfx_channel_setup+0xd0>)
   23658:	441c      	add	r4, r3
   2365a:	794b      	ldrb	r3, [r1, #5]
   2365c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   23660:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
   23662:	2200      	movs	r2, #0
   23664:	e7dc      	b.n	23620 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   23666:	2201      	movs	r2, #1
   23668:	e7da      	b.n	23620 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   2366a:	2202      	movs	r2, #2
   2366c:	e7d8      	b.n	23620 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   2366e:	2204      	movs	r2, #4
   23670:	e7d6      	b.n	23620 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   23672:	2205      	movs	r2, #5
   23674:	e7d4      	b.n	23620 <adc_nrfx_channel_setup+0x78>
   23676:	bf00      	nop
   23678:	20000418 	.word	0x20000418

0002367c <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2367c:	4b2f      	ldr	r3, [pc, #188]	; (2373c <saadc_irq_handler+0xc0>)
   2367e:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
   23680:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   23682:	2a00      	cmp	r2, #0
   23684:	d04b      	beq.n	2371e <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23686:	2200      	movs	r2, #0
   23688:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2368a:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   2368c:	4c2c      	ldr	r4, [pc, #176]	; (23740 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2368e:	4b2d      	ldr	r3, [pc, #180]	; (23744 <saadc_irq_handler+0xc8>)
   23690:	2101      	movs	r1, #1
   23692:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   23694:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
   23698:	6f63      	ldr	r3, [r4, #116]	; 0x74
   2369a:	b3db      	cbz	r3, 23714 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
   2369c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   236a0:	b143      	cbz	r3, 236b4 <saadc_irq_handler+0x38>
			action = callback(dev,
   236a2:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
   236a6:	f104 0174 	add.w	r1, r4, #116	; 0x74
   236aa:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   236ac:	2801      	cmp	r0, #1
   236ae:	d014      	beq.n	236da <saadc_irq_handler+0x5e>
   236b0:	2802      	cmp	r0, #2
   236b2:	d029      	beq.n	23708 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   236b4:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   236b8:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   236bc:	429a      	cmp	r2, r3
   236be:	d923      	bls.n	23708 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   236c0:	3301      	adds	r3, #1
   236c2:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   236c6:	4b20      	ldr	r3, [pc, #128]	; (23748 <saadc_irq_handler+0xcc>)
   236c8:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   236cc:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   236d0:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   236d2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   236d6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   236da:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   236de:	b92b      	cbnz	r3, 236ec <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   236e0:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   236e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   236e8:	f7ff bf4e 	b.w	23588 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   236ec:	f3bf 8f5b 	dmb	ish
   236f0:	e854 3f00 	ldrex	r3, [r4]
   236f4:	1e5a      	subs	r2, r3, #1
   236f6:	e844 2100 	strex	r1, r2, [r4]
   236fa:	2900      	cmp	r1, #0
   236fc:	d1f8      	bne.n	236f0 <saadc_irq_handler+0x74>
   236fe:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   23702:	2b01      	cmp	r3, #1
   23704:	dcec      	bgt.n	236e0 <saadc_irq_handler+0x64>
   23706:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   23708:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   2370c:	b113      	cbz	r3, 23714 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
   2370e:	480f      	ldr	r0, [pc, #60]	; (2374c <saadc_irq_handler+0xd0>)
   23710:	f00e fb1d 	bl	31d4e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   23714:	480e      	ldr	r0, [pc, #56]	; (23750 <saadc_irq_handler+0xd4>)
   23716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2371a:	f004 bbb1 	b.w	27e80 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2371e:	4b0d      	ldr	r3, [pc, #52]	; (23754 <saadc_irq_handler+0xd8>)
   23720:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
   23722:	2900      	cmp	r1, #0
   23724:	d0ef      	beq.n	23706 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23726:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23728:	4a06      	ldr	r2, [pc, #24]	; (23744 <saadc_irq_handler+0xc8>)
   2372a:	681b      	ldr	r3, [r3, #0]
   2372c:	2301      	movs	r3, #1
   2372e:	6013      	str	r3, [r2, #0]
   23730:	f842 3c08 	str.w	r3, [r2, #-8]
   23734:	f842 3c04 	str.w	r3, [r2, #-4]
}
   23738:	e7e5      	b.n	23706 <saadc_irq_handler+0x8a>
   2373a:	bf00      	nop
   2373c:	40007104 	.word	0x40007104
   23740:	20000418 	.word	0x20000418
   23744:	40007008 	.word	0x40007008
   23748:	40007000 	.word	0x40007000
   2374c:	20000420 	.word	0x20000420
   23750:	20000470 	.word	0x20000470
   23754:	40007110 	.word	0x40007110

00023758 <adc_nrfx_read>:
{
   23758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2375a:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   2375c:	485d      	ldr	r0, [pc, #372]	; (238d4 <adc_nrfx_read+0x17c>)
   2375e:	f04f 32ff 	mov.w	r2, #4294967295
   23762:	f04f 33ff 	mov.w	r3, #4294967295
   23766:	f004 fbb1 	bl	27ecc <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   2376a:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   2376c:	b910      	cbnz	r0, 23774 <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
   2376e:	f06f 0415 	mvn.w	r4, #21
   23772:	e098      	b.n	238a6 <adc_nrfx_read+0x14e>
	if (!selected_channels ||
   23774:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
   23778:	d1f9      	bne.n	2376e <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   2377a:	4c57      	ldr	r4, [pc, #348]	; (238d8 <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   2377c:	4f57      	ldr	r7, [pc, #348]	; (238dc <adc_nrfx_read+0x184>)
	active_channels = 0U;
   2377e:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   23780:	fa20 f302 	lsr.w	r3, r0, r2
   23784:	f013 0301 	ands.w	r3, r3, #1
   23788:	d032      	beq.n	237f0 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   2378a:	18bb      	adds	r3, r7, r2
   2378c:	f893 c0a0 	ldrb.w	ip, [r3, #160]	; 0xa0
   23790:	f1bc 0f00 	cmp.w	ip, #0
   23794:	d0eb      	beq.n	2376e <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   23796:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   2379a:	7c6e      	ldrb	r6, [r5, #17]
   2379c:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   237a0:	3e00      	subs	r6, #0
   237a2:	bf18      	it	ne
   237a4:	2601      	movne	r6, #1
   237a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   237aa:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   237ae:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   237b2:	f102 0351 	add.w	r3, r2, #81	; 0x51
   237b6:	011b      	lsls	r3, r3, #4
			++active_channels;
   237b8:	3101      	adds	r1, #1
   237ba:	f844 c003 	str.w	ip, [r4, r3]
   237be:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   237c0:	3201      	adds	r2, #1
   237c2:	2a08      	cmp	r2, #8
   237c4:	d1dc      	bne.n	23780 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   237c6:	7c2b      	ldrb	r3, [r5, #16]
   237c8:	3b08      	subs	r3, #8
   237ca:	2b06      	cmp	r3, #6
   237cc:	d8cf      	bhi.n	2376e <adc_nrfx_read+0x16>
   237ce:	a201      	add	r2, pc, #4	; (adr r2, 237d4 <adc_nrfx_read+0x7c>)
   237d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   237d4:	000238bb 	.word	0x000238bb
   237d8:	0002376f 	.word	0x0002376f
   237dc:	000237fb 	.word	0x000237fb
   237e0:	0002376f 	.word	0x0002376f
   237e4:	000238b3 	.word	0x000238b3
   237e8:	0002376f 	.word	0x0002376f
   237ec:	000238b7 	.word	0x000238b7
   237f0:	f102 0651 	add.w	r6, r2, #81	; 0x51
   237f4:	0136      	lsls	r6, r6, #4
   237f6:	51a3      	str	r3, [r4, r6]
}
   237f8:	e7e2      	b.n	237c0 <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
   237fa:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
   237fc:	4b36      	ldr	r3, [pc, #216]	; (238d8 <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   237fe:	2901      	cmp	r1, #1
   23800:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   23804:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   23806:	d95a      	bls.n	238be <adc_nrfx_read+0x166>
   23808:	2a00      	cmp	r2, #0
   2380a:	d1b0      	bne.n	2376e <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   2380c:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
   23810:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   23812:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   23814:	b112      	cbz	r2, 2381c <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   23816:	8992      	ldrh	r2, [r2, #12]
   23818:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   2381c:	68ea      	ldr	r2, [r5, #12]
   2381e:	429a      	cmp	r2, r3
   23820:	d355      	bcc.n	238ce <adc_nrfx_read+0x176>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   23822:	4b2d      	ldr	r3, [pc, #180]	; (238d8 <adc_nrfx_read+0x180>)
   23824:	68aa      	ldr	r2, [r5, #8]
   23826:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
   2382a:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   2382c:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   23830:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   23832:	4c2a      	ldr	r4, [pc, #168]	; (238dc <adc_nrfx_read+0x184>)
   23834:	f104 0674 	add.w	r6, r4, #116	; 0x74
   23838:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2383a:	683b      	ldr	r3, [r7, #0]
   2383c:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
   2383e:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   23840:	2600      	movs	r6, #0
   23842:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   23844:	2b00      	cmp	r3, #0
   23846:	d03d      	beq.n	238c4 <adc_nrfx_read+0x16c>
		ctx->options = *sequence->options;
   23848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2384a:	f104 0588 	add.w	r5, r4, #136	; 0x88
   2384e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   23852:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   23854:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		if (ctx->options.interval_us != 0U) {
   23858:	b3a0      	cbz	r0, 238c4 <adc_nrfx_read+0x16c>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2385a:	f3bf 8f5b 	dmb	ish
   2385e:	e854 3f00 	ldrex	r3, [r4]
   23862:	e844 6200 	strex	r2, r6, [r4]
   23866:	2a00      	cmp	r2, #0
   23868:	d1f9      	bne.n	2385e <adc_nrfx_read+0x106>
   2386a:	f3bf 8f5b 	dmb	ish
   2386e:	481c      	ldr	r0, [pc, #112]	; (238e0 <adc_nrfx_read+0x188>)
   23870:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
   23874:	4a1b      	ldr	r2, [pc, #108]	; (238e4 <adc_nrfx_read+0x18c>)
   23876:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2387a:	2100      	movs	r1, #0
   2387c:	2300      	movs	r3, #0
   2387e:	fbe5 0106 	umlal	r0, r1, r5, r6
   23882:	f7e9 f97b 	bl	cb7c <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   23886:	2200      	movs	r2, #0
   23888:	e9cd 0100 	strd	r0, r1, [sp]
   2388c:	2300      	movs	r3, #0
   2388e:	f104 0008 	add.w	r0, r4, #8
   23892:	f005 fa6b 	bl	28d6c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   23896:	4814      	ldr	r0, [pc, #80]	; (238e8 <adc_nrfx_read+0x190>)
   23898:	f04f 32ff 	mov.w	r2, #4294967295
   2389c:	f04f 33ff 	mov.w	r3, #4294967295
   238a0:	f004 fb14 	bl	27ecc <z_impl_k_sem_take>
	return ctx->status;
   238a4:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   238a6:	480b      	ldr	r0, [pc, #44]	; (238d4 <adc_nrfx_read+0x17c>)
   238a8:	f004 faea 	bl	27e80 <z_impl_k_sem_give>
}
   238ac:	4620      	mov	r0, r4
   238ae:	b003      	add	sp, #12
   238b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   238b2:	2202      	movs	r2, #2
		break;
   238b4:	e7a2      	b.n	237fc <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   238b6:	2203      	movs	r2, #3
		break;
   238b8:	e7a0      	b.n	237fc <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   238ba:	2200      	movs	r2, #0
   238bc:	e79e      	b.n	237fc <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   238be:	2a08      	cmp	r2, #8
   238c0:	d9a4      	bls.n	2380c <adc_nrfx_read+0xb4>
   238c2:	e754      	b.n	2376e <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
   238c4:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   238c8:	f7ff fe5e 	bl	23588 <adc_context_start_sampling.isra.0>
   238cc:	e7e3      	b.n	23896 <adc_nrfx_read+0x13e>
		return -ENOMEM;
   238ce:	f06f 040b 	mvn.w	r4, #11
   238d2:	e7e8      	b.n	238a6 <adc_nrfx_read+0x14e>
   238d4:	20000458 	.word	0x20000458
   238d8:	40007000 	.word	0x40007000
   238dc:	20000418 	.word	0x20000418
   238e0:	000f423f 	.word	0x000f423f
   238e4:	000f4240 	.word	0x000f4240
   238e8:	20000470 	.word	0x20000470

000238ec <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   238ec:	4b0d      	ldr	r3, [pc, #52]	; (23924 <init_saadc+0x38>)

static int init_saadc(const struct device *dev)
{
   238ee:	b510      	push	{r4, lr}
   238f0:	2400      	movs	r4, #0
   238f2:	601c      	str	r4, [r3, #0]
   238f4:	681b      	ldr	r3, [r3, #0]
   238f6:	4b0c      	ldr	r3, [pc, #48]	; (23928 <init_saadc+0x3c>)
   238f8:	601c      	str	r4, [r3, #0]
   238fa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   238fc:	4b0b      	ldr	r3, [pc, #44]	; (2392c <init_saadc+0x40>)
   238fe:	2212      	movs	r2, #18
   23900:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   23904:	2007      	movs	r0, #7
   23906:	f7fa ff01 	bl	1e70c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2390a:	4622      	mov	r2, r4
   2390c:	2101      	movs	r1, #1
   2390e:	2007      	movs	r0, #7
   23910:	f7fa ff2e 	bl	1e770 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
   23914:	4806      	ldr	r0, [pc, #24]	; (23930 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
   23916:	6c83      	ldr	r3, [r0, #72]	; 0x48
   23918:	b913      	cbnz	r3, 23920 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
   2391a:	3040      	adds	r0, #64	; 0x40
   2391c:	f004 fab0 	bl	27e80 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   23920:	2000      	movs	r0, #0
   23922:	bd10      	pop	{r4, pc}
   23924:	40007104 	.word	0x40007104
   23928:	40007110 	.word	0x40007110
   2392c:	40007000 	.word	0x40007000
   23930:	20000418 	.word	0x20000418

00023934 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   23934:	4a0e      	ldr	r2, [pc, #56]	; (23970 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   23936:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   23938:	1a84      	subs	r4, r0, r2
   2393a:	10a3      	asrs	r3, r4, #2
   2393c:	4c0d      	ldr	r4, [pc, #52]	; (23974 <onoff_stop+0x40>)
   2393e:	435c      	muls	r4, r3
{
   23940:	4605      	mov	r5, r0
   23942:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   23944:	200c      	movs	r0, #12
   23946:	fb00 2004 	mla	r0, r0, r4, r2
{
   2394a:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   2394c:	2140      	movs	r1, #64	; 0x40
   2394e:	4408      	add	r0, r1
   23950:	f00c f8ea 	bl	2fb28 <set_off_state>
	if (err < 0) {
   23954:	1e01      	subs	r1, r0, #0
   23956:	db05      	blt.n	23964 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   23958:	4b07      	ldr	r3, [pc, #28]	; (23978 <onoff_stop+0x44>)
   2395a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2395e:	6863      	ldr	r3, [r4, #4]
   23960:	4798      	blx	r3
	return 0;
   23962:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   23964:	4628      	mov	r0, r5
   23966:	4633      	mov	r3, r6
}
   23968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2396c:	4718      	bx	r3
   2396e:	bf00      	nop
   23970:	200029d0 	.word	0x200029d0
   23974:	b6db6db7 	.word	0xb6db6db7
   23978:	00032bc4 	.word	0x00032bc4

0002397c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   23980:	4e10      	ldr	r6, [pc, #64]	; (239c4 <onoff_start+0x48>)
   23982:	1b84      	subs	r4, r0, r6
   23984:	10a3      	asrs	r3, r4, #2
   23986:	4c10      	ldr	r4, [pc, #64]	; (239c8 <onoff_start+0x4c>)
   23988:	435c      	muls	r4, r3
   2398a:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   2398c:	250c      	movs	r5, #12
   2398e:	4365      	muls	r5, r4
{
   23990:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   23992:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   23996:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   23998:	4430      	add	r0, r6
   2399a:	2140      	movs	r1, #64	; 0x40
   2399c:	f00c f8dd 	bl	2fb5a <set_starting_state>
	if (err < 0) {
   239a0:	1e01      	subs	r1, r0, #0
   239a2:	db09      	blt.n	239b8 <onoff_start+0x3c>
	subdata->cb = cb;
   239a4:	4a09      	ldr	r2, [pc, #36]	; (239cc <onoff_start+0x50>)
   239a6:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   239a8:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   239ac:	4b08      	ldr	r3, [pc, #32]	; (239d0 <onoff_start+0x54>)
   239ae:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   239b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   239b6:	4718      	bx	r3
		notify(mgr, err);
   239b8:	4640      	mov	r0, r8
   239ba:	463b      	mov	r3, r7
}
   239bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   239c0:	4718      	bx	r3
   239c2:	bf00      	nop
   239c4:	200029d0 	.word	0x200029d0
   239c8:	b6db6db7 	.word	0xb6db6db7
   239cc:	0002fbbd 	.word	0x0002fbbd
   239d0:	00032bc4 	.word	0x00032bc4

000239d4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   239d4:	2200      	movs	r2, #0
{
   239d6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   239d8:	2101      	movs	r1, #1
{
   239da:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   239dc:	4610      	mov	r0, r2
   239de:	f7fa fec7 	bl	1e770 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   239e2:	2000      	movs	r0, #0
   239e4:	f7fa fe92 	bl	1e70c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   239e8:	480f      	ldr	r0, [pc, #60]	; (23a28 <clk_init+0x54>)
   239ea:	f002 f99b 	bl	25d24 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   239ee:	4b0f      	ldr	r3, [pc, #60]	; (23a2c <clk_init+0x58>)
   239f0:	4298      	cmp	r0, r3
   239f2:	d115      	bne.n	23a20 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   239f4:	f00c ff6b 	bl	308ce <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   239f8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   239fa:	490d      	ldr	r1, [pc, #52]	; (23a30 <clk_init+0x5c>)
   239fc:	4630      	mov	r0, r6
   239fe:	f008 f8a9 	bl	2bb54 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   23a02:	2800      	cmp	r0, #0
   23a04:	db0b      	blt.n	23a1e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   23a06:	2501      	movs	r5, #1
   23a08:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   23a0a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   23a0c:	4908      	ldr	r1, [pc, #32]	; (23a30 <clk_init+0x5c>)
   23a0e:	f104 001c 	add.w	r0, r4, #28
   23a12:	f008 f89f 	bl	2bb54 <onoff_manager_init>
		if (err < 0) {
   23a16:	2800      	cmp	r0, #0
   23a18:	db01      	blt.n	23a1e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   23a1a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   23a1c:	2000      	movs	r0, #0
}
   23a1e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   23a20:	f06f 0004 	mvn.w	r0, #4
   23a24:	e7fb      	b.n	23a1e <clk_init+0x4a>
   23a26:	bf00      	nop
   23a28:	00023a69 	.word	0x00023a69
   23a2c:	0bad0000 	.word	0x0bad0000
   23a30:	00032bd4 	.word	0x00032bd4

00023a34 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   23a34:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   23a36:	230c      	movs	r3, #12
   23a38:	4809      	ldr	r0, [pc, #36]	; (23a60 <clkstarted_handle.constprop.0+0x2c>)
   23a3a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   23a3c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   23a3e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   23a40:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   23a44:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   23a46:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   23a48:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   23a4a:	4418      	add	r0, r3
   23a4c:	f00c f8a3 	bl	2fb96 <set_on_state>
	if (callback) {
   23a50:	b12d      	cbz	r5, 23a5e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   23a52:	4632      	mov	r2, r6
   23a54:	462b      	mov	r3, r5
   23a56:	4803      	ldr	r0, [pc, #12]	; (23a64 <clkstarted_handle.constprop.0+0x30>)
}
   23a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   23a5c:	4718      	bx	r3
}
   23a5e:	bd70      	pop	{r4, r5, r6, pc}
   23a60:	200029d0 	.word	0x200029d0
   23a64:	00032144 	.word	0x00032144

00023a68 <clock_event_handler>:
	switch (event) {
   23a68:	b110      	cbz	r0, 23a70 <clock_event_handler+0x8>
   23a6a:	2801      	cmp	r0, #1
   23a6c:	d004      	beq.n	23a78 <clock_event_handler+0x10>
   23a6e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   23a70:	4b03      	ldr	r3, [pc, #12]	; (23a80 <clock_event_handler+0x18>)
   23a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   23a74:	075b      	lsls	r3, r3, #29
   23a76:	d101      	bne.n	23a7c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   23a78:	f7ff bfdc 	b.w	23a34 <clkstarted_handle.constprop.0>
}
   23a7c:	4770      	bx	lr
   23a7e:	bf00      	nop
   23a80:	200029d0 	.word	0x200029d0

00023a84 <generic_hfclk_start>:
{
   23a84:	b508      	push	{r3, lr}
	__asm__ volatile(
   23a86:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a8a:	f3ef 8111 	mrs	r1, BASEPRI
   23a8e:	f383 8812 	msr	BASEPRI_MAX, r3
   23a92:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   23a96:	4a12      	ldr	r2, [pc, #72]	; (23ae0 <generic_hfclk_start+0x5c>)
   23a98:	6813      	ldr	r3, [r2, #0]
   23a9a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   23a9e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   23aa2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   23aa4:	d00c      	beq.n	23ac0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   23aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23aaa:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   23aae:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   23ab2:	f013 0301 	ands.w	r3, r3, #1
   23ab6:	d003      	beq.n	23ac0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   23ab8:	480a      	ldr	r0, [pc, #40]	; (23ae4 <generic_hfclk_start+0x60>)
   23aba:	f00c f86c 	bl	2fb96 <set_on_state>
			already_started = true;
   23abe:	2301      	movs	r3, #1
	__asm__ volatile(
   23ac0:	f381 8811 	msr	BASEPRI, r1
   23ac4:	f3bf 8f6f 	isb	sy
	if (already_started) {
   23ac8:	b123      	cbz	r3, 23ad4 <generic_hfclk_start+0x50>
}
   23aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   23ace:	2000      	movs	r0, #0
   23ad0:	f7ff bfb0 	b.w	23a34 <clkstarted_handle.constprop.0>
}
   23ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   23ad8:	2001      	movs	r0, #1
   23ada:	f002 b913 	b.w	25d04 <nrfx_clock_start>
   23ade:	bf00      	nop
   23ae0:	20002a20 	.word	0x20002a20
   23ae4:	20002a10 	.word	0x20002a10

00023ae8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23ae8:	4b09      	ldr	r3, [pc, #36]	; (23b10 <generic_hfclk_stop+0x28>)
   23aea:	f3bf 8f5b 	dmb	ish
   23aee:	e853 2f00 	ldrex	r2, [r3]
   23af2:	f022 0102 	bic.w	r1, r2, #2
   23af6:	e843 1000 	strex	r0, r1, [r3]
   23afa:	2800      	cmp	r0, #0
   23afc:	d1f7      	bne.n	23aee <generic_hfclk_stop+0x6>
   23afe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   23b02:	07d3      	lsls	r3, r2, #31
   23b04:	d402      	bmi.n	23b0c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   23b06:	2001      	movs	r0, #1
   23b08:	f00c bedc 	b.w	308c4 <nrfx_clock_stop>
}
   23b0c:	4770      	bx	lr
   23b0e:	bf00      	nop
   23b10:	20002a20 	.word	0x20002a20

00023b14 <api_blocking_start>:
{
   23b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   23b16:	2200      	movs	r2, #0
   23b18:	2301      	movs	r3, #1
   23b1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   23b1e:	ab04      	add	r3, sp, #16
   23b20:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   23b24:	4a09      	ldr	r2, [pc, #36]	; (23b4c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   23b26:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   23b2a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   23b2c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   23b30:	f00c f86a 	bl	2fc08 <api_start>
	if (err < 0) {
   23b34:	2800      	cmp	r0, #0
   23b36:	db05      	blt.n	23b44 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   23b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   23b3c:	2300      	movs	r3, #0
   23b3e:	4668      	mov	r0, sp
   23b40:	f004 f9c4 	bl	27ecc <z_impl_k_sem_take>
}
   23b44:	b007      	add	sp, #28
   23b46:	f85d fb04 	ldr.w	pc, [sp], #4
   23b4a:	bf00      	nop
   23b4c:	0002fbdb 	.word	0x0002fbdb

00023b50 <z_nrf_clock_control_lf_on>:
{
   23b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23b54:	493a      	ldr	r1, [pc, #232]	; (23c40 <z_nrf_clock_control_lf_on+0xf0>)
   23b56:	f3bf 8f5b 	dmb	ish
   23b5a:	4606      	mov	r6, r0
   23b5c:	2201      	movs	r2, #1
   23b5e:	e851 3f00 	ldrex	r3, [r1]
   23b62:	e841 2000 	strex	r0, r2, [r1]
   23b66:	2800      	cmp	r0, #0
   23b68:	d1f9      	bne.n	23b5e <z_nrf_clock_control_lf_on+0xe>
   23b6a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   23b6e:	b933      	cbnz	r3, 23b7e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   23b70:	4934      	ldr	r1, [pc, #208]	; (23c44 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   23b72:	4835      	ldr	r0, [pc, #212]	; (23c48 <z_nrf_clock_control_lf_on+0xf8>)
   23b74:	604b      	str	r3, [r1, #4]
   23b76:	60cb      	str	r3, [r1, #12]
   23b78:	608a      	str	r2, [r1, #8]
   23b7a:	f007 fffe 	bl	2bb7a <onoff_request>
	switch (start_mode) {
   23b7e:	1e73      	subs	r3, r6, #1
   23b80:	2b01      	cmp	r3, #1
   23b82:	d832      	bhi.n	23bea <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   23b84:	2e01      	cmp	r6, #1
   23b86:	d107      	bne.n	23b98 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   23b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23b8c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   23b90:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   23b94:	2b01      	cmp	r3, #1
   23b96:	d028      	beq.n	23bea <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   23b98:	f00d fd75 	bl	31686 <k_is_in_isr>
   23b9c:	4604      	mov	r4, r0
   23b9e:	b918      	cbnz	r0, 23ba8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   23ba0:	4b2a      	ldr	r3, [pc, #168]	; (23c4c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   23ba2:	781b      	ldrb	r3, [r3, #0]
   23ba4:	2b00      	cmp	r3, #0
   23ba6:	d144      	bne.n	23c32 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   23ba8:	f04f 0340 	mov.w	r3, #64	; 0x40
   23bac:	f3ef 8511 	mrs	r5, BASEPRI
   23bb0:	f383 8812 	msr	BASEPRI_MAX, r3
   23bb4:	f3bf 8f6f 	isb	sy
   23bb8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23bba:	4f25      	ldr	r7, [pc, #148]	; (23c50 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23bbc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 23c54 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23bc0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 23c58 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   23bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23bc8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23bcc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   23bd0:	03d2      	lsls	r2, r2, #15
   23bd2:	d50c      	bpl.n	23bee <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   23bd4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   23bd8:	2b01      	cmp	r3, #1
   23bda:	d001      	beq.n	23be0 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   23bdc:	2e01      	cmp	r6, #1
   23bde:	d106      	bne.n	23bee <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   23be0:	b30c      	cbz	r4, 23c26 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   23be2:	f385 8811 	msr	BASEPRI, r5
   23be6:	f3bf 8f6f 	isb	sy
}
   23bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   23bee:	b1ac      	cbz	r4, 23c1c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   23bf0:	4628      	mov	r0, r5
   23bf2:	f7fa fd81 	bl	1e6f8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   23bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23bfa:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   23bfe:	2b00      	cmp	r3, #0
   23c00:	d1e0      	bne.n	23bc4 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23c02:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   23c04:	2900      	cmp	r1, #0
   23c06:	d0dd      	beq.n	23bc4 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23c08:	603b      	str	r3, [r7, #0]
   23c0a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   23c0c:	2301      	movs	r3, #1
   23c0e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   23c12:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23c16:	f8c9 3000 	str.w	r3, [r9]
}
   23c1a:	e7d3      	b.n	23bc4 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   23c1c:	2100      	movs	r1, #0
   23c1e:	2021      	movs	r0, #33	; 0x21
   23c20:	f004 fe54 	bl	288cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   23c24:	e7e7      	b.n	23bf6 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   23c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23c2a:	2202      	movs	r2, #2
   23c2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23c30:	e7db      	b.n	23bea <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   23c32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23c36:	2202      	movs	r2, #2
   23c38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   23c3c:	4605      	mov	r5, r0
}
   23c3e:	e7bc      	b.n	23bba <z_nrf_clock_control_lf_on+0x6a>
   23c40:	20002a24 	.word	0x20002a24
   23c44:	200029c0 	.word	0x200029c0
   23c48:	200029ec 	.word	0x200029ec
   23c4c:	200041ce 	.word	0x200041ce
   23c50:	40000104 	.word	0x40000104
   23c54:	e000e100 	.word	0xe000e100
   23c58:	40000008 	.word	0x40000008

00023c5c <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   23c5c:	0942      	lsrs	r2, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   23c5e:	b570      	push	{r4, r5, r6, lr}
   23c60:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   23c62:	d002      	beq.n	23c6a <nrfx_gpio_handler+0xe>
   23c64:	2a01      	cmp	r2, #1
   23c66:	d01d      	beq.n	23ca4 <nrfx_gpio_handler+0x48>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   23c68:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   23c6a:	4e0f      	ldr	r6, [pc, #60]	; (23ca8 <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   23c6c:	6932      	ldr	r2, [r6, #16]
   23c6e:	6851      	ldr	r1, [r2, #4]
   23c70:	2900      	cmp	r1, #0
   23c72:	d0f9      	beq.n	23c68 <nrfx_gpio_handler+0xc>
   23c74:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   23c76:	f003 031f 	and.w	r3, r3, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   23c7a:	2501      	movs	r5, #1
   23c7c:	2c00      	cmp	r4, #0
   23c7e:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
   23c82:	bf38      	it	cc
   23c84:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   23c86:	688a      	ldr	r2, [r1, #8]
   23c88:	402a      	ands	r2, r5
   23c8a:	d002      	beq.n	23c92 <nrfx_gpio_handler+0x36>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   23c8c:	684b      	ldr	r3, [r1, #4]
   23c8e:	4630      	mov	r0, r6
   23c90:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   23c92:	2c00      	cmp	r4, #0
   23c94:	d0e8      	beq.n	23c68 <nrfx_gpio_handler+0xc>
   23c96:	6823      	ldr	r3, [r4, #0]
   23c98:	2b00      	cmp	r3, #0
   23c9a:	bf38      	it	cc
   23c9c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23c9e:	4621      	mov	r1, r4
   23ca0:	461c      	mov	r4, r3
   23ca2:	e7f0      	b.n	23c86 <nrfx_gpio_handler+0x2a>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   23ca4:	4e01      	ldr	r6, [pc, #4]	; (23cac <nrfx_gpio_handler+0x50>)
   23ca6:	e7e1      	b.n	23c6c <nrfx_gpio_handler+0x10>
   23ca8:	00032160 	.word	0x00032160
   23cac:	0003217c 	.word	0x0003217c

00023cb0 <gpio_nrfx_pin_interrupt_configure>:
{
   23cb0:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   23cb2:	6840      	ldr	r0, [r0, #4]
   23cb4:	7b04      	ldrb	r4, [r0, #12]
   23cb6:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   23cba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   23cbe:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   23cc2:	b085      	sub	sp, #20
   23cc4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   23cc8:	d104      	bne.n	23cd4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   23cca:	4628      	mov	r0, r5
   23ccc:	f002 fcb2 	bl	26634 <nrfx_gpiote_trigger_disable>
	return 0;
   23cd0:	2000      	movs	r0, #0
   23cd2:	e032      	b.n	23d3a <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   23cd4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   23cd8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   23cdc:	d12f      	bne.n	23d3e <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   23cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   23ce2:	bf0c      	ite	eq
   23ce4:	2304      	moveq	r3, #4
   23ce6:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   23ce8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   23cec:	6883      	ldr	r3, [r0, #8]
   23cee:	fa23 f101 	lsr.w	r1, r3, r1
   23cf2:	07c9      	lsls	r1, r1, #31
   23cf4:	d42f      	bmi.n	23d56 <gpio_nrfx_pin_interrupt_configure+0xa6>
   23cf6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   23cfa:	d12c      	bne.n	23d56 <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
   23cfc:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   23cfe:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   23d00:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   23d04:	4a1c      	ldr	r2, [pc, #112]	; (23d78 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   23d06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   23d0a:	bf18      	it	ne
   23d0c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   23d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   23d14:	07db      	lsls	r3, r3, #31
   23d16:	d41e      	bmi.n	23d56 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   23d18:	f10d 0407 	add.w	r4, sp, #7
   23d1c:	4621      	mov	r1, r4
   23d1e:	4628      	mov	r0, r5
   23d20:	f002 fbf4 	bl	2650c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   23d24:	4b15      	ldr	r3, [pc, #84]	; (23d7c <gpio_nrfx_pin_interrupt_configure+0xcc>)
   23d26:	4298      	cmp	r0, r3
   23d28:	d114      	bne.n	23d54 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   23d2a:	4620      	mov	r0, r4
   23d2c:	f002 fc38 	bl	265a0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   23d30:	4b13      	ldr	r3, [pc, #76]	; (23d80 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   23d32:	4298      	cmp	r0, r3
   23d34:	d00e      	beq.n	23d54 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   23d36:	f06f 000b 	mvn.w	r0, #11
}
   23d3a:	b005      	add	sp, #20
   23d3c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   23d3e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   23d42:	d005      	beq.n	23d50 <gpio_nrfx_pin_interrupt_configure+0xa0>
   23d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   23d48:	bf0c      	ite	eq
   23d4a:	2302      	moveq	r3, #2
   23d4c:	2301      	movne	r3, #1
   23d4e:	e7cb      	b.n	23ce8 <gpio_nrfx_pin_interrupt_configure+0x38>
   23d50:	2303      	movs	r3, #3
   23d52:	e7c9      	b.n	23ce8 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   23d54:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   23d56:	2300      	movs	r3, #0
   23d58:	4619      	mov	r1, r3
   23d5a:	aa02      	add	r2, sp, #8
   23d5c:	4628      	mov	r0, r5
   23d5e:	f002 fab3 	bl	262c8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   23d62:	4b07      	ldr	r3, [pc, #28]	; (23d80 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   23d64:	4298      	cmp	r0, r3
   23d66:	d104      	bne.n	23d72 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   23d68:	2101      	movs	r1, #1
   23d6a:	4628      	mov	r0, r5
   23d6c:	f002 fc1e 	bl	265ac <nrfx_gpiote_trigger_enable>
   23d70:	e7ae      	b.n	23cd0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   23d72:	f06f 0004 	mvn.w	r0, #4
   23d76:	e7e0      	b.n	23d3a <gpio_nrfx_pin_interrupt_configure+0x8a>
   23d78:	50000300 	.word	0x50000300
   23d7c:	0bad0004 	.word	0x0bad0004
   23d80:	0bad0000 	.word	0x0bad0000

00023d84 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   23d84:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   23d86:	f002 fbfb 	bl	26580 <nrfx_gpiote_is_init>
   23d8a:	4604      	mov	r4, r0
   23d8c:	b968      	cbnz	r0, 23daa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   23d8e:	f002 fbcf 	bl	26530 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   23d92:	4b08      	ldr	r3, [pc, #32]	; (23db4 <gpio_nrfx_init+0x30>)
   23d94:	4298      	cmp	r0, r3
   23d96:	d10a      	bne.n	23dae <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   23d98:	4807      	ldr	r0, [pc, #28]	; (23db8 <gpio_nrfx_init+0x34>)
   23d9a:	4621      	mov	r1, r4
   23d9c:	f002 fbb0 	bl	26500 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   23da0:	4622      	mov	r2, r4
   23da2:	2105      	movs	r1, #5
   23da4:	2006      	movs	r0, #6
   23da6:	f7fa fce3 	bl	1e770 <z_arm_irq_priority_set>
		return 0;
   23daa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   23dac:	bd10      	pop	{r4, pc}
		return -EIO;
   23dae:	f06f 0004 	mvn.w	r0, #4
   23db2:	e7fb      	b.n	23dac <gpio_nrfx_init+0x28>
   23db4:	0bad0000 	.word	0x0bad0000
   23db8:	00023c5d 	.word	0x00023c5d

00023dbc <gpio_nrfx_pin_configure>:
{
   23dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   23dc0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23dc2:	7b3b      	ldrb	r3, [r7, #12]
   23dc4:	f001 051f 	and.w	r5, r1, #31
{
   23dc8:	b085      	sub	sp, #20
   23dca:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23dcc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   23dd0:	4614      	mov	r4, r2
   23dd2:	b9ca      	cbnz	r2, 23e08 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   23dd4:	a902      	add	r1, sp, #8
   23dd6:	4628      	mov	r0, r5
   23dd8:	f002 fb98 	bl	2650c <nrfx_gpiote_channel_get>
   23ddc:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   23dde:	4628      	mov	r0, r5
   23de0:	f002 fc4a 	bl	26678 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   23de4:	4b48      	ldr	r3, [pc, #288]	; (23f08 <gpio_nrfx_pin_configure+0x14c>)
   23de6:	4298      	cmp	r0, r3
   23de8:	d004      	beq.n	23df4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   23dea:	f06f 0004 	mvn.w	r0, #4
}
   23dee:	b005      	add	sp, #20
   23df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   23df4:	4284      	cmp	r4, r0
   23df6:	d105      	bne.n	23e04 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   23df8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   23dfc:	f002 fbca 	bl	26594 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   23e00:	42a0      	cmp	r0, r4
   23e02:	d1f2      	bne.n	23dea <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   23e04:	2000      	movs	r0, #0
   23e06:	e7f2      	b.n	23dee <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   23e08:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   23e0c:	f10d 0103 	add.w	r1, sp, #3
   23e10:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   23e12:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   23e16:	f002 fb79 	bl	2650c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   23e1a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   23e1c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   23e1e:	aa02      	add	r2, sp, #8
   23e20:	4649      	mov	r1, r9
   23e22:	4628      	mov	r0, r5
   23e24:	f002 fa50 	bl	262c8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   23e28:	4b37      	ldr	r3, [pc, #220]	; (23f08 <gpio_nrfx_pin_configure+0x14c>)
   23e2a:	4298      	cmp	r0, r3
   23e2c:	d002      	beq.n	23e34 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   23e2e:	f06f 0015 	mvn.w	r0, #21
   23e32:	e7dc      	b.n	23dee <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   23e34:	4580      	cmp	r8, r0
   23e36:	d103      	bne.n	23e40 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   23e38:	f89d 0003 	ldrb.w	r0, [sp, #3]
   23e3c:	f002 fbaa 	bl	26594 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   23e40:	05a3      	lsls	r3, r4, #22
   23e42:	d54e      	bpl.n	23ee2 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   23e44:	4b31      	ldr	r3, [pc, #196]	; (23f0c <gpio_nrfx_pin_configure+0x150>)
   23e46:	4a32      	ldr	r2, [pc, #200]	; (23f10 <gpio_nrfx_pin_configure+0x154>)
   23e48:	4023      	ands	r3, r4
   23e4a:	4293      	cmp	r3, r2
   23e4c:	d03a      	beq.n	23ec4 <gpio_nrfx_pin_configure+0x108>
   23e4e:	d80c      	bhi.n	23e6a <gpio_nrfx_pin_configure+0xae>
   23e50:	2b06      	cmp	r3, #6
   23e52:	d014      	beq.n	23e7e <gpio_nrfx_pin_configure+0xc2>
   23e54:	d804      	bhi.n	23e60 <gpio_nrfx_pin_configure+0xa4>
   23e56:	b193      	cbz	r3, 23e7e <gpio_nrfx_pin_configure+0xc2>
   23e58:	2b02      	cmp	r3, #2
   23e5a:	d1e8      	bne.n	23e2e <gpio_nrfx_pin_configure+0x72>
   23e5c:	2304      	movs	r3, #4
   23e5e:	e00e      	b.n	23e7e <gpio_nrfx_pin_configure+0xc2>
   23e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   23e64:	d1e3      	bne.n	23e2e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   23e66:	2301      	movs	r3, #1
   23e68:	e009      	b.n	23e7e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   23e6a:	4a2a      	ldr	r2, [pc, #168]	; (23f14 <gpio_nrfx_pin_configure+0x158>)
   23e6c:	4293      	cmp	r3, r2
   23e6e:	d02b      	beq.n	23ec8 <gpio_nrfx_pin_configure+0x10c>
   23e70:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   23e74:	d02a      	beq.n	23ecc <gpio_nrfx_pin_configure+0x110>
   23e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   23e7a:	d1d8      	bne.n	23e2e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   23e7c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   23e7e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   23e82:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   23e86:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   23e8a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   23e8c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   23e90:	bf54      	ite	pl
   23e92:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   23e96:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   23e98:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   23e9a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   23e9e:	d517      	bpl.n	23ed0 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   23ea0:	687b      	ldr	r3, [r7, #4]
   23ea2:	2101      	movs	r1, #1
   23ea4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   23ea8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   23eac:	2200      	movs	r2, #0
   23eae:	a901      	add	r1, sp, #4
   23eb0:	4628      	mov	r0, r5
   23eb2:	f002 fab5 	bl	26420 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   23eb6:	4b14      	ldr	r3, [pc, #80]	; (23f08 <gpio_nrfx_pin_configure+0x14c>)
   23eb8:	4298      	cmp	r0, r3
   23eba:	bf14      	ite	ne
   23ebc:	f06f 0015 	mvnne.w	r0, #21
   23ec0:	2000      	moveq	r0, #0
   23ec2:	e794      	b.n	23dee <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   23ec4:	2307      	movs	r3, #7
   23ec6:	e7da      	b.n	23e7e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   23ec8:	2305      	movs	r3, #5
   23eca:	e7d8      	b.n	23e7e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   23ecc:	2303      	movs	r3, #3
   23ece:	e7d6      	b.n	23e7e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   23ed0:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   23ed2:	bf41      	itttt	mi
   23ed4:	687b      	ldrmi	r3, [r7, #4]
   23ed6:	2101      	movmi	r1, #1
   23ed8:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   23edc:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   23ee0:	e7e4      	b.n	23eac <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   23ee2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   23ee4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   23ee8:	bf54      	ite	pl
   23eea:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   23eee:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   23ef0:	461a      	mov	r2, r3
   23ef2:	a901      	add	r1, sp, #4
   23ef4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   23ef6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   23efa:	f002 f9e5 	bl	262c8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   23efe:	4b02      	ldr	r3, [pc, #8]	; (23f08 <gpio_nrfx_pin_configure+0x14c>)
   23f00:	4298      	cmp	r0, r3
   23f02:	f43f af7f 	beq.w	23e04 <gpio_nrfx_pin_configure+0x48>
   23f06:	e792      	b.n	23e2e <gpio_nrfx_pin_configure+0x72>
   23f08:	0bad0000 	.word	0x0bad0000
   23f0c:	00f00006 	.word	0x00f00006
   23f10:	00100006 	.word	0x00100006
   23f14:	00400002 	.word	0x00400002

00023f18 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   23f18:	b508      	push	{r3, lr}
	nrfx_err_t err = nrfx_twi_bus_recover(get_dev_config(dev)->config.scl,
   23f1a:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   23f1c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   23f20:	f003 fbb0 	bl	27684 <nrfx_twi_twim_bus_recover>
					      get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   23f24:	4b03      	ldr	r3, [pc, #12]	; (23f34 <i2c_nrfx_twi_recover_bus+0x1c>)
   23f26:	4298      	cmp	r0, r3
}
   23f28:	bf14      	ite	ne
   23f2a:	f06f 000f 	mvnne.w	r0, #15
   23f2e:	2000      	moveq	r0, #0
   23f30:	bd08      	pop	{r3, pc}
   23f32:	bf00      	nop
   23f34:	0bad0000 	.word	0x0bad0000

00023f38 <twi_nrfx_pm_action>:
}

#ifdef CONFIG_PM_DEVICE
static int twi_nrfx_pm_action(const struct device *dev,
			      enum pm_device_action action)
{
   23f38:	b538      	push	{r3, r4, r5, lr}
   23f3a:	4605      	mov	r5, r0
	int ret = 0;

	switch (action) {
   23f3c:	b181      	cbz	r1, 23f60 <twi_nrfx_pm_action+0x28>
   23f3e:	2901      	cmp	r1, #1
   23f40:	d112      	bne.n	23f68 <twi_nrfx_pm_action+0x30>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   23f42:	6840      	ldr	r0, [r0, #4]
   23f44:	692b      	ldr	r3, [r5, #16]
   23f46:	4a0b      	ldr	r2, [pc, #44]	; (23f74 <twi_nrfx_pm_action+0x3c>)
   23f48:	f100 0108 	add.w	r1, r0, #8
   23f4c:	f003 f990 	bl	27270 <nrfx_twi_init>
	case PM_DEVICE_ACTION_RESUME:
		init_twi(dev);
		if (get_dev_data(dev)->dev_config) {
   23f50:	692b      	ldr	r3, [r5, #16]
   23f52:	6b59      	ldr	r1, [r3, #52]	; 0x34
   23f54:	b159      	cbz	r1, 23f6e <twi_nrfx_pm_action+0x36>
			i2c_nrfx_twi_configure(dev,
   23f56:	4628      	mov	r0, r5
   23f58:	f00b fec3 	bl	2fce2 <i2c_nrfx_twi_configure>
   23f5c:	2000      	movs	r0, #0
	default:
		ret = -ENOTSUP;
	}

	return ret;
}
   23f5e:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_twi_uninit(&get_dev_config(dev)->twi);
   23f60:	6840      	ldr	r0, [r0, #4]
   23f62:	f003 fa0f 	bl	27384 <nrfx_twi_uninit>
		break;
   23f66:	e7f9      	b.n	23f5c <twi_nrfx_pm_action+0x24>
	switch (action) {
   23f68:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23f6c:	e7f7      	b.n	23f5e <twi_nrfx_pm_action+0x26>
   23f6e:	4608      	mov	r0, r1
	return ret;
   23f70:	e7f5      	b.n	23f5e <twi_nrfx_pm_action+0x26>
   23f72:	bf00      	nop
   23f74:	00023f79 	.word	0x00023f79

00023f78 <event_handler>:
	switch (p_event->type) {
   23f78:	7803      	ldrb	r3, [r0, #0]
   23f7a:	2b01      	cmp	r3, #1
   23f7c:	d008      	beq.n	23f90 <event_handler+0x18>
   23f7e:	2b02      	cmp	r3, #2
   23f80:	d008      	beq.n	23f94 <event_handler+0x1c>
   23f82:	b94b      	cbnz	r3, 23f98 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   23f84:	4b05      	ldr	r3, [pc, #20]	; (23f9c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   23f86:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   23f88:	f101 0018 	add.w	r0, r1, #24
   23f8c:	f003 bf78 	b.w	27e80 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   23f90:	4b03      	ldr	r3, [pc, #12]	; (23fa0 <event_handler+0x28>)
   23f92:	e7f8      	b.n	23f86 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   23f94:	4b03      	ldr	r3, [pc, #12]	; (23fa4 <event_handler+0x2c>)
   23f96:	e7f6      	b.n	23f86 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   23f98:	4b03      	ldr	r3, [pc, #12]	; (23fa8 <event_handler+0x30>)
   23f9a:	e7f4      	b.n	23f86 <event_handler+0xe>
   23f9c:	0bad0000 	.word	0x0bad0000
   23fa0:	0bae0001 	.word	0x0bae0001
   23fa4:	0bae0002 	.word	0x0bae0002
   23fa8:	0bad0001 	.word	0x0bad0001

00023fac <i2c_nrfx_twi_transfer>:
{
   23fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fb0:	4604      	mov	r4, r0
   23fb2:	b087      	sub	sp, #28
   23fb4:	460d      	mov	r5, r1
   23fb6:	4617      	mov	r7, r2
   23fb8:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   23fba:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   23fbc:	f04f 32ff 	mov.w	r2, #4294967295
   23fc0:	f04f 33ff 	mov.w	r3, #4294967295
   23fc4:	f003 ff82 	bl	27ecc <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   23fc8:	6920      	ldr	r0, [r4, #16]
   23fca:	3018      	adds	r0, #24
   23fcc:	2200      	movs	r2, #0
   23fce:	2300      	movs	r3, #0
   23fd0:	f003 ff7c 	bl	27ecc <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   23fd4:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   23fd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 240a0 <i2c_nrfx_twi_transfer+0xf4>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   23fda:	f003 f9a7 	bl	2732c <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   23fde:	f04f 0800 	mov.w	r8, #0
   23fe2:	45b8      	cmp	r8, r7
   23fe4:	d301      	bcc.n	23fea <i2c_nrfx_twi_transfer+0x3e>
   23fe6:	2500      	movs	r5, #0
   23fe8:	e029      	b.n	2403e <i2c_nrfx_twi_transfer+0x92>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   23fea:	f895 b008 	ldrb.w	fp, [r5, #8]
   23fee:	f01b 0608 	ands.w	r6, fp, #8
   23ff2:	d14c      	bne.n	2408e <i2c_nrfx_twi_transfer+0xe2>
		nrfx_twi_xfer_desc_t cur_xfer = {
   23ff4:	2214      	movs	r2, #20
   23ff6:	4631      	mov	r1, r6
   23ff8:	a801      	add	r0, sp, #4
   23ffa:	f008 fe69 	bl	2ccd0 <memset>
   23ffe:	686a      	ldr	r2, [r5, #4]
   24000:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   24002:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   24006:	682a      	ldr	r2, [r5, #0]
   24008:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   2400c:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   24010:	f88d 9005 	strb.w	r9, [sp, #5]
   24014:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   24016:	d11c      	bne.n	24052 <i2c_nrfx_twi_transfer+0xa6>
			if ((i < (num_msgs - 1)) &&
   24018:	1e7a      	subs	r2, r7, #1
   2401a:	4542      	cmp	r2, r8
   2401c:	d902      	bls.n	24024 <i2c_nrfx_twi_transfer+0x78>
   2401e:	7d2a      	ldrb	r2, [r5, #20]
   24020:	0752      	lsls	r2, r2, #29
   24022:	d518      	bpl.n	24056 <i2c_nrfx_twi_transfer+0xaa>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   24024:	bb9b      	cbnz	r3, 2408e <i2c_nrfx_twi_transfer+0xe2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   24026:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   24028:	6860      	ldr	r0, [r4, #4]
   2402a:	a901      	add	r1, sp, #4
   2402c:	f003 f9d6 	bl	273dc <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   24030:	4550      	cmp	r0, sl
   24032:	d012      	beq.n	2405a <i2c_nrfx_twi_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
   24034:	4b19      	ldr	r3, [pc, #100]	; (2409c <i2c_nrfx_twi_transfer+0xf0>)
   24036:	4298      	cmp	r0, r3
   24038:	d02c      	beq.n	24094 <i2c_nrfx_twi_transfer+0xe8>
			ret = -EIO;
   2403a:	f06f 0504 	mvn.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   2403e:	6860      	ldr	r0, [r4, #4]
   24040:	f003 f984 	bl	2734c <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   24044:	6920      	ldr	r0, [r4, #16]
	z_impl_k_sem_give(sem);
   24046:	f003 ff1b 	bl	27e80 <z_impl_k_sem_give>
}
   2404a:	4628      	mov	r0, r5
   2404c:	b007      	add	sp, #28
   2404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   24052:	4632      	mov	r2, r6
   24054:	e7e8      	b.n	24028 <i2c_nrfx_twi_transfer+0x7c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   24056:	2240      	movs	r2, #64	; 0x40
   24058:	e7e6      	b.n	24028 <i2c_nrfx_twi_transfer+0x7c>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   2405a:	6920      	ldr	r0, [r4, #16]
   2405c:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   2405e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   24062:	2300      	movs	r3, #0
   24064:	f003 ff32 	bl	27ecc <z_impl_k_sem_take>
		if (ret != 0) {
   24068:	b140      	cbz	r0, 2407c <i2c_nrfx_twi_transfer+0xd0>
			nrfx_twi_disable(&get_dev_config(dev)->twi);
   2406a:	6860      	ldr	r0, [r4, #4]
   2406c:	f003 f96e 	bl	2734c <nrfx_twi_disable>
			nrfx_twi_bus_recover(get_dev_config(dev)->config.scl,
   24070:	6863      	ldr	r3, [r4, #4]
   24072:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   24076:	f003 fb05 	bl	27684 <nrfx_twi_twim_bus_recover>
   2407a:	e7de      	b.n	2403a <i2c_nrfx_twi_transfer+0x8e>
		res = get_dev_data(dev)->res;
   2407c:	6923      	ldr	r3, [r4, #16]
   2407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   24080:	4553      	cmp	r3, sl
   24082:	f105 050c 	add.w	r5, r5, #12
   24086:	d1d8      	bne.n	2403a <i2c_nrfx_twi_transfer+0x8e>
	for (size_t i = 0; i < num_msgs; i++) {
   24088:	f108 0801 	add.w	r8, r8, #1
   2408c:	e7a9      	b.n	23fe2 <i2c_nrfx_twi_transfer+0x36>
			ret = -ENOTSUP;
   2408e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   24092:	e7d4      	b.n	2403e <i2c_nrfx_twi_transfer+0x92>
				ret = -EBUSY;
   24094:	f06f 050f 	mvn.w	r5, #15
   24098:	e7d1      	b.n	2403e <i2c_nrfx_twi_transfer+0x92>
   2409a:	bf00      	nop
   2409c:	0bad000b 	.word	0x0bad000b
   240a0:	0bad0000 	.word	0x0bad0000

000240a4 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   240a4:	b510      	push	{r4, lr}
   240a6:	4604      	mov	r4, r0
   240a8:	2200      	movs	r2, #0
   240aa:	2101      	movs	r1, #1
   240ac:	2003      	movs	r0, #3
   240ae:	f7fa fb5f 	bl	1e770 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   240b2:	6860      	ldr	r0, [r4, #4]
   240b4:	6923      	ldr	r3, [r4, #16]
   240b6:	4a06      	ldr	r2, [pc, #24]	; (240d0 <twi_0_init+0x2c>)
   240b8:	f100 0108 	add.w	r1, r0, #8
   240bc:	f003 f8d8 	bl	27270 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   240c0:	4b04      	ldr	r3, [pc, #16]	; (240d4 <twi_0_init+0x30>)
   240c2:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
   240c4:	bf14      	ite	ne
   240c6:	f06f 000f 	mvnne.w	r0, #15
   240ca:	2000      	moveq	r0, #0
   240cc:	bd10      	pop	{r4, pc}
   240ce:	bf00      	nop
   240d0:	00023f79 	.word	0x00023f79
   240d4:	0bad0000 	.word	0x0bad0000

000240d8 <bme280_channel_get>:
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme280_data *data = to_data(dev);

	switch (chan) {
   240d8:	290e      	cmp	r1, #14
{
   240da:	b510      	push	{r4, lr}
	struct bme280_data *data = to_data(dev);
   240dc:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   240de:	d010      	beq.n	24102 <bme280_channel_get+0x2a>
   240e0:	2910      	cmp	r1, #16
   240e2:	d01d      	beq.n	24120 <bme280_channel_get+0x48>
   240e4:	290d      	cmp	r1, #13
   240e6:	d124      	bne.n	24132 <bme280_channel_get+0x5a>
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->comp_temp has a resolution of 0.01 degC.  So
		 * 5123 equals 51.23 degC.
		 */
		val->val1 = data->comp_temp / 100;
   240e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
   240ea:	2164      	movs	r1, #100	; 0x64
   240ec:	fb90 f3f1 	sdiv	r3, r0, r1
   240f0:	6013      	str	r3, [r2, #0]
		val->val2 = data->comp_temp % 100 * 10000;
   240f2:	fb01 0313 	mls	r3, r1, r3, r0
   240f6:	f242 7110 	movw	r1, #10000	; 0x2710
   240fa:	434b      	muls	r3, r1
		 * data->comp_humidity has 22 integer bits and 10
		 * fractional.  Output value of 47445 represents
		 * 47445/1024 = 46.333 %RH
		 */
		val->val1 = (data->comp_humidity >> 10);
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
   240fc:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
   240fe:	2000      	movs	r0, #0
}
   24100:	bd10      	pop	{r4, pc}
		val->val1 = (data->comp_press >> 8) / 1000U;
   24102:	6a99      	ldr	r1, [r3, #40]	; 0x28
   24104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24108:	0a0c      	lsrs	r4, r1, #8
			(((data->comp_press & 0xff) * 1000U) >> 8);
   2410a:	b2c9      	uxtb	r1, r1
		val->val1 = (data->comp_press >> 8) / 1000U;
   2410c:	fbb4 f0f3 	udiv	r0, r4, r3
   24110:	6010      	str	r0, [r2, #0]
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
   24112:	fb03 4010 	mls	r0, r3, r0, r4
			(((data->comp_press & 0xff) * 1000U) >> 8);
   24116:	4359      	muls	r1, r3
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
   24118:	4343      	muls	r3, r0
   2411a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
   2411e:	e7ed      	b.n	240fc <bme280_channel_get+0x24>
		val->val1 = (data->comp_humidity >> 10);
   24120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24122:	0a99      	lsrs	r1, r3, #10
   24124:	6011      	str	r1, [r2, #0]
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
   24126:	f3c3 0109 	ubfx	r1, r3, #0, #10
   2412a:	4b03      	ldr	r3, [pc, #12]	; (24138 <bme280_channel_get+0x60>)
   2412c:	434b      	muls	r3, r1
   2412e:	0a9b      	lsrs	r3, r3, #10
   24130:	e7e4      	b.n	240fc <bme280_channel_get+0x24>
	switch (chan) {
   24132:	f06f 0015 	mvn.w	r0, #21
   24136:	e7e3      	b.n	24100 <bme280_channel_get+0x28>
   24138:	000f4240 	.word	0x000f4240

0002413c <transfer_next_chunk>:

	return 0;
}

static void transfer_next_chunk(const struct device *dev)
{
   2413c:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2413e:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   24140:	6daa      	ldr	r2, [r5, #88]	; 0x58
   24142:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   24144:	b085      	sub	sp, #20
   24146:	b982      	cbnz	r2, 2416a <transfer_next_chunk+0x2e>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   24148:	bb73      	cbnz	r3, 241a8 <transfer_next_chunk+0x6c>
	int error = 0;
   2414a:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   2414c:	2200      	movs	r2, #0
   2414e:	4611      	mov	r1, r2
   24150:	4628      	mov	r0, r5
   24152:	f00c f8b1 	bl	302b8 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   24156:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   24158:	f105 0028 	add.w	r0, r5, #40	; 0x28
   2415c:	f003 fe90 	bl	27e80 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
   24160:	2300      	movs	r3, #0
   24162:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   24166:	b005      	add	sp, #20
   24168:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   2416a:	4611      	mov	r1, r2
   2416c:	b113      	cbz	r3, 24174 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   2416e:	429a      	cmp	r2, r3
   24170:	bf28      	it	cs
   24172:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   24174:	6d6c      	ldr	r4, [r5, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   24176:	66a9      	str	r1, [r5, #104]	; 0x68
		xfer.p_tx_buffer = ctx->tx_buf;
   24178:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   2417a:	b1bc      	cbz	r4, 241ac <transfer_next_chunk+0x70>
   2417c:	2a00      	cmp	r2, #0
   2417e:	bf18      	it	ne
   24180:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   24182:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   24184:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   24186:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   24188:	b192      	cbz	r2, 241b0 <transfer_next_chunk+0x74>
   2418a:	2b00      	cmp	r3, #0
   2418c:	bf18      	it	ne
   2418e:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   24190:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   24192:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   24194:	2200      	movs	r2, #0
   24196:	4669      	mov	r1, sp
   24198:	f002 fcb0 	bl	26afc <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   2419c:	4b05      	ldr	r3, [pc, #20]	; (241b4 <transfer_next_chunk+0x78>)
   2419e:	4298      	cmp	r0, r3
   241a0:	d0e1      	beq.n	24166 <transfer_next_chunk+0x2a>
		error = -EIO;
   241a2:	f06f 0404 	mvn.w	r4, #4
   241a6:	e7d1      	b.n	2414c <transfer_next_chunk+0x10>
   241a8:	4619      	mov	r1, r3
   241aa:	e7e3      	b.n	24174 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   241ac:	4622      	mov	r2, r4
   241ae:	e7e8      	b.n	24182 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   241b0:	4613      	mov	r3, r2
   241b2:	e7ed      	b.n	24190 <transfer_next_chunk+0x54>
   241b4:	0bad0000 	.word	0x0bad0000

000241b8 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
   241b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241bc:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   241be:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   241c0:	6904      	ldr	r4, [r0, #16]
{
   241c2:	4681      	mov	r9, r0
   241c4:	0498      	lsls	r0, r3, #18
   241c6:	b089      	sub	sp, #36	; 0x24
   241c8:	460e      	mov	r6, r1
   241ca:	4690      	mov	r8, r2
   241cc:	f100 80c8 	bmi.w	24360 <spi_nrfx_transceive+0x1a8>
	return z_impl_k_sem_take(sem, timeout);
   241d0:	f04f 32ff 	mov.w	r2, #4294967295
   241d4:	f04f 33ff 	mov.w	r3, #4294967295
   241d8:	f104 0010 	add.w	r0, r4, #16
   241dc:	f003 fe76 	bl	27ecc <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   241e0:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   241e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   241e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   241ea:	9300      	str	r3, [sp, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   241ec:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   241f0:	9301      	str	r3, [sp, #4]
   241f2:	b11b      	cbz	r3, 241fc <spi_nrfx_transceive+0x44>
   241f4:	f8da 3000 	ldr.w	r3, [sl]
   241f8:	429e      	cmp	r6, r3
   241fa:	d05f      	beq.n	242bc <spi_nrfx_transceive+0x104>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   241fc:	88b7      	ldrh	r7, [r6, #4]
   241fe:	0539      	lsls	r1, r7, #20
   24200:	f100 80dd 	bmi.w	243be <spi_nrfx_transceive+0x206>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   24204:	f017 0f09 	tst.w	r7, #9
   24208:	f040 80d6 	bne.w	243b8 <spi_nrfx_transceive+0x200>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   2420c:	f3c7 1345 	ubfx	r3, r7, #5, #6
   24210:	2b08      	cmp	r3, #8
   24212:	f040 80d1 	bne.w	243b8 <spi_nrfx_transceive+0x200>
	if (spi_cfg->frequency < 125000) {
   24216:	6835      	ldr	r5, [r6, #0]
   24218:	4b74      	ldr	r3, [pc, #464]	; (243ec <spi_nrfx_transceive+0x234>)
   2421a:	429d      	cmp	r5, r3
   2421c:	f240 80cc 	bls.w	243b8 <spi_nrfx_transceive+0x200>
	config = dev_config->def_config;
   24220:	9b00      	ldr	r3, [sp, #0]
   24222:	f103 0e08 	add.w	lr, r3, #8
   24226:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2422a:	f10d 0c0c 	add.w	ip, sp, #12
   2422e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   24232:	f8de 3000 	ldr.w	r3, [lr]
   24236:	f8cc 3000 	str.w	r3, [ip]
	if (frequency < 250000) {
   2423a:	4b6d      	ldr	r3, [pc, #436]	; (243f0 <spi_nrfx_transceive+0x238>)
   2423c:	429d      	cmp	r5, r3
   2423e:	f240 8098 	bls.w	24372 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 500000) {
   24242:	4b6c      	ldr	r3, [pc, #432]	; (243f4 <spi_nrfx_transceive+0x23c>)
   24244:	429d      	cmp	r5, r3
   24246:	f240 8097 	bls.w	24378 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 1000000) {
   2424a:	4b6b      	ldr	r3, [pc, #428]	; (243f8 <spi_nrfx_transceive+0x240>)
   2424c:	429d      	cmp	r5, r3
   2424e:	f240 8096 	bls.w	2437e <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 2000000) {
   24252:	4b6a      	ldr	r3, [pc, #424]	; (243fc <spi_nrfx_transceive+0x244>)
   24254:	429d      	cmp	r5, r3
   24256:	f240 8095 	bls.w	24384 <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 4000000) {
   2425a:	4b69      	ldr	r3, [pc, #420]	; (24400 <spi_nrfx_transceive+0x248>)
   2425c:	429d      	cmp	r5, r3
   2425e:	f240 8094 	bls.w	2438a <spi_nrfx_transceive+0x1d2>
		return NRF_SPI_FREQ_8M;
   24262:	4b68      	ldr	r3, [pc, #416]	; (24404 <spi_nrfx_transceive+0x24c>)
   24264:	429d      	cmp	r5, r3
   24266:	bf34      	ite	cc
   24268:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
   2426c:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   24270:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   24272:	9505      	str	r5, [sp, #20]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   24274:	f007 0304 	and.w	r3, r7, #4
   24278:	f140 808a 	bpl.w	24390 <spi_nrfx_transceive+0x1d8>
			return NRF_SPI_MODE_2;
   2427c:	2b00      	cmp	r3, #0
   2427e:	bf14      	ite	ne
   24280:	2303      	movne	r3, #3
   24282:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   24284:	f88d 3018 	strb.w	r3, [sp, #24]
	if (dev_data->initialized) {
   24288:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
   2428a:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   2428e:	f88d 7019 	strb.w	r7, [sp, #25]
	if (dev_data->initialized) {
   24292:	b12b      	cbz	r3, 242a0 <spi_nrfx_transceive+0xe8>
		nrfx_spi_uninit(&dev_config->spi);
   24294:	9800      	ldr	r0, [sp, #0]
   24296:	f002 fbf9 	bl	26a8c <nrfx_spi_uninit>
		dev_data->initialized = false;
   2429a:	2300      	movs	r3, #0
   2429c:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
   242a0:	4653      	mov	r3, sl
   242a2:	4a59      	ldr	r2, [pc, #356]	; (24408 <spi_nrfx_transceive+0x250>)
   242a4:	9800      	ldr	r0, [sp, #0]
   242a6:	a903      	add	r1, sp, #12
   242a8:	f002 fb44 	bl	26934 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   242ac:	4b57      	ldr	r3, [pc, #348]	; (2440c <spi_nrfx_transceive+0x254>)
   242ae:	4298      	cmp	r0, r3
   242b0:	d172      	bne.n	24398 <spi_nrfx_transceive+0x1e0>
	dev_data->initialized = true;
   242b2:	2301      	movs	r3, #1
   242b4:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
   242b8:	f8ca 6000 	str.w	r6, [sl]
		dev_data->busy = true;
   242bc:	2301      	movs	r3, #1
   242be:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   242c2:	f1b8 0f00 	cmp.w	r8, #0
   242c6:	d17d      	bne.n	243c4 <spi_nrfx_transceive+0x20c>
   242c8:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   242cc:	4642      	mov	r2, r8
   242ce:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   242d0:	f104 0148 	add.w	r1, r4, #72	; 0x48
   242d4:	f104 0258 	add.w	r2, r4, #88	; 0x58
   242d8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   242dc:	f00b ffdb 	bl	30296 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   242e0:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   242e2:	f1bb 0f00 	cmp.w	fp, #0
   242e6:	d176      	bne.n	243d6 <spi_nrfx_transceive+0x21e>
   242e8:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   242ec:	465b      	mov	r3, fp
   242ee:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   242f0:	f104 0260 	add.w	r2, r4, #96	; 0x60
   242f4:	f104 0150 	add.w	r1, r4, #80	; 0x50
   242f8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   242fc:	f00b ffcb 	bl	30296 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   24300:	2200      	movs	r2, #0
   24302:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->rx_buf = (uint8_t *)
   24304:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   24306:	2101      	movs	r1, #1
   24308:	4620      	mov	r0, r4
   2430a:	f00b ffd5 	bl	302b8 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   2430e:	4648      	mov	r0, r9
   24310:	f7ff ff14 	bl	2413c <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   24314:	6da3      	ldr	r3, [r4, #88]	; 0x58
   24316:	6e21      	ldr	r1, [r4, #96]	; 0x60
			     ctx->config->frequency;
   24318:	4625      	mov	r5, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2431a:	428b      	cmp	r3, r1
   2431c:	bf38      	it	cc
   2431e:	460b      	movcc	r3, r1
   24320:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   24324:	4359      	muls	r1, r3
			     ctx->config->frequency;
   24326:	f855 3b28 	ldr.w	r3, [r5], #40
   2432a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2432e:	681b      	ldr	r3, [r3, #0]
   24330:	fbb1 f1f3 	udiv	r1, r1, r3
   24334:	f240 36e7 	movw	r6, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   24338:	31c8      	adds	r1, #200	; 0xc8
   2433a:	2700      	movs	r7, #0
   2433c:	fbe0 6701 	umlal	r6, r7, r0, r1
   24340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24344:	2300      	movs	r3, #0
   24346:	4630      	mov	r0, r6
   24348:	4639      	mov	r1, r7
   2434a:	f7e8 fc17 	bl	cb7c <__aeabi_uldivmod>
   2434e:	4602      	mov	r2, r0
   24350:	460b      	mov	r3, r1
   24352:	4628      	mov	r0, r5
   24354:	f003 fdba 	bl	27ecc <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   24358:	2800      	cmp	r0, #0
   2435a:	d144      	bne.n	243e6 <spi_nrfx_transceive+0x22e>
	status = ctx->sync_status;
   2435c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   2435e:	e01d      	b.n	2439c <spi_nrfx_transceive+0x1e4>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   24360:	69a3      	ldr	r3, [r4, #24]
   24362:	2b00      	cmp	r3, #0
   24364:	f47f af34 	bne.w	241d0 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   24368:	6863      	ldr	r3, [r4, #4]
   2436a:	4299      	cmp	r1, r3
   2436c:	f47f af30 	bne.w	241d0 <spi_nrfx_transceive+0x18>
   24370:	e737      	b.n	241e2 <spi_nrfx_transceive+0x2a>
		return NRF_SPI_FREQ_125K;
   24372:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   24376:	e77b      	b.n	24270 <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_250K;
   24378:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   2437c:	e778      	b.n	24270 <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_500K;
   2437e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   24382:	e775      	b.n	24270 <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_1M;
   24384:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   24388:	e772      	b.n	24270 <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_2M;
   2438a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   2438e:	e76f      	b.n	24270 <spi_nrfx_transceive+0xb8>
			return NRF_SPI_MODE_0;
   24390:	3b00      	subs	r3, #0
   24392:	bf18      	it	ne
   24394:	2301      	movne	r3, #1
   24396:	e775      	b.n	24284 <spi_nrfx_transceive+0xcc>
		return -EIO;
   24398:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   2439c:	6823      	ldr	r3, [r4, #0]
   2439e:	889b      	ldrh	r3, [r3, #4]
   243a0:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   243a4:	d104      	bne.n	243b0 <spi_nrfx_transceive+0x1f8>
		ctx->owner = NULL;
   243a6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   243a8:	f104 0010 	add.w	r0, r4, #16
   243ac:	f003 fd68 	bl	27e80 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
   243b0:	4628      	mov	r0, r5
   243b2:	b009      	add	sp, #36	; 0x24
   243b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   243b8:	f06f 0515 	mvn.w	r5, #21
   243bc:	e7ee      	b.n	2439c <spi_nrfx_transceive+0x1e4>
		return -ENOTSUP;
   243be:	f06f 0585 	mvn.w	r5, #133	; 0x85
   243c2:	e7eb      	b.n	2439c <spi_nrfx_transceive+0x1e4>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   243c4:	f8d8 2000 	ldr.w	r2, [r8]
   243c8:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   243ca:	2a00      	cmp	r2, #0
   243cc:	f43f af7f 	beq.w	242ce <spi_nrfx_transceive+0x116>
   243d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   243d4:	e77b      	b.n	242ce <spi_nrfx_transceive+0x116>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   243d6:	f8db 3000 	ldr.w	r3, [fp]
   243da:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   243dc:	2b00      	cmp	r3, #0
   243de:	d086      	beq.n	242ee <spi_nrfx_transceive+0x136>
   243e0:	f8db 3004 	ldr.w	r3, [fp, #4]
   243e4:	e783      	b.n	242ee <spi_nrfx_transceive+0x136>
		return -ETIMEDOUT;
   243e6:	f06f 0573 	mvn.w	r5, #115	; 0x73
   243ea:	e7d7      	b.n	2439c <spi_nrfx_transceive+0x1e4>
   243ec:	0001e847 	.word	0x0001e847
   243f0:	0003d08f 	.word	0x0003d08f
   243f4:	0007a11f 	.word	0x0007a11f
   243f8:	000f423f 	.word	0x000f423f
   243fc:	001e847f 	.word	0x001e847f
   24400:	003d08ff 	.word	0x003d08ff
   24404:	007a1200 	.word	0x007a1200
   24408:	000303d1 	.word	0x000303d1
   2440c:	0bad0000 	.word	0x0bad0000

00024410 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
   24410:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   24412:	6905      	ldr	r5, [r0, #16]
	if (!ctx->tx_len) {
   24414:	6dab      	ldr	r3, [r5, #88]	; 0x58
   24416:	6e2c      	ldr	r4, [r5, #96]	; 0x60
{
   24418:	b085      	sub	sp, #20
   2441a:	b97b      	cbnz	r3, 2443c <transfer_next_chunk+0x2c>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   2441c:	b99c      	cbnz	r4, 24446 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
   2441e:	2200      	movs	r2, #0
   24420:	4611      	mov	r1, r2
   24422:	4628      	mov	r0, r5
   24424:	f00c f853 	bl	304ce <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   24428:	642c      	str	r4, [r5, #64]	; 0x40
   2442a:	f105 0028 	add.w	r0, r5, #40	; 0x28
   2442e:	f003 fd27 	bl	27e80 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
   24432:	2300      	movs	r3, #0
   24434:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   24438:	b005      	add	sp, #20
   2443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
   2443c:	2c00      	cmp	r4, #0
   2443e:	d035      	beq.n	244ac <transfer_next_chunk+0x9c>
	return MIN(ctx->tx_len, ctx->rx_len);
   24440:	429c      	cmp	r4, r3
   24442:	bf28      	it	cs
   24444:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
   24446:	6d69      	ldr	r1, [r5, #84]	; 0x54
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   24448:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   2444a:	b179      	cbz	r1, 2446c <transfer_next_chunk+0x5c>
   2444c:	b173      	cbz	r3, 2446c <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2444e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   24452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   24456:	d009      	beq.n	2446c <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
   24458:	2c08      	cmp	r4, #8
   2445a:	bf28      	it	cs
   2445c:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   2445e:	f105 076e 	add.w	r7, r5, #110	; 0x6e
   24462:	4622      	mov	r2, r4
   24464:	4638      	mov	r0, r7
   24466:	f008 fc28 	bl	2ccba <memcpy>
			tx_buf = dev_data->buffer;
   2446a:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
   2446c:	68b2      	ldr	r2, [r6, #8]
   2446e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		xfer.p_tx_buffer = tx_buf;
   24470:	9100      	str	r1, [sp, #0]
   24472:	4294      	cmp	r4, r2
   24474:	bf28      	it	cs
   24476:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
   24478:	66ac      	str	r4, [r5, #104]	; 0x68
   2447a:	b11b      	cbz	r3, 24484 <transfer_next_chunk+0x74>
   2447c:	6dab      	ldr	r3, [r5, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   2447e:	2b00      	cmp	r3, #0
   24480:	bf18      	it	ne
   24482:	4623      	movne	r3, r4
   24484:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   24486:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   24488:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   2448a:	b11b      	cbz	r3, 24494 <transfer_next_chunk+0x84>
   2448c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2448e:	2b00      	cmp	r3, #0
   24490:	bf18      	it	ne
   24492:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   24494:	2200      	movs	r2, #0
   24496:	4669      	mov	r1, sp
   24498:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2449a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   2449c:	f002 fd60 	bl	26f60 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   244a0:	4b03      	ldr	r3, [pc, #12]	; (244b0 <transfer_next_chunk+0xa0>)
   244a2:	4298      	cmp	r0, r3
   244a4:	d0c8      	beq.n	24438 <transfer_next_chunk+0x28>
			error = -EIO;
   244a6:	f06f 0404 	mvn.w	r4, #4
   244aa:	e7b8      	b.n	2441e <transfer_next_chunk+0xe>
   244ac:	461c      	mov	r4, r3
   244ae:	e7ca      	b.n	24446 <transfer_next_chunk+0x36>
   244b0:	0bad0000 	.word	0x0bad0000

000244b4 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
   244b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244b8:	461f      	mov	r7, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   244ba:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   244bc:	6904      	ldr	r4, [r0, #16]
{
   244be:	4681      	mov	r9, r0
   244c0:	0498      	lsls	r0, r3, #18
   244c2:	b08b      	sub	sp, #44	; 0x2c
   244c4:	460d      	mov	r5, r1
   244c6:	4690      	mov	r8, r2
   244c8:	f100 80d6 	bmi.w	24678 <spi_nrfx_transceive+0x1c4>
	return z_impl_k_sem_take(sem, timeout);
   244cc:	f04f 32ff 	mov.w	r2, #4294967295
   244d0:	f04f 33ff 	mov.w	r3, #4294967295
   244d4:	f104 0010 	add.w	r0, r4, #16
   244d8:	f003 fcf8 	bl	27ecc <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   244dc:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   244de:	f8d9 b004 	ldr.w	fp, [r9, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   244e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
	uint32_t max_freq = dev_config->max_freq;
   244e6:	f8db 300c 	ldr.w	r3, [fp, #12]
   244ea:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   244ec:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   244f0:	9301      	str	r3, [sp, #4]
   244f2:	b11b      	cbz	r3, 244fc <spi_nrfx_transceive+0x48>
   244f4:	f8da 3000 	ldr.w	r3, [sl]
   244f8:	429d      	cmp	r5, r3
   244fa:	d06d      	beq.n	245d8 <spi_nrfx_transceive+0x124>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   244fc:	88ae      	ldrh	r6, [r5, #4]
   244fe:	0531      	lsls	r1, r6, #20
   24500:	f100 80ef 	bmi.w	246e2 <spi_nrfx_transceive+0x22e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   24504:	f016 0f09 	tst.w	r6, #9
   24508:	f040 80e8 	bne.w	246dc <spi_nrfx_transceive+0x228>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   2450c:	f3c6 1345 	ubfx	r3, r6, #5, #6
   24510:	2b08      	cmp	r3, #8
   24512:	f040 80e3 	bne.w	246dc <spi_nrfx_transceive+0x228>
	if (spi_cfg->frequency < 125000) {
   24516:	682b      	ldr	r3, [r5, #0]
   24518:	9302      	str	r3, [sp, #8]
   2451a:	9a02      	ldr	r2, [sp, #8]
   2451c:	4b7c      	ldr	r3, [pc, #496]	; (24710 <spi_nrfx_transceive+0x25c>)
   2451e:	429a      	cmp	r2, r3
   24520:	f240 80dc 	bls.w	246dc <spi_nrfx_transceive+0x228>
	config = dev_config->def_config;
   24524:	f10b 0e10 	add.w	lr, fp, #16
   24528:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2452c:	f10d 0c10 	add.w	ip, sp, #16
   24530:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   24534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24538:	4293      	cmp	r3, r2
   2453a:	bf28      	it	cs
   2453c:	4613      	movcs	r3, r2
	config = dev_config->def_config;
   2453e:	e89e 0003 	ldmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   24542:	4a74      	ldr	r2, [pc, #464]	; (24714 <spi_nrfx_transceive+0x260>)
   24544:	4293      	cmp	r3, r2
	config = dev_config->def_config;
   24546:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   2454a:	f240 809e 	bls.w	2468a <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 500000) {
   2454e:	4a72      	ldr	r2, [pc, #456]	; (24718 <spi_nrfx_transceive+0x264>)
   24550:	4293      	cmp	r3, r2
   24552:	f240 809d 	bls.w	24690 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 1000000) {
   24556:	4a71      	ldr	r2, [pc, #452]	; (2471c <spi_nrfx_transceive+0x268>)
   24558:	4293      	cmp	r3, r2
   2455a:	f240 809c 	bls.w	24696 <spi_nrfx_transceive+0x1e2>
	} else if (frequency < 2000000) {
   2455e:	4a70      	ldr	r2, [pc, #448]	; (24720 <spi_nrfx_transceive+0x26c>)
   24560:	4293      	cmp	r3, r2
   24562:	f240 809b 	bls.w	2469c <spi_nrfx_transceive+0x1e8>
	} else if (frequency < 4000000) {
   24566:	4a6f      	ldr	r2, [pc, #444]	; (24724 <spi_nrfx_transceive+0x270>)
   24568:	4293      	cmp	r3, r2
   2456a:	f240 809a 	bls.w	246a2 <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 8000000) {
   2456e:	4a6e      	ldr	r2, [pc, #440]	; (24728 <spi_nrfx_transceive+0x274>)
   24570:	4293      	cmp	r3, r2
   24572:	f0c0 8099 	bcc.w	246a8 <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 16000000) {
   24576:	4a6d      	ldr	r2, [pc, #436]	; (2472c <spi_nrfx_transceive+0x278>)
   24578:	4293      	cmp	r3, r2
   2457a:	f0c0 8098 	bcc.w	246ae <spi_nrfx_transceive+0x1fa>
		return NRF_SPIM_FREQ_32M;
   2457e:	4a6c      	ldr	r2, [pc, #432]	; (24730 <spi_nrfx_transceive+0x27c>)
   24580:	4293      	cmp	r3, r2
   24582:	bf34      	ite	cc
   24584:	f04f 6320 	movcc.w	r3, #167772160	; 0xa000000
   24588:	f04f 53a0 	movcs.w	r3, #335544320	; 0x14000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   2458c:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   2458e:	9306      	str	r3, [sp, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   24590:	f006 0304 	and.w	r3, r6, #4
   24594:	f140 808e 	bpl.w	246b4 <spi_nrfx_transceive+0x200>
			return NRF_SPIM_MODE_2;
   24598:	2b00      	cmp	r3, #0
   2459a:	bf14      	ite	ne
   2459c:	2303      	movne	r3, #3
   2459e:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   245a0:	f88d 301c 	strb.w	r3, [sp, #28]
	if (dev_data->initialized) {
   245a4:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
   245a6:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   245aa:	f88d 601d 	strb.w	r6, [sp, #29]
	if (dev_data->initialized) {
   245ae:	b12b      	cbz	r3, 245bc <spi_nrfx_transceive+0x108>
		nrfx_spim_uninit(&dev_config->spim);
   245b0:	4658      	mov	r0, fp
   245b2:	f002 fc7f 	bl	26eb4 <nrfx_spim_uninit>
		dev_data->initialized = false;
   245b6:	2300      	movs	r3, #0
   245b8:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   245bc:	4653      	mov	r3, sl
   245be:	4a5d      	ldr	r2, [pc, #372]	; (24734 <spi_nrfx_transceive+0x280>)
   245c0:	a904      	add	r1, sp, #16
   245c2:	4658      	mov	r0, fp
   245c4:	f002 fb68 	bl	26c98 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   245c8:	4b5b      	ldr	r3, [pc, #364]	; (24738 <spi_nrfx_transceive+0x284>)
   245ca:	4298      	cmp	r0, r3
   245cc:	d176      	bne.n	246bc <spi_nrfx_transceive+0x208>
	dev_data->initialized = true;
   245ce:	2301      	movs	r3, #1
   245d0:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
   245d4:	f8ca 5000 	str.w	r5, [sl]
		dev_data->busy = true;
   245d8:	2301      	movs	r3, #1
   245da:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   245de:	f1b8 0f00 	cmp.w	r8, #0
   245e2:	f040 8081 	bne.w	246e8 <spi_nrfx_transceive+0x234>
   245e6:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   245ea:	4642      	mov	r2, r8
   245ec:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   245ee:	f104 0148 	add.w	r1, r4, #72	; 0x48
   245f2:	f104 0258 	add.w	r2, r4, #88	; 0x58
   245f6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   245fa:	f00b ff57 	bl	304ac <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   245fe:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   24600:	2f00      	cmp	r7, #0
   24602:	d17a      	bne.n	246fa <spi_nrfx_transceive+0x246>
   24604:	64e7      	str	r7, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   24606:	6527      	str	r7, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   24608:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2460c:	f104 0150 	add.w	r1, r4, #80	; 0x50
   24610:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   24614:	f00b ff4a 	bl	304ac <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   24618:	2200      	movs	r2, #0
   2461a:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->rx_buf = (uint8_t *)
   2461c:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   2461e:	2101      	movs	r1, #1
   24620:	4620      	mov	r0, r4
   24622:	f00b ff54 	bl	304ce <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   24626:	4648      	mov	r0, r9
   24628:	f7ff fef2 	bl	24410 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2462c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2462e:	6e21      	ldr	r1, [r4, #96]	; 0x60
			     ctx->config->frequency;
   24630:	4625      	mov	r5, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   24632:	428b      	cmp	r3, r1
   24634:	bf38      	it	cc
   24636:	460b      	movcc	r3, r1
   24638:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   2463c:	4359      	muls	r1, r3
			     ctx->config->frequency;
   2463e:	f855 3b28 	ldr.w	r3, [r5], #40
   24642:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   24646:	681b      	ldr	r3, [r3, #0]
   24648:	fbb1 f1f3 	udiv	r1, r1, r3
   2464c:	f240 36e7 	movw	r6, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   24650:	31c8      	adds	r1, #200	; 0xc8
   24652:	2700      	movs	r7, #0
   24654:	fbe0 6701 	umlal	r6, r7, r0, r1
   24658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2465c:	2300      	movs	r3, #0
   2465e:	4630      	mov	r0, r6
   24660:	4639      	mov	r1, r7
   24662:	f7e8 fa8b 	bl	cb7c <__aeabi_uldivmod>
   24666:	4602      	mov	r2, r0
   24668:	460b      	mov	r3, r1
   2466a:	4628      	mov	r0, r5
   2466c:	f003 fc2e 	bl	27ecc <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   24670:	2800      	cmp	r0, #0
   24672:	d149      	bne.n	24708 <spi_nrfx_transceive+0x254>
	status = ctx->sync_status;
   24674:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   24676:	e023      	b.n	246c0 <spi_nrfx_transceive+0x20c>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   24678:	69a3      	ldr	r3, [r4, #24]
   2467a:	2b00      	cmp	r3, #0
   2467c:	f47f af26 	bne.w	244cc <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   24680:	6863      	ldr	r3, [r4, #4]
   24682:	4299      	cmp	r1, r3
   24684:	f47f af22 	bne.w	244cc <spi_nrfx_transceive+0x18>
   24688:	e729      	b.n	244de <spi_nrfx_transceive+0x2a>
		return NRF_SPIM_FREQ_125K;
   2468a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   2468e:	e77d      	b.n	2458c <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_250K;
   24690:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24694:	e77a      	b.n	2458c <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_500K;
   24696:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   2469a:	e777      	b.n	2458c <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_1M;
   2469c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   246a0:	e774      	b.n	2458c <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_2M;
   246a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   246a6:	e771      	b.n	2458c <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_4M;
   246a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   246ac:	e76e      	b.n	2458c <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_8M;
   246ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   246b2:	e76b      	b.n	2458c <spi_nrfx_transceive+0xd8>
			return NRF_SPIM_MODE_0;
   246b4:	3b00      	subs	r3, #0
   246b6:	bf18      	it	ne
   246b8:	2301      	movne	r3, #1
   246ba:	e771      	b.n	245a0 <spi_nrfx_transceive+0xec>
		return -EIO;
   246bc:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   246c0:	6823      	ldr	r3, [r4, #0]
   246c2:	889b      	ldrh	r3, [r3, #4]
   246c4:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   246c8:	d104      	bne.n	246d4 <spi_nrfx_transceive+0x220>
		ctx->owner = NULL;
   246ca:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   246cc:	f104 0010 	add.w	r0, r4, #16
   246d0:	f003 fbd6 	bl	27e80 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
   246d4:	4628      	mov	r0, r5
   246d6:	b00b      	add	sp, #44	; 0x2c
   246d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   246dc:	f06f 0515 	mvn.w	r5, #21
   246e0:	e7ee      	b.n	246c0 <spi_nrfx_transceive+0x20c>
		return -ENOTSUP;
   246e2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   246e6:	e7eb      	b.n	246c0 <spi_nrfx_transceive+0x20c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   246e8:	f8d8 2000 	ldr.w	r2, [r8]
   246ec:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   246ee:	2a00      	cmp	r2, #0
   246f0:	f43f af7c 	beq.w	245ec <spi_nrfx_transceive+0x138>
   246f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   246f8:	e778      	b.n	245ec <spi_nrfx_transceive+0x138>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   246fa:	683b      	ldr	r3, [r7, #0]
   246fc:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   246fe:	b10b      	cbz	r3, 24704 <spi_nrfx_transceive+0x250>
   24700:	687f      	ldr	r7, [r7, #4]
   24702:	e780      	b.n	24606 <spi_nrfx_transceive+0x152>
   24704:	461f      	mov	r7, r3
   24706:	e77e      	b.n	24606 <spi_nrfx_transceive+0x152>
		return -ETIMEDOUT;
   24708:	f06f 0573 	mvn.w	r5, #115	; 0x73
   2470c:	e7d8      	b.n	246c0 <spi_nrfx_transceive+0x20c>
   2470e:	bf00      	nop
   24710:	0001e847 	.word	0x0001e847
   24714:	0003d08f 	.word	0x0003d08f
   24718:	0007a11f 	.word	0x0007a11f
   2471c:	000f423f 	.word	0x000f423f
   24720:	001e847f 	.word	0x001e847f
   24724:	003d08ff 	.word	0x003d08ff
   24728:	007a1200 	.word	0x007a1200
   2472c:	00f42400 	.word	0x00f42400
   24730:	01e84800 	.word	0x01e84800
   24734:	000305e7 	.word	0x000305e7
   24738:	0bad0000 	.word	0x0bad0000

0002473c <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(const struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   2473c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   2473e:	7b0b      	ldrb	r3, [r1, #12]
   24740:	2b02      	cmp	r3, #2
{
   24742:	4604      	mov	r4, r0
   24744:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   24746:	d128      	bne.n	2479a <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   24748:	680b      	ldr	r3, [r1, #0]
   2474a:	bb1b      	cbnz	r3, 24794 <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   2474c:	6902      	ldr	r2, [r0, #16]
	return dev->data;
   2474e:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   24750:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   24754:	b9d9      	cbnz	r1, 2478e <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   24756:	4914      	ldr	r1, [pc, #80]	; (247a8 <wdt_nrf_install_timeout+0x6c>)
   24758:	1e58      	subs	r0, r3, #1
   2475a:	4288      	cmp	r0, r1
   2475c:	d81a      	bhi.n	24794 <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   2475e:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   24760:	6860      	ldr	r0, [r4, #4]
   24762:	f10d 0107 	add.w	r1, sp, #7
   24766:	f002 ff3b 	bl	275e0 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   2476a:	4b10      	ldr	r3, [pc, #64]	; (247ac <wdt_nrf_install_timeout+0x70>)
   2476c:	4298      	cmp	r0, r3
   2476e:	d017      	beq.n	247a0 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   24770:	68ab      	ldr	r3, [r5, #8]
   24772:	f89d 0007 	ldrb.w	r0, [sp, #7]
   24776:	b113      	cbz	r3, 2477e <wdt_nrf_install_timeout+0x42>
   24778:	6922      	ldr	r2, [r4, #16]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   2477a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   2477e:	6922      	ldr	r2, [r4, #16]
   24780:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   24784:	3301      	adds	r3, #1
   24786:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   2478a:	b003      	add	sp, #12
   2478c:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   2478e:	6a12      	ldr	r2, [r2, #32]
   24790:	429a      	cmp	r2, r3
   24792:	d0e5      	beq.n	24760 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   24794:	f06f 0015 	mvn.w	r0, #21
   24798:	e7f7      	b.n	2478a <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   2479a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2479e:	e7f4      	b.n	2478a <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   247a0:	f06f 000b 	mvn.w	r0, #11
   247a4:	e7f1      	b.n	2478a <wdt_nrf_install_timeout+0x4e>
   247a6:	bf00      	nop
   247a8:	07cffffe 	.word	0x07cffffe
   247ac:	0bad0002 	.word	0x0bad0002

000247b0 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   247b0:	b510      	push	{r4, lr}
   247b2:	4604      	mov	r4, r0
   247b4:	2200      	movs	r2, #0
   247b6:	2101      	movs	r1, #1
   247b8:	2010      	movs	r0, #16
   247ba:	f7f9 ffd9 	bl	1e770 <z_arm_irq_priority_set>
   247be:	6860      	ldr	r0, [r4, #4]
   247c0:	4a05      	ldr	r2, [pc, #20]	; (247d8 <wdt_0_init+0x28>)
   247c2:	f100 0108 	add.w	r1, r0, #8
   247c6:	f002 fed3 	bl	27570 <nrfx_wdt_init>
   247ca:	4b04      	ldr	r3, [pc, #16]	; (247dc <wdt_0_init+0x2c>)
   247cc:	4298      	cmp	r0, r3
   247ce:	bf14      	ite	ne
   247d0:	f06f 000f 	mvnne.w	r0, #15
   247d4:	2000      	moveq	r0, #0
   247d6:	bd10      	pop	{r4, pc}
   247d8:	000247e1 	.word	0x000247e1
   247dc:	0bad0000 	.word	0x0bad0000

000247e0 <wdt_0_event_handler>:
   247e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   247e2:	4d0b      	ldr	r5, [pc, #44]	; (24810 <wdt_0_event_handler+0x30>)
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   247e4:	4e0b      	ldr	r6, [pc, #44]	; (24814 <wdt_0_event_handler+0x34>)
				get_dev_data(dev)->m_callbacks[i](dev, i);
   247e6:	4f0c      	ldr	r7, [pc, #48]	; (24818 <wdt_0_event_handler+0x38>)
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   247e8:	2400      	movs	r4, #0
   247ea:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   247ee:	429c      	cmp	r4, r3
   247f0:	db00      	blt.n	247f4 <wdt_0_event_handler+0x14>
WDT_NRFX_WDT_DEVICE(0);
   247f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   247f4:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
   247f8:	40e3      	lsrs	r3, r4
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   247fa:	07db      	lsls	r3, r3, #31
   247fc:	d505      	bpl.n	2480a <wdt_0_event_handler+0x2a>
			if (get_dev_data(dev)->m_callbacks[i]) {
   247fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   24802:	b113      	cbz	r3, 2480a <wdt_0_event_handler+0x2a>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   24804:	4621      	mov	r1, r4
   24806:	4638      	mov	r0, r7
   24808:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   2480a:	3401      	adds	r4, #1
   2480c:	e7ed      	b.n	247ea <wdt_0_event_handler+0xa>
   2480e:	bf00      	nop
   24810:	20002a78 	.word	0x20002a78
   24814:	40010000 	.word	0x40010000
   24818:	00032198 	.word	0x00032198

0002481c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2481c:	4b02      	ldr	r3, [pc, #8]	; (24828 <flash_nrf_pages_layout+0xc>)
   2481e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   24820:	2301      	movs	r3, #1
   24822:	6013      	str	r3, [r2, #0]
}
   24824:	4770      	bx	lr
   24826:	bf00      	nop
   24828:	20002aa0 	.word	0x20002aa0

0002482c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2482c:	4800      	ldr	r0, [pc, #0]	; (24830 <flash_nrf_get_parameters+0x4>)
   2482e:	4770      	bx	lr
   24830:	00032d28 	.word	0x00032d28

00024834 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   24834:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   24836:	2201      	movs	r2, #1
   24838:	4611      	mov	r1, r2
   2483a:	4807      	ldr	r0, [pc, #28]	; (24858 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2483c:	4c07      	ldr	r4, [pc, #28]	; (2485c <nrf_flash_init+0x28>)
   2483e:	f00d f808 	bl	31852 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   24842:	f001 faaf 	bl	25da4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   24846:	f00c f9c0 	bl	30bca <nrfx_nvmc_flash_page_count_get>
   2484a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2484c:	f00c f9b9 	bl	30bc2 <nrfx_nvmc_flash_page_size_get>
   24850:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   24852:	2000      	movs	r0, #0
   24854:	bd10      	pop	{r4, pc}
   24856:	bf00      	nop
   24858:	20002aa8 	.word	0x20002aa8
   2485c:	20002aa0 	.word	0x20002aa0

00024860 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   24860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   24864:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   24868:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2486c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   24870:	f023 031f 	bic.w	r3, r3, #31
   24874:	430b      	orrs	r3, r1
    pofcon |=
   24876:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2487a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   2487e:	4b02      	ldr	r3, [pc, #8]	; (24888 <restore_pofwarn.part.0+0x28>)
   24880:	2200      	movs	r2, #0
   24882:	701a      	strb	r2, [r3, #0]
	}
}
   24884:	4770      	bx	lr
   24886:	bf00      	nop
   24888:	200036fa 	.word	0x200036fa

0002488c <suspend_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   2488c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   24890:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
	if (enabled) {
   24894:	f012 0001 	ands.w	r0, r2, #1
   24898:	d01a      	beq.n	248d0 <suspend_pofwarn.part.0+0x44>
    uint32_t pofcon = p_reg->POFCON;
   2489a:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2489e:	4b0d      	ldr	r3, [pc, #52]	; (248d4 <suspend_pofwarn.part.0+0x48>)
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   248a0:	f020 001f 	bic.w	r0, r0, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   248a4:	f002 021e 	and.w	r2, r2, #30
    pofcon |=
   248a8:	4310      	orrs	r0, r2
    p_reg->POFCON = pofcon;
   248aa:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   248ae:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   248b0:	b158      	cbz	r0, 248ca <suspend_pofwarn.part.0+0x3e>
    uint32_t pofcon = p_reg->POFCON;
   248b2:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   248b6:	f023 031f 	bic.w	r3, r3, #31
   248ba:	4313      	orrs	r3, r2
    pofcon |=
   248bc:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   248c0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			return -ECANCELED;
   248c4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   248c8:	4770      	bx	lr
		pofcon_enabled = enabled;
   248ca:	4b03      	ldr	r3, [pc, #12]	; (248d8 <suspend_pofwarn.part.0+0x4c>)
   248cc:	2201      	movs	r2, #1
   248ce:	701a      	strb	r2, [r3, #0]
}
   248d0:	4770      	bx	lr
   248d2:	bf00      	nop
   248d4:	40000108 	.word	0x40000108
   248d8:	200036fa 	.word	0x200036fa

000248dc <erase_op>:
{
   248dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248e0:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   248e2:	f00c f96e 	bl	30bc2 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   248e6:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   248e8:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   248ea:	b10b      	cbz	r3, 248f0 <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   248ec:	f00b fff4 	bl	308d8 <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   248f0:	4f1b      	ldr	r7, [pc, #108]	; (24960 <erase_op+0x84>)
	if (pofcon_enabled) {
   248f2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 24964 <erase_op+0x88>
{
   248f6:	2600      	movs	r6, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   248f8:	683b      	ldr	r3, [r7, #0]
   248fa:	2b08      	cmp	r3, #8
   248fc:	d023      	beq.n	24946 <erase_op+0x6a>
		if (e_ctx->flash_addr == e_ctx->flash_addr_next) {
   248fe:	6860      	ldr	r0, [r4, #4]
   24900:	6923      	ldr	r3, [r4, #16]
   24902:	4298      	cmp	r0, r3
   24904:	d105      	bne.n	24912 <erase_op+0x36>
			nrfx_nvmc_page_partial_erase_init(e_ctx->flash_addr,
   24906:	2116      	movs	r1, #22
   24908:	f001 ffb2 	bl	26870 <nrfx_nvmc_page_partial_erase_init>
			e_ctx->flash_addr_next += pg_size;
   2490c:	6923      	ldr	r3, [r4, #16]
   2490e:	442b      	add	r3, r5
   24910:	6123      	str	r3, [r4, #16]
		if (nrfx_nvmc_page_partial_erase_continue()) {
   24912:	f001 ffcb 	bl	268ac <nrfx_nvmc_page_partial_erase_continue>
   24916:	b128      	cbz	r0, 24924 <erase_op+0x48>
			e_ctx->len -= pg_size;
   24918:	68a3      	ldr	r3, [r4, #8]
   2491a:	1b5b      	subs	r3, r3, r5
   2491c:	60a3      	str	r3, [r4, #8]
			e_ctx->flash_addr += pg_size;
   2491e:	6863      	ldr	r3, [r4, #4]
   24920:	442b      	add	r3, r5
   24922:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   24924:	f898 3000 	ldrb.w	r3, [r8]
   24928:	b10b      	cbz	r3, 2492e <erase_op+0x52>
   2492a:	f7ff ff99 	bl	24860 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   2492e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   24930:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   24932:	b97b      	cbnz	r3, 24954 <erase_op+0x78>
	} while (e_ctx->len > 0);
   24934:	68a3      	ldr	r3, [r4, #8]
   24936:	2b00      	cmp	r3, #0
   24938:	d1de      	bne.n	248f8 <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2493a:	68a0      	ldr	r0, [r4, #8]
   2493c:	3800      	subs	r0, #0
   2493e:	bf18      	it	ne
   24940:	2001      	movne	r0, #1
}
   24942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   24946:	f7ff ffa1 	bl	2488c <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   2494a:	2800      	cmp	r0, #0
   2494c:	d0d7      	beq.n	248fe <erase_op+0x22>
			return -ECANCELED;
   2494e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   24952:	e7f6      	b.n	24942 <erase_op+0x66>
			if (nrf_flash_sync_check_time_limit(i)) {
   24954:	4630      	mov	r0, r6
   24956:	f001 fa33 	bl	25dc0 <nrf_flash_sync_check_time_limit>
   2495a:	2800      	cmp	r0, #0
   2495c:	d0ea      	beq.n	24934 <erase_op+0x58>
   2495e:	e7ec      	b.n	2493a <erase_op+0x5e>
   24960:	10000130 	.word	0x10000130
   24964:	200036fa 	.word	0x200036fa

00024968 <flash_nrf_erase>:
{
   24968:	b5f0      	push	{r4, r5, r6, r7, lr}
   2496a:	b089      	sub	sp, #36	; 0x24
   2496c:	460d      	mov	r5, r1
   2496e:	4616      	mov	r6, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24970:	f00c f927 	bl	30bc2 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   24974:	4631      	mov	r1, r6
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24976:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   24978:	4628      	mov	r0, r5
   2497a:	f00b fea8 	bl	306ce <is_regular_addr_valid>
   2497e:	2800      	cmp	r0, #0
   24980:	d03c      	beq.n	249fc <flash_nrf_erase+0x94>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24982:	fbb5 f3f7 	udiv	r3, r5, r7
   24986:	fb07 5313 	mls	r3, r7, r3, r5
   2498a:	bbbb      	cbnz	r3, 249fc <flash_nrf_erase+0x94>
   2498c:	fbb6 f4f7 	udiv	r4, r6, r7
   24990:	fb07 6414 	mls	r4, r7, r4, r6
   24994:	bb94      	cbnz	r4, 249fc <flash_nrf_erase+0x94>
		if (!n_pages) {
   24996:	42be      	cmp	r6, r7
   24998:	d324      	bcc.n	249e4 <flash_nrf_erase+0x7c>
	return z_impl_k_sem_take(sem, timeout);
   2499a:	f04f 32ff 	mov.w	r2, #4294967295
   2499e:	f04f 33ff 	mov.w	r3, #4294967295
   249a2:	4818      	ldr	r0, [pc, #96]	; (24a04 <flash_nrf_erase+0x9c>)
   249a4:	f003 fa92 	bl	27ecc <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   249a8:	f00b ff94 	bl	308d4 <nrf_flash_sync_is_required>
   249ac:	ab03      	add	r3, sp, #12
   249ae:	4601      	mov	r1, r0
	struct flash_context context = {
   249b0:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   249b2:	b1d0      	cbz	r0, 249ea <flash_nrf_erase+0x82>
	struct flash_context context = {
   249b4:	4621      	mov	r1, r4
   249b6:	4618      	mov	r0, r3
   249b8:	f008 f98a 	bl	2ccd0 <memset>
   249bc:	2201      	movs	r2, #1
   249be:	f88d 2018 	strb.w	r2, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   249c2:	4a11      	ldr	r2, [pc, #68]	; (24a08 <flash_nrf_erase+0xa0>)
	struct flash_context context = {
   249c4:	9507      	str	r5, [sp, #28]
	struct flash_op_desc flash_op_desc = {
   249c6:	e9cd 2001 	strd	r2, r0, [sp, #4]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   249ca:	f245 50f0 	movw	r0, #22000	; 0x55f0
	struct flash_context context = {
   249ce:	e9cd 5604 	strd	r5, r6, [sp, #16]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   249d2:	f001 f9ef 	bl	25db4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   249d6:	a801      	add	r0, sp, #4
   249d8:	f7f7 ff5e 	bl	1c898 <nrf_flash_sync_exe>
	return	erase_op(&context);
   249dc:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   249de:	4809      	ldr	r0, [pc, #36]	; (24a04 <flash_nrf_erase+0x9c>)
   249e0:	f003 fa4e 	bl	27e80 <z_impl_k_sem_give>
}
   249e4:	4620      	mov	r0, r4
   249e6:	b009      	add	sp, #36	; 0x24
   249e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   249ea:	4618      	mov	r0, r3
   249ec:	f008 f970 	bl	2ccd0 <memset>
   249f0:	e9cd 5604 	strd	r5, r6, [sp, #16]
   249f4:	9507      	str	r5, [sp, #28]
	return	erase_op(&context);
   249f6:	f7ff ff71 	bl	248dc <erase_op>
   249fa:	e7ef      	b.n	249dc <flash_nrf_erase+0x74>
		return -EINVAL;
   249fc:	f06f 0415 	mvn.w	r4, #21
   24a00:	e7f0      	b.n	249e4 <flash_nrf_erase+0x7c>
   24a02:	bf00      	nop
   24a04:	20002aa8 	.word	0x20002aa8
   24a08:	000248dd 	.word	0x000248dd

00024a0c <write_op>:
{
   24a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   24a0e:	7b03      	ldrb	r3, [r0, #12]
{
   24a10:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   24a12:	b10b      	cbz	r3, 24a18 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   24a14:	f00b ff60 	bl	308d8 <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   24a18:	4e1c      	ldr	r6, [pc, #112]	; (24a8c <write_op+0x80>)
	if (pofcon_enabled) {
   24a1a:	4f1d      	ldr	r7, [pc, #116]	; (24a90 <write_op+0x84>)
{
   24a1c:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   24a1e:	68a3      	ldr	r3, [r4, #8]
   24a20:	2b03      	cmp	r3, #3
   24a22:	d806      	bhi.n	24a32 <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24a24:	4a1b      	ldr	r2, [pc, #108]	; (24a94 <write_op+0x88>)
   24a26:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   24a2a:	07db      	lsls	r3, r3, #31
   24a2c:	d5fb      	bpl.n	24a26 <write_op+0x1a>
	return FLASH_OP_DONE;
   24a2e:	2000      	movs	r0, #0
}
   24a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   24a32:	6833      	ldr	r3, [r6, #0]
   24a34:	2b08      	cmp	r3, #8
   24a36:	d021      	beq.n	24a7c <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   24a38:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   24a3a:	6860      	ldr	r0, [r4, #4]
   24a3c:	6819      	ldr	r1, [r3, #0]
   24a3e:	f001 ff59 	bl	268f4 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   24a42:	783b      	ldrb	r3, [r7, #0]
   24a44:	b10b      	cbz	r3, 24a4a <write_op+0x3e>
   24a46:	f7ff ff0b 	bl	24860 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   24a4a:	6863      	ldr	r3, [r4, #4]
   24a4c:	3304      	adds	r3, #4
   24a4e:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   24a50:	6823      	ldr	r3, [r4, #0]
   24a52:	3304      	adds	r3, #4
   24a54:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   24a56:	68a3      	ldr	r3, [r4, #8]
   24a58:	3b04      	subs	r3, #4
   24a5a:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   24a5c:	7b23      	ldrb	r3, [r4, #12]
		i++;
   24a5e:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   24a60:	2b00      	cmp	r3, #0
   24a62:	d0dc      	beq.n	24a1e <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   24a64:	4628      	mov	r0, r5
   24a66:	f001 f9ab 	bl	25dc0 <nrf_flash_sync_check_time_limit>
   24a6a:	2800      	cmp	r0, #0
   24a6c:	d0d7      	beq.n	24a1e <write_op+0x12>
   24a6e:	4a09      	ldr	r2, [pc, #36]	; (24a94 <write_op+0x88>)
   24a70:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   24a74:	07d9      	lsls	r1, r3, #31
   24a76:	d5fb      	bpl.n	24a70 <write_op+0x64>
				return FLASH_OP_ONGOING;
   24a78:	2001      	movs	r0, #1
   24a7a:	e7d9      	b.n	24a30 <write_op+0x24>
                switch(var2)
   24a7c:	f7ff ff06 	bl	2488c <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   24a80:	2800      	cmp	r0, #0
   24a82:	d0d9      	beq.n	24a38 <write_op+0x2c>
			return -ECANCELED;
   24a84:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   24a88:	e7d2      	b.n	24a30 <write_op+0x24>
   24a8a:	bf00      	nop
   24a8c:	10000130 	.word	0x10000130
   24a90:	200036fa 	.word	0x200036fa
   24a94:	4001e000 	.word	0x4001e000

00024a98 <flash_nrf_write>:
{
   24a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   24a9a:	460d      	mov	r5, r1
   24a9c:	b089      	sub	sp, #36	; 0x24
	if (is_regular_addr_valid(addr, len)) {
   24a9e:	4619      	mov	r1, r3
   24aa0:	4628      	mov	r0, r5
{
   24aa2:	4617      	mov	r7, r2
   24aa4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   24aa6:	f00b fe12 	bl	306ce <is_regular_addr_valid>
   24aaa:	b390      	cbz	r0, 24b12 <flash_nrf_write+0x7a>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   24aac:	ea45 0604 	orr.w	r6, r5, r4
   24ab0:	f016 0603 	ands.w	r6, r6, #3
   24ab4:	d12d      	bne.n	24b12 <flash_nrf_write+0x7a>
	if (!len) {
   24ab6:	b30c      	cbz	r4, 24afc <flash_nrf_write+0x64>
	return z_impl_k_sem_take(sem, timeout);
   24ab8:	f04f 33ff 	mov.w	r3, #4294967295
   24abc:	f04f 32ff 	mov.w	r2, #4294967295
   24ac0:	4815      	ldr	r0, [pc, #84]	; (24b18 <flash_nrf_write+0x80>)
   24ac2:	f003 fa03 	bl	27ecc <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   24ac6:	f00b ff05 	bl	308d4 <nrf_flash_sync_is_required>
   24aca:	4603      	mov	r3, r0
   24acc:	a803      	add	r0, sp, #12
   24ace:	b1c3      	cbz	r3, 24b02 <flash_nrf_write+0x6a>
	struct flash_context context = {
   24ad0:	2301      	movs	r3, #1
   24ad2:	e9cd 6606 	strd	r6, r6, [sp, #24]
   24ad6:	f88d 3018 	strb.w	r3, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   24ada:	4b10      	ldr	r3, [pc, #64]	; (24b1c <flash_nrf_write+0x84>)
	struct flash_context context = {
   24adc:	9405      	str	r4, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   24ade:	e9cd 3001 	strd	r3, r0, [sp, #4]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   24ae2:	f641 504c 	movw	r0, #7500	; 0x1d4c
	struct flash_context context = {
   24ae6:	e9cd 7503 	strd	r7, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   24aea:	f001 f963 	bl	25db4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   24aee:	a801      	add	r0, sp, #4
   24af0:	f7f7 fed2 	bl	1c898 <nrf_flash_sync_exe>
	return write_op(&context);
   24af4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   24af6:	4808      	ldr	r0, [pc, #32]	; (24b18 <flash_nrf_write+0x80>)
   24af8:	f003 f9c2 	bl	27e80 <z_impl_k_sem_give>
}
   24afc:	4620      	mov	r0, r4
   24afe:	b009      	add	sp, #36	; 0x24
   24b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   24b02:	e9cd 3306 	strd	r3, r3, [sp, #24]
   24b06:	e9cd 7503 	strd	r7, r5, [sp, #12]
   24b0a:	9405      	str	r4, [sp, #20]
	return write_op(&context);
   24b0c:	f7ff ff7e 	bl	24a0c <write_op>
   24b10:	e7f0      	b.n	24af4 <flash_nrf_write+0x5c>
		return -EINVAL;
   24b12:	f06f 0415 	mvn.w	r4, #21
   24b16:	e7f1      	b.n	24afc <flash_nrf_write+0x64>
   24b18:	20002aa8 	.word	0x20002aa8
   24b1c:	00024a0d 	.word	0x00024a0d

00024b20 <random_byte_get>:
	__asm__ volatile(
   24b20:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b24:	f3ef 8211 	mrs	r2, BASEPRI
   24b28:	f383 8812 	msr	BASEPRI_MAX, r3
   24b2c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   24b30:	4b08      	ldr	r3, [pc, #32]	; (24b54 <random_byte_get+0x34>)
   24b32:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   24b34:	b159      	cbz	r1, 24b4e <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   24b36:	4908      	ldr	r1, [pc, #32]	; (24b58 <random_byte_get+0x38>)
   24b38:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   24b3c:	2100      	movs	r1, #0
   24b3e:	6019      	str	r1, [r3, #0]
   24b40:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   24b42:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   24b44:	f382 8811 	msr	BASEPRI, r2
   24b48:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   24b4c:	4770      	bx	lr
	int retval = -EAGAIN;
   24b4e:	f06f 000a 	mvn.w	r0, #10
   24b52:	e7f7      	b.n	24b44 <random_byte_get+0x24>
   24b54:	4000d100 	.word	0x4000d100
   24b58:	4000d000 	.word	0x4000d000

00024b5c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   24b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24b5e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   24b60:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   24b62:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   24b64:	f04f 0540 	mov.w	r5, #64	; 0x40
   24b68:	f3ef 8011 	mrs	r0, BASEPRI
   24b6c:	f385 8812 	msr	BASEPRI_MAX, r5
   24b70:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   24b74:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   24b76:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   24b7a:	1ba4      	subs	r4, r4, r6
   24b7c:	403c      	ands	r4, r7
	if (available < len) {
   24b7e:	42a2      	cmp	r2, r4
		len = available;
   24b80:	bf88      	it	hi
   24b82:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   24b84:	eb06 0c02 	add.w	ip, r6, r2
   24b88:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   24b8c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   24b8e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   24b92:	f380 8811 	msr	BASEPRI, r0
   24b96:	f3bf 8f6f 	isb	sy
   24b9a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   24b9c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   24b9e:	4282      	cmp	r2, r0
   24ba0:	d119      	bne.n	24bd6 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   24ba2:	4576      	cmp	r6, lr
   24ba4:	d10d      	bne.n	24bc2 <rng_pool_get+0x66>
	__asm__ volatile(
   24ba6:	f04f 0540 	mov.w	r5, #64	; 0x40
   24baa:	f3ef 8211 	mrs	r2, BASEPRI
   24bae:	f385 8812 	msr	BASEPRI_MAX, r5
   24bb2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   24bb6:	781d      	ldrb	r5, [r3, #0]
   24bb8:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   24bba:	f382 8811 	msr	BASEPRI, r2
   24bbe:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   24bc2:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   24bc4:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   24bc6:	b288      	uxth	r0, r1
	available = available - len;
   24bc8:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   24bca:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   24bcc:	bf22      	ittt	cs
   24bce:	4b06      	ldrcs	r3, [pc, #24]	; (24be8 <rng_pool_get+0x8c>)
   24bd0:	2201      	movcs	r2, #1
   24bd2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   24bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   24bd6:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   24bda:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   24bdc:	f89c c005 	ldrb.w	ip, [ip, #5]
   24be0:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   24be4:	403d      	ands	r5, r7
   24be6:	e7da      	b.n	24b9e <rng_pool_get+0x42>
   24be8:	4000d000 	.word	0x4000d000

00024bec <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   24bec:	43db      	mvns	r3, r3
{
   24bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   24bf2:	f013 0501 	ands.w	r5, r3, #1
{
   24bf6:	460e      	mov	r6, r1
   24bf8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   24bfa:	d004      	beq.n	24c06 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   24bfc:	4821      	ldr	r0, [pc, #132]	; (24c84 <entropy_nrf5_get_entropy_isr+0x98>)
   24bfe:	f7ff ffad 	bl	24b5c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   24c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   24c06:	2a00      	cmp	r2, #0
   24c08:	d033      	beq.n	24c72 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   24c0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c0e:	f3ef 8811 	mrs	r8, BASEPRI
   24c12:	f383 8812 	msr	BASEPRI_MAX, r3
   24c16:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   24c1a:	200d      	movs	r0, #13
   24c1c:	f7f9 fd9a 	bl	1e754 <arch_irq_is_enabled>
   24c20:	4607      	mov	r7, r0
		irq_disable(IRQN);
   24c22:	200d      	movs	r0, #13
   24c24:	f7f9 fd82 	bl	1e72c <arch_irq_disable>
	__asm__ volatile(
   24c28:	f388 8811 	msr	BASEPRI, r8
   24c2c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   24c30:	4a15      	ldr	r2, [pc, #84]	; (24c88 <entropy_nrf5_get_entropy_isr+0x9c>)
   24c32:	6015      	str	r5, [r2, #0]
   24c34:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   24c36:	4b15      	ldr	r3, [pc, #84]	; (24c8c <entropy_nrf5_get_entropy_isr+0xa0>)
   24c38:	2101      	movs	r1, #1
   24c3a:	6019      	str	r1, [r3, #0]
   24c3c:	4914      	ldr	r1, [pc, #80]	; (24c90 <entropy_nrf5_get_entropy_isr+0xa4>)
   24c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   24c42:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   24c46:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   24c48:	4691      	mov	r9, r2
   24c4a:	468a      	mov	sl, r1
   24c4c:	4698      	mov	r8, r3
   24c4e:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   24c52:	b183      	cbz	r3, 24c76 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   24c54:	f7ff ff64 	bl	24b20 <random_byte_get>
			if (byte < 0) {
   24c58:	1e03      	subs	r3, r0, #0
   24c5a:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   24c5e:	dbf6      	blt.n	24c4e <entropy_nrf5_get_entropy_isr+0x62>
   24c60:	3d01      	subs	r5, #1
   24c62:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   24c64:	5573      	strb	r3, [r6, r5]
		} while (len);
   24c66:	2d00      	cmp	r5, #0
   24c68:	d1f1      	bne.n	24c4e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   24c6a:	b117      	cbz	r7, 24c72 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   24c6c:	200d      	movs	r0, #13
   24c6e:	f7f9 fd4d 	bl	1e70c <arch_irq_enable>
	return cnt;
   24c72:	4620      	mov	r0, r4
   24c74:	e7c5      	b.n	24c02 <entropy_nrf5_get_entropy_isr+0x16>
   24c76:	f3bf 8f4f 	dsb	sy
				__WFE();
   24c7a:	bf20      	wfe
				__SEV();
   24c7c:	bf40      	sev
				__WFE();
   24c7e:	bf20      	wfe
   24c80:	e7e5      	b.n	24c4e <entropy_nrf5_get_entropy_isr+0x62>
   24c82:	bf00      	nop
   24c84:	20002af0 	.word	0x20002af0
   24c88:	4000d100 	.word	0x4000d100
   24c8c:	4000d000 	.word	0x4000d000
   24c90:	e000e100 	.word	0xe000e100

00024c94 <entropy_nrf5_get_entropy>:
{
   24c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   24c98:	4f13      	ldr	r7, [pc, #76]	; (24ce8 <entropy_nrf5_get_entropy+0x54>)
   24c9a:	460d      	mov	r5, r1
   24c9c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   24c9e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   24ca2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   24ca6:	b914      	cbnz	r4, 24cae <entropy_nrf5_get_entropy+0x1a>
}
   24ca8:	4620      	mov	r0, r4
   24caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24cae:	f04f 33ff 	mov.w	r3, #4294967295
   24cb2:	f04f 32ff 	mov.w	r2, #4294967295
   24cb6:	4638      	mov	r0, r7
   24cb8:	f003 f908 	bl	27ecc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   24cbc:	4622      	mov	r2, r4
   24cbe:	4629      	mov	r1, r5
   24cc0:	4640      	mov	r0, r8
   24cc2:	f7ff ff4b 	bl	24b5c <rng_pool_get>
   24cc6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   24cc8:	4638      	mov	r0, r7
   24cca:	f003 f8d9 	bl	27e80 <z_impl_k_sem_give>
		if (bytes == 0U) {
   24cce:	b93e      	cbnz	r6, 24ce0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   24cd0:	f04f 32ff 	mov.w	r2, #4294967295
   24cd4:	f04f 33ff 	mov.w	r3, #4294967295
   24cd8:	4648      	mov	r0, r9
   24cda:	f003 f8f7 	bl	27ecc <z_impl_k_sem_take>
			continue;
   24cde:	e7e2      	b.n	24ca6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   24ce0:	1ba4      	subs	r4, r4, r6
   24ce2:	b2a4      	uxth	r4, r4
		buf += bytes;
   24ce4:	4435      	add	r5, r6
   24ce6:	e7de      	b.n	24ca6 <entropy_nrf5_get_entropy+0x12>
   24ce8:	20002ac0 	.word	0x20002ac0

00024cec <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   24cec:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   24cee:	4c19      	ldr	r4, [pc, #100]	; (24d54 <entropy_nrf5_init+0x68>)
   24cf0:	2201      	movs	r2, #1
   24cf2:	4611      	mov	r1, r2
   24cf4:	4620      	mov	r0, r4
   24cf6:	f00c fdac 	bl	31852 <z_impl_k_sem_init>
   24cfa:	2201      	movs	r2, #1
   24cfc:	2100      	movs	r1, #0
   24cfe:	f104 0018 	add.w	r0, r4, #24
   24d02:	f00c fda6 	bl	31852 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   24d06:	f240 4307 	movw	r3, #1031	; 0x407
   24d0a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   24d0e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   24d12:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   24d14:	230c      	movs	r3, #12
   24d16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   24d1a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   24d1c:	4b0e      	ldr	r3, [pc, #56]	; (24d58 <entropy_nrf5_init+0x6c>)
   24d1e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   24d22:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   24d26:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   24d2a:	f022 0201 	bic.w	r2, r2, #1
   24d2e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   24d32:	4a0a      	ldr	r2, [pc, #40]	; (24d5c <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   24d34:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   24d36:	6015      	str	r5, [r2, #0]
   24d38:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   24d3a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   24d3e:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   24d40:	6019      	str	r1, [r3, #0]
   24d42:	200d      	movs	r0, #13
   24d44:	f7f9 fd14 	bl	1e770 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   24d48:	200d      	movs	r0, #13
   24d4a:	f7f9 fcdf 	bl	1e70c <arch_irq_enable>

	return 0;
}
   24d4e:	4628      	mov	r0, r5
   24d50:	bd38      	pop	{r3, r4, r5, pc}
   24d52:	bf00      	nop
   24d54:	20002ac0 	.word	0x20002ac0
   24d58:	4000d000 	.word	0x4000d000
   24d5c:	4000d100 	.word	0x4000d100

00024d60 <isr>:
{
   24d60:	b510      	push	{r4, lr}
	byte = random_byte_get();
   24d62:	f7ff fedd 	bl	24b20 <random_byte_get>
	if (byte < 0) {
   24d66:	2800      	cmp	r0, #0
   24d68:	db20      	blt.n	24dac <isr+0x4c>
	uint8_t last  = rngp->last;
   24d6a:	4b17      	ldr	r3, [pc, #92]	; (24dc8 <isr+0x68>)
   24d6c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   24d70:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   24d74:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   24d78:	1a51      	subs	r1, r2, r1
   24d7a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   24d7e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   24d80:	d10d      	bne.n	24d9e <isr+0x3e>
	uint8_t last  = rngp->last;
   24d82:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   24d86:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   24d8a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   24d8e:	1a51      	subs	r1, r2, r1
   24d90:	ea34 0101 	bics.w	r1, r4, r1
   24d94:	d10b      	bne.n	24dae <isr+0x4e>
   24d96:	4b0d      	ldr	r3, [pc, #52]	; (24dcc <isr+0x6c>)
   24d98:	2201      	movs	r2, #1
   24d9a:	601a      	str	r2, [r3, #0]
}
   24d9c:	e00e      	b.n	24dbc <isr+0x5c>
	rngp->buffer[last] = byte;
   24d9e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   24da0:	3201      	adds	r2, #1
   24da2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   24da4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   24da8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   24dac:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   24dae:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   24db0:	3201      	adds	r2, #1
   24db2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   24db4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   24db8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   24dbc:	4804      	ldr	r0, [pc, #16]	; (24dd0 <isr+0x70>)
}
   24dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24dc2:	f003 b85d 	b.w	27e80 <z_impl_k_sem_give>
   24dc6:	bf00      	nop
   24dc8:	20002ac0 	.word	0x20002ac0
   24dcc:	4000d004 	.word	0x4000d004
   24dd0:	20002ad8 	.word	0x20002ad8

00024dd4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   24dd4:	4919      	ldr	r1, [pc, #100]	; (24e3c <sys_clock_timeout_handler+0x68>)
{
   24dd6:	b570      	push	{r4, r5, r6, lr}
   24dd8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   24dda:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   24dde:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   24de0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   24de4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   24de8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   24dea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   24dee:	f04f 0500 	mov.w	r5, #0
   24df2:	d20a      	bcs.n	24e0a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   24df4:	4b12      	ldr	r3, [pc, #72]	; (24e40 <sys_clock_timeout_handler+0x6c>)
   24df6:	6819      	ldr	r1, [r3, #0]
   24df8:	060a      	lsls	r2, r1, #24
   24dfa:	0a0b      	lsrs	r3, r1, #8
   24dfc:	1992      	adds	r2, r2, r6
   24dfe:	4911      	ldr	r1, [pc, #68]	; (24e44 <sys_clock_timeout_handler+0x70>)
   24e00:	f143 0300 	adc.w	r3, r3, #0
   24e04:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   24e08:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   24e0a:	f003 fee5 	bl	28bd8 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   24e0e:	00a3      	lsls	r3, r4, #2
   24e10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24e14:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   24e18:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   24e1c:	42b2      	cmp	r2, r6
   24e1e:	d10b      	bne.n	24e38 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   24e20:	b91d      	cbnz	r5, 24e2a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   24e22:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   24e26:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   24e2a:	4b07      	ldr	r3, [pc, #28]	; (24e48 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24e2c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   24e30:	fa00 f404 	lsl.w	r4, r0, r4
   24e34:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   24e38:	bd70      	pop	{r4, r5, r6, pc}
   24e3a:	bf00      	nop
   24e3c:	20001fb0 	.word	0x20001fb0
   24e40:	20002b1c 	.word	0x20002b1c
   24e44:	20001f98 	.word	0x20001f98
   24e48:	40011000 	.word	0x40011000

00024e4c <compare_int_lock>:
{
   24e4c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   24e4e:	2301      	movs	r3, #1
   24e50:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24e52:	4a11      	ldr	r2, [pc, #68]	; (24e98 <compare_int_lock+0x4c>)
   24e54:	f3bf 8f5b 	dmb	ish
   24e58:	43dc      	mvns	r4, r3
   24e5a:	e852 1f00 	ldrex	r1, [r2]
   24e5e:	ea01 0c04 	and.w	ip, r1, r4
   24e62:	e842 ce00 	strex	lr, ip, [r2]
   24e66:	f1be 0f00 	cmp.w	lr, #0
   24e6a:	d1f6      	bne.n	24e5a <compare_int_lock+0xe>
   24e6c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24e70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   24e74:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   24e78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   24e7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   24e80:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   24e84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24e88:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   24e8c:	420b      	tst	r3, r1
}
   24e8e:	bf14      	ite	ne
   24e90:	2001      	movne	r0, #1
   24e92:	2000      	moveq	r0, #0
   24e94:	bd10      	pop	{r4, pc}
   24e96:	bf00      	nop
   24e98:	20002b18 	.word	0x20002b18

00024e9c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   24e9c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24e9e:	4a12      	ldr	r2, [pc, #72]	; (24ee8 <compare_int_unlock.part.0+0x4c>)
   24ea0:	f3bf 8f5b 	dmb	ish
   24ea4:	4083      	lsls	r3, r0
   24ea6:	e852 1f00 	ldrex	r1, [r2]
   24eaa:	4319      	orrs	r1, r3
   24eac:	e842 1c00 	strex	ip, r1, [r2]
   24eb0:	f1bc 0f00 	cmp.w	ip, #0
   24eb4:	d1f7      	bne.n	24ea6 <compare_int_unlock.part.0+0xa>
   24eb6:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   24eba:	4a0c      	ldr	r2, [pc, #48]	; (24eec <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   24ec0:	4083      	lsls	r3, r0
   24ec2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24ec6:	4b0a      	ldr	r3, [pc, #40]	; (24ef0 <compare_int_unlock.part.0+0x54>)
   24ec8:	f3bf 8f5b 	dmb	ish
   24ecc:	681b      	ldr	r3, [r3, #0]
   24ece:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   24ed2:	fa23 f000 	lsr.w	r0, r3, r0
   24ed6:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   24ed8:	bf42      	ittt	mi
   24eda:	4b06      	ldrmi	r3, [pc, #24]	; (24ef4 <compare_int_unlock.part.0+0x58>)
   24edc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   24ee0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   24ee4:	4770      	bx	lr
   24ee6:	bf00      	nop
   24ee8:	20002b18 	.word	0x20002b18
   24eec:	40011000 	.word	0x40011000
   24ef0:	20002b14 	.word	0x20002b14
   24ef4:	e000e100 	.word	0xe000e100

00024ef8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   24ef8:	4b0d      	ldr	r3, [pc, #52]	; (24f30 <z_nrf_rtc_timer_read+0x38>)
   24efa:	681b      	ldr	r3, [r3, #0]
   24efc:	0a19      	lsrs	r1, r3, #8
   24efe:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   24f00:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   24f04:	4b0b      	ldr	r3, [pc, #44]	; (24f34 <z_nrf_rtc_timer_read+0x3c>)
   24f06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   24f0a:	18c0      	adds	r0, r0, r3
   24f0c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   24f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   24f14:	d20a      	bcs.n	24f2c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   24f16:	4b08      	ldr	r3, [pc, #32]	; (24f38 <z_nrf_rtc_timer_read+0x40>)
   24f18:	e9d3 2300 	ldrd	r2, r3, [r3]
   24f1c:	4299      	cmp	r1, r3
   24f1e:	bf08      	it	eq
   24f20:	4290      	cmpeq	r0, r2
   24f22:	d203      	bcs.n	24f2c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   24f24:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   24f28:	f141 0100 	adc.w	r1, r1, #0
}
   24f2c:	4770      	bx	lr
   24f2e:	bf00      	nop
   24f30:	20002b1c 	.word	0x20002b1c
   24f34:	40011000 	.word	0x40011000
   24f38:	20001f98 	.word	0x20001f98

00024f3c <compare_set>:
{
   24f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f40:	b085      	sub	sp, #20
   24f42:	4616      	mov	r6, r2
   24f44:	461f      	mov	r7, r3
   24f46:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   24f48:	f7ff ff80 	bl	24e4c <compare_int_lock>
   24f4c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   24f4e:	f7ff ffd3 	bl	24ef8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   24f52:	42b9      	cmp	r1, r7
   24f54:	bf08      	it	eq
   24f56:	42b0      	cmpeq	r0, r6
   24f58:	d27f      	bcs.n	2505a <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   24f5a:	ebb6 0800 	subs.w	r8, r6, r0
   24f5e:	eb67 0901 	sbc.w	r9, r7, r1
   24f62:	2300      	movs	r3, #0
   24f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   24f68:	454b      	cmp	r3, r9
   24f6a:	bf08      	it	eq
   24f6c:	4542      	cmpeq	r2, r8
   24f6e:	f0c0 8085 	bcc.w	2507c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   24f72:	4b44      	ldr	r3, [pc, #272]	; (25084 <compare_set+0x148>)
   24f74:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   24f78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   24f7c:	429f      	cmp	r7, r3
   24f7e:	bf08      	it	eq
   24f80:	4296      	cmpeq	r6, r2
   24f82:	d054      	beq.n	2502e <compare_set+0xf2>
   24f84:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24f88:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   24f8c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   24f90:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24f94:	fa0b f205 	lsl.w	r2, fp, r5
   24f98:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   24f9c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24fa0:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24fa4:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   24fa6:	4a38      	ldr	r2, [pc, #224]	; (25088 <compare_set+0x14c>)
    return p_reg->CC[ch];
   24fa8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   24fac:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24fb0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   24fb4:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   24fb8:	461c      	mov	r4, r3
   24fba:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   24fbc:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   24fc0:	eba0 000a 	sub.w	r0, r0, sl
   24fc4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   24fc8:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   24fcc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   24fce:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   24fd2:	d105      	bne.n	24fe0 <compare_set+0xa4>
   24fd4:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   24fd6:	2013      	movs	r0, #19
   24fd8:	f00c fe80 	bl	31cdc <z_impl_k_busy_wait>
   24fdc:	4a2a      	ldr	r2, [pc, #168]	; (25088 <compare_set+0x14c>)
   24fde:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   24fe0:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   24fe2:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   24fe6:	eba4 000c 	sub.w	r0, r4, ip
   24fea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   24fee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   24ff2:	bf88      	it	hi
   24ff4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24ff6:	2000      	movs	r0, #0
   24ff8:	f8c8 0000 	str.w	r0, [r8]
   24ffc:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   25000:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   25004:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   25008:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   2500c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   25010:	4582      	cmp	sl, r0
   25012:	d006      	beq.n	25022 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   25014:	1a20      	subs	r0, r4, r0
   25016:	3802      	subs	r0, #2
   25018:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2501c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25020:	d819      	bhi.n	25056 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   25022:	1ae4      	subs	r4, r4, r3
   25024:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   25028:	1932      	adds	r2, r6, r4
   2502a:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   2502e:	4c15      	ldr	r4, [pc, #84]	; (25084 <compare_set+0x148>)
   25030:	0129      	lsls	r1, r5, #4
   25032:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   25036:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   2503a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   2503c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   2503e:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   25040:	6043      	str	r3, [r0, #4]
	return ret;
   25042:	2400      	movs	r4, #0
	if (key) {
   25044:	9b01      	ldr	r3, [sp, #4]
   25046:	b113      	cbz	r3, 2504e <compare_set+0x112>
   25048:	4628      	mov	r0, r5
   2504a:	f7ff ff27 	bl	24e9c <compare_int_unlock.part.0>
}
   2504e:	4620      	mov	r0, r4
   25050:	b005      	add	sp, #20
   25052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25056:	4620      	mov	r0, r4
   25058:	e7b0      	b.n	24fbc <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   2505a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2505c:	4a0b      	ldr	r2, [pc, #44]	; (2508c <compare_set+0x150>)
   2505e:	f3bf 8f5b 	dmb	ish
   25062:	40ab      	lsls	r3, r5
   25064:	e852 1f00 	ldrex	r1, [r2]
   25068:	4319      	orrs	r1, r3
   2506a:	e842 1000 	strex	r0, r1, [r2]
   2506e:	2800      	cmp	r0, #0
   25070:	d1f8      	bne.n	25064 <compare_set+0x128>
   25072:	f3bf 8f5b 	dmb	ish
   25076:	4632      	mov	r2, r6
   25078:	463b      	mov	r3, r7
   2507a:	e7d8      	b.n	2502e <compare_set+0xf2>
			return -EINVAL;
   2507c:	f06f 0415 	mvn.w	r4, #21
   25080:	e7e0      	b.n	25044 <compare_set+0x108>
   25082:	bf00      	nop
   25084:	20001fa0 	.word	0x20001fa0
   25088:	40011000 	.word	0x40011000
   2508c:	20002b14 	.word	0x20002b14

00025090 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   25090:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   25092:	4b19      	ldr	r3, [pc, #100]	; (250f8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   25094:	4d19      	ldr	r5, [pc, #100]	; (250fc <sys_clock_driver_init+0x6c>)
   25096:	2400      	movs	r4, #0
   25098:	f04f 30ff 	mov.w	r0, #4294967295
   2509c:	f04f 31ff 	mov.w	r1, #4294967295
   250a0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   250a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   250a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   250ac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   250b0:	4b13      	ldr	r3, [pc, #76]	; (25100 <sys_clock_driver_init+0x70>)
   250b2:	2602      	movs	r6, #2
   250b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   250b8:	2101      	movs	r1, #1
   250ba:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   250be:	2011      	movs	r0, #17
   250c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   250c4:	4622      	mov	r2, r4
   250c6:	f7f9 fb53 	bl	1e770 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   250ca:	2011      	movs	r0, #17
   250cc:	f7f9 fb1e 	bl	1e70c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   250d0:	4a0c      	ldr	r2, [pc, #48]	; (25104 <sys_clock_driver_init+0x74>)
   250d2:	2301      	movs	r3, #1
   250d4:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   250d6:	4a0c      	ldr	r2, [pc, #48]	; (25108 <sys_clock_driver_init+0x78>)
   250d8:	602b      	str	r3, [r5, #0]
   250da:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   250dc:	4b0b      	ldr	r3, [pc, #44]	; (2510c <sys_clock_driver_init+0x7c>)
   250de:	4a0c      	ldr	r2, [pc, #48]	; (25110 <sys_clock_driver_init+0x80>)
   250e0:	9300      	str	r3, [sp, #0]
   250e2:	9401      	str	r4, [sp, #4]
   250e4:	2300      	movs	r3, #0
   250e6:	4620      	mov	r0, r4
   250e8:	f7ff ff28 	bl	24f3c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   250ec:	4630      	mov	r0, r6
   250ee:	f7fe fd2f 	bl	23b50 <z_nrf_clock_control_lf_on>

	return 0;
}
   250f2:	4620      	mov	r0, r4
   250f4:	b002      	add	sp, #8
   250f6:	bd70      	pop	{r4, r5, r6, pc}
   250f8:	20001fa0 	.word	0x20001fa0
   250fc:	40011000 	.word	0x40011000
   25100:	e000e100 	.word	0xe000e100
   25104:	40011008 	.word	0x40011008
   25108:	20002b18 	.word	0x20002b18
   2510c:	00024dd5 	.word	0x00024dd5
   25110:	007fffff 	.word	0x007fffff

00025114 <rtc_nrf_isr>:
{
   25114:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   25118:	4c2a      	ldr	r4, [pc, #168]	; (251c4 <rtc_nrf_isr+0xb0>)
   2511a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2511e:	0799      	lsls	r1, r3, #30
   25120:	d509      	bpl.n	25136 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25122:	4b29      	ldr	r3, [pc, #164]	; (251c8 <rtc_nrf_isr+0xb4>)
   25124:	681a      	ldr	r2, [r3, #0]
   25126:	b132      	cbz	r2, 25136 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25128:	2200      	movs	r2, #0
   2512a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   2512c:	4a27      	ldr	r2, [pc, #156]	; (251cc <rtc_nrf_isr+0xb8>)
   2512e:	681b      	ldr	r3, [r3, #0]
   25130:	6813      	ldr	r3, [r2, #0]
   25132:	3301      	adds	r3, #1
   25134:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25136:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2513a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   2513c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   25140:	03d2      	lsls	r2, r2, #15
   25142:	d52c      	bpl.n	2519e <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25144:	f3bf 8f5b 	dmb	ish
   25148:	4a21      	ldr	r2, [pc, #132]	; (251d0 <rtc_nrf_isr+0xbc>)
   2514a:	e852 1f00 	ldrex	r1, [r2]
   2514e:	f021 0001 	bic.w	r0, r1, #1
   25152:	e842 0500 	strex	r5, r0, [r2]
   25156:	2d00      	cmp	r5, #0
   25158:	d1f7      	bne.n	2514a <rtc_nrf_isr+0x36>
   2515a:	f3bf 8f5b 	dmb	ish
   2515e:	4a1d      	ldr	r2, [pc, #116]	; (251d4 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   25160:	b909      	cbnz	r1, 25166 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25162:	6811      	ldr	r1, [r2, #0]
		if (result) {
   25164:	b1d9      	cbz	r1, 2519e <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25166:	2500      	movs	r5, #0
   25168:	6015      	str	r5, [r2, #0]
   2516a:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2516c:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   25170:	f7ff fec2 	bl	24ef8 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25174:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   25178:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   2517a:	4b17      	ldr	r3, [pc, #92]	; (251d8 <rtc_nrf_isr+0xc4>)
   2517c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   25180:	4549      	cmp	r1, r9
   25182:	bf08      	it	eq
   25184:	4540      	cmpeq	r0, r8
   25186:	d20f      	bcs.n	251a8 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   25188:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2518a:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   2518e:	b141      	cbz	r1, 251a2 <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   25190:	f8cd a000 	str.w	sl, [sp]
   25194:	4642      	mov	r2, r8
   25196:	464b      	mov	r3, r9
   25198:	2000      	movs	r0, #0
   2519a:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2519c:	e001      	b.n	251a2 <rtc_nrf_isr+0x8e>
   2519e:	f383 8810 	msr	PRIMASK, r3
}
   251a2:	b002      	add	sp, #8
   251a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   251a8:	f04f 36ff 	mov.w	r6, #4294967295
   251ac:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   251b0:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   251b4:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   251b8:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   251ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   251be:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   251c2:	e7e2      	b.n	2518a <rtc_nrf_isr+0x76>
   251c4:	40011000 	.word	0x40011000
   251c8:	40011104 	.word	0x40011104
   251cc:	20002b1c 	.word	0x20002b1c
   251d0:	20002b14 	.word	0x20002b14
   251d4:	40011140 	.word	0x40011140
   251d8:	20001fa0 	.word	0x20001fa0

000251dc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   251dc:	4b14      	ldr	r3, [pc, #80]	; (25230 <sys_clock_set_timeout+0x54>)
{
   251de:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   251e0:	f1b0 3fff 	cmp.w	r0, #4294967295
   251e4:	bf08      	it	eq
   251e6:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   251e8:	1e44      	subs	r4, r0, #1
   251ea:	2c00      	cmp	r4, #0
   251ec:	dd1e      	ble.n	2522c <sys_clock_set_timeout+0x50>
   251ee:	429c      	cmp	r4, r3
   251f0:	bfa8      	it	ge
   251f2:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   251f4:	f7ff fe80 	bl	24ef8 <z_nrf_rtc_timer_read>
   251f8:	4b0e      	ldr	r3, [pc, #56]	; (25234 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   251fa:	490f      	ldr	r1, [pc, #60]	; (25238 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   251fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   25200:	1a80      	subs	r0, r0, r2
		ticks = 0;
   25202:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25206:	bf28      	it	cs
   25208:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2520a:	3001      	adds	r0, #1
   2520c:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   2520e:	4808      	ldr	r0, [pc, #32]	; (25230 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   25210:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   25212:	4284      	cmp	r4, r0
   25214:	bf28      	it	cs
   25216:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   25218:	1912      	adds	r2, r2, r4
   2521a:	f04f 0000 	mov.w	r0, #0
   2521e:	9001      	str	r0, [sp, #4]
   25220:	f143 0300 	adc.w	r3, r3, #0
   25224:	f7ff fe8a 	bl	24f3c <compare_set>
}
   25228:	b002      	add	sp, #8
   2522a:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2522c:	2400      	movs	r4, #0
   2522e:	e7e1      	b.n	251f4 <sys_clock_set_timeout+0x18>
   25230:	007fffff 	.word	0x007fffff
   25234:	20001fb0 	.word	0x20001fb0
   25238:	00024dd5 	.word	0x00024dd5

0002523c <sys_clock_elapsed>:
{
   2523c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2523e:	f7ff fe5b 	bl	24ef8 <z_nrf_rtc_timer_read>
   25242:	4b02      	ldr	r3, [pc, #8]	; (2524c <sys_clock_elapsed+0x10>)
   25244:	681b      	ldr	r3, [r3, #0]
}
   25246:	1ac0      	subs	r0, r0, r3
   25248:	bd08      	pop	{r3, pc}
   2524a:	bf00      	nop
   2524c:	20001fb0 	.word	0x20001fb0

00025250 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   25250:	4602      	mov	r2, r0
   25252:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   25254:	4801      	ldr	r0, [pc, #4]	; (2525c <multithreading_lock_acquire+0xc>)
   25256:	f002 bd1b 	b.w	27c90 <z_impl_k_mutex_lock>
   2525a:	bf00      	nop
   2525c:	20000c1c 	.word	0x20000c1c

00025260 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   25260:	4801      	ldr	r0, [pc, #4]	; (25268 <multithreading_lock_release+0x8>)
   25262:	f002 bd93 	b.w	27d8c <z_impl_k_mutex_unlock>
   25266:	bf00      	nop
   25268:	20000c1c 	.word	0x20000c1c

0002526c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   2526c:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   2526e:	4905      	ldr	r1, [pc, #20]	; (25284 <rand_prio_low_vector_get_blocking+0x18>)
{
   25270:	b410      	push	{r4}
   25272:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   25274:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   25276:	6881      	ldr	r1, [r0, #8]
   25278:	680c      	ldr	r4, [r1, #0]
   2527a:	4619      	mov	r1, r3
   2527c:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   2527e:	bc10      	pop	{r4}
   25280:	4718      	bx	r3
   25282:	bf00      	nop
   25284:	20002b20 	.word	0x20002b20

00025288 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   25288:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   2528a:	4804      	ldr	r0, [pc, #16]	; (2529c <hci_driver_init+0x14>)
   2528c:	f7fa fd0a 	bl	1fca4 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   25290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   25294:	4802      	ldr	r0, [pc, #8]	; (252a0 <hci_driver_init+0x18>)
   25296:	f7eb bacb 	b.w	10830 <sdc_init>
   2529a:	bf00      	nop
   2529c:	00032d40 	.word	0x00032d40
   252a0:	0003084f 	.word	0x0003084f

000252a4 <rand_prio_low_vector_get>:
{
   252a4:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   252a6:	4b08      	ldr	r3, [pc, #32]	; (252c8 <rand_prio_low_vector_get+0x24>)
{
   252a8:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   252aa:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   252ac:	6883      	ldr	r3, [r0, #8]
   252ae:	685d      	ldr	r5, [r3, #4]
   252b0:	460a      	mov	r2, r1
   252b2:	b135      	cbz	r5, 252c2 <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   252b4:	2300      	movs	r3, #0
   252b6:	4621      	mov	r1, r4
   252b8:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   252ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   252be:	b2c0      	uxtb	r0, r0
   252c0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   252c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   252c6:	e7f8      	b.n	252ba <rand_prio_low_vector_get+0x16>
   252c8:	20002b20 	.word	0x20002b20

000252cc <hci_driver_open>:
{
   252cc:	b570      	push	{r4, r5, r6, lr}
   252ce:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   252d0:	2200      	movs	r2, #0
   252d2:	2300      	movs	r3, #0
   252d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   252d8:	2300      	movs	r3, #0
   252da:	f06f 0209 	mvn.w	r2, #9
   252de:	e9cd 2303 	strd	r2, r3, [sp, #12]
   252e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   252e6:	9300      	str	r3, [sp, #0]
   252e8:	4946      	ldr	r1, [pc, #280]	; (25404 <hci_driver_open+0x138>)
   252ea:	4b47      	ldr	r3, [pc, #284]	; (25408 <hci_driver_open+0x13c>)
   252ec:	4847      	ldr	r0, [pc, #284]	; (2540c <hci_driver_open+0x140>)
   252ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   252f2:	f002 fc2d 	bl	27b50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   252f6:	4946      	ldr	r1, [pc, #280]	; (25410 <hci_driver_open+0x144>)
   252f8:	4844      	ldr	r0, [pc, #272]	; (2540c <hci_driver_open+0x140>)
   252fa:	f00c f9ca 	bl	31692 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   252fe:	a80b      	add	r0, sp, #44	; 0x2c
   25300:	f7eb fa04 	bl	1070c <sdc_build_revision_get>
			err = sdc_support_adv();
   25304:	f7eb fb14 	bl	10930 <sdc_support_adv>
			if (err) {
   25308:	b118      	cbz	r0, 25312 <hci_driver_open+0x46>
				return -ENOTSUP;
   2530a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2530e:	b010      	add	sp, #64	; 0x40
   25310:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_slave();
   25312:	f7eb fb3d 	bl	10990 <sdc_support_slave>
		if (err) {
   25316:	2800      	cmp	r0, #0
   25318:	d1f7      	bne.n	2530a <hci_driver_open+0x3e>
		err = sdc_support_dle();
   2531a:	f7eb fb19 	bl	10950 <sdc_support_dle>
		if (err) {
   2531e:	2800      	cmp	r0, #0
   25320:	d1f3      	bne.n	2530a <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   25322:	f7eb fb25 	bl	10970 <sdc_support_le_2m_phy>
		if (err) {
   25326:	4605      	mov	r5, r0
   25328:	2800      	cmp	r0, #0
   2532a:	d1ee      	bne.n	2530a <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2532c:	ac08      	add	r4, sp, #32
   2532e:	4622      	mov	r2, r4
   25330:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   25332:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   25336:	f7eb f9f7 	bl	10728 <sdc_cfg_set>
	if (required_memory < 0) {
   2533a:	2800      	cmp	r0, #0
   2533c:	dbe7      	blt.n	2530e <hci_driver_open+0x42>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2533e:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   25340:	4622      	mov	r2, r4
   25342:	2102      	movs	r1, #2
   25344:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   25346:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2534a:	f7eb f9ed 	bl	10728 <sdc_cfg_set>
	if (required_memory < 0) {
   2534e:	2800      	cmp	r0, #0
   25350:	dbdd      	blt.n	2530e <hci_driver_open+0x42>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   25352:	4b30      	ldr	r3, [pc, #192]	; (25414 <hci_driver_open+0x148>)
   25354:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   25356:	4622      	mov	r2, r4
   25358:	2103      	movs	r1, #3
   2535a:	4628      	mov	r0, r5
   2535c:	f7eb f9e4 	bl	10728 <sdc_cfg_set>
	if (required_memory < 0) {
   25360:	2800      	cmp	r0, #0
   25362:	dbd4      	blt.n	2530e <hci_driver_open+0x42>
	cfg.event_length.event_length_us =
   25364:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   25368:	4622      	mov	r2, r4
   2536a:	2104      	movs	r1, #4
   2536c:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   2536e:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   25370:	f7eb f9da 	bl	10728 <sdc_cfg_set>
	if (required_memory < 0) {
   25374:	2800      	cmp	r0, #0
   25376:	dbca      	blt.n	2530e <hci_driver_open+0x42>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   25378:	4622      	mov	r2, r4
   2537a:	2105      	movs	r1, #5
   2537c:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   2537e:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   25382:	f7eb f9d1 	bl	10728 <sdc_cfg_set>
	if (required_memory < 0) {
   25386:	2800      	cmp	r0, #0
   25388:	dbc1      	blt.n	2530e <hci_driver_open+0x42>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   2538a:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2538c:	4622      	mov	r2, r4
   2538e:	2107      	movs	r1, #7
   25390:	4628      	mov	r0, r5
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   25392:	f8ad 3020 	strh.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   25396:	f7eb f9c7 	bl	10728 <sdc_cfg_set>
		if (required_memory < 0) {
   2539a:	2800      	cmp	r0, #0
   2539c:	dbb7      	blt.n	2530e <hci_driver_open+0x42>
	if (required_memory > sizeof(sdc_mempool)) {
   2539e:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   253a2:	dd08      	ble.n	253b6 <hci_driver_open+0xea>
		k_panic();
   253a4:	4040      	eors	r0, r0
   253a6:	f380 8811 	msr	BASEPRI, r0
   253aa:	f04f 0004 	mov.w	r0, #4
   253ae:	df02      	svc	2
		return -ENOMEM;
   253b0:	f06f 000b 	mvn.w	r0, #11
   253b4:	e7ab      	b.n	2530e <hci_driver_open+0x42>
   253b6:	4818      	ldr	r0, [pc, #96]	; (25418 <hci_driver_open+0x14c>)
   253b8:	f002 fa44 	bl	27844 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   253bc:	4b17      	ldr	r3, [pc, #92]	; (2541c <hci_driver_open+0x150>)
   253be:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   253c0:	b1e8      	cbz	r0, 253fe <hci_driver_open+0x132>
	sdc_rand_source_t rand_functions = {
   253c2:	4b17      	ldr	r3, [pc, #92]	; (25420 <hci_driver_open+0x154>)
   253c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   253c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   253cc:	4620      	mov	r0, r4
   253ce:	f7eb fb31 	bl	10a34 <sdc_rand_source_register>
	if (err) {
   253d2:	b988      	cbnz	r0, 253f8 <hci_driver_open+0x12c>
	err = MULTITHREADING_LOCK_ACQUIRE();
   253d4:	f04f 30ff 	mov.w	r0, #4294967295
   253d8:	f04f 31ff 	mov.w	r1, #4294967295
   253dc:	f7ff ff38 	bl	25250 <multithreading_lock_acquire>
	if (!err) {
   253e0:	4604      	mov	r4, r0
   253e2:	b930      	cbnz	r0, 253f2 <hci_driver_open+0x126>
		err = sdc_enable(host_signal, sdc_mempool);
   253e4:	490f      	ldr	r1, [pc, #60]	; (25424 <hci_driver_open+0x158>)
   253e6:	4810      	ldr	r0, [pc, #64]	; (25428 <hci_driver_open+0x15c>)
   253e8:	f7eb f9fa 	bl	107e0 <sdc_enable>
   253ec:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   253ee:	f7ff ff37 	bl	25260 <multithreading_lock_release>
	if (err < 0) {
   253f2:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   253f6:	e78a      	b.n	2530e <hci_driver_open+0x42>
		return -EINVAL;
   253f8:	f06f 0015 	mvn.w	r0, #21
   253fc:	e787      	b.n	2530e <hci_driver_open+0x42>
		return -ENODEV;
   253fe:	f06f 0012 	mvn.w	r0, #18
   25402:	e784      	b.n	2530e <hci_driver_open+0x42>
   25404:	20005320 	.word	0x20005320
   25408:	0002542d 	.word	0x0002542d
   2540c:	20001fb8 	.word	0x20001fb8
   25410:	0003330b 	.word	0x0003330b
   25414:	02031b1b 	.word	0x02031b1b
   25418:	000332fc 	.word	0x000332fc
   2541c:	20002b20 	.word	0x20002b20
   25420:	00032530 	.word	0x00032530
   25424:	200037ff 	.word	0x200037ff
   25428:	00025509 	.word	0x00025509

0002542c <recv_thread>:
{
   2542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   2542e:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   25430:	4f33      	ldr	r7, [pc, #204]	; (25500 <recv_thread+0xd4>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   25432:	4c34      	ldr	r4, [pc, #208]	; (25504 <recv_thread+0xd8>)
	bool received_evt = false;
   25434:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   25436:	b93e      	cbnz	r6, 25448 <recv_thread+0x1c>
   25438:	b935      	cbnz	r5, 25448 <recv_thread+0x1c>
   2543a:	f04f 32ff 	mov.w	r2, #4294967295
   2543e:	f04f 33ff 	mov.w	r3, #4294967295
   25442:	4638      	mov	r0, r7
   25444:	f002 fd42 	bl	27ecc <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   25448:	f04f 30ff 	mov.w	r0, #4294967295
   2544c:	f04f 31ff 	mov.w	r1, #4294967295
   25450:	f7ff fefe 	bl	25250 <multithreading_lock_acquire>
	if (!errcode) {
   25454:	b158      	cbz	r0, 2546e <recv_thread+0x42>
		return false;
   25456:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   25458:	f04f 30ff 	mov.w	r0, #4294967295
   2545c:	f04f 31ff 	mov.w	r1, #4294967295
   25460:	f7ff fef6 	bl	25250 <multithreading_lock_acquire>
	if (!errcode) {
   25464:	b370      	cbz	r0, 254c4 <recv_thread+0x98>
		return false;
   25466:	2500      	movs	r5, #0
	z_impl_k_yield();
   25468:	f003 f9a2 	bl	287b0 <z_impl_k_yield>
}
   2546c:	e7e3      	b.n	25436 <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   2546e:	4825      	ldr	r0, [pc, #148]	; (25504 <recv_thread+0xd8>)
   25470:	f000 fb9c 	bl	25bac <hci_internal_evt_get>
   25474:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   25476:	f7ff fef3 	bl	25260 <multithreading_lock_release>
	if (errcode) {
   2547a:	2d00      	cmp	r5, #0
   2547c:	d1eb      	bne.n	25456 <recv_thread+0x2a>
	switch (hdr->evt) {
   2547e:	7820      	ldrb	r0, [r4, #0]
   25480:	283e      	cmp	r0, #62	; 0x3e
   25482:	d007      	beq.n	25494 <recv_thread+0x68>
   25484:	28ff      	cmp	r0, #255	; 0xff
   25486:	d01a      	beq.n	254be <recv_thread+0x92>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   25488:	f04f 32ff 	mov.w	r2, #4294967295
   2548c:	f04f 33ff 	mov.w	r3, #4294967295
   25490:	2100      	movs	r1, #0
   25492:	e005      	b.n	254a0 <recv_thread+0x74>
		switch (me->subevent) {
   25494:	78a3      	ldrb	r3, [r4, #2]
   25496:	2b02      	cmp	r3, #2
		switch (subevent) {
   25498:	d1f6      	bne.n	25488 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2549a:	2200      	movs	r2, #0
   2549c:	2300      	movs	r3, #0
   2549e:	2101      	movs	r1, #1
   254a0:	f7f9 fd78 	bl	1ef94 <bt_buf_get_evt>
	if (!evt_buf) {
   254a4:	4605      	mov	r5, r0
   254a6:	b140      	cbz	r0, 254ba <recv_thread+0x8e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   254a8:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   254aa:	4621      	mov	r1, r4
   254ac:	3202      	adds	r2, #2
   254ae:	3008      	adds	r0, #8
   254b0:	f00a fadd 	bl	2fa6e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   254b4:	4628      	mov	r0, r5
   254b6:	f7fa fbd3 	bl	1fc60 <bt_recv>
	return true;
   254ba:	2601      	movs	r6, #1
   254bc:	e7cc      	b.n	25458 <recv_thread+0x2c>
		switch (subevent) {
   254be:	78a3      	ldrb	r3, [r4, #2]
   254c0:	2b80      	cmp	r3, #128	; 0x80
   254c2:	e7e9      	b.n	25498 <recv_thread+0x6c>
		errcode = sdc_hci_data_get(p_hci_buffer);
   254c4:	480f      	ldr	r0, [pc, #60]	; (25504 <recv_thread+0xd8>)
   254c6:	f7f3 fe21 	bl	1910c <sdc_hci_data_get>
   254ca:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   254cc:	f7ff fec8 	bl	25260 <multithreading_lock_release>
	if (errcode) {
   254d0:	2d00      	cmp	r5, #0
   254d2:	d1c8      	bne.n	25466 <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   254d4:	f04f 32ff 	mov.w	r2, #4294967295
   254d8:	f04f 33ff 	mov.w	r3, #4294967295
   254dc:	2003      	movs	r0, #3
   254de:	f7f9 fd2f 	bl	1ef40 <bt_buf_get_rx>
	if (!data_buf) {
   254e2:	4605      	mov	r5, r0
   254e4:	b908      	cbnz	r0, 254ea <recv_thread+0xbe>
	return true;
   254e6:	2501      	movs	r5, #1
   254e8:	e7be      	b.n	25468 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   254ea:	8862      	ldrh	r2, [r4, #2]
   254ec:	4621      	mov	r1, r4
   254ee:	3204      	adds	r2, #4
   254f0:	3008      	adds	r0, #8
   254f2:	f00a fabc 	bl	2fa6e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   254f6:	4628      	mov	r0, r5
   254f8:	f7fa fbb2 	bl	1fc60 <bt_recv>
   254fc:	e7f3      	b.n	254e6 <recv_thread+0xba>
   254fe:	bf00      	nop
   25500:	20000c84 	.word	0x20000c84
   25504:	200036fb 	.word	0x200036fb

00025508 <host_signal>:
	z_impl_k_sem_give(sem);
   25508:	4801      	ldr	r0, [pc, #4]	; (25510 <host_signal+0x8>)
   2550a:	f002 bcb9 	b.w	27e80 <z_impl_k_sem_give>
   2550e:	bf00      	nop
   25510:	20000c84 	.word	0x20000c84

00025514 <hci_driver_send>:
{
   25514:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   25516:	8983      	ldrh	r3, [r0, #12]
{
   25518:	4605      	mov	r5, r0
	if (!buf->len) {
   2551a:	b383      	cbz	r3, 2557e <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2551c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2551e:	b1ab      	cbz	r3, 2554c <hci_driver_send+0x38>
   25520:	2b02      	cmp	r3, #2
   25522:	d12c      	bne.n	2557e <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   25524:	f04f 30ff 	mov.w	r0, #4294967295
   25528:	f04f 31ff 	mov.w	r1, #4294967295
   2552c:	f7ff fe90 	bl	25250 <multithreading_lock_acquire>
	if (!errcode) {
   25530:	4604      	mov	r4, r0
   25532:	b948      	cbnz	r0, 25548 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   25534:	68a8      	ldr	r0, [r5, #8]
   25536:	f7f3 fdf6 	bl	19126 <sdc_hci_data_put>
   2553a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2553c:	f7ff fe90 	bl	25260 <multithreading_lock_release>
		if (errcode) {
   25540:	b1c4      	cbz	r4, 25574 <hci_driver_send+0x60>
   25542:	4810      	ldr	r0, [pc, #64]	; (25584 <hci_driver_send+0x70>)
   25544:	f002 fc9c 	bl	27e80 <z_impl_k_sem_give>
}
   25548:	4620      	mov	r0, r4
   2554a:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2554c:	f04f 30ff 	mov.w	r0, #4294967295
   25550:	f04f 31ff 	mov.w	r1, #4294967295
   25554:	f7ff fe7c 	bl	25250 <multithreading_lock_acquire>
	if (!errcode) {
   25558:	4604      	mov	r4, r0
   2555a:	2800      	cmp	r0, #0
   2555c:	d1f4      	bne.n	25548 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   2555e:	68a8      	ldr	r0, [r5, #8]
   25560:	f000 f812 	bl	25588 <hci_internal_cmd_put>
   25564:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   25566:	f7ff fe7b 	bl	25260 <multithreading_lock_release>
	if (errcode) {
   2556a:	2c00      	cmp	r4, #0
   2556c:	d1ec      	bne.n	25548 <hci_driver_send+0x34>
   2556e:	4805      	ldr	r0, [pc, #20]	; (25584 <hci_driver_send+0x70>)
   25570:	f002 fc86 	bl	27e80 <z_impl_k_sem_give>
		net_buf_unref(buf);
   25574:	4628      	mov	r0, r5
   25576:	f7fd ffd5 	bl	23524 <net_buf_unref>
   2557a:	2400      	movs	r4, #0
   2557c:	e7e4      	b.n	25548 <hci_driver_send+0x34>
	switch (type) {
   2557e:	f06f 0415 	mvn.w	r4, #21
   25582:	e7e1      	b.n	25548 <hci_driver_send+0x34>
   25584:	20000c84 	.word	0x20000c84

00025588 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   25588:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   2558a:	4c8e      	ldr	r4, [pc, #568]	; (257c4 <hci_internal_cmd_put+0x23c>)
   2558c:	7823      	ldrb	r3, [r4, #0]
   2558e:	2b00      	cmp	r3, #0
   25590:	f040 82f7 	bne.w	25b82 <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   25594:	7843      	ldrb	r3, [r0, #1]
   25596:	7805      	ldrb	r5, [r0, #0]
   25598:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   2559c:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   255a0:	b22e      	sxth	r6, r5
   255a2:	ea4f 2395 	mov.w	r3, r5, lsr #10
   255a6:	d20d      	bcs.n	255c4 <hci_internal_cmd_put+0x3c>
   255a8:	b17b      	cbz	r3, 255ca <hci_internal_cmd_put+0x42>
   255aa:	3b01      	subs	r3, #1
   255ac:	2b07      	cmp	r3, #7
   255ae:	d80c      	bhi.n	255ca <hci_internal_cmd_put+0x42>
   255b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   255b4:	000b000e 	.word	0x000b000e
   255b8:	0060002c 	.word	0x0060002c
   255bc:	000b000b 	.word	0x000b000b
   255c0:	010c000b 	.word	0x010c000b
   255c4:	2b3f      	cmp	r3, #63	; 0x3f
   255c6:	f000 8233 	beq.w	25a30 <hci_internal_cmd_put+0x4a8>
   255ca:	2304      	movs	r3, #4
   255cc:	2001      	movs	r0, #1
   255ce:	e26b      	b.n	25aa8 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   255d0:	f240 4306 	movw	r3, #1030	; 0x406
   255d4:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   255d6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   255da:	d005      	beq.n	255e8 <hci_internal_cmd_put+0x60>
   255dc:	f240 431d 	movw	r3, #1053	; 0x41d
   255e0:	429e      	cmp	r6, r3
   255e2:	d010      	beq.n	25606 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   255e4:	2001      	movs	r0, #1
   255e6:	e001      	b.n	255ec <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   255e8:	f7f3 fec3 	bl	19372 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   255ec:	230f      	movs	r3, #15
   255ee:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   255f0:	2304      	movs	r3, #4
   255f2:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   255f4:	2301      	movs	r3, #1
	evt_data->status = status_code;
   255f6:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   255f8:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   255fa:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   255fe:	2301      	movs	r3, #1
   25600:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   25602:	2000      	movs	r0, #0
}
   25604:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   25606:	f7f3 feb6 	bl	19376 <sdc_hci_cmd_lc_read_remote_version_information>
   2560a:	e7ef      	b.n	255ec <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   2560c:	f640 4363 	movw	r3, #3171	; 0xc63
   25610:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   25612:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   25616:	d025      	beq.n	25664 <hci_internal_cmd_put+0xdc>
   25618:	dc0f      	bgt.n	2563a <hci_internal_cmd_put+0xb2>
   2561a:	f640 4303 	movw	r3, #3075	; 0xc03
   2561e:	429e      	cmp	r6, r3
   25620:	d018      	beq.n	25654 <hci_internal_cmd_put+0xcc>
   25622:	f640 432d 	movw	r3, #3117	; 0xc2d
   25626:	429e      	cmp	r6, r3
   25628:	d017      	beq.n	2565a <hci_internal_cmd_put+0xd2>
   2562a:	f640 4301 	movw	r3, #3073	; 0xc01
   2562e:	429e      	cmp	r6, r3
   25630:	d1d8      	bne.n	255e4 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   25632:	f7f3 fd94 	bl	1915e <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   25636:	2304      	movs	r3, #4
   25638:	e0b8      	b.n	257ac <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   2563a:	f640 437b 	movw	r3, #3195	; 0xc7b
   2563e:	429e      	cmp	r6, r3
   25640:	d013      	beq.n	2566a <hci_internal_cmd_put+0xe2>
   25642:	f640 437c 	movw	r3, #3196	; 0xc7c
   25646:	429e      	cmp	r6, r3
   25648:	d1cc      	bne.n	255e4 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2564a:	495f      	ldr	r1, [pc, #380]	; (257c8 <hci_internal_cmd_put+0x240>)
   2564c:	f7f3 fd91 	bl	19172 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   25650:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   25652:	e0ab      	b.n	257ac <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   25654:	f7eb fae2 	bl	10c1c <sdc_hci_cmd_cb_reset>
   25658:	e7ed      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2565a:	495b      	ldr	r1, [pc, #364]	; (257c8 <hci_internal_cmd_put+0x240>)
   2565c:	f7f3 fd7d 	bl	1915a <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   25660:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   25662:	e0a3      	b.n	257ac <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   25664:	f7f3 fd80 	bl	19168 <sdc_hci_cmd_cb_set_event_mask_page_2>
   25668:	e7e5      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2566a:	4957      	ldr	r1, [pc, #348]	; (257c8 <hci_internal_cmd_put+0x240>)
   2566c:	f7f3 fd73 	bl	19156 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   25670:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   25672:	e09b      	b.n	257ac <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   25674:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   25678:	3e01      	subs	r6, #1
   2567a:	2e08      	cmp	r6, #8
   2567c:	d8b2      	bhi.n	255e4 <hci_internal_cmd_put+0x5c>
   2567e:	a301      	add	r3, pc, #4	; (adr r3, 25684 <hci_internal_cmd_put+0xfc>)
   25680:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   25684:	000256a9 	.word	0x000256a9
   25688:	000256b3 	.word	0x000256b3
   2568c:	0002578d 	.word	0x0002578d
   25690:	000255e5 	.word	0x000255e5
   25694:	000255e5 	.word	0x000255e5
   25698:	000255e5 	.word	0x000255e5
   2569c:	000255e5 	.word	0x000255e5
   256a0:	000255e5 	.word	0x000255e5
   256a4:	000257a5 	.word	0x000257a5
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   256a8:	4847      	ldr	r0, [pc, #284]	; (257c8 <hci_internal_cmd_put+0x240>)
   256aa:	f7f3 fe17 	bl	192dc <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   256ae:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   256b0:	e07c      	b.n	257ac <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   256b2:	4845      	ldr	r0, [pc, #276]	; (257c8 <hci_internal_cmd_put+0x240>)
   256b4:	222e      	movs	r2, #46	; 0x2e
   256b6:	2100      	movs	r1, #0
   256b8:	f007 fb0a 	bl	2ccd0 <memset>
	cmds->hci_disconnect = 1;
   256bc:	79e3      	ldrb	r3, [r4, #7]
   256be:	f043 0320 	orr.w	r3, r3, #32
   256c2:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   256c4:	7a63      	ldrb	r3, [r4, #9]
   256c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   256ca:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   256cc:	7b23      	ldrb	r3, [r4, #12]
   256ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
   256d2:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   256d4:	7c63      	ldrb	r3, [r4, #17]
   256d6:	f043 0304 	orr.w	r3, r3, #4
   256da:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   256dc:	7d63      	ldrb	r3, [r4, #21]
   256de:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   256e2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   256e6:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   256e8:	7da3      	ldrb	r3, [r4, #22]
   256ea:	f043 0302 	orr.w	r3, r3, #2
   256ee:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   256f0:	7f63      	ldrb	r3, [r4, #29]
   256f2:	f043 0304 	orr.w	r3, r3, #4
   256f6:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   256f8:	f894 3020 	ldrb.w	r3, [r4, #32]
   256fc:	f063 0308 	orn	r3, r3, #8
   25700:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   25704:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   25708:	f063 033c 	orn	r3, r3, #60	; 0x3c
   2570c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   25710:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   25714:	f063 030c 	orn	r3, r3, #12
   25718:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   2571c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   25720:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   25724:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   25728:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   2572c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   25730:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   25734:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   25738:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   2573c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   25740:	f063 033f 	orn	r3, r3, #63	; 0x3f
   25744:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   25748:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2574c:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   25750:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   25754:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   25758:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   2575c:	f063 0301 	orn	r3, r3, #1
   25760:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   25764:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   25768:	f043 0301 	orr.w	r3, r3, #1
   2576c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   25770:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   25774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   25778:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   2577c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   25780:	f043 0304 	orr.w	r3, r3, #4
   25784:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   25788:	2344      	movs	r3, #68	; 0x44
   2578a:	e0de      	b.n	2594a <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   2578c:	480e      	ldr	r0, [pc, #56]	; (257c8 <hci_internal_cmd_put+0x240>)
   2578e:	2208      	movs	r2, #8
   25790:	2100      	movs	r1, #0
   25792:	f007 fa9d 	bl	2ccd0 <memset>
	features->bdedr_not_supported = 1;
   25796:	7ae3      	ldrb	r3, [r4, #11]
   25798:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   2579c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   257a0:	72e3      	strb	r3, [r4, #11]
   257a2:	e0d1      	b.n	25948 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   257a4:	4808      	ldr	r0, [pc, #32]	; (257c8 <hci_internal_cmd_put+0x240>)
   257a6:	f7f3 fd97 	bl	192d8 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   257aa:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   257ac:	2801      	cmp	r0, #1
   257ae:	f43f af1d 	beq.w	255ec <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   257b2:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   257b4:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   257b6:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   257b8:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   257ba:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   257bc:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   257be:	71a0      	strb	r0, [r4, #6]
}
   257c0:	e71d      	b.n	255fe <hci_internal_cmd_put+0x76>
   257c2:	bf00      	nop
   257c4:	20003d77 	.word	0x20003d77
   257c8:	20003d7e 	.word	0x20003d7e
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   257cc:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   257d0:	3e01      	subs	r6, #1
   257d2:	3003      	adds	r0, #3
	switch (opcode)	{
   257d4:	2e4d      	cmp	r6, #77	; 0x4d
   257d6:	f63f af05 	bhi.w	255e4 <hci_internal_cmd_put+0x5c>
   257da:	a301      	add	r3, pc, #4	; (adr r3, 257e0 <hci_internal_cmd_put+0x258>)
   257dc:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   257e0:	00025919 	.word	0x00025919
   257e4:	0002591f 	.word	0x0002591f
   257e8:	00025927 	.word	0x00025927
   257ec:	000255e5 	.word	0x000255e5
   257f0:	0002594f 	.word	0x0002594f
   257f4:	00025955 	.word	0x00025955
   257f8:	0002595b 	.word	0x0002595b
   257fc:	00025965 	.word	0x00025965
   25800:	0002596b 	.word	0x0002596b
   25804:	00025971 	.word	0x00025971
   25808:	000255e5 	.word	0x000255e5
   2580c:	000255e5 	.word	0x000255e5
   25810:	000255e5 	.word	0x000255e5
   25814:	000255e5 	.word	0x000255e5
   25818:	00025977 	.word	0x00025977
   2581c:	0002597f 	.word	0x0002597f
   25820:	00025985 	.word	0x00025985
   25824:	0002598b 	.word	0x0002598b
   25828:	000255e5 	.word	0x000255e5
   2582c:	000255e5 	.word	0x000255e5
   25830:	00025991 	.word	0x00025991
   25834:	0002599b 	.word	0x0002599b
   25838:	000259a1 	.word	0x000259a1
   2583c:	000259ab 	.word	0x000259ab
   25840:	000255e5 	.word	0x000255e5
   25844:	000259b3 	.word	0x000259b3
   25848:	000259bb 	.word	0x000259bb
   2584c:	000259c3 	.word	0x000259c3
   25850:	000255e5 	.word	0x000255e5
   25854:	000255e5 	.word	0x000255e5
   25858:	000255e5 	.word	0x000255e5
   2585c:	000255e5 	.word	0x000255e5
   25860:	000255e5 	.word	0x000255e5
   25864:	000259cb 	.word	0x000259cb
   25868:	000259d3 	.word	0x000259d3
   2586c:	000259db 	.word	0x000259db
   25870:	000255e5 	.word	0x000255e5
   25874:	000255e5 	.word	0x000255e5
   25878:	000259e1 	.word	0x000259e1
   2587c:	000259e7 	.word	0x000259e7
   25880:	000259ed 	.word	0x000259ed
   25884:	000259f3 	.word	0x000259f3
   25888:	000255e5 	.word	0x000255e5
   2588c:	000255e5 	.word	0x000255e5
   25890:	000259fb 	.word	0x000259fb
   25894:	00025a01 	.word	0x00025a01
   25898:	00025a07 	.word	0x00025a07
   2589c:	00025a0f 	.word	0x00025a0f
   258a0:	00025a17 	.word	0x00025a17
   258a4:	00025a1d 	.word	0x00025a1d
   258a8:	000255e5 	.word	0x000255e5
   258ac:	000255e5 	.word	0x000255e5
   258b0:	000255e5 	.word	0x000255e5
   258b4:	000255e5 	.word	0x000255e5
   258b8:	000255e5 	.word	0x000255e5
   258bc:	000255e5 	.word	0x000255e5
   258c0:	000255e5 	.word	0x000255e5
   258c4:	000255e5 	.word	0x000255e5
   258c8:	000255e5 	.word	0x000255e5
   258cc:	000255e5 	.word	0x000255e5
   258d0:	000255e5 	.word	0x000255e5
   258d4:	000255e5 	.word	0x000255e5
   258d8:	000255e5 	.word	0x000255e5
   258dc:	000255e5 	.word	0x000255e5
   258e0:	000255e5 	.word	0x000255e5
   258e4:	000255e5 	.word	0x000255e5
   258e8:	000255e5 	.word	0x000255e5
   258ec:	000255e5 	.word	0x000255e5
   258f0:	000255e5 	.word	0x000255e5
   258f4:	000255e5 	.word	0x000255e5
   258f8:	000255e5 	.word	0x000255e5
   258fc:	000255e5 	.word	0x000255e5
   25900:	000255e5 	.word	0x000255e5
   25904:	000255e5 	.word	0x000255e5
   25908:	00025a23 	.word	0x00025a23
   2590c:	000255e5 	.word	0x000255e5
   25910:	000255e5 	.word	0x000255e5
   25914:	00025a2b 	.word	0x00025a2b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   25918:	f7f3 fd1a 	bl	19350 <sdc_hci_cmd_le_set_event_mask>
   2591c:	e68b      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2591e:	48a2      	ldr	r0, [pc, #648]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25920:	f7f3 fcf4 	bl	1930c <sdc_hci_cmd_le_read_buffer_size>
   25924:	e69c      	b.n	25660 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   25926:	48a0      	ldr	r0, [pc, #640]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25928:	2205      	movs	r2, #5
   2592a:	2100      	movs	r1, #0
   2592c:	f007 f9d0 	bl	2ccd0 <memset>
	features->le_encryption = 1;
   25930:	79e3      	ldrb	r3, [r4, #7]
   25932:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   25936:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   2593a:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   2593c:	7a23      	ldrb	r3, [r4, #8]
   2593e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   25942:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   25946:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   25948:	230c      	movs	r3, #12
	switch (hci_opcode) {
   2594a:	2000      	movs	r0, #0
   2594c:	e731      	b.n	257b2 <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2594e:	f7f3 fd08 	bl	19362 <sdc_hci_cmd_le_set_random_address>
   25952:	e670      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   25954:	f7f3 fcf6 	bl	19344 <sdc_hci_cmd_le_set_adv_params>
   25958:	e66d      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2595a:	4893      	ldr	r0, [pc, #588]	; (25ba8 <hci_internal_cmd_put+0x620>)
   2595c:	f7f3 fcd4 	bl	19308 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   25960:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   25962:	e723      	b.n	257ac <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   25964:	f7f3 fcea 	bl	1933c <sdc_hci_cmd_le_set_adv_data>
   25968:	e665      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   2596a:	f7f3 fcfe 	bl	1936a <sdc_hci_cmd_le_set_scan_response_data>
   2596e:	e662      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   25970:	f7f3 fce6 	bl	19340 <sdc_hci_cmd_le_set_adv_enable>
   25974:	e65f      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   25976:	488c      	ldr	r0, [pc, #560]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25978:	f7f3 fcd8 	bl	1932c <sdc_hci_cmd_le_read_white_list_size>
   2597c:	e7f0      	b.n	25960 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   2597e:	f7f3 fcb5 	bl	192ec <sdc_hci_cmd_le_clear_white_list>
   25982:	e658      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   25984:	f7f3 fcae 	bl	192e4 <sdc_hci_cmd_le_add_device_to_white_list>
   25988:	e655      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   2598a:	f7f3 fcd3 	bl	19334 <sdc_hci_cmd_le_remove_device_from_white_list>
   2598e:	e652      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   25990:	4985      	ldr	r1, [pc, #532]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25992:	f7f3 fcbd 	bl	19310 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   25996:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   25998:	e708      	b.n	257ac <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2599a:	f7f3 fcbf 	bl	1931c <sdc_hci_cmd_le_read_remote_features>
   2599e:	e625      	b.n	255ec <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   259a0:	4981      	ldr	r1, [pc, #516]	; (25ba8 <hci_internal_cmd_put+0x620>)
   259a2:	f7f3 fca5 	bl	192f0 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   259a6:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   259a8:	e700      	b.n	257ac <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   259aa:	487f      	ldr	r0, [pc, #508]	; (25ba8 <hci_internal_cmd_put+0x620>)
   259ac:	f7f3 fcaa 	bl	19304 <sdc_hci_cmd_le_rand>
   259b0:	e67d      	b.n	256ae <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   259b2:	497d      	ldr	r1, [pc, #500]	; (25ba8 <hci_internal_cmd_put+0x620>)
   259b4:	f7f3 fca2 	bl	192fc <sdc_hci_cmd_le_long_term_key_request_reply>
   259b8:	e64a      	b.n	25650 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   259ba:	497b      	ldr	r1, [pc, #492]	; (25ba8 <hci_internal_cmd_put+0x620>)
   259bc:	f7f3 fc9a 	bl	192f4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   259c0:	e646      	b.n	25650 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   259c2:	238f      	movs	r3, #143	; 0x8f
   259c4:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   259c6:	23c0      	movs	r3, #192	; 0xc0
   259c8:	e6ea      	b.n	257a0 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   259ca:	4977      	ldr	r1, [pc, #476]	; (25ba8 <hci_internal_cmd_put+0x620>)
   259cc:	f7f3 fcbc 	bl	19348 <sdc_hci_cmd_le_set_data_length>
   259d0:	e63e      	b.n	25650 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   259d2:	4875      	ldr	r0, [pc, #468]	; (25ba8 <hci_internal_cmd_put+0x620>)
   259d4:	f7f3 fca6 	bl	19324 <sdc_hci_cmd_le_read_suggested_default_data_length>
   259d8:	e64a      	b.n	25670 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   259da:	f7f3 fcc8 	bl	1936e <sdc_hci_cmd_le_write_suggested_default_data_length>
   259de:	e62a      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   259e0:	f7f3 fc7e 	bl	192e0 <sdc_hci_cmd_le_add_device_to_resolving_list>
   259e4:	e627      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   259e6:	f7f3 fca3 	bl	19330 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   259ea:	e624      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   259ec:	f7f3 fc7c 	bl	192e8 <sdc_hci_cmd_le_clear_resolving_list>
   259f0:	e621      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   259f2:	486d      	ldr	r0, [pc, #436]	; (25ba8 <hci_internal_cmd_put+0x620>)
   259f4:	f7f3 fc94 	bl	19320 <sdc_hci_cmd_le_read_resolving_list_size>
   259f8:	e7b2      	b.n	25960 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   259fa:	f7f3 fc9d 	bl	19338 <sdc_hci_cmd_le_set_address_resolution_enable>
   259fe:	e61a      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   25a00:	f7f3 fcb1 	bl	19366 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   25a04:	e617      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   25a06:	4868      	ldr	r0, [pc, #416]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25a08:	f7f3 fc84 	bl	19314 <sdc_hci_cmd_le_read_max_data_length>
   25a0c:	e64f      	b.n	256ae <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   25a0e:	4966      	ldr	r1, [pc, #408]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25a10:	f7f3 fc82 	bl	19318 <sdc_hci_cmd_le_read_phy>
   25a14:	e62c      	b.n	25670 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   25a16:	f7f3 fc99 	bl	1934c <sdc_hci_cmd_le_set_default_phy>
   25a1a:	e60c      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   25a1c:	f7f3 fc9d 	bl	1935a <sdc_hci_cmd_le_set_phy>
   25a20:	e5e4      	b.n	255ec <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   25a22:	4861      	ldr	r0, [pc, #388]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25a24:	f7f3 fc80 	bl	19328 <sdc_hci_cmd_le_read_transmit_power>
   25a28:	e612      	b.n	25650 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   25a2a:	f7f3 fc98 	bl	1935e <sdc_hci_cmd_le_set_privacy_mode>
   25a2e:	e602      	b.n	25636 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   25a30:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   25a34:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   25a36:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   25a3a:	d821      	bhi.n	25a80 <hci_internal_cmd_put+0x4f8>
   25a3c:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   25a40:	f43f add0 	beq.w	255e4 <hci_internal_cmd_put+0x5c>
   25a44:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   25a48:	3b01      	subs	r3, #1
   25a4a:	2b09      	cmp	r3, #9
   25a4c:	f63f adca 	bhi.w	255e4 <hci_internal_cmd_put+0x5c>
   25a50:	a201      	add	r2, pc, #4	; (adr r2, 25a58 <hci_internal_cmd_put+0x4d0>)
   25a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25a56:	bf00      	nop
   25a58:	00025aa1 	.word	0x00025aa1
   25a5c:	00025acf 	.word	0x00025acf
   25a60:	000255e5 	.word	0x000255e5
   25a64:	000255e5 	.word	0x000255e5
   25a68:	000255e5 	.word	0x000255e5
   25a6c:	00025b13 	.word	0x00025b13
   25a70:	000255e5 	.word	0x000255e5
   25a74:	000255e5 	.word	0x000255e5
   25a78:	00025aff 	.word	0x00025aff
   25a7c:	00025b09 	.word	0x00025b09
   25a80:	f505 7340 	add.w	r3, r5, #768	; 0x300
   25a84:	b29b      	uxth	r3, r3
   25a86:	2b05      	cmp	r3, #5
   25a88:	f63f adac 	bhi.w	255e4 <hci_internal_cmd_put+0x5c>
   25a8c:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   25a90:	2b05      	cmp	r3, #5
   25a92:	f63f ada7 	bhi.w	255e4 <hci_internal_cmd_put+0x5c>
   25a96:	e8df f003 	tbb	[pc, r3]
   25a9a:	4c40      	.short	0x4c40
   25a9c:	5855524f 	.word	0x5855524f
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   25aa0:	4841      	ldr	r0, [pc, #260]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25aa2:	f7eb f8cf 	bl	10c44 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   25aa6:	2310      	movs	r3, #16
	switch (hci_opcode) {
   25aa8:	f242 0219 	movw	r2, #8217	; 0x2019
   25aac:	4296      	cmp	r6, r2
   25aae:	dc5c      	bgt.n	25b6a <hci_internal_cmd_put+0x5e2>
   25ab0:	f242 020c 	movw	r2, #8204	; 0x200c
   25ab4:	4296      	cmp	r6, r2
   25ab6:	dc4b      	bgt.n	25b50 <hci_internal_cmd_put+0x5c8>
   25ab8:	f240 4206 	movw	r2, #1030	; 0x406
   25abc:	4296      	cmp	r6, r2
   25abe:	f43f ad95 	beq.w	255ec <hci_internal_cmd_put+0x64>
   25ac2:	f240 421d 	movw	r2, #1053	; 0x41d
   25ac6:	4296      	cmp	r6, r2
   25ac8:	f43f ad90 	beq.w	255ec <hci_internal_cmd_put+0x64>
   25acc:	e66e      	b.n	257ac <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   25ace:	4836      	ldr	r0, [pc, #216]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25ad0:	2202      	movs	r2, #2
   25ad2:	2100      	movs	r1, #0
   25ad4:	f007 f8fc 	bl	2ccd0 <memset>
	cmds->read_version_info = 1;
   25ad8:	79e3      	ldrb	r3, [r4, #7]
   25ada:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   25ade:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   25ae2:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   25ae4:	7a23      	ldrb	r3, [r4, #8]
   25ae6:	f023 0307 	bic.w	r3, r3, #7
   25aea:	f043 0307 	orr.w	r3, r3, #7
   25aee:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   25af0:	f242 0319 	movw	r3, #8217	; 0x2019
   25af4:	429e      	cmp	r6, r3
   25af6:	dd47      	ble.n	25b88 <hci_internal_cmd_put+0x600>
   25af8:	f242 0332 	movw	r3, #8242	; 0x2032
   25afc:	e04f      	b.n	25b9e <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   25afe:	482a      	ldr	r0, [pc, #168]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25b00:	f7f3 fb99 	bl	19236 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   25b04:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   25b06:	e7cf      	b.n	25aa8 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   25b08:	4827      	ldr	r0, [pc, #156]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25b0a:	f7f3 fb47 	bl	1919c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   25b0e:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   25b10:	e7ca      	b.n	25aa8 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   25b12:	f7f3 fbdf 	bl	192d4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   25b16:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   25b18:	e7c6      	b.n	25aa8 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   25b1a:	4823      	ldr	r0, [pc, #140]	; (25ba8 <hci_internal_cmd_put+0x620>)
   25b1c:	2201      	movs	r2, #1
   25b1e:	2100      	movs	r1, #0
   25b20:	f007 f8d6 	bl	2ccd0 <memset>
	cmds->read_supported_vs_commands = 1;
   25b24:	79e3      	ldrb	r3, [r4, #7]
   25b26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   25b2a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   25b2e:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   25b30:	e62a      	b.n	25788 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   25b32:	f7f3 fb2c 	bl	1918e <sdc_hci_cmd_vs_llpm_mode_set>
   25b36:	e57e      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   25b38:	f7f3 fb25 	bl	19186 <sdc_hci_cmd_vs_conn_update>
   25b3c:	e57b      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   25b3e:	f7f3 fb1a 	bl	19176 <sdc_hci_cmd_vs_conn_event_extend>
   25b42:	e578      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   25b44:	f7f3 fb25 	bl	19192 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   25b48:	e575      	b.n	25636 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   25b4a:	f7f3 fb1e 	bl	1918a <sdc_hci_cmd_vs_event_length_set>
   25b4e:	e572      	b.n	25636 <hci_internal_cmd_put+0xae>
   25b50:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   25b54:	3a0d      	subs	r2, #13
   25b56:	2101      	movs	r1, #1
   25b58:	b292      	uxth	r2, r2
   25b5a:	fa01 f202 	lsl.w	r2, r1, r2
   25b5e:	f241 2141 	movw	r1, #4673	; 0x1241
   25b62:	420a      	tst	r2, r1
   25b64:	f43f ae22 	beq.w	257ac <hci_internal_cmd_put+0x224>
   25b68:	e540      	b.n	255ec <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   25b6a:	f242 0232 	movw	r2, #8242	; 0x2032
   25b6e:	4296      	cmp	r6, r2
   25b70:	f43f ad3c 	beq.w	255ec <hci_internal_cmd_put+0x64>
   25b74:	f5a5 5201 	sub.w	r2, r5, #8256	; 0x2040
   25b78:	3a03      	subs	r2, #3
   25b7a:	2a01      	cmp	r2, #1
   25b7c:	f67f ad36 	bls.w	255ec <hci_internal_cmd_put+0x64>
   25b80:	e614      	b.n	257ac <hci_internal_cmd_put+0x224>
		return -NRF_EPERM;
   25b82:	f04f 30ff 	mov.w	r0, #4294967295
   25b86:	e53d      	b.n	25604 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   25b88:	f242 030c 	movw	r3, #8204	; 0x200c
   25b8c:	429e      	cmp	r6, r3
   25b8e:	f73f adfb 	bgt.w	25788 <hci_internal_cmd_put+0x200>
   25b92:	f240 4306 	movw	r3, #1030	; 0x406
   25b96:	429e      	cmp	r6, r3
   25b98:	d004      	beq.n	25ba4 <hci_internal_cmd_put+0x61c>
   25b9a:	f240 431d 	movw	r3, #1053	; 0x41d
   25b9e:	429e      	cmp	r6, r3
   25ba0:	f47f adf2 	bne.w	25788 <hci_internal_cmd_put+0x200>
   25ba4:	2000      	movs	r0, #0
   25ba6:	e521      	b.n	255ec <hci_internal_cmd_put+0x64>
   25ba8:	20003d7e 	.word	0x20003d7e

00025bac <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   25bac:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   25bae:	4c07      	ldr	r4, [pc, #28]	; (25bcc <hci_internal_evt_get+0x20>)
   25bb0:	7823      	ldrb	r3, [r4, #0]
   25bb2:	b13b      	cbz	r3, 25bc4 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   25bb4:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   25bb6:	1c61      	adds	r1, r4, #1
   25bb8:	3202      	adds	r2, #2
   25bba:	f007 f87e 	bl	2ccba <memcpy>
		cmd_complete_or_status.occurred = false;
   25bbe:	2000      	movs	r0, #0
   25bc0:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   25bc2:	bd10      	pop	{r4, pc}
   25bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   25bc8:	f7f3 bab8 	b.w	1913c <sdc_hci_evt_get>
   25bcc:	20003d77 	.word	0x20003d77

00025bd0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   25bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   25bd4:	4c0b      	ldr	r4, [pc, #44]	; (25c04 <bt_rand+0x34>)
   25bd6:	6823      	ldr	r3, [r4, #0]
{
   25bd8:	4605      	mov	r5, r0
   25bda:	460e      	mov	r6, r1
   25bdc:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   25bde:	b13b      	cbz	r3, 25bf0 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   25be0:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   25be2:	6883      	ldr	r3, [r0, #8]
   25be4:	b2b2      	uxth	r2, r6
   25be6:	4629      	mov	r1, r5
   25be8:	681b      	ldr	r3, [r3, #0]
}
   25bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25bee:	4718      	bx	r3
   25bf0:	4805      	ldr	r0, [pc, #20]	; (25c08 <bt_rand+0x38>)
   25bf2:	f001 fe27 	bl	27844 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   25bf6:	6020      	str	r0, [r4, #0]
		if (!dev) {
   25bf8:	2800      	cmp	r0, #0
   25bfa:	d1f1      	bne.n	25be0 <bt_rand+0x10>
}
   25bfc:	f06f 0012 	mvn.w	r0, #18
   25c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25c04:	20002b24 	.word	0x20002b24
   25c08:	000332fc 	.word	0x000332fc

00025c0c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   25c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   25c0e:	2332      	movs	r3, #50	; 0x32
   25c10:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   25c14:	4a13      	ldr	r2, [pc, #76]	; (25c64 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   25c16:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   25c18:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   25c1a:	2119      	movs	r1, #25
   25c1c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   25c1e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   25c22:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   25c26:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   25c2a:	f7ea fbc5 	bl	103b8 <mpsl_init>
	if (err) {
   25c2e:	4604      	mov	r4, r0
   25c30:	b9a0      	cbnz	r0, 25c5c <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   25c32:	480d      	ldr	r0, [pc, #52]	; (25c68 <mpsl_lib_init+0x5c>)
   25c34:	4629      	mov	r1, r5
   25c36:	f7f2 fd16 	bl	18666 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   25c3a:	4604      	mov	r4, r0
   25c3c:	b970      	cbnz	r0, 25c5c <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   25c3e:	4601      	mov	r1, r0
   25c40:	462a      	mov	r2, r5
   25c42:	2008      	movs	r0, #8
   25c44:	f7f8 fd94 	bl	1e770 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   25c48:	462a      	mov	r2, r5
   25c4a:	4621      	mov	r1, r4
   25c4c:	200b      	movs	r0, #11
   25c4e:	f7f8 fd8f 	bl	1e770 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   25c52:	462a      	mov	r2, r5
   25c54:	4621      	mov	r1, r4
   25c56:	4628      	mov	r0, r5
   25c58:	f7f8 fd8a 	bl	1e770 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   25c5c:	4620      	mov	r0, r4
   25c5e:	b003      	add	sp, #12
   25c60:	bd30      	pop	{r4, r5, pc}
   25c62:	bf00      	nop
   25c64:	00030861 	.word	0x00030861
   25c68:	20002b28 	.word	0x20002b28

00025c6c <mpsl_low_prio_irq_handler>:
   25c6c:	4801      	ldr	r0, [pc, #4]	; (25c74 <mpsl_low_prio_irq_handler+0x8>)
   25c6e:	f002 b907 	b.w	27e80 <z_impl_k_sem_give>
   25c72:	bf00      	nop
   25c74:	20000c9c 	.word	0x20000c9c

00025c78 <signal_thread>:
{
   25c78:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   25c7a:	4c09      	ldr	r4, [pc, #36]	; (25ca0 <signal_thread+0x28>)
   25c7c:	f04f 32ff 	mov.w	r2, #4294967295
   25c80:	f04f 33ff 	mov.w	r3, #4294967295
   25c84:	4620      	mov	r0, r4
   25c86:	f002 f921 	bl	27ecc <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   25c8a:	f04f 31ff 	mov.w	r1, #4294967295
   25c8e:	f04f 30ff 	mov.w	r0, #4294967295
   25c92:	f7ff fadd 	bl	25250 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   25c96:	f7f2 fdfd 	bl	18894 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   25c9a:	f7ff fae1 	bl	25260 <multithreading_lock_release>
	while (true) {
   25c9e:	e7ed      	b.n	25c7c <signal_thread+0x4>
   25ca0:	20000c9c 	.word	0x20000c9c

00025ca4 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   25ca4:	b530      	push	{r4, r5, lr}
   25ca6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25ca8:	4d0f      	ldr	r5, [pc, #60]	; (25ce8 <mpsl_signal_thread_init+0x44>)
   25caa:	4910      	ldr	r1, [pc, #64]	; (25cec <mpsl_signal_thread_init+0x48>)
   25cac:	2200      	movs	r2, #0
   25cae:	2300      	movs	r3, #0
   25cb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   25cb4:	2400      	movs	r4, #0
   25cb6:	f06f 0309 	mvn.w	r3, #9
   25cba:	e9cd 3403 	strd	r3, r4, [sp, #12]
   25cbe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   25cc2:	4b0b      	ldr	r3, [pc, #44]	; (25cf0 <mpsl_signal_thread_init+0x4c>)
   25cc4:	9400      	str	r4, [sp, #0]
   25cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25cca:	4628      	mov	r0, r5
   25ccc:	f001 ff40 	bl	27b50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   25cd0:	4908      	ldr	r1, [pc, #32]	; (25cf4 <mpsl_signal_thread_init+0x50>)
   25cd2:	4628      	mov	r0, r5
   25cd4:	f00b fcdd 	bl	31692 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   25cd8:	4622      	mov	r2, r4
   25cda:	2104      	movs	r1, #4
   25cdc:	2019      	movs	r0, #25
   25cde:	f7f8 fd47 	bl	1e770 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   25ce2:	4620      	mov	r0, r4
   25ce4:	b009      	add	sp, #36	; 0x24
   25ce6:	bd30      	pop	{r4, r5, pc}
   25ce8:	20002038 	.word	0x20002038
   25cec:	20005740 	.word	0x20005740
   25cf0:	00025c79 	.word	0x00025c79
   25cf4:	00033328 	.word	0x00033328

00025cf8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   25cf8:	4b01      	ldr	r3, [pc, #4]	; (25d00 <mpsl_hfclk_callback+0x8>)
   25cfa:	2000      	movs	r0, #0
   25cfc:	681b      	ldr	r3, [r3, #0]
   25cfe:	4718      	bx	r3
   25d00:	20002b4c 	.word	0x20002b4c

00025d04 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   25d04:	b120      	cbz	r0, 25d10 <nrfx_clock_start+0xc>
   25d06:	2801      	cmp	r0, #1
   25d08:	d106      	bne.n	25d18 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   25d0a:	4804      	ldr	r0, [pc, #16]	; (25d1c <nrfx_clock_start+0x18>)
   25d0c:	f7ea b9a0 	b.w	10050 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   25d10:	4b03      	ldr	r3, [pc, #12]	; (25d20 <nrfx_clock_start+0x1c>)
   25d12:	2001      	movs	r0, #1
   25d14:	681b      	ldr	r3, [r3, #0]
   25d16:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   25d18:	4770      	bx	lr
   25d1a:	bf00      	nop
   25d1c:	00025cf9 	.word	0x00025cf9
   25d20:	20002b4c 	.word	0x20002b4c

00025d24 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   25d24:	4b01      	ldr	r3, [pc, #4]	; (25d2c <nrfx_clock_init+0x8>)
   25d26:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   25d28:	4801      	ldr	r0, [pc, #4]	; (25d30 <nrfx_clock_init+0xc>)
   25d2a:	4770      	bx	lr
   25d2c:	20002b4c 	.word	0x20002b4c
   25d30:	0bad0000 	.word	0x0bad0000

00025d34 <timeslot_callback>:
{
   25d34:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25d36:	4d1a      	ldr	r5, [pc, #104]	; (25da0 <timeslot_callback+0x6c>)
   25d38:	f3bf 8f5b 	dmb	ish
   25d3c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   25d3e:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   25d42:	bb5c      	cbnz	r4, 25d9c <timeslot_callback+0x68>
	switch (signal) {
   25d44:	2906      	cmp	r1, #6
   25d46:	d804      	bhi.n	25d52 <timeslot_callback+0x1e>
   25d48:	2904      	cmp	r1, #4
   25d4a:	d81f      	bhi.n	25d8c <timeslot_callback+0x58>
   25d4c:	b139      	cbz	r1, 25d5e <timeslot_callback+0x2a>
}
   25d4e:	4620      	mov	r0, r4
   25d50:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   25d52:	2907      	cmp	r1, #7
   25d54:	d1fb      	bne.n	25d4e <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   25d56:	4628      	mov	r0, r5
   25d58:	f002 f892 	bl	27e80 <z_impl_k_sem_give>
}
   25d5c:	e7f7      	b.n	25d4e <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   25d5e:	6a2b      	ldr	r3, [r5, #32]
   25d60:	e9d3 2000 	ldrd	r2, r0, [r3]
   25d64:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   25d66:	2801      	cmp	r0, #1
   25d68:	d005      	beq.n	25d76 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   25d6a:	462c      	mov	r4, r5
   25d6c:	2302      	movs	r3, #2
   25d6e:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   25d72:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   25d74:	e7eb      	b.n	25d4e <timeslot_callback+0x1a>
			_context.return_param.callback_action =
   25d76:	2303      	movs	r3, #3
   25d78:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   25d7c:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   25d80:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   25d84:	63ab      	str	r3, [r5, #56]	; 0x38
   25d86:	f105 0434 	add.w	r4, r5, #52	; 0x34
   25d8a:	e7e0      	b.n	25d4e <timeslot_callback+0x1a>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   25d8c:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   25d8e:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   25d92:	f105 0124 	add.w	r1, r5, #36	; 0x24
   25d96:	f7f2 fc0f 	bl	185b8 <mpsl_timeslot_request>
}
   25d9a:	e7d8      	b.n	25d4e <timeslot_callback+0x1a>
		return NULL;
   25d9c:	2400      	movs	r4, #0
   25d9e:	e7d6      	b.n	25d4e <timeslot_callback+0x1a>
   25da0:	20002b50 	.word	0x20002b50

00025da4 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   25da4:	4802      	ldr	r0, [pc, #8]	; (25db0 <nrf_flash_sync_init+0xc>)
   25da6:	2201      	movs	r2, #1
   25da8:	2100      	movs	r1, #0
   25daa:	f00b bd52 	b.w	31852 <z_impl_k_sem_init>
   25dae:	bf00      	nop
   25db0:	20002b50 	.word	0x20002b50

00025db4 <nrf_flash_sync_set_context>:
	_context.request_length_us = duration;
   25db4:	4b01      	ldr	r3, [pc, #4]	; (25dbc <nrf_flash_sync_set_context+0x8>)
   25db6:	61d8      	str	r0, [r3, #28]
}
   25db8:	4770      	bx	lr
   25dba:	bf00      	nop
   25dbc:	20002b50 	.word	0x20002b50

00025dc0 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25dc0:	4b07      	ldr	r3, [pc, #28]	; (25de0 <nrf_flash_sync_check_time_limit+0x20>)
   25dc2:	2201      	movs	r2, #1
   25dc4:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   25dc6:	3b40      	subs	r3, #64	; 0x40
   25dc8:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   25dcc:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   25dd0:	4418      	add	r0, r3
   25dd2:	4b04      	ldr	r3, [pc, #16]	; (25de4 <nrf_flash_sync_check_time_limit+0x24>)
   25dd4:	69db      	ldr	r3, [r3, #28]
}
   25dd6:	4298      	cmp	r0, r3
   25dd8:	bf34      	ite	cc
   25dda:	2000      	movcc	r0, #0
   25ddc:	2001      	movcs	r0, #1
   25dde:	4770      	bx	lr
   25de0:	40008040 	.word	0x40008040
   25de4:	20002b50 	.word	0x20002b50

00025de8 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   25de8:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   25dea:	4a05      	ldr	r2, [pc, #20]	; (25e00 <boot_write_magic+0x18>)
{
   25dec:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   25dee:	3910      	subs	r1, #16
   25df0:	2310      	movs	r3, #16
   25df2:	f006 fb9e 	bl	2c532 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   25df6:	3800      	subs	r0, #0
   25df8:	bf18      	it	ne
   25dfa:	2001      	movne	r0, #1
   25dfc:	bd08      	pop	{r3, pc}
   25dfe:	bf00      	nop
   25e00:	00032d54 	.word	0x00032d54

00025e04 <boot_read_swap_state>:
{
   25e04:	b530      	push	{r4, r5, lr}
   25e06:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   25e08:	6881      	ldr	r1, [r0, #8]
{
   25e0a:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   25e0c:	2310      	movs	r3, #16
   25e0e:	aa02      	add	r2, sp, #8
   25e10:	3910      	subs	r1, #16
{
   25e12:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   25e14:	f006 fb71 	bl	2c4fa <flash_area_read>
    if (rc < 0) {
   25e18:	2800      	cmp	r0, #0
   25e1a:	db11      	blt.n	25e40 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
   25e1c:	2210      	movs	r2, #16
   25e1e:	a902      	add	r1, sp, #8
   25e20:	4628      	mov	r0, r5
   25e22:	f00a fd65 	bl	308f0 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   25e26:	b168      	cbz	r0, 25e44 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
   25e28:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   25e2a:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   25e2c:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   25e2e:	2301      	movs	r3, #1
   25e30:	f10d 0207 	add.w	r2, sp, #7
   25e34:	3928      	subs	r1, #40	; 0x28
   25e36:	4628      	mov	r0, r5
   25e38:	f006 fb5f 	bl	2c4fa <flash_area_read>
    if (rc < 0) {
   25e3c:	2800      	cmp	r0, #0
   25e3e:	da0b      	bge.n	25e58 <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
   25e40:	2001      	movs	r0, #1
   25e42:	e02a      	b.n	25e9a <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   25e44:	4916      	ldr	r1, [pc, #88]	; (25ea0 <boot_read_swap_state+0x9c>)
   25e46:	2210      	movs	r2, #16
   25e48:	a802      	add	r0, sp, #8
   25e4a:	f006 ff0f 	bl	2cc6c <memcmp>
   25e4e:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
   25e50:	bf14      	ite	ne
   25e52:	2302      	movne	r3, #2
   25e54:	2301      	moveq	r3, #1
   25e56:	e7e8      	b.n	25e2a <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   25e58:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25e5c:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   25e60:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   25e62:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   25e64:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   25e66:	2201      	movs	r2, #1
   25e68:	f10d 0107 	add.w	r1, sp, #7
   25e6c:	4628      	mov	r0, r5
   25e6e:	f00a fd3f 	bl	308f0 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   25e72:	b910      	cbnz	r0, 25e7a <boot_read_swap_state+0x76>
   25e74:	7863      	ldrb	r3, [r4, #1]
   25e76:	2b04      	cmp	r3, #4
   25e78:	d903      	bls.n	25e82 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   25e7a:	2301      	movs	r3, #1
   25e7c:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   25e7e:	2300      	movs	r3, #0
   25e80:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
   25e82:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   25e84:	1ca1      	adds	r1, r4, #2
   25e86:	3a20      	subs	r2, #32
   25e88:	4628      	mov	r0, r5
   25e8a:	f00a fd56 	bl	3093a <boot_read_flag>
    if (rc) {
   25e8e:	2800      	cmp	r0, #0
   25e90:	d1d6      	bne.n	25e40 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
   25e92:	1ce1      	adds	r1, r4, #3
   25e94:	4628      	mov	r0, r5
   25e96:	f00a fdab 	bl	309f0 <boot_read_image_ok>
}
   25e9a:	b007      	add	sp, #28
   25e9c:	bd30      	pop	{r4, r5, pc}
   25e9e:	bf00      	nop
   25ea0:	00032d54 	.word	0x00032d54

00025ea4 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
   25ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25ea8:	b085      	sub	sp, #20

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   25eaa:	4669      	mov	r1, sp
   25eac:	2002      	movs	r0, #2
   25eae:	f00a fda3 	bl	309f8 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
   25eb2:	2800      	cmp	r0, #0
   25eb4:	d136      	bne.n	25f24 <boot_swap_type_multi+0x80>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   25eb6:	a902      	add	r1, sp, #8
   25eb8:	2005      	movs	r0, #5
   25eba:	f00a fd9d 	bl	309f8 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
   25ebe:	2801      	cmp	r0, #1
   25ec0:	d12e      	bne.n	25f20 <boot_swap_type_multi+0x7c>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
   25ec2:	2303      	movs	r3, #3
   25ec4:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
   25ec8:	f88d 300b 	strb.w	r3, [sp, #11]
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
   25ecc:	f89d 5000 	ldrb.w	r5, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
   25ed0:	f89d 6008 	ldrb.w	r6, [sp, #8]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   25ed4:	f89d 7003 	ldrb.w	r7, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   25ed8:	f89d 800b 	ldrb.w	r8, [sp, #11]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   25edc:	f89d 9002 	ldrb.w	r9, [sp, #2]
   25ee0:	4a16      	ldr	r2, [pc, #88]	; (25f3c <boot_swap_type_multi+0x98>)
   25ee2:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
   25ee4:	7810      	ldrb	r0, [r2, #0]
   25ee6:	4629      	mov	r1, r5
   25ee8:	f00a fd13 	bl	30912 <boot_magic_compatible_check>
   25eec:	b1f0      	cbz	r0, 25f2c <boot_swap_type_multi+0x88>
            boot_magic_compatible_check(table->magic_secondary_slot,
   25eee:	7850      	ldrb	r0, [r2, #1]
   25ef0:	4631      	mov	r1, r6
   25ef2:	f00a fd0e 	bl	30912 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   25ef6:	b1c8      	cbz	r0, 25f2c <boot_swap_type_multi+0x88>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   25ef8:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
   25efa:	2b04      	cmp	r3, #4
   25efc:	d001      	beq.n	25f02 <boot_swap_type_multi+0x5e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   25efe:	42bb      	cmp	r3, r7
   25f00:	d114      	bne.n	25f2c <boot_swap_type_multi+0x88>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   25f02:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   25f04:	2b04      	cmp	r3, #4
   25f06:	d001      	beq.n	25f0c <boot_swap_type_multi+0x68>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   25f08:	4543      	cmp	r3, r8
   25f0a:	d10f      	bne.n	25f2c <boot_swap_type_multi+0x88>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   25f0c:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   25f0e:	2b04      	cmp	r3, #4
   25f10:	d10a      	bne.n	25f28 <boot_swap_type_multi+0x84>
            BOOT_LOG_INF("Swap type: %s",
   25f12:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   25f14:	1e83      	subs	r3, r0, #2
   25f16:	2b02      	cmp	r3, #2
   25f18:	d804      	bhi.n	25f24 <boot_swap_type_multi+0x80>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
   25f1a:	b005      	add	sp, #20
   25f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (rc) {
   25f20:	2800      	cmp	r0, #0
   25f22:	d0d3      	beq.n	25ecc <boot_swap_type_multi+0x28>
        return BOOT_SWAP_TYPE_PANIC;
   25f24:	20ff      	movs	r0, #255	; 0xff
   25f26:	e7f8      	b.n	25f1a <boot_swap_type_multi+0x76>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   25f28:	454b      	cmp	r3, r9
   25f2a:	d0f2      	beq.n	25f12 <boot_swap_type_multi+0x6e>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   25f2c:	3401      	adds	r4, #1
   25f2e:	2c03      	cmp	r4, #3
   25f30:	f102 0206 	add.w	r2, r2, #6
   25f34:	d1d6      	bne.n	25ee4 <boot_swap_type_multi+0x40>
    return BOOT_SWAP_TYPE_NONE;
   25f36:	2001      	movs	r0, #1
   25f38:	e7ef      	b.n	25f1a <boot_swap_type_multi+0x76>
   25f3a:	bf00      	nop
   25f3c:	00033334 	.word	0x00033334

00025f40 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   25f40:	4b03      	ldr	r3, [pc, #12]	; (25f50 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
   25f42:	6818      	ldr	r0, [r3, #0]
}
   25f44:	f1a0 0308 	sub.w	r3, r0, #8
   25f48:	4258      	negs	r0, r3
   25f4a:	4158      	adcs	r0, r3
   25f4c:	4770      	bx	lr
   25f4e:	bf00      	nop
   25f50:	10000130 	.word	0x10000130

00025f54 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   25f54:	4b06      	ldr	r3, [pc, #24]	; (25f70 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
   25f56:	681b      	ldr	r3, [r3, #0]
   25f58:	2b08      	cmp	r3, #8
   25f5a:	d106      	bne.n	25f6a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   25f5c:	4b05      	ldr	r3, [pc, #20]	; (25f74 <nrf52_errata_103+0x20>)
   25f5e:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   25f60:	2b05      	cmp	r3, #5
   25f62:	d802      	bhi.n	25f6a <nrf52_errata_103+0x16>
   25f64:	4a04      	ldr	r2, [pc, #16]	; (25f78 <nrf52_errata_103+0x24>)
   25f66:	5cd0      	ldrb	r0, [r2, r3]
   25f68:	4770      	bx	lr
        return false;
   25f6a:	2000      	movs	r0, #0
}
   25f6c:	4770      	bx	lr
   25f6e:	bf00      	nop
   25f70:	10000130 	.word	0x10000130
   25f74:	10000134 	.word	0x10000134
   25f78:	0003334c 	.word	0x0003334c

00025f7c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   25f7c:	4a02      	ldr	r2, [pc, #8]	; (25f88 <nvmc_wait+0xc>)
   25f7e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   25f82:	2b00      	cmp	r3, #0
   25f84:	d0fb      	beq.n	25f7e <nvmc_wait+0x2>
}
   25f86:	4770      	bx	lr
   25f88:	4001e000 	.word	0x4001e000

00025f8c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   25f8c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   25f8e:	f7ff ffd7 	bl	25f40 <nrf52_errata_136>
   25f92:	b140      	cbz	r0, 25fa6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   25f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   25f98:	2200      	movs	r2, #0
   25f9a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   25f9e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   25fa2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   25fa6:	f7ff ffcb 	bl	25f40 <nrf52_errata_136>
   25faa:	2800      	cmp	r0, #0
   25fac:	d046      	beq.n	2603c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   25fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25fb2:	4b5b      	ldr	r3, [pc, #364]	; (26120 <SystemInit+0x194>)
   25fb4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   25fb8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   25fbc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   25fc0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   25fc4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   25fc8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   25fcc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   25fd0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   25fd4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   25fd8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   25fdc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   25fe0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   25fe4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   25fe8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   25fec:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   25ff0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   25ff4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   25ff8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   25ffc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   26000:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   26004:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   26008:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2600c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   26010:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   26014:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   26018:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2601c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   26020:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   26024:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   26028:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2602c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   26030:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   26034:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   26038:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2603c:	f7ff ff8a 	bl	25f54 <nrf52_errata_103>
   26040:	b110      	cbz	r0, 26048 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   26042:	4b38      	ldr	r3, [pc, #224]	; (26124 <SystemInit+0x198>)
   26044:	4a38      	ldr	r2, [pc, #224]	; (26128 <SystemInit+0x19c>)
   26046:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   26048:	f7ff ff84 	bl	25f54 <nrf52_errata_103>
   2604c:	b118      	cbz	r0, 26056 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2604e:	4b37      	ldr	r3, [pc, #220]	; (2612c <SystemInit+0x1a0>)
   26050:	22fb      	movs	r2, #251	; 0xfb
   26052:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   26056:	f7ff ff7d 	bl	25f54 <nrf52_errata_103>
   2605a:	b148      	cbz	r0, 26070 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2605c:	4934      	ldr	r1, [pc, #208]	; (26130 <SystemInit+0x1a4>)
   2605e:	4b35      	ldr	r3, [pc, #212]	; (26134 <SystemInit+0x1a8>)
   26060:	680a      	ldr	r2, [r1, #0]
   26062:	681b      	ldr	r3, [r3, #0]
   26064:	f022 020f 	bic.w	r2, r2, #15
   26068:	f003 030f 	and.w	r3, r3, #15
   2606c:	4313      	orrs	r3, r2
   2606e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   26070:	f7ff ff70 	bl	25f54 <nrf52_errata_103>
   26074:	b118      	cbz	r0, 2607e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   26076:	4b30      	ldr	r3, [pc, #192]	; (26138 <SystemInit+0x1ac>)
   26078:	f44f 7200 	mov.w	r2, #512	; 0x200
   2607c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   2607e:	f7ff ff5f 	bl	25f40 <nrf52_errata_136>
   26082:	b148      	cbz	r0, 26098 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   26084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26088:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2608c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2608e:	bf44      	itt	mi
   26090:	f06f 0201 	mvnmi.w	r2, #1
   26094:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   26098:	4b28      	ldr	r3, [pc, #160]	; (2613c <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2609a:	681b      	ldr	r3, [r3, #0]
   2609c:	2b08      	cmp	r3, #8
   2609e:	d10e      	bne.n	260be <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   260a0:	4b27      	ldr	r3, [pc, #156]	; (26140 <SystemInit+0x1b4>)
   260a2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   260a4:	2b05      	cmp	r3, #5
   260a6:	d802      	bhi.n	260ae <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   260a8:	4a26      	ldr	r2, [pc, #152]	; (26144 <SystemInit+0x1b8>)
   260aa:	5cd3      	ldrb	r3, [r2, r3]
   260ac:	b13b      	cbz	r3, 260be <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   260ae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   260b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   260b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   260ba:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   260be:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   260c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   260c6:	2a00      	cmp	r2, #0
   260c8:	db03      	blt.n	260d2 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   260ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   260ce:	2b00      	cmp	r3, #0
   260d0:	da22      	bge.n	26118 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   260d2:	491d      	ldr	r1, [pc, #116]	; (26148 <SystemInit+0x1bc>)
   260d4:	2301      	movs	r3, #1
   260d6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   260da:	f7ff ff4f 	bl	25f7c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   260de:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   260e2:	2412      	movs	r4, #18
   260e4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   260e8:	f7ff ff48 	bl	25f7c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   260ec:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   260f0:	f7ff ff44 	bl	25f7c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   260f4:	2300      	movs	r3, #0
   260f6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   260fa:	f7ff ff3f 	bl	25f7c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   260fe:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   26102:	4912      	ldr	r1, [pc, #72]	; (2614c <SystemInit+0x1c0>)
   26104:	4b12      	ldr	r3, [pc, #72]	; (26150 <SystemInit+0x1c4>)
   26106:	68ca      	ldr	r2, [r1, #12]
   26108:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2610c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2610e:	60cb      	str	r3, [r1, #12]
   26110:	f3bf 8f4f 	dsb	sy
    __NOP();
   26114:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   26116:	e7fd      	b.n	26114 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   26118:	4b0e      	ldr	r3, [pc, #56]	; (26154 <SystemInit+0x1c8>)
   2611a:	4a0f      	ldr	r2, [pc, #60]	; (26158 <SystemInit+0x1cc>)
   2611c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   2611e:	bd10      	pop	{r4, pc}
   26120:	4000c000 	.word	0x4000c000
   26124:	4000568c 	.word	0x4000568c
   26128:	00038148 	.word	0x00038148
   2612c:	4000f000 	.word	0x4000f000
   26130:	40000ee4 	.word	0x40000ee4
   26134:	10000258 	.word	0x10000258
   26138:	40029640 	.word	0x40029640
   2613c:	10000130 	.word	0x10000130
   26140:	10000134 	.word	0x10000134
   26144:	00033346 	.word	0x00033346
   26148:	4001e000 	.word	0x4001e000
   2614c:	e000ed00 	.word	0xe000ed00
   26150:	05fa0004 	.word	0x05fa0004
   26154:	20000848 	.word	0x20000848
   26158:	03d09000 	.word	0x03d09000

0002615c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2615c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2615e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   26160:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   26162:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   26166:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   26168:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   2616c:	d014      	beq.n	26198 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2616e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   26172:	fa05 f204 	lsl.w	r2, r5, r4
   26176:	ea23 0202 	bic.w	r2, r3, r2
   2617a:	e850 6f00 	ldrex	r6, [r0]
   2617e:	429e      	cmp	r6, r3
   26180:	d104      	bne.n	2618c <nrfx_flag32_alloc+0x30>
   26182:	e840 2c00 	strex	ip, r2, [r0]
   26186:	f1bc 0f00 	cmp.w	ip, #0
   2618a:	d1f6      	bne.n	2617a <nrfx_flag32_alloc+0x1e>
   2618c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   26190:	d1e6      	bne.n	26160 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   26192:	4802      	ldr	r0, [pc, #8]	; (2619c <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   26194:	700c      	strb	r4, [r1, #0]
}
   26196:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   26198:	4801      	ldr	r0, [pc, #4]	; (261a0 <nrfx_flag32_alloc+0x44>)
   2619a:	e7fc      	b.n	26196 <nrfx_flag32_alloc+0x3a>
   2619c:	0bad0000 	.word	0x0bad0000
   261a0:	0bad0002 	.word	0x0bad0002

000261a4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   261a4:	6803      	ldr	r3, [r0, #0]
   261a6:	40cb      	lsrs	r3, r1
   261a8:	07db      	lsls	r3, r3, #31
{
   261aa:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   261ac:	d415      	bmi.n	261da <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   261ae:	2301      	movs	r3, #1
   261b0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   261b4:	6803      	ldr	r3, [r0, #0]
   261b6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   261ba:	ea41 0203 	orr.w	r2, r1, r3
   261be:	e850 4f00 	ldrex	r4, [r0]
   261c2:	429c      	cmp	r4, r3
   261c4:	d104      	bne.n	261d0 <nrfx_flag32_free+0x2c>
   261c6:	e840 2c00 	strex	ip, r2, [r0]
   261ca:	f1bc 0f00 	cmp.w	ip, #0
   261ce:	d1f6      	bne.n	261be <nrfx_flag32_free+0x1a>
   261d0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   261d4:	d1ee      	bne.n	261b4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   261d6:	4802      	ldr	r0, [pc, #8]	; (261e0 <nrfx_flag32_free+0x3c>)
}
   261d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   261da:	4802      	ldr	r0, [pc, #8]	; (261e4 <nrfx_flag32_free+0x40>)
   261dc:	e7fc      	b.n	261d8 <nrfx_flag32_free+0x34>
   261de:	bf00      	nop
   261e0:	0bad0000 	.word	0x0bad0000
   261e4:	0bad0004 	.word	0x0bad0004

000261e8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   261e8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   261ea:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   261ee:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   261f0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   261f2:	6002      	str	r2, [r0, #0]
}
   261f4:	4802      	ldr	r0, [pc, #8]	; (26200 <nrf_gpio_pin_port_decode+0x18>)
   261f6:	bf18      	it	ne
   261f8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   261fc:	4770      	bx	lr
   261fe:	bf00      	nop
   26200:	50000300 	.word	0x50000300

00026204 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   26204:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   26206:	f100 0308 	add.w	r3, r0, #8
   2620a:	4c0c      	ldr	r4, [pc, #48]	; (2623c <call_handler+0x38>)
   2620c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   26210:	05da      	lsls	r2, r3, #23
{
   26212:	4605      	mov	r5, r0
   26214:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   26216:	d507      	bpl.n	26228 <call_handler+0x24>
   26218:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   2621c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   26220:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   26224:	6852      	ldr	r2, [r2, #4]
   26226:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   26228:	68a3      	ldr	r3, [r4, #8]
   2622a:	b12b      	cbz	r3, 26238 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2622c:	68e2      	ldr	r2, [r4, #12]
   2622e:	4631      	mov	r1, r6
   26230:	4628      	mov	r0, r5
    }
}
   26232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   26236:	4718      	bx	r3
}
   26238:	bd70      	pop	{r4, r5, r6, pc}
   2623a:	bf00      	nop
   2623c:	2000084c 	.word	0x2000084c

00026240 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   26240:	4b12      	ldr	r3, [pc, #72]	; (2628c <release_handler+0x4c>)
   26242:	3008      	adds	r0, #8
{
   26244:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   26246:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   2624a:	05d1      	lsls	r1, r2, #23
   2624c:	d51b      	bpl.n	26286 <release_handler+0x46>
   2624e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   26252:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   26256:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2625a:	f103 0410 	add.w	r4, r3, #16
   2625e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   26260:	f834 2b02 	ldrh.w	r2, [r4], #2
   26264:	f412 7f80 	tst.w	r2, #256	; 0x100
   26268:	d003      	beq.n	26272 <release_handler+0x32>
   2626a:	f3c2 2243 	ubfx	r2, r2, #9, #4
   2626e:	4291      	cmp	r1, r2
   26270:	d009      	beq.n	26286 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   26272:	3001      	adds	r0, #1
   26274:	2830      	cmp	r0, #48	; 0x30
   26276:	d1f3      	bne.n	26260 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   26278:	2200      	movs	r2, #0
   2627a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2627e:	4804      	ldr	r0, [pc, #16]	; (26290 <release_handler+0x50>)
}
   26280:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   26282:	f7ff bf8f 	b.w	261a4 <nrfx_flag32_free>
}
   26286:	bc10      	pop	{r4}
   26288:	4770      	bx	lr
   2628a:	bf00      	nop
   2628c:	2000084c 	.word	0x2000084c
   26290:	200008c0 	.word	0x200008c0

00026294 <pin_handler_trigger_uninit>:
{
   26294:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   26296:	4c0a      	ldr	r4, [pc, #40]	; (262c0 <pin_handler_trigger_uninit+0x2c>)
   26298:	f100 0508 	add.w	r5, r0, #8
   2629c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   262a0:	069a      	lsls	r2, r3, #26
   262a2:	d506      	bpl.n	262b2 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   262a4:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   262a6:	4a07      	ldr	r2, [pc, #28]	; (262c4 <pin_handler_trigger_uninit+0x30>)
   262a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   262ac:	2100      	movs	r1, #0
   262ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   262b2:	f7ff ffc5 	bl	26240 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   262b6:	2300      	movs	r3, #0
   262b8:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   262bc:	bd38      	pop	{r3, r4, r5, pc}
   262be:	bf00      	nop
   262c0:	2000084c 	.word	0x2000084c
   262c4:	40006000 	.word	0x40006000

000262c8 <nrfx_gpiote_input_configure>:
{
   262c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   262cc:	461d      	mov	r5, r3
   262ce:	4604      	mov	r4, r0
   262d0:	4617      	mov	r7, r2
    if (p_input_config)
   262d2:	460b      	mov	r3, r1
   262d4:	b309      	cbz	r1, 2631a <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   262d6:	4e4d      	ldr	r6, [pc, #308]	; (2640c <nrfx_gpiote_input_configure+0x144>)
   262d8:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
   262dc:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
   262e0:	f002 0222 	and.w	r2, r2, #34	; 0x22
   262e4:	2a22      	cmp	r2, #34	; 0x22
   262e6:	d103      	bne.n	262f0 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   262e8:	4849      	ldr	r0, [pc, #292]	; (26410 <nrfx_gpiote_input_configure+0x148>)
}
   262ea:	b004      	add	sp, #16
   262ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   262f0:	2200      	movs	r2, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   262f2:	e9cd 2200 	strd	r2, r2, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   262f6:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   262fa:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   262fe:	f10d 010e 	add.w	r1, sp, #14
   26302:	f10d 020f 	add.w	r2, sp, #15
   26306:	f00a fc00 	bl	30b0a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2630a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   2630e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   26312:	f043 0301 	orr.w	r3, r3, #1
   26316:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   2631a:	b197      	cbz	r7, 26342 <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2631c:	483b      	ldr	r0, [pc, #236]	; (2640c <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2631e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   26320:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   26322:	f104 0308 	add.w	r3, r4, #8
   26326:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
   2632a:	078f      	lsls	r7, r1, #30
   2632c:	d50c      	bpl.n	26348 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
   2632e:	2a00      	cmp	r2, #0
   26330:	d1da      	bne.n	262e8 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   26332:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
   26336:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2633a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   2633e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
   26342:	bbcd      	cbnz	r5, 263b8 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
   26344:	4833      	ldr	r0, [pc, #204]	; (26414 <nrfx_gpiote_input_configure+0x14c>)
   26346:	e7d0      	b.n	262ea <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   26348:	f021 0120 	bic.w	r1, r1, #32
   2634c:	04c9      	lsls	r1, r1, #19
   2634e:	0cc9      	lsrs	r1, r1, #19
   26350:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
   26354:	2a00      	cmp	r2, #0
   26356:	d0ec      	beq.n	26332 <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
   26358:	2e03      	cmp	r6, #3
   2635a:	d8c5      	bhi.n	262e8 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   2635c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2635e:	b92e      	cbnz	r6, 2636c <nrfx_gpiote_input_configure+0xa4>
   26360:	4a2d      	ldr	r2, [pc, #180]	; (26418 <nrfx_gpiote_input_configure+0x150>)
   26362:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   26366:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   2636a:	e7e2      	b.n	26332 <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2636c:	00ba      	lsls	r2, r7, #2
   2636e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   26372:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   26376:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2637a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2637e:	f02c 0c03 	bic.w	ip, ip, #3
   26382:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   26386:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2638a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   2638e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   26392:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   26396:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2639a:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
   2639e:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   263a2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   263a6:	ea4c 0c0e 	orr.w	ip, ip, lr
   263aa:	f041 0120 	orr.w	r1, r1, #32
   263ae:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
   263b2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   263b6:	e7bc      	b.n	26332 <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   263b8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   263bc:	4620      	mov	r0, r4
   263be:	f7ff ff3f 	bl	26240 <release_handler>
    if (!handler)
   263c2:	2e00      	cmp	r6, #0
   263c4:	d0be      	beq.n	26344 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   263c6:	4d11      	ldr	r5, [pc, #68]	; (2640c <nrfx_gpiote_input_configure+0x144>)
   263c8:	682b      	ldr	r3, [r5, #0]
   263ca:	429e      	cmp	r6, r3
   263cc:	d104      	bne.n	263d8 <nrfx_gpiote_input_configure+0x110>
   263ce:	686b      	ldr	r3, [r5, #4]
   263d0:	429f      	cmp	r7, r3
   263d2:	d101      	bne.n	263d8 <nrfx_gpiote_input_configure+0x110>
   263d4:	2200      	movs	r2, #0
   263d6:	e009      	b.n	263ec <nrfx_gpiote_input_configure+0x124>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   263d8:	4810      	ldr	r0, [pc, #64]	; (2641c <nrfx_gpiote_input_configure+0x154>)
   263da:	f10d 010f 	add.w	r1, sp, #15
   263de:	f7ff febd 	bl	2615c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   263e2:	4b0c      	ldr	r3, [pc, #48]	; (26414 <nrfx_gpiote_input_configure+0x14c>)
   263e4:	4298      	cmp	r0, r3
   263e6:	d180      	bne.n	262ea <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   263e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   263ec:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   263f0:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   263f4:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   263f6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   263f8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   263fc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   26400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   26404:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   26408:	e79c      	b.n	26344 <nrfx_gpiote_input_configure+0x7c>
   2640a:	bf00      	nop
   2640c:	2000084c 	.word	0x2000084c
   26410:	0bad0004 	.word	0x0bad0004
   26414:	0bad0000 	.word	0x0bad0000
   26418:	40006000 	.word	0x40006000
   2641c:	200008c0 	.word	0x200008c0

00026420 <nrfx_gpiote_output_configure>:
{
   26420:	b5f0      	push	{r4, r5, r6, r7, lr}
   26422:	4604      	mov	r4, r0
   26424:	b085      	sub	sp, #20
   26426:	4615      	mov	r5, r2
    if (p_config)
   26428:	b309      	cbz	r1, 2646e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2642a:	f100 0708 	add.w	r7, r0, #8
   2642e:	4e31      	ldr	r6, [pc, #196]	; (264f4 <nrfx_gpiote_output_configure+0xd4>)
   26430:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   26434:	0798      	lsls	r0, r3, #30
   26436:	d401      	bmi.n	2643c <nrfx_gpiote_output_configure+0x1c>
   26438:	069a      	lsls	r2, r3, #26
   2643a:	d458      	bmi.n	264ee <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2643c:	f013 0f1c 	tst.w	r3, #28
   26440:	d002      	beq.n	26448 <nrfx_gpiote_output_configure+0x28>
   26442:	784b      	ldrb	r3, [r1, #1]
   26444:	2b01      	cmp	r3, #1
   26446:	d052      	beq.n	264ee <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   26448:	2301      	movs	r3, #1
   2644a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2644e:	2300      	movs	r3, #0
   26450:	e9cd 1300 	strd	r1, r3, [sp]
   26454:	1c4a      	adds	r2, r1, #1
   26456:	1c8b      	adds	r3, r1, #2
   26458:	4620      	mov	r0, r4
   2645a:	f10d 010f 	add.w	r1, sp, #15
   2645e:	f00a fb54 	bl	30b0a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   26462:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   26466:	f043 0303 	orr.w	r3, r3, #3
   2646a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2646e:	b915      	cbnz	r5, 26476 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   26470:	4821      	ldr	r0, [pc, #132]	; (264f8 <nrfx_gpiote_output_configure+0xd8>)
}
   26472:	b005      	add	sp, #20
   26474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   26476:	4e1f      	ldr	r6, [pc, #124]	; (264f4 <nrfx_gpiote_output_configure+0xd4>)
   26478:	f104 0708 	add.w	r7, r4, #8
   2647c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   26480:	0783      	lsls	r3, r0, #30
   26482:	d534      	bpl.n	264ee <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   26484:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   26488:	4661      	mov	r1, ip
   2648a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2648c:	f020 0020 	bic.w	r0, r0, #32
   26490:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   26494:	04c0      	lsls	r0, r0, #19
   26496:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2649a:	0cc0      	lsrs	r0, r0, #19
   2649c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   264a0:	2300      	movs	r3, #0
   264a2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   264a6:	786a      	ldrb	r2, [r5, #1]
   264a8:	2a00      	cmp	r2, #0
   264aa:	d0e1      	beq.n	26470 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   264ac:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   264b0:	78ad      	ldrb	r5, [r5, #2]
   264b2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   264b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   264ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   264be:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   264c2:	0223      	lsls	r3, r4, #8
   264c4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   264c8:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   264ca:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   264ce:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   264d2:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   264d4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   264d6:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   264da:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   264de:	432b      	orrs	r3, r5
   264e0:	f040 0020 	orr.w	r0, r0, #32
   264e4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   264e8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   264ec:	e7c0      	b.n	26470 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   264ee:	4803      	ldr	r0, [pc, #12]	; (264fc <nrfx_gpiote_output_configure+0xdc>)
   264f0:	e7bf      	b.n	26472 <nrfx_gpiote_output_configure+0x52>
   264f2:	bf00      	nop
   264f4:	2000084c 	.word	0x2000084c
   264f8:	0bad0000 	.word	0x0bad0000
   264fc:	0bad0004 	.word	0x0bad0004

00026500 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   26500:	4b01      	ldr	r3, [pc, #4]	; (26508 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   26502:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   26506:	4770      	bx	lr
   26508:	2000084c 	.word	0x2000084c

0002650c <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2650c:	3008      	adds	r0, #8
   2650e:	4b05      	ldr	r3, [pc, #20]	; (26524 <nrfx_gpiote_channel_get+0x18>)
   26510:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   26514:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   26516:	bf43      	ittte	mi
   26518:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   2651a:	4803      	ldrmi	r0, [pc, #12]	; (26528 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2651c:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   2651e:	4803      	ldrpl	r0, [pc, #12]	; (2652c <nrfx_gpiote_channel_get+0x20>)
}
   26520:	4770      	bx	lr
   26522:	bf00      	nop
   26524:	2000084c 	.word	0x2000084c
   26528:	0bad0000 	.word	0x0bad0000
   2652c:	0bad0004 	.word	0x0bad0004

00026530 <nrfx_gpiote_init>:
{
   26530:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   26532:	4c0e      	ldr	r4, [pc, #56]	; (2656c <nrfx_gpiote_init+0x3c>)
   26534:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   26538:	b9b5      	cbnz	r5, 26568 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2653a:	2260      	movs	r2, #96	; 0x60
   2653c:	4629      	mov	r1, r5
   2653e:	f104 0010 	add.w	r0, r4, #16
   26542:	f006 fbc5 	bl	2ccd0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   26546:	2006      	movs	r0, #6
   26548:	f7f8 f8e0 	bl	1e70c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2654c:	4b08      	ldr	r3, [pc, #32]	; (26570 <nrfx_gpiote_init+0x40>)
    return err_code;
   2654e:	4809      	ldr	r0, [pc, #36]	; (26574 <nrfx_gpiote_init+0x44>)
   26550:	601d      	str	r5, [r3, #0]
   26552:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   26554:	4b08      	ldr	r3, [pc, #32]	; (26578 <nrfx_gpiote_init+0x48>)
   26556:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2655a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2655e:	2301      	movs	r3, #1
   26560:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   26564:	6763      	str	r3, [r4, #116]	; 0x74
}
   26566:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   26568:	4804      	ldr	r0, [pc, #16]	; (2657c <nrfx_gpiote_init+0x4c>)
   2656a:	e7fc      	b.n	26566 <nrfx_gpiote_init+0x36>
   2656c:	2000084c 	.word	0x2000084c
   26570:	4000617c 	.word	0x4000617c
   26574:	0bad0000 	.word	0x0bad0000
   26578:	40006000 	.word	0x40006000
   2657c:	0bad0005 	.word	0x0bad0005

00026580 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   26580:	4b03      	ldr	r3, [pc, #12]	; (26590 <nrfx_gpiote_is_init+0x10>)
   26582:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   26586:	3800      	subs	r0, #0
   26588:	bf18      	it	ne
   2658a:	2001      	movne	r0, #1
   2658c:	4770      	bx	lr
   2658e:	bf00      	nop
   26590:	2000084c 	.word	0x2000084c

00026594 <nrfx_gpiote_channel_free>:
{
   26594:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   26596:	4801      	ldr	r0, [pc, #4]	; (2659c <nrfx_gpiote_channel_free+0x8>)
   26598:	f7ff be04 	b.w	261a4 <nrfx_flag32_free>
   2659c:	200008bc 	.word	0x200008bc

000265a0 <nrfx_gpiote_channel_alloc>:
{
   265a0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   265a2:	4801      	ldr	r0, [pc, #4]	; (265a8 <nrfx_gpiote_channel_alloc+0x8>)
   265a4:	f7ff bdda 	b.w	2615c <nrfx_flag32_alloc>
   265a8:	200008bc 	.word	0x200008bc

000265ac <nrfx_gpiote_trigger_enable>:
{
   265ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   265ae:	4b1f      	ldr	r3, [pc, #124]	; (2662c <nrfx_gpiote_trigger_enable+0x80>)
   265b0:	f100 0208 	add.w	r2, r0, #8
{
   265b4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   265b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   265ba:	069a      	lsls	r2, r3, #26
   265bc:	d51d      	bpl.n	265fa <nrfx_gpiote_trigger_enable+0x4e>
   265be:	f013 0502 	ands.w	r5, r3, #2
   265c2:	d11a      	bne.n	265fa <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   265c4:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   265c6:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   265c8:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   265cc:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   265d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   265d4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   265d8:	6005      	str	r5, [r0, #0]
   265da:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   265dc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   265e0:	f040 0001 	orr.w	r0, r0, #1
   265e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   265e8:	b129      	cbz	r1, 265f6 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   265ea:	2201      	movs	r2, #1
   265ec:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   265f0:	4a0f      	ldr	r2, [pc, #60]	; (26630 <nrfx_gpiote_trigger_enable+0x84>)
   265f2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   265f6:	b003      	add	sp, #12
   265f8:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   265fa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   265fe:	2b04      	cmp	r3, #4
   26600:	d010      	beq.n	26624 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   26602:	2b05      	cmp	r3, #5
   26604:	d010      	beq.n	26628 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26606:	a801      	add	r0, sp, #4
   26608:	9401      	str	r4, [sp, #4]
   2660a:	f7ff fded 	bl	261e8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2660e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   26610:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   26614:	40d9      	lsrs	r1, r3
   26616:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2661a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2661c:	4620      	mov	r0, r4
   2661e:	f00a fabb 	bl	30b98 <nrf_gpio_cfg_sense_set>
}
   26622:	e7e8      	b.n	265f6 <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   26624:	2103      	movs	r1, #3
   26626:	e7f9      	b.n	2661c <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   26628:	2102      	movs	r1, #2
   2662a:	e7f7      	b.n	2661c <nrfx_gpiote_trigger_enable+0x70>
   2662c:	2000084c 	.word	0x2000084c
   26630:	40006000 	.word	0x40006000

00026634 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   26634:	4b0e      	ldr	r3, [pc, #56]	; (26670 <nrfx_gpiote_trigger_disable+0x3c>)
   26636:	f100 0208 	add.w	r2, r0, #8
   2663a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2663e:	0699      	lsls	r1, r3, #26
   26640:	d513      	bpl.n	2666a <nrfx_gpiote_trigger_disable+0x36>
   26642:	079a      	lsls	r2, r3, #30
   26644:	d411      	bmi.n	2666a <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   26646:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   26648:	2201      	movs	r2, #1
   2664a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   2664c:	009b      	lsls	r3, r3, #2
   2664e:	4909      	ldr	r1, [pc, #36]	; (26674 <nrfx_gpiote_trigger_disable+0x40>)
   26650:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26654:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   26658:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2665c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   26660:	f022 0203 	bic.w	r2, r2, #3
   26664:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   26668:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2666a:	2100      	movs	r1, #0
   2666c:	f00a ba94 	b.w	30b98 <nrf_gpio_cfg_sense_set>
   26670:	2000084c 	.word	0x2000084c
   26674:	40006000 	.word	0x40006000

00026678 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   26678:	4b0e      	ldr	r3, [pc, #56]	; (266b4 <nrfx_gpiote_pin_uninit+0x3c>)
   2667a:	f100 0208 	add.w	r2, r0, #8
{
   2667e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   26680:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   26684:	07db      	lsls	r3, r3, #31
{
   26686:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   26688:	d511      	bpl.n	266ae <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   2668a:	f7ff ffd3 	bl	26634 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2668e:	4620      	mov	r0, r4
   26690:	f7ff fe00 	bl	26294 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26694:	a801      	add	r0, sp, #4
   26696:	9401      	str	r4, [sp, #4]
   26698:	f7ff fda6 	bl	261e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2669c:	9b01      	ldr	r3, [sp, #4]
   2669e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   266a2:	2202      	movs	r2, #2
   266a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   266a8:	4803      	ldr	r0, [pc, #12]	; (266b8 <nrfx_gpiote_pin_uninit+0x40>)
}
   266aa:	b002      	add	sp, #8
   266ac:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   266ae:	4803      	ldr	r0, [pc, #12]	; (266bc <nrfx_gpiote_pin_uninit+0x44>)
   266b0:	e7fb      	b.n	266aa <nrfx_gpiote_pin_uninit+0x32>
   266b2:	bf00      	nop
   266b4:	2000084c 	.word	0x2000084c
   266b8:	0bad0000 	.word	0x0bad0000
   266bc:	0bad0004 	.word	0x0bad0004

000266c0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   266c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266c4:	4b64      	ldr	r3, [pc, #400]	; (26858 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   266c6:	4865      	ldr	r0, [pc, #404]	; (2685c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   266c8:	4965      	ldr	r1, [pc, #404]	; (26860 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   266ca:	2500      	movs	r5, #0
{
   266cc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   266ce:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   266d0:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   266d2:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   266d4:	b136      	cbz	r6, 266e4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   266d6:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   266da:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   266dc:	bf1e      	ittt	ne
   266de:	601c      	strne	r4, [r3, #0]
   266e0:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   266e2:	4315      	orrne	r5, r2
        }
        mask <<= 1;
   266e4:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   266e6:	428b      	cmp	r3, r1
        mask <<= 1;
   266e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   266ec:	d1f1      	bne.n	266d2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   266ee:	4f5d      	ldr	r7, [pc, #372]	; (26864 <nrfx_gpiote_irq_handler+0x1a4>)
   266f0:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   266f2:	b37b      	cbz	r3, 26754 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
   266f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   266f8:	4e5b      	ldr	r6, [pc, #364]	; (26868 <nrfx_gpiote_irq_handler+0x1a8>)
   266fa:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   266fe:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   26700:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   26704:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   26708:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   2670a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2670e:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   26710:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   26714:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   26718:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   2671c:	f8d9 3000 	ldr.w	r3, [r9]
   26720:	b9f3      	cbnz	r3, 26760 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   26722:	f108 0820 	add.w	r8, r8, #32
   26726:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   2672a:	f109 0904 	add.w	r9, r9, #4
   2672e:	d1f5      	bne.n	2671c <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   26730:	603b      	str	r3, [r7, #0]
   26732:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   26734:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
   26736:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2673a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2673e:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   26740:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   26744:	9b00      	ldr	r3, [sp, #0]
   26746:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   2674a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   2674c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   26750:	4313      	orrs	r3, r2
   26752:	d1dd      	bne.n	26710 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
   26754:	2401      	movs	r4, #1
    while (mask)
   26756:	2d00      	cmp	r5, #0
   26758:	d166      	bne.n	26828 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2675a:	b007      	add	sp, #28
   2675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   26760:	fa93 f3a3 	rbit	r3, r3
   26764:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
   26768:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2676c:	f106 0208 	add.w	r2, r6, #8
   26770:	4b3e      	ldr	r3, [pc, #248]	; (2686c <nrfx_gpiote_irq_handler+0x1ac>)
   26772:	9603      	str	r6, [sp, #12]
   26774:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   26778:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2677c:	08f4      	lsrs	r4, r6, #3
   2677e:	9301      	str	r3, [sp, #4]
   26780:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
   26782:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
   26784:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   26788:	fa0b fc00 	lsl.w	ip, fp, r0
   2678c:	5d18      	ldrb	r0, [r3, r4]
   2678e:	ea20 000c 	bic.w	r0, r0, ip
   26792:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26794:	a803      	add	r0, sp, #12
   26796:	0891      	lsrs	r1, r2, #2
   26798:	f7ff fd26 	bl	261e8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2679c:	9c03      	ldr	r4, [sp, #12]
   2679e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
   267a2:	074b      	lsls	r3, r1, #29
   267a4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   267a8:	f3c4 4401 	ubfx	r4, r4, #16, #2
   267ac:	d523      	bpl.n	267f6 <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
   267ae:	4651      	mov	r1, sl
   267b0:	4630      	mov	r0, r6
   267b2:	f7ff fd27 	bl	26204 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   267b6:	a803      	add	r0, sp, #12
   267b8:	9603      	str	r6, [sp, #12]
   267ba:	f7ff fd15 	bl	261e8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   267be:	9a03      	ldr	r2, [sp, #12]
   267c0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   267c4:	b2e4      	uxtb	r4, r4
   267c6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   267ca:	f3c2 4201 	ubfx	r2, r2, #16, #2
   267ce:	4294      	cmp	r4, r2
   267d0:	d107      	bne.n	267e2 <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   267d2:	2100      	movs	r1, #0
   267d4:	4630      	mov	r0, r6
   267d6:	f00a f9df 	bl	30b98 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   267da:	4621      	mov	r1, r4
   267dc:	4630      	mov	r0, r6
   267de:	f00a f9db 	bl	30b98 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   267e2:	a803      	add	r0, sp, #12
   267e4:	9603      	str	r6, [sp, #12]
   267e6:	f7ff fcff 	bl	261e8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   267ea:	9b03      	ldr	r3, [sp, #12]
   267ec:	fa0b f303 	lsl.w	r3, fp, r3
   267f0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   267f4:	e792      	b.n	2671c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   267f6:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   267f8:	bf0c      	ite	eq
   267fa:	2103      	moveq	r1, #3
   267fc:	2102      	movne	r1, #2
   267fe:	4630      	mov	r0, r6
   26800:	f00a f9ca 	bl	30b98 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   26804:	9b01      	ldr	r3, [sp, #4]
   26806:	2b03      	cmp	r3, #3
   26808:	d004      	beq.n	26814 <nrfx_gpiote_irq_handler+0x154>
   2680a:	2c02      	cmp	r4, #2
   2680c:	d107      	bne.n	2681e <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2680e:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   26812:	d1e6      	bne.n	267e2 <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
   26814:	4651      	mov	r1, sl
   26816:	4630      	mov	r0, r6
   26818:	f7ff fcf4 	bl	26204 <call_handler>
   2681c:	e7e1      	b.n	267e2 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2681e:	2c03      	cmp	r4, #3
   26820:	d1df      	bne.n	267e2 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   26822:	f1ba 0f02 	cmp.w	sl, #2
   26826:	e7f4      	b.n	26812 <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
   26828:	fa95 f3a5 	rbit	r3, r5
   2682c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   26830:	fa04 f203 	lsl.w	r2, r4, r3
   26834:	009b      	lsls	r3, r3, #2
   26836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2683a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2683e:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   26842:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   26846:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2684a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2684e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   26852:	f7ff fcd7 	bl	26204 <call_handler>
   26856:	e77e      	b.n	26756 <nrfx_gpiote_irq_handler+0x96>
   26858:	40006100 	.word	0x40006100
   2685c:	40006000 	.word	0x40006000
   26860:	40006120 	.word	0x40006120
   26864:	4000617c 	.word	0x4000617c
   26868:	50000300 	.word	0x50000300
   2686c:	2000084c 	.word	0x2000084c

00026870 <nrfx_nvmc_page_partial_erase_init>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   26870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26874:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   26876:	fbb0 f3f2 	udiv	r3, r0, r2
   2687a:	fb02 0313 	mls	r3, r2, r3, r0
#if defined(NRF_NVMC_PARTIAL_ERASE_PRESENT)
nrfx_err_t nrfx_nvmc_page_partial_erase_init(uint32_t addr, uint32_t duration_ms)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   2687e:	b943      	cbnz	r3, 26892 <nrfx_nvmc_page_partial_erase_init+0x22>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    m_partial_erase_time_elapsed = 0;
   26880:	4a05      	ldr	r2, [pc, #20]	; (26898 <nrfx_nvmc_page_partial_erase_init+0x28>)
   26882:	6013      	str	r3, [r2, #0]
    m_partial_erase_page_addr = addr;
   26884:	4b05      	ldr	r3, [pc, #20]	; (2689c <nrfx_nvmc_page_partial_erase_init+0x2c>)
   26886:	6018      	str	r0, [r3, #0]

#if defined(NRF_NVMC_PARTIAL_ERASE_PRESENT)
NRF_STATIC_INLINE void nrf_nvmc_partial_erase_duration_set(NRF_NVMC_Type * p_reg,
                                                           uint32_t        duration_ms)
{
    p_reg->ERASEPAGEPARTIALCFG = duration_ms;
   26888:	4b05      	ldr	r3, [pc, #20]	; (268a0 <nrfx_nvmc_page_partial_erase_init+0x30>)
    nrf_nvmc_partial_erase_duration_set(NRF_NVMC, duration_ms);

    return NRFX_SUCCESS;
   2688a:	4806      	ldr	r0, [pc, #24]	; (268a4 <nrfx_nvmc_page_partial_erase_init+0x34>)
   2688c:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
   26890:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   26892:	4805      	ldr	r0, [pc, #20]	; (268a8 <nrfx_nvmc_page_partial_erase_init+0x38>)
}
   26894:	4770      	bx	lr
   26896:	bf00      	nop
   26898:	20002b94 	.word	0x20002b94
   2689c:	200008c8 	.word	0x200008c8
   268a0:	4001e000 	.word	0x4001e000
   268a4:	0bad0000 	.word	0x0bad0000
   268a8:	0bad000a 	.word	0x0bad000a

000268ac <nrfx_nvmc_page_partial_erase_continue>:
}

NRF_STATIC_INLINE uint32_t nrf_nvmc_partial_erase_duration_get(NRF_NVMC_Type const * p_reg)
{
    return p_reg->ERASEPAGEPARTIALCFG;
   268ac:	4b0e      	ldr	r3, [pc, #56]	; (268e8 <nrfx_nvmc_page_partial_erase_continue+0x3c>)
    p_reg->CONFIG = (uint32_t)mode;
   268ae:	2202      	movs	r2, #2

bool nrfx_nvmc_page_partial_erase_continue(void)
{
   268b0:	b530      	push	{r4, r5, lr}
    return p_reg->ERASEPAGEPARTIALCFG;
   268b2:	f8d3 151c 	ldr.w	r1, [r3, #1308]	; 0x51c
    p_reg->CONFIG = (uint32_t)mode;
   268b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_PARTIAL_ERASE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif

    nrf_nvmc_page_partial_erase_start(NRF_NVMC, m_partial_erase_page_addr);
   268ba:	4a0c      	ldr	r2, [pc, #48]	; (268ec <nrfx_nvmc_page_partial_erase_continue+0x40>)
   268bc:	6810      	ldr	r0, [r2, #0]

NRF_STATIC_INLINE void nrf_nvmc_page_partial_erase_start(NRF_NVMC_Type * p_reg,
                                                         uint32_t        page_addr)
{
#if defined(NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Msk)
    p_reg->ERASEPAGEPARTIAL = page_addr;
   268be:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   268c2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   268c6:	f010 0001 	ands.w	r0, r0, #1
   268ca:	d0fa      	beq.n	268c2 <nrfx_nvmc_page_partial_erase_continue+0x16>
    {}
    nvmc_readonly_mode_set();

    m_partial_erase_time_elapsed += duration_ms;
   268cc:	4d08      	ldr	r5, [pc, #32]	; (268f0 <nrfx_nvmc_page_partial_erase_continue+0x44>)
    p_reg->CONFIG = (uint32_t)mode;
   268ce:	2400      	movs	r4, #0
   268d0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   268d4:	682b      	ldr	r3, [r5, #0]
   268d6:	440b      	add	r3, r1
    if (m_partial_erase_time_elapsed < NVMC_PAGE_ERASE_DURATION_MS)
   268d8:	2b54      	cmp	r3, #84	; 0x54
    m_partial_erase_time_elapsed += duration_ms;
   268da:	602b      	str	r3, [r5, #0]
    {
        return false;
    }
    else
    {
        m_partial_erase_page_addr = NVMC_PARTIAL_ERASE_INVALID_ADDR;
   268dc:	bf86      	itte	hi
   268de:	f04f 33ff 	movhi.w	r3, #4294967295
   268e2:	6013      	strhi	r3, [r2, #0]
        return false;
   268e4:	4620      	movls	r0, r4
        return true;
    }
}
   268e6:	bd30      	pop	{r4, r5, pc}
   268e8:	4001e000 	.word	0x4001e000
   268ec:	200008c8 	.word	0x200008c8
   268f0:	20002b94 	.word	0x20002b94

000268f4 <nrfx_nvmc_word_write>:
   268f4:	4b07      	ldr	r3, [pc, #28]	; (26914 <nrfx_nvmc_word_write+0x20>)
   268f6:	2201      	movs	r2, #1
   268f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   268fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   26900:	07d2      	lsls	r2, r2, #31
   26902:	d5fb      	bpl.n	268fc <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   26904:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   26906:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   2690a:	2200      	movs	r2, #0
   2690c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   26910:	4770      	bx	lr
   26912:	bf00      	nop
   26914:	4001e000 	.word	0x4001e000

00026918 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   26918:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2691a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2691e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   26920:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   26922:	6002      	str	r2, [r0, #0]
}
   26924:	4802      	ldr	r0, [pc, #8]	; (26930 <nrf_gpio_pin_port_decode+0x18>)
   26926:	bf18      	it	ne
   26928:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   2692c:	4770      	bx	lr
   2692e:	bf00      	nop
   26930:	50000300 	.word	0x50000300

00026934 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   26934:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   26938:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2693a:	4d51      	ldr	r5, [pc, #324]	; (26a80 <nrfx_spi_init+0x14c>)
   2693c:	f04f 0c28 	mov.w	ip, #40	; 0x28
   26940:	fb0c fc04 	mul.w	ip, ip, r4
{
   26944:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   26946:	eb05 000c 	add.w	r0, r5, ip
   2694a:	7f06      	ldrb	r6, [r0, #28]
   2694c:	2e00      	cmp	r6, #0
   2694e:	f040 8095 	bne.w	26a7c <nrfx_spi_init+0x148>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   26952:	683e      	ldr	r6, [r7, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   26954:	6043      	str	r3, [r0, #4]
    p_cb->handler = handler;
   26956:	f845 200c 	str.w	r2, [r5, ip]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   2695a:	7bcb      	ldrb	r3, [r1, #15]
   2695c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   26960:	78ca      	ldrb	r2, [r1, #3]
   26962:	7782      	strb	r2, [r0, #30]
    p_cb->orc = p_config->orc;
   26964:	794a      	ldrb	r2, [r1, #5]
   26966:	77c2      	strb	r2, [r0, #31]
    if (!p_config->skip_gpio_cfg)
   26968:	2b00      	cmp	r3, #0
   2696a:	d140      	bne.n	269ee <nrfx_spi_init+0xba>
    if (value == 0)
   2696c:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   2696e:	7808      	ldrb	r0, [r1, #0]
   26970:	2b01      	cmp	r3, #1
   26972:	d87a      	bhi.n	26a6a <nrfx_spi_init+0x136>
        nrf_gpio_pin_clear(pin_number);
   26974:	f00a f948 	bl	30c08 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   26978:	780b      	ldrb	r3, [r1, #0]
   2697a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2697c:	a801      	add	r0, sp, #4
   2697e:	f7ff ffcb 	bl	26918 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   26982:	9b01      	ldr	r3, [sp, #4]
   26984:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   26988:	2201      	movs	r2, #1
   2698a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   2698e:	7848      	ldrb	r0, [r1, #1]
   26990:	28ff      	cmp	r0, #255	; 0xff
   26992:	d00c      	beq.n	269ae <nrfx_spi_init+0x7a>
        nrf_gpio_pin_clear(pin_number);
   26994:	f00a f938 	bl	30c08 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26998:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_output(p_config->mosi_pin);
   2699a:	784b      	ldrb	r3, [r1, #1]
   2699c:	9301      	str	r3, [sp, #4]
   2699e:	f7ff ffbb 	bl	26918 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   269a2:	9b01      	ldr	r3, [sp, #4]
   269a4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   269a8:	2203      	movs	r2, #3
   269aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   269ae:	788b      	ldrb	r3, [r1, #2]
   269b0:	2bff      	cmp	r3, #255	; 0xff
   269b2:	d00c      	beq.n	269ce <nrfx_spi_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   269b4:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   269b6:	f891 800e 	ldrb.w	r8, [r1, #14]
   269ba:	9301      	str	r3, [sp, #4]
   269bc:	f7ff ffac 	bl	26918 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   269c0:	9b01      	ldr	r3, [sp, #4]
   269c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   269c6:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   269ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   269ce:	78c8      	ldrb	r0, [r1, #3]
   269d0:	28ff      	cmp	r0, #255	; 0xff
   269d2:	d00c      	beq.n	269ee <nrfx_spi_init+0xba>
        nrf_gpio_pin_set(pin_number);
   269d4:	f00a f90b 	bl	30bee <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   269d8:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_output(p_config->ss_pin);
   269da:	78cb      	ldrb	r3, [r1, #3]
   269dc:	9301      	str	r3, [sp, #4]
   269de:	f7ff ff9b 	bl	26918 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   269e2:	9b01      	ldr	r3, [sp, #4]
   269e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   269e8:	2203      	movs	r2, #3
   269ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   269ee:	7c0b      	ldrb	r3, [r1, #16]
   269f0:	b993      	cbnz	r3, 26a18 <nrfx_spi_init+0xe4>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   269f2:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   269f4:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   269f6:	2bff      	cmp	r3, #255	; 0xff
   269f8:	bf18      	it	ne
   269fa:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   269fc:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   269fe:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
   26a02:	bf08      	it	eq
   26a04:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
   26a08:	2bff      	cmp	r3, #255	; 0xff
   26a0a:	bf08      	it	eq
   26a0c:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   26a10:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   26a14:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   26a18:	688b      	ldr	r3, [r1, #8]
   26a1a:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   26a1e:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   26a20:	7b0a      	ldrb	r2, [r1, #12]
   26a22:	3b00      	subs	r3, #0
   26a24:	bf18      	it	ne
   26a26:	2301      	movne	r3, #1
    switch (spi_mode)
   26a28:	2a02      	cmp	r2, #2
   26a2a:	d021      	beq.n	26a70 <nrfx_spi_init+0x13c>
   26a2c:	2a03      	cmp	r2, #3
   26a2e:	d022      	beq.n	26a76 <nrfx_spi_init+0x142>
   26a30:	2a01      	cmp	r2, #1
   26a32:	d101      	bne.n	26a38 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   26a34:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   26a38:	f8c6 3554 	str.w	r3, [r6, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   26a3c:	2301      	movs	r3, #1
   26a3e:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   26a42:	2328      	movs	r3, #40	; 0x28
   26a44:	4363      	muls	r3, r4
   26a46:	58eb      	ldr	r3, [r5, r3]
   26a48:	b123      	cbz	r3, 26a54 <nrfx_spi_init+0x120>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   26a4a:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   26a4c:	f340 3007 	sbfx	r0, r0, #12, #8
   26a50:	f7f7 fe5c 	bl	1e70c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   26a54:	2328      	movs	r3, #40	; 0x28
   26a56:	fb03 5404 	mla	r4, r3, r4, r5
   26a5a:	2300      	movs	r3, #0
   26a5c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   26a5e:	4809      	ldr	r0, [pc, #36]	; (26a84 <nrfx_spi_init+0x150>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   26a60:	2301      	movs	r3, #1
   26a62:	7723      	strb	r3, [r4, #28]
}
   26a64:	b002      	add	sp, #8
   26a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
   26a6a:	f00a f8c0 	bl	30bee <nrf_gpio_pin_set>
   26a6e:	e783      	b.n	26978 <nrfx_spi_init+0x44>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   26a70:	f043 0304 	orr.w	r3, r3, #4
        break;
   26a74:	e7e0      	b.n	26a38 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   26a76:	f043 0306 	orr.w	r3, r3, #6
        break;
   26a7a:	e7dd      	b.n	26a38 <nrfx_spi_init+0x104>
        return err_code;
   26a7c:	4802      	ldr	r0, [pc, #8]	; (26a88 <nrfx_spi_init+0x154>)
   26a7e:	e7f1      	b.n	26a64 <nrfx_spi_init+0x130>
   26a80:	20002b98 	.word	0x20002b98
   26a84:	0bad0000 	.word	0x0bad0000
   26a88:	0bad0005 	.word	0x0bad0005

00026a8c <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   26a8c:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   26a8e:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   26a90:	4d19      	ldr	r5, [pc, #100]	; (26af8 <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   26a92:	6806      	ldr	r6, [r0, #0]
    if (p_cb->handler)
   26a94:	2328      	movs	r3, #40	; 0x28
   26a96:	4363      	muls	r3, r4
   26a98:	58eb      	ldr	r3, [r5, r3]
   26a9a:	b133      	cbz	r3, 26aaa <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   26a9c:	f346 3007 	sbfx	r0, r6, #12, #8
   26aa0:	f7f7 fe44 	bl	1e72c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   26aa4:	2304      	movs	r3, #4
   26aa6:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   26aaa:	2300      	movs	r3, #0
   26aac:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
   26ab0:	2328      	movs	r3, #40	; 0x28
   26ab2:	fb03 5304 	mla	r3, r3, r4, r5
   26ab6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   26aba:	b9bb      	cbnz	r3, 26aec <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
   26abc:	f8d6 0508 	ldr.w	r0, [r6, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
   26ac0:	f00a f887 	bl	30bd2 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   26ac4:	f8d6 0510 	ldr.w	r0, [r6, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   26ac8:	1c42      	adds	r2, r0, #1
   26aca:	d001      	beq.n	26ad0 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
   26acc:	f00a f881 	bl	30bd2 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   26ad0:	f8d6 050c 	ldr.w	r0, [r6, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   26ad4:	1c43      	adds	r3, r0, #1
   26ad6:	d001      	beq.n	26adc <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
   26ad8:	f00a f87b 	bl	30bd2 <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   26adc:	2328      	movs	r3, #40	; 0x28
   26ade:	fb03 5304 	mla	r3, r3, r4, r5
   26ae2:	7f98      	ldrb	r0, [r3, #30]
   26ae4:	28ff      	cmp	r0, #255	; 0xff
   26ae6:	d001      	beq.n	26aec <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   26ae8:	f00a f873 	bl	30bd2 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   26aec:	2328      	movs	r3, #40	; 0x28
   26aee:	fb03 5404 	mla	r4, r3, r4, r5
   26af2:	2300      	movs	r3, #0
   26af4:	7723      	strb	r3, [r4, #28]
}
   26af6:	bd70      	pop	{r4, r5, r6, pc}
   26af8:	20002b98 	.word	0x20002b98

00026afc <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   26afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   26b00:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   26b02:	4d39      	ldr	r5, [pc, #228]	; (26be8 <nrfx_spi_xfer+0xec>)
   26b04:	2328      	movs	r3, #40	; 0x28
   26b06:	4363      	muls	r3, r4
{
   26b08:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   26b0a:	18ea      	adds	r2, r5, r3
{
   26b0c:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   26b0e:	7f51      	ldrb	r1, [r2, #29]
{
   26b10:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   26b12:	2900      	cmp	r1, #0
   26b14:	d165      	bne.n	26be2 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   26b16:	58eb      	ldr	r3, [r5, r3]
   26b18:	b10b      	cbz	r3, 26b1e <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   26b1a:	2301      	movs	r3, #1
   26b1c:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   26b1e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   26b22:	2628      	movs	r6, #40	; 0x28
   26b24:	fb06 5604 	mla	r6, r6, r4, r5
   26b28:	f106 0c0c 	add.w	ip, r6, #12
   26b2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   26b30:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
   26b32:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   26b34:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   26b36:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   26b3a:	d001      	beq.n	26b40 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
   26b3c:	f00a f864 	bl	30c08 <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   26b40:	2328      	movs	r3, #40	; 0x28
   26b42:	f1b8 0f00 	cmp.w	r8, #0
   26b46:	d006      	beq.n	26b56 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   26b48:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   26b4c:	4827      	ldr	r0, [pc, #156]	; (26bec <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   26b4e:	2300      	movs	r3, #0
   26b50:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   26b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   26b56:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
   26b5a:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
   26b5e:	2204      	movs	r2, #4
   26b60:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
   26b64:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b68:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
   26b6c:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   26b70:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   26b72:	b192      	cbz	r2, 26b9a <nrfx_spi_xfer+0x9e>
   26b74:	683b      	ldr	r3, [r7, #0]
   26b76:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   26b78:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   26b7c:	2a01      	cmp	r2, #1
   26b7e:	d90e      	bls.n	26b9e <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   26b80:	683b      	ldr	r3, [r7, #0]
   26b82:	785b      	ldrb	r3, [r3, #1]
   26b84:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
   26b88:	2328      	movs	r3, #40	; 0x28
   26b8a:	4363      	muls	r3, r4
   26b8c:	58ef      	ldr	r7, [r5, r3]
   26b8e:	b177      	cbz	r7, 26bae <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   26b90:	2304      	movs	r3, #4
   26b92:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   26b96:	4816      	ldr	r0, [pc, #88]	; (26bf0 <nrfx_spi_xfer+0xf4>)
   26b98:	e7db      	b.n	26b52 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   26b9a:	7fdb      	ldrb	r3, [r3, #31]
   26b9c:	e7ec      	b.n	26b78 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   26b9e:	68fb      	ldr	r3, [r7, #12]
   26ba0:	2b01      	cmp	r3, #1
   26ba2:	d9f1      	bls.n	26b88 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   26ba4:	2328      	movs	r3, #40	; 0x28
   26ba6:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
   26baa:	7fdb      	ldrb	r3, [r3, #31]
   26bac:	e7ea      	b.n	26b84 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   26bae:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   26bb2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26bb6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   26bba:	2b00      	cmp	r3, #0
   26bbc:	d0fb      	beq.n	26bb6 <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26bbe:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   26bc2:	4630      	mov	r0, r6
   26bc4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   26bc8:	f00a f82b 	bl	30c22 <transfer_byte>
   26bcc:	2800      	cmp	r0, #0
   26bce:	d1f2      	bne.n	26bb6 <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   26bd0:	2328      	movs	r3, #40	; 0x28
   26bd2:	fb03 5404 	mla	r4, r3, r4, r5
   26bd6:	7fa0      	ldrb	r0, [r4, #30]
   26bd8:	28ff      	cmp	r0, #255	; 0xff
   26bda:	d0dc      	beq.n	26b96 <nrfx_spi_xfer+0x9a>
        nrf_gpio_pin_set(pin_number);
   26bdc:	f00a f807 	bl	30bee <nrf_gpio_pin_set>
   26be0:	e7d9      	b.n	26b96 <nrfx_spi_xfer+0x9a>
        return err_code;
   26be2:	4804      	ldr	r0, [pc, #16]	; (26bf4 <nrfx_spi_xfer+0xf8>)
   26be4:	e7b5      	b.n	26b52 <nrfx_spi_xfer+0x56>
   26be6:	bf00      	nop
   26be8:	20002b98 	.word	0x20002b98
   26bec:	0bad0003 	.word	0x0bad0003
   26bf0:	0bad0000 	.word	0x0bad0000
   26bf4:	0bad000b 	.word	0x0bad000b

00026bf8 <nrfx_spi_1_irq_handler>:
   26bf8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   26bfc:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   26bfe:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   26c00:	490b      	ldr	r1, [pc, #44]	; (26c30 <nrfx_spi_1_irq_handler+0x38>)
   26c02:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   26c06:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   26c0a:	f00a f80a 	bl	30c22 <transfer_byte>
   26c0e:	b968      	cbnz	r0, 26c2c <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   26c10:	7f88      	ldrb	r0, [r1, #30]
   26c12:	28ff      	cmp	r0, #255	; 0xff
   26c14:	d001      	beq.n	26c1a <nrfx_spi_1_irq_handler+0x22>
   26c16:	f009 ffea 	bl	30bee <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   26c1a:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   26c1c:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   26c1e:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   26c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   26c24:	e9d1 3100 	ldrd	r3, r1, [r1]
   26c28:	4802      	ldr	r0, [pc, #8]	; (26c34 <nrfx_spi_1_irq_handler+0x3c>)
   26c2a:	4718      	bx	r3
}
   26c2c:	bd10      	pop	{r4, pc}
   26c2e:	bf00      	nop
   26c30:	20002b98 	.word	0x20002b98
   26c34:	20002ba0 	.word	0x20002ba0

00026c38 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   26c38:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   26c3c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   26c3e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   26c40:	4b04      	ldr	r3, [pc, #16]	; (26c54 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   26c42:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   26c46:	bf18      	it	ne
   26c48:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   26c4c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   26c4e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   26c52:	4770      	bx	lr
   26c54:	50000300 	.word	0x50000300

00026c58 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
   26c58:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   26c5c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   26c5e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   26c60:	4b04      	ldr	r3, [pc, #16]	; (26c74 <nrf_gpio_cfg_default+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
   26c62:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   26c66:	bf18      	it	ne
   26c68:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   26c6c:	2102      	movs	r1, #2
   26c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   26c72:	4770      	bx	lr
   26c74:	50000300 	.word	0x50000300

00026c78 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   26c78:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   26c7c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   26c7e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   26c80:	4b04      	ldr	r3, [pc, #16]	; (26c94 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26c82:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   26c86:	bf18      	it	ne
   26c88:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26c8c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   26c8e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   26c92:	4770      	bx	lr
   26c94:	50000300 	.word	0x50000300

00026c98 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   26c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   26c9c:	4f80      	ldr	r7, [pc, #512]	; (26ea0 <nrfx_spim_init+0x208>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   26c9e:	7906      	ldrb	r6, [r0, #4]
{
   26ca0:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   26ca2:	eb07 1146 	add.w	r1, r7, r6, lsl #5
{
   26ca6:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   26ca8:	7f09      	ldrb	r1, [r1, #28]
   26caa:	2900      	cmp	r1, #0
   26cac:	f040 80f4 	bne.w	26e98 <nrfx_spim_init+0x200>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   26cb0:	2e00      	cmp	r6, #0
   26cb2:	f040 80f3 	bne.w	26e9c <nrfx_spim_init+0x204>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   26cb6:	6805      	ldr	r5, [r0, #0]
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   26cb8:	7ce0      	ldrb	r0, [r4, #19]
        ((p_config->use_hw_ss) &&
   26cba:	f894 c011 	ldrb.w	ip, [r4, #17]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   26cbe:	68a1      	ldr	r1, [r4, #8]
    p_cb->p_context = p_context;
   26cc0:	e9c7 2300 	strd	r2, r3, [r7]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   26cc4:	7923      	ldrb	r3, [r4, #4]
   26cc6:	7fba      	ldrb	r2, [r7, #30]
   26cc8:	ea40 0343 	orr.w	r3, r0, r3, lsl #1
   26ccc:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
   26cd0:	f003 0307 	and.w	r3, r3, #7
   26cd4:	f022 0207 	bic.w	r2, r2, #7
   26cd8:	4313      	orrs	r3, r2
   26cda:	77bb      	strb	r3, [r7, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
   26cdc:	78e3      	ldrb	r3, [r4, #3]
   26cde:	77fb      	strb	r3, [r7, #31]
    if (!p_config->skip_gpio_cfg)
   26ce0:	2800      	cmp	r0, #0
   26ce2:	d16c      	bne.n	26dbe <nrfx_spim_init+0x126>
    if (value == 0)
   26ce4:	7b23      	ldrb	r3, [r4, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   26ce6:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   26ce8:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   26cec:	bf08      	it	eq
   26cee:	2603      	moveq	r6, #3
   26cf0:	2b01      	cmp	r3, #1
   26cf2:	f200 80bb 	bhi.w	26e6c <nrfx_spim_init+0x1d4>
        nrf_gpio_pin_clear(pin_number);
   26cf6:	f7ff ff9f 	bl	26c38 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   26cfa:	7823      	ldrb	r3, [r4, #0]
        case 1: return NRF_P1;
   26cfc:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 26ea4 <nrfx_spim_init+0x20c>
    *p_pin = pin_number & 0x1F;
   26d00:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   26d04:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   26d06:	2b01      	cmp	r3, #1
   26d08:	bf14      	ite	ne
   26d0a:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
   26d0e:	4649      	moveq	r1, r9
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   26d10:	0236      	lsls	r6, r6, #8
    reg->PIN_CNF[pin_number] = cnf;
   26d12:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   26d16:	f046 0001 	orr.w	r0, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   26d1a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   26d1e:	7860      	ldrb	r0, [r4, #1]
   26d20:	28ff      	cmp	r0, #255	; 0xff
   26d22:	d00f      	beq.n	26d44 <nrfx_spim_init+0xac>
        nrf_gpio_pin_clear(pin_number);
   26d24:	f7ff ff88 	bl	26c38 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   26d28:	7863      	ldrb	r3, [r4, #1]
    *p_pin = pin_number & 0x1F;
   26d2a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   26d2e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   26d30:	2b01      	cmp	r3, #1
   26d32:	bf18      	it	ne
   26d34:	f04f 49a0 	movne.w	r9, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   26d38:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   26d3c:	f046 0103 	orr.w	r1, r6, #3
    reg->PIN_CNF[pin_number] = cnf;
   26d40:	f849 1023 	str.w	r1, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   26d44:	78a3      	ldrb	r3, [r4, #2]
   26d46:	2bff      	cmp	r3, #255	; 0xff
   26d48:	d00e      	beq.n	26d68 <nrfx_spim_init+0xd0>
    *p_pin = pin_number & 0x1F;
   26d4a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   26d4e:	095b      	lsrs	r3, r3, #5
            nrf_gpio_cfg(p_config->miso_pin,
   26d50:	7ba1      	ldrb	r1, [r4, #14]
        case 1: return NRF_P1;
   26d52:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   26d54:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   26d58:	4b52      	ldr	r3, [pc, #328]	; (26ea4 <nrfx_spim_init+0x20c>)
   26d5a:	bf18      	it	ne
   26d5c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   26d60:	ea46 0181 	orr.w	r1, r6, r1, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   26d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   26d68:	78e0      	ldrb	r0, [r4, #3]
   26d6a:	28ff      	cmp	r0, #255	; 0xff
   26d6c:	d013      	beq.n	26d96 <nrfx_spim_init+0xfe>
    if (value == 0)
   26d6e:	7923      	ldrb	r3, [r4, #4]
   26d70:	2b00      	cmp	r3, #0
   26d72:	d07e      	beq.n	26e72 <nrfx_spim_init+0x1da>
        nrf_gpio_pin_clear(pin_number);
   26d74:	f7ff ff60 	bl	26c38 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   26d78:	78e3      	ldrb	r3, [r4, #3]
    *p_pin = pin_number & 0x1F;
   26d7a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   26d7e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   26d80:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   26d82:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   26d86:	4b47      	ldr	r3, [pc, #284]	; (26ea4 <nrfx_spim_init+0x20c>)
   26d88:	bf18      	it	ne
   26d8a:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   26d8e:	f046 0103 	orr.w	r1, r6, #3
    reg->PIN_CNF[pin_number] = cnf;
   26d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   26d96:	7be0      	ldrb	r0, [r4, #15]
   26d98:	28ff      	cmp	r0, #255	; 0xff
   26d9a:	d010      	beq.n	26dbe <nrfx_spim_init+0x126>
        nrf_gpio_pin_set(pin_number);
   26d9c:	f7ff ff6c 	bl	26c78 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   26da0:	7be3      	ldrb	r3, [r4, #15]
    *p_pin = pin_number & 0x1F;
   26da2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   26da6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   26da8:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   26daa:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   26dae:	4b3d      	ldr	r3, [pc, #244]	; (26ea4 <nrfx_spim_init+0x20c>)
   26db0:	bf18      	it	ne
   26db2:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   26db6:	f046 0603 	orr.w	r6, r6, #3
    reg->PIN_CNF[pin_number] = cnf;
   26dba:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    if (!p_config->skip_psel_cfg)
   26dbe:	7d23      	ldrb	r3, [r4, #20]
   26dc0:	bb53      	cbnz	r3, 26e18 <nrfx_spim_init+0x180>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   26dc2:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   26dc4:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   26dc6:	2bff      	cmp	r3, #255	; 0xff
   26dc8:	bf18      	it	ne
   26dca:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   26dcc:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   26dce:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   26dd2:	bf08      	it	eq
   26dd4:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   26dd8:	2bff      	cmp	r3, #255	; 0xff
   26dda:	bf08      	it	eq
   26ddc:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
   26de0:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   26de4:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   26de8:	f898 3004 	ldrb.w	r3, [r8, #4]
   26dec:	b9a3      	cbnz	r3, 26e18 <nrfx_spim_init+0x180>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   26dee:	78e3      	ldrb	r3, [r4, #3]
   26df0:	2bff      	cmp	r3, #255	; 0xff
   26df2:	d041      	beq.n	26e78 <nrfx_spim_init+0x1e0>
   26df4:	7c62      	ldrb	r2, [r4, #17]
   26df6:	2a00      	cmp	r2, #0
   26df8:	d03e      	beq.n	26e78 <nrfx_spim_init+0x1e0>
                                    (p_config->ss_active_high == true
   26dfa:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   26dfc:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   26dfe:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   26e02:	f8c5 1568 	str.w	r1, [r5, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   26e06:	f8c5 2564 	str.w	r2, [r5, #1380]	; 0x564
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   26e0a:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   26e0c:	2bff      	cmp	r3, #255	; 0xff
   26e0e:	bf08      	it	eq
   26e10:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   26e14:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   26e18:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   26e1a:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   26e1e:	68a3      	ldr	r3, [r4, #8]
   26e20:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   26e24:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   26e26:	7b22      	ldrb	r2, [r4, #12]
   26e28:	3b00      	subs	r3, #0
   26e2a:	bf18      	it	ne
   26e2c:	2301      	movne	r3, #1
    switch (spi_mode)
   26e2e:	2a02      	cmp	r2, #2
   26e30:	d02c      	beq.n	26e8c <nrfx_spim_init+0x1f4>
   26e32:	2a03      	cmp	r2, #3
   26e34:	d02d      	beq.n	26e92 <nrfx_spim_init+0x1fa>
   26e36:	2a01      	cmp	r2, #1
   26e38:	d101      	bne.n	26e3e <nrfx_spim_init+0x1a6>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   26e3a:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   26e3e:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   26e42:	79a3      	ldrb	r3, [r4, #6]
   26e44:	f8c5 35c0 	str.w	r3, [r5, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   26e48:	2307      	movs	r3, #7
   26e4a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   26e4e:	683b      	ldr	r3, [r7, #0]
   26e50:	b12b      	cbz	r3, 26e5e <nrfx_spim_init+0x1c6>
   26e52:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   26e56:	f340 3007 	sbfx	r0, r0, #12, #8
   26e5a:	f7f7 fc57 	bl	1e70c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   26e5e:	2300      	movs	r3, #0
   26e60:	777b      	strb	r3, [r7, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   26e62:	4811      	ldr	r0, [pc, #68]	; (26ea8 <nrfx_spim_init+0x210>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   26e64:	2301      	movs	r3, #1
   26e66:	773b      	strb	r3, [r7, #28]
}
   26e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(pin_number);
   26e6c:	f7ff ff04 	bl	26c78 <nrf_gpio_pin_set>
   26e70:	e743      	b.n	26cfa <nrfx_spim_init+0x62>
   26e72:	f7ff ff01 	bl	26c78 <nrf_gpio_pin_set>
   26e76:	e77f      	b.n	26d78 <nrfx_spim_init+0xe0>
    p_reg->PSEL.CSN = pin;
   26e78:	f04f 33ff 	mov.w	r3, #4294967295
   26e7c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   26e80:	2300      	movs	r3, #0
   26e82:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   26e86:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
}
   26e8a:	e7be      	b.n	26e0a <nrfx_spim_init+0x172>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   26e8c:	f043 0304 	orr.w	r3, r3, #4
        break;
   26e90:	e7d5      	b.n	26e3e <nrfx_spim_init+0x1a6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   26e92:	f043 0306 	orr.w	r3, r3, #6
        break;
   26e96:	e7d2      	b.n	26e3e <nrfx_spim_init+0x1a6>
        return err_code;
   26e98:	4804      	ldr	r0, [pc, #16]	; (26eac <nrfx_spim_init+0x214>)
   26e9a:	e7e5      	b.n	26e68 <nrfx_spim_init+0x1d0>
        return err_code;
   26e9c:	4804      	ldr	r0, [pc, #16]	; (26eb0 <nrfx_spim_init+0x218>)
   26e9e:	e7e3      	b.n	26e68 <nrfx_spim_init+0x1d0>
   26ea0:	20002bc0 	.word	0x20002bc0
   26ea4:	50000300 	.word	0x50000300
   26ea8:	0bad0000 	.word	0x0bad0000
   26eac:	0bad0005 	.word	0x0bad0005
   26eb0:	0bad0003 	.word	0x0bad0003

00026eb4 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   26eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   26eb8:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   26eba:	4c26      	ldr	r4, [pc, #152]	; (26f54 <nrfx_spim_uninit+0xa0>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   26ebc:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   26ebe:	015e      	lsls	r6, r3, #5
   26ec0:	eb04 1843 	add.w	r8, r4, r3, lsl #5
   26ec4:	59a3      	ldr	r3, [r4, r6]
{
   26ec6:	4607      	mov	r7, r0
    if (p_cb->handler)
   26ec8:	b1cb      	cbz	r3, 26efe <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   26eca:	f345 3007 	sbfx	r0, r5, #12, #8
   26ece:	f7f7 fc2d 	bl	1e72c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   26ed2:	4b21      	ldr	r3, [pc, #132]	; (26f58 <nrfx_spim_uninit+0xa4>)
   26ed4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   26ed8:	f898 301d 	ldrb.w	r3, [r8, #29]
   26edc:	b17b      	cbz	r3, 26efe <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26ede:	2301      	movs	r3, #1
   26ee0:	616b      	str	r3, [r5, #20]
   26ee2:	f04f 0864 	mov.w	r8, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26ee6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   26eea:	b92b      	cbnz	r3, 26ef8 <nrfx_spim_uninit+0x44>
   26eec:	2001      	movs	r0, #1
   26eee:	f009 fe0a 	bl	30b06 <nrfx_busy_wait>
   26ef2:	f1b8 0801 	subs.w	r8, r8, #1
   26ef6:	d1f6      	bne.n	26ee6 <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
   26ef8:	19a3      	adds	r3, r4, r6
   26efa:	2200      	movs	r2, #0
   26efc:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   26efe:	2300      	movs	r3, #0
   26f00:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   26f04:	19a3      	adds	r3, r4, r6
   26f06:	7f9b      	ldrb	r3, [r3, #30]
   26f08:	07db      	lsls	r3, r3, #31
   26f0a:	d417      	bmi.n	26f3c <nrfx_spim_uninit+0x88>
    return p_reg->PSEL.SCK;
   26f0c:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   26f10:	f009 feba 	bl	30c88 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   26f14:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   26f18:	f009 feb6 	bl	30c88 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   26f1c:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   26f20:	f009 feb2 	bl	30c88 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   26f24:	793b      	ldrb	r3, [r7, #4]
   26f26:	b91b      	cbnz	r3, 26f30 <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
   26f28:	f8d5 056c 	ldr.w	r0, [r5, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   26f2c:	f009 feac 	bl	30c88 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   26f30:	19a3      	adds	r3, r4, r6
   26f32:	7fd8      	ldrb	r0, [r3, #31]
   26f34:	28ff      	cmp	r0, #255	; 0xff
   26f36:	d001      	beq.n	26f3c <nrfx_spim_uninit+0x88>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   26f38:	f7ff fe8e 	bl	26c58 <nrf_gpio_cfg_default>
        }
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_195)
    if (p_spim == NRF_SPIM3)
   26f3c:	4b07      	ldr	r3, [pc, #28]	; (26f5c <nrfx_spim_uninit+0xa8>)
   26f3e:	429d      	cmp	r5, r3
    {
        *(volatile uint32_t *)0x4002F004 = 1;
   26f40:	bf08      	it	eq
   26f42:	2201      	moveq	r2, #1

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   26f44:	4434      	add	r4, r6
        *(volatile uint32_t *)0x4002F004 = 1;
   26f46:	bf08      	it	eq
   26f48:	605a      	streq	r2, [r3, #4]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   26f4a:	2300      	movs	r3, #0
   26f4c:	7723      	strb	r3, [r4, #28]
}
   26f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f52:	bf00      	nop
   26f54:	20002bc0 	.word	0x20002bc0
   26f58:	00080152 	.word	0x00080152
   26f5c:	4002f000 	.word	0x4002f000

00026f60 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   26f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   26f64:	4d37      	ldr	r5, [pc, #220]	; (27044 <nrfx_spim_xfer+0xe4>)
   26f66:	7903      	ldrb	r3, [r0, #4]
   26f68:	eb05 1843 	add.w	r8, r5, r3, lsl #5
{
   26f6c:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   26f6e:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   26f72:	4682      	mov	sl, r0
   26f74:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   26f76:	ea4f 1943 	mov.w	r9, r3, lsl #5
   26f7a:	2a00      	cmp	r2, #0
   26f7c:	d160      	bne.n	27040 <nrfx_spim_xfer+0xe0>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   26f7e:	f855 2009 	ldr.w	r2, [r5, r9]
   26f82:	b12a      	cbz	r2, 26f90 <nrfx_spim_xfer+0x30>
   26f84:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   26f88:	bf04      	itt	eq
   26f8a:	2201      	moveq	r2, #1
   26f8c:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   26f90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   26f94:	eb05 0709 	add.w	r7, r5, r9
   26f98:	370c      	adds	r7, #12
   26f9a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   26f9e:	2101      	movs	r1, #1
   26fa0:	4640      	mov	r0, r8
   26fa2:	f009 fe76 	bl	30c92 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   26fa6:	6831      	ldr	r1, [r6, #0]
   26fa8:	b121      	cbz	r1, 26fb4 <nrfx_spim_xfer+0x54>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   26faa:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   26fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   26fb2:	d106      	bne.n	26fc2 <nrfx_spim_xfer+0x62>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   26fb4:	68b2      	ldr	r2, [r6, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   26fb6:	b152      	cbz	r2, 26fce <nrfx_spim_xfer+0x6e>
   26fb8:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   26fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   26fc0:	d005      	beq.n	26fce <nrfx_spim_xfer+0x6e>
        p_cb->transfer_in_progress = false;
   26fc2:	444d      	add	r5, r9
   26fc4:	2300      	movs	r3, #0
        return err_code;
   26fc6:	4820      	ldr	r0, [pc, #128]	; (27048 <nrfx_spim_xfer+0xe8>)
        p_cb->transfer_in_progress = false;
   26fc8:	776b      	strb	r3, [r5, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   26fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   26fce:	f8da 3000 	ldr.w	r3, [sl]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   26fd2:	6870      	ldr	r0, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26fd4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   26fd8:	68f1      	ldr	r1, [r6, #12]
    p_reg->TXD.MAXCNT = length;
   26fda:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   26fde:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26fe2:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   26fe4:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26fe8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   26fec:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   26ff0:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   26ff4:	bf18      	it	ne
   26ff6:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   26ff8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   26ffc:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   27000:	bf18      	it	ne
   27002:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   27004:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   27008:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2700c:	bf04      	itt	eq
   2700e:	2101      	moveq	r1, #1
   27010:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
   27012:	f855 1009 	ldr.w	r1, [r5, r9]
   27016:	b949      	cbnz	r1, 2702c <nrfx_spim_xfer+0xcc>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   27018:	b912      	cbnz	r2, 27020 <nrfx_spim_xfer+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2701a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   2701e:	e7fb      	b.n	27018 <nrfx_spim_xfer+0xb8>
        set_ss_pin_state(p_cb, false);
   27020:	2100      	movs	r1, #0
   27022:	4640      	mov	r0, r8
   27024:	f009 fe35 	bl	30c92 <set_ss_pin_state>
    return err_code;
   27028:	4808      	ldr	r0, [pc, #32]	; (2704c <nrfx_spim_xfer+0xec>)
}
   2702a:	e7ce      	b.n	26fca <nrfx_spim_xfer+0x6a>
    if (!enable)
   2702c:	f014 0f04 	tst.w	r4, #4
   27030:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
   27034:	bf14      	ite	ne
   27036:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   2703a:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   2703e:	e7f3      	b.n	27028 <nrfx_spim_xfer+0xc8>
        return err_code;
   27040:	4803      	ldr	r0, [pc, #12]	; (27050 <nrfx_spim_xfer+0xf0>)
   27042:	e7c2      	b.n	26fca <nrfx_spim_xfer+0x6a>
   27044:	20002bc0 	.word	0x20002bc0
   27048:	0bad000a 	.word	0x0bad000a
   2704c:	0bad0000 	.word	0x0bad0000
   27050:	0bad000b 	.word	0x0bad000b

00027054 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27054:	4b0c      	ldr	r3, [pc, #48]	; (27088 <nrfx_spim_3_irq_handler+0x34>)
   27056:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   2705a:	b570      	push	{r4, r5, r6, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2705c:	b192      	cbz	r2, 27084 <nrfx_spim_3_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
   2705e:	4c0b      	ldr	r4, [pc, #44]	; (2708c <nrfx_spim_3_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27060:	2500      	movs	r5, #0
   27062:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   27066:	4629      	mov	r1, r5
   27068:	4620      	mov	r0, r4
   2706a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   2706e:	f009 fe10 	bl	30c92 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   27072:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   27076:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   27078:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2707a:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   2707e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   27082:	4718      	bx	r3
}
   27084:	bd70      	pop	{r4, r5, r6, pc}
   27086:	bf00      	nop
   27088:	4002f000 	.word	0x4002f000
   2708c:	20002bc0 	.word	0x20002bc0

00027090 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   27090:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   27092:	4b34      	ldr	r3, [pc, #208]	; (27164 <twi_rx_start_transfer+0xd4>)
   27094:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27096:	2300      	movs	r3, #0
   27098:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   2709c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   270a0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   270a4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   270a8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   270ac:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   270b0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   270b4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   270b8:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   270ba:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   270be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   270c0:	2b01      	cmp	r3, #1
{
   270c2:	4604      	mov	r4, r0
   270c4:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   270c6:	d117      	bne.n	270f8 <twi_rx_start_transfer+0x68>
   270c8:	6a0b      	ldr	r3, [r1, #32]
   270ca:	065b      	lsls	r3, r3, #25
   270cc:	d414      	bmi.n	270f8 <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   270ce:	2302      	movs	r3, #2
   270d0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   270d4:	2301      	movs	r3, #1
   270d6:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   270d8:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   270dc:	2a02      	cmp	r2, #2
   270de:	bf18      	it	ne
   270e0:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   270e2:	682b      	ldr	r3, [r5, #0]
   270e4:	b193      	cbz	r3, 2710c <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   270e6:	f240 2386 	movw	r3, #646	; 0x286
   270ea:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   270ec:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   270ee:	481e      	ldr	r0, [pc, #120]	; (27168 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   270f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   270f4:	b003      	add	sp, #12
   270f6:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   270f8:	2301      	movs	r3, #1
   270fa:	e7e9      	b.n	270d0 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   270fc:	4629      	mov	r1, r5
   270fe:	4620      	mov	r0, r4
   27100:	f009 fdf4 	bl	30cec <twi_transfer>
        while ((hw_timeout > 0) &&
   27104:	b128      	cbz	r0, 27112 <twi_rx_start_transfer+0x82>
               hw_timeout--;
   27106:	9b01      	ldr	r3, [sp, #4]
   27108:	3b01      	subs	r3, #1
   2710a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   2710c:	9b01      	ldr	r3, [sp, #4]
   2710e:	2b00      	cmp	r3, #0
   27110:	dcf4      	bgt.n	270fc <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   27112:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   27116:	b95b      	cbnz	r3, 27130 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   27118:	4813      	ldr	r0, [pc, #76]	; (27168 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   2711a:	9b01      	ldr	r3, [sp, #4]
   2711c:	2b00      	cmp	r3, #0
   2711e:	dce9      	bgt.n	270f4 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   27120:	2300      	movs	r3, #0
   27122:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   27126:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   27128:	4810      	ldr	r0, [pc, #64]	; (2716c <twi_rx_start_transfer+0xdc>)
   2712a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   2712e:	e7e1      	b.n	270f4 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   27130:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   27134:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   27138:	b18b      	cbz	r3, 2715e <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   2713a:	4a0d      	ldr	r2, [pc, #52]	; (27170 <twi_rx_start_transfer+0xe0>)
   2713c:	480b      	ldr	r0, [pc, #44]	; (2716c <twi_rx_start_transfer+0xdc>)
   2713e:	f013 0f01 	tst.w	r3, #1
   27142:	bf18      	it	ne
   27144:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   27146:	f013 0f02 	tst.w	r3, #2
   2714a:	f102 0201 	add.w	r2, r2, #1
   2714e:	bf18      	it	ne
   27150:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   27152:	f013 0f04 	tst.w	r3, #4
   27156:	4b07      	ldr	r3, [pc, #28]	; (27174 <twi_rx_start_transfer+0xe4>)
   27158:	bf18      	it	ne
   2715a:	4618      	movne	r0, r3
   2715c:	e7dd      	b.n	2711a <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   2715e:	4803      	ldr	r0, [pc, #12]	; (2716c <twi_rx_start_transfer+0xdc>)
   27160:	e7db      	b.n	2711a <twi_rx_start_transfer+0x8a>
   27162:	bf00      	nop
   27164:	000186a0 	.word	0x000186a0
   27168:	0bad0000 	.word	0x0bad0000
   2716c:	0bad0001 	.word	0x0bad0001
   27170:	0bae0000 	.word	0x0bae0000
   27174:	0bae0002 	.word	0x0bae0002

00027178 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
   27178:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   2717c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2717e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   27180:	4b04      	ldr	r3, [pc, #16]	; (27194 <nrf_gpio_cfg_default+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
   27182:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   27186:	bf18      	it	ne
   27188:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2718c:	2102      	movs	r1, #2
   2718e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   27192:	4770      	bx	lr
   27194:	50000300 	.word	0x50000300

00027198 <twi_tx_start_transfer>:
{
   27198:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   2719a:	4b30      	ldr	r3, [pc, #192]	; (2725c <twi_tx_start_transfer+0xc4>)
   2719c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2719e:	2300      	movs	r3, #0
   271a0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   271a4:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   271a8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   271ac:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   271b0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   271b4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   271b8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   271bc:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    p_reg->SHORTS = mask;
   271c0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   271c4:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   271c6:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   271ca:	2301      	movs	r3, #1
   271cc:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   271ce:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   271d2:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   271d4:	429a      	cmp	r2, r3
   271d6:	bf18      	it	ne
   271d8:	6083      	strne	r3, [r0, #8]
{
   271da:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
   271dc:	f009 fd69 	bl	30cb2 <twi_send_byte>
    if (p_cb->handler)
   271e0:	682b      	ldr	r3, [r5, #0]
   271e2:	b183      	cbz	r3, 27206 <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   271e4:	f240 2386 	movw	r3, #646	; 0x286
   271e8:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   271ea:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   271ec:	481c      	ldr	r0, [pc, #112]	; (27260 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   271ee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   271f2:	b003      	add	sp, #12
   271f4:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   271f6:	4629      	mov	r1, r5
   271f8:	4620      	mov	r0, r4
   271fa:	f009 fd77 	bl	30cec <twi_transfer>
        while ((hw_timeout > 0) &&
   271fe:	b128      	cbz	r0, 2720c <twi_tx_start_transfer+0x74>
            hw_timeout--;
   27200:	9b01      	ldr	r3, [sp, #4]
   27202:	3b01      	subs	r3, #1
   27204:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   27206:	9b01      	ldr	r3, [sp, #4]
   27208:	2b00      	cmp	r3, #0
   2720a:	dcf4      	bgt.n	271f6 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   2720c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   27210:	b95b      	cbnz	r3, 2722a <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   27212:	4813      	ldr	r0, [pc, #76]	; (27260 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   27214:	9b01      	ldr	r3, [sp, #4]
   27216:	2b00      	cmp	r3, #0
   27218:	dceb      	bgt.n	271f2 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   2721a:	2300      	movs	r3, #0
   2721c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   27220:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   27222:	4810      	ldr	r0, [pc, #64]	; (27264 <twi_tx_start_transfer+0xcc>)
   27224:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   27228:	e7e3      	b.n	271f2 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   2722a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2722e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   27232:	b18b      	cbz	r3, 27258 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   27234:	4a0c      	ldr	r2, [pc, #48]	; (27268 <twi_tx_start_transfer+0xd0>)
   27236:	480b      	ldr	r0, [pc, #44]	; (27264 <twi_tx_start_transfer+0xcc>)
   27238:	f013 0f01 	tst.w	r3, #1
   2723c:	bf18      	it	ne
   2723e:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   27240:	f013 0f02 	tst.w	r3, #2
   27244:	f102 0201 	add.w	r2, r2, #1
   27248:	bf18      	it	ne
   2724a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   2724c:	f013 0f04 	tst.w	r3, #4
   27250:	4b06      	ldr	r3, [pc, #24]	; (2726c <twi_tx_start_transfer+0xd4>)
   27252:	bf18      	it	ne
   27254:	4618      	movne	r0, r3
   27256:	e7dd      	b.n	27214 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   27258:	4802      	ldr	r0, [pc, #8]	; (27264 <twi_tx_start_transfer+0xcc>)
   2725a:	e7db      	b.n	27214 <twi_tx_start_transfer+0x7c>
   2725c:	000186a0 	.word	0x000186a0
   27260:	0bad0000 	.word	0x0bad0000
   27264:	0bad0001 	.word	0x0bad0001
   27268:	0bae0000 	.word	0x0bae0000
   2726c:	0bae0002 	.word	0x0bae0002

00027270 <nrfx_twi_init>:
{
   27270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   27272:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   27274:	4d29      	ldr	r5, [pc, #164]	; (2731c <nrfx_twi_init+0xac>)
   27276:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   2727a:	fb0c fc07 	mul.w	ip, ip, r7
   2727e:	eb05 040c 	add.w	r4, r5, ip
   27282:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   27286:	2e00      	cmp	r6, #0
   27288:	d146      	bne.n	27318 <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   2728a:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   2728c:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2728e:	7b4b      	ldrb	r3, [r1, #13]
   27290:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   27294:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   27296:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
   27298:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   2729c:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
   272a0:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
   272a4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   272a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   272ac:	b9e3      	cbnz	r3, 272e8 <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
   272ae:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
   272b0:	4b1b      	ldr	r3, [pc, #108]	; (27320 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
   272b2:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   272b6:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   272b8:	2c01      	cmp	r4, #1
   272ba:	bf18      	it	ne
   272bc:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   272c0:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
   272c4:	bf08      	it	eq
   272c6:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
   272c8:	f240 6c0c 	movw	ip, #1548	; 0x60c
   272cc:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   272d0:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   272d2:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   272d6:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   272d8:	2c01      	cmp	r4, #1
   272da:	bf18      	it	ne
   272dc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   272e0:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
   272e4:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   272e8:	7bcb      	ldrb	r3, [r1, #15]
   272ea:	b92b      	cbnz	r3, 272f8 <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   272ec:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   272f0:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   272f4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   272f8:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   272fa:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   272fe:	b11a      	cbz	r2, 27308 <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   27300:	f340 3007 	sbfx	r0, r0, #12, #8
   27304:	f7f7 fa02 	bl	1e70c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   27308:	233c      	movs	r3, #60	; 0x3c
   2730a:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   2730e:	4805      	ldr	r0, [pc, #20]	; (27324 <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   27310:	2301      	movs	r3, #1
   27312:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   27316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   27318:	4803      	ldr	r0, [pc, #12]	; (27328 <nrfx_twi_init+0xb8>)
   2731a:	e7fc      	b.n	27316 <nrfx_twi_init+0xa6>
   2731c:	20002be0 	.word	0x20002be0
   27320:	50000300 	.word	0x50000300
   27324:	0bad0000 	.word	0x0bad0000
   27328:	0bad0005 	.word	0x0bad0005

0002732c <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   2732c:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2732e:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   27330:	2105      	movs	r1, #5
   27332:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   27336:	4a04      	ldr	r2, [pc, #16]	; (27348 <nrfx_twi_enable+0x1c>)
   27338:	213c      	movs	r1, #60	; 0x3c
   2733a:	fb01 2303 	mla	r3, r1, r3, r2
   2733e:	2202      	movs	r2, #2
   27340:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   27344:	4770      	bx	lr
   27346:	bf00      	nop
   27348:	20002be0 	.word	0x20002be0

0002734c <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   2734c:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   2734e:	490b      	ldr	r1, [pc, #44]	; (2737c <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27350:	7903      	ldrb	r3, [r0, #4]
   27352:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   27356:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   2735a:	f021 0103 	bic.w	r1, r1, #3
   2735e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   27362:	2100      	movs	r1, #0
   27364:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   27368:	4a05      	ldr	r2, [pc, #20]	; (27380 <nrfx_twi_disable+0x34>)
   2736a:	203c      	movs	r0, #60	; 0x3c
   2736c:	fb00 2303 	mla	r3, r0, r3, r2
   27370:	2201      	movs	r2, #1
   27372:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
   27376:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
   2737a:	4770      	bx	lr
   2737c:	00044286 	.word	0x00044286
   27380:	20002be0 	.word	0x20002be0

00027384 <nrfx_twi_uninit>:
{
   27384:	b570      	push	{r4, r5, r6, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27386:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->handler)
   27388:	4e13      	ldr	r6, [pc, #76]	; (273d8 <nrfx_twi_uninit+0x54>)
   2738a:	233c      	movs	r3, #60	; 0x3c
   2738c:	436b      	muls	r3, r5
{
   2738e:	4604      	mov	r4, r0
    if (p_cb->handler)
   27390:	58f3      	ldr	r3, [r6, r3]
   27392:	b123      	cbz	r3, 2739e <nrfx_twi_uninit+0x1a>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   27394:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twi));
   27396:	f340 3007 	sbfx	r0, r0, #12, #8
   2739a:	f7f7 f9c7 	bl	1e72c <arch_irq_disable>
    nrfx_twi_disable(p_instance);
   2739e:	4620      	mov	r0, r4
   273a0:	f7ff ffd4 	bl	2734c <nrfx_twi_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   273a4:	233c      	movs	r3, #60	; 0x3c
   273a6:	fb03 6305 	mla	r3, r3, r5, r6
   273aa:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   273ae:	b962      	cbnz	r2, 273ca <nrfx_twi_uninit+0x46>
   273b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   273b4:	b94b      	cbnz	r3, 273ca <nrfx_twi_uninit+0x46>
        nrf_gpio_cfg_default(nrf_twi_scl_pin_get(p_instance->p_twi));
   273b6:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SCL;
   273b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   273bc:	f7ff fedc 	bl	27178 <nrf_gpio_cfg_default>
        nrf_gpio_cfg_default(nrf_twi_sda_pin_get(p_instance->p_twi));
   273c0:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SDA;
   273c2:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
   273c6:	f7ff fed7 	bl	27178 <nrf_gpio_cfg_default>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   273ca:	233c      	movs	r3, #60	; 0x3c
   273cc:	fb03 6505 	mla	r5, r3, r5, r6
   273d0:	2300      	movs	r3, #0
   273d2:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   273d6:	bd70      	pop	{r4, r5, r6, pc}
   273d8:	20002be0 	.word	0x20002be0

000273dc <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   273dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   273e0:	4e32      	ldr	r6, [pc, #200]	; (274ac <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   273e2:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   273e6:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   273ea:	233c      	movs	r3, #60	; 0x3c
   273ec:	fb03 6308 	mla	r3, r3, r8, r6
{
   273f0:	460c      	mov	r4, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   273f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   273f6:	2b01      	cmp	r3, #1
{
   273f8:	4617      	mov	r7, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   273fa:	d104      	bne.n	27406 <nrfx_twi_xfer+0x2a>
   273fc:	780b      	ldrb	r3, [r1, #0]
   273fe:	2b01      	cmp	r3, #1
   27400:	d106      	bne.n	27410 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
   27402:	482b      	ldr	r0, [pc, #172]	; (274b0 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   27404:	e011      	b.n	2742a <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   27406:	2b02      	cmp	r3, #2
   27408:	d102      	bne.n	27410 <nrfx_twi_xfer+0x34>
   2740a:	780b      	ldrb	r3, [r1, #0]
   2740c:	2b01      	cmp	r3, #1
   2740e:	d1f8      	bne.n	27402 <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
   27410:	253c      	movs	r5, #60	; 0x3c
    p_reg->INTENCLR = mask;
   27412:	4b28      	ldr	r3, [pc, #160]	; (274b4 <nrfx_twi_xfer+0xd8>)
   27414:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   27418:	fb05 6508 	mla	r5, r5, r8, r6
   2741c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   27420:	b12b      	cbz	r3, 2742e <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   27422:	68ab      	ldr	r3, [r5, #8]
        return err_code;
   27424:	4824      	ldr	r0, [pc, #144]	; (274b8 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
   27426:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   2742a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   2742e:	f087 0304 	eor.w	r3, r7, #4
   27432:	f3c3 0380 	ubfx	r3, r3, #2, #1
   27436:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags       = flags;
   2743a:	622f      	str	r7, [r5, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   2743c:	46a6      	mov	lr, r4
   2743e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   27442:	f105 0c0c 	add.w	ip, r5, #12
   27446:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2744a:	f8de 3000 	ldr.w	r3, [lr]
   2744e:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
   27452:	6863      	ldr	r3, [r4, #4]
   27454:	62ab      	str	r3, [r5, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   27456:	68e3      	ldr	r3, [r4, #12]
   27458:	626b      	str	r3, [r5, #36]	; 0x24
    p_reg->ADDRESS = address;
   2745a:	7863      	ldrb	r3, [r4, #1]
   2745c:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   27460:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27462:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   27466:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27468:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   2746c:	d019      	beq.n	274a2 <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   2746e:	b9b3      	cbnz	r3, 2749e <nrfx_twi_xfer+0xc2>
   27470:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   27474:	233c      	movs	r3, #60	; 0x3c
   27476:	fb03 6308 	mla	r3, r3, r8, r6
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   2747a:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   2747c:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   27480:	4648      	mov	r0, r9
   27482:	f7ff fe89 	bl	27198 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   27486:	233c      	movs	r3, #60	; 0x3c
   27488:	fb03 f808 	mul.w	r8, r3, r8
   2748c:	eb06 0208 	add.w	r2, r6, r8
   27490:	f856 3008 	ldr.w	r3, [r6, r8]
   27494:	2b00      	cmp	r3, #0
   27496:	d1c8      	bne.n	2742a <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
   27498:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   2749c:	e7c5      	b.n	2742a <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   2749e:	2701      	movs	r7, #1
   274a0:	e7e8      	b.n	27474 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   274a2:	4651      	mov	r1, sl
   274a4:	4648      	mov	r0, r9
   274a6:	f7ff fdf3 	bl	27090 <twi_rx_start_transfer>
   274aa:	e7ec      	b.n	27486 <nrfx_twi_xfer+0xaa>
   274ac:	20002be0 	.word	0x20002be0
   274b0:	0bad0005 	.word	0x0bad0005
   274b4:	00044286 	.word	0x00044286
   274b8:	0bad000b 	.word	0x0bad000b

000274bc <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   274bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   274be:	4c29      	ldr	r4, [pc, #164]	; (27564 <nrfx_twi_0_irq_handler+0xa8>)
   274c0:	4829      	ldr	r0, [pc, #164]	; (27568 <nrfx_twi_0_irq_handler+0xac>)
{
   274c2:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   274c4:	4621      	mov	r1, r4
   274c6:	f009 fc11 	bl	30cec <twi_transfer>
   274ca:	46a4      	mov	ip, r4
   274cc:	b9d8      	cbnz	r0, 27506 <nrfx_twi_0_irq_handler+0x4a>
    if (!p_cb->error &&
   274ce:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
   274d2:	6a27      	ldr	r7, [r4, #32]
   274d4:	b9e6      	cbnz	r6, 27510 <nrfx_twi_0_irq_handler+0x54>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   274d6:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   274d8:	1e9a      	subs	r2, r3, #2
   274da:	2a01      	cmp	r2, #1
   274dc:	d818      	bhi.n	27510 <nrfx_twi_0_irq_handler+0x54>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   274de:	6a61      	ldr	r1, [r4, #36]	; 0x24
   274e0:	69a2      	ldr	r2, [r4, #24]
   274e2:	4291      	cmp	r1, r2
   274e4:	d114      	bne.n	27510 <nrfx_twi_0_irq_handler+0x54>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   274e6:	69e2      	ldr	r2, [r4, #28]
   274e8:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   274ea:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   274ee:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   274f0:	481d      	ldr	r0, [pc, #116]	; (27568 <nrfx_twi_0_irq_handler+0xac>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   274f2:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   274f4:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   274f6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   274fa:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   274fe:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   27500:	d103      	bne.n	2750a <nrfx_twi_0_irq_handler+0x4e>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   27502:	f7ff fe49 	bl	27198 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   27506:	b007      	add	sp, #28
   27508:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   2750a:	f7ff fdc1 	bl	27090 <twi_rx_start_transfer>
   2750e:	e7fa      	b.n	27506 <nrfx_twi_0_irq_handler+0x4a>
        event.xfer_desc = p_cb->xfer_desc;
   27510:	4d16      	ldr	r5, [pc, #88]	; (2756c <nrfx_twi_0_irq_handler+0xb0>)
   27512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27514:	ac01      	add	r4, sp, #4
   27516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27518:	682b      	ldr	r3, [r5, #0]
   2751a:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
   2751c:	b1f6      	cbz	r6, 2755c <nrfx_twi_0_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
   2751e:	4a12      	ldr	r2, [pc, #72]	; (27568 <nrfx_twi_0_irq_handler+0xac>)
   27520:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   27524:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   27528:	0798      	lsls	r0, r3, #30
   2752a:	d50e      	bpl.n	2754a <nrfx_twi_0_irq_handler+0x8e>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   2752c:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   2752e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   27532:	2300      	movs	r3, #0
   27534:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   27538:	077b      	lsls	r3, r7, #29
   2753a:	d501      	bpl.n	27540 <nrfx_twi_0_irq_handler+0x84>
   2753c:	2e00      	cmp	r6, #0
   2753e:	d0e2      	beq.n	27506 <nrfx_twi_0_irq_handler+0x4a>
            p_cb->handler(&event, p_cb->p_context);
   27540:	e9dc 3100 	ldrd	r3, r1, [ip]
   27544:	4668      	mov	r0, sp
   27546:	4798      	blx	r3
}
   27548:	e7dd      	b.n	27506 <nrfx_twi_0_irq_handler+0x4a>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   2754a:	0759      	lsls	r1, r3, #29
   2754c:	d501      	bpl.n	27552 <nrfx_twi_0_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   2754e:	2302      	movs	r3, #2
   27550:	e7ed      	b.n	2752e <nrfx_twi_0_irq_handler+0x72>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   27552:	07da      	lsls	r2, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   27554:	bf4c      	ite	mi
   27556:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   27558:	2304      	movpl	r3, #4
   2755a:	e7e8      	b.n	2752e <nrfx_twi_0_irq_handler+0x72>
            event.type = NRFX_TWI_EVT_DONE;
   2755c:	f88d 6000 	strb.w	r6, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   27560:	e7e7      	b.n	27532 <nrfx_twi_0_irq_handler+0x76>
   27562:	bf00      	nop
   27564:	20002be0 	.word	0x20002be0
   27568:	40003000 	.word	0x40003000
   2756c:	20002bec 	.word	0x20002bec

00027570 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   27570:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   27572:	4b12      	ldr	r3, [pc, #72]	; (275bc <nrfx_wdt_init+0x4c>)
{
   27574:	4615      	mov	r5, r2
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27576:	7902      	ldrb	r2, [r0, #4]
    p_cb->wdt_event_handler = wdt_event_handler;
   27578:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
   2757c:	6065      	str	r5, [r4, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   2757e:	f813 4032 	ldrb.w	r4, [r3, r2, lsl #3]
   27582:	b9cc      	cbnz	r4, 275b8 <nrfx_wdt_init+0x48>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   27584:	2601      	movs	r6, #1
   27586:	f803 6032 	strb.w	r6, [r3, r2, lsl #3]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   2758a:	6804      	ldr	r4, [r0, #0]
    p_reg->CONFIG = behaviour;
   2758c:	780b      	ldrb	r3, [r1, #0]

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   2758e:	6849      	ldr	r1, [r1, #4]
   27590:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
   27594:	03c8      	lsls	r0, r1, #15
   27596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2759a:	2300      	movs	r3, #0
   2759c:	0c49      	lsrs	r1, r1, #17
   2759e:	f7e5 faed 	bl	cb7c <__aeabi_uldivmod>
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   275a2:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    NRFX_ASSERT(ticks <= UINT32_MAX);

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   275a6:	b12d      	cbz	r5, 275b4 <nrfx_wdt_init+0x44>
    p_reg->INTENSET = mask;
   275a8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   275ac:	f344 3007 	sbfx	r0, r4, #12, #8
   275b0:	f7f7 f8ac 	bl	1e70c <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   275b4:	4802      	ldr	r0, [pc, #8]	; (275c0 <nrfx_wdt_init+0x50>)
   275b6:	e000      	b.n	275ba <nrfx_wdt_init+0x4a>
        return err_code;
   275b8:	4802      	ldr	r0, [pc, #8]	; (275c4 <nrfx_wdt_init+0x54>)
}
   275ba:	bd70      	pop	{r4, r5, r6, pc}
   275bc:	20002c1c 	.word	0x20002c1c
   275c0:	0bad0000 	.word	0x0bad0000
   275c4:	0bad0005 	.word	0x0bad0005

000275c8 <nrfx_wdt_enable>:
void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   275c8:	6803      	ldr	r3, [r0, #0]
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   275ca:	7902      	ldrb	r2, [r0, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   275cc:	2101      	movs	r1, #1
   275ce:	6019      	str	r1, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   275d0:	4b02      	ldr	r3, [pc, #8]	; (275dc <nrfx_wdt_enable+0x14>)
   275d2:	2102      	movs	r1, #2
   275d4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   275d8:	4770      	bx	lr
   275da:	bf00      	nop
   275dc:	20002c1c 	.word	0x20002c1c

000275e0 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   275e0:	b510      	push	{r4, lr}
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   275e2:	7902      	ldrb	r2, [r0, #4]
	__asm__ volatile(
   275e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   275e8:	f3ef 8411 	mrs	r4, BASEPRI
   275ec:	f383 8812 	msr	BASEPRI_MAX, r3
   275f0:	f3bf 8f6f 	isb	sy

    NRFX_ASSERT(p_channel_id);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   275f4:	4b0c      	ldr	r3, [pc, #48]	; (27628 <nrfx_wdt_channel_alloc+0x48>)
   275f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   275fa:	785a      	ldrb	r2, [r3, #1]
   275fc:	2a07      	cmp	r2, #7
   275fe:	d810      	bhi.n	27622 <nrfx_wdt_channel_alloc+0x42>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   27600:	700a      	strb	r2, [r1, #0]
        p_cb->alloc_index++;
   27602:	1c51      	adds	r1, r2, #1
   27604:	7059      	strb	r1, [r3, #1]
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   27606:	6801      	ldr	r1, [r0, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   27608:	2301      	movs	r3, #1
   2760a:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
   2760e:	4093      	lsls	r3, r2
   27610:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   27612:	4806      	ldr	r0, [pc, #24]	; (2762c <nrfx_wdt_channel_alloc+0x4c>)
   27614:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   27618:	f384 8811 	msr	BASEPRI, r4
   2761c:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   27620:	bd10      	pop	{r4, pc}
        result = NRFX_ERROR_NO_MEM;
   27622:	4803      	ldr	r0, [pc, #12]	; (27630 <nrfx_wdt_channel_alloc+0x50>)
   27624:	e7f8      	b.n	27618 <nrfx_wdt_channel_alloc+0x38>
   27626:	bf00      	nop
   27628:	20002c1c 	.word	0x20002c1c
   2762c:	0bad0000 	.word	0x0bad0000
   27630:	0bad0002 	.word	0x0bad0002

00027634 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   27634:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   27636:	4a03      	ldr	r2, [pc, #12]	; (27644 <nrfx_wdt_channel_feed+0x10>)
   27638:	f501 71c0 	add.w	r1, r1, #384	; 0x180
   2763c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   27640:	4770      	bx	lr
   27642:	bf00      	nop
   27644:	6e524635 	.word	0x6e524635

00027648 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   27648:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2764a:	4c05      	ldr	r4, [pc, #20]	; (27660 <nrfx_wdt_0_irq_handler+0x18>)
   2764c:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   2764e:	b12b      	cbz	r3, 2765c <nrfx_wdt_0_irq_handler+0x14>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   27650:	4b04      	ldr	r3, [pc, #16]	; (27664 <nrfx_wdt_0_irq_handler+0x1c>)
   27652:	685b      	ldr	r3, [r3, #4]
   27654:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27656:	2300      	movs	r3, #0
   27658:	6023      	str	r3, [r4, #0]
   2765a:	6823      	ldr	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   2765c:	bd10      	pop	{r4, pc}
   2765e:	bf00      	nop
   27660:	40010100 	.word	0x40010100
   27664:	20002c1c 	.word	0x20002c1c

00027668 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   27668:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2766a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2766e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   27670:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   27672:	6002      	str	r2, [r0, #0]
}
   27674:	4802      	ldr	r0, [pc, #8]	; (27680 <nrf_gpio_pin_port_decode+0x18>)
   27676:	bf18      	it	ne
   27678:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   2767c:	4770      	bx	lr
   2767e:	bf00      	nop
   27680:	50000300 	.word	0x50000300

00027684 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   27684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27686:	460c      	mov	r4, r1
   27688:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   2768a:	f009 fbbb 	bl	30e04 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   2768e:	4608      	mov	r0, r1
   27690:	f009 fbb8 	bl	30e04 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27694:	a801      	add	r0, sp, #4
   27696:	9601      	str	r6, [sp, #4]
   27698:	f7ff ffe6 	bl	27668 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2769c:	9b01      	ldr	r3, [sp, #4]
   2769e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   276a2:	f240 610d 	movw	r1, #1549	; 0x60d
   276a6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   276aa:	a801      	add	r0, sp, #4
   276ac:	9401      	str	r4, [sp, #4]
   276ae:	f7ff ffdb 	bl	27668 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   276b2:	9b01      	ldr	r3, [sp, #4]
   276b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   276b8:	2509      	movs	r5, #9
   276ba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   276be:	2004      	movs	r0, #4
   276c0:	f009 fa21 	bl	30b06 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   276c4:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   276c6:	a801      	add	r0, sp, #4
   276c8:	9401      	str	r4, [sp, #4]
   276ca:	f7ff ffcd 	bl	27668 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   276ce:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   276d0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   276d4:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   276d6:	07db      	lsls	r3, r3, #31
   276d8:	d415      	bmi.n	27706 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   276da:	a801      	add	r0, sp, #4
   276dc:	9601      	str	r6, [sp, #4]
   276de:	f7ff ffc3 	bl	27668 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   276e2:	9b01      	ldr	r3, [sp, #4]
   276e4:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   276e8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   276ec:	2004      	movs	r0, #4
   276ee:	f009 fa0a 	bl	30b06 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   276f2:	4630      	mov	r0, r6
   276f4:	f009 fb86 	bl	30e04 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   276f8:	3d01      	subs	r5, #1
   276fa:	2004      	movs	r0, #4
   276fc:	f009 fa03 	bl	30b06 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   27700:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   27704:	d1df      	bne.n	276c6 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27706:	a801      	add	r0, sp, #4
   27708:	9401      	str	r4, [sp, #4]
   2770a:	f7ff ffad 	bl	27668 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2770e:	9a01      	ldr	r2, [sp, #4]
   27710:	2301      	movs	r3, #1
   27712:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   27714:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   27718:	2004      	movs	r0, #4
   2771a:	f009 f9f4 	bl	30b06 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   2771e:	4620      	mov	r0, r4
   27720:	f009 fb70 	bl	30e04 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   27724:	2004      	movs	r0, #4
   27726:	f009 f9ee 	bl	30b06 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2772a:	a801      	add	r0, sp, #4
   2772c:	9401      	str	r4, [sp, #4]
   2772e:	f7ff ff9b 	bl	27668 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   27732:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   27734:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   27738:	4803      	ldr	r0, [pc, #12]	; (27748 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2773a:	40d3      	lsrs	r3, r2
   2773c:	f003 0301 	and.w	r3, r3, #1
   27740:	1ac0      	subs	r0, r0, r3
   27742:	b003      	add	sp, #12
   27744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27746:	bf00      	nop
   27748:	0bad0001 	.word	0x0bad0001

0002774c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   2774c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2774e:	4c14      	ldr	r4, [pc, #80]	; (277a0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   27750:	4a14      	ldr	r2, [pc, #80]	; (277a4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   27752:	4915      	ldr	r1, [pc, #84]	; (277a8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   27754:	2303      	movs	r3, #3
   27756:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   27758:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2775a:	4b14      	ldr	r3, [pc, #80]	; (277ac <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   2775c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2775e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   27760:	f44f 6380 	mov.w	r3, #1024	; 0x400
   27764:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   27766:	2300      	movs	r3, #0
   27768:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2776a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2776c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   2776e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   27770:	4a0f      	ldr	r2, [pc, #60]	; (277b0 <_DoInit+0x64>)
   27772:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   27774:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   27776:	2210      	movs	r2, #16
   27778:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2777a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2777c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2777e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   27780:	f005 fa4e 	bl	2cc20 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   27784:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   27788:	490a      	ldr	r1, [pc, #40]	; (277b4 <_DoInit+0x68>)
   2778a:	4620      	mov	r0, r4
   2778c:	f005 fa48 	bl	2cc20 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   27790:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   27794:	2320      	movs	r3, #32
   27796:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   27798:	f3bf 8f5f 	dmb	sy
}
   2779c:	bd10      	pop	{r4, pc}
   2779e:	bf00      	nop
   277a0:	20002c24 	.word	0x20002c24
   277a4:	00033352 	.word	0x00033352
   277a8:	0003335b 	.word	0x0003335b
   277ac:	20003dce 	.word	0x20003dce
   277b0:	20003dbe 	.word	0x20003dbe
   277b4:	0003335f 	.word	0x0003335f

000277b8 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   277b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   277ba:	b189      	cbz	r1, 277e0 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   277bc:	6804      	ldr	r4, [r0, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   277be:	6824      	ldr	r4, [r4, #0]
   277c0:	6964      	ldr	r4, [r4, #20]
   277c2:	e9cd 3400 	strd	r3, r4, [sp]
   277c6:	f10d 030f 	add.w	r3, sp, #15
   277ca:	f009 fd09 	bl	311e0 <iterate_string_chunks>
    return err ? err :
   277ce:	b928      	cbnz	r0, 277dc <_cbor_value_copy_string+0x24>
   277d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   277d4:	2b00      	cmp	r3, #0
   277d6:	bf08      	it	eq
   277d8:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
                 copied_all ? CborNoError : CborErrorOutOfMemory;
}
   277dc:	b004      	add	sp, #16
   277de:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   277e0:	4c00      	ldr	r4, [pc, #0]	; (277e4 <_cbor_value_copy_string+0x2c>)
   277e2:	e7ee      	b.n	277c2 <_cbor_value_copy_string+0xa>
   277e4:	00030fe1 	.word	0x00030fe1

000277e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   277e8:	4b0e      	ldr	r3, [pc, #56]	; (27824 <z_sys_init_run_level+0x3c>)
{
   277ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   277ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   277f0:	3001      	adds	r0, #1
   277f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   277f6:	42a6      	cmp	r6, r4
   277f8:	d800      	bhi.n	277fc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   277fa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   277fc:	e9d4 3500 	ldrd	r3, r5, [r4]
   27800:	4628      	mov	r0, r5
   27802:	4798      	blx	r3
		if (dev != NULL) {
   27804:	b165      	cbz	r5, 27820 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   27806:	68eb      	ldr	r3, [r5, #12]
   27808:	b130      	cbz	r0, 27818 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2780a:	2800      	cmp	r0, #0
   2780c:	bfb8      	it	lt
   2780e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   27810:	28ff      	cmp	r0, #255	; 0xff
   27812:	bfa8      	it	ge
   27814:	20ff      	movge	r0, #255	; 0xff
   27816:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   27818:	785a      	ldrb	r2, [r3, #1]
   2781a:	f042 0201 	orr.w	r2, r2, #1
   2781e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   27820:	3408      	adds	r4, #8
   27822:	e7e8      	b.n	277f6 <z_sys_init_run_level+0xe>
   27824:	00032d64 	.word	0x00032d64

00027828 <z_device_get_all_static>:
#include <syscalls/device_usable_check_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   27828:	4a03      	ldr	r2, [pc, #12]	; (27838 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   2782a:	4b04      	ldr	r3, [pc, #16]	; (2783c <z_device_get_all_static+0x14>)
	*devices = __device_start;
   2782c:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   2782e:	1a9b      	subs	r3, r3, r2
}
   27830:	4803      	ldr	r0, [pc, #12]	; (27840 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   27832:	109b      	asrs	r3, r3, #2
}
   27834:	4358      	muls	r0, r3
   27836:	4770      	bx	lr
   27838:	00032144 	.word	0x00032144
   2783c:	000322b0 	.word	0x000322b0
   27840:	b6db6db7 	.word	0xb6db6db7

00027844 <z_impl_device_get_binding>:
{
   27844:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   27846:	4605      	mov	r5, r0
   27848:	b910      	cbnz	r0, 27850 <z_impl_device_get_binding+0xc>
		return NULL;
   2784a:	2400      	movs	r4, #0
}
   2784c:	4620      	mov	r0, r4
   2784e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   27850:	7803      	ldrb	r3, [r0, #0]
   27852:	2b00      	cmp	r3, #0
   27854:	d0f9      	beq.n	2784a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   27856:	4a0f      	ldr	r2, [pc, #60]	; (27894 <z_impl_device_get_binding+0x50>)
   27858:	4c0f      	ldr	r4, [pc, #60]	; (27898 <z_impl_device_get_binding+0x54>)
   2785a:	4616      	mov	r6, r2
   2785c:	4294      	cmp	r4, r2
   2785e:	d108      	bne.n	27872 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   27860:	4c0d      	ldr	r4, [pc, #52]	; (27898 <z_impl_device_get_binding+0x54>)
   27862:	42b4      	cmp	r4, r6
   27864:	d0f1      	beq.n	2784a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   27866:	4620      	mov	r0, r4
   27868:	f009 fe38 	bl	314dc <z_device_ready>
   2786c:	b950      	cbnz	r0, 27884 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   2786e:	341c      	adds	r4, #28
   27870:	e7f7      	b.n	27862 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   27872:	4620      	mov	r0, r4
   27874:	f009 fe32 	bl	314dc <z_device_ready>
   27878:	b110      	cbz	r0, 27880 <z_impl_device_get_binding+0x3c>
   2787a:	6823      	ldr	r3, [r4, #0]
   2787c:	42ab      	cmp	r3, r5
   2787e:	d0e5      	beq.n	2784c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   27880:	341c      	adds	r4, #28
   27882:	e7eb      	b.n	2785c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   27884:	6821      	ldr	r1, [r4, #0]
   27886:	4628      	mov	r0, r5
   27888:	f005 f9e4 	bl	2cc54 <strcmp>
   2788c:	2800      	cmp	r0, #0
   2788e:	d1ee      	bne.n	2786e <z_impl_device_get_binding+0x2a>
   27890:	e7dc      	b.n	2784c <z_impl_device_get_binding+0x8>
   27892:	bf00      	nop
   27894:	000322b0 	.word	0x000322b0
   27898:	00032144 	.word	0x00032144

0002789c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   2789c:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   2789e:	2300      	movs	r3, #0
{
   278a0:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   278a2:	2201      	movs	r2, #1
   278a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   278a8:	220f      	movs	r2, #15
   278aa:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   278ae:	4c0d      	ldr	r4, [pc, #52]	; (278e4 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   278b0:	4a0d      	ldr	r2, [pc, #52]	; (278e8 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   278b2:	9301      	str	r3, [sp, #4]
   278b4:	490d      	ldr	r1, [pc, #52]	; (278ec <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   278b6:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   278b8:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   278bc:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   278c0:	f44f 75b0 	mov.w	r5, #352	; 0x160
   278c4:	9300      	str	r3, [sp, #0]
   278c6:	fb05 1100 	mla	r1, r5, r0, r1
   278ca:	4b09      	ldr	r3, [pc, #36]	; (278f0 <init_idle_thread+0x54>)
   278cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   278d0:	4620      	mov	r0, r4
   278d2:	f000 f90b 	bl	27aec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   278d6:	7b63      	ldrb	r3, [r4, #13]
   278d8:	f023 0304 	bic.w	r3, r3, #4
   278dc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   278de:	b007      	add	sp, #28
   278e0:	bd30      	pop	{r4, r5, pc}
   278e2:	bf00      	nop
   278e4:	200020b8 	.word	0x200020b8
   278e8:	20002ccc 	.word	0x20002ccc
   278ec:	20006380 	.word	0x20006380
   278f0:	00027c65 	.word	0x00027c65

000278f4 <bg_thread_main>:
{
   278f4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   278f6:	4b0a      	ldr	r3, [pc, #40]	; (27920 <bg_thread_main+0x2c>)
   278f8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   278fa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   278fc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   278fe:	f7ff ff73 	bl	277e8 <z_sys_init_run_level>
	boot_banner();
   27902:	f00a fbb3 	bl	3206c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   27906:	2003      	movs	r0, #3
   27908:	f7ff ff6e 	bl	277e8 <z_sys_init_run_level>
	z_init_static_threads();
   2790c:	f000 f94c 	bl	27ba8 <z_init_static_threads>
	main();
   27910:	f00a fbaa 	bl	32068 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   27914:	4a03      	ldr	r2, [pc, #12]	; (27924 <bg_thread_main+0x30>)
   27916:	7b13      	ldrb	r3, [r2, #12]
   27918:	f023 0301 	bic.w	r3, r3, #1
   2791c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2791e:	bd08      	pop	{r3, pc}
   27920:	200041ce 	.word	0x200041ce
   27924:	20002138 	.word	0x20002138

00027928 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   27928:	4802      	ldr	r0, [pc, #8]	; (27934 <z_bss_zero+0xc>)
   2792a:	4a03      	ldr	r2, [pc, #12]	; (27938 <z_bss_zero+0x10>)
   2792c:	2100      	movs	r1, #0
   2792e:	1a12      	subs	r2, r2, r0
   27930:	f005 b9ce 	b.w	2ccd0 <memset>
   27934:	20000e00 	.word	0x20000e00
   27938:	2000438c 	.word	0x2000438c

0002793c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2793c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2793e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 27a1c <z_cstart+0xe0>
   27942:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   27944:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   27948:	4d2e      	ldr	r5, [pc, #184]	; (27a04 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   2794a:	4e2f      	ldr	r6, [pc, #188]	; (27a08 <z_cstart+0xcc>)
   2794c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2794e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 27a20 <z_cstart+0xe4>
   27952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   27956:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27958:	23e0      	movs	r3, #224	; 0xe0
   2795a:	2400      	movs	r4, #0
   2795c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   27960:	2320      	movs	r3, #32
   27962:	77eb      	strb	r3, [r5, #31]
   27964:	762c      	strb	r4, [r5, #24]
   27966:	766c      	strb	r4, [r5, #25]
   27968:	76ac      	strb	r4, [r5, #26]
   2796a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2796e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27970:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   27974:	626b      	str	r3, [r5, #36]	; 0x24
   27976:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2797a:	f7f7 f8f9 	bl	1eb70 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2797e:	f7f6 fea7 	bl	1e6d0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   27982:	f04f 33ff 	mov.w	r3, #4294967295
   27986:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   27988:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2798a:	f7f7 fa1b 	bl	1edc4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2798e:	f7f7 f98b 	bl	1eca8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   27992:	f240 1301 	movw	r3, #257	; 0x101
   27996:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2799a:	ab06      	add	r3, sp, #24
   2799c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   2799e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   279a2:	f009 fd9a 	bl	314da <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   279a6:	4620      	mov	r0, r4
   279a8:	f7ff ff1e 	bl	277e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   279ac:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   279ae:	4d17      	ldr	r5, [pc, #92]	; (27a0c <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   279b0:	f7ff ff1a 	bl	277e8 <z_sys_init_run_level>
	z_sched_init();
   279b4:	f000 fef0 	bl	28798 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   279b8:	4b15      	ldr	r3, [pc, #84]	; (27a10 <z_cstart+0xd4>)
   279ba:	9305      	str	r3, [sp, #20]
   279bc:	2301      	movs	r3, #1
   279be:	4915      	ldr	r1, [pc, #84]	; (27a14 <z_cstart+0xd8>)
   279c0:	9400      	str	r4, [sp, #0]
   279c2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   279c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   279ca:	464b      	mov	r3, r9
   279cc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   279d0:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   279d2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   279d4:	f000 f88a 	bl	27aec <z_setup_new_thread>
   279d8:	7b6a      	ldrb	r2, [r5, #13]
   279da:	f022 0204 	bic.w	r2, r2, #4
   279de:	736a      	strb	r2, [r5, #13]
   279e0:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   279e2:	4628      	mov	r0, r5
   279e4:	f00a f87d 	bl	31ae2 <z_ready_thread>
		init_idle_thread(i);
   279e8:	4620      	mov	r0, r4
   279ea:	f7ff ff57 	bl	2789c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   279ee:	4b0a      	ldr	r3, [pc, #40]	; (27a18 <z_cstart+0xdc>)
   279f0:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   279f2:	464a      	mov	r2, r9
   279f4:	4639      	mov	r1, r7
   279f6:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   279f8:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   279fa:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   279fe:	f7f6 ff89 	bl	1e914 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   27a02:	bf00      	nop
   27a04:	e000ed00 	.word	0xe000ed00
   27a08:	20002ccc 	.word	0x20002ccc
   27a0c:	20002138 	.word	0x20002138
   27a10:	00033366 	.word	0x00033366
   27a14:	20005b60 	.word	0x20005b60
   27a18:	200020b8 	.word	0x200020b8
   27a1c:	20006d00 	.word	0x20006d00
   27a20:	000278f5 	.word	0x000278f5

00027a24 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   27a24:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   27a26:	4c06      	ldr	r4, [pc, #24]	; (27a40 <statics_init+0x1c>)
   27a28:	4d06      	ldr	r5, [pc, #24]	; (27a44 <statics_init+0x20>)
   27a2a:	42ac      	cmp	r4, r5
   27a2c:	d301      	bcc.n	27a32 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   27a2e:	2000      	movs	r0, #0
   27a30:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   27a32:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   27a36:	4620      	mov	r0, r4
   27a38:	f009 fd75 	bl	31526 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   27a3c:	3414      	adds	r4, #20
   27a3e:	e7f4      	b.n	27a2a <statics_init+0x6>
   27a40:	20000bf4 	.word	0x20000bf4
   27a44:	20000c08 	.word	0x20000c08

00027a48 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   27a48:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   27a4a:	4b0e      	ldr	r3, [pc, #56]	; (27a84 <init_mem_slab_module+0x3c>)
   27a4c:	4c0e      	ldr	r4, [pc, #56]	; (27a88 <init_mem_slab_module+0x40>)
   27a4e:	42a3      	cmp	r3, r4
   27a50:	d301      	bcc.n	27a56 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   27a52:	2000      	movs	r0, #0
	return rc;
}
   27a54:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27a56:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   27a5a:	ea41 0200 	orr.w	r2, r1, r0
   27a5e:	f012 0203 	ands.w	r2, r2, #3
   27a62:	d10b      	bne.n	27a7c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   27a64:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   27a66:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   27a68:	42aa      	cmp	r2, r5
   27a6a:	d101      	bne.n	27a70 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   27a6c:	331c      	adds	r3, #28
   27a6e:	e7ee      	b.n	27a4e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   27a70:	695e      	ldr	r6, [r3, #20]
   27a72:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   27a74:	3201      	adds	r2, #1
		slab->free_list = p;
   27a76:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   27a78:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   27a7a:	e7f5      	b.n	27a68 <init_mem_slab_module+0x20>
		return -EINVAL;
   27a7c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   27a80:	e7e8      	b.n	27a54 <init_mem_slab_module+0xc>
   27a82:	bf00      	nop
   27a84:	20000ba0 	.word	0x20000ba0
   27a88:	20000bf4 	.word	0x20000bf4

00027a8c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   27a8c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   27a8e:	460c      	mov	r4, r1
   27a90:	4616      	mov	r6, r2
   27a92:	461f      	mov	r7, r3
	__asm__ volatile(
   27a94:	f04f 0340 	mov.w	r3, #64	; 0x40
   27a98:	f3ef 8111 	mrs	r1, BASEPRI
   27a9c:	f383 8812 	msr	BASEPRI_MAX, r3
   27aa0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   27aa4:	6943      	ldr	r3, [r0, #20]
   27aa6:	b15b      	cbz	r3, 27ac0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   27aa8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   27aaa:	681b      	ldr	r3, [r3, #0]
   27aac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   27aae:	6983      	ldr	r3, [r0, #24]
   27ab0:	3301      	adds	r3, #1
   27ab2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   27ab4:	2000      	movs	r0, #0
	__asm__ volatile(
   27ab6:	f381 8811 	msr	BASEPRI, r1
   27aba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   27abe:	e011      	b.n	27ae4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   27ac0:	ea56 0207 	orrs.w	r2, r6, r7
   27ac4:	d103      	bne.n	27ace <k_mem_slab_alloc+0x42>
		*mem = NULL;
   27ac6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   27ac8:	f06f 000b 	mvn.w	r0, #11
   27acc:	e7f3      	b.n	27ab6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   27ace:	4602      	mov	r2, r0
   27ad0:	e9cd 6700 	strd	r6, r7, [sp]
   27ad4:	3008      	adds	r0, #8
   27ad6:	f000 fdb1 	bl	2863c <z_pend_curr>
		if (result == 0) {
   27ada:	b918      	cbnz	r0, 27ae4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   27adc:	4b02      	ldr	r3, [pc, #8]	; (27ae8 <k_mem_slab_alloc+0x5c>)
   27ade:	689b      	ldr	r3, [r3, #8]
   27ae0:	695b      	ldr	r3, [r3, #20]
   27ae2:	6023      	str	r3, [r4, #0]
}
   27ae4:	b002      	add	sp, #8
   27ae6:	bdd0      	pop	{r4, r6, r7, pc}
   27ae8:	20002ccc 	.word	0x20002ccc

00027aec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   27aec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   27af0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   27af2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   27af4:	2604      	movs	r6, #4
   27af6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   27af8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   27afa:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   27afc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   27b00:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   27b02:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   27b04:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   27b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   27b0a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   27b0c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   27b10:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   27b12:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   27b16:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   27b1a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   27b1c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   27b1e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   27b20:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   27b24:	9202      	str	r2, [sp, #8]
   27b26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   27b28:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   27b2a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   27b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27b2e:	9200      	str	r2, [sp, #0]
   27b30:	4642      	mov	r2, r8
{
   27b32:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   27b34:	f7f6 feb8 	bl	1e8a8 <arch_new_thread>
	if (!_current) {
   27b38:	4b04      	ldr	r3, [pc, #16]	; (27b4c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   27b3a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   27b3c:	689b      	ldr	r3, [r3, #8]
   27b3e:	b103      	cbz	r3, 27b42 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   27b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   27b42:	6763      	str	r3, [r4, #116]	; 0x74
}
   27b44:	4640      	mov	r0, r8
   27b46:	b004      	add	sp, #16
   27b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27b4c:	20002ccc 	.word	0x20002ccc

00027b50 <z_impl_k_thread_create>:
{
   27b50:	b5f0      	push	{r4, r5, r6, r7, lr}
   27b52:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   27b54:	2500      	movs	r5, #0
   27b56:	9505      	str	r5, [sp, #20]
   27b58:	9d10      	ldr	r5, [sp, #64]	; 0x40
   27b5a:	9504      	str	r5, [sp, #16]
   27b5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   27b5e:	9503      	str	r5, [sp, #12]
   27b60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   27b62:	9502      	str	r5, [sp, #8]
{
   27b64:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   27b68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   27b6a:	9501      	str	r5, [sp, #4]
   27b6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   27b6e:	9500      	str	r5, [sp, #0]
{
   27b70:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   27b72:	f7ff ffbb 	bl	27aec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   27b76:	1c7b      	adds	r3, r7, #1
   27b78:	bf08      	it	eq
   27b7a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   27b7e:	d005      	beq.n	27b8c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   27b80:	ea56 0307 	orrs.w	r3, r6, r7
   27b84:	d105      	bne.n	27b92 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   27b86:	4620      	mov	r0, r4
   27b88:	f000 fcfc 	bl	28584 <z_sched_start>
}
   27b8c:	4620      	mov	r0, r4
   27b8e:	b007      	add	sp, #28
   27b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27b92:	4904      	ldr	r1, [pc, #16]	; (27ba4 <z_impl_k_thread_create+0x54>)
   27b94:	4632      	mov	r2, r6
   27b96:	463b      	mov	r3, r7
   27b98:	f104 0018 	add.w	r0, r4, #24
   27b9c:	f000 ff94 	bl	28ac8 <z_add_timeout>
   27ba0:	e7f4      	b.n	27b8c <z_impl_k_thread_create+0x3c>
   27ba2:	bf00      	nop
   27ba4:	00031b03 	.word	0x00031b03

00027ba8 <z_init_static_threads>:
{
   27ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   27bac:	4e2a      	ldr	r6, [pc, #168]	; (27c58 <z_init_static_threads+0xb0>)
   27bae:	4d2b      	ldr	r5, [pc, #172]	; (27c5c <z_init_static_threads+0xb4>)
{
   27bb0:	b086      	sub	sp, #24
   27bb2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   27bb4:	42b5      	cmp	r5, r6
   27bb6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   27bba:	d310      	bcc.n	27bde <z_init_static_threads+0x36>
	k_sched_lock();
   27bbc:	f000 fbf6 	bl	283ac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   27bc0:	4c26      	ldr	r4, [pc, #152]	; (27c5c <z_init_static_threads+0xb4>)
   27bc2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 27c60 <z_init_static_threads+0xb8>
   27bc6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   27bca:	f240 36e7 	movw	r6, #999	; 0x3e7
   27bce:	2700      	movs	r7, #0
   27bd0:	4544      	cmp	r4, r8
   27bd2:	d321      	bcc.n	27c18 <z_init_static_threads+0x70>
}
   27bd4:	b006      	add	sp, #24
   27bd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   27bda:	f000 bdc1 	b.w	28760 <k_sched_unlock>
		z_setup_new_thread(
   27bde:	f854 3c04 	ldr.w	r3, [r4, #-4]
   27be2:	9305      	str	r3, [sp, #20]
   27be4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   27be8:	9304      	str	r3, [sp, #16]
   27bea:	f854 3c14 	ldr.w	r3, [r4, #-20]
   27bee:	9303      	str	r3, [sp, #12]
   27bf0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   27bf4:	9302      	str	r3, [sp, #8]
   27bf6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   27bfa:	9301      	str	r3, [sp, #4]
   27bfc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   27c00:	9300      	str	r3, [sp, #0]
   27c02:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   27c06:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   27c0a:	f7ff ff6f 	bl	27aec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   27c0e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   27c12:	655d      	str	r5, [r3, #84]	; 0x54
   27c14:	4625      	mov	r5, r4
   27c16:	e7cd      	b.n	27bb4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   27c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27c1a:	1c5a      	adds	r2, r3, #1
   27c1c:	d00d      	beq.n	27c3a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   27c1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27c22:	4630      	mov	r0, r6
   27c24:	4639      	mov	r1, r7
   27c26:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   27c2a:	42b9      	cmp	r1, r7
   27c2c:	bf08      	it	eq
   27c2e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   27c30:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   27c32:	d104      	bne.n	27c3e <z_init_static_threads+0x96>
	z_sched_start(thread);
   27c34:	4628      	mov	r0, r5
   27c36:	f000 fca5 	bl	28584 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   27c3a:	3430      	adds	r4, #48	; 0x30
   27c3c:	e7c8      	b.n	27bd0 <z_init_static_threads+0x28>
   27c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27c42:	2300      	movs	r3, #0
   27c44:	f7e4 ff9a 	bl	cb7c <__aeabi_uldivmod>
   27c48:	4602      	mov	r2, r0
   27c4a:	460b      	mov	r3, r1
   27c4c:	f105 0018 	add.w	r0, r5, #24
   27c50:	4651      	mov	r1, sl
   27c52:	f000 ff39 	bl	28ac8 <z_add_timeout>
   27c56:	e7f0      	b.n	27c3a <z_init_static_threads+0x92>
   27c58:	20000b68 	.word	0x20000b68
   27c5c:	20000b08 	.word	0x20000b08
   27c60:	00031b03 	.word	0x00031b03

00027c64 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   27c64:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   27c66:	4c09      	ldr	r4, [pc, #36]	; (27c8c <idle+0x28>)
	__asm__ volatile(
   27c68:	f04f 0240 	mov.w	r2, #64	; 0x40
   27c6c:	f3ef 8311 	mrs	r3, BASEPRI
   27c70:	f382 8812 	msr	BASEPRI_MAX, r2
   27c74:	f3bf 8f6f 	isb	sy
   27c78:	f00a f802 	bl	31c80 <z_get_next_timeout_expiry>
   27c7c:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   27c7e:	f7f6 faaf 	bl	1e1e0 <pm_system_suspend>
   27c82:	2800      	cmp	r0, #0
   27c84:	d1f0      	bne.n	27c68 <idle+0x4>
	arch_cpu_idle();
   27c86:	f7f6 fd29 	bl	1e6dc <arch_cpu_idle>
}
   27c8a:	e7ed      	b.n	27c68 <idle+0x4>
   27c8c:	20002ccc 	.word	0x20002ccc

00027c90 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   27c90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27c94:	4604      	mov	r4, r0
   27c96:	4616      	mov	r6, r2
   27c98:	461f      	mov	r7, r3
   27c9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   27c9e:	f3ef 8811 	mrs	r8, BASEPRI
   27ca2:	f383 8812 	msr	BASEPRI_MAX, r3
   27ca6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   27caa:	68c3      	ldr	r3, [r0, #12]
   27cac:	4a35      	ldr	r2, [pc, #212]	; (27d84 <z_impl_k_mutex_lock+0xf4>)
   27cae:	b16b      	cbz	r3, 27ccc <z_impl_k_mutex_lock+0x3c>
   27cb0:	6880      	ldr	r0, [r0, #8]
   27cb2:	6891      	ldr	r1, [r2, #8]
   27cb4:	4288      	cmp	r0, r1
   27cb6:	d019      	beq.n	27cec <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   27cb8:	ea56 0307 	orrs.w	r3, r6, r7
   27cbc:	d118      	bne.n	27cf0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   27cbe:	f388 8811 	msr	BASEPRI, r8
   27cc2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   27cc6:	f06f 000f 	mvn.w	r0, #15
   27cca:	e00c      	b.n	27ce6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   27ccc:	6891      	ldr	r1, [r2, #8]
   27cce:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   27cd2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   27cd4:	3301      	adds	r3, #1
   27cd6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   27cd8:	6893      	ldr	r3, [r2, #8]
   27cda:	60a3      	str	r3, [r4, #8]
   27cdc:	f388 8811 	msr	BASEPRI, r8
   27ce0:	f3bf 8f6f 	isb	sy
		return 0;
   27ce4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   27ce6:	b002      	add	sp, #8
   27ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   27cec:	6921      	ldr	r1, [r4, #16]
   27cee:	e7f0      	b.n	27cd2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   27cf0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   27cf4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   27cf8:	4299      	cmp	r1, r3
   27cfa:	bfa8      	it	ge
   27cfc:	4619      	movge	r1, r3
   27cfe:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   27d02:	4291      	cmp	r1, r2
   27d04:	bfb8      	it	lt
   27d06:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   27d08:	428b      	cmp	r3, r1
   27d0a:	dd2f      	ble.n	27d6c <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   27d0c:	f000 fcaa 	bl	28664 <z_set_prio>
   27d10:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   27d12:	e9cd 6700 	strd	r6, r7, [sp]
   27d16:	481c      	ldr	r0, [pc, #112]	; (27d88 <z_impl_k_mutex_lock+0xf8>)
   27d18:	4622      	mov	r2, r4
   27d1a:	4641      	mov	r1, r8
   27d1c:	f000 fc8e 	bl	2863c <z_pend_curr>
	if (got_mutex == 0) {
   27d20:	2800      	cmp	r0, #0
   27d22:	d0e0      	beq.n	27ce6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   27d24:	f04f 0340 	mov.w	r3, #64	; 0x40
   27d28:	f3ef 8611 	mrs	r6, BASEPRI
   27d2c:	f383 8812 	msr	BASEPRI_MAX, r3
   27d30:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   27d34:	6823      	ldr	r3, [r4, #0]
   27d36:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d38:	429c      	cmp	r4, r3
   27d3a:	d00a      	beq.n	27d52 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   27d3c:	b14b      	cbz	r3, 27d52 <z_impl_k_mutex_lock+0xc2>
   27d3e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   27d42:	4299      	cmp	r1, r3
   27d44:	bfa8      	it	ge
   27d46:	4619      	movge	r1, r3
   27d48:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   27d4c:	4299      	cmp	r1, r3
   27d4e:	bfb8      	it	lt
   27d50:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   27d52:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   27d54:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27d58:	4299      	cmp	r1, r3
   27d5a:	d109      	bne.n	27d70 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   27d5c:	b16d      	cbz	r5, 27d7a <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   27d5e:	480a      	ldr	r0, [pc, #40]	; (27d88 <z_impl_k_mutex_lock+0xf8>)
   27d60:	4631      	mov	r1, r6
   27d62:	f000 fb11 	bl	28388 <z_reschedule>
	return -EAGAIN;
   27d66:	f06f 000a 	mvn.w	r0, #10
   27d6a:	e7bc      	b.n	27ce6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   27d6c:	2500      	movs	r5, #0
   27d6e:	e7d0      	b.n	27d12 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   27d70:	f000 fc78 	bl	28664 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   27d74:	2800      	cmp	r0, #0
   27d76:	d1f2      	bne.n	27d5e <z_impl_k_mutex_lock+0xce>
   27d78:	e7f0      	b.n	27d5c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   27d7a:	f386 8811 	msr	BASEPRI, r6
   27d7e:	f3bf 8f6f 	isb	sy
   27d82:	e7f0      	b.n	27d66 <z_impl_k_mutex_lock+0xd6>
   27d84:	20002ccc 	.word	0x20002ccc
   27d88:	200041cf 	.word	0x200041cf

00027d8c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   27d8c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   27d8e:	6883      	ldr	r3, [r0, #8]
{
   27d90:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   27d92:	2b00      	cmp	r3, #0
   27d94:	d036      	beq.n	27e04 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   27d96:	4a1e      	ldr	r2, [pc, #120]	; (27e10 <z_impl_k_mutex_unlock+0x84>)
   27d98:	6892      	ldr	r2, [r2, #8]
   27d9a:	4293      	cmp	r3, r2
   27d9c:	d135      	bne.n	27e0a <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   27d9e:	7bda      	ldrb	r2, [r3, #15]
   27da0:	3a01      	subs	r2, #1
   27da2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   27da4:	68c3      	ldr	r3, [r0, #12]
   27da6:	2b01      	cmp	r3, #1
   27da8:	d905      	bls.n	27db6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   27daa:	3b01      	subs	r3, #1
   27dac:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   27dae:	f000 fcd7 	bl	28760 <k_sched_unlock>

	return 0;
   27db2:	2000      	movs	r0, #0
}
   27db4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   27db6:	f04f 0340 	mov.w	r3, #64	; 0x40
   27dba:	f3ef 8511 	mrs	r5, BASEPRI
   27dbe:	f383 8812 	msr	BASEPRI_MAX, r3
   27dc2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   27dc6:	6901      	ldr	r1, [r0, #16]
   27dc8:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   27dca:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27dce:	4299      	cmp	r1, r3
   27dd0:	d001      	beq.n	27dd6 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   27dd2:	f000 fc47 	bl	28664 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   27dd6:	4620      	mov	r0, r4
   27dd8:	f009 fef7 	bl	31bca <z_unpend_first_thread>
	mutex->owner = new_owner;
   27ddc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   27dde:	b158      	cbz	r0, 27df8 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   27de0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   27de4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   27de6:	2200      	movs	r2, #0
   27de8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   27dea:	f009 fe7a 	bl	31ae2 <z_ready_thread>
		z_reschedule(&lock, key);
   27dee:	4809      	ldr	r0, [pc, #36]	; (27e14 <z_impl_k_mutex_unlock+0x88>)
   27df0:	4629      	mov	r1, r5
   27df2:	f000 fac9 	bl	28388 <z_reschedule>
   27df6:	e7da      	b.n	27dae <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   27df8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   27dfa:	f385 8811 	msr	BASEPRI, r5
   27dfe:	f3bf 8f6f 	isb	sy
   27e02:	e7d4      	b.n	27dae <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   27e04:	f06f 0015 	mvn.w	r0, #21
   27e08:	e7d4      	b.n	27db4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   27e0a:	f04f 30ff 	mov.w	r0, #4294967295
   27e0e:	e7d1      	b.n	27db4 <z_impl_k_mutex_unlock+0x28>
   27e10:	20002ccc 	.word	0x20002ccc
   27e14:	200041cf 	.word	0x200041cf

00027e18 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   27e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27e1a:	4616      	mov	r6, r2
   27e1c:	461f      	mov	r7, r3
	__asm__ volatile(
   27e1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e22:	f3ef 8511 	mrs	r5, BASEPRI
   27e26:	f383 8812 	msr	BASEPRI_MAX, r3
   27e2a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   27e2e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   27e30:	b19c      	cbz	r4, 27e5a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27e32:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   27e34:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27e36:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   27e3a:	4294      	cmp	r4, r2
	list->head = node;
   27e3c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   27e3e:	bf08      	it	eq
   27e40:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   27e42:	2101      	movs	r1, #1
   27e44:	4620      	mov	r0, r4
   27e46:	f009 fc9b 	bl	31780 <z_queue_node_peek>
   27e4a:	4604      	mov	r4, r0
	__asm__ volatile(
   27e4c:	f385 8811 	msr	BASEPRI, r5
   27e50:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   27e54:	4620      	mov	r0, r4
   27e56:	b003      	add	sp, #12
   27e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27e5a:	ea56 0307 	orrs.w	r3, r6, r7
   27e5e:	d0f5      	beq.n	27e4c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27e60:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   27e64:	e9cd 6700 	strd	r6, r7, [sp]
   27e68:	4629      	mov	r1, r5
   27e6a:	4610      	mov	r0, r2
   27e6c:	f000 fbe6 	bl	2863c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   27e70:	2800      	cmp	r0, #0
   27e72:	d1ef      	bne.n	27e54 <z_impl_k_queue_get+0x3c>
   27e74:	4b01      	ldr	r3, [pc, #4]	; (27e7c <z_impl_k_queue_get+0x64>)
   27e76:	689b      	ldr	r3, [r3, #8]
   27e78:	695c      	ldr	r4, [r3, #20]
   27e7a:	e7eb      	b.n	27e54 <z_impl_k_queue_get+0x3c>
   27e7c:	20002ccc 	.word	0x20002ccc

00027e80 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   27e80:	b538      	push	{r3, r4, r5, lr}
   27e82:	4604      	mov	r4, r0
	__asm__ volatile(
   27e84:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e88:	f3ef 8511 	mrs	r5, BASEPRI
   27e8c:	f383 8812 	msr	BASEPRI_MAX, r3
   27e90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   27e94:	f009 fe99 	bl	31bca <z_unpend_first_thread>

	if (thread != NULL) {
   27e98:	b148      	cbz	r0, 27eae <z_impl_k_sem_give+0x2e>
   27e9a:	2200      	movs	r2, #0
   27e9c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   27e9e:	f009 fe20 	bl	31ae2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   27ea2:	4629      	mov	r1, r5
   27ea4:	4808      	ldr	r0, [pc, #32]	; (27ec8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   27ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   27eaa:	f000 ba6d 	b.w	28388 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   27eae:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   27eb2:	429a      	cmp	r2, r3
   27eb4:	bf18      	it	ne
   27eb6:	3301      	addne	r3, #1
   27eb8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   27eba:	2102      	movs	r1, #2
   27ebc:	f104 0010 	add.w	r0, r4, #16
   27ec0:	f00a f8a6 	bl	32010 <z_handle_obj_poll_events>
}
   27ec4:	e7ed      	b.n	27ea2 <z_impl_k_sem_give+0x22>
   27ec6:	bf00      	nop
   27ec8:	200041cf 	.word	0x200041cf

00027ecc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   27ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27ece:	4614      	mov	r4, r2
   27ed0:	461d      	mov	r5, r3
   27ed2:	f04f 0340 	mov.w	r3, #64	; 0x40
   27ed6:	f3ef 8111 	mrs	r1, BASEPRI
   27eda:	f383 8812 	msr	BASEPRI_MAX, r3
   27ede:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   27ee2:	6883      	ldr	r3, [r0, #8]
   27ee4:	b143      	cbz	r3, 27ef8 <z_impl_k_sem_take+0x2c>
		sem->count--;
   27ee6:	3b01      	subs	r3, #1
   27ee8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   27eea:	f381 8811 	msr	BASEPRI, r1
   27eee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   27ef2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   27ef4:	b003      	add	sp, #12
   27ef6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27ef8:	ea54 0305 	orrs.w	r3, r4, r5
   27efc:	d106      	bne.n	27f0c <z_impl_k_sem_take+0x40>
   27efe:	f381 8811 	msr	BASEPRI, r1
   27f02:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   27f06:	f06f 000f 	mvn.w	r0, #15
   27f0a:	e7f3      	b.n	27ef4 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   27f0c:	4602      	mov	r2, r0
   27f0e:	e9cd 4500 	strd	r4, r5, [sp]
   27f12:	4802      	ldr	r0, [pc, #8]	; (27f1c <z_impl_k_sem_take+0x50>)
   27f14:	f000 fb92 	bl	2863c <z_pend_curr>
	return ret;
   27f18:	e7ec      	b.n	27ef4 <z_impl_k_sem_take+0x28>
   27f1a:	bf00      	nop
   27f1c:	200041cf 	.word	0x200041cf

00027f20 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   27f20:	b570      	push	{r4, r5, r6, lr}
   27f22:	4604      	mov	r4, r0
	__asm__ volatile(
   27f24:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f28:	f3ef 8511 	mrs	r5, BASEPRI
   27f2c:	f383 8812 	msr	BASEPRI_MAX, r3
   27f30:	f3bf 8f6f 	isb	sy
   27f34:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   27f38:	4620      	mov	r0, r4
   27f3a:	f009 fe46 	bl	31bca <z_unpend_first_thread>
		if (thread == NULL) {
   27f3e:	b118      	cbz	r0, 27f48 <z_impl_k_sem_reset+0x28>
   27f40:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   27f42:	f009 fdce 	bl	31ae2 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   27f46:	e7f7      	b.n	27f38 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   27f48:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   27f4a:	2102      	movs	r1, #2
   27f4c:	f104 0010 	add.w	r0, r4, #16
   27f50:	f00a f85e 	bl	32010 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   27f54:	4629      	mov	r1, r5
   27f56:	4802      	ldr	r0, [pc, #8]	; (27f60 <z_impl_k_sem_reset+0x40>)
}
   27f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   27f5c:	f000 ba14 	b.w	28388 <z_reschedule>
   27f60:	200041cf 	.word	0x200041cf

00027f64 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   27f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   27f66:	4b09      	ldr	r3, [pc, #36]	; (27f8c <_flash_used+0x18>)
   27f68:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   27f6a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   27f6c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   27f6e:	9300      	str	r3, [sp, #0]
   27f70:	4907      	ldr	r1, [pc, #28]	; (27f90 <_flash_used+0x1c>)
   27f72:	4808      	ldr	r0, [pc, #32]	; (27f94 <_flash_used+0x20>)
	struct k_work_queue_config cfg = {
   27f74:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   27f78:	f04f 33ff 	mov.w	r3, #4294967295
   27f7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   27f80:	f000 f91c 	bl	281bc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   27f84:	4620      	mov	r0, r4
   27f86:	b004      	add	sp, #16
   27f88:	bd10      	pop	{r4, pc}
   27f8a:	bf00      	nop
   27f8c:	0003336b 	.word	0x0003336b
   27f90:	20006d00 	.word	0x20006d00
   27f94:	200021b8 	.word	0x200021b8

00027f98 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   27f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   27f9c:	4e4b      	ldr	r6, [pc, #300]	; (280cc <work_queue_main+0x134>)
{
   27f9e:	b085      	sub	sp, #20
   27fa0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   27fa2:	f04f 38ff 	mov.w	r8, #4294967295
   27fa6:	f04f 39ff 	mov.w	r9, #4294967295
   27faa:	f04f 0340 	mov.w	r3, #64	; 0x40
   27fae:	f3ef 8711 	mrs	r7, BASEPRI
   27fb2:	f383 8812 	msr	BASEPRI_MAX, r3
   27fb6:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   27fba:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   27fbe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   27fc2:	b985      	cbnz	r5, 27fe6 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   27fc4:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   27fc8:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   27fca:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   27fce:	d433      	bmi.n	28038 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   27fd0:	2300      	movs	r3, #0
   27fd2:	e9cd 8900 	strd	r8, r9, [sp]
   27fd6:	9302      	str	r3, [sp, #8]
   27fd8:	f104 0288 	add.w	r2, r4, #136	; 0x88
   27fdc:	4639      	mov	r1, r7
   27fde:	483c      	ldr	r0, [pc, #240]	; (280d0 <work_queue_main+0x138>)
   27fe0:	f000 fcf6 	bl	289d0 <z_sched_wait>
			continue;
   27fe4:	e7e1      	b.n	27faa <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27fe6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   27fea:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   27fec:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27ff0:	4295      	cmp	r5, r2
   27ff2:	d101      	bne.n	27ff8 <work_queue_main+0x60>
	list->tail = node;
   27ff4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   27ff8:	f043 0302 	orr.w	r3, r3, #2
   27ffc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   28000:	68eb      	ldr	r3, [r5, #12]
   28002:	f023 0304 	bic.w	r3, r3, #4
   28006:	f043 0301 	orr.w	r3, r3, #1
   2800a:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2800c:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2800e:	f387 8811 	msr	BASEPRI, r7
   28012:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   28016:	4628      	mov	r0, r5
   28018:	4798      	blx	r3
	__asm__ volatile(
   2801a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2801e:	f3ef 8b11 	mrs	fp, BASEPRI
   28022:	f383 8812 	msr	BASEPRI_MAX, r3
   28026:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2802a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2802c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2802e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   28032:	d40b      	bmi.n	2804c <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   28034:	60ea      	str	r2, [r5, #12]
   28036:	e00e      	b.n	28056 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   28038:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2803c:	2200      	movs	r2, #0
   2803e:	2101      	movs	r1, #1
   28040:	4628      	mov	r0, r5
   28042:	f009 fdea 	bl	31c1a <z_sched_wake>
   28046:	2800      	cmp	r0, #0
   28048:	d1f8      	bne.n	2803c <work_queue_main+0xa4>
   2804a:	e7c1      	b.n	27fd0 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2804c:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2804e:	f023 0303 	bic.w	r3, r3, #3
   28052:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   28054:	b970      	cbnz	r0, 28074 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   28056:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2805a:	f023 0302 	bic.w	r3, r3, #2
   2805e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   28062:	f38b 8811 	msr	BASEPRI, fp
   28066:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2806a:	05d8      	lsls	r0, r3, #23
   2806c:	d49d      	bmi.n	27faa <work_queue_main+0x12>
	z_impl_k_yield();
   2806e:	f000 fb9f 	bl	287b0 <z_impl_k_yield>
}
   28072:	e79a      	b.n	27faa <work_queue_main+0x12>
	return node->next;
   28074:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28076:	f04f 0a00 	mov.w	sl, #0
   2807a:	2f00      	cmp	r7, #0
   2807c:	bf38      	it	cc
   2807e:	2700      	movcc	r7, #0
	parent->next = child;
   28080:	4653      	mov	r3, sl
		if (wc->work == work) {
   28082:	6842      	ldr	r2, [r0, #4]
   28084:	4295      	cmp	r5, r2
   28086:	4601      	mov	r1, r0
   28088:	d10e      	bne.n	280a8 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   2808a:	6801      	ldr	r1, [r0, #0]
   2808c:	f1ba 0f00 	cmp.w	sl, #0
   28090:	d114      	bne.n	280bc <work_queue_main+0x124>
   28092:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   28094:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   28096:	4290      	cmp	r0, r2
   28098:	d100      	bne.n	2809c <work_queue_main+0x104>
	list->tail = node;
   2809a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   2809c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   280a0:	f7ff feee 	bl	27e80 <z_impl_k_sem_give>
}
   280a4:	4651      	mov	r1, sl
   280a6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   280a8:	2f00      	cmp	r7, #0
   280aa:	d0d4      	beq.n	28056 <work_queue_main+0xbe>
	return node->next;
   280ac:	683a      	ldr	r2, [r7, #0]
   280ae:	2a00      	cmp	r2, #0
   280b0:	bf38      	it	cc
   280b2:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   280b4:	4638      	mov	r0, r7
   280b6:	468a      	mov	sl, r1
   280b8:	4617      	mov	r7, r2
   280ba:	e7e2      	b.n	28082 <work_queue_main+0xea>
	parent->next = child;
   280bc:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   280c0:	6872      	ldr	r2, [r6, #4]
   280c2:	4290      	cmp	r0, r2
	list->tail = node;
   280c4:	bf08      	it	eq
   280c6:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   280ca:	e7e7      	b.n	2809c <work_queue_main+0x104>
   280cc:	20002cf4 	.word	0x20002cf4
   280d0:	200041cf 	.word	0x200041cf

000280d4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   280d4:	68c3      	ldr	r3, [r0, #12]
{
   280d6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   280d8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   280dc:	079b      	lsls	r3, r3, #30
{
   280de:	4605      	mov	r5, r0
   280e0:	460c      	mov	r4, r1
	if (ret) {
   280e2:	d50d      	bpl.n	28100 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   280e4:	2201      	movs	r2, #1
   280e6:	2100      	movs	r1, #0
   280e8:	f104 0008 	add.w	r0, r4, #8
   280ec:	f009 fbb1 	bl	31852 <z_impl_k_sem_init>
	parent->next = child;
   280f0:	2300      	movs	r3, #0
   280f2:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   280f4:	4b05      	ldr	r3, [pc, #20]	; (2810c <cancel_sync_locked+0x38>)
	canceler->work = work;
   280f6:	6065      	str	r5, [r4, #4]
   280f8:	685a      	ldr	r2, [r3, #4]
   280fa:	b91a      	cbnz	r2, 28104 <cancel_sync_locked+0x30>
	list->head = node;
   280fc:	e9c3 4400 	strd	r4, r4, [r3]
}
   28100:	4630      	mov	r0, r6
   28102:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   28104:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28106:	605c      	str	r4, [r3, #4]
}
   28108:	e7fa      	b.n	28100 <cancel_sync_locked+0x2c>
   2810a:	bf00      	nop
   2810c:	20002cf4 	.word	0x20002cf4

00028110 <submit_to_queue_locked>:
{
   28110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   28112:	68c3      	ldr	r3, [r0, #12]
   28114:	079a      	lsls	r2, r3, #30
{
   28116:	4604      	mov	r4, r0
   28118:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2811a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2811e:	d41f      	bmi.n	28160 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   28120:	075f      	lsls	r7, r3, #29
   28122:	d41f      	bmi.n	28164 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   28124:	680a      	ldr	r2, [r1, #0]
   28126:	b90a      	cbnz	r2, 2812c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   28128:	6882      	ldr	r2, [r0, #8]
   2812a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2812c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2812e:	bf44      	itt	mi
   28130:	68a3      	ldrmi	r3, [r4, #8]
   28132:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   28134:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   28136:	bf4c      	ite	mi
   28138:	2502      	movmi	r5, #2
		ret = 1;
   2813a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   2813c:	b37f      	cbz	r7, 2819e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2813e:	4b1b      	ldr	r3, [pc, #108]	; (281ac <submit_to_queue_locked+0x9c>)
   28140:	689b      	ldr	r3, [r3, #8]
   28142:	42bb      	cmp	r3, r7
   28144:	d111      	bne.n	2816a <submit_to_queue_locked+0x5a>
   28146:	f009 fa9e 	bl	31686 <k_is_in_isr>
   2814a:	f080 0001 	eor.w	r0, r0, #1
   2814e:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   28150:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   28154:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   28156:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2815a:	d523      	bpl.n	281a4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   2815c:	b13a      	cbz	r2, 2816e <submit_to_queue_locked+0x5e>
   2815e:	b940      	cbnz	r0, 28172 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   28160:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   28164:	2300      	movs	r3, #0
   28166:	6033      	str	r3, [r6, #0]
	return ret;
   28168:	e013      	b.n	28192 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2816a:	2000      	movs	r0, #0
   2816c:	e7f0      	b.n	28150 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   2816e:	071b      	lsls	r3, r3, #28
   28170:	d4f6      	bmi.n	28160 <submit_to_queue_locked+0x50>
	parent->next = child;
   28172:	2300      	movs	r3, #0
   28174:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   28176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   2817a:	b963      	cbnz	r3, 28196 <submit_to_queue_locked+0x86>
	list->head = node;
   2817c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   28180:	4638      	mov	r0, r7
   28182:	f009 fb76 	bl	31872 <notify_queue_locked>
	*flagp |= BIT(bit);
   28186:	68e3      	ldr	r3, [r4, #12]
   28188:	f043 0304 	orr.w	r3, r3, #4
   2818c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2818e:	6833      	ldr	r3, [r6, #0]
   28190:	60a3      	str	r3, [r4, #8]
}
   28192:	4628      	mov	r0, r5
   28194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   28196:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28198:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   2819c:	e7f0      	b.n	28180 <submit_to_queue_locked+0x70>
		return -EINVAL;
   2819e:	f06f 0515 	mvn.w	r5, #21
   281a2:	e7df      	b.n	28164 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   281a4:	f06f 0512 	mvn.w	r5, #18
   281a8:	e7dc      	b.n	28164 <submit_to_queue_locked+0x54>
   281aa:	bf00      	nop
   281ac:	20002ccc 	.word	0x20002ccc

000281b0 <k_work_submit>:
{
   281b0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   281b2:	4801      	ldr	r0, [pc, #4]	; (281b8 <k_work_submit+0x8>)
   281b4:	f009 bbcd 	b.w	31952 <k_work_submit_to_queue>
   281b8:	200021b8 	.word	0x200021b8

000281bc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   281bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   281be:	b089      	sub	sp, #36	; 0x24
   281c0:	4604      	mov	r4, r0
	list->head = NULL;
   281c2:	2000      	movs	r0, #0
	list->tail = NULL;
   281c4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   281c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   281ca:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   281ce:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   281d2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   281d6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   281da:	b31d      	cbz	r5, 28224 <k_work_queue_start+0x68>
   281dc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   281de:	2800      	cmp	r0, #0
   281e0:	f240 1001 	movw	r0, #257	; 0x101
   281e4:	bf08      	it	eq
   281e6:	2001      	moveq	r0, #1
	*flagp = flags;
   281e8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   281ec:	2000      	movs	r0, #0
   281ee:	f04f 36ff 	mov.w	r6, #4294967295
   281f2:	f04f 37ff 	mov.w	r7, #4294967295
   281f6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   281fa:	e9cd 0001 	strd	r0, r0, [sp, #4]
   281fe:	e9cd 6706 	strd	r6, r7, [sp, #24]
   28202:	4b09      	ldr	r3, [pc, #36]	; (28228 <k_work_queue_start+0x6c>)
   28204:	9400      	str	r4, [sp, #0]
   28206:	4620      	mov	r0, r4
   28208:	f7ff fca2 	bl	27b50 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2820c:	b125      	cbz	r5, 28218 <k_work_queue_start+0x5c>
   2820e:	6829      	ldr	r1, [r5, #0]
   28210:	b111      	cbz	r1, 28218 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   28212:	4620      	mov	r0, r4
   28214:	f009 fa3d 	bl	31692 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   28218:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2821a:	b009      	add	sp, #36	; 0x24
   2821c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   28220:	f009 ba3a 	b.w	31698 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   28224:	2001      	movs	r0, #1
   28226:	e7df      	b.n	281e8 <k_work_queue_start+0x2c>
   28228:	00027f99 	.word	0x00027f99

0002822c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2822c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2822e:	4614      	mov	r4, r2
   28230:	9001      	str	r0, [sp, #4]
   28232:	461d      	mov	r5, r3
   28234:	4608      	mov	r0, r1
	__asm__ volatile(
   28236:	f04f 0140 	mov.w	r1, #64	; 0x40
   2823a:	f3ef 8611 	mrs	r6, BASEPRI
   2823e:	f381 8812 	msr	BASEPRI_MAX, r1
   28242:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   28246:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   28248:	f011 0f0e 	tst.w	r1, #14
   2824c:	d115      	bne.n	2827a <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2824e:	432c      	orrs	r4, r5
   28250:	d108      	bne.n	28264 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   28252:	a901      	add	r1, sp, #4
   28254:	f7ff ff5c 	bl	28110 <submit_to_queue_locked>
	__asm__ volatile(
   28258:	f386 8811 	msr	BASEPRI, r6
   2825c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   28260:	b002      	add	sp, #8
   28262:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   28264:	f041 0108 	orr.w	r1, r1, #8
   28268:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2826a:	9901      	ldr	r1, [sp, #4]
   2826c:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2826e:	3010      	adds	r0, #16
   28270:	4903      	ldr	r1, [pc, #12]	; (28280 <k_work_schedule_for_queue+0x54>)
   28272:	f000 fc29 	bl	28ac8 <z_add_timeout>
	return ret;
   28276:	2001      	movs	r0, #1
   28278:	e7ee      	b.n	28258 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2827a:	2000      	movs	r0, #0
   2827c:	e7ec      	b.n	28258 <k_work_schedule_for_queue+0x2c>
   2827e:	bf00      	nop
   28280:	00031903 	.word	0x00031903

00028284 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   28284:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   28286:	4801      	ldr	r0, [pc, #4]	; (2828c <k_work_schedule+0x8>)
   28288:	f7ff bfd0 	b.w	2822c <k_work_schedule_for_queue>
   2828c:	200021b8 	.word	0x200021b8

00028290 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   28290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28292:	460c      	mov	r4, r1
   28294:	9001      	str	r0, [sp, #4]
   28296:	4616      	mov	r6, r2
   28298:	461f      	mov	r7, r3
	__asm__ volatile(
   2829a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2829e:	f3ef 8511 	mrs	r5, BASEPRI
   282a2:	f383 8812 	msr	BASEPRI_MAX, r3
   282a6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   282aa:	4608      	mov	r0, r1
   282ac:	f009 fae8 	bl	31880 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   282b0:	ea56 0307 	orrs.w	r3, r6, r7
   282b4:	d109      	bne.n	282ca <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   282b6:	a901      	add	r1, sp, #4
   282b8:	4620      	mov	r0, r4
   282ba:	f7ff ff29 	bl	28110 <submit_to_queue_locked>
	__asm__ volatile(
   282be:	f385 8811 	msr	BASEPRI, r5
   282c2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   282c6:	b003      	add	sp, #12
   282c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   282ca:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   282cc:	4906      	ldr	r1, [pc, #24]	; (282e8 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   282ce:	f043 0308 	orr.w	r3, r3, #8
   282d2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   282d4:	9b01      	ldr	r3, [sp, #4]
   282d6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   282d8:	f104 0010 	add.w	r0, r4, #16
   282dc:	4632      	mov	r2, r6
   282de:	463b      	mov	r3, r7
   282e0:	f000 fbf2 	bl	28ac8 <z_add_timeout>
	return ret;
   282e4:	2001      	movs	r0, #1
   282e6:	e7ea      	b.n	282be <k_work_reschedule_for_queue+0x2e>
   282e8:	00031903 	.word	0x00031903

000282ec <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   282ec:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   282ee:	4801      	ldr	r0, [pc, #4]	; (282f4 <k_work_reschedule+0x8>)
   282f0:	f7ff bfce 	b.w	28290 <k_work_reschedule_for_queue>
   282f4:	200021b8 	.word	0x200021b8

000282f8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   282f8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   282fa:	4c08      	ldr	r4, [pc, #32]	; (2831c <z_reset_time_slice+0x24>)
   282fc:	6823      	ldr	r3, [r4, #0]
   282fe:	b15b      	cbz	r3, 28318 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   28300:	f7fc ff9c 	bl	2523c <sys_clock_elapsed>
   28304:	4603      	mov	r3, r0
   28306:	6820      	ldr	r0, [r4, #0]
   28308:	4a05      	ldr	r2, [pc, #20]	; (28320 <z_reset_time_slice+0x28>)
   2830a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   2830c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   28310:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   28312:	2100      	movs	r1, #0
   28314:	f009 bcc4 	b.w	31ca0 <z_set_timeout_expiry>
}
   28318:	bd10      	pop	{r4, pc}
   2831a:	bf00      	nop
   2831c:	20002d04 	.word	0x20002d04
   28320:	20002ccc 	.word	0x20002ccc

00028324 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   28324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28326:	4604      	mov	r4, r0
   28328:	460d      	mov	r5, r1
	__asm__ volatile(
   2832a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2832e:	f3ef 8611 	mrs	r6, BASEPRI
   28332:	f383 8812 	msr	BASEPRI_MAX, r3
   28336:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2833a:	4b10      	ldr	r3, [pc, #64]	; (2837c <k_sched_time_slice_set+0x58>)
   2833c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   2833e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   28342:	f240 30e7 	movw	r0, #999	; 0x3e7
   28346:	2100      	movs	r1, #0
   28348:	611a      	str	r2, [r3, #16]
   2834a:	fbe7 0104 	umlal	r0, r1, r7, r4
   2834e:	2300      	movs	r3, #0
   28350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28354:	f7e4 fc12 	bl	cb7c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   28358:	2c00      	cmp	r4, #0
   2835a:	4b09      	ldr	r3, [pc, #36]	; (28380 <k_sched_time_slice_set+0x5c>)
   2835c:	dc09      	bgt.n	28372 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   2835e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   28360:	4b08      	ldr	r3, [pc, #32]	; (28384 <k_sched_time_slice_set+0x60>)
   28362:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   28364:	f7ff ffc8 	bl	282f8 <z_reset_time_slice>
	__asm__ volatile(
   28368:	f386 8811 	msr	BASEPRI, r6
   2836c:	f3bf 8f6f 	isb	sy
	}
}
   28370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   28372:	2802      	cmp	r0, #2
   28374:	bfb8      	it	lt
   28376:	2002      	movlt	r0, #2
   28378:	e7f1      	b.n	2835e <k_sched_time_slice_set+0x3a>
   2837a:	bf00      	nop
   2837c:	20002ccc 	.word	0x20002ccc
   28380:	20002d04 	.word	0x20002d04
   28384:	20002d00 	.word	0x20002d00

00028388 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28388:	b949      	cbnz	r1, 2839e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2838a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2838e:	b930      	cbnz	r0, 2839e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   28390:	4b05      	ldr	r3, [pc, #20]	; (283a8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   28392:	69da      	ldr	r2, [r3, #28]
   28394:	689b      	ldr	r3, [r3, #8]
   28396:	429a      	cmp	r2, r3
   28398:	d001      	beq.n	2839e <z_reschedule+0x16>
	ret = arch_swap(key);
   2839a:	f7f6 ba31 	b.w	1e800 <arch_swap>
   2839e:	f381 8811 	msr	BASEPRI, r1
   283a2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   283a6:	4770      	bx	lr
   283a8:	20002ccc 	.word	0x20002ccc

000283ac <k_sched_lock>:
	__asm__ volatile(
   283ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   283b0:	f3ef 8111 	mrs	r1, BASEPRI
   283b4:	f383 8812 	msr	BASEPRI_MAX, r3
   283b8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   283bc:	4b04      	ldr	r3, [pc, #16]	; (283d0 <k_sched_lock+0x24>)
   283be:	689a      	ldr	r2, [r3, #8]
   283c0:	7bd3      	ldrb	r3, [r2, #15]
   283c2:	3b01      	subs	r3, #1
   283c4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   283c6:	f381 8811 	msr	BASEPRI, r1
   283ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   283ce:	4770      	bx	lr
   283d0:	20002ccc 	.word	0x20002ccc

000283d4 <update_cache>:
{
   283d4:	b538      	push	{r3, r4, r5, lr}
   283d6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   283d8:	480c      	ldr	r0, [pc, #48]	; (2840c <update_cache+0x38>)
   283da:	4d0d      	ldr	r5, [pc, #52]	; (28410 <update_cache+0x3c>)
   283dc:	f009 fb77 	bl	31ace <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   283e0:	4604      	mov	r4, r0
   283e2:	b900      	cbnz	r0, 283e6 <update_cache+0x12>
   283e4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   283e6:	68ab      	ldr	r3, [r5, #8]
   283e8:	b94a      	cbnz	r2, 283fe <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   283ea:	7b5a      	ldrb	r2, [r3, #13]
   283ec:	06d2      	lsls	r2, r2, #27
   283ee:	d106      	bne.n	283fe <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   283f0:	69a2      	ldr	r2, [r4, #24]
   283f2:	b922      	cbnz	r2, 283fe <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   283f4:	89da      	ldrh	r2, [r3, #14]
   283f6:	2a7f      	cmp	r2, #127	; 0x7f
   283f8:	d901      	bls.n	283fe <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   283fa:	61eb      	str	r3, [r5, #28]
}
   283fc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   283fe:	429c      	cmp	r4, r3
   28400:	d001      	beq.n	28406 <update_cache+0x32>
			z_reset_time_slice();
   28402:	f7ff ff79 	bl	282f8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   28406:	61ec      	str	r4, [r5, #28]
}
   28408:	e7f8      	b.n	283fc <update_cache+0x28>
   2840a:	bf00      	nop
   2840c:	20002cec 	.word	0x20002cec
   28410:	20002ccc 	.word	0x20002ccc

00028414 <move_thread_to_end_of_prio_q>:
{
   28414:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   28416:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2841a:	7b43      	ldrb	r3, [r0, #13]
   2841c:	2a00      	cmp	r2, #0
{
   2841e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   28420:	da04      	bge.n	2842c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   28422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   28426:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   28428:	f009 fafc 	bl	31a24 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2842c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2842e:	4a17      	ldr	r2, [pc, #92]	; (2848c <move_thread_to_end_of_prio_q+0x78>)
   28430:	f063 037f 	orn	r3, r3, #127	; 0x7f
   28434:	4610      	mov	r0, r2
   28436:	734b      	strb	r3, [r1, #13]
   28438:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2843c:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2843e:	4283      	cmp	r3, r0
   28440:	bf08      	it	eq
   28442:	2300      	moveq	r3, #0
   28444:	2b00      	cmp	r3, #0
   28446:	bf38      	it	cc
   28448:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2844a:	b1cb      	cbz	r3, 28480 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   2844c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   28450:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   28454:	42a6      	cmp	r6, r4
   28456:	d00f      	beq.n	28478 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   28458:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2845a:	2c00      	cmp	r4, #0
   2845c:	dd0c      	ble.n	28478 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2845e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   28460:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   28464:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   28466:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   28468:	6890      	ldr	r0, [r2, #8]
   2846a:	1a43      	subs	r3, r0, r1
   2846c:	4258      	negs	r0, r3
}
   2846e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   28472:	4158      	adcs	r0, r3
   28474:	f7ff bfae 	b.w	283d4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   28478:	42ab      	cmp	r3, r5
   2847a:	d001      	beq.n	28480 <move_thread_to_end_of_prio_q+0x6c>
   2847c:	681b      	ldr	r3, [r3, #0]
   2847e:	e7e4      	b.n	2844a <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   28480:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   28484:	6029      	str	r1, [r5, #0]
	list->tail = node;
   28486:	6251      	str	r1, [r2, #36]	; 0x24
}
   28488:	e7ee      	b.n	28468 <move_thread_to_end_of_prio_q+0x54>
   2848a:	bf00      	nop
   2848c:	20002ccc 	.word	0x20002ccc

00028490 <z_time_slice>:
{
   28490:	b570      	push	{r4, r5, r6, lr}
   28492:	4601      	mov	r1, r0
	__asm__ volatile(
   28494:	f04f 0340 	mov.w	r3, #64	; 0x40
   28498:	f3ef 8411 	mrs	r4, BASEPRI
   2849c:	f383 8812 	msr	BASEPRI_MAX, r3
   284a0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   284a4:	4b16      	ldr	r3, [pc, #88]	; (28500 <z_time_slice+0x70>)
   284a6:	4a17      	ldr	r2, [pc, #92]	; (28504 <z_time_slice+0x74>)
   284a8:	6898      	ldr	r0, [r3, #8]
   284aa:	6815      	ldr	r5, [r2, #0]
   284ac:	42a8      	cmp	r0, r5
   284ae:	461d      	mov	r5, r3
   284b0:	d106      	bne.n	284c0 <z_time_slice+0x30>
			z_reset_time_slice();
   284b2:	f7ff ff21 	bl	282f8 <z_reset_time_slice>
	__asm__ volatile(
   284b6:	f384 8811 	msr	BASEPRI, r4
   284ba:	f3bf 8f6f 	isb	sy
}
   284be:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   284c0:	2600      	movs	r6, #0
   284c2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   284c4:	4a10      	ldr	r2, [pc, #64]	; (28508 <z_time_slice+0x78>)
   284c6:	6812      	ldr	r2, [r2, #0]
   284c8:	b1ba      	cbz	r2, 284fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   284ca:	89c2      	ldrh	r2, [r0, #14]
   284cc:	2a7f      	cmp	r2, #127	; 0x7f
   284ce:	d814      	bhi.n	284fa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   284d0:	7b42      	ldrb	r2, [r0, #13]
   284d2:	06d2      	lsls	r2, r2, #27
   284d4:	d111      	bne.n	284fa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   284d6:	4a0d      	ldr	r2, [pc, #52]	; (2850c <z_time_slice+0x7c>)
   284d8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   284dc:	6812      	ldr	r2, [r2, #0]
   284de:	4296      	cmp	r6, r2
   284e0:	db0b      	blt.n	284fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   284e2:	4a0b      	ldr	r2, [pc, #44]	; (28510 <z_time_slice+0x80>)
   284e4:	4290      	cmp	r0, r2
   284e6:	d008      	beq.n	284fa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   284e8:	691a      	ldr	r2, [r3, #16]
   284ea:	428a      	cmp	r2, r1
   284ec:	dc02      	bgt.n	284f4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   284ee:	f7ff ff91 	bl	28414 <move_thread_to_end_of_prio_q>
   284f2:	e7de      	b.n	284b2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   284f4:	1a52      	subs	r2, r2, r1
   284f6:	611a      	str	r2, [r3, #16]
   284f8:	e7dd      	b.n	284b6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   284fa:	2300      	movs	r3, #0
   284fc:	612b      	str	r3, [r5, #16]
   284fe:	e7da      	b.n	284b6 <z_time_slice+0x26>
   28500:	20002ccc 	.word	0x20002ccc
   28504:	20002cfc 	.word	0x20002cfc
   28508:	20002d04 	.word	0x20002d04
   2850c:	20002d00 	.word	0x20002d00
   28510:	200020b8 	.word	0x200020b8

00028514 <ready_thread>:
{
   28514:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   28516:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2851a:	7b42      	ldrb	r2, [r0, #13]
   2851c:	2b00      	cmp	r3, #0
   2851e:	db2d      	blt.n	2857c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   28520:	06d3      	lsls	r3, r2, #27
   28522:	d12b      	bne.n	2857c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   28524:	6983      	ldr	r3, [r0, #24]
   28526:	bb4b      	cbnz	r3, 2857c <ready_thread+0x68>
	return list->head == list;
   28528:	4915      	ldr	r1, [pc, #84]	; (28580 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2852a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2852e:	7342      	strb	r2, [r0, #13]
   28530:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28532:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
   28534:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28538:	4294      	cmp	r4, r2
   2853a:	bf18      	it	ne
   2853c:	4623      	movne	r3, r4
   2853e:	2b00      	cmp	r3, #0
   28540:	bf38      	it	cc
   28542:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28544:	b1ab      	cbz	r3, 28572 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   28546:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2854a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   2854e:	42a6      	cmp	r6, r4
   28550:	d00b      	beq.n	2856a <ready_thread+0x56>
		return b2 - b1;
   28552:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   28554:	2c00      	cmp	r4, #0
   28556:	dd08      	ble.n	2856a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   28558:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2855a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2855e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   28560:	6058      	str	r0, [r3, #4]
}
   28562:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   28564:	2000      	movs	r0, #0
   28566:	f7ff bf35 	b.w	283d4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2856a:	42ab      	cmp	r3, r5
   2856c:	d001      	beq.n	28572 <ready_thread+0x5e>
   2856e:	681b      	ldr	r3, [r3, #0]
   28570:	e7e8      	b.n	28544 <ready_thread+0x30>
	node->prev = tail;
   28572:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   28576:	6028      	str	r0, [r5, #0]
	list->tail = node;
   28578:	6248      	str	r0, [r1, #36]	; 0x24
}
   2857a:	e7f2      	b.n	28562 <ready_thread+0x4e>
}
   2857c:	bc70      	pop	{r4, r5, r6}
   2857e:	4770      	bx	lr
   28580:	20002ccc 	.word	0x20002ccc

00028584 <z_sched_start>:
{
   28584:	b510      	push	{r4, lr}
	__asm__ volatile(
   28586:	f04f 0240 	mov.w	r2, #64	; 0x40
   2858a:	f3ef 8411 	mrs	r4, BASEPRI
   2858e:	f382 8812 	msr	BASEPRI_MAX, r2
   28592:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   28596:	7b42      	ldrb	r2, [r0, #13]
   28598:	0751      	lsls	r1, r2, #29
   2859a:	d404      	bmi.n	285a6 <z_sched_start+0x22>
	__asm__ volatile(
   2859c:	f384 8811 	msr	BASEPRI, r4
   285a0:	f3bf 8f6f 	isb	sy
}
   285a4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   285a6:	f022 0204 	bic.w	r2, r2, #4
   285aa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   285ac:	f7ff ffb2 	bl	28514 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   285b0:	4621      	mov	r1, r4
   285b2:	4802      	ldr	r0, [pc, #8]	; (285bc <z_sched_start+0x38>)
}
   285b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   285b8:	f7ff bee6 	b.w	28388 <z_reschedule>
   285bc:	200041cf 	.word	0x200041cf

000285c0 <unready_thread>:
{
   285c0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   285c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   285c6:	7b43      	ldrb	r3, [r0, #13]
   285c8:	2a00      	cmp	r2, #0
{
   285ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   285cc:	da04      	bge.n	285d8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   285ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   285d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   285d4:	f009 fa26 	bl	31a24 <sys_dlist_remove>
	update_cache(thread == _current);
   285d8:	4b04      	ldr	r3, [pc, #16]	; (285ec <unready_thread+0x2c>)
   285da:	6898      	ldr	r0, [r3, #8]
   285dc:	1a43      	subs	r3, r0, r1
   285de:	4258      	negs	r0, r3
   285e0:	4158      	adcs	r0, r3
}
   285e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   285e6:	f7ff bef5 	b.w	283d4 <update_cache>
   285ea:	bf00      	nop
   285ec:	20002ccc 	.word	0x20002ccc

000285f0 <pend>:
{
   285f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   285f4:	4606      	mov	r6, r0
   285f6:	4614      	mov	r4, r2
   285f8:	461d      	mov	r5, r3
	__asm__ volatile(
   285fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   285fe:	f3ef 8711 	mrs	r7, BASEPRI
   28602:	f383 8812 	msr	BASEPRI_MAX, r3
   28606:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   2860a:	f009 fa9c 	bl	31b46 <add_to_waitq_locked>
	__asm__ volatile(
   2860e:	f387 8811 	msr	BASEPRI, r7
   28612:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28616:	1c6b      	adds	r3, r5, #1
   28618:	bf08      	it	eq
   2861a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2861e:	d008      	beq.n	28632 <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   28620:	4622      	mov	r2, r4
   28622:	462b      	mov	r3, r5
   28624:	f106 0018 	add.w	r0, r6, #24
   28628:	4903      	ldr	r1, [pc, #12]	; (28638 <pend+0x48>)
}
   2862a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2862e:	f000 ba4b 	b.w	28ac8 <z_add_timeout>
   28632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28636:	bf00      	nop
   28638:	00031b03 	.word	0x00031b03

0002863c <z_pend_curr>:
{
   2863c:	b510      	push	{r4, lr}
	pending_current = _current;
   2863e:	4b07      	ldr	r3, [pc, #28]	; (2865c <z_pend_curr+0x20>)
   28640:	6898      	ldr	r0, [r3, #8]
   28642:	4b07      	ldr	r3, [pc, #28]	; (28660 <z_pend_curr+0x24>)
{
   28644:	460c      	mov	r4, r1
	pending_current = _current;
   28646:	6018      	str	r0, [r3, #0]
{
   28648:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2864a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2864e:	f7ff ffcf 	bl	285f0 <pend>
   28652:	4620      	mov	r0, r4
}
   28654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28658:	f7f6 b8d2 	b.w	1e800 <arch_swap>
   2865c:	20002ccc 	.word	0x20002ccc
   28660:	20002cfc 	.word	0x20002cfc

00028664 <z_set_prio>:
{
   28664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28666:	4604      	mov	r4, r0
	__asm__ volatile(
   28668:	f04f 0340 	mov.w	r3, #64	; 0x40
   2866c:	f3ef 8611 	mrs	r6, BASEPRI
   28670:	f383 8812 	msr	BASEPRI_MAX, r3
   28674:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   28678:	7b43      	ldrb	r3, [r0, #13]
   2867a:	06da      	lsls	r2, r3, #27
   2867c:	b249      	sxtb	r1, r1
   2867e:	d138      	bne.n	286f2 <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
   28680:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   28682:	2d00      	cmp	r5, #0
   28684:	d135      	bne.n	286f2 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   28686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2868a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2868c:	f009 f9ca 	bl	31a24 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   28690:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   28692:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   28694:	f063 037f 	orn	r3, r3, #127	; 0x7f
   28698:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   2869a:	4817      	ldr	r0, [pc, #92]	; (286f8 <z_set_prio+0x94>)
   2869c:	4603      	mov	r3, r0
   2869e:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   286a2:	429f      	cmp	r7, r3
   286a4:	bf18      	it	ne
   286a6:	463d      	movne	r5, r7
   286a8:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   286aa:	6a47      	ldr	r7, [r0, #36]	; 0x24
   286ac:	461a      	mov	r2, r3
   286ae:	462b      	mov	r3, r5
   286b0:	bf38      	it	cc
   286b2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   286b4:	b1c3      	cbz	r3, 286e8 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   286b6:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   286ba:	42a9      	cmp	r1, r5
   286bc:	d010      	beq.n	286e0 <z_set_prio+0x7c>
		return b2 - b1;
   286be:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   286c0:	2d00      	cmp	r5, #0
   286c2:	dd0d      	ble.n	286e0 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   286c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   286c6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   286ca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   286cc:	605c      	str	r4, [r3, #4]
			update_cache(1);
   286ce:	2001      	movs	r0, #1
   286d0:	f7ff fe80 	bl	283d4 <update_cache>
   286d4:	2001      	movs	r0, #1
	__asm__ volatile(
   286d6:	f386 8811 	msr	BASEPRI, r6
   286da:	f3bf 8f6f 	isb	sy
}
   286de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   286e0:	42bb      	cmp	r3, r7
   286e2:	d001      	beq.n	286e8 <z_set_prio+0x84>
   286e4:	681b      	ldr	r3, [r3, #0]
   286e6:	e7e5      	b.n	286b4 <z_set_prio+0x50>
	node->prev = tail;
   286e8:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   286ec:	603c      	str	r4, [r7, #0]
	list->tail = node;
   286ee:	6244      	str	r4, [r0, #36]	; 0x24
}
   286f0:	e7ed      	b.n	286ce <z_set_prio+0x6a>
			thread->base.prio = prio;
   286f2:	73a1      	strb	r1, [r4, #14]
   286f4:	2000      	movs	r0, #0
   286f6:	e7ee      	b.n	286d6 <z_set_prio+0x72>
   286f8:	20002ccc 	.word	0x20002ccc

000286fc <z_impl_k_thread_suspend>:
{
   286fc:	b570      	push	{r4, r5, r6, lr}
   286fe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   28700:	3018      	adds	r0, #24
   28702:	f009 faa7 	bl	31c54 <z_abort_timeout>
	__asm__ volatile(
   28706:	f04f 0340 	mov.w	r3, #64	; 0x40
   2870a:	f3ef 8611 	mrs	r6, BASEPRI
   2870e:	f383 8812 	msr	BASEPRI_MAX, r3
   28712:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   28716:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2871a:	7b63      	ldrb	r3, [r4, #13]
   2871c:	2a00      	cmp	r2, #0
   2871e:	da05      	bge.n	2872c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   28720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   28724:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   28726:	4620      	mov	r0, r4
   28728:	f009 f97c 	bl	31a24 <sys_dlist_remove>
		update_cache(thread == _current);
   2872c:	4d0b      	ldr	r5, [pc, #44]	; (2875c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2872e:	7b63      	ldrb	r3, [r4, #13]
   28730:	68a8      	ldr	r0, [r5, #8]
   28732:	f043 0310 	orr.w	r3, r3, #16
   28736:	7363      	strb	r3, [r4, #13]
   28738:	1b03      	subs	r3, r0, r4
   2873a:	4258      	negs	r0, r3
   2873c:	4158      	adcs	r0, r3
   2873e:	f7ff fe49 	bl	283d4 <update_cache>
	__asm__ volatile(
   28742:	f386 8811 	msr	BASEPRI, r6
   28746:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2874a:	68ab      	ldr	r3, [r5, #8]
   2874c:	42a3      	cmp	r3, r4
   2874e:	d103      	bne.n	28758 <z_impl_k_thread_suspend+0x5c>
}
   28750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   28754:	f009 b9b1 	b.w	31aba <z_reschedule_unlocked>
}
   28758:	bd70      	pop	{r4, r5, r6, pc}
   2875a:	bf00      	nop
   2875c:	20002ccc 	.word	0x20002ccc

00028760 <k_sched_unlock>:
{
   28760:	b510      	push	{r4, lr}
	__asm__ volatile(
   28762:	f04f 0340 	mov.w	r3, #64	; 0x40
   28766:	f3ef 8411 	mrs	r4, BASEPRI
   2876a:	f383 8812 	msr	BASEPRI_MAX, r3
   2876e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   28772:	4b08      	ldr	r3, [pc, #32]	; (28794 <k_sched_unlock+0x34>)
   28774:	689a      	ldr	r2, [r3, #8]
   28776:	7bd3      	ldrb	r3, [r2, #15]
   28778:	3301      	adds	r3, #1
   2877a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2877c:	2000      	movs	r0, #0
   2877e:	f7ff fe29 	bl	283d4 <update_cache>
	__asm__ volatile(
   28782:	f384 8811 	msr	BASEPRI, r4
   28786:	f3bf 8f6f 	isb	sy
}
   2878a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2878e:	f009 b994 	b.w	31aba <z_reschedule_unlocked>
   28792:	bf00      	nop
   28794:	20002ccc 	.word	0x20002ccc

00028798 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   28798:	4b04      	ldr	r3, [pc, #16]	; (287ac <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2879a:	2100      	movs	r1, #0
   2879c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   287a0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   287a4:	4608      	mov	r0, r1
   287a6:	f7ff bdbd 	b.w	28324 <k_sched_time_slice_set>
   287aa:	bf00      	nop
   287ac:	20002ccc 	.word	0x20002ccc

000287b0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   287b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   287b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   287b6:	f3ef 8411 	mrs	r4, BASEPRI
   287ba:	f383 8812 	msr	BASEPRI_MAX, r3
   287be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   287c2:	491b      	ldr	r1, [pc, #108]	; (28830 <z_impl_k_yield+0x80>)
   287c4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   287c6:	7b43      	ldrb	r3, [r0, #13]
   287c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   287cc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   287ce:	f009 f929 	bl	31a24 <sys_dlist_remove>
	}
	queue_thread(_current);
   287d2:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   287d4:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   287d6:	4608      	mov	r0, r1
   287d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   287dc:	7353      	strb	r3, [r2, #13]
   287de:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   287e2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   287e4:	4283      	cmp	r3, r0
   287e6:	bf08      	it	eq
   287e8:	2300      	moveq	r3, #0
   287ea:	2b00      	cmp	r3, #0
   287ec:	bf38      	it	cc
   287ee:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   287f0:	b1cb      	cbz	r3, 28826 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   287f2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   287f6:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   287fa:	42af      	cmp	r7, r5
   287fc:	d00f      	beq.n	2881e <z_impl_k_yield+0x6e>
		return b2 - b1;
   287fe:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   28800:	2d00      	cmp	r5, #0
   28802:	dd0c      	ble.n	2881e <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   28804:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   28806:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   2880a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   2880c:	605a      	str	r2, [r3, #4]
	update_cache(1);
   2880e:	2001      	movs	r0, #1
   28810:	f7ff fde0 	bl	283d4 <update_cache>
   28814:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   28816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2881a:	f7f5 bff1 	b.w	1e800 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2881e:	42b3      	cmp	r3, r6
   28820:	d001      	beq.n	28826 <z_impl_k_yield+0x76>
   28822:	681b      	ldr	r3, [r3, #0]
   28824:	e7e4      	b.n	287f0 <z_impl_k_yield+0x40>
	node->prev = tail;
   28826:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   2882a:	6032      	str	r2, [r6, #0]
	list->tail = node;
   2882c:	624a      	str	r2, [r1, #36]	; 0x24
}
   2882e:	e7ee      	b.n	2880e <z_impl_k_yield+0x5e>
   28830:	20002ccc 	.word	0x20002ccc

00028834 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   28834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28838:	4604      	mov	r4, r0
   2883a:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2883c:	ea54 0105 	orrs.w	r1, r4, r5
   28840:	d104      	bne.n	2884c <z_tick_sleep+0x18>
	z_impl_k_yield();
   28842:	f7ff ffb5 	bl	287b0 <z_impl_k_yield>
		k_yield();
		return 0;
   28846:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   28848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   2884c:	f06f 0101 	mvn.w	r1, #1
   28850:	1a0a      	subs	r2, r1, r0
   28852:	f04f 31ff 	mov.w	r1, #4294967295
   28856:	eb61 0305 	sbc.w	r3, r1, r5
   2885a:	2a01      	cmp	r2, #1
   2885c:	f173 0300 	sbcs.w	r3, r3, #0
   28860:	da2a      	bge.n	288b8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   28862:	f009 fa37 	bl	31cd4 <sys_clock_tick_get_32>
   28866:	1906      	adds	r6, r0, r4
   28868:	f04f 0340 	mov.w	r3, #64	; 0x40
   2886c:	f3ef 8811 	mrs	r8, BASEPRI
   28870:	f383 8812 	msr	BASEPRI_MAX, r3
   28874:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   28878:	4f11      	ldr	r7, [pc, #68]	; (288c0 <z_tick_sleep+0x8c>)
   2887a:	4b12      	ldr	r3, [pc, #72]	; (288c4 <z_tick_sleep+0x90>)
   2887c:	68b8      	ldr	r0, [r7, #8]
   2887e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   28880:	f7ff fe9e 	bl	285c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   28884:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   28886:	4910      	ldr	r1, [pc, #64]	; (288c8 <z_tick_sleep+0x94>)
   28888:	4622      	mov	r2, r4
   2888a:	462b      	mov	r3, r5
   2888c:	3018      	adds	r0, #24
   2888e:	f000 f91b 	bl	28ac8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   28892:	68ba      	ldr	r2, [r7, #8]
   28894:	7b53      	ldrb	r3, [r2, #13]
   28896:	f043 0310 	orr.w	r3, r3, #16
   2889a:	7353      	strb	r3, [r2, #13]
   2889c:	4640      	mov	r0, r8
   2889e:	f7f5 ffaf 	bl	1e800 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   288a2:	f009 fa17 	bl	31cd4 <sys_clock_tick_get_32>
   288a6:	1a30      	subs	r0, r6, r0
   288a8:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   288ac:	2801      	cmp	r0, #1
   288ae:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   288b2:	bfb8      	it	lt
   288b4:	2000      	movlt	r0, #0
   288b6:	e7c7      	b.n	28848 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   288b8:	f06f 0601 	mvn.w	r6, #1
   288bc:	1a36      	subs	r6, r6, r0
   288be:	e7d3      	b.n	28868 <z_tick_sleep+0x34>
   288c0:	20002ccc 	.word	0x20002ccc
   288c4:	20002cfc 	.word	0x20002cfc
   288c8:	00031b03 	.word	0x00031b03

000288cc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   288cc:	b508      	push	{r3, lr}
   288ce:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   288d0:	3301      	adds	r3, #1
   288d2:	bf08      	it	eq
   288d4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   288d8:	d106      	bne.n	288e8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   288da:	4b08      	ldr	r3, [pc, #32]	; (288fc <z_impl_k_sleep+0x30>)
   288dc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   288de:	f7ff ff0d 	bl	286fc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   288e2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   288e6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   288e8:	f7ff ffa4 	bl	28834 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   288ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   288f0:	fb80 2303 	smull	r2, r3, r0, r3
   288f4:	0bd0      	lsrs	r0, r2, #15
   288f6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   288fa:	e7f4      	b.n	288e6 <z_impl_k_sleep+0x1a>
   288fc:	20002ccc 	.word	0x20002ccc

00028900 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   28900:	4b01      	ldr	r3, [pc, #4]	; (28908 <z_impl_z_current_get+0x8>)
   28902:	6898      	ldr	r0, [r3, #8]
   28904:	4770      	bx	lr
   28906:	bf00      	nop
   28908:	20002ccc 	.word	0x20002ccc

0002890c <z_impl_k_is_preempt_thread>:
   2890c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   28910:	b93b      	cbnz	r3, 28922 <z_impl_k_is_preempt_thread+0x16>
   28912:	4b05      	ldr	r3, [pc, #20]	; (28928 <z_impl_k_is_preempt_thread+0x1c>)
   28914:	689b      	ldr	r3, [r3, #8]
   28916:	89d8      	ldrh	r0, [r3, #14]
   28918:	287f      	cmp	r0, #127	; 0x7f
   2891a:	bf8c      	ite	hi
   2891c:	2000      	movhi	r0, #0
   2891e:	2001      	movls	r0, #1
   28920:	4770      	bx	lr
   28922:	2000      	movs	r0, #0
}
   28924:	4770      	bx	lr
   28926:	bf00      	nop
   28928:	20002ccc 	.word	0x20002ccc

0002892c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28930:	4604      	mov	r4, r0
   28932:	f04f 0340 	mov.w	r3, #64	; 0x40
   28936:	f3ef 8611 	mrs	r6, BASEPRI
   2893a:	f383 8812 	msr	BASEPRI_MAX, r3
   2893e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   28942:	7b43      	ldrb	r3, [r0, #13]
   28944:	071a      	lsls	r2, r3, #28
   28946:	d505      	bpl.n	28954 <z_thread_abort+0x28>
	__asm__ volatile(
   28948:	f386 8811 	msr	BASEPRI, r6
   2894c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   28950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   28954:	f023 0220 	bic.w	r2, r3, #32
   28958:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2895c:	09d2      	lsrs	r2, r2, #7
   2895e:	d120      	bne.n	289a2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   28960:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   28962:	68a3      	ldr	r3, [r4, #8]
   28964:	b113      	cbz	r3, 2896c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   28966:	4620      	mov	r0, r4
   28968:	f009 f864 	bl	31a34 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2896c:	f104 0018 	add.w	r0, r4, #24
   28970:	f009 f970 	bl	31c54 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   28974:	f104 0758 	add.w	r7, r4, #88	; 0x58
   28978:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2897c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2897e:	42bd      	cmp	r5, r7
   28980:	d000      	beq.n	28984 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28982:	b9b5      	cbnz	r5, 289b2 <z_thread_abort+0x86>
		update_cache(1);
   28984:	2001      	movs	r0, #1
   28986:	f7ff fd25 	bl	283d4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2898a:	4b10      	ldr	r3, [pc, #64]	; (289cc <z_thread_abort+0xa0>)
   2898c:	689b      	ldr	r3, [r3, #8]
   2898e:	42a3      	cmp	r3, r4
   28990:	d1da      	bne.n	28948 <z_thread_abort+0x1c>
   28992:	f3ef 8305 	mrs	r3, IPSR
   28996:	2b00      	cmp	r3, #0
   28998:	d1d6      	bne.n	28948 <z_thread_abort+0x1c>
   2899a:	4630      	mov	r0, r6
   2899c:	f7f5 ff30 	bl	1e800 <arch_swap>
	return ret;
   289a0:	e7d2      	b.n	28948 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   289a2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   289a6:	f043 0308 	orr.w	r3, r3, #8
   289aa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   289ac:	f009 f83a 	bl	31a24 <sys_dlist_remove>
}
   289b0:	e7d7      	b.n	28962 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   289b2:	4628      	mov	r0, r5
   289b4:	f009 f83e 	bl	31a34 <unpend_thread_no_timeout>
   289b8:	f105 0018 	add.w	r0, r5, #24
   289bc:	f009 f94a 	bl	31c54 <z_abort_timeout>
   289c0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   289c4:	4628      	mov	r0, r5
   289c6:	f7ff fda5 	bl	28514 <ready_thread>
   289ca:	e7d7      	b.n	2897c <z_thread_abort+0x50>
   289cc:	20002ccc 	.word	0x20002ccc

000289d0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   289d0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   289d2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   289d6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   289d8:	e9cd 6700 	strd	r6, r7, [sp]
   289dc:	f7ff fe2e 	bl	2863c <z_pend_curr>

	if (data != NULL) {
   289e0:	b11c      	cbz	r4, 289ea <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   289e2:	4b03      	ldr	r3, [pc, #12]	; (289f0 <z_sched_wait+0x20>)
   289e4:	689b      	ldr	r3, [r3, #8]
   289e6:	695b      	ldr	r3, [r3, #20]
   289e8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   289ea:	b002      	add	sp, #8
   289ec:	bdd0      	pop	{r4, r6, r7, pc}
   289ee:	bf00      	nop
   289f0:	20002ccc 	.word	0x20002ccc

000289f4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   289f4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   289f6:	4806      	ldr	r0, [pc, #24]	; (28a10 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   289f8:	4a06      	ldr	r2, [pc, #24]	; (28a14 <z_data_copy+0x20>)
   289fa:	4907      	ldr	r1, [pc, #28]	; (28a18 <z_data_copy+0x24>)
   289fc:	1a12      	subs	r2, r2, r0
   289fe:	f004 f95c 	bl	2ccba <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   28a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   28a06:	4a05      	ldr	r2, [pc, #20]	; (28a1c <z_data_copy+0x28>)
   28a08:	4905      	ldr	r1, [pc, #20]	; (28a20 <z_data_copy+0x2c>)
   28a0a:	4806      	ldr	r0, [pc, #24]	; (28a24 <z_data_copy+0x30>)
   28a0c:	f004 b955 	b.w	2ccba <memcpy>
   28a10:	20000000 	.word	0x20000000
   28a14:	20000e00 	.word	0x20000e00
   28a18:	00033374 	.word	0x00033374
   28a1c:	00000000 	.word	0x00000000
   28a20:	00033374 	.word	0x00033374
   28a24:	20000000 	.word	0x20000000

00028a28 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   28a28:	4b03      	ldr	r3, [pc, #12]	; (28a38 <elapsed+0x10>)
   28a2a:	681b      	ldr	r3, [r3, #0]
   28a2c:	b90b      	cbnz	r3, 28a32 <elapsed+0xa>
   28a2e:	f7fc bc05 	b.w	2523c <sys_clock_elapsed>
}
   28a32:	2000      	movs	r0, #0
   28a34:	4770      	bx	lr
   28a36:	bf00      	nop
   28a38:	20002d08 	.word	0x20002d08

00028a3c <remove_timeout>:
{
   28a3c:	b530      	push	{r4, r5, lr}
   28a3e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28a40:	b168      	cbz	r0, 28a5e <remove_timeout+0x22>
   28a42:	4a0a      	ldr	r2, [pc, #40]	; (28a6c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   28a44:	6852      	ldr	r2, [r2, #4]
   28a46:	4290      	cmp	r0, r2
   28a48:	d009      	beq.n	28a5e <remove_timeout+0x22>
	if (next(t) != NULL) {
   28a4a:	b143      	cbz	r3, 28a5e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   28a4c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   28a50:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   28a54:	1912      	adds	r2, r2, r4
   28a56:	eb45 0101 	adc.w	r1, r5, r1
   28a5a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   28a5e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   28a60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28a62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28a64:	2300      	movs	r3, #0
	node->prev = NULL;
   28a66:	e9c0 3300 	strd	r3, r3, [r0]
}
   28a6a:	bd30      	pop	{r4, r5, pc}
   28a6c:	200008cc 	.word	0x200008cc

00028a70 <next_timeout>:

static int32_t next_timeout(void)
{
   28a70:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   28a72:	4b13      	ldr	r3, [pc, #76]	; (28ac0 <next_timeout+0x50>)
   28a74:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28a76:	429c      	cmp	r4, r3
   28a78:	bf08      	it	eq
   28a7a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   28a7c:	f7ff ffd4 	bl	28a28 <elapsed>
   28a80:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   28a82:	b1bc      	cbz	r4, 28ab4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   28a84:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   28a88:	1b40      	subs	r0, r0, r5
   28a8a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   28a8e:	2801      	cmp	r0, #1
   28a90:	f171 0300 	sbcs.w	r3, r1, #0
   28a94:	db11      	blt.n	28aba <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   28a96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   28a9a:	2300      	movs	r3, #0
   28a9c:	4282      	cmp	r2, r0
   28a9e:	eb73 0401 	sbcs.w	r4, r3, r1
   28aa2:	da00      	bge.n	28aa6 <next_timeout+0x36>
   28aa4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   28aa6:	4b07      	ldr	r3, [pc, #28]	; (28ac4 <next_timeout+0x54>)
   28aa8:	691b      	ldr	r3, [r3, #16]
   28aaa:	b113      	cbz	r3, 28ab2 <next_timeout+0x42>
   28aac:	4298      	cmp	r0, r3
   28aae:	bfa8      	it	ge
   28ab0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   28ab2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   28ab4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   28ab8:	e7f5      	b.n	28aa6 <next_timeout+0x36>
   28aba:	2000      	movs	r0, #0
   28abc:	e7f3      	b.n	28aa6 <next_timeout+0x36>
   28abe:	bf00      	nop
   28ac0:	200008cc 	.word	0x200008cc
   28ac4:	20002ccc 	.word	0x20002ccc

00028ac8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
   28acc:	bf08      	it	eq
   28ace:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   28ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ad6:	4604      	mov	r4, r0
   28ad8:	4692      	mov	sl, r2
   28ada:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28adc:	d073      	beq.n	28bc6 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   28ade:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   28ae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   28ae4:	f3ef 8511 	mrs	r5, BASEPRI
   28ae8:	f383 8812 	msr	BASEPRI_MAX, r3
   28aec:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   28af0:	f06f 0301 	mvn.w	r3, #1
   28af4:	ebb3 080a 	subs.w	r8, r3, sl
   28af8:	f04f 32ff 	mov.w	r2, #4294967295
   28afc:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   28b00:	f1b8 0f00 	cmp.w	r8, #0
   28b04:	f179 0100 	sbcs.w	r1, r9, #0
   28b08:	db1c      	blt.n	28b44 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   28b0a:	4830      	ldr	r0, [pc, #192]	; (28bcc <z_add_timeout+0x104>)
   28b0c:	e9d0 1000 	ldrd	r1, r0, [r0]
   28b10:	1a5b      	subs	r3, r3, r1
   28b12:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   28b16:	ebb3 060a 	subs.w	r6, r3, sl
   28b1a:	eb62 070b 	sbc.w	r7, r2, fp
   28b1e:	2e01      	cmp	r6, #1
   28b20:	f177 0300 	sbcs.w	r3, r7, #0
   28b24:	bfbc      	itt	lt
   28b26:	2601      	movlt	r6, #1
   28b28:	2700      	movlt	r7, #0
   28b2a:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   28b2e:	4a28      	ldr	r2, [pc, #160]	; (28bd0 <z_add_timeout+0x108>)
   28b30:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28b34:	4293      	cmp	r3, r2
   28b36:	d11e      	bne.n	28b76 <z_add_timeout+0xae>
	node->prev = tail;
   28b38:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   28b3c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   28b40:	6054      	str	r4, [r2, #4]
}
   28b42:	e02d      	b.n	28ba0 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   28b44:	f7ff ff70 	bl	28a28 <elapsed>
   28b48:	f11a 0301 	adds.w	r3, sl, #1
   28b4c:	9300      	str	r3, [sp, #0]
   28b4e:	f14b 0300 	adc.w	r3, fp, #0
   28b52:	9301      	str	r3, [sp, #4]
   28b54:	e9dd 2300 	ldrd	r2, r3, [sp]
   28b58:	1812      	adds	r2, r2, r0
   28b5a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   28b5e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   28b62:	e7e4      	b.n	28b2e <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   28b64:	ebb6 0008 	subs.w	r0, r6, r8
   28b68:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   28b6c:	4563      	cmp	r3, ip
   28b6e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   28b72:	d0e1      	beq.n	28b38 <z_add_timeout+0x70>
   28b74:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   28b76:	2b00      	cmp	r3, #0
   28b78:	d0de      	beq.n	28b38 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   28b7a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   28b7e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   28b82:	4546      	cmp	r6, r8
   28b84:	eb77 0109 	sbcs.w	r1, r7, r9
   28b88:	daec      	bge.n	28b64 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   28b8a:	ebb8 0006 	subs.w	r0, r8, r6
   28b8e:	eb69 0107 	sbc.w	r1, r9, r7
   28b92:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   28b96:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   28b98:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   28b9c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   28b9e:	605c      	str	r4, [r3, #4]
	return list->head == list;
   28ba0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28ba2:	4293      	cmp	r3, r2
   28ba4:	d00b      	beq.n	28bbe <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   28ba6:	429c      	cmp	r4, r3
   28ba8:	d109      	bne.n	28bbe <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   28baa:	f7ff ff61 	bl	28a70 <next_timeout>

			if (next_time == 0 ||
   28bae:	b118      	cbz	r0, 28bb8 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   28bb0:	4b08      	ldr	r3, [pc, #32]	; (28bd4 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   28bb2:	691b      	ldr	r3, [r3, #16]
   28bb4:	4283      	cmp	r3, r0
   28bb6:	d002      	beq.n	28bbe <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   28bb8:	2100      	movs	r1, #0
   28bba:	f7fc fb0f 	bl	251dc <sys_clock_set_timeout>
	__asm__ volatile(
   28bbe:	f385 8811 	msr	BASEPRI, r5
   28bc2:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   28bc6:	b003      	add	sp, #12
   28bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bcc:	20002258 	.word	0x20002258
   28bd0:	200008cc 	.word	0x200008cc
   28bd4:	20002ccc 	.word	0x20002ccc

00028bd8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   28bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28bdc:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   28bde:	f7ff fc57 	bl	28490 <z_time_slice>
	__asm__ volatile(
   28be2:	f04f 0340 	mov.w	r3, #64	; 0x40
   28be6:	f3ef 8411 	mrs	r4, BASEPRI
   28bea:	f383 8812 	msr	BASEPRI_MAX, r3
   28bee:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   28bf2:	4d2c      	ldr	r5, [pc, #176]	; (28ca4 <sys_clock_announce+0xcc>)
   28bf4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 28ca8 <sys_clock_announce+0xd0>
	return list->head == list;
   28bf8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 28cac <sys_clock_announce+0xd4>
   28bfc:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   28bfe:	4651      	mov	r1, sl
   28c00:	f8d5 c000 	ldr.w	ip, [r5]
   28c04:	f8db 0000 	ldr.w	r0, [fp]
   28c08:	4662      	mov	r2, ip
   28c0a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28c0c:	4558      	cmp	r0, fp
   28c0e:	e9da 8900 	ldrd	r8, r9, [sl]
   28c12:	e9cd 2300 	strd	r2, r3, [sp]
   28c16:	d00d      	beq.n	28c34 <sys_clock_announce+0x5c>
   28c18:	b160      	cbz	r0, 28c34 <sys_clock_announce+0x5c>
   28c1a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   28c1e:	45b4      	cmp	ip, r6
   28c20:	41bb      	sbcs	r3, r7
   28c22:	da1e      	bge.n	28c62 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   28c24:	9b00      	ldr	r3, [sp, #0]
   28c26:	ebb6 0c03 	subs.w	ip, r6, r3
   28c2a:	9b01      	ldr	r3, [sp, #4]
   28c2c:	eb67 0603 	sbc.w	r6, r7, r3
   28c30:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   28c34:	9b00      	ldr	r3, [sp, #0]
   28c36:	eb13 0208 	adds.w	r2, r3, r8
   28c3a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   28c3c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   28c40:	eb43 0309 	adc.w	r3, r3, r9
   28c44:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   28c48:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   28c4a:	f7ff ff11 	bl	28a70 <next_timeout>
   28c4e:	4631      	mov	r1, r6
   28c50:	f7fc fac4 	bl	251dc <sys_clock_set_timeout>
	__asm__ volatile(
   28c54:	f384 8811 	msr	BASEPRI, r4
   28c58:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   28c5c:	b003      	add	sp, #12
   28c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   28c62:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   28c66:	f04f 0200 	mov.w	r2, #0
   28c6a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   28c6e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   28c72:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   28c76:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   28c7a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   28c7e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   28c80:	f7ff fedc 	bl	28a3c <remove_timeout>
   28c84:	f384 8811 	msr	BASEPRI, r4
   28c88:	f3bf 8f6f 	isb	sy
		t->fn(t);
   28c8c:	6883      	ldr	r3, [r0, #8]
   28c8e:	4798      	blx	r3
	__asm__ volatile(
   28c90:	f04f 0340 	mov.w	r3, #64	; 0x40
   28c94:	f3ef 8411 	mrs	r4, BASEPRI
   28c98:	f383 8812 	msr	BASEPRI_MAX, r3
   28c9c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   28ca0:	4901      	ldr	r1, [pc, #4]	; (28ca8 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   28ca2:	e7ad      	b.n	28c00 <sys_clock_announce+0x28>
   28ca4:	20002d08 	.word	0x20002d08
   28ca8:	20002258 	.word	0x20002258
   28cac:	200008cc 	.word	0x200008cc

00028cb0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   28cb0:	b510      	push	{r4, lr}
   28cb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   28cb6:	f3ef 8411 	mrs	r4, BASEPRI
   28cba:	f383 8812 	msr	BASEPRI_MAX, r3
   28cbe:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   28cc2:	f7fc fabb 	bl	2523c <sys_clock_elapsed>
   28cc6:	4b06      	ldr	r3, [pc, #24]	; (28ce0 <sys_clock_tick_get+0x30>)
   28cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   28ccc:	1812      	adds	r2, r2, r0
   28cce:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   28cd2:	f384 8811 	msr	BASEPRI, r4
   28cd6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   28cda:	4610      	mov	r0, r2
   28cdc:	4619      	mov	r1, r3
   28cde:	bd10      	pop	{r4, pc}
   28ce0:	20002258 	.word	0x20002258

00028ce4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   28ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ce6:	4604      	mov	r4, r0
	__asm__ volatile(
   28ce8:	f04f 0340 	mov.w	r3, #64	; 0x40
   28cec:	f3ef 8511 	mrs	r5, BASEPRI
   28cf0:	f383 8812 	msr	BASEPRI_MAX, r3
   28cf4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   28cf8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   28cfc:	1c56      	adds	r6, r2, #1
   28cfe:	f143 0700 	adc.w	r7, r3, #0
   28d02:	2f00      	cmp	r7, #0
   28d04:	bf08      	it	eq
   28d06:	2e02      	cmpeq	r6, #2
   28d08:	d302      	bcc.n	28d10 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   28d0a:	4917      	ldr	r1, [pc, #92]	; (28d68 <z_timer_expiration_handler+0x84>)
   28d0c:	f7ff fedc 	bl	28ac8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   28d10:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28d12:	3301      	adds	r3, #1
   28d14:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   28d16:	6a23      	ldr	r3, [r4, #32]
   28d18:	b173      	cbz	r3, 28d38 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   28d1a:	f385 8811 	msr	BASEPRI, r5
   28d1e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   28d22:	6a23      	ldr	r3, [r4, #32]
   28d24:	4620      	mov	r0, r4
   28d26:	4798      	blx	r3
	__asm__ volatile(
   28d28:	f04f 0340 	mov.w	r3, #64	; 0x40
   28d2c:	f3ef 8511 	mrs	r5, BASEPRI
   28d30:	f383 8812 	msr	BASEPRI_MAX, r3
   28d34:	f3bf 8f6f 	isb	sy
	return list->head == list;
   28d38:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28d3c:	42a6      	cmp	r6, r4
   28d3e:	d000      	beq.n	28d42 <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   28d40:	b926      	cbnz	r6, 28d4c <z_timer_expiration_handler+0x68>
	__asm__ volatile(
   28d42:	f385 8811 	msr	BASEPRI, r5
   28d46:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   28d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   28d4c:	4630      	mov	r0, r6
   28d4e:	f008 fe84 	bl	31a5a <z_unpend_thread_no_timeout>
   28d52:	2300      	movs	r3, #0
   28d54:	67f3      	str	r3, [r6, #124]	; 0x7c
   28d56:	f385 8811 	msr	BASEPRI, r5
   28d5a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   28d5e:	4630      	mov	r0, r6
}
   28d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   28d64:	f008 bebd 	b.w	31ae2 <z_ready_thread>
   28d68:	00028ce5 	.word	0x00028ce5

00028d6c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   28d6c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   28d70:	4619      	mov	r1, r3
   28d72:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   28d74:	1c4c      	adds	r4, r1, #1
{
   28d76:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   28d78:	bf08      	it	eq
   28d7a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   28d7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   28d82:	4680      	mov	r8, r0
   28d84:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   28d86:	d04c      	beq.n	28e22 <z_impl_k_timer_start+0xb6>
   28d88:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   28d8a:	1c6b      	adds	r3, r5, #1
   28d8c:	bf08      	it	eq
   28d8e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   28d92:	4614      	mov	r4, r2
   28d94:	d019      	beq.n	28dca <z_impl_k_timer_start+0x5e>
   28d96:	ea54 0305 	orrs.w	r3, r4, r5
   28d9a:	d016      	beq.n	28dca <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   28d9c:	f06f 0301 	mvn.w	r3, #1
   28da0:	ebb3 0a02 	subs.w	sl, r3, r2
   28da4:	f04f 33ff 	mov.w	r3, #4294967295
   28da8:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   28dac:	f1ba 0f00 	cmp.w	sl, #0
   28db0:	f17b 0300 	sbcs.w	r3, fp, #0
   28db4:	da09      	bge.n	28dca <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   28db6:	f112 34ff 	adds.w	r4, r2, #4294967295
   28dba:	f145 35ff 	adc.w	r5, r5, #4294967295
   28dbe:	2c01      	cmp	r4, #1
   28dc0:	f175 0300 	sbcs.w	r3, r5, #0
   28dc4:	bfbc      	itt	lt
   28dc6:	2401      	movlt	r4, #1
   28dc8:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   28dca:	f06f 0301 	mvn.w	r3, #1
   28dce:	1a1b      	subs	r3, r3, r0
   28dd0:	9300      	str	r3, [sp, #0]
   28dd2:	f04f 33ff 	mov.w	r3, #4294967295
   28dd6:	eb63 0301 	sbc.w	r3, r3, r1
   28dda:	9301      	str	r3, [sp, #4]
   28ddc:	e9dd 2300 	ldrd	r2, r3, [sp]
   28de0:	2a00      	cmp	r2, #0
   28de2:	f173 0300 	sbcs.w	r3, r3, #0
   28de6:	da0c      	bge.n	28e02 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   28de8:	f110 38ff 	adds.w	r8, r0, #4294967295
   28dec:	f141 39ff 	adc.w	r9, r1, #4294967295
   28df0:	f1b8 0f00 	cmp.w	r8, #0
   28df4:	f179 0300 	sbcs.w	r3, r9, #0
   28df8:	bfbc      	itt	lt
   28dfa:	f04f 0800 	movlt.w	r8, #0
   28dfe:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   28e02:	4630      	mov	r0, r6
   28e04:	f008 ff26 	bl	31c54 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   28e08:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   28e0a:	4907      	ldr	r1, [pc, #28]	; (28e28 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   28e0c:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   28e0e:	4642      	mov	r2, r8
   28e10:	464b      	mov	r3, r9
   28e12:	4630      	mov	r0, r6
	timer->period = period;
   28e14:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   28e18:	b002      	add	sp, #8
   28e1a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   28e1e:	f7ff be53 	b.w	28ac8 <z_add_timeout>
}
   28e22:	b002      	add	sp, #8
   28e24:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   28e28:	00028ce5 	.word	0x00028ce5

00028e2c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   28e2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   28e30:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   28e32:	4b29      	ldr	r3, [pc, #164]	; (28ed8 <z_impl_k_poll+0xac>)
   28e34:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   28e36:	2301      	movs	r3, #1
   28e38:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   28e3c:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   28e40:	ea52 0307 	orrs.w	r3, r2, r7
{
   28e44:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   28e46:	bf0c      	ite	eq
   28e48:	2301      	moveq	r3, #1
   28e4a:	2300      	movne	r3, #0
   28e4c:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   28e50:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   28e52:	f008 fffb 	bl	31e4c <register_events>
   28e56:	4681      	mov	r9, r0
	__asm__ volatile(
   28e58:	f04f 0340 	mov.w	r3, #64	; 0x40
   28e5c:	f3ef 8a11 	mrs	sl, BASEPRI
   28e60:	f383 8812 	msr	BASEPRI_MAX, r3
   28e64:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   28e68:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   28e6c:	b964      	cbnz	r4, 28e88 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   28e6e:	4601      	mov	r1, r0
   28e70:	4652      	mov	r2, sl
   28e72:	4640      	mov	r0, r8
   28e74:	f008 ff88 	bl	31d88 <clear_event_registrations>
	__asm__ volatile(
   28e78:	f38a 8811 	msr	BASEPRI, sl
   28e7c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   28e80:	4620      	mov	r0, r4
   28e82:	b002      	add	sp, #8
   28e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   28e88:	2300      	movs	r3, #0
   28e8a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28e8e:	ea56 0307 	orrs.w	r3, r6, r7
   28e92:	d106      	bne.n	28ea2 <z_impl_k_poll+0x76>
   28e94:	f38a 8811 	msr	BASEPRI, sl
   28e98:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   28e9c:	f06f 040a 	mvn.w	r4, #10
   28ea0:	e7ee      	b.n	28e80 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   28ea2:	e9cd 6700 	strd	r6, r7, [sp]
   28ea6:	4a0d      	ldr	r2, [pc, #52]	; (28edc <z_impl_k_poll+0xb0>)
   28ea8:	480d      	ldr	r0, [pc, #52]	; (28ee0 <z_impl_k_poll+0xb4>)
   28eaa:	4651      	mov	r1, sl
   28eac:	f7ff fbc6 	bl	2863c <z_pend_curr>
   28eb0:	4604      	mov	r4, r0
	__asm__ volatile(
   28eb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   28eb6:	f3ef 8511 	mrs	r5, BASEPRI
   28eba:	f383 8812 	msr	BASEPRI_MAX, r3
   28ebe:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   28ec2:	462a      	mov	r2, r5
   28ec4:	4649      	mov	r1, r9
   28ec6:	4640      	mov	r0, r8
   28ec8:	f008 ff5e 	bl	31d88 <clear_event_registrations>
	__asm__ volatile(
   28ecc:	f385 8811 	msr	BASEPRI, r5
   28ed0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   28ed4:	e7d4      	b.n	28e80 <z_impl_k_poll+0x54>
   28ed6:	bf00      	nop
   28ed8:	20002ccc 	.word	0x20002ccc
   28edc:	200008d4 	.word	0x200008d4
   28ee0:	200041cf 	.word	0x200041cf

00028ee4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   28ee4:	b538      	push	{r3, r4, r5, lr}
   28ee6:	4603      	mov	r3, r0
	__asm__ volatile(
   28ee8:	f04f 0240 	mov.w	r2, #64	; 0x40
   28eec:	f3ef 8511 	mrs	r5, BASEPRI
   28ef0:	f382 8812 	msr	BASEPRI_MAX, r2
   28ef4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   28ef8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   28efa:	2101      	movs	r1, #1
   28efc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   28efe:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   28f00:	4283      	cmp	r3, r0
   28f02:	d106      	bne.n	28f12 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   28f04:	f385 8811 	msr	BASEPRI, r5
   28f08:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   28f0c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   28f0e:	4620      	mov	r0, r4
   28f10:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   28f12:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28f16:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28f18:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28f1a:	2300      	movs	r3, #0
	node->prev = NULL;
   28f1c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28f20:	f009 f80b 	bl	31f3a <signal_poll_event>
	z_reschedule(&lock, key);
   28f24:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28f26:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   28f28:	4801      	ldr	r0, [pc, #4]	; (28f30 <z_impl_k_poll_signal_raise+0x4c>)
   28f2a:	f7ff fa2d 	bl	28388 <z_reschedule>
	return rc;
   28f2e:	e7ee      	b.n	28f0e <z_impl_k_poll_signal_raise+0x2a>
   28f30:	200041cf 	.word	0x200041cf

00028f34 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   28f34:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   28f36:	4601      	mov	r1, r0
   28f38:	4801      	ldr	r0, [pc, #4]	; (28f40 <k_aligned_alloc+0xc>)
   28f3a:	f009 b877 	b.w	3202c <z_heap_aligned_alloc>
   28f3e:	bf00      	nop
   28f40:	20000bf4 	.word	0x20000bf4

00028f44 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   28f44:	b538      	push	{r3, r4, r5, lr}
   28f46:	4604      	mov	r4, r0
   28f48:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   28f4a:	f008 fb9c 	bl	31686 <k_is_in_isr>
   28f4e:	b950      	cbnz	r0, 28f66 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   28f50:	4b06      	ldr	r3, [pc, #24]	; (28f6c <z_thread_aligned_alloc+0x28>)
   28f52:	689b      	ldr	r3, [r3, #8]
   28f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   28f56:	b143      	cbz	r3, 28f6a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   28f58:	462a      	mov	r2, r5
   28f5a:	4621      	mov	r1, r4
   28f5c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   28f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   28f62:	f009 b863 	b.w	3202c <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   28f66:	4b02      	ldr	r3, [pc, #8]	; (28f70 <z_thread_aligned_alloc+0x2c>)
   28f68:	e7f6      	b.n	28f58 <z_thread_aligned_alloc+0x14>
}
   28f6a:	bd38      	pop	{r3, r4, r5, pc}
   28f6c:	20002ccc 	.word	0x20002ccc
   28f70:	20000bf4 	.word	0x20000bf4

00028f74 <nrf_cc3xx_platform_init>:
   28f74:	b510      	push	{r4, lr}
   28f76:	4c0c      	ldr	r4, [pc, #48]	; (28fa8 <nrf_cc3xx_platform_init+0x34>)
   28f78:	6823      	ldr	r3, [r4, #0]
   28f7a:	b113      	cbz	r3, 28f82 <nrf_cc3xx_platform_init+0xe>
   28f7c:	4b0b      	ldr	r3, [pc, #44]	; (28fac <nrf_cc3xx_platform_init+0x38>)
   28f7e:	681b      	ldr	r3, [r3, #0]
   28f80:	b92b      	cbnz	r3, 28f8e <nrf_cc3xx_platform_init+0x1a>
   28f82:	f000 fe73 	bl	29c6c <CC_LibInit>
   28f86:	b930      	cbnz	r0, 28f96 <nrf_cc3xx_platform_init+0x22>
   28f88:	4b08      	ldr	r3, [pc, #32]	; (28fac <nrf_cc3xx_platform_init+0x38>)
   28f8a:	2201      	movs	r2, #1
   28f8c:	601a      	str	r2, [r3, #0]
   28f8e:	2301      	movs	r3, #1
   28f90:	6023      	str	r3, [r4, #0]
   28f92:	2000      	movs	r0, #0
   28f94:	bd10      	pop	{r4, pc}
   28f96:	3801      	subs	r0, #1
   28f98:	2806      	cmp	r0, #6
   28f9a:	d901      	bls.n	28fa0 <nrf_cc3xx_platform_init+0x2c>
   28f9c:	4804      	ldr	r0, [pc, #16]	; (28fb0 <nrf_cc3xx_platform_init+0x3c>)
   28f9e:	bd10      	pop	{r4, pc}
   28fa0:	4b04      	ldr	r3, [pc, #16]	; (28fb4 <nrf_cc3xx_platform_init+0x40>)
   28fa2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   28fa6:	bd10      	pop	{r4, pc}
   28fa8:	20002d0c 	.word	0x20002d0c
   28fac:	20002d10 	.word	0x20002d10
   28fb0:	ffff8ffe 	.word	0xffff8ffe
   28fb4:	00032d7c 	.word	0x00032d7c

00028fb8 <nrf_cc3xx_platform_abort>:
   28fb8:	f3bf 8f4f 	dsb	sy
   28fbc:	4905      	ldr	r1, [pc, #20]	; (28fd4 <nrf_cc3xx_platform_abort+0x1c>)
   28fbe:	4b06      	ldr	r3, [pc, #24]	; (28fd8 <nrf_cc3xx_platform_abort+0x20>)
   28fc0:	68ca      	ldr	r2, [r1, #12]
   28fc2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   28fc6:	4313      	orrs	r3, r2
   28fc8:	60cb      	str	r3, [r1, #12]
   28fca:	f3bf 8f4f 	dsb	sy
   28fce:	bf00      	nop
   28fd0:	e7fd      	b.n	28fce <nrf_cc3xx_platform_abort+0x16>
   28fd2:	bf00      	nop
   28fd4:	e000ed00 	.word	0xe000ed00
   28fd8:	05fa0004 	.word	0x05fa0004

00028fdc <CC_PalAbort>:
   28fdc:	b4f0      	push	{r4, r5, r6, r7}
   28fde:	4f09      	ldr	r7, [pc, #36]	; (29004 <CC_PalAbort+0x28>)
   28fe0:	4e09      	ldr	r6, [pc, #36]	; (29008 <CC_PalAbort+0x2c>)
   28fe2:	4c0a      	ldr	r4, [pc, #40]	; (2900c <CC_PalAbort+0x30>)
   28fe4:	4a0a      	ldr	r2, [pc, #40]	; (29010 <CC_PalAbort+0x34>)
   28fe6:	4d0b      	ldr	r5, [pc, #44]	; (29014 <CC_PalAbort+0x38>)
   28fe8:	490b      	ldr	r1, [pc, #44]	; (29018 <CC_PalAbort+0x3c>)
   28fea:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   28fee:	603b      	str	r3, [r7, #0]
   28ff0:	6852      	ldr	r2, [r2, #4]
   28ff2:	6033      	str	r3, [r6, #0]
   28ff4:	6023      	str	r3, [r4, #0]
   28ff6:	2400      	movs	r4, #0
   28ff8:	602b      	str	r3, [r5, #0]
   28ffa:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   28ffe:	bcf0      	pop	{r4, r5, r6, r7}
   29000:	4710      	bx	r2
   29002:	bf00      	nop
   29004:	5002b400 	.word	0x5002b400
   29008:	5002b404 	.word	0x5002b404
   2900c:	5002b408 	.word	0x5002b408
   29010:	200008dc 	.word	0x200008dc
   29014:	5002b40c 	.word	0x5002b40c
   29018:	5002a000 	.word	0x5002a000

0002901c <nrf_cc3xx_platform_set_abort>:
   2901c:	e9d0 1200 	ldrd	r1, r2, [r0]
   29020:	4b01      	ldr	r3, [pc, #4]	; (29028 <nrf_cc3xx_platform_set_abort+0xc>)
   29022:	e9c3 1200 	strd	r1, r2, [r3]
   29026:	4770      	bx	lr
   29028:	200008dc 	.word	0x200008dc

0002902c <nrf_cc3xx_platform_ctr_drbg_init>:
   2902c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29030:	4c15      	ldr	r4, [pc, #84]	; (29088 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   29032:	f8df 805c 	ldr.w	r8, [pc, #92]	; 29090 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   29036:	2800      	cmp	r0, #0
   29038:	bf18      	it	ne
   2903a:	4604      	movne	r4, r0
   2903c:	b083      	sub	sp, #12
   2903e:	6820      	ldr	r0, [r4, #0]
   29040:	4540      	cmp	r0, r8
   29042:	d01d      	beq.n	29080 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   29044:	460d      	mov	r5, r1
   29046:	4620      	mov	r0, r4
   29048:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   2904c:	f104 0904 	add.w	r9, r4, #4
   29050:	4616      	mov	r6, r2
   29052:	f504 778c 	add.w	r7, r4, #280	; 0x118
   29056:	f000 f8d3 	bl	29200 <mbedtls_platform_zeroize>
   2905a:	4648      	mov	r0, r9
   2905c:	f000 fcf2 	bl	29a44 <cc_mbedtls_entropy_init>
   29060:	4638      	mov	r0, r7
   29062:	f000 fb1f 	bl	296a4 <cc_mbedtls_ctr_drbg_init>
   29066:	4909      	ldr	r1, [pc, #36]	; (2908c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   29068:	9600      	str	r6, [sp, #0]
   2906a:	464a      	mov	r2, r9
   2906c:	4638      	mov	r0, r7
   2906e:	462b      	mov	r3, r5
   29070:	f000 fb2e 	bl	296d0 <cc_mbedtls_ctr_drbg_seed>
   29074:	b908      	cbnz	r0, 2907a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   29076:	f8c4 8000 	str.w	r8, [r4]
   2907a:	b003      	add	sp, #12
   2907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29080:	2000      	movs	r0, #0
   29082:	b003      	add	sp, #12
   29084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29088:	200041d0 	.word	0x200041d0
   2908c:	00029ac1 	.word	0x00029ac1
   29090:	5ac9bca5 	.word	0x5ac9bca5

00029094 <nrf_cc3xx_platform_ctr_drbg_get>:
   29094:	b5f0      	push	{r4, r5, r6, r7, lr}
   29096:	4c0d      	ldr	r4, [pc, #52]	; (290cc <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   29098:	4e0d      	ldr	r6, [pc, #52]	; (290d0 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   2909a:	2800      	cmp	r0, #0
   2909c:	bf08      	it	eq
   2909e:	4620      	moveq	r0, r4
   290a0:	b083      	sub	sp, #12
   290a2:	6807      	ldr	r7, [r0, #0]
   290a4:	42b7      	cmp	r7, r6
   290a6:	d10e      	bne.n	290c6 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   290a8:	2600      	movs	r6, #0
   290aa:	461d      	mov	r5, r3
   290ac:	f500 708c 	add.w	r0, r0, #280	; 0x118
   290b0:	9600      	str	r6, [sp, #0]
   290b2:	4633      	mov	r3, r6
   290b4:	4614      	mov	r4, r2
   290b6:	f000 fb57 	bl	29768 <cc_mbedtls_ctr_drbg_random_with_add>
   290ba:	2800      	cmp	r0, #0
   290bc:	bf18      	it	ne
   290be:	4634      	movne	r4, r6
   290c0:	602c      	str	r4, [r5, #0]
   290c2:	b003      	add	sp, #12
   290c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   290c6:	4803      	ldr	r0, [pc, #12]	; (290d4 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   290c8:	e7fb      	b.n	290c2 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   290ca:	bf00      	nop
   290cc:	200041d0 	.word	0x200041d0
   290d0:	5ac9bca5 	.word	0x5ac9bca5
   290d4:	ffff8fe8 	.word	0xffff8fe8

000290d8 <mutex_free>:
   290d8:	b510      	push	{r4, lr}
   290da:	4604      	mov	r4, r0
   290dc:	b130      	cbz	r0, 290ec <mutex_free+0x14>
   290de:	6863      	ldr	r3, [r4, #4]
   290e0:	06db      	lsls	r3, r3, #27
   290e2:	d502      	bpl.n	290ea <mutex_free+0x12>
   290e4:	2300      	movs	r3, #0
   290e6:	6023      	str	r3, [r4, #0]
   290e8:	6063      	str	r3, [r4, #4]
   290ea:	bd10      	pop	{r4, pc}
   290ec:	4b02      	ldr	r3, [pc, #8]	; (290f8 <mutex_free+0x20>)
   290ee:	4803      	ldr	r0, [pc, #12]	; (290fc <mutex_free+0x24>)
   290f0:	685b      	ldr	r3, [r3, #4]
   290f2:	4798      	blx	r3
   290f4:	e7f3      	b.n	290de <mutex_free+0x6>
   290f6:	bf00      	nop
   290f8:	200008dc 	.word	0x200008dc
   290fc:	00032d98 	.word	0x00032d98

00029100 <mutex_unlock>:
   29100:	b168      	cbz	r0, 2911e <mutex_unlock+0x1e>
   29102:	6843      	ldr	r3, [r0, #4]
   29104:	b13b      	cbz	r3, 29116 <mutex_unlock+0x16>
   29106:	06db      	lsls	r3, r3, #27
   29108:	d507      	bpl.n	2911a <mutex_unlock+0x1a>
   2910a:	f3bf 8f5f 	dmb	sy
   2910e:	2300      	movs	r3, #0
   29110:	6003      	str	r3, [r0, #0]
   29112:	4618      	mov	r0, r3
   29114:	4770      	bx	lr
   29116:	4803      	ldr	r0, [pc, #12]	; (29124 <mutex_unlock+0x24>)
   29118:	4770      	bx	lr
   2911a:	4803      	ldr	r0, [pc, #12]	; (29128 <mutex_unlock+0x28>)
   2911c:	4770      	bx	lr
   2911e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   29122:	4770      	bx	lr
   29124:	ffff8fea 	.word	0xffff8fea
   29128:	ffff8fe9 	.word	0xffff8fe9

0002912c <mutex_init>:
   2912c:	b510      	push	{r4, lr}
   2912e:	4604      	mov	r4, r0
   29130:	b120      	cbz	r0, 2913c <mutex_init+0x10>
   29132:	2200      	movs	r2, #0
   29134:	2311      	movs	r3, #17
   29136:	6022      	str	r2, [r4, #0]
   29138:	6063      	str	r3, [r4, #4]
   2913a:	bd10      	pop	{r4, pc}
   2913c:	4801      	ldr	r0, [pc, #4]	; (29144 <mutex_init+0x18>)
   2913e:	f7ff ff4d 	bl	28fdc <CC_PalAbort>
   29142:	e7f6      	b.n	29132 <mutex_init+0x6>
   29144:	00032dc0 	.word	0x00032dc0

00029148 <mutex_lock>:
   29148:	b1c0      	cbz	r0, 2917c <mutex_lock+0x34>
   2914a:	6843      	ldr	r3, [r0, #4]
   2914c:	b1a3      	cbz	r3, 29178 <mutex_lock+0x30>
   2914e:	06db      	lsls	r3, r3, #27
   29150:	d510      	bpl.n	29174 <mutex_lock+0x2c>
   29152:	2201      	movs	r2, #1
   29154:	f3bf 8f5b 	dmb	ish
   29158:	e850 3f00 	ldrex	r3, [r0]
   2915c:	e840 2100 	strex	r1, r2, [r0]
   29160:	2900      	cmp	r1, #0
   29162:	d1f9      	bne.n	29158 <mutex_lock+0x10>
   29164:	f3bf 8f5b 	dmb	ish
   29168:	2b01      	cmp	r3, #1
   2916a:	d0f3      	beq.n	29154 <mutex_lock+0xc>
   2916c:	f3bf 8f5f 	dmb	sy
   29170:	2000      	movs	r0, #0
   29172:	4770      	bx	lr
   29174:	4803      	ldr	r0, [pc, #12]	; (29184 <mutex_lock+0x3c>)
   29176:	4770      	bx	lr
   29178:	4803      	ldr	r0, [pc, #12]	; (29188 <mutex_lock+0x40>)
   2917a:	4770      	bx	lr
   2917c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   29180:	4770      	bx	lr
   29182:	bf00      	nop
   29184:	ffff8fe9 	.word	0xffff8fe9
   29188:	ffff8fea 	.word	0xffff8fea

0002918c <nrf_cc3xx_platform_set_mutexes>:
   2918c:	b570      	push	{r4, r5, r6, lr}
   2918e:	e9d0 2300 	ldrd	r2, r3, [r0]
   29192:	4c13      	ldr	r4, [pc, #76]	; (291e0 <nrf_cc3xx_platform_set_mutexes+0x54>)
   29194:	4d13      	ldr	r5, [pc, #76]	; (291e4 <nrf_cc3xx_platform_set_mutexes+0x58>)
   29196:	e9c4 2300 	strd	r2, r3, [r4]
   2919a:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   2919e:	e9c4 6302 	strd	r6, r3, [r4, #8]
   291a2:	4b11      	ldr	r3, [pc, #68]	; (291e8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   291a4:	6808      	ldr	r0, [r1, #0]
   291a6:	6018      	str	r0, [r3, #0]
   291a8:	6848      	ldr	r0, [r1, #4]
   291aa:	6058      	str	r0, [r3, #4]
   291ac:	6888      	ldr	r0, [r1, #8]
   291ae:	6098      	str	r0, [r3, #8]
   291b0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   291b4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   291b8:	60de      	str	r6, [r3, #12]
   291ba:	6118      	str	r0, [r3, #16]
   291bc:	06cb      	lsls	r3, r1, #27
   291be:	d50d      	bpl.n	291dc <nrf_cc3xx_platform_set_mutexes+0x50>
   291c0:	2300      	movs	r3, #0
   291c2:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   291c6:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   291ca:	f505 7088 	add.w	r0, r5, #272	; 0x110
   291ce:	4790      	blx	r2
   291d0:	6823      	ldr	r3, [r4, #0]
   291d2:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   291d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   291da:	4718      	bx	r3
   291dc:	bd70      	pop	{r4, r5, r6, pc}
   291de:	bf00      	nop
   291e0:	200008ec 	.word	0x200008ec
   291e4:	200041d0 	.word	0x200041d0
   291e8:	200008fc 	.word	0x200008fc

000291ec <mbedtls_zeroize_internal>:
   291ec:	b138      	cbz	r0, 291fe <mbedtls_zeroize_internal+0x12>
   291ee:	b131      	cbz	r1, 291fe <mbedtls_zeroize_internal+0x12>
   291f0:	4401      	add	r1, r0
   291f2:	2200      	movs	r2, #0
   291f4:	4603      	mov	r3, r0
   291f6:	3001      	adds	r0, #1
   291f8:	4281      	cmp	r1, r0
   291fa:	701a      	strb	r2, [r3, #0]
   291fc:	d1fa      	bne.n	291f4 <mbedtls_zeroize_internal+0x8>
   291fe:	4770      	bx	lr

00029200 <mbedtls_platform_zeroize>:
   29200:	b138      	cbz	r0, 29212 <mbedtls_platform_zeroize+0x12>
   29202:	b131      	cbz	r1, 29212 <mbedtls_platform_zeroize+0x12>
   29204:	4401      	add	r1, r0
   29206:	2200      	movs	r2, #0
   29208:	4603      	mov	r3, r0
   2920a:	3001      	adds	r0, #1
   2920c:	4288      	cmp	r0, r1
   2920e:	701a      	strb	r2, [r3, #0]
   29210:	d1fa      	bne.n	29208 <mbedtls_platform_zeroize+0x8>
   29212:	4770      	bx	lr

00029214 <block_cipher_df>:
   29214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29218:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   2921c:	b0b1      	sub	sp, #196	; 0xc4
   2921e:	f200 812e 	bhi.w	2947e <block_cipher_df+0x26a>
   29222:	f8df 926c 	ldr.w	r9, [pc, #620]	; 29490 <block_cipher_df+0x27c>
   29226:	4614      	mov	r4, r2
   29228:	460d      	mov	r5, r1
   2922a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   2922e:	2100      	movs	r1, #0
   29230:	4682      	mov	sl, r0
   29232:	4648      	mov	r0, r9
   29234:	f003 fd4c 	bl	2ccd0 <memset>
   29238:	a813      	add	r0, sp, #76	; 0x4c
   2923a:	f001 f9e5 	bl	2a608 <cc_mbedtls_aes_init>
   2923e:	2600      	movs	r6, #0
   29240:	4629      	mov	r1, r5
   29242:	2320      	movs	r3, #32
   29244:	ba65      	rev16	r5, r4
   29246:	4622      	mov	r2, r4
   29248:	f109 0018 	add.w	r0, r9, #24
   2924c:	f8a9 5012 	strh.w	r5, [r9, #18]
   29250:	f889 3017 	strb.w	r3, [r9, #23]
   29254:	f8a9 6010 	strh.w	r6, [r9, #16]
   29258:	f003 fd2f 	bl	2ccba <memcpy>
   2925c:	eb09 0304 	add.w	r3, r9, r4
   29260:	2280      	movs	r2, #128	; 0x80
   29262:	4d88      	ldr	r5, [pc, #544]	; (29484 <block_cipher_df+0x270>)
   29264:	761a      	strb	r2, [r3, #24]
   29266:	4b88      	ldr	r3, [pc, #544]	; (29488 <block_cipher_df+0x274>)
   29268:	9503      	str	r5, [sp, #12]
   2926a:	9304      	str	r3, [sp, #16]
   2926c:	a813      	add	r0, sp, #76	; 0x4c
   2926e:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   29272:	a903      	add	r1, sp, #12
   29274:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   29278:	e9cd 5305 	strd	r5, r3, [sp, #20]
   2927c:	f001 f9da 	bl	2a634 <cc_mbedtls_aes_setkey_enc>
   29280:	4680      	mov	r8, r0
   29282:	2800      	cmp	r0, #0
   29284:	f040 80da 	bne.w	2943c <block_cipher_df+0x228>
   29288:	f104 0319 	add.w	r3, r4, #25
   2928c:	9301      	str	r3, [sp, #4]
   2928e:	af07      	add	r7, sp, #28
   29290:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   29294:	2210      	movs	r2, #16
   29296:	2100      	movs	r1, #0
   29298:	4638      	mov	r0, r7
   2929a:	f003 fd19 	bl	2ccd0 <memset>
   2929e:	4c7b      	ldr	r4, [pc, #492]	; (2948c <block_cipher_df+0x278>)
   292a0:	9d01      	ldr	r5, [sp, #4]
   292a2:	f89d 601d 	ldrb.w	r6, [sp, #29]
   292a6:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   292aa:	f89d e01c 	ldrb.w	lr, [sp, #28]
   292ae:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   292b2:	f89d c01f 	ldrb.w	ip, [sp, #31]
   292b6:	f89d 001e 	ldrb.w	r0, [sp, #30]
   292ba:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   292be:	404e      	eors	r6, r1
   292c0:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   292c4:	f88d 601d 	strb.w	r6, [sp, #29]
   292c8:	ea8e 0303 	eor.w	r3, lr, r3
   292cc:	4050      	eors	r0, r2
   292ce:	ea8c 0101 	eor.w	r1, ip, r1
   292d2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   292d6:	f88d 301c 	strb.w	r3, [sp, #28]
   292da:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   292de:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   292e2:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   292e6:	f88d 001e 	strb.w	r0, [sp, #30]
   292ea:	f88d 101f 	strb.w	r1, [sp, #31]
   292ee:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   292f2:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   292f6:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   292fa:	405a      	eors	r2, r3
   292fc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   29300:	f88d 2020 	strb.w	r2, [sp, #32]
   29304:	ea8c 0606 	eor.w	r6, ip, r6
   29308:	4048      	eors	r0, r1
   2930a:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   2930e:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   29312:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   29316:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   2931a:	ea8e 0303 	eor.w	r3, lr, r3
   2931e:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   29322:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   29326:	ea8c 0101 	eor.w	r1, ip, r1
   2932a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   2932e:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   29332:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   29336:	ea82 020c 	eor.w	r2, r2, ip
   2933a:	4073      	eors	r3, r6
   2933c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   29340:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   29344:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   29348:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   2934c:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   29350:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   29354:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   29358:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   2935c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   29360:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   29364:	ea8e 0202 	eor.w	r2, lr, r2
   29368:	4041      	eors	r1, r0
   2936a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   2936e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   29372:	4073      	eors	r3, r6
   29374:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   29378:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   2937c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   29380:	ea8c 0000 	eor.w	r0, ip, r0
   29384:	4056      	eors	r6, r2
   29386:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   2938a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   2938e:	463b      	mov	r3, r7
   29390:	463a      	mov	r2, r7
   29392:	2101      	movs	r1, #1
   29394:	a813      	add	r0, sp, #76	; 0x4c
   29396:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   2939a:	f001 f965 	bl	2a668 <cc_mbedtls_aes_crypt_ecb>
   2939e:	2d10      	cmp	r5, #16
   293a0:	bf94      	ite	ls
   293a2:	1b6d      	subls	r5, r5, r5
   293a4:	3d10      	subhi	r5, #16
   293a6:	2800      	cmp	r0, #0
   293a8:	d167      	bne.n	2947a <block_cipher_df+0x266>
   293aa:	3410      	adds	r4, #16
   293ac:	2d00      	cmp	r5, #0
   293ae:	f47f af78 	bne.w	292a2 <block_cipher_df+0x8e>
   293b2:	eb0b 0008 	add.w	r0, fp, r8
   293b6:	2210      	movs	r2, #16
   293b8:	4639      	mov	r1, r7
   293ba:	f003 fc7e 	bl	2ccba <memcpy>
   293be:	f899 3003 	ldrb.w	r3, [r9, #3]
   293c2:	f108 0810 	add.w	r8, r8, #16
   293c6:	3301      	adds	r3, #1
   293c8:	f1b8 0f20 	cmp.w	r8, #32
   293cc:	f889 3003 	strb.w	r3, [r9, #3]
   293d0:	f47f af60 	bne.w	29294 <block_cipher_df+0x80>
   293d4:	2280      	movs	r2, #128	; 0x80
   293d6:	4659      	mov	r1, fp
   293d8:	a813      	add	r0, sp, #76	; 0x4c
   293da:	f001 f92b 	bl	2a634 <cc_mbedtls_aes_setkey_enc>
   293de:	4680      	mov	r8, r0
   293e0:	bb78      	cbnz	r0, 29442 <block_cipher_df+0x22e>
   293e2:	f10a 0520 	add.w	r5, sl, #32
   293e6:	4654      	mov	r4, sl
   293e8:	ab0f      	add	r3, sp, #60	; 0x3c
   293ea:	461a      	mov	r2, r3
   293ec:	2101      	movs	r1, #1
   293ee:	a813      	add	r0, sp, #76	; 0x4c
   293f0:	f001 f93a 	bl	2a668 <cc_mbedtls_aes_crypt_ecb>
   293f4:	2210      	movs	r2, #16
   293f6:	4680      	mov	r8, r0
   293f8:	a90f      	add	r1, sp, #60	; 0x3c
   293fa:	4620      	mov	r0, r4
   293fc:	4414      	add	r4, r2
   293fe:	f1b8 0f00 	cmp.w	r8, #0
   29402:	d11e      	bne.n	29442 <block_cipher_df+0x22e>
   29404:	f003 fc59 	bl	2ccba <memcpy>
   29408:	42ac      	cmp	r4, r5
   2940a:	d1ed      	bne.n	293e8 <block_cipher_df+0x1d4>
   2940c:	a813      	add	r0, sp, #76	; 0x4c
   2940e:	f001 f90b 	bl	2a628 <cc_mbedtls_aes_free>
   29412:	481f      	ldr	r0, [pc, #124]	; (29490 <block_cipher_df+0x27c>)
   29414:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   29418:	f7ff fef2 	bl	29200 <mbedtls_platform_zeroize>
   2941c:	4658      	mov	r0, fp
   2941e:	2120      	movs	r1, #32
   29420:	f7ff feee 	bl	29200 <mbedtls_platform_zeroize>
   29424:	a803      	add	r0, sp, #12
   29426:	2110      	movs	r1, #16
   29428:	f7ff feea 	bl	29200 <mbedtls_platform_zeroize>
   2942c:	4638      	mov	r0, r7
   2942e:	2110      	movs	r1, #16
   29430:	f7ff fee6 	bl	29200 <mbedtls_platform_zeroize>
   29434:	4640      	mov	r0, r8
   29436:	b031      	add	sp, #196	; 0xc4
   29438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2943c:	af07      	add	r7, sp, #28
   2943e:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   29442:	a813      	add	r0, sp, #76	; 0x4c
   29444:	f001 f8f0 	bl	2a628 <cc_mbedtls_aes_free>
   29448:	4811      	ldr	r0, [pc, #68]	; (29490 <block_cipher_df+0x27c>)
   2944a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2944e:	f7ff fed7 	bl	29200 <mbedtls_platform_zeroize>
   29452:	4658      	mov	r0, fp
   29454:	2120      	movs	r1, #32
   29456:	f7ff fed3 	bl	29200 <mbedtls_platform_zeroize>
   2945a:	a803      	add	r0, sp, #12
   2945c:	2110      	movs	r1, #16
   2945e:	f7ff fecf 	bl	29200 <mbedtls_platform_zeroize>
   29462:	4638      	mov	r0, r7
   29464:	2110      	movs	r1, #16
   29466:	f7ff fecb 	bl	29200 <mbedtls_platform_zeroize>
   2946a:	4650      	mov	r0, sl
   2946c:	2120      	movs	r1, #32
   2946e:	f7ff fec7 	bl	29200 <mbedtls_platform_zeroize>
   29472:	4640      	mov	r0, r8
   29474:	b031      	add	sp, #196	; 0xc4
   29476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2947a:	4680      	mov	r8, r0
   2947c:	e7e1      	b.n	29442 <block_cipher_df+0x22e>
   2947e:	f06f 0837 	mvn.w	r8, #55	; 0x37
   29482:	e7f6      	b.n	29472 <block_cipher_df+0x25e>
   29484:	03020100 	.word	0x03020100
   29488:	07060504 	.word	0x07060504
   2948c:	20002d34 	.word	0x20002d34
   29490:	20002d24 	.word	0x20002d24

00029494 <ctr_drbg_update_internal>:
   29494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29498:	b088      	sub	sp, #32
   2949a:	4604      	mov	r4, r0
   2949c:	2220      	movs	r2, #32
   2949e:	460d      	mov	r5, r1
   294a0:	4668      	mov	r0, sp
   294a2:	2100      	movs	r1, #0
   294a4:	eb04 0802 	add.w	r8, r4, r2
   294a8:	f003 fc12 	bl	2ccd0 <memset>
   294ac:	466e      	mov	r6, sp
   294ae:	7be2      	ldrb	r2, [r4, #15]
   294b0:	3201      	adds	r2, #1
   294b2:	b2d2      	uxtb	r2, r2
   294b4:	73e2      	strb	r2, [r4, #15]
   294b6:	2a00      	cmp	r2, #0
   294b8:	d14d      	bne.n	29556 <ctr_drbg_update_internal+0xc2>
   294ba:	7ba2      	ldrb	r2, [r4, #14]
   294bc:	3201      	adds	r2, #1
   294be:	b2d2      	uxtb	r2, r2
   294c0:	73a2      	strb	r2, [r4, #14]
   294c2:	2a00      	cmp	r2, #0
   294c4:	d147      	bne.n	29556 <ctr_drbg_update_internal+0xc2>
   294c6:	7b63      	ldrb	r3, [r4, #13]
   294c8:	3301      	adds	r3, #1
   294ca:	b2db      	uxtb	r3, r3
   294cc:	7363      	strb	r3, [r4, #13]
   294ce:	2b00      	cmp	r3, #0
   294d0:	d141      	bne.n	29556 <ctr_drbg_update_internal+0xc2>
   294d2:	7b23      	ldrb	r3, [r4, #12]
   294d4:	3301      	adds	r3, #1
   294d6:	b2db      	uxtb	r3, r3
   294d8:	7323      	strb	r3, [r4, #12]
   294da:	2b00      	cmp	r3, #0
   294dc:	d13b      	bne.n	29556 <ctr_drbg_update_internal+0xc2>
   294de:	7ae3      	ldrb	r3, [r4, #11]
   294e0:	3301      	adds	r3, #1
   294e2:	b2db      	uxtb	r3, r3
   294e4:	72e3      	strb	r3, [r4, #11]
   294e6:	2b00      	cmp	r3, #0
   294e8:	d135      	bne.n	29556 <ctr_drbg_update_internal+0xc2>
   294ea:	7aa3      	ldrb	r3, [r4, #10]
   294ec:	3301      	adds	r3, #1
   294ee:	b2db      	uxtb	r3, r3
   294f0:	72a3      	strb	r3, [r4, #10]
   294f2:	2b00      	cmp	r3, #0
   294f4:	d12f      	bne.n	29556 <ctr_drbg_update_internal+0xc2>
   294f6:	7a63      	ldrb	r3, [r4, #9]
   294f8:	3301      	adds	r3, #1
   294fa:	b2db      	uxtb	r3, r3
   294fc:	7263      	strb	r3, [r4, #9]
   294fe:	bb53      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   29500:	7a23      	ldrb	r3, [r4, #8]
   29502:	3301      	adds	r3, #1
   29504:	b2db      	uxtb	r3, r3
   29506:	7223      	strb	r3, [r4, #8]
   29508:	bb2b      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   2950a:	79e3      	ldrb	r3, [r4, #7]
   2950c:	3301      	adds	r3, #1
   2950e:	b2db      	uxtb	r3, r3
   29510:	71e3      	strb	r3, [r4, #7]
   29512:	bb03      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   29514:	79a3      	ldrb	r3, [r4, #6]
   29516:	3301      	adds	r3, #1
   29518:	b2db      	uxtb	r3, r3
   2951a:	71a3      	strb	r3, [r4, #6]
   2951c:	b9db      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   2951e:	7963      	ldrb	r3, [r4, #5]
   29520:	3301      	adds	r3, #1
   29522:	b2db      	uxtb	r3, r3
   29524:	7163      	strb	r3, [r4, #5]
   29526:	b9b3      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   29528:	7923      	ldrb	r3, [r4, #4]
   2952a:	3301      	adds	r3, #1
   2952c:	b2db      	uxtb	r3, r3
   2952e:	7123      	strb	r3, [r4, #4]
   29530:	b98b      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   29532:	78e3      	ldrb	r3, [r4, #3]
   29534:	3301      	adds	r3, #1
   29536:	b2db      	uxtb	r3, r3
   29538:	70e3      	strb	r3, [r4, #3]
   2953a:	b963      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   2953c:	78a3      	ldrb	r3, [r4, #2]
   2953e:	3301      	adds	r3, #1
   29540:	b2db      	uxtb	r3, r3
   29542:	70a3      	strb	r3, [r4, #2]
   29544:	b93b      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   29546:	7863      	ldrb	r3, [r4, #1]
   29548:	3301      	adds	r3, #1
   2954a:	b2db      	uxtb	r3, r3
   2954c:	7063      	strb	r3, [r4, #1]
   2954e:	b913      	cbnz	r3, 29556 <ctr_drbg_update_internal+0xc2>
   29550:	7823      	ldrb	r3, [r4, #0]
   29552:	3301      	adds	r3, #1
   29554:	7023      	strb	r3, [r4, #0]
   29556:	4633      	mov	r3, r6
   29558:	4622      	mov	r2, r4
   2955a:	2101      	movs	r1, #1
   2955c:	4640      	mov	r0, r8
   2955e:	f001 f883 	bl	2a668 <cc_mbedtls_aes_crypt_ecb>
   29562:	4607      	mov	r7, r0
   29564:	2800      	cmp	r0, #0
   29566:	d12b      	bne.n	295c0 <ctr_drbg_update_internal+0x12c>
   29568:	3610      	adds	r6, #16
   2956a:	ab08      	add	r3, sp, #32
   2956c:	429e      	cmp	r6, r3
   2956e:	d19e      	bne.n	294ae <ctr_drbg_update_internal+0x1a>
   29570:	9e01      	ldr	r6, [sp, #4]
   29572:	686a      	ldr	r2, [r5, #4]
   29574:	9f00      	ldr	r7, [sp, #0]
   29576:	6829      	ldr	r1, [r5, #0]
   29578:	68ab      	ldr	r3, [r5, #8]
   2957a:	4072      	eors	r2, r6
   2957c:	9e02      	ldr	r6, [sp, #8]
   2957e:	9201      	str	r2, [sp, #4]
   29580:	4079      	eors	r1, r7
   29582:	4073      	eors	r3, r6
   29584:	9100      	str	r1, [sp, #0]
   29586:	9e03      	ldr	r6, [sp, #12]
   29588:	68e9      	ldr	r1, [r5, #12]
   2958a:	692a      	ldr	r2, [r5, #16]
   2958c:	9302      	str	r3, [sp, #8]
   2958e:	4071      	eors	r1, r6
   29590:	9e04      	ldr	r6, [sp, #16]
   29592:	696b      	ldr	r3, [r5, #20]
   29594:	9103      	str	r1, [sp, #12]
   29596:	4056      	eors	r6, r2
   29598:	9a05      	ldr	r2, [sp, #20]
   2959a:	9604      	str	r6, [sp, #16]
   2959c:	ea83 0102 	eor.w	r1, r3, r2
   295a0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   295a4:	9d06      	ldr	r5, [sp, #24]
   295a6:	9105      	str	r1, [sp, #20]
   295a8:	4055      	eors	r5, r2
   295aa:	9a07      	ldr	r2, [sp, #28]
   295ac:	4640      	mov	r0, r8
   295ae:	4053      	eors	r3, r2
   295b0:	4669      	mov	r1, sp
   295b2:	2280      	movs	r2, #128	; 0x80
   295b4:	e9cd 5306 	strd	r5, r3, [sp, #24]
   295b8:	f001 f83c 	bl	2a634 <cc_mbedtls_aes_setkey_enc>
   295bc:	4607      	mov	r7, r0
   295be:	b138      	cbz	r0, 295d0 <ctr_drbg_update_internal+0x13c>
   295c0:	4668      	mov	r0, sp
   295c2:	2120      	movs	r1, #32
   295c4:	f7ff fe1c 	bl	29200 <mbedtls_platform_zeroize>
   295c8:	4638      	mov	r0, r7
   295ca:	b008      	add	sp, #32
   295cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   295d0:	2210      	movs	r2, #16
   295d2:	4620      	mov	r0, r4
   295d4:	eb0d 0102 	add.w	r1, sp, r2
   295d8:	f003 fb6f 	bl	2ccba <memcpy>
   295dc:	e7f0      	b.n	295c0 <ctr_drbg_update_internal+0x12c>
   295de:	bf00      	nop

000295e0 <mbedtls_ctr_drbg_reseed_internal>:
   295e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   295e4:	4604      	mov	r4, r0
   295e6:	6980      	ldr	r0, [r0, #24]
   295e8:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   295ec:	d852      	bhi.n	29694 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   295ee:	461d      	mov	r5, r3
   295f0:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   295f4:	42ab      	cmp	r3, r5
   295f6:	d34d      	bcc.n	29694 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   295f8:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   295fc:	1a18      	subs	r0, r3, r0
   295fe:	4290      	cmp	r0, r2
   29600:	4616      	mov	r6, r2
   29602:	d347      	bcc.n	29694 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   29604:	f8df 9098 	ldr.w	r9, [pc, #152]	; 296a0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   29608:	f44f 72c0 	mov.w	r2, #384	; 0x180
   2960c:	460f      	mov	r7, r1
   2960e:	4648      	mov	r0, r9
   29610:	2100      	movs	r1, #0
   29612:	f003 fb5d 	bl	2ccd0 <memset>
   29616:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2961a:	69a2      	ldr	r2, [r4, #24]
   2961c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   29620:	4649      	mov	r1, r9
   29622:	4798      	blx	r3
   29624:	2800      	cmp	r0, #0
   29626:	d138      	bne.n	2969a <mbedtls_ctr_drbg_reseed_internal+0xba>
   29628:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2962c:	b13d      	cbz	r5, 2963e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   2962e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   29632:	462a      	mov	r2, r5
   29634:	eb09 0108 	add.w	r1, r9, r8
   29638:	4798      	blx	r3
   2963a:	bb70      	cbnz	r0, 2969a <mbedtls_ctr_drbg_reseed_internal+0xba>
   2963c:	44a8      	add	r8, r5
   2963e:	b107      	cbz	r7, 29642 <mbedtls_ctr_drbg_reseed_internal+0x62>
   29640:	b9c6      	cbnz	r6, 29674 <mbedtls_ctr_drbg_reseed_internal+0x94>
   29642:	4917      	ldr	r1, [pc, #92]	; (296a0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   29644:	4642      	mov	r2, r8
   29646:	4608      	mov	r0, r1
   29648:	f7ff fde4 	bl	29214 <block_cipher_df>
   2964c:	4605      	mov	r5, r0
   2964e:	b138      	cbz	r0, 29660 <mbedtls_ctr_drbg_reseed_internal+0x80>
   29650:	4813      	ldr	r0, [pc, #76]	; (296a0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   29652:	f44f 71c0 	mov.w	r1, #384	; 0x180
   29656:	f7ff fdd3 	bl	29200 <mbedtls_platform_zeroize>
   2965a:	4628      	mov	r0, r5
   2965c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29660:	490f      	ldr	r1, [pc, #60]	; (296a0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   29662:	4620      	mov	r0, r4
   29664:	f7ff ff16 	bl	29494 <ctr_drbg_update_internal>
   29668:	4605      	mov	r5, r0
   2966a:	2800      	cmp	r0, #0
   2966c:	d1f0      	bne.n	29650 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2966e:	2301      	movs	r3, #1
   29670:	6123      	str	r3, [r4, #16]
   29672:	e7ed      	b.n	29650 <mbedtls_ctr_drbg_reseed_internal+0x70>
   29674:	4639      	mov	r1, r7
   29676:	eb09 0008 	add.w	r0, r9, r8
   2967a:	4632      	mov	r2, r6
   2967c:	f003 fb1d 	bl	2ccba <memcpy>
   29680:	4907      	ldr	r1, [pc, #28]	; (296a0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   29682:	44b0      	add	r8, r6
   29684:	4642      	mov	r2, r8
   29686:	4608      	mov	r0, r1
   29688:	f7ff fdc4 	bl	29214 <block_cipher_df>
   2968c:	4605      	mov	r5, r0
   2968e:	2800      	cmp	r0, #0
   29690:	d1de      	bne.n	29650 <mbedtls_ctr_drbg_reseed_internal+0x70>
   29692:	e7e5      	b.n	29660 <mbedtls_ctr_drbg_reseed_internal+0x80>
   29694:	f06f 0537 	mvn.w	r5, #55	; 0x37
   29698:	e7df      	b.n	2965a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2969a:	f06f 0533 	mvn.w	r5, #51	; 0x33
   2969e:	e7dc      	b.n	2965a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   296a0:	20002ec4 	.word	0x20002ec4

000296a4 <cc_mbedtls_ctr_drbg_init>:
   296a4:	b510      	push	{r4, lr}
   296a6:	22a4      	movs	r2, #164	; 0xa4
   296a8:	4604      	mov	r4, r0
   296aa:	2100      	movs	r1, #0
   296ac:	f003 fb10 	bl	2ccd0 <memset>
   296b0:	4b06      	ldr	r3, [pc, #24]	; (296cc <cc_mbedtls_ctr_drbg_init+0x28>)
   296b2:	f04f 31ff 	mov.w	r1, #4294967295
   296b6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   296ba:	6121      	str	r1, [r4, #16]
   296bc:	61e2      	str	r2, [r4, #28]
   296be:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   296c2:	681b      	ldr	r3, [r3, #0]
   296c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   296c8:	4718      	bx	r3
   296ca:	bf00      	nop
   296cc:	20000940 	.word	0x20000940

000296d0 <cc_mbedtls_ctr_drbg_seed>:
   296d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   296d4:	b085      	sub	sp, #20
   296d6:	4605      	mov	r5, r0
   296d8:	460f      	mov	r7, r1
   296da:	4616      	mov	r6, r2
   296dc:	4668      	mov	r0, sp
   296de:	2210      	movs	r2, #16
   296e0:	2100      	movs	r1, #0
   296e2:	4699      	mov	r9, r3
   296e4:	f003 faf4 	bl	2ccd0 <memset>
   296e8:	4b1d      	ldr	r3, [pc, #116]	; (29760 <cc_mbedtls_ctr_drbg_seed+0x90>)
   296ea:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   296ee:	681b      	ldr	r3, [r3, #0]
   296f0:	4640      	mov	r0, r8
   296f2:	4798      	blx	r3
   296f4:	b120      	cbz	r0, 29700 <cc_mbedtls_ctr_drbg_seed+0x30>
   296f6:	4604      	mov	r4, r0
   296f8:	4620      	mov	r0, r4
   296fa:	b005      	add	sp, #20
   296fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29700:	f105 0420 	add.w	r4, r5, #32
   29704:	4620      	mov	r0, r4
   29706:	f000 ff7f 	bl	2a608 <cc_mbedtls_aes_init>
   2970a:	69aa      	ldr	r2, [r5, #24]
   2970c:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   29710:	692e      	ldr	r6, [r5, #16]
   29712:	b9e2      	cbnz	r2, 2974e <cc_mbedtls_ctr_drbg_seed+0x7e>
   29714:	2220      	movs	r2, #32
   29716:	2e00      	cmp	r6, #0
   29718:	61aa      	str	r2, [r5, #24]
   2971a:	db1f      	blt.n	2975c <cc_mbedtls_ctr_drbg_seed+0x8c>
   2971c:	4620      	mov	r0, r4
   2971e:	4669      	mov	r1, sp
   29720:	2280      	movs	r2, #128	; 0x80
   29722:	f000 ff87 	bl	2a634 <cc_mbedtls_aes_setkey_enc>
   29726:	4604      	mov	r4, r0
   29728:	b930      	cbnz	r0, 29738 <cc_mbedtls_ctr_drbg_seed+0x68>
   2972a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2972c:	4633      	mov	r3, r6
   2972e:	4649      	mov	r1, r9
   29730:	4628      	mov	r0, r5
   29732:	f7ff ff55 	bl	295e0 <mbedtls_ctr_drbg_reseed_internal>
   29736:	4604      	mov	r4, r0
   29738:	4b0a      	ldr	r3, [pc, #40]	; (29764 <cc_mbedtls_ctr_drbg_seed+0x94>)
   2973a:	4640      	mov	r0, r8
   2973c:	681b      	ldr	r3, [r3, #0]
   2973e:	4798      	blx	r3
   29740:	2800      	cmp	r0, #0
   29742:	bf18      	it	ne
   29744:	4604      	movne	r4, r0
   29746:	4620      	mov	r0, r4
   29748:	b005      	add	sp, #20
   2974a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2974e:	2e00      	cmp	r6, #0
   29750:	dae4      	bge.n	2971c <cc_mbedtls_ctr_drbg_seed+0x4c>
   29752:	2a17      	cmp	r2, #23
   29754:	d802      	bhi.n	2975c <cc_mbedtls_ctr_drbg_seed+0x8c>
   29756:	1c53      	adds	r3, r2, #1
   29758:	085e      	lsrs	r6, r3, #1
   2975a:	e7df      	b.n	2971c <cc_mbedtls_ctr_drbg_seed+0x4c>
   2975c:	2600      	movs	r6, #0
   2975e:	e7dd      	b.n	2971c <cc_mbedtls_ctr_drbg_seed+0x4c>
   29760:	20000944 	.word	0x20000944
   29764:	20000948 	.word	0x20000948

00029768 <cc_mbedtls_ctr_drbg_random_with_add>:
   29768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2976c:	b08d      	sub	sp, #52	; 0x34
   2976e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   29772:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   29776:	f200 80e4 	bhi.w	29942 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   2977a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   2977e:	f200 80dd 	bhi.w	2993c <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   29782:	4604      	mov	r4, r0
   29784:	4615      	mov	r5, r2
   29786:	460e      	mov	r6, r1
   29788:	2220      	movs	r2, #32
   2978a:	2100      	movs	r1, #0
   2978c:	a804      	add	r0, sp, #16
   2978e:	461f      	mov	r7, r3
   29790:	f003 fa9e 	bl	2ccd0 <memset>
   29794:	4b6c      	ldr	r3, [pc, #432]	; (29948 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   29796:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   2979a:	681b      	ldr	r3, [r3, #0]
   2979c:	4648      	mov	r0, r9
   2979e:	4798      	blx	r3
   297a0:	4683      	mov	fp, r0
   297a2:	2800      	cmp	r0, #0
   297a4:	f040 8093 	bne.w	298ce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   297a8:	6922      	ldr	r2, [r4, #16]
   297aa:	69e3      	ldr	r3, [r4, #28]
   297ac:	429a      	cmp	r2, r3
   297ae:	f300 8092 	bgt.w	298d6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   297b2:	6963      	ldr	r3, [r4, #20]
   297b4:	2b00      	cmp	r3, #0
   297b6:	f040 808e 	bne.w	298d6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   297ba:	f1b8 0f00 	cmp.w	r8, #0
   297be:	f040 80a9 	bne.w	29914 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   297c2:	f8df a188 	ldr.w	sl, [pc, #392]	; 2994c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   297c6:	466f      	mov	r7, sp
   297c8:	2d00      	cmp	r5, #0
   297ca:	f000 8098 	beq.w	298fe <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   297ce:	f104 0820 	add.w	r8, r4, #32
   297d2:	466f      	mov	r7, sp
   297d4:	e00e      	b.n	297f4 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   297d6:	2d10      	cmp	r5, #16
   297d8:	46ab      	mov	fp, r5
   297da:	bf28      	it	cs
   297dc:	f04f 0b10 	movcs.w	fp, #16
   297e0:	4630      	mov	r0, r6
   297e2:	465a      	mov	r2, fp
   297e4:	4639      	mov	r1, r7
   297e6:	f003 fa68 	bl	2ccba <memcpy>
   297ea:	ebb5 050b 	subs.w	r5, r5, fp
   297ee:	445e      	add	r6, fp
   297f0:	f000 8085 	beq.w	298fe <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   297f4:	7be3      	ldrb	r3, [r4, #15]
   297f6:	3301      	adds	r3, #1
   297f8:	b2db      	uxtb	r3, r3
   297fa:	73e3      	strb	r3, [r4, #15]
   297fc:	2b00      	cmp	r3, #0
   297fe:	d14d      	bne.n	2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29800:	7ba3      	ldrb	r3, [r4, #14]
   29802:	3301      	adds	r3, #1
   29804:	b2db      	uxtb	r3, r3
   29806:	73a3      	strb	r3, [r4, #14]
   29808:	2b00      	cmp	r3, #0
   2980a:	d147      	bne.n	2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2980c:	7b63      	ldrb	r3, [r4, #13]
   2980e:	3301      	adds	r3, #1
   29810:	b2db      	uxtb	r3, r3
   29812:	7363      	strb	r3, [r4, #13]
   29814:	2b00      	cmp	r3, #0
   29816:	d141      	bne.n	2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29818:	7b23      	ldrb	r3, [r4, #12]
   2981a:	3301      	adds	r3, #1
   2981c:	b2db      	uxtb	r3, r3
   2981e:	7323      	strb	r3, [r4, #12]
   29820:	2b00      	cmp	r3, #0
   29822:	d13b      	bne.n	2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29824:	7ae3      	ldrb	r3, [r4, #11]
   29826:	3301      	adds	r3, #1
   29828:	b2db      	uxtb	r3, r3
   2982a:	72e3      	strb	r3, [r4, #11]
   2982c:	2b00      	cmp	r3, #0
   2982e:	d135      	bne.n	2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29830:	7aa3      	ldrb	r3, [r4, #10]
   29832:	3301      	adds	r3, #1
   29834:	b2db      	uxtb	r3, r3
   29836:	72a3      	strb	r3, [r4, #10]
   29838:	2b00      	cmp	r3, #0
   2983a:	d12f      	bne.n	2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2983c:	7a63      	ldrb	r3, [r4, #9]
   2983e:	3301      	adds	r3, #1
   29840:	b2db      	uxtb	r3, r3
   29842:	7263      	strb	r3, [r4, #9]
   29844:	bb53      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29846:	7a23      	ldrb	r3, [r4, #8]
   29848:	3301      	adds	r3, #1
   2984a:	b2db      	uxtb	r3, r3
   2984c:	7223      	strb	r3, [r4, #8]
   2984e:	bb2b      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29850:	79e3      	ldrb	r3, [r4, #7]
   29852:	3301      	adds	r3, #1
   29854:	b2db      	uxtb	r3, r3
   29856:	71e3      	strb	r3, [r4, #7]
   29858:	bb03      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2985a:	79a3      	ldrb	r3, [r4, #6]
   2985c:	3301      	adds	r3, #1
   2985e:	b2db      	uxtb	r3, r3
   29860:	71a3      	strb	r3, [r4, #6]
   29862:	b9db      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29864:	7963      	ldrb	r3, [r4, #5]
   29866:	3301      	adds	r3, #1
   29868:	b2db      	uxtb	r3, r3
   2986a:	7163      	strb	r3, [r4, #5]
   2986c:	b9b3      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2986e:	7923      	ldrb	r3, [r4, #4]
   29870:	3301      	adds	r3, #1
   29872:	b2db      	uxtb	r3, r3
   29874:	7123      	strb	r3, [r4, #4]
   29876:	b98b      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29878:	78e3      	ldrb	r3, [r4, #3]
   2987a:	3301      	adds	r3, #1
   2987c:	b2db      	uxtb	r3, r3
   2987e:	70e3      	strb	r3, [r4, #3]
   29880:	b963      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29882:	78a3      	ldrb	r3, [r4, #2]
   29884:	3301      	adds	r3, #1
   29886:	b2db      	uxtb	r3, r3
   29888:	70a3      	strb	r3, [r4, #2]
   2988a:	b93b      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2988c:	7863      	ldrb	r3, [r4, #1]
   2988e:	3301      	adds	r3, #1
   29890:	b2db      	uxtb	r3, r3
   29892:	7063      	strb	r3, [r4, #1]
   29894:	b913      	cbnz	r3, 2989c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29896:	7823      	ldrb	r3, [r4, #0]
   29898:	3301      	adds	r3, #1
   2989a:	7023      	strb	r3, [r4, #0]
   2989c:	463b      	mov	r3, r7
   2989e:	4622      	mov	r2, r4
   298a0:	2101      	movs	r1, #1
   298a2:	4640      	mov	r0, r8
   298a4:	f000 fee0 	bl	2a668 <cc_mbedtls_aes_crypt_ecb>
   298a8:	4683      	mov	fp, r0
   298aa:	2800      	cmp	r0, #0
   298ac:	d093      	beq.n	297d6 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   298ae:	f8da 3000 	ldr.w	r3, [sl]
   298b2:	4648      	mov	r0, r9
   298b4:	4798      	blx	r3
   298b6:	2120      	movs	r1, #32
   298b8:	4603      	mov	r3, r0
   298ba:	a804      	add	r0, sp, #16
   298bc:	2b00      	cmp	r3, #0
   298be:	bf18      	it	ne
   298c0:	469b      	movne	fp, r3
   298c2:	f7ff fc9d 	bl	29200 <mbedtls_platform_zeroize>
   298c6:	4638      	mov	r0, r7
   298c8:	2110      	movs	r1, #16
   298ca:	f7ff fc99 	bl	29200 <mbedtls_platform_zeroize>
   298ce:	4658      	mov	r0, fp
   298d0:	b00d      	add	sp, #52	; 0x34
   298d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298d6:	4642      	mov	r2, r8
   298d8:	4639      	mov	r1, r7
   298da:	2300      	movs	r3, #0
   298dc:	4620      	mov	r0, r4
   298de:	f7ff fe7f 	bl	295e0 <mbedtls_ctr_drbg_reseed_internal>
   298e2:	f8df a068 	ldr.w	sl, [pc, #104]	; 2994c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   298e6:	2800      	cmp	r0, #0
   298e8:	f43f af6d 	beq.w	297c6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   298ec:	f8da 3000 	ldr.w	r3, [sl]
   298f0:	4648      	mov	r0, r9
   298f2:	4798      	blx	r3
   298f4:	4683      	mov	fp, r0
   298f6:	2800      	cmp	r0, #0
   298f8:	f43f af65 	beq.w	297c6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   298fc:	e7e7      	b.n	298ce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   298fe:	a904      	add	r1, sp, #16
   29900:	4620      	mov	r0, r4
   29902:	f7ff fdc7 	bl	29494 <ctr_drbg_update_internal>
   29906:	4683      	mov	fp, r0
   29908:	2800      	cmp	r0, #0
   2990a:	d1d0      	bne.n	298ae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   2990c:	6923      	ldr	r3, [r4, #16]
   2990e:	3301      	adds	r3, #1
   29910:	6123      	str	r3, [r4, #16]
   29912:	e7cc      	b.n	298ae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   29914:	4642      	mov	r2, r8
   29916:	4639      	mov	r1, r7
   29918:	a804      	add	r0, sp, #16
   2991a:	f7ff fc7b 	bl	29214 <block_cipher_df>
   2991e:	4683      	mov	fp, r0
   29920:	b118      	cbz	r0, 2992a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   29922:	f8df a028 	ldr.w	sl, [pc, #40]	; 2994c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   29926:	466f      	mov	r7, sp
   29928:	e7c1      	b.n	298ae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   2992a:	a904      	add	r1, sp, #16
   2992c:	4620      	mov	r0, r4
   2992e:	f7ff fdb1 	bl	29494 <ctr_drbg_update_internal>
   29932:	4683      	mov	fp, r0
   29934:	2800      	cmp	r0, #0
   29936:	f43f af44 	beq.w	297c2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   2993a:	e7f2      	b.n	29922 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   2993c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   29940:	e7c5      	b.n	298ce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   29942:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   29946:	e7c2      	b.n	298ce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   29948:	20000944 	.word	0x20000944
   2994c:	20000948 	.word	0x20000948

00029950 <entropy_update>:
   29950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29954:	2b20      	cmp	r3, #32
   29956:	b08b      	sub	sp, #44	; 0x2c
   29958:	461d      	mov	r5, r3
   2995a:	4606      	mov	r6, r0
   2995c:	4689      	mov	r9, r1
   2995e:	4690      	mov	r8, r2
   29960:	d826      	bhi.n	299b0 <entropy_update+0x60>
   29962:	b2db      	uxtb	r3, r3
   29964:	af02      	add	r7, sp, #8
   29966:	6831      	ldr	r1, [r6, #0]
   29968:	f88d 9004 	strb.w	r9, [sp, #4]
   2996c:	f88d 3005 	strb.w	r3, [sp, #5]
   29970:	f106 0904 	add.w	r9, r6, #4
   29974:	b921      	cbnz	r1, 29980 <entropy_update+0x30>
   29976:	4648      	mov	r0, r9
   29978:	f000 feba 	bl	2a6f0 <cc_mbedtls_sha256_starts>
   2997c:	4604      	mov	r4, r0
   2997e:	b940      	cbnz	r0, 29992 <entropy_update+0x42>
   29980:	2301      	movs	r3, #1
   29982:	6033      	str	r3, [r6, #0]
   29984:	2202      	movs	r2, #2
   29986:	a901      	add	r1, sp, #4
   29988:	4648      	mov	r0, r9
   2998a:	f000 fec5 	bl	2a718 <cc_mbedtls_sha256_update>
   2998e:	4604      	mov	r4, r0
   29990:	b138      	cbz	r0, 299a2 <entropy_update+0x52>
   29992:	4638      	mov	r0, r7
   29994:	2120      	movs	r1, #32
   29996:	f7ff fc33 	bl	29200 <mbedtls_platform_zeroize>
   2999a:	4620      	mov	r0, r4
   2999c:	b00b      	add	sp, #44	; 0x2c
   2999e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   299a2:	462a      	mov	r2, r5
   299a4:	4641      	mov	r1, r8
   299a6:	4648      	mov	r0, r9
   299a8:	f000 feb6 	bl	2a718 <cc_mbedtls_sha256_update>
   299ac:	4604      	mov	r4, r0
   299ae:	e7f0      	b.n	29992 <entropy_update+0x42>
   299b0:	af02      	add	r7, sp, #8
   299b2:	4619      	mov	r1, r3
   299b4:	4610      	mov	r0, r2
   299b6:	2300      	movs	r3, #0
   299b8:	463a      	mov	r2, r7
   299ba:	f000 ffad 	bl	2a918 <cc_mbedtls_sha256>
   299be:	4604      	mov	r4, r0
   299c0:	2800      	cmp	r0, #0
   299c2:	d1e6      	bne.n	29992 <entropy_update+0x42>
   299c4:	2320      	movs	r3, #32
   299c6:	461d      	mov	r5, r3
   299c8:	46b8      	mov	r8, r7
   299ca:	e7cc      	b.n	29966 <entropy_update+0x16>

000299cc <entropy_gather_internal.part.0>:
   299cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   299ce:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   299d2:	b0a7      	sub	sp, #156	; 0x9c
   299d4:	2b00      	cmp	r3, #0
   299d6:	bfd8      	it	le
   299d8:	ae02      	addle	r6, sp, #8
   299da:	dd2c      	ble.n	29a36 <entropy_gather_internal.part.0+0x6a>
   299dc:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   299e0:	4605      	mov	r5, r0
   299e2:	2300      	movs	r3, #0
   299e4:	ae02      	add	r6, sp, #8
   299e6:	9301      	str	r3, [sp, #4]
   299e8:	f1a4 0701 	sub.w	r7, r4, #1
   299ec:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   299f0:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   299f4:	4631      	mov	r1, r6
   299f6:	ab01      	add	r3, sp, #4
   299f8:	2290      	movs	r2, #144	; 0x90
   299fa:	47a0      	blx	r4
   299fc:	fab7 f787 	clz	r7, r7
   29a00:	097f      	lsrs	r7, r7, #5
   29a02:	4604      	mov	r4, r0
   29a04:	b910      	cbnz	r0, 29a0c <entropy_gather_internal.part.0+0x40>
   29a06:	9b01      	ldr	r3, [sp, #4]
   29a08:	b93b      	cbnz	r3, 29a1a <entropy_gather_internal.part.0+0x4e>
   29a0a:	b1a7      	cbz	r7, 29a36 <entropy_gather_internal.part.0+0x6a>
   29a0c:	4630      	mov	r0, r6
   29a0e:	2190      	movs	r1, #144	; 0x90
   29a10:	f7ff fbf6 	bl	29200 <mbedtls_platform_zeroize>
   29a14:	4620      	mov	r0, r4
   29a16:	b027      	add	sp, #156	; 0x9c
   29a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29a1a:	4601      	mov	r1, r0
   29a1c:	4632      	mov	r2, r6
   29a1e:	4628      	mov	r0, r5
   29a20:	f7ff ff96 	bl	29950 <entropy_update>
   29a24:	b950      	cbnz	r0, 29a3c <entropy_gather_internal.part.0+0x70>
   29a26:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   29a2a:	9a01      	ldr	r2, [sp, #4]
   29a2c:	4413      	add	r3, r2
   29a2e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   29a32:	2f00      	cmp	r7, #0
   29a34:	d1ea      	bne.n	29a0c <entropy_gather_internal.part.0+0x40>
   29a36:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   29a3a:	e7e7      	b.n	29a0c <entropy_gather_internal.part.0+0x40>
   29a3c:	4604      	mov	r4, r0
   29a3e:	4620      	mov	r0, r4
   29a40:	b027      	add	sp, #156	; 0x9c
   29a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029a44 <cc_mbedtls_entropy_init>:
   29a44:	b570      	push	{r4, r5, r6, lr}
   29a46:	2500      	movs	r5, #0
   29a48:	4604      	mov	r4, r0
   29a4a:	4629      	mov	r1, r5
   29a4c:	2214      	movs	r2, #20
   29a4e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   29a52:	30f8      	adds	r0, #248	; 0xf8
   29a54:	f003 f93c 	bl	2ccd0 <memset>
   29a58:	4b15      	ldr	r3, [pc, #84]	; (29ab0 <cc_mbedtls_entropy_init+0x6c>)
   29a5a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   29a5e:	681b      	ldr	r3, [r3, #0]
   29a60:	4630      	mov	r0, r6
   29a62:	4798      	blx	r3
   29a64:	4620      	mov	r0, r4
   29a66:	f840 5b04 	str.w	r5, [r0], #4
   29a6a:	f000 fe27 	bl	2a6bc <cc_mbedtls_sha256_init>
   29a6e:	4b11      	ldr	r3, [pc, #68]	; (29ab4 <cc_mbedtls_entropy_init+0x70>)
   29a70:	4630      	mov	r0, r6
   29a72:	681b      	ldr	r3, [r3, #0]
   29a74:	4798      	blx	r3
   29a76:	b9c8      	cbnz	r0, 29aac <cc_mbedtls_entropy_init+0x68>
   29a78:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29a7c:	42ab      	cmp	r3, r5
   29a7e:	dc0f      	bgt.n	29aa0 <cc_mbedtls_entropy_init+0x5c>
   29a80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   29a84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   29a88:	490b      	ldr	r1, [pc, #44]	; (29ab8 <cc_mbedtls_entropy_init+0x74>)
   29a8a:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   29a8e:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   29a92:	3301      	adds	r3, #1
   29a94:	2020      	movs	r0, #32
   29a96:	2101      	movs	r1, #1
   29a98:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   29a9c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   29aa0:	4b06      	ldr	r3, [pc, #24]	; (29abc <cc_mbedtls_entropy_init+0x78>)
   29aa2:	4630      	mov	r0, r6
   29aa4:	681b      	ldr	r3, [r3, #0]
   29aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29aaa:	4718      	bx	r3
   29aac:	bd70      	pop	{r4, r5, r6, pc}
   29aae:	bf00      	nop
   29ab0:	20000940 	.word	0x20000940
   29ab4:	20000944 	.word	0x20000944
   29ab8:	0002a50d 	.word	0x0002a50d
   29abc:	20000948 	.word	0x20000948

00029ac0 <cc_mbedtls_entropy_func>:
   29ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29ac4:	2a20      	cmp	r2, #32
   29ac6:	b088      	sub	sp, #32
   29ac8:	d876      	bhi.n	29bb8 <cc_mbedtls_entropy_func+0xf8>
   29aca:	4b3d      	ldr	r3, [pc, #244]	; (29bc0 <cc_mbedtls_entropy_func+0x100>)
   29acc:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   29ad0:	681b      	ldr	r3, [r3, #0]
   29ad2:	4604      	mov	r4, r0
   29ad4:	4648      	mov	r0, r9
   29ad6:	4617      	mov	r7, r2
   29ad8:	4688      	mov	r8, r1
   29ada:	4798      	blx	r3
   29adc:	4605      	mov	r5, r0
   29ade:	bba0      	cbnz	r0, 29b4a <cc_mbedtls_entropy_func+0x8a>
   29ae0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29ae4:	f240 1601 	movw	r6, #257	; 0x101
   29ae8:	e001      	b.n	29aee <cc_mbedtls_entropy_func+0x2e>
   29aea:	3e01      	subs	r6, #1
   29aec:	d060      	beq.n	29bb0 <cc_mbedtls_entropy_func+0xf0>
   29aee:	4620      	mov	r0, r4
   29af0:	b37b      	cbz	r3, 29b52 <cc_mbedtls_entropy_func+0x92>
   29af2:	f7ff ff6b 	bl	299cc <entropy_gather_internal.part.0>
   29af6:	4605      	mov	r5, r0
   29af8:	bb68      	cbnz	r0, 29b56 <cc_mbedtls_entropy_func+0x96>
   29afa:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29afe:	2b00      	cmp	r3, #0
   29b00:	ddf3      	ble.n	29aea <cc_mbedtls_entropy_func+0x2a>
   29b02:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   29b06:	4290      	cmp	r0, r2
   29b08:	d3ef      	bcc.n	29aea <cc_mbedtls_entropy_func+0x2a>
   29b0a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   29b0e:	2a01      	cmp	r2, #1
   29b10:	d1eb      	bne.n	29aea <cc_mbedtls_entropy_func+0x2a>
   29b12:	281f      	cmp	r0, #31
   29b14:	d9e9      	bls.n	29aea <cc_mbedtls_entropy_func+0x2a>
   29b16:	466e      	mov	r6, sp
   29b18:	4629      	mov	r1, r5
   29b1a:	2220      	movs	r2, #32
   29b1c:	4630      	mov	r0, r6
   29b1e:	f104 0a04 	add.w	sl, r4, #4
   29b22:	f003 f8d5 	bl	2ccd0 <memset>
   29b26:	4631      	mov	r1, r6
   29b28:	4650      	mov	r0, sl
   29b2a:	f000 fe1f 	bl	2a76c <cc_mbedtls_sha256_finish>
   29b2e:	4605      	mov	r5, r0
   29b30:	b198      	cbz	r0, 29b5a <cc_mbedtls_entropy_func+0x9a>
   29b32:	4630      	mov	r0, r6
   29b34:	2120      	movs	r1, #32
   29b36:	f7ff fb63 	bl	29200 <mbedtls_platform_zeroize>
   29b3a:	4b22      	ldr	r3, [pc, #136]	; (29bc4 <cc_mbedtls_entropy_func+0x104>)
   29b3c:	4648      	mov	r0, r9
   29b3e:	681b      	ldr	r3, [r3, #0]
   29b40:	4798      	blx	r3
   29b42:	2800      	cmp	r0, #0
   29b44:	bf18      	it	ne
   29b46:	f06f 051d 	mvnne.w	r5, #29
   29b4a:	4628      	mov	r0, r5
   29b4c:	b008      	add	sp, #32
   29b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29b52:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   29b56:	466e      	mov	r6, sp
   29b58:	e7eb      	b.n	29b32 <cc_mbedtls_entropy_func+0x72>
   29b5a:	4650      	mov	r0, sl
   29b5c:	f000 fdc2 	bl	2a6e4 <cc_mbedtls_sha256_free>
   29b60:	4650      	mov	r0, sl
   29b62:	f000 fdab 	bl	2a6bc <cc_mbedtls_sha256_init>
   29b66:	4629      	mov	r1, r5
   29b68:	4650      	mov	r0, sl
   29b6a:	f000 fdc1 	bl	2a6f0 <cc_mbedtls_sha256_starts>
   29b6e:	4605      	mov	r5, r0
   29b70:	2800      	cmp	r0, #0
   29b72:	d1de      	bne.n	29b32 <cc_mbedtls_entropy_func+0x72>
   29b74:	4650      	mov	r0, sl
   29b76:	2220      	movs	r2, #32
   29b78:	4631      	mov	r1, r6
   29b7a:	f000 fdcd 	bl	2a718 <cc_mbedtls_sha256_update>
   29b7e:	4605      	mov	r5, r0
   29b80:	2800      	cmp	r0, #0
   29b82:	d1d6      	bne.n	29b32 <cc_mbedtls_entropy_func+0x72>
   29b84:	4603      	mov	r3, r0
   29b86:	4632      	mov	r2, r6
   29b88:	2120      	movs	r1, #32
   29b8a:	4630      	mov	r0, r6
   29b8c:	f000 fec4 	bl	2a918 <cc_mbedtls_sha256>
   29b90:	4605      	mov	r5, r0
   29b92:	2800      	cmp	r0, #0
   29b94:	d1cd      	bne.n	29b32 <cc_mbedtls_entropy_func+0x72>
   29b96:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29b9a:	2b00      	cmp	r3, #0
   29b9c:	bfc4      	itt	gt
   29b9e:	2300      	movgt	r3, #0
   29ba0:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   29ba4:	463a      	mov	r2, r7
   29ba6:	4640      	mov	r0, r8
   29ba8:	4631      	mov	r1, r6
   29baa:	f003 f886 	bl	2ccba <memcpy>
   29bae:	e7c0      	b.n	29b32 <cc_mbedtls_entropy_func+0x72>
   29bb0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   29bb4:	466e      	mov	r6, sp
   29bb6:	e7bc      	b.n	29b32 <cc_mbedtls_entropy_func+0x72>
   29bb8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   29bbc:	e7c5      	b.n	29b4a <cc_mbedtls_entropy_func+0x8a>
   29bbe:	bf00      	nop
   29bc0:	20000944 	.word	0x20000944
   29bc4:	20000948 	.word	0x20000948

00029bc8 <RndStartupTest.constprop.0>:
   29bc8:	b530      	push	{r4, r5, lr}
   29bca:	b0c3      	sub	sp, #268	; 0x10c
   29bcc:	22dc      	movs	r2, #220	; 0xdc
   29bce:	2100      	movs	r1, #0
   29bd0:	a80b      	add	r0, sp, #44	; 0x2c
   29bd2:	f003 f87d 	bl	2ccd0 <memset>
   29bd6:	2228      	movs	r2, #40	; 0x28
   29bd8:	2100      	movs	r1, #0
   29bda:	a801      	add	r0, sp, #4
   29bdc:	f003 f878 	bl	2ccd0 <memset>
   29be0:	a801      	add	r0, sp, #4
   29be2:	f000 fec1 	bl	2a968 <RNG_PLAT_SetUserRngParameters>
   29be6:	4604      	mov	r4, r0
   29be8:	b110      	cbz	r0, 29bf0 <RndStartupTest.constprop.0+0x28>
   29bea:	4620      	mov	r0, r4
   29bec:	b043      	add	sp, #268	; 0x10c
   29bee:	bd30      	pop	{r4, r5, pc}
   29bf0:	4d18      	ldr	r5, [pc, #96]	; (29c54 <RndStartupTest.constprop.0+0x8c>)
   29bf2:	f04f 31ff 	mov.w	r1, #4294967295
   29bf6:	6828      	ldr	r0, [r5, #0]
   29bf8:	f000 f93c 	bl	29e74 <CC_PalMutexLock>
   29bfc:	4604      	mov	r4, r0
   29bfe:	b9c0      	cbnz	r0, 29c32 <RndStartupTest.constprop.0+0x6a>
   29c00:	2000      	movs	r0, #0
   29c02:	f000 f967 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   29c06:	bb00      	cbnz	r0, 29c4a <RndStartupTest.constprop.0+0x82>
   29c08:	4a13      	ldr	r2, [pc, #76]	; (29c58 <RndStartupTest.constprop.0+0x90>)
   29c0a:	a901      	add	r1, sp, #4
   29c0c:	a80b      	add	r0, sp, #44	; 0x2c
   29c0e:	f000 fc6f 	bl	2a4f0 <LLF_RND_RunTrngStartupTest>
   29c12:	4604      	mov	r4, r0
   29c14:	2001      	movs	r0, #1
   29c16:	f000 f95d 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   29c1a:	b990      	cbnz	r0, 29c42 <RndStartupTest.constprop.0+0x7a>
   29c1c:	6828      	ldr	r0, [r5, #0]
   29c1e:	f000 f931 	bl	29e84 <CC_PalMutexUnlock>
   29c22:	2800      	cmp	r0, #0
   29c24:	d0e1      	beq.n	29bea <RndStartupTest.constprop.0+0x22>
   29c26:	480d      	ldr	r0, [pc, #52]	; (29c5c <RndStartupTest.constprop.0+0x94>)
   29c28:	f7ff f9d8 	bl	28fdc <CC_PalAbort>
   29c2c:	4620      	mov	r0, r4
   29c2e:	b043      	add	sp, #268	; 0x10c
   29c30:	bd30      	pop	{r4, r5, pc}
   29c32:	480b      	ldr	r0, [pc, #44]	; (29c60 <RndStartupTest.constprop.0+0x98>)
   29c34:	f7ff f9d2 	bl	28fdc <CC_PalAbort>
   29c38:	2c01      	cmp	r4, #1
   29c3a:	bf08      	it	eq
   29c3c:	2405      	moveq	r4, #5
   29c3e:	d0ed      	beq.n	29c1c <RndStartupTest.constprop.0+0x54>
   29c40:	e7de      	b.n	29c00 <RndStartupTest.constprop.0+0x38>
   29c42:	4808      	ldr	r0, [pc, #32]	; (29c64 <RndStartupTest.constprop.0+0x9c>)
   29c44:	f7ff f9ca 	bl	28fdc <CC_PalAbort>
   29c48:	e7e8      	b.n	29c1c <RndStartupTest.constprop.0+0x54>
   29c4a:	4807      	ldr	r0, [pc, #28]	; (29c68 <RndStartupTest.constprop.0+0xa0>)
   29c4c:	f7ff f9c6 	bl	28fdc <CC_PalAbort>
   29c50:	e7da      	b.n	29c08 <RndStartupTest.constprop.0+0x40>
   29c52:	bf00      	nop
   29c54:	2000093c 	.word	0x2000093c
   29c58:	200030ac 	.word	0x200030ac
   29c5c:	00032e3c 	.word	0x00032e3c
   29c60:	00032de4 	.word	0x00032de4
   29c64:	00032e1c 	.word	0x00032e1c
   29c68:	00032dfc 	.word	0x00032dfc

00029c6c <CC_LibInit>:
   29c6c:	b510      	push	{r4, lr}
   29c6e:	b082      	sub	sp, #8
   29c70:	f000 f854 	bl	29d1c <CC_HalInit>
   29c74:	b128      	cbz	r0, 29c82 <CC_LibInit+0x16>
   29c76:	f000 f8a3 	bl	29dc0 <CC_PalTerminate>
   29c7a:	2403      	movs	r4, #3
   29c7c:	4620      	mov	r0, r4
   29c7e:	b002      	add	sp, #8
   29c80:	bd10      	pop	{r4, pc}
   29c82:	f000 f86f 	bl	29d64 <CC_PalInit>
   29c86:	b9d0      	cbnz	r0, 29cbe <CC_LibInit+0x52>
   29c88:	f000 f924 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   29c8c:	b9d8      	cbnz	r0, 29cc6 <CC_LibInit+0x5a>
   29c8e:	4b1e      	ldr	r3, [pc, #120]	; (29d08 <CC_LibInit+0x9c>)
   29c90:	681b      	ldr	r3, [r3, #0]
   29c92:	0e1b      	lsrs	r3, r3, #24
   29c94:	2bf0      	cmp	r3, #240	; 0xf0
   29c96:	d10a      	bne.n	29cae <CC_LibInit+0x42>
   29c98:	4a1c      	ldr	r2, [pc, #112]	; (29d0c <CC_LibInit+0xa0>)
   29c9a:	4b1d      	ldr	r3, [pc, #116]	; (29d10 <CC_LibInit+0xa4>)
   29c9c:	6812      	ldr	r2, [r2, #0]
   29c9e:	429a      	cmp	r2, r3
   29ca0:	d029      	beq.n	29cf6 <CC_LibInit+0x8a>
   29ca2:	f000 f83d 	bl	29d20 <CC_HalTerminate>
   29ca6:	2407      	movs	r4, #7
   29ca8:	f000 f88a 	bl	29dc0 <CC_PalTerminate>
   29cac:	e7e6      	b.n	29c7c <CC_LibInit+0x10>
   29cae:	f000 f837 	bl	29d20 <CC_HalTerminate>
   29cb2:	f000 f885 	bl	29dc0 <CC_PalTerminate>
   29cb6:	2406      	movs	r4, #6
   29cb8:	4620      	mov	r0, r4
   29cba:	b002      	add	sp, #8
   29cbc:	bd10      	pop	{r4, pc}
   29cbe:	2404      	movs	r4, #4
   29cc0:	4620      	mov	r0, r4
   29cc2:	b002      	add	sp, #8
   29cc4:	bd10      	pop	{r4, pc}
   29cc6:	f000 f82b 	bl	29d20 <CC_HalTerminate>
   29cca:	f000 f879 	bl	29dc0 <CC_PalTerminate>
   29cce:	f7ff ff7b 	bl	29bc8 <RndStartupTest.constprop.0>
   29cd2:	4604      	mov	r4, r0
   29cd4:	b958      	cbnz	r0, 29cee <CC_LibInit+0x82>
   29cd6:	4602      	mov	r2, r0
   29cd8:	4601      	mov	r1, r0
   29cda:	f7ff f9a7 	bl	2902c <nrf_cc3xx_platform_ctr_drbg_init>
   29cde:	b930      	cbnz	r0, 29cee <CC_LibInit+0x82>
   29ce0:	490c      	ldr	r1, [pc, #48]	; (29d14 <CC_LibInit+0xa8>)
   29ce2:	ab01      	add	r3, sp, #4
   29ce4:	2268      	movs	r2, #104	; 0x68
   29ce6:	f7ff f9d5 	bl	29094 <nrf_cc3xx_platform_ctr_drbg_get>
   29cea:	2800      	cmp	r0, #0
   29cec:	d0c6      	beq.n	29c7c <CC_LibInit+0x10>
   29cee:	2405      	movs	r4, #5
   29cf0:	4620      	mov	r0, r4
   29cf2:	b002      	add	sp, #8
   29cf4:	bd10      	pop	{r4, pc}
   29cf6:	2001      	movs	r0, #1
   29cf8:	f000 f8ec 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   29cfc:	2800      	cmp	r0, #0
   29cfe:	d1e2      	bne.n	29cc6 <CC_LibInit+0x5a>
   29d00:	4b05      	ldr	r3, [pc, #20]	; (29d18 <CC_LibInit+0xac>)
   29d02:	6018      	str	r0, [r3, #0]
   29d04:	e7e3      	b.n	29cce <CC_LibInit+0x62>
   29d06:	bf00      	nop
   29d08:	5002b928 	.word	0x5002b928
   29d0c:	5002ba24 	.word	0x5002ba24
   29d10:	20e00000 	.word	0x20e00000
   29d14:	20003044 	.word	0x20003044
   29d18:	5002ba0c 	.word	0x5002ba0c

00029d1c <CC_HalInit>:
   29d1c:	2000      	movs	r0, #0
   29d1e:	4770      	bx	lr

00029d20 <CC_HalTerminate>:
   29d20:	2000      	movs	r0, #0
   29d22:	4770      	bx	lr

00029d24 <CC_HalClearInterruptBit>:
   29d24:	0543      	lsls	r3, r0, #21
   29d26:	d503      	bpl.n	29d30 <CC_HalClearInterruptBit+0xc>
   29d28:	4b03      	ldr	r3, [pc, #12]	; (29d38 <CC_HalClearInterruptBit+0x14>)
   29d2a:	f04f 32ff 	mov.w	r2, #4294967295
   29d2e:	601a      	str	r2, [r3, #0]
   29d30:	4b02      	ldr	r3, [pc, #8]	; (29d3c <CC_HalClearInterruptBit+0x18>)
   29d32:	6018      	str	r0, [r3, #0]
   29d34:	4770      	bx	lr
   29d36:	bf00      	nop
   29d38:	5002b108 	.word	0x5002b108
   29d3c:	5002ba08 	.word	0x5002ba08

00029d40 <CC_HalMaskInterrupt>:
   29d40:	4b01      	ldr	r3, [pc, #4]	; (29d48 <CC_HalMaskInterrupt+0x8>)
   29d42:	6018      	str	r0, [r3, #0]
   29d44:	4770      	bx	lr
   29d46:	bf00      	nop
   29d48:	5002ba04 	.word	0x5002ba04

00029d4c <CC_HalWaitInterrupt>:
   29d4c:	b108      	cbz	r0, 29d52 <CC_HalWaitInterrupt+0x6>
   29d4e:	f000 b86f 	b.w	29e30 <CC_PalWaitInterrupt>
   29d52:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   29d56:	4770      	bx	lr

00029d58 <CC_HalWaitInterruptRND>:
   29d58:	b108      	cbz	r0, 29d5e <CC_HalWaitInterruptRND+0x6>
   29d5a:	f000 b84f 	b.w	29dfc <CC_PalWaitInterruptRND>
   29d5e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   29d62:	4770      	bx	lr

00029d64 <CC_PalInit>:
   29d64:	b510      	push	{r4, lr}
   29d66:	4811      	ldr	r0, [pc, #68]	; (29dac <CC_PalInit+0x48>)
   29d68:	f000 f870 	bl	29e4c <CC_PalMutexCreate>
   29d6c:	b100      	cbz	r0, 29d70 <CC_PalInit+0xc>
   29d6e:	bd10      	pop	{r4, pc}
   29d70:	480f      	ldr	r0, [pc, #60]	; (29db0 <CC_PalInit+0x4c>)
   29d72:	f000 f86b 	bl	29e4c <CC_PalMutexCreate>
   29d76:	2800      	cmp	r0, #0
   29d78:	d1f9      	bne.n	29d6e <CC_PalInit+0xa>
   29d7a:	4c0e      	ldr	r4, [pc, #56]	; (29db4 <CC_PalInit+0x50>)
   29d7c:	4620      	mov	r0, r4
   29d7e:	f000 f865 	bl	29e4c <CC_PalMutexCreate>
   29d82:	2800      	cmp	r0, #0
   29d84:	d1f3      	bne.n	29d6e <CC_PalInit+0xa>
   29d86:	4b0c      	ldr	r3, [pc, #48]	; (29db8 <CC_PalInit+0x54>)
   29d88:	480c      	ldr	r0, [pc, #48]	; (29dbc <CC_PalInit+0x58>)
   29d8a:	601c      	str	r4, [r3, #0]
   29d8c:	f000 f85e 	bl	29e4c <CC_PalMutexCreate>
   29d90:	4601      	mov	r1, r0
   29d92:	2800      	cmp	r0, #0
   29d94:	d1eb      	bne.n	29d6e <CC_PalInit+0xa>
   29d96:	f000 f82d 	bl	29df4 <CC_PalDmaInit>
   29d9a:	4604      	mov	r4, r0
   29d9c:	b108      	cbz	r0, 29da2 <CC_PalInit+0x3e>
   29d9e:	4620      	mov	r0, r4
   29da0:	bd10      	pop	{r4, pc}
   29da2:	f000 f879 	bl	29e98 <CC_PalPowerSaveModeInit>
   29da6:	4620      	mov	r0, r4
   29da8:	e7fa      	b.n	29da0 <CC_PalInit+0x3c>
   29daa:	bf00      	nop
   29dac:	20000938 	.word	0x20000938
   29db0:	2000092c 	.word	0x2000092c
   29db4:	20000934 	.word	0x20000934
   29db8:	2000093c 	.word	0x2000093c
   29dbc:	20000930 	.word	0x20000930

00029dc0 <CC_PalTerminate>:
   29dc0:	b508      	push	{r3, lr}
   29dc2:	4808      	ldr	r0, [pc, #32]	; (29de4 <CC_PalTerminate+0x24>)
   29dc4:	f000 f84c 	bl	29e60 <CC_PalMutexDestroy>
   29dc8:	4807      	ldr	r0, [pc, #28]	; (29de8 <CC_PalTerminate+0x28>)
   29dca:	f000 f849 	bl	29e60 <CC_PalMutexDestroy>
   29dce:	4807      	ldr	r0, [pc, #28]	; (29dec <CC_PalTerminate+0x2c>)
   29dd0:	f000 f846 	bl	29e60 <CC_PalMutexDestroy>
   29dd4:	4806      	ldr	r0, [pc, #24]	; (29df0 <CC_PalTerminate+0x30>)
   29dd6:	f000 f843 	bl	29e60 <CC_PalMutexDestroy>
   29dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29dde:	f000 b80b 	b.w	29df8 <CC_PalDmaTerminate>
   29de2:	bf00      	nop
   29de4:	20000938 	.word	0x20000938
   29de8:	2000092c 	.word	0x2000092c
   29dec:	20000934 	.word	0x20000934
   29df0:	20000930 	.word	0x20000930

00029df4 <CC_PalDmaInit>:
   29df4:	2000      	movs	r0, #0
   29df6:	4770      	bx	lr

00029df8 <CC_PalDmaTerminate>:
   29df8:	4770      	bx	lr
   29dfa:	bf00      	nop

00029dfc <CC_PalWaitInterruptRND>:
   29dfc:	b410      	push	{r4}
   29dfe:	4c08      	ldr	r4, [pc, #32]	; (29e20 <CC_PalWaitInterruptRND+0x24>)
   29e00:	4602      	mov	r2, r0
   29e02:	6823      	ldr	r3, [r4, #0]
   29e04:	4213      	tst	r3, r2
   29e06:	d0fc      	beq.n	29e02 <CC_PalWaitInterruptRND+0x6>
   29e08:	b121      	cbz	r1, 29e14 <CC_PalWaitInterruptRND+0x18>
   29e0a:	4b06      	ldr	r3, [pc, #24]	; (29e24 <CC_PalWaitInterruptRND+0x28>)
   29e0c:	4806      	ldr	r0, [pc, #24]	; (29e28 <CC_PalWaitInterruptRND+0x2c>)
   29e0e:	681b      	ldr	r3, [r3, #0]
   29e10:	600b      	str	r3, [r1, #0]
   29e12:	6003      	str	r3, [r0, #0]
   29e14:	4b05      	ldr	r3, [pc, #20]	; (29e2c <CC_PalWaitInterruptRND+0x30>)
   29e16:	601a      	str	r2, [r3, #0]
   29e18:	2000      	movs	r0, #0
   29e1a:	bc10      	pop	{r4}
   29e1c:	4770      	bx	lr
   29e1e:	bf00      	nop
   29e20:	5002ba00 	.word	0x5002ba00
   29e24:	5002b104 	.word	0x5002b104
   29e28:	5002b108 	.word	0x5002b108
   29e2c:	5002ba08 	.word	0x5002ba08

00029e30 <CC_PalWaitInterrupt>:
   29e30:	4904      	ldr	r1, [pc, #16]	; (29e44 <CC_PalWaitInterrupt+0x14>)
   29e32:	4602      	mov	r2, r0
   29e34:	680b      	ldr	r3, [r1, #0]
   29e36:	421a      	tst	r2, r3
   29e38:	d0fc      	beq.n	29e34 <CC_PalWaitInterrupt+0x4>
   29e3a:	4b03      	ldr	r3, [pc, #12]	; (29e48 <CC_PalWaitInterrupt+0x18>)
   29e3c:	2000      	movs	r0, #0
   29e3e:	601a      	str	r2, [r3, #0]
   29e40:	4770      	bx	lr
   29e42:	bf00      	nop
   29e44:	5002ba00 	.word	0x5002ba00
   29e48:	5002ba08 	.word	0x5002ba08

00029e4c <CC_PalMutexCreate>:
   29e4c:	b508      	push	{r3, lr}
   29e4e:	4b03      	ldr	r3, [pc, #12]	; (29e5c <CC_PalMutexCreate+0x10>)
   29e50:	6802      	ldr	r2, [r0, #0]
   29e52:	681b      	ldr	r3, [r3, #0]
   29e54:	6810      	ldr	r0, [r2, #0]
   29e56:	4798      	blx	r3
   29e58:	2000      	movs	r0, #0
   29e5a:	bd08      	pop	{r3, pc}
   29e5c:	200008ec 	.word	0x200008ec

00029e60 <CC_PalMutexDestroy>:
   29e60:	b508      	push	{r3, lr}
   29e62:	4b03      	ldr	r3, [pc, #12]	; (29e70 <CC_PalMutexDestroy+0x10>)
   29e64:	6802      	ldr	r2, [r0, #0]
   29e66:	685b      	ldr	r3, [r3, #4]
   29e68:	6810      	ldr	r0, [r2, #0]
   29e6a:	4798      	blx	r3
   29e6c:	2000      	movs	r0, #0
   29e6e:	bd08      	pop	{r3, pc}
   29e70:	200008ec 	.word	0x200008ec

00029e74 <CC_PalMutexLock>:
   29e74:	4b02      	ldr	r3, [pc, #8]	; (29e80 <CC_PalMutexLock+0xc>)
   29e76:	6802      	ldr	r2, [r0, #0]
   29e78:	689b      	ldr	r3, [r3, #8]
   29e7a:	6810      	ldr	r0, [r2, #0]
   29e7c:	4718      	bx	r3
   29e7e:	bf00      	nop
   29e80:	200008ec 	.word	0x200008ec

00029e84 <CC_PalMutexUnlock>:
   29e84:	b508      	push	{r3, lr}
   29e86:	4b03      	ldr	r3, [pc, #12]	; (29e94 <CC_PalMutexUnlock+0x10>)
   29e88:	6802      	ldr	r2, [r0, #0]
   29e8a:	68db      	ldr	r3, [r3, #12]
   29e8c:	6810      	ldr	r0, [r2, #0]
   29e8e:	4798      	blx	r3
   29e90:	2000      	movs	r0, #0
   29e92:	bd08      	pop	{r3, pc}
   29e94:	200008ec 	.word	0x200008ec

00029e98 <CC_PalPowerSaveModeInit>:
   29e98:	b570      	push	{r4, r5, r6, lr}
   29e9a:	4c09      	ldr	r4, [pc, #36]	; (29ec0 <CC_PalPowerSaveModeInit+0x28>)
   29e9c:	4d09      	ldr	r5, [pc, #36]	; (29ec4 <CC_PalPowerSaveModeInit+0x2c>)
   29e9e:	6920      	ldr	r0, [r4, #16]
   29ea0:	68ab      	ldr	r3, [r5, #8]
   29ea2:	4798      	blx	r3
   29ea4:	b118      	cbz	r0, 29eae <CC_PalPowerSaveModeInit+0x16>
   29ea6:	4b08      	ldr	r3, [pc, #32]	; (29ec8 <CC_PalPowerSaveModeInit+0x30>)
   29ea8:	4808      	ldr	r0, [pc, #32]	; (29ecc <CC_PalPowerSaveModeInit+0x34>)
   29eaa:	685b      	ldr	r3, [r3, #4]
   29eac:	4798      	blx	r3
   29eae:	4a08      	ldr	r2, [pc, #32]	; (29ed0 <CC_PalPowerSaveModeInit+0x38>)
   29eb0:	68eb      	ldr	r3, [r5, #12]
   29eb2:	6920      	ldr	r0, [r4, #16]
   29eb4:	2100      	movs	r1, #0
   29eb6:	6011      	str	r1, [r2, #0]
   29eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29ebc:	4718      	bx	r3
   29ebe:	bf00      	nop
   29ec0:	200008fc 	.word	0x200008fc
   29ec4:	200008ec 	.word	0x200008ec
   29ec8:	200008dc 	.word	0x200008dc
   29ecc:	00032e54 	.word	0x00032e54
   29ed0:	200032cc 	.word	0x200032cc

00029ed4 <CC_PalPowerSaveModeSelect>:
   29ed4:	b570      	push	{r4, r5, r6, lr}
   29ed6:	4d1a      	ldr	r5, [pc, #104]	; (29f40 <CC_PalPowerSaveModeSelect+0x6c>)
   29ed8:	4e1a      	ldr	r6, [pc, #104]	; (29f44 <CC_PalPowerSaveModeSelect+0x70>)
   29eda:	4604      	mov	r4, r0
   29edc:	68b2      	ldr	r2, [r6, #8]
   29ede:	6928      	ldr	r0, [r5, #16]
   29ee0:	4790      	blx	r2
   29ee2:	b9f0      	cbnz	r0, 29f22 <CC_PalPowerSaveModeSelect+0x4e>
   29ee4:	b15c      	cbz	r4, 29efe <CC_PalPowerSaveModeSelect+0x2a>
   29ee6:	4c18      	ldr	r4, [pc, #96]	; (29f48 <CC_PalPowerSaveModeSelect+0x74>)
   29ee8:	6823      	ldr	r3, [r4, #0]
   29eea:	b1ab      	cbz	r3, 29f18 <CC_PalPowerSaveModeSelect+0x44>
   29eec:	2b01      	cmp	r3, #1
   29eee:	d01a      	beq.n	29f26 <CC_PalPowerSaveModeSelect+0x52>
   29ef0:	3b01      	subs	r3, #1
   29ef2:	6023      	str	r3, [r4, #0]
   29ef4:	6928      	ldr	r0, [r5, #16]
   29ef6:	68f3      	ldr	r3, [r6, #12]
   29ef8:	4798      	blx	r3
   29efa:	2000      	movs	r0, #0
   29efc:	bd70      	pop	{r4, r5, r6, pc}
   29efe:	4c12      	ldr	r4, [pc, #72]	; (29f48 <CC_PalPowerSaveModeSelect+0x74>)
   29f00:	6821      	ldr	r1, [r4, #0]
   29f02:	b939      	cbnz	r1, 29f14 <CC_PalPowerSaveModeSelect+0x40>
   29f04:	4b11      	ldr	r3, [pc, #68]	; (29f4c <CC_PalPowerSaveModeSelect+0x78>)
   29f06:	4a12      	ldr	r2, [pc, #72]	; (29f50 <CC_PalPowerSaveModeSelect+0x7c>)
   29f08:	2001      	movs	r0, #1
   29f0a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   29f0e:	6813      	ldr	r3, [r2, #0]
   29f10:	2b00      	cmp	r3, #0
   29f12:	d1fc      	bne.n	29f0e <CC_PalPowerSaveModeSelect+0x3a>
   29f14:	3101      	adds	r1, #1
   29f16:	6021      	str	r1, [r4, #0]
   29f18:	68f3      	ldr	r3, [r6, #12]
   29f1a:	6928      	ldr	r0, [r5, #16]
   29f1c:	4798      	blx	r3
   29f1e:	2000      	movs	r0, #0
   29f20:	bd70      	pop	{r4, r5, r6, pc}
   29f22:	480c      	ldr	r0, [pc, #48]	; (29f54 <CC_PalPowerSaveModeSelect+0x80>)
   29f24:	bd70      	pop	{r4, r5, r6, pc}
   29f26:	4a0a      	ldr	r2, [pc, #40]	; (29f50 <CC_PalPowerSaveModeSelect+0x7c>)
   29f28:	6813      	ldr	r3, [r2, #0]
   29f2a:	2b00      	cmp	r3, #0
   29f2c:	d1fc      	bne.n	29f28 <CC_PalPowerSaveModeSelect+0x54>
   29f2e:	4a07      	ldr	r2, [pc, #28]	; (29f4c <CC_PalPowerSaveModeSelect+0x78>)
   29f30:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   29f34:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   29f38:	f7ff ff02 	bl	29d40 <CC_HalMaskInterrupt>
   29f3c:	6823      	ldr	r3, [r4, #0]
   29f3e:	e7d7      	b.n	29ef0 <CC_PalPowerSaveModeSelect+0x1c>
   29f40:	200008fc 	.word	0x200008fc
   29f44:	200008ec 	.word	0x200008ec
   29f48:	200032cc 	.word	0x200032cc
   29f4c:	5002a000 	.word	0x5002a000
   29f50:	5002b910 	.word	0x5002b910
   29f54:	ffff8fe9 	.word	0xffff8fe9

00029f58 <mutex_init>:
   29f58:	4b01      	ldr	r3, [pc, #4]	; (29f60 <mutex_init+0x8>)
   29f5a:	681b      	ldr	r3, [r3, #0]
   29f5c:	4718      	bx	r3
   29f5e:	bf00      	nop
   29f60:	200008ec 	.word	0x200008ec

00029f64 <mutex_lock>:
   29f64:	4b01      	ldr	r3, [pc, #4]	; (29f6c <mutex_lock+0x8>)
   29f66:	689b      	ldr	r3, [r3, #8]
   29f68:	4718      	bx	r3
   29f6a:	bf00      	nop
   29f6c:	200008ec 	.word	0x200008ec

00029f70 <mutex_unlock>:
   29f70:	4b01      	ldr	r3, [pc, #4]	; (29f78 <mutex_unlock+0x8>)
   29f72:	68db      	ldr	r3, [r3, #12]
   29f74:	4718      	bx	r3
   29f76:	bf00      	nop
   29f78:	200008ec 	.word	0x200008ec

00029f7c <startTrngHW>:
   29f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29f80:	2800      	cmp	r0, #0
   29f82:	d07b      	beq.n	2a07c <startTrngHW+0x100>
   29f84:	460c      	mov	r4, r1
   29f86:	2900      	cmp	r1, #0
   29f88:	d078      	beq.n	2a07c <startTrngHW+0x100>
   29f8a:	461d      	mov	r5, r3
   29f8c:	2b00      	cmp	r3, #0
   29f8e:	d075      	beq.n	2a07c <startTrngHW+0x100>
   29f90:	4606      	mov	r6, r0
   29f92:	b122      	cbz	r2, 29f9e <startTrngHW+0x22>
   29f94:	2201      	movs	r2, #1
   29f96:	2300      	movs	r3, #0
   29f98:	602a      	str	r2, [r5, #0]
   29f9a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   29f9e:	682b      	ldr	r3, [r5, #0]
   29fa0:	2b00      	cmp	r3, #0
   29fa2:	d067      	beq.n	2a074 <startTrngHW+0xf8>
   29fa4:	4629      	mov	r1, r5
   29fa6:	4620      	mov	r0, r4
   29fa8:	f000 fda4 	bl	2aaf4 <LLF_RND_GetFastestRosc>
   29fac:	4607      	mov	r7, r0
   29fae:	2800      	cmp	r0, #0
   29fb0:	d161      	bne.n	2a076 <startTrngHW+0xfa>
   29fb2:	6828      	ldr	r0, [r5, #0]
   29fb4:	4621      	mov	r1, r4
   29fb6:	f000 fd7f 	bl	2aab8 <LLF_RND_GetRoscSampleCnt>
   29fba:	4607      	mov	r7, r0
   29fbc:	2800      	cmp	r0, #0
   29fbe:	d15a      	bne.n	2a076 <startTrngHW+0xfa>
   29fc0:	682b      	ldr	r3, [r5, #0]
   29fc2:	2b08      	cmp	r3, #8
   29fc4:	d069      	beq.n	2a09a <startTrngHW+0x11e>
   29fc6:	2b04      	cmp	r3, #4
   29fc8:	d06a      	beq.n	2a0a0 <startTrngHW+0x124>
   29fca:	f1a3 0802 	sub.w	r8, r3, #2
   29fce:	fab8 f888 	clz	r8, r8
   29fd2:	ea4f 1858 	mov.w	r8, r8, lsr #5
   29fd6:	4b34      	ldr	r3, [pc, #208]	; (2a0a8 <startTrngHW+0x12c>)
   29fd8:	4934      	ldr	r1, [pc, #208]	; (2a0ac <startTrngHW+0x130>)
   29fda:	4a35      	ldr	r2, [pc, #212]	; (2a0b0 <startTrngHW+0x134>)
   29fdc:	2001      	movs	r0, #1
   29fde:	6018      	str	r0, [r3, #0]
   29fe0:	469c      	mov	ip, r3
   29fe2:	6008      	str	r0, [r1, #0]
   29fe4:	f8cc 0000 	str.w	r0, [ip]
   29fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29fea:	6013      	str	r3, [r2, #0]
   29fec:	6811      	ldr	r1, [r2, #0]
   29fee:	428b      	cmp	r3, r1
   29ff0:	d1f8      	bne.n	29fe4 <startTrngHW+0x68>
   29ff2:	4b30      	ldr	r3, [pc, #192]	; (2a0b4 <startTrngHW+0x138>)
   29ff4:	f04f 0900 	mov.w	r9, #0
   29ff8:	f8c3 9000 	str.w	r9, [r3]
   29ffc:	f04f 30ff 	mov.w	r0, #4294967295
   2a000:	f7ff fe90 	bl	29d24 <CC_HalClearInterruptBit>
   2a004:	4b2c      	ldr	r3, [pc, #176]	; (2a0b8 <startTrngHW+0x13c>)
   2a006:	f06f 021b 	mvn.w	r2, #27
   2a00a:	601a      	str	r2, [r3, #0]
   2a00c:	4648      	mov	r0, r9
   2a00e:	f7ff fe97 	bl	29d40 <CC_HalMaskInterrupt>
   2a012:	4a2a      	ldr	r2, [pc, #168]	; (2a0bc <startTrngHW+0x140>)
   2a014:	4b2a      	ldr	r3, [pc, #168]	; (2a0c0 <startTrngHW+0x144>)
   2a016:	f8c2 8000 	str.w	r8, [r2]
   2a01a:	6818      	ldr	r0, [r3, #0]
   2a01c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2a020:	f7ff fe8e 	bl	29d40 <CC_HalMaskInterrupt>
   2a024:	4b27      	ldr	r3, [pc, #156]	; (2a0c4 <startTrngHW+0x148>)
   2a026:	220a      	movs	r2, #10
   2a028:	601a      	str	r2, [r3, #0]
   2a02a:	9908      	ldr	r1, [sp, #32]
   2a02c:	6923      	ldr	r3, [r4, #16]
   2a02e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2a030:	2901      	cmp	r1, #1
   2a032:	d027      	beq.n	2a084 <startTrngHW+0x108>
   2a034:	4924      	ldr	r1, [pc, #144]	; (2a0c8 <startTrngHW+0x14c>)
   2a036:	fba1 1303 	umull	r1, r3, r1, r3
   2a03a:	091b      	lsrs	r3, r3, #4
   2a03c:	fb03 f302 	mul.w	r3, r3, r2
   2a040:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a044:	4921      	ldr	r1, [pc, #132]	; (2a0cc <startTrngHW+0x150>)
   2a046:	4a1b      	ldr	r2, [pc, #108]	; (2a0b4 <startTrngHW+0x138>)
   2a048:	03db      	lsls	r3, r3, #15
   2a04a:	099b      	lsrs	r3, r3, #6
   2a04c:	600b      	str	r3, [r1, #0]
   2a04e:	2301      	movs	r3, #1
   2a050:	6013      	str	r3, [r2, #0]
   2a052:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   2a056:	682a      	ldr	r2, [r5, #0]
   2a058:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2a05c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2a060:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   2a064:	682a      	ldr	r2, [r5, #0]
   2a066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a06a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   2a06e:	4638      	mov	r0, r7
   2a070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a074:	4f16      	ldr	r7, [pc, #88]	; (2a0d0 <startTrngHW+0x154>)
   2a076:	4638      	mov	r0, r7
   2a078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a07c:	4f15      	ldr	r7, [pc, #84]	; (2a0d4 <startTrngHW+0x158>)
   2a07e:	4638      	mov	r0, r7
   2a080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a084:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a088:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   2a08c:	3101      	adds	r1, #1
   2a08e:	d002      	beq.n	2a096 <startTrngHW+0x11a>
   2a090:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   2a094:	e7ce      	b.n	2a034 <startTrngHW+0xb8>
   2a096:	2316      	movs	r3, #22
   2a098:	e7d0      	b.n	2a03c <startTrngHW+0xc0>
   2a09a:	f04f 0803 	mov.w	r8, #3
   2a09e:	e79a      	b.n	29fd6 <startTrngHW+0x5a>
   2a0a0:	f04f 0802 	mov.w	r8, #2
   2a0a4:	e797      	b.n	29fd6 <startTrngHW+0x5a>
   2a0a6:	bf00      	nop
   2a0a8:	5002b1c4 	.word	0x5002b1c4
   2a0ac:	5002b140 	.word	0x5002b140
   2a0b0:	5002b130 	.word	0x5002b130
   2a0b4:	5002b12c 	.word	0x5002b12c
   2a0b8:	5002b100 	.word	0x5002b100
   2a0bc:	5002b10c 	.word	0x5002b10c
   2a0c0:	5002ba04 	.word	0x5002ba04
   2a0c4:	5002b138 	.word	0x5002b138
   2a0c8:	aaaaaaab 	.word	0xaaaaaaab
   2a0cc:	5002b1d8 	.word	0x5002b1d8
   2a0d0:	00f10c31 	.word	0x00f10c31
   2a0d4:	00f10c35 	.word	0x00f10c35

0002a0d8 <LLF_RND_RepetitionCounterTest.part.0>:
   2a0d8:	b4f0      	push	{r4, r5, r6, r7}
   2a0da:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   2a0de:	2400      	movs	r4, #0
   2a0e0:	f10c 3cff 	add.w	ip, ip, #4294967295
   2a0e4:	4626      	mov	r6, r4
   2a0e6:	4627      	mov	r7, r4
   2a0e8:	e006      	b.n	2a0f8 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   2a0ea:	429f      	cmp	r7, r3
   2a0ec:	d016      	beq.n	2a11c <LLF_RND_RepetitionCounterTest.part.0+0x44>
   2a0ee:	2601      	movs	r6, #1
   2a0f0:	4565      	cmp	r5, ip
   2a0f2:	d819      	bhi.n	2a128 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   2a0f4:	462c      	mov	r4, r5
   2a0f6:	461f      	mov	r7, r3
   2a0f8:	0963      	lsrs	r3, r4, #5
   2a0fa:	f004 011f 	and.w	r1, r4, #31
   2a0fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2a102:	291f      	cmp	r1, #31
   2a104:	fa23 f301 	lsr.w	r3, r3, r1
   2a108:	f104 0501 	add.w	r5, r4, #1
   2a10c:	bf18      	it	ne
   2a10e:	f003 0301 	andne.w	r3, r3, #1
   2a112:	2c00      	cmp	r4, #0
   2a114:	d1e9      	bne.n	2a0ea <LLF_RND_RepetitionCounterTest.part.0+0x12>
   2a116:	2601      	movs	r6, #1
   2a118:	4635      	mov	r5, r6
   2a11a:	e7eb      	b.n	2a0f4 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   2a11c:	3601      	adds	r6, #1
   2a11e:	4296      	cmp	r6, r2
   2a120:	d1e6      	bne.n	2a0f0 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   2a122:	4803      	ldr	r0, [pc, #12]	; (2a130 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   2a124:	bcf0      	pop	{r4, r5, r6, r7}
   2a126:	4770      	bx	lr
   2a128:	2000      	movs	r0, #0
   2a12a:	bcf0      	pop	{r4, r5, r6, r7}
   2a12c:	4770      	bx	lr
   2a12e:	bf00      	nop
   2a130:	00f10c36 	.word	0x00f10c36

0002a134 <LLF_RND_AdaptiveProportionTest>:
   2a134:	2800      	cmp	r0, #0
   2a136:	d061      	beq.n	2a1fc <LLF_RND_AdaptiveProportionTest+0xc8>
   2a138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a13c:	1e4c      	subs	r4, r1, #1
   2a13e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   2a142:	d227      	bcs.n	2a194 <LLF_RND_AdaptiveProportionTest+0x60>
   2a144:	b333      	cbz	r3, 2a194 <LLF_RND_AdaptiveProportionTest+0x60>
   2a146:	b32a      	cbz	r2, 2a194 <LLF_RND_AdaptiveProportionTest+0x60>
   2a148:	00cd      	lsls	r5, r1, #3
   2a14a:	2b01      	cmp	r3, #1
   2a14c:	f105 3eff 	add.w	lr, r5, #4294967295
   2a150:	d030      	beq.n	2a1b4 <LLF_RND_AdaptiveProportionTest+0x80>
   2a152:	2100      	movs	r1, #0
   2a154:	468c      	mov	ip, r1
   2a156:	460f      	mov	r7, r1
   2a158:	460e      	mov	r6, r1
   2a15a:	f103 38ff 	add.w	r8, r3, #4294967295
   2a15e:	094c      	lsrs	r4, r1, #5
   2a160:	f001 051f 	and.w	r5, r1, #31
   2a164:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   2a168:	2d1f      	cmp	r5, #31
   2a16a:	fa24 f405 	lsr.w	r4, r4, r5
   2a16e:	bf18      	it	ne
   2a170:	f004 0401 	andne.w	r4, r4, #1
   2a174:	b921      	cbnz	r1, 2a180 <LLF_RND_AdaptiveProportionTest+0x4c>
   2a176:	2601      	movs	r6, #1
   2a178:	46b4      	mov	ip, r6
   2a17a:	4631      	mov	r1, r6
   2a17c:	4627      	mov	r7, r4
   2a17e:	e7ee      	b.n	2a15e <LLF_RND_AdaptiveProportionTest+0x2a>
   2a180:	42b3      	cmp	r3, r6
   2a182:	d013      	beq.n	2a1ac <LLF_RND_AdaptiveProportionTest+0x78>
   2a184:	42a7      	cmp	r7, r4
   2a186:	d101      	bne.n	2a18c <LLF_RND_AdaptiveProportionTest+0x58>
   2a188:	f10c 0c01 	add.w	ip, ip, #1
   2a18c:	4546      	cmp	r6, r8
   2a18e:	d104      	bne.n	2a19a <LLF_RND_AdaptiveProportionTest+0x66>
   2a190:	4562      	cmp	r2, ip
   2a192:	d202      	bcs.n	2a19a <LLF_RND_AdaptiveProportionTest+0x66>
   2a194:	481a      	ldr	r0, [pc, #104]	; (2a200 <LLF_RND_AdaptiveProportionTest+0xcc>)
   2a196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a19a:	463c      	mov	r4, r7
   2a19c:	3101      	adds	r1, #1
   2a19e:	458e      	cmp	lr, r1
   2a1a0:	f106 0601 	add.w	r6, r6, #1
   2a1a4:	d2ea      	bcs.n	2a17c <LLF_RND_AdaptiveProportionTest+0x48>
   2a1a6:	2000      	movs	r0, #0
   2a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a1ac:	2600      	movs	r6, #0
   2a1ae:	f04f 0c01 	mov.w	ip, #1
   2a1b2:	e7f3      	b.n	2a19c <LLF_RND_AdaptiveProportionTest+0x68>
   2a1b4:	2600      	movs	r6, #0
   2a1b6:	46b4      	mov	ip, r6
   2a1b8:	4637      	mov	r7, r6
   2a1ba:	4634      	mov	r4, r6
   2a1bc:	0961      	lsrs	r1, r4, #5
   2a1be:	f004 031f 	and.w	r3, r4, #31
   2a1c2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   2a1c6:	2b1f      	cmp	r3, #31
   2a1c8:	fa21 f103 	lsr.w	r1, r1, r3
   2a1cc:	bf18      	it	ne
   2a1ce:	f001 0101 	andne.w	r1, r1, #1
   2a1d2:	b13c      	cbz	r4, 2a1e4 <LLF_RND_AdaptiveProportionTest+0xb0>
   2a1d4:	b95f      	cbnz	r7, 2a1ee <LLF_RND_AdaptiveProportionTest+0xba>
   2a1d6:	458c      	cmp	ip, r1
   2a1d8:	d001      	beq.n	2a1de <LLF_RND_AdaptiveProportionTest+0xaa>
   2a1da:	4661      	mov	r1, ip
   2a1dc:	e008      	b.n	2a1f0 <LLF_RND_AdaptiveProportionTest+0xbc>
   2a1de:	3601      	adds	r6, #1
   2a1e0:	4661      	mov	r1, ip
   2a1e2:	e005      	b.n	2a1f0 <LLF_RND_AdaptiveProportionTest+0xbc>
   2a1e4:	2601      	movs	r6, #1
   2a1e6:	4634      	mov	r4, r6
   2a1e8:	468c      	mov	ip, r1
   2a1ea:	2701      	movs	r7, #1
   2a1ec:	e7e6      	b.n	2a1bc <LLF_RND_AdaptiveProportionTest+0x88>
   2a1ee:	463e      	mov	r6, r7
   2a1f0:	42b2      	cmp	r2, r6
   2a1f2:	d3cf      	bcc.n	2a194 <LLF_RND_AdaptiveProportionTest+0x60>
   2a1f4:	3401      	adds	r4, #1
   2a1f6:	42ac      	cmp	r4, r5
   2a1f8:	d1f6      	bne.n	2a1e8 <LLF_RND_AdaptiveProportionTest+0xb4>
   2a1fa:	e7d4      	b.n	2a1a6 <LLF_RND_AdaptiveProportionTest+0x72>
   2a1fc:	4800      	ldr	r0, [pc, #0]	; (2a200 <LLF_RND_AdaptiveProportionTest+0xcc>)
   2a1fe:	4770      	bx	lr
   2a200:	00f10c37 	.word	0x00f10c37

0002a204 <getTrngSource>:
   2a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a208:	b08d      	sub	sp, #52	; 0x34
   2a20a:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   2a20e:	4607      	mov	r7, r0
   2a210:	460c      	mov	r4, r1
   2a212:	2d00      	cmp	r5, #0
   2a214:	d14d      	bne.n	2a2b2 <getTrngSource+0xae>
   2a216:	f8d1 a010 	ldr.w	sl, [r1, #16]
   2a21a:	601e      	str	r6, [r3, #0]
   2a21c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a21e:	2100      	movs	r1, #0
   2a220:	6019      	str	r1, [r3, #0]
   2a222:	2a00      	cmp	r2, #0
   2a224:	f000 8120 	beq.w	2a468 <getTrngSource+0x264>
   2a228:	4a9b      	ldr	r2, [pc, #620]	; (2a498 <getTrngSource+0x294>)
   2a22a:	4b9c      	ldr	r3, [pc, #624]	; (2a49c <getTrngSource+0x298>)
   2a22c:	6811      	ldr	r1, [r2, #0]
   2a22e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2a230:	681b      	ldr	r3, [r3, #0]
   2a232:	429a      	cmp	r2, r3
   2a234:	d148      	bne.n	2a2c8 <getTrngSource+0xc4>
   2a236:	290a      	cmp	r1, #10
   2a238:	d146      	bne.n	2a2c8 <getTrngSource+0xc4>
   2a23a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   2a23e:	9304      	str	r3, [sp, #16]
   2a240:	4b97      	ldr	r3, [pc, #604]	; (2a4a0 <getTrngSource+0x29c>)
   2a242:	fba3 230a 	umull	r2, r3, r3, sl
   2a246:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   2a24a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   2a24e:	f106 0208 	add.w	r2, r6, #8
   2a252:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   2a256:	2304      	movs	r3, #4
   2a258:	9203      	str	r2, [sp, #12]
   2a25a:	9302      	str	r3, [sp, #8]
   2a25c:	46b8      	mov	r8, r7
   2a25e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a260:	f8c3 a000 	str.w	sl, [r3]
   2a264:	f1ba 0f00 	cmp.w	sl, #0
   2a268:	f000 80c4 	beq.w	2a3f4 <getTrngSource+0x1f0>
   2a26c:	9e03      	ldr	r6, [sp, #12]
   2a26e:	4655      	mov	r5, sl
   2a270:	f04f 0900 	mov.w	r9, #0
   2a274:	f000 fc4e 	bl	2ab14 <LLF_RND_TurnOffTrng>
   2a278:	2300      	movs	r3, #0
   2a27a:	9305      	str	r3, [sp, #20]
   2a27c:	f1b8 0f00 	cmp.w	r8, #0
   2a280:	f000 80e6 	beq.w	2a450 <getTrngSource+0x24c>
   2a284:	2c00      	cmp	r4, #0
   2a286:	f000 80e3 	beq.w	2a450 <getTrngSource+0x24c>
   2a28a:	9b04      	ldr	r3, [sp, #16]
   2a28c:	2b00      	cmp	r3, #0
   2a28e:	f000 80dd 	beq.w	2a44c <getTrngSource+0x248>
   2a292:	a904      	add	r1, sp, #16
   2a294:	4620      	mov	r0, r4
   2a296:	f000 fc2d 	bl	2aaf4 <LLF_RND_GetFastestRosc>
   2a29a:	b1b8      	cbz	r0, 2a2cc <getTrngSource+0xc8>
   2a29c:	4b81      	ldr	r3, [pc, #516]	; (2a4a4 <getTrngSource+0x2a0>)
   2a29e:	4298      	cmp	r0, r3
   2a2a0:	f040 80a8 	bne.w	2a3f4 <getTrngSource+0x1f0>
   2a2a4:	9002      	str	r0, [sp, #8]
   2a2a6:	f000 fc35 	bl	2ab14 <LLF_RND_TurnOffTrng>
   2a2aa:	9802      	ldr	r0, [sp, #8]
   2a2ac:	b00d      	add	sp, #52	; 0x34
   2a2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2a2b6:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   2a2ba:	3001      	adds	r0, #1
   2a2bc:	bf14      	ite	ne
   2a2be:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   2a2c2:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   2a2c6:	e7a8      	b.n	2a21a <getTrngSource+0x16>
   2a2c8:	4877      	ldr	r0, [pc, #476]	; (2a4a8 <getTrngSource+0x2a4>)
   2a2ca:	e7eb      	b.n	2a2a4 <getTrngSource+0xa0>
   2a2cc:	9804      	ldr	r0, [sp, #16]
   2a2ce:	4621      	mov	r1, r4
   2a2d0:	f000 fbf2 	bl	2aab8 <LLF_RND_GetRoscSampleCnt>
   2a2d4:	2800      	cmp	r0, #0
   2a2d6:	d1e1      	bne.n	2a29c <getTrngSource+0x98>
   2a2d8:	9f04      	ldr	r7, [sp, #16]
   2a2da:	2f08      	cmp	r7, #8
   2a2dc:	f000 80ba 	beq.w	2a454 <getTrngSource+0x250>
   2a2e0:	2f04      	cmp	r7, #4
   2a2e2:	f000 80b9 	beq.w	2a458 <getTrngSource+0x254>
   2a2e6:	f1a7 0702 	sub.w	r7, r7, #2
   2a2ea:	fab7 f787 	clz	r7, r7
   2a2ee:	097f      	lsrs	r7, r7, #5
   2a2f0:	496e      	ldr	r1, [pc, #440]	; (2a4ac <getTrngSource+0x2a8>)
   2a2f2:	2301      	movs	r3, #1
   2a2f4:	600b      	str	r3, [r1, #0]
   2a2f6:	f841 3c84 	str.w	r3, [r1, #-132]
   2a2fa:	4619      	mov	r1, r3
   2a2fc:	4b6b      	ldr	r3, [pc, #428]	; (2a4ac <getTrngSource+0x2a8>)
   2a2fe:	4867      	ldr	r0, [pc, #412]	; (2a49c <getTrngSource+0x298>)
   2a300:	6019      	str	r1, [r3, #0]
   2a302:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a304:	6003      	str	r3, [r0, #0]
   2a306:	6800      	ldr	r0, [r0, #0]
   2a308:	4283      	cmp	r3, r0
   2a30a:	d1f7      	bne.n	2a2fc <getTrngSource+0xf8>
   2a30c:	4a68      	ldr	r2, [pc, #416]	; (2a4b0 <getTrngSource+0x2ac>)
   2a30e:	2300      	movs	r3, #0
   2a310:	6013      	str	r3, [r2, #0]
   2a312:	f04f 30ff 	mov.w	r0, #4294967295
   2a316:	f7ff fd05 	bl	29d24 <CC_HalClearInterruptBit>
   2a31a:	2300      	movs	r3, #0
   2a31c:	4618      	mov	r0, r3
   2a31e:	4b65      	ldr	r3, [pc, #404]	; (2a4b4 <getTrngSource+0x2b0>)
   2a320:	f06f 011b 	mvn.w	r1, #27
   2a324:	6019      	str	r1, [r3, #0]
   2a326:	f7ff fd0b 	bl	29d40 <CC_HalMaskInterrupt>
   2a32a:	4963      	ldr	r1, [pc, #396]	; (2a4b8 <getTrngSource+0x2b4>)
   2a32c:	4b63      	ldr	r3, [pc, #396]	; (2a4bc <getTrngSource+0x2b8>)
   2a32e:	600f      	str	r7, [r1, #0]
   2a330:	6818      	ldr	r0, [r3, #0]
   2a332:	4f5b      	ldr	r7, [pc, #364]	; (2a4a0 <getTrngSource+0x29c>)
   2a334:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2a338:	f7ff fd02 	bl	29d40 <CC_HalMaskInterrupt>
   2a33c:	4b56      	ldr	r3, [pc, #344]	; (2a498 <getTrngSource+0x294>)
   2a33e:	4860      	ldr	r0, [pc, #384]	; (2a4c0 <getTrngSource+0x2bc>)
   2a340:	210a      	movs	r1, #10
   2a342:	6019      	str	r1, [r3, #0]
   2a344:	6921      	ldr	r1, [r4, #16]
   2a346:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a348:	fba7 c101 	umull	ip, r1, r7, r1
   2a34c:	0909      	lsrs	r1, r1, #4
   2a34e:	fb03 f301 	mul.w	r3, r3, r1
   2a352:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a356:	03db      	lsls	r3, r3, #15
   2a358:	099b      	lsrs	r3, r3, #6
   2a35a:	6003      	str	r3, [r0, #0]
   2a35c:	4b54      	ldr	r3, [pc, #336]	; (2a4b0 <getTrngSource+0x2ac>)
   2a35e:	2201      	movs	r2, #1
   2a360:	601a      	str	r2, [r3, #0]
   2a362:	9904      	ldr	r1, [sp, #16]
   2a364:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   2a368:	020b      	lsls	r3, r1, #8
   2a36a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   2a36e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2a372:	4313      	orrs	r3, r2
   2a374:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   2a378:	a805      	add	r0, sp, #20
   2a37a:	f000 fb8d 	bl	2aa98 <LLF_RND_WaitRngInterrupt>
   2a37e:	9b05      	ldr	r3, [sp, #20]
   2a380:	f003 031a 	and.w	r3, r3, #26
   2a384:	4303      	orrs	r3, r0
   2a386:	d135      	bne.n	2a3f4 <getTrngSource+0x1f0>
   2a388:	4a4e      	ldr	r2, [pc, #312]	; (2a4c4 <getTrngSource+0x2c0>)
   2a38a:	4b4f      	ldr	r3, [pc, #316]	; (2a4c8 <getTrngSource+0x2c4>)
   2a38c:	6812      	ldr	r2, [r2, #0]
   2a38e:	9206      	str	r2, [sp, #24]
   2a390:	681a      	ldr	r2, [r3, #0]
   2a392:	9207      	str	r2, [sp, #28]
   2a394:	685a      	ldr	r2, [r3, #4]
   2a396:	9208      	str	r2, [sp, #32]
   2a398:	689a      	ldr	r2, [r3, #8]
   2a39a:	9209      	str	r2, [sp, #36]	; 0x24
   2a39c:	68da      	ldr	r2, [r3, #12]
   2a39e:	920a      	str	r2, [sp, #40]	; 0x28
   2a3a0:	3310      	adds	r3, #16
   2a3a2:	fba7 2705 	umull	r2, r7, r7, r5
   2a3a6:	681b      	ldr	r3, [r3, #0]
   2a3a8:	930b      	str	r3, [sp, #44]	; 0x2c
   2a3aa:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   2a3ae:	d102      	bne.n	2a3b6 <getTrngSource+0x1b2>
   2a3b0:	f1bb 0f00 	cmp.w	fp, #0
   2a3b4:	d141      	bne.n	2a43a <getTrngSource+0x236>
   2a3b6:	2218      	movs	r2, #24
   2a3b8:	4630      	mov	r0, r6
   2a3ba:	eb0d 0102 	add.w	r1, sp, r2
   2a3be:	f000 fb0f 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a3c2:	3d18      	subs	r5, #24
   2a3c4:	3618      	adds	r6, #24
   2a3c6:	f109 0901 	add.w	r9, r9, #1
   2a3ca:	2d00      	cmp	r5, #0
   2a3cc:	f47f af52 	bne.w	2a274 <getTrngSource+0x70>
   2a3d0:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   2a3d4:	d85d      	bhi.n	2a492 <getTrngSource+0x28e>
   2a3d6:	9d03      	ldr	r5, [sp, #12]
   2a3d8:	6962      	ldr	r2, [r4, #20]
   2a3da:	4651      	mov	r1, sl
   2a3dc:	4628      	mov	r0, r5
   2a3de:	f7ff fe7b 	bl	2a0d8 <LLF_RND_RepetitionCounterTest.part.0>
   2a3e2:	2800      	cmp	r0, #0
   2a3e4:	d04b      	beq.n	2a47e <getTrngSource+0x27a>
   2a3e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a3e8:	2300      	movs	r3, #0
   2a3ea:	6013      	str	r3, [r2, #0]
   2a3ec:	4b2d      	ldr	r3, [pc, #180]	; (2a4a4 <getTrngSource+0x2a0>)
   2a3ee:	4298      	cmp	r0, r3
   2a3f0:	f43f af58 	beq.w	2a2a4 <getTrngSource+0xa0>
   2a3f4:	9d04      	ldr	r5, [sp, #16]
   2a3f6:	2d08      	cmp	r5, #8
   2a3f8:	d034      	beq.n	2a464 <getTrngSource+0x260>
   2a3fa:	2200      	movs	r2, #0
   2a3fc:	ab04      	add	r3, sp, #16
   2a3fe:	006d      	lsls	r5, r5, #1
   2a400:	9200      	str	r2, [sp, #0]
   2a402:	4621      	mov	r1, r4
   2a404:	4640      	mov	r0, r8
   2a406:	9504      	str	r5, [sp, #16]
   2a408:	f7ff fdb8 	bl	29f7c <startTrngHW>
   2a40c:	4b2f      	ldr	r3, [pc, #188]	; (2a4cc <getTrngSource+0x2c8>)
   2a40e:	4298      	cmp	r0, r3
   2a410:	d024      	beq.n	2a45c <getTrngSource+0x258>
   2a412:	2800      	cmp	r0, #0
   2a414:	f47f af46 	bne.w	2a2a4 <getTrngSource+0xa0>
   2a418:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   2a41c:	0a13      	lsrs	r3, r2, #8
   2a41e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   2a422:	4313      	orrs	r3, r2
   2a424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2a428:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   2a42c:	9b02      	ldr	r3, [sp, #8]
   2a42e:	3b01      	subs	r3, #1
   2a430:	9302      	str	r3, [sp, #8]
   2a432:	f47f af14 	bne.w	2a25e <getTrngSource+0x5a>
   2a436:	2000      	movs	r0, #0
   2a438:	e734      	b.n	2a2a4 <getTrngSource+0xa0>
   2a43a:	4630      	mov	r0, r6
   2a43c:	465a      	mov	r2, fp
   2a43e:	a906      	add	r1, sp, #24
   2a440:	f000 face 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a444:	eba5 050b 	sub.w	r5, r5, fp
   2a448:	445e      	add	r6, fp
   2a44a:	e7bc      	b.n	2a3c6 <getTrngSource+0x1c2>
   2a44c:	481f      	ldr	r0, [pc, #124]	; (2a4cc <getTrngSource+0x2c8>)
   2a44e:	e725      	b.n	2a29c <getTrngSource+0x98>
   2a450:	481f      	ldr	r0, [pc, #124]	; (2a4d0 <getTrngSource+0x2cc>)
   2a452:	e723      	b.n	2a29c <getTrngSource+0x98>
   2a454:	2703      	movs	r7, #3
   2a456:	e74b      	b.n	2a2f0 <getTrngSource+0xec>
   2a458:	2702      	movs	r7, #2
   2a45a:	e749      	b.n	2a2f0 <getTrngSource+0xec>
   2a45c:	6a23      	ldr	r3, [r4, #32]
   2a45e:	2b00      	cmp	r3, #0
   2a460:	f43f af20 	beq.w	2a2a4 <getTrngSource+0xa0>
   2a464:	481b      	ldr	r0, [pc, #108]	; (2a4d4 <getTrngSource+0x2d0>)
   2a466:	e71d      	b.n	2a2a4 <getTrngSource+0xa0>
   2a468:	9500      	str	r5, [sp, #0]
   2a46a:	ab04      	add	r3, sp, #16
   2a46c:	2201      	movs	r2, #1
   2a46e:	4621      	mov	r1, r4
   2a470:	4638      	mov	r0, r7
   2a472:	f7ff fd83 	bl	29f7c <startTrngHW>
   2a476:	2800      	cmp	r0, #0
   2a478:	f43f aee2 	beq.w	2a240 <getTrngSource+0x3c>
   2a47c:	e712      	b.n	2a2a4 <getTrngSource+0xa0>
   2a47e:	69a2      	ldr	r2, [r4, #24]
   2a480:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2a484:	4651      	mov	r1, sl
   2a486:	4628      	mov	r0, r5
   2a488:	f7ff fe54 	bl	2a134 <LLF_RND_AdaptiveProportionTest>
   2a48c:	2800      	cmp	r0, #0
   2a48e:	d1aa      	bne.n	2a3e6 <getTrngSource+0x1e2>
   2a490:	e7d1      	b.n	2a436 <getTrngSource+0x232>
   2a492:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a494:	601d      	str	r5, [r3, #0]
   2a496:	e7ad      	b.n	2a3f4 <getTrngSource+0x1f0>
   2a498:	5002b138 	.word	0x5002b138
   2a49c:	5002b130 	.word	0x5002b130
   2a4a0:	aaaaaaab 	.word	0xaaaaaaab
   2a4a4:	00f10c02 	.word	0x00f10c02
   2a4a8:	00f10c30 	.word	0x00f10c30
   2a4ac:	5002b1c4 	.word	0x5002b1c4
   2a4b0:	5002b12c 	.word	0x5002b12c
   2a4b4:	5002b100 	.word	0x5002b100
   2a4b8:	5002b10c 	.word	0x5002b10c
   2a4bc:	5002ba04 	.word	0x5002ba04
   2a4c0:	5002b1d8 	.word	0x5002b1d8
   2a4c4:	5002b114 	.word	0x5002b114
   2a4c8:	5002b118 	.word	0x5002b118
   2a4cc:	00f10c31 	.word	0x00f10c31
   2a4d0:	00f10c35 	.word	0x00f10c35
   2a4d4:	00f10c32 	.word	0x00f10c32

0002a4d8 <LLF_RND_GetTrngSource>:
   2a4d8:	b430      	push	{r4, r5}
   2a4da:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   2a4de:	9d04      	ldr	r5, [sp, #16]
   2a4e0:	9402      	str	r4, [sp, #8]
   2a4e2:	2400      	movs	r4, #0
   2a4e4:	e9cd 5403 	strd	r5, r4, [sp, #12]
   2a4e8:	bc30      	pop	{r4, r5}
   2a4ea:	f7ff be8b 	b.w	2a204 <getTrngSource>
   2a4ee:	bf00      	nop

0002a4f0 <LLF_RND_RunTrngStartupTest>:
   2a4f0:	b510      	push	{r4, lr}
   2a4f2:	b086      	sub	sp, #24
   2a4f4:	ab05      	add	r3, sp, #20
   2a4f6:	2401      	movs	r4, #1
   2a4f8:	e9cd 2401 	strd	r2, r4, [sp, #4]
   2a4fc:	9300      	str	r3, [sp, #0]
   2a4fe:	2200      	movs	r2, #0
   2a500:	ab04      	add	r3, sp, #16
   2a502:	f7ff fe7f 	bl	2a204 <getTrngSource>
   2a506:	b006      	add	sp, #24
   2a508:	bd10      	pop	{r4, pc}
   2a50a:	bf00      	nop

0002a50c <mbedtls_hardware_poll>:
   2a50c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a50e:	b089      	sub	sp, #36	; 0x24
   2a510:	9205      	str	r2, [sp, #20]
   2a512:	2900      	cmp	r1, #0
   2a514:	d064      	beq.n	2a5e0 <mbedtls_hardware_poll+0xd4>
   2a516:	461c      	mov	r4, r3
   2a518:	2b00      	cmp	r3, #0
   2a51a:	d061      	beq.n	2a5e0 <mbedtls_hardware_poll+0xd4>
   2a51c:	4615      	mov	r5, r2
   2a51e:	2a00      	cmp	r2, #0
   2a520:	d05e      	beq.n	2a5e0 <mbedtls_hardware_poll+0xd4>
   2a522:	4f31      	ldr	r7, [pc, #196]	; (2a5e8 <mbedtls_hardware_poll+0xdc>)
   2a524:	460e      	mov	r6, r1
   2a526:	6838      	ldr	r0, [r7, #0]
   2a528:	f04f 31ff 	mov.w	r1, #4294967295
   2a52c:	f7ff fca2 	bl	29e74 <CC_PalMutexLock>
   2a530:	2800      	cmp	r0, #0
   2a532:	d14b      	bne.n	2a5cc <mbedtls_hardware_poll+0xc0>
   2a534:	2000      	movs	r0, #0
   2a536:	f7ff fccd 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2a53a:	2800      	cmp	r0, #0
   2a53c:	d142      	bne.n	2a5c4 <mbedtls_hardware_poll+0xb8>
   2a53e:	482b      	ldr	r0, [pc, #172]	; (2a5ec <mbedtls_hardware_poll+0xe0>)
   2a540:	f000 fa12 	bl	2a968 <RNG_PLAT_SetUserRngParameters>
   2a544:	b1d8      	cbz	r0, 2a57e <mbedtls_hardware_poll+0x72>
   2a546:	2001      	movs	r0, #1
   2a548:	f04f 36ff 	mov.w	r6, #4294967295
   2a54c:	f7ff fcc2 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2a550:	2800      	cmp	r0, #0
   2a552:	d133      	bne.n	2a5bc <mbedtls_hardware_poll+0xb0>
   2a554:	4826      	ldr	r0, [pc, #152]	; (2a5f0 <mbedtls_hardware_poll+0xe4>)
   2a556:	f44f 7108 	mov.w	r1, #544	; 0x220
   2a55a:	f7fe fe47 	bl	291ec <mbedtls_zeroize_internal>
   2a55e:	4825      	ldr	r0, [pc, #148]	; (2a5f4 <mbedtls_hardware_poll+0xe8>)
   2a560:	21dc      	movs	r1, #220	; 0xdc
   2a562:	f7fe fe43 	bl	291ec <mbedtls_zeroize_internal>
   2a566:	4821      	ldr	r0, [pc, #132]	; (2a5ec <mbedtls_hardware_poll+0xe0>)
   2a568:	2128      	movs	r1, #40	; 0x28
   2a56a:	f7fe fe3f 	bl	291ec <mbedtls_zeroize_internal>
   2a56e:	6838      	ldr	r0, [r7, #0]
   2a570:	f7ff fc88 	bl	29e84 <CC_PalMutexUnlock>
   2a574:	2800      	cmp	r0, #0
   2a576:	d12d      	bne.n	2a5d4 <mbedtls_hardware_poll+0xc8>
   2a578:	4630      	mov	r0, r6
   2a57a:	b009      	add	sp, #36	; 0x24
   2a57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a57e:	491c      	ldr	r1, [pc, #112]	; (2a5f0 <mbedtls_hardware_poll+0xe4>)
   2a580:	9003      	str	r0, [sp, #12]
   2a582:	ab07      	add	r3, sp, #28
   2a584:	4602      	mov	r2, r0
   2a586:	9102      	str	r1, [sp, #8]
   2a588:	9300      	str	r3, [sp, #0]
   2a58a:	4918      	ldr	r1, [pc, #96]	; (2a5ec <mbedtls_hardware_poll+0xe0>)
   2a58c:	4819      	ldr	r0, [pc, #100]	; (2a5f4 <mbedtls_hardware_poll+0xe8>)
   2a58e:	9401      	str	r4, [sp, #4]
   2a590:	ab05      	add	r3, sp, #20
   2a592:	f7ff ffa1 	bl	2a4d8 <LLF_RND_GetTrngSource>
   2a596:	4603      	mov	r3, r0
   2a598:	2800      	cmp	r0, #0
   2a59a:	d1d4      	bne.n	2a546 <mbedtls_hardware_poll+0x3a>
   2a59c:	6822      	ldr	r2, [r4, #0]
   2a59e:	42aa      	cmp	r2, r5
   2a5a0:	d3d1      	bcc.n	2a546 <mbedtls_hardware_poll+0x3a>
   2a5a2:	9907      	ldr	r1, [sp, #28]
   2a5a4:	4630      	mov	r0, r6
   2a5a6:	3108      	adds	r1, #8
   2a5a8:	462a      	mov	r2, r5
   2a5aa:	461e      	mov	r6, r3
   2a5ac:	f000 fa18 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a5b0:	6025      	str	r5, [r4, #0]
   2a5b2:	2001      	movs	r0, #1
   2a5b4:	f7ff fc8e 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2a5b8:	2800      	cmp	r0, #0
   2a5ba:	d0cb      	beq.n	2a554 <mbedtls_hardware_poll+0x48>
   2a5bc:	480e      	ldr	r0, [pc, #56]	; (2a5f8 <mbedtls_hardware_poll+0xec>)
   2a5be:	f7fe fd0d 	bl	28fdc <CC_PalAbort>
   2a5c2:	e7c7      	b.n	2a554 <mbedtls_hardware_poll+0x48>
   2a5c4:	480d      	ldr	r0, [pc, #52]	; (2a5fc <mbedtls_hardware_poll+0xf0>)
   2a5c6:	f7fe fd09 	bl	28fdc <CC_PalAbort>
   2a5ca:	e7b8      	b.n	2a53e <mbedtls_hardware_poll+0x32>
   2a5cc:	480c      	ldr	r0, [pc, #48]	; (2a600 <mbedtls_hardware_poll+0xf4>)
   2a5ce:	f7fe fd05 	bl	28fdc <CC_PalAbort>
   2a5d2:	e7af      	b.n	2a534 <mbedtls_hardware_poll+0x28>
   2a5d4:	480b      	ldr	r0, [pc, #44]	; (2a604 <mbedtls_hardware_poll+0xf8>)
   2a5d6:	f7fe fd01 	bl	28fdc <CC_PalAbort>
   2a5da:	4630      	mov	r0, r6
   2a5dc:	b009      	add	sp, #36	; 0x24
   2a5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a5e0:	f04f 36ff 	mov.w	r6, #4294967295
   2a5e4:	e7c8      	b.n	2a578 <mbedtls_hardware_poll+0x6c>
   2a5e6:	bf00      	nop
   2a5e8:	2000093c 	.word	0x2000093c
   2a5ec:	200035cc 	.word	0x200035cc
   2a5f0:	200033ac 	.word	0x200033ac
   2a5f4:	200032d0 	.word	0x200032d0
   2a5f8:	00032e1c 	.word	0x00032e1c
   2a5fc:	00032dfc 	.word	0x00032dfc
   2a600:	00032de4 	.word	0x00032de4
   2a604:	00032e74 	.word	0x00032e74

0002a608 <cc_mbedtls_aes_init>:
   2a608:	b510      	push	{r4, lr}
   2a60a:	4604      	mov	r4, r0
   2a60c:	b130      	cbz	r0, 2a61c <cc_mbedtls_aes_init+0x14>
   2a60e:	2200      	movs	r2, #0
   2a610:	2301      	movs	r3, #1
   2a612:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   2a616:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2a61a:	bd10      	pop	{r4, pc}
   2a61c:	4801      	ldr	r0, [pc, #4]	; (2a624 <cc_mbedtls_aes_init+0x1c>)
   2a61e:	f7fe fcdd 	bl	28fdc <CC_PalAbort>
   2a622:	e7f4      	b.n	2a60e <cc_mbedtls_aes_init+0x6>
   2a624:	00032e8c 	.word	0x00032e8c

0002a628 <cc_mbedtls_aes_free>:
   2a628:	b118      	cbz	r0, 2a632 <cc_mbedtls_aes_free+0xa>
   2a62a:	2274      	movs	r2, #116	; 0x74
   2a62c:	2100      	movs	r1, #0
   2a62e:	f000 b9d9 	b.w	2a9e4 <CC_PalMemSetPlat>
   2a632:	4770      	bx	lr

0002a634 <cc_mbedtls_aes_setkey_enc>:
   2a634:	b190      	cbz	r0, 2a65c <cc_mbedtls_aes_setkey_enc+0x28>
   2a636:	b1a1      	cbz	r1, 2a662 <cc_mbedtls_aes_setkey_enc+0x2e>
   2a638:	b510      	push	{r4, lr}
   2a63a:	2a80      	cmp	r2, #128	; 0x80
   2a63c:	f04f 0400 	mov.w	r4, #0
   2a640:	6384      	str	r4, [r0, #56]	; 0x38
   2a642:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   2a646:	d106      	bne.n	2a656 <cc_mbedtls_aes_setkey_enc+0x22>
   2a648:	6304      	str	r4, [r0, #48]	; 0x30
   2a64a:	2210      	movs	r2, #16
   2a64c:	3010      	adds	r0, #16
   2a64e:	f000 f9c7 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a652:	4620      	mov	r0, r4
   2a654:	bd10      	pop	{r4, pc}
   2a656:	f06f 001f 	mvn.w	r0, #31
   2a65a:	bd10      	pop	{r4, pc}
   2a65c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2a660:	4770      	bx	lr
   2a662:	f06f 001f 	mvn.w	r0, #31
   2a666:	4770      	bx	lr

0002a668 <cc_mbedtls_aes_crypt_ecb>:
   2a668:	b320      	cbz	r0, 2a6b4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2a66a:	b31a      	cbz	r2, 2a6b4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2a66c:	b313      	cbz	r3, 2a6b4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2a66e:	2901      	cmp	r1, #1
   2a670:	d820      	bhi.n	2a6b4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2a672:	b570      	push	{r4, r5, r6, lr}
   2a674:	4604      	mov	r4, r0
   2a676:	6b81      	ldr	r1, [r0, #56]	; 0x38
   2a678:	b086      	sub	sp, #24
   2a67a:	d016      	beq.n	2a6aa <cc_mbedtls_aes_crypt_ecb+0x42>
   2a67c:	2901      	cmp	r1, #1
   2a67e:	d116      	bne.n	2a6ae <cc_mbedtls_aes_crypt_ecb+0x46>
   2a680:	2100      	movs	r1, #0
   2a682:	2510      	movs	r5, #16
   2a684:	ae04      	add	r6, sp, #16
   2a686:	6361      	str	r1, [r4, #52]	; 0x34
   2a688:	4610      	mov	r0, r2
   2a68a:	e9cd 5600 	strd	r5, r6, [sp]
   2a68e:	aa02      	add	r2, sp, #8
   2a690:	4629      	mov	r1, r5
   2a692:	f000 fa4d 	bl	2ab30 <SetDataBuffersInfo>
   2a696:	b950      	cbnz	r0, 2a6ae <cc_mbedtls_aes_crypt_ecb+0x46>
   2a698:	462b      	mov	r3, r5
   2a69a:	4632      	mov	r2, r6
   2a69c:	a902      	add	r1, sp, #8
   2a69e:	4620      	mov	r0, r4
   2a6a0:	f000 fcda 	bl	2b058 <ProcessAesDrv>
   2a6a4:	b918      	cbnz	r0, 2a6ae <cc_mbedtls_aes_crypt_ecb+0x46>
   2a6a6:	b006      	add	sp, #24
   2a6a8:	bd70      	pop	{r4, r5, r6, pc}
   2a6aa:	2900      	cmp	r1, #0
   2a6ac:	d0e8      	beq.n	2a680 <cc_mbedtls_aes_crypt_ecb+0x18>
   2a6ae:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2a6b2:	e7f8      	b.n	2a6a6 <cc_mbedtls_aes_crypt_ecb+0x3e>
   2a6b4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2a6b8:	4770      	bx	lr
   2a6ba:	bf00      	nop

0002a6bc <cc_mbedtls_sha256_init>:
   2a6bc:	b510      	push	{r4, lr}
   2a6be:	4604      	mov	r4, r0
   2a6c0:	b128      	cbz	r0, 2a6ce <cc_mbedtls_sha256_init+0x12>
   2a6c2:	4620      	mov	r0, r4
   2a6c4:	21f0      	movs	r1, #240	; 0xf0
   2a6c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a6ca:	f000 b98d 	b.w	2a9e8 <CC_PalMemSetZeroPlat>
   2a6ce:	4804      	ldr	r0, [pc, #16]	; (2a6e0 <cc_mbedtls_sha256_init+0x24>)
   2a6d0:	f7fe fc84 	bl	28fdc <CC_PalAbort>
   2a6d4:	4620      	mov	r0, r4
   2a6d6:	21f0      	movs	r1, #240	; 0xf0
   2a6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a6dc:	f000 b984 	b.w	2a9e8 <CC_PalMemSetZeroPlat>
   2a6e0:	00032ea0 	.word	0x00032ea0

0002a6e4 <cc_mbedtls_sha256_free>:
   2a6e4:	b110      	cbz	r0, 2a6ec <cc_mbedtls_sha256_free+0x8>
   2a6e6:	21f0      	movs	r1, #240	; 0xf0
   2a6e8:	f7fe bd80 	b.w	291ec <mbedtls_zeroize_internal>
   2a6ec:	4770      	bx	lr
   2a6ee:	bf00      	nop

0002a6f0 <cc_mbedtls_sha256_starts>:
   2a6f0:	b508      	push	{r3, lr}
   2a6f2:	b161      	cbz	r1, 2a70e <cc_mbedtls_sha256_starts+0x1e>
   2a6f4:	2901      	cmp	r1, #1
   2a6f6:	d107      	bne.n	2a708 <cc_mbedtls_sha256_starts+0x18>
   2a6f8:	2102      	movs	r1, #2
   2a6fa:	f000 f85b 	bl	2a7b4 <mbedtls_sha_starts_internal>
   2a6fe:	2800      	cmp	r0, #0
   2a700:	bf18      	it	ne
   2a702:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   2a706:	bd08      	pop	{r3, pc}
   2a708:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2a70c:	bd08      	pop	{r3, pc}
   2a70e:	2101      	movs	r1, #1
   2a710:	f000 f850 	bl	2a7b4 <mbedtls_sha_starts_internal>
   2a714:	e7f3      	b.n	2a6fe <cc_mbedtls_sha256_starts+0xe>
   2a716:	bf00      	nop

0002a718 <cc_mbedtls_sha256_update>:
   2a718:	b570      	push	{r4, r5, r6, lr}
   2a71a:	188e      	adds	r6, r1, r2
   2a71c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   2a720:	b0a0      	sub	sp, #128	; 0x80
   2a722:	460b      	mov	r3, r1
   2a724:	4614      	mov	r4, r2
   2a726:	4605      	mov	r5, r0
   2a728:	d801      	bhi.n	2a72e <cc_mbedtls_sha256_update+0x16>
   2a72a:	2a80      	cmp	r2, #128	; 0x80
   2a72c:	d90c      	bls.n	2a748 <cc_mbedtls_sha256_update+0x30>
   2a72e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2a732:	d917      	bls.n	2a764 <cc_mbedtls_sha256_update+0x4c>
   2a734:	4622      	mov	r2, r4
   2a736:	4619      	mov	r1, r3
   2a738:	4628      	mov	r0, r5
   2a73a:	f000 f87d 	bl	2a838 <mbedtls_sha_update_internal>
   2a73e:	4604      	mov	r4, r0
   2a740:	b984      	cbnz	r4, 2a764 <cc_mbedtls_sha256_update+0x4c>
   2a742:	4620      	mov	r0, r4
   2a744:	b020      	add	sp, #128	; 0x80
   2a746:	bd70      	pop	{r4, r5, r6, pc}
   2a748:	4668      	mov	r0, sp
   2a74a:	f000 f949 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a74e:	4622      	mov	r2, r4
   2a750:	4669      	mov	r1, sp
   2a752:	4628      	mov	r0, r5
   2a754:	f000 f870 	bl	2a838 <mbedtls_sha_update_internal>
   2a758:	2180      	movs	r1, #128	; 0x80
   2a75a:	4604      	mov	r4, r0
   2a75c:	4668      	mov	r0, sp
   2a75e:	f000 f943 	bl	2a9e8 <CC_PalMemSetZeroPlat>
   2a762:	e7ed      	b.n	2a740 <cc_mbedtls_sha256_update+0x28>
   2a764:	f06f 0436 	mvn.w	r4, #54	; 0x36
   2a768:	e7eb      	b.n	2a742 <cc_mbedtls_sha256_update+0x2a>
   2a76a:	bf00      	nop

0002a76c <cc_mbedtls_sha256_finish>:
   2a76c:	b570      	push	{r4, r5, r6, lr}
   2a76e:	b1e8      	cbz	r0, 2a7ac <cc_mbedtls_sha256_finish+0x40>
   2a770:	460e      	mov	r6, r1
   2a772:	b1d9      	cbz	r1, 2a7ac <cc_mbedtls_sha256_finish+0x40>
   2a774:	4604      	mov	r4, r0
   2a776:	f000 f831 	bl	2a7dc <mbedtls_sha_finish_internal>
   2a77a:	4605      	mov	r5, r0
   2a77c:	b9b0      	cbnz	r0, 2a7ac <cc_mbedtls_sha256_finish+0x40>
   2a77e:	6823      	ldr	r3, [r4, #0]
   2a780:	2b01      	cmp	r3, #1
   2a782:	d00b      	beq.n	2a79c <cc_mbedtls_sha256_finish+0x30>
   2a784:	2b02      	cmp	r3, #2
   2a786:	d001      	beq.n	2a78c <cc_mbedtls_sha256_finish+0x20>
   2a788:	4628      	mov	r0, r5
   2a78a:	bd70      	pop	{r4, r5, r6, pc}
   2a78c:	f104 0108 	add.w	r1, r4, #8
   2a790:	4630      	mov	r0, r6
   2a792:	221c      	movs	r2, #28
   2a794:	f000 f924 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a798:	4628      	mov	r0, r5
   2a79a:	bd70      	pop	{r4, r5, r6, pc}
   2a79c:	f104 0108 	add.w	r1, r4, #8
   2a7a0:	4630      	mov	r0, r6
   2a7a2:	2220      	movs	r2, #32
   2a7a4:	f000 f91c 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a7a8:	4628      	mov	r0, r5
   2a7aa:	bd70      	pop	{r4, r5, r6, pc}
   2a7ac:	f06f 0536 	mvn.w	r5, #54	; 0x36
   2a7b0:	e7ea      	b.n	2a788 <cc_mbedtls_sha256_finish+0x1c>
   2a7b2:	bf00      	nop

0002a7b4 <mbedtls_sha_starts_internal>:
   2a7b4:	b178      	cbz	r0, 2a7d6 <mbedtls_sha_starts_internal+0x22>
   2a7b6:	b538      	push	{r3, r4, r5, lr}
   2a7b8:	4604      	mov	r4, r0
   2a7ba:	460d      	mov	r5, r1
   2a7bc:	21f0      	movs	r1, #240	; 0xf0
   2a7be:	f000 f913 	bl	2a9e8 <CC_PalMemSetZeroPlat>
   2a7c2:	2340      	movs	r3, #64	; 0x40
   2a7c4:	6025      	str	r5, [r4, #0]
   2a7c6:	65e3      	str	r3, [r4, #92]	; 0x5c
   2a7c8:	4620      	mov	r0, r4
   2a7ca:	f000 f9e5 	bl	2ab98 <InitHashDrv>
   2a7ce:	3800      	subs	r0, #0
   2a7d0:	bf18      	it	ne
   2a7d2:	2001      	movne	r0, #1
   2a7d4:	bd38      	pop	{r3, r4, r5, pc}
   2a7d6:	2001      	movs	r0, #1
   2a7d8:	4770      	bx	lr
   2a7da:	bf00      	nop

0002a7dc <mbedtls_sha_finish_internal>:
   2a7dc:	b570      	push	{r4, r5, r6, lr}
   2a7de:	6e05      	ldr	r5, [r0, #96]	; 0x60
   2a7e0:	b0a4      	sub	sp, #144	; 0x90
   2a7e2:	4604      	mov	r4, r0
   2a7e4:	ae04      	add	r6, sp, #16
   2a7e6:	b9e5      	cbnz	r5, 2a822 <mbedtls_sha_finish_internal+0x46>
   2a7e8:	2201      	movs	r2, #1
   2a7ea:	2300      	movs	r3, #0
   2a7ec:	6062      	str	r2, [r4, #4]
   2a7ee:	4630      	mov	r0, r6
   2a7f0:	e9cd 3300 	strd	r3, r3, [sp]
   2a7f4:	aa02      	add	r2, sp, #8
   2a7f6:	4629      	mov	r1, r5
   2a7f8:	f000 f99a 	bl	2ab30 <SetDataBuffersInfo>
   2a7fc:	b110      	cbz	r0, 2a804 <mbedtls_sha_finish_internal+0x28>
   2a7fe:	2001      	movs	r0, #1
   2a800:	b024      	add	sp, #144	; 0x90
   2a802:	bd70      	pop	{r4, r5, r6, pc}
   2a804:	462a      	mov	r2, r5
   2a806:	a902      	add	r1, sp, #8
   2a808:	4620      	mov	r0, r4
   2a80a:	f000 f9ef 	bl	2abec <ProcessHashDrv>
   2a80e:	2800      	cmp	r0, #0
   2a810:	d1f5      	bne.n	2a7fe <mbedtls_sha_finish_internal+0x22>
   2a812:	4620      	mov	r0, r4
   2a814:	f000 fb18 	bl	2ae48 <FinishHashDrv>
   2a818:	2800      	cmp	r0, #0
   2a81a:	d1f0      	bne.n	2a7fe <mbedtls_sha_finish_internal+0x22>
   2a81c:	6620      	str	r0, [r4, #96]	; 0x60
   2a81e:	b024      	add	sp, #144	; 0x90
   2a820:	bd70      	pop	{r4, r5, r6, pc}
   2a822:	2d80      	cmp	r5, #128	; 0x80
   2a824:	462a      	mov	r2, r5
   2a826:	4630      	mov	r0, r6
   2a828:	bf28      	it	cs
   2a82a:	2280      	movcs	r2, #128	; 0x80
   2a82c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   2a830:	f000 f8d6 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a834:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2a836:	e7d7      	b.n	2a7e8 <mbedtls_sha_finish_internal+0xc>

0002a838 <mbedtls_sha_update_internal>:
   2a838:	2800      	cmp	r0, #0
   2a83a:	d054      	beq.n	2a8e6 <mbedtls_sha_update_internal+0xae>
   2a83c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a83e:	4614      	mov	r4, r2
   2a840:	b0a5      	sub	sp, #148	; 0x94
   2a842:	b1b2      	cbz	r2, 2a872 <mbedtls_sha_update_internal+0x3a>
   2a844:	460e      	mov	r6, r1
   2a846:	b351      	cbz	r1, 2a89e <mbedtls_sha_update_internal+0x66>
   2a848:	4605      	mov	r5, r0
   2a84a:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   2a84e:	1a1a      	subs	r2, r3, r0
   2a850:	fbb2 f7f3 	udiv	r7, r2, r3
   2a854:	fb03 2717 	mls	r7, r3, r7, r2
   2a858:	42a7      	cmp	r7, r4
   2a85a:	bf28      	it	cs
   2a85c:	4627      	movcs	r7, r4
   2a85e:	2f00      	cmp	r7, #0
   2a860:	d143      	bne.n	2a8ea <mbedtls_sha_update_internal+0xb2>
   2a862:	4283      	cmp	r3, r0
   2a864:	d008      	beq.n	2a878 <mbedtls_sha_update_internal+0x40>
   2a866:	fbb4 f7f3 	udiv	r7, r4, r3
   2a86a:	fb03 f707 	mul.w	r7, r3, r7
   2a86e:	b9cf      	cbnz	r7, 2a8a4 <mbedtls_sha_update_internal+0x6c>
   2a870:	bb6c      	cbnz	r4, 2a8ce <mbedtls_sha_update_internal+0x96>
   2a872:	2000      	movs	r0, #0
   2a874:	b025      	add	sp, #148	; 0x94
   2a876:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a878:	2b80      	cmp	r3, #128	; 0x80
   2a87a:	bf28      	it	cs
   2a87c:	2380      	movcs	r3, #128	; 0x80
   2a87e:	461a      	mov	r2, r3
   2a880:	f105 0164 	add.w	r1, r5, #100	; 0x64
   2a884:	a804      	add	r0, sp, #16
   2a886:	f000 f8ab 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a88a:	2300      	movs	r3, #0
   2a88c:	e9cd 3300 	strd	r3, r3, [sp]
   2a890:	a804      	add	r0, sp, #16
   2a892:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   2a894:	aa02      	add	r2, sp, #8
   2a896:	f000 f94b 	bl	2ab30 <SetDataBuffersInfo>
   2a89a:	2800      	cmp	r0, #0
   2a89c:	d032      	beq.n	2a904 <mbedtls_sha_update_internal+0xcc>
   2a89e:	2001      	movs	r0, #1
   2a8a0:	b025      	add	sp, #148	; 0x94
   2a8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a8a4:	2300      	movs	r3, #0
   2a8a6:	e9cd 3300 	strd	r3, r3, [sp]
   2a8aa:	aa02      	add	r2, sp, #8
   2a8ac:	4639      	mov	r1, r7
   2a8ae:	4630      	mov	r0, r6
   2a8b0:	f000 f93e 	bl	2ab30 <SetDataBuffersInfo>
   2a8b4:	2800      	cmp	r0, #0
   2a8b6:	d1f2      	bne.n	2a89e <mbedtls_sha_update_internal+0x66>
   2a8b8:	a902      	add	r1, sp, #8
   2a8ba:	463a      	mov	r2, r7
   2a8bc:	4628      	mov	r0, r5
   2a8be:	f000 f995 	bl	2abec <ProcessHashDrv>
   2a8c2:	2800      	cmp	r0, #0
   2a8c4:	d1eb      	bne.n	2a89e <mbedtls_sha_update_internal+0x66>
   2a8c6:	1be4      	subs	r4, r4, r7
   2a8c8:	443e      	add	r6, r7
   2a8ca:	2c00      	cmp	r4, #0
   2a8cc:	d0d1      	beq.n	2a872 <mbedtls_sha_update_internal+0x3a>
   2a8ce:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2a8d0:	3019      	adds	r0, #25
   2a8d2:	4622      	mov	r2, r4
   2a8d4:	4631      	mov	r1, r6
   2a8d6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   2a8da:	f000 f881 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a8de:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   2a8e0:	4422      	add	r2, r4
   2a8e2:	662a      	str	r2, [r5, #96]	; 0x60
   2a8e4:	e7c5      	b.n	2a872 <mbedtls_sha_update_internal+0x3a>
   2a8e6:	2001      	movs	r0, #1
   2a8e8:	4770      	bx	lr
   2a8ea:	f105 0364 	add.w	r3, r5, #100	; 0x64
   2a8ee:	4418      	add	r0, r3
   2a8f0:	463a      	mov	r2, r7
   2a8f2:	f000 f875 	bl	2a9e0 <CC_PalMemCopyPlat>
   2a8f6:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   2a8fa:	4438      	add	r0, r7
   2a8fc:	443e      	add	r6, r7
   2a8fe:	1be4      	subs	r4, r4, r7
   2a900:	6628      	str	r0, [r5, #96]	; 0x60
   2a902:	e7ae      	b.n	2a862 <mbedtls_sha_update_internal+0x2a>
   2a904:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2a906:	a902      	add	r1, sp, #8
   2a908:	4628      	mov	r0, r5
   2a90a:	f000 f96f 	bl	2abec <ProcessHashDrv>
   2a90e:	2800      	cmp	r0, #0
   2a910:	d1c5      	bne.n	2a89e <mbedtls_sha_update_internal+0x66>
   2a912:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2a914:	6628      	str	r0, [r5, #96]	; 0x60
   2a916:	e7a6      	b.n	2a866 <mbedtls_sha_update_internal+0x2e>

0002a918 <cc_mbedtls_sha256>:
   2a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a91a:	461c      	mov	r4, r3
   2a91c:	4605      	mov	r5, r0
   2a91e:	4811      	ldr	r0, [pc, #68]	; (2a964 <cc_mbedtls_sha256+0x4c>)
   2a920:	460e      	mov	r6, r1
   2a922:	4617      	mov	r7, r2
   2a924:	f7ff feca 	bl	2a6bc <cc_mbedtls_sha256_init>
   2a928:	4621      	mov	r1, r4
   2a92a:	480e      	ldr	r0, [pc, #56]	; (2a964 <cc_mbedtls_sha256+0x4c>)
   2a92c:	f7ff fee0 	bl	2a6f0 <cc_mbedtls_sha256_starts>
   2a930:	4604      	mov	r4, r0
   2a932:	b120      	cbz	r0, 2a93e <cc_mbedtls_sha256+0x26>
   2a934:	480b      	ldr	r0, [pc, #44]	; (2a964 <cc_mbedtls_sha256+0x4c>)
   2a936:	f7ff fed5 	bl	2a6e4 <cc_mbedtls_sha256_free>
   2a93a:	4620      	mov	r0, r4
   2a93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a93e:	4809      	ldr	r0, [pc, #36]	; (2a964 <cc_mbedtls_sha256+0x4c>)
   2a940:	4632      	mov	r2, r6
   2a942:	4629      	mov	r1, r5
   2a944:	f7ff fee8 	bl	2a718 <cc_mbedtls_sha256_update>
   2a948:	4604      	mov	r4, r0
   2a94a:	2800      	cmp	r0, #0
   2a94c:	d1f2      	bne.n	2a934 <cc_mbedtls_sha256+0x1c>
   2a94e:	4639      	mov	r1, r7
   2a950:	4804      	ldr	r0, [pc, #16]	; (2a964 <cc_mbedtls_sha256+0x4c>)
   2a952:	f7ff ff0b 	bl	2a76c <cc_mbedtls_sha256_finish>
   2a956:	4604      	mov	r4, r0
   2a958:	4802      	ldr	r0, [pc, #8]	; (2a964 <cc_mbedtls_sha256+0x4c>)
   2a95a:	f7ff fec3 	bl	2a6e4 <cc_mbedtls_sha256_free>
   2a95e:	4620      	mov	r0, r4
   2a960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a962:	bf00      	nop
   2a964:	200035f4 	.word	0x200035f4

0002a968 <RNG_PLAT_SetUserRngParameters>:
   2a968:	b530      	push	{r4, r5, lr}
   2a96a:	b083      	sub	sp, #12
   2a96c:	231c      	movs	r3, #28
   2a96e:	a901      	add	r1, sp, #4
   2a970:	4604      	mov	r4, r0
   2a972:	9301      	str	r3, [sp, #4]
   2a974:	f000 f83c 	bl	2a9f0 <CC_PalTrngParamGet>
   2a978:	4605      	mov	r5, r0
   2a97a:	b938      	cbnz	r0, 2a98c <RNG_PLAT_SetUserRngParameters+0x24>
   2a97c:	9b01      	ldr	r3, [sp, #4]
   2a97e:	2b1c      	cmp	r3, #28
   2a980:	d007      	beq.n	2a992 <RNG_PLAT_SetUserRngParameters+0x2a>
   2a982:	4d15      	ldr	r5, [pc, #84]	; (2a9d8 <RNG_PLAT_SetUserRngParameters+0x70>)
   2a984:	4620      	mov	r0, r4
   2a986:	211c      	movs	r1, #28
   2a988:	f000 f82e 	bl	2a9e8 <CC_PalMemSetZeroPlat>
   2a98c:	4628      	mov	r0, r5
   2a98e:	b003      	add	sp, #12
   2a990:	bd30      	pop	{r4, r5, pc}
   2a992:	e9d4 3200 	ldrd	r3, r2, [r4]
   2a996:	2101      	movs	r1, #1
   2a998:	3b00      	subs	r3, #0
   2a99a:	bf18      	it	ne
   2a99c:	2301      	movne	r3, #1
   2a99e:	61e1      	str	r1, [r4, #28]
   2a9a0:	b10a      	cbz	r2, 2a9a6 <RNG_PLAT_SetUserRngParameters+0x3e>
   2a9a2:	f043 0302 	orr.w	r3, r3, #2
   2a9a6:	68a2      	ldr	r2, [r4, #8]
   2a9a8:	b932      	cbnz	r2, 2a9b8 <RNG_PLAT_SetUserRngParameters+0x50>
   2a9aa:	68e2      	ldr	r2, [r4, #12]
   2a9ac:	b942      	cbnz	r2, 2a9c0 <RNG_PLAT_SetUserRngParameters+0x58>
   2a9ae:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2a9b2:	b97b      	cbnz	r3, 2a9d4 <RNG_PLAT_SetUserRngParameters+0x6c>
   2a9b4:	4d09      	ldr	r5, [pc, #36]	; (2a9dc <RNG_PLAT_SetUserRngParameters+0x74>)
   2a9b6:	e7e5      	b.n	2a984 <RNG_PLAT_SetUserRngParameters+0x1c>
   2a9b8:	68e2      	ldr	r2, [r4, #12]
   2a9ba:	f043 0304 	orr.w	r3, r3, #4
   2a9be:	b13a      	cbz	r2, 2a9d0 <RNG_PLAT_SetUserRngParameters+0x68>
   2a9c0:	f043 0308 	orr.w	r3, r3, #8
   2a9c4:	2200      	movs	r2, #0
   2a9c6:	4628      	mov	r0, r5
   2a9c8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2a9cc:	b003      	add	sp, #12
   2a9ce:	bd30      	pop	{r4, r5, pc}
   2a9d0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2a9d4:	4615      	mov	r5, r2
   2a9d6:	e7d9      	b.n	2a98c <RNG_PLAT_SetUserRngParameters+0x24>
   2a9d8:	00f00c37 	.word	0x00f00c37
   2a9dc:	00f00c0e 	.word	0x00f00c0e

0002a9e0 <CC_PalMemCopyPlat>:
   2a9e0:	f002 b954 	b.w	2cc8c <memmove>

0002a9e4 <CC_PalMemSetPlat>:
   2a9e4:	f002 b974 	b.w	2ccd0 <memset>

0002a9e8 <CC_PalMemSetZeroPlat>:
   2a9e8:	460a      	mov	r2, r1
   2a9ea:	2100      	movs	r1, #0
   2a9ec:	f002 b970 	b.w	2ccd0 <memset>

0002a9f0 <CC_PalTrngParamGet>:
   2a9f0:	b118      	cbz	r0, 2a9fa <CC_PalTrngParamGet+0xa>
   2a9f2:	b111      	cbz	r1, 2a9fa <CC_PalTrngParamGet+0xa>
   2a9f4:	680b      	ldr	r3, [r1, #0]
   2a9f6:	2b1c      	cmp	r3, #28
   2a9f8:	d001      	beq.n	2a9fe <CC_PalTrngParamGet+0xe>
   2a9fa:	2001      	movs	r0, #1
   2a9fc:	4770      	bx	lr
   2a9fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aa02:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   2aa06:	3201      	adds	r2, #1
   2aa08:	bf14      	ite	ne
   2aa0a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   2aa0e:	f241 225c 	movweq	r2, #4700	; 0x125c
   2aa12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aa16:	6002      	str	r2, [r0, #0]
   2aa18:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   2aa1c:	3201      	adds	r2, #1
   2aa1e:	bf14      	ite	ne
   2aa20:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   2aa24:	f641 1264 	movweq	r2, #6500	; 0x1964
   2aa28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aa2c:	6042      	str	r2, [r0, #4]
   2aa2e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   2aa32:	3201      	adds	r2, #1
   2aa34:	bf14      	ite	ne
   2aa36:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2aa3a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   2aa3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aa42:	6082      	str	r2, [r0, #8]
   2aa44:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   2aa48:	3201      	adds	r2, #1
   2aa4a:	bf14      	ite	ne
   2aa4c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   2aa50:	f241 3288 	movweq	r2, #5000	; 0x1388
   2aa54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aa58:	60c2      	str	r2, [r0, #12]
   2aa5a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   2aa5e:	3201      	adds	r2, #1
   2aa60:	bf14      	ite	ne
   2aa62:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   2aa66:	2290      	moveq	r2, #144	; 0x90
   2aa68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aa6c:	6102      	str	r2, [r0, #16]
   2aa6e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   2aa72:	3201      	adds	r2, #1
   2aa74:	bf14      	ite	ne
   2aa76:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   2aa7a:	2251      	moveq	r2, #81	; 0x51
   2aa7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aa80:	6142      	str	r2, [r0, #20]
   2aa82:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2aa86:	3201      	adds	r2, #1
   2aa88:	bf14      	ite	ne
   2aa8a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   2aa8e:	f240 3337 	movweq	r3, #823	; 0x337
   2aa92:	6183      	str	r3, [r0, #24]
   2aa94:	2000      	movs	r0, #0
   2aa96:	4770      	bx	lr

0002aa98 <LLF_RND_WaitRngInterrupt>:
   2aa98:	b508      	push	{r3, lr}
   2aa9a:	4601      	mov	r1, r0
   2aa9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2aaa0:	f7ff f95a 	bl	29d58 <CC_HalWaitInterruptRND>
   2aaa4:	4902      	ldr	r1, [pc, #8]	; (2aab0 <LLF_RND_WaitRngInterrupt+0x18>)
   2aaa6:	4a03      	ldr	r2, [pc, #12]	; (2aab4 <LLF_RND_WaitRngInterrupt+0x1c>)
   2aaa8:	2300      	movs	r3, #0
   2aaaa:	600b      	str	r3, [r1, #0]
   2aaac:	6013      	str	r3, [r2, #0]
   2aaae:	bd08      	pop	{r3, pc}
   2aab0:	5002b1c8 	.word	0x5002b1c8
   2aab4:	5002b12c 	.word	0x5002b12c

0002aab8 <LLF_RND_GetRoscSampleCnt>:
   2aab8:	3801      	subs	r0, #1
   2aaba:	2807      	cmp	r0, #7
   2aabc:	d805      	bhi.n	2aaca <LLF_RND_GetRoscSampleCnt+0x12>
   2aabe:	e8df f000 	tbb	[pc, r0]
   2aac2:	0e0a      	.short	0x0e0a
   2aac4:	04041204 	.word	0x04041204
   2aac8:	0604      	.short	0x0604
   2aaca:	4809      	ldr	r0, [pc, #36]	; (2aaf0 <LLF_RND_GetRoscSampleCnt+0x38>)
   2aacc:	4770      	bx	lr
   2aace:	68cb      	ldr	r3, [r1, #12]
   2aad0:	624b      	str	r3, [r1, #36]	; 0x24
   2aad2:	2000      	movs	r0, #0
   2aad4:	4770      	bx	lr
   2aad6:	680b      	ldr	r3, [r1, #0]
   2aad8:	624b      	str	r3, [r1, #36]	; 0x24
   2aada:	2000      	movs	r0, #0
   2aadc:	4770      	bx	lr
   2aade:	684b      	ldr	r3, [r1, #4]
   2aae0:	624b      	str	r3, [r1, #36]	; 0x24
   2aae2:	2000      	movs	r0, #0
   2aae4:	4770      	bx	lr
   2aae6:	688b      	ldr	r3, [r1, #8]
   2aae8:	624b      	str	r3, [r1, #36]	; 0x24
   2aaea:	2000      	movs	r0, #0
   2aaec:	4770      	bx	lr
   2aaee:	bf00      	nop
   2aaf0:	00f10c31 	.word	0x00f10c31

0002aaf4 <LLF_RND_GetFastestRosc>:
   2aaf4:	680b      	ldr	r3, [r1, #0]
   2aaf6:	e002      	b.n	2aafe <LLF_RND_GetFastestRosc+0xa>
   2aaf8:	2b08      	cmp	r3, #8
   2aafa:	600b      	str	r3, [r1, #0]
   2aafc:	d806      	bhi.n	2ab0c <LLF_RND_GetFastestRosc+0x18>
   2aafe:	6a02      	ldr	r2, [r0, #32]
   2ab00:	4213      	tst	r3, r2
   2ab02:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2ab06:	d0f7      	beq.n	2aaf8 <LLF_RND_GetFastestRosc+0x4>
   2ab08:	2000      	movs	r0, #0
   2ab0a:	4770      	bx	lr
   2ab0c:	4800      	ldr	r0, [pc, #0]	; (2ab10 <LLF_RND_GetFastestRosc+0x1c>)
   2ab0e:	4770      	bx	lr
   2ab10:	00f10c31 	.word	0x00f10c31

0002ab14 <LLF_RND_TurnOffTrng>:
   2ab14:	4904      	ldr	r1, [pc, #16]	; (2ab28 <LLF_RND_TurnOffTrng+0x14>)
   2ab16:	4a05      	ldr	r2, [pc, #20]	; (2ab2c <LLF_RND_TurnOffTrng+0x18>)
   2ab18:	2300      	movs	r3, #0
   2ab1a:	600b      	str	r3, [r1, #0]
   2ab1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2ab20:	6013      	str	r3, [r2, #0]
   2ab22:	f7ff b8ff 	b.w	29d24 <CC_HalClearInterruptBit>
   2ab26:	bf00      	nop
   2ab28:	5002b12c 	.word	0x5002b12c
   2ab2c:	5002b1c4 	.word	0x5002b1c4

0002ab30 <SetDataBuffersInfo>:
   2ab30:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab32:	b083      	sub	sp, #12
   2ab34:	2400      	movs	r4, #0
   2ab36:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   2ab3a:	f88d 4007 	strb.w	r4, [sp, #7]
   2ab3e:	d325      	bcc.n	2ab8c <SetDataBuffersInfo+0x5c>
   2ab40:	460c      	mov	r4, r1
   2ab42:	4404      	add	r4, r0
   2ab44:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   2ab48:	4605      	mov	r5, r0
   2ab4a:	d81f      	bhi.n	2ab8c <SetDataBuffersInfo+0x5c>
   2ab4c:	4617      	mov	r7, r2
   2ab4e:	461e      	mov	r6, r3
   2ab50:	2201      	movs	r2, #1
   2ab52:	f10d 0307 	add.w	r3, sp, #7
   2ab56:	f000 fe7f 	bl	2b858 <CC_PalDataBufferAttrGet>
   2ab5a:	4604      	mov	r4, r0
   2ab5c:	b9b0      	cbnz	r0, 2ab8c <SetDataBuffersInfo+0x5c>
   2ab5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ab60:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ab64:	603d      	str	r5, [r7, #0]
   2ab66:	713b      	strb	r3, [r7, #4]
   2ab68:	b192      	cbz	r2, 2ab90 <SetDataBuffersInfo+0x60>
   2ab6a:	b14e      	cbz	r6, 2ab80 <SetDataBuffersInfo+0x50>
   2ab6c:	4602      	mov	r2, r0
   2ab6e:	9908      	ldr	r1, [sp, #32]
   2ab70:	f10d 0307 	add.w	r3, sp, #7
   2ab74:	4630      	mov	r0, r6
   2ab76:	f000 fe6f 	bl	2b858 <CC_PalDataBufferAttrGet>
   2ab7a:	b938      	cbnz	r0, 2ab8c <SetDataBuffersInfo+0x5c>
   2ab7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ab80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ab82:	4620      	mov	r0, r4
   2ab84:	6016      	str	r6, [r2, #0]
   2ab86:	7113      	strb	r3, [r2, #4]
   2ab88:	b003      	add	sp, #12
   2ab8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ab8c:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   2ab90:	4620      	mov	r0, r4
   2ab92:	b003      	add	sp, #12
   2ab94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ab96:	bf00      	nop

0002ab98 <InitHashDrv>:
   2ab98:	b1e8      	cbz	r0, 2abd6 <InitHashDrv+0x3e>
   2ab9a:	b510      	push	{r4, lr}
   2ab9c:	6804      	ldr	r4, [r0, #0]
   2ab9e:	2c01      	cmp	r4, #1
   2aba0:	d004      	beq.n	2abac <InitHashDrv+0x14>
   2aba2:	2c02      	cmp	r4, #2
   2aba4:	d010      	beq.n	2abc8 <InitHashDrv+0x30>
   2aba6:	b144      	cbz	r4, 2abba <InitHashDrv+0x22>
   2aba8:	480c      	ldr	r0, [pc, #48]	; (2abdc <InitHashDrv+0x44>)
   2abaa:	bd10      	pop	{r4, pc}
   2abac:	490c      	ldr	r1, [pc, #48]	; (2abe0 <InitHashDrv+0x48>)
   2abae:	2220      	movs	r2, #32
   2abb0:	3008      	adds	r0, #8
   2abb2:	f7ff ff15 	bl	2a9e0 <CC_PalMemCopyPlat>
   2abb6:	2000      	movs	r0, #0
   2abb8:	bd10      	pop	{r4, pc}
   2abba:	490a      	ldr	r1, [pc, #40]	; (2abe4 <InitHashDrv+0x4c>)
   2abbc:	2214      	movs	r2, #20
   2abbe:	3008      	adds	r0, #8
   2abc0:	f7ff ff0e 	bl	2a9e0 <CC_PalMemCopyPlat>
   2abc4:	4620      	mov	r0, r4
   2abc6:	bd10      	pop	{r4, pc}
   2abc8:	4907      	ldr	r1, [pc, #28]	; (2abe8 <InitHashDrv+0x50>)
   2abca:	2220      	movs	r2, #32
   2abcc:	3008      	adds	r0, #8
   2abce:	f7ff ff07 	bl	2a9e0 <CC_PalMemCopyPlat>
   2abd2:	2000      	movs	r0, #0
   2abd4:	bd10      	pop	{r4, pc}
   2abd6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2abda:	4770      	bx	lr
   2abdc:	00f30001 	.word	0x00f30001
   2abe0:	00032ee4 	.word	0x00032ee4
   2abe4:	00032eb0 	.word	0x00032eb0
   2abe8:	00032ec4 	.word	0x00032ec4

0002abec <ProcessHashDrv>:
   2abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2abf0:	2900      	cmp	r1, #0
   2abf2:	f000 80ef 	beq.w	2add4 <ProcessHashDrv+0x1e8>
   2abf6:	4604      	mov	r4, r0
   2abf8:	2800      	cmp	r0, #0
   2abfa:	f000 80ef 	beq.w	2addc <ProcessHashDrv+0x1f0>
   2abfe:	6803      	ldr	r3, [r0, #0]
   2ac00:	4617      	mov	r7, r2
   2ac02:	460e      	mov	r6, r1
   2ac04:	2b00      	cmp	r3, #0
   2ac06:	f000 80b9 	beq.w	2ad7c <ProcessHashDrv+0x190>
   2ac0a:	3b01      	subs	r3, #1
   2ac0c:	2b01      	cmp	r3, #1
   2ac0e:	f200 80cd 	bhi.w	2adac <ProcessHashDrv+0x1c0>
   2ac12:	4874      	ldr	r0, [pc, #464]	; (2ade4 <ProcessHashDrv+0x1f8>)
   2ac14:	f04f 31ff 	mov.w	r1, #4294967295
   2ac18:	f04f 0802 	mov.w	r8, #2
   2ac1c:	f7ff f92a 	bl	29e74 <CC_PalMutexLock>
   2ac20:	2800      	cmp	r0, #0
   2ac22:	f040 80b5 	bne.w	2ad90 <ProcessHashDrv+0x1a4>
   2ac26:	2000      	movs	r0, #0
   2ac28:	f7ff f954 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2ac2c:	4605      	mov	r5, r0
   2ac2e:	2800      	cmp	r0, #0
   2ac30:	f040 80b8 	bne.w	2ada4 <ProcessHashDrv+0x1b8>
   2ac34:	4a6c      	ldr	r2, [pc, #432]	; (2ade8 <ProcessHashDrv+0x1fc>)
   2ac36:	6813      	ldr	r3, [r2, #0]
   2ac38:	2b00      	cmp	r3, #0
   2ac3a:	d1fc      	bne.n	2ac36 <ProcessHashDrv+0x4a>
   2ac3c:	486b      	ldr	r0, [pc, #428]	; (2adec <ProcessHashDrv+0x200>)
   2ac3e:	6803      	ldr	r3, [r0, #0]
   2ac40:	2b00      	cmp	r3, #0
   2ac42:	d1fc      	bne.n	2ac3e <ProcessHashDrv+0x52>
   2ac44:	f04f 30ff 	mov.w	r0, #4294967295
   2ac48:	f7ff f86c 	bl	29d24 <CC_HalClearInterruptBit>
   2ac4c:	4b68      	ldr	r3, [pc, #416]	; (2adf0 <ProcessHashDrv+0x204>)
   2ac4e:	6818      	ldr	r0, [r3, #0]
   2ac50:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2ac54:	f7ff f874 	bl	29d40 <CC_HalMaskInterrupt>
   2ac58:	4866      	ldr	r0, [pc, #408]	; (2adf4 <ProcessHashDrv+0x208>)
   2ac5a:	4a67      	ldr	r2, [pc, #412]	; (2adf8 <ProcessHashDrv+0x20c>)
   2ac5c:	4967      	ldr	r1, [pc, #412]	; (2adfc <ProcessHashDrv+0x210>)
   2ac5e:	2301      	movs	r3, #1
   2ac60:	6003      	str	r3, [r0, #0]
   2ac62:	2007      	movs	r0, #7
   2ac64:	6010      	str	r0, [r2, #0]
   2ac66:	600b      	str	r3, [r1, #0]
   2ac68:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   2ac6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2ac6e:	6013      	str	r3, [r2, #0]
   2ac70:	4b63      	ldr	r3, [pc, #396]	; (2ae00 <ProcessHashDrv+0x214>)
   2ac72:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   2ac74:	6051      	str	r1, [r2, #4]
   2ac76:	f8c3 8000 	str.w	r8, [r3]
   2ac7a:	6823      	ldr	r3, [r4, #0]
   2ac7c:	b15b      	cbz	r3, 2ac96 <ProcessHashDrv+0xaa>
   2ac7e:	3b01      	subs	r3, #1
   2ac80:	2b01      	cmp	r3, #1
   2ac82:	d817      	bhi.n	2acb4 <ProcessHashDrv+0xc8>
   2ac84:	4b5f      	ldr	r3, [pc, #380]	; (2ae04 <ProcessHashDrv+0x218>)
   2ac86:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2ac88:	601a      	str	r2, [r3, #0]
   2ac8a:	6a22      	ldr	r2, [r4, #32]
   2ac8c:	f843 2c04 	str.w	r2, [r3, #-4]
   2ac90:	69e2      	ldr	r2, [r4, #28]
   2ac92:	f843 2c08 	str.w	r2, [r3, #-8]
   2ac96:	4b5c      	ldr	r3, [pc, #368]	; (2ae08 <ProcessHashDrv+0x21c>)
   2ac98:	69a2      	ldr	r2, [r4, #24]
   2ac9a:	601a      	str	r2, [r3, #0]
   2ac9c:	6962      	ldr	r2, [r4, #20]
   2ac9e:	f843 2c04 	str.w	r2, [r3, #-4]
   2aca2:	6922      	ldr	r2, [r4, #16]
   2aca4:	f843 2c08 	str.w	r2, [r3, #-8]
   2aca8:	68e2      	ldr	r2, [r4, #12]
   2acaa:	f843 2c0c 	str.w	r2, [r3, #-12]
   2acae:	68a2      	ldr	r2, [r4, #8]
   2acb0:	f843 2c10 	str.w	r2, [r3, #-16]
   2acb4:	4a55      	ldr	r2, [pc, #340]	; (2ae0c <ProcessHashDrv+0x220>)
   2acb6:	6813      	ldr	r3, [r2, #0]
   2acb8:	2b00      	cmp	r3, #0
   2acba:	d1fc      	bne.n	2acb6 <ProcessHashDrv+0xca>
   2acbc:	2f00      	cmp	r7, #0
   2acbe:	d059      	beq.n	2ad74 <ProcessHashDrv+0x188>
   2acc0:	6863      	ldr	r3, [r4, #4]
   2acc2:	2b01      	cmp	r3, #1
   2acc4:	bf04      	itt	eq
   2acc6:	4a52      	ldreq	r2, [pc, #328]	; (2ae10 <ProcessHashDrv+0x224>)
   2acc8:	6013      	streq	r3, [r2, #0]
   2acca:	4a52      	ldr	r2, [pc, #328]	; (2ae14 <ProcessHashDrv+0x228>)
   2accc:	4b52      	ldr	r3, [pc, #328]	; (2ae18 <ProcessHashDrv+0x22c>)
   2acce:	6831      	ldr	r1, [r6, #0]
   2acd0:	6011      	str	r1, [r2, #0]
   2acd2:	2040      	movs	r0, #64	; 0x40
   2acd4:	601f      	str	r7, [r3, #0]
   2acd6:	f7ff f839 	bl	29d4c <CC_HalWaitInterrupt>
   2acda:	4605      	mov	r5, r0
   2acdc:	4a4b      	ldr	r2, [pc, #300]	; (2ae0c <ProcessHashDrv+0x220>)
   2acde:	6813      	ldr	r3, [r2, #0]
   2ace0:	2b00      	cmp	r3, #0
   2ace2:	d1fc      	bne.n	2acde <ProcessHashDrv+0xf2>
   2ace4:	4a41      	ldr	r2, [pc, #260]	; (2adec <ProcessHashDrv+0x200>)
   2ace6:	6813      	ldr	r3, [r2, #0]
   2ace8:	2b00      	cmp	r3, #0
   2acea:	d1fc      	bne.n	2ace6 <ProcessHashDrv+0xfa>
   2acec:	6823      	ldr	r3, [r4, #0]
   2acee:	b15b      	cbz	r3, 2ad08 <ProcessHashDrv+0x11c>
   2acf0:	3b01      	subs	r3, #1
   2acf2:	2b01      	cmp	r3, #1
   2acf4:	d817      	bhi.n	2ad26 <ProcessHashDrv+0x13a>
   2acf6:	4a43      	ldr	r2, [pc, #268]	; (2ae04 <ProcessHashDrv+0x218>)
   2acf8:	4b48      	ldr	r3, [pc, #288]	; (2ae1c <ProcessHashDrv+0x230>)
   2acfa:	6812      	ldr	r2, [r2, #0]
   2acfc:	6262      	str	r2, [r4, #36]	; 0x24
   2acfe:	681a      	ldr	r2, [r3, #0]
   2ad00:	6222      	str	r2, [r4, #32]
   2ad02:	3b04      	subs	r3, #4
   2ad04:	681b      	ldr	r3, [r3, #0]
   2ad06:	61e3      	str	r3, [r4, #28]
   2ad08:	4a3f      	ldr	r2, [pc, #252]	; (2ae08 <ProcessHashDrv+0x21c>)
   2ad0a:	4b45      	ldr	r3, [pc, #276]	; (2ae20 <ProcessHashDrv+0x234>)
   2ad0c:	6812      	ldr	r2, [r2, #0]
   2ad0e:	61a2      	str	r2, [r4, #24]
   2ad10:	681a      	ldr	r2, [r3, #0]
   2ad12:	6162      	str	r2, [r4, #20]
   2ad14:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2ad18:	6122      	str	r2, [r4, #16]
   2ad1a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   2ad1e:	60e2      	str	r2, [r4, #12]
   2ad20:	3b0c      	subs	r3, #12
   2ad22:	681b      	ldr	r3, [r3, #0]
   2ad24:	60a3      	str	r3, [r4, #8]
   2ad26:	4b3f      	ldr	r3, [pc, #252]	; (2ae24 <ProcessHashDrv+0x238>)
   2ad28:	4a3f      	ldr	r2, [pc, #252]	; (2ae28 <ProcessHashDrv+0x23c>)
   2ad2a:	681b      	ldr	r3, [r3, #0]
   2ad2c:	64a3      	str	r3, [r4, #72]	; 0x48
   2ad2e:	6812      	ldr	r2, [r2, #0]
   2ad30:	4b32      	ldr	r3, [pc, #200]	; (2adfc <ProcessHashDrv+0x210>)
   2ad32:	64e2      	str	r2, [r4, #76]	; 0x4c
   2ad34:	4836      	ldr	r0, [pc, #216]	; (2ae10 <ProcessHashDrv+0x224>)
   2ad36:	493d      	ldr	r1, [pc, #244]	; (2ae2c <ProcessHashDrv+0x240>)
   2ad38:	2201      	movs	r2, #1
   2ad3a:	601a      	str	r2, [r3, #0]
   2ad3c:	2300      	movs	r3, #0
   2ad3e:	4a33      	ldr	r2, [pc, #204]	; (2ae0c <ProcessHashDrv+0x220>)
   2ad40:	6003      	str	r3, [r0, #0]
   2ad42:	600b      	str	r3, [r1, #0]
   2ad44:	6813      	ldr	r3, [r2, #0]
   2ad46:	2b00      	cmp	r3, #0
   2ad48:	d1fc      	bne.n	2ad44 <ProcessHashDrv+0x158>
   2ad4a:	4a2a      	ldr	r2, [pc, #168]	; (2adf4 <ProcessHashDrv+0x208>)
   2ad4c:	6013      	str	r3, [r2, #0]
   2ad4e:	2d00      	cmp	r5, #0
   2ad50:	d13a      	bne.n	2adc8 <ProcessHashDrv+0x1dc>
   2ad52:	4b27      	ldr	r3, [pc, #156]	; (2adf0 <ProcessHashDrv+0x204>)
   2ad54:	6818      	ldr	r0, [r3, #0]
   2ad56:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2ad5a:	f7fe fff1 	bl	29d40 <CC_HalMaskInterrupt>
   2ad5e:	2001      	movs	r0, #1
   2ad60:	f7ff f8b8 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2ad64:	bb60      	cbnz	r0, 2adc0 <ProcessHashDrv+0x1d4>
   2ad66:	481f      	ldr	r0, [pc, #124]	; (2ade4 <ProcessHashDrv+0x1f8>)
   2ad68:	f7ff f88c 	bl	29e84 <CC_PalMutexUnlock>
   2ad6c:	bb10      	cbnz	r0, 2adb4 <ProcessHashDrv+0x1c8>
   2ad6e:	4628      	mov	r0, r5
   2ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ad74:	4b2d      	ldr	r3, [pc, #180]	; (2ae2c <ProcessHashDrv+0x240>)
   2ad76:	2204      	movs	r2, #4
   2ad78:	601a      	str	r2, [r3, #0]
   2ad7a:	e7af      	b.n	2acdc <ProcessHashDrv+0xf0>
   2ad7c:	4819      	ldr	r0, [pc, #100]	; (2ade4 <ProcessHashDrv+0x1f8>)
   2ad7e:	f04f 31ff 	mov.w	r1, #4294967295
   2ad82:	f04f 0801 	mov.w	r8, #1
   2ad86:	f7ff f875 	bl	29e74 <CC_PalMutexLock>
   2ad8a:	2800      	cmp	r0, #0
   2ad8c:	f43f af4b 	beq.w	2ac26 <ProcessHashDrv+0x3a>
   2ad90:	4827      	ldr	r0, [pc, #156]	; (2ae30 <ProcessHashDrv+0x244>)
   2ad92:	f7fe f923 	bl	28fdc <CC_PalAbort>
   2ad96:	2000      	movs	r0, #0
   2ad98:	f7ff f89c 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2ad9c:	4605      	mov	r5, r0
   2ad9e:	2800      	cmp	r0, #0
   2ada0:	f43f af48 	beq.w	2ac34 <ProcessHashDrv+0x48>
   2ada4:	4823      	ldr	r0, [pc, #140]	; (2ae34 <ProcessHashDrv+0x248>)
   2ada6:	f7fe f919 	bl	28fdc <CC_PalAbort>
   2adaa:	e743      	b.n	2ac34 <ProcessHashDrv+0x48>
   2adac:	4d22      	ldr	r5, [pc, #136]	; (2ae38 <ProcessHashDrv+0x24c>)
   2adae:	4628      	mov	r0, r5
   2adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2adb4:	4821      	ldr	r0, [pc, #132]	; (2ae3c <ProcessHashDrv+0x250>)
   2adb6:	f7fe f911 	bl	28fdc <CC_PalAbort>
   2adba:	4628      	mov	r0, r5
   2adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2adc0:	481f      	ldr	r0, [pc, #124]	; (2ae40 <ProcessHashDrv+0x254>)
   2adc2:	f7fe f90b 	bl	28fdc <CC_PalAbort>
   2adc6:	e7ce      	b.n	2ad66 <ProcessHashDrv+0x17a>
   2adc8:	f104 0008 	add.w	r0, r4, #8
   2adcc:	2110      	movs	r1, #16
   2adce:	f7ff fe0b 	bl	2a9e8 <CC_PalMemSetZeroPlat>
   2add2:	e7be      	b.n	2ad52 <ProcessHashDrv+0x166>
   2add4:	4d1b      	ldr	r5, [pc, #108]	; (2ae44 <ProcessHashDrv+0x258>)
   2add6:	4628      	mov	r0, r5
   2add8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2addc:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   2ade0:	e7c5      	b.n	2ad6e <ProcessHashDrv+0x182>
   2ade2:	bf00      	nop
   2ade4:	20000938 	.word	0x20000938
   2ade8:	5002b91c 	.word	0x5002b91c
   2adec:	5002bc20 	.word	0x5002bc20
   2adf0:	5002ba04 	.word	0x5002ba04
   2adf4:	5002b818 	.word	0x5002b818
   2adf8:	5002b900 	.word	0x5002b900
   2adfc:	5002b7c4 	.word	0x5002b7c4
   2ae00:	5002b7c0 	.word	0x5002b7c0
   2ae04:	5002b65c 	.word	0x5002b65c
   2ae08:	5002b650 	.word	0x5002b650
   2ae0c:	5002b910 	.word	0x5002b910
   2ae10:	5002b684 	.word	0x5002b684
   2ae14:	5002bc28 	.word	0x5002bc28
   2ae18:	5002bc2c 	.word	0x5002bc2c
   2ae1c:	5002b658 	.word	0x5002b658
   2ae20:	5002b64c 	.word	0x5002b64c
   2ae24:	5002b7cc 	.word	0x5002b7cc
   2ae28:	5002b7d0 	.word	0x5002b7d0
   2ae2c:	5002b7c8 	.word	0x5002b7c8
   2ae30:	00032de4 	.word	0x00032de4
   2ae34:	00032dfc 	.word	0x00032dfc
   2ae38:	00f30001 	.word	0x00f30001
   2ae3c:	00032e3c 	.word	0x00032e3c
   2ae40:	00032e1c 	.word	0x00032e1c
   2ae44:	00f30003 	.word	0x00f30003

0002ae48 <FinishHashDrv>:
   2ae48:	2800      	cmp	r0, #0
   2ae4a:	d03b      	beq.n	2aec4 <FinishHashDrv+0x7c>
   2ae4c:	b4f0      	push	{r4, r5, r6, r7}
   2ae4e:	b082      	sub	sp, #8
   2ae50:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ae52:	9301      	str	r3, [sp, #4]
   2ae54:	6883      	ldr	r3, [r0, #8]
   2ae56:	fa93 fc83 	rev.w	ip, r3
   2ae5a:	9b01      	ldr	r3, [sp, #4]
   2ae5c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   2ae60:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   2ae64:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   2ae68:	ba1b      	rev	r3, r3
   2ae6a:	6243      	str	r3, [r0, #36]	; 0x24
   2ae6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2ae6e:	9301      	str	r3, [sp, #4]
   2ae70:	ba09      	rev	r1, r1
   2ae72:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2ae74:	61c1      	str	r1, [r0, #28]
   2ae76:	ba12      	rev	r2, r2
   2ae78:	6202      	str	r2, [r0, #32]
   2ae7a:	ba3f      	rev	r7, r7
   2ae7c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   2ae80:	ba36      	rev	r6, r6
   2ae82:	ba2d      	rev	r5, r5
   2ae84:	ba24      	rev	r4, r4
   2ae86:	e9c0 c702 	strd	ip, r7, [r0, #8]
   2ae8a:	e9c0 6504 	strd	r6, r5, [r0, #16]
   2ae8e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   2ae90:	6b06      	ldr	r6, [r0, #48]	; 0x30
   2ae92:	6b45      	ldr	r5, [r0, #52]	; 0x34
   2ae94:	6184      	str	r4, [r0, #24]
   2ae96:	fa93 fc83 	rev.w	ip, r3
   2ae9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
   2ae9c:	9b01      	ldr	r3, [sp, #4]
   2ae9e:	ba3f      	rev	r7, r7
   2aea0:	ba36      	rev	r6, r6
   2aea2:	ba2d      	rev	r5, r5
   2aea4:	ba24      	rev	r4, r4
   2aea6:	ba09      	rev	r1, r1
   2aea8:	ba12      	rev	r2, r2
   2aeaa:	ba1b      	rev	r3, r3
   2aeac:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   2aeb0:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   2aeb4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2aeb8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   2aebc:	2000      	movs	r0, #0
   2aebe:	b002      	add	sp, #8
   2aec0:	bcf0      	pop	{r4, r5, r6, r7}
   2aec2:	4770      	bx	lr
   2aec4:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2aec8:	4770      	bx	lr
   2aeca:	bf00      	nop

0002aecc <LoadAesKey>:
   2aecc:	2800      	cmp	r0, #0
   2aece:	d03b      	beq.n	2af48 <LoadAesKey+0x7c>
   2aed0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2aed4:	2b00      	cmp	r3, #0
   2aed6:	d02c      	beq.n	2af32 <LoadAesKey+0x66>
   2aed8:	2b03      	cmp	r3, #3
   2aeda:	b510      	push	{r4, lr}
   2aedc:	d00f      	beq.n	2aefe <LoadAesKey+0x32>
   2aede:	481c      	ldr	r0, [pc, #112]	; (2af50 <LoadAesKey+0x84>)
   2aee0:	4c1c      	ldr	r4, [pc, #112]	; (2af54 <LoadAesKey+0x88>)
   2aee2:	6822      	ldr	r2, [r4, #0]
   2aee4:	4b1c      	ldr	r3, [pc, #112]	; (2af58 <LoadAesKey+0x8c>)
   2aee6:	6812      	ldr	r2, [r2, #0]
   2aee8:	601a      	str	r2, [r3, #0]
   2aeea:	6822      	ldr	r2, [r4, #0]
   2aeec:	6852      	ldr	r2, [r2, #4]
   2aeee:	605a      	str	r2, [r3, #4]
   2aef0:	6822      	ldr	r2, [r4, #0]
   2aef2:	6892      	ldr	r2, [r2, #8]
   2aef4:	609a      	str	r2, [r3, #8]
   2aef6:	6822      	ldr	r2, [r4, #0]
   2aef8:	68d2      	ldr	r2, [r2, #12]
   2aefa:	60da      	str	r2, [r3, #12]
   2aefc:	bd10      	pop	{r4, pc}
   2aefe:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2af00:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2af02:	4c14      	ldr	r4, [pc, #80]	; (2af54 <LoadAesKey+0x88>)
   2af04:	f000 fba4 	bl	2b650 <kmu_validate_kdr_slot_and_size>
   2af08:	2800      	cmp	r0, #0
   2af0a:	d1ea      	bne.n	2aee2 <LoadAesKey+0x16>
   2af0c:	6821      	ldr	r1, [r4, #0]
   2af0e:	4a12      	ldr	r2, [pc, #72]	; (2af58 <LoadAesKey+0x8c>)
   2af10:	6809      	ldr	r1, [r1, #0]
   2af12:	6011      	str	r1, [r2, #0]
   2af14:	6821      	ldr	r1, [r4, #0]
   2af16:	4b11      	ldr	r3, [pc, #68]	; (2af5c <LoadAesKey+0x90>)
   2af18:	6849      	ldr	r1, [r1, #4]
   2af1a:	6019      	str	r1, [r3, #0]
   2af1c:	6821      	ldr	r1, [r4, #0]
   2af1e:	6889      	ldr	r1, [r1, #8]
   2af20:	6091      	str	r1, [r2, #8]
   2af22:	6822      	ldr	r2, [r4, #0]
   2af24:	68d2      	ldr	r2, [r2, #12]
   2af26:	609a      	str	r2, [r3, #8]
   2af28:	f000 fb9e 	bl	2b668 <kmu_use_kdr_key>
   2af2c:	2800      	cmp	r0, #0
   2af2e:	d1d8      	bne.n	2aee2 <LoadAesKey+0x16>
   2af30:	bd10      	pop	{r4, pc}
   2af32:	4a09      	ldr	r2, [pc, #36]	; (2af58 <LoadAesKey+0x8c>)
   2af34:	6901      	ldr	r1, [r0, #16]
   2af36:	6011      	str	r1, [r2, #0]
   2af38:	6941      	ldr	r1, [r0, #20]
   2af3a:	6051      	str	r1, [r2, #4]
   2af3c:	6981      	ldr	r1, [r0, #24]
   2af3e:	6091      	str	r1, [r2, #8]
   2af40:	69c1      	ldr	r1, [r0, #28]
   2af42:	60d1      	str	r1, [r2, #12]
   2af44:	4618      	mov	r0, r3
   2af46:	4770      	bx	lr
   2af48:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2af4c:	4770      	bx	lr
   2af4e:	bf00      	nop
   2af50:	00f10009 	.word	0x00f10009
   2af54:	20000928 	.word	0x20000928
   2af58:	5002b400 	.word	0x5002b400
   2af5c:	5002b404 	.word	0x5002b404

0002af60 <InitAes.part.0>:
   2af60:	4a32      	ldr	r2, [pc, #200]	; (2b02c <InitAes.part.0+0xcc>)
   2af62:	b510      	push	{r4, lr}
   2af64:	4604      	mov	r4, r0
   2af66:	6813      	ldr	r3, [r2, #0]
   2af68:	2b00      	cmp	r3, #0
   2af6a:	d1fc      	bne.n	2af66 <InitAes.part.0+0x6>
   2af6c:	4a30      	ldr	r2, [pc, #192]	; (2b030 <InitAes.part.0+0xd0>)
   2af6e:	6813      	ldr	r3, [r2, #0]
   2af70:	2b00      	cmp	r3, #0
   2af72:	d1fc      	bne.n	2af6e <InitAes.part.0+0xe>
   2af74:	4a2f      	ldr	r2, [pc, #188]	; (2b034 <InitAes.part.0+0xd4>)
   2af76:	6813      	ldr	r3, [r2, #0]
   2af78:	2b00      	cmp	r3, #0
   2af7a:	d1fc      	bne.n	2af76 <InitAes.part.0+0x16>
   2af7c:	4a2e      	ldr	r2, [pc, #184]	; (2b038 <InitAes.part.0+0xd8>)
   2af7e:	6813      	ldr	r3, [r2, #0]
   2af80:	2b00      	cmp	r3, #0
   2af82:	d1fc      	bne.n	2af7e <InitAes.part.0+0x1e>
   2af84:	4a2d      	ldr	r2, [pc, #180]	; (2b03c <InitAes.part.0+0xdc>)
   2af86:	6813      	ldr	r3, [r2, #0]
   2af88:	2b00      	cmp	r3, #0
   2af8a:	d1fc      	bne.n	2af86 <InitAes.part.0+0x26>
   2af8c:	4a2c      	ldr	r2, [pc, #176]	; (2b040 <InitAes.part.0+0xe0>)
   2af8e:	6813      	ldr	r3, [r2, #0]
   2af90:	2b00      	cmp	r3, #0
   2af92:	d1fc      	bne.n	2af8e <InitAes.part.0+0x2e>
   2af94:	f04f 30ff 	mov.w	r0, #4294967295
   2af98:	f7fe fec4 	bl	29d24 <CC_HalClearInterruptBit>
   2af9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2af9e:	f023 0304 	bic.w	r3, r3, #4
   2afa2:	2b03      	cmp	r3, #3
   2afa4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2afa6:	d036      	beq.n	2b016 <InitAes.part.0+0xb6>
   2afa8:	2b01      	cmp	r3, #1
   2afaa:	4b26      	ldr	r3, [pc, #152]	; (2b044 <InitAes.part.0+0xe4>)
   2afac:	6818      	ldr	r0, [r3, #0]
   2afae:	bf0c      	ite	eq
   2afb0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   2afb4:	f020 0020 	bicne.w	r0, r0, #32
   2afb8:	f7fe fec2 	bl	29d40 <CC_HalMaskInterrupt>
   2afbc:	4b22      	ldr	r3, [pc, #136]	; (2b048 <InitAes.part.0+0xe8>)
   2afbe:	4a1b      	ldr	r2, [pc, #108]	; (2b02c <InitAes.part.0+0xcc>)
   2afc0:	2101      	movs	r1, #1
   2afc2:	6019      	str	r1, [r3, #0]
   2afc4:	6813      	ldr	r3, [r2, #0]
   2afc6:	2b00      	cmp	r3, #0
   2afc8:	d1fc      	bne.n	2afc4 <InitAes.part.0+0x64>
   2afca:	4a19      	ldr	r2, [pc, #100]	; (2b030 <InitAes.part.0+0xd0>)
   2afcc:	6813      	ldr	r3, [r2, #0]
   2afce:	2b00      	cmp	r3, #0
   2afd0:	d1fc      	bne.n	2afcc <InitAes.part.0+0x6c>
   2afd2:	491e      	ldr	r1, [pc, #120]	; (2b04c <InitAes.part.0+0xec>)
   2afd4:	4a15      	ldr	r2, [pc, #84]	; (2b02c <InitAes.part.0+0xcc>)
   2afd6:	600b      	str	r3, [r1, #0]
   2afd8:	6813      	ldr	r3, [r2, #0]
   2afda:	2b00      	cmp	r3, #0
   2afdc:	d1fc      	bne.n	2afd8 <InitAes.part.0+0x78>
   2afde:	4a14      	ldr	r2, [pc, #80]	; (2b030 <InitAes.part.0+0xd0>)
   2afe0:	6813      	ldr	r3, [r2, #0]
   2afe2:	2b00      	cmp	r3, #0
   2afe4:	d1fc      	bne.n	2afe0 <InitAes.part.0+0x80>
   2afe6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2afe8:	f022 0104 	bic.w	r1, r2, #4
   2afec:	2903      	cmp	r1, #3
   2afee:	bf18      	it	ne
   2aff0:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   2aff2:	4917      	ldr	r1, [pc, #92]	; (2b050 <InitAes.part.0+0xf0>)
   2aff4:	ea4f 0282 	mov.w	r2, r2, lsl #2
   2aff8:	bf18      	it	ne
   2affa:	f003 0301 	andne.w	r3, r3, #1
   2affe:	f002 021c 	and.w	r2, r2, #28
   2b002:	4313      	orrs	r3, r2
   2b004:	600b      	str	r3, [r1, #0]
   2b006:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b008:	2b07      	cmp	r3, #7
   2b00a:	d102      	bne.n	2b012 <InitAes.part.0+0xb2>
   2b00c:	4b11      	ldr	r3, [pc, #68]	; (2b054 <InitAes.part.0+0xf4>)
   2b00e:	2201      	movs	r2, #1
   2b010:	601a      	str	r2, [r3, #0]
   2b012:	2000      	movs	r0, #0
   2b014:	bd10      	pop	{r4, pc}
   2b016:	2b01      	cmp	r3, #1
   2b018:	4b0a      	ldr	r3, [pc, #40]	; (2b044 <InitAes.part.0+0xe4>)
   2b01a:	6818      	ldr	r0, [r3, #0]
   2b01c:	bf0c      	ite	eq
   2b01e:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   2b022:	f020 0010 	bicne.w	r0, r0, #16
   2b026:	f7fe fe8b 	bl	29d40 <CC_HalMaskInterrupt>
   2b02a:	e7c7      	b.n	2afbc <InitAes.part.0+0x5c>
   2b02c:	5002b910 	.word	0x5002b910
   2b030:	5002b470 	.word	0x5002b470
   2b034:	5002bd20 	.word	0x5002bd20
   2b038:	5002bc20 	.word	0x5002bc20
   2b03c:	5002bd38 	.word	0x5002bd38
   2b040:	5002bc38 	.word	0x5002bc38
   2b044:	5002ba04 	.word	0x5002ba04
   2b048:	5002b900 	.word	0x5002b900
   2b04c:	5002b4bc 	.word	0x5002b4bc
   2b050:	5002b4c0 	.word	0x5002b4c0
   2b054:	5002b47c 	.word	0x5002b47c

0002b058 <ProcessAesDrv>:
   2b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b05c:	b087      	sub	sp, #28
   2b05e:	2900      	cmp	r1, #0
   2b060:	f000 80a5 	beq.w	2b1ae <ProcessAesDrv+0x156>
   2b064:	4616      	mov	r6, r2
   2b066:	2a00      	cmp	r2, #0
   2b068:	f000 80a1 	beq.w	2b1ae <ProcessAesDrv+0x156>
   2b06c:	4604      	mov	r4, r0
   2b06e:	2800      	cmp	r0, #0
   2b070:	f000 813f 	beq.w	2b2f2 <ProcessAesDrv+0x29a>
   2b074:	461f      	mov	r7, r3
   2b076:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2b078:	460d      	mov	r5, r1
   2b07a:	2b00      	cmp	r3, #0
   2b07c:	d150      	bne.n	2b120 <ProcessAesDrv+0xc8>
   2b07e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   2b082:	d252      	bcs.n	2b12a <ProcessAesDrv+0xd2>
   2b084:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2b088:	2b04      	cmp	r3, #4
   2b08a:	f000 8109 	beq.w	2b2a0 <ProcessAesDrv+0x248>
   2b08e:	f04f 0800 	mov.w	r8, #0
   2b092:	48aa      	ldr	r0, [pc, #680]	; (2b33c <ProcessAesDrv+0x2e4>)
   2b094:	f04f 31ff 	mov.w	r1, #4294967295
   2b098:	f7fe feec 	bl	29e74 <CC_PalMutexLock>
   2b09c:	2800      	cmp	r0, #0
   2b09e:	f040 80de 	bne.w	2b25e <ProcessAesDrv+0x206>
   2b0a2:	2000      	movs	r0, #0
   2b0a4:	f7fe ff16 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2b0a8:	2800      	cmp	r0, #0
   2b0aa:	f040 80e1 	bne.w	2b270 <ProcessAesDrv+0x218>
   2b0ae:	4ba4      	ldr	r3, [pc, #656]	; (2b340 <ProcessAesDrv+0x2e8>)
   2b0b0:	4aa4      	ldr	r2, [pc, #656]	; (2b344 <ProcessAesDrv+0x2ec>)
   2b0b2:	2101      	movs	r1, #1
   2b0b4:	6019      	str	r1, [r3, #0]
   2b0b6:	6813      	ldr	r3, [r2, #0]
   2b0b8:	2b00      	cmp	r3, #0
   2b0ba:	d1fc      	bne.n	2b0b6 <ProcessAesDrv+0x5e>
   2b0bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b0be:	2b03      	cmp	r3, #3
   2b0c0:	dc39      	bgt.n	2b136 <ProcessAesDrv+0xde>
   2b0c2:	2b00      	cmp	r3, #0
   2b0c4:	da3a      	bge.n	2b13c <ProcessAesDrv+0xe4>
   2b0c6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 2b390 <ProcessAesDrv+0x338>
   2b0ca:	4a9e      	ldr	r2, [pc, #632]	; (2b344 <ProcessAesDrv+0x2ec>)
   2b0cc:	6813      	ldr	r3, [r2, #0]
   2b0ce:	2b00      	cmp	r3, #0
   2b0d0:	d1fc      	bne.n	2b0cc <ProcessAesDrv+0x74>
   2b0d2:	f1b8 0f00 	cmp.w	r8, #0
   2b0d6:	f040 80da 	bne.w	2b28e <ProcessAesDrv+0x236>
   2b0da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b0dc:	f023 0304 	bic.w	r3, r3, #4
   2b0e0:	2b03      	cmp	r3, #3
   2b0e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b0e4:	d058      	beq.n	2b198 <ProcessAesDrv+0x140>
   2b0e6:	2b01      	cmp	r3, #1
   2b0e8:	4b97      	ldr	r3, [pc, #604]	; (2b348 <ProcessAesDrv+0x2f0>)
   2b0ea:	6818      	ldr	r0, [r3, #0]
   2b0ec:	bf0c      	ite	eq
   2b0ee:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2b0f2:	f040 0020 	orrne.w	r0, r0, #32
   2b0f6:	f7fe fe23 	bl	29d40 <CC_HalMaskInterrupt>
   2b0fa:	4b91      	ldr	r3, [pc, #580]	; (2b340 <ProcessAesDrv+0x2e8>)
   2b0fc:	2200      	movs	r2, #0
   2b0fe:	601a      	str	r2, [r3, #0]
   2b100:	2001      	movs	r0, #1
   2b102:	f7fe fee7 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2b106:	2800      	cmp	r0, #0
   2b108:	f040 80bd 	bne.w	2b286 <ProcessAesDrv+0x22e>
   2b10c:	488b      	ldr	r0, [pc, #556]	; (2b33c <ProcessAesDrv+0x2e4>)
   2b10e:	f7fe feb9 	bl	29e84 <CC_PalMutexUnlock>
   2b112:	2800      	cmp	r0, #0
   2b114:	f040 80b0 	bne.w	2b278 <ProcessAesDrv+0x220>
   2b118:	4648      	mov	r0, r9
   2b11a:	b007      	add	sp, #28
   2b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b120:	2b01      	cmp	r3, #1
   2b122:	d1af      	bne.n	2b084 <ProcessAesDrv+0x2c>
   2b124:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   2b128:	d3ac      	bcc.n	2b084 <ProcessAesDrv+0x2c>
   2b12a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 2b394 <ProcessAesDrv+0x33c>
   2b12e:	4648      	mov	r0, r9
   2b130:	b007      	add	sp, #28
   2b132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b136:	3b06      	subs	r3, #6
   2b138:	2b01      	cmp	r3, #1
   2b13a:	d8c4      	bhi.n	2b0c6 <ProcessAesDrv+0x6e>
   2b13c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b13e:	2b01      	cmp	r3, #1
   2b140:	f200 80d4 	bhi.w	2b2ec <ProcessAesDrv+0x294>
   2b144:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b146:	2b01      	cmp	r3, #1
   2b148:	d837      	bhi.n	2b1ba <ProcessAesDrv+0x162>
   2b14a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2b14c:	2b01      	cmp	r3, #1
   2b14e:	f200 8131 	bhi.w	2b3b4 <ProcessAesDrv+0x35c>
   2b152:	4620      	mov	r0, r4
   2b154:	f7ff ff04 	bl	2af60 <InitAes.part.0>
   2b158:	4681      	mov	r9, r0
   2b15a:	2800      	cmp	r0, #0
   2b15c:	d1b5      	bne.n	2b0ca <ProcessAesDrv+0x72>
   2b15e:	4620      	mov	r0, r4
   2b160:	f7ff feb4 	bl	2aecc <LoadAesKey>
   2b164:	4681      	mov	r9, r0
   2b166:	2800      	cmp	r0, #0
   2b168:	d1af      	bne.n	2b0ca <ProcessAesDrv+0x72>
   2b16a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b16c:	2b07      	cmp	r3, #7
   2b16e:	d8aa      	bhi.n	2b0c6 <ProcessAesDrv+0x6e>
   2b170:	a201      	add	r2, pc, #4	; (adr r2, 2b178 <ProcessAesDrv+0x120>)
   2b172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b176:	bf00      	nop
   2b178:	0002b1d5 	.word	0x0002b1d5
   2b17c:	0002b1c1 	.word	0x0002b1c1
   2b180:	0002b331 	.word	0x0002b331
   2b184:	0002b1c1 	.word	0x0002b1c1
   2b188:	0002b0c7 	.word	0x0002b0c7
   2b18c:	0002b0c7 	.word	0x0002b0c7
   2b190:	0002b331 	.word	0x0002b331
   2b194:	0002b1c1 	.word	0x0002b1c1
   2b198:	2b01      	cmp	r3, #1
   2b19a:	4b6b      	ldr	r3, [pc, #428]	; (2b348 <ProcessAesDrv+0x2f0>)
   2b19c:	6818      	ldr	r0, [r3, #0]
   2b19e:	bf0c      	ite	eq
   2b1a0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   2b1a4:	f040 0010 	orrne.w	r0, r0, #16
   2b1a8:	f7fe fdca 	bl	29d40 <CC_HalMaskInterrupt>
   2b1ac:	e7a5      	b.n	2b0fa <ProcessAesDrv+0xa2>
   2b1ae:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 2b398 <ProcessAesDrv+0x340>
   2b1b2:	4648      	mov	r0, r9
   2b1b4:	b007      	add	sp, #28
   2b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1ba:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 2b39c <ProcessAesDrv+0x344>
   2b1be:	e784      	b.n	2b0ca <ProcessAesDrv+0x72>
   2b1c0:	4b62      	ldr	r3, [pc, #392]	; (2b34c <ProcessAesDrv+0x2f4>)
   2b1c2:	6822      	ldr	r2, [r4, #0]
   2b1c4:	601a      	str	r2, [r3, #0]
   2b1c6:	6862      	ldr	r2, [r4, #4]
   2b1c8:	605a      	str	r2, [r3, #4]
   2b1ca:	68a2      	ldr	r2, [r4, #8]
   2b1cc:	609a      	str	r2, [r3, #8]
   2b1ce:	68e2      	ldr	r2, [r4, #12]
   2b1d0:	60da      	str	r2, [r3, #12]
   2b1d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b1d4:	682a      	ldr	r2, [r5, #0]
   2b1d6:	f023 0304 	bic.w	r3, r3, #4
   2b1da:	2b03      	cmp	r3, #3
   2b1dc:	d009      	beq.n	2b1f2 <ProcessAesDrv+0x19a>
   2b1de:	6e21      	ldr	r1, [r4, #96]	; 0x60
   2b1e0:	6833      	ldr	r3, [r6, #0]
   2b1e2:	2901      	cmp	r1, #1
   2b1e4:	bf07      	ittee	eq
   2b1e6:	485a      	ldreq	r0, [pc, #360]	; (2b350 <ProcessAesDrv+0x2f8>)
   2b1e8:	495a      	ldreq	r1, [pc, #360]	; (2b354 <ProcessAesDrv+0x2fc>)
   2b1ea:	485b      	ldrne	r0, [pc, #364]	; (2b358 <ProcessAesDrv+0x300>)
   2b1ec:	495b      	ldrne	r1, [pc, #364]	; (2b35c <ProcessAesDrv+0x304>)
   2b1ee:	6003      	str	r3, [r0, #0]
   2b1f0:	600f      	str	r7, [r1, #0]
   2b1f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b1f4:	2b01      	cmp	r3, #1
   2b1f6:	bf0b      	itete	eq
   2b1f8:	4b59      	ldreq	r3, [pc, #356]	; (2b360 <ProcessAesDrv+0x308>)
   2b1fa:	4b5a      	ldrne	r3, [pc, #360]	; (2b364 <ProcessAesDrv+0x30c>)
   2b1fc:	495a      	ldreq	r1, [pc, #360]	; (2b368 <ProcessAesDrv+0x310>)
   2b1fe:	495b      	ldrne	r1, [pc, #364]	; (2b36c <ProcessAesDrv+0x314>)
   2b200:	600a      	str	r2, [r1, #0]
   2b202:	601f      	str	r7, [r3, #0]
   2b204:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b206:	f023 0304 	bic.w	r3, r3, #4
   2b20a:	2b03      	cmp	r3, #3
   2b20c:	d074      	beq.n	2b2f8 <ProcessAesDrv+0x2a0>
   2b20e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2b210:	2b01      	cmp	r3, #1
   2b212:	bf0c      	ite	eq
   2b214:	2080      	moveq	r0, #128	; 0x80
   2b216:	2020      	movne	r0, #32
   2b218:	f7fe fd98 	bl	29d4c <CC_HalWaitInterrupt>
   2b21c:	4681      	mov	r9, r0
   2b21e:	2800      	cmp	r0, #0
   2b220:	f47f af53 	bne.w	2b0ca <ProcessAesDrv+0x72>
   2b224:	4b47      	ldr	r3, [pc, #284]	; (2b344 <ProcessAesDrv+0x2ec>)
   2b226:	681a      	ldr	r2, [r3, #0]
   2b228:	2a00      	cmp	r2, #0
   2b22a:	d1fc      	bne.n	2b226 <ProcessAesDrv+0x1ce>
   2b22c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b22e:	3b01      	subs	r3, #1
   2b230:	4691      	mov	r9, r2
   2b232:	2b06      	cmp	r3, #6
   2b234:	d810      	bhi.n	2b258 <ProcessAesDrv+0x200>
   2b236:	e8df f003 	tbb	[pc, r3]
   2b23a:	7d04      	.short	0x7d04
   2b23c:	7d0f0f04 	.word	0x7d0f0f04
   2b240:	04          	.byte	0x04
   2b241:	00          	.byte	0x00
   2b242:	4a42      	ldr	r2, [pc, #264]	; (2b34c <ProcessAesDrv+0x2f4>)
   2b244:	4b4a      	ldr	r3, [pc, #296]	; (2b370 <ProcessAesDrv+0x318>)
   2b246:	6812      	ldr	r2, [r2, #0]
   2b248:	6022      	str	r2, [r4, #0]
   2b24a:	681a      	ldr	r2, [r3, #0]
   2b24c:	6062      	str	r2, [r4, #4]
   2b24e:	685a      	ldr	r2, [r3, #4]
   2b250:	60a2      	str	r2, [r4, #8]
   2b252:	3308      	adds	r3, #8
   2b254:	681b      	ldr	r3, [r3, #0]
   2b256:	60e3      	str	r3, [r4, #12]
   2b258:	2301      	movs	r3, #1
   2b25a:	65a3      	str	r3, [r4, #88]	; 0x58
   2b25c:	e735      	b.n	2b0ca <ProcessAesDrv+0x72>
   2b25e:	4845      	ldr	r0, [pc, #276]	; (2b374 <ProcessAesDrv+0x31c>)
   2b260:	f7fd febc 	bl	28fdc <CC_PalAbort>
   2b264:	2000      	movs	r0, #0
   2b266:	f7fe fe35 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2b26a:	2800      	cmp	r0, #0
   2b26c:	f43f af1f 	beq.w	2b0ae <ProcessAesDrv+0x56>
   2b270:	4841      	ldr	r0, [pc, #260]	; (2b378 <ProcessAesDrv+0x320>)
   2b272:	f7fd feb3 	bl	28fdc <CC_PalAbort>
   2b276:	e71a      	b.n	2b0ae <ProcessAesDrv+0x56>
   2b278:	4840      	ldr	r0, [pc, #256]	; (2b37c <ProcessAesDrv+0x324>)
   2b27a:	f7fd feaf 	bl	28fdc <CC_PalAbort>
   2b27e:	4648      	mov	r0, r9
   2b280:	b007      	add	sp, #28
   2b282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b286:	483e      	ldr	r0, [pc, #248]	; (2b380 <ProcessAesDrv+0x328>)
   2b288:	f7fd fea8 	bl	28fdc <CC_PalAbort>
   2b28c:	e73e      	b.n	2b10c <ProcessAesDrv+0xb4>
   2b28e:	2304      	movs	r3, #4
   2b290:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2b294:	2120      	movs	r1, #32
   2b296:	f104 0010 	add.w	r0, r4, #16
   2b29a:	f7ff fba5 	bl	2a9e8 <CC_PalMemSetZeroPlat>
   2b29e:	e71c      	b.n	2b0da <ProcessAesDrv+0x82>
   2b2a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2b2a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2b2a4:	f000 f9c8 	bl	2b638 <kmu_validate_slot_and_size>
   2b2a8:	b9e8      	cbnz	r0, 2b2e6 <ProcessAesDrv+0x28e>
   2b2aa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2b3a0 <ProcessAesDrv+0x348>
   2b2ae:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 2b3a4 <ProcessAesDrv+0x34c>
   2b2b2:	f8d8 3000 	ldr.w	r3, [r8]
   2b2b6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2b3a8 <ProcessAesDrv+0x350>
   2b2ba:	681b      	ldr	r3, [r3, #0]
   2b2bc:	f8cb 3000 	str.w	r3, [fp]
   2b2c0:	f8d8 3000 	ldr.w	r3, [r8]
   2b2c4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2b3ac <ProcessAesDrv+0x354>
   2b2c8:	685b      	ldr	r3, [r3, #4]
   2b2ca:	f8ca 3000 	str.w	r3, [sl]
   2b2ce:	f8d8 3000 	ldr.w	r3, [r8]
   2b2d2:	4a2c      	ldr	r2, [pc, #176]	; (2b384 <ProcessAesDrv+0x32c>)
   2b2d4:	689b      	ldr	r3, [r3, #8]
   2b2d6:	f8c9 3000 	str.w	r3, [r9]
   2b2da:	f8d8 3000 	ldr.w	r3, [r8]
   2b2de:	68db      	ldr	r3, [r3, #12]
   2b2e0:	6013      	str	r3, [r2, #0]
   2b2e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2b2e4:	b171      	cbz	r1, 2b304 <ProcessAesDrv+0x2ac>
   2b2e6:	f04f 0801 	mov.w	r8, #1
   2b2ea:	e6d2      	b.n	2b092 <ProcessAesDrv+0x3a>
   2b2ec:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2b3b0 <ProcessAesDrv+0x358>
   2b2f0:	e6eb      	b.n	2b0ca <ProcessAesDrv+0x72>
   2b2f2:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   2b2f6:	e70f      	b.n	2b118 <ProcessAesDrv+0xc0>
   2b2f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b2fa:	2b01      	cmp	r3, #1
   2b2fc:	bf0c      	ite	eq
   2b2fe:	2040      	moveq	r0, #64	; 0x40
   2b300:	2010      	movne	r0, #16
   2b302:	e789      	b.n	2b218 <ProcessAesDrv+0x1c0>
   2b304:	f104 0310 	add.w	r3, r4, #16
   2b308:	4618      	mov	r0, r3
   2b30a:	9305      	str	r3, [sp, #20]
   2b30c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   2b310:	e9cd 3200 	strd	r3, r2, [sp]
   2b314:	9002      	str	r0, [sp, #8]
   2b316:	2010      	movs	r0, #16
   2b318:	9003      	str	r0, [sp, #12]
   2b31a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   2b31e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2b320:	f000 f9ae 	bl	2b680 <kmu_derive_cmac>
   2b324:	2800      	cmp	r0, #0
   2b326:	d148      	bne.n	2b3ba <ProcessAesDrv+0x362>
   2b328:	2300      	movs	r3, #0
   2b32a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2b32e:	e7da      	b.n	2b2e6 <ProcessAesDrv+0x28e>
   2b330:	4b15      	ldr	r3, [pc, #84]	; (2b388 <ProcessAesDrv+0x330>)
   2b332:	e746      	b.n	2b1c2 <ProcessAesDrv+0x16a>
   2b334:	4a14      	ldr	r2, [pc, #80]	; (2b388 <ProcessAesDrv+0x330>)
   2b336:	4b15      	ldr	r3, [pc, #84]	; (2b38c <ProcessAesDrv+0x334>)
   2b338:	e785      	b.n	2b246 <ProcessAesDrv+0x1ee>
   2b33a:	bf00      	nop
   2b33c:	20000938 	.word	0x20000938
   2b340:	5002b810 	.word	0x5002b810
   2b344:	5002b910 	.word	0x5002b910
   2b348:	5002ba04 	.word	0x5002ba04
   2b34c:	5002b440 	.word	0x5002b440
   2b350:	5002bd28 	.word	0x5002bd28
   2b354:	5002bd2c 	.word	0x5002bd2c
   2b358:	5002bd30 	.word	0x5002bd30
   2b35c:	5002bd34 	.word	0x5002bd34
   2b360:	5002bc2c 	.word	0x5002bc2c
   2b364:	5002bc34 	.word	0x5002bc34
   2b368:	5002bc28 	.word	0x5002bc28
   2b36c:	5002bc30 	.word	0x5002bc30
   2b370:	5002b444 	.word	0x5002b444
   2b374:	00032de4 	.word	0x00032de4
   2b378:	00032dfc 	.word	0x00032dfc
   2b37c:	00032e3c 	.word	0x00032e3c
   2b380:	00032e1c 	.word	0x00032e1c
   2b384:	5002b40c 	.word	0x5002b40c
   2b388:	5002b460 	.word	0x5002b460
   2b38c:	5002b464 	.word	0x5002b464
   2b390:	00f10001 	.word	0x00f10001
   2b394:	00f10005 	.word	0x00f10005
   2b398:	00f1000b 	.word	0x00f1000b
   2b39c:	00f10003 	.word	0x00f10003
   2b3a0:	20000928 	.word	0x20000928
   2b3a4:	5002b400 	.word	0x5002b400
   2b3a8:	5002b404 	.word	0x5002b404
   2b3ac:	5002b408 	.word	0x5002b408
   2b3b0:	00f10002 	.word	0x00f10002
   2b3b4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 2b3f0 <ProcessAesDrv+0x398>
   2b3b8:	e687      	b.n	2b0ca <ProcessAesDrv+0x72>
   2b3ba:	f8d8 3000 	ldr.w	r3, [r8]
   2b3be:	4a0b      	ldr	r2, [pc, #44]	; (2b3ec <ProcessAesDrv+0x394>)
   2b3c0:	681b      	ldr	r3, [r3, #0]
   2b3c2:	f8cb 3000 	str.w	r3, [fp]
   2b3c6:	f8d8 3000 	ldr.w	r3, [r8]
   2b3ca:	685b      	ldr	r3, [r3, #4]
   2b3cc:	f8ca 3000 	str.w	r3, [sl]
   2b3d0:	f8d8 3000 	ldr.w	r3, [r8]
   2b3d4:	689b      	ldr	r3, [r3, #8]
   2b3d6:	f8c9 3000 	str.w	r3, [r9]
   2b3da:	f8d8 3000 	ldr.w	r3, [r8]
   2b3de:	68db      	ldr	r3, [r3, #12]
   2b3e0:	6013      	str	r3, [r2, #0]
   2b3e2:	9805      	ldr	r0, [sp, #20]
   2b3e4:	2110      	movs	r1, #16
   2b3e6:	f7ff faff 	bl	2a9e8 <CC_PalMemSetZeroPlat>
   2b3ea:	e79d      	b.n	2b328 <ProcessAesDrv+0x2d0>
   2b3ec:	5002b40c 	.word	0x5002b40c
   2b3f0:	00f10004 	.word	0x00f10004

0002b3f4 <FinishAesDrv>:
   2b3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b3f8:	b301      	cbz	r1, 2b43c <FinishAesDrv+0x48>
   2b3fa:	b1fa      	cbz	r2, 2b43c <FinishAesDrv+0x48>
   2b3fc:	4604      	mov	r4, r0
   2b3fe:	2800      	cmp	r0, #0
   2b400:	d07a      	beq.n	2b4f8 <FinishAesDrv+0x104>
   2b402:	461d      	mov	r5, r3
   2b404:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2b406:	2b07      	cmp	r3, #7
   2b408:	460e      	mov	r6, r1
   2b40a:	d01b      	beq.n	2b444 <FinishAesDrv+0x50>
   2b40c:	b95d      	cbnz	r5, 2b426 <FinishAesDrv+0x32>
   2b40e:	2b03      	cmp	r3, #3
   2b410:	d110      	bne.n	2b434 <FinishAesDrv+0x40>
   2b412:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2b414:	b973      	cbnz	r3, 2b434 <FinishAesDrv+0x40>
   2b416:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2b41a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2b41e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2b422:	600b      	str	r3, [r1, #0]
   2b424:	2510      	movs	r5, #16
   2b426:	462b      	mov	r3, r5
   2b428:	4631      	mov	r1, r6
   2b42a:	4620      	mov	r0, r4
   2b42c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b430:	f7ff be12 	b.w	2b058 <ProcessAesDrv>
   2b434:	462f      	mov	r7, r5
   2b436:	4638      	mov	r0, r7
   2b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b43c:	4f66      	ldr	r7, [pc, #408]	; (2b5d8 <FinishAesDrv+0x1e4>)
   2b43e:	4638      	mov	r0, r7
   2b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b444:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2b446:	2b00      	cmp	r3, #0
   2b448:	d159      	bne.n	2b4fe <FinishAesDrv+0x10a>
   2b44a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2b44e:	d25b      	bcs.n	2b508 <FinishAesDrv+0x114>
   2b450:	b915      	cbnz	r5, 2b458 <FinishAesDrv+0x64>
   2b452:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2b454:	2b00      	cmp	r3, #0
   2b456:	d157      	bne.n	2b508 <FinishAesDrv+0x114>
   2b458:	4860      	ldr	r0, [pc, #384]	; (2b5dc <FinishAesDrv+0x1e8>)
   2b45a:	f04f 31ff 	mov.w	r1, #4294967295
   2b45e:	f7fe fd09 	bl	29e74 <CC_PalMutexLock>
   2b462:	2800      	cmp	r0, #0
   2b464:	f040 8097 	bne.w	2b596 <FinishAesDrv+0x1a2>
   2b468:	2000      	movs	r0, #0
   2b46a:	f7fe fd33 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2b46e:	2800      	cmp	r0, #0
   2b470:	f040 808d 	bne.w	2b58e <FinishAesDrv+0x19a>
   2b474:	4b5a      	ldr	r3, [pc, #360]	; (2b5e0 <FinishAesDrv+0x1ec>)
   2b476:	4a5b      	ldr	r2, [pc, #364]	; (2b5e4 <FinishAesDrv+0x1f0>)
   2b478:	2101      	movs	r1, #1
   2b47a:	6019      	str	r1, [r3, #0]
   2b47c:	6813      	ldr	r3, [r2, #0]
   2b47e:	2b00      	cmp	r3, #0
   2b480:	d1fc      	bne.n	2b47c <FinishAesDrv+0x88>
   2b482:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b484:	2b03      	cmp	r3, #3
   2b486:	dd20      	ble.n	2b4ca <FinishAesDrv+0xd6>
   2b488:	3b06      	subs	r3, #6
   2b48a:	2b01      	cmp	r3, #1
   2b48c:	d81f      	bhi.n	2b4ce <FinishAesDrv+0xda>
   2b48e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b490:	2b01      	cmp	r3, #1
   2b492:	d83b      	bhi.n	2b50c <FinishAesDrv+0x118>
   2b494:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b496:	2b01      	cmp	r3, #1
   2b498:	f200 8085 	bhi.w	2b5a6 <FinishAesDrv+0x1b2>
   2b49c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2b49e:	2b01      	cmp	r3, #1
   2b4a0:	f200 8083 	bhi.w	2b5aa <FinishAesDrv+0x1b6>
   2b4a4:	4620      	mov	r0, r4
   2b4a6:	f7ff fd5b 	bl	2af60 <InitAes.part.0>
   2b4aa:	4607      	mov	r7, r0
   2b4ac:	b980      	cbnz	r0, 2b4d0 <FinishAesDrv+0xdc>
   2b4ae:	4620      	mov	r0, r4
   2b4b0:	f7ff fd0c 	bl	2aecc <LoadAesKey>
   2b4b4:	4607      	mov	r7, r0
   2b4b6:	b958      	cbnz	r0, 2b4d0 <FinishAesDrv+0xdc>
   2b4b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b4ba:	2b07      	cmp	r3, #7
   2b4bc:	d807      	bhi.n	2b4ce <FinishAesDrv+0xda>
   2b4be:	e8df f003 	tbb	[pc, r3]
   2b4c2:	2730      	.short	0x2730
   2b4c4:	06062755 	.word	0x06062755
   2b4c8:	2755      	.short	0x2755
   2b4ca:	2b00      	cmp	r3, #0
   2b4cc:	dadf      	bge.n	2b48e <FinishAesDrv+0x9a>
   2b4ce:	4f46      	ldr	r7, [pc, #280]	; (2b5e8 <FinishAesDrv+0x1f4>)
   2b4d0:	4a44      	ldr	r2, [pc, #272]	; (2b5e4 <FinishAesDrv+0x1f0>)
   2b4d2:	6813      	ldr	r3, [r2, #0]
   2b4d4:	2b00      	cmp	r3, #0
   2b4d6:	d1fc      	bne.n	2b4d2 <FinishAesDrv+0xde>
   2b4d8:	4a41      	ldr	r2, [pc, #260]	; (2b5e0 <FinishAesDrv+0x1ec>)
   2b4da:	2001      	movs	r0, #1
   2b4dc:	6013      	str	r3, [r2, #0]
   2b4de:	f7fe fcf9 	bl	29ed4 <CC_PalPowerSaveModeSelect>
   2b4e2:	2800      	cmp	r0, #0
   2b4e4:	d15b      	bne.n	2b59e <FinishAesDrv+0x1aa>
   2b4e6:	483d      	ldr	r0, [pc, #244]	; (2b5dc <FinishAesDrv+0x1e8>)
   2b4e8:	f7fe fccc 	bl	29e84 <CC_PalMutexUnlock>
   2b4ec:	2800      	cmp	r0, #0
   2b4ee:	d0a2      	beq.n	2b436 <FinishAesDrv+0x42>
   2b4f0:	483e      	ldr	r0, [pc, #248]	; (2b5ec <FinishAesDrv+0x1f8>)
   2b4f2:	f7fd fd73 	bl	28fdc <CC_PalAbort>
   2b4f6:	e79e      	b.n	2b436 <FinishAesDrv+0x42>
   2b4f8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2b4fc:	e79b      	b.n	2b436 <FinishAesDrv+0x42>
   2b4fe:	2b01      	cmp	r3, #1
   2b500:	d1a6      	bne.n	2b450 <FinishAesDrv+0x5c>
   2b502:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2b506:	d3a3      	bcc.n	2b450 <FinishAesDrv+0x5c>
   2b508:	4f39      	ldr	r7, [pc, #228]	; (2b5f0 <FinishAesDrv+0x1fc>)
   2b50a:	e794      	b.n	2b436 <FinishAesDrv+0x42>
   2b50c:	4f39      	ldr	r7, [pc, #228]	; (2b5f4 <FinishAesDrv+0x200>)
   2b50e:	e7df      	b.n	2b4d0 <FinishAesDrv+0xdc>
   2b510:	4b39      	ldr	r3, [pc, #228]	; (2b5f8 <FinishAesDrv+0x204>)
   2b512:	6822      	ldr	r2, [r4, #0]
   2b514:	601a      	str	r2, [r3, #0]
   2b516:	6862      	ldr	r2, [r4, #4]
   2b518:	605a      	str	r2, [r3, #4]
   2b51a:	68a2      	ldr	r2, [r4, #8]
   2b51c:	609a      	str	r2, [r3, #8]
   2b51e:	68e2      	ldr	r2, [r4, #12]
   2b520:	60da      	str	r2, [r3, #12]
   2b522:	4936      	ldr	r1, [pc, #216]	; (2b5fc <FinishAesDrv+0x208>)
   2b524:	4a36      	ldr	r2, [pc, #216]	; (2b600 <FinishAesDrv+0x20c>)
   2b526:	2301      	movs	r3, #1
   2b528:	600b      	str	r3, [r1, #0]
   2b52a:	6015      	str	r5, [r2, #0]
   2b52c:	2d00      	cmp	r5, #0
   2b52e:	d13e      	bne.n	2b5ae <FinishAesDrv+0x1ba>
   2b530:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2b532:	b90a      	cbnz	r2, 2b538 <FinishAesDrv+0x144>
   2b534:	4a33      	ldr	r2, [pc, #204]	; (2b604 <FinishAesDrv+0x210>)
   2b536:	6013      	str	r3, [r2, #0]
   2b538:	4b2a      	ldr	r3, [pc, #168]	; (2b5e4 <FinishAesDrv+0x1f0>)
   2b53a:	681f      	ldr	r7, [r3, #0]
   2b53c:	2f00      	cmp	r7, #0
   2b53e:	d1fc      	bne.n	2b53a <FinishAesDrv+0x146>
   2b540:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b542:	3b01      	subs	r3, #1
   2b544:	2b06      	cmp	r3, #6
   2b546:	d8c3      	bhi.n	2b4d0 <FinishAesDrv+0xdc>
   2b548:	a201      	add	r2, pc, #4	; (adr r2, 2b550 <FinishAesDrv+0x15c>)
   2b54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b54e:	bf00      	nop
   2b550:	0002b571 	.word	0x0002b571
   2b554:	0002b589 	.word	0x0002b589
   2b558:	0002b571 	.word	0x0002b571
   2b55c:	0002b4d1 	.word	0x0002b4d1
   2b560:	0002b4d1 	.word	0x0002b4d1
   2b564:	0002b589 	.word	0x0002b589
   2b568:	0002b571 	.word	0x0002b571
   2b56c:	4b26      	ldr	r3, [pc, #152]	; (2b608 <FinishAesDrv+0x214>)
   2b56e:	e7d0      	b.n	2b512 <FinishAesDrv+0x11e>
   2b570:	4a21      	ldr	r2, [pc, #132]	; (2b5f8 <FinishAesDrv+0x204>)
   2b572:	4b26      	ldr	r3, [pc, #152]	; (2b60c <FinishAesDrv+0x218>)
   2b574:	6812      	ldr	r2, [r2, #0]
   2b576:	6022      	str	r2, [r4, #0]
   2b578:	681a      	ldr	r2, [r3, #0]
   2b57a:	6062      	str	r2, [r4, #4]
   2b57c:	685a      	ldr	r2, [r3, #4]
   2b57e:	60a2      	str	r2, [r4, #8]
   2b580:	3308      	adds	r3, #8
   2b582:	681b      	ldr	r3, [r3, #0]
   2b584:	60e3      	str	r3, [r4, #12]
   2b586:	e7a3      	b.n	2b4d0 <FinishAesDrv+0xdc>
   2b588:	4a1f      	ldr	r2, [pc, #124]	; (2b608 <FinishAesDrv+0x214>)
   2b58a:	4b21      	ldr	r3, [pc, #132]	; (2b610 <FinishAesDrv+0x21c>)
   2b58c:	e7f2      	b.n	2b574 <FinishAesDrv+0x180>
   2b58e:	4821      	ldr	r0, [pc, #132]	; (2b614 <FinishAesDrv+0x220>)
   2b590:	f7fd fd24 	bl	28fdc <CC_PalAbort>
   2b594:	e76e      	b.n	2b474 <FinishAesDrv+0x80>
   2b596:	4820      	ldr	r0, [pc, #128]	; (2b618 <FinishAesDrv+0x224>)
   2b598:	f7fd fd20 	bl	28fdc <CC_PalAbort>
   2b59c:	e764      	b.n	2b468 <FinishAesDrv+0x74>
   2b59e:	481f      	ldr	r0, [pc, #124]	; (2b61c <FinishAesDrv+0x228>)
   2b5a0:	f7fd fd1c 	bl	28fdc <CC_PalAbort>
   2b5a4:	e79f      	b.n	2b4e6 <FinishAesDrv+0xf2>
   2b5a6:	4f1e      	ldr	r7, [pc, #120]	; (2b620 <FinishAesDrv+0x22c>)
   2b5a8:	e792      	b.n	2b4d0 <FinishAesDrv+0xdc>
   2b5aa:	4f1e      	ldr	r7, [pc, #120]	; (2b624 <FinishAesDrv+0x230>)
   2b5ac:	e790      	b.n	2b4d0 <FinishAesDrv+0xdc>
   2b5ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2b5b0:	6833      	ldr	r3, [r6, #0]
   2b5b2:	2a01      	cmp	r2, #1
   2b5b4:	d00a      	beq.n	2b5cc <FinishAesDrv+0x1d8>
   2b5b6:	491c      	ldr	r1, [pc, #112]	; (2b628 <FinishAesDrv+0x234>)
   2b5b8:	4a1c      	ldr	r2, [pc, #112]	; (2b62c <FinishAesDrv+0x238>)
   2b5ba:	600b      	str	r3, [r1, #0]
   2b5bc:	2010      	movs	r0, #16
   2b5be:	6015      	str	r5, [r2, #0]
   2b5c0:	f7fe fbc4 	bl	29d4c <CC_HalWaitInterrupt>
   2b5c4:	4607      	mov	r7, r0
   2b5c6:	2800      	cmp	r0, #0
   2b5c8:	d0b6      	beq.n	2b538 <FinishAesDrv+0x144>
   2b5ca:	e781      	b.n	2b4d0 <FinishAesDrv+0xdc>
   2b5cc:	4918      	ldr	r1, [pc, #96]	; (2b630 <FinishAesDrv+0x23c>)
   2b5ce:	4a19      	ldr	r2, [pc, #100]	; (2b634 <FinishAesDrv+0x240>)
   2b5d0:	600b      	str	r3, [r1, #0]
   2b5d2:	2040      	movs	r0, #64	; 0x40
   2b5d4:	6015      	str	r5, [r2, #0]
   2b5d6:	e7f3      	b.n	2b5c0 <FinishAesDrv+0x1cc>
   2b5d8:	00f1000b 	.word	0x00f1000b
   2b5dc:	20000938 	.word	0x20000938
   2b5e0:	5002b810 	.word	0x5002b810
   2b5e4:	5002b910 	.word	0x5002b910
   2b5e8:	00f10001 	.word	0x00f10001
   2b5ec:	00032e3c 	.word	0x00032e3c
   2b5f0:	00f10005 	.word	0x00f10005
   2b5f4:	00f10002 	.word	0x00f10002
   2b5f8:	5002b440 	.word	0x5002b440
   2b5fc:	5002b47c 	.word	0x5002b47c
   2b600:	5002b4bc 	.word	0x5002b4bc
   2b604:	5002b524 	.word	0x5002b524
   2b608:	5002b460 	.word	0x5002b460
   2b60c:	5002b444 	.word	0x5002b444
   2b610:	5002b464 	.word	0x5002b464
   2b614:	00032dfc 	.word	0x00032dfc
   2b618:	00032de4 	.word	0x00032de4
   2b61c:	00032e1c 	.word	0x00032e1c
   2b620:	00f10003 	.word	0x00f10003
   2b624:	00f10004 	.word	0x00f10004
   2b628:	5002bc30 	.word	0x5002bc30
   2b62c:	5002bc34 	.word	0x5002bc34
   2b630:	5002bc28 	.word	0x5002bc28
   2b634:	5002bc2c 	.word	0x5002bc2c

0002b638 <kmu_validate_slot_and_size>:
   2b638:	b921      	cbnz	r1, 2b644 <kmu_validate_slot_and_size+0xc>
   2b63a:	4b03      	ldr	r3, [pc, #12]	; (2b648 <kmu_validate_slot_and_size+0x10>)
   2b63c:	2800      	cmp	r0, #0
   2b63e:	bf18      	it	ne
   2b640:	4618      	movne	r0, r3
   2b642:	4770      	bx	lr
   2b644:	4801      	ldr	r0, [pc, #4]	; (2b64c <kmu_validate_slot_and_size+0x14>)
   2b646:	4770      	bx	lr
   2b648:	00f70001 	.word	0x00f70001
   2b64c:	00f70003 	.word	0x00f70003

0002b650 <kmu_validate_kdr_slot_and_size>:
   2b650:	b921      	cbnz	r1, 2b65c <kmu_validate_kdr_slot_and_size+0xc>
   2b652:	4b03      	ldr	r3, [pc, #12]	; (2b660 <kmu_validate_kdr_slot_and_size+0x10>)
   2b654:	2800      	cmp	r0, #0
   2b656:	bf18      	it	ne
   2b658:	4618      	movne	r0, r3
   2b65a:	4770      	bx	lr
   2b65c:	4801      	ldr	r0, [pc, #4]	; (2b664 <kmu_validate_kdr_slot_and_size+0x14>)
   2b65e:	4770      	bx	lr
   2b660:	00f70001 	.word	0x00f70001
   2b664:	00f70003 	.word	0x00f70003

0002b668 <kmu_use_kdr_key>:
   2b668:	4903      	ldr	r1, [pc, #12]	; (2b678 <kmu_use_kdr_key+0x10>)
   2b66a:	4b04      	ldr	r3, [pc, #16]	; (2b67c <kmu_use_kdr_key+0x14>)
   2b66c:	2000      	movs	r0, #0
   2b66e:	2201      	movs	r2, #1
   2b670:	6008      	str	r0, [r1, #0]
   2b672:	601a      	str	r2, [r3, #0]
   2b674:	4770      	bx	lr
   2b676:	bf00      	nop
   2b678:	5002ba38 	.word	0x5002ba38
   2b67c:	5002b478 	.word	0x5002b478

0002b680 <kmu_derive_cmac>:
   2b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b684:	b0cd      	sub	sp, #308	; 0x134
   2b686:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   2b68a:	460f      	mov	r7, r1
   2b68c:	2100      	movs	r1, #0
   2b68e:	460c      	mov	r4, r1
   2b690:	4681      	mov	r9, r0
   2b692:	4616      	mov	r6, r2
   2b694:	a80e      	add	r0, sp, #56	; 0x38
   2b696:	2274      	movs	r2, #116	; 0x74
   2b698:	469b      	mov	fp, r3
   2b69a:	f001 fb19 	bl	2ccd0 <memset>
   2b69e:	4621      	mov	r1, r4
   2b6a0:	2280      	movs	r2, #128	; 0x80
   2b6a2:	a82c      	add	r0, sp, #176	; 0xb0
   2b6a4:	942b      	str	r4, [sp, #172]	; 0xac
   2b6a6:	f001 fb13 	bl	2ccd0 <memset>
   2b6aa:	2384      	movs	r3, #132	; 0x84
   2b6ac:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2b6b0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2b6b4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2b6b8:	9305      	str	r3, [sp, #20]
   2b6ba:	d860      	bhi.n	2b77e <kmu_derive_cmac+0xfe>
   2b6bc:	ab05      	add	r3, sp, #20
   2b6be:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   2b6c2:	9301      	str	r3, [sp, #4]
   2b6c4:	9502      	str	r5, [sp, #8]
   2b6c6:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   2b6ca:	4659      	mov	r1, fp
   2b6cc:	4630      	mov	r0, r6
   2b6ce:	f8cd a000 	str.w	sl, [sp]
   2b6d2:	f000 f865 	bl	2b7a0 <UtilCmacBuildDataForDerivation>
   2b6d6:	2800      	cmp	r0, #0
   2b6d8:	d14c      	bne.n	2b774 <kmu_derive_cmac+0xf4>
   2b6da:	2303      	movs	r3, #3
   2b6dc:	f88d 3013 	strb.w	r3, [sp, #19]
   2b6e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2b6e4:	901c      	str	r0, [sp, #112]	; 0x70
   2b6e6:	2200      	movs	r2, #0
   2b6e8:	2110      	movs	r1, #16
   2b6ea:	a80e      	add	r0, sp, #56	; 0x38
   2b6ec:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2b6f0:	2607      	movs	r6, #7
   2b6f2:	2301      	movs	r3, #1
   2b6f4:	2401      	movs	r4, #1
   2b6f6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2b6fa:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   2b6fe:	971a      	str	r7, [sp, #104]	; 0x68
   2b700:	961b      	str	r6, [sp, #108]	; 0x6c
   2b702:	9426      	str	r4, [sp, #152]	; 0x98
   2b704:	f10d 0920 	add.w	r9, sp, #32
   2b708:	f7ff f96e 	bl	2a9e8 <CC_PalMemSetZeroPlat>
   2b70c:	2110      	movs	r1, #16
   2b70e:	e9cd 1900 	strd	r1, r9, [sp]
   2b712:	ab0a      	add	r3, sp, #40	; 0x28
   2b714:	9905      	ldr	r1, [sp, #20]
   2b716:	4650      	mov	r0, sl
   2b718:	aa06      	add	r2, sp, #24
   2b71a:	f7ff fa09 	bl	2ab30 <SetDataBuffersInfo>
   2b71e:	4607      	mov	r7, r0
   2b720:	b150      	cbz	r0, 2b738 <kmu_derive_cmac+0xb8>
   2b722:	e01e      	b.n	2b762 <kmu_derive_cmac+0xe2>
   2b724:	f7ff f95c 	bl	2a9e0 <CC_PalMemCopyPlat>
   2b728:	2110      	movs	r1, #16
   2b72a:	a80e      	add	r0, sp, #56	; 0x38
   2b72c:	f7ff f95c 	bl	2a9e8 <CC_PalMemSetZeroPlat>
   2b730:	3401      	adds	r4, #1
   2b732:	1bad      	subs	r5, r5, r6
   2b734:	b2e4      	uxtb	r4, r4
   2b736:	d027      	beq.n	2b788 <kmu_derive_cmac+0x108>
   2b738:	9b05      	ldr	r3, [sp, #20]
   2b73a:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2b73e:	2d10      	cmp	r5, #16
   2b740:	464a      	mov	r2, r9
   2b742:	a906      	add	r1, sp, #24
   2b744:	a80e      	add	r0, sp, #56	; 0x38
   2b746:	462e      	mov	r6, r5
   2b748:	bf28      	it	cs
   2b74a:	2610      	movcs	r6, #16
   2b74c:	f7ff fe52 	bl	2b3f4 <FinishAesDrv>
   2b750:	4603      	mov	r3, r0
   2b752:	4632      	mov	r2, r6
   2b754:	eb08 0007 	add.w	r0, r8, r7
   2b758:	a90e      	add	r1, sp, #56	; 0x38
   2b75a:	4437      	add	r7, r6
   2b75c:	2b00      	cmp	r3, #0
   2b75e:	d0e1      	beq.n	2b724 <kmu_derive_cmac+0xa4>
   2b760:	461f      	mov	r7, r3
   2b762:	a80e      	add	r0, sp, #56	; 0x38
   2b764:	2274      	movs	r2, #116	; 0x74
   2b766:	2100      	movs	r1, #0
   2b768:	f7ff f93c 	bl	2a9e4 <CC_PalMemSetPlat>
   2b76c:	4638      	mov	r0, r7
   2b76e:	b04d      	add	sp, #308	; 0x134
   2b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b774:	4f08      	ldr	r7, [pc, #32]	; (2b798 <kmu_derive_cmac+0x118>)
   2b776:	4638      	mov	r0, r7
   2b778:	b04d      	add	sp, #308	; 0x134
   2b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b77e:	4f07      	ldr	r7, [pc, #28]	; (2b79c <kmu_derive_cmac+0x11c>)
   2b780:	4638      	mov	r0, r7
   2b782:	b04d      	add	sp, #308	; 0x134
   2b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b788:	a80e      	add	r0, sp, #56	; 0x38
   2b78a:	2274      	movs	r2, #116	; 0x74
   2b78c:	2100      	movs	r1, #0
   2b78e:	462f      	mov	r7, r5
   2b790:	f7ff f928 	bl	2a9e4 <CC_PalMemSetPlat>
   2b794:	e7ea      	b.n	2b76c <kmu_derive_cmac+0xec>
   2b796:	bf00      	nop
   2b798:	00f1000e 	.word	0x00f1000e
   2b79c:	00f1000f 	.word	0x00f1000f

0002b7a0 <UtilCmacBuildDataForDerivation>:
   2b7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b7a4:	b082      	sub	sp, #8
   2b7a6:	2600      	movs	r6, #0
   2b7a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2b7aa:	9601      	str	r6, [sp, #4]
   2b7ac:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2b7b0:	d83c      	bhi.n	2b82c <UtilCmacBuildDataForDerivation+0x8c>
   2b7b2:	00ee      	lsls	r6, r5, #3
   2b7b4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   2b7b8:	f101 35ff 	add.w	r5, r1, #4294967295
   2b7bc:	461f      	mov	r7, r3
   2b7be:	bf34      	ite	cc
   2b7c0:	2303      	movcc	r3, #3
   2b7c2:	2304      	movcs	r3, #4
   2b7c4:	2d3f      	cmp	r5, #63	; 0x3f
   2b7c6:	460c      	mov	r4, r1
   2b7c8:	9300      	str	r3, [sp, #0]
   2b7ca:	d82f      	bhi.n	2b82c <UtilCmacBuildDataForDerivation+0x8c>
   2b7cc:	b370      	cbz	r0, 2b82c <UtilCmacBuildDataForDerivation+0x8c>
   2b7ce:	4690      	mov	r8, r2
   2b7d0:	b117      	cbz	r7, 2b7d8 <UtilCmacBuildDataForDerivation+0x38>
   2b7d2:	b35a      	cbz	r2, 2b82c <UtilCmacBuildDataForDerivation+0x8c>
   2b7d4:	2f40      	cmp	r7, #64	; 0x40
   2b7d6:	d829      	bhi.n	2b82c <UtilCmacBuildDataForDerivation+0x8c>
   2b7d8:	9a08      	ldr	r2, [sp, #32]
   2b7da:	b33a      	cbz	r2, 2b82c <UtilCmacBuildDataForDerivation+0x8c>
   2b7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2b7de:	6811      	ldr	r1, [r2, #0]
   2b7e0:	b321      	cbz	r1, 2b82c <UtilCmacBuildDataForDerivation+0x8c>
   2b7e2:	19e2      	adds	r2, r4, r7
   2b7e4:	4413      	add	r3, r2
   2b7e6:	4299      	cmp	r1, r3
   2b7e8:	d320      	bcc.n	2b82c <UtilCmacBuildDataForDerivation+0x8c>
   2b7ea:	9b08      	ldr	r3, [sp, #32]
   2b7ec:	4622      	mov	r2, r4
   2b7ee:	4601      	mov	r1, r0
   2b7f0:	1c58      	adds	r0, r3, #1
   2b7f2:	f7ff f8f5 	bl	2a9e0 <CC_PalMemCopyPlat>
   2b7f6:	9b08      	ldr	r3, [sp, #32]
   2b7f8:	4423      	add	r3, r4
   2b7fa:	2200      	movs	r2, #0
   2b7fc:	3402      	adds	r4, #2
   2b7fe:	705a      	strb	r2, [r3, #1]
   2b800:	bb07      	cbnz	r7, 2b844 <UtilCmacBuildDataForDerivation+0xa4>
   2b802:	2eff      	cmp	r6, #255	; 0xff
   2b804:	9600      	str	r6, [sp, #0]
   2b806:	d915      	bls.n	2b834 <UtilCmacBuildDataForDerivation+0x94>
   2b808:	9b08      	ldr	r3, [sp, #32]
   2b80a:	0235      	lsls	r5, r6, #8
   2b80c:	b2ad      	uxth	r5, r5
   2b80e:	1918      	adds	r0, r3, r4
   2b810:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   2b814:	2202      	movs	r2, #2
   2b816:	a901      	add	r1, sp, #4
   2b818:	9501      	str	r5, [sp, #4]
   2b81a:	f7ff f8e1 	bl	2a9e0 <CC_PalMemCopyPlat>
   2b81e:	3402      	adds	r4, #2
   2b820:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b822:	2000      	movs	r0, #0
   2b824:	601c      	str	r4, [r3, #0]
   2b826:	b002      	add	sp, #8
   2b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b82c:	4809      	ldr	r0, [pc, #36]	; (2b854 <UtilCmacBuildDataForDerivation+0xb4>)
   2b82e:	b002      	add	sp, #8
   2b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b834:	9b08      	ldr	r3, [sp, #32]
   2b836:	2201      	movs	r2, #1
   2b838:	1918      	adds	r0, r3, r4
   2b83a:	4669      	mov	r1, sp
   2b83c:	f7ff f8d0 	bl	2a9e0 <CC_PalMemCopyPlat>
   2b840:	3401      	adds	r4, #1
   2b842:	e7ed      	b.n	2b820 <UtilCmacBuildDataForDerivation+0x80>
   2b844:	9b08      	ldr	r3, [sp, #32]
   2b846:	4641      	mov	r1, r8
   2b848:	1918      	adds	r0, r3, r4
   2b84a:	463a      	mov	r2, r7
   2b84c:	f7ff f8c8 	bl	2a9e0 <CC_PalMemCopyPlat>
   2b850:	443c      	add	r4, r7
   2b852:	e7d6      	b.n	2b802 <UtilCmacBuildDataForDerivation+0x62>
   2b854:	80000006 	.word	0x80000006

0002b858 <CC_PalDataBufferAttrGet>:
   2b858:	2000      	movs	r0, #0
   2b85a:	7018      	strb	r0, [r3, #0]
   2b85c:	4770      	bx	lr
   2b85e:	bf00      	nop

0002b860 <clear_id_work_function>:
{
   2b860:	b508      	push	{r3, lr}
    ret = nvs_delete(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY);
   2b862:	f7f1 fb11 	bl	1ce88 <get_file_system_handle>
   2b866:	2100      	movs	r1, #0
   2b868:	f000 fdb1 	bl	2c3ce <nvs_delete>
    sys_reboot(SYS_REBOOT_WARM);
   2b86c:	2000      	movs	r0, #0
   2b86e:	f7f2 f863 	bl	1d938 <sys_reboot>

0002b872 <device_is_ready>:
 * @retval true if the device is ready for use.
 * @retval false if the device is not ready for use or if a NULL device pointer
 * is passed as argument.
 */
static inline bool device_is_ready(const struct device *dev)
{
   2b872:	b508      	push	{r3, lr}
	return z_device_ready(dev) ? 0 : -ENODEV;
   2b874:	f005 fe32 	bl	314dc <z_device_ready>
   2b878:	2800      	cmp	r0, #0
   2b87a:	bf14      	ite	ne
   2b87c:	2000      	movne	r0, #0
   2b87e:	f06f 0012 	mvneq.w	r0, #18
	return device_usable_check(dev) == 0;
}
   2b882:	fab0 f080 	clz	r0, r0
   2b886:	0940      	lsrs	r0, r0, #5
   2b888:	bd08      	pop	{r3, pc}

0002b88a <on_cccd_changed_measurement>:
        break;

    default:
        LOG_INF("Error, CCCD has been set to an invalid value");
    }
}
   2b88a:	4770      	bx	lr

0002b88c <on_read_temperature>:

static ssize_t on_read_temperature(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                   void *buf, uint16_t len, uint16_t offset)
{
   2b88c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b88e:	b089      	sub	sp, #36	; 0x24
   2b890:	460d      	mov	r5, r1
   2b892:	4616      	mov	r6, r2
   2b894:	461f      	mov	r7, r3
   2b896:	4604      	mov	r4, r0
    int32_t temperature_value;
#ifndef SW_SENSOR_EMULATION_MODE
    struct sensor_value temperature;

    // Take bme280 measurement
    measure_temperature();
   2b898:	f7f1 f930 	bl	1cafc <measure_temperature>
    // Fetch the measurement on a local variable
    temperature = get_temperature_measurement();
   2b89c:	a806      	add	r0, sp, #24
   2b89e:	f7f1 f96f 	bl	1cb80 <get_temperature_measurement>

    // Convert temperature from sensor_value format to int32_t
    temperature_value = temperature.val1 * 100 + temperature.val2 / 10000;
   2b8a2:	9b07      	ldr	r3, [sp, #28]
   2b8a4:	f242 7210 	movw	r2, #10000	; 0x2710
   2b8a8:	fb93 f2f2 	sdiv	r2, r3, r2
   2b8ac:	9b06      	ldr	r3, [sp, #24]
   2b8ae:	2164      	movs	r1, #100	; 0x64
   2b8b0:	fb01 2303 	mla	r3, r1, r3, r2
   2b8b4:	9305      	str	r3, [sp, #20]
#else
    temperature_value = 3266;
#endif
    // Send the measurement
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &temperature_value,
   2b8b6:	2304      	movs	r3, #4
   2b8b8:	9302      	str	r3, [sp, #8]
   2b8ba:	ab05      	add	r3, sp, #20
   2b8bc:	9301      	str	r3, [sp, #4]
   2b8be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2b8c2:	9300      	str	r3, [sp, #0]
   2b8c4:	4632      	mov	r2, r6
   2b8c6:	463b      	mov	r3, r7
   2b8c8:	4629      	mov	r1, r5
   2b8ca:	4620      	mov	r0, r4
   2b8cc:	f003 f851 	bl	2e972 <bt_gatt_attr_read>
                             sizeof(temperature_value));
}
   2b8d0:	b009      	add	sp, #36	; 0x24
   2b8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b8d4 <on_read_humidity>:

static ssize_t on_read_humidity(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                void *buf, uint16_t len, uint16_t offset)
{
   2b8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b8d6:	b089      	sub	sp, #36	; 0x24
   2b8d8:	460d      	mov	r5, r1
   2b8da:	4616      	mov	r6, r2
   2b8dc:	461f      	mov	r7, r3
   2b8de:	4604      	mov	r4, r0

#ifndef SW_SENSOR_EMULATION_MODE
    struct sensor_value humidity;

    // Take bme280 measurement
    measure_humidity();
   2b8e0:	f7f1 f92e 	bl	1cb40 <measure_humidity>
    // Fetch the measurement on a local variable
    humidity = get_humidity_measurement();
   2b8e4:	a806      	add	r0, sp, #24
   2b8e6:	f7f1 f955 	bl	1cb94 <get_humidity_measurement>

    // Convert humidity from sensor_value format to int32_t
    humidity_value = humidity.val1 * 100 + humidity.val2 / 10000;
   2b8ea:	9b07      	ldr	r3, [sp, #28]
   2b8ec:	f242 7210 	movw	r2, #10000	; 0x2710
   2b8f0:	fb93 f2f2 	sdiv	r2, r3, r2
   2b8f4:	9b06      	ldr	r3, [sp, #24]
   2b8f6:	2164      	movs	r1, #100	; 0x64
   2b8f8:	fb01 2303 	mla	r3, r1, r3, r2
   2b8fc:	9305      	str	r3, [sp, #20]

#else 
    humidity_value = 6642;
#endif
    // Send the measurement
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &humidity_value,
   2b8fe:	2304      	movs	r3, #4
   2b900:	9302      	str	r3, [sp, #8]
   2b902:	ab05      	add	r3, sp, #20
   2b904:	9301      	str	r3, [sp, #4]
   2b906:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2b90a:	9300      	str	r3, [sp, #0]
   2b90c:	4632      	mov	r2, r6
   2b90e:	463b      	mov	r3, r7
   2b910:	4629      	mov	r1, r5
   2b912:	4620      	mov	r0, r4
   2b914:	f003 f82d 	bl	2e972 <bt_gatt_attr_read>
                             sizeof(humidity_value));
}
   2b918:	b009      	add	sp, #36	; 0x24
   2b91a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b91c <on_read_light_exposure>:

static ssize_t on_read_light_exposure(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                      void *buf, uint16_t len, uint16_t offset)
{
   2b91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b920:	b088      	sub	sp, #32
   2b922:	4605      	mov	r5, r0
   2b924:	460e      	mov	r6, r1
   2b926:	4617      	mov	r7, r2
   2b928:	4698      	mov	r8, r3
    int32_t light_exposure;
#ifndef SW_SENSOR_EMULATION_MODE
    const struct device *bh1750_device = get_bh1750_device();
   2b92a:	f7f1 fa25 	bl	1cd78 <get_bh1750_device>
   2b92e:	4604      	mov	r4, r0
	return api->sample_fetch(dev, type);
   2b930:	6883      	ldr	r3, [r0, #8]
   2b932:	2111      	movs	r1, #17
   2b934:	68db      	ldr	r3, [r3, #12]
   2b936:	4798      	blx	r3
	return api->channel_get(dev, chan, val);
   2b938:	68a3      	ldr	r3, [r4, #8]
   2b93a:	aa06      	add	r2, sp, #24
   2b93c:	691b      	ldr	r3, [r3, #16]
   2b93e:	2111      	movs	r1, #17
   2b940:	4620      	mov	r0, r4
   2b942:	4798      	blx	r3
    struct sensor_value lux;
    sensor_sample_fetch_chan(bh1750_device, SENSOR_CHAN_LIGHT);
    sensor_channel_get(bh1750_device, SENSOR_CHAN_LIGHT, &lux);
    light_exposure = lux.val1;
   2b944:	9b06      	ldr	r3, [sp, #24]
   2b946:	9305      	str	r3, [sp, #20]
#else
    light_exposure = 18000;
#endif
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &light_exposure,
   2b948:	2304      	movs	r3, #4
   2b94a:	9302      	str	r3, [sp, #8]
   2b94c:	ab05      	add	r3, sp, #20
   2b94e:	9301      	str	r3, [sp, #4]
   2b950:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2b954:	9300      	str	r3, [sp, #0]
   2b956:	463a      	mov	r2, r7
   2b958:	4643      	mov	r3, r8
   2b95a:	4631      	mov	r1, r6
   2b95c:	4628      	mov	r0, r5
   2b95e:	f003 f808 	bl	2e972 <bt_gatt_attr_read>
                             sizeof(light_exposure));
}
   2b962:	b008      	add	sp, #32
   2b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b968 <on_read_soil_moisture>:

static ssize_t on_read_soil_moisture(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                     void *buf, uint16_t len, uint16_t offset)
{
   2b968:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b96a:	b087      	sub	sp, #28
   2b96c:	4604      	mov	r4, r0
   2b96e:	460d      	mov	r5, r1
   2b970:	4616      	mov	r6, r2
   2b972:	461f      	mov	r7, r3
    int32_t soil_moisture;
#ifndef SW_SENSOR_EMULATION_MODE
    gpio_enable_soil_moisture();
   2b974:	f7f1 fae8 	bl	1cf48 <gpio_enable_soil_moisture>
	return z_impl_k_sleep(timeout);
   2b978:	2100      	movs	r1, #0
   2b97a:	f240 6067 	movw	r0, #1639	; 0x667
   2b97e:	f7fc ffa5 	bl	288cc <z_impl_k_sleep>
    k_sleep(K_MSEC(50));
   
    adc_measure_soil_moisture();
   2b982:	f7f1 fa13 	bl	1cdac <adc_measure_soil_moisture>
    soil_moisture = adc_get_soil_moisture();
   2b986:	f7f1 fa1d 	bl	1cdc4 <adc_get_soil_moisture>
   2b98a:	9005      	str	r0, [sp, #20]
    gpio_disable_soil_moisture();
   2b98c:	f7f1 faee 	bl	1cf6c <gpio_disable_soil_moisture>
#else
    soil_moisture = 5000; // 50%
#endif
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &soil_moisture,
   2b990:	2304      	movs	r3, #4
   2b992:	9302      	str	r3, [sp, #8]
   2b994:	ab05      	add	r3, sp, #20
   2b996:	9301      	str	r3, [sp, #4]
   2b998:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2b99c:	9300      	str	r3, [sp, #0]
   2b99e:	4632      	mov	r2, r6
   2b9a0:	463b      	mov	r3, r7
   2b9a2:	4629      	mov	r1, r5
   2b9a4:	4620      	mov	r0, r4
   2b9a6:	f002 ffe4 	bl	2e972 <bt_gatt_attr_read>
                             sizeof(soil_moisture));
}
   2b9aa:	b007      	add	sp, #28
   2b9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b9ae <disconnected>:
}
   2b9ae:	4770      	bx	lr

0002b9b0 <le_param_req>:
}
   2b9b0:	2001      	movs	r0, #1
   2b9b2:	4770      	bx	lr

0002b9b4 <le_param_updated>:
{
   2b9b4:	b500      	push	{lr}
   2b9b6:	b089      	sub	sp, #36	; 0x24
    if (bt_conn_get_info(conn, &info))
   2b9b8:	a901      	add	r1, sp, #4
   2b9ba:	f7f5 f98f 	bl	20cdc <bt_conn_get_info>
}
   2b9be:	b009      	add	sp, #36	; 0x24
   2b9c0:	f85d fb04 	ldr.w	pc, [sp], #4

0002b9c4 <on_read_battery_level>:

static ssize_t on_read_battery_level(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                void *buf, uint16_t len, uint16_t offset)
{
   2b9c4:	b510      	push	{r4, lr}
   2b9c6:	b086      	sub	sp, #24
    
    int32_t battery_level = 64;
   2b9c8:	2440      	movs	r4, #64	; 0x40
   2b9ca:	9405      	str	r4, [sp, #20]

    return bt_gatt_attr_read(conn, attr, buf, len, offset, &battery_level,
   2b9cc:	2404      	movs	r4, #4
   2b9ce:	9402      	str	r4, [sp, #8]
   2b9d0:	ac05      	add	r4, sp, #20
   2b9d2:	9401      	str	r4, [sp, #4]
   2b9d4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2b9d8:	9400      	str	r4, [sp, #0]
   2b9da:	f002 ffca 	bl	2e972 <bt_gatt_attr_read>
                             sizeof(battery_level));
}
   2b9de:	b006      	add	sp, #24
   2b9e0:	bd10      	pop	{r4, pc}

0002b9e2 <on_read_configuration_id>:

static ssize_t on_read_configuration_id(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                void *buf, uint16_t len, uint16_t offset)
{
   2b9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b9e6:	b086      	sub	sp, #24
    
    uint8_t configuration_id;

    // Read stored configuration id
    nvs_read(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY, &configuration_id, sizeof(configuration_id));
   2b9e8:	f10d 0817 	add.w	r8, sp, #23
{
   2b9ec:	460d      	mov	r5, r1
   2b9ee:	4616      	mov	r6, r2
   2b9f0:	461f      	mov	r7, r3
   2b9f2:	4604      	mov	r4, r0
    nvs_read(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY, &configuration_id, sizeof(configuration_id));
   2b9f4:	f7f1 fa48 	bl	1ce88 <get_file_system_handle>
   2b9f8:	4642      	mov	r2, r8
   2b9fa:	2301      	movs	r3, #1
   2b9fc:	2100      	movs	r1, #0
   2b9fe:	f000 fd41 	bl	2c484 <nvs_read>

    return bt_gatt_attr_read(conn, attr, buf, len, offset, &configuration_id,
   2ba02:	2301      	movs	r3, #1
   2ba04:	e9cd 8301 	strd	r8, r3, [sp, #4]
   2ba08:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2ba0c:	9300      	str	r3, [sp, #0]
   2ba0e:	4632      	mov	r2, r6
   2ba10:	463b      	mov	r3, r7
   2ba12:	4629      	mov	r1, r5
   2ba14:	4620      	mov	r0, r4
   2ba16:	f002 ffac 	bl	2e972 <bt_gatt_attr_read>
                             sizeof(configuration_id));
}
   2ba1a:	b006      	add	sp, #24
   2ba1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ba20 <bh1750_channel_get>:
    val->val1 = bh1750_data->lux;
   2ba20:	6903      	ldr	r3, [r0, #16]
   2ba22:	889b      	ldrh	r3, [r3, #4]
   2ba24:	6013      	str	r3, [r2, #0]
    val->val2 = 0;
   2ba26:	2300      	movs	r3, #0
   2ba28:	6053      	str	r3, [r2, #4]
}
   2ba2a:	4770      	bx	lr

0002ba2c <adc_calibration_sampling_done_callback>:
}
   2ba2c:	2002      	movs	r0, #2
   2ba2e:	4770      	bx	lr

0002ba30 <adc_calibration_timer_handler>:
{
   2ba30:	b508      	push	{r3, lr}
    struct k_work *adc_calibration_item = get_adc_calibrate_work_item();
   2ba32:	f7f1 fa01 	bl	1ce38 <get_adc_calibrate_work_item>
}
   2ba36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    k_work_submit(adc_calibration_item);
   2ba3a:	f7fc bbb9 	b.w	281b0 <k_work_submit>

0002ba3e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2ba3e:	4603      	mov	r3, r0
   2ba40:	b140      	cbz	r0, 2ba54 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2ba42:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2ba44:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2ba48:	2a02      	cmp	r2, #2
   2ba4a:	d006      	beq.n	2ba5a <sys_notify_validate+0x1c>
   2ba4c:	2a03      	cmp	r2, #3
   2ba4e:	d004      	beq.n	2ba5a <sys_notify_validate+0x1c>
   2ba50:	2a01      	cmp	r2, #1
   2ba52:	d005      	beq.n	2ba60 <sys_notify_validate+0x22>
		return -EINVAL;
   2ba54:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2ba58:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2ba5a:	681a      	ldr	r2, [r3, #0]
   2ba5c:	2a00      	cmp	r2, #0
   2ba5e:	d0f9      	beq.n	2ba54 <sys_notify_validate+0x16>
		notify->result = 0;
   2ba60:	2000      	movs	r0, #0
   2ba62:	6098      	str	r0, [r3, #8]
   2ba64:	4770      	bx	lr

0002ba66 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2ba66:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2ba68:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2ba6c:	2a02      	cmp	r2, #2
{
   2ba6e:	b510      	push	{r4, lr}
   2ba70:	4603      	mov	r3, r0
	notify->result = res;
   2ba72:	6081      	str	r1, [r0, #8]
	switch (method) {
   2ba74:	d00a      	beq.n	2ba8c <sys_notify_finalize+0x26>
   2ba76:	2a03      	cmp	r2, #3
   2ba78:	d10b      	bne.n	2ba92 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2ba7a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2ba7c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2ba7e:	2200      	movs	r2, #0
   2ba80:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2ba82:	b108      	cbz	r0, 2ba88 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   2ba84:	f7fd fa2e 	bl	28ee4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2ba88:	4620      	mov	r0, r4
   2ba8a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2ba8c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2ba8e:	2400      	movs	r4, #0
		break;
   2ba90:	e7f5      	b.n	2ba7e <sys_notify_finalize+0x18>
	switch (method) {
   2ba92:	2400      	movs	r4, #0
   2ba94:	4620      	mov	r0, r4
   2ba96:	e7f2      	b.n	2ba7e <sys_notify_finalize+0x18>

0002ba98 <arch_printk_char_out>:
}
   2ba98:	2000      	movs	r0, #0
   2ba9a:	4770      	bx	lr

0002ba9c <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   2ba9c:	b40f      	push	{r0, r1, r2, r3}
   2ba9e:	b507      	push	{r0, r1, r2, lr}
   2baa0:	a904      	add	r1, sp, #16
   2baa2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2baa6:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   2baa8:	f7f1 fa92 	bl	1cfd0 <vprintk>
	}
	va_end(ap);
}
   2baac:	b003      	add	sp, #12
   2baae:	f85d eb04 	ldr.w	lr, [sp], #4
   2bab2:	b004      	add	sp, #16
   2bab4:	4770      	bx	lr

0002bab6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2bab6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2bab8:	f013 0307 	ands.w	r3, r3, #7
   2babc:	d105      	bne.n	2baca <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2babe:	6803      	ldr	r3, [r0, #0]
   2bac0:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2bac2:	bf0c      	ite	eq
   2bac4:	2000      	moveq	r0, #0
   2bac6:	2003      	movne	r0, #3
   2bac8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2baca:	2b02      	cmp	r3, #2
   2bacc:	d105      	bne.n	2bada <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2bace:	8b43      	ldrh	r3, [r0, #26]
   2bad0:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2bad2:	bf14      	ite	ne
   2bad4:	2000      	movne	r0, #0
   2bad6:	2004      	moveq	r0, #4
   2bad8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2bada:	2b01      	cmp	r3, #1
   2badc:	d105      	bne.n	2baea <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2bade:	6803      	ldr	r3, [r0, #0]
   2bae0:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2bae2:	bf0c      	ite	eq
   2bae4:	2000      	moveq	r0, #0
   2bae6:	2005      	movne	r0, #5
   2bae8:	4770      	bx	lr
	int evt = EVT_NOP;
   2baea:	2000      	movs	r0, #0
}
   2baec:	4770      	bx	lr

0002baee <notify_one>:
{
   2baee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2baf2:	460d      	mov	r5, r1
   2baf4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2baf6:	4619      	mov	r1, r3
   2baf8:	1d28      	adds	r0, r5, #4
{
   2bafa:	4690      	mov	r8, r2
   2bafc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2bafe:	f7ff ffb2 	bl	2ba66 <sys_notify_finalize>
	if (cb) {
   2bb02:	4604      	mov	r4, r0
   2bb04:	b138      	cbz	r0, 2bb16 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2bb06:	4633      	mov	r3, r6
   2bb08:	4642      	mov	r2, r8
   2bb0a:	4629      	mov	r1, r5
   2bb0c:	4638      	mov	r0, r7
   2bb0e:	46a4      	mov	ip, r4
}
   2bb10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2bb14:	4760      	bx	ip
}
   2bb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bb1a <transition_complete>:
{
   2bb1a:	b410      	push	{r4}
	__asm__ volatile(
   2bb1c:	f04f 0440 	mov.w	r4, #64	; 0x40
   2bb20:	f3ef 8211 	mrs	r2, BASEPRI
   2bb24:	f384 8812 	msr	BASEPRI_MAX, r4
   2bb28:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2bb2c:	6141      	str	r1, [r0, #20]
}
   2bb2e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2bb30:	2101      	movs	r1, #1
   2bb32:	f7f1 ba5b 	b.w	1cfec <process_event>

0002bb36 <validate_args>:
{
   2bb36:	b510      	push	{r4, lr}
   2bb38:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2bb3a:	b140      	cbz	r0, 2bb4e <validate_args+0x18>
   2bb3c:	b139      	cbz	r1, 2bb4e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2bb3e:	1d08      	adds	r0, r1, #4
   2bb40:	f7ff ff7d 	bl	2ba3e <sys_notify_validate>
	if ((rv == 0)
   2bb44:	b928      	cbnz	r0, 2bb52 <validate_args+0x1c>
	    && ((cli->notify.flags
   2bb46:	68a3      	ldr	r3, [r4, #8]
   2bb48:	f033 0303 	bics.w	r3, r3, #3
   2bb4c:	d001      	beq.n	2bb52 <validate_args+0x1c>
		rv = -EINVAL;
   2bb4e:	f06f 0015 	mvn.w	r0, #21
}
   2bb52:	bd10      	pop	{r4, pc}

0002bb54 <onoff_manager_init>:
{
   2bb54:	b538      	push	{r3, r4, r5, lr}
   2bb56:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2bb58:	4605      	mov	r5, r0
   2bb5a:	b158      	cbz	r0, 2bb74 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2bb5c:	b151      	cbz	r1, 2bb74 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2bb5e:	680b      	ldr	r3, [r1, #0]
   2bb60:	b143      	cbz	r3, 2bb74 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2bb62:	684b      	ldr	r3, [r1, #4]
   2bb64:	b133      	cbz	r3, 2bb74 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2bb66:	221c      	movs	r2, #28
   2bb68:	2100      	movs	r1, #0
   2bb6a:	f001 f8b1 	bl	2ccd0 <memset>
   2bb6e:	612c      	str	r4, [r5, #16]
	return 0;
   2bb70:	2000      	movs	r0, #0
}
   2bb72:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2bb74:	f06f 0015 	mvn.w	r0, #21
   2bb78:	e7fb      	b.n	2bb72 <onoff_manager_init+0x1e>

0002bb7a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2bb7a:	b570      	push	{r4, r5, r6, lr}
   2bb7c:	4604      	mov	r4, r0
   2bb7e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2bb80:	f7ff ffd9 	bl	2bb36 <validate_args>

	if (rv < 0) {
   2bb84:	1e05      	subs	r5, r0, #0
   2bb86:	db31      	blt.n	2bbec <onoff_request+0x72>
   2bb88:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bb8c:	f3ef 8111 	mrs	r1, BASEPRI
   2bb90:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb94:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2bb98:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2bb9a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   2bb9c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   2bba0:	42ab      	cmp	r3, r5
   2bba2:	f000 0207 	and.w	r2, r0, #7
   2bba6:	d02e      	beq.n	2bc06 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2bba8:	2a02      	cmp	r2, #2
   2bbaa:	d10e      	bne.n	2bbca <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   2bbac:	3301      	adds	r3, #1
   2bbae:	8363      	strh	r3, [r4, #26]
	rv = state;
   2bbb0:	4615      	mov	r5, r2
		notify = true;
   2bbb2:	2301      	movs	r3, #1
	__asm__ volatile(
   2bbb4:	f381 8811 	msr	BASEPRI, r1
   2bbb8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2bbbc:	b1b3      	cbz	r3, 2bbec <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   2bbbe:	2300      	movs	r3, #0
   2bbc0:	4631      	mov	r1, r6
   2bbc2:	4620      	mov	r0, r4
   2bbc4:	f7ff ff93 	bl	2baee <notify_one>
   2bbc8:	e010      	b.n	2bbec <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   2bbca:	0783      	lsls	r3, r0, #30
   2bbcc:	d001      	beq.n	2bbd2 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   2bbce:	2a06      	cmp	r2, #6
   2bbd0:	d10e      	bne.n	2bbf0 <onoff_request+0x76>
	parent->next = child;
   2bbd2:	2300      	movs	r3, #0
   2bbd4:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   2bbd6:	6863      	ldr	r3, [r4, #4]
   2bbd8:	b993      	cbnz	r3, 2bc00 <onoff_request+0x86>
	list->head = node;
   2bbda:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   2bbde:	4615      	mov	r5, r2
   2bbe0:	b962      	cbnz	r2, 2bbfc <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   2bbe2:	460a      	mov	r2, r1
   2bbe4:	4620      	mov	r0, r4
   2bbe6:	2102      	movs	r1, #2
   2bbe8:	f7f1 fa00 	bl	1cfec <process_event>
		}
	}

	return rv;
}
   2bbec:	4628      	mov	r0, r5
   2bbee:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   2bbf0:	2a05      	cmp	r2, #5
   2bbf2:	bf0c      	ite	eq
   2bbf4:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2bbf8:	f06f 0504 	mvnne.w	r5, #4
   2bbfc:	2300      	movs	r3, #0
   2bbfe:	e7d9      	b.n	2bbb4 <onoff_request+0x3a>
	parent->next = child;
   2bc00:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2bc02:	6066      	str	r6, [r4, #4]
}
   2bc04:	e7eb      	b.n	2bbde <onoff_request+0x64>
		rv = -EAGAIN;
   2bc06:	f06f 050a 	mvn.w	r5, #10
   2bc0a:	e7f7      	b.n	2bbfc <onoff_request+0x82>

0002bc0c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2bc0c:	4604      	mov	r4, r0
   2bc0e:	b508      	push	{r3, lr}
   2bc10:	4608      	mov	r0, r1
   2bc12:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2bc14:	461a      	mov	r2, r3
   2bc16:	47a0      	blx	r4
	return z_impl_z_current_get();
   2bc18:	f7fc fe72 	bl	28900 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2bc1c:	f7f3 f832 	bl	1ec84 <z_impl_k_thread_abort>

0002bc20 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2bc20:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2bc24:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2bc26:	0840      	lsrs	r0, r0, #1
   2bc28:	4770      	bx	lr

0002bc2a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2bc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc2c:	4603      	mov	r3, r0
   2bc2e:	460c      	mov	r4, r1
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2bc30:	f7ff fff6 	bl	2bc20 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2bc34:	fab0 f080 	clz	r0, r0
   2bc38:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2bc3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2bc40:	00ca      	lsls	r2, r1, #3
   2bc42:	f8dc 6010 	ldr.w	r6, [ip, #16]
   2bc46:	1d17      	adds	r7, r2, #4
   2bc48:	b28d      	uxth	r5, r1
   2bc4a:	3206      	adds	r2, #6
   2bc4c:	b956      	cbnz	r6, 2bc64 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2bc4e:	2101      	movs	r1, #1
   2bc50:	fa01 f000 	lsl.w	r0, r1, r0
   2bc54:	68d9      	ldr	r1, [r3, #12]
   2bc56:	4301      	orrs	r1, r0
   2bc58:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2bc5a:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2bc5e:	53dd      	strh	r5, [r3, r7]
   2bc60:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2bc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2bc64:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2bc66:	3104      	adds	r1, #4
   2bc68:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2bc6a:	53d8      	strh	r0, [r3, r7]
   2bc6c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2bc70:	529e      	strh	r6, [r3, r2]
   2bc72:	80c5      	strh	r5, [r0, #6]
   2bc74:	525d      	strh	r5, [r3, r1]
   2bc76:	e7f4      	b.n	2bc62 <free_list_add+0x38>

0002bc78 <free_list_remove_bidx>:
{
   2bc78:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2bc7a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2bc7e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2bc80:	4299      	cmp	r1, r3
   2bc82:	f102 0104 	add.w	r1, r2, #4
   2bc86:	d10a      	bne.n	2bc9e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2bc88:	2301      	movs	r3, #1
   2bc8a:	fa03 f202 	lsl.w	r2, r3, r2
   2bc8e:	68c3      	ldr	r3, [r0, #12]
   2bc90:	ea23 0302 	bic.w	r3, r3, r2
   2bc94:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2bc96:	2300      	movs	r3, #0
   2bc98:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2bc9c:	bd10      	pop	{r4, pc}
   2bc9e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2bca0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2bca4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2bca8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2bcac:	80cb      	strh	r3, [r1, #6]
   2bcae:	8082      	strh	r2, [r0, #4]
}
   2bcb0:	e7f4      	b.n	2bc9c <free_list_remove_bidx+0x24>

0002bcb2 <free_list_remove>:
{
   2bcb2:	b510      	push	{r4, lr}
   2bcb4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2bcb6:	f7ff ffb3 	bl	2bc20 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2bcba:	fab0 f280 	clz	r2, r0
}
   2bcbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   2bcc2:	f1c2 021f 	rsb	r2, r2, #31
   2bcc6:	4618      	mov	r0, r3
   2bcc8:	f7ff bfd6 	b.w	2bc78 <free_list_remove_bidx>

0002bccc <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2bccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bcd0:	fab1 f581 	clz	r5, r1
   2bcd4:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2bcd8:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   2bcdc:	4603      	mov	r3, r0
	if (b->next) {
   2bcde:	693a      	ldr	r2, [r7, #16]
{
   2bce0:	460e      	mov	r6, r1
	if (b->next) {
   2bce2:	b1ca      	cbz	r2, 2bd18 <alloc_chunk+0x4c>
   2bce4:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2bce8:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   2bcea:	4618      	mov	r0, r3
   2bcec:	4621      	mov	r1, r4
   2bcee:	f7ff ff97 	bl	2bc20 <chunk_size>
   2bcf2:	42b0      	cmp	r0, r6
   2bcf4:	d307      	bcc.n	2bd06 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2bcf6:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2bcf8:	4621      	mov	r1, r4
   2bcfa:	4618      	mov	r0, r3
   2bcfc:	f7ff ffbc 	bl	2bc78 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2bd00:	4620      	mov	r0, r4
   2bd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2bd06:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2bd0a:	f1b8 0801 	subs.w	r8, r8, #1
   2bd0e:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   2bd10:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   2bd12:	d001      	beq.n	2bd18 <alloc_chunk+0x4c>
   2bd14:	428a      	cmp	r2, r1
   2bd16:	d1e7      	bne.n	2bce8 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2bd18:	68d9      	ldr	r1, [r3, #12]
   2bd1a:	f1c5 0520 	rsb	r5, r5, #32
   2bd1e:	f04f 34ff 	mov.w	r4, #4294967295
   2bd22:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   2bd24:	400c      	ands	r4, r1
   2bd26:	d0eb      	beq.n	2bd00 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2bd28:	fa94 f2a4 	rbit	r2, r4
   2bd2c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2bd30:	1d11      	adds	r1, r2, #4
   2bd32:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   2bd36:	e7df      	b.n	2bcf8 <alloc_chunk+0x2c>

0002bd38 <merge_chunks>:
{
   2bd38:	b538      	push	{r3, r4, r5, lr}
   2bd3a:	4603      	mov	r3, r0
   2bd3c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2bd3e:	f7ff ff6f 	bl	2bc20 <chunk_size>
   2bd42:	4611      	mov	r1, r2
   2bd44:	4604      	mov	r4, r0
   2bd46:	4618      	mov	r0, r3
   2bd48:	f7ff ff6a 	bl	2bc20 <chunk_size>
   2bd4c:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   2bd4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bd52:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   2bd54:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   2bd56:	4618      	mov	r0, r3
   2bd58:	4611      	mov	r1, r2
   2bd5a:	f7ff ff61 	bl	2bc20 <chunk_size>
	void *cmem = &buf[c];
   2bd5e:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2bd60:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   2bd64:	bd38      	pop	{r3, r4, r5, pc}

0002bd66 <split_chunks>:
{
   2bd66:	b538      	push	{r3, r4, r5, lr}
   2bd68:	4603      	mov	r3, r0
   2bd6a:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   2bd6c:	f7ff ff58 	bl	2bc20 <chunk_size>
	chunksz_t lsz = rc - lc;
   2bd70:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2bd72:	1aa5      	subs	r5, r4, r2
   2bd74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2bd78:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bd7a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2bd7c:	8060      	strh	r0, [r4, #2]
   2bd7e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bd82:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2bd84:	8044      	strh	r4, [r0, #2]
   2bd86:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2bd8a:	4618      	mov	r0, r3
   2bd8c:	4611      	mov	r1, r2
   2bd8e:	f7ff ff47 	bl	2bc20 <chunk_size>
	void *cmem = &buf[c];
   2bd92:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2bd94:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   2bd98:	bd38      	pop	{r3, r4, r5, pc}

0002bd9a <free_chunk>:
{
   2bd9a:	b538      	push	{r3, r4, r5, lr}
   2bd9c:	4605      	mov	r5, r0
   2bd9e:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   2bda0:	f7ff ff3e 	bl	2bc20 <chunk_size>
   2bda4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2bda6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2bdaa:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2bdac:	07da      	lsls	r2, r3, #31
   2bdae:	d40a      	bmi.n	2bdc6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2bdb0:	4628      	mov	r0, r5
   2bdb2:	f7ff ff7e 	bl	2bcb2 <free_list_remove>
	return c + chunk_size(h, c);
   2bdb6:	4621      	mov	r1, r4
   2bdb8:	4628      	mov	r0, r5
   2bdba:	f7ff ff31 	bl	2bc20 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2bdbe:	1822      	adds	r2, r4, r0
   2bdc0:	4628      	mov	r0, r5
   2bdc2:	f7ff ffb9 	bl	2bd38 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2bdc6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2bdca:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2bdcc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2bdd0:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2bdd2:	07db      	lsls	r3, r3, #31
   2bdd4:	d40c      	bmi.n	2bdf0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2bdd6:	4628      	mov	r0, r5
   2bdd8:	f7ff ff6b 	bl	2bcb2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2bddc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2bde0:	4622      	mov	r2, r4
   2bde2:	1a61      	subs	r1, r4, r1
   2bde4:	4628      	mov	r0, r5
   2bde6:	f7ff ffa7 	bl	2bd38 <merge_chunks>
   2bdea:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2bdee:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2bdf0:	4621      	mov	r1, r4
   2bdf2:	4628      	mov	r0, r5
}
   2bdf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2bdf8:	f7ff bf17 	b.w	2bc2a <free_list_add>

0002bdfc <sys_heap_free>:
	if (mem == NULL) {
   2bdfc:	b161      	cbz	r1, 2be18 <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
   2bdfe:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2be00:	3904      	subs	r1, #4
   2be02:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2be04:	f021 0307 	bic.w	r3, r1, #7
   2be08:	4403      	add	r3, r0
	free_chunk(h, c);
   2be0a:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2be0c:	885a      	ldrh	r2, [r3, #2]
   2be0e:	f022 0201 	bic.w	r2, r2, #1
   2be12:	805a      	strh	r2, [r3, #2]
   2be14:	f7ff bfc1 	b.w	2bd9a <free_chunk>
}
   2be18:	4770      	bx	lr

0002be1a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2be1a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2be1c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   2be1e:	b909      	cbnz	r1, 2be24 <sys_heap_alloc+0xa>
		return NULL;
   2be20:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
   2be22:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2be24:	68ab      	ldr	r3, [r5, #8]
   2be26:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2be2a:	d9f9      	bls.n	2be20 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2be2c:	310b      	adds	r1, #11
   2be2e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2be30:	4621      	mov	r1, r4
   2be32:	4628      	mov	r0, r5
   2be34:	f7ff ff4a 	bl	2bccc <alloc_chunk>
	if (c == 0U) {
   2be38:	4606      	mov	r6, r0
   2be3a:	2800      	cmp	r0, #0
   2be3c:	d0f0      	beq.n	2be20 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2be3e:	4601      	mov	r1, r0
   2be40:	4628      	mov	r0, r5
   2be42:	f7ff feed 	bl	2bc20 <chunk_size>
   2be46:	42a0      	cmp	r0, r4
   2be48:	d908      	bls.n	2be5c <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   2be4a:	4434      	add	r4, r6
   2be4c:	4628      	mov	r0, r5
   2be4e:	4622      	mov	r2, r4
   2be50:	f7ff ff89 	bl	2bd66 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2be54:	4621      	mov	r1, r4
   2be56:	4628      	mov	r0, r5
   2be58:	f7ff fee7 	bl	2bc2a <free_list_add>
	void *cmem = &buf[c];
   2be5c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2be60:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2be62:	8853      	ldrh	r3, [r2, #2]
   2be64:	f043 0301 	orr.w	r3, r3, #1
   2be68:	8053      	strh	r3, [r2, #2]
   2be6a:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   2be6c:	e7d9      	b.n	2be22 <sys_heap_alloc+0x8>

0002be6e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2be6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2be72:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   2be74:	424a      	negs	r2, r1
   2be76:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   2be7a:	ea31 0202 	bics.w	r2, r1, r2
{
   2be7e:	4603      	mov	r3, r0
	if (align != rew) {
   2be80:	d00a      	beq.n	2be98 <sys_heap_aligned_alloc+0x2a>
		return false;
   2be82:	2f04      	cmp	r7, #4
   2be84:	463a      	mov	r2, r7
   2be86:	46b9      	mov	r9, r7
   2be88:	bf28      	it	cs
   2be8a:	2204      	movcs	r2, #4
		align -= rew;
   2be8c:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2be8e:	b974      	cbnz	r4, 2beae <sys_heap_aligned_alloc+0x40>
		return NULL;
   2be90:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   2be92:	4628      	mov	r0, r5
   2be94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2be98:	2904      	cmp	r1, #4
   2be9a:	d804      	bhi.n	2bea6 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   2be9c:	4621      	mov	r1, r4
}
   2be9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2bea2:	f7ff bfba 	b.w	2be1a <sys_heap_alloc>
		rew = 0;
   2bea6:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   2beaa:	2204      	movs	r2, #4
   2beac:	e7ef      	b.n	2be8e <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   2beae:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   2beb0:	68b3      	ldr	r3, [r6, #8]
   2beb2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2beb6:	d9eb      	bls.n	2be90 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2beb8:	f104 010b 	add.w	r1, r4, #11
   2bebc:	4439      	add	r1, r7
   2bebe:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2bec0:	08c9      	lsrs	r1, r1, #3
   2bec2:	4630      	mov	r0, r6
   2bec4:	f7ff ff02 	bl	2bccc <alloc_chunk>
	if (c0 == 0) {
   2bec8:	4680      	mov	r8, r0
   2beca:	2800      	cmp	r0, #0
   2becc:	d0e0      	beq.n	2be90 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2bece:	f109 0504 	add.w	r5, r9, #4
   2bed2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2bed6:	1e7b      	subs	r3, r7, #1
   2bed8:	4435      	add	r5, r6
   2beda:	441d      	add	r5, r3
   2bedc:	427f      	negs	r7, r7
   2bede:	403d      	ands	r5, r7
   2bee0:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2bee4:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2bee6:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2bee8:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2beea:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2beec:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2bef0:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2bef2:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2bef6:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2befa:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2befe:	d208      	bcs.n	2bf12 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   2bf00:	4601      	mov	r1, r0
   2bf02:	463a      	mov	r2, r7
   2bf04:	4630      	mov	r0, r6
   2bf06:	f7ff ff2e 	bl	2bd66 <split_chunks>
		free_list_add(h, c0);
   2bf0a:	4641      	mov	r1, r8
   2bf0c:	4630      	mov	r0, r6
   2bf0e:	f7ff fe8c 	bl	2bc2a <free_list_add>
	return c + chunk_size(h, c);
   2bf12:	4639      	mov	r1, r7
   2bf14:	4630      	mov	r0, r6
   2bf16:	f7ff fe83 	bl	2bc20 <chunk_size>
   2bf1a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2bf1c:	4284      	cmp	r4, r0
   2bf1e:	d207      	bcs.n	2bf30 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   2bf20:	4630      	mov	r0, r6
   2bf22:	4622      	mov	r2, r4
   2bf24:	f7ff ff1f 	bl	2bd66 <split_chunks>
		free_list_add(h, c_end);
   2bf28:	4621      	mov	r1, r4
   2bf2a:	4630      	mov	r0, r6
   2bf2c:	f7ff fe7d 	bl	2bc2a <free_list_add>
	void *cmem = &buf[c];
   2bf30:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2bf34:	8873      	ldrh	r3, [r6, #2]
   2bf36:	f043 0301 	orr.w	r3, r3, #1
   2bf3a:	8073      	strh	r3, [r6, #2]
   2bf3c:	e7a9      	b.n	2be92 <sys_heap_aligned_alloc+0x24>

0002bf3e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2bf3e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2bf40:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2bf42:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2bf44:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2bf48:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2bf4c:	1ad2      	subs	r2, r2, r3
{
   2bf4e:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2bf50:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2bf52:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   2bf54:	fab4 f084 	clz	r0, r4
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2bf58:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   2bf5c:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2bf5e:	1dc1      	adds	r1, r0, #7
	h->avail_buckets = 0;
   2bf60:	2500      	movs	r5, #0
	h->end_chunk = heap_sz;
   2bf62:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   2bf64:	60dd      	str	r5, [r3, #12]
   2bf66:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2bf68:	f103 0610 	add.w	r6, r3, #16
   2bf6c:	4418      	add	r0, r3
   2bf6e:	4286      	cmp	r6, r0
   2bf70:	d118      	bne.n	2bfa4 <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bf72:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2bf74:	f040 0001 	orr.w	r0, r0, #1
   2bf78:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   2bf7a:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2bf7e:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bf80:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   2bf82:	801d      	strh	r5, [r3, #0]
   2bf84:	8077      	strh	r7, [r6, #2]
   2bf86:	189e      	adds	r6, r3, r2
   2bf88:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   2bf8c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
   2bf90:	8075      	strh	r5, [r6, #2]
   2bf92:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2bf94:	8862      	ldrh	r2, [r4, #2]
   2bf96:	f042 0201 	orr.w	r2, r2, #1
   2bf9a:	8062      	strh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   2bf9c:	4618      	mov	r0, r3
}
   2bf9e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2bfa0:	f7ff be43 	b.w	2bc2a <free_list_add>
		h->buckets[i].next = 0;
   2bfa4:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
   2bfa8:	e7e1      	b.n	2bf6e <sys_heap_init+0x30>

0002bfaa <encode_uint>:
{
   2bfaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bfae:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   2bfb0:	78d3      	ldrb	r3, [r2, #3]
{
   2bfb2:	4614      	mov	r4, r2
	switch (specifier) {
   2bfb4:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2bfb6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   2bfba:	4606      	mov	r6, r0
   2bfbc:	460f      	mov	r7, r1
   2bfbe:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   2bfc0:	d02d      	beq.n	2c01e <encode_uint+0x74>
   2bfc2:	d828      	bhi.n	2c016 <encode_uint+0x6c>
		return 16;
   2bfc4:	2b58      	cmp	r3, #88	; 0x58
   2bfc6:	bf14      	ite	ne
   2bfc8:	250a      	movne	r5, #10
   2bfca:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   2bfcc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   2bfd0:	46aa      	mov	sl, r5
   2bfd2:	f04f 0b00 	mov.w	fp, #0
   2bfd6:	4652      	mov	r2, sl
   2bfd8:	465b      	mov	r3, fp
   2bfda:	4630      	mov	r0, r6
   2bfdc:	4639      	mov	r1, r7
   2bfde:	f7e0 fdcd 	bl	cb7c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2bfe2:	2a09      	cmp	r2, #9
   2bfe4:	b2d3      	uxtb	r3, r2
   2bfe6:	d81f      	bhi.n	2c028 <encode_uint+0x7e>
   2bfe8:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2bfea:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2bfec:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   2bfee:	bf08      	it	eq
   2bff0:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2bff2:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   2bff6:	d301      	bcc.n	2bffc <encode_uint+0x52>
   2bff8:	45c8      	cmp	r8, r9
   2bffa:	d812      	bhi.n	2c022 <encode_uint+0x78>
	if (conv->flag_hash) {
   2bffc:	7823      	ldrb	r3, [r4, #0]
   2bffe:	069b      	lsls	r3, r3, #26
   2c000:	d505      	bpl.n	2c00e <encode_uint+0x64>
		if (radix == 8) {
   2c002:	2d08      	cmp	r5, #8
   2c004:	d116      	bne.n	2c034 <encode_uint+0x8a>
			conv->altform_0 = true;
   2c006:	78a3      	ldrb	r3, [r4, #2]
   2c008:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2c00c:	70a3      	strb	r3, [r4, #2]
}
   2c00e:	4640      	mov	r0, r8
   2c010:	b003      	add	sp, #12
   2c012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2c016:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   2c01a:	2b70      	cmp	r3, #112	; 0x70
   2c01c:	e7d3      	b.n	2bfc6 <encode_uint+0x1c>
	switch (specifier) {
   2c01e:	2508      	movs	r5, #8
   2c020:	e7d4      	b.n	2bfcc <encode_uint+0x22>
		value /= radix;
   2c022:	4606      	mov	r6, r0
   2c024:	460f      	mov	r7, r1
   2c026:	e7d6      	b.n	2bfd6 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2c028:	9a01      	ldr	r2, [sp, #4]
   2c02a:	2a19      	cmp	r2, #25
   2c02c:	bf94      	ite	ls
   2c02e:	3337      	addls	r3, #55	; 0x37
   2c030:	3357      	addhi	r3, #87	; 0x57
   2c032:	e7da      	b.n	2bfea <encode_uint+0x40>
		} else if (radix == 16) {
   2c034:	2d10      	cmp	r5, #16
   2c036:	d1ea      	bne.n	2c00e <encode_uint+0x64>
			conv->altform_0c = true;
   2c038:	78a3      	ldrb	r3, [r4, #2]
   2c03a:	f043 0310 	orr.w	r3, r3, #16
   2c03e:	e7e5      	b.n	2c00c <encode_uint+0x62>

0002c040 <outs>:
{
   2c040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c044:	4607      	mov	r7, r0
   2c046:	4688      	mov	r8, r1
   2c048:	4615      	mov	r5, r2
   2c04a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2c04c:	4614      	mov	r4, r2
   2c04e:	42b4      	cmp	r4, r6
   2c050:	eba4 0005 	sub.w	r0, r4, r5
   2c054:	d302      	bcc.n	2c05c <outs+0x1c>
   2c056:	b93e      	cbnz	r6, 2c068 <outs+0x28>
   2c058:	7823      	ldrb	r3, [r4, #0]
   2c05a:	b12b      	cbz	r3, 2c068 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   2c05c:	f814 0b01 	ldrb.w	r0, [r4], #1
   2c060:	4641      	mov	r1, r8
   2c062:	47b8      	blx	r7
		if (rc < 0) {
   2c064:	2800      	cmp	r0, #0
   2c066:	daf2      	bge.n	2c04e <outs+0xe>
}
   2c068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c06c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2c06c:	4770      	bx	lr

0002c06e <z_impl_flash_write>:
{
   2c06e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   2c072:	6886      	ldr	r6, [r0, #8]
{
   2c074:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   2c076:	68f3      	ldr	r3, [r6, #12]
{
   2c078:	4605      	mov	r5, r0
   2c07a:	460f      	mov	r7, r1
   2c07c:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   2c07e:	b95b      	cbnz	r3, 2c098 <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   2c080:	6874      	ldr	r4, [r6, #4]
   2c082:	464b      	mov	r3, r9
   2c084:	4642      	mov	r2, r8
   2c086:	4639      	mov	r1, r7
   2c088:	4628      	mov	r0, r5
   2c08a:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   2c08c:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   2c08e:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   2c090:	b943      	cbnz	r3, 2c0a4 <z_impl_flash_write+0x36>
}
   2c092:	4620      	mov	r0, r4
   2c094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   2c098:	2100      	movs	r1, #0
   2c09a:	4798      	blx	r3
		if (rc) {
   2c09c:	4604      	mov	r4, r0
   2c09e:	2800      	cmp	r0, #0
   2c0a0:	d0ee      	beq.n	2c080 <z_impl_flash_write+0x12>
   2c0a2:	e7f6      	b.n	2c092 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   2c0a4:	2101      	movs	r1, #1
   2c0a6:	4628      	mov	r0, r5
   2c0a8:	4798      	blx	r3
   2c0aa:	e7f2      	b.n	2c092 <z_impl_flash_write+0x24>

0002c0ac <nvs_flash_rd>:
{
   2c0ac:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2c0ae:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c0b0:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2c0b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c0b4:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2c0b6:	fa16 f181 	uxtah	r1, r6, r1
   2c0ba:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   2c0be:	6884      	ldr	r4, [r0, #8]
   2c0c0:	6824      	ldr	r4, [r4, #0]
   2c0c2:	46a4      	mov	ip, r4
}
   2c0c4:	bc70      	pop	{r4, r5, r6}
   2c0c6:	4760      	bx	ip

0002c0c8 <nvs_flash_block_cmp>:
{
   2c0c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c0cc:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2c0ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2c0d0:	681d      	ldr	r5, [r3, #0]
   2c0d2:	426d      	negs	r5, r5
{
   2c0d4:	b089      	sub	sp, #36	; 0x24
   2c0d6:	4681      	mov	r9, r0
   2c0d8:	460e      	mov	r6, r1
   2c0da:	4617      	mov	r7, r2
	block_size =
   2c0dc:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2c0e0:	b91c      	cbnz	r4, 2c0ea <nvs_flash_block_cmp+0x22>
	return 0;
   2c0e2:	4620      	mov	r0, r4
}
   2c0e4:	b009      	add	sp, #36	; 0x24
   2c0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2c0ea:	42ac      	cmp	r4, r5
   2c0ec:	46a0      	mov	r8, r4
   2c0ee:	bf28      	it	cs
   2c0f0:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2c0f2:	4643      	mov	r3, r8
   2c0f4:	466a      	mov	r2, sp
   2c0f6:	4631      	mov	r1, r6
   2c0f8:	4648      	mov	r0, r9
   2c0fa:	f7ff ffd7 	bl	2c0ac <nvs_flash_rd>
		if (rc) {
   2c0fe:	2800      	cmp	r0, #0
   2c100:	d1f0      	bne.n	2c0e4 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2c102:	4642      	mov	r2, r8
   2c104:	4669      	mov	r1, sp
   2c106:	4638      	mov	r0, r7
   2c108:	f000 fdb0 	bl	2cc6c <memcmp>
		if (rc) {
   2c10c:	b920      	cbnz	r0, 2c118 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2c10e:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2c112:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2c114:	4447      	add	r7, r8
   2c116:	e7e3      	b.n	2c0e0 <nvs_flash_block_cmp+0x18>
			return 1;
   2c118:	2001      	movs	r0, #1
   2c11a:	e7e3      	b.n	2c0e4 <nvs_flash_block_cmp+0x1c>

0002c11c <nvs_flash_cmp_const>:
{
   2c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c120:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2c122:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2c124:	681d      	ldr	r5, [r3, #0]
   2c126:	426d      	negs	r5, r5
{
   2c128:	b088      	sub	sp, #32
	block_size =
   2c12a:	f005 0520 	and.w	r5, r5, #32
{
   2c12e:	4607      	mov	r7, r0
   2c130:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2c132:	4668      	mov	r0, sp
{
   2c134:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2c136:	462a      	mov	r2, r5
   2c138:	f000 fdca 	bl	2ccd0 <memset>
	while (len) {
   2c13c:	b91c      	cbnz	r4, 2c146 <nvs_flash_cmp_const+0x2a>
	return 0;
   2c13e:	4620      	mov	r0, r4
}
   2c140:	b008      	add	sp, #32
   2c142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2c146:	42ac      	cmp	r4, r5
   2c148:	46a0      	mov	r8, r4
   2c14a:	bf28      	it	cs
   2c14c:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2c14e:	4643      	mov	r3, r8
   2c150:	466a      	mov	r2, sp
   2c152:	4631      	mov	r1, r6
   2c154:	4638      	mov	r0, r7
   2c156:	f7ff ffb7 	bl	2c0c8 <nvs_flash_block_cmp>
		if (rc) {
   2c15a:	2800      	cmp	r0, #0
   2c15c:	d1f0      	bne.n	2c140 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2c15e:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2c162:	4446      	add	r6, r8
   2c164:	e7ea      	b.n	2c13c <nvs_flash_cmp_const+0x20>

0002c166 <nvs_flash_erase_sector>:
{
   2c166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c16a:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   2c16e:	6806      	ldr	r6, [r0, #0]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2c170:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   2c172:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c176:	0c09      	lsrs	r1, r1, #16
{
   2c178:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   2c17a:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c17e:	fb0a 6601 	mla	r6, sl, r1, r6
	const struct flash_driver_api *api =
   2c182:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   2c186:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2c18a:	b9b3      	cbnz	r3, 2c1ba <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   2c18c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2c190:	4652      	mov	r2, sl
   2c192:	4631      	mov	r1, r6
   2c194:	4638      	mov	r0, r7
   2c196:	4798      	blx	r3
	if (api->write_protection != NULL) {
   2c198:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   2c19c:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   2c19e:	b9ab      	cbnz	r3, 2c1cc <nvs_flash_erase_sector+0x66>
	if (rc) {
   2c1a0:	b98c      	cbnz	r4, 2c1c6 <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2c1a2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   2c1a4:	89ab      	ldrh	r3, [r5, #12]
   2c1a6:	7912      	ldrb	r2, [r2, #4]
   2c1a8:	4641      	mov	r1, r8
   2c1aa:	4628      	mov	r0, r5
   2c1ac:	f7ff ffb6 	bl	2c11c <nvs_flash_cmp_const>
		rc = -ENXIO;
   2c1b0:	1e04      	subs	r4, r0, #0
   2c1b2:	bf18      	it	ne
   2c1b4:	f06f 0405 	mvnne.w	r4, #5
   2c1b8:	e005      	b.n	2c1c6 <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   2c1ba:	2100      	movs	r1, #0
   2c1bc:	4638      	mov	r0, r7
   2c1be:	4798      	blx	r3
		if (rc) {
   2c1c0:	4604      	mov	r4, r0
   2c1c2:	2800      	cmp	r0, #0
   2c1c4:	d0e2      	beq.n	2c18c <nvs_flash_erase_sector+0x26>
}
   2c1c6:	4620      	mov	r0, r4
   2c1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   2c1cc:	2101      	movs	r1, #1
   2c1ce:	4638      	mov	r0, r7
   2c1d0:	4798      	blx	r3
   2c1d2:	e7e5      	b.n	2c1a0 <nvs_flash_erase_sector+0x3a>

0002c1d4 <nvs_ate_crc8_update>:
{
   2c1d4:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2c1d6:	4601      	mov	r1, r0
{
   2c1d8:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2c1da:	2207      	movs	r2, #7
   2c1dc:	20ff      	movs	r0, #255	; 0xff
   2c1de:	f7f0 fed7 	bl	1cf90 <crc8_ccitt>
	entry->crc8 = crc8;
   2c1e2:	71e0      	strb	r0, [r4, #7]
}
   2c1e4:	bd10      	pop	{r4, pc}

0002c1e6 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2c1e6:	7800      	ldrb	r0, [r0, #0]
   2c1e8:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2c1ea:	bf81      	itttt	hi
   2c1ec:	1809      	addhi	r1, r1, r0
   2c1ee:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2c1f2:	4240      	neghi	r0, r0
   2c1f4:	4001      	andhi	r1, r0
}
   2c1f6:	4608      	mov	r0, r1
   2c1f8:	4770      	bx	lr

0002c1fa <nvs_ate_valid>:
{
   2c1fa:	b570      	push	{r4, r5, r6, lr}
   2c1fc:	460c      	mov	r4, r1
   2c1fe:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c200:	2108      	movs	r1, #8
   2c202:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2c204:	f7ff ffef 	bl	2c1e6 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2c208:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c20a:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2c20c:	4621      	mov	r1, r4
   2c20e:	20ff      	movs	r0, #255	; 0xff
   2c210:	f7f0 febe 	bl	1cf90 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2c214:	79e3      	ldrb	r3, [r4, #7]
   2c216:	4283      	cmp	r3, r0
   2c218:	d107      	bne.n	2c22a <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2c21a:	89a8      	ldrh	r0, [r5, #12]
   2c21c:	8863      	ldrh	r3, [r4, #2]
   2c21e:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2c220:	4283      	cmp	r3, r0
   2c222:	bf2c      	ite	cs
   2c224:	2000      	movcs	r0, #0
   2c226:	2001      	movcc	r0, #1
}
   2c228:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2c22a:	2000      	movs	r0, #0
   2c22c:	e7fc      	b.n	2c228 <nvs_ate_valid+0x2e>

0002c22e <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2c22e:	680b      	ldr	r3, [r1, #0]
   2c230:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2c234:	0c1a      	lsrs	r2, r3, #16
   2c236:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2c23a:	bf08      	it	eq
   2c23c:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2c240:	600b      	str	r3, [r1, #0]
}
   2c242:	4770      	bx	lr

0002c244 <nvs_close_ate_valid>:
{
   2c244:	b538      	push	{r3, r4, r5, lr}
   2c246:	4605      	mov	r5, r0
   2c248:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2c24a:	f7ff ffd6 	bl	2c1fa <nvs_ate_valid>
   2c24e:	b1a0      	cbz	r0, 2c27a <nvs_close_ate_valid+0x36>
   2c250:	88a0      	ldrh	r0, [r4, #4]
   2c252:	b998      	cbnz	r0, 2c27c <nvs_close_ate_valid+0x38>
   2c254:	8822      	ldrh	r2, [r4, #0]
   2c256:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c25a:	429a      	cmp	r2, r3
   2c25c:	d10d      	bne.n	2c27a <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c25e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2c260:	2108      	movs	r1, #8
   2c262:	f7ff ffc0 	bl	2c1e6 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2c266:	8862      	ldrh	r2, [r4, #2]
   2c268:	89ab      	ldrh	r3, [r5, #12]
   2c26a:	1a9b      	subs	r3, r3, r2
   2c26c:	fbb3 f2f0 	udiv	r2, r3, r0
   2c270:	fb02 3010 	mls	r0, r2, r0, r3
   2c274:	fab0 f080 	clz	r0, r0
   2c278:	0940      	lsrs	r0, r0, #5
}
   2c27a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2c27c:	2000      	movs	r0, #0
   2c27e:	e7fc      	b.n	2c27a <nvs_close_ate_valid+0x36>

0002c280 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2c280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c284:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2c286:	4605      	mov	r5, r0
	offset += addr & ADDR_OFFS_MASK;
   2c288:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2c28a:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c28c:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2c28e:	fa10 f181 	uxtah	r1, r0, r1
   2c292:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2c296:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2c298:	681e      	ldr	r6, [r3, #0]
   2c29a:	4276      	negs	r6, r6
	if (blen > 0) {
   2c29c:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2c29e:	b088      	sub	sp, #32
   2c2a0:	4690      	mov	r8, r2
	if (blen > 0) {
   2c2a2:	d008      	beq.n	2c2b6 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2c2a4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   2c2a6:	4633      	mov	r3, r6
   2c2a8:	4639      	mov	r1, r7
   2c2aa:	f7ff fee0 	bl	2c06e <z_impl_flash_write>
		if (rc) {
   2c2ae:	b9b8      	cbnz	r0, 2c2e0 <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   2c2b0:	1ba4      	subs	r4, r4, r6
		offset += blen;
   2c2b2:	4437      	add	r7, r6
		data8 += blen;
   2c2b4:	44b0      	add	r8, r6
	if (len) {
   2c2b6:	b1b4      	cbz	r4, 2c2e6 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   2c2b8:	4622      	mov	r2, r4
   2c2ba:	4641      	mov	r1, r8
   2c2bc:	4668      	mov	r0, sp
   2c2be:	f000 fcfc 	bl	2ccba <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2c2c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2c2c4:	681a      	ldr	r2, [r3, #0]
   2c2c6:	7919      	ldrb	r1, [r3, #4]
   2c2c8:	1b12      	subs	r2, r2, r4
   2c2ca:	eb0d 0004 	add.w	r0, sp, r4
   2c2ce:	f000 fcff 	bl	2ccd0 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2c2d2:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   2c2d6:	681b      	ldr	r3, [r3, #0]
   2c2d8:	466a      	mov	r2, sp
   2c2da:	4639      	mov	r1, r7
   2c2dc:	f7ff fec7 	bl	2c06e <z_impl_flash_write>
}
   2c2e0:	b008      	add	sp, #32
   2c2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   2c2e6:	4620      	mov	r0, r4
   2c2e8:	e7fa      	b.n	2c2e0 <nvs_flash_al_wrt.part.0+0x60>

0002c2ea <nvs_flash_ate_wrt>:
{
   2c2ea:	b510      	push	{r4, lr}
   2c2ec:	460a      	mov	r2, r1
	if (!len) {
   2c2ee:	2308      	movs	r3, #8
   2c2f0:	6841      	ldr	r1, [r0, #4]
{
   2c2f2:	4604      	mov	r4, r0
   2c2f4:	f7ff ffc4 	bl	2c280 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2c2f8:	2108      	movs	r1, #8
   2c2fa:	4603      	mov	r3, r0
   2c2fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2c2fe:	f7ff ff72 	bl	2c1e6 <nvs_al_size.isra.0>
   2c302:	6862      	ldr	r2, [r4, #4]
   2c304:	1a12      	subs	r2, r2, r0
   2c306:	6062      	str	r2, [r4, #4]
}
   2c308:	4618      	mov	r0, r3
   2c30a:	bd10      	pop	{r4, pc}

0002c30c <nvs_add_gc_done_ate>:
{
   2c30c:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2c30e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c312:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2c316:	2300      	movs	r3, #0
{
   2c318:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2c31a:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2c31e:	6883      	ldr	r3, [r0, #8]
   2c320:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2c324:	4668      	mov	r0, sp
   2c326:	f7ff ff55 	bl	2c1d4 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2c32a:	4669      	mov	r1, sp
   2c32c:	4620      	mov	r0, r4
   2c32e:	f7ff ffdc 	bl	2c2ea <nvs_flash_ate_wrt>
}
   2c332:	b002      	add	sp, #8
   2c334:	bd10      	pop	{r4, pc}

0002c336 <nvs_prev_ate>:
{
   2c336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c338:	4605      	mov	r5, r0
   2c33a:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c33c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2c33e:	2108      	movs	r1, #8
   2c340:	f7ff ff51 	bl	2c1e6 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2c344:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c346:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2c348:	2308      	movs	r3, #8
   2c34a:	4628      	mov	r0, r5
   2c34c:	f7ff feae 	bl	2c0ac <nvs_flash_rd>
	if (rc) {
   2c350:	4604      	mov	r4, r0
   2c352:	2800      	cmp	r0, #0
   2c354:	d138      	bne.n	2c3c8 <nvs_prev_ate+0x92>
	*addr += ate_size;
   2c356:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2c358:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   2c35a:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2c35c:	b29a      	uxth	r2, r3
   2c35e:	1bc7      	subs	r7, r0, r7
   2c360:	42ba      	cmp	r2, r7
	*addr += ate_size;
   2c362:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2c364:	d130      	bne.n	2c3c8 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2c366:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2c368:	bf03      	ittte	eq
   2c36a:	89e9      	ldrheq	r1, [r5, #14]
   2c36c:	f101 31ff 	addeq.w	r1, r1, #4294967295
   2c370:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2c374:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   2c378:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2c37a:	2308      	movs	r3, #8
   2c37c:	466a      	mov	r2, sp
   2c37e:	4628      	mov	r0, r5
   2c380:	f7ff fe94 	bl	2c0ac <nvs_flash_rd>
	if (rc) {
   2c384:	4604      	mov	r4, r0
   2c386:	b9f8      	cbnz	r0, 2c3c8 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2c388:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2c38a:	466a      	mov	r2, sp
   2c38c:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2c38e:	4603      	mov	r3, r0
		if (data8[i] != value) {
   2c390:	f812 0b01 	ldrb.w	r0, [r2], #1
   2c394:	4281      	cmp	r1, r0
   2c396:	d10c      	bne.n	2c3b2 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2c398:	3301      	adds	r3, #1
   2c39a:	2b08      	cmp	r3, #8
   2c39c:	d1f8      	bne.n	2c390 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   2c39e:	686b      	ldr	r3, [r5, #4]
   2c3a0:	e005      	b.n	2c3ae <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   2c3a2:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   2c3a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2c3a8:	0c1b      	lsrs	r3, r3, #16
   2c3aa:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2c3ac:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2c3ae:	6033      	str	r3, [r6, #0]
		return 0;
   2c3b0:	e00a      	b.n	2c3c8 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2c3b2:	4669      	mov	r1, sp
   2c3b4:	4628      	mov	r0, r5
   2c3b6:	f7ff ff45 	bl	2c244 <nvs_close_ate_valid>
   2c3ba:	2800      	cmp	r0, #0
   2c3bc:	d1f1      	bne.n	2c3a2 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   2c3be:	4631      	mov	r1, r6
   2c3c0:	4628      	mov	r0, r5
   2c3c2:	f7f1 facd 	bl	1d960 <nvs_recover_last_ate>
   2c3c6:	4604      	mov	r4, r0
}
   2c3c8:	4620      	mov	r0, r4
   2c3ca:	b003      	add	sp, #12
   2c3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c3ce <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   2c3ce:	2300      	movs	r3, #0
   2c3d0:	461a      	mov	r2, r3
   2c3d2:	f7f1 bd25 	b.w	1de20 <nvs_write>

0002c3d6 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   2c3d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2c3da:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   2c3dc:	7c03      	ldrb	r3, [r0, #16]
{
   2c3de:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   2c3e2:	4604      	mov	r4, r0
   2c3e4:	460f      	mov	r7, r1
   2c3e6:	4690      	mov	r8, r2
	if (!fs->ready) {
   2c3e8:	2b00      	cmp	r3, #0
   2c3ea:	d045      	beq.n	2c478 <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c3ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2c3ee:	2108      	movs	r1, #8
   2c3f0:	f7ff fef9 	bl	2c1e6 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   2c3f4:	89a3      	ldrh	r3, [r4, #12]
   2c3f6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   2c3fa:	429e      	cmp	r6, r3
   2c3fc:	d83f      	bhi.n	2c47e <nvs_read_hist+0xa8>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   2c3fe:	6863      	ldr	r3, [r4, #4]
   2c400:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   2c402:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2c406:	aa02      	add	r2, sp, #8
   2c408:	a901      	add	r1, sp, #4
   2c40a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   2c40c:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2c40e:	f7ff ff92 	bl	2c336 <nvs_prev_ate>
		if (rc) {
   2c412:	bb38      	cbnz	r0, 2c464 <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   2c414:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2c418:	42bb      	cmp	r3, r7
   2c41a:	d108      	bne.n	2c42e <nvs_read_hist+0x58>
   2c41c:	a902      	add	r1, sp, #8
   2c41e:	4620      	mov	r0, r4
   2c420:	f7ff feeb 	bl	2c1fa <nvs_ate_valid>
   2c424:	b118      	cbz	r0, 2c42e <nvs_read_hist+0x58>
			cnt_his++;
   2c426:	f10a 0a01 	add.w	sl, sl, #1
   2c42a:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   2c42e:	6862      	ldr	r2, [r4, #4]
   2c430:	9b01      	ldr	r3, [sp, #4]
   2c432:	429a      	cmp	r2, r3
   2c434:	d019      	beq.n	2c46a <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   2c436:	45d1      	cmp	r9, sl
   2c438:	d2e5      	bcs.n	2c406 <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   2c43a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   2c43e:	b1c3      	cbz	r3, 2c472 <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   2c440:	45d1      	cmp	r9, sl
   2c442:	d816      	bhi.n	2c472 <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   2c444:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   2c448:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   2c44a:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   2c44c:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   2c450:	bf28      	it	cs
   2c452:	4633      	movcs	r3, r6
   2c454:	4642      	mov	r2, r8
   2c456:	4429      	add	r1, r5
   2c458:	4620      	mov	r0, r4
   2c45a:	f7ff fe27 	bl	2c0ac <nvs_flash_rd>
	if (rc) {
   2c45e:	b908      	cbnz	r0, 2c464 <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   2c460:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   2c464:	b004      	add	sp, #16
   2c466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   2c46a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2c46e:	42bb      	cmp	r3, r7
   2c470:	d0e3      	beq.n	2c43a <nvs_read_hist+0x64>
		return -ENOENT;
   2c472:	f06f 0001 	mvn.w	r0, #1
   2c476:	e7f5      	b.n	2c464 <nvs_read_hist+0x8e>
		return -EACCES;
   2c478:	f06f 000c 	mvn.w	r0, #12
   2c47c:	e7f2      	b.n	2c464 <nvs_read_hist+0x8e>
		return -EINVAL;
   2c47e:	f06f 0015 	mvn.w	r0, #21
   2c482:	e7ef      	b.n	2c464 <nvs_read_hist+0x8e>

0002c484 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2c484:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2c486:	2400      	movs	r4, #0
   2c488:	9400      	str	r4, [sp, #0]
   2c48a:	f7ff ffa4 	bl	2c3d6 <nvs_read_hist>
	return rc;
}
   2c48e:	b002      	add	sp, #8
   2c490:	bd10      	pop	{r4, pc}

0002c492 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   2c492:	b570      	push	{r4, r5, r6, lr}
   2c494:	4604      	mov	r4, r0
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   2c496:	f500 7001 	add.w	r0, r0, #516	; 0x204
{
   2c49a:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   2c49c:	f000 f936 	bl	2c70c <stream_flash_buffered_write>
   2c4a0:	4605      	mov	r5, r0
	if (!flush) {
   2c4a2:	b136      	cbz	r6, 2c4b2 <flash_img_buffered_write+0x20>
	if (rc) {
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   2c4a4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   2c4a8:	f000 f826 	bl	2c4f8 <flash_area_close>
	ctx->flash_area = NULL;
   2c4ac:	2300      	movs	r3, #0
   2c4ae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	return rc;
}
   2c4b2:	4628      	mov	r0, r5
   2c4b4:	bd70      	pop	{r4, r5, r6, pc}

0002c4b6 <flash_img_init_id>:
{
	return stream_flash_bytes_written(&ctx->stream);
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   2c4b6:	b530      	push	{r4, r5, lr}
   2c4b8:	4605      	mov	r5, r0
   2c4ba:	b085      	sub	sp, #20
   2c4bc:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   2c4be:	f505 7100 	add.w	r1, r5, #512	; 0x200
   2c4c2:	f7f1 fd81 	bl	1dfc8 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   2c4c6:	4604      	mov	r4, r0
   2c4c8:	b998      	cbnz	r0, 2c4f2 <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   2c4ca:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   2c4ce:	f000 f89b 	bl	2c608 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   2c4d2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   2c4d6:	9402      	str	r4, [sp, #8]
   2c4d8:	689a      	ldr	r2, [r3, #8]
   2c4da:	9201      	str	r2, [sp, #4]
   2c4dc:	685b      	ldr	r3, [r3, #4]
   2c4de:	9300      	str	r3, [sp, #0]
	flash_dev = flash_area_get_device(ctx->flash_area);
   2c4e0:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   2c4e2:	f44f 7300 	mov.w	r3, #512	; 0x200
   2c4e6:	462a      	mov	r2, r5
   2c4e8:	f505 7001 	add.w	r0, r5, #516	; 0x204
   2c4ec:	f7f1 fd8a 	bl	1e004 <stream_flash_init>
   2c4f0:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   2c4f2:	4620      	mov	r0, r4
   2c4f4:	b005      	add	sp, #20
   2c4f6:	bd30      	pop	{r4, r5, pc}

0002c4f8 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2c4f8:	4770      	bx	lr

0002c4fa <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   2c4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   2c4fe:	1e0c      	subs	r4, r1, #0
   2c500:	4605      	mov	r5, r0
   2c502:	4617      	mov	r7, r2
   2c504:	461e      	mov	r6, r3
   2c506:	db10      	blt.n	2c52a <flash_area_read+0x30>
   2c508:	6882      	ldr	r2, [r0, #8]
   2c50a:	18e3      	adds	r3, r4, r3
   2c50c:	4293      	cmp	r3, r2
   2c50e:	d80c      	bhi.n	2c52a <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   2c510:	68c0      	ldr	r0, [r0, #12]
   2c512:	f7fb f997 	bl	27844 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   2c516:	6869      	ldr	r1, [r5, #4]
   2c518:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   2c51a:	6883      	ldr	r3, [r0, #8]
   2c51c:	681c      	ldr	r4, [r3, #0]
   2c51e:	463a      	mov	r2, r7
   2c520:	4633      	mov	r3, r6
   2c522:	46a4      	mov	ip, r4
}
   2c524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c528:	4760      	bx	ip
   2c52a:	f06f 0015 	mvn.w	r0, #21
   2c52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c532 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   2c532:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c536:	f1b1 0900 	subs.w	r9, r1, #0
   2c53a:	4680      	mov	r8, r0
   2c53c:	4617      	mov	r7, r2
   2c53e:	461e      	mov	r6, r3
   2c540:	db27      	blt.n	2c592 <flash_area_write+0x60>
   2c542:	6882      	ldr	r2, [r0, #8]
   2c544:	444b      	add	r3, r9
   2c546:	4293      	cmp	r3, r2
   2c548:	d823      	bhi.n	2c592 <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   2c54a:	68c0      	ldr	r0, [r0, #12]
   2c54c:	f7fb f97a 	bl	27844 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   2c550:	f8d8 1004 	ldr.w	r1, [r8, #4]
   2c554:	4605      	mov	r5, r0
   2c556:	4489      	add	r9, r1
	const struct flash_driver_api *api =
   2c558:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   2c55c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2c560:	b96b      	cbnz	r3, 2c57e <flash_area_write+0x4c>
	rc = api->write(dev, offset, data, len);
   2c562:	f8d8 4004 	ldr.w	r4, [r8, #4]
   2c566:	4633      	mov	r3, r6
   2c568:	463a      	mov	r2, r7
   2c56a:	4649      	mov	r1, r9
   2c56c:	4628      	mov	r0, r5
   2c56e:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   2c570:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
   2c574:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   2c576:	b943      	cbnz	r3, 2c58a <flash_area_write+0x58>

	return rc;
}
   2c578:	4620      	mov	r0, r4
   2c57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   2c57e:	2100      	movs	r1, #0
   2c580:	4798      	blx	r3
		if (rc) {
   2c582:	4604      	mov	r4, r0
   2c584:	2800      	cmp	r0, #0
   2c586:	d0ec      	beq.n	2c562 <flash_area_write+0x30>
   2c588:	e7f6      	b.n	2c578 <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
   2c58a:	2101      	movs	r1, #1
   2c58c:	4628      	mov	r0, r5
   2c58e:	4798      	blx	r3
   2c590:	e7f2      	b.n	2c578 <flash_area_write+0x46>
		return -EINVAL;
   2c592:	f06f 0415 	mvn.w	r4, #21
   2c596:	e7ef      	b.n	2c578 <flash_area_write+0x46>

0002c598 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   2c598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c59c:	1e0c      	subs	r4, r1, #0
   2c59e:	4605      	mov	r5, r0
   2c5a0:	4617      	mov	r7, r2
   2c5a2:	db25      	blt.n	2c5f0 <flash_area_erase+0x58>
   2c5a4:	18a3      	adds	r3, r4, r2
   2c5a6:	6882      	ldr	r2, [r0, #8]
   2c5a8:	4293      	cmp	r3, r2
   2c5aa:	d821      	bhi.n	2c5f0 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   2c5ac:	68c0      	ldr	r0, [r0, #12]
   2c5ae:	f7fb f949 	bl	27844 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   2c5b2:	686d      	ldr	r5, [r5, #4]
   2c5b4:	4606      	mov	r6, r0
   2c5b6:	4425      	add	r5, r4
	const struct flash_driver_api *api =
   2c5b8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   2c5bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2c5c0:	b963      	cbnz	r3, 2c5dc <flash_area_erase+0x44>
	rc = api->erase(dev, offset, size);
   2c5c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2c5c6:	463a      	mov	r2, r7
   2c5c8:	4629      	mov	r1, r5
   2c5ca:	4630      	mov	r0, r6
   2c5cc:	4798      	blx	r3
	if (api->write_protection != NULL) {
   2c5ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
   2c5d2:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   2c5d4:	b943      	cbnz	r3, 2c5e8 <flash_area_erase+0x50>

	return rc;
}
   2c5d6:	4620      	mov	r0, r4
   2c5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
   2c5dc:	2100      	movs	r1, #0
   2c5de:	4798      	blx	r3
		if (rc) {
   2c5e0:	4604      	mov	r4, r0
   2c5e2:	2800      	cmp	r0, #0
   2c5e4:	d0ed      	beq.n	2c5c2 <flash_area_erase+0x2a>
   2c5e6:	e7f6      	b.n	2c5d6 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
   2c5e8:	2101      	movs	r1, #1
   2c5ea:	4630      	mov	r0, r6
   2c5ec:	4798      	blx	r3
   2c5ee:	e7f2      	b.n	2c5d6 <flash_area_erase+0x3e>
		return -EINVAL;
   2c5f0:	f06f 0415 	mvn.w	r4, #21
   2c5f4:	e7ef      	b.n	2c5d6 <flash_area_erase+0x3e>

0002c5f6 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   2c5f6:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   2c5f8:	68c0      	ldr	r0, [r0, #12]
   2c5fa:	f7fb f923 	bl	27844 <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   2c5fe:	6883      	ldr	r3, [r0, #8]
   2c600:	691b      	ldr	r3, [r3, #16]
   2c602:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   2c604:	6800      	ldr	r0, [r0, #0]
   2c606:	bd08      	pop	{r3, pc}

0002c608 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   2c608:	68c0      	ldr	r0, [r0, #12]
   2c60a:	f7fb b91b 	b.w	27844 <z_impl_device_get_binding>

0002c60e <flash_area_erased_val>:
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   2c60e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   2c610:	68c0      	ldr	r0, [r0, #12]
   2c612:	f7fb f917 	bl	27844 <z_impl_device_get_binding>
	return api->get_parameters(dev);
   2c616:	6883      	ldr	r3, [r0, #8]
   2c618:	691b      	ldr	r3, [r3, #16]
   2c61a:	4798      	blx	r3

	return param->erase_value;
}
   2c61c:	7900      	ldrb	r0, [r0, #4]
   2c61e:	bd08      	pop	{r3, pc}

0002c620 <z_impl_flash_get_write_block_size>:
{
   2c620:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   2c622:	6883      	ldr	r3, [r0, #8]
   2c624:	691b      	ldr	r3, [r3, #16]
   2c626:	4798      	blx	r3
}
   2c628:	6800      	ldr	r0, [r0, #0]
   2c62a:	bd08      	pop	{r3, pc}

0002c62c <find_flash_total_size>:
	if (ctx->buf_len > info->size) {
   2c62c:	6843      	ldr	r3, [r0, #4]
   2c62e:	680a      	ldr	r2, [r1, #0]
   2c630:	429a      	cmp	r2, r3
	ctx->total_size += info->size;
   2c632:	bf97      	itett	ls
   2c634:	684a      	ldrls	r2, [r1, #4]
		ctx->total_size = 0;
   2c636:	2300      	movhi	r3, #0
	ctx->total_size += info->size;
   2c638:	189b      	addls	r3, r3, r2
	return true;
   2c63a:	2001      	movls	r0, #1
		return false;
   2c63c:	bf88      	it	hi
   2c63e:	4618      	movhi	r0, r3
   2c640:	604b      	str	r3, [r1, #4]
}
   2c642:	4770      	bx	lr

0002c644 <flash_sync>:
{
   2c644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (ctx->buf_bytes == 0) {
   2c648:	6885      	ldr	r5, [r0, #8]
{
   2c64a:	4604      	mov	r4, r0
	if (ctx->buf_bytes == 0) {
   2c64c:	2d00      	cmp	r5, #0
   2c64e:	d03d      	beq.n	2c6cc <flash_sync+0x88>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   2c650:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
	fill_length = flash_get_write_block_size(ctx->fdev);
   2c654:	68c0      	ldr	r0, [r0, #12]
	return z_impl_flash_get_write_block_size(dev);
   2c656:	f7ff ffe3 	bl	2c620 <z_impl_flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   2c65a:	68a2      	ldr	r2, [r4, #8]
   2c65c:	fbb2 f5f0 	udiv	r5, r2, r0
   2c660:	fb00 2515 	mls	r5, r0, r5, r2
   2c664:	b15d      	cbz	r5, 2c67e <flash_sync+0x3a>
		fill_length -= ctx->buf_bytes % fill_length;
   2c666:	1b45      	subs	r5, r0, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   2c668:	68e0      	ldr	r0, [r4, #12]
	return api->get_parameters(dev);
   2c66a:	6883      	ldr	r3, [r0, #8]
   2c66c:	691b      	ldr	r3, [r3, #16]
   2c66e:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   2c670:	68a3      	ldr	r3, [r4, #8]
   2c672:	7901      	ldrb	r1, [r0, #4]
   2c674:	6820      	ldr	r0, [r4, #0]
   2c676:	462a      	mov	r2, r5
   2c678:	4418      	add	r0, r3
   2c67a:	f000 fb29 	bl	2ccd0 <memset>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   2c67e:	4437      	add	r7, r6
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   2c680:	68a6      	ldr	r6, [r4, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   2c682:	f8d4 800c 	ldr.w	r8, [r4, #12]
   2c686:	f8d4 a000 	ldr.w	sl, [r4]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   2c68a:	442e      	add	r6, r5
	const struct flash_driver_api *api =
   2c68c:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (api->write_protection != NULL) {
   2c690:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2c694:	b9a3      	cbnz	r3, 2c6c0 <flash_sync+0x7c>
	rc = api->write(dev, offset, data, len);
   2c696:	f8d9 5004 	ldr.w	r5, [r9, #4]
   2c69a:	4633      	mov	r3, r6
   2c69c:	4652      	mov	r2, sl
   2c69e:	4639      	mov	r1, r7
   2c6a0:	4640      	mov	r0, r8
   2c6a2:	47a8      	blx	r5
	if (api->write_protection != NULL) {
   2c6a4:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->write(dev, offset, data, len);
   2c6a8:	4605      	mov	r5, r0
	if (api->write_protection != NULL) {
   2c6aa:	b993      	cbnz	r3, 2c6d2 <flash_sync+0x8e>
	if (rc != 0) {
   2c6ac:	b975      	cbnz	r5, 2c6cc <flash_sync+0x88>
	if (ctx->callback) {
   2c6ae:	69e3      	ldr	r3, [r4, #28]
   2c6b0:	bb53      	cbnz	r3, 2c708 <flash_sync+0xc4>
	ctx->bytes_written += ctx->buf_bytes;
   2c6b2:	6923      	ldr	r3, [r4, #16]
   2c6b4:	68a2      	ldr	r2, [r4, #8]
   2c6b6:	4413      	add	r3, r2
   2c6b8:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   2c6ba:	2300      	movs	r3, #0
   2c6bc:	60a3      	str	r3, [r4, #8]
	return rc;
   2c6be:	e005      	b.n	2c6cc <flash_sync+0x88>
		rc = api->write_protection(dev, false);
   2c6c0:	2100      	movs	r1, #0
   2c6c2:	4640      	mov	r0, r8
   2c6c4:	4798      	blx	r3
		if (rc) {
   2c6c6:	4605      	mov	r5, r0
   2c6c8:	2800      	cmp	r0, #0
   2c6ca:	d0e4      	beq.n	2c696 <flash_sync+0x52>
}
   2c6cc:	4628      	mov	r0, r5
   2c6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   2c6d2:	2101      	movs	r1, #1
   2c6d4:	4640      	mov	r0, r8
   2c6d6:	4798      	blx	r3
   2c6d8:	e7e8      	b.n	2c6ac <flash_sync+0x68>
			ctx->buf[i] = ~ctx->buf[i];
   2c6da:	5c53      	ldrb	r3, [r2, r1]
   2c6dc:	43db      	mvns	r3, r3
   2c6de:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   2c6e0:	3101      	adds	r1, #1
   2c6e2:	68a3      	ldr	r3, [r4, #8]
   2c6e4:	6822      	ldr	r2, [r4, #0]
   2c6e6:	428b      	cmp	r3, r1
   2c6e8:	d8f7      	bhi.n	2c6da <flash_sync+0x96>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   2c6ea:	68e0      	ldr	r0, [r4, #12]
	return api->read(dev, offset, data, len);
   2c6ec:	6881      	ldr	r1, [r0, #8]
   2c6ee:	680e      	ldr	r6, [r1, #0]
   2c6f0:	4639      	mov	r1, r7
   2c6f2:	47b0      	blx	r6
		if (rc != 0) {
   2c6f4:	b930      	cbnz	r0, 2c704 <flash_sync+0xc0>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   2c6f6:	69e3      	ldr	r3, [r4, #28]
   2c6f8:	68a1      	ldr	r1, [r4, #8]
   2c6fa:	6820      	ldr	r0, [r4, #0]
   2c6fc:	463a      	mov	r2, r7
   2c6fe:	4798      	blx	r3
		if (rc != 0) {
   2c700:	2800      	cmp	r0, #0
   2c702:	d0d6      	beq.n	2c6b2 <flash_sync+0x6e>
   2c704:	4605      	mov	r5, r0
   2c706:	e7e1      	b.n	2c6cc <flash_sync+0x88>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   2c708:	4629      	mov	r1, r5
   2c70a:	e7ea      	b.n	2c6e2 <flash_sync+0x9e>

0002c70c <stream_flash_buffered_write>:
{
   2c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c710:	4689      	mov	r9, r1
   2c712:	4616      	mov	r6, r2
   2c714:	4698      	mov	r8, r3
	if (!ctx) {
   2c716:	4604      	mov	r4, r0
   2c718:	b398      	cbz	r0, 2c782 <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   2c71a:	6882      	ldr	r2, [r0, #8]
   2c71c:	6903      	ldr	r3, [r0, #16]
   2c71e:	4413      	add	r3, r2
   2c720:	6982      	ldr	r2, [r0, #24]
   2c722:	4433      	add	r3, r6
   2c724:	4293      	cmp	r3, r2
   2c726:	d830      	bhi.n	2c78a <stream_flash_buffered_write+0x7e>
	int processed = 0;
   2c728:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   2c72a:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   2c72e:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   2c732:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   2c734:	45ba      	cmp	sl, r7
   2c736:	d215      	bcs.n	2c764 <stream_flash_buffered_write+0x58>
	if (processed < len) {
   2c738:	42b5      	cmp	r5, r6
   2c73a:	d209      	bcs.n	2c750 <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   2c73c:	6823      	ldr	r3, [r4, #0]
   2c73e:	4652      	mov	r2, sl
   2c740:	4418      	add	r0, r3
   2c742:	eb09 0105 	add.w	r1, r9, r5
   2c746:	f000 fab8 	bl	2ccba <memcpy>
		ctx->buf_bytes += len - processed;
   2c74a:	68a3      	ldr	r3, [r4, #8]
   2c74c:	4453      	add	r3, sl
   2c74e:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   2c750:	f1b8 0f00 	cmp.w	r8, #0
   2c754:	d01c      	beq.n	2c790 <stream_flash_buffered_write+0x84>
   2c756:	68a0      	ldr	r0, [r4, #8]
   2c758:	b1a8      	cbz	r0, 2c786 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   2c75a:	4620      	mov	r0, r4
}
   2c75c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   2c760:	f7ff bf70 	b.w	2c644 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   2c764:	6823      	ldr	r3, [r4, #0]
   2c766:	463a      	mov	r2, r7
   2c768:	4418      	add	r0, r3
   2c76a:	eb09 0105 	add.w	r1, r9, r5
   2c76e:	f000 faa4 	bl	2ccba <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   2c772:	6863      	ldr	r3, [r4, #4]
   2c774:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   2c776:	4620      	mov	r0, r4
   2c778:	f7ff ff64 	bl	2c644 <flash_sync>
		if (rc != 0) {
   2c77c:	b918      	cbnz	r0, 2c786 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   2c77e:	443d      	add	r5, r7
   2c780:	e7d3      	b.n	2c72a <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   2c782:	f06f 000d 	mvn.w	r0, #13
}
   2c786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   2c78a:	f06f 000b 	mvn.w	r0, #11
   2c78e:	e7fa      	b.n	2c786 <stream_flash_buffered_write+0x7a>
   2c790:	4640      	mov	r0, r8
   2c792:	e7f8      	b.n	2c786 <stream_flash_buffered_write+0x7a>

0002c794 <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   2c794:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   2c796:	b11b      	cbz	r3, 2c7a0 <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   2c798:	791b      	ldrb	r3, [r3, #4]
   2c79a:	700b      	strb	r3, [r1, #0]

	return 0;
   2c79c:	2000      	movs	r0, #0
   2c79e:	4770      	bx	lr
		return -ENOSYS;
   2c7a0:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   2c7a4:	4770      	bx	lr

0002c7a6 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   2c7a6:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   2c7a8:	b130      	cbz	r0, 2c7b8 <pm_device_is_busy+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c7aa:	f3bf 8f5b 	dmb	ish
   2c7ae:	6800      	ldr	r0, [r0, #0]
   2c7b0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c7b4:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
   2c7b8:	4770      	bx	lr

0002c7ba <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   2c7ba:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   2c7bc:	b130      	cbz	r0, 2c7cc <pm_device_wakeup_is_enabled+0x12>
   2c7be:	f3bf 8f5b 	dmb	ish
   2c7c2:	6800      	ldr	r0, [r0, #0]
   2c7c4:	f3bf 8f5b 	dmb	ish
   2c7c8:	f3c0 0080 	ubfx	r0, r0, #2, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   2c7cc:	4770      	bx	lr

0002c7ce <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   2c7ce:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   2c7d0:	b130      	cbz	r0, 2c7e0 <pm_device_state_is_locked+0x12>
   2c7d2:	f3bf 8f5b 	dmb	ish
   2c7d6:	6800      	ldr	r0, [r0, #0]
   2c7d8:	f3bf 8f5b 	dmb	ish
   2c7dc:	f3c0 1000 	ubfx	r0, r0, #4, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   2c7e0:	4770      	bx	lr

0002c7e2 <pm_device_action_run>:
{
   2c7e2:	b538      	push	{r3, r4, r5, lr}
	struct pm_device *pm = dev->pm;
   2c7e4:	6984      	ldr	r4, [r0, #24]
{
   2c7e6:	4603      	mov	r3, r0
	if (pm == NULL) {
   2c7e8:	b1fc      	cbz	r4, 2c82a <pm_device_action_run+0x48>
	if (pm_device_state_is_locked(dev)) {
   2c7ea:	f7ff fff0 	bl	2c7ce <pm_device_state_is_locked>
   2c7ee:	b9f8      	cbnz	r0, 2c830 <pm_device_action_run+0x4e>
	switch (action) {
   2c7f0:	2903      	cmp	r1, #3
   2c7f2:	d820      	bhi.n	2c836 <pm_device_action_run+0x54>
   2c7f4:	e8df f001 	tbb	[pc, r1]
   2c7f8:	02141002 	.word	0x02141002
		if (pm->state == PM_DEVICE_STATE_SUSPENDED) {
   2c7fc:	7922      	ldrb	r2, [r4, #4]
   2c7fe:	2a01      	cmp	r2, #1
   2c800:	d01c      	beq.n	2c83c <pm_device_action_run+0x5a>
		} else if (pm->state == PM_DEVICE_STATE_OFF) {
   2c802:	2a03      	cmp	r2, #3
   2c804:	d017      	beq.n	2c836 <pm_device_action_run+0x54>
		state = PM_DEVICE_STATE_SUSPENDED;
   2c806:	2501      	movs	r5, #1
	ret = pm->action_cb(dev, action);
   2c808:	68a2      	ldr	r2, [r4, #8]
   2c80a:	4618      	mov	r0, r3
   2c80c:	4790      	blx	r2
	if (ret < 0) {
   2c80e:	2800      	cmp	r0, #0
   2c810:	db01      	blt.n	2c816 <pm_device_action_run+0x34>
	pm->state = state;
   2c812:	7125      	strb	r5, [r4, #4]
	return 0;
   2c814:	2000      	movs	r0, #0
}
   2c816:	bd38      	pop	{r3, r4, r5, pc}
		if (pm->state == PM_DEVICE_STATE_ACTIVE) {
   2c818:	7922      	ldrb	r2, [r4, #4]
   2c81a:	b17a      	cbz	r2, 2c83c <pm_device_action_run+0x5a>
		state = PM_DEVICE_STATE_ACTIVE;
   2c81c:	2500      	movs	r5, #0
   2c81e:	e7f3      	b.n	2c808 <pm_device_action_run+0x26>
		if (pm->state == PM_DEVICE_STATE_OFF) {
   2c820:	7922      	ldrb	r2, [r4, #4]
   2c822:	2a03      	cmp	r2, #3
   2c824:	d00a      	beq.n	2c83c <pm_device_action_run+0x5a>
		state = PM_DEVICE_STATE_OFF;
   2c826:	2503      	movs	r5, #3
   2c828:	e7ee      	b.n	2c808 <pm_device_action_run+0x26>
		return -ENOSYS;
   2c82a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2c82e:	e7f2      	b.n	2c816 <pm_device_action_run+0x34>
		return -EPERM;
   2c830:	f04f 30ff 	mov.w	r0, #4294967295
   2c834:	e7ef      	b.n	2c816 <pm_device_action_run+0x34>
			return -ENOTSUP;
   2c836:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c83a:	e7ec      	b.n	2c816 <pm_device_action_run+0x34>
			return -EALREADY;
   2c83c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2c840:	e7e9      	b.n	2c816 <pm_device_action_run+0x34>

0002c842 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2c842:	2200      	movs	r2, #0
   2c844:	e9c0 2200 	strd	r2, r2, [r0]
   2c848:	6082      	str	r2, [r0, #8]
}
   2c84a:	4770      	bx	lr

0002c84c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2c84c:	b538      	push	{r3, r4, r5, lr}
   2c84e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2c850:	42ab      	cmp	r3, r5
{
   2c852:	4611      	mov	r1, r2
   2c854:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2c856:	d804      	bhi.n	2c862 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2c858:	461a      	mov	r2, r3
   2c85a:	f000 fa2e 	bl	2ccba <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2c85e:	4620      	mov	r0, r4
   2c860:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2c862:	2400      	movs	r4, #0
   2c864:	e7fb      	b.n	2c85e <_copy+0x12>

0002c866 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2c866:	f000 ba33 	b.w	2ccd0 <memset>

0002c86a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2c86a:	09c3      	lsrs	r3, r0, #7
   2c86c:	005a      	lsls	r2, r3, #1
   2c86e:	4413      	add	r3, r2
   2c870:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2c874:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2c878:	b2c0      	uxtb	r0, r0
   2c87a:	4770      	bx	lr

0002c87c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2c87c:	78cb      	ldrb	r3, [r1, #3]
   2c87e:	7802      	ldrb	r2, [r0, #0]
   2c880:	4053      	eors	r3, r2
   2c882:	7003      	strb	r3, [r0, #0]
   2c884:	884b      	ldrh	r3, [r1, #2]
   2c886:	7842      	ldrb	r2, [r0, #1]
   2c888:	4053      	eors	r3, r2
   2c88a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2c88c:	680a      	ldr	r2, [r1, #0]
   2c88e:	7883      	ldrb	r3, [r0, #2]
   2c890:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2c894:	7083      	strb	r3, [r0, #2]
   2c896:	680a      	ldr	r2, [r1, #0]
   2c898:	78c3      	ldrb	r3, [r0, #3]
   2c89a:	4053      	eors	r3, r2
   2c89c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2c89e:	79cb      	ldrb	r3, [r1, #7]
   2c8a0:	7902      	ldrb	r2, [r0, #4]
   2c8a2:	4053      	eors	r3, r2
   2c8a4:	7103      	strb	r3, [r0, #4]
   2c8a6:	88cb      	ldrh	r3, [r1, #6]
   2c8a8:	7942      	ldrb	r2, [r0, #5]
   2c8aa:	4053      	eors	r3, r2
   2c8ac:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2c8ae:	684a      	ldr	r2, [r1, #4]
   2c8b0:	7983      	ldrb	r3, [r0, #6]
   2c8b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2c8b6:	7183      	strb	r3, [r0, #6]
   2c8b8:	684a      	ldr	r2, [r1, #4]
   2c8ba:	79c3      	ldrb	r3, [r0, #7]
   2c8bc:	4053      	eors	r3, r2
   2c8be:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2c8c0:	7acb      	ldrb	r3, [r1, #11]
   2c8c2:	7a02      	ldrb	r2, [r0, #8]
   2c8c4:	4053      	eors	r3, r2
   2c8c6:	7203      	strb	r3, [r0, #8]
   2c8c8:	7a42      	ldrb	r2, [r0, #9]
   2c8ca:	894b      	ldrh	r3, [r1, #10]
   2c8cc:	4053      	eors	r3, r2
   2c8ce:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2c8d0:	688a      	ldr	r2, [r1, #8]
   2c8d2:	7a83      	ldrb	r3, [r0, #10]
   2c8d4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2c8d8:	7283      	strb	r3, [r0, #10]
   2c8da:	688a      	ldr	r2, [r1, #8]
   2c8dc:	7ac3      	ldrb	r3, [r0, #11]
   2c8de:	4053      	eors	r3, r2
   2c8e0:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2c8e2:	7bcb      	ldrb	r3, [r1, #15]
   2c8e4:	7b02      	ldrb	r2, [r0, #12]
   2c8e6:	4053      	eors	r3, r2
   2c8e8:	7303      	strb	r3, [r0, #12]
   2c8ea:	89cb      	ldrh	r3, [r1, #14]
   2c8ec:	7b42      	ldrb	r2, [r0, #13]
   2c8ee:	4053      	eors	r3, r2
   2c8f0:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2c8f2:	68ca      	ldr	r2, [r1, #12]
   2c8f4:	7b83      	ldrb	r3, [r0, #14]
   2c8f6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2c8fa:	7383      	strb	r3, [r0, #14]
   2c8fc:	68ca      	ldr	r2, [r1, #12]
   2c8fe:	7bc3      	ldrb	r3, [r0, #15]
   2c900:	4053      	eors	r3, r2
   2c902:	73c3      	strb	r3, [r0, #15]
}
   2c904:	4770      	bx	lr

0002c906 <shift_rows>:
{
   2c906:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2c908:	7802      	ldrb	r2, [r0, #0]
   2c90a:	f88d 2000 	strb.w	r2, [sp]
   2c90e:	7942      	ldrb	r2, [r0, #5]
   2c910:	f88d 2001 	strb.w	r2, [sp, #1]
   2c914:	7a82      	ldrb	r2, [r0, #10]
   2c916:	f88d 2002 	strb.w	r2, [sp, #2]
   2c91a:	7bc2      	ldrb	r2, [r0, #15]
   2c91c:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2c920:	7902      	ldrb	r2, [r0, #4]
   2c922:	f88d 2004 	strb.w	r2, [sp, #4]
   2c926:	7a42      	ldrb	r2, [r0, #9]
   2c928:	f88d 2005 	strb.w	r2, [sp, #5]
   2c92c:	7b82      	ldrb	r2, [r0, #14]
   2c92e:	f88d 2006 	strb.w	r2, [sp, #6]
   2c932:	78c2      	ldrb	r2, [r0, #3]
   2c934:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2c938:	7a02      	ldrb	r2, [r0, #8]
   2c93a:	f88d 2008 	strb.w	r2, [sp, #8]
   2c93e:	7b42      	ldrb	r2, [r0, #13]
   2c940:	f88d 2009 	strb.w	r2, [sp, #9]
   2c944:	7882      	ldrb	r2, [r0, #2]
   2c946:	f88d 200a 	strb.w	r2, [sp, #10]
   2c94a:	79c2      	ldrb	r2, [r0, #7]
   2c94c:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2c950:	7b02      	ldrb	r2, [r0, #12]
   2c952:	f88d 200c 	strb.w	r2, [sp, #12]
   2c956:	7842      	ldrb	r2, [r0, #1]
   2c958:	7ac3      	ldrb	r3, [r0, #11]
   2c95a:	f88d 200d 	strb.w	r2, [sp, #13]
   2c95e:	7982      	ldrb	r2, [r0, #6]
   2c960:	f88d 200e 	strb.w	r2, [sp, #14]
   2c964:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2c968:	2310      	movs	r3, #16
   2c96a:	466a      	mov	r2, sp
   2c96c:	4619      	mov	r1, r3
   2c96e:	f7ff ff6d 	bl	2c84c <_copy>
}
   2c972:	b005      	add	sp, #20
   2c974:	f85d fb04 	ldr.w	pc, [sp], #4

0002c978 <mult_row_column>:
{
   2c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c97a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2c97c:	7808      	ldrb	r0, [r1, #0]
{
   2c97e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2c980:	f7ff ff73 	bl	2c86a <_double_byte>
   2c984:	4605      	mov	r5, r0
   2c986:	7860      	ldrb	r0, [r4, #1]
   2c988:	f7ff ff6f 	bl	2c86a <_double_byte>
   2c98c:	78a2      	ldrb	r2, [r4, #2]
   2c98e:	7863      	ldrb	r3, [r4, #1]
   2c990:	4053      	eors	r3, r2
   2c992:	78e2      	ldrb	r2, [r4, #3]
   2c994:	4053      	eors	r3, r2
   2c996:	405d      	eors	r5, r3
   2c998:	4045      	eors	r5, r0
   2c99a:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2c99c:	7860      	ldrb	r0, [r4, #1]
   2c99e:	7827      	ldrb	r7, [r4, #0]
   2c9a0:	f7ff ff63 	bl	2c86a <_double_byte>
   2c9a4:	4605      	mov	r5, r0
   2c9a6:	78a0      	ldrb	r0, [r4, #2]
   2c9a8:	f7ff ff5f 	bl	2c86a <_double_byte>
   2c9ac:	78a3      	ldrb	r3, [r4, #2]
   2c9ae:	405f      	eors	r7, r3
   2c9b0:	78e3      	ldrb	r3, [r4, #3]
   2c9b2:	405f      	eors	r7, r3
   2c9b4:	407d      	eors	r5, r7
   2c9b6:	4045      	eors	r5, r0
   2c9b8:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2c9ba:	78a0      	ldrb	r0, [r4, #2]
   2c9bc:	7865      	ldrb	r5, [r4, #1]
   2c9be:	7827      	ldrb	r7, [r4, #0]
   2c9c0:	f7ff ff53 	bl	2c86a <_double_byte>
   2c9c4:	406f      	eors	r7, r5
   2c9c6:	4605      	mov	r5, r0
   2c9c8:	78e0      	ldrb	r0, [r4, #3]
   2c9ca:	f7ff ff4e 	bl	2c86a <_double_byte>
   2c9ce:	78e3      	ldrb	r3, [r4, #3]
   2c9d0:	405f      	eors	r7, r3
   2c9d2:	407d      	eors	r5, r7
   2c9d4:	4045      	eors	r5, r0
   2c9d6:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2c9d8:	7820      	ldrb	r0, [r4, #0]
   2c9da:	f7ff ff46 	bl	2c86a <_double_byte>
   2c9de:	7863      	ldrb	r3, [r4, #1]
   2c9e0:	7825      	ldrb	r5, [r4, #0]
   2c9e2:	405d      	eors	r5, r3
   2c9e4:	78a3      	ldrb	r3, [r4, #2]
   2c9e6:	405d      	eors	r5, r3
   2c9e8:	4045      	eors	r5, r0
   2c9ea:	78e0      	ldrb	r0, [r4, #3]
   2c9ec:	f7ff ff3d 	bl	2c86a <_double_byte>
   2c9f0:	b2ed      	uxtb	r5, r5
   2c9f2:	4045      	eors	r5, r0
   2c9f4:	70f5      	strb	r5, [r6, #3]
}
   2c9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c9f8 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2c9f8:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2c9fa:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2c9fc:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2c9fe:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2ca02:	2b00      	cmp	r3, #0
   2ca04:	bfb4      	ite	lt
   2ca06:	2387      	movlt	r3, #135	; 0x87
   2ca08:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2ca0a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2ca0e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2ca12:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2ca14:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2ca18:	d002      	beq.n	2ca20 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2ca1a:	7813      	ldrb	r3, [r2, #0]
   2ca1c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2ca1e:	e7f4      	b.n	2ca0a <gf_double+0x12>
	}
}
   2ca20:	bd10      	pop	{r4, pc}

0002ca22 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2ca22:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2ca24:	b120      	cbz	r0, 2ca30 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2ca26:	2258      	movs	r2, #88	; 0x58
   2ca28:	2100      	movs	r1, #0
   2ca2a:	f7ff ff1c 	bl	2c866 <_set>
   2ca2e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2ca30:	bd08      	pop	{r3, pc}

0002ca32 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2ca32:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2ca34:	4604      	mov	r4, r0
   2ca36:	b188      	cbz	r0, 2ca5c <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2ca38:	2210      	movs	r2, #16
   2ca3a:	2100      	movs	r1, #0
   2ca3c:	f7ff ff13 	bl	2c866 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2ca40:	2210      	movs	r2, #16
   2ca42:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ca46:	2100      	movs	r1, #0
   2ca48:	f7ff ff0d 	bl	2c866 <_set>
	s->leftover_offset = 0;
   2ca4c:	2300      	movs	r3, #0
   2ca4e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2ca50:	2200      	movs	r2, #0
   2ca52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2ca56:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2ca5a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2ca5c:	bd10      	pop	{r4, pc}

0002ca5e <tc_cmac_setup>:
{
   2ca5e:	b570      	push	{r4, r5, r6, lr}
   2ca60:	460d      	mov	r5, r1
   2ca62:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2ca64:	4604      	mov	r4, r0
   2ca66:	b310      	cbz	r0, 2caae <tc_cmac_setup+0x50>
   2ca68:	b311      	cbz	r1, 2cab0 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2ca6a:	2258      	movs	r2, #88	; 0x58
   2ca6c:	2100      	movs	r1, #0
   2ca6e:	f7ff fefa 	bl	2c866 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2ca72:	4629      	mov	r1, r5
	s->sched = sched;
   2ca74:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2ca76:	4630      	mov	r0, r6
   2ca78:	f7f1 fca4 	bl	1e3c4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2ca7c:	2210      	movs	r2, #16
   2ca7e:	2100      	movs	r1, #0
   2ca80:	4620      	mov	r0, r4
   2ca82:	f7ff fef0 	bl	2c866 <_set>
	gf_double (s->K1, s->iv);
   2ca86:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2ca8a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2ca8c:	4621      	mov	r1, r4
   2ca8e:	4620      	mov	r0, r4
   2ca90:	f7f1 fcea 	bl	1e468 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2ca94:	4621      	mov	r1, r4
   2ca96:	4628      	mov	r0, r5
   2ca98:	f7ff ffae 	bl	2c9f8 <gf_double>
	gf_double (s->K2, s->K1);
   2ca9c:	4629      	mov	r1, r5
   2ca9e:	f104 0020 	add.w	r0, r4, #32
   2caa2:	f7ff ffa9 	bl	2c9f8 <gf_double>
	tc_cmac_init(s);
   2caa6:	4620      	mov	r0, r4
   2caa8:	f7ff ffc3 	bl	2ca32 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2caac:	2001      	movs	r0, #1
}
   2caae:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2cab0:	4608      	mov	r0, r1
   2cab2:	e7fc      	b.n	2caae <tc_cmac_setup+0x50>

0002cab4 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2cab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cab8:	460d      	mov	r5, r1
   2caba:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2cabc:	4604      	mov	r4, r0
   2cabe:	2800      	cmp	r0, #0
   2cac0:	d062      	beq.n	2cb88 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2cac2:	b912      	cbnz	r2, 2caca <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2cac4:	2001      	movs	r0, #1
}
   2cac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2caca:	2900      	cmp	r1, #0
   2cacc:	d05c      	beq.n	2cb88 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2cace:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2cad2:	ea50 0301 	orrs.w	r3, r0, r1
   2cad6:	d057      	beq.n	2cb88 <tc_cmac_update+0xd4>
	s->countdown--;
   2cad8:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2cadc:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2cae0:	f141 33ff 	adc.w	r3, r1, #4294967295
   2cae4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2cae8:	f1b8 0f00 	cmp.w	r8, #0
   2caec:	d02a      	beq.n	2cb44 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2caee:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2caf2:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2caf6:	42be      	cmp	r6, r7
   2caf8:	4420      	add	r0, r4
   2cafa:	d208      	bcs.n	2cb0e <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2cafc:	462a      	mov	r2, r5
   2cafe:	4633      	mov	r3, r6
   2cb00:	4631      	mov	r1, r6
   2cb02:	f7ff fea3 	bl	2c84c <_copy>
			s->leftover_offset += data_length;
   2cb06:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2cb08:	4432      	add	r2, r6
   2cb0a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2cb0c:	e7da      	b.n	2cac4 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2cb0e:	463b      	mov	r3, r7
   2cb10:	462a      	mov	r2, r5
   2cb12:	4639      	mov	r1, r7
   2cb14:	f7ff fe9a 	bl	2c84c <_copy>
		data_length -= remaining_space;
   2cb18:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2cb1a:	2300      	movs	r3, #0
   2cb1c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2cb1e:	4446      	add	r6, r8
		data += remaining_space;
   2cb20:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cb22:	1e63      	subs	r3, r4, #1
   2cb24:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2cb28:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2cb2c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cb30:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2cb32:	ea82 0200 	eor.w	r2, r2, r0
   2cb36:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cb38:	d1f6      	bne.n	2cb28 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2cb3a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2cb3c:	4621      	mov	r1, r4
   2cb3e:	4620      	mov	r0, r4
   2cb40:	f7f1 fc92 	bl	1e468 <tc_aes_encrypt>
   2cb44:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2cb48:	2e10      	cmp	r6, #16
   2cb4a:	d80a      	bhi.n	2cb62 <tc_cmac_update+0xae>
	if (data_length > 0) {
   2cb4c:	2e00      	cmp	r6, #0
   2cb4e:	d0b9      	beq.n	2cac4 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2cb50:	4633      	mov	r3, r6
   2cb52:	462a      	mov	r2, r5
   2cb54:	4631      	mov	r1, r6
   2cb56:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2cb5a:	f7ff fe77 	bl	2c84c <_copy>
		s->leftover_offset = data_length;
   2cb5e:	6466      	str	r6, [r4, #68]	; 0x44
   2cb60:	e7b0      	b.n	2cac4 <tc_cmac_update+0x10>
   2cb62:	1e63      	subs	r3, r4, #1
   2cb64:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2cb66:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2cb6a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cb6e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2cb70:	ea82 0200 	eor.w	r2, r2, r0
   2cb74:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cb76:	d1f6      	bne.n	2cb66 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2cb78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2cb7a:	4621      	mov	r1, r4
   2cb7c:	4620      	mov	r0, r4
   2cb7e:	f7f1 fc73 	bl	1e468 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2cb82:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2cb84:	3e10      	subs	r6, #16
   2cb86:	e7df      	b.n	2cb48 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   2cb88:	2000      	movs	r0, #0
   2cb8a:	e79c      	b.n	2cac6 <tc_cmac_update+0x12>

0002cb8c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2cb8c:	b570      	push	{r4, r5, r6, lr}
   2cb8e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2cb90:	4605      	mov	r5, r0
   2cb92:	b1e8      	cbz	r0, 2cbd0 <tc_cmac_final+0x44>
   2cb94:	b369      	cbz	r1, 2cbf2 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2cb96:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2cb98:	2a10      	cmp	r2, #16
   2cb9a:	d11a      	bne.n	2cbd2 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2cb9c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cb9e:	1e63      	subs	r3, r4, #1
   2cba0:	3901      	subs	r1, #1
   2cba2:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2cba6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2cbaa:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2cbae:	4072      	eors	r2, r6
   2cbb0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cbb4:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2cbb6:	ea82 0206 	eor.w	r2, r2, r6
   2cbba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cbbc:	d1f3      	bne.n	2cba6 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2cbbe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2cbc0:	4621      	mov	r1, r4
   2cbc2:	4628      	mov	r0, r5
   2cbc4:	f7f1 fc50 	bl	1e468 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2cbc8:	4620      	mov	r0, r4
   2cbca:	f7ff ff2a 	bl	2ca22 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2cbce:	2001      	movs	r0, #1
}
   2cbd0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2cbd2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2cbd6:	2100      	movs	r1, #0
   2cbd8:	f1c2 0210 	rsb	r2, r2, #16
   2cbdc:	4420      	add	r0, r4
   2cbde:	f7ff fe42 	bl	2c866 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2cbe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2cbe4:	4423      	add	r3, r4
   2cbe6:	2280      	movs	r2, #128	; 0x80
   2cbe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2cbec:	f104 0120 	add.w	r1, r4, #32
   2cbf0:	e7d5      	b.n	2cb9e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2cbf2:	4608      	mov	r0, r1
   2cbf4:	e7ec      	b.n	2cbd0 <tc_cmac_final+0x44>

0002cbf6 <abort_function>:
{
   2cbf6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2cbf8:	2000      	movs	r0, #0
   2cbfa:	f7f0 fe9d 	bl	1d938 <sys_reboot>

0002cbfe <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   2cbfe:	f004 bc77 	b.w	314f0 <z_fatal_error>

0002cc02 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2cc02:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   2cc04:	6800      	ldr	r0, [r0, #0]
   2cc06:	f004 bc73 	b.w	314f0 <z_fatal_error>

0002cc0a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2cc0a:	2100      	movs	r1, #0
   2cc0c:	2001      	movs	r0, #1
   2cc0e:	f7ff bff6 	b.w	2cbfe <z_arm_fatal_error>

0002cc12 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2cc12:	b508      	push	{r3, lr}
	handler();
   2cc14:	f7f1 fdd4 	bl	1e7c0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2cc18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2cc1c:	f7f1 beb0 	b.w	1e980 <z_arm_exc_exit>

0002cc20 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2cc20:	3901      	subs	r1, #1
   2cc22:	4603      	mov	r3, r0
   2cc24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2cc28:	b90a      	cbnz	r2, 2cc2e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2cc2a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2cc2c:	4770      	bx	lr
		*d = *s;
   2cc2e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2cc32:	e7f7      	b.n	2cc24 <strcpy+0x4>

0002cc34 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2cc34:	4603      	mov	r3, r0
	size_t n = 0;
   2cc36:	2000      	movs	r0, #0

	while (*s != '\0') {
   2cc38:	5c1a      	ldrb	r2, [r3, r0]
   2cc3a:	b902      	cbnz	r2, 2cc3e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2cc3c:	4770      	bx	lr
		n++;
   2cc3e:	3001      	adds	r0, #1
   2cc40:	e7fa      	b.n	2cc38 <strlen+0x4>

0002cc42 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2cc42:	4603      	mov	r3, r0
	size_t n = 0;
   2cc44:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2cc46:	5c1a      	ldrb	r2, [r3, r0]
   2cc48:	b10a      	cbz	r2, 2cc4e <strnlen+0xc>
   2cc4a:	4288      	cmp	r0, r1
   2cc4c:	d100      	bne.n	2cc50 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2cc4e:	4770      	bx	lr
		n++;
   2cc50:	3001      	adds	r0, #1
   2cc52:	e7f8      	b.n	2cc46 <strnlen+0x4>

0002cc54 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2cc54:	1e43      	subs	r3, r0, #1
   2cc56:	3901      	subs	r1, #1
   2cc58:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2cc5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2cc60:	4282      	cmp	r2, r0
   2cc62:	d101      	bne.n	2cc68 <strcmp+0x14>
   2cc64:	2a00      	cmp	r2, #0
   2cc66:	d1f7      	bne.n	2cc58 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2cc68:	1a10      	subs	r0, r2, r0
   2cc6a:	4770      	bx	lr

0002cc6c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2cc6c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2cc6e:	b15a      	cbz	r2, 2cc88 <memcmp+0x1c>
   2cc70:	3901      	subs	r1, #1
   2cc72:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2cc74:	f810 2b01 	ldrb.w	r2, [r0], #1
   2cc78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2cc7c:	42a0      	cmp	r0, r4
   2cc7e:	d001      	beq.n	2cc84 <memcmp+0x18>
   2cc80:	429a      	cmp	r2, r3
   2cc82:	d0f7      	beq.n	2cc74 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2cc84:	1ad0      	subs	r0, r2, r3
}
   2cc86:	bd10      	pop	{r4, pc}
		return 0;
   2cc88:	4610      	mov	r0, r2
   2cc8a:	e7fc      	b.n	2cc86 <memcmp+0x1a>

0002cc8c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2cc8c:	1a43      	subs	r3, r0, r1
   2cc8e:	4293      	cmp	r3, r2
{
   2cc90:	b510      	push	{r4, lr}
   2cc92:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2cc96:	d308      	bcc.n	2ccaa <memmove+0x1e>
   2cc98:	3901      	subs	r1, #1
	char *dest = d;
   2cc9a:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2cc9c:	429a      	cmp	r2, r3
   2cc9e:	d00b      	beq.n	2ccb8 <memmove+0x2c>
			*dest = *src;
   2cca0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2cca4:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2cca8:	e7f8      	b.n	2cc9c <memmove+0x10>
   2ccaa:	440a      	add	r2, r1
			dest[n] = src[n];
   2ccac:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2ccb0:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2ccb4:	428a      	cmp	r2, r1
   2ccb6:	d1f9      	bne.n	2ccac <memmove+0x20>
		}
	}

	return d;
}
   2ccb8:	bd10      	pop	{r4, pc}

0002ccba <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2ccba:	b510      	push	{r4, lr}
   2ccbc:	1e43      	subs	r3, r0, #1
   2ccbe:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2ccc0:	4291      	cmp	r1, r2
   2ccc2:	d100      	bne.n	2ccc6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2ccc4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2ccc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ccca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2ccce:	e7f7      	b.n	2ccc0 <memcpy+0x6>

0002ccd0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2ccd0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2ccd2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2ccd4:	4603      	mov	r3, r0
	while (n > 0) {
   2ccd6:	4293      	cmp	r3, r2
   2ccd8:	d100      	bne.n	2ccdc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2ccda:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2ccdc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2cce0:	e7f9      	b.n	2ccd6 <memset+0x6>

0002cce2 <smf_set_initial>:
	struct internal_ctx * const internal = (void *) &ctx->internal;

	internal->exit = false;
	internal->terminate = false;
	ctx->current = init_state;
	ctx->previous = NULL;
   2cce2:	2200      	movs	r2, #0
	ctx->terminate_val = 0;
   2cce4:	e9c0 2201 	strd	r2, r2, [r0, #4]
	internal->terminate = false;
   2cce8:	7b02      	ldrb	r2, [r0, #12]
			return;
		}
	}

	/* Now execute the initial state's entry action */
	if (init_state->entry) {
   2ccea:	680b      	ldr	r3, [r1, #0]
	ctx->current = init_state;
   2ccec:	6001      	str	r1, [r0, #0]
	internal->terminate = false;
   2ccee:	f022 0206 	bic.w	r2, r2, #6
   2ccf2:	7302      	strb	r2, [r0, #12]
	if (init_state->entry) {
   2ccf4:	b103      	cbz	r3, 2ccf8 <smf_set_initial+0x16>
		init_state->entry(ctx);
   2ccf6:	4718      	bx	r3
	}
}
   2ccf8:	4770      	bx	lr

0002ccfa <smf_set_state>:
	/*
	 * It does not make sense to call set_state in an exit phase of a state
	 * since we are already in a transition; we would always ignore the
	 * intended state to transition into.
	 */
	if (internal->exit) {
   2ccfa:	7b03      	ldrb	r3, [r0, #12]
   2ccfc:	075a      	lsls	r2, r3, #29
{
   2ccfe:	b570      	push	{r4, r5, r6, lr}
   2cd00:	4604      	mov	r4, r0
   2cd02:	460d      	mov	r5, r1
	if (internal->exit) {
   2cd04:	d40e      	bmi.n	2cd24 <smf_set_state+0x2a>
		LOG_WRN("Calling %s from exit action", __func__);
		return;
	}

	internal->exit = true;
   2cd06:	f043 0304 	orr.w	r3, r3, #4
   2cd0a:	7303      	strb	r3, [r0, #12]

	/* Execute the current states exit action */
	if (ctx->current->exit) {
   2cd0c:	6803      	ldr	r3, [r0, #0]
   2cd0e:	689b      	ldr	r3, [r3, #8]
   2cd10:	b94b      	cbnz	r3, 2cd26 <smf_set_state+0x2c>
		if (smf_execute_ancestor_exit_actions(ctx, target)) {
			return;
		}
	}

	internal->exit = false;
   2cd12:	7b23      	ldrb	r3, [r4, #12]
   2cd14:	f36f 0382 	bfc	r3, #2, #1
   2cd18:	7323      	strb	r3, [r4, #12]

	/* update the state variables */
	ctx->previous = ctx->current;
   2cd1a:	6823      	ldr	r3, [r4, #0]
	ctx->current = target;
   2cd1c:	e9c4 5300 	strd	r5, r3, [r4]
			return;
		}
	}

	/* Now execute the target entry action */
	if (ctx->current->entry) {
   2cd20:	682b      	ldr	r3, [r5, #0]
   2cd22:	b92b      	cbnz	r3, 2cd30 <smf_set_state+0x36>
		/*
		 * If terminate was set, it will be handled in the
		 * smf_run_state function
		 */
	}
}
   2cd24:	bd70      	pop	{r4, r5, r6, pc}
		ctx->current->exit(ctx);
   2cd26:	4798      	blx	r3
		if (internal->terminate) {
   2cd28:	7b23      	ldrb	r3, [r4, #12]
   2cd2a:	079b      	lsls	r3, r3, #30
   2cd2c:	d5f1      	bpl.n	2cd12 <smf_set_state+0x18>
   2cd2e:	e7f9      	b.n	2cd24 <smf_set_state+0x2a>
		ctx->current->entry(ctx);
   2cd30:	4620      	mov	r0, r4
}
   2cd32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ctx->current->entry(ctx);
   2cd36:	4718      	bx	r3

0002cd38 <smf_run_state>:
int32_t smf_run_state(struct smf_ctx *const ctx)
{
	struct internal_ctx * const internal = (void *) &ctx->internal;

	/* No need to continue if terminate was set */
	if (internal->terminate) {
   2cd38:	7b03      	ldrb	r3, [r0, #12]
{
   2cd3a:	b510      	push	{r4, lr}
	if (internal->terminate) {
   2cd3c:	f013 0402 	ands.w	r4, r3, #2
   2cd40:	d001      	beq.n	2cd46 <smf_run_state+0xe>
		return ctx->terminate_val;
   2cd42:	6880      	ldr	r0, [r0, #8]
			return ctx->terminate_val;
		}
	}

	return 0;
}
   2cd44:	bd10      	pop	{r4, pc}
	if (ctx->current->run) {
   2cd46:	6803      	ldr	r3, [r0, #0]
   2cd48:	685b      	ldr	r3, [r3, #4]
   2cd4a:	b113      	cbz	r3, 2cd52 <smf_run_state+0x1a>
		ctx->current->run(ctx);
   2cd4c:	4798      	blx	r3
	return 0;
   2cd4e:	4620      	mov	r0, r4
   2cd50:	e7f8      	b.n	2cd44 <smf_run_state+0xc>
   2cd52:	4618      	mov	r0, r3
   2cd54:	e7f6      	b.n	2cd44 <smf_run_state+0xc>

0002cd56 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2cd56:	b084      	sub	sp, #16
   2cd58:	ab04      	add	r3, sp, #16
   2cd5a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2cd5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2cd62:	2b06      	cmp	r3, #6
   2cd64:	d108      	bne.n	2cd78 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2cd66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cd6a:	2201      	movs	r2, #1
   2cd6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2cd70:	f3bf 8f4f 	dsb	sy
        __WFE();
   2cd74:	bf20      	wfe
    while (true)
   2cd76:	e7fd      	b.n	2cd74 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2cd78:	b004      	add	sp, #16
   2cd7a:	4770      	bx	lr

0002cd7c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2cd7c:	b084      	sub	sp, #16
   2cd7e:	ab04      	add	r3, sp, #16
   2cd80:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2cd84:	2300      	movs	r3, #0
   2cd86:	f383 8811 	msr	BASEPRI, r3
   2cd8a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2cd8e:	b004      	add	sp, #16
   2cd90:	4770      	bx	lr

0002cd92 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2cd92:	b510      	push	{r4, lr}
   2cd94:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2cd96:	7801      	ldrb	r1, [r0, #0]
   2cd98:	7822      	ldrb	r2, [r4, #0]
   2cd9a:	428a      	cmp	r2, r1
{
   2cd9c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2cd9e:	d00e      	beq.n	2cdbe <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2cda0:	4669      	mov	r1, sp
   2cda2:	f7f2 f88f 	bl	1eec4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2cda6:	a905      	add	r1, sp, #20
   2cda8:	4620      	mov	r0, r4
   2cdaa:	f7f2 f88b 	bl	1eec4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2cdae:	2210      	movs	r2, #16
   2cdb0:	f10d 0115 	add.w	r1, sp, #21
   2cdb4:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2cdb8:	f7ff ff58 	bl	2cc6c <memcmp>
   2cdbc:	e007      	b.n	2cdce <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   2cdbe:	2a01      	cmp	r2, #1
   2cdc0:	d007      	beq.n	2cdd2 <bt_uuid_cmp+0x40>
   2cdc2:	2a02      	cmp	r2, #2
   2cdc4:	d008      	beq.n	2cdd8 <bt_uuid_cmp+0x46>
   2cdc6:	b95a      	cbnz	r2, 2cde0 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2cdc8:	8840      	ldrh	r0, [r0, #2]
   2cdca:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2cdcc:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   2cdce:	b00a      	add	sp, #40	; 0x28
   2cdd0:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2cdd2:	6840      	ldr	r0, [r0, #4]
   2cdd4:	6863      	ldr	r3, [r4, #4]
   2cdd6:	e7f9      	b.n	2cdcc <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2cdd8:	2210      	movs	r2, #16
   2cdda:	1c61      	adds	r1, r4, #1
   2cddc:	3001      	adds	r0, #1
   2cdde:	e7eb      	b.n	2cdb8 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2cde0:	f06f 0015 	mvn.w	r0, #21
   2cde4:	e7f3      	b.n	2cdce <bt_uuid_cmp+0x3c>

0002cde6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2cde6:	2a04      	cmp	r2, #4
{
   2cde8:	b538      	push	{r3, r4, r5, lr}
   2cdea:	460c      	mov	r4, r1
	switch (data_len) {
   2cdec:	d00d      	beq.n	2ce0a <bt_uuid_create+0x24>
   2cdee:	2a10      	cmp	r2, #16
   2cdf0:	d019      	beq.n	2ce26 <bt_uuid_create+0x40>
   2cdf2:	2a02      	cmp	r2, #2
   2cdf4:	f04f 0300 	mov.w	r3, #0
   2cdf8:	d11b      	bne.n	2ce32 <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2cdfa:	7003      	strb	r3, [r0, #0]
   2cdfc:	784a      	ldrb	r2, [r1, #1]
   2cdfe:	780b      	ldrb	r3, [r1, #0]
   2ce00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2ce04:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2ce06:	2001      	movs	r0, #1
}
   2ce08:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2ce0a:	2301      	movs	r3, #1
   2ce0c:	7003      	strb	r3, [r0, #0]
   2ce0e:	78a2      	ldrb	r2, [r4, #2]
   2ce10:	78c9      	ldrb	r1, [r1, #3]
   2ce12:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2ce14:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2ce18:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2ce1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   2ce1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2ce22:	6042      	str	r2, [r0, #4]
		break;
   2ce24:	e7ef      	b.n	2ce06 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   2ce26:	2302      	movs	r3, #2
   2ce28:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2ce2c:	f7ff ff45 	bl	2ccba <memcpy>
		break;
   2ce30:	e7e9      	b.n	2ce06 <bt_uuid_create+0x20>
	switch (data_len) {
   2ce32:	4618      	mov	r0, r3
   2ce34:	e7e8      	b.n	2ce08 <bt_uuid_create+0x22>

0002ce36 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2ce36:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2ce38:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2ce3a:	2106      	movs	r1, #6
{
   2ce3c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2ce3e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2ce42:	f7f8 fec5 	bl	25bd0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2ce46:	b918      	cbnz	r0, 2ce50 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2ce48:	79a3      	ldrb	r3, [r4, #6]
   2ce4a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2ce4e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2ce50:	bd10      	pop	{r4, pc}

0002ce52 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2ce52:	280f      	cmp	r0, #15
   2ce54:	d806      	bhi.n	2ce64 <bt_hci_evt_get_flags+0x12>
   2ce56:	280d      	cmp	r0, #13
   2ce58:	d80b      	bhi.n	2ce72 <bt_hci_evt_get_flags+0x20>
   2ce5a:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2ce5c:	bf14      	ite	ne
   2ce5e:	2002      	movne	r0, #2
   2ce60:	2003      	moveq	r0, #3
   2ce62:	4770      	bx	lr
	switch (evt) {
   2ce64:	2813      	cmp	r0, #19
   2ce66:	d004      	beq.n	2ce72 <bt_hci_evt_get_flags+0x20>
   2ce68:	281a      	cmp	r0, #26
   2ce6a:	bf14      	ite	ne
   2ce6c:	2002      	movne	r0, #2
   2ce6e:	2001      	moveq	r0, #1
   2ce70:	4770      	bx	lr
   2ce72:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2ce74:	4770      	bx	lr

0002ce76 <handle_event>:
{
   2ce76:	b410      	push	{r4}
   2ce78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2ce7c:	4604      	mov	r4, r0
   2ce7e:	4608      	mov	r0, r1
		if (handler->event != event) {
   2ce80:	7811      	ldrb	r1, [r2, #0]
   2ce82:	42a1      	cmp	r1, r4
   2ce84:	d004      	beq.n	2ce90 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   2ce86:	3208      	adds	r2, #8
   2ce88:	429a      	cmp	r2, r3
   2ce8a:	d1f9      	bne.n	2ce80 <handle_event+0xa>
}
   2ce8c:	bc10      	pop	{r4}
   2ce8e:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   2ce90:	8981      	ldrh	r1, [r0, #12]
   2ce92:	7853      	ldrb	r3, [r2, #1]
   2ce94:	4299      	cmp	r1, r3
   2ce96:	d3f9      	bcc.n	2ce8c <handle_event+0x16>
		handler->handler(buf);
   2ce98:	6853      	ldr	r3, [r2, #4]
}
   2ce9a:	bc10      	pop	{r4}
		handler->handler(buf);
   2ce9c:	4718      	bx	r3

0002ce9e <hci_data_buf_overflow>:
}
   2ce9e:	4770      	bx	lr

0002cea0 <hci_disconn_complete>:
{
   2cea0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2cea2:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   2cea4:	782e      	ldrb	r6, [r5, #0]
   2cea6:	b97e      	cbnz	r6, 2cec8 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   2cea8:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   2ceac:	f7f3 fd5c 	bl	20968 <bt_conn_lookup_handle>
	if (!conn) {
   2ceb0:	4604      	mov	r4, r0
   2ceb2:	b148      	cbz	r0, 2cec8 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   2ceb4:	78eb      	ldrb	r3, [r5, #3]
   2ceb6:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2ceb8:	4631      	mov	r1, r6
   2ceba:	f7f3 fd61 	bl	20980 <bt_conn_set_state>
		bt_conn_unref(conn);
   2cebe:	4620      	mov	r0, r4
}
   2cec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2cec4:	f000 bc5f 	b.w	2d786 <bt_conn_unref>
}
   2cec8:	bd70      	pop	{r4, r5, r6, pc}

0002ceca <le_data_len_change>:
{
   2ceca:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2cecc:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2cece:	8818      	ldrh	r0, [r3, #0]
   2ced0:	f7f3 fd4a 	bl	20968 <bt_conn_lookup_handle>
	if (!conn) {
   2ced4:	b118      	cbz	r0, 2cede <le_data_len_change+0x14>
}
   2ced6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   2ceda:	f000 bc54 	b.w	2d786 <bt_conn_unref>
}
   2cede:	bd08      	pop	{r3, pc}

0002cee0 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   2cee0:	2101      	movs	r1, #1
   2cee2:	3008      	adds	r0, #8
   2cee4:	f002 bde4 	b.w	2fab0 <net_buf_simple_pull_mem>

0002cee8 <hci_vendor_event>:
   2cee8:	4770      	bx	lr

0002ceea <hci_num_completed_packets>:
{
   2ceea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   2ceee:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   2cef0:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   2cef2:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   2cef4:	783b      	ldrb	r3, [r7, #0]
   2cef6:	429d      	cmp	r5, r3
   2cef8:	db01      	blt.n	2cefe <hci_num_completed_packets+0x14>
}
   2cefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   2cefe:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   2cf02:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   2cf06:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   2cf0a:	f7f3 fd2d 	bl	20968 <bt_conn_lookup_handle>
		if (!conn) {
   2cf0e:	4604      	mov	r4, r0
   2cf10:	b350      	cbz	r0, 2cf68 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   2cf12:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   2cf16:	b326      	cbz	r6, 2cf62 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   2cf18:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cf1c:	f3ef 8211 	mrs	r2, BASEPRI
   2cf20:	f383 8812 	msr	BASEPRI_MAX, r3
   2cf24:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   2cf28:	69e3      	ldr	r3, [r4, #28]
   2cf2a:	b16b      	cbz	r3, 2cf48 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   2cf2c:	3b01      	subs	r3, #1
   2cf2e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2cf30:	f382 8811 	msr	BASEPRI, r2
   2cf34:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2cf38:	4620      	mov	r0, r4
   2cf3a:	f7f3 fc69 	bl	20810 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2cf3e:	3e01      	subs	r6, #1
   2cf40:	f7fa ff9e 	bl	27e80 <z_impl_k_sem_give>
   2cf44:	b2b6      	uxth	r6, r6
   2cf46:	e7e6      	b.n	2cf16 <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   2cf48:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2cf4a:	b12b      	cbz	r3, 2cf58 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2cf4c:	69a1      	ldr	r1, [r4, #24]
   2cf4e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   2cf50:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2cf52:	428b      	cmp	r3, r1
	list->tail = node;
   2cf54:	bf08      	it	eq
   2cf56:	61a0      	streq	r0, [r4, #24]
   2cf58:	f382 8811 	msr	BASEPRI, r2
   2cf5c:	f3bf 8f6f 	isb	sy
			if (!node) {
   2cf60:	b923      	cbnz	r3, 2cf6c <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   2cf62:	4620      	mov	r0, r4
   2cf64:	f000 fc0f 	bl	2d786 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   2cf68:	3501      	adds	r5, #1
   2cf6a:	e7c3      	b.n	2cef4 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   2cf6c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2cf70:	f3ef 8111 	mrs	r1, BASEPRI
   2cf74:	f382 8812 	msr	BASEPRI_MAX, r2
   2cf78:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   2cf7c:	68da      	ldr	r2, [r3, #12]
   2cf7e:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   2cf80:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   2cf84:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   2cf86:	f8c3 800c 	str.w	r8, [r3, #12]
   2cf8a:	b94a      	cbnz	r2, 2cfa0 <hci_num_completed_packets+0xb6>
	list->head = node;
   2cf8c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   2cf90:	f381 8811 	msr	BASEPRI, r1
   2cf94:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   2cf98:	4648      	mov	r0, r9
   2cf9a:	f7fb f909 	bl	281b0 <k_work_submit>
   2cf9e:	e7cb      	b.n	2cf38 <hci_num_completed_packets+0x4e>
	parent->next = child;
   2cfa0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2cfa2:	6263      	str	r3, [r4, #36]	; 0x24
}
   2cfa4:	e7f4      	b.n	2cf90 <hci_num_completed_packets+0xa6>

0002cfa6 <le_conn_update_complete>:
{
   2cfa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   2cfa8:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2cfaa:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   2cfae:	f7f3 fcdb 	bl	20968 <bt_conn_lookup_handle>
	if (!conn) {
   2cfb2:	4604      	mov	r4, r0
   2cfb4:	b1c0      	cbz	r0, 2cfe8 <le_conn_update_complete+0x42>
	if (!evt->status) {
   2cfb6:	782b      	ldrb	r3, [r5, #0]
   2cfb8:	b9c3      	cbnz	r3, 2cfec <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   2cfba:	792a      	ldrb	r2, [r5, #4]
   2cfbc:	78eb      	ldrb	r3, [r5, #3]
   2cfbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cfc2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   2cfc6:	79aa      	ldrb	r2, [r5, #6]
   2cfc8:	796b      	ldrb	r3, [r5, #5]
   2cfca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cfce:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2cfd2:	79eb      	ldrb	r3, [r5, #7]
   2cfd4:	7a2a      	ldrb	r2, [r5, #8]
   2cfd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cfda:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   2cfde:	f7f3 fd95 	bl	20b0c <notify_le_param_updated>
	bt_conn_unref(conn);
   2cfe2:	4620      	mov	r0, r4
   2cfe4:	f000 fbcf 	bl	2d786 <bt_conn_unref>
}
   2cfe8:	b003      	add	sp, #12
   2cfea:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   2cfec:	2b1a      	cmp	r3, #26
   2cfee:	d1f8      	bne.n	2cfe2 <le_conn_update_complete+0x3c>
   2cff0:	78c3      	ldrb	r3, [r0, #3]
   2cff2:	2b01      	cmp	r3, #1
   2cff4:	d1f5      	bne.n	2cfe2 <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cff6:	f3bf 8f5b 	dmb	ish
   2cffa:	1d03      	adds	r3, r0, #4
   2cffc:	e853 2f00 	ldrex	r2, [r3]
   2d000:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   2d004:	e843 1500 	strex	r5, r1, [r3]
   2d008:	2d00      	cmp	r5, #0
   2d00a:	d1f7      	bne.n	2cffc <le_conn_update_complete+0x56>
   2d00c:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   2d010:	0553      	lsls	r3, r2, #21
   2d012:	d4e6      	bmi.n	2cfe2 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   2d014:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   2d018:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   2d01a:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   2d01c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2d020:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   2d022:	f7f4 f84d 	bl	210c0 <bt_l2cap_update_conn_param>
   2d026:	e7dc      	b.n	2cfe2 <le_conn_update_complete+0x3c>

0002d028 <hci_le_read_max_data_len>:
{
   2d028:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d02a:	4606      	mov	r6, r0
   2d02c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   2d02e:	aa01      	add	r2, sp, #4
   2d030:	2100      	movs	r1, #0
   2d032:	f242 002f 	movw	r0, #8239	; 0x202f
   2d036:	f7f2 f98f 	bl	1f358 <bt_hci_cmd_send_sync>
	if (err) {
   2d03a:	4604      	mov	r4, r0
   2d03c:	b948      	cbnz	r0, 2d052 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   2d03e:	9801      	ldr	r0, [sp, #4]
   2d040:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   2d042:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2d046:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   2d048:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   2d04c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   2d04e:	f7f6 fa69 	bl	23524 <net_buf_unref>
}
   2d052:	4620      	mov	r0, r4
   2d054:	b002      	add	sp, #8
   2d056:	bd70      	pop	{r4, r5, r6, pc}

0002d058 <bt_hci_disconnect>:
{
   2d058:	b570      	push	{r4, r5, r6, lr}
   2d05a:	4606      	mov	r6, r0
   2d05c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2d05e:	f240 4006 	movw	r0, #1030	; 0x406
   2d062:	2103      	movs	r1, #3
   2d064:	f7f2 f940 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   2d068:	4604      	mov	r4, r0
   2d06a:	b168      	cbz	r0, 2d088 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2d06c:	2103      	movs	r1, #3
   2d06e:	3008      	adds	r0, #8
   2d070:	f002 fcf7 	bl	2fa62 <net_buf_simple_add>
	disconn->reason = reason;
   2d074:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2d076:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d078:	4621      	mov	r1, r4
   2d07a:	2200      	movs	r2, #0
}
   2d07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d080:	f240 4006 	movw	r0, #1030	; 0x406
   2d084:	f7f2 b968 	b.w	1f358 <bt_hci_cmd_send_sync>
}
   2d088:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d08c:	bd70      	pop	{r4, r5, r6, pc}

0002d08e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2d08e:	8802      	ldrh	r2, [r0, #0]
   2d090:	8843      	ldrh	r3, [r0, #2]
   2d092:	429a      	cmp	r2, r3
{
   2d094:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2d096:	d818      	bhi.n	2d0ca <bt_le_conn_params_valid+0x3c>
   2d098:	2a05      	cmp	r2, #5
   2d09a:	d916      	bls.n	2d0ca <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2d09c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2d0a0:	d813      	bhi.n	2d0ca <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   2d0a2:	8884      	ldrh	r4, [r0, #4]
   2d0a4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2d0a8:	d20f      	bcs.n	2d0ca <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d0aa:	88c1      	ldrh	r1, [r0, #6]
   2d0ac:	f1a1 020a 	sub.w	r2, r1, #10
   2d0b0:	b292      	uxth	r2, r2
   2d0b2:	f640 4076 	movw	r0, #3190	; 0xc76
   2d0b6:	4282      	cmp	r2, r0
   2d0b8:	d807      	bhi.n	2d0ca <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2d0ba:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d0be:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   2d0c2:	bf34      	ite	cc
   2d0c4:	2001      	movcc	r0, #1
   2d0c6:	2000      	movcs	r0, #0
}
   2d0c8:	bd10      	pop	{r4, pc}
		return false;
   2d0ca:	2000      	movs	r0, #0
   2d0cc:	e7fc      	b.n	2d0c8 <bt_le_conn_params_valid+0x3a>

0002d0ce <bt_le_set_data_len>:
{
   2d0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d0d0:	4607      	mov	r7, r0
   2d0d2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d0d4:	f242 0022 	movw	r0, #8226	; 0x2022
   2d0d8:	2106      	movs	r1, #6
{
   2d0da:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d0dc:	f7f2 f904 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   2d0e0:	4604      	mov	r4, r0
   2d0e2:	b170      	cbz	r0, 2d102 <bt_le_set_data_len+0x34>
   2d0e4:	2106      	movs	r1, #6
   2d0e6:	3008      	adds	r0, #8
   2d0e8:	f002 fcbb 	bl	2fa62 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d0ec:	883b      	ldrh	r3, [r7, #0]
   2d0ee:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2d0f0:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2d0f2:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2d0f4:	4621      	mov	r1, r4
   2d0f6:	f242 0022 	movw	r0, #8226	; 0x2022
}
   2d0fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2d0fe:	f7f2 bb61 	b.w	1f7c4 <bt_hci_cmd_send>
}
   2d102:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d108 <bt_le_set_phy>:
{
   2d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d10c:	4680      	mov	r8, r0
   2d10e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d110:	f242 0032 	movw	r0, #8242	; 0x2032
   2d114:	2107      	movs	r1, #7
{
   2d116:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2d11a:	4616      	mov	r6, r2
   2d11c:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d11e:	f7f2 f8e3 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   2d122:	4604      	mov	r4, r0
   2d124:	b190      	cbz	r0, 2d14c <bt_le_set_phy+0x44>
   2d126:	2107      	movs	r1, #7
   2d128:	3008      	adds	r0, #8
   2d12a:	f002 fc9a 	bl	2fa62 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d12e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2d132:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2d134:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2d136:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d138:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2d13a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2d13e:	4621      	mov	r1, r4
   2d140:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2d144:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2d148:	f7f2 bb3c 	b.w	1f7c4 <bt_hci_cmd_send>
}
   2d14c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002d154 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2d154:	6880      	ldr	r0, [r0, #8]
   2d156:	f7f2 bbbd 	b.w	1f8d4 <bt_hci_le_enh_conn_complete>

0002d15a <le_legacy_conn_complete>:
{
   2d15a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2d15c:	6881      	ldr	r1, [r0, #8]
{
   2d15e:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   2d160:	780b      	ldrb	r3, [r1, #0]
   2d162:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2d166:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2d16a:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2d16e:	78cb      	ldrb	r3, [r1, #3]
   2d170:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2d174:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2d178:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2d17c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2d180:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2d184:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2d188:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2d18c:	7c4b      	ldrb	r3, [r1, #17]
   2d18e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   2d192:	2207      	movs	r2, #7
   2d194:	3104      	adds	r1, #4
   2d196:	a803      	add	r0, sp, #12
   2d198:	f7ff fd8f 	bl	2ccba <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2d19c:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   2d19e:	4669      	mov	r1, sp
   2d1a0:	2206      	movs	r2, #6
   2d1a2:	f10d 0013 	add.w	r0, sp, #19
   2d1a6:	9400      	str	r4, [sp, #0]
   2d1a8:	f8ad 4004 	strh.w	r4, [sp, #4]
   2d1ac:	f7ff fd85 	bl	2ccba <memcpy>
   2d1b0:	2206      	movs	r2, #6
   2d1b2:	4669      	mov	r1, sp
   2d1b4:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2d1b8:	9400      	str	r4, [sp, #0]
   2d1ba:	f8ad 4004 	strh.w	r4, [sp, #4]
   2d1be:	f7ff fd7c 	bl	2ccba <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   2d1c2:	a802      	add	r0, sp, #8
   2d1c4:	f7f2 fb86 	bl	1f8d4 <bt_hci_le_enh_conn_complete>
}
   2d1c8:	b00a      	add	sp, #40	; 0x28
   2d1ca:	bd10      	pop	{r4, pc}

0002d1cc <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2d1cc:	6883      	ldr	r3, [r0, #8]
{
   2d1ce:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   2d1d0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   2d1d4:	f7f3 fbc8 	bl	20968 <bt_conn_lookup_handle>
	if (!conn) {
   2d1d8:	4604      	mov	r4, r0
   2d1da:	b310      	cbz	r0, 2d222 <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d1dc:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   2d1e0:	1d03      	adds	r3, r0, #4
   2d1e2:	e853 2f00 	ldrex	r2, [r3]
   2d1e6:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   2d1ea:	e843 1c00 	strex	ip, r1, [r3]
   2d1ee:	f1bc 0f00 	cmp.w	ip, #0
   2d1f2:	d1f6      	bne.n	2d1e2 <le_phy_update_complete+0x16>
   2d1f4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2d1f8:	0612      	lsls	r2, r2, #24
   2d1fa:	d50d      	bpl.n	2d218 <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d1fc:	f3bf 8f5b 	dmb	ish
   2d200:	e853 2f00 	ldrex	r2, [r3]
   2d204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   2d208:	e843 2100 	strex	r1, r2, [r3]
   2d20c:	2900      	cmp	r1, #0
   2d20e:	d1f7      	bne.n	2d200 <le_phy_update_complete+0x34>
   2d210:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   2d214:	f7f2 faf8 	bl	1f808 <conn_auto_initiate>
	bt_conn_unref(conn);
   2d218:	4620      	mov	r0, r4
}
   2d21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   2d21e:	f000 bab2 	b.w	2d786 <bt_conn_unref>
}
   2d222:	bd10      	pop	{r4, pc}

0002d224 <le_remote_feat_complete>:
{
   2d224:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   2d226:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2d228:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   2d22c:	f7f3 fb9c 	bl	20968 <bt_conn_lookup_handle>
	if (!conn) {
   2d230:	4604      	mov	r4, r0
   2d232:	b1d8      	cbz	r0, 2d26c <le_remote_feat_complete+0x48>
	if (!evt->status) {
   2d234:	782b      	ldrb	r3, [r5, #0]
   2d236:	b923      	cbnz	r3, 2d242 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   2d238:	2208      	movs	r2, #8
   2d23a:	1ce9      	adds	r1, r5, #3
   2d23c:	30ac      	adds	r0, #172	; 0xac
   2d23e:	f7ff fd3c 	bl	2ccba <memcpy>
   2d242:	f3bf 8f5b 	dmb	ish
   2d246:	1d23      	adds	r3, r4, #4
   2d248:	e853 2f00 	ldrex	r2, [r3]
   2d24c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2d250:	e843 2100 	strex	r1, r2, [r3]
   2d254:	2900      	cmp	r1, #0
   2d256:	d1f7      	bne.n	2d248 <le_remote_feat_complete+0x24>
   2d258:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   2d25c:	4620      	mov	r0, r4
   2d25e:	f7f2 fad3 	bl	1f808 <conn_auto_initiate>
	bt_conn_unref(conn);
   2d262:	4620      	mov	r0, r4
}
   2d264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2d268:	f000 ba8d 	b.w	2d786 <bt_conn_unref>
}
   2d26c:	bd38      	pop	{r3, r4, r5, pc}

0002d26e <le_conn_param_neg_reply>:
{
   2d26e:	b570      	push	{r4, r5, r6, lr}
   2d270:	4606      	mov	r6, r0
   2d272:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2d274:	f242 0021 	movw	r0, #8225	; 0x2021
   2d278:	2103      	movs	r1, #3
   2d27a:	f7f2 f835 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   2d27e:	4604      	mov	r4, r0
   2d280:	b160      	cbz	r0, 2d29c <le_conn_param_neg_reply+0x2e>
   2d282:	2103      	movs	r1, #3
   2d284:	3008      	adds	r0, #8
   2d286:	f002 fbec 	bl	2fa62 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   2d28a:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   2d28c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2d28e:	4621      	mov	r1, r4
   2d290:	f242 0021 	movw	r0, #8225	; 0x2021
}
   2d294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2d298:	f7f2 ba94 	b.w	1f7c4 <bt_hci_cmd_send>
}
   2d29c:	bd70      	pop	{r4, r5, r6, pc}

0002d29e <le_conn_param_req>:
{
   2d29e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   2d2a0:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   2d2a2:	78d9      	ldrb	r1, [r3, #3]
   2d2a4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   2d2a6:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   2d2a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2d2ac:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   2d2b0:	7959      	ldrb	r1, [r3, #5]
   2d2b2:	791a      	ldrb	r2, [r3, #4]
   2d2b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2d2b8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   2d2bc:	799a      	ldrb	r2, [r3, #6]
   2d2be:	79d9      	ldrb	r1, [r3, #7]
   2d2c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2d2c4:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2d2c8:	7a1a      	ldrb	r2, [r3, #8]
   2d2ca:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   2d2cc:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2d2ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   2d2d2:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2d2d4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   2d2d8:	f7f3 fb46 	bl	20968 <bt_conn_lookup_handle>
	if (!conn) {
   2d2dc:	4606      	mov	r6, r0
   2d2de:	b928      	cbnz	r0, 2d2ec <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   2d2e0:	2102      	movs	r1, #2
   2d2e2:	4620      	mov	r0, r4
   2d2e4:	f7ff ffc3 	bl	2d26e <le_conn_param_neg_reply>
}
   2d2e8:	b003      	add	sp, #12
   2d2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   2d2ec:	4669      	mov	r1, sp
   2d2ee:	f7f3 fc59 	bl	20ba4 <le_param_req>
   2d2f2:	b938      	cbnz	r0, 2d304 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   2d2f4:	211e      	movs	r1, #30
   2d2f6:	4620      	mov	r0, r4
   2d2f8:	f7ff ffb9 	bl	2d26e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   2d2fc:	4630      	mov	r0, r6
   2d2fe:	f000 fa42 	bl	2d786 <bt_conn_unref>
   2d302:	e7f1      	b.n	2d2e8 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2d304:	210e      	movs	r1, #14
   2d306:	f242 0020 	movw	r0, #8224	; 0x2020
   2d30a:	f7f1 ffed 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   2d30e:	4605      	mov	r5, r0
   2d310:	2800      	cmp	r0, #0
   2d312:	d0f3      	beq.n	2d2fc <le_conn_param_req+0x5e>
   2d314:	210e      	movs	r1, #14
   2d316:	3008      	adds	r0, #8
   2d318:	f002 fba3 	bl	2fa62 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   2d31c:	220e      	movs	r2, #14
   2d31e:	4604      	mov	r4, r0
   2d320:	2100      	movs	r1, #0
   2d322:	f7ff fcd5 	bl	2ccd0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2d326:	f8bd 3000 	ldrh.w	r3, [sp]
   2d32a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2d32c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2d330:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2d332:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2d336:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2d338:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   2d33c:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2d33e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2d340:	4629      	mov	r1, r5
   2d342:	f242 0020 	movw	r0, #8224	; 0x2020
   2d346:	f7f2 fa3d 	bl	1f7c4 <bt_hci_cmd_send>
   2d34a:	e7d7      	b.n	2d2fc <le_conn_param_req+0x5e>

0002d34c <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2d34c:	2000      	movs	r0, #0
   2d34e:	4770      	bx	lr

0002d350 <bt_lookup_id_addr>:
}
   2d350:	4608      	mov	r0, r1
   2d352:	4770      	bx	lr

0002d354 <bt_id_set_adv_private_addr>:
{
   2d354:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2d356:	2106      	movs	r1, #6
   2d358:	4668      	mov	r0, sp
   2d35a:	f7f8 fc39 	bl	25bd0 <bt_rand>
	if (err) {
   2d35e:	b940      	cbnz	r0, 2d372 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   2d360:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   2d364:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2d366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d36a:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2d36e:	f7f2 fd69 	bl	1fe44 <set_random_address>
}
   2d372:	b003      	add	sp, #12
   2d374:	f85d fb04 	ldr.w	pc, [sp], #4

0002d378 <bt_id_adv_random_addr_check>:
}
   2d378:	2001      	movs	r0, #1
   2d37a:	4770      	bx	lr

0002d37c <get_adv_channel_map>:
{
   2d37c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2d37e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2d382:	bf0c      	ite	eq
   2d384:	2007      	moveq	r0, #7
   2d386:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2d388:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2d38a:	bf48      	it	mi
   2d38c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2d390:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2d392:	bf48      	it	mi
   2d394:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2d398:	4770      	bx	lr

0002d39a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d39a:	f3bf 8f5b 	dmb	ish
   2d39e:	6800      	ldr	r0, [r0, #0]
   2d3a0:	f3bf 8f5b 	dmb	ish
}
   2d3a4:	4770      	bx	lr

0002d3a6 <atomic_and>:
{
   2d3a6:	4603      	mov	r3, r0
}
   2d3a8:	f3bf 8f5b 	dmb	ish
   2d3ac:	e853 0f00 	ldrex	r0, [r3]
   2d3b0:	ea00 0201 	and.w	r2, r0, r1
   2d3b4:	e843 2c00 	strex	ip, r2, [r3]
   2d3b8:	f1bc 0f00 	cmp.w	ip, #0
   2d3bc:	d1f6      	bne.n	2d3ac <atomic_and+0x6>
   2d3be:	f3bf 8f5b 	dmb	ish
   2d3c2:	4770      	bx	lr

0002d3c4 <hci_set_ad>:
{
   2d3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d3c8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2d3ca:	2120      	movs	r1, #32
{
   2d3cc:	4682      	mov	sl, r0
   2d3ce:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2d3d0:	f7f1 ff8a 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   2d3d4:	4606      	mov	r6, r0
   2d3d6:	2800      	cmp	r0, #0
   2d3d8:	d04a      	beq.n	2d470 <hci_set_ad+0xac>
   2d3da:	2120      	movs	r1, #32
   2d3dc:	3008      	adds	r0, #8
   2d3de:	f002 fb40 	bl	2fa62 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   2d3e2:	2220      	movs	r2, #32
   2d3e4:	2100      	movs	r1, #0
   2d3e6:	4681      	mov	r9, r0
   2d3e8:	f7ff fc72 	bl	2ccd0 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   2d3ec:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   2d3f0:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   2d3f4:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   2d3f6:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   2d3f8:	f8d4 8000 	ldr.w	r8, [r4]
   2d3fc:	2300      	movs	r3, #0
   2d3fe:	6862      	ldr	r2, [r4, #4]
   2d400:	4293      	cmp	r3, r2
   2d402:	d30d      	bcc.n	2d420 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   2d404:	9b00      	ldr	r3, [sp, #0]
   2d406:	3408      	adds	r4, #8
   2d408:	42a3      	cmp	r3, r4
   2d40a:	d1f5      	bne.n	2d3f8 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2d40c:	2200      	movs	r2, #0
   2d40e:	4631      	mov	r1, r6
   2d410:	4650      	mov	r0, sl
	*data_len = set_data_len;
   2d412:	f889 5000 	strb.w	r5, [r9]
}
   2d416:	b003      	add	sp, #12
   2d418:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2d41c:	f7f1 bf9c 	b.w	1f358 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   2d420:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   2d424:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   2d428:	1ca8      	adds	r0, r5, #2
   2d42a:	1811      	adds	r1, r2, r0
   2d42c:	291f      	cmp	r1, #31
   2d42e:	d908      	bls.n	2d442 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   2d430:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   2d434:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   2d438:	d11f      	bne.n	2d47a <hci_set_ad+0xb6>
   2d43a:	2a00      	cmp	r2, #0
   2d43c:	dd1d      	ble.n	2d47a <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   2d43e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   2d442:	b2d7      	uxtb	r7, r2
   2d444:	1c79      	adds	r1, r7, #1
   2d446:	f80b 1005 	strb.w	r1, [fp, r5]
   2d44a:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   2d44c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   2d44e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   2d452:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   2d456:	f8d8 1004 	ldr.w	r1, [r8, #4]
   2d45a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   2d45c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   2d45e:	f7ff fc2c 	bl	2ccba <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   2d462:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   2d464:	443d      	add	r5, r7
   2d466:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   2d468:	3301      	adds	r3, #1
   2d46a:	f108 0808 	add.w	r8, r8, #8
   2d46e:	e7c6      	b.n	2d3fe <hci_set_ad+0x3a>
		return -ENOBUFS;
   2d470:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2d474:	b003      	add	sp, #12
   2d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   2d47a:	4630      	mov	r0, r6
   2d47c:	f7f6 f852 	bl	23524 <net_buf_unref>
		return err;
   2d480:	f06f 0015 	mvn.w	r0, #21
   2d484:	e7f6      	b.n	2d474 <hci_set_ad+0xb0>

0002d486 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d486:	2301      	movs	r3, #1
{
   2d488:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d48a:	fa03 f101 	lsl.w	r1, r3, r1
{
   2d48e:	4604      	mov	r4, r0
	if (val) {
   2d490:	b162      	cbz	r2, 2d4ac <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d492:	f3bf 8f5b 	dmb	ish
   2d496:	e854 3f00 	ldrex	r3, [r4]
   2d49a:	430b      	orrs	r3, r1
   2d49c:	e844 3200 	strex	r2, r3, [r4]
   2d4a0:	2a00      	cmp	r2, #0
   2d4a2:	d1f8      	bne.n	2d496 <atomic_set_bit_to+0x10>
   2d4a4:	f3bf 8f5b 	dmb	ish
	}
}
   2d4a8:	bc10      	pop	{r4}
   2d4aa:	4770      	bx	lr
   2d4ac:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d4ae:	43c9      	mvns	r1, r1
   2d4b0:	f7ff bf79 	b.w	2d3a6 <atomic_and>

0002d4b4 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2d4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d4b8:	b087      	sub	sp, #28
   2d4ba:	4605      	mov	r5, r0
   2d4bc:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2d4c0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2d4c4:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2d4c8:	460c      	mov	r4, r1
   2d4ca:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2d4cc:	2100      	movs	r1, #0
   2d4ce:	2210      	movs	r2, #16
   2d4d0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2d4d2:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   2d4d4:	f7ff fbfc 	bl	2ccd0 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2d4d8:	b186      	cbz	r6, 2d4fc <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2d4da:	f7f2 fc95 	bl	1fe08 <bt_get_name>
   2d4de:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2d4e0:	2c00      	cmp	r4, #0
   2d4e2:	d139      	bne.n	2d558 <le_adv_update.constprop.0+0xa4>
   2d4e4:	2f00      	cmp	r7, #0
   2d4e6:	d142      	bne.n	2d56e <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2d4e8:	4658      	mov	r0, fp
   2d4ea:	f7ff fba3 	bl	2cc34 <strlen>
   2d4ee:	2309      	movs	r3, #9
   2d4f0:	f88d 3000 	strb.w	r3, [sp]
   2d4f4:	f88d 0001 	strb.w	r0, [sp, #1]
   2d4f8:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   2d4fc:	2e01      	cmp	r6, #1
			d_len = 2;
   2d4fe:	bf0c      	ite	eq
   2d500:	2202      	moveq	r2, #2
		d_len = 1;
   2d502:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2d504:	a902      	add	r1, sp, #8
   2d506:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   2d50a:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   2d50e:	bf04      	itt	eq
   2d510:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   2d514:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2d516:	f7ff ff55 	bl	2d3c4 <hci_set_ad>
		if (err) {
   2d51a:	4604      	mov	r4, r0
   2d51c:	b978      	cbnz	r0, 2d53e <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   2d51e:	f1ba 0f00 	cmp.w	sl, #0
   2d522:	d126      	bne.n	2d572 <le_adv_update.constprop.0+0xbe>
   2d524:	3510      	adds	r5, #16
   2d526:	f3bf 8f5b 	dmb	ish
   2d52a:	e855 3f00 	ldrex	r3, [r5]
   2d52e:	f043 0304 	orr.w	r3, r3, #4
   2d532:	e845 3200 	strex	r2, r3, [r5]
   2d536:	2a00      	cmp	r2, #0
   2d538:	d1f7      	bne.n	2d52a <le_adv_update.constprop.0+0x76>
   2d53a:	f3bf 8f5b 	dmb	ish
}
   2d53e:	4620      	mov	r0, r4
   2d540:	b007      	add	sp, #28
   2d542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2d546:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2d54a:	3a08      	subs	r2, #8
   2d54c:	2a01      	cmp	r2, #1
   2d54e:	d925      	bls.n	2d59c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2d550:	3301      	adds	r3, #1
   2d552:	4598      	cmp	r8, r3
   2d554:	d1f7      	bne.n	2d546 <le_adv_update.constprop.0+0x92>
   2d556:	e7c5      	b.n	2d4e4 <le_adv_update.constprop.0+0x30>
   2d558:	2300      	movs	r3, #0
   2d55a:	e7fa      	b.n	2d552 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2d55c:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2d560:	3a08      	subs	r2, #8
   2d562:	2a01      	cmp	r2, #1
   2d564:	d91a      	bls.n	2d59c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2d566:	3301      	adds	r3, #1
   2d568:	4599      	cmp	r9, r3
   2d56a:	d1f7      	bne.n	2d55c <le_adv_update.constprop.0+0xa8>
   2d56c:	e7bc      	b.n	2d4e8 <le_adv_update.constprop.0+0x34>
   2d56e:	2300      	movs	r3, #0
   2d570:	e7fa      	b.n	2d568 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   2d572:	2e02      	cmp	r6, #2
   2d574:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2d578:	bf08      	it	eq
   2d57a:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d57c:	a902      	add	r1, sp, #8
			d_len = 2;
   2d57e:	bf08      	it	eq
   2d580:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d582:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2d586:	bf08      	it	eq
   2d588:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2d58c:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d590:	f7ff ff18 	bl	2d3c4 <hci_set_ad>
		if (err) {
   2d594:	2800      	cmp	r0, #0
   2d596:	d0c5      	beq.n	2d524 <le_adv_update.constprop.0+0x70>
   2d598:	4604      	mov	r4, r0
   2d59a:	e7d0      	b.n	2d53e <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   2d59c:	f06f 0415 	mvn.w	r4, #21
   2d5a0:	e7cd      	b.n	2d53e <le_adv_update.constprop.0+0x8a>

0002d5a2 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2d5a2:	6843      	ldr	r3, [r0, #4]
   2d5a4:	f013 0008 	ands.w	r0, r3, #8
   2d5a8:	d00a      	beq.n	2d5c0 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2d5aa:	035a      	lsls	r2, r3, #13
   2d5ac:	d407      	bmi.n	2d5be <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2d5ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2d5b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
   2d5b6:	bf0c      	ite	eq
   2d5b8:	2001      	moveq	r0, #1
   2d5ba:	2002      	movne	r0, #2
   2d5bc:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2d5be:	2001      	movs	r0, #1
}
   2d5c0:	4770      	bx	lr

0002d5c2 <bt_le_adv_set_enable_legacy>:
{
   2d5c2:	b570      	push	{r4, r5, r6, lr}
   2d5c4:	4606      	mov	r6, r0
   2d5c6:	b086      	sub	sp, #24
   2d5c8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2d5ca:	f242 000a 	movw	r0, #8202	; 0x200a
   2d5ce:	2101      	movs	r1, #1
   2d5d0:	f7f1 fe8a 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   2d5d4:	4604      	mov	r4, r0
   2d5d6:	b1b0      	cbz	r0, 2d606 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   2d5d8:	3008      	adds	r0, #8
   2d5da:	b195      	cbz	r5, 2d602 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2d5dc:	2101      	movs	r1, #1
   2d5de:	f002 fa4f 	bl	2fa80 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2d5e2:	f106 0210 	add.w	r2, r6, #16
   2d5e6:	a903      	add	r1, sp, #12
   2d5e8:	4620      	mov	r0, r4
   2d5ea:	9500      	str	r5, [sp, #0]
   2d5ec:	2306      	movs	r3, #6
   2d5ee:	f7f1 fe69 	bl	1f2c4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2d5f2:	2200      	movs	r2, #0
   2d5f4:	4621      	mov	r1, r4
   2d5f6:	f242 000a 	movw	r0, #8202	; 0x200a
   2d5fa:	f7f1 fead 	bl	1f358 <bt_hci_cmd_send_sync>
}
   2d5fe:	b006      	add	sp, #24
   2d600:	bd70      	pop	{r4, r5, r6, pc}
   2d602:	4629      	mov	r1, r5
   2d604:	e7eb      	b.n	2d5de <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2d606:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d60a:	e7f8      	b.n	2d5fe <bt_le_adv_set_enable_legacy+0x3c>

0002d60c <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2d60c:	3018      	adds	r0, #24
   2d60e:	f004 b9c9 	b.w	319a4 <k_work_cancel_delayable>

0002d612 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   2d612:	f7f2 bfb7 	b.w	20584 <bt_le_adv_stop>

0002d616 <tx_notify>:
{
   2d616:	b570      	push	{r4, r5, r6, lr}
   2d618:	4604      	mov	r4, r0
	__asm__ volatile(
   2d61a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d61e:	f3ef 8311 	mrs	r3, BASEPRI
   2d622:	f382 8812 	msr	BASEPRI_MAX, r2
   2d626:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2d62a:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2d62c:	b920      	cbnz	r0, 2d638 <tx_notify+0x22>
	__asm__ volatile(
   2d62e:	f383 8811 	msr	BASEPRI, r3
   2d632:	f3bf 8f6f 	isb	sy
}
   2d636:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d638:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2d63a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2d63c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d63e:	4288      	cmp	r0, r1
	list->tail = node;
   2d640:	bf08      	it	eq
   2d642:	6262      	streq	r2, [r4, #36]	; 0x24
   2d644:	f383 8811 	msr	BASEPRI, r3
   2d648:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2d64c:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2d650:	f7f3 f826 	bl	206a0 <tx_free>
		cb(conn, user_data);
   2d654:	4631      	mov	r1, r6
   2d656:	4620      	mov	r0, r4
   2d658:	47a8      	blx	r5
	while (1) {
   2d65a:	e7de      	b.n	2d61a <tx_notify+0x4>

0002d65c <tx_complete_work>:
	tx_notify(conn);
   2d65c:	3828      	subs	r0, #40	; 0x28
   2d65e:	f7ff bfda 	b.w	2d616 <tx_notify>

0002d662 <bt_conn_reset_rx_state>:
{
   2d662:	b510      	push	{r4, lr}
   2d664:	4604      	mov	r4, r0
	if (!conn->rx) {
   2d666:	6900      	ldr	r0, [r0, #16]
   2d668:	b118      	cbz	r0, 2d672 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2d66a:	f7f5 ff5b 	bl	23524 <net_buf_unref>
	conn->rx = NULL;
   2d66e:	2300      	movs	r3, #0
   2d670:	6123      	str	r3, [r4, #16]
}
   2d672:	bd10      	pop	{r4, pc}

0002d674 <conn_cleanup>:
{
   2d674:	b570      	push	{r4, r5, r6, lr}
   2d676:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2d678:	f100 0638 	add.w	r6, r0, #56	; 0x38
   2d67c:	2200      	movs	r2, #0
   2d67e:	2300      	movs	r3, #0
   2d680:	4630      	mov	r0, r6
   2d682:	f002 f99d 	bl	2f9c0 <net_buf_get>
   2d686:	4605      	mov	r5, r0
   2d688:	b950      	cbnz	r0, 2d6a0 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   2d68a:	4620      	mov	r0, r4
   2d68c:	f7ff ffe9 	bl	2d662 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2d690:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2d694:	2200      	movs	r2, #0
}
   2d696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2d69a:	2300      	movs	r3, #0
   2d69c:	f7fa be26 	b.w	282ec <k_work_reschedule>
		if (tx_data(buf)->tx) {
   2d6a0:	6968      	ldr	r0, [r5, #20]
   2d6a2:	b108      	cbz	r0, 2d6a8 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   2d6a4:	f7f2 fffc 	bl	206a0 <tx_free>
		net_buf_unref(buf);
   2d6a8:	4628      	mov	r0, r5
   2d6aa:	f7f5 ff3b 	bl	23524 <net_buf_unref>
   2d6ae:	e7e5      	b.n	2d67c <conn_cleanup+0x8>

0002d6b0 <bt_conn_recv>:
{
   2d6b0:	b570      	push	{r4, r5, r6, lr}
   2d6b2:	4616      	mov	r6, r2
   2d6b4:	4604      	mov	r4, r0
   2d6b6:	460d      	mov	r5, r1
	tx_notify(conn);
   2d6b8:	f7ff ffad 	bl	2d616 <tx_notify>
	switch (flags) {
   2d6bc:	2e01      	cmp	r6, #1
   2d6be:	d01a      	beq.n	2d6f6 <bt_conn_recv+0x46>
   2d6c0:	2e02      	cmp	r6, #2
   2d6c2:	d11a      	bne.n	2d6fa <bt_conn_recv+0x4a>
		if (conn->rx) {
   2d6c4:	6923      	ldr	r3, [r4, #16]
   2d6c6:	b113      	cbz	r3, 2d6ce <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   2d6c8:	4620      	mov	r0, r4
   2d6ca:	f7ff ffca 	bl	2d662 <bt_conn_reset_rx_state>
		conn->rx = buf;
   2d6ce:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   2d6d0:	6921      	ldr	r1, [r4, #16]
   2d6d2:	898a      	ldrh	r2, [r1, #12]
   2d6d4:	2a01      	cmp	r2, #1
   2d6d6:	d93a      	bls.n	2d74e <bt_conn_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   2d6d8:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   2d6da:	7845      	ldrb	r5, [r0, #1]
   2d6dc:	7803      	ldrb	r3, [r0, #0]
   2d6de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2d6e2:	3304      	adds	r3, #4
   2d6e4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   2d6e6:	429a      	cmp	r2, r3
   2d6e8:	d331      	bcc.n	2d74e <bt_conn_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   2d6ea:	d928      	bls.n	2d73e <bt_conn_recv+0x8e>
		bt_conn_reset_rx_state(conn);
   2d6ec:	4620      	mov	r0, r4
}
   2d6ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   2d6f2:	f7ff bfb6 	b.w	2d662 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   2d6f6:	6920      	ldr	r0, [r4, #16]
   2d6f8:	b918      	cbnz	r0, 2d702 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   2d6fa:	4620      	mov	r0, r4
   2d6fc:	f7ff ffb1 	bl	2d662 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   2d700:	e001      	b.n	2d706 <bt_conn_recv+0x56>
		if (!buf->len) {
   2d702:	89ae      	ldrh	r6, [r5, #12]
   2d704:	b926      	cbnz	r6, 2d710 <bt_conn_recv+0x60>
			net_buf_unref(buf);
   2d706:	4628      	mov	r0, r5
}
   2d708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   2d70c:	f7f5 bf0a 	b.w	23524 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   2d710:	3008      	adds	r0, #8
   2d712:	f002 f9e1 	bl	2fad8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   2d716:	4286      	cmp	r6, r0
   2d718:	d907      	bls.n	2d72a <bt_conn_recv+0x7a>
			bt_l2cap_recv(conn, conn->rx, false);
   2d71a:	6921      	ldr	r1, [r4, #16]
   2d71c:	2200      	movs	r2, #0
   2d71e:	4620      	mov	r0, r4
   2d720:	f000 f9a8 	bl	2da74 <bt_l2cap_recv>
			conn->rx = NULL;
   2d724:	2300      	movs	r3, #0
   2d726:	6123      	str	r3, [r4, #16]
   2d728:	e7ed      	b.n	2d706 <bt_conn_recv+0x56>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2d72a:	6920      	ldr	r0, [r4, #16]
   2d72c:	89aa      	ldrh	r2, [r5, #12]
   2d72e:	68a9      	ldr	r1, [r5, #8]
   2d730:	3008      	adds	r0, #8
   2d732:	f002 f99c 	bl	2fa6e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   2d736:	4628      	mov	r0, r5
   2d738:	f7f5 fef4 	bl	23524 <net_buf_unref>
		break;
   2d73c:	e7c8      	b.n	2d6d0 <bt_conn_recv+0x20>
	conn->rx = NULL;
   2d73e:	2300      	movs	r3, #0
   2d740:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   2d742:	4620      	mov	r0, r4
   2d744:	2201      	movs	r2, #1
}
   2d746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   2d74a:	f000 b993 	b.w	2da74 <bt_l2cap_recv>
}
   2d74e:	bd70      	pop	{r4, r5, r6, pc}

0002d750 <bt_conn_ref>:
{
   2d750:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2d752:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d756:	f3bf 8f5b 	dmb	ish
   2d75a:	6813      	ldr	r3, [r2, #0]
   2d75c:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2d760:	b17b      	cbz	r3, 2d782 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2d762:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2d766:	1c59      	adds	r1, r3, #1
   2d768:	e852 4f00 	ldrex	r4, [r2]
   2d76c:	429c      	cmp	r4, r3
   2d76e:	d104      	bne.n	2d77a <bt_conn_ref+0x2a>
   2d770:	e842 1c00 	strex	ip, r1, [r2]
   2d774:	f1bc 0f00 	cmp.w	ip, #0
   2d778:	d1f6      	bne.n	2d768 <bt_conn_ref+0x18>
   2d77a:	f3bf 8f5b 	dmb	ish
   2d77e:	d1ea      	bne.n	2d756 <bt_conn_ref+0x6>
}
   2d780:	bd10      	pop	{r4, pc}
			return NULL;
   2d782:	4618      	mov	r0, r3
   2d784:	e7fc      	b.n	2d780 <bt_conn_ref+0x30>

0002d786 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2d786:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2d78a:	f3bf 8f5b 	dmb	ish
   2d78e:	e853 2f00 	ldrex	r2, [r3]
   2d792:	3a01      	subs	r2, #1
   2d794:	e843 2100 	strex	r1, r2, [r3]
   2d798:	2900      	cmp	r1, #0
   2d79a:	d1f8      	bne.n	2d78e <bt_conn_unref+0x8>
   2d79c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2d7a0:	7883      	ldrb	r3, [r0, #2]
   2d7a2:	2b01      	cmp	r3, #1
   2d7a4:	d108      	bne.n	2d7b8 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d7a6:	f3bf 8f5b 	dmb	ish
   2d7aa:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2d7ae:	f3bf 8f5b 	dmb	ish
   2d7b2:	b90b      	cbnz	r3, 2d7b8 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   2d7b4:	f7f2 bf34 	b.w	20620 <bt_le_adv_resume>
}
   2d7b8:	4770      	bx	lr

0002d7ba <conn_lookup_handle>:
{
   2d7ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d7be:	4607      	mov	r7, r0
   2d7c0:	460e      	mov	r6, r1
   2d7c2:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2d7c4:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2d7c6:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2d7ca:	42b4      	cmp	r4, r6
   2d7cc:	d103      	bne.n	2d7d6 <conn_lookup_handle+0x1c>
	return NULL;
   2d7ce:	2300      	movs	r3, #0
}
   2d7d0:	4618      	mov	r0, r3
   2d7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2d7d6:	fb09 7004 	mla	r0, r9, r4, r7
   2d7da:	f7ff ffb9 	bl	2d750 <bt_conn_ref>
   2d7de:	4603      	mov	r3, r0
		if (!conn) {
   2d7e0:	b158      	cbz	r0, 2d7fa <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2d7e2:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2d7e4:	2d01      	cmp	r5, #1
   2d7e6:	d002      	beq.n	2d7ee <conn_lookup_handle+0x34>
   2d7e8:	3d07      	subs	r5, #7
   2d7ea:	2d01      	cmp	r5, #1
   2d7ec:	d803      	bhi.n	2d7f6 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2d7ee:	881a      	ldrh	r2, [r3, #0]
   2d7f0:	4542      	cmp	r2, r8
   2d7f2:	d0ed      	beq.n	2d7d0 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2d7f4:	4618      	mov	r0, r3
   2d7f6:	f7ff ffc6 	bl	2d786 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2d7fa:	3401      	adds	r4, #1
   2d7fc:	e7e5      	b.n	2d7ca <conn_lookup_handle+0x10>

0002d7fe <bt_conn_connected>:
{
   2d7fe:	b510      	push	{r4, lr}
   2d800:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2d802:	f7f3 fc01 	bl	21008 <bt_l2cap_connected>
	notify_connected(conn);
   2d806:	4620      	mov	r0, r4
}
   2d808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2d80c:	f7f2 bf52 	b.w	206b4 <notify_connected>

0002d810 <bt_conn_get_security>:
}
   2d810:	2001      	movs	r0, #1
   2d812:	4770      	bx	lr

0002d814 <bt_conn_is_peer_addr_le>:
{
   2d814:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2d816:	7a03      	ldrb	r3, [r0, #8]
   2d818:	428b      	cmp	r3, r1
{
   2d81a:	4604      	mov	r4, r0
   2d81c:	4615      	mov	r5, r2
	if (id != conn->id) {
   2d81e:	d115      	bne.n	2d84c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2d820:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2d824:	2207      	movs	r2, #7
   2d826:	4628      	mov	r0, r5
   2d828:	f7ff fa20 	bl	2cc6c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2d82c:	b180      	cbz	r0, 2d850 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2d82e:	78e3      	ldrb	r3, [r4, #3]
   2d830:	2207      	movs	r2, #7
   2d832:	b943      	cbnz	r3, 2d846 <bt_conn_is_peer_addr_le+0x32>
   2d834:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2d838:	4628      	mov	r0, r5
   2d83a:	f7ff fa17 	bl	2cc6c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2d83e:	fab0 f080 	clz	r0, r0
   2d842:	0940      	lsrs	r0, r0, #5
}
   2d844:	bd38      	pop	{r3, r4, r5, pc}
   2d846:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2d84a:	e7f5      	b.n	2d838 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2d84c:	2000      	movs	r0, #0
   2d84e:	e7f9      	b.n	2d844 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2d850:	2001      	movs	r0, #1
   2d852:	e7f7      	b.n	2d844 <bt_conn_is_peer_addr_le+0x30>

0002d854 <bt_conn_exists_le>:
{
   2d854:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   2d856:	f7f3 fa01 	bl	20c5c <bt_conn_lookup_addr_le>
	if (conn) {
   2d85a:	b110      	cbz	r0, 2d862 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   2d85c:	f7ff ff93 	bl	2d786 <bt_conn_unref>
		return true;
   2d860:	2001      	movs	r0, #1
}
   2d862:	bd08      	pop	{r3, pc}

0002d864 <bt_conn_le_conn_update>:
{
   2d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d866:	4607      	mov	r7, r0
   2d868:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2d86a:	f242 0013 	movw	r0, #8211	; 0x2013
   2d86e:	210e      	movs	r1, #14
   2d870:	f7f1 fd3a 	bl	1f2e8 <bt_hci_cmd_create>
	if (!buf) {
   2d874:	4606      	mov	r6, r0
   2d876:	b1d0      	cbz	r0, 2d8ae <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2d878:	210e      	movs	r1, #14
   2d87a:	3008      	adds	r0, #8
   2d87c:	f002 f8f1 	bl	2fa62 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2d880:	220e      	movs	r2, #14
   2d882:	4604      	mov	r4, r0
   2d884:	2100      	movs	r1, #0
   2d886:	f7ff fa23 	bl	2ccd0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2d88a:	883b      	ldrh	r3, [r7, #0]
   2d88c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2d88e:	882b      	ldrh	r3, [r5, #0]
   2d890:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2d892:	886b      	ldrh	r3, [r5, #2]
   2d894:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2d896:	88ab      	ldrh	r3, [r5, #4]
   2d898:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2d89a:	88eb      	ldrh	r3, [r5, #6]
   2d89c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2d89e:	4631      	mov	r1, r6
   2d8a0:	2200      	movs	r2, #0
}
   2d8a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2d8a6:	f242 0013 	movw	r0, #8211	; 0x2013
   2d8aa:	f7f1 bd55 	b.w	1f358 <bt_hci_cmd_send_sync>
}
   2d8ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d8b4 <l2cap_connected>:
}
   2d8b4:	4770      	bx	lr

0002d8b6 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2d8b6:	3010      	adds	r0, #16
   2d8b8:	f004 b874 	b.w	319a4 <k_work_cancel_delayable>

0002d8bc <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d8be:	4607      	mov	r7, r0
   2d8c0:	460e      	mov	r6, r1
   2d8c2:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   2d8c4:	2300      	movs	r3, #0
   2d8c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2d8ca:	2104      	movs	r1, #4
   2d8cc:	2000      	movs	r0, #0
   2d8ce:	f7f3 f90b 	bl	20ae8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2d8d2:	4604      	mov	r4, r0
   2d8d4:	b130      	cbz	r0, 2d8e4 <l2cap_create_le_sig_pdu.isra.0+0x28>
   2d8d6:	2104      	movs	r1, #4
   2d8d8:	3008      	adds	r0, #8
   2d8da:	f002 f8c2 	bl	2fa62 <net_buf_simple_add>
	hdr->code = code;
   2d8de:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   2d8e0:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2d8e2:	8045      	strh	r5, [r0, #2]
}
   2d8e4:	4620      	mov	r0, r4
   2d8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d8e8 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2d8e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2d8ea:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2d8ec:	b17b      	cbz	r3, 2d90e <bt_l2cap_chan_remove+0x26>
   2d8ee:	3b08      	subs	r3, #8
   2d8f0:	2200      	movs	r2, #0
   2d8f2:	b163      	cbz	r3, 2d90e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2d8f4:	428b      	cmp	r3, r1
   2d8f6:	f103 0408 	add.w	r4, r3, #8
   2d8fa:	d10f      	bne.n	2d91c <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2d8fc:	688b      	ldr	r3, [r1, #8]
   2d8fe:	b93a      	cbnz	r2, 2d910 <bt_l2cap_chan_remove+0x28>
   2d900:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   2d902:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2d904:	4294      	cmp	r4, r2
   2d906:	d100      	bne.n	2d90a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2d908:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   2d90a:	2300      	movs	r3, #0
   2d90c:	608b      	str	r3, [r1, #8]
}
   2d90e:	bd10      	pop	{r4, pc}
   2d910:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d912:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2d914:	429c      	cmp	r4, r3
	list->tail = node;
   2d916:	bf08      	it	eq
   2d918:	6542      	streq	r2, [r0, #84]	; 0x54
}
   2d91a:	e7f6      	b.n	2d90a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d91c:	2c00      	cmp	r4, #0
   2d91e:	d0f6      	beq.n	2d90e <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2d920:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2d922:	2b00      	cmp	r3, #0
   2d924:	d0f3      	beq.n	2d90e <bt_l2cap_chan_remove+0x26>
   2d926:	3b08      	subs	r3, #8
   2d928:	4622      	mov	r2, r4
   2d92a:	e7e2      	b.n	2d8f2 <bt_l2cap_chan_remove+0xa>

0002d92c <bt_l2cap_chan_del>:
{
   2d92c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2d92e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2d932:	4604      	mov	r4, r0
	if (!chan->conn) {
   2d934:	b123      	cbz	r3, 2d940 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2d936:	686b      	ldr	r3, [r5, #4]
   2d938:	b103      	cbz	r3, 2d93c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2d93a:	4798      	blx	r3
	chan->conn = NULL;
   2d93c:	2300      	movs	r3, #0
   2d93e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2d940:	68e3      	ldr	r3, [r4, #12]
   2d942:	b10b      	cbz	r3, 2d948 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2d944:	4620      	mov	r0, r4
   2d946:	4798      	blx	r3
	if (ops->released) {
   2d948:	69eb      	ldr	r3, [r5, #28]
   2d94a:	b11b      	cbz	r3, 2d954 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2d94c:	4620      	mov	r0, r4
}
   2d94e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2d952:	4718      	bx	r3
}
   2d954:	bd70      	pop	{r4, r5, r6, pc}

0002d956 <l2cap_rtx_timeout>:
{
   2d956:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   2d958:	f1a0 0110 	sub.w	r1, r0, #16
   2d95c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   2d960:	f7ff ffc2 	bl	2d8e8 <bt_l2cap_chan_remove>
}
   2d964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   2d968:	4608      	mov	r0, r1
   2d96a:	f7ff bfdf 	b.w	2d92c <bt_l2cap_chan_del>

0002d96e <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2d96e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2d970:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2d972:	b18b      	cbz	r3, 2d998 <bt_l2cap_disconnected+0x2a>
   2d974:	f1b3 0008 	subs.w	r0, r3, #8
   2d978:	d00e      	beq.n	2d998 <bt_l2cap_disconnected+0x2a>
   2d97a:	681c      	ldr	r4, [r3, #0]
   2d97c:	b104      	cbz	r4, 2d980 <bt_l2cap_disconnected+0x12>
   2d97e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2d980:	f7ff ffd4 	bl	2d92c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2d984:	b144      	cbz	r4, 2d998 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d986:	f114 0308 	adds.w	r3, r4, #8
   2d98a:	d002      	beq.n	2d992 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2d98c:	68a3      	ldr	r3, [r4, #8]
   2d98e:	b103      	cbz	r3, 2d992 <bt_l2cap_disconnected+0x24>
   2d990:	3b08      	subs	r3, #8
{
   2d992:	4620      	mov	r0, r4
   2d994:	461c      	mov	r4, r3
   2d996:	e7f3      	b.n	2d980 <bt_l2cap_disconnected+0x12>
}
   2d998:	bd10      	pop	{r4, pc}

0002d99a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2d99a:	3104      	adds	r1, #4
   2d99c:	f7f3 b8a4 	b.w	20ae8 <bt_conn_create_pdu_timeout>

0002d9a0 <bt_l2cap_send_cb>:
{
   2d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d9a4:	4614      	mov	r4, r2
   2d9a6:	4605      	mov	r5, r0
   2d9a8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2d9aa:	f102 0008 	add.w	r0, r2, #8
   2d9ae:	2104      	movs	r1, #4
   2d9b0:	461e      	mov	r6, r3
   2d9b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2d9b6:	f002 f86b 	bl	2fa90 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2d9ba:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2d9bc:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2d9be:	3a04      	subs	r2, #4
   2d9c0:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2d9c2:	4643      	mov	r3, r8
   2d9c4:	4632      	mov	r2, r6
   2d9c6:	4621      	mov	r1, r4
   2d9c8:	4628      	mov	r0, r5
}
   2d9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2d9ce:	f7f2 bf57 	b.w	20880 <bt_conn_send_cb>

0002d9d2 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   2d9d2:	898b      	ldrh	r3, [r1, #12]
   2d9d4:	2b03      	cmp	r3, #3
{
   2d9d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d9d8:	4605      	mov	r5, r0
   2d9da:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2d9dc:	d927      	bls.n	2da2e <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d9de:	2104      	movs	r1, #4
   2d9e0:	f104 0008 	add.w	r0, r4, #8
   2d9e4:	f002 f864 	bl	2fab0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   2d9e8:	89a3      	ldrh	r3, [r4, #12]
   2d9ea:	8842      	ldrh	r2, [r0, #2]
   2d9ec:	429a      	cmp	r2, r3
   2d9ee:	d11e      	bne.n	2da2e <l2cap_recv+0x5c>
	if (!hdr->ident) {
   2d9f0:	7841      	ldrb	r1, [r0, #1]
   2d9f2:	b1e1      	cbz	r1, 2da2e <l2cap_recv+0x5c>
	switch (hdr->code) {
   2d9f4:	7803      	ldrb	r3, [r0, #0]
   2d9f6:	2b01      	cmp	r3, #1
   2d9f8:	d019      	beq.n	2da2e <l2cap_recv+0x5c>
   2d9fa:	2b13      	cmp	r3, #19
   2d9fc:	d017      	beq.n	2da2e <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2d9fe:	2202      	movs	r2, #2
   2da00:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   2da02:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2da04:	f7ff ff5a 	bl	2d8bc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   2da08:	4604      	mov	r4, r0
   2da0a:	b180      	cbz	r0, 2da2e <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2da0c:	2102      	movs	r1, #2
   2da0e:	3008      	adds	r0, #8
   2da10:	f002 f827 	bl	2fa62 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2da14:	2300      	movs	r3, #0
   2da16:	7003      	strb	r3, [r0, #0]
   2da18:	7043      	strb	r3, [r0, #1]
   2da1a:	4622      	mov	r2, r4
   2da1c:	9300      	str	r3, [sp, #0]
   2da1e:	2105      	movs	r1, #5
   2da20:	4628      	mov	r0, r5
   2da22:	f7ff ffbd 	bl	2d9a0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2da26:	b110      	cbz	r0, 2da2e <l2cap_recv+0x5c>
		net_buf_unref(buf);
   2da28:	4620      	mov	r0, r4
   2da2a:	f7f5 fd7b 	bl	23524 <net_buf_unref>
}
   2da2e:	2000      	movs	r0, #0
   2da30:	b003      	add	sp, #12
   2da32:	bd30      	pop	{r4, r5, pc}

0002da34 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2da34:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2da36:	b160      	cbz	r0, 2da52 <bt_l2cap_le_lookup_tx_cid+0x1e>
   2da38:	3808      	subs	r0, #8
   2da3a:	b900      	cbnz	r0, 2da3e <bt_l2cap_le_lookup_tx_cid+0xa>
   2da3c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2da3e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2da42:	428b      	cmp	r3, r1
   2da44:	d005      	beq.n	2da52 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2da46:	f110 0308 	adds.w	r3, r0, #8
   2da4a:	d001      	beq.n	2da50 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2da4c:	6880      	ldr	r0, [r0, #8]
   2da4e:	e7f2      	b.n	2da36 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2da50:	4618      	mov	r0, r3
}
   2da52:	4770      	bx	lr

0002da54 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2da54:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2da56:	b160      	cbz	r0, 2da72 <bt_l2cap_le_lookup_rx_cid+0x1e>
   2da58:	3808      	subs	r0, #8
   2da5a:	b900      	cbnz	r0, 2da5e <bt_l2cap_le_lookup_rx_cid+0xa>
   2da5c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2da5e:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2da62:	428b      	cmp	r3, r1
   2da64:	d005      	beq.n	2da72 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2da66:	f110 0308 	adds.w	r3, r0, #8
   2da6a:	d001      	beq.n	2da70 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2da6c:	6880      	ldr	r0, [r0, #8]
   2da6e:	e7f2      	b.n	2da56 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2da70:	4618      	mov	r0, r3
}
   2da72:	4770      	bx	lr

0002da74 <bt_l2cap_recv>:
{
   2da74:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   2da76:	898b      	ldrh	r3, [r1, #12]
   2da78:	2b03      	cmp	r3, #3
{
   2da7a:	4605      	mov	r5, r0
   2da7c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2da7e:	d804      	bhi.n	2da8a <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   2da80:	4620      	mov	r0, r4
}
   2da82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   2da86:	f7f5 bd4d 	b.w	23524 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   2da8a:	2104      	movs	r1, #4
   2da8c:	f104 0008 	add.w	r0, r4, #8
   2da90:	f002 f80e 	bl	2fab0 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   2da94:	8841      	ldrh	r1, [r0, #2]
   2da96:	4628      	mov	r0, r5
   2da98:	f7ff ffdc 	bl	2da54 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2da9c:	2800      	cmp	r0, #0
   2da9e:	d0ef      	beq.n	2da80 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   2daa0:	6843      	ldr	r3, [r0, #4]
   2daa2:	4621      	mov	r1, r4
   2daa4:	691b      	ldr	r3, [r3, #16]
   2daa6:	4798      	blx	r3
   2daa8:	e7ea      	b.n	2da80 <bt_l2cap_recv+0xc>

0002daaa <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2daaa:	4770      	bx	lr

0002daac <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2daac:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2daae:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2dab0:	b128      	cbz	r0, 2dabe <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dab2:	6859      	ldr	r1, [r3, #4]
   2dab4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2dab6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dab8:	4288      	cmp	r0, r1
	list->tail = node;
   2daba:	bf08      	it	eq
   2dabc:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2dabe:	4770      	bx	lr

0002dac0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dac0:	4603      	mov	r3, r0
   2dac2:	6800      	ldr	r0, [r0, #0]
   2dac4:	2200      	movs	r2, #0
   2dac6:	b900      	cbnz	r0, 2daca <sys_slist_find_and_remove+0xa>
   2dac8:	4770      	bx	lr
   2daca:	4288      	cmp	r0, r1
   2dacc:	d110      	bne.n	2daf0 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2dace:	6808      	ldr	r0, [r1, #0]
   2dad0:	b942      	cbnz	r2, 2dae4 <sys_slist_find_and_remove+0x24>
   2dad2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2dad4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dad6:	4291      	cmp	r1, r2
   2dad8:	d100      	bne.n	2dadc <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2dada:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2dadc:	2300      	movs	r3, #0
   2dade:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dae0:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2dae2:	4770      	bx	lr
	parent->next = child;
   2dae4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dae6:	6858      	ldr	r0, [r3, #4]
   2dae8:	4281      	cmp	r1, r0
	list->tail = node;
   2daea:	bf08      	it	eq
   2daec:	605a      	streq	r2, [r3, #4]
}
   2daee:	e7f5      	b.n	2dadc <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2daf0:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2daf2:	6800      	ldr	r0, [r0, #0]
   2daf4:	e7e7      	b.n	2dac6 <sys_slist_find_and_remove+0x6>

0002daf6 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2daf6:	4603      	mov	r3, r0
	size_t bytes = 0;
   2daf8:	2000      	movs	r0, #0

	while (buf) {
   2dafa:	b903      	cbnz	r3, 2dafe <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2dafc:	4770      	bx	lr
		bytes += buf->len;
   2dafe:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2db00:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2db02:	4410      	add	r0, r2
		buf = buf->frags;
   2db04:	e7f9      	b.n	2dafa <net_buf_frags_len+0x4>

0002db06 <att_sent>:
	if (chan->ops->sent) {
   2db06:	684b      	ldr	r3, [r1, #4]
   2db08:	695b      	ldr	r3, [r3, #20]
{
   2db0a:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2db0c:	b103      	cbz	r3, 2db10 <att_sent+0xa>
		chan->ops->sent(chan);
   2db0e:	4718      	bx	r3
}
   2db10:	4770      	bx	lr

0002db12 <attr_read_type_cb>:
{
   2db12:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2db14:	68d4      	ldr	r4, [r2, #12]
   2db16:	7823      	ldrb	r3, [r4, #0]
   2db18:	3102      	adds	r1, #2
   2db1a:	b913      	cbnz	r3, 2db22 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2db1c:	7021      	strb	r1, [r4, #0]
	return true;
   2db1e:	2001      	movs	r0, #1
   2db20:	e006      	b.n	2db30 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2db22:	428b      	cmp	r3, r1
   2db24:	d0fb      	beq.n	2db1e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2db26:	8983      	ldrh	r3, [r0, #12]
   2db28:	3b02      	subs	r3, #2
   2db2a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2db2c:	2000      	movs	r0, #0
   2db2e:	6110      	str	r0, [r2, #16]
}
   2db30:	bd10      	pop	{r4, pc}

0002db32 <att_prepare_write_req>:
}
   2db32:	2006      	movs	r0, #6
   2db34:	4770      	bx	lr

0002db36 <att_op_get_type>:
	switch (op) {
   2db36:	281e      	cmp	r0, #30
   2db38:	d816      	bhi.n	2db68 <att_op_get_type+0x32>
   2db3a:	b308      	cbz	r0, 2db80 <att_op_get_type+0x4a>
   2db3c:	1e43      	subs	r3, r0, #1
   2db3e:	2b1d      	cmp	r3, #29
   2db40:	d81e      	bhi.n	2db80 <att_op_get_type+0x4a>
   2db42:	e8df f003 	tbb	[pc, r3]
   2db46:	2317      	.short	0x2317
   2db48:	23172317 	.word	0x23172317
   2db4c:	23172317 	.word	0x23172317
   2db50:	23172317 	.word	0x23172317
   2db54:	23172317 	.word	0x23172317
   2db58:	231d1d17 	.word	0x231d1d17
   2db5c:	1d172317 	.word	0x1d172317
   2db60:	0f1b1d19 	.word	0x0f1b1d19
   2db64:	2004      	movs	r0, #4
   2db66:	4770      	bx	lr
   2db68:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2db6c:	2b52      	cmp	r3, #82	; 0x52
   2db6e:	d107      	bne.n	2db80 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2db70:	2000      	movs	r0, #0
}
   2db72:	4770      	bx	lr
		return ATT_RESPONSE;
   2db74:	2002      	movs	r0, #2
   2db76:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2db78:	2003      	movs	r0, #3
   2db7a:	4770      	bx	lr
		return ATT_INDICATION;
   2db7c:	2005      	movs	r0, #5
   2db7e:	4770      	bx	lr
		return ATT_COMMAND;
   2db80:	f010 0f40 	tst.w	r0, #64	; 0x40
   2db84:	bf0c      	ite	eq
   2db86:	2006      	moveq	r0, #6
   2db88:	2000      	movne	r0, #0
   2db8a:	4770      	bx	lr
		return ATT_REQUEST;
   2db8c:	2001      	movs	r0, #1
   2db8e:	4770      	bx	lr

0002db90 <chan_req_send>:
{
   2db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2db92:	688f      	ldr	r7, [r1, #8]
{
   2db94:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2db96:	4638      	mov	r0, r7
{
   2db98:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2db9a:	f7ff ffac 	bl	2daf6 <net_buf_frags_len>
   2db9e:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2dba2:	4283      	cmp	r3, r0
   2dba4:	d30d      	bcc.n	2dbc2 <chan_req_send+0x32>
	req->buf = NULL;
   2dba6:	2600      	movs	r6, #0
	chan->req = req;
   2dba8:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   2dbac:	4632      	mov	r2, r6
	req->buf = NULL;
   2dbae:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2dbb0:	4620      	mov	r0, r4
   2dbb2:	4639      	mov	r1, r7
   2dbb4:	f7f3 fada 	bl	2116c <chan_send>
	if (err) {
   2dbb8:	b110      	cbz	r0, 2dbc0 <chan_req_send+0x30>
		req->buf = buf;
   2dbba:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   2dbbc:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   2dbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2dbc2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2dbc6:	e7fb      	b.n	2dbc0 <chan_req_send+0x30>

0002dbc8 <process_queue>:
{
   2dbc8:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2dbca:	2200      	movs	r2, #0
{
   2dbcc:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2dbce:	2300      	movs	r3, #0
   2dbd0:	4608      	mov	r0, r1
{
   2dbd2:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2dbd4:	f001 fef4 	bl	2f9c0 <net_buf_get>
	if (buf) {
   2dbd8:	4605      	mov	r5, r0
   2dbda:	b160      	cbz	r0, 2dbf6 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2dbdc:	4601      	mov	r1, r0
   2dbde:	2200      	movs	r2, #0
   2dbe0:	4620      	mov	r0, r4
   2dbe2:	f7f3 fac3 	bl	2116c <chan_send>
		if (err) {
   2dbe6:	4604      	mov	r4, r0
   2dbe8:	b118      	cbz	r0, 2dbf2 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2dbea:	4629      	mov	r1, r5
   2dbec:	4630      	mov	r0, r6
   2dbee:	f003 fdea 	bl	317c6 <k_queue_prepend>
}
   2dbf2:	4620      	mov	r0, r4
   2dbf4:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2dbf6:	f06f 0401 	mvn.w	r4, #1
   2dbfa:	e7fa      	b.n	2dbf2 <process_queue+0x2a>

0002dbfc <bt_gatt_foreach_attr>:
{
   2dbfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2dbfe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2dc02:	2300      	movs	r3, #0
   2dc04:	9300      	str	r3, [sp, #0]
   2dc06:	461a      	mov	r2, r3
   2dc08:	f7f4 f99e 	bl	21f48 <bt_gatt_foreach_attr_type>
}
   2dc0c:	b005      	add	sp, #20
   2dc0e:	f85d fb04 	ldr.w	pc, [sp], #4

0002dc12 <att_chan_read>:
{
   2dc12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dc16:	4680      	mov	r8, r0
   2dc18:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2dc1a:	4610      	mov	r0, r2
{
   2dc1c:	4699      	mov	r9, r3
   2dc1e:	468b      	mov	fp, r1
   2dc20:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2dc22:	f7ff ff68 	bl	2daf6 <net_buf_frags_len>
   2dc26:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2dc2a:	4283      	cmp	r3, r0
   2dc2c:	d97a      	bls.n	2dd24 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2dc2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2dc32:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2dc34:	4630      	mov	r0, r6
   2dc36:	f001 fef2 	bl	2fa1e <net_buf_frag_last>
	size_t len, total = 0;
   2dc3a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2dc3e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2dc40:	4630      	mov	r0, r6
   2dc42:	f7ff ff58 	bl	2daf6 <net_buf_frags_len>
   2dc46:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2dc4a:	f105 0708 	add.w	r7, r5, #8
   2dc4e:	1a24      	subs	r4, r4, r0
   2dc50:	4638      	mov	r0, r7
   2dc52:	f001 ff41 	bl	2fad8 <net_buf_simple_tailroom>
   2dc56:	4284      	cmp	r4, r0
   2dc58:	d211      	bcs.n	2dc7e <att_chan_read+0x6c>
   2dc5a:	4630      	mov	r0, r6
   2dc5c:	f7ff ff4b 	bl	2daf6 <net_buf_frags_len>
   2dc60:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2dc64:	1a24      	subs	r4, r4, r0
		if (!len) {
   2dc66:	bb34      	cbnz	r4, 2dcb6 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2dc68:	79b0      	ldrb	r0, [r6, #6]
   2dc6a:	f7f5 fb9b 	bl	233a4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2dc6e:	2200      	movs	r2, #0
   2dc70:	2300      	movs	r3, #0
   2dc72:	f001 fea0 	bl	2f9b6 <net_buf_alloc_fixed>
			if (!frag) {
   2dc76:	4605      	mov	r5, r0
   2dc78:	b930      	cbnz	r0, 2dc88 <att_chan_read+0x76>
	return total;
   2dc7a:	4657      	mov	r7, sl
   2dc7c:	e02c      	b.n	2dcd8 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2dc7e:	4638      	mov	r0, r7
   2dc80:	f001 ff2a 	bl	2fad8 <net_buf_simple_tailroom>
   2dc84:	4604      	mov	r4, r0
   2dc86:	e7ee      	b.n	2dc66 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2dc88:	4601      	mov	r1, r0
   2dc8a:	4630      	mov	r0, r6
   2dc8c:	f001 fed8 	bl	2fa40 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2dc90:	4630      	mov	r0, r6
   2dc92:	f7ff ff30 	bl	2daf6 <net_buf_frags_len>
   2dc96:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2dc9a:	f105 0708 	add.w	r7, r5, #8
   2dc9e:	1a24      	subs	r4, r4, r0
   2dca0:	4638      	mov	r0, r7
   2dca2:	f001 ff19 	bl	2fad8 <net_buf_simple_tailroom>
   2dca6:	4284      	cmp	r4, r0
   2dca8:	d21a      	bcs.n	2dce0 <att_chan_read+0xce>
   2dcaa:	4630      	mov	r0, r6
   2dcac:	f7ff ff23 	bl	2daf6 <net_buf_frags_len>
   2dcb0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2dcb4:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2dcb6:	68a9      	ldr	r1, [r5, #8]
   2dcb8:	89aa      	ldrh	r2, [r5, #12]
   2dcba:	f8db 7004 	ldr.w	r7, [fp, #4]
   2dcbe:	9803      	ldr	r0, [sp, #12]
   2dcc0:	f8cd 9000 	str.w	r9, [sp]
   2dcc4:	440a      	add	r2, r1
   2dcc6:	b2a3      	uxth	r3, r4
   2dcc8:	4659      	mov	r1, fp
   2dcca:	47b8      	blx	r7
		if (read < 0) {
   2dccc:	1e07      	subs	r7, r0, #0
   2dcce:	da0c      	bge.n	2dcea <att_chan_read+0xd8>
				return total;
   2dcd0:	f1ba 0f00 	cmp.w	sl, #0
   2dcd4:	bf18      	it	ne
   2dcd6:	4657      	movne	r7, sl
}
   2dcd8:	4638      	mov	r0, r7
   2dcda:	b005      	add	sp, #20
   2dcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dce0:	4638      	mov	r0, r7
   2dce2:	f001 fef9 	bl	2fad8 <net_buf_simple_tailroom>
   2dce6:	4604      	mov	r4, r0
   2dce8:	e7e5      	b.n	2dcb6 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2dcea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2dcec:	b993      	cbnz	r3, 2dd14 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2dcee:	4639      	mov	r1, r7
   2dcf0:	f105 0008 	add.w	r0, r5, #8
   2dcf4:	f001 feb5 	bl	2fa62 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2dcf8:	4630      	mov	r0, r6
   2dcfa:	f7ff fefc 	bl	2daf6 <net_buf_frags_len>
   2dcfe:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2dd02:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2dd04:	4283      	cmp	r3, r0
		total += read;
   2dd06:	44ba      	add	sl, r7
		offset += read;
   2dd08:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2dd0c:	d9b5      	bls.n	2dc7a <att_chan_read+0x68>
   2dd0e:	42a7      	cmp	r7, r4
   2dd10:	d096      	beq.n	2dc40 <att_chan_read+0x2e>
   2dd12:	e7b2      	b.n	2dc7a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2dd14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2dd16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2dd18:	4639      	mov	r1, r7
   2dd1a:	4628      	mov	r0, r5
   2dd1c:	4798      	blx	r3
   2dd1e:	2800      	cmp	r0, #0
   2dd20:	d1e5      	bne.n	2dcee <att_chan_read+0xdc>
   2dd22:	e7aa      	b.n	2dc7a <att_chan_read+0x68>
		return 0;
   2dd24:	2700      	movs	r7, #0
   2dd26:	e7d7      	b.n	2dcd8 <att_chan_read+0xc6>

0002dd28 <find_type_cb>:
{
   2dd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   2dd2c:	f8d2 9000 	ldr.w	r9, [r2]
{
   2dd30:	b091      	sub	sp, #68	; 0x44
   2dd32:	4607      	mov	r7, r0
   2dd34:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2dd36:	2500      	movs	r5, #0
   2dd38:	f642 0301 	movw	r3, #10241	; 0x2801
   2dd3c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2dd3e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2dd42:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2dd46:	a90b      	add	r1, sp, #44	; 0x2c
{
   2dd48:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2dd4a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2dd4e:	f7ff f820 	bl	2cd92 <bt_uuid_cmp>
   2dd52:	2800      	cmp	r0, #0
   2dd54:	d079      	beq.n	2de4a <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   2dd56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2dd5a:	6838      	ldr	r0, [r7, #0]
   2dd5c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2dd60:	a90b      	add	r1, sp, #44	; 0x2c
   2dd62:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2dd66:	f7ff f814 	bl	2cd92 <bt_uuid_cmp>
   2dd6a:	b138      	cbz	r0, 2dd7c <find_type_cb+0x54>
		if (data->group &&
   2dd6c:	68a3      	ldr	r3, [r4, #8]
   2dd6e:	b11b      	cbz	r3, 2dd78 <find_type_cb+0x50>
   2dd70:	885a      	ldrh	r2, [r3, #2]
   2dd72:	42b2      	cmp	r2, r6
   2dd74:	d200      	bcs.n	2dd78 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2dd76:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   2dd78:	2001      	movs	r0, #1
   2dd7a:	e009      	b.n	2dd90 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   2dd7c:	6861      	ldr	r1, [r4, #4]
   2dd7e:	4608      	mov	r0, r1
   2dd80:	f7ff feb9 	bl	2daf6 <net_buf_frags_len>
   2dd84:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   2dd88:	1a1b      	subs	r3, r3, r0
   2dd8a:	2b03      	cmp	r3, #3
   2dd8c:	d803      	bhi.n	2dd96 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   2dd8e:	2000      	movs	r0, #0
}
   2dd90:	b011      	add	sp, #68	; 0x44
   2dd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   2dd96:	4608      	mov	r0, r1
   2dd98:	f001 fe41 	bl	2fa1e <net_buf_frag_last>
   2dd9c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   2dd9e:	6860      	ldr	r0, [r4, #4]
   2dda0:	f7ff fea9 	bl	2daf6 <net_buf_frags_len>
   2dda4:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2dda8:	f105 0b08 	add.w	fp, r5, #8
   2ddac:	ebaa 0a00 	sub.w	sl, sl, r0
   2ddb0:	4658      	mov	r0, fp
   2ddb2:	f001 fe91 	bl	2fad8 <net_buf_simple_tailroom>
   2ddb6:	4582      	cmp	sl, r0
   2ddb8:	d23f      	bcs.n	2de3a <find_type_cb+0x112>
   2ddba:	6860      	ldr	r0, [r4, #4]
   2ddbc:	f7ff fe9b 	bl	2daf6 <net_buf_frags_len>
   2ddc0:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   2ddc4:	1a18      	subs	r0, r3, r0
	if (!len) {
   2ddc6:	b970      	cbnz	r0, 2dde6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   2ddc8:	6863      	ldr	r3, [r4, #4]
   2ddca:	7998      	ldrb	r0, [r3, #6]
   2ddcc:	f7f5 faea 	bl	233a4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2ddd0:	2200      	movs	r2, #0
   2ddd2:	2300      	movs	r3, #0
   2ddd4:	f001 fdef 	bl	2f9b6 <net_buf_alloc_fixed>
		if (!frag) {
   2ddd8:	4605      	mov	r5, r0
   2ddda:	2800      	cmp	r0, #0
   2dddc:	d0d7      	beq.n	2dd8e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   2ddde:	4601      	mov	r1, r0
   2dde0:	6860      	ldr	r0, [r4, #4]
   2dde2:	f001 fe2d 	bl	2fa40 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   2dde6:	2300      	movs	r3, #0
   2dde8:	9300      	str	r3, [sp, #0]
   2ddea:	f8d7 9004 	ldr.w	r9, [r7, #4]
   2ddee:	4639      	mov	r1, r7
   2ddf0:	2310      	movs	r3, #16
   2ddf2:	aa02      	add	r2, sp, #8
   2ddf4:	4640      	mov	r0, r8
   2ddf6:	47c8      	blx	r9
	if (read < 0) {
   2ddf8:	1e07      	subs	r7, r0, #0
   2ddfa:	db26      	blt.n	2de4a <find_type_cb+0x122>
	if (read != data->value_len) {
   2ddfc:	7c22      	ldrb	r2, [r4, #16]
   2ddfe:	68e0      	ldr	r0, [r4, #12]
   2de00:	42ba      	cmp	r2, r7
   2de02:	d01e      	beq.n	2de42 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2de04:	4601      	mov	r1, r0
   2de06:	a80b      	add	r0, sp, #44	; 0x2c
   2de08:	f7fe ffed 	bl	2cde6 <bt_uuid_create>
   2de0c:	b1e8      	cbz	r0, 2de4a <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   2de0e:	b2fa      	uxtb	r2, r7
   2de10:	a902      	add	r1, sp, #8
   2de12:	a806      	add	r0, sp, #24
   2de14:	f7fe ffe7 	bl	2cde6 <bt_uuid_create>
   2de18:	b1b8      	cbz	r0, 2de4a <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   2de1a:	a906      	add	r1, sp, #24
   2de1c:	a80b      	add	r0, sp, #44	; 0x2c
   2de1e:	f7fe ffb8 	bl	2cd92 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   2de22:	b990      	cbnz	r0, 2de4a <find_type_cb+0x122>
	data->err = 0x00;
   2de24:	2300      	movs	r3, #0
   2de26:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   2de28:	2104      	movs	r1, #4
   2de2a:	f105 0008 	add.w	r0, r5, #8
   2de2e:	f001 fe18 	bl	2fa62 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   2de32:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2de34:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2de36:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   2de38:	e79e      	b.n	2dd78 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   2de3a:	4658      	mov	r0, fp
   2de3c:	f001 fe4c 	bl	2fad8 <net_buf_simple_tailroom>
   2de40:	e7c1      	b.n	2ddc6 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   2de42:	a902      	add	r1, sp, #8
   2de44:	f7fe ff12 	bl	2cc6c <memcmp>
   2de48:	e7eb      	b.n	2de22 <find_type_cb+0xfa>
	data->group = NULL;
   2de4a:	2300      	movs	r3, #0
   2de4c:	60a3      	str	r3, [r4, #8]
   2de4e:	e793      	b.n	2dd78 <find_type_cb+0x50>

0002de50 <find_info_cb>:
{
   2de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2de52:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2de54:	6817      	ldr	r7, [r2, #0]
{
   2de56:	4605      	mov	r5, r0
   2de58:	460e      	mov	r6, r1
   2de5a:	4614      	mov	r4, r2
	if (!data->rsp) {
   2de5c:	b963      	cbnz	r3, 2de78 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2de5e:	6850      	ldr	r0, [r2, #4]
   2de60:	2101      	movs	r1, #1
   2de62:	3008      	adds	r0, #8
   2de64:	f001 fdfd 	bl	2fa62 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2de68:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2de6a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2de6c:	781b      	ldrb	r3, [r3, #0]
   2de6e:	2b00      	cmp	r3, #0
   2de70:	bf0c      	ite	eq
   2de72:	2301      	moveq	r3, #1
   2de74:	2302      	movne	r3, #2
   2de76:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2de78:	68a3      	ldr	r3, [r4, #8]
   2de7a:	781b      	ldrb	r3, [r3, #0]
   2de7c:	2b01      	cmp	r3, #1
   2de7e:	d003      	beq.n	2de88 <find_info_cb+0x38>
   2de80:	2b02      	cmp	r3, #2
   2de82:	d019      	beq.n	2deb8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2de84:	2000      	movs	r0, #0
   2de86:	e016      	b.n	2deb6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2de88:	682b      	ldr	r3, [r5, #0]
   2de8a:	781b      	ldrb	r3, [r3, #0]
   2de8c:	2b00      	cmp	r3, #0
   2de8e:	d1f9      	bne.n	2de84 <find_info_cb+0x34>
   2de90:	6860      	ldr	r0, [r4, #4]
   2de92:	2104      	movs	r1, #4
   2de94:	3008      	adds	r0, #8
   2de96:	f001 fde4 	bl	2fa62 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2de9a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2de9c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2de9e:	885b      	ldrh	r3, [r3, #2]
   2dea0:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2dea2:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2dea4:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2dea6:	899b      	ldrh	r3, [r3, #12]
   2dea8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2deac:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2deae:	2804      	cmp	r0, #4
   2deb0:	bf94      	ite	ls
   2deb2:	2000      	movls	r0, #0
   2deb4:	2001      	movhi	r0, #1
}
   2deb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2deb8:	682b      	ldr	r3, [r5, #0]
   2deba:	781b      	ldrb	r3, [r3, #0]
   2debc:	2b02      	cmp	r3, #2
   2debe:	d1e1      	bne.n	2de84 <find_info_cb+0x34>
   2dec0:	6860      	ldr	r0, [r4, #4]
   2dec2:	2112      	movs	r1, #18
   2dec4:	3008      	adds	r0, #8
   2dec6:	f001 fdcc 	bl	2fa62 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2deca:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2decc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2dece:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2ded0:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2ded4:	3101      	adds	r1, #1
   2ded6:	f7fe fef0 	bl	2ccba <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2deda:	6863      	ldr	r3, [r4, #4]
   2dedc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2dee0:	899b      	ldrh	r3, [r3, #12]
   2dee2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2dee4:	2812      	cmp	r0, #18
   2dee6:	e7e3      	b.n	2deb0 <find_info_cb+0x60>

0002dee8 <att_chan_mtu_updated>:
{
   2dee8:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2deea:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2deec:	6a72      	ldr	r2, [r6, #36]	; 0x24
   2deee:	b30a      	cbz	r2, 2df34 <att_chan_mtu_updated+0x4c>
   2def0:	f5b2 74a2 	subs.w	r4, r2, #324	; 0x144
   2def4:	d01d      	beq.n	2df32 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2def6:	6813      	ldr	r3, [r2, #0]
   2def8:	b10b      	cbz	r3, 2defe <att_chan_mtu_updated+0x16>
   2defa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2defe:	2200      	movs	r2, #0
   2df00:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   2df02:	42a0      	cmp	r0, r4
   2df04:	d009      	beq.n	2df1a <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2df06:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2df0a:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2df0e:	42a9      	cmp	r1, r5
   2df10:	bf38      	it	cc
   2df12:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2df14:	42a2      	cmp	r2, r4
   2df16:	bf38      	it	cc
   2df18:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2df1a:	b163      	cbz	r3, 2df36 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2df1c:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   2df20:	d004      	beq.n	2df2c <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2df22:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   2df26:	b10d      	cbz	r5, 2df2c <att_chan_mtu_updated+0x44>
   2df28:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   2df2c:	461c      	mov	r4, r3
   2df2e:	462b      	mov	r3, r5
   2df30:	e7e7      	b.n	2df02 <att_chan_mtu_updated+0x1a>
   2df32:	4622      	mov	r2, r4
   2df34:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2df36:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2df3a:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   2df3e:	428b      	cmp	r3, r1
   2df40:	d801      	bhi.n	2df46 <att_chan_mtu_updated+0x5e>
   2df42:	4290      	cmp	r0, r2
   2df44:	d909      	bls.n	2df5a <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2df46:	4282      	cmp	r2, r0
   2df48:	bf38      	it	cc
   2df4a:	4602      	movcc	r2, r0
   2df4c:	4299      	cmp	r1, r3
   2df4e:	6830      	ldr	r0, [r6, #0]
   2df50:	bf38      	it	cc
   2df52:	4619      	movcc	r1, r3
}
   2df54:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2df56:	f7f4 bbe7 	b.w	22728 <bt_gatt_att_max_mtu_changed>
}
   2df5a:	bc70      	pop	{r4, r5, r6}
   2df5c:	4770      	bx	lr

0002df5e <attr_read_group_cb>:
	if (!data->rsp->len) {
   2df5e:	68d0      	ldr	r0, [r2, #12]
   2df60:	7803      	ldrb	r3, [r0, #0]
   2df62:	3104      	adds	r1, #4
   2df64:	b913      	cbnz	r3, 2df6c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2df66:	7001      	strb	r1, [r0, #0]
	return true;
   2df68:	2001      	movs	r0, #1
}
   2df6a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2df6c:	428b      	cmp	r3, r1
   2df6e:	d0fb      	beq.n	2df68 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2df70:	6891      	ldr	r1, [r2, #8]
   2df72:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2df74:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2df76:	3b04      	subs	r3, #4
   2df78:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2df7a:	6110      	str	r0, [r2, #16]
		return false;
   2df7c:	4770      	bx	lr

0002df7e <chan_req_sent>:
	if (chan->req) {
   2df7e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2df82:	b133      	cbz	r3, 2df92 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2df84:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2df88:	2300      	movs	r3, #0
   2df8a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2df8e:	f7fa b9ad 	b.w	282ec <k_work_reschedule>
}
   2df92:	4770      	bx	lr

0002df94 <att_exec_write_req>:
   2df94:	2006      	movs	r0, #6
   2df96:	4770      	bx	lr

0002df98 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2df98:	30f0      	adds	r0, #240	; 0xf0
   2df9a:	f3bf 8f5b 	dmb	ish
   2df9e:	e850 3f00 	ldrex	r3, [r0]
   2dfa2:	f023 0301 	bic.w	r3, r3, #1
   2dfa6:	e840 3200 	strex	r2, r3, [r0]
   2dfaa:	2a00      	cmp	r2, #0
   2dfac:	d1f7      	bne.n	2df9e <chan_rsp_sent+0x6>
   2dfae:	f3bf 8f5b 	dmb	ish
}
   2dfb2:	4770      	bx	lr

0002dfb4 <chan_cfm_sent>:
   2dfb4:	30f0      	adds	r0, #240	; 0xf0
   2dfb6:	f3bf 8f5b 	dmb	ish
   2dfba:	e850 3f00 	ldrex	r3, [r0]
   2dfbe:	f023 0302 	bic.w	r3, r3, #2
   2dfc2:	e840 3200 	strex	r2, r3, [r0]
   2dfc6:	2a00      	cmp	r2, #0
   2dfc8:	d1f7      	bne.n	2dfba <chan_cfm_sent+0x6>
   2dfca:	f3bf 8f5b 	dmb	ish
}
   2dfce:	4770      	bx	lr

0002dfd0 <att_get>:
{
   2dfd0:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2dfd2:	7a83      	ldrb	r3, [r0, #10]
   2dfd4:	2b07      	cmp	r3, #7
   2dfd6:	d001      	beq.n	2dfdc <att_get+0xc>
		return NULL;
   2dfd8:	2000      	movs	r0, #0
}
   2dfda:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2dfdc:	2104      	movs	r1, #4
   2dfde:	f7ff fd39 	bl	2da54 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2dfe2:	2800      	cmp	r0, #0
   2dfe4:	d0f8      	beq.n	2dfd8 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dfe6:	f3bf 8f5b 	dmb	ish
   2dfea:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   2dfee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   2dff2:	075b      	lsls	r3, r3, #29
   2dff4:	d4f0      	bmi.n	2dfd8 <att_get+0x8>
	return att_chan->att;
   2dff6:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2dffa:	e7ee      	b.n	2dfda <att_get+0xa>

0002dffc <bt_att_status>:
{
   2dffc:	b538      	push	{r3, r4, r5, lr}
   2dffe:	f3bf 8f5b 	dmb	ish
   2e002:	680b      	ldr	r3, [r1, #0]
   2e004:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2e008:	07db      	lsls	r3, r3, #31
{
   2e00a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2e00c:	d519      	bpl.n	2e042 <bt_att_status+0x46>
	if (!chan->att) {
   2e00e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2e012:	b1b0      	cbz	r0, 2e042 <bt_att_status+0x46>
	if (chan->req) {
   2e014:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2e018:	b99b      	cbnz	r3, 2e042 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2e01a:	3004      	adds	r0, #4
   2e01c:	f7ff fd46 	bl	2daac <sys_slist_get>
	if (!node) {
   2e020:	4604      	mov	r4, r0
   2e022:	b170      	cbz	r0, 2e042 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   2e024:	4601      	mov	r1, r0
   2e026:	f1a5 0008 	sub.w	r0, r5, #8
   2e02a:	f7ff fdb1 	bl	2db90 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e02e:	2800      	cmp	r0, #0
   2e030:	da07      	bge.n	2e042 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2e032:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2e036:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2e038:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e03a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2e03c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e03e:	b902      	cbnz	r2, 2e042 <bt_att_status+0x46>
	list->tail = node;
   2e040:	609c      	str	r4, [r3, #8]
}
   2e042:	bd38      	pop	{r3, r4, r5, pc}

0002e044 <att_req_send_process>:
{
   2e044:	b570      	push	{r4, r5, r6, lr}
   2e046:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2e048:	3004      	adds	r0, #4
   2e04a:	f7ff fd2f 	bl	2daac <sys_slist_get>
	if (!node) {
   2e04e:	4606      	mov	r6, r0
   2e050:	b1c0      	cbz	r0, 2e084 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2e054:	b153      	cbz	r3, 2e06c <att_req_send_process+0x28>
   2e056:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   2e05a:	d007      	beq.n	2e06c <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e05c:	681c      	ldr	r4, [r3, #0]
   2e05e:	b10c      	cbz	r4, 2e064 <att_req_send_process+0x20>
   2e060:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   2e064:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2e068:	b13b      	cbz	r3, 2e07a <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e06a:	b964      	cbnz	r4, 2e086 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   2e06c:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2e06e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e070:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2e072:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e074:	b933      	cbnz	r3, 2e084 <att_req_send_process+0x40>
	list->tail = node;
   2e076:	60ae      	str	r6, [r5, #8]
}
   2e078:	e004      	b.n	2e084 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   2e07a:	4631      	mov	r1, r6
   2e07c:	f7ff fd88 	bl	2db90 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e080:	2800      	cmp	r0, #0
   2e082:	dbf2      	blt.n	2e06a <att_req_send_process+0x26>
}
   2e084:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e086:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   2e08a:	d004      	beq.n	2e096 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e08c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e090:	b10b      	cbz	r3, 2e096 <att_req_send_process+0x52>
   2e092:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2e096:	4620      	mov	r0, r4
   2e098:	461c      	mov	r4, r3
   2e09a:	e7e3      	b.n	2e064 <att_req_send_process+0x20>

0002e09c <write_cb>:
{
   2e09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e09e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2e0a0:	4601      	mov	r1, r0
{
   2e0a2:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2e0a4:	222a      	movs	r2, #42	; 0x2a
   2e0a6:	6820      	ldr	r0, [r4, #0]
   2e0a8:	f000 fcd7 	bl	2ea5a <bt_gatt_check_perm>
   2e0ac:	4605      	mov	r5, r0
   2e0ae:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2e0b0:	bb20      	cbnz	r0, 2e0fc <write_cb+0x60>
	if (!data->req) {
   2e0b2:	7a23      	ldrb	r3, [r4, #8]
   2e0b4:	b1ab      	cbz	r3, 2e0e2 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2e0b6:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2e0b8:	bf14      	ite	ne
   2e0ba:	2300      	movne	r3, #0
   2e0bc:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2e0be:	9301      	str	r3, [sp, #4]
   2e0c0:	8a63      	ldrh	r3, [r4, #18]
   2e0c2:	9300      	str	r3, [sp, #0]
   2e0c4:	68b7      	ldr	r7, [r6, #8]
   2e0c6:	8a23      	ldrh	r3, [r4, #16]
   2e0c8:	68e2      	ldr	r2, [r4, #12]
   2e0ca:	6820      	ldr	r0, [r4, #0]
   2e0cc:	4631      	mov	r1, r6
   2e0ce:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2e0d0:	1e03      	subs	r3, r0, #0
   2e0d2:	db08      	blt.n	2e0e6 <write_cb+0x4a>
   2e0d4:	8a22      	ldrh	r2, [r4, #16]
   2e0d6:	4293      	cmp	r3, r2
   2e0d8:	d10e      	bne.n	2e0f8 <write_cb+0x5c>
	data->err = 0U;
   2e0da:	2300      	movs	r3, #0
   2e0dc:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2e0de:	2501      	movs	r5, #1
   2e0e0:	e007      	b.n	2e0f2 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2e0e2:	2302      	movs	r3, #2
   2e0e4:	e7eb      	b.n	2e0be <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2e0e6:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2e0ea:	d305      	bcc.n	2e0f8 <write_cb+0x5c>
		return -err;
   2e0ec:	425b      	negs	r3, r3
   2e0ee:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2e0f0:	7523      	strb	r3, [r4, #20]
}
   2e0f2:	4628      	mov	r0, r5
   2e0f4:	b003      	add	sp, #12
   2e0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2e0f8:	230e      	movs	r3, #14
   2e0fa:	e7f9      	b.n	2e0f0 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2e0fc:	2500      	movs	r5, #0
   2e0fe:	e7f8      	b.n	2e0f2 <write_cb+0x56>

0002e100 <bt_att_sent>:
{
   2e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2e102:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2e106:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2e10a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2e10c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2e110:	b10b      	cbz	r3, 2e116 <bt_att_sent+0x16>
		chan->sent(chan);
   2e112:	4638      	mov	r0, r7
   2e114:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e116:	f3bf 8f5b 	dmb	ish
   2e11a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2e11e:	e853 2f00 	ldrex	r2, [r3]
   2e122:	f022 0210 	bic.w	r2, r2, #16
   2e126:	e843 2100 	strex	r1, r2, [r3]
   2e12a:	2900      	cmp	r1, #0
   2e12c:	d1f7      	bne.n	2e11e <bt_att_sent+0x1e>
   2e12e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2e132:	b30c      	cbz	r4, 2e178 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2e134:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2e138:	b98b      	cbnz	r3, 2e15e <bt_att_sent+0x5e>
   2e13a:	6863      	ldr	r3, [r4, #4]
   2e13c:	b17b      	cbz	r3, 2e15e <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2e13e:	1d20      	adds	r0, r4, #4
   2e140:	f7ff fcb4 	bl	2daac <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e144:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2e146:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e148:	4638      	mov	r0, r7
   2e14a:	f7ff fd21 	bl	2db90 <chan_req_send>
   2e14e:	2800      	cmp	r0, #0
   2e150:	da12      	bge.n	2e178 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   2e152:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2e154:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e156:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2e158:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e15a:	b903      	cbnz	r3, 2e15e <bt_att_sent+0x5e>
	list->tail = node;
   2e15c:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2e15e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2e162:	4638      	mov	r0, r7
   2e164:	f7ff fd30 	bl	2dbc8 <process_queue>
	if (!err) {
   2e168:	b130      	cbz	r0, 2e178 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2e16a:	f104 010c 	add.w	r1, r4, #12
   2e16e:	4638      	mov	r0, r7
}
   2e170:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2e174:	f7ff bd28 	b.w	2dbc8 <process_queue>
}
   2e178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e17a <read_cb>:
{
   2e17a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2e17e:	f8d2 8000 	ldr.w	r8, [r2]
{
   2e182:	4606      	mov	r6, r0
	data->err = 0x00;
   2e184:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2e186:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2e18a:	7317      	strb	r7, [r2, #12]
{
   2e18c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e18e:	4631      	mov	r1, r6
   2e190:	2215      	movs	r2, #21
   2e192:	f000 fc62 	bl	2ea5a <bt_gatt_check_perm>
   2e196:	4604      	mov	r4, r0
   2e198:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2e19a:	b9a0      	cbnz	r0, 2e1c6 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2e19c:	e9cd 0000 	strd	r0, r0, [sp]
   2e1a0:	88ab      	ldrh	r3, [r5, #4]
   2e1a2:	68aa      	ldr	r2, [r5, #8]
   2e1a4:	4631      	mov	r1, r6
   2e1a6:	4640      	mov	r0, r8
   2e1a8:	f7ff fd33 	bl	2dc12 <att_chan_read>
	if (ret < 0) {
   2e1ac:	1e03      	subs	r3, r0, #0
   2e1ae:	da0c      	bge.n	2e1ca <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2e1b0:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2e1b4:	bf26      	itte	cs
   2e1b6:	425b      	negcs	r3, r3
   2e1b8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2e1ba:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2e1bc:	732b      	strb	r3, [r5, #12]
}
   2e1be:	4620      	mov	r0, r4
   2e1c0:	b002      	add	sp, #8
   2e1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2e1c6:	463c      	mov	r4, r7
   2e1c8:	e7f9      	b.n	2e1be <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2e1ca:	2401      	movs	r4, #1
   2e1cc:	e7f7      	b.n	2e1be <read_cb+0x44>

0002e1ce <bt_att_chan_create_pdu>:
{
   2e1ce:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2e1d0:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2e1d4:	3201      	adds	r2, #1
   2e1d6:	429a      	cmp	r2, r3
{
   2e1d8:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2e1da:	d81b      	bhi.n	2e214 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   2e1dc:	4608      	mov	r0, r1
   2e1de:	f7ff fcaa 	bl	2db36 <att_op_get_type>
   2e1e2:	2802      	cmp	r0, #2
   2e1e4:	d001      	beq.n	2e1ea <bt_att_chan_create_pdu+0x1c>
   2e1e6:	2804      	cmp	r0, #4
   2e1e8:	d10f      	bne.n	2e20a <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   2e1ea:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2e1ee:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   2e1f0:	2100      	movs	r1, #0
   2e1f2:	4608      	mov	r0, r1
   2e1f4:	f7ff fbd1 	bl	2d99a <bt_l2cap_create_pdu_timeout>
   2e1f8:	4604      	mov	r4, r0
	if (!buf) {
   2e1fa:	b120      	cbz	r0, 2e206 <bt_att_chan_create_pdu+0x38>
   2e1fc:	2101      	movs	r1, #1
   2e1fe:	3008      	adds	r0, #8
   2e200:	f001 fc2f 	bl	2fa62 <net_buf_simple_add>
	hdr->code = op;
   2e204:	7005      	strb	r5, [r0, #0]
}
   2e206:	4620      	mov	r0, r4
   2e208:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   2e20a:	f04f 32ff 	mov.w	r2, #4294967295
   2e20e:	f04f 33ff 	mov.w	r3, #4294967295
   2e212:	e7ed      	b.n	2e1f0 <bt_att_chan_create_pdu+0x22>
		return NULL;
   2e214:	2400      	movs	r4, #0
   2e216:	e7f6      	b.n	2e206 <bt_att_chan_create_pdu+0x38>

0002e218 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2e218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e21c:	4688      	mov	r8, r1
   2e21e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e220:	2101      	movs	r1, #1
   2e222:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2e224:	4605      	mov	r5, r0
   2e226:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e228:	f7ff ffd1 	bl	2e1ce <bt_att_chan_create_pdu>
	if (!buf) {
   2e22c:	4604      	mov	r4, r0
   2e22e:	b170      	cbz	r0, 2e24e <send_err_rsp.part.0+0x36>
   2e230:	2104      	movs	r1, #4
   2e232:	3008      	adds	r0, #8
   2e234:	f001 fc15 	bl	2fa62 <net_buf_simple_add>
	rsp->request = req;
   2e238:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2e23c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2e23e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2e242:	4621      	mov	r1, r4
   2e244:	4628      	mov	r0, r5
}
   2e246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2e24a:	f7f3 b897 	b.w	2137c <bt_att_chan_send_rsp.constprop.0>
}
   2e24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e252 <bt_att_create_pdu>:
{
   2e252:	b570      	push	{r4, r5, r6, lr}
   2e254:	460e      	mov	r6, r1
   2e256:	4615      	mov	r5, r2
	att = att_get(conn);
   2e258:	f7ff feba 	bl	2dfd0 <att_get>
	if (!att) {
   2e25c:	b170      	cbz	r0, 2e27c <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e25e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2e260:	b163      	cbz	r3, 2e27c <bt_att_create_pdu+0x2a>
   2e262:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   2e266:	d009      	beq.n	2e27c <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e268:	681b      	ldr	r3, [r3, #0]
   2e26a:	b10b      	cbz	r3, 2e270 <bt_att_create_pdu+0x1e>
   2e26c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2e270:	1c6a      	adds	r2, r5, #1
   2e272:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   2e276:	428a      	cmp	r2, r1
   2e278:	d902      	bls.n	2e280 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e27a:	b93b      	cbnz	r3, 2e28c <bt_att_create_pdu+0x3a>
}
   2e27c:	2000      	movs	r0, #0
   2e27e:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   2e280:	462a      	mov	r2, r5
   2e282:	4631      	mov	r1, r6
}
   2e284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   2e288:	f7ff bfa1 	b.w	2e1ce <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e28c:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   2e290:	d004      	beq.n	2e29c <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e292:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e296:	b10c      	cbz	r4, 2e29c <bt_att_create_pdu+0x4a>
   2e298:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   2e29c:	4618      	mov	r0, r3
   2e29e:	4623      	mov	r3, r4
   2e2a0:	e7e7      	b.n	2e272 <bt_att_create_pdu+0x20>

0002e2a2 <att_read_blob_req>:
{
   2e2a2:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2e2a4:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2e2a6:	8813      	ldrh	r3, [r2, #0]
   2e2a8:	8852      	ldrh	r2, [r2, #2]
   2e2aa:	9200      	str	r2, [sp, #0]
   2e2ac:	210c      	movs	r1, #12
   2e2ae:	220d      	movs	r2, #13
   2e2b0:	f7f3 fac6 	bl	21840 <att_read_rsp>
}
   2e2b4:	b003      	add	sp, #12
   2e2b6:	f85d fb04 	ldr.w	pc, [sp], #4

0002e2ba <att_read_req>:
{
   2e2ba:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2e2bc:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e2be:	2200      	movs	r2, #0
   2e2c0:	881b      	ldrh	r3, [r3, #0]
   2e2c2:	9200      	str	r2, [sp, #0]
   2e2c4:	210a      	movs	r1, #10
   2e2c6:	220b      	movs	r2, #11
   2e2c8:	f7f3 faba 	bl	21840 <att_read_rsp>
}
   2e2cc:	b003      	add	sp, #12
   2e2ce:	f85d fb04 	ldr.w	pc, [sp], #4

0002e2d2 <att_mtu_req>:
{
   2e2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   2e2d4:	6803      	ldr	r3, [r0, #0]
{
   2e2d6:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   2e2d8:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e2da:	f3bf 8f5b 	dmb	ish
   2e2de:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2e2e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2e2e6:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   2e2ea:	071b      	lsls	r3, r3, #28
   2e2ec:	d421      	bmi.n	2e332 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2e2ee:	688b      	ldr	r3, [r1, #8]
   2e2f0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2e2f2:	2e16      	cmp	r6, #22
   2e2f4:	d91f      	bls.n	2e336 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2e2f6:	2202      	movs	r2, #2
   2e2f8:	2103      	movs	r1, #3
   2e2fa:	f7ff ffaa 	bl	2e252 <bt_att_create_pdu>
	if (!pdu) {
   2e2fe:	4607      	mov	r7, r0
   2e300:	b1d8      	cbz	r0, 2e33a <att_mtu_req+0x68>
   2e302:	2102      	movs	r1, #2
   2e304:	3008      	adds	r0, #8
   2e306:	f001 fbac 	bl	2fa62 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2e30a:	f06f 0303 	mvn.w	r3, #3
   2e30e:	7003      	strb	r3, [r0, #0]
   2e310:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2e312:	4639      	mov	r1, r7
   2e314:	4620      	mov	r0, r4
   2e316:	f7f3 f831 	bl	2137c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e31a:	2efc      	cmp	r6, #252	; 0xfc
   2e31c:	bf28      	it	cs
   2e31e:	26fc      	movcs	r6, #252	; 0xfc
	att_chan_mtu_updated(chan);
   2e320:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e322:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2e326:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2e32a:	f7ff fddd 	bl	2dee8 <att_chan_mtu_updated>
	return 0;
   2e32e:	4628      	mov	r0, r5
}
   2e330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2e332:	2006      	movs	r0, #6
   2e334:	e7fc      	b.n	2e330 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   2e336:	2004      	movs	r0, #4
   2e338:	e7fa      	b.n	2e330 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   2e33a:	200e      	movs	r0, #14
   2e33c:	e7f8      	b.n	2e330 <att_mtu_req+0x5e>

0002e33e <bt_att_init>:
	bt_gatt_init();
   2e33e:	f7f3 bd8f 	b.w	21e60 <bt_gatt_init>

0002e342 <bt_att_get_mtu>:
{
   2e342:	b508      	push	{r3, lr}
	att = att_get(conn);
   2e344:	f7ff fe44 	bl	2dfd0 <att_get>
	if (!att) {
   2e348:	b1d8      	cbz	r0, 2e382 <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e34a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   2e34c:	b1c8      	cbz	r0, 2e382 <bt_att_get_mtu+0x40>
   2e34e:	f5b0 71a2 	subs.w	r1, r0, #324	; 0x144
   2e352:	d015      	beq.n	2e380 <bt_att_get_mtu+0x3e>
   2e354:	6803      	ldr	r3, [r0, #0]
   2e356:	b10b      	cbz	r3, 2e35c <bt_att_get_mtu+0x1a>
   2e358:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2e35c:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2e35e:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   2e362:	4290      	cmp	r0, r2
   2e364:	bf38      	it	cc
   2e366:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e368:	b15b      	cbz	r3, 2e382 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e36a:	f513 72a2 	adds.w	r2, r3, #324	; 0x144
   2e36e:	d004      	beq.n	2e37a <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e370:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   2e374:	b10a      	cbz	r2, 2e37a <bt_att_get_mtu+0x38>
   2e376:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2e37a:	4619      	mov	r1, r3
   2e37c:	4613      	mov	r3, r2
   2e37e:	e7ee      	b.n	2e35e <bt_att_get_mtu+0x1c>
		return 0;
   2e380:	4608      	mov	r0, r1
}
   2e382:	bd08      	pop	{r3, pc}

0002e384 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2e384:	898a      	ldrh	r2, [r1, #12]
   2e386:	6889      	ldr	r1, [r1, #8]
   2e388:	2300      	movs	r3, #0
   2e38a:	f7f3 bbcb 	b.w	21b24 <att_handle_rsp>

0002e38e <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   2e38e:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   2e392:	f7f3 bbf9 	b.w	21b88 <bt_att_disconnected>

0002e396 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   2e396:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e39a:	4607      	mov	r7, r0
   2e39c:	460d      	mov	r5, r1
   2e39e:	4616      	mov	r6, r2
   2e3a0:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2e3a2:	f7ff fe15 	bl	2dfd0 <att_get>
	if (!att) {
   2e3a6:	4604      	mov	r4, r0
   2e3a8:	b938      	cbnz	r0, 2e3ba <bt_att_send+0x24>
		net_buf_unref(buf);
   2e3aa:	4628      	mov	r0, r5
   2e3ac:	f7f5 f8ba 	bl	23524 <net_buf_unref>
		return -ENOTCONN;
   2e3b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2e3b4:	b002      	add	sp, #8
   2e3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2e3ba:	b146      	cbz	r6, 2e3ce <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2e3bc:	f8cd 8000 	str.w	r8, [sp]
   2e3c0:	4633      	mov	r3, r6
   2e3c2:	462a      	mov	r2, r5
   2e3c4:	2104      	movs	r1, #4
   2e3c6:	4638      	mov	r0, r7
   2e3c8:	f7ff faea 	bl	2d9a0 <bt_l2cap_send_cb>
   2e3cc:	e7f2      	b.n	2e3b4 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   2e3ce:	f100 060c 	add.w	r6, r0, #12
   2e3d2:	4629      	mov	r1, r5
   2e3d4:	4630      	mov	r0, r6
   2e3d6:	f001 fb11 	bl	2f9fc <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   2e3da:	2200      	movs	r2, #0
   2e3dc:	2300      	movs	r3, #0
   2e3de:	4630      	mov	r0, r6
   2e3e0:	f001 faee 	bl	2f9c0 <net_buf_get>
	if (!buf) {
   2e3e4:	4605      	mov	r5, r0
   2e3e6:	b908      	cbnz	r0, 2e3ec <bt_att_send+0x56>
	return 0;
   2e3e8:	2000      	movs	r0, #0
   2e3ea:	e7e3      	b.n	2e3b4 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e3ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e3ee:	b1c3      	cbz	r3, 2e422 <bt_att_send+0x8c>
   2e3f0:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   2e3f4:	d015      	beq.n	2e422 <bt_att_send+0x8c>
   2e3f6:	681c      	ldr	r4, [r3, #0]
   2e3f8:	b10c      	cbz	r4, 2e3fe <bt_att_send+0x68>
   2e3fa:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   2e3fe:	2200      	movs	r2, #0
   2e400:	4629      	mov	r1, r5
   2e402:	f7f2 feb3 	bl	2116c <chan_send>
		if (err >= 0) {
   2e406:	2800      	cmp	r0, #0
   2e408:	daee      	bge.n	2e3e8 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e40a:	b154      	cbz	r4, 2e422 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e40c:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   2e410:	d004      	beq.n	2e41c <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e412:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2e416:	b10b      	cbz	r3, 2e41c <bt_att_send+0x86>
   2e418:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2e41c:	4620      	mov	r0, r4
   2e41e:	461c      	mov	r4, r3
   2e420:	e7ed      	b.n	2e3fe <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   2e422:	4629      	mov	r1, r5
   2e424:	4630      	mov	r0, r6
   2e426:	f003 f9ce 	bl	317c6 <k_queue_prepend>
   2e42a:	e7dd      	b.n	2e3e8 <bt_att_send+0x52>

0002e42c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2e42c:	b510      	push	{r4, lr}
   2e42e:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2e430:	f7ff fdce 	bl	2dfd0 <att_get>
	if (!att) {
   2e434:	b160      	cbz	r0, 2e450 <bt_att_req_send+0x24>
	parent->next = child;
   2e436:	2300      	movs	r3, #0
   2e438:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2e43a:	6883      	ldr	r3, [r0, #8]
   2e43c:	b92b      	cbnz	r3, 2e44a <bt_att_req_send+0x1e>
	list->head = node;
   2e43e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2e442:	f7ff fdff 	bl	2e044 <att_req_send_process>

	return 0;
   2e446:	2000      	movs	r0, #0
}
   2e448:	bd10      	pop	{r4, pc}
	parent->next = child;
   2e44a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e44c:	6084      	str	r4, [r0, #8]
}
   2e44e:	e7f8      	b.n	2e442 <bt_att_req_send+0x16>
		return -ENOTCONN;
   2e450:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e454:	e7f8      	b.n	2e448 <bt_att_req_send+0x1c>

0002e456 <found_attr>:
	*found = attr;
   2e456:	6010      	str	r0, [r2, #0]
}
   2e458:	2000      	movs	r0, #0
   2e45a:	4770      	bx	lr

0002e45c <gatt_ccc_changed>:
{
   2e45c:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2e45e:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2e460:	895a      	ldrh	r2, [r3, #10]
   2e462:	428a      	cmp	r2, r1
   2e464:	d003      	beq.n	2e46e <gatt_ccc_changed+0x12>
		ccc->value = value;
   2e466:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2e468:	68db      	ldr	r3, [r3, #12]
   2e46a:	b103      	cbz	r3, 2e46e <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2e46c:	4718      	bx	r3
}
   2e46e:	4770      	bx	lr

0002e470 <gatt_indicate_rsp>:
{
   2e470:	b510      	push	{r4, lr}
   2e472:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2e474:	68a3      	ldr	r3, [r4, #8]
{
   2e476:	460a      	mov	r2, r1
	if (params->func) {
   2e478:	b10b      	cbz	r3, 2e47e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2e47a:	4621      	mov	r1, r4
   2e47c:	4798      	blx	r3
	params->_ref--;
   2e47e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e480:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2e482:	3b01      	subs	r3, #1
   2e484:	b2db      	uxtb	r3, r3
   2e486:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e488:	b122      	cbz	r2, 2e494 <gatt_indicate_rsp+0x24>
   2e48a:	b91b      	cbnz	r3, 2e494 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2e48c:	4620      	mov	r0, r4
}
   2e48e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2e492:	4710      	bx	r2
}
   2e494:	bd10      	pop	{r4, pc}

0002e496 <match_uuid>:
	data->attr = attr;
   2e496:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2e498:	8091      	strh	r1, [r2, #4]
}
   2e49a:	2000      	movs	r0, #0
   2e49c:	4770      	bx	lr

0002e49e <ccc_set_cb>:
}
   2e49e:	2000      	movs	r0, #0
   2e4a0:	4770      	bx	lr

0002e4a2 <atomic_get>:
   2e4a2:	f3bf 8f5b 	dmb	ish
   2e4a6:	6800      	ldr	r0, [r0, #0]
   2e4a8:	f3bf 8f5b 	dmb	ish
}
   2e4ac:	4770      	bx	lr

0002e4ae <gen_hash_m>:
{
   2e4ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e4b0:	6807      	ldr	r7, [r0, #0]
   2e4b2:	783d      	ldrb	r5, [r7, #0]
{
   2e4b4:	b089      	sub	sp, #36	; 0x24
   2e4b6:	4606      	mov	r6, r0
   2e4b8:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e4ba:	b10d      	cbz	r5, 2e4c0 <gen_hash_m+0x12>
	switch (u16->val) {
   2e4bc:	2501      	movs	r5, #1
   2e4be:	e014      	b.n	2e4ea <gen_hash_m+0x3c>
   2e4c0:	887b      	ldrh	r3, [r7, #2]
   2e4c2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2e4c6:	d004      	beq.n	2e4d2 <gen_hash_m+0x24>
   2e4c8:	d812      	bhi.n	2e4f0 <gen_hash_m+0x42>
   2e4ca:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2e4ce:	2b03      	cmp	r3, #3
   2e4d0:	d8f4      	bhi.n	2e4bc <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2e4d2:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e4d6:	2202      	movs	r2, #2
   2e4d8:	f10d 010e 	add.w	r1, sp, #14
   2e4dc:	4620      	mov	r0, r4
   2e4de:	f7fe fae9 	bl	2cab4 <tc_cmac_update>
   2e4e2:	b9e0      	cbnz	r0, 2e51e <gen_hash_m+0x70>
			state->err = -EINVAL;
   2e4e4:	f06f 0315 	mvn.w	r3, #21
   2e4e8:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2e4ea:	4628      	mov	r0, r5
   2e4ec:	b009      	add	sp, #36	; 0x24
   2e4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2e4f0:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2e4f4:	33ff      	adds	r3, #255	; 0xff
   2e4f6:	b29b      	uxth	r3, r3
   2e4f8:	2b04      	cmp	r3, #4
   2e4fa:	d8df      	bhi.n	2e4bc <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2e4fc:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e500:	2202      	movs	r2, #2
   2e502:	f10d 010e 	add.w	r1, sp, #14
   2e506:	4620      	mov	r0, r4
   2e508:	f7fe fad4 	bl	2cab4 <tc_cmac_update>
   2e50c:	2800      	cmp	r0, #0
   2e50e:	d0e9      	beq.n	2e4e4 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2e510:	887b      	ldrh	r3, [r7, #2]
   2e512:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e516:	2202      	movs	r2, #2
   2e518:	f10d 010e 	add.w	r1, sp, #14
   2e51c:	e017      	b.n	2e54e <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2e51e:	887b      	ldrh	r3, [r7, #2]
   2e520:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e524:	2202      	movs	r2, #2
   2e526:	f10d 010e 	add.w	r1, sp, #14
   2e52a:	4620      	mov	r0, r4
   2e52c:	f7fe fac2 	bl	2cab4 <tc_cmac_update>
   2e530:	2800      	cmp	r0, #0
   2e532:	d0d7      	beq.n	2e4e4 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2e534:	2000      	movs	r0, #0
   2e536:	2310      	movs	r3, #16
   2e538:	eb0d 0203 	add.w	r2, sp, r3
   2e53c:	6877      	ldr	r7, [r6, #4]
   2e53e:	9000      	str	r0, [sp, #0]
   2e540:	4631      	mov	r1, r6
   2e542:	47b8      	blx	r7
		if (len < 0) {
   2e544:	1e02      	subs	r2, r0, #0
   2e546:	da01      	bge.n	2e54c <gen_hash_m+0x9e>
			state->err = len;
   2e548:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e54a:	e7ce      	b.n	2e4ea <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2e54c:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e54e:	4620      	mov	r0, r4
   2e550:	f7fe fab0 	bl	2cab4 <tc_cmac_update>
   2e554:	2800      	cmp	r0, #0
   2e556:	d1b1      	bne.n	2e4bc <gen_hash_m+0xe>
   2e558:	e7c4      	b.n	2e4e4 <gen_hash_m+0x36>

0002e55a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e55a:	2301      	movs	r3, #1
   2e55c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e55e:	f3bf 8f5b 	dmb	ish
   2e562:	e850 2f00 	ldrex	r2, [r0]
   2e566:	431a      	orrs	r2, r3
   2e568:	e840 2100 	strex	r1, r2, [r0]
   2e56c:	2900      	cmp	r1, #0
   2e56e:	d1f8      	bne.n	2e562 <atomic_set_bit+0x8>
   2e570:	f3bf 8f5b 	dmb	ish
}
   2e574:	4770      	bx	lr

0002e576 <atomic_and>:
{
   2e576:	4603      	mov	r3, r0
}
   2e578:	f3bf 8f5b 	dmb	ish
   2e57c:	e853 0f00 	ldrex	r0, [r3]
   2e580:	ea00 0201 	and.w	r2, r0, r1
   2e584:	e843 2c00 	strex	ip, r2, [r3]
   2e588:	f1bc 0f00 	cmp.w	ip, #0
   2e58c:	d1f6      	bne.n	2e57c <atomic_and+0x6>
   2e58e:	f3bf 8f5b 	dmb	ish
   2e592:	4770      	bx	lr

0002e594 <find_ccc_cfg>:
{
   2e594:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e596:	460c      	mov	r4, r1
   2e598:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2e59a:	b148      	cbz	r0, 2e5b0 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2e59c:	7809      	ldrb	r1, [r1, #0]
   2e59e:	462a      	mov	r2, r5
   2e5a0:	f7ff f938 	bl	2d814 <bt_conn_is_peer_addr_le>
   2e5a4:	2800      	cmp	r0, #0
	return NULL;
   2e5a6:	bf08      	it	eq
   2e5a8:	2400      	moveq	r4, #0
}
   2e5aa:	4620      	mov	r0, r4
   2e5ac:	b003      	add	sp, #12
   2e5ae:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2e5b0:	9000      	str	r0, [sp, #0]
   2e5b2:	2207      	movs	r2, #7
   2e5b4:	f8cd 0003 	str.w	r0, [sp, #3]
   2e5b8:	4669      	mov	r1, sp
   2e5ba:	4628      	mov	r0, r5
   2e5bc:	f7fe fb56 	bl	2cc6c <memcmp>
   2e5c0:	2800      	cmp	r0, #0
	return NULL;
   2e5c2:	bf18      	it	ne
   2e5c4:	2400      	movne	r4, #0
   2e5c6:	e7f0      	b.n	2e5aa <find_ccc_cfg+0x16>

0002e5c8 <sc_restore_rsp>:
{
   2e5c8:	b538      	push	{r3, r4, r5, lr}
   2e5ca:	4605      	mov	r5, r0
   2e5cc:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   2e5ce:	f7f3 fb59 	bl	21c84 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2e5d2:	b130      	cbz	r0, 2e5e2 <sc_restore_rsp+0x1a>
   2e5d4:	7a03      	ldrb	r3, [r0, #8]
   2e5d6:	07db      	lsls	r3, r3, #31
   2e5d8:	d503      	bpl.n	2e5e2 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2e5da:	2100      	movs	r1, #0
   2e5dc:	300c      	adds	r0, #12
   2e5de:	f7ff ffbc 	bl	2e55a <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2e5e2:	b964      	cbnz	r4, 2e5fe <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e5e4:	7a28      	ldrb	r0, [r5, #8]
   2e5e6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2e5ea:	f7f3 fb3b 	bl	21c64 <find_sc_cfg>
		if (sc_cfg) {
   2e5ee:	b130      	cbz	r0, 2e5fe <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2e5f0:	4621      	mov	r1, r4
   2e5f2:	2204      	movs	r2, #4
}
   2e5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   2e5f8:	3008      	adds	r0, #8
   2e5fa:	f7fe bb69 	b.w	2ccd0 <memset>
}
   2e5fe:	bd38      	pop	{r3, r4, r5, pc}

0002e600 <clear_ccc_cfg>:
{
   2e600:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2e602:	2500      	movs	r5, #0
{
   2e604:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   2e606:	2207      	movs	r2, #7
   2e608:	4669      	mov	r1, sp
   2e60a:	3001      	adds	r0, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2e60c:	9500      	str	r5, [sp, #0]
   2e60e:	f8cd 5003 	str.w	r5, [sp, #3]
   2e612:	f7fe fb52 	bl	2ccba <memcpy>
	cfg->id = 0U;
   2e616:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2e618:	8125      	strh	r5, [r4, #8]
}
   2e61a:	b003      	add	sp, #12
   2e61c:	bd30      	pop	{r4, r5, pc}

0002e61e <bt_gatt_attr_write_ccc>:
{
   2e61e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e622:	461f      	mov	r7, r3
   2e624:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2e628:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   2e62c:	4606      	mov	r6, r0
   2e62e:	4688      	mov	r8, r1
	if (offset) {
   2e630:	2b00      	cmp	r3, #0
   2e632:	d13e      	bne.n	2e6b2 <bt_gatt_attr_write_ccc+0x94>
	if (!len || len > sizeof(uint16_t)) {
   2e634:	1e7b      	subs	r3, r7, #1
   2e636:	2b01      	cmp	r3, #1
   2e638:	d83e      	bhi.n	2e6b8 <bt_gatt_attr_write_ccc+0x9a>
	if (len < sizeof(uint16_t)) {
   2e63a:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   2e63c:	7815      	ldrb	r5, [r2, #0]
   2e63e:	bf18      	it	ne
   2e640:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   2e642:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   2e644:	bf0c      	ite	eq
   2e646:	b2ad      	uxtheq	r5, r5
   2e648:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   2e64c:	f7ff ffa2 	bl	2e594 <find_ccc_cfg>
	if (!cfg) {
   2e650:	4604      	mov	r4, r0
   2e652:	b980      	cbnz	r0, 2e676 <bt_gatt_attr_write_ccc+0x58>
		if (!value) {
   2e654:	b915      	cbnz	r5, 2e65c <bt_gatt_attr_write_ccc+0x3e>
			return len;
   2e656:	4638      	mov	r0, r7
}
   2e658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2e65c:	4649      	mov	r1, r9
   2e65e:	f7ff ff99 	bl	2e594 <find_ccc_cfg>
		if (!cfg) {
   2e662:	4604      	mov	r4, r0
   2e664:	b358      	cbz	r0, 2e6be <bt_gatt_attr_write_ccc+0xa0>
   2e666:	2207      	movs	r2, #7
   2e668:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2e66c:	3001      	adds	r0, #1
   2e66e:	f7fe fb24 	bl	2ccba <memcpy>
		cfg->id = conn->id;
   2e672:	7a33      	ldrb	r3, [r6, #8]
   2e674:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   2e676:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2e67a:	b973      	cbnz	r3, 2e69a <bt_gatt_attr_write_ccc+0x7c>
	if (cfg->value != ccc->value) {
   2e67c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   2e680:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   2e682:	42ab      	cmp	r3, r5
   2e684:	d003      	beq.n	2e68e <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   2e686:	4649      	mov	r1, r9
   2e688:	4640      	mov	r0, r8
   2e68a:	f7ff fee7 	bl	2e45c <gatt_ccc_changed>
	if (!value) {
   2e68e:	2d00      	cmp	r5, #0
   2e690:	d1e1      	bne.n	2e656 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   2e692:	4620      	mov	r0, r4
   2e694:	f7ff ffb4 	bl	2e600 <clear_ccc_cfg>
   2e698:	e7dd      	b.n	2e656 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2e69a:	462a      	mov	r2, r5
   2e69c:	4641      	mov	r1, r8
   2e69e:	4630      	mov	r0, r6
   2e6a0:	4798      	blx	r3
		if (write < 0) {
   2e6a2:	2800      	cmp	r0, #0
   2e6a4:	dbd8      	blt.n	2e658 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   2e6a6:	1e42      	subs	r2, r0, #1
   2e6a8:	2a01      	cmp	r2, #1
   2e6aa:	d9e7      	bls.n	2e67c <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   2e6ac:	f06f 000d 	mvn.w	r0, #13
   2e6b0:	e7d2      	b.n	2e658 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e6b2:	f06f 0006 	mvn.w	r0, #6
   2e6b6:	e7cf      	b.n	2e658 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2e6b8:	f06f 000c 	mvn.w	r0, #12
   2e6bc:	e7cc      	b.n	2e658 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2e6be:	f06f 0010 	mvn.w	r0, #16
   2e6c2:	e7c9      	b.n	2e658 <bt_gatt_attr_write_ccc+0x3a>

0002e6c4 <clear_cf_cfg>:
{
   2e6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e6c6:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2e6c8:	2500      	movs	r5, #0
   2e6ca:	2207      	movs	r2, #7
   2e6cc:	4669      	mov	r1, sp
   2e6ce:	3001      	adds	r0, #1
   2e6d0:	9500      	str	r5, [sp, #0]
   2e6d2:	f8cd 5003 	str.w	r5, [sp, #3]
   2e6d6:	f7fe faf0 	bl	2ccba <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2e6da:	f104 0008 	add.w	r0, r4, #8
   2e6de:	2201      	movs	r2, #1
   2e6e0:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2e6e2:	340c      	adds	r4, #12
   2e6e4:	f7fe faf4 	bl	2ccd0 <memset>
   2e6e8:	f3bf 8f5b 	dmb	ish
   2e6ec:	e854 3f00 	ldrex	r3, [r4]
   2e6f0:	e844 5200 	strex	r2, r5, [r4]
   2e6f4:	2a00      	cmp	r2, #0
   2e6f6:	d1f9      	bne.n	2e6ec <clear_cf_cfg+0x28>
   2e6f8:	f3bf 8f5b 	dmb	ish
}
   2e6fc:	b003      	add	sp, #12
   2e6fe:	bd30      	pop	{r4, r5, pc}

0002e700 <cf_write>:
{
   2e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e704:	4698      	mov	r8, r3
   2e706:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   2e70a:	2b01      	cmp	r3, #1
{
   2e70c:	4606      	mov	r6, r0
   2e70e:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   2e710:	d831      	bhi.n	2e776 <cf_write+0x76>
	if (offset + len > sizeof(cfg->data)) {
   2e712:	4443      	add	r3, r8
   2e714:	2b01      	cmp	r3, #1
   2e716:	4645      	mov	r5, r8
   2e718:	dc30      	bgt.n	2e77c <cf_write+0x7c>
	cfg = find_cf_cfg(conn);
   2e71a:	f7f3 fab3 	bl	21c84 <find_cf_cfg>
	if (!cfg) {
   2e71e:	4604      	mov	r4, r0
   2e720:	b918      	cbnz	r0, 2e72a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   2e722:	f7f3 faaf 	bl	21c84 <find_cf_cfg>
	if (!cfg) {
   2e726:	4604      	mov	r4, r0
   2e728:	b358      	cbz	r0, 2e782 <cf_write+0x82>
{
   2e72a:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2e72c:	f1b8 0f00 	cmp.w	r8, #0
   2e730:	d10f      	bne.n	2e752 <cf_write+0x52>
   2e732:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2e736:	2207      	movs	r2, #7
   2e738:	1c60      	adds	r0, r4, #1
   2e73a:	f7fe fabe 	bl	2ccba <memcpy>
	cfg->id = conn->id;
   2e73e:	4620      	mov	r0, r4
   2e740:	7a33      	ldrb	r3, [r6, #8]
   2e742:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2e746:	2100      	movs	r1, #0
   2e748:	f7ff ff07 	bl	2e55a <atomic_set_bit>
}
   2e74c:	4628      	mov	r0, r5
   2e74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2e752:	7a20      	ldrb	r0, [r4, #8]
   2e754:	fa20 f301 	lsr.w	r3, r0, r1
   2e758:	07da      	lsls	r2, r3, #31
   2e75a:	d503      	bpl.n	2e764 <cf_write+0x64>
		    !(value[i / 8] & BIT(i % 8))) {
   2e75c:	783b      	ldrb	r3, [r7, #0]
   2e75e:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2e760:	07db      	lsls	r3, r3, #31
   2e762:	d511      	bpl.n	2e788 <cf_write+0x88>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2e764:	3101      	adds	r1, #1
   2e766:	2903      	cmp	r1, #3
   2e768:	d1e0      	bne.n	2e72c <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2e76a:	783b      	ldrb	r3, [r7, #0]
   2e76c:	f003 0307 	and.w	r3, r3, #7
   2e770:	4318      	orrs	r0, r3
   2e772:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2e774:	e7dd      	b.n	2e732 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e776:	f06f 0506 	mvn.w	r5, #6
   2e77a:	e7e7      	b.n	2e74c <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2e77c:	f06f 050c 	mvn.w	r5, #12
   2e780:	e7e4      	b.n	2e74c <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2e782:	f06f 0510 	mvn.w	r5, #16
   2e786:	e7e1      	b.n	2e74c <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   2e788:	f06f 0512 	mvn.w	r5, #18
   2e78c:	e7de      	b.n	2e74c <cf_write+0x4c>

0002e78e <read_appearance>:
{
   2e78e:	b513      	push	{r0, r1, r4, lr}
   2e790:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2e794:	4610      	mov	r0, r2
	if (offset > value_len) {
   2e796:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2e798:	f44f 6218 	mov.w	r2, #2432	; 0x980
   2e79c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2e7a0:	d80d      	bhi.n	2e7be <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2e7a2:	f1c1 0402 	rsb	r4, r1, #2
   2e7a6:	429c      	cmp	r4, r3
   2e7a8:	bfa8      	it	ge
   2e7aa:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2e7ac:	f10d 0306 	add.w	r3, sp, #6
   2e7b0:	4622      	mov	r2, r4
   2e7b2:	4419      	add	r1, r3
   2e7b4:	f7fe fa81 	bl	2ccba <memcpy>
}
   2e7b8:	4620      	mov	r0, r4
   2e7ba:	b002      	add	sp, #8
   2e7bc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e7be:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2e7c2:	e7f9      	b.n	2e7b8 <read_appearance+0x2a>

0002e7c4 <read_name>:
{
   2e7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e7c8:	4698      	mov	r8, r3
   2e7ca:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2e7ce:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2e7d0:	f7f1 fb1a 	bl	1fe08 <bt_get_name>
   2e7d4:	4607      	mov	r7, r0
				 strlen(name));
   2e7d6:	f7fe fa2d 	bl	2cc34 <strlen>
	if (offset > value_len) {
   2e7da:	b283      	uxth	r3, r0
   2e7dc:	42b3      	cmp	r3, r6
   2e7de:	d30c      	bcc.n	2e7fa <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2e7e0:	1b9c      	subs	r4, r3, r6
   2e7e2:	4544      	cmp	r4, r8
   2e7e4:	bfa8      	it	ge
   2e7e6:	4644      	movge	r4, r8
   2e7e8:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2e7ea:	4622      	mov	r2, r4
   2e7ec:	19b9      	adds	r1, r7, r6
   2e7ee:	4628      	mov	r0, r5
   2e7f0:	f7fe fa63 	bl	2ccba <memcpy>
}
   2e7f4:	4620      	mov	r0, r4
   2e7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e7fa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2e7fe:	e7f9      	b.n	2e7f4 <read_name+0x30>

0002e800 <bt_gatt_attr_read_ccc>:
{
   2e800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2e802:	68c9      	ldr	r1, [r1, #12]
{
   2e804:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2e808:	4615      	mov	r5, r2
   2e80a:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2e80c:	f7ff fec2 	bl	2e594 <find_ccc_cfg>
	if (cfg) {
   2e810:	b100      	cbz	r0, 2e814 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2e812:	8900      	ldrh	r0, [r0, #8]
   2e814:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2e818:	2e02      	cmp	r6, #2
   2e81a:	d80e      	bhi.n	2e83a <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2e81c:	f1c6 0402 	rsb	r4, r6, #2
   2e820:	42bc      	cmp	r4, r7
   2e822:	bfa8      	it	ge
   2e824:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2e826:	f10d 0306 	add.w	r3, sp, #6
   2e82a:	4622      	mov	r2, r4
   2e82c:	1999      	adds	r1, r3, r6
   2e82e:	4628      	mov	r0, r5
   2e830:	f7fe fa43 	bl	2ccba <memcpy>
}
   2e834:	4620      	mov	r0, r4
   2e836:	b003      	add	sp, #12
   2e838:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e83a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2e83e:	e7f9      	b.n	2e834 <bt_gatt_attr_read_ccc+0x34>

0002e840 <cf_read>:
{
   2e840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e842:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2e844:	2300      	movs	r3, #0
{
   2e846:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2e84a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2e84e:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2e850:	f7f3 fa18 	bl	21c84 <find_cf_cfg>
	if (cfg) {
   2e854:	b128      	cbz	r0, 2e862 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2e856:	f100 0108 	add.w	r1, r0, #8
   2e85a:	2201      	movs	r2, #1
   2e85c:	a801      	add	r0, sp, #4
   2e85e:	f7fe fa2c 	bl	2ccba <memcpy>
	if (offset > value_len) {
   2e862:	2e01      	cmp	r6, #1
   2e864:	d80d      	bhi.n	2e882 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2e866:	f1c6 0401 	rsb	r4, r6, #1
   2e86a:	42bc      	cmp	r4, r7
   2e86c:	bfa8      	it	ge
   2e86e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2e870:	ab01      	add	r3, sp, #4
   2e872:	4622      	mov	r2, r4
   2e874:	1999      	adds	r1, r3, r6
   2e876:	4628      	mov	r0, r5
   2e878:	f7fe fa1f 	bl	2ccba <memcpy>
}
   2e87c:	4620      	mov	r0, r4
   2e87e:	b003      	add	sp, #12
   2e880:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e882:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2e886:	e7f9      	b.n	2e87c <cf_read+0x3c>

0002e888 <bt_gatt_attr_read_service>:
{
   2e888:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2e88a:	68c9      	ldr	r1, [r1, #12]
{
   2e88c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2e890:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2e892:	780b      	ldrb	r3, [r1, #0]
{
   2e894:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2e896:	b993      	cbnz	r3, 2e8be <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2e898:	884b      	ldrh	r3, [r1, #2]
   2e89a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2e89e:	2d02      	cmp	r5, #2
   2e8a0:	d819      	bhi.n	2e8d6 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2e8a2:	f1c5 0202 	rsb	r2, r5, #2
   2e8a6:	4294      	cmp	r4, r2
   2e8a8:	bfa8      	it	ge
   2e8aa:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2e8ac:	f10d 0306 	add.w	r3, sp, #6
   2e8b0:	4622      	mov	r2, r4
   2e8b2:	1959      	adds	r1, r3, r5
   2e8b4:	f7fe fa01 	bl	2ccba <memcpy>
}
   2e8b8:	4620      	mov	r0, r4
   2e8ba:	b003      	add	sp, #12
   2e8bc:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2e8be:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2e8c0:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2e8c4:	d807      	bhi.n	2e8d6 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2e8c6:	f1c5 0210 	rsb	r2, r5, #16
   2e8ca:	4294      	cmp	r4, r2
   2e8cc:	bfa8      	it	ge
   2e8ce:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2e8d0:	4622      	mov	r2, r4
   2e8d2:	4429      	add	r1, r5
   2e8d4:	e7ee      	b.n	2e8b4 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e8d6:	f06f 0406 	mvn.w	r4, #6
   2e8da:	e7ed      	b.n	2e8b8 <bt_gatt_attr_read_service+0x30>

0002e8dc <sc_save>:
{
   2e8dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e8e0:	4680      	mov	r8, r0
   2e8e2:	460f      	mov	r7, r1
   2e8e4:	4616      	mov	r6, r2
   2e8e6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   2e8e8:	f7f3 f9bc 	bl	21c64 <find_sc_cfg>
	if (!cfg) {
   2e8ec:	4604      	mov	r4, r0
   2e8ee:	b968      	cbnz	r0, 2e90c <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2e8f0:	4669      	mov	r1, sp
   2e8f2:	9000      	str	r0, [sp, #0]
   2e8f4:	f8cd 0003 	str.w	r0, [sp, #3]
   2e8f8:	f7f3 f9b4 	bl	21c64 <find_sc_cfg>
		if (!cfg) {
   2e8fc:	4604      	mov	r4, r0
   2e8fe:	b180      	cbz	r0, 2e922 <sc_save+0x46>
		cfg->id = id;
   2e900:	f800 8b01 	strb.w	r8, [r0], #1
   2e904:	2207      	movs	r2, #7
   2e906:	4639      	mov	r1, r7
   2e908:	f7fe f9d7 	bl	2ccba <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   2e90c:	8922      	ldrh	r2, [r4, #8]
   2e90e:	8963      	ldrh	r3, [r4, #10]
   2e910:	b91a      	cbnz	r2, 2e91a <sc_save+0x3e>
   2e912:	b923      	cbnz	r3, 2e91e <sc_save+0x42>
		cfg->data.start = start;
   2e914:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   2e916:	8165      	strh	r5, [r4, #10]
   2e918:	e003      	b.n	2e922 <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   2e91a:	4296      	cmp	r6, r2
   2e91c:	d304      	bcc.n	2e928 <sc_save+0x4c>
   2e91e:	429d      	cmp	r5, r3
   2e920:	d8f9      	bhi.n	2e916 <sc_save+0x3a>
}
   2e922:	b002      	add	sp, #8
   2e924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   2e928:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   2e92a:	e7f8      	b.n	2e91e <sc_save+0x42>

0002e92c <sc_clear>:
{
   2e92c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e92e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2e932:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e934:	4631      	mov	r1, r6
   2e936:	7a00      	ldrb	r0, [r0, #8]
   2e938:	f7fe fd08 	bl	2d34c <bt_addr_le_is_bonded>
   2e93c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2e93e:	4631      	mov	r1, r6
   2e940:	f7f3 f990 	bl	21c64 <find_sc_cfg>
	if (!cfg) {
   2e944:	b128      	cbz	r0, 2e952 <sc_clear+0x26>
}
   2e946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   2e94a:	220c      	movs	r2, #12
   2e94c:	2100      	movs	r1, #0
   2e94e:	f7fe b9bf 	b.w	2ccd0 <memset>
}
   2e952:	bd70      	pop	{r4, r5, r6, pc}

0002e954 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2e954:	2a02      	cmp	r2, #2
{
   2e956:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2e958:	d108      	bne.n	2e96c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2e95a:	2300      	movs	r3, #0
   2e95c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2e960:	461a      	mov	r2, r3
   2e962:	7a00      	ldrb	r0, [r0, #8]
   2e964:	f7ff ffba 	bl	2e8dc <sc_save>
}
   2e968:	2002      	movs	r0, #2
   2e96a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2e96c:	f7ff ffde 	bl	2e92c <sc_clear>
   2e970:	e7fa      	b.n	2e968 <sc_ccc_cfg_write+0x14>

0002e972 <bt_gatt_attr_read>:
{
   2e972:	b538      	push	{r3, r4, r5, lr}
   2e974:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2e978:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2e97c:	42a9      	cmp	r1, r5
{
   2e97e:	4610      	mov	r0, r2
	if (offset > value_len) {
   2e980:	d80b      	bhi.n	2e99a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2e982:	1a6d      	subs	r5, r5, r1
   2e984:	429d      	cmp	r5, r3
   2e986:	bfa8      	it	ge
   2e988:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2e98a:	9b05      	ldr	r3, [sp, #20]
   2e98c:	b2ad      	uxth	r5, r5
   2e98e:	462a      	mov	r2, r5
   2e990:	4419      	add	r1, r3
   2e992:	f7fe f992 	bl	2ccba <memcpy>
}
   2e996:	4628      	mov	r0, r5
   2e998:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e99a:	f06f 0506 	mvn.w	r5, #6
   2e99e:	e7fa      	b.n	2e996 <bt_gatt_attr_read+0x24>

0002e9a0 <bt_gatt_attr_value_handle>:
{
   2e9a0:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e9a2:	4604      	mov	r4, r0
   2e9a4:	b910      	cbnz	r0, 2e9ac <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2e9a6:	2000      	movs	r0, #0
}
   2e9a8:	b002      	add	sp, #8
   2e9aa:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e9ac:	2300      	movs	r3, #0
   2e9ae:	f88d 3004 	strb.w	r3, [sp, #4]
   2e9b2:	6800      	ldr	r0, [r0, #0]
   2e9b4:	f642 0303 	movw	r3, #10243	; 0x2803
   2e9b8:	a901      	add	r1, sp, #4
   2e9ba:	f8ad 3006 	strh.w	r3, [sp, #6]
   2e9be:	f7fe f9e8 	bl	2cd92 <bt_uuid_cmp>
   2e9c2:	2800      	cmp	r0, #0
   2e9c4:	d1ef      	bne.n	2e9a6 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2e9c6:	68e3      	ldr	r3, [r4, #12]
   2e9c8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2e9ca:	2800      	cmp	r0, #0
   2e9cc:	d1ec      	bne.n	2e9a8 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2e9ce:	4620      	mov	r0, r4
   2e9d0:	f7f3 fa8a 	bl	21ee8 <bt_gatt_attr_get_handle>
   2e9d4:	3001      	adds	r0, #1
   2e9d6:	b280      	uxth	r0, r0
	return handle;
   2e9d8:	e7e6      	b.n	2e9a8 <bt_gatt_attr_value_handle+0x8>

0002e9da <bt_gatt_attr_read_chrc>:
{
   2e9da:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2e9dc:	68cf      	ldr	r7, [r1, #12]
{
   2e9de:	b087      	sub	sp, #28
   2e9e0:	4608      	mov	r0, r1
   2e9e2:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2e9e4:	79bb      	ldrb	r3, [r7, #6]
   2e9e6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2e9ea:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2e9ee:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2e9f0:	f7ff ffd6 	bl	2e9a0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2e9f4:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2e9f6:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2e9fa:	780b      	ldrb	r3, [r1, #0]
   2e9fc:	b99b      	cbnz	r3, 2ea26 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2e9fe:	884b      	ldrh	r3, [r1, #2]
   2ea00:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2ea04:	2105      	movs	r1, #5
	if (offset > value_len) {
   2ea06:	42b1      	cmp	r1, r6
   2ea08:	d315      	bcc.n	2ea36 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2ea0a:	1b89      	subs	r1, r1, r6
   2ea0c:	42a1      	cmp	r1, r4
   2ea0e:	bfa8      	it	ge
   2ea10:	4621      	movge	r1, r4
   2ea12:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2ea14:	ab01      	add	r3, sp, #4
   2ea16:	4622      	mov	r2, r4
   2ea18:	1999      	adds	r1, r3, r6
   2ea1a:	4628      	mov	r0, r5
   2ea1c:	f7fe f94d 	bl	2ccba <memcpy>
}
   2ea20:	4620      	mov	r0, r4
   2ea22:	b007      	add	sp, #28
   2ea24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2ea26:	3101      	adds	r1, #1
   2ea28:	2210      	movs	r2, #16
   2ea2a:	f10d 0007 	add.w	r0, sp, #7
   2ea2e:	f7fe f944 	bl	2ccba <memcpy>
		value_len += 16U;
   2ea32:	2113      	movs	r1, #19
   2ea34:	e7e7      	b.n	2ea06 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2ea36:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2ea3a:	e7f1      	b.n	2ea20 <bt_gatt_attr_read_chrc+0x46>

0002ea3c <bt_gatt_foreach_attr>:
{
   2ea3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2ea3e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2ea42:	2300      	movs	r3, #0
   2ea44:	9300      	str	r3, [sp, #0]
   2ea46:	461a      	mov	r2, r3
   2ea48:	f7f3 fa7e 	bl	21f48 <bt_gatt_foreach_attr_type>
}
   2ea4c:	b005      	add	sp, #20
   2ea4e:	f85d fb04 	ldr.w	pc, [sp], #4

0002ea52 <db_hash_process>:
	db_hash_gen(true);
   2ea52:	f7f3 bb25 	b.w	220a0 <db_hash_gen.isra.0>

0002ea56 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2ea56:	f7ff bc74 	b.w	2e342 <bt_att_get_mtu>

0002ea5a <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2ea5a:	07d3      	lsls	r3, r2, #31
{
   2ea5c:	b510      	push	{r4, lr}
   2ea5e:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2ea60:	d504      	bpl.n	2ea6c <bt_gatt_check_perm+0x12>
   2ea62:	f014 0f15 	tst.w	r4, #21
   2ea66:	d017      	beq.n	2ea98 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ea68:	684b      	ldr	r3, [r1, #4]
   2ea6a:	b1ab      	cbz	r3, 2ea98 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2ea6c:	0793      	lsls	r3, r2, #30
   2ea6e:	d504      	bpl.n	2ea7a <bt_gatt_check_perm+0x20>
   2ea70:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   2ea74:	d012      	beq.n	2ea9c <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2ea76:	688b      	ldr	r3, [r1, #8]
   2ea78:	b183      	cbz	r3, 2ea9c <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   2ea7a:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2ea7c:	f014 0f30 	tst.w	r4, #48	; 0x30
   2ea80:	d104      	bne.n	2ea8c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2ea82:	f014 000c 	ands.w	r0, r4, #12
   2ea86:	bf18      	it	ne
   2ea88:	200f      	movne	r0, #15
}
   2ea8a:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2ea8c:	f7fe fec0 	bl	2d810 <bt_conn_get_security>
   2ea90:	2802      	cmp	r0, #2
   2ea92:	d8f6      	bhi.n	2ea82 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2ea94:	2005      	movs	r0, #5
   2ea96:	e7f8      	b.n	2ea8a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2ea98:	2002      	movs	r0, #2
   2ea9a:	e7f6      	b.n	2ea8a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2ea9c:	2003      	movs	r0, #3
   2ea9e:	e7f4      	b.n	2ea8a <bt_gatt_check_perm+0x30>

0002eaa0 <gatt_notify>:
{
   2eaa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2eaa4:	4614      	mov	r4, r2
   2eaa6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   2eaa8:	2214      	movs	r2, #20
   2eaaa:	6861      	ldr	r1, [r4, #4]
{
   2eaac:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   2eaae:	f7ff ffd4 	bl	2ea5a <bt_gatt_check_perm>
   2eab2:	bb08      	cbnz	r0, 2eaf8 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   2eab4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2eab6:	211b      	movs	r1, #27
   2eab8:	3202      	adds	r2, #2
   2eaba:	4638      	mov	r0, r7
   2eabc:	f7ff fbc9 	bl	2e252 <bt_att_create_pdu>
	if (!buf) {
   2eac0:	4605      	mov	r5, r0
   2eac2:	b1e8      	cbz	r0, 2eb00 <gatt_notify+0x60>
   2eac4:	f100 0908 	add.w	r9, r0, #8
   2eac8:	2102      	movs	r1, #2
   2eaca:	4648      	mov	r0, r9
   2eacc:	f000 ffc9 	bl	2fa62 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   2ead0:	4606      	mov	r6, r0
   2ead2:	89a1      	ldrh	r1, [r4, #12]
   2ead4:	f826 8b02 	strh.w	r8, [r6], #2
   2ead8:	4648      	mov	r0, r9
   2eada:	f000 ffc2 	bl	2fa62 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   2eade:	89a2      	ldrh	r2, [r4, #12]
   2eae0:	68a1      	ldr	r1, [r4, #8]
   2eae2:	4630      	mov	r0, r6
   2eae4:	f7fe f8e9 	bl	2ccba <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   2eae8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   2eaec:	4629      	mov	r1, r5
   2eaee:	4638      	mov	r0, r7
}
   2eaf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   2eaf4:	f7ff bc4f 	b.w	2e396 <bt_att_send>
		return -EPERM;
   2eaf8:	f04f 30ff 	mov.w	r0, #4294967295
}
   2eafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   2eb00:	f06f 000b 	mvn.w	r0, #11
   2eb04:	e7fa      	b.n	2eafc <gatt_notify+0x5c>

0002eb06 <bt_gatt_change_aware>:
{
   2eb06:	b570      	push	{r4, r5, r6, lr}
   2eb08:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2eb0a:	f7f3 f8bb 	bl	21c84 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2eb0e:	b910      	cbnz	r0, 2eb16 <bt_gatt_change_aware+0x10>
		return true;
   2eb10:	2501      	movs	r5, #1
}
   2eb12:	4628      	mov	r0, r5
   2eb14:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2eb16:	7a03      	ldrb	r3, [r0, #8]
   2eb18:	07da      	lsls	r2, r3, #31
   2eb1a:	d5f9      	bpl.n	2eb10 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2eb1c:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2eb20:	4620      	mov	r0, r4
   2eb22:	f7ff fcbe 	bl	2e4a2 <atomic_get>
   2eb26:	f010 0601 	ands.w	r6, r0, #1
   2eb2a:	d1f1      	bne.n	2eb10 <bt_gatt_change_aware+0xa>
	if (!req) {
   2eb2c:	2d00      	cmp	r5, #0
   2eb2e:	d0f0      	beq.n	2eb12 <bt_gatt_change_aware+0xc>
   2eb30:	4620      	mov	r0, r4
   2eb32:	f7ff fcb6 	bl	2e4a2 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2eb36:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2eb38:	f3c0 0540 	ubfx	r5, r0, #1, #1
   2eb3c:	d509      	bpl.n	2eb52 <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2eb3e:	f06f 0102 	mvn.w	r1, #2
   2eb42:	4620      	mov	r0, r4
   2eb44:	f7ff fd17 	bl	2e576 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2eb48:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2eb4a:	4620      	mov	r0, r4
   2eb4c:	f7ff fd05 	bl	2e55a <atomic_set_bit>
	return false;
   2eb50:	e7df      	b.n	2eb12 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2eb52:	2101      	movs	r1, #1
   2eb54:	e7f9      	b.n	2eb4a <bt_gatt_change_aware+0x44>

0002eb56 <bt_smp_recv>:
{
   2eb56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2eb58:	2100      	movs	r1, #0
   2eb5a:	f04f 32ff 	mov.w	r2, #4294967295
   2eb5e:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   2eb62:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2eb64:	4608      	mov	r0, r1
   2eb66:	f7fe ff18 	bl	2d99a <bt_l2cap_create_pdu_timeout>
   2eb6a:	f100 0608 	add.w	r6, r0, #8
   2eb6e:	4604      	mov	r4, r0
   2eb70:	2101      	movs	r1, #1
   2eb72:	4630      	mov	r0, r6
   2eb74:	f000 ff75 	bl	2fa62 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2eb78:	2505      	movs	r5, #5
   2eb7a:	7005      	strb	r5, [r0, #0]
   2eb7c:	2101      	movs	r1, #1
   2eb7e:	4630      	mov	r0, r6
   2eb80:	f000 ff6f 	bl	2fa62 <net_buf_simple_add>
   2eb84:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2eb86:	7005      	strb	r5, [r0, #0]
   2eb88:	4622      	mov	r2, r4
   2eb8a:	9300      	str	r3, [sp, #0]
   2eb8c:	2106      	movs	r1, #6
   2eb8e:	4638      	mov	r0, r7
   2eb90:	f7fe ff06 	bl	2d9a0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2eb94:	b110      	cbz	r0, 2eb9c <bt_smp_recv+0x46>
		net_buf_unref(buf);
   2eb96:	4620      	mov	r0, r4
   2eb98:	f7f4 fcc4 	bl	23524 <net_buf_unref>
}
   2eb9c:	2000      	movs	r0, #0
   2eb9e:	b003      	add	sp, #12
   2eba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002eba2 <bt_smp_sign>:
   2eba2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2eba6:	4770      	bx	lr

0002eba8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2eba8:	2000      	movs	r0, #0
   2ebaa:	4770      	bx	lr

0002ebac <cbor_nb_reader_get8>:
	if (offset < 0 || offset >= cnr->nb->len) {
   2ebac:	2900      	cmp	r1, #0
   2ebae:	db06      	blt.n	2ebbe <cbor_nb_reader_get8+0x12>
   2ebb0:	69c3      	ldr	r3, [r0, #28]
   2ebb2:	899a      	ldrh	r2, [r3, #12]
   2ebb4:	428a      	cmp	r2, r1
   2ebb6:	dd02      	ble.n	2ebbe <cbor_nb_reader_get8+0x12>
	return cnr->nb->data[offset];
   2ebb8:	689b      	ldr	r3, [r3, #8]
   2ebba:	5c58      	ldrb	r0, [r3, r1]
   2ebbc:	4770      	bx	lr
		return UINT8_MAX;
   2ebbe:	20ff      	movs	r0, #255	; 0xff
}
   2ebc0:	4770      	bx	lr

0002ebc2 <cbor_nb_reader_cpy>:
{
   2ebc2:	b430      	push	{r4, r5}
   2ebc4:	4614      	mov	r4, r2
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   2ebc6:	2c00      	cmp	r4, #0
{
   2ebc8:	4605      	mov	r5, r0
   2ebca:	461a      	mov	r2, r3
   2ebcc:	4608      	mov	r0, r1
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   2ebce:	db09      	blt.n	2ebe4 <cbor_nb_reader_cpy+0x22>
   2ebd0:	69e9      	ldr	r1, [r5, #28]
   2ebd2:	898b      	ldrh	r3, [r1, #12]
   2ebd4:	1a9b      	subs	r3, r3, r2
   2ebd6:	42a3      	cmp	r3, r4
   2ebd8:	db04      	blt.n	2ebe4 <cbor_nb_reader_cpy+0x22>
	return (uintptr_t)memcpy(dst, cnr->nb->data + offset, len);
   2ebda:	6889      	ldr	r1, [r1, #8]
   2ebdc:	4421      	add	r1, r4
}
   2ebde:	bc30      	pop	{r4, r5}
	return (uintptr_t)memcpy(dst, cnr->nb->data + offset, len);
   2ebe0:	f7fe b86b 	b.w	2ccba <memcpy>
}
   2ebe4:	f04f 30ff 	mov.w	r0, #4294967295
   2ebe8:	bc30      	pop	{r4, r5}
   2ebea:	4770      	bx	lr

0002ebec <cbor_nb_reader_cmp>:
{
   2ebec:	b410      	push	{r4}
   2ebee:	4614      	mov	r4, r2
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   2ebf0:	2c00      	cmp	r4, #0
{
   2ebf2:	461a      	mov	r2, r3
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   2ebf4:	db09      	blt.n	2ec0a <cbor_nb_reader_cmp+0x1e>
   2ebf6:	69c0      	ldr	r0, [r0, #28]
   2ebf8:	8983      	ldrh	r3, [r0, #12]
   2ebfa:	1a9b      	subs	r3, r3, r2
   2ebfc:	42a3      	cmp	r3, r4
   2ebfe:	db04      	blt.n	2ec0a <cbor_nb_reader_cmp+0x1e>
	return memcmp(cnr->nb->data + offset, buf, len);
   2ec00:	6880      	ldr	r0, [r0, #8]
   2ec02:	4420      	add	r0, r4
}
   2ec04:	bc10      	pop	{r4}
	return memcmp(cnr->nb->data + offset, buf, len);
   2ec06:	f7fe b831 	b.w	2cc6c <memcmp>
}
   2ec0a:	f04f 30ff 	mov.w	r0, #4294967295
   2ec0e:	bc10      	pop	{r4}
   2ec10:	4770      	bx	lr

0002ec12 <cbor_nb_reader_get64>:
{
   2ec12:	b507      	push	{r0, r1, r2, lr}
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(val)) {
   2ec14:	2900      	cmp	r1, #0
   2ec16:	db11      	blt.n	2ec3c <cbor_nb_reader_get64+0x2a>
   2ec18:	69c2      	ldr	r2, [r0, #28]
   2ec1a:	8993      	ldrh	r3, [r2, #12]
   2ec1c:	3b08      	subs	r3, #8
   2ec1e:	428b      	cmp	r3, r1
   2ec20:	db0c      	blt.n	2ec3c <cbor_nb_reader_get64+0x2a>
	memcpy(&val, cnr->nb->data + offset, sizeof(val));
   2ec22:	6893      	ldr	r3, [r2, #8]
   2ec24:	4668      	mov	r0, sp
   2ec26:	4419      	add	r1, r3
   2ec28:	2208      	movs	r2, #8
   2ec2a:	f7fe f846 	bl	2ccba <memcpy>
	return cbor_ntohll(val);
   2ec2e:	9801      	ldr	r0, [sp, #4]
   2ec30:	9900      	ldr	r1, [sp, #0]
   2ec32:	ba00      	rev	r0, r0
   2ec34:	ba09      	rev	r1, r1
}
   2ec36:	b003      	add	sp, #12
   2ec38:	f85d fb04 	ldr.w	pc, [sp], #4
		return UINT64_MAX;
   2ec3c:	f04f 30ff 	mov.w	r0, #4294967295
   2ec40:	4601      	mov	r1, r0
   2ec42:	e7f8      	b.n	2ec36 <cbor_nb_reader_get64+0x24>

0002ec44 <cbor_nb_reader_get32>:
{
   2ec44:	b507      	push	{r0, r1, r2, lr}
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(val)) {
   2ec46:	2900      	cmp	r1, #0
   2ec48:	db10      	blt.n	2ec6c <cbor_nb_reader_get32+0x28>
   2ec4a:	69c2      	ldr	r2, [r0, #28]
   2ec4c:	8993      	ldrh	r3, [r2, #12]
   2ec4e:	3b04      	subs	r3, #4
   2ec50:	428b      	cmp	r3, r1
   2ec52:	db0b      	blt.n	2ec6c <cbor_nb_reader_get32+0x28>
	memcpy(&val, cnr->nb->data + offset, sizeof(val));
   2ec54:	6893      	ldr	r3, [r2, #8]
   2ec56:	2204      	movs	r2, #4
   2ec58:	4419      	add	r1, r3
   2ec5a:	eb0d 0002 	add.w	r0, sp, r2
   2ec5e:	f7fe f82c 	bl	2ccba <memcpy>
	return cbor_ntohl(val);
   2ec62:	9801      	ldr	r0, [sp, #4]
   2ec64:	ba00      	rev	r0, r0
}
   2ec66:	b003      	add	sp, #12
   2ec68:	f85d fb04 	ldr.w	pc, [sp], #4
		return UINT32_MAX;
   2ec6c:	f04f 30ff 	mov.w	r0, #4294967295
   2ec70:	e7f9      	b.n	2ec66 <cbor_nb_reader_get32+0x22>

0002ec72 <cbor_nb_reader_get16>:
{
   2ec72:	b507      	push	{r0, r1, r2, lr}
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(val)) {
   2ec74:	2900      	cmp	r1, #0
   2ec76:	db12      	blt.n	2ec9e <cbor_nb_reader_get16+0x2c>
   2ec78:	69c2      	ldr	r2, [r0, #28]
   2ec7a:	8993      	ldrh	r3, [r2, #12]
   2ec7c:	3b02      	subs	r3, #2
   2ec7e:	428b      	cmp	r3, r1
   2ec80:	db0d      	blt.n	2ec9e <cbor_nb_reader_get16+0x2c>
	memcpy(&val, cnr->nb->data + offset, sizeof(val));
   2ec82:	6893      	ldr	r3, [r2, #8]
   2ec84:	f10d 0006 	add.w	r0, sp, #6
   2ec88:	2202      	movs	r2, #2
   2ec8a:	4419      	add	r1, r3
   2ec8c:	f7fe f815 	bl	2ccba <memcpy>
	return cbor_ntohs(val);
   2ec90:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2ec94:	ba40      	rev16	r0, r0
   2ec96:	b280      	uxth	r0, r0
}
   2ec98:	b003      	add	sp, #12
   2ec9a:	f85d fb04 	ldr.w	pc, [sp], #4
		return UINT16_MAX;
   2ec9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2eca2:	e7f9      	b.n	2ec98 <cbor_nb_reader_get16+0x26>

0002eca4 <cbor_nb_write>:
{
   2eca4:	b570      	push	{r4, r5, r6, lr}
   2eca6:	4604      	mov	r4, r0
	return net_buf_simple_tailroom(&buf->b);
   2eca8:	6880      	ldr	r0, [r0, #8]
   2ecaa:	3008      	adds	r0, #8
   2ecac:	4615      	mov	r5, r2
   2ecae:	460e      	mov	r6, r1
   2ecb0:	f000 ff12 	bl	2fad8 <net_buf_simple_tailroom>
	if (len > net_buf_tailroom(cnw->nb)) {
   2ecb4:	4285      	cmp	r5, r0
   2ecb6:	d80a      	bhi.n	2ecce <cbor_nb_write+0x2a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ecb8:	68a0      	ldr	r0, [r4, #8]
   2ecba:	462a      	mov	r2, r5
   2ecbc:	4631      	mov	r1, r6
   2ecbe:	3008      	adds	r0, #8
   2ecc0:	f000 fed5 	bl	2fa6e <net_buf_simple_add_mem>
	cnw->enc.bytes_written += len;
   2ecc4:	6862      	ldr	r2, [r4, #4]
   2ecc6:	442a      	add	r2, r5
   2ecc8:	6062      	str	r2, [r4, #4]
	return CborNoError;
   2ecca:	2000      	movs	r0, #0
}
   2eccc:	bd70      	pop	{r4, r5, r6, pc}
		return CborErrorOutOfMemory;
   2ecce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2ecd2:	e7fb      	b.n	2eccc <cbor_nb_write+0x28>

0002ecd4 <mcumgr_buf_free>:
	net_buf_unref(nb);
   2ecd4:	f7f4 bc26 	b.w	23524 <net_buf_unref>

0002ecd8 <zephyr_smp_alloc_rsp>:
{
   2ecd8:	b570      	push	{r4, r5, r6, lr}
   2ecda:	4604      	mov	r4, r0
   2ecdc:	460e      	mov	r6, r1
	rsp_nb = mcumgr_buf_alloc();
   2ecde:	f7f3 fd9f 	bl	22820 <mcumgr_buf_alloc>
	if (rsp_nb == NULL) {
   2ece2:	4605      	mov	r5, r0
   2ece4:	b118      	cbz	r0, 2ecee <zephyr_smp_alloc_rsp+0x16>
	if (zst->zst_ud_copy) {
   2ece6:	6b33      	ldr	r3, [r6, #48]	; 0x30
   2ece8:	b11b      	cbz	r3, 2ecf2 <zephyr_smp_alloc_rsp+0x1a>
		zst->zst_ud_copy(rsp_nb, req_nb);
   2ecea:	4621      	mov	r1, r4
   2ecec:	4798      	blx	r3
}
   2ecee:	4628      	mov	r0, r5
   2ecf0:	bd70      	pop	{r4, r5, r6, pc}
		pool = net_buf_pool_get(req_nb->pool_id);
   2ecf2:	79a0      	ldrb	r0, [r4, #6]
   2ecf4:	f7f4 fb56 	bl	233a4 <net_buf_pool_get>
		memcpy(net_buf_user_data(rsp_nb),
   2ecf8:	79e2      	ldrb	r2, [r4, #7]
   2ecfa:	f104 0114 	add.w	r1, r4, #20
   2ecfe:	f105 0014 	add.w	r0, r5, #20
   2ed02:	f7fd ffda 	bl	2ccba <memcpy>
   2ed06:	e7f2      	b.n	2ecee <zephyr_smp_alloc_rsp+0x16>

0002ed08 <zephyr_smp_trim_front>:
	if (len > nb->len) {
   2ed08:	8983      	ldrh	r3, [r0, #12]
	return net_buf_simple_pull(&buf->b, len);
   2ed0a:	4299      	cmp	r1, r3
   2ed0c:	bf28      	it	cs
   2ed0e:	4619      	movcs	r1, r3
   2ed10:	3008      	adds	r0, #8
   2ed12:	f000 bec5 	b.w	2faa0 <net_buf_simple_pull>

0002ed16 <zephyr_smp_free_buf>:
{
   2ed16:	b510      	push	{r4, lr}
	if (!buf) {
   2ed18:	4604      	mov	r4, r0
   2ed1a:	b140      	cbz	r0, 2ed2e <zephyr_smp_free_buf+0x18>
	if (zst->zst_ud_free) {
   2ed1c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2ed1e:	b10b      	cbz	r3, 2ed24 <zephyr_smp_free_buf+0xe>
		zst->zst_ud_free(net_buf_user_data((struct net_buf *)buf));
   2ed20:	3014      	adds	r0, #20
   2ed22:	4798      	blx	r3
	mcumgr_buf_free(buf);
   2ed24:	4620      	mov	r0, r4
}
   2ed26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mcumgr_buf_free(buf);
   2ed2a:	f7ff bfd3 	b.w	2ecd4 <mcumgr_buf_free>
}
   2ed2e:	bd10      	pop	{r4, pc}

0002ed30 <zephyr_smp_tx_rsp>:
{
   2ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mtu = zst->zst_get_mtu(rsp);
   2ed32:	4608      	mov	r0, r1
   2ed34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
   2ed36:	460c      	mov	r4, r1
   2ed38:	4615      	mov	r5, r2
	mtu = zst->zst_get_mtu(rsp);
   2ed3a:	4798      	blx	r3
	if (mtu == 0U) {
   2ed3c:	4607      	mov	r7, r0
   2ed3e:	bb00      	cbnz	r0, 2ed82 <zephyr_smp_tx_rsp+0x52>
		return MGMT_ERR_EUNKNOWN;
   2ed40:	2001      	movs	r0, #1
}
   2ed42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (src->len <= mtu) {
   2ed44:	89a3      	ldrh	r3, [r4, #12]
   2ed46:	42bb      	cmp	r3, r7
   2ed48:	d91f      	bls.n	2ed8a <zephyr_smp_tx_rsp+0x5a>
		frag = zephyr_smp_alloc_rsp(src, arg);
   2ed4a:	4629      	mov	r1, r5
   2ed4c:	4620      	mov	r0, r4
   2ed4e:	f7ff ffc3 	bl	2ecd8 <zephyr_smp_alloc_rsp>
		if (!frag) {
   2ed52:	4606      	mov	r6, r0
   2ed54:	b928      	cbnz	r0, 2ed62 <zephyr_smp_tx_rsp+0x32>
			zephyr_smp_free_buf(nb, zst);
   2ed56:	4620      	mov	r0, r4
   2ed58:	4629      	mov	r1, r5
   2ed5a:	f7ff ffdc 	bl	2ed16 <zephyr_smp_free_buf>
			return MGMT_ERR_ENOMEM;
   2ed5e:	2002      	movs	r0, #2
   2ed60:	e7ef      	b.n	2ed42 <zephyr_smp_tx_rsp+0x12>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ed62:	68a1      	ldr	r1, [r4, #8]
   2ed64:	463a      	mov	r2, r7
   2ed66:	3008      	adds	r0, #8
   2ed68:	f000 fe81 	bl	2fa6e <net_buf_simple_add_mem>
		zephyr_smp_trim_front(src, mtu, NULL);
   2ed6c:	2200      	movs	r2, #0
   2ed6e:	4639      	mov	r1, r7
   2ed70:	4620      	mov	r0, r4
   2ed72:	f7ff ffc9 	bl	2ed08 <zephyr_smp_trim_front>
		rc = zst->zst_output(zst, frag);
   2ed76:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2ed78:	4631      	mov	r1, r6
   2ed7a:	4628      	mov	r0, r5
   2ed7c:	4798      	blx	r3
		if (rc != 0) {
   2ed7e:	2800      	cmp	r0, #0
   2ed80:	d1de      	bne.n	2ed40 <zephyr_smp_tx_rsp+0x10>
	while (nb != NULL) {
   2ed82:	2c00      	cmp	r4, #0
   2ed84:	d1de      	bne.n	2ed44 <zephyr_smp_tx_rsp+0x14>
	return 0;
   2ed86:	4620      	mov	r0, r4
   2ed88:	e7db      	b.n	2ed42 <zephyr_smp_tx_rsp+0x12>
   2ed8a:	4626      	mov	r6, r4
		*nb = NULL;
   2ed8c:	2400      	movs	r4, #0
   2ed8e:	e7f2      	b.n	2ed76 <zephyr_smp_tx_rsp+0x46>

0002ed90 <zephyr_smp_init_writer>:
{
   2ed90:	b508      	push	{r3, lr}
	cbor_nb_writer_init(czw, buf);
   2ed92:	f7f3 fd69 	bl	22868 <cbor_nb_writer_init>
}
   2ed96:	2000      	movs	r0, #0
   2ed98:	bd08      	pop	{r3, pc}

0002ed9a <zephyr_smp_init_reader>:
{
   2ed9a:	b508      	push	{r3, lr}
	cbor_nb_reader_init(czr, buf);
   2ed9c:	f7f3 fd48 	bl	22830 <cbor_nb_reader_init>
}
   2eda0:	2000      	movs	r0, #0
   2eda2:	bd08      	pop	{r3, pc}

0002eda4 <zephyr_smp_write_at>:
{
   2eda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nb = czw->nb;
   2eda8:	6885      	ldr	r5, [r0, #8]
{
   2edaa:	4698      	mov	r8, r3
	if (offset > nb->len) {
   2edac:	89ab      	ldrh	r3, [r5, #12]
   2edae:	428b      	cmp	r3, r1
{
   2edb0:	4607      	mov	r7, r0
   2edb2:	460e      	mov	r6, r1
   2edb4:	4691      	mov	r9, r2
	if (offset > nb->len) {
   2edb6:	d202      	bcs.n	2edbe <zephyr_smp_write_at+0x1a>
		return MGMT_ERR_EINVAL;
   2edb8:	2003      	movs	r0, #3
}
   2edba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_headroom(&buf->b);
   2edbe:	f105 0008 	add.w	r0, r5, #8
	if ((offset + len) > (nb->size - net_buf_headroom(nb))) {
   2edc2:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
   2edc6:	eb01 0408 	add.w	r4, r1, r8
   2edca:	f000 fe81 	bl	2fad0 <net_buf_simple_headroom>
   2edce:	ebaa 0a00 	sub.w	sl, sl, r0
   2edd2:	4554      	cmp	r4, sl
   2edd4:	d8f0      	bhi.n	2edb8 <zephyr_smp_write_at+0x14>
	memcpy(nb->data + offset, data, len);
   2edd6:	68a8      	ldr	r0, [r5, #8]
   2edd8:	4642      	mov	r2, r8
   2edda:	4649      	mov	r1, r9
   2eddc:	4430      	add	r0, r6
   2edde:	f7fd ff6c 	bl	2ccba <memcpy>
	if (nb->len < offset + len) {
   2ede2:	89ab      	ldrh	r3, [r5, #12]
   2ede4:	429c      	cmp	r4, r3
		nb->len = offset + len;
   2ede6:	bf84      	itt	hi
   2ede8:	b2a4      	uxthhi	r4, r4
   2edea:	81ac      	strhhi	r4, [r5, #12]
	return 0;
   2edec:	f04f 0000 	mov.w	r0, #0
		writer->bytes_written = nb->len;
   2edf0:	bf88      	it	hi
   2edf2:	607c      	strhi	r4, [r7, #4]
   2edf4:	e7e1      	b.n	2edba <zephyr_smp_write_at+0x16>

0002edf6 <zephyr_smp_reset_buf>:
	net_buf_reset(buf);
   2edf6:	f000 bdd9 	b.w	2f9ac <net_buf_reset>

0002edfa <zephyr_smp_rx_req>:

void
zephyr_smp_rx_req(struct zephyr_smp_transport *zst, struct net_buf *nb)
{
   2edfa:	b510      	push	{r4, lr}
   2edfc:	4604      	mov	r4, r0
	net_buf_put(&zst->zst_fifo, nb);
   2edfe:	3010      	adds	r0, #16
   2ee00:	f000 fdfc 	bl	2f9fc <net_buf_put>
	k_work_submit(&zst->zst_work);
   2ee04:	4620      	mov	r0, r4
}
   2ee06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&zst->zst_work);
   2ee0a:	f7f9 b9d1 	b.w	281b0 <k_work_submit>

0002ee0e <smp_bt_ccc_changed>:
}
   2ee0e:	4770      	bx	lr

0002ee10 <smp_bt_ud_copy>:
{
   2ee10:	b510      	push	{r4, lr}
   2ee12:	4604      	mov	r4, r0
	if (src_ud->conn) {
   2ee14:	6948      	ldr	r0, [r1, #20]
   2ee16:	b110      	cbz	r0, 2ee1e <smp_bt_ud_copy+0xe>
		dst_ud->conn = bt_conn_ref(src_ud->conn);
   2ee18:	f7fe fc9a 	bl	2d750 <bt_conn_ref>
   2ee1c:	6160      	str	r0, [r4, #20]
}
   2ee1e:	2000      	movs	r0, #0
   2ee20:	bd10      	pop	{r4, pc}

0002ee22 <smp_bt_ud_free>:
{
   2ee22:	b510      	push	{r4, lr}
   2ee24:	4604      	mov	r4, r0
	if (user_data->conn) {
   2ee26:	6800      	ldr	r0, [r0, #0]
   2ee28:	b118      	cbz	r0, 2ee32 <smp_bt_ud_free+0x10>
		bt_conn_unref(user_data->conn);
   2ee2a:	f7fe fcac 	bl	2d786 <bt_conn_unref>
		user_data->conn = NULL;
   2ee2e:	2300      	movs	r3, #0
   2ee30:	6023      	str	r3, [r4, #0]
}
   2ee32:	bd10      	pop	{r4, pc}

0002ee34 <smp_bt_get_mtu>:
	if (!ud->conn) {
   2ee34:	6940      	ldr	r0, [r0, #20]
{
   2ee36:	b538      	push	{r3, r4, r5, lr}
	if (!ud->conn) {
   2ee38:	b908      	cbnz	r0, 2ee3e <smp_bt_get_mtu+0xa>
		return 0;
   2ee3a:	2000      	movs	r0, #0
}
   2ee3c:	bd38      	pop	{r3, r4, r5, pc}
	return bt_conn_ref(ud->conn);
   2ee3e:	f7fe fc87 	bl	2d750 <bt_conn_ref>
	if (conn == NULL) {
   2ee42:	4605      	mov	r5, r0
   2ee44:	2800      	cmp	r0, #0
   2ee46:	d0f8      	beq.n	2ee3a <smp_bt_get_mtu+0x6>
	mtu = bt_gatt_get_mtu(conn);
   2ee48:	f7ff fe05 	bl	2ea56 <bt_gatt_get_mtu>
   2ee4c:	4604      	mov	r4, r0
	bt_conn_unref(conn);
   2ee4e:	4628      	mov	r0, r5
   2ee50:	f7fe fc99 	bl	2d786 <bt_conn_unref>
	return mtu - 3;
   2ee54:	1ee0      	subs	r0, r4, #3
   2ee56:	b280      	uxth	r0, r0
   2ee58:	e7f0      	b.n	2ee3c <smp_bt_get_mtu+0x8>

0002ee5a <smp_bt_tx_pkt>:
	if (!ud->conn) {
   2ee5a:	6948      	ldr	r0, [r1, #20]
{
   2ee5c:	b570      	push	{r4, r5, r6, lr}
   2ee5e:	460c      	mov	r4, r1
	if (!ud->conn) {
   2ee60:	b950      	cbnz	r0, 2ee78 <smp_bt_tx_pkt+0x1e>
		rc = -1;
   2ee62:	f04f 35ff 	mov.w	r5, #4294967295
	smp_bt_ud_free(net_buf_user_data(nb));
   2ee66:	f104 0014 	add.w	r0, r4, #20
   2ee6a:	f7ff ffda 	bl	2ee22 <smp_bt_ud_free>
	mcumgr_buf_free(nb);
   2ee6e:	4620      	mov	r0, r4
   2ee70:	f7ff ff30 	bl	2ecd4 <mcumgr_buf_free>
}
   2ee74:	4628      	mov	r0, r5
   2ee76:	bd70      	pop	{r4, r5, r6, pc}
	return bt_conn_ref(ud->conn);
   2ee78:	f7fe fc6a 	bl	2d750 <bt_conn_ref>
	if (conn == NULL) {
   2ee7c:	4606      	mov	r6, r0
   2ee7e:	2800      	cmp	r0, #0
   2ee80:	d0ef      	beq.n	2ee62 <smp_bt_tx_pkt+0x8>
		rc = smp_bt_notify(conn, nb->data, nb->len);
   2ee82:	89a2      	ldrh	r2, [r4, #12]
   2ee84:	68a1      	ldr	r1, [r4, #8]
   2ee86:	f7f3 fd67 	bl	22958 <smp_bt_notify>
   2ee8a:	4605      	mov	r5, r0
		bt_conn_unref(conn);
   2ee8c:	4630      	mov	r0, r6
   2ee8e:	f7fe fc7a 	bl	2d786 <bt_conn_unref>
   2ee92:	e7e8      	b.n	2ee66 <smp_bt_tx_pkt+0xc>

0002ee94 <cbor_target_address>:
 * write or read and attribute from the cbor_attr_r structure
 */
static char *
cbor_target_address(const struct cbor_attr_t *cursor,
			const struct cbor_array_t *parent, int offset)
{
   2ee94:	b510      	push	{r4, lr}
   2ee96:	4603      	mov	r3, r0
	char *targetaddr = NULL;

	if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   2ee98:	b111      	cbz	r1, 2eea0 <cbor_target_address+0xc>
   2ee9a:	7808      	ldrb	r0, [r1, #0]
   2ee9c:	280b      	cmp	r0, #11
   2ee9e:	d01a      	beq.n	2eed6 <cbor_target_address+0x42>
		/* ordinary case - use the address in the cursor structure */
		switch (cursor->type) {
   2eea0:	7919      	ldrb	r1, [r3, #4]
   2eea2:	3901      	subs	r1, #1
   2eea4:	2907      	cmp	r1, #7
   2eea6:	d81c      	bhi.n	2eee2 <cbor_target_address+0x4e>
   2eea8:	e8df f001 	tbb	[pc, r1]
   2eeac:	10100c0c 	.word	0x10100c0c
   2eeb0:	0c080412 	.word	0x0c080412
		case CborAttrUnsignedIntegerType:
			targetaddr = (char *)&cursor->addr.uinteger[offset];
			break;
#if CBORATTR_FLOAT_SUPPORT != 0
		case CborAttrHalfFloatType:
			targetaddr = (char *)&cursor->addr.halffloat[offset];
   2eeb4:	6898      	ldr	r0, [r3, #8]
   2eeb6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		targetaddr =
			parent->arr.objects.base + (offset * parent->arr.objects.stride) +
			cursor->addr.offset;
	}
	return targetaddr;
}
   2eeba:	bd10      	pop	{r4, pc}
			targetaddr = (char *)&cursor->addr.fval[offset];
   2eebc:	6898      	ldr	r0, [r3, #8]
   2eebe:	eb00 0082 	add.w	r0, r0, r2, lsl #2
			break;
   2eec2:	e7fa      	b.n	2eeba <cbor_target_address+0x26>
			targetaddr = (char *)&cursor->addr.real[offset];
   2eec4:	6898      	ldr	r0, [r3, #8]
   2eec6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
			break;
   2eeca:	e7f6      	b.n	2eeba <cbor_target_address+0x26>
			targetaddr = cursor->addr.string;
   2eecc:	6898      	ldr	r0, [r3, #8]
			break;
   2eece:	e7f4      	b.n	2eeba <cbor_target_address+0x26>
			targetaddr = (char *)&cursor->addr.boolean[offset];
   2eed0:	6898      	ldr	r0, [r3, #8]
		targetaddr =
   2eed2:	4410      	add	r0, r2
   2eed4:	e7f1      	b.n	2eeba <cbor_target_address+0x26>
			parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   2eed6:	68cc      	ldr	r4, [r1, #12]
   2eed8:	6898      	ldr	r0, [r3, #8]
   2eeda:	fb04 0002 	mla	r0, r4, r2, r0
		targetaddr =
   2eede:	688a      	ldr	r2, [r1, #8]
   2eee0:	e7f7      	b.n	2eed2 <cbor_target_address+0x3e>
		switch (cursor->type) {
   2eee2:	2000      	movs	r0, #0
	return targetaddr;
   2eee4:	e7e9      	b.n	2eeba <cbor_target_address+0x26>

0002eee6 <cbor_value_get_int64>:
    *result = _cbor_value_extract_int64_helper(value);
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
   2eee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                _cbor_value_decode_int64_internal(value) : value->extra;
   2eee8:	7bc3      	ldrb	r3, [r0, #15]
   2eeea:	07da      	lsls	r2, r3, #31
{
   2eeec:	4605      	mov	r5, r0
   2eeee:	460c      	mov	r4, r1
                _cbor_value_decode_int64_internal(value) : value->extra;
   2eef0:	d50e      	bpl.n	2ef10 <cbor_value_get_int64+0x2a>
   2eef2:	f002 fa24 	bl	3133e <_cbor_value_decode_int64_internal>
   2eef6:	4606      	mov	r6, r0
   2eef8:	460f      	mov	r7, r1
    assert(cbor_value_is_integer(value));
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   2eefa:	e9c4 6700 	strd	r6, r7, [r4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   2eefe:	7be9      	ldrb	r1, [r5, #15]
   2ef00:	078b      	lsls	r3, r1, #30
        *result = -*result - 1;
   2ef02:	bf42      	ittt	mi
   2ef04:	43f2      	mvnmi	r2, r6
   2ef06:	43fb      	mvnmi	r3, r7
   2ef08:	e9c4 2300 	strdmi	r2, r3, [r4]
    return CborNoError;
}
   2ef0c:	2000      	movs	r0, #0
   2ef0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                _cbor_value_decode_int64_internal(value) : value->extra;
   2ef10:	8986      	ldrh	r6, [r0, #12]
   2ef12:	2700      	movs	r7, #0
   2ef14:	e7f1      	b.n	2eefa <cbor_value_get_int64+0x14>

0002ef16 <cbor_read_array>:
	return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   2ef16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ef1a:	b089      	sub	sp, #36	; 0x24
   2ef1c:	460d      	mov	r5, r1
	int off, arrcount;
	size_t len;
	void *lptr;
	char *tp;

	err = cbor_value_enter_container(value, &elem);
   2ef1e:	a904      	add	r1, sp, #16
{
   2ef20:	4680      	mov	r8, r0
	err = cbor_value_enter_container(value, &elem);
   2ef22:	f002 fa3b 	bl	3139c <cbor_value_enter_container>
	if (err) {
   2ef26:	4604      	mov	r4, r0
   2ef28:	b110      	cbz	r0, 2ef30 <cbor_read_array+0x1a>
		err |= CborErrorDataTooLarge;
		cbor_value_advance(&elem);
	}
	err |= cbor_value_leave_container(value, &elem);
	return err;
}
   2ef2a:	b009      	add	sp, #36	; 0x24
   2ef2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tp = arr->arr.strings.store;
   2ef30:	68af      	ldr	r7, [r5, #8]
	for (off = 0; off < arr->maxlen; off++) {
   2ef32:	4606      	mov	r6, r0
   2ef34:	696b      	ldr	r3, [r5, #20]
   2ef36:	42b3      	cmp	r3, r6
   2ef38:	dd1f      	ble.n	2ef7a <cbor_read_array+0x64>
		switch (arr->element_type) {
   2ef3a:	782b      	ldrb	r3, [r5, #0]
   2ef3c:	3b01      	subs	r3, #1
   2ef3e:	2b0a      	cmp	r3, #10
   2ef40:	d872      	bhi.n	2f028 <cbor_read_array+0x112>
   2ef42:	e8df f003 	tbb	[pc, r3]
   2ef46:	2e26      	.short	0x2e26
   2ef48:	41065771 	.word	0x41065771
   2ef4c:	71714848 	.word	0x71714848
   2ef50:	6a          	.byte	0x6a
   2ef51:	00          	.byte	0x00
    *result = !!value->extra;
   2ef52:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2ef56:	686a      	ldr	r2, [r5, #4]
   2ef58:	3b00      	subs	r3, #0
   2ef5a:	bf18      	it	ne
   2ef5c:	2301      	movne	r3, #1
   2ef5e:	5593      	strb	r3, [r2, r6]
		if (arr->element_type != CborAttrStructObjectType) {
   2ef60:	782b      	ldrb	r3, [r5, #0]
   2ef62:	2b0b      	cmp	r3, #11
		arrcount++;
   2ef64:	f106 0601 	add.w	r6, r6, #1
		if (arr->element_type != CborAttrStructObjectType) {
   2ef68:	d003      	beq.n	2ef72 <cbor_read_array+0x5c>
			err |= cbor_value_advance(&elem);
   2ef6a:	a804      	add	r0, sp, #16
   2ef6c:	f002 fa92 	bl	31494 <cbor_value_advance>
   2ef70:	4304      	orrs	r4, r0
		if (!cbor_value_is_valid(&elem)) {
   2ef72:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2ef76:	2bff      	cmp	r3, #255	; 0xff
   2ef78:	d1dc      	bne.n	2ef34 <cbor_read_array+0x1e>
	if (arr->count) {
   2ef7a:	692b      	ldr	r3, [r5, #16]
   2ef7c:	b103      	cbz	r3, 2ef80 <cbor_read_array+0x6a>
		*arr->count = arrcount;
   2ef7e:	601e      	str	r6, [r3, #0]
	while (!cbor_value_at_end(&elem)) {
   2ef80:	9b06      	ldr	r3, [sp, #24]
   2ef82:	2b00      	cmp	r3, #0
   2ef84:	d153      	bne.n	2f02e <cbor_read_array+0x118>
	err |= cbor_value_leave_container(value, &elem);
   2ef86:	a904      	add	r1, sp, #16
   2ef88:	4640      	mov	r0, r8
   2ef8a:	f002 fa47 	bl	3141c <cbor_value_leave_container>
   2ef8e:	4320      	orrs	r0, r4
	return err;
   2ef90:	e7cb      	b.n	2ef2a <cbor_read_array+0x14>
			lptr = &arr->arr.integers.store[off];
   2ef92:	6869      	ldr	r1, [r5, #4]
			err |= cbor_value_get_int64(&elem, lptr);
   2ef94:	a804      	add	r0, sp, #16
   2ef96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   2ef9a:	f7ff ffa4 	bl	2eee6 <cbor_value_get_int64>
			err |= cbor_value_get_half_float(&elem, lptr);
   2ef9e:	4304      	orrs	r4, r0
			break;
   2efa0:	e7de      	b.n	2ef60 <cbor_read_array+0x4a>
			lptr = &arr->arr.uintegers.store[off];
   2efa2:	686b      	ldr	r3, [r5, #4]
   2efa4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
                _cbor_value_decode_int64_internal(value) : value->extra;
   2efa8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2efac:	07db      	lsls	r3, r3, #31
   2efae:	d507      	bpl.n	2efc0 <cbor_read_array+0xaa>
   2efb0:	a804      	add	r0, sp, #16
   2efb2:	f002 f9c4 	bl	3133e <_cbor_value_decode_int64_internal>
   2efb6:	4602      	mov	r2, r0
   2efb8:	460b      	mov	r3, r1
    *result = _cbor_value_extract_int64_helper(value);
   2efba:	e9c9 2300 	strd	r2, r3, [r9]
			break;
   2efbe:	e7cf      	b.n	2ef60 <cbor_read_array+0x4a>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2efc0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2efc4:	2300      	movs	r3, #0
   2efc6:	e7f8      	b.n	2efba <cbor_read_array+0xa4>
			lptr = &arr->arr.halffloats.store[off];
   2efc8:	6869      	ldr	r1, [r5, #4]
			err |= cbor_value_get_half_float(&elem, lptr);
   2efca:	a804      	add	r0, sp, #16
   2efcc:	eb01 0146 	add.w	r1, r1, r6, lsl #1
   2efd0:	f002 fa6f 	bl	314b2 <cbor_value_get_half_float>
   2efd4:	e7e3      	b.n	2ef9e <cbor_read_array+0x88>
			lptr = &arr->arr.reals.store[off];
   2efd6:	6868      	ldr	r0, [r5, #4]
   2efd8:	eb00 09c6 	add.w	r9, r0, r6, lsl #3
{ return value->type == CborDoubleType; }
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
    uint64_t data = _cbor_value_decode_int64_internal(value);
   2efdc:	a804      	add	r0, sp, #16
   2efde:	f002 f9ae 	bl	3133e <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   2efe2:	2208      	movs	r2, #8
    uint64_t data = _cbor_value_decode_int64_internal(value);
   2efe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   2efe8:	eb0d 0102 	add.w	r1, sp, r2
   2efec:	4648      	mov	r0, r9
   2efee:	f7fd fe64 	bl	2ccba <memcpy>
			break;
   2eff2:	e7b5      	b.n	2ef60 <cbor_read_array+0x4a>
			len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   2eff4:	68ab      	ldr	r3, [r5, #8]
   2eff6:	1afa      	subs	r2, r7, r3
   2eff8:	68eb      	ldr	r3, [r5, #12]
   2effa:	1a9b      	subs	r3, r3, r2
   2effc:	9301      	str	r3, [sp, #4]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2effe:	4639      	mov	r1, r7
   2f000:	2300      	movs	r3, #0
   2f002:	aa01      	add	r2, sp, #4
   2f004:	a804      	add	r0, sp, #16
   2f006:	f7f8 fbd7 	bl	277b8 <_cbor_value_copy_string>
			arr->arr.strings.ptrs[off] = tp;
   2f00a:	686b      	ldr	r3, [r5, #4]
   2f00c:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
			tp += len + 1;
   2f010:	9b01      	ldr	r3, [sp, #4]
   2f012:	3301      	adds	r3, #1
			err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   2f014:	4304      	orrs	r4, r0
			tp += len + 1;
   2f016:	441f      	add	r7, r3
			break;
   2f018:	e7a2      	b.n	2ef60 <cbor_read_array+0x4a>
			err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype, arr, off);
   2f01a:	6869      	ldr	r1, [r5, #4]
   2f01c:	4633      	mov	r3, r6
   2f01e:	462a      	mov	r2, r5
   2f020:	a804      	add	r0, sp, #16
   2f022:	f000 f80a 	bl	2f03a <cbor_internal_read_object>
   2f026:	e7ba      	b.n	2ef9e <cbor_read_array+0x88>
			err |= CborErrorIllegalType;
   2f028:	f444 7482 	orr.w	r4, r4, #260	; 0x104
			break;
   2f02c:	e798      	b.n	2ef60 <cbor_read_array+0x4a>
		cbor_value_advance(&elem);
   2f02e:	a804      	add	r0, sp, #16
		err |= CborErrorDataTooLarge;
   2f030:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
		cbor_value_advance(&elem);
   2f034:	f002 fa2e 	bl	31494 <cbor_value_advance>
   2f038:	e7a2      	b.n	2ef80 <cbor_read_array+0x6a>

0002f03a <cbor_internal_read_object>:
{
   2f03a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f03e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   2f042:	469a      	mov	sl, r3
	size_t len = 0;
   2f044:	2300      	movs	r3, #0
{
   2f046:	4607      	mov	r7, r0
   2f048:	4688      	mov	r8, r1
   2f04a:	4691      	mov	r9, r2
	size_t len = 0;
   2f04c:	9301      	str	r3, [sp, #4]
	for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2f04e:	460c      	mov	r4, r1
   2f050:	6823      	ldr	r3, [r4, #0]
   2f052:	b94b      	cbnz	r3, 2f068 <cbor_internal_read_object+0x2e>
	if (cbor_value_is_map(root_value)) {
   2f054:	7bbb      	ldrb	r3, [r7, #14]
   2f056:	2ba0      	cmp	r3, #160	; 0xa0
   2f058:	f040 8109 	bne.w	2f26e <cbor_internal_read_object+0x234>
		err |= cbor_value_enter_container(root_value, &cur_value);
   2f05c:	a905      	add	r1, sp, #20
   2f05e:	4638      	mov	r0, r7
   2f060:	f002 f99c 	bl	3139c <cbor_value_enter_container>
		err = cbor_value_advance(&cur_value);
   2f064:	4604      	mov	r4, r0
   2f066:	e0c7      	b.n	2f1f8 <cbor_internal_read_object+0x1be>
		if (!cursor->nodefault) {
   2f068:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2f06c:	b9a3      	cbnz	r3, 2f098 <cbor_internal_read_object+0x5e>
			lptr = cbor_target_address(cursor, parent, offset);
   2f06e:	4652      	mov	r2, sl
   2f070:	4649      	mov	r1, r9
   2f072:	4620      	mov	r0, r4
   2f074:	f7ff ff0e 	bl	2ee94 <cbor_target_address>
			if (lptr != NULL) {
   2f078:	b170      	cbz	r0, 2f098 <cbor_internal_read_object+0x5e>
				switch (cursor->type) {
   2f07a:	7923      	ldrb	r3, [r4, #4]
   2f07c:	3b01      	subs	r3, #1
   2f07e:	2b07      	cmp	r3, #7
   2f080:	d80a      	bhi.n	2f098 <cbor_internal_read_object+0x5e>
   2f082:	e8df f003 	tbb	[pc, r3]
   2f086:	0f0f      	.short	0x0f0f
   2f088:	0b040909 	.word	0x0b040909
   2f08c:	0f0d      	.short	0x0f0d
					memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   2f08e:	2201      	movs	r2, #1
					memcpy(lptr, &cursor->dflt.real, sizeof(double));
   2f090:	f104 0120 	add.w	r1, r4, #32
   2f094:	f7fd fe11 	bl	2ccba <memcpy>
	for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2f098:	3430      	adds	r4, #48	; 0x30
   2f09a:	e7d9      	b.n	2f050 <cbor_internal_read_object+0x16>
					memcpy(lptr, &cursor->dflt.halffloat, sizeof(uint16_t));
   2f09c:	2202      	movs	r2, #2
   2f09e:	e7f7      	b.n	2f090 <cbor_internal_read_object+0x56>
					memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   2f0a0:	2204      	movs	r2, #4
   2f0a2:	e7f5      	b.n	2f090 <cbor_internal_read_object+0x56>
					memcpy(lptr, &cursor->dflt.real, sizeof(double));
   2f0a4:	2208      	movs	r2, #8
   2f0a6:	e7f3      	b.n	2f090 <cbor_internal_read_object+0x56>
			attrbuf[0] = '\0';
   2f0a8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
		best_match = NULL;
   2f0ac:	f04f 0b00 	mov.w	fp, #0
		for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2f0b0:	4645      	mov	r5, r8
   2f0b2:	6828      	ldr	r0, [r5, #0]
   2f0b4:	b9b8      	cbnz	r0, 2f0e6 <cbor_internal_read_object+0xac>
		if (!cursor->attribute && best_match) {
   2f0b6:	f1bb 0f00 	cmp.w	fp, #0
   2f0ba:	bf18      	it	ne
   2f0bc:	465d      	movne	r5, fp
		if (cursor->attribute != NULL) {
   2f0be:	682b      	ldr	r3, [r5, #0]
   2f0c0:	2b00      	cmp	r3, #0
   2f0c2:	d04d      	beq.n	2f160 <cbor_internal_read_object+0x126>
			lptr = cbor_target_address(cursor, parent, offset);
   2f0c4:	4652      	mov	r2, sl
   2f0c6:	4649      	mov	r1, r9
   2f0c8:	4628      	mov	r0, r5
   2f0ca:	f7ff fee3 	bl	2ee94 <cbor_target_address>
   2f0ce:	792b      	ldrb	r3, [r5, #4]
   2f0d0:	3b01      	subs	r3, #1
   2f0d2:	4606      	mov	r6, r0
			switch (cursor->type) {
   2f0d4:	2b09      	cmp	r3, #9
   2f0d6:	d843      	bhi.n	2f160 <cbor_internal_read_object+0x126>
   2f0d8:	e8df f003 	tbb	[pc, r3]
   2f0dc:	7f734b46 	.word	0x7f734b46
   2f0e0:	6a605b3c 	.word	0x6a605b3c
   2f0e4:	b788      	.short	0xb788
	switch (at) {
   2f0e6:	792b      	ldrb	r3, [r5, #4]
   2f0e8:	3b01      	subs	r3, #1
   2f0ea:	2b0b      	cmp	r3, #11
   2f0ec:	d81e      	bhi.n	2f12c <cbor_internal_read_object+0xf2>
   2f0ee:	e8df f003 	tbb	[pc, r3]
   2f0f2:	0606      	.short	0x0606
   2f0f4:	23211f1b 	.word	0x23211f1b
   2f0f8:	2b292725 	.word	0x2b292725
   2f0fc:	2d1d      	.short	0x2d1d
		if (ct == CborIntegerType) {
   2f0fe:	b9ae      	cbnz	r6, 2f12c <cbor_internal_read_object+0xf2>
				if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   2f100:	1c42      	adds	r2, r0, #1
   2f102:	d102      	bne.n	2f10a <cbor_internal_read_object+0xd0>
   2f104:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   2f108:	b313      	cbz	r3, 2f150 <cbor_internal_read_object+0x116>
				} else if (strlen(cursor->attribute) == len &&
   2f10a:	f7fd fd93 	bl	2cc34 <strlen>
   2f10e:	9b01      	ldr	r3, [sp, #4]
   2f110:	4298      	cmp	r0, r3
   2f112:	4602      	mov	r2, r0
   2f114:	d10a      	bne.n	2f12c <cbor_internal_read_object+0xf2>
					!memcmp(cursor->attribute, attrbuf, len)) {
   2f116:	6828      	ldr	r0, [r5, #0]
   2f118:	a909      	add	r1, sp, #36	; 0x24
   2f11a:	f7fd fda7 	bl	2cc6c <memcmp>
				} else if (strlen(cursor->attribute) == len &&
   2f11e:	b928      	cbnz	r0, 2f12c <cbor_internal_read_object+0xf2>
		if (!cursor->attribute && best_match) {
   2f120:	682b      	ldr	r3, [r5, #0]
   2f122:	2b00      	cmp	r3, #0
   2f124:	d1cb      	bne.n	2f0be <cbor_internal_read_object+0x84>
   2f126:	e7c6      	b.n	2f0b6 <cbor_internal_read_object+0x7c>
		if (ct == CborByteStringType) {
   2f128:	2e40      	cmp	r6, #64	; 0x40
		if (ct == CborNullType) {
   2f12a:	d0e9      	beq.n	2f100 <cbor_internal_read_object+0xc6>
		for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2f12c:	3530      	adds	r5, #48	; 0x30
   2f12e:	e7c0      	b.n	2f0b2 <cbor_internal_read_object+0x78>
		if (ct == CborTextStringType) {
   2f130:	2e60      	cmp	r6, #96	; 0x60
   2f132:	e7fa      	b.n	2f12a <cbor_internal_read_object+0xf0>
		if (ct == CborBooleanType) {
   2f134:	2ef5      	cmp	r6, #245	; 0xf5
   2f136:	e7f8      	b.n	2f12a <cbor_internal_read_object+0xf0>
		if (ct == CborHalfFloatType) {
   2f138:	2ef9      	cmp	r6, #249	; 0xf9
   2f13a:	e7f6      	b.n	2f12a <cbor_internal_read_object+0xf0>
		if (ct == CborFloatType) {
   2f13c:	2efa      	cmp	r6, #250	; 0xfa
   2f13e:	e7f4      	b.n	2f12a <cbor_internal_read_object+0xf0>
		if (ct == CborDoubleType) {
   2f140:	2efb      	cmp	r6, #251	; 0xfb
   2f142:	e7f2      	b.n	2f12a <cbor_internal_read_object+0xf0>
		if (ct == CborArrayType) {
   2f144:	2e80      	cmp	r6, #128	; 0x80
   2f146:	e7f0      	b.n	2f12a <cbor_internal_read_object+0xf0>
		if (ct == CborMapType) {
   2f148:	2ea0      	cmp	r6, #160	; 0xa0
   2f14a:	e7ee      	b.n	2f12a <cbor_internal_read_object+0xf0>
		if (ct == CborNullType) {
   2f14c:	2ef6      	cmp	r6, #246	; 0xf6
   2f14e:	e7ec      	b.n	2f12a <cbor_internal_read_object+0xf0>
   2f150:	46ab      	mov	fp, r5
   2f152:	e7eb      	b.n	2f12c <cbor_internal_read_object+0xf2>
    *result = !!value->extra;
   2f154:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2f158:	3b00      	subs	r3, #0
   2f15a:	bf18      	it	ne
   2f15c:	2301      	movne	r3, #1
   2f15e:	7003      	strb	r3, [r0, #0]
		err = cbor_value_advance(&cur_value);
   2f160:	a805      	add	r0, sp, #20
   2f162:	f002 f997 	bl	31494 <cbor_value_advance>
   2f166:	e77d      	b.n	2f064 <cbor_internal_read_object+0x2a>
				err |= cbor_value_get_int64(&cur_value, lptr);
   2f168:	4601      	mov	r1, r0
   2f16a:	a805      	add	r0, sp, #20
   2f16c:	f7ff febb 	bl	2eee6 <cbor_value_get_int64>
				break;
   2f170:	e7f6      	b.n	2f160 <cbor_internal_read_object+0x126>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2f172:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2f176:	07db      	lsls	r3, r3, #31
   2f178:	d507      	bpl.n	2f18a <cbor_internal_read_object+0x150>
   2f17a:	a805      	add	r0, sp, #20
   2f17c:	f002 f8df 	bl	3133e <_cbor_value_decode_int64_internal>
   2f180:	4602      	mov	r2, r0
   2f182:	460b      	mov	r3, r1
    *result = _cbor_value_extract_int64_helper(value);
   2f184:	e9c6 2300 	strd	r2, r3, [r6]
    return CborNoError;
   2f188:	e7ea      	b.n	2f160 <cbor_internal_read_object+0x126>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2f18a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2f18e:	2300      	movs	r3, #0
   2f190:	e7f8      	b.n	2f184 <cbor_internal_read_object+0x14a>
				err |= cbor_value_get_half_float(&cur_value, lptr);
   2f192:	4601      	mov	r1, r0
   2f194:	a805      	add	r0, sp, #20
   2f196:	f002 f98c 	bl	314b2 <cbor_value_get_half_float>
				break;
   2f19a:	e7e1      	b.n	2f160 <cbor_internal_read_object+0x126>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   2f19c:	a805      	add	r0, sp, #20
   2f19e:	f002 f8ce 	bl	3133e <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   2f1a2:	2204      	movs	r2, #4
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   2f1a4:	9002      	str	r0, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   2f1a6:	a902      	add	r1, sp, #8
    memcpy(result, &data, sizeof(*result));
   2f1a8:	4630      	mov	r0, r6
   2f1aa:	f7fd fd86 	bl	2ccba <memcpy>
    return CborNoError;
   2f1ae:	e7d7      	b.n	2f160 <cbor_internal_read_object+0x126>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   2f1b0:	a805      	add	r0, sp, #20
   2f1b2:	f002 f8c4 	bl	3133e <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   2f1b6:	2208      	movs	r2, #8
    uint64_t data = _cbor_value_decode_int64_internal(value);
   2f1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   2f1bc:	eb0d 0102 	add.w	r1, sp, r2
   2f1c0:	e7f2      	b.n	2f1a8 <cbor_internal_read_object+0x16e>
				size_t len = cursor->len;
   2f1c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2f1c4:	9302      	str	r3, [sp, #8]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2f1c6:	aa02      	add	r2, sp, #8
   2f1c8:	2300      	movs	r3, #0
   2f1ca:	4601      	mov	r1, r0
   2f1cc:	a805      	add	r0, sp, #20
   2f1ce:	f7f8 faf3 	bl	277b8 <_cbor_value_copy_string>
				*cursor->addr.bytestring.len = len;
   2f1d2:	68eb      	ldr	r3, [r5, #12]
   2f1d4:	9a02      	ldr	r2, [sp, #8]
   2f1d6:	601a      	str	r2, [r3, #0]
				break;
   2f1d8:	e7c2      	b.n	2f160 <cbor_internal_read_object+0x126>
				size_t len = cursor->len;
   2f1da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2f1dc:	9302      	str	r3, [sp, #8]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2f1de:	4601      	mov	r1, r0
   2f1e0:	2300      	movs	r3, #0
   2f1e2:	aa02      	add	r2, sp, #8
   2f1e4:	a805      	add	r0, sp, #20
   2f1e6:	f7f8 fae7 	bl	277b8 <_cbor_value_copy_string>
				break;
   2f1ea:	e7b9      	b.n	2f160 <cbor_internal_read_object+0x126>
				err |= cbor_read_array(&cur_value, &cursor->addr.array);
   2f1ec:	f105 0108 	add.w	r1, r5, #8
   2f1f0:	a805      	add	r0, sp, #20
   2f1f2:	f7ff fe90 	bl	2ef16 <cbor_read_array>
				err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   2f1f6:	4304      	orrs	r4, r0
{ return value && value->type != CborInvalidType; }
   2f1f8:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
	while (cbor_value_is_valid(&cur_value) && !err) {
   2f1fc:	2eff      	cmp	r6, #255	; 0xff
   2f1fe:	d02b      	beq.n	2f258 <cbor_internal_read_object+0x21e>
   2f200:	b9f4      	cbnz	r4, 2f240 <cbor_internal_read_object+0x206>
		if (cbor_value_is_text_string(&cur_value)) {
   2f202:	2e60      	cmp	r6, #96	; 0x60
   2f204:	f47f af50 	bne.w	2f0a8 <cbor_internal_read_object+0x6e>
			if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   2f208:	a901      	add	r1, sp, #4
   2f20a:	a805      	add	r0, sp, #20
   2f20c:	f002 f949 	bl	314a2 <cbor_value_calculate_string_length>
   2f210:	b950      	cbnz	r0, 2f228 <cbor_internal_read_object+0x1ee>
				if (len > CBORATTR_MAX_SIZE) {
   2f212:	9b01      	ldr	r3, [sp, #4]
   2f214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2f218:	d826      	bhi.n	2f268 <cbor_internal_read_object+0x22e>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2f21a:	4623      	mov	r3, r4
   2f21c:	aa01      	add	r2, sp, #4
   2f21e:	a909      	add	r1, sp, #36	; 0x24
   2f220:	a805      	add	r0, sp, #20
   2f222:	f7f8 fac9 	bl	277b8 <_cbor_value_copy_string>
   2f226:	4604      	mov	r4, r0
			err |= cbor_value_advance(&cur_value);
   2f228:	a805      	add	r0, sp, #20
   2f22a:	f002 f933 	bl	31494 <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   2f22e:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
			if (cbor_value_is_valid(&cur_value)) {
   2f232:	2eff      	cmp	r6, #255	; 0xff
			err |= cbor_value_advance(&cur_value);
   2f234:	ea44 0400 	orr.w	r4, r4, r0
			if (cbor_value_is_valid(&cur_value)) {
   2f238:	f47f af38 	bne.w	2f0ac <cbor_internal_read_object+0x72>
				err |= CborErrorIllegalType;
   2f23c:	f444 7482 	orr.w	r4, r4, #260	; 0x104
	return err;
   2f240:	4620      	mov	r0, r4
}
   2f242:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   2f246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   2f24a:	2300      	movs	r3, #0
   2f24c:	68a9      	ldr	r1, [r5, #8]
   2f24e:	461a      	mov	r2, r3
   2f250:	a805      	add	r0, sp, #20
   2f252:	f7ff fef2 	bl	2f03a <cbor_internal_read_object>
   2f256:	e7ce      	b.n	2f1f6 <cbor_internal_read_object+0x1bc>
	if (!err) {
   2f258:	2c00      	cmp	r4, #0
   2f25a:	d1f1      	bne.n	2f240 <cbor_internal_read_object+0x206>
		err |= cbor_value_leave_container(root_value, &cur_value);
   2f25c:	a905      	add	r1, sp, #20
   2f25e:	4638      	mov	r0, r7
   2f260:	f002 f8dc 	bl	3141c <cbor_value_leave_container>
   2f264:	4604      	mov	r4, r0
   2f266:	e7eb      	b.n	2f240 <cbor_internal_read_object+0x206>
					err |= CborErrorDataTooLarge;
   2f268:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2f26c:	e7e8      	b.n	2f240 <cbor_internal_read_object+0x206>
		return err;
   2f26e:	f44f 7082 	mov.w	r0, #260	; 0x104
   2f272:	e7e6      	b.n	2f242 <cbor_internal_read_object+0x208>

0002f274 <cbor_read_object>:
int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
	int st;

	st = cbor_internal_read_object(value, attrs, NULL, 0);
   2f274:	2300      	movs	r3, #0
   2f276:	461a      	mov	r2, r3
   2f278:	f7ff bedf 	b.w	2f03a <cbor_internal_read_object>

0002f27c <zephyr_img_mgmt_flash_check_empty>:
{
   2f27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f280:	b092      	sub	sp, #72	; 0x48
   2f282:	4688      	mov	r8, r1
	rc = flash_area_open(fa_id, &fa);
   2f284:	a901      	add	r1, sp, #4
   2f286:	f7ee fe9f 	bl	1dfc8 <flash_area_open>
	if (rc != 0) {
   2f28a:	4604      	mov	r4, r0
   2f28c:	bb68      	cbnz	r0, 2f2ea <zephyr_img_mgmt_flash_check_empty+0x6e>
	erased_val = flash_area_erased_val(fa);
   2f28e:	9801      	ldr	r0, [sp, #4]
   2f290:	f7fd f9bd 	bl	2c60e <flash_area_erased_val>
	end = fa->fa_size;
   2f294:	9b01      	ldr	r3, [sp, #4]
	erased_val_32 = ERASED_VAL_32(erased_val);
   2f296:	0406      	lsls	r6, r0, #16
   2f298:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
   2f29c:	4306      	orrs	r6, r0
	end = fa->fa_size;
   2f29e:	f8d3 9008 	ldr.w	r9, [r3, #8]
	erased_val_32 = ERASED_VAL_32(erased_val);
   2f2a2:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		rc = flash_area_read(fa, addr, data, bytes_to_read);
   2f2a6:	f10d 0a08 	add.w	sl, sp, #8
	for (addr = 0; addr < end; addr += sizeof(data)) {
   2f2aa:	454c      	cmp	r4, r9
   2f2ac:	db07      	blt.n	2f2be <zephyr_img_mgmt_flash_check_empty+0x42>
	*out_empty = true;
   2f2ae:	2301      	movs	r3, #1
	flash_area_close(fa);
   2f2b0:	9801      	ldr	r0, [sp, #4]
	*out_empty = true;
   2f2b2:	f888 3000 	strb.w	r3, [r8]
	flash_area_close(fa);
   2f2b6:	f7fd f91f 	bl	2c4f8 <flash_area_close>
	return 0;
   2f2ba:	2500      	movs	r5, #0
   2f2bc:	e021      	b.n	2f302 <zephyr_img_mgmt_flash_check_empty+0x86>
		if (end - addr < sizeof(data)) {
   2f2be:	eba9 0704 	sub.w	r7, r9, r4
   2f2c2:	2f40      	cmp	r7, #64	; 0x40
   2f2c4:	bf28      	it	cs
   2f2c6:	2740      	movcs	r7, #64	; 0x40
		rc = flash_area_read(fa, addr, data, bytes_to_read);
   2f2c8:	9801      	ldr	r0, [sp, #4]
   2f2ca:	463b      	mov	r3, r7
   2f2cc:	4652      	mov	r2, sl
   2f2ce:	4621      	mov	r1, r4
   2f2d0:	f7fd f913 	bl	2c4fa <flash_area_read>
		if (rc != 0) {
   2f2d4:	4605      	mov	r5, r0
   2f2d6:	b928      	cbnz	r0, 2f2e4 <zephyr_img_mgmt_flash_check_empty+0x68>
		for (i = 0; i < bytes_to_read / 4; i++) {
   2f2d8:	10bf      	asrs	r7, r7, #2
   2f2da:	4602      	mov	r2, r0
   2f2dc:	4297      	cmp	r7, r2
   2f2de:	d106      	bne.n	2f2ee <zephyr_img_mgmt_flash_check_empty+0x72>
	for (addr = 0; addr < end; addr += sizeof(data)) {
   2f2e0:	3440      	adds	r4, #64	; 0x40
   2f2e2:	e7e2      	b.n	2f2aa <zephyr_img_mgmt_flash_check_empty+0x2e>
			flash_area_close(fa);
   2f2e4:	9801      	ldr	r0, [sp, #4]
   2f2e6:	f7fd f907 	bl	2c4f8 <flash_area_close>
		return MGMT_ERR_EUNKNOWN;
   2f2ea:	2501      	movs	r5, #1
   2f2ec:	e009      	b.n	2f302 <zephyr_img_mgmt_flash_check_empty+0x86>
			if (data[i] != erased_val_32) {
   2f2ee:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   2f2f2:	42b3      	cmp	r3, r6
   2f2f4:	d009      	beq.n	2f30a <zephyr_img_mgmt_flash_check_empty+0x8e>
				*out_empty = false;
   2f2f6:	2300      	movs	r3, #0
				flash_area_close(fa);
   2f2f8:	9801      	ldr	r0, [sp, #4]
				*out_empty = false;
   2f2fa:	f888 3000 	strb.w	r3, [r8]
				flash_area_close(fa);
   2f2fe:	f7fd f8fb 	bl	2c4f8 <flash_area_close>
}
   2f302:	4628      	mov	r0, r5
   2f304:	b012      	add	sp, #72	; 0x48
   2f306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < bytes_to_read / 4; i++) {
   2f30a:	3201      	adds	r2, #1
   2f30c:	e7e6      	b.n	2f2dc <zephyr_img_mgmt_flash_check_empty+0x60>

0002f30e <img_mgmt_get_unused_slot_area_id.isra.0>:
img_mgmt_get_unused_slot_area_id(int slot)
   2f30e:	b508      	push	{r3, lr}
			if (img_mgmt_slot_in_use(slot) == 0) {
   2f310:	2000      	movs	r0, #0
   2f312:	f000 f8f3 	bl	2f4fc <img_mgmt_slot_in_use>
   2f316:	b128      	cbz	r0, 2f324 <img_mgmt_get_unused_slot_area_id.isra.0+0x16>
   2f318:	2001      	movs	r0, #1
   2f31a:	f000 f8ef 	bl	2f4fc <img_mgmt_slot_in_use>
   2f31e:	b918      	cbnz	r0, 2f328 <img_mgmt_get_unused_slot_area_id.isra.0+0x1a>
		fa_id = FLASH_AREA_ID(image_1);
   2f320:	2005      	movs	r0, #5
}
   2f322:	bd08      	pop	{r3, pc}
		fa_id = FLASH_AREA_ID(image_0);
   2f324:	2002      	movs	r0, #2
					return area_id;
   2f326:	e7fc      	b.n	2f322 <img_mgmt_get_unused_slot_area_id.isra.0+0x14>
		return -1;
   2f328:	f04f 30ff 	mov.w	r0, #4294967295
   2f32c:	e7f9      	b.n	2f322 <img_mgmt_get_unused_slot_area_id.isra.0+0x14>

0002f32e <img_mgmt_impl_erase_slot>:
{
   2f32e:	b513      	push	{r0, r1, r4, lr}
	best_id = img_mgmt_get_unused_slot_area_id(-1);
   2f330:	f7ff ffed 	bl	2f30e <img_mgmt_get_unused_slot_area_id.isra.0>
	if (best_id < 0) {
   2f334:	2800      	cmp	r0, #0
   2f336:	db11      	blt.n	2f35c <img_mgmt_impl_erase_slot+0x2e>
	rc = zephyr_img_mgmt_flash_check_empty(best_id, &empty);
   2f338:	b2c4      	uxtb	r4, r0
   2f33a:	f10d 0107 	add.w	r1, sp, #7
   2f33e:	4620      	mov	r0, r4
   2f340:	f7ff ff9c 	bl	2f27c <zephyr_img_mgmt_flash_check_empty>
	if (rc != 0) {
   2f344:	b960      	cbnz	r0, 2f360 <img_mgmt_impl_erase_slot+0x32>
	if (!empty) {
   2f346:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2f34a:	b92b      	cbnz	r3, 2f358 <img_mgmt_impl_erase_slot+0x2a>
		rc = boot_erase_img_bank(best_id);
   2f34c:	4620      	mov	r0, r4
   2f34e:	f000 fb1a 	bl	2f986 <boot_erase_img_bank>
		if (rc != 0) {
   2f352:	3800      	subs	r0, #0
   2f354:	bf18      	it	ne
   2f356:	2001      	movne	r0, #1
}
   2f358:	b002      	add	sp, #8
   2f35a:	bd10      	pop	{r4, pc}
		return MGMT_ERR_ENOENT;
   2f35c:	2005      	movs	r0, #5
   2f35e:	e7fb      	b.n	2f358 <img_mgmt_impl_erase_slot+0x2a>
		return MGMT_ERR_EUNKNOWN;
   2f360:	2001      	movs	r0, #1
   2f362:	e7f9      	b.n	2f358 <img_mgmt_impl_erase_slot+0x2a>

0002f364 <img_mgmt_impl_write_pending>:
	if (slot != 1 && !(IMG_MGMT_UPDATABLE_IMAGE_NUMBER == 2 && slot == 3)) {
   2f364:	2801      	cmp	r0, #1
{
   2f366:	b508      	push	{r3, lr}
	if (slot != 1 && !(IMG_MGMT_UPDATABLE_IMAGE_NUMBER == 2 && slot == 3)) {
   2f368:	d106      	bne.n	2f378 <img_mgmt_impl_write_pending+0x14>
	rc = boot_request_upgrade_multi(zephyr_img_mgmt_slot_to_image(slot), permanent);
   2f36a:	2000      	movs	r0, #0
   2f36c:	f000 fafb 	bl	2f966 <boot_request_upgrade_multi>
	if (rc != 0) {
   2f370:	3800      	subs	r0, #0
   2f372:	bf18      	it	ne
   2f374:	2001      	movne	r0, #1
}
   2f376:	bd08      	pop	{r3, pc}
		return MGMT_ERR_EINVAL;
   2f378:	2003      	movs	r0, #3
   2f37a:	e7fc      	b.n	2f376 <img_mgmt_impl_write_pending+0x12>

0002f37c <img_mgmt_impl_write_confirmed>:
{
   2f37c:	b508      	push	{r3, lr}
	rc = boot_write_img_confirmed();
   2f37e:	f000 fafa 	bl	2f976 <boot_write_img_confirmed>
}
   2f382:	3800      	subs	r0, #0
   2f384:	bf18      	it	ne
   2f386:	2001      	movne	r0, #1
   2f388:	bd08      	pop	{r3, pc}

0002f38a <img_mgmt_impl_read>:
{
   2f38a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f38c:	460c      	mov	r4, r1
   2f38e:	4615      	mov	r5, r2
   2f390:	461e      	mov	r6, r3
	switch (slot) {
   2f392:	b1b0      	cbz	r0, 2f3c2 <img_mgmt_impl_read+0x38>
   2f394:	2801      	cmp	r0, #1
   2f396:	bf14      	ite	ne
   2f398:	20ff      	movne	r0, #255	; 0xff
   2f39a:	2005      	moveq	r0, #5
	rc = flash_area_open(area_id, &fa);
   2f39c:	a901      	add	r1, sp, #4
   2f39e:	f7ee fe13 	bl	1dfc8 <flash_area_open>
	if (rc != 0) {
   2f3a2:	b980      	cbnz	r0, 2f3c6 <img_mgmt_impl_read+0x3c>
	rc = flash_area_read(fa, offset, dst, num_bytes);
   2f3a4:	4621      	mov	r1, r4
   2f3a6:	4633      	mov	r3, r6
   2f3a8:	462a      	mov	r2, r5
   2f3aa:	9801      	ldr	r0, [sp, #4]
   2f3ac:	f7fd f8a5 	bl	2c4fa <flash_area_read>
   2f3b0:	4604      	mov	r4, r0
	flash_area_close(fa);
   2f3b2:	9801      	ldr	r0, [sp, #4]
   2f3b4:	f7fd f8a0 	bl	2c4f8 <flash_area_close>
	if (rc != 0) {
   2f3b8:	1e20      	subs	r0, r4, #0
   2f3ba:	bf18      	it	ne
   2f3bc:	2001      	movne	r0, #1
}
   2f3be:	b002      	add	sp, #8
   2f3c0:	bd70      	pop	{r4, r5, r6, pc}
		fa_id = FLASH_AREA_ID(image_0);
   2f3c2:	2002      	movs	r0, #2
   2f3c4:	e7ea      	b.n	2f39c <img_mgmt_impl_read+0x12>
		return MGMT_ERR_EUNKNOWN;
   2f3c6:	2001      	movs	r0, #1
   2f3c8:	e7f9      	b.n	2f3be <img_mgmt_impl_read+0x34>

0002f3ca <img_mgmt_impl_swap_type>:
{
   2f3ca:	b508      	push	{r3, lr}
	switch (mcuboot_swap_type_multi(image)) {
   2f3cc:	2000      	movs	r0, #0
   2f3ce:	f000 fac8 	bl	2f962 <mcuboot_swap_type_multi>
   2f3d2:	1e83      	subs	r3, r0, #2
   2f3d4:	2b02      	cmp	r3, #2
   2f3d6:	bf94      	ite	ls
   2f3d8:	f100 30ff 	addls.w	r0, r0, #4294967295
   2f3dc:	2000      	movhi	r0, #0
}
   2f3de:	bd08      	pop	{r3, pc}

0002f3e0 <img_mgmt_impl_erased_val>:

int
img_mgmt_impl_erased_val(int slot, uint8_t *erased_val)
{
   2f3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2f3e2:	460d      	mov	r5, r1
	switch (slot) {
   2f3e4:	b190      	cbz	r0, 2f40c <img_mgmt_impl_erased_val+0x2c>
   2f3e6:	2801      	cmp	r0, #1
   2f3e8:	bf14      	ite	ne
   2f3ea:	20ff      	movne	r0, #255	; 0xff
   2f3ec:	2005      	moveq	r0, #5

	if (area_id < 0) {
		return MGMT_ERR_EUNKNOWN;
	}

	rc = flash_area_open(area_id, &fa);
   2f3ee:	a901      	add	r1, sp, #4
   2f3f0:	f7ee fdea 	bl	1dfc8 <flash_area_open>
	if (rc != 0) {
   2f3f4:	4604      	mov	r4, r0
   2f3f6:	b958      	cbnz	r0, 2f410 <img_mgmt_impl_erased_val+0x30>
		return MGMT_ERR_EUNKNOWN;
	}

	*erased_val = flash_area_erased_val(fa);
   2f3f8:	9801      	ldr	r0, [sp, #4]
   2f3fa:	f7fd f908 	bl	2c60e <flash_area_erased_val>
   2f3fe:	7028      	strb	r0, [r5, #0]
	flash_area_close(fa);
   2f400:	9801      	ldr	r0, [sp, #4]
   2f402:	f7fd f879 	bl	2c4f8 <flash_area_close>

	return 0;
}
   2f406:	4620      	mov	r0, r4
   2f408:	b003      	add	sp, #12
   2f40a:	bd30      	pop	{r4, r5, pc}
		fa_id = FLASH_AREA_ID(image_0);
   2f40c:	2002      	movs	r0, #2
   2f40e:	e7ee      	b.n	2f3ee <img_mgmt_impl_erased_val+0xe>
		return MGMT_ERR_EUNKNOWN;
   2f410:	2401      	movs	r4, #1
   2f412:	e7f8      	b.n	2f406 <img_mgmt_impl_erased_val+0x26>

0002f414 <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
	return 0;
}
   2f414:	2000      	movs	r0, #0
   2f416:	4770      	bx	lr

0002f418 <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
	return 0;
}
   2f418:	2000      	movs	r0, #0
   2f41a:	4770      	bx	lr

0002f41c <img_mgmt_impl_log_pending>:
   2f41c:	2000      	movs	r0, #0
   2f41e:	4770      	bx	lr

0002f420 <img_mgmt_impl_log_confirm>:
   2f420:	2000      	movs	r0, #0
   2f422:	4770      	bx	lr

0002f424 <cbor_encode_text_stringz>:
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2f424:	b538      	push	{r3, r4, r5, lr}
   2f426:	4605      	mov	r5, r0
   2f428:	4608      	mov	r0, r1
   2f42a:	460c      	mov	r4, r1
   2f42c:	f7fd fc02 	bl	2cc34 <strlen>
   2f430:	4621      	mov	r1, r4
   2f432:	4602      	mov	r2, r0
   2f434:	4628      	mov	r0, r5
   2f436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2f43a:	f001 bd99 	b.w	30f70 <cbor_encode_text_string>

0002f43e <img_mgmt_find_by_hash>:
{
   2f43e:	b570      	push	{r4, r5, r6, lr}
   2f440:	4605      	mov	r5, r0
   2f442:	b088      	sub	sp, #32
   2f444:	460e      	mov	r6, r1
	for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   2f446:	2400      	movs	r4, #0
		if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   2f448:	2300      	movs	r3, #0
   2f44a:	466a      	mov	r2, sp
   2f44c:	4631      	mov	r1, r6
   2f44e:	4620      	mov	r0, r4
   2f450:	f7f3 fbf4 	bl	22c3c <img_mgmt_read_info>
   2f454:	b140      	cbz	r0, 2f468 <img_mgmt_find_by_hash+0x2a>
	for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   2f456:	2c01      	cmp	r4, #1
   2f458:	d104      	bne.n	2f464 <img_mgmt_find_by_hash+0x26>
	return -1;
   2f45a:	f04f 34ff 	mov.w	r4, #4294967295
}
   2f45e:	4620      	mov	r0, r4
   2f460:	b008      	add	sp, #32
   2f462:	bd70      	pop	{r4, r5, r6, pc}
   2f464:	2401      	movs	r4, #1
   2f466:	e7ef      	b.n	2f448 <img_mgmt_find_by_hash+0xa>
		if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   2f468:	2220      	movs	r2, #32
   2f46a:	4629      	mov	r1, r5
   2f46c:	4668      	mov	r0, sp
   2f46e:	f7fd fbfd 	bl	2cc6c <memcmp>
   2f472:	2800      	cmp	r0, #0
   2f474:	d1ef      	bne.n	2f456 <img_mgmt_find_by_hash+0x18>
   2f476:	e7f2      	b.n	2f45e <img_mgmt_find_by_hash+0x20>

0002f478 <img_mgmt_my_version>:
	return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   2f478:	2300      	movs	r3, #0
{
   2f47a:	4601      	mov	r1, r0
	return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   2f47c:	461a      	mov	r2, r3
   2f47e:	4618      	mov	r0, r3
   2f480:	f7f3 bbdc 	b.w	22c3c <img_mgmt_read_info>

0002f484 <cbor_encode_text_stringz>:
   2f484:	b538      	push	{r3, r4, r5, lr}
   2f486:	4605      	mov	r5, r0
   2f488:	4608      	mov	r0, r1
   2f48a:	460c      	mov	r4, r1
   2f48c:	f7fd fbd2 	bl	2cc34 <strlen>
   2f490:	4621      	mov	r1, r4
   2f492:	4602      	mov	r2, r0
   2f494:	4628      	mov	r0, r5
   2f496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2f49a:	f001 bd69 	b.w	30f70 <cbor_encode_text_string>

0002f49e <img_mgmt_state_flags>:
{
   2f49e:	b510      	push	{r4, lr}
   2f4a0:	4604      	mov	r4, r0
	swap_type = img_mgmt_impl_swap_type(query_slot);
   2f4a2:	f7ff ff92 	bl	2f3ca <img_mgmt_impl_swap_type>
	switch (swap_type) {
   2f4a6:	2803      	cmp	r0, #3
   2f4a8:	d80f      	bhi.n	2f4ca <img_mgmt_state_flags+0x2c>
   2f4aa:	e8df f000 	tbb	[pc, r0]
   2f4ae:	0502      	.short	0x0502
   2f4b0:	0b08      	.short	0x0b08
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2f4b2:	b17c      	cbz	r4, 2f4d4 <img_mgmt_state_flags+0x36>
	flags = 0;
   2f4b4:	2000      	movs	r0, #0
   2f4b6:	e001      	b.n	2f4bc <img_mgmt_state_flags+0x1e>
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2f4b8:	b174      	cbz	r4, 2f4d8 <img_mgmt_state_flags+0x3a>
			flags |= IMG_MGMT_STATE_F_PENDING;
   2f4ba:	2001      	movs	r0, #1
}
   2f4bc:	bd10      	pop	{r4, pc}
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2f4be:	b15c      	cbz	r4, 2f4d8 <img_mgmt_state_flags+0x3a>
			flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   2f4c0:	2009      	movs	r0, #9
   2f4c2:	e7fb      	b.n	2f4bc <img_mgmt_state_flags+0x1e>
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2f4c4:	b154      	cbz	r4, 2f4dc <img_mgmt_state_flags+0x3e>
			flags |= IMG_MGMT_STATE_F_CONFIRMED;
   2f4c6:	2002      	movs	r0, #2
   2f4c8:	e7f8      	b.n	2f4bc <img_mgmt_state_flags+0x1e>
	if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2f4ca:	2c00      	cmp	r4, #0
   2f4cc:	d1f2      	bne.n	2f4b4 <img_mgmt_state_flags+0x16>
		flags |= IMG_MGMT_STATE_F_ACTIVE;
   2f4ce:	f044 0004 	orr.w	r0, r4, #4
   2f4d2:	e7f3      	b.n	2f4bc <img_mgmt_state_flags+0x1e>
			flags |= IMG_MGMT_STATE_F_ACTIVE;
   2f4d4:	2406      	movs	r4, #6
   2f4d6:	e7fa      	b.n	2f4ce <img_mgmt_state_flags+0x30>
			flags |= IMG_MGMT_STATE_F_CONFIRMED;
   2f4d8:	2402      	movs	r4, #2
   2f4da:	e7f8      	b.n	2f4ce <img_mgmt_state_flags+0x30>
			flags |= IMG_MGMT_STATE_F_ACTIVE;
   2f4dc:	2404      	movs	r4, #4
   2f4de:	e7f6      	b.n	2f4ce <img_mgmt_state_flags+0x30>

0002f4e0 <img_mgmt_state_any_pending>:
{
   2f4e0:	b508      	push	{r3, lr}
	return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   2f4e2:	2000      	movs	r0, #0
   2f4e4:	f7ff ffdb 	bl	2f49e <img_mgmt_state_flags>
   2f4e8:	f010 0f01 	tst.w	r0, #1
   2f4ec:	f04f 0001 	mov.w	r0, #1
   2f4f0:	d103      	bne.n	2f4fa <img_mgmt_state_any_pending+0x1a>
		   img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   2f4f2:	f7ff ffd4 	bl	2f49e <img_mgmt_state_flags>
	return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   2f4f6:	f000 0001 	and.w	r0, r0, #1
}
   2f4fa:	bd08      	pop	{r3, pc}

0002f4fc <img_mgmt_slot_in_use>:
{
   2f4fc:	b508      	push	{r3, lr}
	state_flags = img_mgmt_state_flags(slot);
   2f4fe:	f7ff ffce 	bl	2f49e <img_mgmt_state_flags>
		   state_flags & IMG_MGMT_STATE_F_CONFIRMED	||
   2f502:	f010 0f06 	tst.w	r0, #6
   2f506:	bf0c      	ite	eq
   2f508:	f000 0001 	andeq.w	r0, r0, #1
   2f50c:	2001      	movne	r0, #1
}
   2f50e:	bd08      	pop	{r3, pc}

0002f510 <img_mgmt_state_set_pending>:
{
   2f510:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f512:	b089      	sub	sp, #36	; 0x24
   2f514:	4606      	mov	r6, r0
   2f516:	460f      	mov	r7, r1
	state_flags = img_mgmt_state_flags(slot);
   2f518:	f7ff ffc1 	bl	2f49e <img_mgmt_state_flags>
	if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   2f51c:	0783      	lsls	r3, r0, #30
   2f51e:	d500      	bpl.n	2f522 <img_mgmt_state_set_pending+0x12>
   2f520:	b9d6      	cbnz	r6, 2f558 <img_mgmt_state_set_pending+0x48>
	rc = img_mgmt_impl_write_pending(slot, permanent);
   2f522:	1e39      	subs	r1, r7, #0
   2f524:	bf18      	it	ne
   2f526:	2101      	movne	r1, #1
   2f528:	4630      	mov	r0, r6
   2f52a:	f7ff ff1b 	bl	2f364 <img_mgmt_impl_write_pending>
	if (rc != 0) {
   2f52e:	1e04      	subs	r4, r0, #0
   2f530:	bf18      	it	ne
   2f532:	2401      	movne	r4, #1
	if (img_mgmt_read_info(slot, NULL, hash, NULL)) {
   2f534:	466d      	mov	r5, sp
   2f536:	2300      	movs	r3, #0
   2f538:	4619      	mov	r1, r3
   2f53a:	462a      	mov	r2, r5
   2f53c:	4630      	mov	r0, r6
   2f53e:	f7f3 fb7d 	bl	22c3c <img_mgmt_read_info>
		hashp = hash;
   2f542:	2800      	cmp	r0, #0
   2f544:	bf0c      	ite	eq
   2f546:	4629      	moveq	r1, r5
   2f548:	2100      	movne	r1, #0
		(void) img_mgmt_impl_log_confirm(rc, hashp);
   2f54a:	4620      	mov	r0, r4
	if (permanent) {
   2f54c:	b137      	cbz	r7, 2f55c <img_mgmt_state_set_pending+0x4c>
		(void) img_mgmt_impl_log_confirm(rc, hashp);
   2f54e:	f7ff ff67 	bl	2f420 <img_mgmt_impl_log_confirm>
}
   2f552:	4620      	mov	r0, r4
   2f554:	b009      	add	sp, #36	; 0x24
   2f556:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MGMT_ERR_EBADSTATE;
   2f558:	2406      	movs	r4, #6
   2f55a:	e7eb      	b.n	2f534 <img_mgmt_state_set_pending+0x24>
		(void) img_mgmt_impl_log_pending(rc, hashp);
   2f55c:	f7ff ff5e 	bl	2f41c <img_mgmt_impl_log_pending>
	return rc;
   2f560:	e7f7      	b.n	2f552 <img_mgmt_state_set_pending+0x42>

0002f562 <img_mgmt_state_confirm>:
{
   2f562:	b510      	push	{r4, lr}
	if (img_mgmt_state_any_pending()) {
   2f564:	f7ff ffbc 	bl	2f4e0 <img_mgmt_state_any_pending>
   2f568:	b960      	cbnz	r0, 2f584 <img_mgmt_state_confirm+0x22>
	rc = img_mgmt_impl_write_confirmed();
   2f56a:	f7ff ff07 	bl	2f37c <img_mgmt_impl_write_confirmed>
	if (rc != 0) {
   2f56e:	1e04      	subs	r4, r0, #0
   2f570:	bf18      	it	ne
   2f572:	2401      	movne	r4, #1
	 img_mgmt_dfu_confirmed();
   2f574:	f7f3 fd46 	bl	23004 <img_mgmt_dfu_confirmed>
	return img_mgmt_impl_log_confirm(rc, NULL);
   2f578:	4620      	mov	r0, r4
   2f57a:	2100      	movs	r1, #0
}
   2f57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return img_mgmt_impl_log_confirm(rc, NULL);
   2f580:	f7ff bf4e 	b.w	2f420 <img_mgmt_impl_log_confirm>
		rc = MGMT_ERR_EBADSTATE;
   2f584:	2406      	movs	r4, #6
   2f586:	e7f7      	b.n	2f578 <img_mgmt_state_confirm+0x16>

0002f588 <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   2f588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f58a:	4605      	mov	r5, r0
   2f58c:	460c      	mov	r4, r1
	int off = 0;

	off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   2f58e:	460b      	mov	r3, r1
   2f590:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2f594:	2100      	movs	r1, #0
   2f596:	7828      	ldrb	r0, [r5, #0]
   2f598:	f000 f9b0 	bl	2f8fc <ull_to_s>

	dst[off++] = '.';
   2f59c:	272e      	movs	r7, #46	; 0x2e
   2f59e:	5427      	strb	r7, [r4, r0]
   2f5a0:	1c46      	adds	r6, r0, #1
	off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   2f5a2:	19a3      	adds	r3, r4, r6
   2f5a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2f5a8:	2100      	movs	r1, #0
   2f5aa:	7868      	ldrb	r0, [r5, #1]
   2f5ac:	f000 f9a6 	bl	2f8fc <ull_to_s>
   2f5b0:	4430      	add	r0, r6

	dst[off++] = '.';
   2f5b2:	1c46      	adds	r6, r0, #1
   2f5b4:	5427      	strb	r7, [r4, r0]
	off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   2f5b6:	19a3      	adds	r3, r4, r6
   2f5b8:	8868      	ldrh	r0, [r5, #2]
   2f5ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2f5be:	2100      	movs	r1, #0
   2f5c0:	f000 f99c 	bl	2f8fc <ull_to_s>

	if (ver->iv_build_num != 0) {
   2f5c4:	686b      	ldr	r3, [r5, #4]
   2f5c6:	b14b      	cbz	r3, 2f5dc <img_mgmt_ver_str+0x54>
	off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   2f5c8:	4406      	add	r6, r0
		dst[off++] = '.';
		off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   2f5ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
		dst[off++] = '.';
   2f5ce:	55a7      	strb	r7, [r4, r6]
   2f5d0:	3601      	adds	r6, #1
		off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   2f5d2:	6868      	ldr	r0, [r5, #4]
   2f5d4:	19a3      	adds	r3, r4, r6
   2f5d6:	2100      	movs	r1, #0
   2f5d8:	f000 f990 	bl	2f8fc <ull_to_s>
	}

	return 0;
}
   2f5dc:	2000      	movs	r0, #0
   2f5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f5e0 <zephyr_os_mgmt_reset_work_handler>:
{
   2f5e0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2f5e2:	2000      	movs	r0, #0
   2f5e4:	f7ee f9a8 	bl	1d938 <sys_reboot>

0002f5e8 <os_mgmt_reset>:
	return os_mgmt_impl_reset(OS_MGMT_RESET_MS);
   2f5e8:	20fa      	movs	r0, #250	; 0xfa
   2f5ea:	f7f3 be33 	b.w	23254 <os_mgmt_impl_reset>

0002f5ee <mgmt_streamer_alloc_rsp>:
{
   2f5ee:	4603      	mov	r3, r0
   2f5f0:	4608      	mov	r0, r1
	return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
   2f5f2:	681a      	ldr	r2, [r3, #0]
   2f5f4:	6859      	ldr	r1, [r3, #4]
   2f5f6:	6812      	ldr	r2, [r2, #0]
   2f5f8:	4710      	bx	r2

0002f5fa <mgmt_streamer_trim_front>:
{
   2f5fa:	4603      	mov	r3, r0
   2f5fc:	4608      	mov	r0, r1
   2f5fe:	4611      	mov	r1, r2
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   2f600:	681a      	ldr	r2, [r3, #0]
{
   2f602:	b410      	push	{r4}
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   2f604:	6854      	ldr	r4, [r2, #4]
   2f606:	685a      	ldr	r2, [r3, #4]
   2f608:	4623      	mov	r3, r4
}
   2f60a:	bc10      	pop	{r4}
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   2f60c:	4718      	bx	r3

0002f60e <mgmt_streamer_reset_buf>:
{
   2f60e:	4603      	mov	r3, r0
   2f610:	4608      	mov	r0, r1
	streamer->cfg->reset_buf(buf, streamer->cb_arg);
   2f612:	681a      	ldr	r2, [r3, #0]
   2f614:	6859      	ldr	r1, [r3, #4]
   2f616:	6892      	ldr	r2, [r2, #8]
   2f618:	4710      	bx	r2

0002f61a <mgmt_streamer_write_at>:
{
   2f61a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return streamer->cfg->write_at(streamer->writer, offset, data, len, streamer->cb_arg);
   2f61c:	e9d0 4500 	ldrd	r4, r5, [r0]
   2f620:	9500      	str	r5, [sp, #0]
   2f622:	68e4      	ldr	r4, [r4, #12]
   2f624:	68c0      	ldr	r0, [r0, #12]
   2f626:	47a0      	blx	r4
}
   2f628:	b003      	add	sp, #12
   2f62a:	bd30      	pop	{r4, r5, pc}

0002f62c <mgmt_streamer_init_reader>:
	return streamer->cfg->init_reader(streamer->reader, buf, streamer->cb_arg);
   2f62c:	6803      	ldr	r3, [r0, #0]
   2f62e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
   2f632:	691b      	ldr	r3, [r3, #16]
   2f634:	4718      	bx	r3

0002f636 <mgmt_streamer_init_writer>:
	return streamer->cfg->init_writer(streamer->writer, buf, streamer->cb_arg);
   2f636:	6803      	ldr	r3, [r0, #0]
   2f638:	6842      	ldr	r2, [r0, #4]
   2f63a:	695b      	ldr	r3, [r3, #20]
   2f63c:	68c0      	ldr	r0, [r0, #12]
   2f63e:	4718      	bx	r3

0002f640 <mgmt_streamer_free_buf>:
{
   2f640:	4603      	mov	r3, r0
   2f642:	4608      	mov	r0, r1
	streamer->cfg->free_buf(buf, streamer->cb_arg);
   2f644:	681a      	ldr	r2, [r3, #0]
   2f646:	6859      	ldr	r1, [r3, #4]
   2f648:	6992      	ldr	r2, [r2, #24]
   2f64a:	4710      	bx	r2

0002f64c <mgmt_err_from_cbor>:
	switch (cbor_status) {
   2f64c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   2f650:	d003      	beq.n	2f65a <mgmt_err_from_cbor+0xe>
   2f652:	3800      	subs	r0, #0
   2f654:	bf18      	it	ne
   2f656:	2001      	movne	r0, #1
   2f658:	4770      	bx	lr
   2f65a:	2002      	movs	r0, #2
}
   2f65c:	4770      	bx	lr

0002f65e <mgmt_ctxt_init>:
{
   2f65e:	b570      	push	{r4, r5, r6, lr}
   2f660:	460e      	mov	r6, r1
	rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   2f662:	f100 031c 	add.w	r3, r0, #28
   2f666:	f100 0210 	add.w	r2, r0, #16
{
   2f66a:	4605      	mov	r5, r0
	rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   2f66c:	2100      	movs	r1, #0
   2f66e:	68b0      	ldr	r0, [r6, #8]
   2f670:	f001 fe7c 	bl	3136c <cbor_parser_init>
	if (rc != CborNoError) {
   2f674:	4604      	mov	r4, r0
   2f676:	b118      	cbz	r0, 2f680 <mgmt_ctxt_init+0x22>
}
   2f678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return mgmt_err_from_cbor(rc);
   2f67c:	f7ff bfe6 	b.w	2f64c <mgmt_err_from_cbor>
	cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
   2f680:	4602      	mov	r2, r0
   2f682:	68f1      	ldr	r1, [r6, #12]
   2f684:	4628      	mov	r0, r5
   2f686:	f001 fc3e 	bl	30f06 <cbor_encoder_init>
}
   2f68a:	4620      	mov	r0, r4
   2f68c:	bd70      	pop	{r4, r5, r6, pc}

0002f68e <mgmt_ntoh_hdr>:
	hdr->nh_len = ntohs(hdr->nh_len);
   2f68e:	8842      	ldrh	r2, [r0, #2]
   2f690:	0213      	lsls	r3, r2, #8
   2f692:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	hdr->nh_group = ntohs(hdr->nh_group);
   2f696:	8882      	ldrh	r2, [r0, #4]
	hdr->nh_len = ntohs(hdr->nh_len);
   2f698:	8043      	strh	r3, [r0, #2]
	hdr->nh_group = ntohs(hdr->nh_group);
   2f69a:	0213      	lsls	r3, r2, #8
   2f69c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2f6a0:	8083      	strh	r3, [r0, #4]
}
   2f6a2:	4770      	bx	lr

0002f6a4 <mgmt_hton_hdr>:
   2f6a4:	f7ff bff3 	b.w	2f68e <mgmt_ntoh_hdr>

0002f6a8 <smp_write_hdr>:
	return 0;
}

static int
smp_write_hdr(struct smp_streamer *streamer, const struct mgmt_hdr *src_hdr)
{
   2f6a8:	b508      	push	{r3, lr}
   2f6aa:	460a      	mov	r2, r1
	int rc;

	rc = mgmt_streamer_write_at(&streamer->mgmt_stmr, 0, src_hdr, sizeof(*src_hdr));
   2f6ac:	2308      	movs	r3, #8
   2f6ae:	2100      	movs	r1, #0
   2f6b0:	f7ff ffb3 	bl	2f61a <mgmt_streamer_write_at>
	return mgmt_err_from_cbor(rc);
}
   2f6b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mgmt_err_from_cbor(rc);
   2f6b8:	f7ff bfc8 	b.w	2f64c <mgmt_err_from_cbor>

0002f6bc <smp_process_request_packet>:
 *
 * @return 0 on success, MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   2f6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f6c0:	4605      	mov	r5, r0
   2f6c2:	b094      	sub	sp, #80	; 0x50
   2f6c4:	460f      	mov	r7, r1
	reader->cpy(reader, (char *)dst_hdr, 0, sizeof(*dst_hdr));
   2f6c6:	f04f 0800 	mov.w	r8, #0
	valid_hdr = true;

	while (1) {
		handler_found = false;

		rc = mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   2f6ca:	4639      	mov	r1, r7
   2f6cc:	4628      	mov	r0, r5
   2f6ce:	f7ff ffad 	bl	2f62c <mgmt_streamer_init_reader>
		if (rc != 0) {
   2f6d2:	4606      	mov	r6, r0
   2f6d4:	2800      	cmp	r0, #0
   2f6d6:	f040 8107 	bne.w	2f8e8 <smp_process_request_packet+0x22c>
			valid_hdr = false;
			break;
		}

		/* Read the management header and strip it from the request. */
		rc = smp_read_hdr(streamer, &req_hdr);
   2f6da:	68a8      	ldr	r0, [r5, #8]
	if (reader->message_size < sizeof(*dst_hdr)) {
   2f6dc:	6983      	ldr	r3, [r0, #24]
   2f6de:	2b07      	cmp	r3, #7
   2f6e0:	f240 8102 	bls.w	2f8e8 <smp_process_request_packet+0x22c>
	reader->cpy(reader, (char *)dst_hdr, 0, sizeof(*dst_hdr));
   2f6e4:	2308      	movs	r3, #8
   2f6e6:	4632      	mov	r2, r6
   2f6e8:	a901      	add	r1, sp, #4
   2f6ea:	6944      	ldr	r4, [r0, #20]
   2f6ec:	47a0      	blx	r4
		if (rc != 0) {
			valid_hdr = false;
			break;
		}
		mgmt_ntoh_hdr(&req_hdr);
   2f6ee:	a801      	add	r0, sp, #4
   2f6f0:	f7ff ffcd 	bl	2f68e <mgmt_ntoh_hdr>
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   2f6f4:	2208      	movs	r2, #8
   2f6f6:	4639      	mov	r1, r7
   2f6f8:	4628      	mov	r0, r5
   2f6fa:	f7ff ff7e 	bl	2f5fa <mgmt_streamer_trim_front>

		rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   2f6fe:	4639      	mov	r1, r7
   2f700:	4628      	mov	r0, r5
   2f702:	f7ff ff74 	bl	2f5ee <mgmt_streamer_alloc_rsp>
		if (rsp == NULL) {
   2f706:	4681      	mov	r9, r0
   2f708:	2800      	cmp	r0, #0
   2f70a:	f000 808b 	beq.w	2f824 <smp_process_request_packet+0x168>
			rc = MGMT_ERR_ENOMEM;
			break;
		}

		rc = mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   2f70e:	4601      	mov	r1, r0
   2f710:	4628      	mov	r0, r5
   2f712:	f7ff ff90 	bl	2f636 <mgmt_streamer_init_writer>
		if (rc != 0) {
   2f716:	4604      	mov	r4, r0
   2f718:	bb10      	cbnz	r0, 2f760 <smp_process_request_packet+0xa4>
	rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   2f71a:	4629      	mov	r1, r5
   2f71c:	a809      	add	r0, sp, #36	; 0x24
   2f71e:	f7ff ff9e 	bl	2f65e <mgmt_ctxt_init>
	if (rc != 0) {
   2f722:	4604      	mov	r4, r0
   2f724:	b9e0      	cbnz	r0, 2f760 <smp_process_request_packet+0xa4>
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   2f726:	f89d 3004 	ldrb.w	r3, [sp, #4]
	*rsp_hdr = (struct mgmt_hdr) {
   2f72a:	f8cd 800c 	str.w	r8, [sp, #12]
		return MGMT_OP_WRITE_RSP;
   2f72e:	f013 0f07 	tst.w	r3, #7
   2f732:	bf0c      	ite	eq
   2f734:	2301      	moveq	r3, #1
   2f736:	2303      	movne	r3, #3
	*rsp_hdr = (struct mgmt_hdr) {
   2f738:	f88d 300c 	strb.w	r3, [sp, #12]
	rc = smp_write_hdr(streamer, &rsp_hdr);
   2f73c:	a903      	add	r1, sp, #12
	*rsp_hdr = (struct mgmt_hdr) {
   2f73e:	9b02      	ldr	r3, [sp, #8]
   2f740:	9304      	str	r3, [sp, #16]
	rc = smp_write_hdr(streamer, &rsp_hdr);
   2f742:	4628      	mov	r0, r5
   2f744:	f7ff ffb0 	bl	2f6a8 <smp_write_hdr>
	if (rc != 0) {
   2f748:	4604      	mov	r4, r0
   2f74a:	b948      	cbnz	r0, 2f760 <smp_process_request_packet+0xa4>
	handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   2f74c:	f89d 100b 	ldrb.w	r1, [sp, #11]
   2f750:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   2f754:	f7f3 fdea 	bl	2332c <mgmt_find_handler>
	if (handler == NULL) {
   2f758:	4682      	mov	sl, r0
   2f75a:	b920      	cbnz	r0, 2f766 <smp_process_request_packet+0xaa>
		handler_found = false;
   2f75c:	2600      	movs	r6, #0
		return MGMT_ERR_ENOTSUP;
   2f75e:	2408      	movs	r4, #8
		req = NULL;
   2f760:	46b8      	mov	r8, r7
   2f762:	464f      	mov	r7, r9
   2f764:	e062      	b.n	2f82c <smp_process_request_packet+0x170>
	rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder, CborIndefiniteLength);
   2f766:	f04f 32ff 	mov.w	r2, #4294967295
   2f76a:	a905      	add	r1, sp, #20
   2f76c:	a809      	add	r0, sp, #36	; 0x24
   2f76e:	f001 fc13 	bl	30f98 <cbor_encoder_create_map>
	rc = mgmt_err_from_cbor(rc);
   2f772:	f7ff ff6b 	bl	2f64c <mgmt_err_from_cbor>
	if (rc != 0) {
   2f776:	4604      	mov	r4, r0
   2f778:	2800      	cmp	r0, #0
   2f77a:	d1f1      	bne.n	2f760 <smp_process_request_packet+0xa4>
	switch (req_hdr->nh_op) {
   2f77c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2f780:	f013 0307 	ands.w	r3, r3, #7
   2f784:	d004      	beq.n	2f790 <smp_process_request_packet+0xd4>
   2f786:	2b02      	cmp	r3, #2
   2f788:	d047      	beq.n	2f81a <smp_process_request_packet+0x15e>
		handler_found = false;
   2f78a:	2600      	movs	r6, #0
		return MGMT_ERR_EINVAL;
   2f78c:	2403      	movs	r4, #3
   2f78e:	e7e7      	b.n	2f760 <smp_process_request_packet+0xa4>
		handler_fn = handler->mh_read;
   2f790:	f8da 4000 	ldr.w	r4, [sl]
	if (handler_fn) {
   2f794:	2c00      	cmp	r4, #0
   2f796:	d0e1      	beq.n	2f75c <smp_process_request_packet+0xa0>
		mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   2f798:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2f79c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2f7a0:	2300      	movs	r3, #0
   2f7a2:	2001      	movs	r0, #1
   2f7a4:	f7f3 fdf2 	bl	2338c <mgmt_evt>
		rc = handler_fn(cbuf);
   2f7a8:	a809      	add	r0, sp, #36	; 0x24
   2f7aa:	47a0      	blx	r4
	if (rc != 0) {
   2f7ac:	4604      	mov	r4, r0
   2f7ae:	2800      	cmp	r0, #0
   2f7b0:	d136      	bne.n	2f820 <smp_process_request_packet+0x164>
	rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   2f7b2:	a905      	add	r1, sp, #20
   2f7b4:	a809      	add	r0, sp, #36	; 0x24
   2f7b6:	f001 fbfe 	bl	30fb6 <cbor_encoder_close_container>
	return mgmt_err_from_cbor(rc);
   2f7ba:	f7ff ff47 	bl	2f64c <mgmt_err_from_cbor>
	if (rc != 0) {
   2f7be:	4604      	mov	r4, r0
   2f7c0:	bb70      	cbnz	r0, 2f820 <smp_process_request_packet+0x164>
{   return encoder->writer->bytes_written; }
   2f7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   2f7c4:	685b      	ldr	r3, [r3, #4]
	mgmt_hton_hdr(&rsp_hdr);
   2f7c6:	a803      	add	r0, sp, #12
	rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   2f7c8:	3b08      	subs	r3, #8
   2f7ca:	f8ad 300e 	strh.w	r3, [sp, #14]
	mgmt_hton_hdr(&rsp_hdr);
   2f7ce:	f7ff ff69 	bl	2f6a4 <mgmt_hton_hdr>
	rc = smp_write_hdr(streamer, &rsp_hdr);
   2f7d2:	a903      	add	r1, sp, #12
   2f7d4:	4628      	mov	r0, r5
   2f7d6:	f7ff ff67 	bl	2f6a8 <smp_write_hdr>
	if (rc != 0) {
   2f7da:	4604      	mov	r4, r0
   2f7dc:	bb00      	cbnz	r0, 2f820 <smp_process_request_packet+0x164>
		if (rc != 0) {
			break;
		}

		/* Send the response. */
		rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   2f7de:	692b      	ldr	r3, [r5, #16]
   2f7e0:	686a      	ldr	r2, [r5, #4]
   2f7e2:	4649      	mov	r1, r9
   2f7e4:	4628      	mov	r0, r5
   2f7e6:	4798      	blx	r3
		rsp = NULL;
		if (rc != 0) {
   2f7e8:	4604      	mov	r4, r0
   2f7ea:	2800      	cmp	r0, #0
   2f7ec:	d17a      	bne.n	2f8e4 <smp_process_request_packet+0x228>
			break;
		}

		/* Trim processed request to free up space for subsequent responses. */
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, smp_align4(req_hdr.nh_len));
   2f7ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	if (rem == 0) {
   2f7f2:	f012 0303 	ands.w	r3, r2, #3
		return x - rem + 4;
   2f7f6:	bf1c      	itt	ne
   2f7f8:	3204      	addne	r2, #4
   2f7fa:	1ad2      	subne	r2, r2, r3
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, smp_align4(req_hdr.nh_len));
   2f7fc:	4639      	mov	r1, r7
   2f7fe:	4628      	mov	r0, r5
   2f800:	f7ff fefb 	bl	2f5fa <mgmt_streamer_trim_front>

		cmd_done_arg.err = MGMT_ERR_EOK;
		mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2f804:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2f808:	f8bd 1008 	ldrh.w	r1, [sp, #8]
		cmd_done_arg.err = MGMT_ERR_EOK;
   2f80c:	f8cd 8000 	str.w	r8, [sp]
		mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2f810:	466b      	mov	r3, sp
   2f812:	2003      	movs	r0, #3
   2f814:	f7f3 fdba 	bl	2338c <mgmt_evt>
		handler_found = false;
   2f818:	e757      	b.n	2f6ca <smp_process_request_packet+0xe>
		handler_fn = handler->mh_write;
   2f81a:	f8da 4004 	ldr.w	r4, [sl, #4]
		break;
   2f81e:	e7b9      	b.n	2f794 <smp_process_request_packet+0xd8>
		*handler_found = true;
   2f820:	2601      	movs	r6, #1
	if (rc != 0) {
   2f822:	e79d      	b.n	2f760 <smp_process_request_packet+0xa4>
		handler_found = false;
   2f824:	4606      	mov	r6, r0
			rc = MGMT_ERR_ENOMEM;
   2f826:	2402      	movs	r4, #2
		req = NULL;
   2f828:	f04f 0800 	mov.w	r8, #0
	mgmt_streamer_reset_buf(&streamer->mgmt_stmr, rsp);
   2f82c:	4639      	mov	r1, r7
   2f82e:	4628      	mov	r0, r5
   2f830:	f7ff feed 	bl	2f60e <mgmt_streamer_reset_buf>
	mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   2f834:	4639      	mov	r1, r7
   2f836:	4628      	mov	r0, r5
   2f838:	f7ff fefd 	bl	2f636 <mgmt_streamer_init_writer>
	rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   2f83c:	4629      	mov	r1, r5
   2f83e:	a809      	add	r0, sp, #36	; 0x24
   2f840:	f7ff ff0d 	bl	2f65e <mgmt_ctxt_init>
	if (rc != 0) {
   2f844:	2800      	cmp	r0, #0
   2f846:	d137      	bne.n	2f8b8 <smp_process_request_packet+0x1fc>
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   2f848:	f89d 3004 	ldrb.w	r3, [sp, #4]
	*rsp_hdr = (struct mgmt_hdr) {
   2f84c:	9003      	str	r0, [sp, #12]
		return MGMT_OP_WRITE_RSP;
   2f84e:	f013 0f07 	tst.w	r3, #7
   2f852:	bf0c      	ite	eq
   2f854:	2301      	moveq	r3, #1
   2f856:	2303      	movne	r3, #3
	*rsp_hdr = (struct mgmt_hdr) {
   2f858:	f363 0002 	bfi	r0, r3, #0, #3
   2f85c:	f88d 000c 	strb.w	r0, [sp, #12]
   2f860:	9b02      	ldr	r3, [sp, #8]
   2f862:	9304      	str	r3, [sp, #16]
	rc = smp_write_hdr(streamer, &rsp_hdr);
   2f864:	a903      	add	r1, sp, #12
   2f866:	4628      	mov	r0, r5
   2f868:	f7ff ff1e 	bl	2f6a8 <smp_write_hdr>
	if (rc != 0) {
   2f86c:	bb20      	cbnz	r0, 2f8b8 <smp_process_request_packet+0x1fc>
	rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   2f86e:	f04f 32ff 	mov.w	r2, #4294967295
   2f872:	a905      	add	r1, sp, #20
   2f874:	a809      	add	r0, sp, #36	; 0x24
   2f876:	f001 fb8f 	bl	30f98 <cbor_encoder_create_map>
	if (rc != 0) {
   2f87a:	b9e8      	cbnz	r0, 2f8b8 <smp_process_request_packet+0x1fc>
	rc = mgmt_write_rsp_status(&cbuf, status);
   2f87c:	4621      	mov	r1, r4
   2f87e:	a809      	add	r0, sp, #36	; 0x24
   2f880:	f7f3 fd6e 	bl	23360 <mgmt_write_rsp_status>
	if (rc != 0) {
   2f884:	b9c0      	cbnz	r0, 2f8b8 <smp_process_request_packet+0x1fc>
	rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   2f886:	a905      	add	r1, sp, #20
   2f888:	a809      	add	r0, sp, #36	; 0x24
   2f88a:	f001 fb94 	bl	30fb6 <cbor_encoder_close_container>
	if (rc != 0) {
   2f88e:	b998      	cbnz	r0, 2f8b8 <smp_process_request_packet+0x1fc>
   2f890:	9b09      	ldr	r3, [sp, #36]	; 0x24
	rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   2f892:	685b      	ldr	r3, [r3, #4]
	mgmt_hton_hdr(&rsp_hdr);
   2f894:	a803      	add	r0, sp, #12
	rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   2f896:	3b08      	subs	r3, #8
   2f898:	f8ad 300e 	strh.w	r3, [sp, #14]
	mgmt_hton_hdr(&rsp_hdr);
   2f89c:	f7ff ff02 	bl	2f6a4 <mgmt_hton_hdr>
	rc = smp_write_hdr(streamer, &rsp_hdr);
   2f8a0:	a903      	add	r1, sp, #12
   2f8a2:	4628      	mov	r0, r5
   2f8a4:	f7ff ff00 	bl	2f6a8 <smp_write_hdr>
	if (rc != 0) {
   2f8a8:	4681      	mov	r9, r0
   2f8aa:	b928      	cbnz	r0, 2f8b8 <smp_process_request_packet+0x1fc>
		streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   2f8ac:	4639      	mov	r1, r7
   2f8ae:	692b      	ldr	r3, [r5, #16]
   2f8b0:	686a      	ldr	r2, [r5, #4]
   2f8b2:	4628      	mov	r0, r5
   2f8b4:	4798      	blx	r3
		rsp = NULL;
   2f8b6:	464f      	mov	r7, r9
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   2f8b8:	4641      	mov	r1, r8
   2f8ba:	4628      	mov	r0, r5
   2f8bc:	f7ff fec0 	bl	2f640 <mgmt_streamer_free_buf>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   2f8c0:	4639      	mov	r1, r7
   2f8c2:	4628      	mov	r0, r5
   2f8c4:	f7ff febc 	bl	2f640 <mgmt_streamer_free_buf>
	}

	if (rc != 0 && valid_hdr) {
		smp_on_err(streamer, &req_hdr, req, rsp, rc);

		if (handler_found) {
   2f8c8:	b146      	cbz	r6, 2f8dc <smp_process_request_packet+0x220>
			cmd_done_arg.err = rc;
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2f8ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2f8ce:	f8bd 1008 	ldrh.w	r1, [sp, #8]
			cmd_done_arg.err = rc;
   2f8d2:	9400      	str	r4, [sp, #0]
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2f8d4:	466b      	mov	r3, sp
   2f8d6:	2003      	movs	r0, #3
   2f8d8:	f7f3 fd58 	bl	2338c <mgmt_evt>
	}

	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
	return 0;
}
   2f8dc:	4620      	mov	r0, r4
   2f8de:	b014      	add	sp, #80	; 0x50
   2f8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f8e4:	2601      	movs	r6, #1
   2f8e6:	e79f      	b.n	2f828 <smp_process_request_packet+0x16c>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   2f8e8:	4639      	mov	r1, r7
   2f8ea:	4628      	mov	r0, r5
   2f8ec:	f7ff fea8 	bl	2f640 <mgmt_streamer_free_buf>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   2f8f0:	2100      	movs	r1, #0
   2f8f2:	4628      	mov	r0, r5
   2f8f4:	f7ff fea4 	bl	2f640 <mgmt_streamer_free_buf>
	return 0;
   2f8f8:	2400      	movs	r4, #0
   2f8fa:	e7ef      	b.n	2f8dc <smp_process_request_packet+0x220>

0002f8fc <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   2f8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f900:	4604      	mov	r4, r0
   2f902:	460e      	mov	r6, r1
	int off;
	int len;

	/* First, calculate the length of the resulting string. */
	copy = val;
	for (len = 0; copy != 0; len++) {
   2f904:	2500      	movs	r5, #0
	copy = val;
   2f906:	4601      	mov	r1, r0
		copy /= 10;
   2f908:	200a      	movs	r0, #10
	for (len = 0; copy != 0; len++) {
   2f90a:	bb19      	cbnz	r1, 2f954 <ull_to_s+0x58>
	}

	/* A value of 0 still requires one character ("0"). */
	if (len == 0) {
		len = 1;
   2f90c:	2d00      	cmp	r5, #0
   2f90e:	bf08      	it	eq
   2f910:	2501      	moveq	r5, #1
	}

	/* Ensure the buffer can accommodate the string and terminator. */
	if (len >= dst_max_len - 1) {
   2f912:	3a01      	subs	r2, #1
   2f914:	42aa      	cmp	r2, r5
   2f916:	dd21      	ble.n	2f95c <ull_to_s+0x60>
		return -1;
	}

	/* Encode the string from right to left. */
	off = len;
	dst[off--] = '\0';
   2f918:	5559      	strb	r1, [r3, r5]
   2f91a:	195f      	adds	r7, r3, r5
	do {
		digit = val % 10;
   2f91c:	4620      	mov	r0, r4
   2f91e:	4631      	mov	r1, r6
   2f920:	220a      	movs	r2, #10
   2f922:	2300      	movs	r3, #0
   2f924:	f7dd f92a 	bl	cb7c <__aeabi_uldivmod>
		dst[off--] = '0' + digit;
   2f928:	3230      	adds	r2, #48	; 0x30
   2f92a:	f807 2d01 	strb.w	r2, [r7, #-1]!

		val /= 10;
   2f92e:	4620      	mov	r0, r4
   2f930:	4631      	mov	r1, r6
   2f932:	220a      	movs	r2, #10
   2f934:	2300      	movs	r3, #0
   2f936:	f7dd f921 	bl	cb7c <__aeabi_uldivmod>
   2f93a:	46b1      	mov	r9, r6
   2f93c:	46a0      	mov	r8, r4
	} while (val > 0);
   2f93e:	f1b9 0f00 	cmp.w	r9, #0
   2f942:	bf08      	it	eq
   2f944:	f1b8 0f0a 	cmpeq.w	r8, #10
		val /= 10;
   2f948:	4604      	mov	r4, r0
   2f94a:	460e      	mov	r6, r1
	} while (val > 0);
   2f94c:	d2e6      	bcs.n	2f91c <ull_to_s+0x20>

	return len;
}
   2f94e:	4628      	mov	r0, r5
   2f950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (len = 0; copy != 0; len++) {
   2f954:	3501      	adds	r5, #1
		copy /= 10;
   2f956:	fbb1 f1f0 	udiv	r1, r1, r0
	for (len = 0; copy != 0; len++) {
   2f95a:	e7d6      	b.n	2f90a <ull_to_s+0xe>
		return -1;
   2f95c:	f04f 35ff 	mov.w	r5, #4294967295
   2f960:	e7f5      	b.n	2f94e <ull_to_s+0x52>

0002f962 <mcuboot_swap_type_multi>:
	return 0;
}

int mcuboot_swap_type_multi(int image_index)
{
	return boot_swap_type_multi(image_index);
   2f962:	f7f6 ba9f 	b.w	25ea4 <boot_swap_type_multi>

0002f966 <boot_request_upgrade_multi>:
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}

int boot_request_upgrade_multi(int image_index, int permanent)
{
   2f966:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_pending_multi(image_index, permanent);
   2f968:	f001 f869 	bl	30a3e <boot_set_pending_multi>
	if (rc) {
   2f96c:	2800      	cmp	r0, #0
		return -EFAULT;
	}
	return 0;
}
   2f96e:	bf18      	it	ne
   2f970:	f06f 000d 	mvnne.w	r0, #13
   2f974:	bd08      	pop	{r3, pc}

0002f976 <boot_write_img_confirmed>:

	return flag_val == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   2f976:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   2f978:	f001 f8c1 	bl	30afe <boot_set_confirmed>
	if (rc) {
   2f97c:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   2f97e:	bf18      	it	ne
   2f980:	f06f 0004 	mvnne.w	r0, #4
   2f984:	bd08      	pop	{r3, pc}

0002f986 <boot_erase_img_bank>:

	return 0;
}

int boot_erase_img_bank(uint8_t area_id)
{
   2f986:	b513      	push	{r0, r1, r4, lr}
	const struct flash_area *fa;
	int rc;

	rc = flash_area_open(area_id, &fa);
   2f988:	a901      	add	r1, sp, #4
   2f98a:	f7ee fb1d 	bl	1dfc8 <flash_area_open>
	if (rc) {
   2f98e:	4604      	mov	r4, r0
   2f990:	b940      	cbnz	r0, 2f9a4 <boot_erase_img_bank+0x1e>
		return rc;
	}

	rc = flash_area_erase(fa, 0, fa->fa_size);
   2f992:	9801      	ldr	r0, [sp, #4]
   2f994:	4621      	mov	r1, r4
   2f996:	6882      	ldr	r2, [r0, #8]
   2f998:	f7fc fdfe 	bl	2c598 <flash_area_erase>
   2f99c:	4604      	mov	r4, r0

	flash_area_close(fa);
   2f99e:	9801      	ldr	r0, [sp, #4]
   2f9a0:	f7fc fdaa 	bl	2c4f8 <flash_area_close>

	return rc;
}
   2f9a4:	4620      	mov	r0, r4
   2f9a6:	b002      	add	sp, #8
   2f9a8:	bd10      	pop	{r4, pc}

0002f9aa <fixed_data_unref>:
}
   2f9aa:	4770      	bx	lr

0002f9ac <net_buf_reset>:
	buf->len  = 0U;
   2f9ac:	2300      	movs	r3, #0
   2f9ae:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   2f9b0:	6903      	ldr	r3, [r0, #16]
   2f9b2:	6083      	str	r3, [r0, #8]
}
   2f9b4:	4770      	bx	lr

0002f9b6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2f9b6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2f9b8:	6849      	ldr	r1, [r1, #4]
   2f9ba:	6809      	ldr	r1, [r1, #0]
   2f9bc:	f7f3 bd22 	b.w	23404 <net_buf_alloc_len>

0002f9c0 <net_buf_get>:
{
   2f9c0:	b570      	push	{r4, r5, r6, lr}
   2f9c2:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2f9c4:	f7f8 fa28 	bl	27e18 <z_impl_k_queue_get>
	if (!buf) {
   2f9c8:	4605      	mov	r5, r0
   2f9ca:	b128      	cbz	r0, 2f9d8 <net_buf_get+0x18>
   2f9cc:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2f9ce:	7963      	ldrb	r3, [r4, #5]
   2f9d0:	f013 0301 	ands.w	r3, r3, #1
   2f9d4:	d102      	bne.n	2f9dc <net_buf_get+0x1c>
	frag->frags = NULL;
   2f9d6:	6023      	str	r3, [r4, #0]
}
   2f9d8:	4628      	mov	r0, r5
   2f9da:	bd70      	pop	{r4, r5, r6, pc}
   2f9dc:	2300      	movs	r3, #0
   2f9de:	2200      	movs	r2, #0
   2f9e0:	4630      	mov	r0, r6
   2f9e2:	f7f8 fa19 	bl	27e18 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2f9e6:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2f9e8:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2f9ea:	f023 0301 	bic.w	r3, r3, #1
   2f9ee:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2f9f0:	4604      	mov	r4, r0
   2f9f2:	e7ec      	b.n	2f9ce <net_buf_get+0xe>

0002f9f4 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2f9f4:	6883      	ldr	r3, [r0, #8]
   2f9f6:	440b      	add	r3, r1
   2f9f8:	6003      	str	r3, [r0, #0]
}
   2f9fa:	4770      	bx	lr

0002f9fc <net_buf_put>:
{
   2f9fc:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2f9fe:	460a      	mov	r2, r1
   2fa00:	6814      	ldr	r4, [r2, #0]
   2fa02:	b914      	cbnz	r4, 2fa0a <net_buf_put+0xe>
}
   2fa04:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2fa06:	f001 bee8 	b.w	317da <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2fa0a:	7953      	ldrb	r3, [r2, #5]
   2fa0c:	f043 0301 	orr.w	r3, r3, #1
   2fa10:	7153      	strb	r3, [r2, #5]
   2fa12:	4622      	mov	r2, r4
   2fa14:	e7f4      	b.n	2fa00 <net_buf_put+0x4>

0002fa16 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2fa16:	7902      	ldrb	r2, [r0, #4]
   2fa18:	3201      	adds	r2, #1
   2fa1a:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2fa1c:	4770      	bx	lr

0002fa1e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2fa1e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2fa20:	4618      	mov	r0, r3
   2fa22:	681b      	ldr	r3, [r3, #0]
   2fa24:	2b00      	cmp	r3, #0
   2fa26:	d1fb      	bne.n	2fa20 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2fa28:	4770      	bx	lr

0002fa2a <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2fa2a:	6802      	ldr	r2, [r0, #0]
{
   2fa2c:	b510      	push	{r4, lr}
	if (parent->frags) {
   2fa2e:	b12a      	cbz	r2, 2fa3c <net_buf_frag_insert+0x12>
   2fa30:	460b      	mov	r3, r1
	while (buf->frags) {
   2fa32:	461c      	mov	r4, r3
   2fa34:	681b      	ldr	r3, [r3, #0]
   2fa36:	2b00      	cmp	r3, #0
   2fa38:	d1fb      	bne.n	2fa32 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2fa3a:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2fa3c:	6001      	str	r1, [r0, #0]
}
   2fa3e:	bd10      	pop	{r4, pc}

0002fa40 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2fa40:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2fa42:	4604      	mov	r4, r0
   2fa44:	b920      	cbnz	r0, 2fa50 <net_buf_frag_add+0x10>
	buf->ref++;
   2fa46:	790b      	ldrb	r3, [r1, #4]
   2fa48:	3301      	adds	r3, #1
   2fa4a:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2fa4c:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2fa4e:	bd10      	pop	{r4, pc}
   2fa50:	4603      	mov	r3, r0
	while (buf->frags) {
   2fa52:	4618      	mov	r0, r3
   2fa54:	681b      	ldr	r3, [r3, #0]
   2fa56:	2b00      	cmp	r3, #0
   2fa58:	d1fb      	bne.n	2fa52 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2fa5a:	f7ff ffe6 	bl	2fa2a <net_buf_frag_insert>
   2fa5e:	4620      	mov	r0, r4
   2fa60:	e7f5      	b.n	2fa4e <net_buf_frag_add+0xe>

0002fa62 <net_buf_simple_add>:
	return buf->data + buf->len;
   2fa62:	8883      	ldrh	r3, [r0, #4]
   2fa64:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2fa66:	4419      	add	r1, r3
   2fa68:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2fa6a:	18d0      	adds	r0, r2, r3
   2fa6c:	4770      	bx	lr

0002fa6e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2fa6e:	b430      	push	{r4, r5}
   2fa70:	8884      	ldrh	r4, [r0, #4]
   2fa72:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2fa74:	18a3      	adds	r3, r4, r2
   2fa76:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2fa78:	1928      	adds	r0, r5, r4
}
   2fa7a:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2fa7c:	f7fd b91d 	b.w	2ccba <memcpy>

0002fa80 <net_buf_simple_add_u8>:
   2fa80:	8883      	ldrh	r3, [r0, #4]
   2fa82:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2fa84:	b510      	push	{r4, lr}
	buf->len += len;
   2fa86:	1c5c      	adds	r4, r3, #1
   2fa88:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2fa8a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2fa8c:	18d0      	adds	r0, r2, r3
   2fa8e:	bd10      	pop	{r4, pc}

0002fa90 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2fa90:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2fa92:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2fa94:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2fa96:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2fa98:	4411      	add	r1, r2
	buf->data -= len;
   2fa9a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2fa9c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2fa9e:	4770      	bx	lr

0002faa0 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2faa0:	8882      	ldrh	r2, [r0, #4]
   2faa2:	1a52      	subs	r2, r2, r1
{
   2faa4:	4603      	mov	r3, r0
	buf->len -= len;
   2faa6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2faa8:	6800      	ldr	r0, [r0, #0]
   2faaa:	4408      	add	r0, r1
   2faac:	6018      	str	r0, [r3, #0]
}
   2faae:	4770      	bx	lr

0002fab0 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2fab0:	4603      	mov	r3, r0
	void *data = buf->data;
   2fab2:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2fab4:	889a      	ldrh	r2, [r3, #4]
   2fab6:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2fab8:	4401      	add	r1, r0
	buf->len -= len;
   2faba:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2fabc:	6019      	str	r1, [r3, #0]

	return data;
}
   2fabe:	4770      	bx	lr

0002fac0 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2fac0:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2fac2:	6803      	ldr	r3, [r0, #0]
   2fac4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2fac6:	2102      	movs	r1, #2
   2fac8:	f7ff ffea 	bl	2faa0 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2facc:	4620      	mov	r0, r4
   2face:	bd10      	pop	{r4, pc}

0002fad0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2fad0:	6802      	ldr	r2, [r0, #0]
   2fad2:	6880      	ldr	r0, [r0, #8]
}
   2fad4:	1a10      	subs	r0, r2, r0
   2fad6:	4770      	bx	lr

0002fad8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2fad8:	8883      	ldrh	r3, [r0, #4]
   2fada:	88c2      	ldrh	r2, [r0, #6]
   2fadc:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2fade:	6803      	ldr	r3, [r0, #0]
   2fae0:	6880      	ldr	r0, [r0, #8]
   2fae2:	1a18      	subs	r0, r3, r0
}
   2fae4:	1a10      	subs	r0, r2, r0
   2fae6:	4770      	bx	lr

0002fae8 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2fae8:	f1a0 0308 	sub.w	r3, r0, #8
   2faec:	f3bf 8f5b 	dmb	ish
   2faf0:	e853 2f00 	ldrex	r2, [r3]
   2faf4:	1c51      	adds	r1, r2, #1
   2faf6:	e843 1c00 	strex	ip, r1, [r3]
   2fafa:	f1bc 0f00 	cmp.w	ip, #0
   2fafe:	d1f7      	bne.n	2faf0 <adc_context_on_timer_expired+0x8>
   2fb00:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2fb04:	b91a      	cbnz	r2, 2fb0e <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   2fb06:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   2fb0a:	f7f3 bd3d 	b.w	23588 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   2fb0e:	f06f 030f 	mvn.w	r3, #15
   2fb12:	6683      	str	r3, [r0, #104]	; 0x68
}
   2fb14:	4770      	bx	lr

0002fb16 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2fb16:	6902      	ldr	r2, [r0, #16]
   2fb18:	b2cb      	uxtb	r3, r1
   2fb1a:	210c      	movs	r1, #12
   2fb1c:	fb03 2101 	mla	r1, r3, r1, r2
   2fb20:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   2fb22:	f000 0007 	and.w	r0, r0, #7
   2fb26:	4770      	bx	lr

0002fb28 <set_off_state>:
	__asm__ volatile(
   2fb28:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fb2c:	f3ef 8211 	mrs	r2, BASEPRI
   2fb30:	f383 8812 	msr	BASEPRI_MAX, r3
   2fb34:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2fb38:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2fb3a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2fb3e:	d001      	beq.n	2fb44 <set_off_state+0x1c>
   2fb40:	428b      	cmp	r3, r1
   2fb42:	d107      	bne.n	2fb54 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2fb44:	2301      	movs	r3, #1
   2fb46:	6003      	str	r3, [r0, #0]
	int err = 0;
   2fb48:	2000      	movs	r0, #0
	__asm__ volatile(
   2fb4a:	f382 8811 	msr	BASEPRI, r2
   2fb4e:	f3bf 8f6f 	isb	sy
}
   2fb52:	4770      	bx	lr
		err = -EPERM;
   2fb54:	f04f 30ff 	mov.w	r0, #4294967295
   2fb58:	e7f7      	b.n	2fb4a <set_off_state+0x22>

0002fb5a <set_starting_state>:
{
   2fb5a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2fb5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fb60:	f3ef 8211 	mrs	r2, BASEPRI
   2fb64:	f383 8812 	msr	BASEPRI_MAX, r3
   2fb68:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2fb6c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2fb6e:	f003 0407 	and.w	r4, r3, #7
   2fb72:	2c01      	cmp	r4, #1
   2fb74:	d106      	bne.n	2fb84 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2fb76:	6001      	str	r1, [r0, #0]
	int err = 0;
   2fb78:	2000      	movs	r0, #0
	__asm__ volatile(
   2fb7a:	f382 8811 	msr	BASEPRI, r2
   2fb7e:	f3bf 8f6f 	isb	sy
}
   2fb82:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2fb84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2fb88:	428b      	cmp	r3, r1
		err = -EALREADY;
   2fb8a:	bf14      	ite	ne
   2fb8c:	f04f 30ff 	movne.w	r0, #4294967295
   2fb90:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2fb94:	e7f1      	b.n	2fb7a <set_starting_state+0x20>

0002fb96 <set_on_state>:
	__asm__ volatile(
   2fb96:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fb9a:	f3ef 8211 	mrs	r2, BASEPRI
   2fb9e:	f383 8812 	msr	BASEPRI_MAX, r3
   2fba2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2fba6:	6803      	ldr	r3, [r0, #0]
   2fba8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2fbac:	f043 0302 	orr.w	r3, r3, #2
   2fbb0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2fbb2:	f382 8811 	msr	BASEPRI, r2
   2fbb6:	f3bf 8f6f 	isb	sy
}
   2fbba:	4770      	bx	lr

0002fbbc <onoff_started_callback>:
	return &data->mgr[type];
   2fbbc:	6900      	ldr	r0, [r0, #16]
{
   2fbbe:	b410      	push	{r4}
	return &data->mgr[type];
   2fbc0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2fbc2:	241c      	movs	r4, #28
   2fbc4:	fb03 0004 	mla	r0, r3, r4, r0
   2fbc8:	2100      	movs	r1, #0
}
   2fbca:	bc10      	pop	{r4}
	notify(mgr, 0);
   2fbcc:	4710      	bx	r2

0002fbce <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2fbce:	2000      	movs	r0, #0
   2fbd0:	f7f6 b898 	b.w	25d04 <nrfx_clock_start>

0002fbd4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2fbd4:	2000      	movs	r0, #0
   2fbd6:	f000 be75 	b.w	308c4 <nrfx_clock_stop>

0002fbda <blocking_start_callback>:
{
   2fbda:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2fbdc:	f7f8 b950 	b.w	27e80 <z_impl_k_sem_give>

0002fbe0 <api_stop>:
{
   2fbe0:	b538      	push	{r3, r4, r5, lr}
   2fbe2:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   2fbe4:	230c      	movs	r3, #12
{
   2fbe6:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   2fbe8:	4363      	muls	r3, r4
   2fbea:	6900      	ldr	r0, [r0, #16]
   2fbec:	3340      	adds	r3, #64	; 0x40
   2fbee:	2180      	movs	r1, #128	; 0x80
   2fbf0:	4418      	add	r0, r3
   2fbf2:	f7ff ff99 	bl	2fb28 <set_off_state>
	if (err < 0) {
   2fbf6:	2800      	cmp	r0, #0
   2fbf8:	db05      	blt.n	2fc06 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   2fbfa:	6869      	ldr	r1, [r5, #4]
   2fbfc:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   2fc00:	6863      	ldr	r3, [r4, #4]
   2fc02:	4798      	blx	r3
	return 0;
   2fc04:	2000      	movs	r0, #0
}
   2fc06:	bd38      	pop	{r3, r4, r5, pc}

0002fc08 <api_start>:
{
   2fc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fc0c:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   2fc0e:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2fc10:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   2fc12:	436f      	muls	r7, r5
{
   2fc14:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2fc16:	f107 0040 	add.w	r0, r7, #64	; 0x40
   2fc1a:	2180      	movs	r1, #128	; 0x80
   2fc1c:	4420      	add	r0, r4
{
   2fc1e:	4690      	mov	r8, r2
   2fc20:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   2fc22:	f7ff ff9a 	bl	2fb5a <set_starting_state>
	if (err < 0) {
   2fc26:	2800      	cmp	r0, #0
   2fc28:	db07      	blt.n	2fc3a <api_start+0x32>
	subdata->cb = cb;
   2fc2a:	443c      	add	r4, r7
	subdata->user_data = user_data;
   2fc2c:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2fc30:	6873      	ldr	r3, [r6, #4]
   2fc32:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   2fc36:	4798      	blx	r3
	return 0;
   2fc38:	2000      	movs	r0, #0
}
   2fc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002fc3e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fc3e:	6843      	ldr	r3, [r0, #4]
   2fc40:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2fc42:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2fc46:	600b      	str	r3, [r1, #0]
}
   2fc48:	2000      	movs	r0, #0
   2fc4a:	4770      	bx	lr

0002fc4c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fc4c:	6843      	ldr	r3, [r0, #4]
   2fc4e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2fc50:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2fc54:	4042      	eors	r2, r0
   2fc56:	400a      	ands	r2, r1
   2fc58:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2fc5a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2fc5e:	2000      	movs	r0, #0
   2fc60:	4770      	bx	lr

0002fc62 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fc62:	6843      	ldr	r3, [r0, #4]
   2fc64:	685b      	ldr	r3, [r3, #4]
}
   2fc66:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2fc68:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2fc6c:	4770      	bx	lr

0002fc6e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fc6e:	6843      	ldr	r3, [r0, #4]
   2fc70:	685b      	ldr	r3, [r3, #4]
}
   2fc72:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2fc74:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2fc78:	4770      	bx	lr

0002fc7a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fc7a:	6843      	ldr	r3, [r0, #4]
   2fc7c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2fc7e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2fc82:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2fc84:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2fc88:	2000      	movs	r0, #0
   2fc8a:	4770      	bx	lr

0002fc8c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2fc8c:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   2fc8e:	6858      	ldr	r0, [r3, #4]
{
   2fc90:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2fc92:	b158      	cbz	r0, 2fcac <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2fc94:	2400      	movs	r4, #0
   2fc96:	4281      	cmp	r1, r0
   2fc98:	d113      	bne.n	2fcc2 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2fc9a:	6808      	ldr	r0, [r1, #0]
   2fc9c:	b95c      	cbnz	r4, 2fcb6 <gpio_nrfx_manage_callback+0x2a>
   2fc9e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   2fca0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2fca2:	42a1      	cmp	r1, r4
   2fca4:	d100      	bne.n	2fca8 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2fca6:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2fca8:	2000      	movs	r0, #0
   2fcaa:	6008      	str	r0, [r1, #0]
	if (set) {
   2fcac:	b972      	cbnz	r2, 2fccc <gpio_nrfx_manage_callback+0x40>
	return 0;
   2fcae:	2000      	movs	r0, #0
}
   2fcb0:	bd30      	pop	{r4, r5, pc}
   2fcb2:	4628      	mov	r0, r5
   2fcb4:	e7ef      	b.n	2fc96 <gpio_nrfx_manage_callback+0xa>
   2fcb6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2fcb8:	6898      	ldr	r0, [r3, #8]
   2fcba:	4281      	cmp	r1, r0
	list->tail = node;
   2fcbc:	bf08      	it	eq
   2fcbe:	609c      	streq	r4, [r3, #8]
}
   2fcc0:	e7f2      	b.n	2fca8 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2fcc2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2fcc4:	4604      	mov	r4, r0
   2fcc6:	2d00      	cmp	r5, #0
   2fcc8:	d1f3      	bne.n	2fcb2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2fcca:	b13a      	cbz	r2, 2fcdc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2fccc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2fcce:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2fcd0:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   2fcd2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2fcd4:	2800      	cmp	r0, #0
   2fcd6:	d1ea      	bne.n	2fcae <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2fcd8:	6099      	str	r1, [r3, #8]
}
   2fcda:	e7e9      	b.n	2fcb0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2fcdc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2fce0:	e7e6      	b.n	2fcb0 <gpio_nrfx_manage_callback+0x24>

0002fce2 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   2fce2:	07ca      	lsls	r2, r1, #31
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
   2fce4:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   2fce6:	d405      	bmi.n	2fcf4 <i2c_nrfx_twi_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
   2fce8:	f3c1 0242 	ubfx	r2, r1, #1, #3
   2fcec:	2a01      	cmp	r2, #1
   2fcee:	d004      	beq.n	2fcfa <i2c_nrfx_twi_configure+0x18>
   2fcf0:	2a02      	cmp	r2, #2
   2fcf2:	d00b      	beq.n	2fd0c <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
   2fcf4:	f06f 0015 	mvn.w	r0, #21
}
   2fcf8:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   2fcfa:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   2fcfc:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   2fd00:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   2fd04:	6903      	ldr	r3, [r0, #16]
	return 0;
   2fd06:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   2fd08:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   2fd0a:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   2fd0c:	681b      	ldr	r3, [r3, #0]
   2fd0e:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   2fd12:	e7f5      	b.n	2fd00 <i2c_nrfx_twi_configure+0x1e>

0002fd14 <bme280_reg_read.isra.0>:
static inline int bme280_reg_read(const struct device *dev,
   2fd14:	b410      	push	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
   2fd16:	6904      	ldr	r4, [r0, #16]
   2fd18:	6864      	ldr	r4, [r4, #4]
   2fd1a:	46a4      	mov	ip, r4
}
   2fd1c:	bc10      	pop	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
   2fd1e:	4760      	bx	ip

0002fd20 <bme280_reg_write.isra.0>:
	return cfg->bus_io->write(&cfg->bus, reg, val);
   2fd20:	6903      	ldr	r3, [r0, #16]
   2fd22:	689b      	ldr	r3, [r3, #8]
   2fd24:	4718      	bx	r3

0002fd26 <bme280_wait_until_ready>:
{
   2fd26:	b513      	push	{r0, r1, r4, lr}
	uint8_t status = 0;
   2fd28:	2300      	movs	r3, #0
{
   2fd2a:	4604      	mov	r4, r0
	uint8_t status = 0;
   2fd2c:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_sleep(timeout);
   2fd30:	2100      	movs	r1, #0
   2fd32:	2063      	movs	r0, #99	; 0x63
   2fd34:	f7f8 fdca 	bl	288cc <z_impl_k_sleep>
		ret = bme280_reg_read(dev, BME280_REG_STATUS, &status, 1);
   2fd38:	6860      	ldr	r0, [r4, #4]
   2fd3a:	2301      	movs	r3, #1
   2fd3c:	f10d 0207 	add.w	r2, sp, #7
   2fd40:	21f3      	movs	r1, #243	; 0xf3
   2fd42:	f7ff ffe7 	bl	2fd14 <bme280_reg_read.isra.0>
		if (ret < 0) {
   2fd46:	2800      	cmp	r0, #0
   2fd48:	db04      	blt.n	2fd54 <bme280_wait_until_ready+0x2e>
	} while (status & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE));
   2fd4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2fd4e:	f013 0009 	ands.w	r0, r3, #9
   2fd52:	d1ed      	bne.n	2fd30 <bme280_wait_until_ready+0xa>
}
   2fd54:	b002      	add	sp, #8
   2fd56:	bd10      	pop	{r4, pc}

0002fd58 <bme280_chip_init>:

	return 0;
}

static int bme280_chip_init(const struct device *dev)
{
   2fd58:	b570      	push	{r4, r5, r6, lr}
	struct bme280_data *data = to_data(dev);
   2fd5a:	6905      	ldr	r5, [r0, #16]
{
   2fd5c:	4604      	mov	r4, r0
	int err;

	err = bme280_bus_check(dev);
   2fd5e:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->check(&cfg->bus);
   2fd60:	6903      	ldr	r3, [r0, #16]
{
   2fd62:	b088      	sub	sp, #32
	return cfg->bus_io->check(&cfg->bus);
   2fd64:	681b      	ldr	r3, [r3, #0]
   2fd66:	4798      	blx	r3
	if (err < 0) {
   2fd68:	2800      	cmp	r0, #0
   2fd6a:	f2c0 808c 	blt.w	2fe86 <bme280_chip_init+0x12e>
		LOG_DBG("bus check failed: %d", err);
		return err;
	}

	err = bme280_reg_read(dev, BME280_REG_ID, &data->chip_id, 1);
   2fd6e:	6860      	ldr	r0, [r4, #4]
   2fd70:	2301      	movs	r3, #1
   2fd72:	f105 0234 	add.w	r2, r5, #52	; 0x34
   2fd76:	21d0      	movs	r1, #208	; 0xd0
   2fd78:	f7ff ffcc 	bl	2fd14 <bme280_reg_read.isra.0>
	if (err < 0) {
   2fd7c:	2800      	cmp	r0, #0
   2fd7e:	f2c0 8082 	blt.w	2fe86 <bme280_chip_init+0x12e>
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
		LOG_DBG("ID OK");
	} else if (data->chip_id == BMP280_CHIP_ID_MP ||
   2fd82:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   2fd86:	3b56      	subs	r3, #86	; 0x56
   2fd88:	b2db      	uxtb	r3, r3
   2fd8a:	2b0a      	cmp	r3, #10
   2fd8c:	f200 8092 	bhi.w	2feb4 <bme280_chip_init+0x15c>
   2fd90:	f240 4205 	movw	r2, #1029	; 0x405
   2fd94:	fa22 f303 	lsr.w	r3, r2, r3
   2fd98:	07db      	lsls	r3, r3, #31
   2fd9a:	f140 808b 	bpl.w	2feb4 <bme280_chip_init+0x15c>
	} else {
		LOG_DBG("bad chip id 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme280_reg_write(dev, BME280_REG_RESET, BME280_CMD_SOFT_RESET);
   2fd9e:	22b6      	movs	r2, #182	; 0xb6
   2fda0:	21e0      	movs	r1, #224	; 0xe0
   2fda2:	6860      	ldr	r0, [r4, #4]
   2fda4:	f7ff ffbc 	bl	2fd20 <bme280_reg_write.isra.0>
	if (err < 0) {
		LOG_DBG("Soft-reset failed: %d", err);
	}

	err = bme280_wait_until_ready(dev);
   2fda8:	4620      	mov	r0, r4
   2fdaa:	f7ff ffbc 	bl	2fd26 <bme280_wait_until_ready>
	if (err < 0) {
   2fdae:	2800      	cmp	r0, #0
   2fdb0:	db69      	blt.n	2fe86 <bme280_chip_init+0x12e>
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
   2fdb2:	6860      	ldr	r0, [r4, #4]
	struct bme280_data *data = to_data(dev);
   2fdb4:	6926      	ldr	r6, [r4, #16]
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
   2fdb6:	2318      	movs	r3, #24
   2fdb8:	aa02      	add	r2, sp, #8
   2fdba:	2188      	movs	r1, #136	; 0x88
   2fdbc:	f7ff ffaa 	bl	2fd14 <bme280_reg_read.isra.0>
	if (err < 0) {
   2fdc0:	2800      	cmp	r0, #0
   2fdc2:	db60      	blt.n	2fe86 <bme280_chip_init+0x12e>
	data->dig_t1 = sys_le16_to_cpu(buf[0]);
   2fdc4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2fdc8:	8033      	strh	r3, [r6, #0]
	data->dig_t2 = sys_le16_to_cpu(buf[1]);
   2fdca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2fdce:	8073      	strh	r3, [r6, #2]
	data->dig_t3 = sys_le16_to_cpu(buf[2]);
   2fdd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2fdd4:	80b3      	strh	r3, [r6, #4]
	data->dig_p1 = sys_le16_to_cpu(buf[3]);
   2fdd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2fdda:	80f3      	strh	r3, [r6, #6]
	data->dig_p2 = sys_le16_to_cpu(buf[4]);
   2fddc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2fde0:	8133      	strh	r3, [r6, #8]
	data->dig_p3 = sys_le16_to_cpu(buf[5]);
   2fde2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2fde6:	8173      	strh	r3, [r6, #10]
	data->dig_p4 = sys_le16_to_cpu(buf[6]);
   2fde8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2fdec:	81b3      	strh	r3, [r6, #12]
	data->dig_p5 = sys_le16_to_cpu(buf[7]);
   2fdee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2fdf2:	81f3      	strh	r3, [r6, #14]
	data->dig_p6 = sys_le16_to_cpu(buf[8]);
   2fdf4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2fdf8:	8233      	strh	r3, [r6, #16]
	data->dig_p7 = sys_le16_to_cpu(buf[9]);
   2fdfa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2fdfe:	8273      	strh	r3, [r6, #18]
	data->dig_p8 = sys_le16_to_cpu(buf[10]);
   2fe00:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2fe04:	82b3      	strh	r3, [r6, #20]
	data->dig_p9 = sys_le16_to_cpu(buf[11]);
   2fe06:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2fe0a:	82f3      	strh	r3, [r6, #22]
	if (data->chip_id == BME280_CHIP_ID) {
   2fe0c:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
   2fe10:	2b60      	cmp	r3, #96	; 0x60
   2fe12:	d12d      	bne.n	2fe70 <bme280_chip_init+0x118>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART1,
   2fe14:	6860      	ldr	r0, [r4, #4]
   2fe16:	2301      	movs	r3, #1
   2fe18:	f106 0218 	add.w	r2, r6, #24
   2fe1c:	21a1      	movs	r1, #161	; 0xa1
   2fe1e:	f7ff ff79 	bl	2fd14 <bme280_reg_read.isra.0>
		if (err < 0) {
   2fe22:	2800      	cmp	r0, #0
   2fe24:	db2f      	blt.n	2fe86 <bme280_chip_init+0x12e>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART2, hbuf, 7);
   2fe26:	6860      	ldr	r0, [r4, #4]
   2fe28:	2307      	movs	r3, #7
   2fe2a:	466a      	mov	r2, sp
   2fe2c:	21e1      	movs	r1, #225	; 0xe1
   2fe2e:	f7ff ff71 	bl	2fd14 <bme280_reg_read.isra.0>
		if (err < 0) {
   2fe32:	2800      	cmp	r0, #0
   2fe34:	db27      	blt.n	2fe86 <bme280_chip_init+0x12e>
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
   2fe36:	f89d 2001 	ldrb.w	r2, [sp, #1]
   2fe3a:	f89d 3000 	ldrb.w	r3, [sp]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
   2fe3e:	f89d 1003 	ldrb.w	r1, [sp, #3]
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
   2fe42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2fe46:	8373      	strh	r3, [r6, #26]
		data->dig_h3 = hbuf[2];
   2fe48:	f89d 3002 	ldrb.w	r3, [sp, #2]
   2fe4c:	7733      	strb	r3, [r6, #28]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
   2fe4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2fe52:	f003 020f 	and.w	r2, r3, #15
   2fe56:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   2fe5a:	83f2      	strh	r2, [r6, #30]
		data->dig_h5 = ((hbuf[4] >> 4) & 0x0F) | (hbuf[5] << 4);
   2fe5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   2fe60:	091b      	lsrs	r3, r3, #4
   2fe62:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   2fe66:	8433      	strh	r3, [r6, #32]
		data->dig_h6 = hbuf[6];
   2fe68:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2fe6c:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	err = bme280_read_compensation(dev);
	if (err < 0) {
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
   2fe70:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   2fe74:	2b60      	cmp	r3, #96	; 0x60
   2fe76:	d008      	beq.n	2fe8a <bme280_chip_init+0x132>
			LOG_DBG("CTRL_HUM write failed: %d", err);
			return err;
		}
	}

	err = bme280_reg_write(dev, BME280_REG_CTRL_MEAS,
   2fe78:	6860      	ldr	r0, [r4, #4]
   2fe7a:	2255      	movs	r2, #85	; 0x55
   2fe7c:	21f4      	movs	r1, #244	; 0xf4
   2fe7e:	f7ff ff4f 	bl	2fd20 <bme280_reg_write.isra.0>
			       BME280_CTRL_MEAS_VAL);
	if (err < 0) {
   2fe82:	2800      	cmp	r0, #0
   2fe84:	da09      	bge.n	2fe9a <bme280_chip_init+0x142>
	/* Wait for the sensor to be ready */
	k_sleep(K_MSEC(1));

	LOG_DBG("\"%s\" OK", dev->name);
	return 0;
}
   2fe86:	b008      	add	sp, #32
   2fe88:	bd70      	pop	{r4, r5, r6, pc}
		err = bme280_reg_write(dev, BME280_REG_CTRL_HUM,
   2fe8a:	6860      	ldr	r0, [r4, #4]
   2fe8c:	2202      	movs	r2, #2
   2fe8e:	21f2      	movs	r1, #242	; 0xf2
   2fe90:	f7ff ff46 	bl	2fd20 <bme280_reg_write.isra.0>
		if (err < 0) {
   2fe94:	2800      	cmp	r0, #0
   2fe96:	daef      	bge.n	2fe78 <bme280_chip_init+0x120>
   2fe98:	e7f5      	b.n	2fe86 <bme280_chip_init+0x12e>
	err = bme280_reg_write(dev, BME280_REG_CONFIG,
   2fe9a:	6860      	ldr	r0, [r4, #4]
   2fe9c:	22a8      	movs	r2, #168	; 0xa8
   2fe9e:	21f5      	movs	r1, #245	; 0xf5
   2fea0:	f7ff ff3e 	bl	2fd20 <bme280_reg_write.isra.0>
	if (err < 0) {
   2fea4:	2800      	cmp	r0, #0
   2fea6:	dbee      	blt.n	2fe86 <bme280_chip_init+0x12e>
   2fea8:	2021      	movs	r0, #33	; 0x21
   2feaa:	2100      	movs	r1, #0
   2feac:	f7f8 fd0e 	bl	288cc <z_impl_k_sleep>
	return 0;
   2feb0:	2000      	movs	r0, #0
   2feb2:	e7e8      	b.n	2fe86 <bme280_chip_init+0x12e>
		return -ENOTSUP;
   2feb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2feb8:	e7e5      	b.n	2fe86 <bme280_chip_init+0x12e>

0002feba <bme280_pm_action>:
static int bme280_pm_action(const struct device *dev,
			    enum pm_device_action action)
{
	int ret = 0;

	switch (action) {
   2feba:	b119      	cbz	r1, 2fec4 <bme280_pm_action+0xa>
   2febc:	2901      	cmp	r1, #1
   2febe:	d106      	bne.n	2fece <bme280_pm_action+0x14>
	case PM_DEVICE_ACTION_RESUME:
		/* Re-initialize the chip */
		ret = bme280_chip_init(dev);
   2fec0:	f7ff bf4a 	b.w	2fd58 <bme280_chip_init>
		break;
	case PM_DEVICE_ACTION_SUSPEND:
		/* Put the chip into sleep mode */
		ret = bme280_reg_write(dev,
   2fec4:	6840      	ldr	r0, [r0, #4]
   2fec6:	2254      	movs	r2, #84	; 0x54
   2fec8:	21f4      	movs	r1, #244	; 0xf4
   2feca:	f7ff bf29 	b.w	2fd20 <bme280_reg_write.isra.0>
	default:
		return -ENOTSUP;
	}

	return ret;
}
   2fece:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fed2:	4770      	bx	lr

0002fed4 <bme280_sample_fetch>:
{
   2fed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fed8:	b087      	sub	sp, #28
	(void)pm_device_state_get(dev, &state);
   2feda:	f10d 010f 	add.w	r1, sp, #15
	struct bme280_data *data = to_data(dev);
   2fede:	6905      	ldr	r5, [r0, #16]
{
   2fee0:	4604      	mov	r4, r0
	(void)pm_device_state_get(dev, &state);
   2fee2:	f7fc fc57 	bl	2c794 <pm_device_state_get>
	if (state == PM_DEVICE_STATE_SUSPENDED)
   2fee6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2feea:	2b01      	cmp	r3, #1
   2feec:	f000 8145 	beq.w	3017a <bme280_sample_fetch+0x2a6>
	ret = bme280_reg_write(dev, BME280_REG_CTRL_MEAS, BME280_CTRL_MEAS_VAL);
   2fef0:	6860      	ldr	r0, [r4, #4]
   2fef2:	2255      	movs	r2, #85	; 0x55
   2fef4:	21f4      	movs	r1, #244	; 0xf4
   2fef6:	f7ff ff13 	bl	2fd20 <bme280_reg_write.isra.0>
	if (ret < 0) {
   2fefa:	2800      	cmp	r0, #0
   2fefc:	f2c0 813f 	blt.w	3017e <bme280_sample_fetch+0x2aa>
	ret = bme280_wait_until_ready(dev);
   2ff00:	4620      	mov	r0, r4
   2ff02:	f7ff ff10 	bl	2fd26 <bme280_wait_until_ready>
	if (ret < 0) {
   2ff06:	2800      	cmp	r0, #0
   2ff08:	f2c0 8139 	blt.w	3017e <bme280_sample_fetch+0x2aa>
	if (data->chip_id == BME280_CHIP_ID) {
   2ff0c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
   2ff10:	6860      	ldr	r0, [r4, #4]
	if (data->chip_id == BME280_CHIP_ID) {
   2ff12:	2b60      	cmp	r3, #96	; 0x60
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
   2ff14:	bf14      	ite	ne
   2ff16:	2306      	movne	r3, #6
   2ff18:	2308      	moveq	r3, #8
   2ff1a:	aa04      	add	r2, sp, #16
   2ff1c:	21f7      	movs	r1, #247	; 0xf7
   2ff1e:	f7ff fef9 	bl	2fd14 <bme280_reg_read.isra.0>
	if (ret < 0) {
   2ff22:	2800      	cmp	r0, #0
   2ff24:	f2c0 812b 	blt.w	3017e <bme280_sample_fetch+0x2aa>
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   2ff28:	f89d 3010 	ldrb.w	r3, [sp, #16]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   2ff2c:	f89d 2013 	ldrb.w	r2, [sp, #19]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   2ff30:	f89d 9011 	ldrb.w	r9, [sp, #17]
   2ff34:	f89d 8012 	ldrb.w	r8, [sp, #18]
   2ff38:	461e      	mov	r6, r3
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   2ff3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2ff3e:	011b      	lsls	r3, r3, #4
   2ff40:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   2ff44:	f89d 2015 	ldrb.w	r2, [sp, #21]
   2ff48:	ea43 1412 	orr.w	r4, r3, r2, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   2ff4c:	882a      	ldrh	r2, [r5, #0]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   2ff4e:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   2ff52:	0052      	lsls	r2, r2, #1
   2ff54:	ebc2 02d4 	rsb	r2, r2, r4, lsr #3
		((int32_t)data->dig_t2)) >> 11;
   2ff58:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   2ff5c:	435b      	muls	r3, r3
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   2ff5e:	4362      	muls	r2, r4
		((int32_t)data->dig_t3)) >> 14;
   2ff60:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
		  ((adc_temp >> 4) - ((int32_t)data->dig_t1))) >> 12) *
   2ff64:	131b      	asrs	r3, r3, #12
   2ff66:	435c      	muls	r4, r3
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   2ff68:	13a4      	asrs	r4, r4, #14
	data->t_fine = var1 + var2;
   2ff6a:	eb04 24e2 	add.w	r4, r4, r2, asr #11
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   2ff6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
	var1 = ((int64_t)data->t_fine) - 128000;
   2ff72:	f5b4 3efa 	subs.w	lr, r4, #128000	; 0x1f400
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   2ff76:	f103 0380 	add.w	r3, r3, #128	; 0x80
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   2ff7a:	fbae 120e 	umull	r1, r2, lr, lr
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   2ff7e:	ea4f 2323 	mov.w	r3, r3, asr #8
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   2ff82:	e9cd 1200 	strd	r1, r2, [sp]
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   2ff86:	626b      	str	r3, [r5, #36]	; 0x24
	var1 = ((int64_t)data->t_fine) - 128000;
   2ff88:	ea4f 73e4 	mov.w	r3, r4, asr #31
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   2ff8c:	9a01      	ldr	r2, [sp, #4]
	data->t_fine = var1 + var2;
   2ff8e:	632c      	str	r4, [r5, #48]	; 0x30
	var1 = ((int64_t)data->t_fine) - 128000;
   2ff90:	f143 3cff 	adc.w	ip, r3, #4294967295
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   2ff94:	fb0e f30c 	mul.w	r3, lr, ip
   2ff98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		((var1 * (int64_t)data->dig_p2) << 12);
   2ff9c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   2ffa0:	9301      	str	r3, [sp, #4]
		((var1 * (int64_t)data->dig_p2) << 12);
   2ffa2:	fb02 f10c 	mul.w	r1, r2, ip
   2ffa6:	17d3      	asrs	r3, r2, #31
   2ffa8:	fb0e 1103 	mla	r1, lr, r3, r1
   2ffac:	fba2 230e 	umull	r2, r3, r2, lr
   2ffb0:	440b      	add	r3, r1
   2ffb2:	0319      	lsls	r1, r3, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   2ffb4:	9f01      	ldr	r7, [sp, #4]
		((var1 * (int64_t)data->dig_p2) << 12);
   2ffb6:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   2ffba:	0310      	lsls	r0, r2, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   2ffbc:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
   2ffc0:	fb02 fa07 	mul.w	sl, r2, r7
   2ffc4:	9f00      	ldr	r7, [sp, #0]
   2ffc6:	17d3      	asrs	r3, r2, #31
   2ffc8:	fb07 aa03 	mla	sl, r7, r3, sl
   2ffcc:	fba2 2307 	umull	r2, r3, r2, r7
   2ffd0:	4453      	add	r3, sl
   2ffd2:	ea4f 2a12 	mov.w	sl, r2, lsr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   2ffd6:	3000      	adds	r0, #0
   2ffd8:	88ea      	ldrh	r2, [r5, #6]
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   2ffda:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   2ffde:	f541 4100 	adc.w	r1, r1, #32768	; 0x8000
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   2ffe2:	ea4f 2b23 	mov.w	fp, r3, asr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   2ffe6:	eb10 000a 	adds.w	r0, r0, sl
   2ffea:	eb41 0b0b 	adc.w	fp, r1, fp
   2ffee:	fba0 0102 	umull	r0, r1, r0, r2
   2fff2:	fb02 110b 	mla	r1, r2, fp, r1
   2fff6:	104a      	asrs	r2, r1, #1
   2fff8:	17cb      	asrs	r3, r1, #31
	if (var1 == 0) {
   2fffa:	ea52 0103 	orrs.w	r1, r2, r3
   2fffe:	f000 80ba 	beq.w	30176 <bme280_sample_fetch+0x2a2>
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   30002:	ea4f 1818 	mov.w	r8, r8, lsr #4
   30006:	ea48 1909 	orr.w	r9, r8, r9, lsl #4
   3000a:	ea49 3906 	orr.w	r9, r9, r6, lsl #12
	p = 1048576 - adc_press;
   3000e:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
   30012:	4648      	mov	r0, r9
   30014:	17c1      	asrs	r1, r0, #31
	p = (((p << 31) - var2) * 3125) / var1;
   30016:	ea4f 78c1 	mov.w	r8, r1, lsl #31
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   3001a:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
	p = (((p << 31) - var2) * 3125) / var1;
   3001e:	ea4f 7ac9 	mov.w	sl, r9, lsl #31
   30022:	ea48 0859 	orr.w	r8, r8, r9, lsr #1
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   30026:	f04f 0900 	mov.w	r9, #0
	p = (((p << 31) - var2) * 3125) / var1;
   3002a:	ebba 0909 	subs.w	r9, sl, r9
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   3002e:	ea4f 01c0 	mov.w	r1, r0, lsl #3
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   30032:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
   30036:	9800      	ldr	r0, [sp, #0]
	p = (((p << 31) - var2) * 3125) / var1;
   30038:	eb68 0801 	sbc.w	r8, r8, r1
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   3003c:	9901      	ldr	r1, [sp, #4]
   3003e:	fb0a f701 	mul.w	r7, sl, r1
   30042:	9900      	ldr	r1, [sp, #0]
   30044:	ea4f 7bea 	mov.w	fp, sl, asr #31
   30048:	fb01 710b 	mla	r1, r1, fp, r7
   3004c:	fbaa 6700 	umull	r6, r7, sl, r0
	p = (((p << 31) - var2) * 3125) / var1;
   30050:	ebb9 0006 	subs.w	r0, r9, r6
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   30054:	f9b5 600e 	ldrsh.w	r6, [r5, #14]
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   30058:	440f      	add	r7, r1
	p = (((p << 31) - var2) * 3125) / var1;
   3005a:	eb68 0107 	sbc.w	r1, r8, r7
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   3005e:	fb06 fc0c 	mul.w	ip, r6, ip
   30062:	17f7      	asrs	r7, r6, #31
   30064:	fb0e cc07 	mla	ip, lr, r7, ip
   30068:	fba6 670e 	umull	r6, r7, r6, lr
   3006c:	4467      	add	r7, ip
   3006e:	ea4f 4e46 	mov.w	lr, r6, lsl #17
   30072:	ea4f 4c47 	mov.w	ip, r7, lsl #17
	p = (((p << 31) - var2) * 3125) / var1;
   30076:	ebb0 000e 	subs.w	r0, r0, lr
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   3007a:	ea4c 3cd6 	orr.w	ip, ip, r6, lsr #15
	p = (((p << 31) - var2) * 3125) / var1;
   3007e:	f640 4635 	movw	r6, #3125	; 0xc35
   30082:	eb61 0c0c 	sbc.w	ip, r1, ip
   30086:	fba0 0106 	umull	r0, r1, r0, r6
   3008a:	fb06 110c 	mla	r1, r6, ip, r1
   3008e:	f7dc fd25 	bl	cadc <__aeabi_ldivmod>
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   30092:	f9b5 6014 	ldrsh.w	r6, [r5, #20]
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   30096:	f9b5 a016 	ldrsh.w	sl, [r5, #22]
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   3009a:	fb06 f301 	mul.w	r3, r6, r1
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   3009e:	0b42      	lsrs	r2, r0, #13
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   300a0:	17f7      	asrs	r7, r6, #31
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   300a2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   300a6:	fb00 3307 	mla	r3, r0, r7, r3
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   300aa:	ea4f 3c61 	mov.w	ip, r1, asr #13
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   300ae:	fba6 6700 	umull	r6, r7, r6, r0
   300b2:	441f      	add	r7, r3
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   300b4:	fba2 8902 	umull	r8, r9, r2, r2
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   300b8:	0cf3      	lsrs	r3, r6, #19
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   300ba:	ea4f 7bea 	mov.w	fp, sl, asr #31
   300be:	fb02 f60c 	mul.w	r6, r2, ip
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   300c2:	ea43 3347 	orr.w	r3, r3, r7, lsl #13
   300c6:	ea4f 4ee7 	mov.w	lr, r7, asr #19
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   300ca:	eb09 0946 	add.w	r9, r9, r6, lsl #1
   300ce:	fb08 f70b 	mul.w	r7, r8, fp
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   300d2:	1818      	adds	r0, r3, r0
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   300d4:	fb0a 7309 	mla	r3, sl, r9, r7
   300d8:	fba8 670a 	umull	r6, r7, r8, sl
   300dc:	441f      	add	r7, r3
   300de:	ea4f 6356 	mov.w	r3, r6, lsr #25
   300e2:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   300e6:	eb4e 0101 	adc.w	r1, lr, r1
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   300ea:	167a      	asrs	r2, r7, #25
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   300ec:	18c0      	adds	r0, r0, r3
   300ee:	eb42 0101 	adc.w	r1, r2, r1
   300f2:	0a02      	lsrs	r2, r0, #8
   300f4:	f9b5 0012 	ldrsh.w	r0, [r5, #18]
   300f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   300fc:	0103      	lsls	r3, r0, #4
	data->comp_press = (uint32_t)p;
   300fe:	4413      	add	r3, r2
   30100:	62ab      	str	r3, [r5, #40]	; 0x28
	if (data->chip_id == BME280_CHIP_ID) {
   30102:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   30106:	2b60      	cmp	r3, #96	; 0x60
   30108:	d133      	bne.n	30172 <bme280_sample_fetch+0x29e>
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   3010a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   3010e:	f9b5 201e 	ldrsh.w	r2, [r5, #30]
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   30112:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   30116:	ba5b      	rev16	r3, r3
   30118:	b29b      	uxth	r3, r3
   3011a:	039b      	lsls	r3, r3, #14
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   3011c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	h = (data->t_fine - ((int32_t)76800));
   30120:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   30124:	eba3 5302 	sub.w	r3, r3, r2, lsl #20
   30128:	fb04 3311 	mls	r3, r4, r1, r3
   3012c:	13d9      	asrs	r1, r3, #15
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   3012e:	7f2b      	ldrb	r3, [r5, #28]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   30130:	4363      	muls	r3, r4
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   30132:	12db      	asrs	r3, r3, #11
   30134:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   30138:	f995 3022 	ldrsb.w	r3, [r5, #34]	; 0x22
   3013c:	435c      	muls	r4, r3
   3013e:	12a3      	asrs	r3, r4, #10
   30140:	4353      	muls	r3, r2
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   30142:	129b      	asrs	r3, r3, #10
   30144:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
   30148:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
   3014c:	4353      	muls	r3, r2
   3014e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   30152:	139b      	asrs	r3, r3, #14
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   30154:	434b      	muls	r3, r1
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
   30156:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h1)) >> 4));
   30158:	7e29      	ldrb	r1, [r5, #24]
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
   3015a:	4352      	muls	r2, r2
   3015c:	11d2      	asrs	r2, r2, #7
   3015e:	434a      	muls	r2, r1
   30160:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	h = (h > 419430400 ? 419430400 : h);
   30164:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   30168:	bfa8      	it	ge
   3016a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	data->comp_humidity = (uint32_t)(h >> 12);
   3016e:	131b      	asrs	r3, r3, #12
   30170:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
   30172:	2000      	movs	r0, #0
   30174:	e003      	b.n	3017e <bme280_sample_fetch+0x2aa>
		data->comp_press = 0U;
   30176:	2300      	movs	r3, #0
   30178:	e7c2      	b.n	30100 <bme280_sample_fetch+0x22c>
		return -EIO;
   3017a:	f06f 0004 	mvn.w	r0, #4
}
   3017e:	b007      	add	sp, #28
   30180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00030184 <bme280_reg_write_spi>:
	return 0;
}

static int bme280_reg_write_spi(const union bme280_bus *bus,
				uint8_t reg, uint8_t val)
{
   30184:	b510      	push	{r4, lr}
   30186:	b086      	sub	sp, #24
	uint8_t cmd[] = { reg & 0x7F, val };
	const struct spi_buf tx_buf = {
   30188:	ab01      	add	r3, sp, #4
	uint8_t cmd[] = { reg & 0x7F, val };
   3018a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	const struct spi_buf tx_buf = {
   3018e:	9302      	str	r3, [sp, #8]
   30190:	2302      	movs	r3, #2
	uint8_t cmd[] = { reg & 0x7F, val };
   30192:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf tx_buf = {
   30196:	9303      	str	r3, [sp, #12]
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
   30198:	4601      	mov	r1, r0
		.buf = cmd,
		.len = sizeof(cmd)
	};
	const struct spi_buf_set tx = {
   3019a:	ab02      	add	r3, sp, #8
   3019c:	9304      	str	r3, [sp, #16]
   3019e:	2301      	movs	r3, #1
   301a0:	f851 0b04 	ldr.w	r0, [r1], #4
	uint8_t cmd[] = { reg & 0x7F, val };
   301a4:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf_set tx = {
   301a8:	9305      	str	r3, [sp, #20]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   301aa:	6883      	ldr	r3, [r0, #8]
   301ac:	aa04      	add	r2, sp, #16
   301ae:	681c      	ldr	r4, [r3, #0]
   301b0:	2300      	movs	r3, #0
   301b2:	47a0      	blx	r4
	if (ret) {
		LOG_DBG("spi_write FAIL %d\n", ret);
		return ret;
	}
	return 0;
}
   301b4:	b006      	add	sp, #24
   301b6:	bd10      	pop	{r4, pc}

000301b8 <bme280_reg_read_spi>:
{
   301b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   301bc:	b08c      	sub	sp, #48	; 0x30
   301be:	461e      	mov	r6, r3
	const struct spi_buf tx_buf = {
   301c0:	f10d 0307 	add.w	r3, sp, #7
{
   301c4:	4605      	mov	r5, r0
	const struct spi_buf tx_buf = {
   301c6:	9302      	str	r3, [sp, #8]
   301c8:	2001      	movs	r0, #1
	const struct spi_buf_set tx = {
   301ca:	ab02      	add	r3, sp, #8
   301cc:	e9cd 3004 	strd	r3, r0, [sp, #16]
	const struct spi_buf_set rx = {
   301d0:	ab08      	add	r3, sp, #32
   301d2:	9306      	str	r3, [sp, #24]
	rx_buf[0].buf = NULL;
   301d4:	2400      	movs	r4, #0
   301d6:	2302      	movs	r3, #2
   301d8:	e9cd 3407 	strd	r3, r4, [sp, #28]
{
   301dc:	460f      	mov	r7, r1
   301de:	4690      	mov	r8, r2
	const struct spi_buf tx_buf = {
   301e0:	9003      	str	r0, [sp, #12]
	rx_buf[0].len = 1;
   301e2:	9009      	str	r0, [sp, #36]	; 0x24
	rx_buf[1].len = 1;
   301e4:	900b      	str	r0, [sp, #44]	; 0x2c
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   301e6:	f105 0904 	add.w	r9, r5, #4
	for (i = 0; i < size; i++) {
   301ea:	42a6      	cmp	r6, r4
   301ec:	dc03      	bgt.n	301f6 <bme280_reg_read_spi+0x3e>
	return 0;
   301ee:	2000      	movs	r0, #0
}
   301f0:	b00c      	add	sp, #48	; 0x30
   301f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		addr = (start + i) | 0x80;
   301f6:	193b      	adds	r3, r7, r4
   301f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   301fc:	f88d 3007 	strb.w	r3, [sp, #7]
		rx_buf[1].buf = &buf[i];
   30200:	eb08 0304 	add.w	r3, r8, r4
   30204:	6828      	ldr	r0, [r5, #0]
   30206:	930a      	str	r3, [sp, #40]	; 0x28
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   30208:	6883      	ldr	r3, [r0, #8]
   3020a:	aa04      	add	r2, sp, #16
   3020c:	f8d3 a000 	ldr.w	sl, [r3]
   30210:	4649      	mov	r1, r9
   30212:	ab06      	add	r3, sp, #24
   30214:	47d0      	blx	sl
		if (ret) {
   30216:	2800      	cmp	r0, #0
   30218:	d1ea      	bne.n	301f0 <bme280_reg_read_spi+0x38>
	for (i = 0; i < size; i++) {
   3021a:	3401      	adds	r4, #1
   3021c:	e7e5      	b.n	301ea <bme280_reg_read_spi+0x32>

0003021e <bme280_bus_check_spi>:
{
   3021e:	b510      	push	{r4, lr}
   30220:	4604      	mov	r4, r0
	if (!device_is_ready(spec->bus)) {
   30222:	6800      	ldr	r0, [r0, #0]
	return z_device_ready(dev) ? 0 : -ENODEV;
   30224:	f001 f95a 	bl	314dc <z_device_ready>
   30228:	b140      	cbz	r0, 3023c <bme280_bus_check_spi+0x1e>
	if (spec->config.cs &&
   3022a:	68e3      	ldr	r3, [r4, #12]
   3022c:	b90b      	cbnz	r3, 30232 <bme280_bus_check_spi+0x14>
	return spi_is_ready(&bus->spi) ? 0 : -ENODEV;
   3022e:	2000      	movs	r0, #0
}
   30230:	bd10      	pop	{r4, pc}
	    !device_is_ready(spec->config.cs->gpio.port)) {
   30232:	6818      	ldr	r0, [r3, #0]
   30234:	f001 f952 	bl	314dc <z_device_ready>
   30238:	2800      	cmp	r0, #0
   3023a:	d1f8      	bne.n	3022e <bme280_bus_check_spi+0x10>
	return spi_is_ready(&bus->spi) ? 0 : -ENODEV;
   3023c:	f06f 0012 	mvn.w	r0, #18
   30240:	e7f6      	b.n	30230 <bme280_bus_check_spi+0x12>

00030242 <gpio_pin_set_dt>:
{
   30242:	4603      	mov	r3, r0
   30244:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   30246:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   30248:	7919      	ldrb	r1, [r3, #4]
   3024a:	2301      	movs	r3, #1
   3024c:	fa03 f101 	lsl.w	r1, r3, r1
   30250:	6903      	ldr	r3, [r0, #16]
   30252:	681b      	ldr	r3, [r3, #0]
   30254:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   30256:	bf18      	it	ne
   30258:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   3025c:	b112      	cbz	r2, 30264 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   3025e:	6883      	ldr	r3, [r0, #8]
   30260:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   30262:	4718      	bx	r3
   30264:	6883      	ldr	r3, [r0, #8]
   30266:	691b      	ldr	r3, [r3, #16]
   30268:	e7fb      	b.n	30262 <gpio_pin_set_dt+0x20>

0003026a <spi_nrfx_pm_action>:


#ifdef CONFIG_PM_DEVICE
static int spi_nrfx_pm_action(const struct device *dev,
			      enum pm_device_action action)
{
   3026a:	b538      	push	{r3, r4, r5, lr}
   3026c:	4603      	mov	r3, r0
	int ret = 0;
	struct spi_nrfx_data *data = get_dev_data(dev);
	const struct spi_nrfx_config *config = get_dev_config(dev);

	switch (action) {
   3026e:	460c      	mov	r4, r1
   30270:	b129      	cbz	r1, 3027e <spi_nrfx_pm_action+0x14>
   30272:	2901      	cmp	r1, #1
	int ret = 0;
   30274:	bf14      	ite	ne
   30276:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   3027a:	2000      	moveq	r0, #0
	default:
		ret = -ENOTSUP;
	}

	return ret;
}
   3027c:	bd38      	pop	{r3, r4, r5, pc}
	struct spi_nrfx_data *data = get_dev_data(dev);
   3027e:	6905      	ldr	r5, [r0, #16]
		if (data->initialized) {
   30280:	f895 006d 	ldrb.w	r0, [r5, #109]	; 0x6d
   30284:	2800      	cmp	r0, #0
   30286:	d0f9      	beq.n	3027c <spi_nrfx_pm_action+0x12>
			nrfx_spi_uninit(&config->spi);
   30288:	6858      	ldr	r0, [r3, #4]
   3028a:	f7f6 fbff 	bl	26a8c <nrfx_spi_uninit>
			data->initialized = false;
   3028e:	f885 406d 	strb.w	r4, [r5, #109]	; 0x6d
	int ret = 0;
   30292:	4620      	mov	r0, r4
   30294:	e7f2      	b.n	3027c <spi_nrfx_pm_action+0x12>

00030296 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   30296:	b530      	push	{r4, r5, lr}
   30298:	4604      	mov	r4, r0
	while (*count) {
   3029a:	6808      	ldr	r0, [r1, #0]
   3029c:	b908      	cbnz	r0, 302a2 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   3029e:	6010      	str	r0, [r2, #0]
	return NULL;
   302a0:	e004      	b.n	302ac <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   302a2:	6823      	ldr	r3, [r4, #0]
   302a4:	685d      	ldr	r5, [r3, #4]
   302a6:	b115      	cbz	r5, 302ae <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   302a8:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   302aa:	6015      	str	r5, [r2, #0]
}
   302ac:	bd30      	pop	{r4, r5, pc}
		++(*current);
   302ae:	3308      	adds	r3, #8
		--(*count);
   302b0:	3801      	subs	r0, #1
		++(*current);
   302b2:	6023      	str	r3, [r4, #0]
		--(*count);
   302b4:	6008      	str	r0, [r1, #0]
   302b6:	e7f0      	b.n	3029a <spi_context_get_next_buf.constprop.0+0x4>

000302b8 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   302b8:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   302ba:	6803      	ldr	r3, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   302bc:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   302be:	b1e3      	cbz	r3, 302fa <_spi_context_cs_control.isra.0+0x42>
   302c0:	6898      	ldr	r0, [r3, #8]
   302c2:	b1d0      	cbz	r0, 302fa <_spi_context_cs_control.isra.0+0x42>
   302c4:	6805      	ldr	r5, [r0, #0]
   302c6:	b1c5      	cbz	r5, 302fa <_spi_context_cs_control.isra.0+0x42>
		if (on) {
   302c8:	b149      	cbz	r1, 302de <_spi_context_cs_control.isra.0+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   302ca:	2101      	movs	r1, #1
   302cc:	f7ff ffb9 	bl	30242 <gpio_pin_set_dt>
			k_busy_wait(ctx->config->cs->delay);
   302d0:	6823      	ldr	r3, [r4, #0]
   302d2:	689b      	ldr	r3, [r3, #8]
   302d4:	6898      	ldr	r0, [r3, #8]
}
   302d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   302da:	f001 bcff 	b.w	31cdc <z_impl_k_busy_wait>
			if (!force_off &&
   302de:	b912      	cbnz	r2, 302e6 <_spi_context_cs_control.isra.0+0x2e>
   302e0:	889b      	ldrh	r3, [r3, #4]
   302e2:	04db      	lsls	r3, r3, #19
   302e4:	d409      	bmi.n	302fa <_spi_context_cs_control.isra.0+0x42>
			k_busy_wait(ctx->config->cs->delay);
   302e6:	6880      	ldr	r0, [r0, #8]
   302e8:	f001 fcf8 	bl	31cdc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   302ec:	6823      	ldr	r3, [r4, #0]
   302ee:	2100      	movs	r1, #0
   302f0:	6898      	ldr	r0, [r3, #8]
}
   302f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   302f6:	f7ff bfa4 	b.w	30242 <gpio_pin_set_dt>
}
   302fa:	bd38      	pop	{r3, r4, r5, pc}

000302fc <spi_context_unlock_unconditionally>:
{
   302fc:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   302fe:	2201      	movs	r2, #1
   30300:	2100      	movs	r1, #0
{
   30302:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   30304:	f7ff ffd8 	bl	302b8 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   30308:	69a3      	ldr	r3, [r4, #24]
   3030a:	b933      	cbnz	r3, 3031a <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   3030c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   3030e:	f104 0010 	add.w	r0, r4, #16
}
   30312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30316:	f7f7 bdb3 	b.w	27e80 <z_impl_k_sem_give>
   3031a:	bd10      	pop	{r4, pc}

0003031c <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   3031c:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   3031e:	6803      	ldr	r3, [r0, #0]
   30320:	428b      	cmp	r3, r1
{
   30322:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   30324:	d106      	bne.n	30334 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   30326:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   3032a:	b934      	cbnz	r4, 3033a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   3032c:	f7ff ffe6 	bl	302fc <spi_context_unlock_unconditionally>
	return 0;
   30330:	4620      	mov	r0, r4
}
   30332:	bd10      	pop	{r4, pc}
		return -EINVAL;
   30334:	f06f 0015 	mvn.w	r0, #21
   30338:	e7fb      	b.n	30332 <spi_nrfx_release+0x16>
		return -EBUSY;
   3033a:	f06f 000f 	mvn.w	r0, #15
   3033e:	e7f8      	b.n	30332 <spi_nrfx_release+0x16>

00030340 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   30340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30344:	4605      	mov	r5, r0
   30346:	2200      	movs	r2, #0
   30348:	2101      	movs	r1, #1
   3034a:	2004      	movs	r0, #4
   3034c:	f7ee fa10 	bl	1e770 <z_arm_irq_priority_set>
   30350:	692f      	ldr	r7, [r5, #16]
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   30352:	68bc      	ldr	r4, [r7, #8]
   30354:	2601      	movs	r6, #1
   30356:	3408      	adds	r4, #8
   30358:	e9d7 3102 	ldrd	r3, r1, [r7, #8]
   3035c:	f1a4 0208 	sub.w	r2, r4, #8
   30360:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   30364:	429a      	cmp	r2, r3
   30366:	d304      	bcc.n	30372 <spi_1_init+0x32>
   30368:	6928      	ldr	r0, [r5, #16]
   3036a:	f7ff ffc7 	bl	302fc <spi_context_unlock_unconditionally>
   3036e:	2000      	movs	r0, #0
   30370:	e029      	b.n	303c6 <spi_1_init+0x86>
		if (!device_is_ready(cs_gpio->port)) {
   30372:	f854 0c08 	ldr.w	r0, [r4, #-8]
   30376:	f001 f8b1 	bl	314dc <z_device_ready>
   3037a:	b330      	cbz	r0, 303ca <spi_1_init+0x8a>
	return gpio_pin_configure(spec->port,
   3037c:	f854 0c08 	ldr.w	r0, [r4, #-8]
   30380:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   30384:	f814 3c03 	ldrb.w	r3, [r4, #-3]
	struct gpio_driver_data *data =
   30388:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   3038c:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   30390:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   30394:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   30396:	bf54      	ite	pl
   30398:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   3039c:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   303a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   303a4:	fa06 f801 	lsl.w	r8, r6, r1
   303a8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   303aa:	bf4c      	ite	mi
   303ac:	ea48 030c 	orrmi.w	r3, r8, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   303b0:	ea2c 0308 	bicpl.w	r3, ip, r8
   303b4:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   303b8:	f8d9 3000 	ldr.w	r3, [r9]
   303bc:	4798      	blx	r3
		if (ret < 0) {
   303be:	2800      	cmp	r0, #0
   303c0:	f104 0408 	add.w	r4, r4, #8
   303c4:	dac8      	bge.n	30358 <spi_1_init+0x18>
   303c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -ENODEV;
   303ca:	f06f 0012 	mvn.w	r0, #18
   303ce:	e7fa      	b.n	303c6 <spi_1_init+0x86>

000303d0 <event_handler>:
{
   303d0:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   303d2:	7803      	ldrb	r3, [r0, #0]
{
   303d4:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   303d6:	2b00      	cmp	r3, #0
   303d8:	d13d      	bne.n	30456 <event_handler+0x86>
	if (!ctx->tx_len) {
   303da:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   303dc:	b19b      	cbz	r3, 30406 <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   303de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   303e0:	429a      	cmp	r2, r3
   303e2:	d810      	bhi.n	30406 <event_handler+0x36>
	ctx->tx_len -= len;
   303e4:	1a9b      	subs	r3, r3, r2
   303e6:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   303e8:	bb4b      	cbnz	r3, 3043e <event_handler+0x6e>
		++ctx->current_tx;
   303ea:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   303ec:	3308      	adds	r3, #8
   303ee:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   303f0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   303f2:	3b01      	subs	r3, #1
   303f4:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   303f6:	f101 0258 	add.w	r2, r1, #88	; 0x58
   303fa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   303fe:	3148      	adds	r1, #72	; 0x48
   30400:	f7ff ff49 	bl	30296 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   30404:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   30406:	6e23      	ldr	r3, [r4, #96]	; 0x60
   30408:	b1a3      	cbz	r3, 30434 <event_handler+0x64>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   3040a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   3040c:	429a      	cmp	r2, r3
   3040e:	d811      	bhi.n	30434 <event_handler+0x64>
	ctx->rx_len -= len;
   30410:	1a9b      	subs	r3, r3, r2
   30412:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   30414:	b9cb      	cbnz	r3, 3044a <event_handler+0x7a>
		++ctx->current_rx;
   30416:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   30418:	3308      	adds	r3, #8
   3041a:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   3041c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   3041e:	3b01      	subs	r3, #1
   30420:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   30422:	f104 0260 	add.w	r2, r4, #96	; 0x60
   30426:	f104 0150 	add.w	r1, r4, #80	; 0x50
   3042a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   3042e:	f7ff ff32 	bl	30296 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   30432:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   30434:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   30436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   3043a:	f7f3 be7f 	b.w	2413c <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   3043e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   30440:	2b00      	cmp	r3, #0
   30442:	d0e0      	beq.n	30406 <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   30444:	4413      	add	r3, r2
   30446:	654b      	str	r3, [r1, #84]	; 0x54
   30448:	e7dd      	b.n	30406 <event_handler+0x36>
	} else if (ctx->rx_buf) {
   3044a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   3044c:	2b00      	cmp	r3, #0
   3044e:	d0f1      	beq.n	30434 <event_handler+0x64>
		ctx->rx_buf += dfs * len;
   30450:	4413      	add	r3, r2
   30452:	65e3      	str	r3, [r4, #92]	; 0x5c
   30454:	e7ee      	b.n	30434 <event_handler+0x64>
}
   30456:	bd10      	pop	{r4, pc}

00030458 <gpio_pin_set_dt>:
{
   30458:	4603      	mov	r3, r0
   3045a:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   3045c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   3045e:	7919      	ldrb	r1, [r3, #4]
   30460:	2301      	movs	r3, #1
   30462:	fa03 f101 	lsl.w	r1, r3, r1
   30466:	6903      	ldr	r3, [r0, #16]
   30468:	681b      	ldr	r3, [r3, #0]
   3046a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   3046c:	bf18      	it	ne
   3046e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   30472:	b112      	cbz	r2, 3047a <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   30474:	6883      	ldr	r3, [r0, #8]
   30476:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   30478:	4718      	bx	r3
   3047a:	6883      	ldr	r3, [r0, #8]
   3047c:	691b      	ldr	r3, [r3, #16]
   3047e:	e7fb      	b.n	30478 <gpio_pin_set_dt+0x20>

00030480 <spim_nrfx_pm_action>:
};

#ifdef CONFIG_PM_DEVICE
static int spim_nrfx_pm_action(const struct device *dev,
			       enum pm_device_action action)
{
   30480:	b538      	push	{r3, r4, r5, lr}
   30482:	4603      	mov	r3, r0
	int ret = 0;
	struct spi_nrfx_data *data = get_dev_data(dev);
	const struct spi_nrfx_config *config = get_dev_config(dev);

	switch (action) {
   30484:	460c      	mov	r4, r1
   30486:	b129      	cbz	r1, 30494 <spim_nrfx_pm_action+0x14>
   30488:	2901      	cmp	r1, #1
	int ret = 0;
   3048a:	bf14      	ite	ne
   3048c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   30490:	2000      	moveq	r0, #0
	default:
		ret = -ENOTSUP;
	}

	return ret;
}
   30492:	bd38      	pop	{r3, r4, r5, pc}
	struct spi_nrfx_data *data = get_dev_data(dev);
   30494:	6905      	ldr	r5, [r0, #16]
		if (data->initialized) {
   30496:	f895 006d 	ldrb.w	r0, [r5, #109]	; 0x6d
   3049a:	2800      	cmp	r0, #0
   3049c:	d0f9      	beq.n	30492 <spim_nrfx_pm_action+0x12>
			nrfx_spim_uninit(&config->spim);
   3049e:	6858      	ldr	r0, [r3, #4]
   304a0:	f7f6 fd08 	bl	26eb4 <nrfx_spim_uninit>
			data->initialized = false;
   304a4:	f885 406d 	strb.w	r4, [r5, #109]	; 0x6d
	int ret = 0;
   304a8:	4620      	mov	r0, r4
   304aa:	e7f2      	b.n	30492 <spim_nrfx_pm_action+0x12>

000304ac <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   304ac:	b530      	push	{r4, r5, lr}
   304ae:	4604      	mov	r4, r0
	while (*count) {
   304b0:	6808      	ldr	r0, [r1, #0]
   304b2:	b908      	cbnz	r0, 304b8 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   304b4:	6010      	str	r0, [r2, #0]
	return NULL;
   304b6:	e004      	b.n	304c2 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   304b8:	6823      	ldr	r3, [r4, #0]
   304ba:	685d      	ldr	r5, [r3, #4]
   304bc:	b115      	cbz	r5, 304c4 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   304be:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   304c0:	6015      	str	r5, [r2, #0]
}
   304c2:	bd30      	pop	{r4, r5, pc}
		++(*current);
   304c4:	3308      	adds	r3, #8
		--(*count);
   304c6:	3801      	subs	r0, #1
		++(*current);
   304c8:	6023      	str	r3, [r4, #0]
		--(*count);
   304ca:	6008      	str	r0, [r1, #0]
   304cc:	e7f0      	b.n	304b0 <spi_context_get_next_buf.constprop.0+0x4>

000304ce <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   304ce:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   304d0:	6803      	ldr	r3, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   304d2:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   304d4:	b1e3      	cbz	r3, 30510 <_spi_context_cs_control.isra.0+0x42>
   304d6:	6898      	ldr	r0, [r3, #8]
   304d8:	b1d0      	cbz	r0, 30510 <_spi_context_cs_control.isra.0+0x42>
   304da:	6805      	ldr	r5, [r0, #0]
   304dc:	b1c5      	cbz	r5, 30510 <_spi_context_cs_control.isra.0+0x42>
		if (on) {
   304de:	b149      	cbz	r1, 304f4 <_spi_context_cs_control.isra.0+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   304e0:	2101      	movs	r1, #1
   304e2:	f7ff ffb9 	bl	30458 <gpio_pin_set_dt>
			k_busy_wait(ctx->config->cs->delay);
   304e6:	6823      	ldr	r3, [r4, #0]
   304e8:	689b      	ldr	r3, [r3, #8]
   304ea:	6898      	ldr	r0, [r3, #8]
}
   304ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   304f0:	f001 bbf4 	b.w	31cdc <z_impl_k_busy_wait>
			if (!force_off &&
   304f4:	b912      	cbnz	r2, 304fc <_spi_context_cs_control.isra.0+0x2e>
   304f6:	889b      	ldrh	r3, [r3, #4]
   304f8:	04db      	lsls	r3, r3, #19
   304fa:	d409      	bmi.n	30510 <_spi_context_cs_control.isra.0+0x42>
			k_busy_wait(ctx->config->cs->delay);
   304fc:	6880      	ldr	r0, [r0, #8]
   304fe:	f001 fbed 	bl	31cdc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   30502:	6823      	ldr	r3, [r4, #0]
   30504:	2100      	movs	r1, #0
   30506:	6898      	ldr	r0, [r3, #8]
}
   30508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   3050c:	f7ff bfa4 	b.w	30458 <gpio_pin_set_dt>
}
   30510:	bd38      	pop	{r3, r4, r5, pc}

00030512 <spi_context_unlock_unconditionally>:
{
   30512:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   30514:	2201      	movs	r2, #1
   30516:	2100      	movs	r1, #0
{
   30518:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   3051a:	f7ff ffd8 	bl	304ce <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   3051e:	69a3      	ldr	r3, [r4, #24]
   30520:	b933      	cbnz	r3, 30530 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   30522:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   30524:	f104 0010 	add.w	r0, r4, #16
}
   30528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3052c:	f7f7 bca8 	b.w	27e80 <z_impl_k_sem_give>
   30530:	bd10      	pop	{r4, pc}

00030532 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   30532:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   30534:	6803      	ldr	r3, [r0, #0]
   30536:	428b      	cmp	r3, r1
{
   30538:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   3053a:	d106      	bne.n	3054a <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   3053c:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   30540:	b934      	cbnz	r4, 30550 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   30542:	f7ff ffe6 	bl	30512 <spi_context_unlock_unconditionally>
	return 0;
   30546:	4620      	mov	r0, r4
}
   30548:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3054a:	f06f 0015 	mvn.w	r0, #21
   3054e:	e7fb      	b.n	30548 <spi_nrfx_release+0x16>
		return -EBUSY;
   30550:	f06f 000f 	mvn.w	r0, #15
   30554:	e7f8      	b.n	30548 <spi_nrfx_release+0x16>

00030556 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   30556:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3055a:	4605      	mov	r5, r0
   3055c:	2200      	movs	r2, #0
   3055e:	2101      	movs	r1, #1
   30560:	202f      	movs	r0, #47	; 0x2f
   30562:	f7ee f905 	bl	1e770 <z_arm_irq_priority_set>
   30566:	692f      	ldr	r7, [r5, #16]
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   30568:	68bc      	ldr	r4, [r7, #8]
   3056a:	2601      	movs	r6, #1
   3056c:	3408      	adds	r4, #8
   3056e:	e9d7 3102 	ldrd	r3, r1, [r7, #8]
   30572:	f1a4 0208 	sub.w	r2, r4, #8
   30576:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   3057a:	429a      	cmp	r2, r3
   3057c:	d304      	bcc.n	30588 <spi_3_init+0x32>
   3057e:	6928      	ldr	r0, [r5, #16]
   30580:	f7ff ffc7 	bl	30512 <spi_context_unlock_unconditionally>
   30584:	2000      	movs	r0, #0
   30586:	e029      	b.n	305dc <spi_3_init+0x86>
		if (!device_is_ready(cs_gpio->port)) {
   30588:	f854 0c08 	ldr.w	r0, [r4, #-8]
   3058c:	f000 ffa6 	bl	314dc <z_device_ready>
   30590:	b330      	cbz	r0, 305e0 <spi_3_init+0x8a>
	return gpio_pin_configure(spec->port,
   30592:	f854 0c08 	ldr.w	r0, [r4, #-8]
   30596:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   3059a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
	struct gpio_driver_data *data =
   3059e:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   305a2:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   305a6:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   305aa:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   305ac:	bf54      	ite	pl
   305ae:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   305b2:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   305b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   305ba:	fa06 f801 	lsl.w	r8, r6, r1
   305be:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   305c0:	bf4c      	ite	mi
   305c2:	ea48 030c 	orrmi.w	r3, r8, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   305c6:	ea2c 0308 	bicpl.w	r3, ip, r8
   305ca:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   305ce:	f8d9 3000 	ldr.w	r3, [r9]
   305d2:	4798      	blx	r3
		if (ret < 0) {
   305d4:	2800      	cmp	r0, #0
   305d6:	f104 0408 	add.w	r4, r4, #8
   305da:	dac8      	bge.n	3056e <spi_3_init+0x18>
   305dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -ENODEV;
   305e0:	f06f 0012 	mvn.w	r0, #18
   305e4:	e7fa      	b.n	305dc <spi_3_init+0x86>

000305e6 <event_handler>:
{
   305e6:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   305e8:	7803      	ldrb	r3, [r0, #0]
{
   305ea:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   305ec:	2b00      	cmp	r3, #0
   305ee:	d13d      	bne.n	3066c <event_handler+0x86>
	if (!ctx->tx_len) {
   305f0:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   305f2:	b19b      	cbz	r3, 3061c <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   305f4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   305f6:	429a      	cmp	r2, r3
   305f8:	d810      	bhi.n	3061c <event_handler+0x36>
	ctx->tx_len -= len;
   305fa:	1a9b      	subs	r3, r3, r2
   305fc:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   305fe:	bb4b      	cbnz	r3, 30654 <event_handler+0x6e>
		++ctx->current_tx;
   30600:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   30602:	3308      	adds	r3, #8
   30604:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   30606:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   30608:	3b01      	subs	r3, #1
   3060a:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   3060c:	f101 0258 	add.w	r2, r1, #88	; 0x58
   30610:	f104 0044 	add.w	r0, r4, #68	; 0x44
   30614:	3148      	adds	r1, #72	; 0x48
   30616:	f7ff ff49 	bl	304ac <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   3061a:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   3061c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3061e:	b1a3      	cbz	r3, 3064a <event_handler+0x64>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   30620:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   30622:	429a      	cmp	r2, r3
   30624:	d811      	bhi.n	3064a <event_handler+0x64>
	ctx->rx_len -= len;
   30626:	1a9b      	subs	r3, r3, r2
   30628:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   3062a:	b9cb      	cbnz	r3, 30660 <event_handler+0x7a>
		++ctx->current_rx;
   3062c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   3062e:	3308      	adds	r3, #8
   30630:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   30632:	6d23      	ldr	r3, [r4, #80]	; 0x50
   30634:	3b01      	subs	r3, #1
   30636:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   30638:	f104 0260 	add.w	r2, r4, #96	; 0x60
   3063c:	f104 0150 	add.w	r1, r4, #80	; 0x50
   30640:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   30644:	f7ff ff32 	bl	304ac <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   30648:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   3064a:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   3064c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   30650:	f7f3 bede 	b.w	24410 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   30654:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   30656:	2b00      	cmp	r3, #0
   30658:	d0e0      	beq.n	3061c <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   3065a:	4413      	add	r3, r2
   3065c:	654b      	str	r3, [r1, #84]	; 0x54
   3065e:	e7dd      	b.n	3061c <event_handler+0x36>
	} else if (ctx->rx_buf) {
   30660:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   30662:	2b00      	cmp	r3, #0
   30664:	d0f1      	beq.n	3064a <event_handler+0x64>
		ctx->rx_buf += dfs * len;
   30666:	4413      	add	r3, r2
   30668:	65e3      	str	r3, [r4, #92]	; 0x5c
   3066a:	e7ee      	b.n	3064a <event_handler+0x64>
}
   3066c:	bd10      	pop	{r4, pc}

0003066e <wdt_nrf_disable>:
}
   3066e:	f04f 30ff 	mov.w	r0, #4294967295
   30672:	4770      	bx	lr

00030674 <wdt_nrf_feed>:
{
   30674:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   30676:	6903      	ldr	r3, [r0, #16]
   30678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3067c:	428b      	cmp	r3, r1
   3067e:	db05      	blt.n	3068c <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   30680:	6840      	ldr	r0, [r0, #4]
   30682:	b2c9      	uxtb	r1, r1
   30684:	f7f6 ffd6 	bl	27634 <nrfx_wdt_channel_feed>
	return 0;
   30688:	2000      	movs	r0, #0
}
   3068a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3068c:	f06f 0015 	mvn.w	r0, #21
   30690:	e7fb      	b.n	3068a <wdt_nrf_feed+0x16>

00030692 <wdt_nrf_setup>:
{
   30692:	b538      	push	{r3, r4, r5, lr}
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   30694:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   30696:	f001 0301 	and.w	r3, r1, #1
   3069a:	f1c3 0309 	rsb	r3, r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   3069e:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   306a0:	6825      	ldr	r5, [r4, #0]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   306a2:	b2db      	uxtb	r3, r3
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   306a4:	bf48      	it	mi
   306a6:	f003 03f7 	andmi.w	r3, r3, #247	; 0xf7
    p_reg->CONFIG = behaviour;
   306aa:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   306ae:	6903      	ldr	r3, [r0, #16]
   306b0:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   306b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   306b6:	2300      	movs	r3, #0
   306b8:	03c8      	lsls	r0, r1, #15
   306ba:	0c49      	lsrs	r1, r1, #17
   306bc:	f7dc fa5e 	bl	cb7c <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   306c0:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   306c4:	4620      	mov	r0, r4
   306c6:	f7f6 ff7f 	bl	275c8 <nrfx_wdt_enable>
}
   306ca:	2000      	movs	r0, #0
   306cc:	bd38      	pop	{r3, r4, r5, pc}

000306ce <is_regular_addr_valid>:
{
   306ce:	b538      	push	{r3, r4, r5, lr}
   306d0:	4604      	mov	r4, r0
   306d2:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   306d4:	f000 fa6f 	bl	30bb6 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   306d8:	4284      	cmp	r4, r0
   306da:	d209      	bcs.n	306f0 <is_regular_addr_valid+0x22>
   306dc:	2c00      	cmp	r4, #0
   306de:	db07      	blt.n	306f0 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   306e0:	42a8      	cmp	r0, r5
   306e2:	d305      	bcc.n	306f0 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   306e4:	442c      	add	r4, r5
	    len > flash_size ||
   306e6:	4284      	cmp	r4, r0
   306e8:	bf8c      	ite	hi
   306ea:	2000      	movhi	r0, #0
   306ec:	2001      	movls	r0, #1
}
   306ee:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   306f0:	2000      	movs	r0, #0
   306f2:	e7fc      	b.n	306ee <is_regular_addr_valid+0x20>

000306f4 <flash_nrf_read>:
{
   306f4:	b570      	push	{r4, r5, r6, lr}
   306f6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   306f8:	4628      	mov	r0, r5
   306fa:	4619      	mov	r1, r3
{
   306fc:	4616      	mov	r6, r2
   306fe:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   30700:	f7ff ffe5 	bl	306ce <is_regular_addr_valid>
   30704:	b138      	cbz	r0, 30716 <flash_nrf_read+0x22>
	if (!len) {
   30706:	b14c      	cbz	r4, 3071c <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   30708:	4622      	mov	r2, r4
   3070a:	4629      	mov	r1, r5
   3070c:	4630      	mov	r0, r6
   3070e:	f7fc fad4 	bl	2ccba <memcpy>
	return 0;
   30712:	2000      	movs	r0, #0
}
   30714:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   30716:	f06f 0015 	mvn.w	r0, #21
   3071a:	e7fb      	b.n	30714 <flash_nrf_read+0x20>
		return 0;
   3071c:	4620      	mov	r0, r4
   3071e:	e7f9      	b.n	30714 <flash_nrf_read+0x20>

00030720 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   30720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   30724:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   30726:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   30728:	2500      	movs	r5, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   3072a:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   3072c:	6025      	str	r5, [r4, #0]
{
   3072e:	460e      	mov	r6, r1
   30730:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   30732:	4669      	mov	r1, sp
	info->index = 0U;
   30734:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   30736:	aa01      	add	r2, sp, #4
   30738:	4798      	blx	r3

	while (layout_size--) {
   3073a:	e9dd 1c00 	ldrd	r1, ip, [sp]
   3073e:	4628      	mov	r0, r5
		info->size = layout->pages_size;
   30740:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
   30744:	4560      	cmp	r0, ip
   30746:	d104      	bne.n	30752 <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   30748:	f06f 0015 	mvn.w	r0, #21
}
   3074c:	b003      	add	sp, #12
   3074e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   30752:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
   30756:	68a2      	ldr	r2, [r4, #8]
   30758:	f8d4 9000 	ldr.w	r9, [r4]
   3075c:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
   3075e:	b986      	cbnz	r6, 30782 <flash_get_page_info+0x62>
			index_jmp = index - info->index;
   30760:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   30762:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
   30766:	4543      	cmp	r3, r8
   30768:	bf28      	it	cs
   3076a:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   3076c:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
   30770:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
   30772:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   30774:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
   30776:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   30778:	f100 0001 	add.w	r0, r0, #1
   3077c:	d9e2      	bls.n	30744 <flash_get_page_info+0x24>
			return 0;
   3077e:	2000      	movs	r0, #0
   30780:	e7e4      	b.n	3074c <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
   30782:	eba6 0309 	sub.w	r3, r6, r9
   30786:	fbb3 f3f5 	udiv	r3, r3, r5
   3078a:	e7ea      	b.n	30762 <flash_get_page_info+0x42>

0003078c <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3078c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3078e:	2200      	movs	r2, #0
   30790:	f7ff bfc6 	b.w	30720 <flash_get_page_info>

00030794 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   30794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   30798:	6883      	ldr	r3, [r0, #8]
{
   3079a:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   3079c:	695b      	ldr	r3, [r3, #20]
{
   3079e:	4688      	mov	r8, r1
   307a0:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   307a2:	a901      	add	r1, sp, #4
   307a4:	aa02      	add	r2, sp, #8
   307a6:	4798      	blx	r3
	off_t off = 0;
   307a8:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   307aa:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   307ac:	4625      	mov	r5, r4
   307ae:	9b02      	ldr	r3, [sp, #8]
   307b0:	42ab      	cmp	r3, r5
   307b2:	d802      	bhi.n	307ba <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   307b4:	b006      	add	sp, #24
   307b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   307ba:	9f01      	ldr	r7, [sp, #4]
   307bc:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   307c0:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   307c2:	687b      	ldr	r3, [r7, #4]
   307c4:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   307c6:	683a      	ldr	r2, [r7, #0]
   307c8:	42b2      	cmp	r2, r6
   307ca:	eb0a 0306 	add.w	r3, sl, r6
   307ce:	d802      	bhi.n	307d6 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   307d0:	3501      	adds	r5, #1
   307d2:	469a      	mov	sl, r3
   307d4:	e7eb      	b.n	307ae <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   307d6:	4649      	mov	r1, r9
   307d8:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   307da:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   307dc:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   307de:	47c0      	blx	r8
   307e0:	2800      	cmp	r0, #0
   307e2:	d0e7      	beq.n	307b4 <flash_page_foreach+0x20>
			off += page_info.size;
   307e4:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   307e6:	3601      	adds	r6, #1
			off += page_info.size;
   307e8:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   307ea:	e7ec      	b.n	307c6 <flash_page_foreach+0x32>

000307ec <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   307ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   307ee:	460f      	mov	r7, r1
   307f0:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   307f2:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   307f6:	2400      	movs	r4, #0
	int res = -EINVAL;
   307f8:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   307fc:	42a6      	cmp	r6, r4
   307fe:	d801      	bhi.n	30804 <entropy_cc3xx_rng_get_entropy+0x18>
		offset += chunk_size;
	}
#endif

	return res;
}
   30800:	b003      	add	sp, #12
   30802:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   30804:	1b33      	subs	r3, r6, r4
   30806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   3080a:	bf38      	it	cc
   3080c:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   3080e:	462a      	mov	r2, r5
   30810:	ab01      	add	r3, sp, #4
   30812:	1939      	adds	r1, r7, r4
   30814:	2000      	movs	r0, #0
   30816:	f7f8 fc3d 	bl	29094 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   3081a:	9b01      	ldr	r3, [sp, #4]
   3081c:	42ab      	cmp	r3, r5
   3081e:	d103      	bne.n	30828 <entropy_cc3xx_rng_get_entropy+0x3c>
		if (res != 0) {
   30820:	2800      	cmp	r0, #0
   30822:	d1ed      	bne.n	30800 <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   30824:	442c      	add	r4, r5
   30826:	e7e9      	b.n	307fc <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   30828:	f06f 0015 	mvn.w	r0, #21
   3082c:	e7e8      	b.n	30800 <entropy_cc3xx_rng_get_entropy+0x14>

0003082e <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   3082e:	2200      	movs	r2, #0
{
   30830:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   30832:	4611      	mov	r1, r2
   30834:	4610      	mov	r0, r2
   30836:	f7f8 fbf9 	bl	2902c <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   3083a:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   3083c:	bf18      	it	ne
   3083e:	f06f 0015 	mvnne.w	r0, #21
   30842:	bd08      	pop	{r3, pc}

00030844 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   30844:	4770      	bx	lr

00030846 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   30846:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   30848:	2000      	movs	r0, #0
   3084a:	f7ee fb1b 	bl	1ee84 <sys_arch_reboot>

0003084e <sdc_assertion_handler>:
	k_oops();
   3084e:	4040      	eors	r0, r0
   30850:	f380 8811 	msr	BASEPRI, r0
   30854:	f04f 0003 	mov.w	r0, #3
   30858:	df02      	svc	2
}
   3085a:	4770      	bx	lr

0003085c <rand_prio_high_vector_get>:
   3085c:	f7f4 bd22 	b.w	252a4 <rand_prio_low_vector_get>

00030860 <m_assert_handler>:
	k_oops();
   30860:	4040      	eors	r0, r0
   30862:	f380 8811 	msr	BASEPRI, r0
   30866:	f04f 0003 	mov.w	r0, #3
   3086a:	df02      	svc	2
}
   3086c:	4770      	bx	lr

0003086e <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3086e:	4668      	mov	r0, sp
   30870:	f020 0107 	bic.w	r1, r0, #7
   30874:	468d      	mov	sp, r1
   30876:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   30878:	f7de fdaa 	bl	f3d0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   3087c:	f7ed ff92 	bl	1e7a4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   30880:	f7ee f87e 	bl	1e980 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   30884:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   30888:	4685      	mov	sp, r0
   3088a:	4770      	bx	lr

0003088c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3088c:	4668      	mov	r0, sp
   3088e:	f020 0107 	bic.w	r1, r0, #7
   30892:	468d      	mov	sp, r1
   30894:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   30896:	f7de fd1d 	bl	f2d4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   3089a:	f7ed ff83 	bl	1e7a4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3089e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   308a2:	4685      	mov	sp, r0
   308a4:	4770      	bx	lr

000308a6 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   308a6:	4668      	mov	r0, sp
   308a8:	f020 0107 	bic.w	r1, r0, #7
   308ac:	468d      	mov	sp, r1
   308ae:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   308b0:	f7e7 ff18 	bl	186e4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   308b4:	f7ed ff76 	bl	1e7a4 <_arch_isr_direct_pm>
   308b8:	f7ee f862 	bl	1e980 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   308bc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   308c0:	4685      	mov	sp, r0
   308c2:	4770      	bx	lr

000308c4 <nrfx_clock_stop>:
	switch (domain) {
   308c4:	2801      	cmp	r0, #1
   308c6:	d101      	bne.n	308cc <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   308c8:	f7df bbb4 	b.w	10034 <mpsl_clock_hfclk_release>
}
   308cc:	4770      	bx	lr

000308ce <nrfx_clock_enable>:
}
   308ce:	4770      	bx	lr

000308d0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   308d0:	f7df b9ce 	b.w	fc70 <MPSL_IRQ_CLOCK_Handler>

000308d4 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   308d4:	f7df bda4 	b.w	10420 <mpsl_is_initialized>

000308d8 <nrf_flash_sync_get_timestamp_begin>:
}
   308d8:	4770      	bx	lr

000308da <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   308da:	f7f8 bb4b 	b.w	28f74 <nrf_cc3xx_platform_init>

000308de <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   308de:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   308e0:	f7ed fe2c 	bl	1e53c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   308e4:	f7ed fede 	bl	1e6a4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   308e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   308ec:	f7f8 bb42 	b.w	28f74 <nrf_cc3xx_platform_init>

000308f0 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   308f0:	b538      	push	{r3, r4, r5, lr}
   308f2:	460c      	mov	r4, r1
   308f4:	4615      	mov	r5, r2
   308f6:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
   308f8:	f7fb fe89 	bl	2c60e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   308fc:	4621      	mov	r1, r4
   308fe:	42a9      	cmp	r1, r5
   30900:	d101      	bne.n	30906 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   30902:	2001      	movs	r0, #1
}
   30904:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   30906:	f811 3b01 	ldrb.w	r3, [r1], #1
   3090a:	4298      	cmp	r0, r3
   3090c:	d0f7      	beq.n	308fe <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   3090e:	2000      	movs	r0, #0
   30910:	e7f8      	b.n	30904 <bootutil_buffer_is_erased.part.0+0x14>

00030912 <boot_magic_compatible_check>:
    switch (tbl_val) {
   30912:	2804      	cmp	r0, #4
   30914:	d009      	beq.n	3092a <boot_magic_compatible_check+0x18>
   30916:	2805      	cmp	r0, #5
   30918:	d103      	bne.n	30922 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   3091a:	1e48      	subs	r0, r1, #1
   3091c:	bf18      	it	ne
   3091e:	2001      	movne	r0, #1
   30920:	4770      	bx	lr
        return tbl_val == val;
   30922:	1a43      	subs	r3, r0, r1
   30924:	4258      	negs	r0, r3
   30926:	4158      	adcs	r0, r3
   30928:	4770      	bx	lr
    switch (tbl_val) {
   3092a:	2001      	movs	r0, #1
}
   3092c:	4770      	bx	lr

0003092e <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   3092e:	b111      	cbz	r1, 30936 <bootutil_buffer_is_erased+0x8>
   30930:	b10a      	cbz	r2, 30936 <bootutil_buffer_is_erased+0x8>
   30932:	f7ff bfdd 	b.w	308f0 <bootutil_buffer_is_erased.part.0>
}
   30936:	2000      	movs	r0, #0
   30938:	4770      	bx	lr

0003093a <boot_read_flag>:
{
   3093a:	b538      	push	{r3, r4, r5, lr}
   3093c:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3093e:	2301      	movs	r3, #1
{
   30940:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   30942:	4622      	mov	r2, r4
{
   30944:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   30946:	f7fb fdd8 	bl	2c4fa <flash_area_read>
    if (rc < 0) {
   3094a:	2800      	cmp	r0, #0
   3094c:	db10      	blt.n	30970 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   3094e:	2201      	movs	r2, #1
   30950:	4621      	mov	r1, r4
   30952:	4628      	mov	r0, r5
   30954:	f7ff ffeb 	bl	3092e <bootutil_buffer_is_erased>
   30958:	b118      	cbz	r0, 30962 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   3095a:	2303      	movs	r3, #3
   3095c:	7023      	strb	r3, [r4, #0]
    return 0;
   3095e:	2000      	movs	r0, #0
}
   30960:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   30962:	7823      	ldrb	r3, [r4, #0]
   30964:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
   30966:	bf0c      	ite	eq
   30968:	2301      	moveq	r3, #1
   3096a:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   3096c:	7023      	strb	r3, [r4, #0]
   3096e:	e7f7      	b.n	30960 <boot_read_flag+0x26>
        return BOOT_EFLASH;
   30970:	2001      	movs	r0, #1
   30972:	e7f5      	b.n	30960 <boot_read_flag+0x26>

00030974 <boot_write_trailer>:
{
   30974:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   30978:	461d      	mov	r5, r3
   3097a:	4606      	mov	r6, r0
   3097c:	460f      	mov	r7, r1
   3097e:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   30980:	f7fb fe39 	bl	2c5f6 <flash_area_align>
   30984:	b2c3      	uxtb	r3, r0
    align = (inlen + align - 1) & ~(align - 1);
   30986:	fa55 f480 	uxtab	r4, r5, r0
   3098a:	3c01      	subs	r4, #1
   3098c:	425b      	negs	r3, r3
   3098e:	401c      	ands	r4, r3
   30990:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
   30992:	2c08      	cmp	r4, #8
   30994:	d81a      	bhi.n	309cc <boot_write_trailer+0x58>
    erased_val = flash_area_erased_val(fap);
   30996:	4630      	mov	r0, r6
   30998:	f7fb fe39 	bl	2c60e <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
   3099c:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
   3099e:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   309a0:	4641      	mov	r1, r8
   309a2:	4668      	mov	r0, sp
   309a4:	f7fc f989 	bl	2ccba <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   309a8:	1b62      	subs	r2, r4, r5
   309aa:	4649      	mov	r1, r9
   309ac:	eb0d 0005 	add.w	r0, sp, r5
   309b0:	f7fc f98e 	bl	2ccd0 <memset>
    rc = flash_area_write(fap, off, buf, align);
   309b4:	4623      	mov	r3, r4
   309b6:	466a      	mov	r2, sp
   309b8:	4639      	mov	r1, r7
   309ba:	4630      	mov	r0, r6
   309bc:	f7fb fdb9 	bl	2c532 <flash_area_write>
    if (rc != 0) {
   309c0:	3800      	subs	r0, #0
   309c2:	bf18      	it	ne
   309c4:	2001      	movne	r0, #1
}
   309c6:	b003      	add	sp, #12
   309c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   309cc:	f04f 30ff 	mov.w	r0, #4294967295
   309d0:	e7f9      	b.n	309c6 <boot_write_trailer+0x52>

000309d2 <boot_write_trailer_flag>:
{
   309d2:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   309d4:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   309d6:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   309da:	aa01      	add	r2, sp, #4
   309dc:	f7ff ffca 	bl	30974 <boot_write_trailer>
}
   309e0:	b003      	add	sp, #12
   309e2:	f85d fb04 	ldr.w	pc, [sp], #4

000309e6 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   309e6:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   309e8:	2201      	movs	r2, #1
   309ea:	3918      	subs	r1, #24
   309ec:	f7ff bff1 	b.w	309d2 <boot_write_trailer_flag>

000309f0 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   309f0:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   309f2:	3a18      	subs	r2, #24
   309f4:	f7ff bfa1 	b.w	3093a <boot_read_flag>

000309f8 <boot_read_swap_state_by_id>:
{
   309f8:	b513      	push	{r0, r1, r4, lr}
   309fa:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   309fc:	b2c0      	uxtb	r0, r0
   309fe:	a901      	add	r1, sp, #4
   30a00:	f7ed fae2 	bl	1dfc8 <flash_area_open>
    if (rc != 0) {
   30a04:	b950      	cbnz	r0, 30a1c <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
   30a06:	4621      	mov	r1, r4
   30a08:	9801      	ldr	r0, [sp, #4]
   30a0a:	f7f5 f9fb 	bl	25e04 <boot_read_swap_state>
   30a0e:	4604      	mov	r4, r0
    flash_area_close(fap);
   30a10:	9801      	ldr	r0, [sp, #4]
   30a12:	f7fb fd71 	bl	2c4f8 <flash_area_close>
}
   30a16:	4620      	mov	r0, r4
   30a18:	b002      	add	sp, #8
   30a1a:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   30a1c:	2401      	movs	r4, #1
   30a1e:	e7fa      	b.n	30a16 <boot_read_swap_state_by_id+0x1e>

00030a20 <boot_write_swap_info>:
{
   30a20:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   30a22:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   30a26:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   30a2a:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   30a2c:	2301      	movs	r3, #1
   30a2e:	f10d 0207 	add.w	r2, sp, #7
   30a32:	3928      	subs	r1, #40	; 0x28
   30a34:	f7ff ff9e 	bl	30974 <boot_write_trailer>
}
   30a38:	b003      	add	sp, #12
   30a3a:	f85d fb04 	ldr.w	pc, [sp], #4

00030a3e <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   30a3e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   30a40:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   30a42:	2005      	movs	r0, #5
   30a44:	a901      	add	r1, sp, #4
   30a46:	f7ed fabf 	bl	1dfc8 <flash_area_open>
    if (rc != 0) {
   30a4a:	bb80      	cbnz	r0, 30aae <boot_set_pending_multi+0x70>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   30a4c:	9801      	ldr	r0, [sp, #4]
   30a4e:	a902      	add	r1, sp, #8
   30a50:	f7f5 f9d8 	bl	25e04 <boot_read_swap_state>
    if (rc != 0) {
   30a54:	4604      	mov	r4, r0
   30a56:	b948      	cbnz	r0, 30a6c <boot_set_pending_multi+0x2e>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   30a58:	f89d 5008 	ldrb.w	r5, [sp, #8]
   30a5c:	9801      	ldr	r0, [sp, #4]
   30a5e:	2d02      	cmp	r5, #2
   30a60:	d01f      	beq.n	30aa2 <boot_set_pending_multi+0x64>
   30a62:	2d03      	cmp	r5, #3
   30a64:	d008      	beq.n	30a78 <boot_set_pending_multi+0x3a>
   30a66:	2d01      	cmp	r5, #1
   30a68:	bf18      	it	ne
   30a6a:	2403      	movne	r4, #3
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   30a6c:	9801      	ldr	r0, [sp, #4]
   30a6e:	f7fb fd43 	bl	2c4f8 <flash_area_close>
    return rc;
}
   30a72:	4620      	mov	r0, r4
   30a74:	b004      	add	sp, #16
   30a76:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   30a78:	f7f5 f9b6 	bl	25de8 <boot_write_magic>
        if (rc == 0 && permanent) {
   30a7c:	4604      	mov	r4, r0
   30a7e:	2800      	cmp	r0, #0
   30a80:	d1f4      	bne.n	30a6c <boot_set_pending_multi+0x2e>
   30a82:	b166      	cbz	r6, 30a9e <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   30a84:	9801      	ldr	r0, [sp, #4]
   30a86:	f7ff ffae 	bl	309e6 <boot_write_image_ok>
        if (rc == 0) {
   30a8a:	4604      	mov	r4, r0
   30a8c:	2800      	cmp	r0, #0
   30a8e:	d1ed      	bne.n	30a6c <boot_set_pending_multi+0x2e>
            rc = boot_write_swap_info(fap, swap_type, 0);
   30a90:	9801      	ldr	r0, [sp, #4]
   30a92:	2200      	movs	r2, #0
   30a94:	4629      	mov	r1, r5
   30a96:	f7ff ffc3 	bl	30a20 <boot_write_swap_info>
   30a9a:	4604      	mov	r4, r0
   30a9c:	e7e6      	b.n	30a6c <boot_set_pending_multi+0x2e>
                swap_type = BOOT_SWAP_TYPE_TEST;
   30a9e:	2502      	movs	r5, #2
   30aa0:	e7f6      	b.n	30a90 <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   30aa2:	4621      	mov	r1, r4
   30aa4:	6882      	ldr	r2, [r0, #8]
   30aa6:	f7fb fd77 	bl	2c598 <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   30aaa:	2403      	movs	r4, #3
        break;
   30aac:	e7de      	b.n	30a6c <boot_set_pending_multi+0x2e>
        return BOOT_EFLASH;
   30aae:	2401      	movs	r4, #1
   30ab0:	e7df      	b.n	30a72 <boot_set_pending_multi+0x34>

00030ab2 <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   30ab2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   30ab4:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   30ab6:	a901      	add	r1, sp, #4
   30ab8:	2002      	movs	r0, #2
    const struct flash_area *fap = NULL;
   30aba:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   30abc:	f7ed fa84 	bl	1dfc8 <flash_area_open>
    if (rc != 0) {
   30ac0:	b9d8      	cbnz	r0, 30afa <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   30ac2:	9801      	ldr	r0, [sp, #4]
   30ac4:	a902      	add	r1, sp, #8
   30ac6:	f7f5 f99d 	bl	25e04 <boot_read_swap_state>
    if (rc != 0) {
   30aca:	4604      	mov	r4, r0
   30acc:	b968      	cbnz	r0, 30aea <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   30ace:	f89d 3008 	ldrb.w	r3, [sp, #8]
   30ad2:	2b02      	cmp	r3, #2
   30ad4:	d00f      	beq.n	30af6 <boot_set_confirmed_multi+0x44>
   30ad6:	2b03      	cmp	r3, #3
   30ad8:	d007      	beq.n	30aea <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   30ada:	f89d 300b 	ldrb.w	r3, [sp, #11]
   30ade:	2b03      	cmp	r3, #3
   30ae0:	d103      	bne.n	30aea <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   30ae2:	9801      	ldr	r0, [sp, #4]
   30ae4:	f7ff ff7f 	bl	309e6 <boot_write_image_ok>
   30ae8:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   30aea:	9801      	ldr	r0, [sp, #4]
   30aec:	f7fb fd04 	bl	2c4f8 <flash_area_close>
    return rc;
}
   30af0:	4620      	mov	r0, r4
   30af2:	b004      	add	sp, #16
   30af4:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   30af6:	2404      	movs	r4, #4
   30af8:	e7f7      	b.n	30aea <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   30afa:	2401      	movs	r4, #1
   30afc:	e7f8      	b.n	30af0 <boot_set_confirmed_multi+0x3e>

00030afe <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   30afe:	2000      	movs	r0, #0
   30b00:	f7ff bfd7 	b.w	30ab2 <boot_set_confirmed_multi>

00030b04 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   30b04:	4700      	bx	r0

00030b06 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   30b06:	f001 b8e9 	b.w	31cdc <z_impl_k_busy_wait>

00030b0a <nrf_gpio_reconfigure>:
{
   30b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30b0c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30b0e:	a801      	add	r0, sp, #4
{
   30b10:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   30b14:	4617      	mov	r7, r2
   30b16:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30b18:	f7f5 fb66 	bl	261e8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   30b1c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   30b1e:	2f00      	cmp	r7, #0
   30b20:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   30b24:	bf14      	ite	ne
   30b26:	2302      	movne	r3, #2
   30b28:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   30b2a:	2900      	cmp	r1, #0
   30b2c:	bf18      	it	ne
   30b2e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   30b32:	2d00      	cmp	r5, #0
   30b34:	bf14      	ite	ne
   30b36:	f04f 0c0c 	movne.w	ip, #12
   30b3a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   30b3e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   30b40:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   30b44:	bf14      	ite	ne
   30b46:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   30b4a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   30b4e:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   30b50:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   30b54:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   30b58:	bf14      	ite	ne
   30b5a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   30b5e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   30b62:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   30b66:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   30b6a:	b101      	cbz	r1, 30b6e <nrf_gpio_reconfigure+0x64>
   30b6c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   30b6e:	b10f      	cbz	r7, 30b74 <nrf_gpio_reconfigure+0x6a>
   30b70:	783f      	ldrb	r7, [r7, #0]
   30b72:	007f      	lsls	r7, r7, #1
   30b74:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   30b76:	b10d      	cbz	r5, 30b7c <nrf_gpio_reconfigure+0x72>
   30b78:	782d      	ldrb	r5, [r5, #0]
   30b7a:	00ad      	lsls	r5, r5, #2
   30b7c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   30b7e:	b10c      	cbz	r4, 30b84 <nrf_gpio_reconfigure+0x7a>
   30b80:	7822      	ldrb	r2, [r4, #0]
   30b82:	0214      	lsls	r4, r2, #8
   30b84:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   30b86:	b10e      	cbz	r6, 30b8c <nrf_gpio_reconfigure+0x82>
   30b88:	7836      	ldrb	r6, [r6, #0]
   30b8a:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   30b8c:	432c      	orrs	r4, r5
   30b8e:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   30b90:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   30b94:	b003      	add	sp, #12
   30b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00030b98 <nrf_gpio_cfg_sense_set>:
{
   30b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   30b9a:	f10d 030f 	add.w	r3, sp, #15
   30b9e:	9301      	str	r3, [sp, #4]
   30ba0:	2300      	movs	r3, #0
{
   30ba2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   30ba6:	9300      	str	r3, [sp, #0]
   30ba8:	461a      	mov	r2, r3
   30baa:	4619      	mov	r1, r3
   30bac:	f7ff ffad 	bl	30b0a <nrf_gpio_reconfigure>
}
   30bb0:	b005      	add	sp, #20
   30bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00030bb6 <nrfx_nvmc_flash_size_get>:
   30bb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30bba:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   30bbc:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   30bbe:	4350      	muls	r0, r2
   30bc0:	4770      	bx	lr

00030bc2 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   30bc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30bc6:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   30bc8:	4770      	bx	lr

00030bca <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   30bca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30bce:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   30bd0:	4770      	bx	lr

00030bd2 <nrf_gpio_cfg_default>:
{
   30bd2:	b507      	push	{r0, r1, r2, lr}
   30bd4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30bd6:	a801      	add	r0, sp, #4
   30bd8:	f7f5 fe9e 	bl	26918 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30bdc:	9b01      	ldr	r3, [sp, #4]
   30bde:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30be2:	2202      	movs	r2, #2
   30be4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   30be8:	b003      	add	sp, #12
   30bea:	f85d fb04 	ldr.w	pc, [sp], #4

00030bee <nrf_gpio_pin_set>:
{
   30bee:	b507      	push	{r0, r1, r2, lr}
   30bf0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30bf2:	a801      	add	r0, sp, #4
   30bf4:	f7f5 fe90 	bl	26918 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   30bf8:	9a01      	ldr	r2, [sp, #4]
   30bfa:	2301      	movs	r3, #1
   30bfc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   30bfe:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   30c02:	b003      	add	sp, #12
   30c04:	f85d fb04 	ldr.w	pc, [sp], #4

00030c08 <nrf_gpio_pin_clear>:
{
   30c08:	b507      	push	{r0, r1, r2, lr}
   30c0a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30c0c:	a801      	add	r0, sp, #4
   30c0e:	f7f5 fe83 	bl	26918 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   30c12:	9a01      	ldr	r2, [sp, #4]
   30c14:	2301      	movs	r3, #1
   30c16:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   30c18:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   30c1c:	b003      	add	sp, #12
   30c1e:	f85d fb04 	ldr.w	pc, [sp], #4

00030c22 <transfer_byte>:
{
   30c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   30c24:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   30c28:	698a      	ldr	r2, [r1, #24]
   30c2a:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   30c2c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   30c30:	6a0b      	ldr	r3, [r1, #32]
   30c32:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   30c34:	bf3e      	ittt	cc
   30c36:	694a      	ldrcc	r2, [r1, #20]
   30c38:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   30c3c:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   30c3e:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   30c40:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   30c44:	1c53      	adds	r3, r2, #1
   30c46:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   30c48:	3202      	adds	r2, #2
    if (p_cb->abort)
   30c4a:	b13c      	cbz	r4, 30c5c <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   30c4c:	690c      	ldr	r4, [r1, #16]
   30c4e:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   30c50:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   30c52:	bf38      	it	cc
   30c54:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   30c56:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   30c58:	bf88      	it	hi
   30c5a:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   30c5c:	690d      	ldr	r5, [r1, #16]
   30c5e:	4295      	cmp	r5, r2
   30c60:	d905      	bls.n	30c6e <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   30c62:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   30c64:	5c9b      	ldrb	r3, [r3, r2]
   30c66:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   30c6a:	2001      	movs	r0, #1
   30c6c:	e00a      	b.n	30c84 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   30c6e:	698c      	ldr	r4, [r1, #24]
   30c70:	4294      	cmp	r4, r2
   30c72:	d901      	bls.n	30c78 <transfer_byte+0x56>
   30c74:	7fcb      	ldrb	r3, [r1, #31]
   30c76:	e7f6      	b.n	30c66 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   30c78:	42ab      	cmp	r3, r5
   30c7a:	d3f6      	bcc.n	30c6a <transfer_byte+0x48>
   30c7c:	42a3      	cmp	r3, r4
   30c7e:	bf2c      	ite	cs
   30c80:	2000      	movcs	r0, #0
   30c82:	2001      	movcc	r0, #1
}
   30c84:	b003      	add	sp, #12
   30c86:	bd30      	pop	{r4, r5, pc}

00030c88 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30c88:	1c43      	adds	r3, r0, #1
   30c8a:	d001      	beq.n	30c90 <spim_pin_uninit+0x8>
    nrf_gpio_cfg_default(pin);
   30c8c:	f7f5 bfe4 	b.w	26c58 <nrf_gpio_cfg_default>
}
   30c90:	4770      	bx	lr

00030c92 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   30c92:	7f83      	ldrb	r3, [r0, #30]
   30c94:	075a      	lsls	r2, r3, #29
   30c96:	d40b      	bmi.n	30cb0 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   30c98:	7fc0      	ldrb	r0, [r0, #31]
   30c9a:	28ff      	cmp	r0, #255	; 0xff
   30c9c:	d008      	beq.n	30cb0 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   30c9e:	079b      	lsls	r3, r3, #30
   30ca0:	bf58      	it	pl
   30ca2:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   30ca6:	b909      	cbnz	r1, 30cac <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   30ca8:	f7f5 bfc6 	b.w	26c38 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   30cac:	f7f5 bfe4 	b.w	26c78 <nrf_gpio_pin_set>
}
   30cb0:	4770      	bx	lr

00030cb2 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   30cb2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   30cb4:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   30cb6:	6b48      	ldr	r0, [r1, #52]	; 0x34
   30cb8:	4298      	cmp	r0, r3
{
   30cba:	b510      	push	{r4, lr}
   30cbc:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   30cc0:	d205      	bcs.n	30cce <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   30cc2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   30cc4:	5c09      	ldrb	r1, [r1, r0]
   30cc6:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   30cca:	4618      	mov	r0, r3
}
   30ccc:	e004      	b.n	30cd8 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   30cce:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   30cd2:	b110      	cbz	r0, 30cda <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30cd4:	61d3      	str	r3, [r2, #28]
            return false;
   30cd6:	2000      	movs	r0, #0
}
   30cd8:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   30cda:	6a0c      	ldr	r4, [r1, #32]
   30cdc:	0664      	lsls	r4, r4, #25
   30cde:	d503      	bpl.n	30ce8 <twi_send_byte+0x36>
   30ce0:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   30ce2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   30ce6:	e7f7      	b.n	30cd8 <twi_send_byte+0x26>
   30ce8:	6153      	str	r3, [r2, #20]
   30cea:	e7ee      	b.n	30cca <twi_send_byte+0x18>

00030cec <twi_transfer>:
{
   30cec:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30cee:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   30cf2:	4604      	mov	r4, r0
   30cf4:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   30cf6:	b12e      	cbz	r6, 30d04 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30cf8:	2300      	movs	r3, #0
   30cfa:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   30cfe:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   30d02:	2601      	movs	r6, #1
    if (p_cb->error)
   30d04:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   30d08:	b320      	cbz	r0, 30d54 <twi_transfer+0x68>
   30d0a:	2300      	movs	r3, #0
   30d0c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   30d10:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   30d14:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   30d18:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   30d1c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   30d20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   30d24:	2e00      	cmp	r6, #0
   30d26:	d068      	beq.n	30dfa <twi_transfer+0x10e>
        if (!p_cb->error)
   30d28:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   30d2c:	2300      	movs	r3, #0
   30d2e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   30d32:	bb88      	cbnz	r0, 30d98 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   30d34:	6aab      	ldr	r3, [r5, #40]	; 0x28
   30d36:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   30d38:	429a      	cmp	r2, r3
        return false;
   30d3a:	bf1c      	itt	ne
   30d3c:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   30d3e:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   30d40:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   30d44:	bf1c      	itt	ne
   30d46:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   30d4a:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   30d4e:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   30d52:	e022      	b.n	30d9a <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30d54:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   30d58:	b142      	cbz	r2, 30d6c <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30d5a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   30d5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30d62:	2301      	movs	r3, #1
   30d64:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   30d66:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   30d6a:	e7db      	b.n	30d24 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30d6c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   30d70:	b1a3      	cbz	r3, 30d9c <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30d72:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   30d76:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   30d7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   30d7c:	3301      	adds	r3, #1
   30d7e:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30d80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   30d84:	b113      	cbz	r3, 30d8c <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30d86:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   30d8a:	e7e8      	b.n	30d5e <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   30d8c:	4629      	mov	r1, r5
   30d8e:	4620      	mov	r0, r4
   30d90:	f7ff ff8f 	bl	30cb2 <twi_send_byte>
   30d94:	2800      	cmp	r0, #0
   30d96:	d1c5      	bne.n	30d24 <twi_transfer+0x38>
                    return false;
   30d98:	2000      	movs	r0, #0
}
   30d9a:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30d9c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   30da0:	2a00      	cmp	r2, #0
   30da2:	d0bf      	beq.n	30d24 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30da4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   30da8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30dac:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   30db0:	b112      	cbz	r2, 30db8 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30db2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   30db6:	e7d2      	b.n	30d5e <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   30db8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   30dba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   30dbc:	4293      	cmp	r3, r2
   30dbe:	d2b1      	bcs.n	30d24 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   30dc0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   30dc2:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   30dc6:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   30dc8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30dca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   30dcc:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30dce:	1e51      	subs	r1, r2, #1
   30dd0:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   30dd2:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30dd4:	d108      	bne.n	30de8 <twi_transfer+0xfc>
   30dd6:	6a29      	ldr	r1, [r5, #32]
   30dd8:	0649      	lsls	r1, r1, #25
   30dda:	d410      	bmi.n	30dfe <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   30ddc:	2302      	movs	r3, #2
   30dde:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30de2:	2301      	movs	r3, #1
   30de4:	6223      	str	r3, [r4, #32]
   30de6:	e79d      	b.n	30d24 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30de8:	4293      	cmp	r3, r2
   30dea:	d1fa      	bne.n	30de2 <twi_transfer+0xf6>
   30dec:	6a2b      	ldr	r3, [r5, #32]
   30dee:	065b      	lsls	r3, r3, #25
   30df0:	d598      	bpl.n	30d24 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   30df2:	2302      	movs	r3, #2
   30df4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   30df8:	e7cf      	b.n	30d9a <twi_transfer+0xae>
    return true;
   30dfa:	2001      	movs	r0, #1
   30dfc:	e7cd      	b.n	30d9a <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30dfe:	4293      	cmp	r3, r2
   30e00:	d1ef      	bne.n	30de2 <twi_transfer+0xf6>
   30e02:	e7f6      	b.n	30df2 <twi_transfer+0x106>

00030e04 <nrf_gpio_pin_set>:
{
   30e04:	b507      	push	{r0, r1, r2, lr}
   30e06:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30e08:	a801      	add	r0, sp, #4
   30e0a:	f7f6 fc2d 	bl	27668 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   30e0e:	9a01      	ldr	r2, [sp, #4]
   30e10:	2301      	movs	r3, #1
   30e12:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   30e14:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   30e18:	b003      	add	sp, #12
   30e1a:	f85d fb04 	ldr.w	pc, [sp], #4

00030e1e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   30e1e:	f7f6 bc95 	b.w	2774c <_DoInit>

00030e22 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   30e22:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   30e24:	f7ff fffb 	bl	30e1e <SEGGER_RTT_Init>

	return 0;
}
   30e28:	2000      	movs	r0, #0
   30e2a:	bd08      	pop	{r3, pc}

00030e2c <append_to_buffer.isra.0>:
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
    return encoder->writer->write(encoder->writer, data, len);
   30e2c:	6803      	ldr	r3, [r0, #0]
   30e2e:	4718      	bx	r3

00030e30 <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   30e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   30e32:	461d      	mov	r5, r3
   30e34:	b087      	sub	sp, #28
    v = cbor_htonll(v);
   30e36:	ba13      	rev	r3, r2
{
   30e38:	4614      	mov	r4, r2
    v = cbor_htonll(v);
   30e3a:	ba2a      	rev	r2, r5
   30e3c:	e9cd 2300 	strd	r2, r3, [sp]
    memcpy(where, &v, sizeof(v));
   30e40:	4669      	mov	r1, sp
{
   30e42:	4606      	mov	r6, r0
    memcpy(where, &v, sizeof(v));
   30e44:	2208      	movs	r2, #8
   30e46:	a804      	add	r0, sp, #16
{
   30e48:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    memcpy(where, &v, sizeof(v));
   30e4c:	f7fb ff35 	bl	2ccba <memcpy>
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
   30e50:	2d00      	cmp	r5, #0
   30e52:	bf08      	it	eq
   30e54:	2c18      	cmpeq	r4, #24
   30e56:	f10d 0117 	add.w	r1, sp, #23
   30e5a:	d20b      	bcs.n	30e74 <encode_number_no_update+0x44>
        *bufstart += shiftedMajorType;
   30e5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   30e60:	443b      	add	r3, r7
   30e62:	f88d 3017 	strb.w	r3, [sp, #23]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   30e66:	ab06      	add	r3, sp, #24
   30e68:	6830      	ldr	r0, [r6, #0]
   30e6a:	1a5a      	subs	r2, r3, r1
   30e6c:	f7ff ffde 	bl	30e2c <append_to_buffer.isra.0>
}
   30e70:	b007      	add	sp, #28
   30e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ui > 0xffU)
   30e74:	2d00      	cmp	r5, #0
   30e76:	bf08      	it	eq
   30e78:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
            ++more;
   30e7c:	bf2c      	ite	cs
   30e7e:	2301      	movcs	r3, #1
   30e80:	2300      	movcc	r3, #0
        if (ui > 0xffffU)
   30e82:	2d00      	cmp	r5, #0
   30e84:	bf08      	it	eq
   30e86:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
            ++more;
   30e8a:	bf28      	it	cs
   30e8c:	3301      	addcs	r3, #1
        if (ui > 0xffffffffU)
   30e8e:	2d01      	cmp	r5, #1
   30e90:	bf08      	it	eq
   30e92:	2c00      	cmpeq	r4, #0
            ++more;
   30e94:	bf24      	itt	cs
   30e96:	3301      	addcs	r3, #1
   30e98:	b2db      	uxtbcs	r3, r3
        bufstart -= (size_t)1 << more;
   30e9a:	2201      	movs	r2, #1
   30e9c:	409a      	lsls	r2, r3
   30e9e:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   30ea0:	443b      	add	r3, r7
   30ea2:	3318      	adds	r3, #24
   30ea4:	700b      	strb	r3, [r1, #0]
   30ea6:	e7de      	b.n	30e66 <encode_number_no_update+0x36>

00030ea8 <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   30ea8:	b430      	push	{r4, r5}
    ++encoder->added;
   30eaa:	6884      	ldr	r4, [r0, #8]
{
   30eac:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
   30eb0:	3401      	adds	r4, #1
   30eb2:	6084      	str	r4, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   30eb4:	9502      	str	r5, [sp, #8]
}
   30eb6:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   30eb8:	f7ff bfba 	b.w	30e30 <encode_number_no_update>

00030ebc <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   30ebc:	b530      	push	{r4, r5, lr}
   30ebe:	4605      	mov	r5, r0
   30ec0:	461c      	mov	r4, r3
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
   30ec2:	68ab      	ldr	r3, [r5, #8]
    container->writer = encoder->writer;
   30ec4:	6800      	ldr	r0, [r0, #0]
   30ec6:	6008      	str	r0, [r1, #0]
    ++encoder->added;
   30ec8:	3301      	adds	r3, #1
   30eca:	60ab      	str	r3, [r5, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
   30ecc:	f1b2 3fff 	cmp.w	r2, #4294967295
    container->added = 0;
   30ed0:	f04f 0300 	mov.w	r3, #0
   30ed4:	f004 0520 	and.w	r5, r4, #32
{
   30ed8:	b085      	sub	sp, #20
    container->added = 0;
   30eda:	608b      	str	r3, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   30edc:	60cd      	str	r5, [r1, #12]
    if (length == CborIndefiniteLength) {
   30ede:	d10d      	bne.n	30efc <create_container+0x40>
        container->flags |= CborIteratorFlag_UnknownLength;
   30ee0:	f045 0504 	orr.w	r5, r5, #4
   30ee4:	60cd      	str	r5, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   30ee6:	341f      	adds	r4, #31
    return append_to_buffer(encoder, &byte, 1);
   30ee8:	2201      	movs	r2, #1
   30eea:	f10d 010f 	add.w	r1, sp, #15
   30eee:	f88d 400f 	strb.w	r4, [sp, #15]
   30ef2:	f7ff ff9b 	bl	30e2c <append_to_buffer.isra.0>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   30ef6:	2000      	movs	r0, #0
   30ef8:	b005      	add	sp, #20
   30efa:	bd30      	pop	{r4, r5, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   30efc:	9400      	str	r4, [sp, #0]
   30efe:	4608      	mov	r0, r1
   30f00:	f7ff ff96 	bl	30e30 <encode_number_no_update>
   30f04:	e7f7      	b.n	30ef6 <create_container+0x3a>

00030f06 <cbor_encoder_init>:
    encoder->added = 0;
   30f06:	2300      	movs	r3, #0
    encoder->flags = flags;
   30f08:	e9c0 3202 	strd	r3, r2, [r0, #8]
    encoder->writer = writer;
   30f0c:	6001      	str	r1, [r0, #0]
}
   30f0e:	4770      	bx	lr

00030f10 <cbor_encode_int>:
{
   30f10:	b507      	push	{r0, r1, r2, lr}
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   30f12:	17d9      	asrs	r1, r3, #31
    return encode_number(encoder, ui, majorType);
   30f14:	f001 0120 	and.w	r1, r1, #32
   30f18:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   30f1c:	9100      	str	r1, [sp, #0]
   30f1e:	ea83 73e3 	eor.w	r3, r3, r3, asr #31
   30f22:	f7ff ffc1 	bl	30ea8 <encode_number>
}
   30f26:	b003      	add	sp, #12
   30f28:	f85d fb04 	ldr.w	pc, [sp], #4

00030f2c <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   30f2c:	f1a1 0319 	sub.w	r3, r1, #25
   30f30:	2b06      	cmp	r3, #6
{
   30f32:	b507      	push	{r0, r1, r2, lr}
    if (value >= HalfPrecisionFloat && value <= Break)
   30f34:	d908      	bls.n	30f48 <cbor_encode_simple_value+0x1c>
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   30f36:	23e0      	movs	r3, #224	; 0xe0
   30f38:	9300      	str	r3, [sp, #0]
   30f3a:	460a      	mov	r2, r1
   30f3c:	2300      	movs	r3, #0
   30f3e:	f7ff ffb3 	bl	30ea8 <encode_number>
}
   30f42:	b003      	add	sp, #12
   30f44:	f85d fb04 	ldr.w	pc, [sp], #4
        return CborErrorIllegalSimpleType;
   30f48:	f44f 7083 	mov.w	r0, #262	; 0x106
   30f4c:	e7f9      	b.n	30f42 <cbor_encode_simple_value+0x16>

00030f4e <cbor_encode_byte_string>:
{
   30f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CborError err = encode_number(encoder, length, shiftedMajorType);
   30f50:	2340      	movs	r3, #64	; 0x40
{
   30f52:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   30f54:	9300      	str	r3, [sp, #0]
   30f56:	2300      	movs	r3, #0
{
   30f58:	460d      	mov	r5, r1
   30f5a:	4616      	mov	r6, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   30f5c:	f7ff ffa4 	bl	30ea8 <encode_number>
    return append_to_buffer(encoder, string, length);
   30f60:	6820      	ldr	r0, [r4, #0]
   30f62:	4632      	mov	r2, r6
   30f64:	4629      	mov	r1, r5
}
   30f66:	b002      	add	sp, #8
   30f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
   30f6c:	f7ff bf5e 	b.w	30e2c <append_to_buffer.isra.0>

00030f70 <cbor_encode_text_string>:
{
   30f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CborError err = encode_number(encoder, length, shiftedMajorType);
   30f72:	2360      	movs	r3, #96	; 0x60
{
   30f74:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   30f76:	9300      	str	r3, [sp, #0]
   30f78:	2300      	movs	r3, #0
{
   30f7a:	460d      	mov	r5, r1
   30f7c:	4616      	mov	r6, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   30f7e:	f7ff ff93 	bl	30ea8 <encode_number>
    return append_to_buffer(encoder, string, length);
   30f82:	6820      	ldr	r0, [r4, #0]
   30f84:	4632      	mov	r2, r6
   30f86:	4629      	mov	r1, r5
}
   30f88:	b002      	add	sp, #8
   30f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
   30f8e:	f7ff bf4d 	b.w	30e2c <append_to_buffer.isra.0>

00030f92 <cbor_encoder_create_array>:
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   30f92:	2380      	movs	r3, #128	; 0x80
   30f94:	f7ff bf92 	b.w	30ebc <create_container>

00030f98 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   30f98:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   30f9a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   30f9e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   30fa2:	42a3      	cmp	r3, r4
   30fa4:	d303      	bcc.n	30fae <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
}
   30fa6:	bc10      	pop	{r4}
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   30fa8:	23a0      	movs	r3, #160	; 0xa0
   30faa:	f7ff bf87 	b.w	30ebc <create_container>
}
   30fae:	f44f 6080 	mov.w	r0, #1024	; 0x400
   30fb2:	bc10      	pop	{r4}
   30fb4:	4770      	bx	lr

00030fb6 <cbor_encoder_close_container>:
 * cbor_encoder_close_container_checked() instead.
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
   30fb6:	4603      	mov	r3, r0
   30fb8:	b507      	push	{r0, r1, r2, lr}
    encoder->writer = containerEncoder->writer;
   30fba:	6808      	ldr	r0, [r1, #0]
   30fbc:	6018      	str	r0, [r3, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   30fbe:	68cb      	ldr	r3, [r1, #12]
   30fc0:	f013 0304 	ands.w	r3, r3, #4
   30fc4:	d00a      	beq.n	30fdc <cbor_encoder_close_container+0x26>
        return append_byte_to_buffer(encoder, BreakByte);
   30fc6:	23ff      	movs	r3, #255	; 0xff
    return append_to_buffer(encoder, &byte, 1);
   30fc8:	2201      	movs	r2, #1
   30fca:	f10d 0107 	add.w	r1, sp, #7
   30fce:	f88d 3007 	strb.w	r3, [sp, #7]
   30fd2:	f7ff ff2b 	bl	30e2c <append_to_buffer.isra.0>
    return CborNoError;
}
   30fd6:	b003      	add	sp, #12
   30fd8:	f85d fb04 	ldr.w	pc, [sp], #4
    return CborNoError;
   30fdc:	4618      	mov	r0, r3
   30fde:	e7fa      	b.n	30fd6 <cbor_encoder_close_container+0x20>

00030fe0 <iterate_noop>:
}
   30fe0:	2001      	movs	r0, #1
   30fe2:	4770      	bx	lr

00030fe4 <preparse_value>:
{
   30fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    it->type = CborInvalidType;
   30fe6:	23ff      	movs	r3, #255	; 0xff
    const CborParser *parser = it->parser;
   30fe8:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   30fea:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   30fec:	6841      	ldr	r1, [r0, #4]
   30fee:	686b      	ldr	r3, [r5, #4]
   30ff0:	4299      	cmp	r1, r3
{
   30ff2:	4604      	mov	r4, r0
    if (it->offset == parser->end)
   30ff4:	d102      	bne.n	30ffc <preparse_value+0x18>
        return CborErrorUnexpectedEOF;
   30ff6:	f240 1001 	movw	r0, #257	; 0x101
}
   30ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   30ffc:	6828      	ldr	r0, [r5, #0]
   30ffe:	6803      	ldr	r3, [r0, #0]
   31000:	4798      	blx	r3
    it->extra = (descriptor &= SmallValueMask);
   31002:	f000 031f 	and.w	r3, r0, #31
    uint8_t type = descriptor & MajorTypeMask;
   31006:	f000 07e0 	and.w	r7, r0, #224	; 0xe0
    it->flags = 0;
   3100a:	2200      	movs	r2, #0
    if (descriptor > Value64Bit) {
   3100c:	2b1b      	cmp	r3, #27
    it->type = type;
   3100e:	73a7      	strb	r7, [r4, #14]
    it->flags = 0;
   31010:	73e2      	strb	r2, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   31012:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   31014:	d919      	bls.n	3104a <preparse_value+0x66>
        if (unlikely(descriptor != IndefiniteLength))
   31016:	2b1f      	cmp	r3, #31
   31018:	d007      	beq.n	3102a <preparse_value+0x46>
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   3101a:	f240 1005 	movw	r0, #261	; 0x105
   3101e:	f240 1303 	movw	r3, #259	; 0x103
   31022:	2fe0      	cmp	r7, #224	; 0xe0
   31024:	bf08      	it	eq
   31026:	4618      	moveq	r0, r3
   31028:	e7e7      	b.n	30ffa <preparse_value+0x16>
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   3102a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   3102e:	2840      	cmp	r0, #64	; 0x40
   31030:	d001      	beq.n	31036 <preparse_value+0x52>
   31032:	2880      	cmp	r0, #128	; 0x80
   31034:	d102      	bne.n	3103c <preparse_value+0x58>
            it->flags |= CborIteratorFlag_UnknownLength;
   31036:	2304      	movs	r3, #4
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   31038:	73e3      	strb	r3, [r4, #15]
   3103a:	e039      	b.n	310b0 <preparse_value+0xcc>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   3103c:	2fe0      	cmp	r7, #224	; 0xe0
   3103e:	f240 1005 	movw	r0, #261	; 0x105
   31042:	bf08      	it	eq
   31044:	f44f 7081 	moveq.w	r0, #258	; 0x102
   31048:	e7d7      	b.n	30ffa <preparse_value+0x16>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   3104a:	2b17      	cmp	r3, #23
   3104c:	bf82      	ittt	hi
   3104e:	f1a3 0118 	subhi.w	r1, r3, #24
   31052:	2201      	movhi	r2, #1
   31054:	408a      	lslhi	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   31056:	686e      	ldr	r6, [r5, #4]
   31058:	6861      	ldr	r1, [r4, #4]
   3105a:	3201      	adds	r2, #1
   3105c:	1a76      	subs	r6, r6, r1
   3105e:	42b2      	cmp	r2, r6
   31060:	d8c9      	bhi.n	30ff6 <preparse_value+0x12>
    if (majortype == NegativeIntegerType) {
   31062:	2f20      	cmp	r7, #32
    uint8_t majortype = type >> MajorTypeShift;
   31064:	ea4f 1257 	mov.w	r2, r7, lsr #5
    if (majortype == NegativeIntegerType) {
   31068:	d10c      	bne.n	31084 <preparse_value+0xa0>
        it->type = CborIntegerType;
   3106a:	f44f 7200 	mov.w	r2, #512	; 0x200
   3106e:	81e2      	strh	r2, [r4, #14]
    if (descriptor < Value8Bit)
   31070:	2b17      	cmp	r3, #23
   31072:	d91d      	bls.n	310b0 <preparse_value+0xcc>
    if (descriptor == Value8Bit)
   31074:	2b18      	cmp	r3, #24
   31076:	d12a      	bne.n	310ce <preparse_value+0xea>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   31078:	6828      	ldr	r0, [r5, #0]
   3107a:	6803      	ldr	r3, [r0, #0]
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   3107c:	3101      	adds	r1, #1
   3107e:	4798      	blx	r3
   31080:	81a0      	strh	r0, [r4, #12]
   31082:	e015      	b.n	310b0 <preparse_value+0xcc>
    } else if (majortype == SimpleTypesType) {
   31084:	2a07      	cmp	r2, #7
   31086:	d1f3      	bne.n	31070 <preparse_value+0x8c>
        switch (descriptor) {
   31088:	3b14      	subs	r3, #20
   3108a:	2b07      	cmp	r3, #7
   3108c:	d810      	bhi.n	310b0 <preparse_value+0xcc>
   3108e:	e8df f003 	tbb	[pc, r3]
   31092:	0b04      	.short	0x0b04
   31094:	0b110b0b 	.word	0x0b110b0b
   31098:	0909      	.short	0x0909
            it->extra = false;
   3109a:	2000      	movs	r0, #0
            it->type = CborBooleanType;
   3109c:	23f5      	movs	r3, #245	; 0xf5
            it->extra = false;
   3109e:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
   310a0:	73a3      	strb	r3, [r4, #14]
            break;
   310a2:	e7aa      	b.n	30ffa <preparse_value+0x16>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   310a4:	2301      	movs	r3, #1
   310a6:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   310a8:	6828      	ldr	r0, [r5, #0]
   310aa:	6803      	ldr	r3, [r0, #0]
   310ac:	4798      	blx	r3
   310ae:	73a0      	strb	r0, [r4, #14]
    } else if (majortype == SimpleTypesType) {
   310b0:	2000      	movs	r0, #0
   310b2:	e7a2      	b.n	30ffa <preparse_value+0x16>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   310b4:	6828      	ldr	r0, [r5, #0]
   310b6:	3101      	adds	r1, #1
   310b8:	6803      	ldr	r3, [r0, #0]
   310ba:	4798      	blx	r3
   310bc:	b280      	uxth	r0, r0
            if (unlikely(it->extra < 32)) {
   310be:	281f      	cmp	r0, #31
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   310c0:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   310c2:	d8f5      	bhi.n	310b0 <preparse_value+0xcc>
                it->type = CborInvalidType;
   310c4:	23ff      	movs	r3, #255	; 0xff
   310c6:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   310c8:	f44f 7083 	mov.w	r0, #262	; 0x106
   310cc:	e795      	b.n	30ffa <preparse_value+0x16>
    else if (descriptor == Value16Bit)
   310ce:	2b19      	cmp	r3, #25
   310d0:	d102      	bne.n	310d8 <preparse_value+0xf4>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   310d2:	6828      	ldr	r0, [r5, #0]
   310d4:	6843      	ldr	r3, [r0, #4]
   310d6:	e7d1      	b.n	3107c <preparse_value+0x98>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   310d8:	7be3      	ldrb	r3, [r4, #15]
   310da:	f043 0301 	orr.w	r3, r3, #1
   310de:	e7ab      	b.n	31038 <preparse_value+0x54>

000310e0 <extract_number>:
    memcpy(&result, ptr, sizeof(result));
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
   310e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   310e4:	4607      	mov	r7, r0
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   310e6:	6800      	ldr	r0, [r0, #0]
{
   310e8:	460d      	mov	r5, r1
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   310ea:	6803      	ldr	r3, [r0, #0]
   310ec:	6809      	ldr	r1, [r1, #0]
{
   310ee:	4614      	mov	r4, r2
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   310f0:	4798      	blx	r3
    ++*offset;
   310f2:	6829      	ldr	r1, [r5, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   310f4:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   310f8:	3101      	adds	r1, #1
    *len = 1;
   310fa:	f04f 0801 	mov.w	r8, #1
   310fe:	f04f 0900 	mov.w	r9, #0
    if (additional_information < Value8Bit) {
   31102:	2b17      	cmp	r3, #23
    ++*offset;
   31104:	6029      	str	r1, [r5, #0]
    *len = 1;
   31106:	e9c4 8900 	strd	r8, r9, [r4]
    if (additional_information < Value8Bit) {
   3110a:	d806      	bhi.n	3111a <extract_number+0x3a>
        *len = additional_information;
   3110c:	b2d8      	uxtb	r0, r3
   3110e:	2100      	movs	r1, #0
   31110:	e9c4 0100 	strd	r0, r1, [r4]
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
    return CborNoError;
   31114:	2000      	movs	r0, #0
}
   31116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (unlikely(additional_information > Value64Bit))
   3111a:	2b1b      	cmp	r3, #27
   3111c:	d81f      	bhi.n	3115e <extract_number+0x7e>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   3111e:	3b18      	subs	r3, #24
   31120:	2601      	movs	r6, #1
   31122:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   31124:	687b      	ldr	r3, [r7, #4]
   31126:	1a5b      	subs	r3, r3, r1
   31128:	42b3      	cmp	r3, r6
   3112a:	d31b      	bcc.n	31164 <extract_number+0x84>
    } else if (bytesNeeded == 1) {
   3112c:	2e01      	cmp	r6, #1
   3112e:	6838      	ldr	r0, [r7, #0]
   31130:	d108      	bne.n	31144 <extract_number+0x64>
        *len = p->d->get8(p->d, *offset);
   31132:	6803      	ldr	r3, [r0, #0]
        *len =  p->d->get16(p->d, *offset);
   31134:	4798      	blx	r3
   31136:	2300      	movs	r3, #0
   31138:	6020      	str	r0, [r4, #0]
   3113a:	6063      	str	r3, [r4, #4]
    *offset += bytesNeeded;
   3113c:	682b      	ldr	r3, [r5, #0]
   3113e:	4433      	add	r3, r6
   31140:	602b      	str	r3, [r5, #0]
   31142:	e7e7      	b.n	31114 <extract_number+0x34>
    } else if (bytesNeeded == 2) {
   31144:	2e02      	cmp	r6, #2
   31146:	d101      	bne.n	3114c <extract_number+0x6c>
        *len =  p->d->get16(p->d, *offset);
   31148:	6843      	ldr	r3, [r0, #4]
   3114a:	e7f3      	b.n	31134 <extract_number+0x54>
    } else if (bytesNeeded == 4) {
   3114c:	2e04      	cmp	r6, #4
   3114e:	d101      	bne.n	31154 <extract_number+0x74>
        *len =  p->d->get32(p->d, *offset);
   31150:	6883      	ldr	r3, [r0, #8]
   31152:	e7ef      	b.n	31134 <extract_number+0x54>
        *len =  p->d->get64(p->d, *offset);
   31154:	68c3      	ldr	r3, [r0, #12]
   31156:	4798      	blx	r3
   31158:	e9c4 0100 	strd	r0, r1, [r4]
   3115c:	e7ee      	b.n	3113c <extract_number+0x5c>
        return CborErrorIllegalNumber;
   3115e:	f240 1005 	movw	r0, #261	; 0x105
   31162:	e7d8      	b.n	31116 <extract_number+0x36>
        return CborErrorUnexpectedEOF;
   31164:	f240 1001 	movw	r0, #257	; 0x101
   31168:	e7d5      	b.n	31116 <extract_number+0x36>

0003116a <preparse_next_value>:
{
   3116a:	b538      	push	{r3, r4, r5, lr}
    if (it->remaining != UINT32_MAX) {
   3116c:	6885      	ldr	r5, [r0, #8]
   3116e:	1c6b      	adds	r3, r5, #1
{
   31170:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   31172:	d009      	beq.n	31188 <preparse_next_value+0x1e>
        if (it->type != CborTagType && !--it->remaining) {
   31174:	7b83      	ldrb	r3, [r0, #14]
   31176:	2bc0      	cmp	r3, #192	; 0xc0
   31178:	d017      	beq.n	311aa <preparse_next_value+0x40>
   3117a:	3d01      	subs	r5, #1
   3117c:	6085      	str	r5, [r0, #8]
   3117e:	b9a5      	cbnz	r5, 311aa <preparse_next_value+0x40>
            it->type = CborInvalidType;
   31180:	23ff      	movs	r3, #255	; 0xff
   31182:	7383      	strb	r3, [r0, #14]
}
   31184:	2000      	movs	r0, #0
   31186:	bd38      	pop	{r3, r4, r5, pc}
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   31188:	e9d0 3100 	ldrd	r3, r1, [r0]
   3118c:	685a      	ldr	r2, [r3, #4]
   3118e:	4291      	cmp	r1, r2
   31190:	d00b      	beq.n	311aa <preparse_next_value+0x40>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   31192:	6818      	ldr	r0, [r3, #0]
   31194:	6803      	ldr	r3, [r0, #0]
   31196:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   31198:	28ff      	cmp	r0, #255	; 0xff
   3119a:	d106      	bne.n	311aa <preparse_next_value+0x40>
        ++it->offset;
   3119c:	6863      	ldr	r3, [r4, #4]
        it->type = CborInvalidType;
   3119e:	73a5      	strb	r5, [r4, #14]
        ++it->offset;
   311a0:	3301      	adds	r3, #1
   311a2:	6063      	str	r3, [r4, #4]
        it->remaining = 0;
   311a4:	2300      	movs	r3, #0
   311a6:	60a3      	str	r3, [r4, #8]
        return CborNoError;
   311a8:	e7ec      	b.n	31184 <preparse_next_value+0x1a>
    return preparse_value(it);
   311aa:	4620      	mov	r0, r4
}
   311ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return preparse_value(it);
   311b0:	f7ff bf18 	b.w	30fe4 <preparse_value>

000311b4 <advance_internal>:
{
   311b4:	b513      	push	{r0, r1, r4, lr}
   311b6:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   311b8:	1d01      	adds	r1, r0, #4
   311ba:	466a      	mov	r2, sp
   311bc:	6800      	ldr	r0, [r0, #0]
   311be:	f7ff ff8f 	bl	310e0 <extract_number>
    if (err != CborNoError) {
   311c2:	b958      	cbnz	r0, 311dc <advance_internal+0x28>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   311c4:	7ba3      	ldrb	r3, [r4, #14]
   311c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   311ca:	2b40      	cmp	r3, #64	; 0x40
        it->offset += length;
   311cc:	bf01      	itttt	eq
   311ce:	6863      	ldreq	r3, [r4, #4]
   311d0:	9a00      	ldreq	r2, [sp, #0]
   311d2:	189b      	addeq	r3, r3, r2
   311d4:	6063      	streq	r3, [r4, #4]
    return preparse_next_value(it);
   311d6:	4620      	mov	r0, r4
   311d8:	f7ff ffc7 	bl	3116a <preparse_next_value>
}
   311dc:	b002      	add	sp, #8
   311de:	bd10      	pop	{r4, pc}

000311e0 <iterate_string_chunks>:
{
   311e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   311e4:	b08b      	sub	sp, #44	; 0x2c
   311e6:	4692      	mov	sl, r2
    if (cbor_value_is_length_known(value)) {
   311e8:	7bc2      	ldrb	r2, [r0, #15]
{
   311ea:	461e      	mov	r6, r3
   311ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   311ee:	9301      	str	r3, [sp, #4]
    if (cbor_value_is_length_known(value)) {
   311f0:	0752      	lsls	r2, r2, #29
    int offset = value->offset;
   311f2:	6843      	ldr	r3, [r0, #4]
   311f4:	9307      	str	r3, [sp, #28]
{
   311f6:	4604      	mov	r4, r0
   311f8:	468b      	mov	fp, r1
    if (cbor_value_is_length_known(value)) {
   311fa:	d446      	bmi.n	3128a <iterate_string_chunks+0xaa>
    CborError err = extract_number(parser, offset, &v);
   311fc:	6800      	ldr	r0, [r0, #0]
   311fe:	aa08      	add	r2, sp, #32
   31200:	a907      	add	r1, sp, #28
   31202:	f7ff ff6d 	bl	310e0 <extract_number>
    if (err) {
   31206:	b980      	cbnz	r0, 3122a <iterate_string_chunks+0x4a>
    *len = v;
   31208:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    if (v != *len)
   3120c:	4581      	cmp	r9, r0
   3120e:	bf08      	it	eq
   31210:	45c0      	cmpeq	r8, r8
    *len = v;
   31212:	4645      	mov	r5, r8
    if (v != *len)
   31214:	d168      	bne.n	312e8 <iterate_string_chunks+0x108>
        if (total > (size_t)(value->parser->end - offset))
   31216:	f8d4 c000 	ldr.w	ip, [r4]
   3121a:	9a07      	ldr	r2, [sp, #28]
   3121c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   31220:	1a9b      	subs	r3, r3, r2
   31222:	4543      	cmp	r3, r8
   31224:	d204      	bcs.n	31230 <iterate_string_chunks+0x50>
            return CborErrorUnexpectedEOF;
   31226:	f240 1001 	movw	r0, #257	; 0x101
}
   3122a:	b00b      	add	sp, #44	; 0x2c
   3122c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (total <= *buflen)
   31230:	f8da 3000 	ldr.w	r3, [sl]
   31234:	4543      	cmp	r3, r8
   31236:	d308      	bcc.n	3124a <iterate_string_chunks+0x6a>
            *result = !!func(value->parser->d, buffer, offset, total);
   31238:	f8dc 0000 	ldr.w	r0, [ip]
   3123c:	9f15      	ldr	r7, [sp, #84]	; 0x54
   3123e:	4643      	mov	r3, r8
   31240:	4659      	mov	r1, fp
   31242:	47b8      	blx	r7
   31244:	3800      	subs	r0, #0
   31246:	bf18      	it	ne
   31248:	2001      	movne	r0, #1
        offset += total;
   3124a:	9b07      	ldr	r3, [sp, #28]
            *result = false;
   3124c:	7030      	strb	r0, [r6, #0]
        offset += total;
   3124e:	4443      	add	r3, r8
                ++offset;
   31250:	9307      	str	r3, [sp, #28]
    if (*result && *buflen > total) {
   31252:	7833      	ldrb	r3, [r6, #0]
   31254:	b14b      	cbz	r3, 3126a <iterate_string_chunks+0x8a>
   31256:	f8da 3000 	ldr.w	r3, [sl]
   3125a:	42ab      	cmp	r3, r5
   3125c:	d905      	bls.n	3126a <iterate_string_chunks+0x8a>
        if(buffer) {
   3125e:	f1bb 0f00 	cmp.w	fp, #0
   31262:	d002      	beq.n	3126a <iterate_string_chunks+0x8a>
            *(buffer + total) = '\0';
   31264:	2300      	movs	r3, #0
   31266:	f80b 3005 	strb.w	r3, [fp, r5]
    if (next) {
   3126a:	9b01      	ldr	r3, [sp, #4]
    *buflen = total;
   3126c:	f8ca 5000 	str.w	r5, [sl]
    if (next) {
   31270:	2b00      	cmp	r3, #0
   31272:	d062      	beq.n	3133a <iterate_string_chunks+0x15a>
        *next = *value;
   31274:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   31278:	9c01      	ldr	r4, [sp, #4]
   3127a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   3127e:	9b07      	ldr	r3, [sp, #28]
   31280:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   31282:	4620      	mov	r0, r4
   31284:	f7ff ff71 	bl	3116a <preparse_next_value>
   31288:	e7cf      	b.n	3122a <iterate_string_chunks+0x4a>
        ++offset;
   3128a:	3301      	adds	r3, #1
   3128c:	9307      	str	r3, [sp, #28]
        total = 0;
   3128e:	2500      	movs	r5, #0
        *result = true;
   31290:	2301      	movs	r3, #1
   31292:	7033      	strb	r3, [r6, #0]
                *result = false;
   31294:	46a9      	mov	r9, r5
            if (offset == value->parser->end)
   31296:	6823      	ldr	r3, [r4, #0]
   31298:	9907      	ldr	r1, [sp, #28]
   3129a:	685a      	ldr	r2, [r3, #4]
   3129c:	428a      	cmp	r2, r1
   3129e:	d0c2      	beq.n	31226 <iterate_string_chunks+0x46>
            val = value->parser->d->get8(value->parser->d, offset);
   312a0:	6818      	ldr	r0, [r3, #0]
   312a2:	6803      	ldr	r3, [r0, #0]
   312a4:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   312a6:	28ff      	cmp	r0, #255	; 0xff
   312a8:	d102      	bne.n	312b0 <iterate_string_chunks+0xd0>
                ++offset;
   312aa:	9b07      	ldr	r3, [sp, #28]
   312ac:	3301      	adds	r3, #1
   312ae:	e7cf      	b.n	31250 <iterate_string_chunks+0x70>
            if ((val & MajorTypeMask) != value->type)
   312b0:	7ba3      	ldrb	r3, [r4, #14]
   312b2:	f020 001f 	bic.w	r0, r0, #31
   312b6:	4298      	cmp	r0, r3
   312b8:	d13c      	bne.n	31334 <iterate_string_chunks+0x154>
    CborError err = extract_number(parser, offset, &v);
   312ba:	6820      	ldr	r0, [r4, #0]
   312bc:	aa08      	add	r2, sp, #32
   312be:	a907      	add	r1, sp, #28
   312c0:	f7ff ff0e 	bl	310e0 <extract_number>
    if (err) {
   312c4:	2800      	cmp	r0, #0
   312c6:	d1b0      	bne.n	3122a <iterate_string_chunks+0x4a>
    *len = v;
   312c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   312cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   312d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    if (v != *len)
   312d4:	e9cd 8004 	strd	r8, r0, [sp, #16]
   312d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   312dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   312e0:	428b      	cmp	r3, r1
   312e2:	bf08      	it	eq
   312e4:	4282      	cmpeq	r2, r0
   312e6:	d002      	beq.n	312ee <iterate_string_chunks+0x10e>
                return CborErrorDataTooLarge;
   312e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   312ec:	e79d      	b.n	3122a <iterate_string_chunks+0x4a>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   312ee:	eb15 0808 	adds.w	r8, r5, r8
   312f2:	d2f9      	bcs.n	312e8 <iterate_string_chunks+0x108>
            if (chunkLen > (size_t)(value->parser->end - offset))
   312f4:	6820      	ldr	r0, [r4, #0]
   312f6:	9a07      	ldr	r2, [sp, #28]
   312f8:	6843      	ldr	r3, [r0, #4]
   312fa:	9904      	ldr	r1, [sp, #16]
   312fc:	1a9b      	subs	r3, r3, r2
   312fe:	428b      	cmp	r3, r1
   31300:	d391      	bcc.n	31226 <iterate_string_chunks+0x46>
            if (*result && *buflen >= newTotal)
   31302:	7833      	ldrb	r3, [r6, #0]
   31304:	b19b      	cbz	r3, 3132e <iterate_string_chunks+0x14e>
   31306:	f8da 3000 	ldr.w	r3, [sl]
   3130a:	4543      	cmp	r3, r8
   3130c:	d30f      	bcc.n	3132e <iterate_string_chunks+0x14e>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   3130e:	eb0b 0105 	add.w	r1, fp, r5
   31312:	9b04      	ldr	r3, [sp, #16]
   31314:	6800      	ldr	r0, [r0, #0]
   31316:	9d15      	ldr	r5, [sp, #84]	; 0x54
   31318:	47a8      	blx	r5
   3131a:	3800      	subs	r0, #0
   3131c:	bf18      	it	ne
   3131e:	2001      	movne	r0, #1
   31320:	7030      	strb	r0, [r6, #0]
            offset += chunkLen;
   31322:	9b07      	ldr	r3, [sp, #28]
   31324:	9a02      	ldr	r2, [sp, #8]
   31326:	4413      	add	r3, r2
   31328:	9307      	str	r3, [sp, #28]
   3132a:	4645      	mov	r5, r8
        while (true) {
   3132c:	e7b3      	b.n	31296 <iterate_string_chunks+0xb6>
                *result = false;
   3132e:	f886 9000 	strb.w	r9, [r6]
   31332:	e7f6      	b.n	31322 <iterate_string_chunks+0x142>
                return CborErrorIllegalType;
   31334:	f44f 7082 	mov.w	r0, #260	; 0x104
   31338:	e777      	b.n	3122a <iterate_string_chunks+0x4a>
    return CborNoError;
   3133a:	9801      	ldr	r0, [sp, #4]
   3133c:	e775      	b.n	3122a <iterate_string_chunks+0x4a>

0003133e <_cbor_value_decode_int64_internal>:
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   3133e:	6803      	ldr	r3, [r0, #0]
{
   31340:	b570      	push	{r4, r5, r6, lr}
   31342:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   31344:	6818      	ldr	r0, [r3, #0]
   31346:	6861      	ldr	r1, [r4, #4]
   31348:	6803      	ldr	r3, [r0, #0]
   3134a:	4798      	blx	r3
    if ((val & 1) == (Value32Bit & 1))
   3134c:	e9d4 3100 	ldrd	r3, r1, [r4]
   31350:	f010 0501 	ands.w	r5, r0, #1
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   31354:	6818      	ldr	r0, [r3, #0]
    if ((val & 1) == (Value32Bit & 1))
   31356:	d004      	beq.n	31362 <_cbor_value_decode_int64_internal+0x24>
}
   31358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   3135c:	68c3      	ldr	r3, [r0, #12]
   3135e:	3101      	adds	r1, #1
   31360:	4718      	bx	r3
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   31362:	6883      	ldr	r3, [r0, #8]
   31364:	3101      	adds	r1, #1
   31366:	4798      	blx	r3
}
   31368:	4629      	mov	r1, r5
   3136a:	bd70      	pop	{r4, r5, r6, pc}

0003136c <cbor_parser_init>:
{
   3136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3136e:	4614      	mov	r4, r2
   31370:	4606      	mov	r6, r0
   31372:	460f      	mov	r7, r1
    memset(parser, 0, sizeof(*parser));
   31374:	220c      	movs	r2, #12
   31376:	4620      	mov	r0, r4
   31378:	2100      	movs	r1, #0
{
   3137a:	461d      	mov	r5, r3
    memset(parser, 0, sizeof(*parser));
   3137c:	f7fb fca8 	bl	2ccd0 <memset>
    parser->end = d->message_size;
   31380:	69b3      	ldr	r3, [r6, #24]
    parser->d = d;
   31382:	6026      	str	r6, [r4, #0]
    parser->flags = flags;
   31384:	e9c4 3701 	strd	r3, r7, [r4, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   31388:	2200      	movs	r2, #0
   3138a:	2301      	movs	r3, #1
   3138c:	e9c5 2301 	strd	r2, r3, [r5, #4]
    it->parser = parser;
   31390:	602c      	str	r4, [r5, #0]
    return preparse_value(it);
   31392:	4628      	mov	r0, r5
}
   31394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return preparse_value(it);
   31398:	f7ff be24 	b.w	30fe4 <preparse_value>

0003139c <cbor_value_enter_container>:
{
   3139c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3139e:	4605      	mov	r5, r0
   313a0:	460c      	mov	r4, r1
    *recursed = *it;
   313a2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   313a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   313a8:	7beb      	ldrb	r3, [r5, #15]
   313aa:	f013 0604 	ands.w	r6, r3, #4
   313ae:	d012      	beq.n	313d6 <cbor_value_enter_container+0x3a>
        recursed->remaining = UINT32_MAX;
   313b0:	f04f 33ff 	mov.w	r3, #4294967295
        ++recursed->offset;
   313b4:	3101      	adds	r1, #1
        recursed->remaining = UINT32_MAX;
   313b6:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   313b8:	6061      	str	r1, [r4, #4]
        err = preparse_value(recursed);
   313ba:	4620      	mov	r0, r4
   313bc:	f7ff fe12 	bl	30fe4 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   313c0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   313c4:	d11b      	bne.n	313fe <cbor_value_enter_container+0x62>
        ++recursed->offset;
   313c6:	6863      	ldr	r3, [r4, #4]
   313c8:	3301      	adds	r3, #1
   313ca:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   313cc:	23ff      	movs	r3, #255	; 0xff
    recursed->remaining = 0;
   313ce:	2000      	movs	r0, #0
    recursed->type = CborInvalidType;
   313d0:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   313d2:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   313d4:	e013      	b.n	313fe <cbor_value_enter_container+0x62>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   313d6:	466a      	mov	r2, sp
   313d8:	1d21      	adds	r1, r4, #4
   313da:	f7ff fe81 	bl	310e0 <extract_number>
        recursed->remaining = (uint32_t)len;
   313de:	e9dd 2300 	ldrd	r2, r3, [sp]
        if (recursed->remaining != len || len == UINT32_MAX) {
   313e2:	42b3      	cmp	r3, r6
   313e4:	bf08      	it	eq
   313e6:	4292      	cmpeq	r2, r2
        recursed->remaining = (uint32_t)len;
   313e8:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   313ea:	d104      	bne.n	313f6 <cbor_value_enter_container+0x5a>
   313ec:	2b00      	cmp	r3, #0
   313ee:	bf08      	it	eq
   313f0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   313f4:	d105      	bne.n	31402 <cbor_value_enter_container+0x66>
            recursed->offset = it->offset;
   313f6:	686b      	ldr	r3, [r5, #4]
   313f8:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   313fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   313fe:	b002      	add	sp, #8
   31400:	bd70      	pop	{r4, r5, r6, pc}
        if (recursed->type == CborMapType) {
   31402:	7ba1      	ldrb	r1, [r4, #14]
   31404:	29a0      	cmp	r1, #160	; 0xa0
   31406:	d103      	bne.n	31410 <cbor_value_enter_container+0x74>
            if (recursed->remaining > UINT32_MAX / 2) {
   31408:	2a00      	cmp	r2, #0
   3140a:	dbf4      	blt.n	313f6 <cbor_value_enter_container+0x5a>
            recursed->remaining *= 2;
   3140c:	0051      	lsls	r1, r2, #1
   3140e:	60a1      	str	r1, [r4, #8]
        if (len != 0)
   31410:	4313      	orrs	r3, r2
   31412:	d0db      	beq.n	313cc <cbor_value_enter_container+0x30>
            return preparse_value(recursed);
   31414:	4620      	mov	r0, r4
   31416:	f7ff fde5 	bl	30fe4 <preparse_value>
   3141a:	e7f0      	b.n	313fe <cbor_value_enter_container+0x62>

0003141c <cbor_value_leave_container>:
    it->offset = recursed->offset;
   3141c:	684b      	ldr	r3, [r1, #4]
   3141e:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   31420:	f7ff bea3 	b.w	3116a <preparse_next_value>

00031424 <advance_recursive>:
{
   31424:	b530      	push	{r4, r5, lr}
    if (is_fixed_type(it->type))
   31426:	7b83      	ldrb	r3, [r0, #14]
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   31428:	f003 02df 	and.w	r2, r3, #223	; 0xdf
   3142c:	2a40      	cmp	r2, #64	; 0x40
{
   3142e:	b085      	sub	sp, #20
   31430:	4604      	mov	r4, r0
   31432:	460d      	mov	r5, r1
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   31434:	d007      	beq.n	31446 <advance_recursive+0x22>
   31436:	2b80      	cmp	r3, #128	; 0x80
   31438:	d010      	beq.n	3145c <advance_recursive+0x38>
    if (is_fixed_type(it->type))
   3143a:	2ba0      	cmp	r3, #160	; 0xa0
   3143c:	d00e      	beq.n	3145c <advance_recursive+0x38>
        return advance_internal(it);
   3143e:	f7ff feb9 	bl	311b4 <advance_internal>
}
   31442:	b005      	add	sp, #20
   31444:	bd30      	pop	{r4, r5, pc}
    if (!cbor_value_is_container(it)) {
   31446:	2ba0      	cmp	r3, #160	; 0xa0
   31448:	d008      	beq.n	3145c <advance_recursive+0x38>
        size_t len = SIZE_MAX;
   3144a:	f04f 33ff 	mov.w	r3, #4294967295
   3144e:	9300      	str	r3, [sp, #0]
        return _cbor_value_copy_string(it, NULL, &len, it);
   31450:	466a      	mov	r2, sp
   31452:	4603      	mov	r3, r0
   31454:	2100      	movs	r1, #0
   31456:	f7f6 f9af 	bl	277b8 <_cbor_value_copy_string>
   3145a:	e7f2      	b.n	31442 <advance_recursive+0x1e>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   3145c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   31460:	d015      	beq.n	3148e <advance_recursive+0x6a>
    err = cbor_value_enter_container(it, &recursed);
   31462:	4669      	mov	r1, sp
   31464:	4620      	mov	r0, r4
   31466:	f7ff ff99 	bl	3139c <cbor_value_enter_container>
    if (err)
   3146a:	2800      	cmp	r0, #0
   3146c:	d1e9      	bne.n	31442 <advance_recursive+0x1e>
        err = advance_recursive(&recursed, nestingLevel + 1);
   3146e:	3501      	adds	r5, #1
    while (!cbor_value_at_end(&recursed)) {
   31470:	9b02      	ldr	r3, [sp, #8]
   31472:	b92b      	cbnz	r3, 31480 <advance_recursive+0x5c>
    it->offset = recursed->offset;
   31474:	9b01      	ldr	r3, [sp, #4]
   31476:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   31478:	4620      	mov	r0, r4
   3147a:	f7ff fe76 	bl	3116a <preparse_next_value>
    return cbor_value_leave_container(it, &recursed);
   3147e:	e7e0      	b.n	31442 <advance_recursive+0x1e>
        err = advance_recursive(&recursed, nestingLevel + 1);
   31480:	4629      	mov	r1, r5
   31482:	4668      	mov	r0, sp
   31484:	f7ff ffce 	bl	31424 <advance_recursive>
        if (err)
   31488:	2800      	cmp	r0, #0
   3148a:	d0f1      	beq.n	31470 <advance_recursive+0x4c>
   3148c:	e7d9      	b.n	31442 <advance_recursive+0x1e>
        return CborErrorNestingTooDeep;
   3148e:	f240 4001 	movw	r0, #1025	; 0x401
   31492:	e7d6      	b.n	31442 <advance_recursive+0x1e>

00031494 <cbor_value_advance>:
    if (!it->remaining)
   31494:	6883      	ldr	r3, [r0, #8]
   31496:	b113      	cbz	r3, 3149e <cbor_value_advance+0xa>
    return advance_recursive(it, 0);
   31498:	2100      	movs	r1, #0
   3149a:	f7ff bfc3 	b.w	31424 <advance_recursive>
}
   3149e:	2003      	movs	r0, #3
   314a0:	4770      	bx	lr

000314a2 <cbor_value_calculate_string_length>:
    *len = SIZE_MAX;
   314a2:	f04f 33ff 	mov.w	r3, #4294967295
   314a6:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   314a8:	2300      	movs	r3, #0
{
   314aa:	460a      	mov	r2, r1
    return _cbor_value_copy_string(value, NULL, len, NULL);
   314ac:	4619      	mov	r1, r3
   314ae:	f7f6 b983 	b.w	277b8 <_cbor_value_copy_string>

000314b2 <cbor_value_get_half_float>:
CborError cbor_value_get_half_float(const CborValue *value, void *result)
{
    assert(cbor_value_is_half_float(value));

    /* size has been computed already */
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   314b2:	6802      	ldr	r2, [r0, #0]
{
   314b4:	4603      	mov	r3, r0
   314b6:	b513      	push	{r0, r1, r4, lr}
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   314b8:	6810      	ldr	r0, [r2, #0]
{
   314ba:	460c      	mov	r4, r1
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   314bc:	6859      	ldr	r1, [r3, #4]
   314be:	6843      	ldr	r3, [r0, #4]
   314c0:	3101      	adds	r1, #1
   314c2:	4798      	blx	r3
    memcpy(result, &v, sizeof(v));
   314c4:	2202      	movs	r2, #2
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   314c6:	f8ad 0006 	strh.w	r0, [sp, #6]
    memcpy(result, &v, sizeof(v));
   314ca:	f10d 0106 	add.w	r1, sp, #6
   314ce:	4620      	mov	r0, r4
   314d0:	f7fb fbf3 	bl	2ccba <memcpy>
    return CborNoError;
}
   314d4:	2000      	movs	r0, #0
   314d6:	b002      	add	sp, #8
   314d8:	bd10      	pop	{r4, pc}

000314da <z_device_state_init>:
}
   314da:	4770      	bx	lr

000314dc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   314dc:	b138      	cbz	r0, 314ee <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   314de:	68c3      	ldr	r3, [r0, #12]
   314e0:	8818      	ldrh	r0, [r3, #0]
   314e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   314e6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   314ea:	4258      	negs	r0, r3
   314ec:	4158      	adcs	r0, r3
}
   314ee:	4770      	bx	lr

000314f0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   314f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   314f2:	4605      	mov	r5, r0
   314f4:	460e      	mov	r6, r1
	__asm__ volatile(
   314f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   314fa:	f3ef 8711 	mrs	r7, BASEPRI
   314fe:	f383 8812 	msr	BASEPRI_MAX, r3
   31502:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   31506:	f7f7 f9fb 	bl	28900 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   3150a:	4631      	mov	r1, r6
   3150c:	4604      	mov	r4, r0
   3150e:	4628      	mov	r0, r5
   31510:	f7ff f999 	bl	30846 <k_sys_fatal_error_handler>
	__asm__ volatile(
   31514:	f387 8811 	msr	BASEPRI, r7
   31518:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   3151c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   3151e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   31522:	f7ed bbaf 	b.w	1ec84 <z_impl_k_thread_abort>

00031526 <k_heap_init>:
{
   31526:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   31528:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3152c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   31530:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   31532:	f7fa bd04 	b.w	2bf3e <sys_heap_init>

00031536 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   31536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3153a:	b087      	sub	sp, #28
   3153c:	4604      	mov	r4, r0
   3153e:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   31540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   31544:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   31546:	f000 fbcd 	bl	31ce4 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3154a:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   3154e:	4605      	mov	r5, r0
   31550:	4688      	mov	r8, r1
	__asm__ volatile(
   31552:	f04f 0340 	mov.w	r3, #64	; 0x40
   31556:	f3ef 8b11 	mrs	fp, BASEPRI
   3155a:	f383 8812 	msr	BASEPRI_MAX, r3
   3155e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   31562:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   31566:	463a      	mov	r2, r7
   31568:	4631      	mov	r1, r6
   3156a:	4620      	mov	r0, r4
   3156c:	f7fa fc7f 	bl	2be6e <sys_heap_aligned_alloc>
   31570:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   31572:	f7f7 fb9d 	bl	28cb0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   31576:	9b05      	ldr	r3, [sp, #20]
   31578:	b13b      	cbz	r3, 3158a <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   3157a:	f38b 8811 	msr	BASEPRI, fp
   3157e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   31582:	4618      	mov	r0, r3
   31584:	b007      	add	sp, #28
   31586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   3158a:	1a2a      	subs	r2, r5, r0
   3158c:	9202      	str	r2, [sp, #8]
   3158e:	eb68 0201 	sbc.w	r2, r8, r1
   31592:	9203      	str	r2, [sp, #12]
   31594:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   31598:	2901      	cmp	r1, #1
   3159a:	f172 0200 	sbcs.w	r2, r2, #0
   3159e:	dbec      	blt.n	3157a <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   315a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   315a4:	4659      	mov	r1, fp
   315a6:	e9cd 2300 	strd	r2, r3, [sp]
   315aa:	4648      	mov	r0, r9
   315ac:	4652      	mov	r2, sl
   315ae:	f7f7 f845 	bl	2863c <z_pend_curr>
	__asm__ volatile(
   315b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   315b6:	f3ef 8b11 	mrs	fp, BASEPRI
   315ba:	f383 8812 	msr	BASEPRI_MAX, r3
   315be:	f3bf 8f6f 	isb	sy
   315c2:	e7d0      	b.n	31566 <k_heap_aligned_alloc+0x30>

000315c4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   315c4:	b538      	push	{r3, r4, r5, lr}
   315c6:	4604      	mov	r4, r0
   315c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   315cc:	f3ef 8511 	mrs	r5, BASEPRI
   315d0:	f383 8812 	msr	BASEPRI_MAX, r3
   315d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   315d8:	f7fa fc10 	bl	2bdfc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   315dc:	f104 000c 	add.w	r0, r4, #12
   315e0:	f000 fb0b 	bl	31bfa <z_unpend_all>
   315e4:	b130      	cbz	r0, 315f4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   315e6:	4629      	mov	r1, r5
   315e8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   315ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   315f0:	f7f6 beca 	b.w	28388 <z_reschedule>
	__asm__ volatile(
   315f4:	f385 8811 	msr	BASEPRI, r5
   315f8:	f3bf 8f6f 	isb	sy
}
   315fc:	bd38      	pop	{r3, r4, r5, pc}

000315fe <k_mem_slab_init>:
{
   315fe:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   31600:	2400      	movs	r4, #0
   31602:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   31604:	ea41 0402 	orr.w	r4, r1, r2
   31608:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   3160c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   31610:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   31612:	d10c      	bne.n	3162e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   31614:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   31616:	42a3      	cmp	r3, r4
   31618:	d103      	bne.n	31622 <k_mem_slab_init+0x24>
   3161a:	e9c0 0000 	strd	r0, r0, [r0]
}
   3161e:	2000      	movs	r0, #0
}
   31620:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   31622:	6945      	ldr	r5, [r0, #20]
   31624:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   31626:	3401      	adds	r4, #1
		slab->free_list = p;
   31628:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   3162a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   3162c:	e7f3      	b.n	31616 <k_mem_slab_init+0x18>
		return -EINVAL;
   3162e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   31632:	e7f5      	b.n	31620 <k_mem_slab_init+0x22>

00031634 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   31634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31636:	4604      	mov	r4, r0
   31638:	460d      	mov	r5, r1
	__asm__ volatile(
   3163a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3163e:	f3ef 8611 	mrs	r6, BASEPRI
   31642:	f383 8812 	msr	BASEPRI_MAX, r3
   31646:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   3164a:	6947      	ldr	r7, [r0, #20]
   3164c:	b977      	cbnz	r7, 3166c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3164e:	f000 fabc 	bl	31bca <z_unpend_first_thread>

		if (pending_thread != NULL) {
   31652:	b158      	cbz	r0, 3166c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   31654:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   31656:	6142      	str	r2, [r0, #20]
   31658:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   3165a:	f000 fa42 	bl	31ae2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   3165e:	4631      	mov	r1, r6
   31660:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   31664:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   31668:	f7f6 be8e 	b.w	28388 <z_reschedule>
	**(char ***) mem = slab->free_list;
   3166c:	682b      	ldr	r3, [r5, #0]
   3166e:	6962      	ldr	r2, [r4, #20]
   31670:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   31672:	682b      	ldr	r3, [r5, #0]
   31674:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   31676:	69a3      	ldr	r3, [r4, #24]
   31678:	3b01      	subs	r3, #1
   3167a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   3167c:	f386 8811 	msr	BASEPRI, r6
   31680:	f3bf 8f6f 	isb	sy
}
   31684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00031686 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   31686:	f3ef 8005 	mrs	r0, IPSR
}
   3168a:	3800      	subs	r0, #0
   3168c:	bf18      	it	ne
   3168e:	2001      	movne	r0, #1
   31690:	4770      	bx	lr

00031692 <z_impl_k_thread_name_set>:
}
   31692:	f06f 0057 	mvn.w	r0, #87	; 0x57
   31696:	4770      	bx	lr

00031698 <z_impl_k_thread_start>:
	z_sched_start(thread);
   31698:	f7f6 bf74 	b.w	28584 <z_sched_start>

0003169c <z_pm_save_idle_exit>:
{
   3169c:	b508      	push	{r3, lr}
	pm_system_resume();
   3169e:	f7ec fd5b 	bl	1e158 <pm_system_resume>
}
   316a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   316a6:	f7ff b8cd 	b.w	30844 <sys_clock_idle_exit>

000316aa <z_impl_k_mutex_init>:
{
   316aa:	4603      	mov	r3, r0
	mutex->owner = NULL;
   316ac:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   316ae:	e9c3 0002 	strd	r0, r0, [r3, #8]
   316b2:	e9c3 3300 	strd	r3, r3, [r3]
}
   316b6:	4770      	bx	lr

000316b8 <queue_insert>:
{
   316b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   316bc:	4699      	mov	r9, r3
   316be:	4604      	mov	r4, r0
   316c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   316c4:	460d      	mov	r5, r1
   316c6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   316c8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   316cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   316d0:	f3ef 8711 	mrs	r7, BASEPRI
   316d4:	f382 8812 	msr	BASEPRI_MAX, r2
   316d8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   316dc:	b103      	cbz	r3, 316e0 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   316de:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   316e0:	4630      	mov	r0, r6
   316e2:	f000 fa72 	bl	31bca <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   316e6:	b158      	cbz	r0, 31700 <queue_insert+0x48>
   316e8:	2400      	movs	r4, #0
   316ea:	67c4      	str	r4, [r0, #124]	; 0x7c
   316ec:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   316f0:	f000 f9f7 	bl	31ae2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   316f4:	4630      	mov	r0, r6
   316f6:	4639      	mov	r1, r7
   316f8:	f7f6 fe46 	bl	28388 <z_reschedule>
	return 0;
   316fc:	2000      	movs	r0, #0
   316fe:	e00c      	b.n	3171a <queue_insert+0x62>
	if (alloc) {
   31700:	f1b9 0f00 	cmp.w	r9, #0
   31704:	d01b      	beq.n	3173e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   31706:	2108      	movs	r1, #8
   31708:	f7f7 fc1c 	bl	28f44 <z_thread_aligned_alloc>
		if (anode == NULL) {
   3170c:	b938      	cbnz	r0, 3171e <queue_insert+0x66>
	__asm__ volatile(
   3170e:	f387 8811 	msr	BASEPRI, r7
   31712:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   31716:	f06f 000b 	mvn.w	r0, #11
}
   3171a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   3171e:	2301      	movs	r3, #1
		anode->data = data;
   31720:	f8c0 8004 	str.w	r8, [r0, #4]
   31724:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   31726:	6803      	ldr	r3, [r0, #0]
   31728:	f003 0203 	and.w	r2, r3, #3
   3172c:	b95d      	cbnz	r5, 31746 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3172e:	6823      	ldr	r3, [r4, #0]
   31730:	4313      	orrs	r3, r2
   31732:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   31734:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   31736:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   31738:	b973      	cbnz	r3, 31758 <queue_insert+0xa0>
	list->tail = node;
   3173a:	6060      	str	r0, [r4, #4]
}
   3173c:	e00c      	b.n	31758 <queue_insert+0xa0>
	node->next_and_flags = flags;
   3173e:	f8c8 9000 	str.w	r9, [r8]
}
   31742:	4640      	mov	r0, r8
   31744:	e7ef      	b.n	31726 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   31746:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   31748:	f033 0303 	bics.w	r3, r3, #3
   3174c:	d110      	bne.n	31770 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3174e:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   31750:	6862      	ldr	r2, [r4, #4]
   31752:	b93a      	cbnz	r2, 31764 <queue_insert+0xac>
	list->head = node;
   31754:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   31758:	2104      	movs	r1, #4
   3175a:	f104 0010 	add.w	r0, r4, #16
   3175e:	f000 fc57 	bl	32010 <z_handle_obj_poll_events>
   31762:	e7c7      	b.n	316f4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   31764:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   31766:	f003 0303 	and.w	r3, r3, #3
   3176a:	4303      	orrs	r3, r0
   3176c:	6013      	str	r3, [r2, #0]
   3176e:	e7e4      	b.n	3173a <queue_insert+0x82>
   31770:	4313      	orrs	r3, r2
   31772:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   31774:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   31776:	f003 0303 	and.w	r3, r3, #3
   3177a:	4303      	orrs	r3, r0
   3177c:	602b      	str	r3, [r5, #0]
}
   3177e:	e7eb      	b.n	31758 <queue_insert+0xa0>

00031780 <z_queue_node_peek>:
{
   31780:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   31782:	4604      	mov	r4, r0
   31784:	b130      	cbz	r0, 31794 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   31786:	6802      	ldr	r2, [r0, #0]
   31788:	0793      	lsls	r3, r2, #30
   3178a:	d003      	beq.n	31794 <z_queue_node_peek+0x14>
		ret = anode->data;
   3178c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3178e:	b109      	cbz	r1, 31794 <z_queue_node_peek+0x14>
			k_free(anode);
   31790:	f000 fc5f 	bl	32052 <k_free>
}
   31794:	4620      	mov	r0, r4
   31796:	bd10      	pop	{r4, pc}

00031798 <z_impl_k_queue_init>:
	list->head = NULL;
   31798:	2300      	movs	r3, #0
	list->tail = NULL;
   3179a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   3179e:	f100 0308 	add.w	r3, r0, #8
   317a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   317a6:	f100 0310 	add.w	r3, r0, #16
   317aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   317ae:	4770      	bx	lr

000317b0 <k_queue_append>:
{
   317b0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   317b2:	2301      	movs	r3, #1
   317b4:	9300      	str	r3, [sp, #0]
   317b6:	2300      	movs	r3, #0
{
   317b8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   317ba:	4619      	mov	r1, r3
   317bc:	f7ff ff7c 	bl	316b8 <queue_insert>
}
   317c0:	b003      	add	sp, #12
   317c2:	f85d fb04 	ldr.w	pc, [sp], #4

000317c6 <k_queue_prepend>:
{
   317c6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   317c8:	2300      	movs	r3, #0
{
   317ca:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   317cc:	9300      	str	r3, [sp, #0]
   317ce:	4619      	mov	r1, r3
   317d0:	f7ff ff72 	bl	316b8 <queue_insert>
}
   317d4:	b003      	add	sp, #12
   317d6:	f85d fb04 	ldr.w	pc, [sp], #4

000317da <k_queue_append_list>:
{
   317da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   317de:	4605      	mov	r5, r0
   317e0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   317e2:	460c      	mov	r4, r1
   317e4:	b391      	cbz	r1, 3184c <k_queue_append_list+0x72>
   317e6:	b38a      	cbz	r2, 3184c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   317e8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   317ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   317f0:	f3ef 8811 	mrs	r8, BASEPRI
   317f4:	f383 8812 	msr	BASEPRI_MAX, r3
   317f8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   317fc:	4638      	mov	r0, r7
   317fe:	f000 f9e4 	bl	31bca <z_unpend_first_thread>
   31802:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   31806:	b920      	cbnz	r0, 31812 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   31808:	686b      	ldr	r3, [r5, #4]
   3180a:	b9cb      	cbnz	r3, 31840 <k_queue_append_list+0x66>
	list->head = node;
   3180c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   3180e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   31810:	e00a      	b.n	31828 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   31812:	6144      	str	r4, [r0, #20]
   31814:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   31818:	f000 f963 	bl	31ae2 <z_ready_thread>
		head = *(void **)head;
   3181c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   3181e:	4638      	mov	r0, r7
   31820:	f000 f9d3 	bl	31bca <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   31824:	2c00      	cmp	r4, #0
   31826:	d1ee      	bne.n	31806 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   31828:	2104      	movs	r1, #4
   3182a:	f105 0010 	add.w	r0, r5, #16
   3182e:	f000 fbef 	bl	32010 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   31832:	4638      	mov	r0, r7
   31834:	4641      	mov	r1, r8
   31836:	f7f6 fda7 	bl	28388 <z_reschedule>
	return 0;
   3183a:	2000      	movs	r0, #0
}
   3183c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   31840:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   31842:	f001 0103 	and.w	r1, r1, #3
   31846:	430c      	orrs	r4, r1
   31848:	601c      	str	r4, [r3, #0]
}
   3184a:	e7e0      	b.n	3180e <k_queue_append_list+0x34>
		return -EINVAL;
   3184c:	f06f 0015 	mvn.w	r0, #21
   31850:	e7f4      	b.n	3183c <k_queue_append_list+0x62>

00031852 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   31852:	b15a      	cbz	r2, 3186c <z_impl_k_sem_init+0x1a>
   31854:	428a      	cmp	r2, r1
   31856:	d309      	bcc.n	3186c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   31858:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3185c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   31860:	e9c0 0000 	strd	r0, r0, [r0]
   31864:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   31868:	2000      	movs	r0, #0
   3186a:	4770      	bx	lr
		return -EINVAL;
   3186c:	f06f 0015 	mvn.w	r0, #21
}
   31870:	4770      	bx	lr

00031872 <notify_queue_locked>:
	if (queue != NULL) {
   31872:	b120      	cbz	r0, 3187e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   31874:	2200      	movs	r2, #0
   31876:	4611      	mov	r1, r2
   31878:	3088      	adds	r0, #136	; 0x88
   3187a:	f000 b9ce 	b.w	31c1a <z_sched_wake>
}
   3187e:	4770      	bx	lr

00031880 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   31880:	68c3      	ldr	r3, [r0, #12]
{
   31882:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   31884:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   31888:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3188c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   3188e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   31890:	d502      	bpl.n	31898 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   31892:	3010      	adds	r0, #16
   31894:	f000 f9de 	bl	31c54 <z_abort_timeout>
}
   31898:	4620      	mov	r0, r4
   3189a:	bd10      	pop	{r4, pc}

0003189c <cancel_async_locked>:
{
   3189c:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3189e:	68c0      	ldr	r0, [r0, #12]
{
   318a0:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   318a2:	0784      	lsls	r4, r0, #30
   318a4:	f3c0 0140 	ubfx	r1, r0, #1, #1
   318a8:	d416      	bmi.n	318d8 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   318aa:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   318ae:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   318b0:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   318b2:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   318b4:	d510      	bpl.n	318d8 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   318b6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   318ba:	b168      	cbz	r0, 318d8 <cancel_async_locked+0x3c>
   318bc:	4283      	cmp	r3, r0
   318be:	d11d      	bne.n	318fc <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   318c0:	6818      	ldr	r0, [r3, #0]
   318c2:	b999      	cbnz	r1, 318ec <cancel_async_locked+0x50>
   318c4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   318c8:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   318cc:	428b      	cmp	r3, r1
   318ce:	d101      	bne.n	318d4 <cancel_async_locked+0x38>
	list->tail = node;
   318d0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   318d4:	2200      	movs	r2, #0
   318d6:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   318d8:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   318da:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   318de:	bf1e      	ittt	ne
   318e0:	f042 0202 	orrne.w	r2, r2, #2
   318e4:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   318e6:	f002 000f 	andne.w	r0, r2, #15
}
   318ea:	bd10      	pop	{r4, pc}
   318ec:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   318ee:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   318f2:	4283      	cmp	r3, r0
	list->tail = node;
   318f4:	bf08      	it	eq
   318f6:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   318fa:	e7eb      	b.n	318d4 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   318fc:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   318fe:	6800      	ldr	r0, [r0, #0]
   31900:	e7db      	b.n	318ba <cancel_async_locked+0x1e>

00031902 <work_timeout>:
{
   31902:	b513      	push	{r0, r1, r4, lr}
   31904:	f04f 0340 	mov.w	r3, #64	; 0x40
   31908:	f3ef 8411 	mrs	r4, BASEPRI
   3190c:	f383 8812 	msr	BASEPRI_MAX, r3
   31910:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   31914:	2300      	movs	r3, #0
   31916:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   31918:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   3191c:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   31920:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   31922:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   31926:	d505      	bpl.n	31934 <work_timeout+0x32>
		queue = dw->queue;
   31928:	6983      	ldr	r3, [r0, #24]
   3192a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   3192c:	a901      	add	r1, sp, #4
   3192e:	3810      	subs	r0, #16
   31930:	f7f6 fbee 	bl	28110 <submit_to_queue_locked>
	__asm__ volatile(
   31934:	f384 8811 	msr	BASEPRI, r4
   31938:	f3bf 8f6f 	isb	sy
}
   3193c:	b002      	add	sp, #8
   3193e:	bd10      	pop	{r4, pc}

00031940 <k_work_init>:
{
   31940:	b538      	push	{r3, r4, r5, lr}
   31942:	4604      	mov	r4, r0
   31944:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   31946:	2210      	movs	r2, #16
   31948:	2100      	movs	r1, #0
   3194a:	f7fb f9c1 	bl	2ccd0 <memset>
   3194e:	6065      	str	r5, [r4, #4]
}
   31950:	bd38      	pop	{r3, r4, r5, pc}

00031952 <k_work_submit_to_queue>:
{
   31952:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31954:	9001      	str	r0, [sp, #4]
   31956:	4608      	mov	r0, r1
	__asm__ volatile(
   31958:	f04f 0340 	mov.w	r3, #64	; 0x40
   3195c:	f3ef 8511 	mrs	r5, BASEPRI
   31960:	f383 8812 	msr	BASEPRI_MAX, r3
   31964:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   31968:	a901      	add	r1, sp, #4
   3196a:	f7f6 fbd1 	bl	28110 <submit_to_queue_locked>
   3196e:	4604      	mov	r4, r0
	__asm__ volatile(
   31970:	f385 8811 	msr	BASEPRI, r5
   31974:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   31978:	2800      	cmp	r0, #0
   3197a:	dd04      	ble.n	31986 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   3197c:	f7f6 ffc6 	bl	2890c <z_impl_k_is_preempt_thread>
   31980:	b108      	cbz	r0, 31986 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   31982:	f7f6 ff15 	bl	287b0 <z_impl_k_yield>
}
   31986:	4620      	mov	r0, r4
   31988:	b003      	add	sp, #12
   3198a:	bd30      	pop	{r4, r5, pc}

0003198c <k_work_init_delayable>:
{
   3198c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   3198e:	2230      	movs	r2, #48	; 0x30
{
   31990:	4604      	mov	r4, r0
   31992:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   31994:	2100      	movs	r1, #0
   31996:	f7fb f99b 	bl	2ccd0 <memset>
   3199a:	f44f 7380 	mov.w	r3, #256	; 0x100
   3199e:	6065      	str	r5, [r4, #4]
   319a0:	60e3      	str	r3, [r4, #12]
}
   319a2:	bd38      	pop	{r3, r4, r5, pc}

000319a4 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   319a4:	b538      	push	{r3, r4, r5, lr}
   319a6:	4604      	mov	r4, r0
	__asm__ volatile(
   319a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   319ac:	f3ef 8511 	mrs	r5, BASEPRI
   319b0:	f383 8812 	msr	BASEPRI_MAX, r3
   319b4:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   319b8:	f7ff ff62 	bl	31880 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   319bc:	4620      	mov	r0, r4
   319be:	f7ff ff6d 	bl	3189c <cancel_async_locked>
	__asm__ volatile(
   319c2:	f385 8811 	msr	BASEPRI, r5
   319c6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   319ca:	bd38      	pop	{r3, r4, r5, pc}

000319cc <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   319cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   319ce:	4604      	mov	r4, r0
   319d0:	460d      	mov	r5, r1
	__asm__ volatile(
   319d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   319d6:	f3ef 8711 	mrs	r7, BASEPRI
   319da:	f383 8812 	msr	BASEPRI_MAX, r3
   319de:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   319e2:	68c3      	ldr	r3, [r0, #12]
   319e4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   319e8:	2b00      	cmp	r3, #0
   319ea:	bf14      	ite	ne
   319ec:	2601      	movne	r6, #1
   319ee:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   319f0:	d009      	beq.n	31a06 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   319f2:	f7ff ff45 	bl	31880 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   319f6:	4620      	mov	r0, r4
   319f8:	f7ff ff50 	bl	3189c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   319fc:	4629      	mov	r1, r5
   319fe:	4620      	mov	r0, r4
   31a00:	f7f6 fb68 	bl	280d4 <cancel_sync_locked>
   31a04:	4603      	mov	r3, r0
	__asm__ volatile(
   31a06:	f387 8811 	msr	BASEPRI, r7
   31a0a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   31a0e:	b13b      	cbz	r3, 31a20 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   31a10:	f04f 32ff 	mov.w	r2, #4294967295
   31a14:	f04f 33ff 	mov.w	r3, #4294967295
   31a18:	f105 0008 	add.w	r0, r5, #8
   31a1c:	f7f6 fa56 	bl	27ecc <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   31a20:	4630      	mov	r0, r6
   31a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00031a24 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   31a24:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   31a28:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   31a2a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   31a2c:	2300      	movs	r3, #0
	node->prev = NULL;
   31a2e:	e9c0 3300 	strd	r3, r3, [r0]
}
   31a32:	4770      	bx	lr

00031a34 <unpend_thread_no_timeout>:
{
   31a34:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   31a36:	f7ff fff5 	bl	31a24 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   31a3a:	7b43      	ldrb	r3, [r0, #13]
   31a3c:	f023 0302 	bic.w	r3, r3, #2
   31a40:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   31a42:	2300      	movs	r3, #0
   31a44:	6083      	str	r3, [r0, #8]
}
   31a46:	bd08      	pop	{r3, pc}

00031a48 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   31a48:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   31a4c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   31a50:	4283      	cmp	r3, r0
		return b2 - b1;
   31a52:	bf14      	ite	ne
   31a54:	1ac0      	subne	r0, r0, r3
	return 0;
   31a56:	2000      	moveq	r0, #0
}
   31a58:	4770      	bx	lr

00031a5a <z_unpend_thread_no_timeout>:
{
   31a5a:	b508      	push	{r3, lr}
	__asm__ volatile(
   31a5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   31a60:	f3ef 8111 	mrs	r1, BASEPRI
   31a64:	f383 8812 	msr	BASEPRI_MAX, r3
   31a68:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   31a6c:	f7ff ffe2 	bl	31a34 <unpend_thread_no_timeout>
	__asm__ volatile(
   31a70:	f381 8811 	msr	BASEPRI, r1
   31a74:	f3bf 8f6f 	isb	sy
}
   31a78:	bd08      	pop	{r3, pc}

00031a7a <z_unpend_thread>:
{
   31a7a:	b510      	push	{r4, lr}
	__asm__ volatile(
   31a7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   31a80:	f3ef 8411 	mrs	r4, BASEPRI
   31a84:	f383 8812 	msr	BASEPRI_MAX, r3
   31a88:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   31a8c:	f7ff ffd2 	bl	31a34 <unpend_thread_no_timeout>
	__asm__ volatile(
   31a90:	f384 8811 	msr	BASEPRI, r4
   31a94:	f3bf 8f6f 	isb	sy
}
   31a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31a9c:	3018      	adds	r0, #24
   31a9e:	f000 b8d9 	b.w	31c54 <z_abort_timeout>

00031aa2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   31aa2:	4603      	mov	r3, r0
   31aa4:	b920      	cbnz	r0, 31ab0 <z_reschedule_irqlock+0xe>
   31aa6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   31aaa:	b90a      	cbnz	r2, 31ab0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   31aac:	f7ec bea8 	b.w	1e800 <arch_swap>
   31ab0:	f383 8811 	msr	BASEPRI, r3
   31ab4:	f3bf 8f6f 	isb	sy
}
   31ab8:	4770      	bx	lr

00031aba <z_reschedule_unlocked>:
	__asm__ volatile(
   31aba:	f04f 0340 	mov.w	r3, #64	; 0x40
   31abe:	f3ef 8011 	mrs	r0, BASEPRI
   31ac2:	f383 8812 	msr	BASEPRI_MAX, r3
   31ac6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   31aca:	f7ff bfea 	b.w	31aa2 <z_reschedule_irqlock>

00031ace <z_priq_dumb_best>:
{
   31ace:	4603      	mov	r3, r0
	return list->head == list;
   31ad0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31ad2:	4283      	cmp	r3, r0
   31ad4:	d003      	beq.n	31ade <z_priq_dumb_best+0x10>
	if (n != NULL) {
   31ad6:	2800      	cmp	r0, #0
   31ad8:	bf38      	it	cc
   31ada:	2000      	movcc	r0, #0
   31adc:	4770      	bx	lr
	struct k_thread *thread = NULL;
   31ade:	2000      	movs	r0, #0
}
   31ae0:	4770      	bx	lr

00031ae2 <z_ready_thread>:
{
   31ae2:	b510      	push	{r4, lr}
   31ae4:	f04f 0340 	mov.w	r3, #64	; 0x40
   31ae8:	f3ef 8411 	mrs	r4, BASEPRI
   31aec:	f383 8812 	msr	BASEPRI_MAX, r3
   31af0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   31af4:	f7f6 fd0e 	bl	28514 <ready_thread>
	__asm__ volatile(
   31af8:	f384 8811 	msr	BASEPRI, r4
   31afc:	f3bf 8f6f 	isb	sy
}
   31b00:	bd10      	pop	{r4, pc}

00031b02 <z_thread_timeout>:
{
   31b02:	b510      	push	{r4, lr}
   31b04:	4601      	mov	r1, r0
	__asm__ volatile(
   31b06:	f04f 0340 	mov.w	r3, #64	; 0x40
   31b0a:	f3ef 8411 	mrs	r4, BASEPRI
   31b0e:	f383 8812 	msr	BASEPRI_MAX, r3
   31b12:	f3bf 8f6f 	isb	sy
		if (!killed) {
   31b16:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   31b1a:	f013 0f28 	tst.w	r3, #40	; 0x28
   31b1e:	d10d      	bne.n	31b3c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   31b20:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   31b24:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   31b26:	b10b      	cbz	r3, 31b2c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   31b28:	f7ff ff84 	bl	31a34 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   31b2c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   31b30:	f023 0314 	bic.w	r3, r3, #20
   31b34:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   31b38:	f7f6 fcec 	bl	28514 <ready_thread>
	__asm__ volatile(
   31b3c:	f384 8811 	msr	BASEPRI, r4
   31b40:	f3bf 8f6f 	isb	sy
}
   31b44:	bd10      	pop	{r4, pc}

00031b46 <add_to_waitq_locked>:
{
   31b46:	b538      	push	{r3, r4, r5, lr}
   31b48:	4604      	mov	r4, r0
   31b4a:	460d      	mov	r5, r1
	unready_thread(thread);
   31b4c:	f7f6 fd38 	bl	285c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   31b50:	7b63      	ldrb	r3, [r4, #13]
   31b52:	f043 0302 	orr.w	r3, r3, #2
   31b56:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   31b58:	b1b5      	cbz	r5, 31b88 <add_to_waitq_locked+0x42>
	return list->head == list;
   31b5a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   31b5c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31b5e:	429d      	cmp	r5, r3
   31b60:	bf08      	it	eq
   31b62:	2300      	moveq	r3, #0
   31b64:	2b00      	cmp	r3, #0
   31b66:	bf38      	it	cc
   31b68:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31b6a:	b19b      	cbz	r3, 31b94 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   31b6c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   31b70:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   31b74:	4291      	cmp	r1, r2
   31b76:	d008      	beq.n	31b8a <add_to_waitq_locked+0x44>
		return b2 - b1;
   31b78:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   31b7a:	2a00      	cmp	r2, #0
   31b7c:	dd05      	ble.n	31b8a <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   31b7e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   31b80:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   31b84:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   31b86:	605c      	str	r4, [r3, #4]
}
   31b88:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   31b8a:	686a      	ldr	r2, [r5, #4]
   31b8c:	4293      	cmp	r3, r2
   31b8e:	d001      	beq.n	31b94 <add_to_waitq_locked+0x4e>
   31b90:	681b      	ldr	r3, [r3, #0]
   31b92:	e7ea      	b.n	31b6a <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   31b94:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   31b96:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   31b9a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31b9c:	606c      	str	r4, [r5, #4]
   31b9e:	e7f3      	b.n	31b88 <add_to_waitq_locked+0x42>

00031ba0 <z_unpend1_no_timeout>:
{
   31ba0:	b510      	push	{r4, lr}
	__asm__ volatile(
   31ba2:	f04f 0340 	mov.w	r3, #64	; 0x40
   31ba6:	f3ef 8411 	mrs	r4, BASEPRI
   31baa:	f383 8812 	msr	BASEPRI_MAX, r3
   31bae:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   31bb2:	f7ff ff8c 	bl	31ace <z_priq_dumb_best>
		if (thread != NULL) {
   31bb6:	4601      	mov	r1, r0
   31bb8:	b108      	cbz	r0, 31bbe <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   31bba:	f7ff ff3b 	bl	31a34 <unpend_thread_no_timeout>
	__asm__ volatile(
   31bbe:	f384 8811 	msr	BASEPRI, r4
   31bc2:	f3bf 8f6f 	isb	sy
}
   31bc6:	4608      	mov	r0, r1
   31bc8:	bd10      	pop	{r4, pc}

00031bca <z_unpend_first_thread>:
{
   31bca:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   31bcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   31bd0:	f3ef 8511 	mrs	r5, BASEPRI
   31bd4:	f383 8812 	msr	BASEPRI_MAX, r3
   31bd8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   31bdc:	f7ff ff77 	bl	31ace <z_priq_dumb_best>
		if (thread != NULL) {
   31be0:	4604      	mov	r4, r0
   31be2:	b120      	cbz	r0, 31bee <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   31be4:	f7ff ff26 	bl	31a34 <unpend_thread_no_timeout>
   31be8:	3018      	adds	r0, #24
   31bea:	f000 f833 	bl	31c54 <z_abort_timeout>
	__asm__ volatile(
   31bee:	f385 8811 	msr	BASEPRI, r5
   31bf2:	f3bf 8f6f 	isb	sy
}
   31bf6:	4620      	mov	r0, r4
   31bf8:	bd38      	pop	{r3, r4, r5, pc}

00031bfa <z_unpend_all>:
{
   31bfa:	b538      	push	{r3, r4, r5, lr}
   31bfc:	4605      	mov	r5, r0
	int need_sched = 0;
   31bfe:	2000      	movs	r0, #0
	return list->head == list;
   31c00:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31c02:	42a5      	cmp	r5, r4
   31c04:	d000      	beq.n	31c08 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   31c06:	b904      	cbnz	r4, 31c0a <z_unpend_all+0x10>
}
   31c08:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   31c0a:	4620      	mov	r0, r4
   31c0c:	f7ff ff35 	bl	31a7a <z_unpend_thread>
		z_ready_thread(thread);
   31c10:	4620      	mov	r0, r4
   31c12:	f7ff ff66 	bl	31ae2 <z_ready_thread>
		need_sched = 1;
   31c16:	2001      	movs	r0, #1
   31c18:	e7f2      	b.n	31c00 <z_unpend_all+0x6>

00031c1a <z_sched_wake>:
{
   31c1a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   31c1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   31c20:	f3ef 8511 	mrs	r5, BASEPRI
   31c24:	f383 8812 	msr	BASEPRI_MAX, r3
   31c28:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   31c2c:	f7ff ff4f 	bl	31ace <z_priq_dumb_best>
		if (thread != NULL) {
   31c30:	4604      	mov	r4, r0
   31c32:	b150      	cbz	r0, 31c4a <z_sched_wake+0x30>
   31c34:	67c1      	str	r1, [r0, #124]	; 0x7c
   31c36:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   31c38:	f7ff fefc 	bl	31a34 <unpend_thread_no_timeout>
   31c3c:	3018      	adds	r0, #24
   31c3e:	f000 f809 	bl	31c54 <z_abort_timeout>
			ready_thread(thread);
   31c42:	4620      	mov	r0, r4
   31c44:	f7f6 fc66 	bl	28514 <ready_thread>
			ret = true;
   31c48:	2001      	movs	r0, #1
	__asm__ volatile(
   31c4a:	f385 8811 	msr	BASEPRI, r5
   31c4e:	f3bf 8f6f 	isb	sy
}
   31c52:	bd38      	pop	{r3, r4, r5, pc}

00031c54 <z_abort_timeout>:
{
   31c54:	b510      	push	{r4, lr}
	__asm__ volatile(
   31c56:	f04f 0240 	mov.w	r2, #64	; 0x40
   31c5a:	f3ef 8411 	mrs	r4, BASEPRI
   31c5e:	f382 8812 	msr	BASEPRI_MAX, r2
   31c62:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   31c66:	6803      	ldr	r3, [r0, #0]
   31c68:	b13b      	cbz	r3, 31c7a <z_abort_timeout+0x26>
			remove_timeout(to);
   31c6a:	f7f6 fee7 	bl	28a3c <remove_timeout>
			ret = 0;
   31c6e:	2000      	movs	r0, #0
	__asm__ volatile(
   31c70:	f384 8811 	msr	BASEPRI, r4
   31c74:	f3bf 8f6f 	isb	sy
}
   31c78:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   31c7a:	f06f 0015 	mvn.w	r0, #21
   31c7e:	e7f7      	b.n	31c70 <z_abort_timeout+0x1c>

00031c80 <z_get_next_timeout_expiry>:
{
   31c80:	b510      	push	{r4, lr}
	__asm__ volatile(
   31c82:	f04f 0340 	mov.w	r3, #64	; 0x40
   31c86:	f3ef 8411 	mrs	r4, BASEPRI
   31c8a:	f383 8812 	msr	BASEPRI_MAX, r3
   31c8e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   31c92:	f7f6 feed 	bl	28a70 <next_timeout>
	__asm__ volatile(
   31c96:	f384 8811 	msr	BASEPRI, r4
   31c9a:	f3bf 8f6f 	isb	sy
}
   31c9e:	bd10      	pop	{r4, pc}

00031ca0 <z_set_timeout_expiry>:
{
   31ca0:	b570      	push	{r4, r5, r6, lr}
   31ca2:	4604      	mov	r4, r0
   31ca4:	460d      	mov	r5, r1
	__asm__ volatile(
   31ca6:	f04f 0340 	mov.w	r3, #64	; 0x40
   31caa:	f3ef 8611 	mrs	r6, BASEPRI
   31cae:	f383 8812 	msr	BASEPRI_MAX, r3
   31cb2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   31cb6:	f7f6 fedb 	bl	28a70 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   31cba:	2801      	cmp	r0, #1
   31cbc:	dd05      	ble.n	31cca <z_set_timeout_expiry+0x2a>
   31cbe:	42a0      	cmp	r0, r4
   31cc0:	db03      	blt.n	31cca <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   31cc2:	4629      	mov	r1, r5
   31cc4:	4620      	mov	r0, r4
   31cc6:	f7f3 fa89 	bl	251dc <sys_clock_set_timeout>
	__asm__ volatile(
   31cca:	f386 8811 	msr	BASEPRI, r6
   31cce:	f3bf 8f6f 	isb	sy
}
   31cd2:	bd70      	pop	{r4, r5, r6, pc}

00031cd4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   31cd4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   31cd6:	f7f6 ffeb 	bl	28cb0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   31cda:	bd08      	pop	{r3, pc}

00031cdc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   31cdc:	b108      	cbz	r0, 31ce2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   31cde:	f7ed b8e7 	b.w	1eeb0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   31ce2:	4770      	bx	lr

00031ce4 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   31ce4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31ce6:	1c4b      	adds	r3, r1, #1
   31ce8:	bf08      	it	eq
   31cea:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   31cee:	4604      	mov	r4, r0
   31cf0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31cf2:	d013      	beq.n	31d1c <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31cf4:	ea54 0105 	orrs.w	r1, r4, r5
   31cf8:	d103      	bne.n	31d02 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   31cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   31cfe:	f7f6 bfd7 	b.w	28cb0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   31d02:	f06f 0101 	mvn.w	r1, #1
   31d06:	1a0a      	subs	r2, r1, r0
   31d08:	f04f 31ff 	mov.w	r1, #4294967295
   31d0c:	eb61 0305 	sbc.w	r3, r1, r5
   31d10:	2a00      	cmp	r2, #0
   31d12:	f173 0100 	sbcs.w	r1, r3, #0
   31d16:	db02      	blt.n	31d1e <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   31d18:	4610      	mov	r0, r2
   31d1a:	4619      	mov	r1, r3
}
   31d1c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   31d1e:	f7f6 ffc7 	bl	28cb0 <sys_clock_tick_get>
   31d22:	2c01      	cmp	r4, #1
   31d24:	f175 0300 	sbcs.w	r3, r5, #0
   31d28:	bfbc      	itt	lt
   31d2a:	2401      	movlt	r4, #1
   31d2c:	2500      	movlt	r5, #0
   31d2e:	1820      	adds	r0, r4, r0
   31d30:	eb45 0101 	adc.w	r1, r5, r1
   31d34:	e7f2      	b.n	31d1c <sys_clock_timeout_end_calc+0x38>

00031d36 <k_timer_init>:
	timer->status = 0U;
   31d36:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   31d38:	e9c0 1208 	strd	r1, r2, [r0, #32]
   31d3c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   31d40:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   31d44:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   31d48:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   31d4a:	6343      	str	r3, [r0, #52]	; 0x34
}
   31d4c:	4770      	bx	lr

00031d4e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   31d4e:	b510      	push	{r4, lr}
   31d50:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   31d52:	f7ff ff7f 	bl	31c54 <z_abort_timeout>

	if (inactive) {
   31d56:	b9b0      	cbnz	r0, 31d86 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   31d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31d5a:	b10b      	cbz	r3, 31d60 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   31d5c:	4620      	mov	r0, r4
   31d5e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   31d60:	f104 0018 	add.w	r0, r4, #24
   31d64:	f7ff ff1c 	bl	31ba0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   31d68:	b168      	cbz	r0, 31d86 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   31d6a:	f7ff feba 	bl	31ae2 <z_ready_thread>
	__asm__ volatile(
   31d6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   31d72:	f3ef 8011 	mrs	r0, BASEPRI
   31d76:	f383 8812 	msr	BASEPRI_MAX, r3
   31d7a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   31d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   31d82:	f7ff be8e 	b.w	31aa2 <z_reschedule_irqlock>
   31d86:	bd10      	pop	{r4, pc}

00031d88 <clear_event_registrations>:
	while (num_events--) {
   31d88:	2314      	movs	r3, #20
{
   31d8a:	b570      	push	{r4, r5, r6, lr}
   31d8c:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   31d90:	2400      	movs	r4, #0
   31d92:	2601      	movs	r6, #1
	while (num_events--) {
   31d94:	4281      	cmp	r1, r0
   31d96:	d100      	bne.n	31d9a <clear_event_registrations+0x12>
}
   31d98:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   31d9a:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   31d9e:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   31da2:	f003 031f 	and.w	r3, r3, #31
   31da6:	2b08      	cmp	r3, #8
   31da8:	d80d      	bhi.n	31dc6 <clear_event_registrations+0x3e>
   31daa:	fa06 f303 	lsl.w	r3, r6, r3
   31dae:	f413 7f8b 	tst.w	r3, #278	; 0x116
   31db2:	d008      	beq.n	31dc6 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   31db4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   31db8:	b12b      	cbz	r3, 31dc6 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   31dba:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   31dbe:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   31dc0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   31dc2:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   31dc6:	f382 8811 	msr	BASEPRI, r2
   31dca:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   31dce:	f04f 0340 	mov.w	r3, #64	; 0x40
   31dd2:	f3ef 8211 	mrs	r2, BASEPRI
   31dd6:	f383 8812 	msr	BASEPRI_MAX, r3
   31dda:	f3bf 8f6f 	isb	sy
   31dde:	3914      	subs	r1, #20
   31de0:	e7d8      	b.n	31d94 <clear_event_registrations+0xc>

00031de2 <add_event>:
{
   31de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31de4:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   31de6:	e9d0 2300 	ldrd	r2, r3, [r0]
   31dea:	4290      	cmp	r0, r2
   31dec:	4604      	mov	r4, r0
   31dee:	460d      	mov	r5, r1
   31df0:	d105      	bne.n	31dfe <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   31df2:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   31df4:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   31df8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   31dfa:	6065      	str	r5, [r4, #4]
}
   31dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   31dfe:	2b00      	cmp	r3, #0
   31e00:	d0f7      	beq.n	31df2 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31e02:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   31e04:	b100      	cbz	r0, 31e08 <add_event+0x26>
   31e06:	3860      	subs	r0, #96	; 0x60
   31e08:	b107      	cbz	r7, 31e0c <add_event+0x2a>
   31e0a:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31e0c:	4639      	mov	r1, r7
   31e0e:	f7ff fe1b 	bl	31a48 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   31e12:	2800      	cmp	r0, #0
   31e14:	dced      	bgt.n	31df2 <add_event+0x10>
	return list->head == list;
   31e16:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31e18:	42b4      	cmp	r4, r6
   31e1a:	d0ea      	beq.n	31df2 <add_event+0x10>
   31e1c:	2e00      	cmp	r6, #0
   31e1e:	bf38      	it	cc
   31e20:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   31e22:	2e00      	cmp	r6, #0
   31e24:	d0e5      	beq.n	31df2 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   31e26:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   31e28:	b101      	cbz	r1, 31e2c <add_event+0x4a>
   31e2a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   31e2c:	4638      	mov	r0, r7
   31e2e:	f7ff fe0b 	bl	31a48 <z_sched_prio_cmp>
   31e32:	2800      	cmp	r0, #0
   31e34:	dd05      	ble.n	31e42 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   31e36:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   31e38:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   31e3c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   31e3e:	6075      	str	r5, [r6, #4]
			return;
   31e40:	e7dc      	b.n	31dfc <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   31e42:	6863      	ldr	r3, [r4, #4]
   31e44:	42b3      	cmp	r3, r6
   31e46:	d0d4      	beq.n	31df2 <add_event+0x10>
   31e48:	6836      	ldr	r6, [r6, #0]
   31e4a:	e7ea      	b.n	31e22 <add_event+0x40>

00031e4c <register_events>:
{
   31e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   31e50:	2500      	movs	r5, #0
{
   31e52:	468b      	mov	fp, r1
   31e54:	4614      	mov	r4, r2
   31e56:	461f      	mov	r7, r3
   31e58:	4682      	mov	sl, r0
	int events_registered = 0;
   31e5a:	462e      	mov	r6, r5
	event->poller = NULL;
   31e5c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   31e5e:	455d      	cmp	r5, fp
   31e60:	db02      	blt.n	31e68 <register_events+0x1c>
}
   31e62:	4630      	mov	r0, r6
   31e64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e68:	f04f 0340 	mov.w	r3, #64	; 0x40
   31e6c:	f3ef 8911 	mrs	r9, BASEPRI
   31e70:	f383 8812 	msr	BASEPRI_MAX, r3
   31e74:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   31e78:	f89a 300d 	ldrb.w	r3, [sl, #13]
   31e7c:	f003 031f 	and.w	r3, r3, #31
   31e80:	3b01      	subs	r3, #1
   31e82:	2b07      	cmp	r3, #7
   31e84:	d80f      	bhi.n	31ea6 <register_events+0x5a>
   31e86:	e8df f003 	tbb	[pc, r3]
   31e8a:	041e      	.short	0x041e
   31e8c:	0e0e0a0e 	.word	0x0e0e0a0e
   31e90:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   31e92:	f8da 3010 	ldr.w	r3, [sl, #16]
   31e96:	689b      	ldr	r3, [r3, #8]
   31e98:	b12b      	cbz	r3, 31ea6 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   31e9a:	2302      	movs	r3, #2
   31e9c:	e020      	b.n	31ee0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   31e9e:	f8da 3010 	ldr.w	r3, [sl, #16]
   31ea2:	681b      	ldr	r3, [r3, #0]
   31ea4:	bb8b      	cbnz	r3, 31f0a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   31ea6:	bb47      	cbnz	r7, 31efa <register_events+0xae>
   31ea8:	7823      	ldrb	r3, [r4, #0]
   31eaa:	b333      	cbz	r3, 31efa <register_events+0xae>
	switch (event->type) {
   31eac:	f89a 300d 	ldrb.w	r3, [sl, #13]
   31eb0:	f003 031f 	and.w	r3, r3, #31
   31eb4:	3b01      	subs	r3, #1
   31eb6:	2b07      	cmp	r3, #7
   31eb8:	d830      	bhi.n	31f1c <register_events+0xd0>
   31eba:	e8df f003 	tbb	[pc, r3]
   31ebe:	2833      	.short	0x2833
   31ec0:	2f2f282f 	.word	0x2f2f282f
   31ec4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   31ec6:	f8da 3010 	ldr.w	r3, [sl, #16]
   31eca:	689b      	ldr	r3, [r3, #8]
   31ecc:	2b00      	cmp	r3, #0
   31ece:	d0ea      	beq.n	31ea6 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   31ed0:	2301      	movs	r3, #1
   31ed2:	e005      	b.n	31ee0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   31ed4:	f8da 3010 	ldr.w	r3, [sl, #16]
   31ed8:	6a1b      	ldr	r3, [r3, #32]
   31eda:	2b00      	cmp	r3, #0
   31edc:	d0e3      	beq.n	31ea6 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   31ede:	2310      	movs	r3, #16
	event->state |= state;
   31ee0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   31ee4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   31ee8:	f3c2 3145 	ubfx	r1, r2, #13, #6
   31eec:	430b      	orrs	r3, r1
   31eee:	f363 3252 	bfi	r2, r3, #13, #6
   31ef2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   31ef6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   31efa:	f389 8811 	msr	BASEPRI, r9
   31efe:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   31f02:	3501      	adds	r5, #1
   31f04:	f10a 0a14 	add.w	sl, sl, #20
   31f08:	e7a9      	b.n	31e5e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   31f0a:	2304      	movs	r3, #4
   31f0c:	e7e8      	b.n	31ee0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   31f0e:	f8da 0010 	ldr.w	r0, [sl, #16]
   31f12:	4622      	mov	r2, r4
   31f14:	4651      	mov	r1, sl
   31f16:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   31f18:	f7ff ff63 	bl	31de2 <add_event>
	event->poller = poller;
   31f1c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   31f20:	3601      	adds	r6, #1
   31f22:	e7ea      	b.n	31efa <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   31f24:	f8da 0010 	ldr.w	r0, [sl, #16]
   31f28:	4622      	mov	r2, r4
   31f2a:	4651      	mov	r1, sl
   31f2c:	e7f4      	b.n	31f18 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   31f2e:	f8da 0010 	ldr.w	r0, [sl, #16]
   31f32:	4622      	mov	r2, r4
   31f34:	4651      	mov	r1, sl
   31f36:	3024      	adds	r0, #36	; 0x24
   31f38:	e7ee      	b.n	31f18 <register_events+0xcc>

00031f3a <signal_poll_event>:
{
   31f3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   31f3e:	6884      	ldr	r4, [r0, #8]
{
   31f40:	4605      	mov	r5, r0
   31f42:	460e      	mov	r6, r1
	if (poller != NULL) {
   31f44:	b144      	cbz	r4, 31f58 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   31f46:	7863      	ldrb	r3, [r4, #1]
   31f48:	2b01      	cmp	r3, #1
   31f4a:	d138      	bne.n	31fbe <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   31f4c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   31f50:	f013 0302 	ands.w	r3, r3, #2
   31f54:	d10a      	bne.n	31f6c <signal_poll_event+0x32>
		poller->is_polling = false;
   31f56:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   31f58:	68eb      	ldr	r3, [r5, #12]
   31f5a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   31f5e:	430e      	orrs	r6, r1
	event->poller = NULL;
   31f60:	2000      	movs	r0, #0
	event->state |= state;
   31f62:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   31f66:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   31f68:	60eb      	str	r3, [r5, #12]
	return retcode;
   31f6a:	e00d      	b.n	31f88 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   31f6c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   31f70:	f04f 31ff 	mov.w	r1, #4294967295
   31f74:	f06f 0001 	mvn.w	r0, #1
   31f78:	428b      	cmp	r3, r1
   31f7a:	bf08      	it	eq
   31f7c:	4282      	cmpeq	r2, r0
   31f7e:	d105      	bne.n	31f8c <signal_poll_event+0x52>
		poller->is_polling = false;
   31f80:	2300      	movs	r3, #0
   31f82:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   31f84:	f06f 000a 	mvn.w	r0, #10
}
   31f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   31f8c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   31f90:	4640      	mov	r0, r8
   31f92:	f7ff fd72 	bl	31a7a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   31f96:	2e08      	cmp	r6, #8
   31f98:	bf0c      	ite	eq
   31f9a:	f06f 0303 	mvneq.w	r3, #3
   31f9e:	2300      	movne	r3, #0
   31fa0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   31fa2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   31fa6:	06db      	lsls	r3, r3, #27
   31fa8:	d102      	bne.n	31fb0 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   31faa:	f854 7c48 	ldr.w	r7, [r4, #-72]
   31fae:	b10f      	cbz	r7, 31fb4 <signal_poll_event+0x7a>
		poller->is_polling = false;
   31fb0:	2300      	movs	r3, #0
   31fb2:	e7d0      	b.n	31f56 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   31fb4:	4640      	mov	r0, r8
   31fb6:	f7ff fd94 	bl	31ae2 <z_ready_thread>
		poller->is_polling = false;
   31fba:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   31fbc:	e7cc      	b.n	31f58 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   31fbe:	2b02      	cmp	r3, #2
   31fc0:	d1f6      	bne.n	31fb0 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   31fc2:	7823      	ldrb	r3, [r4, #0]
   31fc4:	2b00      	cmp	r3, #0
   31fc6:	d0c7      	beq.n	31f58 <signal_poll_event+0x1e>
   31fc8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   31fcc:	2f00      	cmp	r7, #0
   31fce:	d0f4      	beq.n	31fba <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   31fd0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   31fd4:	f1a4 0914 	sub.w	r9, r4, #20
   31fd8:	f104 0014 	add.w	r0, r4, #20
   31fdc:	f7ff fe3a 	bl	31c54 <z_abort_timeout>
		twork->poll_result = 0;
   31fe0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   31fe4:	4649      	mov	r1, r9
   31fe6:	4638      	mov	r0, r7
   31fe8:	f7ff fcb3 	bl	31952 <k_work_submit_to_queue>
		poller->is_polling = false;
   31fec:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   31ff0:	e7b2      	b.n	31f58 <signal_poll_event+0x1e>

00031ff2 <k_poll_event_init>:
{
   31ff2:	b510      	push	{r4, lr}
	event->type = type;
   31ff4:	04d2      	lsls	r2, r2, #19
   31ff6:	0209      	lsls	r1, r1, #8
   31ff8:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   31ffc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   32000:	430a      	orrs	r2, r1
   32002:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   32004:	2400      	movs	r4, #0
	event->type = type;
   32006:	430a      	orrs	r2, r1
	event->obj = obj;
   32008:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   3200c:	6084      	str	r4, [r0, #8]
}
   3200e:	bd10      	pop	{r4, pc}

00032010 <z_handle_obj_poll_events>:
{
   32010:	4603      	mov	r3, r0
	return list->head == list;
   32012:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   32014:	4283      	cmp	r3, r0
   32016:	d008      	beq.n	3202a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   32018:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3201c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3201e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   32020:	2300      	movs	r3, #0
	node->prev = NULL;
   32022:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   32026:	f7ff bf88 	b.w	31f3a <signal_poll_event>
}
   3202a:	4770      	bx	lr

0003202c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   3202c:	2304      	movs	r3, #4
   3202e:	18d2      	adds	r2, r2, r3
{
   32030:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   32032:	4604      	mov	r4, r0
   32034:	d207      	bcs.n	32046 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   32036:	2600      	movs	r6, #0
   32038:	2700      	movs	r7, #0
   3203a:	e9cd 6700 	strd	r6, r7, [sp]
   3203e:	4319      	orrs	r1, r3
   32040:	f7ff fa79 	bl	31536 <k_heap_aligned_alloc>
	if (mem == NULL) {
   32044:	b910      	cbnz	r0, 3204c <z_heap_aligned_alloc+0x20>
		return NULL;
   32046:	2000      	movs	r0, #0
}
   32048:	b002      	add	sp, #8
   3204a:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   3204c:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   32050:	e7fa      	b.n	32048 <z_heap_aligned_alloc+0x1c>

00032052 <k_free>:
	if (ptr != NULL) {
   32052:	b120      	cbz	r0, 3205e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   32054:	1f01      	subs	r1, r0, #4
   32056:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3205a:	f7ff bab3 	b.w	315c4 <k_heap_free>
}
   3205e:	4770      	bx	lr

00032060 <k_malloc>:
{
   32060:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   32062:	2004      	movs	r0, #4
   32064:	f7f6 bf66 	b.w	28f34 <k_aligned_alloc>

00032068 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   32068:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
   3206a:	4770      	bx	lr

0003206c <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   3206c:	4770      	bx	lr

0003206e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3206e:	4770      	bx	lr

00032070 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   32070:	f7f3 bf8c 	b.w	25f8c <SystemInit>
